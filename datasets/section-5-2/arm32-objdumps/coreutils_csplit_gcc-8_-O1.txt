
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	115a0 <__assert_fail@plt+0x48>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	r6, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #155648	; 0x26000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #155648	; 0x26000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #155648	; 0x26000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #155648	; 0x26000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #155648	; 0x26000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #155648	; 0x26000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #155648	; 0x26000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #155648	; 0x26000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #155648	; 0x26000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #155648	; 0x26000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #155648	; 0x26000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #155648	; 0x26000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #155648	; 0x26000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #155648	; 0x26000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #155648	; 0x26000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #155648	; 0x26000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #155648	; 0x26000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #155648	; 0x26000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <pthread_mutex_init@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #155648	; 0x26000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <__strtoull_internal@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #155648	; 0x26000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #155648	; 0x26000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #155648	; 0x26000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #155648	; 0x26000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #155648	; 0x26000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #155648	; 0x26000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #155648	; 0x26000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #155648	; 0x26000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #155648	; 0x26000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #155648	; 0x26000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #155648	; 0x26000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #155648	; 0x26000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #155648	; 0x26000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #155648	; 0x26000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #155648	; 0x26000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #155648	; 0x26000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <fwrite@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #155648	; 0x26000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <lseek64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #155648	; 0x26000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #155648	; 0x26000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <strcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #155648	; 0x26000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__fpending@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #155648	; 0x26000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #155648	; 0x26000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #155648	; 0x26000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #155648	; 0x26000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #155648	; 0x26000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #155648	; 0x26000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #155648	; 0x26000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #155648	; 0x26000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__ctype_tolower_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #155648	; 0x26000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <__ctype_toupper_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #155648	; 0x26000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__gmon_start__@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #155648	; 0x26000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <getopt_long@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #155648	; 0x26000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <__ctype_b_loc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #155648	; 0x26000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <exit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #155648	; 0x26000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <strlen@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #155648	; 0x26000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #155648	; 0x26000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__errno_location@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #155648	; 0x26000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <iswalnum@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #155648	; 0x26000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <__sprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #155648	; 0x26000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <__cxa_atexit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #155648	; 0x26000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <memset@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #155648	; 0x26000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <btowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #155648	; 0x26000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <__printf_chk@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #155648	; 0x26000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fileno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #155648	; 0x26000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__fprintf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #155648	; 0x26000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #155648	; 0x26000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #155648	; 0x26000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #155648	; 0x26000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #155648	; 0x26000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #155648	; 0x26000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <strrchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #155648	; 0x26000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <nl_langinfo@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #155648	; 0x26000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <fputc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #155648	; 0x26000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <__strtoll_internal@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #155648	; 0x26000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #155648	; 0x26000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #155648	; 0x26000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #155648	; 0x26000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <strncmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #155648	; 0x26000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <abort@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #155648	; 0x26000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <close@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #155648	; 0x26000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <__snprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #155648	; 0x26000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__assert_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #155648	; 0x26000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

Disassembly of section .text:

00011564 <.text>:
   11564:	mov	fp, #0
   11568:	mov	lr, #0
   1156c:	pop	{r1}		; (ldr r1, [sp], #4)
   11570:	mov	r2, sp
   11574:	push	{r2}		; (str r2, [sp, #-4]!)
   11578:	push	{r0}		; (str r0, [sp, #-4]!)
   1157c:	ldr	ip, [pc, #16]	; 11594 <__assert_fail@plt+0x3c>
   11580:	push	{ip}		; (str ip, [sp, #-4]!)
   11584:	ldr	r0, [pc, #12]	; 11598 <__assert_fail@plt+0x40>
   11588:	ldr	r3, [pc, #12]	; 1159c <__assert_fail@plt+0x44>
   1158c:	bl	113b4 <__libc_start_main@plt>
   11590:	bl	11534 <abort@plt>
   11594:	ldrdeq	r6, [r2], -r0
   11598:	ldrdeq	r2, [r1], -r8
   1159c:	andeq	r6, r2, r0, ror r1
   115a0:	ldr	r3, [pc, #20]	; 115bc <__assert_fail@plt+0x64>
   115a4:	ldr	r2, [pc, #20]	; 115c0 <__assert_fail@plt+0x68>
   115a8:	add	r3, pc, r3
   115ac:	ldr	r2, [r3, r2]
   115b0:	cmp	r2, #0
   115b4:	bxeq	lr
   115b8:	b	113e4 <__gmon_start__@plt>
   115bc:	andeq	r6, r2, r0, asr sl
   115c0:	andeq	r0, r0, r0, asr r1
   115c4:	ldr	r0, [pc, #24]	; 115e4 <__assert_fail@plt+0x8c>
   115c8:	ldr	r3, [pc, #24]	; 115e8 <__assert_fail@plt+0x90>
   115cc:	cmp	r3, r0
   115d0:	bxeq	lr
   115d4:	ldr	r3, [pc, #16]	; 115ec <__assert_fail@plt+0x94>
   115d8:	cmp	r3, #0
   115dc:	bxeq	lr
   115e0:	bx	r3
   115e4:	andeq	r8, r3, r8, lsr #3
   115e8:	andeq	r8, r3, r8, lsr #3
   115ec:	andeq	r0, r0, r0
   115f0:	ldr	r0, [pc, #36]	; 1161c <__assert_fail@plt+0xc4>
   115f4:	ldr	r1, [pc, #36]	; 11620 <__assert_fail@plt+0xc8>
   115f8:	sub	r1, r1, r0
   115fc:	asr	r1, r1, #2
   11600:	add	r1, r1, r1, lsr #31
   11604:	asrs	r1, r1, #1
   11608:	bxeq	lr
   1160c:	ldr	r3, [pc, #16]	; 11624 <__assert_fail@plt+0xcc>
   11610:	cmp	r3, #0
   11614:	bxeq	lr
   11618:	bx	r3
   1161c:	andeq	r8, r3, r8, lsr #3
   11620:	andeq	r8, r3, r8, lsr #3
   11624:	andeq	r0, r0, r0
   11628:	push	{r4, lr}
   1162c:	ldr	r4, [pc, #24]	; 1164c <__assert_fail@plt+0xf4>
   11630:	ldrb	r3, [r4]
   11634:	cmp	r3, #0
   11638:	popne	{r4, pc}
   1163c:	bl	115c4 <__assert_fail@plt+0x6c>
   11640:	mov	r3, #1
   11644:	strb	r3, [r4]
   11648:	pop	{r4, pc}
   1164c:	andeq	r8, r3, r4, asr #3
   11650:	b	115f0 <__assert_fail@plt+0x98>
   11654:	strd	r4, [sp, #-16]!
   11658:	str	r6, [sp, #8]
   1165c:	str	lr, [sp, #12]
   11660:	sub	sp, sp, #8
   11664:	mov	r5, r0
   11668:	movw	r4, #33224	; 0x81c8
   1166c:	movt	r4, #3
   11670:	ldr	r0, [r4]
   11674:	ldr	r1, [r4, #4]
   11678:	bl	11360 <strcpy@plt>
   1167c:	ldr	r3, [r4, #8]
   11680:	cmp	r3, #0
   11684:	beq	116d4 <__assert_fail@plt+0x17c>
   11688:	movw	r4, #33224	; 0x81c8
   1168c:	movt	r4, #3
   11690:	ldr	r6, [r4]
   11694:	ldr	r0, [r4, #4]
   11698:	bl	11414 <strlen@plt>
   1169c:	ldr	r3, [r4, #8]
   116a0:	str	r5, [sp]
   116a4:	mvn	r2, #0
   116a8:	mov	r1, #1
   116ac:	add	r0, r6, r0
   116b0:	bl	11444 <__sprintf_chk@plt>
   116b4:	movw	r3, #33224	; 0x81c8
   116b8:	movt	r3, #3
   116bc:	ldr	r0, [r3]
   116c0:	add	sp, sp, #8
   116c4:	ldrd	r4, [sp]
   116c8:	ldr	r6, [sp, #8]
   116cc:	add	sp, sp, #12
   116d0:	pop	{pc}		; (ldr pc, [sp], #4)
   116d4:	movw	r3, #33224	; 0x81c8
   116d8:	movt	r3, #3
   116dc:	ldr	r4, [r3]
   116e0:	ldr	r0, [r3, #4]
   116e4:	bl	11414 <strlen@plt>
   116e8:	movw	r3, #33116	; 0x815c
   116ec:	movt	r3, #3
   116f0:	ldr	r3, [r3]
   116f4:	str	r5, [sp, #4]
   116f8:	str	r3, [sp]
   116fc:	movw	r3, #25368	; 0x6318
   11700:	movt	r3, #2
   11704:	mvn	r2, #0
   11708:	mov	r1, #1
   1170c:	add	r0, r4, r0
   11710:	bl	11444 <__sprintf_chk@plt>
   11714:	b	116b4 <__assert_fail@plt+0x15c>
   11718:	movw	r3, #33224	; 0x81c8
   1171c:	movt	r3, #3
   11720:	ldrb	r3, [r3, #12]
   11724:	tst	r3, #255	; 0xff
   11728:	bxeq	lr
   1172c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11730:	strd	r6, [sp, #8]
   11734:	strd	r8, [sp, #16]
   11738:	str	sl, [sp, #24]
   1173c:	str	lr, [sp, #28]
   11740:	mov	r7, r0
   11744:	movw	r3, #33224	; 0x81c8
   11748:	movt	r3, #3
   1174c:	ldr	r4, [r3, #16]
   11750:	mov	sl, #3
   11754:	mov	r9, #0
   11758:	movw	r8, #27632	; 0x6bf0
   1175c:	movt	r8, #2
   11760:	subs	r4, r4, #1
   11764:	bmi	117c4 <__assert_fail@plt+0x26c>
   11768:	mov	r0, r4
   1176c:	bl	11654 <__assert_fail@plt+0xfc>
   11770:	mov	r6, r0
   11774:	bl	112dc <unlink@plt>
   11778:	cmp	r0, #0
   1177c:	beq	11760 <__assert_fail@plt+0x208>
   11780:	bl	1142c <__errno_location@plt>
   11784:	ldr	r5, [r0]
   11788:	cmp	r5, #2
   1178c:	movne	r3, r7
   11790:	orreq	r3, r7, #1
   11794:	cmp	r3, #0
   11798:	bne	11760 <__assert_fail@plt+0x208>
   1179c:	mov	r2, r6
   117a0:	mov	r1, sl
   117a4:	mov	r0, r9
   117a8:	bl	161f4 <__assert_fail@plt+0x4c9c>
   117ac:	mov	r3, r0
   117b0:	mov	r2, r8
   117b4:	mov	r1, r5
   117b8:	mov	r0, r9
   117bc:	bl	11384 <error@plt>
   117c0:	b	11760 <__assert_fail@plt+0x208>
   117c4:	movw	r3, #33224	; 0x81c8
   117c8:	movt	r3, #3
   117cc:	mov	r2, #0
   117d0:	str	r2, [r3, #16]
   117d4:	ldrd	r4, [sp]
   117d8:	ldrd	r6, [sp, #8]
   117dc:	ldrd	r8, [sp, #16]
   117e0:	ldr	sl, [sp, #24]
   117e4:	add	sp, sp, #28
   117e8:	pop	{pc}		; (ldr pc, [sp], #4)
   117ec:	push	{lr}		; (str lr, [sp, #-4]!)
   117f0:	sub	sp, sp, #132	; 0x84
   117f4:	bl	1182c <__assert_fail@plt+0x2d4>
   117f8:	mov	r2, sp
   117fc:	ldr	r1, [pc, #36]	; 11828 <__assert_fail@plt+0x2d0>
   11800:	mov	r0, #0
   11804:	bl	11228 <sigprocmask@plt>
   11808:	mov	r0, #0
   1180c:	bl	11718 <__assert_fail@plt+0x1c0>
   11810:	mov	r2, #0
   11814:	mov	r1, sp
   11818:	mov	r0, #2
   1181c:	bl	11228 <sigprocmask@plt>
   11820:	mov	r0, #1
   11824:	bl	11408 <exit@plt>
   11828:	ldrdeq	r8, [r3], -ip
   1182c:	movw	r3, #33224	; 0x81c8
   11830:	movt	r3, #3
   11834:	ldr	r0, [r3, #148]	; 0x94
   11838:	cmp	r0, #0
   1183c:	bxeq	lr
   11840:	strd	r4, [sp, #-20]!	; 0xffffffec
   11844:	strd	r6, [sp, #8]
   11848:	str	lr, [sp, #16]
   1184c:	sub	sp, sp, #132	; 0x84
   11850:	ldr	r3, [r0]
   11854:	tst	r3, #32
   11858:	bne	118c8 <__assert_fail@plt+0x370>
   1185c:	bl	13c50 <__assert_fail@plt+0x26f8>
   11860:	cmp	r0, #0
   11864:	bne	11914 <__assert_fail@plt+0x3bc>
   11868:	movw	r3, #33224	; 0x81c8
   1186c:	movt	r3, #3
   11870:	ldrd	r0, [r3, #160]	; 0xa0
   11874:	orrs	r3, r0, r1
   11878:	bne	11890 <__assert_fail@plt+0x338>
   1187c:	movw	r3, #33224	; 0x81c8
   11880:	movt	r3, #3
   11884:	ldrb	r3, [r3, #168]	; 0xa8
   11888:	cmp	r3, #0
   1188c:	bne	11958 <__assert_fail@plt+0x400>
   11890:	movw	r3, #33224	; 0x81c8
   11894:	movt	r3, #3
   11898:	ldrb	r3, [r3, #169]	; 0xa9
   1189c:	cmp	r3, #0
   118a0:	beq	119dc <__assert_fail@plt+0x484>
   118a4:	movw	r3, #33224	; 0x81c8
   118a8:	movt	r3, #3
   118ac:	mov	r2, #0
   118b0:	str	r2, [r3, #148]	; 0x94
   118b4:	add	sp, sp, #132	; 0x84
   118b8:	ldrd	r4, [sp]
   118bc:	ldrd	r6, [sp, #8]
   118c0:	add	sp, sp, #16
   118c4:	pop	{pc}		; (ldr pc, [sp], #4)
   118c8:	mov	r2, #5
   118cc:	movw	r1, #25376	; 0x6320
   118d0:	movt	r1, #2
   118d4:	mov	r0, #0
   118d8:	bl	112d0 <dcgettext@plt>
   118dc:	mov	r5, r0
   118e0:	movw	r4, #33224	; 0x81c8
   118e4:	movt	r4, #3
   118e8:	ldr	r1, [r4, #152]	; 0x98
   118ec:	mov	r0, #4
   118f0:	bl	160d0 <__assert_fail@plt+0x4b78>
   118f4:	mov	r3, r0
   118f8:	mov	r2, r5
   118fc:	mov	r1, #0
   11900:	mov	r0, r1
   11904:	bl	11384 <error@plt>
   11908:	mov	r3, #0
   1190c:	str	r3, [r4, #148]	; 0x94
   11910:	bl	117ec <__assert_fail@plt+0x294>
   11914:	bl	1142c <__errno_location@plt>
   11918:	ldr	r5, [r0]
   1191c:	movw	r4, #33224	; 0x81c8
   11920:	movt	r4, #3
   11924:	ldr	r2, [r4, #152]	; 0x98
   11928:	mov	r1, #3
   1192c:	mov	r0, #0
   11930:	bl	161f4 <__assert_fail@plt+0x4c9c>
   11934:	mov	r3, r0
   11938:	movw	r2, #27632	; 0x6bf0
   1193c:	movt	r2, #2
   11940:	mov	r1, r5
   11944:	mov	r0, #0
   11948:	bl	11384 <error@plt>
   1194c:	mov	r3, #0
   11950:	str	r3, [r4, #148]	; 0x94
   11954:	bl	117ec <__assert_fail@plt+0x294>
   11958:	movw	r4, #33224	; 0x81c8
   1195c:	movt	r4, #3
   11960:	mov	r2, sp
   11964:	add	r1, r4, #20
   11968:	mov	r0, #0
   1196c:	bl	11228 <sigprocmask@plt>
   11970:	ldr	r6, [r4, #152]	; 0x98
   11974:	mov	r0, r6
   11978:	bl	112dc <unlink@plt>
   1197c:	mov	r7, r0
   11980:	bl	1142c <__errno_location@plt>
   11984:	ldr	r5, [r0]
   11988:	ldr	r3, [r4, #16]
   1198c:	sub	r3, r3, #1
   11990:	str	r3, [r4, #16]
   11994:	mov	r2, #0
   11998:	mov	r1, sp
   1199c:	mov	r0, #2
   119a0:	bl	11228 <sigprocmask@plt>
   119a4:	cmp	r7, #0
   119a8:	cmpne	r5, #2
   119ac:	beq	118a4 <__assert_fail@plt+0x34c>
   119b0:	mov	r2, r6
   119b4:	mov	r1, #3
   119b8:	mov	r0, #0
   119bc:	bl	161f4 <__assert_fail@plt+0x4c9c>
   119c0:	mov	r3, r0
   119c4:	movw	r2, #27632	; 0x6bf0
   119c8:	movt	r2, #2
   119cc:	mov	r1, r5
   119d0:	mov	r0, #0
   119d4:	bl	11384 <error@plt>
   119d8:	b	118a4 <__assert_fail@plt+0x34c>
   119dc:	movw	r3, #33212	; 0x81bc
   119e0:	movt	r3, #3
   119e4:	ldr	r4, [r3]
   119e8:	mov	r2, sp
   119ec:	bl	13fcc <__assert_fail@plt+0x2a74>
   119f0:	mov	r3, r0
   119f4:	movw	r2, #29112	; 0x71b8
   119f8:	movt	r2, #2
   119fc:	mov	r1, #1
   11a00:	mov	r0, r4
   11a04:	bl	1148c <__fprintf_chk@plt>
   11a08:	b	118a4 <__assert_fail@plt+0x34c>
   11a0c:	str	r7, [sp, #-8]!
   11a10:	str	lr, [sp, #4]
   11a14:	sub	sp, sp, #32
   11a18:	mov	r9, r0
   11a1c:	mov	r4, r2
   11a20:	mov	r5, r3
   11a24:	movw	r3, #33208	; 0x81b8
   11a28:	movt	r3, #3
   11a2c:	ldr	r6, [r3]
   11a30:	mov	r2, #5
   11a34:	movw	r1, #25396	; 0x6334
   11a38:	movt	r1, #2
   11a3c:	mov	r0, #0
   11a40:	bl	112d0 <dcgettext@plt>
   11a44:	mov	r7, r0
   11a48:	movw	r3, #33472	; 0x82c0
   11a4c:	movt	r3, #3
   11a50:	ldr	r8, [r3]
   11a54:	add	r2, sp, #8
   11a58:	ldrd	r0, [r9, #8]
   11a5c:	bl	13fcc <__assert_fail@plt+0x2a74>
   11a60:	bl	163c0 <__assert_fail@plt+0x4e68>
   11a64:	str	r0, [sp]
   11a68:	mov	r3, r8
   11a6c:	mov	r2, r7
   11a70:	mov	r1, #1
   11a74:	mov	r0, r6
   11a78:	bl	1148c <__fprintf_chk@plt>
   11a7c:	orrs	r3, r4, r5
   11a80:	beq	11ad0 <__assert_fail@plt+0x578>
   11a84:	movw	r3, #33208	; 0x81b8
   11a88:	movt	r3, #3
   11a8c:	ldr	r6, [r3]
   11a90:	mov	r2, #5
   11a94:	movw	r1, #25432	; 0x6358
   11a98:	movt	r1, #2
   11a9c:	mov	r0, #0
   11aa0:	bl	112d0 <dcgettext@plt>
   11aa4:	mov	r7, r0
   11aa8:	add	r2, sp, #8
   11aac:	mov	r0, r4
   11ab0:	mov	r1, r5
   11ab4:	bl	13fcc <__assert_fail@plt+0x2a74>
   11ab8:	mov	r3, r0
   11abc:	mov	r2, r7
   11ac0:	mov	r1, #1
   11ac4:	mov	r0, r6
   11ac8:	bl	1148c <__fprintf_chk@plt>
   11acc:	bl	117ec <__assert_fail@plt+0x294>
   11ad0:	movw	r3, #33208	; 0x81b8
   11ad4:	movt	r3, #3
   11ad8:	ldr	r1, [r3]
   11adc:	mov	r0, #10
   11ae0:	bl	114ec <fputc@plt>
   11ae4:	b	11acc <__assert_fail@plt+0x574>
   11ae8:	str	r4, [sp, #-8]!
   11aec:	str	lr, [sp, #4]
   11af0:	mov	r4, r0
   11af4:	mov	r0, #1
   11af8:	bl	11718 <__assert_fail@plt+0x1c0>
   11afc:	mov	r1, #0
   11b00:	mov	r0, r4
   11b04:	bl	112a0 <signal@plt>
   11b08:	mov	r0, r4
   11b0c:	bl	111d4 <raise@plt>
   11b10:	ldr	r4, [sp]
   11b14:	add	sp, sp, #4
   11b18:	pop	{pc}		; (ldr pc, [sp], #4)
   11b1c:	strd	r4, [sp, #-12]!
   11b20:	str	lr, [sp, #8]
   11b24:	sub	sp, sp, #12
   11b28:	movw	r3, #33224	; 0x81c8
   11b2c:	movt	r3, #3
   11b30:	ldr	r2, [r3, #172]	; 0xac
   11b34:	ldr	r3, [r3, #176]	; 0xb0
   11b38:	cmp	r2, r3
   11b3c:	beq	11b90 <__assert_fail@plt+0x638>
   11b40:	movw	r2, #33224	; 0x81c8
   11b44:	movt	r2, #3
   11b48:	ldr	r1, [r2, #180]	; 0xb4
   11b4c:	ldr	r3, [r2, #172]	; 0xac
   11b50:	add	r0, r3, #1
   11b54:	str	r0, [r2, #172]	; 0xac
   11b58:	lsl	r3, r3, #6
   11b5c:	add	r0, r1, r3
   11b60:	mov	r2, #0
   11b64:	strb	r2, [r0, #30]
   11b68:	mov	r4, #0
   11b6c:	mov	r5, #0
   11b70:	strd	r4, [r0, #16]
   11b74:	strb	r2, [r0, #28]
   11b78:	strd	r4, [r0, #8]
   11b7c:	strd	r4, [r1, r3]
   11b80:	add	sp, sp, #12
   11b84:	ldrd	r4, [sp]
   11b88:	add	sp, sp, #8
   11b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b90:	movw	r4, #33224	; 0x81c8
   11b94:	movt	r4, #3
   11b98:	mov	r3, #64	; 0x40
   11b9c:	str	r3, [sp]
   11ba0:	mvn	r3, #0
   11ba4:	mov	r2, #1
   11ba8:	add	r1, r4, #176	; 0xb0
   11bac:	ldr	r0, [r4, #180]	; 0xb4
   11bb0:	bl	246ac <__assert_fail@plt+0x13154>
   11bb4:	str	r0, [r4, #180]	; 0xb4
   11bb8:	b	11b40 <__assert_fail@plt+0x5e8>
   11bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11bc0:	strd	r6, [sp, #8]
   11bc4:	str	r8, [sp, #16]
   11bc8:	str	lr, [sp, #20]
   11bcc:	mov	r4, r0
   11bd0:	movw	r3, #33224	; 0x81c8
   11bd4:	movt	r3, #3
   11bd8:	ldr	r3, [r3, #148]	; 0x94
   11bdc:	ldr	r2, [r0]
   11be0:	mov	r1, #1
   11be4:	ldr	r0, [r0, #4]
   11be8:	bl	112ac <fwrite_unlocked@plt>
   11bec:	ldr	r3, [r4]
   11bf0:	cmp	r3, r0
   11bf4:	bne	11c24 <__assert_fail@plt+0x6cc>
   11bf8:	movw	r3, #33224	; 0x81c8
   11bfc:	movt	r3, #3
   11c00:	ldrd	r4, [r3, #160]	; 0xa0
   11c04:	adds	r6, r4, r0
   11c08:	adc	r7, r5, r0, asr #31
   11c0c:	strd	r6, [r3, #160]	; 0xa0
   11c10:	ldrd	r4, [sp]
   11c14:	ldrd	r6, [sp, #8]
   11c18:	ldr	r8, [sp, #16]
   11c1c:	add	sp, sp, #20
   11c20:	pop	{pc}		; (ldr pc, [sp], #4)
   11c24:	bl	1142c <__errno_location@plt>
   11c28:	ldr	r5, [r0]
   11c2c:	mov	r2, #5
   11c30:	movw	r1, #25376	; 0x6320
   11c34:	movt	r1, #2
   11c38:	mov	r0, #0
   11c3c:	bl	112d0 <dcgettext@plt>
   11c40:	mov	r6, r0
   11c44:	movw	r4, #33224	; 0x81c8
   11c48:	movt	r4, #3
   11c4c:	ldr	r1, [r4, #152]	; 0x98
   11c50:	mov	r0, #4
   11c54:	bl	160d0 <__assert_fail@plt+0x4b78>
   11c58:	mov	r3, r0
   11c5c:	mov	r2, r6
   11c60:	mov	r1, r5
   11c64:	mov	r0, #0
   11c68:	bl	11384 <error@plt>
   11c6c:	mov	r3, #0
   11c70:	str	r3, [r4, #148]	; 0x94
   11c74:	bl	117ec <__assert_fail@plt+0x294>
   11c78:	strd	r4, [sp, #-16]!
   11c7c:	str	r6, [sp, #8]
   11c80:	str	lr, [sp, #12]
   11c84:	mov	r5, r0
   11c88:	ldr	r0, [r0, #32]
   11c8c:	cmp	r0, #0
   11c90:	beq	11ca8 <__assert_fail@plt+0x750>
   11c94:	ldr	r4, [r0, #652]	; 0x28c
   11c98:	bl	13eac <__assert_fail@plt+0x2954>
   11c9c:	mov	r0, r4
   11ca0:	cmp	r4, #0
   11ca4:	bne	11c94 <__assert_fail@plt+0x73c>
   11ca8:	ldr	r0, [r5, #28]
   11cac:	bl	13eac <__assert_fail@plt+0x2954>
   11cb0:	mov	r0, r5
   11cb4:	bl	13eac <__assert_fail@plt+0x2954>
   11cb8:	ldrd	r4, [sp]
   11cbc:	ldr	r6, [sp, #8]
   11cc0:	add	sp, sp, #12
   11cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   11cc8:	strd	r4, [sp, #-20]!	; 0xffffffec
   11ccc:	strd	r6, [sp, #8]
   11cd0:	str	lr, [sp, #16]
   11cd4:	sub	sp, sp, #132	; 0x84
   11cd8:	movw	r5, #33224	; 0x81c8
   11cdc:	movt	r5, #3
   11ce0:	ldr	r4, [r5, #16]
   11ce4:	mov	r0, r4
   11ce8:	bl	11654 <__assert_fail@plt+0xfc>
   11cec:	str	r0, [r5, #152]	; 0x98
   11cf0:	cmn	r4, #-2147483647	; 0x80000001
   11cf4:	moveq	r7, #75	; 0x4b
   11cf8:	bne	11d30 <__assert_fail@plt+0x7d8>
   11cfc:	movw	r3, #33224	; 0x81c8
   11d00:	movt	r3, #3
   11d04:	ldr	r2, [r3, #152]	; 0x98
   11d08:	mov	r1, #3
   11d0c:	mov	r0, #0
   11d10:	bl	161f4 <__assert_fail@plt+0x4c9c>
   11d14:	mov	r3, r0
   11d18:	movw	r2, #27632	; 0x6bf0
   11d1c:	movt	r2, #2
   11d20:	mov	r1, r7
   11d24:	mov	r0, #0
   11d28:	bl	11384 <error@plt>
   11d2c:	bl	117ec <__assert_fail@plt+0x294>
   11d30:	mov	r6, r0
   11d34:	movw	r5, #33224	; 0x81c8
   11d38:	movt	r5, #3
   11d3c:	mov	r2, sp
   11d40:	add	r1, r5, #20
   11d44:	mov	r0, #0
   11d48:	bl	11228 <sigprocmask@plt>
   11d4c:	movw	r1, #25452	; 0x636c
   11d50:	movt	r1, #2
   11d54:	mov	r0, r6
   11d58:	bl	13dfc <__assert_fail@plt+0x28a4>
   11d5c:	mov	r6, r0
   11d60:	str	r0, [r5, #148]	; 0x94
   11d64:	bl	1142c <__errno_location@plt>
   11d68:	ldr	r7, [r0]
   11d6c:	cmp	r6, #0
   11d70:	addne	r4, r4, #1
   11d74:	str	r4, [r5, #16]
   11d78:	mov	r2, #0
   11d7c:	mov	r1, sp
   11d80:	mov	r0, #2
   11d84:	bl	11228 <sigprocmask@plt>
   11d88:	cmp	r6, #0
   11d8c:	beq	11cfc <__assert_fail@plt+0x7a4>
   11d90:	movw	r3, #33224	; 0x81c8
   11d94:	movt	r3, #3
   11d98:	mov	r0, #0
   11d9c:	mov	r1, #0
   11da0:	strd	r0, [r3, #160]	; 0xa0
   11da4:	add	sp, sp, #132	; 0x84
   11da8:	ldrd	r4, [sp]
   11dac:	ldrd	r6, [sp, #8]
   11db0:	add	sp, sp, #16
   11db4:	pop	{pc}		; (ldr pc, [sp], #4)
   11db8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11dbc:	strd	r6, [sp, #8]
   11dc0:	str	r8, [sp, #16]
   11dc4:	str	lr, [sp, #20]
   11dc8:	mov	r4, r0
   11dcc:	mov	r6, r1
   11dd0:	mov	r5, r2
   11dd4:	ldr	r3, [r0, #32]
   11dd8:	cmp	r3, #0
   11ddc:	beq	11e2c <__assert_fail@plt+0x8d4>
   11de0:	ldr	r7, [r0, #36]	; 0x24
   11de4:	ldr	r3, [r7]
   11de8:	cmp	r3, #80	; 0x50
   11dec:	beq	11e54 <__assert_fail@plt+0x8fc>
   11df0:	ldr	r3, [r4, #36]	; 0x24
   11df4:	ldr	r2, [r3, #4]
   11df8:	add	r1, r3, r2, lsl #3
   11dfc:	str	r6, [r1, #16]
   11e00:	str	r5, [r1, #12]
   11e04:	ldr	r1, [r3]
   11e08:	add	r1, r1, #1
   11e0c:	str	r1, [r3]
   11e10:	add	r2, r2, #1
   11e14:	str	r2, [r3, #4]
   11e18:	ldrd	r4, [sp]
   11e1c:	ldrd	r6, [sp, #8]
   11e20:	ldr	r8, [sp, #16]
   11e24:	add	sp, sp, #20
   11e28:	pop	{pc}		; (ldr pc, [sp], #4)
   11e2c:	mov	r0, #656	; 0x290
   11e30:	bl	24460 <__assert_fail@plt+0x12f08>
   11e34:	mov	r3, #0
   11e38:	str	r3, [r0, #652]	; 0x28c
   11e3c:	str	r3, [r0]
   11e40:	str	r3, [r0, #4]
   11e44:	str	r3, [r0, #8]
   11e48:	str	r0, [r4, #36]	; 0x24
   11e4c:	str	r0, [r4, #32]
   11e50:	b	11df0 <__assert_fail@plt+0x898>
   11e54:	mov	r0, #656	; 0x290
   11e58:	bl	24460 <__assert_fail@plt+0x12f08>
   11e5c:	mov	r3, #0
   11e60:	str	r3, [r0, #652]	; 0x28c
   11e64:	str	r3, [r0]
   11e68:	str	r3, [r0, #4]
   11e6c:	str	r3, [r0, #8]
   11e70:	str	r0, [r7, #652]	; 0x28c
   11e74:	ldr	r3, [r4, #36]	; 0x24
   11e78:	ldr	r3, [r3, #652]	; 0x28c
   11e7c:	str	r3, [r4, #36]	; 0x24
   11e80:	b	11df0 <__assert_fail@plt+0x898>
   11e84:	str	r4, [sp, #-8]!
   11e88:	str	lr, [sp, #4]
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #25456	; 0x6370
   11e94:	movt	r1, #2
   11e98:	mov	r0, #0
   11e9c:	bl	112d0 <dcgettext@plt>
   11ea0:	mov	r3, r0
   11ea4:	movw	r2, #27632	; 0x6bf0
   11ea8:	movt	r2, #2
   11eac:	mov	r1, #0
   11eb0:	mov	r0, r1
   11eb4:	bl	11384 <error@plt>
   11eb8:	bl	117ec <__assert_fail@plt+0x294>
   11ebc:	movw	r3, #33224	; 0x81c8
   11ec0:	movt	r3, #3
   11ec4:	ldrb	r3, [r3, #184]	; 0xb8
   11ec8:	cmp	r3, #0
   11ecc:	bne	121b0 <__assert_fail@plt+0xc58>
   11ed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ed4:	strd	r6, [sp, #8]
   11ed8:	strd	r8, [sp, #16]
   11edc:	strd	sl, [sp, #24]
   11ee0:	str	lr, [sp, #32]
   11ee4:	sub	sp, sp, #12
   11ee8:	movw	r3, #33224	; 0x81c8
   11eec:	movt	r3, #3
   11ef0:	ldr	r2, [r3, #188]	; 0xbc
   11ef4:	movw	r3, #8190	; 0x1ffe
   11ef8:	cmp	r2, r3
   11efc:	addgt	r6, r2, #1
   11f00:	movwle	r6, #8191	; 0x1fff
   11f04:	mov	r5, #0
   11f08:	movw	r7, #33224	; 0x81c8
   11f0c:	movt	r7, #3
   11f10:	b	12004 <__assert_fail@plt+0xaac>
   11f14:	mov	r2, r9
   11f18:	ldr	r1, [r7, #200]	; 0xc8
   11f1c:	bl	11264 <memcpy@plt>
   11f20:	add	r8, r8, r9
   11f24:	ldr	r3, [r4, #4]
   11f28:	add	r3, r3, r9
   11f2c:	str	r3, [r4, #4]
   11f30:	str	r5, [r7, #188]	; 0xbc
   11f34:	sub	r2, r6, r9
   11f38:	subs	r2, r2, #1
   11f3c:	beq	120a8 <__assert_fail@plt+0xb50>
   11f40:	b	12084 <__assert_fail@plt+0xb2c>
   11f44:	bl	1142c <__errno_location@plt>
   11f48:	ldr	r4, [r0]
   11f4c:	mov	r2, #5
   11f50:	movw	r1, #25476	; 0x6384
   11f54:	movt	r1, #2
   11f58:	mov	r0, #0
   11f5c:	bl	112d0 <dcgettext@plt>
   11f60:	mov	r2, r0
   11f64:	mov	r1, r4
   11f68:	mov	r0, #0
   11f6c:	bl	11384 <error@plt>
   11f70:	bl	117ec <__assert_fail@plt+0x294>
   11f74:	subs	r8, r0, r6
   11f78:	beq	11f9c <__assert_fail@plt+0xa44>
   11f7c:	ldrb	r3, [r7, #184]	; 0xb8
   11f80:	cmp	r3, #0
   11f84:	beq	1210c <__assert_fail@plt+0xbb4>
   11f88:	mov	r2, r8
   11f8c:	mov	r1, r6
   11f90:	mov	r0, r4
   11f94:	bl	11db8 <__assert_fail@plt+0x860>
   11f98:	add	r9, r9, #1
   11f9c:	str	r9, [r4, #24]
   11fa0:	ldrd	sl, [r7, #192]	; 0xc0
   11fa4:	adds	r0, sl, #1
   11fa8:	adc	r1, fp, #0
   11fac:	str	r0, [r4, #8]
   11fb0:	str	r1, [r4, #12]
   11fb4:	str	r0, [r4, #16]
   11fb8:	str	r1, [r4, #20]
   11fbc:	adds	r2, sl, r9
   11fc0:	adc	r3, fp, r9, asr #31
   11fc4:	strd	r2, [r7, #192]	; 0xc0
   11fc8:	cmp	r9, #0
   11fcc:	bne	12134 <__assert_fail@plt+0xbdc>
   11fd0:	ldrb	r3, [r7, #184]	; 0xb8
   11fd4:	cmp	r3, #0
   11fd8:	bne	12180 <__assert_fail@plt+0xc28>
   11fdc:	ldr	r0, [r4]
   11fe0:	asr	r1, r0, #31
   11fe4:	adds	r2, r0, r0
   11fe8:	adc	r3, r1, r1
   11fec:	asr	r1, r2, #31
   11ff0:	mov	r6, r2
   11ff4:	cmp	r1, r3
   11ff8:	bne	12130 <__assert_fail@plt+0xbd8>
   11ffc:	mov	r0, r4
   12000:	bl	11c78 <__assert_fail@plt+0x720>
   12004:	mov	r0, #48	; 0x30
   12008:	bl	24460 <__assert_fail@plt+0x12f08>
   1200c:	mov	r4, r0
   12010:	str	r5, [r0]
   12014:	mov	r3, #1
   12018:	str	r3, [sp]
   1201c:	mvn	r3, #0
   12020:	mov	r2, r6
   12024:	mov	r1, r0
   12028:	mov	r0, r5
   1202c:	bl	246ac <__assert_fail@plt+0x13154>
   12030:	mov	r8, r0
   12034:	str	r0, [r4, #28]
   12038:	str	r5, [r4, #4]
   1203c:	ldr	r3, [r7, #192]	; 0xc0
   12040:	ldr	r2, [r7, #196]	; 0xc4
   12044:	adds	r3, r3, #1
   12048:	adc	r2, r2, #0
   1204c:	str	r3, [r4, #16]
   12050:	str	r2, [r4, #20]
   12054:	str	r3, [r4, #8]
   12058:	str	r2, [r4, #12]
   1205c:	str	r5, [r4, #24]
   12060:	str	r5, [r4, #36]	; 0x24
   12064:	str	r5, [r4, #32]
   12068:	str	r5, [r4, #40]	; 0x28
   1206c:	ldr	r6, [r4]
   12070:	ldr	r9, [r7, #188]	; 0xbc
   12074:	cmp	r9, #0
   12078:	bne	11f14 <__assert_fail@plt+0x9bc>
   1207c:	subs	r2, r6, #1
   12080:	beq	11fd0 <__assert_fail@plt+0xa78>
   12084:	mov	r1, r8
   12088:	mov	r0, r5
   1208c:	bl	23df4 <__assert_fail@plt+0x1289c>
   12090:	subs	r2, r0, #0
   12094:	moveq	r3, #1
   12098:	strbeq	r3, [r7, #184]	; 0xb8
   1209c:	beq	120a8 <__assert_fail@plt+0xb50>
   120a0:	cmn	r2, #1
   120a4:	beq	11f44 <__assert_fail@plt+0x9ec>
   120a8:	ldr	r0, [r4, #4]
   120ac:	add	r2, r2, r0
   120b0:	str	r2, [r4, #4]
   120b4:	cmp	r2, #0
   120b8:	beq	11fd0 <__assert_fail@plt+0xa78>
   120bc:	ldr	r6, [r4, #28]
   120c0:	add	fp, r6, r2
   120c4:	mov	r3, #10
   120c8:	strb	r3, [r6, r2]
   120cc:	mov	r9, #0
   120d0:	mov	sl, r3
   120d4:	mov	r1, sl
   120d8:	mov	r0, r6
   120dc:	bl	11318 <rawmemchr@plt>
   120e0:	mov	r8, r0
   120e4:	cmp	fp, r0
   120e8:	beq	11f74 <__assert_fail@plt+0xa1c>
   120ec:	sub	r2, r0, r6
   120f0:	add	r2, r2, #1
   120f4:	mov	r1, r6
   120f8:	mov	r0, r4
   120fc:	bl	11db8 <__assert_fail@plt+0x860>
   12100:	add	r6, r8, #1
   12104:	add	r9, r9, #1
   12108:	b	120d4 <__assert_fail@plt+0xb7c>
   1210c:	mov	r1, r8
   12110:	mov	r0, r6
   12114:	bl	24854 <__assert_fail@plt+0x132fc>
   12118:	mov	r6, r0
   1211c:	ldr	r0, [r7, #200]	; 0xc8
   12120:	bl	13eac <__assert_fail@plt+0x2954>
   12124:	str	r6, [r7, #200]	; 0xc8
   12128:	str	r8, [r7, #188]	; 0xbc
   1212c:	b	11f9c <__assert_fail@plt+0xa44>
   12130:	bl	11e84 <__assert_fail@plt+0x92c>
   12134:	mov	r3, #0
   12138:	str	r3, [r4, #40]	; 0x28
   1213c:	ldr	r3, [r4, #32]
   12140:	str	r3, [r4, #36]	; 0x24
   12144:	movw	r3, #33224	; 0x81c8
   12148:	movt	r3, #3
   1214c:	ldr	r2, [r3, #204]	; 0xcc
   12150:	cmp	r2, #0
   12154:	movweq	r3, #33224	; 0x81c8
   12158:	movteq	r3, #3
   1215c:	streq	r4, [r3, #204]	; 0xcc
   12160:	bne	1216c <__assert_fail@plt+0xc14>
   12164:	b	1218c <__assert_fail@plt+0xc34>
   12168:	mov	r2, r3
   1216c:	ldr	r3, [r2, #40]	; 0x28
   12170:	cmp	r3, #0
   12174:	bne	12168 <__assert_fail@plt+0xc10>
   12178:	str	r4, [r2, #40]	; 0x28
   1217c:	b	1218c <__assert_fail@plt+0xc34>
   12180:	mov	r0, r4
   12184:	bl	11c78 <__assert_fail@plt+0x720>
   12188:	mov	r9, #0
   1218c:	adds	r0, r9, #0
   12190:	movne	r0, #1
   12194:	add	sp, sp, #12
   12198:	ldrd	r4, [sp]
   1219c:	ldrd	r6, [sp, #8]
   121a0:	ldrd	r8, [sp, #16]
   121a4:	ldrd	sl, [sp, #24]
   121a8:	add	sp, sp, #32
   121ac:	pop	{pc}		; (ldr pc, [sp], #4)
   121b0:	mov	r0, #0
   121b4:	bx	lr
   121b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   121bc:	strd	r6, [sp, #8]
   121c0:	str	r8, [sp, #16]
   121c4:	str	lr, [sp, #20]
   121c8:	mov	r6, r0
   121cc:	mov	r7, r1
   121d0:	movw	r3, #33224	; 0x81c8
   121d4:	movt	r3, #3
   121d8:	ldr	r5, [r3, #204]	; 0xcc
   121dc:	cmp	r5, #0
   121e0:	beq	12258 <__assert_fail@plt+0xd00>
   121e4:	movw	r3, #33224	; 0x81c8
   121e8:	movt	r3, #3
   121ec:	ldr	r4, [r3, #204]	; 0xcc
   121f0:	ldrd	r2, [r4, #8]
   121f4:	cmp	r6, r2
   121f8:	sbcs	r1, r7, r3
   121fc:	blt	122cc <__assert_fail@plt+0xd74>
   12200:	ldr	ip, [r4, #24]
   12204:	adds	r0, r2, ip
   12208:	adc	r1, r3, ip, asr #31
   1220c:	cmp	r6, r0
   12210:	sbcs	r1, r7, r1
   12214:	bge	12284 <__assert_fail@plt+0xd2c>
   12218:	ldr	r5, [r4, #32]
   1221c:	sub	r6, r6, r2
   12220:	cmp	r6, #79	; 0x4f
   12224:	ble	12238 <__assert_fail@plt+0xce0>
   12228:	ldr	r5, [r5, #652]	; 0x28c
   1222c:	sub	r6, r6, #80	; 0x50
   12230:	cmp	r6, #79	; 0x4f
   12234:	bgt	12228 <__assert_fail@plt+0xcd0>
   12238:	add	r5, r5, r6, lsl #3
   1223c:	add	r5, r5, #12
   12240:	mov	r0, r5
   12244:	ldrd	r4, [sp]
   12248:	ldrd	r6, [sp, #8]
   1224c:	ldr	r8, [sp, #16]
   12250:	add	sp, sp, #20
   12254:	pop	{pc}		; (ldr pc, [sp], #4)
   12258:	bl	11ebc <__assert_fail@plt+0x964>
   1225c:	cmp	r0, #0
   12260:	bne	121e4 <__assert_fail@plt+0xc8c>
   12264:	b	12240 <__assert_fail@plt+0xce8>
   12268:	ldrd	r2, [r4, #8]
   1226c:	ldr	ip, [r4, #24]
   12270:	adds	r0, r2, ip
   12274:	adc	r1, r3, ip, asr #31
   12278:	cmp	r6, r0
   1227c:	sbcs	r1, r7, r1
   12280:	blt	12218 <__assert_fail@plt+0xcc0>
   12284:	ldr	r5, [r4, #40]	; 0x28
   12288:	cmp	r5, #0
   1228c:	movne	r4, r5
   12290:	bne	12268 <__assert_fail@plt+0xd10>
   12294:	bl	11ebc <__assert_fail@plt+0x964>
   12298:	cmp	r0, #0
   1229c:	beq	12240 <__assert_fail@plt+0xce8>
   122a0:	ldr	r4, [r4, #40]	; 0x28
   122a4:	cmp	r4, #0
   122a8:	bne	12268 <__assert_fail@plt+0xd10>
   122ac:	movw	r3, #25080	; 0x61f8
   122b0:	movt	r3, #2
   122b4:	movw	r2, #583	; 0x247
   122b8:	movw	r1, #25488	; 0x6390
   122bc:	movt	r1, #2
   122c0:	movw	r0, #25504	; 0x63a0
   122c4:	movt	r0, #2
   122c8:	bl	11558 <__assert_fail@plt>
   122cc:	mov	r5, #0
   122d0:	b	12240 <__assert_fail@plt+0xce8>
   122d4:	str	r4, [sp, #-8]!
   122d8:	str	lr, [sp, #4]
   122dc:	movw	r3, #33224	; 0x81c8
   122e0:	movt	r3, #3
   122e4:	ldr	r0, [r3, #208]	; 0xd0
   122e8:	ldr	r1, [r3, #212]	; 0xd4
   122ec:	adds	r0, r0, #1
   122f0:	adc	r1, r1, #0
   122f4:	bl	121b8 <__assert_fail@plt+0xc60>
   122f8:	clz	r0, r0
   122fc:	lsr	r0, r0, #5
   12300:	ldr	r4, [sp]
   12304:	add	sp, sp, #4
   12308:	pop	{pc}		; (ldr pc, [sp], #4)
   1230c:	movw	r3, #33224	; 0x81c8
   12310:	movt	r3, #3
   12314:	ldr	r3, [r3, #204]	; 0xcc
   12318:	cmp	r3, #0
   1231c:	beq	12334 <__assert_fail@plt+0xddc>
   12320:	movw	r3, #33224	; 0x81c8
   12324:	movt	r3, #3
   12328:	ldr	r3, [r3, #204]	; 0xcc
   1232c:	ldrd	r0, [r3, #16]
   12330:	bx	lr
   12334:	str	r4, [sp, #-8]!
   12338:	str	lr, [sp, #4]
   1233c:	bl	11ebc <__assert_fail@plt+0x964>
   12340:	cmp	r0, #0
   12344:	beq	12364 <__assert_fail@plt+0xe0c>
   12348:	movw	r3, #33224	; 0x81c8
   1234c:	movt	r3, #3
   12350:	ldr	r3, [r3, #204]	; 0xcc
   12354:	ldrd	r0, [r3, #16]
   12358:	ldr	r4, [sp]
   1235c:	add	sp, sp, #4
   12360:	pop	{pc}		; (ldr pc, [sp], #4)
   12364:	bl	1142c <__errno_location@plt>
   12368:	ldr	r4, [r0]
   1236c:	mov	r2, #5
   12370:	movw	r1, #25508	; 0x63a4
   12374:	movt	r1, #2
   12378:	mov	r0, #0
   1237c:	bl	112d0 <dcgettext@plt>
   12380:	mov	r2, r0
   12384:	mov	r1, r4
   12388:	mov	r0, #1
   1238c:	bl	11384 <error@plt>
   12390:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12394:	strd	r6, [sp, #8]
   12398:	str	r8, [sp, #16]
   1239c:	str	lr, [sp, #20]
   123a0:	movw	r3, #33224	; 0x81c8
   123a4:	movt	r3, #3
   123a8:	ldr	r0, [r3, #216]	; 0xd8
   123ac:	cmp	r0, #0
   123b0:	beq	123c8 <__assert_fail@plt+0xe70>
   123b4:	bl	11c78 <__assert_fail@plt+0x720>
   123b8:	movw	r3, #33224	; 0x81c8
   123bc:	movt	r3, #3
   123c0:	mov	r2, #0
   123c4:	str	r2, [r3, #216]	; 0xd8
   123c8:	movw	r3, #33224	; 0x81c8
   123cc:	movt	r3, #3
   123d0:	ldr	r4, [r3, #204]	; 0xcc
   123d4:	cmp	r4, #0
   123d8:	beq	12454 <__assert_fail@plt+0xefc>
   123dc:	movw	r1, #33224	; 0x81c8
   123e0:	movt	r1, #3
   123e4:	ldr	r0, [r1, #204]	; 0xcc
   123e8:	ldrd	r6, [r0, #16]
   123ec:	ldrd	r4, [r1, #208]	; 0xd0
   123f0:	cmp	r4, r6
   123f4:	sbcs	r3, r5, r7
   123f8:	bge	12408 <__assert_fail@plt+0xeb0>
   123fc:	movw	r1, #33224	; 0x81c8
   12400:	movt	r1, #3
   12404:	strd	r6, [r1, #208]	; 0xd0
   12408:	adds	r2, r6, #1
   1240c:	adc	r3, r7, #0
   12410:	str	r2, [r0, #16]
   12414:	str	r3, [r0, #20]
   12418:	ldr	r2, [r0, #36]	; 0x24
   1241c:	ldr	r3, [r2, #8]
   12420:	add	r3, r3, #1
   12424:	add	r4, r2, r3, lsl #3
   12428:	add	r4, r4, #4
   1242c:	str	r3, [r2, #8]
   12430:	ldr	r1, [r2]
   12434:	cmp	r3, r1
   12438:	beq	12464 <__assert_fail@plt+0xf0c>
   1243c:	mov	r0, r4
   12440:	ldrd	r4, [sp]
   12444:	ldrd	r6, [sp, #8]
   12448:	ldr	r8, [sp, #16]
   1244c:	add	sp, sp, #20
   12450:	pop	{pc}		; (ldr pc, [sp], #4)
   12454:	bl	11ebc <__assert_fail@plt+0x964>
   12458:	cmp	r0, #0
   1245c:	bne	123dc <__assert_fail@plt+0xe84>
   12460:	b	1243c <__assert_fail@plt+0xee4>
   12464:	ldr	r3, [r2, #652]	; 0x28c
   12468:	str	r3, [r0, #36]	; 0x24
   1246c:	cmp	r3, #0
   12470:	beq	12480 <__assert_fail@plt+0xf28>
   12474:	ldr	r3, [r3]
   12478:	cmp	r3, #0
   1247c:	bne	1243c <__assert_fail@plt+0xee4>
   12480:	movw	r3, #33224	; 0x81c8
   12484:	movt	r3, #3
   12488:	str	r0, [r3, #216]	; 0xd8
   1248c:	ldr	r2, [r0, #40]	; 0x28
   12490:	str	r2, [r3, #204]	; 0xcc
   12494:	b	1243c <__assert_fail@plt+0xee4>
   12498:	str	r4, [sp, #-8]!
   1249c:	str	lr, [sp, #4]
   124a0:	bl	12390 <__assert_fail@plt+0xe38>
   124a4:	cmp	r0, #0
   124a8:	beq	124b4 <__assert_fail@plt+0xf5c>
   124ac:	bl	11bbc <__assert_fail@plt+0x664>
   124b0:	b	124a0 <__assert_fail@plt+0xf48>
   124b4:	ldr	r4, [sp]
   124b8:	add	sp, sp, #4
   124bc:	pop	{pc}		; (ldr pc, [sp], #4)
   124c0:	str	r7, [sp, #-8]!
   124c4:	str	lr, [sp, #4]
   124c8:	sub	sp, sp, #32
   124cc:	mov	r8, r0
   124d0:	mov	r4, r2
   124d4:	mov	r5, r3
   124d8:	movw	r3, #33208	; 0x81b8
   124dc:	movt	r3, #3
   124e0:	ldr	r6, [r3]
   124e4:	mov	r2, #5
   124e8:	movw	r1, #25528	; 0x63b8
   124ec:	movt	r1, #2
   124f0:	mov	r0, #0
   124f4:	bl	112d0 <dcgettext@plt>
   124f8:	mov	r7, r0
   124fc:	movw	r3, #33472	; 0x82c0
   12500:	movt	r3, #3
   12504:	ldr	r9, [r3]
   12508:	movw	r3, #33224	; 0x81c8
   1250c:	movt	r3, #3
   12510:	ldr	r2, [r8, #24]
   12514:	ldr	r3, [r3, #220]	; 0xdc
   12518:	ldr	r0, [r3, r2, lsl #2]
   1251c:	bl	163c0 <__assert_fail@plt+0x4e68>
   12520:	str	r0, [sp]
   12524:	mov	r3, r9
   12528:	mov	r2, r7
   1252c:	mov	r1, #1
   12530:	mov	r0, r6
   12534:	bl	1148c <__fprintf_chk@plt>
   12538:	orrs	r3, r4, r5
   1253c:	beq	12598 <__assert_fail@plt+0x1040>
   12540:	movw	r3, #33208	; 0x81b8
   12544:	movt	r3, #3
   12548:	ldr	r6, [r3]
   1254c:	mov	r2, #5
   12550:	movw	r1, #25432	; 0x6358
   12554:	movt	r1, #2
   12558:	mov	r0, #0
   1255c:	bl	112d0 <dcgettext@plt>
   12560:	mov	r7, r0
   12564:	add	r2, sp, #8
   12568:	mov	r0, r4
   1256c:	mov	r1, r5
   12570:	bl	13fcc <__assert_fail@plt+0x2a74>
   12574:	mov	r3, r0
   12578:	mov	r2, r7
   1257c:	mov	r1, #1
   12580:	mov	r0, r6
   12584:	bl	1148c <__fprintf_chk@plt>
   12588:	ldrb	r3, [sp, #40]	; 0x28
   1258c:	cmp	r3, #0
   12590:	beq	125b0 <__assert_fail@plt+0x1058>
   12594:	bl	117ec <__assert_fail@plt+0x294>
   12598:	movw	r3, #33208	; 0x81b8
   1259c:	movt	r3, #3
   125a0:	ldr	r1, [r3]
   125a4:	mov	r0, #10
   125a8:	bl	114ec <fputc@plt>
   125ac:	b	12588 <__assert_fail@plt+0x1030>
   125b0:	bl	12498 <__assert_fail@plt+0xf40>
   125b4:	bl	1182c <__assert_fail@plt+0x2d4>
   125b8:	b	12594 <__assert_fail@plt+0x103c>
   125bc:	push	{lr}		; (str lr, [sp, #-4]!)
   125c0:	sub	sp, sp, #60	; 0x3c
   125c4:	subs	r5, r0, #0
   125c8:	beq	12610 <__assert_fail@plt+0x10b8>
   125cc:	movw	r3, #33208	; 0x81b8
   125d0:	movt	r3, #3
   125d4:	ldr	r4, [r3]
   125d8:	mov	r2, #5
   125dc:	movw	r1, #25560	; 0x63d8
   125e0:	movt	r1, #2
   125e4:	mov	r0, #0
   125e8:	bl	112d0 <dcgettext@plt>
   125ec:	movw	r3, #33472	; 0x82c0
   125f0:	movt	r3, #3
   125f4:	ldr	r3, [r3]
   125f8:	mov	r2, r0
   125fc:	mov	r1, #1
   12600:	mov	r0, r4
   12604:	bl	1148c <__fprintf_chk@plt>
   12608:	mov	r0, r5
   1260c:	bl	11408 <exit@plt>
   12610:	mov	r2, #5
   12614:	movw	r1, #25600	; 0x6400
   12618:	movt	r1, #2
   1261c:	mov	r0, #0
   12620:	bl	112d0 <dcgettext@plt>
   12624:	movw	r3, #33472	; 0x82c0
   12628:	movt	r3, #3
   1262c:	ldr	r2, [r3]
   12630:	mov	r1, r0
   12634:	mov	r0, #1
   12638:	bl	11474 <__printf_chk@plt>
   1263c:	mov	r2, #5
   12640:	movw	r1, #25640	; 0x6428
   12644:	movt	r1, #2
   12648:	mov	r0, #0
   1264c:	bl	112d0 <dcgettext@plt>
   12650:	movw	r4, #33212	; 0x81bc
   12654:	movt	r4, #3
   12658:	ldr	r1, [r4]
   1265c:	bl	111bc <fputs_unlocked@plt>
   12660:	mov	r2, #5
   12664:	movw	r1, #25776	; 0x64b0
   12668:	movt	r1, #2
   1266c:	mov	r0, #0
   12670:	bl	112d0 <dcgettext@plt>
   12674:	ldr	r1, [r4]
   12678:	bl	111bc <fputs_unlocked@plt>
   1267c:	mov	r2, #5
   12680:	movw	r1, #25812	; 0x64d4
   12684:	movt	r1, #2
   12688:	mov	r0, #0
   1268c:	bl	112d0 <dcgettext@plt>
   12690:	ldr	r1, [r4]
   12694:	bl	111bc <fputs_unlocked@plt>
   12698:	mov	r2, #5
   1269c:	movw	r1, #25888	; 0x6520
   126a0:	movt	r1, #2
   126a4:	mov	r0, #0
   126a8:	bl	112d0 <dcgettext@plt>
   126ac:	ldr	r1, [r4]
   126b0:	bl	111bc <fputs_unlocked@plt>
   126b4:	mov	r2, #5
   126b8:	movw	r1, #26076	; 0x65dc
   126bc:	movt	r1, #2
   126c0:	mov	r0, #0
   126c4:	bl	112d0 <dcgettext@plt>
   126c8:	ldr	r1, [r4]
   126cc:	bl	111bc <fputs_unlocked@plt>
   126d0:	mov	r2, #5
   126d4:	movw	r1, #26144	; 0x6620
   126d8:	movt	r1, #2
   126dc:	mov	r0, #0
   126e0:	bl	112d0 <dcgettext@plt>
   126e4:	ldr	r1, [r4]
   126e8:	bl	111bc <fputs_unlocked@plt>
   126ec:	mov	r2, #5
   126f0:	movw	r1, #26344	; 0x66e8
   126f4:	movt	r1, #2
   126f8:	mov	r0, #0
   126fc:	bl	112d0 <dcgettext@plt>
   12700:	ldr	r1, [r4]
   12704:	bl	111bc <fputs_unlocked@plt>
   12708:	mov	r2, #5
   1270c:	movw	r1, #26392	; 0x6718
   12710:	movt	r1, #2
   12714:	mov	r0, #0
   12718:	bl	112d0 <dcgettext@plt>
   1271c:	ldr	r1, [r4]
   12720:	bl	111bc <fputs_unlocked@plt>
   12724:	mov	r2, #5
   12728:	movw	r1, #26448	; 0x6750
   1272c:	movt	r1, #2
   12730:	mov	r0, #0
   12734:	bl	112d0 <dcgettext@plt>
   12738:	ldr	r1, [r4]
   1273c:	bl	111bc <fputs_unlocked@plt>
   12740:	movw	r3, #25080	; 0x61f8
   12744:	movt	r3, #2
   12748:	add	r0, r3, #12
   1274c:	ldr	r1, [r3, #12]
   12750:	ldr	r3, [r3, #16]
   12754:	str	r1, [sp]
   12758:	str	r3, [sp, #4]
   1275c:	ldrd	r2, [r0, #8]
   12760:	strd	r2, [sp, #8]
   12764:	ldrd	r2, [r0, #16]
   12768:	strd	r2, [sp, #16]
   1276c:	ldrd	r2, [r0, #24]
   12770:	strd	r2, [sp, #24]
   12774:	ldrd	r2, [r0, #32]
   12778:	strd	r2, [sp, #32]
   1277c:	ldrd	r2, [r0, #40]	; 0x28
   12780:	strd	r2, [sp, #40]	; 0x28
   12784:	ldrd	r2, [r0, #48]	; 0x30
   12788:	strd	r2, [sp, #48]	; 0x30
   1278c:	cmp	r1, #0
   12790:	moveq	r4, sp
   12794:	beq	127c0 <__assert_fail@plt+0x1268>
   12798:	mov	r4, sp
   1279c:	movw	r6, #25552	; 0x63d0
   127a0:	movt	r6, #2
   127a4:	mov	r0, r6
   127a8:	bl	111f8 <strcmp@plt>
   127ac:	cmp	r0, #0
   127b0:	beq	127c0 <__assert_fail@plt+0x1268>
   127b4:	ldr	r1, [r4, #8]!
   127b8:	cmp	r1, #0
   127bc:	bne	127a4 <__assert_fail@plt+0x124c>
   127c0:	ldr	r4, [r4, #4]
   127c4:	cmp	r4, #0
   127c8:	beq	12924 <__assert_fail@plt+0x13cc>
   127cc:	mov	r2, #5
   127d0:	movw	r1, #26888	; 0x6908
   127d4:	movt	r1, #2
   127d8:	mov	r0, #0
   127dc:	bl	112d0 <dcgettext@plt>
   127e0:	movw	r3, #26912	; 0x6920
   127e4:	movt	r3, #2
   127e8:	movw	r2, #26952	; 0x6948
   127ec:	movt	r2, #2
   127f0:	mov	r1, r0
   127f4:	mov	r0, #1
   127f8:	bl	11474 <__printf_chk@plt>
   127fc:	mov	r1, #0
   12800:	mov	r0, #5
   12804:	bl	114bc <setlocale@plt>
   12808:	cmp	r0, #0
   1280c:	beq	12828 <__assert_fail@plt+0x12d0>
   12810:	mov	r2, #3
   12814:	movw	r1, #26968	; 0x6958
   12818:	movt	r1, #2
   1281c:	bl	11528 <strncmp@plt>
   12820:	cmp	r0, #0
   12824:	bne	128a4 <__assert_fail@plt+0x134c>
   12828:	mov	r2, #5
   1282c:	movw	r1, #27044	; 0x69a4
   12830:	movt	r1, #2
   12834:	mov	r0, #0
   12838:	bl	112d0 <dcgettext@plt>
   1283c:	movw	r6, #25552	; 0x63d0
   12840:	movt	r6, #2
   12844:	mov	r3, r6
   12848:	movw	r2, #26912	; 0x6920
   1284c:	movt	r2, #2
   12850:	mov	r1, r0
   12854:	mov	r0, #1
   12858:	bl	11474 <__printf_chk@plt>
   1285c:	mov	r2, #5
   12860:	movw	r1, #27072	; 0x69c0
   12864:	movt	r1, #2
   12868:	mov	r0, #0
   1286c:	bl	112d0 <dcgettext@plt>
   12870:	mov	r1, r0
   12874:	movw	r2, #27988	; 0x6d54
   12878:	movt	r2, #2
   1287c:	movw	r3, #26388	; 0x6714
   12880:	movt	r3, #2
   12884:	cmp	r4, r6
   12888:	moveq	r3, r2
   1288c:	mov	r2, r4
   12890:	mov	r0, #1
   12894:	bl	11474 <__printf_chk@plt>
   12898:	b	12608 <__assert_fail@plt+0x10b0>
   1289c:	movw	r4, #25552	; 0x63d0
   128a0:	movt	r4, #2
   128a4:	mov	r2, #5
   128a8:	movw	r1, #26972	; 0x695c
   128ac:	movt	r1, #2
   128b0:	mov	r0, #0
   128b4:	bl	112d0 <dcgettext@plt>
   128b8:	movw	r3, #33212	; 0x81bc
   128bc:	movt	r3, #3
   128c0:	ldr	r1, [r3]
   128c4:	bl	111bc <fputs_unlocked@plt>
   128c8:	b	12828 <__assert_fail@plt+0x12d0>
   128cc:	mov	r2, #5
   128d0:	movw	r1, #27044	; 0x69a4
   128d4:	movt	r1, #2
   128d8:	mov	r0, #0
   128dc:	bl	112d0 <dcgettext@plt>
   128e0:	movw	r4, #25552	; 0x63d0
   128e4:	movt	r4, #2
   128e8:	mov	r3, r4
   128ec:	movw	r2, #26912	; 0x6920
   128f0:	movt	r2, #2
   128f4:	mov	r1, r0
   128f8:	mov	r0, #1
   128fc:	bl	11474 <__printf_chk@plt>
   12900:	mov	r2, #5
   12904:	movw	r1, #27072	; 0x69c0
   12908:	movt	r1, #2
   1290c:	mov	r0, #0
   12910:	bl	112d0 <dcgettext@plt>
   12914:	mov	r1, r0
   12918:	movw	r3, #27988	; 0x6d54
   1291c:	movt	r3, #2
   12920:	b	1288c <__assert_fail@plt+0x1334>
   12924:	mov	r2, #5
   12928:	movw	r1, #26888	; 0x6908
   1292c:	movt	r1, #2
   12930:	mov	r0, #0
   12934:	bl	112d0 <dcgettext@plt>
   12938:	movw	r3, #26912	; 0x6920
   1293c:	movt	r3, #2
   12940:	movw	r2, #26952	; 0x6948
   12944:	movt	r2, #2
   12948:	mov	r1, r0
   1294c:	mov	r0, #1
   12950:	bl	11474 <__printf_chk@plt>
   12954:	mov	r1, #0
   12958:	mov	r0, #5
   1295c:	bl	114bc <setlocale@plt>
   12960:	cmp	r0, #0
   12964:	beq	128cc <__assert_fail@plt+0x1374>
   12968:	mov	r2, #3
   1296c:	movw	r1, #26968	; 0x6958
   12970:	movt	r1, #2
   12974:	bl	11528 <strncmp@plt>
   12978:	cmp	r0, #0
   1297c:	bne	1289c <__assert_fail@plt+0x1344>
   12980:	mov	r2, #5
   12984:	movw	r1, #27044	; 0x69a4
   12988:	movt	r1, #2
   1298c:	mov	r0, #0
   12990:	bl	112d0 <dcgettext@plt>
   12994:	movw	r4, #25552	; 0x63d0
   12998:	movt	r4, #2
   1299c:	mov	r3, r4
   129a0:	movw	r2, #26912	; 0x6920
   129a4:	movt	r2, #2
   129a8:	mov	r1, r0
   129ac:	mov	r0, #1
   129b0:	bl	11474 <__printf_chk@plt>
   129b4:	mov	r2, #5
   129b8:	movw	r1, #27072	; 0x69c0
   129bc:	movt	r1, #2
   129c0:	mov	r0, #0
   129c4:	bl	112d0 <dcgettext@plt>
   129c8:	mov	r1, r0
   129cc:	movw	r3, #27988	; 0x6d54
   129d0:	movt	r3, #2
   129d4:	b	1288c <__assert_fail@plt+0x1334>
   129d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129dc:	strd	r6, [sp, #8]
   129e0:	strd	r8, [sp, #16]
   129e4:	strd	sl, [sp, #24]
   129e8:	str	lr, [sp, #32]
   129ec:	sub	sp, sp, #236	; 0xec
   129f0:	str	r0, [sp, #24]
   129f4:	mov	r6, r1
   129f8:	ldr	r0, [r1]
   129fc:	bl	140c4 <__assert_fail@plt+0x2b6c>
   12a00:	movw	r1, #26388	; 0x6714
   12a04:	movt	r1, #2
   12a08:	mov	r0, #6
   12a0c:	bl	114bc <setlocale@plt>
   12a10:	movw	r4, #26956	; 0x694c
   12a14:	movt	r4, #2
   12a18:	movw	r1, #27124	; 0x69f4
   12a1c:	movt	r1, #2
   12a20:	mov	r0, r4
   12a24:	bl	11510 <bindtextdomain@plt>
   12a28:	mov	r0, r4
   12a2c:	bl	1130c <textdomain@plt>
   12a30:	movw	r0, #15168	; 0x3b40
   12a34:	movt	r0, #1
   12a38:	bl	261d4 <__assert_fail@plt+0x14c7c>
   12a3c:	movw	r3, #33224	; 0x81c8
   12a40:	movt	r3, #3
   12a44:	str	r6, [r3, #220]	; 0xdc
   12a48:	mov	r2, #0
   12a4c:	str	r2, [r3, #180]	; 0xb4
   12a50:	str	r2, [r3, #172]	; 0xac
   12a54:	strb	r2, [r3, #169]	; 0xa9
   12a58:	mov	r1, #1
   12a5c:	strb	r1, [r3, #12]
   12a60:	strb	r2, [r3, #224]	; 0xe0
   12a64:	movw	r2, #27148	; 0x6a0c
   12a68:	movt	r2, #2
   12a6c:	str	r2, [r3, #4]
   12a70:	ldr	r7, [pc, #3868]	; 13994 <__assert_fail@plt+0x243c>
   12a74:	movw	r4, #27196	; 0x6a3c
   12a78:	movt	r4, #2
   12a7c:	mov	r5, r3
   12a80:	mov	r3, #0
   12a84:	str	r3, [sp]
   12a88:	mov	r3, r7
   12a8c:	mov	r2, r4
   12a90:	mov	r1, r6
   12a94:	ldr	r0, [sp, #24]
   12a98:	bl	113f0 <getopt_long@plt>
   12a9c:	cmn	r0, #1
   12aa0:	beq	12c20 <__assert_fail@plt+0x16c8>
   12aa4:	cmp	r0, #107	; 0x6b
   12aa8:	beq	12bf8 <__assert_fail@plt+0x16a0>
   12aac:	ble	12ad8 <__assert_fail@plt+0x1580>
   12ab0:	cmp	r0, #115	; 0x73
   12ab4:	beq	12bd8 <__assert_fail@plt+0x1680>
   12ab8:	ble	12b64 <__assert_fail@plt+0x160c>
   12abc:	cmp	r0, #122	; 0x7a
   12ac0:	beq	12c04 <__assert_fail@plt+0x16ac>
   12ac4:	cmp	r0, #256	; 0x100
   12ac8:	bne	12c18 <__assert_fail@plt+0x16c0>
   12acc:	mov	r3, #1
   12ad0:	strb	r3, [r5, #224]	; 0xe0
   12ad4:	b	12a80 <__assert_fail@plt+0x1528>
   12ad8:	cmn	r0, #2
   12adc:	beq	12c10 <__assert_fail@plt+0x16b8>
   12ae0:	ble	12b08 <__assert_fail@plt+0x15b0>
   12ae4:	cmp	r0, #98	; 0x62
   12ae8:	beq	12be4 <__assert_fail@plt+0x168c>
   12aec:	cmp	r0, #102	; 0x66
   12af0:	bne	12c18 <__assert_fail@plt+0x16c0>
   12af4:	movw	r3, #33216	; 0x81c0
   12af8:	movt	r3, #3
   12afc:	ldr	r3, [r3]
   12b00:	str	r3, [r5, #4]
   12b04:	b	12a80 <__assert_fail@plt+0x1528>
   12b08:	cmn	r0, #3
   12b0c:	bne	12c18 <__assert_fail@plt+0x16c0>
   12b10:	movw	r3, #33120	; 0x8160
   12b14:	movt	r3, #3
   12b18:	movw	r0, #33212	; 0x81bc
   12b1c:	movt	r0, #3
   12b20:	mov	r4, #0
   12b24:	str	r4, [sp, #8]
   12b28:	movw	r2, #27168	; 0x6a20
   12b2c:	movt	r2, #2
   12b30:	str	r2, [sp, #4]
   12b34:	movw	r2, #27184	; 0x6a30
   12b38:	movt	r2, #2
   12b3c:	str	r2, [sp]
   12b40:	ldr	r3, [r3]
   12b44:	movw	r2, #26952	; 0x6948
   12b48:	movt	r2, #2
   12b4c:	movw	r1, #25552	; 0x63d0
   12b50:	movt	r1, #2
   12b54:	ldr	r0, [r0]
   12b58:	bl	24388 <__assert_fail@plt+0x12e30>
   12b5c:	mov	r0, r4
   12b60:	bl	11408 <exit@plt>
   12b64:	cmp	r0, #110	; 0x6e
   12b68:	bne	12bd0 <__assert_fail@plt+0x1678>
   12b6c:	movw	r3, #33216	; 0x81c0
   12b70:	movt	r3, #3
   12b74:	ldr	r8, [r3]
   12b78:	mov	r2, #5
   12b7c:	movw	r1, #27152	; 0x6a10
   12b80:	movt	r1, #2
   12b84:	mov	r0, #0
   12b88:	bl	112d0 <dcgettext@plt>
   12b8c:	mov	r3, #0
   12b90:	str	r3, [sp, #16]
   12b94:	str	r0, [sp, #12]
   12b98:	movw	r3, #26388	; 0x6714
   12b9c:	movt	r3, #2
   12ba0:	str	r3, [sp, #8]
   12ba4:	mvn	r2, #-2147483648	; 0x80000000
   12ba8:	mov	r3, #0
   12bac:	strd	r2, [sp]
   12bb0:	mov	r2, #0
   12bb4:	mov	r3, #0
   12bb8:	mov	r0, r8
   12bbc:	bl	24a34 <__assert_fail@plt+0x134dc>
   12bc0:	movw	r3, #33116	; 0x815c
   12bc4:	movt	r3, #3
   12bc8:	str	r0, [r3]
   12bcc:	b	12a80 <__assert_fail@plt+0x1528>
   12bd0:	cmp	r0, #113	; 0x71
   12bd4:	bne	12c18 <__assert_fail@plt+0x16c0>
   12bd8:	mov	r3, #1
   12bdc:	strb	r3, [r5, #169]	; 0xa9
   12be0:	b	12a80 <__assert_fail@plt+0x1528>
   12be4:	movw	r3, #33216	; 0x81c0
   12be8:	movt	r3, #3
   12bec:	ldr	r3, [r3]
   12bf0:	str	r3, [r5, #8]
   12bf4:	b	12a80 <__assert_fail@plt+0x1528>
   12bf8:	mov	r3, #0
   12bfc:	strb	r3, [r5, #12]
   12c00:	b	12a80 <__assert_fail@plt+0x1528>
   12c04:	mov	r3, #1
   12c08:	strb	r3, [r5, #168]	; 0xa8
   12c0c:	b	12a80 <__assert_fail@plt+0x1528>
   12c10:	mov	r0, #0
   12c14:	bl	125bc <__assert_fail@plt+0x1064>
   12c18:	mov	r0, #1
   12c1c:	bl	125bc <__assert_fail@plt+0x1064>
   12c20:	movw	r3, #33200	; 0x81b0
   12c24:	movt	r3, #3
   12c28:	ldr	r3, [r3]
   12c2c:	ldr	r2, [sp, #24]
   12c30:	sub	r2, r2, r3
   12c34:	cmp	r2, #1
   12c38:	ble	12c84 <__assert_fail@plt+0x172c>
   12c3c:	movw	r4, #33224	; 0x81c8
   12c40:	movt	r4, #3
   12c44:	ldr	r0, [r4, #4]
   12c48:	bl	11414 <strlen@plt>
   12c4c:	mov	r5, r0
   12c50:	ldr	r3, [r4, #8]
   12c54:	cmp	r3, #0
   12c58:	beq	12f98 <__assert_fail@plt+0x1a40>
   12c5c:	ldr	lr, [r4, #8]
   12c60:	ldrb	r3, [lr]
   12c64:	cmp	r3, #0
   12c68:	beq	12f74 <__assert_fail@plt+0x1a1c>
   12c6c:	mov	r2, lr
   12c70:	mov	r1, #0
   12c74:	mov	r8, #1
   12c78:	mov	r7, #100	; 0x64
   12c7c:	mov	r9, #2
   12c80:	b	12e7c <__assert_fail@plt+0x1924>
   12c84:	ldr	r2, [sp, #24]
   12c88:	cmp	r3, r2
   12c8c:	blt	12cbc <__assert_fail@plt+0x1764>
   12c90:	mov	r2, #5
   12c94:	movw	r1, #27208	; 0x6a48
   12c98:	movt	r1, #2
   12c9c:	mov	r0, #0
   12ca0:	bl	112d0 <dcgettext@plt>
   12ca4:	mov	r2, r0
   12ca8:	mov	r1, #0
   12cac:	mov	r0, r1
   12cb0:	bl	11384 <error@plt>
   12cb4:	mov	r0, #1
   12cb8:	bl	125bc <__assert_fail@plt+0x1064>
   12cbc:	mov	r2, #5
   12cc0:	movw	r1, #27224	; 0x6a58
   12cc4:	movt	r1, #2
   12cc8:	mov	r0, #0
   12ccc:	bl	112d0 <dcgettext@plt>
   12cd0:	mov	r4, r0
   12cd4:	ldr	r3, [sp, #24]
   12cd8:	sub	r3, r3, #-1073741823	; 0xc0000001
   12cdc:	ldr	r0, [r6, r3, lsl #2]
   12ce0:	bl	163c0 <__assert_fail@plt+0x4e68>
   12ce4:	mov	r3, r0
   12ce8:	mov	r2, r4
   12cec:	mov	r1, #0
   12cf0:	mov	r0, r1
   12cf4:	bl	11384 <error@plt>
   12cf8:	b	12cb4 <__assert_fail@plt+0x175c>
   12cfc:	mov	r2, #5
   12d00:	movw	r1, #27252	; 0x6a74
   12d04:	movt	r1, #2
   12d08:	mov	r0, #0
   12d0c:	bl	112d0 <dcgettext@plt>
   12d10:	mov	r2, r0
   12d14:	mov	r1, #0
   12d18:	mov	r0, #1
   12d1c:	bl	11384 <error@plt>
   12d20:	sub	r1, r2, #48	; 0x30
   12d24:	cmp	r1, #9
   12d28:	bhi	12d3c <__assert_fail@plt+0x17e4>
   12d2c:	ldrb	r2, [r3, #1]!
   12d30:	sub	r1, r2, #48	; 0x30
   12d34:	cmp	r1, #9
   12d38:	bls	12d2c <__assert_fail@plt+0x17d4>
   12d3c:	cmp	r2, #46	; 0x2e
   12d40:	beq	12d88 <__assert_fail@plt+0x1830>
   12d44:	ldrb	r4, [r3]
   12d48:	str	r4, [sp, #48]	; 0x30
   12d4c:	cmp	r4, #105	; 0x69
   12d50:	beq	12e4c <__assert_fail@plt+0x18f4>
   12d54:	bls	12d9c <__assert_fail@plt+0x1844>
   12d58:	cmp	r4, #117	; 0x75
   12d5c:	beq	12df4 <__assert_fail@plt+0x189c>
   12d60:	cmp	r4, #120	; 0x78
   12d64:	beq	12ef8 <__assert_fail@plt+0x19a0>
   12d68:	cmp	r4, #111	; 0x6f
   12d6c:	bne	12db4 <__assert_fail@plt+0x185c>
   12d70:	mov	r2, r9
   12d74:	b	12e60 <__assert_fail@plt+0x1908>
   12d78:	orr	ip, ip, #1
   12d7c:	b	12ea8 <__assert_fail@plt+0x1950>
   12d80:	orr	ip, ip, #2
   12d84:	b	12ea8 <__assert_fail@plt+0x1950>
   12d88:	ldrb	r2, [r3, #1]!
   12d8c:	sub	r2, r2, #48	; 0x30
   12d90:	cmp	r2, #9
   12d94:	bhi	12d44 <__assert_fail@plt+0x17ec>
   12d98:	b	12d88 <__assert_fail@plt+0x1830>
   12d9c:	cmp	r4, #88	; 0x58
   12da0:	beq	12e54 <__assert_fail@plt+0x18fc>
   12da4:	cmp	r4, #100	; 0x64
   12da8:	beq	12e5c <__assert_fail@plt+0x1904>
   12dac:	cmp	r4, #0
   12db0:	beq	12e00 <__assert_fail@plt+0x18a8>
   12db4:	bl	113fc <__ctype_b_loc@plt>
   12db8:	ldr	r3, [r0]
   12dbc:	lsl	r4, r4, #1
   12dc0:	ldrh	r3, [r3, r4]
   12dc4:	tst	r3, #16384	; 0x4000
   12dc8:	beq	12e24 <__assert_fail@plt+0x18cc>
   12dcc:	mov	r2, #5
   12dd0:	movw	r1, #27340	; 0x6acc
   12dd4:	movt	r1, #2
   12dd8:	mov	r0, #0
   12ddc:	bl	112d0 <dcgettext@plt>
   12de0:	ldr	r3, [sp, #48]	; 0x30
   12de4:	mov	r2, r0
   12de8:	mov	r1, #0
   12dec:	mov	r0, #1
   12df0:	bl	11384 <error@plt>
   12df4:	strb	r7, [r3]
   12df8:	mov	r2, r8
   12dfc:	b	12e60 <__assert_fail@plt+0x1908>
   12e00:	mov	r2, #5
   12e04:	movw	r1, #27300	; 0x6aa4
   12e08:	movt	r1, #2
   12e0c:	mov	r0, #0
   12e10:	bl	112d0 <dcgettext@plt>
   12e14:	mov	r2, r0
   12e18:	mov	r1, #0
   12e1c:	mov	r0, #1
   12e20:	bl	11384 <error@plt>
   12e24:	mov	r2, #5
   12e28:	movw	r1, #27384	; 0x6af8
   12e2c:	movt	r1, #2
   12e30:	mov	r0, #0
   12e34:	bl	112d0 <dcgettext@plt>
   12e38:	ldr	r3, [sp, #48]	; 0x30
   12e3c:	mov	r2, r0
   12e40:	mov	r1, #0
   12e44:	mov	r0, #1
   12e48:	bl	11384 <error@plt>
   12e4c:	mov	r2, r8
   12e50:	b	12e60 <__assert_fail@plt+0x1908>
   12e54:	mov	r2, r9
   12e58:	b	12e60 <__assert_fail@plt+0x1908>
   12e5c:	mov	r2, r8
   12e60:	bics	ip, ip, r2
   12e64:	bne	12f00 <__assert_fail@plt+0x19a8>
   12e68:	mov	r1, r8
   12e6c:	add	r2, r3, #1
   12e70:	ldrb	r3, [r3, #1]
   12e74:	cmp	r3, #0
   12e78:	beq	12f40 <__assert_fail@plt+0x19e8>
   12e7c:	cmp	r3, #37	; 0x25
   12e80:	movne	r3, r2
   12e84:	bne	12e6c <__assert_fail@plt+0x1914>
   12e88:	add	r3, r2, #1
   12e8c:	ldrb	r2, [r2, #1]
   12e90:	cmp	r2, #37	; 0x25
   12e94:	beq	12e6c <__assert_fail@plt+0x1914>
   12e98:	cmp	r1, #0
   12e9c:	bne	12cfc <__assert_fail@plt+0x17a4>
   12ea0:	mov	r1, r3
   12ea4:	mov	ip, #0
   12ea8:	mov	r3, r1
   12eac:	ldrb	r2, [r1], #1
   12eb0:	sub	r0, r2, #35	; 0x23
   12eb4:	cmp	r0, #13
   12eb8:	ldrls	pc, [pc, r0, lsl #2]
   12ebc:	b	12d20 <__assert_fail@plt+0x17c8>
   12ec0:	andeq	r2, r1, r0, lsl #27
   12ec4:	andeq	r2, r1, r0, lsr #26
   12ec8:	andeq	r2, r1, r0, lsr #26
   12ecc:	andeq	r2, r1, r0, lsr #26
   12ed0:	andeq	r2, r1, r8, ror sp
   12ed4:	andeq	r2, r1, r0, lsr #26
   12ed8:	andeq	r2, r1, r0, lsr #26
   12edc:	andeq	r2, r1, r0, lsr #26
   12ee0:	andeq	r2, r1, r0, lsr #26
   12ee4:	andeq	r2, r1, r0, lsr #26
   12ee8:	andeq	r2, r1, r8, lsr #29
   12eec:	andeq	r2, r1, r0, lsr #26
   12ef0:	andeq	r2, r1, r0, lsr #26
   12ef4:	andeq	r2, r1, r8, lsr #29
   12ef8:	mov	r2, r9
   12efc:	b	12e60 <__assert_fail@plt+0x1908>
   12f00:	mov	r4, ip
   12f04:	mov	r2, #5
   12f08:	movw	r1, #27432	; 0x6b28
   12f0c:	movt	r1, #2
   12f10:	mov	r0, #0
   12f14:	bl	112d0 <dcgettext@plt>
   12f18:	and	r4, r4, #2
   12f1c:	cmp	r4, #0
   12f20:	ldr	r3, [sp, #48]	; 0x30
   12f24:	str	r3, [sp]
   12f28:	movne	r3, #35	; 0x23
   12f2c:	moveq	r3, #39	; 0x27
   12f30:	mov	r2, r0
   12f34:	mov	r1, #0
   12f38:	mov	r0, #1
   12f3c:	bl	11384 <error@plt>
   12f40:	cmp	r1, #0
   12f44:	beq	12f74 <__assert_fail@plt+0x1a1c>
   12f48:	mvn	r3, #-2147483648	; 0x80000000
   12f4c:	str	r3, [sp, #4]
   12f50:	str	lr, [sp]
   12f54:	mvn	r3, #0
   12f58:	mov	r2, #1
   12f5c:	mov	r1, #0
   12f60:	mov	r0, r1
   12f64:	bl	1154c <__snprintf_chk@plt>
   12f68:	cmp	r0, #0
   12f6c:	bge	12fb8 <__assert_fail@plt+0x1a60>
   12f70:	bl	11e84 <__assert_fail@plt+0x92c>
   12f74:	mov	r2, #5
   12f78:	movw	r1, #27484	; 0x6b5c
   12f7c:	movt	r1, #2
   12f80:	mov	r0, #0
   12f84:	bl	112d0 <dcgettext@plt>
   12f88:	mov	r2, r0
   12f8c:	mov	r1, #0
   12f90:	mov	r0, #1
   12f94:	bl	11384 <error@plt>
   12f98:	movw	r3, #33116	; 0x815c
   12f9c:	movt	r3, #3
   12fa0:	ldr	r3, [r3]
   12fa4:	cmp	r3, #10
   12fa8:	movwhi	r3, #33116	; 0x815c
   12fac:	movthi	r3, #3
   12fb0:	ldrhi	r0, [r3]
   12fb4:	movls	r0, #11
   12fb8:	add	r0, r0, #1
   12fbc:	adds	r0, r5, r0
   12fc0:	bvs	13048 <__assert_fail@plt+0x1af0>
   12fc4:	bl	24484 <__assert_fail@plt+0x12f2c>
   12fc8:	movw	r3, #33224	; 0x81c8
   12fcc:	movt	r3, #3
   12fd0:	str	r0, [r3]
   12fd4:	movw	r3, #33200	; 0x81b0
   12fd8:	movt	r3, #3
   12fdc:	ldr	r2, [r3]
   12fe0:	add	r1, r2, #1
   12fe4:	str	r1, [r3]
   12fe8:	ldr	r4, [r6, r2, lsl #2]
   12fec:	movw	r1, #27532	; 0x6b8c
   12ff0:	movt	r1, #2
   12ff4:	mov	r0, r4
   12ff8:	bl	111f8 <strcmp@plt>
   12ffc:	cmp	r0, #0
   13000:	bne	1304c <__assert_fail@plt+0x1af4>
   13004:	movw	r3, #33200	; 0x81b0
   13008:	movt	r3, #3
   1300c:	ldr	r4, [r3]
   13010:	ldr	r3, [sp, #24]
   13014:	cmp	r4, r3
   13018:	bge	134b0 <__assert_fail@plt+0x1f58>
   1301c:	movw	r3, #26388	; 0x6714
   13020:	movt	r3, #2
   13024:	str	r3, [sp, #32]
   13028:	movw	r3, #33224	; 0x81c8
   1302c:	movt	r3, #3
   13030:	str	r3, [sp, #48]	; 0x30
   13034:	movw	r3, #27800	; 0x6c98
   13038:	movt	r3, #2
   1303c:	str	r3, [sp, #52]	; 0x34
   13040:	strd	sl, [sp, #40]	; 0x28
   13044:	b	13230 <__assert_fail@plt+0x1cd8>
   13048:	bl	11e84 <__assert_fail@plt+0x92c>
   1304c:	mov	r3, #0
   13050:	mov	r2, r3
   13054:	mov	r1, r4
   13058:	mov	r0, r3
   1305c:	bl	13d0c <__assert_fail@plt+0x27b4>
   13060:	cmp	r0, #0
   13064:	bge	13004 <__assert_fail@plt+0x1aac>
   13068:	bl	1142c <__errno_location@plt>
   1306c:	ldr	r5, [r0]
   13070:	mov	r2, #5
   13074:	movw	r1, #27536	; 0x6b90
   13078:	movt	r1, #2
   1307c:	mov	r0, #0
   13080:	bl	112d0 <dcgettext@plt>
   13084:	mov	r6, r0
   13088:	mov	r1, r4
   1308c:	mov	r0, #4
   13090:	bl	160d0 <__assert_fail@plt+0x4b78>
   13094:	mov	r3, r0
   13098:	mov	r2, r6
   1309c:	mov	r1, r5
   130a0:	mov	r0, #1
   130a4:	bl	11384 <error@plt>
   130a8:	mov	r2, #5
   130ac:	movw	r1, #27564	; 0x6bac
   130b0:	movt	r1, #2
   130b4:	bl	112d0 <dcgettext@plt>
   130b8:	str	r5, [sp]
   130bc:	mov	r3, r8
   130c0:	mov	r2, r0
   130c4:	mov	r1, #0
   130c8:	mov	r0, #1
   130cc:	bl	11384 <error@plt>
   130d0:	mov	r9, r0
   130d4:	mov	r2, #5
   130d8:	movw	r1, #27600	; 0x6bd0
   130dc:	movt	r1, #2
   130e0:	mov	r0, r7
   130e4:	bl	112d0 <dcgettext@plt>
   130e8:	mov	r4, r0
   130ec:	mov	r0, r8
   130f0:	bl	163c0 <__assert_fail@plt+0x4e68>
   130f4:	str	r9, [sp]
   130f8:	mov	r3, r0
   130fc:	mov	r2, r4
   13100:	mov	r1, r7
   13104:	mov	r0, r7
   13108:	bl	11384 <error@plt>
   1310c:	bl	117ec <__assert_fail@plt+0x294>
   13110:	bl	11b1c <__assert_fail@plt+0x5c4>
   13114:	mov	r5, r0
   13118:	str	r4, [r0, #24]
   1311c:	ldr	r3, [sp, #32]
   13120:	str	r3, [sp]
   13124:	add	r3, sp, #80	; 0x50
   13128:	mov	r2, #10
   1312c:	mov	r1, #0
   13130:	ldr	r0, [r6, r4, lsl #2]
   13134:	bl	25330 <__assert_fail@plt+0x13dd8>
   13138:	cmp	r0, #0
   1313c:	bne	13338 <__assert_fail@plt+0x1de0>
   13140:	ldrd	r2, [sp, #80]	; 0x50
   13144:	cmp	r2, #0
   13148:	sbcs	r1, r3, #0
   1314c:	blt	13338 <__assert_fail@plt+0x1de0>
   13150:	orrs	r1, r2, r3
   13154:	beq	1336c <__assert_fail@plt+0x1e14>
   13158:	ldr	r1, [sp, #48]	; 0x30
   1315c:	ldrd	r0, [r1, #232]	; 0xe8
   13160:	cmp	r3, r1
   13164:	cmpeq	r2, r0
   13168:	bcc	13394 <__assert_fail@plt+0x1e3c>
   1316c:	cmp	r3, r1
   13170:	cmpeq	r2, r0
   13174:	beq	133e4 <__assert_fail@plt+0x1e8c>
   13178:	ldrd	r2, [sp, #80]	; 0x50
   1317c:	ldr	r1, [sp, #48]	; 0x30
   13180:	strd	r2, [r1, #232]	; 0xe8
   13184:	strd	r2, [r5, #8]
   13188:	add	r3, r4, #1
   1318c:	ldr	r2, [sp, #24]
   13190:	cmp	r2, r3
   13194:	ble	134ac <__assert_fail@plt+0x1f54>
   13198:	add	r7, fp, #4
   1319c:	ldr	r8, [r6, r7]
   131a0:	ldrb	r2, [r8]
   131a4:	cmp	r2, #123	; 0x7b
   131a8:	movne	r4, r3
   131ac:	bne	13230 <__assert_fail@plt+0x1cd8>
   131b0:	mov	r0, r8
   131b4:	bl	11414 <strlen@plt>
   131b8:	sub	r9, r0, #1
   131bc:	add	r3, r8, r9
   131c0:	ldrb	r2, [r8, r9]
   131c4:	cmp	r2, #125	; 0x7d
   131c8:	bne	13418 <__assert_fail@plt+0x1ec0>
   131cc:	mov	r2, #0
   131d0:	strb	r2, [r8, r9]
   131d4:	add	r0, r8, #1
   131d8:	sub	r3, r3, #1
   131dc:	cmp	r0, r3
   131e0:	beq	1344c <__assert_fail@plt+0x1ef4>
   131e4:	ldr	r3, [sp, #32]
   131e8:	str	r3, [sp]
   131ec:	add	r3, sp, #88	; 0x58
   131f0:	mov	r2, #10
   131f4:	mov	r1, #0
   131f8:	bl	25330 <__assert_fail@plt+0x13dd8>
   131fc:	cmp	r0, #0
   13200:	bne	13464 <__assert_fail@plt+0x1f0c>
   13204:	ldrd	r2, [sp, #88]	; 0x58
   13208:	cmp	r2, #0
   1320c:	sbcs	r1, r3, #0
   13210:	blt	13464 <__assert_fail@plt+0x1f0c>
   13214:	strd	r2, [r5, #16]
   13218:	mov	r3, #125	; 0x7d
   1321c:	strb	r3, [r8, r9]
   13220:	add	r4, r4, #2
   13224:	ldr	r3, [sp, #24]
   13228:	cmp	r3, r4
   1322c:	ble	134a4 <__assert_fail@plt+0x1f4c>
   13230:	lsl	fp, r4, #2
   13234:	add	r9, r6, fp
   13238:	ldr	r8, [r6, r4, lsl #2]
   1323c:	ldrb	r1, [r8]
   13240:	cmp	r1, #37	; 0x25
   13244:	movne	r7, #0
   13248:	moveq	r7, #1
   1324c:	cmp	r1, #37	; 0x25
   13250:	cmpne	r1, #47	; 0x2f
   13254:	bne	13110 <__assert_fail@plt+0x1bb8>
   13258:	add	r3, r8, #1
   1325c:	mov	sl, r3
   13260:	mov	r5, r1
   13264:	mov	r0, r3
   13268:	bl	114d4 <strrchr@plt>
   1326c:	subs	r9, r0, #0
   13270:	beq	130a8 <__assert_fail@plt+0x1b50>
   13274:	bl	11b1c <__assert_fail@plt+0x5c4>
   13278:	mov	r5, r0
   1327c:	str	r4, [r0, #24]
   13280:	strb	r7, [r0, #29]
   13284:	mov	r3, #1
   13288:	strb	r3, [r0, #30]
   1328c:	mov	r7, #0
   13290:	str	r7, [r0, #32]
   13294:	str	r7, [r0, #36]	; 0x24
   13298:	mov	r0, #256	; 0x100
   1329c:	bl	24460 <__assert_fail@plt+0x12f08>
   132a0:	str	r0, [r5, #48]	; 0x30
   132a4:	str	r7, [r5, #52]	; 0x34
   132a8:	movw	r3, #33780	; 0x83f4
   132ac:	movt	r3, #3
   132b0:	movw	r2, #710	; 0x2c6
   132b4:	str	r2, [r3]
   132b8:	sub	r1, r9, r8
   132bc:	add	r2, r5, #32
   132c0:	sub	r1, r1, #1
   132c4:	mov	r0, sl
   132c8:	bl	23304 <__assert_fail@plt+0x11dac>
   132cc:	cmp	r0, #0
   132d0:	bne	130d0 <__assert_fail@plt+0x1b78>
   132d4:	ldrb	r3, [r9, #1]
   132d8:	cmp	r3, #0
   132dc:	beq	13188 <__assert_fail@plt+0x1c30>
   132e0:	ldr	r3, [sp, #32]
   132e4:	str	r3, [sp]
   132e8:	mov	r3, r5
   132ec:	mov	r2, #10
   132f0:	mov	r1, #0
   132f4:	add	r0, r9, #1
   132f8:	bl	24bd0 <__assert_fail@plt+0x13678>
   132fc:	cmp	r0, #0
   13300:	beq	13188 <__assert_fail@plt+0x1c30>
   13304:	mov	r2, #5
   13308:	movw	r1, #27636	; 0x6bf4
   1330c:	movt	r1, #2
   13310:	mov	r0, #0
   13314:	bl	112d0 <dcgettext@plt>
   13318:	mov	r4, r0
   1331c:	mov	r0, r8
   13320:	bl	163c0 <__assert_fail@plt+0x4e68>
   13324:	mov	r3, r0
   13328:	mov	r2, r4
   1332c:	mov	r1, #0
   13330:	mov	r0, #1
   13334:	bl	11384 <error@plt>
   13338:	mov	r2, #5
   1333c:	movw	r1, #27676	; 0x6c1c
   13340:	movt	r1, #2
   13344:	mov	r0, #0
   13348:	bl	112d0 <dcgettext@plt>
   1334c:	mov	r4, r0
   13350:	ldr	r0, [r9]
   13354:	bl	163c0 <__assert_fail@plt+0x4e68>
   13358:	mov	r3, r0
   1335c:	mov	r2, r4
   13360:	mov	r1, #0
   13364:	mov	r0, #1
   13368:	bl	11384 <error@plt>
   1336c:	mov	r2, #5
   13370:	movw	r1, #27696	; 0x6c30
   13374:	movt	r1, #2
   13378:	mov	r0, #0
   1337c:	bl	112d0 <dcgettext@plt>
   13380:	ldr	r3, [r9]
   13384:	mov	r2, r0
   13388:	mov	r1, #0
   1338c:	mov	r0, #1
   13390:	bl	11384 <error@plt>
   13394:	mov	r2, #5
   13398:	movw	r1, #27740	; 0x6c5c
   1339c:	movt	r1, #2
   133a0:	mov	r0, #0
   133a4:	bl	112d0 <dcgettext@plt>
   133a8:	mov	r4, r0
   133ac:	ldr	r0, [r9]
   133b0:	bl	163c0 <__assert_fail@plt+0x4e68>
   133b4:	mov	r5, r0
   133b8:	movw	r3, #33224	; 0x81c8
   133bc:	movt	r3, #3
   133c0:	add	r2, sp, #88	; 0x58
   133c4:	ldrd	r0, [r3, #232]	; 0xe8
   133c8:	bl	13fcc <__assert_fail@plt+0x2a74>
   133cc:	str	r0, [sp]
   133d0:	mov	r3, r5
   133d4:	mov	r2, r4
   133d8:	mov	r1, #0
   133dc:	mov	r0, #1
   133e0:	bl	11384 <error@plt>
   133e4:	mov	r2, #5
   133e8:	ldr	r1, [sp, #52]	; 0x34
   133ec:	mov	r0, #0
   133f0:	bl	112d0 <dcgettext@plt>
   133f4:	mov	r7, r0
   133f8:	ldr	r0, [r6, fp]
   133fc:	bl	163c0 <__assert_fail@plt+0x4e68>
   13400:	mov	r3, r0
   13404:	mov	r2, r7
   13408:	mov	r1, #0
   1340c:	mov	r0, r1
   13410:	bl	11384 <error@plt>
   13414:	b	13178 <__assert_fail@plt+0x1c20>
   13418:	mov	r2, #5
   1341c:	movw	r1, #27864	; 0x6cd8
   13420:	movt	r1, #2
   13424:	mov	r0, #0
   13428:	bl	112d0 <dcgettext@plt>
   1342c:	mov	r4, r0
   13430:	mov	r0, r8
   13434:	bl	163c0 <__assert_fail@plt+0x4e68>
   13438:	mov	r3, r0
   1343c:	mov	r2, r4
   13440:	mov	r1, #0
   13444:	mov	r0, #1
   13448:	bl	11384 <error@plt>
   1344c:	ldrb	r3, [r8, #1]
   13450:	cmp	r3, #42	; 0x2a
   13454:	moveq	r3, #1
   13458:	strbeq	r3, [r5, #28]
   1345c:	bne	131e4 <__assert_fail@plt+0x1c8c>
   13460:	b	13218 <__assert_fail@plt+0x1cc0>
   13464:	mov	r2, #5
   13468:	movw	r1, #27900	; 0x6cfc
   1346c:	movt	r1, #2
   13470:	mov	r0, #0
   13474:	bl	112d0 <dcgettext@plt>
   13478:	mov	r4, r0
   1347c:	movw	r3, #33224	; 0x81c8
   13480:	movt	r3, #3
   13484:	ldr	r3, [r3, #220]	; 0xdc
   13488:	ldr	r0, [r3, r7]
   1348c:	bl	163c0 <__assert_fail@plt+0x4e68>
   13490:	mov	r3, r0
   13494:	mov	r2, r4
   13498:	mov	r1, #0
   1349c:	mov	r0, #1
   134a0:	bl	11384 <error@plt>
   134a4:	ldrd	sl, [sp, #40]	; 0x28
   134a8:	b	134b0 <__assert_fail@plt+0x1f58>
   134ac:	ldrd	sl, [sp, #40]	; 0x28
   134b0:	ldr	r0, [pc, #1248]	; 13998 <__assert_fail@plt+0x2440>
   134b4:	bl	114c8 <sigemptyset@plt>
   134b8:	movw	r7, #25080	; 0x61f8
   134bc:	movt	r7, #2
   134c0:	add	r4, r7, #244	; 0xf4
   134c4:	add	r7, r7, #288	; 0x120
   134c8:	mov	r5, r4
   134cc:	ldr	r8, [pc, #1220]	; 13998 <__assert_fail@plt+0x2440>
   134d0:	b	134dc <__assert_fail@plt+0x1f84>
   134d4:	cmp	r5, r7
   134d8:	beq	1350c <__assert_fail@plt+0x1fb4>
   134dc:	ldr	r6, [r5], #4
   134e0:	add	r2, sp, #88	; 0x58
   134e4:	mov	r1, #0
   134e8:	mov	r0, r6
   134ec:	bl	11330 <sigaction@plt>
   134f0:	ldr	r3, [sp, #88]	; 0x58
   134f4:	cmp	r3, #1
   134f8:	beq	134d4 <__assert_fail@plt+0x1f7c>
   134fc:	mov	r1, r6
   13500:	mov	r0, r8
   13504:	bl	113a8 <sigaddset@plt>
   13508:	b	134d4 <__assert_fail@plt+0x1f7c>
   1350c:	movw	r3, #6888	; 0x1ae8
   13510:	movt	r3, #1
   13514:	str	r3, [sp, #88]	; 0x58
   13518:	mov	r2, #128	; 0x80
   1351c:	ldr	r1, [pc, #1140]	; 13998 <__assert_fail@plt+0x2440>
   13520:	add	r0, sp, #92	; 0x5c
   13524:	bl	11264 <memcpy@plt>
   13528:	mov	r3, #0
   1352c:	str	r3, [sp, #220]	; 0xdc
   13530:	ldr	r6, [pc, #1120]	; 13998 <__assert_fail@plt+0x2440>
   13534:	mov	r8, r3
   13538:	b	13544 <__assert_fail@plt+0x1fec>
   1353c:	cmp	r4, r7
   13540:	beq	13570 <__assert_fail@plt+0x2018>
   13544:	ldr	r5, [r4], #4
   13548:	mov	r1, r5
   1354c:	mov	r0, r6
   13550:	bl	11300 <sigismember@plt>
   13554:	cmp	r0, #0
   13558:	beq	1353c <__assert_fail@plt+0x1fe4>
   1355c:	mov	r2, r8
   13560:	add	r1, sp, #88	; 0x58
   13564:	mov	r0, r5
   13568:	bl	11330 <sigaction@plt>
   1356c:	b	1353c <__assert_fail@plt+0x1fe4>
   13570:	mov	r3, #0
   13574:	str	r3, [sp, #52]	; 0x34
   13578:	movw	r4, #33224	; 0x81c8
   1357c:	movt	r4, #3
   13580:	ldr	r3, [r4, #172]	; 0xac
   13584:	ldr	r2, [sp, #52]	; 0x34
   13588:	cmp	r2, r3
   1358c:	bge	13ab4 <__assert_fail@plt+0x255c>
   13590:	ldr	r3, [sp, #52]	; 0x34
   13594:	lsl	r3, r3, #6
   13598:	mov	r2, r3
   1359c:	str	r3, [sp, #40]	; 0x28
   135a0:	ldr	r3, [r4, #180]	; 0xb4
   135a4:	add	r3, r3, r2
   135a8:	ldrb	r3, [r3, #30]
   135ac:	cmp	r3, #0
   135b0:	bne	13888 <__assert_fail@plt+0x2330>
   135b4:	str	r3, [sp, #24]
   135b8:	str	r3, [sp, #28]
   135bc:	ldrd	r8, [sp, #72]	; 0x48
   135c0:	b	139ac <__assert_fail@plt+0x2454>
   135c4:	bl	11cc8 <__assert_fail@plt+0x770>
   135c8:	b	138d4 <__assert_fail@plt+0x237c>
   135cc:	ldrb	r3, [r7, #28]
   135d0:	cmp	r3, #0
   135d4:	beq	135f4 <__assert_fail@plt+0x209c>
   135d8:	cmp	r9, #0
   135dc:	beq	135e8 <__assert_fail@plt+0x2090>
   135e0:	mov	r0, #0
   135e4:	bl	11408 <exit@plt>
   135e8:	bl	12498 <__assert_fail@plt+0xf40>
   135ec:	bl	1182c <__assert_fail@plt+0x2d4>
   135f0:	b	135e0 <__assert_fail@plt+0x2088>
   135f4:	str	r9, [sp]
   135f8:	ldrd	r2, [sp, #24]
   135fc:	mov	r0, r7
   13600:	bl	124c0 <__assert_fail@plt+0xf68>
   13604:	mov	r2, #5
   13608:	movw	r1, #27944	; 0x6d28
   1360c:	movt	r1, #2
   13610:	mov	r0, #0
   13614:	bl	112d0 <dcgettext@plt>
   13618:	mov	r2, r0
   1361c:	mov	r1, #0
   13620:	mov	r0, r1
   13624:	bl	11384 <error@plt>
   13628:	bl	117ec <__assert_fail@plt+0x294>
   1362c:	ldr	r0, [r4, #208]	; 0xd0
   13630:	ldr	r1, [r4, #212]	; 0xd4
   13634:	adds	r0, r0, #1
   13638:	adc	r1, r1, #0
   1363c:	str	r0, [r4, #208]	; 0xd0
   13640:	str	r1, [r4, #212]	; 0xd4
   13644:	bl	121b8 <__assert_fail@plt+0xc60>
   13648:	cmp	r0, #0
   1364c:	beq	1370c <__assert_fail@plt+0x21b4>
   13650:	ldr	r2, [r0]
   13654:	ldr	r1, [r0, #4]
   13658:	add	r3, r1, r2
   1365c:	ldrb	r3, [r3, #-1]
   13660:	cmp	r3, #10
   13664:	subeq	r2, r2, #1
   13668:	str	r5, [sp, #4]
   1366c:	str	r2, [sp]
   13670:	mov	r3, r5
   13674:	mov	r0, r6
   13678:	bl	23cec <__assert_fail@plt+0x12794>
   1367c:	cmn	r0, #2
   13680:	beq	13744 <__assert_fail@plt+0x21ec>
   13684:	cmn	r0, #1
   13688:	beq	1362c <__assert_fail@plt+0x20d4>
   1368c:	ldr	r3, [r8, fp]
   13690:	add	r2, r8, fp
   13694:	ldr	r0, [r2, #4]
   13698:	ldr	r2, [r4, #208]	; 0xd0
   1369c:	ldr	r1, [r4, #212]	; 0xd4
   136a0:	adds	r3, r3, r2
   136a4:	str	r3, [sp, #56]	; 0x38
   136a8:	adc	r3, r0, r1
   136ac:	str	r3, [sp, #60]	; 0x3c
   136b0:	ldr	r3, [r7, #24]
   136b4:	str	r3, [sp, #40]	; 0x28
   136b8:	bl	1230c <__assert_fail@plt+0xdb4>
   136bc:	ldrd	r2, [sp, #56]	; 0x38
   136c0:	cmp	r2, r0
   136c4:	sbcs	r3, r3, r1
   136c8:	blt	1376c <__assert_fail@plt+0x2214>
   136cc:	ldrd	r2, [sp, #56]	; 0x38
   136d0:	subs	ip, r2, r0
   136d4:	str	ip, [sp, #64]	; 0x40
   136d8:	sbc	r3, r3, r1
   136dc:	str	r3, [sp, #68]	; 0x44
   136e0:	ldrd	r2, [sp, #64]	; 0x40
   136e4:	cmp	r2, #1
   136e8:	sbcs	r1, r3, #0
   136ec:	blt	13834 <__assert_fail@plt+0x22dc>
   136f0:	mov	r6, #0
   136f4:	mov	r7, #0
   136f8:	str	r4, [sp, #48]	; 0x30
   136fc:	mov	r4, fp
   13700:	mov	sl, r2
   13704:	mov	fp, r3
   13708:	b	13810 <__assert_fail@plt+0x22b8>
   1370c:	ldrb	r3, [r7, #28]
   13710:	cmp	r3, #0
   13714:	beq	13734 <__assert_fail@plt+0x21dc>
   13718:	cmp	r9, #0
   1371c:	beq	13728 <__assert_fail@plt+0x21d0>
   13720:	mov	r0, #0
   13724:	bl	11408 <exit@plt>
   13728:	bl	12498 <__assert_fail@plt+0xf40>
   1372c:	bl	1182c <__assert_fail@plt+0x2d4>
   13730:	b	13720 <__assert_fail@plt+0x21c8>
   13734:	str	r9, [sp]
   13738:	ldrd	r2, [sp, #24]
   1373c:	mov	r0, r7
   13740:	bl	124c0 <__assert_fail@plt+0xf68>
   13744:	mov	r2, #5
   13748:	movw	r1, #27944	; 0x6d28
   1374c:	movt	r1, #2
   13750:	mov	r0, #0
   13754:	bl	112d0 <dcgettext@plt>
   13758:	mov	r2, r0
   1375c:	mov	r1, #0
   13760:	mov	r0, r1
   13764:	bl	11384 <error@plt>
   13768:	bl	117ec <__assert_fail@plt+0x294>
   1376c:	mov	r2, #5
   13770:	movw	r1, #25400	; 0x6338
   13774:	movt	r1, #2
   13778:	mov	r0, #0
   1377c:	bl	112d0 <dcgettext@plt>
   13780:	mov	r4, r0
   13784:	movw	r3, #33224	; 0x81c8
   13788:	movt	r3, #3
   1378c:	ldr	r3, [r3, #220]	; 0xdc
   13790:	ldr	r2, [sp, #40]	; 0x28
   13794:	ldr	r0, [r3, r2, lsl #2]
   13798:	bl	163c0 <__assert_fail@plt+0x4e68>
   1379c:	mov	r3, r0
   137a0:	mov	r2, r4
   137a4:	mov	r1, #0
   137a8:	mov	r0, r1
   137ac:	bl	11384 <error@plt>
   137b0:	bl	117ec <__assert_fail@plt+0x294>
   137b4:	mov	r2, #5
   137b8:	movw	r1, #25400	; 0x6338
   137bc:	movt	r1, #2
   137c0:	mov	r0, #0
   137c4:	bl	112d0 <dcgettext@plt>
   137c8:	mov	r4, r0
   137cc:	movw	r3, #33224	; 0x81c8
   137d0:	movt	r3, #3
   137d4:	ldr	r3, [r3, #220]	; 0xdc
   137d8:	ldr	r2, [sp, #40]	; 0x28
   137dc:	ldr	r0, [r3, r2, lsl #2]
   137e0:	bl	163c0 <__assert_fail@plt+0x4e68>
   137e4:	mov	r3, r0
   137e8:	mov	r2, r4
   137ec:	mov	r1, #0
   137f0:	mov	r0, r1
   137f4:	bl	11384 <error@plt>
   137f8:	bl	117ec <__assert_fail@plt+0x294>
   137fc:	adds	r6, r6, #1
   13800:	adc	r7, r7, #0
   13804:	cmp	fp, r7
   13808:	cmpeq	sl, r6
   1380c:	beq	1382c <__assert_fail@plt+0x22d4>
   13810:	bl	12390 <__assert_fail@plt+0xe38>
   13814:	cmp	r0, #0
   13818:	beq	137b4 <__assert_fail@plt+0x225c>
   1381c:	cmp	r9, #0
   13820:	bne	137fc <__assert_fail@plt+0x22a4>
   13824:	bl	11bbc <__assert_fail@plt+0x664>
   13828:	b	137fc <__assert_fail@plt+0x22a4>
   1382c:	mov	fp, r4
   13830:	ldr	r4, [sp, #48]	; 0x30
   13834:	cmp	r9, #0
   13838:	beq	13878 <__assert_fail@plt+0x2320>
   1383c:	ldrd	r2, [r8, fp]
   13840:	cmp	r2, #1
   13844:	sbcs	r3, r3, #0
   13848:	ldrdge	r2, [sp, #56]	; 0x38
   1384c:	strdge	r2, [r4, #208]	; 0xd0
   13850:	ldrb	r3, [r4, #224]	; 0xe0
   13854:	cmp	r3, #0
   13858:	bne	13880 <__assert_fail@plt+0x2328>
   1385c:	ldr	r3, [sp, #24]
   13860:	adds	r3, r3, #1
   13864:	str	r3, [sp, #24]
   13868:	ldr	r3, [sp, #28]
   1386c:	adc	r3, r3, #0
   13870:	str	r3, [sp, #28]
   13874:	b	138a0 <__assert_fail@plt+0x2348>
   13878:	bl	1182c <__assert_fail@plt+0x2d4>
   1387c:	b	1383c <__assert_fail@plt+0x22e4>
   13880:	bl	12390 <__assert_fail@plt+0xe38>
   13884:	b	1385c <__assert_fail@plt+0x2304>
   13888:	mov	r2, #0
   1388c:	mov	r3, #0
   13890:	strd	r2, [sp, #24]
   13894:	mov	r5, #0
   13898:	strd	sl, [sp, #32]
   1389c:	ldr	fp, [sp, #40]	; 0x28
   138a0:	ldr	r8, [r4, #180]	; 0xb4
   138a4:	add	r7, r8, fp
   138a8:	ldrb	r3, [r7, #28]
   138ac:	cmp	r3, #0
   138b0:	bne	138c8 <__assert_fail@plt+0x2370>
   138b4:	ldrd	r2, [r7, #16]
   138b8:	ldrd	r0, [sp, #24]
   138bc:	cmp	r2, r0
   138c0:	sbcs	r3, r3, r1
   138c4:	blt	13960 <__assert_fail@plt+0x2408>
   138c8:	ldrb	r9, [r7, #29]
   138cc:	cmp	r9, #0
   138d0:	beq	135c4 <__assert_fail@plt+0x206c>
   138d4:	ldrd	r2, [r8, fp]
   138d8:	cmp	r2, #0
   138dc:	sbcs	r3, r3, #0
   138e0:	addlt	r6, r7, #32
   138e4:	blt	1362c <__assert_fail@plt+0x20d4>
   138e8:	add	r6, r7, #32
   138ec:	ldr	r0, [r4, #208]	; 0xd0
   138f0:	ldr	r1, [r4, #212]	; 0xd4
   138f4:	adds	r0, r0, #1
   138f8:	adc	r1, r1, #0
   138fc:	str	r0, [r4, #208]	; 0xd0
   13900:	str	r1, [r4, #212]	; 0xd4
   13904:	bl	121b8 <__assert_fail@plt+0xc60>
   13908:	cmp	r0, #0
   1390c:	beq	135cc <__assert_fail@plt+0x2074>
   13910:	ldr	r2, [r0]
   13914:	ldr	r1, [r0, #4]
   13918:	add	r3, r1, r2
   1391c:	ldrb	r3, [r3, #-1]
   13920:	cmp	r3, #10
   13924:	subeq	r2, r2, #1
   13928:	str	r5, [sp, #4]
   1392c:	str	r2, [sp]
   13930:	mov	r3, r5
   13934:	mov	r0, r6
   13938:	bl	23cec <__assert_fail@plt+0x12794>
   1393c:	cmn	r0, #2
   13940:	beq	13604 <__assert_fail@plt+0x20ac>
   13944:	cmn	r0, #1
   13948:	bne	1368c <__assert_fail@plt+0x2134>
   1394c:	bl	12390 <__assert_fail@plt+0xe38>
   13950:	cmp	r9, #0
   13954:	bne	138ec <__assert_fail@plt+0x2394>
   13958:	bl	11bbc <__assert_fail@plt+0x664>
   1395c:	b	138ec <__assert_fail@plt+0x2394>
   13960:	ldrd	sl, [sp, #32]
   13964:	b	13aa4 <__assert_fail@plt+0x254c>
   13968:	ldrd	r2, [sp, #24]
   1396c:	mov	r0, r5
   13970:	bl	11a0c <__assert_fail@plt+0x4b4>
   13974:	ldrd	r2, [sp, #24]
   13978:	mov	r0, r5
   1397c:	bl	11a0c <__assert_fail@plt+0x4b4>
   13980:	bl	12390 <__assert_fail@plt+0xe38>
   13984:	b	13a74 <__assert_fail@plt+0x251c>
   13988:	ldrd	r2, [sp, #24]
   1398c:	mov	r0, r5
   13990:	bl	11a0c <__assert_fail@plt+0x4b4>
   13994:	andeq	r6, r2, ip, lsr r2
   13998:	ldrdeq	r8, [r3], -ip
   1399c:	ldr	r3, [sp, #48]	; 0x30
   139a0:	str	r3, [sp, #24]
   139a4:	ldr	r3, [sp, #32]
   139a8:	str	r3, [sp, #28]
   139ac:	ldr	r5, [r4, #180]	; 0xb4
   139b0:	ldr	r3, [sp, #40]	; 0x28
   139b4:	add	r5, r5, r3
   139b8:	ldrb	r3, [r5, #28]
   139bc:	cmp	r3, #0
   139c0:	bne	139d8 <__assert_fail@plt+0x2480>
   139c4:	ldrd	r2, [r5, #16]
   139c8:	ldrd	r0, [sp, #24]
   139cc:	cmp	r2, r0
   139d0:	sbcs	r3, r3, r1
   139d4:	blt	13aa0 <__assert_fail@plt+0x2548>
   139d8:	ldrd	r2, [sp, #24]
   139dc:	adds	r1, r2, #1
   139e0:	str	r1, [sp, #48]	; 0x30
   139e4:	adc	r0, r3, #0
   139e8:	str	r0, [sp, #32]
   139ec:	ldr	r6, [r5, #8]
   139f0:	ldr	r3, [r5, #12]
   139f4:	mul	r3, r1, r3
   139f8:	mla	r3, r6, r0, r3
   139fc:	umull	r6, r7, r6, r1
   13a00:	add	r7, r3, r7
   13a04:	bl	11cc8 <__assert_fail@plt+0x770>
   13a08:	bl	122d4 <__assert_fail@plt+0xd7c>
   13a0c:	cmp	r0, #0
   13a10:	beq	13a20 <__assert_fail@plt+0x24c8>
   13a14:	ldrb	r3, [r4, #224]	; 0xe0
   13a18:	cmp	r3, #0
   13a1c:	bne	13968 <__assert_fail@plt+0x2410>
   13a20:	bl	1230c <__assert_fail@plt+0xdb4>
   13a24:	adds	sl, r0, #1
   13a28:	adc	fp, r1, #0
   13a2c:	cmp	r0, r6
   13a30:	sbcs	r3, r1, r7
   13a34:	bge	13a64 <__assert_fail@plt+0x250c>
   13a38:	adds	r8, r6, #1
   13a3c:	adc	r9, r7, #0
   13a40:	bl	12390 <__assert_fail@plt+0xe38>
   13a44:	cmp	r0, #0
   13a48:	beq	13974 <__assert_fail@plt+0x241c>
   13a4c:	bl	11bbc <__assert_fail@plt+0x664>
   13a50:	adds	sl, sl, #1
   13a54:	adc	fp, fp, #0
   13a58:	cmp	fp, r9
   13a5c:	cmpeq	sl, r8
   13a60:	bne	13a40 <__assert_fail@plt+0x24e8>
   13a64:	bl	1182c <__assert_fail@plt+0x2d4>
   13a68:	ldrb	r3, [r4, #224]	; 0xe0
   13a6c:	cmp	r3, #0
   13a70:	bne	13980 <__assert_fail@plt+0x2428>
   13a74:	bl	122d4 <__assert_fail@plt+0xd7c>
   13a78:	cmp	r0, #0
   13a7c:	beq	1399c <__assert_fail@plt+0x2444>
   13a80:	ldrb	r3, [r4, #224]	; 0xe0
   13a84:	cmp	r3, #0
   13a88:	beq	13988 <__assert_fail@plt+0x2430>
   13a8c:	ldr	r3, [sp, #48]	; 0x30
   13a90:	str	r3, [sp, #24]
   13a94:	ldr	r3, [sp, #32]
   13a98:	str	r3, [sp, #28]
   13a9c:	b	139ac <__assert_fail@plt+0x2454>
   13aa0:	strd	r8, [sp, #72]	; 0x48
   13aa4:	ldr	r3, [sp, #52]	; 0x34
   13aa8:	add	r3, r3, #1
   13aac:	str	r3, [sp, #52]	; 0x34
   13ab0:	b	13580 <__assert_fail@plt+0x2028>
   13ab4:	bl	11cc8 <__assert_fail@plt+0x770>
   13ab8:	bl	12498 <__assert_fail@plt+0xf40>
   13abc:	bl	1182c <__assert_fail@plt+0x2d4>
   13ac0:	mov	r0, #0
   13ac4:	bl	11540 <close@plt>
   13ac8:	cmp	r0, #0
   13acc:	bne	13af0 <__assert_fail@plt+0x2598>
   13ad0:	mov	r0, #0
   13ad4:	add	sp, sp, #236	; 0xec
   13ad8:	ldrd	r4, [sp]
   13adc:	ldrd	r6, [sp, #8]
   13ae0:	ldrd	r8, [sp, #16]
   13ae4:	ldrd	sl, [sp, #24]
   13ae8:	add	sp, sp, #32
   13aec:	pop	{pc}		; (ldr pc, [sp], #4)
   13af0:	bl	1142c <__errno_location@plt>
   13af4:	ldr	r4, [r0]
   13af8:	mov	r2, #5
   13afc:	movw	r1, #25476	; 0x6384
   13b00:	movt	r1, #2
   13b04:	mov	r0, #0
   13b08:	bl	112d0 <dcgettext@plt>
   13b0c:	mov	r2, r0
   13b10:	mov	r1, r4
   13b14:	mov	r0, #0
   13b18:	bl	11384 <error@plt>
   13b1c:	bl	117ec <__assert_fail@plt+0x294>
   13b20:	movw	r3, #33464	; 0x82b8
   13b24:	movt	r3, #3
   13b28:	str	r0, [r3]
   13b2c:	bx	lr
   13b30:	movw	r3, #33464	; 0x82b8
   13b34:	movt	r3, #3
   13b38:	strb	r0, [r3, #4]
   13b3c:	bx	lr
   13b40:	strd	r4, [sp, #-16]!
   13b44:	str	r6, [sp, #8]
   13b48:	str	lr, [sp, #12]
   13b4c:	sub	sp, sp, #8
   13b50:	movw	r3, #33212	; 0x81bc
   13b54:	movt	r3, #3
   13b58:	ldr	r0, [r3]
   13b5c:	bl	2598c <__assert_fail@plt+0x14434>
   13b60:	cmp	r0, #0
   13b64:	beq	13b8c <__assert_fail@plt+0x2634>
   13b68:	movw	r3, #33464	; 0x82b8
   13b6c:	movt	r3, #3
   13b70:	ldrb	r3, [r3, #4]
   13b74:	cmp	r3, #0
   13b78:	beq	13bb8 <__assert_fail@plt+0x2660>
   13b7c:	bl	1142c <__errno_location@plt>
   13b80:	ldr	r3, [r0]
   13b84:	cmp	r3, #32
   13b88:	bne	13bb8 <__assert_fail@plt+0x2660>
   13b8c:	movw	r3, #33208	; 0x81b8
   13b90:	movt	r3, #3
   13b94:	ldr	r0, [r3]
   13b98:	bl	2598c <__assert_fail@plt+0x14434>
   13b9c:	cmp	r0, #0
   13ba0:	bne	13c40 <__assert_fail@plt+0x26e8>
   13ba4:	add	sp, sp, #8
   13ba8:	ldrd	r4, [sp]
   13bac:	ldr	r6, [sp, #8]
   13bb0:	add	sp, sp, #12
   13bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bb8:	mov	r2, #5
   13bbc:	movw	r1, #28220	; 0x6e3c
   13bc0:	movt	r1, #2
   13bc4:	mov	r0, #0
   13bc8:	bl	112d0 <dcgettext@plt>
   13bcc:	mov	r4, r0
   13bd0:	movw	r3, #33464	; 0x82b8
   13bd4:	movt	r3, #3
   13bd8:	ldr	r5, [r3]
   13bdc:	cmp	r5, #0
   13be0:	beq	13c20 <__assert_fail@plt+0x26c8>
   13be4:	bl	1142c <__errno_location@plt>
   13be8:	ldr	r6, [r0]
   13bec:	mov	r0, r5
   13bf0:	bl	161bc <__assert_fail@plt+0x4c64>
   13bf4:	str	r4, [sp]
   13bf8:	mov	r3, r0
   13bfc:	movw	r2, #28232	; 0x6e48
   13c00:	movt	r2, #2
   13c04:	mov	r1, r6
   13c08:	mov	r0, #0
   13c0c:	bl	11384 <error@plt>
   13c10:	movw	r3, #33124	; 0x8164
   13c14:	movt	r3, #3
   13c18:	ldr	r0, [r3]
   13c1c:	bl	11258 <_exit@plt>
   13c20:	bl	1142c <__errno_location@plt>
   13c24:	mov	r3, r4
   13c28:	movw	r2, #27632	; 0x6bf0
   13c2c:	movt	r2, #2
   13c30:	ldr	r1, [r0]
   13c34:	mov	r0, #0
   13c38:	bl	11384 <error@plt>
   13c3c:	b	13c10 <__assert_fail@plt+0x26b8>
   13c40:	movw	r3, #33124	; 0x8164
   13c44:	movt	r3, #3
   13c48:	ldr	r0, [r3]
   13c4c:	bl	11258 <_exit@plt>
   13c50:	strd	r4, [sp, #-16]!
   13c54:	str	r6, [sp, #8]
   13c58:	str	lr, [sp, #12]
   13c5c:	sub	sp, sp, #8
   13c60:	mov	r4, r0
   13c64:	bl	11480 <fileno@plt>
   13c68:	cmp	r0, #0
   13c6c:	blt	13ce4 <__assert_fail@plt+0x278c>
   13c70:	mov	r0, r4
   13c74:	bl	113c0 <__freading@plt>
   13c78:	cmp	r0, #0
   13c7c:	beq	13cb0 <__assert_fail@plt+0x2758>
   13c80:	mov	r0, r4
   13c84:	bl	11480 <fileno@plt>
   13c88:	mov	r3, #1
   13c8c:	str	r3, [sp]
   13c90:	mov	r2, #0
   13c94:	mov	r3, #0
   13c98:	bl	11348 <lseek64@plt>
   13c9c:	mvn	r2, #0
   13ca0:	mvn	r3, #0
   13ca4:	cmp	r1, r3
   13ca8:	cmpeq	r0, r2
   13cac:	beq	13cf0 <__assert_fail@plt+0x2798>
   13cb0:	mov	r0, r4
   13cb4:	bl	13d8c <__assert_fail@plt+0x2834>
   13cb8:	cmp	r0, #0
   13cbc:	beq	13cf0 <__assert_fail@plt+0x2798>
   13cc0:	bl	1142c <__errno_location@plt>
   13cc4:	mov	r5, r0
   13cc8:	ldr	r6, [r0]
   13ccc:	mov	r0, r4
   13cd0:	bl	11498 <fclose@plt>
   13cd4:	cmp	r6, #0
   13cd8:	strne	r6, [r5]
   13cdc:	mvnne	r0, #0
   13ce0:	b	13cf8 <__assert_fail@plt+0x27a0>
   13ce4:	mov	r0, r4
   13ce8:	bl	11498 <fclose@plt>
   13cec:	b	13cf8 <__assert_fail@plt+0x27a0>
   13cf0:	mov	r0, r4
   13cf4:	bl	11498 <fclose@plt>
   13cf8:	add	sp, sp, #8
   13cfc:	ldrd	r4, [sp]
   13d00:	ldr	r6, [sp, #8]
   13d04:	add	sp, sp, #12
   13d08:	pop	{pc}		; (ldr pc, [sp], #4)
   13d0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13d10:	strd	r6, [sp, #8]
   13d14:	str	r8, [sp, #16]
   13d18:	str	lr, [sp, #20]
   13d1c:	mov	r5, r0
   13d20:	mov	r0, r1
   13d24:	mov	r1, r2
   13d28:	mov	r2, r3
   13d2c:	bl	11390 <open64@plt>
   13d30:	mov	r4, r0
   13d34:	cmp	r5, r0
   13d38:	movne	r3, #0
   13d3c:	moveq	r3, #1
   13d40:	orrs	r3, r3, r0, lsr #31
   13d44:	beq	13d60 <__assert_fail@plt+0x2808>
   13d48:	mov	r0, r4
   13d4c:	ldrd	r4, [sp]
   13d50:	ldrd	r6, [sp, #8]
   13d54:	ldr	r8, [sp, #16]
   13d58:	add	sp, sp, #20
   13d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d60:	mov	r1, r5
   13d64:	bl	112e8 <dup2@plt>
   13d68:	mov	r6, r0
   13d6c:	bl	1142c <__errno_location@plt>
   13d70:	mov	r5, r0
   13d74:	ldr	r7, [r0]
   13d78:	mov	r0, r4
   13d7c:	bl	11540 <close@plt>
   13d80:	str	r7, [r5]
   13d84:	mov	r4, r6
   13d88:	b	13d48 <__assert_fail@plt+0x27f0>
   13d8c:	str	r4, [sp, #-8]!
   13d90:	str	lr, [sp, #4]
   13d94:	sub	sp, sp, #8
   13d98:	subs	r4, r0, #0
   13d9c:	beq	13db0 <__assert_fail@plt+0x2858>
   13da0:	mov	r0, r4
   13da4:	bl	113c0 <__freading@plt>
   13da8:	cmp	r0, #0
   13dac:	bne	13dc8 <__assert_fail@plt+0x2870>
   13db0:	mov	r0, r4
   13db4:	bl	1121c <fflush@plt>
   13db8:	add	sp, sp, #8
   13dbc:	ldr	r4, [sp]
   13dc0:	add	sp, sp, #4
   13dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc8:	ldr	r3, [r4]
   13dcc:	tst	r3, #256	; 0x100
   13dd0:	bne	13de0 <__assert_fail@plt+0x2888>
   13dd4:	mov	r0, r4
   13dd8:	bl	1121c <fflush@plt>
   13ddc:	b	13db8 <__assert_fail@plt+0x2860>
   13de0:	mov	r3, #1
   13de4:	str	r3, [sp]
   13de8:	mov	r2, #0
   13dec:	mov	r3, #0
   13df0:	mov	r0, r4
   13df4:	bl	13f0c <__assert_fail@plt+0x29b4>
   13df8:	b	13dd4 <__assert_fail@plt+0x287c>
   13dfc:	strd	r4, [sp, #-16]!
   13e00:	str	r6, [sp, #8]
   13e04:	str	lr, [sp, #12]
   13e08:	mov	r5, r1
   13e0c:	bl	11504 <fopen64@plt>
   13e10:	subs	r4, r0, #0
   13e14:	beq	13e28 <__assert_fail@plt+0x28d0>
   13e18:	mov	r0, r4
   13e1c:	bl	11480 <fileno@plt>
   13e20:	cmp	r0, #2
   13e24:	bls	13e3c <__assert_fail@plt+0x28e4>
   13e28:	mov	r0, r4
   13e2c:	ldrd	r4, [sp]
   13e30:	ldr	r6, [sp, #8]
   13e34:	add	sp, sp, #12
   13e38:	pop	{pc}		; (ldr pc, [sp], #4)
   13e3c:	bl	23e8c <__assert_fail@plt+0x12934>
   13e40:	subs	r6, r0, #0
   13e44:	blt	13e8c <__assert_fail@plt+0x2934>
   13e48:	mov	r0, r4
   13e4c:	bl	13c50 <__assert_fail@plt+0x26f8>
   13e50:	cmp	r0, #0
   13e54:	bne	13e6c <__assert_fail@plt+0x2914>
   13e58:	mov	r1, r5
   13e5c:	mov	r0, r6
   13e60:	bl	111a4 <fdopen@plt>
   13e64:	subs	r4, r0, #0
   13e68:	bne	13e28 <__assert_fail@plt+0x28d0>
   13e6c:	bl	1142c <__errno_location@plt>
   13e70:	mov	r4, r0
   13e74:	ldr	r5, [r0]
   13e78:	mov	r0, r6
   13e7c:	bl	11540 <close@plt>
   13e80:	str	r5, [r4]
   13e84:	mov	r4, #0
   13e88:	b	13e28 <__assert_fail@plt+0x28d0>
   13e8c:	bl	1142c <__errno_location@plt>
   13e90:	mov	r5, r0
   13e94:	ldr	r6, [r0]
   13e98:	mov	r0, r4
   13e9c:	bl	13c50 <__assert_fail@plt+0x26f8>
   13ea0:	str	r6, [r5]
   13ea4:	mov	r4, #0
   13ea8:	b	13e28 <__assert_fail@plt+0x28d0>
   13eac:	strd	r4, [sp, #-12]!
   13eb0:	str	lr, [sp, #8]
   13eb4:	sub	sp, sp, #12
   13eb8:	mov	r5, r0
   13ebc:	bl	1142c <__errno_location@plt>
   13ec0:	mov	r4, r0
   13ec4:	ldr	r3, [r0]
   13ec8:	str	r3, [sp]
   13ecc:	str	r3, [sp, #4]
   13ed0:	mov	r3, #0
   13ed4:	str	r3, [r0]
   13ed8:	mov	r0, r5
   13edc:	bl	11240 <free@plt>
   13ee0:	ldr	r3, [r4]
   13ee4:	clz	r3, r3
   13ee8:	lsr	r3, r3, #5
   13eec:	add	r2, sp, #8
   13ef0:	add	r3, r2, r3, lsl #2
   13ef4:	ldr	r3, [r3, #-8]
   13ef8:	str	r3, [r4]
   13efc:	add	sp, sp, #12
   13f00:	ldrd	r4, [sp]
   13f04:	add	sp, sp, #8
   13f08:	pop	{pc}		; (ldr pc, [sp], #4)
   13f0c:	str	r4, [sp, #-16]!
   13f10:	strd	r6, [sp, #4]
   13f14:	str	lr, [sp, #12]
   13f18:	sub	sp, sp, #8
   13f1c:	mov	r4, r0
   13f20:	mov	r6, r2
   13f24:	mov	r7, r3
   13f28:	ldr	r2, [r0, #8]
   13f2c:	ldr	r3, [r0, #4]
   13f30:	cmp	r2, r3
   13f34:	beq	13f64 <__assert_fail@plt+0x2a0c>
   13f38:	ldr	r3, [sp, #24]
   13f3c:	str	r3, [sp]
   13f40:	mov	r2, r6
   13f44:	mov	r3, r7
   13f48:	mov	r0, r4
   13f4c:	bl	114a4 <fseeko64@plt>
   13f50:	add	sp, sp, #8
   13f54:	ldr	r4, [sp]
   13f58:	ldrd	r6, [sp, #4]
   13f5c:	add	sp, sp, #12
   13f60:	pop	{pc}		; (ldr pc, [sp], #4)
   13f64:	ldr	r2, [r0, #20]
   13f68:	ldr	r3, [r0, #16]
   13f6c:	cmp	r2, r3
   13f70:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f74:	ldr	r3, [r0, #36]	; 0x24
   13f78:	cmp	r3, #0
   13f7c:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f80:	bl	11480 <fileno@plt>
   13f84:	ldr	r3, [sp, #24]
   13f88:	str	r3, [sp]
   13f8c:	mov	r2, r6
   13f90:	mov	r3, r7
   13f94:	bl	11348 <lseek64@plt>
   13f98:	mvn	r2, #0
   13f9c:	mvn	r3, #0
   13fa0:	cmp	r1, r3
   13fa4:	cmpeq	r0, r2
   13fa8:	beq	13fc4 <__assert_fail@plt+0x2a6c>
   13fac:	ldr	r3, [r4]
   13fb0:	bic	r3, r3, #16
   13fb4:	str	r3, [r4]
   13fb8:	strd	r0, [r4, #80]	; 0x50
   13fbc:	mov	r0, #0
   13fc0:	b	13f50 <__assert_fail@plt+0x29f8>
   13fc4:	mvn	r0, #0
   13fc8:	b	13f50 <__assert_fail@plt+0x29f8>
   13fcc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13fd0:	strd	r6, [sp, #8]
   13fd4:	strd	r8, [sp, #16]
   13fd8:	str	sl, [sp, #24]
   13fdc:	str	lr, [sp, #28]
   13fe0:	mov	r4, r0
   13fe4:	mov	r5, r1
   13fe8:	add	r6, r2, #20
   13fec:	mov	r3, #0
   13ff0:	strb	r3, [r2, #20]
   13ff4:	cmp	r0, #0
   13ff8:	sbcs	r3, r1, #0
   13ffc:	movge	r8, #10
   14000:	movge	r9, #0
   14004:	movlt	r8, #10
   14008:	movlt	r9, #0
   1400c:	blt	14070 <__assert_fail@plt+0x2b18>
   14010:	mov	r2, r8
   14014:	mov	r3, r9
   14018:	mov	r0, r4
   1401c:	mov	r1, r5
   14020:	bl	25f64 <__assert_fail@plt+0x14a0c>
   14024:	add	r2, r2, #48	; 0x30
   14028:	strb	r2, [r6, #-1]!
   1402c:	mov	r2, r8
   14030:	mov	r3, r9
   14034:	mov	r0, r4
   14038:	mov	r1, r5
   1403c:	bl	25f64 <__assert_fail@plt+0x14a0c>
   14040:	mov	r4, r0
   14044:	mov	r5, r1
   14048:	orrs	r3, r4, r5
   1404c:	bne	14010 <__assert_fail@plt+0x2ab8>
   14050:	mov	r0, r6
   14054:	ldrd	r4, [sp]
   14058:	ldrd	r6, [sp, #8]
   1405c:	ldrd	r8, [sp, #16]
   14060:	ldr	sl, [sp, #24]
   14064:	add	sp, sp, #28
   14068:	pop	{pc}		; (ldr pc, [sp], #4)
   1406c:	mov	r6, r7
   14070:	sub	r7, r6, #1
   14074:	mov	r2, r8
   14078:	mov	r3, r9
   1407c:	mov	r0, r4
   14080:	mov	r1, r5
   14084:	bl	25f64 <__assert_fail@plt+0x14a0c>
   14088:	rsb	r2, r2, #48	; 0x30
   1408c:	strb	r2, [r6, #-1]
   14090:	mov	r2, r8
   14094:	mov	r3, r9
   14098:	mov	r0, r4
   1409c:	mov	r1, r5
   140a0:	bl	25f64 <__assert_fail@plt+0x14a0c>
   140a4:	mov	r4, r0
   140a8:	mov	r5, r1
   140ac:	orrs	r3, r4, r5
   140b0:	bne	1406c <__assert_fail@plt+0x2b14>
   140b4:	sub	r6, r6, #2
   140b8:	mov	r3, #45	; 0x2d
   140bc:	strb	r3, [r7, #-1]
   140c0:	b	14050 <__assert_fail@plt+0x2af8>
   140c4:	strd	r4, [sp, #-16]!
   140c8:	str	r6, [sp, #8]
   140cc:	str	lr, [sp, #12]
   140d0:	subs	r4, r0, #0
   140d4:	beq	14170 <__assert_fail@plt+0x2c18>
   140d8:	mov	r1, #47	; 0x2f
   140dc:	mov	r0, r4
   140e0:	bl	114d4 <strrchr@plt>
   140e4:	subs	r5, r0, #0
   140e8:	beq	14148 <__assert_fail@plt+0x2bf0>
   140ec:	add	r6, r5, #1
   140f0:	sub	r3, r6, r4
   140f4:	cmp	r3, #6
   140f8:	ble	14148 <__assert_fail@plt+0x2bf0>
   140fc:	mov	r2, #7
   14100:	movw	r1, #28296	; 0x6e88
   14104:	movt	r1, #2
   14108:	sub	r0, r5, #6
   1410c:	bl	11528 <strncmp@plt>
   14110:	cmp	r0, #0
   14114:	bne	14148 <__assert_fail@plt+0x2bf0>
   14118:	mov	r2, #3
   1411c:	movw	r1, #28304	; 0x6e90
   14120:	movt	r1, #2
   14124:	mov	r0, r6
   14128:	bl	11528 <strncmp@plt>
   1412c:	cmp	r0, #0
   14130:	movne	r4, r6
   14134:	bne	14148 <__assert_fail@plt+0x2bf0>
   14138:	add	r4, r5, #4
   1413c:	movw	r3, #33192	; 0x81a8
   14140:	movt	r3, #3
   14144:	str	r4, [r3]
   14148:	movw	r3, #33472	; 0x82c0
   1414c:	movt	r3, #3
   14150:	str	r4, [r3]
   14154:	movw	r3, #33196	; 0x81ac
   14158:	movt	r3, #3
   1415c:	str	r4, [r3]
   14160:	ldrd	r4, [sp]
   14164:	ldr	r6, [sp, #8]
   14168:	add	sp, sp, #12
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	movw	r3, #33208	; 0x81b8
   14174:	movt	r3, #3
   14178:	ldr	r3, [r3]
   1417c:	mov	r2, #55	; 0x37
   14180:	mov	r1, #1
   14184:	movw	r0, #28240	; 0x6e50
   14188:	movt	r0, #2
   1418c:	bl	1133c <fwrite@plt>
   14190:	bl	11534 <abort@plt>
   14194:	mov	r2, #0
   14198:	mov	r3, #0
   1419c:	strd	r2, [r0]
   141a0:	strd	r2, [r0, #8]
   141a4:	strd	r2, [r0, #16]
   141a8:	strd	r2, [r0, #24]
   141ac:	strd	r2, [r0, #32]
   141b0:	strd	r2, [r0, #40]	; 0x28
   141b4:	cmp	r1, #10
   141b8:	beq	141c4 <__assert_fail@plt+0x2c6c>
   141bc:	str	r1, [r0]
   141c0:	bx	lr
   141c4:	str	r4, [sp, #-8]!
   141c8:	str	lr, [sp, #4]
   141cc:	bl	11534 <abort@plt>
   141d0:	strd	r4, [sp, #-16]!
   141d4:	str	r6, [sp, #8]
   141d8:	str	lr, [sp, #12]
   141dc:	mov	r5, r0
   141e0:	mov	r6, r1
   141e4:	mov	r2, #5
   141e8:	mov	r1, r0
   141ec:	mov	r0, #0
   141f0:	bl	112d0 <dcgettext@plt>
   141f4:	mov	r4, r0
   141f8:	cmp	r5, r0
   141fc:	beq	14214 <__assert_fail@plt+0x2cbc>
   14200:	mov	r0, r4
   14204:	ldrd	r4, [sp]
   14208:	ldr	r6, [sp, #8]
   1420c:	add	sp, sp, #12
   14210:	pop	{pc}		; (ldr pc, [sp], #4)
   14214:	bl	25d58 <__assert_fail@plt+0x14800>
   14218:	ldrb	r3, [r0]
   1421c:	bic	r3, r3, #32
   14220:	cmp	r3, #85	; 0x55
   14224:	bne	142a8 <__assert_fail@plt+0x2d50>
   14228:	ldrb	r3, [r0, #1]
   1422c:	bic	r3, r3, #32
   14230:	cmp	r3, #84	; 0x54
   14234:	bne	1426c <__assert_fail@plt+0x2d14>
   14238:	ldrb	r3, [r0, #2]
   1423c:	bic	r3, r3, #32
   14240:	cmp	r3, #70	; 0x46
   14244:	bne	1426c <__assert_fail@plt+0x2d14>
   14248:	ldrb	r3, [r0, #3]
   1424c:	cmp	r3, #45	; 0x2d
   14250:	bne	1426c <__assert_fail@plt+0x2d14>
   14254:	ldrb	r3, [r0, #4]
   14258:	cmp	r3, #56	; 0x38
   1425c:	bne	1426c <__assert_fail@plt+0x2d14>
   14260:	ldrb	r3, [r0, #5]
   14264:	cmp	r3, #0
   14268:	beq	14288 <__assert_fail@plt+0x2d30>
   1426c:	movw	r4, #28392	; 0x6ee8
   14270:	movt	r4, #2
   14274:	movw	r3, #27940	; 0x6d24
   14278:	movt	r3, #2
   1427c:	cmp	r6, #9
   14280:	movne	r4, r3
   14284:	b	14200 <__assert_fail@plt+0x2ca8>
   14288:	ldrb	r2, [r4]
   1428c:	movw	r4, #28408	; 0x6ef8
   14290:	movt	r4, #2
   14294:	movw	r3, #28396	; 0x6eec
   14298:	movt	r3, #2
   1429c:	cmp	r2, #96	; 0x60
   142a0:	movne	r4, r3
   142a4:	b	14200 <__assert_fail@plt+0x2ca8>
   142a8:	cmp	r3, #71	; 0x47
   142ac:	bne	1426c <__assert_fail@plt+0x2d14>
   142b0:	ldrb	r3, [r0, #1]
   142b4:	bic	r3, r3, #32
   142b8:	cmp	r3, #66	; 0x42
   142bc:	bne	1426c <__assert_fail@plt+0x2d14>
   142c0:	ldrb	r3, [r0, #2]
   142c4:	cmp	r3, #49	; 0x31
   142c8:	bne	1426c <__assert_fail@plt+0x2d14>
   142cc:	ldrb	r3, [r0, #3]
   142d0:	cmp	r3, #56	; 0x38
   142d4:	bne	1426c <__assert_fail@plt+0x2d14>
   142d8:	ldrb	r3, [r0, #4]
   142dc:	cmp	r3, #48	; 0x30
   142e0:	bne	1426c <__assert_fail@plt+0x2d14>
   142e4:	ldrb	r3, [r0, #5]
   142e8:	cmp	r3, #51	; 0x33
   142ec:	bne	1426c <__assert_fail@plt+0x2d14>
   142f0:	ldrb	r3, [r0, #6]
   142f4:	cmp	r3, #48	; 0x30
   142f8:	bne	1426c <__assert_fail@plt+0x2d14>
   142fc:	ldrb	r3, [r0, #7]
   14300:	cmp	r3, #0
   14304:	bne	1426c <__assert_fail@plt+0x2d14>
   14308:	ldrb	r2, [r4]
   1430c:	movw	r4, #28404	; 0x6ef4
   14310:	movt	r4, #2
   14314:	movw	r3, #28400	; 0x6ef0
   14318:	movt	r3, #2
   1431c:	cmp	r2, #96	; 0x60
   14320:	movne	r4, r3
   14324:	b	14200 <__assert_fail@plt+0x2ca8>
   14328:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1432c:	strd	r6, [sp, #8]
   14330:	strd	r8, [sp, #16]
   14334:	strd	sl, [sp, #24]
   14338:	str	lr, [sp, #32]
   1433c:	sub	sp, sp, #116	; 0x74
   14340:	str	r0, [sp, #64]	; 0x40
   14344:	mov	r8, r1
   14348:	str	r2, [sp, #48]	; 0x30
   1434c:	str	r3, [sp, #24]
   14350:	ldr	r7, [sp, #152]	; 0x98
   14354:	bl	11354 <__ctype_get_mb_cur_max@plt>
   14358:	str	r0, [sp, #76]	; 0x4c
   1435c:	ldr	r3, [sp, #156]	; 0x9c
   14360:	ubfx	r3, r3, #1, #1
   14364:	str	r3, [sp, #32]
   14368:	mov	r3, #1
   1436c:	str	r3, [sp, #40]	; 0x28
   14370:	mov	r3, #0
   14374:	str	r3, [sp, #68]	; 0x44
   14378:	str	r3, [sp, #36]	; 0x24
   1437c:	str	r3, [sp, #28]
   14380:	str	r3, [sp, #52]	; 0x34
   14384:	str	r3, [sp, #60]	; 0x3c
   14388:	str	r3, [sp, #72]	; 0x48
   1438c:	movw	r3, #28412	; 0x6efc
   14390:	movt	r3, #2
   14394:	str	r3, [sp, #80]	; 0x50
   14398:	mov	r9, r8
   1439c:	mov	sl, r7
   143a0:	cmp	sl, #10
   143a4:	ldrls	pc, [pc, sl, lsl #2]
   143a8:	b	1456c <__assert_fail@plt+0x3014>
   143ac:	andeq	r4, r1, ip, lsl #8
   143b0:	andeq	r4, r1, r0, ror #7
   143b4:	andeq	r4, r1, r4, asr #10
   143b8:	ldrdeq	r4, [r1], -r8
   143bc:	strdeq	r4, [r1], -r8
   143c0:	andeq	r4, r1, ip, lsl r4
   143c4:	andeq	r5, r1, r8, ror #15
   143c8:	andeq	r4, r1, r0, ror r5
   143cc:	andeq	r4, r1, r8, asr r4
   143d0:	andeq	r4, r1, r8, asr r4
   143d4:	andeq	r4, r1, r8, asr r4
   143d8:	mov	r3, #1
   143dc:	str	r3, [sp, #28]
   143e0:	mov	r3, #1
   143e4:	str	r3, [sp, #32]
   143e8:	str	r3, [sp, #52]	; 0x34
   143ec:	movw	r3, #27940	; 0x6d24
   143f0:	movt	r3, #2
   143f4:	str	r3, [sp, #60]	; 0x3c
   143f8:	mov	fp, #0
   143fc:	mov	sl, #2
   14400:	mov	r6, #0
   14404:	ldr	r8, [sp, #64]	; 0x40
   14408:	b	14c80 <__assert_fail@plt+0x3728>
   1440c:	mov	fp, sl
   14410:	mov	r3, #0
   14414:	str	r3, [sp, #32]
   14418:	b	14400 <__assert_fail@plt+0x2ea8>
   1441c:	ldr	r3, [sp, #32]
   14420:	cmp	r3, #0
   14424:	bne	14584 <__assert_fail@plt+0x302c>
   14428:	cmp	r9, #0
   1442c:	beq	145a8 <__assert_fail@plt+0x3050>
   14430:	mov	r3, #34	; 0x22
   14434:	ldr	r2, [sp, #64]	; 0x40
   14438:	strb	r3, [r2]
   1443c:	mov	fp, #1
   14440:	str	fp, [sp, #28]
   14444:	str	fp, [sp, #52]	; 0x34
   14448:	movw	r3, #28392	; 0x6ee8
   1444c:	movt	r3, #2
   14450:	str	r3, [sp, #60]	; 0x3c
   14454:	b	14400 <__assert_fail@plt+0x2ea8>
   14458:	cmp	sl, #10
   1445c:	bne	14490 <__assert_fail@plt+0x2f38>
   14460:	ldr	r3, [sp, #32]
   14464:	cmp	r3, #0
   14468:	movne	fp, #0
   1446c:	beq	144b8 <__assert_fail@plt+0x2f60>
   14470:	ldr	r0, [sp, #168]	; 0xa8
   14474:	bl	11414 <strlen@plt>
   14478:	str	r0, [sp, #52]	; 0x34
   1447c:	ldr	r3, [sp, #168]	; 0xa8
   14480:	str	r3, [sp, #60]	; 0x3c
   14484:	mov	r3, #1
   14488:	str	r3, [sp, #28]
   1448c:	b	14400 <__assert_fail@plt+0x2ea8>
   14490:	mov	r1, sl
   14494:	ldr	r0, [sp, #80]	; 0x50
   14498:	bl	141d0 <__assert_fail@plt+0x2c78>
   1449c:	str	r0, [sp, #164]	; 0xa4
   144a0:	mov	r1, sl
   144a4:	movw	r0, #27940	; 0x6d24
   144a8:	movt	r0, #2
   144ac:	bl	141d0 <__assert_fail@plt+0x2c78>
   144b0:	str	r0, [sp, #168]	; 0xa8
   144b4:	b	14460 <__assert_fail@plt+0x2f08>
   144b8:	ldr	r3, [sp, #164]	; 0xa4
   144bc:	ldrb	r3, [r3]
   144c0:	cmp	r3, #0
   144c4:	beq	144f0 <__assert_fail@plt+0x2f98>
   144c8:	ldr	r2, [sp, #164]	; 0xa4
   144cc:	mov	fp, #0
   144d0:	ldr	r1, [sp, #64]	; 0x40
   144d4:	cmp	r9, fp
   144d8:	strbhi	r3, [r1, fp]
   144dc:	add	fp, fp, #1
   144e0:	ldrb	r3, [r2, #1]!
   144e4:	cmp	r3, #0
   144e8:	bne	144d4 <__assert_fail@plt+0x2f7c>
   144ec:	b	14470 <__assert_fail@plt+0x2f18>
   144f0:	mov	fp, #0
   144f4:	b	14470 <__assert_fail@plt+0x2f18>
   144f8:	ldr	r3, [sp, #32]
   144fc:	cmp	r3, #0
   14500:	bne	143e0 <__assert_fail@plt+0x2e88>
   14504:	mov	r3, #1
   14508:	str	r3, [sp, #28]
   1450c:	cmp	r9, #0
   14510:	beq	145c4 <__assert_fail@plt+0x306c>
   14514:	mov	r3, #39	; 0x27
   14518:	ldr	r2, [sp, #64]	; 0x40
   1451c:	strb	r3, [r2]
   14520:	mov	r3, #0
   14524:	str	r3, [sp, #32]
   14528:	mov	fp, #1
   1452c:	str	fp, [sp, #52]	; 0x34
   14530:	movw	r3, #27940	; 0x6d24
   14534:	movt	r3, #2
   14538:	str	r3, [sp, #60]	; 0x3c
   1453c:	mov	sl, #2
   14540:	b	14400 <__assert_fail@plt+0x2ea8>
   14544:	ldr	r3, [sp, #32]
   14548:	cmp	r3, #0
   1454c:	beq	1450c <__assert_fail@plt+0x2fb4>
   14550:	mov	r3, #1
   14554:	str	r3, [sp, #52]	; 0x34
   14558:	movw	r3, #27940	; 0x6d24
   1455c:	movt	r3, #2
   14560:	str	r3, [sp, #60]	; 0x3c
   14564:	mov	fp, #0
   14568:	b	14400 <__assert_fail@plt+0x2ea8>
   1456c:	bl	11534 <abort@plt>
   14570:	mov	fp, #0
   14574:	str	fp, [sp, #32]
   14578:	mov	r3, #1
   1457c:	str	r3, [sp, #28]
   14580:	b	14400 <__assert_fail@plt+0x2ea8>
   14584:	ldr	r3, [sp, #32]
   14588:	str	r3, [sp, #28]
   1458c:	mov	r3, #1
   14590:	str	r3, [sp, #52]	; 0x34
   14594:	movw	r3, #28392	; 0x6ee8
   14598:	movt	r3, #2
   1459c:	str	r3, [sp, #60]	; 0x3c
   145a0:	mov	fp, #0
   145a4:	b	14400 <__assert_fail@plt+0x2ea8>
   145a8:	mov	fp, #1
   145ac:	str	fp, [sp, #28]
   145b0:	str	fp, [sp, #52]	; 0x34
   145b4:	movw	r3, #28392	; 0x6ee8
   145b8:	movt	r3, #2
   145bc:	str	r3, [sp, #60]	; 0x3c
   145c0:	b	14400 <__assert_fail@plt+0x2ea8>
   145c4:	mov	r3, #0
   145c8:	str	r3, [sp, #32]
   145cc:	mov	fp, #1
   145d0:	str	fp, [sp, #52]	; 0x34
   145d4:	movw	r3, #27940	; 0x6d24
   145d8:	movt	r3, #2
   145dc:	str	r3, [sp, #60]	; 0x3c
   145e0:	mov	sl, #2
   145e4:	b	14400 <__assert_fail@plt+0x2ea8>
   145e8:	mov	r3, r2
   145ec:	add	r4, r6, r2
   145f0:	ldr	r2, [sp, #24]
   145f4:	cmp	r3, #1
   145f8:	movls	r3, #0
   145fc:	movhi	r3, #1
   14600:	cmn	r2, #1
   14604:	movne	r3, #0
   14608:	cmp	r3, #0
   1460c:	beq	1461c <__assert_fail@plt+0x30c4>
   14610:	ldr	r0, [sp, #48]	; 0x30
   14614:	bl	11414 <strlen@plt>
   14618:	str	r0, [sp, #24]
   1461c:	ldr	r3, [sp, #24]
   14620:	cmp	r4, r3
   14624:	bhi	15810 <__assert_fail@plt+0x42b8>
   14628:	ldr	r3, [sp, #48]	; 0x30
   1462c:	add	r4, r3, r6
   14630:	ldr	r2, [sp, #52]	; 0x34
   14634:	ldr	r1, [sp, #60]	; 0x3c
   14638:	mov	r0, r4
   1463c:	bl	112b8 <memcmp@plt>
   14640:	cmp	r0, #0
   14644:	bne	15810 <__assert_fail@plt+0x42b8>
   14648:	ldr	r3, [sp, #32]
   1464c:	cmp	r3, #0
   14650:	bne	14860 <__assert_fail@plt+0x3308>
   14654:	ldrb	r4, [r4]
   14658:	cmp	r4, #126	; 0x7e
   1465c:	ldrls	pc, [pc, r4, lsl #2]
   14660:	b	15114 <__assert_fail@plt+0x3bbc>
   14664:	andeq	r4, r1, r4, lsr #17
   14668:	andeq	r5, r1, r4, lsl r1
   1466c:	andeq	r5, r1, r4, lsl r1
   14670:	andeq	r5, r1, r4, lsl r1
   14674:	andeq	r5, r1, r4, lsl r1
   14678:	andeq	r5, r1, r4, lsl r1
   1467c:	andeq	r5, r1, r4, lsl r1
   14680:			; <UNDEFINED> instruction: 0x00014fbc
   14684:	andeq	r4, r1, r0, asr #22
   14688:	andeq	r4, r1, r4, ror #29
   1468c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14690:	strdeq	r4, [r1], -r8
   14694:	andeq	r4, r1, r4, asr fp
   14698:	andeq	r4, r1, r8, ror #22
   1469c:	andeq	r5, r1, r4, lsl r1
   146a0:	andeq	r5, r1, r4, lsl r1
   146a4:	andeq	r5, r1, r4, lsl r1
   146a8:	andeq	r5, r1, r4, lsl r1
   146ac:	andeq	r5, r1, r4, lsl r1
   146b0:	andeq	r5, r1, r4, lsl r1
   146b4:	andeq	r5, r1, r4, lsl r1
   146b8:	andeq	r5, r1, r4, lsl r1
   146bc:	andeq	r5, r1, r4, lsl r1
   146c0:	andeq	r5, r1, r4, lsl r1
   146c4:	andeq	r5, r1, r4, lsl r1
   146c8:	andeq	r5, r1, r4, lsl r1
   146cc:	andeq	r5, r1, r4, lsl r1
   146d0:	andeq	r5, r1, r4, lsl r1
   146d4:	andeq	r5, r1, r4, lsl r1
   146d8:	andeq	r5, r1, r4, lsl r1
   146dc:	andeq	r5, r1, r4, lsl r1
   146e0:	andeq	r5, r1, r4, lsl r1
   146e4:	andeq	r5, r1, r0, lsr r0
   146e8:	andeq	r5, r1, r4, asr r0
   146ec:	andeq	r5, r1, r4, asr r0
   146f0:	andeq	r4, r1, ip, ror #31
   146f4:	andeq	r5, r1, r4, asr r0
   146f8:	andeq	r5, r1, r4, ror r5
   146fc:	andeq	r5, r1, r4, asr r0
   14700:	andeq	r5, r1, r4, ror r0
   14704:	andeq	r5, r1, r4, asr r0
   14708:	andeq	r5, r1, r4, asr r0
   1470c:	andeq	r5, r1, r4, asr r0
   14710:	andeq	r5, r1, r4, ror r5
   14714:	andeq	r5, r1, r4, ror r5
   14718:	andeq	r5, r1, r4, ror r5
   1471c:	andeq	r5, r1, r4, ror r5
   14720:	andeq	r5, r1, r4, ror r5
   14724:	andeq	r5, r1, r4, ror r5
   14728:	andeq	r5, r1, r4, ror r5
   1472c:	andeq	r5, r1, r4, ror r5
   14730:	andeq	r5, r1, r4, ror r5
   14734:	andeq	r5, r1, r4, ror r5
   14738:	andeq	r5, r1, r4, ror r5
   1473c:	andeq	r5, r1, r4, ror r5
   14740:	andeq	r5, r1, r4, ror r5
   14744:	andeq	r5, r1, r4, ror r5
   14748:	andeq	r5, r1, r4, ror r5
   1474c:	andeq	r5, r1, r4, ror r5
   14750:	andeq	r5, r1, r4, asr r0
   14754:	andeq	r5, r1, r4, asr r0
   14758:	andeq	r5, r1, r4, asr r0
   1475c:	andeq	r5, r1, r4, asr r0
   14760:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14764:	andeq	r5, r1, r4, lsl r1
   14768:	andeq	r5, r1, r4, ror r5
   1476c:	andeq	r5, r1, r4, ror r5
   14770:	andeq	r5, r1, r4, ror r5
   14774:	andeq	r5, r1, r4, ror r5
   14778:	andeq	r5, r1, r4, ror r5
   1477c:	andeq	r5, r1, r4, ror r5
   14780:	andeq	r5, r1, r4, ror r5
   14784:	andeq	r5, r1, r4, ror r5
   14788:	andeq	r5, r1, r4, ror r5
   1478c:	andeq	r5, r1, r4, ror r5
   14790:	andeq	r5, r1, r4, ror r5
   14794:	andeq	r5, r1, r4, ror r5
   14798:	andeq	r5, r1, r4, ror r5
   1479c:	andeq	r5, r1, r4, ror r5
   147a0:	andeq	r5, r1, r4, ror r5
   147a4:	andeq	r5, r1, r4, ror r5
   147a8:	andeq	r5, r1, r4, ror r5
   147ac:	andeq	r5, r1, r4, ror r5
   147b0:	andeq	r5, r1, r4, ror r5
   147b4:	andeq	r5, r1, r4, ror r5
   147b8:	andeq	r5, r1, r4, ror r5
   147bc:	andeq	r5, r1, r4, ror r5
   147c0:	andeq	r5, r1, r4, ror r5
   147c4:	andeq	r5, r1, r4, ror r5
   147c8:	andeq	r5, r1, r4, ror r5
   147cc:	andeq	r5, r1, r4, ror r5
   147d0:	andeq	r5, r1, r4, asr r0
   147d4:	andeq	r4, r1, ip, lsl #30
   147d8:	andeq	r5, r1, r4, ror r5
   147dc:	andeq	r5, r1, r4, asr r0
   147e0:	andeq	r5, r1, r4, ror r5
   147e4:	andeq	r5, r1, r4, asr r0
   147e8:	andeq	r5, r1, r4, ror r5
   147ec:	andeq	r5, r1, r4, ror r5
   147f0:	andeq	r5, r1, r4, ror r5
   147f4:	andeq	r5, r1, r4, ror r5
   147f8:	andeq	r5, r1, r4, ror r5
   147fc:	andeq	r5, r1, r4, ror r5
   14800:	andeq	r5, r1, r4, ror r5
   14804:	andeq	r5, r1, r4, ror r5
   14808:	andeq	r5, r1, r4, ror r5
   1480c:	andeq	r5, r1, r4, ror r5
   14810:	andeq	r5, r1, r4, ror r5
   14814:	andeq	r5, r1, r4, ror r5
   14818:	andeq	r5, r1, r4, ror r5
   1481c:	andeq	r5, r1, r4, ror r5
   14820:	andeq	r5, r1, r4, ror r5
   14824:	andeq	r5, r1, r4, ror r5
   14828:	andeq	r5, r1, r4, ror r5
   1482c:	andeq	r5, r1, r4, ror r5
   14830:	andeq	r5, r1, r4, ror r5
   14834:	andeq	r5, r1, r4, ror r5
   14838:	andeq	r5, r1, r4, ror r5
   1483c:	andeq	r5, r1, r4, ror r5
   14840:	andeq	r5, r1, r4, ror r5
   14844:	andeq	r5, r1, r4, ror r5
   14848:	andeq	r5, r1, r4, ror r5
   1484c:	andeq	r5, r1, r4, ror r5
   14850:	andeq	r4, r1, ip, asr #31
   14854:	andeq	r5, r1, r4, asr r0
   14858:	andeq	r4, r1, ip, asr #31
   1485c:	andeq	r4, r1, ip, ror #31
   14860:	mov	r8, r9
   14864:	mov	r7, sl
   14868:	b	15768 <__assert_fail@plt+0x4210>
   1486c:	ldr	r3, [sp, #28]
   14870:	cmp	r3, #0
   14874:	bne	14894 <__assert_fail@plt+0x333c>
   14878:	ldr	r3, [sp, #156]	; 0x9c
   1487c:	tst	r3, #1
   14880:	bne	14c7c <__assert_fail@plt+0x3724>
   14884:	ldr	r3, [sp, #28]
   14888:	str	r3, [sp, #44]	; 0x2c
   1488c:	mov	r5, r3
   14890:	b	14b9c <__assert_fail@plt+0x3644>
   14894:	ldr	r3, [sp, #32]
   14898:	cmp	r3, #0
   1489c:	bne	15718 <__assert_fail@plt+0x41c0>
   148a0:	str	r3, [sp, #44]	; 0x2c
   148a4:	ldr	r3, [sp, #36]	; 0x24
   148a8:	eor	r3, r3, #1
   148ac:	cmp	sl, #2
   148b0:	movne	r3, #0
   148b4:	andeq	r3, r3, #1
   148b8:	cmp	r3, #0
   148bc:	beq	14914 <__assert_fail@plt+0x33bc>
   148c0:	cmp	r9, fp
   148c4:	movhi	r2, #39	; 0x27
   148c8:	strbhi	r2, [r8, fp]
   148cc:	add	r2, fp, #1
   148d0:	cmp	r9, r2
   148d4:	movhi	r1, #36	; 0x24
   148d8:	strbhi	r1, [r8, r2]
   148dc:	add	r2, fp, #2
   148e0:	cmp	r9, r2
   148e4:	movhi	r1, #39	; 0x27
   148e8:	strbhi	r1, [r8, r2]
   148ec:	add	r2, fp, #3
   148f0:	cmp	r9, r2
   148f4:	bls	157d4 <__assert_fail@plt+0x427c>
   148f8:	mov	r1, #92	; 0x5c
   148fc:	strb	r1, [r8, r2]
   14900:	add	fp, fp, #4
   14904:	str	r3, [sp, #36]	; 0x24
   14908:	mov	r5, #0
   1490c:	mov	r4, #48	; 0x30
   14910:	b	14be8 <__assert_fail@plt+0x3690>
   14914:	cmp	r9, fp
   14918:	bhi	14940 <__assert_fail@plt+0x33e8>
   1491c:	add	r1, fp, #1
   14920:	ldr	r2, [sp, #56]	; 0x38
   14924:	cmp	r2, #0
   14928:	bne	14968 <__assert_fail@plt+0x3410>
   1492c:	mov	r3, r5
   14930:	ldr	r5, [sp, #56]	; 0x38
   14934:	mov	fp, r1
   14938:	mov	r4, #48	; 0x30
   1493c:	b	14b9c <__assert_fail@plt+0x3644>
   14940:	mov	r2, #92	; 0x5c
   14944:	strb	r2, [r8, fp]
   14948:	add	r1, fp, #1
   1494c:	ldr	r2, [sp, #56]	; 0x38
   14950:	cmp	r2, #0
   14954:	moveq	r3, r5
   14958:	moveq	r5, r2
   1495c:	moveq	fp, r1
   14960:	moveq	r4, #48	; 0x30
   14964:	beq	14be8 <__assert_fail@plt+0x3690>
   14968:	add	r2, r6, #1
   1496c:	ldr	r0, [sp, #24]
   14970:	cmp	r2, r0
   14974:	bcs	14990 <__assert_fail@plt+0x3438>
   14978:	ldr	r0, [sp, #48]	; 0x30
   1497c:	ldrb	r2, [r0, r2]
   14980:	sub	r2, r2, #48	; 0x30
   14984:	uxtb	r2, r2
   14988:	cmp	r2, #9
   1498c:	bls	149a8 <__assert_fail@plt+0x3450>
   14990:	mov	r2, r3
   14994:	mov	r3, r5
   14998:	mov	r5, r2
   1499c:	mov	fp, r1
   149a0:	mov	r4, #48	; 0x30
   149a4:	b	14bc0 <__assert_fail@plt+0x3668>
   149a8:	cmp	r9, r1
   149ac:	movhi	r2, #48	; 0x30
   149b0:	strbhi	r2, [r8, r1]
   149b4:	add	r2, fp, #2
   149b8:	cmp	r9, r2
   149bc:	movhi	r1, #48	; 0x30
   149c0:	strbhi	r1, [r8, r2]
   149c4:	add	r1, fp, #3
   149c8:	b	14990 <__assert_fail@plt+0x3438>
   149cc:	mov	r3, #0
   149d0:	str	r3, [sp, #44]	; 0x2c
   149d4:	cmp	sl, #2
   149d8:	beq	149f4 <__assert_fail@plt+0x349c>
   149dc:	cmp	sl, #5
   149e0:	beq	14a0c <__assert_fail@plt+0x34b4>
   149e4:	mov	r5, #0
   149e8:	mov	r3, r5
   149ec:	mov	r4, #63	; 0x3f
   149f0:	b	14b9c <__assert_fail@plt+0x3644>
   149f4:	ldr	r3, [sp, #32]
   149f8:	cmp	r3, #0
   149fc:	bne	15724 <__assert_fail@plt+0x41cc>
   14a00:	mov	r5, r3
   14a04:	mov	r4, #63	; 0x3f
   14a08:	b	15104 <__assert_fail@plt+0x3bac>
   14a0c:	ldr	r3, [sp, #156]	; 0x9c
   14a10:	tst	r3, #4
   14a14:	beq	1553c <__assert_fail@plt+0x3fe4>
   14a18:	add	r2, r6, #2
   14a1c:	ldr	r3, [sp, #24]
   14a20:	cmp	r2, r3
   14a24:	bcs	1554c <__assert_fail@plt+0x3ff4>
   14a28:	ldr	r3, [sp, #48]	; 0x30
   14a2c:	add	r3, r3, r6
   14a30:	ldrb	r4, [r3, #1]
   14a34:	cmp	r4, #63	; 0x3f
   14a38:	movne	r5, #0
   14a3c:	movne	r3, r5
   14a40:	movne	r4, #63	; 0x3f
   14a44:	bne	14b9c <__assert_fail@plt+0x3644>
   14a48:	ldr	r3, [sp, #48]	; 0x30
   14a4c:	ldrb	r1, [r3, r2]
   14a50:	sub	r3, r1, #33	; 0x21
   14a54:	cmp	r3, #29
   14a58:	ldrls	pc, [pc, r3, lsl #2]
   14a5c:	b	1555c <__assert_fail@plt+0x4004>
   14a60:	ldrdeq	r4, [r1], -r8
   14a64:	andeq	r5, r1, ip, asr r5
   14a68:	andeq	r5, r1, ip, asr r5
   14a6c:	andeq	r5, r1, ip, asr r5
   14a70:	andeq	r5, r1, ip, asr r5
   14a74:	andeq	r5, r1, ip, asr r5
   14a78:	ldrdeq	r4, [r1], -r8
   14a7c:	ldrdeq	r4, [r1], -r8
   14a80:	ldrdeq	r4, [r1], -r8
   14a84:	andeq	r5, r1, ip, asr r5
   14a88:	andeq	r5, r1, ip, asr r5
   14a8c:	andeq	r5, r1, ip, asr r5
   14a90:	ldrdeq	r4, [r1], -r8
   14a94:	andeq	r5, r1, ip, asr r5
   14a98:	ldrdeq	r4, [r1], -r8
   14a9c:	andeq	r5, r1, ip, asr r5
   14aa0:	andeq	r5, r1, ip, asr r5
   14aa4:	andeq	r5, r1, ip, asr r5
   14aa8:	andeq	r5, r1, ip, asr r5
   14aac:	andeq	r5, r1, ip, asr r5
   14ab0:	andeq	r5, r1, ip, asr r5
   14ab4:	andeq	r5, r1, ip, asr r5
   14ab8:	andeq	r5, r1, ip, asr r5
   14abc:	andeq	r5, r1, ip, asr r5
   14ac0:	andeq	r5, r1, ip, asr r5
   14ac4:	andeq	r5, r1, ip, asr r5
   14ac8:	andeq	r5, r1, ip, asr r5
   14acc:	ldrdeq	r4, [r1], -r8
   14ad0:	ldrdeq	r4, [r1], -r8
   14ad4:	ldrdeq	r4, [r1], -r8
   14ad8:	ldr	r3, [sp, #32]
   14adc:	cmp	r3, #0
   14ae0:	bne	157c8 <__assert_fail@plt+0x4270>
   14ae4:	cmp	r9, fp
   14ae8:	movhi	r3, #63	; 0x3f
   14aec:	strbhi	r3, [r8, fp]
   14af0:	add	r3, fp, #1
   14af4:	cmp	r9, r3
   14af8:	movhi	r0, #34	; 0x22
   14afc:	strbhi	r0, [r8, r3]
   14b00:	add	r3, fp, #2
   14b04:	cmp	r9, r3
   14b08:	movhi	r0, #34	; 0x22
   14b0c:	strbhi	r0, [r8, r3]
   14b10:	add	r3, fp, #3
   14b14:	cmp	r9, r3
   14b18:	movhi	r0, #63	; 0x3f
   14b1c:	strbhi	r0, [r8, r3]
   14b20:	add	fp, fp, #4
   14b24:	ldr	r3, [sp, #32]
   14b28:	mov	r5, r3
   14b2c:	mov	r4, r1
   14b30:	mov	r6, r2
   14b34:	b	14b9c <__assert_fail@plt+0x3644>
   14b38:	mov	r3, #0
   14b3c:	str	r3, [sp, #44]	; 0x2c
   14b40:	mov	r4, #8
   14b44:	mov	r3, #98	; 0x62
   14b48:	b	14b88 <__assert_fail@plt+0x3630>
   14b4c:	mov	r3, #0
   14b50:	str	r3, [sp, #44]	; 0x2c
   14b54:	mov	r4, #12
   14b58:	mov	r3, #102	; 0x66
   14b5c:	b	14b88 <__assert_fail@plt+0x3630>
   14b60:	mov	r3, #0
   14b64:	str	r3, [sp, #44]	; 0x2c
   14b68:	mov	r4, #13
   14b6c:	mov	r3, #114	; 0x72
   14b70:	ldr	r2, [sp, #32]
   14b74:	cmp	sl, #2
   14b78:	movne	r2, #0
   14b7c:	andeq	r2, r2, #1
   14b80:	cmp	r2, #0
   14b84:	bne	14fa8 <__assert_fail@plt+0x3a50>
   14b88:	ldr	r2, [sp, #28]
   14b8c:	cmp	r2, #0
   14b90:	bne	15590 <__assert_fail@plt+0x4038>
   14b94:	mov	r5, r2
   14b98:	mov	r3, r2
   14b9c:	ldr	r2, [sp, #28]
   14ba0:	eor	r2, r2, #1
   14ba4:	cmp	sl, #2
   14ba8:	orreq	r2, r2, #1
   14bac:	eor	r2, r2, #1
   14bb0:	ldr	r1, [sp, #32]
   14bb4:	orr	r2, r1, r2
   14bb8:	tst	r2, #255	; 0xff
   14bbc:	beq	14be8 <__assert_fail@plt+0x3690>
   14bc0:	ldr	r2, [sp, #160]	; 0xa0
   14bc4:	cmp	r2, #0
   14bc8:	beq	14be8 <__assert_fail@plt+0x3690>
   14bcc:	ubfx	r1, r4, #5, #8
   14bd0:	and	r2, r4, #31
   14bd4:	ldr	r0, [sp, #160]	; 0xa0
   14bd8:	ldr	r1, [r0, r1, lsl #2]
   14bdc:	lsr	r2, r1, r2
   14be0:	tst	r2, #1
   14be4:	bne	14bf4 <__assert_fail@plt+0x369c>
   14be8:	ldr	r2, [sp, #44]	; 0x2c
   14bec:	cmp	r2, #0
   14bf0:	beq	14f48 <__assert_fail@plt+0x39f0>
   14bf4:	ldr	r3, [sp, #32]
   14bf8:	cmp	r3, #0
   14bfc:	bne	15748 <__assert_fail@plt+0x41f0>
   14c00:	ldr	r3, [sp, #36]	; 0x24
   14c04:	eor	r3, r3, #1
   14c08:	cmp	sl, #2
   14c0c:	movne	r3, #0
   14c10:	andeq	r3, r3, #1
   14c14:	cmp	r3, #0
   14c18:	beq	14c50 <__assert_fail@plt+0x36f8>
   14c1c:	cmp	r9, fp
   14c20:	movhi	r2, #39	; 0x27
   14c24:	strbhi	r2, [r8, fp]
   14c28:	add	r2, fp, #1
   14c2c:	cmp	r9, r2
   14c30:	movhi	r1, #36	; 0x24
   14c34:	strbhi	r1, [r8, r2]
   14c38:	add	r2, fp, #2
   14c3c:	cmp	r9, r2
   14c40:	movhi	r1, #39	; 0x27
   14c44:	strbhi	r1, [r8, r2]
   14c48:	add	fp, fp, #3
   14c4c:	str	r3, [sp, #36]	; 0x24
   14c50:	cmp	r9, fp
   14c54:	movhi	r3, #92	; 0x5c
   14c58:	strbhi	r3, [r8, fp]
   14c5c:	add	fp, fp, #1
   14c60:	cmp	fp, r9
   14c64:	strbcc	r4, [r8, fp]
   14c68:	add	fp, fp, #1
   14c6c:	cmp	r5, #0
   14c70:	ldr	r3, [sp, #40]	; 0x28
   14c74:	moveq	r3, r5
   14c78:	str	r3, [sp, #40]	; 0x28
   14c7c:	add	r6, r6, #1
   14c80:	ldr	r3, [sp, #24]
   14c84:	cmn	r3, #1
   14c88:	beq	155b8 <__assert_fail@plt+0x4060>
   14c8c:	ldr	r3, [sp, #24]
   14c90:	subs	r5, r3, r6
   14c94:	movne	r5, #1
   14c98:	cmp	r5, #0
   14c9c:	beq	155cc <__assert_fail@plt+0x4074>
   14ca0:	ldr	r3, [sp, #28]
   14ca4:	cmp	sl, #2
   14ca8:	moveq	r3, #0
   14cac:	andne	r3, r3, #1
   14cb0:	str	r3, [sp, #56]	; 0x38
   14cb4:	ldr	r2, [sp, #52]	; 0x34
   14cb8:	adds	r7, r2, #0
   14cbc:	movne	r7, #1
   14cc0:	ands	r3, r3, r7
   14cc4:	str	r3, [sp, #44]	; 0x2c
   14cc8:	bne	145e8 <__assert_fail@plt+0x3090>
   14ccc:	ldr	r3, [sp, #48]	; 0x30
   14cd0:	ldrb	r4, [r3, r6]
   14cd4:	cmp	r4, #126	; 0x7e
   14cd8:	ldrls	pc, [pc, r4, lsl #2]
   14cdc:	b	15114 <__assert_fail@plt+0x3bbc>
   14ce0:	andeq	r4, r1, ip, ror #16
   14ce4:	andeq	r5, r1, r4, lsl r1
   14ce8:	andeq	r5, r1, r4, lsl r1
   14cec:	andeq	r5, r1, r4, lsl r1
   14cf0:	andeq	r5, r1, r4, lsl r1
   14cf4:	andeq	r5, r1, r4, lsl r1
   14cf8:	andeq	r5, r1, r4, lsl r1
   14cfc:			; <UNDEFINED> instruction: 0x00014fb4
   14d00:	andeq	r4, r1, r0, asr #22
   14d04:	andeq	r4, r1, r4, ror #29
   14d08:	andeq	r4, r1, r8, lsl #31
   14d0c:	strdeq	r4, [r1], -r8
   14d10:	andeq	r4, r1, r4, asr fp
   14d14:	andeq	r4, r1, r8, ror #22
   14d18:	andeq	r5, r1, r4, lsl r1
   14d1c:	andeq	r5, r1, r4, lsl r1
   14d20:	andeq	r5, r1, r4, lsl r1
   14d24:	andeq	r5, r1, r4, lsl r1
   14d28:	andeq	r5, r1, r4, lsl r1
   14d2c:	andeq	r5, r1, r4, lsl r1
   14d30:	andeq	r5, r1, r4, lsl r1
   14d34:	andeq	r5, r1, r4, lsl r1
   14d38:	andeq	r5, r1, r4, lsl r1
   14d3c:	andeq	r5, r1, r4, lsl r1
   14d40:	andeq	r5, r1, r4, lsl r1
   14d44:	andeq	r5, r1, r4, lsl r1
   14d48:	andeq	r5, r1, r4, lsl r1
   14d4c:	andeq	r5, r1, r4, lsl r1
   14d50:	andeq	r5, r1, r4, lsl r1
   14d54:	andeq	r5, r1, r4, lsl r1
   14d58:	andeq	r5, r1, r4, lsl r1
   14d5c:	andeq	r5, r1, r4, lsl r1
   14d60:	andeq	r5, r1, r0, lsr r0
   14d64:	andeq	r5, r1, ip, lsr #32
   14d68:	andeq	r5, r1, ip, lsr #32
   14d6c:	andeq	r4, r1, ip, ror #31
   14d70:	andeq	r5, r1, ip, lsr #32
   14d74:	andeq	r5, r1, r4, lsr r5
   14d78:	andeq	r5, r1, ip, lsr #32
   14d7c:	andeq	r5, r1, r4, ror r0
   14d80:	andeq	r5, r1, ip, lsr #32
   14d84:	andeq	r5, r1, ip, lsr #32
   14d88:	andeq	r5, r1, ip, lsr #32
   14d8c:	andeq	r5, r1, r4, lsr r5
   14d90:	andeq	r5, r1, r4, lsr r5
   14d94:	andeq	r5, r1, r4, lsr r5
   14d98:	andeq	r5, r1, r4, lsr r5
   14d9c:	andeq	r5, r1, r4, lsr r5
   14da0:	andeq	r5, r1, r4, lsr r5
   14da4:	andeq	r5, r1, r4, lsr r5
   14da8:	andeq	r5, r1, r4, lsr r5
   14dac:	andeq	r5, r1, r4, lsr r5
   14db0:	andeq	r5, r1, r4, lsr r5
   14db4:	andeq	r5, r1, r4, lsr r5
   14db8:	andeq	r5, r1, r4, lsr r5
   14dbc:	andeq	r5, r1, r4, lsr r5
   14dc0:	andeq	r5, r1, r4, lsr r5
   14dc4:	andeq	r5, r1, r4, lsr r5
   14dc8:	andeq	r5, r1, r4, lsr r5
   14dcc:	andeq	r5, r1, ip, lsr #32
   14dd0:	andeq	r5, r1, ip, lsr #32
   14dd4:	andeq	r5, r1, ip, lsr #32
   14dd8:	andeq	r5, r1, ip, lsr #32
   14ddc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de0:	andeq	r5, r1, r4, lsl r1
   14de4:	andeq	r5, r1, r4, lsr r5
   14de8:	andeq	r5, r1, r4, lsr r5
   14dec:	andeq	r5, r1, r4, lsr r5
   14df0:	andeq	r5, r1, r4, lsr r5
   14df4:	andeq	r5, r1, r4, lsr r5
   14df8:	andeq	r5, r1, r4, lsr r5
   14dfc:	andeq	r5, r1, r4, lsr r5
   14e00:	andeq	r5, r1, r4, lsr r5
   14e04:	andeq	r5, r1, r4, lsr r5
   14e08:	andeq	r5, r1, r4, lsr r5
   14e0c:	andeq	r5, r1, r4, lsr r5
   14e10:	andeq	r5, r1, r4, lsr r5
   14e14:	andeq	r5, r1, r4, lsr r5
   14e18:	andeq	r5, r1, r4, lsr r5
   14e1c:	andeq	r5, r1, r4, lsr r5
   14e20:	andeq	r5, r1, r4, lsr r5
   14e24:	andeq	r5, r1, r4, lsr r5
   14e28:	andeq	r5, r1, r4, lsr r5
   14e2c:	andeq	r5, r1, r4, lsr r5
   14e30:	andeq	r5, r1, r4, lsr r5
   14e34:	andeq	r5, r1, r4, lsr r5
   14e38:	andeq	r5, r1, r4, lsr r5
   14e3c:	andeq	r5, r1, r4, lsr r5
   14e40:	andeq	r5, r1, r4, lsr r5
   14e44:	andeq	r5, r1, r4, lsr r5
   14e48:	andeq	r5, r1, r4, lsr r5
   14e4c:	andeq	r5, r1, ip, lsr #32
   14e50:	andeq	r4, r1, ip, lsl #30
   14e54:	andeq	r5, r1, r4, lsr r5
   14e58:	andeq	r5, r1, ip, lsr #32
   14e5c:	andeq	r5, r1, r4, lsr r5
   14e60:	andeq	r5, r1, ip, lsr #32
   14e64:	andeq	r5, r1, r4, lsr r5
   14e68:	andeq	r5, r1, r4, lsr r5
   14e6c:	andeq	r5, r1, r4, lsr r5
   14e70:	andeq	r5, r1, r4, lsr r5
   14e74:	andeq	r5, r1, r4, lsr r5
   14e78:	andeq	r5, r1, r4, lsr r5
   14e7c:	andeq	r5, r1, r4, lsr r5
   14e80:	andeq	r5, r1, r4, lsr r5
   14e84:	andeq	r5, r1, r4, lsr r5
   14e88:	andeq	r5, r1, r4, lsr r5
   14e8c:	andeq	r5, r1, r4, lsr r5
   14e90:	andeq	r5, r1, r4, lsr r5
   14e94:	andeq	r5, r1, r4, lsr r5
   14e98:	andeq	r5, r1, r4, lsr r5
   14e9c:	andeq	r5, r1, r4, lsr r5
   14ea0:	andeq	r5, r1, r4, lsr r5
   14ea4:	andeq	r5, r1, r4, lsr r5
   14ea8:	andeq	r5, r1, r4, lsr r5
   14eac:	andeq	r5, r1, r4, lsr r5
   14eb0:	andeq	r5, r1, r4, lsr r5
   14eb4:	andeq	r5, r1, r4, lsr r5
   14eb8:	andeq	r5, r1, r4, lsr r5
   14ebc:	andeq	r5, r1, r4, lsr r5
   14ec0:	andeq	r5, r1, r4, lsr r5
   14ec4:	andeq	r5, r1, r4, lsr r5
   14ec8:	andeq	r5, r1, r4, lsr r5
   14ecc:	andeq	r4, r1, ip, asr #31
   14ed0:	andeq	r5, r1, ip, lsr #32
   14ed4:	andeq	r4, r1, ip, asr #31
   14ed8:	andeq	r4, r1, ip, ror #31
   14edc:	mov	r3, #0
   14ee0:	str	r3, [sp, #44]	; 0x2c
   14ee4:	mov	r4, #9
   14ee8:	mov	r3, #116	; 0x74
   14eec:	b	14b70 <__assert_fail@plt+0x3618>
   14ef0:	mov	r3, #0
   14ef4:	str	r3, [sp, #44]	; 0x2c
   14ef8:	mov	r4, #11
   14efc:	mov	r3, #118	; 0x76
   14f00:	b	14b88 <__assert_fail@plt+0x3630>
   14f04:	mov	r3, #0
   14f08:	str	r3, [sp, #44]	; 0x2c
   14f0c:	cmp	sl, #2
   14f10:	beq	14f34 <__assert_fail@plt+0x39dc>
   14f14:	ldr	r3, [sp, #28]
   14f18:	ldr	r2, [sp, #32]
   14f1c:	and	r3, r3, r2
   14f20:	tst	r7, r3
   14f24:	bne	155a8 <__assert_fail@plt+0x4050>
   14f28:	mov	r4, #92	; 0x5c
   14f2c:	mov	r3, r4
   14f30:	b	14b88 <__assert_fail@plt+0x3630>
   14f34:	ldr	r3, [sp, #32]
   14f38:	cmp	r3, #0
   14f3c:	bne	15730 <__assert_fail@plt+0x41d8>
   14f40:	mov	r5, r3
   14f44:	mov	r4, #92	; 0x5c
   14f48:	eor	r3, r3, #1
   14f4c:	ldr	r2, [sp, #36]	; 0x24
   14f50:	and	r3, r3, r2
   14f54:	tst	r3, #255	; 0xff
   14f58:	beq	14c60 <__assert_fail@plt+0x3708>
   14f5c:	cmp	r9, fp
   14f60:	movhi	r3, #39	; 0x27
   14f64:	strbhi	r3, [r8, fp]
   14f68:	add	r3, fp, #1
   14f6c:	cmp	r9, r3
   14f70:	movhi	r2, #39	; 0x27
   14f74:	strbhi	r2, [r8, r3]
   14f78:	add	fp, fp, #2
   14f7c:	mov	r3, #0
   14f80:	str	r3, [sp, #36]	; 0x24
   14f84:	b	14c60 <__assert_fail@plt+0x3708>
   14f88:	mov	r3, #110	; 0x6e
   14f8c:	b	14b70 <__assert_fail@plt+0x3618>
   14f90:	mov	r3, #110	; 0x6e
   14f94:	b	14b70 <__assert_fail@plt+0x3618>
   14f98:	mov	r3, #0
   14f9c:	str	r3, [sp, #44]	; 0x2c
   14fa0:	mov	r3, #110	; 0x6e
   14fa4:	b	14b70 <__assert_fail@plt+0x3618>
   14fa8:	mov	r8, r9
   14fac:	mov	r7, #2
   14fb0:	b	15750 <__assert_fail@plt+0x41f8>
   14fb4:	mov	r3, #97	; 0x61
   14fb8:	b	14b88 <__assert_fail@plt+0x3630>
   14fbc:	mov	r3, #97	; 0x61
   14fc0:	b	14b88 <__assert_fail@plt+0x3630>
   14fc4:	mov	r3, #0
   14fc8:	str	r3, [sp, #44]	; 0x2c
   14fcc:	ldr	r3, [sp, #24]
   14fd0:	cmn	r3, #1
   14fd4:	beq	15000 <__assert_fail@plt+0x3aa8>
   14fd8:	ldr	r3, [sp, #24]
   14fdc:	subs	r3, r3, #1
   14fe0:	movne	r3, #1
   14fe4:	cmp	r3, #0
   14fe8:	bne	15568 <__assert_fail@plt+0x4010>
   14fec:	cmp	r6, #0
   14ff0:	beq	15030 <__assert_fail@plt+0x3ad8>
   14ff4:	mov	r5, #0
   14ff8:	mov	r3, r5
   14ffc:	b	14b9c <__assert_fail@plt+0x3644>
   15000:	ldr	r3, [sp, #48]	; 0x30
   15004:	ldrb	r3, [r3, #1]
   15008:	adds	r3, r3, #0
   1500c:	movne	r3, #1
   15010:	b	14fe4 <__assert_fail@plt+0x3a8c>
   15014:	mov	r3, #0
   15018:	str	r3, [sp, #44]	; 0x2c
   1501c:	b	14fec <__assert_fail@plt+0x3a94>
   15020:	mov	r3, #0
   15024:	str	r3, [sp, #44]	; 0x2c
   15028:	b	15030 <__assert_fail@plt+0x3ad8>
   1502c:	ldr	r5, [sp, #44]	; 0x2c
   15030:	ldr	r3, [sp, #32]
   15034:	cmp	sl, #2
   15038:	movne	r3, #0
   1503c:	andeq	r3, r3, #1
   15040:	cmp	r3, #0
   15044:	beq	14b9c <__assert_fail@plt+0x3644>
   15048:	mov	r8, r9
   1504c:	mov	r7, #2
   15050:	b	15750 <__assert_fail@plt+0x41f8>
   15054:	ldr	r5, [sp, #32]
   15058:	b	15030 <__assert_fail@plt+0x3ad8>
   1505c:	mov	r3, #0
   15060:	str	r3, [sp, #44]	; 0x2c
   15064:	mov	r5, r3
   15068:	b	15030 <__assert_fail@plt+0x3ad8>
   1506c:	mov	r3, #0
   15070:	str	r3, [sp, #44]	; 0x2c
   15074:	cmp	sl, #2
   15078:	strne	r5, [sp, #68]	; 0x44
   1507c:	movne	r3, #0
   15080:	movne	r4, #39	; 0x27
   15084:	bne	14b9c <__assert_fail@plt+0x3644>
   15088:	ldr	r3, [sp, #32]
   1508c:	cmp	r3, #0
   15090:	bne	1573c <__assert_fail@plt+0x41e4>
   15094:	ldr	r3, [sp, #72]	; 0x48
   15098:	clz	r3, r3
   1509c:	lsr	r3, r3, #5
   150a0:	cmp	r9, #0
   150a4:	moveq	r3, #0
   150a8:	cmp	r3, #0
   150ac:	movne	r3, #0
   150b0:	bne	150d8 <__assert_fail@plt+0x3b80>
   150b4:	cmp	r9, fp
   150b8:	movhi	r3, #39	; 0x27
   150bc:	strbhi	r3, [r8, fp]
   150c0:	add	r3, fp, #1
   150c4:	cmp	r9, r3
   150c8:	movhi	r2, #92	; 0x5c
   150cc:	strbhi	r2, [r8, r3]
   150d0:	mov	r3, r9
   150d4:	ldr	r9, [sp, #72]	; 0x48
   150d8:	add	r2, fp, #2
   150dc:	cmp	r2, r3
   150e0:	movcc	r1, #39	; 0x27
   150e4:	strbcc	r1, [r8, r2]
   150e8:	add	fp, fp, #3
   150ec:	str	r5, [sp, #68]	; 0x44
   150f0:	ldr	r2, [sp, #32]
   150f4:	str	r2, [sp, #36]	; 0x24
   150f8:	str	r9, [sp, #72]	; 0x48
   150fc:	mov	r9, r3
   15100:	mov	r4, #39	; 0x27
   15104:	mov	r3, #0
   15108:	b	14be8 <__assert_fail@plt+0x3690>
   1510c:	mov	r3, #0
   15110:	str	r3, [sp, #44]	; 0x2c
   15114:	ldr	r7, [sp, #76]	; 0x4c
   15118:	cmp	r7, #1
   1511c:	bne	15154 <__assert_fail@plt+0x3bfc>
   15120:	bl	113fc <__ctype_b_loc@plt>
   15124:	ldr	r2, [r0]
   15128:	lsl	r3, r4, #1
   1512c:	ldrh	r5, [r2, r3]
   15130:	ubfx	r5, r5, #14, #1
   15134:	mov	ip, r7
   15138:	eor	r3, r5, #1
   1513c:	ldr	r2, [sp, #28]
   15140:	and	r3, r3, r2
   15144:	ands	r3, r3, #255	; 0xff
   15148:	beq	14b9c <__assert_fail@plt+0x3644>
   1514c:	mov	r5, #0
   15150:	b	153b0 <__assert_fail@plt+0x3e58>
   15154:	mov	r2, #0
   15158:	mov	r3, #0
   1515c:	strd	r2, [sp, #104]	; 0x68
   15160:	ldr	r3, [sp, #24]
   15164:	cmn	r3, #1
   15168:	beq	1518c <__assert_fail@plt+0x3c34>
   1516c:	mov	r3, #0
   15170:	str	r4, [sp, #88]	; 0x58
   15174:	str	fp, [sp, #92]	; 0x5c
   15178:	str	r8, [sp, #56]	; 0x38
   1517c:	mov	r8, r3
   15180:	str	r9, [sp, #84]	; 0x54
   15184:	ldr	r9, [sp, #48]	; 0x30
   15188:	b	152d8 <__assert_fail@plt+0x3d80>
   1518c:	ldr	r0, [sp, #48]	; 0x30
   15190:	bl	11414 <strlen@plt>
   15194:	str	r0, [sp, #24]
   15198:	b	1516c <__assert_fail@plt+0x3c14>
   1519c:	mov	r1, fp
   151a0:	ldr	r4, [sp, #88]	; 0x58
   151a4:	mov	r2, r8
   151a8:	mov	ip, r8
   151ac:	ldr	fp, [sp, #92]	; 0x5c
   151b0:	ldr	r8, [sp, #56]	; 0x38
   151b4:	ldr	r9, [sp, #84]	; 0x54
   151b8:	ldr	r0, [sp, #24]
   151bc:	cmp	r7, r0
   151c0:	bcs	15378 <__assert_fail@plt+0x3e20>
   151c4:	ldrb	r3, [r1]
   151c8:	cmp	r3, #0
   151cc:	beq	15380 <__assert_fail@plt+0x3e28>
   151d0:	mov	r3, r1
   151d4:	add	r2, r2, #1
   151d8:	add	r1, r6, r2
   151dc:	cmp	r0, r1
   151e0:	bls	15388 <__assert_fail@plt+0x3e30>
   151e4:	ldrb	r1, [r3, #1]!
   151e8:	cmp	r1, #0
   151ec:	bne	151d4 <__assert_fail@plt+0x3c7c>
   151f0:	mov	ip, r2
   151f4:	mov	r5, #0
   151f8:	b	153a8 <__assert_fail@plt+0x3e50>
   151fc:	ldr	r3, [sp, #56]	; 0x38
   15200:	str	r3, [sp, #64]	; 0x40
   15204:	ldr	r8, [sp, #84]	; 0x54
   15208:	mov	r7, #2
   1520c:	b	15750 <__assert_fail@plt+0x41f8>
   15210:	cmp	r2, r7
   15214:	beq	152b4 <__assert_fail@plt+0x3d5c>
   15218:	ldrb	r3, [r2], #1
   1521c:	sub	r3, r3, #91	; 0x5b
   15220:	cmp	r3, #33	; 0x21
   15224:	ldrls	pc, [pc, r3, lsl #2]
   15228:	b	15210 <__assert_fail@plt+0x3cb8>
   1522c:	strdeq	r5, [r1], -ip
   15230:	strdeq	r5, [r1], -ip
   15234:	andeq	r5, r1, r0, lsl r2
   15238:	strdeq	r5, [r1], -ip
   1523c:	andeq	r5, r1, r0, lsl r2
   15240:	strdeq	r5, [r1], -ip
   15244:	andeq	r5, r1, r0, lsl r2
   15248:	andeq	r5, r1, r0, lsl r2
   1524c:	andeq	r5, r1, r0, lsl r2
   15250:	andeq	r5, r1, r0, lsl r2
   15254:	andeq	r5, r1, r0, lsl r2
   15258:	andeq	r5, r1, r0, lsl r2
   1525c:	andeq	r5, r1, r0, lsl r2
   15260:	andeq	r5, r1, r0, lsl r2
   15264:	andeq	r5, r1, r0, lsl r2
   15268:	andeq	r5, r1, r0, lsl r2
   1526c:	andeq	r5, r1, r0, lsl r2
   15270:	andeq	r5, r1, r0, lsl r2
   15274:	andeq	r5, r1, r0, lsl r2
   15278:	andeq	r5, r1, r0, lsl r2
   1527c:	andeq	r5, r1, r0, lsl r2
   15280:	andeq	r5, r1, r0, lsl r2
   15284:	andeq	r5, r1, r0, lsl r2
   15288:	andeq	r5, r1, r0, lsl r2
   1528c:	andeq	r5, r1, r0, lsl r2
   15290:	andeq	r5, r1, r0, lsl r2
   15294:	andeq	r5, r1, r0, lsl r2
   15298:	andeq	r5, r1, r0, lsl r2
   1529c:	andeq	r5, r1, r0, lsl r2
   152a0:	andeq	r5, r1, r0, lsl r2
   152a4:	andeq	r5, r1, r0, lsl r2
   152a8:	andeq	r5, r1, r0, lsl r2
   152ac:	andeq	r5, r1, r0, lsl r2
   152b0:	strdeq	r5, [r1], -ip
   152b4:	ldr	r0, [sp, #100]	; 0x64
   152b8:	bl	11324 <iswprint@plt>
   152bc:	cmp	r0, #0
   152c0:	moveq	r5, #0
   152c4:	add	r8, r8, r4
   152c8:	add	r0, sp, #104	; 0x68
   152cc:	bl	11294 <mbsinit@plt>
   152d0:	cmp	r0, #0
   152d4:	bne	15344 <__assert_fail@plt+0x3dec>
   152d8:	add	r7, r6, r8
   152dc:	add	fp, r9, r7
   152e0:	add	r3, sp, #104	; 0x68
   152e4:	ldr	r2, [sp, #24]
   152e8:	sub	r2, r2, r7
   152ec:	mov	r1, fp
   152f0:	add	r0, sp, #100	; 0x64
   152f4:	bl	25d9c <__assert_fail@plt+0x14844>
   152f8:	subs	r4, r0, #0
   152fc:	beq	15394 <__assert_fail@plt+0x3e3c>
   15300:	cmn	r4, #1
   15304:	beq	1535c <__assert_fail@plt+0x3e04>
   15308:	cmn	r4, #2
   1530c:	beq	1519c <__assert_fail@plt+0x3c44>
   15310:	ldr	r3, [sp, #32]
   15314:	cmp	sl, #2
   15318:	movne	r3, #0
   1531c:	andeq	r3, r3, #1
   15320:	cmp	r3, #0
   15324:	beq	152b4 <__assert_fail@plt+0x3d5c>
   15328:	cmp	r4, #1
   1532c:	bls	152b4 <__assert_fail@plt+0x3d5c>
   15330:	add	r2, r7, #1
   15334:	add	r2, r9, r2
   15338:	add	r3, r9, r4
   1533c:	add	r7, r3, r7
   15340:	b	15218 <__assert_fail@plt+0x3cc0>
   15344:	ldr	r4, [sp, #88]	; 0x58
   15348:	mov	ip, r8
   1534c:	ldr	fp, [sp, #92]	; 0x5c
   15350:	ldr	r8, [sp, #56]	; 0x38
   15354:	ldr	r9, [sp, #84]	; 0x54
   15358:	b	153a8 <__assert_fail@plt+0x3e50>
   1535c:	ldr	r4, [sp, #88]	; 0x58
   15360:	mov	ip, r8
   15364:	ldr	fp, [sp, #92]	; 0x5c
   15368:	ldr	r8, [sp, #56]	; 0x38
   1536c:	ldr	r9, [sp, #84]	; 0x54
   15370:	mov	r5, #0
   15374:	b	153a8 <__assert_fail@plt+0x3e50>
   15378:	mov	r5, #0
   1537c:	b	153a8 <__assert_fail@plt+0x3e50>
   15380:	mov	r5, #0
   15384:	b	153a8 <__assert_fail@plt+0x3e50>
   15388:	mov	ip, r2
   1538c:	mov	r5, #0
   15390:	b	153a8 <__assert_fail@plt+0x3e50>
   15394:	ldr	r4, [sp, #88]	; 0x58
   15398:	mov	ip, r8
   1539c:	ldr	fp, [sp, #92]	; 0x5c
   153a0:	ldr	r8, [sp, #56]	; 0x38
   153a4:	ldr	r9, [sp, #84]	; 0x54
   153a8:	cmp	ip, #1
   153ac:	bls	15138 <__assert_fail@plt+0x3be0>
   153b0:	add	lr, r6, ip
   153b4:	ldr	r3, [sp, #48]	; 0x30
   153b8:	add	r1, r3, r6
   153bc:	mov	r3, #0
   153c0:	eor	r0, r5, #1
   153c4:	ldr	r2, [sp, #28]
   153c8:	and	r0, r0, r2
   153cc:	uxtb	r0, r0
   153d0:	str	r0, [sp, #56]	; 0x38
   153d4:	mov	r7, #92	; 0x5c
   153d8:	ldr	ip, [sp, #36]	; 0x24
   153dc:	str	r5, [sp, #84]	; 0x54
   153e0:	ldr	r2, [sp, #44]	; 0x2c
   153e4:	b	15454 <__assert_fail@plt+0x3efc>
   153e8:	cmp	r2, #0
   153ec:	beq	153fc <__assert_fail@plt+0x3ea4>
   153f0:	cmp	r9, fp
   153f4:	strbhi	r7, [r8, fp]
   153f8:	add	fp, fp, #1
   153fc:	add	r5, r6, #1
   15400:	cmp	r5, lr
   15404:	bcs	15510 <__assert_fail@plt+0x3fb8>
   15408:	eor	r2, r3, #1
   1540c:	and	r2, r2, ip
   15410:	ands	r2, r2, #255	; 0xff
   15414:	beq	1552c <__assert_fail@plt+0x3fd4>
   15418:	cmp	r9, fp
   1541c:	movhi	r2, #39	; 0x27
   15420:	strbhi	r2, [r8, fp]
   15424:	add	r2, fp, #1
   15428:	cmp	r9, r2
   1542c:	movhi	ip, #39	; 0x27
   15430:	strbhi	ip, [r8, r2]
   15434:	add	fp, fp, #2
   15438:	ldr	ip, [sp, #56]	; 0x38
   1543c:	mov	r2, ip
   15440:	mov	r6, r5
   15444:	cmp	r9, fp
   15448:	strbhi	r4, [r8, fp]
   1544c:	add	fp, fp, #1
   15450:	ldrb	r4, [r1, #1]!
   15454:	cmp	r0, #0
   15458:	beq	153e8 <__assert_fail@plt+0x3e90>
   1545c:	ldr	r3, [sp, #32]
   15460:	cmp	r3, #0
   15464:	bne	156f8 <__assert_fail@plt+0x41a0>
   15468:	eor	r3, ip, #1
   1546c:	cmp	sl, #2
   15470:	movne	r3, #0
   15474:	andeq	r3, r3, #1
   15478:	cmp	r3, #0
   1547c:	beq	154b4 <__assert_fail@plt+0x3f5c>
   15480:	cmp	r9, fp
   15484:	movhi	ip, #39	; 0x27
   15488:	strbhi	ip, [r8, fp]
   1548c:	add	ip, fp, #1
   15490:	cmp	r9, ip
   15494:	movhi	r5, #36	; 0x24
   15498:	strbhi	r5, [r8, ip]
   1549c:	add	ip, fp, #2
   154a0:	cmp	r9, ip
   154a4:	movhi	r5, #39	; 0x27
   154a8:	strbhi	r5, [r8, ip]
   154ac:	add	fp, fp, #3
   154b0:	mov	ip, r3
   154b4:	cmp	r9, fp
   154b8:	strbhi	r7, [r8, fp]
   154bc:	add	r3, fp, #1
   154c0:	cmp	r9, r3
   154c4:	bls	154d4 <__assert_fail@plt+0x3f7c>
   154c8:	lsr	r5, r4, #6
   154cc:	add	r5, r5, #48	; 0x30
   154d0:	strb	r5, [r8, r3]
   154d4:	add	r3, fp, #2
   154d8:	cmp	r9, r3
   154dc:	bls	154ec <__assert_fail@plt+0x3f94>
   154e0:	ubfx	r5, r4, #3, #3
   154e4:	add	r5, r5, #48	; 0x30
   154e8:	strb	r5, [r8, r3]
   154ec:	add	fp, fp, #3
   154f0:	and	r4, r4, #7
   154f4:	add	r4, r4, #48	; 0x30
   154f8:	add	r5, r6, #1
   154fc:	cmp	r5, lr
   15500:	bcs	1551c <__assert_fail@plt+0x3fc4>
   15504:	ldr	r3, [sp, #56]	; 0x38
   15508:	mov	r6, r5
   1550c:	b	15444 <__assert_fail@plt+0x3eec>
   15510:	str	ip, [sp, #36]	; 0x24
   15514:	ldr	r5, [sp, #84]	; 0x54
   15518:	b	14f48 <__assert_fail@plt+0x39f0>
   1551c:	str	ip, [sp, #36]	; 0x24
   15520:	ldr	r5, [sp, #84]	; 0x54
   15524:	mov	r3, r0
   15528:	b	14f48 <__assert_fail@plt+0x39f0>
   1552c:	mov	r6, r5
   15530:	b	15444 <__assert_fail@plt+0x3eec>
   15534:	ldr	r3, [sp, #44]	; 0x2c
   15538:	b	14b9c <__assert_fail@plt+0x3644>
   1553c:	mov	r5, #0
   15540:	mov	r3, r5
   15544:	mov	r4, #63	; 0x3f
   15548:	b	14b9c <__assert_fail@plt+0x3644>
   1554c:	mov	r5, #0
   15550:	mov	r3, r5
   15554:	mov	r4, #63	; 0x3f
   15558:	b	14b9c <__assert_fail@plt+0x3644>
   1555c:	mov	r5, #0
   15560:	mov	r3, r5
   15564:	b	14b9c <__assert_fail@plt+0x3644>
   15568:	mov	r5, #0
   1556c:	mov	r3, r5
   15570:	b	14b9c <__assert_fail@plt+0x3644>
   15574:	ldr	r5, [sp, #44]	; 0x2c
   15578:	ldr	r3, [sp, #32]
   1557c:	b	14b9c <__assert_fail@plt+0x3644>
   15580:	ldr	r5, [sp, #44]	; 0x2c
   15584:	mov	r3, #0
   15588:	str	r3, [sp, #44]	; 0x2c
   1558c:	b	14b9c <__assert_fail@plt+0x3644>
   15590:	mov	r4, r3
   15594:	mov	r5, #0
   15598:	b	14bf4 <__assert_fail@plt+0x369c>
   1559c:	mov	r5, #0
   155a0:	mov	r4, #97	; 0x61
   155a4:	b	14bf4 <__assert_fail@plt+0x369c>
   155a8:	mov	r5, #0
   155ac:	mov	r3, r5
   155b0:	mov	r4, #92	; 0x5c
   155b4:	b	14f48 <__assert_fail@plt+0x39f0>
   155b8:	ldr	r3, [sp, #48]	; 0x30
   155bc:	ldrb	r5, [r3, r6]
   155c0:	adds	r5, r5, #0
   155c4:	movne	r5, #1
   155c8:	b	14c98 <__assert_fail@plt+0x3740>
   155cc:	cmp	sl, #2
   155d0:	movne	r3, #0
   155d4:	moveq	r3, #1
   155d8:	ldr	r1, [sp, #32]
   155dc:	cmp	fp, #0
   155e0:	andeq	r2, r3, r1
   155e4:	movne	r2, #0
   155e8:	cmp	r2, #0
   155ec:	bne	1570c <__assert_fail@plt+0x41b4>
   155f0:	eor	r2, r1, #1
   155f4:	uxtb	r2, r2
   155f8:	and	r3, r3, r2
   155fc:	ldr	r1, [sp, #68]	; 0x44
   15600:	ands	r3, r1, r3
   15604:	beq	15698 <__assert_fail@plt+0x4140>
   15608:	ldr	r2, [sp, #40]	; 0x28
   1560c:	cmp	r2, #0
   15610:	bne	15648 <__assert_fail@plt+0x40f0>
   15614:	ldr	r2, [sp, #72]	; 0x48
   15618:	adds	r2, r2, #0
   1561c:	movne	r2, #1
   15620:	cmp	r9, #0
   15624:	movne	r2, #0
   15628:	str	r2, [sp, #68]	; 0x44
   1562c:	mov	sl, #2
   15630:	ldr	r1, [sp, #40]	; 0x28
   15634:	str	r1, [sp, #32]
   15638:	cmp	r2, #0
   1563c:	beq	1568c <__assert_fail@plt+0x4134>
   15640:	ldr	r9, [sp, #72]	; 0x48
   15644:	b	143a0 <__assert_fail@plt+0x2e48>
   15648:	ldr	r3, [sp, #168]	; 0xa8
   1564c:	str	r3, [sp, #16]
   15650:	ldr	r3, [sp, #164]	; 0xa4
   15654:	str	r3, [sp, #12]
   15658:	ldr	r3, [sp, #160]	; 0xa0
   1565c:	str	r3, [sp, #8]
   15660:	ldr	r3, [sp, #156]	; 0x9c
   15664:	str	r3, [sp, #4]
   15668:	mov	r3, #5
   1566c:	str	r3, [sp]
   15670:	ldr	r3, [sp, #24]
   15674:	ldr	r2, [sp, #48]	; 0x30
   15678:	ldr	r1, [sp, #72]	; 0x48
   1567c:	ldr	r0, [sp, #64]	; 0x40
   15680:	bl	14328 <__assert_fail@plt+0x2dd0>
   15684:	mov	fp, r0
   15688:	b	157a8 <__assert_fail@plt+0x4250>
   1568c:	mov	r8, r9
   15690:	mov	r2, r3
   15694:	b	1569c <__assert_fail@plt+0x4144>
   15698:	mov	r8, r9
   1569c:	ldr	r3, [sp, #60]	; 0x3c
   156a0:	cmp	r3, #0
   156a4:	moveq	r2, #0
   156a8:	andne	r2, r2, #1
   156ac:	cmp	r2, #0
   156b0:	beq	156e0 <__assert_fail@plt+0x4188>
   156b4:	mov	r2, r3
   156b8:	ldrb	r3, [r3]
   156bc:	cmp	r3, #0
   156c0:	beq	156e0 <__assert_fail@plt+0x4188>
   156c4:	ldr	r1, [sp, #64]	; 0x40
   156c8:	cmp	r8, fp
   156cc:	strbhi	r3, [r1, fp]
   156d0:	add	fp, fp, #1
   156d4:	ldrb	r3, [r2, #1]!
   156d8:	cmp	r3, #0
   156dc:	bne	156c8 <__assert_fail@plt+0x4170>
   156e0:	cmp	r8, fp
   156e4:	bls	157a8 <__assert_fail@plt+0x4250>
   156e8:	mov	r3, #0
   156ec:	ldr	r2, [sp, #64]	; 0x40
   156f0:	strb	r3, [r2, fp]
   156f4:	b	157a8 <__assert_fail@plt+0x4250>
   156f8:	mov	r8, r9
   156fc:	mov	r7, sl
   15700:	ldr	r3, [sp, #32]
   15704:	str	r3, [sp, #28]
   15708:	b	15750 <__assert_fail@plt+0x41f8>
   1570c:	mov	r8, r9
   15710:	mov	r7, #2
   15714:	b	15750 <__assert_fail@plt+0x41f8>
   15718:	mov	r8, r9
   1571c:	mov	r7, sl
   15720:	b	15750 <__assert_fail@plt+0x41f8>
   15724:	mov	r8, r9
   15728:	mov	r7, sl
   1572c:	b	15750 <__assert_fail@plt+0x41f8>
   15730:	mov	r8, r9
   15734:	mov	r7, sl
   15738:	b	15750 <__assert_fail@plt+0x41f8>
   1573c:	mov	r8, r9
   15740:	mov	r7, sl
   15744:	b	15750 <__assert_fail@plt+0x41f8>
   15748:	mov	r8, r9
   1574c:	mov	r7, sl
   15750:	ldr	r3, [sp, #28]
   15754:	cmp	r7, #2
   15758:	movne	r3, #0
   1575c:	andeq	r3, r3, #1
   15760:	cmp	r3, #0
   15764:	movne	r7, #4
   15768:	ldr	r3, [sp, #168]	; 0xa8
   1576c:	str	r3, [sp, #16]
   15770:	ldr	r3, [sp, #164]	; 0xa4
   15774:	str	r3, [sp, #12]
   15778:	mov	r3, #0
   1577c:	str	r3, [sp, #8]
   15780:	ldr	r3, [sp, #156]	; 0x9c
   15784:	bic	r3, r3, #2
   15788:	str	r3, [sp, #4]
   1578c:	str	r7, [sp]
   15790:	ldr	r3, [sp, #24]
   15794:	ldr	r2, [sp, #48]	; 0x30
   15798:	mov	r1, r8
   1579c:	ldr	r0, [sp, #64]	; 0x40
   157a0:	bl	14328 <__assert_fail@plt+0x2dd0>
   157a4:	mov	fp, r0
   157a8:	mov	r0, fp
   157ac:	add	sp, sp, #116	; 0x74
   157b0:	ldrd	r4, [sp]
   157b4:	ldrd	r6, [sp, #8]
   157b8:	ldrd	r8, [sp, #16]
   157bc:	ldrd	sl, [sp, #24]
   157c0:	add	sp, sp, #32
   157c4:	pop	{pc}		; (ldr pc, [sp], #4)
   157c8:	mov	r8, r9
   157cc:	mov	r7, sl
   157d0:	b	15768 <__assert_fail@plt+0x4210>
   157d4:	add	fp, fp, #4
   157d8:	str	r3, [sp, #36]	; 0x24
   157dc:	mov	r5, #0
   157e0:	mov	r4, #48	; 0x30
   157e4:	b	14b9c <__assert_fail@plt+0x3644>
   157e8:	mov	r3, #1
   157ec:	str	r3, [sp, #32]
   157f0:	str	r3, [sp, #28]
   157f4:	str	r3, [sp, #52]	; 0x34
   157f8:	movw	r3, #28392	; 0x6ee8
   157fc:	movt	r3, #2
   15800:	str	r3, [sp, #60]	; 0x3c
   15804:	mov	fp, #0
   15808:	mov	sl, #5
   1580c:	b	14400 <__assert_fail@plt+0x2ea8>
   15810:	ldr	r3, [sp, #48]	; 0x30
   15814:	ldrb	r4, [r3, r6]
   15818:	cmp	r4, #126	; 0x7e
   1581c:	ldrls	pc, [pc, r4, lsl #2]
   15820:	b	1510c <__assert_fail@plt+0x3bb4>
   15824:	muleq	r1, r4, r8
   15828:	andeq	r5, r1, ip, lsl #2
   1582c:	andeq	r5, r1, ip, lsl #2
   15830:	andeq	r5, r1, ip, lsl #2
   15834:	andeq	r5, r1, ip, lsl #2
   15838:	andeq	r5, r1, ip, lsl #2
   1583c:	andeq	r5, r1, ip, lsl #2
   15840:	muleq	r1, ip, r5
   15844:	andeq	r4, r1, r8, lsr fp
   15848:	ldrdeq	r4, [r1], -ip
   1584c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15850:	strdeq	r4, [r1], -r0
   15854:	andeq	r4, r1, ip, asr #22
   15858:	andeq	r4, r1, r0, ror #22
   1585c:	andeq	r5, r1, ip, lsl #2
   15860:	andeq	r5, r1, ip, lsl #2
   15864:	andeq	r5, r1, ip, lsl #2
   15868:	andeq	r5, r1, ip, lsl #2
   1586c:	andeq	r5, r1, ip, lsl #2
   15870:	andeq	r5, r1, ip, lsl #2
   15874:	andeq	r5, r1, ip, lsl #2
   15878:	andeq	r5, r1, ip, lsl #2
   1587c:	andeq	r5, r1, ip, lsl #2
   15880:	andeq	r5, r1, ip, lsl #2
   15884:	andeq	r5, r1, ip, lsl #2
   15888:	andeq	r5, r1, ip, lsl #2
   1588c:	andeq	r5, r1, ip, lsl #2
   15890:	andeq	r5, r1, ip, lsl #2
   15894:	andeq	r5, r1, ip, lsl #2
   15898:	andeq	r5, r1, ip, lsl #2
   1589c:	andeq	r5, r1, ip, lsl #2
   158a0:	andeq	r5, r1, ip, lsl #2
   158a4:	andeq	r5, r1, r0, lsr #32
   158a8:	andeq	r5, r1, ip, asr r0
   158ac:	andeq	r5, r1, ip, asr r0
   158b0:	andeq	r5, r1, r4, lsl r0
   158b4:	andeq	r5, r1, ip, asr r0
   158b8:	andeq	r5, r1, r0, lsl #11
   158bc:	andeq	r5, r1, ip, asr r0
   158c0:	andeq	r5, r1, ip, rrx
   158c4:	andeq	r5, r1, ip, asr r0
   158c8:	andeq	r5, r1, ip, asr r0
   158cc:	andeq	r5, r1, ip, asr r0
   158d0:	andeq	r5, r1, r0, lsl #11
   158d4:	andeq	r5, r1, r0, lsl #11
   158d8:	andeq	r5, r1, r0, lsl #11
   158dc:	andeq	r5, r1, r0, lsl #11
   158e0:	andeq	r5, r1, r0, lsl #11
   158e4:	andeq	r5, r1, r0, lsl #11
   158e8:	andeq	r5, r1, r0, lsl #11
   158ec:	andeq	r5, r1, r0, lsl #11
   158f0:	andeq	r5, r1, r0, lsl #11
   158f4:	andeq	r5, r1, r0, lsl #11
   158f8:	andeq	r5, r1, r0, lsl #11
   158fc:	andeq	r5, r1, r0, lsl #11
   15900:	andeq	r5, r1, r0, lsl #11
   15904:	andeq	r5, r1, r0, lsl #11
   15908:	andeq	r5, r1, r0, lsl #11
   1590c:	andeq	r5, r1, r0, lsl #11
   15910:	andeq	r5, r1, ip, asr r0
   15914:	andeq	r5, r1, ip, asr r0
   15918:	andeq	r5, r1, ip, asr r0
   1591c:	andeq	r5, r1, ip, asr r0
   15920:	andeq	r4, r1, ip, asr #19
   15924:	andeq	r5, r1, ip, lsl #2
   15928:	andeq	r5, r1, r0, lsl #11
   1592c:	andeq	r5, r1, r0, lsl #11
   15930:	andeq	r5, r1, r0, lsl #11
   15934:	andeq	r5, r1, r0, lsl #11
   15938:	andeq	r5, r1, r0, lsl #11
   1593c:	andeq	r5, r1, r0, lsl #11
   15940:	andeq	r5, r1, r0, lsl #11
   15944:	andeq	r5, r1, r0, lsl #11
   15948:	andeq	r5, r1, r0, lsl #11
   1594c:	andeq	r5, r1, r0, lsl #11
   15950:	andeq	r5, r1, r0, lsl #11
   15954:	andeq	r5, r1, r0, lsl #11
   15958:	andeq	r5, r1, r0, lsl #11
   1595c:	andeq	r5, r1, r0, lsl #11
   15960:	andeq	r5, r1, r0, lsl #11
   15964:	andeq	r5, r1, r0, lsl #11
   15968:	andeq	r5, r1, r0, lsl #11
   1596c:	andeq	r5, r1, r0, lsl #11
   15970:	andeq	r5, r1, r0, lsl #11
   15974:	andeq	r5, r1, r0, lsl #11
   15978:	andeq	r5, r1, r0, lsl #11
   1597c:	andeq	r5, r1, r0, lsl #11
   15980:	andeq	r5, r1, r0, lsl #11
   15984:	andeq	r5, r1, r0, lsl #11
   15988:	andeq	r5, r1, r0, lsl #11
   1598c:	andeq	r5, r1, r0, lsl #11
   15990:	andeq	r5, r1, ip, asr r0
   15994:	andeq	r4, r1, r4, lsl #30
   15998:	andeq	r5, r1, r0, lsl #11
   1599c:	andeq	r5, r1, ip, asr r0
   159a0:	andeq	r5, r1, r0, lsl #11
   159a4:	andeq	r5, r1, ip, asr r0
   159a8:	andeq	r5, r1, r0, lsl #11
   159ac:	andeq	r5, r1, r0, lsl #11
   159b0:	andeq	r5, r1, r0, lsl #11
   159b4:	andeq	r5, r1, r0, lsl #11
   159b8:	andeq	r5, r1, r0, lsl #11
   159bc:	andeq	r5, r1, r0, lsl #11
   159c0:	andeq	r5, r1, r0, lsl #11
   159c4:	andeq	r5, r1, r0, lsl #11
   159c8:	andeq	r5, r1, r0, lsl #11
   159cc:	andeq	r5, r1, r0, lsl #11
   159d0:	andeq	r5, r1, r0, lsl #11
   159d4:	andeq	r5, r1, r0, lsl #11
   159d8:	andeq	r5, r1, r0, lsl #11
   159dc:	andeq	r5, r1, r0, lsl #11
   159e0:	andeq	r5, r1, r0, lsl #11
   159e4:	andeq	r5, r1, r0, lsl #11
   159e8:	andeq	r5, r1, r0, lsl #11
   159ec:	andeq	r5, r1, r0, lsl #11
   159f0:	andeq	r5, r1, r0, lsl #11
   159f4:	andeq	r5, r1, r0, lsl #11
   159f8:	andeq	r5, r1, r0, lsl #11
   159fc:	andeq	r5, r1, r0, lsl #11
   15a00:	andeq	r5, r1, r0, lsl #11
   15a04:	andeq	r5, r1, r0, lsl #11
   15a08:	andeq	r5, r1, r0, lsl #11
   15a0c:	andeq	r5, r1, r0, lsl #11
   15a10:	andeq	r4, r1, r4, asr #31
   15a14:	andeq	r5, r1, ip, asr r0
   15a18:	andeq	r4, r1, r4, asr #31
   15a1c:	andeq	r5, r1, r4, lsl r0
   15a20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a24:	strd	r6, [sp, #8]
   15a28:	strd	r8, [sp, #16]
   15a2c:	strd	sl, [sp, #24]
   15a30:	str	lr, [sp, #32]
   15a34:	sub	sp, sp, #52	; 0x34
   15a38:	mov	r5, r0
   15a3c:	str	r1, [sp, #24]
   15a40:	str	r2, [sp, #28]
   15a44:	mov	r4, r3
   15a48:	bl	1142c <__errno_location@plt>
   15a4c:	str	r0, [sp, #32]
   15a50:	ldr	r3, [r0]
   15a54:	str	r3, [sp, #36]	; 0x24
   15a58:	movw	r3, #33128	; 0x8168
   15a5c:	movt	r3, #3
   15a60:	ldr	r6, [r3]
   15a64:	cmn	r5, #-2147483647	; 0x80000001
   15a68:	movne	r3, #0
   15a6c:	moveq	r3, #1
   15a70:	orrs	r3, r3, r5, lsr #31
   15a74:	bne	15bd8 <__assert_fail@plt+0x4680>
   15a78:	movw	r3, #33128	; 0x8168
   15a7c:	movt	r3, #3
   15a80:	ldr	r2, [r3, #4]
   15a84:	cmp	r2, r5
   15a88:	bgt	15af8 <__assert_fail@plt+0x45a0>
   15a8c:	str	r2, [sp, #44]	; 0x2c
   15a90:	add	r3, r3, #8
   15a94:	cmp	r6, r3
   15a98:	beq	15bdc <__assert_fail@plt+0x4684>
   15a9c:	sub	r2, r5, r2
   15aa0:	mov	r3, #8
   15aa4:	str	r3, [sp]
   15aa8:	mvn	r3, #-2147483648	; 0x80000000
   15aac:	add	r2, r2, #1
   15ab0:	add	r1, sp, #44	; 0x2c
   15ab4:	mov	r0, r6
   15ab8:	bl	246ac <__assert_fail@plt+0x13154>
   15abc:	mov	r6, r0
   15ac0:	movw	r3, #33128	; 0x8168
   15ac4:	movt	r3, #3
   15ac8:	str	r0, [r3]
   15acc:	movw	r7, #33128	; 0x8168
   15ad0:	movt	r7, #3
   15ad4:	ldr	r0, [r7, #4]
   15ad8:	ldr	r2, [sp, #44]	; 0x2c
   15adc:	sub	r2, r2, r0
   15ae0:	lsl	r2, r2, #3
   15ae4:	mov	r1, #0
   15ae8:	add	r0, r6, r0, lsl #3
   15aec:	bl	1145c <memset@plt>
   15af0:	ldr	r3, [sp, #44]	; 0x2c
   15af4:	str	r3, [r7, #4]
   15af8:	add	fp, r6, r5, lsl #3
   15afc:	ldr	r8, [r6, r5, lsl #3]
   15b00:	ldr	r7, [fp, #4]
   15b04:	ldr	r3, [r4, #4]
   15b08:	orr	r9, r3, #1
   15b0c:	add	sl, r4, #8
   15b10:	ldr	r3, [r4, #44]	; 0x2c
   15b14:	str	r3, [sp, #16]
   15b18:	ldr	r3, [r4, #40]	; 0x28
   15b1c:	str	r3, [sp, #12]
   15b20:	str	sl, [sp, #8]
   15b24:	str	r9, [sp, #4]
   15b28:	ldr	r3, [r4]
   15b2c:	str	r3, [sp]
   15b30:	ldr	r3, [sp, #28]
   15b34:	ldr	r2, [sp, #24]
   15b38:	mov	r1, r8
   15b3c:	mov	r0, r7
   15b40:	bl	14328 <__assert_fail@plt+0x2dd0>
   15b44:	cmp	r8, r0
   15b48:	bhi	15bac <__assert_fail@plt+0x4654>
   15b4c:	add	r8, r0, #1
   15b50:	str	r8, [r6, r5, lsl #3]
   15b54:	movw	r3, #33476	; 0x82c4
   15b58:	movt	r3, #3
   15b5c:	cmp	r7, r3
   15b60:	beq	15b6c <__assert_fail@plt+0x4614>
   15b64:	mov	r0, r7
   15b68:	bl	13eac <__assert_fail@plt+0x2954>
   15b6c:	mov	r0, r8
   15b70:	bl	244a8 <__assert_fail@plt+0x12f50>
   15b74:	mov	r7, r0
   15b78:	str	r0, [fp, #4]
   15b7c:	ldr	r3, [r4, #44]	; 0x2c
   15b80:	str	r3, [sp, #16]
   15b84:	ldr	r3, [r4, #40]	; 0x28
   15b88:	str	r3, [sp, #12]
   15b8c:	str	sl, [sp, #8]
   15b90:	str	r9, [sp, #4]
   15b94:	ldr	r3, [r4]
   15b98:	str	r3, [sp]
   15b9c:	ldr	r3, [sp, #28]
   15ba0:	ldr	r2, [sp, #24]
   15ba4:	mov	r1, r8
   15ba8:	bl	14328 <__assert_fail@plt+0x2dd0>
   15bac:	ldr	r3, [sp, #32]
   15bb0:	ldr	r2, [sp, #36]	; 0x24
   15bb4:	str	r2, [r3]
   15bb8:	mov	r0, r7
   15bbc:	add	sp, sp, #52	; 0x34
   15bc0:	ldrd	r4, [sp]
   15bc4:	ldrd	r6, [sp, #8]
   15bc8:	ldrd	r8, [sp, #16]
   15bcc:	ldrd	sl, [sp, #24]
   15bd0:	add	sp, sp, #32
   15bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd8:	bl	11534 <abort@plt>
   15bdc:	sub	r2, r5, r2
   15be0:	mov	r3, #8
   15be4:	str	r3, [sp]
   15be8:	mvn	r3, #-2147483648	; 0x80000000
   15bec:	add	r2, r2, #1
   15bf0:	add	r1, sp, #44	; 0x2c
   15bf4:	mov	r0, #0
   15bf8:	bl	246ac <__assert_fail@plt+0x13154>
   15bfc:	mov	r6, r0
   15c00:	movw	r3, #33128	; 0x8168
   15c04:	movt	r3, #3
   15c08:	str	r0, [r3]
   15c0c:	ldrd	r2, [r3, #8]
   15c10:	strd	r2, [r0]
   15c14:	b	15acc <__assert_fail@plt+0x4574>
   15c18:	strd	r4, [sp, #-16]!
   15c1c:	str	r6, [sp, #8]
   15c20:	str	lr, [sp, #12]
   15c24:	mov	r4, r0
   15c28:	bl	1142c <__errno_location@plt>
   15c2c:	mov	r5, r0
   15c30:	ldr	r6, [r0]
   15c34:	cmp	r4, #0
   15c38:	ldr	r3, [pc, #32]	; 15c60 <__assert_fail@plt+0x4708>
   15c3c:	moveq	r4, r3
   15c40:	mov	r1, #48	; 0x30
   15c44:	mov	r0, r4
   15c48:	bl	2481c <__assert_fail@plt+0x132c4>
   15c4c:	str	r6, [r5]
   15c50:	ldrd	r4, [sp]
   15c54:	ldr	r6, [sp, #8]
   15c58:	add	sp, sp, #12
   15c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c60:	andeq	r8, r3, r4, asr #7
   15c64:	subs	r3, r0, #0
   15c68:	ldr	r2, [pc, #8]	; 15c78 <__assert_fail@plt+0x4720>
   15c6c:	moveq	r3, r2
   15c70:	ldr	r0, [r3]
   15c74:	bx	lr
   15c78:	andeq	r8, r3, r4, asr #7
   15c7c:	subs	r3, r0, #0
   15c80:	ldr	r2, [pc, #8]	; 15c90 <__assert_fail@plt+0x4738>
   15c84:	moveq	r3, r2
   15c88:	str	r1, [r3]
   15c8c:	bx	lr
   15c90:	andeq	r8, r3, r4, asr #7
   15c94:	push	{lr}		; (str lr, [sp, #-4]!)
   15c98:	subs	r3, r0, #0
   15c9c:	ldr	r0, [pc, #44]	; 15cd0 <__assert_fail@plt+0x4778>
   15ca0:	moveq	r3, r0
   15ca4:	add	r3, r3, #8
   15ca8:	lsr	lr, r1, #5
   15cac:	and	r1, r1, #31
   15cb0:	ldr	ip, [r3, lr, lsl #2]
   15cb4:	lsr	r0, ip, r1
   15cb8:	eor	r2, r2, r0
   15cbc:	and	r2, r2, #1
   15cc0:	eor	r1, ip, r2, lsl r1
   15cc4:	str	r1, [r3, lr, lsl #2]
   15cc8:	and	r0, r0, #1
   15ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd0:	andeq	r8, r3, r4, asr #7
   15cd4:	subs	r3, r0, #0
   15cd8:	ldr	r2, [pc, #12]	; 15cec <__assert_fail@plt+0x4794>
   15cdc:	moveq	r3, r2
   15ce0:	ldr	r0, [r3, #4]
   15ce4:	str	r1, [r3, #4]
   15ce8:	bx	lr
   15cec:	andeq	r8, r3, r4, asr #7
   15cf0:	subs	r3, r0, #0
   15cf4:	ldr	r0, [pc, #44]	; 15d28 <__assert_fail@plt+0x47d0>
   15cf8:	moveq	r3, r0
   15cfc:	mov	r0, #10
   15d00:	str	r0, [r3]
   15d04:	cmp	r2, #0
   15d08:	cmpne	r1, #0
   15d0c:	beq	15d1c <__assert_fail@plt+0x47c4>
   15d10:	str	r1, [r3, #40]	; 0x28
   15d14:	str	r2, [r3, #44]	; 0x2c
   15d18:	bx	lr
   15d1c:	str	r4, [sp, #-8]!
   15d20:	str	lr, [sp, #4]
   15d24:	bl	11534 <abort@plt>
   15d28:	andeq	r8, r3, r4, asr #7
   15d2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15d30:	strd	r6, [sp, #8]
   15d34:	strd	r8, [sp, #16]
   15d38:	str	sl, [sp, #24]
   15d3c:	str	lr, [sp, #28]
   15d40:	sub	sp, sp, #24
   15d44:	mov	r7, r0
   15d48:	mov	r8, r1
   15d4c:	mov	r9, r2
   15d50:	mov	sl, r3
   15d54:	ldr	r4, [sp, #56]	; 0x38
   15d58:	cmp	r4, #0
   15d5c:	ldr	r3, [pc, #104]	; 15dcc <__assert_fail@plt+0x4874>
   15d60:	moveq	r4, r3
   15d64:	bl	1142c <__errno_location@plt>
   15d68:	mov	r5, r0
   15d6c:	ldr	r6, [r0]
   15d70:	ldr	r3, [r4, #44]	; 0x2c
   15d74:	str	r3, [sp, #16]
   15d78:	ldr	r3, [r4, #40]	; 0x28
   15d7c:	str	r3, [sp, #12]
   15d80:	add	r3, r4, #8
   15d84:	str	r3, [sp, #8]
   15d88:	ldr	r3, [r4, #4]
   15d8c:	str	r3, [sp, #4]
   15d90:	ldr	r3, [r4]
   15d94:	str	r3, [sp]
   15d98:	mov	r3, sl
   15d9c:	mov	r2, r9
   15da0:	mov	r1, r8
   15da4:	mov	r0, r7
   15da8:	bl	14328 <__assert_fail@plt+0x2dd0>
   15dac:	str	r6, [r5]
   15db0:	add	sp, sp, #24
   15db4:	ldrd	r4, [sp]
   15db8:	ldrd	r6, [sp, #8]
   15dbc:	ldrd	r8, [sp, #16]
   15dc0:	ldr	sl, [sp, #24]
   15dc4:	add	sp, sp, #28
   15dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dcc:	andeq	r8, r3, r4, asr #7
   15dd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15dd4:	strd	r6, [sp, #8]
   15dd8:	strd	r8, [sp, #16]
   15ddc:	strd	sl, [sp, #24]
   15de0:	str	lr, [sp, #32]
   15de4:	sub	sp, sp, #44	; 0x2c
   15de8:	mov	r8, r0
   15dec:	mov	sl, r1
   15df0:	mov	r6, r2
   15df4:	subs	r4, r3, #0
   15df8:	ldr	r3, [pc, #200]	; 15ec8 <__assert_fail@plt+0x4970>
   15dfc:	moveq	r4, r3
   15e00:	bl	1142c <__errno_location@plt>
   15e04:	mov	r7, r0
   15e08:	ldr	fp, [r0]
   15e0c:	ldr	r5, [r4, #4]
   15e10:	cmp	r6, #0
   15e14:	orreq	r5, r5, #1
   15e18:	add	r9, r4, #8
   15e1c:	ldr	r3, [r4, #44]	; 0x2c
   15e20:	str	r3, [sp, #16]
   15e24:	ldr	r3, [r4, #40]	; 0x28
   15e28:	str	r3, [sp, #12]
   15e2c:	str	r9, [sp, #8]
   15e30:	str	r5, [sp, #4]
   15e34:	ldr	r3, [r4]
   15e38:	str	r3, [sp]
   15e3c:	str	sl, [sp, #36]	; 0x24
   15e40:	mov	r3, sl
   15e44:	str	r8, [sp, #32]
   15e48:	mov	r2, r8
   15e4c:	mov	r1, #0
   15e50:	mov	r0, r1
   15e54:	bl	14328 <__assert_fail@plt+0x2dd0>
   15e58:	mov	sl, r0
   15e5c:	add	r8, r0, #1
   15e60:	mov	r0, r8
   15e64:	bl	244a8 <__assert_fail@plt+0x12f50>
   15e68:	str	r0, [sp, #28]
   15e6c:	ldr	r3, [r4, #44]	; 0x2c
   15e70:	str	r3, [sp, #16]
   15e74:	ldr	r3, [r4, #40]	; 0x28
   15e78:	str	r3, [sp, #12]
   15e7c:	str	r9, [sp, #8]
   15e80:	str	r5, [sp, #4]
   15e84:	ldr	r3, [r4]
   15e88:	str	r3, [sp]
   15e8c:	ldr	r3, [sp, #36]	; 0x24
   15e90:	ldr	r2, [sp, #32]
   15e94:	mov	r1, r8
   15e98:	bl	14328 <__assert_fail@plt+0x2dd0>
   15e9c:	str	fp, [r7]
   15ea0:	cmp	r6, #0
   15ea4:	strne	sl, [r6]
   15ea8:	ldr	r0, [sp, #28]
   15eac:	add	sp, sp, #44	; 0x2c
   15eb0:	ldrd	r4, [sp]
   15eb4:	ldrd	r6, [sp, #8]
   15eb8:	ldrd	r8, [sp, #16]
   15ebc:	ldrd	sl, [sp, #24]
   15ec0:	add	sp, sp, #32
   15ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec8:	andeq	r8, r3, r4, asr #7
   15ecc:	str	r4, [sp, #-8]!
   15ed0:	str	lr, [sp, #4]
   15ed4:	mov	r3, r2
   15ed8:	mov	r2, #0
   15edc:	bl	15dd0 <__assert_fail@plt+0x4878>
   15ee0:	ldr	r4, [sp]
   15ee4:	add	sp, sp, #4
   15ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   15eec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ef0:	strd	r6, [sp, #8]
   15ef4:	str	r8, [sp, #16]
   15ef8:	str	lr, [sp, #20]
   15efc:	movw	r3, #33128	; 0x8168
   15f00:	movt	r3, #3
   15f04:	ldr	r7, [r3]
   15f08:	ldr	r3, [r3, #4]
   15f0c:	cmp	r3, #1
   15f10:	ble	15f3c <__assert_fail@plt+0x49e4>
   15f14:	mov	r4, #1
   15f18:	add	r6, r7, #4
   15f1c:	movw	r5, #33128	; 0x8168
   15f20:	movt	r5, #3
   15f24:	ldr	r0, [r6, r4, lsl #3]
   15f28:	bl	13eac <__assert_fail@plt+0x2954>
   15f2c:	add	r4, r4, #1
   15f30:	ldr	r3, [r5, #4]
   15f34:	cmp	r3, r4
   15f38:	bgt	15f24 <__assert_fail@plt+0x49cc>
   15f3c:	ldr	r0, [r7, #4]
   15f40:	movw	r3, #33476	; 0x82c4
   15f44:	movt	r3, #3
   15f48:	cmp	r0, r3
   15f4c:	beq	15f70 <__assert_fail@plt+0x4a18>
   15f50:	bl	13eac <__assert_fail@plt+0x2954>
   15f54:	movw	r3, #33128	; 0x8168
   15f58:	movt	r3, #3
   15f5c:	mov	r2, #256	; 0x100
   15f60:	str	r2, [r3, #8]
   15f64:	movw	r2, #33476	; 0x82c4
   15f68:	movt	r2, #3
   15f6c:	str	r2, [r3, #12]
   15f70:	ldr	r3, [pc, #64]	; 15fb8 <__assert_fail@plt+0x4a60>
   15f74:	cmp	r7, r3
   15f78:	beq	15f94 <__assert_fail@plt+0x4a3c>
   15f7c:	mov	r0, r7
   15f80:	bl	13eac <__assert_fail@plt+0x2954>
   15f84:	movw	r3, #33128	; 0x8168
   15f88:	movt	r3, #3
   15f8c:	add	r2, r3, #8
   15f90:	str	r2, [r3]
   15f94:	movw	r3, #33128	; 0x8168
   15f98:	movt	r3, #3
   15f9c:	mov	r2, #1
   15fa0:	str	r2, [r3, #4]
   15fa4:	ldrd	r4, [sp]
   15fa8:	ldrd	r6, [sp, #8]
   15fac:	ldr	r8, [sp, #16]
   15fb0:	add	sp, sp, #20
   15fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb8:	andeq	r8, r3, r0, ror r1
   15fbc:	str	r4, [sp, #-8]!
   15fc0:	str	lr, [sp, #4]
   15fc4:	ldr	r3, [pc, #16]	; 15fdc <__assert_fail@plt+0x4a84>
   15fc8:	mvn	r2, #0
   15fcc:	bl	15a20 <__assert_fail@plt+0x44c8>
   15fd0:	ldr	r4, [sp]
   15fd4:	add	sp, sp, #4
   15fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fdc:	andeq	r8, r3, r4, asr #7
   15fe0:	str	r4, [sp, #-8]!
   15fe4:	str	lr, [sp, #4]
   15fe8:	ldr	r3, [pc, #12]	; 15ffc <__assert_fail@plt+0x4aa4>
   15fec:	bl	15a20 <__assert_fail@plt+0x44c8>
   15ff0:	ldr	r4, [sp]
   15ff4:	add	sp, sp, #4
   15ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ffc:	andeq	r8, r3, r4, asr #7
   16000:	str	r4, [sp, #-8]!
   16004:	str	lr, [sp, #4]
   16008:	mov	r1, r0
   1600c:	mov	r0, #0
   16010:	bl	15fbc <__assert_fail@plt+0x4a64>
   16014:	ldr	r4, [sp]
   16018:	add	sp, sp, #4
   1601c:	pop	{pc}		; (ldr pc, [sp], #4)
   16020:	str	r4, [sp, #-8]!
   16024:	str	lr, [sp, #4]
   16028:	mov	r2, r1
   1602c:	mov	r1, r0
   16030:	mov	r0, #0
   16034:	bl	15fe0 <__assert_fail@plt+0x4a88>
   16038:	ldr	r4, [sp]
   1603c:	add	sp, sp, #4
   16040:	pop	{pc}		; (ldr pc, [sp], #4)
   16044:	strd	r4, [sp, #-12]!
   16048:	str	lr, [sp, #8]
   1604c:	sub	sp, sp, #52	; 0x34
   16050:	mov	r4, r0
   16054:	mov	r5, r2
   16058:	mov	r0, sp
   1605c:	bl	14194 <__assert_fail@plt+0x2c3c>
   16060:	mov	r3, sp
   16064:	mvn	r2, #0
   16068:	mov	r1, r5
   1606c:	mov	r0, r4
   16070:	bl	15a20 <__assert_fail@plt+0x44c8>
   16074:	add	sp, sp, #52	; 0x34
   16078:	ldrd	r4, [sp]
   1607c:	add	sp, sp, #8
   16080:	pop	{pc}		; (ldr pc, [sp], #4)
   16084:	strd	r4, [sp, #-16]!
   16088:	str	r6, [sp, #8]
   1608c:	str	lr, [sp, #12]
   16090:	sub	sp, sp, #48	; 0x30
   16094:	mov	r4, r0
   16098:	mov	r5, r2
   1609c:	mov	r6, r3
   160a0:	mov	r0, sp
   160a4:	bl	14194 <__assert_fail@plt+0x2c3c>
   160a8:	mov	r3, sp
   160ac:	mov	r2, r6
   160b0:	mov	r1, r5
   160b4:	mov	r0, r4
   160b8:	bl	15a20 <__assert_fail@plt+0x44c8>
   160bc:	add	sp, sp, #48	; 0x30
   160c0:	ldrd	r4, [sp]
   160c4:	ldr	r6, [sp, #8]
   160c8:	add	sp, sp, #12
   160cc:	pop	{pc}		; (ldr pc, [sp], #4)
   160d0:	str	r4, [sp, #-8]!
   160d4:	str	lr, [sp, #4]
   160d8:	mov	r2, r1
   160dc:	mov	r1, r0
   160e0:	mov	r0, #0
   160e4:	bl	16044 <__assert_fail@plt+0x4aec>
   160e8:	ldr	r4, [sp]
   160ec:	add	sp, sp, #4
   160f0:	pop	{pc}		; (ldr pc, [sp], #4)
   160f4:	str	r4, [sp, #-8]!
   160f8:	str	lr, [sp, #4]
   160fc:	mov	r3, r2
   16100:	mov	r2, r1
   16104:	mov	r1, r0
   16108:	mov	r0, #0
   1610c:	bl	16084 <__assert_fail@plt+0x4b2c>
   16110:	ldr	r4, [sp]
   16114:	add	sp, sp, #4
   16118:	pop	{pc}		; (ldr pc, [sp], #4)
   1611c:	strd	r4, [sp, #-12]!
   16120:	str	lr, [sp, #8]
   16124:	sub	sp, sp, #52	; 0x34
   16128:	mov	r4, r0
   1612c:	mov	r5, r1
   16130:	mov	r1, r2
   16134:	ldr	r0, [pc, #92]	; 16198 <__assert_fail@plt+0x4c40>
   16138:	ldrd	r2, [r0]
   1613c:	strd	r2, [sp]
   16140:	ldrd	r2, [r0, #8]
   16144:	strd	r2, [sp, #8]
   16148:	ldrd	r2, [r0, #16]
   1614c:	strd	r2, [sp, #16]
   16150:	ldrd	r2, [r0, #24]
   16154:	strd	r2, [sp, #24]
   16158:	ldrd	r2, [r0, #32]
   1615c:	strd	r2, [sp, #32]
   16160:	ldrd	r2, [r0, #40]	; 0x28
   16164:	strd	r2, [sp, #40]	; 0x28
   16168:	mov	r2, #1
   1616c:	mov	r0, sp
   16170:	bl	15c94 <__assert_fail@plt+0x473c>
   16174:	mov	r3, sp
   16178:	mov	r2, r5
   1617c:	mov	r1, r4
   16180:	mov	r0, #0
   16184:	bl	15a20 <__assert_fail@plt+0x44c8>
   16188:	add	sp, sp, #52	; 0x34
   1618c:	ldrd	r4, [sp]
   16190:	add	sp, sp, #8
   16194:	pop	{pc}		; (ldr pc, [sp], #4)
   16198:	andeq	r8, r3, r4, asr #7
   1619c:	str	r4, [sp, #-8]!
   161a0:	str	lr, [sp, #4]
   161a4:	mov	r2, r1
   161a8:	mvn	r1, #0
   161ac:	bl	1611c <__assert_fail@plt+0x4bc4>
   161b0:	ldr	r4, [sp]
   161b4:	add	sp, sp, #4
   161b8:	pop	{pc}		; (ldr pc, [sp], #4)
   161bc:	str	r4, [sp, #-8]!
   161c0:	str	lr, [sp, #4]
   161c4:	mov	r1, #58	; 0x3a
   161c8:	bl	1619c <__assert_fail@plt+0x4c44>
   161cc:	ldr	r4, [sp]
   161d0:	add	sp, sp, #4
   161d4:	pop	{pc}		; (ldr pc, [sp], #4)
   161d8:	str	r4, [sp, #-8]!
   161dc:	str	lr, [sp, #4]
   161e0:	mov	r2, #58	; 0x3a
   161e4:	bl	1611c <__assert_fail@plt+0x4bc4>
   161e8:	ldr	r4, [sp]
   161ec:	add	sp, sp, #4
   161f0:	pop	{pc}		; (ldr pc, [sp], #4)
   161f4:	strd	r4, [sp, #-12]!
   161f8:	str	lr, [sp, #8]
   161fc:	sub	sp, sp, #100	; 0x64
   16200:	mov	r4, r0
   16204:	mov	r5, r2
   16208:	mov	r0, sp
   1620c:	bl	14194 <__assert_fail@plt+0x2c3c>
   16210:	ldrd	r2, [sp]
   16214:	strd	r2, [sp, #48]	; 0x30
   16218:	ldrd	r2, [sp, #8]
   1621c:	strd	r2, [sp, #56]	; 0x38
   16220:	ldrd	r2, [sp, #16]
   16224:	strd	r2, [sp, #64]	; 0x40
   16228:	ldrd	r2, [sp, #24]
   1622c:	strd	r2, [sp, #72]	; 0x48
   16230:	ldrd	r2, [sp, #32]
   16234:	strd	r2, [sp, #80]	; 0x50
   16238:	ldrd	r2, [sp, #40]	; 0x28
   1623c:	strd	r2, [sp, #88]	; 0x58
   16240:	mov	r2, #1
   16244:	mov	r1, #58	; 0x3a
   16248:	add	r0, sp, #48	; 0x30
   1624c:	bl	15c94 <__assert_fail@plt+0x473c>
   16250:	add	r3, sp, #48	; 0x30
   16254:	mvn	r2, #0
   16258:	mov	r1, r5
   1625c:	mov	r0, r4
   16260:	bl	15a20 <__assert_fail@plt+0x44c8>
   16264:	add	sp, sp, #100	; 0x64
   16268:	ldrd	r4, [sp]
   1626c:	add	sp, sp, #8
   16270:	pop	{pc}		; (ldr pc, [sp], #4)
   16274:	strd	r4, [sp, #-20]!	; 0xffffffec
   16278:	strd	r6, [sp, #8]
   1627c:	str	lr, [sp, #16]
   16280:	sub	sp, sp, #52	; 0x34
   16284:	mov	r4, r0
   16288:	mov	r5, r3
   1628c:	ldr	r3, [pc, #92]	; 162f0 <__assert_fail@plt+0x4d98>
   16290:	ldrd	r6, [r3]
   16294:	strd	r6, [sp]
   16298:	ldrd	r6, [r3, #8]
   1629c:	strd	r6, [sp, #8]
   162a0:	ldrd	r6, [r3, #16]
   162a4:	strd	r6, [sp, #16]
   162a8:	ldrd	r6, [r3, #24]
   162ac:	strd	r6, [sp, #24]
   162b0:	ldrd	r6, [r3, #32]
   162b4:	strd	r6, [sp, #32]
   162b8:	ldrd	r6, [r3, #40]	; 0x28
   162bc:	strd	r6, [sp, #40]	; 0x28
   162c0:	mov	r0, sp
   162c4:	bl	15cf0 <__assert_fail@plt+0x4798>
   162c8:	mov	r3, sp
   162cc:	ldr	r2, [sp, #72]	; 0x48
   162d0:	mov	r1, r5
   162d4:	mov	r0, r4
   162d8:	bl	15a20 <__assert_fail@plt+0x44c8>
   162dc:	add	sp, sp, #52	; 0x34
   162e0:	ldrd	r4, [sp]
   162e4:	ldrd	r6, [sp, #8]
   162e8:	add	sp, sp, #16
   162ec:	pop	{pc}		; (ldr pc, [sp], #4)
   162f0:	andeq	r8, r3, r4, asr #7
   162f4:	push	{lr}		; (str lr, [sp, #-4]!)
   162f8:	sub	sp, sp, #12
   162fc:	mvn	ip, #0
   16300:	str	ip, [sp]
   16304:	bl	16274 <__assert_fail@plt+0x4d1c>
   16308:	add	sp, sp, #12
   1630c:	pop	{pc}		; (ldr pc, [sp], #4)
   16310:	str	r4, [sp, #-8]!
   16314:	str	lr, [sp, #4]
   16318:	mov	r3, r2
   1631c:	mov	r2, r1
   16320:	mov	r1, r0
   16324:	mov	r0, #0
   16328:	bl	162f4 <__assert_fail@plt+0x4d9c>
   1632c:	ldr	r4, [sp]
   16330:	add	sp, sp, #4
   16334:	pop	{pc}		; (ldr pc, [sp], #4)
   16338:	push	{lr}		; (str lr, [sp, #-4]!)
   1633c:	sub	sp, sp, #12
   16340:	str	r3, [sp]
   16344:	mov	r3, r2
   16348:	mov	r2, r1
   1634c:	mov	r1, r0
   16350:	mov	r0, #0
   16354:	bl	16274 <__assert_fail@plt+0x4d1c>
   16358:	add	sp, sp, #12
   1635c:	pop	{pc}		; (ldr pc, [sp], #4)
   16360:	str	r4, [sp, #-8]!
   16364:	str	lr, [sp, #4]
   16368:	ldr	r3, [pc, #12]	; 1637c <__assert_fail@plt+0x4e24>
   1636c:	bl	15a20 <__assert_fail@plt+0x44c8>
   16370:	ldr	r4, [sp]
   16374:	add	sp, sp, #4
   16378:	pop	{pc}		; (ldr pc, [sp], #4)
   1637c:	andeq	r8, r3, r8, ror r1
   16380:	str	r4, [sp, #-8]!
   16384:	str	lr, [sp, #4]
   16388:	mov	r2, r1
   1638c:	mov	r1, r0
   16390:	mov	r0, #0
   16394:	bl	16360 <__assert_fail@plt+0x4e08>
   16398:	ldr	r4, [sp]
   1639c:	add	sp, sp, #4
   163a0:	pop	{pc}		; (ldr pc, [sp], #4)
   163a4:	str	r4, [sp, #-8]!
   163a8:	str	lr, [sp, #4]
   163ac:	mvn	r2, #0
   163b0:	bl	16360 <__assert_fail@plt+0x4e08>
   163b4:	ldr	r4, [sp]
   163b8:	add	sp, sp, #4
   163bc:	pop	{pc}		; (ldr pc, [sp], #4)
   163c0:	str	r4, [sp, #-8]!
   163c4:	str	lr, [sp, #4]
   163c8:	mov	r1, r0
   163cc:	mov	r0, #0
   163d0:	bl	163a4 <__assert_fail@plt+0x4e4c>
   163d4:	ldr	r4, [sp]
   163d8:	add	sp, sp, #4
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	mov	r2, r0
   163e4:	ldr	r0, [r0, #80]	; 0x50
   163e8:	cmp	r0, #1
   163ec:	beq	16438 <__assert_fail@plt+0x4ee0>
   163f0:	add	r0, r1, #1
   163f4:	ldr	r3, [r2, #28]
   163f8:	cmp	r0, r3
   163fc:	bge	16440 <__assert_fail@plt+0x4ee8>
   16400:	ldr	ip, [r2, #8]
   16404:	add	r2, ip, r0, lsl #2
   16408:	ldr	r0, [ip, r0, lsl #2]
   1640c:	cmn	r0, #1
   16410:	bne	16448 <__assert_fail@plt+0x4ef0>
   16414:	sub	r0, r3, r1
   16418:	mov	r3, #1
   1641c:	add	r3, r3, #1
   16420:	cmp	r3, r0
   16424:	beq	1643c <__assert_fail@plt+0x4ee4>
   16428:	ldr	r1, [r2, #4]!
   1642c:	cmn	r1, #1
   16430:	beq	1641c <__assert_fail@plt+0x4ec4>
   16434:	mov	r0, r3
   16438:	bx	lr
   1643c:	bx	lr
   16440:	mov	r0, #1
   16444:	bx	lr
   16448:	mov	r0, #1
   1644c:	bx	lr
   16450:	ldr	r3, [r0, #80]	; 0x50
   16454:	cmp	r3, #1
   16458:	ldreq	r3, [r0, #4]
   1645c:	ldrbeq	r0, [r3, r1]
   16460:	ldrne	r3, [r0, #8]
   16464:	ldrne	r0, [r3, r1, lsl #2]
   16468:	bx	lr
   1646c:	ldr	ip, [r0, #36]	; 0x24
   16470:	ldr	r3, [r0, #48]	; 0x30
   16474:	cmp	ip, r3
   16478:	movge	ip, r3
   1647c:	ldr	r3, [r0, #28]
   16480:	cmp	ip, r3
   16484:	ble	164c0 <__assert_fail@plt+0x4f68>
   16488:	ldr	r2, [r0]
   1648c:	ldr	r1, [r0, #24]
   16490:	add	r2, r2, r3
   16494:	ldrb	r2, [r2, r1]
   16498:	ldr	r1, [r0, #64]	; 0x40
   1649c:	ldrb	r1, [r1, r2]
   164a0:	ldr	r2, [r0, #4]
   164a4:	strb	r1, [r2, r3]
   164a8:	add	r3, r3, #1
   164ac:	cmp	ip, r3
   164b0:	bne	16488 <__assert_fail@plt+0x4f30>
   164b4:	str	ip, [r0, #28]
   164b8:	str	ip, [r0, #32]
   164bc:	bx	lr
   164c0:	mov	ip, r3
   164c4:	b	164b4 <__assert_fail@plt+0x4f5c>
   164c8:	push	{lr}		; (str lr, [sp, #-4]!)
   164cc:	mov	ip, r0
   164d0:	mov	lr, r1
   164d4:	clz	r1, r1
   164d8:	lsr	r1, r1, #5
   164dc:	cmp	r0, #0
   164e0:	movne	r0, r1
   164e4:	moveq	r0, #1
   164e8:	cmp	r0, #0
   164ec:	movne	r0, #0
   164f0:	bne	1652c <__assert_fail@plt+0x4fd4>
   164f4:	ldr	r3, [ip, #4]
   164f8:	ldr	r2, [lr, #4]
   164fc:	cmp	r3, r2
   16500:	bne	1652c <__assert_fail@plt+0x4fd4>
   16504:	subs	r3, r3, #1
   16508:	bmi	16528 <__assert_fail@plt+0x4fd0>
   1650c:	ldr	r1, [ip, #8]
   16510:	ldr	r2, [lr, #8]
   16514:	ldr	r1, [r1, r3, lsl #2]
   16518:	ldr	r2, [r2, r3, lsl #2]
   1651c:	cmp	r1, r2
   16520:	beq	16504 <__assert_fail@plt+0x4fac>
   16524:	b	1652c <__assert_fail@plt+0x4fd4>
   16528:	mov	r0, #1
   1652c:	pop	{pc}		; (ldr pc, [sp], #4)
   16530:	str	r4, [sp, #-8]!
   16534:	str	lr, [sp, #4]
   16538:	ldr	lr, [r0, #4]
   1653c:	cmp	lr, #0
   16540:	movle	r0, #0
   16544:	ble	165bc <__assert_fail@plt+0x5064>
   16548:	sub	lr, lr, #1
   1654c:	mov	ip, #0
   16550:	cmp	lr, ip
   16554:	bls	165a8 <__assert_fail@plt+0x5050>
   16558:	add	r2, lr, ip
   1655c:	lsr	r2, r2, #1
   16560:	ldr	r4, [r0, #8]
   16564:	ldr	r3, [r4, r2, lsl #2]
   16568:	cmp	r1, r3
   1656c:	bgt	16594 <__assert_fail@plt+0x503c>
   16570:	cmp	ip, r2
   16574:	bcs	165a8 <__assert_fail@plt+0x5050>
   16578:	add	r3, ip, r2
   1657c:	lsr	r3, r3, #1
   16580:	ldr	lr, [r4, r3, lsl #2]
   16584:	cmp	lr, r1
   16588:	blt	1659c <__assert_fail@plt+0x5044>
   1658c:	mov	r2, r3
   16590:	b	16570 <__assert_fail@plt+0x5018>
   16594:	mov	r3, r2
   16598:	mov	r2, lr
   1659c:	add	ip, r3, #1
   165a0:	mov	lr, r2
   165a4:	b	16550 <__assert_fail@plt+0x4ff8>
   165a8:	ldr	r3, [r0, #8]
   165ac:	ldr	r3, [r3, ip, lsl #2]
   165b0:	cmp	r3, r1
   165b4:	addeq	r0, ip, #1
   165b8:	movne	r0, #0
   165bc:	ldr	r4, [sp]
   165c0:	add	sp, sp, #4
   165c4:	pop	{pc}		; (ldr pc, [sp], #4)
   165c8:	cmp	r1, #0
   165cc:	blt	16614 <__assert_fail@plt+0x50bc>
   165d0:	ldr	r3, [r0, #4]
   165d4:	cmp	r3, r1
   165d8:	ble	16614 <__assert_fail@plt+0x50bc>
   165dc:	sub	r3, r3, #1
   165e0:	str	r3, [r0, #4]
   165e4:	cmp	r3, r1
   165e8:	ble	16614 <__assert_fail@plt+0x50bc>
   165ec:	add	r3, r1, #1
   165f0:	lsl	r3, r3, #2
   165f4:	ldr	r2, [r0, #8]
   165f8:	ldr	ip, [r2, r3]
   165fc:	str	ip, [r2, r1, lsl #2]
   16600:	add	r1, r1, #1
   16604:	add	r3, r3, #4
   16608:	ldr	r2, [r0, #4]
   1660c:	cmp	r2, r1
   16610:	bgt	165f4 <__assert_fail@plt+0x509c>
   16614:	bx	lr
   16618:	strd	r4, [sp, #-16]!
   1661c:	str	r6, [sp, #8]
   16620:	str	lr, [sp, #12]
   16624:	mov	r4, r0
   16628:	mov	r6, r1
   1662c:	mov	r5, r2
   16630:	b	16638 <__assert_fail@plt+0x50e0>
   16634:	mov	r4, r3
   16638:	ldr	r3, [r4, #4]
   1663c:	cmp	r3, #0
   16640:	bne	16634 <__assert_fail@plt+0x50dc>
   16644:	ldr	r3, [r4, #8]
   16648:	cmp	r3, #0
   1664c:	bne	16634 <__assert_fail@plt+0x50dc>
   16650:	mov	r1, r4
   16654:	mov	r0, r5
   16658:	blx	r6
   1665c:	cmp	r0, #0
   16660:	bne	1669c <__assert_fail@plt+0x5144>
   16664:	ldr	r2, [r4]
   16668:	cmp	r2, #0
   1666c:	beq	1669c <__assert_fail@plt+0x5144>
   16670:	ldr	r3, [r2, #8]
   16674:	cmp	r3, r4
   16678:	movne	r4, #0
   1667c:	moveq	r4, #1
   16680:	cmp	r3, #0
   16684:	movne	r1, r4
   16688:	moveq	r1, #1
   1668c:	mov	r4, r2
   16690:	cmp	r1, #0
   16694:	bne	16650 <__assert_fail@plt+0x50f8>
   16698:	b	16634 <__assert_fail@plt+0x50dc>
   1669c:	ldrd	r4, [sp]
   166a0:	ldr	r6, [sp, #8]
   166a4:	add	sp, sp, #12
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	strd	r4, [sp, #-16]!
   166b0:	str	r6, [sp, #8]
   166b4:	str	lr, [sp, #12]
   166b8:	mov	r4, r0
   166bc:	mov	r6, r1
   166c0:	mov	r5, r2
   166c4:	b	166d0 <__assert_fail@plt+0x5178>
   166c8:	mov	r3, r2
   166cc:	mov	r4, r3
   166d0:	mov	r1, r4
   166d4:	mov	r0, r5
   166d8:	blx	r6
   166dc:	cmp	r0, #0
   166e0:	bne	16718 <__assert_fail@plt+0x51c0>
   166e4:	ldr	r3, [r4, #4]
   166e8:	cmp	r3, #0
   166ec:	bne	166cc <__assert_fail@plt+0x5174>
   166f0:	ldr	r2, [r4, #8]
   166f4:	cmp	r2, #0
   166f8:	cmpne	r2, r3
   166fc:	bne	166c8 <__assert_fail@plt+0x5170>
   16700:	ldr	r2, [r4]
   16704:	mov	r3, r4
   16708:	cmp	r2, #0
   1670c:	beq	16718 <__assert_fail@plt+0x51c0>
   16710:	mov	r4, r2
   16714:	b	166f0 <__assert_fail@plt+0x5198>
   16718:	ldrd	r4, [sp]
   1671c:	ldr	r6, [sp, #8]
   16720:	add	sp, sp, #12
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	ldrb	r3, [r1, #24]
   1672c:	cmp	r3, #4
   16730:	beq	16744 <__assert_fail@plt+0x51ec>
   16734:	cmp	r3, #17
   16738:	beq	16770 <__assert_fail@plt+0x5218>
   1673c:	mov	r0, #0
   16740:	bx	lr
   16744:	ldr	r3, [r0, #132]	; 0x84
   16748:	cmp	r3, #0
   1674c:	beq	1673c <__assert_fail@plt+0x51e4>
   16750:	ldr	r2, [r1, #20]
   16754:	ldr	r2, [r3, r2, lsl #2]
   16758:	str	r2, [r1, #20]
   1675c:	ldr	r3, [r0, #80]	; 0x50
   16760:	mov	r1, #1
   16764:	orr	r3, r3, r1, lsl r2
   16768:	str	r3, [r0, #80]	; 0x50
   1676c:	b	1673c <__assert_fail@plt+0x51e4>
   16770:	ldr	r3, [r1, #4]
   16774:	cmp	r3, #0
   16778:	beq	1673c <__assert_fail@plt+0x51e4>
   1677c:	ldrb	r2, [r3, #24]
   16780:	cmp	r2, #17
   16784:	bne	1673c <__assert_fail@plt+0x51e4>
   16788:	ldr	r2, [r3, #20]
   1678c:	ldr	r3, [r3, #4]
   16790:	str	r3, [r1, #4]
   16794:	cmp	r3, #0
   16798:	strne	r1, [r3]
   1679c:	ldr	r3, [r0, #132]	; 0x84
   167a0:	ldr	r1, [r1, #20]
   167a4:	ldr	r1, [r3, r1, lsl #2]
   167a8:	str	r1, [r3, r2, lsl #2]
   167ac:	cmp	r2, #31
   167b0:	bgt	1673c <__assert_fail@plt+0x51e4>
   167b4:	ldr	r3, [r0, #80]	; 0x50
   167b8:	mov	r1, #1
   167bc:	bic	r2, r3, r1, lsl r2
   167c0:	str	r2, [r0, #80]	; 0x50
   167c4:	b	1673c <__assert_fail@plt+0x51e4>
   167c8:	ldrb	r3, [r1, #24]
   167cc:	cmp	r3, #11
   167d0:	beq	16800 <__assert_fail@plt+0x52a8>
   167d4:	cmp	r3, #16
   167d8:	beq	16810 <__assert_fail@plt+0x52b8>
   167dc:	ldr	r3, [r1, #4]
   167e0:	cmp	r3, #0
   167e4:	ldrne	r2, [r1, #16]
   167e8:	strne	r2, [r3, #16]
   167ec:	ldr	r3, [r1, #8]
   167f0:	cmp	r3, #0
   167f4:	ldrne	r2, [r1, #16]
   167f8:	strne	r2, [r3, #16]
   167fc:	b	16808 <__assert_fail@plt+0x52b0>
   16800:	ldr	r3, [r1, #4]
   16804:	str	r1, [r3, #16]
   16808:	mov	r0, #0
   1680c:	bx	lr
   16810:	ldr	r3, [r1, #4]
   16814:	ldr	r2, [r1, #8]
   16818:	ldr	r2, [r2, #12]
   1681c:	str	r2, [r3, #16]
   16820:	ldr	r3, [r1, #8]
   16824:	ldr	r2, [r1, #16]
   16828:	str	r2, [r3, #16]
   1682c:	b	16808 <__assert_fail@plt+0x52b0>
   16830:	ldr	r3, [r1, #40]	; 0x28
   16834:	ldr	ip, [r1, #56]	; 0x38
   16838:	cmp	ip, r3
   1683c:	ble	168b8 <__assert_fail@plt+0x5360>
   16840:	push	{lr}		; (str lr, [sp, #-4]!)
   16844:	ldr	ip, [r1, #4]
   16848:	ldrb	r3, [ip, r3]
   1684c:	strb	r3, [r0]
   16850:	ldr	ip, [r1, #80]	; 0x50
   16854:	cmp	ip, #1
   16858:	ble	16888 <__assert_fail@plt+0x5330>
   1685c:	ldr	ip, [r1, #40]	; 0x28
   16860:	ldr	lr, [r1, #28]
   16864:	cmp	ip, lr
   16868:	beq	16888 <__assert_fail@plt+0x5330>
   1686c:	ldr	lr, [r1, #8]
   16870:	ldr	ip, [lr, ip, lsl #2]
   16874:	cmn	ip, #1
   16878:	moveq	r3, #1
   1687c:	strbeq	r3, [r0, #4]
   16880:	moveq	r0, r3
   16884:	beq	169b0 <__assert_fail@plt+0x5458>
   16888:	cmp	r3, #92	; 0x5c
   1688c:	beq	168c8 <__assert_fail@plt+0x5370>
   16890:	cmp	r3, #91	; 0x5b
   16894:	beq	16914 <__assert_fail@plt+0x53bc>
   16898:	cmp	r3, #93	; 0x5d
   1689c:	beq	169b4 <__assert_fail@plt+0x545c>
   168a0:	cmp	r3, #94	; 0x5e
   168a4:	bne	1699c <__assert_fail@plt+0x5444>
   168a8:	mov	r3, #25
   168ac:	strb	r3, [r0, #4]
   168b0:	mov	r0, #1
   168b4:	b	169b0 <__assert_fail@plt+0x5458>
   168b8:	mov	r3, #2
   168bc:	strb	r3, [r0, #4]
   168c0:	mov	r0, #0
   168c4:	bx	lr
   168c8:	tst	r2, #1
   168cc:	beq	168e4 <__assert_fail@plt+0x538c>
   168d0:	ldr	r3, [r1, #40]	; 0x28
   168d4:	add	r3, r3, #1
   168d8:	ldr	r2, [r1, #48]	; 0x30
   168dc:	cmp	r3, r2
   168e0:	blt	168f4 <__assert_fail@plt+0x539c>
   168e4:	mov	r3, #1
   168e8:	strb	r3, [r0, #4]
   168ec:	mov	r0, r3
   168f0:	b	169b0 <__assert_fail@plt+0x5458>
   168f4:	str	r3, [r1, #40]	; 0x28
   168f8:	ldr	r2, [r1, #4]
   168fc:	ldrb	r3, [r2, r3]
   16900:	strb	r3, [r0]
   16904:	mov	r3, #1
   16908:	strb	r3, [r0, #4]
   1690c:	mov	r0, r3
   16910:	b	169b0 <__assert_fail@plt+0x5458>
   16914:	ldr	r3, [r1, #40]	; 0x28
   16918:	add	lr, r3, #1
   1691c:	ldr	ip, [r1, #48]	; 0x30
   16920:	cmp	lr, ip
   16924:	bge	1695c <__assert_fail@plt+0x5404>
   16928:	ldr	r1, [r1, #4]
   1692c:	add	r3, r1, r3
   16930:	ldrb	r3, [r3, #1]
   16934:	strb	r3, [r0]
   16938:	cmp	r3, #58	; 0x3a
   1693c:	beq	16984 <__assert_fail@plt+0x542c>
   16940:	cmp	r3, #61	; 0x3d
   16944:	beq	16974 <__assert_fail@plt+0x541c>
   16948:	cmp	r3, #46	; 0x2e
   1694c:	moveq	r3, #26
   16950:	strbeq	r3, [r0, #4]
   16954:	moveq	r0, #2
   16958:	beq	169b0 <__assert_fail@plt+0x5458>
   1695c:	mov	r3, #1
   16960:	strb	r3, [r0, #4]
   16964:	mov	r2, #91	; 0x5b
   16968:	strb	r2, [r0]
   1696c:	mov	r0, r3
   16970:	b	169b0 <__assert_fail@plt+0x5458>
   16974:	mov	r3, #28
   16978:	strb	r3, [r0, #4]
   1697c:	mov	r0, #2
   16980:	b	169b0 <__assert_fail@plt+0x5458>
   16984:	tst	r2, #4
   16988:	beq	1695c <__assert_fail@plt+0x5404>
   1698c:	mov	r3, #30
   16990:	strb	r3, [r0, #4]
   16994:	mov	r0, #2
   16998:	b	169b0 <__assert_fail@plt+0x5458>
   1699c:	cmp	r3, #45	; 0x2d
   169a0:	bne	168e4 <__assert_fail@plt+0x538c>
   169a4:	mov	r3, #22
   169a8:	strb	r3, [r0, #4]
   169ac:	mov	r0, #1
   169b0:	pop	{pc}		; (ldr pc, [sp], #4)
   169b4:	mov	r3, #21
   169b8:	strb	r3, [r0, #4]
   169bc:	mov	r0, #1
   169c0:	b	169b0 <__assert_fail@plt+0x5458>
   169c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   169c8:	strd	r6, [sp, #8]
   169cc:	strd	r8, [sp, #16]
   169d0:	str	sl, [sp, #24]
   169d4:	str	lr, [sp, #28]
   169d8:	sub	sp, sp, #8
   169dc:	mov	r6, r0
   169e0:	mov	r4, r1
   169e4:	mov	r8, r2
   169e8:	mov	r9, r3
   169ec:	ldr	r5, [r1, #40]	; 0x28
   169f0:	mov	r1, r5
   169f4:	mov	r0, r4
   169f8:	bl	163e0 <__assert_fail@plt+0x4e88>
   169fc:	cmp	r0, #1
   16a00:	bgt	16a4c <__assert_fail@plt+0x54f4>
   16a04:	add	r5, r5, r9
   16a08:	str	r5, [r4, #40]	; 0x28
   16a0c:	ldrb	r3, [r8, #4]
   16a10:	and	r2, r3, #251	; 0xfb
   16a14:	cmp	r3, #28
   16a18:	cmpne	r2, #26
   16a1c:	beq	16a94 <__assert_fail@plt+0x553c>
   16a20:	ldrb	r2, [sp, #48]	; 0x30
   16a24:	cmp	r3, #22
   16a28:	moveq	r3, r2
   16a2c:	orrne	r3, r2, #1
   16a30:	cmp	r3, #0
   16a34:	beq	16c3c <__assert_fail@plt+0x56e4>
   16a38:	mov	r0, #0
   16a3c:	str	r0, [r6]
   16a40:	ldrb	r3, [r8]
   16a44:	strb	r3, [r6, #4]
   16a48:	b	16a78 <__assert_fail@plt+0x5520>
   16a4c:	mov	r7, r0
   16a50:	mov	r3, #1
   16a54:	str	r3, [r6]
   16a58:	ldr	r1, [r4, #40]	; 0x28
   16a5c:	mov	r0, r4
   16a60:	bl	16450 <__assert_fail@plt+0x4ef8>
   16a64:	str	r0, [r6, #4]
   16a68:	ldr	r3, [r4, #40]	; 0x28
   16a6c:	add	r7, r3, r7
   16a70:	str	r7, [r4, #40]	; 0x28
   16a74:	mov	r0, #0
   16a78:	add	sp, sp, #8
   16a7c:	ldrd	r4, [sp]
   16a80:	ldrd	r6, [sp, #8]
   16a84:	ldrd	r8, [sp, #16]
   16a88:	ldr	sl, [sp, #24]
   16a8c:	add	sp, sp, #28
   16a90:	pop	{pc}		; (ldr pc, [sp], #4)
   16a94:	ldr	r3, [r4, #56]	; 0x38
   16a98:	cmp	r5, r3
   16a9c:	movge	r0, #7
   16aa0:	bge	16a78 <__assert_fail@plt+0x5520>
   16aa4:	ldrb	r9, [r8]
   16aa8:	mov	r5, #0
   16aac:	b	16b94 <__assert_fail@plt+0x563c>
   16ab0:	ldrb	r3, [r4, #75]	; 0x4b
   16ab4:	cmp	r3, #0
   16ab8:	bne	16ad4 <__assert_fail@plt+0x557c>
   16abc:	ldr	r2, [r4, #4]
   16ac0:	ldr	r3, [r4, #40]	; 0x28
   16ac4:	add	r1, r3, #1
   16ac8:	str	r1, [r4, #40]	; 0x28
   16acc:	ldrb	r7, [r2, r3]
   16ad0:	b	16bb4 <__assert_fail@plt+0x565c>
   16ad4:	ldrb	r3, [r4, #76]	; 0x4c
   16ad8:	cmp	r3, #0
   16adc:	beq	16b60 <__assert_fail@plt+0x5608>
   16ae0:	ldr	sl, [r4, #40]	; 0x28
   16ae4:	ldr	r3, [r4, #28]
   16ae8:	cmp	sl, r3
   16aec:	beq	16b00 <__assert_fail@plt+0x55a8>
   16af0:	ldr	r3, [r4, #8]
   16af4:	ldr	r3, [r3, sl, lsl #2]
   16af8:	cmn	r3, #1
   16afc:	beq	16b34 <__assert_fail@plt+0x55dc>
   16b00:	ldr	r2, [r4, #12]
   16b04:	ldr	r3, [r4]
   16b08:	ldr	r1, [r2, sl, lsl #2]
   16b0c:	ldr	r2, [r4, #24]
   16b10:	add	r3, r3, r1
   16b14:	ldrb	r7, [r3, r2]
   16b18:	bics	r3, r7, #127	; 0x7f
   16b1c:	beq	16b48 <__assert_fail@plt+0x55f0>
   16b20:	ldr	r3, [r4, #4]
   16b24:	add	r2, sl, #1
   16b28:	str	r2, [r4, #40]	; 0x28
   16b2c:	ldrb	r7, [r3, sl]
   16b30:	b	16bb4 <__assert_fail@plt+0x565c>
   16b34:	ldr	r3, [r4, #4]
   16b38:	add	r2, sl, #1
   16b3c:	str	r2, [r4, #40]	; 0x28
   16b40:	ldrb	r7, [r3, sl]
   16b44:	b	16bb4 <__assert_fail@plt+0x565c>
   16b48:	mov	r1, sl
   16b4c:	mov	r0, r4
   16b50:	bl	163e0 <__assert_fail@plt+0x4e88>
   16b54:	add	r0, sl, r0
   16b58:	str	r0, [r4, #40]	; 0x28
   16b5c:	b	16bb4 <__assert_fail@plt+0x565c>
   16b60:	ldr	r3, [r4]
   16b64:	ldr	r1, [r4, #24]
   16b68:	ldr	r2, [r4, #40]	; 0x28
   16b6c:	add	r0, r2, #1
   16b70:	str	r0, [r4, #40]	; 0x28
   16b74:	add	r3, r3, r1
   16b78:	ldrb	r7, [r3, r2]
   16b7c:	b	16bb4 <__assert_fail@plt+0x565c>
   16b80:	ldr	r3, [r6, #4]
   16b84:	strb	r7, [r3, r5]
   16b88:	add	r5, r5, #1
   16b8c:	cmp	r5, #32
   16b90:	beq	16c68 <__assert_fail@plt+0x5710>
   16b94:	ldrb	r3, [r8, #4]
   16b98:	cmp	r3, #30
   16b9c:	beq	16ab0 <__assert_fail@plt+0x5558>
   16ba0:	ldr	r2, [r4, #4]
   16ba4:	ldr	r3, [r4, #40]	; 0x28
   16ba8:	add	r1, r3, #1
   16bac:	str	r1, [r4, #40]	; 0x28
   16bb0:	ldrb	r7, [r2, r3]
   16bb4:	ldr	r3, [r4, #40]	; 0x28
   16bb8:	ldr	r2, [r4, #56]	; 0x38
   16bbc:	cmp	r2, r3
   16bc0:	ble	16c60 <__assert_fail@plt+0x5708>
   16bc4:	cmp	r9, r7
   16bc8:	bne	16b80 <__assert_fail@plt+0x5628>
   16bcc:	ldr	r2, [r4, #4]
   16bd0:	ldrb	r2, [r2, r3]
   16bd4:	cmp	r2, #93	; 0x5d
   16bd8:	bne	16b80 <__assert_fail@plt+0x5628>
   16bdc:	add	r3, r3, #1
   16be0:	str	r3, [r4, #40]	; 0x28
   16be4:	ldr	r3, [r6, #4]
   16be8:	mov	r2, #0
   16bec:	strb	r2, [r3, r5]
   16bf0:	ldrb	r3, [r8, #4]
   16bf4:	cmp	r3, #28
   16bf8:	beq	16c1c <__assert_fail@plt+0x56c4>
   16bfc:	cmp	r3, #30
   16c00:	beq	16c2c <__assert_fail@plt+0x56d4>
   16c04:	cmp	r3, #26
   16c08:	moveq	r3, #3
   16c0c:	streq	r3, [r6]
   16c10:	moveq	r0, r2
   16c14:	movne	r0, #0
   16c18:	b	16a78 <__assert_fail@plt+0x5520>
   16c1c:	mov	r3, #2
   16c20:	str	r3, [r6]
   16c24:	mov	r0, #0
   16c28:	b	16a78 <__assert_fail@plt+0x5520>
   16c2c:	mov	r3, #4
   16c30:	str	r3, [r6]
   16c34:	mov	r0, #0
   16c38:	b	16a78 <__assert_fail@plt+0x5520>
   16c3c:	ldr	r2, [sp, #44]	; 0x2c
   16c40:	mov	r1, r4
   16c44:	mov	r0, sp
   16c48:	bl	16830 <__assert_fail@plt+0x52d8>
   16c4c:	ldrb	r3, [sp, #4]
   16c50:	cmp	r3, #21
   16c54:	movne	r0, #11
   16c58:	beq	16a38 <__assert_fail@plt+0x54e0>
   16c5c:	b	16a78 <__assert_fail@plt+0x5520>
   16c60:	mov	r0, #7
   16c64:	b	16a78 <__assert_fail@plt+0x5520>
   16c68:	mov	r0, #7
   16c6c:	b	16a78 <__assert_fail@plt+0x5520>
   16c70:	ldrb	r3, [r1, #24]
   16c74:	cmp	r3, #17
   16c78:	beq	16c84 <__assert_fail@plt+0x572c>
   16c7c:	mov	r0, #0
   16c80:	bx	lr
   16c84:	ldr	r3, [r1, #20]
   16c88:	cmp	r0, r3
   16c8c:	bne	16c7c <__assert_fail@plt+0x5724>
   16c90:	ldrb	r3, [r1, #26]
   16c94:	orr	r3, r3, #8
   16c98:	strb	r3, [r1, #26]
   16c9c:	b	16c7c <__assert_fail@plt+0x5724>
   16ca0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16ca4:	strd	r6, [sp, #8]
   16ca8:	strd	r8, [sp, #16]
   16cac:	strd	sl, [sp, #24]
   16cb0:	str	lr, [sp, #32]
   16cb4:	sub	sp, sp, #52	; 0x34
   16cb8:	str	r0, [sp, #12]
   16cbc:	mov	fp, r1
   16cc0:	mov	sl, r2
   16cc4:	str	r3, [sp, #32]
   16cc8:	ldr	r8, [r0, #84]	; 0x54
   16ccc:	add	r3, r3, r3, lsl #1
   16cd0:	ldr	r7, [r8, #24]
   16cd4:	add	r7, r7, r3, lsl #2
   16cd8:	ldr	r3, [r7, #4]
   16cdc:	cmp	r3, #0
   16ce0:	ble	16e7c <__assert_fail@plt+0x5924>
   16ce4:	mov	r3, #1
   16ce8:	lsl	r3, r3, sl
   16cec:	str	r3, [sp, #20]
   16cf0:	mvn	r3, r3
   16cf4:	str	r3, [sp, #24]
   16cf8:	mov	r4, #0
   16cfc:	ldr	r3, [sp, #88]	; 0x58
   16d00:	add	r3, r3, #1
   16d04:	add	r3, r3, r3, lsl #1
   16d08:	str	r3, [sp, #36]	; 0x24
   16d0c:	b	16dec <__assert_fail@plt+0x5894>
   16d10:	ldr	r3, [r8, #20]
   16d14:	add	r3, r3, r4
   16d18:	ldr	r3, [r3, #8]
   16d1c:	ldr	r3, [r3]
   16d20:	cmp	r7, r3
   16d24:	beq	16dac <__assert_fail@plt+0x5854>
   16d28:	str	fp, [sp]
   16d2c:	mov	r2, sl
   16d30:	ldr	r1, [sp, #16]
   16d34:	ldr	r0, [sp, #12]
   16d38:	bl	16ca0 <__assert_fail@plt+0x5748>
   16d3c:	cmn	r0, #1
   16d40:	beq	16e80 <__assert_fail@plt+0x5928>
   16d44:	cmp	r0, #0
   16d48:	bne	16d58 <__assert_fail@plt+0x5800>
   16d4c:	ldr	r3, [sp, #28]
   16d50:	cmp	r3, #0
   16d54:	bne	16e80 <__assert_fail@plt+0x5928>
   16d58:	cmp	sl, #31
   16d5c:	bgt	16d70 <__assert_fail@plt+0x5818>
   16d60:	ldr	r3, [r9, #-8]
   16d64:	ldr	r2, [sp, #24]
   16d68:	and	r3, r3, r2
   16d6c:	str	r3, [r9, #-8]
   16d70:	add	r5, r5, #24
   16d74:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   16d78:	cmp	r3, #0
   16d7c:	beq	16db8 <__assert_fail@plt+0x5860>
   16d80:	mov	r9, r5
   16d84:	ldr	r3, [r5, #-24]	; 0xffffffe8
   16d88:	cmp	r3, r6
   16d8c:	bne	16d70 <__assert_fail@plt+0x5818>
   16d90:	cmp	sl, #31
   16d94:	bgt	16d10 <__assert_fail@plt+0x57b8>
   16d98:	ldr	r3, [r5, #-8]
   16d9c:	ldr	r2, [sp, #20]
   16da0:	tst	r2, r3
   16da4:	bne	16d10 <__assert_fail@plt+0x57b8>
   16da8:	b	16d70 <__assert_fail@plt+0x5818>
   16dac:	ldr	fp, [sp, #16]
   16db0:	sbfx	r0, fp, #0, #1
   16db4:	b	16e80 <__assert_fail@plt+0x5928>
   16db8:	ldr	r7, [sp, #40]	; 0x28
   16dbc:	ldr	r4, [sp, #44]	; 0x2c
   16dc0:	ldr	fp, [sp, #16]
   16dc4:	b	16ddc <__assert_fail@plt+0x5884>
   16dc8:	tst	fp, #1
   16dcc:	beq	16ddc <__assert_fail@plt+0x5884>
   16dd0:	ldr	r3, [r2, r6, lsl #3]
   16dd4:	cmp	r3, sl
   16dd8:	beq	16e9c <__assert_fail@plt+0x5944>
   16ddc:	add	r4, r4, #1
   16de0:	ldr	r3, [r7, #4]
   16de4:	cmp	r3, r4
   16de8:	ble	16e7c <__assert_fail@plt+0x5924>
   16dec:	ldr	r3, [r7, #8]
   16df0:	ldr	r6, [r3, r4, lsl #2]
   16df4:	ldr	r2, [r8]
   16df8:	add	r3, r2, r6, lsl #3
   16dfc:	ldrb	r3, [r3, #4]
   16e00:	cmp	r3, #8
   16e04:	beq	16dc8 <__assert_fail@plt+0x5870>
   16e08:	cmp	r3, #9
   16e0c:	beq	16e60 <__assert_fail@plt+0x5908>
   16e10:	cmp	r3, #4
   16e14:	bne	16ddc <__assert_fail@plt+0x5884>
   16e18:	ldr	r3, [sp, #88]	; 0x58
   16e1c:	cmn	r3, #1
   16e20:	beq	16ddc <__assert_fail@plt+0x5884>
   16e24:	add	r3, r6, r6, lsl #1
   16e28:	lsl	r3, r3, #2
   16e2c:	ldr	r2, [sp, #12]
   16e30:	ldr	r5, [r2, #116]	; 0x74
   16e34:	ldr	r2, [sp, #36]	; 0x24
   16e38:	add	r5, r5, r2, lsl #3
   16e3c:	and	r2, fp, #2
   16e40:	str	r2, [sp, #28]
   16e44:	str	r7, [sp, #40]	; 0x28
   16e48:	str	r4, [sp, #44]	; 0x2c
   16e4c:	mov	r4, r3
   16e50:	str	fp, [sp, #16]
   16e54:	ldr	r7, [sp, #32]
   16e58:	ldr	fp, [sp, #88]	; 0x58
   16e5c:	b	16d80 <__assert_fail@plt+0x5828>
   16e60:	tst	fp, #2
   16e64:	beq	16ddc <__assert_fail@plt+0x5884>
   16e68:	ldr	r3, [r2, r6, lsl #3]
   16e6c:	cmp	r3, sl
   16e70:	bne	16ddc <__assert_fail@plt+0x5884>
   16e74:	mov	r0, #0
   16e78:	b	16e80 <__assert_fail@plt+0x5928>
   16e7c:	ubfx	r0, fp, #1, #1
   16e80:	add	sp, sp, #52	; 0x34
   16e84:	ldrd	r4, [sp]
   16e88:	ldrd	r6, [sp, #8]
   16e8c:	ldrd	r8, [sp, #16]
   16e90:	ldrd	sl, [sp, #24]
   16e94:	add	sp, sp, #32
   16e98:	pop	{pc}		; (ldr pc, [sp], #4)
   16e9c:	mvn	r0, #0
   16ea0:	b	16e80 <__assert_fail@plt+0x5928>
   16ea4:	str	r4, [sp, #-8]!
   16ea8:	str	lr, [sp, #4]
   16eac:	sub	sp, sp, #8
   16eb0:	ldr	lr, [sp, #16]
   16eb4:	add	r1, r1, r1, lsl #1
   16eb8:	ldr	ip, [r0, #116]	; 0x74
   16ebc:	add	r1, ip, r1, lsl #3
   16ec0:	ldr	ip, [r1, #8]
   16ec4:	cmp	ip, lr
   16ec8:	bgt	16f0c <__assert_fail@plt+0x59b4>
   16ecc:	ldr	r4, [r1, #12]
   16ed0:	cmp	r4, lr
   16ed4:	movlt	r0, #1
   16ed8:	blt	16efc <__assert_fail@plt+0x59a4>
   16edc:	cmp	ip, lr
   16ee0:	movne	r1, #0
   16ee4:	moveq	r1, #1
   16ee8:	cmp	r4, lr
   16eec:	beq	16f14 <__assert_fail@plt+0x59bc>
   16ef0:	cmp	ip, lr
   16ef4:	movne	r0, #0
   16ef8:	beq	16f18 <__assert_fail@plt+0x59c0>
   16efc:	add	sp, sp, #8
   16f00:	ldr	r4, [sp]
   16f04:	add	sp, sp, #4
   16f08:	pop	{pc}		; (ldr pc, [sp], #4)
   16f0c:	mvn	r0, #0
   16f10:	b	16efc <__assert_fail@plt+0x59a4>
   16f14:	orr	r1, r1, #2
   16f18:	ldr	ip, [sp, #20]
   16f1c:	str	ip, [sp]
   16f20:	bl	16ca0 <__assert_fail@plt+0x5748>
   16f24:	b	16efc <__assert_fail@plt+0x59a4>
   16f28:	strd	r4, [sp, #-12]!
   16f2c:	str	lr, [sp, #8]
   16f30:	mov	r4, r0
   16f34:	ldr	r5, [r0, #108]	; 0x6c
   16f38:	mov	ip, r5
   16f3c:	mov	r0, #0
   16f40:	cmp	ip, r0
   16f44:	ble	16fb0 <__assert_fail@plt+0x5a58>
   16f48:	add	r2, ip, r0
   16f4c:	add	r2, r2, r2, lsr #31
   16f50:	asr	r2, r2, #1
   16f54:	ldr	lr, [r4, #116]	; 0x74
   16f58:	add	r3, r2, r2, lsl #1
   16f5c:	add	r3, lr, r3, lsl #3
   16f60:	ldr	r3, [r3, #4]
   16f64:	cmp	r1, r3
   16f68:	bgt	16f9c <__assert_fail@plt+0x5a44>
   16f6c:	cmp	r0, r2
   16f70:	bge	16fb0 <__assert_fail@plt+0x5a58>
   16f74:	add	r3, r0, r2
   16f78:	add	r3, r3, r3, lsr #31
   16f7c:	asr	r3, r3, #1
   16f80:	add	ip, r3, r3, lsl #1
   16f84:	add	ip, lr, ip, lsl #3
   16f88:	ldr	ip, [ip, #4]
   16f8c:	cmp	ip, r1
   16f90:	blt	16fa4 <__assert_fail@plt+0x5a4c>
   16f94:	mov	r2, r3
   16f98:	b	16f6c <__assert_fail@plt+0x5a14>
   16f9c:	mov	r3, r2
   16fa0:	mov	r2, ip
   16fa4:	add	r0, r3, #1
   16fa8:	mov	ip, r2
   16fac:	b	16f40 <__assert_fail@plt+0x59e8>
   16fb0:	cmp	r5, r0
   16fb4:	ble	16fdc <__assert_fail@plt+0x5a84>
   16fb8:	ldr	r3, [r4, #116]	; 0x74
   16fbc:	add	r2, r0, r0, lsl #1
   16fc0:	add	r3, r3, r2, lsl #3
   16fc4:	ldr	r3, [r3, #4]
   16fc8:	cmp	r3, r1
   16fcc:	mvnne	r0, #0
   16fd0:	ldrd	r4, [sp]
   16fd4:	add	sp, sp, #8
   16fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	mvn	r0, #0
   16fe0:	b	16fd0 <__assert_fail@plt+0x5a78>
   16fe4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16fe8:	strd	r6, [sp, #8]
   16fec:	strd	r8, [sp, #16]
   16ff0:	strd	sl, [sp, #24]
   16ff4:	str	lr, [sp, #32]
   16ff8:	sub	sp, sp, #20
   16ffc:	mov	r4, r0
   17000:	mov	r5, r1
   17004:	str	r2, [sp, #12]
   17008:	mov	r8, r3
   1700c:	ldr	sl, [r0, #84]	; 0x54
   17010:	mov	r1, r3
   17014:	bl	16f28 <__assert_fail@plt+0x59d0>
   17018:	mov	fp, r0
   1701c:	ldr	r1, [sp, #60]	; 0x3c
   17020:	mov	r0, r4
   17024:	bl	16f28 <__assert_fail@plt+0x59d0>
   17028:	str	r0, [sp, #8]
   1702c:	ldr	r3, [r5, #4]
   17030:	cmp	r3, #0
   17034:	ble	170dc <__assert_fail@plt+0x5b84>
   17038:	mov	r6, #0
   1703c:	ldr	r3, [r5, #8]
   17040:	ldr	r1, [r3, r6, lsl #2]
   17044:	ldr	r3, [r4, #116]	; 0x74
   17048:	add	r2, r1, r1, lsl #1
   1704c:	ldr	r2, [r3, r2, lsl #3]
   17050:	ldr	r3, [sl]
   17054:	ldr	r7, [r3, r2, lsl #3]
   17058:	str	fp, [sp, #4]
   1705c:	str	r8, [sp]
   17060:	ldr	r3, [sp, #12]
   17064:	mov	r2, r7
   17068:	mov	r0, r4
   1706c:	bl	16ea4 <__assert_fail@plt+0x594c>
   17070:	mov	r9, r0
   17074:	ldr	r3, [r5, #8]
   17078:	ldr	r1, [r3, r6, lsl #2]
   1707c:	ldr	r3, [sp, #8]
   17080:	str	r3, [sp, #4]
   17084:	ldr	r3, [sp, #60]	; 0x3c
   17088:	str	r3, [sp]
   1708c:	ldr	r3, [sp, #56]	; 0x38
   17090:	mov	r2, r7
   17094:	mov	r0, r4
   17098:	bl	16ea4 <__assert_fail@plt+0x594c>
   1709c:	cmp	r9, r0
   170a0:	beq	170c4 <__assert_fail@plt+0x5b6c>
   170a4:	mov	r0, #1
   170a8:	add	sp, sp, #20
   170ac:	ldrd	r4, [sp]
   170b0:	ldrd	r6, [sp, #8]
   170b4:	ldrd	r8, [sp, #16]
   170b8:	ldrd	sl, [sp, #24]
   170bc:	add	sp, sp, #32
   170c0:	pop	{pc}		; (ldr pc, [sp], #4)
   170c4:	add	r6, r6, #1
   170c8:	ldr	r3, [r5, #4]
   170cc:	cmp	r3, r6
   170d0:	bgt	1703c <__assert_fail@plt+0x5ae4>
   170d4:	mov	r0, #0
   170d8:	b	170a8 <__assert_fail@plt+0x5b50>
   170dc:	mov	r0, #0
   170e0:	b	170a8 <__assert_fail@plt+0x5b50>
   170e4:	strd	r4, [sp, #-16]!
   170e8:	str	r6, [sp, #8]
   170ec:	str	lr, [sp, #12]
   170f0:	mov	r4, r0
   170f4:	mov	r5, r1
   170f8:	ldr	r3, [r0, #80]	; 0x50
   170fc:	cmp	r3, #1
   17100:	ble	17148 <__assert_fail@plt+0x5bf0>
   17104:	cmn	r1, #-1073741823	; 0xc0000001
   17108:	bhi	17188 <__assert_fail@plt+0x5c30>
   1710c:	lsl	r6, r1, #2
   17110:	mov	r1, r6
   17114:	ldr	r0, [r0, #8]
   17118:	bl	25930 <__assert_fail@plt+0x143d8>
   1711c:	cmp	r0, #0
   17120:	beq	17190 <__assert_fail@plt+0x5c38>
   17124:	str	r0, [r4, #8]
   17128:	ldr	r0, [r4, #12]
   1712c:	cmp	r0, #0
   17130:	beq	17148 <__assert_fail@plt+0x5bf0>
   17134:	mov	r1, r6
   17138:	bl	25930 <__assert_fail@plt+0x143d8>
   1713c:	cmp	r0, #0
   17140:	beq	17198 <__assert_fail@plt+0x5c40>
   17144:	str	r0, [r4, #12]
   17148:	ldrb	r3, [r4, #75]	; 0x4b
   1714c:	cmp	r3, #0
   17150:	bne	1716c <__assert_fail@plt+0x5c14>
   17154:	str	r5, [r4, #36]	; 0x24
   17158:	mov	r0, #0
   1715c:	ldrd	r4, [sp]
   17160:	ldr	r6, [sp, #8]
   17164:	add	sp, sp, #12
   17168:	pop	{pc}		; (ldr pc, [sp], #4)
   1716c:	mov	r1, r5
   17170:	ldr	r0, [r4, #4]
   17174:	bl	25930 <__assert_fail@plt+0x143d8>
   17178:	cmp	r0, #0
   1717c:	beq	171a0 <__assert_fail@plt+0x5c48>
   17180:	str	r0, [r4, #4]
   17184:	b	17154 <__assert_fail@plt+0x5bfc>
   17188:	mov	r0, #12
   1718c:	b	1715c <__assert_fail@plt+0x5c04>
   17190:	mov	r0, #12
   17194:	b	1715c <__assert_fail@plt+0x5c04>
   17198:	mov	r0, #12
   1719c:	b	1715c <__assert_fail@plt+0x5c04>
   171a0:	mov	r0, #12
   171a4:	b	1715c <__assert_fail@plt+0x5c04>
   171a8:	strd	r4, [sp, #-16]!
   171ac:	str	r6, [sp, #8]
   171b0:	str	lr, [sp, #12]
   171b4:	mov	r4, r0
   171b8:	mov	r5, r1
   171bc:	ldr	r1, [r0]
   171c0:	ldr	r3, [r0, #4]
   171c4:	cmp	r1, r3
   171c8:	beq	171f4 <__assert_fail@plt+0x5c9c>
   171cc:	ldr	r2, [r4, #8]
   171d0:	ldr	r3, [r4, #4]
   171d4:	add	r1, r3, #1
   171d8:	str	r1, [r4, #4]
   171dc:	str	r5, [r2, r3, lsl #2]
   171e0:	mov	r0, #1
   171e4:	ldrd	r4, [sp]
   171e8:	ldr	r6, [sp, #8]
   171ec:	add	sp, sp, #12
   171f0:	pop	{pc}		; (ldr pc, [sp], #4)
   171f4:	add	r1, r1, #1
   171f8:	lsl	r3, r1, #1
   171fc:	str	r3, [r0]
   17200:	lsl	r1, r1, #3
   17204:	ldr	r0, [r0, #8]
   17208:	bl	25930 <__assert_fail@plt+0x143d8>
   1720c:	cmp	r0, #0
   17210:	beq	1721c <__assert_fail@plt+0x5cc4>
   17214:	str	r0, [r4, #8]
   17218:	b	171cc <__assert_fail@plt+0x5c74>
   1721c:	mov	r0, #0
   17220:	b	171e4 <__assert_fail@plt+0x5c8c>
   17224:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17228:	strd	r6, [sp, #8]
   1722c:	str	r8, [sp, #16]
   17230:	str	lr, [sp, #20]
   17234:	mov	r7, r0
   17238:	mov	r5, r1
   1723c:	mov	r4, r2
   17240:	mov	r6, r3
   17244:	ldr	r3, [r0, #64]	; 0x40
   17248:	cmp	r3, #31
   1724c:	beq	172cc <__assert_fail@plt+0x5d74>
   17250:	ldr	r3, [r7, #56]	; 0x38
   17254:	ldr	r2, [r7, #64]	; 0x40
   17258:	add	r1, r2, #1
   1725c:	str	r1, [r7, #64]	; 0x40
   17260:	lsl	r2, r2, #5
   17264:	add	r0, r2, #4
   17268:	add	r0, r3, r0
   1726c:	add	r3, r3, r2
   17270:	mov	r2, #0
   17274:	str	r2, [r3, #4]
   17278:	str	r5, [r3, #8]
   1727c:	str	r4, [r3, #12]
   17280:	ldrd	r6, [r6]
   17284:	strd	r6, [r3, #24]
   17288:	ldrb	r1, [r3, #30]
   1728c:	and	r1, r1, #251	; 0xfb
   17290:	bfi	r1, r2, #3, #1
   17294:	strb	r1, [r3, #30]
   17298:	str	r2, [r3, #16]
   1729c:	str	r2, [r3, #20]
   172a0:	mvn	r2, #0
   172a4:	str	r2, [r3, #32]
   172a8:	cmp	r5, #0
   172ac:	strne	r0, [r5]
   172b0:	cmp	r4, #0
   172b4:	strne	r0, [r4]
   172b8:	ldrd	r4, [sp]
   172bc:	ldrd	r6, [sp, #8]
   172c0:	ldr	r8, [sp, #16]
   172c4:	add	sp, sp, #20
   172c8:	pop	{pc}		; (ldr pc, [sp], #4)
   172cc:	mov	r0, #996	; 0x3e4
   172d0:	bl	258f4 <__assert_fail@plt+0x1439c>
   172d4:	cmp	r0, #0
   172d8:	beq	172b8 <__assert_fail@plt+0x5d60>
   172dc:	ldr	r3, [r7, #56]	; 0x38
   172e0:	str	r3, [r0]
   172e4:	str	r0, [r7, #56]	; 0x38
   172e8:	mov	r3, #0
   172ec:	str	r3, [r7, #64]	; 0x40
   172f0:	b	17250 <__assert_fail@plt+0x5cf8>
   172f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   172f8:	strd	r6, [sp, #8]
   172fc:	str	r8, [sp, #16]
   17300:	str	lr, [sp, #20]
   17304:	sub	sp, sp, #8
   17308:	mov	r4, r0
   1730c:	mov	r7, r1
   17310:	ldr	r5, [r0]
   17314:	add	r8, sp, #4
   17318:	mov	r6, #0
   1731c:	add	r3, r4, #20
   17320:	mov	r2, r6
   17324:	mov	r1, r6
   17328:	mov	r0, r7
   1732c:	bl	17224 <__assert_fail@plt+0x5ccc>
   17330:	str	r0, [r8]
   17334:	cmp	r0, #0
   17338:	beq	17370 <__assert_fail@plt+0x5e18>
   1733c:	str	r5, [r0]
   17340:	ldr	r2, [r8]
   17344:	ldrb	r3, [r2, #26]
   17348:	orr	r3, r3, #4
   1734c:	strb	r3, [r2, #26]
   17350:	ldr	r5, [r8]
   17354:	ldr	r3, [r4, #4]
   17358:	cmp	r3, #0
   1735c:	beq	17388 <__assert_fail@plt+0x5e30>
   17360:	add	r8, r5, #4
   17364:	mov	r4, r3
   17368:	b	1731c <__assert_fail@plt+0x5dc4>
   1736c:	ldr	r0, [sp, #4]
   17370:	add	sp, sp, #8
   17374:	ldrd	r4, [sp]
   17378:	ldrd	r6, [sp, #8]
   1737c:	ldr	r8, [sp, #16]
   17380:	add	sp, sp, #20
   17384:	pop	{pc}		; (ldr pc, [sp], #4)
   17388:	ldr	r2, [r4, #8]
   1738c:	cmp	r2, r3
   17390:	cmpne	r2, #0
   17394:	bne	173b4 <__assert_fail@plt+0x5e5c>
   17398:	ldr	r2, [r4]
   1739c:	ldr	r5, [r5]
   173a0:	mov	r3, r4
   173a4:	cmp	r2, #0
   173a8:	beq	1736c <__assert_fail@plt+0x5e14>
   173ac:	mov	r4, r2
   173b0:	b	17388 <__assert_fail@plt+0x5e30>
   173b4:	add	r8, r5, #8
   173b8:	mov	r4, r2
   173bc:	b	1731c <__assert_fail@plt+0x5dc4>
   173c0:	strd	r4, [sp, #-12]!
   173c4:	str	lr, [sp, #8]
   173c8:	sub	sp, sp, #12
   173cc:	mov	r4, #0
   173d0:	mov	r5, #0
   173d4:	strd	r4, [sp]
   173d8:	strb	r3, [sp, #4]
   173dc:	mov	r3, sp
   173e0:	bl	17224 <__assert_fail@plt+0x5ccc>
   173e4:	add	sp, sp, #12
   173e8:	ldrd	r4, [sp]
   173ec:	add	sp, sp, #8
   173f0:	pop	{pc}		; (ldr pc, [sp], #4)
   173f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   173f8:	strd	r6, [sp, #8]
   173fc:	strd	r8, [sp, #16]
   17400:	str	sl, [sp, #24]
   17404:	str	lr, [sp, #28]
   17408:	mov	r8, r0
   1740c:	mov	r7, r2
   17410:	ldr	r6, [r1]
   17414:	ldr	r4, [r2, #4]
   17418:	ldrb	r3, [r1, #28]
   1741c:	ubfx	r3, r3, #4, #1
   17420:	cmp	r4, #0
   17424:	moveq	r3, #0
   17428:	cmp	r3, #0
   1742c:	bne	17474 <__assert_fail@plt+0x5f1c>
   17430:	mov	r3, #8
   17434:	mov	r2, #0
   17438:	mov	r1, r2
   1743c:	mov	r0, r6
   17440:	bl	173c0 <__assert_fail@plt+0x5e68>
   17444:	mov	r5, r0
   17448:	mov	r3, #9
   1744c:	mov	r2, #0
   17450:	mov	r1, r2
   17454:	mov	r0, r6
   17458:	bl	173c0 <__assert_fail@plt+0x5e68>
   1745c:	mov	sl, r0
   17460:	cmp	r4, #0
   17464:	moveq	r9, r0
   17468:	beq	174d8 <__assert_fail@plt+0x5f80>
   1746c:	mov	r9, r0
   17470:	b	174c0 <__assert_fail@plt+0x5f68>
   17474:	ldr	r3, [r2, #20]
   17478:	cmp	r3, #31
   1747c:	bgt	17534 <__assert_fail@plt+0x5fdc>
   17480:	ldr	r2, [r6, #80]	; 0x50
   17484:	lsr	r3, r2, r3
   17488:	tst	r3, #1
   1748c:	beq	17534 <__assert_fail@plt+0x5fdc>
   17490:	mov	r3, #8
   17494:	mov	r2, #0
   17498:	mov	r1, r2
   1749c:	mov	r0, r6
   174a0:	bl	173c0 <__assert_fail@plt+0x5e68>
   174a4:	mov	r5, r0
   174a8:	mov	r3, #9
   174ac:	mov	r2, #0
   174b0:	mov	r1, r2
   174b4:	mov	r0, r6
   174b8:	bl	173c0 <__assert_fail@plt+0x5e68>
   174bc:	mov	r9, r0
   174c0:	mov	r3, #16
   174c4:	mov	r2, r9
   174c8:	mov	r1, r4
   174cc:	mov	r0, r6
   174d0:	bl	173c0 <__assert_fail@plt+0x5e68>
   174d4:	mov	sl, r0
   174d8:	mov	r3, #16
   174dc:	mov	r2, sl
   174e0:	mov	r1, r5
   174e4:	mov	r0, r6
   174e8:	bl	173c0 <__assert_fail@plt+0x5e68>
   174ec:	mov	r4, r0
   174f0:	cmp	sl, #0
   174f4:	cmpne	r0, #0
   174f8:	beq	17550 <__assert_fail@plt+0x5ff8>
   174fc:	cmp	r9, #0
   17500:	cmpne	r5, #0
   17504:	beq	17550 <__assert_fail@plt+0x5ff8>
   17508:	ldr	r3, [r7, #20]
   1750c:	str	r3, [r9, #20]
   17510:	str	r3, [r5, #20]
   17514:	ldrb	r3, [r7, #26]
   17518:	ubfx	r3, r3, #3, #1
   1751c:	ldrb	r2, [r9, #26]
   17520:	bfi	r2, r3, #3, #1
   17524:	strb	r2, [r9, #26]
   17528:	ldrb	r2, [r5, #26]
   1752c:	bfi	r2, r3, #3, #1
   17530:	strb	r2, [r5, #26]
   17534:	mov	r0, r4
   17538:	ldrd	r4, [sp]
   1753c:	ldrd	r6, [sp, #8]
   17540:	ldrd	r8, [sp, #16]
   17544:	ldr	sl, [sp, #24]
   17548:	add	sp, sp, #28
   1754c:	pop	{pc}		; (ldr pc, [sp], #4)
   17550:	mov	r3, #12
   17554:	str	r3, [r8]
   17558:	mov	r4, #0
   1755c:	b	17534 <__assert_fail@plt+0x5fdc>
   17560:	strd	r4, [sp, #-12]!
   17564:	str	lr, [sp, #8]
   17568:	sub	sp, sp, #12
   1756c:	mov	r5, r0
   17570:	mov	r4, r1
   17574:	mov	r3, #0
   17578:	str	r3, [sp, #4]
   1757c:	ldr	r2, [r1, #4]
   17580:	cmp	r2, r3
   17584:	beq	17594 <__assert_fail@plt+0x603c>
   17588:	ldrb	r3, [r2, #24]
   1758c:	cmp	r3, #17
   17590:	beq	175c0 <__assert_fail@plt+0x6068>
   17594:	ldr	r2, [r4, #8]
   17598:	cmp	r2, #0
   1759c:	beq	175ac <__assert_fail@plt+0x6054>
   175a0:	ldrb	r3, [r2, #24]
   175a4:	cmp	r3, #17
   175a8:	beq	175dc <__assert_fail@plt+0x6084>
   175ac:	ldr	r0, [sp, #4]
   175b0:	add	sp, sp, #12
   175b4:	ldrd	r4, [sp]
   175b8:	add	sp, sp, #8
   175bc:	pop	{pc}		; (ldr pc, [sp], #4)
   175c0:	mov	r1, r0
   175c4:	add	r0, sp, #4
   175c8:	bl	173f4 <__assert_fail@plt+0x5e9c>
   175cc:	str	r0, [r4, #4]
   175d0:	cmp	r0, #0
   175d4:	strne	r4, [r0]
   175d8:	b	17594 <__assert_fail@plt+0x603c>
   175dc:	mov	r1, r5
   175e0:	add	r0, sp, #4
   175e4:	bl	173f4 <__assert_fail@plt+0x5e9c>
   175e8:	str	r0, [r4, #8]
   175ec:	cmp	r0, #0
   175f0:	strne	r4, [r0]
   175f4:	b	175ac <__assert_fail@plt+0x6054>
   175f8:	strd	r4, [sp, #-16]!
   175fc:	str	r6, [sp, #8]
   17600:	str	lr, [sp, #12]
   17604:	mov	r4, r0
   17608:	mov	r5, r1
   1760c:	mov	r3, #1
   17610:	str	r3, [r0]
   17614:	str	r3, [r0, #4]
   17618:	mov	r0, #4
   1761c:	bl	258f4 <__assert_fail@plt+0x1439c>
   17620:	str	r0, [r4, #8]
   17624:	cmp	r0, #0
   17628:	moveq	r3, #0
   1762c:	streq	r3, [r4, #4]
   17630:	streq	r3, [r4]
   17634:	moveq	r0, #12
   17638:	strne	r5, [r0]
   1763c:	movne	r0, #0
   17640:	ldrd	r4, [sp]
   17644:	ldr	r6, [sp, #8]
   17648:	add	sp, sp, #12
   1764c:	pop	{pc}		; (ldr pc, [sp], #4)
   17650:	str	r4, [sp, #-8]!
   17654:	str	lr, [sp, #4]
   17658:	mov	r4, r0
   1765c:	str	r1, [r0]
   17660:	mov	r3, #0
   17664:	str	r3, [r0, #4]
   17668:	lsl	r0, r1, #2
   1766c:	bl	258f4 <__assert_fail@plt+0x1439c>
   17670:	str	r0, [r4, #8]
   17674:	cmp	r0, #0
   17678:	movne	r0, #0
   1767c:	moveq	r0, #12
   17680:	ldr	r4, [sp]
   17684:	add	sp, sp, #4
   17688:	pop	{pc}		; (ldr pc, [sp], #4)
   1768c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17690:	strd	r6, [sp, #8]
   17694:	strd	r8, [sp, #16]
   17698:	str	sl, [sp, #24]
   1769c:	str	lr, [sp, #28]
   176a0:	mov	r6, r0
   176a4:	mov	r5, r1
   176a8:	mov	r7, r2
   176ac:	mov	r8, r1
   176b0:	str	r2, [r8], #16
   176b4:	ldr	r1, [r1, #8]
   176b8:	mov	r0, r8
   176bc:	bl	17650 <__assert_fail@plt+0x60f8>
   176c0:	subs	r9, r0, #0
   176c4:	bne	177a0 <__assert_fail@plt+0x6248>
   176c8:	ldr	r3, [r5, #8]
   176cc:	cmp	r3, #0
   176d0:	ble	17720 <__assert_fail@plt+0x61c8>
   176d4:	mov	r4, r9
   176d8:	b	176ec <__assert_fail@plt+0x6194>
   176dc:	add	r4, r4, #1
   176e0:	ldr	r3, [r5, #8]
   176e4:	cmp	r3, r4
   176e8:	ble	17720 <__assert_fail@plt+0x61c8>
   176ec:	ldr	r3, [r5, #12]
   176f0:	ldr	r1, [r3, r4, lsl #2]
   176f4:	ldr	r3, [r6]
   176f8:	add	r3, r3, r1, lsl #3
   176fc:	ldrb	r3, [r3, #4]
   17700:	tst	r3, #8
   17704:	bne	176dc <__assert_fail@plt+0x6184>
   17708:	mov	r0, r8
   1770c:	bl	171a8 <__assert_fail@plt+0x5c50>
   17710:	cmp	r0, #0
   17714:	bne	176dc <__assert_fail@plt+0x6184>
   17718:	mov	r9, #12
   1771c:	b	1775c <__assert_fail@plt+0x6204>
   17720:	ldr	r4, [r6, #68]	; 0x44
   17724:	and	r7, r7, r4
   17728:	add	r7, r7, r7, lsl #1
   1772c:	lsl	r4, r7, #2
   17730:	ldr	r6, [r6, #32]
   17734:	add	r7, r6, r4
   17738:	ldr	r3, [r6, r4]
   1773c:	ldr	r2, [r7, #4]
   17740:	cmp	r2, r3
   17744:	ble	17778 <__assert_fail@plt+0x6220>
   17748:	ldr	r2, [r7, #8]
   1774c:	ldr	r3, [r6, r4]
   17750:	add	r1, r3, #1
   17754:	str	r1, [r6, r4]
   17758:	str	r5, [r2, r3, lsl #2]
   1775c:	mov	r0, r9
   17760:	ldrd	r4, [sp]
   17764:	ldrd	r6, [sp, #8]
   17768:	ldrd	r8, [sp, #16]
   1776c:	ldr	sl, [sp, #24]
   17770:	add	sp, sp, #28
   17774:	pop	{pc}		; (ldr pc, [sp], #4)
   17778:	add	r3, r3, #1
   1777c:	lsl	r8, r3, #1
   17780:	lsl	r1, r3, #3
   17784:	ldr	r0, [r7, #8]
   17788:	bl	25930 <__assert_fail@plt+0x143d8>
   1778c:	cmp	r0, #0
   17790:	beq	177a8 <__assert_fail@plt+0x6250>
   17794:	str	r0, [r7, #8]
   17798:	str	r8, [r7, #4]
   1779c:	b	17748 <__assert_fail@plt+0x61f0>
   177a0:	mov	r9, #12
   177a4:	b	1775c <__assert_fail@plt+0x6204>
   177a8:	mov	r9, #12
   177ac:	b	1775c <__assert_fail@plt+0x6204>
   177b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   177b4:	strd	r6, [sp, #8]
   177b8:	str	lr, [sp, #16]
   177bc:	sub	sp, sp, #84	; 0x54
   177c0:	mov	r4, r0
   177c4:	ldr	r5, [r0, #36]	; 0x24
   177c8:	ldr	r3, [r0, #48]	; 0x30
   177cc:	cmp	r5, r3
   177d0:	movge	r5, r3
   177d4:	ldr	r7, [r0, #28]
   177d8:	cmp	r5, r7
   177dc:	ble	17924 <__assert_fail@plt+0x63cc>
   177e0:	mov	r6, #1
   177e4:	b	178c4 <__assert_fail@plt+0x636c>
   177e8:	ldr	r3, [r4, #80]	; 0x50
   177ec:	cmp	r3, #0
   177f0:	cmpgt	r2, #0
   177f4:	ble	1784c <__assert_fail@plt+0x62f4>
   177f8:	add	r0, sp, #16
   177fc:	mov	r1, #0
   17800:	ldr	r3, [r4]
   17804:	ldr	ip, [r4, #24]
   17808:	add	r3, r3, r7
   1780c:	add	r3, r3, r1
   17810:	ldrb	r3, [r3, ip]
   17814:	ldr	ip, [r4, #64]	; 0x40
   17818:	ldrb	ip, [ip, r3]
   1781c:	ldr	r3, [r4, #4]
   17820:	add	r3, r3, r7
   17824:	strb	ip, [r3, r1]
   17828:	strb	ip, [r0], #1
   1782c:	add	r1, r1, #1
   17830:	ldr	r3, [r4, #80]	; 0x50
   17834:	cmp	r2, r3
   17838:	movlt	r3, r2
   1783c:	cmp	r3, r1
   17840:	bgt	17800 <__assert_fail@plt+0x62a8>
   17844:	add	r1, sp, #16
   17848:	b	178ec <__assert_fail@plt+0x6394>
   1784c:	add	r1, sp, #16
   17850:	b	178ec <__assert_fail@plt+0x6394>
   17854:	ldr	r3, [r4]
   17858:	ldr	r2, [r4, #24]
   1785c:	add	r3, r3, r7
   17860:	ldrb	r3, [r3, r2]
   17864:	str	r3, [sp, #4]
   17868:	ldr	r2, [r4, #64]	; 0x40
   1786c:	cmp	r2, #0
   17870:	ldrbne	r3, [r2, r3]
   17874:	strne	r3, [sp, #4]
   17878:	ldrd	r2, [sp, #8]
   1787c:	strd	r2, [r4, #16]
   17880:	mov	r0, r6
   17884:	add	r3, r7, #1
   17888:	ldr	r2, [r4, #8]
   1788c:	ldr	r1, [sp, #4]
   17890:	str	r1, [r2, r7, lsl #2]
   17894:	add	r0, r7, r0
   17898:	cmp	r3, r0
   1789c:	bge	17940 <__assert_fail@plt+0x63e8>
   178a0:	mvn	r1, #0
   178a4:	ldr	r2, [r4, #8]
   178a8:	str	r1, [r2, r3, lsl #2]
   178ac:	add	r3, r3, #1
   178b0:	cmp	r3, r0
   178b4:	bne	178a4 <__assert_fail@plt+0x634c>
   178b8:	mov	r7, r0
   178bc:	cmp	r7, r5
   178c0:	bge	17924 <__assert_fail@plt+0x63cc>
   178c4:	sub	r2, r5, r7
   178c8:	ldrd	r0, [r4, #16]
   178cc:	strd	r0, [sp, #8]
   178d0:	ldr	r3, [r4, #64]	; 0x40
   178d4:	cmp	r3, #0
   178d8:	bne	177e8 <__assert_fail@plt+0x6290>
   178dc:	ldr	r1, [r4, #24]
   178e0:	add	r3, r7, r1
   178e4:	ldr	r1, [r4]
   178e8:	add	r1, r1, r3
   178ec:	add	r3, r4, #16
   178f0:	add	r0, sp, #4
   178f4:	bl	25d9c <__assert_fail@plt+0x14844>
   178f8:	sub	r3, r0, #1
   178fc:	cmn	r3, #3
   17900:	bhi	17854 <__assert_fail@plt+0x62fc>
   17904:	cmn	r0, #2
   17908:	bne	17884 <__assert_fail@plt+0x632c>
   1790c:	ldr	r2, [r4, #36]	; 0x24
   17910:	ldr	r3, [r4, #48]	; 0x30
   17914:	cmp	r2, r3
   17918:	bge	17854 <__assert_fail@plt+0x62fc>
   1791c:	ldrd	r2, [sp, #8]
   17920:	strd	r2, [r4, #16]
   17924:	str	r7, [r4, #28]
   17928:	str	r7, [r4, #32]
   1792c:	add	sp, sp, #84	; 0x54
   17930:	ldrd	r4, [sp]
   17934:	ldrd	r6, [sp, #8]
   17938:	add	sp, sp, #16
   1793c:	pop	{pc}		; (ldr pc, [sp], #4)
   17940:	mov	r7, r3
   17944:	b	178bc <__assert_fail@plt+0x6364>
   17948:	ldr	r3, [r1, #4]
   1794c:	cmp	r3, #0
   17950:	beq	17b0c <__assert_fail@plt+0x65b4>
   17954:	ldr	ip, [r2, #4]
   17958:	cmp	ip, #0
   1795c:	beq	17b08 <__assert_fail@plt+0x65b0>
   17960:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17964:	strd	r6, [sp, #8]
   17968:	str	r8, [sp, #16]
   1796c:	str	lr, [sp, #20]
   17970:	mov	r6, r2
   17974:	mov	r5, r1
   17978:	mov	r7, r0
   1797c:	add	r3, r3, ip
   17980:	ldr	r4, [r0]
   17984:	ldr	r2, [r0, #4]
   17988:	add	r2, r3, r2
   1798c:	cmp	r2, r4
   17990:	bgt	179b8 <__assert_fail@plt+0x6460>
   17994:	ldr	r3, [r7, #4]
   17998:	ldr	r4, [r5, #4]
   1799c:	ldr	r2, [r6, #4]
   179a0:	add	r1, r3, r4
   179a4:	add	r1, r1, r2
   179a8:	sub	r4, r4, #1
   179ac:	sub	r2, r2, #1
   179b0:	sub	r3, r3, #1
   179b4:	b	17a44 <__assert_fail@plt+0x64ec>
   179b8:	add	r4, r3, r4
   179bc:	lsl	r1, r4, #2
   179c0:	ldr	r0, [r0, #8]
   179c4:	bl	25930 <__assert_fail@plt+0x143d8>
   179c8:	cmp	r0, #0
   179cc:	beq	17b14 <__assert_fail@plt+0x65bc>
   179d0:	str	r0, [r7, #8]
   179d4:	str	r4, [r7]
   179d8:	b	17994 <__assert_fail@plt+0x643c>
   179dc:	cmp	r3, #0
   179e0:	blt	17a1c <__assert_fail@plt+0x64c4>
   179e4:	ldr	r8, [r7, #8]
   179e8:	add	lr, r8, r3, lsl #2
   179ec:	ldr	r0, [r8, r3, lsl #2]
   179f0:	cmp	ip, r0
   179f4:	bge	17a10 <__assert_fail@plt+0x64b8>
   179f8:	sub	r3, r3, #1
   179fc:	cmn	r3, #1
   17a00:	beq	17a1c <__assert_fail@plt+0x64c4>
   17a04:	ldr	r0, [lr, #-4]!
   17a08:	cmp	ip, r0
   17a0c:	blt	179f8 <__assert_fail@plt+0x64a0>
   17a10:	ldr	r0, [r8, r3, lsl #2]
   17a14:	cmp	ip, r0
   17a18:	beq	17a28 <__assert_fail@plt+0x64d0>
   17a1c:	sub	r1, r1, #1
   17a20:	ldr	r0, [r7, #8]
   17a24:	str	ip, [r0, r1, lsl #2]
   17a28:	subs	r4, r4, #1
   17a2c:	bmi	17a6c <__assert_fail@plt+0x6514>
   17a30:	subs	r2, r2, #1
   17a34:	bpl	17a44 <__assert_fail@plt+0x64ec>
   17a38:	b	17a6c <__assert_fail@plt+0x6514>
   17a3c:	subs	r4, r4, #1
   17a40:	bmi	17a6c <__assert_fail@plt+0x6514>
   17a44:	ldr	r0, [r5, #8]
   17a48:	ldr	ip, [r0, r4, lsl #2]
   17a4c:	ldr	r0, [r6, #8]
   17a50:	ldr	r0, [r0, r2, lsl #2]
   17a54:	cmp	ip, r0
   17a58:	beq	179dc <__assert_fail@plt+0x6484>
   17a5c:	cmp	ip, r0
   17a60:	bge	17a3c <__assert_fail@plt+0x64e4>
   17a64:	subs	r2, r2, #1
   17a68:	bpl	17a44 <__assert_fail@plt+0x64ec>
   17a6c:	ldr	r3, [r7, #4]
   17a70:	sub	r0, r3, #1
   17a74:	ldr	r2, [r5, #4]
   17a78:	add	r2, r3, r2
   17a7c:	ldr	ip, [r6, #4]
   17a80:	add	r2, r2, ip
   17a84:	sub	r4, r2, #1
   17a88:	sub	r2, r2, r1
   17a8c:	add	r3, r3, r2
   17a90:	str	r3, [r7, #4]
   17a94:	cmp	r0, #0
   17a98:	cmpge	r2, #0
   17a9c:	bgt	17adc <__assert_fail@plt+0x6584>
   17aa0:	ldr	r0, [r7, #8]
   17aa4:	lsl	r2, r2, #2
   17aa8:	add	r1, r0, r1, lsl #2
   17aac:	bl	11264 <memcpy@plt>
   17ab0:	mov	r3, #0
   17ab4:	mov	r0, r3
   17ab8:	ldrd	r4, [sp]
   17abc:	ldrd	r6, [sp, #8]
   17ac0:	ldr	r8, [sp, #16]
   17ac4:	add	sp, sp, #20
   17ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   17acc:	add	lr, r0, r2
   17ad0:	str	ip, [r3, lr, lsl #2]
   17ad4:	subs	r0, r0, #1
   17ad8:	bmi	17aa0 <__assert_fail@plt+0x6548>
   17adc:	ldr	r3, [r7, #8]
   17ae0:	ldr	lr, [r3, r4, lsl #2]
   17ae4:	ldr	ip, [r3, r0, lsl #2]
   17ae8:	cmp	lr, ip
   17aec:	ble	17acc <__assert_fail@plt+0x6574>
   17af0:	sub	r4, r4, #1
   17af4:	add	ip, r0, r2
   17af8:	str	lr, [r3, ip, lsl #2]
   17afc:	subs	r2, r2, #1
   17b00:	bne	17adc <__assert_fail@plt+0x6584>
   17b04:	b	17aa0 <__assert_fail@plt+0x6548>
   17b08:	mov	r3, ip
   17b0c:	mov	r0, r3
   17b10:	bx	lr
   17b14:	mov	r3, #12
   17b18:	b	17ab4 <__assert_fail@plt+0x655c>
   17b1c:	ldr	r3, [r1, #4]
   17b20:	str	r3, [r0, #4]
   17b24:	cmp	r3, #0
   17b28:	ble	17b8c <__assert_fail@plt+0x6634>
   17b2c:	strd	r4, [sp, #-16]!
   17b30:	str	r6, [sp, #8]
   17b34:	str	lr, [sp, #12]
   17b38:	mov	r5, r1
   17b3c:	mov	r4, r0
   17b40:	str	r3, [r0]
   17b44:	lsl	r0, r3, #2
   17b48:	bl	258f4 <__assert_fail@plt+0x1439c>
   17b4c:	str	r0, [r4, #8]
   17b50:	cmp	r0, #0
   17b54:	moveq	r3, #0
   17b58:	streq	r3, [r4, #4]
   17b5c:	streq	r3, [r4]
   17b60:	moveq	r0, #12
   17b64:	beq	17b7c <__assert_fail@plt+0x6624>
   17b68:	ldr	r2, [r5, #4]
   17b6c:	lsl	r2, r2, #2
   17b70:	ldr	r1, [r5, #8]
   17b74:	bl	11264 <memcpy@plt>
   17b78:	mov	r0, #0
   17b7c:	ldrd	r4, [sp]
   17b80:	ldr	r6, [sp, #8]
   17b84:	add	sp, sp, #12
   17b88:	pop	{pc}		; (ldr pc, [sp], #4)
   17b8c:	mov	r3, #0
   17b90:	str	r3, [r0]
   17b94:	str	r3, [r0, #4]
   17b98:	str	r3, [r0, #8]
   17b9c:	mov	r0, r3
   17ba0:	bx	lr
   17ba4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ba8:	strd	r6, [sp, #8]
   17bac:	strd	r8, [sp, #16]
   17bb0:	str	sl, [sp, #24]
   17bb4:	str	lr, [sp, #28]
   17bb8:	mov	r5, r0
   17bbc:	mov	r4, r2
   17bc0:	subs	r6, r1, #0
   17bc4:	beq	17be0 <__assert_fail@plt+0x6688>
   17bc8:	ldr	r0, [r6, #4]
   17bcc:	cmp	r2, #0
   17bd0:	cmpne	r0, #0
   17bd4:	bgt	17c1c <__assert_fail@plt+0x66c4>
   17bd8:	cmp	r0, #0
   17bdc:	bgt	17c28 <__assert_fail@plt+0x66d0>
   17be0:	cmp	r4, #0
   17be4:	beq	17bf4 <__assert_fail@plt+0x669c>
   17be8:	ldr	r3, [r4, #4]
   17bec:	cmp	r3, #0
   17bf0:	bgt	17c64 <__assert_fail@plt+0x670c>
   17bf4:	mov	r0, #0
   17bf8:	str	r0, [r5]
   17bfc:	str	r0, [r5, #4]
   17c00:	str	r0, [r5, #8]
   17c04:	ldrd	r4, [sp]
   17c08:	ldrd	r6, [sp, #8]
   17c0c:	ldrd	r8, [sp, #16]
   17c10:	ldr	sl, [sp, #24]
   17c14:	add	sp, sp, #28
   17c18:	pop	{pc}		; (ldr pc, [sp], #4)
   17c1c:	ldr	r3, [r2, #4]
   17c20:	cmp	r3, #0
   17c24:	bgt	17c38 <__assert_fail@plt+0x66e0>
   17c28:	mov	r1, r6
   17c2c:	mov	r0, r5
   17c30:	bl	17b1c <__assert_fail@plt+0x65c4>
   17c34:	b	17c04 <__assert_fail@plt+0x66ac>
   17c38:	add	r0, r0, r3
   17c3c:	str	r0, [r5]
   17c40:	lsl	r0, r0, #2
   17c44:	bl	258f4 <__assert_fail@plt+0x1439c>
   17c48:	str	r0, [r5, #8]
   17c4c:	cmp	r0, #0
   17c50:	beq	17d40 <__assert_fail@plt+0x67e8>
   17c54:	mov	r3, #0
   17c58:	mov	r8, r3
   17c5c:	mov	r7, r3
   17c60:	b	17c84 <__assert_fail@plt+0x672c>
   17c64:	mov	r1, r4
   17c68:	mov	r0, r5
   17c6c:	bl	17b1c <__assert_fail@plt+0x65c4>
   17c70:	b	17c04 <__assert_fail@plt+0x66ac>
   17c74:	add	r8, r8, #1
   17c78:	ldr	r2, [r5, #8]
   17c7c:	str	r1, [r2, r3, lsl #2]
   17c80:	add	r3, r3, #1
   17c84:	mov	r9, r3
   17c88:	ldr	r2, [r6, #4]
   17c8c:	cmp	r2, r7
   17c90:	ble	17cfc <__assert_fail@plt+0x67a4>
   17c94:	ldr	r1, [r4, #4]
   17c98:	cmp	r1, r8
   17c9c:	ble	17cd0 <__assert_fail@plt+0x6778>
   17ca0:	ldr	r2, [r6, #8]
   17ca4:	ldr	r2, [r2, r7, lsl #2]
   17ca8:	ldr	r1, [r4, #8]
   17cac:	ldr	r1, [r1, r8, lsl #2]
   17cb0:	cmp	r2, r1
   17cb4:	bgt	17c74 <__assert_fail@plt+0x671c>
   17cb8:	cmp	r2, r1
   17cbc:	addeq	r8, r8, #1
   17cc0:	add	r7, r7, #1
   17cc4:	ldr	r1, [r5, #8]
   17cc8:	str	r2, [r1, r3, lsl #2]
   17ccc:	b	17c80 <__assert_fail@plt+0x6728>
   17cd0:	ldr	r0, [r5, #8]
   17cd4:	sub	r2, r2, r7
   17cd8:	ldr	r1, [r6, #8]
   17cdc:	lsl	r2, r2, #2
   17ce0:	add	r1, r1, r7, lsl #2
   17ce4:	add	r0, r0, r3, lsl #2
   17ce8:	bl	11264 <memcpy@plt>
   17cec:	ldr	r3, [r6, #4]
   17cf0:	sub	r7, r3, r7
   17cf4:	add	r9, r9, r7
   17cf8:	b	17d08 <__assert_fail@plt+0x67b0>
   17cfc:	ldr	r2, [r4, #4]
   17d00:	cmp	r2, r8
   17d04:	bgt	17d14 <__assert_fail@plt+0x67bc>
   17d08:	str	r9, [r5, #4]
   17d0c:	mov	r0, #0
   17d10:	b	17c04 <__assert_fail@plt+0x66ac>
   17d14:	ldr	r0, [r5, #8]
   17d18:	sub	r2, r2, r8
   17d1c:	ldr	r1, [r4, #8]
   17d20:	lsl	r2, r2, #2
   17d24:	add	r1, r1, r8, lsl #2
   17d28:	add	r0, r0, r3, lsl #2
   17d2c:	bl	11264 <memcpy@plt>
   17d30:	ldr	r3, [r4, #4]
   17d34:	sub	r8, r3, r8
   17d38:	add	r9, r9, r8
   17d3c:	b	17d08 <__assert_fail@plt+0x67b0>
   17d40:	mov	r0, #12
   17d44:	b	17c04 <__assert_fail@plt+0x66ac>
   17d48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17d4c:	strd	r6, [sp, #8]
   17d50:	strd	r8, [sp, #16]
   17d54:	strd	sl, [sp, #24]
   17d58:	str	lr, [sp, #32]
   17d5c:	sub	sp, sp, #92	; 0x5c
   17d60:	mov	r5, r0
   17d64:	ldr	r4, [r0, #28]
   17d68:	ldr	r6, [r0, #36]	; 0x24
   17d6c:	ldr	r3, [r0, #48]	; 0x30
   17d70:	cmp	r6, r3
   17d74:	movge	r6, r3
   17d78:	ldrb	r3, [r0, #74]	; 0x4a
   17d7c:	cmp	r3, #0
   17d80:	bne	17d90 <__assert_fail@plt+0x6838>
   17d84:	ldr	r3, [r0, #64]	; 0x40
   17d88:	cmp	r3, #0
   17d8c:	beq	17dc4 <__assert_fail@plt+0x686c>
   17d90:	ldr	r7, [r5, #32]
   17d94:	cmp	r4, r6
   17d98:	blt	17ef0 <__assert_fail@plt+0x6998>
   17d9c:	str	r4, [r5, #28]
   17da0:	str	r7, [r5, #32]
   17da4:	mov	r0, #0
   17da8:	add	sp, sp, #92	; 0x5c
   17dac:	ldrd	r4, [sp]
   17db0:	ldrd	r6, [sp, #8]
   17db4:	ldrd	r8, [sp, #16]
   17db8:	ldrd	sl, [sp, #24]
   17dbc:	add	sp, sp, #32
   17dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17dc4:	ldrb	r3, [r0, #76]	; 0x4c
   17dc8:	cmp	r3, #0
   17dcc:	bne	17d90 <__assert_fail@plt+0x6838>
   17dd0:	cmp	r4, r6
   17dd4:	bge	18050 <__assert_fail@plt+0x6af8>
   17dd8:	add	r3, r0, #16
   17ddc:	str	r3, [sp, #4]
   17de0:	mvn	r7, #0
   17de4:	b	17e9c <__assert_fail@plt+0x6944>
   17de8:	ldr	r0, [sp, #4]
   17dec:	ldrd	r2, [r0]
   17df0:	strd	r2, [sp, #80]	; 0x50
   17df4:	mov	r9, r4
   17df8:	add	r1, r8, r4
   17dfc:	mov	r3, r0
   17e00:	sub	r2, r6, r4
   17e04:	add	r1, sl, r1
   17e08:	add	r0, sp, #12
   17e0c:	bl	25d9c <__assert_fail@plt+0x14844>
   17e10:	mov	r8, r0
   17e14:	sub	r3, r0, #1
   17e18:	cmn	r3, #4
   17e1c:	bhi	17fec <__assert_fail@plt+0x6a94>
   17e20:	ldr	sl, [sp, #12]
   17e24:	mov	r0, sl
   17e28:	bl	1151c <towupper@plt>
   17e2c:	mov	fp, r0
   17e30:	cmp	sl, r0
   17e34:	beq	17fc8 <__assert_fail@plt+0x6a70>
   17e38:	add	r2, sp, #80	; 0x50
   17e3c:	mov	r1, r0
   17e40:	add	r0, sp, #16
   17e44:	bl	111e0 <wcrtomb@plt>
   17e48:	cmp	r8, r0
   17e4c:	bne	17eec <__assert_fail@plt+0x6994>
   17e50:	ldr	r0, [r5, #4]
   17e54:	mov	r2, r8
   17e58:	add	r1, sp, #16
   17e5c:	add	r0, r0, r4
   17e60:	bl	11264 <memcpy@plt>
   17e64:	add	r4, r4, #1
   17e68:	ldr	r3, [r5, #8]
   17e6c:	str	fp, [r3, r9, lsl #2]
   17e70:	add	r9, r9, r8
   17e74:	cmp	r4, r9
   17e78:	bge	17e94 <__assert_fail@plt+0x693c>
   17e7c:	ldr	r3, [r5, #8]
   17e80:	str	r7, [r3, r4, lsl #2]
   17e84:	add	r4, r4, #1
   17e88:	cmp	r9, r4
   17e8c:	bne	17e7c <__assert_fail@plt+0x6924>
   17e90:	mov	r4, r9
   17e94:	cmp	r6, r4
   17e98:	ble	18050 <__assert_fail@plt+0x6af8>
   17e9c:	ldr	sl, [r5]
   17ea0:	ldr	r8, [r5, #24]
   17ea4:	add	r3, sl, r8
   17ea8:	ldrb	fp, [r3, r4]
   17eac:	bics	r3, fp, #127	; 0x7f
   17eb0:	bne	17de8 <__assert_fail@plt+0x6890>
   17eb4:	ldr	r0, [sp, #4]
   17eb8:	bl	11294 <mbsinit@plt>
   17ebc:	cmp	r0, #0
   17ec0:	beq	17de8 <__assert_fail@plt+0x6890>
   17ec4:	mov	r0, fp
   17ec8:	bl	1151c <towupper@plt>
   17ecc:	bics	r3, r0, #127	; 0x7f
   17ed0:	bne	17de8 <__assert_fail@plt+0x6890>
   17ed4:	ldr	r3, [r5, #4]
   17ed8:	strb	r0, [r3, r4]
   17edc:	ldr	r3, [r5, #8]
   17ee0:	str	r0, [r3, r4, lsl #2]
   17ee4:	add	r4, r4, #1
   17ee8:	b	17e94 <__assert_fail@plt+0x693c>
   17eec:	mov	r7, r4
   17ef0:	sub	r2, r6, r4
   17ef4:	ldrd	r0, [r5, #16]
   17ef8:	strd	r0, [sp, #80]	; 0x50
   17efc:	ldr	r3, [r5, #64]	; 0x40
   17f00:	cmp	r3, #0
   17f04:	bne	18060 <__assert_fail@plt+0x6b08>
   17f08:	ldr	r3, [r5, #24]
   17f0c:	add	r3, r7, r3
   17f10:	ldr	r1, [r5]
   17f14:	add	r3, r1, r3
   17f18:	str	r3, [sp, #4]
   17f1c:	add	r3, r5, #16
   17f20:	ldr	r1, [sp, #4]
   17f24:	add	r0, sp, #12
   17f28:	bl	25d9c <__assert_fail@plt+0x14844>
   17f2c:	mov	r8, r0
   17f30:	sub	fp, r0, #1
   17f34:	cmn	fp, #4
   17f38:	bhi	18248 <__assert_fail@plt+0x6cf0>
   17f3c:	ldr	sl, [sp, #12]
   17f40:	mov	r0, sl
   17f44:	bl	1151c <towupper@plt>
   17f48:	mov	r9, r0
   17f4c:	cmp	sl, r0
   17f50:	beq	18208 <__assert_fail@plt+0x6cb0>
   17f54:	add	r2, sp, #80	; 0x50
   17f58:	mov	r1, r0
   17f5c:	add	r0, sp, #16
   17f60:	bl	111e0 <wcrtomb@plt>
   17f64:	mov	sl, r0
   17f68:	cmp	r8, r0
   17f6c:	bne	180c0 <__assert_fail@plt+0x6b68>
   17f70:	ldr	r0, [r5, #4]
   17f74:	mov	r2, sl
   17f78:	add	r1, sp, #16
   17f7c:	add	r0, r0, r4
   17f80:	bl	11264 <memcpy@plt>
   17f84:	ldrb	r3, [r5, #76]	; 0x4c
   17f88:	cmp	r3, #0
   17f8c:	bne	18220 <__assert_fail@plt+0x6cc8>
   17f90:	add	r7, r7, r8
   17f94:	add	r3, r4, #1
   17f98:	ldr	r2, [r5, #8]
   17f9c:	str	r9, [r2, r4, lsl #2]
   17fa0:	add	r4, r4, r8
   17fa4:	cmp	r3, r4
   17fa8:	bge	182c4 <__assert_fail@plt+0x6d6c>
   17fac:	mvn	r1, #0
   17fb0:	ldr	r2, [r5, #8]
   17fb4:	str	r1, [r2, r3, lsl #2]
   17fb8:	add	r3, r3, #1
   17fbc:	cmp	r4, r3
   17fc0:	bne	17fb0 <__assert_fail@plt+0x6a58>
   17fc4:	b	17d94 <__assert_fail@plt+0x683c>
   17fc8:	ldr	r0, [r5, #4]
   17fcc:	ldr	r3, [r5, #24]
   17fd0:	add	r3, r4, r3
   17fd4:	ldr	r1, [r5]
   17fd8:	mov	r2, r8
   17fdc:	add	r1, r1, r3
   17fe0:	add	r0, r0, r4
   17fe4:	bl	11264 <memcpy@plt>
   17fe8:	b	17e64 <__assert_fail@plt+0x690c>
   17fec:	cmn	r3, #3
   17ff0:	bhi	1801c <__assert_fail@plt+0x6ac4>
   17ff4:	ldr	r2, [r5, #36]	; 0x24
   17ff8:	ldr	r3, [r5, #48]	; 0x30
   17ffc:	cmp	r2, r3
   18000:	blt	18048 <__assert_fail@plt+0x6af0>
   18004:	ldr	r3, [r5, #4]
   18008:	strb	fp, [r3, r4]
   1800c:	add	r4, r4, #1
   18010:	ldr	r3, [r5, #8]
   18014:	str	fp, [r3, r9, lsl #2]
   18018:	b	17e94 <__assert_fail@plt+0x693c>
   1801c:	ldr	r3, [r5, #4]
   18020:	strb	fp, [r3, r4]
   18024:	add	r4, r4, #1
   18028:	ldr	r3, [r5, #8]
   1802c:	str	fp, [r3, r9, lsl #2]
   18030:	cmn	r0, #1
   18034:	bne	17e94 <__assert_fail@plt+0x693c>
   18038:	ldrd	r2, [sp, #80]	; 0x50
   1803c:	ldr	r1, [sp, #4]
   18040:	strd	r2, [r1]
   18044:	b	17e94 <__assert_fail@plt+0x693c>
   18048:	ldrd	r2, [sp, #80]	; 0x50
   1804c:	strd	r2, [r5, #16]
   18050:	str	r4, [r5, #28]
   18054:	str	r4, [r5, #32]
   18058:	mov	r0, #0
   1805c:	b	17da8 <__assert_fail@plt+0x6850>
   18060:	ldr	lr, [r5, #80]	; 0x50
   18064:	cmp	r2, #0
   18068:	cmpgt	lr, #0
   1806c:	ble	180b4 <__assert_fail@plt+0x6b5c>
   18070:	ldr	r8, [r5]
   18074:	ldr	ip, [r5, #24]
   18078:	add	ip, r7, ip
   1807c:	add	r1, r8, ip
   18080:	add	r0, sp, #16
   18084:	cmp	lr, r2
   18088:	movge	lr, r2
   1808c:	mov	r8, r1
   18090:	ldrb	ip, [r1], #1
   18094:	ldrb	ip, [r3, ip]
   18098:	strb	ip, [r0], #1
   1809c:	sub	ip, r1, r8
   180a0:	cmp	lr, ip
   180a4:	bgt	18090 <__assert_fail@plt+0x6b38>
   180a8:	add	r3, sp, #16
   180ac:	str	r3, [sp, #4]
   180b0:	b	17f1c <__assert_fail@plt+0x69c4>
   180b4:	add	r3, sp, #16
   180b8:	str	r3, [sp, #4]
   180bc:	b	17f1c <__assert_fail@plt+0x69c4>
   180c0:	cmn	r0, #1
   180c4:	beq	181f0 <__assert_fail@plt+0x6c98>
   180c8:	mov	r6, r4
   180cc:	add	r3, r4, r0
   180d0:	str	r3, [sp, #4]
   180d4:	ldr	r0, [r5, #36]	; 0x24
   180d8:	cmp	r3, r0
   180dc:	bls	180ec <__assert_fail@plt+0x6b94>
   180e0:	ldrd	r2, [sp, #80]	; 0x50
   180e4:	strd	r2, [r5, #16]
   180e8:	b	17d9c <__assert_fail@plt+0x6844>
   180ec:	ldr	r3, [r5, #12]
   180f0:	cmp	r3, #0
   180f4:	beq	181d4 <__assert_fail@plt+0x6c7c>
   180f8:	ldrb	r3, [r5, #76]	; 0x4c
   180fc:	cmp	r3, #0
   18100:	bne	18128 <__assert_fail@plt+0x6bd0>
   18104:	cmp	r6, #0
   18108:	beq	18120 <__assert_fail@plt+0x6bc8>
   1810c:	ldr	r2, [r5, #12]
   18110:	str	r3, [r2, r3, lsl #2]
   18114:	add	r3, r3, #1
   18118:	cmp	r6, r3
   1811c:	bne	1810c <__assert_fail@plt+0x6bb4>
   18120:	mov	r3, #1
   18124:	strb	r3, [r5, #76]	; 0x4c
   18128:	ldr	r0, [r5, #4]
   1812c:	mov	r2, sl
   18130:	add	r1, sp, #16
   18134:	add	r0, r0, r6
   18138:	bl	11264 <memcpy@plt>
   1813c:	lsl	r3, r6, #2
   18140:	ldr	r2, [r5, #8]
   18144:	str	r9, [r2, r6, lsl #2]
   18148:	ldr	r2, [r5, #12]
   1814c:	str	r7, [r2, r6, lsl #2]
   18150:	cmp	sl, #1
   18154:	bls	18194 <__assert_fail@plt+0x6c3c>
   18158:	add	r3, r3, #4
   1815c:	mov	r2, #1
   18160:	mvn	r0, #0
   18164:	cmp	r2, r8
   18168:	movcc	r1, r2
   1816c:	movcs	r1, fp
   18170:	ldr	ip, [r5, #12]
   18174:	add	r1, r7, r1
   18178:	str	r1, [ip, r3]
   1817c:	ldr	r1, [r5, #8]
   18180:	str	r0, [r1, r3]
   18184:	add	r2, r2, #1
   18188:	add	r3, r3, #4
   1818c:	cmp	r2, sl
   18190:	bne	18164 <__assert_fail@plt+0x6c0c>
   18194:	sub	sl, sl, r8
   18198:	ldr	r6, [r5, #48]	; 0x30
   1819c:	add	r6, sl, r6
   181a0:	str	r6, [r5, #48]	; 0x30
   181a4:	ldr	r3, [r5, #52]	; 0x34
   181a8:	cmp	r3, r7
   181ac:	ble	181bc <__assert_fail@plt+0x6c64>
   181b0:	ldr	r3, [r5, #56]	; 0x38
   181b4:	add	sl, r3, sl
   181b8:	str	sl, [r5, #56]	; 0x38
   181bc:	ldr	r3, [r5, #36]	; 0x24
   181c0:	cmp	r6, r3
   181c4:	movge	r6, r3
   181c8:	ldr	r4, [sp, #4]
   181cc:	add	r7, r7, r8
   181d0:	b	17d94 <__assert_fail@plt+0x683c>
   181d4:	lsl	r0, r0, #2
   181d8:	bl	258f4 <__assert_fail@plt+0x1439c>
   181dc:	str	r0, [r5, #12]
   181e0:	cmp	r0, #0
   181e4:	moveq	r0, #12
   181e8:	bne	180f8 <__assert_fail@plt+0x6ba0>
   181ec:	b	17da8 <__assert_fail@plt+0x6850>
   181f0:	ldr	r0, [r5, #4]
   181f4:	mov	r2, r8
   181f8:	ldr	r1, [sp, #4]
   181fc:	add	r0, r0, r4
   18200:	bl	11264 <memcpy@plt>
   18204:	b	17f84 <__assert_fail@plt+0x6a2c>
   18208:	ldr	r0, [r5, #4]
   1820c:	mov	r2, r8
   18210:	ldr	r1, [sp, #4]
   18214:	add	r0, r0, r4
   18218:	bl	11264 <memcpy@plt>
   1821c:	b	17f84 <__assert_fail@plt+0x6a2c>
   18220:	lsl	r2, r4, #2
   18224:	mov	r3, r7
   18228:	add	r0, r8, r7
   1822c:	ldr	r1, [r5, #12]
   18230:	str	r3, [r1, r2]
   18234:	add	r2, r2, #4
   18238:	add	r3, r3, #1
   1823c:	cmp	r3, r0
   18240:	bne	1822c <__assert_fail@plt+0x6cd4>
   18244:	b	17f90 <__assert_fail@plt+0x6a38>
   18248:	cmn	fp, #3
   1824c:	bhi	18260 <__assert_fail@plt+0x6d08>
   18250:	ldr	r2, [r5, #36]	; 0x24
   18254:	ldr	r3, [r5, #48]	; 0x30
   18258:	cmp	r2, r3
   1825c:	blt	182b8 <__assert_fail@plt+0x6d60>
   18260:	ldr	r3, [r5]
   18264:	ldr	r2, [r5, #24]
   18268:	add	r3, r3, r7
   1826c:	ldrb	r3, [r3, r2]
   18270:	ldr	r2, [r5, #64]	; 0x40
   18274:	cmp	r2, #0
   18278:	ldrbne	r3, [r2, r3]
   1827c:	mov	r1, r4
   18280:	ldr	r2, [r5, #4]
   18284:	strb	r3, [r2, r4]
   18288:	ldrb	r2, [r5, #76]	; 0x4c
   1828c:	cmp	r2, #0
   18290:	ldrne	r2, [r5, #12]
   18294:	strne	r7, [r2, r4, lsl #2]
   18298:	add	r7, r7, #1
   1829c:	add	r4, r4, #1
   182a0:	ldr	r2, [r5, #8]
   182a4:	str	r3, [r2, r1, lsl #2]
   182a8:	cmn	r8, #1
   182ac:	ldrdeq	r2, [sp, #80]	; 0x50
   182b0:	strdeq	r2, [r5, #16]
   182b4:	b	17d94 <__assert_fail@plt+0x683c>
   182b8:	ldrd	r2, [sp, #80]	; 0x50
   182bc:	strd	r2, [r5, #16]
   182c0:	b	17d9c <__assert_fail@plt+0x6844>
   182c4:	mov	r4, r3
   182c8:	b	17d94 <__assert_fail@plt+0x683c>
   182cc:	strd	r4, [sp, #-16]!
   182d0:	str	r6, [sp, #8]
   182d4:	str	lr, [sp, #12]
   182d8:	mov	r5, r0
   182dc:	ldr	r6, [r0, #36]	; 0x24
   182e0:	ldr	r3, [r0, #48]	; 0x30
   182e4:	cmp	r6, r3
   182e8:	movge	r6, r3
   182ec:	ldr	r4, [r0, #28]
   182f0:	cmp	r6, r4
   182f4:	ble	1834c <__assert_fail@plt+0x6df4>
   182f8:	bl	113d8 <__ctype_toupper_loc@plt>
   182fc:	ldr	r3, [r5]
   18300:	ldr	r2, [r5, #24]
   18304:	add	r3, r3, r4
   18308:	ldrb	r3, [r3, r2]
   1830c:	ldr	r2, [r5, #64]	; 0x40
   18310:	cmp	r2, #0
   18314:	ldrbne	r3, [r2, r3]
   18318:	ldr	r2, [r5, #4]
   1831c:	ldr	r1, [r0]
   18320:	ldr	r3, [r1, r3, lsl #2]
   18324:	strb	r3, [r2, r4]
   18328:	add	r4, r4, #1
   1832c:	cmp	r6, r4
   18330:	bne	182fc <__assert_fail@plt+0x6da4>
   18334:	str	r6, [r5, #28]
   18338:	str	r6, [r5, #32]
   1833c:	ldrd	r4, [sp]
   18340:	ldr	r6, [sp, #8]
   18344:	add	sp, sp, #12
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	mov	r6, r4
   18350:	b	18334 <__assert_fail@plt+0x6ddc>
   18354:	strd	r4, [sp, #-16]!
   18358:	str	r6, [sp, #8]
   1835c:	str	lr, [sp, #12]
   18360:	ldr	r3, [r0, #36]	; 0x24
   18364:	cmn	r3, #-536870910	; 0xe0000002
   18368:	bhi	18430 <__assert_fail@plt+0x6ed8>
   1836c:	mov	r4, r0
   18370:	lsl	r3, r3, #1
   18374:	ldr	r2, [r0, #48]	; 0x30
   18378:	cmp	r3, r2
   1837c:	movge	r3, r2
   18380:	cmp	r3, r1
   18384:	movge	r1, r3
   18388:	bl	170e4 <__assert_fail@plt+0x5b8c>
   1838c:	subs	r5, r0, #0
   18390:	bne	183e0 <__assert_fail@plt+0x6e88>
   18394:	ldr	r0, [r4, #100]	; 0x64
   18398:	cmp	r0, #0
   1839c:	beq	183bc <__assert_fail@plt+0x6e64>
   183a0:	ldr	r1, [r4, #36]	; 0x24
   183a4:	add	r1, r1, #1
   183a8:	lsl	r1, r1, #2
   183ac:	bl	25930 <__assert_fail@plt+0x143d8>
   183b0:	cmp	r0, #0
   183b4:	beq	18438 <__assert_fail@plt+0x6ee0>
   183b8:	str	r0, [r4, #100]	; 0x64
   183bc:	ldrb	r3, [r4, #72]	; 0x48
   183c0:	cmp	r3, #0
   183c4:	beq	18400 <__assert_fail@plt+0x6ea8>
   183c8:	ldr	r3, [r4, #80]	; 0x50
   183cc:	cmp	r3, #1
   183d0:	ble	183f4 <__assert_fail@plt+0x6e9c>
   183d4:	mov	r0, r4
   183d8:	bl	17d48 <__assert_fail@plt+0x67f0>
   183dc:	mov	r5, r0
   183e0:	mov	r0, r5
   183e4:	ldrd	r4, [sp]
   183e8:	ldr	r6, [sp, #8]
   183ec:	add	sp, sp, #12
   183f0:	pop	{pc}		; (ldr pc, [sp], #4)
   183f4:	mov	r0, r4
   183f8:	bl	182cc <__assert_fail@plt+0x6d74>
   183fc:	b	183e0 <__assert_fail@plt+0x6e88>
   18400:	ldr	r3, [r4, #80]	; 0x50
   18404:	cmp	r3, #1
   18408:	bgt	18424 <__assert_fail@plt+0x6ecc>
   1840c:	ldr	r3, [r4, #64]	; 0x40
   18410:	cmp	r3, #0
   18414:	beq	183e0 <__assert_fail@plt+0x6e88>
   18418:	mov	r0, r4
   1841c:	bl	1646c <__assert_fail@plt+0x4f14>
   18420:	b	183e0 <__assert_fail@plt+0x6e88>
   18424:	mov	r0, r4
   18428:	bl	177b0 <__assert_fail@plt+0x6258>
   1842c:	b	183e0 <__assert_fail@plt+0x6e88>
   18430:	mov	r5, #12
   18434:	b	183e0 <__assert_fail@plt+0x6e88>
   18438:	mov	r5, #12
   1843c:	b	183e0 <__assert_fail@plt+0x6e88>
   18440:	ldr	r3, [r1, #40]	; 0x28
   18444:	ldr	ip, [r1, #56]	; 0x38
   18448:	cmp	ip, r3
   1844c:	ble	186e4 <__assert_fail@plt+0x718c>
   18450:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18454:	strd	r6, [sp, #8]
   18458:	str	r8, [sp, #16]
   1845c:	str	lr, [sp, #20]
   18460:	sub	sp, sp, #8
   18464:	ldr	ip, [r1, #4]
   18468:	ldrb	r6, [ip, r3]
   1846c:	strb	r6, [r0]
   18470:	ldrb	r3, [r0, #6]
   18474:	and	r3, r3, #191	; 0xbf
   18478:	bfc	r3, #5, #1
   1847c:	strb	r3, [r0, #6]
   18480:	ldr	r3, [r1, #80]	; 0x50
   18484:	cmp	r3, #1
   18488:	ble	184ac <__assert_fail@plt+0x6f54>
   1848c:	ldr	ip, [r1, #40]	; 0x28
   18490:	ldr	lr, [r1, #28]
   18494:	cmp	ip, lr
   18498:	beq	184ac <__assert_fail@plt+0x6f54>
   1849c:	ldr	lr, [r1, #8]
   184a0:	ldr	ip, [lr, ip, lsl #2]
   184a4:	cmn	ip, #1
   184a8:	beq	186f4 <__assert_fail@plt+0x719c>
   184ac:	mov	r7, r2
   184b0:	mov	r4, r1
   184b4:	mov	r5, r0
   184b8:	cmp	r6, #92	; 0x5c
   184bc:	beq	18710 <__assert_fail@plt+0x71b8>
   184c0:	mov	r3, #1
   184c4:	strb	r3, [r0, #4]
   184c8:	ldr	r3, [r1, #80]	; 0x50
   184cc:	cmp	r3, #1
   184d0:	ble	18bf4 <__assert_fail@plt+0x769c>
   184d4:	ldr	r1, [r1, #40]	; 0x28
   184d8:	mov	r0, r4
   184dc:	bl	16450 <__assert_fail@plt+0x4ef8>
   184e0:	mov	r8, r0
   184e4:	bl	11438 <iswalnum@plt>
   184e8:	adds	r0, r0, #0
   184ec:	movne	r0, #1
   184f0:	cmp	r8, #95	; 0x5f
   184f4:	orreq	r0, r0, #1
   184f8:	ldrb	r3, [r5, #6]
   184fc:	bfi	r3, r0, #6, #1
   18500:	strb	r3, [r5, #6]
   18504:	sub	r3, r6, #10
   18508:	cmp	r3, #115	; 0x73
   1850c:	ldrls	pc, [pc, r3, lsl #2]
   18510:	b	18e0c <__assert_fail@plt+0x78b4>
   18514:	andeq	r8, r1, r0, lsr #24
   18518:	andeq	r8, r1, ip, lsl #28
   1851c:	andeq	r8, r1, ip, lsl #28
   18520:	andeq	r8, r1, ip, lsl #28
   18524:	andeq	r8, r1, ip, lsl #28
   18528:	andeq	r8, r1, ip, lsl #28
   1852c:	andeq	r8, r1, ip, lsl #28
   18530:	andeq	r8, r1, ip, lsl #28
   18534:	andeq	r8, r1, ip, lsl #28
   18538:	andeq	r8, r1, ip, lsl #28
   1853c:	andeq	r8, r1, ip, lsl #28
   18540:	andeq	r8, r1, ip, lsl #28
   18544:	andeq	r8, r1, ip, lsl #28
   18548:	andeq	r8, r1, ip, lsl #28
   1854c:	andeq	r8, r1, ip, lsl #28
   18550:	andeq	r8, r1, ip, lsl #28
   18554:	andeq	r8, r1, ip, lsl #28
   18558:	andeq	r8, r1, ip, lsl #28
   1855c:	andeq	r8, r1, ip, lsl #28
   18560:	andeq	r8, r1, ip, lsl #28
   18564:	andeq	r8, r1, ip, lsl #28
   18568:	andeq	r8, r1, ip, lsl #28
   1856c:	andeq	r8, r1, ip, lsl #28
   18570:	andeq	r8, r1, ip, lsl #28
   18574:	andeq	r8, r1, ip, lsl #28
   18578:	andeq	r8, r1, ip, lsl #28
   1857c:	muleq	r1, r4, sp
   18580:	andeq	r8, r1, ip, lsl #28
   18584:	andeq	r8, r1, ip, lsl #28
   18588:	andeq	r8, r1, ip, lsl #28
   1858c:	andeq	r8, r1, r0, ror #25
   18590:	strdeq	r8, [r1], -ip
   18594:	andeq	r8, r1, r8, asr ip
   18598:	andeq	r8, r1, r8, ror #24
   1859c:	andeq	r8, r1, ip, lsl #28
   185a0:	andeq	r8, r1, ip, lsl #28
   185a4:	andeq	r8, r1, r8, lsr #26
   185a8:	andeq	r8, r1, ip, lsl #28
   185ac:	andeq	r8, r1, ip, lsl #28
   185b0:	andeq	r8, r1, ip, lsl #28
   185b4:	andeq	r8, r1, ip, lsl #28
   185b8:	andeq	r8, r1, ip, lsl #28
   185bc:	andeq	r8, r1, ip, lsl #28
   185c0:	andeq	r8, r1, ip, lsl #28
   185c4:	andeq	r8, r1, ip, lsl #28
   185c8:	andeq	r8, r1, ip, lsl #28
   185cc:	andeq	r8, r1, ip, lsl #28
   185d0:	andeq	r8, r1, ip, lsl #28
   185d4:	andeq	r8, r1, ip, lsl #28
   185d8:	andeq	r8, r1, ip, lsl #28
   185dc:	andeq	r8, r1, ip, lsl #28
   185e0:	andeq	r8, r1, ip, lsl #28
   185e4:	andeq	r8, r1, ip, lsl #28
   185e8:	andeq	r8, r1, r8, lsl #25
   185ec:	andeq	r8, r1, ip, lsl #28
   185f0:	andeq	r8, r1, ip, lsl #28
   185f4:	andeq	r8, r1, ip, lsl #28
   185f8:	andeq	r8, r1, ip, lsl #28
   185fc:	andeq	r8, r1, ip, lsl #28
   18600:	andeq	r8, r1, ip, lsl #28
   18604:	andeq	r8, r1, ip, lsl #28
   18608:	andeq	r8, r1, ip, lsl #28
   1860c:	andeq	r8, r1, ip, lsl #28
   18610:	andeq	r8, r1, ip, lsl #28
   18614:	andeq	r8, r1, ip, lsl #28
   18618:	andeq	r8, r1, ip, lsl #28
   1861c:	andeq	r8, r1, ip, lsl #28
   18620:	andeq	r8, r1, ip, lsl #28
   18624:	andeq	r8, r1, ip, lsl #28
   18628:	andeq	r8, r1, ip, lsl #28
   1862c:	andeq	r8, r1, ip, lsl #28
   18630:	andeq	r8, r1, ip, lsl #28
   18634:	andeq	r8, r1, ip, lsl #28
   18638:	andeq	r8, r1, ip, lsl #28
   1863c:	andeq	r8, r1, ip, lsl #28
   18640:	andeq	r8, r1, ip, lsl #28
   18644:	andeq	r8, r1, ip, lsl #28
   18648:	andeq	r8, r1, ip, lsl #28
   1864c:	andeq	r8, r1, ip, lsl #28
   18650:	andeq	r8, r1, ip, lsl #28
   18654:	andeq	r8, r1, ip, lsl #28
   18658:	andeq	r8, r1, r8, lsl sp
   1865c:	andeq	r8, r1, ip, lsl #28
   18660:	andeq	r8, r1, ip, lsl #28
   18664:	andeq	r8, r1, r8, lsr sp
   18668:	andeq	r8, r1, ip, lsl #28
   1866c:	andeq	r8, r1, ip, lsl #28
   18670:	andeq	r8, r1, ip, lsl #28
   18674:	andeq	r8, r1, ip, lsl #28
   18678:	andeq	r8, r1, ip, lsl #28
   1867c:	andeq	r8, r1, ip, lsl #28
   18680:	andeq	r8, r1, ip, lsl #28
   18684:	andeq	r8, r1, ip, lsl #28
   18688:	andeq	r8, r1, ip, lsl #28
   1868c:	andeq	r8, r1, ip, lsl #28
   18690:	andeq	r8, r1, ip, lsl #28
   18694:	andeq	r8, r1, ip, lsl #28
   18698:	andeq	r8, r1, ip, lsl #28
   1869c:	andeq	r8, r1, ip, lsl #28
   186a0:	andeq	r8, r1, ip, lsl #28
   186a4:	andeq	r8, r1, ip, lsl #28
   186a8:	andeq	r8, r1, ip, lsl #28
   186ac:	andeq	r8, r1, ip, lsl #28
   186b0:	andeq	r8, r1, ip, lsl #28
   186b4:	andeq	r8, r1, ip, lsl #28
   186b8:	andeq	r8, r1, ip, lsl #28
   186bc:	andeq	r8, r1, ip, lsl #28
   186c0:	andeq	r8, r1, ip, lsl #28
   186c4:	andeq	r8, r1, ip, lsl #28
   186c8:	andeq	r8, r1, ip, lsl #28
   186cc:	andeq	r8, r1, ip, lsl #28
   186d0:	andeq	r8, r1, ip, lsl #28
   186d4:	andeq	r8, r1, ip, lsl #28
   186d8:	andeq	r8, r1, r8, lsr #25
   186dc:	andeq	r8, r1, ip, lsr ip
   186e0:	andeq	r8, r1, r4, asr #25
   186e4:	mov	r3, #2
   186e8:	strb	r3, [r0, #4]
   186ec:	mov	r0, #0
   186f0:	bx	lr
   186f4:	mov	r3, #1
   186f8:	strb	r3, [r0, #4]
   186fc:	ldrb	r2, [r0, #6]
   18700:	orr	r2, r2, #32
   18704:	strb	r2, [r0, #6]
   18708:	mov	r0, r3
   1870c:	b	18730 <__assert_fail@plt+0x71d8>
   18710:	ldr	r1, [r1, #40]	; 0x28
   18714:	add	r2, r1, #1
   18718:	ldr	r0, [r4, #48]	; 0x30
   1871c:	cmp	r2, r0
   18720:	blt	18748 <__assert_fail@plt+0x71f0>
   18724:	mov	r3, #36	; 0x24
   18728:	strb	r3, [r5, #4]
   1872c:	mov	r0, #1
   18730:	add	sp, sp, #8
   18734:	ldrd	r4, [sp]
   18738:	ldrd	r6, [sp, #8]
   1873c:	ldr	r8, [sp, #16]
   18740:	add	sp, sp, #20
   18744:	pop	{pc}		; (ldr pc, [sp], #4)
   18748:	ldrb	r0, [r4, #75]	; 0x4b
   1874c:	cmp	r0, #0
   18750:	bne	18914 <__assert_fail@plt+0x73bc>
   18754:	ldr	r3, [r4, #4]
   18758:	ldrb	r6, [r3, r2]
   1875c:	strb	r6, [r5]
   18760:	mov	r3, #1
   18764:	strb	r3, [r5, #4]
   18768:	ldr	r3, [r4, #80]	; 0x50
   1876c:	cmp	r3, #1
   18770:	ble	18990 <__assert_fail@plt+0x7438>
   18774:	ldr	r1, [r4, #40]	; 0x28
   18778:	add	r1, r1, #1
   1877c:	mov	r0, r4
   18780:	bl	16450 <__assert_fail@plt+0x4ef8>
   18784:	mov	r4, r0
   18788:	bl	11438 <iswalnum@plt>
   1878c:	adds	r0, r0, #0
   18790:	movne	r0, #1
   18794:	cmp	r4, #95	; 0x5f
   18798:	orreq	r0, r0, #1
   1879c:	ldrb	r3, [r5, #6]
   187a0:	bfi	r3, r0, #6, #1
   187a4:	strb	r3, [r5, #6]
   187a8:	sub	r3, r6, #39	; 0x27
   187ac:	cmp	r3, #86	; 0x56
   187b0:	ldrls	pc, [pc, r3, lsl #2]
   187b4:	b	18e04 <__assert_fail@plt+0x78ac>
   187b8:	andeq	r8, r1, r0, lsr #22
   187bc:	andeq	r8, r1, r4, asr #22
   187c0:	andeq	r8, r1, r0, ror #22
   187c4:	andeq	r8, r1, r4, lsl #28
   187c8:	andeq	r8, r1, ip, ror fp
   187cc:	andeq	r8, r1, r4, lsl #28
   187d0:	andeq	r8, r1, r4, lsl #28
   187d4:	andeq	r8, r1, r4, lsl #28
   187d8:	andeq	r8, r1, r4, lsl #28
   187dc:	andeq	r8, r1, r4, lsl #28
   187e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18800:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18804:	andeq	r8, r1, r4, lsl #28
   18808:	andeq	r8, r1, r4, lsl #28
   1880c:	strdeq	r8, [r1], -ip
   18810:	andeq	r8, r1, r4, lsl #28
   18814:	andeq	r8, r1, r0, lsr #20
   18818:	muleq	r1, ip, fp
   1881c:	andeq	r8, r1, r4, lsl #28
   18820:	andeq	r8, r1, r4, lsl #28
   18824:	andeq	r8, r1, r8, ror #20
   18828:	andeq	r8, r1, r4, lsl #28
   1882c:	andeq	r8, r1, r4, lsl #28
   18830:	andeq	r8, r1, r4, lsl #28
   18834:	andeq	r8, r1, r4, lsl #28
   18838:	andeq	r8, r1, r4, lsl #28
   1883c:	andeq	r8, r1, r4, lsl #28
   18840:	andeq	r8, r1, r4, lsl #28
   18844:	andeq	r8, r1, r4, lsl #28
   18848:	andeq	r8, r1, r4, lsl #28
   1884c:	andeq	r8, r1, r4, lsl #28
   18850:	andeq	r8, r1, r4, lsl #28
   18854:	andeq	r8, r1, r4, lsl #28
   18858:	andeq	r8, r1, r4, lsl #28
   1885c:	andeq	r8, r1, r4, lsl #28
   18860:	andeq	r8, r1, r4, lsl #28
   18864:	andeq	r8, r1, r4, lsl #28
   18868:	andeq	r8, r1, r0, ror #21
   1886c:	andeq	r8, r1, r4, lsl #28
   18870:	andeq	r8, r1, r4, lsl #28
   18874:	andeq	r8, r1, r4, lsl #28
   18878:	andeq	r8, r1, r8, lsr #21
   1887c:	andeq	r8, r1, r4, lsl #28
   18880:	andeq	r8, r1, r4, lsl #28
   18884:	andeq	r8, r1, r4, lsl #28
   18888:	andeq	r8, r1, r4, lsl #28
   1888c:	andeq	r8, r1, r4, lsl #28
   18890:	andeq	r8, r1, r4, lsl #28
   18894:	andeq	r8, r1, r4, lsl #28
   18898:	andeq	r8, r1, r4, lsl #28
   1889c:	strdeq	r8, [r1], -ip
   188a0:	andeq	r8, r1, r4, lsl #28
   188a4:	andeq	r8, r1, r4, asr #20
   188a8:	andeq	r8, r1, r4, lsl #28
   188ac:	andeq	r8, r1, r4, lsl #28
   188b0:	andeq	r8, r1, r4, lsl #28
   188b4:	andeq	r8, r1, r4, lsl #28
   188b8:	andeq	r8, r1, r4, lsl #28
   188bc:	andeq	r8, r1, r4, lsl #28
   188c0:	andeq	r8, r1, r4, lsl #28
   188c4:	andeq	r8, r1, r4, lsl #28
   188c8:	andeq	r8, r1, r4, lsl #28
   188cc:	andeq	r8, r1, r4, lsl #28
   188d0:	andeq	r8, r1, r4, lsl #28
   188d4:	andeq	r8, r1, r4, lsl #28
   188d8:	andeq	r8, r1, r4, lsl #28
   188dc:	andeq	r8, r1, r4, lsl #28
   188e0:	andeq	r8, r1, r4, lsl #28
   188e4:	andeq	r8, r1, r4, lsl #28
   188e8:	andeq	r8, r1, r4, asr #21
   188ec:	andeq	r8, r1, r4, lsl #28
   188f0:	andeq	r8, r1, r4, lsl #28
   188f4:	andeq	r8, r1, r4, lsl #28
   188f8:	andeq	r8, r1, ip, lsl #21
   188fc:	andeq	r8, r1, r4, lsl #28
   18900:	andeq	r8, r1, r4, lsl #28
   18904:	andeq	r8, r1, r4, lsl #28
   18908:			; <UNDEFINED> instruction: 0x00018bbc
   1890c:			; <UNDEFINED> instruction: 0x000189bc
   18910:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18914:	cmp	r3, #1
   18918:	ble	18950 <__assert_fail@plt+0x73f8>
   1891c:	ldr	r3, [r4, #8]
   18920:	lsl	ip, r2, #2
   18924:	ldr	r0, [r3, r2, lsl #2]
   18928:	cmn	r0, #1
   1892c:	beq	18984 <__assert_fail@plt+0x742c>
   18930:	add	r1, r1, #2
   18934:	ldr	r0, [r4, #28]
   18938:	cmp	r0, r1
   1893c:	beq	18950 <__assert_fail@plt+0x73f8>
   18940:	add	r3, r3, ip
   18944:	ldr	r3, [r3, #4]
   18948:	cmn	r3, #1
   1894c:	beq	18984 <__assert_fail@plt+0x742c>
   18950:	ldrb	r3, [r4, #76]	; 0x4c
   18954:	cmp	r3, #0
   18958:	beq	18e14 <__assert_fail@plt+0x78bc>
   1895c:	ldr	r1, [r4, #12]
   18960:	ldr	r3, [r4]
   18964:	ldr	r0, [r1, r2, lsl #2]
   18968:	ldr	r1, [r4, #24]
   1896c:	add	r3, r3, r0
   18970:	ldrb	r6, [r3, r1]
   18974:	bics	r3, r6, #127	; 0x7f
   18978:	ldrne	r3, [r4, #4]
   1897c:	ldrbne	r6, [r3, r2]
   18980:	b	1875c <__assert_fail@plt+0x7204>
   18984:	ldr	r3, [r4, #4]
   18988:	ldrb	r6, [r3, r2]
   1898c:	b	1875c <__assert_fail@plt+0x7204>
   18990:	bl	113fc <__ctype_b_loc@plt>
   18994:	ldr	r2, [r0]
   18998:	lsl	r3, r6, #1
   1899c:	ldrh	r3, [r2, r3]
   189a0:	ubfx	r3, r3, #3, #1
   189a4:	cmp	r6, #95	; 0x5f
   189a8:	orreq	r3, r3, #1
   189ac:	ldrb	r2, [r5, #6]
   189b0:	bfi	r2, r3, #6, #1
   189b4:	strb	r2, [r5, #6]
   189b8:	b	187a8 <__assert_fail@plt+0x7250>
   189bc:	tst	r7, #33792	; 0x8400
   189c0:	movne	r0, #2
   189c4:	bne	18730 <__assert_fail@plt+0x71d8>
   189c8:	mov	r3, #10
   189cc:	strb	r3, [r5, #4]
   189d0:	mov	r0, #2
   189d4:	b	18730 <__assert_fail@plt+0x71d8>
   189d8:	tst	r7, #16384	; 0x4000
   189dc:	movne	r0, #2
   189e0:	bne	18730 <__assert_fail@plt+0x71d8>
   189e4:	mov	r3, #4
   189e8:	strb	r3, [r5, #4]
   189ec:	sub	r6, r6, #49	; 0x31
   189f0:	str	r6, [r5]
   189f4:	mov	r0, #2
   189f8:	b	18730 <__assert_fail@plt+0x71d8>
   189fc:	tst	r7, #524288	; 0x80000
   18a00:	movne	r0, #2
   18a04:	bne	18730 <__assert_fail@plt+0x71d8>
   18a08:	mov	r3, #12
   18a0c:	strb	r3, [r5, #4]
   18a10:	mov	r3, #6
   18a14:	str	r3, [r5]
   18a18:	mov	r0, #2
   18a1c:	b	18730 <__assert_fail@plt+0x71d8>
   18a20:	tst	r7, #524288	; 0x80000
   18a24:	movne	r0, #2
   18a28:	bne	18730 <__assert_fail@plt+0x71d8>
   18a2c:	mov	r3, #12
   18a30:	strb	r3, [r5, #4]
   18a34:	mov	r3, #9
   18a38:	str	r3, [r5]
   18a3c:	mov	r0, #2
   18a40:	b	18730 <__assert_fail@plt+0x71d8>
   18a44:	tst	r7, #524288	; 0x80000
   18a48:	movne	r0, #2
   18a4c:	bne	18730 <__assert_fail@plt+0x71d8>
   18a50:	mov	r3, #12
   18a54:	strb	r3, [r5, #4]
   18a58:	mov	r3, #256	; 0x100
   18a5c:	str	r3, [r5]
   18a60:	mov	r0, #2
   18a64:	b	18730 <__assert_fail@plt+0x71d8>
   18a68:	tst	r7, #524288	; 0x80000
   18a6c:	movne	r0, #2
   18a70:	bne	18730 <__assert_fail@plt+0x71d8>
   18a74:	mov	r3, #12
   18a78:	strb	r3, [r5, #4]
   18a7c:	mov	r3, #512	; 0x200
   18a80:	str	r3, [r5]
   18a84:	mov	r0, #2
   18a88:	b	18730 <__assert_fail@plt+0x71d8>
   18a8c:	tst	r7, #524288	; 0x80000
   18a90:	movne	r0, #2
   18a94:	bne	18730 <__assert_fail@plt+0x71d8>
   18a98:	mov	r3, #32
   18a9c:	strb	r3, [r5, #4]
   18aa0:	mov	r0, #2
   18aa4:	b	18730 <__assert_fail@plt+0x71d8>
   18aa8:	tst	r7, #524288	; 0x80000
   18aac:	movne	r0, #2
   18ab0:	bne	18730 <__assert_fail@plt+0x71d8>
   18ab4:	mov	r3, #33	; 0x21
   18ab8:	strb	r3, [r5, #4]
   18abc:	mov	r0, #2
   18ac0:	b	18730 <__assert_fail@plt+0x71d8>
   18ac4:	tst	r7, #524288	; 0x80000
   18ac8:	movne	r0, #2
   18acc:	bne	18730 <__assert_fail@plt+0x71d8>
   18ad0:	mov	r3, #34	; 0x22
   18ad4:	strb	r3, [r5, #4]
   18ad8:	mov	r0, #2
   18adc:	b	18730 <__assert_fail@plt+0x71d8>
   18ae0:	tst	r7, #524288	; 0x80000
   18ae4:	movne	r0, #2
   18ae8:	bne	18730 <__assert_fail@plt+0x71d8>
   18aec:	mov	r3, #35	; 0x23
   18af0:	strb	r3, [r5, #4]
   18af4:	mov	r0, #2
   18af8:	b	18730 <__assert_fail@plt+0x71d8>
   18afc:	tst	r7, #524288	; 0x80000
   18b00:	movne	r0, #2
   18b04:	bne	18730 <__assert_fail@plt+0x71d8>
   18b08:	mov	r3, #12
   18b0c:	strb	r3, [r5, #4]
   18b10:	mov	r3, #64	; 0x40
   18b14:	str	r3, [r5]
   18b18:	mov	r0, #2
   18b1c:	b	18730 <__assert_fail@plt+0x71d8>
   18b20:	tst	r7, #524288	; 0x80000
   18b24:	movne	r0, #2
   18b28:	bne	18730 <__assert_fail@plt+0x71d8>
   18b2c:	mov	r3, #12
   18b30:	strb	r3, [r5, #4]
   18b34:	mov	r3, #128	; 0x80
   18b38:	str	r3, [r5]
   18b3c:	mov	r0, #2
   18b40:	b	18730 <__assert_fail@plt+0x71d8>
   18b44:	tst	r7, #8192	; 0x2000
   18b48:	movne	r0, #2
   18b4c:	bne	18730 <__assert_fail@plt+0x71d8>
   18b50:	mov	r3, #8
   18b54:	strb	r3, [r5, #4]
   18b58:	mov	r0, #2
   18b5c:	b	18730 <__assert_fail@plt+0x71d8>
   18b60:	tst	r7, #8192	; 0x2000
   18b64:	movne	r0, #2
   18b68:	bne	18730 <__assert_fail@plt+0x71d8>
   18b6c:	mov	r3, #9
   18b70:	strb	r3, [r5, #4]
   18b74:	mov	r0, #2
   18b78:	b	18730 <__assert_fail@plt+0x71d8>
   18b7c:	movw	r2, #1026	; 0x402
   18b80:	and	r2, r7, r2
   18b84:	cmp	r2, #2
   18b88:	moveq	r3, #18
   18b8c:	strbeq	r3, [r5, #4]
   18b90:	moveq	r0, #2
   18b94:	movne	r0, #2
   18b98:	b	18730 <__assert_fail@plt+0x71d8>
   18b9c:	movw	r2, #1026	; 0x402
   18ba0:	and	r2, r7, r2
   18ba4:	cmp	r2, #2
   18ba8:	moveq	r3, #19
   18bac:	strbeq	r3, [r5, #4]
   18bb0:	moveq	r0, #2
   18bb4:	movne	r0, #2
   18bb8:	b	18730 <__assert_fail@plt+0x71d8>
   18bbc:	and	r2, r7, #4608	; 0x1200
   18bc0:	cmp	r2, #512	; 0x200
   18bc4:	moveq	r3, #23
   18bc8:	strbeq	r3, [r5, #4]
   18bcc:	moveq	r0, #2
   18bd0:	movne	r0, #2
   18bd4:	b	18730 <__assert_fail@plt+0x71d8>
   18bd8:	and	r2, r7, #4608	; 0x1200
   18bdc:	cmp	r2, #512	; 0x200
   18be0:	moveq	r3, #24
   18be4:	strbeq	r3, [r5, #4]
   18be8:	moveq	r0, #2
   18bec:	movne	r0, #2
   18bf0:	b	18730 <__assert_fail@plt+0x71d8>
   18bf4:	bl	113fc <__ctype_b_loc@plt>
   18bf8:	ldr	r2, [r0]
   18bfc:	lsl	r3, r6, #1
   18c00:	ldrh	r3, [r2, r3]
   18c04:	ubfx	r3, r3, #3, #1
   18c08:	cmp	r6, #95	; 0x5f
   18c0c:	orreq	r3, r3, #1
   18c10:	ldrb	r2, [r5, #6]
   18c14:	bfi	r2, r3, #6, #1
   18c18:	strb	r2, [r5, #6]
   18c1c:	b	18504 <__assert_fail@plt+0x6fac>
   18c20:	tst	r7, #2048	; 0x800
   18c24:	moveq	r0, #1
   18c28:	beq	18730 <__assert_fail@plt+0x71d8>
   18c2c:	mov	r3, #10
   18c30:	strb	r3, [r5, #4]
   18c34:	mov	r0, #1
   18c38:	b	18730 <__assert_fail@plt+0x71d8>
   18c3c:	and	r2, r7, #33792	; 0x8400
   18c40:	cmp	r2, #32768	; 0x8000
   18c44:	moveq	r3, #10
   18c48:	strbeq	r3, [r5, #4]
   18c4c:	moveq	r0, #1
   18c50:	movne	r0, #1
   18c54:	b	18730 <__assert_fail@plt+0x71d8>
   18c58:	mov	r3, #11
   18c5c:	strb	r3, [r5, #4]
   18c60:	mov	r0, #1
   18c64:	b	18730 <__assert_fail@plt+0x71d8>
   18c68:	movw	r3, #1026	; 0x402
   18c6c:	tst	r7, r3
   18c70:	movne	r0, #1
   18c74:	bne	18730 <__assert_fail@plt+0x71d8>
   18c78:	mov	r3, #18
   18c7c:	strb	r3, [r5, #4]
   18c80:	mov	r0, #1
   18c84:	b	18730 <__assert_fail@plt+0x71d8>
   18c88:	movw	r3, #1026	; 0x402
   18c8c:	tst	r7, r3
   18c90:	movne	r0, #1
   18c94:	bne	18730 <__assert_fail@plt+0x71d8>
   18c98:	mov	r3, #19
   18c9c:	strb	r3, [r5, #4]
   18ca0:	mov	r0, #1
   18ca4:	b	18730 <__assert_fail@plt+0x71d8>
   18ca8:	and	r2, r7, #4608	; 0x1200
   18cac:	cmp	r2, #4608	; 0x1200
   18cb0:	moveq	r3, #23
   18cb4:	strbeq	r3, [r5, #4]
   18cb8:	moveq	r0, #1
   18cbc:	movne	r0, #1
   18cc0:	b	18730 <__assert_fail@plt+0x71d8>
   18cc4:	and	r2, r7, #4608	; 0x1200
   18cc8:	cmp	r2, #4608	; 0x1200
   18ccc:	moveq	r3, #24
   18cd0:	strbeq	r3, [r5, #4]
   18cd4:	moveq	r0, #1
   18cd8:	movne	r0, #1
   18cdc:	b	18730 <__assert_fail@plt+0x71d8>
   18ce0:	tst	r7, #8192	; 0x2000
   18ce4:	moveq	r0, #1
   18ce8:	beq	18730 <__assert_fail@plt+0x71d8>
   18cec:	mov	r3, #8
   18cf0:	strb	r3, [r5, #4]
   18cf4:	mov	r0, #1
   18cf8:	b	18730 <__assert_fail@plt+0x71d8>
   18cfc:	tst	r7, #8192	; 0x2000
   18d00:	moveq	r0, #1
   18d04:	beq	18730 <__assert_fail@plt+0x71d8>
   18d08:	mov	r3, #9
   18d0c:	strb	r3, [r5, #4]
   18d10:	mov	r0, #1
   18d14:	b	18730 <__assert_fail@plt+0x71d8>
   18d18:	mov	r3, #20
   18d1c:	strb	r3, [r5, #4]
   18d20:	mov	r0, #1
   18d24:	b	18730 <__assert_fail@plt+0x71d8>
   18d28:	mov	r3, #5
   18d2c:	strb	r3, [r5, #4]
   18d30:	mov	r0, #1
   18d34:	b	18730 <__assert_fail@plt+0x71d8>
   18d38:	mov	r3, #8
   18d3c:	movt	r3, #128	; 0x80
   18d40:	tst	r7, r3
   18d44:	bne	18d7c <__assert_fail@plt+0x7824>
   18d48:	ldr	r3, [r4, #40]	; 0x28
   18d4c:	cmp	r3, #0
   18d50:	beq	18d7c <__assert_fail@plt+0x7824>
   18d54:	ldr	r2, [r4, #4]
   18d58:	add	r3, r2, r3
   18d5c:	ldrb	r2, [r3, #-1]
   18d60:	eor	r3, r7, #2048	; 0x800
   18d64:	ubfx	r3, r3, #11, #1
   18d68:	cmp	r2, #10
   18d6c:	orrne	r3, r3, #1
   18d70:	cmp	r3, #0
   18d74:	movne	r0, #1
   18d78:	bne	18730 <__assert_fail@plt+0x71d8>
   18d7c:	mov	r3, #12
   18d80:	strb	r3, [r5, #4]
   18d84:	mov	r3, #16
   18d88:	str	r3, [r5]
   18d8c:	mov	r0, #1
   18d90:	b	18730 <__assert_fail@plt+0x71d8>
   18d94:	tst	r7, #8
   18d98:	bne	18db0 <__assert_fail@plt+0x7858>
   18d9c:	ldr	r3, [r4, #40]	; 0x28
   18da0:	add	r3, r3, #1
   18da4:	ldr	r2, [r4, #48]	; 0x30
   18da8:	cmp	r3, r2
   18dac:	bne	18dc8 <__assert_fail@plt+0x7870>
   18db0:	mov	r3, #12
   18db4:	strb	r3, [r5, #4]
   18db8:	mov	r3, #32
   18dbc:	str	r3, [r5]
   18dc0:	mov	r0, #1
   18dc4:	b	18730 <__assert_fail@plt+0x71d8>
   18dc8:	str	r3, [r4, #40]	; 0x28
   18dcc:	mov	r2, r7
   18dd0:	mov	r1, r4
   18dd4:	mov	r0, sp
   18dd8:	bl	18440 <__assert_fail@plt+0x6ee8>
   18ddc:	ldr	r3, [r4, #40]	; 0x28
   18de0:	sub	r3, r3, #1
   18de4:	str	r3, [r4, #40]	; 0x28
   18de8:	ldrb	r3, [sp, #4]
   18dec:	sub	r3, r3, #9
   18df0:	uxtb	r3, r3
   18df4:	cmp	r3, #1
   18df8:	movhi	r0, #1
   18dfc:	bhi	18730 <__assert_fail@plt+0x71d8>
   18e00:	b	18db0 <__assert_fail@plt+0x7858>
   18e04:	mov	r0, #2
   18e08:	b	18730 <__assert_fail@plt+0x71d8>
   18e0c:	mov	r0, #1
   18e10:	b	18730 <__assert_fail@plt+0x71d8>
   18e14:	ldr	r3, [r4]
   18e18:	ldr	r1, [r4, #24]
   18e1c:	add	r2, r3, r2
   18e20:	ldrb	r6, [r2, r1]
   18e24:	b	1875c <__assert_fail@plt+0x7204>
   18e28:	str	r4, [sp, #-8]!
   18e2c:	str	lr, [sp, #4]
   18e30:	mov	r4, r1
   18e34:	bl	18440 <__assert_fail@plt+0x6ee8>
   18e38:	ldr	r3, [r4, #40]	; 0x28
   18e3c:	add	r0, r3, r0
   18e40:	str	r0, [r4, #40]	; 0x28
   18e44:	ldr	r4, [sp]
   18e48:	add	sp, sp, #4
   18e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18e54:	strd	r6, [sp, #8]
   18e58:	strd	r8, [sp, #16]
   18e5c:	str	sl, [sp, #24]
   18e60:	str	lr, [sp, #28]
   18e64:	mov	r6, r0
   18e68:	mov	r4, r1
   18e6c:	mov	r5, r2
   18e70:	mvn	r9, #0
   18e74:	movw	r8, #32816	; 0x8030
   18e78:	mvn	r7, #1
   18e7c:	mov	r2, r5
   18e80:	mov	r1, r6
   18e84:	mov	r0, r4
   18e88:	bl	18e28 <__assert_fail@plt+0x78d0>
   18e8c:	ldrb	r2, [r4]
   18e90:	ldrb	r3, [r4, #4]
   18e94:	cmp	r3, #2
   18e98:	beq	18f00 <__assert_fail@plt+0x79a8>
   18e9c:	cmp	r3, #24
   18ea0:	cmpne	r2, #44	; 0x2c
   18ea4:	beq	18f04 <__assert_fail@plt+0x79ac>
   18ea8:	cmp	r3, #1
   18eac:	movne	r9, r7
   18eb0:	bne	18e7c <__assert_fail@plt+0x7924>
   18eb4:	sub	r3, r2, #48	; 0x30
   18eb8:	uxtb	r1, r3
   18ebc:	cmp	r1, #9
   18ec0:	movhi	r3, #0
   18ec4:	movls	r3, #1
   18ec8:	cmn	r9, #2
   18ecc:	moveq	r3, #0
   18ed0:	cmp	r3, #0
   18ed4:	moveq	r9, r7
   18ed8:	beq	18e7c <__assert_fail@plt+0x7924>
   18edc:	cmn	r9, #1
   18ee0:	subeq	r9, r2, #48	; 0x30
   18ee4:	beq	18e7c <__assert_fail@plt+0x7924>
   18ee8:	add	r9, r9, r9, lsl #2
   18eec:	add	r2, r2, r9, lsl #1
   18ef0:	cmp	r2, r8
   18ef4:	movge	r2, r8
   18ef8:	sub	r9, r2, #48	; 0x30
   18efc:	b	18e7c <__assert_fail@plt+0x7924>
   18f00:	mvn	r9, #1
   18f04:	mov	r0, r9
   18f08:	ldrd	r4, [sp]
   18f0c:	ldrd	r6, [sp, #8]
   18f10:	ldrd	r8, [sp, #16]
   18f14:	ldr	sl, [sp, #24]
   18f18:	add	sp, sp, #28
   18f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f20:	str	r4, [sp, #-8]!
   18f24:	str	lr, [sp, #4]
   18f28:	mov	r4, r0
   18f2c:	ldr	r0, [r0]
   18f30:	bl	13eac <__assert_fail@plt+0x2954>
   18f34:	ldr	r0, [r4, #4]
   18f38:	bl	13eac <__assert_fail@plt+0x2954>
   18f3c:	ldr	r0, [r4, #8]
   18f40:	bl	13eac <__assert_fail@plt+0x2954>
   18f44:	ldr	r0, [r4, #12]
   18f48:	bl	13eac <__assert_fail@plt+0x2954>
   18f4c:	mov	r0, r4
   18f50:	bl	13eac <__assert_fail@plt+0x2954>
   18f54:	ldr	r4, [sp]
   18f58:	add	sp, sp, #4
   18f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f60:	str	r4, [sp, #-8]!
   18f64:	str	lr, [sp, #4]
   18f68:	ldr	r2, [r0, #4]
   18f6c:	mov	r3, #255	; 0xff
   18f70:	movt	r3, #4
   18f74:	and	r3, r3, r2
   18f78:	cmp	r3, #6
   18f7c:	beq	18f94 <__assert_fail@plt+0x7a3c>
   18f80:	cmp	r3, #3
   18f84:	beq	18fa0 <__assert_fail@plt+0x7a48>
   18f88:	ldr	r4, [sp]
   18f8c:	add	sp, sp, #4
   18f90:	pop	{pc}		; (ldr pc, [sp], #4)
   18f94:	ldr	r0, [r0]
   18f98:	bl	18f20 <__assert_fail@plt+0x79c8>
   18f9c:	b	18f88 <__assert_fail@plt+0x7a30>
   18fa0:	ldr	r0, [r0]
   18fa4:	bl	13eac <__assert_fail@plt+0x2954>
   18fa8:	b	18f88 <__assert_fail@plt+0x7a30>
   18fac:	str	r4, [sp, #-8]!
   18fb0:	str	lr, [sp, #4]
   18fb4:	add	r0, r1, #20
   18fb8:	bl	18f60 <__assert_fail@plt+0x7a08>
   18fbc:	mov	r0, #0
   18fc0:	ldr	r4, [sp]
   18fc4:	add	sp, sp, #4
   18fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fcc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18fd0:	strd	r6, [sp, #8]
   18fd4:	strd	r8, [sp, #16]
   18fd8:	str	sl, [sp, #24]
   18fdc:	str	lr, [sp, #28]
   18fe0:	sub	sp, sp, #8
   18fe4:	mov	r4, r0
   18fe8:	add	r3, sp, #8
   18fec:	stmdb	r3, {r1, r2}
   18ff0:	ldrb	r5, [sp, #4]
   18ff4:	ldr	r6, [r0, #4]
   18ff8:	ldr	r3, [r0, #8]
   18ffc:	cmp	r3, r6
   19000:	bcs	190d8 <__assert_fail@plt+0x7b80>
   19004:	ldr	r1, [r4, #8]
   19008:	ldr	r0, [r4]
   1900c:	lsl	r1, r1, #3
   19010:	ldrd	r2, [sp]
   19014:	strd	r2, [r0, r1]
   19018:	ldr	r2, [r4, #8]
   1901c:	ldr	r3, [r4]
   19020:	add	r3, r3, r2, lsl #3
   19024:	ldr	r2, [r3, #4]
   19028:	bfc	r2, #8, #10
   1902c:	str	r2, [r3, #4]
   19030:	cmp	r5, #5
   19034:	beq	191a8 <__assert_fail@plt+0x7c50>
   19038:	cmp	r5, #6
   1903c:	movne	r5, #0
   19040:	moveq	r5, #1
   19044:	ldr	r2, [r4, #8]
   19048:	ldr	r3, [r4]
   1904c:	add	r3, r3, r2, lsl #3
   19050:	ldrb	r2, [r3, #6]
   19054:	bfi	r2, r5, #4, #1
   19058:	strb	r2, [r3, #6]
   1905c:	ldr	r2, [r4, #8]
   19060:	ldr	r3, [r4, #12]
   19064:	mvn	r1, #0
   19068:	str	r1, [r3, r2, lsl #2]
   1906c:	ldr	r3, [r4, #8]
   19070:	add	r3, r3, r3, lsl #1
   19074:	lsl	r3, r3, #2
   19078:	ldr	r0, [r4, #20]
   1907c:	add	r1, r0, r3
   19080:	mov	r2, #0
   19084:	str	r2, [r0, r3]
   19088:	str	r2, [r1, #4]
   1908c:	str	r2, [r1, #8]
   19090:	ldr	r3, [r4, #8]
   19094:	add	r3, r3, r3, lsl #1
   19098:	lsl	r3, r3, #2
   1909c:	ldr	r0, [r4, #24]
   190a0:	add	r1, r0, r3
   190a4:	str	r2, [r0, r3]
   190a8:	str	r2, [r1, #4]
   190ac:	str	r2, [r1, #8]
   190b0:	ldr	r0, [r4, #8]
   190b4:	add	r3, r0, #1
   190b8:	str	r3, [r4, #8]
   190bc:	add	sp, sp, #8
   190c0:	ldrd	r4, [sp]
   190c4:	ldrd	r6, [sp, #8]
   190c8:	ldrd	r8, [sp, #16]
   190cc:	ldr	sl, [sp, #24]
   190d0:	add	sp, sp, #28
   190d4:	pop	{pc}		; (ldr pc, [sp], #4)
   190d8:	lsl	r7, r6, #1
   190dc:	movw	r3, #21845	; 0x5555
   190e0:	movt	r3, #5461	; 0x1555
   190e4:	cmp	r7, r3
   190e8:	bhi	191bc <__assert_fail@plt+0x7c64>
   190ec:	lsl	r1, r6, #4
   190f0:	ldr	r0, [r0]
   190f4:	bl	25930 <__assert_fail@plt+0x143d8>
   190f8:	cmp	r0, #0
   190fc:	beq	191c4 <__assert_fail@plt+0x7c6c>
   19100:	str	r0, [r4]
   19104:	lsl	r8, r6, #3
   19108:	mov	r1, r8
   1910c:	ldr	r0, [r4, #12]
   19110:	bl	25930 <__assert_fail@plt+0x143d8>
   19114:	mov	r9, r0
   19118:	mov	r1, r8
   1911c:	ldr	r0, [r4, #16]
   19120:	bl	25930 <__assert_fail@plt+0x143d8>
   19124:	mov	r8, r0
   19128:	add	r6, r6, r6, lsl #1
   1912c:	lsl	r6, r6, #3
   19130:	mov	r1, r6
   19134:	ldr	r0, [r4, #20]
   19138:	bl	25930 <__assert_fail@plt+0x143d8>
   1913c:	mov	sl, r0
   19140:	mov	r1, r6
   19144:	ldr	r0, [r4, #24]
   19148:	bl	25930 <__assert_fail@plt+0x143d8>
   1914c:	mov	r6, r0
   19150:	cmp	r8, #0
   19154:	cmpne	r9, #0
   19158:	beq	19180 <__assert_fail@plt+0x7c28>
   1915c:	cmp	r0, #0
   19160:	cmpne	sl, #0
   19164:	beq	19180 <__assert_fail@plt+0x7c28>
   19168:	str	r9, [r4, #12]
   1916c:	str	r8, [r4, #16]
   19170:	str	sl, [r4, #20]
   19174:	str	r0, [r4, #24]
   19178:	str	r7, [r4, #4]
   1917c:	b	19004 <__assert_fail@plt+0x7aac>
   19180:	mov	r0, r9
   19184:	bl	13eac <__assert_fail@plt+0x2954>
   19188:	mov	r0, r8
   1918c:	bl	13eac <__assert_fail@plt+0x2954>
   19190:	mov	r0, sl
   19194:	bl	13eac <__assert_fail@plt+0x2954>
   19198:	mov	r0, r6
   1919c:	bl	13eac <__assert_fail@plt+0x2954>
   191a0:	mvn	r0, #0
   191a4:	b	190bc <__assert_fail@plt+0x7b64>
   191a8:	ldr	r3, [r4, #92]	; 0x5c
   191ac:	cmp	r3, #1
   191b0:	movgt	r5, #1
   191b4:	bgt	19044 <__assert_fail@plt+0x7aec>
   191b8:	b	19038 <__assert_fail@plt+0x7ae0>
   191bc:	mvn	r0, #0
   191c0:	b	190bc <__assert_fail@plt+0x7b64>
   191c4:	mvn	r0, #0
   191c8:	b	190bc <__assert_fail@plt+0x7b64>
   191cc:	ldrb	r3, [r1, #24]
   191d0:	cmp	r3, #16
   191d4:	bne	191f4 <__assert_fail@plt+0x7c9c>
   191d8:	ldr	r3, [r1, #4]
   191dc:	ldr	r2, [r3, #12]
   191e0:	str	r2, [r1, #12]
   191e4:	ldr	r3, [r3, #28]
   191e8:	str	r3, [r1, #28]
   191ec:	mov	r0, #0
   191f0:	bx	lr
   191f4:	strd	r4, [sp, #-16]!
   191f8:	str	r6, [sp, #8]
   191fc:	str	lr, [sp, #12]
   19200:	mov	r4, r1
   19204:	mov	r5, r0
   19208:	str	r1, [r4, #12]
   1920c:	add	r3, r1, #20
   19210:	ldm	r3, {r1, r2}
   19214:	bl	18fcc <__assert_fail@plt+0x7a74>
   19218:	str	r0, [r4, #28]
   1921c:	cmn	r0, #1
   19220:	beq	19264 <__assert_fail@plt+0x7d0c>
   19224:	ldrb	r3, [r4, #24]
   19228:	cmp	r3, #12
   1922c:	movne	r0, #0
   19230:	beq	19244 <__assert_fail@plt+0x7cec>
   19234:	ldrd	r4, [sp]
   19238:	ldr	r6, [sp, #8]
   1923c:	add	sp, sp, #12
   19240:	pop	{pc}		; (ldr pc, [sp], #4)
   19244:	ldr	r3, [r5]
   19248:	add	r0, r3, r0, lsl #3
   1924c:	ldr	r3, [r0, #4]
   19250:	ldr	r2, [r4, #20]
   19254:	bfi	r3, r2, #8, #10
   19258:	str	r3, [r0, #4]
   1925c:	mov	r0, #0
   19260:	b	19234 <__assert_fail@plt+0x7cdc>
   19264:	mov	r0, #12
   19268:	b	19234 <__assert_fail@plt+0x7cdc>
   1926c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19270:	strd	r6, [sp, #8]
   19274:	str	r8, [sp, #16]
   19278:	str	lr, [sp, #20]
   1927c:	mov	r4, r0
   19280:	mov	r5, r1
   19284:	mov	r7, r2
   19288:	lsl	r6, r1, #3
   1928c:	ldr	r3, [r0]
   19290:	add	r3, r3, r6
   19294:	ldm	r3, {r1, r2}
   19298:	bl	18fcc <__assert_fail@plt+0x7a74>
   1929c:	cmn	r0, #1
   192a0:	beq	192fc <__assert_fail@plt+0x7da4>
   192a4:	lsl	r3, r0, #3
   192a8:	ldr	r2, [r4]
   192ac:	add	r2, r2, r3
   192b0:	ldr	r1, [r2, #4]
   192b4:	bfi	r1, r7, #8, #10
   192b8:	str	r1, [r2, #4]
   192bc:	ldr	r2, [r4]
   192c0:	add	ip, r2, r3
   192c4:	add	r2, r2, r6
   192c8:	ldr	r1, [r2, #4]
   192cc:	ldr	r2, [ip, #4]
   192d0:	orr	r1, r2, r1
   192d4:	ubfx	r1, r1, #8, #10
   192d8:	bfi	r2, r1, #8, #10
   192dc:	str	r2, [ip, #4]
   192e0:	ldr	r2, [r4]
   192e4:	add	r3, r2, r3
   192e8:	ldrb	r2, [r3, #6]
   192ec:	orr	r2, r2, #4
   192f0:	strb	r2, [r3, #6]
   192f4:	ldr	r3, [r4, #16]
   192f8:	str	r5, [r3, r0, lsl #2]
   192fc:	ldrd	r4, [sp]
   19300:	ldrd	r6, [sp, #8]
   19304:	ldr	r8, [sp, #16]
   19308:	add	sp, sp, #20
   1930c:	pop	{pc}		; (ldr pc, [sp], #4)
   19310:	str	r4, [sp, #-8]!
   19314:	str	lr, [sp, #4]
   19318:	mov	r4, r0
   1931c:	ldr	r0, [r0, #24]
   19320:	bl	13eac <__assert_fail@plt+0x2954>
   19324:	ldr	r0, [r4, #36]	; 0x24
   19328:	bl	13eac <__assert_fail@plt+0x2954>
   1932c:	ldr	r3, [r4, #40]	; 0x28
   19330:	add	r2, r4, #4
   19334:	cmp	r3, r2
   19338:	beq	1934c <__assert_fail@plt+0x7df4>
   1933c:	ldr	r0, [r3, #8]
   19340:	bl	13eac <__assert_fail@plt+0x2954>
   19344:	ldr	r0, [r4, #40]	; 0x28
   19348:	bl	13eac <__assert_fail@plt+0x2954>
   1934c:	ldr	r0, [r4, #12]
   19350:	bl	13eac <__assert_fail@plt+0x2954>
   19354:	ldr	r0, [r4, #48]	; 0x30
   19358:	bl	13eac <__assert_fail@plt+0x2954>
   1935c:	ldr	r0, [r4, #44]	; 0x2c
   19360:	bl	13eac <__assert_fail@plt+0x2954>
   19364:	mov	r0, r4
   19368:	bl	13eac <__assert_fail@plt+0x2954>
   1936c:	ldr	r4, [sp]
   19370:	add	sp, sp, #4
   19374:	pop	{pc}		; (ldr pc, [sp], #4)
   19378:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1937c:	strd	r6, [sp, #8]
   19380:	strd	r8, [sp, #16]
   19384:	strd	sl, [sp, #24]
   19388:	str	lr, [sp, #32]
   1938c:	sub	sp, sp, #20
   19390:	mov	ip, #0
   19394:	str	ip, [r0]
   19398:	ldr	r5, [r2, #4]
   1939c:	cmp	r5, ip
   193a0:	moveq	r5, #0
   193a4:	beq	1963c <__assert_fail@plt+0x80e4>
   193a8:	add	r8, r3, r5
   193ac:	ble	193c8 <__assert_fail@plt+0x7e70>
   193b0:	ldr	ip, [r2, #8]
   193b4:	add	r5, ip, r5, lsl #2
   193b8:	ldr	lr, [ip], #4
   193bc:	add	r8, r8, lr
   193c0:	cmp	r5, ip
   193c4:	bne	193b8 <__assert_fail@plt+0x7e60>
   193c8:	mov	r4, r3
   193cc:	mov	r7, r2
   193d0:	mov	r9, r1
   193d4:	str	r0, [sp, #12]
   193d8:	ldr	r3, [r1, #68]	; 0x44
   193dc:	and	r3, r3, r8
   193e0:	add	r3, r3, r3, lsl #1
   193e4:	lsl	r3, r3, #2
   193e8:	ldr	r2, [r1, #32]
   193ec:	add	r1, r2, r3
   193f0:	ldr	fp, [r2, r3]
   193f4:	cmp	fp, #0
   193f8:	ble	19450 <__assert_fail@plt+0x7ef8>
   193fc:	ldr	sl, [r1, #8]
   19400:	sub	sl, sl, #4
   19404:	mov	r6, #0
   19408:	b	19418 <__assert_fail@plt+0x7ec0>
   1940c:	add	r6, r6, #1
   19410:	cmp	r6, fp
   19414:	beq	19450 <__assert_fail@plt+0x7ef8>
   19418:	ldr	r5, [sl, #4]!
   1941c:	ldr	r3, [r5]
   19420:	cmp	r3, r8
   19424:	bne	1940c <__assert_fail@plt+0x7eb4>
   19428:	ldrb	r3, [r5, #52]	; 0x34
   1942c:	and	r3, r3, #15
   19430:	cmp	r3, r4
   19434:	bne	1940c <__assert_fail@plt+0x7eb4>
   19438:	mov	r1, r7
   1943c:	ldr	r0, [r5, #40]	; 0x28
   19440:	bl	164c8 <__assert_fail@plt+0x4f70>
   19444:	cmp	r0, #0
   19448:	beq	1940c <__assert_fail@plt+0x7eb4>
   1944c:	b	1963c <__assert_fail@plt+0x80e4>
   19450:	mov	r1, #1
   19454:	mov	r0, #56	; 0x38
   19458:	bl	25880 <__assert_fail@plt+0x14328>
   1945c:	subs	r5, r0, #0
   19460:	beq	19514 <__assert_fail@plt+0x7fbc>
   19464:	add	fp, r5, #4
   19468:	mov	r1, r7
   1946c:	mov	r0, fp
   19470:	bl	17b1c <__assert_fail@plt+0x65c4>
   19474:	subs	r6, r0, #0
   19478:	bne	194bc <__assert_fail@plt+0x7f64>
   1947c:	ldrb	r3, [r5, #52]	; 0x34
   19480:	bfi	r3, r4, #0, #4
   19484:	strb	r3, [r5, #52]	; 0x34
   19488:	str	fp, [r5, #40]	; 0x28
   1948c:	ldr	r3, [r7, #4]
   19490:	cmp	r3, #0
   19494:	ble	19624 <__assert_fail@plt+0x80cc>
   19498:	mov	sl, r6
   1949c:	and	r3, r4, #4
   194a0:	str	r3, [sp, #4]
   194a4:	and	r3, r4, #2
   194a8:	str	r3, [sp]
   194ac:	and	r3, r4, #1
   194b0:	str	r8, [sp, #8]
   194b4:	mov	r8, r3
   194b8:	b	1958c <__assert_fail@plt+0x8034>
   194bc:	mov	r0, r5
   194c0:	bl	13eac <__assert_fail@plt+0x2954>
   194c4:	b	19514 <__assert_fail@plt+0x7fbc>
   194c8:	ldrb	r3, [r5, #52]	; 0x34
   194cc:	orr	r3, r3, #64	; 0x40
   194d0:	strb	r3, [r5, #52]	; 0x34
   194d4:	b	195f0 <__assert_fail@plt+0x8098>
   194d8:	mov	r0, #12
   194dc:	bl	258f4 <__assert_fail@plt+0x1439c>
   194e0:	cmp	r0, #0
   194e4:	beq	1950c <__assert_fail@plt+0x7fb4>
   194e8:	str	r0, [r5, #40]	; 0x28
   194ec:	mov	r1, r7
   194f0:	bl	17b1c <__assert_fail@plt+0x65c4>
   194f4:	subs	sl, r0, #0
   194f8:	bne	19528 <__assert_fail@plt+0x7fd0>
   194fc:	ldrb	r3, [r5, #52]	; 0x34
   19500:	orr	r3, r3, #128	; 0x80
   19504:	strb	r3, [r5, #52]	; 0x34
   19508:	b	19604 <__assert_fail@plt+0x80ac>
   1950c:	mov	r0, r5
   19510:	bl	19310 <__assert_fail@plt+0x7db8>
   19514:	mov	r3, #12
   19518:	ldr	r2, [sp, #12]
   1951c:	str	r3, [r2]
   19520:	mov	r5, #0
   19524:	b	1963c <__assert_fail@plt+0x80e4>
   19528:	mov	r0, r5
   1952c:	bl	19310 <__assert_fail@plt+0x7db8>
   19530:	b	19514 <__assert_fail@plt+0x7fbc>
   19534:	tst	r4, #2
   19538:	beq	19544 <__assert_fail@plt+0x7fec>
   1953c:	cmp	r8, #0
   19540:	bne	1956c <__assert_fail@plt+0x8014>
   19544:	tst	r4, #16
   19548:	beq	19558 <__assert_fail@plt+0x8000>
   1954c:	ldr	r3, [sp]
   19550:	cmp	r3, #0
   19554:	beq	1956c <__assert_fail@plt+0x8014>
   19558:	tst	r4, #64	; 0x40
   1955c:	beq	1957c <__assert_fail@plt+0x8024>
   19560:	ldr	r3, [sp, #4]
   19564:	cmp	r3, #0
   19568:	bne	1957c <__assert_fail@plt+0x8024>
   1956c:	sub	r1, r6, sl
   19570:	mov	r0, fp
   19574:	bl	165c8 <__assert_fail@plt+0x5070>
   19578:	add	sl, sl, #1
   1957c:	add	r6, r6, #1
   19580:	ldr	r3, [r7, #4]
   19584:	cmp	r6, r3
   19588:	bge	19620 <__assert_fail@plt+0x80c8>
   1958c:	ldr	r3, [r7, #8]
   19590:	ldr	r2, [r3, r6, lsl #2]
   19594:	ldr	r3, [r9]
   19598:	add	r3, r3, r2, lsl #3
   1959c:	ldrb	r1, [r3, #4]
   195a0:	ldr	r4, [r3, #4]
   195a4:	ubfx	r4, r4, #8, #10
   195a8:	cmp	r1, #1
   195ac:	cmpeq	r4, #0
   195b0:	beq	1957c <__assert_fail@plt+0x8024>
   195b4:	ldrb	r2, [r5, #52]	; 0x34
   195b8:	ubfx	r0, r2, #5, #1
   195bc:	ldrb	r3, [r3, #6]
   195c0:	ubfx	r3, r3, #4, #1
   195c4:	orr	r0, r0, r3
   195c8:	mov	r3, r2
   195cc:	bfi	r3, r0, #5, #1
   195d0:	strb	r3, [r5, #52]	; 0x34
   195d4:	cmp	r1, #2
   195d8:	uxtbeq	r3, r3
   195dc:	orreq	r3, r3, #16
   195e0:	strbeq	r3, [r5, #52]	; 0x34
   195e4:	beq	195f0 <__assert_fail@plt+0x8098>
   195e8:	cmp	r1, #4
   195ec:	beq	194c8 <__assert_fail@plt+0x7f70>
   195f0:	cmp	r4, #0
   195f4:	beq	1957c <__assert_fail@plt+0x8024>
   195f8:	ldr	r3, [r5, #40]	; 0x28
   195fc:	cmp	fp, r3
   19600:	beq	194d8 <__assert_fail@plt+0x7f80>
   19604:	tst	r4, #1
   19608:	beq	19534 <__assert_fail@plt+0x7fdc>
   1960c:	cmp	r8, #0
   19610:	beq	1956c <__assert_fail@plt+0x8014>
   19614:	tst	r4, #2
   19618:	bne	1956c <__assert_fail@plt+0x8014>
   1961c:	b	19544 <__assert_fail@plt+0x7fec>
   19620:	ldr	r8, [sp, #8]
   19624:	mov	r2, r8
   19628:	mov	r1, r5
   1962c:	mov	r0, r9
   19630:	bl	1768c <__assert_fail@plt+0x6134>
   19634:	cmp	r0, #0
   19638:	bne	1965c <__assert_fail@plt+0x8104>
   1963c:	mov	r0, r5
   19640:	add	sp, sp, #20
   19644:	ldrd	r4, [sp]
   19648:	ldrd	r6, [sp, #8]
   1964c:	ldrd	r8, [sp, #16]
   19650:	ldrd	sl, [sp, #24]
   19654:	add	sp, sp, #32
   19658:	pop	{pc}		; (ldr pc, [sp], #4)
   1965c:	mov	r0, r5
   19660:	bl	19310 <__assert_fail@plt+0x7db8>
   19664:	b	19514 <__assert_fail@plt+0x7fbc>
   19668:	strd	r4, [sp, #-16]!
   1966c:	str	r6, [sp, #8]
   19670:	str	lr, [sp, #12]
   19674:	ldr	r5, [r0]
   19678:	ldr	r0, [r5, #56]	; 0x38
   1967c:	cmp	r0, #0
   19680:	beq	19698 <__assert_fail@plt+0x8140>
   19684:	ldr	r4, [r0]
   19688:	bl	13eac <__assert_fail@plt+0x2954>
   1968c:	mov	r0, r4
   19690:	cmp	r4, #0
   19694:	bne	19684 <__assert_fail@plt+0x812c>
   19698:	mov	r4, #0
   1969c:	str	r4, [r5, #56]	; 0x38
   196a0:	mov	r3, #31
   196a4:	str	r3, [r5, #64]	; 0x40
   196a8:	str	r4, [r5, #52]	; 0x34
   196ac:	ldr	r0, [r5, #16]
   196b0:	bl	13eac <__assert_fail@plt+0x2954>
   196b4:	str	r4, [r5, #16]
   196b8:	ldrd	r4, [sp]
   196bc:	ldr	r6, [sp, #8]
   196c0:	add	sp, sp, #12
   196c4:	pop	{pc}		; (ldr pc, [sp], #4)
   196c8:	str	r4, [sp, #-8]!
   196cc:	str	lr, [sp, #4]
   196d0:	mov	r4, r0
   196d4:	ldr	r0, [r0, #8]
   196d8:	bl	13eac <__assert_fail@plt+0x2954>
   196dc:	ldr	r0, [r4, #12]
   196e0:	bl	13eac <__assert_fail@plt+0x2954>
   196e4:	ldrb	r3, [r4, #75]	; 0x4b
   196e8:	cmp	r3, #0
   196ec:	bne	196fc <__assert_fail@plt+0x81a4>
   196f0:	ldr	r4, [sp]
   196f4:	add	sp, sp, #4
   196f8:	pop	{pc}		; (ldr pc, [sp], #4)
   196fc:	ldr	r0, [r4, #4]
   19700:	bl	13eac <__assert_fail@plt+0x2954>
   19704:	b	196f0 <__assert_fail@plt+0x8198>
   19708:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1970c:	strd	r6, [sp, #8]
   19710:	str	r8, [sp, #16]
   19714:	str	lr, [sp, #20]
   19718:	mov	r6, r0
   1971c:	ldr	r3, [r0]
   19720:	cmp	r3, #0
   19724:	beq	19754 <__assert_fail@plt+0x81fc>
   19728:	ldr	r3, [r0, #8]
   1972c:	cmp	r3, #0
   19730:	beq	19754 <__assert_fail@plt+0x81fc>
   19734:	mov	r4, #0
   19738:	ldr	r0, [r6]
   1973c:	add	r0, r0, r4, lsl #3
   19740:	bl	18f60 <__assert_fail@plt+0x7a08>
   19744:	add	r4, r4, #1
   19748:	ldr	r3, [r6, #8]
   1974c:	cmp	r3, r4
   19750:	bhi	19738 <__assert_fail@plt+0x81e0>
   19754:	ldr	r0, [r6, #12]
   19758:	bl	13eac <__assert_fail@plt+0x2954>
   1975c:	ldr	r3, [r6, #8]
   19760:	cmp	r3, #0
   19764:	beq	197d4 <__assert_fail@plt+0x827c>
   19768:	mov	r4, #0
   1976c:	mov	r5, r4
   19770:	b	19788 <__assert_fail@plt+0x8230>
   19774:	add	r5, r5, #1
   19778:	add	r4, r4, #12
   1977c:	ldr	r3, [r6, #8]
   19780:	cmp	r3, r5
   19784:	bls	197d4 <__assert_fail@plt+0x827c>
   19788:	ldr	r3, [r6, #24]
   1978c:	cmp	r3, #0
   19790:	beq	197a0 <__assert_fail@plt+0x8248>
   19794:	add	r3, r3, r4
   19798:	ldr	r0, [r3, #8]
   1979c:	bl	13eac <__assert_fail@plt+0x2954>
   197a0:	ldr	r3, [r6, #28]
   197a4:	cmp	r3, #0
   197a8:	beq	197b8 <__assert_fail@plt+0x8260>
   197ac:	add	r3, r3, r4
   197b0:	ldr	r0, [r3, #8]
   197b4:	bl	13eac <__assert_fail@plt+0x2954>
   197b8:	ldr	r3, [r6, #20]
   197bc:	cmp	r3, #0
   197c0:	beq	19774 <__assert_fail@plt+0x821c>
   197c4:	add	r3, r3, r4
   197c8:	ldr	r0, [r3, #8]
   197cc:	bl	13eac <__assert_fail@plt+0x2954>
   197d0:	b	19774 <__assert_fail@plt+0x821c>
   197d4:	ldr	r0, [r6, #20]
   197d8:	bl	13eac <__assert_fail@plt+0x2954>
   197dc:	ldr	r0, [r6, #24]
   197e0:	bl	13eac <__assert_fail@plt+0x2954>
   197e4:	ldr	r0, [r6, #28]
   197e8:	bl	13eac <__assert_fail@plt+0x2954>
   197ec:	ldr	r0, [r6]
   197f0:	bl	13eac <__assert_fail@plt+0x2954>
   197f4:	ldr	r3, [r6, #32]
   197f8:	cmp	r3, #0
   197fc:	beq	19860 <__assert_fail@plt+0x8308>
   19800:	mov	r7, #0
   19804:	mov	r8, r7
   19808:	b	19828 <__assert_fail@plt+0x82d0>
   1980c:	ldr	r0, [r5, #8]
   19810:	bl	13eac <__assert_fail@plt+0x2954>
   19814:	add	r8, r8, #1
   19818:	add	r7, r7, #12
   1981c:	ldr	r3, [r6, #68]	; 0x44
   19820:	cmp	r3, r8
   19824:	bcc	19860 <__assert_fail@plt+0x8308>
   19828:	ldr	r3, [r6, #32]
   1982c:	add	r5, r3, r7
   19830:	ldr	r3, [r3, r7]
   19834:	cmp	r3, #0
   19838:	ble	1980c <__assert_fail@plt+0x82b4>
   1983c:	mov	r4, #0
   19840:	ldr	r3, [r5, #8]
   19844:	ldr	r0, [r3, r4, lsl #2]
   19848:	bl	19310 <__assert_fail@plt+0x7db8>
   1984c:	add	r4, r4, #1
   19850:	ldr	r3, [r5]
   19854:	cmp	r3, r4
   19858:	bgt	19840 <__assert_fail@plt+0x82e8>
   1985c:	b	1980c <__assert_fail@plt+0x82b4>
   19860:	ldr	r0, [r6, #32]
   19864:	bl	13eac <__assert_fail@plt+0x2954>
   19868:	ldr	r0, [r6, #60]	; 0x3c
   1986c:	movw	r3, #28516	; 0x6f64
   19870:	movt	r3, #2
   19874:	cmp	r0, r3
   19878:	beq	19880 <__assert_fail@plt+0x8328>
   1987c:	bl	13eac <__assert_fail@plt+0x2954>
   19880:	ldr	r0, [r6, #132]	; 0x84
   19884:	bl	13eac <__assert_fail@plt+0x2954>
   19888:	mov	r0, r6
   1988c:	bl	13eac <__assert_fail@plt+0x2954>
   19890:	ldrd	r4, [sp]
   19894:	ldrd	r6, [sp, #8]
   19898:	ldr	r8, [sp, #16]
   1989c:	add	sp, sp, #20
   198a0:	pop	{pc}		; (ldr pc, [sp], #4)
   198a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   198a8:	strd	r6, [sp, #8]
   198ac:	str	r8, [sp, #16]
   198b0:	str	lr, [sp, #20]
   198b4:	mov	r8, r0
   198b8:	ldr	r3, [r0, #124]	; 0x7c
   198bc:	cmp	r3, #0
   198c0:	ble	1994c <__assert_fail@plt+0x83f4>
   198c4:	mov	r7, #0
   198c8:	b	198e4 <__assert_fail@plt+0x838c>
   198cc:	mov	r0, r6
   198d0:	bl	13eac <__assert_fail@plt+0x2954>
   198d4:	add	r7, r7, #1
   198d8:	ldr	r3, [r8, #124]	; 0x7c
   198dc:	cmp	r3, r7
   198e0:	ble	1994c <__assert_fail@plt+0x83f4>
   198e4:	ldr	r3, [r8, #132]	; 0x84
   198e8:	ldr	r6, [r3, r7, lsl #2]
   198ec:	ldr	r3, [r6, #16]
   198f0:	cmp	r3, #0
   198f4:	ble	19924 <__assert_fail@plt+0x83cc>
   198f8:	mov	r4, #0
   198fc:	ldr	r3, [r6, #20]
   19900:	ldr	r5, [r3, r4, lsl #2]
   19904:	ldr	r0, [r5, #16]
   19908:	bl	13eac <__assert_fail@plt+0x2954>
   1990c:	mov	r0, r5
   19910:	bl	13eac <__assert_fail@plt+0x2954>
   19914:	add	r4, r4, #1
   19918:	ldr	r3, [r6, #16]
   1991c:	cmp	r3, r4
   19920:	bgt	198fc <__assert_fail@plt+0x83a4>
   19924:	ldr	r0, [r6, #20]
   19928:	bl	13eac <__assert_fail@plt+0x2954>
   1992c:	ldr	r3, [r6, #8]
   19930:	cmp	r3, #0
   19934:	beq	198cc <__assert_fail@plt+0x8374>
   19938:	ldr	r0, [r3, #8]
   1993c:	bl	13eac <__assert_fail@plt+0x2954>
   19940:	ldr	r0, [r6, #8]
   19944:	bl	13eac <__assert_fail@plt+0x2954>
   19948:	b	198cc <__assert_fail@plt+0x8374>
   1994c:	mov	r3, #0
   19950:	str	r3, [r8, #124]	; 0x7c
   19954:	str	r3, [r8, #108]	; 0x6c
   19958:	ldrd	r4, [sp]
   1995c:	ldrd	r6, [sp, #8]
   19960:	ldr	r8, [sp, #16]
   19964:	add	sp, sp, #20
   19968:	pop	{pc}		; (ldr pc, [sp], #4)
   1996c:	strd	r4, [sp, #-16]!
   19970:	str	r6, [sp, #8]
   19974:	str	lr, [sp, #12]
   19978:	mov	r4, r0
   1997c:	ldr	r0, [r0, #8]
   19980:	add	r5, r4, #12
   19984:	cmp	r0, r5
   19988:	beq	19990 <__assert_fail@plt+0x8438>
   1998c:	bl	13eac <__assert_fail@plt+0x2954>
   19990:	mov	r3, #0
   19994:	str	r3, [r4]
   19998:	mov	r3, #16
   1999c:	str	r3, [r4, #4]
   199a0:	str	r5, [r4, #8]
   199a4:	ldrd	r4, [sp]
   199a8:	ldr	r6, [sp, #8]
   199ac:	add	sp, sp, #12
   199b0:	pop	{pc}		; (ldr pc, [sp], #4)
   199b4:	strd	r4, [sp, #-16]!
   199b8:	str	r6, [sp, #8]
   199bc:	str	lr, [sp, #12]
   199c0:	subs	r5, r0, #0
   199c4:	beq	19a18 <__assert_fail@plt+0x84c0>
   199c8:	ldr	r3, [r5]
   199cc:	cmp	r3, #0
   199d0:	ble	19a10 <__assert_fail@plt+0x84b8>
   199d4:	mov	r4, #0
   199d8:	mov	r6, r4
   199dc:	ldr	r3, [r5, #8]
   199e0:	add	r3, r3, r4
   199e4:	ldr	r0, [r3, #20]
   199e8:	bl	13eac <__assert_fail@plt+0x2954>
   199ec:	ldr	r3, [r5, #8]
   199f0:	add	r3, r3, r4
   199f4:	ldr	r0, [r3, #8]
   199f8:	bl	13eac <__assert_fail@plt+0x2954>
   199fc:	add	r6, r6, #1
   19a00:	add	r4, r4, #24
   19a04:	ldr	r3, [r5]
   19a08:	cmp	r3, r6
   19a0c:	bgt	199dc <__assert_fail@plt+0x8484>
   19a10:	ldr	r0, [r5, #8]
   19a14:	bl	13eac <__assert_fail@plt+0x2954>
   19a18:	mov	r0, #0
   19a1c:	ldrd	r4, [sp]
   19a20:	ldr	r6, [sp, #8]
   19a24:	add	sp, sp, #12
   19a28:	pop	{pc}		; (ldr pc, [sp], #4)
   19a2c:	strd	r4, [sp, #-16]!
   19a30:	str	r6, [sp, #8]
   19a34:	str	lr, [sp, #12]
   19a38:	ldr	r2, [r1, #28]
   19a3c:	ldrb	r3, [r1, #24]
   19a40:	sub	r3, r3, #2
   19a44:	cmp	r3, #14
   19a48:	ldrls	pc, [pc, r3, lsl #2]
   19a4c:	b	19b84 <__assert_fail@plt+0x862c>
   19a50:	muleq	r1, ip, fp
   19a54:	andeq	r9, r1, r4, lsl #23
   19a58:	andeq	r9, r1, r8, asr #22
   19a5c:	andeq	r9, r1, r4, lsl #23
   19a60:	andeq	r9, r1, r4, lsl #23
   19a64:	andeq	r9, r1, r4, lsl #23
   19a68:	andeq	r9, r1, ip, lsr #22
   19a6c:	andeq	r9, r1, ip, lsr #22
   19a70:	andeq	r9, r1, ip, lsl #21
   19a74:	andeq	r9, r1, ip, lsl #21
   19a78:	andeq	r9, r1, ip, lsr #22
   19a7c:	andeq	r9, r1, r4, lsl #23
   19a80:	andeq	r9, r1, r4, lsl #23
   19a84:	andeq	r9, r1, r4, lsl #23
   19a88:	muleq	r1, ip, fp
   19a8c:	ldrb	r3, [r0, #88]	; 0x58
   19a90:	orr	r3, r3, #1
   19a94:	strb	r3, [r0, #88]	; 0x58
   19a98:	ldr	r3, [r1, #4]
   19a9c:	cmp	r3, #0
   19aa0:	ldrne	r3, [r3, #12]
   19aa4:	ldreq	r3, [r1, #16]
   19aa8:	ldr	r4, [r3, #28]
   19aac:	ldr	r3, [r1, #8]
   19ab0:	cmp	r3, #0
   19ab4:	ldrne	r3, [r3, #12]
   19ab8:	ldreq	r3, [r1, #16]
   19abc:	ldr	r5, [r3, #28]
   19ac0:	add	r2, r2, r2, lsl #1
   19ac4:	lsl	r2, r2, #2
   19ac8:	ldr	r3, [r0, #20]
   19acc:	add	r6, r3, r2
   19ad0:	mov	r1, #2
   19ad4:	str	r1, [r3, r2]
   19ad8:	mov	r0, #8
   19adc:	bl	258f4 <__assert_fail@plt+0x1439c>
   19ae0:	str	r0, [r6, #8]
   19ae4:	cmp	r0, #0
   19ae8:	beq	19bb0 <__assert_fail@plt+0x8658>
   19aec:	cmp	r4, r5
   19af0:	beq	19b18 <__assert_fail@plt+0x85c0>
   19af4:	mov	r3, #2
   19af8:	str	r3, [r6, #4]
   19afc:	cmp	r4, r5
   19b00:	strlt	r4, [r0]
   19b04:	strlt	r5, [r0, #4]
   19b08:	strge	r5, [r0]
   19b0c:	strge	r4, [r0, #4]
   19b10:	mov	r0, #0
   19b14:	b	19ba0 <__assert_fail@plt+0x8648>
   19b18:	mov	r3, #1
   19b1c:	str	r3, [r6, #4]
   19b20:	str	r4, [r0]
   19b24:	mov	r0, #0
   19b28:	b	19ba0 <__assert_fail@plt+0x8648>
   19b2c:	ldr	r1, [r1, #16]
   19b30:	add	r2, r2, r2, lsl #1
   19b34:	ldr	r0, [r0, #20]
   19b38:	ldr	r1, [r1, #28]
   19b3c:	add	r0, r0, r2, lsl #2
   19b40:	bl	175f8 <__assert_fail@plt+0x60a0>
   19b44:	b	19ba0 <__assert_fail@plt+0x8648>
   19b48:	ldr	r3, [r1, #16]
   19b4c:	ldr	ip, [r3, #28]
   19b50:	ldr	r3, [r0, #12]
   19b54:	str	ip, [r3, r2, lsl #2]
   19b58:	ldrb	r3, [r1, #24]
   19b5c:	cmp	r3, #4
   19b60:	movne	r0, #0
   19b64:	bne	19ba0 <__assert_fail@plt+0x8648>
   19b68:	ldr	r1, [r0, #12]
   19b6c:	add	ip, r2, r2, lsl #1
   19b70:	ldr	r0, [r0, #20]
   19b74:	ldr	r1, [r1, r2, lsl #2]
   19b78:	add	r0, r0, ip, lsl #2
   19b7c:	bl	175f8 <__assert_fail@plt+0x60a0>
   19b80:	b	19ba0 <__assert_fail@plt+0x8648>
   19b84:	ldr	r3, [r1, #16]
   19b88:	ldr	r1, [r3, #28]
   19b8c:	ldr	r3, [r0, #12]
   19b90:	str	r1, [r3, r2, lsl #2]
   19b94:	mov	r0, #0
   19b98:	b	19ba0 <__assert_fail@plt+0x8648>
   19b9c:	mov	r0, #0
   19ba0:	ldrd	r4, [sp]
   19ba4:	ldr	r6, [sp, #8]
   19ba8:	add	sp, sp, #12
   19bac:	pop	{pc}		; (ldr pc, [sp], #4)
   19bb0:	mov	r0, #12
   19bb4:	b	19ba0 <__assert_fail@plt+0x8648>
   19bb8:	strd	r4, [sp, #-16]!
   19bbc:	str	r6, [sp, #8]
   19bc0:	str	lr, [sp, #12]
   19bc4:	mov	r4, r0
   19bc8:	mov	r5, r1
   19bcc:	ldr	r1, [r0]
   19bd0:	cmp	r1, #0
   19bd4:	beq	19c0c <__assert_fail@plt+0x86b4>
   19bd8:	ldr	r3, [r0, #4]
   19bdc:	cmp	r3, #0
   19be0:	bne	19c20 <__assert_fail@plt+0x86c8>
   19be4:	ldr	r3, [r0, #8]
   19be8:	str	r5, [r3]
   19bec:	ldr	r3, [r0, #4]
   19bf0:	add	r3, r3, #1
   19bf4:	str	r3, [r0, #4]
   19bf8:	mov	r0, #1
   19bfc:	ldrd	r4, [sp]
   19c00:	ldr	r6, [sp, #8]
   19c04:	add	sp, sp, #12
   19c08:	pop	{pc}		; (ldr pc, [sp], #4)
   19c0c:	mov	r1, r5
   19c10:	bl	175f8 <__assert_fail@plt+0x60a0>
   19c14:	clz	r0, r0
   19c18:	lsr	r0, r0, #5
   19c1c:	b	19bfc <__assert_fail@plt+0x86a4>
   19c20:	cmp	r1, r3
   19c24:	beq	19c80 <__assert_fail@plt+0x8728>
   19c28:	ldr	r1, [r4, #8]
   19c2c:	ldr	r3, [r1]
   19c30:	cmp	r3, r5
   19c34:	ble	19ca4 <__assert_fail@plt+0x874c>
   19c38:	ldr	r3, [r4, #4]
   19c3c:	cmp	r3, #0
   19c40:	ble	19c64 <__assert_fail@plt+0x870c>
   19c44:	sub	r2, r3, #-1073741823	; 0xc0000001
   19c48:	lsl	r2, r2, #2
   19c4c:	ldr	r1, [r4, #8]
   19c50:	ldr	r0, [r1, r2]
   19c54:	str	r0, [r1, r3, lsl #2]
   19c58:	sub	r2, r2, #4
   19c5c:	subs	r3, r3, #1
   19c60:	bne	19c4c <__assert_fail@plt+0x86f4>
   19c64:	ldr	r2, [r4, #8]
   19c68:	str	r5, [r2, r3, lsl #2]
   19c6c:	ldr	r3, [r4, #4]
   19c70:	add	r3, r3, #1
   19c74:	str	r3, [r4, #4]
   19c78:	mov	r0, #1
   19c7c:	b	19bfc <__assert_fail@plt+0x86a4>
   19c80:	lsl	r3, r1, #1
   19c84:	str	r3, [r0]
   19c88:	lsl	r1, r1, #3
   19c8c:	ldr	r0, [r0, #8]
   19c90:	bl	25930 <__assert_fail@plt+0x143d8>
   19c94:	cmp	r0, #0
   19c98:	beq	19ce4 <__assert_fail@plt+0x878c>
   19c9c:	str	r0, [r4, #8]
   19ca0:	b	19c28 <__assert_fail@plt+0x86d0>
   19ca4:	ldr	r3, [r4, #4]
   19ca8:	sub	r0, r3, #-1073741823	; 0xc0000001
   19cac:	lsl	r2, r0, #2
   19cb0:	ldr	r0, [r1, r0, lsl #2]
   19cb4:	cmp	r5, r0
   19cb8:	bge	19c64 <__assert_fail@plt+0x870c>
   19cbc:	add	r2, r2, #4
   19cc0:	str	r0, [r1, r2]
   19cc4:	sub	r3, r3, #1
   19cc8:	ldr	r1, [r4, #8]
   19ccc:	add	r0, r1, r2
   19cd0:	ldr	r0, [r0, #-8]
   19cd4:	sub	r2, r2, #4
   19cd8:	cmp	r0, r5
   19cdc:	bgt	19cc0 <__assert_fail@plt+0x8768>
   19ce0:	b	19c64 <__assert_fail@plt+0x870c>
   19ce4:	mov	r0, #0
   19ce8:	b	19bfc <__assert_fail@plt+0x86a4>
   19cec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19cf0:	strd	r6, [sp, #8]
   19cf4:	strd	r8, [sp, #16]
   19cf8:	strd	sl, [sp, #24]
   19cfc:	str	lr, [sp, #32]
   19d00:	sub	sp, sp, #20
   19d04:	mov	r4, r0
   19d08:	mov	r5, r1
   19d0c:	mov	r6, r2
   19d10:	mov	r9, r3
   19d14:	ldr	r7, [sp, #56]	; 0x38
   19d18:	mov	r8, #0
   19d1c:	b	19eec <__assert_fail@plt+0x8994>
   19d20:	lsl	fp, r5, #2
   19d24:	ldr	r3, [r4, #12]
   19d28:	ldr	r5, [r3, r5, lsl #2]
   19d2c:	str	r6, [sp, #12]
   19d30:	add	r6, r6, r6, lsl #1
   19d34:	lsl	sl, r6, #2
   19d38:	ldr	r3, [r4, #20]
   19d3c:	add	r3, r3, sl
   19d40:	str	r8, [r3, #4]
   19d44:	mov	r2, r7
   19d48:	mov	r1, r5
   19d4c:	mov	r0, r4
   19d50:	bl	1926c <__assert_fail@plt+0x7d14>
   19d54:	mov	r6, r0
   19d58:	cmn	r0, #1
   19d5c:	beq	19fe4 <__assert_fail@plt+0x8a8c>
   19d60:	ldr	r3, [r4, #12]
   19d64:	ldr	r2, [r3, fp]
   19d68:	ldr	r1, [sp, #12]
   19d6c:	str	r2, [r3, r1, lsl #2]
   19d70:	ldr	r0, [r4, #20]
   19d74:	mov	r1, r6
   19d78:	add	r0, r0, sl
   19d7c:	bl	19bb8 <__assert_fail@plt+0x8660>
   19d80:	cmp	r0, #0
   19d84:	bne	19eec <__assert_fail@plt+0x8994>
   19d88:	mov	r0, #12
   19d8c:	b	1a010 <__assert_fail@plt+0x8ab8>
   19d90:	ldr	r3, [r4, #12]
   19d94:	ldr	r2, [r3, r5, lsl #2]
   19d98:	str	r2, [r3, r6, lsl #2]
   19d9c:	b	1a010 <__assert_fail@plt+0x8ab8>
   19da0:	ldr	r2, [r2, #8]
   19da4:	ldr	fp, [r2]
   19da8:	add	sl, r6, r6, lsl #1
   19dac:	lsl	sl, sl, #2
   19db0:	add	r3, r3, sl
   19db4:	str	r8, [r3, #4]
   19db8:	cmp	r5, r9
   19dbc:	movne	r3, #0
   19dc0:	moveq	r3, #1
   19dc4:	cmp	r5, r6
   19dc8:	moveq	r3, #0
   19dcc:	cmp	r3, #0
   19dd0:	bne	19e24 <__assert_fail@plt+0x88cc>
   19dd4:	ldr	r3, [r4]
   19dd8:	add	r1, r3, r1
   19ddc:	ldr	r3, [r1, #4]
   19de0:	ubfx	r3, r3, #8, #10
   19de4:	orr	r7, r7, r3
   19de8:	mov	r2, r7
   19dec:	mov	r1, fp
   19df0:	mov	r0, r4
   19df4:	bl	1926c <__assert_fail@plt+0x7d14>
   19df8:	mov	r6, r0
   19dfc:	cmn	r0, #1
   19e00:	beq	19fec <__assert_fail@plt+0x8a94>
   19e04:	ldr	r0, [r4, #20]
   19e08:	mov	r1, r6
   19e0c:	add	r0, r0, sl
   19e10:	bl	19bb8 <__assert_fail@plt+0x8660>
   19e14:	cmp	r0, #0
   19e18:	beq	19e44 <__assert_fail@plt+0x88ec>
   19e1c:	mov	r5, fp
   19e20:	b	19eec <__assert_fail@plt+0x8994>
   19e24:	ldr	r0, [r4, #20]
   19e28:	mov	r1, fp
   19e2c:	add	r0, r0, sl
   19e30:	bl	19bb8 <__assert_fail@plt+0x8660>
   19e34:	cmp	r0, #0
   19e38:	movne	r0, #0
   19e3c:	moveq	r0, #12
   19e40:	b	1a010 <__assert_fail@plt+0x8ab8>
   19e44:	mov	r0, #12
   19e48:	b	1a010 <__assert_fail@plt+0x8ab8>
   19e4c:	sub	r1, r1, #1
   19e50:	add	r2, r2, r0
   19e54:	ldrb	r3, [r2, #6]
   19e58:	ubfx	r3, r3, #2, #1
   19e5c:	cmp	r1, #0
   19e60:	movle	r3, #0
   19e64:	andgt	r3, r3, #1
   19e68:	cmp	r3, #0
   19e6c:	beq	19f84 <__assert_fail@plt+0x8a2c>
   19e70:	ldr	r3, [ip, #-4]!
   19e74:	cmp	r5, r3
   19e78:	bne	19e4c <__assert_fail@plt+0x88f4>
   19e7c:	ldr	r3, [r2, #4]
   19e80:	ubfx	r3, r3, #8, #10
   19e84:	cmp	r7, r3
   19e88:	bne	19e4c <__assert_fail@plt+0x88f4>
   19e8c:	cmn	r1, #1
   19e90:	beq	19f84 <__assert_fail@plt+0x8a2c>
   19e94:	ldr	r0, [r4, #20]
   19e98:	add	r0, r0, fp
   19e9c:	bl	19bb8 <__assert_fail@plt+0x8660>
   19ea0:	cmp	r0, #0
   19ea4:	beq	1a004 <__assert_fail@plt+0x8aac>
   19ea8:	ldr	r3, [r4, #20]
   19eac:	add	sl, r3, sl
   19eb0:	ldr	r3, [sl, #8]
   19eb4:	ldr	r5, [r3, #4]
   19eb8:	mov	r2, r7
   19ebc:	mov	r1, r5
   19ec0:	mov	r0, r4
   19ec4:	bl	1926c <__assert_fail@plt+0x7d14>
   19ec8:	mov	r6, r0
   19ecc:	cmn	r0, #1
   19ed0:	beq	1a00c <__assert_fail@plt+0x8ab4>
   19ed4:	ldr	r0, [r4, #20]
   19ed8:	mov	r1, r6
   19edc:	add	r0, r0, fp
   19ee0:	bl	19bb8 <__assert_fail@plt+0x8660>
   19ee4:	cmp	r0, #0
   19ee8:	beq	19fdc <__assert_fail@plt+0x8a84>
   19eec:	lsl	r1, r5, #3
   19ef0:	ldr	r3, [r4]
   19ef4:	add	r3, r3, r1
   19ef8:	ldrb	r3, [r3, #4]
   19efc:	cmp	r3, #4
   19f00:	beq	19d20 <__assert_fail@plt+0x87c8>
   19f04:	ldr	r3, [r4, #20]
   19f08:	add	sl, r5, r5, lsl #1
   19f0c:	lsl	sl, sl, #2
   19f10:	add	r2, r3, sl
   19f14:	ldr	r0, [r2, #4]
   19f18:	cmp	r0, #0
   19f1c:	beq	19d90 <__assert_fail@plt+0x8838>
   19f20:	cmp	r0, #1
   19f24:	beq	19da0 <__assert_fail@plt+0x8848>
   19f28:	ldr	r2, [r2, #8]
   19f2c:	ldr	r5, [r2]
   19f30:	add	r6, r6, r6, lsl #1
   19f34:	lsl	fp, r6, #2
   19f38:	add	r3, r3, fp
   19f3c:	str	r8, [r3, #4]
   19f40:	ldr	lr, [r4, #8]
   19f44:	sub	r1, lr, #1
   19f48:	ldr	r0, [r4]
   19f4c:	add	r2, r0, r1, lsl #3
   19f50:	ldrb	r3, [r2, #6]
   19f54:	ubfx	r3, r3, #2, #1
   19f58:	cmp	r1, #0
   19f5c:	movle	r3, #0
   19f60:	andgt	r3, r3, #1
   19f64:	cmp	r3, #0
   19f68:	beq	19f84 <__assert_fail@plt+0x8a2c>
   19f6c:	ldr	ip, [r4, #16]
   19f70:	add	ip, ip, lr, lsl #2
   19f74:	add	r0, r0, lr, lsl #3
   19f78:	sub	r0, r0, r2
   19f7c:	sub	r0, r0, #16
   19f80:	b	19e70 <__assert_fail@plt+0x8918>
   19f84:	mov	r2, r7
   19f88:	mov	r1, r5
   19f8c:	mov	r0, r4
   19f90:	bl	1926c <__assert_fail@plt+0x7d14>
   19f94:	mov	r6, r0
   19f98:	cmn	r0, #1
   19f9c:	beq	19ff4 <__assert_fail@plt+0x8a9c>
   19fa0:	ldr	r0, [r4, #20]
   19fa4:	mov	r1, r6
   19fa8:	add	r0, r0, fp
   19fac:	bl	19bb8 <__assert_fail@plt+0x8660>
   19fb0:	cmp	r0, #0
   19fb4:	beq	19ffc <__assert_fail@plt+0x8aa4>
   19fb8:	str	r7, [sp]
   19fbc:	mov	r3, r9
   19fc0:	mov	r2, r6
   19fc4:	mov	r1, r5
   19fc8:	mov	r0, r4
   19fcc:	bl	19cec <__assert_fail@plt+0x8794>
   19fd0:	cmp	r0, #0
   19fd4:	beq	19ea8 <__assert_fail@plt+0x8950>
   19fd8:	b	1a010 <__assert_fail@plt+0x8ab8>
   19fdc:	mov	r0, #12
   19fe0:	b	1a010 <__assert_fail@plt+0x8ab8>
   19fe4:	mov	r0, #12
   19fe8:	b	1a010 <__assert_fail@plt+0x8ab8>
   19fec:	mov	r0, #12
   19ff0:	b	1a010 <__assert_fail@plt+0x8ab8>
   19ff4:	mov	r0, #12
   19ff8:	b	1a010 <__assert_fail@plt+0x8ab8>
   19ffc:	mov	r0, #12
   1a000:	b	1a010 <__assert_fail@plt+0x8ab8>
   1a004:	mov	r0, #12
   1a008:	b	1a010 <__assert_fail@plt+0x8ab8>
   1a00c:	mov	r0, #12
   1a010:	add	sp, sp, #20
   1a014:	ldrd	r4, [sp]
   1a018:	ldrd	r6, [sp, #8]
   1a01c:	ldrd	r8, [sp, #16]
   1a020:	ldrd	sl, [sp, #24]
   1a024:	add	sp, sp, #32
   1a028:	pop	{pc}		; (ldr pc, [sp], #4)
   1a02c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a030:	strd	r6, [sp, #8]
   1a034:	strd	r8, [sp, #16]
   1a038:	str	sl, [sp, #24]
   1a03c:	str	lr, [sp, #28]
   1a040:	sub	sp, sp, #8
   1a044:	mov	r6, r0
   1a048:	mov	r7, r1
   1a04c:	mov	r4, r2
   1a050:	mov	r9, r3
   1a054:	ldr	r8, [sp, #40]	; 0x28
   1a058:	b	1a0a4 <__assert_fail@plt+0x8b4c>
   1a05c:	mov	r1, r4
   1a060:	mov	r0, r7
   1a064:	bl	19bb8 <__assert_fail@plt+0x8660>
   1a068:	cmp	r0, #0
   1a06c:	beq	1a12c <__assert_fail@plt+0x8bd4>
   1a070:	add	r5, r5, r5, lsl #1
   1a074:	lsl	r5, r5, #2
   1a078:	ldr	r3, [r6, #20]
   1a07c:	add	r3, r3, r5
   1a080:	ldr	sl, [r3, #4]
   1a084:	cmp	sl, #0
   1a088:	beq	1a130 <__assert_fail@plt+0x8bd8>
   1a08c:	cmp	sl, #2
   1a090:	beq	1a0fc <__assert_fail@plt+0x8ba4>
   1a094:	ldr	r3, [r6, #20]
   1a098:	add	r5, r3, r5
   1a09c:	ldr	r3, [r5, #8]
   1a0a0:	ldr	r4, [r3]
   1a0a4:	mov	r1, r4
   1a0a8:	mov	r0, r7
   1a0ac:	bl	16530 <__assert_fail@plt+0x4fd8>
   1a0b0:	subs	sl, r0, #0
   1a0b4:	bne	1a124 <__assert_fail@plt+0x8bcc>
   1a0b8:	mov	r5, r4
   1a0bc:	ldr	r3, [r6]
   1a0c0:	add	r2, r3, r4, lsl #3
   1a0c4:	ldrb	r2, [r2, #4]
   1a0c8:	cmp	r2, r8
   1a0cc:	bne	1a05c <__assert_fail@plt+0x8b04>
   1a0d0:	ldr	r3, [r3, r4, lsl #3]
   1a0d4:	cmp	r3, r9
   1a0d8:	bne	1a05c <__assert_fail@plt+0x8b04>
   1a0dc:	cmp	r8, #9
   1a0e0:	bne	1a130 <__assert_fail@plt+0x8bd8>
   1a0e4:	mov	r1, r4
   1a0e8:	mov	r0, r7
   1a0ec:	bl	19bb8 <__assert_fail@plt+0x8660>
   1a0f0:	cmp	r0, #0
   1a0f4:	moveq	sl, #12
   1a0f8:	b	1a130 <__assert_fail@plt+0x8bd8>
   1a0fc:	ldr	r3, [r3, #8]
   1a100:	ldr	r2, [r3, #4]
   1a104:	str	r8, [sp]
   1a108:	mov	r3, r9
   1a10c:	mov	r1, r7
   1a110:	mov	r0, r6
   1a114:	bl	1a02c <__assert_fail@plt+0x8ad4>
   1a118:	subs	sl, r0, #0
   1a11c:	beq	1a094 <__assert_fail@plt+0x8b3c>
   1a120:	b	1a130 <__assert_fail@plt+0x8bd8>
   1a124:	mov	sl, #0
   1a128:	b	1a130 <__assert_fail@plt+0x8bd8>
   1a12c:	mov	sl, #12
   1a130:	mov	r0, sl
   1a134:	add	sp, sp, #8
   1a138:	ldrd	r4, [sp]
   1a13c:	ldrd	r6, [sp, #8]
   1a140:	ldrd	r8, [sp, #16]
   1a144:	ldr	sl, [sp, #24]
   1a148:	add	sp, sp, #28
   1a14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a150:	strd	r4, [sp, #-16]!
   1a154:	str	r6, [sp, #8]
   1a158:	str	lr, [sp, #12]
   1a15c:	subs	r6, r1, #0
   1a160:	moveq	r2, #0
   1a164:	beq	1a2cc <__assert_fail@plt+0x8d74>
   1a168:	ldr	r2, [r6, #4]
   1a16c:	cmp	r2, #0
   1a170:	beq	1a2cc <__assert_fail@plt+0x8d74>
   1a174:	mov	r4, r0
   1a178:	ldr	r1, [r0]
   1a17c:	ldr	r3, [r0, #4]
   1a180:	add	r0, r3, r2, lsl #1
   1a184:	cmp	r1, r0
   1a188:	blt	1a1a8 <__assert_fail@plt+0x8c50>
   1a18c:	cmp	r3, #0
   1a190:	beq	1a1dc <__assert_fail@plt+0x8c84>
   1a194:	ldr	r2, [r6, #4]
   1a198:	add	r5, r3, r2, lsl #1
   1a19c:	sub	r2, r2, #1
   1a1a0:	sub	r3, r3, #1
   1a1a4:	b	1a214 <__assert_fail@plt+0x8cbc>
   1a1a8:	add	r1, r2, r1
   1a1ac:	lsl	r5, r1, #1
   1a1b0:	lsl	r1, r1, #3
   1a1b4:	ldr	r0, [r4, #8]
   1a1b8:	bl	25930 <__assert_fail@plt+0x143d8>
   1a1bc:	cmp	r0, #0
   1a1c0:	beq	1a2f8 <__assert_fail@plt+0x8da0>
   1a1c4:	str	r0, [r4, #8]
   1a1c8:	str	r5, [r4]
   1a1cc:	ldr	r3, [r4, #4]
   1a1d0:	cmp	r3, #0
   1a1d4:	bne	1a194 <__assert_fail@plt+0x8c3c>
   1a1d8:	b	1a1e0 <__assert_fail@plt+0x8c88>
   1a1dc:	ldr	r0, [r4, #8]
   1a1e0:	ldr	r3, [r6, #4]
   1a1e4:	str	r3, [r4, #4]
   1a1e8:	ldr	r2, [r6, #4]
   1a1ec:	lsl	r2, r2, #2
   1a1f0:	ldr	r1, [r6, #8]
   1a1f4:	bl	11264 <memcpy@plt>
   1a1f8:	mov	r2, #0
   1a1fc:	b	1a2cc <__assert_fail@plt+0x8d74>
   1a200:	cmp	r0, r1
   1a204:	sublt	r2, r2, #1
   1a208:	sublt	r5, r5, #1
   1a20c:	strlt	r1, [ip, r5, lsl #2]
   1a210:	subge	r3, r3, #1
   1a214:	cmp	r2, #0
   1a218:	cmpge	r3, #0
   1a21c:	blt	1a244 <__assert_fail@plt+0x8cec>
   1a220:	ldr	ip, [r4, #8]
   1a224:	ldr	r0, [ip, r3, lsl #2]
   1a228:	ldr	r1, [r6, #8]
   1a22c:	ldr	r1, [r1, r2, lsl #2]
   1a230:	cmp	r0, r1
   1a234:	subeq	r2, r2, #1
   1a238:	subeq	r3, r3, #1
   1a23c:	bne	1a200 <__assert_fail@plt+0x8ca8>
   1a240:	b	1a214 <__assert_fail@plt+0x8cbc>
   1a244:	cmp	r2, #0
   1a248:	bge	1a274 <__assert_fail@plt+0x8d1c>
   1a24c:	ldr	r3, [r4, #4]
   1a250:	ldr	r2, [r6, #4]
   1a254:	add	r2, r3, r2, lsl #1
   1a258:	sub	lr, r2, #1
   1a25c:	subs	r2, r2, r5
   1a260:	beq	1a2cc <__assert_fail@plt+0x8d74>
   1a264:	sub	ip, r3, #1
   1a268:	add	r3, r3, r2
   1a26c:	str	r3, [r4, #4]
   1a270:	b	1a2a4 <__assert_fail@plt+0x8d4c>
   1a274:	add	r2, r2, #1
   1a278:	sub	r5, r5, r2
   1a27c:	ldr	r0, [r4, #8]
   1a280:	lsl	r2, r2, #2
   1a284:	ldr	r1, [r6, #8]
   1a288:	add	r0, r0, r5, lsl #2
   1a28c:	bl	11264 <memcpy@plt>
   1a290:	b	1a24c <__assert_fail@plt+0x8cf4>
   1a294:	add	r0, ip, r2
   1a298:	str	r1, [r3, r0, lsl #2]
   1a29c:	subs	ip, ip, #1
   1a2a0:	bmi	1a2e0 <__assert_fail@plt+0x8d88>
   1a2a4:	ldr	r3, [r4, #8]
   1a2a8:	ldr	r0, [r3, lr, lsl #2]
   1a2ac:	ldr	r1, [r3, ip, lsl #2]
   1a2b0:	cmp	r0, r1
   1a2b4:	ble	1a294 <__assert_fail@plt+0x8d3c>
   1a2b8:	sub	lr, lr, #1
   1a2bc:	add	r1, ip, r2
   1a2c0:	str	r0, [r3, r1, lsl #2]
   1a2c4:	subs	r2, r2, #1
   1a2c8:	bne	1a2a4 <__assert_fail@plt+0x8d4c>
   1a2cc:	mov	r0, r2
   1a2d0:	ldrd	r4, [sp]
   1a2d4:	ldr	r6, [sp, #8]
   1a2d8:	add	sp, sp, #12
   1a2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e0:	ldr	r0, [r4, #8]
   1a2e4:	lsl	r2, r2, #2
   1a2e8:	add	r1, r0, r5, lsl #2
   1a2ec:	bl	11264 <memcpy@plt>
   1a2f0:	mov	r2, #0
   1a2f4:	b	1a2cc <__assert_fail@plt+0x8d74>
   1a2f8:	mov	r2, #12
   1a2fc:	b	1a2cc <__assert_fail@plt+0x8d74>
   1a300:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a304:	strd	r6, [sp, #8]
   1a308:	strd	r8, [sp, #16]
   1a30c:	strd	sl, [sp, #24]
   1a310:	str	lr, [sp, #32]
   1a314:	sub	sp, sp, #44	; 0x2c
   1a318:	mov	sl, r0
   1a31c:	mov	r4, r1
   1a320:	mov	r5, r2
   1a324:	mov	fp, r3
   1a328:	add	r7, r2, r2, lsl #1
   1a32c:	lsl	r7, r7, #2
   1a330:	ldr	r3, [r1, #20]
   1a334:	add	r3, r3, r7
   1a338:	ldr	r1, [r3, #4]
   1a33c:	add	r1, r1, #1
   1a340:	add	r0, sp, #28
   1a344:	bl	17650 <__assert_fail@plt+0x60f8>
   1a348:	subs	r9, r0, #0
   1a34c:	bne	1a514 <__assert_fail@plt+0x8fbc>
   1a350:	mov	r8, r7
   1a354:	ldr	r3, [sp, #32]
   1a358:	add	r2, r3, #1
   1a35c:	str	r2, [sp, #32]
   1a360:	ldr	r2, [sp, #36]	; 0x24
   1a364:	str	r5, [r2, r3, lsl #2]
   1a368:	ldr	r3, [r4, #24]
   1a36c:	add	r3, r3, r7
   1a370:	mvn	r2, #0
   1a374:	str	r2, [r3, #4]
   1a378:	ldr	r2, [r4]
   1a37c:	lsl	r6, r5, #3
   1a380:	add	r1, r2, r6
   1a384:	ldr	r0, [r1, #4]
   1a388:	mov	r3, #65280	; 0xff00
   1a38c:	movt	r3, #3
   1a390:	and	r3, r3, r0
   1a394:	cmp	r3, #0
   1a398:	beq	1a3c8 <__assert_fail@plt+0x8e70>
   1a39c:	ldr	r3, [r4, #20]
   1a3a0:	add	r3, r3, r7
   1a3a4:	ldr	r0, [r3, #4]
   1a3a8:	cmp	r0, #0
   1a3ac:	beq	1a534 <__assert_fail@plt+0x8fdc>
   1a3b0:	ldr	r3, [r3, #8]
   1a3b4:	ldr	r3, [r3]
   1a3b8:	add	r2, r2, r3, lsl #3
   1a3bc:	ldrb	r3, [r2, #6]
   1a3c0:	tst	r3, #4
   1a3c4:	beq	1a400 <__assert_fail@plt+0x8ea8>
   1a3c8:	ldr	r3, [r4]
   1a3cc:	add	r6, r3, r6
   1a3d0:	ldrb	r3, [r6, #4]
   1a3d4:	tst	r3, #8
   1a3d8:	beq	1a534 <__assert_fail@plt+0x8fdc>
   1a3dc:	ldr	r3, [r4, #20]
   1a3e0:	add	r3, r3, r7
   1a3e4:	ldr	r2, [r3, #4]
   1a3e8:	cmp	r2, #0
   1a3ec:	ble	1a534 <__assert_fail@plt+0x8fdc>
   1a3f0:	mov	r6, r9
   1a3f4:	mov	r2, #0
   1a3f8:	str	r2, [sp, #12]
   1a3fc:	b	1a474 <__assert_fail@plt+0x8f1c>
   1a400:	ldr	r3, [r1, #4]
   1a404:	ubfx	r3, r3, #8, #10
   1a408:	str	r3, [sp]
   1a40c:	mov	r3, r5
   1a410:	mov	r2, r5
   1a414:	mov	r1, r5
   1a418:	mov	r0, r4
   1a41c:	bl	19cec <__assert_fail@plt+0x8794>
   1a420:	cmp	r0, #0
   1a424:	beq	1a3c8 <__assert_fail@plt+0x8e70>
   1a428:	mov	r9, r0
   1a42c:	b	1a514 <__assert_fail@plt+0x8fbc>
   1a430:	mov	r1, r4
   1a434:	add	r0, sp, #16
   1a438:	bl	1a300 <__assert_fail@plt+0x8da8>
   1a43c:	cmp	r0, #0
   1a440:	beq	1a4b8 <__assert_fail@plt+0x8f60>
   1a444:	mov	r9, r0
   1a448:	b	1a514 <__assert_fail@plt+0x8fbc>
   1a44c:	ldr	r0, [sp, #24]
   1a450:	bl	13eac <__assert_fail@plt+0x2954>
   1a454:	mov	r3, #1
   1a458:	str	r3, [sp, #12]
   1a45c:	add	r6, r6, #1
   1a460:	ldr	r3, [r4, #20]
   1a464:	add	r3, r3, r8
   1a468:	ldr	r2, [r3, #4]
   1a46c:	cmp	r2, r6
   1a470:	ble	1a4e4 <__assert_fail@plt+0x8f8c>
   1a474:	ldr	r3, [r3, #8]
   1a478:	ldr	r2, [r3, r6, lsl #2]
   1a47c:	add	r5, r2, r2, lsl #1
   1a480:	lsl	r5, r5, #2
   1a484:	ldr	r0, [r4, #24]
   1a488:	add	r1, r0, r5
   1a48c:	ldr	r3, [r1, #4]
   1a490:	cmn	r3, #1
   1a494:	moveq	r3, #1
   1a498:	streq	r3, [sp, #12]
   1a49c:	beq	1a45c <__assert_fail@plt+0x8f04>
   1a4a0:	cmp	r3, #0
   1a4a4:	beq	1a430 <__assert_fail@plt+0x8ed8>
   1a4a8:	ldrd	r2, [r0, r5]
   1a4ac:	strd	r2, [sp, #16]
   1a4b0:	ldr	r3, [r1, #8]
   1a4b4:	str	r3, [sp, #24]
   1a4b8:	add	r1, sp, #16
   1a4bc:	add	r0, sp, #28
   1a4c0:	bl	1a150 <__assert_fail@plt+0x8bf8>
   1a4c4:	cmp	r0, #0
   1a4c8:	bne	1a444 <__assert_fail@plt+0x8eec>
   1a4cc:	ldr	r3, [r4, #24]
   1a4d0:	add	r5, r3, r5
   1a4d4:	ldr	r3, [r5, #4]
   1a4d8:	cmp	r3, #0
   1a4dc:	bne	1a45c <__assert_fail@plt+0x8f04>
   1a4e0:	b	1a44c <__assert_fail@plt+0x8ef4>
   1a4e4:	eor	fp, fp, #1
   1a4e8:	ldr	r3, [sp, #12]
   1a4ec:	tst	r3, fp
   1a4f0:	beq	1a534 <__assert_fail@plt+0x8fdc>
   1a4f4:	ldr	r3, [r4, #24]
   1a4f8:	add	r7, r3, r7
   1a4fc:	mov	r3, #0
   1a500:	str	r3, [r7, #4]
   1a504:	ldrd	r2, [sp, #28]
   1a508:	strd	r2, [sl]
   1a50c:	ldr	r3, [sp, #36]	; 0x24
   1a510:	str	r3, [sl, #8]
   1a514:	mov	r0, r9
   1a518:	add	sp, sp, #44	; 0x2c
   1a51c:	ldrd	r4, [sp]
   1a520:	ldrd	r6, [sp, #8]
   1a524:	ldrd	r8, [sp, #16]
   1a528:	ldrd	sl, [sp, #24]
   1a52c:	add	sp, sp, #32
   1a530:	pop	{pc}		; (ldr pc, [sp], #4)
   1a534:	ldr	r1, [r4, #24]
   1a538:	add	r0, r1, r7
   1a53c:	ldrd	r2, [sp, #28]
   1a540:	strd	r2, [r1, r7]
   1a544:	ldr	r3, [sp, #36]	; 0x24
   1a548:	str	r3, [r0, #8]
   1a54c:	b	1a504 <__assert_fail@plt+0x8fac>
   1a550:	strd	r4, [sp, #-16]!
   1a554:	str	r6, [sp, #8]
   1a558:	str	lr, [sp, #12]
   1a55c:	mov	r5, r0
   1a560:	cmp	r1, #0
   1a564:	ldrlt	r0, [r0, #60]	; 0x3c
   1a568:	blt	1a5a8 <__assert_fail@plt+0x9050>
   1a56c:	ldr	r3, [r5, #48]	; 0x30
   1a570:	cmp	r3, r1
   1a574:	beq	1a5b8 <__assert_fail@plt+0x9060>
   1a578:	ldr	r3, [r5, #80]	; 0x50
   1a57c:	cmp	r3, #1
   1a580:	ble	1a620 <__assert_fail@plt+0x90c8>
   1a584:	ldr	r3, [r5, #8]
   1a588:	add	r3, r3, r1, lsl #2
   1a58c:	ldr	r4, [r3], #-4
   1a590:	cmn	r4, #1
   1a594:	bne	1a5cc <__assert_fail@plt+0x9074>
   1a598:	sub	r1, r1, #1
   1a59c:	cmn	r1, #1
   1a5a0:	bne	1a58c <__assert_fail@plt+0x9034>
   1a5a4:	ldr	r0, [r5, #60]	; 0x3c
   1a5a8:	ldrd	r4, [sp]
   1a5ac:	ldr	r6, [sp, #8]
   1a5b0:	add	sp, sp, #12
   1a5b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5b8:	and	r2, r2, #2
   1a5bc:	cmp	r2, #0
   1a5c0:	movne	r0, #8
   1a5c4:	moveq	r0, #10
   1a5c8:	b	1a5a8 <__assert_fail@plt+0x9050>
   1a5cc:	ldrb	r3, [r5, #78]	; 0x4e
   1a5d0:	cmp	r3, #0
   1a5d4:	bne	1a5f8 <__assert_fail@plt+0x90a0>
   1a5d8:	cmp	r4, #10
   1a5dc:	movne	r0, #0
   1a5e0:	bne	1a5a8 <__assert_fail@plt+0x9050>
   1a5e4:	ldrb	r3, [r5, #77]	; 0x4d
   1a5e8:	cmp	r3, #0
   1a5ec:	moveq	r0, #0
   1a5f0:	movne	r0, #2
   1a5f4:	b	1a5a8 <__assert_fail@plt+0x9050>
   1a5f8:	mov	r0, r4
   1a5fc:	bl	11438 <iswalnum@plt>
   1a600:	adds	r3, r0, #0
   1a604:	movne	r3, #1
   1a608:	cmp	r4, #95	; 0x5f
   1a60c:	orreq	r3, r3, #1
   1a610:	cmp	r3, #0
   1a614:	movne	r0, #1
   1a618:	bne	1a5a8 <__assert_fail@plt+0x9050>
   1a61c:	b	1a5d8 <__assert_fail@plt+0x9080>
   1a620:	ldr	r3, [r5, #4]
   1a624:	ldrb	r3, [r3, r1]
   1a628:	asr	r0, r3, #5
   1a62c:	ldr	r1, [r5, #68]	; 0x44
   1a630:	and	r2, r3, #31
   1a634:	ldr	r0, [r1, r0, lsl #2]
   1a638:	lsr	r0, r0, r2
   1a63c:	ands	r0, r0, #1
   1a640:	bne	1a5a8 <__assert_fail@plt+0x9050>
   1a644:	cmp	r3, #10
   1a648:	bne	1a5a8 <__assert_fail@plt+0x9050>
   1a64c:	ldrb	r3, [r5, #77]	; 0x4d
   1a650:	cmp	r3, #0
   1a654:	movne	r0, #2
   1a658:	b	1a5a8 <__assert_fail@plt+0x9050>
   1a65c:	str	r4, [sp, #-8]!
   1a660:	str	lr, [sp, #4]
   1a664:	ldr	r3, [r0, #4]
   1a668:	ldrb	ip, [r3, r2]
   1a66c:	ldrb	r3, [r1, #4]
   1a670:	sub	r3, r3, #1
   1a674:	cmp	r3, #6
   1a678:	ldrls	pc, [pc, r3, lsl #2]
   1a67c:	b	1a7a4 <__assert_fail@plt+0x924c>
   1a680:	muleq	r1, ip, r6
   1a684:	andeq	sl, r1, r4, lsr #15
   1a688:			; <UNDEFINED> instruction: 0x0001a6b0
   1a68c:	andeq	sl, r1, r4, lsr #15
   1a690:	andeq	sl, r1, r0, lsr r7
   1a694:	andeq	sl, r1, r4, lsr #15
   1a698:	andeq	sl, r1, r4, lsr #14
   1a69c:	ldrb	r3, [r1]
   1a6a0:	cmp	r3, ip
   1a6a4:	movne	r0, #0
   1a6a8:	bne	1a7a8 <__assert_fail@plt+0x9250>
   1a6ac:	b	1a6cc <__assert_fail@plt+0x9174>
   1a6b0:	lsr	lr, ip, #5
   1a6b4:	ldr	r3, [r1]
   1a6b8:	and	ip, ip, #31
   1a6bc:	ldr	r3, [r3, lr, lsl #2]
   1a6c0:	lsr	ip, r3, ip
   1a6c4:	tst	ip, #1
   1a6c8:	beq	1a7b4 <__assert_fail@plt+0x925c>
   1a6cc:	ldr	ip, [r1, #4]
   1a6d0:	mov	r3, #65280	; 0xff00
   1a6d4:	movt	r3, #3
   1a6d8:	and	r3, r3, ip
   1a6dc:	cmp	r3, #0
   1a6e0:	moveq	r0, #1
   1a6e4:	beq	1a7a8 <__assert_fail@plt+0x9250>
   1a6e8:	mov	r3, r2
   1a6ec:	mov	r4, r1
   1a6f0:	ldr	r2, [r0, #88]	; 0x58
   1a6f4:	mov	r1, r3
   1a6f8:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1a6fc:	ldr	r3, [r4, #4]
   1a700:	ubfx	r3, r3, #8, #10
   1a704:	tst	r3, #4
   1a708:	beq	1a770 <__assert_fail@plt+0x9218>
   1a70c:	tst	r0, #1
   1a710:	beq	1a7bc <__assert_fail@plt+0x9264>
   1a714:	tst	r3, #8
   1a718:	beq	1a780 <__assert_fail@plt+0x9228>
   1a71c:	mov	r0, #0
   1a720:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a724:	tst	ip, #128	; 0x80
   1a728:	movne	r0, #0
   1a72c:	bne	1a7a8 <__assert_fail@plt+0x9250>
   1a730:	cmp	ip, #10
   1a734:	beq	1a758 <__assert_fail@plt+0x9200>
   1a738:	cmp	ip, #0
   1a73c:	bne	1a6cc <__assert_fail@plt+0x9174>
   1a740:	ldr	r3, [r0, #84]	; 0x54
   1a744:	ldr	r3, [r3, #128]	; 0x80
   1a748:	tst	r3, #128	; 0x80
   1a74c:	movne	r0, #0
   1a750:	beq	1a6cc <__assert_fail@plt+0x9174>
   1a754:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a758:	ldr	r3, [r0, #84]	; 0x54
   1a75c:	ldr	r3, [r3, #128]	; 0x80
   1a760:	tst	r3, #64	; 0x40
   1a764:	bne	1a6cc <__assert_fail@plt+0x9174>
   1a768:	mov	r0, #0
   1a76c:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a770:	tst	r3, #8
   1a774:	beq	1a780 <__assert_fail@plt+0x9228>
   1a778:	tst	r0, #1
   1a77c:	bne	1a7c4 <__assert_fail@plt+0x926c>
   1a780:	tst	r3, #32
   1a784:	beq	1a794 <__assert_fail@plt+0x923c>
   1a788:	tst	r0, #2
   1a78c:	moveq	r0, #0
   1a790:	beq	1a7a8 <__assert_fail@plt+0x9250>
   1a794:	tst	r3, #128	; 0x80
   1a798:	ubfxne	r0, r0, #3, #1
   1a79c:	moveq	r0, #1
   1a7a0:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a7a4:	mov	r0, #0
   1a7a8:	ldr	r4, [sp]
   1a7ac:	add	sp, sp, #4
   1a7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7b4:	mov	r0, #0
   1a7b8:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a7bc:	mov	r0, #0
   1a7c0:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a7c4:	mov	r0, #0
   1a7c8:	b	1a7a8 <__assert_fail@plt+0x9250>
   1a7cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a7d0:	strd	r6, [sp, #8]
   1a7d4:	strd	r8, [sp, #16]
   1a7d8:	strd	sl, [sp, #24]
   1a7dc:	str	lr, [sp, #32]
   1a7e0:	sub	sp, sp, #4
   1a7e4:	ldr	r7, [r0, #84]	; 0x54
   1a7e8:	ldr	r3, [r1, #4]
   1a7ec:	cmp	r3, #0
   1a7f0:	ble	1a8f0 <__assert_fail@plt+0x9398>
   1a7f4:	mov	r9, r2
   1a7f8:	mov	r6, r1
   1a7fc:	mov	r8, r0
   1a800:	mov	r4, #0
   1a804:	b	1a838 <__assert_fail@plt+0x92e0>
   1a808:	lsl	sl, r1, #1
   1a80c:	lsl	r1, r1, #3
   1a810:	bl	25930 <__assert_fail@plt+0x143d8>
   1a814:	cmp	r0, #0
   1a818:	beq	1a8f8 <__assert_fail@plt+0x93a0>
   1a81c:	str	r0, [r8, #132]	; 0x84
   1a820:	str	sl, [r8, #128]	; 0x80
   1a824:	b	1a884 <__assert_fail@plt+0x932c>
   1a828:	add	r4, r4, #1
   1a82c:	ldr	r3, [r6, #4]
   1a830:	cmp	r3, r4
   1a834:	ble	1a8d0 <__assert_fail@plt+0x9378>
   1a838:	ldr	r3, [r6, #8]
   1a83c:	ldr	r5, [r3, r4, lsl #2]
   1a840:	ldr	r3, [r7]
   1a844:	add	r2, r3, r5, lsl #3
   1a848:	ldrb	r2, [r2, #4]
   1a84c:	cmp	r2, #8
   1a850:	bne	1a828 <__assert_fail@plt+0x92d0>
   1a854:	ldr	r3, [r3, r5, lsl #3]
   1a858:	cmp	r3, #31
   1a85c:	bgt	1a828 <__assert_fail@plt+0x92d0>
   1a860:	ldr	r2, [r7, #80]	; 0x50
   1a864:	lsr	r3, r2, r3
   1a868:	tst	r3, #1
   1a86c:	beq	1a828 <__assert_fail@plt+0x92d0>
   1a870:	ldr	r0, [r8, #132]	; 0x84
   1a874:	ldr	r1, [r8, #128]	; 0x80
   1a878:	ldr	r3, [r8, #124]	; 0x7c
   1a87c:	cmp	r1, r3
   1a880:	beq	1a808 <__assert_fail@plt+0x92b0>
   1a884:	ldr	fp, [r8, #124]	; 0x7c
   1a888:	ldr	sl, [r8, #132]	; 0x84
   1a88c:	mov	r1, #24
   1a890:	mov	r0, #1
   1a894:	bl	25880 <__assert_fail@plt+0x14328>
   1a898:	str	r0, [sl, fp, lsl #2]
   1a89c:	ldr	r2, [r8, #124]	; 0x7c
   1a8a0:	ldr	r3, [r8, #132]	; 0x84
   1a8a4:	ldr	r3, [r3, r2, lsl #2]
   1a8a8:	cmp	r3, #0
   1a8ac:	beq	1a8f8 <__assert_fail@plt+0x93a0>
   1a8b0:	str	r5, [r3, #4]
   1a8b4:	ldr	r2, [r8, #132]	; 0x84
   1a8b8:	ldr	r3, [r8, #124]	; 0x7c
   1a8bc:	add	r1, r3, #1
   1a8c0:	str	r1, [r8, #124]	; 0x7c
   1a8c4:	ldr	r3, [r2, r3, lsl #2]
   1a8c8:	str	r9, [r3]
   1a8cc:	b	1a828 <__assert_fail@plt+0x92d0>
   1a8d0:	mov	r0, #0
   1a8d4:	add	sp, sp, #4
   1a8d8:	ldrd	r4, [sp]
   1a8dc:	ldrd	r6, [sp, #8]
   1a8e0:	ldrd	r8, [sp, #16]
   1a8e4:	ldrd	sl, [sp, #24]
   1a8e8:	add	sp, sp, #32
   1a8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8f0:	mov	r0, #0
   1a8f4:	b	1a8d4 <__assert_fail@plt+0x937c>
   1a8f8:	mov	r0, #12
   1a8fc:	b	1a8d4 <__assert_fail@plt+0x937c>
   1a900:	strd	r4, [sp, #-16]!
   1a904:	str	r6, [sp, #8]
   1a908:	str	lr, [sp, #12]
   1a90c:	mov	r4, r0
   1a910:	mov	r5, r1
   1a914:	ldr	r6, [r0, #104]	; 0x68
   1a918:	ldr	r3, [r0, #36]	; 0x24
   1a91c:	cmp	r3, r1
   1a920:	bgt	1a930 <__assert_fail@plt+0x93d8>
   1a924:	ldr	r2, [r0, #48]	; 0x30
   1a928:	cmp	r3, r2
   1a92c:	blt	1a948 <__assert_fail@plt+0x93f0>
   1a930:	ldr	r3, [r4, #28]
   1a934:	cmp	r3, r5
   1a938:	bgt	1a95c <__assert_fail@plt+0x9404>
   1a93c:	ldr	r2, [r4, #48]	; 0x30
   1a940:	cmp	r3, r2
   1a944:	bge	1a95c <__assert_fail@plt+0x9404>
   1a948:	add	r1, r5, #1
   1a94c:	mov	r0, r4
   1a950:	bl	18354 <__assert_fail@plt+0x6dfc>
   1a954:	cmp	r0, #0
   1a958:	bne	1a98c <__assert_fail@plt+0x9434>
   1a95c:	cmp	r6, r5
   1a960:	movge	r0, #0
   1a964:	bge	1a98c <__assert_fail@plt+0x9434>
   1a968:	sub	r2, r5, r6
   1a96c:	add	r6, r6, #1
   1a970:	ldr	r0, [r4, #100]	; 0x64
   1a974:	lsl	r2, r2, #2
   1a978:	mov	r1, #0
   1a97c:	add	r0, r0, r6, lsl #2
   1a980:	bl	1145c <memset@plt>
   1a984:	str	r5, [r4, #104]	; 0x68
   1a988:	mov	r0, #0
   1a98c:	ldrd	r4, [sp]
   1a990:	ldr	r6, [sp, #8]
   1a994:	add	sp, sp, #12
   1a998:	pop	{pc}		; (ldr pc, [sp], #4)
   1a99c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a9a0:	strd	r6, [sp, #8]
   1a9a4:	strd	r8, [sp, #16]
   1a9a8:	strd	sl, [sp, #24]
   1a9ac:	str	lr, [sp, #32]
   1a9b0:	sub	sp, sp, #28
   1a9b4:	mov	r5, r0
   1a9b8:	mov	r6, r1
   1a9bc:	mov	r7, r2
   1a9c0:	mov	r8, r3
   1a9c4:	ldr	r1, [r1, #4]
   1a9c8:	add	r0, sp, #12
   1a9cc:	bl	17650 <__assert_fail@plt+0x60f8>
   1a9d0:	subs	r9, r0, #0
   1a9d4:	bne	1aaac <__assert_fail@plt+0x9554>
   1a9d8:	ldr	r3, [r6, #4]
   1a9dc:	cmp	r3, #0
   1a9e0:	ble	1aacc <__assert_fail@plt+0x9574>
   1a9e4:	mov	r4, r9
   1a9e8:	b	1aa4c <__assert_fail@plt+0x94f4>
   1a9ec:	add	r0, r0, #1
   1a9f0:	cmp	lr, r0
   1a9f4:	beq	1aa80 <__assert_fail@plt+0x9528>
   1a9f8:	ldr	ip, [r3, #4]!
   1a9fc:	add	fp, sl, ip, lsl #3
   1aa00:	ldrb	fp, [fp, #4]
   1aa04:	cmp	r8, fp
   1aa08:	bne	1a9ec <__assert_fail@plt+0x9494>
   1aa0c:	ldr	fp, [sl, ip, lsl #3]
   1aa10:	cmp	r7, fp
   1aa14:	bne	1a9ec <__assert_fail@plt+0x9494>
   1aa18:	cmn	ip, #1
   1aa1c:	beq	1aa80 <__assert_fail@plt+0x9528>
   1aa20:	str	r8, [sp]
   1aa24:	mov	r3, r7
   1aa28:	add	r1, sp, #12
   1aa2c:	mov	r0, r5
   1aa30:	bl	1a02c <__assert_fail@plt+0x8ad4>
   1aa34:	subs	sl, r0, #0
   1aa38:	bne	1aaa0 <__assert_fail@plt+0x9548>
   1aa3c:	add	r4, r4, #1
   1aa40:	ldr	r3, [r6, #4]
   1aa44:	cmp	r3, r4
   1aa48:	ble	1aacc <__assert_fail@plt+0x9574>
   1aa4c:	ldr	r3, [r6, #8]
   1aa50:	ldr	r2, [r3, r4, lsl #2]
   1aa54:	add	r3, r2, r2, lsl #1
   1aa58:	ldr	r1, [r5, #24]
   1aa5c:	add	r1, r1, r3, lsl #2
   1aa60:	ldr	lr, [r1, #4]
   1aa64:	cmp	lr, #0
   1aa68:	ble	1aa80 <__assert_fail@plt+0x9528>
   1aa6c:	ldr	sl, [r5]
   1aa70:	ldr	r3, [r1, #8]
   1aa74:	sub	r3, r3, #4
   1aa78:	mov	r0, r9
   1aa7c:	b	1a9f8 <__assert_fail@plt+0x94a0>
   1aa80:	add	r0, sp, #12
   1aa84:	bl	1a150 <__assert_fail@plt+0x8bf8>
   1aa88:	subs	sl, r0, #0
   1aa8c:	beq	1aa3c <__assert_fail@plt+0x94e4>
   1aa90:	ldr	r0, [sp, #20]
   1aa94:	bl	13eac <__assert_fail@plt+0x2954>
   1aa98:	mov	r9, sl
   1aa9c:	b	1aaac <__assert_fail@plt+0x9554>
   1aaa0:	ldr	r0, [sp, #20]
   1aaa4:	bl	13eac <__assert_fail@plt+0x2954>
   1aaa8:	mov	r9, sl
   1aaac:	mov	r0, r9
   1aab0:	add	sp, sp, #28
   1aab4:	ldrd	r4, [sp]
   1aab8:	ldrd	r6, [sp, #8]
   1aabc:	ldrd	r8, [sp, #16]
   1aac0:	ldrd	sl, [sp, #24]
   1aac4:	add	sp, sp, #32
   1aac8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aacc:	ldr	r0, [r6, #8]
   1aad0:	bl	13eac <__assert_fail@plt+0x2954>
   1aad4:	ldrd	r2, [sp, #12]
   1aad8:	strd	r2, [r6]
   1aadc:	ldr	r3, [sp, #20]
   1aae0:	str	r3, [r6, #8]
   1aae4:	b	1aaac <__assert_fail@plt+0x9554>
   1aae8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aaec:	strd	r6, [sp, #8]
   1aaf0:	str	r8, [sp, #16]
   1aaf4:	str	lr, [sp, #20]
   1aaf8:	mov	r4, r0
   1aafc:	mov	r5, r1
   1ab00:	mov	r1, r2
   1ab04:	ldr	r2, [r0, #88]	; 0x58
   1ab08:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1ab0c:	ldr	lr, [r5, #8]
   1ab10:	cmp	lr, #0
   1ab14:	ble	1ab80 <__assert_fail@plt+0x9628>
   1ab18:	ldr	r3, [r4, #84]	; 0x54
   1ab1c:	ldr	r4, [r3]
   1ab20:	ldr	ip, [r5, #12]
   1ab24:	sub	ip, ip, #4
   1ab28:	mov	r1, #0
   1ab2c:	and	r7, r0, #8
   1ab30:	and	r6, r0, #2
   1ab34:	and	r5, r0, #1
   1ab38:	b	1ab94 <__assert_fail@plt+0x963c>
   1ab3c:	tst	r3, #8
   1ab40:	beq	1ab4c <__assert_fail@plt+0x95f4>
   1ab44:	cmp	r5, #0
   1ab48:	bne	1ab88 <__assert_fail@plt+0x9630>
   1ab4c:	tst	r3, #32
   1ab50:	beq	1ab5c <__assert_fail@plt+0x9604>
   1ab54:	cmp	r6, #0
   1ab58:	beq	1ab88 <__assert_fail@plt+0x9630>
   1ab5c:	tst	r3, #128	; 0x80
   1ab60:	beq	1ab6c <__assert_fail@plt+0x9614>
   1ab64:	cmp	r7, #0
   1ab68:	beq	1ab88 <__assert_fail@plt+0x9630>
   1ab6c:	ldrd	r4, [sp]
   1ab70:	ldrd	r6, [sp, #8]
   1ab74:	ldr	r8, [sp, #16]
   1ab78:	add	sp, sp, #20
   1ab7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab80:	mov	r0, #0
   1ab84:	b	1ab6c <__assert_fail@plt+0x9614>
   1ab88:	add	r1, r1, #1
   1ab8c:	cmp	lr, r1
   1ab90:	beq	1abd4 <__assert_fail@plt+0x967c>
   1ab94:	ldr	r0, [ip, #4]!
   1ab98:	add	r2, r4, r0, lsl #3
   1ab9c:	ldr	r3, [r2, #4]
   1aba0:	ubfx	r3, r3, #8, #10
   1aba4:	ldrb	r2, [r2, #4]
   1aba8:	cmp	r2, #2
   1abac:	bne	1ab88 <__assert_fail@plt+0x9630>
   1abb0:	cmp	r3, #0
   1abb4:	beq	1ab6c <__assert_fail@plt+0x9614>
   1abb8:	tst	r3, #4
   1abbc:	beq	1ab3c <__assert_fail@plt+0x95e4>
   1abc0:	cmp	r5, #0
   1abc4:	beq	1ab88 <__assert_fail@plt+0x9630>
   1abc8:	tst	r3, #8
   1abcc:	beq	1ab4c <__assert_fail@plt+0x95f4>
   1abd0:	b	1ab88 <__assert_fail@plt+0x9630>
   1abd4:	mov	r0, #0
   1abd8:	b	1ab6c <__assert_fail@plt+0x9614>
   1abdc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1abe0:	strd	r6, [sp, #8]
   1abe4:	str	r8, [sp, #16]
   1abe8:	str	lr, [sp, #20]
   1abec:	ldr	r7, [sp, #28]
   1abf0:	subs	r5, r0, #0
   1abf4:	beq	1aca8 <__assert_fail@plt+0x9750>
   1abf8:	ldr	r4, [r5]
   1abfc:	cmp	r4, #0
   1ac00:	beq	1acb0 <__assert_fail@plt+0x9758>
   1ac04:	mov	r0, r3
   1ac08:	sub	r4, r4, #1
   1ac0c:	str	r4, [r5]
   1ac10:	add	r4, r4, r4, lsl #1
   1ac14:	lsl	r4, r4, #3
   1ac18:	ldr	r3, [r5, #8]
   1ac1c:	ldr	r3, [r3, r4]
   1ac20:	str	r3, [r1]
   1ac24:	lsl	r6, r2, #3
   1ac28:	ldr	r3, [r5, #8]
   1ac2c:	add	r3, r3, r4
   1ac30:	mov	r2, r6
   1ac34:	ldr	r1, [r3, #8]
   1ac38:	bl	11264 <memcpy@plt>
   1ac3c:	ldr	r3, [r5, #8]
   1ac40:	add	r3, r3, r4
   1ac44:	ldr	r1, [r3, #8]
   1ac48:	mov	r2, r6
   1ac4c:	add	r1, r1, r6
   1ac50:	ldr	r0, [sp, #24]
   1ac54:	bl	11264 <memcpy@plt>
   1ac58:	ldr	r0, [r7, #8]
   1ac5c:	bl	13eac <__assert_fail@plt+0x2954>
   1ac60:	ldr	r3, [r5, #8]
   1ac64:	add	r3, r3, r4
   1ac68:	ldr	r0, [r3, #8]
   1ac6c:	bl	13eac <__assert_fail@plt+0x2954>
   1ac70:	ldr	r1, [r5, #8]
   1ac74:	add	r1, r1, r4
   1ac78:	ldrd	r2, [r1, #12]
   1ac7c:	strd	r2, [r7]
   1ac80:	ldr	r3, [r1, #20]
   1ac84:	str	r3, [r7, #8]
   1ac88:	ldr	r3, [r5, #8]
   1ac8c:	add	r4, r3, r4
   1ac90:	ldr	r0, [r4, #4]
   1ac94:	ldrd	r4, [sp]
   1ac98:	ldrd	r6, [sp, #8]
   1ac9c:	ldr	r8, [sp, #16]
   1aca0:	add	sp, sp, #20
   1aca4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aca8:	mvn	r0, #0
   1acac:	b	1ac94 <__assert_fail@plt+0x973c>
   1acb0:	mvn	r0, #0
   1acb4:	b	1ac94 <__assert_fail@plt+0x973c>
   1acb8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1acbc:	strd	r6, [sp, #8]
   1acc0:	strd	r8, [sp, #16]
   1acc4:	str	sl, [sp, #24]
   1acc8:	str	lr, [sp, #28]
   1accc:	mov	r6, r0
   1acd0:	mov	r4, r1
   1acd4:	mov	r5, r2
   1acd8:	mov	r9, r3
   1acdc:	ldr	r7, [sp, #32]
   1ace0:	ldr	r3, [sp, #36]	; 0x24
   1ace4:	tst	r3, #4194304	; 0x400000
   1ace8:	beq	1ad2c <__assert_fail@plt+0x97d4>
   1acec:	movw	r1, #29008	; 0x7150
   1acf0:	movt	r1, #2
   1acf4:	mov	r0, r7
   1acf8:	bl	111f8 <strcmp@plt>
   1acfc:	cmp	r0, #0
   1ad00:	movweq	r7, #29000	; 0x7148
   1ad04:	movteq	r7, #2
   1ad08:	beq	1ad2c <__assert_fail@plt+0x97d4>
   1ad0c:	movw	r1, #29016	; 0x7158
   1ad10:	movt	r1, #2
   1ad14:	mov	r0, r7
   1ad18:	bl	111f8 <strcmp@plt>
   1ad1c:	movw	r3, #29000	; 0x7148
   1ad20:	movt	r3, #2
   1ad24:	cmp	r0, #0
   1ad28:	moveq	r7, r3
   1ad2c:	ldr	r3, [r5, #36]	; 0x24
   1ad30:	ldr	r2, [r9]
   1ad34:	cmp	r2, r3
   1ad38:	beq	1ad88 <__assert_fail@plt+0x9830>
   1ad3c:	ldr	r9, [r5, #12]
   1ad40:	ldr	r8, [r5, #36]	; 0x24
   1ad44:	add	r3, r8, #1
   1ad48:	str	r3, [r5, #36]	; 0x24
   1ad4c:	mov	r0, r7
   1ad50:	bl	111c8 <wctype@plt>
   1ad54:	str	r0, [r9, r8, lsl #2]
   1ad58:	movw	r1, #29024	; 0x7160
   1ad5c:	movt	r1, #2
   1ad60:	mov	r0, r7
   1ad64:	bl	111f8 <strcmp@plt>
   1ad68:	subs	r5, r0, #0
   1ad6c:	bne	1ae4c <__assert_fail@plt+0x98f4>
   1ad70:	cmp	r6, #0
   1ad74:	bne	1adb0 <__assert_fail@plt+0x9858>
   1ad78:	bl	113fc <__ctype_b_loc@plt>
   1ad7c:	mov	r3, r5
   1ad80:	mov	lr, #1
   1ad84:	b	1ae08 <__assert_fail@plt+0x98b0>
   1ad88:	lsl	r3, r3, #1
   1ad8c:	add	r8, r3, #1
   1ad90:	lsl	r1, r8, #2
   1ad94:	ldr	r0, [r5, #12]
   1ad98:	bl	25930 <__assert_fail@plt+0x143d8>
   1ad9c:	cmp	r0, #0
   1ada0:	beq	1b714 <__assert_fail@plt+0xa1bc>
   1ada4:	str	r0, [r5, #12]
   1ada8:	str	r8, [r9]
   1adac:	b	1ad3c <__assert_fail@plt+0x97e4>
   1adb0:	bl	113fc <__ctype_b_loc@plt>
   1adb4:	mov	r3, r5
   1adb8:	mov	lr, #1
   1adbc:	b	1adcc <__assert_fail@plt+0x9874>
   1adc0:	add	r3, r3, #1
   1adc4:	cmp	r3, #256	; 0x100
   1adc8:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1adcc:	ldr	r1, [r0]
   1add0:	lsl	r2, r3, #1
   1add4:	ldrh	r2, [r1, r2]
   1add8:	tst	r2, #8
   1addc:	beq	1adc0 <__assert_fail@plt+0x9868>
   1ade0:	ldrb	r2, [r6, r3]
   1ade4:	asr	ip, r2, #5
   1ade8:	and	r2, r2, #31
   1adec:	ldr	r1, [r4, ip, lsl #2]
   1adf0:	orr	r2, r1, lr, lsl r2
   1adf4:	str	r2, [r4, ip, lsl #2]
   1adf8:	b	1adc0 <__assert_fail@plt+0x9868>
   1adfc:	add	r3, r3, #1
   1ae00:	cmp	r3, #256	; 0x100
   1ae04:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1ae08:	ldr	r1, [r0]
   1ae0c:	lsl	r2, r3, #1
   1ae10:	ldrh	r2, [r1, r2]
   1ae14:	tst	r2, #8
   1ae18:	beq	1adfc <__assert_fail@plt+0x98a4>
   1ae1c:	add	r2, r3, #31
   1ae20:	cmp	r3, #0
   1ae24:	movge	r2, r3
   1ae28:	asr	r2, r2, #5
   1ae2c:	rsbs	r1, r3, #0
   1ae30:	and	ip, r3, #31
   1ae34:	and	r1, r1, #31
   1ae38:	rsbpl	ip, r1, #0
   1ae3c:	ldr	r1, [r4, r2, lsl #2]
   1ae40:	orr	r1, r1, lr, lsl ip
   1ae44:	str	r1, [r4, r2, lsl #2]
   1ae48:	b	1adfc <__assert_fail@plt+0x98a4>
   1ae4c:	movw	r1, #29032	; 0x7168
   1ae50:	movt	r1, #2
   1ae54:	mov	r0, r7
   1ae58:	bl	111f8 <strcmp@plt>
   1ae5c:	subs	r5, r0, #0
   1ae60:	bne	1af18 <__assert_fail@plt+0x99c0>
   1ae64:	cmp	r6, #0
   1ae68:	bne	1ae7c <__assert_fail@plt+0x9924>
   1ae6c:	bl	113fc <__ctype_b_loc@plt>
   1ae70:	mov	r3, r5
   1ae74:	mov	lr, #1
   1ae78:	b	1aed4 <__assert_fail@plt+0x997c>
   1ae7c:	bl	113fc <__ctype_b_loc@plt>
   1ae80:	mov	r3, r5
   1ae84:	mov	lr, #1
   1ae88:	b	1ae98 <__assert_fail@plt+0x9940>
   1ae8c:	add	r3, r3, #1
   1ae90:	cmp	r3, #256	; 0x100
   1ae94:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1ae98:	ldr	r1, [r0]
   1ae9c:	lsl	r2, r3, #1
   1aea0:	ldrh	r2, [r1, r2]
   1aea4:	tst	r2, #2
   1aea8:	beq	1ae8c <__assert_fail@plt+0x9934>
   1aeac:	ldrb	r2, [r6, r3]
   1aeb0:	asr	ip, r2, #5
   1aeb4:	and	r2, r2, #31
   1aeb8:	ldr	r1, [r4, ip, lsl #2]
   1aebc:	orr	r2, r1, lr, lsl r2
   1aec0:	str	r2, [r4, ip, lsl #2]
   1aec4:	b	1ae8c <__assert_fail@plt+0x9934>
   1aec8:	add	r3, r3, #1
   1aecc:	cmp	r3, #256	; 0x100
   1aed0:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1aed4:	ldr	r1, [r0]
   1aed8:	lsl	r2, r3, #1
   1aedc:	ldrh	r2, [r1, r2]
   1aee0:	tst	r2, #2
   1aee4:	beq	1aec8 <__assert_fail@plt+0x9970>
   1aee8:	add	r2, r3, #31
   1aeec:	cmp	r3, #0
   1aef0:	movge	r2, r3
   1aef4:	asr	r2, r2, #5
   1aef8:	rsbs	r1, r3, #0
   1aefc:	and	ip, r3, #31
   1af00:	and	r1, r1, #31
   1af04:	rsbpl	ip, r1, #0
   1af08:	ldr	r1, [r4, r2, lsl #2]
   1af0c:	orr	r1, r1, lr, lsl ip
   1af10:	str	r1, [r4, r2, lsl #2]
   1af14:	b	1aec8 <__assert_fail@plt+0x9970>
   1af18:	movw	r1, #29016	; 0x7158
   1af1c:	movt	r1, #2
   1af20:	mov	r0, r7
   1af24:	bl	111f8 <strcmp@plt>
   1af28:	subs	r5, r0, #0
   1af2c:	bne	1afe4 <__assert_fail@plt+0x9a8c>
   1af30:	cmp	r6, #0
   1af34:	bne	1af48 <__assert_fail@plt+0x99f0>
   1af38:	bl	113fc <__ctype_b_loc@plt>
   1af3c:	mov	r3, r5
   1af40:	mov	lr, #1
   1af44:	b	1afa0 <__assert_fail@plt+0x9a48>
   1af48:	bl	113fc <__ctype_b_loc@plt>
   1af4c:	mov	r3, r5
   1af50:	mov	lr, #1
   1af54:	b	1af64 <__assert_fail@plt+0x9a0c>
   1af58:	add	r3, r3, #1
   1af5c:	cmp	r3, #256	; 0x100
   1af60:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1af64:	ldr	r1, [r0]
   1af68:	lsl	r2, r3, #1
   1af6c:	ldrh	r2, [r1, r2]
   1af70:	tst	r2, #512	; 0x200
   1af74:	beq	1af58 <__assert_fail@plt+0x9a00>
   1af78:	ldrb	r2, [r6, r3]
   1af7c:	asr	ip, r2, #5
   1af80:	and	r2, r2, #31
   1af84:	ldr	r1, [r4, ip, lsl #2]
   1af88:	orr	r2, r1, lr, lsl r2
   1af8c:	str	r2, [r4, ip, lsl #2]
   1af90:	b	1af58 <__assert_fail@plt+0x9a00>
   1af94:	add	r3, r3, #1
   1af98:	cmp	r3, #256	; 0x100
   1af9c:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1afa0:	ldr	r1, [r0]
   1afa4:	lsl	r2, r3, #1
   1afa8:	ldrh	r2, [r1, r2]
   1afac:	tst	r2, #512	; 0x200
   1afb0:	beq	1af94 <__assert_fail@plt+0x9a3c>
   1afb4:	add	r2, r3, #31
   1afb8:	cmp	r3, #0
   1afbc:	movge	r2, r3
   1afc0:	asr	r2, r2, #5
   1afc4:	rsbs	r1, r3, #0
   1afc8:	and	ip, r3, #31
   1afcc:	and	r1, r1, #31
   1afd0:	rsbpl	ip, r1, #0
   1afd4:	ldr	r1, [r4, r2, lsl #2]
   1afd8:	orr	r1, r1, lr, lsl ip
   1afdc:	str	r1, [r4, r2, lsl #2]
   1afe0:	b	1af94 <__assert_fail@plt+0x9a3c>
   1afe4:	movw	r1, #29040	; 0x7170
   1afe8:	movt	r1, #2
   1afec:	mov	r0, r7
   1aff0:	bl	111f8 <strcmp@plt>
   1aff4:	subs	r5, r0, #0
   1aff8:	bne	1b0b0 <__assert_fail@plt+0x9b58>
   1affc:	cmp	r6, #0
   1b000:	bne	1b014 <__assert_fail@plt+0x9abc>
   1b004:	bl	113fc <__ctype_b_loc@plt>
   1b008:	mov	r3, r5
   1b00c:	mov	lr, #1
   1b010:	b	1b06c <__assert_fail@plt+0x9b14>
   1b014:	bl	113fc <__ctype_b_loc@plt>
   1b018:	mov	r3, r5
   1b01c:	mov	lr, #1
   1b020:	b	1b030 <__assert_fail@plt+0x9ad8>
   1b024:	add	r3, r3, #1
   1b028:	cmp	r3, #256	; 0x100
   1b02c:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b030:	ldr	r1, [r0]
   1b034:	lsl	r2, r3, #1
   1b038:	ldrh	r2, [r1, r2]
   1b03c:	tst	r2, #8192	; 0x2000
   1b040:	beq	1b024 <__assert_fail@plt+0x9acc>
   1b044:	ldrb	r2, [r6, r3]
   1b048:	asr	ip, r2, #5
   1b04c:	and	r2, r2, #31
   1b050:	ldr	r1, [r4, ip, lsl #2]
   1b054:	orr	r2, r1, lr, lsl r2
   1b058:	str	r2, [r4, ip, lsl #2]
   1b05c:	b	1b024 <__assert_fail@plt+0x9acc>
   1b060:	add	r3, r3, #1
   1b064:	cmp	r3, #256	; 0x100
   1b068:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b06c:	ldr	r1, [r0]
   1b070:	lsl	r2, r3, #1
   1b074:	ldrh	r2, [r1, r2]
   1b078:	tst	r2, #8192	; 0x2000
   1b07c:	beq	1b060 <__assert_fail@plt+0x9b08>
   1b080:	add	r2, r3, #31
   1b084:	cmp	r3, #0
   1b088:	movge	r2, r3
   1b08c:	asr	r2, r2, #5
   1b090:	rsbs	r1, r3, #0
   1b094:	and	ip, r3, #31
   1b098:	and	r1, r1, #31
   1b09c:	rsbpl	ip, r1, #0
   1b0a0:	ldr	r1, [r4, r2, lsl #2]
   1b0a4:	orr	r1, r1, lr, lsl ip
   1b0a8:	str	r1, [r4, r2, lsl #2]
   1b0ac:	b	1b060 <__assert_fail@plt+0x9b08>
   1b0b0:	movw	r1, #29000	; 0x7148
   1b0b4:	movt	r1, #2
   1b0b8:	mov	r0, r7
   1b0bc:	bl	111f8 <strcmp@plt>
   1b0c0:	subs	r5, r0, #0
   1b0c4:	bne	1b17c <__assert_fail@plt+0x9c24>
   1b0c8:	cmp	r6, #0
   1b0cc:	bne	1b0e0 <__assert_fail@plt+0x9b88>
   1b0d0:	bl	113fc <__ctype_b_loc@plt>
   1b0d4:	mov	r3, r5
   1b0d8:	mov	lr, #1
   1b0dc:	b	1b138 <__assert_fail@plt+0x9be0>
   1b0e0:	bl	113fc <__ctype_b_loc@plt>
   1b0e4:	mov	r3, r5
   1b0e8:	mov	lr, #1
   1b0ec:	b	1b0fc <__assert_fail@plt+0x9ba4>
   1b0f0:	add	r3, r3, #1
   1b0f4:	cmp	r3, #256	; 0x100
   1b0f8:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b0fc:	ldr	r1, [r0]
   1b100:	lsl	r2, r3, #1
   1b104:	ldrh	r2, [r1, r2]
   1b108:	tst	r2, #1024	; 0x400
   1b10c:	beq	1b0f0 <__assert_fail@plt+0x9b98>
   1b110:	ldrb	r2, [r6, r3]
   1b114:	asr	ip, r2, #5
   1b118:	and	r2, r2, #31
   1b11c:	ldr	r1, [r4, ip, lsl #2]
   1b120:	orr	r2, r1, lr, lsl r2
   1b124:	str	r2, [r4, ip, lsl #2]
   1b128:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b12c:	add	r3, r3, #1
   1b130:	cmp	r3, #256	; 0x100
   1b134:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b138:	ldr	r1, [r0]
   1b13c:	lsl	r2, r3, #1
   1b140:	ldrh	r2, [r1, r2]
   1b144:	tst	r2, #1024	; 0x400
   1b148:	beq	1b12c <__assert_fail@plt+0x9bd4>
   1b14c:	add	r2, r3, #31
   1b150:	cmp	r3, #0
   1b154:	movge	r2, r3
   1b158:	asr	r2, r2, #5
   1b15c:	rsbs	r1, r3, #0
   1b160:	and	ip, r3, #31
   1b164:	and	r1, r1, #31
   1b168:	rsbpl	ip, r1, #0
   1b16c:	ldr	r1, [r4, r2, lsl #2]
   1b170:	orr	r1, r1, lr, lsl ip
   1b174:	str	r1, [r4, r2, lsl #2]
   1b178:	b	1b12c <__assert_fail@plt+0x9bd4>
   1b17c:	movw	r1, #29048	; 0x7178
   1b180:	movt	r1, #2
   1b184:	mov	r0, r7
   1b188:	bl	111f8 <strcmp@plt>
   1b18c:	subs	r5, r0, #0
   1b190:	bne	1b248 <__assert_fail@plt+0x9cf0>
   1b194:	cmp	r6, #0
   1b198:	bne	1b1ac <__assert_fail@plt+0x9c54>
   1b19c:	bl	113fc <__ctype_b_loc@plt>
   1b1a0:	mov	r3, r5
   1b1a4:	mov	lr, #1
   1b1a8:	b	1b204 <__assert_fail@plt+0x9cac>
   1b1ac:	bl	113fc <__ctype_b_loc@plt>
   1b1b0:	mov	r3, r5
   1b1b4:	mov	lr, #1
   1b1b8:	b	1b1c8 <__assert_fail@plt+0x9c70>
   1b1bc:	add	r3, r3, #1
   1b1c0:	cmp	r3, #256	; 0x100
   1b1c4:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b1c8:	ldr	r1, [r0]
   1b1cc:	lsl	r2, r3, #1
   1b1d0:	ldrh	r2, [r1, r2]
   1b1d4:	tst	r2, #2048	; 0x800
   1b1d8:	beq	1b1bc <__assert_fail@plt+0x9c64>
   1b1dc:	ldrb	r2, [r6, r3]
   1b1e0:	asr	ip, r2, #5
   1b1e4:	and	r2, r2, #31
   1b1e8:	ldr	r1, [r4, ip, lsl #2]
   1b1ec:	orr	r2, r1, lr, lsl r2
   1b1f0:	str	r2, [r4, ip, lsl #2]
   1b1f4:	b	1b1bc <__assert_fail@plt+0x9c64>
   1b1f8:	add	r3, r3, #1
   1b1fc:	cmp	r3, #256	; 0x100
   1b200:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b204:	ldr	r1, [r0]
   1b208:	lsl	r2, r3, #1
   1b20c:	ldrh	r2, [r1, r2]
   1b210:	tst	r2, #2048	; 0x800
   1b214:	beq	1b1f8 <__assert_fail@plt+0x9ca0>
   1b218:	add	r2, r3, #31
   1b21c:	cmp	r3, #0
   1b220:	movge	r2, r3
   1b224:	asr	r2, r2, #5
   1b228:	rsbs	r1, r3, #0
   1b22c:	and	ip, r3, #31
   1b230:	and	r1, r1, #31
   1b234:	rsbpl	ip, r1, #0
   1b238:	ldr	r1, [r4, r2, lsl #2]
   1b23c:	orr	r1, r1, lr, lsl ip
   1b240:	str	r1, [r4, r2, lsl #2]
   1b244:	b	1b1f8 <__assert_fail@plt+0x9ca0>
   1b248:	movw	r1, #29056	; 0x7180
   1b24c:	movt	r1, #2
   1b250:	mov	r0, r7
   1b254:	bl	111f8 <strcmp@plt>
   1b258:	subs	r5, r0, #0
   1b25c:	bne	1b314 <__assert_fail@plt+0x9dbc>
   1b260:	cmp	r6, #0
   1b264:	bne	1b278 <__assert_fail@plt+0x9d20>
   1b268:	bl	113fc <__ctype_b_loc@plt>
   1b26c:	mov	r3, r5
   1b270:	mov	lr, #1
   1b274:	b	1b2d0 <__assert_fail@plt+0x9d78>
   1b278:	bl	113fc <__ctype_b_loc@plt>
   1b27c:	mov	r3, r5
   1b280:	mov	lr, #1
   1b284:	b	1b294 <__assert_fail@plt+0x9d3c>
   1b288:	add	r3, r3, #1
   1b28c:	cmp	r3, #256	; 0x100
   1b290:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b294:	ldr	r1, [r0]
   1b298:	lsl	r2, r3, #1
   1b29c:	ldrh	r2, [r1, r2]
   1b2a0:	tst	r2, #16384	; 0x4000
   1b2a4:	beq	1b288 <__assert_fail@plt+0x9d30>
   1b2a8:	ldrb	r2, [r6, r3]
   1b2ac:	asr	ip, r2, #5
   1b2b0:	and	r2, r2, #31
   1b2b4:	ldr	r1, [r4, ip, lsl #2]
   1b2b8:	orr	r2, r1, lr, lsl r2
   1b2bc:	str	r2, [r4, ip, lsl #2]
   1b2c0:	b	1b288 <__assert_fail@plt+0x9d30>
   1b2c4:	add	r3, r3, #1
   1b2c8:	cmp	r3, #256	; 0x100
   1b2cc:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b2d0:	ldr	r1, [r0]
   1b2d4:	lsl	r2, r3, #1
   1b2d8:	ldrh	r2, [r1, r2]
   1b2dc:	tst	r2, #16384	; 0x4000
   1b2e0:	beq	1b2c4 <__assert_fail@plt+0x9d6c>
   1b2e4:	add	r2, r3, #31
   1b2e8:	cmp	r3, #0
   1b2ec:	movge	r2, r3
   1b2f0:	asr	r2, r2, #5
   1b2f4:	rsbs	r1, r3, #0
   1b2f8:	and	ip, r3, #31
   1b2fc:	and	r1, r1, #31
   1b300:	rsbpl	ip, r1, #0
   1b304:	ldr	r1, [r4, r2, lsl #2]
   1b308:	orr	r1, r1, lr, lsl ip
   1b30c:	str	r1, [r4, r2, lsl #2]
   1b310:	b	1b2c4 <__assert_fail@plt+0x9d6c>
   1b314:	movw	r1, #29008	; 0x7150
   1b318:	movt	r1, #2
   1b31c:	mov	r0, r7
   1b320:	bl	111f8 <strcmp@plt>
   1b324:	subs	r5, r0, #0
   1b328:	bne	1b3e0 <__assert_fail@plt+0x9e88>
   1b32c:	cmp	r6, #0
   1b330:	bne	1b344 <__assert_fail@plt+0x9dec>
   1b334:	bl	113fc <__ctype_b_loc@plt>
   1b338:	mov	r3, r5
   1b33c:	mov	lr, #1
   1b340:	b	1b39c <__assert_fail@plt+0x9e44>
   1b344:	bl	113fc <__ctype_b_loc@plt>
   1b348:	mov	r3, r5
   1b34c:	mov	lr, #1
   1b350:	b	1b360 <__assert_fail@plt+0x9e08>
   1b354:	add	r3, r3, #1
   1b358:	cmp	r3, #256	; 0x100
   1b35c:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b360:	ldr	r1, [r0]
   1b364:	lsl	r2, r3, #1
   1b368:	ldrh	r2, [r1, r2]
   1b36c:	tst	r2, #256	; 0x100
   1b370:	beq	1b354 <__assert_fail@plt+0x9dfc>
   1b374:	ldrb	r2, [r6, r3]
   1b378:	asr	ip, r2, #5
   1b37c:	and	r2, r2, #31
   1b380:	ldr	r1, [r4, ip, lsl #2]
   1b384:	orr	r2, r1, lr, lsl r2
   1b388:	str	r2, [r4, ip, lsl #2]
   1b38c:	b	1b354 <__assert_fail@plt+0x9dfc>
   1b390:	add	r3, r3, #1
   1b394:	cmp	r3, #256	; 0x100
   1b398:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b39c:	ldr	r1, [r0]
   1b3a0:	lsl	r2, r3, #1
   1b3a4:	ldrh	r2, [r1, r2]
   1b3a8:	tst	r2, #256	; 0x100
   1b3ac:	beq	1b390 <__assert_fail@plt+0x9e38>
   1b3b0:	add	r2, r3, #31
   1b3b4:	cmp	r3, #0
   1b3b8:	movge	r2, r3
   1b3bc:	asr	r2, r2, #5
   1b3c0:	rsbs	r1, r3, #0
   1b3c4:	and	ip, r3, #31
   1b3c8:	and	r1, r1, #31
   1b3cc:	rsbpl	ip, r1, #0
   1b3d0:	ldr	r1, [r4, r2, lsl #2]
   1b3d4:	orr	r1, r1, lr, lsl ip
   1b3d8:	str	r1, [r4, r2, lsl #2]
   1b3dc:	b	1b390 <__assert_fail@plt+0x9e38>
   1b3e0:	movw	r1, #29064	; 0x7188
   1b3e4:	movt	r1, #2
   1b3e8:	mov	r0, r7
   1b3ec:	bl	111f8 <strcmp@plt>
   1b3f0:	subs	r5, r0, #0
   1b3f4:	bne	1b4ac <__assert_fail@plt+0x9f54>
   1b3f8:	cmp	r6, #0
   1b3fc:	bne	1b410 <__assert_fail@plt+0x9eb8>
   1b400:	bl	113fc <__ctype_b_loc@plt>
   1b404:	mov	r3, r5
   1b408:	mov	lr, #1
   1b40c:	b	1b468 <__assert_fail@plt+0x9f10>
   1b410:	bl	113fc <__ctype_b_loc@plt>
   1b414:	mov	r3, r5
   1b418:	mov	lr, #1
   1b41c:	b	1b42c <__assert_fail@plt+0x9ed4>
   1b420:	add	r3, r3, #1
   1b424:	cmp	r3, #256	; 0x100
   1b428:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b42c:	ldr	r1, [r0]
   1b430:	lsl	r2, r3, #1
   1b434:	ldrh	r2, [r1, r2]
   1b438:	tst	r2, #1
   1b43c:	beq	1b420 <__assert_fail@plt+0x9ec8>
   1b440:	ldrb	r2, [r6, r3]
   1b444:	asr	ip, r2, #5
   1b448:	and	r2, r2, #31
   1b44c:	ldr	r1, [r4, ip, lsl #2]
   1b450:	orr	r2, r1, lr, lsl r2
   1b454:	str	r2, [r4, ip, lsl #2]
   1b458:	b	1b420 <__assert_fail@plt+0x9ec8>
   1b45c:	add	r3, r3, #1
   1b460:	cmp	r3, #256	; 0x100
   1b464:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b468:	ldr	r1, [r0]
   1b46c:	lsl	r2, r3, #1
   1b470:	ldrh	r2, [r1, r2]
   1b474:	tst	r2, #1
   1b478:	beq	1b45c <__assert_fail@plt+0x9f04>
   1b47c:	add	r2, r3, #31
   1b480:	cmp	r3, #0
   1b484:	movge	r2, r3
   1b488:	asr	r2, r2, #5
   1b48c:	rsbs	r1, r3, #0
   1b490:	and	ip, r3, #31
   1b494:	and	r1, r1, #31
   1b498:	rsbpl	ip, r1, #0
   1b49c:	ldr	r1, [r4, r2, lsl #2]
   1b4a0:	orr	r1, r1, lr, lsl ip
   1b4a4:	str	r1, [r4, r2, lsl #2]
   1b4a8:	b	1b45c <__assert_fail@plt+0x9f04>
   1b4ac:	movw	r1, #29072	; 0x7190
   1b4b0:	movt	r1, #2
   1b4b4:	mov	r0, r7
   1b4b8:	bl	111f8 <strcmp@plt>
   1b4bc:	subs	r5, r0, #0
   1b4c0:	bne	1b578 <__assert_fail@plt+0xa020>
   1b4c4:	cmp	r6, #0
   1b4c8:	bne	1b4dc <__assert_fail@plt+0x9f84>
   1b4cc:	bl	113fc <__ctype_b_loc@plt>
   1b4d0:	mov	r3, r5
   1b4d4:	mov	lr, #1
   1b4d8:	b	1b534 <__assert_fail@plt+0x9fdc>
   1b4dc:	bl	113fc <__ctype_b_loc@plt>
   1b4e0:	mov	r3, r5
   1b4e4:	mov	lr, #1
   1b4e8:	b	1b4f8 <__assert_fail@plt+0x9fa0>
   1b4ec:	add	r3, r3, #1
   1b4f0:	cmp	r3, #256	; 0x100
   1b4f4:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b4f8:	ldr	r1, [r0]
   1b4fc:	lsl	r2, r3, #1
   1b500:	ldrsh	r2, [r1, r2]
   1b504:	cmp	r2, #0
   1b508:	bge	1b4ec <__assert_fail@plt+0x9f94>
   1b50c:	ldrb	r2, [r6, r3]
   1b510:	asr	ip, r2, #5
   1b514:	and	r2, r2, #31
   1b518:	ldr	r1, [r4, ip, lsl #2]
   1b51c:	orr	r2, r1, lr, lsl r2
   1b520:	str	r2, [r4, ip, lsl #2]
   1b524:	b	1b4ec <__assert_fail@plt+0x9f94>
   1b528:	add	r3, r3, #1
   1b52c:	cmp	r3, #256	; 0x100
   1b530:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b534:	ldr	r1, [r0]
   1b538:	lsl	r2, r3, #1
   1b53c:	ldrsh	r2, [r1, r2]
   1b540:	cmp	r2, #0
   1b544:	bge	1b528 <__assert_fail@plt+0x9fd0>
   1b548:	add	r2, r3, #31
   1b54c:	cmp	r3, #0
   1b550:	movge	r2, r3
   1b554:	asr	r2, r2, #5
   1b558:	rsbs	r1, r3, #0
   1b55c:	and	ip, r3, #31
   1b560:	and	r1, r1, #31
   1b564:	rsbpl	ip, r1, #0
   1b568:	ldr	r1, [r4, r2, lsl #2]
   1b56c:	orr	r1, r1, lr, lsl ip
   1b570:	str	r1, [r4, r2, lsl #2]
   1b574:	b	1b528 <__assert_fail@plt+0x9fd0>
   1b578:	movw	r1, #29080	; 0x7198
   1b57c:	movt	r1, #2
   1b580:	mov	r0, r7
   1b584:	bl	111f8 <strcmp@plt>
   1b588:	subs	r5, r0, #0
   1b58c:	bne	1b644 <__assert_fail@plt+0xa0ec>
   1b590:	cmp	r6, #0
   1b594:	bne	1b5a8 <__assert_fail@plt+0xa050>
   1b598:	bl	113fc <__ctype_b_loc@plt>
   1b59c:	mov	r3, r5
   1b5a0:	mov	lr, #1
   1b5a4:	b	1b600 <__assert_fail@plt+0xa0a8>
   1b5a8:	bl	113fc <__ctype_b_loc@plt>
   1b5ac:	mov	r3, #0
   1b5b0:	mov	lr, #1
   1b5b4:	b	1b5c8 <__assert_fail@plt+0xa070>
   1b5b8:	add	r3, r3, #2
   1b5bc:	add	r6, r6, #1
   1b5c0:	cmp	r3, #512	; 0x200
   1b5c4:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b5c8:	ldr	r2, [r0]
   1b5cc:	ldrh	r2, [r2, r3]
   1b5d0:	tst	r2, #4
   1b5d4:	beq	1b5b8 <__assert_fail@plt+0xa060>
   1b5d8:	ldrb	r2, [r6]
   1b5dc:	asr	ip, r2, #5
   1b5e0:	and	r2, r2, #31
   1b5e4:	ldr	r1, [r4, ip, lsl #2]
   1b5e8:	orr	r2, r1, lr, lsl r2
   1b5ec:	str	r2, [r4, ip, lsl #2]
   1b5f0:	b	1b5b8 <__assert_fail@plt+0xa060>
   1b5f4:	add	r3, r3, #1
   1b5f8:	cmp	r3, #256	; 0x100
   1b5fc:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b600:	ldr	r1, [r0]
   1b604:	lsl	r2, r3, #1
   1b608:	ldrh	r2, [r1, r2]
   1b60c:	tst	r2, #4
   1b610:	beq	1b5f4 <__assert_fail@plt+0xa09c>
   1b614:	add	r2, r3, #31
   1b618:	cmp	r3, #0
   1b61c:	movge	r2, r3
   1b620:	asr	r2, r2, #5
   1b624:	rsbs	r1, r3, #0
   1b628:	and	ip, r3, #31
   1b62c:	and	r1, r1, #31
   1b630:	rsbpl	ip, r1, #0
   1b634:	ldr	r1, [r4, r2, lsl #2]
   1b638:	orr	r1, r1, lr, lsl ip
   1b63c:	str	r1, [r4, r2, lsl #2]
   1b640:	b	1b5f4 <__assert_fail@plt+0xa09c>
   1b644:	movw	r1, #29088	; 0x71a0
   1b648:	movt	r1, #2
   1b64c:	mov	r0, r7
   1b650:	bl	111f8 <strcmp@plt>
   1b654:	subs	r5, r0, #0
   1b658:	movne	r5, #4
   1b65c:	bne	1b718 <__assert_fail@plt+0xa1c0>
   1b660:	cmp	r6, #0
   1b664:	bne	1b678 <__assert_fail@plt+0xa120>
   1b668:	bl	113fc <__ctype_b_loc@plt>
   1b66c:	mov	r3, r5
   1b670:	mov	lr, #1
   1b674:	b	1b6d0 <__assert_fail@plt+0xa178>
   1b678:	bl	113fc <__ctype_b_loc@plt>
   1b67c:	mov	r3, r5
   1b680:	mov	lr, #1
   1b684:	b	1b694 <__assert_fail@plt+0xa13c>
   1b688:	add	r3, r3, #1
   1b68c:	cmp	r3, #256	; 0x100
   1b690:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b694:	ldr	r1, [r0]
   1b698:	lsl	r2, r3, #1
   1b69c:	ldrh	r2, [r1, r2]
   1b6a0:	tst	r2, #4096	; 0x1000
   1b6a4:	beq	1b688 <__assert_fail@plt+0xa130>
   1b6a8:	ldrb	r2, [r6, r3]
   1b6ac:	asr	ip, r2, #5
   1b6b0:	and	r2, r2, #31
   1b6b4:	ldr	r1, [r4, ip, lsl #2]
   1b6b8:	orr	r2, r1, lr, lsl r2
   1b6bc:	str	r2, [r4, ip, lsl #2]
   1b6c0:	b	1b688 <__assert_fail@plt+0xa130>
   1b6c4:	add	r3, r3, #1
   1b6c8:	cmp	r3, #256	; 0x100
   1b6cc:	beq	1b718 <__assert_fail@plt+0xa1c0>
   1b6d0:	ldr	r1, [r0]
   1b6d4:	lsl	r2, r3, #1
   1b6d8:	ldrh	r2, [r1, r2]
   1b6dc:	tst	r2, #4096	; 0x1000
   1b6e0:	beq	1b6c4 <__assert_fail@plt+0xa16c>
   1b6e4:	add	r2, r3, #31
   1b6e8:	cmp	r3, #0
   1b6ec:	movge	r2, r3
   1b6f0:	asr	r2, r2, #5
   1b6f4:	rsbs	r1, r3, #0
   1b6f8:	and	ip, r3, #31
   1b6fc:	and	r1, r1, #31
   1b700:	rsbpl	ip, r1, #0
   1b704:	ldr	r1, [r4, r2, lsl #2]
   1b708:	orr	r1, r1, lr, lsl ip
   1b70c:	str	r1, [r4, r2, lsl #2]
   1b710:	b	1b6c4 <__assert_fail@plt+0xa16c>
   1b714:	mov	r5, #12
   1b718:	mov	r0, r5
   1b71c:	ldrd	r4, [sp]
   1b720:	ldrd	r6, [sp, #8]
   1b724:	ldrd	r8, [sp, #16]
   1b728:	ldr	sl, [sp, #24]
   1b72c:	add	sp, sp, #28
   1b730:	pop	{pc}		; (ldr pc, [sp], #4)
   1b734:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b738:	strd	r6, [sp, #8]
   1b73c:	strd	r8, [sp, #16]
   1b740:	str	sl, [sp, #24]
   1b744:	str	lr, [sp, #28]
   1b748:	sub	sp, sp, #24
   1b74c:	mov	r6, r0
   1b750:	mov	r9, r1
   1b754:	mov	sl, r2
   1b758:	mov	r5, r3
   1b75c:	ldrb	r8, [sp, #56]	; 0x38
   1b760:	mov	r3, #0
   1b764:	str	r3, [sp, #20]
   1b768:	mov	r1, #1
   1b76c:	mov	r0, #32
   1b770:	bl	25880 <__assert_fail@plt+0x14328>
   1b774:	subs	r4, r0, #0
   1b778:	beq	1b8ec <__assert_fail@plt+0xa394>
   1b77c:	mov	r1, #1
   1b780:	mov	r0, #40	; 0x28
   1b784:	bl	25880 <__assert_fail@plt+0x14328>
   1b788:	subs	r7, r0, #0
   1b78c:	beq	1b900 <__assert_fail@plt+0xa3a8>
   1b790:	ldrb	r3, [r7, #16]
   1b794:	bfi	r3, r8, #0, #1
   1b798:	strb	r3, [r7, #16]
   1b79c:	mov	r3, #0
   1b7a0:	str	r3, [sp, #4]
   1b7a4:	str	sl, [sp]
   1b7a8:	add	r3, sp, #20
   1b7ac:	mov	r2, r7
   1b7b0:	mov	r1, r4
   1b7b4:	mov	r0, r9
   1b7b8:	bl	1acb8 <__assert_fail@plt+0x9760>
   1b7bc:	subs	r9, r0, #0
   1b7c0:	bne	1b91c <__assert_fail@plt+0xa3c4>
   1b7c4:	ldrb	r3, [r5]
   1b7c8:	cmp	r3, #0
   1b7cc:	beq	1b7f4 <__assert_fail@plt+0xa29c>
   1b7d0:	mov	r0, #1
   1b7d4:	lsr	r1, r3, #5
   1b7d8:	and	r3, r3, #31
   1b7dc:	ldr	r2, [r4, r1, lsl #2]
   1b7e0:	orr	r3, r2, r0, lsl r3
   1b7e4:	str	r3, [r4, r1, lsl #2]
   1b7e8:	ldrb	r3, [r5, #1]!
   1b7ec:	cmp	r3, #0
   1b7f0:	bne	1b7d4 <__assert_fail@plt+0xa27c>
   1b7f4:	cmp	r8, #0
   1b7f8:	beq	1b818 <__assert_fail@plt+0xa2c0>
   1b7fc:	sub	r3, r4, #4
   1b800:	add	r1, r4, #28
   1b804:	ldr	r2, [r3, #4]!
   1b808:	mvn	r2, r2
   1b80c:	str	r2, [r3]
   1b810:	cmp	r3, r1
   1b814:	bne	1b804 <__assert_fail@plt+0xa2ac>
   1b818:	ldr	r3, [r6, #92]	; 0x5c
   1b81c:	cmp	r3, #1
   1b820:	ble	1b84c <__assert_fail@plt+0xa2f4>
   1b824:	sub	r3, r4, #4
   1b828:	ldr	r1, [r6, #60]	; 0x3c
   1b82c:	sub	r1, r1, #4
   1b830:	add	ip, r4, #28
   1b834:	ldr	r2, [r3, #4]!
   1b838:	ldr	r0, [r1, #4]!
   1b83c:	and	r2, r2, r0
   1b840:	str	r2, [r3]
   1b844:	cmp	r3, ip
   1b848:	bne	1b834 <__assert_fail@plt+0xa2dc>
   1b84c:	mov	r1, #0
   1b850:	str	r1, [sp, #16]
   1b854:	str	r4, [sp, #12]
   1b858:	mov	r3, #3
   1b85c:	strb	r3, [sp, #16]
   1b860:	add	r3, sp, #12
   1b864:	mov	r2, r1
   1b868:	mov	r0, r6
   1b86c:	bl	17224 <__assert_fail@plt+0x5ccc>
   1b870:	subs	r5, r0, #0
   1b874:	beq	1b948 <__assert_fail@plt+0xa3f0>
   1b878:	ldr	r3, [r6, #92]	; 0x5c
   1b87c:	cmp	r3, #1
   1b880:	ble	1b93c <__assert_fail@plt+0xa3e4>
   1b884:	mov	r3, #6
   1b888:	strb	r3, [sp, #16]
   1b88c:	str	r7, [sp, #12]
   1b890:	ldrb	r3, [r6, #88]	; 0x58
   1b894:	orr	r3, r3, #2
   1b898:	strb	r3, [r6, #88]	; 0x58
   1b89c:	add	r3, sp, #12
   1b8a0:	mov	r2, #0
   1b8a4:	mov	r1, r2
   1b8a8:	mov	r0, r6
   1b8ac:	bl	17224 <__assert_fail@plt+0x5ccc>
   1b8b0:	subs	r2, r0, #0
   1b8b4:	beq	1b948 <__assert_fail@plt+0xa3f0>
   1b8b8:	mov	r3, #10
   1b8bc:	mov	r1, r5
   1b8c0:	mov	r0, r6
   1b8c4:	bl	173c0 <__assert_fail@plt+0x5e68>
   1b8c8:	mov	r5, r0
   1b8cc:	mov	r0, r5
   1b8d0:	add	sp, sp, #24
   1b8d4:	ldrd	r4, [sp]
   1b8d8:	ldrd	r6, [sp, #8]
   1b8dc:	ldrd	r8, [sp, #16]
   1b8e0:	ldr	sl, [sp, #24]
   1b8e4:	add	sp, sp, #28
   1b8e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8ec:	mov	r3, #12
   1b8f0:	ldr	r2, [sp, #60]	; 0x3c
   1b8f4:	str	r3, [r2]
   1b8f8:	mov	r5, r4
   1b8fc:	b	1b8cc <__assert_fail@plt+0xa374>
   1b900:	mov	r0, r4
   1b904:	bl	13eac <__assert_fail@plt+0x2954>
   1b908:	mov	r3, #12
   1b90c:	ldr	r2, [sp, #60]	; 0x3c
   1b910:	str	r3, [r2]
   1b914:	mov	r5, r7
   1b918:	b	1b8cc <__assert_fail@plt+0xa374>
   1b91c:	mov	r0, r4
   1b920:	bl	13eac <__assert_fail@plt+0x2954>
   1b924:	mov	r0, r7
   1b928:	bl	18f20 <__assert_fail@plt+0x79c8>
   1b92c:	ldr	r3, [sp, #60]	; 0x3c
   1b930:	str	r9, [r3]
   1b934:	mov	r5, #0
   1b938:	b	1b8cc <__assert_fail@plt+0xa374>
   1b93c:	mov	r0, r7
   1b940:	bl	18f20 <__assert_fail@plt+0x79c8>
   1b944:	b	1b8cc <__assert_fail@plt+0xa374>
   1b948:	mov	r0, r4
   1b94c:	bl	13eac <__assert_fail@plt+0x2954>
   1b950:	mov	r0, r7
   1b954:	bl	18f20 <__assert_fail@plt+0x79c8>
   1b958:	mov	r3, #12
   1b95c:	ldr	r2, [sp, #60]	; 0x3c
   1b960:	str	r3, [r2]
   1b964:	mov	r5, #0
   1b968:	b	1b8cc <__assert_fail@plt+0xa374>
   1b96c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b970:	strd	r6, [sp, #8]
   1b974:	strd	r8, [sp, #16]
   1b978:	strd	sl, [sp, #24]
   1b97c:	str	lr, [sp, #32]
   1b980:	sub	sp, sp, #4
   1b984:	ldr	r9, [r0]
   1b988:	add	ip, r9, r1, lsl #3
   1b98c:	ldrb	fp, [ip, #4]
   1b990:	cmp	fp, #7
   1b994:	beq	1ba00 <__assert_fail@plt+0xa4a8>
   1b998:	mov	r5, r3
   1b99c:	mov	r6, r2
   1b9a0:	mov	r8, r1
   1b9a4:	mov	r7, r0
   1b9a8:	mov	r1, r3
   1b9ac:	mov	r0, r2
   1b9b0:	bl	163e0 <__assert_fail@plt+0x4e88>
   1b9b4:	mov	sl, r0
   1b9b8:	cmp	fp, #5
   1b9bc:	beq	1bb14 <__assert_fail@plt+0xa5bc>
   1b9c0:	cmp	fp, #6
   1b9c4:	movne	r4, #0
   1b9c8:	moveq	r4, #1
   1b9cc:	cmp	r0, #1
   1b9d0:	movle	r4, #0
   1b9d4:	cmp	r4, #0
   1b9d8:	moveq	sl, #0
   1b9dc:	bne	1bb5c <__assert_fail@plt+0xa604>
   1b9e0:	mov	r0, sl
   1b9e4:	add	sp, sp, #4
   1b9e8:	ldrd	r4, [sp]
   1b9ec:	ldrd	r6, [sp, #8]
   1b9f0:	ldrd	r8, [sp, #16]
   1b9f4:	ldrd	sl, [sp, #24]
   1b9f8:	add	sp, sp, #32
   1b9fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba00:	ldr	r1, [r2, #4]
   1ba04:	ldrb	r0, [r1, r3]
   1ba08:	cmp	r0, #193	; 0xc1
   1ba0c:	movls	sl, #0
   1ba10:	bls	1b9e0 <__assert_fail@plt+0xa488>
   1ba14:	add	ip, r3, #1
   1ba18:	ldr	r2, [r2, #48]	; 0x30
   1ba1c:	cmp	ip, r2
   1ba20:	movge	sl, #0
   1ba24:	bge	1b9e0 <__assert_fail@plt+0xa488>
   1ba28:	add	lr, r1, r3
   1ba2c:	ldrb	lr, [lr, #1]
   1ba30:	cmp	r0, #223	; 0xdf
   1ba34:	bls	1ba9c <__assert_fail@plt+0xa544>
   1ba38:	cmp	r0, #239	; 0xef
   1ba3c:	bhi	1bab0 <__assert_fail@plt+0xa558>
   1ba40:	cmp	lr, #159	; 0x9f
   1ba44:	cmpls	r0, #224	; 0xe0
   1ba48:	movne	sl, #3
   1ba4c:	beq	1bc84 <__assert_fail@plt+0xa72c>
   1ba50:	add	r0, sl, r3
   1ba54:	cmp	r2, r0
   1ba58:	movlt	sl, #0
   1ba5c:	blt	1b9e0 <__assert_fail@plt+0xa488>
   1ba60:	ldrb	r2, [r1, ip]
   1ba64:	eor	r2, r2, #128	; 0x80
   1ba68:	cmp	r2, #63	; 0x3f
   1ba6c:	bhi	1bc8c <__assert_fail@plt+0xa734>
   1ba70:	add	r0, r3, #2
   1ba74:	add	r0, r1, r0
   1ba78:	add	r3, r1, r3
   1ba7c:	add	r3, r3, sl
   1ba80:	ldrb	r2, [r0], #1
   1ba84:	eor	r2, r2, #128	; 0x80
   1ba88:	cmp	r2, #63	; 0x3f
   1ba8c:	bhi	1bc94 <__assert_fail@plt+0xa73c>
   1ba90:	cmp	r3, r0
   1ba94:	bne	1ba80 <__assert_fail@plt+0xa528>
   1ba98:	b	1b9e0 <__assert_fail@plt+0xa488>
   1ba9c:	eor	lr, lr, #128	; 0x80
   1baa0:	cmp	lr, #63	; 0x3f
   1baa4:	movhi	sl, #0
   1baa8:	movls	sl, #2
   1baac:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bab0:	cmp	r0, #247	; 0xf7
   1bab4:	bhi	1bad0 <__assert_fail@plt+0xa578>
   1bab8:	cmp	lr, #143	; 0x8f
   1babc:	cmpls	r0, #240	; 0xf0
   1bac0:	movne	sl, #4
   1bac4:	bne	1ba50 <__assert_fail@plt+0xa4f8>
   1bac8:	mov	sl, #0
   1bacc:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bad0:	cmp	r0, #251	; 0xfb
   1bad4:	bhi	1baf0 <__assert_fail@plt+0xa598>
   1bad8:	cmp	lr, #135	; 0x87
   1badc:	cmpls	r0, #248	; 0xf8
   1bae0:	movne	sl, #5
   1bae4:	bne	1ba50 <__assert_fail@plt+0xa4f8>
   1bae8:	mov	sl, #0
   1baec:	b	1b9e0 <__assert_fail@plt+0xa488>
   1baf0:	cmp	r0, #253	; 0xfd
   1baf4:	movhi	sl, #0
   1baf8:	bhi	1b9e0 <__assert_fail@plt+0xa488>
   1bafc:	cmp	lr, #131	; 0x83
   1bb00:	cmpls	r0, #252	; 0xfc
   1bb04:	moveq	sl, #0
   1bb08:	beq	1b9e0 <__assert_fail@plt+0xa488>
   1bb0c:	mov	sl, #6
   1bb10:	b	1ba50 <__assert_fail@plt+0xa4f8>
   1bb14:	cmp	r0, #1
   1bb18:	movle	sl, #0
   1bb1c:	ble	1b9e0 <__assert_fail@plt+0xa488>
   1bb20:	ldr	r3, [r7, #128]	; 0x80
   1bb24:	tst	r3, #64	; 0x40
   1bb28:	bne	1bb40 <__assert_fail@plt+0xa5e8>
   1bb2c:	ldr	r2, [r6, #4]
   1bb30:	ldrb	r2, [r2, r5]
   1bb34:	cmp	r2, #10
   1bb38:	moveq	sl, #0
   1bb3c:	beq	1b9e0 <__assert_fail@plt+0xa488>
   1bb40:	tst	r3, #128	; 0x80
   1bb44:	beq	1b9e0 <__assert_fail@plt+0xa488>
   1bb48:	ldr	r3, [r6, #4]
   1bb4c:	ldrb	r3, [r3, r5]
   1bb50:	cmp	r3, #0
   1bb54:	moveq	sl, #0
   1bb58:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bb5c:	ldr	r7, [r9, r8, lsl #3]
   1bb60:	ldr	r3, [r7, #32]
   1bb64:	cmp	r3, #0
   1bb68:	bne	1bba8 <__assert_fail@plt+0xa650>
   1bb6c:	ldr	r3, [r7, #36]	; 0x24
   1bb70:	cmp	r3, #0
   1bb74:	bne	1bba8 <__assert_fail@plt+0xa650>
   1bb78:	ldr	r3, [r7, #20]
   1bb7c:	cmp	r3, #0
   1bb80:	moveq	r4, #0
   1bb84:	beq	1bc3c <__assert_fail@plt+0xa6e4>
   1bb88:	mov	r1, r5
   1bb8c:	mov	r0, r6
   1bb90:	bl	16450 <__assert_fail@plt+0x4ef8>
   1bb94:	mov	r4, r0
   1bb98:	ldr	r0, [r7, #20]
   1bb9c:	cmp	r0, #0
   1bba0:	bgt	1bbc4 <__assert_fail@plt+0xa66c>
   1bba4:	b	1bc3c <__assert_fail@plt+0xa6e4>
   1bba8:	mov	r1, r5
   1bbac:	mov	r0, r6
   1bbb0:	bl	16450 <__assert_fail@plt+0x4ef8>
   1bbb4:	mov	r4, r0
   1bbb8:	ldr	r0, [r7, #20]
   1bbbc:	cmp	r0, #0
   1bbc0:	ble	1bc04 <__assert_fail@plt+0xa6ac>
   1bbc4:	ldr	r2, [r7]
   1bbc8:	ldr	r3, [r2]
   1bbcc:	cmp	r3, r4
   1bbd0:	beq	1bbf0 <__assert_fail@plt+0xa698>
   1bbd4:	mov	r3, #0
   1bbd8:	add	r3, r3, #1
   1bbdc:	cmp	r0, r3
   1bbe0:	beq	1bc04 <__assert_fail@plt+0xa6ac>
   1bbe4:	ldr	r1, [r2, #4]!
   1bbe8:	cmp	r1, r4
   1bbec:	bne	1bbd8 <__assert_fail@plt+0xa680>
   1bbf0:	ldrb	r3, [r7, #16]
   1bbf4:	and	r3, r3, #1
   1bbf8:	cmp	r3, #0
   1bbfc:	movne	sl, #0
   1bc00:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bc04:	ldr	r3, [r7, #36]	; 0x24
   1bc08:	cmp	r3, #0
   1bc0c:	ble	1bc3c <__assert_fail@plt+0xa6e4>
   1bc10:	mov	r5, #0
   1bc14:	ldr	r3, [r7, #12]
   1bc18:	ldr	r1, [r3, r5, lsl #2]
   1bc1c:	mov	r0, r4
   1bc20:	bl	111ec <iswctype@plt>
   1bc24:	cmp	r0, #0
   1bc28:	bne	1bbf0 <__assert_fail@plt+0xa698>
   1bc2c:	add	r5, r5, #1
   1bc30:	ldr	r3, [r7, #36]	; 0x24
   1bc34:	cmp	r3, r5
   1bc38:	bgt	1bc14 <__assert_fail@plt+0xa6bc>
   1bc3c:	ldr	r0, [r7, #32]
   1bc40:	cmp	r0, #0
   1bc44:	ble	1bca4 <__assert_fail@plt+0xa74c>
   1bc48:	ldr	r2, [r7, #4]
   1bc4c:	sub	r2, r2, #4
   1bc50:	mov	r3, #0
   1bc54:	b	1bc64 <__assert_fail@plt+0xa70c>
   1bc58:	add	r3, r3, #1
   1bc5c:	cmp	r0, r3
   1bc60:	beq	1bca4 <__assert_fail@plt+0xa74c>
   1bc64:	ldr	r1, [r2, #4]!
   1bc68:	cmp	r4, r1
   1bc6c:	bcc	1bc58 <__assert_fail@plt+0xa700>
   1bc70:	ldr	r1, [r7, #8]
   1bc74:	ldr	r1, [r1, r3, lsl #2]
   1bc78:	cmp	r4, r1
   1bc7c:	bhi	1bc58 <__assert_fail@plt+0xa700>
   1bc80:	b	1bbf0 <__assert_fail@plt+0xa698>
   1bc84:	mov	sl, #0
   1bc88:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bc8c:	mov	sl, #0
   1bc90:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bc94:	mov	sl, #0
   1bc98:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bc9c:	mov	sl, #0
   1bca0:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bca4:	ldrb	r3, [r7, #16]
   1bca8:	tst	r3, #1
   1bcac:	beq	1bc9c <__assert_fail@plt+0xa744>
   1bcb0:	cmp	sl, #1
   1bcb4:	movlt	sl, #1
   1bcb8:	b	1b9e0 <__assert_fail@plt+0xa488>
   1bcbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bcc0:	strd	r6, [sp, #8]
   1bcc4:	strd	r8, [sp, #16]
   1bcc8:	strd	sl, [sp, #24]
   1bccc:	str	lr, [sp, #32]
   1bcd0:	sub	sp, sp, #28
   1bcd4:	str	r3, [sp, #4]
   1bcd8:	add	r3, r1, r1, lsl #1
   1bcdc:	ldr	r6, [r0, #28]
   1bce0:	add	r6, r6, r3, lsl #2
   1bce4:	mov	r3, #0
   1bce8:	str	r3, [sp, #12]
   1bcec:	str	r3, [sp, #16]
   1bcf0:	str	r3, [sp, #20]
   1bcf4:	ldr	r3, [r6, #4]
   1bcf8:	cmp	r3, #0
   1bcfc:	ble	1bd78 <__assert_fail@plt+0xa820>
   1bd00:	mov	r7, r0
   1bd04:	mov	r8, r1
   1bd08:	mov	fp, r2
   1bd0c:	mov	r5, #0
   1bd10:	b	1bdf8 <__assert_fail@plt+0xa8a0>
   1bd14:	ldr	r0, [sp, #20]
   1bd18:	bl	13eac <__assert_fail@plt+0x2954>
   1bd1c:	b	1bd84 <__assert_fail@plt+0xa82c>
   1bd20:	cmp	r3, #0
   1bd24:	ble	1bd78 <__assert_fail@plt+0xa820>
   1bd28:	mov	r4, #0
   1bd2c:	b	1bd58 <__assert_fail@plt+0xa800>
   1bd30:	mov	r1, r5
   1bd34:	mov	r0, fp
   1bd38:	bl	16530 <__assert_fail@plt+0x4fd8>
   1bd3c:	sub	r1, r0, #1
   1bd40:	mov	r0, fp
   1bd44:	bl	165c8 <__assert_fail@plt+0x5070>
   1bd48:	add	r4, r4, #1
   1bd4c:	ldr	r3, [r6, #4]
   1bd50:	cmp	r3, r4
   1bd54:	ble	1bd78 <__assert_fail@plt+0xa820>
   1bd58:	ldr	r3, [r6, #8]
   1bd5c:	ldr	r5, [r3, r4, lsl #2]
   1bd60:	mov	r1, r5
   1bd64:	add	r0, sp, #12
   1bd68:	bl	16530 <__assert_fail@plt+0x4fd8>
   1bd6c:	cmp	r0, #0
   1bd70:	bne	1bd48 <__assert_fail@plt+0xa7f0>
   1bd74:	b	1bd30 <__assert_fail@plt+0xa7d8>
   1bd78:	ldr	r0, [sp, #20]
   1bd7c:	bl	13eac <__assert_fail@plt+0x2954>
   1bd80:	mov	r4, #0
   1bd84:	mov	r0, r4
   1bd88:	add	sp, sp, #28
   1bd8c:	ldrd	r4, [sp]
   1bd90:	ldrd	r6, [sp, #8]
   1bd94:	ldrd	r8, [sp, #16]
   1bd98:	ldrd	sl, [sp, #24]
   1bd9c:	add	sp, sp, #32
   1bda0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bda4:	mov	r1, r9
   1bda8:	mov	r0, r6
   1bdac:	bl	16530 <__assert_fail@plt+0x4fd8>
   1bdb0:	cmp	r0, #0
   1bdb4:	bne	1bde8 <__assert_fail@plt+0xa890>
   1bdb8:	mov	r1, r9
   1bdbc:	mov	r0, fp
   1bdc0:	bl	16530 <__assert_fail@plt+0x4fd8>
   1bdc4:	cmp	r0, #0
   1bdc8:	beq	1bde8 <__assert_fail@plt+0xa890>
   1bdcc:	ldr	r2, [r7, #28]
   1bdd0:	add	r2, r2, r4
   1bdd4:	ldr	r1, [sp, #4]
   1bdd8:	add	r0, sp, #12
   1bddc:	bl	17948 <__assert_fail@plt+0x63f0>
   1bde0:	subs	r4, r0, #0
   1bde4:	bne	1bd14 <__assert_fail@plt+0xa7bc>
   1bde8:	add	r5, r5, #1
   1bdec:	ldr	r3, [r6, #4]
   1bdf0:	cmp	r3, r5
   1bdf4:	ble	1bd20 <__assert_fail@plt+0xa7c8>
   1bdf8:	ldr	r3, [r6, #8]
   1bdfc:	ldr	r4, [r3, r5, lsl #2]
   1be00:	cmp	r8, r4
   1be04:	beq	1bde8 <__assert_fail@plt+0xa890>
   1be08:	ldr	r3, [r7]
   1be0c:	add	r3, r3, r4, lsl #3
   1be10:	ldrb	r3, [r3, #4]
   1be14:	tst	r3, #8
   1be18:	beq	1bde8 <__assert_fail@plt+0xa890>
   1be1c:	add	r4, r4, r4, lsl #1
   1be20:	lsl	r4, r4, #2
   1be24:	ldr	r3, [r7, #20]
   1be28:	add	r3, r3, r4
   1be2c:	ldr	r2, [r3, #8]
   1be30:	ldr	r9, [r2]
   1be34:	ldr	r3, [r3, #4]
   1be38:	cmp	r3, #1
   1be3c:	ble	1bda4 <__assert_fail@plt+0xa84c>
   1be40:	ldr	sl, [r2, #4]
   1be44:	mov	r1, r9
   1be48:	mov	r0, r6
   1be4c:	bl	16530 <__assert_fail@plt+0x4fd8>
   1be50:	cmp	r0, #0
   1be54:	bne	1be6c <__assert_fail@plt+0xa914>
   1be58:	mov	r1, r9
   1be5c:	mov	r0, fp
   1be60:	bl	16530 <__assert_fail@plt+0x4fd8>
   1be64:	cmp	r0, #0
   1be68:	bne	1bdcc <__assert_fail@plt+0xa874>
   1be6c:	cmp	sl, #0
   1be70:	ble	1bde8 <__assert_fail@plt+0xa890>
   1be74:	mov	r1, sl
   1be78:	mov	r0, r6
   1be7c:	bl	16530 <__assert_fail@plt+0x4fd8>
   1be80:	cmp	r0, #0
   1be84:	bne	1bde8 <__assert_fail@plt+0xa890>
   1be88:	mov	r1, sl
   1be8c:	mov	r0, fp
   1be90:	bl	16530 <__assert_fail@plt+0x4fd8>
   1be94:	cmp	r0, #0
   1be98:	beq	1bde8 <__assert_fail@plt+0xa890>
   1be9c:	b	1bdcc <__assert_fail@plt+0xa874>
   1bea0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bea4:	strd	r6, [sp, #8]
   1bea8:	strd	r8, [sp, #16]
   1beac:	strd	sl, [sp, #24]
   1beb0:	str	lr, [sp, #32]
   1beb4:	sub	sp, sp, #28
   1beb8:	mov	r4, r0
   1bebc:	mov	r6, r1
   1bec0:	mov	r7, r2
   1bec4:	ldr	r5, [r0, #24]
   1bec8:	cmp	r5, r1
   1becc:	suble	r5, r1, r5
   1bed0:	ble	1bf2c <__assert_fail@plt+0xa9d4>
   1bed4:	ldr	r3, [r0, #80]	; 0x50
   1bed8:	cmp	r3, #1
   1bedc:	bgt	1bff0 <__assert_fail@plt+0xaa98>
   1bee0:	ldr	r3, [r4, #44]	; 0x2c
   1bee4:	str	r3, [r4, #48]	; 0x30
   1bee8:	ldr	r3, [r4, #52]	; 0x34
   1beec:	str	r3, [r4, #56]	; 0x38
   1bef0:	mov	r3, #0
   1bef4:	str	r3, [r4, #28]
   1bef8:	str	r3, [r4, #24]
   1befc:	str	r3, [r4, #32]
   1bf00:	strb	r3, [r4, #76]	; 0x4c
   1bf04:	and	r3, r7, #1
   1bf08:	cmp	r3, #0
   1bf0c:	movne	r3, #4
   1bf10:	moveq	r3, #6
   1bf14:	str	r3, [r4, #60]	; 0x3c
   1bf18:	ldrb	r3, [r4, #75]	; 0x4b
   1bf1c:	cmp	r3, #0
   1bf20:	ldreq	r3, [r4]
   1bf24:	streq	r3, [r4, #4]
   1bf28:	mov	r5, r6
   1bf2c:	cmp	r5, #0
   1bf30:	beq	1bfa8 <__assert_fail@plt+0xaa50>
   1bf34:	ldr	r3, [r4, #32]
   1bf38:	cmp	r3, r5
   1bf3c:	ble	1c224 <__assert_fail@plt+0xaccc>
   1bf40:	ldrb	r3, [r4, #76]	; 0x4c
   1bf44:	cmp	r3, #0
   1bf48:	bne	1c000 <__assert_fail@plt+0xaaa8>
   1bf4c:	mov	r2, r7
   1bf50:	sub	r1, r5, #1
   1bf54:	mov	r0, r4
   1bf58:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1bf5c:	str	r0, [r4, #60]	; 0x3c
   1bf60:	ldr	r3, [r4, #80]	; 0x50
   1bf64:	cmp	r3, #1
   1bf68:	bgt	1c1f0 <__assert_fail@plt+0xac98>
   1bf6c:	ldrb	r3, [r4, #75]	; 0x4b
   1bf70:	cmp	r3, #0
   1bf74:	bne	1c20c <__assert_fail@plt+0xacb4>
   1bf78:	ldr	r3, [r4, #28]
   1bf7c:	sub	r3, r3, r5
   1bf80:	str	r3, [r4, #28]
   1bf84:	ldr	r3, [r4, #32]
   1bf88:	sub	r3, r3, r5
   1bf8c:	str	r3, [r4, #32]
   1bf90:	ldrb	r3, [r4, #75]	; 0x4b
   1bf94:	cmp	r3, #0
   1bf98:	bne	1bfa8 <__assert_fail@plt+0xaa50>
   1bf9c:	ldr	r3, [r4, #4]
   1bfa0:	add	r3, r3, r5
   1bfa4:	str	r3, [r4, #4]
   1bfa8:	str	r6, [r4, #24]
   1bfac:	ldr	r3, [r4, #48]	; 0x30
   1bfb0:	sub	r3, r3, r5
   1bfb4:	str	r3, [r4, #48]	; 0x30
   1bfb8:	ldr	r2, [r4, #56]	; 0x38
   1bfbc:	sub	r5, r2, r5
   1bfc0:	str	r5, [r4, #56]	; 0x38
   1bfc4:	ldr	r2, [r4, #80]	; 0x50
   1bfc8:	cmp	r2, #1
   1bfcc:	ble	1c568 <__assert_fail@plt+0xb010>
   1bfd0:	ldrb	r3, [r4, #72]	; 0x48
   1bfd4:	cmp	r3, #0
   1bfd8:	beq	1c55c <__assert_fail@plt+0xb004>
   1bfdc:	mov	r0, r4
   1bfe0:	bl	17d48 <__assert_fail@plt+0x67f0>
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1c578 <__assert_fail@plt+0xb020>
   1bfec:	b	1c580 <__assert_fail@plt+0xb028>
   1bff0:	mov	r3, #0
   1bff4:	str	r3, [r0, #16]
   1bff8:	str	r3, [r0, #20]
   1bffc:	b	1bee0 <__assert_fail@plt+0xa988>
   1c000:	ldr	sl, [r4, #28]
   1c004:	ldr	r9, [r4, #12]
   1c008:	mov	r2, sl
   1c00c:	mov	r1, #0
   1c010:	b	1c020 <__assert_fail@plt+0xaac8>
   1c014:	mov	r2, r8
   1c018:	cmp	r1, r2
   1c01c:	bge	1c044 <__assert_fail@plt+0xaaec>
   1c020:	add	r3, r1, r2
   1c024:	add	r3, r3, r3, lsr #31
   1c028:	asr	r8, r3, #1
   1c02c:	ldr	r3, [r9, r8, lsl #2]
   1c030:	cmp	r3, r5
   1c034:	bgt	1c014 <__assert_fail@plt+0xaabc>
   1c038:	bge	1c04c <__assert_fail@plt+0xaaf4>
   1c03c:	add	r1, r8, #1
   1c040:	b	1c018 <__assert_fail@plt+0xaac0>
   1c044:	cmp	r3, r5
   1c048:	addlt	r8, r8, #1
   1c04c:	mov	r2, r7
   1c050:	sub	r1, r8, #1
   1c054:	mov	r0, r4
   1c058:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1c05c:	str	r0, [r4, #60]	; 0x3c
   1c060:	cmp	r5, sl
   1c064:	movge	r3, #0
   1c068:	movlt	r3, #1
   1c06c:	cmp	r5, r8
   1c070:	movne	r3, #0
   1c074:	cmp	r3, #0
   1c078:	bne	1c150 <__assert_fail@plt+0xabf8>
   1c07c:	ldr	r3, [r4, #44]	; 0x2c
   1c080:	sub	r3, r3, r6
   1c084:	add	r3, r3, r5
   1c088:	str	r3, [r4, #48]	; 0x30
   1c08c:	ldr	r3, [r4, #52]	; 0x34
   1c090:	sub	r3, r3, r6
   1c094:	add	r3, r3, r5
   1c098:	str	r3, [r4, #56]	; 0x38
   1c09c:	mov	r3, #0
   1c0a0:	strb	r3, [r4, #76]	; 0x4c
   1c0a4:	cmp	r8, r3
   1c0a8:	ble	1c0d4 <__assert_fail@plt+0xab7c>
   1c0ac:	sub	r2, r8, #-1073741823	; 0xc0000001
   1c0b0:	add	r3, r9, r2, lsl #2
   1c0b4:	ldr	r2, [r9, r2, lsl #2]
   1c0b8:	cmp	r5, r2
   1c0bc:	bne	1c0d4 <__assert_fail@plt+0xab7c>
   1c0c0:	subs	r8, r8, #1
   1c0c4:	beq	1c0d4 <__assert_fail@plt+0xab7c>
   1c0c8:	ldr	r2, [r3, #-4]!
   1c0cc:	cmp	r2, r5
   1c0d0:	beq	1c0c0 <__assert_fail@plt+0xab68>
   1c0d4:	cmp	r8, sl
   1c0d8:	bge	1c1d4 <__assert_fail@plt+0xac7c>
   1c0dc:	ldr	r2, [r4, #8]
   1c0e0:	add	r3, r2, r8, lsl #2
   1c0e4:	ldr	r2, [r2, r8, lsl #2]
   1c0e8:	cmn	r2, #1
   1c0ec:	bne	1c108 <__assert_fail@plt+0xabb0>
   1c0f0:	add	r8, r8, #1
   1c0f4:	cmp	sl, r8
   1c0f8:	beq	1c1dc <__assert_fail@plt+0xac84>
   1c0fc:	ldr	r2, [r3, #4]!
   1c100:	cmn	r2, #1
   1c104:	beq	1c0f0 <__assert_fail@plt+0xab98>
   1c108:	ldr	r2, [r9, r8, lsl #2]
   1c10c:	sub	r2, r2, r5
   1c110:	str	r2, [r4, #28]
   1c114:	cmp	r2, #0
   1c118:	beq	1c1e4 <__assert_fail@plt+0xac8c>
   1c11c:	ble	1c140 <__assert_fail@plt+0xabe8>
   1c120:	mov	r3, #0
   1c124:	mvn	r1, #0
   1c128:	ldr	r2, [r4, #8]
   1c12c:	str	r1, [r2, r3, lsl #2]
   1c130:	add	r3, r3, #1
   1c134:	ldr	r2, [r4, #28]
   1c138:	cmp	r2, r3
   1c13c:	bgt	1c128 <__assert_fail@plt+0xabd0>
   1c140:	mov	r1, #255	; 0xff
   1c144:	ldr	r0, [r4, #4]
   1c148:	bl	1145c <memset@plt>
   1c14c:	b	1c1e4 <__assert_fail@plt+0xac8c>
   1c150:	ldr	r3, [r9, r8, lsl #2]
   1c154:	cmp	r3, r5
   1c158:	bne	1c07c <__assert_fail@plt+0xab24>
   1c15c:	ldr	r0, [r4, #8]
   1c160:	lsl	r7, r5, #2
   1c164:	sub	r2, sl, r5
   1c168:	lsl	r2, r2, #2
   1c16c:	add	r1, r0, r7
   1c170:	bl	11234 <memmove@plt>
   1c174:	ldr	r0, [r4, #4]
   1c178:	ldr	r2, [r4, #28]
   1c17c:	sub	r2, r2, r5
   1c180:	add	r1, r0, r5
   1c184:	bl	11234 <memmove@plt>
   1c188:	ldr	r3, [r4, #28]
   1c18c:	sub	r3, r3, r5
   1c190:	str	r3, [r4, #28]
   1c194:	ldr	r2, [r4, #32]
   1c198:	sub	r2, r2, r5
   1c19c:	str	r2, [r4, #32]
   1c1a0:	cmp	r3, #0
   1c1a4:	ble	1bf90 <__assert_fail@plt+0xaa38>
   1c1a8:	mov	r3, #0
   1c1ac:	ldr	r1, [r4, #12]
   1c1b0:	ldr	r2, [r1, r7]
   1c1b4:	sub	r2, r2, r5
   1c1b8:	str	r2, [r1, r3, lsl #2]
   1c1bc:	add	r3, r3, #1
   1c1c0:	add	r7, r7, #4
   1c1c4:	ldr	r2, [r4, #28]
   1c1c8:	cmp	r2, r3
   1c1cc:	bgt	1c1ac <__assert_fail@plt+0xac54>
   1c1d0:	b	1bf90 <__assert_fail@plt+0xaa38>
   1c1d4:	cmp	r8, sl
   1c1d8:	bne	1c108 <__assert_fail@plt+0xabb0>
   1c1dc:	mov	r3, #0
   1c1e0:	str	r3, [r4, #28]
   1c1e4:	ldr	r3, [r4, #28]
   1c1e8:	str	r3, [r4, #32]
   1c1ec:	b	1bf90 <__assert_fail@plt+0xaa38>
   1c1f0:	ldr	r0, [r4, #8]
   1c1f4:	ldr	r2, [r4, #28]
   1c1f8:	sub	r2, r2, r5
   1c1fc:	lsl	r2, r2, #2
   1c200:	add	r1, r0, r5, lsl #2
   1c204:	bl	11234 <memmove@plt>
   1c208:	b	1bf6c <__assert_fail@plt+0xaa14>
   1c20c:	ldr	r0, [r4, #4]
   1c210:	ldr	r2, [r4, #28]
   1c214:	sub	r2, r2, r5
   1c218:	add	r1, r0, r5
   1c21c:	bl	11234 <memmove@plt>
   1c220:	b	1bf78 <__assert_fail@plt+0xaa20>
   1c224:	ldr	fp, [r4, #28]
   1c228:	ldrb	r3, [r4, #76]	; 0x4c
   1c22c:	cmp	r3, #0
   1c230:	bne	1c390 <__assert_fail@plt+0xae38>
   1c234:	mov	r3, #0
   1c238:	str	r3, [r4, #28]
   1c23c:	ldr	r3, [r4, #80]	; 0x50
   1c240:	cmp	r3, #1
   1c244:	ble	1c4f8 <__assert_fail@plt+0xafa0>
   1c248:	ldrb	r2, [r4, #73]	; 0x49
   1c24c:	cmp	r2, #0
   1c250:	beq	1c308 <__assert_fail@plt+0xadb0>
   1c254:	ldr	r1, [r4]
   1c258:	ldr	r9, [r4, #24]
   1c25c:	add	r9, r1, r9
   1c260:	sub	r3, r5, r3
   1c264:	add	r3, r9, r3
   1c268:	cmp	r1, r3
   1c26c:	movcc	r1, r3
   1c270:	mov	sl, r5
   1c274:	sub	r3, r5, #1
   1c278:	add	r8, r9, r3
   1c27c:	cmp	r1, r8
   1c280:	bhi	1c308 <__assert_fail@plt+0xadb0>
   1c284:	ldrb	r3, [r9, r3]
   1c288:	and	r3, r3, #192	; 0xc0
   1c28c:	cmp	r3, #128	; 0x80
   1c290:	subeq	r3, r8, #1
   1c294:	subeq	r1, r1, #1
   1c298:	bne	1c2bc <__assert_fail@plt+0xad64>
   1c29c:	mov	r8, r3
   1c2a0:	cmp	r3, r1
   1c2a4:	beq	1c308 <__assert_fail@plt+0xadb0>
   1c2a8:	sub	r3, r3, #1
   1c2ac:	ldrb	r2, [r8]
   1c2b0:	and	r2, r2, #192	; 0xc0
   1c2b4:	cmp	r2, #128	; 0x80
   1c2b8:	beq	1c29c <__assert_fail@plt+0xad44>
   1c2bc:	ldr	r2, [r4, #48]	; 0x30
   1c2c0:	add	r2, r9, r2
   1c2c4:	sub	r2, r2, r8
   1c2c8:	ldr	r3, [r4, #64]	; 0x40
   1c2cc:	cmp	r3, #0
   1c2d0:	moveq	ip, r8
   1c2d4:	bne	1c3bc <__assert_fail@plt+0xae64>
   1c2d8:	mov	r0, #0
   1c2dc:	mov	r1, #0
   1c2e0:	strd	r0, [sp, #16]
   1c2e4:	add	r3, sp, #16
   1c2e8:	mov	r1, ip
   1c2ec:	add	r0, sp, #4
   1c2f0:	bl	25d9c <__assert_fail@plt+0x14844>
   1c2f4:	add	r9, r9, sl
   1c2f8:	sub	r8, r9, r8
   1c2fc:	cmp	r8, r0
   1c300:	cmnls	r0, #3
   1c304:	bls	1c404 <__assert_fail@plt+0xaeac>
   1c308:	ldr	r0, [r4, #24]
   1c30c:	ldr	r3, [r4, #32]
   1c310:	add	r0, r0, r3
   1c314:	cmp	r6, r0
   1c318:	ble	1c5cc <__assert_fail@plt+0xb074>
   1c31c:	add	r9, r4, #16
   1c320:	ldr	r8, [r4, #44]	; 0x2c
   1c324:	sub	r8, r8, r0
   1c328:	ldrd	r2, [r9]
   1c32c:	strd	r2, [sp, #16]
   1c330:	mov	sl, r0
   1c334:	ldr	r1, [r4]
   1c338:	mov	r3, r9
   1c33c:	mov	r2, r8
   1c340:	add	r1, r1, r0
   1c344:	add	r0, sp, #8
   1c348:	bl	25d9c <__assert_fail@plt+0x14844>
   1c34c:	sub	r3, r0, #1
   1c350:	cmn	r3, #4
   1c354:	ldrls	r8, [sp, #8]
   1c358:	bhi	1c458 <__assert_fail@plt+0xaf00>
   1c35c:	add	r0, sl, r0
   1c360:	cmp	r6, r0
   1c364:	bgt	1c320 <__assert_fail@plt+0xadc8>
   1c368:	sub	r0, r0, r6
   1c36c:	str	r0, [r4, #28]
   1c370:	cmn	r8, #1
   1c374:	bne	1c424 <__assert_fail@plt+0xaecc>
   1c378:	mov	r2, r7
   1c37c:	sub	r1, fp, #1
   1c380:	mov	r0, r4
   1c384:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1c388:	str	r0, [r4, #60]	; 0x3c
   1c38c:	b	1c440 <__assert_fail@plt+0xaee8>
   1c390:	ldr	r3, [r4, #44]	; 0x2c
   1c394:	sub	r3, r3, r6
   1c398:	add	r3, r3, r5
   1c39c:	str	r3, [r4, #48]	; 0x30
   1c3a0:	ldr	r3, [r4, #52]	; 0x34
   1c3a4:	sub	r3, r3, r6
   1c3a8:	add	r3, r3, r5
   1c3ac:	str	r3, [r4, #56]	; 0x38
   1c3b0:	mov	r3, #0
   1c3b4:	strb	r3, [r4, #76]	; 0x4c
   1c3b8:	b	1c234 <__assert_fail@plt+0xacdc>
   1c3bc:	cmp	r2, #6
   1c3c0:	movlt	r0, r2
   1c3c4:	movge	r0, #6
   1c3c8:	cmp	r2, #0
   1c3cc:	addle	ip, sp, #8
   1c3d0:	ble	1c2d8 <__assert_fail@plt+0xad80>
   1c3d4:	add	r1, r8, r0
   1c3d8:	add	ip, sp, #24
   1c3dc:	add	r0, ip, r0
   1c3e0:	sub	r0, r0, #17
   1c3e4:	mov	lr, r8
   1c3e8:	ldrb	ip, [r1, #-1]!
   1c3ec:	ldrb	ip, [r3, ip]
   1c3f0:	strb	ip, [r0], #-1
   1c3f4:	cmp	r1, lr
   1c3f8:	bne	1c3e8 <__assert_fail@plt+0xae90>
   1c3fc:	add	ip, sp, #8
   1c400:	b	1c2d8 <__assert_fail@plt+0xad80>
   1c404:	mov	r3, #0
   1c408:	str	r3, [r4, #16]
   1c40c:	str	r3, [r4, #20]
   1c410:	sub	r0, r0, r8
   1c414:	str	r0, [r4, #28]
   1c418:	ldr	r8, [sp, #4]
   1c41c:	cmn	r8, #1
   1c420:	beq	1c308 <__assert_fail@plt+0xadb0>
   1c424:	ldrb	r3, [r4, #78]	; 0x4e
   1c428:	cmp	r3, #0
   1c42c:	bne	1c47c <__assert_fail@plt+0xaf24>
   1c430:	cmp	r8, #10
   1c434:	movne	r3, #0
   1c438:	beq	1c4a4 <__assert_fail@plt+0xaf4c>
   1c43c:	str	r3, [r4, #60]	; 0x3c
   1c440:	ldr	r2, [r4, #28]
   1c444:	cmp	r2, #0
   1c448:	bne	1c4b8 <__assert_fail@plt+0xaf60>
   1c44c:	ldr	r3, [r4, #28]
   1c450:	str	r3, [r4, #32]
   1c454:	b	1bf90 <__assert_fail@plt+0xaa38>
   1c458:	cmp	r8, #0
   1c45c:	cmpne	r0, #0
   1c460:	ldrne	r3, [r4]
   1c464:	ldrbne	r8, [r3, sl]
   1c468:	moveq	r8, #0
   1c46c:	ldrd	r2, [sp, #16]
   1c470:	strd	r2, [r9]
   1c474:	mov	r0, #1
   1c478:	b	1c35c <__assert_fail@plt+0xae04>
   1c47c:	mov	r0, r8
   1c480:	bl	11438 <iswalnum@plt>
   1c484:	subs	r3, r8, #95	; 0x5f
   1c488:	movne	r3, #1
   1c48c:	cmp	r0, #0
   1c490:	movne	r3, #0
   1c494:	cmp	r3, #0
   1c498:	moveq	r3, #1
   1c49c:	beq	1c43c <__assert_fail@plt+0xaee4>
   1c4a0:	b	1c430 <__assert_fail@plt+0xaed8>
   1c4a4:	ldrb	r3, [r4, #77]	; 0x4d
   1c4a8:	cmp	r3, #0
   1c4ac:	moveq	r3, #0
   1c4b0:	movne	r3, #2
   1c4b4:	b	1c43c <__assert_fail@plt+0xaee4>
   1c4b8:	ble	1c4dc <__assert_fail@plt+0xaf84>
   1c4bc:	mov	r3, #0
   1c4c0:	mvn	r1, #0
   1c4c4:	ldr	r2, [r4, #8]
   1c4c8:	str	r1, [r2, r3, lsl #2]
   1c4cc:	add	r3, r3, #1
   1c4d0:	ldr	r2, [r4, #28]
   1c4d4:	cmp	r2, r3
   1c4d8:	bgt	1c4c4 <__assert_fail@plt+0xaf6c>
   1c4dc:	ldrb	r3, [r4, #75]	; 0x4b
   1c4e0:	cmp	r3, #0
   1c4e4:	beq	1c44c <__assert_fail@plt+0xaef4>
   1c4e8:	mov	r1, #255	; 0xff
   1c4ec:	ldr	r0, [r4, #4]
   1c4f0:	bl	1145c <memset@plt>
   1c4f4:	b	1c44c <__assert_fail@plt+0xaef4>
   1c4f8:	ldr	r3, [r4]
   1c4fc:	ldr	r2, [r4, #24]
   1c500:	add	r3, r3, r5
   1c504:	add	r3, r3, r2
   1c508:	ldrb	r1, [r3, #-1]
   1c50c:	mov	r3, #0
   1c510:	str	r3, [r4, #32]
   1c514:	ldr	r3, [r4, #64]	; 0x40
   1c518:	cmp	r3, #0
   1c51c:	ldrbne	r1, [r3, r1]
   1c520:	lsr	r2, r1, #5
   1c524:	ldr	r0, [r4, #68]	; 0x44
   1c528:	and	r3, r1, #31
   1c52c:	ldr	r2, [r0, r2, lsl #2]
   1c530:	lsr	r3, r2, r3
   1c534:	ands	r3, r3, #1
   1c538:	bne	1c544 <__assert_fail@plt+0xafec>
   1c53c:	cmp	r1, #10
   1c540:	beq	1c54c <__assert_fail@plt+0xaff4>
   1c544:	str	r3, [r4, #60]	; 0x3c
   1c548:	b	1bf90 <__assert_fail@plt+0xaa38>
   1c54c:	ldrb	r2, [r4, #77]	; 0x4d
   1c550:	cmp	r2, #0
   1c554:	movne	r3, #2
   1c558:	b	1c544 <__assert_fail@plt+0xafec>
   1c55c:	mov	r0, r4
   1c560:	bl	177b0 <__assert_fail@plt+0x6258>
   1c564:	b	1c578 <__assert_fail@plt+0xb020>
   1c568:	ldrb	r2, [r4, #75]	; 0x4b
   1c56c:	cmp	r2, #0
   1c570:	streq	r3, [r4, #28]
   1c574:	bne	1c59c <__assert_fail@plt+0xb044>
   1c578:	mov	r0, #0
   1c57c:	str	r0, [r4, #40]	; 0x28
   1c580:	add	sp, sp, #28
   1c584:	ldrd	r4, [sp]
   1c588:	ldrd	r6, [sp, #8]
   1c58c:	ldrd	r8, [sp, #16]
   1c590:	ldrd	sl, [sp, #24]
   1c594:	add	sp, sp, #32
   1c598:	pop	{pc}		; (ldr pc, [sp], #4)
   1c59c:	ldrb	r3, [r4, #72]	; 0x48
   1c5a0:	cmp	r3, #0
   1c5a4:	bne	1c5c0 <__assert_fail@plt+0xb068>
   1c5a8:	ldr	r3, [r4, #64]	; 0x40
   1c5ac:	cmp	r3, #0
   1c5b0:	beq	1c578 <__assert_fail@plt+0xb020>
   1c5b4:	mov	r0, r4
   1c5b8:	bl	1646c <__assert_fail@plt+0x4f14>
   1c5bc:	b	1c578 <__assert_fail@plt+0xb020>
   1c5c0:	mov	r0, r4
   1c5c4:	bl	182cc <__assert_fail@plt+0x6d74>
   1c5c8:	b	1c578 <__assert_fail@plt+0xb020>
   1c5cc:	sub	r0, r0, r6
   1c5d0:	str	r0, [r4, #28]
   1c5d4:	b	1c378 <__assert_fail@plt+0xae20>
   1c5d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c5dc:	strd	r6, [sp, #8]
   1c5e0:	strd	r8, [sp, #16]
   1c5e4:	strd	sl, [sp, #24]
   1c5e8:	str	lr, [sp, #32]
   1c5ec:	sub	sp, sp, #14464	; 0x3880
   1c5f0:	sub	sp, sp, #44	; 0x2c
   1c5f4:	str	r1, [sp, #16]
   1c5f8:	mov	r3, #0
   1c5fc:	str	r3, [r1, #44]	; 0x2c
   1c600:	str	r3, [r1, #48]	; 0x30
   1c604:	mov	r2, #0
   1c608:	mov	r3, #0
   1c60c:	strd	r2, [sp, #24]
   1c610:	strd	r2, [sp, #32]
   1c614:	strd	r2, [sp, #40]	; 0x28
   1c618:	strd	r2, [sp, #48]	; 0x30
   1c61c:	ldr	r3, [r1, #8]
   1c620:	cmp	r3, #0
   1c624:	ble	1cc74 <__assert_fail@plt+0xb71c>
   1c628:	mov	r9, r1
   1c62c:	mov	sl, #0
   1c630:	str	sl, [sp, #4]
   1c634:	str	r0, [sp, #8]
   1c638:	b	1cab0 <__assert_fail@plt+0xb558>
   1c63c:	ldrb	r3, [r3, r1, lsl #3]
   1c640:	asr	r0, r3, #5
   1c644:	and	r3, r3, #31
   1c648:	add	r1, sp, #24
   1c64c:	ldr	r1, [r1, r0, lsl #2]
   1c650:	mov	ip, #1
   1c654:	orr	r3, r1, ip, lsl r3
   1c658:	add	r1, sp, #24
   1c65c:	str	r3, [r1, r0, lsl #2]
   1c660:	cmp	r2, #0
   1c664:	beq	1c744 <__assert_fail@plt+0xb1ec>
   1c668:	tst	r2, #32
   1c66c:	bne	1c810 <__assert_fail@plt+0xb2b8>
   1c670:	tst	r2, #128	; 0x80
   1c674:	bne	1c840 <__assert_fail@plt+0xb2e8>
   1c678:	tst	r2, #4
   1c67c:	beq	1c6e0 <__assert_fail@plt+0xb188>
   1c680:	cmp	r7, #1
   1c684:	beq	1c85c <__assert_fail@plt+0xb304>
   1c688:	ldr	r1, [sp, #8]
   1c68c:	ldr	r3, [r1, #92]	; 0x5c
   1c690:	cmp	r3, #1
   1c694:	ble	1c884 <__assert_fail@plt+0xb32c>
   1c698:	add	ip, sp, #20
   1c69c:	add	r0, r1, #96	; 0x60
   1c6a0:	ldr	lr, [r1, #60]	; 0x3c
   1c6a4:	sub	lr, lr, #4
   1c6a8:	add	r4, r1, #128	; 0x80
   1c6ac:	mov	r1, #0
   1c6b0:	ldr	r5, [r0], #4
   1c6b4:	ldr	r3, [lr, #4]!
   1c6b8:	mvn	r3, r3
   1c6bc:	orr	r3, r3, r5
   1c6c0:	ldr	r5, [ip, #4]!
   1c6c4:	and	r3, r3, r5
   1c6c8:	str	r3, [ip]
   1c6cc:	orr	r1, r1, r3
   1c6d0:	cmp	r0, r4
   1c6d4:	bne	1c6b0 <__assert_fail@plt+0xb158>
   1c6d8:	cmp	r1, #0
   1c6dc:	beq	1ca94 <__assert_fail@plt+0xb53c>
   1c6e0:	tst	r2, #8
   1c6e4:	beq	1c744 <__assert_fail@plt+0xb1ec>
   1c6e8:	cmp	r7, #1
   1c6ec:	beq	1c8b8 <__assert_fail@plt+0xb360>
   1c6f0:	ldr	r2, [sp, #8]
   1c6f4:	ldr	r3, [r2, #92]	; 0x5c
   1c6f8:	cmp	r3, #1
   1c6fc:	ble	1c8e0 <__assert_fail@plt+0xb388>
   1c700:	add	r0, sp, #20
   1c704:	add	r1, r2, #96	; 0x60
   1c708:	ldr	ip, [r2, #60]	; 0x3c
   1c70c:	sub	ip, ip, #4
   1c710:	add	lr, r2, #128	; 0x80
   1c714:	mov	r2, #0
   1c718:	ldr	r3, [r1], #4
   1c71c:	ldr	r4, [ip, #4]!
   1c720:	and	r4, r4, r3
   1c724:	ldr	r3, [r0, #4]!
   1c728:	bic	r3, r3, r4
   1c72c:	str	r3, [r0]
   1c730:	orr	r2, r2, r3
   1c734:	cmp	r1, lr
   1c738:	bne	1c718 <__assert_fail@plt+0xb1c0>
   1c73c:	cmp	r2, #0
   1c740:	beq	1ca94 <__assert_fail@plt+0xb53c>
   1c744:	cmp	sl, #0
   1c748:	addgt	r4, sp, #148	; 0x94
   1c74c:	movgt	r5, #0
   1c750:	bgt	1c960 <__assert_fail@plt+0xb408>
   1c754:	mov	r5, #0
   1c758:	b	1ca8c <__assert_fail@plt+0xb534>
   1c75c:	ldr	lr, [r3, r1, lsl #3]
   1c760:	add	r0, sp, #20
   1c764:	sub	r1, lr, #4
   1c768:	add	lr, lr, #28
   1c76c:	ldr	r3, [r0, #4]!
   1c770:	ldr	ip, [r1, #4]!
   1c774:	orr	r3, r3, ip
   1c778:	str	r3, [r0]
   1c77c:	cmp	r1, lr
   1c780:	bne	1c76c <__assert_fail@plt+0xb214>
   1c784:	b	1c660 <__assert_fail@plt+0xb108>
   1c788:	ldr	r1, [sp, #8]
   1c78c:	ldr	r3, [r1, #92]	; 0x5c
   1c790:	cmp	r3, #1
   1c794:	ble	1c7c4 <__assert_fail@plt+0xb26c>
   1c798:	ldr	lr, [r1, #60]	; 0x3c
   1c79c:	add	r0, sp, #20
   1c7a0:	sub	r1, lr, #4
   1c7a4:	add	lr, lr, #28
   1c7a8:	ldr	r3, [r0, #4]!
   1c7ac:	ldr	ip, [r1, #4]!
   1c7b0:	orr	r3, r3, ip
   1c7b4:	str	r3, [r0]
   1c7b8:	cmp	r1, lr
   1c7bc:	bne	1c7a8 <__assert_fail@plt+0xb250>
   1c7c0:	b	1c7dc <__assert_fail@plt+0xb284>
   1c7c4:	mvn	r0, #0
   1c7c8:	mvn	r1, #0
   1c7cc:	strd	r0, [sp, #24]
   1c7d0:	strd	r0, [sp, #32]
   1c7d4:	strd	r0, [sp, #40]	; 0x28
   1c7d8:	strd	r0, [sp, #48]	; 0x30
   1c7dc:	ldr	r3, [sp, #8]
   1c7e0:	ldr	r3, [r3, #128]	; 0x80
   1c7e4:	tst	r3, #64	; 0x40
   1c7e8:	bne	1c7f8 <__assert_fail@plt+0xb2a0>
   1c7ec:	ldr	r1, [sp, #24]
   1c7f0:	bic	r1, r1, #1024	; 0x400
   1c7f4:	str	r1, [sp, #24]
   1c7f8:	tst	r3, #128	; 0x80
   1c7fc:	beq	1c660 <__assert_fail@plt+0xb108>
   1c800:	ldr	r3, [sp, #24]
   1c804:	bic	r3, r3, #1
   1c808:	str	r3, [sp, #24]
   1c80c:	b	1c660 <__assert_fail@plt+0xb108>
   1c810:	ldr	r3, [sp, #24]
   1c814:	mov	r0, #0
   1c818:	mov	r1, #0
   1c81c:	strd	r0, [sp, #24]
   1c820:	strd	r0, [sp, #32]
   1c824:	strd	r0, [sp, #40]	; 0x28
   1c828:	strd	r0, [sp, #48]	; 0x30
   1c82c:	tst	r3, #1024	; 0x400
   1c830:	beq	1ca94 <__assert_fail@plt+0xb53c>
   1c834:	mov	r3, #1024	; 0x400
   1c838:	str	r3, [sp, #24]
   1c83c:	b	1c670 <__assert_fail@plt+0xb118>
   1c840:	mov	r2, #0
   1c844:	mov	r3, #0
   1c848:	strd	r2, [sp, #24]
   1c84c:	strd	r2, [sp, #32]
   1c850:	strd	r2, [sp, #40]	; 0x28
   1c854:	strd	r2, [sp, #48]	; 0x30
   1c858:	b	1ca94 <__assert_fail@plt+0xb53c>
   1c85c:	ldrb	r3, [r8, #6]
   1c860:	tst	r3, #64	; 0x40
   1c864:	bne	1c688 <__assert_fail@plt+0xb130>
   1c868:	mov	r2, #0
   1c86c:	mov	r3, #0
   1c870:	strd	r2, [sp, #24]
   1c874:	strd	r2, [sp, #32]
   1c878:	strd	r2, [sp, #40]	; 0x28
   1c87c:	strd	r2, [sp, #48]	; 0x30
   1c880:	b	1ca94 <__assert_fail@plt+0xb53c>
   1c884:	add	ip, sp, #20
   1c888:	ldr	r3, [sp, #8]
   1c88c:	add	r0, r3, #96	; 0x60
   1c890:	add	lr, r3, #128	; 0x80
   1c894:	mov	r1, #0
   1c898:	ldr	r3, [r0], #4
   1c89c:	ldr	r4, [ip, #4]!
   1c8a0:	and	r3, r3, r4
   1c8a4:	str	r3, [ip]
   1c8a8:	orr	r1, r1, r3
   1c8ac:	cmp	r0, lr
   1c8b0:	bne	1c898 <__assert_fail@plt+0xb340>
   1c8b4:	b	1c6d8 <__assert_fail@plt+0xb180>
   1c8b8:	ldrb	r3, [r8, #6]
   1c8bc:	tst	r3, #64	; 0x40
   1c8c0:	beq	1c6f0 <__assert_fail@plt+0xb198>
   1c8c4:	mov	r2, #0
   1c8c8:	mov	r3, #0
   1c8cc:	strd	r2, [sp, #24]
   1c8d0:	strd	r2, [sp, #32]
   1c8d4:	strd	r2, [sp, #40]	; 0x28
   1c8d8:	strd	r2, [sp, #48]	; 0x30
   1c8dc:	b	1ca94 <__assert_fail@plt+0xb53c>
   1c8e0:	add	r0, sp, #20
   1c8e4:	ldr	r3, [sp, #8]
   1c8e8:	add	r1, r3, #96	; 0x60
   1c8ec:	add	lr, r3, #128	; 0x80
   1c8f0:	mov	r2, #0
   1c8f4:	ldr	ip, [r1], #4
   1c8f8:	ldr	r3, [r0, #4]!
   1c8fc:	bic	r3, r3, ip
   1c900:	str	r3, [r0]
   1c904:	orr	r2, r2, r3
   1c908:	cmp	r1, lr
   1c90c:	bne	1c8f4 <__assert_fail@plt+0xb39c>
   1c910:	b	1c73c <__assert_fail@plt+0xb1e4>
   1c914:	add	r2, sp, #20
   1c918:	sub	r1, r4, #32
   1c91c:	add	r6, sp, #52	; 0x34
   1c920:	mov	ip, r1
   1c924:	mov	lr, r2
   1c928:	mov	r0, #0
   1c92c:	ldr	r3, [lr, #4]!
   1c930:	ldr	fp, [ip, #4]!
   1c934:	and	r3, r3, fp
   1c938:	str	r3, [r6, #4]!
   1c93c:	orr	r0, r0, r3
   1c940:	cmp	ip, r4
   1c944:	bne	1c92c <__assert_fail@plt+0xb3d4>
   1c948:	cmp	r0, #0
   1c94c:	bne	1c9a0 <__assert_fail@plt+0xb448>
   1c950:	add	r5, r5, #1
   1c954:	add	r4, r4, #32
   1c958:	cmp	r5, sl
   1c95c:	bge	1ca8c <__assert_fail@plt+0xb534>
   1c960:	cmp	r7, #1
   1c964:	bne	1c914 <__assert_fail@plt+0xb3bc>
   1c968:	ldrb	r2, [r8]
   1c96c:	asr	r1, r2, #5
   1c970:	lsl	r3, r5, #5
   1c974:	add	r3, r3, r1, lsl #2
   1c978:	add	r1, sp, #14464	; 0x3880
   1c97c:	add	r1, r1, #40	; 0x28
   1c980:	add	r3, r1, r3
   1c984:	sub	r3, r3, #14336	; 0x3800
   1c988:	and	r2, r2, #31
   1c98c:	ldr	r3, [r3, #-48]	; 0xffffffd0
   1c990:	lsr	r2, r3, r2
   1c994:	tst	r2, #1
   1c998:	beq	1c950 <__assert_fail@plt+0xb3f8>
   1c99c:	b	1c914 <__assert_fail@plt+0xb3bc>
   1c9a0:	add	fp, sp, #84	; 0x54
   1c9a4:	mov	r6, #0
   1c9a8:	mov	lr, r6
   1c9ac:	ldr	r3, [r2, #4]!
   1c9b0:	ldr	r0, [r1, #4]!
   1c9b4:	bic	ip, r0, r3
   1c9b8:	str	ip, [fp, #4]!
   1c9bc:	orr	lr, lr, ip
   1c9c0:	bic	r3, r3, r0
   1c9c4:	str	r3, [r2]
   1c9c8:	orr	r6, r6, r3
   1c9cc:	cmp	r1, r4
   1c9d0:	bne	1c9ac <__assert_fail@plt+0xb454>
   1c9d4:	cmp	lr, #0
   1c9d8:	beq	1ca5c <__assert_fail@plt+0xb504>
   1c9dc:	add	r3, sp, #14464	; 0x3880
   1c9e0:	add	r3, r3, #40	; 0x28
   1c9e4:	add	ip, r3, sl, lsl #5
   1c9e8:	sub	ip, ip, #14336	; 0x3800
   1c9ec:	add	r1, sp, #88	; 0x58
   1c9f0:	ldrd	r2, [r1]
   1c9f4:	strd	r2, [ip, #-48]	; 0xffffffd0
   1c9f8:	ldrd	r2, [r1, #8]
   1c9fc:	strd	r2, [ip, #-40]	; 0xffffffd8
   1ca00:	ldrd	r2, [r1, #16]
   1ca04:	strd	r2, [ip, #-32]	; 0xffffffe0
   1ca08:	ldrd	r2, [r1, #24]
   1ca0c:	strd	r2, [ip, #-24]	; 0xffffffe8
   1ca10:	add	r1, sp, #56	; 0x38
   1ca14:	ldrd	r2, [r1]
   1ca18:	strd	r2, [r4, #-28]	; 0xffffffe4
   1ca1c:	ldrd	r2, [r1, #8]
   1ca20:	strd	r2, [r4, #-20]	; 0xffffffec
   1ca24:	ldrd	r2, [r1, #16]
   1ca28:	strd	r2, [r4, #-12]
   1ca2c:	ldrd	r2, [r1, #24]
   1ca30:	strd	r2, [r4, #-4]
   1ca34:	add	r1, r5, r5, lsl #1
   1ca38:	add	r0, sl, sl, lsl #1
   1ca3c:	add	r3, sp, #8256	; 0x2040
   1ca40:	add	r3, r3, #56	; 0x38
   1ca44:	add	r1, r3, r1, lsl #2
   1ca48:	add	r0, r3, r0, lsl #2
   1ca4c:	bl	17b1c <__assert_fail@plt+0x65c4>
   1ca50:	cmp	r0, #0
   1ca54:	bne	1cbb8 <__assert_fail@plt+0xb660>
   1ca58:	add	sl, sl, #1
   1ca5c:	ldr	r3, [r9, #12]
   1ca60:	add	r0, r5, r5, lsl #1
   1ca64:	ldr	r2, [sp, #12]
   1ca68:	ldr	r1, [r3, r2]
   1ca6c:	add	r3, sp, #8256	; 0x2040
   1ca70:	add	r3, r3, #56	; 0x38
   1ca74:	add	r0, r3, r0, lsl #2
   1ca78:	bl	19bb8 <__assert_fail@plt+0x8660>
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1cbb8 <__assert_fail@plt+0xb660>
   1ca84:	cmp	r6, #0
   1ca88:	bne	1c950 <__assert_fail@plt+0xb3f8>
   1ca8c:	cmp	sl, r5
   1ca90:	beq	1cb40 <__assert_fail@plt+0xb5e8>
   1ca94:	ldr	r3, [sp, #4]
   1ca98:	add	r3, r3, #1
   1ca9c:	mov	r2, r3
   1caa0:	str	r3, [sp, #4]
   1caa4:	ldr	r3, [r9, #8]
   1caa8:	cmp	r2, r3
   1caac:	bge	1cbec <__assert_fail@plt+0xb694>
   1cab0:	ldr	r2, [sp, #4]
   1cab4:	lsl	r3, r2, #2
   1cab8:	str	r3, [sp, #12]
   1cabc:	ldr	r3, [r9, #12]
   1cac0:	ldr	r1, [r3, r2, lsl #2]
   1cac4:	ldr	r3, [sp, #8]
   1cac8:	ldr	r3, [r3]
   1cacc:	add	r8, r3, r1, lsl #3
   1cad0:	ldrb	r7, [r8, #4]
   1cad4:	ldr	r2, [r8, #4]
   1cad8:	ubfx	r2, r2, #8, #10
   1cadc:	cmp	r7, #1
   1cae0:	beq	1c63c <__assert_fail@plt+0xb0e4>
   1cae4:	cmp	r7, #3
   1cae8:	beq	1c75c <__assert_fail@plt+0xb204>
   1caec:	cmp	r7, #5
   1caf0:	beq	1c788 <__assert_fail@plt+0xb230>
   1caf4:	cmp	r7, #7
   1caf8:	bne	1ca94 <__assert_fail@plt+0xb53c>
   1cafc:	mvn	r0, #0
   1cb00:	mvn	r1, #0
   1cb04:	strd	r0, [sp, #24]
   1cb08:	strd	r0, [sp, #32]
   1cb0c:	ldr	r3, [sp, #8]
   1cb10:	ldr	r3, [r3, #128]	; 0x80
   1cb14:	tst	r3, #64	; 0x40
   1cb18:	bne	1cb28 <__assert_fail@plt+0xb5d0>
   1cb1c:	ldr	r1, [sp, #24]
   1cb20:	bic	r1, r1, #1024	; 0x400
   1cb24:	str	r1, [sp, #24]
   1cb28:	tst	r3, #128	; 0x80
   1cb2c:	beq	1c660 <__assert_fail@plt+0xb108>
   1cb30:	ldr	r3, [sp, #24]
   1cb34:	bic	r3, r3, #1
   1cb38:	str	r3, [sp, #24]
   1cb3c:	b	1c660 <__assert_fail@plt+0xb108>
   1cb40:	add	r3, sp, #14464	; 0x3880
   1cb44:	add	r3, r3, #40	; 0x28
   1cb48:	add	r1, r3, sl, lsl #5
   1cb4c:	sub	r1, r1, #14336	; 0x3800
   1cb50:	ldrd	r2, [sp, #24]
   1cb54:	strd	r2, [r1, #-48]	; 0xffffffd0
   1cb58:	ldrd	r2, [sp, #32]
   1cb5c:	strd	r2, [r1, #-40]	; 0xffffffd8
   1cb60:	ldrd	r2, [sp, #40]	; 0x28
   1cb64:	strd	r2, [r1, #-32]	; 0xffffffe0
   1cb68:	ldrd	r2, [sp, #48]	; 0x30
   1cb6c:	strd	r2, [r1, #-24]	; 0xffffffe8
   1cb70:	ldr	r3, [r9, #12]
   1cb74:	add	r0, sl, sl, lsl #1
   1cb78:	ldr	r2, [sp, #12]
   1cb7c:	ldr	r1, [r3, r2]
   1cb80:	add	r3, sp, #8256	; 0x2040
   1cb84:	add	r3, r3, #56	; 0x38
   1cb88:	add	r0, r3, r0, lsl #2
   1cb8c:	bl	175f8 <__assert_fail@plt+0x60a0>
   1cb90:	cmp	r0, #0
   1cb94:	bne	1cbb8 <__assert_fail@plt+0xb660>
   1cb98:	add	sl, sl, #1
   1cb9c:	mov	r2, #0
   1cba0:	mov	r3, #0
   1cba4:	strd	r2, [sp, #24]
   1cba8:	strd	r2, [sp, #32]
   1cbac:	strd	r2, [sp, #40]	; 0x28
   1cbb0:	strd	r2, [sp, #48]	; 0x30
   1cbb4:	b	1ca94 <__assert_fail@plt+0xb53c>
   1cbb8:	cmp	sl, #0
   1cbbc:	ble	1cbe4 <__assert_fail@plt+0xb68c>
   1cbc0:	add	r4, sp, #8256	; 0x2040
   1cbc4:	add	r4, r4, #56	; 0x38
   1cbc8:	add	r5, sl, sl, lsl #1
   1cbcc:	add	r5, r4, r5, lsl #2
   1cbd0:	ldr	r0, [r4, #8]
   1cbd4:	bl	13eac <__assert_fail@plt+0x2954>
   1cbd8:	add	r4, r4, #12
   1cbdc:	cmp	r4, r5
   1cbe0:	bne	1cbd0 <__assert_fail@plt+0xb678>
   1cbe4:	mov	r0, #0
   1cbe8:	b	1cd20 <__assert_fail@plt+0xb7c8>
   1cbec:	ldr	r7, [sp, #8]
   1cbf0:	cmp	sl, #0
   1cbf4:	ble	1cc70 <__assert_fail@plt+0xb718>
   1cbf8:	add	r1, sl, #1
   1cbfc:	add	r0, sp, #11392	; 0x2c80
   1cc00:	add	r0, r0, #24
   1cc04:	bl	17650 <__assert_fail@plt+0x60f8>
   1cc08:	str	r0, [sp, #4]
   1cc0c:	add	r2, sp, #14464	; 0x3880
   1cc10:	add	r2, r2, #36	; 0x24
   1cc14:	str	r0, [r2]
   1cc18:	cmp	r0, #0
   1cc1c:	bne	1cce8 <__assert_fail@plt+0xb790>
   1cc20:	add	r3, sp, #11328	; 0x2c40
   1cc24:	add	r3, r3, #56	; 0x38
   1cc28:	mov	r0, #0
   1cc2c:	mov	r1, #0
   1cc30:	strd	r0, [r3]
   1cc34:	strd	r0, [r3, #8]
   1cc38:	strd	r0, [r3, #16]
   1cc3c:	strd	r0, [r3, #24]
   1cc40:	add	r8, sp, #8256	; 0x2040
   1cc44:	add	r8, r8, #56	; 0x38
   1cc48:	str	r8, [sp, #20]
   1cc4c:	add	r3, sp, #120	; 0x78
   1cc50:	str	r3, [sp, #12]
   1cc54:	add	r6, sp, #148	; 0x94
   1cc58:	add	fp, sp, #13440	; 0x3480
   1cc5c:	add	fp, fp, #36	; 0x24
   1cc60:	ldr	r9, [sp, #4]
   1cc64:	mov	r3, #0
   1cc68:	str	r3, [sp, #8]
   1cc6c:	b	1cdcc <__assert_fail@plt+0xb874>
   1cc70:	bne	1d0e0 <__assert_fail@plt+0xbb88>
   1cc74:	mov	r1, #256	; 0x100
   1cc78:	mov	r0, #4
   1cc7c:	bl	25880 <__assert_fail@plt+0x14328>
   1cc80:	ldr	r3, [sp, #16]
   1cc84:	str	r0, [r3, #44]	; 0x2c
   1cc88:	adds	r0, r0, #0
   1cc8c:	movne	r0, #1
   1cc90:	b	1cd20 <__assert_fail@plt+0xb7c8>
   1cc94:	add	r4, r4, #1
   1cc98:	ldr	r3, [r5, #4]
   1cc9c:	cmp	r3, r4
   1cca0:	ble	1cd40 <__assert_fail@plt+0xb7e8>
   1cca4:	ldr	r3, [r5, #8]
   1cca8:	ldr	r2, [r3, r4, lsl #2]
   1ccac:	ldr	r3, [r7, #12]
   1ccb0:	ldr	r1, [r3, r2, lsl #2]
   1ccb4:	cmn	r1, #1
   1ccb8:	beq	1cc94 <__assert_fail@plt+0xb73c>
   1ccbc:	add	r1, r1, r1, lsl #1
   1ccc0:	ldr	r3, [r7, #24]
   1ccc4:	add	r1, r3, r1, lsl #2
   1ccc8:	add	r0, sp, #11392	; 0x2c80
   1cccc:	add	r0, r0, #24
   1ccd0:	bl	1a150 <__assert_fail@plt+0x8bf8>
   1ccd4:	add	r3, sp, #14464	; 0x3880
   1ccd8:	add	r3, r3, #36	; 0x24
   1ccdc:	str	r0, [r3]
   1cce0:	cmp	r0, #0
   1cce4:	beq	1cc94 <__assert_fail@plt+0xb73c>
   1cce8:	add	r3, sp, #11392	; 0x2c80
   1ccec:	add	r3, r3, #32
   1ccf0:	ldr	r0, [r3]
   1ccf4:	bl	13eac <__assert_fail@plt+0x2954>
   1ccf8:	add	r4, sp, #8256	; 0x2040
   1ccfc:	add	r4, r4, #56	; 0x38
   1cd00:	add	r5, sl, sl, lsl #1
   1cd04:	add	r5, r4, r5, lsl #2
   1cd08:	ldr	r0, [r4, #8]
   1cd0c:	bl	13eac <__assert_fail@plt+0x2954>
   1cd10:	add	r4, r4, #12
   1cd14:	cmp	r5, r4
   1cd18:	bne	1cd08 <__assert_fail@plt+0xb7b0>
   1cd1c:	mov	r0, #0
   1cd20:	add	sp, sp, #14464	; 0x3880
   1cd24:	add	sp, sp, #44	; 0x2c
   1cd28:	ldrd	r4, [sp]
   1cd2c:	ldrd	r6, [sp, #8]
   1cd30:	ldrd	r8, [sp, #16]
   1cd34:	ldrd	sl, [sp, #24]
   1cd38:	add	sp, sp, #32
   1cd3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd40:	mov	r3, #0
   1cd44:	add	r2, sp, #11392	; 0x2c80
   1cd48:	add	r2, r2, #24
   1cd4c:	mov	r1, r7
   1cd50:	add	r0, sp, #14464	; 0x3880
   1cd54:	add	r0, r0, #36	; 0x24
   1cd58:	bl	19378 <__assert_fail@plt+0x7e20>
   1cd5c:	mov	r4, r0
   1cd60:	str	r0, [fp], #4
   1cd64:	cmp	r0, #0
   1cd68:	beq	1cdf4 <__assert_fail@plt+0xb89c>
   1cd6c:	ldrsb	r3, [r4, #52]	; 0x34
   1cd70:	cmp	r3, #0
   1cd74:	blt	1ce0c <__assert_fail@plt+0xb8b4>
   1cd78:	add	r3, sp, #12416	; 0x3080
   1cd7c:	add	r3, r3, #36	; 0x24
   1cd80:	str	r4, [r3, r9, lsl #2]
   1cd84:	add	r3, sp, #11392	; 0x2c80
   1cd88:	add	r3, r3, #36	; 0x24
   1cd8c:	str	r4, [r3, r9, lsl #2]
   1cd90:	add	r4, sp, #11328	; 0x2c40
   1cd94:	add	r4, r4, #52	; 0x34
   1cd98:	sub	r1, r6, #32
   1cd9c:	mov	r2, r4
   1cda0:	ldr	r3, [r2, #4]!
   1cda4:	ldr	r0, [r1, #4]!
   1cda8:	orr	r3, r3, r0
   1cdac:	str	r3, [r2]
   1cdb0:	cmp	r6, r1
   1cdb4:	bne	1cda0 <__assert_fail@plt+0xb848>
   1cdb8:	add	r9, r9, #1
   1cdbc:	add	r8, r8, #12
   1cdc0:	add	r6, r6, #32
   1cdc4:	cmp	r9, sl
   1cdc8:	beq	1cebc <__assert_fail@plt+0xb964>
   1cdcc:	add	r3, sp, #11392	; 0x2c80
   1cdd0:	add	r3, r3, #28
   1cdd4:	mov	r2, #0
   1cdd8:	str	r2, [r3]
   1cddc:	mov	r5, r8
   1cde0:	ldr	r3, [r8, #4]
   1cde4:	cmp	r3, r2
   1cde8:	ble	1cd40 <__assert_fail@plt+0xb7e8>
   1cdec:	ldr	r4, [sp, #4]
   1cdf0:	b	1cca4 <__assert_fail@plt+0xb74c>
   1cdf4:	add	r3, sp, #14464	; 0x3880
   1cdf8:	add	r3, r3, #36	; 0x24
   1cdfc:	ldr	r3, [r3]
   1ce00:	cmp	r3, #0
   1ce04:	beq	1cd6c <__assert_fail@plt+0xb814>
   1ce08:	b	1cce8 <__assert_fail@plt+0xb790>
   1ce0c:	mov	r3, #1
   1ce10:	add	r2, sp, #11392	; 0x2c80
   1ce14:	add	r2, r2, #24
   1ce18:	mov	r1, r7
   1ce1c:	add	r0, sp, #14464	; 0x3880
   1ce20:	add	r0, r0, #36	; 0x24
   1ce24:	bl	19378 <__assert_fail@plt+0x7e20>
   1ce28:	mov	r5, r9
   1ce2c:	add	r3, sp, #12416	; 0x3080
   1ce30:	add	r3, r3, #36	; 0x24
   1ce34:	str	r0, [r3, r9, lsl #2]
   1ce38:	cmp	r0, #0
   1ce3c:	beq	1cea4 <__assert_fail@plt+0xb94c>
   1ce40:	cmp	r4, r0
   1ce44:	beq	1ce5c <__assert_fail@plt+0xb904>
   1ce48:	ldr	r3, [r7, #92]	; 0x5c
   1ce4c:	cmp	r3, #2
   1ce50:	ldr	r3, [sp, #8]
   1ce54:	movge	r3, #1
   1ce58:	str	r3, [sp, #8]
   1ce5c:	mov	r3, #2
   1ce60:	add	r2, sp, #11392	; 0x2c80
   1ce64:	add	r2, r2, #24
   1ce68:	mov	r1, r7
   1ce6c:	add	r0, sp, #14464	; 0x3880
   1ce70:	add	r0, r0, #36	; 0x24
   1ce74:	bl	19378 <__assert_fail@plt+0x7e20>
   1ce78:	add	r3, sp, #11392	; 0x2c80
   1ce7c:	add	r3, r3, #36	; 0x24
   1ce80:	str	r0, [r3, r5, lsl #2]
   1ce84:	cmp	r0, #0
   1ce88:	bne	1cd90 <__assert_fail@plt+0xb838>
   1ce8c:	add	r3, sp, #14464	; 0x3880
   1ce90:	add	r3, r3, #36	; 0x24
   1ce94:	ldr	r3, [r3]
   1ce98:	cmp	r3, #0
   1ce9c:	beq	1cd90 <__assert_fail@plt+0xb838>
   1cea0:	b	1cce8 <__assert_fail@plt+0xb790>
   1cea4:	add	r3, sp, #14464	; 0x3880
   1cea8:	add	r3, r3, #36	; 0x24
   1ceac:	ldr	r3, [r3]
   1ceb0:	cmp	r3, #0
   1ceb4:	beq	1ce48 <__assert_fail@plt+0xb8f0>
   1ceb8:	b	1cce8 <__assert_fail@plt+0xb790>
   1cebc:	ldr	r3, [sp, #8]
   1cec0:	cmp	r3, #0
   1cec4:	bne	1d028 <__assert_fail@plt+0xbad0>
   1cec8:	mov	r1, #256	; 0x100
   1cecc:	mov	r0, #4
   1ced0:	bl	25880 <__assert_fail@plt+0x14328>
   1ced4:	mov	r9, r0
   1ced8:	ldr	r3, [sp, #16]
   1cedc:	str	r0, [r3, #44]	; 0x2c
   1cee0:	cmp	r0, #0
   1cee4:	beq	1cce8 <__assert_fail@plt+0xb790>
   1cee8:	mov	r5, r0
   1ceec:	add	r7, r7, #96	; 0x60
   1cef0:	add	r8, r0, #1024	; 0x400
   1cef4:	ldr	r6, [sp, #12]
   1cef8:	ldr	r3, [r4, #4]!
   1cefc:	cmp	r3, #0
   1cf00:	beq	1cf28 <__assert_fail@plt+0xb9d0>
   1cf04:	mov	r0, r5
   1cf08:	mov	r2, #1
   1cf0c:	mov	ip, r6
   1cf10:	tst	r3, #1
   1cf14:	bne	1cfdc <__assert_fail@plt+0xba84>
   1cf18:	lsl	r2, r2, #1
   1cf1c:	add	r0, r0, #4
   1cf20:	lsrs	r3, r3, #1
   1cf24:	bne	1cf10 <__assert_fail@plt+0xb9b8>
   1cf28:	add	r5, r5, #128	; 0x80
   1cf2c:	add	r7, r7, #4
   1cf30:	add	r6, r6, #4
   1cf34:	cmp	r8, r5
   1cf38:	bne	1cef8 <__assert_fail@plt+0xb9a0>
   1cf3c:	add	r3, sp, #11328	; 0x2c40
   1cf40:	add	r3, r3, #56	; 0x38
   1cf44:	ldr	r3, [r3]
   1cf48:	tst	r3, #1024	; 0x400
   1cf4c:	beq	1cfa4 <__assert_fail@plt+0xba4c>
   1cf50:	ldr	r3, [sp, #120]	; 0x78
   1cf54:	tst	r3, #1024	; 0x400
   1cf58:	bne	1cf80 <__assert_fail@plt+0xba28>
   1cf5c:	ldr	r2, [sp, #12]
   1cf60:	ldr	r3, [sp, #4]
   1cf64:	add	r3, r3, #1
   1cf68:	cmp	r3, sl
   1cf6c:	beq	1cfa4 <__assert_fail@plt+0xba4c>
   1cf70:	ldr	r1, [r2, #32]!
   1cf74:	tst	r1, #1024	; 0x400
   1cf78:	beq	1cf64 <__assert_fail@plt+0xba0c>
   1cf7c:	str	r3, [sp, #4]
   1cf80:	add	r3, sp, #14464	; 0x3880
   1cf84:	add	r3, r3, #40	; 0x28
   1cf88:	ldr	r2, [sp, #4]
   1cf8c:	add	r3, r3, r2, lsl #2
   1cf90:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   1cf94:	str	r3, [r9, #40]	; 0x28
   1cf98:	ldr	r2, [sp, #8]
   1cf9c:	cmp	r2, #0
   1cfa0:	strne	r3, [r9, #1064]	; 0x428
   1cfa4:	add	r3, sp, #11392	; 0x2c80
   1cfa8:	add	r3, r3, #32
   1cfac:	ldr	r0, [r3]
   1cfb0:	bl	13eac <__assert_fail@plt+0x2954>
   1cfb4:	add	r4, sl, sl, lsl #1
   1cfb8:	ldr	r5, [sp, #20]
   1cfbc:	add	r4, r5, r4, lsl #2
   1cfc0:	ldr	r0, [r5, #8]
   1cfc4:	bl	13eac <__assert_fail@plt+0x2954>
   1cfc8:	add	r5, r5, #12
   1cfcc:	cmp	r4, r5
   1cfd0:	bne	1cfc0 <__assert_fail@plt+0xba68>
   1cfd4:	mov	r0, #1
   1cfd8:	b	1cd20 <__assert_fail@plt+0xb7c8>
   1cfdc:	ldr	r1, [r6]
   1cfe0:	tst	r2, r1
   1cfe4:	bne	1d020 <__assert_fail@plt+0xbac8>
   1cfe8:	ldr	r1, [sp, #4]
   1cfec:	add	r1, r1, #1
   1cff0:	ldr	lr, [ip, r1, lsl #5]
   1cff4:	tst	r2, lr
   1cff8:	beq	1cfec <__assert_fail@plt+0xba94>
   1cffc:	ldr	lr, [r7]
   1d000:	tst	r2, lr
   1d004:	add	lr, sp, #14464	; 0x3880
   1d008:	add	lr, lr, #40	; 0x28
   1d00c:	add	r1, lr, r1, lsl #2
   1d010:	ldrne	r1, [r1, #-2052]	; 0xfffff7fc
   1d014:	ldreq	r1, [r1, #-1028]	; 0xfffffbfc
   1d018:	str	r1, [r0]
   1d01c:	b	1cf18 <__assert_fail@plt+0xb9c0>
   1d020:	ldr	r1, [sp, #4]
   1d024:	b	1cffc <__assert_fail@plt+0xbaa4>
   1d028:	mov	r1, #512	; 0x200
   1d02c:	mov	r0, #4
   1d030:	bl	25880 <__assert_fail@plt+0x14328>
   1d034:	mov	r9, r0
   1d038:	ldr	r3, [sp, #16]
   1d03c:	str	r0, [r3, #48]	; 0x30
   1d040:	cmp	r0, #0
   1d044:	beq	1cce8 <__assert_fail@plt+0xb790>
   1d048:	mov	r6, r0
   1d04c:	add	r7, r0, #1024	; 0x400
   1d050:	ldr	r5, [sp, #12]
   1d054:	ldr	r3, [r4, #4]!
   1d058:	cmp	r3, #0
   1d05c:	beq	1d084 <__assert_fail@plt+0xbb2c>
   1d060:	mov	r0, r6
   1d064:	mov	r2, #1
   1d068:	mov	lr, r5
   1d06c:	tst	r3, #1
   1d070:	bne	1d098 <__assert_fail@plt+0xbb40>
   1d074:	lsl	r2, r2, #1
   1d078:	add	r0, r0, #4
   1d07c:	lsrs	r3, r3, #1
   1d080:	bne	1d06c <__assert_fail@plt+0xbb14>
   1d084:	add	r6, r6, #128	; 0x80
   1d088:	add	r5, r5, #4
   1d08c:	cmp	r7, r6
   1d090:	bne	1d054 <__assert_fail@plt+0xbafc>
   1d094:	b	1cf3c <__assert_fail@plt+0xb9e4>
   1d098:	ldr	r1, [r5]
   1d09c:	tst	r2, r1
   1d0a0:	bne	1d0d8 <__assert_fail@plt+0xbb80>
   1d0a4:	ldr	r1, [sp, #4]
   1d0a8:	add	r1, r1, #1
   1d0ac:	ldr	ip, [lr, r1, lsl #5]
   1d0b0:	tst	r2, ip
   1d0b4:	beq	1d0a8 <__assert_fail@plt+0xbb50>
   1d0b8:	add	ip, sp, #14464	; 0x3880
   1d0bc:	add	ip, ip, #40	; 0x28
   1d0c0:	add	r1, ip, r1, lsl #2
   1d0c4:	ldr	ip, [r1, #-1028]	; 0xfffffbfc
   1d0c8:	str	ip, [r0]
   1d0cc:	ldr	r1, [r1, #-2052]	; 0xfffff7fc
   1d0d0:	str	r1, [r0, #1024]	; 0x400
   1d0d4:	b	1d074 <__assert_fail@plt+0xbb1c>
   1d0d8:	ldr	r1, [sp, #4]
   1d0dc:	b	1d0b8 <__assert_fail@plt+0xbb60>
   1d0e0:	mov	r0, #0
   1d0e4:	b	1cd20 <__assert_fail@plt+0xb7c8>
   1d0e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d0ec:	strd	r6, [sp, #8]
   1d0f0:	strd	r8, [sp, #16]
   1d0f4:	strd	sl, [sp, #24]
   1d0f8:	str	lr, [sp, #32]
   1d0fc:	sub	sp, sp, #316	; 0x13c
   1d100:	ldr	fp, [r0]
   1d104:	ldr	r3, [fp, #92]	; 0x5c
   1d108:	cmp	r3, #1
   1d10c:	ldreq	r3, [r0, #12]
   1d110:	ubfxeq	r3, r3, #22, #1
   1d114:	movne	r3, #0
   1d118:	mov	r9, r3
   1d11c:	ldr	r3, [r1, #8]
   1d120:	cmp	r3, #0
   1d124:	ble	1d228 <__assert_fail@plt+0xbcd0>
   1d128:	mov	r7, r2
   1d12c:	str	r1, [sp, #8]
   1d130:	str	r0, [sp, #28]
   1d134:	mov	r3, #0
   1d138:	str	r3, [sp, #4]
   1d13c:	str	r3, [sp, #20]
   1d140:	str	r3, [sp, #24]
   1d144:	mov	r3, #255	; 0xff
   1d148:	movt	r3, #32
   1d14c:	str	r3, [sp, #32]
   1d150:	mov	r3, #1
   1d154:	movt	r3, #32
   1d158:	str	r3, [sp, #36]	; 0x24
   1d15c:	mov	sl, fp
   1d160:	b	1d1c0 <__assert_fail@plt+0xbc68>
   1d164:	ldrb	r5, [r2, r4, lsl #3]
   1d168:	strb	r3, [r7, r5]
   1d16c:	cmp	r9, #0
   1d170:	beq	1d188 <__assert_fail@plt+0xbc30>
   1d174:	bl	113cc <__ctype_tolower_loc@plt>
   1d178:	ldr	r3, [r0]
   1d17c:	ldr	r3, [r3, r5, lsl #2]
   1d180:	mov	r2, #1
   1d184:	strb	r2, [r7, r3]
   1d188:	ldr	r3, [sp, #28]
   1d18c:	ldr	r3, [r3, #12]
   1d190:	tst	r3, #4194304	; 0x400000
   1d194:	beq	1d1a4 <__assert_fail@plt+0xbc4c>
   1d198:	ldr	r3, [sl, #92]	; 0x5c
   1d19c:	cmp	r3, #1
   1d1a0:	bgt	1d244 <__assert_fail@plt+0xbcec>
   1d1a4:	ldr	r3, [sp, #4]
   1d1a8:	add	r2, r3, #1
   1d1ac:	str	r2, [sp, #4]
   1d1b0:	ldr	r3, [sp, #8]
   1d1b4:	ldr	r3, [r3, #8]
   1d1b8:	cmp	r3, r2
   1d1bc:	ble	1d228 <__assert_fail@plt+0xbcd0>
   1d1c0:	ldr	r3, [sp, #8]
   1d1c4:	ldr	r3, [r3, #12]
   1d1c8:	ldr	r2, [sp, #4]
   1d1cc:	ldr	r4, [r3, r2, lsl #2]
   1d1d0:	lsl	r3, r4, #3
   1d1d4:	str	r3, [sp, #12]
   1d1d8:	ldr	r2, [sl]
   1d1dc:	add	r3, r2, r3
   1d1e0:	ldrb	r3, [r3, #4]
   1d1e4:	mov	r5, r3
   1d1e8:	cmp	r3, #1
   1d1ec:	beq	1d164 <__assert_fail@plt+0xbc0c>
   1d1f0:	cmp	r3, #3
   1d1f4:	beq	1d328 <__assert_fail@plt+0xbdd0>
   1d1f8:	cmp	r3, #6
   1d1fc:	beq	1d3b8 <__assert_fail@plt+0xbe60>
   1d200:	and	r2, r3, #253	; 0xfd
   1d204:	cmp	r3, #2
   1d208:	cmpne	r2, #5
   1d20c:	bne	1d1a4 <__assert_fail@plt+0xbc4c>
   1d210:	mov	r2, #256	; 0x100
   1d214:	mov	r1, #1
   1d218:	mov	r0, r7
   1d21c:	bl	1145c <memset@plt>
   1d220:	cmp	r5, #2
   1d224:	beq	1d518 <__assert_fail@plt+0xbfc0>
   1d228:	add	sp, sp, #316	; 0x13c
   1d22c:	ldrd	r4, [sp]
   1d230:	ldrd	r6, [sp, #8]
   1d234:	ldrd	r8, [sp, #16]
   1d238:	ldrd	sl, [sp, #24]
   1d23c:	add	sp, sp, #32
   1d240:	pop	{pc}		; (ldr pc, [sp], #4)
   1d244:	ldr	r3, [sl]
   1d248:	ldrb	r3, [r3, r4, lsl #3]
   1d24c:	strb	r3, [sp, #56]	; 0x38
   1d250:	add	r2, r4, #1
   1d254:	ldr	r3, [sl, #8]
   1d258:	cmp	r2, r3
   1d25c:	bcs	1d318 <__assert_fail@plt+0xbdc0>
   1d260:	ldr	r3, [sp, #12]
   1d264:	add	r3, r3, #8
   1d268:	ldr	r1, [sl]
   1d26c:	add	r3, r1, r3
   1d270:	ldr	r1, [r3, #4]
   1d274:	ldr	r0, [sp, #32]
   1d278:	and	r1, r1, r0
   1d27c:	ldr	ip, [sp, #36]	; 0x24
   1d280:	cmp	r1, ip
   1d284:	bne	1d320 <__assert_fail@plt+0xbdc8>
   1d288:	add	r4, sp, #57	; 0x39
   1d28c:	ldrb	r3, [r3]
   1d290:	strb	r3, [r4], #1
   1d294:	add	r2, r2, #1
   1d298:	ldr	r3, [sl, #8]
   1d29c:	cmp	r3, r2
   1d2a0:	bls	1d2bc <__assert_fail@plt+0xbd64>
   1d2a4:	ldr	r3, [sl]
   1d2a8:	add	r3, r3, r2, lsl #3
   1d2ac:	ldr	r1, [r3, #4]
   1d2b0:	and	r1, r1, r0
   1d2b4:	cmp	r1, ip
   1d2b8:	beq	1d28c <__assert_fail@plt+0xbd34>
   1d2bc:	mov	r3, #0
   1d2c0:	str	r3, [sp, #48]	; 0x30
   1d2c4:	str	r3, [sp, #52]	; 0x34
   1d2c8:	add	r1, sp, #56	; 0x38
   1d2cc:	sub	r4, r4, r1
   1d2d0:	add	r3, sp, #48	; 0x30
   1d2d4:	mov	r2, r4
   1d2d8:	add	r0, sp, #44	; 0x2c
   1d2dc:	bl	25d9c <__assert_fail@plt+0x14844>
   1d2e0:	cmp	r4, r0
   1d2e4:	bne	1d1a4 <__assert_fail@plt+0xbc4c>
   1d2e8:	ldr	r0, [sp, #44]	; 0x2c
   1d2ec:	bl	11288 <towlower@plt>
   1d2f0:	add	r2, sp, #48	; 0x30
   1d2f4:	mov	r1, r0
   1d2f8:	add	r0, sp, #56	; 0x38
   1d2fc:	bl	111e0 <wcrtomb@plt>
   1d300:	cmn	r0, #1
   1d304:	beq	1d1a4 <__assert_fail@plt+0xbc4c>
   1d308:	ldrb	r3, [sp, #56]	; 0x38
   1d30c:	mov	r2, #1
   1d310:	strb	r2, [r7, r3]
   1d314:	b	1d1a4 <__assert_fail@plt+0xbc4c>
   1d318:	add	r4, sp, #57	; 0x39
   1d31c:	b	1d2bc <__assert_fail@plt+0xbd64>
   1d320:	add	r4, sp, #57	; 0x39
   1d324:	b	1d2bc <__assert_fail@plt+0xbd64>
   1d328:	mov	fp, #0
   1d32c:	mov	r8, #1
   1d330:	str	sl, [sp, #16]
   1d334:	b	1d390 <__assert_fail@plt+0xbe38>
   1d338:	strb	r8, [r7, r3]
   1d33c:	add	r4, r4, #1
   1d340:	add	r5, r5, #1
   1d344:	cmp	r4, #32
   1d348:	beq	1d384 <__assert_fail@plt+0xbe2c>
   1d34c:	lsr	r3, r6, r4
   1d350:	tst	r3, #1
   1d354:	beq	1d33c <__assert_fail@plt+0xbde4>
   1d358:	strb	r8, [r7, r5]
   1d35c:	cmp	r9, #0
   1d360:	beq	1d33c <__assert_fail@plt+0xbde4>
   1d364:	add	r3, r5, #128	; 0x80
   1d368:	cmp	r3, #384	; 0x180
   1d36c:	movcs	r3, r5
   1d370:	bcs	1d338 <__assert_fail@plt+0xbde0>
   1d374:	bl	113cc <__ctype_tolower_loc@plt>
   1d378:	ldr	r3, [r0]
   1d37c:	ldr	r3, [r3, r5, lsl #2]
   1d380:	b	1d338 <__assert_fail@plt+0xbde0>
   1d384:	add	fp, fp, #4
   1d388:	cmp	fp, #32
   1d38c:	beq	1d3b0 <__assert_fail@plt+0xbe58>
   1d390:	lsl	r5, fp, #3
   1d394:	ldr	r3, [sp, #16]
   1d398:	ldr	r3, [r3]
   1d39c:	ldr	r2, [sp, #12]
   1d3a0:	ldr	r3, [r3, r2]
   1d3a4:	ldr	r6, [r3, fp]
   1d3a8:	mov	r4, #0
   1d3ac:	b	1d34c <__assert_fail@plt+0xbdf4>
   1d3b0:	ldr	sl, [sp, #16]
   1d3b4:	b	1d1a4 <__assert_fail@plt+0xbc4c>
   1d3b8:	ldr	r5, [r2, r4, lsl #3]
   1d3bc:	ldr	r3, [sl, #92]	; 0x5c
   1d3c0:	cmp	r3, #1
   1d3c4:	ble	1d400 <__assert_fail@plt+0xbea8>
   1d3c8:	ldr	r3, [r5, #36]	; 0x24
   1d3cc:	cmp	r3, #0
   1d3d0:	bne	1d3ec <__assert_fail@plt+0xbe94>
   1d3d4:	ldrb	r3, [r5, #16]
   1d3d8:	tst	r3, #1
   1d3dc:	bne	1d3ec <__assert_fail@plt+0xbe94>
   1d3e0:	ldr	r3, [r5, #32]
   1d3e4:	cmp	r3, #0
   1d3e8:	beq	1d400 <__assert_fail@plt+0xbea8>
   1d3ec:	mov	r3, #0
   1d3f0:	strb	r3, [sp, #48]	; 0x30
   1d3f4:	ldr	r4, [sp, #20]
   1d3f8:	ldr	r5, [sp, #24]
   1d3fc:	b	1d430 <__assert_fail@plt+0xbed8>
   1d400:	ldr	r3, [r5, #20]
   1d404:	cmp	r3, #0
   1d408:	ble	1d1a4 <__assert_fail@plt+0xbc4c>
   1d40c:	mov	r4, #0
   1d410:	ldr	fp, [sp, #28]
   1d414:	b	1d474 <__assert_fail@plt+0xbf1c>
   1d418:	ldrb	r3, [sp, #48]	; 0x30
   1d41c:	add	r3, r3, #1
   1d420:	uxtb	r3, r3
   1d424:	strb	r3, [sp, #48]	; 0x30
   1d428:	cmp	r3, #0
   1d42c:	beq	1d1a4 <__assert_fail@plt+0xbc4c>
   1d430:	str	r4, [sp, #56]	; 0x38
   1d434:	str	r5, [sp, #60]	; 0x3c
   1d438:	add	r3, sp, #56	; 0x38
   1d43c:	mov	r2, #1
   1d440:	add	r1, sp, #48	; 0x30
   1d444:	mov	r0, #0
   1d448:	bl	25d9c <__assert_fail@plt+0x14844>
   1d44c:	cmn	r0, #2
   1d450:	bne	1d418 <__assert_fail@plt+0xbec0>
   1d454:	ldrb	r3, [sp, #48]	; 0x30
   1d458:	mov	r2, #1
   1d45c:	strb	r2, [r7, r3]
   1d460:	b	1d418 <__assert_fail@plt+0xbec0>
   1d464:	add	r4, r4, #1
   1d468:	ldr	r3, [r5, #20]
   1d46c:	cmp	r3, r4
   1d470:	ble	1d1a4 <__assert_fail@plt+0xbc4c>
   1d474:	ldr	r3, [sp, #20]
   1d478:	str	r3, [sp, #48]	; 0x30
   1d47c:	ldr	r3, [sp, #24]
   1d480:	str	r3, [sp, #52]	; 0x34
   1d484:	lsl	r8, r4, #2
   1d488:	ldr	r3, [r5]
   1d48c:	add	r2, sp, #48	; 0x30
   1d490:	ldr	r1, [r3, r4, lsl #2]
   1d494:	add	r0, sp, #56	; 0x38
   1d498:	bl	111e0 <wcrtomb@plt>
   1d49c:	cmn	r0, #1
   1d4a0:	beq	1d4cc <__assert_fail@plt+0xbf74>
   1d4a4:	ldrb	r6, [sp, #56]	; 0x38
   1d4a8:	mov	r3, #1
   1d4ac:	strb	r3, [r7, r6]
   1d4b0:	cmp	r9, #0
   1d4b4:	beq	1d4cc <__assert_fail@plt+0xbf74>
   1d4b8:	bl	113cc <__ctype_tolower_loc@plt>
   1d4bc:	ldr	r3, [r0]
   1d4c0:	ldr	r3, [r3, r6, lsl #2]
   1d4c4:	mov	r2, #1
   1d4c8:	strb	r2, [r7, r3]
   1d4cc:	ldr	r3, [fp, #12]
   1d4d0:	tst	r3, #4194304	; 0x400000
   1d4d4:	beq	1d464 <__assert_fail@plt+0xbf0c>
   1d4d8:	ldr	r3, [sl, #92]	; 0x5c
   1d4dc:	cmp	r3, #1
   1d4e0:	ble	1d464 <__assert_fail@plt+0xbf0c>
   1d4e4:	ldr	r3, [r5]
   1d4e8:	ldr	r0, [r3, r8]
   1d4ec:	bl	11288 <towlower@plt>
   1d4f0:	add	r2, sp, #48	; 0x30
   1d4f4:	mov	r1, r0
   1d4f8:	add	r0, sp, #56	; 0x38
   1d4fc:	bl	111e0 <wcrtomb@plt>
   1d500:	cmn	r0, #1
   1d504:	beq	1d464 <__assert_fail@plt+0xbf0c>
   1d508:	ldrb	r3, [sp, #56]	; 0x38
   1d50c:	mov	r2, #1
   1d510:	strb	r2, [r7, r3]
   1d514:	b	1d464 <__assert_fail@plt+0xbf0c>
   1d518:	ldr	r2, [sp, #28]
   1d51c:	ldrb	r3, [r2, #28]
   1d520:	orr	r3, r3, #1
   1d524:	strb	r3, [r2, #28]
   1d528:	b	1d228 <__assert_fail@plt+0xbcd0>
   1d52c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d530:	strd	r6, [sp, #8]
   1d534:	strd	r8, [sp, #16]
   1d538:	strd	sl, [sp, #24]
   1d53c:	str	lr, [sp, #32]
   1d540:	sub	sp, sp, #164	; 0xa4
   1d544:	mov	r9, r0
   1d548:	mov	r4, r1
   1d54c:	mov	r8, r2
   1d550:	str	r3, [sp, #24]
   1d554:	ldr	fp, [sp, #204]	; 0xcc
   1d558:	ldr	r3, [r1]
   1d55c:	str	r3, [sp, #20]
   1d560:	ldrb	r2, [r2, #4]
   1d564:	sub	r3, r2, #1
   1d568:	cmp	r3, #35	; 0x23
   1d56c:	ldrls	pc, [pc, r3, lsl #2]
   1d570:	b	1e42c <__assert_fail@plt+0xced4>
   1d574:	andeq	sp, r1, r4, lsl #12
   1d578:	muleq	r1, r0, r8
   1d57c:	andeq	lr, r1, ip, lsr #8
   1d580:	andeq	sp, r1, r0, asr #31
   1d584:	andeq	lr, r1, r8, lsr r3
   1d588:	andeq	lr, r1, ip, lsr #8
   1d58c:	andeq	lr, r1, ip, lsr #8
   1d590:	andeq	sp, r1, ip, asr #13
   1d594:	andeq	lr, r1, r4, ror r0
   1d598:	muleq	r1, r0, r8
   1d59c:	andeq	lr, r1, r0, asr r0
   1d5a0:	andeq	lr, r1, ip, lsr #2
   1d5a4:	andeq	lr, r1, ip, lsr #8
   1d5a8:	andeq	lr, r1, ip, lsr #8
   1d5ac:	andeq	lr, r1, ip, lsr #8
   1d5b0:	andeq	lr, r1, ip, lsr #8
   1d5b4:	andeq	lr, r1, ip, lsr #8
   1d5b8:	andeq	lr, r1, r0, asr r0
   1d5bc:	andeq	lr, r1, r0, asr r0
   1d5c0:	andeq	sp, r1, ip, lsr #15
   1d5c4:	andeq	lr, r1, ip, lsr #8
   1d5c8:	andeq	lr, r1, ip, lsr #8
   1d5cc:	andeq	lr, r1, r8, lsr r0
   1d5d0:	andeq	lr, r1, ip, ror r0
   1d5d4:	andeq	lr, r1, ip, lsr #8
   1d5d8:	andeq	lr, r1, ip, lsr #8
   1d5dc:	andeq	lr, r1, ip, lsr #8
   1d5e0:	andeq	lr, r1, ip, lsr #8
   1d5e4:	andeq	lr, r1, ip, lsr #8
   1d5e8:	andeq	lr, r1, ip, lsr #8
   1d5ec:	andeq	lr, r1, ip, lsr #8
   1d5f0:	andeq	lr, r1, ip, ror r3
   1d5f4:	andeq	lr, r1, ip, ror r3
   1d5f8:	ldrdeq	lr, [r1], -r4
   1d5fc:	ldrdeq	lr, [r1], -r4
   1d600:	andeq	lr, r1, ip, lsr #8
   1d604:	mov	r3, r8
   1d608:	mov	r2, #0
   1d60c:	mov	r1, r2
   1d610:	ldr	r0, [sp, #20]
   1d614:	bl	17224 <__assert_fail@plt+0x5ccc>
   1d618:	subs	sl, r0, #0
   1d61c:	moveq	r3, #12
   1d620:	streq	r3, [fp]
   1d624:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1d628:	ldr	r3, [sp, #20]
   1d62c:	ldr	r3, [r3, #92]	; 0x5c
   1d630:	cmp	r3, #1
   1d634:	movgt	r6, #0
   1d638:	movgt	r5, #16
   1d63c:	ble	1e0a8 <__assert_fail@plt+0xcb50>
   1d640:	ldr	r3, [r9, #40]	; 0x28
   1d644:	ldr	r2, [r9, #56]	; 0x38
   1d648:	cmp	r2, r3
   1d64c:	ble	1e0a8 <__assert_fail@plt+0xcb50>
   1d650:	ldr	r2, [r9, #28]
   1d654:	cmp	r3, r2
   1d658:	beq	1e0a8 <__assert_fail@plt+0xcb50>
   1d65c:	ldr	r2, [r9, #8]
   1d660:	ldr	r3, [r2, r3, lsl #2]
   1d664:	cmn	r3, #1
   1d668:	bne	1e0a8 <__assert_fail@plt+0xcb50>
   1d66c:	ldr	r2, [sp, #24]
   1d670:	mov	r1, r9
   1d674:	mov	r0, r8
   1d678:	bl	18e28 <__assert_fail@plt+0x78d0>
   1d67c:	mov	r3, r8
   1d680:	mov	r2, r6
   1d684:	mov	r1, r6
   1d688:	ldr	r7, [sp, #20]
   1d68c:	mov	r0, r7
   1d690:	bl	17224 <__assert_fail@plt+0x5ccc>
   1d694:	mov	r4, r0
   1d698:	mov	r3, r5
   1d69c:	mov	r2, r0
   1d6a0:	mov	r1, sl
   1d6a4:	mov	r0, r7
   1d6a8:	bl	173c0 <__assert_fail@plt+0x5e68>
   1d6ac:	mov	sl, r0
   1d6b0:	cmp	r0, #0
   1d6b4:	cmpne	r4, #0
   1d6b8:	bne	1d640 <__assert_fail@plt+0xc0e8>
   1d6bc:	mov	r3, #12
   1d6c0:	str	r3, [fp]
   1d6c4:	mov	sl, #0
   1d6c8:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1d6cc:	ldr	r5, [r1, #24]
   1d6d0:	add	r3, r5, #1
   1d6d4:	str	r3, [r1, #24]
   1d6d8:	ldr	r6, [sp, #24]
   1d6dc:	orr	r2, r6, #8388608	; 0x800000
   1d6e0:	mov	r1, r0
   1d6e4:	mov	r0, r8
   1d6e8:	bl	18e28 <__assert_fail@plt+0x78d0>
   1d6ec:	ldrb	r3, [r8, #4]
   1d6f0:	cmp	r3, #9
   1d6f4:	moveq	r0, #0
   1d6f8:	bne	1d744 <__assert_fail@plt+0xc1ec>
   1d6fc:	cmp	r5, #8
   1d700:	bhi	1d718 <__assert_fail@plt+0xc1c0>
   1d704:	ldr	r1, [sp, #20]
   1d708:	ldr	r3, [r1, #84]	; 0x54
   1d70c:	mov	r2, #1
   1d710:	orr	r3, r3, r2, lsl r5
   1d714:	str	r3, [r1, #84]	; 0x54
   1d718:	mov	r3, #17
   1d71c:	mov	r2, #0
   1d720:	mov	r1, r0
   1d724:	ldr	r0, [sp, #20]
   1d728:	bl	173c0 <__assert_fail@plt+0x5e68>
   1d72c:	subs	sl, r0, #0
   1d730:	moveq	r3, #12
   1d734:	streq	r3, [fp]
   1d738:	beq	1d774 <__assert_fail@plt+0xc21c>
   1d73c:	str	r5, [sl, #20]
   1d740:	b	1e0a8 <__assert_fail@plt+0xcb50>
   1d744:	str	fp, [sp, #4]
   1d748:	ldr	r3, [sp, #200]	; 0xc8
   1d74c:	add	r3, r3, #1
   1d750:	str	r3, [sp]
   1d754:	mov	r3, r6
   1d758:	mov	r2, r8
   1d75c:	mov	r1, r4
   1d760:	mov	r0, r9
   1d764:	bl	1eb14 <__assert_fail@plt+0xd5bc>
   1d768:	ldr	r3, [fp]
   1d76c:	cmp	r3, #0
   1d770:	beq	1d77c <__assert_fail@plt+0xc224>
   1d774:	mov	sl, #0
   1d778:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1d77c:	ldrb	r3, [r8, #4]
   1d780:	cmp	r3, #9
   1d784:	beq	1d6fc <__assert_fail@plt+0xc1a4>
   1d788:	cmp	r0, #0
   1d78c:	beq	1d7a0 <__assert_fail@plt+0xc248>
   1d790:	mov	r2, #0
   1d794:	movw	r1, #36780	; 0x8fac
   1d798:	movt	r1, #1
   1d79c:	bl	16618 <__assert_fail@plt+0x50c0>
   1d7a0:	mov	r3, #8
   1d7a4:	str	r3, [fp]
   1d7a8:	b	1d774 <__assert_fail@plt+0xc21c>
   1d7ac:	mov	r3, #0
   1d7b0:	str	r3, [sp, #68]	; 0x44
   1d7b4:	mov	r1, #1
   1d7b8:	mov	r0, #32
   1d7bc:	bl	25880 <__assert_fail@plt+0x14328>
   1d7c0:	mov	r4, r0
   1d7c4:	str	r0, [sp, #32]
   1d7c8:	mov	r1, #1
   1d7cc:	mov	r0, #40	; 0x28
   1d7d0:	bl	25880 <__assert_fail@plt+0x14328>
   1d7d4:	str	r0, [sp, #36]	; 0x24
   1d7d8:	clz	r0, r0
   1d7dc:	lsr	r0, r0, #5
   1d7e0:	cmp	r4, #0
   1d7e4:	movne	r7, r0
   1d7e8:	moveq	r7, #1
   1d7ec:	cmp	r7, #0
   1d7f0:	bne	1d868 <__assert_fail@plt+0xc310>
   1d7f4:	ldr	r2, [sp, #24]
   1d7f8:	mov	r1, r9
   1d7fc:	mov	r0, r8
   1d800:	bl	16830 <__assert_fail@plt+0x52d8>
   1d804:	str	r0, [sp, #28]
   1d808:	ldrb	r3, [r8, #4]
   1d80c:	cmp	r3, #2
   1d810:	streq	r3, [fp]
   1d814:	beq	1d8f8 <__assert_fail@plt+0xc3a0>
   1d818:	cmp	r3, #25
   1d81c:	strne	r7, [sp, #52]	; 0x34
   1d820:	beq	1d884 <__assert_fail@plt+0xc32c>
   1d824:	ldrb	r3, [r8, #4]
   1d828:	cmp	r3, #21
   1d82c:	moveq	r3, #1
   1d830:	strbeq	r3, [r8, #4]
   1d834:	mov	r3, #0
   1d838:	str	r3, [sp, #48]	; 0x30
   1d83c:	mov	r2, #1
   1d840:	str	r3, [sp, #44]	; 0x2c
   1d844:	add	sl, sp, #96	; 0x60
   1d848:	ldr	r3, [sp, #24]
   1d84c:	ubfx	r3, r3, #16, #1
   1d850:	str	r3, [sp, #60]	; 0x3c
   1d854:	ldr	r4, [sp, #32]
   1d858:	str	r7, [sp, #40]	; 0x28
   1d85c:	str	fp, [sp, #204]	; 0xcc
   1d860:	ldr	fp, [sp, #36]	; 0x24
   1d864:	b	1dc88 <__assert_fail@plt+0xc730>
   1d868:	ldr	r0, [sp, #32]
   1d86c:	bl	13eac <__assert_fail@plt+0x2954>
   1d870:	ldr	r0, [sp, #36]	; 0x24
   1d874:	bl	13eac <__assert_fail@plt+0x2954>
   1d878:	mov	r3, #12
   1d87c:	str	r3, [fp]
   1d880:	b	1d908 <__assert_fail@plt+0xc3b0>
   1d884:	ldr	r2, [sp, #36]	; 0x24
   1d888:	ldrb	r3, [r2, #16]
   1d88c:	orr	r3, r3, #1
   1d890:	strb	r3, [r2, #16]
   1d894:	ldr	r3, [sp, #24]
   1d898:	tst	r3, #256	; 0x100
   1d89c:	beq	1d8b0 <__assert_fail@plt+0xc358>
   1d8a0:	ldr	r2, [sp, #32]
   1d8a4:	ldr	r3, [r2]
   1d8a8:	orr	r3, r3, #1024	; 0x400
   1d8ac:	str	r3, [r2]
   1d8b0:	ldr	r3, [r9, #40]	; 0x28
   1d8b4:	ldr	r2, [sp, #28]
   1d8b8:	add	r3, r3, r2
   1d8bc:	str	r3, [r9, #40]	; 0x28
   1d8c0:	ldr	r2, [sp, #24]
   1d8c4:	mov	r1, r9
   1d8c8:	mov	r0, r8
   1d8cc:	bl	16830 <__assert_fail@plt+0x52d8>
   1d8d0:	str	r0, [sp, #28]
   1d8d4:	ldrb	r3, [r8, #4]
   1d8d8:	cmp	r3, #2
   1d8dc:	streq	r3, [fp]
   1d8e0:	beq	1d8f8 <__assert_fail@plt+0xc3a0>
   1d8e4:	mov	r3, #1
   1d8e8:	str	r3, [sp, #52]	; 0x34
   1d8ec:	b	1d824 <__assert_fail@plt+0xc2cc>
   1d8f0:	ldr	fp, [sp, #204]	; 0xcc
   1d8f4:	str	r0, [fp]
   1d8f8:	ldr	r0, [sp, #32]
   1d8fc:	bl	13eac <__assert_fail@plt+0x2954>
   1d900:	ldr	r0, [sp, #36]	; 0x24
   1d904:	bl	18f20 <__assert_fail@plt+0x79c8>
   1d908:	ldr	r3, [fp]
   1d90c:	cmp	r3, #0
   1d910:	bne	1e898 <__assert_fail@plt+0xd340>
   1d914:	mov	sl, #0
   1d918:	b	1e0a8 <__assert_fail@plt+0xcb50>
   1d91c:	ldr	fp, [sp, #204]	; 0xcc
   1d920:	mov	r3, #7
   1d924:	str	r3, [fp]
   1d928:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1d92c:	ldr	r3, [r9, #40]	; 0x28
   1d930:	ldr	r2, [sp, #28]
   1d934:	add	r3, r3, r2
   1d938:	str	r3, [r9, #40]	; 0x28
   1d93c:	ldr	r2, [sp, #24]
   1d940:	mov	r1, r9
   1d944:	add	r0, sp, #88	; 0x58
   1d948:	bl	16830 <__assert_fail@plt+0x52d8>
   1d94c:	mov	r3, r0
   1d950:	ldrb	r2, [sp, #92]	; 0x5c
   1d954:	cmp	r2, #2
   1d958:	beq	1d980 <__assert_fail@plt+0xc428>
   1d95c:	cmp	r2, #21
   1d960:	bne	1d990 <__assert_fail@plt+0xc438>
   1d964:	ldr	r3, [r9, #40]	; 0x28
   1d968:	ldr	r2, [sp, #28]
   1d96c:	sub	r3, r3, r2
   1d970:	str	r3, [r9, #40]	; 0x28
   1d974:	mov	r3, #1
   1d978:	strb	r3, [r8, #4]
   1d97c:	b	1dcfc <__assert_fail@plt+0xc7a4>
   1d980:	ldr	fp, [sp, #204]	; 0xcc
   1d984:	mov	r3, #7
   1d988:	str	r3, [fp]
   1d98c:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1d990:	add	r2, sp, #128	; 0x80
   1d994:	str	r2, [sp, #84]	; 0x54
   1d998:	mov	r2, #3
   1d99c:	str	r2, [sp, #80]	; 0x50
   1d9a0:	mov	r2, #1
   1d9a4:	str	r2, [sp, #8]
   1d9a8:	ldr	r2, [sp, #24]
   1d9ac:	str	r2, [sp, #4]
   1d9b0:	ldr	r2, [sp, #20]
   1d9b4:	str	r2, [sp]
   1d9b8:	add	r2, sp, #88	; 0x58
   1d9bc:	mov	r1, r9
   1d9c0:	add	r0, sp, #80	; 0x50
   1d9c4:	bl	169c4 <__assert_fail@plt+0x546c>
   1d9c8:	cmp	r0, #0
   1d9cc:	bne	1dad8 <__assert_fail@plt+0xc580>
   1d9d0:	ldr	r2, [sp, #24]
   1d9d4:	mov	r1, r9
   1d9d8:	mov	r0, r8
   1d9dc:	bl	16830 <__assert_fail@plt+0x52d8>
   1d9e0:	str	r0, [sp, #28]
   1d9e4:	ldr	r6, [sp, #72]	; 0x48
   1d9e8:	sub	r3, r6, #2
   1d9ec:	bics	r3, r3, #2
   1d9f0:	beq	1e918 <__assert_fail@plt+0xd3c0>
   1d9f4:	ldr	r7, [sp, #80]	; 0x50
   1d9f8:	sub	r3, r7, #2
   1d9fc:	bics	r3, r3, #2
   1da00:	beq	1e924 <__assert_fail@plt+0xd3cc>
   1da04:	cmp	r6, #3
   1da08:	moveq	r3, #1
   1da0c:	movne	r3, #0
   1da10:	str	r3, [sp, #56]	; 0x38
   1da14:	beq	1dae4 <__assert_fail@plt+0xc58c>
   1da18:	cmp	r7, #3
   1da1c:	beq	1db14 <__assert_fail@plt+0xc5bc>
   1da20:	cmp	r6, #0
   1da24:	movne	r5, #0
   1da28:	bne	1da30 <__assert_fail@plt+0xc4d8>
   1da2c:	ldrb	r5, [sp, #76]	; 0x4c
   1da30:	cmp	r7, #0
   1da34:	bne	1db3c <__assert_fail@plt+0xc5e4>
   1da38:	ldrb	r7, [sp, #84]	; 0x54
   1da3c:	ldr	r3, [sp, #56]	; 0x38
   1da40:	cmp	r6, #0
   1da44:	moveq	r3, #1
   1da48:	cmp	r3, #0
   1da4c:	bne	1db50 <__assert_fail@plt+0xc5f8>
   1da50:	ldr	r5, [sp, #76]	; 0x4c
   1da54:	ldr	r3, [sp, #80]	; 0x50
   1da58:	cmp	r3, #3
   1da5c:	cmpne	r3, #0
   1da60:	beq	1db70 <__assert_fail@plt+0xc618>
   1da64:	ldr	r7, [sp, #84]	; 0x54
   1da68:	cmn	r5, #1
   1da6c:	cmnne	r7, #1
   1da70:	beq	1e940 <__assert_fail@plt+0xd3e8>
   1da74:	ldr	r3, [sp, #60]	; 0x3c
   1da78:	cmp	r7, r5
   1da7c:	movcs	r3, #0
   1da80:	andcc	r3, r3, #1
   1da84:	cmp	r3, #0
   1da88:	bne	1e94c <__assert_fail@plt+0xd3f4>
   1da8c:	ldr	r3, [sp, #20]
   1da90:	ldr	r3, [r3, #92]	; 0x5c
   1da94:	cmp	r3, #1
   1da98:	ble	1dacc <__assert_fail@plt+0xc574>
   1da9c:	ldr	r3, [fp, #32]
   1daa0:	ldr	r2, [sp, #48]	; 0x30
   1daa4:	cmp	r3, r2
   1daa8:	beq	1db90 <__assert_fail@plt+0xc638>
   1daac:	ldr	r2, [fp, #32]
   1dab0:	ldr	r3, [fp, #4]
   1dab4:	str	r5, [r3, r2, lsl #2]
   1dab8:	ldr	r2, [fp, #8]
   1dabc:	ldr	r3, [fp, #32]
   1dac0:	add	r1, r3, #1
   1dac4:	str	r1, [fp, #32]
   1dac8:	str	r7, [r2, r3, lsl #2]
   1dacc:	mov	r3, #0
   1dad0:	mov	ip, #1
   1dad4:	b	1dc08 <__assert_fail@plt+0xc6b0>
   1dad8:	ldr	fp, [sp, #204]	; 0xcc
   1dadc:	str	r0, [fp]
   1dae0:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1dae4:	ldr	r0, [sp, #76]	; 0x4c
   1dae8:	bl	11414 <strlen@plt>
   1daec:	cmp	r0, #1
   1daf0:	bhi	1db08 <__assert_fail@plt+0xc5b0>
   1daf4:	cmp	r7, #3
   1daf8:	beq	1e974 <__assert_fail@plt+0xd41c>
   1dafc:	ldr	r3, [sp, #76]	; 0x4c
   1db00:	ldrb	r5, [r3]
   1db04:	b	1da30 <__assert_fail@plt+0xc4d8>
   1db08:	ldr	fp, [sp, #204]	; 0xcc
   1db0c:	mov	r3, #3
   1db10:	b	1e92c <__assert_fail@plt+0xd3d4>
   1db14:	ldr	r0, [sp, #84]	; 0x54
   1db18:	bl	11414 <strlen@plt>
   1db1c:	cmp	r0, #1
   1db20:	bhi	1e934 <__assert_fail@plt+0xd3dc>
   1db24:	cmp	r6, #0
   1db28:	beq	1da2c <__assert_fail@plt+0xc4d4>
   1db2c:	cmp	r6, #3
   1db30:	beq	1dafc <__assert_fail@plt+0xc5a4>
   1db34:	mov	r5, #0
   1db38:	b	1da30 <__assert_fail@plt+0xc4d8>
   1db3c:	cmp	r7, #3
   1db40:	ldreq	r3, [sp, #84]	; 0x54
   1db44:	ldrbeq	r7, [r3]
   1db48:	movne	r7, #0
   1db4c:	b	1da3c <__assert_fail@plt+0xc4e4>
   1db50:	ldr	r3, [sp, #20]
   1db54:	ldr	r3, [r3, #92]	; 0x5c
   1db58:	cmp	r3, #1
   1db5c:	ble	1e960 <__assert_fail@plt+0xd408>
   1db60:	mov	r0, r5
   1db64:	bl	11468 <btowc@plt>
   1db68:	mov	r5, r0
   1db6c:	b	1da54 <__assert_fail@plt+0xc4fc>
   1db70:	ldr	r3, [sp, #20]
   1db74:	ldr	r3, [r3, #92]	; 0x5c
   1db78:	cmp	r3, #1
   1db7c:	ble	1da68 <__assert_fail@plt+0xc510>
   1db80:	mov	r0, r7
   1db84:	bl	11468 <btowc@plt>
   1db88:	mov	r7, r0
   1db8c:	b	1da68 <__assert_fail@plt+0xc510>
   1db90:	lsl	r3, r2, #1
   1db94:	add	r3, r3, #1
   1db98:	str	r3, [sp, #48]	; 0x30
   1db9c:	lsl	r6, r3, #2
   1dba0:	mov	r1, r6
   1dba4:	ldr	r0, [fp, #4]
   1dba8:	bl	25930 <__assert_fail@plt+0x143d8>
   1dbac:	str	r0, [sp, #56]	; 0x38
   1dbb0:	mov	r1, r6
   1dbb4:	ldr	r0, [fp, #8]
   1dbb8:	bl	25930 <__assert_fail@plt+0x143d8>
   1dbbc:	mov	r6, r0
   1dbc0:	ldr	r3, [sp, #56]	; 0x38
   1dbc4:	cmp	r0, #0
   1dbc8:	cmpne	r3, #0
   1dbcc:	beq	1dbe0 <__assert_fail@plt+0xc688>
   1dbd0:	ldr	r3, [sp, #56]	; 0x38
   1dbd4:	str	r3, [fp, #4]
   1dbd8:	str	r0, [fp, #8]
   1dbdc:	b	1daac <__assert_fail@plt+0xc554>
   1dbe0:	ldr	fp, [sp, #204]	; 0xcc
   1dbe4:	mov	r0, r3
   1dbe8:	bl	13eac <__assert_fail@plt+0x2954>
   1dbec:	mov	r0, r6
   1dbf0:	bl	13eac <__assert_fail@plt+0x2954>
   1dbf4:	mov	r3, #12
   1dbf8:	b	1e92c <__assert_fail@plt+0xd3d4>
   1dbfc:	add	r3, r3, #1
   1dc00:	cmp	r3, #256	; 0x100
   1dc04:	beq	1e908 <__assert_fail@plt+0xd3b0>
   1dc08:	cmp	r3, r5
   1dc0c:	movcc	r2, #0
   1dc10:	movcs	r2, #1
   1dc14:	cmp	r3, r7
   1dc18:	movhi	r2, #0
   1dc1c:	cmp	r2, #0
   1dc20:	beq	1dbfc <__assert_fail@plt+0xc6a4>
   1dc24:	add	r2, r3, #31
   1dc28:	cmp	r3, #0
   1dc2c:	movge	r2, r3
   1dc30:	asr	r2, r2, #5
   1dc34:	rsbs	r1, r3, #0
   1dc38:	and	r0, r3, #31
   1dc3c:	and	r1, r1, #31
   1dc40:	rsbpl	r0, r1, #0
   1dc44:	ldr	r1, [r4, r2, lsl #2]
   1dc48:	orr	r1, r1, ip, lsl r0
   1dc4c:	str	r1, [r4, r2, lsl #2]
   1dc50:	b	1dbfc <__assert_fail@plt+0xc6a4>
   1dc54:	ldrb	r3, [sp, #76]	; 0x4c
   1dc58:	asr	r1, r3, #5
   1dc5c:	and	r3, r3, #31
   1dc60:	ldr	r2, [r4, r1, lsl #2]
   1dc64:	mov	r0, #1
   1dc68:	orr	r3, r2, r0, lsl r3
   1dc6c:	str	r3, [r4, r1, lsl #2]
   1dc70:	ldrb	r3, [r8, #4]
   1dc74:	cmp	r3, #2
   1dc78:	beq	1de28 <__assert_fail@plt+0xc8d0>
   1dc7c:	cmp	r3, #21
   1dc80:	beq	1de38 <__assert_fail@plt+0xc8e0>
   1dc84:	ldr	r2, [sp, #40]	; 0x28
   1dc88:	str	sl, [sp, #76]	; 0x4c
   1dc8c:	mov	r3, #3
   1dc90:	str	r3, [sp, #72]	; 0x48
   1dc94:	str	r2, [sp, #8]
   1dc98:	ldr	r3, [sp, #24]
   1dc9c:	str	r3, [sp, #4]
   1dca0:	ldr	r3, [sp, #20]
   1dca4:	str	r3, [sp]
   1dca8:	ldr	r3, [sp, #28]
   1dcac:	mov	r2, r8
   1dcb0:	mov	r1, r9
   1dcb4:	add	r0, sp, #72	; 0x48
   1dcb8:	bl	169c4 <__assert_fail@plt+0x546c>
   1dcbc:	cmp	r0, #0
   1dcc0:	bne	1d8f0 <__assert_fail@plt+0xc398>
   1dcc4:	ldr	r2, [sp, #24]
   1dcc8:	mov	r1, r9
   1dccc:	mov	r0, r8
   1dcd0:	bl	16830 <__assert_fail@plt+0x52d8>
   1dcd4:	str	r0, [sp, #28]
   1dcd8:	ldr	r3, [sp, #72]	; 0x48
   1dcdc:	sub	r3, r3, #2
   1dce0:	bics	r3, r3, #2
   1dce4:	beq	1dcfc <__assert_fail@plt+0xc7a4>
   1dce8:	ldrb	r3, [r8, #4]
   1dcec:	cmp	r3, #2
   1dcf0:	beq	1d91c <__assert_fail@plt+0xc3c4>
   1dcf4:	cmp	r3, #22
   1dcf8:	beq	1d92c <__assert_fail@plt+0xc3d4>
   1dcfc:	ldr	r3, [sp, #72]	; 0x48
   1dd00:	cmp	r3, #4
   1dd04:	ldrls	pc, [pc, r3, lsl #2]
   1dd08:	b	1ddec <__assert_fail@plt+0xc894>
   1dd0c:	andeq	sp, r1, r4, asr ip
   1dd10:	andeq	sp, r1, r0, lsr #26
   1dd14:	andeq	sp, r1, r4, ror sp
   1dd18:			; <UNDEFINED> instruction: 0x0001ddb0
   1dd1c:	andeq	sp, r1, ip, ror #27
   1dd20:	ldr	r3, [fp, #20]
   1dd24:	ldr	r2, [sp, #44]	; 0x2c
   1dd28:	cmp	r3, r2
   1dd2c:	beq	1dd4c <__assert_fail@plt+0xc7f4>
   1dd30:	ldr	r2, [fp]
   1dd34:	ldr	r3, [fp, #20]
   1dd38:	add	r1, r3, #1
   1dd3c:	str	r1, [fp, #20]
   1dd40:	ldr	r1, [sp, #76]	; 0x4c
   1dd44:	str	r1, [r2, r3, lsl #2]
   1dd48:	b	1dc70 <__assert_fail@plt+0xc718>
   1dd4c:	lsl	r3, r2, #1
   1dd50:	add	r3, r3, #1
   1dd54:	str	r3, [sp, #44]	; 0x2c
   1dd58:	lsl	r1, r3, #2
   1dd5c:	ldr	r0, [fp]
   1dd60:	bl	25930 <__assert_fail@plt+0x143d8>
   1dd64:	cmp	r0, #0
   1dd68:	beq	1dfb0 <__assert_fail@plt+0xca58>
   1dd6c:	str	r0, [fp]
   1dd70:	b	1dd30 <__assert_fail@plt+0xc7d8>
   1dd74:	ldr	r5, [sp, #76]	; 0x4c
   1dd78:	mov	r0, r5
   1dd7c:	bl	11414 <strlen@plt>
   1dd80:	cmp	r0, #1
   1dd84:	bne	1e8e8 <__assert_fail@plt+0xd390>
   1dd88:	ldrb	r3, [r5]
   1dd8c:	asr	r1, r3, #5
   1dd90:	and	r3, r3, #31
   1dd94:	ldr	r2, [r4, r1, lsl #2]
   1dd98:	orr	r3, r2, r0, lsl r3
   1dd9c:	str	r3, [r4, r1, lsl #2]
   1dda0:	mov	r3, #0
   1dda4:	ldr	r2, [sp, #204]	; 0xcc
   1dda8:	str	r3, [r2]
   1ddac:	b	1dc70 <__assert_fail@plt+0xc718>
   1ddb0:	ldr	r5, [sp, #76]	; 0x4c
   1ddb4:	mov	r0, r5
   1ddb8:	bl	11414 <strlen@plt>
   1ddbc:	cmp	r0, #1
   1ddc0:	bne	1e8f8 <__assert_fail@plt+0xd3a0>
   1ddc4:	ldrb	r3, [r5]
   1ddc8:	asr	r1, r3, #5
   1ddcc:	and	r3, r3, #31
   1ddd0:	ldr	r2, [r4, r1, lsl #2]
   1ddd4:	orr	r3, r2, r0, lsl r3
   1ddd8:	str	r3, [r4, r1, lsl #2]
   1dddc:	mov	r3, #0
   1dde0:	ldr	r2, [sp, #204]	; 0xcc
   1dde4:	str	r3, [r2]
   1dde8:	b	1dc70 <__assert_fail@plt+0xc718>
   1ddec:	ldr	r3, [sp, #24]
   1ddf0:	str	r3, [sp, #4]
   1ddf4:	ldr	r3, [sp, #76]	; 0x4c
   1ddf8:	str	r3, [sp]
   1ddfc:	add	r3, sp, #68	; 0x44
   1de00:	mov	r2, fp
   1de04:	mov	r1, r4
   1de08:	ldr	r0, [r9, #64]	; 0x40
   1de0c:	bl	1acb8 <__assert_fail@plt+0x9760>
   1de10:	ldr	r3, [sp, #204]	; 0xcc
   1de14:	str	r0, [r3]
   1de18:	cmp	r0, #0
   1de1c:	beq	1dc70 <__assert_fail@plt+0xc718>
   1de20:	ldr	fp, [sp, #204]	; 0xcc
   1de24:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1de28:	ldr	fp, [sp, #204]	; 0xcc
   1de2c:	mov	r3, #7
   1de30:	str	r3, [fp]
   1de34:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1de38:	ldr	fp, [sp, #204]	; 0xcc
   1de3c:	ldr	r3, [r9, #40]	; 0x28
   1de40:	ldr	r2, [sp, #28]
   1de44:	add	r3, r3, r2
   1de48:	str	r3, [r9, #40]	; 0x28
   1de4c:	ldr	r3, [sp, #52]	; 0x34
   1de50:	cmp	r3, #0
   1de54:	beq	1de78 <__assert_fail@plt+0xc920>
   1de58:	ldr	r2, [sp, #32]
   1de5c:	sub	r3, r2, #4
   1de60:	add	r1, r2, #28
   1de64:	ldr	r2, [r3, #4]!
   1de68:	mvn	r2, r2
   1de6c:	str	r2, [r3]
   1de70:	cmp	r3, r1
   1de74:	bne	1de64 <__assert_fail@plt+0xc90c>
   1de78:	ldr	r3, [sp, #20]
   1de7c:	ldr	r0, [r3, #92]	; 0x5c
   1de80:	cmp	r0, #1
   1de84:	ble	1deb4 <__assert_fail@plt+0xc95c>
   1de88:	ldr	r1, [sp, #32]
   1de8c:	sub	r2, r1, #4
   1de90:	ldr	r3, [r3, #60]	; 0x3c
   1de94:	sub	r3, r3, #4
   1de98:	add	ip, r1, #28
   1de9c:	ldr	r1, [r2, #4]!
   1dea0:	ldr	lr, [r3, #4]!
   1dea4:	and	r1, r1, lr
   1dea8:	str	r1, [r2]
   1deac:	cmp	ip, r2
   1deb0:	bne	1de9c <__assert_fail@plt+0xc944>
   1deb4:	ldr	r2, [sp, #36]	; 0x24
   1deb8:	ldr	r3, [r2, #20]
   1debc:	cmp	r3, #0
   1dec0:	bne	1df08 <__assert_fail@plt+0xc9b0>
   1dec4:	ldr	r3, [r2, #24]
   1dec8:	cmp	r3, #0
   1decc:	bne	1df08 <__assert_fail@plt+0xc9b0>
   1ded0:	ldr	r3, [r2, #28]
   1ded4:	cmp	r3, #0
   1ded8:	bne	1df08 <__assert_fail@plt+0xc9b0>
   1dedc:	ldr	r3, [r2, #32]
   1dee0:	cmp	r3, #0
   1dee4:	bne	1df08 <__assert_fail@plt+0xc9b0>
   1dee8:	cmp	r0, #1
   1deec:	ble	1df78 <__assert_fail@plt+0xca20>
   1def0:	ldr	r3, [r2, #36]	; 0x24
   1def4:	cmp	r3, #0
   1def8:	bne	1df08 <__assert_fail@plt+0xc9b0>
   1defc:	ldrb	r3, [r2, #16]
   1df00:	tst	r3, #1
   1df04:	beq	1df78 <__assert_fail@plt+0xca20>
   1df08:	ldr	r0, [sp, #20]
   1df0c:	ldrb	r3, [r0, #88]	; 0x58
   1df10:	orr	r3, r3, #2
   1df14:	strb	r3, [r0, #88]	; 0x58
   1df18:	mov	r3, #6
   1df1c:	strb	r3, [sp, #132]	; 0x84
   1df20:	ldr	r3, [sp, #36]	; 0x24
   1df24:	str	r3, [sp, #128]	; 0x80
   1df28:	add	r3, sp, #128	; 0x80
   1df2c:	mov	r2, #0
   1df30:	mov	r1, r2
   1df34:	bl	17224 <__assert_fail@plt+0x5ccc>
   1df38:	subs	sl, r0, #0
   1df3c:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1df40:	ldr	r2, [sp, #32]
   1df44:	ldr	r3, [r2]
   1df48:	cmp	r3, #0
   1df4c:	bne	1e8a0 <__assert_fail@plt+0xd348>
   1df50:	mov	r3, r2
   1df54:	add	r2, r2, #28
   1df58:	ldr	r1, [r3, #4]!
   1df5c:	cmp	r1, #0
   1df60:	bne	1e8a0 <__assert_fail@plt+0xd348>
   1df64:	cmp	r3, r2
   1df68:	bne	1df58 <__assert_fail@plt+0xca00>
   1df6c:	ldr	r0, [sp, #32]
   1df70:	bl	13eac <__assert_fail@plt+0x2954>
   1df74:	b	1e0a8 <__assert_fail@plt+0xcb50>
   1df78:	ldr	r0, [sp, #36]	; 0x24
   1df7c:	bl	18f20 <__assert_fail@plt+0x79c8>
   1df80:	mov	r3, #3
   1df84:	strb	r3, [sp, #132]	; 0x84
   1df88:	ldr	r3, [sp, #32]
   1df8c:	str	r3, [sp, #128]	; 0x80
   1df90:	add	r3, sp, #128	; 0x80
   1df94:	mov	r2, #0
   1df98:	mov	r1, r2
   1df9c:	ldr	r0, [sp, #20]
   1dfa0:	bl	17224 <__assert_fail@plt+0x5ccc>
   1dfa4:	subs	sl, r0, #0
   1dfa8:	bne	1e0a8 <__assert_fail@plt+0xcb50>
   1dfac:	b	1dfb4 <__assert_fail@plt+0xca5c>
   1dfb0:	ldr	fp, [sp, #204]	; 0xcc
   1dfb4:	mov	r3, #12
   1dfb8:	str	r3, [fp]
   1dfbc:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1dfc0:	ldr	r2, [r8]
   1dfc4:	mov	r3, #1
   1dfc8:	lsl	r3, r3, r2
   1dfcc:	ldr	r2, [sp, #20]
   1dfd0:	ldr	r2, [r2, #84]	; 0x54
   1dfd4:	tst	r3, r2
   1dfd8:	moveq	r3, #6
   1dfdc:	streq	r3, [fp]
   1dfe0:	moveq	sl, #0
   1dfe4:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1dfe8:	ldr	r0, [sp, #20]
   1dfec:	ldr	r2, [r0, #80]	; 0x50
   1dff0:	orr	r3, r2, r3
   1dff4:	str	r3, [r0, #80]	; 0x50
   1dff8:	mov	r3, r8
   1dffc:	mov	r2, #0
   1e000:	mov	r1, r2
   1e004:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e008:	subs	sl, r0, #0
   1e00c:	moveq	r3, #12
   1e010:	streq	r3, [fp]
   1e014:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1e018:	ldr	r2, [sp, #20]
   1e01c:	ldr	r3, [r2, #76]	; 0x4c
   1e020:	add	r3, r3, #1
   1e024:	str	r3, [r2, #76]	; 0x4c
   1e028:	ldrb	r3, [r2, #88]	; 0x58
   1e02c:	orr	r3, r3, #2
   1e030:	strb	r3, [r2, #88]	; 0x58
   1e034:	b	1e0a8 <__assert_fail@plt+0xcb50>
   1e038:	ldr	r3, [sp, #24]
   1e03c:	tst	r3, #16777216	; 0x1000000
   1e040:	movne	r3, #13
   1e044:	strne	r3, [fp]
   1e048:	movne	sl, #0
   1e04c:	bne	1e6b4 <__assert_fail@plt+0xd15c>
   1e050:	ldr	r3, [sp, #24]
   1e054:	tst	r3, #32
   1e058:	movne	r3, #13
   1e05c:	strne	r3, [fp]
   1e060:	movne	sl, #0
   1e064:	bne	1e6b4 <__assert_fail@plt+0xd15c>
   1e068:	ldr	r3, [sp, #24]
   1e06c:	tst	r3, #16
   1e070:	bne	1e0d4 <__assert_fail@plt+0xcb7c>
   1e074:	cmp	r2, #9
   1e078:	beq	1e110 <__assert_fail@plt+0xcbb8>
   1e07c:	mov	r3, #1
   1e080:	strb	r3, [r8, #4]
   1e084:	mov	r3, r8
   1e088:	mov	r2, #0
   1e08c:	mov	r1, r2
   1e090:	ldr	r0, [sp, #20]
   1e094:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e098:	subs	sl, r0, #0
   1e09c:	moveq	r3, #12
   1e0a0:	streq	r3, [fp]
   1e0a4:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1e0a8:	ldr	r2, [sp, #24]
   1e0ac:	mov	r1, r9
   1e0b0:	mov	r0, r8
   1e0b4:	bl	18e28 <__assert_fail@plt+0x78d0>
   1e0b8:	movw	r3, #27760	; 0x6c70
   1e0bc:	movt	r3, #1
   1e0c0:	str	r3, [sp, #32]
   1e0c4:	movw	r3, #36780	; 0x8fac
   1e0c8:	movt	r3, #1
   1e0cc:	str	r3, [sp, #36]	; 0x24
   1e0d0:	b	1e74c <__assert_fail@plt+0xd1f4>
   1e0d4:	mov	r5, r3
   1e0d8:	mov	r2, r3
   1e0dc:	mov	r1, r9
   1e0e0:	mov	r0, r8
   1e0e4:	bl	18e28 <__assert_fail@plt+0x78d0>
   1e0e8:	str	fp, [sp, #4]
   1e0ec:	ldr	r3, [sp, #200]	; 0xc8
   1e0f0:	str	r3, [sp]
   1e0f4:	mov	r3, r5
   1e0f8:	mov	r2, r8
   1e0fc:	mov	r1, r4
   1e100:	mov	r0, r9
   1e104:	bl	1d52c <__assert_fail@plt+0xbfd4>
   1e108:	mov	sl, r0
   1e10c:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e110:	ldr	r3, [sp, #24]
   1e114:	tst	r3, #131072	; 0x20000
   1e118:	moveq	r3, #16
   1e11c:	streq	r3, [fp]
   1e120:	moveq	sl, #0
   1e124:	bne	1e07c <__assert_fail@plt+0xcb24>
   1e128:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e12c:	ldr	r3, [r8]
   1e130:	movw	r2, #783	; 0x30f
   1e134:	tst	r2, r3
   1e138:	beq	1e14c <__assert_fail@plt+0xcbf4>
   1e13c:	ldr	r3, [sp, #20]
   1e140:	ldrb	r3, [r3, #88]	; 0x58
   1e144:	tst	r3, #16
   1e148:	beq	1e200 <__assert_fail@plt+0xcca8>
   1e14c:	ldr	r3, [r8]
   1e150:	sub	r2, r3, #256	; 0x100
   1e154:	bics	r2, r2, #256	; 0x100
   1e158:	bne	1e310 <__assert_fail@plt+0xcdb8>
   1e15c:	cmp	r3, #256	; 0x100
   1e160:	beq	1e2e4 <__assert_fail@plt+0xcd8c>
   1e164:	mov	r3, #5
   1e168:	str	r3, [r8]
   1e16c:	mov	r3, r8
   1e170:	mov	r2, #0
   1e174:	mov	r1, r2
   1e178:	ldr	r0, [sp, #20]
   1e17c:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e180:	mov	r5, r0
   1e184:	mov	r3, #10
   1e188:	str	r3, [r8]
   1e18c:	mov	r3, r8
   1e190:	mov	r2, #0
   1e194:	mov	r1, r2
   1e198:	ldr	r6, [sp, #20]
   1e19c:	mov	r0, r6
   1e1a0:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e1a4:	mov	r4, r0
   1e1a8:	mov	r3, #10
   1e1ac:	mov	r2, r0
   1e1b0:	mov	r1, r5
   1e1b4:	mov	r0, r6
   1e1b8:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e1bc:	clz	r3, r4
   1e1c0:	lsr	r3, r3, #5
   1e1c4:	cmp	r5, #0
   1e1c8:	moveq	r3, #1
   1e1cc:	mov	sl, r0
   1e1d0:	cmp	r0, #0
   1e1d4:	moveq	r3, #1
   1e1d8:	cmp	r3, #0
   1e1dc:	movne	r3, #12
   1e1e0:	strne	r3, [fp]
   1e1e4:	movne	sl, #0
   1e1e8:	bne	1e6b4 <__assert_fail@plt+0xd15c>
   1e1ec:	ldr	r2, [sp, #24]
   1e1f0:	mov	r1, r9
   1e1f4:	mov	r0, r8
   1e1f8:	bl	18e28 <__assert_fail@plt+0x78d0>
   1e1fc:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e200:	ldr	r2, [sp, #20]
   1e204:	orr	r3, r3, #16
   1e208:	strb	r3, [r2, #88]	; 0x58
   1e20c:	tst	r3, #8
   1e210:	bne	1e264 <__assert_fail@plt+0xcd0c>
   1e214:	mov	r3, #0
   1e218:	str	r3, [r2, #96]	; 0x60
   1e21c:	movt	r3, #1023	; 0x3ff
   1e220:	str	r3, [r2, #100]	; 0x64
   1e224:	mvn	r3, #2013265921	; 0x78000001
   1e228:	str	r3, [r2, #104]	; 0x68
   1e22c:	mvn	r3, #-134217727	; 0xf8000001
   1e230:	str	r3, [r2, #108]	; 0x6c
   1e234:	ldrb	r3, [r2, #88]	; 0x58
   1e238:	tst	r3, #4
   1e23c:	moveq	r5, #128	; 0x80
   1e240:	moveq	r3, #4
   1e244:	beq	1e26c <__assert_fail@plt+0xcd14>
   1e248:	ldr	r1, [sp, #20]
   1e24c:	mov	r2, #0
   1e250:	str	r2, [r1, #112]	; 0x70
   1e254:	str	r2, [r1, #116]	; 0x74
   1e258:	str	r2, [r1, #120]	; 0x78
   1e25c:	str	r2, [r1, #124]	; 0x7c
   1e260:	b	1e14c <__assert_fail@plt+0xcbf4>
   1e264:	mov	r5, #0
   1e268:	mov	r3, r5
   1e26c:	add	r3, r3, #24
   1e270:	ldr	r2, [sp, #20]
   1e274:	add	r4, r2, r3, lsl #2
   1e278:	add	r6, r2, #128	; 0x80
   1e27c:	bl	113fc <__ctype_b_loc@plt>
   1e280:	mov	ip, #1
   1e284:	b	1e2d8 <__assert_fail@plt+0xcd80>
   1e288:	ldr	r3, [r4]
   1e28c:	orr	r3, r3, ip, lsl r1
   1e290:	str	r3, [r4]
   1e294:	add	r1, r1, #1
   1e298:	add	r2, r2, #1
   1e29c:	cmp	r1, #32
   1e2a0:	beq	1e2c8 <__assert_fail@plt+0xcd70>
   1e2a4:	ldr	lr, [r0]
   1e2a8:	lsl	r3, r2, #1
   1e2ac:	ldrh	r3, [lr, r3]
   1e2b0:	ubfx	r3, r3, #3, #1
   1e2b4:	cmp	r2, #95	; 0x5f
   1e2b8:	orreq	r3, r3, #1
   1e2bc:	cmp	r3, #0
   1e2c0:	bne	1e288 <__assert_fail@plt+0xcd30>
   1e2c4:	b	1e294 <__assert_fail@plt+0xcd3c>
   1e2c8:	add	r5, r5, #32
   1e2cc:	add	r4, r4, #4
   1e2d0:	cmp	r6, r4
   1e2d4:	beq	1e14c <__assert_fail@plt+0xcbf4>
   1e2d8:	mov	r2, r5
   1e2dc:	mov	r1, #0
   1e2e0:	b	1e2a4 <__assert_fail@plt+0xcd4c>
   1e2e4:	mov	r3, #6
   1e2e8:	str	r3, [r8]
   1e2ec:	mov	r3, r8
   1e2f0:	mov	r2, #0
   1e2f4:	mov	r1, r2
   1e2f8:	ldr	r0, [sp, #20]
   1e2fc:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e300:	mov	r5, r0
   1e304:	mov	r3, #9
   1e308:	str	r3, [r8]
   1e30c:	b	1e18c <__assert_fail@plt+0xcc34>
   1e310:	mov	r3, r8
   1e314:	mov	r2, #0
   1e318:	mov	r1, r2
   1e31c:	ldr	r0, [sp, #20]
   1e320:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e324:	subs	sl, r0, #0
   1e328:	moveq	r3, #12
   1e32c:	streq	r3, [fp]
   1e330:	bne	1e1ec <__assert_fail@plt+0xcc94>
   1e334:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e338:	mov	r3, r8
   1e33c:	mov	r2, #0
   1e340:	mov	r1, r2
   1e344:	ldr	r0, [sp, #20]
   1e348:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e34c:	subs	sl, r0, #0
   1e350:	moveq	r3, #12
   1e354:	streq	r3, [fp]
   1e358:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1e35c:	ldr	r2, [sp, #20]
   1e360:	ldr	r3, [r2, #92]	; 0x5c
   1e364:	cmp	r3, #1
   1e368:	ble	1e0a8 <__assert_fail@plt+0xcb50>
   1e36c:	ldrb	r3, [r2, #88]	; 0x58
   1e370:	orr	r3, r3, #2
   1e374:	strb	r3, [r2, #88]	; 0x58
   1e378:	b	1e0a8 <__assert_fail@plt+0xcb50>
   1e37c:	str	fp, [sp, #4]
   1e380:	cmp	r2, #33	; 0x21
   1e384:	movne	r2, #0
   1e388:	moveq	r2, #1
   1e38c:	str	r2, [sp]
   1e390:	movw	r3, #29096	; 0x71a8
   1e394:	movt	r3, #2
   1e398:	movw	r2, #29024	; 0x7160
   1e39c:	movt	r2, #2
   1e3a0:	ldr	r1, [r0, #64]	; 0x40
   1e3a4:	ldr	r0, [sp, #20]
   1e3a8:	bl	1b734 <__assert_fail@plt+0xa1dc>
   1e3ac:	ldr	r3, [fp]
   1e3b0:	mov	sl, r0
   1e3b4:	clz	r0, r0
   1e3b8:	lsr	r0, r0, #5
   1e3bc:	cmp	r3, #0
   1e3c0:	moveq	r0, #0
   1e3c4:	cmp	r0, #0
   1e3c8:	beq	1e0a8 <__assert_fail@plt+0xcb50>
   1e3cc:	mov	sl, #0
   1e3d0:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e3d4:	str	fp, [sp, #4]
   1e3d8:	cmp	r2, #35	; 0x23
   1e3dc:	movne	r2, #0
   1e3e0:	moveq	r2, #1
   1e3e4:	str	r2, [sp]
   1e3e8:	movw	r3, #26388	; 0x6714
   1e3ec:	movt	r3, #2
   1e3f0:	movw	r2, #29040	; 0x7170
   1e3f4:	movt	r2, #2
   1e3f8:	ldr	r1, [r0, #64]	; 0x40
   1e3fc:	ldr	r0, [sp, #20]
   1e400:	bl	1b734 <__assert_fail@plt+0xa1dc>
   1e404:	ldr	r3, [fp]
   1e408:	mov	sl, r0
   1e40c:	clz	r0, r0
   1e410:	lsr	r0, r0, #5
   1e414:	cmp	r3, #0
   1e418:	moveq	r0, #0
   1e41c:	cmp	r0, #0
   1e420:	beq	1e0a8 <__assert_fail@plt+0xcb50>
   1e424:	mov	sl, #0
   1e428:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e42c:	mov	r3, #5
   1e430:	str	r3, [fp]
   1e434:	mov	sl, #0
   1e438:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e43c:	ldr	r2, [sp, #24]
   1e440:	mov	r1, r8
   1e444:	mov	r0, r9
   1e448:	bl	18e50 <__assert_fail@plt+0x78f8>
   1e44c:	mov	r4, r0
   1e450:	cmn	r0, #1
   1e454:	beq	1e49c <__assert_fail@plt+0xcf44>
   1e458:	cmn	r0, #2
   1e45c:	beq	1e474 <__assert_fail@plt+0xcf1c>
   1e460:	ldrb	r3, [r8, #4]
   1e464:	cmp	r3, #24
   1e468:	beq	1e5a4 <__assert_fail@plt+0xd04c>
   1e46c:	cmp	r3, #1
   1e470:	beq	1e4b8 <__assert_fail@plt+0xcf60>
   1e474:	ldr	r3, [sp, #24]
   1e478:	tst	r3, #2097152	; 0x200000
   1e47c:	bne	1e4d0 <__assert_fail@plt+0xcf78>
   1e480:	ldrb	r3, [r8, #4]
   1e484:	cmp	r3, #2
   1e488:	bne	1e594 <__assert_fail@plt+0xd03c>
   1e48c:	mov	r3, #9
   1e490:	str	r3, [fp]
   1e494:	mov	r6, #0
   1e498:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e49c:	ldrb	r3, [r8, #4]
   1e4a0:	cmp	r3, #1
   1e4a4:	bne	1e4ec <__assert_fail@plt+0xcf94>
   1e4a8:	ldrb	r3, [r8]
   1e4ac:	cmp	r3, #44	; 0x2c
   1e4b0:	moveq	r4, #0
   1e4b4:	bne	1e4ec <__assert_fail@plt+0xcf94>
   1e4b8:	ldrb	r3, [r8]
   1e4bc:	cmp	r3, #44	; 0x2c
   1e4c0:	beq	1e4fc <__assert_fail@plt+0xcfa4>
   1e4c4:	ldr	r3, [sp, #24]
   1e4c8:	tst	r3, #2097152	; 0x200000
   1e4cc:	beq	1e594 <__assert_fail@plt+0xd03c>
   1e4d0:	str	r6, [r9, #40]	; 0x28
   1e4d4:	ldrd	r2, [sp, #128]	; 0x80
   1e4d8:	strd	r2, [r8]
   1e4dc:	mov	r3, #1
   1e4e0:	strb	r3, [r8, #4]
   1e4e4:	mov	r6, sl
   1e4e8:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e4ec:	mov	r3, #10
   1e4f0:	str	r3, [fp]
   1e4f4:	mov	r6, #0
   1e4f8:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e4fc:	ldr	r2, [sp, #24]
   1e500:	mov	r1, r8
   1e504:	mov	r0, r9
   1e508:	bl	18e50 <__assert_fail@plt+0x78f8>
   1e50c:	mov	r7, r0
   1e510:	cmn	r4, #2
   1e514:	cmnne	r0, #2
   1e518:	beq	1e474 <__assert_fail@plt+0xcf1c>
   1e51c:	cmn	r0, #1
   1e520:	cmpne	r4, r0
   1e524:	bgt	1e5ac <__assert_fail@plt+0xd054>
   1e528:	ldrb	r3, [r8, #4]
   1e52c:	cmp	r3, #24
   1e530:	bne	1e5ac <__assert_fail@plt+0xd054>
   1e534:	cmn	r7, #1
   1e538:	beq	1e5bc <__assert_fail@plt+0xd064>
   1e53c:	cmp	r7, #32768	; 0x8000
   1e540:	movlt	r3, #0
   1e544:	movge	r3, #1
   1e548:	cmp	r3, #0
   1e54c:	movne	r3, #15
   1e550:	strne	r3, [fp]
   1e554:	movne	r6, #0
   1e558:	bne	1e650 <__assert_fail@plt+0xd0f8>
   1e55c:	ldr	r2, [sp, #24]
   1e560:	mov	r1, r9
   1e564:	mov	r0, r8
   1e568:	bl	18e28 <__assert_fail@plt+0x78d0>
   1e56c:	cmp	sl, #0
   1e570:	beq	1e70c <__assert_fail@plt+0xd1b4>
   1e574:	orrs	r3, r4, r7
   1e578:	bne	1e5cc <__assert_fail@plt+0xd074>
   1e57c:	mov	r2, #0
   1e580:	ldr	r1, [sp, #36]	; 0x24
   1e584:	mov	r0, sl
   1e588:	bl	16618 <__assert_fail@plt+0x50c0>
   1e58c:	mov	r6, #0
   1e590:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e594:	mov	r3, #10
   1e598:	str	r3, [fp]
   1e59c:	mov	r6, #0
   1e5a0:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e5a4:	mov	r7, r0
   1e5a8:	b	1e528 <__assert_fail@plt+0xcfd0>
   1e5ac:	mov	r3, #10
   1e5b0:	str	r3, [fp]
   1e5b4:	mov	r6, #0
   1e5b8:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e5bc:	cmp	r4, #32768	; 0x8000
   1e5c0:	movlt	r3, #0
   1e5c4:	movge	r3, #1
   1e5c8:	b	1e548 <__assert_fail@plt+0xcff0>
   1e5cc:	cmp	r4, #0
   1e5d0:	ble	1e6e8 <__assert_fail@plt+0xd190>
   1e5d4:	cmp	r4, #1
   1e5d8:	ble	1e6d4 <__assert_fail@plt+0xd17c>
   1e5dc:	str	sl, [sp, #28]
   1e5e0:	mov	r5, sl
   1e5e4:	mov	r6, #2
   1e5e8:	ldr	r1, [sp, #20]
   1e5ec:	mov	r0, r5
   1e5f0:	bl	172f4 <__assert_fail@plt+0x5d9c>
   1e5f4:	mov	r5, r0
   1e5f8:	mov	r3, #16
   1e5fc:	mov	r2, r0
   1e600:	ldr	r1, [sp, #28]
   1e604:	ldr	r0, [sp, #20]
   1e608:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e60c:	str	r0, [sp, #28]
   1e610:	cmp	r0, #0
   1e614:	cmpne	r5, #0
   1e618:	beq	1e644 <__assert_fail@plt+0xd0ec>
   1e61c:	add	r6, r6, #1
   1e620:	cmp	r4, r6
   1e624:	bge	1e5e8 <__assert_fail@plt+0xd090>
   1e628:	cmp	r4, r7
   1e62c:	beq	1e958 <__assert_fail@plt+0xd400>
   1e630:	ldr	r1, [sp, #20]
   1e634:	mov	r0, r5
   1e638:	bl	172f4 <__assert_fail@plt+0x5d9c>
   1e63c:	subs	r5, r0, #0
   1e640:	bne	1e7d0 <__assert_fail@plt+0xd278>
   1e644:	mov	r3, #12
   1e648:	str	r3, [fp]
   1e64c:	mov	r6, #0
   1e650:	ldr	r2, [fp]
   1e654:	clz	r3, r6
   1e658:	lsr	r3, r3, #5
   1e65c:	cmp	r2, #0
   1e660:	moveq	r3, #0
   1e664:	cmp	r3, #0
   1e668:	bne	1e724 <__assert_fail@plt+0xd1cc>
   1e66c:	ldr	r3, [sp, #24]
   1e670:	tst	r3, #16777216	; 0x1000000
   1e674:	beq	1e748 <__assert_fail@plt+0xd1f0>
   1e678:	ldrb	r3, [r8, #4]
   1e67c:	mov	sl, r6
   1e680:	cmp	r3, #23
   1e684:	cmpne	r3, #11
   1e688:	bne	1e74c <__assert_fail@plt+0xd1f4>
   1e68c:	cmp	r6, #0
   1e690:	beq	1e6a8 <__assert_fail@plt+0xd150>
   1e694:	mov	r2, #0
   1e698:	movw	r1, #36780	; 0x8fac
   1e69c:	movt	r1, #1
   1e6a0:	mov	r0, r6
   1e6a4:	bl	16618 <__assert_fail@plt+0x50c0>
   1e6a8:	mov	r3, #13
   1e6ac:	str	r3, [fp]
   1e6b0:	mov	sl, #0
   1e6b4:	mov	r0, sl
   1e6b8:	add	sp, sp, #164	; 0xa4
   1e6bc:	ldrd	r4, [sp]
   1e6c0:	ldrd	r6, [sp, #8]
   1e6c4:	ldrd	r8, [sp, #16]
   1e6c8:	ldrd	sl, [sp, #24]
   1e6cc:	add	sp, sp, #32
   1e6d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6d4:	cmp	r4, r7
   1e6d8:	beq	1e714 <__assert_fail@plt+0xd1bc>
   1e6dc:	str	sl, [sp, #28]
   1e6e0:	mov	r5, sl
   1e6e4:	b	1e630 <__assert_fail@plt+0xd0d8>
   1e6e8:	mov	r5, sl
   1e6ec:	mov	r3, #0
   1e6f0:	str	r3, [sp, #28]
   1e6f4:	b	1e7d0 <__assert_fail@plt+0xd278>
   1e6f8:	ldr	r2, [r5, #20]
   1e6fc:	ldr	r1, [sp, #32]
   1e700:	mov	r0, r5
   1e704:	bl	16618 <__assert_fail@plt+0x50c0>
   1e708:	b	1e7dc <__assert_fail@plt+0xd284>
   1e70c:	mov	r6, sl
   1e710:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e714:	mov	r6, sl
   1e718:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e71c:	mov	r6, sl
   1e720:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e724:	cmp	sl, #0
   1e728:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1e72c:	mov	r2, #0
   1e730:	movw	r1, #36780	; 0x8fac
   1e734:	movt	r1, #1
   1e738:	mov	r0, sl
   1e73c:	bl	16618 <__assert_fail@plt+0x50c0>
   1e740:	mov	sl, #0
   1e744:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e748:	mov	sl, r6
   1e74c:	ldrb	r5, [r8, #4]
   1e750:	cmp	r5, #18
   1e754:	movne	r4, #0
   1e758:	moveq	r4, #1
   1e75c:	cmp	r5, #11
   1e760:	cmpne	r5, #23
   1e764:	moveq	r3, #1
   1e768:	movne	r3, #0
   1e76c:	sub	r2, r5, #18
   1e770:	uxtb	r2, r2
   1e774:	cmp	r2, #1
   1e778:	orrls	r3, r3, #1
   1e77c:	cmp	r3, #0
   1e780:	beq	1e6b4 <__assert_fail@plt+0xd15c>
   1e784:	ldr	r6, [r9, #40]	; 0x28
   1e788:	ldrd	r2, [r8]
   1e78c:	strd	r2, [sp, #128]	; 0x80
   1e790:	cmp	r5, #23
   1e794:	beq	1e43c <__assert_fail@plt+0xcee4>
   1e798:	cmp	r5, #19
   1e79c:	moveq	r7, #1
   1e7a0:	mvnne	r7, #0
   1e7a4:	ldr	r2, [sp, #24]
   1e7a8:	mov	r1, r9
   1e7ac:	mov	r0, r8
   1e7b0:	bl	18e28 <__assert_fail@plt+0x78d0>
   1e7b4:	cmp	sl, #0
   1e7b8:	beq	1e71c <__assert_fail@plt+0xd1c4>
   1e7bc:	cmp	r5, #18
   1e7c0:	beq	1e6d4 <__assert_fail@plt+0xd17c>
   1e7c4:	mov	r5, sl
   1e7c8:	mov	r3, #0
   1e7cc:	str	r3, [sp, #28]
   1e7d0:	ldrb	r3, [r5, #24]
   1e7d4:	cmp	r3, #17
   1e7d8:	beq	1e6f8 <__assert_fail@plt+0xd1a0>
   1e7dc:	cmn	r7, #1
   1e7e0:	moveq	r3, #11
   1e7e4:	movne	r3, #10
   1e7e8:	mov	r2, #0
   1e7ec:	mov	r1, r5
   1e7f0:	ldr	r0, [sp, #20]
   1e7f4:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e7f8:	subs	r6, r0, #0
   1e7fc:	beq	1e644 <__assert_fail@plt+0xd0ec>
   1e800:	add	r4, r4, #2
   1e804:	cmp	r7, r4
   1e808:	blt	1e868 <__assert_fail@plt+0xd310>
   1e80c:	ldr	r1, [sp, #20]
   1e810:	mov	r0, r5
   1e814:	bl	172f4 <__assert_fail@plt+0x5d9c>
   1e818:	mov	r5, r0
   1e81c:	mov	r3, #16
   1e820:	mov	r2, r0
   1e824:	mov	r1, r6
   1e828:	ldr	r6, [sp, #20]
   1e82c:	mov	r0, r6
   1e830:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e834:	mov	r1, r0
   1e838:	cmp	r0, #0
   1e83c:	cmpne	r5, #0
   1e840:	beq	1e644 <__assert_fail@plt+0xd0ec>
   1e844:	mov	r3, #10
   1e848:	mov	r2, #0
   1e84c:	mov	r0, r6
   1e850:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e854:	subs	r6, r0, #0
   1e858:	beq	1e644 <__assert_fail@plt+0xd0ec>
   1e85c:	add	r4, r4, #1
   1e860:	cmp	r7, r4
   1e864:	bge	1e80c <__assert_fail@plt+0xd2b4>
   1e868:	ldr	r3, [sp, #28]
   1e86c:	cmp	r3, #0
   1e870:	beq	1e66c <__assert_fail@plt+0xd114>
   1e874:	mov	r3, #16
   1e878:	mov	r2, r6
   1e87c:	ldr	r1, [sp, #28]
   1e880:	ldr	r0, [sp, #20]
   1e884:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e888:	mov	r6, r0
   1e88c:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e890:	mov	sl, #0
   1e894:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e898:	mov	sl, #0
   1e89c:	b	1e6b4 <__assert_fail@plt+0xd15c>
   1e8a0:	mov	r3, #3
   1e8a4:	strb	r3, [sp, #132]	; 0x84
   1e8a8:	ldr	r3, [sp, #32]
   1e8ac:	str	r3, [sp, #128]	; 0x80
   1e8b0:	add	r3, sp, #128	; 0x80
   1e8b4:	mov	r2, #0
   1e8b8:	mov	r1, r2
   1e8bc:	ldr	r0, [sp, #20]
   1e8c0:	bl	17224 <__assert_fail@plt+0x5ccc>
   1e8c4:	subs	r1, r0, #0
   1e8c8:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1e8cc:	mov	r3, #10
   1e8d0:	mov	r2, sl
   1e8d4:	ldr	r0, [sp, #20]
   1e8d8:	bl	173c0 <__assert_fail@plt+0x5e68>
   1e8dc:	subs	sl, r0, #0
   1e8e0:	bne	1e0a8 <__assert_fail@plt+0xcb50>
   1e8e4:	b	1dfb4 <__assert_fail@plt+0xca5c>
   1e8e8:	ldr	fp, [sp, #204]	; 0xcc
   1e8ec:	mov	r3, #3
   1e8f0:	str	r3, [fp]
   1e8f4:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1e8f8:	ldr	fp, [sp, #204]	; 0xcc
   1e8fc:	mov	r3, #3
   1e900:	str	r3, [fp]
   1e904:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1e908:	mov	r3, #0
   1e90c:	ldr	r2, [sp, #204]	; 0xcc
   1e910:	str	r3, [r2]
   1e914:	b	1dc70 <__assert_fail@plt+0xc718>
   1e918:	ldr	fp, [sp, #204]	; 0xcc
   1e91c:	mov	r3, #11
   1e920:	b	1e92c <__assert_fail@plt+0xd3d4>
   1e924:	ldr	fp, [sp, #204]	; 0xcc
   1e928:	mov	r3, #11
   1e92c:	str	r3, [fp]
   1e930:	b	1d8f8 <__assert_fail@plt+0xc3a0>
   1e934:	ldr	fp, [sp, #204]	; 0xcc
   1e938:	mov	r3, #3
   1e93c:	b	1e92c <__assert_fail@plt+0xd3d4>
   1e940:	ldr	fp, [sp, #204]	; 0xcc
   1e944:	mov	r3, #3
   1e948:	b	1e92c <__assert_fail@plt+0xd3d4>
   1e94c:	ldr	fp, [sp, #204]	; 0xcc
   1e950:	mov	r3, #11
   1e954:	b	1e92c <__assert_fail@plt+0xd3d4>
   1e958:	ldr	r6, [sp, #28]
   1e95c:	b	1e66c <__assert_fail@plt+0xd114>
   1e960:	ldr	r3, [sp, #80]	; 0x50
   1e964:	cmp	r3, #3
   1e968:	cmpne	r3, #0
   1e96c:	bne	1da64 <__assert_fail@plt+0xc50c>
   1e970:	b	1da68 <__assert_fail@plt+0xc510>
   1e974:	ldr	r0, [sp, #84]	; 0x54
   1e978:	bl	11414 <strlen@plt>
   1e97c:	cmp	r0, #1
   1e980:	bls	1dafc <__assert_fail@plt+0xc5a4>
   1e984:	ldr	fp, [sp, #204]	; 0xcc
   1e988:	mov	r3, #3
   1e98c:	b	1e92c <__assert_fail@plt+0xd3d4>
   1e990:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e994:	strd	r6, [sp, #8]
   1e998:	strd	r8, [sp, #16]
   1e99c:	strd	sl, [sp, #24]
   1e9a0:	str	lr, [sp, #32]
   1e9a4:	sub	sp, sp, #20
   1e9a8:	mov	fp, r0
   1e9ac:	mov	r9, r1
   1e9b0:	mov	r8, r2
   1e9b4:	mov	sl, r3
   1e9b8:	ldr	r7, [sp, #56]	; 0x38
   1e9bc:	ldr	r6, [sp, #60]	; 0x3c
   1e9c0:	ldr	ip, [r1]
   1e9c4:	str	ip, [sp, #12]
   1e9c8:	str	r6, [sp, #4]
   1e9cc:	str	r7, [sp]
   1e9d0:	bl	1d52c <__assert_fail@plt+0xbfd4>
   1e9d4:	ldr	r3, [r6]
   1e9d8:	mov	r4, r0
   1e9dc:	clz	r0, r0
   1e9e0:	lsr	r0, r0, #5
   1e9e4:	cmp	r3, #0
   1e9e8:	moveq	r0, #0
   1e9ec:	cmp	r0, #0
   1e9f0:	beq	1ea40 <__assert_fail@plt+0xd4e8>
   1e9f4:	mov	r4, #0
   1e9f8:	b	1eaf4 <__assert_fail@plt+0xd59c>
   1e9fc:	cmp	r4, #0
   1ea00:	beq	1eaf4 <__assert_fail@plt+0xd59c>
   1ea04:	mov	r2, #0
   1ea08:	movw	r1, #36780	; 0x8fac
   1ea0c:	movt	r1, #1
   1ea10:	mov	r0, r4
   1ea14:	bl	16618 <__assert_fail@plt+0x50c0>
   1ea18:	mov	r4, #0
   1ea1c:	b	1eaf4 <__assert_fail@plt+0xd59c>
   1ea20:	mov	r3, #16
   1ea24:	mov	r2, r5
   1ea28:	mov	r1, r4
   1ea2c:	ldr	r0, [sp, #12]
   1ea30:	bl	173c0 <__assert_fail@plt+0x5e68>
   1ea34:	cmp	r0, #0
   1ea38:	beq	1eabc <__assert_fail@plt+0xd564>
   1ea3c:	mov	r4, r0
   1ea40:	ldrb	r2, [r8, #4]
   1ea44:	and	r3, r2, #247	; 0xf7
   1ea48:	cmp	r3, #2
   1ea4c:	beq	1eaf4 <__assert_fail@plt+0xd59c>
   1ea50:	clz	r3, r7
   1ea54:	lsr	r3, r3, #5
   1ea58:	cmp	r2, #9
   1ea5c:	orrne	r3, r3, #1
   1ea60:	cmp	r3, #0
   1ea64:	beq	1eaf4 <__assert_fail@plt+0xd59c>
   1ea68:	str	r6, [sp, #4]
   1ea6c:	str	r7, [sp]
   1ea70:	mov	r3, sl
   1ea74:	mov	r2, r8
   1ea78:	mov	r1, r9
   1ea7c:	mov	r0, fp
   1ea80:	bl	1d52c <__assert_fail@plt+0xbfd4>
   1ea84:	ldr	r3, [r6]
   1ea88:	mov	r5, r0
   1ea8c:	clz	r0, r0
   1ea90:	lsr	r0, r0, #5
   1ea94:	cmp	r3, #0
   1ea98:	moveq	r0, #0
   1ea9c:	cmp	r0, #0
   1eaa0:	bne	1e9fc <__assert_fail@plt+0xd4a4>
   1eaa4:	cmp	r4, #0
   1eaa8:	cmpne	r5, #0
   1eaac:	bne	1ea20 <__assert_fail@plt+0xd4c8>
   1eab0:	cmp	r4, #0
   1eab4:	moveq	r4, r5
   1eab8:	b	1ea40 <__assert_fail@plt+0xd4e8>
   1eabc:	mov	fp, r0
   1eac0:	movw	r7, #36780	; 0x8fac
   1eac4:	movt	r7, #1
   1eac8:	mov	r2, #0
   1eacc:	mov	r1, r7
   1ead0:	mov	r0, r5
   1ead4:	bl	16618 <__assert_fail@plt+0x50c0>
   1ead8:	mov	r2, #0
   1eadc:	mov	r1, r7
   1eae0:	mov	r0, r4
   1eae4:	bl	16618 <__assert_fail@plt+0x50c0>
   1eae8:	mov	r3, #12
   1eaec:	str	r3, [r6]
   1eaf0:	mov	r4, fp
   1eaf4:	mov	r0, r4
   1eaf8:	add	sp, sp, #20
   1eafc:	ldrd	r4, [sp]
   1eb00:	ldrd	r6, [sp, #8]
   1eb04:	ldrd	r8, [sp, #16]
   1eb08:	ldrd	sl, [sp, #24]
   1eb0c:	add	sp, sp, #32
   1eb10:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eb18:	strd	r6, [sp, #8]
   1eb1c:	strd	r8, [sp, #16]
   1eb20:	strd	sl, [sp, #24]
   1eb24:	str	lr, [sp, #32]
   1eb28:	sub	sp, sp, #28
   1eb2c:	str	r0, [sp, #12]
   1eb30:	str	r1, [sp, #16]
   1eb34:	mov	r4, r2
   1eb38:	mov	r9, r3
   1eb3c:	str	r3, [sp, #20]
   1eb40:	ldr	r8, [sp, #64]	; 0x40
   1eb44:	ldr	r7, [sp, #68]	; 0x44
   1eb48:	ldr	r5, [r1]
   1eb4c:	ldr	fp, [r5, #84]	; 0x54
   1eb50:	str	r7, [sp, #4]
   1eb54:	str	r8, [sp]
   1eb58:	bl	1e990 <__assert_fail@plt+0xd438>
   1eb5c:	ldr	r3, [r7]
   1eb60:	mov	r6, r0
   1eb64:	clz	r0, r0
   1eb68:	lsr	r0, r0, #5
   1eb6c:	cmp	r3, #0
   1eb70:	moveq	r0, #0
   1eb74:	cmp	r0, #0
   1eb78:	bne	1ec8c <__assert_fail@plt+0xd734>
   1eb7c:	orr	r9, r9, #8388608	; 0x800000
   1eb80:	b	1ebc4 <__assert_fail@plt+0xd66c>
   1eb84:	cmp	r6, #0
   1eb88:	beq	1ec6c <__assert_fail@plt+0xd714>
   1eb8c:	mov	r2, #0
   1eb90:	movw	r1, #36780	; 0x8fac
   1eb94:	movt	r1, #1
   1eb98:	mov	r0, r6
   1eb9c:	bl	16618 <__assert_fail@plt+0x50c0>
   1eba0:	mov	r6, #0
   1eba4:	b	1ec6c <__assert_fail@plt+0xd714>
   1eba8:	mov	r2, #0
   1ebac:	mov	r3, #10
   1ebb0:	mov	r1, r6
   1ebb4:	mov	r0, r5
   1ebb8:	bl	173c0 <__assert_fail@plt+0x5e68>
   1ebbc:	subs	r6, r0, #0
   1ebc0:	beq	1ec64 <__assert_fail@plt+0xd70c>
   1ebc4:	ldrb	r3, [r4, #4]
   1ebc8:	cmp	r3, #10
   1ebcc:	bne	1ec6c <__assert_fail@plt+0xd714>
   1ebd0:	mov	r2, r9
   1ebd4:	ldr	r1, [sp, #12]
   1ebd8:	mov	r0, r4
   1ebdc:	bl	18e28 <__assert_fail@plt+0x78d0>
   1ebe0:	ldrb	r2, [r4, #4]
   1ebe4:	and	r3, r2, #247	; 0xf7
   1ebe8:	cmp	r3, #2
   1ebec:	beq	1eba8 <__assert_fail@plt+0xd650>
   1ebf0:	clz	r3, r8
   1ebf4:	lsr	r3, r3, #5
   1ebf8:	cmp	r2, #9
   1ebfc:	orrne	r3, r3, #1
   1ec00:	cmp	r3, #0
   1ec04:	beq	1ec5c <__assert_fail@plt+0xd704>
   1ec08:	ldr	sl, [r5, #84]	; 0x54
   1ec0c:	str	fp, [r5, #84]	; 0x54
   1ec10:	str	r7, [sp, #4]
   1ec14:	str	r8, [sp]
   1ec18:	ldr	r3, [sp, #20]
   1ec1c:	mov	r2, r4
   1ec20:	ldr	r1, [sp, #16]
   1ec24:	ldr	r0, [sp, #12]
   1ec28:	bl	1e990 <__assert_fail@plt+0xd438>
   1ec2c:	ldr	r3, [r7]
   1ec30:	mov	r2, r0
   1ec34:	clz	r0, r0
   1ec38:	lsr	r0, r0, #5
   1ec3c:	cmp	r3, #0
   1ec40:	moveq	r0, #0
   1ec44:	cmp	r0, #0
   1ec48:	bne	1eb84 <__assert_fail@plt+0xd62c>
   1ec4c:	ldr	r3, [r5, #84]	; 0x54
   1ec50:	orr	sl, r3, sl
   1ec54:	str	sl, [r5, #84]	; 0x54
   1ec58:	b	1ebac <__assert_fail@plt+0xd654>
   1ec5c:	mov	r2, #0
   1ec60:	b	1ebac <__assert_fail@plt+0xd654>
   1ec64:	mov	r3, #12
   1ec68:	str	r3, [r7]
   1ec6c:	mov	r0, r6
   1ec70:	add	sp, sp, #28
   1ec74:	ldrd	r4, [sp]
   1ec78:	ldrd	r6, [sp, #8]
   1ec7c:	ldrd	r8, [sp, #16]
   1ec80:	ldrd	sl, [sp, #24]
   1ec84:	add	sp, sp, #32
   1ec88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec8c:	mov	r6, #0
   1ec90:	b	1ec6c <__assert_fail@plt+0xd714>
   1ec94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ec98:	strd	r6, [sp, #8]
   1ec9c:	strd	r8, [sp, #16]
   1eca0:	strd	sl, [sp, #24]
   1eca4:	str	lr, [sp, #32]
   1eca8:	sub	sp, sp, #4
   1ecac:	mov	r3, #0
   1ecb0:	str	r3, [r0]
   1ecb4:	ldr	lr, [r2, #4]
   1ecb8:	cmp	lr, r3
   1ecbc:	beq	1eeb8 <__assert_fail@plt+0xd960>
   1ecc0:	mov	r6, lr
   1ecc4:	ble	1ece0 <__assert_fail@plt+0xd788>
   1ecc8:	ldr	r3, [r2, #8]
   1eccc:	add	lr, r3, lr, lsl #2
   1ecd0:	ldr	ip, [r3], #4
   1ecd4:	add	r6, r6, ip
   1ecd8:	cmp	r3, lr
   1ecdc:	bne	1ecd0 <__assert_fail@plt+0xd778>
   1ece0:	mov	fp, r2
   1ece4:	mov	r9, r1
   1ece8:	mov	sl, r0
   1ecec:	ldr	r3, [r1, #68]	; 0x44
   1ecf0:	and	r3, r3, r6
   1ecf4:	add	r3, r3, r3, lsl #1
   1ecf8:	lsl	r3, r3, #2
   1ecfc:	ldr	r2, [r1, #32]
   1ed00:	add	r1, r2, r3
   1ed04:	ldr	r8, [r2, r3]
   1ed08:	cmp	r8, #0
   1ed0c:	ble	1ed54 <__assert_fail@plt+0xd7fc>
   1ed10:	ldr	r7, [r1, #8]
   1ed14:	sub	r7, r7, #4
   1ed18:	mov	r5, #0
   1ed1c:	b	1ed2c <__assert_fail@plt+0xd7d4>
   1ed20:	add	r5, r5, #1
   1ed24:	cmp	r8, r5
   1ed28:	beq	1ed54 <__assert_fail@plt+0xd7fc>
   1ed2c:	ldr	r4, [r7, #4]!
   1ed30:	ldr	r3, [r4]
   1ed34:	cmp	r6, r3
   1ed38:	bne	1ed20 <__assert_fail@plt+0xd7c8>
   1ed3c:	mov	r1, fp
   1ed40:	add	r0, r4, #4
   1ed44:	bl	164c8 <__assert_fail@plt+0x4f70>
   1ed48:	cmp	r0, #0
   1ed4c:	beq	1ed20 <__assert_fail@plt+0xd7c8>
   1ed50:	b	1ee8c <__assert_fail@plt+0xd934>
   1ed54:	mov	r1, #1
   1ed58:	mov	r0, #56	; 0x38
   1ed5c:	bl	25880 <__assert_fail@plt+0x14328>
   1ed60:	subs	r4, r0, #0
   1ed64:	beq	1edb0 <__assert_fail@plt+0xd858>
   1ed68:	add	r5, r4, #4
   1ed6c:	mov	r1, fp
   1ed70:	mov	r0, r5
   1ed74:	bl	17b1c <__assert_fail@plt+0x65c4>
   1ed78:	cmp	r0, #0
   1ed7c:	bne	1eda8 <__assert_fail@plt+0xd850>
   1ed80:	str	r5, [r4, #40]	; 0x28
   1ed84:	ldr	lr, [fp, #4]
   1ed88:	cmp	lr, #0
   1ed8c:	ble	1ee74 <__assert_fail@plt+0xd91c>
   1ed90:	ldr	r5, [r9]
   1ed94:	ldr	r1, [fp, #8]
   1ed98:	add	lr, r1, lr, lsl #2
   1ed9c:	mov	r7, #65280	; 0xff00
   1eda0:	movt	r7, #3
   1eda4:	b	1ee0c <__assert_fail@plt+0xd8b4>
   1eda8:	mov	r0, r4
   1edac:	bl	13eac <__assert_fail@plt+0x2954>
   1edb0:	mov	r3, #12
   1edb4:	str	r3, [sl]
   1edb8:	mov	r4, #0
   1edbc:	b	1ee8c <__assert_fail@plt+0xd934>
   1edc0:	ldr	r2, [r3, #4]
   1edc4:	tst	r7, r2
   1edc8:	beq	1ee04 <__assert_fail@plt+0xd8ac>
   1edcc:	ldrb	r2, [r4, #52]	; 0x34
   1edd0:	ubfx	r0, r2, #5, #1
   1edd4:	ldrb	ip, [r3, #6]
   1edd8:	ubfx	ip, ip, #4, #1
   1eddc:	orr	r0, r0, ip
   1ede0:	bfi	r2, r0, #5, #1
   1ede4:	strb	r2, [r4, #52]	; 0x34
   1ede8:	ldr	r3, [r3, #4]
   1edec:	tst	r7, r3
   1edf0:	beq	1ee04 <__assert_fail@plt+0xd8ac>
   1edf4:	b	1ee64 <__assert_fail@plt+0xd90c>
   1edf8:	uxtb	r3, r2
   1edfc:	orr	r3, r3, #16
   1ee00:	strb	r3, [r4, #52]	; 0x34
   1ee04:	cmp	r1, lr
   1ee08:	beq	1ee74 <__assert_fail@plt+0xd91c>
   1ee0c:	ldr	r3, [r1], #4
   1ee10:	add	r3, r5, r3, lsl #3
   1ee14:	ldrb	r0, [r3, #4]
   1ee18:	cmp	r0, #1
   1ee1c:	beq	1edc0 <__assert_fail@plt+0xd868>
   1ee20:	ldrb	r2, [r4, #52]	; 0x34
   1ee24:	ubfx	ip, r2, #5, #1
   1ee28:	ldrb	r8, [r3, #6]
   1ee2c:	ubfx	r8, r8, #4, #1
   1ee30:	orr	ip, ip, r8
   1ee34:	bfi	r2, ip, #5, #1
   1ee38:	strb	r2, [r4, #52]	; 0x34
   1ee3c:	cmp	r0, #2
   1ee40:	beq	1edf8 <__assert_fail@plt+0xd8a0>
   1ee44:	cmp	r0, #4
   1ee48:	bne	1ee5c <__assert_fail@plt+0xd904>
   1ee4c:	ldrb	r3, [r4, #52]	; 0x34
   1ee50:	orr	r3, r3, #64	; 0x40
   1ee54:	strb	r3, [r4, #52]	; 0x34
   1ee58:	b	1ee04 <__assert_fail@plt+0xd8ac>
   1ee5c:	cmp	r0, #12
   1ee60:	bne	1ede8 <__assert_fail@plt+0xd890>
   1ee64:	ldrb	r3, [r4, #52]	; 0x34
   1ee68:	orr	r3, r3, #128	; 0x80
   1ee6c:	strb	r3, [r4, #52]	; 0x34
   1ee70:	b	1ee04 <__assert_fail@plt+0xd8ac>
   1ee74:	mov	r2, r6
   1ee78:	mov	r1, r4
   1ee7c:	mov	r0, r9
   1ee80:	bl	1768c <__assert_fail@plt+0x6134>
   1ee84:	cmp	r0, #0
   1ee88:	bne	1eeac <__assert_fail@plt+0xd954>
   1ee8c:	mov	r0, r4
   1ee90:	add	sp, sp, #4
   1ee94:	ldrd	r4, [sp]
   1ee98:	ldrd	r6, [sp, #8]
   1ee9c:	ldrd	r8, [sp, #16]
   1eea0:	ldrd	sl, [sp, #24]
   1eea4:	add	sp, sp, #32
   1eea8:	pop	{pc}		; (ldr pc, [sp], #4)
   1eeac:	mov	r0, r4
   1eeb0:	bl	19310 <__assert_fail@plt+0x7db8>
   1eeb4:	b	1edb0 <__assert_fail@plt+0xd858>
   1eeb8:	mov	r4, #0
   1eebc:	b	1ee8c <__assert_fail@plt+0xd934>
   1eec0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1eec4:	strd	r6, [sp, #8]
   1eec8:	strd	r8, [sp, #16]
   1eecc:	str	lr, [sp, #24]
   1eed0:	sub	sp, sp, #20
   1eed4:	subs	r8, r3, #0
   1eed8:	ble	1ef84 <__assert_fail@plt+0xda2c>
   1eedc:	mov	r7, r2
   1eee0:	mov	r9, r0
   1eee4:	sub	r4, r1, #4
   1eee8:	mov	r5, #0
   1eeec:	b	1ef04 <__assert_fail@plt+0xd9ac>
   1eef0:	ldr	r3, [r7, r5, lsl #2]
   1eef4:	str	r3, [r4]
   1eef8:	add	r5, r5, #1
   1eefc:	cmp	r8, r5
   1ef00:	beq	1ef68 <__assert_fail@plt+0xda10>
   1ef04:	add	r4, r4, #4
   1ef08:	ldr	r1, [r4]
   1ef0c:	cmp	r1, #0
   1ef10:	beq	1eef0 <__assert_fail@plt+0xd998>
   1ef14:	ldr	r2, [r7, r5, lsl #2]
   1ef18:	cmp	r2, #0
   1ef1c:	beq	1eef8 <__assert_fail@plt+0xd9a0>
   1ef20:	add	r2, r2, #4
   1ef24:	add	r1, r1, #4
   1ef28:	mov	r0, sp
   1ef2c:	bl	17ba4 <__assert_fail@plt+0x664c>
   1ef30:	str	r0, [sp, #12]
   1ef34:	cmp	r0, #0
   1ef38:	bne	1ef6c <__assert_fail@plt+0xda14>
   1ef3c:	mov	r2, sp
   1ef40:	mov	r1, r9
   1ef44:	add	r0, sp, #12
   1ef48:	bl	1ec94 <__assert_fail@plt+0xd73c>
   1ef4c:	str	r0, [r4]
   1ef50:	ldr	r0, [sp, #8]
   1ef54:	bl	13eac <__assert_fail@plt+0x2954>
   1ef58:	ldr	r0, [sp, #12]
   1ef5c:	cmp	r0, #0
   1ef60:	beq	1eef8 <__assert_fail@plt+0xd9a0>
   1ef64:	b	1ef6c <__assert_fail@plt+0xda14>
   1ef68:	mov	r0, #0
   1ef6c:	add	sp, sp, #20
   1ef70:	ldrd	r4, [sp]
   1ef74:	ldrd	r6, [sp, #8]
   1ef78:	ldrd	r8, [sp, #16]
   1ef7c:	add	sp, sp, #24
   1ef80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef84:	mov	r0, #0
   1ef88:	b	1ef6c <__assert_fail@plt+0xda14>
   1ef8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ef90:	strd	r6, [sp, #8]
   1ef94:	strd	r8, [sp, #16]
   1ef98:	strd	sl, [sp, #24]
   1ef9c:	str	lr, [sp, #32]
   1efa0:	sub	sp, sp, #28
   1efa4:	mov	r8, r0
   1efa8:	str	r1, [sp]
   1efac:	mov	r7, r2
   1efb0:	str	r3, [sp, #4]
   1efb4:	mov	r1, r2
   1efb8:	bl	16f28 <__assert_fail@plt+0x59d0>
   1efbc:	cmn	r0, #1
   1efc0:	moveq	r0, #0
   1efc4:	beq	1f194 <__assert_fail@plt+0xdc3c>
   1efc8:	ldr	r9, [r8, #84]	; 0x54
   1efcc:	add	r0, r0, #1
   1efd0:	add	r0, r0, r0, lsl #1
   1efd4:	lsl	fp, r0, #3
   1efd8:	b	1f058 <__assert_fail@plt+0xdb00>
   1efdc:	ldr	r3, [r9, #20]
   1efe0:	add	r6, r6, r6, lsl #1
   1efe4:	add	r6, r3, r6, lsl #2
   1efe8:	ldr	r3, [r6, #8]
   1efec:	ldr	r5, [r3]
   1eff0:	mov	r1, r5
   1eff4:	ldr	r6, [sp]
   1eff8:	mov	r0, r6
   1effc:	bl	16530 <__assert_fail@plt+0x4fd8>
   1f000:	cmp	r0, #0
   1f004:	bne	1f0c4 <__assert_fail@plt+0xdb6c>
   1f008:	mov	r1, r5
   1f00c:	add	r0, sp, #8
   1f010:	bl	175f8 <__assert_fail@plt+0x60a0>
   1f014:	str	r0, [sp, #20]
   1f018:	ldr	r3, [sp, #64]	; 0x40
   1f01c:	ldr	r2, [sp, #4]
   1f020:	add	r1, sp, #8
   1f024:	mov	r0, r9
   1f028:	bl	1a99c <__assert_fail@plt+0x9444>
   1f02c:	mov	r4, r0
   1f030:	add	r1, sp, #8
   1f034:	mov	r0, r6
   1f038:	bl	1a150 <__assert_fail@plt+0x8bf8>
   1f03c:	mov	r5, r0
   1f040:	ldr	r0, [sp, #16]
   1f044:	bl	13eac <__assert_fail@plt+0x2954>
   1f048:	ldr	r0, [sp, #20]
   1f04c:	orr	r3, r4, r5
   1f050:	orrs	r3, r3, r0
   1f054:	bne	1f064 <__assert_fail@plt+0xdb0c>
   1f058:	ldr	r4, [r8, #116]	; 0x74
   1f05c:	add	r4, r4, fp
   1f060:	b	1f0d4 <__assert_fail@plt+0xdb7c>
   1f064:	cmp	r0, #0
   1f068:	bne	1f194 <__assert_fail@plt+0xdc3c>
   1f06c:	cmp	r4, #0
   1f070:	movne	r0, r4
   1f074:	moveq	r0, r5
   1f078:	b	1f194 <__assert_fail@plt+0xdc3c>
   1f07c:	mov	r1, sl
   1f080:	add	r0, sp, #8
   1f084:	bl	175f8 <__assert_fail@plt+0x60a0>
   1f088:	str	r0, [sp, #20]
   1f08c:	cmp	r0, #0
   1f090:	bne	1f194 <__assert_fail@plt+0xdc3c>
   1f094:	ldr	r6, [r8, #100]	; 0x64
   1f098:	add	r2, sp, #8
   1f09c:	mov	r1, r9
   1f0a0:	add	r0, sp, #20
   1f0a4:	bl	1ec94 <__assert_fail@plt+0xd73c>
   1f0a8:	str	r0, [r6, r5, lsl #2]
   1f0ac:	ldr	r0, [sp, #16]
   1f0b0:	bl	13eac <__assert_fail@plt+0x2954>
   1f0b4:	ldr	r3, [r8, #100]	; 0x64
   1f0b8:	ldr	r3, [r3, r5, lsl #2]
   1f0bc:	cmp	r3, #0
   1f0c0:	beq	1f180 <__assert_fail@plt+0xdc28>
   1f0c4:	add	r4, r4, #24
   1f0c8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1f0cc:	cmp	r3, #0
   1f0d0:	beq	1f190 <__assert_fail@plt+0xdc38>
   1f0d4:	ldr	r6, [r4, #-24]	; 0xffffffe8
   1f0d8:	mov	r1, r6
   1f0dc:	ldr	r0, [sp]
   1f0e0:	bl	16530 <__assert_fail@plt+0x4fd8>
   1f0e4:	cmp	r0, #0
   1f0e8:	beq	1f0c4 <__assert_fail@plt+0xdb6c>
   1f0ec:	ldr	r5, [r4, #-12]
   1f0f0:	add	r5, r7, r5
   1f0f4:	ldr	r3, [r4, #-16]
   1f0f8:	sub	r5, r5, r3
   1f0fc:	cmp	r7, r5
   1f100:	beq	1efdc <__assert_fail@plt+0xda84>
   1f104:	ldr	r3, [r9, #12]
   1f108:	ldr	sl, [r3, r6, lsl #2]
   1f10c:	ldr	r3, [r8, #100]	; 0x64
   1f110:	ldr	r6, [r3, r5, lsl #2]
   1f114:	cmp	r6, #0
   1f118:	beq	1f07c <__assert_fail@plt+0xdb24>
   1f11c:	add	r6, r6, #4
   1f120:	mov	r1, sl
   1f124:	mov	r0, r6
   1f128:	bl	16530 <__assert_fail@plt+0x4fd8>
   1f12c:	cmp	r0, #0
   1f130:	bne	1f0c4 <__assert_fail@plt+0xdb6c>
   1f134:	mov	r1, r6
   1f138:	add	r0, sp, #8
   1f13c:	bl	17b1c <__assert_fail@plt+0x65c4>
   1f140:	str	r0, [sp, #20]
   1f144:	mov	r1, sl
   1f148:	add	r0, sp, #8
   1f14c:	bl	19bb8 <__assert_fail@plt+0x8660>
   1f150:	eor	r0, r0, #1
   1f154:	ldr	r3, [sp, #20]
   1f158:	cmp	r3, #0
   1f15c:	orrne	r0, r0, #1
   1f160:	tst	r0, #255	; 0xff
   1f164:	beq	1f094 <__assert_fail@plt+0xdb3c>
   1f168:	ldr	r0, [sp, #16]
   1f16c:	bl	13eac <__assert_fail@plt+0x2954>
   1f170:	ldr	r0, [sp, #20]
   1f174:	cmp	r0, #0
   1f178:	moveq	r0, #12
   1f17c:	b	1f194 <__assert_fail@plt+0xdc3c>
   1f180:	ldr	r0, [sp, #20]
   1f184:	cmp	r0, #0
   1f188:	beq	1f0c4 <__assert_fail@plt+0xdb6c>
   1f18c:	b	1f194 <__assert_fail@plt+0xdc3c>
   1f190:	mov	r0, #0
   1f194:	add	sp, sp, #28
   1f198:	ldrd	r4, [sp]
   1f19c:	ldrd	r6, [sp, #8]
   1f1a0:	ldrd	r8, [sp, #16]
   1f1a4:	ldrd	sl, [sp, #24]
   1f1a8:	add	sp, sp, #32
   1f1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f1b4:	strd	r6, [sp, #8]
   1f1b8:	strd	r8, [sp, #16]
   1f1bc:	strd	sl, [sp, #24]
   1f1c0:	str	lr, [sp, #32]
   1f1c4:	sub	sp, sp, #84	; 0x54
   1f1c8:	mov	r4, r0
   1f1cc:	str	r1, [sp, #32]
   1f1d0:	mov	r7, r2
   1f1d4:	mov	r6, r3
   1f1d8:	ldr	r3, [r0, #84]	; 0x54
   1f1dc:	mov	r2, r3
   1f1e0:	str	r3, [sp, #24]
   1f1e4:	mov	r3, #0
   1f1e8:	str	r3, [sp, #76]	; 0x4c
   1f1ec:	ldr	r3, [r2]
   1f1f0:	ldr	r3, [r3, r7, lsl #3]
   1f1f4:	str	r3, [sp, #28]
   1f1f8:	ldr	r5, [r0, #120]	; 0x78
   1f1fc:	ldr	r3, [sp, #124]	; 0x7c
   1f200:	add	r5, r3, r5
   1f204:	ldr	r8, [r1, #4]
   1f208:	cmp	r5, r8
   1f20c:	bge	1f35c <__assert_fail@plt+0xde04>
   1f210:	ldr	r3, [sp, #32]
   1f214:	ldr	r5, [r3]
   1f218:	cmp	r5, #0
   1f21c:	beq	1f788 <__assert_fail@plt+0xe230>
   1f220:	ldr	r2, [r4, #100]	; 0x64
   1f224:	str	r2, [sp, #40]	; 0x28
   1f228:	ldr	r2, [r4, #40]	; 0x28
   1f22c:	str	r2, [sp, #44]	; 0x2c
   1f230:	ldr	r9, [r3, #8]
   1f234:	str	r9, [r4, #100]	; 0x64
   1f238:	str	r5, [r4, #40]	; 0x28
   1f23c:	str	r4, [sp, #12]
   1f240:	ldr	r2, [r4, #88]	; 0x58
   1f244:	sub	r1, r5, #1
   1f248:	mov	r0, r4
   1f24c:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1f250:	mov	r8, r0
   1f254:	cmp	r5, r6
   1f258:	beq	1f7c0 <__assert_fail@plt+0xe268>
   1f25c:	ldr	sl, [r9, r5, lsl #2]
   1f260:	cmp	sl, #0
   1f264:	beq	1f80c <__assert_fail@plt+0xe2b4>
   1f268:	ldrb	r3, [sl, #52]	; 0x34
   1f26c:	tst	r3, #64	; 0x40
   1f270:	bne	1f3b4 <__assert_fail@plt+0xde5c>
   1f274:	mov	r3, #0
   1f278:	str	r3, [sp, #64]	; 0x40
   1f27c:	str	r3, [sp, #68]	; 0x44
   1f280:	str	r3, [sp, #72]	; 0x48
   1f284:	ldrb	r3, [sl, #52]	; 0x34
   1f288:	tst	r3, #64	; 0x40
   1f28c:	beq	1f2e8 <__assert_fail@plt+0xdd90>
   1f290:	ldr	r3, [sp, #68]	; 0x44
   1f294:	cmp	r3, #0
   1f298:	beq	1f2c4 <__assert_fail@plt+0xdd6c>
   1f29c:	ldr	r3, [sp, #128]	; 0x80
   1f2a0:	str	r3, [sp]
   1f2a4:	ldr	r3, [sp, #28]
   1f2a8:	mov	r2, r5
   1f2ac:	add	r1, sp, #64	; 0x40
   1f2b0:	mov	r0, r4
   1f2b4:	bl	1ef8c <__assert_fail@plt+0xda34>
   1f2b8:	str	r0, [sp, #76]	; 0x4c
   1f2bc:	cmp	r0, #0
   1f2c0:	bne	1f3d0 <__assert_fail@plt+0xde78>
   1f2c4:	mov	r3, r8
   1f2c8:	add	r2, sp, #64	; 0x40
   1f2cc:	ldr	r1, [sp, #24]
   1f2d0:	add	r0, sp, #76	; 0x4c
   1f2d4:	bl	19378 <__assert_fail@plt+0x7e20>
   1f2d8:	subs	sl, r0, #0
   1f2dc:	beq	1f3e0 <__assert_fail@plt+0xde88>
   1f2e0:	ldr	r3, [r4, #100]	; 0x64
   1f2e4:	str	sl, [r3, r5, lsl #2]
   1f2e8:	ldr	r3, [sp, #124]	; 0x7c
   1f2ec:	cmp	r3, r5
   1f2f0:	ble	1f310 <__assert_fail@plt+0xddb8>
   1f2f4:	ldr	r3, [r4, #120]	; 0x78
   1f2f8:	cmp	r3, #0
   1f2fc:	addge	r7, r5, #1
   1f300:	movge	r3, #0
   1f304:	strge	r3, [sp, #16]
   1f308:	movge	r9, r3
   1f30c:	bge	1f5f4 <__assert_fail@plt+0xe09c>
   1f310:	ldr	r0, [sp, #72]	; 0x48
   1f314:	bl	13eac <__assert_fail@plt+0x2954>
   1f318:	ldr	r3, [r4, #100]	; 0x64
   1f31c:	ldr	r2, [sp, #124]	; 0x7c
   1f320:	ldr	r0, [r3, r2, lsl #2]
   1f324:	cmp	r0, #0
   1f328:	beq	1f758 <__assert_fail@plt+0xe200>
   1f32c:	ldr	r3, [sp, #32]
   1f330:	str	r5, [r3]
   1f334:	ldr	r3, [sp, #40]	; 0x28
   1f338:	str	r3, [r4, #100]	; 0x64
   1f33c:	ldr	r3, [sp, #44]	; 0x2c
   1f340:	str	r3, [r4, #40]	; 0x28
   1f344:	ldr	r1, [sp, #120]	; 0x78
   1f348:	add	r0, r0, #4
   1f34c:	bl	16530 <__assert_fail@plt+0x4fd8>
   1f350:	clz	r0, r0
   1f354:	lsr	r0, r0, #5
   1f358:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f35c:	add	r5, r5, #1
   1f360:	movw	r3, #65535	; 0xffff
   1f364:	movt	r3, #32767	; 0x7fff
   1f368:	sub	r3, r3, r8
   1f36c:	cmp	r3, r5
   1f370:	blt	1f740 <__assert_fail@plt+0xe1e8>
   1f374:	add	r9, r8, r5
   1f378:	cmn	r9, #-1073741823	; 0xc0000001
   1f37c:	bhi	1f748 <__assert_fail@plt+0xe1f0>
   1f380:	lsl	r1, r9, #2
   1f384:	ldr	sl, [sp, #32]
   1f388:	ldr	r0, [sl, #8]
   1f38c:	bl	25930 <__assert_fail@plt+0x143d8>
   1f390:	cmp	r0, #0
   1f394:	beq	1f750 <__assert_fail@plt+0xe1f8>
   1f398:	str	r0, [sl, #8]
   1f39c:	str	r9, [sl, #4]
   1f3a0:	lsl	r2, r5, #2
   1f3a4:	mov	r1, #0
   1f3a8:	add	r0, r0, r8, lsl #2
   1f3ac:	bl	1145c <memset@plt>
   1f3b0:	b	1f210 <__assert_fail@plt+0xdcb8>
   1f3b4:	add	r1, sl, #4
   1f3b8:	add	r0, sp, #64	; 0x40
   1f3bc:	bl	17b1c <__assert_fail@plt+0x65c4>
   1f3c0:	str	r0, [sp, #76]	; 0x4c
   1f3c4:	cmp	r0, #0
   1f3c8:	beq	1f284 <__assert_fail@plt+0xdd2c>
   1f3cc:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f3d0:	ldr	r0, [sp, #72]	; 0x48
   1f3d4:	bl	13eac <__assert_fail@plt+0x2954>
   1f3d8:	ldr	r0, [sp, #76]	; 0x4c
   1f3dc:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f3e0:	ldr	r3, [sp, #76]	; 0x4c
   1f3e4:	cmp	r3, #0
   1f3e8:	beq	1f2e0 <__assert_fail@plt+0xdd88>
   1f3ec:	ldr	r0, [sp, #72]	; 0x48
   1f3f0:	bl	13eac <__assert_fail@plt+0x2954>
   1f3f4:	ldr	r0, [sp, #76]	; 0x4c
   1f3f8:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f3fc:	ldr	r0, [sp, #72]	; 0x48
   1f400:	bl	13eac <__assert_fail@plt+0x2954>
   1f404:	ldr	r0, [sp, #76]	; 0x4c
   1f408:	add	sp, sp, #84	; 0x54
   1f40c:	ldrd	r4, [sp]
   1f410:	ldrd	r6, [sp, #8]
   1f414:	ldrd	r8, [sp, #16]
   1f418:	ldrd	sl, [sp, #24]
   1f41c:	add	sp, sp, #32
   1f420:	pop	{pc}		; (ldr pc, [sp], #4)
   1f424:	ldr	r5, [sp, #8]
   1f428:	mov	r3, r5
   1f42c:	ldr	r2, [sp, #12]
   1f430:	mov	r0, r6
   1f434:	bl	1b96c <__assert_fail@plt+0xa414>
   1f438:	cmp	r0, #1
   1f43c:	ble	1f6a8 <__assert_fail@plt+0xe150>
   1f440:	ldr	r3, [r6, #12]
   1f444:	ldr	fp, [r3, r7, lsl #2]
   1f448:	add	r5, r5, r0
   1f44c:	ldr	r3, [r4, #100]	; 0x64
   1f450:	ldr	r1, [r3, r5, lsl #2]
   1f454:	str	r9, [sp, #56]	; 0x38
   1f458:	cmp	r1, #0
   1f45c:	beq	1f478 <__assert_fail@plt+0xdf20>
   1f460:	add	r1, r1, #4
   1f464:	add	r0, sp, #52	; 0x34
   1f468:	bl	1a150 <__assert_fail@plt+0x8bf8>
   1f46c:	str	r0, [sp, #48]	; 0x30
   1f470:	cmp	r0, #0
   1f474:	bne	1f520 <__assert_fail@plt+0xdfc8>
   1f478:	mov	r1, fp
   1f47c:	add	r0, sp, #52	; 0x34
   1f480:	bl	19bb8 <__assert_fail@plt+0x8660>
   1f484:	cmp	r0, #0
   1f488:	beq	1f67c <__assert_fail@plt+0xe124>
   1f48c:	ldr	fp, [r4, #100]	; 0x64
   1f490:	add	r2, sp, #52	; 0x34
   1f494:	mov	r1, r6
   1f498:	add	r0, sp, #48	; 0x30
   1f49c:	bl	1ec94 <__assert_fail@plt+0xd73c>
   1f4a0:	str	r0, [fp, r5, lsl #2]
   1f4a4:	ldr	r3, [r4, #100]	; 0x64
   1f4a8:	ldr	r3, [r3, r5, lsl #2]
   1f4ac:	cmp	r3, #0
   1f4b0:	beq	1f688 <__assert_fail@plt+0xe130>
   1f4b4:	ldr	r3, [r6, #12]
   1f4b8:	ldr	r1, [r3, r7, lsl #2]
   1f4bc:	add	r0, sp, #64	; 0x40
   1f4c0:	bl	19bb8 <__assert_fail@plt+0x8660>
   1f4c4:	cmp	r0, #0
   1f4c8:	beq	1f6b4 <__assert_fail@plt+0xe15c>
   1f4cc:	add	r8, r8, #1
   1f4d0:	ldr	r3, [sl, #20]
   1f4d4:	cmp	r8, r3
   1f4d8:	bge	1f6d4 <__assert_fail@plt+0xe17c>
   1f4dc:	ldr	r3, [sl, #24]
   1f4e0:	ldr	r1, [r3, r8, lsl #2]
   1f4e4:	mov	r7, r1
   1f4e8:	lsl	fp, r1, #3
   1f4ec:	ldr	r3, [r6]
   1f4f0:	add	r3, r3, fp
   1f4f4:	ldrb	r3, [r3, #6]
   1f4f8:	tst	r3, #16
   1f4fc:	bne	1f424 <__assert_fail@plt+0xdecc>
   1f500:	ldr	r1, [r6]
   1f504:	ldr	r2, [sp, #8]
   1f508:	add	r1, r1, fp
   1f50c:	mov	r0, r4
   1f510:	bl	1a65c <__assert_fail@plt+0x9104>
   1f514:	cmp	r0, #0
   1f518:	beq	1f4cc <__assert_fail@plt+0xdf74>
   1f51c:	b	1f4b4 <__assert_fail@plt+0xdf5c>
   1f520:	ldr	r7, [sp, #36]	; 0x24
   1f524:	ldr	r0, [sp, #60]	; 0x3c
   1f528:	bl	13eac <__assert_fail@plt+0x2954>
   1f52c:	ldr	r3, [sp, #48]	; 0x30
   1f530:	str	r3, [sp, #76]	; 0x4c
   1f534:	cmp	r3, #0
   1f538:	bne	1f6c4 <__assert_fail@plt+0xe16c>
   1f53c:	mov	r5, r7
   1f540:	ldr	r3, [sp, #68]	; 0x44
   1f544:	cmp	r3, #0
   1f548:	beq	1f594 <__assert_fail@plt+0xe03c>
   1f54c:	ldr	r3, [sp, #128]	; 0x80
   1f550:	ldr	r2, [sp, #28]
   1f554:	add	r1, sp, #64	; 0x40
   1f558:	ldr	r0, [sp, #24]
   1f55c:	bl	1a99c <__assert_fail@plt+0x9444>
   1f560:	str	r0, [sp, #76]	; 0x4c
   1f564:	cmp	r0, #0
   1f568:	bne	1f6e8 <__assert_fail@plt+0xe190>
   1f56c:	ldr	r3, [sp, #128]	; 0x80
   1f570:	str	r3, [sp]
   1f574:	ldr	r3, [sp, #28]
   1f578:	mov	r2, r7
   1f57c:	add	r1, sp, #64	; 0x40
   1f580:	mov	r0, r4
   1f584:	bl	1ef8c <__assert_fail@plt+0xda34>
   1f588:	str	r0, [sp, #76]	; 0x4c
   1f58c:	cmp	r0, #0
   1f590:	bne	1f6f8 <__assert_fail@plt+0xe1a0>
   1f594:	ldr	r2, [r4, #88]	; 0x58
   1f598:	ldr	r1, [sp, #8]
   1f59c:	ldr	r0, [sp, #12]
   1f5a0:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1f5a4:	mov	r3, r0
   1f5a8:	add	r2, sp, #64	; 0x40
   1f5ac:	ldr	r1, [sp, #24]
   1f5b0:	add	r0, sp, #76	; 0x4c
   1f5b4:	bl	19378 <__assert_fail@plt+0x7e20>
   1f5b8:	subs	sl, r0, #0
   1f5bc:	beq	1f708 <__assert_fail@plt+0xe1b0>
   1f5c0:	ldr	r3, [r4, #100]	; 0x64
   1f5c4:	ldr	r2, [sp, #20]
   1f5c8:	str	sl, [r3, r2]
   1f5cc:	mov	r3, #0
   1f5d0:	str	r3, [sp, #16]
   1f5d4:	ldr	r3, [sp, #124]	; 0x7c
   1f5d8:	cmp	r3, r5
   1f5dc:	ble	1f310 <__assert_fail@plt+0xddb8>
   1f5e0:	add	r7, r7, #1
   1f5e4:	ldr	r3, [r4, #120]	; 0x78
   1f5e8:	ldr	r2, [sp, #16]
   1f5ec:	cmp	r2, r3
   1f5f0:	bgt	1f310 <__assert_fail@plt+0xddb8>
   1f5f4:	sub	r3, r7, #1
   1f5f8:	str	r3, [sp, #8]
   1f5fc:	str	r9, [sp, #68]	; 0x44
   1f600:	lsl	r3, r7, #2
   1f604:	str	r3, [sp, #20]
   1f608:	ldr	r3, [r4, #100]	; 0x64
   1f60c:	ldr	r1, [r3, r7, lsl #2]
   1f610:	cmp	r1, #0
   1f614:	beq	1f778 <__assert_fail@plt+0xe220>
   1f618:	add	r1, r1, #4
   1f61c:	add	r0, sp, #64	; 0x40
   1f620:	bl	1a150 <__assert_fail@plt+0x8bf8>
   1f624:	str	r0, [sp, #76]	; 0x4c
   1f628:	cmp	r0, #0
   1f62c:	bne	1f3fc <__assert_fail@plt+0xdea4>
   1f630:	cmp	sl, #0
   1f634:	beq	1f53c <__assert_fail@plt+0xdfe4>
   1f638:	ldr	r6, [r4, #84]	; 0x54
   1f63c:	str	r9, [sp, #48]	; 0x30
   1f640:	str	r9, [sp, #52]	; 0x34
   1f644:	str	r9, [sp, #56]	; 0x38
   1f648:	str	r9, [sp, #60]	; 0x3c
   1f64c:	ldr	r3, [sl, #20]
   1f650:	cmp	r3, #0
   1f654:	ble	1f6d8 <__assert_fail@plt+0xe180>
   1f658:	ldr	r3, [sl, #24]
   1f65c:	ldr	r1, [r3]
   1f660:	lsl	fp, r1, #3
   1f664:	ldr	r3, [r6]
   1f668:	add	r3, r3, fp
   1f66c:	mov	r8, #0
   1f670:	str	r7, [sp, #36]	; 0x24
   1f674:	mov	r7, r1
   1f678:	b	1f4f4 <__assert_fail@plt+0xdf9c>
   1f67c:	ldr	r0, [sp, #60]	; 0x3c
   1f680:	bl	13eac <__assert_fail@plt+0x2954>
   1f684:	b	1f6bc <__assert_fail@plt+0xe164>
   1f688:	ldr	r3, [sp, #48]	; 0x30
   1f68c:	cmp	r3, #0
   1f690:	beq	1f4b4 <__assert_fail@plt+0xdf5c>
   1f694:	ldr	r7, [sp, #36]	; 0x24
   1f698:	ldr	r0, [sp, #60]	; 0x3c
   1f69c:	bl	13eac <__assert_fail@plt+0x2954>
   1f6a0:	ldr	r3, [sp, #48]	; 0x30
   1f6a4:	b	1f530 <__assert_fail@plt+0xdfd8>
   1f6a8:	cmp	r0, #0
   1f6ac:	beq	1f500 <__assert_fail@plt+0xdfa8>
   1f6b0:	b	1f4b4 <__assert_fail@plt+0xdf5c>
   1f6b4:	ldr	r0, [sp, #60]	; 0x3c
   1f6b8:	bl	13eac <__assert_fail@plt+0x2954>
   1f6bc:	mov	r3, #12
   1f6c0:	str	r3, [sp, #76]	; 0x4c
   1f6c4:	ldr	r0, [sp, #72]	; 0x48
   1f6c8:	bl	13eac <__assert_fail@plt+0x2954>
   1f6cc:	ldr	r0, [sp, #76]	; 0x4c
   1f6d0:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f6d4:	ldr	r7, [sp, #36]	; 0x24
   1f6d8:	ldr	r0, [sp, #60]	; 0x3c
   1f6dc:	bl	13eac <__assert_fail@plt+0x2954>
   1f6e0:	str	r9, [sp, #76]	; 0x4c
   1f6e4:	b	1f53c <__assert_fail@plt+0xdfe4>
   1f6e8:	ldr	r0, [sp, #72]	; 0x48
   1f6ec:	bl	13eac <__assert_fail@plt+0x2954>
   1f6f0:	ldr	r0, [sp, #76]	; 0x4c
   1f6f4:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f6f8:	ldr	r0, [sp, #72]	; 0x48
   1f6fc:	bl	13eac <__assert_fail@plt+0x2954>
   1f700:	ldr	r0, [sp, #76]	; 0x4c
   1f704:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f708:	ldr	r3, [sp, #76]	; 0x4c
   1f70c:	cmp	r3, #0
   1f710:	bne	1f730 <__assert_fail@plt+0xe1d8>
   1f714:	ldr	r3, [r4, #100]	; 0x64
   1f718:	ldr	r2, [sp, #20]
   1f71c:	str	r9, [r3, r2]
   1f720:	ldr	r3, [sp, #16]
   1f724:	add	r3, r3, #1
   1f728:	str	r3, [sp, #16]
   1f72c:	b	1f5d4 <__assert_fail@plt+0xe07c>
   1f730:	ldr	r0, [sp, #72]	; 0x48
   1f734:	bl	13eac <__assert_fail@plt+0x2954>
   1f738:	ldr	r0, [sp, #76]	; 0x4c
   1f73c:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f740:	mov	r0, #12
   1f744:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f748:	mov	r0, #12
   1f74c:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f750:	mov	r0, #12
   1f754:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f758:	ldr	r3, [sp, #32]
   1f75c:	str	r5, [r3]
   1f760:	ldr	r3, [sp, #40]	; 0x28
   1f764:	str	r3, [r4, #100]	; 0x64
   1f768:	ldr	r3, [sp, #44]	; 0x2c
   1f76c:	str	r3, [r4, #40]	; 0x28
   1f770:	mov	r0, #1
   1f774:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f778:	cmp	sl, #0
   1f77c:	bne	1f638 <__assert_fail@plt+0xe0e0>
   1f780:	mov	r5, r7
   1f784:	b	1f594 <__assert_fail@plt+0xe03c>
   1f788:	ldr	r3, [r4, #100]	; 0x64
   1f78c:	str	r3, [sp, #40]	; 0x28
   1f790:	ldr	r3, [r4, #40]	; 0x28
   1f794:	str	r3, [sp, #44]	; 0x2c
   1f798:	ldr	r3, [sp, #32]
   1f79c:	ldr	r3, [r3, #8]
   1f7a0:	str	r3, [r4, #100]	; 0x64
   1f7a4:	str	r6, [r4, #40]	; 0x28
   1f7a8:	str	r4, [sp, #12]
   1f7ac:	ldr	r2, [r4, #88]	; 0x58
   1f7b0:	sub	r1, r6, #1
   1f7b4:	mov	r0, r4
   1f7b8:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1f7bc:	mov	r8, r0
   1f7c0:	mov	r1, r7
   1f7c4:	add	r0, sp, #64	; 0x40
   1f7c8:	bl	175f8 <__assert_fail@plt+0x60a0>
   1f7cc:	str	r0, [sp, #76]	; 0x4c
   1f7d0:	cmp	r0, #0
   1f7d4:	bne	1f408 <__assert_fail@plt+0xdeb0>
   1f7d8:	ldr	r3, [sp, #128]	; 0x80
   1f7dc:	ldr	r2, [sp, #28]
   1f7e0:	add	r1, sp, #64	; 0x40
   1f7e4:	ldr	r0, [sp, #24]
   1f7e8:	bl	1a99c <__assert_fail@plt+0x9444>
   1f7ec:	str	r0, [sp, #76]	; 0x4c
   1f7f0:	cmp	r0, #0
   1f7f4:	moveq	r5, r6
   1f7f8:	beq	1f290 <__assert_fail@plt+0xdd38>
   1f7fc:	ldr	r0, [sp, #72]	; 0x48
   1f800:	bl	13eac <__assert_fail@plt+0x2954>
   1f804:	ldr	r0, [sp, #76]	; 0x4c
   1f808:	b	1f408 <__assert_fail@plt+0xdeb0>
   1f80c:	mov	r3, #0
   1f810:	str	r3, [sp, #64]	; 0x40
   1f814:	str	r3, [sp, #68]	; 0x44
   1f818:	str	r3, [sp, #72]	; 0x48
   1f81c:	b	1f2e8 <__assert_fail@plt+0xdd90>
   1f820:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f824:	strd	r6, [sp, #8]
   1f828:	strd	r8, [sp, #16]
   1f82c:	str	sl, [sp, #24]
   1f830:	str	lr, [sp, #28]
   1f834:	sub	sp, sp, #16
   1f838:	mov	r4, r0
   1f83c:	mov	r8, r1
   1f840:	mov	r6, r2
   1f844:	mov	r9, r3
   1f848:	ldr	r5, [sp, #48]	; 0x30
   1f84c:	mov	r1, r2
   1f850:	mov	r3, #8
   1f854:	str	r3, [sp, #8]
   1f858:	str	r5, [sp, #4]
   1f85c:	str	r9, [sp]
   1f860:	ldr	r3, [r2, #4]
   1f864:	ldr	r2, [r1], #8
   1f868:	bl	1f1b0 <__assert_fail@plt+0xdc58>
   1f86c:	cmp	r0, #0
   1f870:	beq	1f890 <__assert_fail@plt+0xe338>
   1f874:	add	sp, sp, #16
   1f878:	ldrd	r4, [sp]
   1f87c:	ldrd	r6, [sp, #8]
   1f880:	ldrd	r8, [sp, #16]
   1f884:	ldr	sl, [sp, #24]
   1f888:	add	sp, sp, #28
   1f88c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f890:	ldr	sl, [r8]
   1f894:	ldr	r7, [r6, #4]
   1f898:	ldr	r1, [r4, #112]	; 0x70
   1f89c:	ldr	r3, [r4, #108]	; 0x6c
   1f8a0:	cmp	r3, r1
   1f8a4:	bge	1f990 <__assert_fail@plt+0xe438>
   1f8a8:	ldr	r3, [r4, #108]	; 0x6c
   1f8ac:	cmp	r3, #0
   1f8b0:	ble	1f8d8 <__assert_fail@plt+0xe380>
   1f8b4:	add	r3, r3, r3, lsl #1
   1f8b8:	lsl	r3, r3, #3
   1f8bc:	sub	r3, r3, #24
   1f8c0:	ldr	r2, [r4, #116]	; 0x74
   1f8c4:	add	r3, r2, r3
   1f8c8:	ldr	r2, [r3, #4]
   1f8cc:	cmp	r5, r2
   1f8d0:	moveq	r2, #1
   1f8d4:	strbeq	r2, [r3, #20]
   1f8d8:	ldr	r3, [r4, #108]	; 0x6c
   1f8dc:	ldr	r2, [r4, #116]	; 0x74
   1f8e0:	add	r3, r3, r3, lsl #1
   1f8e4:	str	r9, [r2, r3, lsl #3]
   1f8e8:	ldr	r3, [r4, #108]	; 0x6c
   1f8ec:	ldr	r2, [r4, #116]	; 0x74
   1f8f0:	add	r3, r3, r3, lsl #1
   1f8f4:	add	r3, r2, r3, lsl #3
   1f8f8:	str	r5, [r3, #4]
   1f8fc:	ldr	r3, [r4, #108]	; 0x6c
   1f900:	ldr	r2, [r4, #116]	; 0x74
   1f904:	add	r3, r3, r3, lsl #1
   1f908:	add	r3, r2, r3, lsl #3
   1f90c:	str	sl, [r3, #8]
   1f910:	ldr	r3, [r4, #108]	; 0x6c
   1f914:	ldr	r2, [r4, #116]	; 0x74
   1f918:	add	r3, r3, r3, lsl #1
   1f91c:	add	r3, r2, r3, lsl #3
   1f920:	str	r7, [r3, #12]
   1f924:	ldr	r3, [r4, #108]	; 0x6c
   1f928:	ldr	r2, [r4, #116]	; 0x74
   1f92c:	add	r3, r3, r3, lsl #1
   1f930:	add	r3, r2, r3, lsl #3
   1f934:	cmp	sl, r7
   1f938:	movne	r2, #0
   1f93c:	mvneq	r2, #0
   1f940:	str	r2, [r3, #16]
   1f944:	ldr	r2, [r4, #116]	; 0x74
   1f948:	ldr	r3, [r4, #108]	; 0x6c
   1f94c:	add	r1, r3, #1
   1f950:	str	r1, [r4, #108]	; 0x6c
   1f954:	add	r3, r3, r3, lsl #1
   1f958:	add	r3, r2, r3, lsl #3
   1f95c:	mov	r2, #0
   1f960:	strb	r2, [r3, #20]
   1f964:	sub	r7, r7, sl
   1f968:	ldr	r3, [r4, #120]	; 0x78
   1f96c:	cmp	r3, r7
   1f970:	strlt	r7, [r4, #120]	; 0x78
   1f974:	ldr	r1, [r6, #4]
   1f978:	add	r5, r5, r1
   1f97c:	ldr	r1, [r8]
   1f980:	sub	r1, r5, r1
   1f984:	mov	r0, r4
   1f988:	bl	1a900 <__assert_fail@plt+0x93a8>
   1f98c:	b	1f874 <__assert_fail@plt+0xe31c>
   1f990:	add	r1, r1, r1, lsl #1
   1f994:	lsl	r1, r1, #4
   1f998:	ldr	r0, [r4, #116]	; 0x74
   1f99c:	bl	25930 <__assert_fail@plt+0x143d8>
   1f9a0:	cmp	r0, #0
   1f9a4:	beq	1f9dc <__assert_fail@plt+0xe484>
   1f9a8:	str	r0, [r4, #116]	; 0x74
   1f9ac:	ldr	r2, [r4, #112]	; 0x70
   1f9b0:	add	r2, r2, r2, lsl #1
   1f9b4:	ldr	r3, [r4, #108]	; 0x6c
   1f9b8:	add	r3, r3, r3, lsl #1
   1f9bc:	lsl	r2, r2, #3
   1f9c0:	mov	r1, #0
   1f9c4:	add	r0, r0, r3, lsl #3
   1f9c8:	bl	1145c <memset@plt>
   1f9cc:	ldr	r3, [r4, #112]	; 0x70
   1f9d0:	lsl	r3, r3, #1
   1f9d4:	str	r3, [r4, #112]	; 0x70
   1f9d8:	b	1f8a8 <__assert_fail@plt+0xe350>
   1f9dc:	ldr	r0, [r4, #116]	; 0x74
   1f9e0:	bl	13eac <__assert_fail@plt+0x2954>
   1f9e4:	mov	r0, #12
   1f9e8:	b	1f874 <__assert_fail@plt+0xe31c>
   1f9ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f9f0:	strd	r6, [sp, #8]
   1f9f4:	strd	r8, [sp, #16]
   1f9f8:	strd	sl, [sp, #24]
   1f9fc:	str	lr, [sp, #32]
   1fa00:	sub	sp, sp, #84	; 0x54
   1fa04:	ldr	fp, [r0, #84]	; 0x54
   1fa08:	ldr	r2, [r0, #40]	; 0x28
   1fa0c:	str	r2, [sp, #28]
   1fa10:	ldr	r3, [r1, #4]
   1fa14:	cmp	r3, #0
   1fa18:	ble	200d4 <__assert_fail@plt+0xeb7c>
   1fa1c:	mov	sl, r0
   1fa20:	lsl	r3, r2, #2
   1fa24:	str	r3, [sp, #40]	; 0x28
   1fa28:	mov	r3, #0
   1fa2c:	str	r3, [sp, #20]
   1fa30:	mov	r7, r1
   1fa34:	b	1fa84 <__assert_fail@plt+0xe52c>
   1fa38:	tst	r3, #8
   1fa3c:	beq	1fa48 <__assert_fail@plt+0xe4f0>
   1fa40:	tst	r0, #1
   1fa44:	bne	1fa68 <__assert_fail@plt+0xe510>
   1fa48:	tst	r3, #32
   1fa4c:	beq	1fa58 <__assert_fail@plt+0xe500>
   1fa50:	tst	r0, #2
   1fa54:	beq	1fa68 <__assert_fail@plt+0xe510>
   1fa58:	tst	r3, #128	; 0x80
   1fa5c:	beq	1faf0 <__assert_fail@plt+0xe598>
   1fa60:	tst	r0, #8
   1fa64:	bne	1faf0 <__assert_fail@plt+0xe598>
   1fa68:	ldr	r3, [sp, #20]
   1fa6c:	add	r3, r3, #1
   1fa70:	mov	r2, r3
   1fa74:	str	r3, [sp, #20]
   1fa78:	ldr	r3, [r7, #4]
   1fa7c:	cmp	r3, r2
   1fa80:	ble	200d4 <__assert_fail@plt+0xeb7c>
   1fa84:	ldr	r3, [r7, #8]
   1fa88:	ldr	r2, [sp, #20]
   1fa8c:	ldr	r8, [r3, r2, lsl #2]
   1fa90:	ldr	r4, [fp]
   1fa94:	add	r4, r4, r8, lsl #3
   1fa98:	ldrb	r3, [r4, #4]
   1fa9c:	cmp	r3, #4
   1faa0:	bne	1fa68 <__assert_fail@plt+0xe510>
   1faa4:	ldr	r2, [r4, #4]
   1faa8:	mov	r3, #65280	; 0xff00
   1faac:	movt	r3, #3
   1fab0:	and	r3, r3, r2
   1fab4:	cmp	r3, #0
   1fab8:	beq	1faf0 <__assert_fail@plt+0xe598>
   1fabc:	ldr	r2, [sl, #88]	; 0x58
   1fac0:	ldr	r1, [sp, #28]
   1fac4:	mov	r0, sl
   1fac8:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1facc:	ldr	r3, [r4, #4]
   1fad0:	ubfx	r3, r3, #8, #10
   1fad4:	tst	r3, #4
   1fad8:	beq	1fa38 <__assert_fail@plt+0xe4e0>
   1fadc:	tst	r0, #1
   1fae0:	beq	1fa68 <__assert_fail@plt+0xe510>
   1fae4:	tst	r3, #8
   1fae8:	beq	1fa48 <__assert_fail@plt+0xe4f0>
   1faec:	b	1fa68 <__assert_fail@plt+0xe510>
   1faf0:	ldr	r9, [sl, #108]	; 0x6c
   1faf4:	ldr	r1, [sp, #28]
   1faf8:	mov	r0, sl
   1fafc:	bl	16f28 <__assert_fail@plt+0x59d0>
   1fb00:	cmn	r0, #1
   1fb04:	beq	1fb34 <__assert_fail@plt+0xe5dc>
   1fb08:	add	r0, r0, #1
   1fb0c:	add	r0, r0, r0, lsl #1
   1fb10:	ldr	r3, [sl, #116]	; 0x74
   1fb14:	add	r3, r3, r0, lsl #3
   1fb18:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1fb1c:	cmp	r8, r2
   1fb20:	beq	1fea4 <__assert_fail@plt+0xe94c>
   1fb24:	add	r3, r3, #24
   1fb28:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1fb2c:	cmp	r2, #0
   1fb30:	bne	1fb18 <__assert_fail@plt+0xe5c0>
   1fb34:	ldr	r3, [sl, #84]	; 0x54
   1fb38:	str	r3, [sp, #44]	; 0x2c
   1fb3c:	ldr	r3, [r3]
   1fb40:	ldr	r3, [r3, r8, lsl #3]
   1fb44:	str	r3, [sp, #48]	; 0x30
   1fb48:	ldr	r3, [sl, #124]	; 0x7c
   1fb4c:	cmp	r3, #0
   1fb50:	ble	1fea4 <__assert_fail@plt+0xe94c>
   1fb54:	ldr	r3, [sl, #4]
   1fb58:	mov	r2, #0
   1fb5c:	str	r2, [sp, #32]
   1fb60:	str	fp, [sp, #52]	; 0x34
   1fb64:	str	r8, [sp, #36]	; 0x24
   1fb68:	str	r9, [sp, #56]	; 0x38
   1fb6c:	mov	fp, r3
   1fb70:	str	r7, [sp, #60]	; 0x3c
   1fb74:	b	1fc4c <__assert_fail@plt+0xe6f4>
   1fb78:	mov	r2, r5
   1fb7c:	ldr	r3, [sp, #24]
   1fb80:	add	r1, fp, r3
   1fb84:	add	r0, fp, r7
   1fb88:	bl	112b8 <memcmp@plt>
   1fb8c:	cmp	r0, #0
   1fb90:	bne	1fc24 <__assert_fail@plt+0xe6cc>
   1fb94:	add	r7, r7, r5
   1fb98:	ldr	r3, [sp, #28]
   1fb9c:	str	r3, [sp]
   1fba0:	ldr	r3, [sp, #36]	; 0x24
   1fba4:	mov	r2, r8
   1fba8:	mov	r1, r4
   1fbac:	mov	r0, sl
   1fbb0:	bl	1f820 <__assert_fail@plt+0xe2c8>
   1fbb4:	ldr	fp, [sl, #4]
   1fbb8:	cmp	r0, #1
   1fbbc:	bhi	1fed8 <__assert_fail@plt+0xe980>
   1fbc0:	add	r6, r6, #1
   1fbc4:	str	r9, [sp, #24]
   1fbc8:	ldr	r3, [r4, #16]
   1fbcc:	cmp	r6, r3
   1fbd0:	bge	1fc98 <__assert_fail@plt+0xe740>
   1fbd4:	ldr	r3, [r4, #20]
   1fbd8:	ldr	r8, [r3, r6, lsl #2]
   1fbdc:	ldr	r9, [r8, #4]
   1fbe0:	ldr	r3, [sp, #24]
   1fbe4:	sub	r5, r9, r3
   1fbe8:	cmp	r5, #0
   1fbec:	ble	1fb94 <__assert_fail@plt+0xe63c>
   1fbf0:	add	r1, r5, r7
   1fbf4:	ldr	r3, [sl, #28]
   1fbf8:	cmp	r1, r3
   1fbfc:	ble	1fb78 <__assert_fail@plt+0xe620>
   1fc00:	ldr	r3, [sl, #48]	; 0x30
   1fc04:	cmp	r1, r3
   1fc08:	bgt	1fc24 <__assert_fail@plt+0xe6cc>
   1fc0c:	mov	r0, sl
   1fc10:	bl	1a900 <__assert_fail@plt+0x93a8>
   1fc14:	cmp	r0, #0
   1fc18:	bne	200e4 <__assert_fail@plt+0xeb8c>
   1fc1c:	ldr	fp, [sl, #4]
   1fc20:	b	1fb78 <__assert_fail@plt+0xe620>
   1fc24:	ldr	r3, [r4, #16]
   1fc28:	cmp	r3, r6
   1fc2c:	ble	1fc94 <__assert_fail@plt+0xe73c>
   1fc30:	ldr	r3, [sp, #32]
   1fc34:	add	r3, r3, #1
   1fc38:	mov	r2, r3
   1fc3c:	str	r3, [sp, #32]
   1fc40:	ldr	r3, [sl, #124]	; 0x7c
   1fc44:	cmp	r2, r3
   1fc48:	bge	1fe94 <__assert_fail@plt+0xe93c>
   1fc4c:	ldr	r3, [sl, #132]	; 0x84
   1fc50:	ldr	r2, [sp, #32]
   1fc54:	ldr	r4, [r3, r2, lsl #2]
   1fc58:	ldr	r2, [r4, #4]
   1fc5c:	ldr	r3, [sp, #44]	; 0x2c
   1fc60:	ldr	r3, [r3]
   1fc64:	ldr	r3, [r3, r2, lsl #3]
   1fc68:	ldr	r2, [sp, #48]	; 0x30
   1fc6c:	cmp	r2, r3
   1fc70:	bne	1fc30 <__assert_fail@plt+0xe6d8>
   1fc74:	ldr	r3, [r4]
   1fc78:	str	r3, [sp, #24]
   1fc7c:	ldr	r3, [r4, #16]
   1fc80:	cmp	r3, #0
   1fc84:	ble	1fcb8 <__assert_fail@plt+0xe760>
   1fc88:	ldr	r7, [sp, #28]
   1fc8c:	mov	r6, #0
   1fc90:	b	1fbd4 <__assert_fail@plt+0xe67c>
   1fc94:	ldr	r9, [sp, #24]
   1fc98:	cmp	r6, #0
   1fc9c:	addgt	r9, r9, #1
   1fca0:	ldr	r3, [sp, #28]
   1fca4:	cmp	r3, r9
   1fca8:	blt	1fc30 <__assert_fail@plt+0xe6d8>
   1fcac:	mov	r8, #1
   1fcb0:	ldr	r6, [sp, #48]	; 0x30
   1fcb4:	b	1fdd8 <__assert_fail@plt+0xe880>
   1fcb8:	ldr	r7, [sp, #28]
   1fcbc:	ldr	r9, [sp, #24]
   1fcc0:	b	1fca0 <__assert_fail@plt+0xe748>
   1fcc4:	ldr	r3, [sl, #48]	; 0x30
   1fcc8:	cmp	r3, r7
   1fccc:	ble	1fc30 <__assert_fail@plt+0xe6d8>
   1fcd0:	add	r1, r7, #1
   1fcd4:	mov	r0, sl
   1fcd8:	bl	18354 <__assert_fail@plt+0x6dfc>
   1fcdc:	cmp	r0, #0
   1fce0:	bne	200e4 <__assert_fail@plt+0xeb8c>
   1fce4:	ldr	fp, [sl, #4]
   1fce8:	b	1fdf4 <__assert_fail@plt+0xe89c>
   1fcec:	add	r3, r3, #1
   1fcf0:	cmp	ip, r3
   1fcf4:	beq	1fdc8 <__assert_fail@plt+0xe870>
   1fcf8:	ldr	r5, [r2, #4]!
   1fcfc:	add	r1, r0, r5, lsl #3
   1fd00:	ldrb	r1, [r1, #4]
   1fd04:	cmp	r1, #9
   1fd08:	bne	1fcec <__assert_fail@plt+0xe794>
   1fd0c:	ldr	r1, [r0, r5, lsl #3]
   1fd10:	cmp	r6, r1
   1fd14:	bne	1fcec <__assert_fail@plt+0xe794>
   1fd18:	cmn	r5, #1
   1fd1c:	beq	1fdc8 <__assert_fail@plt+0xe870>
   1fd20:	ldr	r3, [r4, #8]
   1fd24:	cmp	r3, #0
   1fd28:	beq	1fe44 <__assert_fail@plt+0xe8ec>
   1fd2c:	ldr	r3, [r4]
   1fd30:	ldr	r2, [r4, #4]
   1fd34:	ldr	r1, [r4, #8]
   1fd38:	mov	r0, #9
   1fd3c:	str	r0, [sp, #8]
   1fd40:	str	r9, [sp, #4]
   1fd44:	str	r5, [sp]
   1fd48:	mov	r0, sl
   1fd4c:	bl	1f1b0 <__assert_fail@plt+0xdc58>
   1fd50:	cmp	r0, #1
   1fd54:	beq	1fdc8 <__assert_fail@plt+0xe870>
   1fd58:	cmp	r0, #0
   1fd5c:	bne	200e4 <__assert_fail@plt+0xeb8c>
   1fd60:	ldr	r3, [r4, #12]
   1fd64:	ldr	r2, [r4, #16]
   1fd68:	cmp	r2, r3
   1fd6c:	beq	1fe6c <__assert_fail@plt+0xe914>
   1fd70:	mov	r1, #20
   1fd74:	mov	r0, r8
   1fd78:	bl	25880 <__assert_fail@plt+0x14328>
   1fd7c:	subs	r2, r0, #0
   1fd80:	beq	200e0 <__assert_fail@plt+0xeb88>
   1fd84:	ldr	r1, [r4, #16]
   1fd88:	ldr	r3, [r4, #20]
   1fd8c:	str	r2, [r3, r1, lsl #2]
   1fd90:	str	r5, [r2]
   1fd94:	str	r9, [r2, #4]
   1fd98:	ldr	r3, [r4, #16]
   1fd9c:	add	r3, r3, #1
   1fda0:	str	r3, [r4, #16]
   1fda4:	ldr	r3, [sp, #28]
   1fda8:	str	r3, [sp]
   1fdac:	ldr	r3, [sp, #36]	; 0x24
   1fdb0:	mov	r1, r4
   1fdb4:	mov	r0, sl
   1fdb8:	bl	1f820 <__assert_fail@plt+0xe2c8>
   1fdbc:	ldr	fp, [sl, #4]
   1fdc0:	cmp	r0, #1
   1fdc4:	bhi	1fed8 <__assert_fail@plt+0xe980>
   1fdc8:	add	r9, r9, #1
   1fdcc:	ldr	r3, [sp, #28]
   1fdd0:	cmp	r3, r9
   1fdd4:	blt	1fc30 <__assert_fail@plt+0xe6d8>
   1fdd8:	ldr	r3, [r4]
   1fddc:	sub	r3, r9, r3
   1fde0:	cmp	r3, #0
   1fde4:	ble	1fe10 <__assert_fail@plt+0xe8b8>
   1fde8:	ldr	r3, [sl, #28]
   1fdec:	cmp	r3, r7
   1fdf0:	ble	1fcc4 <__assert_fail@plt+0xe76c>
   1fdf4:	add	r1, r7, #1
   1fdf8:	add	r3, fp, r9
   1fdfc:	ldrb	r2, [fp, r7]
   1fe00:	ldrb	r3, [r3, #-1]
   1fe04:	cmp	r2, r3
   1fe08:	bne	1fc30 <__assert_fail@plt+0xe6d8>
   1fe0c:	mov	r7, r1
   1fe10:	ldr	r3, [sl, #100]	; 0x64
   1fe14:	ldr	r3, [r3, r9, lsl #2]
   1fe18:	cmp	r3, #0
   1fe1c:	beq	1fdc8 <__assert_fail@plt+0xe870>
   1fe20:	ldr	ip, [r3, #8]
   1fe24:	cmp	ip, #0
   1fe28:	ble	1fdc8 <__assert_fail@plt+0xe870>
   1fe2c:	ldr	r2, [sp, #44]	; 0x2c
   1fe30:	ldr	r0, [r2]
   1fe34:	ldr	r2, [r3, #12]
   1fe38:	sub	r2, r2, #4
   1fe3c:	mov	r3, #0
   1fe40:	b	1fcf8 <__assert_fail@plt+0xe7a0>
   1fe44:	ldr	r1, [r4]
   1fe48:	sub	r1, r9, r1
   1fe4c:	add	r1, r1, #1
   1fe50:	mov	r0, #12
   1fe54:	bl	25880 <__assert_fail@plt+0x14328>
   1fe58:	str	r0, [r4, #8]
   1fe5c:	cmp	r0, #0
   1fe60:	bne	1fd2c <__assert_fail@plt+0xe7d4>
   1fe64:	mov	r0, #12
   1fe68:	b	200e4 <__assert_fail@plt+0xeb8c>
   1fe6c:	lsl	r3, r3, #1
   1fe70:	add	fp, r3, #1
   1fe74:	lsl	r1, fp, #2
   1fe78:	ldr	r0, [r4, #20]
   1fe7c:	bl	25930 <__assert_fail@plt+0x143d8>
   1fe80:	cmp	r0, #0
   1fe84:	beq	200e0 <__assert_fail@plt+0xeb88>
   1fe88:	str	r0, [r4, #20]
   1fe8c:	str	fp, [r4, #12]
   1fe90:	b	1fd70 <__assert_fail@plt+0xe818>
   1fe94:	ldr	fp, [sp, #52]	; 0x34
   1fe98:	ldr	r8, [sp, #36]	; 0x24
   1fe9c:	ldr	r9, [sp, #56]	; 0x38
   1fea0:	ldr	r7, [sp, #60]	; 0x3c
   1fea4:	mov	r3, #0
   1fea8:	str	r3, [sp, #76]	; 0x4c
   1feac:	lsl	r3, r8, #2
   1feb0:	str	r3, [sp, #44]	; 0x2c
   1feb4:	ldr	r3, [sl, #108]	; 0x6c
   1feb8:	cmp	r3, r9
   1febc:	ble	1fa68 <__assert_fail@plt+0xe510>
   1fec0:	add	r3, r8, r8, lsl #1
   1fec4:	lsl	r3, r3, #2
   1fec8:	str	r3, [sp, #48]	; 0x30
   1fecc:	ldr	r6, [sp, #28]
   1fed0:	str	r7, [sp, #52]	; 0x34
   1fed4:	b	1ff80 <__assert_fail@plt+0xea28>
   1fed8:	str	r0, [sp, #76]	; 0x4c
   1fedc:	ldr	r0, [sp, #76]	; 0x4c
   1fee0:	add	sp, sp, #84	; 0x54
   1fee4:	ldrd	r4, [sp]
   1fee8:	ldrd	r6, [sp, #8]
   1feec:	ldrd	r8, [sp, #16]
   1fef0:	ldrd	sl, [sp, #24]
   1fef4:	add	sp, sp, #32
   1fef8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fefc:	ldr	r2, [fp, #12]
   1ff00:	ldr	r1, [sp, #44]	; 0x2c
   1ff04:	ldr	r2, [r2, r1]
   1ff08:	add	r2, r2, r2, lsl #1
   1ff0c:	ldr	r1, [fp, #24]
   1ff10:	add	r2, r1, r2, lsl #2
   1ff14:	str	r2, [sp, #24]
   1ff18:	b	1ffd8 <__assert_fail@plt+0xea80>
   1ff1c:	ldr	r3, [sp, #32]
   1ff20:	ldr	r2, [sp, #24]
   1ff24:	mov	r1, fp
   1ff28:	add	r0, sp, #76	; 0x4c
   1ff2c:	bl	19378 <__assert_fail@plt+0x7e20>
   1ff30:	str	r0, [r5, r4, lsl #2]
   1ff34:	ldr	r3, [sl, #100]	; 0x64
   1ff38:	ldr	r3, [r3, r4, lsl #2]
   1ff3c:	cmp	r3, #0
   1ff40:	bne	2006c <__assert_fail@plt+0xeb14>
   1ff44:	ldr	r3, [sp, #76]	; 0x4c
   1ff48:	cmp	r3, #0
   1ff4c:	beq	2006c <__assert_fail@plt+0xeb14>
   1ff50:	b	1fedc <__assert_fail@plt+0xe984>
   1ff54:	ldr	r0, [sp, #72]	; 0x48
   1ff58:	bl	13eac <__assert_fail@plt+0x2954>
   1ff5c:	b	1fedc <__assert_fail@plt+0xe984>
   1ff60:	ldr	r3, [sp, #76]	; 0x4c
   1ff64:	cmp	r3, #0
   1ff68:	beq	2006c <__assert_fail@plt+0xeb14>
   1ff6c:	b	1fedc <__assert_fail@plt+0xe984>
   1ff70:	add	r9, r9, #1
   1ff74:	ldr	r3, [sl, #108]	; 0x6c
   1ff78:	cmp	r3, r9
   1ff7c:	ble	200cc <__assert_fail@plt+0xeb74>
   1ff80:	add	r3, r9, r9, lsl #1
   1ff84:	ldr	r2, [sl, #116]	; 0x74
   1ff88:	add	r1, r2, r3, lsl #3
   1ff8c:	ldr	r3, [r2, r3, lsl #3]
   1ff90:	cmp	r3, r8
   1ff94:	bne	1ff70 <__assert_fail@plt+0xea18>
   1ff98:	ldr	r3, [r1, #4]
   1ff9c:	cmp	r3, r6
   1ffa0:	bne	1ff70 <__assert_fail@plt+0xea18>
   1ffa4:	ldr	r3, [r1, #12]
   1ffa8:	ldr	r4, [r1, #8]
   1ffac:	subs	r7, r3, r4
   1ffb0:	bne	1fefc <__assert_fail@plt+0xe9a4>
   1ffb4:	ldr	r2, [fp, #20]
   1ffb8:	ldr	r1, [sp, #48]	; 0x30
   1ffbc:	add	r2, r2, r1
   1ffc0:	ldr	r2, [r2, #8]
   1ffc4:	ldr	r2, [r2]
   1ffc8:	add	r2, r2, r2, lsl #1
   1ffcc:	ldr	r1, [fp, #24]
   1ffd0:	add	r2, r1, r2, lsl #2
   1ffd4:	str	r2, [sp, #24]
   1ffd8:	add	r3, r3, r6
   1ffdc:	sub	r4, r3, r4
   1ffe0:	ldr	r2, [sl, #88]	; 0x58
   1ffe4:	sub	r1, r4, #1
   1ffe8:	mov	r0, sl
   1ffec:	bl	1a550 <__assert_fail@plt+0x8ff8>
   1fff0:	str	r0, [sp, #32]
   1fff4:	ldr	r5, [sl, #100]	; 0x64
   1fff8:	ldr	r3, [r5, r4, lsl #2]
   1fffc:	ldr	r2, [sp, #40]	; 0x28
   20000:	ldr	r2, [r5, r2]
   20004:	cmp	r2, #0
   20008:	ldrne	r2, [r2, #8]
   2000c:	moveq	r2, #0
   20010:	str	r2, [sp, #36]	; 0x24
   20014:	cmp	r3, #0
   20018:	beq	1ff1c <__assert_fail@plt+0xe9c4>
   2001c:	ldr	r2, [sp, #24]
   20020:	ldr	r1, [r3, #40]	; 0x28
   20024:	add	r0, sp, #64	; 0x40
   20028:	bl	17ba4 <__assert_fail@plt+0x664c>
   2002c:	str	r0, [sp, #76]	; 0x4c
   20030:	cmp	r0, #0
   20034:	bne	1ff54 <__assert_fail@plt+0xe9fc>
   20038:	ldr	r5, [sl, #100]	; 0x64
   2003c:	ldr	r3, [sp, #32]
   20040:	add	r2, sp, #64	; 0x40
   20044:	mov	r1, fp
   20048:	add	r0, sp, #76	; 0x4c
   2004c:	bl	19378 <__assert_fail@plt+0x7e20>
   20050:	str	r0, [r5, r4, lsl #2]
   20054:	ldr	r0, [sp, #72]	; 0x48
   20058:	bl	13eac <__assert_fail@plt+0x2954>
   2005c:	ldr	r3, [sl, #100]	; 0x64
   20060:	ldr	r3, [r3, r4, lsl #2]
   20064:	cmp	r3, #0
   20068:	beq	1ff60 <__assert_fail@plt+0xea08>
   2006c:	cmp	r7, #0
   20070:	bne	1ff70 <__assert_fail@plt+0xea18>
   20074:	ldr	r3, [sl, #100]	; 0x64
   20078:	ldr	r2, [sp, #40]	; 0x28
   2007c:	ldr	r3, [r3, r2]
   20080:	ldr	r3, [r3, #8]
   20084:	ldr	r2, [sp, #36]	; 0x24
   20088:	cmp	r3, r2
   2008c:	ble	1ff70 <__assert_fail@plt+0xea18>
   20090:	mov	r2, r6
   20094:	ldr	r4, [sp, #24]
   20098:	mov	r1, r4
   2009c:	mov	r0, sl
   200a0:	bl	1a7cc <__assert_fail@plt+0x9274>
   200a4:	str	r0, [sp, #76]	; 0x4c
   200a8:	cmp	r0, #0
   200ac:	bne	1fedc <__assert_fail@plt+0xe984>
   200b0:	mov	r1, r4
   200b4:	mov	r0, sl
   200b8:	bl	1f9ec <__assert_fail@plt+0xe494>
   200bc:	str	r0, [sp, #76]	; 0x4c
   200c0:	cmp	r0, #0
   200c4:	beq	1ff70 <__assert_fail@plt+0xea18>
   200c8:	b	1fedc <__assert_fail@plt+0xe984>
   200cc:	ldr	r7, [sp, #52]	; 0x34
   200d0:	b	1fa68 <__assert_fail@plt+0xe510>
   200d4:	mov	r3, #0
   200d8:	str	r3, [sp, #76]	; 0x4c
   200dc:	b	1fedc <__assert_fail@plt+0xe984>
   200e0:	mov	r0, #12
   200e4:	str	r0, [sp, #76]	; 0x4c
   200e8:	b	1fedc <__assert_fail@plt+0xe984>
   200ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   200f0:	strd	r6, [sp, #8]
   200f4:	strd	r8, [sp, #16]
   200f8:	str	sl, [sp, #24]
   200fc:	str	lr, [sp, #28]
   20100:	sub	sp, sp, #16
   20104:	mov	r8, r0
   20108:	mov	r4, r1
   2010c:	ldr	r7, [r1, #84]	; 0x54
   20110:	ldr	r6, [r1, #40]	; 0x28
   20114:	ldr	r3, [r1, #104]	; 0x68
   20118:	cmp	r3, r6
   2011c:	bge	20160 <__assert_fail@plt+0xec08>
   20120:	ldr	r3, [r1, #100]	; 0x64
   20124:	str	r2, [r3, r6, lsl #2]
   20128:	str	r6, [r1, #104]	; 0x68
   2012c:	mov	r5, r2
   20130:	ldr	r3, [r7, #76]	; 0x4c
   20134:	cmp	r3, #0
   20138:	cmpne	r5, #0
   2013c:	bne	20230 <__assert_fail@plt+0xecd8>
   20140:	mov	r0, r5
   20144:	add	sp, sp, #16
   20148:	ldrd	r4, [sp]
   2014c:	ldrd	r6, [sp, #8]
   20150:	ldrd	r8, [sp, #16]
   20154:	ldr	sl, [sp, #24]
   20158:	add	sp, sp, #28
   2015c:	pop	{pc}		; (ldr pc, [sp], #4)
   20160:	ldr	r9, [r1, #100]	; 0x64
   20164:	ldr	r3, [r9, r6, lsl #2]
   20168:	cmp	r3, #0
   2016c:	streq	r2, [r9, r6, lsl #2]
   20170:	moveq	r5, r2
   20174:	beq	20130 <__assert_fail@plt+0xebd8>
   20178:	ldr	r3, [r3, #40]	; 0x28
   2017c:	cmp	r2, #0
   20180:	beq	201f0 <__assert_fail@plt+0xec98>
   20184:	ldr	r9, [r2, #40]	; 0x28
   20188:	mov	r2, r3
   2018c:	mov	r1, r9
   20190:	add	r0, sp, #4
   20194:	bl	17ba4 <__assert_fail@plt+0x664c>
   20198:	str	r0, [r8]
   2019c:	cmp	r0, #0
   201a0:	movne	r5, #0
   201a4:	bne	20140 <__assert_fail@plt+0xebe8>
   201a8:	ldr	r1, [r4, #40]	; 0x28
   201ac:	ldr	r2, [r4, #88]	; 0x58
   201b0:	sub	r1, r1, #1
   201b4:	mov	r0, r4
   201b8:	bl	1a550 <__assert_fail@plt+0x8ff8>
   201bc:	ldr	sl, [r4, #100]	; 0x64
   201c0:	mov	r3, r0
   201c4:	add	r2, sp, #4
   201c8:	mov	r1, r7
   201cc:	mov	r0, r8
   201d0:	bl	19378 <__assert_fail@plt+0x7e20>
   201d4:	mov	r5, r0
   201d8:	str	r0, [sl, r6, lsl #2]
   201dc:	cmp	r9, #0
   201e0:	beq	20130 <__assert_fail@plt+0xebd8>
   201e4:	ldr	r0, [sp, #12]
   201e8:	bl	13eac <__assert_fail@plt+0x2954>
   201ec:	b	20130 <__assert_fail@plt+0xebd8>
   201f0:	ldrd	r0, [r3]
   201f4:	strd	r0, [sp, #4]
   201f8:	ldr	r3, [r3, #8]
   201fc:	str	r3, [sp, #12]
   20200:	ldr	r2, [r4, #88]	; 0x58
   20204:	sub	r1, r6, #1
   20208:	mov	r0, r4
   2020c:	bl	1a550 <__assert_fail@plt+0x8ff8>
   20210:	mov	r3, r0
   20214:	add	r2, sp, #4
   20218:	mov	r1, r7
   2021c:	mov	r0, r8
   20220:	bl	19378 <__assert_fail@plt+0x7e20>
   20224:	mov	r5, r0
   20228:	str	r0, [r9, r6, lsl #2]
   2022c:	b	20130 <__assert_fail@plt+0xebd8>
   20230:	add	r7, r5, #4
   20234:	mov	r2, r6
   20238:	mov	r1, r7
   2023c:	mov	r0, r4
   20240:	bl	1a7cc <__assert_fail@plt+0x9274>
   20244:	str	r0, [r8]
   20248:	cmp	r0, #0
   2024c:	bne	20280 <__assert_fail@plt+0xed28>
   20250:	ldrb	r3, [r5, #52]	; 0x34
   20254:	tst	r3, #64	; 0x40
   20258:	beq	20140 <__assert_fail@plt+0xebe8>
   2025c:	mov	r1, r7
   20260:	mov	r0, r4
   20264:	bl	1f9ec <__assert_fail@plt+0xe494>
   20268:	str	r0, [r8]
   2026c:	cmp	r0, #0
   20270:	bne	20288 <__assert_fail@plt+0xed30>
   20274:	ldr	r3, [r4, #100]	; 0x64
   20278:	ldr	r5, [r3, r6, lsl #2]
   2027c:	b	20140 <__assert_fail@plt+0xebe8>
   20280:	mov	r5, #0
   20284:	b	20140 <__assert_fail@plt+0xebe8>
   20288:	mov	r5, #0
   2028c:	b	20140 <__assert_fail@plt+0xebe8>
   20290:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20294:	strd	r6, [sp, #8]
   20298:	strd	r8, [sp, #16]
   2029c:	strd	sl, [sp, #24]
   202a0:	str	lr, [sp, #32]
   202a4:	sub	sp, sp, #84	; 0x54
   202a8:	str	r0, [sp, #8]
   202ac:	mov	r4, r1
   202b0:	mov	sl, r2
   202b4:	mov	r5, r3
   202b8:	ldr	r6, [r0, #84]	; 0x54
   202bc:	mov	r3, #0
   202c0:	str	r3, [sp, #76]	; 0x4c
   202c4:	lsl	r3, sl, #2
   202c8:	str	r3, [sp, #12]
   202cc:	ldr	r3, [r0, #100]	; 0x64
   202d0:	ldr	fp, [r3, sl, lsl #2]
   202d4:	cmp	fp, #0
   202d8:	beq	203d8 <__assert_fail@plt+0xee80>
   202dc:	add	fp, fp, #4
   202e0:	ldr	r3, [r5, #4]
   202e4:	cmp	r3, #0
   202e8:	beq	203e4 <__assert_fail@plt+0xee8c>
   202ec:	mov	r3, #0
   202f0:	str	r3, [sp, #48]	; 0x30
   202f4:	mov	r2, r5
   202f8:	mov	r1, r6
   202fc:	add	r0, sp, #48	; 0x30
   20300:	bl	1ec94 <__assert_fail@plt+0xd73c>
   20304:	mov	r9, r0
   20308:	ldr	r8, [sp, #48]	; 0x30
   2030c:	cmp	r8, #0
   20310:	bne	20418 <__assert_fail@plt+0xeec0>
   20314:	ldr	r3, [r0, #28]
   20318:	cmp	r3, #0
   2031c:	bne	20384 <__assert_fail@plt+0xee2c>
   20320:	add	r8, r0, #28
   20324:	ldr	r1, [r5, #4]
   20328:	mov	r0, r8
   2032c:	bl	17650 <__assert_fail@plt+0x60f8>
   20330:	mov	r7, r0
   20334:	str	r0, [sp, #48]	; 0x30
   20338:	cmp	r0, #0
   2033c:	bne	2092c <__assert_fail@plt+0xf3d4>
   20340:	ldr	r3, [r5, #4]
   20344:	cmp	r3, #0
   20348:	ble	20384 <__assert_fail@plt+0xee2c>
   2034c:	ldr	r3, [r5, #8]
   20350:	ldr	r1, [r3, r7, lsl #2]
   20354:	add	r1, r1, r1, lsl #1
   20358:	ldr	r3, [r6, #28]
   2035c:	add	r1, r3, r1, lsl #2
   20360:	mov	r0, r8
   20364:	bl	1a150 <__assert_fail@plt+0x8bf8>
   20368:	str	r0, [sp, #48]	; 0x30
   2036c:	cmp	r0, #0
   20370:	bne	20934 <__assert_fail@plt+0xf3dc>
   20374:	add	r7, r7, #1
   20378:	ldr	r3, [r5, #4]
   2037c:	cmp	r7, r3
   20380:	blt	2034c <__assert_fail@plt+0xedf4>
   20384:	add	r2, r9, #28
   20388:	mov	r1, fp
   2038c:	mov	r0, r5
   20390:	bl	17948 <__assert_fail@plt+0x63f0>
   20394:	str	r0, [sp, #28]
   20398:	str	r0, [sp, #76]	; 0x4c
   2039c:	cmp	r0, #0
   203a0:	bne	20924 <__assert_fail@plt+0xf3cc>
   203a4:	ldr	r3, [r4, #20]
   203a8:	cmp	r3, #0
   203ac:	bne	20438 <__assert_fail@plt+0xeee0>
   203b0:	ldr	r7, [r4]
   203b4:	mov	r2, r5
   203b8:	mov	r1, r6
   203bc:	add	r0, sp, #76	; 0x4c
   203c0:	bl	1ec94 <__assert_fail@plt+0xd73c>
   203c4:	str	r0, [r7, sl, lsl #2]
   203c8:	ldr	r8, [sp, #76]	; 0x4c
   203cc:	cmp	r8, #0
   203d0:	beq	203fc <__assert_fail@plt+0xeea4>
   203d4:	b	20418 <__assert_fail@plt+0xeec0>
   203d8:	ldr	r3, [r5, #4]
   203dc:	cmp	r3, #0
   203e0:	bne	20648 <__assert_fail@plt+0xf0f0>
   203e4:	ldr	r3, [r4]
   203e8:	mov	r2, #0
   203ec:	str	r2, [r3, sl, lsl #2]
   203f0:	cmp	fp, r2
   203f4:	moveq	r8, r2
   203f8:	beq	20418 <__assert_fail@plt+0xeec0>
   203fc:	ldr	r3, [sp, #8]
   20400:	ldr	r3, [r3, #100]	; 0x64
   20404:	ldr	r3, [r3, sl, lsl #2]
   20408:	ldrb	r3, [r3, #52]	; 0x34
   2040c:	tst	r3, #64	; 0x40
   20410:	moveq	r8, #0
   20414:	bne	20668 <__assert_fail@plt+0xf110>
   20418:	mov	r0, r8
   2041c:	add	sp, sp, #84	; 0x54
   20420:	ldrd	r4, [sp]
   20424:	ldrd	r6, [sp, #8]
   20428:	ldrd	r8, [sp, #16]
   2042c:	ldrd	sl, [sp, #24]
   20430:	add	sp, sp, #32
   20434:	pop	{pc}		; (ldr pc, [sp], #4)
   20438:	ldr	r3, [sp, #8]
   2043c:	ldr	r3, [r3, #116]	; 0x74
   20440:	str	r3, [sp, #20]
   20444:	ble	2063c <__assert_fail@plt+0xf0e4>
   20448:	mov	r7, r0
   2044c:	str	fp, [sp, #24]
   20450:	b	204dc <__assert_fail@plt+0xef84>
   20454:	ldr	lr, [r5, #4]
   20458:	cmp	lr, #0
   2045c:	ble	204cc <__assert_fail@plt+0xef74>
   20460:	ldr	r2, [r5, #8]
   20464:	add	lr, r2, lr, lsl #2
   20468:	mvn	r8, #0
   2046c:	mov	r1, r8
   20470:	b	20488 <__assert_fail@plt+0xef30>
   20474:	ldr	ip, [r0, r3, lsl #3]
   20478:	cmp	r9, ip
   2047c:	moveq	r1, r3
   20480:	cmp	r2, lr
   20484:	beq	204b4 <__assert_fail@plt+0xef5c>
   20488:	ldr	r3, [r2], #4
   2048c:	add	ip, r0, r3, lsl #3
   20490:	ldrb	ip, [ip, #4]
   20494:	cmp	ip, #8
   20498:	beq	20474 <__assert_fail@plt+0xef1c>
   2049c:	cmp	ip, #9
   204a0:	bne	20480 <__assert_fail@plt+0xef28>
   204a4:	ldr	ip, [r0, r3, lsl #3]
   204a8:	cmp	r9, ip
   204ac:	moveq	r8, r3
   204b0:	b	20480 <__assert_fail@plt+0xef28>
   204b4:	str	r8, [sp, #16]
   204b8:	cmp	r1, #0
   204bc:	bge	20534 <__assert_fail@plt+0xefdc>
   204c0:	ldr	r3, [sp, #16]
   204c4:	cmp	r3, #0
   204c8:	bge	20560 <__assert_fail@plt+0xf008>
   204cc:	add	r7, r7, #1
   204d0:	ldr	r3, [r4, #20]
   204d4:	cmp	r7, r3
   204d8:	bge	20638 <__assert_fail@plt+0xf0e0>
   204dc:	ldr	r3, [r4, #24]
   204e0:	ldr	r3, [r3, r7, lsl #2]
   204e4:	add	r3, r3, r3, lsl #1
   204e8:	ldr	ip, [sp, #20]
   204ec:	add	r2, ip, r3, lsl #3
   204f0:	ldr	r1, [r2, #8]
   204f4:	cmp	sl, r1
   204f8:	ble	204cc <__assert_fail@plt+0xef74>
   204fc:	ldr	r1, [r2, #4]
   20500:	cmp	sl, r1
   20504:	bgt	204cc <__assert_fail@plt+0xef74>
   20508:	ldr	r0, [r6]
   2050c:	ldr	r3, [ip, r3, lsl #3]
   20510:	ldr	r9, [r0, r3, lsl #3]
   20514:	ldr	r3, [r2, #12]
   20518:	cmp	sl, r3
   2051c:	beq	20454 <__assert_fail@plt+0xeefc>
   20520:	ldr	r3, [r5, #4]
   20524:	cmp	r3, #0
   20528:	ldrgt	fp, [sp, #28]
   2052c:	bgt	205ec <__assert_fail@plt+0xf094>
   20530:	b	204cc <__assert_fail@plt+0xef74>
   20534:	ldr	r3, [sp, #24]
   20538:	mov	r2, r5
   2053c:	mov	r0, r6
   20540:	bl	1bcbc <__assert_fail@plt+0xa764>
   20544:	cmp	r0, #0
   20548:	bne	2093c <__assert_fail@plt+0xf3e4>
   2054c:	cmp	r8, #0
   20550:	blt	204cc <__assert_fail@plt+0xef74>
   20554:	ldr	r3, [r5, #4]
   20558:	cmp	r3, #0
   2055c:	ble	204cc <__assert_fail@plt+0xef74>
   20560:	ldr	r9, [sp, #28]
   20564:	b	20578 <__assert_fail@plt+0xf020>
   20568:	add	r9, r9, #1
   2056c:	ldr	r3, [r5, #4]
   20570:	cmp	r9, r3
   20574:	bge	204cc <__assert_fail@plt+0xef74>
   20578:	ldr	r3, [r5, #8]
   2057c:	ldr	fp, [r3, r9, lsl #2]
   20580:	add	r8, fp, fp, lsl #1
   20584:	lsl	r8, r8, #2
   20588:	ldr	r0, [r6, #28]
   2058c:	ldr	r1, [sp, #16]
   20590:	add	r0, r0, r8
   20594:	bl	16530 <__assert_fail@plt+0x4fd8>
   20598:	cmp	r0, #0
   2059c:	bne	20568 <__assert_fail@plt+0xf010>
   205a0:	ldr	r0, [r6, #24]
   205a4:	ldr	r1, [sp, #16]
   205a8:	add	r0, r0, r8
   205ac:	bl	16530 <__assert_fail@plt+0x4fd8>
   205b0:	cmp	r0, #0
   205b4:	bne	20568 <__assert_fail@plt+0xf010>
   205b8:	ldr	r3, [sp, #24]
   205bc:	mov	r2, r5
   205c0:	mov	r1, fp
   205c4:	mov	r0, r6
   205c8:	bl	1bcbc <__assert_fail@plt+0xa764>
   205cc:	cmp	r0, #0
   205d0:	bne	20944 <__assert_fail@plt+0xf3ec>
   205d4:	sub	r9, r9, #1
   205d8:	b	20568 <__assert_fail@plt+0xf010>
   205dc:	add	fp, fp, #1
   205e0:	ldr	r3, [r5, #4]
   205e4:	cmp	fp, r3
   205e8:	bge	204cc <__assert_fail@plt+0xef74>
   205ec:	ldr	r3, [r5, #8]
   205f0:	ldr	r1, [r3, fp, lsl #2]
   205f4:	ldr	r2, [r6]
   205f8:	add	r3, r2, r1, lsl #3
   205fc:	ldrb	r3, [r3, #4]
   20600:	sub	r3, r3, #8
   20604:	cmp	r3, #1
   20608:	bhi	205dc <__assert_fail@plt+0xf084>
   2060c:	ldr	r3, [r2, r1, lsl #3]
   20610:	cmp	r9, r3
   20614:	bne	205dc <__assert_fail@plt+0xf084>
   20618:	ldr	r3, [sp, #24]
   2061c:	mov	r2, r5
   20620:	mov	r0, r6
   20624:	bl	1bcbc <__assert_fail@plt+0xa764>
   20628:	cmp	r0, #0
   2062c:	beq	205dc <__assert_fail@plt+0xf084>
   20630:	mov	r8, r0
   20634:	b	20418 <__assert_fail@plt+0xeec0>
   20638:	ldr	fp, [sp, #24]
   2063c:	mov	r3, #0
   20640:	str	r3, [sp, #76]	; 0x4c
   20644:	b	203b0 <__assert_fail@plt+0xee58>
   20648:	ldr	r4, [r1]
   2064c:	mov	r2, r5
   20650:	mov	r1, r6
   20654:	add	r0, sp, #76	; 0x4c
   20658:	bl	1ec94 <__assert_fail@plt+0xd73c>
   2065c:	str	r0, [r4, sl, lsl #2]
   20660:	ldr	r8, [sp, #76]	; 0x4c
   20664:	b	20418 <__assert_fail@plt+0xeec0>
   20668:	mov	r1, sl
   2066c:	ldr	r5, [sp, #8]
   20670:	mov	r0, r5
   20674:	bl	16f28 <__assert_fail@plt+0x59d0>
   20678:	str	r0, [sp, #32]
   2067c:	cmn	r0, #1
   20680:	moveq	r8, #0
   20684:	beq	20418 <__assert_fail@plt+0xeec0>
   20688:	ldr	r7, [r5, #84]	; 0x54
   2068c:	mov	r3, #0
   20690:	str	r3, [sp, #48]	; 0x30
   20694:	ldr	r3, [fp, #4]
   20698:	cmp	r3, #0
   2069c:	ble	2091c <__assert_fail@plt+0xf3c4>
   206a0:	add	r3, r0, r0, lsl #1
   206a4:	lsl	r3, r3, #3
   206a8:	str	r3, [sp, #36]	; 0x24
   206ac:	mov	r3, #0
   206b0:	add	r2, r4, #16
   206b4:	str	r2, [sp, #24]
   206b8:	str	sl, [sp, #28]
   206bc:	mov	sl, r3
   206c0:	b	206dc <__assert_fail@plt+0xf184>
   206c4:	cmp	r2, #4
   206c8:	beq	20710 <__assert_fail@plt+0xf1b8>
   206cc:	add	sl, sl, #1
   206d0:	ldr	r3, [fp, #4]
   206d4:	cmp	sl, r3
   206d8:	bge	208f0 <__assert_fail@plt+0xf398>
   206dc:	ldr	r3, [fp, #8]
   206e0:	ldr	r6, [r3, sl, lsl #2]
   206e4:	ldr	r3, [r7]
   206e8:	add	r3, r3, r6, lsl #3
   206ec:	ldrb	r2, [r3, #4]
   206f0:	ldr	r3, [r4, #8]
   206f4:	cmp	r6, r3
   206f8:	bne	206c4 <__assert_fail@plt+0xf16c>
   206fc:	ldr	r3, [r4, #12]
   20700:	ldr	r1, [sp, #28]
   20704:	cmp	r1, r3
   20708:	bne	206c4 <__assert_fail@plt+0xf16c>
   2070c:	b	206cc <__assert_fail@plt+0xf174>
   20710:	ldr	r3, [sp, #8]
   20714:	ldr	r5, [r3, #116]	; 0x74
   20718:	ldr	r3, [sp, #36]	; 0x24
   2071c:	add	r5, r5, r3
   20720:	add	r3, r6, r6, lsl #1
   20724:	lsl	r3, r3, #2
   20728:	str	r3, [sp, #20]
   2072c:	lsl	r3, r6, #2
   20730:	str	r3, [sp, #16]
   20734:	ldr	r3, [sp, #32]
   20738:	str	fp, [sp, #40]	; 0x28
   2073c:	str	sl, [sp, #44]	; 0x2c
   20740:	mov	sl, r3
   20744:	ldr	fp, [sp, #28]
   20748:	b	207ec <__assert_fail@plt+0xf294>
   2074c:	ldr	r3, [r7, #20]
   20750:	ldr	r2, [sp, #20]
   20754:	add	r3, r3, r2
   20758:	ldr	r3, [r3, #8]
   2075c:	ldr	r8, [r3]
   20760:	b	2081c <__assert_fail@plt+0xf2c4>
   20764:	ldrd	r2, [r4]
   20768:	strd	r2, [sp, #48]	; 0x30
   2076c:	ldrd	r2, [r4, #8]
   20770:	strd	r2, [sp, #56]	; 0x38
   20774:	ldrd	r2, [r4, #16]
   20778:	strd	r2, [sp, #64]	; 0x40
   2077c:	ldr	r3, [r4, #24]
   20780:	str	r3, [sp, #72]	; 0x48
   20784:	ldr	r1, [sp, #24]
   20788:	add	r0, sp, #64	; 0x40
   2078c:	bl	17b1c <__assert_fail@plt+0x65c4>
   20790:	cmp	r0, #0
   20794:	beq	2087c <__assert_fail@plt+0xf324>
   20798:	mov	r8, r0
   2079c:	b	208fc <__assert_fail@plt+0xf3a4>
   207a0:	ldr	r3, [sp, #48]	; 0x30
   207a4:	ldr	r2, [sp, #12]
   207a8:	str	r5, [r3, r2]
   207ac:	mov	r1, sl
   207b0:	add	r0, sp, #64	; 0x40
   207b4:	bl	16530 <__assert_fail@plt+0x4fd8>
   207b8:	sub	r1, r0, #1
   207bc:	add	r0, sp, #64	; 0x40
   207c0:	bl	165c8 <__assert_fail@plt+0x5070>
   207c4:	add	r5, sl, sl, lsl #1
   207c8:	ldr	r3, [sp, #8]
   207cc:	ldr	r3, [r3, #116]	; 0x74
   207d0:	add	r5, r3, r5, lsl #3
   207d4:	add	sl, sl, #1
   207d8:	add	r2, r5, #24
   207dc:	ldrb	r3, [r5, #20]
   207e0:	cmp	r3, #0
   207e4:	beq	208e4 <__assert_fail@plt+0xf38c>
   207e8:	mov	r5, r2
   207ec:	ldr	r3, [r5]
   207f0:	cmp	r6, r3
   207f4:	bne	207d4 <__assert_fail@plt+0xf27c>
   207f8:	ldr	r3, [r5, #12]
   207fc:	ldr	r2, [r5, #8]
   20800:	sub	r3, r3, r2
   20804:	add	r9, fp, r3
   20808:	cmp	r3, #0
   2080c:	beq	2074c <__assert_fail@plt+0xf1f4>
   20810:	ldr	r3, [r7, #12]
   20814:	ldr	r2, [sp, #16]
   20818:	ldr	r8, [r3, r2]
   2081c:	ldr	r3, [r4, #12]
   20820:	cmp	r9, r3
   20824:	bgt	207d4 <__assert_fail@plt+0xf27c>
   20828:	ldr	r3, [r4]
   2082c:	ldr	r0, [r3, r9, lsl #2]
   20830:	cmp	r0, #0
   20834:	beq	207d4 <__assert_fail@plt+0xf27c>
   20838:	mov	r1, r8
   2083c:	add	r0, r0, #4
   20840:	bl	16530 <__assert_fail@plt+0x4fd8>
   20844:	cmp	r0, #0
   20848:	beq	207d4 <__assert_fail@plt+0xf27c>
   2084c:	str	r9, [sp, #4]
   20850:	str	r8, [sp]
   20854:	mov	r3, fp
   20858:	mov	r2, r6
   2085c:	ldr	r1, [sp, #24]
   20860:	ldr	r0, [sp, #8]
   20864:	bl	16fe4 <__assert_fail@plt+0x5a8c>
   20868:	cmp	r0, #0
   2086c:	bne	207d4 <__assert_fail@plt+0xf27c>
   20870:	ldr	r3, [sp, #48]	; 0x30
   20874:	cmp	r3, #0
   20878:	beq	20764 <__assert_fail@plt+0xf20c>
   2087c:	str	r6, [sp, #56]	; 0x38
   20880:	str	fp, [sp, #60]	; 0x3c
   20884:	mov	r1, sl
   20888:	add	r0, sp, #64	; 0x40
   2088c:	bl	19bb8 <__assert_fail@plt+0x8660>
   20890:	cmp	r0, #0
   20894:	beq	208f8 <__assert_fail@plt+0xf3a0>
   20898:	ldr	r3, [sp, #48]	; 0x30
   2089c:	ldr	r2, [sp, #12]
   208a0:	ldr	r5, [r3, r2]
   208a4:	add	r1, sp, #48	; 0x30
   208a8:	ldr	r0, [sp, #8]
   208ac:	bl	2094c <__assert_fail@plt+0xf3f4>
   208b0:	cmp	r0, #0
   208b4:	bne	20914 <__assert_fail@plt+0xf3bc>
   208b8:	ldr	r1, [r4, #4]
   208bc:	cmp	r1, #0
   208c0:	beq	207a0 <__assert_fail@plt+0xf248>
   208c4:	add	r3, fp, #1
   208c8:	ldr	r2, [sp, #48]	; 0x30
   208cc:	mov	r0, r7
   208d0:	bl	1eec0 <__assert_fail@plt+0xd968>
   208d4:	cmp	r0, #0
   208d8:	beq	207a0 <__assert_fail@plt+0xf248>
   208dc:	mov	r8, r0
   208e0:	b	208fc <__assert_fail@plt+0xf3a4>
   208e4:	ldr	fp, [sp, #40]	; 0x28
   208e8:	ldr	sl, [sp, #44]	; 0x2c
   208ec:	b	206cc <__assert_fail@plt+0xf174>
   208f0:	mov	r8, #0
   208f4:	b	208fc <__assert_fail@plt+0xf3a4>
   208f8:	mov	r8, #12
   208fc:	ldr	r3, [sp, #48]	; 0x30
   20900:	cmp	r3, #0
   20904:	beq	20418 <__assert_fail@plt+0xeec0>
   20908:	ldr	r0, [sp, #72]	; 0x48
   2090c:	bl	13eac <__assert_fail@plt+0x2954>
   20910:	b	20418 <__assert_fail@plt+0xeec0>
   20914:	mov	r8, r0
   20918:	b	208fc <__assert_fail@plt+0xf3a4>
   2091c:	mov	r8, #0
   20920:	b	20418 <__assert_fail@plt+0xeec0>
   20924:	ldr	r8, [sp, #28]
   20928:	b	20418 <__assert_fail@plt+0xeec0>
   2092c:	mov	r8, #12
   20930:	b	20418 <__assert_fail@plt+0xeec0>
   20934:	mov	r8, #12
   20938:	b	20418 <__assert_fail@plt+0xeec0>
   2093c:	mov	r8, r0
   20940:	b	20418 <__assert_fail@plt+0xeec0>
   20944:	mov	r8, r0
   20948:	b	20418 <__assert_fail@plt+0xeec0>
   2094c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20950:	strd	r6, [sp, #8]
   20954:	strd	r8, [sp, #16]
   20958:	strd	sl, [sp, #24]
   2095c:	str	lr, [sp, #32]
   20960:	sub	sp, sp, #60	; 0x3c
   20964:	mov	sl, r0
   20968:	mov	r7, r1
   2096c:	ldr	fp, [r1, #12]
   20970:	ldr	r1, [r1, #8]
   20974:	add	r0, sp, #44	; 0x2c
   20978:	bl	175f8 <__assert_fail@plt+0x60a0>
   2097c:	subs	r4, r0, #0
   20980:	bne	20c0c <__assert_fail@plt+0xf6b4>
   20984:	add	r3, sp, #44	; 0x2c
   20988:	mov	r2, fp
   2098c:	mov	r1, r7
   20990:	mov	r0, sl
   20994:	bl	20290 <__assert_fail@plt+0xed38>
   20998:	subs	r3, r0, #0
   2099c:	str	r3, [sp, #32]
   209a0:	bne	20bf0 <__assert_fail@plt+0xf698>
   209a4:	cmp	fp, #0
   209a8:	ble	20bf8 <__assert_fail@plt+0xf6a0>
   209ac:	str	r3, [sp, #20]
   209b0:	mov	r9, sl
   209b4:	b	20b4c <__assert_fail@plt+0xf5f4>
   209b8:	ldr	r2, [sp, #16]
   209bc:	mov	r1, #0
   209c0:	bl	1145c <memset@plt>
   209c4:	ldr	r0, [sp, #52]	; 0x34
   209c8:	bl	13eac <__assert_fail@plt+0x2954>
   209cc:	ldr	r4, [sp, #32]
   209d0:	b	20c0c <__assert_fail@plt+0xf6b4>
   209d4:	ldr	r3, [r7, #12]
   209d8:	str	r3, [sp, #24]
   209dc:	ldr	r2, [sp, #12]
   209e0:	ldr	r3, [r2, #84]	; 0x54
   209e4:	mov	r0, r3
   209e8:	mov	r3, r9
   209ec:	mov	r1, fp
   209f0:	str	r0, [sp, #36]	; 0x24
   209f4:	bl	1b96c <__assert_fail@plt+0xa414>
   209f8:	subs	r6, r0, #0
   209fc:	ble	20b14 <__assert_fail@plt+0xf5bc>
   20a00:	add	r3, r9, r6
   20a04:	ldr	r2, [sp, #24]
   20a08:	cmp	r2, r3
   20a0c:	blt	20a40 <__assert_fail@plt+0xf4e8>
   20a10:	ldr	r2, [r7]
   20a14:	ldr	r0, [r2, r3, lsl #2]
   20a18:	cmp	r0, #0
   20a1c:	beq	20ac0 <__assert_fail@plt+0xf568>
   20a20:	ldr	r3, [sp, #36]	; 0x24
   20a24:	ldr	r3, [r3, #12]
   20a28:	ldr	r2, [sp, #8]
   20a2c:	ldr	r1, [r3, r2, lsl #2]
   20a30:	add	r0, r0, #4
   20a34:	bl	16530 <__assert_fail@plt+0x4fd8>
   20a38:	cmp	r0, #0
   20a3c:	beq	20ac0 <__assert_fail@plt+0xf568>
   20a40:	ldr	r3, [r7, #20]
   20a44:	cmp	r3, #0
   20a48:	beq	20a78 <__assert_fail@plt+0xf520>
   20a4c:	ldr	r3, [r4, #12]
   20a50:	ldr	r2, [sp, #8]
   20a54:	ldr	r2, [r3, r2, lsl #2]
   20a58:	str	r9, [sp, #4]
   20a5c:	str	fp, [sp]
   20a60:	add	r3, r9, r6
   20a64:	ldr	r1, [sp, #28]
   20a68:	ldr	r0, [sp, #12]
   20a6c:	bl	16fe4 <__assert_fail@plt+0x5a8c>
   20a70:	cmp	r0, #0
   20a74:	bne	20a8c <__assert_fail@plt+0xf534>
   20a78:	mov	r1, fp
   20a7c:	add	r0, sp, #44	; 0x2c
   20a80:	bl	19bb8 <__assert_fail@plt+0x8660>
   20a84:	cmp	r0, #0
   20a88:	beq	20c00 <__assert_fail@plt+0xf6a8>
   20a8c:	add	sl, sl, #1
   20a90:	ldr	r3, [r5, #20]
   20a94:	cmp	sl, r3
   20a98:	bge	20b20 <__assert_fail@plt+0xf5c8>
   20a9c:	ldr	r3, [r5, #24]
   20aa0:	ldr	fp, [r3, sl, lsl #2]
   20aa4:	str	fp, [sp, #8]
   20aa8:	lsl	r8, fp, #3
   20aac:	ldr	r3, [r4]
   20ab0:	add	r3, r3, r8
   20ab4:	ldrb	r3, [r3, #6]
   20ab8:	tst	r3, #16
   20abc:	bne	209d4 <__assert_fail@plt+0xf47c>
   20ac0:	ldr	r1, [r4]
   20ac4:	mov	r2, r9
   20ac8:	add	r1, r1, r8
   20acc:	ldr	r0, [sp, #12]
   20ad0:	bl	1a65c <__assert_fail@plt+0x9104>
   20ad4:	cmp	r0, #0
   20ad8:	beq	20a8c <__assert_fail@plt+0xf534>
   20adc:	ldr	r3, [r7]
   20ae0:	ldr	r2, [sp, #16]
   20ae4:	ldr	r0, [r3, r2]
   20ae8:	cmp	r0, #0
   20aec:	beq	20a8c <__assert_fail@plt+0xf534>
   20af0:	ldr	r3, [r4, #12]
   20af4:	ldr	r2, [sp, #8]
   20af8:	ldr	r1, [r3, r2, lsl #2]
   20afc:	add	r0, r0, #4
   20b00:	bl	16530 <__assert_fail@plt+0x4fd8>
   20b04:	cmp	r0, #0
   20b08:	beq	20a8c <__assert_fail@plt+0xf534>
   20b0c:	mov	r6, #1
   20b10:	b	20a40 <__assert_fail@plt+0xf4e8>
   20b14:	cmp	r6, #0
   20b18:	beq	20ac0 <__assert_fail@plt+0xf568>
   20b1c:	b	20a40 <__assert_fail@plt+0xf4e8>
   20b20:	mov	fp, r9
   20b24:	ldr	r9, [sp, #12]
   20b28:	add	r3, sp, #44	; 0x2c
   20b2c:	mov	r2, fp
   20b30:	mov	r1, r7
   20b34:	mov	r0, r9
   20b38:	bl	20290 <__assert_fail@plt+0xed38>
   20b3c:	cmp	r0, #0
   20b40:	bne	20c2c <__assert_fail@plt+0xf6d4>
   20b44:	cmp	fp, #0
   20b48:	beq	20be8 <__assert_fail@plt+0xf690>
   20b4c:	ldr	r0, [r7]
   20b50:	lsl	r3, fp, #2
   20b54:	str	r3, [sp, #16]
   20b58:	ldr	r3, [r0, fp, lsl #2]
   20b5c:	cmp	r3, #0
   20b60:	ldreq	r3, [sp, #20]
   20b64:	addeq	r3, r3, #1
   20b68:	ldrne	r3, [sp, #32]
   20b6c:	str	r3, [sp, #20]
   20b70:	ldr	r3, [r9, #120]	; 0x78
   20b74:	ldr	r2, [sp, #20]
   20b78:	cmp	r3, r2
   20b7c:	blt	209b8 <__assert_fail@plt+0xf460>
   20b80:	mov	r3, #0
   20b84:	str	r3, [sp, #48]	; 0x30
   20b88:	sub	fp, fp, #1
   20b8c:	ldr	r3, [r9, #100]	; 0x64
   20b90:	ldr	r2, [sp, #16]
   20b94:	add	r3, r3, r2
   20b98:	ldr	r5, [r3, #-4]
   20b9c:	cmp	r5, #0
   20ba0:	beq	20b28 <__assert_fail@plt+0xf5d0>
   20ba4:	ldr	r4, [r9, #84]	; 0x54
   20ba8:	ldr	r3, [r5, #20]
   20bac:	cmp	r3, #0
   20bb0:	ble	20b28 <__assert_fail@plt+0xf5d0>
   20bb4:	ldr	r3, [r5, #24]
   20bb8:	ldr	r6, [r3]
   20bbc:	str	r6, [sp, #8]
   20bc0:	lsl	r8, r6, #3
   20bc4:	ldr	r3, [r4]
   20bc8:	add	r3, r3, r8
   20bcc:	ldr	sl, [sp, #32]
   20bd0:	add	r2, r7, #16
   20bd4:	str	r2, [sp, #28]
   20bd8:	str	r9, [sp, #12]
   20bdc:	mov	r9, fp
   20be0:	mov	fp, r6
   20be4:	b	20ab4 <__assert_fail@plt+0xf55c>
   20be8:	mov	r4, fp
   20bec:	b	20c04 <__assert_fail@plt+0xf6ac>
   20bf0:	ldr	r4, [sp, #32]
   20bf4:	b	20c04 <__assert_fail@plt+0xf6ac>
   20bf8:	ldr	r4, [sp, #32]
   20bfc:	b	20c04 <__assert_fail@plt+0xf6ac>
   20c00:	mov	r4, #12
   20c04:	ldr	r0, [sp, #52]	; 0x34
   20c08:	bl	13eac <__assert_fail@plt+0x2954>
   20c0c:	mov	r0, r4
   20c10:	add	sp, sp, #60	; 0x3c
   20c14:	ldrd	r4, [sp]
   20c18:	ldrd	r6, [sp, #8]
   20c1c:	ldrd	r8, [sp, #16]
   20c20:	ldrd	sl, [sp, #24]
   20c24:	add	sp, sp, #32
   20c28:	pop	{pc}		; (ldr pc, [sp], #4)
   20c2c:	mov	r4, r0
   20c30:	b	20c04 <__assert_fail@plt+0xf6ac>
   20c34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20c38:	strd	r6, [sp, #8]
   20c3c:	strd	r8, [sp, #16]
   20c40:	strd	sl, [sp, #24]
   20c44:	str	lr, [sp, #32]
   20c48:	sub	sp, sp, #420	; 0x1a4
   20c4c:	mov	r5, r0
   20c50:	str	r0, [sp, #20]
   20c54:	str	r1, [sp, #44]	; 0x2c
   20c58:	str	r2, [sp, #60]	; 0x3c
   20c5c:	mov	r4, r3
   20c60:	ldr	r6, [sp, #456]	; 0x1c8
   20c64:	ldr	sl, [r0]
   20c68:	mov	r2, #136	; 0x88
   20c6c:	mov	r1, #0
   20c70:	add	r0, sp, #276	; 0x114
   20c74:	bl	1145c <memset@plt>
   20c78:	str	sl, [sp, #360]	; 0x168
   20c7c:	ldr	r2, [r5, #16]
   20c80:	str	r2, [sp, #32]
   20c84:	cmp	r2, #0
   20c88:	beq	20cb0 <__assert_fail@plt+0xf758>
   20c8c:	ldrb	r2, [r5, #28]
   20c90:	ubfx	r3, r2, #3, #1
   20c94:	cmp	r4, r6
   20c98:	moveq	r3, #0
   20c9c:	andne	r3, r3, #1
   20ca0:	cmp	r3, #0
   20ca4:	moveq	r3, #0
   20ca8:	streq	r3, [sp, #32]
   20cac:	bne	20ffc <__assert_fail@plt+0xfaa4>
   20cb0:	ldr	r3, [sp, #20]
   20cb4:	ldr	r3, [r3, #24]
   20cb8:	ldr	r2, [sp, #464]	; 0x1d0
   20cbc:	cmp	r3, r2
   20cc0:	subcc	r2, r2, #1
   20cc4:	subcc	r3, r2, r3
   20cc8:	movcs	r3, #0
   20ccc:	str	r3, [sp, #72]	; 0x48
   20cd0:	ldr	ip, [sp, #20]
   20cd4:	ldr	r3, [ip, #8]
   20cd8:	cmp	r3, #0
   20cdc:	beq	221f8 <__assert_fail@plt+0x10ca0>
   20ce0:	ldr	r3, [sl, #36]	; 0x24
   20ce4:	cmp	r3, #0
   20ce8:	beq	22204 <__assert_fail@plt+0x10cac>
   20cec:	ldr	r2, [sl, #40]	; 0x28
   20cf0:	cmp	r2, #0
   20cf4:	beq	22210 <__assert_fail@plt+0x10cb8>
   20cf8:	ldr	r1, [sl, #44]	; 0x2c
   20cfc:	cmp	r1, #0
   20d00:	beq	2221c <__assert_fail@plt+0x10cc4>
   20d04:	ldr	r0, [sl, #48]	; 0x30
   20d08:	cmp	r0, #0
   20d0c:	beq	22228 <__assert_fail@plt+0x10cd0>
   20d10:	ldr	r3, [r3, #8]
   20d14:	cmp	r3, #0
   20d18:	bne	20d54 <__assert_fail@plt+0xf7fc>
   20d1c:	ldr	r3, [r2, #8]
   20d20:	cmp	r3, #0
   20d24:	bne	20d54 <__assert_fail@plt+0xf7fc>
   20d28:	ldr	r2, [r1, #8]
   20d2c:	cmp	r2, #0
   20d30:	beq	20d40 <__assert_fail@plt+0xf7e8>
   20d34:	ldrsb	r2, [ip, #28]
   20d38:	cmp	r2, #0
   20d3c:	blt	20d54 <__assert_fail@plt+0xf7fc>
   20d40:	cmp	r4, #0
   20d44:	cmpne	r6, #0
   20d48:	bne	22234 <__assert_fail@plt+0x10cdc>
   20d4c:	mov	r6, r3
   20d50:	mov	r4, r3
   20d54:	ldr	r3, [sp, #464]	; 0x1d0
   20d58:	ldr	r2, [sp, #72]	; 0x48
   20d5c:	subs	r3, r3, r2
   20d60:	str	r3, [sp, #64]	; 0x40
   20d64:	movne	r5, #1
   20d68:	bne	20d78 <__assert_fail@plt+0xf820>
   20d6c:	ldr	r5, [sl, #76]	; 0x4c
   20d70:	adds	r5, r5, #0
   20d74:	movne	r5, #1
   20d78:	ldr	r3, [sp, #20]
   20d7c:	ldr	ip, [r3, #20]
   20d80:	str	ip, [sp, #68]	; 0x44
   20d84:	ldr	r2, [r3, #12]
   20d88:	ldr	r0, [sl, #92]	; 0x5c
   20d8c:	ldr	r3, [sl, #8]
   20d90:	add	r3, r3, #1
   20d94:	cmp	r3, r0
   20d98:	movlt	r3, r0
   20d9c:	ldr	lr, [sp, #60]	; 0x3c
   20da0:	add	r1, lr, #1
   20da4:	ldr	r7, [sp, #44]	; 0x2c
   20da8:	str	r7, [sp, #276]	; 0x114
   20dac:	str	lr, [sp, #324]	; 0x144
   20db0:	str	lr, [sp, #320]	; 0x140
   20db4:	mov	r7, ip
   20db8:	str	ip, [sp, #340]	; 0x154
   20dbc:	and	ip, r2, #4194304	; 0x400000
   20dc0:	ubfx	r2, r2, #22, #1
   20dc4:	strb	r2, [sp, #348]	; 0x15c
   20dc8:	orrs	r2, r7, ip
   20dcc:	movne	r2, #1
   20dd0:	moveq	r2, #0
   20dd4:	strb	r2, [sp, #351]	; 0x15f
   20dd8:	str	r0, [sp, #356]	; 0x164
   20ddc:	ldrb	r2, [sl, #88]	; 0x58
   20de0:	ubfx	r0, r2, #2, #1
   20de4:	strb	r0, [sp, #349]	; 0x15d
   20de8:	ubfx	r2, r2, #3, #1
   20dec:	strb	r2, [sp, #350]	; 0x15e
   20df0:	str	lr, [sp, #332]	; 0x14c
   20df4:	str	lr, [sp, #328]	; 0x148
   20df8:	cmp	r3, r1
   20dfc:	movlt	r1, r3
   20e00:	add	r0, sp, #276	; 0x114
   20e04:	bl	170e4 <__assert_fail@plt+0x5b8c>
   20e08:	subs	r2, r0, #0
   20e0c:	str	r2, [sp, #76]	; 0x4c
   20e10:	bne	2218c <__assert_fail@plt+0x10c34>
   20e14:	add	r3, sl, #96	; 0x60
   20e18:	str	r3, [sp, #344]	; 0x158
   20e1c:	ldrb	r3, [sl, #88]	; 0x58
   20e20:	ubfx	r3, r3, #4, #1
   20e24:	strb	r3, [sp, #354]	; 0x162
   20e28:	ldrb	r3, [sp, #351]	; 0x15f
   20e2c:	cmp	r3, #0
   20e30:	beq	2233c <__assert_fail@plt+0x10de4>
   20e34:	mov	r3, r2
   20e38:	str	r3, [sp, #304]	; 0x130
   20e3c:	str	r3, [sp, #308]	; 0x134
   20e40:	ldr	r3, [sp, #460]	; 0x1cc
   20e44:	str	r3, [sp, #332]	; 0x14c
   20e48:	str	r3, [sp, #328]	; 0x148
   20e4c:	ldr	r3, [sp, #20]
   20e50:	ldrb	r3, [r3, #28]
   20e54:	ubfx	r3, r3, #7, #1
   20e58:	strb	r3, [sp, #353]	; 0x161
   20e5c:	ldr	r7, [sl, #76]	; 0x4c
   20e60:	lsl	r7, r7, #1
   20e64:	ldr	r3, [sp, #472]	; 0x1d8
   20e68:	str	r3, [sp, #364]	; 0x16c
   20e6c:	mvn	r3, #0
   20e70:	str	r3, [sp, #368]	; 0x170
   20e74:	cmp	r7, #0
   20e78:	ble	20eb8 <__assert_fail@plt+0xf960>
   20e7c:	movw	r3, #43690	; 0xaaaa
   20e80:	movt	r3, #2730	; 0xaaa
   20e84:	cmp	r7, r3
   20e88:	bhi	22330 <__assert_fail@plt+0x10dd8>
   20e8c:	add	r0, r7, r7, lsl #1
   20e90:	lsl	r0, r0, #3
   20e94:	bl	258f4 <__assert_fail@plt+0x1439c>
   20e98:	str	r0, [sp, #392]	; 0x188
   20e9c:	lsl	r0, r7, #2
   20ea0:	bl	258f4 <__assert_fail@plt+0x1439c>
   20ea4:	str	r0, [sp, #408]	; 0x198
   20ea8:	ldr	r3, [sp, #392]	; 0x188
   20eac:	cmp	r0, #0
   20eb0:	cmpne	r3, #0
   20eb4:	beq	22330 <__assert_fail@plt+0x10dd8>
   20eb8:	str	r7, [sp, #388]	; 0x184
   20ebc:	mov	r3, #1
   20ec0:	str	r3, [sp, #396]	; 0x18c
   20ec4:	str	r7, [sp, #404]	; 0x194
   20ec8:	ldr	r3, [sp, #64]	; 0x40
   20ecc:	cmp	r3, #1
   20ed0:	bls	21014 <__assert_fail@plt+0xfabc>
   20ed4:	ldr	r0, [sp, #312]	; 0x138
   20ed8:	cmn	r0, #-1073741822	; 0xc0000002
   20edc:	bhi	22198 <__assert_fail@plt+0x10c40>
   20ee0:	add	r0, r0, #1
   20ee4:	lsl	r0, r0, #2
   20ee8:	bl	258f4 <__assert_fail@plt+0x1439c>
   20eec:	str	r0, [sp, #376]	; 0x178
   20ef0:	cmp	r0, #0
   20ef4:	beq	221a4 <__assert_fail@plt+0x10c4c>
   20ef8:	str	r4, [sp, #412]	; 0x19c
   20efc:	ldr	r3, [sp, #472]	; 0x1d8
   20f00:	and	r3, r3, #1
   20f04:	cmp	r3, #0
   20f08:	movne	r3, #4
   20f0c:	moveq	r3, #6
   20f10:	str	r3, [sp, #336]	; 0x150
   20f14:	cmp	r4, r6
   20f18:	mvngt	r3, #0
   20f1c:	movle	r3, #1
   20f20:	str	r3, [sp, #92]	; 0x5c
   20f24:	movlt	r3, r4
   20f28:	movge	r3, r6
   20f2c:	str	r3, [sp, #56]	; 0x38
   20f30:	movge	r3, r4
   20f34:	movlt	r3, r6
   20f38:	str	r3, [sp, #48]	; 0x30
   20f3c:	ldr	r3, [sl, #92]	; 0x5c
   20f40:	str	r3, [sp, #88]	; 0x58
   20f44:	ldr	r2, [sp, #32]
   20f48:	cmp	r2, #0
   20f4c:	beq	21024 <__assert_fail@plt+0xfacc>
   20f50:	cmp	r3, #1
   20f54:	moveq	r3, #4
   20f58:	beq	20f7c <__assert_fail@plt+0xfa24>
   20f5c:	ldr	r3, [sp, #20]
   20f60:	ldr	r3, [r3, #12]
   20f64:	and	r3, r3, #4194304	; 0x400000
   20f68:	ldr	r2, [sp, #68]	; 0x44
   20f6c:	orr	r3, r2, r3
   20f70:	cmp	r3, #0
   20f74:	ldr	r3, [sp, #76]	; 0x4c
   20f78:	moveq	r3, #4
   20f7c:	ldr	r2, [sp, #76]	; 0x4c
   20f80:	cmp	r4, r6
   20f84:	movle	r2, #2
   20f88:	ldr	r1, [sp, #68]	; 0x44
   20f8c:	cmp	r1, #0
   20f90:	orrne	r3, r3, #1
   20f94:	orr	r3, r3, r2
   20f98:	str	r3, [sp, #80]	; 0x50
   20f9c:	ldr	r3, [sp, #48]	; 0x30
   20fa0:	cmp	r4, r3
   20fa4:	movle	r3, #0
   20fa8:	movgt	r3, #1
   20fac:	ldr	r2, [sp, #56]	; 0x38
   20fb0:	cmp	r4, r2
   20fb4:	orrlt	r3, r3, #1
   20fb8:	str	r3, [sp, #84]	; 0x54
   20fbc:	cmp	r3, #0
   20fc0:	bne	221b0 <__assert_fail@plt+0x10c58>
   20fc4:	str	r5, [sp, #16]
   20fc8:	add	r3, sp, #416	; 0x1a0
   20fcc:	cmp	r4, r6
   20fd0:	suble	r3, r3, #4
   20fd4:	movgt	r3, #0
   20fd8:	str	r3, [sp, #96]	; 0x60
   20fdc:	adds	r3, r3, #0
   20fe0:	movne	r3, #1
   20fe4:	str	r3, [sp, #100]	; 0x64
   20fe8:	mov	r3, #65280	; 0xff00
   20fec:	movt	r3, #3
   20ff0:	str	r3, [sp, #40]	; 0x28
   20ff4:	str	sl, [sp, #52]	; 0x34
   20ff8:	b	223d0 <__assert_fail@plt+0x10e78>
   20ffc:	and	r2, r2, #1
   21000:	cmp	r2, #0
   21004:	ldr	r3, [sp, #32]
   21008:	movne	r3, #0
   2100c:	str	r3, [sp, #32]
   21010:	b	20cb0 <__assert_fail@plt+0xf758>
   21014:	ldrb	r3, [sl, #88]	; 0x58
   21018:	tst	r3, #2
   2101c:	beq	20ef8 <__assert_fail@plt+0xf9a0>
   21020:	b	20ed4 <__assert_fail@plt+0xf97c>
   21024:	mov	r3, #8
   21028:	str	r3, [sp, #80]	; 0x50
   2102c:	b	20f9c <__assert_fail@plt+0xfa44>
   21030:	ldr	r5, [sp, #76]	; 0x4c
   21034:	ldr	r4, [sp, #412]	; 0x19c
   21038:	ldr	r3, [sp, #300]	; 0x12c
   2103c:	sub	r3, r4, r3
   21040:	ldr	r2, [sp, #308]	; 0x134
   21044:	cmp	r2, r3
   21048:	bhi	21070 <__assert_fail@plt+0xfb18>
   2104c:	ldr	r2, [sp, #472]	; 0x1d8
   21050:	mov	r1, r4
   21054:	add	r0, sp, #276	; 0x114
   21058:	bl	1bea0 <__assert_fail@plt+0xa948>
   2105c:	subs	r3, r0, #0
   21060:	str	r3, [sp, #24]
   21064:	bne	221cc <__assert_fail@plt+0x10c74>
   21068:	ldr	r3, [sp, #300]	; 0x12c
   2106c:	sub	r3, r4, r3
   21070:	ldr	r2, [sp, #304]	; 0x130
   21074:	cmp	r2, r3
   21078:	ldrhi	r2, [sp, #280]	; 0x118
   2107c:	ldrbhi	r3, [r2, r3]
   21080:	movls	r3, r5
   21084:	ldr	r2, [sp, #32]
   21088:	ldrb	r3, [r2, r3]
   2108c:	cmp	r3, #0
   21090:	bne	21288 <__assert_fail@plt+0xfd30>
   21094:	ldr	r3, [sp, #92]	; 0x5c
   21098:	add	r4, r4, r3
   2109c:	str	r4, [sp, #412]	; 0x19c
   210a0:	ldr	r3, [sp, #48]	; 0x30
   210a4:	cmp	r4, r3
   210a8:	movle	r3, #0
   210ac:	movgt	r3, #1
   210b0:	ldr	r2, [sp, #56]	; 0x38
   210b4:	cmp	r4, r2
   210b8:	movge	r4, r3
   210bc:	orrlt	r4, r3, #1
   210c0:	cmp	r4, #0
   210c4:	beq	21034 <__assert_fail@plt+0xfadc>
   210c8:	ldr	sl, [sp, #52]	; 0x34
   210cc:	mov	r3, #1
   210d0:	str	r3, [sp, #24]
   210d4:	b	21228 <__assert_fail@plt+0xfcd0>
   210d8:	ldr	r2, [sp, #412]	; 0x19c
   210dc:	ldr	r3, [sp, #48]	; 0x30
   210e0:	cmp	r3, r2
   210e4:	ble	21278 <__assert_fail@plt+0xfd20>
   210e8:	ldr	r1, [sp, #44]	; 0x2c
   210ec:	add	r3, r1, r2
   210f0:	ldrb	r2, [r1, r2]
   210f4:	ldr	r1, [sp, #68]	; 0x44
   210f8:	ldrb	r2, [r1, r2]
   210fc:	ldr	r1, [sp, #32]
   21100:	ldrb	r2, [r1, r2]
   21104:	cmp	r2, #0
   21108:	bne	21288 <__assert_fail@plt+0xfd30>
   2110c:	ldr	r2, [sp, #44]	; 0x2c
   21110:	sub	r1, r2, #1
   21114:	ldr	r0, [sp, #48]	; 0x30
   21118:	add	r1, r1, r0
   2111c:	rsb	ip, r2, #1
   21120:	ldr	lr, [sp, #32]
   21124:	ldr	r4, [sp, #68]	; 0x44
   21128:	add	r0, ip, r3
   2112c:	cmp	r3, r1
   21130:	beq	2135c <__assert_fail@plt+0xfe04>
   21134:	ldrb	r2, [r3, #1]!
   21138:	ldrb	r2, [r4, r2]
   2113c:	ldrb	r2, [lr, r2]
   21140:	cmp	r2, #0
   21144:	beq	21128 <__assert_fail@plt+0xfbd0>
   21148:	str	r0, [sp, #412]	; 0x19c
   2114c:	b	21288 <__assert_fail@plt+0xfd30>
   21150:	ldr	r2, [sp, #412]	; 0x19c
   21154:	ldr	r3, [sp, #48]	; 0x30
   21158:	cmp	r3, r2
   2115c:	ble	21278 <__assert_fail@plt+0xfd20>
   21160:	ldr	r1, [sp, #44]	; 0x2c
   21164:	add	r3, r1, r2
   21168:	ldrb	r2, [r1, r2]
   2116c:	ldr	r1, [sp, #32]
   21170:	ldrb	r2, [r1, r2]
   21174:	cmp	r2, #0
   21178:	bne	21288 <__assert_fail@plt+0xfd30>
   2117c:	ldr	r2, [sp, #44]	; 0x2c
   21180:	sub	r1, r2, #1
   21184:	ldr	r0, [sp, #48]	; 0x30
   21188:	add	r1, r1, r0
   2118c:	rsb	ip, r2, #1
   21190:	ldr	lr, [sp, #32]
   21194:	add	r0, ip, r3
   21198:	cmp	r1, r3
   2119c:	beq	21274 <__assert_fail@plt+0xfd1c>
   211a0:	ldrb	r2, [r3, #1]!
   211a4:	ldrb	r2, [lr, r2]
   211a8:	cmp	r2, #0
   211ac:	beq	21194 <__assert_fail@plt+0xfc3c>
   211b0:	str	r0, [sp, #412]	; 0x19c
   211b4:	b	21288 <__assert_fail@plt+0xfd30>
   211b8:	ldr	r3, [sp, #412]	; 0x19c
   211bc:	ldr	r2, [sp, #56]	; 0x38
   211c0:	cmp	r2, r3
   211c4:	bgt	21264 <__assert_fail@plt+0xfd0c>
   211c8:	ldr	r1, [sp, #84]	; 0x54
   211cc:	ldr	ip, [sp, #76]	; 0x4c
   211d0:	mov	r0, #1
   211d4:	ldr	r4, [sp, #32]
   211d8:	ldr	lr, [sp, #68]	; 0x44
   211dc:	ldr	r6, [sp, #56]	; 0x38
   211e0:	ldr	r7, [sp, #44]	; 0x2c
   211e4:	ldr	r5, [sp, #60]	; 0x3c
   211e8:	cmp	r5, r3
   211ec:	ldrbgt	r2, [r7, r3]
   211f0:	movle	r2, ip
   211f4:	cmp	lr, #0
   211f8:	ldrbne	r2, [lr, r2]
   211fc:	ldrb	r2, [r4, r2]
   21200:	cmp	r2, #0
   21204:	bne	213a4 <__assert_fail@plt+0xfe4c>
   21208:	sub	r3, r3, #1
   2120c:	mov	r1, r0
   21210:	cmp	r3, r6
   21214:	bge	211e8 <__assert_fail@plt+0xfc90>
   21218:	ldr	sl, [sp, #52]	; 0x34
   2121c:	str	r3, [sp, #412]	; 0x19c
   21220:	mov	r3, #1
   21224:	str	r3, [sp, #24]
   21228:	ldr	r0, [sp, #376]	; 0x178
   2122c:	bl	13eac <__assert_fail@plt+0x2954>
   21230:	ldr	r3, [sl, #76]	; 0x4c
   21234:	cmp	r3, #0
   21238:	bne	221dc <__assert_fail@plt+0x10c84>
   2123c:	add	r0, sp, #276	; 0x114
   21240:	bl	196c8 <__assert_fail@plt+0x8170>
   21244:	ldr	r0, [sp, #24]
   21248:	add	sp, sp, #420	; 0x1a4
   2124c:	ldrd	r4, [sp]
   21250:	ldrd	r6, [sp, #8]
   21254:	ldrd	r8, [sp, #16]
   21258:	ldrd	sl, [sp, #24]
   2125c:	add	sp, sp, #32
   21260:	pop	{pc}		; (ldr pc, [sp], #4)
   21264:	ldr	sl, [sp, #52]	; 0x34
   21268:	mov	r3, #1
   2126c:	str	r3, [sp, #24]
   21270:	b	21228 <__assert_fail@plt+0xfcd0>
   21274:	str	r0, [sp, #412]	; 0x19c
   21278:	ldr	r3, [sp, #412]	; 0x19c
   2127c:	ldr	r2, [sp, #48]	; 0x30
   21280:	cmp	r3, r2
   21284:	beq	21364 <__assert_fail@plt+0xfe0c>
   21288:	ldr	r2, [sp, #472]	; 0x1d8
   2128c:	ldr	r1, [sp, #412]	; 0x19c
   21290:	add	r0, sp, #276	; 0x114
   21294:	bl	1bea0 <__assert_fail@plt+0xa948>
   21298:	subs	r3, r0, #0
   2129c:	str	r3, [sp, #24]
   212a0:	bne	221d4 <__assert_fail@plt+0x10c7c>
   212a4:	ldr	r3, [sp, #88]	; 0x58
   212a8:	cmp	r3, #1
   212ac:	beq	212cc <__assert_fail@plt+0xfd74>
   212b0:	ldr	r3, [sp, #304]	; 0x130
   212b4:	cmp	r3, #0
   212b8:	beq	212cc <__assert_fail@plt+0xfd74>
   212bc:	ldr	r3, [sp, #284]	; 0x11c
   212c0:	ldr	r3, [r3]
   212c4:	cmn	r3, #1
   212c8:	beq	22398 <__assert_fail@plt+0x10e40>
   212cc:	mov	r3, #0
   212d0:	str	r3, [sp, #396]	; 0x18c
   212d4:	str	r3, [sp, #384]	; 0x180
   212d8:	str	r3, [sp, #380]	; 0x17c
   212dc:	ldr	r4, [sp, #360]	; 0x168
   212e0:	ldr	r1, [sp, #316]	; 0x13c
   212e4:	str	r1, [sp, #36]	; 0x24
   212e8:	str	r3, [sp, #112]	; 0x70
   212ec:	ldr	r5, [r4, #36]	; 0x24
   212f0:	ldrsb	r3, [r5, #52]	; 0x34
   212f4:	cmp	r3, #0
   212f8:	bge	213cc <__assert_fail@plt+0xfe74>
   212fc:	ldr	r2, [sp, #364]	; 0x16c
   21300:	sub	r1, r1, #1
   21304:	add	r0, sp, #276	; 0x114
   21308:	bl	1a550 <__assert_fail@plt+0x8ff8>
   2130c:	tst	r0, #1
   21310:	bne	213c8 <__assert_fail@plt+0xfe70>
   21314:	cmp	r0, #0
   21318:	beq	213cc <__assert_fail@plt+0xfe74>
   2131c:	and	r3, r0, #6
   21320:	cmp	r3, #6
   21324:	beq	21414 <__assert_fail@plt+0xfebc>
   21328:	tst	r0, #2
   2132c:	bne	2141c <__assert_fail@plt+0xfec4>
   21330:	tst	r0, #4
   21334:	beq	213cc <__assert_fail@plt+0xfe74>
   21338:	mov	r3, r0
   2133c:	ldr	r2, [r5, #40]	; 0x28
   21340:	mov	r1, r4
   21344:	add	r0, sp, #112	; 0x70
   21348:	bl	19378 <__assert_fail@plt+0x7e20>
   2134c:	subs	r5, r0, #0
   21350:	bne	213cc <__assert_fail@plt+0xfe74>
   21354:	ldr	sl, [sp, #52]	; 0x34
   21358:	b	22318 <__assert_fail@plt+0x10dc0>
   2135c:	str	r0, [sp, #412]	; 0x19c
   21360:	b	21278 <__assert_fail@plt+0xfd20>
   21364:	ldr	r2, [sp, #60]	; 0x3c
   21368:	cmp	r3, r2
   2136c:	ldrlt	r2, [sp, #44]	; 0x2c
   21370:	ldrblt	r3, [r2, r3]
   21374:	ldrge	r3, [sp, #76]	; 0x4c
   21378:	ldr	r2, [sp, #68]	; 0x44
   2137c:	cmp	r2, #0
   21380:	ldrbne	r3, [r2, r3]
   21384:	ldr	r2, [sp, #32]
   21388:	ldrb	r3, [r2, r3]
   2138c:	cmp	r3, #0
   21390:	bne	21288 <__assert_fail@plt+0xfd30>
   21394:	ldr	sl, [sp, #52]	; 0x34
   21398:	mov	r3, #1
   2139c:	str	r3, [sp, #24]
   213a0:	b	21228 <__assert_fail@plt+0xfcd0>
   213a4:	cmp	r1, #0
   213a8:	strne	r3, [sp, #412]	; 0x19c
   213ac:	ldr	r2, [sp, #56]	; 0x38
   213b0:	cmp	r2, r3
   213b4:	ble	21288 <__assert_fail@plt+0xfd30>
   213b8:	ldr	sl, [sp, #52]	; 0x34
   213bc:	mov	r3, #1
   213c0:	str	r3, [sp, #24]
   213c4:	b	21228 <__assert_fail@plt+0xfcd0>
   213c8:	ldr	r5, [r4, #40]	; 0x28
   213cc:	ldr	r3, [sp, #376]	; 0x178
   213d0:	cmp	r3, #0
   213d4:	beq	21480 <__assert_fail@plt+0xff28>
   213d8:	ldr	r2, [sp, #36]	; 0x24
   213dc:	str	r5, [r3, r2, lsl #2]
   213e0:	ldr	r3, [r4, #76]	; 0x4c
   213e4:	cmp	r3, #0
   213e8:	ldreq	sl, [sp, #100]	; 0x64
   213ec:	bne	21424 <__assert_fail@plt+0xfecc>
   213f0:	ldrb	r3, [r5, #52]	; 0x34
   213f4:	tst	r3, #16
   213f8:	bne	21488 <__assert_fail@plt+0xff30>
   213fc:	ldr	r3, [sp, #24]
   21400:	str	r3, [sp, #12]
   21404:	mvn	fp, #0
   21408:	ldr	r3, [sp, #96]	; 0x60
   2140c:	str	r3, [sp, #28]
   21410:	b	2182c <__assert_fail@plt+0x102d4>
   21414:	ldr	r5, [r4, #48]	; 0x30
   21418:	b	213cc <__assert_fail@plt+0xfe74>
   2141c:	ldr	r5, [r4, #44]	; 0x2c
   21420:	b	213cc <__assert_fail@plt+0xfe74>
   21424:	add	r4, r5, #4
   21428:	mov	r2, #0
   2142c:	mov	r1, r4
   21430:	add	r0, sp, #276	; 0x114
   21434:	bl	1a7cc <__assert_fail@plt+0x9274>
   21438:	mov	fp, r0
   2143c:	str	r0, [sp, #112]	; 0x70
   21440:	cmp	r0, #0
   21444:	bne	2259c <__assert_fail@plt+0x11044>
   21448:	ldrb	r3, [r5, #52]	; 0x34
   2144c:	tst	r3, #64	; 0x40
   21450:	bne	2145c <__assert_fail@plt+0xff04>
   21454:	ldr	sl, [sp, #84]	; 0x54
   21458:	b	213f0 <__assert_fail@plt+0xfe98>
   2145c:	mov	r1, r4
   21460:	add	r0, sp, #276	; 0x114
   21464:	bl	1f9ec <__assert_fail@plt+0xe494>
   21468:	mov	fp, r0
   2146c:	str	r0, [sp, #112]	; 0x70
   21470:	cmp	r0, #0
   21474:	bne	2259c <__assert_fail@plt+0x11044>
   21478:	ldr	sl, [sp, #84]	; 0x54
   2147c:	b	213f0 <__assert_fail@plt+0xfe98>
   21480:	ldr	sl, [sp, #100]	; 0x64
   21484:	b	213f0 <__assert_fail@plt+0xfe98>
   21488:	ldrsb	r3, [r5, #52]	; 0x34
   2148c:	cmp	r3, #0
   21490:	blt	214b0 <__assert_fail@plt+0xff58>
   21494:	ldr	r3, [sp, #16]
   21498:	cmp	r3, #0
   2149c:	beq	214d4 <__assert_fail@plt+0xff7c>
   214a0:	ldr	fp, [sp, #36]	; 0x24
   214a4:	mov	r3, #1
   214a8:	str	r3, [sp, #12]
   214ac:	b	21408 <__assert_fail@plt+0xfeb0>
   214b0:	ldr	r2, [sp, #36]	; 0x24
   214b4:	mov	r1, r5
   214b8:	add	r0, sp, #276	; 0x114
   214bc:	bl	1aae8 <__assert_fail@plt+0x9590>
   214c0:	subs	r3, r0, #0
   214c4:	str	r3, [sp, #12]
   214c8:	bne	21494 <__assert_fail@plt+0xff3c>
   214cc:	mvn	fp, #0
   214d0:	b	21408 <__assert_fail@plt+0xfeb0>
   214d4:	ldr	fp, [sp, #36]	; 0x24
   214d8:	b	2259c <__assert_fail@plt+0x11044>
   214dc:	ldr	r2, [sp, #324]	; 0x144
   214e0:	cmp	r3, r2
   214e4:	bge	2184c <__assert_fail@plt+0x102f4>
   214e8:	add	r1, r1, #2
   214ec:	add	r0, sp, #276	; 0x114
   214f0:	bl	18354 <__assert_fail@plt+0x6dfc>
   214f4:	str	r0, [sp, #112]	; 0x70
   214f8:	cmp	r0, #0
   214fc:	beq	21858 <__assert_fail@plt+0x10300>
   21500:	ldr	sl, [sp, #52]	; 0x34
   21504:	b	22318 <__assert_fail@plt+0x10dc0>
   21508:	ldr	r2, [sp, #324]	; 0x144
   2150c:	cmp	r3, r2
   21510:	bge	21858 <__assert_fail@plt+0x10300>
   21514:	b	214e8 <__assert_fail@plt+0xff90>
   21518:	ldr	r6, [sp, #360]	; 0x168
   2151c:	ldr	r3, [r5, #8]
   21520:	cmp	r3, #0
   21524:	ble	22324 <__assert_fail@plt+0x10dcc>
   21528:	ldr	r7, [sp, #24]
   2152c:	b	21640 <__assert_fail@plt+0x100e8>
   21530:	tst	r3, #8
   21534:	beq	21540 <__assert_fail@plt+0xffe8>
   21538:	tst	r0, #1
   2153c:	bne	21630 <__assert_fail@plt+0x100d8>
   21540:	tst	r3, #32
   21544:	beq	21550 <__assert_fail@plt+0xfff8>
   21548:	tst	r0, #2
   2154c:	beq	21630 <__assert_fail@plt+0x100d8>
   21550:	tst	r3, #128	; 0x80
   21554:	beq	21560 <__assert_fail@plt+0x10008>
   21558:	tst	r0, #8
   2155c:	beq	21630 <__assert_fail@plt+0x100d8>
   21560:	ldr	r3, [sp, #316]	; 0x13c
   21564:	add	r2, sp, #276	; 0x114
   21568:	mov	r1, r8
   2156c:	mov	r0, r6
   21570:	bl	1b96c <__assert_fail@plt+0xa414>
   21574:	cmp	r0, #0
   21578:	beq	21630 <__assert_fail@plt+0x100d8>
   2157c:	ldr	r4, [sp, #316]	; 0x13c
   21580:	add	r4, r0, r4
   21584:	ldr	r3, [sp, #396]	; 0x18c
   21588:	cmp	r3, r0
   2158c:	movlt	r3, r0
   21590:	str	r3, [sp, #396]	; 0x18c
   21594:	mov	r1, r4
   21598:	add	r0, sp, #276	; 0x114
   2159c:	bl	1a900 <__assert_fail@plt+0x93a8>
   215a0:	str	r0, [sp, #124]	; 0x7c
   215a4:	cmp	r0, #0
   215a8:	bne	216e8 <__assert_fail@plt+0x10190>
   215ac:	ldr	r3, [r6, #12]
   215b0:	ldr	r3, [r3, r8, lsl #2]
   215b4:	add	r3, r3, r3, lsl #1
   215b8:	lsl	r3, r3, #2
   215bc:	ldr	r0, [r6, #24]
   215c0:	add	r2, r0, r3
   215c4:	ldr	r8, [sp, #376]	; 0x178
   215c8:	ldr	r1, [r8, r4, lsl #2]
   215cc:	cmp	r1, #0
   215d0:	beq	216a0 <__assert_fail@plt+0x10148>
   215d4:	ldr	r1, [r1, #40]	; 0x28
   215d8:	add	r0, sp, #136	; 0x88
   215dc:	bl	17ba4 <__assert_fail@plt+0x664c>
   215e0:	str	r0, [sp, #124]	; 0x7c
   215e4:	cmp	r0, #0
   215e8:	bne	216e8 <__assert_fail@plt+0x10190>
   215ec:	ldr	r2, [sp, #364]	; 0x16c
   215f0:	sub	r1, r4, #1
   215f4:	add	r0, sp, #276	; 0x114
   215f8:	bl	1a550 <__assert_fail@plt+0x8ff8>
   215fc:	ldr	r8, [sp, #376]	; 0x178
   21600:	mov	r3, r0
   21604:	add	r2, sp, #136	; 0x88
   21608:	mov	r1, r6
   2160c:	add	r0, sp, #124	; 0x7c
   21610:	bl	19378 <__assert_fail@plt+0x7e20>
   21614:	str	r0, [r8, r4, lsl #2]
   21618:	ldr	r0, [sp, #144]	; 0x90
   2161c:	bl	13eac <__assert_fail@plt+0x2954>
   21620:	ldr	r3, [sp, #376]	; 0x178
   21624:	ldr	r3, [r3, r4, lsl #2]
   21628:	cmp	r3, #0
   2162c:	beq	216dc <__assert_fail@plt+0x10184>
   21630:	add	r7, r7, #1
   21634:	ldr	r3, [r5, #8]
   21638:	cmp	r7, r3
   2163c:	bge	22324 <__assert_fail@plt+0x10dcc>
   21640:	ldr	r3, [r5, #12]
   21644:	ldr	r8, [r3, r7, lsl #2]
   21648:	ldr	r4, [r6]
   2164c:	add	r4, r4, r8, lsl #3
   21650:	ldrb	r3, [r4, #6]
   21654:	tst	r3, #16
   21658:	beq	21630 <__assert_fail@plt+0x100d8>
   2165c:	ldr	r3, [r4, #4]
   21660:	ldr	r2, [sp, #40]	; 0x28
   21664:	tst	r2, r3
   21668:	beq	21560 <__assert_fail@plt+0x10008>
   2166c:	ldr	r2, [sp, #364]	; 0x16c
   21670:	ldr	r1, [sp, #316]	; 0x13c
   21674:	add	r0, sp, #276	; 0x114
   21678:	bl	1a550 <__assert_fail@plt+0x8ff8>
   2167c:	ldr	r3, [r4, #4]
   21680:	ubfx	r3, r3, #8, #10
   21684:	tst	r3, #4
   21688:	beq	21530 <__assert_fail@plt+0xffd8>
   2168c:	tst	r0, #1
   21690:	beq	21630 <__assert_fail@plt+0x100d8>
   21694:	tst	r3, #8
   21698:	beq	21540 <__assert_fail@plt+0xffe8>
   2169c:	b	21630 <__assert_fail@plt+0x100d8>
   216a0:	ldrd	r0, [r0, r3]
   216a4:	strd	r0, [sp, #136]	; 0x88
   216a8:	ldr	r3, [r2, #8]
   216ac:	str	r3, [sp, #144]	; 0x90
   216b0:	ldr	r2, [sp, #364]	; 0x16c
   216b4:	sub	r1, r4, #1
   216b8:	add	r0, sp, #276	; 0x114
   216bc:	bl	1a550 <__assert_fail@plt+0x8ff8>
   216c0:	mov	r3, r0
   216c4:	add	r2, sp, #136	; 0x88
   216c8:	mov	r1, r6
   216cc:	add	r0, sp, #124	; 0x7c
   216d0:	bl	19378 <__assert_fail@plt+0x7e20>
   216d4:	str	r0, [r8, r4, lsl #2]
   216d8:	b	21620 <__assert_fail@plt+0x100c8>
   216dc:	ldr	r0, [sp, #124]	; 0x7c
   216e0:	cmp	r0, #0
   216e4:	beq	21630 <__assert_fail@plt+0x100d8>
   216e8:	str	r0, [sp, #112]	; 0x70
   216ec:	ldr	r3, [sp, #376]	; 0x178
   216f0:	cmp	r3, #0
   216f4:	beq	22574 <__assert_fail@plt+0x1101c>
   216f8:	mov	r4, #0
   216fc:	b	21894 <__assert_fail@plt+0x1033c>
   21700:	ldr	r6, [r5, #48]	; 0x30
   21704:	cmp	r6, #0
   21708:	beq	21730 <__assert_fail@plt+0x101d8>
   2170c:	ldr	r2, [sp, #364]	; 0x16c
   21710:	ldr	r1, [sp, #316]	; 0x13c
   21714:	sub	r1, r1, #1
   21718:	add	r0, sp, #276	; 0x114
   2171c:	bl	1a550 <__assert_fail@plt+0x8ff8>
   21720:	tst	r0, #1
   21724:	addne	r4, r4, #256	; 0x100
   21728:	ldr	r4, [r6, r4, lsl #2]
   2172c:	b	21888 <__assert_fail@plt+0x10330>
   21730:	mov	r1, r5
   21734:	ldr	r0, [sp, #360]	; 0x168
   21738:	bl	1c5d8 <__assert_fail@plt+0xb080>
   2173c:	cmp	r0, #0
   21740:	bne	21878 <__assert_fail@plt+0x10320>
   21744:	mov	r3, #12
   21748:	str	r3, [sp, #112]	; 0x70
   2174c:	b	216ec <__assert_fail@plt+0x10194>
   21750:	ldr	r3, [sp, #112]	; 0x70
   21754:	cmp	r3, #0
   21758:	bne	22314 <__assert_fail@plt+0x10dbc>
   2175c:	ldr	r3, [sp, #376]	; 0x178
   21760:	cmp	r3, #0
   21764:	beq	22580 <__assert_fail@plt+0x11028>
   21768:	ldr	r3, [sp, #12]
   2176c:	ldr	r2, [sp, #16]
   21770:	cmp	r3, #0
   21774:	eorne	r3, r2, #1
   21778:	moveq	r3, #0
   2177c:	cmp	r3, #0
   21780:	bne	22580 <__assert_fail@plt+0x11028>
   21784:	mov	r6, #0
   21788:	ldr	r0, [sp, #380]	; 0x17c
   2178c:	ldr	r2, [sp, #316]	; 0x13c
   21790:	ldr	r3, [sp, #376]	; 0x178
   21794:	add	r3, r3, r2, lsl #2
   21798:	add	r2, r2, #1
   2179c:	cmp	r0, r2
   217a0:	blt	22580 <__assert_fail@plt+0x11028>
   217a4:	ldr	r1, [sp, #316]	; 0x13c
   217a8:	add	r1, r1, #1
   217ac:	str	r1, [sp, #316]	; 0x13c
   217b0:	ldr	r1, [r3, #4]!
   217b4:	cmp	r1, #0
   217b8:	beq	21798 <__assert_fail@plt+0x10240>
   217bc:	mov	r2, r6
   217c0:	add	r1, sp, #276	; 0x114
   217c4:	add	r0, sp, #112	; 0x70
   217c8:	bl	200ec <__assert_fail@plt+0xeb94>
   217cc:	ldr	r3, [sp, #112]	; 0x70
   217d0:	orrs	r3, r0, r3
   217d4:	beq	21788 <__assert_fail@plt+0x10230>
   217d8:	mov	r4, r0
   217dc:	cmp	r0, #0
   217e0:	bne	218b0 <__assert_fail@plt+0x10358>
   217e4:	b	22580 <__assert_fail@plt+0x11028>
   217e8:	ldr	r3, [sp, #84]	; 0x54
   217ec:	cmp	r5, r4
   217f0:	movne	sl, r3
   217f4:	ldr	r3, [sp, #36]	; 0x24
   217f8:	cmp	r5, r4
   217fc:	moveq	r3, r9
   21800:	str	r3, [sp, #36]	; 0x24
   21804:	b	218b8 <__assert_fail@plt+0x10360>
   21808:	ldr	fp, [sp, #316]	; 0x13c
   2180c:	ldr	r3, [sp, #16]
   21810:	cmp	r3, #0
   21814:	beq	2259c <__assert_fail@plt+0x11044>
   21818:	mov	r3, #1
   2181c:	str	r3, [sp, #12]
   21820:	mov	r3, #0
   21824:	str	r3, [sp, #28]
   21828:	mov	r5, r4
   2182c:	ldr	r1, [sp, #316]	; 0x13c
   21830:	ldr	r3, [sp, #332]	; 0x14c
   21834:	cmp	r1, r3
   21838:	bge	22580 <__assert_fail@plt+0x11028>
   2183c:	add	r9, r1, #1
   21840:	ldr	r3, [sp, #312]	; 0x138
   21844:	cmp	r9, r3
   21848:	bge	214dc <__assert_fail@plt+0xff84>
   2184c:	ldr	r3, [sp, #304]	; 0x130
   21850:	cmp	r9, r3
   21854:	bge	21508 <__assert_fail@plt+0xffb0>
   21858:	ldrb	r3, [r5, #52]	; 0x34
   2185c:	tst	r3, #32
   21860:	bne	21518 <__assert_fail@plt+0xffc0>
   21864:	ldr	r3, [sp, #316]	; 0x13c
   21868:	add	r2, r3, #1
   2186c:	str	r2, [sp, #316]	; 0x13c
   21870:	ldr	r2, [sp, #280]	; 0x118
   21874:	ldrb	r4, [r2, r3]
   21878:	ldr	r3, [r5, #44]	; 0x2c
   2187c:	cmp	r3, #0
   21880:	beq	21700 <__assert_fail@plt+0x101a8>
   21884:	ldr	r4, [r3, r4, lsl #2]
   21888:	ldr	r3, [sp, #376]	; 0x178
   2188c:	cmp	r3, #0
   21890:	beq	218a8 <__assert_fail@plt+0x10350>
   21894:	mov	r2, r4
   21898:	add	r1, sp, #276	; 0x114
   2189c:	add	r0, sp, #112	; 0x70
   218a0:	bl	200ec <__assert_fail@plt+0xeb94>
   218a4:	mov	r4, r0
   218a8:	cmp	r4, #0
   218ac:	beq	21750 <__assert_fail@plt+0x101f8>
   218b0:	cmp	sl, #0
   218b4:	bne	217e8 <__assert_fail@plt+0x10290>
   218b8:	ldrb	r3, [r4, #52]	; 0x34
   218bc:	tst	r3, #16
   218c0:	beq	21828 <__assert_fail@plt+0x102d0>
   218c4:	tst	r3, #128	; 0x80
   218c8:	beq	21808 <__assert_fail@plt+0x102b0>
   218cc:	ldr	r2, [sp, #316]	; 0x13c
   218d0:	mov	r1, r4
   218d4:	add	r0, sp, #276	; 0x114
   218d8:	bl	1aae8 <__assert_fail@plt+0x9590>
   218dc:	cmp	r0, #0
   218e0:	beq	21828 <__assert_fail@plt+0x102d0>
   218e4:	b	21808 <__assert_fail@plt+0x102b0>
   218e8:	ldr	r9, [sp, #28]
   218ec:	mov	r3, sl
   218f0:	ldr	sl, [sp, #12]
   218f4:	mov	r2, r5
   218f8:	mov	r1, r4
   218fc:	mov	r0, r9
   21900:	bl	1eec0 <__assert_fail@plt+0xd968>
   21904:	mov	r8, r0
   21908:	mov	r0, r5
   2190c:	bl	13eac <__assert_fail@plt+0x2954>
   21910:	cmp	r8, #0
   21914:	beq	2196c <__assert_fail@plt+0x10414>
   21918:	mov	r5, #0
   2191c:	b	22378 <__assert_fail@plt+0x10e20>
   21920:	str	r4, [sp, #136]	; 0x88
   21924:	mov	r3, #0
   21928:	str	r3, [sp, #140]	; 0x8c
   2192c:	str	r7, [sp, #144]	; 0x90
   21930:	str	fp, [sp, #148]	; 0x94
   21934:	str	r3, [sp, #152]	; 0x98
   21938:	str	r3, [sp, #156]	; 0x9c
   2193c:	str	r3, [sp, #160]	; 0xa0
   21940:	add	r1, sp, #136	; 0x88
   21944:	add	r0, sp, #276	; 0x114
   21948:	bl	2094c <__assert_fail@plt+0xf3f4>
   2194c:	mov	r8, r0
   21950:	ldr	r0, [sp, #160]	; 0xa0
   21954:	bl	13eac <__assert_fail@plt+0x2954>
   21958:	cmp	r8, #0
   2195c:	bne	22374 <__assert_fail@plt+0x10e1c>
   21960:	ldr	r5, [r4]
   21964:	cmp	r5, #0
   21968:	beq	22360 <__assert_fail@plt+0x10e08>
   2196c:	mov	r8, sl
   21970:	ldr	sl, [sp, #52]	; 0x34
   21974:	ldr	r0, [sp, #376]	; 0x178
   21978:	bl	13eac <__assert_fail@plt+0x2954>
   2197c:	str	r4, [sp, #376]	; 0x178
   21980:	str	r7, [sp, #372]	; 0x174
   21984:	str	fp, [sp, #368]	; 0x170
   21988:	mov	r0, #0
   2198c:	bl	13eac <__assert_fail@plt+0x2954>
   21990:	mov	r0, #0
   21994:	bl	13eac <__assert_fail@plt+0x2954>
   21998:	b	225f0 <__assert_fail@plt+0x11098>
   2199c:	ldr	sl, [sp, #52]	; 0x34
   219a0:	mov	r3, #1
   219a4:	str	r3, [sp, #24]
   219a8:	b	21228 <__assert_fail@plt+0xfcd0>
   219ac:	mov	r8, sl
   219b0:	ldr	sl, [sp, #52]	; 0x34
   219b4:	b	225f0 <__assert_fail@plt+0x11098>
   219b8:	ldrb	r3, [sl, #88]	; 0x58
   219bc:	tst	r3, #1
   219c0:	beq	2224c <__assert_fail@plt+0x10cf4>
   219c4:	ldr	r3, [sl, #76]	; 0x4c
   219c8:	cmp	r3, #0
   219cc:	ble	2224c <__assert_fail@plt+0x10cf4>
   219d0:	ldr	r3, [sp, #20]
   219d4:	ldr	r3, [r3]
   219d8:	str	r3, [sp, #16]
   219dc:	mov	r3, #0
   219e0:	str	r3, [sp, #124]	; 0x7c
   219e4:	mov	r2, #2
   219e8:	str	r2, [sp, #128]	; 0x80
   219ec:	str	r3, [sp, #132]	; 0x84
   219f0:	str	r3, [sp, #136]	; 0x88
   219f4:	mov	r3, #16
   219f8:	str	r3, [sp, #140]	; 0x8c
   219fc:	add	r3, sp, #148	; 0x94
   21a00:	str	r3, [sp, #144]	; 0x90
   21a04:	mov	r0, #48	; 0x30
   21a08:	bl	258f4 <__assert_fail@plt+0x1439c>
   21a0c:	str	r0, [sp, #132]	; 0x84
   21a10:	cmp	r0, #0
   21a14:	beq	22240 <__assert_fail@plt+0x10ce8>
   21a18:	add	fp, sp, #124	; 0x7c
   21a1c:	b	22280 <__assert_fail@plt+0x10d28>
   21a20:	mov	r3, #8
   21a24:	add	r2, sp, #148	; 0x94
   21a28:	ldr	r1, [sp, #64]	; 0x40
   21a2c:	add	r0, sp, #136	; 0x88
   21a30:	bl	25a18 <__assert_fail@plt+0x144c0>
   21a34:	cmp	r0, #0
   21a38:	bne	222b0 <__assert_fail@plt+0x10d58>
   21a3c:	ldr	r0, [sp, #144]	; 0x90
   21a40:	add	r3, sp, #148	; 0x94
   21a44:	cmp	r0, r3
   21a48:	beq	21a50 <__assert_fail@plt+0x104f8>
   21a4c:	bl	13eac <__assert_fail@plt+0x2954>
   21a50:	add	r3, sp, #148	; 0x94
   21a54:	str	r3, [sp, #144]	; 0x90
   21a58:	mov	r3, #0
   21a5c:	str	r3, [sp, #136]	; 0x88
   21a60:	mvn	r3, #0
   21a64:	str	r3, [sp, #140]	; 0x8c
   21a68:	add	r0, sp, #136	; 0x88
   21a6c:	bl	1996c <__assert_fail@plt+0x8414>
   21a70:	mov	r0, fp
   21a74:	bl	199b4 <__assert_fail@plt+0x845c>
   21a78:	mov	r3, #12
   21a7c:	str	r3, [sp, #24]
   21a80:	b	21228 <__assert_fail@plt+0xfcd0>
   21a84:	ldr	r3, [r2, r7, lsl #3]
   21a88:	add	r3, r3, #1
   21a8c:	ldr	r2, [sp, #64]	; 0x40
   21a90:	cmp	r2, r3
   21a94:	ble	21e10 <__assert_fail@plt+0x108b8>
   21a98:	ldr	r2, [sp, #468]	; 0x1d4
   21a9c:	add	r2, r2, r3, lsl #3
   21aa0:	ldr	r0, [sp, #468]	; 0x1d4
   21aa4:	str	r1, [r0, r3, lsl #3]
   21aa8:	mvn	r3, #0
   21aac:	str	r3, [r2, #4]
   21ab0:	b	21e10 <__assert_fail@plt+0x108b8>
   21ab4:	ldr	r3, [r2, r0]
   21ab8:	add	r3, r3, #1
   21abc:	ldr	r2, [sp, #64]	; 0x40
   21ac0:	cmp	r2, r3
   21ac4:	ble	21e10 <__assert_fail@plt+0x108b8>
   21ac8:	ldr	r2, [sp, #468]	; 0x1d4
   21acc:	add	r2, r2, r3, lsl #3
   21ad0:	ldr	r0, [sp, #468]	; 0x1d4
   21ad4:	ldr	r0, [r0, r3, lsl #3]
   21ad8:	cmp	r1, r0
   21adc:	bgt	21b04 <__assert_fail@plt+0x105ac>
   21ae0:	ldrb	r0, [ip, #6]
   21ae4:	tst	r0, #8
   21ae8:	beq	21afc <__assert_fail@plt+0x105a4>
   21aec:	ldr	r0, [sp, #32]
   21af0:	ldr	r3, [r0, r3, lsl #3]
   21af4:	cmn	r3, #1
   21af8:	bne	21b1c <__assert_fail@plt+0x105c4>
   21afc:	str	r1, [r2, #4]
   21b00:	b	21e10 <__assert_fail@plt+0x108b8>
   21b04:	str	r1, [r2, #4]
   21b08:	ldr	r2, [sp, #36]	; 0x24
   21b0c:	ldr	r1, [sp, #468]	; 0x1d4
   21b10:	ldr	r0, [sp, #32]
   21b14:	bl	11264 <memcpy@plt>
   21b18:	b	21e10 <__assert_fail@plt+0x108b8>
   21b1c:	ldr	r2, [sp, #36]	; 0x24
   21b20:	mov	r1, r0
   21b24:	ldr	r0, [sp, #468]	; 0x1d4
   21b28:	bl	11264 <memcpy@plt>
   21b2c:	b	21e10 <__assert_fail@plt+0x108b8>
   21b30:	ldr	r3, [sp, #372]	; 0x174
   21b34:	cmp	r7, r3
   21b38:	bne	21e24 <__assert_fail@plt+0x108cc>
   21b3c:	cmp	fp, #0
   21b40:	beq	21bd4 <__assert_fail@plt+0x1067c>
   21b44:	ldr	r3, [sp, #24]
   21b48:	b	21b50 <__assert_fail@plt+0x105f8>
   21b4c:	ldr	r3, [sp, #24]
   21b50:	ldr	r1, [sp, #12]
   21b54:	b	21b64 <__assert_fail@plt+0x1060c>
   21b58:	add	r3, r3, #1
   21b5c:	cmp	r1, r3
   21b60:	beq	21bb4 <__assert_fail@plt+0x1065c>
   21b64:	ldr	r2, [sp, #468]	; 0x1d4
   21b68:	ldr	r2, [r2, r3, lsl #3]
   21b6c:	cmp	r2, #0
   21b70:	blt	21b58 <__assert_fail@plt+0x10600>
   21b74:	ldr	r2, [r9, r3, lsl #3]
   21b78:	cmn	r2, #1
   21b7c:	bne	21b58 <__assert_fail@plt+0x10600>
   21b80:	add	r3, sp, #112	; 0x70
   21b84:	str	r3, [sp, #4]
   21b88:	ldr	r3, [sp, #32]
   21b8c:	str	r3, [sp]
   21b90:	ldr	r3, [sp, #468]	; 0x1d4
   21b94:	ldr	r2, [sp, #12]
   21b98:	add	r1, sp, #108	; 0x6c
   21b9c:	mov	r0, fp
   21ba0:	bl	1abdc <__assert_fail@plt+0x9684>
   21ba4:	subs	r7, r0, #0
   21ba8:	bge	21e40 <__assert_fail@plt+0x108e8>
   21bac:	ldr	sl, [sp, #28]
   21bb0:	b	21bb8 <__assert_fail@plt+0x10660>
   21bb4:	ldr	sl, [sp, #28]
   21bb8:	ldr	r0, [sp, #120]	; 0x78
   21bbc:	bl	13eac <__assert_fail@plt+0x2954>
   21bc0:	add	r0, sp, #136	; 0x88
   21bc4:	bl	1996c <__assert_fail@plt+0x8414>
   21bc8:	mov	r0, fp
   21bcc:	bl	199b4 <__assert_fail@plt+0x845c>
   21bd0:	b	22078 <__assert_fail@plt+0x10b20>
   21bd4:	ldr	sl, [sp, #28]
   21bd8:	b	21bb8 <__assert_fail@plt+0x10660>
   21bdc:	mov	r1, r7
   21be0:	add	r0, sp, #112	; 0x70
   21be4:	bl	19bb8 <__assert_fail@plt+0x8660>
   21be8:	cmp	r0, #0
   21bec:	bne	21e90 <__assert_fail@plt+0x10938>
   21bf0:	ldr	sl, [sp, #28]
   21bf4:	ldr	r0, [sp, #120]	; 0x78
   21bf8:	bl	13eac <__assert_fail@plt+0x2954>
   21bfc:	add	r0, sp, #136	; 0x88
   21c00:	bl	1996c <__assert_fail@plt+0x8414>
   21c04:	mov	r0, fp
   21c08:	bl	199b4 <__assert_fail@plt+0x845c>
   21c0c:	mov	r3, #12
   21c10:	str	r3, [sp, #24]
   21c14:	b	21228 <__assert_fail@plt+0xfcd0>
   21c18:	mov	r1, r7
   21c1c:	add	r0, sp, #112	; 0x70
   21c20:	bl	16530 <__assert_fail@plt+0x4fd8>
   21c24:	cmp	r0, #0
   21c28:	bne	22034 <__assert_fail@plt+0x10adc>
   21c2c:	cmp	fp, #0
   21c30:	beq	21dc8 <__assert_fail@plt+0x10870>
   21c34:	ldr	r8, [sp, #108]	; 0x6c
   21c38:	ldr	r4, [fp]
   21c3c:	add	r3, r4, #1
   21c40:	str	r3, [fp]
   21c44:	ldr	r1, [fp, #4]
   21c48:	cmp	r3, r1
   21c4c:	beq	21ce4 <__assert_fail@plt+0x1078c>
   21c50:	add	r4, r4, r4, lsl #1
   21c54:	lsl	r6, r4, #3
   21c58:	ldr	r3, [fp, #8]
   21c5c:	str	r8, [r3, r4, lsl #3]
   21c60:	ldr	r3, [fp, #8]
   21c64:	add	r3, r3, r6
   21c68:	str	r5, [r3, #4]
   21c6c:	ldr	r4, [fp, #8]
   21c70:	add	r4, r4, r6
   21c74:	ldr	r0, [sp, #40]	; 0x28
   21c78:	bl	258f4 <__assert_fail@plt+0x1439c>
   21c7c:	str	r0, [r4, #8]
   21c80:	ldr	r3, [fp, #8]
   21c84:	add	r3, r3, r6
   21c88:	ldr	r0, [r3, #8]
   21c8c:	cmp	r0, #0
   21c90:	beq	2204c <__assert_fail@plt+0x10af4>
   21c94:	ldr	r4, [sp, #36]	; 0x24
   21c98:	mov	r2, r4
   21c9c:	ldr	r1, [sp, #468]	; 0x1d4
   21ca0:	bl	11264 <memcpy@plt>
   21ca4:	ldr	r3, [fp, #8]
   21ca8:	add	r3, r3, r6
   21cac:	ldr	r0, [r3, #8]
   21cb0:	mov	r2, r4
   21cb4:	ldr	r1, [sp, #32]
   21cb8:	add	r0, r0, r4
   21cbc:	bl	11264 <memcpy@plt>
   21cc0:	ldr	r0, [fp, #8]
   21cc4:	add	r0, r0, r6
   21cc8:	add	r1, sp, #112	; 0x70
   21ccc:	add	r0, r0, #12
   21cd0:	bl	17b1c <__assert_fail@plt+0x65c4>
   21cd4:	cmp	r0, #0
   21cd8:	beq	21dc8 <__assert_fail@plt+0x10870>
   21cdc:	ldr	sl, [sp, #28]
   21ce0:	b	21bf4 <__assert_fail@plt+0x1069c>
   21ce4:	add	r1, r1, r1, lsl #1
   21ce8:	lsl	r1, r1, #4
   21cec:	ldr	r0, [fp, #8]
   21cf0:	bl	25930 <__assert_fail@plt+0x143d8>
   21cf4:	cmp	r0, #0
   21cf8:	beq	22044 <__assert_fail@plt+0x10aec>
   21cfc:	ldr	r3, [fp, #4]
   21d00:	lsl	r3, r3, #1
   21d04:	str	r3, [fp, #4]
   21d08:	str	r0, [fp, #8]
   21d0c:	b	21c50 <__assert_fail@plt+0x106f8>
   21d10:	add	r4, r4, #1
   21d14:	cmp	sl, r4
   21d18:	beq	21dc8 <__assert_fail@plt+0x10870>
   21d1c:	ldr	r5, [r6, #4]!
   21d20:	mov	r1, r5
   21d24:	mov	r0, r8
   21d28:	bl	16530 <__assert_fail@plt+0x4fd8>
   21d2c:	cmp	r0, #0
   21d30:	beq	21d10 <__assert_fail@plt+0x107b8>
   21d34:	cmn	r7, #1
   21d38:	bne	21c18 <__assert_fail@plt+0x106c0>
   21d3c:	mov	r7, r5
   21d40:	b	21d10 <__assert_fail@plt+0x107b8>
   21d44:	ldrb	r3, [r3, #6]
   21d48:	tst	r3, #16
   21d4c:	bne	21eb0 <__assert_fail@plt+0x10958>
   21d50:	cmp	r2, #4
   21d54:	beq	21ee0 <__assert_fail@plt+0x10988>
   21d58:	ldr	r5, [sp, #108]	; 0x6c
   21d5c:	ldr	r1, [r4]
   21d60:	mov	r2, r5
   21d64:	add	r1, r1, r6
   21d68:	add	r0, sp, #276	; 0x114
   21d6c:	bl	1a65c <__assert_fail@plt+0x9104>
   21d70:	cmp	r0, #0
   21d74:	beq	21f70 <__assert_fail@plt+0x10a18>
   21d78:	ldr	r3, [r4, #12]
   21d7c:	ldr	r7, [r3, r8, lsl #2]
   21d80:	add	r5, r5, #1
   21d84:	str	r5, [sp, #108]	; 0x6c
   21d88:	cmp	fp, #0
   21d8c:	beq	21dc0 <__assert_fail@plt+0x10868>
   21d90:	ldr	r3, [sp, #368]	; 0x170
   21d94:	cmp	r5, r3
   21d98:	bgt	21f70 <__assert_fail@plt+0x10a18>
   21d9c:	ldr	r3, [sp, #376]	; 0x178
   21da0:	ldr	r0, [r3, r5, lsl #2]
   21da4:	cmp	r0, #0
   21da8:	beq	21f70 <__assert_fail@plt+0x10a18>
   21dac:	mov	r1, r7
   21db0:	add	r0, r0, #4
   21db4:	bl	16530 <__assert_fail@plt+0x4fd8>
   21db8:	cmp	r0, #0
   21dbc:	beq	21f70 <__assert_fail@plt+0x10a18>
   21dc0:	mov	r3, #0
   21dc4:	str	r3, [sp, #116]	; 0x74
   21dc8:	cmp	r7, #0
   21dcc:	blt	21f74 <__assert_fail@plt+0x10a1c>
   21dd0:	ldr	r1, [sp, #108]	; 0x6c
   21dd4:	ldr	r3, [sp, #468]	; 0x1d4
   21dd8:	ldr	r3, [r3, #4]
   21ddc:	cmp	r1, r3
   21de0:	bgt	2205c <__assert_fail@plt+0x10b04>
   21de4:	ldr	r3, [sp, #12]
   21de8:	str	r3, [sp, #20]
   21dec:	lsl	r0, r7, #3
   21df0:	ldr	r3, [sp, #16]
   21df4:	ldr	r2, [r3]
   21df8:	add	ip, r2, r0
   21dfc:	ldrb	r3, [ip, #4]
   21e00:	cmp	r3, #8
   21e04:	beq	21a84 <__assert_fail@plt+0x1052c>
   21e08:	cmp	r3, #9
   21e0c:	beq	21ab4 <__assert_fail@plt+0x1055c>
   21e10:	ldr	r3, [sp, #468]	; 0x1d4
   21e14:	ldr	r2, [r3, #4]
   21e18:	ldr	r3, [sp, #108]	; 0x6c
   21e1c:	cmp	r2, r3
   21e20:	beq	21b30 <__assert_fail@plt+0x105d8>
   21e24:	cmp	fp, #0
   21e28:	beq	21e40 <__assert_fail@plt+0x108e8>
   21e2c:	mov	r1, r7
   21e30:	add	r0, sp, #112	; 0x70
   21e34:	bl	16530 <__assert_fail@plt+0x4fd8>
   21e38:	cmp	r0, #0
   21e3c:	bne	21b4c <__assert_fail@plt+0x105f4>
   21e40:	ldr	r4, [sp, #360]	; 0x168
   21e44:	mov	r8, r7
   21e48:	lsl	r6, r7, #3
   21e4c:	ldr	r1, [r4]
   21e50:	add	r3, r1, r6
   21e54:	ldrb	r2, [r3, #4]
   21e58:	tst	r2, #8
   21e5c:	beq	21d44 <__assert_fail@plt+0x107ec>
   21e60:	ldr	r2, [sp, #108]	; 0x6c
   21e64:	ldr	r3, [sp, #376]	; 0x178
   21e68:	ldr	r8, [r3, r2, lsl #2]
   21e6c:	add	r8, r8, #4
   21e70:	add	r3, r7, r7, lsl #1
   21e74:	ldr	r4, [r4, #20]
   21e78:	add	r4, r4, r3, lsl #2
   21e7c:	mov	r1, r7
   21e80:	add	r0, sp, #112	; 0x70
   21e84:	bl	16530 <__assert_fail@plt+0x4fd8>
   21e88:	cmp	r0, #0
   21e8c:	beq	21bdc <__assert_fail@plt+0x10684>
   21e90:	ldr	sl, [r4, #4]
   21e94:	cmp	sl, #0
   21e98:	ble	21f70 <__assert_fail@plt+0x10a18>
   21e9c:	ldr	r6, [r4, #8]
   21ea0:	sub	r6, r6, #4
   21ea4:	ldr	r4, [sp, #24]
   21ea8:	mvn	r7, #0
   21eac:	b	21d1c <__assert_fail@plt+0x107c4>
   21eb0:	ldr	r3, [sp, #108]	; 0x6c
   21eb4:	add	r2, sp, #276	; 0x114
   21eb8:	mov	r1, r7
   21ebc:	mov	r0, r4
   21ec0:	bl	1b96c <__assert_fail@plt+0xa414>
   21ec4:	subs	r5, r0, #0
   21ec8:	beq	21d58 <__assert_fail@plt+0x10800>
   21ecc:	ldr	r3, [r4, #12]
   21ed0:	ldr	r7, [r3, r8, lsl #2]
   21ed4:	ldr	r3, [sp, #108]	; 0x6c
   21ed8:	add	r5, r5, r3
   21edc:	b	21d84 <__assert_fail@plt+0x1082c>
   21ee0:	ldr	r3, [r1, r6]
   21ee4:	add	r3, r3, #1
   21ee8:	ldr	r2, [sp, #64]	; 0x40
   21eec:	cmp	r2, r3
   21ef0:	ble	21fd0 <__assert_fail@plt+0x10a78>
   21ef4:	ldr	r2, [sp, #468]	; 0x1d4
   21ef8:	add	r2, r2, r3, lsl #3
   21efc:	ldr	r5, [r2, #4]
   21f00:	ldr	r2, [sp, #468]	; 0x1d4
   21f04:	ldr	r2, [r2, r3, lsl #3]
   21f08:	sub	r5, r5, r2
   21f0c:	cmp	fp, #0
   21f10:	beq	22028 <__assert_fail@plt+0x10ad0>
   21f14:	ldr	r2, [sp, #468]	; 0x1d4
   21f18:	add	r2, r2, r3, lsl #3
   21f1c:	ldr	r1, [sp, #468]	; 0x1d4
   21f20:	ldr	r0, [r1, r3, lsl #3]
   21f24:	cmn	r0, #1
   21f28:	beq	21f70 <__assert_fail@plt+0x10a18>
   21f2c:	ldr	r3, [r2, #4]
   21f30:	cmn	r3, #1
   21f34:	beq	21f70 <__assert_fail@plt+0x10a18>
   21f38:	cmp	r5, #0
   21f3c:	beq	21fdc <__assert_fail@plt+0x10a84>
   21f40:	ldr	ip, [sp, #280]	; 0x118
   21f44:	ldr	r1, [sp, #108]	; 0x6c
   21f48:	ldr	r3, [sp, #304]	; 0x130
   21f4c:	sub	r3, r3, r1
   21f50:	cmp	r5, r3
   21f54:	bgt	21f70 <__assert_fail@plt+0x10a18>
   21f58:	mov	r2, r5
   21f5c:	add	r1, ip, r1
   21f60:	add	r0, ip, r0
   21f64:	bl	112b8 <memcmp@plt>
   21f68:	cmp	r0, #0
   21f6c:	beq	21ecc <__assert_fail@plt+0x10974>
   21f70:	mvn	r7, #0
   21f74:	cmn	r7, #2
   21f78:	beq	2203c <__assert_fail@plt+0x10ae4>
   21f7c:	add	r3, sp, #112	; 0x70
   21f80:	str	r3, [sp, #4]
   21f84:	ldr	r3, [sp, #32]
   21f88:	str	r3, [sp]
   21f8c:	ldr	r3, [sp, #468]	; 0x1d4
   21f90:	ldr	r2, [sp, #20]
   21f94:	add	r1, sp, #108	; 0x6c
   21f98:	mov	r0, fp
   21f9c:	bl	1abdc <__assert_fail@plt+0x9684>
   21fa0:	subs	r7, r0, #0
   21fa4:	bge	21dd0 <__assert_fail@plt+0x10878>
   21fa8:	ldr	sl, [sp, #28]
   21fac:	ldr	r0, [sp, #120]	; 0x78
   21fb0:	bl	13eac <__assert_fail@plt+0x2954>
   21fb4:	add	r0, sp, #136	; 0x88
   21fb8:	bl	1996c <__assert_fail@plt+0x8414>
   21fbc:	mov	r0, fp
   21fc0:	bl	199b4 <__assert_fail@plt+0x845c>
   21fc4:	mov	r3, #1
   21fc8:	str	r3, [sp, #24]
   21fcc:	b	21228 <__assert_fail@plt+0xfcd0>
   21fd0:	cmp	fp, #0
   21fd4:	mvnne	r7, #0
   21fd8:	bne	21dc8 <__assert_fail@plt+0x10870>
   21fdc:	mov	r1, r7
   21fe0:	add	r0, sp, #112	; 0x70
   21fe4:	bl	19bb8 <__assert_fail@plt+0x8660>
   21fe8:	cmp	r0, #0
   21fec:	beq	22054 <__assert_fail@plt+0x10afc>
   21ff0:	ldr	r3, [r4, #20]
   21ff4:	add	r2, r8, r8, lsl #1
   21ff8:	add	r3, r3, r2, lsl #2
   21ffc:	ldr	r3, [r3, #8]
   22000:	ldr	r7, [r3]
   22004:	ldr	r2, [sp, #108]	; 0x6c
   22008:	ldr	r3, [sp, #376]	; 0x178
   2200c:	ldr	r0, [r3, r2, lsl #2]
   22010:	mov	r1, r7
   22014:	add	r0, r0, #4
   22018:	bl	16530 <__assert_fail@plt+0x4fd8>
   2201c:	cmp	r0, #0
   22020:	beq	21d58 <__assert_fail@plt+0x10800>
   22024:	b	21dc8 <__assert_fail@plt+0x10870>
   22028:	cmp	r5, #0
   2202c:	bne	21ecc <__assert_fail@plt+0x10974>
   22030:	b	21fdc <__assert_fail@plt+0x10a84>
   22034:	mov	r7, r5
   22038:	b	21dc8 <__assert_fail@plt+0x10870>
   2203c:	ldr	sl, [sp, #28]
   22040:	b	21bf4 <__assert_fail@plt+0x1069c>
   22044:	ldr	sl, [sp, #28]
   22048:	b	21bf4 <__assert_fail@plt+0x1069c>
   2204c:	ldr	sl, [sp, #28]
   22050:	b	21bf4 <__assert_fail@plt+0x1069c>
   22054:	ldr	sl, [sp, #28]
   22058:	b	21bf4 <__assert_fail@plt+0x1069c>
   2205c:	ldr	sl, [sp, #28]
   22060:	ldr	r0, [sp, #120]	; 0x78
   22064:	bl	13eac <__assert_fail@plt+0x2954>
   22068:	add	r0, sp, #136	; 0x88
   2206c:	bl	1996c <__assert_fail@plt+0x8414>
   22070:	mov	r0, fp
   22074:	bl	199b4 <__assert_fail@plt+0x845c>
   22078:	cmp	r0, #0
   2207c:	beq	22658 <__assert_fail@plt+0x11100>
   22080:	str	r0, [sp, #24]
   22084:	b	21228 <__assert_fail@plt+0xfcd0>
   22088:	ldr	r0, [r1, #-4]
   2208c:	add	r0, r0, ip
   22090:	str	r0, [r1, #-4]
   22094:	ldr	r0, [r1]
   22098:	add	r0, r0, ip
   2209c:	str	r0, [r1]
   220a0:	add	r2, r2, #8
   220a4:	cmp	r2, lr
   220a8:	beq	220ec <__assert_fail@plt+0x10b94>
   220ac:	mov	r1, r2
   220b0:	ldr	r0, [r2, #-4]
   220b4:	cmn	r0, #1
   220b8:	beq	220a0 <__assert_fail@plt+0x10b48>
   220bc:	cmp	r4, #0
   220c0:	beq	22088 <__assert_fail@plt+0x10b30>
   220c4:	cmp	r0, r5
   220c8:	ldrne	r0, [r6, r0, lsl #2]
   220cc:	moveq	r0, r7
   220d0:	str	r0, [r2, #-4]
   220d4:	ldr	r0, [r2]
   220d8:	cmp	r5, r0
   220dc:	ldrne	r0, [r6, r0, lsl #2]
   220e0:	moveq	r0, r7
   220e4:	str	r0, [r2]
   220e8:	b	22088 <__assert_fail@plt+0x10b30>
   220ec:	ldr	r2, [sp, #72]	; 0x48
   220f0:	cmp	r2, #0
   220f4:	ble	22120 <__assert_fail@plt+0x10bc8>
   220f8:	ldr	r2, [sp, #468]	; 0x1d4
   220fc:	add	r3, r2, r3
   22100:	ldr	r1, [sp, #464]	; 0x1d0
   22104:	add	r1, r2, r1, lsl #3
   22108:	mvn	r2, #0
   2210c:	str	r2, [r3]
   22110:	str	r2, [r3, #4]
   22114:	add	r3, r3, #8
   22118:	cmp	r1, r3
   2211c:	bne	2210c <__assert_fail@plt+0x10bb4>
   22120:	ldr	r3, [sl, #132]	; 0x84
   22124:	cmp	r3, #0
   22128:	beq	21228 <__assert_fail@plt+0xfcd0>
   2212c:	ldr	r3, [sp, #64]	; 0x40
   22130:	sub	r1, r3, #1
   22134:	mov	r3, #0
   22138:	ldr	r2, [sp, #468]	; 0x1d4
   2213c:	add	ip, r2, #8
   22140:	add	r0, r2, #12
   22144:	b	22170 <__assert_fail@plt+0x10c18>
   22148:	add	r2, r2, #1
   2214c:	ldr	lr, [sp, #468]	; 0x1d4
   22150:	ldr	r2, [lr, r2, lsl #3]
   22154:	str	r2, [ip, r3, lsl #3]
   22158:	ldr	r2, [sl, #132]	; 0x84
   2215c:	ldr	r2, [r2, r3, lsl #2]
   22160:	add	r2, lr, r2, lsl #3
   22164:	ldr	r2, [r2, #12]
   22168:	str	r2, [r0, r3, lsl #3]
   2216c:	add	r3, r3, #1
   22170:	cmp	r3, r1
   22174:	beq	21228 <__assert_fail@plt+0xfcd0>
   22178:	ldr	r2, [sl, #132]	; 0x84
   2217c:	ldr	r2, [r2, r3, lsl #2]
   22180:	cmp	r3, r2
   22184:	bne	22148 <__assert_fail@plt+0x10bf0>
   22188:	b	2216c <__assert_fail@plt+0x10c14>
   2218c:	ldr	r3, [sp, #76]	; 0x4c
   22190:	str	r3, [sp, #24]
   22194:	b	21228 <__assert_fail@plt+0xfcd0>
   22198:	mov	r3, #12
   2219c:	str	r3, [sp, #24]
   221a0:	b	21228 <__assert_fail@plt+0xfcd0>
   221a4:	mov	r3, #12
   221a8:	str	r3, [sp, #24]
   221ac:	b	21228 <__assert_fail@plt+0xfcd0>
   221b0:	mov	r3, #1
   221b4:	str	r3, [sp, #24]
   221b8:	b	21228 <__assert_fail@plt+0xfcd0>
   221bc:	ldr	sl, [sp, #52]	; 0x34
   221c0:	mov	r3, #12
   221c4:	str	r3, [sp, #24]
   221c8:	b	21228 <__assert_fail@plt+0xfcd0>
   221cc:	ldr	sl, [sp, #52]	; 0x34
   221d0:	b	21228 <__assert_fail@plt+0xfcd0>
   221d4:	ldr	sl, [sp, #52]	; 0x34
   221d8:	b	21228 <__assert_fail@plt+0xfcd0>
   221dc:	add	r0, sp, #276	; 0x114
   221e0:	bl	198a4 <__assert_fail@plt+0x834c>
   221e4:	ldr	r0, [sp, #408]	; 0x198
   221e8:	bl	13eac <__assert_fail@plt+0x2954>
   221ec:	ldr	r0, [sp, #392]	; 0x188
   221f0:	bl	13eac <__assert_fail@plt+0x2954>
   221f4:	b	2123c <__assert_fail@plt+0xfce4>
   221f8:	mov	r3, #1
   221fc:	str	r3, [sp, #24]
   22200:	b	21244 <__assert_fail@plt+0xfcec>
   22204:	mov	r3, #1
   22208:	str	r3, [sp, #24]
   2220c:	b	21244 <__assert_fail@plt+0xfcec>
   22210:	mov	r3, #1
   22214:	str	r3, [sp, #24]
   22218:	b	21244 <__assert_fail@plt+0xfcec>
   2221c:	mov	r3, #1
   22220:	str	r3, [sp, #24]
   22224:	b	21244 <__assert_fail@plt+0xfcec>
   22228:	mov	r3, #1
   2222c:	str	r3, [sp, #24]
   22230:	b	21244 <__assert_fail@plt+0xfcec>
   22234:	mov	r3, #1
   22238:	str	r3, [sp, #24]
   2223c:	b	21244 <__assert_fail@plt+0xfcec>
   22240:	mov	r3, #12
   22244:	str	r3, [sp, #24]
   22248:	b	21228 <__assert_fail@plt+0xfcd0>
   2224c:	ldr	r3, [sp, #20]
   22250:	ldr	r3, [r3]
   22254:	str	r3, [sp, #16]
   22258:	mov	fp, #0
   2225c:	str	fp, [sp, #124]	; 0x7c
   22260:	mov	r3, #2
   22264:	str	r3, [sp, #128]	; 0x80
   22268:	str	fp, [sp, #132]	; 0x84
   2226c:	str	fp, [sp, #136]	; 0x88
   22270:	mov	r3, #16
   22274:	str	r3, [sp, #140]	; 0x8c
   22278:	add	r3, sp, #148	; 0x94
   2227c:	str	r3, [sp, #144]	; 0x90
   22280:	ldr	r3, [sp, #16]
   22284:	ldr	r7, [r3, #72]	; 0x48
   22288:	mov	r3, #0
   2228c:	str	r3, [sp, #112]	; 0x70
   22290:	str	r3, [sp, #116]	; 0x74
   22294:	str	r3, [sp, #120]	; 0x78
   22298:	ldr	r3, [sp, #136]	; 0x88
   2229c:	ldr	r2, [sp, #64]	; 0x40
   222a0:	cmp	r2, r3
   222a4:	bhi	21a20 <__assert_fail@plt+0x104c8>
   222a8:	ldr	r3, [sp, #64]	; 0x40
   222ac:	str	r3, [sp, #136]	; 0x88
   222b0:	ldr	r3, [sp, #144]	; 0x90
   222b4:	str	r3, [sp, #32]
   222b8:	ldr	r2, [sp, #36]	; 0x24
   222bc:	ldr	r1, [sp, #468]	; 0x1d4
   222c0:	mov	r0, r3
   222c4:	bl	11264 <memcpy@plt>
   222c8:	ldr	r9, [sp, #468]	; 0x1d4
   222cc:	ldr	r3, [r9], #4
   222d0:	str	r3, [sp, #108]	; 0x6c
   222d4:	ldr	r3, [sp, #64]	; 0x40
   222d8:	lsl	r2, r3, #4
   222dc:	str	r2, [sp, #40]	; 0x28
   222e0:	str	r3, [sp, #12]
   222e4:	str	sl, [sp, #28]
   222e8:	b	21dd0 <__assert_fail@plt+0x10878>
   222ec:	mov	r3, #0
   222f0:	ldr	r2, [sp, #468]	; 0x1d4
   222f4:	str	r3, [r2]
   222f8:	ldr	r3, [sp, #368]	; 0x170
   222fc:	str	r3, [r2, #4]
   22300:	b	22658 <__assert_fail@plt+0x11100>
   22304:	ldr	sl, [sp, #52]	; 0x34
   22308:	mov	r3, #12
   2230c:	str	r3, [sp, #24]
   22310:	b	21228 <__assert_fail@plt+0xfcd0>
   22314:	ldr	sl, [sp, #52]	; 0x34
   22318:	mov	r3, #12
   2231c:	str	r3, [sp, #24]
   22320:	b	21228 <__assert_fail@plt+0xfcd0>
   22324:	mov	r3, #0
   22328:	str	r3, [sp, #112]	; 0x70
   2232c:	b	21864 <__assert_fail@plt+0x1030c>
   22330:	mov	r3, #12
   22334:	str	r3, [sp, #24]
   22338:	b	21228 <__assert_fail@plt+0xfcd0>
   2233c:	ldr	r3, [sp, #44]	; 0x2c
   22340:	str	r3, [sp, #280]	; 0x118
   22344:	ldr	r3, [sl, #92]	; 0x5c
   22348:	ldr	r2, [sp, #60]	; 0x3c
   2234c:	ldr	r1, [sp, #76]	; 0x4c
   22350:	cmp	r3, #1
   22354:	movgt	r2, r1
   22358:	mov	r3, r2
   2235c:	b	20e38 <__assert_fail@plt+0xf8e0>
   22360:	mov	r0, r4
   22364:	bl	13eac <__assert_fail@plt+0x2954>
   22368:	mov	r0, r5
   2236c:	bl	13eac <__assert_fail@plt+0x2954>
   22370:	b	22390 <__assert_fail@plt+0x10e38>
   22374:	mov	r5, #0
   22378:	mov	r0, r4
   2237c:	bl	13eac <__assert_fail@plt+0x2954>
   22380:	mov	r0, r5
   22384:	bl	13eac <__assert_fail@plt+0x2954>
   22388:	cmp	r8, #1
   2238c:	bne	223f8 <__assert_fail@plt+0x10ea0>
   22390:	add	r0, sp, #276	; 0x114
   22394:	bl	198a4 <__assert_fail@plt+0x834c>
   22398:	ldr	r3, [sp, #412]	; 0x19c
   2239c:	ldr	r2, [sp, #92]	; 0x5c
   223a0:	add	r3, r2, r3
   223a4:	str	r3, [sp, #412]	; 0x19c
   223a8:	ldr	r2, [sp, #48]	; 0x30
   223ac:	cmp	r3, r2
   223b0:	movle	r2, #0
   223b4:	movgt	r2, #1
   223b8:	ldr	r1, [sp, #56]	; 0x38
   223bc:	cmp	r3, r1
   223c0:	movge	r3, r2
   223c4:	orrlt	r3, r2, #1
   223c8:	cmp	r3, #0
   223cc:	bne	2199c <__assert_fail@plt+0x10444>
   223d0:	ldr	r3, [sp, #80]	; 0x50
   223d4:	sub	r3, r3, #4
   223d8:	cmp	r3, #4
   223dc:	ldrls	pc, [pc, r3, lsl #2]
   223e0:	b	21030 <__assert_fail@plt+0xfad8>
   223e4:			; <UNDEFINED> instruction: 0x000211b8
   223e8:			; <UNDEFINED> instruction: 0x000211b8
   223ec:	andeq	r1, r2, r0, asr r1
   223f0:	ldrdeq	r1, [r2], -r8
   223f4:	andeq	r1, r2, r8, lsl #5
   223f8:	mov	r3, r8
   223fc:	ldr	sl, [sp, #52]	; 0x34
   22400:	str	r3, [sp, #24]
   22404:	b	21228 <__assert_fail@plt+0xfcd0>
   22408:	ldr	sl, [sp, #52]	; 0x34
   2240c:	mov	r0, r4
   22410:	bl	13eac <__assert_fail@plt+0x2954>
   22414:	mov	r0, #0
   22418:	bl	13eac <__assert_fail@plt+0x2954>
   2241c:	mov	r3, #12
   22420:	b	22400 <__assert_fail@plt+0x10ea8>
   22424:	mov	r2, fp
   22428:	ldr	r3, [sp, #376]	; 0x178
   2242c:	ldr	r1, [r3, fp, lsl #2]
   22430:	add	r0, sp, #276	; 0x114
   22434:	bl	1aae8 <__assert_fail@plt+0x9590>
   22438:	str	r0, [sp, #372]	; 0x174
   2243c:	ldr	r3, [sp, #52]	; 0x34
   22440:	ldrb	r3, [r3, #88]	; 0x58
   22444:	tst	r3, #1
   22448:	bne	22478 <__assert_fail@plt+0x10f20>
   2244c:	b	22468 <__assert_fail@plt+0x10f10>
   22450:	mov	r2, fp
   22454:	ldr	r3, [sp, #376]	; 0x178
   22458:	ldr	r1, [r3, fp, lsl #2]
   2245c:	add	r0, sp, #276	; 0x114
   22460:	bl	1aae8 <__assert_fail@plt+0x9590>
   22464:	str	r0, [sp, #372]	; 0x174
   22468:	ldr	r3, [sp, #52]	; 0x34
   2246c:	ldr	r3, [r3, #76]	; 0x4c
   22470:	cmp	r3, #0
   22474:	beq	219ac <__assert_fail@plt+0x10454>
   22478:	ldr	r9, [sp, #360]	; 0x168
   2247c:	ldr	r7, [sp, #372]	; 0x174
   22480:	cmn	fp, #-1073741822	; 0xc0000002
   22484:	bhi	22304 <__assert_fail@plt+0x10dac>
   22488:	add	r5, fp, #1
   2248c:	lsl	r5, r5, #2
   22490:	mov	r0, r5
   22494:	bl	258f4 <__assert_fail@plt+0x1439c>
   22498:	subs	r4, r0, #0
   2249c:	beq	22408 <__assert_fail@plt+0x10eb0>
   224a0:	ldr	r3, [r9, #76]	; 0x4c
   224a4:	cmp	r3, #0
   224a8:	beq	21920 <__assert_fail@plt+0x103c8>
   224ac:	mov	r0, r5
   224b0:	bl	258f4 <__assert_fail@plt+0x1439c>
   224b4:	subs	r5, r0, #0
   224b8:	beq	22408 <__assert_fail@plt+0x10eb0>
   224bc:	mov	r6, #0
   224c0:	str	sl, [sp, #12]
   224c4:	str	r9, [sp, #28]
   224c8:	add	sl, fp, #1
   224cc:	lsl	r9, sl, #2
   224d0:	mov	r2, r9
   224d4:	mov	r1, r6
   224d8:	mov	r0, r5
   224dc:	bl	1145c <memset@plt>
   224e0:	str	r4, [sp, #136]	; 0x88
   224e4:	str	r5, [sp, #140]	; 0x8c
   224e8:	str	r7, [sp, #144]	; 0x90
   224ec:	str	fp, [sp, #148]	; 0x94
   224f0:	str	r6, [sp, #152]	; 0x98
   224f4:	str	r6, [sp, #156]	; 0x9c
   224f8:	str	r6, [sp, #160]	; 0xa0
   224fc:	add	r1, sp, #136	; 0x88
   22500:	add	r0, sp, #276	; 0x114
   22504:	bl	2094c <__assert_fail@plt+0xf3f4>
   22508:	mov	r8, r0
   2250c:	ldr	r0, [sp, #160]	; 0xa0
   22510:	bl	13eac <__assert_fail@plt+0x2954>
   22514:	cmp	r8, #0
   22518:	bne	22378 <__assert_fail@plt+0x10e20>
   2251c:	ldr	r3, [r4]
   22520:	cmp	r3, #0
   22524:	bne	218e8 <__assert_fail@plt+0x10390>
   22528:	ldr	r3, [r5]
   2252c:	cmp	r3, #0
   22530:	bne	218e8 <__assert_fail@plt+0x10390>
   22534:	sub	r9, r9, #4
   22538:	ldr	r3, [sp, #376]	; 0x178
   2253c:	add	r9, r3, r9
   22540:	subs	fp, fp, #1
   22544:	bmi	22360 <__assert_fail@plt+0x10e08>
   22548:	ldr	r1, [r9, #-4]!
   2254c:	cmp	r1, #0
   22550:	beq	22540 <__assert_fail@plt+0x10fe8>
   22554:	ldrb	r3, [r1, #52]	; 0x34
   22558:	tst	r3, #16
   2255c:	beq	22540 <__assert_fail@plt+0x10fe8>
   22560:	mov	r2, fp
   22564:	add	r0, sp, #276	; 0x114
   22568:	bl	1aae8 <__assert_fail@plt+0x9590>
   2256c:	mov	r7, r0
   22570:	b	224c8 <__assert_fail@plt+0x10f70>
   22574:	ldr	r3, [sp, #112]	; 0x70
   22578:	cmp	r3, #0
   2257c:	bne	22684 <__assert_fail@plt+0x1112c>
   22580:	ldr	r2, [sp, #28]
   22584:	cmp	r2, #0
   22588:	beq	2259c <__assert_fail@plt+0x11044>
   2258c:	ldr	r3, [r2]
   22590:	ldr	r1, [sp, #36]	; 0x24
   22594:	add	r3, r3, r1
   22598:	str	r3, [r2]
   2259c:	cmn	fp, #1
   225a0:	beq	22390 <__assert_fail@plt+0x10e38>
   225a4:	cmn	fp, #2
   225a8:	beq	221bc <__assert_fail@plt+0x10c64>
   225ac:	str	fp, [sp, #368]	; 0x170
   225b0:	ldr	r3, [sp, #64]	; 0x40
   225b4:	cmp	r3, #1
   225b8:	movls	sl, #0
   225bc:	movhi	sl, #1
   225c0:	ldr	r3, [sp, #20]
   225c4:	ldrb	r3, [r3, #28]
   225c8:	eor	r3, r3, #16
   225cc:	ubfx	r3, r3, #4, #1
   225d0:	tst	sl, r3
   225d4:	bne	22424 <__assert_fail@plt+0x10ecc>
   225d8:	ldr	r2, [sp, #52]	; 0x34
   225dc:	ldr	r3, [r2, #76]	; 0x4c
   225e0:	cmp	r3, #0
   225e4:	bne	22450 <__assert_fail@plt+0x10ef8>
   225e8:	mov	r8, sl
   225ec:	mov	sl, r2
   225f0:	ldr	r2, [sp, #64]	; 0x40
   225f4:	cmp	r2, #0
   225f8:	beq	21228 <__assert_fail@plt+0xfcd0>
   225fc:	cmp	r2, #1
   22600:	bls	222ec <__assert_fail@plt+0x10d94>
   22604:	ldr	r3, [sp, #468]	; 0x1d4
   22608:	lsl	r2, r2, #3
   2260c:	str	r2, [sp, #36]	; 0x24
   22610:	sub	r1, r3, #8
   22614:	add	r1, r1, r2
   22618:	mvn	r2, #0
   2261c:	str	r2, [r3, #12]
   22620:	str	r2, [r3, #8]!
   22624:	cmp	r3, r1
   22628:	bne	2261c <__assert_fail@plt+0x110c4>
   2262c:	mov	r3, #0
   22630:	ldr	r2, [sp, #468]	; 0x1d4
   22634:	str	r3, [r2]
   22638:	ldr	r3, [sp, #368]	; 0x170
   2263c:	str	r3, [r2, #4]
   22640:	ldr	r3, [sp, #20]
   22644:	ldrb	r3, [r3, #28]
   22648:	eor	r3, r3, #16
   2264c:	ubfx	r3, r3, #4, #1
   22650:	tst	r8, r3
   22654:	bne	219b8 <__assert_fail@plt+0x10460>
   22658:	ldrb	r4, [sp, #352]	; 0x160
   2265c:	ldr	r5, [sp, #304]	; 0x130
   22660:	ldr	r6, [sp, #288]	; 0x120
   22664:	ldr	ip, [sp, #412]	; 0x19c
   22668:	ldr	r3, [sp, #468]	; 0x1d4
   2266c:	add	r2, r3, #4
   22670:	ldr	r3, [sp, #64]	; 0x40
   22674:	lsl	r3, r3, #3
   22678:	add	lr, r2, r3
   2267c:	ldr	r7, [sp, #308]	; 0x134
   22680:	b	220ac <__assert_fail@plt+0x10b54>
   22684:	ldr	sl, [sp, #52]	; 0x34
   22688:	b	22318 <__assert_fail@plt+0x10dc0>
   2268c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22690:	strd	r6, [sp, #8]
   22694:	strd	r8, [sp, #16]
   22698:	strd	sl, [sp, #24]
   2269c:	str	lr, [sp, #32]
   226a0:	sub	sp, sp, #132	; 0x84
   226a4:	mov	r5, r0
   226a8:	mov	fp, r1
   226ac:	mov	r6, r2
   226b0:	mov	r9, r3
   226b4:	mov	r2, #0
   226b8:	str	r2, [sp, #124]	; 0x7c
   226bc:	ldrb	r3, [r0, #28]
   226c0:	str	r9, [r0, #12]
   226c4:	str	r2, [r0, #8]
   226c8:	str	r2, [r0, #24]
   226cc:	and	r3, r3, #150	; 0x96
   226d0:	bfi	r3, r2, #1, #2
   226d4:	strb	r3, [r0, #28]
   226d8:	ldr	r4, [r0]
   226dc:	ldr	r3, [r0, #4]
   226e0:	cmp	r3, #159	; 0x9f
   226e4:	bls	229a8 <__assert_fail@plt+0x11450>
   226e8:	mov	r2, #160	; 0xa0
   226ec:	str	r2, [r5, #8]
   226f0:	mov	r1, #0
   226f4:	mov	r0, r4
   226f8:	bl	1145c <memset@plt>
   226fc:	mov	r3, #31
   22700:	str	r3, [r4, #64]	; 0x40
   22704:	movw	r3, #43689	; 0xaaa9
   22708:	movt	r3, #2730	; 0xaaa
   2270c:	cmp	r6, r3
   22710:	bhi	232e0 <__assert_fail@plt+0x11d88>
   22714:	add	r0, r6, #1
   22718:	str	r0, [r4, #4]
   2271c:	lsl	r0, r0, #3
   22720:	bl	258f4 <__assert_fail@plt+0x1439c>
   22724:	str	r0, [r4]
   22728:	cmp	r6, #0
   2272c:	beq	229cc <__assert_fail@plt+0x11474>
   22730:	mov	r7, #1
   22734:	lsl	r7, r7, #1
   22738:	cmp	r6, r7
   2273c:	bcs	22734 <__assert_fail@plt+0x111dc>
   22740:	mov	r1, r7
   22744:	mov	r0, #12
   22748:	bl	25880 <__assert_fail@plt+0x14328>
   2274c:	str	r0, [r4, #32]
   22750:	sub	r7, r7, #1
   22754:	str	r7, [r4, #68]	; 0x44
   22758:	bl	11354 <__ctype_get_mb_cur_max@plt>
   2275c:	str	r0, [r4, #92]	; 0x5c
   22760:	mov	r0, #14
   22764:	bl	114e0 <nl_langinfo@plt>
   22768:	ldrb	r3, [r0]
   2276c:	and	r3, r3, #223	; 0xdf
   22770:	cmp	r3, #85	; 0x55
   22774:	bne	227cc <__assert_fail@plt+0x11274>
   22778:	ldrb	r3, [r0, #1]
   2277c:	and	r3, r3, #223	; 0xdf
   22780:	cmp	r3, #84	; 0x54
   22784:	bne	227cc <__assert_fail@plt+0x11274>
   22788:	ldrb	r3, [r0, #2]
   2278c:	and	r3, r3, #223	; 0xdf
   22790:	cmp	r3, #70	; 0x46
   22794:	bne	227cc <__assert_fail@plt+0x11274>
   22798:	ldrb	r3, [r0, #3]
   2279c:	cmp	r3, #45	; 0x2d
   227a0:	moveq	r3, #4
   227a4:	movne	r3, #3
   227a8:	movw	r1, #29100	; 0x71ac
   227ac:	movt	r1, #2
   227b0:	add	r0, r0, r3
   227b4:	bl	111f8 <strcmp@plt>
   227b8:	cmp	r0, #0
   227bc:	bne	227cc <__assert_fail@plt+0x11274>
   227c0:	ldrb	r3, [r4, #88]	; 0x58
   227c4:	orr	r3, r3, #4
   227c8:	strb	r3, [r4, #88]	; 0x58
   227cc:	ldrb	r3, [r4, #88]	; 0x58
   227d0:	bfc	r3, #3, #1
   227d4:	strb	r3, [r4, #88]	; 0x58
   227d8:	ldr	r3, [r4, #92]	; 0x5c
   227dc:	cmp	r3, #1
   227e0:	ble	227fc <__assert_fail@plt+0x112a4>
   227e4:	ldrb	r3, [r4, #88]	; 0x58
   227e8:	tst	r3, #4
   227ec:	beq	229d4 <__assert_fail@plt+0x1147c>
   227f0:	movw	r3, #28516	; 0x6f64
   227f4:	movt	r3, #2
   227f8:	str	r3, [r4, #60]	; 0x3c
   227fc:	ldr	r3, [r4]
   22800:	cmp	r3, #0
   22804:	beq	232e0 <__assert_fail@plt+0x11d88>
   22808:	ldr	r3, [r4, #32]
   2280c:	cmp	r3, #0
   22810:	beq	232e0 <__assert_fail@plt+0x11d88>
   22814:	mov	r3, #0
   22818:	str	r3, [sp, #124]	; 0x7c
   2281c:	movw	r3, #0
   22820:	movt	r3, #0
   22824:	cmp	r3, #0
   22828:	movne	r3, #1
   2282c:	moveq	r3, #0
   22830:	mov	r2, r3
   22834:	movw	r3, #0
   22838:	movt	r3, #0
   2283c:	cmp	r3, #0
   22840:	movne	r3, #1
   22844:	moveq	r3, #0
   22848:	orr	r3, r2, r3
   2284c:	ands	r3, r3, #255	; 0xff
   22850:	str	r3, [sp, #16]
   22854:	beq	22880 <__assert_fail@plt+0x11328>
   22858:	mov	r1, #0
   2285c:	add	r0, r4, #136	; 0x88
   22860:	bl	11270 <pthread_mutex_init@plt>
   22864:	cmp	r0, #0
   22868:	movne	r3, #12
   2286c:	strne	r3, [sp, #124]	; 0x7c
   22870:	bne	232e8 <__assert_fail@plt+0x11d90>
   22874:	ldr	r3, [sp, #124]	; 0x7c
   22878:	cmp	r3, #0
   2287c:	bne	232e8 <__assert_fail@plt+0x11d90>
   22880:	str	r6, [sp, #12]
   22884:	ldr	r8, [r5, #20]
   22888:	and	r7, r9, #4194304	; 0x400000
   2288c:	orr	sl, r8, r7
   22890:	mov	r2, #76	; 0x4c
   22894:	mov	r1, #0
   22898:	add	r0, sp, #44	; 0x2c
   2289c:	bl	1145c <memset@plt>
   228a0:	str	fp, [sp, #40]	; 0x28
   228a4:	str	r6, [sp, #88]	; 0x58
   228a8:	str	r6, [sp, #84]	; 0x54
   228ac:	str	r8, [sp, #104]	; 0x68
   228b0:	adds	r3, r7, #0
   228b4:	movne	r3, #1
   228b8:	strb	r3, [sp, #112]	; 0x70
   228bc:	adds	r3, sl, #0
   228c0:	movne	r3, #1
   228c4:	strb	r3, [sp, #115]	; 0x73
   228c8:	ldr	r3, [r4, #92]	; 0x5c
   228cc:	str	r3, [sp, #120]	; 0x78
   228d0:	ldrb	r3, [r4, #88]	; 0x58
   228d4:	ubfx	r2, r3, #2, #1
   228d8:	strb	r2, [sp, #113]	; 0x71
   228dc:	ubfx	r3, r3, #3, #1
   228e0:	strb	r3, [sp, #114]	; 0x72
   228e4:	str	r6, [sp, #96]	; 0x60
   228e8:	str	r6, [sp, #92]	; 0x5c
   228ec:	cmp	r6, #0
   228f0:	bgt	22a60 <__assert_fail@plt+0x11508>
   228f4:	ldrb	r3, [sp, #115]	; 0x73
   228f8:	cmp	r3, #0
   228fc:	ldrne	fp, [sp, #44]	; 0x2c
   22900:	str	fp, [sp, #44]	; 0x2c
   22904:	cmp	r7, #0
   22908:	beq	22a84 <__assert_fail@plt+0x1152c>
   2290c:	ldr	r3, [r4, #92]	; 0x5c
   22910:	cmp	r3, #1
   22914:	ble	22a78 <__assert_fail@plt+0x11520>
   22918:	ldr	r6, [sp, #12]
   2291c:	add	r0, sp, #40	; 0x28
   22920:	bl	17d48 <__assert_fail@plt+0x67f0>
   22924:	cmp	r0, #0
   22928:	bne	22964 <__assert_fail@plt+0x1140c>
   2292c:	ldr	r3, [sp, #72]	; 0x48
   22930:	cmp	r6, r3
   22934:	ble	22aac <__assert_fail@plt+0x11554>
   22938:	ldr	r1, [sp, #76]	; 0x4c
   2293c:	ldr	r2, [r4, #92]	; 0x5c
   22940:	ldr	r3, [sp, #68]	; 0x44
   22944:	add	r3, r3, r2
   22948:	cmp	r1, r3
   2294c:	bgt	22aac <__assert_fail@plt+0x11554>
   22950:	lsl	r1, r1, #1
   22954:	add	r0, sp, #40	; 0x28
   22958:	bl	170e4 <__assert_fail@plt+0x5b8c>
   2295c:	cmp	r0, #0
   22960:	beq	2291c <__assert_fail@plt+0x113c4>
   22964:	str	r0, [sp, #124]	; 0x7c
   22968:	mov	r0, r5
   2296c:	bl	19668 <__assert_fail@plt+0x8110>
   22970:	add	r0, sp, #40	; 0x28
   22974:	bl	196c8 <__assert_fail@plt+0x8170>
   22978:	ldr	r3, [sp, #16]
   2297c:	cmp	r3, #0
   22980:	beq	2298c <__assert_fail@plt+0x11434>
   22984:	add	r0, r4, #136	; 0x88
   22988:	bl	11210 <pthread_mutex_destroy@plt>
   2298c:	mov	r0, r4
   22990:	bl	19708 <__assert_fail@plt+0x81b0>
   22994:	mov	r3, #0
   22998:	str	r3, [r5]
   2299c:	str	r3, [r5, #4]
   229a0:	ldr	r0, [sp, #124]	; 0x7c
   229a4:	b	231e4 <__assert_fail@plt+0x11c8c>
   229a8:	mov	r1, #160	; 0xa0
   229ac:	mov	r0, r4
   229b0:	bl	25930 <__assert_fail@plt+0x143d8>
   229b4:	subs	r4, r0, #0
   229b8:	beq	23298 <__assert_fail@plt+0x11d40>
   229bc:	mov	r3, #160	; 0xa0
   229c0:	str	r3, [r5, #4]
   229c4:	str	r4, [r5]
   229c8:	b	226e8 <__assert_fail@plt+0x11190>
   229cc:	mov	r7, #1
   229d0:	b	22740 <__assert_fail@plt+0x111e8>
   229d4:	mov	r1, #1
   229d8:	mov	r0, #32
   229dc:	bl	25880 <__assert_fail@plt+0x14328>
   229e0:	str	r0, [r4, #60]	; 0x3c
   229e4:	cmp	r0, #0
   229e8:	beq	232e0 <__assert_fail@plt+0x11d88>
   229ec:	mov	r7, #0
   229f0:	b	22a54 <__assert_fail@plt+0x114fc>
   229f4:	ldrb	r3, [r4, #88]	; 0x58
   229f8:	orr	r3, r3, #8
   229fc:	strb	r3, [r4, #88]	; 0x58
   22a00:	add	sl, sl, #1
   22a04:	add	r8, r8, #1
   22a08:	cmp	sl, #32
   22a0c:	beq	22a48 <__assert_fail@plt+0x114f0>
   22a10:	mov	r0, r8
   22a14:	bl	11468 <btowc@plt>
   22a18:	cmn	r0, #1
   22a1c:	beq	22a34 <__assert_fail@plt+0x114dc>
   22a20:	ldr	r2, [r4, #60]	; 0x3c
   22a24:	ldr	r3, [r2, r7]
   22a28:	mov	r1, #1
   22a2c:	orr	r3, r3, r1, lsl sl
   22a30:	str	r3, [r2, r7]
   22a34:	bics	r3, r8, #127	; 0x7f
   22a38:	bne	22a00 <__assert_fail@plt+0x114a8>
   22a3c:	cmp	r0, r8
   22a40:	bne	229f4 <__assert_fail@plt+0x1149c>
   22a44:	b	22a00 <__assert_fail@plt+0x114a8>
   22a48:	add	r7, r7, #4
   22a4c:	cmp	r7, #32
   22a50:	beq	227fc <__assert_fail@plt+0x112a4>
   22a54:	lsl	r8, r7, #3
   22a58:	mov	sl, #0
   22a5c:	b	22a10 <__assert_fail@plt+0x114b8>
   22a60:	add	r1, r6, #1
   22a64:	add	r0, sp, #40	; 0x28
   22a68:	bl	170e4 <__assert_fail@plt+0x5b8c>
   22a6c:	cmp	r0, #0
   22a70:	beq	228f4 <__assert_fail@plt+0x1139c>
   22a74:	b	22964 <__assert_fail@plt+0x1140c>
   22a78:	add	r0, sp, #40	; 0x28
   22a7c:	bl	182cc <__assert_fail@plt+0x6d74>
   22a80:	b	22aac <__assert_fail@plt+0x11554>
   22a84:	ldr	r3, [r4, #92]	; 0x5c
   22a88:	cmp	r3, #1
   22a8c:	bgt	22aa4 <__assert_fail@plt+0x1154c>
   22a90:	cmp	sl, #0
   22a94:	beq	22ce0 <__assert_fail@plt+0x11788>
   22a98:	add	r0, sp, #40	; 0x28
   22a9c:	bl	1646c <__assert_fail@plt+0x4f14>
   22aa0:	b	22aac <__assert_fail@plt+0x11554>
   22aa4:	add	r0, sp, #40	; 0x28
   22aa8:	bl	177b0 <__assert_fail@plt+0x6258>
   22aac:	mov	r8, #0
   22ab0:	str	r8, [sp, #124]	; 0x7c
   22ab4:	str	r8, [r5, #24]
   22ab8:	ldr	r6, [r5]
   22abc:	str	r9, [r6, #128]	; 0x80
   22ac0:	orr	r2, r9, #8388608	; 0x800000
   22ac4:	add	r1, sp, #40	; 0x28
   22ac8:	add	r0, sp, #28
   22acc:	bl	18e28 <__assert_fail@plt+0x78d0>
   22ad0:	add	r3, sp, #124	; 0x7c
   22ad4:	str	r3, [sp, #4]
   22ad8:	str	r8, [sp]
   22adc:	mov	r3, r9
   22ae0:	add	r2, sp, #28
   22ae4:	mov	r1, r5
   22ae8:	add	r0, sp, #40	; 0x28
   22aec:	bl	1eb14 <__assert_fail@plt+0xd5bc>
   22af0:	mov	r8, r0
   22af4:	clz	r0, r0
   22af8:	lsr	r0, r0, #5
   22afc:	ldr	r3, [sp, #124]	; 0x7c
   22b00:	cmp	r3, #0
   22b04:	moveq	r0, #0
   22b08:	cmp	r0, #0
   22b0c:	bne	232d4 <__assert_fail@plt+0x11d7c>
   22b10:	mov	r3, #2
   22b14:	mov	r2, #0
   22b18:	mov	r1, r2
   22b1c:	mov	r0, r6
   22b20:	bl	173c0 <__assert_fail@plt+0x5e68>
   22b24:	mov	r9, r0
   22b28:	cmp	r8, #0
   22b2c:	beq	22b44 <__assert_fail@plt+0x115ec>
   22b30:	mov	r3, #16
   22b34:	mov	r2, r9
   22b38:	mov	r1, r8
   22b3c:	mov	r0, r6
   22b40:	bl	173c0 <__assert_fail@plt+0x5e68>
   22b44:	cmp	r0, #0
   22b48:	cmpne	r9, #0
   22b4c:	moveq	r3, #12
   22b50:	streq	r3, [sp, #124]	; 0x7c
   22b54:	beq	232d4 <__assert_fail@plt+0x11d7c>
   22b58:	str	r0, [r4, #52]	; 0x34
   22b5c:	ldr	r6, [r5]
   22b60:	ldr	r0, [r6, #4]
   22b64:	lsl	r0, r0, #2
   22b68:	bl	258f4 <__assert_fail@plt+0x1439c>
   22b6c:	str	r0, [r6, #12]
   22b70:	ldr	r0, [r6, #4]
   22b74:	lsl	r0, r0, #2
   22b78:	bl	258f4 <__assert_fail@plt+0x1439c>
   22b7c:	str	r0, [r6, #16]
   22b80:	ldr	r0, [r6, #4]
   22b84:	add	r0, r0, r0, lsl #1
   22b88:	lsl	r0, r0, #2
   22b8c:	bl	258f4 <__assert_fail@plt+0x1439c>
   22b90:	str	r0, [r6, #20]
   22b94:	ldr	r0, [r6, #4]
   22b98:	add	r0, r0, r0, lsl #1
   22b9c:	lsl	r0, r0, #2
   22ba0:	bl	258f4 <__assert_fail@plt+0x1439c>
   22ba4:	str	r0, [r6, #24]
   22ba8:	ldr	r3, [r6, #12]
   22bac:	cmp	r3, #0
   22bb0:	beq	232cc <__assert_fail@plt+0x11d74>
   22bb4:	ldr	r3, [r6, #16]
   22bb8:	cmp	r3, #0
   22bbc:	beq	232a0 <__assert_fail@plt+0x11d48>
   22bc0:	ldr	r3, [r6, #20]
   22bc4:	clz	sl, r0
   22bc8:	lsr	sl, sl, #5
   22bcc:	cmp	r3, #0
   22bd0:	moveq	sl, #1
   22bd4:	cmp	sl, #0
   22bd8:	bne	232a8 <__assert_fail@plt+0x11d50>
   22bdc:	ldr	r0, [r5, #24]
   22be0:	lsl	r0, r0, #2
   22be4:	bl	258f4 <__assert_fail@plt+0x1439c>
   22be8:	str	r0, [r6, #132]	; 0x84
   22bec:	cmp	r0, #0
   22bf0:	beq	22c68 <__assert_fail@plt+0x11710>
   22bf4:	ldr	r3, [r5, #24]
   22bf8:	cmp	r3, #0
   22bfc:	beq	22c1c <__assert_fail@plt+0x116c4>
   22c00:	mov	r3, #0
   22c04:	ldr	r2, [r6, #132]	; 0x84
   22c08:	str	r3, [r2, r3, lsl #2]
   22c0c:	add	r3, r3, #1
   22c10:	ldr	r2, [r5, #24]
   22c14:	cmp	r2, r3
   22c18:	bhi	22c04 <__assert_fail@plt+0x116ac>
   22c1c:	mov	r2, r6
   22c20:	movw	r1, #26408	; 0x6728
   22c24:	movt	r1, #1
   22c28:	ldr	r0, [r6, #52]	; 0x34
   22c2c:	bl	166ac <__assert_fail@plt+0x5154>
   22c30:	ldr	ip, [r5, #24]
   22c34:	cmp	ip, #0
   22c38:	beq	22cf8 <__assert_fail@plt+0x117a0>
   22c3c:	ldr	r2, [r6, #132]	; 0x84
   22c40:	ldr	r3, [r2]
   22c44:	cmp	r3, #0
   22c48:	bne	22c68 <__assert_fail@plt+0x11710>
   22c4c:	mov	r0, ip
   22c50:	add	r3, r3, #1
   22c54:	cmp	r0, r3
   22c58:	beq	22cf0 <__assert_fail@plt+0x11798>
   22c5c:	ldr	r1, [r2, #4]!
   22c60:	cmp	r1, r3
   22c64:	beq	22c50 <__assert_fail@plt+0x116f8>
   22c68:	mov	r2, r5
   22c6c:	movw	r1, #30048	; 0x7560
   22c70:	movt	r1, #1
   22c74:	ldr	r0, [r6, #52]	; 0x34
   22c78:	bl	16618 <__assert_fail@plt+0x50c0>
   22c7c:	cmp	r0, #0
   22c80:	bne	232c4 <__assert_fail@plt+0x11d6c>
   22c84:	mov	r2, r6
   22c88:	movw	r1, #37324	; 0x91cc
   22c8c:	movt	r1, #1
   22c90:	ldr	r0, [r6, #52]	; 0x34
   22c94:	bl	16618 <__assert_fail@plt+0x50c0>
   22c98:	cmp	r0, #0
   22c9c:	bne	232c4 <__assert_fail@plt+0x11d6c>
   22ca0:	mov	r2, r6
   22ca4:	movw	r1, #26568	; 0x67c8
   22ca8:	movt	r1, #1
   22cac:	ldr	r0, [r6, #52]	; 0x34
   22cb0:	bl	166ac <__assert_fail@plt+0x5154>
   22cb4:	mov	r2, r6
   22cb8:	movw	r1, #39468	; 0x9a2c
   22cbc:	movt	r1, #1
   22cc0:	ldr	r0, [r6, #52]	; 0x34
   22cc4:	bl	166ac <__assert_fail@plt+0x5154>
   22cc8:	subs	r3, r0, #0
   22ccc:	str	r3, [sp, #12]
   22cd0:	bne	232b0 <__assert_fail@plt+0x11d58>
   22cd4:	mov	r8, sl
   22cd8:	mov	r9, r3
   22cdc:	b	22d3c <__assert_fail@plt+0x117e4>
   22ce0:	ldr	r3, [sp, #76]	; 0x4c
   22ce4:	str	r3, [sp, #68]	; 0x44
   22ce8:	str	r3, [sp, #72]	; 0x48
   22cec:	b	22aac <__assert_fail@plt+0x11554>
   22cf0:	cmp	ip, r3
   22cf4:	bne	22c68 <__assert_fail@plt+0x11710>
   22cf8:	ldr	r0, [r6, #132]	; 0x84
   22cfc:	bl	13eac <__assert_fail@plt+0x2954>
   22d00:	mov	r3, #0
   22d04:	str	r3, [r6, #132]	; 0x84
   22d08:	b	22c68 <__assert_fail@plt+0x11710>
   22d0c:	cmp	r8, #0
   22d10:	beq	22d8c <__assert_fail@plt+0x11834>
   22d14:	mov	r8, sl
   22d18:	ldr	r9, [sp, #12]
   22d1c:	b	22d3c <__assert_fail@plt+0x117e4>
   22d20:	ldr	r0, [sp, #36]	; 0x24
   22d24:	bl	13eac <__assert_fail@plt+0x2954>
   22d28:	mov	r8, #1
   22d2c:	add	r9, r9, #1
   22d30:	ldr	r3, [r6, #8]
   22d34:	cmp	r3, r9
   22d38:	beq	22d0c <__assert_fail@plt+0x117b4>
   22d3c:	add	fp, r9, r9, lsl #1
   22d40:	lsl	fp, fp, #2
   22d44:	ldr	r3, [r6, #24]
   22d48:	add	r3, r3, fp
   22d4c:	ldr	r3, [r3, #4]
   22d50:	cmp	r3, #0
   22d54:	bne	22d2c <__assert_fail@plt+0x117d4>
   22d58:	mov	r3, #1
   22d5c:	mov	r2, r9
   22d60:	mov	r1, r6
   22d64:	add	r0, sp, #28
   22d68:	bl	1a300 <__assert_fail@plt+0x8da8>
   22d6c:	cmp	r0, #0
   22d70:	bne	232c4 <__assert_fail@plt+0x11d6c>
   22d74:	ldr	r3, [r6, #24]
   22d78:	add	fp, r3, fp
   22d7c:	ldr	r3, [fp, #4]
   22d80:	cmp	r3, #0
   22d84:	bne	22d2c <__assert_fail@plt+0x117d4>
   22d88:	b	22d20 <__assert_fail@plt+0x117c8>
   22d8c:	ldrb	r3, [r5, #28]
   22d90:	tst	r3, #16
   22d94:	beq	22f00 <__assert_fail@plt+0x119a8>
   22d98:	ldr	r3, [r6, #76]	; 0x4c
   22d9c:	cmp	r3, #0
   22da0:	beq	22e88 <__assert_fail@plt+0x11930>
   22da4:	ldr	r0, [r6, #8]
   22da8:	add	r0, r0, r0, lsl #1
   22dac:	lsl	r0, r0, #2
   22db0:	bl	258f4 <__assert_fail@plt+0x1439c>
   22db4:	str	r0, [r6, #28]
   22db8:	cmp	r0, #0
   22dbc:	beq	232b8 <__assert_fail@plt+0x11d60>
   22dc0:	ldr	r3, [r6, #8]
   22dc4:	cmp	r3, #0
   22dc8:	beq	22e88 <__assert_fail@plt+0x11930>
   22dcc:	ldr	r1, [sp, #12]
   22dd0:	mov	r3, #0
   22dd4:	mov	r2, r3
   22dd8:	ldr	ip, [r6, #28]
   22ddc:	add	r0, ip, r3
   22de0:	str	r2, [ip, r3]
   22de4:	str	r2, [r0, #4]
   22de8:	str	r2, [r0, #8]
   22dec:	add	r1, r1, #1
   22df0:	ldr	r0, [r6, #8]
   22df4:	add	r3, r3, #12
   22df8:	cmp	r1, r0
   22dfc:	bcc	22dd8 <__assert_fail@plt+0x11880>
   22e00:	cmp	r0, #0
   22e04:	beq	22e88 <__assert_fail@plt+0x11930>
   22e08:	ldr	r3, [sp, #12]
   22e0c:	mov	fp, #0
   22e10:	str	r7, [sp, #20]
   22e14:	mov	r7, r3
   22e18:	ldr	r3, [r6, #24]
   22e1c:	add	r3, r3, fp
   22e20:	ldr	sl, [r3, #8]
   22e24:	ldr	r3, [r3, #4]
   22e28:	cmp	r3, #0
   22e2c:	ble	22e70 <__assert_fail@plt+0x11918>
   22e30:	sub	sl, sl, #4
   22e34:	ldr	r9, [sp, #12]
   22e38:	ldr	r0, [sl, #4]!
   22e3c:	add	r0, r0, r0, lsl #1
   22e40:	ldr	r3, [r6, #28]
   22e44:	mov	r1, r7
   22e48:	add	r0, r3, r0, lsl #2
   22e4c:	bl	171a8 <__assert_fail@plt+0x5c50>
   22e50:	cmp	r0, #0
   22e54:	beq	232c0 <__assert_fail@plt+0x11d68>
   22e58:	add	r9, r9, #1
   22e5c:	ldr	r3, [r6, #24]
   22e60:	add	r3, r3, fp
   22e64:	ldr	r3, [r3, #4]
   22e68:	cmp	r9, r3
   22e6c:	blt	22e38 <__assert_fail@plt+0x118e0>
   22e70:	add	r7, r7, #1
   22e74:	add	fp, fp, #12
   22e78:	ldr	r3, [r6, #8]
   22e7c:	cmp	r7, r3
   22e80:	bcc	22e18 <__assert_fail@plt+0x118c0>
   22e84:	ldr	r7, [sp, #20]
   22e88:	mov	r3, #0
   22e8c:	str	r3, [sp, #124]	; 0x7c
   22e90:	ldrb	r3, [r4, #88]	; 0x58
   22e94:	ubfx	r3, r3, #2, #1
   22e98:	cmp	r7, #0
   22e9c:	moveq	r7, r3
   22ea0:	movne	r7, #0
   22ea4:	cmp	r7, #0
   22ea8:	bne	22f1c <__assert_fail@plt+0x119c4>
   22eac:	ldr	r3, [r4, #52]	; 0x34
   22eb0:	ldr	r3, [r3, #12]
   22eb4:	ldr	r1, [r3, #28]
   22eb8:	str	r1, [r4, #72]	; 0x48
   22ebc:	add	r1, r1, r1, lsl #1
   22ec0:	ldr	r3, [r4, #24]
   22ec4:	add	r1, r3, r1, lsl #2
   22ec8:	add	r0, sp, #28
   22ecc:	bl	17b1c <__assert_fail@plt+0x65c4>
   22ed0:	mov	r7, r0
   22ed4:	str	r0, [sp, #24]
   22ed8:	cmp	r0, #0
   22edc:	bne	231c0 <__assert_fail@plt+0x11c68>
   22ee0:	ldr	r3, [r4, #76]	; 0x4c
   22ee4:	cmp	r3, #0
   22ee8:	ble	2317c <__assert_fail@plt+0x11c24>
   22eec:	ldr	r0, [sp, #32]
   22ef0:	cmp	r0, #0
   22ef4:	ble	2317c <__assert_fail@plt+0x11c24>
   22ef8:	mov	r6, r7
   22efc:	b	23120 <__assert_fail@plt+0x11bc8>
   22f00:	ldr	r3, [r5, #24]
   22f04:	cmp	r3, #0
   22f08:	beq	22d98 <__assert_fail@plt+0x11840>
   22f0c:	ldrb	r3, [r6, #88]	; 0x58
   22f10:	tst	r3, #1
   22f14:	bne	22da4 <__assert_fail@plt+0x1184c>
   22f18:	b	22d98 <__assert_fail@plt+0x11840>
   22f1c:	ldr	r3, [r5, #20]
   22f20:	cmp	r3, #0
   22f24:	bne	22eac <__assert_fail@plt+0x11954>
   22f28:	ldr	r0, [r4, #8]
   22f2c:	cmp	r0, #0
   22f30:	beq	23084 <__assert_fail@plt+0x11b2c>
   22f34:	ldr	r2, [r4]
   22f38:	mov	ip, r8
   22f3c:	ldr	r1, [sp, #12]
   22f40:	mov	lr, r7
   22f44:	b	22fa4 <__assert_fail@plt+0x11a4c>
   22f48:	mov	ip, lr
   22f4c:	b	22f94 <__assert_fail@plt+0x11a3c>
   22f50:	ldr	r3, [r2]
   22f54:	ldr	r6, [r3, #16]
   22f58:	cmp	r6, #0
   22f5c:	bne	22eac <__assert_fail@plt+0x11954>
   22f60:	ldr	r6, [r3, #20]
   22f64:	cmp	r6, #0
   22f68:	bne	22eac <__assert_fail@plt+0x11954>
   22f6c:	ldr	r6, [r3, #24]
   22f70:	cmp	r6, #0
   22f74:	bne	22eac <__assert_fail@plt+0x11954>
   22f78:	ldr	r3, [r3, #28]
   22f7c:	cmp	r3, #0
   22f80:	beq	22f94 <__assert_fail@plt+0x11a3c>
   22f84:	b	22eac <__assert_fail@plt+0x11954>
   22f88:	ldrsb	r3, [r2]
   22f8c:	cmp	r3, #0
   22f90:	movlt	r8, r7
   22f94:	add	r1, r1, #1
   22f98:	add	r2, r2, #8
   22f9c:	cmp	r1, r0
   22fa0:	beq	2301c <__assert_fail@plt+0x11ac4>
   22fa4:	ldrb	r3, [r2, #4]
   22fa8:	sub	r3, r3, #1
   22fac:	cmp	r3, #11
   22fb0:	ldrls	pc, [pc, r3, lsl #2]
   22fb4:	b	23018 <__assert_fail@plt+0x11ac0>
   22fb8:	andeq	r2, r2, r8, lsl #31
   22fbc:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   22fc0:	andeq	r2, r2, r0, asr pc
   22fc4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   22fc8:	andeq	r2, r2, r8, asr #30
   22fcc:	andeq	r2, r2, ip, lsr #29
   22fd0:	andeq	r3, r2, r8, lsl r0
   22fd4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   22fd8:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   22fdc:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   22fe0:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   22fe4:	andeq	r2, r2, r8, ror #31
   22fe8:	ldr	r3, [r2]
   22fec:	cmp	r3, #32
   22ff0:	beq	22f94 <__assert_fail@plt+0x11a3c>
   22ff4:	bls	2300c <__assert_fail@plt+0x11ab4>
   22ff8:	cmp	r3, #64	; 0x40
   22ffc:	beq	22f94 <__assert_fail@plt+0x11a3c>
   23000:	cmp	r3, #128	; 0x80
   23004:	beq	22f94 <__assert_fail@plt+0x11a3c>
   23008:	b	22eac <__assert_fail@plt+0x11954>
   2300c:	cmp	r3, #16
   23010:	beq	22f94 <__assert_fail@plt+0x11a3c>
   23014:	b	22eac <__assert_fail@plt+0x11954>
   23018:	bl	11534 <abort@plt>
   2301c:	orr	r8, r8, ip
   23020:	tst	r8, #255	; 0xff
   23024:	beq	23088 <__assert_fail@plt+0x11b30>
   23028:	mov	lr, #7
   2302c:	ldr	r3, [sp, #12]
   23030:	b	23050 <__assert_fail@plt+0x11af8>
   23034:	ldrsb	r2, [r6, r0]
   23038:	cmp	r2, #0
   2303c:	blt	23074 <__assert_fail@plt+0x11b1c>
   23040:	add	r3, r3, #1
   23044:	ldr	r2, [r4, #8]
   23048:	cmp	r3, r2
   2304c:	bcs	23088 <__assert_fail@plt+0x11b30>
   23050:	lsl	r0, r3, #3
   23054:	ldr	r6, [r4]
   23058:	add	r1, r6, r0
   2305c:	ldrb	r2, [r1, #4]
   23060:	cmp	r2, #1
   23064:	beq	23034 <__assert_fail@plt+0x11adc>
   23068:	cmp	r2, #5
   2306c:	strbeq	lr, [r1, #4]
   23070:	b	23040 <__assert_fail@plt+0x11ae8>
   23074:	ldrb	r2, [r1, #6]
   23078:	bfc	r2, #5, #1
   2307c:	strb	r2, [r1, #6]
   23080:	b	23040 <__assert_fail@plt+0x11ae8>
   23084:	mov	ip, r8
   23088:	mov	r3, #1
   2308c:	str	r3, [r4, #92]	; 0x5c
   23090:	ldrb	r3, [r4, #88]	; 0x58
   23094:	ldr	r2, [r4, #76]	; 0x4c
   23098:	cmp	r2, #0
   2309c:	orrgt	ip, ip, #1
   230a0:	and	r3, r3, #251	; 0xfb
   230a4:	bfi	r3, ip, #1, #1
   230a8:	strb	r3, [r4, #88]	; 0x58
   230ac:	b	22eac <__assert_fail@plt+0x11954>
   230b0:	add	r1, r1, #1
   230b4:	cmp	r0, r1
   230b8:	beq	23110 <__assert_fail@plt+0x11bb8>
   230bc:	ldr	r8, [r2, #4]!
   230c0:	add	r9, ip, r8, lsl #3
   230c4:	ldrb	r9, [r9, #4]
   230c8:	cmp	r9, #9
   230cc:	bne	230b0 <__assert_fail@plt+0x11b58>
   230d0:	ldr	r9, [ip, r8, lsl #3]
   230d4:	ldr	r8, [lr]
   230d8:	cmp	r9, r8
   230dc:	bne	230b0 <__assert_fail@plt+0x11b58>
   230e0:	cmp	r1, r0
   230e4:	beq	23110 <__assert_fail@plt+0x11bb8>
   230e8:	ldr	r2, [r4, #20]
   230ec:	add	r3, r3, r3, lsl #1
   230f0:	add	r3, r2, r3, lsl #2
   230f4:	ldr	r3, [r3, #8]
   230f8:	ldr	r8, [r3]
   230fc:	mov	r1, r8
   23100:	add	r0, sp, #28
   23104:	bl	16530 <__assert_fail@plt+0x4fd8>
   23108:	cmp	r0, #0
   2310c:	beq	23158 <__assert_fail@plt+0x11c00>
   23110:	add	r6, r6, #1
   23114:	ldr	r0, [sp, #32]
   23118:	cmp	r0, r6
   2311c:	ble	2317c <__assert_fail@plt+0x11c24>
   23120:	ldr	r2, [sp, #36]	; 0x24
   23124:	ldr	ip, [r4]
   23128:	ldr	r3, [r2, r6, lsl #2]
   2312c:	add	lr, ip, r3, lsl #3
   23130:	ldrb	r1, [lr, #4]
   23134:	cmp	r1, #4
   23138:	bne	23110 <__assert_fail@plt+0x11bb8>
   2313c:	cmp	r0, #0
   23140:	ble	23150 <__assert_fail@plt+0x11bf8>
   23144:	sub	r2, r2, #4
   23148:	mov	r1, r7
   2314c:	b	230bc <__assert_fail@plt+0x11b64>
   23150:	mov	r1, r7
   23154:	b	230e0 <__assert_fail@plt+0x11b88>
   23158:	add	r8, r8, r8, lsl #1
   2315c:	ldr	r1, [r4, #24]
   23160:	add	r1, r1, r8, lsl #2
   23164:	add	r0, sp, #28
   23168:	bl	1a150 <__assert_fail@plt+0x8bf8>
   2316c:	subs	r6, r0, #0
   23170:	beq	23110 <__assert_fail@plt+0x11bb8>
   23174:	mov	r7, r6
   23178:	b	231c0 <__assert_fail@plt+0x11c68>
   2317c:	mov	r3, #0
   23180:	add	r2, sp, #28
   23184:	mov	r1, r4
   23188:	add	r0, sp, #24
   2318c:	bl	19378 <__assert_fail@plt+0x7e20>
   23190:	str	r0, [r4, #36]	; 0x24
   23194:	cmp	r0, #0
   23198:	ldreq	r7, [sp, #24]
   2319c:	beq	231c0 <__assert_fail@plt+0x11c68>
   231a0:	ldrsb	r3, [r0, #52]	; 0x34
   231a4:	cmp	r3, #0
   231a8:	strge	r0, [r4, #48]	; 0x30
   231ac:	strge	r0, [r4, #44]	; 0x2c
   231b0:	strge	r0, [r4, #40]	; 0x28
   231b4:	blt	23200 <__assert_fail@plt+0x11ca8>
   231b8:	ldr	r0, [sp, #36]	; 0x24
   231bc:	bl	13eac <__assert_fail@plt+0x2954>
   231c0:	str	r7, [sp, #124]	; 0x7c
   231c4:	mov	r0, r5
   231c8:	bl	19668 <__assert_fail@plt+0x8110>
   231cc:	add	r0, sp, #40	; 0x28
   231d0:	bl	196c8 <__assert_fail@plt+0x8170>
   231d4:	ldr	r3, [sp, #124]	; 0x7c
   231d8:	cmp	r3, #0
   231dc:	bne	2326c <__assert_fail@plt+0x11d14>
   231e0:	ldr	r0, [sp, #124]	; 0x7c
   231e4:	add	sp, sp, #132	; 0x84
   231e8:	ldrd	r4, [sp]
   231ec:	ldrd	r6, [sp, #8]
   231f0:	ldrd	r8, [sp, #16]
   231f4:	ldrd	sl, [sp, #24]
   231f8:	add	sp, sp, #32
   231fc:	pop	{pc}		; (ldr pc, [sp], #4)
   23200:	mov	r3, #1
   23204:	add	r2, sp, #28
   23208:	mov	r1, r4
   2320c:	add	r0, sp, #24
   23210:	bl	19378 <__assert_fail@plt+0x7e20>
   23214:	str	r0, [r4, #40]	; 0x28
   23218:	mov	r3, #2
   2321c:	add	r2, sp, #28
   23220:	mov	r1, r4
   23224:	add	r0, sp, #24
   23228:	bl	19378 <__assert_fail@plt+0x7e20>
   2322c:	str	r0, [r4, #44]	; 0x2c
   23230:	mov	r3, #6
   23234:	add	r2, sp, #28
   23238:	mov	r1, r4
   2323c:	add	r0, sp, #24
   23240:	bl	19378 <__assert_fail@plt+0x7e20>
   23244:	str	r0, [r4, #48]	; 0x30
   23248:	ldr	r3, [r4, #40]	; 0x28
   2324c:	cmp	r3, #0
   23250:	beq	23264 <__assert_fail@plt+0x11d0c>
   23254:	ldr	r3, [r4, #44]	; 0x2c
   23258:	cmp	r0, #0
   2325c:	cmpne	r3, #0
   23260:	bne	231b8 <__assert_fail@plt+0x11c60>
   23264:	ldr	r7, [sp, #24]
   23268:	b	231c0 <__assert_fail@plt+0x11c68>
   2326c:	ldr	r3, [sp, #16]
   23270:	cmp	r3, #0
   23274:	beq	23280 <__assert_fail@plt+0x11d28>
   23278:	add	r0, r4, #136	; 0x88
   2327c:	bl	11210 <pthread_mutex_destroy@plt>
   23280:	mov	r0, r4
   23284:	bl	19708 <__assert_fail@plt+0x81b0>
   23288:	mov	r3, #0
   2328c:	str	r3, [r5]
   23290:	str	r3, [r5, #4]
   23294:	b	231e0 <__assert_fail@plt+0x11c88>
   23298:	mov	r0, #12
   2329c:	b	231e4 <__assert_fail@plt+0x11c8c>
   232a0:	mov	r0, #12
   232a4:	b	232c4 <__assert_fail@plt+0x11d6c>
   232a8:	mov	r0, #12
   232ac:	b	232c4 <__assert_fail@plt+0x11d6c>
   232b0:	ldr	r0, [sp, #12]
   232b4:	b	232c4 <__assert_fail@plt+0x11d6c>
   232b8:	mov	r0, #12
   232bc:	b	232c4 <__assert_fail@plt+0x11d6c>
   232c0:	mov	r0, #12
   232c4:	str	r0, [sp, #124]	; 0x7c
   232c8:	b	22968 <__assert_fail@plt+0x11410>
   232cc:	mov	r0, #12
   232d0:	b	232c4 <__assert_fail@plt+0x11d6c>
   232d4:	mov	r3, #0
   232d8:	str	r3, [r4, #52]	; 0x34
   232dc:	b	22968 <__assert_fail@plt+0x11410>
   232e0:	mov	r3, #12
   232e4:	str	r3, [sp, #124]	; 0x7c
   232e8:	mov	r0, r4
   232ec:	bl	19708 <__assert_fail@plt+0x81b0>
   232f0:	mov	r3, #0
   232f4:	str	r3, [r5]
   232f8:	str	r3, [r5, #4]
   232fc:	ldr	r0, [sp, #124]	; 0x7c
   23300:	b	231e4 <__assert_fail@plt+0x11c8c>
   23304:	str	r4, [sp, #-8]!
   23308:	str	lr, [sp, #4]
   2330c:	mov	ip, r2
   23310:	movw	r3, #33780	; 0x83f4
   23314:	movt	r3, #3
   23318:	ldr	r3, [r3]
   2331c:	ubfx	lr, r3, #25, #1
   23320:	ldrb	r2, [r2, #28]
   23324:	bfi	r2, lr, #4, #1
   23328:	mvn	r2, r2, lsl #25
   2332c:	mvn	r2, r2, lsr #25
   23330:	strb	r2, [ip, #28]
   23334:	mov	r2, r1
   23338:	mov	r1, r0
   2333c:	mov	r0, ip
   23340:	bl	2268c <__assert_fail@plt+0x11134>
   23344:	cmp	r0, #0
   23348:	moveq	r0, #0
   2334c:	beq	23374 <__assert_fail@plt+0x11e1c>
   23350:	movw	r3, #28516	; 0x6f64
   23354:	movt	r3, #2
   23358:	add	r1, r3, #32
   2335c:	add	r3, r3, r0, lsl #2
   23360:	ldr	r3, [r3, #416]	; 0x1a0
   23364:	mov	r2, #5
   23368:	add	r1, r1, r3
   2336c:	mov	r0, #0
   23370:	bl	112d0 <dcgettext@plt>
   23374:	ldr	r4, [sp]
   23378:	add	sp, sp, #4
   2337c:	pop	{pc}		; (ldr pc, [sp], #4)
   23380:	movw	r3, #33780	; 0x83f4
   23384:	movt	r3, #3
   23388:	ldr	r2, [r3]
   2338c:	str	r0, [r3]
   23390:	mov	r0, r2
   23394:	bx	lr
   23398:	strd	r4, [sp, #-16]!
   2339c:	str	r6, [sp, #8]
   233a0:	str	lr, [sp, #12]
   233a4:	mov	r5, r0
   233a8:	ldr	r4, [r0]
   233ac:	ldr	r6, [r0, #16]
   233b0:	mov	r2, #256	; 0x100
   233b4:	mov	r1, #0
   233b8:	mov	r0, r6
   233bc:	bl	1145c <memset@plt>
   233c0:	mov	r2, r6
   233c4:	ldr	r1, [r4, #36]	; 0x24
   233c8:	mov	r0, r5
   233cc:	bl	1d0e8 <__assert_fail@plt+0xbb90>
   233d0:	ldr	r1, [r4, #40]	; 0x28
   233d4:	ldr	r3, [r4, #36]	; 0x24
   233d8:	cmp	r3, r1
   233dc:	beq	233ec <__assert_fail@plt+0x11e94>
   233e0:	mov	r2, r6
   233e4:	mov	r0, r5
   233e8:	bl	1d0e8 <__assert_fail@plt+0xbb90>
   233ec:	ldr	r1, [r4, #44]	; 0x2c
   233f0:	ldr	r3, [r4, #36]	; 0x24
   233f4:	cmp	r3, r1
   233f8:	beq	23408 <__assert_fail@plt+0x11eb0>
   233fc:	mov	r2, r6
   23400:	mov	r0, r5
   23404:	bl	1d0e8 <__assert_fail@plt+0xbb90>
   23408:	ldr	r1, [r4, #48]	; 0x30
   2340c:	ldr	r3, [r4, #36]	; 0x24
   23410:	cmp	r3, r1
   23414:	beq	23424 <__assert_fail@plt+0x11ecc>
   23418:	mov	r2, r6
   2341c:	mov	r0, r5
   23420:	bl	1d0e8 <__assert_fail@plt+0xbb90>
   23424:	ldrb	r3, [r5, #28]
   23428:	orr	r3, r3, #8
   2342c:	strb	r3, [r5, #28]
   23430:	mov	r0, #0
   23434:	ldrd	r4, [sp]
   23438:	ldr	r6, [sp, #8]
   2343c:	add	sp, sp, #12
   23440:	pop	{pc}		; (ldr pc, [sp], #4)
   23444:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23448:	strd	r6, [sp, #8]
   2344c:	strd	r8, [sp, #16]
   23450:	strd	sl, [sp, #24]
   23454:	str	lr, [sp, #32]
   23458:	sub	sp, sp, #52	; 0x34
   2345c:	ldr	ip, [sp, #88]	; 0x58
   23460:	ldr	r7, [sp, #96]	; 0x60
   23464:	ldr	r9, [r0]
   23468:	add	r8, r3, ip
   2346c:	cmp	r3, r2
   23470:	movle	lr, #0
   23474:	movgt	lr, #1
   23478:	orrs	lr, lr, r3, lsr #31
   2347c:	bne	237e0 <__assert_fail@plt+0x12288>
   23480:	mov	r5, r3
   23484:	str	r2, [sp, #32]
   23488:	str	r1, [sp, #36]	; 0x24
   2348c:	mov	r6, r0
   23490:	cmp	r8, r2
   23494:	bgt	235ec <__assert_fail@plt+0x12094>
   23498:	cmp	ip, #0
   2349c:	cmpge	r3, r8
   234a0:	bgt	235f4 <__assert_fail@plt+0x1209c>
   234a4:	cmp	r8, #0
   234a8:	blt	237f0 <__assert_fail@plt+0x12298>
   234ac:	cmp	r3, r8
   234b0:	movgt	r3, #0
   234b4:	movle	r3, #1
   234b8:	ands	r3, r3, ip, lsr #31
   234bc:	bne	237f0 <__assert_fail@plt+0x12298>
   234c0:	movw	r3, #0
   234c4:	movt	r3, #0
   234c8:	cmp	r3, #0
   234cc:	movne	r3, #1
   234d0:	moveq	r3, #0
   234d4:	mov	r2, r3
   234d8:	movw	r3, #0
   234dc:	movt	r3, #0
   234e0:	cmp	r3, #0
   234e4:	movne	r3, #1
   234e8:	moveq	r3, #0
   234ec:	orr	r3, r2, r3
   234f0:	ands	r3, r3, #255	; 0xff
   234f4:	str	r3, [sp, #28]
   234f8:	beq	2350c <__assert_fail@plt+0x11fb4>
   234fc:	add	r0, r9, #136	; 0x88
   23500:	bl	1124c <pthread_mutex_lock@plt>
   23504:	mov	r3, #1
   23508:	str	r3, [sp, #28]
   2350c:	ldrb	r3, [r6, #28]
   23510:	ubfx	fp, r3, #5, #2
   23514:	cmp	r8, r5
   23518:	ble	23530 <__assert_fail@plt+0x11fd8>
   2351c:	ldr	r2, [r6, #16]
   23520:	cmp	r2, #0
   23524:	beq	23530 <__assert_fail@plt+0x11fd8>
   23528:	tst	r3, #8
   2352c:	beq	235fc <__assert_fail@plt+0x120a4>
   23530:	ldrb	r3, [r6, #28]
   23534:	tst	r3, #16
   23538:	bne	2362c <__assert_fail@plt+0x120d4>
   2353c:	cmp	r7, #0
   23540:	moveq	r4, #1
   23544:	beq	2355c <__assert_fail@plt+0x12004>
   23548:	and	r3, r3, #6
   2354c:	cmp	r3, #4
   23550:	beq	23608 <__assert_fail@plt+0x120b0>
   23554:	ldr	r4, [r6, #24]
   23558:	add	r4, r4, #1
   2355c:	str	r4, [sp, #40]	; 0x28
   23560:	lsl	r0, r4, #3
   23564:	bl	258f4 <__assert_fail@plt+0x1439c>
   23568:	subs	sl, r0, #0
   2356c:	beq	237d8 <__assert_fail@plt+0x12280>
   23570:	str	fp, [sp, #16]
   23574:	str	sl, [sp, #12]
   23578:	str	r4, [sp, #8]
   2357c:	ldr	r3, [sp, #92]	; 0x5c
   23580:	str	r3, [sp, #4]
   23584:	str	r8, [sp]
   23588:	mov	r3, r5
   2358c:	ldr	r2, [sp, #32]
   23590:	ldr	r1, [sp, #36]	; 0x24
   23594:	mov	r0, r6
   23598:	bl	20c34 <__assert_fail@plt+0xf6dc>
   2359c:	subs	r8, r0, #0
   235a0:	beq	23638 <__assert_fail@plt+0x120e0>
   235a4:	cmp	r8, #1
   235a8:	mvneq	r5, #0
   235ac:	mvnne	r5, #1
   235b0:	mov	r0, sl
   235b4:	bl	13eac <__assert_fail@plt+0x2954>
   235b8:	ldr	r3, [sp, #28]
   235bc:	cmp	r3, #0
   235c0:	beq	235cc <__assert_fail@plt+0x12074>
   235c4:	add	r0, r9, #136	; 0x88
   235c8:	bl	11198 <pthread_mutex_unlock@plt>
   235cc:	mov	r0, r5
   235d0:	add	sp, sp, #52	; 0x34
   235d4:	ldrd	r4, [sp]
   235d8:	ldrd	r6, [sp, #8]
   235dc:	ldrd	r8, [sp, #16]
   235e0:	ldrd	sl, [sp, #24]
   235e4:	add	sp, sp, #32
   235e8:	pop	{pc}		; (ldr pc, [sp], #4)
   235ec:	ldr	r8, [sp, #32]
   235f0:	b	234c0 <__assert_fail@plt+0x11f68>
   235f4:	ldr	r8, [sp, #32]
   235f8:	b	234c0 <__assert_fail@plt+0x11f68>
   235fc:	mov	r0, r6
   23600:	bl	23398 <__assert_fail@plt+0x11e40>
   23604:	b	23530 <__assert_fail@plt+0x11fd8>
   23608:	ldr	r3, [r7]
   2360c:	ldr	r2, [r6, #24]
   23610:	cmp	r3, r2
   23614:	bhi	23554 <__assert_fail@plt+0x11ffc>
   23618:	cmp	r3, #0
   2361c:	movgt	r4, r3
   23620:	movle	r4, #1
   23624:	movle	r7, #0
   23628:	b	2355c <__assert_fail@plt+0x12004>
   2362c:	mov	r4, #1
   23630:	mov	r7, #0
   23634:	b	2355c <__assert_fail@plt+0x12004>
   23638:	cmp	r7, #0
   2363c:	beq	236e8 <__assert_fail@plt+0x12190>
   23640:	ldrb	fp, [r6, #28]
   23644:	ubfx	fp, fp, #1, #2
   23648:	add	r3, r4, #1
   2364c:	str	r3, [sp, #32]
   23650:	cmp	fp, #0
   23654:	beq	236fc <__assert_fail@plt+0x121a4>
   23658:	cmp	fp, #1
   2365c:	movne	fp, #2
   23660:	beq	23748 <__assert_fail@plt+0x121f0>
   23664:	cmp	r4, #0
   23668:	ble	237b4 <__assert_fail@plt+0x1225c>
   2366c:	ldr	r3, [sp, #40]	; 0x28
   23670:	lsl	ip, r3, #2
   23674:	mov	r3, #0
   23678:	add	r0, sl, #4
   2367c:	ldr	r1, [sl, r3, lsl #1]
   23680:	ldr	r2, [r7, #4]
   23684:	str	r1, [r2, r3]
   23688:	ldr	r1, [r0, r3, lsl #1]
   2368c:	ldr	r2, [r7, #8]
   23690:	str	r1, [r2, r3]
   23694:	add	r3, r3, #4
   23698:	cmp	ip, r3
   2369c:	bne	2367c <__assert_fail@plt+0x12124>
   236a0:	ldr	r3, [r7]
   236a4:	cmp	r4, r3
   236a8:	bcs	236d0 <__assert_fail@plt+0x12178>
   236ac:	mvn	r3, #0
   236b0:	ldr	r2, [r7, #8]
   236b4:	str	r3, [r2, r4, lsl #2]
   236b8:	ldr	r2, [r7, #4]
   236bc:	str	r3, [r2, r4, lsl #2]
   236c0:	add	r4, r4, #1
   236c4:	ldr	r2, [r7]
   236c8:	cmp	r4, r2
   236cc:	bcc	236b0 <__assert_fail@plt+0x12158>
   236d0:	ldrb	r3, [r6, #28]
   236d4:	bfi	r3, fp, #1, #2
   236d8:	strb	r3, [r6, #28]
   236dc:	and	r3, r3, #6
   236e0:	cmp	r3, #0
   236e4:	beq	237e8 <__assert_fail@plt+0x12290>
   236e8:	ldrb	r3, [sp, #100]	; 0x64
   236ec:	cmp	r3, #0
   236f0:	bne	237cc <__assert_fail@plt+0x12274>
   236f4:	ldr	r5, [sl]
   236f8:	b	235b0 <__assert_fail@plt+0x12058>
   236fc:	lsl	fp, r3, #2
   23700:	mov	r0, fp
   23704:	bl	258f4 <__assert_fail@plt+0x1439c>
   23708:	str	r0, [r7, #4]
   2370c:	cmp	r0, #0
   23710:	beq	237bc <__assert_fail@plt+0x12264>
   23714:	mov	r0, fp
   23718:	bl	258f4 <__assert_fail@plt+0x1439c>
   2371c:	str	r0, [r7, #8]
   23720:	cmp	r0, #0
   23724:	beq	23738 <__assert_fail@plt+0x121e0>
   23728:	ldr	r3, [sp, #32]
   2372c:	str	r3, [r7]
   23730:	mov	fp, #1
   23734:	b	23664 <__assert_fail@plt+0x1210c>
   23738:	ldr	r0, [r7, #4]
   2373c:	bl	13eac <__assert_fail@plt+0x2954>
   23740:	mov	fp, #0
   23744:	b	236d0 <__assert_fail@plt+0x12178>
   23748:	ldr	r3, [r7]
   2374c:	ldr	r2, [sp, #32]
   23750:	cmp	r3, r2
   23754:	bcs	23664 <__assert_fail@plt+0x1210c>
   23758:	lsl	r3, r2, #2
   2375c:	str	r3, [sp, #44]	; 0x2c
   23760:	mov	r1, r3
   23764:	ldr	r0, [r7, #4]
   23768:	bl	25930 <__assert_fail@plt+0x143d8>
   2376c:	subs	r2, r0, #0
   23770:	str	r2, [sp, #36]	; 0x24
   23774:	beq	237c4 <__assert_fail@plt+0x1226c>
   23778:	ldr	r1, [sp, #44]	; 0x2c
   2377c:	ldr	r0, [r7, #8]
   23780:	bl	25930 <__assert_fail@plt+0x143d8>
   23784:	cmp	r0, #0
   23788:	beq	237a4 <__assert_fail@plt+0x1224c>
   2378c:	ldr	r3, [sp, #36]	; 0x24
   23790:	str	r3, [r7, #4]
   23794:	str	r0, [r7, #8]
   23798:	ldr	r3, [sp, #32]
   2379c:	str	r3, [r7]
   237a0:	b	23664 <__assert_fail@plt+0x1210c>
   237a4:	ldr	r0, [sp, #36]	; 0x24
   237a8:	bl	13eac <__assert_fail@plt+0x2954>
   237ac:	mov	fp, #0
   237b0:	b	236d0 <__assert_fail@plt+0x12178>
   237b4:	mov	r4, r8
   237b8:	b	236a0 <__assert_fail@plt+0x12148>
   237bc:	mov	fp, #0
   237c0:	b	236d0 <__assert_fail@plt+0x12178>
   237c4:	mov	fp, #0
   237c8:	b	236d0 <__assert_fail@plt+0x12178>
   237cc:	ldr	r3, [sl, #4]
   237d0:	sub	r5, r3, r5
   237d4:	b	235b0 <__assert_fail@plt+0x12058>
   237d8:	mvn	r5, #1
   237dc:	b	235b8 <__assert_fail@plt+0x12060>
   237e0:	mvn	r5, #0
   237e4:	b	235cc <__assert_fail@plt+0x12074>
   237e8:	mvn	r5, #1
   237ec:	b	235b0 <__assert_fail@plt+0x12058>
   237f0:	movw	r3, #0
   237f4:	movt	r3, #0
   237f8:	cmp	r3, #0
   237fc:	movne	r3, #1
   23800:	moveq	r3, #0
   23804:	mov	r2, r3
   23808:	movw	r3, #0
   2380c:	movt	r3, #0
   23810:	cmp	r3, #0
   23814:	movne	r3, #1
   23818:	moveq	r3, #0
   2381c:	orr	r3, r2, r3
   23820:	ands	r3, r3, #255	; 0xff
   23824:	str	r3, [sp, #28]
   23828:	movne	r8, #0
   2382c:	bne	234fc <__assert_fail@plt+0x11fa4>
   23830:	ldrb	fp, [r6, #28]
   23834:	ubfx	fp, fp, #5, #2
   23838:	mov	r8, #0
   2383c:	b	23530 <__assert_fail@plt+0x11fd8>
   23840:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23844:	strd	r6, [sp, #8]
   23848:	strd	r8, [sp, #16]
   2384c:	strd	sl, [sp, #24]
   23850:	str	lr, [sp, #32]
   23854:	sub	sp, sp, #20
   23858:	mov	r7, r3
   2385c:	ldr	r5, [sp, #56]	; 0x38
   23860:	ldr	r6, [sp, #72]	; 0x48
   23864:	orr	r3, r5, r2
   23868:	orrs	r3, r3, r6
   2386c:	mvnmi	r4, #1
   23870:	bmi	238d8 <__assert_fail@plt+0x12380>
   23874:	mov	r9, r0
   23878:	mov	sl, r1
   2387c:	mov	r4, r2
   23880:	adds	fp, r2, r5
   23884:	bvs	2393c <__assert_fail@plt+0x123e4>
   23888:	cmp	r5, #0
   2388c:	ble	23930 <__assert_fail@plt+0x123d8>
   23890:	cmp	r2, #0
   23894:	movle	r8, #0
   23898:	bgt	238f8 <__assert_fail@plt+0x123a0>
   2389c:	ldrb	r3, [sp, #76]	; 0x4c
   238a0:	str	r3, [sp, #12]
   238a4:	ldr	r3, [sp, #68]	; 0x44
   238a8:	str	r3, [sp, #8]
   238ac:	str	r6, [sp, #4]
   238b0:	ldr	r3, [sp, #64]	; 0x40
   238b4:	str	r3, [sp]
   238b8:	ldr	r3, [sp, #60]	; 0x3c
   238bc:	mov	r2, fp
   238c0:	mov	r1, r7
   238c4:	mov	r0, r9
   238c8:	bl	23444 <__assert_fail@plt+0x11eec>
   238cc:	mov	r4, r0
   238d0:	mov	r0, r8
   238d4:	bl	13eac <__assert_fail@plt+0x2954>
   238d8:	mov	r0, r4
   238dc:	add	sp, sp, #20
   238e0:	ldrd	r4, [sp]
   238e4:	ldrd	r6, [sp, #8]
   238e8:	ldrd	r8, [sp, #16]
   238ec:	ldrd	sl, [sp, #24]
   238f0:	add	sp, sp, #32
   238f4:	pop	{pc}		; (ldr pc, [sp], #4)
   238f8:	mov	r0, fp
   238fc:	bl	258f4 <__assert_fail@plt+0x1439c>
   23900:	subs	r8, r0, #0
   23904:	beq	23944 <__assert_fail@plt+0x123ec>
   23908:	mov	r2, r4
   2390c:	mov	r1, sl
   23910:	mov	r0, r8
   23914:	bl	11264 <memcpy@plt>
   23918:	mov	r2, r5
   2391c:	mov	r1, r7
   23920:	add	r0, r8, r4
   23924:	bl	11264 <memcpy@plt>
   23928:	mov	r7, r8
   2392c:	b	2389c <__assert_fail@plt+0x12344>
   23930:	mov	r7, r1
   23934:	mov	r8, #0
   23938:	b	2389c <__assert_fail@plt+0x12344>
   2393c:	mvn	r4, #1
   23940:	b	238d8 <__assert_fail@plt+0x12380>
   23944:	mvn	r4, #1
   23948:	b	238d8 <__assert_fail@plt+0x12380>
   2394c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23950:	strd	r6, [sp, #8]
   23954:	str	r8, [sp, #16]
   23958:	str	lr, [sp, #20]
   2395c:	mov	r4, r0
   23960:	mov	r7, r1
   23964:	mov	r6, r2
   23968:	and	r2, r2, #1
   2396c:	movw	r5, #45820	; 0xb2fc
   23970:	movt	r5, #3
   23974:	movw	r3, #710	; 0x2c6
   23978:	movt	r3, #257	; 0x101
   2397c:	cmp	r2, #0
   23980:	moveq	r5, r3
   23984:	mov	r3, #0
   23988:	str	r3, [r0]
   2398c:	str	r3, [r0, #4]
   23990:	str	r3, [r0, #8]
   23994:	mov	r0, #256	; 0x100
   23998:	bl	258f4 <__assert_fail@plt+0x1439c>
   2399c:	str	r0, [r4, #16]
   239a0:	cmp	r0, #0
   239a4:	beq	23a4c <__assert_fail@plt+0x124f4>
   239a8:	lsl	r3, r6, #21
   239ac:	and	r3, r3, #4194304	; 0x400000
   239b0:	orr	r5, r3, r5
   239b4:	tst	r6, #4
   239b8:	bicne	r5, r5, #64	; 0x40
   239bc:	orrne	r5, r5, #256	; 0x100
   239c0:	movne	r2, #1
   239c4:	moveq	r2, #0
   239c8:	ldrb	r3, [r4, #28]
   239cc:	bfi	r3, r2, #7, #1
   239d0:	ubfx	r6, r6, #3, #1
   239d4:	bfi	r3, r6, #4, #1
   239d8:	strb	r3, [r4, #28]
   239dc:	mov	r3, #0
   239e0:	str	r3, [r4, #20]
   239e4:	mov	r0, r7
   239e8:	bl	11414 <strlen@plt>
   239ec:	mov	r3, r5
   239f0:	mov	r2, r0
   239f4:	mov	r1, r7
   239f8:	mov	r0, r4
   239fc:	bl	2268c <__assert_fail@plt+0x11134>
   23a00:	mov	r5, r0
   23a04:	cmp	r0, #16
   23a08:	beq	23a34 <__assert_fail@plt+0x124dc>
   23a0c:	cmp	r0, #0
   23a10:	bne	23a38 <__assert_fail@plt+0x124e0>
   23a14:	mov	r0, r4
   23a18:	bl	23398 <__assert_fail@plt+0x11e40>
   23a1c:	mov	r0, r5
   23a20:	ldrd	r4, [sp]
   23a24:	ldrd	r6, [sp, #8]
   23a28:	ldr	r8, [sp, #16]
   23a2c:	add	sp, sp, #20
   23a30:	pop	{pc}		; (ldr pc, [sp], #4)
   23a34:	mov	r5, #8
   23a38:	ldr	r0, [r4, #16]
   23a3c:	bl	13eac <__assert_fail@plt+0x2954>
   23a40:	mov	r3, #0
   23a44:	str	r3, [r4, #16]
   23a48:	b	23a1c <__assert_fail@plt+0x124c4>
   23a4c:	mov	r5, #12
   23a50:	b	23a1c <__assert_fail@plt+0x124c4>
   23a54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23a58:	strd	r6, [sp, #8]
   23a5c:	str	r8, [sp, #16]
   23a60:	str	lr, [sp, #20]
   23a64:	cmp	r0, #16
   23a68:	bhi	23ae4 <__assert_fail@plt+0x1258c>
   23a6c:	mov	r6, r2
   23a70:	mov	r4, r3
   23a74:	movw	r3, #28516	; 0x6f64
   23a78:	movt	r3, #2
   23a7c:	add	r1, r3, #32
   23a80:	add	r3, r3, r0, lsl #2
   23a84:	ldr	r3, [r3, #416]	; 0x1a0
   23a88:	mov	r2, #5
   23a8c:	add	r1, r1, r3
   23a90:	mov	r0, #0
   23a94:	bl	112d0 <dcgettext@plt>
   23a98:	mov	r7, r0
   23a9c:	bl	11414 <strlen@plt>
   23aa0:	add	r5, r0, #1
   23aa4:	cmp	r4, #0
   23aa8:	beq	23acc <__assert_fail@plt+0x12574>
   23aac:	cmp	r5, r4
   23ab0:	subhi	r2, r4, #1
   23ab4:	movhi	r3, #0
   23ab8:	strbhi	r3, [r6, r2]
   23abc:	movls	r2, r5
   23ac0:	mov	r1, r7
   23ac4:	mov	r0, r6
   23ac8:	bl	11264 <memcpy@plt>
   23acc:	mov	r0, r5
   23ad0:	ldrd	r4, [sp]
   23ad4:	ldrd	r6, [sp, #8]
   23ad8:	ldr	r8, [sp, #16]
   23adc:	add	sp, sp, #20
   23ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   23ae4:	bl	11534 <abort@plt>
   23ae8:	strd	r4, [sp, #-16]!
   23aec:	str	r6, [sp, #8]
   23af0:	str	lr, [sp, #12]
   23af4:	mov	r4, r0
   23af8:	ldr	r5, [r0]
   23afc:	cmp	r5, #0
   23b00:	beq	23b48 <__assert_fail@plt+0x125f0>
   23b04:	movw	r3, #0
   23b08:	movt	r3, #0
   23b0c:	cmp	r3, #0
   23b10:	movne	r3, #1
   23b14:	moveq	r3, #0
   23b18:	movw	r2, #0
   23b1c:	movt	r2, #0
   23b20:	cmp	r2, #0
   23b24:	movne	r2, #1
   23b28:	moveq	r2, #0
   23b2c:	orr	r3, r3, r2
   23b30:	tst	r3, #255	; 0xff
   23b34:	beq	23b40 <__assert_fail@plt+0x125e8>
   23b38:	add	r0, r5, #136	; 0x88
   23b3c:	bl	11210 <pthread_mutex_destroy@plt>
   23b40:	mov	r0, r5
   23b44:	bl	19708 <__assert_fail@plt+0x81b0>
   23b48:	mov	r5, #0
   23b4c:	str	r5, [r4]
   23b50:	str	r5, [r4, #4]
   23b54:	ldr	r0, [r4, #16]
   23b58:	bl	13eac <__assert_fail@plt+0x2954>
   23b5c:	str	r5, [r4, #16]
   23b60:	ldr	r0, [r4, #20]
   23b64:	bl	13eac <__assert_fail@plt+0x2954>
   23b68:	str	r5, [r4, #20]
   23b6c:	ldrd	r4, [sp]
   23b70:	ldr	r6, [sp, #8]
   23b74:	add	sp, sp, #12
   23b78:	pop	{pc}		; (ldr pc, [sp], #4)
   23b7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23b80:	strd	r6, [sp, #8]
   23b84:	strd	r8, [sp, #16]
   23b88:	strd	sl, [sp, #24]
   23b8c:	str	lr, [sp, #32]
   23b90:	sub	sp, sp, #36	; 0x24
   23b94:	ldr	r6, [sp, #72]	; 0x48
   23b98:	bics	ip, r6, #7
   23b9c:	movne	r0, #2
   23ba0:	bne	23c60 <__assert_fail@plt+0x12708>
   23ba4:	mov	r7, r3
   23ba8:	mov	r9, r2
   23bac:	str	r1, [sp, #28]
   23bb0:	mov	r5, r0
   23bb4:	ands	fp, r6, #4
   23bb8:	beq	23c7c <__assert_fail@plt+0x12724>
   23bbc:	ldr	fp, [r3]
   23bc0:	ldr	r8, [r3, #4]
   23bc4:	ldr	sl, [r5]
   23bc8:	movw	r3, #0
   23bcc:	movt	r3, #0
   23bd0:	cmp	r3, #0
   23bd4:	movne	r4, #1
   23bd8:	moveq	r4, #0
   23bdc:	mov	r3, r4
   23be0:	mov	r4, #1
   23be4:	movw	r2, #0
   23be8:	movt	r2, #0
   23bec:	cmp	r2, #0
   23bf0:	movne	r4, #1
   23bf4:	moveq	r4, #0
   23bf8:	orr	r4, r3, r4
   23bfc:	ands	r4, r4, #255	; 0xff
   23c00:	beq	23c0c <__assert_fail@plt+0x126b4>
   23c04:	add	r0, sl, #136	; 0x88
   23c08:	bl	1124c <pthread_mutex_lock@plt>
   23c0c:	ldrb	r3, [r5, #28]
   23c10:	tst	r3, #16
   23c14:	beq	23c8c <__assert_fail@plt+0x12734>
   23c18:	str	r6, [sp, #16]
   23c1c:	mov	r3, #0
   23c20:	str	r3, [sp, #12]
   23c24:	str	r3, [sp, #8]
   23c28:	str	r8, [sp, #4]
   23c2c:	str	r8, [sp]
   23c30:	mov	r3, fp
   23c34:	mov	r2, r8
   23c38:	ldr	r1, [sp, #28]
   23c3c:	mov	r0, r5
   23c40:	bl	20c34 <__assert_fail@plt+0xf6dc>
   23c44:	mov	r5, r0
   23c48:	cmp	r4, #0
   23c4c:	beq	23c58 <__assert_fail@plt+0x12700>
   23c50:	add	r0, sl, #136	; 0x88
   23c54:	bl	11198 <pthread_mutex_unlock@plt>
   23c58:	adds	r0, r5, #0
   23c5c:	movne	r0, #1
   23c60:	add	sp, sp, #36	; 0x24
   23c64:	ldrd	r4, [sp]
   23c68:	ldrd	r6, [sp, #8]
   23c6c:	ldrd	r8, [sp, #16]
   23c70:	ldrd	sl, [sp, #24]
   23c74:	add	sp, sp, #32
   23c78:	pop	{pc}		; (ldr pc, [sp], #4)
   23c7c:	ldr	r0, [sp, #28]
   23c80:	bl	11414 <strlen@plt>
   23c84:	mov	r8, r0
   23c88:	b	23bc4 <__assert_fail@plt+0x1266c>
   23c8c:	str	r6, [sp, #16]
   23c90:	str	r7, [sp, #12]
   23c94:	str	r9, [sp, #8]
   23c98:	str	r8, [sp, #4]
   23c9c:	str	r8, [sp]
   23ca0:	mov	r3, fp
   23ca4:	mov	r2, r8
   23ca8:	ldr	r1, [sp, #28]
   23cac:	mov	r0, r5
   23cb0:	bl	20c34 <__assert_fail@plt+0xf6dc>
   23cb4:	mov	r5, r0
   23cb8:	b	23c48 <__assert_fail@plt+0x126f0>
   23cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   23cc0:	sub	sp, sp, #20
   23cc4:	mov	ip, #1
   23cc8:	str	ip, [sp, #12]
   23ccc:	ldr	ip, [sp, #24]
   23cd0:	str	ip, [sp, #8]
   23cd4:	str	r2, [sp, #4]
   23cd8:	mov	ip, #0
   23cdc:	str	ip, [sp]
   23ce0:	bl	23444 <__assert_fail@plt+0x11eec>
   23ce4:	add	sp, sp, #20
   23ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   23cec:	push	{lr}		; (str lr, [sp, #-4]!)
   23cf0:	sub	sp, sp, #20
   23cf4:	mov	ip, #0
   23cf8:	str	ip, [sp, #12]
   23cfc:	ldr	ip, [sp, #28]
   23d00:	str	ip, [sp, #8]
   23d04:	str	r2, [sp, #4]
   23d08:	ldr	ip, [sp, #24]
   23d0c:	str	ip, [sp]
   23d10:	bl	23444 <__assert_fail@plt+0x11eec>
   23d14:	add	sp, sp, #20
   23d18:	pop	{pc}		; (ldr pc, [sp], #4)
   23d1c:	push	{lr}		; (str lr, [sp, #-4]!)
   23d20:	sub	sp, sp, #28
   23d24:	mov	ip, #1
   23d28:	str	ip, [sp, #20]
   23d2c:	ldr	ip, [sp, #44]	; 0x2c
   23d30:	str	ip, [sp, #16]
   23d34:	ldr	ip, [sp, #40]	; 0x28
   23d38:	str	ip, [sp, #12]
   23d3c:	mov	ip, #0
   23d40:	str	ip, [sp, #8]
   23d44:	ldr	ip, [sp, #36]	; 0x24
   23d48:	str	ip, [sp, #4]
   23d4c:	ldr	ip, [sp, #32]
   23d50:	str	ip, [sp]
   23d54:	bl	23840 <__assert_fail@plt+0x122e8>
   23d58:	add	sp, sp, #28
   23d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   23d60:	push	{lr}		; (str lr, [sp, #-4]!)
   23d64:	sub	sp, sp, #28
   23d68:	mov	ip, #0
   23d6c:	str	ip, [sp, #20]
   23d70:	ldr	ip, [sp, #48]	; 0x30
   23d74:	str	ip, [sp, #16]
   23d78:	ldr	ip, [sp, #44]	; 0x2c
   23d7c:	str	ip, [sp, #12]
   23d80:	ldr	ip, [sp, #40]	; 0x28
   23d84:	str	ip, [sp, #8]
   23d88:	ldr	ip, [sp, #36]	; 0x24
   23d8c:	str	ip, [sp, #4]
   23d90:	ldr	ip, [sp, #32]
   23d94:	str	ip, [sp]
   23d98:	bl	23840 <__assert_fail@plt+0x122e8>
   23d9c:	add	sp, sp, #28
   23da0:	pop	{pc}		; (ldr pc, [sp], #4)
   23da4:	cmp	r2, #0
   23da8:	beq	23dd4 <__assert_fail@plt+0x1287c>
   23dac:	push	{lr}		; (str lr, [sp, #-4]!)
   23db0:	ldrb	ip, [r0, #28]
   23db4:	mov	lr, #1
   23db8:	bfi	ip, lr, #1, #2
   23dbc:	strb	ip, [r0, #28]
   23dc0:	str	r2, [r1]
   23dc4:	str	r3, [r1, #4]
   23dc8:	ldr	r3, [sp, #4]
   23dcc:	str	r3, [r1, #8]
   23dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   23dd4:	ldrb	r3, [r0, #28]
   23dd8:	bfc	r3, #1, #2
   23ddc:	strb	r3, [r0, #28]
   23de0:	mov	r3, #0
   23de4:	str	r3, [r1]
   23de8:	str	r3, [r1, #8]
   23dec:	str	r3, [r1, #4]
   23df0:	bx	lr
   23df4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23df8:	strd	r6, [sp, #8]
   23dfc:	strd	r8, [sp, #16]
   23e00:	str	sl, [sp, #24]
   23e04:	str	lr, [sp, #28]
   23e08:	mov	r8, r0
   23e0c:	mov	r7, r1
   23e10:	mov	r9, r2
   23e14:	mov	r5, #0
   23e18:	movt	r5, #32752	; 0x7ff0
   23e1c:	b	23e24 <__assert_fail@plt+0x128cc>
   23e20:	mov	r9, r5
   23e24:	mov	r2, r9
   23e28:	mov	r1, r7
   23e2c:	mov	r0, r8
   23e30:	bl	11204 <read@plt>
   23e34:	subs	r6, r0, #0
   23e38:	bge	23e84 <__assert_fail@plt+0x1292c>
   23e3c:	bl	1142c <__errno_location@plt>
   23e40:	ldr	r3, [r0]
   23e44:	cmp	r3, #4
   23e48:	beq	23e24 <__assert_fail@plt+0x128cc>
   23e4c:	cmp	r9, r5
   23e50:	movls	r4, #0
   23e54:	movhi	r4, #1
   23e58:	cmp	r3, #22
   23e5c:	movne	r4, #0
   23e60:	cmp	r4, #0
   23e64:	bne	23e20 <__assert_fail@plt+0x128c8>
   23e68:	mov	r0, r6
   23e6c:	ldrd	r4, [sp]
   23e70:	ldrd	r6, [sp, #8]
   23e74:	ldrd	r8, [sp, #16]
   23e78:	ldr	sl, [sp, #24]
   23e7c:	add	sp, sp, #28
   23e80:	pop	{pc}		; (ldr pc, [sp], #4)
   23e84:	mov	r0, r6
   23e88:	b	23e6c <__assert_fail@plt+0x12914>
   23e8c:	str	r4, [sp, #-8]!
   23e90:	str	lr, [sp, #4]
   23e94:	mov	r2, #3
   23e98:	mov	r1, #0
   23e9c:	bl	25aec <__assert_fail@plt+0x14594>
   23ea0:	ldr	r4, [sp]
   23ea4:	add	sp, sp, #4
   23ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   23eac:	strd	r4, [sp, #-16]!
   23eb0:	str	r6, [sp, #8]
   23eb4:	str	lr, [sp, #12]
   23eb8:	sub	sp, sp, #32
   23ebc:	mov	r4, r0
   23ec0:	ldr	r5, [sp, #48]	; 0x30
   23ec4:	ldr	r6, [sp, #52]	; 0x34
   23ec8:	cmp	r1, #0
   23ecc:	beq	23f98 <__assert_fail@plt+0x12a40>
   23ed0:	str	r3, [sp, #4]
   23ed4:	str	r2, [sp]
   23ed8:	mov	r3, r1
   23edc:	movw	r2, #29104	; 0x71b0
   23ee0:	movt	r2, #2
   23ee4:	mov	r1, #1
   23ee8:	bl	1148c <__fprintf_chk@plt>
   23eec:	mov	r2, #5
   23ef0:	movw	r1, #29124	; 0x71c4
   23ef4:	movt	r1, #2
   23ef8:	mov	r0, #0
   23efc:	bl	112d0 <dcgettext@plt>
   23f00:	movw	r3, #2022	; 0x7e6
   23f04:	str	r3, [sp]
   23f08:	mov	r3, r0
   23f0c:	movw	r2, #29852	; 0x749c
   23f10:	movt	r2, #2
   23f14:	mov	r1, #1
   23f18:	mov	r0, r4
   23f1c:	bl	1148c <__fprintf_chk@plt>
   23f20:	mov	r1, r4
   23f24:	mov	r0, #10
   23f28:	bl	112c4 <fputc_unlocked@plt>
   23f2c:	mov	r2, #5
   23f30:	movw	r1, #29128	; 0x71c8
   23f34:	movt	r1, #2
   23f38:	mov	r0, #0
   23f3c:	bl	112d0 <dcgettext@plt>
   23f40:	movw	r3, #29300	; 0x7274
   23f44:	movt	r3, #2
   23f48:	mov	r2, r0
   23f4c:	mov	r1, #1
   23f50:	mov	r0, r4
   23f54:	bl	1148c <__fprintf_chk@plt>
   23f58:	mov	r1, r4
   23f5c:	mov	r0, #10
   23f60:	bl	112c4 <fputc_unlocked@plt>
   23f64:	cmp	r6, #9
   23f68:	ldrls	pc, [pc, r6, lsl #2]
   23f6c:	b	24270 <__assert_fail@plt+0x12d18>
   23f70:	ldrdeq	r3, [r2], -ip
   23f74:			; <UNDEFINED> instruction: 0x00023fb4
   23f78:	strdeq	r3, [r2], -r0
   23f7c:	andeq	r4, r2, r4, lsr #32
   23f80:	andeq	r4, r2, r0, rrx
   23f84:	andeq	r4, r2, r4, lsr #1
   23f88:	strdeq	r4, [r2], -r0
   23f8c:	andeq	r4, r2, r4, asr #2
   23f90:	andeq	r4, r2, r0, lsr #3
   23f94:	andeq	r4, r2, r4, lsl #4
   23f98:	str	r3, [sp]
   23f9c:	mov	r3, r2
   23fa0:	movw	r2, #29116	; 0x71bc
   23fa4:	movt	r2, #2
   23fa8:	mov	r1, #1
   23fac:	bl	1148c <__fprintf_chk@plt>
   23fb0:	b	23eec <__assert_fail@plt+0x12994>
   23fb4:	mov	r2, #5
   23fb8:	movw	r1, #29336	; 0x7298
   23fbc:	movt	r1, #2
   23fc0:	mov	r0, #0
   23fc4:	bl	112d0 <dcgettext@plt>
   23fc8:	ldr	r3, [r5]
   23fcc:	mov	r2, r0
   23fd0:	mov	r1, #1
   23fd4:	mov	r0, r4
   23fd8:	bl	1148c <__fprintf_chk@plt>
   23fdc:	add	sp, sp, #32
   23fe0:	ldrd	r4, [sp]
   23fe4:	ldr	r6, [sp, #8]
   23fe8:	add	sp, sp, #12
   23fec:	pop	{pc}		; (ldr pc, [sp], #4)
   23ff0:	mov	r2, #5
   23ff4:	movw	r1, #29352	; 0x72a8
   23ff8:	movt	r1, #2
   23ffc:	mov	r0, #0
   24000:	bl	112d0 <dcgettext@plt>
   24004:	ldr	r3, [r5, #4]
   24008:	str	r3, [sp]
   2400c:	ldr	r3, [r5]
   24010:	mov	r2, r0
   24014:	mov	r1, #1
   24018:	mov	r0, r4
   2401c:	bl	1148c <__fprintf_chk@plt>
   24020:	b	23fdc <__assert_fail@plt+0x12a84>
   24024:	mov	r2, #5
   24028:	movw	r1, #29376	; 0x72c0
   2402c:	movt	r1, #2
   24030:	mov	r0, #0
   24034:	bl	112d0 <dcgettext@plt>
   24038:	ldr	r3, [r5, #8]
   2403c:	str	r3, [sp, #4]
   24040:	ldr	r3, [r5, #4]
   24044:	str	r3, [sp]
   24048:	ldr	r3, [r5]
   2404c:	mov	r2, r0
   24050:	mov	r1, #1
   24054:	mov	r0, r4
   24058:	bl	1148c <__fprintf_chk@plt>
   2405c:	b	23fdc <__assert_fail@plt+0x12a84>
   24060:	mov	r2, #5
   24064:	movw	r1, #29404	; 0x72dc
   24068:	movt	r1, #2
   2406c:	mov	r0, #0
   24070:	bl	112d0 <dcgettext@plt>
   24074:	ldr	r3, [r5, #12]
   24078:	str	r3, [sp, #8]
   2407c:	ldr	r3, [r5, #8]
   24080:	str	r3, [sp, #4]
   24084:	ldr	r3, [r5, #4]
   24088:	str	r3, [sp]
   2408c:	ldr	r3, [r5]
   24090:	mov	r2, r0
   24094:	mov	r1, #1
   24098:	mov	r0, r4
   2409c:	bl	1148c <__fprintf_chk@plt>
   240a0:	b	23fdc <__assert_fail@plt+0x12a84>
   240a4:	mov	r2, #5
   240a8:	movw	r1, #29436	; 0x72fc
   240ac:	movt	r1, #2
   240b0:	mov	r0, #0
   240b4:	bl	112d0 <dcgettext@plt>
   240b8:	ldr	r3, [r5, #16]
   240bc:	str	r3, [sp, #12]
   240c0:	ldr	r3, [r5, #12]
   240c4:	str	r3, [sp, #8]
   240c8:	ldr	r3, [r5, #8]
   240cc:	str	r3, [sp, #4]
   240d0:	ldr	r3, [r5, #4]
   240d4:	str	r3, [sp]
   240d8:	ldr	r3, [r5]
   240dc:	mov	r2, r0
   240e0:	mov	r1, #1
   240e4:	mov	r0, r4
   240e8:	bl	1148c <__fprintf_chk@plt>
   240ec:	b	23fdc <__assert_fail@plt+0x12a84>
   240f0:	mov	r2, #5
   240f4:	movw	r1, #29472	; 0x7320
   240f8:	movt	r1, #2
   240fc:	mov	r0, #0
   24100:	bl	112d0 <dcgettext@plt>
   24104:	ldr	r3, [r5, #20]
   24108:	str	r3, [sp, #16]
   2410c:	ldr	r3, [r5, #16]
   24110:	str	r3, [sp, #12]
   24114:	ldr	r3, [r5, #12]
   24118:	str	r3, [sp, #8]
   2411c:	ldr	r3, [r5, #8]
   24120:	str	r3, [sp, #4]
   24124:	ldr	r3, [r5, #4]
   24128:	str	r3, [sp]
   2412c:	ldr	r3, [r5]
   24130:	mov	r2, r0
   24134:	mov	r1, #1
   24138:	mov	r0, r4
   2413c:	bl	1148c <__fprintf_chk@plt>
   24140:	b	23fdc <__assert_fail@plt+0x12a84>
   24144:	mov	r2, #5
   24148:	movw	r1, #29512	; 0x7348
   2414c:	movt	r1, #2
   24150:	mov	r0, #0
   24154:	bl	112d0 <dcgettext@plt>
   24158:	ldr	r3, [r5, #24]
   2415c:	str	r3, [sp, #20]
   24160:	ldr	r3, [r5, #20]
   24164:	str	r3, [sp, #16]
   24168:	ldr	r3, [r5, #16]
   2416c:	str	r3, [sp, #12]
   24170:	ldr	r3, [r5, #12]
   24174:	str	r3, [sp, #8]
   24178:	ldr	r3, [r5, #8]
   2417c:	str	r3, [sp, #4]
   24180:	ldr	r3, [r5, #4]
   24184:	str	r3, [sp]
   24188:	ldr	r3, [r5]
   2418c:	mov	r2, r0
   24190:	mov	r1, #1
   24194:	mov	r0, r4
   24198:	bl	1148c <__fprintf_chk@plt>
   2419c:	b	23fdc <__assert_fail@plt+0x12a84>
   241a0:	mov	r2, #5
   241a4:	movw	r1, #29556	; 0x7374
   241a8:	movt	r1, #2
   241ac:	mov	r0, #0
   241b0:	bl	112d0 <dcgettext@plt>
   241b4:	ldr	r3, [r5, #28]
   241b8:	str	r3, [sp, #24]
   241bc:	ldr	r3, [r5, #24]
   241c0:	str	r3, [sp, #20]
   241c4:	ldr	r3, [r5, #20]
   241c8:	str	r3, [sp, #16]
   241cc:	ldr	r3, [r5, #16]
   241d0:	str	r3, [sp, #12]
   241d4:	ldr	r3, [r5, #12]
   241d8:	str	r3, [sp, #8]
   241dc:	ldr	r3, [r5, #8]
   241e0:	str	r3, [sp, #4]
   241e4:	ldr	r3, [r5, #4]
   241e8:	str	r3, [sp]
   241ec:	ldr	r3, [r5]
   241f0:	mov	r2, r0
   241f4:	mov	r1, #1
   241f8:	mov	r0, r4
   241fc:	bl	1148c <__fprintf_chk@plt>
   24200:	b	23fdc <__assert_fail@plt+0x12a84>
   24204:	mov	r2, #5
   24208:	movw	r1, #29604	; 0x73a4
   2420c:	movt	r1, #2
   24210:	mov	r0, #0
   24214:	bl	112d0 <dcgettext@plt>
   24218:	ldr	r3, [r5, #32]
   2421c:	str	r3, [sp, #28]
   24220:	ldr	r3, [r5, #28]
   24224:	str	r3, [sp, #24]
   24228:	ldr	r3, [r5, #24]
   2422c:	str	r3, [sp, #20]
   24230:	ldr	r3, [r5, #20]
   24234:	str	r3, [sp, #16]
   24238:	ldr	r3, [r5, #16]
   2423c:	str	r3, [sp, #12]
   24240:	ldr	r3, [r5, #12]
   24244:	str	r3, [sp, #8]
   24248:	ldr	r3, [r5, #8]
   2424c:	str	r3, [sp, #4]
   24250:	ldr	r3, [r5, #4]
   24254:	str	r3, [sp]
   24258:	ldr	r3, [r5]
   2425c:	mov	r2, r0
   24260:	mov	r1, #1
   24264:	mov	r0, r4
   24268:	bl	1148c <__fprintf_chk@plt>
   2426c:	b	23fdc <__assert_fail@plt+0x12a84>
   24270:	mov	r2, #5
   24274:	movw	r1, #29656	; 0x73d8
   24278:	movt	r1, #2
   2427c:	mov	r0, #0
   24280:	bl	112d0 <dcgettext@plt>
   24284:	ldr	r3, [r5, #32]
   24288:	str	r3, [sp, #28]
   2428c:	ldr	r3, [r5, #28]
   24290:	str	r3, [sp, #24]
   24294:	ldr	r3, [r5, #24]
   24298:	str	r3, [sp, #20]
   2429c:	ldr	r3, [r5, #20]
   242a0:	str	r3, [sp, #16]
   242a4:	ldr	r3, [r5, #16]
   242a8:	str	r3, [sp, #12]
   242ac:	ldr	r3, [r5, #12]
   242b0:	str	r3, [sp, #8]
   242b4:	ldr	r3, [r5, #8]
   242b8:	str	r3, [sp, #4]
   242bc:	ldr	r3, [r5, #4]
   242c0:	str	r3, [sp]
   242c4:	ldr	r3, [r5]
   242c8:	mov	r2, r0
   242cc:	mov	r1, #1
   242d0:	mov	r0, r4
   242d4:	bl	1148c <__fprintf_chk@plt>
   242d8:	b	23fdc <__assert_fail@plt+0x12a84>
   242dc:	strd	r4, [sp, #-12]!
   242e0:	str	lr, [sp, #8]
   242e4:	sub	sp, sp, #12
   242e8:	ldr	r5, [sp, #24]
   242ec:	ldr	ip, [r5]
   242f0:	cmp	ip, #0
   242f4:	beq	2432c <__assert_fail@plt+0x12dd4>
   242f8:	mov	lr, r5
   242fc:	mov	ip, #0
   24300:	add	ip, ip, #1
   24304:	ldr	r4, [lr, #4]!
   24308:	cmp	r4, #0
   2430c:	bne	24300 <__assert_fail@plt+0x12da8>
   24310:	str	ip, [sp, #4]
   24314:	str	r5, [sp]
   24318:	bl	23eac <__assert_fail@plt+0x12954>
   2431c:	add	sp, sp, #12
   24320:	ldrd	r4, [sp]
   24324:	add	sp, sp, #8
   24328:	pop	{pc}		; (ldr pc, [sp], #4)
   2432c:	mov	ip, #0
   24330:	b	24310 <__assert_fail@plt+0x12db8>
   24334:	strd	r4, [sp, #-12]!
   24338:	str	lr, [sp, #8]
   2433c:	sub	sp, sp, #52	; 0x34
   24340:	ldr	r5, [sp, #64]	; 0x40
   24344:	add	r4, sp, #8
   24348:	mov	ip, #0
   2434c:	ldr	lr, [r5], #4
   24350:	str	lr, [r4], #4
   24354:	cmp	lr, #0
   24358:	beq	24368 <__assert_fail@plt+0x12e10>
   2435c:	add	ip, ip, #1
   24360:	cmp	ip, #10
   24364:	bne	2434c <__assert_fail@plt+0x12df4>
   24368:	str	ip, [sp, #4]
   2436c:	add	ip, sp, #8
   24370:	str	ip, [sp]
   24374:	bl	23eac <__assert_fail@plt+0x12954>
   24378:	add	sp, sp, #52	; 0x34
   2437c:	ldrd	r4, [sp]
   24380:	add	sp, sp, #8
   24384:	pop	{pc}		; (ldr pc, [sp], #4)
   24388:	push	{r3}		; (str r3, [sp, #-4]!)
   2438c:	push	{lr}		; (str lr, [sp, #-4]!)
   24390:	sub	sp, sp, #16
   24394:	add	r3, sp, #24
   24398:	str	r3, [sp, #12]
   2439c:	str	r3, [sp]
   243a0:	ldr	r3, [sp, #20]
   243a4:	bl	24334 <__assert_fail@plt+0x12ddc>
   243a8:	add	sp, sp, #16
   243ac:	pop	{lr}		; (ldr lr, [sp], #4)
   243b0:	add	sp, sp, #4
   243b4:	bx	lr
   243b8:	str	r4, [sp, #-8]!
   243bc:	str	lr, [sp, #4]
   243c0:	movw	r3, #33212	; 0x81bc
   243c4:	movt	r3, #3
   243c8:	ldr	r1, [r3]
   243cc:	mov	r0, #10
   243d0:	bl	112c4 <fputc_unlocked@plt>
   243d4:	mov	r2, #5
   243d8:	movw	r1, #29716	; 0x7414
   243dc:	movt	r1, #2
   243e0:	mov	r0, #0
   243e4:	bl	112d0 <dcgettext@plt>
   243e8:	movw	r2, #29736	; 0x7428
   243ec:	movt	r2, #2
   243f0:	mov	r1, r0
   243f4:	mov	r0, #1
   243f8:	bl	11474 <__printf_chk@plt>
   243fc:	mov	r2, #5
   24400:	movw	r1, #29760	; 0x7440
   24404:	movt	r1, #2
   24408:	mov	r0, #0
   2440c:	bl	112d0 <dcgettext@plt>
   24410:	movw	r3, #26912	; 0x6920
   24414:	movt	r3, #2
   24418:	movw	r2, #26952	; 0x6948
   2441c:	movt	r2, #2
   24420:	mov	r1, r0
   24424:	mov	r0, #1
   24428:	bl	11474 <__printf_chk@plt>
   2442c:	mov	r2, #5
   24430:	movw	r1, #29780	; 0x7454
   24434:	movt	r1, #2
   24438:	mov	r0, #0
   2443c:	bl	112d0 <dcgettext@plt>
   24440:	movw	r2, #29820	; 0x747c
   24444:	movt	r2, #2
   24448:	mov	r1, r0
   2444c:	mov	r0, #1
   24450:	bl	11474 <__printf_chk@plt>
   24454:	ldr	r4, [sp]
   24458:	add	sp, sp, #4
   2445c:	pop	{pc}		; (ldr pc, [sp], #4)
   24460:	str	r4, [sp, #-8]!
   24464:	str	lr, [sp, #4]
   24468:	bl	258f4 <__assert_fail@plt+0x1439c>
   2446c:	cmp	r0, #0
   24470:	beq	24480 <__assert_fail@plt+0x12f28>
   24474:	ldr	r4, [sp]
   24478:	add	sp, sp, #4
   2447c:	pop	{pc}		; (ldr pc, [sp], #4)
   24480:	bl	11e84 <__assert_fail@plt+0x92c>
   24484:	str	r4, [sp, #-8]!
   24488:	str	lr, [sp, #4]
   2448c:	bl	258f4 <__assert_fail@plt+0x1439c>
   24490:	cmp	r0, #0
   24494:	beq	244a4 <__assert_fail@plt+0x12f4c>
   24498:	ldr	r4, [sp]
   2449c:	add	sp, sp, #4
   244a0:	pop	{pc}		; (ldr pc, [sp], #4)
   244a4:	bl	11e84 <__assert_fail@plt+0x92c>
   244a8:	str	r4, [sp, #-8]!
   244ac:	str	lr, [sp, #4]
   244b0:	bl	24460 <__assert_fail@plt+0x12f08>
   244b4:	ldr	r4, [sp]
   244b8:	add	sp, sp, #4
   244bc:	pop	{pc}		; (ldr pc, [sp], #4)
   244c0:	strd	r4, [sp, #-16]!
   244c4:	str	r6, [sp, #8]
   244c8:	str	lr, [sp, #12]
   244cc:	mov	r5, r0
   244d0:	mov	r4, r1
   244d4:	bl	25930 <__assert_fail@plt+0x143d8>
   244d8:	cmp	r0, #0
   244dc:	beq	244f0 <__assert_fail@plt+0x12f98>
   244e0:	ldrd	r4, [sp]
   244e4:	ldr	r6, [sp, #8]
   244e8:	add	sp, sp, #12
   244ec:	pop	{pc}		; (ldr pc, [sp], #4)
   244f0:	adds	r4, r4, #0
   244f4:	movne	r4, #1
   244f8:	cmp	r5, #0
   244fc:	moveq	r4, #1
   24500:	cmp	r4, #0
   24504:	beq	244e0 <__assert_fail@plt+0x12f88>
   24508:	bl	11e84 <__assert_fail@plt+0x92c>
   2450c:	str	r4, [sp, #-8]!
   24510:	str	lr, [sp, #4]
   24514:	cmp	r1, #0
   24518:	orreq	r1, r1, #1
   2451c:	bl	25930 <__assert_fail@plt+0x143d8>
   24520:	cmp	r0, #0
   24524:	beq	24534 <__assert_fail@plt+0x12fdc>
   24528:	ldr	r4, [sp]
   2452c:	add	sp, sp, #4
   24530:	pop	{pc}		; (ldr pc, [sp], #4)
   24534:	bl	11e84 <__assert_fail@plt+0x92c>
   24538:	strd	r4, [sp, #-16]!
   2453c:	str	r6, [sp, #8]
   24540:	str	lr, [sp, #12]
   24544:	mov	r4, r0
   24548:	mov	r6, r1
   2454c:	mov	r5, r2
   24550:	bl	25e0c <__assert_fail@plt+0x148b4>
   24554:	cmp	r0, #0
   24558:	beq	2456c <__assert_fail@plt+0x13014>
   2455c:	ldrd	r4, [sp]
   24560:	ldr	r6, [sp, #8]
   24564:	add	sp, sp, #12
   24568:	pop	{pc}		; (ldr pc, [sp], #4)
   2456c:	cmp	r4, #0
   24570:	beq	24580 <__assert_fail@plt+0x13028>
   24574:	cmp	r6, #0
   24578:	cmpne	r5, #0
   2457c:	beq	2455c <__assert_fail@plt+0x13004>
   24580:	bl	11e84 <__assert_fail@plt+0x92c>
   24584:	str	r4, [sp, #-8]!
   24588:	str	lr, [sp, #4]
   2458c:	bl	24538 <__assert_fail@plt+0x12fe0>
   24590:	ldr	r4, [sp]
   24594:	add	sp, sp, #4
   24598:	pop	{pc}		; (ldr pc, [sp], #4)
   2459c:	str	r4, [sp, #-8]!
   245a0:	str	lr, [sp, #4]
   245a4:	mov	ip, r1
   245a8:	mov	r3, r2
   245ac:	cmp	r2, #0
   245b0:	cmpne	r1, #0
   245b4:	moveq	r3, #1
   245b8:	moveq	ip, r3
   245bc:	mov	r2, r3
   245c0:	mov	r1, ip
   245c4:	bl	25e0c <__assert_fail@plt+0x148b4>
   245c8:	cmp	r0, #0
   245cc:	beq	245dc <__assert_fail@plt+0x13084>
   245d0:	ldr	r4, [sp]
   245d4:	add	sp, sp, #4
   245d8:	pop	{pc}		; (ldr pc, [sp], #4)
   245dc:	bl	11e84 <__assert_fail@plt+0x92c>
   245e0:	str	r4, [sp, #-8]!
   245e4:	str	lr, [sp, #4]
   245e8:	mov	r2, r1
   245ec:	mov	r1, r0
   245f0:	mov	r0, #0
   245f4:	bl	24538 <__assert_fail@plt+0x12fe0>
   245f8:	ldr	r4, [sp]
   245fc:	add	sp, sp, #4
   24600:	pop	{pc}		; (ldr pc, [sp], #4)
   24604:	str	r4, [sp, #-8]!
   24608:	str	lr, [sp, #4]
   2460c:	mov	r2, r1
   24610:	mov	r1, r0
   24614:	mov	r0, #0
   24618:	bl	2459c <__assert_fail@plt+0x13044>
   2461c:	ldr	r4, [sp]
   24620:	add	sp, sp, #4
   24624:	pop	{pc}		; (ldr pc, [sp], #4)
   24628:	strd	r4, [sp, #-16]!
   2462c:	str	r6, [sp, #8]
   24630:	str	lr, [sp, #12]
   24634:	mov	r5, r1
   24638:	ldr	r4, [r1]
   2463c:	cmp	r0, #0
   24640:	beq	24670 <__assert_fail@plt+0x13118>
   24644:	lsr	r3, r4, #1
   24648:	add	r3, r3, #1
   2464c:	adds	r4, r4, r3
   24650:	bcs	2468c <__assert_fail@plt+0x13134>
   24654:	mov	r1, r4
   24658:	bl	24538 <__assert_fail@plt+0x12fe0>
   2465c:	str	r4, [r5]
   24660:	ldrd	r4, [sp]
   24664:	ldr	r6, [sp, #8]
   24668:	add	sp, sp, #12
   2466c:	pop	{pc}		; (ldr pc, [sp], #4)
   24670:	cmp	r4, #0
   24674:	bne	24654 <__assert_fail@plt+0x130fc>
   24678:	mov	r4, #64	; 0x40
   2467c:	udiv	r4, r4, r2
   24680:	cmp	r2, #64	; 0x40
   24684:	addhi	r4, r4, #1
   24688:	b	24654 <__assert_fail@plt+0x130fc>
   2468c:	bl	11e84 <__assert_fail@plt+0x92c>
   24690:	str	r4, [sp, #-8]!
   24694:	str	lr, [sp, #4]
   24698:	mov	r2, #1
   2469c:	bl	24628 <__assert_fail@plt+0x130d0>
   246a0:	ldr	r4, [sp]
   246a4:	add	sp, sp, #4
   246a8:	pop	{pc}		; (ldr pc, [sp], #4)
   246ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   246b0:	strd	r6, [sp, #8]
   246b4:	str	r8, [sp, #16]
   246b8:	str	lr, [sp, #20]
   246bc:	mov	r5, r1
   246c0:	ldr	lr, [sp, #24]
   246c4:	ldr	ip, [r1]
   246c8:	asr	r4, ip, #1
   246cc:	adds	r4, ip, r4
   246d0:	movvs	r1, #1
   246d4:	movvc	r1, #0
   246d8:	cmp	r1, #0
   246dc:	mvnne	r4, #-2147483648	; 0x80000000
   246e0:	mvn	r8, r3
   246e4:	lsr	r8, r8, #31
   246e8:	cmp	r3, r4
   246ec:	movge	r1, #0
   246f0:	andlt	r1, r8, #1
   246f4:	cmp	r1, #0
   246f8:	movne	r4, r3
   246fc:	smull	r6, r7, r4, lr
   24700:	asr	r1, r6, #31
   24704:	cmp	r1, r7
   24708:	bne	24720 <__assert_fail@plt+0x131c8>
   2470c:	mov	r1, r6
   24710:	cmp	r6, #63	; 0x3f
   24714:	movle	r1, #64	; 0x40
   24718:	ble	24724 <__assert_fail@plt+0x131cc>
   2471c:	b	24730 <__assert_fail@plt+0x131d8>
   24720:	mvn	r1, #-2147483648	; 0x80000000
   24724:	sdiv	r4, r1, lr
   24728:	mls	r6, lr, r4, r1
   2472c:	sub	r1, r1, r6
   24730:	cmp	r0, #0
   24734:	moveq	r6, #0
   24738:	streq	r6, [r5]
   2473c:	sub	r6, r4, ip
   24740:	cmp	r6, r2
   24744:	bge	2477c <__assert_fail@plt+0x13224>
   24748:	adds	r2, ip, r2
   2474c:	mov	r4, r2
   24750:	bvs	24798 <__assert_fail@plt+0x13240>
   24754:	cmp	r2, r3
   24758:	movle	r3, #0
   2475c:	andgt	r3, r8, #1
   24760:	cmp	r3, #0
   24764:	bne	24798 <__assert_fail@plt+0x13240>
   24768:	smull	r2, r3, r2, lr
   2476c:	asr	ip, r2, #31
   24770:	mov	r1, r2
   24774:	cmp	ip, r3
   24778:	bne	24798 <__assert_fail@plt+0x13240>
   2477c:	bl	244c0 <__assert_fail@plt+0x12f68>
   24780:	str	r4, [r5]
   24784:	ldrd	r4, [sp]
   24788:	ldrd	r6, [sp, #8]
   2478c:	ldr	r8, [sp, #16]
   24790:	add	sp, sp, #20
   24794:	pop	{pc}		; (ldr pc, [sp], #4)
   24798:	bl	11e84 <__assert_fail@plt+0x92c>
   2479c:	str	r4, [sp, #-8]!
   247a0:	str	lr, [sp, #4]
   247a4:	bl	25880 <__assert_fail@plt+0x14328>
   247a8:	cmp	r0, #0
   247ac:	beq	247bc <__assert_fail@plt+0x13264>
   247b0:	ldr	r4, [sp]
   247b4:	add	sp, sp, #4
   247b8:	pop	{pc}		; (ldr pc, [sp], #4)
   247bc:	bl	11e84 <__assert_fail@plt+0x92c>
   247c0:	str	r4, [sp, #-8]!
   247c4:	str	lr, [sp, #4]
   247c8:	mov	r1, #1
   247cc:	bl	2479c <__assert_fail@plt+0x13244>
   247d0:	ldr	r4, [sp]
   247d4:	add	sp, sp, #4
   247d8:	pop	{pc}		; (ldr pc, [sp], #4)
   247dc:	str	r4, [sp, #-8]!
   247e0:	str	lr, [sp, #4]
   247e4:	bl	25880 <__assert_fail@plt+0x14328>
   247e8:	cmp	r0, #0
   247ec:	beq	247fc <__assert_fail@plt+0x132a4>
   247f0:	ldr	r4, [sp]
   247f4:	add	sp, sp, #4
   247f8:	pop	{pc}		; (ldr pc, [sp], #4)
   247fc:	bl	11e84 <__assert_fail@plt+0x92c>
   24800:	str	r4, [sp, #-8]!
   24804:	str	lr, [sp, #4]
   24808:	mov	r1, #1
   2480c:	bl	247dc <__assert_fail@plt+0x13284>
   24810:	ldr	r4, [sp]
   24814:	add	sp, sp, #4
   24818:	pop	{pc}		; (ldr pc, [sp], #4)
   2481c:	strd	r4, [sp, #-16]!
   24820:	str	r6, [sp, #8]
   24824:	str	lr, [sp, #12]
   24828:	mov	r5, r0
   2482c:	mov	r4, r1
   24830:	mov	r0, r1
   24834:	bl	24460 <__assert_fail@plt+0x12f08>
   24838:	mov	r2, r4
   2483c:	mov	r1, r5
   24840:	bl	11264 <memcpy@plt>
   24844:	ldrd	r4, [sp]
   24848:	ldr	r6, [sp, #8]
   2484c:	add	sp, sp, #12
   24850:	pop	{pc}		; (ldr pc, [sp], #4)
   24854:	strd	r4, [sp, #-16]!
   24858:	str	r6, [sp, #8]
   2485c:	str	lr, [sp, #12]
   24860:	mov	r5, r0
   24864:	mov	r4, r1
   24868:	mov	r0, r1
   2486c:	bl	24484 <__assert_fail@plt+0x12f2c>
   24870:	mov	r2, r4
   24874:	mov	r1, r5
   24878:	bl	11264 <memcpy@plt>
   2487c:	ldrd	r4, [sp]
   24880:	ldr	r6, [sp, #8]
   24884:	add	sp, sp, #12
   24888:	pop	{pc}		; (ldr pc, [sp], #4)
   2488c:	strd	r4, [sp, #-16]!
   24890:	str	r6, [sp, #8]
   24894:	str	lr, [sp, #12]
   24898:	mov	r5, r0
   2489c:	mov	r4, r1
   248a0:	add	r0, r1, #1
   248a4:	bl	24484 <__assert_fail@plt+0x12f2c>
   248a8:	mov	r2, #0
   248ac:	strb	r2, [r0, r4]
   248b0:	mov	r2, r4
   248b4:	mov	r1, r5
   248b8:	bl	11264 <memcpy@plt>
   248bc:	ldrd	r4, [sp]
   248c0:	ldr	r6, [sp, #8]
   248c4:	add	sp, sp, #12
   248c8:	pop	{pc}		; (ldr pc, [sp], #4)
   248cc:	str	r4, [sp, #-8]!
   248d0:	str	lr, [sp, #4]
   248d4:	mov	r4, r0
   248d8:	bl	11414 <strlen@plt>
   248dc:	add	r1, r0, #1
   248e0:	mov	r0, r4
   248e4:	bl	2481c <__assert_fail@plt+0x132c4>
   248e8:	ldr	r4, [sp]
   248ec:	add	sp, sp, #4
   248f0:	pop	{pc}		; (ldr pc, [sp], #4)
   248f4:	strd	r4, [sp, #-16]!
   248f8:	str	r6, [sp, #8]
   248fc:	str	lr, [sp, #12]
   24900:	sub	sp, sp, #16
   24904:	mov	r6, r0
   24908:	mov	r4, r2
   2490c:	mov	r5, r3
   24910:	ldr	r3, [sp, #40]	; 0x28
   24914:	str	r3, [sp]
   24918:	add	r3, sp, #8
   2491c:	mov	r2, r1
   24920:	mov	r1, #0
   24924:	bl	24bd0 <__assert_fail@plt+0x13678>
   24928:	cmp	r0, #0
   2492c:	bne	249c0 <__assert_fail@plt+0x13468>
   24930:	ldrd	r0, [sp, #8]
   24934:	ldrd	r2, [sp, #32]
   24938:	cmp	r2, r0
   2493c:	sbcs	r3, r3, r1
   24940:	movlt	r3, #1
   24944:	movge	r3, #0
   24948:	cmp	r0, r4
   2494c:	sbcs	r2, r1, r5
   24950:	orrlt	r3, r3, #1
   24954:	cmp	r3, #0
   24958:	bne	24970 <__assert_fail@plt+0x13418>
   2495c:	add	sp, sp, #16
   24960:	ldrd	r4, [sp]
   24964:	ldr	r6, [sp, #8]
   24968:	add	sp, sp, #12
   2496c:	pop	{pc}		; (ldr pc, [sp], #4)
   24970:	cmp	r0, #1073741824	; 0x40000000
   24974:	sbcs	r3, r1, #0
   24978:	blt	2498c <__assert_fail@plt+0x13434>
   2497c:	bl	1142c <__errno_location@plt>
   24980:	mov	r3, #75	; 0x4b
   24984:	str	r3, [r0]
   24988:	b	249d0 <__assert_fail@plt+0x13478>
   2498c:	mov	r2, #-1073741824	; 0xc0000000
   24990:	mvn	r3, #0
   24994:	cmp	r0, r2
   24998:	sbcs	r3, r1, r3
   2499c:	bge	249b0 <__assert_fail@plt+0x13458>
   249a0:	bl	1142c <__errno_location@plt>
   249a4:	mov	r3, #75	; 0x4b
   249a8:	str	r3, [r0]
   249ac:	b	249d0 <__assert_fail@plt+0x13478>
   249b0:	bl	1142c <__errno_location@plt>
   249b4:	mov	r3, #34	; 0x22
   249b8:	str	r3, [r0]
   249bc:	b	249d0 <__assert_fail@plt+0x13478>
   249c0:	cmp	r0, #1
   249c4:	beq	24a14 <__assert_fail@plt+0x134bc>
   249c8:	cmp	r0, #3
   249cc:	beq	24a24 <__assert_fail@plt+0x134cc>
   249d0:	ldr	r3, [sp, #48]	; 0x30
   249d4:	cmp	r3, #0
   249d8:	moveq	r3, #1
   249dc:	str	r3, [sp, #48]	; 0x30
   249e0:	bl	1142c <__errno_location@plt>
   249e4:	ldr	r4, [r0]
   249e8:	cmp	r4, #22
   249ec:	moveq	r4, #0
   249f0:	mov	r0, r6
   249f4:	bl	163c0 <__assert_fail@plt+0x4e68>
   249f8:	str	r0, [sp]
   249fc:	ldr	r3, [sp, #44]	; 0x2c
   24a00:	movw	r2, #28232	; 0x6e48
   24a04:	movt	r2, #2
   24a08:	mov	r1, r4
   24a0c:	ldr	r0, [sp, #48]	; 0x30
   24a10:	bl	11384 <error@plt>
   24a14:	bl	1142c <__errno_location@plt>
   24a18:	mov	r3, #75	; 0x4b
   24a1c:	str	r3, [r0]
   24a20:	b	249d0 <__assert_fail@plt+0x13478>
   24a24:	bl	1142c <__errno_location@plt>
   24a28:	mov	r3, #0
   24a2c:	str	r3, [r0]
   24a30:	b	249d0 <__assert_fail@plt+0x13478>
   24a34:	strd	r4, [sp, #-12]!
   24a38:	str	lr, [sp, #8]
   24a3c:	sub	sp, sp, #28
   24a40:	ldr	r1, [sp, #56]	; 0x38
   24a44:	str	r1, [sp, #16]
   24a48:	ldr	r1, [sp, #52]	; 0x34
   24a4c:	str	r1, [sp, #12]
   24a50:	ldr	r1, [sp, #48]	; 0x30
   24a54:	str	r1, [sp, #8]
   24a58:	ldrd	r4, [sp, #40]	; 0x28
   24a5c:	strd	r4, [sp]
   24a60:	mov	r1, #10
   24a64:	bl	248f4 <__assert_fail@plt+0x1339c>
   24a68:	add	sp, sp, #28
   24a6c:	ldrd	r4, [sp]
   24a70:	add	sp, sp, #8
   24a74:	pop	{pc}		; (ldr pc, [sp], #4)
   24a78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24a7c:	strd	r6, [sp, #8]
   24a80:	strd	r8, [sp, #16]
   24a84:	strd	sl, [sp, #24]
   24a88:	str	lr, [sp, #32]
   24a8c:	sub	sp, sp, #20
   24a90:	cmp	r2, #0
   24a94:	beq	24bac <__assert_fail@plt+0x13654>
   24a98:	sub	ip, r2, #1
   24a9c:	mov	lr, #0
   24aa0:	mov	r2, r1
   24aa4:	asr	r3, r1, #31
   24aa8:	strd	r2, [sp, #8]
   24aac:	mov	r8, lr
   24ab0:	b	24b54 <__assert_fail@plt+0x135fc>
   24ab4:	umull	r4, r5, r2, r1
   24ab8:	umull	r6, r7, r1, r3
   24abc:	strd	r6, [sp]
   24ac0:	cmp	r3, #0
   24ac4:	bge	24ae0 <__assert_fail@plt+0x13588>
   24ac8:	mov	sl, #0
   24acc:	subs	r6, r6, sl
   24ad0:	str	r6, [sp]
   24ad4:	ldr	r6, [sp, #4]
   24ad8:	sbc	r6, r6, r1
   24adc:	str	r6, [sp, #4]
   24ae0:	cmp	r1, #0
   24ae4:	bge	24b00 <__assert_fail@plt+0x135a8>
   24ae8:	ldr	r6, [sp]
   24aec:	subs	r6, r6, r2
   24af0:	str	r6, [sp]
   24af4:	ldr	r6, [sp, #4]
   24af8:	sbc	r6, r6, r3
   24afc:	str	r6, [sp, #4]
   24b00:	mov	sl, #0
   24b04:	ldr	r6, [sp]
   24b08:	adds	r6, r6, r5
   24b0c:	ldr	r7, [sp, #4]
   24b10:	adc	sl, r7, sl
   24b14:	cmp	sl, r6, asr #31
   24b18:	bne	24b24 <__assert_fail@plt+0x135cc>
   24b1c:	mov	r5, r6
   24b20:	b	24b70 <__assert_fail@plt+0x13618>
   24b24:	ldr	r4, [sp, #12]
   24b28:	mul	r5, r2, r4
   24b2c:	mla	r6, r1, r3, r5
   24b30:	umull	sl, fp, r2, r1
   24b34:	add	r5, r6, fp
   24b38:	mov	r4, sl
   24b3c:	mov	r9, #1
   24b40:	b	24b70 <__assert_fail@plt+0x13618>
   24b44:	orr	lr, lr, r3
   24b48:	sub	ip, ip, #1
   24b4c:	cmn	ip, #1
   24b50:	beq	24bb0 <__assert_fail@plt+0x13658>
   24b54:	ldrd	r2, [r0]
   24b58:	mov	r9, r8
   24b5c:	cmp	r3, r2, asr #31
   24b60:	bne	24ab4 <__assert_fail@plt+0x1355c>
   24b64:	smull	r6, r7, r2, r1
   24b68:	mov	r4, r6
   24b6c:	mov	r5, r7
   24b70:	cmp	r9, #0
   24b74:	streq	r4, [r0]
   24b78:	streq	r5, [r0, #4]
   24b7c:	moveq	r3, r8
   24b80:	beq	24b44 <__assert_fail@plt+0x135ec>
   24b84:	cmp	r2, #0
   24b88:	sbcs	r3, r3, #0
   24b8c:	mvnge	r2, #0
   24b90:	mvnge	r3, #-2147483648	; 0x80000000
   24b94:	movlt	r2, #0
   24b98:	movlt	r3, #-2147483648	; 0x80000000
   24b9c:	str	r2, [r0]
   24ba0:	str	r3, [r0, #4]
   24ba4:	mov	r3, #1
   24ba8:	b	24b44 <__assert_fail@plt+0x135ec>
   24bac:	mov	lr, #0
   24bb0:	mov	r0, lr
   24bb4:	add	sp, sp, #20
   24bb8:	ldrd	r4, [sp]
   24bbc:	ldrd	r6, [sp, #8]
   24bc0:	ldrd	r8, [sp, #16]
   24bc4:	ldrd	sl, [sp, #24]
   24bc8:	add	sp, sp, #32
   24bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   24bd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24bd4:	strd	r6, [sp, #8]
   24bd8:	strd	r8, [sp, #16]
   24bdc:	strd	sl, [sp, #24]
   24be0:	str	lr, [sp, #32]
   24be4:	sub	sp, sp, #20
   24be8:	cmp	r2, #36	; 0x24
   24bec:	bhi	24c58 <__assert_fail@plt+0x13700>
   24bf0:	mov	r5, r0
   24bf4:	mov	r4, r1
   24bf8:	mov	r6, r2
   24bfc:	mov	r8, r3
   24c00:	cmp	r1, #0
   24c04:	addeq	r4, sp, #12
   24c08:	bl	1142c <__errno_location@plt>
   24c0c:	mov	r7, r0
   24c10:	mov	r3, #0
   24c14:	str	r3, [r0]
   24c18:	mov	r2, r6
   24c1c:	mov	r1, r4
   24c20:	mov	r0, r5
   24c24:	bl	114f8 <__strtoll_internal@plt>
   24c28:	strd	r0, [sp]
   24c2c:	ldr	r6, [r4]
   24c30:	cmp	r6, r5
   24c34:	beq	24c78 <__assert_fail@plt+0x13720>
   24c38:	ldr	r3, [r7]
   24c3c:	cmp	r3, #0
   24c40:	beq	24d9c <__assert_fail@plt+0x13844>
   24c44:	cmp	r3, #34	; 0x22
   24c48:	moveq	r5, #1
   24c4c:	beq	24da0 <__assert_fail@plt+0x13848>
   24c50:	mov	r5, #4
   24c54:	b	24dc4 <__assert_fail@plt+0x1386c>
   24c58:	movw	r3, #29900	; 0x74cc
   24c5c:	movt	r3, #2
   24c60:	mov	r2, #85	; 0x55
   24c64:	movw	r1, #29912	; 0x74d8
   24c68:	movt	r1, #2
   24c6c:	movw	r0, #29928	; 0x74e8
   24c70:	movt	r0, #2
   24c74:	bl	11558 <__assert_fail@plt>
   24c78:	ldr	r3, [sp, #56]	; 0x38
   24c7c:	cmp	r3, #0
   24c80:	beq	251fc <__assert_fail@plt+0x13ca4>
   24c84:	ldrb	r1, [r5]
   24c88:	cmp	r1, #0
   24c8c:	moveq	r5, #4
   24c90:	beq	24dc4 <__assert_fail@plt+0x1386c>
   24c94:	mov	r0, r3
   24c98:	bl	11420 <strchr@plt>
   24c9c:	cmp	r0, #0
   24ca0:	beq	25204 <__assert_fail@plt+0x13cac>
   24ca4:	mov	r2, #1
   24ca8:	mov	r3, #0
   24cac:	strd	r2, [sp]
   24cb0:	ldrb	r7, [r6]
   24cb4:	mov	r5, #0
   24cb8:	mov	r1, r7
   24cbc:	ldr	r0, [sp, #56]	; 0x38
   24cc0:	bl	11420 <strchr@plt>
   24cc4:	cmp	r0, #0
   24cc8:	beq	24de4 <__assert_fail@plt+0x1388c>
   24ccc:	sub	r3, r7, #69	; 0x45
   24cd0:	cmp	r3, #47	; 0x2f
   24cd4:	ldrls	pc, [pc, r3, lsl #2]
   24cd8:	b	24f30 <__assert_fail@plt+0x139d8>
   24cdc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24ce0:	andeq	r4, r2, r0, lsr pc
   24ce4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24ce8:	andeq	r4, r2, r0, lsr pc
   24cec:	andeq	r4, r2, r0, lsr pc
   24cf0:	andeq	r4, r2, r0, lsr pc
   24cf4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cf8:	andeq	r4, r2, r0, lsr pc
   24cfc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d00:	andeq	r4, r2, r0, lsr pc
   24d04:	andeq	r4, r2, r0, lsr pc
   24d08:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d0c:	andeq	r4, r2, r0, lsr pc
   24d10:	andeq	r4, r2, r0, lsr pc
   24d14:	andeq	r4, r2, r0, lsr pc
   24d18:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d1c:	andeq	r4, r2, r0, lsr pc
   24d20:	andeq	r4, r2, r0, lsr pc
   24d24:	andeq	r4, r2, r0, lsr pc
   24d28:	andeq	r4, r2, r0, lsr pc
   24d2c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d30:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d34:	andeq	r4, r2, r0, lsr pc
   24d38:	andeq	r4, r2, r0, lsr pc
   24d3c:	andeq	r4, r2, r0, lsr pc
   24d40:	andeq	r4, r2, r0, lsr pc
   24d44:	andeq	r4, r2, r0, lsr pc
   24d48:	andeq	r4, r2, r0, lsr pc
   24d4c:	andeq	r4, r2, r0, lsr pc
   24d50:	andeq	r4, r2, r0, lsr pc
   24d54:	andeq	r4, r2, r0, lsr pc
   24d58:	andeq	r4, r2, r0, lsr pc
   24d5c:	andeq	r4, r2, r0, lsr pc
   24d60:	andeq	r4, r2, r0, lsr pc
   24d64:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d68:	andeq	r4, r2, r0, lsr pc
   24d6c:	andeq	r4, r2, r0, lsr pc
   24d70:	andeq	r4, r2, r0, lsr pc
   24d74:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d78:	andeq	r4, r2, r0, lsr pc
   24d7c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d80:	andeq	r4, r2, r0, lsr pc
   24d84:	andeq	r4, r2, r0, lsr pc
   24d88:	andeq	r4, r2, r0, lsr pc
   24d8c:	andeq	r4, r2, r0, lsr pc
   24d90:	andeq	r4, r2, r0, lsr pc
   24d94:	andeq	r4, r2, r0, lsr pc
   24d98:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d9c:	mov	r5, #0
   24da0:	ldr	r3, [sp, #56]	; 0x38
   24da4:	cmp	r3, #0
   24da8:	strdeq	r0, [r8]
   24dac:	beq	24dc4 <__assert_fail@plt+0x1386c>
   24db0:	ldrb	r7, [r6]
   24db4:	cmp	r7, #0
   24db8:	bne	24cb8 <__assert_fail@plt+0x13760>
   24dbc:	ldrd	r2, [sp]
   24dc0:	strd	r2, [r8]
   24dc4:	mov	r0, r5
   24dc8:	add	sp, sp, #20
   24dcc:	ldrd	r4, [sp]
   24dd0:	ldrd	r6, [sp, #8]
   24dd4:	ldrd	r8, [sp, #16]
   24dd8:	ldrd	sl, [sp, #24]
   24ddc:	add	sp, sp, #32
   24de0:	pop	{pc}		; (ldr pc, [sp], #4)
   24de4:	ldrd	r2, [sp]
   24de8:	strd	r2, [r8]
   24dec:	orr	r5, r5, #2
   24df0:	b	24dc4 <__assert_fail@plt+0x1386c>
   24df4:	mov	r1, #48	; 0x30
   24df8:	ldr	r0, [sp, #56]	; 0x38
   24dfc:	bl	11420 <strchr@plt>
   24e00:	cmp	r0, #0
   24e04:	beq	24f3c <__assert_fail@plt+0x139e4>
   24e08:	ldrb	r3, [r6, #1]
   24e0c:	cmp	r3, #68	; 0x44
   24e10:	beq	24f48 <__assert_fail@plt+0x139f0>
   24e14:	cmp	r3, #105	; 0x69
   24e18:	beq	24f18 <__assert_fail@plt+0x139c0>
   24e1c:	cmp	r3, #66	; 0x42
   24e20:	moveq	r6, #2
   24e24:	movne	r6, #1
   24e28:	moveq	r1, #1000	; 0x3e8
   24e2c:	movne	r1, #1024	; 0x400
   24e30:	sub	r7, r7, #66	; 0x42
   24e34:	cmp	r7, #53	; 0x35
   24e38:	ldrls	pc, [pc, r7, lsl #2]
   24e3c:	b	251c8 <__assert_fail@plt+0x13c70>
   24e40:	strdeq	r4, [r2], -r8
   24e44:	andeq	r5, r2, r8, asr #3
   24e48:	andeq	r5, r2, r8, asr #3
   24e4c:	muleq	r2, ip, r0
   24e50:	andeq	r5, r2, r8, asr #3
   24e54:	andeq	r5, r2, ip, lsr #1
   24e58:	andeq	r5, r2, r8, asr #3
   24e5c:	andeq	r5, r2, r8, asr #3
   24e60:	andeq	r5, r2, r8, asr #3
   24e64:	strheq	r5, [r2], -ip
   24e68:	andeq	r5, r2, r8, asr #3
   24e6c:	andeq	r5, r2, ip, asr #1
   24e70:	andeq	r5, r2, r8, asr #3
   24e74:	andeq	r5, r2, r8, asr #3
   24e78:	ldrdeq	r5, [r2], -ip
   24e7c:	andeq	r5, r2, r8, asr #3
   24e80:	andeq	r5, r2, r8, asr #3
   24e84:	andeq	r5, r2, r8, asr #3
   24e88:	andeq	r5, r2, ip, ror #1
   24e8c:	andeq	r5, r2, r8, asr #3
   24e90:	andeq	r5, r2, r8, asr #3
   24e94:	andeq	r5, r2, r8, asr #3
   24e98:	andeq	r5, r2, r8, asr #3
   24e9c:	andeq	r5, r2, r8, lsr #3
   24ea0:			; <UNDEFINED> instruction: 0x000251b8
   24ea4:	andeq	r5, r2, r8, asr #3
   24ea8:	andeq	r5, r2, r8, asr #3
   24eac:	andeq	r5, r2, r8, asr #3
   24eb0:	andeq	r5, r2, r8, asr #3
   24eb4:	andeq	r5, r2, r8, asr #3
   24eb8:	andeq	r5, r2, r8, asr #3
   24ebc:	andeq	r5, r2, r8, asr #3
   24ec0:	andeq	r4, r2, r4, asr pc
   24ec4:	ldrdeq	r5, [r2], -r8
   24ec8:	andeq	r5, r2, r8, asr #3
   24ecc:	andeq	r5, r2, r8, asr #3
   24ed0:	andeq	r5, r2, r8, asr #3
   24ed4:	andeq	r5, r2, ip, lsr #1
   24ed8:	andeq	r5, r2, r8, asr #3
   24edc:	andeq	r5, r2, r8, asr #3
   24ee0:	andeq	r5, r2, r8, asr #3
   24ee4:	strheq	r5, [r2], -ip
   24ee8:	andeq	r5, r2, r8, asr #3
   24eec:	andeq	r5, r2, ip, asr #1
   24ef0:	andeq	r5, r2, r8, asr #3
   24ef4:	andeq	r5, r2, r8, asr #3
   24ef8:	andeq	r5, r2, r8, asr #3
   24efc:	andeq	r5, r2, r8, asr #3
   24f00:	andeq	r5, r2, r8, asr #3
   24f04:	andeq	r5, r2, r8, asr #3
   24f08:	andeq	r5, r2, ip, ror #1
   24f0c:	andeq	r5, r2, r8, asr #3
   24f10:	andeq	r5, r2, r8, asr #3
   24f14:	strdeq	r5, [r2], -ip
   24f18:	ldrb	r3, [r6, #2]
   24f1c:	cmp	r3, #66	; 0x42
   24f20:	movne	r6, #1
   24f24:	moveq	r6, #3
   24f28:	mov	r1, #1024	; 0x400
   24f2c:	b	24e30 <__assert_fail@plt+0x138d8>
   24f30:	mov	r6, #1
   24f34:	mov	r1, #1024	; 0x400
   24f38:	b	24e30 <__assert_fail@plt+0x138d8>
   24f3c:	mov	r6, #1
   24f40:	mov	r1, #1024	; 0x400
   24f44:	b	24e30 <__assert_fail@plt+0x138d8>
   24f48:	mov	r6, #2
   24f4c:	mov	r1, #1000	; 0x3e8
   24f50:	b	24e30 <__assert_fail@plt+0x138d8>
   24f54:	ldrd	r2, [sp]
   24f58:	mov	ip, #0
   24f5c:	cmp	r3, r2, asr #31
   24f60:	bne	24fa8 <__assert_fail@plt+0x13a50>
   24f64:	lsl	r1, r3, #9
   24f68:	lsl	r0, r2, #9
   24f6c:	orr	r1, r1, r2, lsr #23
   24f70:	cmp	ip, #0
   24f74:	streq	r0, [sp]
   24f78:	streq	r1, [sp, #4]
   24f7c:	moveq	r0, #0
   24f80:	beq	251dc <__assert_fail@plt+0x13c84>
   24f84:	cmp	r2, #0
   24f88:	sbcs	r3, r3, #0
   24f8c:	mvnge	r2, #0
   24f90:	mvnge	r3, #-2147483648	; 0x80000000
   24f94:	movlt	r2, #0
   24f98:	movlt	r3, #-2147483648	; 0x80000000
   24f9c:	strd	r2, [sp]
   24fa0:	mov	r0, #1
   24fa4:	b	251dc <__assert_fail@plt+0x13c84>
   24fa8:	mov	lr, #512	; 0x200
   24fac:	lsr	r7, r2, #23
   24fb0:	lsl	r0, r2, #9
   24fb4:	umull	sl, fp, lr, r3
   24fb8:	cmp	r3, #0
   24fbc:	bge	24fcc <__assert_fail@plt+0x13a74>
   24fc0:	mov	r1, #0
   24fc4:	subs	sl, sl, r1
   24fc8:	sbc	fp, fp, lr
   24fcc:	mov	r1, #0
   24fd0:	mov	lr, r1
   24fd4:	adds	r1, sl, r7
   24fd8:	adc	lr, fp, lr
   24fdc:	cmp	lr, r1, asr #31
   24fe0:	beq	24f70 <__assert_fail@plt+0x13a18>
   24fe4:	lsl	r1, r3, #9
   24fe8:	lsl	r0, r2, #9
   24fec:	orr	r1, r1, r2, lsr #23
   24ff0:	mov	ip, #1
   24ff4:	b	24f70 <__assert_fail@plt+0x13a18>
   24ff8:	ldrd	r2, [sp]
   24ffc:	mov	ip, #0
   25000:	cmp	r3, r2, asr #31
   25004:	bne	2504c <__assert_fail@plt+0x13af4>
   25008:	lsl	r1, r3, #10
   2500c:	lsl	r0, r2, #10
   25010:	orr	r1, r1, r2, lsr #22
   25014:	cmp	ip, #0
   25018:	streq	r0, [sp]
   2501c:	streq	r1, [sp, #4]
   25020:	moveq	r0, #0
   25024:	beq	251dc <__assert_fail@plt+0x13c84>
   25028:	cmp	r2, #0
   2502c:	sbcs	r3, r3, #0
   25030:	mvnge	r2, #0
   25034:	mvnge	r3, #-2147483648	; 0x80000000
   25038:	movlt	r2, #0
   2503c:	movlt	r3, #-2147483648	; 0x80000000
   25040:	strd	r2, [sp]
   25044:	mov	r0, #1
   25048:	b	251dc <__assert_fail@plt+0x13c84>
   2504c:	mov	lr, #1024	; 0x400
   25050:	lsr	r7, r2, #22
   25054:	lsl	r0, r2, #10
   25058:	umull	sl, fp, lr, r3
   2505c:	cmp	r3, #0
   25060:	bge	25070 <__assert_fail@plt+0x13b18>
   25064:	mov	r1, #0
   25068:	subs	sl, sl, r1
   2506c:	sbc	fp, fp, lr
   25070:	mov	r1, #0
   25074:	mov	lr, r1
   25078:	adds	r1, sl, r7
   2507c:	adc	lr, fp, lr
   25080:	cmp	lr, r1, asr #31
   25084:	beq	25014 <__assert_fail@plt+0x13abc>
   25088:	lsl	r1, r3, #10
   2508c:	lsl	r0, r2, #10
   25090:	orr	r1, r1, r2, lsr #22
   25094:	mov	ip, #1
   25098:	b	25014 <__assert_fail@plt+0x13abc>
   2509c:	mov	r2, #6
   250a0:	mov	r0, sp
   250a4:	bl	24a78 <__assert_fail@plt+0x13520>
   250a8:	b	251dc <__assert_fail@plt+0x13c84>
   250ac:	mov	r2, #3
   250b0:	mov	r0, sp
   250b4:	bl	24a78 <__assert_fail@plt+0x13520>
   250b8:	b	251dc <__assert_fail@plt+0x13c84>
   250bc:	mov	r2, #1
   250c0:	mov	r0, sp
   250c4:	bl	24a78 <__assert_fail@plt+0x13520>
   250c8:	b	251dc <__assert_fail@plt+0x13c84>
   250cc:	mov	r2, #2
   250d0:	mov	r0, sp
   250d4:	bl	24a78 <__assert_fail@plt+0x13520>
   250d8:	b	251dc <__assert_fail@plt+0x13c84>
   250dc:	mov	r2, #5
   250e0:	mov	r0, sp
   250e4:	bl	24a78 <__assert_fail@plt+0x13520>
   250e8:	b	251dc <__assert_fail@plt+0x13c84>
   250ec:	mov	r2, #4
   250f0:	mov	r0, sp
   250f4:	bl	24a78 <__assert_fail@plt+0x13520>
   250f8:	b	251dc <__assert_fail@plt+0x13c84>
   250fc:	ldrd	r2, [sp]
   25100:	mov	lr, #0
   25104:	cmp	r3, r2, asr #31
   25108:	bne	2514c <__assert_fail@plt+0x13bf4>
   2510c:	adds	r0, r2, r2
   25110:	adc	r1, r3, r3
   25114:	cmp	lr, #0
   25118:	streq	r0, [sp]
   2511c:	streq	r1, [sp, #4]
   25120:	moveq	r0, #0
   25124:	beq	251dc <__assert_fail@plt+0x13c84>
   25128:	cmp	r2, #0
   2512c:	sbcs	r3, r3, #0
   25130:	mvnge	r2, #0
   25134:	mvnge	r3, #-2147483648	; 0x80000000
   25138:	movlt	r2, #0
   2513c:	movlt	r3, #-2147483648	; 0x80000000
   25140:	strd	r2, [sp]
   25144:	mov	r0, #1
   25148:	b	251dc <__assert_fail@plt+0x13c84>
   2514c:	mov	ip, #2
   25150:	mov	r1, #0
   25154:	adds	r7, r2, r2
   25158:	adc	sl, r1, r1
   2515c:	umull	r0, r1, ip, r3
   25160:	cmp	r3, #0
   25164:	bge	25174 <__assert_fail@plt+0x13c1c>
   25168:	mov	r9, #0
   2516c:	subs	r0, r0, r9
   25170:	sbc	r1, r1, ip
   25174:	mov	ip, #0
   25178:	mov	r9, ip
   2517c:	adds	ip, r0, sl
   25180:	adc	r9, r1, r9
   25184:	cmp	r9, ip, asr #31
   25188:	bne	25198 <__assert_fail@plt+0x13c40>
   2518c:	mov	r0, r7
   25190:	mov	r1, ip
   25194:	b	25114 <__assert_fail@plt+0x13bbc>
   25198:	adds	r0, r2, r2
   2519c:	adc	r1, r3, r3
   251a0:	mov	lr, #1
   251a4:	b	25114 <__assert_fail@plt+0x13bbc>
   251a8:	mov	r2, #8
   251ac:	mov	r0, sp
   251b0:	bl	24a78 <__assert_fail@plt+0x13520>
   251b4:	b	251dc <__assert_fail@plt+0x13c84>
   251b8:	mov	r2, #7
   251bc:	mov	r0, sp
   251c0:	bl	24a78 <__assert_fail@plt+0x13520>
   251c4:	b	251dc <__assert_fail@plt+0x13c84>
   251c8:	ldrd	r2, [sp]
   251cc:	strd	r2, [r8]
   251d0:	orr	r5, r5, #2
   251d4:	b	24dc4 <__assert_fail@plt+0x1386c>
   251d8:	mov	r0, #0
   251dc:	orr	r5, r5, r0
   251e0:	ldr	r3, [r4]
   251e4:	add	r2, r3, r6
   251e8:	str	r2, [r4]
   251ec:	ldrb	r3, [r3, r6]
   251f0:	cmp	r3, #0
   251f4:	orrne	r5, r5, #2
   251f8:	b	24dbc <__assert_fail@plt+0x13864>
   251fc:	mov	r5, #4
   25200:	b	24dc4 <__assert_fail@plt+0x1386c>
   25204:	mov	r5, #4
   25208:	b	24dc4 <__assert_fail@plt+0x1386c>
   2520c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25210:	strd	r6, [sp, #8]
   25214:	strd	r8, [sp, #16]
   25218:	strd	sl, [sp, #24]
   2521c:	str	lr, [sp, #32]
   25220:	sub	sp, sp, #12
   25224:	str	r0, [sp, #4]
   25228:	cmp	r2, #0
   2522c:	beq	25328 <__assert_fail@plt+0x13dd0>
   25230:	sub	ip, r2, #1
   25234:	ldrd	r2, [r0]
   25238:	mov	r0, #0
   2523c:	mov	r8, r1
   25240:	asr	r9, r1, #31
   25244:	str	r1, [sp]
   25248:	b	25298 <__assert_fail@plt+0x13d40>
   2524c:	orrs	r4, r2, r3
   25250:	movne	lr, #1
   25254:	b	252a8 <__assert_fail@plt+0x13d50>
   25258:	mov	sl, r3
   2525c:	ldr	fp, [sp]
   25260:	umull	r6, r7, r1, r2
   25264:	mov	r4, r7
   25268:	mov	r5, #0
   2526c:	umlal	r4, r5, sl, fp
   25270:	cmp	r5, #0
   25274:	bne	252dc <__assert_fail@plt+0x13d84>
   25278:	cmp	lr, #0
   2527c:	bne	252f4 <__assert_fail@plt+0x13d9c>
   25280:	mov	r2, r6
   25284:	mov	r3, r4
   25288:	orr	r0, r0, lr
   2528c:	sub	ip, ip, #1
   25290:	cmn	ip, #1
   25294:	beq	25304 <__assert_fail@plt+0x13dac>
   25298:	mov	lr, #0
   2529c:	cmp	r8, #0
   252a0:	sbcs	r4, r9, #0
   252a4:	blt	2524c <__assert_fail@plt+0x13cf4>
   252a8:	cmp	r9, #0
   252ac:	bne	252c8 <__assert_fail@plt+0x13d70>
   252b0:	cmp	r3, #0
   252b4:	bne	25258 <__assert_fail@plt+0x13d00>
   252b8:	umull	r2, r3, r1, r2
   252bc:	mov	r6, r2
   252c0:	mov	r4, r3
   252c4:	b	25278 <__assert_fail@plt+0x13d20>
   252c8:	cmp	r3, #0
   252cc:	bne	252dc <__assert_fail@plt+0x13d84>
   252d0:	mov	sl, r9
   252d4:	mov	fp, r2
   252d8:	b	25260 <__assert_fail@plt+0x13d08>
   252dc:	mul	r4, r1, r3
   252e0:	mla	r4, r2, r9, r4
   252e4:	umull	r6, r7, r1, r2
   252e8:	add	r4, r4, r7
   252ec:	mov	lr, #1
   252f0:	b	25278 <__assert_fail@plt+0x13d20>
   252f4:	mvn	r2, #0
   252f8:	mvn	r3, #0
   252fc:	mov	lr, #1
   25300:	b	25288 <__assert_fail@plt+0x13d30>
   25304:	ldr	r1, [sp, #4]
   25308:	strd	r2, [r1]
   2530c:	add	sp, sp, #12
   25310:	ldrd	r4, [sp]
   25314:	ldrd	r6, [sp, #8]
   25318:	ldrd	r8, [sp, #16]
   2531c:	ldrd	sl, [sp, #24]
   25320:	add	sp, sp, #32
   25324:	pop	{pc}		; (ldr pc, [sp], #4)
   25328:	mov	r0, #0
   2532c:	b	2530c <__assert_fail@plt+0x13db4>
   25330:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25334:	strd	r6, [sp, #8]
   25338:	strd	r8, [sp, #16]
   2533c:	str	lr, [sp, #24]
   25340:	sub	sp, sp, #20
   25344:	cmp	r2, #36	; 0x24
   25348:	bhi	2539c <__assert_fail@plt+0x13e44>
   2534c:	mov	r5, r0
   25350:	mov	r6, r1
   25354:	mov	r7, r2
   25358:	mov	r9, r3
   2535c:	cmp	r1, #0
   25360:	addeq	r6, sp, #12
   25364:	bl	1142c <__errno_location@plt>
   25368:	mov	r8, r0
   2536c:	mov	r3, #0
   25370:	str	r3, [r0]
   25374:	ldrb	r4, [r5]
   25378:	bl	113fc <__ctype_b_loc@plt>
   2537c:	ldr	r1, [r0]
   25380:	mov	r2, r5
   25384:	lsl	r3, r4, #1
   25388:	ldrh	r3, [r1, r3]
   2538c:	tst	r3, #8192	; 0x2000
   25390:	beq	253bc <__assert_fail@plt+0x13e64>
   25394:	ldrb	r4, [r2, #1]!
   25398:	b	25384 <__assert_fail@plt+0x13e2c>
   2539c:	movw	r3, #29968	; 0x7510
   253a0:	movt	r3, #2
   253a4:	mov	r2, #85	; 0x55
   253a8:	movw	r1, #29912	; 0x74d8
   253ac:	movt	r1, #2
   253b0:	movw	r0, #29928	; 0x74e8
   253b4:	movt	r0, #2
   253b8:	bl	11558 <__assert_fail@plt>
   253bc:	cmp	r4, #45	; 0x2d
   253c0:	moveq	r4, #4
   253c4:	beq	25558 <__assert_fail@plt+0x14000>
   253c8:	mov	r3, #0
   253cc:	mov	r2, r7
   253d0:	mov	r1, r6
   253d4:	mov	r0, r5
   253d8:	bl	1127c <__strtoull_internal@plt>
   253dc:	strd	r0, [sp]
   253e0:	ldr	r7, [r6]
   253e4:	cmp	r7, r5
   253e8:	beq	2540c <__assert_fail@plt+0x13eb4>
   253ec:	ldr	r3, [r8]
   253f0:	cmp	r3, #0
   253f4:	beq	25530 <__assert_fail@plt+0x13fd8>
   253f8:	cmp	r3, #34	; 0x22
   253fc:	moveq	r4, #1
   25400:	beq	25534 <__assert_fail@plt+0x13fdc>
   25404:	mov	r4, #4
   25408:	b	25558 <__assert_fail@plt+0x14000>
   2540c:	ldr	r3, [sp, #48]	; 0x30
   25410:	cmp	r3, #0
   25414:	beq	25870 <__assert_fail@plt+0x14318>
   25418:	ldrb	r1, [r5]
   2541c:	cmp	r1, #0
   25420:	moveq	r4, #4
   25424:	beq	25558 <__assert_fail@plt+0x14000>
   25428:	mov	r0, r3
   2542c:	bl	11420 <strchr@plt>
   25430:	cmp	r0, #0
   25434:	beq	25878 <__assert_fail@plt+0x14320>
   25438:	mov	r2, #1
   2543c:	mov	r3, #0
   25440:	strd	r2, [sp]
   25444:	ldrb	r5, [r7]
   25448:	mov	r4, #0
   2544c:	mov	r1, r5
   25450:	ldr	r0, [sp, #48]	; 0x30
   25454:	bl	11420 <strchr@plt>
   25458:	cmp	r0, #0
   2545c:	beq	25574 <__assert_fail@plt+0x1401c>
   25460:	sub	r3, r5, #69	; 0x45
   25464:	cmp	r3, #47	; 0x2f
   25468:	ldrls	pc, [pc, r3, lsl #2]
   2546c:	b	256c0 <__assert_fail@plt+0x14168>
   25470:	andeq	r5, r2, r4, lsl #11
   25474:	andeq	r5, r2, r0, asr #13
   25478:	andeq	r5, r2, r4, lsl #11
   2547c:	andeq	r5, r2, r0, asr #13
   25480:	andeq	r5, r2, r0, asr #13
   25484:	andeq	r5, r2, r0, asr #13
   25488:	andeq	r5, r2, r4, lsl #11
   2548c:	andeq	r5, r2, r0, asr #13
   25490:	andeq	r5, r2, r4, lsl #11
   25494:	andeq	r5, r2, r0, asr #13
   25498:	andeq	r5, r2, r0, asr #13
   2549c:	andeq	r5, r2, r4, lsl #11
   254a0:	andeq	r5, r2, r0, asr #13
   254a4:	andeq	r5, r2, r0, asr #13
   254a8:	andeq	r5, r2, r0, asr #13
   254ac:	andeq	r5, r2, r4, lsl #11
   254b0:	andeq	r5, r2, r0, asr #13
   254b4:	andeq	r5, r2, r0, asr #13
   254b8:	andeq	r5, r2, r0, asr #13
   254bc:	andeq	r5, r2, r0, asr #13
   254c0:	andeq	r5, r2, r4, lsl #11
   254c4:	andeq	r5, r2, r4, lsl #11
   254c8:	andeq	r5, r2, r0, asr #13
   254cc:	andeq	r5, r2, r0, asr #13
   254d0:	andeq	r5, r2, r0, asr #13
   254d4:	andeq	r5, r2, r0, asr #13
   254d8:	andeq	r5, r2, r0, asr #13
   254dc:	andeq	r5, r2, r0, asr #13
   254e0:	andeq	r5, r2, r0, asr #13
   254e4:	andeq	r5, r2, r0, asr #13
   254e8:	andeq	r5, r2, r0, asr #13
   254ec:	andeq	r5, r2, r0, asr #13
   254f0:	andeq	r5, r2, r0, asr #13
   254f4:	andeq	r5, r2, r0, asr #13
   254f8:	andeq	r5, r2, r4, lsl #11
   254fc:	andeq	r5, r2, r0, asr #13
   25500:	andeq	r5, r2, r0, asr #13
   25504:	andeq	r5, r2, r0, asr #13
   25508:	andeq	r5, r2, r4, lsl #11
   2550c:	andeq	r5, r2, r0, asr #13
   25510:	andeq	r5, r2, r4, lsl #11
   25514:	andeq	r5, r2, r0, asr #13
   25518:	andeq	r5, r2, r0, asr #13
   2551c:	andeq	r5, r2, r0, asr #13
   25520:	andeq	r5, r2, r0, asr #13
   25524:	andeq	r5, r2, r0, asr #13
   25528:	andeq	r5, r2, r0, asr #13
   2552c:	andeq	r5, r2, r4, lsl #11
   25530:	mov	r4, #0
   25534:	ldr	r3, [sp, #48]	; 0x30
   25538:	cmp	r3, #0
   2553c:	strdeq	r0, [r9]
   25540:	beq	25558 <__assert_fail@plt+0x14000>
   25544:	ldrb	r5, [r7]
   25548:	cmp	r5, #0
   2554c:	bne	2544c <__assert_fail@plt+0x13ef4>
   25550:	ldrd	r2, [sp]
   25554:	strd	r2, [r9]
   25558:	mov	r0, r4
   2555c:	add	sp, sp, #20
   25560:	ldrd	r4, [sp]
   25564:	ldrd	r6, [sp, #8]
   25568:	ldrd	r8, [sp, #16]
   2556c:	add	sp, sp, #24
   25570:	pop	{pc}		; (ldr pc, [sp], #4)
   25574:	ldrd	r2, [sp]
   25578:	strd	r2, [r9]
   2557c:	orr	r4, r4, #2
   25580:	b	25558 <__assert_fail@plt+0x14000>
   25584:	mov	r1, #48	; 0x30
   25588:	ldr	r0, [sp, #48]	; 0x30
   2558c:	bl	11420 <strchr@plt>
   25590:	cmp	r0, #0
   25594:	beq	256cc <__assert_fail@plt+0x14174>
   25598:	ldrb	r3, [r7, #1]
   2559c:	cmp	r3, #68	; 0x44
   255a0:	beq	256d8 <__assert_fail@plt+0x14180>
   255a4:	cmp	r3, #105	; 0x69
   255a8:	beq	256a8 <__assert_fail@plt+0x14150>
   255ac:	cmp	r3, #66	; 0x42
   255b0:	moveq	r7, #2
   255b4:	movne	r7, #1
   255b8:	moveq	r1, #1000	; 0x3e8
   255bc:	movne	r1, #1024	; 0x400
   255c0:	sub	r5, r5, #66	; 0x42
   255c4:	cmp	r5, #53	; 0x35
   255c8:	ldrls	pc, [pc, r5, lsl #2]
   255cc:	b	2583c <__assert_fail@plt+0x142e4>
   255d0:	andeq	r5, r2, ip, lsr #14
   255d4:	andeq	r5, r2, ip, lsr r8
   255d8:	andeq	r5, r2, ip, lsr r8
   255dc:	andeq	r5, r2, r4, ror r7
   255e0:	andeq	r5, r2, ip, lsr r8
   255e4:	andeq	r5, r2, r4, lsl #15
   255e8:	andeq	r5, r2, ip, lsr r8
   255ec:	andeq	r5, r2, ip, lsr r8
   255f0:	andeq	r5, r2, ip, lsr r8
   255f4:	muleq	r2, r4, r7
   255f8:	andeq	r5, r2, ip, lsr r8
   255fc:	andeq	r5, r2, r4, lsr #15
   25600:	andeq	r5, r2, ip, lsr r8
   25604:	andeq	r5, r2, ip, lsr r8
   25608:			; <UNDEFINED> instruction: 0x000257b4
   2560c:	andeq	r5, r2, ip, lsr r8
   25610:	andeq	r5, r2, ip, lsr r8
   25614:	andeq	r5, r2, ip, lsr r8
   25618:	andeq	r5, r2, r4, asr #15
   2561c:	andeq	r5, r2, ip, lsr r8
   25620:	andeq	r5, r2, ip, lsr r8
   25624:	andeq	r5, r2, ip, lsr r8
   25628:	andeq	r5, r2, ip, lsr r8
   2562c:	andeq	r5, r2, ip, lsl r8
   25630:	andeq	r5, r2, ip, lsr #16
   25634:	andeq	r5, r2, ip, lsr r8
   25638:	andeq	r5, r2, ip, lsr r8
   2563c:	andeq	r5, r2, ip, lsr r8
   25640:	andeq	r5, r2, ip, lsr r8
   25644:	andeq	r5, r2, ip, lsr r8
   25648:	andeq	r5, r2, ip, lsr r8
   2564c:	andeq	r5, r2, ip, lsr r8
   25650:	andeq	r5, r2, r4, ror #13
   25654:	andeq	r5, r2, ip, asr #16
   25658:	andeq	r5, r2, ip, lsr r8
   2565c:	andeq	r5, r2, ip, lsr r8
   25660:	andeq	r5, r2, ip, lsr r8
   25664:	andeq	r5, r2, r4, lsl #15
   25668:	andeq	r5, r2, ip, lsr r8
   2566c:	andeq	r5, r2, ip, lsr r8
   25670:	andeq	r5, r2, ip, lsr r8
   25674:	muleq	r2, r4, r7
   25678:	andeq	r5, r2, ip, lsr r8
   2567c:	andeq	r5, r2, r4, lsr #15
   25680:	andeq	r5, r2, ip, lsr r8
   25684:	andeq	r5, r2, ip, lsr r8
   25688:	andeq	r5, r2, ip, lsr r8
   2568c:	andeq	r5, r2, ip, lsr r8
   25690:	andeq	r5, r2, ip, lsr r8
   25694:	andeq	r5, r2, ip, lsr r8
   25698:	andeq	r5, r2, r4, asr #15
   2569c:	andeq	r5, r2, ip, lsr r8
   256a0:	andeq	r5, r2, ip, lsr r8
   256a4:	ldrdeq	r5, [r2], -r4
   256a8:	ldrb	r3, [r7, #2]
   256ac:	cmp	r3, #66	; 0x42
   256b0:	movne	r7, #1
   256b4:	moveq	r7, #3
   256b8:	mov	r1, #1024	; 0x400
   256bc:	b	255c0 <__assert_fail@plt+0x14068>
   256c0:	mov	r7, #1
   256c4:	mov	r1, #1024	; 0x400
   256c8:	b	255c0 <__assert_fail@plt+0x14068>
   256cc:	mov	r7, #1
   256d0:	mov	r1, #1024	; 0x400
   256d4:	b	255c0 <__assert_fail@plt+0x14068>
   256d8:	mov	r7, #2
   256dc:	mov	r1, #1000	; 0x3e8
   256e0:	b	255c0 <__assert_fail@plt+0x14068>
   256e4:	ldr	r3, [sp]
   256e8:	ldr	ip, [sp, #4]
   256ec:	lsl	r2, ip, #9
   256f0:	orr	r2, r2, r3, lsr #23
   256f4:	lsl	r3, r3, #9
   256f8:	mov	r0, #0
   256fc:	mov	r1, r0
   25700:	lsr	r0, ip, #23
   25704:	orrs	r1, r0, r1
   25708:	streq	r3, [sp]
   2570c:	streq	r2, [sp, #4]
   25710:	moveq	r0, #0
   25714:	beq	25850 <__assert_fail@plt+0x142f8>
   25718:	mvn	r2, #0
   2571c:	mvn	r3, #0
   25720:	strd	r2, [sp]
   25724:	mov	r0, #1
   25728:	b	25850 <__assert_fail@plt+0x142f8>
   2572c:	ldr	r3, [sp]
   25730:	ldr	ip, [sp, #4]
   25734:	lsl	r2, ip, #10
   25738:	orr	r2, r2, r3, lsr #22
   2573c:	lsl	r3, r3, #10
   25740:	mov	r0, #0
   25744:	mov	r1, r0
   25748:	lsr	r0, ip, #22
   2574c:	orrs	r1, r0, r1
   25750:	streq	r3, [sp]
   25754:	streq	r2, [sp, #4]
   25758:	moveq	r0, #0
   2575c:	beq	25850 <__assert_fail@plt+0x142f8>
   25760:	mvn	r2, #0
   25764:	mvn	r3, #0
   25768:	strd	r2, [sp]
   2576c:	mov	r0, #1
   25770:	b	25850 <__assert_fail@plt+0x142f8>
   25774:	mov	r2, #6
   25778:	mov	r0, sp
   2577c:	bl	2520c <__assert_fail@plt+0x13cb4>
   25780:	b	25850 <__assert_fail@plt+0x142f8>
   25784:	mov	r2, #3
   25788:	mov	r0, sp
   2578c:	bl	2520c <__assert_fail@plt+0x13cb4>
   25790:	b	25850 <__assert_fail@plt+0x142f8>
   25794:	mov	r2, #1
   25798:	mov	r0, sp
   2579c:	bl	2520c <__assert_fail@plt+0x13cb4>
   257a0:	b	25850 <__assert_fail@plt+0x142f8>
   257a4:	mov	r2, #2
   257a8:	mov	r0, sp
   257ac:	bl	2520c <__assert_fail@plt+0x13cb4>
   257b0:	b	25850 <__assert_fail@plt+0x142f8>
   257b4:	mov	r2, #5
   257b8:	mov	r0, sp
   257bc:	bl	2520c <__assert_fail@plt+0x13cb4>
   257c0:	b	25850 <__assert_fail@plt+0x142f8>
   257c4:	mov	r2, #4
   257c8:	mov	r0, sp
   257cc:	bl	2520c <__assert_fail@plt+0x13cb4>
   257d0:	b	25850 <__assert_fail@plt+0x142f8>
   257d4:	ldr	r3, [sp]
   257d8:	ldr	r2, [sp, #4]
   257dc:	adds	r3, r3, r3
   257e0:	adc	r2, r2, r2
   257e4:	mov	r1, #0
   257e8:	mov	r0, r1
   257ec:	ldr	r1, [sp, #4]
   257f0:	lsr	r1, r1, #31
   257f4:	orrs	r1, r1, r0
   257f8:	streq	r3, [sp]
   257fc:	streq	r2, [sp, #4]
   25800:	moveq	r0, #0
   25804:	beq	25850 <__assert_fail@plt+0x142f8>
   25808:	mvn	r2, #0
   2580c:	mvn	r3, #0
   25810:	strd	r2, [sp]
   25814:	mov	r0, #1
   25818:	b	25850 <__assert_fail@plt+0x142f8>
   2581c:	mov	r2, #8
   25820:	mov	r0, sp
   25824:	bl	2520c <__assert_fail@plt+0x13cb4>
   25828:	b	25850 <__assert_fail@plt+0x142f8>
   2582c:	mov	r2, #7
   25830:	mov	r0, sp
   25834:	bl	2520c <__assert_fail@plt+0x13cb4>
   25838:	b	25850 <__assert_fail@plt+0x142f8>
   2583c:	ldrd	r2, [sp]
   25840:	strd	r2, [r9]
   25844:	orr	r4, r4, #2
   25848:	b	25558 <__assert_fail@plt+0x14000>
   2584c:	mov	r0, #0
   25850:	orr	r4, r4, r0
   25854:	ldr	r3, [r6]
   25858:	add	r2, r3, r7
   2585c:	str	r2, [r6]
   25860:	ldrb	r3, [r3, r7]
   25864:	cmp	r3, #0
   25868:	orrne	r4, r4, #2
   2586c:	b	25550 <__assert_fail@plt+0x13ff8>
   25870:	mov	r4, #4
   25874:	b	25558 <__assert_fail@plt+0x14000>
   25878:	mov	r4, #4
   2587c:	b	25558 <__assert_fail@plt+0x14000>
   25880:	strd	r4, [sp, #-16]!
   25884:	str	r6, [sp, #8]
   25888:	str	lr, [sp, #12]
   2588c:	cmp	r1, #0
   25890:	cmpne	r0, #0
   25894:	beq	258d0 <__assert_fail@plt+0x14378>
   25898:	mov	r2, r0
   2589c:	mov	r3, r1
   258a0:	umull	r4, r5, r0, r1
   258a4:	adds	r1, r5, #0
   258a8:	movne	r1, #1
   258ac:	cmp	r4, #0
   258b0:	movlt	r1, #1
   258b4:	cmp	r1, #0
   258b8:	beq	258d8 <__assert_fail@plt+0x14380>
   258bc:	bl	1142c <__errno_location@plt>
   258c0:	mov	r3, #12
   258c4:	str	r3, [r0]
   258c8:	mov	r0, #0
   258cc:	b	258e4 <__assert_fail@plt+0x1438c>
   258d0:	mov	r3, #1
   258d4:	mov	r2, r3
   258d8:	mov	r1, r3
   258dc:	mov	r0, r2
   258e0:	bl	111b0 <calloc@plt>
   258e4:	ldrd	r4, [sp]
   258e8:	ldr	r6, [sp, #8]
   258ec:	add	sp, sp, #12
   258f0:	pop	{pc}		; (ldr pc, [sp], #4)
   258f4:	str	r4, [sp, #-8]!
   258f8:	str	lr, [sp, #4]
   258fc:	cmp	r0, #0
   25900:	beq	2591c <__assert_fail@plt+0x143c4>
   25904:	bge	25920 <__assert_fail@plt+0x143c8>
   25908:	bl	1142c <__errno_location@plt>
   2590c:	mov	r3, #12
   25910:	str	r3, [r0]
   25914:	mov	r0, #0
   25918:	b	25924 <__assert_fail@plt+0x143cc>
   2591c:	mov	r0, #1
   25920:	bl	1139c <malloc@plt>
   25924:	ldr	r4, [sp]
   25928:	add	sp, sp, #4
   2592c:	pop	{pc}		; (ldr pc, [sp], #4)
   25930:	str	r4, [sp, #-8]!
   25934:	str	lr, [sp, #4]
   25938:	cmp	r0, #0
   2593c:	beq	25960 <__assert_fail@plt+0x14408>
   25940:	cmp	r1, #0
   25944:	beq	2596c <__assert_fail@plt+0x14414>
   25948:	cmp	r1, #0
   2594c:	blt	25978 <__assert_fail@plt+0x14420>
   25950:	bl	112f4 <realloc@plt>
   25954:	ldr	r4, [sp]
   25958:	add	sp, sp, #4
   2595c:	pop	{pc}		; (ldr pc, [sp], #4)
   25960:	mov	r0, r1
   25964:	bl	258f4 <__assert_fail@plt+0x1439c>
   25968:	b	25954 <__assert_fail@plt+0x143fc>
   2596c:	bl	13eac <__assert_fail@plt+0x2954>
   25970:	mov	r0, #0
   25974:	b	25954 <__assert_fail@plt+0x143fc>
   25978:	bl	1142c <__errno_location@plt>
   2597c:	mov	r3, #12
   25980:	str	r3, [r0]
   25984:	mov	r0, #0
   25988:	b	25954 <__assert_fail@plt+0x143fc>
   2598c:	strd	r4, [sp, #-16]!
   25990:	str	r6, [sp, #8]
   25994:	str	lr, [sp, #12]
   25998:	mov	r5, r0
   2599c:	bl	1136c <__fpending@plt>
   259a0:	mov	r6, r0
   259a4:	ldr	r4, [r5]
   259a8:	and	r4, r4, #32
   259ac:	mov	r0, r5
   259b0:	bl	13c50 <__assert_fail@plt+0x26f8>
   259b4:	cmp	r4, #0
   259b8:	bne	259ec <__assert_fail@plt+0x14494>
   259bc:	cmp	r0, #0
   259c0:	beq	259dc <__assert_fail@plt+0x14484>
   259c4:	cmp	r6, #0
   259c8:	bne	25a08 <__assert_fail@plt+0x144b0>
   259cc:	bl	1142c <__errno_location@plt>
   259d0:	ldr	r0, [r0]
   259d4:	subs	r0, r0, #9
   259d8:	mvnne	r0, #0
   259dc:	ldrd	r4, [sp]
   259e0:	ldr	r6, [sp, #8]
   259e4:	add	sp, sp, #12
   259e8:	pop	{pc}		; (ldr pc, [sp], #4)
   259ec:	cmp	r0, #0
   259f0:	bne	25a10 <__assert_fail@plt+0x144b8>
   259f4:	bl	1142c <__errno_location@plt>
   259f8:	mov	r3, #0
   259fc:	str	r3, [r0]
   25a00:	mvn	r0, #0
   25a04:	b	259dc <__assert_fail@plt+0x14484>
   25a08:	mvn	r0, #0
   25a0c:	b	259dc <__assert_fail@plt+0x14484>
   25a10:	mvn	r0, #0
   25a14:	b	259dc <__assert_fail@plt+0x14484>
   25a18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25a1c:	strd	r6, [sp, #8]
   25a20:	strd	r8, [sp, #16]
   25a24:	str	sl, [sp, #24]
   25a28:	str	lr, [sp, #28]
   25a2c:	ldr	ip, [r0, #4]
   25a30:	cmp	ip, r1
   25a34:	strcs	r1, [r0]
   25a38:	movcs	r4, #1
   25a3c:	bcs	25a8c <__assert_fail@plt+0x14534>
   25a40:	mov	r7, r3
   25a44:	mov	r6, r1
   25a48:	mov	r5, r0
   25a4c:	umull	r8, r9, r1, r3
   25a50:	adds	r4, r9, #0
   25a54:	movne	r4, #1
   25a58:	cmp	r4, #0
   25a5c:	bne	25aa8 <__assert_fail@plt+0x14550>
   25a60:	ldr	r0, [r0, #8]
   25a64:	cmp	r0, r2
   25a68:	beq	25abc <__assert_fail@plt+0x14564>
   25a6c:	mov	r1, r8
   25a70:	bl	25930 <__assert_fail@plt+0x143d8>
   25a74:	subs	r8, r0, #0
   25a78:	beq	25a8c <__assert_fail@plt+0x14534>
   25a7c:	str	r8, [r5, #8]
   25a80:	str	r6, [r5, #4]
   25a84:	str	r6, [r5]
   25a88:	mov	r4, #1
   25a8c:	mov	r0, r4
   25a90:	ldrd	r4, [sp]
   25a94:	ldrd	r6, [sp, #8]
   25a98:	ldrd	r8, [sp, #16]
   25a9c:	ldr	sl, [sp, #24]
   25aa0:	add	sp, sp, #28
   25aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   25aa8:	bl	1142c <__errno_location@plt>
   25aac:	mov	r3, #12
   25ab0:	str	r3, [r0]
   25ab4:	mov	r4, #0
   25ab8:	b	25a8c <__assert_fail@plt+0x14534>
   25abc:	mov	r0, r8
   25ac0:	bl	258f4 <__assert_fail@plt+0x1439c>
   25ac4:	subs	r8, r0, #0
   25ac8:	beq	25a8c <__assert_fail@plt+0x14534>
   25acc:	ldr	r1, [r5, #8]
   25ad0:	cmp	r1, #0
   25ad4:	beq	25a7c <__assert_fail@plt+0x14524>
   25ad8:	ldr	r2, [r5]
   25adc:	mul	r2, r2, r7
   25ae0:	mov	r0, r8
   25ae4:	bl	11264 <memcpy@plt>
   25ae8:	b	25a7c <__assert_fail@plt+0x14524>
   25aec:	push	{r1, r2, r3}
   25af0:	strd	r4, [sp, #-16]!
   25af4:	str	r6, [sp, #8]
   25af8:	str	lr, [sp, #12]
   25afc:	sub	sp, sp, #12
   25b00:	mov	r5, r0
   25b04:	ldr	r1, [sp, #28]
   25b08:	add	r3, sp, #32
   25b0c:	str	r3, [sp, #4]
   25b10:	cmp	r1, #0
   25b14:	beq	25b5c <__assert_fail@plt+0x14604>
   25b18:	movw	r3, #1030	; 0x406
   25b1c:	cmp	r1, r3
   25b20:	beq	25b98 <__assert_fail@plt+0x14640>
   25b24:	cmp	r1, #11
   25b28:	beq	25d48 <__assert_fail@plt+0x147f0>
   25b2c:	bgt	25cd4 <__assert_fail@plt+0x1477c>
   25b30:	cmp	r1, #3
   25b34:	beq	25d48 <__assert_fail@plt+0x147f0>
   25b38:	ble	25c94 <__assert_fail@plt+0x1473c>
   25b3c:	cmp	r1, #8
   25b40:	beq	25cb4 <__assert_fail@plt+0x1475c>
   25b44:	ble	25cac <__assert_fail@plt+0x14754>
   25b48:	cmp	r1, #9
   25b4c:	beq	25d48 <__assert_fail@plt+0x147f0>
   25b50:	cmp	r1, #10
   25b54:	bne	25d0c <__assert_fail@plt+0x147b4>
   25b58:	b	25cb4 <__assert_fail@plt+0x1475c>
   25b5c:	ldr	r3, [sp, #4]
   25b60:	add	r2, r3, #4
   25b64:	str	r2, [sp, #4]
   25b68:	ldr	r2, [r3]
   25b6c:	mov	r1, #0
   25b70:	bl	114b0 <fcntl64@plt>
   25b74:	mov	r4, r0
   25b78:	mov	r0, r4
   25b7c:	add	sp, sp, #12
   25b80:	ldrd	r4, [sp]
   25b84:	ldr	r6, [sp, #8]
   25b88:	ldr	lr, [sp, #12]
   25b8c:	add	sp, sp, #16
   25b90:	add	sp, sp, #12
   25b94:	bx	lr
   25b98:	ldr	r3, [sp, #4]
   25b9c:	add	r2, r3, #4
   25ba0:	str	r2, [sp, #4]
   25ba4:	ldr	r6, [r3]
   25ba8:	movw	r3, #33784	; 0x83f8
   25bac:	movt	r3, #3
   25bb0:	ldr	r3, [r3]
   25bb4:	cmp	r3, #0
   25bb8:	blt	25c20 <__assert_fail@plt+0x146c8>
   25bbc:	mov	r2, r6
   25bc0:	movw	r1, #1030	; 0x406
   25bc4:	bl	114b0 <fcntl64@plt>
   25bc8:	subs	r4, r0, #0
   25bcc:	blt	25be4 <__assert_fail@plt+0x1468c>
   25bd0:	movw	r3, #33784	; 0x83f8
   25bd4:	movt	r3, #3
   25bd8:	mov	r2, #1
   25bdc:	str	r2, [r3]
   25be0:	b	25b78 <__assert_fail@plt+0x14620>
   25be4:	bl	1142c <__errno_location@plt>
   25be8:	ldr	r3, [r0]
   25bec:	cmp	r3, #22
   25bf0:	bne	25bd0 <__assert_fail@plt+0x14678>
   25bf4:	mov	r2, r6
   25bf8:	mov	r1, #0
   25bfc:	mov	r0, r5
   25c00:	bl	114b0 <fcntl64@plt>
   25c04:	subs	r4, r0, #0
   25c08:	blt	25b78 <__assert_fail@plt+0x14620>
   25c0c:	movw	r3, #33784	; 0x83f8
   25c10:	movt	r3, #3
   25c14:	mvn	r2, #0
   25c18:	str	r2, [r3]
   25c1c:	b	25c48 <__assert_fail@plt+0x146f0>
   25c20:	mov	r2, r6
   25c24:	mov	r1, #0
   25c28:	bl	114b0 <fcntl64@plt>
   25c2c:	subs	r4, r0, #0
   25c30:	blt	25b78 <__assert_fail@plt+0x14620>
   25c34:	movw	r3, #33784	; 0x83f8
   25c38:	movt	r3, #3
   25c3c:	ldr	r3, [r3]
   25c40:	cmn	r3, #1
   25c44:	bne	25b78 <__assert_fail@plt+0x14620>
   25c48:	mov	r1, #1
   25c4c:	mov	r0, r4
   25c50:	bl	114b0 <fcntl64@plt>
   25c54:	subs	r2, r0, #0
   25c58:	blt	25c74 <__assert_fail@plt+0x1471c>
   25c5c:	orr	r2, r2, #1
   25c60:	mov	r1, #2
   25c64:	mov	r0, r4
   25c68:	bl	114b0 <fcntl64@plt>
   25c6c:	cmn	r0, #1
   25c70:	bne	25b78 <__assert_fail@plt+0x14620>
   25c74:	bl	1142c <__errno_location@plt>
   25c78:	mov	r5, r0
   25c7c:	ldr	r6, [r0]
   25c80:	mov	r0, r4
   25c84:	bl	11540 <close@plt>
   25c88:	str	r6, [r5]
   25c8c:	mvn	r4, #0
   25c90:	b	25b78 <__assert_fail@plt+0x14620>
   25c94:	cmp	r1, #1
   25c98:	beq	25d48 <__assert_fail@plt+0x147f0>
   25c9c:	bgt	25cb4 <__assert_fail@plt+0x1475c>
   25ca0:	cmp	r1, #0
   25ca4:	bne	25d0c <__assert_fail@plt+0x147b4>
   25ca8:	b	25cb4 <__assert_fail@plt+0x1475c>
   25cac:	cmp	r1, #4
   25cb0:	bne	25d0c <__assert_fail@plt+0x147b4>
   25cb4:	ldr	r3, [sp, #4]
   25cb8:	add	r2, r3, #4
   25cbc:	str	r2, [sp, #4]
   25cc0:	ldr	r2, [r3]
   25cc4:	mov	r0, r5
   25cc8:	bl	114b0 <fcntl64@plt>
   25ccc:	mov	r4, r0
   25cd0:	b	25b78 <__assert_fail@plt+0x14620>
   25cd4:	movw	r3, #1031	; 0x407
   25cd8:	cmp	r1, r3
   25cdc:	bgt	25d2c <__assert_fail@plt+0x147d4>
   25ce0:	movw	r3, #1030	; 0x406
   25ce4:	cmp	r1, r3
   25ce8:	bge	25cb4 <__assert_fail@plt+0x1475c>
   25cec:	movw	r3, #1025	; 0x401
   25cf0:	cmp	r1, r3
   25cf4:	beq	25d48 <__assert_fail@plt+0x147f0>
   25cf8:	movw	r3, #1026	; 0x402
   25cfc:	cmp	r1, r3
   25d00:	beq	25cb4 <__assert_fail@plt+0x1475c>
   25d04:	cmp	r1, #1024	; 0x400
   25d08:	beq	25cb4 <__assert_fail@plt+0x1475c>
   25d0c:	ldr	r3, [sp, #4]
   25d10:	add	r2, r3, #4
   25d14:	str	r2, [sp, #4]
   25d18:	ldr	r2, [r3]
   25d1c:	mov	r0, r5
   25d20:	bl	114b0 <fcntl64@plt>
   25d24:	mov	r4, r0
   25d28:	b	25b78 <__assert_fail@plt+0x14620>
   25d2c:	movw	r3, #1033	; 0x409
   25d30:	cmp	r1, r3
   25d34:	beq	25cb4 <__assert_fail@plt+0x1475c>
   25d38:	blt	25d48 <__assert_fail@plt+0x147f0>
   25d3c:	movw	r3, #1034	; 0x40a
   25d40:	cmp	r1, r3
   25d44:	bne	25d0c <__assert_fail@plt+0x147b4>
   25d48:	mov	r0, r5
   25d4c:	bl	114b0 <fcntl64@plt>
   25d50:	mov	r4, r0
   25d54:	b	25b78 <__assert_fail@plt+0x14620>
   25d58:	str	r4, [sp, #-8]!
   25d5c:	str	lr, [sp, #4]
   25d60:	mov	r0, #14
   25d64:	bl	114e0 <nl_langinfo@plt>
   25d68:	cmp	r0, #0
   25d6c:	beq	25d90 <__assert_fail@plt+0x14838>
   25d70:	ldrb	r2, [r0]
   25d74:	movw	r3, #29980	; 0x751c
   25d78:	movt	r3, #2
   25d7c:	cmp	r2, #0
   25d80:	moveq	r0, r3
   25d84:	ldr	r4, [sp]
   25d88:	add	sp, sp, #4
   25d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   25d90:	movw	r0, #29980	; 0x751c
   25d94:	movt	r0, #2
   25d98:	b	25d84 <__assert_fail@plt+0x1482c>
   25d9c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25da0:	strd	r6, [sp, #8]
   25da4:	str	lr, [sp, #16]
   25da8:	sub	sp, sp, #12
   25dac:	mov	r7, r1
   25db0:	mov	r5, r2
   25db4:	subs	r6, r0, #0
   25db8:	addeq	r6, sp, #4
   25dbc:	mov	r0, r6
   25dc0:	bl	11378 <mbrtowc@plt>
   25dc4:	mov	r4, r0
   25dc8:	cmp	r5, #0
   25dcc:	cmnne	r0, #3
   25dd0:	bhi	25dec <__assert_fail@plt+0x14894>
   25dd4:	mov	r0, r4
   25dd8:	add	sp, sp, #12
   25ddc:	ldrd	r4, [sp]
   25de0:	ldrd	r6, [sp, #8]
   25de4:	add	sp, sp, #16
   25de8:	pop	{pc}		; (ldr pc, [sp], #4)
   25dec:	mov	r0, #0
   25df0:	bl	25e48 <__assert_fail@plt+0x148f0>
   25df4:	cmp	r0, #0
   25df8:	bne	25dd4 <__assert_fail@plt+0x1487c>
   25dfc:	ldrb	r3, [r7]
   25e00:	str	r3, [r6]
   25e04:	mov	r4, #1
   25e08:	b	25dd4 <__assert_fail@plt+0x1487c>
   25e0c:	str	r4, [sp, #-8]!
   25e10:	str	lr, [sp, #4]
   25e14:	umull	r2, r3, r1, r2
   25e18:	cmp	r3, #0
   25e1c:	bne	25e34 <__assert_fail@plt+0x148dc>
   25e20:	mov	r1, r2
   25e24:	bl	25930 <__assert_fail@plt+0x143d8>
   25e28:	ldr	r4, [sp]
   25e2c:	add	sp, sp, #4
   25e30:	pop	{pc}		; (ldr pc, [sp], #4)
   25e34:	bl	1142c <__errno_location@plt>
   25e38:	mov	r3, #12
   25e3c:	str	r3, [r0]
   25e40:	mov	r0, #0
   25e44:	b	25e28 <__assert_fail@plt+0x148d0>
   25e48:	push	{lr}		; (str lr, [sp, #-4]!)
   25e4c:	sub	sp, sp, #268	; 0x10c
   25e50:	movw	r2, #257	; 0x101
   25e54:	add	r1, sp, #4
   25e58:	bl	25ea4 <__assert_fail@plt+0x1494c>
   25e5c:	cmp	r0, #0
   25e60:	movne	r0, #0
   25e64:	bne	25e9c <__assert_fail@plt+0x14944>
   25e68:	movw	r1, #29988	; 0x7524
   25e6c:	movt	r1, #2
   25e70:	add	r0, sp, #4
   25e74:	bl	111f8 <strcmp@plt>
   25e78:	cmp	r0, #0
   25e7c:	beq	25e98 <__assert_fail@plt+0x14940>
   25e80:	movw	r1, #29992	; 0x7528
   25e84:	movt	r1, #2
   25e88:	add	r0, sp, #4
   25e8c:	bl	111f8 <strcmp@plt>
   25e90:	adds	r0, r0, #0
   25e94:	movne	r0, #1
   25e98:	and	r0, r0, #1
   25e9c:	add	sp, sp, #268	; 0x10c
   25ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   25ea4:	strd	r4, [sp, #-16]!
   25ea8:	str	r6, [sp, #8]
   25eac:	str	lr, [sp, #12]
   25eb0:	mov	r6, r1
   25eb4:	mov	r4, r2
   25eb8:	mov	r1, #0
   25ebc:	bl	114bc <setlocale@plt>
   25ec0:	subs	r5, r0, #0
   25ec4:	beq	25f08 <__assert_fail@plt+0x149b0>
   25ec8:	mov	r0, r5
   25ecc:	bl	11414 <strlen@plt>
   25ed0:	cmp	r4, r0
   25ed4:	bhi	25f24 <__assert_fail@plt+0x149cc>
   25ed8:	cmp	r4, #0
   25edc:	moveq	r0, #34	; 0x22
   25ee0:	beq	25f38 <__assert_fail@plt+0x149e0>
   25ee4:	sub	r4, r4, #1
   25ee8:	mov	r2, r4
   25eec:	mov	r1, r5
   25ef0:	mov	r0, r6
   25ef4:	bl	11264 <memcpy@plt>
   25ef8:	mov	r3, #0
   25efc:	strb	r3, [r6, r4]
   25f00:	mov	r0, #34	; 0x22
   25f04:	b	25f38 <__assert_fail@plt+0x149e0>
   25f08:	cmp	r4, #0
   25f0c:	moveq	r0, #22
   25f10:	beq	25f38 <__assert_fail@plt+0x149e0>
   25f14:	mov	r3, #0
   25f18:	strb	r3, [r6]
   25f1c:	mov	r0, #22
   25f20:	b	25f38 <__assert_fail@plt+0x149e0>
   25f24:	add	r2, r0, #1
   25f28:	mov	r1, r5
   25f2c:	mov	r0, r6
   25f30:	bl	11264 <memcpy@plt>
   25f34:	mov	r0, #0
   25f38:	ldrd	r4, [sp]
   25f3c:	ldr	r6, [sp, #8]
   25f40:	add	sp, sp, #12
   25f44:	pop	{pc}		; (ldr pc, [sp], #4)
   25f48:	str	r4, [sp, #-8]!
   25f4c:	str	lr, [sp, #4]
   25f50:	mov	r1, #0
   25f54:	bl	114bc <setlocale@plt>
   25f58:	ldr	r4, [sp]
   25f5c:	add	sp, sp, #4
   25f60:	pop	{pc}		; (ldr pc, [sp], #4)
   25f64:	cmp	r3, #0
   25f68:	cmpeq	r2, #0
   25f6c:	bne	25f90 <__assert_fail@plt+0x14a38>
   25f70:	cmp	r1, #0
   25f74:	movlt	r1, #-2147483648	; 0x80000000
   25f78:	movlt	r0, #0
   25f7c:	blt	25f8c <__assert_fail@plt+0x14a34>
   25f80:	cmpeq	r0, #0
   25f84:	mvnne	r1, #-2147483648	; 0x80000000
   25f88:	mvnne	r0, #0
   25f8c:	b	26038 <__assert_fail@plt+0x14ae0>
   25f90:	sub	sp, sp, #8
   25f94:	push	{sp, lr}
   25f98:	cmp	r1, #0
   25f9c:	blt	25fbc <__assert_fail@plt+0x14a64>
   25fa0:	cmp	r3, #0
   25fa4:	blt	25ff0 <__assert_fail@plt+0x14a98>
   25fa8:	bl	26048 <__assert_fail@plt+0x14af0>
   25fac:	ldr	lr, [sp, #4]
   25fb0:	add	sp, sp, #8
   25fb4:	pop	{r2, r3}
   25fb8:	bx	lr
   25fbc:	rsbs	r0, r0, #0
   25fc0:	sbc	r1, r1, r1, lsl #1
   25fc4:	cmp	r3, #0
   25fc8:	blt	26014 <__assert_fail@plt+0x14abc>
   25fcc:	bl	26048 <__assert_fail@plt+0x14af0>
   25fd0:	ldr	lr, [sp, #4]
   25fd4:	add	sp, sp, #8
   25fd8:	pop	{r2, r3}
   25fdc:	rsbs	r0, r0, #0
   25fe0:	sbc	r1, r1, r1, lsl #1
   25fe4:	rsbs	r2, r2, #0
   25fe8:	sbc	r3, r3, r3, lsl #1
   25fec:	bx	lr
   25ff0:	rsbs	r2, r2, #0
   25ff4:	sbc	r3, r3, r3, lsl #1
   25ff8:	bl	26048 <__assert_fail@plt+0x14af0>
   25ffc:	ldr	lr, [sp, #4]
   26000:	add	sp, sp, #8
   26004:	pop	{r2, r3}
   26008:	rsbs	r0, r0, #0
   2600c:	sbc	r1, r1, r1, lsl #1
   26010:	bx	lr
   26014:	rsbs	r2, r2, #0
   26018:	sbc	r3, r3, r3, lsl #1
   2601c:	bl	26048 <__assert_fail@plt+0x14af0>
   26020:	ldr	lr, [sp, #4]
   26024:	add	sp, sp, #8
   26028:	pop	{r2, r3}
   2602c:	rsbs	r2, r2, #0
   26030:	sbc	r3, r3, r3, lsl #1
   26034:	bx	lr
   26038:	push	{r1, lr}
   2603c:	mov	r0, #8
   26040:	bl	111d4 <raise@plt>
   26044:	pop	{r1, pc}
   26048:	cmp	r1, r3
   2604c:	cmpeq	r0, r2
   26050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26054:	mov	r4, r0
   26058:	movcc	r0, #0
   2605c:	mov	r5, r1
   26060:	ldr	lr, [sp, #36]	; 0x24
   26064:	movcc	r1, r0
   26068:	bcc	26164 <__assert_fail@plt+0x14c0c>
   2606c:	cmp	r3, #0
   26070:	clzeq	ip, r2
   26074:	clzne	ip, r3
   26078:	addeq	ip, ip, #32
   2607c:	cmp	r5, #0
   26080:	clzeq	r1, r4
   26084:	addeq	r1, r1, #32
   26088:	clzne	r1, r5
   2608c:	sub	ip, ip, r1
   26090:	sub	sl, ip, #32
   26094:	lsl	r9, r3, ip
   26098:	rsb	fp, ip, #32
   2609c:	orr	r9, r9, r2, lsl sl
   260a0:	orr	r9, r9, r2, lsr fp
   260a4:	lsl	r8, r2, ip
   260a8:	cmp	r5, r9
   260ac:	cmpeq	r4, r8
   260b0:	movcc	r0, #0
   260b4:	movcc	r1, r0
   260b8:	bcc	260d4 <__assert_fail@plt+0x14b7c>
   260bc:	mov	r0, #1
   260c0:	subs	r4, r4, r8
   260c4:	lsl	r1, r0, sl
   260c8:	orr	r1, r1, r0, lsr fp
   260cc:	lsl	r0, r0, ip
   260d0:	sbc	r5, r5, r9
   260d4:	cmp	ip, #0
   260d8:	beq	26164 <__assert_fail@plt+0x14c0c>
   260dc:	lsr	r6, r8, #1
   260e0:	orr	r6, r6, r9, lsl #31
   260e4:	lsr	r7, r9, #1
   260e8:	mov	r2, ip
   260ec:	b	26110 <__assert_fail@plt+0x14bb8>
   260f0:	subs	r3, r4, r6
   260f4:	sbc	r8, r5, r7
   260f8:	adds	r3, r3, r3
   260fc:	adc	r8, r8, r8
   26100:	adds	r4, r3, #1
   26104:	adc	r5, r8, #0
   26108:	subs	r2, r2, #1
   2610c:	beq	2612c <__assert_fail@plt+0x14bd4>
   26110:	cmp	r5, r7
   26114:	cmpeq	r4, r6
   26118:	bcs	260f0 <__assert_fail@plt+0x14b98>
   2611c:	adds	r4, r4, r4
   26120:	adc	r5, r5, r5
   26124:	subs	r2, r2, #1
   26128:	bne	26110 <__assert_fail@plt+0x14bb8>
   2612c:	lsr	r3, r4, ip
   26130:	orr	r3, r3, r5, lsl fp
   26134:	lsr	r2, r5, ip
   26138:	orr	r3, r3, r5, lsr sl
   2613c:	adds	r0, r0, r4
   26140:	mov	r4, r3
   26144:	lsl	r3, r2, ip
   26148:	orr	r3, r3, r4, lsl sl
   2614c:	lsl	ip, r4, ip
   26150:	orr	r3, r3, r4, lsr fp
   26154:	adc	r1, r1, r5
   26158:	subs	r0, r0, ip
   2615c:	mov	r5, r2
   26160:	sbc	r1, r1, r3
   26164:	cmp	lr, #0
   26168:	strdne	r4, [lr]
   2616c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26174:	mov	r7, r0
   26178:	ldr	r6, [pc, #72]	; 261c8 <__assert_fail@plt+0x14c70>
   2617c:	ldr	r5, [pc, #72]	; 261cc <__assert_fail@plt+0x14c74>
   26180:	add	r6, pc, r6
   26184:	add	r5, pc, r5
   26188:	sub	r6, r6, r5
   2618c:	mov	r8, r1
   26190:	mov	r9, r2
   26194:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   26198:	asrs	r6, r6, #2
   2619c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   261a0:	mov	r4, #0
   261a4:	add	r4, r4, #1
   261a8:	ldr	r3, [r5], #4
   261ac:	mov	r2, r9
   261b0:	mov	r1, r8
   261b4:	mov	r0, r7
   261b8:	blx	r3
   261bc:	cmp	r6, r4
   261c0:	bne	261a4 <__assert_fail@plt+0x14c4c>
   261c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   261c8:	andeq	r1, r1, ip, lsl #27
   261cc:	andeq	r1, r1, r4, lsl #27
   261d0:	bx	lr
   261d4:	ldr	r3, [pc, #12]	; 261e8 <__assert_fail@plt+0x14c90>
   261d8:	mov	r1, #0
   261dc:	add	r3, pc, r3
   261e0:	ldr	r2, [r3]
   261e4:	b	11450 <__cxa_atexit@plt>
   261e8:	andeq	r1, r1, r4, ror pc

Disassembly of section .fini:

000261ec <.fini>:
   261ec:	push	{r3, lr}
   261f0:	pop	{r3, pc}
