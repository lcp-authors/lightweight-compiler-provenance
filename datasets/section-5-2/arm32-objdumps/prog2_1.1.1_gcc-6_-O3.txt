
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	108ec <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <fopen@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__libc_start_main@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <__ctype_tolower_loc@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__gmon_start__@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <memset@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

000106bc <fclose@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2404]!	; 0x964

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2396]!	; 0x95c

000106d4 <getc@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2388]!	; 0x954

Disassembly of section .text:

000106e0 <main@@Base>:
   106e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106e4:	vpush	{d8}
   106e8:	ldr	r1, [pc, #424]	; 10898 <main@@Base+0x1b8>
   106ec:	ldr	r0, [pc, #424]	; 1089c <main@@Base+0x1bc>
   106f0:	ldr	r6, [pc, #424]	; 108a0 <main@@Base+0x1c0>
   106f4:	sub	sp, sp, #180	; 0xb4
   106f8:	bl	10674 <fopen@plt>
   106fc:	mov	r2, #104	; 0x68
   10700:	mov	r1, #0
   10704:	mov	r4, #0
   10708:	mov	r9, #101	; 0x65
   1070c:	mov	sl, #105	; 0x69
   10710:	mov	r5, r0
   10714:	add	r0, sp, #72	; 0x48
   10718:	bl	106b0 <memset@plt>
   1071c:	mov	r7, #111	; 0x6f
   10720:	mov	r8, #99	; 0x63
   10724:	b	107bc <main@@Base+0xdc>
   10728:	bic	r3, r0, #32
   1072c:	sub	r2, r3, #192	; 0xc0
   10730:	cmp	r2, #3
   10734:	mov	fp, r0
   10738:	bls	10848 <main@@Base+0x168>
   1073c:	ldr	r1, [sp, #72]	; 0x48
   10740:	cmp	r0, r1
   10744:	beq	10848 <main@@Base+0x168>
   10748:	sub	r1, r3, #201	; 0xc9
   1074c:	cmp	r1, #1
   10750:	bls	1086c <main@@Base+0x18c>
   10754:	ldr	r1, [sp, #16]
   10758:	cmp	r0, r1
   1075c:	beq	1086c <main@@Base+0x18c>
   10760:	cmp	r3, #205	; 0xcd
   10764:	beq	10874 <main@@Base+0x194>
   10768:	cmp	r0, #0
   1076c:	beq	10874 <main@@Base+0x194>
   10770:	sub	r1, r3, #211	; 0xd3
   10774:	cmp	r1, #2
   10778:	bls	1087c <main@@Base+0x19c>
   1077c:	ldr	r1, [sp, #40]	; 0x28
   10780:	cmp	r0, r1
   10784:	beq	1087c <main@@Base+0x19c>
   10788:	cmp	r3, #218	; 0xda
   1078c:	beq	10884 <main@@Base+0x1a4>
   10790:	cmp	r3, #199	; 0xc7
   10794:	beq	1088c <main@@Base+0x1ac>
   10798:	add	r3, r0, #128	; 0x80
   1079c:	cmp	r3, r6
   107a0:	bhi	107b0 <main@@Base+0xd0>
   107a4:	bl	10698 <__ctype_tolower_loc@plt>
   107a8:	ldr	r3, [r0]
   107ac:	ldr	r0, [r3, fp, lsl #2]
   107b0:	sub	r0, r0, #97	; 0x61
   107b4:	cmp	r0, #25
   107b8:	bls	10850 <main@@Base+0x170>
   107bc:	mov	r0, r5
   107c0:	bl	106d4 <getc@plt>
   107c4:	cmn	r0, #1
   107c8:	bne	10728 <main@@Base+0x48>
   107cc:	mov	r0, r5
   107d0:	bl	106bc <fclose@plt>
   107d4:	ldr	r0, [pc, #200]	; 108a4 <main@@Base+0x1c4>
   107d8:	bl	10680 <puts@plt>
   107dc:	mov	r1, r4
   107e0:	ldr	r0, [pc, #192]	; 108a8 <main@@Base+0x1c8>
   107e4:	bl	10668 <printf@plt>
   107e8:	vmov	s15, r4
   107ec:	vldr	s17, [pc, #160]	; 10894 <main@@Base+0x1b4>
   107f0:	ldr	r7, [pc, #180]	; 108ac <main@@Base+0x1cc>
   107f4:	add	r5, sp, #68	; 0x44
   107f8:	vcvt.f32.s32	s16, s15
   107fc:	add	r6, sp, #172	; 0xac
   10800:	mov	r4, #97	; 0x61
   10804:	ldr	r3, [r5, #4]!
   10808:	mov	r1, r4
   1080c:	mov	r0, r7
   10810:	vmov	s14, r3
   10814:	add	r4, r4, #1
   10818:	vcvt.f32.s32	s14, s14
   1081c:	vdiv.f32	s15, s14, s16
   10820:	vmul.f32	s15, s15, s17
   10824:	vcvt.f64.f32	d7, s15
   10828:	vmov	r2, r3, d7
   1082c:	bl	10668 <printf@plt>
   10830:	cmp	r6, r5
   10834:	bne	10804 <main@@Base+0x124>
   10838:	mov	r0, #0
   1083c:	add	sp, sp, #180	; 0xb4
   10840:	vpop	{d8}
   10844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10848:	mov	fp, #97	; 0x61
   1084c:	b	107a4 <main@@Base+0xc4>
   10850:	add	r3, sp, #176	; 0xb0
   10854:	add	r0, r3, r0, lsl #2
   10858:	add	r4, r4, #1
   1085c:	ldr	r3, [r0, #-104]	; 0xffffff98
   10860:	add	r3, r3, #1
   10864:	str	r3, [r0, #-104]	; 0xffffff98
   10868:	b	1071c <main@@Base+0x3c>
   1086c:	mov	fp, r9
   10870:	b	107a4 <main@@Base+0xc4>
   10874:	mov	fp, sl
   10878:	b	107a4 <main@@Base+0xc4>
   1087c:	mov	fp, r7
   10880:	b	107a4 <main@@Base+0xc4>
   10884:	mov	fp, #117	; 0x75
   10888:	b	107a4 <main@@Base+0xc4>
   1088c:	mov	fp, r8
   10890:	b	107a4 <main@@Base+0xc4>
   10894:	sbcmi	r0, r8, #0
   10898:	andeq	r0, r1, ip, lsl #21
   1089c:	muleq	r1, r0, sl
   108a0:	andeq	r0, r0, pc, ror r1
   108a4:	ldrdeq	r0, [r1], -ip
   108a8:	andeq	r0, r1, r8, lsr #21
   108ac:	andeq	r0, r1, r8, asr #21

000108b0 <_start@@Base>:
   108b0:	mov	fp, #0
   108b4:	mov	lr, #0
   108b8:	pop	{r1}		; (ldr r1, [sp], #4)
   108bc:	mov	r2, sp
   108c0:	push	{r2}		; (str r2, [sp, #-4]!)
   108c4:	push	{r0}		; (str r0, [sp, #-4]!)
   108c8:	ldr	ip, [pc, #16]	; 108e0 <_start@@Base+0x30>
   108cc:	push	{ip}		; (str ip, [sp, #-4]!)
   108d0:	ldr	r0, [pc, #12]	; 108e4 <_start@@Base+0x34>
   108d4:	ldr	r3, [pc, #12]	; 108e8 <_start@@Base+0x38>
   108d8:	bl	1068c <__libc_start_main@plt>
   108dc:	bl	106c8 <abort@plt>
   108e0:	andeq	r0, r1, ip, ror sl
   108e4:	andeq	r0, r1, r0, ror #13
   108e8:	andeq	r0, r1, ip, lsl sl
   108ec:	ldr	r3, [pc, #20]	; 10908 <_start@@Base+0x58>
   108f0:	ldr	r2, [pc, #20]	; 1090c <_start@@Base+0x5c>
   108f4:	add	r3, pc, r3
   108f8:	ldr	r2, [r3, r2]
   108fc:	cmp	r2, #0
   10900:	bxeq	lr
   10904:	b	106a4 <__gmon_start__@plt>
   10908:	andeq	r0, r1, r4, lsl #14
   1090c:	andeq	r0, r0, r4, lsr r0
   10910:	ldr	r3, [pc, #28]	; 10934 <_start@@Base+0x84>
   10914:	ldr	r0, [pc, #28]	; 10938 <_start@@Base+0x88>
   10918:	sub	r3, r3, r0
   1091c:	cmp	r3, #6
   10920:	bxls	lr
   10924:	ldr	r3, [pc, #16]	; 1093c <_start@@Base+0x8c>
   10928:	cmp	r3, #0
   1092c:	bxeq	lr
   10930:	bx	r3
   10934:	andeq	r1, r2, r3, asr #32
   10938:	andeq	r1, r2, r0, asr #32
   1093c:	andeq	r0, r0, r0
   10940:	ldr	r1, [pc, #36]	; 1096c <_start@@Base+0xbc>
   10944:	ldr	r0, [pc, #36]	; 10970 <_start@@Base+0xc0>
   10948:	sub	r1, r1, r0
   1094c:	asr	r1, r1, #2
   10950:	add	r1, r1, r1, lsr #31
   10954:	asrs	r1, r1, #1
   10958:	bxeq	lr
   1095c:	ldr	r3, [pc, #16]	; 10974 <_start@@Base+0xc4>
   10960:	cmp	r3, #0
   10964:	bxeq	lr
   10968:	bx	r3
   1096c:	andeq	r1, r2, r0, asr #32
   10970:	andeq	r1, r2, r0, asr #32
   10974:	andeq	r0, r0, r0
   10978:	push	{r4, lr}
   1097c:	ldr	r4, [pc, #24]	; 1099c <_start@@Base+0xec>
   10980:	ldrb	r3, [r4]
   10984:	cmp	r3, #0
   10988:	popne	{r4, pc}
   1098c:	bl	10910 <_start@@Base+0x60>
   10990:	mov	r3, #1
   10994:	strb	r3, [r4]
   10998:	pop	{r4, pc}
   1099c:	andeq	r1, r2, r0, asr #32
   109a0:	ldr	r0, [pc, #40]	; 109d0 <_start@@Base+0x120>
   109a4:	ldr	r3, [r0]
   109a8:	cmp	r3, #0
   109ac:	bne	109b4 <_start@@Base+0x104>
   109b0:	b	10940 <_start@@Base+0x90>
   109b4:	ldr	r3, [pc, #24]	; 109d4 <_start@@Base+0x124>
   109b8:	cmp	r3, #0
   109bc:	beq	109b0 <_start@@Base+0x100>
   109c0:	push	{r4, lr}
   109c4:	blx	r3
   109c8:	pop	{r4, lr}
   109cc:	b	10940 <_start@@Base+0x90>
   109d0:	andeq	r0, r2, r4, lsl pc
   109d4:	andeq	r0, r0, r0

000109d8 <in_array@@Base>:
   109d8:	cmp	r2, #0
   109dc:	blt	10a0c <in_array@@Base+0x34>
   109e0:	ldr	r3, [r1]
   109e4:	cmp	r0, r3
   109e8:	beq	10a14 <in_array@@Base+0x3c>
   109ec:	mov	r3, #0
   109f0:	b	10a00 <in_array@@Base+0x28>
   109f4:	ldr	ip, [r1, #4]!
   109f8:	cmp	ip, r0
   109fc:	beq	10a14 <in_array@@Base+0x3c>
   10a00:	add	r3, r3, #1
   10a04:	cmp	r2, r3
   10a08:	bge	109f4 <in_array@@Base+0x1c>
   10a0c:	mov	r0, #0
   10a10:	bx	lr
   10a14:	mov	r0, #1
   10a18:	bx	lr

00010a1c <__libc_csu_init@@Base>:
   10a1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a20:	mov	r7, r0
   10a24:	ldr	r6, [pc, #72]	; 10a74 <__libc_csu_init@@Base+0x58>
   10a28:	ldr	r5, [pc, #72]	; 10a78 <__libc_csu_init@@Base+0x5c>
   10a2c:	add	r6, pc, r6
   10a30:	add	r5, pc, r5
   10a34:	sub	r6, r6, r5
   10a38:	mov	r8, r1
   10a3c:	mov	r9, r2
   10a40:	bl	10648 <printf@plt-0x20>
   10a44:	asrs	r6, r6, #2
   10a48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a4c:	mov	r4, #0
   10a50:	add	r4, r4, #1
   10a54:	ldr	r3, [r5], #4
   10a58:	mov	r2, r9
   10a5c:	mov	r1, r8
   10a60:	mov	r0, r7
   10a64:	blx	r3
   10a68:	cmp	r6, r4
   10a6c:	bne	10a50 <__libc_csu_init@@Base+0x34>
   10a70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a74:	ldrdeq	r0, [r1], -ip
   10a78:	ldrdeq	r0, [r1], -r4

00010a7c <__libc_csu_fini@@Base>:
   10a7c:	bx	lr

Disassembly of section .fini:

00010a80 <.fini>:
   10a80:	push	{r3, lr}
   10a84:	pop	{r3, pc}
