
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

0001108c <.init>:
   1108c:	push	{r3, lr}
   11090:	bl	113c4 <__assert_fail@plt+0x48>
   11094:	pop	{r3, pc}

Disassembly of section .plt:

00011098 <fdopen@plt-0x14>:
   11098:	push	{lr}		; (str lr, [sp, #-4]!)
   1109c:	ldr	lr, [pc, #4]	; 110a8 <fdopen@plt-0x4>
   110a0:	add	lr, pc, lr
   110a4:	ldr	pc, [lr, #8]!
   110a8:	andeq	ip, r1, r8, asr pc

000110ac <fdopen@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #28, 20	; 0x1c000
   110b4:	ldr	pc, [ip, #3928]!	; 0xf58

000110b8 <calloc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #28, 20	; 0x1c000
   110c0:	ldr	pc, [ip, #3920]!	; 0xf50

000110c4 <fputs_unlocked@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #28, 20	; 0x1c000
   110cc:	ldr	pc, [ip, #3912]!	; 0xf48

000110d0 <raise@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #28, 20	; 0x1c000
   110d8:	ldr	pc, [ip, #3904]!	; 0xf40

000110dc <strcmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #28, 20	; 0x1c000
   110e4:	ldr	pc, [ip, #3896]!	; 0xf38

000110e8 <posix_fadvise64@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #28, 20	; 0x1c000
   110f0:	ldr	pc, [ip, #3888]!	; 0xf30

000110f4 <fflush@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #28, 20	; 0x1c000
   110fc:	ldr	pc, [ip, #3880]!	; 0xf28

00011100 <free@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #28, 20	; 0x1c000
   11108:	ldr	pc, [ip, #3872]!	; 0xf20

0001110c <ferror@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #28, 20	; 0x1c000
   11114:	ldr	pc, [ip, #3864]!	; 0xf18

00011118 <_exit@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #28, 20	; 0x1c000
   11120:	ldr	pc, [ip, #3856]!	; 0xf10

00011124 <memcpy@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #28, 20	; 0x1c000
   1112c:	ldr	pc, [ip, #3848]!	; 0xf08

00011130 <mbsinit@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #28, 20	; 0x1c000
   11138:	ldr	pc, [ip, #3840]!	; 0xf00

0001113c <memcmp@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #28, 20	; 0x1c000
   11144:	ldr	pc, [ip, #3832]!	; 0xef8

00011148 <dcgettext@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #28, 20	; 0x1c000
   11150:	ldr	pc, [ip, #3824]!	; 0xef0

00011154 <realloc@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #28, 20	; 0x1c000
   1115c:	ldr	pc, [ip, #3816]!	; 0xee8

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #28, 20	; 0x1c000
   11168:	ldr	pc, [ip, #3808]!	; 0xee0

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #28, 20	; 0x1c000
   11174:	ldr	pc, [ip, #3800]!	; 0xed8

00011178 <fwrite@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #28, 20	; 0x1c000
   11180:	ldr	pc, [ip, #3792]!	; 0xed0

00011184 <lseek64@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #28, 20	; 0x1c000
   1118c:	ldr	pc, [ip, #3784]!	; 0xec8

00011190 <__ctype_get_mb_cur_max@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #28, 20	; 0x1c000
   11198:	ldr	pc, [ip, #3776]!	; 0xec0

0001119c <fread@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #28, 20	; 0x1c000
   111a4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #28, 20	; 0x1c000
   111b0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111b4 <ferror_unlocked@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #28, 20	; 0x1c000
   111bc:	ldr	pc, [ip, #3752]!	; 0xea8

000111c0 <mbrtowc@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #28, 20	; 0x1c000
   111c8:	ldr	pc, [ip, #3744]!	; 0xea0

000111cc <error@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #28, 20	; 0x1c000
   111d4:	ldr	pc, [ip, #3736]!	; 0xe98

000111d8 <malloc@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #28, 20	; 0x1c000
   111e0:	ldr	pc, [ip, #3728]!	; 0xe90

000111e4 <__libc_start_main@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #28, 20	; 0x1c000
   111ec:	ldr	pc, [ip, #3720]!	; 0xe88

000111f0 <__freading@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #28, 20	; 0x1c000
   111f8:	ldr	pc, [ip, #3712]!	; 0xe80

000111fc <__ctype_tolower_loc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #28, 20	; 0x1c000
   11204:	ldr	pc, [ip, #3704]!	; 0xe78

00011208 <__gmon_start__@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #28, 20	; 0x1c000
   11210:	ldr	pc, [ip, #3696]!	; 0xe70

00011214 <getopt_long@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #28, 20	; 0x1c000
   1121c:	ldr	pc, [ip, #3688]!	; 0xe68

00011220 <__ctype_b_loc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #28, 20	; 0x1c000
   11228:	ldr	pc, [ip, #3680]!	; 0xe60

0001122c <exit@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #28, 20	; 0x1c000
   11234:	ldr	pc, [ip, #3672]!	; 0xe58

00011238 <feof@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #28, 20	; 0x1c000
   11240:	ldr	pc, [ip, #3664]!	; 0xe50

00011244 <strlen@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #28, 20	; 0x1c000
   1124c:	ldr	pc, [ip, #3656]!	; 0xe48

00011250 <strchr@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #28, 20	; 0x1c000
   11258:	ldr	pc, [ip, #3648]!	; 0xe40

0001125c <__errno_location@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #28, 20	; 0x1c000
   11264:	ldr	pc, [ip, #3640]!	; 0xe38

00011268 <__cxa_atexit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #28, 20	; 0x1c000
   11270:	ldr	pc, [ip, #3632]!	; 0xe30

00011274 <setvbuf@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #28, 20	; 0x1c000
   1127c:	ldr	pc, [ip, #3624]!	; 0xe28

00011280 <memset@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #28, 20	; 0x1c000
   11288:	ldr	pc, [ip, #3616]!	; 0xe20

0001128c <__printf_chk@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #28, 20	; 0x1c000
   11294:	ldr	pc, [ip, #3608]!	; 0xe18

00011298 <fileno@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #28, 20	; 0x1c000
   112a0:	ldr	pc, [ip, #3600]!	; 0xe10

000112a4 <strtoumax@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #28, 20	; 0x1c000
   112ac:	ldr	pc, [ip, #3592]!	; 0xe08

000112b0 <__fprintf_chk@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #28, 20	; 0x1c000
   112b8:	ldr	pc, [ip, #3584]!	; 0xe00

000112bc <fclose@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #28, 20	; 0x1c000
   112c4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c8 <fseeko64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #28, 20	; 0x1c000
   112d0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112d4 <fcntl64@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #28, 20	; 0x1c000
   112dc:	ldr	pc, [ip, #3560]!	; 0xde8

000112e0 <setlocale@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #28, 20	; 0x1c000
   112e8:	ldr	pc, [ip, #3552]!	; 0xde0

000112ec <strrchr@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #28, 20	; 0x1c000
   112f4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f8 <nl_langinfo@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #28, 20	; 0x1c000
   11300:	ldr	pc, [ip, #3536]!	; 0xdd0

00011304 <clearerr_unlocked@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #28, 20	; 0x1c000
   1130c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011310 <fopen64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #28, 20	; 0x1c000
   11318:	ldr	pc, [ip, #3520]!	; 0xdc0

0001131c <bindtextdomain@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #28, 20	; 0x1c000
   11324:	ldr	pc, [ip, #3512]!	; 0xdb8

00011328 <getline@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #28, 20	; 0x1c000
   11330:	ldr	pc, [ip, #3504]!	; 0xdb0

00011334 <strncmp@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #28, 20	; 0x1c000
   1133c:	ldr	pc, [ip, #3496]!	; 0xda8

00011340 <abort@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #28, 20	; 0x1c000
   11348:	ldr	pc, [ip, #3488]!	; 0xda0

0001134c <feof_unlocked@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #28, 20	; 0x1c000
   11354:	ldr	pc, [ip, #3480]!	; 0xd98

00011358 <close@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #28, 20	; 0x1c000
   11360:	ldr	pc, [ip, #3472]!	; 0xd90

00011364 <dcngettext@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #28, 20	; 0x1c000
   1136c:	ldr	pc, [ip, #3464]!	; 0xd88

00011370 <putchar_unlocked@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #28, 20	; 0x1c000
   11378:	ldr	pc, [ip, #3456]!	; 0xd80

0001137c <__assert_fail@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #28, 20	; 0x1c000
   11384:	ldr	pc, [ip, #3448]!	; 0xd78

Disassembly of section .text:

00011388 <.text>:
   11388:	mov	fp, #0
   1138c:	mov	lr, #0
   11390:	pop	{r1}		; (ldr r1, [sp], #4)
   11394:	mov	r2, sp
   11398:	push	{r2}		; (str r2, [sp, #-4]!)
   1139c:	push	{r0}		; (str r0, [sp, #-4]!)
   113a0:	ldr	ip, [pc, #16]	; 113b8 <__assert_fail@plt+0x3c>
   113a4:	push	{ip}		; (str ip, [sp, #-4]!)
   113a8:	ldr	r0, [pc, #12]	; 113bc <__assert_fail@plt+0x40>
   113ac:	ldr	r3, [pc, #12]	; 113c0 <__assert_fail@plt+0x44>
   113b0:	bl	111e4 <__libc_start_main@plt>
   113b4:	bl	11340 <abort@plt>
   113b8:	andeq	ip, r1, r4, lsl #14
   113bc:	andeq	r1, r1, r8, ror #16
   113c0:	andeq	ip, r1, r4, lsr #13
   113c4:	ldr	r3, [pc, #20]	; 113e0 <__assert_fail@plt+0x64>
   113c8:	ldr	r2, [pc, #20]	; 113e4 <__assert_fail@plt+0x68>
   113cc:	add	r3, pc, r3
   113d0:	ldr	r2, [r3, r2]
   113d4:	cmp	r2, #0
   113d8:	bxeq	lr
   113dc:	b	11208 <__gmon_start__@plt>
   113e0:	andeq	ip, r1, ip, lsr #24
   113e4:	andeq	r0, r0, r0, lsl #2
   113e8:	ldr	r0, [pc, #24]	; 11408 <__assert_fail@plt+0x8c>
   113ec:	ldr	r3, [pc, #24]	; 1140c <__assert_fail@plt+0x90>
   113f0:	cmp	r3, r0
   113f4:	bxeq	lr
   113f8:	ldr	r3, [pc, #16]	; 11410 <__assert_fail@plt+0x94>
   113fc:	cmp	r3, #0
   11400:	bxeq	lr
   11404:	bx	r3
   11408:	andeq	lr, r2, r0, ror #2
   1140c:	andeq	lr, r2, r0, ror #2
   11410:	andeq	r0, r0, r0
   11414:	ldr	r0, [pc, #36]	; 11440 <__assert_fail@plt+0xc4>
   11418:	ldr	r1, [pc, #36]	; 11444 <__assert_fail@plt+0xc8>
   1141c:	sub	r1, r1, r0
   11420:	asr	r1, r1, #2
   11424:	add	r1, r1, r1, lsr #31
   11428:	asrs	r1, r1, #1
   1142c:	bxeq	lr
   11430:	ldr	r3, [pc, #16]	; 11448 <__assert_fail@plt+0xcc>
   11434:	cmp	r3, #0
   11438:	bxeq	lr
   1143c:	bx	r3
   11440:	andeq	lr, r2, r0, ror #2
   11444:	andeq	lr, r2, r0, ror #2
   11448:	andeq	r0, r0, r0
   1144c:	push	{r4, lr}
   11450:	ldr	r4, [pc, #24]	; 11470 <__assert_fail@plt+0xf4>
   11454:	ldrb	r3, [r4]
   11458:	cmp	r3, #0
   1145c:	popne	{r4, pc}
   11460:	bl	113e8 <__assert_fail@plt+0x6c>
   11464:	mov	r3, #1
   11468:	strb	r3, [r4]
   1146c:	pop	{r4, pc}
   11470:	andeq	lr, r2, r4, lsl #3
   11474:	b	11414 <__assert_fail@plt+0x98>
   11478:	push	{fp, lr}
   1147c:	mov	fp, sp
   11480:	mov	r4, r0
   11484:	cmp	r0, #0
   11488:	bne	11640 <__assert_fail@plt+0x2c4>
   1148c:	movw	r1, #51027	; 0xc753
   11490:	movt	r1, #1
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	bl	11148 <dcgettext@plt>
   114a0:	mov	r1, r0
   114a4:	movw	r0, #57772	; 0xe1ac
   114a8:	movt	r0, #2
   114ac:	ldr	r2, [r0]
   114b0:	mov	r0, #1
   114b4:	bl	1128c <__printf_chk@plt>
   114b8:	movw	r1, #51060	; 0xc774
   114bc:	movt	r1, #1
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	bl	11148 <dcgettext@plt>
   114cc:	mov	r1, r0
   114d0:	movw	r2, #51099	; 0xc79b
   114d4:	movt	r2, #1
   114d8:	mov	r0, #1
   114dc:	mov	r3, #512	; 0x200
   114e0:	bl	1128c <__printf_chk@plt>
   114e4:	bl	11684 <__assert_fail@plt+0x308>
   114e8:	bl	116b4 <__assert_fail@plt+0x338>
   114ec:	movw	r1, #51107	; 0xc7a3
   114f0:	movt	r1, #1
   114f4:	mov	r0, #0
   114f8:	mov	r2, #5
   114fc:	bl	11148 <dcgettext@plt>
   11500:	movw	r5, #57724	; 0xe17c
   11504:	movt	r5, #2
   11508:	ldr	r1, [r5]
   1150c:	bl	110c4 <fputs_unlocked@plt>
   11510:	movw	r1, #51152	; 0xc7d0
   11514:	movt	r1, #1
   11518:	mov	r0, #0
   1151c:	mov	r2, #5
   11520:	bl	11148 <dcgettext@plt>
   11524:	ldr	r1, [r5]
   11528:	bl	110c4 <fputs_unlocked@plt>
   1152c:	movw	r1, #51222	; 0xc816
   11530:	movt	r1, #1
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	bl	11148 <dcgettext@plt>
   11540:	ldr	r1, [r5]
   11544:	bl	110c4 <fputs_unlocked@plt>
   11548:	movw	r1, #51373	; 0xc8ad
   1154c:	movt	r1, #1
   11550:	mov	r0, #0
   11554:	mov	r2, #5
   11558:	bl	11148 <dcgettext@plt>
   1155c:	ldr	r1, [r5]
   11560:	bl	110c4 <fputs_unlocked@plt>
   11564:	movw	r1, #51426	; 0xc8e2
   11568:	movt	r1, #1
   1156c:	mov	r0, #0
   11570:	mov	r2, #5
   11574:	bl	11148 <dcgettext@plt>
   11578:	ldr	r1, [r5]
   1157c:	bl	110c4 <fputs_unlocked@plt>
   11580:	movw	r1, #51479	; 0xc917
   11584:	movt	r1, #1
   11588:	mov	r0, #0
   1158c:	mov	r2, #5
   11590:	bl	11148 <dcgettext@plt>
   11594:	ldr	r1, [r5]
   11598:	bl	110c4 <fputs_unlocked@plt>
   1159c:	movw	r1, #51605	; 0xc995
   115a0:	movt	r1, #1
   115a4:	mov	r0, #0
   115a8:	mov	r2, #5
   115ac:	bl	11148 <dcgettext@plt>
   115b0:	ldr	r1, [r5]
   115b4:	bl	110c4 <fputs_unlocked@plt>
   115b8:	movw	r1, #52044	; 0xcb4c
   115bc:	movt	r1, #1
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	bl	11148 <dcgettext@plt>
   115cc:	ldr	r1, [r5]
   115d0:	bl	110c4 <fputs_unlocked@plt>
   115d4:	movw	r1, #52089	; 0xcb79
   115d8:	movt	r1, #1
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	bl	11148 <dcgettext@plt>
   115e8:	ldr	r1, [r5]
   115ec:	bl	110c4 <fputs_unlocked@plt>
   115f0:	movw	r1, #52143	; 0xcbaf
   115f4:	movt	r1, #1
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	bl	11148 <dcgettext@plt>
   11604:	mov	r1, r0
   11608:	movw	r2, #52187	; 0xcbdb
   1160c:	movt	r2, #1
   11610:	mov	r0, #1
   11614:	bl	1128c <__printf_chk@plt>
   11618:	movw	r1, #52196	; 0xcbe4
   1161c:	movt	r1, #1
   11620:	mov	r0, #0
   11624:	mov	r2, #5
   11628:	bl	11148 <dcgettext@plt>
   1162c:	ldr	r1, [r5]
   11630:	bl	110c4 <fputs_unlocked@plt>
   11634:	bl	116e4 <__assert_fail@plt+0x368>
   11638:	mov	r0, r4
   1163c:	bl	1122c <exit@plt>
   11640:	movw	r0, #57712	; 0xe170
   11644:	movt	r0, #2
   11648:	ldr	r5, [r0]
   1164c:	movw	r1, #50988	; 0xc72c
   11650:	movt	r1, #1
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	bl	11148 <dcgettext@plt>
   11660:	mov	r2, r0
   11664:	movw	r0, #57772	; 0xe1ac
   11668:	movt	r0, #2
   1166c:	ldr	r3, [r0]
   11670:	mov	r0, r5
   11674:	mov	r1, #1
   11678:	bl	112b0 <__fprintf_chk@plt>
   1167c:	mov	r0, r4
   11680:	bl	1122c <exit@plt>
   11684:	push	{fp, lr}
   11688:	mov	fp, sp
   1168c:	movw	r1, #53277	; 0xd01d
   11690:	movt	r1, #1
   11694:	mov	r0, #0
   11698:	mov	r2, #5
   1169c:	bl	11148 <dcgettext@plt>
   116a0:	movw	r1, #57724	; 0xe17c
   116a4:	movt	r1, #2
   116a8:	ldr	r1, [r1]
   116ac:	pop	{fp, lr}
   116b0:	b	110c4 <fputs_unlocked@plt>
   116b4:	push	{fp, lr}
   116b8:	mov	fp, sp
   116bc:	movw	r1, #53333	; 0xd055
   116c0:	movt	r1, #1
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	bl	11148 <dcgettext@plt>
   116d0:	movw	r1, #57724	; 0xe17c
   116d4:	movt	r1, #2
   116d8:	ldr	r1, [r1]
   116dc:	pop	{fp, lr}
   116e0:	b	110c4 <fputs_unlocked@plt>
   116e4:	push	{r4, r5, fp, lr}
   116e8:	add	fp, sp, #8
   116ec:	sub	sp, sp, #56	; 0x38
   116f0:	movw	r0, #54520	; 0xd4f8
   116f4:	movt	r0, #1
   116f8:	add	r1, r0, #32
   116fc:	mov	r5, sp
   11700:	mov	r2, #48	; 0x30
   11704:	vld1.64	{d16-d17}, [r1]
   11708:	add	r1, r5, #32
   1170c:	add	r3, r0, #16
   11710:	vld1.64	{d18-d19}, [r0], r2
   11714:	vld1.64	{d20-d21}, [r3]
   11718:	vldr	d22, [r0]
   1171c:	vst1.64	{d16-d17}, [r1]
   11720:	add	r0, r5, #16
   11724:	vst1.64	{d20-d21}, [r0]
   11728:	mov	r0, r5
   1172c:	vst1.64	{d18-d19}, [r0], r2
   11730:	vstr	d22, [r0]
   11734:	ldr	r1, [sp]
   11738:	cmp	r1, #0
   1173c:	beq	11764 <__assert_fail@plt+0x3e8>
   11740:	mov	r5, sp
   11744:	movw	r4, #52529	; 0xcd31
   11748:	movt	r4, #1
   1174c:	mov	r0, r4
   11750:	bl	110dc <strcmp@plt>
   11754:	cmp	r0, #0
   11758:	ldrne	r1, [r5, #8]!
   1175c:	cmpne	r1, #0
   11760:	bne	1174c <__assert_fail@plt+0x3d0>
   11764:	ldr	r4, [r5, #4]
   11768:	movw	r1, #53503	; 0xd0ff
   1176c:	movt	r1, #1
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	bl	11148 <dcgettext@plt>
   1177c:	mov	r1, r0
   11780:	movw	r2, #52631	; 0xcd97
   11784:	movt	r2, #1
   11788:	movw	r3, #53526	; 0xd116
   1178c:	movt	r3, #1
   11790:	mov	r0, #1
   11794:	bl	1128c <__printf_chk@plt>
   11798:	movw	r5, #52529	; 0xcd31
   1179c:	movt	r5, #1
   117a0:	cmp	r4, #0
   117a4:	moveq	r4, r5
   117a8:	mov	r0, #5
   117ac:	mov	r1, #0
   117b0:	bl	112e0 <setlocale@plt>
   117b4:	cmp	r0, #0
   117b8:	beq	117f8 <__assert_fail@plt+0x47c>
   117bc:	movw	r1, #53566	; 0xd13e
   117c0:	movt	r1, #1
   117c4:	mov	r2, #3
   117c8:	bl	11334 <strncmp@plt>
   117cc:	cmp	r0, #0
   117d0:	beq	117f8 <__assert_fail@plt+0x47c>
   117d4:	movw	r1, #53570	; 0xd142
   117d8:	movt	r1, #1
   117dc:	mov	r0, #0
   117e0:	mov	r2, #5
   117e4:	bl	11148 <dcgettext@plt>
   117e8:	movw	r1, #57724	; 0xe17c
   117ec:	movt	r1, #2
   117f0:	ldr	r1, [r1]
   117f4:	bl	110c4 <fputs_unlocked@plt>
   117f8:	movw	r1, #53641	; 0xd189
   117fc:	movt	r1, #1
   11800:	mov	r0, #0
   11804:	mov	r2, #5
   11808:	bl	11148 <dcgettext@plt>
   1180c:	mov	r1, r0
   11810:	movw	r2, #53526	; 0xd116
   11814:	movt	r2, #1
   11818:	mov	r0, #1
   1181c:	mov	r3, r5
   11820:	bl	1128c <__printf_chk@plt>
   11824:	movw	r1, #53668	; 0xd1a4
   11828:	movt	r1, #1
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	bl	11148 <dcgettext@plt>
   11838:	mov	r1, r0
   1183c:	movw	r0, #53436	; 0xd0bc
   11840:	movt	r0, #1
   11844:	movw	r3, #52043	; 0xcb4b
   11848:	movt	r3, #1
   1184c:	cmp	r4, r5
   11850:	moveq	r3, r0
   11854:	mov	r0, #1
   11858:	mov	r2, r4
   1185c:	bl	1128c <__printf_chk@plt>
   11860:	sub	sp, fp, #8
   11864:	pop	{r4, r5, fp, pc}
   11868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1186c:	add	fp, sp, #28
   11870:	sub	sp, sp, #116	; 0x74
   11874:	mov	r5, r1
   11878:	mov	r8, r0
   1187c:	add	r0, sp, #44	; 0x2c
   11880:	bl	11f9c <__assert_fail@plt+0xc20>
   11884:	str	r0, [sp, #36]	; 0x24
   11888:	ldr	r0, [r5]
   1188c:	bl	1915c <__assert_fail@plt+0x7de0>
   11890:	movw	r6, #52043	; 0xcb4b
   11894:	movt	r6, #1
   11898:	mov	r0, #6
   1189c:	mov	r1, r6
   118a0:	bl	112e0 <setlocale@plt>
   118a4:	movw	r4, #52635	; 0xcd9b
   118a8:	movt	r4, #1
   118ac:	movw	r1, #52535	; 0xcd37
   118b0:	movt	r1, #1
   118b4:	mov	r0, r4
   118b8:	bl	1131c <bindtextdomain@plt>
   118bc:	mov	r0, r4
   118c0:	bl	11160 <textdomain@plt>
   118c4:	movw	r0, #36268	; 0x8dac
   118c8:	movt	r0, #1
   118cc:	bl	1c708 <__assert_fail@plt+0xb38c>
   118d0:	movw	r0, #57724	; 0xe17c
   118d4:	movt	r0, #2
   118d8:	ldr	r0, [r0]
   118dc:	mov	r1, #0
   118e0:	mov	r2, #1
   118e4:	mov	r3, #0
   118e8:	bl	11274 <setvbuf@plt>
   118ec:	movw	r2, #52559	; 0xcd4f
   118f0:	movt	r2, #1
   118f4:	movw	r4, #54296	; 0xd418
   118f8:	movt	r4, #1
   118fc:	mvn	r0, #0
   11900:	str	r0, [sp, #32]
   11904:	mov	r0, #0
   11908:	str	r0, [sp, #28]
   1190c:	mov	r0, #0
   11910:	str	r6, [sp, #24]
   11914:	mov	r7, #0
   11918:	b	11924 <__assert_fail@plt+0x5a8>
   1191c:	strb	r1, [r0]
   11920:	mov	r0, sl
   11924:	mov	sl, r0
   11928:	str	r7, [sp]
   1192c:	mov	r0, r8
   11930:	mov	r1, r5
   11934:	mov	r9, r2
   11938:	mov	r3, r4
   1193c:	bl	11214 <getopt_long@plt>
   11940:	cmp	r0, #97	; 0x61
   11944:	ble	11b70 <__assert_fail@plt+0x7f4>
   11948:	mov	r6, r4
   1194c:	sub	r1, r0, #98	; 0x62
   11950:	cmp	r1, #24
   11954:	bhi	119d8 <__assert_fail@plt+0x65c>
   11958:	add	r3, pc, #12
   1195c:	mov	r0, #1
   11960:	mov	r2, r9
   11964:	mov	r4, r6
   11968:	ldr	pc, [r3, r1, lsl #2]
   1196c:	ldrdeq	r1, [r1], -r0
   11970:	andeq	r1, r1, r4, lsr #18
   11974:	andeq	r1, r1, r8, ror #28
   11978:	andeq	r1, r1, r8, ror #28
   1197c:	andeq	r1, r1, r8, ror #28
   11980:	andeq	r1, r1, r8, ror #28
   11984:	andeq	r1, r1, r8, ror #28
   11988:	andeq	r1, r1, r8, ror #28
   1198c:	andeq	r1, r1, r8, ror #28
   11990:	andeq	r1, r1, r8, ror #28
   11994:	andeq	r1, r1, ip, asr sl
   11998:	andeq	r1, r1, r8, ror #28
   1199c:	andeq	r1, r1, r8, ror #28
   119a0:	andeq	r1, r1, r8, ror #28
   119a4:	andeq	r1, r1, r8, ror #28
   119a8:	andeq	r1, r1, r8, ror #28
   119ac:	andeq	r1, r1, r8, ror #28
   119b0:	andeq	r1, r1, r8, ror #28
   119b4:	andeq	r1, r1, ip, lsl #22
   119b8:	andeq	r1, r1, r8, ror #28
   119bc:	andeq	r1, r1, r8, ror #28
   119c0:	andeq	r1, r1, r4, lsl sl
   119c4:	andeq	r1, r1, r8, ror #28
   119c8:	andeq	r1, r1, r8, ror #28
   119cc:	andeq	r1, r1, r0, ror #22
   119d0:	mov	r0, #1
   119d4:	b	11b10 <__assert_fail@plt+0x794>
   119d8:	sub	r0, r0, #256	; 0x100
   119dc:	cmp	r0, #4
   119e0:	bhi	11e68 <__assert_fail@plt+0xaec>
   119e4:	mov	r2, r9
   119e8:	mov	r4, r6
   119ec:	add	r1, pc, #0
   119f0:	ldr	pc, [r1, r0, lsl #2]
   119f4:	andeq	r1, r1, r8, lsl #20
   119f8:	andeq	r1, r1, ip, lsl fp
   119fc:	andeq	r1, r1, r0, ror #21
   11a00:	andeq	r1, r1, r4, asr fp
   11a04:	andeq	r1, r1, r4, asr #20
   11a08:	movw	r0, #57747	; 0xe193
   11a0c:	movt	r0, #2
   11a10:	b	11b68 <__assert_fail@plt+0x7ec>
   11a14:	movw	r0, #57745	; 0xe191
   11a18:	movt	r0, #2
   11a1c:	mov	r1, #1
   11a20:	strb	r1, [r0]
   11a24:	movw	r0, #57744	; 0xe190
   11a28:	movt	r0, #2
   11a2c:	mov	r1, #0
   11a30:	strb	r1, [r0]
   11a34:	movw	r0, #57746	; 0xe192
   11a38:	movt	r0, #2
   11a3c:	mov	r7, #0
   11a40:	b	1191c <__assert_fail@plt+0x5a0>
   11a44:	mov	r0, #1
   11a48:	str	r0, [sp, #32]
   11a4c:	mov	r0, #1
   11a50:	str	r0, [sp, #28]
   11a54:	mov	r0, sl
   11a58:	b	11924 <__assert_fail@plt+0x5a8>
   11a5c:	movw	r0, #57728	; 0xe180
   11a60:	movt	r0, #2
   11a64:	ldr	r4, [r0]
   11a68:	mov	r0, #0
   11a6c:	movw	r1, #52567	; 0xcd57
   11a70:	movt	r1, #1
   11a74:	mov	r2, #5
   11a78:	bl	11148 <dcgettext@plt>
   11a7c:	mvn	r1, #0
   11a80:	str	r1, [sp]
   11a84:	str	r1, [sp, #4]
   11a88:	movw	r1, #52043	; 0xcb4b
   11a8c:	movt	r1, #1
   11a90:	str	r1, [sp, #8]
   11a94:	str	r0, [sp, #12]
   11a98:	str	r7, [sp, #16]
   11a9c:	mov	r0, r4
   11aa0:	mov	r2, #0
   11aa4:	mov	r3, #0
   11aa8:	bl	1b75c <__assert_fail@plt+0xa3e0>
   11aac:	mov	r4, r6
   11ab0:	mov	r2, r9
   11ab4:	movw	r3, #57736	; 0xe188
   11ab8:	movt	r3, #2
   11abc:	strd	r0, [r3]
   11ac0:	movw	r1, #57728	; 0xe180
   11ac4:	movt	r1, #2
   11ac8:	ldr	r1, [r1]
   11acc:	str	r1, [sp, #24]
   11ad0:	tst	r0, #7
   11ad4:	mov	r0, sl
   11ad8:	beq	11924 <__assert_fail@plt+0x5a8>
   11adc:	b	11e10 <__assert_fail@plt+0xa94>
   11ae0:	movw	r0, #57745	; 0xe191
   11ae4:	movt	r0, #2
   11ae8:	mov	r1, #0
   11aec:	strb	r1, [r0]
   11af0:	movw	r0, #57744	; 0xe190
   11af4:	movt	r0, #2
   11af8:	mov	r7, #0
   11afc:	strb	r1, [r0]
   11b00:	movw	r0, #57746	; 0xe192
   11b04:	movt	r0, #2
   11b08:	b	11b68 <__assert_fail@plt+0x7ec>
   11b0c:	mov	r0, #0
   11b10:	str	r0, [sp, #32]
   11b14:	mov	r0, sl
   11b18:	b	11924 <__assert_fail@plt+0x5a8>
   11b1c:	movw	r0, #57745	; 0xe191
   11b20:	movt	r0, #2
   11b24:	mov	r3, #0
   11b28:	strb	r3, [r0]
   11b2c:	movw	r0, #57744	; 0xe190
   11b30:	movt	r0, #2
   11b34:	mov	r1, #1
   11b38:	strb	r1, [r0]
   11b3c:	movw	r0, #57746	; 0xe192
   11b40:	movt	r0, #2
   11b44:	mov	r7, #0
   11b48:	strb	r3, [r0]
   11b4c:	mov	r0, sl
   11b50:	b	11924 <__assert_fail@plt+0x5a8>
   11b54:	movw	r0, #57748	; 0xe194
   11b58:	movt	r0, #2
   11b5c:	b	11b68 <__assert_fail@plt+0x7ec>
   11b60:	movw	r0, #57749	; 0xe195
   11b64:	movt	r0, #2
   11b68:	mov	r1, #1
   11b6c:	b	1191c <__assert_fail@plt+0x5a0>
   11b70:	cmn	r0, #1
   11b74:	bne	11da4 <__assert_fail@plt+0xa28>
   11b78:	movw	r0, #57752	; 0xe198
   11b7c:	movt	r0, #2
   11b80:	mov	r1, #1
   11b84:	strb	r1, [r0]
   11b88:	movw	r3, #57736	; 0xe188
   11b8c:	movt	r3, #2
   11b90:	ldrd	r0, [r3]
   11b94:	movw	r2, #513	; 0x201
   11b98:	subs	r2, r0, r2
   11b9c:	sbcs	r2, r1, #0
   11ba0:	ldr	r7, [sp, #32]
   11ba4:	bcs	11e70 <__assert_fail@plt+0xaf4>
   11ba8:	orrs	r0, r0, r1
   11bac:	moveq	r1, #0
   11bb0:	moveq	r0, #512	; 0x200
   11bb4:	strdeq	r0, [r3]
   11bb8:	ldrd	r0, [r3]
   11bbc:	lsr	r0, r0, #2
   11bc0:	orr	r0, r0, r1, lsl #30
   11bc4:	movw	r1, #57756	; 0xe19c
   11bc8:	movt	r1, #2
   11bcc:	str	r0, [r1]
   11bd0:	ldr	r3, [sp, #28]
   11bd4:	eor	r1, r3, #1
   11bd8:	cmp	r7, #0
   11bdc:	tsteq	r1, #1
   11be0:	beq	11ee4 <__assert_fail@plt+0xb68>
   11be4:	eor	r0, sl, #1
   11be8:	tst	r0, #1
   11bec:	bne	11c04 <__assert_fail@plt+0x888>
   11bf0:	movw	r2, #57749	; 0xe195
   11bf4:	movt	r2, #2
   11bf8:	ldrb	r2, [r2]
   11bfc:	cmp	r2, #0
   11c00:	bne	11ef0 <__assert_fail@plt+0xb74>
   11c04:	orr	r1, r1, r0
   11c08:	tst	r1, #1
   11c0c:	beq	11efc <__assert_fail@plt+0xb80>
   11c10:	mov	r1, #0
   11c14:	cmp	r7, #0
   11c18:	movwlt	r1, #1
   11c1c:	orr	r1, r1, r0
   11c20:	tst	r1, #1
   11c24:	beq	11f08 <__assert_fail@plt+0xb8c>
   11c28:	movw	r1, #57747	; 0xe193
   11c2c:	movt	r1, #2
   11c30:	ldrb	r1, [r1]
   11c34:	mvn	r1, r1
   11c38:	orr	r1, sl, r1
   11c3c:	tst	r1, #1
   11c40:	beq	11f14 <__assert_fail@plt+0xb98>
   11c44:	movw	r1, #57744	; 0xe190
   11c48:	movt	r1, #2
   11c4c:	ldrb	r1, [r1]
   11c50:	mvn	r1, r1
   11c54:	orr	r1, sl, r1
   11c58:	tst	r1, #1
   11c5c:	beq	11f20 <__assert_fail@plt+0xba4>
   11c60:	movw	r1, #57745	; 0xe191
   11c64:	movt	r1, #2
   11c68:	ldrb	r1, [r1]
   11c6c:	mvn	r1, r1
   11c70:	orr	r1, sl, r1
   11c74:	tst	r1, #1
   11c78:	beq	11f2c <__assert_fail@plt+0xbb0>
   11c7c:	movw	r1, #57746	; 0xe192
   11c80:	movt	r1, #2
   11c84:	ldrb	r1, [r1]
   11c88:	mvn	r1, r1
   11c8c:	orr	r1, sl, r1
   11c90:	tst	r1, #1
   11c94:	beq	11f38 <__assert_fail@plt+0xbbc>
   11c98:	movw	r1, #57748	; 0xe194
   11c9c:	movt	r1, #2
   11ca0:	ldrb	r1, [r1]
   11ca4:	and	r0, r1, r0
   11ca8:	tst	r0, #1
   11cac:	bne	11f44 <__assert_fail@plt+0xbc8>
   11cb0:	add	r6, r5, r8, lsl #2
   11cb4:	movw	r0, #57704	; 0xe168
   11cb8:	movt	r0, #2
   11cbc:	ldr	r0, [r0]
   11cc0:	cmp	r0, r8
   11cc4:	movweq	r1, #54760	; 0xd5e8
   11cc8:	movteq	r1, #1
   11ccc:	streq	r1, [r6], #4
   11cd0:	add	r8, r5, r0, lsl #2
   11cd4:	mov	r9, #1
   11cd8:	cmp	r8, r6
   11cdc:	bcs	11d68 <__assert_fail@plt+0x9ec>
   11ce0:	bic	r5, r7, r7, asr #31
   11ce4:	mov	r9, #1
   11ce8:	and	r7, r3, #1
   11cec:	ldr	r4, [r8]
   11cf0:	tst	sl, #1
   11cf4:	beq	11d08 <__assert_fail@plt+0x98c>
   11cf8:	mov	r0, r4
   11cfc:	bl	11fac <__assert_fail@plt+0xc30>
   11d00:	and	r9, r9, r0
   11d04:	b	11d5c <__assert_fail@plt+0x9e0>
   11d08:	mov	r0, r4
   11d0c:	ldr	r1, [sp, #36]	; 0x24
   11d10:	add	r2, sp, #43	; 0x2b
   11d14:	bl	12834 <__assert_fail@plt+0x14b8>
   11d18:	mov	r1, #0
   11d1c:	cmp	r0, #0
   11d20:	beq	11d58 <__assert_fail@plt+0x9dc>
   11d24:	movw	r0, #57749	; 0xe195
   11d28:	movt	r0, #2
   11d2c:	ldrb	r0, [r0]
   11d30:	cmp	r0, #0
   11d34:	mov	r0, #10
   11d38:	movwne	r0, #0
   11d3c:	str	r0, [sp]
   11d40:	mov	r0, r4
   11d44:	mov	r1, r5
   11d48:	ldr	r2, [sp, #36]	; 0x24
   11d4c:	mov	r3, r7
   11d50:	bl	129bc <__assert_fail@plt+0x1640>
   11d54:	mov	r1, r9
   11d58:	mov	r9, r1
   11d5c:	add	r8, r8, #4
   11d60:	cmp	r8, r6
   11d64:	bcc	11cec <__assert_fail@plt+0x970>
   11d68:	movw	r0, #57760	; 0xe1a0
   11d6c:	movt	r0, #2
   11d70:	ldrb	r0, [r0]
   11d74:	cmp	r0, #0
   11d78:	beq	11d94 <__assert_fail@plt+0xa18>
   11d7c:	movw	r0, #57720	; 0xe178
   11d80:	movt	r0, #2
   11d84:	ldr	r0, [r0]
   11d88:	bl	18ed4 <__assert_fail@plt+0x7b58>
   11d8c:	cmn	r0, #1
   11d90:	beq	11f70 <__assert_fail@plt+0xbf4>
   11d94:	mov	r0, #1
   11d98:	bic	r0, r0, r9
   11d9c:	sub	sp, fp, #28
   11da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11da4:	cmn	r0, #3
   11da8:	bne	11e00 <__assert_fail@plt+0xa84>
   11dac:	movw	r0, #57620	; 0xe114
   11db0:	movt	r0, #2
   11db4:	ldr	r3, [r0]
   11db8:	movw	r0, #57724	; 0xe17c
   11dbc:	movt	r0, #2
   11dc0:	ldr	r0, [r0]
   11dc4:	mov	r1, #0
   11dc8:	movw	r2, #52659	; 0xcdb3
   11dcc:	movt	r2, #1
   11dd0:	movw	r7, #52645	; 0xcda5
   11dd4:	movt	r7, #1
   11dd8:	str	r7, [sp]
   11ddc:	str	r2, [sp, #4]
   11de0:	str	r1, [sp, #8]
   11de4:	movw	r1, #52529	; 0xcd31
   11de8:	movt	r1, #1
   11dec:	movw	r2, #52631	; 0xcd97
   11df0:	movt	r2, #1
   11df4:	bl	1b170 <__assert_fail@plt+0x9df4>
   11df8:	mov	r0, #0
   11dfc:	bl	1122c <exit@plt>
   11e00:	cmn	r0, #2
   11e04:	bne	11e68 <__assert_fail@plt+0xaec>
   11e08:	mov	r0, #0
   11e0c:	bl	11478 <__assert_fail@plt+0xfc>
   11e10:	movw	r1, #52582	; 0xcd66
   11e14:	movt	r1, #1
   11e18:	mov	r0, #0
   11e1c:	mov	r2, #5
   11e20:	bl	11148 <dcgettext@plt>
   11e24:	mov	r5, r0
   11e28:	ldr	r0, [sp, #24]
   11e2c:	bl	1a994 <__assert_fail@plt+0x9618>
   11e30:	mov	r3, r0
   11e34:	mov	r0, #0
   11e38:	mov	r1, #0
   11e3c:	mov	r2, r5
   11e40:	bl	111cc <error@plt>
   11e44:	movw	r1, #52601	; 0xcd79
   11e48:	movt	r1, #1
   11e4c:	mov	r0, #0
   11e50:	mov	r2, #5
   11e54:	bl	11148 <dcgettext@plt>
   11e58:	mov	r2, r0
   11e5c:	mov	r0, #1
   11e60:	mov	r1, #0
   11e64:	bl	111cc <error@plt>
   11e68:	mov	r0, #1
   11e6c:	bl	11478 <__assert_fail@plt+0xfc>
   11e70:	movw	r1, #52582	; 0xcd66
   11e74:	movt	r1, #1
   11e78:	mov	r0, #0
   11e7c:	mov	r2, #5
   11e80:	bl	11148 <dcgettext@plt>
   11e84:	mov	r5, r0
   11e88:	ldr	r0, [sp, #24]
   11e8c:	bl	1a994 <__assert_fail@plt+0x9618>
   11e90:	mov	r3, r0
   11e94:	mov	r0, #0
   11e98:	mov	r1, #0
   11e9c:	mov	r2, r5
   11ea0:	bl	111cc <error@plt>
   11ea4:	movw	r1, #52672	; 0xcdc0
   11ea8:	movt	r1, #1
   11eac:	mov	r0, #0
   11eb0:	mov	r2, #5
   11eb4:	bl	11148 <dcgettext@plt>
   11eb8:	mov	r4, r0
   11ebc:	movw	r0, #51099	; 0xc79b
   11ec0:	movt	r0, #1
   11ec4:	bl	1a994 <__assert_fail@plt+0x9618>
   11ec8:	mov	r3, r0
   11ecc:	mov	r0, #512	; 0x200
   11ed0:	str	r0, [sp]
   11ed4:	mov	r0, #1
   11ed8:	mov	r1, #0
   11edc:	mov	r2, r4
   11ee0:	bl	111cc <error@plt>
   11ee4:	movw	r1, #52712	; 0xcde8
   11ee8:	movt	r1, #1
   11eec:	b	11f4c <__assert_fail@plt+0xbd0>
   11ef0:	movw	r1, #52747	; 0xce0b
   11ef4:	movt	r1, #1
   11ef8:	b	11f4c <__assert_fail@plt+0xbd0>
   11efc:	movw	r1, #52807	; 0xce47
   11f00:	movt	r1, #1
   11f04:	b	11f4c <__assert_fail@plt+0xbd0>
   11f08:	movw	r1, #52864	; 0xce80
   11f0c:	movt	r1, #1
   11f10:	b	11f4c <__assert_fail@plt+0xbd0>
   11f14:	movw	r1, #52937	; 0xcec9
   11f18:	movt	r1, #1
   11f1c:	b	11f4c <__assert_fail@plt+0xbd0>
   11f20:	movw	r1, #53009	; 0xcf11
   11f24:	movt	r1, #1
   11f28:	b	11f4c <__assert_fail@plt+0xbd0>
   11f2c:	movw	r1, #53073	; 0xcf51
   11f30:	movt	r1, #1
   11f34:	b	11f4c <__assert_fail@plt+0xbd0>
   11f38:	movw	r1, #53135	; 0xcf8f
   11f3c:	movt	r1, #1
   11f40:	b	11f4c <__assert_fail@plt+0xbd0>
   11f44:	movw	r1, #53198	; 0xcfce
   11f48:	movt	r1, #1
   11f4c:	mov	r0, #0
   11f50:	mov	r2, #5
   11f54:	bl	11148 <dcgettext@plt>
   11f58:	mov	r2, r0
   11f5c:	mov	r0, #0
   11f60:	mov	r1, #0
   11f64:	bl	111cc <error@plt>
   11f68:	mov	r0, #1
   11f6c:	bl	11478 <__assert_fail@plt+0xfc>
   11f70:	bl	1125c <__errno_location@plt>
   11f74:	ldr	r4, [r0]
   11f78:	movw	r1, #53262	; 0xd00e
   11f7c:	movt	r1, #1
   11f80:	mov	r0, #0
   11f84:	mov	r2, #5
   11f88:	bl	11148 <dcgettext@plt>
   11f8c:	mov	r2, r0
   11f90:	mov	r0, #1
   11f94:	mov	r1, r4
   11f98:	bl	111cc <error@plt>
   11f9c:	add	r0, r0, #7
   11fa0:	and	r1, r0, #7
   11fa4:	sub	r0, r0, r1
   11fa8:	bx	lr
   11fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb0:	add	fp, sp, #28
   11fb4:	sub	sp, sp, #164	; 0xa4
   11fb8:	mov	r5, r0
   11fbc:	add	r0, sp, #92	; 0x5c
   11fc0:	bl	11f9c <__assert_fail@plt+0xc20>
   11fc4:	str	r0, [sp, #56]	; 0x38
   11fc8:	movw	r1, #54760	; 0xd5e8
   11fcc:	movt	r1, #1
   11fd0:	mov	r0, r5
   11fd4:	bl	110dc <strcmp@plt>
   11fd8:	str	r0, [sp, #48]	; 0x30
   11fdc:	cmp	r0, #0
   11fe0:	beq	12008 <__assert_fail@plt+0xc8c>
   11fe4:	movw	r1, #54266	; 0xd3fa
   11fe8:	movt	r1, #1
   11fec:	mov	r0, r5
   11ff0:	bl	18fdc <__assert_fail@plt+0x7c60>
   11ff4:	cmp	r0, #0
   11ff8:	beq	12738 <__assert_fail@plt+0x13bc>
   11ffc:	mov	r9, r0
   12000:	str	r5, [sp, #36]	; 0x24
   12004:	b	1203c <__assert_fail@plt+0xcc0>
   12008:	movw	r0, #57760	; 0xe1a0
   1200c:	movt	r0, #2
   12010:	mov	r1, #1
   12014:	strb	r1, [r0]
   12018:	movw	r1, #53262	; 0xd00e
   1201c:	movt	r1, #1
   12020:	mov	r0, #0
   12024:	mov	r2, #5
   12028:	bl	11148 <dcgettext@plt>
   1202c:	str	r0, [sp, #36]	; 0x24
   12030:	movw	r0, #57720	; 0xe178
   12034:	movt	r0, #2
   12038:	ldr	r9, [r0]
   1203c:	mov	r0, #0
   12040:	str	r0, [sp, #84]	; 0x54
   12044:	str	r0, [sp, #88]	; 0x58
   12048:	add	r4, sp, #88	; 0x58
   1204c:	add	r5, sp, #84	; 0x54
   12050:	mov	r0, #0
   12054:	str	r0, [sp, #20]
   12058:	mov	r7, #0
   1205c:	mov	r6, #0
   12060:	mov	r0, #0
   12064:	str	r0, [sp, #32]
   12068:	mov	r0, #0
   1206c:	str	r0, [sp, #44]	; 0x2c
   12070:	mov	r0, #0
   12074:	str	r0, [sp, #40]	; 0x28
   12078:	mov	r0, #0
   1207c:	str	r0, [sp, #28]
   12080:	mov	r0, #0
   12084:	str	r0, [sp, #24]
   12088:	mov	sl, #0
   1208c:	mov	r8, #0
   12090:	mov	r0, #0
   12094:	str	r0, [sp, #52]	; 0x34
   12098:	mov	r0, #0
   1209c:	str	r0, [sp, #60]	; 0x3c
   120a0:	adds	r7, r7, #1
   120a4:	adc	r6, r6, #0
   120a8:	orrs	r0, r7, r6
   120ac:	beq	127f8 <__assert_fail@plt+0x147c>
   120b0:	mov	r0, r4
   120b4:	mov	r1, r5
   120b8:	mov	r2, r9
   120bc:	bl	11328 <getline@plt>
   120c0:	cmp	r0, #1
   120c4:	blt	124dc <__assert_fail@plt+0x1160>
   120c8:	mov	r1, r0
   120cc:	ldr	r0, [sp, #88]	; 0x58
   120d0:	ldrb	r2, [r0]
   120d4:	cmp	r2, #35	; 0x23
   120d8:	beq	123c8 <__assert_fail@plt+0x104c>
   120dc:	sub	r2, r1, #1
   120e0:	ldrb	r3, [r0, r2]
   120e4:	cmp	r3, #10
   120e8:	moveq	r1, r2
   120ec:	sub	r2, r1, #1
   120f0:	cmp	r1, #0
   120f4:	mov	r3, r1
   120f8:	movgt	r3, r2
   120fc:	ldrb	r3, [r0, r3]
   12100:	cmp	r3, #13
   12104:	moveq	r1, r2
   12108:	cmp	r1, #0
   1210c:	beq	123c8 <__assert_fail@plt+0x104c>
   12110:	mov	r2, #0
   12114:	strb	r2, [r0, r1]
   12118:	ldr	r0, [sp, #88]	; 0x58
   1211c:	add	r2, sp, #80	; 0x50
   12120:	str	r2, [sp]
   12124:	add	r2, sp, #72	; 0x48
   12128:	add	r3, sp, #76	; 0x4c
   1212c:	bl	12b30 <__assert_fail@plt+0x17b4>
   12130:	cmp	r0, #0
   12134:	beq	122a8 <__assert_fail@plt+0xf2c>
   12138:	ldr	r0, [sp, #48]	; 0x30
   1213c:	cmp	r0, #0
   12140:	bne	1215c <__assert_fail@plt+0xde0>
   12144:	ldr	r0, [sp, #80]	; 0x50
   12148:	movw	r1, #54760	; 0xd5e8
   1214c:	movt	r1, #1
   12150:	bl	110dc <strcmp@plt>
   12154:	cmp	r0, #0
   12158:	beq	122a8 <__assert_fail@plt+0xf2c>
   1215c:	str	sl, [sp, #64]	; 0x40
   12160:	mov	sl, r8
   12164:	movw	r0, #57744	; 0xe190
   12168:	movt	r0, #2
   1216c:	ldrb	r0, [r0]
   12170:	mov	r8, #0
   12174:	cmp	r0, #0
   12178:	bne	12194 <__assert_fail@plt+0xe18>
   1217c:	ldr	r0, [sp, #80]	; 0x50
   12180:	mov	r1, #10
   12184:	bl	11250 <strchr@plt>
   12188:	mov	r8, r0
   1218c:	cmp	r0, #0
   12190:	movwne	r8, #1
   12194:	ldr	r4, [sp, #80]	; 0x50
   12198:	mov	r0, r4
   1219c:	ldr	r1, [sp, #56]	; 0x38
   121a0:	add	r2, sp, #71	; 0x47
   121a4:	bl	12834 <__assert_fail@plt+0x14b8>
   121a8:	cmp	r0, #0
   121ac:	beq	12340 <__assert_fail@plt+0xfc4>
   121b0:	ldrb	r0, [sp, #71]	; 0x47
   121b4:	cmp	r0, #0
   121b8:	movwne	r0, #57747	; 0xe193
   121bc:	movtne	r0, #2
   121c0:	ldrbne	r0, [r0]
   121c4:	cmpne	r0, #0
   121c8:	bne	123b0 <__assert_fail@plt+0x1034>
   121cc:	str	r4, [sp, #16]
   121d0:	str	sl, [sp, #32]
   121d4:	movw	r0, #57756	; 0xe19c
   121d8:	movt	r0, #2
   121dc:	ldr	r0, [r0]
   121e0:	lsr	sl, r0, #1
   121e4:	mov	r4, #0
   121e8:	cmp	r4, r0, lsr #1
   121ec:	beq	12248 <__assert_fail@plt+0xecc>
   121f0:	bl	111fc <__ctype_tolower_loc@plt>
   121f4:	movw	ip, #54576	; 0xd530
   121f8:	movt	ip, #1
   121fc:	ldr	r0, [r0]
   12200:	mov	r4, #0
   12204:	ldr	r1, [sp, #72]	; 0x48
   12208:	ldr	r2, [sp, #56]	; 0x38
   1220c:	ldrb	r2, [r2, r4]
   12210:	ldrb	r3, [ip, r2, lsr #4]
   12214:	ldrb	r5, [r1, r4, lsl #1]
   12218:	ldr	r5, [r0, r5, lsl #2]
   1221c:	cmp	r5, r3
   12220:	andeq	r2, r2, #15
   12224:	ldrbeq	r2, [ip, r2]
   12228:	addeq	r3, r1, r4, lsl #1
   1222c:	ldrbeq	r3, [r3, #1]
   12230:	ldreq	r3, [r0, r3, lsl #2]
   12234:	cmpeq	r3, r2
   12238:	bne	12248 <__assert_fail@plt+0xecc>
   1223c:	add	r4, r4, #1
   12240:	cmp	r4, sl
   12244:	bcc	12208 <__assert_fail@plt+0xe8c>
   12248:	ldr	r0, [sp, #28]
   1224c:	adds	r5, r0, #1
   12250:	ldr	r1, [sp, #24]
   12254:	adc	r3, r1, #0
   12258:	cmp	r4, sl
   1225c:	movne	r0, r5
   12260:	movne	r1, r3
   12264:	movw	r2, #57744	; 0xe190
   12268:	movt	r2, #2
   1226c:	ldrb	r2, [r2]
   12270:	cmp	r2, #0
   12274:	beq	123ec <__assert_fail@plt+0x1070>
   12278:	sub	r2, r4, sl
   1227c:	clz	r2, r2
   12280:	lsr	r2, r2, #5
   12284:	ldr	r3, [sp, #20]
   12288:	orr	r3, r3, r2
   1228c:	str	r3, [sp, #20]
   12290:	str	r0, [sp, #28]
   12294:	str	r1, [sp, #24]
   12298:	ldr	r8, [sp, #32]
   1229c:	add	r4, sp, #88	; 0x58
   122a0:	add	r5, sp, #84	; 0x54
   122a4:	b	123bc <__assert_fail@plt+0x1040>
   122a8:	ldr	r0, [sp, #52]	; 0x34
   122ac:	adds	r0, r0, #1
   122b0:	str	r0, [sp, #52]	; 0x34
   122b4:	ldr	r0, [sp, #60]	; 0x3c
   122b8:	adc	r0, r0, #0
   122bc:	str	r0, [sp, #60]	; 0x3c
   122c0:	movw	r0, #57745	; 0xe191
   122c4:	movt	r0, #2
   122c8:	ldrb	r0, [r0]
   122cc:	cmp	r0, #1
   122d0:	bne	12334 <__assert_fail@plt+0xfb8>
   122d4:	mov	r0, #0
   122d8:	movw	r1, #53827	; 0xd243
   122dc:	movt	r1, #1
   122e0:	mov	r2, #5
   122e4:	bl	11148 <dcgettext@plt>
   122e8:	str	sl, [sp, #64]	; 0x40
   122ec:	mov	sl, r5
   122f0:	mov	r5, r0
   122f4:	mov	r0, #0
   122f8:	mov	r1, #3
   122fc:	ldr	r2, [sp, #36]	; 0x24
   12300:	bl	1a854 <__assert_fail@plt+0x94d8>
   12304:	mov	r3, r0
   12308:	str	r7, [sp]
   1230c:	str	r6, [sp, #4]
   12310:	movw	r0, #51099	; 0xc79b
   12314:	movt	r0, #1
   12318:	str	r0, [sp, #8]
   1231c:	mov	r0, #0
   12320:	mov	r1, #0
   12324:	mov	r2, r5
   12328:	mov	r5, sl
   1232c:	ldr	sl, [sp, #64]	; 0x40
   12330:	bl	111cc <error@plt>
   12334:	adds	sl, sl, #1
   12338:	adc	r8, r8, #0
   1233c:	b	123c8 <__assert_fail@plt+0x104c>
   12340:	ldr	r0, [sp, #44]	; 0x2c
   12344:	adds	r0, r0, #1
   12348:	str	r0, [sp, #44]	; 0x2c
   1234c:	ldr	r0, [sp, #40]	; 0x28
   12350:	adc	r0, r0, #0
   12354:	str	r0, [sp, #40]	; 0x28
   12358:	movw	r0, #57744	; 0xe190
   1235c:	movt	r0, #2
   12360:	ldrb	r0, [r0]
   12364:	cmp	r0, #0
   12368:	bne	123b0 <__assert_fail@plt+0x1034>
   1236c:	cmp	r8, #0
   12370:	beq	1237c <__assert_fail@plt+0x1000>
   12374:	mov	r0, #92	; 0x5c
   12378:	bl	11370 <putchar_unlocked@plt>
   1237c:	mov	r0, r4
   12380:	mov	r1, r8
   12384:	bl	12e68 <__assert_fail@plt+0x1aec>
   12388:	mov	r0, #0
   1238c:	movw	r1, #53875	; 0xd273
   12390:	movt	r1, #1
   12394:	mov	r2, #5
   12398:	bl	11148 <dcgettext@plt>
   1239c:	mov	r2, r0
   123a0:	mov	r0, #1
   123a4:	movw	r1, #55565	; 0xd90d
   123a8:	movt	r1, #1
   123ac:	bl	1128c <__printf_chk@plt>
   123b0:	add	r4, sp, #88	; 0x58
   123b4:	add	r5, sp, #84	; 0x54
   123b8:	mov	r8, sl
   123bc:	mov	r0, #1
   123c0:	str	r0, [sp, #32]
   123c4:	ldr	sl, [sp, #64]	; 0x40
   123c8:	mov	r0, r9
   123cc:	bl	1134c <feof_unlocked@plt>
   123d0:	cmp	r0, #0
   123d4:	bne	124dc <__assert_fail@plt+0x1160>
   123d8:	mov	r0, r9
   123dc:	bl	111b4 <ferror_unlocked@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	120a0 <__assert_fail@plt+0xd24>
   123e8:	b	124dc <__assert_fail@plt+0x1160>
   123ec:	cmp	r4, sl
   123f0:	bne	12414 <__assert_fail@plt+0x1098>
   123f4:	movw	r0, #57746	; 0xe192
   123f8:	movt	r0, #2
   123fc:	ldrb	r0, [r0]
   12400:	cmp	r0, #0
   12404:	beq	12414 <__assert_fail@plt+0x1098>
   12408:	mov	r0, #1
   1240c:	str	r0, [sp, #20]
   12410:	b	12470 <__assert_fail@plt+0x10f4>
   12414:	str	r3, [sp, #12]
   12418:	cmp	r8, #0
   1241c:	beq	12428 <__assert_fail@plt+0x10ac>
   12420:	mov	r0, #92	; 0x5c
   12424:	bl	11370 <putchar_unlocked@plt>
   12428:	ldr	r0, [sp, #16]
   1242c:	mov	r1, r8
   12430:	bl	12e68 <__assert_fail@plt+0x1aec>
   12434:	cmp	r4, sl
   12438:	beq	12480 <__assert_fail@plt+0x1104>
   1243c:	mov	r0, #0
   12440:	movw	r1, #53895	; 0xd287
   12444:	movt	r1, #1
   12448:	mov	r2, #5
   1244c:	bl	11148 <dcgettext@plt>
   12450:	mov	r2, r0
   12454:	mov	r0, #1
   12458:	movw	r1, #55565	; 0xd90d
   1245c:	movt	r1, #1
   12460:	bl	1128c <__printf_chk@plt>
   12464:	str	r5, [sp, #28]
   12468:	ldr	r0, [sp, #12]
   1246c:	str	r0, [sp, #24]
   12470:	add	r4, sp, #88	; 0x58
   12474:	add	r5, sp, #84	; 0x54
   12478:	ldr	r8, [sp, #32]
   1247c:	b	123bc <__assert_fail@plt+0x1040>
   12480:	movw	r0, #57746	; 0xe192
   12484:	movt	r0, #2
   12488:	ldrb	r0, [r0]
   1248c:	mov	r1, #1
   12490:	str	r1, [sp, #20]
   12494:	cmp	r0, #0
   12498:	add	r4, sp, #88	; 0x58
   1249c:	add	r5, sp, #84	; 0x54
   124a0:	ldr	r8, [sp, #32]
   124a4:	bne	123bc <__assert_fail@plt+0x1040>
   124a8:	mov	r0, #0
   124ac:	movw	r1, #53902	; 0xd28e
   124b0:	movt	r1, #1
   124b4:	mov	r2, #5
   124b8:	bl	11148 <dcgettext@plt>
   124bc:	mov	r2, r0
   124c0:	mov	r0, #1
   124c4:	str	r0, [sp, #20]
   124c8:	mov	r0, #1
   124cc:	movw	r1, #55565	; 0xd90d
   124d0:	movt	r1, #1
   124d4:	bl	1128c <__printf_chk@plt>
   124d8:	b	123bc <__assert_fail@plt+0x1040>
   124dc:	str	sl, [sp, #64]	; 0x40
   124e0:	ldr	r0, [sp, #88]	; 0x58
   124e4:	bl	19090 <__assert_fail@plt+0x7d14>
   124e8:	mov	r0, r9
   124ec:	bl	111b4 <ferror_unlocked@plt>
   124f0:	mov	r5, r0
   124f4:	mov	r4, #0
   124f8:	cmp	r0, #0
   124fc:	mvneq	r4, #0
   12500:	ldr	r0, [sp, #48]	; 0x30
   12504:	cmp	r0, #0
   12508:	beq	12550 <__assert_fail@plt+0x11d4>
   1250c:	mov	r0, r9
   12510:	bl	18ed4 <__assert_fail@plt+0x7b58>
   12514:	cmp	r5, #0
   12518:	bne	12558 <__assert_fail@plt+0x11dc>
   1251c:	cmp	r0, #0
   12520:	ldr	r7, [sp, #44]	; 0x2c
   12524:	ldr	r6, [sp, #40]	; 0x28
   12528:	ldr	r5, [sp, #60]	; 0x3c
   1252c:	beq	12538 <__assert_fail@plt+0x11bc>
   12530:	bl	1125c <__errno_location@plt>
   12534:	ldr	r4, [r0]
   12538:	cmp	r4, #0
   1253c:	blt	1256c <__assert_fail@plt+0x11f0>
   12540:	beq	1276c <__assert_fail@plt+0x13f0>
   12544:	movw	r5, #52598	; 0xcd76
   12548:	movt	r5, #1
   1254c:	b	12784 <__assert_fail@plt+0x1408>
   12550:	mov	r0, r9
   12554:	bl	11304 <clearerr_unlocked@plt>
   12558:	ldr	r7, [sp, #44]	; 0x2c
   1255c:	ldr	r6, [sp, #40]	; 0x28
   12560:	ldr	r5, [sp, #60]	; 0x3c
   12564:	cmp	r4, #0
   12568:	bge	12540 <__assert_fail@plt+0x11c4>
   1256c:	ldr	r0, [sp, #32]
   12570:	tst	r0, #1
   12574:	beq	127ac <__assert_fail@plt+0x1430>
   12578:	movw	r0, #57744	; 0xe190
   1257c:	movt	r0, #2
   12580:	ldrb	r0, [r0]
   12584:	cmp	r0, #0
   12588:	ldr	sl, [sp, #64]	; 0x40
   1258c:	bne	126e4 <__assert_fail@plt+0x1368>
   12590:	ldr	r4, [sp, #52]	; 0x34
   12594:	orrs	r0, r4, r5
   12598:	beq	125e0 <__assert_fail@plt+0x1264>
   1259c:	mov	r0, r4
   125a0:	mov	r1, r5
   125a4:	bl	12f1c <__assert_fail@plt+0x1ba0>
   125a8:	mov	r3, r0
   125ac:	mov	r0, #5
   125b0:	str	r0, [sp]
   125b4:	movw	r1, #53967	; 0xd2cf
   125b8:	movt	r1, #1
   125bc:	movw	r2, #54010	; 0xd2fa
   125c0:	movt	r2, #1
   125c4:	mov	r0, #0
   125c8:	bl	11364 <dcngettext@plt>
   125cc:	mov	r2, r0
   125d0:	stm	sp, {r4, r5}
   125d4:	mov	r0, #0
   125d8:	mov	r1, #0
   125dc:	bl	111cc <error@plt>
   125e0:	orrs	r0, r7, r6
   125e4:	beq	12630 <__assert_fail@plt+0x12b4>
   125e8:	mov	r0, r7
   125ec:	mov	r1, r6
   125f0:	bl	12f1c <__assert_fail@plt+0x1ba0>
   125f4:	mov	r3, r0
   125f8:	mov	r0, #5
   125fc:	str	r0, [sp]
   12600:	movw	r1, #54055	; 0xd327
   12604:	movt	r1, #1
   12608:	movw	r2, #54099	; 0xd353
   1260c:	movt	r2, #1
   12610:	mov	r0, #0
   12614:	bl	11364 <dcngettext@plt>
   12618:	mov	r2, r0
   1261c:	str	r7, [sp]
   12620:	str	r6, [sp, #4]
   12624:	mov	r0, #0
   12628:	mov	r1, #0
   1262c:	bl	111cc <error@plt>
   12630:	ldr	r4, [sp, #28]
   12634:	ldr	r9, [sp, #24]
   12638:	orrs	r0, r4, r9
   1263c:	beq	12684 <__assert_fail@plt+0x1308>
   12640:	mov	r0, r4
   12644:	mov	r1, r9
   12648:	bl	12f1c <__assert_fail@plt+0x1ba0>
   1264c:	mov	r3, r0
   12650:	mov	r0, #5
   12654:	str	r0, [sp]
   12658:	movw	r1, #54144	; 0xd380
   1265c:	movt	r1, #1
   12660:	movw	r2, #54190	; 0xd3ae
   12664:	movt	r2, #1
   12668:	mov	r0, #0
   1266c:	bl	11364 <dcngettext@plt>
   12670:	mov	r2, r0
   12674:	stm	sp, {r4, r9}
   12678:	mov	r0, #0
   1267c:	mov	r1, #0
   12680:	bl	111cc <error@plt>
   12684:	movw	r0, #57747	; 0xe193
   12688:	movt	r0, #2
   1268c:	ldrb	r0, [r0]
   12690:	mvn	r0, r0
   12694:	ldr	r1, [sp, #20]
   12698:	orr	r0, r1, r0
   1269c:	tst	r0, #1
   126a0:	bne	126e4 <__assert_fail@plt+0x1368>
   126a4:	movw	r1, #54237	; 0xd3dd
   126a8:	movt	r1, #1
   126ac:	mov	r0, #0
   126b0:	mov	r2, #5
   126b4:	bl	11148 <dcgettext@plt>
   126b8:	mov	r4, r0
   126bc:	mov	r0, #0
   126c0:	mov	r1, #3
   126c4:	ldr	r2, [sp, #36]	; 0x24
   126c8:	bl	1a854 <__assert_fail@plt+0x94d8>
   126cc:	mov	r3, r0
   126d0:	mov	r0, #0
   126d4:	mov	r1, #0
   126d8:	mov	r2, r4
   126dc:	ldr	sl, [sp, #64]	; 0x40
   126e0:	bl	111cc <error@plt>
   126e4:	ldr	r0, [sp, #28]
   126e8:	orr	r0, r7, r0
   126ec:	ldr	r1, [sp, #24]
   126f0:	orr	r1, r6, r1
   126f4:	orrs	r0, r0, r1
   126f8:	movwne	r0, #1
   126fc:	ldr	r1, [sp, #20]
   12700:	mvn	r1, r1
   12704:	orr	r0, r1, r0
   12708:	mov	r6, #0
   1270c:	tst	r0, #1
   12710:	bne	127ec <__assert_fail@plt+0x1470>
   12714:	orr	r0, sl, r8
   12718:	clz	r0, r0
   1271c:	lsr	r0, r0, #5
   12720:	movw	r1, #57748	; 0xe194
   12724:	movt	r1, #2
   12728:	ldrb	r1, [r1]
   1272c:	eor	r1, r1, #1
   12730:	orr	r6, r0, r1
   12734:	b	127ec <__assert_fail@plt+0x1470>
   12738:	bl	1125c <__errno_location@plt>
   1273c:	ldr	r4, [r0]
   12740:	mov	r6, #0
   12744:	mov	r0, #0
   12748:	mov	r1, #3
   1274c:	mov	r2, r5
   12750:	bl	1a854 <__assert_fail@plt+0x94d8>
   12754:	mov	r3, r0
   12758:	movw	r2, #52598	; 0xcd76
   1275c:	movt	r2, #1
   12760:	mov	r0, #0
   12764:	mov	r1, r4
   12768:	b	127e8 <__assert_fail@plt+0x146c>
   1276c:	movw	r1, #53905	; 0xd291
   12770:	movt	r1, #1
   12774:	mov	r0, #0
   12778:	mov	r2, #5
   1277c:	bl	11148 <dcgettext@plt>
   12780:	mov	r5, r0
   12784:	mov	r6, #0
   12788:	mov	r0, #0
   1278c:	mov	r1, #3
   12790:	ldr	r2, [sp, #36]	; 0x24
   12794:	bl	1a854 <__assert_fail@plt+0x94d8>
   12798:	mov	r3, r0
   1279c:	mov	r0, #0
   127a0:	mov	r1, r4
   127a4:	mov	r2, r5
   127a8:	b	127e8 <__assert_fail@plt+0x146c>
   127ac:	mov	r6, #0
   127b0:	movw	r1, #53920	; 0xd2a0
   127b4:	movt	r1, #1
   127b8:	mov	r0, #0
   127bc:	mov	r2, #5
   127c0:	bl	11148 <dcgettext@plt>
   127c4:	mov	r4, r0
   127c8:	mov	r0, #0
   127cc:	mov	r1, #3
   127d0:	ldr	r2, [sp, #36]	; 0x24
   127d4:	bl	1a854 <__assert_fail@plt+0x94d8>
   127d8:	mov	r3, r0
   127dc:	mov	r0, #0
   127e0:	mov	r1, #0
   127e4:	mov	r2, r4
   127e8:	bl	111cc <error@plt>
   127ec:	and	r0, r6, #1
   127f0:	sub	sp, fp, #28
   127f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f8:	movw	r1, #53799	; 0xd227
   127fc:	movt	r1, #1
   12800:	mov	r0, #0
   12804:	mov	r2, #5
   12808:	bl	11148 <dcgettext@plt>
   1280c:	mov	r4, r0
   12810:	mov	r0, #0
   12814:	mov	r1, #3
   12818:	ldr	r2, [sp, #36]	; 0x24
   1281c:	bl	1a854 <__assert_fail@plt+0x94d8>
   12820:	mov	r3, r0
   12824:	mov	r0, #1
   12828:	mov	r1, #0
   1282c:	mov	r2, r4
   12830:	bl	111cc <error@plt>
   12834:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12838:	add	fp, sp, #24
   1283c:	mov	r4, r2
   12840:	mov	r6, r1
   12844:	mov	r8, r0
   12848:	movw	r1, #54760	; 0xd5e8
   1284c:	movt	r1, #1
   12850:	bl	110dc <strcmp@plt>
   12854:	mov	r5, r0
   12858:	mov	r0, #0
   1285c:	strb	r0, [r4]
   12860:	cmp	r5, #0
   12864:	beq	128e8 <__assert_fail@plt+0x156c>
   12868:	movw	r1, #54266	; 0xd3fa
   1286c:	movt	r1, #1
   12870:	mov	r0, r8
   12874:	bl	18fdc <__assert_fail@plt+0x7c60>
   12878:	mov	r7, r0
   1287c:	cmp	r0, #0
   12880:	bne	12904 <__assert_fail@plt+0x1588>
   12884:	movw	r0, #57747	; 0xe193
   12888:	movt	r0, #2
   1288c:	ldrb	r0, [r0]
   12890:	cmp	r0, #1
   12894:	bne	128b4 <__assert_fail@plt+0x1538>
   12898:	bl	1125c <__errno_location@plt>
   1289c:	ldr	r0, [r0]
   128a0:	cmp	r0, #2
   128a4:	moveq	r5, #1
   128a8:	strbeq	r5, [r4]
   128ac:	moveq	r0, r5
   128b0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   128b4:	bl	1125c <__errno_location@plt>
   128b8:	ldr	r4, [r0]
   128bc:	mov	r5, #0
   128c0:	mov	r0, #0
   128c4:	mov	r1, #3
   128c8:	mov	r2, r8
   128cc:	bl	1a854 <__assert_fail@plt+0x94d8>
   128d0:	mov	r3, r0
   128d4:	movw	r2, #52598	; 0xcd76
   128d8:	movt	r2, #1
   128dc:	mov	r0, #0
   128e0:	mov	r1, r4
   128e4:	b	129b0 <__assert_fail@plt+0x1634>
   128e8:	movw	r0, #57760	; 0xe1a0
   128ec:	movt	r0, #2
   128f0:	mov	r1, #1
   128f4:	strb	r1, [r0]
   128f8:	movw	r0, #57720	; 0xe178
   128fc:	movt	r0, #2
   12900:	ldr	r7, [r0]
   12904:	mov	r0, r7
   12908:	mov	r1, #2
   1290c:	bl	18e98 <__assert_fail@plt+0x7b1c>
   12910:	movw	r0, #57736	; 0xe188
   12914:	movt	r0, #2
   12918:	ldrd	r0, [r0]
   1291c:	lsr	r0, r0, #3
   12920:	orr	r2, r0, r1, lsl #29
   12924:	mov	r0, r7
   12928:	mov	r1, r6
   1292c:	bl	18ca0 <__assert_fail@plt+0x7924>
   12930:	cmp	r0, #0
   12934:	beq	12944 <__assert_fail@plt+0x15c8>
   12938:	bl	1125c <__errno_location@plt>
   1293c:	ldr	r6, [r0]
   12940:	b	12948 <__assert_fail@plt+0x15cc>
   12944:	mov	r6, #0
   12948:	mov	r0, r7
   1294c:	cmp	r5, #0
   12950:	beq	12974 <__assert_fail@plt+0x15f8>
   12954:	bl	18ed4 <__assert_fail@plt+0x7b58>
   12958:	cmp	r6, #0
   1295c:	bne	12978 <__assert_fail@plt+0x15fc>
   12960:	cmp	r0, #0
   12964:	beq	12978 <__assert_fail@plt+0x15fc>
   12968:	bl	1125c <__errno_location@plt>
   1296c:	ldr	r6, [r0]
   12970:	b	12978 <__assert_fail@plt+0x15fc>
   12974:	bl	11304 <clearerr_unlocked@plt>
   12978:	cmp	r6, #0
   1297c:	moveq	r5, #1
   12980:	moveq	r0, r5
   12984:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12988:	mov	r5, #0
   1298c:	mov	r0, #0
   12990:	mov	r1, #3
   12994:	mov	r2, r8
   12998:	bl	1a854 <__assert_fail@plt+0x94d8>
   1299c:	mov	r3, r0
   129a0:	movw	r2, #52598	; 0xcd76
   129a4:	movt	r2, #1
   129a8:	mov	r0, #0
   129ac:	mov	r1, r6
   129b0:	bl	111cc <error@plt>
   129b4:	mov	r0, r5
   129b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   129bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	add	fp, sp, #28
   129c4:	sub	sp, sp, #12
   129c8:	mov	r7, r3
   129cc:	mov	r6, r2
   129d0:	mov	r4, r0
   129d4:	mov	sl, #0
   129d8:	ldr	r0, [fp, #8]
   129dc:	cmp	r0, #10
   129e0:	str	r0, [sp, #8]
   129e4:	str	r1, [sp, #4]
   129e8:	bne	12a34 <__assert_fail@plt+0x16b8>
   129ec:	mov	r0, r4
   129f0:	mov	r1, #92	; 0x5c
   129f4:	bl	11250 <strchr@plt>
   129f8:	cmp	r0, #0
   129fc:	bne	12a28 <__assert_fail@plt+0x16ac>
   12a00:	mov	r0, r4
   12a04:	mov	r1, #10
   12a08:	bl	11250 <strchr@plt>
   12a0c:	cmp	r0, #0
   12a10:	bne	12a28 <__assert_fail@plt+0x16ac>
   12a14:	mov	r0, r4
   12a18:	mov	r1, #13
   12a1c:	bl	11250 <strchr@plt>
   12a20:	cmp	r0, #0
   12a24:	beq	12a34 <__assert_fail@plt+0x16b8>
   12a28:	mov	r0, #92	; 0x5c
   12a2c:	bl	11370 <putchar_unlocked@plt>
   12a30:	mov	sl, #1
   12a34:	cmp	r7, #0
   12a38:	beq	12ab0 <__assert_fail@plt+0x1734>
   12a3c:	movw	r8, #57724	; 0xe17c
   12a40:	movt	r8, #2
   12a44:	ldr	r1, [r8]
   12a48:	movw	r0, #51099	; 0xc79b
   12a4c:	movt	r0, #1
   12a50:	bl	110c4 <fputs_unlocked@plt>
   12a54:	movw	r0, #57736	; 0xe188
   12a58:	movt	r0, #2
   12a5c:	ldrd	r2, [r0]
   12a60:	lsr	r0, r2, #9
   12a64:	orr	r0, r0, r3, lsl #23
   12a68:	orr	r0, r0, r3, lsr #9
   12a6c:	cmp	r0, #0
   12a70:	bne	12a84 <__assert_fail@plt+0x1708>
   12a74:	movw	r1, #54271	; 0xd3ff
   12a78:	movt	r1, #1
   12a7c:	mov	r0, #1
   12a80:	bl	1128c <__printf_chk@plt>
   12a84:	ldr	r1, [r8]
   12a88:	movw	r0, #54277	; 0xd405
   12a8c:	movt	r0, #1
   12a90:	bl	110c4 <fputs_unlocked@plt>
   12a94:	mov	r0, r4
   12a98:	mov	r1, sl
   12a9c:	bl	12e68 <__assert_fail@plt+0x1aec>
   12aa0:	ldr	r1, [r8]
   12aa4:	movw	r0, #54280	; 0xd408
   12aa8:	movt	r0, #1
   12aac:	bl	110c4 <fputs_unlocked@plt>
   12ab0:	movw	r8, #57756	; 0xe19c
   12ab4:	movt	r8, #2
   12ab8:	ldr	r0, [r8]
   12abc:	cmp	r0, #2
   12ac0:	bcc	12af0 <__assert_fail@plt+0x1774>
   12ac4:	mov	r9, #0
   12ac8:	movw	r5, #54285	; 0xd40d
   12acc:	movt	r5, #1
   12ad0:	ldrb	r2, [r6, r9]
   12ad4:	mov	r0, #1
   12ad8:	mov	r1, r5
   12adc:	bl	1128c <__printf_chk@plt>
   12ae0:	add	r9, r9, #1
   12ae4:	ldr	r0, [r8]
   12ae8:	cmp	r9, r0, lsr #1
   12aec:	bcc	12ad0 <__assert_fail@plt+0x1754>
   12af0:	cmp	r7, #0
   12af4:	bne	12b20 <__assert_fail@plt+0x17a4>
   12af8:	mov	r0, #32
   12afc:	bl	11370 <putchar_unlocked@plt>
   12b00:	mov	r0, #42	; 0x2a
   12b04:	ldr	r1, [sp, #4]
   12b08:	cmp	r1, #0
   12b0c:	movweq	r0, #32
   12b10:	bl	11370 <putchar_unlocked@plt>
   12b14:	mov	r0, r4
   12b18:	mov	r1, sl
   12b1c:	bl	12e68 <__assert_fail@plt+0x1aec>
   12b20:	ldr	r0, [sp, #8]
   12b24:	sub	sp, fp, #28
   12b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b2c:	b	11370 <putchar_unlocked@plt>
   12b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b34:	add	fp, sp, #28
   12b38:	sub	sp, sp, #36	; 0x24
   12b3c:	mov	r9, r2
   12b40:	mov	r4, r1
   12b44:	mov	r6, r0
   12b48:	mov	r8, #0
   12b4c:	b	12b54 <__assert_fail@plt+0x17d8>
   12b50:	add	r8, r8, #1
   12b54:	ldrb	r0, [r6, r8]
   12b58:	cmp	r0, #9
   12b5c:	cmpne	r0, #32
   12b60:	beq	12b50 <__assert_fail@plt+0x17d4>
   12b64:	cmp	r0, #92	; 0x5c
   12b68:	str	r3, [sp, #8]
   12b6c:	movne	r0, #0
   12b70:	addeq	r8, r8, #1
   12b74:	moveq	r0, #1
   12b78:	str	r0, [sp, #12]
   12b7c:	add	r7, r6, r8
   12b80:	movw	r1, #51099	; 0xc79b
   12b84:	movt	r1, #1
   12b88:	mov	r0, r7
   12b8c:	mov	r2, #7
   12b90:	bl	11334 <strncmp@plt>
   12b94:	cmp	r0, #0
   12b98:	str	r4, [sp, #16]
   12b9c:	beq	12cf8 <__assert_fail@plt+0x197c>
   12ba0:	movw	r0, #57752	; 0xe198
   12ba4:	movt	r0, #2
   12ba8:	ldrb	r0, [r0]
   12bac:	ldrb	r1, [r7]
   12bb0:	sub	r1, r1, #92	; 0x5c
   12bb4:	clz	r1, r1
   12bb8:	lsr	r1, r1, #5
   12bbc:	cmp	r0, #0
   12bc0:	addne	r1, r1, #3
   12bc4:	sub	r0, r4, r8
   12bc8:	mov	r5, #0
   12bcc:	cmp	r0, r1
   12bd0:	bcc	12e08 <__assert_fail@plt+0x1a8c>
   12bd4:	str	r7, [r9]
   12bd8:	movw	sl, #57756	; 0xe19c
   12bdc:	movt	sl, #2
   12be0:	mov	r5, #0
   12be4:	str	r5, [sl]
   12be8:	bl	11220 <__ctype_b_loc@plt>
   12bec:	ldrb	r1, [r7]
   12bf0:	ldr	r2, [r0]
   12bf4:	add	r1, r2, r1, lsl #1
   12bf8:	ldrb	r1, [r1, #1]
   12bfc:	tst	r1, #16
   12c00:	beq	12e08 <__assert_fail@plt+0x1a8c>
   12c04:	add	r1, r7, #1
   12c08:	ldr	r2, [r0]
   12c0c:	mov	r0, #0
   12c10:	mov	r4, #0
   12c14:	ldrb	r3, [r1, r4]
   12c18:	add	r3, r2, r3, lsl #1
   12c1c:	ldrb	r3, [r3, #1]
   12c20:	add	r0, r0, #4
   12c24:	add	r4, r4, #1
   12c28:	tst	r3, #16
   12c2c:	bne	12c14 <__assert_fail@plt+0x1898>
   12c30:	str	r4, [sl]
   12c34:	mov	r5, #0
   12c38:	cmp	r4, #2
   12c3c:	bcc	12e08 <__assert_fail@plt+0x1a8c>
   12c40:	cmp	r4, #128	; 0x80
   12c44:	bhi	12e08 <__assert_fail@plt+0x1a8c>
   12c48:	ands	r1, r4, #1
   12c4c:	bne	12e08 <__assert_fail@plt+0x1a8c>
   12c50:	movw	r1, #57736	; 0xe188
   12c54:	movt	r1, #2
   12c58:	mov	r5, #0
   12c5c:	stm	r1, {r0, r5}
   12c60:	mov	r0, r7
   12c64:	ldrb	r1, [r0, r4]!
   12c68:	cmp	r1, #32
   12c6c:	cmpne	r1, #9
   12c70:	bne	12e08 <__assert_fail@plt+0x1a8c>
   12c74:	add	r0, r0, #1
   12c78:	mov	r5, #0
   12c7c:	strb	r5, [r0, #-1]
   12c80:	ldr	r0, [r9]
   12c84:	bl	13010 <__assert_fail@plt+0x1c94>
   12c88:	cmp	r0, #0
   12c8c:	beq	12e08 <__assert_fail@plt+0x1a8c>
   12c90:	add	r0, r8, r4
   12c94:	add	r1, r0, #1
   12c98:	ldr	r2, [sp, #16]
   12c9c:	rsb	r2, r2, #2
   12ca0:	add	r2, r8, r2
   12ca4:	adds	r2, r2, r4
   12ca8:	beq	12e14 <__assert_fail@plt+0x1a98>
   12cac:	add	r2, r7, r4
   12cb0:	ldrb	r2, [r2, #1]
   12cb4:	cmp	r2, #32
   12cb8:	cmpne	r2, #42	; 0x2a
   12cbc:	bne	12e14 <__assert_fail@plt+0x1a98>
   12cc0:	movw	r3, #57616	; 0xe110
   12cc4:	movt	r3, #2
   12cc8:	ldr	r7, [r3]
   12ccc:	cmp	r7, #1
   12cd0:	beq	12e30 <__assert_fail@plt+0x1ab4>
   12cd4:	mov	r1, #0
   12cd8:	str	r1, [r3]
   12cdc:	sub	r1, r2, #42	; 0x2a
   12ce0:	clz	r1, r1
   12ce4:	lsr	r1, r1, #5
   12ce8:	ldr	r2, [sp, #8]
   12cec:	str	r1, [r2]
   12cf0:	add	r1, r0, #2
   12cf4:	b	12e30 <__assert_fail@plt+0x1ab4>
   12cf8:	add	sl, r8, #7
   12cfc:	ldrb	r4, [r6, sl]
   12d00:	mov	r5, #0
   12d04:	strb	r5, [r6, sl]
   12d08:	movw	r1, #51099	; 0xc79b
   12d0c:	movt	r1, #1
   12d10:	mov	r0, r7
   12d14:	bl	110dc <strcmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	bne	12e08 <__assert_fail@plt+0x1a8c>
   12d20:	cmp	r4, #40	; 0x28
   12d24:	moveq	r0, #40	; 0x28
   12d28:	strbeq	r0, [r6, sl]
   12d2c:	addne	sl, r8, #8
   12d30:	movw	r8, #57736	; 0xe188
   12d34:	movt	r8, #2
   12d38:	mov	r1, #0
   12d3c:	mov	r0, #512	; 0x200
   12d40:	strd	r0, [r8]
   12d44:	cmp	r4, #45	; 0x2d
   12d48:	bne	12da0 <__assert_fail@plt+0x1a24>
   12d4c:	mov	r5, #0
   12d50:	str	r5, [sp]
   12d54:	add	r0, r6, sl
   12d58:	add	r1, sp, #20
   12d5c:	add	r3, sp, #24
   12d60:	mov	r2, #0
   12d64:	bl	1b764 <__assert_fail@plt+0xa3e8>
   12d68:	ldr	r2, [sp, #24]
   12d6c:	ldr	r3, [sp, #28]
   12d70:	subs	r7, r2, #1
   12d74:	sbc	r4, r3, #0
   12d78:	tst	r2, #7
   12d7c:	cmpeq	r0, #0
   12d80:	bne	12e08 <__assert_fail@plt+0x1a8c>
   12d84:	ldrd	r0, [r8]
   12d88:	subs	r0, r7, r0
   12d8c:	sbcs	r0, r4, r1
   12d90:	bcs	12e08 <__assert_fail@plt+0x1a8c>
   12d94:	strd	r2, [r8]
   12d98:	ldr	r0, [sp, #20]
   12d9c:	sub	sl, r0, r6
   12da0:	ldrd	r0, [r8]
   12da4:	lsr	r0, r0, #2
   12da8:	orr	r0, r0, r1, lsl #30
   12dac:	movw	r1, #57756	; 0xe19c
   12db0:	movt	r1, #2
   12db4:	str	r0, [r1]
   12db8:	ldrb	r0, [r6, sl]
   12dbc:	cmp	r0, #32
   12dc0:	addeq	sl, sl, #1
   12dc4:	ldrb	r0, [r6, sl]
   12dc8:	cmp	r0, #40	; 0x28
   12dcc:	mov	r5, #0
   12dd0:	bne	12e08 <__assert_fail@plt+0x1a8c>
   12dd4:	mov	r0, #0
   12dd8:	ldr	r1, [sp, #8]
   12ddc:	str	r0, [r1]
   12de0:	ldr	r0, [sp, #12]
   12de4:	str	r0, [sp]
   12de8:	add	r1, sl, #1
   12dec:	add	r0, r6, r1
   12df0:	ldr	r2, [sp, #16]
   12df4:	sub	r1, r2, r1
   12df8:	mov	r2, r9
   12dfc:	ldr	r3, [fp, #8]
   12e00:	bl	12f4c <__assert_fail@plt+0x1bd0>
   12e04:	mov	r5, r0
   12e08:	mov	r0, r5
   12e0c:	sub	sp, fp, #28
   12e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e14:	movw	r0, #57616	; 0xe110
   12e18:	movt	r0, #2
   12e1c:	ldr	r2, [r0]
   12e20:	cmp	r2, #0
   12e24:	beq	12e08 <__assert_fail@plt+0x1a8c>
   12e28:	mov	r2, #1
   12e2c:	str	r2, [r0]
   12e30:	add	r0, r6, r1
   12e34:	ldr	r2, [fp, #8]
   12e38:	str	r0, [r2]
   12e3c:	mov	r5, #1
   12e40:	ldr	r2, [sp, #12]
   12e44:	cmp	r2, #0
   12e48:	beq	12e08 <__assert_fail@plt+0x1a8c>
   12e4c:	ldr	r2, [sp, #16]
   12e50:	sub	r1, r2, r1
   12e54:	bl	13078 <__assert_fail@plt+0x1cfc>
   12e58:	mov	r5, r0
   12e5c:	cmp	r0, #0
   12e60:	movwne	r5, #1
   12e64:	b	12e08 <__assert_fail@plt+0x1a8c>
   12e68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e6c:	add	fp, sp, #24
   12e70:	mov	r4, r0
   12e74:	cmp	r1, #0
   12e78:	beq	12f04 <__assert_fail@plt+0x1b88>
   12e7c:	movw	r5, #57724	; 0xe17c
   12e80:	movt	r5, #2
   12e84:	movw	r8, #54262	; 0xd3f6
   12e88:	movt	r8, #1
   12e8c:	movw	r6, #54265	; 0xd3f9
   12e90:	movt	r6, #1
   12e94:	movw	r7, #54268	; 0xd3fc
   12e98:	movt	r7, #1
   12e9c:	b	12ea8 <__assert_fail@plt+0x1b2c>
   12ea0:	bl	110c4 <fputs_unlocked@plt>
   12ea4:	add	r4, r4, #1
   12ea8:	ldrb	r0, [r4]
   12eac:	cmp	r0, #12
   12eb0:	ble	12ed0 <__assert_fail@plt+0x1b54>
   12eb4:	cmp	r0, #13
   12eb8:	beq	12ee4 <__assert_fail@plt+0x1b68>
   12ebc:	cmp	r0, #92	; 0x5c
   12ec0:	bne	12ef8 <__assert_fail@plt+0x1b7c>
   12ec4:	ldr	r1, [r5]
   12ec8:	mov	r0, r7
   12ecc:	b	12ea0 <__assert_fail@plt+0x1b24>
   12ed0:	cmp	r0, #10
   12ed4:	bne	12ef0 <__assert_fail@plt+0x1b74>
   12ed8:	ldr	r1, [r5]
   12edc:	mov	r0, r8
   12ee0:	b	12ea0 <__assert_fail@plt+0x1b24>
   12ee4:	ldr	r1, [r5]
   12ee8:	mov	r0, r6
   12eec:	b	12ea0 <__assert_fail@plt+0x1b24>
   12ef0:	cmp	r0, #0
   12ef4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ef8:	bl	11370 <putchar_unlocked@plt>
   12efc:	add	r4, r4, #1
   12f00:	b	12ea8 <__assert_fail@plt+0x1b2c>
   12f04:	movw	r0, #57724	; 0xe17c
   12f08:	movt	r0, #2
   12f0c:	ldr	r1, [r0]
   12f10:	mov	r0, r4
   12f14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f18:	b	110c4 <fputs_unlocked@plt>
   12f1c:	cmp	r1, #0
   12f20:	bxeq	lr
   12f24:	push	{r4, sl, fp, lr}
   12f28:	add	fp, sp, #8
   12f2c:	movw	r4, #16960	; 0x4240
   12f30:	movt	r4, #15
   12f34:	mov	r2, r4
   12f38:	mov	r3, #0
   12f3c:	bl	1c530 <__assert_fail@plt+0xb1b4>
   12f40:	add	r0, r2, r4
   12f44:	pop	{r4, sl, fp, lr}
   12f48:	bx	lr
   12f4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f50:	add	fp, sp, #24
   12f54:	cmp	r1, #0
   12f58:	beq	12fe8 <__assert_fail@plt+0x1c6c>
   12f5c:	mov	r8, r2
   12f60:	ldr	ip, [fp, #8]
   12f64:	mov	r4, #1
   12f68:	mov	r7, r0
   12f6c:	mov	r6, r7
   12f70:	mov	r5, r4
   12f74:	cmp	r1, r4
   12f78:	addne	r7, r6, r1
   12f7c:	ldrbne	r2, [r7, #-1]
   12f80:	addne	r4, r5, #1
   12f84:	subne	r7, r6, #1
   12f88:	cmpne	r2, #41	; 0x29
   12f8c:	bne	12f6c <__assert_fail@plt+0x1bf0>
   12f90:	add	r6, r6, r1
   12f94:	ldrb	r2, [r6, #-1]
   12f98:	cmp	r2, #41	; 0x29
   12f9c:	bne	12fe8 <__assert_fail@plt+0x1c6c>
   12fa0:	str	r0, [r3]
   12fa4:	cmp	ip, #0
   12fa8:	beq	12fbc <__assert_fail@plt+0x1c40>
   12fac:	sub	r1, r1, r5
   12fb0:	bl	13078 <__assert_fail@plt+0x1cfc>
   12fb4:	cmp	r0, #0
   12fb8:	beq	12fe8 <__assert_fail@plt+0x1c6c>
   12fbc:	add	r0, r6, #1
   12fc0:	mov	r1, #0
   12fc4:	strb	r1, [r6, #-1]
   12fc8:	b	12fd0 <__assert_fail@plt+0x1c54>
   12fcc:	add	r0, r0, #1
   12fd0:	ldrb	r1, [r0, #-1]
   12fd4:	cmp	r1, #9
   12fd8:	cmpne	r1, #32
   12fdc:	beq	12fcc <__assert_fail@plt+0x1c50>
   12fe0:	cmp	r1, #61	; 0x3d
   12fe4:	beq	12ff4 <__assert_fail@plt+0x1c78>
   12fe8:	mov	r0, #0
   12fec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ff0:	add	r0, r0, #1
   12ff4:	ldrb	r1, [r0]
   12ff8:	cmp	r1, #32
   12ffc:	cmpne	r1, #9
   13000:	beq	12ff0 <__assert_fail@plt+0x1c74>
   13004:	str	r0, [r8]
   13008:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1300c:	b	13010 <__assert_fail@plt+0x1c94>
   13010:	push	{r4, r5, fp, lr}
   13014:	add	fp, sp, #8
   13018:	mov	r4, r0
   1301c:	movw	r5, #57756	; 0xe19c
   13020:	movt	r5, #2
   13024:	ldr	r0, [r5]
   13028:	cmp	r0, #0
   1302c:	beq	13068 <__assert_fail@plt+0x1cec>
   13030:	bl	11220 <__ctype_b_loc@plt>
   13034:	ldr	r1, [r5]
   13038:	ldr	r2, [r0]
   1303c:	mov	r0, #0
   13040:	mov	r3, #0
   13044:	ldrb	r5, [r4, r3]
   13048:	add	r5, r2, r5, lsl #1
   1304c:	ldrb	r5, [r5, #1]
   13050:	tst	r5, #16
   13054:	popeq	{r4, r5, fp, pc}
   13058:	add	r3, r3, #1
   1305c:	cmp	r3, r1
   13060:	bcc	13044 <__assert_fail@plt+0x1cc8>
   13064:	add	r4, r4, r3
   13068:	ldrb	r0, [r4]
   1306c:	clz	r0, r0
   13070:	lsr	r0, r0, #5
   13074:	pop	{r4, r5, fp, pc}
   13078:	push	{r4, sl, fp, lr}
   1307c:	add	fp, sp, #8
   13080:	cmp	r1, #0
   13084:	mov	lr, r0
   13088:	beq	130fc <__assert_fail@plt+0x1d80>
   1308c:	sub	ip, r1, #1
   13090:	mov	r3, #0
   13094:	mov	lr, r0
   13098:	ldrb	r2, [r0, r3]
   1309c:	cmp	r2, #92	; 0x5c
   130a0:	beq	130b4 <__assert_fail@plt+0x1d38>
   130a4:	cmp	r2, #0
   130a8:	moveq	r0, #0
   130ac:	popeq	{r4, sl, fp, pc}
   130b0:	b	130ec <__assert_fail@plt+0x1d70>
   130b4:	cmp	r3, ip
   130b8:	beq	13110 <__assert_fail@plt+0x1d94>
   130bc:	add	r3, r3, #1
   130c0:	ldrb	r4, [r0, r3]
   130c4:	cmp	r4, #92	; 0x5c
   130c8:	beq	130e8 <__assert_fail@plt+0x1d6c>
   130cc:	mov	r2, #10
   130d0:	cmp	r4, #110	; 0x6e
   130d4:	beq	130ec <__assert_fail@plt+0x1d70>
   130d8:	cmp	r4, #114	; 0x72
   130dc:	bne	13110 <__assert_fail@plt+0x1d94>
   130e0:	mov	r2, #13
   130e4:	b	130ec <__assert_fail@plt+0x1d70>
   130e8:	mov	r2, #92	; 0x5c
   130ec:	strb	r2, [lr], #1
   130f0:	add	r3, r3, #1
   130f4:	cmp	r3, r1
   130f8:	bcc	13098 <__assert_fail@plt+0x1d1c>
   130fc:	add	r1, r0, r1
   13100:	cmp	lr, r1
   13104:	movcc	r1, #0
   13108:	strbcc	r1, [lr]
   1310c:	pop	{r4, sl, fp, pc}
   13110:	mov	r0, #0
   13114:	pop	{r4, sl, fp, pc}
   13118:	push	{r4, r5, r6, sl, fp, lr}
   1311c:	add	fp, sp, #16
   13120:	mov	r5, r1
   13124:	mov	r4, r0
   13128:	bl	13170 <__assert_fail@plt+0x1df4>
   1312c:	mov	r6, #0
   13130:	add	r0, r5, r6
   13134:	bl	131cc <__assert_fail@plt+0x1e50>
   13138:	mov	r2, r4
   1313c:	ldr	r3, [r2, r6]!
   13140:	eor	r0, r3, r0
   13144:	str	r0, [r2]
   13148:	ldr	r0, [r2, #4]
   1314c:	eor	r0, r0, r1
   13150:	str	r0, [r2, #4]
   13154:	add	r6, r6, #8
   13158:	cmp	r6, #64	; 0x40
   1315c:	bne	13130 <__assert_fail@plt+0x1db4>
   13160:	ldrb	r0, [r5]
   13164:	str	r0, [r4, #228]	; 0xe4
   13168:	mov	r0, #0
   1316c:	pop	{r4, r5, r6, sl, fp, pc}
   13170:	push	{r4, sl, fp, lr}
   13174:	add	fp, sp, #8
   13178:	mov	r4, r0
   1317c:	add	r0, r0, #64	; 0x40
   13180:	mov	r1, #0
   13184:	mov	r2, #176	; 0xb0
   13188:	bl	11280 <memset@plt>
   1318c:	movw	r0, #54592	; 0xd540
   13190:	movt	r0, #1
   13194:	add	r1, r0, #16
   13198:	mov	r2, #48	; 0x30
   1319c:	vld1.64	{d16-d17}, [r1]
   131a0:	add	r1, r4, #16
   131a4:	add	r3, r0, #32
   131a8:	vld1.64	{d18-d19}, [r0], r2
   131ac:	vld1.64	{d20-d21}, [r3]
   131b0:	vld1.64	{d22-d23}, [r0]
   131b4:	vst1.64	{d16-d17}, [r1]
   131b8:	add	r0, r4, #32
   131bc:	vst1.64	{d20-d21}, [r0]
   131c0:	vst1.64	{d18-d19}, [r4], r2
   131c4:	vst1.64	{d22-d23}, [r4]
   131c8:	pop	{r4, sl, fp, pc}
   131cc:	ldr	r2, [r0]
   131d0:	ldr	r1, [r0, #4]
   131d4:	mov	r0, r2
   131d8:	bx	lr
   131dc:	push	{r4, r5, fp, lr}
   131e0:	add	fp, sp, #8
   131e4:	sub	sp, sp, #64	; 0x40
   131e8:	mov	r4, r0
   131ec:	sub	r2, r1, #1
   131f0:	mvn	r0, #0
   131f4:	cmp	r2, #63	; 0x3f
   131f8:	bhi	13258 <__assert_fail@plt+0x1edc>
   131fc:	strb	r1, [sp]
   13200:	mov	r0, #256	; 0x100
   13204:	strh	r0, [sp, #1]
   13208:	mov	r0, #1
   1320c:	strb	r0, [sp, #3]
   13210:	mov	r5, sp
   13214:	orr	r0, r5, #4
   13218:	bl	13260 <__assert_fail@plt+0x1ee4>
   1321c:	add	r0, r5, #8
   13220:	bl	13260 <__assert_fail@plt+0x1ee4>
   13224:	add	r0, r5, #12
   13228:	bl	13260 <__assert_fail@plt+0x1ee4>
   1322c:	vmov.i32	q8, #0	; 0x00000000
   13230:	add	r0, r5, #48	; 0x30
   13234:	vst1.64	{d16-d17}, [r0]
   13238:	add	r0, r5, #32
   1323c:	vst1.64	{d16-d17}, [r0]
   13240:	add	r0, r5, #16
   13244:	vst1.64	{d16-d17}, [r0]
   13248:	mov	r0, r4
   1324c:	mov	r1, r5
   13250:	bl	13118 <__assert_fail@plt+0x1d9c>
   13254:	mov	r0, #0
   13258:	sub	sp, fp, #8
   1325c:	pop	{r4, r5, fp, pc}
   13260:	mov	r1, #0
   13264:	str	r1, [r0]
   13268:	bx	lr
   1326c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13270:	add	fp, sp, #24
   13274:	sub	sp, sp, #192	; 0xc0
   13278:	mov	r4, r0
   1327c:	sub	r0, r1, #1
   13280:	mvn	r7, #0
   13284:	cmp	r0, #63	; 0x3f
   13288:	bhi	13340 <__assert_fail@plt+0x1fc4>
   1328c:	mov	r6, r2
   13290:	cmp	r2, #0
   13294:	beq	13340 <__assert_fail@plt+0x1fc4>
   13298:	mov	r5, r3
   1329c:	sub	r0, r3, #1
   132a0:	cmp	r0, #63	; 0x3f
   132a4:	bhi	13340 <__assert_fail@plt+0x1fc4>
   132a8:	strb	r5, [fp, #-87]	; 0xffffffa9
   132ac:	strb	r1, [fp, #-88]	; 0xffffffa8
   132b0:	movw	r0, #257	; 0x101
   132b4:	strh	r0, [fp, #-86]	; 0xffffffaa
   132b8:	sub	r7, fp, #88	; 0x58
   132bc:	orr	r0, r7, #4
   132c0:	bl	13260 <__assert_fail@plt+0x1ee4>
   132c4:	add	r0, r7, #8
   132c8:	bl	13260 <__assert_fail@plt+0x1ee4>
   132cc:	add	r0, r7, #12
   132d0:	bl	13260 <__assert_fail@plt+0x1ee4>
   132d4:	vmov.i32	q8, #0	; 0x00000000
   132d8:	add	r0, r7, #48	; 0x30
   132dc:	vst1.64	{d16-d17}, [r0]
   132e0:	add	r0, r7, #32
   132e4:	vst1.64	{d16-d17}, [r0]
   132e8:	add	r0, r7, #16
   132ec:	vst1.64	{d16-d17}, [r0]
   132f0:	mov	r0, r4
   132f4:	mov	r1, r7
   132f8:	bl	13118 <__assert_fail@plt+0x1d9c>
   132fc:	mov	r8, sp
   13300:	add	r0, r8, r5
   13304:	rsb	r2, r5, #128	; 0x80
   13308:	mov	r7, #0
   1330c:	mov	r1, #0
   13310:	bl	11280 <memset@plt>
   13314:	mov	r0, r8
   13318:	mov	r1, r6
   1331c:	mov	r2, r5
   13320:	bl	11124 <memcpy@plt>
   13324:	mov	r0, r4
   13328:	mov	r1, r8
   1332c:	mov	r2, #128	; 0x80
   13330:	bl	1334c <__assert_fail@plt+0x1fd0>
   13334:	mov	r0, r8
   13338:	mov	r1, #128	; 0x80
   1333c:	bl	13454 <__assert_fail@plt+0x20d8>
   13340:	mov	r0, r7
   13344:	sub	sp, fp, #24
   13348:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1334c:	cmp	r2, #0
   13350:	beq	1344c <__assert_fail@plt+0x20d0>
   13354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13358:	add	fp, sp, #28
   1335c:	sub	sp, sp, #4
   13360:	mov	r5, r2
   13364:	mov	r9, r1
   13368:	mov	r4, r0
   1336c:	ldr	sl, [r0, #224]	; 0xe0
   13370:	rsb	r7, sl, #128	; 0x80
   13374:	cmp	r7, r2
   13378:	bcs	13420 <__assert_fail@plt+0x20a4>
   1337c:	mov	r0, #0
   13380:	str	r0, [r4, #224]	; 0xe0
   13384:	add	r8, r4, #96	; 0x60
   13388:	add	r0, r8, sl
   1338c:	mov	r1, r9
   13390:	mov	r2, r7
   13394:	bl	11124 <memcpy@plt>
   13398:	mov	r0, r4
   1339c:	mov	r2, #128	; 0x80
   133a0:	mov	r3, #0
   133a4:	bl	1346c <__assert_fail@plt+0x20f0>
   133a8:	mov	r0, r4
   133ac:	mov	r1, r8
   133b0:	bl	1349c <__assert_fail@plt+0x2120>
   133b4:	sub	r6, r5, r7
   133b8:	add	r7, r9, r7
   133bc:	cmp	r6, #129	; 0x81
   133c0:	bcc	13418 <__assert_fail@plt+0x209c>
   133c4:	add	r0, sl, r5
   133c8:	movw	r1, #257	; 0x101
   133cc:	sub	r1, r0, r1
   133d0:	bic	r5, r1, #127	; 0x7f
   133d4:	add	r1, r5, #256	; 0x100
   133d8:	sub	r8, r1, sl
   133dc:	sub	sl, r0, #256	; 0x100
   133e0:	mov	r0, r4
   133e4:	mov	r2, #128	; 0x80
   133e8:	mov	r3, #0
   133ec:	bl	1346c <__assert_fail@plt+0x20f0>
   133f0:	mov	r0, r4
   133f4:	mov	r1, r7
   133f8:	bl	1349c <__assert_fail@plt+0x2120>
   133fc:	sub	r6, r6, #128	; 0x80
   13400:	add	r7, r7, #128	; 0x80
   13404:	cmp	r6, #128	; 0x80
   13408:	bhi	133e0 <__assert_fail@plt+0x2064>
   1340c:	sub	r5, sl, r5
   13410:	add	r9, r9, r8
   13414:	b	13420 <__assert_fail@plt+0x20a4>
   13418:	mov	r9, r7
   1341c:	mov	r5, r6
   13420:	ldr	r0, [r4, #224]	; 0xe0
   13424:	add	r0, r4, r0
   13428:	add	r0, r0, #96	; 0x60
   1342c:	mov	r1, r9
   13430:	mov	r2, r5
   13434:	bl	11124 <memcpy@plt>
   13438:	ldr	r0, [r4, #224]	; 0xe0
   1343c:	add	r0, r0, r5
   13440:	str	r0, [r4, #224]	; 0xe0
   13444:	sub	sp, fp, #28
   13448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1344c:	mov	r0, #0
   13450:	bx	lr
   13454:	mov	r2, r1
   13458:	movw	r1, #54656	; 0xd580
   1345c:	movt	r1, #1
   13460:	ldr	r3, [r1]
   13464:	mov	r1, #0
   13468:	bx	r3
   1346c:	push	{r4, sl, fp, lr}
   13470:	add	fp, sp, #8
   13474:	add	lr, r0, #64	; 0x40
   13478:	ldm	lr, {r1, ip, lr}
   1347c:	ldr	r4, [r0, #76]	; 0x4c
   13480:	adds	r1, r1, r2
   13484:	adcs	r2, ip, r3
   13488:	adcs	r3, lr, #0
   1348c:	adc	r4, r4, #0
   13490:	add	r0, r0, #64	; 0x40
   13494:	stm	r0, {r1, r2, r3, r4}
   13498:	pop	{r4, sl, fp, pc}
   1349c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134a0:	add	fp, sp, #28
   134a4:	sub	sp, sp, #548	; 0x224
   134a8:	mov	r4, r1
   134ac:	mov	r7, r0
   134b0:	mov	r5, #0
   134b4:	sub	r6, fp, #160	; 0xa0
   134b8:	add	r0, r4, r5
   134bc:	bl	131cc <__assert_fail@plt+0x1e50>
   134c0:	str	r0, [r6, r5]
   134c4:	add	r0, r6, r5
   134c8:	str	r1, [r0, #4]
   134cc:	add	r5, r5, #8
   134d0:	cmp	r5, #128	; 0x80
   134d4:	bne	134b8 <__assert_fail@plt+0x213c>
   134d8:	add	r0, r7, #16
   134dc:	add	r1, r7, #48	; 0x30
   134e0:	add	r2, r7, #32
   134e4:	add	r6, sp, #288	; 0x120
   134e8:	vld1.64	{d16-d17}, [r2]
   134ec:	add	r2, r6, #32
   134f0:	mov	r3, #72	; 0x48
   134f4:	vld1.64	{d18-d19}, [r1]
   134f8:	vld1.64	{d20-d21}, [r0]
   134fc:	mov	r0, r7
   13500:	vld1.64	{d22-d23}, [r0], r3
   13504:	vst1.64	{d16-d17}, [r2]
   13508:	add	r1, r6, #48	; 0x30
   1350c:	vst1.64	{d18-d19}, [r1]
   13510:	add	r1, r6, #16
   13514:	vst1.64	{d20-d21}, [r1]
   13518:	movw	r1, #62778	; 0xf53a
   1351c:	movt	r1, #42319	; 0xa54f
   13520:	str	r1, [sp, #380]	; 0x17c
   13524:	movw	r1, #14065	; 0x36f1
   13528:	movt	r1, #24349	; 0x5f1d
   1352c:	str	r1, [sp, #376]	; 0x178
   13530:	mov	r1, #56	; 0x38
   13534:	vst1.64	{d22-d23}, [r6], r1
   13538:	str	r6, [sp, #156]	; 0x9c
   1353c:	ldr	r1, [sp, #288]	; 0x120
   13540:	ldr	r2, [sp, #292]	; 0x124
   13544:	ldr	r6, [sp, #320]	; 0x140
   13548:	ldr	sl, [sp, #324]	; 0x144
   1354c:	adds	r1, r6, r1
   13550:	adc	r2, sl, r2
   13554:	ldr	r3, [fp, #-160]	; 0xffffff60
   13558:	str	r3, [sp, #164]	; 0xa4
   1355c:	ldr	r5, [fp, #-156]	; 0xffffff64
   13560:	str	r5, [sp, #160]	; 0xa0
   13564:	adds	r4, r1, r3
   13568:	str	r4, [sp, #272]	; 0x110
   1356c:	adc	r5, r2, r5
   13570:	str	r5, [sp, #276]	; 0x114
   13574:	ldrd	r2, [r7, #64]	; 0x40
   13578:	ldr	r1, [r7, #80]	; 0x50
   1357c:	str	r1, [sp, #268]	; 0x10c
   13580:	ldr	r1, [r7, #84]	; 0x54
   13584:	str	r1, [sp, #264]	; 0x108
   13588:	ldr	r1, [r7, #88]	; 0x58
   1358c:	str	r1, [sp, #260]	; 0x104
   13590:	ldr	r1, [r7, #92]	; 0x5c
   13594:	str	r1, [sp, #256]	; 0x100
   13598:	eor	r1, r5, r3
   1359c:	movw	r3, #21119	; 0x527f
   135a0:	movt	r3, #20750	; 0x510e
   135a4:	eor	r1, r1, r3
   135a8:	ldr	r3, [r0]
   135ac:	ldr	r0, [r0, #4]
   135b0:	str	r3, [sp, #280]	; 0x118
   135b4:	str	r0, [sp, #284]	; 0x11c
   135b8:	eor	r0, r4, r2
   135bc:	movw	r2, #33489	; 0x82d1
   135c0:	movt	r2, #44518	; 0xade6
   135c4:	eor	r0, r0, r2
   135c8:	mov	r2, #32
   135cc:	bl	18c30 <__assert_fail@plt+0x78b4>
   135d0:	mov	r4, r0
   135d4:	mov	r5, r1
   135d8:	movw	r0, #51464	; 0xc908
   135dc:	movt	r0, #62396	; 0xf3bc
   135e0:	str	r7, [sp, #152]	; 0x98
   135e4:	adds	r8, r4, r0
   135e8:	movw	r0, #58983	; 0xe667
   135ec:	movt	r0, #27145	; 0x6a09
   135f0:	adc	r9, r1, r0
   135f4:	eor	r1, r9, sl
   135f8:	eor	r0, r8, r6
   135fc:	mov	r2, #24
   13600:	bl	18c30 <__assert_fail@plt+0x78b4>
   13604:	mov	r6, r0
   13608:	mov	r7, r1
   1360c:	ldr	r0, [sp, #272]	; 0x110
   13610:	adds	r0, r6, r0
   13614:	ldr	r1, [sp, #276]	; 0x114
   13618:	adc	r1, r7, r1
   1361c:	ldr	r2, [fp, #-152]	; 0xffffff68
   13620:	str	r2, [sp, #252]	; 0xfc
   13624:	ldr	r3, [fp, #-148]	; 0xffffff6c
   13628:	str	r3, [sp, #248]	; 0xf8
   1362c:	adds	r2, r0, r2
   13630:	str	r2, [sp, #240]	; 0xf0
   13634:	adc	r0, r1, r3
   13638:	str	r0, [sp, #244]	; 0xf4
   1363c:	eor	r1, r0, r5
   13640:	eor	r0, r2, r4
   13644:	mov	r2, #16
   13648:	bl	18c30 <__assert_fail@plt+0x78b4>
   1364c:	mov	r5, r0
   13650:	str	r0, [sp, #236]	; 0xec
   13654:	mov	r4, r1
   13658:	str	r1, [sp, #232]	; 0xe8
   1365c:	adds	r2, r0, r8
   13660:	str	r2, [sp, #196]	; 0xc4
   13664:	adc	r3, r1, r9
   13668:	str	r3, [sp, #192]	; 0xc0
   1366c:	eor	r1, r3, r7
   13670:	eor	r0, r2, r6
   13674:	str	r4, [sp, #388]	; 0x184
   13678:	str	r5, [sp, #384]	; 0x180
   1367c:	str	r2, [sp, #352]	; 0x160
   13680:	str	r3, [sp, #356]	; 0x164
   13684:	mov	r2, #63	; 0x3f
   13688:	bl	18c30 <__assert_fail@plt+0x78b4>
   1368c:	mov	r5, r0
   13690:	str	r0, [sp, #176]	; 0xb0
   13694:	mov	r4, r1
   13698:	str	r1, [sp, #180]	; 0xb4
   1369c:	ldr	r0, [sp, #296]	; 0x128
   136a0:	ldr	r1, [sp, #300]	; 0x12c
   136a4:	ldr	r6, [sp, #328]	; 0x148
   136a8:	ldr	r7, [sp, #332]	; 0x14c
   136ac:	adds	r0, r6, r0
   136b0:	adc	r1, r7, r1
   136b4:	ldr	r2, [fp, #-144]	; 0xffffff70
   136b8:	str	r2, [sp, #276]	; 0x114
   136bc:	ldr	r3, [fp, #-140]	; 0xffffff74
   136c0:	str	r3, [sp, #272]	; 0x110
   136c4:	adds	r2, r0, r2
   136c8:	str	r2, [sp, #228]	; 0xe4
   136cc:	ldr	r0, [sp, #280]	; 0x118
   136d0:	eor	r0, r2, r0
   136d4:	movw	r2, #27679	; 0x6c1f
   136d8:	movt	r2, #11070	; 0x2b3e
   136dc:	eor	r0, r0, r2
   136e0:	adc	r9, r1, r3
   136e4:	ldr	r1, [sp, #284]	; 0x11c
   136e8:	eor	r1, r9, r1
   136ec:	movw	r2, #26764	; 0x688c
   136f0:	movt	r2, #39685	; 0x9b05
   136f4:	eor	r1, r1, r2
   136f8:	str	r4, [sp, #324]	; 0x144
   136fc:	str	r5, [sp, #320]	; 0x140
   13700:	mov	r2, #32
   13704:	bl	18c30 <__assert_fail@plt+0x78b4>
   13708:	mov	r4, r0
   1370c:	mov	r5, r1
   13710:	movw	r0, #42811	; 0xa73b
   13714:	movt	r0, #33994	; 0x84ca
   13718:	adds	sl, r4, r0
   1371c:	movw	r0, #44677	; 0xae85
   13720:	movt	r0, #47975	; 0xbb67
   13724:	adc	r8, r1, r0
   13728:	eor	r1, r8, r7
   1372c:	eor	r0, sl, r6
   13730:	mov	r2, #24
   13734:	bl	18c30 <__assert_fail@plt+0x78b4>
   13738:	mov	r6, r0
   1373c:	mov	r7, r1
   13740:	ldr	r0, [sp, #228]	; 0xe4
   13744:	adds	r0, r6, r0
   13748:	adc	r1, r1, r9
   1374c:	ldr	r2, [fp, #-136]	; 0xffffff78
   13750:	str	r2, [sp, #284]	; 0x11c
   13754:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13758:	str	r3, [sp, #280]	; 0x118
   1375c:	adds	r2, r0, r2
   13760:	str	r2, [sp, #216]	; 0xd8
   13764:	adc	r0, r1, r3
   13768:	str	r0, [sp, #220]	; 0xdc
   1376c:	eor	r1, r0, r5
   13770:	eor	r0, r2, r4
   13774:	mov	r2, #16
   13778:	bl	18c30 <__assert_fail@plt+0x78b4>
   1377c:	mov	r5, r0
   13780:	str	r0, [sp, #168]	; 0xa8
   13784:	mov	r4, r1
   13788:	str	r1, [sp, #172]	; 0xac
   1378c:	adds	r2, r0, sl
   13790:	str	r2, [sp, #140]	; 0x8c
   13794:	adc	r3, r1, r8
   13798:	str	r3, [sp, #136]	; 0x88
   1379c:	eor	r1, r3, r7
   137a0:	eor	r0, r2, r6
   137a4:	str	r4, [sp, #396]	; 0x18c
   137a8:	str	r5, [sp, #392]	; 0x188
   137ac:	str	r2, [sp, #360]	; 0x168
   137b0:	str	r3, [sp, #364]	; 0x16c
   137b4:	mov	r2, #63	; 0x3f
   137b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   137bc:	str	r0, [sp, #212]	; 0xd4
   137c0:	str	r1, [sp, #208]	; 0xd0
   137c4:	ldr	r2, [sp, #240]	; 0xf0
   137c8:	adds	r0, r0, r2
   137cc:	str	r0, [sp, #188]	; 0xbc
   137d0:	ldr	r0, [sp, #244]	; 0xf4
   137d4:	adc	r0, r1, r0
   137d8:	str	r0, [sp, #184]	; 0xb8
   137dc:	ldr	r0, [sp, #304]	; 0x130
   137e0:	ldr	r1, [sp, #308]	; 0x134
   137e4:	ldr	r4, [sp, #336]	; 0x150
   137e8:	ldr	r5, [sp, #340]	; 0x154
   137ec:	adds	r0, r4, r0
   137f0:	adc	r1, r5, r1
   137f4:	ldr	r2, [fp, #-128]	; 0xffffff80
   137f8:	str	r2, [sp, #228]	; 0xe4
   137fc:	ldr	r3, [fp, #-124]	; 0xffffff84
   13800:	str	r3, [sp, #224]	; 0xe0
   13804:	adds	r2, r0, r2
   13808:	str	r2, [sp, #244]	; 0xf4
   1380c:	adc	r9, r1, r3
   13810:	ldr	r0, [sp, #264]	; 0x108
   13814:	eor	r0, r9, r0
   13818:	movw	r1, #55723	; 0xd9ab
   1381c:	movt	r1, #8067	; 0x1f83
   13820:	eor	r1, r0, r1
   13824:	ldr	r0, [sp, #268]	; 0x10c
   13828:	eor	r0, r2, r0
   1382c:	movw	r2, #48491	; 0xbd6b
   13830:	movt	r2, #64321	; 0xfb41
   13834:	eor	r0, r0, r2
   13838:	mov	r2, #32
   1383c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13840:	mov	r6, r0
   13844:	mov	r7, r1
   13848:	movw	r0, #63531	; 0xf82b
   1384c:	movt	r0, #65172	; 0xfe94
   13850:	adds	sl, r6, r0
   13854:	movw	r0, #62322	; 0xf372
   13858:	movt	r0, #15470	; 0x3c6e
   1385c:	adc	r8, r1, r0
   13860:	eor	r1, r8, r5
   13864:	eor	r0, sl, r4
   13868:	mov	r2, #24
   1386c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13870:	mov	r4, r0
   13874:	mov	r5, r1
   13878:	ldr	r0, [sp, #244]	; 0xf4
   1387c:	adds	r0, r4, r0
   13880:	adc	r1, r1, r9
   13884:	ldr	r2, [fp, #-120]	; 0xffffff88
   13888:	str	r2, [sp, #268]	; 0x10c
   1388c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   13890:	str	r3, [sp, #264]	; 0x108
   13894:	adds	r2, r0, r2
   13898:	str	r2, [sp, #96]	; 0x60
   1389c:	adc	r0, r1, r3
   138a0:	str	r0, [sp, #100]	; 0x64
   138a4:	eor	r1, r0, r7
   138a8:	eor	r0, r2, r6
   138ac:	mov	r2, #16
   138b0:	bl	18c30 <__assert_fail@plt+0x78b4>
   138b4:	str	r0, [sp, #116]	; 0x74
   138b8:	str	r1, [sp, #112]	; 0x70
   138bc:	adds	r2, r0, sl
   138c0:	str	r2, [sp, #144]	; 0x90
   138c4:	adc	r0, r1, r8
   138c8:	str	r0, [sp, #148]	; 0x94
   138cc:	eor	r1, r0, r5
   138d0:	eor	r0, r2, r4
   138d4:	mov	r2, #63	; 0x3f
   138d8:	bl	18c30 <__assert_fail@plt+0x78b4>
   138dc:	str	r0, [sp, #124]	; 0x7c
   138e0:	str	r1, [sp, #120]	; 0x78
   138e4:	ldr	r0, [sp, #156]	; 0x9c
   138e8:	ldrd	r6, [r0]
   138ec:	ldr	r0, [sp, #312]	; 0x138
   138f0:	ldr	r1, [sp, #316]	; 0x13c
   138f4:	adds	r0, r6, r0
   138f8:	adc	r1, r7, r1
   138fc:	ldr	r2, [fp, #-112]	; 0xffffff90
   13900:	str	r2, [sp, #244]	; 0xf4
   13904:	ldr	r3, [fp, #-108]	; 0xffffff94
   13908:	str	r3, [sp, #240]	; 0xf0
   1390c:	adds	r8, r0, r2
   13910:	adc	sl, r1, r3
   13914:	ldr	r0, [sp, #256]	; 0x100
   13918:	eor	r0, sl, r0
   1391c:	movw	r1, #52505	; 0xcd19
   13920:	movt	r1, #23520	; 0x5be0
   13924:	eor	r1, r0, r1
   13928:	ldr	r0, [sp, #260]	; 0x104
   1392c:	eor	r0, r8, r0
   13930:	movw	r2, #8569	; 0x2179
   13934:	movt	r2, #4990	; 0x137e
   13938:	eor	r0, r0, r2
   1393c:	mov	r2, #32
   13940:	bl	18c30 <__assert_fail@plt+0x78b4>
   13944:	mov	r4, r0
   13948:	mov	r5, r1
   1394c:	movw	r0, #14065	; 0x36f1
   13950:	movt	r0, #24349	; 0x5f1d
   13954:	adds	r9, r4, r0
   13958:	movw	r0, #62778	; 0xf53a
   1395c:	movt	r0, #42319	; 0xa54f
   13960:	adc	r0, r1, r0
   13964:	str	r0, [sp, #204]	; 0xcc
   13968:	eor	r1, r0, r7
   1396c:	eor	r0, r9, r6
   13970:	mov	r2, #24
   13974:	bl	18c30 <__assert_fail@plt+0x78b4>
   13978:	mov	r6, r0
   1397c:	mov	r7, r1
   13980:	adds	r0, r0, r8
   13984:	adc	r1, r1, sl
   13988:	ldr	r2, [fp, #-104]	; 0xffffff98
   1398c:	str	r2, [sp, #260]	; 0x104
   13990:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13994:	str	r3, [sp, #256]	; 0x100
   13998:	adds	r2, r0, r2
   1399c:	str	r2, [sp, #64]	; 0x40
   139a0:	adc	r0, r1, r3
   139a4:	str	r0, [sp, #68]	; 0x44
   139a8:	eor	r1, r0, r5
   139ac:	eor	r0, r2, r4
   139b0:	mov	r2, #16
   139b4:	bl	18c30 <__assert_fail@plt+0x78b4>
   139b8:	mov	r4, r0
   139bc:	mov	r5, r1
   139c0:	adds	r2, r0, r9
   139c4:	str	r2, [sp, #80]	; 0x50
   139c8:	ldr	r0, [sp, #204]	; 0xcc
   139cc:	adc	r0, r1, r0
   139d0:	str	r0, [sp, #84]	; 0x54
   139d4:	eor	r1, r0, r7
   139d8:	eor	r0, r2, r6
   139dc:	mov	r2, #63	; 0x3f
   139e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   139e4:	str	r0, [sp, #76]	; 0x4c
   139e8:	str	r1, [sp, #72]	; 0x48
   139ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   139f0:	str	r0, [sp, #204]	; 0xcc
   139f4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   139f8:	str	r1, [sp, #200]	; 0xc8
   139fc:	ldr	r2, [sp, #188]	; 0xbc
   13a00:	adds	r6, r2, r0
   13a04:	ldr	r0, [sp, #184]	; 0xb8
   13a08:	adc	r8, r0, r1
   13a0c:	eor	r1, r8, r5
   13a10:	eor	r0, r6, r4
   13a14:	mov	r2, #32
   13a18:	bl	18c30 <__assert_fail@plt+0x78b4>
   13a1c:	mov	r4, r0
   13a20:	mov	r5, r1
   13a24:	ldr	r0, [sp, #144]	; 0x90
   13a28:	adds	sl, r4, r0
   13a2c:	ldr	r0, [sp, #148]	; 0x94
   13a30:	adc	r1, r1, r0
   13a34:	str	r1, [sp, #188]	; 0xbc
   13a38:	ldr	r0, [sp, #208]	; 0xd0
   13a3c:	eor	r1, r1, r0
   13a40:	ldr	r0, [sp, #212]	; 0xd4
   13a44:	eor	r0, sl, r0
   13a48:	mov	r2, #24
   13a4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13a50:	mov	r7, r0
   13a54:	mov	r9, r1
   13a58:	adds	r0, r0, r6
   13a5c:	adc	r1, r1, r8
   13a60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a64:	str	r2, [sp, #212]	; 0xd4
   13a68:	ldr	r3, [fp, #-84]	; 0xffffffac
   13a6c:	str	r3, [sp, #208]	; 0xd0
   13a70:	adds	r2, r0, r2
   13a74:	str	r2, [sp, #88]	; 0x58
   13a78:	adc	r0, r1, r3
   13a7c:	str	r0, [sp, #92]	; 0x5c
   13a80:	eor	r1, r0, r5
   13a84:	eor	r0, r2, r4
   13a88:	mov	r2, #16
   13a8c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13a90:	mov	r2, r0
   13a94:	str	r0, [sp, #148]	; 0x94
   13a98:	mov	r3, r1
   13a9c:	str	r1, [sp, #144]	; 0x90
   13aa0:	adds	r6, r0, sl
   13aa4:	str	r6, [sp, #132]	; 0x84
   13aa8:	ldr	r0, [sp, #188]	; 0xbc
   13aac:	adc	r5, r1, r0
   13ab0:	str	r5, [sp, #128]	; 0x80
   13ab4:	eor	r1, r5, r9
   13ab8:	eor	r0, r6, r7
   13abc:	str	r3, [sp, #412]	; 0x19c
   13ac0:	str	r2, [sp, #408]	; 0x198
   13ac4:	str	r6, [sp, #368]	; 0x170
   13ac8:	str	r5, [sp, #372]	; 0x174
   13acc:	mov	r2, #63	; 0x3f
   13ad0:	bl	18c30 <__assert_fail@plt+0x78b4>
   13ad4:	str	r0, [sp, #108]	; 0x6c
   13ad8:	str	r1, [sp, #104]	; 0x68
   13adc:	ldr	r0, [sp, #216]	; 0xd8
   13ae0:	ldr	r6, [sp, #124]	; 0x7c
   13ae4:	adds	r0, r6, r0
   13ae8:	ldr	r1, [sp, #220]	; 0xdc
   13aec:	ldr	r7, [sp, #120]	; 0x78
   13af0:	adc	r1, r7, r1
   13af4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13af8:	str	r2, [sp, #188]	; 0xbc
   13afc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13b00:	str	r3, [sp, #184]	; 0xb8
   13b04:	adds	r8, r0, r2
   13b08:	adc	r9, r1, r3
   13b0c:	ldr	r0, [sp, #232]	; 0xe8
   13b10:	eor	r1, r9, r0
   13b14:	ldr	r0, [sp, #236]	; 0xec
   13b18:	eor	r0, r8, r0
   13b1c:	mov	r2, #32
   13b20:	bl	18c30 <__assert_fail@plt+0x78b4>
   13b24:	mov	r4, r0
   13b28:	mov	r5, r1
   13b2c:	ldr	r0, [sp, #80]	; 0x50
   13b30:	adds	sl, r4, r0
   13b34:	ldr	r0, [sp, #84]	; 0x54
   13b38:	adc	r0, r1, r0
   13b3c:	str	r0, [sp, #220]	; 0xdc
   13b40:	eor	r1, r0, r7
   13b44:	eor	r0, sl, r6
   13b48:	mov	r2, #24
   13b4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13b50:	mov	r7, r0
   13b54:	mov	r6, r1
   13b58:	adds	r0, r0, r8
   13b5c:	adc	r1, r1, r9
   13b60:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13b64:	str	r2, [sp, #236]	; 0xec
   13b68:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13b6c:	str	r3, [sp, #232]	; 0xe8
   13b70:	adds	r2, r0, r2
   13b74:	str	r2, [sp, #48]	; 0x30
   13b78:	adc	r0, r1, r3
   13b7c:	str	r0, [sp, #52]	; 0x34
   13b80:	eor	r1, r0, r5
   13b84:	eor	r0, r2, r4
   13b88:	mov	r2, #16
   13b8c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13b90:	str	r0, [sp, #44]	; 0x2c
   13b94:	str	r1, [sp, #40]	; 0x28
   13b98:	adds	r2, r0, sl
   13b9c:	str	r2, [sp, #120]	; 0x78
   13ba0:	ldr	r0, [sp, #220]	; 0xdc
   13ba4:	adc	r0, r1, r0
   13ba8:	str	r0, [sp, #124]	; 0x7c
   13bac:	eor	r1, r0, r6
   13bb0:	eor	r0, r2, r7
   13bb4:	mov	r2, #63	; 0x3f
   13bb8:	bl	18c30 <__assert_fail@plt+0x78b4>
   13bbc:	str	r0, [sp, #84]	; 0x54
   13bc0:	str	r1, [sp, #80]	; 0x50
   13bc4:	ldr	r0, [sp, #96]	; 0x60
   13bc8:	ldr	r6, [sp, #76]	; 0x4c
   13bcc:	adds	r0, r6, r0
   13bd0:	ldr	r1, [sp, #100]	; 0x64
   13bd4:	ldr	r7, [sp, #72]	; 0x48
   13bd8:	adc	r1, r7, r1
   13bdc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13be0:	str	r2, [sp, #220]	; 0xdc
   13be4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13be8:	str	r3, [sp, #216]	; 0xd8
   13bec:	adds	r8, r0, r2
   13bf0:	adc	r9, r1, r3
   13bf4:	ldr	r0, [sp, #168]	; 0xa8
   13bf8:	eor	r0, r8, r0
   13bfc:	ldr	r1, [sp, #172]	; 0xac
   13c00:	eor	r1, r9, r1
   13c04:	mov	r2, #32
   13c08:	bl	18c30 <__assert_fail@plt+0x78b4>
   13c0c:	mov	r4, r0
   13c10:	mov	r5, r1
   13c14:	ldr	r0, [sp, #196]	; 0xc4
   13c18:	adds	sl, r4, r0
   13c1c:	ldr	r0, [sp, #192]	; 0xc0
   13c20:	adc	r0, r1, r0
   13c24:	str	r0, [sp, #172]	; 0xac
   13c28:	eor	r1, r0, r7
   13c2c:	eor	r0, sl, r6
   13c30:	mov	r2, #24
   13c34:	bl	18c30 <__assert_fail@plt+0x78b4>
   13c38:	mov	r7, r0
   13c3c:	mov	r6, r1
   13c40:	adds	r0, r0, r8
   13c44:	adc	r1, r1, r9
   13c48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c4c:	str	r2, [sp, #196]	; 0xc4
   13c50:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13c54:	str	r3, [sp, #192]	; 0xc0
   13c58:	adds	r2, r0, r2
   13c5c:	str	r2, [sp, #56]	; 0x38
   13c60:	adc	r0, r1, r3
   13c64:	str	r0, [sp, #60]	; 0x3c
   13c68:	eor	r1, r0, r5
   13c6c:	eor	r0, r2, r4
   13c70:	mov	r2, #16
   13c74:	bl	18c30 <__assert_fail@plt+0x78b4>
   13c78:	str	r0, [sp, #32]
   13c7c:	str	r1, [sp, #24]
   13c80:	adds	r2, r0, sl
   13c84:	str	r2, [sp, #96]	; 0x60
   13c88:	ldr	r0, [sp, #172]	; 0xac
   13c8c:	adc	r0, r1, r0
   13c90:	str	r0, [sp, #100]	; 0x64
   13c94:	eor	r1, r0, r6
   13c98:	eor	r0, r2, r7
   13c9c:	mov	r2, #63	; 0x3f
   13ca0:	bl	18c30 <__assert_fail@plt+0x78b4>
   13ca4:	str	r0, [sp, #76]	; 0x4c
   13ca8:	str	r1, [sp, #72]	; 0x48
   13cac:	ldr	r7, [sp, #176]	; 0xb0
   13cb0:	ldr	r0, [sp, #64]	; 0x40
   13cb4:	adds	r0, r0, r7
   13cb8:	ldr	r5, [sp, #180]	; 0xb4
   13cbc:	ldr	r1, [sp, #68]	; 0x44
   13cc0:	adc	r1, r1, r5
   13cc4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13cc8:	str	r2, [sp, #172]	; 0xac
   13ccc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13cd0:	str	r3, [sp, #168]	; 0xa8
   13cd4:	adds	r9, r0, r2
   13cd8:	adc	r8, r1, r3
   13cdc:	ldr	r0, [sp, #112]	; 0x70
   13ce0:	eor	r1, r8, r0
   13ce4:	ldr	r0, [sp, #116]	; 0x74
   13ce8:	eor	r0, r9, r0
   13cec:	mov	r2, #32
   13cf0:	bl	18c30 <__assert_fail@plt+0x78b4>
   13cf4:	mov	r4, r0
   13cf8:	mov	r6, r1
   13cfc:	ldr	r0, [sp, #140]	; 0x8c
   13d00:	adds	r2, r4, r0
   13d04:	ldr	r0, [sp, #136]	; 0x88
   13d08:	adc	r0, r1, r0
   13d0c:	str	r0, [sp, #140]	; 0x8c
   13d10:	eor	r1, r0, r5
   13d14:	eor	r0, r2, r7
   13d18:	mov	r5, r2
   13d1c:	mov	r2, #24
   13d20:	bl	18c30 <__assert_fail@plt+0x78b4>
   13d24:	mov	sl, r0
   13d28:	mov	r7, r1
   13d2c:	adds	r0, r0, r9
   13d30:	adc	r1, r1, r8
   13d34:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13d38:	str	r2, [sp, #180]	; 0xb4
   13d3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13d40:	str	r3, [sp, #176]	; 0xb0
   13d44:	adds	r2, r0, r2
   13d48:	str	r2, [sp, #64]	; 0x40
   13d4c:	adc	r0, r1, r3
   13d50:	str	r0, [sp, #68]	; 0x44
   13d54:	eor	r1, r0, r6
   13d58:	eor	r0, r2, r4
   13d5c:	mov	r2, #16
   13d60:	bl	18c30 <__assert_fail@plt+0x78b4>
   13d64:	str	r0, [sp, #36]	; 0x24
   13d68:	str	r1, [sp, #28]
   13d6c:	adds	r2, r0, r5
   13d70:	str	r2, [sp, #16]
   13d74:	ldr	r0, [sp, #140]	; 0x8c
   13d78:	adc	r0, r1, r0
   13d7c:	str	r0, [sp, #20]
   13d80:	eor	r1, r0, r7
   13d84:	eor	r0, r2, sl
   13d88:	mov	r2, #63	; 0x3f
   13d8c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13d90:	mov	r6, r0
   13d94:	mov	r7, r1
   13d98:	ldr	r0, [sp, #172]	; 0xac
   13d9c:	ldr	r1, [sp, #88]	; 0x58
   13da0:	adds	r0, r0, r1
   13da4:	ldr	r1, [sp, #168]	; 0xa8
   13da8:	ldr	r2, [sp, #92]	; 0x5c
   13dac:	adc	r1, r1, r2
   13db0:	adds	r8, r0, r6
   13db4:	adc	sl, r1, r7
   13db8:	ldr	r0, [sp, #40]	; 0x28
   13dbc:	eor	r1, sl, r0
   13dc0:	ldr	r0, [sp, #44]	; 0x2c
   13dc4:	eor	r0, r8, r0
   13dc8:	mov	r2, #32
   13dcc:	bl	18c30 <__assert_fail@plt+0x78b4>
   13dd0:	mov	r4, r0
   13dd4:	mov	r5, r1
   13dd8:	ldr	r0, [sp, #96]	; 0x60
   13ddc:	adds	r9, r4, r0
   13de0:	ldr	r0, [sp, #100]	; 0x64
   13de4:	adc	r0, r1, r0
   13de8:	str	r0, [sp, #140]	; 0x8c
   13dec:	eor	r1, r0, r7
   13df0:	eor	r0, r9, r6
   13df4:	mov	r2, #24
   13df8:	bl	18c30 <__assert_fail@plt+0x78b4>
   13dfc:	mov	r6, r0
   13e00:	mov	r7, r1
   13e04:	ldr	r0, [sp, #188]	; 0xbc
   13e08:	adds	r0, r8, r0
   13e0c:	ldr	r1, [sp, #184]	; 0xb8
   13e10:	adc	r1, sl, r1
   13e14:	adds	r2, r0, r6
   13e18:	str	r2, [sp, #40]	; 0x28
   13e1c:	adc	r0, r1, r7
   13e20:	str	r0, [sp, #44]	; 0x2c
   13e24:	eor	r1, r0, r5
   13e28:	eor	r0, r2, r4
   13e2c:	mov	r2, #16
   13e30:	bl	18c30 <__assert_fail@plt+0x78b4>
   13e34:	str	r0, [sp, #100]	; 0x64
   13e38:	str	r1, [sp, #96]	; 0x60
   13e3c:	adds	r2, r0, r9
   13e40:	str	r2, [sp, #112]	; 0x70
   13e44:	ldr	r0, [sp, #140]	; 0x8c
   13e48:	adc	r0, r1, r0
   13e4c:	str	r0, [sp, #116]	; 0x74
   13e50:	eor	r1, r0, r7
   13e54:	eor	r0, r2, r6
   13e58:	mov	r2, #63	; 0x3f
   13e5c:	bl	18c30 <__assert_fail@plt+0x78b4>
   13e60:	mov	r2, r0
   13e64:	str	r0, [sp, #136]	; 0x88
   13e68:	mov	r3, r1
   13e6c:	str	r1, [sp, #140]	; 0x8c
   13e70:	ldr	r0, [sp, #228]	; 0xe4
   13e74:	ldr	r6, [sp, #108]	; 0x6c
   13e78:	adds	r0, r6, r0
   13e7c:	ldr	r1, [sp, #224]	; 0xe0
   13e80:	ldr	r7, [sp, #104]	; 0x68
   13e84:	adc	r1, r7, r1
   13e88:	ldr	r5, [sp, #48]	; 0x30
   13e8c:	adds	r9, r0, r5
   13e90:	ldr	r0, [sp, #52]	; 0x34
   13e94:	adc	r8, r1, r0
   13e98:	ldr	r0, [sp, #24]
   13e9c:	eor	r1, r0, r8
   13ea0:	ldr	r0, [sp, #32]
   13ea4:	eor	r0, r0, r9
   13ea8:	str	r3, [sp, #324]	; 0x144
   13eac:	str	r2, [sp, #320]	; 0x140
   13eb0:	mov	r2, #32
   13eb4:	bl	18c30 <__assert_fail@plt+0x78b4>
   13eb8:	mov	r4, r0
   13ebc:	mov	r5, r1
   13ec0:	ldr	r0, [sp, #16]
   13ec4:	adds	sl, r4, r0
   13ec8:	ldr	r0, [sp, #20]
   13ecc:	adc	r0, r1, r0
   13ed0:	str	r0, [sp, #32]
   13ed4:	eor	r1, r0, r7
   13ed8:	eor	r0, sl, r6
   13edc:	mov	r2, #24
   13ee0:	bl	18c30 <__assert_fail@plt+0x78b4>
   13ee4:	mov	r6, r0
   13ee8:	mov	r7, r1
   13eec:	ldr	r0, [sp, #204]	; 0xcc
   13ef0:	adds	r0, r9, r0
   13ef4:	ldr	r1, [sp, #200]	; 0xc8
   13ef8:	adc	r1, r8, r1
   13efc:	adds	r2, r0, r6
   13f00:	str	r2, [sp, #48]	; 0x30
   13f04:	adc	r0, r1, r7
   13f08:	str	r0, [sp, #52]	; 0x34
   13f0c:	eor	r1, r0, r5
   13f10:	eor	r0, r2, r4
   13f14:	mov	r2, #16
   13f18:	bl	18c30 <__assert_fail@plt+0x78b4>
   13f1c:	str	r0, [sp, #92]	; 0x5c
   13f20:	str	r1, [sp, #88]	; 0x58
   13f24:	adds	r2, r0, sl
   13f28:	str	r2, [sp, #104]	; 0x68
   13f2c:	ldr	r0, [sp, #32]
   13f30:	adc	r0, r1, r0
   13f34:	str	r0, [sp, #108]	; 0x6c
   13f38:	eor	r1, r0, r7
   13f3c:	eor	r0, r2, r6
   13f40:	mov	r2, #63	; 0x3f
   13f44:	bl	18c30 <__assert_fail@plt+0x78b4>
   13f48:	mov	r2, r0
   13f4c:	str	r0, [sp, #32]
   13f50:	mov	r3, r1
   13f54:	str	r1, [sp, #24]
   13f58:	ldr	r0, [sp, #252]	; 0xfc
   13f5c:	ldr	r1, [sp, #40]	; 0x28
   13f60:	adds	r0, r1, r0
   13f64:	ldr	r1, [sp, #248]	; 0xf8
   13f68:	ldr	r7, [sp, #44]	; 0x2c
   13f6c:	adc	r1, r7, r1
   13f70:	adds	r0, r0, r2
   13f74:	str	r0, [sp, #12]
   13f78:	adc	r0, r1, r3
   13f7c:	str	r0, [sp]
   13f80:	ldr	r0, [sp, #212]	; 0xd4
   13f84:	ldr	r6, [sp, #84]	; 0x54
   13f88:	adds	r0, r6, r0
   13f8c:	ldr	r1, [sp, #208]	; 0xd0
   13f90:	ldr	r7, [sp, #80]	; 0x50
   13f94:	adc	r1, r7, r1
   13f98:	ldr	r2, [sp, #56]	; 0x38
   13f9c:	adds	r8, r0, r2
   13fa0:	ldr	r0, [sp, #60]	; 0x3c
   13fa4:	adc	r9, r1, r0
   13fa8:	ldr	r0, [sp, #28]
   13fac:	eor	r1, r0, r9
   13fb0:	ldr	r0, [sp, #36]	; 0x24
   13fb4:	eor	r0, r0, r8
   13fb8:	mov	r2, #32
   13fbc:	bl	18c30 <__assert_fail@plt+0x78b4>
   13fc0:	mov	r4, r0
   13fc4:	mov	r5, r1
   13fc8:	ldr	r0, [sp, #132]	; 0x84
   13fcc:	adds	sl, r4, r0
   13fd0:	ldr	r0, [sp, #128]	; 0x80
   13fd4:	adc	r0, r1, r0
   13fd8:	str	r0, [sp, #132]	; 0x84
   13fdc:	eor	r1, r0, r7
   13fe0:	eor	r0, sl, r6
   13fe4:	mov	r2, #24
   13fe8:	bl	18c30 <__assert_fail@plt+0x78b4>
   13fec:	mov	r7, r0
   13ff0:	mov	r6, r1
   13ff4:	ldr	r0, [sp, #180]	; 0xb4
   13ff8:	adds	r0, r0, r8
   13ffc:	ldr	r1, [sp, #176]	; 0xb0
   14000:	adc	r1, r1, r9
   14004:	adds	r2, r0, r7
   14008:	str	r2, [sp, #16]
   1400c:	adc	r0, r1, r6
   14010:	str	r0, [sp, #44]	; 0x2c
   14014:	eor	r1, r0, r5
   14018:	eor	r0, r2, r4
   1401c:	mov	r2, #16
   14020:	bl	18c30 <__assert_fail@plt+0x78b4>
   14024:	str	r0, [sp, #84]	; 0x54
   14028:	str	r1, [sp, #80]	; 0x50
   1402c:	adds	r2, r0, sl
   14030:	str	r2, [sp, #128]	; 0x80
   14034:	ldr	r0, [sp, #132]	; 0x84
   14038:	adc	r0, r1, r0
   1403c:	str	r0, [sp, #132]	; 0x84
   14040:	eor	r1, r0, r6
   14044:	eor	r0, r2, r7
   14048:	mov	r2, #63	; 0x3f
   1404c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14050:	str	r0, [sp, #8]
   14054:	str	r1, [sp, #4]
   14058:	ldr	r0, [sp, #196]	; 0xc4
   1405c:	ldr	r4, [sp, #76]	; 0x4c
   14060:	adds	r0, r4, r0
   14064:	ldr	r1, [sp, #192]	; 0xc0
   14068:	ldr	r7, [sp, #72]	; 0x48
   1406c:	adc	r1, r7, r1
   14070:	ldr	r2, [sp, #64]	; 0x40
   14074:	adds	r9, r0, r2
   14078:	ldr	r0, [sp, #68]	; 0x44
   1407c:	adc	r8, r1, r0
   14080:	ldr	r0, [sp, #144]	; 0x90
   14084:	eor	r1, r8, r0
   14088:	ldr	r0, [sp, #148]	; 0x94
   1408c:	eor	r0, r9, r0
   14090:	mov	r2, #32
   14094:	bl	18c30 <__assert_fail@plt+0x78b4>
   14098:	mov	r5, r0
   1409c:	mov	r6, r1
   140a0:	ldr	r0, [sp, #120]	; 0x78
   140a4:	adds	sl, r5, r0
   140a8:	ldr	r0, [sp, #124]	; 0x7c
   140ac:	adc	r0, r1, r0
   140b0:	str	r0, [sp, #148]	; 0x94
   140b4:	eor	r1, r0, r7
   140b8:	eor	r0, sl, r4
   140bc:	mov	r2, #24
   140c0:	bl	18c30 <__assert_fail@plt+0x78b4>
   140c4:	mov	r4, r0
   140c8:	mov	r7, r1
   140cc:	ldr	r0, [sp, #244]	; 0xf4
   140d0:	adds	r0, r9, r0
   140d4:	ldr	r1, [sp, #240]	; 0xf0
   140d8:	adc	r1, r8, r1
   140dc:	adds	r2, r0, r4
   140e0:	str	r2, [sp, #20]
   140e4:	adc	r0, r1, r7
   140e8:	str	r0, [sp, #40]	; 0x28
   140ec:	eor	r1, r0, r6
   140f0:	eor	r0, r2, r5
   140f4:	mov	r2, #16
   140f8:	bl	18c30 <__assert_fail@plt+0x78b4>
   140fc:	mov	r6, r0
   14100:	mov	r5, r1
   14104:	adds	r2, r0, sl
   14108:	str	r2, [sp, #120]	; 0x78
   1410c:	ldr	r0, [sp, #148]	; 0x94
   14110:	adc	r0, r1, r0
   14114:	str	r0, [sp, #124]	; 0x7c
   14118:	eor	r1, r0, r7
   1411c:	eor	r0, r2, r4
   14120:	mov	r2, #63	; 0x3f
   14124:	bl	18c30 <__assert_fail@plt+0x78b4>
   14128:	str	r0, [sp, #72]	; 0x48
   1412c:	str	r1, [sp, #64]	; 0x40
   14130:	ldr	r8, [sp]
   14134:	eor	r1, r5, r8
   14138:	ldr	r9, [sp, #12]
   1413c:	eor	r0, r6, r9
   14140:	mov	r2, #32
   14144:	bl	18c30 <__assert_fail@plt+0x78b4>
   14148:	mov	r4, r0
   1414c:	mov	r5, r1
   14150:	ldr	r0, [sp, #128]	; 0x80
   14154:	adds	r2, r4, r0
   14158:	str	r2, [sp, #128]	; 0x80
   1415c:	ldr	r0, [sp, #132]	; 0x84
   14160:	adc	sl, r1, r0
   14164:	ldr	r0, [sp, #24]
   14168:	eor	r1, sl, r0
   1416c:	ldr	r0, [sp, #32]
   14170:	eor	r0, r2, r0
   14174:	mov	r2, #24
   14178:	bl	18c30 <__assert_fail@plt+0x78b4>
   1417c:	mov	r6, r0
   14180:	mov	r7, r1
   14184:	ldr	r0, [sp, #220]	; 0xdc
   14188:	adds	r0, r9, r0
   1418c:	ldr	r1, [sp, #216]	; 0xd8
   14190:	adc	r1, r8, r1
   14194:	adds	r2, r0, r6
   14198:	str	r2, [sp, #28]
   1419c:	adc	r0, r1, r7
   141a0:	str	r0, [sp, #36]	; 0x24
   141a4:	eor	r1, r0, r5
   141a8:	eor	r0, r2, r4
   141ac:	mov	r2, #16
   141b0:	bl	18c30 <__assert_fail@plt+0x78b4>
   141b4:	mov	r2, r0
   141b8:	str	r0, [sp, #148]	; 0x94
   141bc:	mov	r3, r1
   141c0:	str	r1, [sp, #144]	; 0x90
   141c4:	ldr	r0, [sp, #128]	; 0x80
   141c8:	adds	r5, r2, r0
   141cc:	str	r5, [sp, #128]	; 0x80
   141d0:	adc	r0, r1, sl
   141d4:	str	r0, [sp, #132]	; 0x84
   141d8:	eor	r1, r0, r7
   141dc:	eor	r0, r5, r6
   141e0:	str	r3, [sp, #412]	; 0x19c
   141e4:	str	r2, [sp, #408]	; 0x198
   141e8:	mov	r2, #63	; 0x3f
   141ec:	bl	18c30 <__assert_fail@plt+0x78b4>
   141f0:	str	r0, [sp, #60]	; 0x3c
   141f4:	str	r1, [sp, #56]	; 0x38
   141f8:	ldr	r0, [sp, #164]	; 0xa4
   141fc:	ldr	r1, [sp, #48]	; 0x30
   14200:	adds	r0, r1, r0
   14204:	ldr	r1, [sp, #160]	; 0xa0
   14208:	ldr	r2, [sp, #52]	; 0x34
   1420c:	adc	r1, r2, r1
   14210:	ldr	r6, [sp, #8]
   14214:	adds	r8, r0, r6
   14218:	ldr	r7, [sp, #4]
   1421c:	adc	sl, r1, r7
   14220:	ldr	r0, [sp, #96]	; 0x60
   14224:	eor	r1, sl, r0
   14228:	ldr	r0, [sp, #100]	; 0x64
   1422c:	eor	r0, r8, r0
   14230:	mov	r2, #32
   14234:	bl	18c30 <__assert_fail@plt+0x78b4>
   14238:	mov	r4, r0
   1423c:	mov	r5, r1
   14240:	ldr	r0, [sp, #120]	; 0x78
   14244:	adds	r9, r4, r0
   14248:	ldr	r0, [sp, #124]	; 0x7c
   1424c:	adc	r0, r1, r0
   14250:	str	r0, [sp, #124]	; 0x7c
   14254:	eor	r1, r0, r7
   14258:	eor	r0, r9, r6
   1425c:	mov	r2, #24
   14260:	bl	18c30 <__assert_fail@plt+0x78b4>
   14264:	mov	r6, r0
   14268:	mov	r7, r1
   1426c:	ldr	r0, [sp, #276]	; 0x114
   14270:	adds	r0, r8, r0
   14274:	ldr	r1, [sp, #272]	; 0x110
   14278:	adc	r1, sl, r1
   1427c:	adds	r2, r0, r6
   14280:	str	r2, [sp, #24]
   14284:	adc	r0, r1, r7
   14288:	str	r0, [sp, #32]
   1428c:	eor	r1, r0, r5
   14290:	eor	r0, r2, r4
   14294:	mov	r2, #16
   14298:	bl	18c30 <__assert_fail@plt+0x78b4>
   1429c:	str	r0, [sp, #100]	; 0x64
   142a0:	str	r1, [sp, #96]	; 0x60
   142a4:	adds	r2, r0, r9
   142a8:	str	r2, [sp, #120]	; 0x78
   142ac:	ldr	r0, [sp, #124]	; 0x7c
   142b0:	adc	r0, r1, r0
   142b4:	str	r0, [sp, #124]	; 0x7c
   142b8:	eor	r1, r0, r7
   142bc:	eor	r0, r2, r6
   142c0:	mov	r2, #63	; 0x3f
   142c4:	bl	18c30 <__assert_fail@plt+0x78b4>
   142c8:	str	r0, [sp, #76]	; 0x4c
   142cc:	str	r1, [sp, #68]	; 0x44
   142d0:	ldr	r0, [sp, #236]	; 0xec
   142d4:	ldr	r1, [sp, #16]
   142d8:	adds	r0, r1, r0
   142dc:	ldr	r1, [sp, #232]	; 0xe8
   142e0:	ldr	r2, [sp, #44]	; 0x2c
   142e4:	adc	r1, r2, r1
   142e8:	ldr	r4, [sp, #72]	; 0x48
   142ec:	adds	r8, r0, r4
   142f0:	ldr	r7, [sp, #64]	; 0x40
   142f4:	adc	r9, r1, r7
   142f8:	ldr	r0, [sp, #88]	; 0x58
   142fc:	eor	r1, r9, r0
   14300:	ldr	r0, [sp, #92]	; 0x5c
   14304:	eor	r0, r8, r0
   14308:	mov	r2, #32
   1430c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14310:	mov	r5, r0
   14314:	mov	r6, r1
   14318:	ldr	r0, [sp, #112]	; 0x70
   1431c:	adds	sl, r5, r0
   14320:	ldr	r0, [sp, #116]	; 0x74
   14324:	adc	r0, r1, r0
   14328:	str	r0, [sp, #116]	; 0x74
   1432c:	eor	r1, r0, r7
   14330:	eor	r0, sl, r4
   14334:	mov	r2, #24
   14338:	bl	18c30 <__assert_fail@plt+0x78b4>
   1433c:	mov	r4, r0
   14340:	mov	r7, r1
   14344:	ldr	r0, [sp, #260]	; 0x104
   14348:	adds	r0, r8, r0
   1434c:	ldr	r1, [sp, #256]	; 0x100
   14350:	adc	r1, r9, r1
   14354:	adds	r2, r0, r4
   14358:	str	r2, [sp, #44]	; 0x2c
   1435c:	adc	r0, r1, r7
   14360:	str	r0, [sp, #52]	; 0x34
   14364:	eor	r1, r0, r6
   14368:	eor	r0, r2, r5
   1436c:	mov	r2, #16
   14370:	bl	18c30 <__assert_fail@plt+0x78b4>
   14374:	str	r0, [sp, #92]	; 0x5c
   14378:	str	r1, [sp, #88]	; 0x58
   1437c:	adds	r2, r0, sl
   14380:	str	r2, [sp, #112]	; 0x70
   14384:	ldr	r0, [sp, #116]	; 0x74
   14388:	adc	r0, r1, r0
   1438c:	str	r0, [sp, #116]	; 0x74
   14390:	eor	r1, r0, r7
   14394:	eor	r0, r2, r4
   14398:	mov	r2, #63	; 0x3f
   1439c:	bl	18c30 <__assert_fail@plt+0x78b4>
   143a0:	str	r0, [sp, #72]	; 0x48
   143a4:	str	r1, [sp, #64]	; 0x40
   143a8:	ldr	r0, [sp, #268]	; 0x10c
   143ac:	ldr	r6, [sp, #136]	; 0x88
   143b0:	adds	r0, r6, r0
   143b4:	ldr	r1, [sp, #264]	; 0x108
   143b8:	ldr	r7, [sp, #140]	; 0x8c
   143bc:	adc	r1, r7, r1
   143c0:	ldr	r2, [sp, #20]
   143c4:	adds	r9, r0, r2
   143c8:	ldr	r0, [sp, #40]	; 0x28
   143cc:	adc	r8, r1, r0
   143d0:	ldr	r0, [sp, #80]	; 0x50
   143d4:	eor	r1, r8, r0
   143d8:	ldr	r0, [sp, #84]	; 0x54
   143dc:	eor	r0, r9, r0
   143e0:	mov	r2, #32
   143e4:	bl	18c30 <__assert_fail@plt+0x78b4>
   143e8:	mov	r4, r0
   143ec:	mov	r5, r1
   143f0:	ldr	r0, [sp, #104]	; 0x68
   143f4:	adds	sl, r4, r0
   143f8:	ldr	r0, [sp, #108]	; 0x6c
   143fc:	adc	r0, r1, r0
   14400:	str	r0, [sp, #108]	; 0x6c
   14404:	eor	r1, r0, r7
   14408:	eor	r0, sl, r6
   1440c:	mov	r2, #24
   14410:	bl	18c30 <__assert_fail@plt+0x78b4>
   14414:	mov	r7, r0
   14418:	mov	r6, r1
   1441c:	ldr	r0, [sp, #284]	; 0x11c
   14420:	adds	r0, r9, r0
   14424:	ldr	r1, [sp, #280]	; 0x118
   14428:	adc	r1, r8, r1
   1442c:	adds	r2, r0, r7
   14430:	str	r2, [sp, #40]	; 0x28
   14434:	adc	r0, r1, r6
   14438:	str	r0, [sp, #48]	; 0x30
   1443c:	eor	r1, r0, r5
   14440:	eor	r0, r2, r4
   14444:	mov	r2, #16
   14448:	bl	18c30 <__assert_fail@plt+0x78b4>
   1444c:	str	r0, [sp, #84]	; 0x54
   14450:	str	r1, [sp, #80]	; 0x50
   14454:	adds	r2, r0, sl
   14458:	str	r2, [sp, #104]	; 0x68
   1445c:	ldr	r0, [sp, #108]	; 0x6c
   14460:	adc	r0, r1, r0
   14464:	str	r0, [sp, #108]	; 0x6c
   14468:	eor	r1, r0, r6
   1446c:	eor	r0, r2, r7
   14470:	mov	r2, #63	; 0x3f
   14474:	bl	18c30 <__assert_fail@plt+0x78b4>
   14478:	mov	r6, r0
   1447c:	mov	r7, r1
   14480:	ldr	r0, [sp, #236]	; 0xec
   14484:	ldr	r1, [sp, #28]
   14488:	adds	r0, r1, r0
   1448c:	ldr	r1, [sp, #232]	; 0xe8
   14490:	ldr	r2, [sp, #36]	; 0x24
   14494:	adc	r1, r2, r1
   14498:	adds	r8, r0, r6
   1449c:	adc	sl, r1, r7
   144a0:	ldr	r0, [sp, #96]	; 0x60
   144a4:	eor	r1, sl, r0
   144a8:	ldr	r0, [sp, #100]	; 0x64
   144ac:	eor	r0, r8, r0
   144b0:	mov	r2, #32
   144b4:	bl	18c30 <__assert_fail@plt+0x78b4>
   144b8:	mov	r4, r0
   144bc:	mov	r5, r1
   144c0:	ldr	r0, [sp, #112]	; 0x70
   144c4:	adds	r9, r4, r0
   144c8:	ldr	r0, [sp, #116]	; 0x74
   144cc:	adc	r0, r1, r0
   144d0:	str	r0, [sp, #140]	; 0x8c
   144d4:	eor	r1, r0, r7
   144d8:	eor	r0, r9, r6
   144dc:	mov	r2, #24
   144e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   144e4:	mov	r6, r0
   144e8:	mov	r7, r1
   144ec:	ldr	r0, [sp, #204]	; 0xcc
   144f0:	adds	r0, r8, r0
   144f4:	ldr	r1, [sp, #200]	; 0xc8
   144f8:	adc	r1, sl, r1
   144fc:	adds	r2, r0, r6
   14500:	str	r2, [sp, #16]
   14504:	adc	r0, r1, r7
   14508:	str	r0, [sp, #20]
   1450c:	eor	r1, r0, r5
   14510:	eor	r0, r2, r4
   14514:	mov	r2, #16
   14518:	bl	18c30 <__assert_fail@plt+0x78b4>
   1451c:	str	r0, [sp, #100]	; 0x64
   14520:	str	r1, [sp, #96]	; 0x60
   14524:	adds	r2, r0, r9
   14528:	str	r2, [sp, #112]	; 0x70
   1452c:	ldr	r0, [sp, #140]	; 0x8c
   14530:	adc	r0, r1, r0
   14534:	str	r0, [sp, #116]	; 0x74
   14538:	eor	r1, r0, r7
   1453c:	eor	r0, r2, r6
   14540:	mov	r2, #63	; 0x3f
   14544:	bl	18c30 <__assert_fail@plt+0x78b4>
   14548:	mov	r2, r0
   1454c:	str	r0, [sp, #136]	; 0x88
   14550:	mov	r3, r1
   14554:	str	r1, [sp, #140]	; 0x8c
   14558:	ldr	r0, [sp, #220]	; 0xdc
   1455c:	ldr	r6, [sp, #60]	; 0x3c
   14560:	adds	r0, r6, r0
   14564:	ldr	r1, [sp, #216]	; 0xd8
   14568:	ldr	r7, [sp, #56]	; 0x38
   1456c:	adc	r1, r7, r1
   14570:	ldr	r5, [sp, #24]
   14574:	adds	r9, r0, r5
   14578:	ldr	r0, [sp, #32]
   1457c:	adc	r8, r1, r0
   14580:	ldr	r0, [sp, #88]	; 0x58
   14584:	eor	r1, r0, r8
   14588:	ldr	r0, [sp, #92]	; 0x5c
   1458c:	eor	r0, r0, r9
   14590:	str	r3, [sp, #324]	; 0x144
   14594:	str	r2, [sp, #320]	; 0x140
   14598:	mov	r2, #32
   1459c:	bl	18c30 <__assert_fail@plt+0x78b4>
   145a0:	mov	r4, r0
   145a4:	mov	r5, r1
   145a8:	ldr	r0, [sp, #104]	; 0x68
   145ac:	adds	sl, r4, r0
   145b0:	ldr	r0, [sp, #108]	; 0x6c
   145b4:	adc	r0, r1, r0
   145b8:	str	r0, [sp, #108]	; 0x6c
   145bc:	eor	r1, r0, r7
   145c0:	eor	r0, sl, r6
   145c4:	mov	r2, #24
   145c8:	bl	18c30 <__assert_fail@plt+0x78b4>
   145cc:	mov	r6, r0
   145d0:	mov	r7, r1
   145d4:	ldr	r0, [sp, #164]	; 0xa4
   145d8:	adds	r0, r9, r0
   145dc:	ldr	r1, [sp, #160]	; 0xa0
   145e0:	adc	r1, r8, r1
   145e4:	adds	r2, r0, r6
   145e8:	str	r2, [sp, #28]
   145ec:	adc	r0, r1, r7
   145f0:	str	r0, [sp, #36]	; 0x24
   145f4:	eor	r1, r0, r5
   145f8:	eor	r0, r2, r4
   145fc:	mov	r2, #16
   14600:	bl	18c30 <__assert_fail@plt+0x78b4>
   14604:	str	r0, [sp, #92]	; 0x5c
   14608:	str	r1, [sp, #88]	; 0x58
   1460c:	adds	r2, r0, sl
   14610:	str	r2, [sp, #104]	; 0x68
   14614:	ldr	r0, [sp, #108]	; 0x6c
   14618:	adc	r0, r1, r0
   1461c:	str	r0, [sp, #108]	; 0x6c
   14620:	eor	r1, r0, r7
   14624:	eor	r0, r2, r6
   14628:	mov	r2, #63	; 0x3f
   1462c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14630:	mov	r2, r0
   14634:	str	r0, [sp, #60]	; 0x3c
   14638:	mov	r3, r1
   1463c:	str	r1, [sp, #56]	; 0x38
   14640:	ldr	r0, [sp, #188]	; 0xbc
   14644:	ldr	r1, [sp, #16]
   14648:	adds	r0, r1, r0
   1464c:	ldr	r1, [sp, #184]	; 0xb8
   14650:	ldr	r7, [sp, #20]
   14654:	adc	r1, r7, r1
   14658:	adds	r0, r0, r2
   1465c:	str	r0, [sp, #32]
   14660:	adc	r0, r1, r3
   14664:	str	r0, [sp, #24]
   14668:	ldr	r0, [sp, #268]	; 0x10c
   1466c:	ldr	r6, [sp, #76]	; 0x4c
   14670:	adds	r0, r6, r0
   14674:	ldr	r1, [sp, #264]	; 0x108
   14678:	ldr	r7, [sp, #68]	; 0x44
   1467c:	adc	r1, r7, r1
   14680:	ldr	r2, [sp, #44]	; 0x2c
   14684:	adds	r8, r0, r2
   14688:	ldr	r0, [sp, #52]	; 0x34
   1468c:	adc	r9, r1, r0
   14690:	ldr	r0, [sp, #80]	; 0x50
   14694:	eor	r1, r0, r9
   14698:	ldr	r0, [sp, #84]	; 0x54
   1469c:	eor	r0, r0, r8
   146a0:	mov	r2, #32
   146a4:	bl	18c30 <__assert_fail@plt+0x78b4>
   146a8:	mov	r4, r0
   146ac:	mov	r5, r1
   146b0:	ldr	r0, [sp, #128]	; 0x80
   146b4:	adds	sl, r4, r0
   146b8:	ldr	r0, [sp, #132]	; 0x84
   146bc:	adc	r0, r1, r0
   146c0:	str	r0, [sp, #132]	; 0x84
   146c4:	eor	r1, r0, r7
   146c8:	eor	r0, sl, r6
   146cc:	mov	r2, #24
   146d0:	bl	18c30 <__assert_fail@plt+0x78b4>
   146d4:	mov	r6, r0
   146d8:	mov	r7, r1
   146dc:	ldr	r0, [sp, #276]	; 0x114
   146e0:	adds	r0, r8, r0
   146e4:	ldr	r1, [sp, #272]	; 0x110
   146e8:	adc	r1, r9, r1
   146ec:	adds	r2, r0, r6
   146f0:	str	r2, [sp, #44]	; 0x2c
   146f4:	adc	r0, r1, r7
   146f8:	str	r0, [sp, #52]	; 0x34
   146fc:	eor	r1, r0, r5
   14700:	eor	r0, r2, r4
   14704:	mov	r2, #16
   14708:	bl	18c30 <__assert_fail@plt+0x78b4>
   1470c:	str	r0, [sp, #84]	; 0x54
   14710:	str	r1, [sp, #80]	; 0x50
   14714:	adds	r2, r0, sl
   14718:	str	r2, [sp, #128]	; 0x80
   1471c:	ldr	r0, [sp, #132]	; 0x84
   14720:	adc	r0, r1, r0
   14724:	str	r0, [sp, #132]	; 0x84
   14728:	eor	r1, r0, r7
   1472c:	eor	r0, r2, r6
   14730:	mov	r2, #63	; 0x3f
   14734:	bl	18c30 <__assert_fail@plt+0x78b4>
   14738:	str	r0, [sp, #76]	; 0x4c
   1473c:	str	r1, [sp, #68]	; 0x44
   14740:	ldr	r0, [sp, #180]	; 0xb4
   14744:	ldr	r4, [sp, #72]	; 0x48
   14748:	adds	r0, r4, r0
   1474c:	ldr	r1, [sp, #176]	; 0xb0
   14750:	ldr	r5, [sp, #64]	; 0x40
   14754:	adc	r1, r5, r1
   14758:	ldr	r2, [sp, #40]	; 0x28
   1475c:	adds	r9, r0, r2
   14760:	ldr	r0, [sp, #48]	; 0x30
   14764:	adc	r8, r1, r0
   14768:	ldr	r0, [sp, #144]	; 0x90
   1476c:	eor	r1, r8, r0
   14770:	ldr	r0, [sp, #148]	; 0x94
   14774:	eor	r0, r9, r0
   14778:	mov	r2, #32
   1477c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14780:	mov	r6, r0
   14784:	mov	r7, r1
   14788:	ldr	r0, [sp, #120]	; 0x78
   1478c:	adds	sl, r6, r0
   14790:	ldr	r0, [sp, #124]	; 0x7c
   14794:	adc	r0, r1, r0
   14798:	str	r0, [sp, #148]	; 0x94
   1479c:	eor	r1, r0, r5
   147a0:	eor	r0, sl, r4
   147a4:	mov	r2, #24
   147a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   147ac:	mov	r5, r0
   147b0:	mov	r4, r1
   147b4:	ldr	r0, [sp, #196]	; 0xc4
   147b8:	adds	r0, r9, r0
   147bc:	ldr	r1, [sp, #192]	; 0xc0
   147c0:	adc	r1, r8, r1
   147c4:	adds	r2, r0, r5
   147c8:	str	r2, [sp, #40]	; 0x28
   147cc:	adc	r0, r1, r4
   147d0:	str	r0, [sp, #48]	; 0x30
   147d4:	eor	r1, r0, r7
   147d8:	eor	r0, r2, r6
   147dc:	mov	r2, #16
   147e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   147e4:	mov	r6, r0
   147e8:	mov	r7, r1
   147ec:	adds	r2, r0, sl
   147f0:	str	r2, [sp, #120]	; 0x78
   147f4:	ldr	r0, [sp, #148]	; 0x94
   147f8:	adc	r0, r1, r0
   147fc:	str	r0, [sp, #124]	; 0x7c
   14800:	eor	r1, r0, r4
   14804:	eor	r0, r2, r5
   14808:	mov	r2, #63	; 0x3f
   1480c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14810:	str	r0, [sp, #72]	; 0x48
   14814:	str	r1, [sp, #64]	; 0x40
   14818:	ldr	r8, [sp, #24]
   1481c:	eor	r1, r7, r8
   14820:	ldr	r9, [sp, #32]
   14824:	eor	r0, r6, r9
   14828:	mov	r2, #32
   1482c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14830:	mov	r4, r0
   14834:	mov	r5, r1
   14838:	ldr	r0, [sp, #128]	; 0x80
   1483c:	adds	r2, r4, r0
   14840:	str	r2, [sp, #128]	; 0x80
   14844:	ldr	r0, [sp, #132]	; 0x84
   14848:	adc	sl, r1, r0
   1484c:	ldr	r0, [sp, #56]	; 0x38
   14850:	eor	r1, sl, r0
   14854:	ldr	r0, [sp, #60]	; 0x3c
   14858:	eor	r0, r2, r0
   1485c:	mov	r2, #24
   14860:	bl	18c30 <__assert_fail@plt+0x78b4>
   14864:	mov	r6, r0
   14868:	mov	r7, r1
   1486c:	ldr	r0, [sp, #172]	; 0xac
   14870:	adds	r0, r9, r0
   14874:	ldr	r1, [sp, #168]	; 0xa8
   14878:	adc	r1, r8, r1
   1487c:	adds	r2, r0, r6
   14880:	str	r2, [sp, #24]
   14884:	adc	r0, r1, r7
   14888:	str	r0, [sp, #32]
   1488c:	eor	r1, r0, r5
   14890:	eor	r0, r2, r4
   14894:	mov	r2, #16
   14898:	bl	18c30 <__assert_fail@plt+0x78b4>
   1489c:	mov	r2, r0
   148a0:	str	r0, [sp, #148]	; 0x94
   148a4:	mov	r3, r1
   148a8:	str	r1, [sp, #144]	; 0x90
   148ac:	ldr	r0, [sp, #128]	; 0x80
   148b0:	adds	r5, r2, r0
   148b4:	str	r5, [sp, #128]	; 0x80
   148b8:	adc	r0, r1, sl
   148bc:	str	r0, [sp, #132]	; 0x84
   148c0:	eor	r1, r0, r7
   148c4:	eor	r0, r5, r6
   148c8:	str	r3, [sp, #412]	; 0x19c
   148cc:	str	r2, [sp, #408]	; 0x198
   148d0:	mov	r2, #63	; 0x3f
   148d4:	bl	18c30 <__assert_fail@plt+0x78b4>
   148d8:	str	r0, [sp, #60]	; 0x3c
   148dc:	str	r1, [sp, #56]	; 0x38
   148e0:	ldr	r0, [sp, #284]	; 0x11c
   148e4:	ldr	r1, [sp, #28]
   148e8:	adds	r0, r1, r0
   148ec:	ldr	r1, [sp, #280]	; 0x118
   148f0:	ldr	r2, [sp, #36]	; 0x24
   148f4:	adc	r1, r2, r1
   148f8:	ldr	r6, [sp, #76]	; 0x4c
   148fc:	adds	r8, r0, r6
   14900:	ldr	r7, [sp, #68]	; 0x44
   14904:	adc	sl, r1, r7
   14908:	ldr	r0, [sp, #96]	; 0x60
   1490c:	eor	r1, sl, r0
   14910:	ldr	r0, [sp, #100]	; 0x64
   14914:	eor	r0, r8, r0
   14918:	mov	r2, #32
   1491c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14920:	mov	r4, r0
   14924:	mov	r5, r1
   14928:	ldr	r0, [sp, #120]	; 0x78
   1492c:	adds	r9, r4, r0
   14930:	ldr	r0, [sp, #124]	; 0x7c
   14934:	adc	r0, r1, r0
   14938:	str	r0, [sp, #124]	; 0x7c
   1493c:	eor	r1, r0, r7
   14940:	eor	r0, r9, r6
   14944:	mov	r2, #24
   14948:	bl	18c30 <__assert_fail@plt+0x78b4>
   1494c:	mov	r6, r0
   14950:	mov	r7, r1
   14954:	ldr	r0, [sp, #244]	; 0xf4
   14958:	adds	r0, r8, r0
   1495c:	ldr	r1, [sp, #240]	; 0xf0
   14960:	adc	r1, sl, r1
   14964:	adds	r2, r0, r6
   14968:	str	r2, [sp, #28]
   1496c:	adc	r0, r1, r7
   14970:	str	r0, [sp, #36]	; 0x24
   14974:	eor	r1, r0, r5
   14978:	eor	r0, r2, r4
   1497c:	mov	r2, #16
   14980:	bl	18c30 <__assert_fail@plt+0x78b4>
   14984:	str	r0, [sp, #100]	; 0x64
   14988:	str	r1, [sp, #96]	; 0x60
   1498c:	adds	r2, r0, r9
   14990:	str	r2, [sp, #120]	; 0x78
   14994:	ldr	r0, [sp, #124]	; 0x7c
   14998:	adc	r0, r1, r0
   1499c:	str	r0, [sp, #124]	; 0x7c
   149a0:	eor	r1, r0, r7
   149a4:	eor	r0, r2, r6
   149a8:	mov	r2, #63	; 0x3f
   149ac:	bl	18c30 <__assert_fail@plt+0x78b4>
   149b0:	str	r0, [sp, #76]	; 0x4c
   149b4:	str	r1, [sp, #68]	; 0x44
   149b8:	ldr	r0, [sp, #260]	; 0x104
   149bc:	ldr	r1, [sp, #44]	; 0x2c
   149c0:	adds	r0, r1, r0
   149c4:	ldr	r1, [sp, #256]	; 0x100
   149c8:	ldr	r2, [sp, #52]	; 0x34
   149cc:	adc	r1, r2, r1
   149d0:	ldr	r4, [sp, #72]	; 0x48
   149d4:	adds	r8, r0, r4
   149d8:	ldr	r7, [sp, #64]	; 0x40
   149dc:	adc	r9, r1, r7
   149e0:	ldr	r0, [sp, #88]	; 0x58
   149e4:	eor	r1, r9, r0
   149e8:	ldr	r0, [sp, #92]	; 0x5c
   149ec:	eor	r0, r8, r0
   149f0:	mov	r2, #32
   149f4:	bl	18c30 <__assert_fail@plt+0x78b4>
   149f8:	mov	r5, r0
   149fc:	mov	r6, r1
   14a00:	ldr	r0, [sp, #112]	; 0x70
   14a04:	adds	sl, r5, r0
   14a08:	ldr	r0, [sp, #116]	; 0x74
   14a0c:	adc	r0, r1, r0
   14a10:	str	r0, [sp, #116]	; 0x74
   14a14:	eor	r1, r0, r7
   14a18:	eor	r0, sl, r4
   14a1c:	mov	r2, #24
   14a20:	bl	18c30 <__assert_fail@plt+0x78b4>
   14a24:	mov	r7, r0
   14a28:	mov	r4, r1
   14a2c:	ldr	r0, [sp, #252]	; 0xfc
   14a30:	adds	r0, r8, r0
   14a34:	ldr	r1, [sp, #248]	; 0xf8
   14a38:	adc	r1, r9, r1
   14a3c:	adds	r2, r0, r7
   14a40:	str	r2, [sp, #44]	; 0x2c
   14a44:	adc	r0, r1, r4
   14a48:	str	r0, [sp, #52]	; 0x34
   14a4c:	eor	r1, r0, r6
   14a50:	eor	r0, r2, r5
   14a54:	mov	r2, #16
   14a58:	bl	18c30 <__assert_fail@plt+0x78b4>
   14a5c:	str	r0, [sp, #92]	; 0x5c
   14a60:	str	r1, [sp, #88]	; 0x58
   14a64:	adds	r2, r0, sl
   14a68:	str	r2, [sp, #112]	; 0x70
   14a6c:	ldr	r0, [sp, #116]	; 0x74
   14a70:	adc	r0, r1, r0
   14a74:	str	r0, [sp, #116]	; 0x74
   14a78:	eor	r1, r0, r4
   14a7c:	eor	r0, r2, r7
   14a80:	mov	r2, #63	; 0x3f
   14a84:	bl	18c30 <__assert_fail@plt+0x78b4>
   14a88:	str	r0, [sp, #72]	; 0x48
   14a8c:	str	r1, [sp, #64]	; 0x40
   14a90:	ldr	r0, [sp, #212]	; 0xd4
   14a94:	ldr	r6, [sp, #136]	; 0x88
   14a98:	adds	r0, r6, r0
   14a9c:	ldr	r1, [sp, #208]	; 0xd0
   14aa0:	ldr	r5, [sp, #140]	; 0x8c
   14aa4:	adc	r1, r5, r1
   14aa8:	ldr	r2, [sp, #40]	; 0x28
   14aac:	adds	sl, r0, r2
   14ab0:	ldr	r0, [sp, #48]	; 0x30
   14ab4:	adc	r8, r1, r0
   14ab8:	ldr	r0, [sp, #80]	; 0x50
   14abc:	eor	r1, r8, r0
   14ac0:	ldr	r0, [sp, #84]	; 0x54
   14ac4:	eor	r0, sl, r0
   14ac8:	mov	r2, #32
   14acc:	bl	18c30 <__assert_fail@plt+0x78b4>
   14ad0:	mov	r4, r0
   14ad4:	mov	r7, r1
   14ad8:	ldr	r0, [sp, #104]	; 0x68
   14adc:	adds	r2, r4, r0
   14ae0:	ldr	r0, [sp, #108]	; 0x6c
   14ae4:	adc	r0, r1, r0
   14ae8:	str	r0, [sp, #108]	; 0x6c
   14aec:	eor	r1, r0, r5
   14af0:	eor	r0, r2, r6
   14af4:	mov	r5, r2
   14af8:	mov	r2, #24
   14afc:	bl	18c30 <__assert_fail@plt+0x78b4>
   14b00:	mov	r6, r0
   14b04:	mov	r9, r1
   14b08:	ldr	r0, [sp, #228]	; 0xe4
   14b0c:	adds	r0, sl, r0
   14b10:	ldr	r1, [sp, #224]	; 0xe0
   14b14:	adc	r1, r8, r1
   14b18:	adds	r2, r0, r6
   14b1c:	str	r2, [sp, #40]	; 0x28
   14b20:	adc	r0, r1, r9
   14b24:	str	r0, [sp, #48]	; 0x30
   14b28:	eor	r1, r0, r7
   14b2c:	eor	r0, r2, r4
   14b30:	mov	r2, #16
   14b34:	bl	18c30 <__assert_fail@plt+0x78b4>
   14b38:	str	r0, [sp, #84]	; 0x54
   14b3c:	str	r1, [sp, #80]	; 0x50
   14b40:	adds	r2, r0, r5
   14b44:	str	r2, [sp, #104]	; 0x68
   14b48:	ldr	r0, [sp, #108]	; 0x6c
   14b4c:	adc	r0, r1, r0
   14b50:	str	r0, [sp, #108]	; 0x6c
   14b54:	eor	r1, r0, r9
   14b58:	eor	r0, r2, r6
   14b5c:	mov	r2, #63	; 0x3f
   14b60:	bl	18c30 <__assert_fail@plt+0x78b4>
   14b64:	mov	r4, r0
   14b68:	mov	r6, r1
   14b6c:	ldr	r0, [sp, #260]	; 0x104
   14b70:	ldr	r1, [sp, #24]
   14b74:	adds	r0, r1, r0
   14b78:	ldr	r1, [sp, #256]	; 0x100
   14b7c:	ldr	r2, [sp, #32]
   14b80:	adc	r1, r2, r1
   14b84:	adds	r8, r0, r4
   14b88:	adc	r9, r1, r6
   14b8c:	ldr	r0, [sp, #96]	; 0x60
   14b90:	eor	r1, r9, r0
   14b94:	ldr	r0, [sp, #100]	; 0x64
   14b98:	eor	r0, r8, r0
   14b9c:	mov	r2, #32
   14ba0:	bl	18c30 <__assert_fail@plt+0x78b4>
   14ba4:	mov	r7, r0
   14ba8:	mov	r5, r1
   14bac:	ldr	r0, [sp, #112]	; 0x70
   14bb0:	adds	sl, r7, r0
   14bb4:	ldr	r0, [sp, #116]	; 0x74
   14bb8:	adc	r0, r1, r0
   14bbc:	str	r0, [sp, #140]	; 0x8c
   14bc0:	eor	r1, r0, r6
   14bc4:	eor	r0, sl, r4
   14bc8:	mov	r2, #24
   14bcc:	bl	18c30 <__assert_fail@plt+0x78b4>
   14bd0:	mov	r4, r0
   14bd4:	mov	r6, r1
   14bd8:	ldr	r0, [sp, #212]	; 0xd4
   14bdc:	adds	r0, r8, r0
   14be0:	ldr	r1, [sp, #208]	; 0xd0
   14be4:	adc	r1, r9, r1
   14be8:	adds	r2, r0, r4
   14bec:	str	r2, [sp, #24]
   14bf0:	adc	r0, r1, r6
   14bf4:	str	r0, [sp, #32]
   14bf8:	eor	r1, r0, r5
   14bfc:	eor	r0, r2, r7
   14c00:	mov	r2, #16
   14c04:	bl	18c30 <__assert_fail@plt+0x78b4>
   14c08:	str	r0, [sp, #100]	; 0x64
   14c0c:	str	r1, [sp, #96]	; 0x60
   14c10:	adds	r2, r0, sl
   14c14:	str	r2, [sp, #112]	; 0x70
   14c18:	ldr	r0, [sp, #140]	; 0x8c
   14c1c:	adc	r0, r1, r0
   14c20:	str	r0, [sp, #116]	; 0x74
   14c24:	eor	r1, r0, r6
   14c28:	eor	r0, r2, r4
   14c2c:	mov	r2, #63	; 0x3f
   14c30:	bl	18c30 <__assert_fail@plt+0x78b4>
   14c34:	mov	r2, r0
   14c38:	str	r0, [sp, #136]	; 0x88
   14c3c:	mov	r3, r1
   14c40:	str	r1, [sp, #140]	; 0x8c
   14c44:	ldr	r0, [sp, #284]	; 0x11c
   14c48:	ldr	r6, [sp, #60]	; 0x3c
   14c4c:	adds	r0, r6, r0
   14c50:	ldr	r1, [sp, #280]	; 0x118
   14c54:	ldr	r7, [sp, #56]	; 0x38
   14c58:	adc	r1, r7, r1
   14c5c:	ldr	r5, [sp, #28]
   14c60:	adds	sl, r0, r5
   14c64:	ldr	r0, [sp, #36]	; 0x24
   14c68:	adc	r8, r1, r0
   14c6c:	ldr	r0, [sp, #88]	; 0x58
   14c70:	eor	r1, r0, r8
   14c74:	ldr	r0, [sp, #92]	; 0x5c
   14c78:	eor	r0, r0, sl
   14c7c:	str	r3, [sp, #324]	; 0x144
   14c80:	str	r2, [sp, #320]	; 0x140
   14c84:	mov	r2, #32
   14c88:	bl	18c30 <__assert_fail@plt+0x78b4>
   14c8c:	mov	r4, r0
   14c90:	mov	r5, r1
   14c94:	ldr	r0, [sp, #104]	; 0x68
   14c98:	adds	r9, r4, r0
   14c9c:	ldr	r0, [sp, #108]	; 0x6c
   14ca0:	adc	r0, r1, r0
   14ca4:	str	r0, [sp, #108]	; 0x6c
   14ca8:	eor	r1, r0, r7
   14cac:	eor	r0, r9, r6
   14cb0:	mov	r2, #24
   14cb4:	bl	18c30 <__assert_fail@plt+0x78b4>
   14cb8:	mov	r6, r0
   14cbc:	mov	r7, r1
   14cc0:	ldr	r0, [sp, #252]	; 0xfc
   14cc4:	adds	r0, sl, r0
   14cc8:	ldr	r1, [sp, #248]	; 0xf8
   14ccc:	adc	r1, r8, r1
   14cd0:	adds	r2, r0, r6
   14cd4:	str	r2, [sp, #28]
   14cd8:	adc	r0, r1, r7
   14cdc:	str	r0, [sp, #36]	; 0x24
   14ce0:	eor	r1, r0, r5
   14ce4:	eor	r0, r2, r4
   14ce8:	mov	r2, #16
   14cec:	bl	18c30 <__assert_fail@plt+0x78b4>
   14cf0:	str	r0, [sp, #92]	; 0x5c
   14cf4:	str	r1, [sp, #88]	; 0x58
   14cf8:	adds	r2, r0, r9
   14cfc:	str	r2, [sp, #104]	; 0x68
   14d00:	ldr	r0, [sp, #108]	; 0x6c
   14d04:	adc	r0, r1, r0
   14d08:	str	r0, [sp, #108]	; 0x6c
   14d0c:	eor	r1, r0, r7
   14d10:	eor	r0, r2, r6
   14d14:	mov	r2, #63	; 0x3f
   14d18:	bl	18c30 <__assert_fail@plt+0x78b4>
   14d1c:	mov	r2, r0
   14d20:	str	r0, [sp, #60]	; 0x3c
   14d24:	mov	r3, r1
   14d28:	str	r1, [sp, #56]	; 0x38
   14d2c:	ldr	r0, [sp, #276]	; 0x114
   14d30:	ldr	r1, [sp, #24]
   14d34:	adds	r0, r1, r0
   14d38:	ldr	r1, [sp, #272]	; 0x110
   14d3c:	ldr	r7, [sp, #32]
   14d40:	adc	r1, r7, r1
   14d44:	adds	r0, r0, r2
   14d48:	str	r0, [sp, #32]
   14d4c:	adc	r0, r1, r3
   14d50:	str	r0, [sp, #24]
   14d54:	ldr	r0, [sp, #196]	; 0xc4
   14d58:	ldr	r4, [sp, #76]	; 0x4c
   14d5c:	adds	r0, r4, r0
   14d60:	ldr	r1, [sp, #192]	; 0xc0
   14d64:	ldr	r5, [sp, #68]	; 0x44
   14d68:	adc	r1, r5, r1
   14d6c:	ldr	r2, [sp, #44]	; 0x2c
   14d70:	adds	r8, r0, r2
   14d74:	ldr	r0, [sp, #52]	; 0x34
   14d78:	adc	r9, r1, r0
   14d7c:	ldr	r0, [sp, #80]	; 0x50
   14d80:	eor	r1, r0, r9
   14d84:	ldr	r0, [sp, #84]	; 0x54
   14d88:	eor	r0, r0, r8
   14d8c:	mov	r2, #32
   14d90:	bl	18c30 <__assert_fail@plt+0x78b4>
   14d94:	mov	r6, r0
   14d98:	mov	r7, r1
   14d9c:	ldr	r0, [sp, #128]	; 0x80
   14da0:	adds	sl, r6, r0
   14da4:	ldr	r0, [sp, #132]	; 0x84
   14da8:	adc	r0, r1, r0
   14dac:	str	r0, [sp, #132]	; 0x84
   14db0:	eor	r1, r0, r5
   14db4:	eor	r0, sl, r4
   14db8:	mov	r2, #24
   14dbc:	bl	18c30 <__assert_fail@plt+0x78b4>
   14dc0:	mov	r4, r0
   14dc4:	mov	r5, r1
   14dc8:	ldr	r0, [sp, #220]	; 0xdc
   14dcc:	adds	r0, r8, r0
   14dd0:	ldr	r1, [sp, #216]	; 0xd8
   14dd4:	adc	r1, r9, r1
   14dd8:	adds	r2, r0, r4
   14ddc:	str	r2, [sp, #44]	; 0x2c
   14de0:	adc	r0, r1, r5
   14de4:	str	r0, [sp, #52]	; 0x34
   14de8:	eor	r1, r0, r7
   14dec:	eor	r0, r2, r6
   14df0:	mov	r2, #16
   14df4:	bl	18c30 <__assert_fail@plt+0x78b4>
   14df8:	str	r0, [sp, #84]	; 0x54
   14dfc:	str	r1, [sp, #80]	; 0x50
   14e00:	adds	r2, r0, sl
   14e04:	str	r2, [sp, #128]	; 0x80
   14e08:	ldr	r0, [sp, #132]	; 0x84
   14e0c:	adc	r0, r1, r0
   14e10:	str	r0, [sp, #132]	; 0x84
   14e14:	eor	r1, r0, r5
   14e18:	eor	r0, r2, r4
   14e1c:	mov	r2, #63	; 0x3f
   14e20:	bl	18c30 <__assert_fail@plt+0x78b4>
   14e24:	str	r0, [sp, #76]	; 0x4c
   14e28:	str	r1, [sp, #68]	; 0x44
   14e2c:	ldr	r0, [sp, #236]	; 0xec
   14e30:	ldr	r6, [sp, #72]	; 0x48
   14e34:	adds	r0, r6, r0
   14e38:	ldr	r1, [sp, #232]	; 0xe8
   14e3c:	ldr	r7, [sp, #64]	; 0x40
   14e40:	adc	r1, r7, r1
   14e44:	ldr	r2, [sp, #40]	; 0x28
   14e48:	adds	sl, r0, r2
   14e4c:	ldr	r0, [sp, #48]	; 0x30
   14e50:	adc	r8, r1, r0
   14e54:	ldr	r0, [sp, #144]	; 0x90
   14e58:	eor	r1, r8, r0
   14e5c:	ldr	r0, [sp, #148]	; 0x94
   14e60:	eor	r0, sl, r0
   14e64:	mov	r2, #32
   14e68:	bl	18c30 <__assert_fail@plt+0x78b4>
   14e6c:	mov	r4, r0
   14e70:	mov	r5, r1
   14e74:	ldr	r0, [sp, #120]	; 0x78
   14e78:	adds	r9, r4, r0
   14e7c:	ldr	r0, [sp, #124]	; 0x7c
   14e80:	adc	r0, r1, r0
   14e84:	str	r0, [sp, #148]	; 0x94
   14e88:	eor	r1, r0, r7
   14e8c:	eor	r0, r9, r6
   14e90:	mov	r2, #24
   14e94:	bl	18c30 <__assert_fail@plt+0x78b4>
   14e98:	mov	r7, r0
   14e9c:	mov	r6, r1
   14ea0:	ldr	r0, [sp, #172]	; 0xac
   14ea4:	adds	r0, sl, r0
   14ea8:	ldr	r1, [sp, #168]	; 0xa8
   14eac:	adc	r1, r8, r1
   14eb0:	adds	r2, r0, r7
   14eb4:	str	r2, [sp, #40]	; 0x28
   14eb8:	adc	r0, r1, r6
   14ebc:	str	r0, [sp, #48]	; 0x30
   14ec0:	eor	r1, r0, r5
   14ec4:	eor	r0, r2, r4
   14ec8:	mov	r2, #16
   14ecc:	bl	18c30 <__assert_fail@plt+0x78b4>
   14ed0:	mov	r4, r0
   14ed4:	mov	r5, r1
   14ed8:	adds	r2, r0, r9
   14edc:	str	r2, [sp, #120]	; 0x78
   14ee0:	ldr	r0, [sp, #148]	; 0x94
   14ee4:	adc	r0, r1, r0
   14ee8:	str	r0, [sp, #124]	; 0x7c
   14eec:	eor	r1, r0, r6
   14ef0:	eor	r0, r2, r7
   14ef4:	mov	r2, #63	; 0x3f
   14ef8:	bl	18c30 <__assert_fail@plt+0x78b4>
   14efc:	str	r0, [sp, #72]	; 0x48
   14f00:	str	r1, [sp, #64]	; 0x40
   14f04:	ldr	r8, [sp, #24]
   14f08:	eor	r1, r5, r8
   14f0c:	ldr	sl, [sp, #32]
   14f10:	eor	r0, r4, sl
   14f14:	mov	r2, #32
   14f18:	bl	18c30 <__assert_fail@plt+0x78b4>
   14f1c:	mov	r4, r0
   14f20:	mov	r5, r1
   14f24:	ldr	r0, [sp, #128]	; 0x80
   14f28:	adds	r2, r4, r0
   14f2c:	str	r2, [sp, #128]	; 0x80
   14f30:	ldr	r0, [sp, #132]	; 0x84
   14f34:	adc	r9, r1, r0
   14f38:	ldr	r0, [sp, #56]	; 0x38
   14f3c:	eor	r1, r9, r0
   14f40:	ldr	r0, [sp, #60]	; 0x3c
   14f44:	eor	r0, r2, r0
   14f48:	mov	r2, #24
   14f4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   14f50:	mov	r7, r0
   14f54:	mov	r6, r1
   14f58:	ldr	r0, [sp, #244]	; 0xf4
   14f5c:	adds	r0, sl, r0
   14f60:	ldr	r1, [sp, #240]	; 0xf0
   14f64:	adc	r1, r8, r1
   14f68:	adds	r2, r0, r7
   14f6c:	str	r2, [sp, #24]
   14f70:	adc	r0, r1, r6
   14f74:	str	r0, [sp, #32]
   14f78:	eor	r1, r0, r5
   14f7c:	eor	r0, r2, r4
   14f80:	mov	r2, #16
   14f84:	bl	18c30 <__assert_fail@plt+0x78b4>
   14f88:	mov	r2, r0
   14f8c:	str	r0, [sp, #148]	; 0x94
   14f90:	mov	r3, r1
   14f94:	str	r1, [sp, #144]	; 0x90
   14f98:	ldr	r0, [sp, #128]	; 0x80
   14f9c:	adds	r5, r2, r0
   14fa0:	str	r5, [sp, #128]	; 0x80
   14fa4:	adc	r0, r1, r9
   14fa8:	str	r0, [sp, #132]	; 0x84
   14fac:	eor	r1, r0, r6
   14fb0:	eor	r0, r5, r7
   14fb4:	str	r3, [sp, #412]	; 0x19c
   14fb8:	str	r2, [sp, #408]	; 0x198
   14fbc:	mov	r2, #63	; 0x3f
   14fc0:	bl	18c30 <__assert_fail@plt+0x78b4>
   14fc4:	str	r0, [sp, #60]	; 0x3c
   14fc8:	str	r1, [sp, #56]	; 0x38
   14fcc:	ldr	r0, [sp, #268]	; 0x10c
   14fd0:	ldr	r1, [sp, #28]
   14fd4:	adds	r0, r1, r0
   14fd8:	ldr	r1, [sp, #264]	; 0x108
   14fdc:	ldr	r2, [sp, #36]	; 0x24
   14fe0:	adc	r1, r2, r1
   14fe4:	ldr	r6, [sp, #76]	; 0x4c
   14fe8:	adds	r8, r0, r6
   14fec:	ldr	r7, [sp, #68]	; 0x44
   14ff0:	adc	r9, r1, r7
   14ff4:	ldr	r0, [sp, #96]	; 0x60
   14ff8:	eor	r1, r9, r0
   14ffc:	ldr	r0, [sp, #100]	; 0x64
   15000:	eor	r0, r8, r0
   15004:	mov	r2, #32
   15008:	bl	18c30 <__assert_fail@plt+0x78b4>
   1500c:	mov	r4, r0
   15010:	mov	r5, r1
   15014:	ldr	r0, [sp, #120]	; 0x78
   15018:	adds	sl, r4, r0
   1501c:	ldr	r0, [sp, #124]	; 0x7c
   15020:	adc	r0, r1, r0
   15024:	str	r0, [sp, #124]	; 0x7c
   15028:	eor	r1, r0, r7
   1502c:	eor	r0, sl, r6
   15030:	mov	r2, #24
   15034:	bl	18c30 <__assert_fail@plt+0x78b4>
   15038:	mov	r6, r0
   1503c:	mov	r7, r1
   15040:	ldr	r0, [sp, #188]	; 0xbc
   15044:	adds	r0, r8, r0
   15048:	ldr	r1, [sp, #184]	; 0xb8
   1504c:	adc	r1, r9, r1
   15050:	adds	r2, r0, r6
   15054:	str	r2, [sp, #28]
   15058:	adc	r0, r1, r7
   1505c:	str	r0, [sp, #36]	; 0x24
   15060:	eor	r1, r0, r5
   15064:	eor	r0, r2, r4
   15068:	mov	r2, #16
   1506c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15070:	str	r0, [sp, #100]	; 0x64
   15074:	str	r1, [sp, #96]	; 0x60
   15078:	adds	r2, r0, sl
   1507c:	str	r2, [sp, #120]	; 0x78
   15080:	ldr	r0, [sp, #124]	; 0x7c
   15084:	adc	r0, r1, r0
   15088:	str	r0, [sp, #124]	; 0x7c
   1508c:	eor	r1, r0, r7
   15090:	eor	r0, r2, r6
   15094:	mov	r2, #63	; 0x3f
   15098:	bl	18c30 <__assert_fail@plt+0x78b4>
   1509c:	str	r0, [sp, #76]	; 0x4c
   150a0:	str	r1, [sp, #68]	; 0x44
   150a4:	ldr	r0, [sp, #228]	; 0xe4
   150a8:	ldr	r1, [sp, #44]	; 0x2c
   150ac:	adds	r0, r1, r0
   150b0:	ldr	r1, [sp, #224]	; 0xe0
   150b4:	ldr	r2, [sp, #52]	; 0x34
   150b8:	adc	r1, r2, r1
   150bc:	ldr	r4, [sp, #72]	; 0x48
   150c0:	adds	r8, r0, r4
   150c4:	ldr	r7, [sp, #64]	; 0x40
   150c8:	adc	r9, r1, r7
   150cc:	ldr	r0, [sp, #88]	; 0x58
   150d0:	eor	r1, r9, r0
   150d4:	ldr	r0, [sp, #92]	; 0x5c
   150d8:	eor	r0, r8, r0
   150dc:	mov	r2, #32
   150e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   150e4:	mov	r5, r0
   150e8:	mov	r6, r1
   150ec:	ldr	r0, [sp, #112]	; 0x70
   150f0:	adds	sl, r5, r0
   150f4:	ldr	r0, [sp, #116]	; 0x74
   150f8:	adc	r0, r1, r0
   150fc:	str	r0, [sp, #116]	; 0x74
   15100:	eor	r1, r0, r7
   15104:	eor	r0, sl, r4
   15108:	mov	r2, #24
   1510c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15110:	mov	r7, r0
   15114:	mov	r4, r1
   15118:	ldr	r0, [sp, #164]	; 0xa4
   1511c:	adds	r0, r8, r0
   15120:	ldr	r1, [sp, #160]	; 0xa0
   15124:	adc	r1, r9, r1
   15128:	adds	r2, r0, r7
   1512c:	str	r2, [sp, #44]	; 0x2c
   15130:	adc	r0, r1, r4
   15134:	str	r0, [sp, #52]	; 0x34
   15138:	eor	r1, r0, r6
   1513c:	eor	r0, r2, r5
   15140:	mov	r2, #16
   15144:	bl	18c30 <__assert_fail@plt+0x78b4>
   15148:	str	r0, [sp, #92]	; 0x5c
   1514c:	str	r1, [sp, #88]	; 0x58
   15150:	adds	r2, r0, sl
   15154:	str	r2, [sp, #112]	; 0x70
   15158:	ldr	r0, [sp, #116]	; 0x74
   1515c:	adc	r0, r1, r0
   15160:	str	r0, [sp, #116]	; 0x74
   15164:	eor	r1, r0, r4
   15168:	eor	r0, r2, r7
   1516c:	mov	r2, #63	; 0x3f
   15170:	bl	18c30 <__assert_fail@plt+0x78b4>
   15174:	str	r0, [sp, #72]	; 0x48
   15178:	str	r1, [sp, #64]	; 0x40
   1517c:	ldr	r0, [sp, #180]	; 0xb4
   15180:	ldr	r5, [sp, #136]	; 0x88
   15184:	adds	r0, r5, r0
   15188:	ldr	r1, [sp, #176]	; 0xb0
   1518c:	ldr	r6, [sp, #140]	; 0x8c
   15190:	adc	r1, r6, r1
   15194:	ldr	r2, [sp, #40]	; 0x28
   15198:	adds	sl, r0, r2
   1519c:	ldr	r0, [sp, #48]	; 0x30
   151a0:	adc	r8, r1, r0
   151a4:	ldr	r0, [sp, #80]	; 0x50
   151a8:	eor	r1, r8, r0
   151ac:	ldr	r0, [sp, #84]	; 0x54
   151b0:	eor	r0, sl, r0
   151b4:	mov	r2, #32
   151b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   151bc:	mov	r4, r0
   151c0:	mov	r7, r1
   151c4:	ldr	r0, [sp, #104]	; 0x68
   151c8:	adds	r2, r4, r0
   151cc:	ldr	r0, [sp, #108]	; 0x6c
   151d0:	adc	r0, r1, r0
   151d4:	str	r0, [sp, #108]	; 0x6c
   151d8:	eor	r1, r0, r6
   151dc:	eor	r0, r2, r5
   151e0:	mov	r6, r2
   151e4:	mov	r2, #24
   151e8:	bl	18c30 <__assert_fail@plt+0x78b4>
   151ec:	mov	r9, r0
   151f0:	mov	r5, r1
   151f4:	ldr	r0, [sp, #204]	; 0xcc
   151f8:	adds	r0, sl, r0
   151fc:	ldr	r1, [sp, #200]	; 0xc8
   15200:	adc	r1, r8, r1
   15204:	adds	r2, r0, r9
   15208:	str	r2, [sp, #40]	; 0x28
   1520c:	adc	r0, r1, r5
   15210:	str	r0, [sp, #48]	; 0x30
   15214:	eor	r1, r0, r7
   15218:	eor	r0, r2, r4
   1521c:	mov	r2, #16
   15220:	bl	18c30 <__assert_fail@plt+0x78b4>
   15224:	str	r0, [sp, #84]	; 0x54
   15228:	str	r1, [sp, #80]	; 0x50
   1522c:	adds	r2, r0, r6
   15230:	str	r2, [sp, #104]	; 0x68
   15234:	ldr	r0, [sp, #108]	; 0x6c
   15238:	adc	r0, r1, r0
   1523c:	str	r0, [sp, #108]	; 0x6c
   15240:	eor	r1, r0, r5
   15244:	eor	r0, r2, r9
   15248:	mov	r2, #63	; 0x3f
   1524c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15250:	mov	r4, r0
   15254:	mov	r5, r1
   15258:	ldr	r0, [sp, #212]	; 0xd4
   1525c:	ldr	r1, [sp, #24]
   15260:	adds	r0, r1, r0
   15264:	ldr	r1, [sp, #208]	; 0xd0
   15268:	ldr	r2, [sp, #32]
   1526c:	adc	r1, r2, r1
   15270:	adds	r8, r0, r4
   15274:	adc	r9, r1, r5
   15278:	ldr	r0, [sp, #96]	; 0x60
   1527c:	eor	r1, r9, r0
   15280:	ldr	r0, [sp, #100]	; 0x64
   15284:	eor	r0, r8, r0
   15288:	mov	r2, #32
   1528c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15290:	mov	r7, r0
   15294:	mov	r6, r1
   15298:	ldr	r0, [sp, #112]	; 0x70
   1529c:	adds	sl, r7, r0
   152a0:	ldr	r0, [sp, #116]	; 0x74
   152a4:	adc	r0, r1, r0
   152a8:	str	r0, [sp, #140]	; 0x8c
   152ac:	eor	r1, r0, r5
   152b0:	eor	r0, sl, r4
   152b4:	mov	r2, #24
   152b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   152bc:	mov	r4, r0
   152c0:	mov	r5, r1
   152c4:	ldr	r0, [sp, #164]	; 0xa4
   152c8:	adds	r0, r8, r0
   152cc:	ldr	r1, [sp, #160]	; 0xa0
   152d0:	adc	r1, r9, r1
   152d4:	adds	r2, r0, r4
   152d8:	str	r2, [sp, #24]
   152dc:	adc	r0, r1, r5
   152e0:	str	r0, [sp, #32]
   152e4:	eor	r1, r0, r6
   152e8:	eor	r0, r2, r7
   152ec:	mov	r2, #16
   152f0:	bl	18c30 <__assert_fail@plt+0x78b4>
   152f4:	str	r0, [sp, #100]	; 0x64
   152f8:	str	r1, [sp, #96]	; 0x60
   152fc:	adds	r2, r0, sl
   15300:	str	r2, [sp, #112]	; 0x70
   15304:	ldr	r0, [sp, #140]	; 0x8c
   15308:	adc	r0, r1, r0
   1530c:	str	r0, [sp, #116]	; 0x74
   15310:	eor	r1, r0, r5
   15314:	eor	r0, r2, r4
   15318:	mov	r2, #63	; 0x3f
   1531c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15320:	mov	r2, r0
   15324:	str	r0, [sp, #136]	; 0x88
   15328:	mov	r3, r1
   1532c:	str	r1, [sp, #140]	; 0x8c
   15330:	ldr	r0, [sp, #268]	; 0x10c
   15334:	ldr	r6, [sp, #60]	; 0x3c
   15338:	adds	r0, r6, r0
   1533c:	ldr	r1, [sp, #264]	; 0x108
   15340:	ldr	r7, [sp, #56]	; 0x38
   15344:	adc	r1, r7, r1
   15348:	ldr	r5, [sp, #28]
   1534c:	adds	sl, r0, r5
   15350:	ldr	r0, [sp, #36]	; 0x24
   15354:	adc	r8, r1, r0
   15358:	ldr	r0, [sp, #88]	; 0x58
   1535c:	eor	r1, r0, r8
   15360:	ldr	r0, [sp, #92]	; 0x5c
   15364:	eor	r0, r0, sl
   15368:	str	r3, [sp, #324]	; 0x144
   1536c:	str	r2, [sp, #320]	; 0x140
   15370:	mov	r2, #32
   15374:	bl	18c30 <__assert_fail@plt+0x78b4>
   15378:	mov	r4, r0
   1537c:	mov	r5, r1
   15380:	ldr	r0, [sp, #104]	; 0x68
   15384:	adds	r9, r4, r0
   15388:	ldr	r0, [sp, #108]	; 0x6c
   1538c:	adc	r0, r1, r0
   15390:	str	r0, [sp, #108]	; 0x6c
   15394:	eor	r1, r0, r7
   15398:	eor	r0, r9, r6
   1539c:	mov	r2, #24
   153a0:	bl	18c30 <__assert_fail@plt+0x78b4>
   153a4:	mov	r6, r0
   153a8:	mov	r7, r1
   153ac:	ldr	r0, [sp, #260]	; 0x104
   153b0:	adds	r0, sl, r0
   153b4:	ldr	r1, [sp, #256]	; 0x100
   153b8:	adc	r1, r8, r1
   153bc:	adds	r2, r0, r6
   153c0:	str	r2, [sp, #28]
   153c4:	adc	r0, r1, r7
   153c8:	str	r0, [sp, #36]	; 0x24
   153cc:	eor	r1, r0, r5
   153d0:	eor	r0, r2, r4
   153d4:	mov	r2, #16
   153d8:	bl	18c30 <__assert_fail@plt+0x78b4>
   153dc:	str	r0, [sp, #92]	; 0x5c
   153e0:	str	r1, [sp, #88]	; 0x58
   153e4:	adds	r2, r0, r9
   153e8:	str	r2, [sp, #104]	; 0x68
   153ec:	ldr	r0, [sp, #108]	; 0x6c
   153f0:	adc	r0, r1, r0
   153f4:	str	r0, [sp, #108]	; 0x6c
   153f8:	eor	r1, r0, r7
   153fc:	eor	r0, r2, r6
   15400:	mov	r2, #63	; 0x3f
   15404:	bl	18c30 <__assert_fail@plt+0x78b4>
   15408:	mov	r2, r0
   1540c:	str	r0, [sp, #60]	; 0x3c
   15410:	mov	r3, r1
   15414:	str	r1, [sp, #56]	; 0x38
   15418:	ldr	r0, [sp, #172]	; 0xac
   1541c:	ldr	r1, [sp, #24]
   15420:	adds	r0, r1, r0
   15424:	ldr	r1, [sp, #168]	; 0xa8
   15428:	ldr	r7, [sp, #32]
   1542c:	adc	r1, r7, r1
   15430:	adds	r0, r0, r2
   15434:	str	r0, [sp, #32]
   15438:	adc	r0, r1, r3
   1543c:	str	r0, [sp, #24]
   15440:	ldr	r0, [sp, #276]	; 0x114
   15444:	ldr	r4, [sp, #76]	; 0x4c
   15448:	adds	r0, r4, r0
   1544c:	ldr	r1, [sp, #272]	; 0x110
   15450:	ldr	r6, [sp, #68]	; 0x44
   15454:	adc	r1, r6, r1
   15458:	ldr	r2, [sp, #44]	; 0x2c
   1545c:	adds	r8, r0, r2
   15460:	ldr	r0, [sp, #52]	; 0x34
   15464:	adc	r9, r1, r0
   15468:	ldr	r0, [sp, #80]	; 0x50
   1546c:	eor	r1, r0, r9
   15470:	ldr	r0, [sp, #84]	; 0x54
   15474:	eor	r0, r0, r8
   15478:	mov	r2, #32
   1547c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15480:	mov	r5, r0
   15484:	mov	r7, r1
   15488:	ldr	r0, [sp, #128]	; 0x80
   1548c:	adds	sl, r5, r0
   15490:	ldr	r0, [sp, #132]	; 0x84
   15494:	adc	r0, r1, r0
   15498:	str	r0, [sp, #132]	; 0x84
   1549c:	eor	r1, r0, r6
   154a0:	eor	r0, sl, r4
   154a4:	mov	r2, #24
   154a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   154ac:	mov	r4, r0
   154b0:	mov	r6, r1
   154b4:	ldr	r0, [sp, #228]	; 0xe4
   154b8:	adds	r0, r8, r0
   154bc:	ldr	r1, [sp, #224]	; 0xe0
   154c0:	adc	r1, r9, r1
   154c4:	adds	r2, r0, r4
   154c8:	str	r2, [sp, #44]	; 0x2c
   154cc:	adc	r0, r1, r6
   154d0:	str	r0, [sp, #52]	; 0x34
   154d4:	eor	r1, r0, r7
   154d8:	eor	r0, r2, r5
   154dc:	mov	r2, #16
   154e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   154e4:	str	r0, [sp, #84]	; 0x54
   154e8:	str	r1, [sp, #80]	; 0x50
   154ec:	adds	r2, r0, sl
   154f0:	str	r2, [sp, #128]	; 0x80
   154f4:	ldr	r0, [sp, #132]	; 0x84
   154f8:	adc	r0, r1, r0
   154fc:	str	r0, [sp, #132]	; 0x84
   15500:	eor	r1, r0, r6
   15504:	eor	r0, r2, r4
   15508:	mov	r2, #63	; 0x3f
   1550c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15510:	str	r0, [sp, #76]	; 0x4c
   15514:	str	r1, [sp, #68]	; 0x44
   15518:	ldr	r0, [sp, #188]	; 0xbc
   1551c:	ldr	r5, [sp, #72]	; 0x48
   15520:	adds	r0, r5, r0
   15524:	ldr	r1, [sp, #184]	; 0xb8
   15528:	ldr	r7, [sp, #64]	; 0x40
   1552c:	adc	r1, r7, r1
   15530:	ldr	r2, [sp, #40]	; 0x28
   15534:	adds	sl, r0, r2
   15538:	ldr	r0, [sp, #48]	; 0x30
   1553c:	adc	r8, r1, r0
   15540:	ldr	r0, [sp, #144]	; 0x90
   15544:	eor	r1, r8, r0
   15548:	ldr	r0, [sp, #148]	; 0x94
   1554c:	eor	r0, sl, r0
   15550:	mov	r2, #32
   15554:	bl	18c30 <__assert_fail@plt+0x78b4>
   15558:	mov	r4, r0
   1555c:	mov	r6, r1
   15560:	ldr	r0, [sp, #120]	; 0x78
   15564:	adds	r9, r4, r0
   15568:	ldr	r0, [sp, #124]	; 0x7c
   1556c:	adc	r0, r1, r0
   15570:	str	r0, [sp, #148]	; 0x94
   15574:	eor	r1, r0, r7
   15578:	eor	r0, r9, r5
   1557c:	mov	r2, #24
   15580:	bl	18c30 <__assert_fail@plt+0x78b4>
   15584:	mov	r5, r0
   15588:	mov	r7, r1
   1558c:	ldr	r0, [sp, #180]	; 0xb4
   15590:	adds	r0, sl, r0
   15594:	ldr	r1, [sp, #176]	; 0xb0
   15598:	adc	r1, r8, r1
   1559c:	adds	r2, r0, r5
   155a0:	str	r2, [sp, #40]	; 0x28
   155a4:	adc	r0, r1, r7
   155a8:	str	r0, [sp, #48]	; 0x30
   155ac:	eor	r1, r0, r6
   155b0:	eor	r0, r2, r4
   155b4:	mov	r2, #16
   155b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   155bc:	mov	r4, r0
   155c0:	mov	r6, r1
   155c4:	adds	r2, r0, r9
   155c8:	str	r2, [sp, #120]	; 0x78
   155cc:	ldr	r0, [sp, #148]	; 0x94
   155d0:	adc	r0, r1, r0
   155d4:	str	r0, [sp, #124]	; 0x7c
   155d8:	eor	r1, r0, r7
   155dc:	eor	r0, r2, r5
   155e0:	mov	r2, #63	; 0x3f
   155e4:	bl	18c30 <__assert_fail@plt+0x78b4>
   155e8:	str	r0, [sp, #72]	; 0x48
   155ec:	str	r1, [sp, #64]	; 0x40
   155f0:	ldr	r8, [sp, #24]
   155f4:	eor	r1, r6, r8
   155f8:	ldr	sl, [sp, #32]
   155fc:	eor	r0, r4, sl
   15600:	mov	r2, #32
   15604:	bl	18c30 <__assert_fail@plt+0x78b4>
   15608:	mov	r4, r0
   1560c:	mov	r5, r1
   15610:	ldr	r0, [sp, #128]	; 0x80
   15614:	adds	r2, r4, r0
   15618:	str	r2, [sp, #128]	; 0x80
   1561c:	ldr	r0, [sp, #132]	; 0x84
   15620:	adc	r9, r1, r0
   15624:	ldr	r0, [sp, #56]	; 0x38
   15628:	eor	r1, r9, r0
   1562c:	ldr	r0, [sp, #60]	; 0x3c
   15630:	eor	r0, r2, r0
   15634:	mov	r2, #24
   15638:	bl	18c30 <__assert_fail@plt+0x78b4>
   1563c:	mov	r6, r0
   15640:	mov	r7, r1
   15644:	ldr	r0, [sp, #252]	; 0xfc
   15648:	adds	r0, sl, r0
   1564c:	ldr	r1, [sp, #248]	; 0xf8
   15650:	adc	r1, r8, r1
   15654:	adds	r2, r0, r6
   15658:	str	r2, [sp, #24]
   1565c:	adc	r0, r1, r7
   15660:	str	r0, [sp, #32]
   15664:	eor	r1, r0, r5
   15668:	eor	r0, r2, r4
   1566c:	mov	r2, #16
   15670:	bl	18c30 <__assert_fail@plt+0x78b4>
   15674:	mov	r2, r0
   15678:	str	r0, [sp, #148]	; 0x94
   1567c:	mov	r3, r1
   15680:	str	r1, [sp, #144]	; 0x90
   15684:	ldr	r0, [sp, #128]	; 0x80
   15688:	adds	r5, r2, r0
   1568c:	str	r5, [sp, #128]	; 0x80
   15690:	adc	r0, r1, r9
   15694:	str	r0, [sp, #132]	; 0x84
   15698:	eor	r1, r0, r7
   1569c:	eor	r0, r5, r6
   156a0:	str	r3, [sp, #412]	; 0x19c
   156a4:	str	r2, [sp, #408]	; 0x198
   156a8:	mov	r2, #63	; 0x3f
   156ac:	bl	18c30 <__assert_fail@plt+0x78b4>
   156b0:	str	r0, [sp, #60]	; 0x3c
   156b4:	str	r1, [sp, #56]	; 0x38
   156b8:	ldr	r0, [sp, #236]	; 0xec
   156bc:	ldr	r1, [sp, #28]
   156c0:	adds	r0, r1, r0
   156c4:	ldr	r1, [sp, #232]	; 0xe8
   156c8:	ldr	r2, [sp, #36]	; 0x24
   156cc:	adc	r1, r2, r1
   156d0:	ldr	r6, [sp, #76]	; 0x4c
   156d4:	adds	sl, r0, r6
   156d8:	ldr	r7, [sp, #68]	; 0x44
   156dc:	adc	r9, r1, r7
   156e0:	ldr	r0, [sp, #96]	; 0x60
   156e4:	eor	r1, r9, r0
   156e8:	ldr	r0, [sp, #100]	; 0x64
   156ec:	eor	r0, sl, r0
   156f0:	mov	r2, #32
   156f4:	bl	18c30 <__assert_fail@plt+0x78b4>
   156f8:	mov	r4, r0
   156fc:	mov	r5, r1
   15700:	ldr	r0, [sp, #120]	; 0x78
   15704:	adds	r2, r4, r0
   15708:	ldr	r0, [sp, #124]	; 0x7c
   1570c:	adc	r0, r1, r0
   15710:	str	r0, [sp, #124]	; 0x7c
   15714:	eor	r1, r0, r7
   15718:	eor	r0, r2, r6
   1571c:	mov	r7, r2
   15720:	mov	r2, #24
   15724:	bl	18c30 <__assert_fail@plt+0x78b4>
   15728:	mov	r6, r0
   1572c:	mov	r8, r1
   15730:	ldr	r0, [sp, #220]	; 0xdc
   15734:	adds	r0, sl, r0
   15738:	ldr	r1, [sp, #216]	; 0xd8
   1573c:	adc	r1, r9, r1
   15740:	adds	r2, r0, r6
   15744:	str	r2, [sp, #28]
   15748:	adc	r0, r1, r8
   1574c:	str	r0, [sp, #36]	; 0x24
   15750:	eor	r1, r0, r5
   15754:	eor	r0, r2, r4
   15758:	mov	r2, #16
   1575c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15760:	str	r0, [sp, #100]	; 0x64
   15764:	str	r1, [sp, #96]	; 0x60
   15768:	adds	r2, r0, r7
   1576c:	str	r2, [sp, #120]	; 0x78
   15770:	ldr	r0, [sp, #124]	; 0x7c
   15774:	adc	r0, r1, r0
   15778:	str	r0, [sp, #124]	; 0x7c
   1577c:	eor	r1, r0, r8
   15780:	eor	r0, r2, r6
   15784:	mov	r2, #63	; 0x3f
   15788:	bl	18c30 <__assert_fail@plt+0x78b4>
   1578c:	str	r0, [sp, #76]	; 0x4c
   15790:	str	r1, [sp, #68]	; 0x44
   15794:	ldr	r0, [sp, #244]	; 0xf4
   15798:	ldr	r1, [sp, #44]	; 0x2c
   1579c:	adds	r0, r1, r0
   157a0:	ldr	r1, [sp, #240]	; 0xf0
   157a4:	ldr	r2, [sp, #52]	; 0x34
   157a8:	adc	r1, r2, r1
   157ac:	ldr	r5, [sp, #72]	; 0x48
   157b0:	adds	r8, r0, r5
   157b4:	ldr	r7, [sp, #64]	; 0x40
   157b8:	adc	r9, r1, r7
   157bc:	ldr	r0, [sp, #88]	; 0x58
   157c0:	eor	r1, r9, r0
   157c4:	ldr	r0, [sp, #92]	; 0x5c
   157c8:	eor	r0, r8, r0
   157cc:	mov	r2, #32
   157d0:	bl	18c30 <__assert_fail@plt+0x78b4>
   157d4:	mov	r4, r0
   157d8:	mov	r6, r1
   157dc:	ldr	r0, [sp, #112]	; 0x70
   157e0:	adds	sl, r4, r0
   157e4:	ldr	r0, [sp, #116]	; 0x74
   157e8:	adc	r0, r1, r0
   157ec:	str	r0, [sp, #116]	; 0x74
   157f0:	eor	r1, r0, r7
   157f4:	eor	r0, sl, r5
   157f8:	mov	r2, #24
   157fc:	bl	18c30 <__assert_fail@plt+0x78b4>
   15800:	mov	r5, r0
   15804:	mov	r7, r1
   15808:	ldr	r0, [sp, #204]	; 0xcc
   1580c:	adds	r0, r8, r0
   15810:	ldr	r1, [sp, #200]	; 0xc8
   15814:	adc	r1, r9, r1
   15818:	adds	r2, r0, r5
   1581c:	str	r2, [sp, #44]	; 0x2c
   15820:	adc	r0, r1, r7
   15824:	str	r0, [sp, #52]	; 0x34
   15828:	eor	r1, r0, r6
   1582c:	eor	r0, r2, r4
   15830:	mov	r2, #16
   15834:	bl	18c30 <__assert_fail@plt+0x78b4>
   15838:	str	r0, [sp, #92]	; 0x5c
   1583c:	str	r1, [sp, #88]	; 0x58
   15840:	adds	r2, r0, sl
   15844:	str	r2, [sp, #112]	; 0x70
   15848:	ldr	r0, [sp, #116]	; 0x74
   1584c:	adc	r0, r1, r0
   15850:	str	r0, [sp, #116]	; 0x74
   15854:	eor	r1, r0, r7
   15858:	eor	r0, r2, r5
   1585c:	mov	r2, #63	; 0x3f
   15860:	bl	18c30 <__assert_fail@plt+0x78b4>
   15864:	str	r0, [sp, #72]	; 0x48
   15868:	str	r1, [sp, #64]	; 0x40
   1586c:	ldr	r0, [sp, #284]	; 0x11c
   15870:	ldr	r6, [sp, #136]	; 0x88
   15874:	adds	r0, r6, r0
   15878:	ldr	r1, [sp, #280]	; 0x118
   1587c:	ldr	r4, [sp, #140]	; 0x8c
   15880:	adc	r1, r4, r1
   15884:	ldr	r2, [sp, #40]	; 0x28
   15888:	adds	sl, r0, r2
   1588c:	ldr	r0, [sp, #48]	; 0x30
   15890:	adc	r8, r1, r0
   15894:	ldr	r0, [sp, #80]	; 0x50
   15898:	eor	r1, r8, r0
   1589c:	ldr	r0, [sp, #84]	; 0x54
   158a0:	eor	r0, sl, r0
   158a4:	mov	r2, #32
   158a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   158ac:	mov	r5, r0
   158b0:	mov	r7, r1
   158b4:	ldr	r0, [sp, #104]	; 0x68
   158b8:	adds	r2, r5, r0
   158bc:	ldr	r0, [sp, #108]	; 0x6c
   158c0:	adc	r0, r1, r0
   158c4:	str	r0, [sp, #108]	; 0x6c
   158c8:	eor	r1, r0, r4
   158cc:	eor	r0, r2, r6
   158d0:	mov	r4, r2
   158d4:	mov	r2, #24
   158d8:	bl	18c30 <__assert_fail@plt+0x78b4>
   158dc:	mov	r6, r0
   158e0:	mov	r9, r1
   158e4:	ldr	r0, [sp, #196]	; 0xc4
   158e8:	adds	r0, sl, r0
   158ec:	ldr	r1, [sp, #192]	; 0xc0
   158f0:	adc	r1, r8, r1
   158f4:	adds	r2, r0, r6
   158f8:	str	r2, [sp, #40]	; 0x28
   158fc:	adc	r0, r1, r9
   15900:	str	r0, [sp, #48]	; 0x30
   15904:	eor	r1, r0, r7
   15908:	eor	r0, r2, r5
   1590c:	mov	r2, #16
   15910:	bl	18c30 <__assert_fail@plt+0x78b4>
   15914:	str	r0, [sp, #84]	; 0x54
   15918:	str	r1, [sp, #80]	; 0x50
   1591c:	adds	r2, r0, r4
   15920:	str	r2, [sp, #104]	; 0x68
   15924:	ldr	r0, [sp, #108]	; 0x6c
   15928:	adc	r0, r1, r0
   1592c:	str	r0, [sp, #108]	; 0x6c
   15930:	eor	r1, r0, r9
   15934:	eor	r0, r2, r6
   15938:	mov	r2, #63	; 0x3f
   1593c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15940:	mov	r6, r0
   15944:	mov	r7, r1
   15948:	ldr	r0, [sp, #276]	; 0x114
   1594c:	ldr	r1, [sp, #24]
   15950:	adds	r0, r1, r0
   15954:	ldr	r1, [sp, #272]	; 0x110
   15958:	ldr	r2, [sp, #32]
   1595c:	adc	r1, r2, r1
   15960:	adds	r8, r0, r6
   15964:	adc	r9, r1, r7
   15968:	ldr	r0, [sp, #96]	; 0x60
   1596c:	eor	r1, r9, r0
   15970:	ldr	r0, [sp, #100]	; 0x64
   15974:	eor	r0, r8, r0
   15978:	mov	r2, #32
   1597c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15980:	mov	r5, r0
   15984:	mov	r4, r1
   15988:	ldr	r0, [sp, #112]	; 0x70
   1598c:	adds	sl, r5, r0
   15990:	ldr	r0, [sp, #116]	; 0x74
   15994:	adc	r0, r1, r0
   15998:	str	r0, [sp, #140]	; 0x8c
   1599c:	eor	r1, r0, r7
   159a0:	eor	r0, sl, r6
   159a4:	mov	r2, #24
   159a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   159ac:	mov	r6, r0
   159b0:	mov	r7, r1
   159b4:	ldr	r0, [sp, #220]	; 0xdc
   159b8:	adds	r0, r8, r0
   159bc:	ldr	r1, [sp, #216]	; 0xd8
   159c0:	adc	r1, r9, r1
   159c4:	adds	r2, r0, r6
   159c8:	str	r2, [sp, #24]
   159cc:	adc	r0, r1, r7
   159d0:	str	r0, [sp, #32]
   159d4:	eor	r1, r0, r4
   159d8:	eor	r0, r2, r5
   159dc:	mov	r2, #16
   159e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   159e4:	str	r0, [sp, #100]	; 0x64
   159e8:	str	r1, [sp, #96]	; 0x60
   159ec:	adds	r2, r0, sl
   159f0:	str	r2, [sp, #112]	; 0x70
   159f4:	ldr	r0, [sp, #140]	; 0x8c
   159f8:	adc	r0, r1, r0
   159fc:	str	r0, [sp, #116]	; 0x74
   15a00:	eor	r1, r0, r7
   15a04:	eor	r0, r2, r6
   15a08:	mov	r2, #63	; 0x3f
   15a0c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15a10:	mov	r2, r0
   15a14:	str	r0, [sp, #136]	; 0x88
   15a18:	mov	r3, r1
   15a1c:	str	r1, [sp, #140]	; 0x8c
   15a20:	ldr	r0, [sp, #244]	; 0xf4
   15a24:	ldr	r6, [sp, #60]	; 0x3c
   15a28:	adds	r0, r6, r0
   15a2c:	ldr	r1, [sp, #240]	; 0xf0
   15a30:	ldr	r7, [sp, #56]	; 0x38
   15a34:	adc	r1, r7, r1
   15a38:	ldr	r5, [sp, #28]
   15a3c:	adds	sl, r0, r5
   15a40:	ldr	r0, [sp, #36]	; 0x24
   15a44:	adc	r8, r1, r0
   15a48:	ldr	r0, [sp, #88]	; 0x58
   15a4c:	eor	r1, r0, r8
   15a50:	ldr	r0, [sp, #92]	; 0x5c
   15a54:	eor	r0, r0, sl
   15a58:	str	r3, [sp, #324]	; 0x144
   15a5c:	str	r2, [sp, #320]	; 0x140
   15a60:	mov	r2, #32
   15a64:	bl	18c30 <__assert_fail@plt+0x78b4>
   15a68:	mov	r4, r0
   15a6c:	mov	r5, r1
   15a70:	ldr	r0, [sp, #104]	; 0x68
   15a74:	adds	r9, r4, r0
   15a78:	ldr	r0, [sp, #108]	; 0x6c
   15a7c:	adc	r0, r1, r0
   15a80:	str	r0, [sp, #108]	; 0x6c
   15a84:	eor	r1, r0, r7
   15a88:	eor	r0, r9, r6
   15a8c:	mov	r2, #24
   15a90:	bl	18c30 <__assert_fail@plt+0x78b4>
   15a94:	mov	r6, r0
   15a98:	mov	r7, r1
   15a9c:	ldr	r0, [sp, #188]	; 0xbc
   15aa0:	adds	r0, sl, r0
   15aa4:	ldr	r1, [sp, #184]	; 0xb8
   15aa8:	adc	r1, r8, r1
   15aac:	adds	r2, r0, r6
   15ab0:	str	r2, [sp, #28]
   15ab4:	adc	r0, r1, r7
   15ab8:	str	r0, [sp, #36]	; 0x24
   15abc:	eor	r1, r0, r5
   15ac0:	eor	r0, r2, r4
   15ac4:	mov	r2, #16
   15ac8:	bl	18c30 <__assert_fail@plt+0x78b4>
   15acc:	str	r0, [sp, #92]	; 0x5c
   15ad0:	str	r1, [sp, #88]	; 0x58
   15ad4:	adds	r2, r0, r9
   15ad8:	str	r2, [sp, #104]	; 0x68
   15adc:	ldr	r0, [sp, #108]	; 0x6c
   15ae0:	adc	r0, r1, r0
   15ae4:	str	r0, [sp, #108]	; 0x6c
   15ae8:	eor	r1, r0, r7
   15aec:	eor	r0, r2, r6
   15af0:	mov	r2, #63	; 0x3f
   15af4:	bl	18c30 <__assert_fail@plt+0x78b4>
   15af8:	mov	r2, r0
   15afc:	str	r0, [sp, #60]	; 0x3c
   15b00:	mov	r3, r1
   15b04:	str	r1, [sp, #56]	; 0x38
   15b08:	ldr	r0, [sp, #228]	; 0xe4
   15b0c:	ldr	r1, [sp, #24]
   15b10:	adds	r0, r1, r0
   15b14:	ldr	r1, [sp, #224]	; 0xe0
   15b18:	ldr	r7, [sp, #32]
   15b1c:	adc	r1, r7, r1
   15b20:	adds	r0, r0, r2
   15b24:	str	r0, [sp, #32]
   15b28:	adc	r0, r1, r3
   15b2c:	str	r0, [sp, #24]
   15b30:	ldr	r0, [sp, #164]	; 0xa4
   15b34:	ldr	r4, [sp, #76]	; 0x4c
   15b38:	adds	r0, r4, r0
   15b3c:	ldr	r1, [sp, #160]	; 0xa0
   15b40:	ldr	r7, [sp, #68]	; 0x44
   15b44:	adc	r1, r7, r1
   15b48:	ldr	r2, [sp, #44]	; 0x2c
   15b4c:	adds	r8, r0, r2
   15b50:	ldr	r0, [sp, #52]	; 0x34
   15b54:	adc	r9, r1, r0
   15b58:	ldr	r0, [sp, #80]	; 0x50
   15b5c:	eor	r1, r0, r9
   15b60:	ldr	r0, [sp, #84]	; 0x54
   15b64:	eor	r0, r0, r8
   15b68:	mov	r2, #32
   15b6c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15b70:	mov	r5, r0
   15b74:	mov	r6, r1
   15b78:	ldr	r0, [sp, #128]	; 0x80
   15b7c:	adds	sl, r5, r0
   15b80:	ldr	r0, [sp, #132]	; 0x84
   15b84:	adc	r0, r1, r0
   15b88:	str	r0, [sp, #132]	; 0x84
   15b8c:	eor	r1, r0, r7
   15b90:	eor	r0, sl, r4
   15b94:	mov	r2, #24
   15b98:	bl	18c30 <__assert_fail@plt+0x78b4>
   15b9c:	mov	r7, r0
   15ba0:	mov	r4, r1
   15ba4:	ldr	r0, [sp, #236]	; 0xec
   15ba8:	adds	r0, r8, r0
   15bac:	ldr	r1, [sp, #232]	; 0xe8
   15bb0:	adc	r1, r9, r1
   15bb4:	adds	r2, r0, r7
   15bb8:	str	r2, [sp, #44]	; 0x2c
   15bbc:	adc	r0, r1, r4
   15bc0:	str	r0, [sp, #52]	; 0x34
   15bc4:	eor	r1, r0, r6
   15bc8:	eor	r0, r2, r5
   15bcc:	mov	r2, #16
   15bd0:	bl	18c30 <__assert_fail@plt+0x78b4>
   15bd4:	str	r0, [sp, #84]	; 0x54
   15bd8:	str	r1, [sp, #80]	; 0x50
   15bdc:	adds	r2, r0, sl
   15be0:	str	r2, [sp, #128]	; 0x80
   15be4:	ldr	r0, [sp, #132]	; 0x84
   15be8:	adc	r0, r1, r0
   15bec:	str	r0, [sp, #132]	; 0x84
   15bf0:	eor	r1, r0, r4
   15bf4:	eor	r0, r2, r7
   15bf8:	mov	r2, #63	; 0x3f
   15bfc:	bl	18c30 <__assert_fail@plt+0x78b4>
   15c00:	str	r0, [sp, #76]	; 0x4c
   15c04:	str	r1, [sp, #68]	; 0x44
   15c08:	ldr	r0, [sp, #204]	; 0xcc
   15c0c:	ldr	r5, [sp, #72]	; 0x48
   15c10:	adds	r0, r5, r0
   15c14:	ldr	r1, [sp, #200]	; 0xc8
   15c18:	ldr	r7, [sp, #64]	; 0x40
   15c1c:	adc	r1, r7, r1
   15c20:	ldr	r2, [sp, #40]	; 0x28
   15c24:	adds	sl, r0, r2
   15c28:	ldr	r0, [sp, #48]	; 0x30
   15c2c:	adc	r8, r1, r0
   15c30:	ldr	r0, [sp, #144]	; 0x90
   15c34:	eor	r1, r8, r0
   15c38:	ldr	r0, [sp, #148]	; 0x94
   15c3c:	eor	r0, sl, r0
   15c40:	mov	r2, #32
   15c44:	bl	18c30 <__assert_fail@plt+0x78b4>
   15c48:	mov	r4, r0
   15c4c:	mov	r6, r1
   15c50:	ldr	r0, [sp, #120]	; 0x78
   15c54:	adds	r9, r4, r0
   15c58:	ldr	r0, [sp, #124]	; 0x7c
   15c5c:	adc	r0, r1, r0
   15c60:	str	r0, [sp, #148]	; 0x94
   15c64:	eor	r1, r0, r7
   15c68:	eor	r0, r9, r5
   15c6c:	mov	r2, #24
   15c70:	bl	18c30 <__assert_fail@plt+0x78b4>
   15c74:	mov	r7, r0
   15c78:	mov	r5, r1
   15c7c:	ldr	r0, [sp, #284]	; 0x11c
   15c80:	adds	r0, sl, r0
   15c84:	ldr	r1, [sp, #280]	; 0x118
   15c88:	adc	r1, r8, r1
   15c8c:	adds	r2, r0, r7
   15c90:	str	r2, [sp, #40]	; 0x28
   15c94:	adc	r0, r1, r5
   15c98:	str	r0, [sp, #48]	; 0x30
   15c9c:	eor	r1, r0, r6
   15ca0:	eor	r0, r2, r4
   15ca4:	mov	r2, #16
   15ca8:	bl	18c30 <__assert_fail@plt+0x78b4>
   15cac:	mov	r4, r0
   15cb0:	mov	r6, r1
   15cb4:	adds	r2, r0, r9
   15cb8:	str	r2, [sp, #120]	; 0x78
   15cbc:	ldr	r0, [sp, #148]	; 0x94
   15cc0:	adc	r0, r1, r0
   15cc4:	str	r0, [sp, #124]	; 0x7c
   15cc8:	eor	r1, r0, r5
   15ccc:	eor	r0, r2, r7
   15cd0:	mov	r2, #63	; 0x3f
   15cd4:	bl	18c30 <__assert_fail@plt+0x78b4>
   15cd8:	str	r0, [sp, #72]	; 0x48
   15cdc:	str	r1, [sp, #64]	; 0x40
   15ce0:	ldr	r8, [sp, #24]
   15ce4:	eor	r1, r6, r8
   15ce8:	ldr	sl, [sp, #32]
   15cec:	eor	r0, r4, sl
   15cf0:	mov	r2, #32
   15cf4:	bl	18c30 <__assert_fail@plt+0x78b4>
   15cf8:	mov	r4, r0
   15cfc:	mov	r5, r1
   15d00:	ldr	r0, [sp, #128]	; 0x80
   15d04:	adds	r2, r4, r0
   15d08:	str	r2, [sp, #128]	; 0x80
   15d0c:	ldr	r0, [sp, #132]	; 0x84
   15d10:	adc	r9, r1, r0
   15d14:	ldr	r0, [sp, #56]	; 0x38
   15d18:	eor	r1, r9, r0
   15d1c:	ldr	r0, [sp, #60]	; 0x3c
   15d20:	eor	r0, r2, r0
   15d24:	mov	r2, #24
   15d28:	bl	18c30 <__assert_fail@plt+0x78b4>
   15d2c:	mov	r6, r0
   15d30:	mov	r7, r1
   15d34:	ldr	r0, [sp, #196]	; 0xc4
   15d38:	adds	r0, sl, r0
   15d3c:	ldr	r1, [sp, #192]	; 0xc0
   15d40:	adc	r1, r8, r1
   15d44:	adds	r2, r0, r6
   15d48:	str	r2, [sp, #24]
   15d4c:	adc	r0, r1, r7
   15d50:	str	r0, [sp, #32]
   15d54:	eor	r1, r0, r5
   15d58:	eor	r0, r2, r4
   15d5c:	mov	r2, #16
   15d60:	bl	18c30 <__assert_fail@plt+0x78b4>
   15d64:	mov	r2, r0
   15d68:	str	r0, [sp, #148]	; 0x94
   15d6c:	mov	r3, r1
   15d70:	str	r1, [sp, #144]	; 0x90
   15d74:	ldr	r0, [sp, #128]	; 0x80
   15d78:	adds	r5, r2, r0
   15d7c:	str	r5, [sp, #128]	; 0x80
   15d80:	adc	r0, r1, r9
   15d84:	str	r0, [sp, #132]	; 0x84
   15d88:	eor	r1, r0, r7
   15d8c:	eor	r0, r5, r6
   15d90:	str	r3, [sp, #412]	; 0x19c
   15d94:	str	r2, [sp, #408]	; 0x198
   15d98:	mov	r2, #63	; 0x3f
   15d9c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15da0:	str	r0, [sp, #60]	; 0x3c
   15da4:	str	r1, [sp, #56]	; 0x38
   15da8:	ldr	r0, [sp, #260]	; 0x104
   15dac:	ldr	r1, [sp, #28]
   15db0:	adds	r0, r1, r0
   15db4:	ldr	r1, [sp, #256]	; 0x100
   15db8:	ldr	r2, [sp, #36]	; 0x24
   15dbc:	adc	r1, r2, r1
   15dc0:	ldr	r6, [sp, #76]	; 0x4c
   15dc4:	adds	r8, r0, r6
   15dc8:	ldr	r7, [sp, #68]	; 0x44
   15dcc:	adc	r9, r1, r7
   15dd0:	ldr	r0, [sp, #96]	; 0x60
   15dd4:	eor	r1, r9, r0
   15dd8:	ldr	r0, [sp, #100]	; 0x64
   15ddc:	eor	r0, r8, r0
   15de0:	mov	r2, #32
   15de4:	bl	18c30 <__assert_fail@plt+0x78b4>
   15de8:	mov	r4, r0
   15dec:	mov	r5, r1
   15df0:	ldr	r0, [sp, #120]	; 0x78
   15df4:	adds	sl, r4, r0
   15df8:	ldr	r0, [sp, #124]	; 0x7c
   15dfc:	adc	r0, r1, r0
   15e00:	str	r0, [sp, #124]	; 0x7c
   15e04:	eor	r1, r0, r7
   15e08:	eor	r0, sl, r6
   15e0c:	mov	r2, #24
   15e10:	bl	18c30 <__assert_fail@plt+0x78b4>
   15e14:	mov	r6, r0
   15e18:	mov	r7, r1
   15e1c:	ldr	r0, [sp, #268]	; 0x10c
   15e20:	adds	r0, r8, r0
   15e24:	ldr	r1, [sp, #264]	; 0x108
   15e28:	adc	r1, r9, r1
   15e2c:	adds	r2, r0, r6
   15e30:	str	r2, [sp, #28]
   15e34:	adc	r0, r1, r7
   15e38:	str	r0, [sp, #36]	; 0x24
   15e3c:	eor	r1, r0, r5
   15e40:	eor	r0, r2, r4
   15e44:	mov	r2, #16
   15e48:	bl	18c30 <__assert_fail@plt+0x78b4>
   15e4c:	str	r0, [sp, #100]	; 0x64
   15e50:	str	r1, [sp, #96]	; 0x60
   15e54:	adds	r2, r0, sl
   15e58:	str	r2, [sp, #120]	; 0x78
   15e5c:	ldr	r0, [sp, #124]	; 0x7c
   15e60:	adc	r0, r1, r0
   15e64:	str	r0, [sp, #124]	; 0x7c
   15e68:	eor	r1, r0, r7
   15e6c:	eor	r0, r2, r6
   15e70:	mov	r2, #63	; 0x3f
   15e74:	bl	18c30 <__assert_fail@plt+0x78b4>
   15e78:	str	r0, [sp, #76]	; 0x4c
   15e7c:	str	r1, [sp, #68]	; 0x44
   15e80:	ldr	r0, [sp, #180]	; 0xb4
   15e84:	ldr	r1, [sp, #44]	; 0x2c
   15e88:	adds	r0, r1, r0
   15e8c:	ldr	r1, [sp, #176]	; 0xb0
   15e90:	ldr	r2, [sp, #52]	; 0x34
   15e94:	adc	r1, r2, r1
   15e98:	ldr	r5, [sp, #72]	; 0x48
   15e9c:	adds	r8, r0, r5
   15ea0:	ldr	r7, [sp, #64]	; 0x40
   15ea4:	adc	r9, r1, r7
   15ea8:	ldr	r0, [sp, #88]	; 0x58
   15eac:	eor	r1, r9, r0
   15eb0:	ldr	r0, [sp, #92]	; 0x5c
   15eb4:	eor	r0, r8, r0
   15eb8:	mov	r2, #32
   15ebc:	bl	18c30 <__assert_fail@plt+0x78b4>
   15ec0:	mov	r4, r0
   15ec4:	mov	r6, r1
   15ec8:	ldr	r0, [sp, #112]	; 0x70
   15ecc:	adds	sl, r4, r0
   15ed0:	ldr	r0, [sp, #116]	; 0x74
   15ed4:	adc	r0, r1, r0
   15ed8:	str	r0, [sp, #116]	; 0x74
   15edc:	eor	r1, r0, r7
   15ee0:	eor	r0, sl, r5
   15ee4:	mov	r2, #24
   15ee8:	bl	18c30 <__assert_fail@plt+0x78b4>
   15eec:	mov	r7, r0
   15ef0:	mov	r5, r1
   15ef4:	ldr	r0, [sp, #172]	; 0xac
   15ef8:	adds	r0, r8, r0
   15efc:	ldr	r1, [sp, #168]	; 0xa8
   15f00:	adc	r1, r9, r1
   15f04:	adds	r2, r0, r7
   15f08:	str	r2, [sp, #44]	; 0x2c
   15f0c:	adc	r0, r1, r5
   15f10:	str	r0, [sp, #52]	; 0x34
   15f14:	eor	r1, r0, r6
   15f18:	eor	r0, r2, r4
   15f1c:	mov	r2, #16
   15f20:	bl	18c30 <__assert_fail@plt+0x78b4>
   15f24:	str	r0, [sp, #92]	; 0x5c
   15f28:	str	r1, [sp, #88]	; 0x58
   15f2c:	adds	r2, r0, sl
   15f30:	str	r2, [sp, #112]	; 0x70
   15f34:	ldr	r0, [sp, #116]	; 0x74
   15f38:	adc	r0, r1, r0
   15f3c:	str	r0, [sp, #116]	; 0x74
   15f40:	eor	r1, r0, r5
   15f44:	eor	r0, r2, r7
   15f48:	mov	r2, #63	; 0x3f
   15f4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   15f50:	str	r0, [sp, #72]	; 0x48
   15f54:	str	r1, [sp, #64]	; 0x40
   15f58:	ldr	r0, [sp, #252]	; 0xfc
   15f5c:	ldr	r4, [sp, #136]	; 0x88
   15f60:	adds	r0, r4, r0
   15f64:	ldr	r1, [sp, #248]	; 0xf8
   15f68:	ldr	r6, [sp, #140]	; 0x8c
   15f6c:	adc	r1, r6, r1
   15f70:	ldr	r2, [sp, #40]	; 0x28
   15f74:	adds	sl, r0, r2
   15f78:	ldr	r0, [sp, #48]	; 0x30
   15f7c:	adc	r8, r1, r0
   15f80:	ldr	r0, [sp, #80]	; 0x50
   15f84:	eor	r1, r8, r0
   15f88:	ldr	r0, [sp, #84]	; 0x54
   15f8c:	eor	r0, sl, r0
   15f90:	mov	r2, #32
   15f94:	bl	18c30 <__assert_fail@plt+0x78b4>
   15f98:	mov	r5, r0
   15f9c:	mov	r7, r1
   15fa0:	ldr	r0, [sp, #104]	; 0x68
   15fa4:	adds	r2, r5, r0
   15fa8:	ldr	r0, [sp, #108]	; 0x6c
   15fac:	adc	r0, r1, r0
   15fb0:	str	r0, [sp, #108]	; 0x6c
   15fb4:	eor	r1, r0, r6
   15fb8:	eor	r0, r2, r4
   15fbc:	mov	r6, r2
   15fc0:	mov	r2, #24
   15fc4:	bl	18c30 <__assert_fail@plt+0x78b4>
   15fc8:	mov	r9, r0
   15fcc:	mov	r4, r1
   15fd0:	ldr	r0, [sp, #212]	; 0xd4
   15fd4:	adds	r0, sl, r0
   15fd8:	ldr	r1, [sp, #208]	; 0xd0
   15fdc:	adc	r1, r8, r1
   15fe0:	adds	r2, r0, r9
   15fe4:	str	r2, [sp, #40]	; 0x28
   15fe8:	adc	r0, r1, r4
   15fec:	str	r0, [sp, #48]	; 0x30
   15ff0:	eor	r1, r0, r7
   15ff4:	eor	r0, r2, r5
   15ff8:	mov	r2, #16
   15ffc:	bl	18c30 <__assert_fail@plt+0x78b4>
   16000:	str	r0, [sp, #84]	; 0x54
   16004:	str	r1, [sp, #80]	; 0x50
   16008:	adds	r2, r0, r6
   1600c:	str	r2, [sp, #104]	; 0x68
   16010:	ldr	r0, [sp, #108]	; 0x6c
   16014:	adc	r0, r1, r0
   16018:	str	r0, [sp, #108]	; 0x6c
   1601c:	eor	r1, r0, r4
   16020:	eor	r0, r2, r9
   16024:	mov	r2, #63	; 0x3f
   16028:	bl	18c30 <__assert_fail@plt+0x78b4>
   1602c:	mov	r4, r0
   16030:	mov	r5, r1
   16034:	ldr	r0, [sp, #220]	; 0xdc
   16038:	ldr	r1, [sp, #24]
   1603c:	adds	r0, r1, r0
   16040:	ldr	r1, [sp, #216]	; 0xd8
   16044:	ldr	r2, [sp, #32]
   16048:	adc	r1, r2, r1
   1604c:	adds	r8, r0, r4
   16050:	adc	r9, r1, r5
   16054:	ldr	r0, [sp, #96]	; 0x60
   16058:	eor	r1, r9, r0
   1605c:	ldr	r0, [sp, #100]	; 0x64
   16060:	eor	r0, r8, r0
   16064:	mov	r2, #32
   16068:	bl	18c30 <__assert_fail@plt+0x78b4>
   1606c:	mov	r7, r0
   16070:	mov	r6, r1
   16074:	ldr	r0, [sp, #112]	; 0x70
   16078:	adds	sl, r7, r0
   1607c:	ldr	r0, [sp, #116]	; 0x74
   16080:	adc	r0, r1, r0
   16084:	str	r0, [sp, #140]	; 0x8c
   16088:	eor	r1, r0, r5
   1608c:	eor	r0, sl, r4
   16090:	mov	r2, #24
   16094:	bl	18c30 <__assert_fail@plt+0x78b4>
   16098:	mov	r4, r0
   1609c:	mov	r5, r1
   160a0:	ldr	r0, [sp, #268]	; 0x10c
   160a4:	adds	r0, r8, r0
   160a8:	ldr	r1, [sp, #264]	; 0x108
   160ac:	adc	r1, r9, r1
   160b0:	adds	r2, r0, r4
   160b4:	str	r2, [sp, #24]
   160b8:	adc	r0, r1, r5
   160bc:	str	r0, [sp, #32]
   160c0:	eor	r1, r0, r6
   160c4:	eor	r0, r2, r7
   160c8:	mov	r2, #16
   160cc:	bl	18c30 <__assert_fail@plt+0x78b4>
   160d0:	str	r0, [sp, #100]	; 0x64
   160d4:	str	r1, [sp, #96]	; 0x60
   160d8:	adds	r2, r0, sl
   160dc:	str	r2, [sp, #112]	; 0x70
   160e0:	ldr	r0, [sp, #140]	; 0x8c
   160e4:	adc	r0, r1, r0
   160e8:	str	r0, [sp, #116]	; 0x74
   160ec:	eor	r1, r0, r5
   160f0:	eor	r0, r2, r4
   160f4:	mov	r2, #63	; 0x3f
   160f8:	bl	18c30 <__assert_fail@plt+0x78b4>
   160fc:	mov	r2, r0
   16100:	str	r0, [sp, #136]	; 0x88
   16104:	mov	r3, r1
   16108:	str	r1, [sp, #140]	; 0x8c
   1610c:	ldr	r0, [sp, #252]	; 0xfc
   16110:	ldr	r6, [sp, #60]	; 0x3c
   16114:	adds	r0, r6, r0
   16118:	ldr	r1, [sp, #248]	; 0xf8
   1611c:	ldr	r7, [sp, #56]	; 0x38
   16120:	adc	r1, r7, r1
   16124:	ldr	r5, [sp, #28]
   16128:	adds	sl, r0, r5
   1612c:	ldr	r0, [sp, #36]	; 0x24
   16130:	adc	r8, r1, r0
   16134:	ldr	r0, [sp, #88]	; 0x58
   16138:	eor	r1, r0, r8
   1613c:	ldr	r0, [sp, #92]	; 0x5c
   16140:	eor	r0, r0, sl
   16144:	str	r3, [sp, #324]	; 0x144
   16148:	str	r2, [sp, #320]	; 0x140
   1614c:	mov	r2, #32
   16150:	bl	18c30 <__assert_fail@plt+0x78b4>
   16154:	mov	r4, r0
   16158:	mov	r5, r1
   1615c:	ldr	r0, [sp, #104]	; 0x68
   16160:	adds	r9, r4, r0
   16164:	ldr	r0, [sp, #108]	; 0x6c
   16168:	adc	r0, r1, r0
   1616c:	str	r0, [sp, #108]	; 0x6c
   16170:	eor	r1, r0, r7
   16174:	eor	r0, r9, r6
   16178:	mov	r2, #24
   1617c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16180:	mov	r6, r0
   16184:	mov	r7, r1
   16188:	ldr	r0, [sp, #180]	; 0xb4
   1618c:	adds	r0, sl, r0
   16190:	ldr	r1, [sp, #176]	; 0xb0
   16194:	adc	r1, r8, r1
   16198:	adds	r2, r0, r6
   1619c:	str	r2, [sp, #28]
   161a0:	adc	r0, r1, r7
   161a4:	str	r0, [sp, #36]	; 0x24
   161a8:	eor	r1, r0, r5
   161ac:	eor	r0, r2, r4
   161b0:	mov	r2, #16
   161b4:	bl	18c30 <__assert_fail@plt+0x78b4>
   161b8:	str	r0, [sp, #92]	; 0x5c
   161bc:	str	r1, [sp, #88]	; 0x58
   161c0:	adds	r2, r0, r9
   161c4:	str	r2, [sp, #104]	; 0x68
   161c8:	ldr	r0, [sp, #108]	; 0x6c
   161cc:	adc	r0, r1, r0
   161d0:	str	r0, [sp, #108]	; 0x6c
   161d4:	eor	r1, r0, r7
   161d8:	eor	r0, r2, r6
   161dc:	mov	r2, #63	; 0x3f
   161e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   161e4:	mov	r2, r0
   161e8:	str	r0, [sp, #60]	; 0x3c
   161ec:	mov	r3, r1
   161f0:	str	r1, [sp, #56]	; 0x38
   161f4:	ldr	r0, [sp, #164]	; 0xa4
   161f8:	ldr	r1, [sp, #24]
   161fc:	adds	r0, r1, r0
   16200:	ldr	r1, [sp, #160]	; 0xa0
   16204:	ldr	r7, [sp, #32]
   16208:	adc	r1, r7, r1
   1620c:	adds	r0, r0, r2
   16210:	str	r0, [sp, #32]
   16214:	adc	r0, r1, r3
   16218:	str	r0, [sp, #24]
   1621c:	ldr	r0, [sp, #172]	; 0xac
   16220:	ldr	r4, [sp, #76]	; 0x4c
   16224:	adds	r0, r4, r0
   16228:	ldr	r1, [sp, #168]	; 0xa8
   1622c:	ldr	r5, [sp, #68]	; 0x44
   16230:	adc	r1, r5, r1
   16234:	ldr	r2, [sp, #44]	; 0x2c
   16238:	adds	r8, r0, r2
   1623c:	ldr	r0, [sp, #52]	; 0x34
   16240:	adc	r9, r1, r0
   16244:	ldr	r0, [sp, #80]	; 0x50
   16248:	eor	r1, r0, r9
   1624c:	ldr	r0, [sp, #84]	; 0x54
   16250:	eor	r0, r0, r8
   16254:	mov	r2, #32
   16258:	bl	18c30 <__assert_fail@plt+0x78b4>
   1625c:	mov	r6, r0
   16260:	mov	r7, r1
   16264:	ldr	r0, [sp, #128]	; 0x80
   16268:	adds	sl, r6, r0
   1626c:	ldr	r0, [sp, #132]	; 0x84
   16270:	adc	r0, r1, r0
   16274:	str	r0, [sp, #132]	; 0x84
   16278:	eor	r1, r0, r5
   1627c:	eor	r0, sl, r4
   16280:	mov	r2, #24
   16284:	bl	18c30 <__assert_fail@plt+0x78b4>
   16288:	mov	r4, r0
   1628c:	mov	r5, r1
   16290:	ldr	r0, [sp, #196]	; 0xc4
   16294:	adds	r0, r8, r0
   16298:	ldr	r1, [sp, #192]	; 0xc0
   1629c:	adc	r1, r9, r1
   162a0:	adds	r2, r0, r4
   162a4:	str	r2, [sp, #44]	; 0x2c
   162a8:	adc	r0, r1, r5
   162ac:	str	r0, [sp, #52]	; 0x34
   162b0:	eor	r1, r0, r7
   162b4:	eor	r0, r2, r6
   162b8:	mov	r2, #16
   162bc:	bl	18c30 <__assert_fail@plt+0x78b4>
   162c0:	str	r0, [sp, #84]	; 0x54
   162c4:	str	r1, [sp, #80]	; 0x50
   162c8:	adds	r2, r0, sl
   162cc:	str	r2, [sp, #128]	; 0x80
   162d0:	ldr	r0, [sp, #132]	; 0x84
   162d4:	adc	r0, r1, r0
   162d8:	str	r0, [sp, #132]	; 0x84
   162dc:	eor	r1, r0, r5
   162e0:	eor	r0, r2, r4
   162e4:	mov	r2, #63	; 0x3f
   162e8:	bl	18c30 <__assert_fail@plt+0x78b4>
   162ec:	str	r0, [sp, #76]	; 0x4c
   162f0:	str	r1, [sp, #68]	; 0x44
   162f4:	ldr	r0, [sp, #228]	; 0xe4
   162f8:	ldr	r6, [sp, #72]	; 0x48
   162fc:	adds	r0, r6, r0
   16300:	ldr	r1, [sp, #224]	; 0xe0
   16304:	ldr	r7, [sp, #64]	; 0x40
   16308:	adc	r1, r7, r1
   1630c:	ldr	r2, [sp, #40]	; 0x28
   16310:	adds	r9, r0, r2
   16314:	ldr	r0, [sp, #48]	; 0x30
   16318:	adc	r8, r1, r0
   1631c:	ldr	r0, [sp, #144]	; 0x90
   16320:	eor	r1, r8, r0
   16324:	ldr	r0, [sp, #148]	; 0x94
   16328:	eor	r0, r9, r0
   1632c:	mov	r2, #32
   16330:	bl	18c30 <__assert_fail@plt+0x78b4>
   16334:	mov	r4, r0
   16338:	mov	r5, r1
   1633c:	ldr	r0, [sp, #120]	; 0x78
   16340:	adds	sl, r4, r0
   16344:	ldr	r0, [sp, #124]	; 0x7c
   16348:	adc	r0, r1, r0
   1634c:	str	r0, [sp, #148]	; 0x94
   16350:	eor	r1, r0, r7
   16354:	eor	r0, sl, r6
   16358:	mov	r2, #24
   1635c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16360:	mov	r7, r0
   16364:	mov	r6, r1
   16368:	ldr	r0, [sp, #188]	; 0xbc
   1636c:	adds	r0, r9, r0
   16370:	ldr	r1, [sp, #184]	; 0xb8
   16374:	adc	r1, r8, r1
   16378:	adds	r2, r0, r7
   1637c:	str	r2, [sp, #40]	; 0x28
   16380:	adc	r0, r1, r6
   16384:	str	r0, [sp, #48]	; 0x30
   16388:	eor	r1, r0, r5
   1638c:	eor	r0, r2, r4
   16390:	mov	r2, #16
   16394:	bl	18c30 <__assert_fail@plt+0x78b4>
   16398:	mov	r4, r0
   1639c:	mov	r5, r1
   163a0:	adds	r2, r0, sl
   163a4:	str	r2, [sp, #120]	; 0x78
   163a8:	ldr	r0, [sp, #148]	; 0x94
   163ac:	adc	r0, r1, r0
   163b0:	str	r0, [sp, #124]	; 0x7c
   163b4:	eor	r1, r0, r6
   163b8:	eor	r0, r2, r7
   163bc:	mov	r2, #63	; 0x3f
   163c0:	bl	18c30 <__assert_fail@plt+0x78b4>
   163c4:	str	r0, [sp, #72]	; 0x48
   163c8:	str	r1, [sp, #64]	; 0x40
   163cc:	ldr	r8, [sp, #24]
   163d0:	eor	r1, r5, r8
   163d4:	ldr	r9, [sp, #32]
   163d8:	eor	r0, r4, r9
   163dc:	mov	r2, #32
   163e0:	bl	18c30 <__assert_fail@plt+0x78b4>
   163e4:	mov	r4, r0
   163e8:	mov	r5, r1
   163ec:	ldr	r0, [sp, #128]	; 0x80
   163f0:	adds	r2, r4, r0
   163f4:	str	r2, [sp, #128]	; 0x80
   163f8:	ldr	r0, [sp, #132]	; 0x84
   163fc:	adc	sl, r1, r0
   16400:	ldr	r0, [sp, #56]	; 0x38
   16404:	eor	r1, sl, r0
   16408:	ldr	r0, [sp, #60]	; 0x3c
   1640c:	eor	r0, r2, r0
   16410:	mov	r2, #24
   16414:	bl	18c30 <__assert_fail@plt+0x78b4>
   16418:	mov	r6, r0
   1641c:	mov	r7, r1
   16420:	ldr	r0, [sp, #260]	; 0x104
   16424:	adds	r0, r9, r0
   16428:	ldr	r1, [sp, #256]	; 0x100
   1642c:	adc	r1, r8, r1
   16430:	adds	r2, r0, r6
   16434:	str	r2, [sp, #24]
   16438:	adc	r0, r1, r7
   1643c:	str	r0, [sp, #32]
   16440:	eor	r1, r0, r5
   16444:	eor	r0, r2, r4
   16448:	mov	r2, #16
   1644c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16450:	mov	r2, r0
   16454:	str	r0, [sp, #148]	; 0x94
   16458:	mov	r3, r1
   1645c:	str	r1, [sp, #144]	; 0x90
   16460:	ldr	r0, [sp, #128]	; 0x80
   16464:	adds	r5, r2, r0
   16468:	str	r5, [sp, #128]	; 0x80
   1646c:	adc	r0, r1, sl
   16470:	str	r0, [sp, #132]	; 0x84
   16474:	eor	r1, r0, r7
   16478:	eor	r0, r5, r6
   1647c:	str	r3, [sp, #412]	; 0x19c
   16480:	str	r2, [sp, #408]	; 0x198
   16484:	mov	r2, #63	; 0x3f
   16488:	bl	18c30 <__assert_fail@plt+0x78b4>
   1648c:	str	r0, [sp, #60]	; 0x3c
   16490:	str	r1, [sp, #56]	; 0x38
   16494:	ldr	r0, [sp, #244]	; 0xf4
   16498:	ldr	r1, [sp, #28]
   1649c:	adds	r0, r1, r0
   164a0:	ldr	r1, [sp, #240]	; 0xf0
   164a4:	ldr	r2, [sp, #36]	; 0x24
   164a8:	adc	r1, r2, r1
   164ac:	ldr	r6, [sp, #76]	; 0x4c
   164b0:	adds	r8, r0, r6
   164b4:	ldr	r7, [sp, #68]	; 0x44
   164b8:	adc	sl, r1, r7
   164bc:	ldr	r0, [sp, #96]	; 0x60
   164c0:	eor	r1, sl, r0
   164c4:	ldr	r0, [sp, #100]	; 0x64
   164c8:	eor	r0, r8, r0
   164cc:	mov	r2, #32
   164d0:	bl	18c30 <__assert_fail@plt+0x78b4>
   164d4:	mov	r4, r0
   164d8:	mov	r5, r1
   164dc:	ldr	r0, [sp, #120]	; 0x78
   164e0:	adds	r9, r4, r0
   164e4:	ldr	r0, [sp, #124]	; 0x7c
   164e8:	adc	r0, r1, r0
   164ec:	str	r0, [sp, #124]	; 0x7c
   164f0:	eor	r1, r0, r7
   164f4:	eor	r0, r9, r6
   164f8:	mov	r2, #24
   164fc:	bl	18c30 <__assert_fail@plt+0x78b4>
   16500:	mov	r7, r0
   16504:	mov	r6, r1
   16508:	ldr	r0, [sp, #284]	; 0x11c
   1650c:	adds	r0, r8, r0
   16510:	ldr	r1, [sp, #280]	; 0x118
   16514:	adc	r1, sl, r1
   16518:	adds	r2, r0, r7
   1651c:	str	r2, [sp, #28]
   16520:	adc	r0, r1, r6
   16524:	str	r0, [sp, #36]	; 0x24
   16528:	eor	r1, r0, r5
   1652c:	eor	r0, r2, r4
   16530:	mov	r2, #16
   16534:	bl	18c30 <__assert_fail@plt+0x78b4>
   16538:	str	r0, [sp, #100]	; 0x64
   1653c:	str	r1, [sp, #96]	; 0x60
   16540:	adds	r2, r0, r9
   16544:	str	r2, [sp, #120]	; 0x78
   16548:	ldr	r0, [sp, #124]	; 0x7c
   1654c:	adc	r0, r1, r0
   16550:	str	r0, [sp, #124]	; 0x7c
   16554:	eor	r1, r0, r6
   16558:	eor	r0, r2, r7
   1655c:	mov	r2, #63	; 0x3f
   16560:	bl	18c30 <__assert_fail@plt+0x78b4>
   16564:	str	r0, [sp, #76]	; 0x4c
   16568:	str	r1, [sp, #68]	; 0x44
   1656c:	ldr	r0, [sp, #212]	; 0xd4
   16570:	ldr	r1, [sp, #44]	; 0x2c
   16574:	adds	r0, r1, r0
   16578:	ldr	r1, [sp, #208]	; 0xd0
   1657c:	ldr	r2, [sp, #52]	; 0x34
   16580:	adc	r1, r2, r1
   16584:	ldr	r4, [sp, #72]	; 0x48
   16588:	adds	r8, r0, r4
   1658c:	ldr	r7, [sp, #64]	; 0x40
   16590:	adc	r9, r1, r7
   16594:	ldr	r0, [sp, #88]	; 0x58
   16598:	eor	r1, r9, r0
   1659c:	ldr	r0, [sp, #92]	; 0x5c
   165a0:	eor	r0, r8, r0
   165a4:	mov	r2, #32
   165a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   165ac:	mov	r5, r0
   165b0:	mov	r6, r1
   165b4:	ldr	r0, [sp, #112]	; 0x70
   165b8:	adds	sl, r5, r0
   165bc:	ldr	r0, [sp, #116]	; 0x74
   165c0:	adc	r0, r1, r0
   165c4:	str	r0, [sp, #116]	; 0x74
   165c8:	eor	r1, r0, r7
   165cc:	eor	r0, sl, r4
   165d0:	mov	r2, #24
   165d4:	bl	18c30 <__assert_fail@plt+0x78b4>
   165d8:	mov	r4, r0
   165dc:	mov	r7, r1
   165e0:	ldr	r0, [sp, #276]	; 0x114
   165e4:	adds	r0, r8, r0
   165e8:	ldr	r1, [sp, #272]	; 0x110
   165ec:	adc	r1, r9, r1
   165f0:	adds	r2, r0, r4
   165f4:	str	r2, [sp, #44]	; 0x2c
   165f8:	adc	r0, r1, r7
   165fc:	str	r0, [sp, #52]	; 0x34
   16600:	eor	r1, r0, r6
   16604:	eor	r0, r2, r5
   16608:	mov	r2, #16
   1660c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16610:	str	r0, [sp, #92]	; 0x5c
   16614:	str	r1, [sp, #88]	; 0x58
   16618:	adds	r2, r0, sl
   1661c:	str	r2, [sp, #112]	; 0x70
   16620:	ldr	r0, [sp, #116]	; 0x74
   16624:	adc	r0, r1, r0
   16628:	str	r0, [sp, #116]	; 0x74
   1662c:	eor	r1, r0, r7
   16630:	eor	r0, r2, r4
   16634:	mov	r2, #63	; 0x3f
   16638:	bl	18c30 <__assert_fail@plt+0x78b4>
   1663c:	str	r0, [sp, #72]	; 0x48
   16640:	str	r1, [sp, #64]	; 0x40
   16644:	ldr	r0, [sp, #204]	; 0xcc
   16648:	ldr	r5, [sp, #136]	; 0x88
   1664c:	adds	r0, r5, r0
   16650:	ldr	r1, [sp, #200]	; 0xc8
   16654:	ldr	r6, [sp, #140]	; 0x8c
   16658:	adc	r1, r6, r1
   1665c:	ldr	r2, [sp, #40]	; 0x28
   16660:	adds	r9, r0, r2
   16664:	ldr	r0, [sp, #48]	; 0x30
   16668:	adc	r8, r1, r0
   1666c:	ldr	r0, [sp, #80]	; 0x50
   16670:	eor	r1, r8, r0
   16674:	ldr	r0, [sp, #84]	; 0x54
   16678:	eor	r0, r9, r0
   1667c:	mov	r2, #32
   16680:	bl	18c30 <__assert_fail@plt+0x78b4>
   16684:	mov	r4, r0
   16688:	mov	r7, r1
   1668c:	ldr	r0, [sp, #104]	; 0x68
   16690:	adds	r2, r4, r0
   16694:	ldr	r0, [sp, #108]	; 0x6c
   16698:	adc	r0, r1, r0
   1669c:	str	r0, [sp, #108]	; 0x6c
   166a0:	eor	r1, r0, r6
   166a4:	eor	r0, r2, r5
   166a8:	mov	r6, r2
   166ac:	mov	r2, #24
   166b0:	bl	18c30 <__assert_fail@plt+0x78b4>
   166b4:	mov	sl, r0
   166b8:	mov	r5, r1
   166bc:	ldr	r0, [sp, #236]	; 0xec
   166c0:	adds	r0, r9, r0
   166c4:	ldr	r1, [sp, #232]	; 0xe8
   166c8:	adc	r1, r8, r1
   166cc:	adds	r2, r0, sl
   166d0:	str	r2, [sp, #40]	; 0x28
   166d4:	adc	r0, r1, r5
   166d8:	str	r0, [sp, #48]	; 0x30
   166dc:	eor	r1, r0, r7
   166e0:	eor	r0, r2, r4
   166e4:	mov	r2, #16
   166e8:	bl	18c30 <__assert_fail@plt+0x78b4>
   166ec:	str	r0, [sp, #84]	; 0x54
   166f0:	str	r1, [sp, #80]	; 0x50
   166f4:	adds	r2, r0, r6
   166f8:	str	r2, [sp, #104]	; 0x68
   166fc:	ldr	r0, [sp, #108]	; 0x6c
   16700:	adc	r0, r1, r0
   16704:	str	r0, [sp, #108]	; 0x6c
   16708:	eor	r1, r0, r5
   1670c:	eor	r0, r2, sl
   16710:	mov	r2, #63	; 0x3f
   16714:	bl	18c30 <__assert_fail@plt+0x78b4>
   16718:	mov	r5, r0
   1671c:	mov	r4, r1
   16720:	ldr	r0, [sp, #196]	; 0xc4
   16724:	ldr	r1, [sp, #24]
   16728:	adds	r0, r1, r0
   1672c:	ldr	r1, [sp, #192]	; 0xc0
   16730:	ldr	r2, [sp, #32]
   16734:	adc	r1, r2, r1
   16738:	adds	r8, r0, r5
   1673c:	adc	r9, r1, r4
   16740:	ldr	r0, [sp, #96]	; 0x60
   16744:	eor	r1, r9, r0
   16748:	ldr	r0, [sp, #100]	; 0x64
   1674c:	eor	r0, r8, r0
   16750:	mov	r2, #32
   16754:	bl	18c30 <__assert_fail@plt+0x78b4>
   16758:	mov	r7, r0
   1675c:	mov	r6, r1
   16760:	ldr	r0, [sp, #112]	; 0x70
   16764:	adds	sl, r7, r0
   16768:	ldr	r0, [sp, #116]	; 0x74
   1676c:	adc	r0, r1, r0
   16770:	str	r0, [sp, #140]	; 0x8c
   16774:	eor	r1, r0, r4
   16778:	eor	r0, sl, r5
   1677c:	mov	r2, #24
   16780:	bl	18c30 <__assert_fail@plt+0x78b4>
   16784:	mov	r4, r0
   16788:	mov	r5, r1
   1678c:	ldr	r0, [sp, #236]	; 0xec
   16790:	adds	r0, r8, r0
   16794:	ldr	r1, [sp, #232]	; 0xe8
   16798:	adc	r1, r9, r1
   1679c:	adds	r2, r0, r4
   167a0:	str	r2, [sp, #24]
   167a4:	adc	r0, r1, r5
   167a8:	str	r0, [sp, #32]
   167ac:	eor	r1, r0, r6
   167b0:	eor	r0, r2, r7
   167b4:	mov	r2, #16
   167b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   167bc:	str	r0, [sp, #100]	; 0x64
   167c0:	str	r1, [sp, #96]	; 0x60
   167c4:	adds	r2, r0, sl
   167c8:	str	r2, [sp, #112]	; 0x70
   167cc:	ldr	r0, [sp, #140]	; 0x8c
   167d0:	adc	r0, r1, r0
   167d4:	str	r0, [sp, #116]	; 0x74
   167d8:	eor	r1, r0, r5
   167dc:	eor	r0, r2, r4
   167e0:	mov	r2, #63	; 0x3f
   167e4:	bl	18c30 <__assert_fail@plt+0x78b4>
   167e8:	mov	r2, r0
   167ec:	str	r0, [sp, #136]	; 0x88
   167f0:	mov	r3, r1
   167f4:	str	r1, [sp, #140]	; 0x8c
   167f8:	ldr	r0, [sp, #260]	; 0x104
   167fc:	ldr	r6, [sp, #60]	; 0x3c
   16800:	adds	r0, r6, r0
   16804:	ldr	r1, [sp, #256]	; 0x100
   16808:	ldr	r7, [sp, #56]	; 0x38
   1680c:	adc	r1, r7, r1
   16810:	ldr	r5, [sp, #28]
   16814:	adds	sl, r0, r5
   16818:	ldr	r0, [sp, #36]	; 0x24
   1681c:	adc	r8, r1, r0
   16820:	ldr	r0, [sp, #88]	; 0x58
   16824:	eor	r1, r0, r8
   16828:	ldr	r0, [sp, #92]	; 0x5c
   1682c:	eor	r0, r0, sl
   16830:	str	r3, [sp, #324]	; 0x144
   16834:	str	r2, [sp, #320]	; 0x140
   16838:	mov	r2, #32
   1683c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16840:	mov	r4, r0
   16844:	mov	r5, r1
   16848:	ldr	r0, [sp, #104]	; 0x68
   1684c:	adds	r9, r4, r0
   16850:	ldr	r0, [sp, #108]	; 0x6c
   16854:	adc	r0, r1, r0
   16858:	str	r0, [sp, #108]	; 0x6c
   1685c:	eor	r1, r0, r7
   16860:	eor	r0, r9, r6
   16864:	mov	r2, #24
   16868:	bl	18c30 <__assert_fail@plt+0x78b4>
   1686c:	mov	r6, r0
   16870:	mov	r7, r1
   16874:	ldr	r0, [sp, #172]	; 0xac
   16878:	adds	r0, sl, r0
   1687c:	ldr	r1, [sp, #168]	; 0xa8
   16880:	adc	r1, r8, r1
   16884:	adds	r2, r0, r6
   16888:	str	r2, [sp, #28]
   1688c:	adc	r0, r1, r7
   16890:	str	r0, [sp, #36]	; 0x24
   16894:	eor	r1, r0, r5
   16898:	eor	r0, r2, r4
   1689c:	mov	r2, #16
   168a0:	bl	18c30 <__assert_fail@plt+0x78b4>
   168a4:	str	r0, [sp, #92]	; 0x5c
   168a8:	str	r1, [sp, #88]	; 0x58
   168ac:	adds	r2, r0, r9
   168b0:	str	r2, [sp, #104]	; 0x68
   168b4:	ldr	r0, [sp, #108]	; 0x6c
   168b8:	adc	r0, r1, r0
   168bc:	str	r0, [sp, #108]	; 0x6c
   168c0:	eor	r1, r0, r7
   168c4:	eor	r0, r2, r6
   168c8:	mov	r2, #63	; 0x3f
   168cc:	bl	18c30 <__assert_fail@plt+0x78b4>
   168d0:	mov	r2, r0
   168d4:	str	r0, [sp, #60]	; 0x3c
   168d8:	mov	r3, r1
   168dc:	str	r1, [sp, #56]	; 0x38
   168e0:	ldr	r0, [sp, #268]	; 0x10c
   168e4:	ldr	r1, [sp, #24]
   168e8:	adds	r0, r1, r0
   168ec:	ldr	r1, [sp, #264]	; 0x108
   168f0:	ldr	r7, [sp, #32]
   168f4:	adc	r1, r7, r1
   168f8:	adds	r0, r0, r2
   168fc:	str	r0, [sp, #32]
   16900:	adc	r0, r1, r3
   16904:	str	r0, [sp, #24]
   16908:	ldr	r0, [sp, #220]	; 0xdc
   1690c:	ldr	r5, [sp, #76]	; 0x4c
   16910:	adds	r0, r5, r0
   16914:	ldr	r1, [sp, #216]	; 0xd8
   16918:	ldr	r6, [sp, #68]	; 0x44
   1691c:	adc	r1, r6, r1
   16920:	ldr	r2, [sp, #44]	; 0x2c
   16924:	adds	r8, r0, r2
   16928:	ldr	r0, [sp, #52]	; 0x34
   1692c:	adc	r9, r1, r0
   16930:	ldr	r0, [sp, #80]	; 0x50
   16934:	eor	r1, r0, r9
   16938:	ldr	r0, [sp, #84]	; 0x54
   1693c:	eor	r0, r0, r8
   16940:	mov	r2, #32
   16944:	bl	18c30 <__assert_fail@plt+0x78b4>
   16948:	mov	r4, r0
   1694c:	mov	r7, r1
   16950:	ldr	r0, [sp, #128]	; 0x80
   16954:	adds	sl, r4, r0
   16958:	ldr	r0, [sp, #132]	; 0x84
   1695c:	adc	r0, r1, r0
   16960:	str	r0, [sp, #132]	; 0x84
   16964:	eor	r1, r0, r6
   16968:	eor	r0, sl, r5
   1696c:	mov	r2, #24
   16970:	bl	18c30 <__assert_fail@plt+0x78b4>
   16974:	mov	r5, r0
   16978:	mov	r6, r1
   1697c:	ldr	r0, [sp, #252]	; 0xfc
   16980:	adds	r0, r8, r0
   16984:	ldr	r1, [sp, #248]	; 0xf8
   16988:	adc	r1, r9, r1
   1698c:	adds	r2, r0, r5
   16990:	str	r2, [sp, #44]	; 0x2c
   16994:	adc	r0, r1, r6
   16998:	str	r0, [sp, #52]	; 0x34
   1699c:	eor	r1, r0, r7
   169a0:	eor	r0, r2, r4
   169a4:	mov	r2, #16
   169a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   169ac:	str	r0, [sp, #84]	; 0x54
   169b0:	str	r1, [sp, #80]	; 0x50
   169b4:	adds	r2, r0, sl
   169b8:	str	r2, [sp, #128]	; 0x80
   169bc:	ldr	r0, [sp, #132]	; 0x84
   169c0:	adc	r0, r1, r0
   169c4:	str	r0, [sp, #132]	; 0x84
   169c8:	eor	r1, r0, r6
   169cc:	eor	r0, r2, r5
   169d0:	mov	r2, #63	; 0x3f
   169d4:	bl	18c30 <__assert_fail@plt+0x78b4>
   169d8:	str	r0, [sp, #76]	; 0x4c
   169dc:	str	r1, [sp, #68]	; 0x44
   169e0:	ldr	r0, [sp, #284]	; 0x11c
   169e4:	ldr	r4, [sp, #72]	; 0x48
   169e8:	adds	r0, r4, r0
   169ec:	ldr	r1, [sp, #280]	; 0x118
   169f0:	ldr	r7, [sp, #64]	; 0x40
   169f4:	adc	r1, r7, r1
   169f8:	ldr	r2, [sp, #40]	; 0x28
   169fc:	adds	sl, r0, r2
   16a00:	ldr	r0, [sp, #48]	; 0x30
   16a04:	adc	r8, r1, r0
   16a08:	ldr	r0, [sp, #144]	; 0x90
   16a0c:	eor	r1, r8, r0
   16a10:	ldr	r0, [sp, #148]	; 0x94
   16a14:	eor	r0, sl, r0
   16a18:	mov	r2, #32
   16a1c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16a20:	mov	r5, r0
   16a24:	mov	r6, r1
   16a28:	ldr	r0, [sp, #120]	; 0x78
   16a2c:	adds	r9, r5, r0
   16a30:	ldr	r0, [sp, #124]	; 0x7c
   16a34:	adc	r0, r1, r0
   16a38:	str	r0, [sp, #148]	; 0x94
   16a3c:	eor	r1, r0, r7
   16a40:	eor	r0, r9, r4
   16a44:	mov	r2, #24
   16a48:	bl	18c30 <__assert_fail@plt+0x78b4>
   16a4c:	mov	r4, r0
   16a50:	mov	r7, r1
   16a54:	ldr	r0, [sp, #212]	; 0xd4
   16a58:	adds	r0, sl, r0
   16a5c:	ldr	r1, [sp, #208]	; 0xd0
   16a60:	adc	r1, r8, r1
   16a64:	adds	r2, r0, r4
   16a68:	str	r2, [sp, #40]	; 0x28
   16a6c:	adc	r0, r1, r7
   16a70:	str	r0, [sp, #48]	; 0x30
   16a74:	eor	r1, r0, r6
   16a78:	eor	r0, r2, r5
   16a7c:	mov	r2, #16
   16a80:	bl	18c30 <__assert_fail@plt+0x78b4>
   16a84:	mov	r5, r0
   16a88:	mov	r6, r1
   16a8c:	adds	r2, r0, r9
   16a90:	str	r2, [sp, #120]	; 0x78
   16a94:	ldr	r0, [sp, #148]	; 0x94
   16a98:	adc	r0, r1, r0
   16a9c:	str	r0, [sp, #124]	; 0x7c
   16aa0:	eor	r1, r0, r7
   16aa4:	eor	r0, r2, r4
   16aa8:	mov	r2, #63	; 0x3f
   16aac:	bl	18c30 <__assert_fail@plt+0x78b4>
   16ab0:	str	r0, [sp, #72]	; 0x48
   16ab4:	str	r1, [sp, #64]	; 0x40
   16ab8:	ldr	r8, [sp, #24]
   16abc:	eor	r1, r6, r8
   16ac0:	ldr	sl, [sp, #32]
   16ac4:	eor	r0, r5, sl
   16ac8:	mov	r2, #32
   16acc:	bl	18c30 <__assert_fail@plt+0x78b4>
   16ad0:	mov	r4, r0
   16ad4:	mov	r5, r1
   16ad8:	ldr	r0, [sp, #128]	; 0x80
   16adc:	adds	r2, r4, r0
   16ae0:	str	r2, [sp, #128]	; 0x80
   16ae4:	ldr	r0, [sp, #132]	; 0x84
   16ae8:	adc	r9, r1, r0
   16aec:	ldr	r0, [sp, #56]	; 0x38
   16af0:	eor	r1, r9, r0
   16af4:	ldr	r0, [sp, #60]	; 0x3c
   16af8:	eor	r0, r2, r0
   16afc:	mov	r2, #24
   16b00:	bl	18c30 <__assert_fail@plt+0x78b4>
   16b04:	mov	r6, r0
   16b08:	mov	r7, r1
   16b0c:	ldr	r0, [sp, #164]	; 0xa4
   16b10:	adds	r0, sl, r0
   16b14:	ldr	r1, [sp, #160]	; 0xa0
   16b18:	adc	r1, r8, r1
   16b1c:	adds	r2, r0, r6
   16b20:	str	r2, [sp, #24]
   16b24:	adc	r0, r1, r7
   16b28:	str	r0, [sp, #32]
   16b2c:	eor	r1, r0, r5
   16b30:	eor	r0, r2, r4
   16b34:	mov	r2, #16
   16b38:	bl	18c30 <__assert_fail@plt+0x78b4>
   16b3c:	mov	r2, r0
   16b40:	str	r0, [sp, #148]	; 0x94
   16b44:	mov	r3, r1
   16b48:	str	r1, [sp, #144]	; 0x90
   16b4c:	ldr	r0, [sp, #128]	; 0x80
   16b50:	adds	r5, r2, r0
   16b54:	str	r5, [sp, #128]	; 0x80
   16b58:	adc	r0, r1, r9
   16b5c:	str	r0, [sp, #132]	; 0x84
   16b60:	eor	r1, r0, r7
   16b64:	eor	r0, r5, r6
   16b68:	str	r3, [sp, #412]	; 0x19c
   16b6c:	str	r2, [sp, #408]	; 0x198
   16b70:	mov	r2, #63	; 0x3f
   16b74:	bl	18c30 <__assert_fail@plt+0x78b4>
   16b78:	str	r0, [sp, #60]	; 0x3c
   16b7c:	str	r1, [sp, #56]	; 0x38
   16b80:	ldr	r0, [sp, #180]	; 0xb4
   16b84:	ldr	r1, [sp, #28]
   16b88:	adds	r0, r1, r0
   16b8c:	ldr	r1, [sp, #176]	; 0xb0
   16b90:	ldr	r2, [sp, #36]	; 0x24
   16b94:	adc	r1, r2, r1
   16b98:	ldr	r6, [sp, #76]	; 0x4c
   16b9c:	adds	r8, r0, r6
   16ba0:	ldr	r7, [sp, #68]	; 0x44
   16ba4:	adc	r9, r1, r7
   16ba8:	ldr	r0, [sp, #96]	; 0x60
   16bac:	eor	r1, r9, r0
   16bb0:	ldr	r0, [sp, #100]	; 0x64
   16bb4:	eor	r0, r8, r0
   16bb8:	mov	r2, #32
   16bbc:	bl	18c30 <__assert_fail@plt+0x78b4>
   16bc0:	mov	r4, r0
   16bc4:	mov	r5, r1
   16bc8:	ldr	r0, [sp, #120]	; 0x78
   16bcc:	adds	sl, r4, r0
   16bd0:	ldr	r0, [sp, #124]	; 0x7c
   16bd4:	adc	r0, r1, r0
   16bd8:	str	r0, [sp, #124]	; 0x7c
   16bdc:	eor	r1, r0, r7
   16be0:	eor	r0, sl, r6
   16be4:	mov	r2, #24
   16be8:	bl	18c30 <__assert_fail@plt+0x78b4>
   16bec:	mov	r7, r0
   16bf0:	mov	r6, r1
   16bf4:	ldr	r0, [sp, #228]	; 0xe4
   16bf8:	adds	r0, r8, r0
   16bfc:	ldr	r1, [sp, #224]	; 0xe0
   16c00:	adc	r1, r9, r1
   16c04:	adds	r2, r0, r7
   16c08:	str	r2, [sp, #28]
   16c0c:	adc	r0, r1, r6
   16c10:	str	r0, [sp, #36]	; 0x24
   16c14:	eor	r1, r0, r5
   16c18:	eor	r0, r2, r4
   16c1c:	mov	r2, #16
   16c20:	bl	18c30 <__assert_fail@plt+0x78b4>
   16c24:	str	r0, [sp, #100]	; 0x64
   16c28:	str	r1, [sp, #96]	; 0x60
   16c2c:	adds	r2, r0, sl
   16c30:	str	r2, [sp, #120]	; 0x78
   16c34:	ldr	r0, [sp, #124]	; 0x7c
   16c38:	adc	r0, r1, r0
   16c3c:	str	r0, [sp, #124]	; 0x7c
   16c40:	eor	r1, r0, r6
   16c44:	eor	r0, r2, r7
   16c48:	mov	r2, #63	; 0x3f
   16c4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16c50:	str	r0, [sp, #76]	; 0x4c
   16c54:	str	r1, [sp, #68]	; 0x44
   16c58:	ldr	r0, [sp, #204]	; 0xcc
   16c5c:	ldr	r1, [sp, #44]	; 0x2c
   16c60:	adds	r0, r1, r0
   16c64:	ldr	r1, [sp, #200]	; 0xc8
   16c68:	ldr	r2, [sp, #52]	; 0x34
   16c6c:	adc	r1, r2, r1
   16c70:	ldr	r4, [sp, #72]	; 0x48
   16c74:	adds	r8, r0, r4
   16c78:	ldr	r7, [sp, #64]	; 0x40
   16c7c:	adc	r9, r1, r7
   16c80:	ldr	r0, [sp, #88]	; 0x58
   16c84:	eor	r1, r9, r0
   16c88:	ldr	r0, [sp, #92]	; 0x5c
   16c8c:	eor	r0, r8, r0
   16c90:	mov	r2, #32
   16c94:	bl	18c30 <__assert_fail@plt+0x78b4>
   16c98:	mov	r5, r0
   16c9c:	mov	r6, r1
   16ca0:	ldr	r0, [sp, #112]	; 0x70
   16ca4:	adds	sl, r5, r0
   16ca8:	ldr	r0, [sp, #116]	; 0x74
   16cac:	adc	r0, r1, r0
   16cb0:	str	r0, [sp, #116]	; 0x74
   16cb4:	eor	r1, r0, r7
   16cb8:	eor	r0, sl, r4
   16cbc:	mov	r2, #24
   16cc0:	bl	18c30 <__assert_fail@plt+0x78b4>
   16cc4:	mov	r4, r0
   16cc8:	mov	r7, r1
   16ccc:	ldr	r0, [sp, #244]	; 0xf4
   16cd0:	adds	r0, r8, r0
   16cd4:	ldr	r1, [sp, #240]	; 0xf0
   16cd8:	adc	r1, r9, r1
   16cdc:	adds	r2, r0, r4
   16ce0:	str	r2, [sp, #44]	; 0x2c
   16ce4:	adc	r0, r1, r7
   16ce8:	str	r0, [sp, #52]	; 0x34
   16cec:	eor	r1, r0, r6
   16cf0:	eor	r0, r2, r5
   16cf4:	mov	r2, #16
   16cf8:	bl	18c30 <__assert_fail@plt+0x78b4>
   16cfc:	str	r0, [sp, #92]	; 0x5c
   16d00:	str	r1, [sp, #88]	; 0x58
   16d04:	adds	r2, r0, sl
   16d08:	str	r2, [sp, #112]	; 0x70
   16d0c:	ldr	r0, [sp, #116]	; 0x74
   16d10:	adc	r0, r1, r0
   16d14:	str	r0, [sp, #116]	; 0x74
   16d18:	eor	r1, r0, r7
   16d1c:	eor	r0, r2, r4
   16d20:	mov	r2, #63	; 0x3f
   16d24:	bl	18c30 <__assert_fail@plt+0x78b4>
   16d28:	str	r0, [sp, #72]	; 0x48
   16d2c:	str	r1, [sp, #64]	; 0x40
   16d30:	ldr	r0, [sp, #276]	; 0x114
   16d34:	ldr	r7, [sp, #136]	; 0x88
   16d38:	adds	r0, r7, r0
   16d3c:	ldr	r1, [sp, #272]	; 0x110
   16d40:	ldr	r6, [sp, #140]	; 0x8c
   16d44:	adc	r1, r6, r1
   16d48:	ldr	r2, [sp, #40]	; 0x28
   16d4c:	adds	r9, r0, r2
   16d50:	ldr	r0, [sp, #48]	; 0x30
   16d54:	adc	r8, r1, r0
   16d58:	ldr	r0, [sp, #80]	; 0x50
   16d5c:	eor	r1, r8, r0
   16d60:	ldr	r0, [sp, #84]	; 0x54
   16d64:	eor	r0, r9, r0
   16d68:	mov	r2, #32
   16d6c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16d70:	mov	r4, r0
   16d74:	mov	r5, r1
   16d78:	ldr	r0, [sp, #104]	; 0x68
   16d7c:	adds	r2, r4, r0
   16d80:	ldr	r0, [sp, #108]	; 0x6c
   16d84:	adc	r0, r1, r0
   16d88:	str	r0, [sp, #108]	; 0x6c
   16d8c:	eor	r1, r0, r6
   16d90:	eor	r0, r2, r7
   16d94:	mov	r6, r2
   16d98:	mov	r2, #24
   16d9c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16da0:	mov	r7, r0
   16da4:	mov	sl, r1
   16da8:	ldr	r0, [sp, #188]	; 0xbc
   16dac:	adds	r0, r9, r0
   16db0:	ldr	r1, [sp, #184]	; 0xb8
   16db4:	adc	r1, r8, r1
   16db8:	adds	r2, r0, r7
   16dbc:	str	r2, [sp, #40]	; 0x28
   16dc0:	adc	r0, r1, sl
   16dc4:	str	r0, [sp, #48]	; 0x30
   16dc8:	eor	r1, r0, r5
   16dcc:	eor	r0, r2, r4
   16dd0:	mov	r2, #16
   16dd4:	bl	18c30 <__assert_fail@plt+0x78b4>
   16dd8:	str	r0, [sp, #84]	; 0x54
   16ddc:	str	r1, [sp, #80]	; 0x50
   16de0:	adds	r2, r0, r6
   16de4:	str	r2, [sp, #104]	; 0x68
   16de8:	ldr	r0, [sp, #108]	; 0x6c
   16dec:	adc	r0, r1, r0
   16df0:	str	r0, [sp, #108]	; 0x6c
   16df4:	eor	r1, r0, sl
   16df8:	eor	r0, r2, r7
   16dfc:	mov	r2, #63	; 0x3f
   16e00:	bl	18c30 <__assert_fail@plt+0x78b4>
   16e04:	mov	r4, r0
   16e08:	mov	r7, r1
   16e0c:	ldr	r0, [sp, #244]	; 0xf4
   16e10:	ldr	r1, [sp, #24]
   16e14:	adds	r0, r1, r0
   16e18:	ldr	r1, [sp, #240]	; 0xf0
   16e1c:	ldr	r2, [sp, #32]
   16e20:	adc	r1, r2, r1
   16e24:	adds	r8, r0, r4
   16e28:	adc	r9, r1, r7
   16e2c:	ldr	r0, [sp, #96]	; 0x60
   16e30:	eor	r1, r9, r0
   16e34:	ldr	r0, [sp, #100]	; 0x64
   16e38:	eor	r0, r8, r0
   16e3c:	mov	r2, #32
   16e40:	bl	18c30 <__assert_fail@plt+0x78b4>
   16e44:	mov	r5, r0
   16e48:	mov	r6, r1
   16e4c:	ldr	r0, [sp, #112]	; 0x70
   16e50:	adds	sl, r5, r0
   16e54:	ldr	r0, [sp, #116]	; 0x74
   16e58:	adc	r0, r1, r0
   16e5c:	str	r0, [sp, #140]	; 0x8c
   16e60:	eor	r1, r0, r7
   16e64:	eor	r0, sl, r4
   16e68:	mov	r2, #24
   16e6c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16e70:	mov	r4, r0
   16e74:	mov	r7, r1
   16e78:	ldr	r0, [sp, #180]	; 0xb4
   16e7c:	adds	r0, r8, r0
   16e80:	ldr	r1, [sp, #176]	; 0xb0
   16e84:	adc	r1, r9, r1
   16e88:	adds	r2, r0, r4
   16e8c:	str	r2, [sp, #24]
   16e90:	adc	r0, r1, r7
   16e94:	str	r0, [sp, #32]
   16e98:	eor	r1, r0, r6
   16e9c:	eor	r0, r2, r5
   16ea0:	mov	r2, #16
   16ea4:	bl	18c30 <__assert_fail@plt+0x78b4>
   16ea8:	str	r0, [sp, #100]	; 0x64
   16eac:	str	r1, [sp, #96]	; 0x60
   16eb0:	adds	r2, r0, sl
   16eb4:	str	r2, [sp, #112]	; 0x70
   16eb8:	ldr	r0, [sp, #140]	; 0x8c
   16ebc:	adc	r0, r1, r0
   16ec0:	str	r0, [sp, #116]	; 0x74
   16ec4:	eor	r1, r0, r7
   16ec8:	eor	r0, r2, r4
   16ecc:	mov	r2, #63	; 0x3f
   16ed0:	bl	18c30 <__assert_fail@plt+0x78b4>
   16ed4:	mov	r2, r0
   16ed8:	str	r0, [sp, #136]	; 0x88
   16edc:	mov	r3, r1
   16ee0:	str	r1, [sp, #140]	; 0x8c
   16ee4:	ldr	r0, [sp, #172]	; 0xac
   16ee8:	ldr	r6, [sp, #60]	; 0x3c
   16eec:	adds	r0, r6, r0
   16ef0:	ldr	r1, [sp, #168]	; 0xa8
   16ef4:	ldr	r7, [sp, #56]	; 0x38
   16ef8:	adc	r1, r7, r1
   16efc:	ldr	r5, [sp, #28]
   16f00:	adds	sl, r0, r5
   16f04:	ldr	r0, [sp, #36]	; 0x24
   16f08:	adc	r8, r1, r0
   16f0c:	ldr	r0, [sp, #88]	; 0x58
   16f10:	eor	r1, r0, r8
   16f14:	ldr	r0, [sp, #92]	; 0x5c
   16f18:	eor	r0, r0, sl
   16f1c:	str	r3, [sp, #324]	; 0x144
   16f20:	str	r2, [sp, #320]	; 0x140
   16f24:	mov	r2, #32
   16f28:	bl	18c30 <__assert_fail@plt+0x78b4>
   16f2c:	mov	r4, r0
   16f30:	mov	r5, r1
   16f34:	ldr	r0, [sp, #104]	; 0x68
   16f38:	adds	r9, r4, r0
   16f3c:	ldr	r0, [sp, #108]	; 0x6c
   16f40:	adc	r0, r1, r0
   16f44:	str	r0, [sp, #108]	; 0x6c
   16f48:	eor	r1, r0, r7
   16f4c:	eor	r0, r9, r6
   16f50:	mov	r2, #24
   16f54:	bl	18c30 <__assert_fail@plt+0x78b4>
   16f58:	mov	r6, r0
   16f5c:	mov	r7, r1
   16f60:	ldr	r0, [sp, #212]	; 0xd4
   16f64:	adds	r0, sl, r0
   16f68:	ldr	r1, [sp, #208]	; 0xd0
   16f6c:	adc	r1, r8, r1
   16f70:	adds	r2, r0, r6
   16f74:	str	r2, [sp, #28]
   16f78:	adc	r0, r1, r7
   16f7c:	str	r0, [sp, #36]	; 0x24
   16f80:	eor	r1, r0, r5
   16f84:	eor	r0, r2, r4
   16f88:	mov	r2, #16
   16f8c:	bl	18c30 <__assert_fail@plt+0x78b4>
   16f90:	str	r0, [sp, #92]	; 0x5c
   16f94:	str	r1, [sp, #88]	; 0x58
   16f98:	adds	r2, r0, r9
   16f9c:	str	r2, [sp, #104]	; 0x68
   16fa0:	ldr	r0, [sp, #108]	; 0x6c
   16fa4:	adc	r0, r1, r0
   16fa8:	str	r0, [sp, #108]	; 0x6c
   16fac:	eor	r1, r0, r7
   16fb0:	eor	r0, r2, r6
   16fb4:	mov	r2, #63	; 0x3f
   16fb8:	bl	18c30 <__assert_fail@plt+0x78b4>
   16fbc:	mov	r2, r0
   16fc0:	str	r0, [sp, #60]	; 0x3c
   16fc4:	mov	r3, r1
   16fc8:	str	r1, [sp, #56]	; 0x38
   16fcc:	ldr	r0, [sp, #220]	; 0xdc
   16fd0:	ldr	r1, [sp, #24]
   16fd4:	adds	r0, r1, r0
   16fd8:	ldr	r1, [sp, #216]	; 0xd8
   16fdc:	ldr	r7, [sp, #32]
   16fe0:	adc	r1, r7, r1
   16fe4:	adds	r0, r0, r2
   16fe8:	str	r0, [sp, #32]
   16fec:	adc	r0, r1, r3
   16ff0:	str	r0, [sp, #24]
   16ff4:	ldr	r0, [sp, #236]	; 0xec
   16ff8:	ldr	r4, [sp, #76]	; 0x4c
   16ffc:	adds	r0, r4, r0
   17000:	ldr	r1, [sp, #232]	; 0xe8
   17004:	ldr	r6, [sp, #68]	; 0x44
   17008:	adc	r1, r6, r1
   1700c:	ldr	r2, [sp, #44]	; 0x2c
   17010:	adds	r8, r0, r2
   17014:	ldr	r0, [sp, #52]	; 0x34
   17018:	adc	r9, r1, r0
   1701c:	ldr	r0, [sp, #80]	; 0x50
   17020:	eor	r1, r0, r9
   17024:	ldr	r0, [sp, #84]	; 0x54
   17028:	eor	r0, r0, r8
   1702c:	mov	r2, #32
   17030:	bl	18c30 <__assert_fail@plt+0x78b4>
   17034:	mov	r5, r0
   17038:	mov	r7, r1
   1703c:	ldr	r0, [sp, #128]	; 0x80
   17040:	adds	sl, r5, r0
   17044:	ldr	r0, [sp, #132]	; 0x84
   17048:	adc	r0, r1, r0
   1704c:	str	r0, [sp, #132]	; 0x84
   17050:	eor	r1, r0, r6
   17054:	eor	r0, sl, r4
   17058:	mov	r2, #24
   1705c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17060:	mov	r6, r0
   17064:	mov	r4, r1
   17068:	ldr	r0, [sp, #284]	; 0x11c
   1706c:	adds	r0, r8, r0
   17070:	ldr	r1, [sp, #280]	; 0x118
   17074:	adc	r1, r9, r1
   17078:	adds	r2, r0, r6
   1707c:	str	r2, [sp, #44]	; 0x2c
   17080:	adc	r0, r1, r4
   17084:	str	r0, [sp, #52]	; 0x34
   17088:	eor	r1, r0, r7
   1708c:	eor	r0, r2, r5
   17090:	mov	r2, #16
   17094:	bl	18c30 <__assert_fail@plt+0x78b4>
   17098:	str	r0, [sp, #84]	; 0x54
   1709c:	str	r1, [sp, #80]	; 0x50
   170a0:	adds	r2, r0, sl
   170a4:	str	r2, [sp, #128]	; 0x80
   170a8:	ldr	r0, [sp, #132]	; 0x84
   170ac:	adc	r0, r1, r0
   170b0:	str	r0, [sp, #132]	; 0x84
   170b4:	eor	r1, r0, r4
   170b8:	eor	r0, r2, r6
   170bc:	mov	r2, #63	; 0x3f
   170c0:	bl	18c30 <__assert_fail@plt+0x78b4>
   170c4:	str	r0, [sp, #76]	; 0x4c
   170c8:	str	r1, [sp, #68]	; 0x44
   170cc:	ldr	r0, [sp, #164]	; 0xa4
   170d0:	ldr	r5, [sp, #72]	; 0x48
   170d4:	adds	r0, r5, r0
   170d8:	ldr	r1, [sp, #160]	; 0xa0
   170dc:	ldr	r7, [sp, #64]	; 0x40
   170e0:	adc	r1, r7, r1
   170e4:	ldr	r2, [sp, #40]	; 0x28
   170e8:	adds	sl, r0, r2
   170ec:	ldr	r0, [sp, #48]	; 0x30
   170f0:	adc	r8, r1, r0
   170f4:	ldr	r0, [sp, #144]	; 0x90
   170f8:	eor	r1, r8, r0
   170fc:	ldr	r0, [sp, #148]	; 0x94
   17100:	eor	r0, sl, r0
   17104:	mov	r2, #32
   17108:	bl	18c30 <__assert_fail@plt+0x78b4>
   1710c:	mov	r4, r0
   17110:	mov	r6, r1
   17114:	ldr	r0, [sp, #120]	; 0x78
   17118:	adds	r9, r4, r0
   1711c:	ldr	r0, [sp, #124]	; 0x7c
   17120:	adc	r0, r1, r0
   17124:	str	r0, [sp, #148]	; 0x94
   17128:	eor	r1, r0, r7
   1712c:	eor	r0, r9, r5
   17130:	mov	r2, #24
   17134:	bl	18c30 <__assert_fail@plt+0x78b4>
   17138:	mov	r5, r0
   1713c:	mov	r7, r1
   17140:	ldr	r0, [sp, #204]	; 0xcc
   17144:	adds	r0, sl, r0
   17148:	ldr	r1, [sp, #200]	; 0xc8
   1714c:	adc	r1, r8, r1
   17150:	adds	r2, r0, r5
   17154:	str	r2, [sp, #40]	; 0x28
   17158:	adc	r0, r1, r7
   1715c:	str	r0, [sp, #48]	; 0x30
   17160:	eor	r1, r0, r6
   17164:	eor	r0, r2, r4
   17168:	mov	r2, #16
   1716c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17170:	mov	r4, r0
   17174:	mov	r6, r1
   17178:	adds	r2, r0, r9
   1717c:	str	r2, [sp, #120]	; 0x78
   17180:	ldr	r0, [sp, #148]	; 0x94
   17184:	adc	r0, r1, r0
   17188:	str	r0, [sp, #124]	; 0x7c
   1718c:	eor	r1, r0, r7
   17190:	eor	r0, r2, r5
   17194:	mov	r2, #63	; 0x3f
   17198:	bl	18c30 <__assert_fail@plt+0x78b4>
   1719c:	str	r0, [sp, #72]	; 0x48
   171a0:	str	r1, [sp, #64]	; 0x40
   171a4:	ldr	r8, [sp, #24]
   171a8:	eor	r1, r6, r8
   171ac:	ldr	sl, [sp, #32]
   171b0:	eor	r0, r4, sl
   171b4:	mov	r2, #32
   171b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   171bc:	mov	r4, r0
   171c0:	mov	r6, r1
   171c4:	ldr	r0, [sp, #128]	; 0x80
   171c8:	adds	r2, r4, r0
   171cc:	str	r2, [sp, #128]	; 0x80
   171d0:	ldr	r0, [sp, #132]	; 0x84
   171d4:	adc	r9, r1, r0
   171d8:	ldr	r0, [sp, #56]	; 0x38
   171dc:	eor	r1, r9, r0
   171e0:	ldr	r0, [sp, #60]	; 0x3c
   171e4:	eor	r0, r2, r0
   171e8:	mov	r2, #24
   171ec:	bl	18c30 <__assert_fail@plt+0x78b4>
   171f0:	mov	r7, r0
   171f4:	mov	r5, r1
   171f8:	ldr	r0, [sp, #276]	; 0x114
   171fc:	adds	r0, sl, r0
   17200:	ldr	r1, [sp, #272]	; 0x110
   17204:	adc	r1, r8, r1
   17208:	adds	r2, r0, r7
   1720c:	str	r2, [sp, #24]
   17210:	adc	r0, r1, r5
   17214:	str	r0, [sp, #32]
   17218:	eor	r1, r0, r6
   1721c:	eor	r0, r2, r4
   17220:	mov	r2, #16
   17224:	bl	18c30 <__assert_fail@plt+0x78b4>
   17228:	mov	r2, r0
   1722c:	str	r0, [sp, #148]	; 0x94
   17230:	mov	r3, r1
   17234:	str	r1, [sp, #144]	; 0x90
   17238:	ldr	r0, [sp, #128]	; 0x80
   1723c:	adds	r6, r2, r0
   17240:	str	r6, [sp, #128]	; 0x80
   17244:	adc	r0, r1, r9
   17248:	str	r0, [sp, #132]	; 0x84
   1724c:	eor	r1, r0, r5
   17250:	eor	r0, r6, r7
   17254:	str	r3, [sp, #412]	; 0x19c
   17258:	str	r2, [sp, #408]	; 0x198
   1725c:	mov	r2, #63	; 0x3f
   17260:	bl	18c30 <__assert_fail@plt+0x78b4>
   17264:	str	r0, [sp, #60]	; 0x3c
   17268:	str	r1, [sp, #56]	; 0x38
   1726c:	ldr	r0, [sp, #196]	; 0xc4
   17270:	ldr	r1, [sp, #28]
   17274:	adds	r0, r1, r0
   17278:	ldr	r1, [sp, #192]	; 0xc0
   1727c:	ldr	r2, [sp, #36]	; 0x24
   17280:	adc	r1, r2, r1
   17284:	ldr	r6, [sp, #76]	; 0x4c
   17288:	adds	r8, r0, r6
   1728c:	ldr	r7, [sp, #68]	; 0x44
   17290:	adc	r9, r1, r7
   17294:	ldr	r0, [sp, #96]	; 0x60
   17298:	eor	r1, r9, r0
   1729c:	ldr	r0, [sp, #100]	; 0x64
   172a0:	eor	r0, r8, r0
   172a4:	mov	r2, #32
   172a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   172ac:	mov	r4, r0
   172b0:	mov	r5, r1
   172b4:	ldr	r0, [sp, #120]	; 0x78
   172b8:	adds	sl, r4, r0
   172bc:	ldr	r0, [sp, #124]	; 0x7c
   172c0:	adc	r0, r1, r0
   172c4:	str	r0, [sp, #124]	; 0x7c
   172c8:	eor	r1, r0, r7
   172cc:	eor	r0, sl, r6
   172d0:	mov	r2, #24
   172d4:	bl	18c30 <__assert_fail@plt+0x78b4>
   172d8:	mov	r6, r0
   172dc:	mov	r7, r1
   172e0:	ldr	r0, [sp, #260]	; 0x104
   172e4:	adds	r0, r8, r0
   172e8:	ldr	r1, [sp, #256]	; 0x100
   172ec:	adc	r1, r9, r1
   172f0:	adds	r2, r0, r6
   172f4:	str	r2, [sp, #28]
   172f8:	adc	r0, r1, r7
   172fc:	str	r0, [sp, #36]	; 0x24
   17300:	eor	r1, r0, r5
   17304:	eor	r0, r2, r4
   17308:	mov	r2, #16
   1730c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17310:	str	r0, [sp, #100]	; 0x64
   17314:	str	r1, [sp, #96]	; 0x60
   17318:	adds	r2, r0, sl
   1731c:	str	r2, [sp, #120]	; 0x78
   17320:	ldr	r0, [sp, #124]	; 0x7c
   17324:	adc	r0, r1, r0
   17328:	str	r0, [sp, #124]	; 0x7c
   1732c:	eor	r1, r0, r7
   17330:	eor	r0, r2, r6
   17334:	mov	r2, #63	; 0x3f
   17338:	bl	18c30 <__assert_fail@plt+0x78b4>
   1733c:	str	r0, [sp, #76]	; 0x4c
   17340:	str	r1, [sp, #68]	; 0x44
   17344:	ldr	r0, [sp, #252]	; 0xfc
   17348:	ldr	r1, [sp, #44]	; 0x2c
   1734c:	adds	r0, r1, r0
   17350:	ldr	r1, [sp, #248]	; 0xf8
   17354:	ldr	r2, [sp, #52]	; 0x34
   17358:	adc	r1, r2, r1
   1735c:	ldr	r4, [sp, #72]	; 0x48
   17360:	adds	r8, r0, r4
   17364:	ldr	r7, [sp, #64]	; 0x40
   17368:	adc	r9, r1, r7
   1736c:	ldr	r0, [sp, #88]	; 0x58
   17370:	eor	r1, r9, r0
   17374:	ldr	r0, [sp, #92]	; 0x5c
   17378:	eor	r0, r8, r0
   1737c:	mov	r2, #32
   17380:	bl	18c30 <__assert_fail@plt+0x78b4>
   17384:	mov	r5, r0
   17388:	mov	r6, r1
   1738c:	ldr	r0, [sp, #112]	; 0x70
   17390:	adds	sl, r5, r0
   17394:	ldr	r0, [sp, #116]	; 0x74
   17398:	adc	r0, r1, r0
   1739c:	str	r0, [sp, #116]	; 0x74
   173a0:	eor	r1, r0, r7
   173a4:	eor	r0, sl, r4
   173a8:	mov	r2, #24
   173ac:	bl	18c30 <__assert_fail@plt+0x78b4>
   173b0:	mov	r4, r0
   173b4:	mov	r7, r1
   173b8:	ldr	r0, [sp, #228]	; 0xe4
   173bc:	adds	r0, r8, r0
   173c0:	ldr	r1, [sp, #224]	; 0xe0
   173c4:	adc	r1, r9, r1
   173c8:	adds	r2, r0, r4
   173cc:	str	r2, [sp, #44]	; 0x2c
   173d0:	adc	r0, r1, r7
   173d4:	str	r0, [sp, #52]	; 0x34
   173d8:	eor	r1, r0, r6
   173dc:	eor	r0, r2, r5
   173e0:	mov	r2, #16
   173e4:	bl	18c30 <__assert_fail@plt+0x78b4>
   173e8:	str	r0, [sp, #92]	; 0x5c
   173ec:	str	r1, [sp, #88]	; 0x58
   173f0:	adds	r2, r0, sl
   173f4:	str	r2, [sp, #112]	; 0x70
   173f8:	ldr	r0, [sp, #116]	; 0x74
   173fc:	adc	r0, r1, r0
   17400:	str	r0, [sp, #116]	; 0x74
   17404:	eor	r1, r0, r7
   17408:	eor	r0, r2, r4
   1740c:	mov	r2, #63	; 0x3f
   17410:	bl	18c30 <__assert_fail@plt+0x78b4>
   17414:	str	r0, [sp, #72]	; 0x48
   17418:	str	r1, [sp, #64]	; 0x40
   1741c:	ldr	r0, [sp, #188]	; 0xbc
   17420:	ldr	r6, [sp, #136]	; 0x88
   17424:	adds	r0, r6, r0
   17428:	ldr	r1, [sp, #184]	; 0xb8
   1742c:	ldr	r7, [sp, #140]	; 0x8c
   17430:	adc	r1, r7, r1
   17434:	ldr	r2, [sp, #40]	; 0x28
   17438:	adds	r9, r0, r2
   1743c:	ldr	r0, [sp, #48]	; 0x30
   17440:	adc	r8, r1, r0
   17444:	ldr	r0, [sp, #80]	; 0x50
   17448:	eor	r1, r8, r0
   1744c:	ldr	r0, [sp, #84]	; 0x54
   17450:	eor	r0, r9, r0
   17454:	mov	r2, #32
   17458:	bl	18c30 <__assert_fail@plt+0x78b4>
   1745c:	mov	r4, r0
   17460:	mov	r5, r1
   17464:	ldr	r0, [sp, #104]	; 0x68
   17468:	adds	sl, r4, r0
   1746c:	ldr	r0, [sp, #108]	; 0x6c
   17470:	adc	r0, r1, r0
   17474:	str	r0, [sp, #108]	; 0x6c
   17478:	eor	r1, r0, r7
   1747c:	eor	r0, sl, r6
   17480:	mov	r2, #24
   17484:	bl	18c30 <__assert_fail@plt+0x78b4>
   17488:	mov	r7, r0
   1748c:	mov	r6, r1
   17490:	ldr	r0, [sp, #268]	; 0x10c
   17494:	adds	r0, r9, r0
   17498:	ldr	r1, [sp, #264]	; 0x108
   1749c:	adc	r1, r8, r1
   174a0:	adds	r2, r0, r7
   174a4:	str	r2, [sp, #40]	; 0x28
   174a8:	adc	r0, r1, r6
   174ac:	str	r0, [sp, #48]	; 0x30
   174b0:	eor	r1, r0, r5
   174b4:	eor	r0, r2, r4
   174b8:	mov	r2, #16
   174bc:	bl	18c30 <__assert_fail@plt+0x78b4>
   174c0:	str	r0, [sp, #84]	; 0x54
   174c4:	str	r1, [sp, #80]	; 0x50
   174c8:	adds	r2, r0, sl
   174cc:	str	r2, [sp, #104]	; 0x68
   174d0:	ldr	r0, [sp, #108]	; 0x6c
   174d4:	adc	r0, r1, r0
   174d8:	str	r0, [sp, #108]	; 0x6c
   174dc:	eor	r1, r0, r6
   174e0:	eor	r0, r2, r7
   174e4:	mov	r2, #63	; 0x3f
   174e8:	bl	18c30 <__assert_fail@plt+0x78b4>
   174ec:	mov	r4, r0
   174f0:	mov	r6, r1
   174f4:	ldr	r0, [sp, #188]	; 0xbc
   174f8:	ldr	r1, [sp, #24]
   174fc:	adds	r0, r1, r0
   17500:	ldr	r1, [sp, #184]	; 0xb8
   17504:	ldr	r2, [sp, #32]
   17508:	adc	r1, r2, r1
   1750c:	adds	r8, r0, r4
   17510:	adc	sl, r1, r6
   17514:	ldr	r0, [sp, #96]	; 0x60
   17518:	eor	r1, sl, r0
   1751c:	ldr	r0, [sp, #100]	; 0x64
   17520:	eor	r0, r8, r0
   17524:	mov	r2, #32
   17528:	bl	18c30 <__assert_fail@plt+0x78b4>
   1752c:	mov	r7, r0
   17530:	mov	r5, r1
   17534:	ldr	r0, [sp, #112]	; 0x70
   17538:	adds	r9, r7, r0
   1753c:	ldr	r0, [sp, #116]	; 0x74
   17540:	adc	r0, r1, r0
   17544:	str	r0, [sp, #140]	; 0x8c
   17548:	eor	r1, r0, r6
   1754c:	eor	r0, r9, r4
   17550:	mov	r2, #24
   17554:	bl	18c30 <__assert_fail@plt+0x78b4>
   17558:	mov	r4, r0
   1755c:	mov	r6, r1
   17560:	ldr	r0, [sp, #276]	; 0x114
   17564:	adds	r0, r8, r0
   17568:	ldr	r1, [sp, #272]	; 0x110
   1756c:	adc	r1, sl, r1
   17570:	adds	r2, r0, r4
   17574:	str	r2, [sp, #24]
   17578:	adc	r0, r1, r6
   1757c:	str	r0, [sp, #32]
   17580:	eor	r1, r0, r5
   17584:	eor	r0, r2, r7
   17588:	mov	r2, #16
   1758c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17590:	str	r0, [sp, #100]	; 0x64
   17594:	str	r1, [sp, #96]	; 0x60
   17598:	adds	r2, r0, r9
   1759c:	str	r2, [sp, #112]	; 0x70
   175a0:	ldr	r0, [sp, #140]	; 0x8c
   175a4:	adc	r0, r1, r0
   175a8:	str	r0, [sp, #116]	; 0x74
   175ac:	eor	r1, r0, r6
   175b0:	eor	r0, r2, r4
   175b4:	mov	r2, #63	; 0x3f
   175b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   175bc:	mov	r2, r0
   175c0:	str	r0, [sp, #136]	; 0x88
   175c4:	mov	r3, r1
   175c8:	str	r1, [sp, #140]	; 0x8c
   175cc:	ldr	r0, [sp, #204]	; 0xcc
   175d0:	ldr	r6, [sp, #60]	; 0x3c
   175d4:	adds	r0, r6, r0
   175d8:	ldr	r1, [sp, #200]	; 0xc8
   175dc:	ldr	r7, [sp, #56]	; 0x38
   175e0:	adc	r1, r7, r1
   175e4:	ldr	r5, [sp, #28]
   175e8:	adds	r9, r0, r5
   175ec:	ldr	r0, [sp, #36]	; 0x24
   175f0:	adc	r8, r1, r0
   175f4:	ldr	r0, [sp, #88]	; 0x58
   175f8:	eor	r1, r0, r8
   175fc:	ldr	r0, [sp, #92]	; 0x5c
   17600:	eor	r0, r0, r9
   17604:	str	r3, [sp, #324]	; 0x144
   17608:	str	r2, [sp, #320]	; 0x140
   1760c:	mov	r2, #32
   17610:	bl	18c30 <__assert_fail@plt+0x78b4>
   17614:	mov	r4, r0
   17618:	mov	r5, r1
   1761c:	ldr	r0, [sp, #104]	; 0x68
   17620:	adds	sl, r4, r0
   17624:	ldr	r0, [sp, #108]	; 0x6c
   17628:	adc	r0, r1, r0
   1762c:	str	r0, [sp, #108]	; 0x6c
   17630:	eor	r1, r0, r7
   17634:	eor	r0, sl, r6
   17638:	mov	r2, #24
   1763c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17640:	mov	r6, r0
   17644:	mov	r7, r1
   17648:	ldr	r0, [sp, #228]	; 0xe4
   1764c:	adds	r0, r9, r0
   17650:	ldr	r1, [sp, #224]	; 0xe0
   17654:	adc	r1, r8, r1
   17658:	adds	r2, r0, r6
   1765c:	str	r2, [sp, #28]
   17660:	adc	r0, r1, r7
   17664:	str	r0, [sp, #36]	; 0x24
   17668:	eor	r1, r0, r5
   1766c:	eor	r0, r2, r4
   17670:	mov	r2, #16
   17674:	bl	18c30 <__assert_fail@plt+0x78b4>
   17678:	str	r0, [sp, #92]	; 0x5c
   1767c:	str	r1, [sp, #88]	; 0x58
   17680:	adds	r2, r0, sl
   17684:	str	r2, [sp, #104]	; 0x68
   17688:	ldr	r0, [sp, #108]	; 0x6c
   1768c:	adc	r0, r1, r0
   17690:	str	r0, [sp, #108]	; 0x6c
   17694:	eor	r1, r0, r7
   17698:	eor	r0, r2, r6
   1769c:	mov	r2, #63	; 0x3f
   176a0:	bl	18c30 <__assert_fail@plt+0x78b4>
   176a4:	mov	r2, r0
   176a8:	str	r0, [sp, #60]	; 0x3c
   176ac:	mov	r3, r1
   176b0:	str	r1, [sp, #56]	; 0x38
   176b4:	ldr	r0, [sp, #180]	; 0xb4
   176b8:	ldr	r1, [sp, #24]
   176bc:	adds	r0, r1, r0
   176c0:	ldr	r1, [sp, #176]	; 0xb0
   176c4:	ldr	r7, [sp, #32]
   176c8:	adc	r1, r7, r1
   176cc:	adds	r0, r0, r2
   176d0:	str	r0, [sp, #32]
   176d4:	adc	r0, r1, r3
   176d8:	str	r0, [sp, #24]
   176dc:	ldr	r0, [sp, #260]	; 0x104
   176e0:	ldr	r4, [sp, #76]	; 0x4c
   176e4:	adds	r0, r4, r0
   176e8:	ldr	r1, [sp, #256]	; 0x100
   176ec:	ldr	r6, [sp, #68]	; 0x44
   176f0:	adc	r1, r6, r1
   176f4:	ldr	r2, [sp, #44]	; 0x2c
   176f8:	adds	r8, r0, r2
   176fc:	ldr	r0, [sp, #52]	; 0x34
   17700:	adc	r9, r1, r0
   17704:	ldr	r0, [sp, #80]	; 0x50
   17708:	eor	r1, r0, r9
   1770c:	ldr	r0, [sp, #84]	; 0x54
   17710:	eor	r0, r0, r8
   17714:	mov	r2, #32
   17718:	bl	18c30 <__assert_fail@plt+0x78b4>
   1771c:	mov	r5, r0
   17720:	mov	r7, r1
   17724:	ldr	r0, [sp, #128]	; 0x80
   17728:	adds	sl, r5, r0
   1772c:	ldr	r0, [sp, #132]	; 0x84
   17730:	adc	r0, r1, r0
   17734:	str	r0, [sp, #132]	; 0x84
   17738:	eor	r1, r0, r6
   1773c:	eor	r0, sl, r4
   17740:	mov	r2, #24
   17744:	bl	18c30 <__assert_fail@plt+0x78b4>
   17748:	mov	r6, r0
   1774c:	mov	r4, r1
   17750:	ldr	r0, [sp, #244]	; 0xf4
   17754:	adds	r0, r8, r0
   17758:	ldr	r1, [sp, #240]	; 0xf0
   1775c:	adc	r1, r9, r1
   17760:	adds	r2, r0, r6
   17764:	str	r2, [sp, #44]	; 0x2c
   17768:	adc	r0, r1, r4
   1776c:	str	r0, [sp, #52]	; 0x34
   17770:	eor	r1, r0, r7
   17774:	eor	r0, r2, r5
   17778:	mov	r2, #16
   1777c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17780:	str	r0, [sp, #84]	; 0x54
   17784:	str	r1, [sp, #80]	; 0x50
   17788:	adds	r2, r0, sl
   1778c:	str	r2, [sp, #128]	; 0x80
   17790:	ldr	r0, [sp, #132]	; 0x84
   17794:	adc	r0, r1, r0
   17798:	str	r0, [sp, #132]	; 0x84
   1779c:	eor	r1, r0, r4
   177a0:	eor	r0, r2, r6
   177a4:	mov	r2, #63	; 0x3f
   177a8:	bl	18c30 <__assert_fail@plt+0x78b4>
   177ac:	str	r0, [sp, #76]	; 0x4c
   177b0:	str	r1, [sp, #68]	; 0x44
   177b4:	ldr	r0, [sp, #252]	; 0xfc
   177b8:	ldr	r5, [sp, #72]	; 0x48
   177bc:	adds	r0, r5, r0
   177c0:	ldr	r1, [sp, #248]	; 0xf8
   177c4:	ldr	r7, [sp, #64]	; 0x40
   177c8:	adc	r1, r7, r1
   177cc:	ldr	r2, [sp, #40]	; 0x28
   177d0:	adds	sl, r0, r2
   177d4:	ldr	r0, [sp, #48]	; 0x30
   177d8:	adc	r8, r1, r0
   177dc:	ldr	r0, [sp, #144]	; 0x90
   177e0:	eor	r1, r8, r0
   177e4:	ldr	r0, [sp, #148]	; 0x94
   177e8:	eor	r0, sl, r0
   177ec:	mov	r2, #32
   177f0:	bl	18c30 <__assert_fail@plt+0x78b4>
   177f4:	mov	r4, r0
   177f8:	mov	r6, r1
   177fc:	ldr	r0, [sp, #120]	; 0x78
   17800:	adds	r9, r4, r0
   17804:	ldr	r0, [sp, #124]	; 0x7c
   17808:	adc	r0, r1, r0
   1780c:	str	r0, [sp, #148]	; 0x94
   17810:	eor	r1, r0, r7
   17814:	eor	r0, r9, r5
   17818:	mov	r2, #24
   1781c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17820:	mov	r7, r0
   17824:	mov	r5, r1
   17828:	ldr	r0, [sp, #268]	; 0x10c
   1782c:	adds	r0, sl, r0
   17830:	ldr	r1, [sp, #264]	; 0x108
   17834:	adc	r1, r8, r1
   17838:	adds	r2, r0, r7
   1783c:	str	r2, [sp, #40]	; 0x28
   17840:	adc	r0, r1, r5
   17844:	str	r0, [sp, #48]	; 0x30
   17848:	eor	r1, r0, r6
   1784c:	eor	r0, r2, r4
   17850:	mov	r2, #16
   17854:	bl	18c30 <__assert_fail@plt+0x78b4>
   17858:	mov	r4, r0
   1785c:	mov	r6, r1
   17860:	adds	r2, r0, r9
   17864:	str	r2, [sp, #120]	; 0x78
   17868:	ldr	r0, [sp, #148]	; 0x94
   1786c:	adc	r0, r1, r0
   17870:	str	r0, [sp, #124]	; 0x7c
   17874:	eor	r1, r0, r5
   17878:	eor	r0, r2, r7
   1787c:	mov	r2, #63	; 0x3f
   17880:	bl	18c30 <__assert_fail@plt+0x78b4>
   17884:	str	r0, [sp, #72]	; 0x48
   17888:	str	r1, [sp, #64]	; 0x40
   1788c:	ldr	r8, [sp, #24]
   17890:	eor	r1, r6, r8
   17894:	ldr	sl, [sp, #32]
   17898:	eor	r0, r4, sl
   1789c:	mov	r2, #32
   178a0:	bl	18c30 <__assert_fail@plt+0x78b4>
   178a4:	mov	r4, r0
   178a8:	mov	r5, r1
   178ac:	ldr	r0, [sp, #128]	; 0x80
   178b0:	adds	r2, r4, r0
   178b4:	str	r2, [sp, #128]	; 0x80
   178b8:	ldr	r0, [sp, #132]	; 0x84
   178bc:	adc	r9, r1, r0
   178c0:	ldr	r0, [sp, #56]	; 0x38
   178c4:	eor	r1, r9, r0
   178c8:	ldr	r0, [sp, #60]	; 0x3c
   178cc:	eor	r0, r2, r0
   178d0:	mov	r2, #24
   178d4:	bl	18c30 <__assert_fail@plt+0x78b4>
   178d8:	mov	r6, r0
   178dc:	mov	r7, r1
   178e0:	ldr	r0, [sp, #236]	; 0xec
   178e4:	adds	r0, sl, r0
   178e8:	ldr	r1, [sp, #232]	; 0xe8
   178ec:	adc	r1, r8, r1
   178f0:	adds	r2, r0, r6
   178f4:	str	r2, [sp, #24]
   178f8:	adc	r0, r1, r7
   178fc:	str	r0, [sp, #32]
   17900:	eor	r1, r0, r5
   17904:	eor	r0, r2, r4
   17908:	mov	r2, #16
   1790c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17910:	mov	r2, r0
   17914:	str	r0, [sp, #148]	; 0x94
   17918:	mov	r3, r1
   1791c:	str	r1, [sp, #144]	; 0x90
   17920:	ldr	r0, [sp, #128]	; 0x80
   17924:	adds	r5, r2, r0
   17928:	str	r5, [sp, #128]	; 0x80
   1792c:	adc	r0, r1, r9
   17930:	str	r0, [sp, #132]	; 0x84
   17934:	eor	r1, r0, r7
   17938:	eor	r0, r5, r6
   1793c:	str	r3, [sp, #412]	; 0x19c
   17940:	str	r2, [sp, #408]	; 0x198
   17944:	mov	r2, #63	; 0x3f
   17948:	bl	18c30 <__assert_fail@plt+0x78b4>
   1794c:	str	r0, [sp, #60]	; 0x3c
   17950:	str	r1, [sp, #56]	; 0x38
   17954:	ldr	r0, [sp, #212]	; 0xd4
   17958:	ldr	r1, [sp, #28]
   1795c:	adds	r0, r1, r0
   17960:	ldr	r1, [sp, #208]	; 0xd0
   17964:	ldr	r2, [sp, #36]	; 0x24
   17968:	adc	r1, r2, r1
   1796c:	ldr	r7, [sp, #76]	; 0x4c
   17970:	adds	sl, r0, r7
   17974:	ldr	r6, [sp, #68]	; 0x44
   17978:	adc	r8, r1, r6
   1797c:	ldr	r0, [sp, #96]	; 0x60
   17980:	eor	r1, r8, r0
   17984:	ldr	r0, [sp, #100]	; 0x64
   17988:	eor	r0, sl, r0
   1798c:	mov	r2, #32
   17990:	bl	18c30 <__assert_fail@plt+0x78b4>
   17994:	mov	r4, r0
   17998:	mov	r5, r1
   1799c:	ldr	r0, [sp, #120]	; 0x78
   179a0:	adds	r2, r4, r0
   179a4:	ldr	r0, [sp, #124]	; 0x7c
   179a8:	adc	r0, r1, r0
   179ac:	str	r0, [sp, #124]	; 0x7c
   179b0:	eor	r1, r0, r6
   179b4:	eor	r0, r2, r7
   179b8:	mov	r6, r2
   179bc:	mov	r2, #24
   179c0:	bl	18c30 <__assert_fail@plt+0x78b4>
   179c4:	mov	r7, r0
   179c8:	mov	r9, r1
   179cc:	ldr	r0, [sp, #172]	; 0xac
   179d0:	adds	r0, sl, r0
   179d4:	ldr	r1, [sp, #168]	; 0xa8
   179d8:	adc	r1, r8, r1
   179dc:	adds	r2, r0, r7
   179e0:	str	r2, [sp, #28]
   179e4:	adc	r0, r1, r9
   179e8:	str	r0, [sp, #36]	; 0x24
   179ec:	eor	r1, r0, r5
   179f0:	eor	r0, r2, r4
   179f4:	mov	r2, #16
   179f8:	bl	18c30 <__assert_fail@plt+0x78b4>
   179fc:	str	r0, [sp, #100]	; 0x64
   17a00:	str	r1, [sp, #96]	; 0x60
   17a04:	adds	r2, r0, r6
   17a08:	str	r2, [sp, #120]	; 0x78
   17a0c:	ldr	r0, [sp, #124]	; 0x7c
   17a10:	adc	r0, r1, r0
   17a14:	str	r0, [sp, #124]	; 0x7c
   17a18:	eor	r1, r0, r9
   17a1c:	eor	r0, r2, r7
   17a20:	mov	r2, #63	; 0x3f
   17a24:	bl	18c30 <__assert_fail@plt+0x78b4>
   17a28:	str	r0, [sp, #76]	; 0x4c
   17a2c:	str	r1, [sp, #68]	; 0x44
   17a30:	ldr	r0, [sp, #284]	; 0x11c
   17a34:	ldr	r1, [sp, #44]	; 0x2c
   17a38:	adds	r0, r1, r0
   17a3c:	ldr	r1, [sp, #280]	; 0x118
   17a40:	ldr	r2, [sp, #52]	; 0x34
   17a44:	adc	r1, r2, r1
   17a48:	ldr	r6, [sp, #72]	; 0x48
   17a4c:	adds	r8, r0, r6
   17a50:	ldr	r7, [sp, #64]	; 0x40
   17a54:	adc	r9, r1, r7
   17a58:	ldr	r0, [sp, #88]	; 0x58
   17a5c:	eor	r1, r9, r0
   17a60:	ldr	r0, [sp, #92]	; 0x5c
   17a64:	eor	r0, r8, r0
   17a68:	mov	r2, #32
   17a6c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17a70:	mov	r4, r0
   17a74:	mov	r5, r1
   17a78:	ldr	r0, [sp, #112]	; 0x70
   17a7c:	adds	sl, r4, r0
   17a80:	ldr	r0, [sp, #116]	; 0x74
   17a84:	adc	r0, r1, r0
   17a88:	str	r0, [sp, #116]	; 0x74
   17a8c:	eor	r1, r0, r7
   17a90:	eor	r0, sl, r6
   17a94:	mov	r2, #24
   17a98:	bl	18c30 <__assert_fail@plt+0x78b4>
   17a9c:	mov	r7, r0
   17aa0:	mov	r6, r1
   17aa4:	ldr	r0, [sp, #220]	; 0xdc
   17aa8:	adds	r0, r8, r0
   17aac:	ldr	r1, [sp, #216]	; 0xd8
   17ab0:	adc	r1, r9, r1
   17ab4:	adds	r2, r0, r7
   17ab8:	str	r2, [sp, #44]	; 0x2c
   17abc:	adc	r0, r1, r6
   17ac0:	str	r0, [sp, #52]	; 0x34
   17ac4:	eor	r1, r0, r5
   17ac8:	eor	r0, r2, r4
   17acc:	mov	r2, #16
   17ad0:	bl	18c30 <__assert_fail@plt+0x78b4>
   17ad4:	str	r0, [sp, #92]	; 0x5c
   17ad8:	str	r1, [sp, #88]	; 0x58
   17adc:	adds	r2, r0, sl
   17ae0:	str	r2, [sp, #112]	; 0x70
   17ae4:	ldr	r0, [sp, #116]	; 0x74
   17ae8:	adc	r0, r1, r0
   17aec:	str	r0, [sp, #116]	; 0x74
   17af0:	eor	r1, r0, r6
   17af4:	eor	r0, r2, r7
   17af8:	mov	r2, #63	; 0x3f
   17afc:	bl	18c30 <__assert_fail@plt+0x78b4>
   17b00:	str	r0, [sp, #72]	; 0x48
   17b04:	str	r1, [sp, #64]	; 0x40
   17b08:	ldr	r0, [sp, #196]	; 0xc4
   17b0c:	ldr	r4, [sp, #136]	; 0x88
   17b10:	adds	r0, r4, r0
   17b14:	ldr	r1, [sp, #192]	; 0xc0
   17b18:	ldr	r5, [sp, #140]	; 0x8c
   17b1c:	adc	r1, r5, r1
   17b20:	ldr	r2, [sp, #40]	; 0x28
   17b24:	adds	sl, r0, r2
   17b28:	ldr	r0, [sp, #48]	; 0x30
   17b2c:	adc	r1, r1, r0
   17b30:	str	r1, [sp, #48]	; 0x30
   17b34:	ldr	r0, [sp, #80]	; 0x50
   17b38:	eor	r1, r1, r0
   17b3c:	ldr	r0, [sp, #84]	; 0x54
   17b40:	eor	r0, sl, r0
   17b44:	mov	r2, #32
   17b48:	bl	18c30 <__assert_fail@plt+0x78b4>
   17b4c:	mov	r9, r0
   17b50:	mov	r7, r1
   17b54:	ldr	r0, [sp, #104]	; 0x68
   17b58:	adds	r2, r9, r0
   17b5c:	str	r2, [sp, #104]	; 0x68
   17b60:	ldr	r0, [sp, #108]	; 0x6c
   17b64:	adc	r0, r1, r0
   17b68:	str	r0, [sp, #108]	; 0x6c
   17b6c:	eor	r1, r0, r5
   17b70:	eor	r0, r2, r4
   17b74:	mov	r2, #24
   17b78:	bl	18c30 <__assert_fail@plt+0x78b4>
   17b7c:	mov	r8, r0
   17b80:	mov	r5, r1
   17b84:	ldr	r6, [sp, #164]	; 0xa4
   17b88:	adds	r0, sl, r6
   17b8c:	ldr	r4, [sp, #160]	; 0xa0
   17b90:	ldr	r1, [sp, #48]	; 0x30
   17b94:	adc	r1, r1, r4
   17b98:	adds	r2, r0, r8
   17b9c:	str	r2, [sp, #40]	; 0x28
   17ba0:	adc	r0, r1, r5
   17ba4:	str	r0, [sp, #48]	; 0x30
   17ba8:	eor	r1, r0, r7
   17bac:	eor	r0, r2, r9
   17bb0:	mov	r2, #16
   17bb4:	bl	18c30 <__assert_fail@plt+0x78b4>
   17bb8:	str	r0, [sp, #84]	; 0x54
   17bbc:	str	r1, [sp, #80]	; 0x50
   17bc0:	ldr	r2, [sp, #104]	; 0x68
   17bc4:	adds	r2, r0, r2
   17bc8:	str	r2, [sp, #104]	; 0x68
   17bcc:	ldr	r0, [sp, #108]	; 0x6c
   17bd0:	adc	r0, r1, r0
   17bd4:	str	r0, [sp, #108]	; 0x6c
   17bd8:	eor	r1, r0, r5
   17bdc:	eor	r0, r2, r8
   17be0:	mov	r2, #63	; 0x3f
   17be4:	bl	18c30 <__assert_fail@plt+0x78b4>
   17be8:	mov	r7, r0
   17bec:	mov	r5, r1
   17bf0:	ldr	r0, [sp, #24]
   17bf4:	adds	r0, r0, r6
   17bf8:	ldr	r1, [sp, #32]
   17bfc:	adc	r1, r1, r4
   17c00:	adds	r9, r0, r7
   17c04:	adc	r8, r1, r5
   17c08:	ldr	r0, [sp, #96]	; 0x60
   17c0c:	eor	r1, r8, r0
   17c10:	ldr	r0, [sp, #100]	; 0x64
   17c14:	eor	r0, r9, r0
   17c18:	mov	r2, #32
   17c1c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17c20:	mov	r6, r0
   17c24:	mov	sl, r1
   17c28:	ldr	r0, [sp, #112]	; 0x70
   17c2c:	adds	r2, r6, r0
   17c30:	ldr	r0, [sp, #116]	; 0x74
   17c34:	adc	r0, r1, r0
   17c38:	str	r0, [sp, #140]	; 0x8c
   17c3c:	eor	r1, r0, r5
   17c40:	eor	r0, r2, r7
   17c44:	mov	r7, r2
   17c48:	mov	r2, #24
   17c4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17c50:	mov	r4, r0
   17c54:	mov	r5, r1
   17c58:	ldr	r0, [sp, #252]	; 0xfc
   17c5c:	adds	r0, r9, r0
   17c60:	ldr	r1, [sp, #248]	; 0xf8
   17c64:	adc	r1, r8, r1
   17c68:	adds	r2, r0, r4
   17c6c:	str	r2, [sp, #20]
   17c70:	adc	r0, r1, r5
   17c74:	str	r0, [sp, #32]
   17c78:	eor	r1, r0, sl
   17c7c:	eor	r0, r2, r6
   17c80:	mov	r2, #16
   17c84:	bl	18c30 <__assert_fail@plt+0x78b4>
   17c88:	str	r0, [sp, #100]	; 0x64
   17c8c:	str	r1, [sp, #96]	; 0x60
   17c90:	adds	r2, r0, r7
   17c94:	str	r2, [sp, #112]	; 0x70
   17c98:	ldr	r0, [sp, #140]	; 0x8c
   17c9c:	adc	r0, r1, r0
   17ca0:	str	r0, [sp, #116]	; 0x74
   17ca4:	eor	r1, r0, r5
   17ca8:	eor	r0, r2, r4
   17cac:	mov	r2, #63	; 0x3f
   17cb0:	bl	18c30 <__assert_fail@plt+0x78b4>
   17cb4:	mov	r2, r0
   17cb8:	str	r0, [sp, #136]	; 0x88
   17cbc:	mov	r3, r1
   17cc0:	str	r1, [sp, #140]	; 0x8c
   17cc4:	ldr	r0, [sp, #276]	; 0x114
   17cc8:	ldr	r6, [sp, #60]	; 0x3c
   17ccc:	adds	r0, r6, r0
   17cd0:	ldr	r1, [sp, #272]	; 0x110
   17cd4:	ldr	r7, [sp, #56]	; 0x38
   17cd8:	adc	r1, r7, r1
   17cdc:	ldr	r5, [sp, #28]
   17ce0:	adds	r9, r0, r5
   17ce4:	ldr	r0, [sp, #36]	; 0x24
   17ce8:	adc	sl, r1, r0
   17cec:	ldr	r0, [sp, #88]	; 0x58
   17cf0:	eor	r1, r0, sl
   17cf4:	ldr	r0, [sp, #92]	; 0x5c
   17cf8:	eor	r0, r0, r9
   17cfc:	str	r3, [sp, #324]	; 0x144
   17d00:	str	r2, [sp, #320]	; 0x140
   17d04:	mov	r2, #32
   17d08:	bl	18c30 <__assert_fail@plt+0x78b4>
   17d0c:	mov	r4, r0
   17d10:	mov	r5, r1
   17d14:	ldr	r0, [sp, #104]	; 0x68
   17d18:	adds	r8, r4, r0
   17d1c:	ldr	r0, [sp, #108]	; 0x6c
   17d20:	adc	r0, r1, r0
   17d24:	str	r0, [sp, #108]	; 0x6c
   17d28:	eor	r1, r0, r7
   17d2c:	eor	r0, r8, r6
   17d30:	mov	r2, #24
   17d34:	bl	18c30 <__assert_fail@plt+0x78b4>
   17d38:	mov	r6, r0
   17d3c:	mov	r7, r1
   17d40:	ldr	r0, [sp, #284]	; 0x11c
   17d44:	adds	r0, r9, r0
   17d48:	ldr	r1, [sp, #280]	; 0x118
   17d4c:	adc	r1, sl, r1
   17d50:	adds	r2, r0, r6
   17d54:	str	r2, [sp, #56]	; 0x38
   17d58:	adc	r0, r1, r7
   17d5c:	str	r0, [sp, #60]	; 0x3c
   17d60:	eor	r1, r0, r5
   17d64:	eor	r0, r2, r4
   17d68:	mov	r2, #16
   17d6c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17d70:	str	r0, [sp, #92]	; 0x5c
   17d74:	str	r1, [sp, #88]	; 0x58
   17d78:	adds	r2, r0, r8
   17d7c:	str	r2, [sp, #104]	; 0x68
   17d80:	ldr	r0, [sp, #108]	; 0x6c
   17d84:	adc	r0, r1, r0
   17d88:	str	r0, [sp, #108]	; 0x6c
   17d8c:	eor	r1, r0, r7
   17d90:	eor	r0, r2, r6
   17d94:	mov	r2, #63	; 0x3f
   17d98:	bl	18c30 <__assert_fail@plt+0x78b4>
   17d9c:	mov	r2, r0
   17da0:	str	r0, [sp, #28]
   17da4:	mov	r3, r1
   17da8:	str	r1, [sp, #24]
   17dac:	ldr	r0, [sp, #204]	; 0xcc
   17db0:	ldr	r1, [sp, #20]
   17db4:	adds	r0, r1, r0
   17db8:	ldr	r1, [sp, #200]	; 0xc8
   17dbc:	ldr	r7, [sp, #32]
   17dc0:	adc	r1, r7, r1
   17dc4:	adds	r0, r0, r2
   17dc8:	str	r0, [sp, #20]
   17dcc:	adc	r0, r1, r3
   17dd0:	str	r0, [sp]
   17dd4:	ldr	r0, [sp, #228]	; 0xe4
   17dd8:	ldr	r4, [sp, #76]	; 0x4c
   17ddc:	adds	r0, r4, r0
   17de0:	ldr	r1, [sp, #224]	; 0xe0
   17de4:	ldr	r6, [sp, #68]	; 0x44
   17de8:	adc	r1, r6, r1
   17dec:	ldr	r2, [sp, #44]	; 0x2c
   17df0:	adds	r8, r0, r2
   17df4:	ldr	r0, [sp, #52]	; 0x34
   17df8:	adc	r9, r1, r0
   17dfc:	ldr	r0, [sp, #80]	; 0x50
   17e00:	eor	r1, r0, r9
   17e04:	ldr	r0, [sp, #84]	; 0x54
   17e08:	eor	r0, r0, r8
   17e0c:	mov	r2, #32
   17e10:	bl	18c30 <__assert_fail@plt+0x78b4>
   17e14:	mov	r5, r0
   17e18:	mov	r7, r1
   17e1c:	ldr	r0, [sp, #128]	; 0x80
   17e20:	adds	sl, r5, r0
   17e24:	ldr	r0, [sp, #132]	; 0x84
   17e28:	adc	r0, r1, r0
   17e2c:	str	r0, [sp, #132]	; 0x84
   17e30:	eor	r1, r0, r6
   17e34:	eor	r0, sl, r4
   17e38:	mov	r2, #24
   17e3c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17e40:	mov	r6, r0
   17e44:	mov	r4, r1
   17e48:	ldr	r0, [sp, #268]	; 0x10c
   17e4c:	adds	r0, r8, r0
   17e50:	ldr	r1, [sp, #264]	; 0x108
   17e54:	adc	r1, r9, r1
   17e58:	adds	r2, r0, r6
   17e5c:	str	r2, [sp, #32]
   17e60:	adc	r0, r1, r4
   17e64:	str	r0, [sp, #36]	; 0x24
   17e68:	eor	r1, r0, r7
   17e6c:	eor	r0, r2, r5
   17e70:	mov	r2, #16
   17e74:	bl	18c30 <__assert_fail@plt+0x78b4>
   17e78:	str	r0, [sp, #84]	; 0x54
   17e7c:	str	r1, [sp, #80]	; 0x50
   17e80:	adds	r2, r0, sl
   17e84:	str	r2, [sp, #128]	; 0x80
   17e88:	ldr	r0, [sp, #132]	; 0x84
   17e8c:	adc	r0, r1, r0
   17e90:	str	r0, [sp, #132]	; 0x84
   17e94:	eor	r1, r0, r4
   17e98:	eor	r0, r2, r6
   17e9c:	mov	r2, #63	; 0x3f
   17ea0:	bl	18c30 <__assert_fail@plt+0x78b4>
   17ea4:	str	r0, [sp, #16]
   17ea8:	str	r1, [sp, #8]
   17eac:	ldr	r0, [sp, #244]	; 0xf4
   17eb0:	ldr	r5, [sp, #72]	; 0x48
   17eb4:	adds	r0, r5, r0
   17eb8:	ldr	r1, [sp, #240]	; 0xf0
   17ebc:	ldr	r7, [sp, #64]	; 0x40
   17ec0:	adc	r1, r7, r1
   17ec4:	ldr	r2, [sp, #40]	; 0x28
   17ec8:	adds	sl, r0, r2
   17ecc:	ldr	r0, [sp, #48]	; 0x30
   17ed0:	adc	r8, r1, r0
   17ed4:	ldr	r0, [sp, #144]	; 0x90
   17ed8:	eor	r1, r8, r0
   17edc:	ldr	r0, [sp, #148]	; 0x94
   17ee0:	eor	r0, sl, r0
   17ee4:	mov	r2, #32
   17ee8:	bl	18c30 <__assert_fail@plt+0x78b4>
   17eec:	mov	r4, r0
   17ef0:	mov	r6, r1
   17ef4:	ldr	r0, [sp, #120]	; 0x78
   17ef8:	adds	r9, r4, r0
   17efc:	ldr	r0, [sp, #124]	; 0x7c
   17f00:	adc	r0, r1, r0
   17f04:	str	r0, [sp, #148]	; 0x94
   17f08:	eor	r1, r0, r7
   17f0c:	eor	r0, r9, r5
   17f10:	mov	r2, #24
   17f14:	bl	18c30 <__assert_fail@plt+0x78b4>
   17f18:	mov	r7, r0
   17f1c:	mov	r5, r1
   17f20:	ldr	r0, [sp, #260]	; 0x104
   17f24:	adds	r0, sl, r0
   17f28:	ldr	r1, [sp, #256]	; 0x100
   17f2c:	adc	r1, r8, r1
   17f30:	adds	r2, r0, r7
   17f34:	str	r2, [sp, #44]	; 0x2c
   17f38:	adc	r0, r1, r5
   17f3c:	str	r0, [sp, #48]	; 0x30
   17f40:	eor	r1, r0, r6
   17f44:	eor	r0, r2, r4
   17f48:	mov	r2, #16
   17f4c:	bl	18c30 <__assert_fail@plt+0x78b4>
   17f50:	mov	r4, r0
   17f54:	mov	r6, r1
   17f58:	adds	r2, r0, r9
   17f5c:	str	r2, [sp, #120]	; 0x78
   17f60:	ldr	r0, [sp, #148]	; 0x94
   17f64:	adc	r0, r1, r0
   17f68:	str	r0, [sp, #124]	; 0x7c
   17f6c:	eor	r1, r0, r5
   17f70:	eor	r0, r2, r7
   17f74:	mov	r2, #63	; 0x3f
   17f78:	bl	18c30 <__assert_fail@plt+0x78b4>
   17f7c:	str	r0, [sp, #12]
   17f80:	str	r1, [sp, #4]
   17f84:	ldr	r8, [sp]
   17f88:	eor	r1, r6, r8
   17f8c:	ldr	sl, [sp, #20]
   17f90:	eor	r0, r4, sl
   17f94:	mov	r2, #32
   17f98:	bl	18c30 <__assert_fail@plt+0x78b4>
   17f9c:	mov	r4, r0
   17fa0:	mov	r5, r1
   17fa4:	ldr	r0, [sp, #128]	; 0x80
   17fa8:	adds	r2, r4, r0
   17fac:	str	r2, [sp, #128]	; 0x80
   17fb0:	ldr	r0, [sp, #132]	; 0x84
   17fb4:	adc	r9, r1, r0
   17fb8:	ldr	r0, [sp, #24]
   17fbc:	eor	r1, r9, r0
   17fc0:	ldr	r0, [sp, #28]
   17fc4:	eor	r0, r2, r0
   17fc8:	mov	r2, #24
   17fcc:	bl	18c30 <__assert_fail@plt+0x78b4>
   17fd0:	mov	r6, r0
   17fd4:	mov	r7, r1
   17fd8:	ldr	r0, [sp, #212]	; 0xd4
   17fdc:	adds	r0, sl, r0
   17fe0:	ldr	r1, [sp, #208]	; 0xd0
   17fe4:	adc	r1, r8, r1
   17fe8:	adds	r2, r0, r6
   17fec:	str	r2, [sp, #52]	; 0x34
   17ff0:	adc	r0, r1, r7
   17ff4:	str	r0, [sp, #68]	; 0x44
   17ff8:	eor	r1, r0, r5
   17ffc:	eor	r0, r2, r4
   18000:	mov	r2, #16
   18004:	bl	18c30 <__assert_fail@plt+0x78b4>
   18008:	mov	r2, r0
   1800c:	str	r0, [sp, #148]	; 0x94
   18010:	mov	r3, r1
   18014:	str	r1, [sp, #144]	; 0x90
   18018:	ldr	r0, [sp, #128]	; 0x80
   1801c:	adds	r5, r2, r0
   18020:	str	r5, [sp, #128]	; 0x80
   18024:	adc	r0, r1, r9
   18028:	str	r0, [sp, #132]	; 0x84
   1802c:	eor	r1, r0, r7
   18030:	eor	r0, r5, r6
   18034:	str	r3, [sp, #412]	; 0x19c
   18038:	str	r2, [sp, #408]	; 0x198
   1803c:	mov	r2, #63	; 0x3f
   18040:	bl	18c30 <__assert_fail@plt+0x78b4>
   18044:	str	r0, [sp, #76]	; 0x4c
   18048:	str	r1, [sp, #72]	; 0x48
   1804c:	ldr	r0, [sp, #188]	; 0xbc
   18050:	ldr	r1, [sp, #56]	; 0x38
   18054:	adds	r0, r1, r0
   18058:	ldr	r1, [sp, #184]	; 0xb8
   1805c:	ldr	r2, [sp, #60]	; 0x3c
   18060:	adc	r1, r2, r1
   18064:	ldr	r6, [sp, #16]
   18068:	adds	r8, r0, r6
   1806c:	ldr	r7, [sp, #8]
   18070:	adc	r9, r1, r7
   18074:	ldr	r0, [sp, #96]	; 0x60
   18078:	eor	r1, r9, r0
   1807c:	ldr	r0, [sp, #100]	; 0x64
   18080:	eor	r0, r8, r0
   18084:	mov	r2, #32
   18088:	bl	18c30 <__assert_fail@plt+0x78b4>
   1808c:	mov	r4, r0
   18090:	mov	r5, r1
   18094:	ldr	r0, [sp, #120]	; 0x78
   18098:	adds	sl, r4, r0
   1809c:	ldr	r0, [sp, #124]	; 0x7c
   180a0:	adc	r0, r1, r0
   180a4:	str	r0, [sp, #124]	; 0x7c
   180a8:	eor	r1, r0, r7
   180ac:	eor	r0, sl, r6
   180b0:	mov	r2, #24
   180b4:	bl	18c30 <__assert_fail@plt+0x78b4>
   180b8:	mov	r7, r0
   180bc:	mov	r6, r1
   180c0:	ldr	r0, [sp, #236]	; 0xec
   180c4:	adds	r0, r8, r0
   180c8:	ldr	r1, [sp, #232]	; 0xe8
   180cc:	adc	r1, r9, r1
   180d0:	adds	r2, r0, r7
   180d4:	str	r2, [sp, #60]	; 0x3c
   180d8:	adc	r0, r1, r6
   180dc:	str	r0, [sp, #64]	; 0x40
   180e0:	eor	r1, r0, r5
   180e4:	eor	r0, r2, r4
   180e8:	mov	r2, #16
   180ec:	bl	18c30 <__assert_fail@plt+0x78b4>
   180f0:	str	r0, [sp, #40]	; 0x28
   180f4:	str	r1, [sp, #28]
   180f8:	adds	r2, r0, sl
   180fc:	str	r2, [sp, #120]	; 0x78
   18100:	ldr	r0, [sp, #124]	; 0x7c
   18104:	adc	r0, r1, r0
   18108:	str	r0, [sp, #124]	; 0x7c
   1810c:	eor	r1, r0, r6
   18110:	eor	r0, r2, r7
   18114:	mov	r2, #63	; 0x3f
   18118:	bl	18c30 <__assert_fail@plt+0x78b4>
   1811c:	str	r0, [sp, #100]	; 0x64
   18120:	str	r1, [sp, #96]	; 0x60
   18124:	ldr	r0, [sp, #220]	; 0xdc
   18128:	ldr	r1, [sp, #32]
   1812c:	adds	r0, r1, r0
   18130:	ldr	r1, [sp, #216]	; 0xd8
   18134:	ldr	r2, [sp, #36]	; 0x24
   18138:	adc	r1, r2, r1
   1813c:	ldr	r5, [sp, #12]
   18140:	adds	r8, r0, r5
   18144:	ldr	r7, [sp, #4]
   18148:	adc	r9, r1, r7
   1814c:	ldr	r0, [sp, #88]	; 0x58
   18150:	eor	r1, r9, r0
   18154:	ldr	r0, [sp, #92]	; 0x5c
   18158:	eor	r0, r8, r0
   1815c:	mov	r2, #32
   18160:	bl	18c30 <__assert_fail@plt+0x78b4>
   18164:	mov	r4, r0
   18168:	mov	r6, r1
   1816c:	ldr	r0, [sp, #112]	; 0x70
   18170:	adds	sl, r4, r0
   18174:	ldr	r0, [sp, #116]	; 0x74
   18178:	adc	r0, r1, r0
   1817c:	str	r0, [sp, #116]	; 0x74
   18180:	eor	r1, r0, r7
   18184:	eor	r0, sl, r5
   18188:	mov	r2, #24
   1818c:	bl	18c30 <__assert_fail@plt+0x78b4>
   18190:	mov	r5, r0
   18194:	mov	r7, r1
   18198:	ldr	r0, [sp, #196]	; 0xc4
   1819c:	adds	r0, r8, r0
   181a0:	ldr	r1, [sp, #192]	; 0xc0
   181a4:	adc	r1, r9, r1
   181a8:	adds	r2, r0, r5
   181ac:	str	r2, [sp, #88]	; 0x58
   181b0:	adc	r0, r1, r7
   181b4:	str	r0, [sp, #92]	; 0x5c
   181b8:	eor	r1, r0, r6
   181bc:	eor	r0, r2, r4
   181c0:	mov	r2, #16
   181c4:	bl	18c30 <__assert_fail@plt+0x78b4>
   181c8:	str	r0, [sp, #36]	; 0x24
   181cc:	str	r1, [sp, #32]
   181d0:	adds	r2, r0, sl
   181d4:	str	r2, [sp, #20]
   181d8:	ldr	r0, [sp, #116]	; 0x74
   181dc:	adc	r0, r1, r0
   181e0:	str	r0, [sp, #24]
   181e4:	eor	r1, r0, r7
   181e8:	eor	r0, r2, r5
   181ec:	mov	r2, #63	; 0x3f
   181f0:	bl	18c30 <__assert_fail@plt+0x78b4>
   181f4:	str	r0, [sp, #116]	; 0x74
   181f8:	str	r1, [sp, #112]	; 0x70
   181fc:	ldr	r0, [sp, #172]	; 0xac
   18200:	ldr	r4, [sp, #136]	; 0x88
   18204:	adds	r0, r4, r0
   18208:	ldr	r1, [sp, #168]	; 0xa8
   1820c:	ldr	r6, [sp, #140]	; 0x8c
   18210:	adc	r1, r6, r1
   18214:	ldr	r2, [sp, #44]	; 0x2c
   18218:	adds	sl, r0, r2
   1821c:	ldr	r0, [sp, #48]	; 0x30
   18220:	adc	r9, r1, r0
   18224:	ldr	r0, [sp, #80]	; 0x50
   18228:	eor	r1, r9, r0
   1822c:	ldr	r0, [sp, #84]	; 0x54
   18230:	eor	r0, sl, r0
   18234:	mov	r2, #32
   18238:	bl	18c30 <__assert_fail@plt+0x78b4>
   1823c:	mov	r5, r0
   18240:	mov	r7, r1
   18244:	ldr	r0, [sp, #104]	; 0x68
   18248:	adds	r2, r5, r0
   1824c:	ldr	r0, [sp, #108]	; 0x6c
   18250:	adc	r0, r1, r0
   18254:	str	r0, [sp, #104]	; 0x68
   18258:	eor	r1, r0, r6
   1825c:	eor	r0, r2, r4
   18260:	mov	r6, r2
   18264:	mov	r2, #24
   18268:	bl	18c30 <__assert_fail@plt+0x78b4>
   1826c:	mov	r8, r0
   18270:	mov	r4, r1
   18274:	ldr	r0, [sp, #180]	; 0xb4
   18278:	adds	r0, sl, r0
   1827c:	ldr	r1, [sp, #176]	; 0xb0
   18280:	adc	r1, r9, r1
   18284:	adds	r2, r0, r8
   18288:	str	r2, [sp, #84]	; 0x54
   1828c:	adc	r0, r1, r4
   18290:	str	r0, [sp, #108]	; 0x6c
   18294:	eor	r1, r0, r7
   18298:	eor	r0, r2, r5
   1829c:	mov	r2, #16
   182a0:	bl	18c30 <__assert_fail@plt+0x78b4>
   182a4:	str	r0, [sp, #56]	; 0x38
   182a8:	str	r1, [sp, #48]	; 0x30
   182ac:	adds	r2, r0, r6
   182b0:	str	r2, [sp, #80]	; 0x50
   182b4:	ldr	r0, [sp, #104]	; 0x68
   182b8:	adc	r0, r1, r0
   182bc:	str	r0, [sp, #104]	; 0x68
   182c0:	eor	r1, r0, r4
   182c4:	eor	r0, r2, r8
   182c8:	mov	r2, #63	; 0x3f
   182cc:	bl	18c30 <__assert_fail@plt+0x78b4>
   182d0:	mov	r4, r0
   182d4:	mov	r7, r1
   182d8:	ldr	r0, [sp, #172]	; 0xac
   182dc:	ldr	r1, [sp, #52]	; 0x34
   182e0:	adds	r0, r1, r0
   182e4:	ldr	r1, [sp, #168]	; 0xa8
   182e8:	ldr	r2, [sp, #68]	; 0x44
   182ec:	adc	r1, r2, r1
   182f0:	adds	r8, r0, r4
   182f4:	adc	r9, r1, r7
   182f8:	ldr	r0, [sp, #28]
   182fc:	eor	r1, r9, r0
   18300:	ldr	r0, [sp, #40]	; 0x28
   18304:	eor	r0, r8, r0
   18308:	mov	r2, #32
   1830c:	bl	18c30 <__assert_fail@plt+0x78b4>
   18310:	mov	r5, r0
   18314:	mov	r6, r1
   18318:	ldr	r0, [sp, #20]
   1831c:	adds	sl, r5, r0
   18320:	ldr	r0, [sp, #24]
   18324:	adc	r0, r1, r0
   18328:	str	r0, [sp, #172]	; 0xac
   1832c:	eor	r1, r0, r7
   18330:	eor	r0, sl, r4
   18334:	mov	r2, #24
   18338:	bl	18c30 <__assert_fail@plt+0x78b4>
   1833c:	mov	r4, r0
   18340:	mov	r7, r1
   18344:	ldr	r0, [sp, #188]	; 0xbc
   18348:	adds	r0, r8, r0
   1834c:	ldr	r1, [sp, #184]	; 0xb8
   18350:	adc	r1, r9, r1
   18354:	adds	r2, r0, r4
   18358:	str	r2, [sp, #52]	; 0x34
   1835c:	adc	r0, r1, r7
   18360:	str	r0, [sp, #68]	; 0x44
   18364:	eor	r1, r0, r6
   18368:	eor	r0, r2, r5
   1836c:	mov	r2, #16
   18370:	bl	18c30 <__assert_fail@plt+0x78b4>
   18374:	str	r0, [sp, #140]	; 0x8c
   18378:	str	r1, [sp, #136]	; 0x88
   1837c:	adds	r2, r0, sl
   18380:	str	r2, [sp, #168]	; 0xa8
   18384:	ldr	r0, [sp, #172]	; 0xac
   18388:	adc	r0, r1, r0
   1838c:	str	r0, [sp, #172]	; 0xac
   18390:	eor	r1, r0, r7
   18394:	eor	r0, r2, r4
   18398:	mov	r2, #63	; 0x3f
   1839c:	bl	18c30 <__assert_fail@plt+0x78b4>
   183a0:	mov	r2, r0
   183a4:	str	r0, [sp, #184]	; 0xb8
   183a8:	mov	r3, r1
   183ac:	str	r1, [sp, #188]	; 0xbc
   183b0:	ldr	r0, [sp, #228]	; 0xe4
   183b4:	ldr	r6, [sp, #76]	; 0x4c
   183b8:	adds	r0, r6, r0
   183bc:	ldr	r1, [sp, #224]	; 0xe0
   183c0:	ldr	r7, [sp, #72]	; 0x48
   183c4:	adc	r1, r7, r1
   183c8:	ldr	r5, [sp, #60]	; 0x3c
   183cc:	adds	sl, r0, r5
   183d0:	ldr	r0, [sp, #64]	; 0x40
   183d4:	adc	r8, r1, r0
   183d8:	ldr	r0, [sp, #32]
   183dc:	eor	r1, r0, r8
   183e0:	ldr	r0, [sp, #36]	; 0x24
   183e4:	eor	r0, r0, sl
   183e8:	str	r3, [sp, #324]	; 0x144
   183ec:	str	r2, [sp, #320]	; 0x140
   183f0:	mov	r2, #32
   183f4:	bl	18c30 <__assert_fail@plt+0x78b4>
   183f8:	mov	r4, r0
   183fc:	mov	r5, r1
   18400:	ldr	r0, [sp, #80]	; 0x50
   18404:	adds	r9, r4, r0
   18408:	ldr	r0, [sp, #104]	; 0x68
   1840c:	adc	r0, r1, r0
   18410:	str	r0, [sp, #228]	; 0xe4
   18414:	eor	r1, r0, r7
   18418:	eor	r0, r9, r6
   1841c:	mov	r2, #24
   18420:	bl	18c30 <__assert_fail@plt+0x78b4>
   18424:	mov	r6, r0
   18428:	mov	r7, r1
   1842c:	ldr	r0, [sp, #204]	; 0xcc
   18430:	adds	r0, sl, r0
   18434:	ldr	r1, [sp, #200]	; 0xc8
   18438:	adc	r1, r8, r1
   1843c:	adds	r2, r0, r6
   18440:	str	r2, [sp, #80]	; 0x50
   18444:	adc	r0, r1, r7
   18448:	str	r0, [sp, #104]	; 0x68
   1844c:	eor	r1, r0, r5
   18450:	eor	r0, r2, r4
   18454:	mov	r2, #16
   18458:	bl	18c30 <__assert_fail@plt+0x78b4>
   1845c:	str	r0, [sp, #204]	; 0xcc
   18460:	str	r1, [sp, #200]	; 0xc8
   18464:	adds	r2, r0, r9
   18468:	str	r2, [sp, #224]	; 0xe0
   1846c:	ldr	r0, [sp, #228]	; 0xe4
   18470:	adc	r0, r1, r0
   18474:	str	r0, [sp, #228]	; 0xe4
   18478:	eor	r1, r0, r7
   1847c:	eor	r0, r2, r6
   18480:	mov	r2, #63	; 0x3f
   18484:	bl	18c30 <__assert_fail@plt+0x78b4>
   18488:	mov	r2, r0
   1848c:	str	r0, [sp, #76]	; 0x4c
   18490:	mov	r3, r1
   18494:	str	r1, [sp, #72]	; 0x48
   18498:	ldr	r0, [sp, #252]	; 0xfc
   1849c:	ldr	r1, [sp, #52]	; 0x34
   184a0:	adds	r0, r1, r0
   184a4:	ldr	r1, [sp, #248]	; 0xf8
   184a8:	ldr	r7, [sp, #68]	; 0x44
   184ac:	adc	r1, r7, r1
   184b0:	adds	r0, r0, r2
   184b4:	str	r0, [sp, #68]	; 0x44
   184b8:	adc	r0, r1, r3
   184bc:	str	r0, [sp, #64]	; 0x40
   184c0:	ldr	r0, [sp, #212]	; 0xd4
   184c4:	ldr	r4, [sp, #100]	; 0x64
   184c8:	adds	r0, r4, r0
   184cc:	ldr	r1, [sp, #208]	; 0xd0
   184d0:	ldr	r7, [sp, #96]	; 0x60
   184d4:	adc	r1, r7, r1
   184d8:	ldr	r2, [sp, #88]	; 0x58
   184dc:	adds	r8, r0, r2
   184e0:	ldr	r0, [sp, #92]	; 0x5c
   184e4:	adc	r9, r1, r0
   184e8:	ldr	r0, [sp, #48]	; 0x30
   184ec:	eor	r1, r0, r9
   184f0:	ldr	r0, [sp, #56]	; 0x38
   184f4:	eor	r0, r0, r8
   184f8:	mov	r2, #32
   184fc:	bl	18c30 <__assert_fail@plt+0x78b4>
   18500:	mov	r5, r0
   18504:	mov	r6, r1
   18508:	ldr	r0, [sp, #128]	; 0x80
   1850c:	adds	sl, r5, r0
   18510:	ldr	r0, [sp, #132]	; 0x84
   18514:	adc	r0, r1, r0
   18518:	str	r0, [sp, #132]	; 0x84
   1851c:	eor	r1, r0, r7
   18520:	eor	r0, sl, r4
   18524:	mov	r2, #24
   18528:	bl	18c30 <__assert_fail@plt+0x78b4>
   1852c:	mov	r7, r0
   18530:	mov	r4, r1
   18534:	ldr	r0, [sp, #180]	; 0xb4
   18538:	adds	r0, r8, r0
   1853c:	ldr	r1, [sp, #176]	; 0xb0
   18540:	adc	r1, r9, r1
   18544:	adds	r2, r0, r7
   18548:	str	r2, [sp, #208]	; 0xd0
   1854c:	adc	r0, r1, r4
   18550:	str	r0, [sp, #212]	; 0xd4
   18554:	eor	r1, r0, r6
   18558:	eor	r0, r2, r5
   1855c:	mov	r2, #16
   18560:	bl	18c30 <__assert_fail@plt+0x78b4>
   18564:	str	r0, [sp, #252]	; 0xfc
   18568:	str	r1, [sp, #248]	; 0xf8
   1856c:	adds	r2, r0, sl
   18570:	str	r2, [sp, #128]	; 0x80
   18574:	ldr	r0, [sp, #132]	; 0x84
   18578:	adc	r0, r1, r0
   1857c:	str	r0, [sp, #132]	; 0x84
   18580:	eor	r1, r0, r4
   18584:	eor	r0, r2, r7
   18588:	mov	r2, #63	; 0x3f
   1858c:	bl	18c30 <__assert_fail@plt+0x78b4>
   18590:	str	r0, [sp, #180]	; 0xb4
   18594:	str	r1, [sp, #176]	; 0xb0
   18598:	ldr	r0, [sp, #196]	; 0xc4
   1859c:	ldr	r7, [sp, #116]	; 0x74
   185a0:	adds	r0, r7, r0
   185a4:	ldr	r1, [sp, #192]	; 0xc0
   185a8:	ldr	r5, [sp, #112]	; 0x70
   185ac:	adc	r1, r5, r1
   185b0:	ldr	r2, [sp, #84]	; 0x54
   185b4:	adds	sl, r0, r2
   185b8:	ldr	r0, [sp, #108]	; 0x6c
   185bc:	adc	r9, r1, r0
   185c0:	ldr	r0, [sp, #144]	; 0x90
   185c4:	eor	r1, r9, r0
   185c8:	ldr	r0, [sp, #148]	; 0x94
   185cc:	eor	r0, sl, r0
   185d0:	mov	r2, #32
   185d4:	bl	18c30 <__assert_fail@plt+0x78b4>
   185d8:	mov	r4, r0
   185dc:	mov	r6, r1
   185e0:	ldr	r0, [sp, #120]	; 0x78
   185e4:	adds	r2, r4, r0
   185e8:	ldr	r0, [sp, #124]	; 0x7c
   185ec:	adc	r0, r1, r0
   185f0:	str	r0, [sp, #196]	; 0xc4
   185f4:	eor	r1, r0, r5
   185f8:	eor	r0, r2, r7
   185fc:	mov	r5, r2
   18600:	mov	r2, #24
   18604:	bl	18c30 <__assert_fail@plt+0x78b4>
   18608:	mov	r7, r0
   1860c:	mov	r8, r1
   18610:	ldr	r0, [sp, #244]	; 0xf4
   18614:	adds	r0, sl, r0
   18618:	ldr	r1, [sp, #240]	; 0xf0
   1861c:	adc	r1, r9, r1
   18620:	adds	r2, r0, r7
   18624:	str	r2, [sp, #240]	; 0xf0
   18628:	adc	r0, r1, r8
   1862c:	str	r0, [sp, #244]	; 0xf4
   18630:	eor	r1, r0, r6
   18634:	eor	r0, r2, r4
   18638:	mov	r2, #16
   1863c:	bl	18c30 <__assert_fail@plt+0x78b4>
   18640:	mov	r4, r0
   18644:	mov	r6, r1
   18648:	adds	r2, r0, r5
   1864c:	str	r2, [sp, #144]	; 0x90
   18650:	ldr	r0, [sp, #196]	; 0xc4
   18654:	adc	r0, r1, r0
   18658:	str	r0, [sp, #148]	; 0x94
   1865c:	eor	r1, r0, r8
   18660:	eor	r0, r2, r7
   18664:	mov	r2, #63	; 0x3f
   18668:	bl	18c30 <__assert_fail@plt+0x78b4>
   1866c:	str	r0, [sp, #196]	; 0xc4
   18670:	str	r1, [sp, #192]	; 0xc0
   18674:	ldr	sl, [sp, #64]	; 0x40
   18678:	eor	r1, r6, sl
   1867c:	ldr	r7, [sp, #68]	; 0x44
   18680:	eor	r0, r4, r7
   18684:	mov	r2, #32
   18688:	bl	18c30 <__assert_fail@plt+0x78b4>
   1868c:	mov	r4, r0
   18690:	mov	r6, r1
   18694:	ldr	r0, [sp, #128]	; 0x80
   18698:	adds	r9, r4, r0
   1869c:	ldr	r0, [sp, #132]	; 0x84
   186a0:	adc	r1, r1, r0
   186a4:	str	r1, [sp, #132]	; 0x84
   186a8:	ldr	r0, [sp, #72]	; 0x48
   186ac:	eor	r1, r1, r0
   186b0:	ldr	r0, [sp, #76]	; 0x4c
   186b4:	eor	r0, r9, r0
   186b8:	mov	r2, #24
   186bc:	bl	18c30 <__assert_fail@plt+0x78b4>
   186c0:	mov	r8, r0
   186c4:	mov	r5, r1
   186c8:	ldr	r0, [sp, #220]	; 0xdc
   186cc:	adds	r0, r7, r0
   186d0:	ldr	r1, [sp, #216]	; 0xd8
   186d4:	adc	r1, sl, r1
   186d8:	adds	r0, r0, r8
   186dc:	adc	r1, r1, r5
   186e0:	str	r1, [sp, #292]	; 0x124
   186e4:	eor	r1, r1, r6
   186e8:	str	r0, [sp, #288]	; 0x120
   186ec:	eor	r0, r0, r4
   186f0:	mov	r2, #16
   186f4:	bl	18c30 <__assert_fail@plt+0x78b4>
   186f8:	adds	r2, r0, r9
   186fc:	str	r1, [sp, #412]	; 0x19c
   18700:	str	r0, [sp, #408]	; 0x198
   18704:	ldr	r0, [sp, #132]	; 0x84
   18708:	adc	r0, r1, r0
   1870c:	str	r0, [sp, #372]	; 0x174
   18710:	eor	r1, r0, r5
   18714:	str	r2, [sp, #368]	; 0x170
   18718:	eor	r0, r2, r8
   1871c:	mov	r2, #63	; 0x3f
   18720:	bl	18c30 <__assert_fail@plt+0x78b4>
   18724:	str	r1, [sp, #332]	; 0x14c
   18728:	str	r0, [sp, #328]	; 0x148
   1872c:	ldr	r0, [sp, #164]	; 0xa4
   18730:	ldr	r1, [sp, #80]	; 0x50
   18734:	adds	r0, r1, r0
   18738:	ldr	r1, [sp, #160]	; 0xa0
   1873c:	ldr	r2, [sp, #104]	; 0x68
   18740:	adc	r1, r2, r1
   18744:	ldr	r7, [sp, #180]	; 0xb4
   18748:	adds	r8, r0, r7
   1874c:	ldr	r6, [sp, #176]	; 0xb0
   18750:	adc	sl, r1, r6
   18754:	ldr	r0, [sp, #136]	; 0x88
   18758:	eor	r1, sl, r0
   1875c:	ldr	r0, [sp, #140]	; 0x8c
   18760:	eor	r0, r8, r0
   18764:	mov	r2, #32
   18768:	bl	18c30 <__assert_fail@plt+0x78b4>
   1876c:	mov	r4, r0
   18770:	mov	r5, r1
   18774:	ldr	r0, [sp, #144]	; 0x90
   18778:	adds	r2, r4, r0
   1877c:	ldr	r0, [sp, #148]	; 0x94
   18780:	adc	r0, r1, r0
   18784:	str	r0, [sp, #220]	; 0xdc
   18788:	eor	r1, r0, r6
   1878c:	eor	r0, r2, r7
   18790:	mov	r6, r2
   18794:	mov	r2, #24
   18798:	bl	18c30 <__assert_fail@plt+0x78b4>
   1879c:	mov	r9, r0
   187a0:	mov	r7, r1
   187a4:	ldr	r0, [sp, #276]	; 0x114
   187a8:	adds	r0, r8, r0
   187ac:	ldr	r1, [sp, #272]	; 0x110
   187b0:	adc	r1, sl, r1
   187b4:	adds	r0, r0, r9
   187b8:	adc	r1, r1, r7
   187bc:	str	r1, [sp, #300]	; 0x12c
   187c0:	eor	r1, r1, r5
   187c4:	str	r0, [sp, #296]	; 0x128
   187c8:	eor	r0, r0, r4
   187cc:	mov	r2, #16
   187d0:	bl	18c30 <__assert_fail@plt+0x78b4>
   187d4:	adds	r2, r0, r6
   187d8:	str	r1, [sp, #388]	; 0x184
   187dc:	str	r0, [sp, #384]	; 0x180
   187e0:	ldr	r0, [sp, #220]	; 0xdc
   187e4:	adc	r0, r1, r0
   187e8:	str	r0, [sp, #380]	; 0x17c
   187ec:	eor	r1, r0, r7
   187f0:	str	r2, [sp, #376]	; 0x178
   187f4:	eor	r0, r2, r9
   187f8:	mov	r2, #63	; 0x3f
   187fc:	bl	18c30 <__assert_fail@plt+0x78b4>
   18800:	str	r1, [sp, #340]	; 0x154
   18804:	str	r0, [sp, #336]	; 0x150
   18808:	ldr	r0, [sp, #236]	; 0xec
   1880c:	ldr	r1, [sp, #208]	; 0xd0
   18810:	adds	r0, r1, r0
   18814:	ldr	r1, [sp, #232]	; 0xe8
   18818:	ldr	r2, [sp, #212]	; 0xd4
   1881c:	adc	r1, r2, r1
   18820:	ldr	r7, [sp, #196]	; 0xc4
   18824:	adds	sl, r0, r7
   18828:	ldr	r6, [sp, #192]	; 0xc0
   1882c:	adc	r9, r1, r6
   18830:	ldr	r0, [sp, #200]	; 0xc8
   18834:	eor	r1, r9, r0
   18838:	ldr	r0, [sp, #204]	; 0xcc
   1883c:	eor	r0, sl, r0
   18840:	mov	r2, #32
   18844:	bl	18c30 <__assert_fail@plt+0x78b4>
   18848:	mov	r4, r0
   1884c:	mov	r5, r1
   18850:	ldr	r0, [sp, #168]	; 0xa8
   18854:	adds	r2, r4, r0
   18858:	ldr	r0, [sp, #172]	; 0xac
   1885c:	adc	r0, r1, r0
   18860:	str	r0, [sp, #276]	; 0x114
   18864:	eor	r1, r0, r6
   18868:	eor	r0, r2, r7
   1886c:	mov	r6, r2
   18870:	mov	r2, #24
   18874:	bl	18c30 <__assert_fail@plt+0x78b4>
   18878:	mov	r8, r0
   1887c:	mov	r7, r1
   18880:	ldr	r0, [sp, #260]	; 0x104
   18884:	adds	r0, sl, r0
   18888:	ldr	r1, [sp, #256]	; 0x100
   1888c:	adc	r1, r9, r1
   18890:	adds	r0, r0, r8
   18894:	adc	r1, r1, r7
   18898:	str	r1, [sp, #308]	; 0x134
   1889c:	eor	r1, r1, r5
   188a0:	str	r0, [sp, #304]	; 0x130
   188a4:	eor	r0, r0, r4
   188a8:	mov	r2, #16
   188ac:	bl	18c30 <__assert_fail@plt+0x78b4>
   188b0:	adds	r2, r0, r6
   188b4:	str	r1, [sp, #396]	; 0x18c
   188b8:	str	r0, [sp, #392]	; 0x188
   188bc:	ldr	r0, [sp, #276]	; 0x114
   188c0:	adc	r0, r1, r0
   188c4:	str	r0, [sp, #356]	; 0x164
   188c8:	eor	r1, r0, r7
   188cc:	str	r2, [sp, #352]	; 0x160
   188d0:	eor	r0, r2, r8
   188d4:	mov	r2, #63	; 0x3f
   188d8:	bl	18c30 <__assert_fail@plt+0x78b4>
   188dc:	ldr	r2, [sp, #156]	; 0x9c
   188e0:	strd	r0, [r2]
   188e4:	ldr	r0, [sp, #268]	; 0x10c
   188e8:	ldr	r7, [sp, #184]	; 0xb8
   188ec:	adds	r0, r7, r0
   188f0:	ldr	r1, [sp, #264]	; 0x108
   188f4:	ldr	r6, [sp, #188]	; 0xbc
   188f8:	adc	r1, r6, r1
   188fc:	ldr	r2, [sp, #240]	; 0xf0
   18900:	adds	sl, r0, r2
   18904:	ldr	r0, [sp, #244]	; 0xf4
   18908:	adc	r9, r1, r0
   1890c:	ldr	r0, [sp, #248]	; 0xf8
   18910:	eor	r1, r9, r0
   18914:	ldr	r0, [sp, #252]	; 0xfc
   18918:	eor	r0, sl, r0
   1891c:	mov	r2, #32
   18920:	bl	18c30 <__assert_fail@plt+0x78b4>
   18924:	mov	r4, r0
   18928:	mov	r5, r1
   1892c:	ldr	r0, [sp, #224]	; 0xe0
   18930:	adds	r2, r4, r0
   18934:	ldr	r0, [sp, #228]	; 0xe4
   18938:	adc	r0, r1, r0
   1893c:	str	r0, [sp, #276]	; 0x114
   18940:	eor	r1, r0, r6
   18944:	eor	r0, r2, r7
   18948:	mov	r6, r2
   1894c:	mov	r2, #24
   18950:	bl	18c30 <__assert_fail@plt+0x78b4>
   18954:	mov	r8, r0
   18958:	mov	r7, r1
   1895c:	ldr	r0, [sp, #284]	; 0x11c
   18960:	adds	r0, sl, r0
   18964:	ldr	r1, [sp, #280]	; 0x118
   18968:	adc	r1, r9, r1
   1896c:	adds	r0, r0, r8
   18970:	adc	r1, r1, r7
   18974:	str	r1, [sp, #316]	; 0x13c
   18978:	eor	r1, r1, r5
   1897c:	str	r0, [sp, #312]	; 0x138
   18980:	eor	r0, r0, r4
   18984:	mov	r2, #16
   18988:	bl	18c30 <__assert_fail@plt+0x78b4>
   1898c:	str	r1, [sp, #404]	; 0x194
   18990:	str	r0, [sp, #400]	; 0x190
   18994:	adds	r0, r0, r6
   18998:	str	r0, [sp, #360]	; 0x168
   1899c:	ldr	r2, [sp, #276]	; 0x114
   189a0:	adc	r1, r1, r2
   189a4:	str	r1, [sp, #364]	; 0x16c
   189a8:	eor	r1, r1, r7
   189ac:	eor	r0, r0, r8
   189b0:	ldr	r8, [sp, #152]	; 0x98
   189b4:	mov	r2, #63	; 0x3f
   189b8:	bl	18c30 <__assert_fail@plt+0x78b4>
   189bc:	add	r6, sp, #288	; 0x120
   189c0:	str	r1, [sp, #324]	; 0x144
   189c4:	str	r0, [sp, #320]	; 0x140
   189c8:	mov	r0, #0
   189cc:	mov	r1, r8
   189d0:	ldr	r2, [r1, r0]!
   189d4:	ldr	r3, [r6, r0]
   189d8:	eor	r2, r3, r2
   189dc:	add	r3, r6, r0
   189e0:	ldr	r7, [r3, #4]
   189e4:	ldrd	r4, [r3, #64]	; 0x40
   189e8:	eor	r2, r2, r4
   189ec:	str	r2, [r1]
   189f0:	ldr	r2, [r1, #4]
   189f4:	eor	r2, r7, r2
   189f8:	eor	r2, r2, r5
   189fc:	str	r2, [r1, #4]
   18a00:	add	r0, r0, #8
   18a04:	cmp	r0, #64	; 0x40
   18a08:	bne	189cc <__assert_fail@plt+0x7650>
   18a0c:	sub	sp, fp, #28
   18a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a18:	add	fp, sp, #24
   18a1c:	sub	sp, sp, #64	; 0x40
   18a20:	mov	r4, r1
   18a24:	mov	r5, r0
   18a28:	vmov.i32	q8, #0	; 0x00000000
   18a2c:	mov	r0, #48	; 0x30
   18a30:	mov	r7, sp
   18a34:	mov	r1, r7
   18a38:	vst1.64	{d16-d17}, [r1], r0
   18a3c:	vst1.64	{d16-d17}, [r1]
   18a40:	add	r0, r7, #32
   18a44:	vst1.64	{d16-d17}, [r0]
   18a48:	add	r0, r7, #16
   18a4c:	vst1.64	{d16-d17}, [r0]
   18a50:	mvn	r6, #0
   18a54:	cmp	r4, #0
   18a58:	beq	18afc <__assert_fail@plt+0x7780>
   18a5c:	ldr	r0, [r5, #228]	; 0xe4
   18a60:	cmp	r0, r2
   18a64:	bhi	18afc <__assert_fail@plt+0x7780>
   18a68:	mov	r0, r5
   18a6c:	bl	18b08 <__assert_fail@plt+0x778c>
   18a70:	cmp	r0, #0
   18a74:	bne	18afc <__assert_fail@plt+0x7780>
   18a78:	ldr	r2, [r5, #224]	; 0xe0
   18a7c:	mov	r6, #0
   18a80:	mov	r0, r5
   18a84:	mov	r3, #0
   18a88:	bl	1346c <__assert_fail@plt+0x20f0>
   18a8c:	mov	r0, r5
   18a90:	bl	18b18 <__assert_fail@plt+0x779c>
   18a94:	ldr	r1, [r5, #224]	; 0xe0
   18a98:	add	r8, r5, #96	; 0x60
   18a9c:	add	r0, r8, r1
   18aa0:	rsb	r2, r1, #128	; 0x80
   18aa4:	mov	r1, #0
   18aa8:	bl	11280 <memset@plt>
   18aac:	mov	r0, r5
   18ab0:	mov	r1, r8
   18ab4:	bl	1349c <__assert_fail@plt+0x2120>
   18ab8:	add	r0, r7, r6
   18abc:	mov	r1, r5
   18ac0:	ldr	r2, [r1, r6]!
   18ac4:	ldr	r3, [r1, #4]
   18ac8:	bl	18b44 <__assert_fail@plt+0x77c8>
   18acc:	add	r6, r6, #8
   18ad0:	cmp	r6, #64	; 0x40
   18ad4:	bne	18ab8 <__assert_fail@plt+0x773c>
   18ad8:	ldr	r2, [r5, #228]	; 0xe4
   18adc:	mov	r5, sp
   18ae0:	mov	r0, r4
   18ae4:	mov	r1, r5
   18ae8:	bl	11124 <memcpy@plt>
   18aec:	mov	r0, r5
   18af0:	mov	r1, #64	; 0x40
   18af4:	bl	13454 <__assert_fail@plt+0x20d8>
   18af8:	mov	r6, #0
   18afc:	mov	r0, r6
   18b00:	sub	sp, fp, #24
   18b04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b08:	ldrd	r0, [r0, #80]	; 0x50
   18b0c:	orrs	r0, r0, r1
   18b10:	movwne	r0, #1
   18b14:	bx	lr
   18b18:	push	{r4, sl, fp, lr}
   18b1c:	add	fp, sp, #8
   18b20:	mov	r4, r0
   18b24:	ldrb	r0, [r0, #232]	; 0xe8
   18b28:	cmp	r0, #0
   18b2c:	movne	r0, r4
   18b30:	blne	18c90 <__assert_fail@plt+0x7914>
   18b34:	mvn	r0, #0
   18b38:	str	r0, [r4, #80]	; 0x50
   18b3c:	str	r0, [r4, #84]	; 0x54
   18b40:	pop	{r4, sl, fp, pc}
   18b44:	str	r3, [r0, #4]
   18b48:	str	r2, [r0]
   18b4c:	bx	lr
   18b50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b54:	add	fp, sp, #24
   18b58:	sub	sp, sp, #240	; 0xf0
   18b5c:	mov	r6, r0
   18b60:	cmp	r3, #0
   18b64:	mov	r0, r3
   18b68:	movwne	r0, #1
   18b6c:	mvn	r4, #0
   18b70:	cmp	r6, #0
   18b74:	beq	18bb4 <__assert_fail@plt+0x7838>
   18b78:	mov	r5, r2
   18b7c:	mov	r8, r1
   18b80:	clz	r1, r2
   18b84:	lsr	r1, r1, #5
   18b88:	ands	r0, r1, r0
   18b8c:	bne	18bb4 <__assert_fail@plt+0x7838>
   18b90:	mov	r7, r3
   18b94:	ldr	r3, [fp, #12]
   18b98:	cmp	r3, #0
   18b9c:	mov	r0, r3
   18ba0:	movwne	r0, #1
   18ba4:	cmp	r3, #64	; 0x40
   18ba8:	subls	r1, r8, #1
   18bac:	cmpls	r1, #63	; 0x3f
   18bb0:	bls	18bc0 <__assert_fail@plt+0x7844>
   18bb4:	mov	r0, r4
   18bb8:	sub	sp, fp, #24
   18bbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bc0:	ldr	r2, [fp, #8]
   18bc4:	clz	r1, r2
   18bc8:	lsr	r1, r1, #5
   18bcc:	ands	r0, r1, r0
   18bd0:	bne	18bb4 <__assert_fail@plt+0x7838>
   18bd4:	mov	r0, sp
   18bd8:	mov	r1, r8
   18bdc:	cmp	r3, #0
   18be0:	beq	18bf4 <__assert_fail@plt+0x7878>
   18be4:	bl	1326c <__assert_fail@plt+0x1ef0>
   18be8:	cmp	r0, #0
   18bec:	bge	18c00 <__assert_fail@plt+0x7884>
   18bf0:	b	18bb4 <__assert_fail@plt+0x7838>
   18bf4:	bl	131dc <__assert_fail@plt+0x1e60>
   18bf8:	cmp	r0, #0
   18bfc:	blt	18bb4 <__assert_fail@plt+0x7838>
   18c00:	mov	r4, sp
   18c04:	mov	r0, r4
   18c08:	mov	r1, r5
   18c0c:	mov	r2, r7
   18c10:	bl	1334c <__assert_fail@plt+0x1fd0>
   18c14:	mov	r0, r4
   18c18:	mov	r1, r6
   18c1c:	mov	r2, r8
   18c20:	bl	18a14 <__assert_fail@plt+0x7698>
   18c24:	mov	r4, #0
   18c28:	b	18bb4 <__assert_fail@plt+0x7838>
   18c2c:	b	18b50 <__assert_fail@plt+0x77d4>
   18c30:	push	{r4, r5, fp, lr}
   18c34:	add	fp, sp, #8
   18c38:	lsr	ip, r0, r2
   18c3c:	rsb	r3, r2, #32
   18c40:	orr	ip, ip, r1, lsl r3
   18c44:	sub	lr, r2, #32
   18c48:	cmp	lr, #0
   18c4c:	lsrge	ip, r1, lr
   18c50:	rsb	r4, r2, #64	; 0x40
   18c54:	lsl	r5, r0, r4
   18c58:	cmp	r3, #0
   18c5c:	movwge	r5, #0
   18c60:	orr	ip, r5, ip
   18c64:	rsb	r5, r4, #32
   18c68:	lsr	r5, r0, r5
   18c6c:	orr	r4, r5, r1, lsl r4
   18c70:	cmp	r3, #0
   18c74:	lslge	r4, r0, r3
   18c78:	lsr	r0, r1, r2
   18c7c:	cmp	lr, #0
   18c80:	movwge	r0, #0
   18c84:	orr	r1, r4, r0
   18c88:	mov	r0, ip
   18c8c:	pop	{r4, r5, fp, pc}
   18c90:	mvn	r1, #0
   18c94:	str	r1, [r0, #88]	; 0x58
   18c98:	str	r1, [r0, #92]	; 0x5c
   18c9c:	bx	lr
   18ca0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ca4:	add	fp, sp, #24
   18ca8:	sub	sp, sp, #248	; 0xf8
   18cac:	mov	r9, r2
   18cb0:	mov	r8, r1
   18cb4:	mov	r7, r0
   18cb8:	mov	r0, #32768	; 0x8000
   18cbc:	bl	1bcec <__assert_fail@plt+0xa970>
   18cc0:	cmp	r0, #0
   18cc4:	beq	18d30 <__assert_fail@plt+0x79b4>
   18cc8:	mov	r5, r0
   18ccc:	mov	r4, sp
   18cd0:	mov	r0, r4
   18cd4:	mov	r1, r9
   18cd8:	bl	131dc <__assert_fail@plt+0x1e60>
   18cdc:	b	18cf0 <__assert_fail@plt+0x7974>
   18ce0:	mov	r0, r4
   18ce4:	mov	r1, r5
   18ce8:	mov	r2, #32768	; 0x8000
   18cec:	bl	1334c <__assert_fail@plt+0x1fd0>
   18cf0:	mov	r6, #0
   18cf4:	add	r0, r5, r6
   18cf8:	rsb	r2, r6, #32768	; 0x8000
   18cfc:	mov	r1, #1
   18d00:	mov	r3, r7
   18d04:	bl	1119c <fread@plt>
   18d08:	add	r6, r0, r6
   18d0c:	cmp	r6, #32768	; 0x8000
   18d10:	beq	18ce0 <__assert_fail@plt+0x7964>
   18d14:	cmp	r0, #0
   18d18:	beq	18d38 <__assert_fail@plt+0x79bc>
   18d1c:	mov	r0, r7
   18d20:	bl	11238 <feof@plt>
   18d24:	cmp	r0, #0
   18d28:	beq	18cf4 <__assert_fail@plt+0x7978>
   18d2c:	b	18d4c <__assert_fail@plt+0x79d0>
   18d30:	mvn	r4, #0
   18d34:	b	18d80 <__assert_fail@plt+0x7a04>
   18d38:	mov	r0, r7
   18d3c:	bl	1110c <ferror@plt>
   18d40:	mvn	r4, #0
   18d44:	cmp	r0, #0
   18d48:	bne	18d78 <__assert_fail@plt+0x79fc>
   18d4c:	cmp	r6, #0
   18d50:	beq	18d64 <__assert_fail@plt+0x79e8>
   18d54:	mov	r0, sp
   18d58:	mov	r1, r5
   18d5c:	mov	r2, r6
   18d60:	bl	1334c <__assert_fail@plt+0x1fd0>
   18d64:	mov	r0, sp
   18d68:	mov	r1, r8
   18d6c:	mov	r2, r9
   18d70:	bl	18a14 <__assert_fail@plt+0x7698>
   18d74:	mov	r4, #0
   18d78:	mov	r0, r5
   18d7c:	bl	19090 <__assert_fail@plt+0x7d14>
   18d80:	mov	r0, r4
   18d84:	sub	sp, fp, #24
   18d88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18d8c:	movw	r1, #57764	; 0xe1a4
   18d90:	movt	r1, #2
   18d94:	str	r0, [r1]
   18d98:	bx	lr
   18d9c:	movw	r1, #57768	; 0xe1a8
   18da0:	movt	r1, #2
   18da4:	strb	r0, [r1]
   18da8:	bx	lr
   18dac:	push	{r4, r5, r6, sl, fp, lr}
   18db0:	add	fp, sp, #16
   18db4:	sub	sp, sp, #8
   18db8:	movw	r0, #57724	; 0xe17c
   18dbc:	movt	r0, #2
   18dc0:	ldr	r0, [r0]
   18dc4:	bl	1c094 <__assert_fail@plt+0xad18>
   18dc8:	cmp	r0, #0
   18dcc:	beq	18df4 <__assert_fail@plt+0x7a78>
   18dd0:	movw	r0, #57768	; 0xe1a8
   18dd4:	movt	r0, #2
   18dd8:	ldrb	r0, [r0]
   18ddc:	cmp	r0, #0
   18de0:	beq	18e14 <__assert_fail@plt+0x7a98>
   18de4:	bl	1125c <__errno_location@plt>
   18de8:	ldr	r0, [r0]
   18dec:	cmp	r0, #32
   18df0:	bne	18e14 <__assert_fail@plt+0x7a98>
   18df4:	movw	r0, #57712	; 0xe170
   18df8:	movt	r0, #2
   18dfc:	ldr	r0, [r0]
   18e00:	bl	1c094 <__assert_fail@plt+0xad18>
   18e04:	cmp	r0, #0
   18e08:	subeq	sp, fp, #16
   18e0c:	popeq	{r4, r5, r6, sl, fp, pc}
   18e10:	b	18e84 <__assert_fail@plt+0x7b08>
   18e14:	movw	r1, #54675	; 0xd593
   18e18:	movt	r1, #1
   18e1c:	mov	r0, #0
   18e20:	mov	r2, #5
   18e24:	bl	11148 <dcgettext@plt>
   18e28:	mov	r4, r0
   18e2c:	movw	r0, #57764	; 0xe1a4
   18e30:	movt	r0, #2
   18e34:	ldr	r6, [r0]
   18e38:	bl	1125c <__errno_location@plt>
   18e3c:	ldr	r5, [r0]
   18e40:	cmp	r6, #0
   18e44:	bne	18e60 <__assert_fail@plt+0x7ae4>
   18e48:	movw	r2, #52598	; 0xcd76
   18e4c:	movt	r2, #1
   18e50:	mov	r0, #0
   18e54:	mov	r1, r5
   18e58:	mov	r3, r4
   18e5c:	b	18e80 <__assert_fail@plt+0x7b04>
   18e60:	mov	r0, r6
   18e64:	bl	1a844 <__assert_fail@plt+0x94c8>
   18e68:	mov	r3, r0
   18e6c:	str	r4, [sp]
   18e70:	movw	r2, #54687	; 0xd59f
   18e74:	movt	r2, #1
   18e78:	mov	r0, #0
   18e7c:	mov	r1, r5
   18e80:	bl	111cc <error@plt>
   18e84:	movw	r0, #57624	; 0xe118
   18e88:	movt	r0, #2
   18e8c:	ldr	r0, [r0]
   18e90:	bl	11118 <_exit@plt>
   18e94:	b	110e8 <posix_fadvise64@plt>
   18e98:	cmp	r0, #0
   18e9c:	bxeq	lr
   18ea0:	push	{r4, sl, fp, lr}
   18ea4:	add	fp, sp, #8
   18ea8:	sub	sp, sp, #16
   18eac:	mov	r4, r1
   18eb0:	bl	11298 <fileno@plt>
   18eb4:	mov	r1, #0
   18eb8:	str	r1, [sp]
   18ebc:	stmib	sp, {r1, r4}
   18ec0:	mov	r2, #0
   18ec4:	mov	r3, #0
   18ec8:	bl	18e94 <__assert_fail@plt+0x7b18>
   18ecc:	sub	sp, fp, #8
   18ed0:	pop	{r4, sl, fp, pc}
   18ed4:	push	{r4, r5, fp, lr}
   18ed8:	add	fp, sp, #8
   18edc:	sub	sp, sp, #8
   18ee0:	mov	r4, r0
   18ee4:	bl	11298 <fileno@plt>
   18ee8:	cmn	r0, #1
   18eec:	ble	18f64 <__assert_fail@plt+0x7be8>
   18ef0:	mov	r0, r4
   18ef4:	bl	111f0 <__freading@plt>
   18ef8:	cmp	r0, #0
   18efc:	beq	18f28 <__assert_fail@plt+0x7bac>
   18f00:	mov	r0, r4
   18f04:	bl	11298 <fileno@plt>
   18f08:	mov	r1, #1
   18f0c:	str	r1, [sp]
   18f10:	mov	r2, #0
   18f14:	mov	r3, #0
   18f18:	bl	11184 <lseek64@plt>
   18f1c:	and	r0, r0, r1
   18f20:	cmn	r0, #1
   18f24:	beq	18f64 <__assert_fail@plt+0x7be8>
   18f28:	mov	r0, r4
   18f2c:	bl	18f74 <__assert_fail@plt+0x7bf8>
   18f30:	cmp	r0, #0
   18f34:	beq	18f64 <__assert_fail@plt+0x7be8>
   18f38:	bl	1125c <__errno_location@plt>
   18f3c:	ldr	r5, [r0]
   18f40:	mov	r0, r4
   18f44:	bl	112bc <fclose@plt>
   18f48:	cmp	r5, #0
   18f4c:	beq	18f5c <__assert_fail@plt+0x7be0>
   18f50:	bl	1125c <__errno_location@plt>
   18f54:	str	r5, [r0]
   18f58:	mvn	r0, #0
   18f5c:	sub	sp, fp, #8
   18f60:	pop	{r4, r5, fp, pc}
   18f64:	mov	r0, r4
   18f68:	sub	sp, fp, #8
   18f6c:	pop	{r4, r5, fp, lr}
   18f70:	b	112bc <fclose@plt>
   18f74:	push	{r4, sl, fp, lr}
   18f78:	add	fp, sp, #8
   18f7c:	mov	r4, r0
   18f80:	cmp	r0, #0
   18f84:	beq	18f9c <__assert_fail@plt+0x7c20>
   18f88:	mov	r0, r4
   18f8c:	bl	111f0 <__freading@plt>
   18f90:	cmp	r0, #0
   18f94:	movne	r0, r4
   18f98:	blne	18fa8 <__assert_fail@plt+0x7c2c>
   18f9c:	mov	r0, r4
   18fa0:	pop	{r4, sl, fp, lr}
   18fa4:	b	110f4 <fflush@plt>
   18fa8:	ldrb	r1, [r0, #1]
   18fac:	tst	r1, #1
   18fb0:	bxeq	lr
   18fb4:	push	{fp, lr}
   18fb8:	mov	fp, sp
   18fbc:	sub	sp, sp, #8
   18fc0:	mov	r1, #1
   18fc4:	str	r1, [sp]
   18fc8:	mov	r2, #0
   18fcc:	mov	r3, #0
   18fd0:	bl	190b8 <__assert_fail@plt+0x7d3c>
   18fd4:	mov	sp, fp
   18fd8:	pop	{fp, pc}
   18fdc:	push	{r4, r5, r6, r7, fp, lr}
   18fe0:	add	fp, sp, #16
   18fe4:	mov	r5, r1
   18fe8:	bl	11310 <fopen64@plt>
   18fec:	mov	r4, #0
   18ff0:	cmp	r0, #0
   18ff4:	beq	19044 <__assert_fail@plt+0x7cc8>
   18ff8:	mov	r6, r0
   18ffc:	bl	11298 <fileno@plt>
   19000:	cmp	r0, #2
   19004:	movhi	r0, r6
   19008:	pophi	{r4, r5, r6, r7, fp, pc}
   1900c:	bl	1ada8 <__assert_fail@plt+0x9a2c>
   19010:	cmn	r0, #1
   19014:	ble	19070 <__assert_fail@plt+0x7cf4>
   19018:	mov	r7, r0
   1901c:	mov	r0, r6
   19020:	bl	18ed4 <__assert_fail@plt+0x7b58>
   19024:	cmp	r0, #0
   19028:	bne	1904c <__assert_fail@plt+0x7cd0>
   1902c:	mov	r0, r7
   19030:	mov	r1, r5
   19034:	bl	110ac <fdopen@plt>
   19038:	mov	r4, r0
   1903c:	cmp	r0, #0
   19040:	beq	1904c <__assert_fail@plt+0x7cd0>
   19044:	mov	r0, r4
   19048:	pop	{r4, r5, r6, r7, fp, pc}
   1904c:	bl	1125c <__errno_location@plt>
   19050:	mov	r4, r0
   19054:	ldr	r5, [r0]
   19058:	mov	r0, r7
   1905c:	bl	11358 <close@plt>
   19060:	str	r5, [r4]
   19064:	mov	r4, #0
   19068:	mov	r0, r4
   1906c:	pop	{r4, r5, r6, r7, fp, pc}
   19070:	bl	1125c <__errno_location@plt>
   19074:	mov	r5, r0
   19078:	ldr	r7, [r0]
   1907c:	mov	r0, r6
   19080:	bl	18ed4 <__assert_fail@plt+0x7b58>
   19084:	str	r7, [r5]
   19088:	mov	r0, r4
   1908c:	pop	{r4, r5, r6, r7, fp, pc}
   19090:	push	{r4, r5, r6, sl, fp, lr}
   19094:	add	fp, sp, #16
   19098:	mov	r4, r0
   1909c:	bl	1125c <__errno_location@plt>
   190a0:	mov	r5, r0
   190a4:	ldr	r6, [r0]
   190a8:	mov	r0, r4
   190ac:	bl	11100 <free@plt>
   190b0:	str	r6, [r5]
   190b4:	pop	{r4, r5, r6, sl, fp, pc}
   190b8:	push	{r4, r5, r6, r7, fp, lr}
   190bc:	add	fp, sp, #16
   190c0:	sub	sp, sp, #8
   190c4:	mov	r5, r3
   190c8:	mov	r6, r2
   190cc:	mov	r4, r0
   190d0:	ldr	r0, [r0, #4]
   190d4:	ldr	r1, [r4, #8]
   190d8:	cmp	r1, r0
   190dc:	bne	190f8 <__assert_fail@plt+0x7d7c>
   190e0:	ldrd	r0, [r4, #16]
   190e4:	cmp	r1, r0
   190e8:	bne	190f8 <__assert_fail@plt+0x7d7c>
   190ec:	ldr	r0, [r4, #36]	; 0x24
   190f0:	cmp	r0, #0
   190f4:	beq	19110 <__assert_fail@plt+0x7d94>
   190f8:	mov	r0, r4
   190fc:	mov	r2, r6
   19100:	mov	r3, r5
   19104:	sub	sp, fp, #16
   19108:	pop	{r4, r5, r6, r7, fp, lr}
   1910c:	b	112c8 <fseeko64@plt>
   19110:	ldr	r7, [fp, #8]
   19114:	mov	r0, r4
   19118:	bl	11298 <fileno@plt>
   1911c:	str	r7, [sp]
   19120:	mov	r2, r6
   19124:	mov	r3, r5
   19128:	bl	11184 <lseek64@plt>
   1912c:	and	r2, r0, r1
   19130:	cmn	r2, #1
   19134:	mvneq	r0, #0
   19138:	subeq	sp, fp, #16
   1913c:	popeq	{r4, r5, r6, r7, fp, pc}
   19140:	strd	r0, [r4, #80]	; 0x50
   19144:	ldr	r0, [r4]
   19148:	bic	r0, r0, #16
   1914c:	str	r0, [r4]
   19150:	mov	r0, #0
   19154:	sub	sp, fp, #16
   19158:	pop	{r4, r5, r6, r7, fp, pc}
   1915c:	push	{r4, r5, fp, lr}
   19160:	add	fp, sp, #8
   19164:	cmp	r0, #0
   19168:	beq	191fc <__assert_fail@plt+0x7e80>
   1916c:	mov	r4, r0
   19170:	mov	r1, #47	; 0x2f
   19174:	bl	112ec <strrchr@plt>
   19178:	cmp	r0, #0
   1917c:	mov	r5, r4
   19180:	addne	r5, r0, #1
   19184:	sub	r0, r5, r4
   19188:	cmp	r0, #7
   1918c:	blt	191e0 <__assert_fail@plt+0x7e64>
   19190:	sub	r0, r5, #7
   19194:	movw	r1, #54750	; 0xd5de
   19198:	movt	r1, #1
   1919c:	mov	r2, #7
   191a0:	bl	11334 <strncmp@plt>
   191a4:	cmp	r0, #0
   191a8:	bne	191e0 <__assert_fail@plt+0x7e64>
   191ac:	movw	r1, #54758	; 0xd5e6
   191b0:	movt	r1, #1
   191b4:	mov	r0, r5
   191b8:	mov	r2, #3
   191bc:	bl	11334 <strncmp@plt>
   191c0:	cmp	r0, #0
   191c4:	beq	191d0 <__assert_fail@plt+0x7e54>
   191c8:	mov	r4, r5
   191cc:	b	191e0 <__assert_fail@plt+0x7e64>
   191d0:	add	r4, r5, #3
   191d4:	movw	r0, #57696	; 0xe160
   191d8:	movt	r0, #2
   191dc:	str	r4, [r0]
   191e0:	movw	r0, #57700	; 0xe164
   191e4:	movt	r0, #2
   191e8:	str	r4, [r0]
   191ec:	movw	r0, #57772	; 0xe1ac
   191f0:	movt	r0, #2
   191f4:	str	r4, [r0]
   191f8:	pop	{r4, r5, fp, pc}
   191fc:	movw	r0, #57712	; 0xe170
   19200:	movt	r0, #2
   19204:	ldr	r3, [r0]
   19208:	movw	r0, #54694	; 0xd5a6
   1920c:	movt	r0, #1
   19210:	mov	r1, #55	; 0x37
   19214:	mov	r2, #1
   19218:	bl	11178 <fwrite@plt>
   1921c:	bl	11340 <abort@plt>
   19220:	push	{r4, r5, r6, sl, fp, lr}
   19224:	add	fp, sp, #16
   19228:	mov	r4, r0
   1922c:	movw	r0, #57776	; 0xe1b0
   19230:	movt	r0, #2
   19234:	cmp	r4, #0
   19238:	moveq	r4, r0
   1923c:	bl	1125c <__errno_location@plt>
   19240:	mov	r5, r0
   19244:	ldr	r6, [r0]
   19248:	mov	r0, r4
   1924c:	mov	r1, #48	; 0x30
   19250:	bl	1b56c <__assert_fail@plt+0xa1f0>
   19254:	str	r6, [r5]
   19258:	pop	{r4, r5, r6, sl, fp, pc}
   1925c:	movw	r1, #57776	; 0xe1b0
   19260:	movt	r1, #2
   19264:	cmp	r0, #0
   19268:	movne	r1, r0
   1926c:	ldr	r0, [r1]
   19270:	bx	lr
   19274:	movw	r2, #57776	; 0xe1b0
   19278:	movt	r2, #2
   1927c:	cmp	r0, #0
   19280:	movne	r2, r0
   19284:	str	r1, [r2]
   19288:	bx	lr
   1928c:	movw	r3, #57776	; 0xe1b0
   19290:	movt	r3, #2
   19294:	cmp	r0, #0
   19298:	movne	r3, r0
   1929c:	ubfx	r0, r1, #5, #3
   192a0:	add	r0, r3, r0, lsl #2
   192a4:	ldr	r3, [r0, #8]
   192a8:	and	r1, r1, #31
   192ac:	eor	r2, r2, r3, lsr r1
   192b0:	and	r2, r2, #1
   192b4:	eor	r2, r3, r2, lsl r1
   192b8:	str	r2, [r0, #8]
   192bc:	mov	r0, #1
   192c0:	and	r0, r0, r3, lsr r1
   192c4:	bx	lr
   192c8:	movw	r2, #57776	; 0xe1b0
   192cc:	movt	r2, #2
   192d0:	cmp	r0, #0
   192d4:	movne	r2, r0
   192d8:	ldr	r0, [r2, #4]
   192dc:	str	r1, [r2, #4]
   192e0:	bx	lr
   192e4:	movw	r3, #57776	; 0xe1b0
   192e8:	movt	r3, #2
   192ec:	cmp	r0, #0
   192f0:	movne	r3, r0
   192f4:	mov	r0, #10
   192f8:	str	r0, [r3]
   192fc:	cmp	r1, #0
   19300:	cmpne	r2, #0
   19304:	bne	19314 <__assert_fail@plt+0x7f98>
   19308:	push	{fp, lr}
   1930c:	mov	fp, sp
   19310:	bl	11340 <abort@plt>
   19314:	str	r1, [r3, #40]	; 0x28
   19318:	str	r2, [r3, #44]	; 0x2c
   1931c:	bx	lr
   19320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19324:	add	fp, sp, #28
   19328:	sub	sp, sp, #20
   1932c:	mov	r8, r3
   19330:	mov	r9, r2
   19334:	mov	sl, r1
   19338:	mov	r7, r0
   1933c:	ldr	r0, [fp, #8]
   19340:	movw	r5, #57776	; 0xe1b0
   19344:	movt	r5, #2
   19348:	cmp	r0, #0
   1934c:	movne	r5, r0
   19350:	bl	1125c <__errno_location@plt>
   19354:	mov	r4, r0
   19358:	ldm	r5, {r0, r1}
   1935c:	ldr	r2, [r5, #40]	; 0x28
   19360:	ldr	r3, [r5, #44]	; 0x2c
   19364:	ldr	r6, [r4]
   19368:	add	r5, r5, #8
   1936c:	stm	sp, {r0, r1, r5}
   19370:	str	r2, [sp, #12]
   19374:	str	r3, [sp, #16]
   19378:	mov	r0, r7
   1937c:	mov	r1, sl
   19380:	mov	r2, r9
   19384:	mov	r3, r8
   19388:	bl	19398 <__assert_fail@plt+0x801c>
   1938c:	str	r6, [r4]
   19390:	sub	sp, fp, #28
   19394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1939c:	add	fp, sp, #28
   193a0:	sub	sp, sp, #156	; 0x9c
   193a4:	mov	r9, r3
   193a8:	str	r2, [fp, #-84]	; 0xffffffac
   193ac:	mov	r6, r1
   193b0:	mov	r7, r0
   193b4:	ldr	r0, [fp, #12]
   193b8:	and	r1, r0, #4
   193bc:	str	r1, [sp, #32]
   193c0:	and	r1, r0, #1
   193c4:	str	r1, [sp, #36]	; 0x24
   193c8:	ubfx	sl, r0, #1, #1
   193cc:	bl	11190 <__ctype_get_mb_cur_max@plt>
   193d0:	str	r0, [sp, #40]	; 0x28
   193d4:	ldr	r0, [fp, #24]
   193d8:	str	r0, [sp, #76]	; 0x4c
   193dc:	ldr	r0, [fp, #20]
   193e0:	str	r0, [sp, #68]	; 0x44
   193e4:	ldr	r0, [fp, #8]
   193e8:	str	r0, [fp, #-60]	; 0xffffffc4
   193ec:	mov	r0, #0
   193f0:	str	r0, [sp, #72]	; 0x48
   193f4:	mov	r0, #0
   193f8:	str	r0, [sp, #92]	; 0x5c
   193fc:	mov	r0, #0
   19400:	str	r0, [fp, #-72]	; 0xffffffb8
   19404:	mov	r0, #0
   19408:	mov	r1, #0
   1940c:	str	r1, [fp, #-56]	; 0xffffffc8
   19410:	mov	r1, #0
   19414:	str	r1, [sp, #56]	; 0x38
   19418:	mov	r5, #1
   1941c:	str	r7, [sp, #80]	; 0x50
   19420:	mov	r4, r6
   19424:	ldr	r6, [fp, #-60]	; 0xffffffc4
   19428:	cmp	r6, #10
   1942c:	bhi	1a394 <__assert_fail@plt+0x9018>
   19430:	add	r1, pc, #20
   19434:	mov	r8, #0
   19438:	mov	r2, #1
   1943c:	mov	r3, #0
   19440:	ldr	ip, [fp, #-84]	; 0xffffffac
   19444:	mov	lr, r9
   19448:	ldr	pc, [r1, r6, lsl #2]
   1944c:	andeq	r9, r1, r4, lsr #10
   19450:	andeq	r9, r1, r4, asr r5
   19454:	andeq	r9, r1, r4, lsl r5
   19458:	andeq	r9, r1, ip, lsl #10
   1945c:	andeq	r9, r1, r8, asr #10
   19460:	andeq	r9, r1, r8, lsr #11
   19464:	andeq	r9, r1, r4, lsr r5
   19468:	andeq	r9, r1, r4, lsl #12
   1946c:	andeq	r9, r1, r8, ror r4
   19470:	andeq	r9, r1, r8, ror r4
   19474:	andeq	r9, r1, r0, lsr #9
   19478:	movw	r0, #54840	; 0xd638
   1947c:	movt	r0, #1
   19480:	mov	r1, r6
   19484:	bl	1a9a0 <__assert_fail@plt+0x9624>
   19488:	str	r0, [sp, #68]	; 0x44
   1948c:	movw	r0, #54842	; 0xd63a
   19490:	movt	r0, #1
   19494:	mov	r1, r6
   19498:	bl	1a9a0 <__assert_fail@plt+0x9624>
   1949c:	str	r0, [sp, #76]	; 0x4c
   194a0:	mov	r8, #0
   194a4:	tst	sl, #1
   194a8:	bne	194e0 <__assert_fail@plt+0x8164>
   194ac:	ldr	r0, [sp, #68]	; 0x44
   194b0:	ldrb	r0, [r0]
   194b4:	cmp	r0, #0
   194b8:	beq	194e0 <__assert_fail@plt+0x8164>
   194bc:	ldr	r1, [sp, #68]	; 0x44
   194c0:	add	r1, r1, #1
   194c4:	mov	r8, #0
   194c8:	cmp	r8, r4
   194cc:	strbcc	r0, [r7, r8]
   194d0:	ldrb	r0, [r1, r8]
   194d4:	add	r8, r8, #1
   194d8:	cmp	r0, #0
   194dc:	bne	194c8 <__assert_fail@plt+0x814c>
   194e0:	ldr	r6, [sp, #76]	; 0x4c
   194e4:	mov	r0, r6
   194e8:	bl	11244 <strlen@plt>
   194ec:	str	r0, [fp, #-72]	; 0xffffffb8
   194f0:	str	r6, [sp, #92]	; 0x5c
   194f4:	mov	r2, #1
   194f8:	mov	r3, sl
   194fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   19500:	mov	lr, r9
   19504:	ldr	r6, [fp, #-60]	; 0xffffffc4
   19508:	b	19604 <__assert_fail@plt+0x8288>
   1950c:	mov	r0, #1
   19510:	b	19554 <__assert_fail@plt+0x81d8>
   19514:	tst	sl, #1
   19518:	bne	19554 <__assert_fail@plt+0x81d8>
   1951c:	mov	r2, r0
   19520:	b	1957c <__assert_fail@plt+0x8200>
   19524:	mov	r6, #0
   19528:	mov	r8, #0
   1952c:	mov	r2, r0
   19530:	b	19600 <__assert_fail@plt+0x8284>
   19534:	mov	r0, #1
   19538:	str	r0, [fp, #-72]	; 0xffffffb8
   1953c:	mov	r8, #0
   19540:	mov	r6, #5
   19544:	b	195c0 <__assert_fail@plt+0x8244>
   19548:	mov	r2, #1
   1954c:	tst	sl, #1
   19550:	beq	1957c <__assert_fail@plt+0x8200>
   19554:	mov	r1, #1
   19558:	str	r1, [fp, #-72]	; 0xffffffb8
   1955c:	mov	r8, #0
   19560:	mov	r6, #2
   19564:	movw	r1, #54842	; 0xd63a
   19568:	movt	r1, #1
   1956c:	str	r1, [sp, #92]	; 0x5c
   19570:	mov	r2, r0
   19574:	mov	r3, #1
   19578:	b	19604 <__assert_fail@plt+0x8288>
   1957c:	mov	r8, #1
   19580:	mov	r6, #2
   19584:	cmp	r4, #0
   19588:	movne	r0, #39	; 0x27
   1958c:	strbne	r0, [r7]
   19590:	movw	r0, #54842	; 0xd63a
   19594:	movt	r0, #1
   19598:	str	r0, [sp, #92]	; 0x5c
   1959c:	mov	r0, #1
   195a0:	str	r0, [fp, #-72]	; 0xffffffb8
   195a4:	b	19600 <__assert_fail@plt+0x8284>
   195a8:	mov	r6, #5
   195ac:	tst	sl, #1
   195b0:	beq	195d8 <__assert_fail@plt+0x825c>
   195b4:	mov	r0, #1
   195b8:	str	r0, [fp, #-72]	; 0xffffffb8
   195bc:	mov	r8, #0
   195c0:	movw	r0, #54838	; 0xd636
   195c4:	movt	r0, #1
   195c8:	str	r0, [sp, #92]	; 0x5c
   195cc:	mov	r2, #1
   195d0:	mov	r3, #1
   195d4:	b	19604 <__assert_fail@plt+0x8288>
   195d8:	cmp	r4, #0
   195dc:	movne	r0, #34	; 0x22
   195e0:	strbne	r0, [r7]
   195e4:	mov	r8, #1
   195e8:	movw	r0, #54838	; 0xd636
   195ec:	movt	r0, #1
   195f0:	str	r0, [sp, #92]	; 0x5c
   195f4:	mov	r0, #1
   195f8:	str	r0, [fp, #-72]	; 0xffffffb8
   195fc:	mov	r2, #1
   19600:	mov	r3, #0
   19604:	ldr	r0, [fp, #16]
   19608:	cmp	r0, #0
   1960c:	movwne	r0, #1
   19610:	and	r0, r0, r3
   19614:	str	r0, [fp, #-88]	; 0xffffffa8
   19618:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1961c:	cmp	r0, #0
   19620:	movwne	r0, #1
   19624:	and	r1, r0, r3
   19628:	and	r1, r2, r1
   1962c:	str	r1, [sp, #48]	; 0x30
   19630:	str	r6, [fp, #-60]	; 0xffffffc4
   19634:	subs	r6, r6, #2
   19638:	clz	r1, r6
   1963c:	lsr	r1, r1, #5
   19640:	and	r1, r1, r3
   19644:	str	r1, [sp, #60]	; 0x3c
   19648:	str	r6, [fp, #-80]	; 0xffffffb0
   1964c:	mov	r1, r6
   19650:	movwne	r1, #1
   19654:	str	r3, [fp, #-76]	; 0xffffffb4
   19658:	eor	r3, r3, #1
   1965c:	str	r3, [sp, #88]	; 0x58
   19660:	orr	r3, r1, r3
   19664:	str	r3, [sp, #64]	; 0x40
   19668:	and	r1, r1, r2
   1966c:	str	r1, [fp, #-68]	; 0xffffffbc
   19670:	and	r0, r0, r1
   19674:	str	r0, [fp, #-64]	; 0xffffffc0
   19678:	str	r2, [sp, #84]	; 0x54
   1967c:	eor	r0, r2, #1
   19680:	str	r0, [sp, #52]	; 0x34
   19684:	mov	r6, #0
   19688:	cmn	lr, #1
   1968c:	beq	1969c <__assert_fail@plt+0x8320>
   19690:	cmp	r6, lr
   19694:	bne	196a8 <__assert_fail@plt+0x832c>
   19698:	b	1a214 <__assert_fail@plt+0x8e98>
   1969c:	ldrb	r0, [ip, r6]
   196a0:	cmp	r0, #0
   196a4:	beq	1a214 <__assert_fail@plt+0x8e98>
   196a8:	str	r5, [fp, #-48]	; 0xffffffd0
   196ac:	mov	sl, #0
   196b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   196b4:	cmp	r0, #0
   196b8:	beq	196ec <__assert_fail@plt+0x8370>
   196bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   196c0:	add	r5, r6, r0
   196c4:	cmp	r0, #2
   196c8:	bcc	196e4 <__assert_fail@plt+0x8368>
   196cc:	cmn	lr, #1
   196d0:	bne	196e4 <__assert_fail@plt+0x8368>
   196d4:	mov	r0, ip
   196d8:	bl	11244 <strlen@plt>
   196dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   196e0:	mov	lr, r0
   196e4:	cmp	r5, lr
   196e8:	bls	196f8 <__assert_fail@plt+0x837c>
   196ec:	mov	r0, #0
   196f0:	str	r0, [fp, #-52]	; 0xffffffcc
   196f4:	b	19744 <__assert_fail@plt+0x83c8>
   196f8:	mov	r5, r4
   196fc:	mov	r4, lr
   19700:	add	r0, ip, r6
   19704:	ldr	r1, [sp, #92]	; 0x5c
   19708:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1970c:	bl	1113c <memcmp@plt>
   19710:	cmp	r0, #0
   19714:	mov	r1, r0
   19718:	movwne	r1, #1
   1971c:	ldr	r2, [sp, #88]	; 0x58
   19720:	orr	r1, r1, r2
   19724:	tst	r1, #1
   19728:	beq	1a2d8 <__assert_fail@plt+0x8f5c>
   1972c:	clz	r0, r0
   19730:	lsr	r0, r0, #5
   19734:	str	r0, [fp, #-52]	; 0xffffffcc
   19738:	ldr	ip, [fp, #-84]	; 0xffffffac
   1973c:	mov	lr, r4
   19740:	mov	r4, r5
   19744:	ldrb	r5, [ip, r6]
   19748:	cmp	r5, #126	; 0x7e
   1974c:	bhi	19b08 <__assert_fail@plt+0x878c>
   19750:	mov	r9, #1
   19754:	mov	r2, #110	; 0x6e
   19758:	mov	r0, #97	; 0x61
   1975c:	add	r3, pc, #4
   19760:	mov	r1, #0
   19764:	ldr	pc, [r3, r5, lsl #2]
   19768:	andeq	r9, r1, r0, lsl #20
   1976c:	andeq	r9, r1, r8, lsl #22
   19770:	andeq	r9, r1, r8, lsl #22
   19774:	andeq	r9, r1, r8, lsl #22
   19778:	andeq	r9, r1, r8, lsl #22
   1977c:	andeq	r9, r1, r8, lsl #22
   19780:	andeq	r9, r1, r8, lsl #22
   19784:	andeq	r9, r1, ip, asr #23
   19788:	andeq	r9, r1, r0, ror #19
   1978c:	ldrdeq	r9, [r1], -r8
   19790:	andeq	r9, r1, ip, ror #19
   19794:	andeq	r9, r1, r0, ror sl
   19798:	ldrdeq	r9, [r1], -r0
   1979c:	andeq	r9, r1, r8, ror #19
   197a0:	andeq	r9, r1, r8, lsl #22
   197a4:	andeq	r9, r1, r8, lsl #22
   197a8:	andeq	r9, r1, r8, lsl #22
   197ac:	andeq	r9, r1, r8, lsl #22
   197b0:	andeq	r9, r1, r8, lsl #22
   197b4:	andeq	r9, r1, r8, lsl #22
   197b8:	andeq	r9, r1, r8, lsl #22
   197bc:	andeq	r9, r1, r8, lsl #22
   197c0:	andeq	r9, r1, r8, lsl #22
   197c4:	andeq	r9, r1, r8, lsl #22
   197c8:	andeq	r9, r1, r8, lsl #22
   197cc:	andeq	r9, r1, r8, lsl #22
   197d0:	andeq	r9, r1, r8, lsl #22
   197d4:	andeq	r9, r1, r8, lsl #22
   197d8:	andeq	r9, r1, r8, lsl #22
   197dc:	andeq	r9, r1, r8, lsl #22
   197e0:	andeq	r9, r1, r8, lsl #22
   197e4:	andeq	r9, r1, r8, lsl #22
   197e8:	andeq	r9, r1, ip, ror fp
   197ec:	andeq	r9, r1, r0, lsl #23
   197f0:	andeq	r9, r1, r0, lsl #23
   197f4:	andeq	r9, r1, r8, ror r9
   197f8:	andeq	r9, r1, r0, lsl #23
   197fc:	andeq	r9, r1, r4, ror #18
   19800:	andeq	r9, r1, r0, lsl #23
   19804:	andeq	r9, r1, r8, ror sl
   19808:	andeq	r9, r1, r0, lsl #23
   1980c:	andeq	r9, r1, r0, lsl #23
   19810:	andeq	r9, r1, r0, lsl #23
   19814:	andeq	r9, r1, r4, ror #18
   19818:	andeq	r9, r1, r4, ror #18
   1981c:	andeq	r9, r1, r4, ror #18
   19820:	andeq	r9, r1, r4, ror #18
   19824:	andeq	r9, r1, r4, ror #18
   19828:	andeq	r9, r1, r4, ror #18
   1982c:	andeq	r9, r1, r4, ror #18
   19830:	andeq	r9, r1, r4, ror #18
   19834:	andeq	r9, r1, r4, ror #18
   19838:	andeq	r9, r1, r4, ror #18
   1983c:	andeq	r9, r1, r4, ror #18
   19840:	andeq	r9, r1, r4, ror #18
   19844:	andeq	r9, r1, r4, ror #18
   19848:	andeq	r9, r1, r4, ror #18
   1984c:	andeq	r9, r1, r4, ror #18
   19850:	andeq	r9, r1, r4, ror #18
   19854:	andeq	r9, r1, r0, lsl #23
   19858:	andeq	r9, r1, r0, lsl #23
   1985c:	andeq	r9, r1, r0, lsl #23
   19860:	andeq	r9, r1, r0, lsl #23
   19864:	andeq	r9, r1, r0, asr #20
   19868:	andeq	r9, r1, r8, lsl #22
   1986c:	andeq	r9, r1, r4, ror #18
   19870:	andeq	r9, r1, r4, ror #18
   19874:	andeq	r9, r1, r4, ror #18
   19878:	andeq	r9, r1, r4, ror #18
   1987c:	andeq	r9, r1, r4, ror #18
   19880:	andeq	r9, r1, r4, ror #18
   19884:	andeq	r9, r1, r4, ror #18
   19888:	andeq	r9, r1, r4, ror #18
   1988c:	andeq	r9, r1, r4, ror #18
   19890:	andeq	r9, r1, r4, ror #18
   19894:	andeq	r9, r1, r4, ror #18
   19898:	andeq	r9, r1, r4, ror #18
   1989c:	andeq	r9, r1, r4, ror #18
   198a0:	andeq	r9, r1, r4, ror #18
   198a4:	andeq	r9, r1, r4, ror #18
   198a8:	andeq	r9, r1, r4, ror #18
   198ac:	andeq	r9, r1, r4, ror #18
   198b0:	andeq	r9, r1, r4, ror #18
   198b4:	andeq	r9, r1, r4, ror #18
   198b8:	andeq	r9, r1, r4, ror #18
   198bc:	andeq	r9, r1, r4, ror #18
   198c0:	andeq	r9, r1, r4, ror #18
   198c4:	andeq	r9, r1, r4, ror #18
   198c8:	andeq	r9, r1, r4, ror #18
   198cc:	andeq	r9, r1, r4, ror #18
   198d0:	andeq	r9, r1, r4, ror #18
   198d4:	andeq	r9, r1, r0, lsl #23
   198d8:	andeq	r9, r1, ip, lsr #19
   198dc:	andeq	r9, r1, r4, ror #18
   198e0:	andeq	r9, r1, r0, lsl #23
   198e4:	andeq	r9, r1, r4, ror #18
   198e8:	andeq	r9, r1, r0, lsl #23
   198ec:	andeq	r9, r1, r4, ror #18
   198f0:	andeq	r9, r1, r4, ror #18
   198f4:	andeq	r9, r1, r4, ror #18
   198f8:	andeq	r9, r1, r4, ror #18
   198fc:	andeq	r9, r1, r4, ror #18
   19900:	andeq	r9, r1, r4, ror #18
   19904:	andeq	r9, r1, r4, ror #18
   19908:	andeq	r9, r1, r4, ror #18
   1990c:	andeq	r9, r1, r4, ror #18
   19910:	andeq	r9, r1, r4, ror #18
   19914:	andeq	r9, r1, r4, ror #18
   19918:	andeq	r9, r1, r4, ror #18
   1991c:	andeq	r9, r1, r4, ror #18
   19920:	andeq	r9, r1, r4, ror #18
   19924:	andeq	r9, r1, r4, ror #18
   19928:	andeq	r9, r1, r4, ror #18
   1992c:	andeq	r9, r1, r4, ror #18
   19930:	andeq	r9, r1, r4, ror #18
   19934:	andeq	r9, r1, r4, ror #18
   19938:	andeq	r9, r1, r4, ror #18
   1993c:	andeq	r9, r1, r4, ror #18
   19940:	andeq	r9, r1, r4, ror #18
   19944:	andeq	r9, r1, r4, ror #18
   19948:	andeq	r9, r1, r4, ror #18
   1994c:	andeq	r9, r1, r4, ror #18
   19950:	andeq	r9, r1, r4, ror #18
   19954:	andeq	r9, r1, ip, lsl #19
   19958:	andeq	r9, r1, r0, lsl #23
   1995c:	andeq	r9, r1, ip, lsl #19
   19960:	andeq	r9, r1, r8, ror r9
   19964:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19968:	cmp	r0, #0
   1996c:	beq	19be0 <__assert_fail@plt+0x8864>
   19970:	ldr	r0, [fp, #16]
   19974:	b	19be4 <__assert_fail@plt+0x8868>
   19978:	mov	r9, #0
   1997c:	cmp	r6, #0
   19980:	beq	19b7c <__assert_fail@plt+0x8800>
   19984:	mov	sl, #0
   19988:	b	19964 <__assert_fail@plt+0x85e8>
   1998c:	mov	r9, #0
   19990:	cmn	lr, #1
   19994:	beq	19b60 <__assert_fail@plt+0x87e4>
   19998:	cmp	r6, #0
   1999c:	bne	19984 <__assert_fail@plt+0x8608>
   199a0:	cmp	lr, #1
   199a4:	beq	19b7c <__assert_fail@plt+0x8800>
   199a8:	b	19984 <__assert_fail@plt+0x8608>
   199ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   199b0:	cmp	r0, #2
   199b4:	bne	19ba8 <__assert_fail@plt+0x882c>
   199b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   199bc:	tst	r0, #1
   199c0:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   199c4:	mov	sl, #0
   199c8:	mov	r0, #92	; 0x5c
   199cc:	b	19bbc <__assert_fail@plt+0x8840>
   199d0:	mov	r0, #102	; 0x66
   199d4:	b	19bcc <__assert_fail@plt+0x8850>
   199d8:	mov	r2, #116	; 0x74
   199dc:	b	199ec <__assert_fail@plt+0x8670>
   199e0:	mov	r0, #98	; 0x62
   199e4:	b	19bcc <__assert_fail@plt+0x8850>
   199e8:	mov	r2, #114	; 0x72
   199ec:	ldr	r0, [sp, #64]	; 0x40
   199f0:	tst	r0, #1
   199f4:	mov	r0, r2
   199f8:	bne	19bcc <__assert_fail@plt+0x8850>
   199fc:	b	1a2f0 <__assert_fail@plt+0x8f74>
   19a00:	ldr	r0, [sp, #84]	; 0x54
   19a04:	tst	r0, #1
   19a08:	beq	19cbc <__assert_fail@plt+0x8940>
   19a0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19a10:	tst	r0, #1
   19a14:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   19a18:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19a1c:	cmp	r0, #2
   19a20:	ldr	r0, [fp, #-80]	; 0xffffffb0
   19a24:	movwne	r0, #1
   19a28:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19a2c:	orr	r0, r0, r2
   19a30:	tst	r0, #1
   19a34:	beq	1a0b0 <__assert_fail@plt+0x8d34>
   19a38:	mov	r0, r8
   19a3c:	b	1a0e4 <__assert_fail@plt+0x8d68>
   19a40:	mov	sl, #0
   19a44:	mov	r5, #63	; 0x3f
   19a48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19a4c:	cmp	r0, #5
   19a50:	beq	19e70 <__assert_fail@plt+0x8af4>
   19a54:	cmp	r0, #2
   19a58:	bne	19f10 <__assert_fail@plt+0x8b94>
   19a5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19a60:	tst	r0, #1
   19a64:	mov	r9, #0
   19a68:	beq	19964 <__assert_fail@plt+0x85e8>
   19a6c:	b	1a2f0 <__assert_fail@plt+0x8f74>
   19a70:	mov	r0, #118	; 0x76
   19a74:	b	19bcc <__assert_fail@plt+0x8850>
   19a78:	mov	r5, #39	; 0x27
   19a7c:	mov	r0, #1
   19a80:	str	r0, [sp, #56]	; 0x38
   19a84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19a88:	cmp	r0, #2
   19a8c:	bne	19cdc <__assert_fail@plt+0x8960>
   19a90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19a94:	tst	r0, #1
   19a98:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   19a9c:	ldr	r2, [sp, #72]	; 0x48
   19aa0:	cmp	r2, #0
   19aa4:	mov	r0, r2
   19aa8:	movwne	r0, #1
   19aac:	clz	r1, r4
   19ab0:	lsr	r1, r1, #5
   19ab4:	orrs	r0, r0, r1
   19ab8:	moveq	r2, r4
   19abc:	str	r2, [sp, #72]	; 0x48
   19ac0:	moveq	r4, r0
   19ac4:	cmp	r8, r4
   19ac8:	movcc	r0, #39	; 0x27
   19acc:	strbcc	r0, [r7, r8]
   19ad0:	add	r0, r8, #1
   19ad4:	cmp	r0, r4
   19ad8:	movcc	r1, #92	; 0x5c
   19adc:	strbcc	r1, [r7, r0]
   19ae0:	add	r0, r8, #2
   19ae4:	cmp	r0, r4
   19ae8:	movcc	r1, #39	; 0x27
   19aec:	strbcc	r1, [r7, r0]
   19af0:	add	r8, r8, #3
   19af4:	mov	r0, #0
   19af8:	str	r0, [fp, #-56]	; 0xffffffc8
   19afc:	mov	sl, #0
   19b00:	mov	r9, #1
   19b04:	b	19964 <__assert_fail@plt+0x85e8>
   19b08:	str	r4, [sp, #24]
   19b0c:	ldr	r0, [sp, #40]	; 0x28
   19b10:	cmp	r0, #1
   19b14:	bne	19ce4 <__assert_fail@plt+0x8968>
   19b18:	str	lr, [sp, #28]
   19b1c:	bl	11220 <__ctype_b_loc@plt>
   19b20:	ldr	ip, [fp, #-84]	; 0xffffffac
   19b24:	ldr	r0, [r0]
   19b28:	add	r0, r0, r5, lsl #1
   19b2c:	ldrb	r0, [r0, #1]
   19b30:	ubfx	r9, r0, #6, #1
   19b34:	mov	r1, #1
   19b38:	ldr	r4, [sp, #24]
   19b3c:	ldr	r0, [sp, #52]	; 0x34
   19b40:	orr	r0, r9, r0
   19b44:	mov	r2, r1
   19b48:	cmp	r1, #1
   19b4c:	bhi	19f18 <__assert_fail@plt+0x8b9c>
   19b50:	tst	r0, #1
   19b54:	beq	19f18 <__assert_fail@plt+0x8b9c>
   19b58:	ldr	lr, [sp, #28]
   19b5c:	b	19964 <__assert_fail@plt+0x85e8>
   19b60:	cmp	r6, #0
   19b64:	ldrbeq	r0, [ip, #1]
   19b68:	cmpeq	r0, #0
   19b6c:	beq	19b7c <__assert_fail@plt+0x8800>
   19b70:	mvn	lr, #0
   19b74:	mov	sl, #0
   19b78:	b	19964 <__assert_fail@plt+0x85e8>
   19b7c:	mov	r1, #1
   19b80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19b84:	cmp	r0, #2
   19b88:	bne	19ba0 <__assert_fail@plt+0x8824>
   19b8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19b90:	tst	r0, #1
   19b94:	mov	r9, r1
   19b98:	beq	19964 <__assert_fail@plt+0x85e8>
   19b9c:	b	1a2f0 <__assert_fail@plt+0x8f74>
   19ba0:	mov	r9, r1
   19ba4:	b	19964 <__assert_fail@plt+0x85e8>
   19ba8:	mov	sl, #0
   19bac:	mov	r0, #92	; 0x5c
   19bb0:	ldr	r1, [sp, #48]	; 0x30
   19bb4:	cmp	r1, #0
   19bb8:	beq	19bcc <__assert_fail@plt+0x8850>
   19bbc:	mov	r9, #0
   19bc0:	cmp	sl, #0
   19bc4:	beq	1a17c <__assert_fail@plt+0x8e00>
   19bc8:	b	1a1b8 <__assert_fail@plt+0x8e3c>
   19bcc:	mov	r9, #0
   19bd0:	ldr	r1, [sp, #84]	; 0x54
   19bd4:	tst	r1, #1
   19bd8:	mov	sl, #0
   19bdc:	bne	19c1c <__assert_fail@plt+0x88a0>
   19be0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19be4:	cmp	r0, #0
   19be8:	mov	r0, r5
   19bec:	beq	19c10 <__assert_fail@plt+0x8894>
   19bf0:	ubfx	r0, r5, #5, #3
   19bf4:	ldr	r1, [fp, #16]
   19bf8:	ldr	r0, [r1, r0, lsl #2]
   19bfc:	and	r1, r5, #31
   19c00:	mov	r2, #1
   19c04:	tst	r0, r2, lsl r1
   19c08:	mov	r0, r5
   19c0c:	bne	19c1c <__assert_fail@plt+0x88a0>
   19c10:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19c14:	cmp	r1, #0
   19c18:	beq	1a174 <__assert_fail@plt+0x8df8>
   19c1c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   19c20:	tst	r1, #1
   19c24:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   19c28:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19c2c:	cmp	r1, #2
   19c30:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19c34:	movwne	r1, #1
   19c38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19c3c:	orr	r1, r1, r2
   19c40:	tst	r1, #1
   19c44:	beq	19c50 <__assert_fail@plt+0x88d4>
   19c48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19c4c:	b	19c8c <__assert_fail@plt+0x8910>
   19c50:	cmp	r8, r4
   19c54:	movcc	r1, #39	; 0x27
   19c58:	strbcc	r1, [r7, r8]
   19c5c:	add	r1, r8, #1
   19c60:	cmp	r1, r4
   19c64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19c68:	movcc	r2, #36	; 0x24
   19c6c:	strbcc	r2, [r7, r1]
   19c70:	add	r1, r8, #2
   19c74:	cmp	r1, r4
   19c78:	movcc	r2, #39	; 0x27
   19c7c:	strbcc	r2, [r7, r1]
   19c80:	add	r8, r8, #3
   19c84:	mov	r1, #1
   19c88:	str	r1, [fp, #-56]	; 0xffffffc8
   19c8c:	cmp	r8, r4
   19c90:	movcc	r1, #92	; 0x5c
   19c94:	strbcc	r1, [r7, r8]
   19c98:	add	r8, r8, #1
   19c9c:	cmp	r8, r4
   19ca0:	strbcc	r0, [r7, r8]
   19ca4:	and	r5, r5, r9
   19ca8:	add	r8, r8, #1
   19cac:	add	r6, r6, #1
   19cb0:	cmn	lr, #1
   19cb4:	bne	19690 <__assert_fail@plt+0x8314>
   19cb8:	b	1969c <__assert_fail@plt+0x8320>
   19cbc:	mov	r9, #0
   19cc0:	ldr	r0, [sp, #36]	; 0x24
   19cc4:	cmp	r0, #0
   19cc8:	mov	sl, #0
   19ccc:	mov	r5, #0
   19cd0:	beq	19be0 <__assert_fail@plt+0x8864>
   19cd4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19cd8:	b	19cac <__assert_fail@plt+0x8930>
   19cdc:	mov	r9, #1
   19ce0:	b	19964 <__assert_fail@plt+0x85e8>
   19ce4:	mov	r0, #0
   19ce8:	str	r0, [fp, #-36]	; 0xffffffdc
   19cec:	str	r0, [fp, #-40]	; 0xffffffd8
   19cf0:	cmn	lr, #1
   19cf4:	bne	19d08 <__assert_fail@plt+0x898c>
   19cf8:	mov	r0, ip
   19cfc:	bl	11244 <strlen@plt>
   19d00:	ldr	ip, [fp, #-84]	; 0xffffffac
   19d04:	mov	lr, r0
   19d08:	add	r0, ip, r6
   19d0c:	str	r0, [sp, #20]
   19d10:	mov	r9, #1
   19d14:	mov	r7, #0
   19d18:	sub	r4, fp, #40	; 0x28
   19d1c:	str	lr, [sp, #28]
   19d20:	str	r7, [sp, #44]	; 0x2c
   19d24:	add	r7, r7, r6
   19d28:	add	r1, ip, r7
   19d2c:	sub	r2, lr, r7
   19d30:	sub	r0, fp, #44	; 0x2c
   19d34:	mov	r3, r4
   19d38:	bl	1c388 <__assert_fail@plt+0xb00c>
   19d3c:	cmp	r0, #0
   19d40:	beq	1a200 <__assert_fail@plt+0x8e84>
   19d44:	cmn	r0, #1
   19d48:	beq	1a1c0 <__assert_fail@plt+0x8e44>
   19d4c:	cmn	r0, #2
   19d50:	ldr	lr, [sp, #28]
   19d54:	beq	1a1c8 <__assert_fail@plt+0x8e4c>
   19d58:	cmp	r0, #2
   19d5c:	mov	r1, #0
   19d60:	movwcc	r1, #1
   19d64:	ldr	r2, [sp, #60]	; 0x3c
   19d68:	eor	r2, r2, #1
   19d6c:	orrs	r1, r2, r1
   19d70:	ldr	r4, [sp, #24]
   19d74:	bne	19e34 <__assert_fail@plt+0x8ab8>
   19d78:	ldr	r1, [sp, #44]	; 0x2c
   19d7c:	ldr	r2, [sp, #20]
   19d80:	add	r1, r2, r1
   19d84:	mov	r2, #1
   19d88:	ldrb	r3, [r1, r2]
   19d8c:	sub	r3, r3, #91	; 0x5b
   19d90:	cmp	r3, #33	; 0x21
   19d94:	bhi	19e28 <__assert_fail@plt+0x8aac>
   19d98:	add	r7, pc, #0
   19d9c:	ldr	pc, [r7, r3, lsl #2]
   19da0:	andeq	sl, r1, r8, ror #5
   19da4:	andeq	sl, r1, r8, ror #5
   19da8:	andeq	r9, r1, r8, lsr #28
   19dac:	andeq	sl, r1, r8, ror #5
   19db0:	andeq	r9, r1, r8, lsr #28
   19db4:	andeq	sl, r1, r8, ror #5
   19db8:	andeq	r9, r1, r8, lsr #28
   19dbc:	andeq	r9, r1, r8, lsr #28
   19dc0:	andeq	r9, r1, r8, lsr #28
   19dc4:	andeq	r9, r1, r8, lsr #28
   19dc8:	andeq	r9, r1, r8, lsr #28
   19dcc:	andeq	r9, r1, r8, lsr #28
   19dd0:	andeq	r9, r1, r8, lsr #28
   19dd4:	andeq	r9, r1, r8, lsr #28
   19dd8:	andeq	r9, r1, r8, lsr #28
   19ddc:	andeq	r9, r1, r8, lsr #28
   19de0:	andeq	r9, r1, r8, lsr #28
   19de4:	andeq	r9, r1, r8, lsr #28
   19de8:	andeq	r9, r1, r8, lsr #28
   19dec:	andeq	r9, r1, r8, lsr #28
   19df0:	andeq	r9, r1, r8, lsr #28
   19df4:	andeq	r9, r1, r8, lsr #28
   19df8:	andeq	r9, r1, r8, lsr #28
   19dfc:	andeq	r9, r1, r8, lsr #28
   19e00:	andeq	r9, r1, r8, lsr #28
   19e04:	andeq	r9, r1, r8, lsr #28
   19e08:	andeq	r9, r1, r8, lsr #28
   19e0c:	andeq	r9, r1, r8, lsr #28
   19e10:	andeq	r9, r1, r8, lsr #28
   19e14:	andeq	r9, r1, r8, lsr #28
   19e18:	andeq	r9, r1, r8, lsr #28
   19e1c:	andeq	r9, r1, r8, lsr #28
   19e20:	andeq	r9, r1, r8, lsr #28
   19e24:	andeq	sl, r1, r8, ror #5
   19e28:	add	r2, r2, #1
   19e2c:	cmp	r2, r0
   19e30:	bcc	19d88 <__assert_fail@plt+0x8a0c>
   19e34:	ldr	r7, [sp, #44]	; 0x2c
   19e38:	add	r7, r0, r7
   19e3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19e40:	bl	1116c <iswprint@plt>
   19e44:	cmp	r0, #0
   19e48:	movwne	r0, #1
   19e4c:	and	r9, r9, r0
   19e50:	sub	r4, fp, #40	; 0x28
   19e54:	mov	r0, r4
   19e58:	bl	11130 <mbsinit@plt>
   19e5c:	ldr	lr, [sp, #28]
   19e60:	cmp	r0, #0
   19e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   19e68:	beq	19d20 <__assert_fail@plt+0x89a4>
   19e6c:	b	1a208 <__assert_fail@plt+0x8e8c>
   19e70:	ldr	r0, [sp, #32]
   19e74:	cmp	r0, #0
   19e78:	beq	19f10 <__assert_fail@plt+0x8b94>
   19e7c:	add	r0, r6, #2
   19e80:	cmp	r0, lr
   19e84:	bcs	19f10 <__assert_fail@plt+0x8b94>
   19e88:	add	r1, ip, r6
   19e8c:	ldrb	r1, [r1, #1]
   19e90:	cmp	r1, #63	; 0x3f
   19e94:	bne	19f10 <__assert_fail@plt+0x8b94>
   19e98:	ldrb	r9, [ip, r0]
   19e9c:	sub	r2, r9, #33	; 0x21
   19ea0:	cmp	r2, #29
   19ea4:	bhi	19f10 <__assert_fail@plt+0x8b94>
   19ea8:	mov	r3, #1
   19eac:	movw	r1, #20929	; 0x51c1
   19eb0:	movt	r1, #14336	; 0x3800
   19eb4:	tst	r1, r3, lsl r2
   19eb8:	beq	19f10 <__assert_fail@plt+0x8b94>
   19ebc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   19ec0:	tst	r1, #1
   19ec4:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   19ec8:	cmp	r8, r4
   19ecc:	movcc	r1, #63	; 0x3f
   19ed0:	strbcc	r1, [r7, r8]
   19ed4:	add	r2, r8, #1
   19ed8:	cmp	r2, r4
   19edc:	movcc	r1, #34	; 0x22
   19ee0:	strbcc	r1, [r7, r2]
   19ee4:	add	r2, r8, #2
   19ee8:	cmp	r2, r4
   19eec:	movcc	r1, #34	; 0x22
   19ef0:	strbcc	r1, [r7, r2]
   19ef4:	add	r2, r8, #3
   19ef8:	cmp	r2, r4
   19efc:	movcc	r1, #63	; 0x3f
   19f00:	strbcc	r1, [r7, r2]
   19f04:	add	r8, r8, #4
   19f08:	mov	r6, r0
   19f0c:	mov	r5, r9
   19f10:	mov	r9, #0
   19f14:	b	19964 <__assert_fail@plt+0x85e8>
   19f18:	add	r1, r2, r6
   19f1c:	str	r1, [sp, #44]	; 0x2c
   19f20:	add	r1, r6, #1
   19f24:	mov	r3, #0
   19f28:	ldr	lr, [sp, #28]
   19f2c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   19f30:	tst	r0, #1
   19f34:	bne	1a028 <__assert_fail@plt+0x8cac>
   19f38:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19f3c:	tst	r2, #1
   19f40:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   19f44:	cmp	r6, #2
   19f48:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19f4c:	movwne	r3, #1
   19f50:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19f54:	orr	r3, r3, r2
   19f58:	tst	r3, #1
   19f5c:	bne	19f98 <__assert_fail@plt+0x8c1c>
   19f60:	cmp	r8, r4
   19f64:	movcc	r2, #39	; 0x27
   19f68:	strbcc	r2, [r7, r8]
   19f6c:	add	r3, r8, #1
   19f70:	cmp	r3, r4
   19f74:	movcc	r2, #36	; 0x24
   19f78:	strbcc	r2, [r7, r3]
   19f7c:	add	r3, r8, #2
   19f80:	cmp	r3, r4
   19f84:	movcc	r2, #39	; 0x27
   19f88:	strbcc	r2, [r7, r3]
   19f8c:	add	r8, r8, #3
   19f90:	mov	r2, #1
   19f94:	str	r2, [fp, #-56]	; 0xffffffc8
   19f98:	cmp	r8, r4
   19f9c:	movcc	r2, #92	; 0x5c
   19fa0:	strbcc	r2, [r7, r8]
   19fa4:	add	r3, r8, #1
   19fa8:	cmp	r3, r4
   19fac:	bcs	19fcc <__assert_fail@plt+0x8c50>
   19fb0:	and	r7, r5, #192	; 0xc0
   19fb4:	mov	r2, #48	; 0x30
   19fb8:	orr	r7, r2, r7, lsr #6
   19fbc:	ldr	r6, [sp, #80]	; 0x50
   19fc0:	strb	r7, [r6, r3]
   19fc4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   19fc8:	ldr	r7, [sp, #80]	; 0x50
   19fcc:	add	r3, r8, #2
   19fd0:	cmp	r3, r4
   19fd4:	bcs	19ff4 <__assert_fail@plt+0x8c78>
   19fd8:	lsr	r7, r5, #3
   19fdc:	mov	r2, #6
   19fe0:	bfi	r7, r2, #3, #29
   19fe4:	ldr	r6, [sp, #80]	; 0x50
   19fe8:	strb	r7, [r6, r3]
   19fec:	ldr	r6, [fp, #-60]	; 0xffffffc4
   19ff0:	ldr	r7, [sp, #80]	; 0x50
   19ff4:	mov	r2, #6
   19ff8:	bfi	r5, r2, #3, #29
   19ffc:	add	r8, r8, #3
   1a000:	mov	r3, #1
   1a004:	b	1a04c <__assert_fail@plt+0x8cd0>
   1a008:	ldr	r7, [sp, #80]	; 0x50
   1a00c:	cmp	r8, r4
   1a010:	strbcc	r5, [r7, r8]
   1a014:	ldrb	r5, [ip, r1]
   1a018:	add	r1, r1, #1
   1a01c:	add	r8, r8, #1
   1a020:	tst	r0, #1
   1a024:	beq	19f38 <__assert_fail@plt+0x8bbc>
   1a028:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1a02c:	tst	r2, #1
   1a030:	beq	1a044 <__assert_fail@plt+0x8cc8>
   1a034:	cmp	r8, r4
   1a038:	movcc	r2, #92	; 0x5c
   1a03c:	strbcc	r2, [r7, r8]
   1a040:	add	r8, r8, #1
   1a044:	mov	r2, #0
   1a048:	str	r2, [fp, #-52]	; 0xffffffcc
   1a04c:	and	sl, r3, #1
   1a050:	ldr	r2, [sp, #44]	; 0x2c
   1a054:	cmp	r2, r1
   1a058:	bls	1a164 <__assert_fail@plt+0x8de8>
   1a05c:	cmp	sl, #0
   1a060:	movwne	sl, #1
   1a064:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a068:	mvn	r7, r2
   1a06c:	orr	r7, r7, sl
   1a070:	tst	r7, #1
   1a074:	bne	1a008 <__assert_fail@plt+0x8c8c>
   1a078:	cmp	r8, r4
   1a07c:	ldrcc	r7, [sp, #80]	; 0x50
   1a080:	movcc	r2, #39	; 0x27
   1a084:	strbcc	r2, [r7, r8]
   1a088:	add	r7, r8, #1
   1a08c:	cmp	r7, r4
   1a090:	ldrcc	r6, [sp, #80]	; 0x50
   1a094:	movcc	r2, #39	; 0x27
   1a098:	strbcc	r2, [r6, r7]
   1a09c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   1a0a0:	add	r8, r8, #2
   1a0a4:	mov	r2, #0
   1a0a8:	str	r2, [fp, #-56]	; 0xffffffc8
   1a0ac:	b	1a008 <__assert_fail@plt+0x8c8c>
   1a0b0:	cmp	r8, r4
   1a0b4:	movcc	r0, #39	; 0x27
   1a0b8:	strbcc	r0, [r7, r8]
   1a0bc:	add	r0, r8, #1
   1a0c0:	cmp	r0, r4
   1a0c4:	movcc	r1, #36	; 0x24
   1a0c8:	strbcc	r1, [r7, r0]
   1a0cc:	add	r0, r8, #2
   1a0d0:	cmp	r0, r4
   1a0d4:	movcc	r1, #39	; 0x27
   1a0d8:	strbcc	r1, [r7, r0]
   1a0dc:	add	r0, r8, #3
   1a0e0:	mov	r2, #1
   1a0e4:	cmp	r0, r4
   1a0e8:	movcc	r1, #92	; 0x5c
   1a0ec:	strbcc	r1, [r7, r0]
   1a0f0:	str	r2, [fp, #-56]	; 0xffffffc8
   1a0f4:	add	r8, r0, #1
   1a0f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a0fc:	cmp	r1, #2
   1a100:	beq	1a154 <__assert_fail@plt+0x8dd8>
   1a104:	add	r1, r6, #1
   1a108:	mov	r9, #0
   1a10c:	mov	sl, #1
   1a110:	mov	r5, #48	; 0x30
   1a114:	cmp	r1, lr
   1a118:	bcs	19964 <__assert_fail@plt+0x85e8>
   1a11c:	ldrb	r1, [ip, r1]
   1a120:	sub	r1, r1, #48	; 0x30
   1a124:	uxtb	r1, r1
   1a128:	cmp	r1, #9
   1a12c:	bhi	19964 <__assert_fail@plt+0x85e8>
   1a130:	cmp	r8, r4
   1a134:	movcc	r1, #48	; 0x30
   1a138:	strbcc	r1, [r7, r8]
   1a13c:	add	r1, r0, #2
   1a140:	cmp	r1, r4
   1a144:	movcc	r2, #48	; 0x30
   1a148:	strbcc	r2, [r7, r1]
   1a14c:	add	r8, r0, #3
   1a150:	b	19964 <__assert_fail@plt+0x85e8>
   1a154:	mov	r0, #48	; 0x30
   1a158:	mov	sl, #1
   1a15c:	mov	r9, #0
   1a160:	b	19c10 <__assert_fail@plt+0x8894>
   1a164:	sub	r6, r1, #1
   1a168:	cmp	sl, #0
   1a16c:	movwne	sl, #1
   1a170:	mov	r0, r5
   1a174:	cmp	sl, #0
   1a178:	bne	1a1b8 <__assert_fail@plt+0x8e3c>
   1a17c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1a180:	tst	r1, #1
   1a184:	beq	1a1b8 <__assert_fail@plt+0x8e3c>
   1a188:	cmp	r8, r4
   1a18c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a190:	movcc	r1, #39	; 0x27
   1a194:	strbcc	r1, [r7, r8]
   1a198:	add	r1, r8, #1
   1a19c:	cmp	r1, r4
   1a1a0:	movcc	r2, #39	; 0x27
   1a1a4:	strbcc	r2, [r7, r1]
   1a1a8:	add	r8, r8, #2
   1a1ac:	mov	r1, #0
   1a1b0:	str	r1, [fp, #-56]	; 0xffffffc8
   1a1b4:	b	19c9c <__assert_fail@plt+0x8920>
   1a1b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a1bc:	b	19c9c <__assert_fail@plt+0x8920>
   1a1c0:	mov	r9, #0
   1a1c4:	b	1a200 <__assert_fail@plt+0x8e84>
   1a1c8:	mov	r9, #0
   1a1cc:	cmp	r7, lr
   1a1d0:	bcs	1a200 <__assert_fail@plt+0x8e84>
   1a1d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a1d8:	ldr	r7, [sp, #44]	; 0x2c
   1a1dc:	ldr	r0, [sp, #20]
   1a1e0:	ldrb	r0, [r0, r7]
   1a1e4:	cmp	r0, #0
   1a1e8:	beq	1a208 <__assert_fail@plt+0x8e8c>
   1a1ec:	add	r7, r7, #1
   1a1f0:	add	r0, r6, r7
   1a1f4:	cmp	r0, lr
   1a1f8:	bcc	1a1dc <__assert_fail@plt+0x8e60>
   1a1fc:	b	1a208 <__assert_fail@plt+0x8e8c>
   1a200:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a204:	ldr	r7, [sp, #44]	; 0x2c
   1a208:	mov	r1, r7
   1a20c:	ldr	r7, [sp, #80]	; 0x50
   1a210:	b	19b38 <__assert_fail@plt+0x87bc>
   1a214:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a218:	eor	r0, r1, #2
   1a21c:	orr	r0, r0, r8
   1a220:	clz	r0, r0
   1a224:	lsr	r0, r0, #5
   1a228:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a22c:	tst	r2, r0
   1a230:	bne	1a2f0 <__assert_fail@plt+0x8f74>
   1a234:	cmp	r1, #2
   1a238:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1a23c:	movwne	r0, #1
   1a240:	orr	r0, r2, r0
   1a244:	tst	r0, #1
   1a248:	ldreq	r0, [sp, #56]	; 0x38
   1a24c:	eoreq	r0, r0, #1
   1a250:	tsteq	r0, #1
   1a254:	bne	1a288 <__assert_fail@plt+0x8f0c>
   1a258:	mov	r9, lr
   1a25c:	tst	r5, #1
   1a260:	bne	1a358 <__assert_fail@plt+0x8fdc>
   1a264:	ldr	r0, [sp, #72]	; 0x48
   1a268:	cmp	r0, #0
   1a26c:	beq	1a288 <__assert_fail@plt+0x8f0c>
   1a270:	mov	r5, #0
   1a274:	cmp	r4, #0
   1a278:	ldr	r0, [sp, #84]	; 0x54
   1a27c:	mov	sl, r2
   1a280:	ldr	r6, [sp, #72]	; 0x48
   1a284:	beq	19420 <__assert_fail@plt+0x80a4>
   1a288:	ldr	r1, [sp, #92]	; 0x5c
   1a28c:	clz	r0, r1
   1a290:	lsr	r0, r0, #5
   1a294:	orr	r0, r0, r2
   1a298:	tst	r0, #1
   1a29c:	bne	1a2c8 <__assert_fail@plt+0x8f4c>
   1a2a0:	ldrb	r0, [r1]
   1a2a4:	cmp	r0, #0
   1a2a8:	beq	1a2c8 <__assert_fail@plt+0x8f4c>
   1a2ac:	add	r1, r1, #1
   1a2b0:	cmp	r8, r4
   1a2b4:	strbcc	r0, [r7, r8]
   1a2b8:	add	r8, r8, #1
   1a2bc:	ldrb	r0, [r1], #1
   1a2c0:	cmp	r0, #0
   1a2c4:	bne	1a2b0 <__assert_fail@plt+0x8f34>
   1a2c8:	cmp	r8, r4
   1a2cc:	movcc	r0, #0
   1a2d0:	strbcc	r0, [r7, r8]
   1a2d4:	b	1a34c <__assert_fail@plt+0x8fd0>
   1a2d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a2dc:	mov	lr, r4
   1a2e0:	mov	r4, r5
   1a2e4:	b	1a2f0 <__assert_fail@plt+0x8f74>
   1a2e8:	ldr	r7, [sp, #80]	; 0x50
   1a2ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a2f0:	mov	r0, #0
   1a2f4:	ldr	r1, [fp, #12]
   1a2f8:	bic	r1, r1, #2
   1a2fc:	ldr	r2, [sp, #84]	; 0x54
   1a300:	tst	r2, #1
   1a304:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a308:	mov	r2, r3
   1a30c:	movwne	r2, #4
   1a310:	cmp	r3, #2
   1a314:	movne	r2, r3
   1a318:	str	r2, [sp]
   1a31c:	str	r1, [sp, #4]
   1a320:	str	r0, [sp, #8]
   1a324:	ldr	r0, [sp, #68]	; 0x44
   1a328:	str	r0, [sp, #12]
   1a32c:	ldr	r0, [sp, #76]	; 0x4c
   1a330:	str	r0, [sp, #16]
   1a334:	mov	r0, r7
   1a338:	mov	r1, r4
   1a33c:	mov	r2, ip
   1a340:	mov	r3, lr
   1a344:	bl	19398 <__assert_fail@plt+0x801c>
   1a348:	mov	r8, r0
   1a34c:	mov	r0, r8
   1a350:	sub	sp, fp, #28
   1a354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a358:	mov	r0, #5
   1a35c:	str	r0, [sp]
   1a360:	ldr	r0, [fp, #12]
   1a364:	str	r0, [sp, #4]
   1a368:	ldr	r0, [fp, #16]
   1a36c:	str	r0, [sp, #8]
   1a370:	ldr	r0, [sp, #68]	; 0x44
   1a374:	str	r0, [sp, #12]
   1a378:	ldr	r0, [sp, #76]	; 0x4c
   1a37c:	str	r0, [sp, #16]
   1a380:	mov	r0, r7
   1a384:	ldr	r1, [sp, #72]	; 0x48
   1a388:	ldr	r2, [fp, #-84]	; 0xffffffac
   1a38c:	mov	r3, r9
   1a390:	b	1a344 <__assert_fail@plt+0x8fc8>
   1a394:	bl	11340 <abort@plt>
   1a398:	mov	r3, r2
   1a39c:	mov	r2, #0
   1a3a0:	b	1a3a4 <__assert_fail@plt+0x9028>
   1a3a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3a8:	add	fp, sp, #28
   1a3ac:	sub	sp, sp, #36	; 0x24
   1a3b0:	mov	r4, r2
   1a3b4:	str	r2, [sp, #24]
   1a3b8:	mov	r5, r1
   1a3bc:	mov	r6, r0
   1a3c0:	str	r0, [sp, #20]
   1a3c4:	movw	r8, #57776	; 0xe1b0
   1a3c8:	movt	r8, #2
   1a3cc:	cmp	r3, #0
   1a3d0:	movne	r8, r3
   1a3d4:	bl	1125c <__errno_location@plt>
   1a3d8:	str	r0, [sp, #28]
   1a3dc:	ldm	r8, {r3, r9}
   1a3e0:	ldr	r1, [r8, #40]	; 0x28
   1a3e4:	ldr	r2, [r8, #44]	; 0x2c
   1a3e8:	ldr	r7, [r0]
   1a3ec:	str	r7, [sp, #32]
   1a3f0:	add	sl, r8, #8
   1a3f4:	cmp	r4, #0
   1a3f8:	orreq	r9, r9, #1
   1a3fc:	stm	sp, {r3, r9, sl}
   1a400:	str	r1, [sp, #12]
   1a404:	str	r2, [sp, #16]
   1a408:	mov	r0, #0
   1a40c:	mov	r1, #0
   1a410:	mov	r2, r6
   1a414:	mov	r3, r5
   1a418:	mov	r7, r5
   1a41c:	bl	19398 <__assert_fail@plt+0x801c>
   1a420:	mov	r5, r0
   1a424:	add	r4, r0, #1
   1a428:	mov	r0, r4
   1a42c:	bl	1b2b4 <__assert_fail@plt+0x9f38>
   1a430:	mov	r6, r0
   1a434:	ldr	r0, [r8]
   1a438:	ldr	r1, [r8, #40]	; 0x28
   1a43c:	ldr	r2, [r8, #44]	; 0x2c
   1a440:	stm	sp, {r0, r9, sl}
   1a444:	str	r1, [sp, #12]
   1a448:	str	r2, [sp, #16]
   1a44c:	mov	r0, r6
   1a450:	mov	r1, r4
   1a454:	ldr	r2, [sp, #20]
   1a458:	mov	r3, r7
   1a45c:	bl	19398 <__assert_fail@plt+0x801c>
   1a460:	ldr	r0, [sp, #24]
   1a464:	ldr	r1, [sp, #32]
   1a468:	ldr	r2, [sp, #28]
   1a46c:	str	r1, [r2]
   1a470:	cmp	r0, #0
   1a474:	strne	r5, [r0]
   1a478:	mov	r0, r6
   1a47c:	sub	sp, fp, #28
   1a480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a484:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a488:	add	fp, sp, #24
   1a48c:	movw	r8, #57632	; 0xe120
   1a490:	movt	r8, #2
   1a494:	ldr	r4, [r8]
   1a498:	movw	r5, #57636	; 0xe124
   1a49c:	movt	r5, #2
   1a4a0:	ldr	r0, [r5]
   1a4a4:	cmp	r0, #2
   1a4a8:	blt	1a4d4 <__assert_fail@plt+0x9158>
   1a4ac:	add	r7, r4, #12
   1a4b0:	mov	r6, #0
   1a4b4:	ldr	r0, [r7, r6, lsl #3]
   1a4b8:	bl	19090 <__assert_fail@plt+0x7d14>
   1a4bc:	add	r0, r6, #1
   1a4c0:	ldr	r1, [r5]
   1a4c4:	add	r2, r6, #2
   1a4c8:	cmp	r2, r1
   1a4cc:	mov	r6, r0
   1a4d0:	blt	1a4b4 <__assert_fail@plt+0x9138>
   1a4d4:	ldr	r0, [r4, #4]
   1a4d8:	movw	r7, #57824	; 0xe1e0
   1a4dc:	movt	r7, #2
   1a4e0:	cmp	r0, r7
   1a4e4:	beq	1a4fc <__assert_fail@plt+0x9180>
   1a4e8:	bl	19090 <__assert_fail@plt+0x7d14>
   1a4ec:	movw	r0, #57640	; 0xe128
   1a4f0:	movt	r0, #2
   1a4f4:	mov	r6, #256	; 0x100
   1a4f8:	strd	r6, [r0]
   1a4fc:	movw	r6, #57640	; 0xe128
   1a500:	movt	r6, #2
   1a504:	cmp	r4, r6
   1a508:	beq	1a518 <__assert_fail@plt+0x919c>
   1a50c:	mov	r0, r4
   1a510:	bl	19090 <__assert_fail@plt+0x7d14>
   1a514:	str	r6, [r8]
   1a518:	mov	r0, #1
   1a51c:	str	r0, [r5]
   1a520:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a524:	movw	r3, #57776	; 0xe1b0
   1a528:	movt	r3, #2
   1a52c:	mvn	r2, #0
   1a530:	b	1a534 <__assert_fail@plt+0x91b8>
   1a534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a538:	add	fp, sp, #28
   1a53c:	sub	sp, sp, #44	; 0x2c
   1a540:	mov	r7, r3
   1a544:	str	r2, [sp, #36]	; 0x24
   1a548:	str	r1, [sp, #32]
   1a54c:	mov	r5, r0
   1a550:	bl	1125c <__errno_location@plt>
   1a554:	cmp	r5, #0
   1a558:	blt	1a6c4 <__assert_fail@plt+0x9348>
   1a55c:	cmn	r5, #-2147483647	; 0x80000001
   1a560:	beq	1a6c4 <__assert_fail@plt+0x9348>
   1a564:	movw	r4, #57632	; 0xe120
   1a568:	movt	r4, #2
   1a56c:	ldr	r6, [r4]
   1a570:	str	r0, [sp, #28]
   1a574:	ldr	r0, [r0]
   1a578:	str	r0, [sp, #24]
   1a57c:	movw	r8, #57636	; 0xe124
   1a580:	movt	r8, #2
   1a584:	ldr	r1, [r8]
   1a588:	cmp	r1, r5
   1a58c:	ble	1a598 <__assert_fail@plt+0x921c>
   1a590:	mov	sl, r6
   1a594:	b	1a600 <__assert_fail@plt+0x9284>
   1a598:	str	r1, [fp, #-32]	; 0xffffffe0
   1a59c:	mov	r0, #8
   1a5a0:	str	r0, [sp]
   1a5a4:	movw	r9, #57640	; 0xe128
   1a5a8:	movt	r9, #2
   1a5ac:	subs	r0, r6, r9
   1a5b0:	movne	r0, r6
   1a5b4:	add	r2, r5, #1
   1a5b8:	sub	r2, r2, r1
   1a5bc:	sub	r1, fp, #32
   1a5c0:	mvn	r3, #-2147483648	; 0x80000000
   1a5c4:	bl	1b39c <__assert_fail@plt+0xa020>
   1a5c8:	mov	sl, r0
   1a5cc:	str	r0, [r4]
   1a5d0:	cmp	r6, r9
   1a5d4:	ldrdeq	r0, [r9]
   1a5d8:	stmeq	sl, {r0, r1}
   1a5dc:	ldr	r1, [r8]
   1a5e0:	add	r0, sl, r1, lsl #3
   1a5e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a5e8:	sub	r1, r2, r1
   1a5ec:	lsl	r2, r1, #3
   1a5f0:	mov	r1, #0
   1a5f4:	bl	11280 <memset@plt>
   1a5f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a5fc:	str	r0, [r8]
   1a600:	mov	r9, sl
   1a604:	ldr	r6, [r9, r5, lsl #3]!
   1a608:	ldr	r4, [r9, #4]!
   1a60c:	ldm	r7, {r0, r1}
   1a610:	ldr	r2, [r7, #40]	; 0x28
   1a614:	ldr	r3, [r7, #44]	; 0x2c
   1a618:	orr	r8, r1, #1
   1a61c:	add	r1, r7, #8
   1a620:	stm	sp, {r0, r8}
   1a624:	str	r1, [sp, #20]
   1a628:	add	r0, sp, #8
   1a62c:	stm	r0, {r1, r2, r3}
   1a630:	mov	r0, r4
   1a634:	mov	r1, r6
   1a638:	ldr	r2, [sp, #32]
   1a63c:	ldr	r3, [sp, #36]	; 0x24
   1a640:	bl	19398 <__assert_fail@plt+0x801c>
   1a644:	cmp	r6, r0
   1a648:	bhi	1a6ac <__assert_fail@plt+0x9330>
   1a64c:	add	r6, r0, #1
   1a650:	str	r6, [sl, r5, lsl #3]
   1a654:	movw	r0, #57824	; 0xe1e0
   1a658:	movt	r0, #2
   1a65c:	cmp	r4, r0
   1a660:	beq	1a66c <__assert_fail@plt+0x92f0>
   1a664:	mov	r0, r4
   1a668:	bl	19090 <__assert_fail@plt+0x7d14>
   1a66c:	mov	r0, r6
   1a670:	bl	1b2b4 <__assert_fail@plt+0x9f38>
   1a674:	mov	r4, r0
   1a678:	str	r0, [r9]
   1a67c:	ldr	r0, [r7]
   1a680:	ldr	r1, [r7, #40]	; 0x28
   1a684:	ldr	r2, [r7, #44]	; 0x2c
   1a688:	stm	sp, {r0, r8}
   1a68c:	ldr	r0, [sp, #20]
   1a690:	add	r3, sp, #8
   1a694:	stm	r3, {r0, r1, r2}
   1a698:	mov	r0, r4
   1a69c:	mov	r1, r6
   1a6a0:	ldr	r2, [sp, #32]
   1a6a4:	ldr	r3, [sp, #36]	; 0x24
   1a6a8:	bl	19398 <__assert_fail@plt+0x801c>
   1a6ac:	ldr	r0, [sp, #28]
   1a6b0:	ldr	r1, [sp, #24]
   1a6b4:	str	r1, [r0]
   1a6b8:	mov	r0, r4
   1a6bc:	sub	sp, fp, #28
   1a6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6c4:	bl	11340 <abort@plt>
   1a6c8:	movw	r3, #57776	; 0xe1b0
   1a6cc:	movt	r3, #2
   1a6d0:	b	1a534 <__assert_fail@plt+0x91b8>
   1a6d4:	mov	r1, r0
   1a6d8:	mov	r0, #0
   1a6dc:	b	1a524 <__assert_fail@plt+0x91a8>
   1a6e0:	mov	r2, r1
   1a6e4:	mov	r1, r0
   1a6e8:	mov	r0, #0
   1a6ec:	b	1a6c8 <__assert_fail@plt+0x934c>
   1a6f0:	push	{r4, r5, r6, sl, fp, lr}
   1a6f4:	add	fp, sp, #16
   1a6f8:	sub	sp, sp, #48	; 0x30
   1a6fc:	mov	r4, r2
   1a700:	mov	r5, r0
   1a704:	mov	r6, sp
   1a708:	mov	r0, r6
   1a70c:	bl	1a72c <__assert_fail@plt+0x93b0>
   1a710:	mov	r0, r5
   1a714:	mov	r1, r4
   1a718:	mvn	r2, #0
   1a71c:	mov	r3, r6
   1a720:	bl	1a534 <__assert_fail@plt+0x91b8>
   1a724:	sub	sp, fp, #16
   1a728:	pop	{r4, r5, r6, sl, fp, pc}
   1a72c:	vmov.i32	q8, #0	; 0x00000000
   1a730:	mov	r2, #32
   1a734:	mov	r3, r0
   1a738:	vst1.32	{d16-d17}, [r3], r2
   1a73c:	vst1.32	{d16-d17}, [r3]
   1a740:	add	r2, r0, #16
   1a744:	vst1.32	{d16-d17}, [r2]
   1a748:	cmp	r1, #10
   1a74c:	strne	r1, [r0]
   1a750:	bxne	lr
   1a754:	push	{fp, lr}
   1a758:	mov	fp, sp
   1a75c:	bl	11340 <abort@plt>
   1a760:	push	{r4, r5, r6, r7, fp, lr}
   1a764:	add	fp, sp, #16
   1a768:	sub	sp, sp, #48	; 0x30
   1a76c:	mov	r4, r3
   1a770:	mov	r5, r2
   1a774:	mov	r6, r0
   1a778:	mov	r7, sp
   1a77c:	mov	r0, r7
   1a780:	bl	1a72c <__assert_fail@plt+0x93b0>
   1a784:	mov	r0, r6
   1a788:	mov	r1, r5
   1a78c:	mov	r2, r4
   1a790:	mov	r3, r7
   1a794:	bl	1a534 <__assert_fail@plt+0x91b8>
   1a798:	sub	sp, fp, #16
   1a79c:	pop	{r4, r5, r6, r7, fp, pc}
   1a7a0:	mov	r2, r1
   1a7a4:	mov	r1, r0
   1a7a8:	mov	r0, #0
   1a7ac:	b	1a6f0 <__assert_fail@plt+0x9374>
   1a7b0:	mov	r3, r2
   1a7b4:	mov	r2, r1
   1a7b8:	mov	r1, r0
   1a7bc:	mov	r0, #0
   1a7c0:	b	1a760 <__assert_fail@plt+0x93e4>
   1a7c4:	push	{r4, r5, r6, sl, fp, lr}
   1a7c8:	add	fp, sp, #16
   1a7cc:	sub	sp, sp, #48	; 0x30
   1a7d0:	mov	r4, r1
   1a7d4:	mov	r5, r0
   1a7d8:	mov	r0, #32
   1a7dc:	movw	r1, #57776	; 0xe1b0
   1a7e0:	movt	r1, #2
   1a7e4:	add	r3, r1, #16
   1a7e8:	vld1.64	{d16-d17}, [r1], r0
   1a7ec:	mov	r6, sp
   1a7f0:	vld1.64	{d18-d19}, [r3]
   1a7f4:	add	r3, r6, #16
   1a7f8:	vld1.64	{d20-d21}, [r1]
   1a7fc:	vst1.64	{d18-d19}, [r3]
   1a800:	mov	r1, r6
   1a804:	vst1.64	{d16-d17}, [r1], r0
   1a808:	vst1.64	{d20-d21}, [r1]
   1a80c:	mov	r0, r6
   1a810:	mov	r1, r2
   1a814:	mov	r2, #1
   1a818:	bl	1928c <__assert_fail@plt+0x7f10>
   1a81c:	mov	r0, #0
   1a820:	mov	r1, r5
   1a824:	mov	r2, r4
   1a828:	mov	r3, r6
   1a82c:	bl	1a534 <__assert_fail@plt+0x91b8>
   1a830:	sub	sp, fp, #16
   1a834:	pop	{r4, r5, r6, sl, fp, pc}
   1a838:	mov	r2, r1
   1a83c:	mvn	r1, #0
   1a840:	b	1a7c4 <__assert_fail@plt+0x9448>
   1a844:	mov	r1, #58	; 0x3a
   1a848:	b	1a838 <__assert_fail@plt+0x94bc>
   1a84c:	mov	r2, #58	; 0x3a
   1a850:	b	1a7c4 <__assert_fail@plt+0x9448>
   1a854:	push	{r4, r5, r6, sl, fp, lr}
   1a858:	add	fp, sp, #16
   1a85c:	sub	sp, sp, #48	; 0x30
   1a860:	mov	r4, r2
   1a864:	mov	r5, r0
   1a868:	mov	r6, sp
   1a86c:	mov	r0, r6
   1a870:	bl	1a72c <__assert_fail@plt+0x93b0>
   1a874:	mov	r0, r6
   1a878:	mov	r1, #58	; 0x3a
   1a87c:	mov	r2, #1
   1a880:	bl	1928c <__assert_fail@plt+0x7f10>
   1a884:	mov	r0, r5
   1a888:	mov	r1, r4
   1a88c:	mvn	r2, #0
   1a890:	mov	r3, r6
   1a894:	bl	1a534 <__assert_fail@plt+0x91b8>
   1a898:	sub	sp, fp, #16
   1a89c:	pop	{r4, r5, r6, sl, fp, pc}
   1a8a0:	push	{fp, lr}
   1a8a4:	mov	fp, sp
   1a8a8:	sub	sp, sp, #8
   1a8ac:	mvn	ip, #0
   1a8b0:	str	ip, [sp]
   1a8b4:	bl	1a8c0 <__assert_fail@plt+0x9544>
   1a8b8:	mov	sp, fp
   1a8bc:	pop	{fp, pc}
   1a8c0:	push	{r4, r5, r6, r7, fp, lr}
   1a8c4:	add	fp, sp, #16
   1a8c8:	sub	sp, sp, #48	; 0x30
   1a8cc:	mov	r7, r3
   1a8d0:	mov	r5, r0
   1a8d4:	mov	r0, #32
   1a8d8:	movw	r3, #57776	; 0xe1b0
   1a8dc:	movt	r3, #2
   1a8e0:	add	r4, r3, #16
   1a8e4:	vld1.64	{d16-d17}, [r3], r0
   1a8e8:	mov	r6, sp
   1a8ec:	vld1.64	{d18-d19}, [r4]
   1a8f0:	add	r4, r6, #16
   1a8f4:	vld1.64	{d20-d21}, [r3]
   1a8f8:	vst1.64	{d18-d19}, [r4]
   1a8fc:	mov	r3, r6
   1a900:	vst1.64	{d16-d17}, [r3], r0
   1a904:	vst1.64	{d20-d21}, [r3]
   1a908:	mov	r0, r6
   1a90c:	bl	192e4 <__assert_fail@plt+0x7f68>
   1a910:	ldr	r2, [fp, #8]
   1a914:	mov	r0, r5
   1a918:	mov	r1, r7
   1a91c:	mov	r3, r6
   1a920:	bl	1a534 <__assert_fail@plt+0x91b8>
   1a924:	sub	sp, fp, #16
   1a928:	pop	{r4, r5, r6, r7, fp, pc}
   1a92c:	mov	r3, r2
   1a930:	mov	r2, r1
   1a934:	mov	r1, r0
   1a938:	mov	r0, #0
   1a93c:	b	1a8a0 <__assert_fail@plt+0x9524>
   1a940:	push	{fp, lr}
   1a944:	mov	fp, sp
   1a948:	sub	sp, sp, #8
   1a94c:	mov	ip, r2
   1a950:	mov	r2, r1
   1a954:	mov	r1, r0
   1a958:	str	r3, [sp]
   1a95c:	mov	r0, #0
   1a960:	mov	r3, ip
   1a964:	bl	1a8c0 <__assert_fail@plt+0x9544>
   1a968:	mov	sp, fp
   1a96c:	pop	{fp, pc}
   1a970:	movw	r3, #57648	; 0xe130
   1a974:	movt	r3, #2
   1a978:	b	1a534 <__assert_fail@plt+0x91b8>
   1a97c:	mov	r2, r1
   1a980:	mov	r1, r0
   1a984:	mov	r0, #0
   1a988:	b	1a970 <__assert_fail@plt+0x95f4>
   1a98c:	mvn	r2, #0
   1a990:	b	1a970 <__assert_fail@plt+0x95f4>
   1a994:	mov	r1, r0
   1a998:	mov	r0, #0
   1a99c:	b	1a98c <__assert_fail@plt+0x9610>
   1a9a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a9a4:	add	fp, sp, #24
   1a9a8:	sub	sp, sp, #16
   1a9ac:	mov	r4, r1
   1a9b0:	mov	r5, r0
   1a9b4:	mov	r7, #0
   1a9b8:	mov	r0, #0
   1a9bc:	mov	r1, r5
   1a9c0:	mov	r2, #5
   1a9c4:	bl	11148 <dcgettext@plt>
   1a9c8:	cmp	r0, r5
   1a9cc:	beq	1a9d8 <__assert_fail@plt+0x965c>
   1a9d0:	sub	sp, fp, #24
   1a9d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9d8:	bl	1c350 <__assert_fail@plt+0xafd4>
   1a9dc:	mov	r6, r0
   1a9e0:	mov	r8, #56	; 0x38
   1a9e4:	mov	r0, #45	; 0x2d
   1a9e8:	stm	sp, {r0, r8}
   1a9ec:	str	r7, [sp, #8]
   1a9f0:	str	r7, [sp, #12]
   1a9f4:	mov	r0, r6
   1a9f8:	mov	r1, #85	; 0x55
   1a9fc:	mov	r2, #84	; 0x54
   1aa00:	mov	r3, #70	; 0x46
   1aa04:	bl	1aa9c <__assert_fail@plt+0x9720>
   1aa08:	cmp	r0, #0
   1aa0c:	beq	1aa28 <__assert_fail@plt+0x96ac>
   1aa10:	ldrb	r1, [r5]
   1aa14:	movw	r2, #54844	; 0xd63c
   1aa18:	movt	r2, #1
   1aa1c:	movw	r0, #54848	; 0xd640
   1aa20:	movt	r0, #1
   1aa24:	b	1aa6c <__assert_fail@plt+0x96f0>
   1aa28:	mov	r0, #48	; 0x30
   1aa2c:	mov	r1, #51	; 0x33
   1aa30:	str	r8, [sp]
   1aa34:	stmib	sp, {r0, r1}
   1aa38:	str	r0, [sp, #12]
   1aa3c:	mov	r0, r6
   1aa40:	mov	r1, #71	; 0x47
   1aa44:	mov	r2, #66	; 0x42
   1aa48:	mov	r3, #49	; 0x31
   1aa4c:	bl	1aa9c <__assert_fail@plt+0x9720>
   1aa50:	cmp	r0, #0
   1aa54:	beq	1aa7c <__assert_fail@plt+0x9700>
   1aa58:	ldrb	r1, [r5]
   1aa5c:	movw	r2, #54852	; 0xd644
   1aa60:	movt	r2, #1
   1aa64:	movw	r0, #54856	; 0xd648
   1aa68:	movt	r0, #1
   1aa6c:	cmp	r1, #96	; 0x60
   1aa70:	moveq	r0, r2
   1aa74:	sub	sp, fp, #24
   1aa78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa7c:	movw	r1, #54838	; 0xd636
   1aa80:	movt	r1, #1
   1aa84:	movw	r0, #54842	; 0xd63a
   1aa88:	movt	r0, #1
   1aa8c:	cmp	r4, #9
   1aa90:	moveq	r0, r1
   1aa94:	sub	sp, fp, #24
   1aa98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa9c:	push	{r4, r5, r6, r7, fp, lr}
   1aaa0:	add	fp, sp, #16
   1aaa4:	sub	sp, sp, #16
   1aaa8:	mov	r4, r3
   1aaac:	mov	r5, r2
   1aab0:	mov	r7, r1
   1aab4:	mov	r6, r0
   1aab8:	mov	r0, r1
   1aabc:	bl	1c024 <__assert_fail@plt+0xaca8>
   1aac0:	ldrb	r1, [r6]
   1aac4:	cmp	r0, #0
   1aac8:	andne	r1, r1, #223	; 0xdf
   1aacc:	mov	r0, #0
   1aad0:	cmp	r1, r7
   1aad4:	bne	1ab14 <__assert_fail@plt+0x9798>
   1aad8:	cmp	r7, #0
   1aadc:	moveq	r0, #1
   1aae0:	subeq	sp, fp, #16
   1aae4:	popeq	{r4, r5, r6, r7, fp, pc}
   1aae8:	ldr	r0, [fp, #20]
   1aaec:	ldr	r1, [fp, #16]
   1aaf0:	ldr	r2, [fp, #12]
   1aaf4:	ldr	r3, [fp, #8]
   1aaf8:	str	r2, [sp]
   1aafc:	str	r1, [sp, #4]
   1ab00:	str	r0, [sp, #8]
   1ab04:	mov	r0, r6
   1ab08:	mov	r1, r5
   1ab0c:	mov	r2, r4
   1ab10:	bl	1ab1c <__assert_fail@plt+0x97a0>
   1ab14:	sub	sp, fp, #16
   1ab18:	pop	{r4, r5, r6, r7, fp, pc}
   1ab1c:	push	{r4, r5, r6, r7, fp, lr}
   1ab20:	add	fp, sp, #16
   1ab24:	sub	sp, sp, #8
   1ab28:	mov	r4, r3
   1ab2c:	mov	r5, r2
   1ab30:	mov	r7, r1
   1ab34:	mov	r6, r0
   1ab38:	mov	r0, r1
   1ab3c:	bl	1c024 <__assert_fail@plt+0xaca8>
   1ab40:	ldrb	r1, [r6, #1]
   1ab44:	cmp	r0, #0
   1ab48:	andne	r1, r1, #223	; 0xdf
   1ab4c:	mov	r0, #0
   1ab50:	cmp	r1, r7
   1ab54:	bne	1ab8c <__assert_fail@plt+0x9810>
   1ab58:	cmp	r7, #0
   1ab5c:	moveq	r0, #1
   1ab60:	subeq	sp, fp, #16
   1ab64:	popeq	{r4, r5, r6, r7, fp, pc}
   1ab68:	ldr	r0, [fp, #16]
   1ab6c:	ldr	r1, [fp, #12]
   1ab70:	ldr	r3, [fp, #8]
   1ab74:	str	r1, [sp]
   1ab78:	str	r0, [sp, #4]
   1ab7c:	mov	r0, r6
   1ab80:	mov	r1, r5
   1ab84:	mov	r2, r4
   1ab88:	bl	1ab94 <__assert_fail@plt+0x9818>
   1ab8c:	sub	sp, fp, #16
   1ab90:	pop	{r4, r5, r6, r7, fp, pc}
   1ab94:	push	{r4, r5, r6, r7, fp, lr}
   1ab98:	add	fp, sp, #16
   1ab9c:	sub	sp, sp, #8
   1aba0:	mov	r4, r3
   1aba4:	mov	r5, r2
   1aba8:	mov	r7, r1
   1abac:	mov	r6, r0
   1abb0:	mov	r0, r1
   1abb4:	bl	1c024 <__assert_fail@plt+0xaca8>
   1abb8:	ldrb	r1, [r6, #2]
   1abbc:	cmp	r0, #0
   1abc0:	andne	r1, r1, #223	; 0xdf
   1abc4:	mov	r0, #0
   1abc8:	cmp	r1, r7
   1abcc:	bne	1abfc <__assert_fail@plt+0x9880>
   1abd0:	cmp	r7, #0
   1abd4:	moveq	r0, #1
   1abd8:	subeq	sp, fp, #16
   1abdc:	popeq	{r4, r5, r6, r7, fp, pc}
   1abe0:	ldr	r0, [fp, #12]
   1abe4:	ldr	r3, [fp, #8]
   1abe8:	str	r0, [sp]
   1abec:	mov	r0, r6
   1abf0:	mov	r1, r5
   1abf4:	mov	r2, r4
   1abf8:	bl	1ac04 <__assert_fail@plt+0x9888>
   1abfc:	sub	sp, fp, #16
   1ac00:	pop	{r4, r5, r6, r7, fp, pc}
   1ac04:	push	{r4, r5, r6, r7, fp, lr}
   1ac08:	add	fp, sp, #16
   1ac0c:	mov	r4, r3
   1ac10:	mov	r5, r2
   1ac14:	mov	r7, r1
   1ac18:	mov	r6, r0
   1ac1c:	mov	r0, r1
   1ac20:	bl	1c024 <__assert_fail@plt+0xaca8>
   1ac24:	ldrb	r1, [r6, #3]
   1ac28:	ldr	r3, [fp, #8]
   1ac2c:	cmp	r0, #0
   1ac30:	andne	r1, r1, #223	; 0xdf
   1ac34:	mov	r0, #0
   1ac38:	cmp	r1, r7
   1ac3c:	popne	{r4, r5, r6, r7, fp, pc}
   1ac40:	cmp	r7, #0
   1ac44:	beq	1ac5c <__assert_fail@plt+0x98e0>
   1ac48:	mov	r0, r6
   1ac4c:	mov	r1, r5
   1ac50:	mov	r2, r4
   1ac54:	pop	{r4, r5, r6, r7, fp, lr}
   1ac58:	b	1ac64 <__assert_fail@plt+0x98e8>
   1ac5c:	mov	r0, #1
   1ac60:	pop	{r4, r5, r6, r7, fp, pc}
   1ac64:	push	{r4, r5, r6, r7, fp, lr}
   1ac68:	add	fp, sp, #16
   1ac6c:	mov	r4, r3
   1ac70:	mov	r5, r2
   1ac74:	mov	r7, r1
   1ac78:	mov	r6, r0
   1ac7c:	mov	r0, r1
   1ac80:	bl	1c024 <__assert_fail@plt+0xaca8>
   1ac84:	ldrb	r1, [r6, #4]
   1ac88:	cmp	r0, #0
   1ac8c:	andne	r1, r1, #223	; 0xdf
   1ac90:	mov	r0, #0
   1ac94:	cmp	r1, r7
   1ac98:	popne	{r4, r5, r6, r7, fp, pc}
   1ac9c:	cmp	r7, #0
   1aca0:	beq	1acb8 <__assert_fail@plt+0x993c>
   1aca4:	mov	r0, r6
   1aca8:	mov	r1, r5
   1acac:	mov	r2, r4
   1acb0:	pop	{r4, r5, r6, r7, fp, lr}
   1acb4:	b	1acc0 <__assert_fail@plt+0x9944>
   1acb8:	mov	r0, #1
   1acbc:	pop	{r4, r5, r6, r7, fp, pc}
   1acc0:	push	{r4, r5, r6, sl, fp, lr}
   1acc4:	add	fp, sp, #16
   1acc8:	mov	r4, r2
   1accc:	mov	r6, r1
   1acd0:	mov	r5, r0
   1acd4:	mov	r0, r1
   1acd8:	bl	1c024 <__assert_fail@plt+0xaca8>
   1acdc:	ldrb	r1, [r5, #5]
   1ace0:	cmp	r0, #0
   1ace4:	andne	r1, r1, #223	; 0xdf
   1ace8:	mov	r0, #0
   1acec:	cmp	r1, r6
   1acf0:	popne	{r4, r5, r6, sl, fp, pc}
   1acf4:	cmp	r6, #0
   1acf8:	beq	1ad0c <__assert_fail@plt+0x9990>
   1acfc:	mov	r0, r5
   1ad00:	mov	r1, r4
   1ad04:	pop	{r4, r5, r6, sl, fp, lr}
   1ad08:	b	1ad14 <__assert_fail@plt+0x9998>
   1ad0c:	mov	r0, #1
   1ad10:	pop	{r4, r5, r6, sl, fp, pc}
   1ad14:	push	{r4, r5, fp, lr}
   1ad18:	add	fp, sp, #8
   1ad1c:	mov	r5, r1
   1ad20:	mov	r4, r0
   1ad24:	mov	r0, r1
   1ad28:	bl	1c024 <__assert_fail@plt+0xaca8>
   1ad2c:	ldrb	r1, [r4, #6]
   1ad30:	cmp	r0, #0
   1ad34:	andne	r1, r1, #223	; 0xdf
   1ad38:	mov	r0, #0
   1ad3c:	cmp	r1, r5
   1ad40:	popne	{r4, r5, fp, pc}
   1ad44:	cmp	r5, #0
   1ad48:	beq	1ad58 <__assert_fail@plt+0x99dc>
   1ad4c:	mov	r0, r4
   1ad50:	pop	{r4, r5, fp, lr}
   1ad54:	b	1ad60 <__assert_fail@plt+0x99e4>
   1ad58:	mov	r0, #1
   1ad5c:	pop	{r4, r5, fp, pc}
   1ad60:	push	{r4, sl, fp, lr}
   1ad64:	add	fp, sp, #8
   1ad68:	mov	r4, r0
   1ad6c:	mov	r0, #0
   1ad70:	bl	1c024 <__assert_fail@plt+0xaca8>
   1ad74:	ldrb	r1, [r4, #7]
   1ad78:	cmp	r0, #0
   1ad7c:	beq	1ad94 <__assert_fail@plt+0x9a18>
   1ad80:	tst	r1, #223	; 0xdf
   1ad84:	moveq	r0, #1
   1ad88:	popeq	{r4, sl, fp, pc}
   1ad8c:	mov	r0, #0
   1ad90:	pop	{r4, sl, fp, pc}
   1ad94:	cmp	r1, #0
   1ad98:	moveq	r0, #1
   1ad9c:	popeq	{r4, sl, fp, pc}
   1ada0:	mov	r0, #0
   1ada4:	pop	{r4, sl, fp, pc}
   1ada8:	mov	r1, #0
   1adac:	mov	r2, #3
   1adb0:	b	1c11c <__assert_fail@plt+0xada0>
   1adb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1adb8:	add	fp, sp, #24
   1adbc:	sub	sp, sp, #32
   1adc0:	mov	r4, r2
   1adc4:	mov	r8, r0
   1adc8:	ldr	r6, [fp, #12]
   1adcc:	ldr	r7, [fp, #8]
   1add0:	cmp	r1, #0
   1add4:	beq	1adfc <__assert_fail@plt+0x9a80>
   1add8:	mov	r5, r1
   1addc:	str	r4, [sp]
   1ade0:	str	r3, [sp, #4]
   1ade4:	movw	r2, #54944	; 0xd6a0
   1ade8:	movt	r2, #1
   1adec:	mov	r0, r8
   1adf0:	mov	r1, #1
   1adf4:	mov	r3, r5
   1adf8:	b	1ae14 <__assert_fail@plt+0x9a98>
   1adfc:	str	r3, [sp]
   1ae00:	movw	r2, #54956	; 0xd6ac
   1ae04:	movt	r2, #1
   1ae08:	mov	r0, r8
   1ae0c:	mov	r1, #1
   1ae10:	mov	r3, r4
   1ae14:	bl	112b0 <__fprintf_chk@plt>
   1ae18:	movw	r1, #54963	; 0xd6b3
   1ae1c:	movt	r1, #1
   1ae20:	mov	r0, #0
   1ae24:	mov	r2, #5
   1ae28:	bl	11148 <dcgettext@plt>
   1ae2c:	mov	r3, r0
   1ae30:	movw	r0, #2022	; 0x7e6
   1ae34:	str	r0, [sp]
   1ae38:	movw	r2, #55681	; 0xd981
   1ae3c:	movt	r2, #1
   1ae40:	mov	r0, r8
   1ae44:	mov	r1, #1
   1ae48:	bl	112b0 <__fprintf_chk@plt>
   1ae4c:	movw	r4, #52042	; 0xcb4a
   1ae50:	movt	r4, #1
   1ae54:	mov	r0, r4
   1ae58:	mov	r1, r8
   1ae5c:	bl	110c4 <fputs_unlocked@plt>
   1ae60:	movw	r1, #54967	; 0xd6b7
   1ae64:	movt	r1, #1
   1ae68:	mov	r0, #0
   1ae6c:	mov	r2, #5
   1ae70:	bl	11148 <dcgettext@plt>
   1ae74:	mov	r2, r0
   1ae78:	movw	r3, #55138	; 0xd762
   1ae7c:	movt	r3, #1
   1ae80:	mov	r0, r8
   1ae84:	mov	r1, #1
   1ae88:	bl	112b0 <__fprintf_chk@plt>
   1ae8c:	mov	r0, r4
   1ae90:	mov	r1, r8
   1ae94:	bl	110c4 <fputs_unlocked@plt>
   1ae98:	cmp	r6, #9
   1ae9c:	bhi	1aed8 <__assert_fail@plt+0x9b5c>
   1aea0:	add	r0, pc, #0
   1aea4:	ldr	pc, [r0, r6, lsl #2]
   1aea8:	ldrdeq	sl, [r1], -r0
   1aeac:	andeq	sl, r1, r4, ror #29
   1aeb0:	andeq	sl, r1, r4, lsl pc
   1aeb4:	andeq	sl, r1, ip, lsr pc
   1aeb8:	andeq	sl, r1, r4, ror #30
   1aebc:	andeq	sl, r1, ip, lsl #31
   1aec0:			; <UNDEFINED> instruction: 0x0001afb4
   1aec4:	andeq	sl, r1, ip, ror #31
   1aec8:	andeq	fp, r1, ip, lsl #1
   1aecc:	andeq	fp, r1, r4, lsr r0
   1aed0:	sub	sp, fp, #24
   1aed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aed8:	movw	r1, #55491	; 0xd8c3
   1aedc:	movt	r1, #1
   1aee0:	b	1b03c <__assert_fail@plt+0x9cc0>
   1aee4:	movw	r1, #55172	; 0xd784
   1aee8:	movt	r1, #1
   1aeec:	mov	r0, #0
   1aef0:	mov	r2, #5
   1aef4:	bl	11148 <dcgettext@plt>
   1aef8:	mov	r2, r0
   1aefc:	ldr	r3, [r7]
   1af00:	mov	r0, r8
   1af04:	mov	r1, #1
   1af08:	sub	sp, fp, #24
   1af0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1af10:	b	112b0 <__fprintf_chk@plt>
   1af14:	movw	r1, #55188	; 0xd794
   1af18:	movt	r1, #1
   1af1c:	mov	r0, #0
   1af20:	mov	r2, #5
   1af24:	bl	11148 <dcgettext@plt>
   1af28:	mov	r2, r0
   1af2c:	ldr	r3, [r7]
   1af30:	ldr	r0, [r7, #4]
   1af34:	str	r0, [sp]
   1af38:	b	1b028 <__assert_fail@plt+0x9cac>
   1af3c:	movw	r1, #55211	; 0xd7ab
   1af40:	movt	r1, #1
   1af44:	mov	r0, #0
   1af48:	mov	r2, #5
   1af4c:	bl	11148 <dcgettext@plt>
   1af50:	mov	r2, r0
   1af54:	ldr	r3, [r7]
   1af58:	ldmib	r7, {r0, r1}
   1af5c:	stm	sp, {r0, r1}
   1af60:	b	1b028 <__assert_fail@plt+0x9cac>
   1af64:	movw	r1, #55239	; 0xd7c7
   1af68:	movt	r1, #1
   1af6c:	mov	r0, #0
   1af70:	mov	r2, #5
   1af74:	bl	11148 <dcgettext@plt>
   1af78:	mov	r2, r0
   1af7c:	ldr	r3, [r7]
   1af80:	ldmib	r7, {r0, r1, r7}
   1af84:	stm	sp, {r0, r1, r7}
   1af88:	b	1b028 <__assert_fail@plt+0x9cac>
   1af8c:	movw	r1, #55271	; 0xd7e7
   1af90:	movt	r1, #1
   1af94:	mov	r0, #0
   1af98:	mov	r2, #5
   1af9c:	bl	11148 <dcgettext@plt>
   1afa0:	mov	r2, r0
   1afa4:	ldr	r3, [r7]
   1afa8:	ldmib	r7, {r0, r1, r6, r7}
   1afac:	stm	sp, {r0, r1, r6, r7}
   1afb0:	b	1b028 <__assert_fail@plt+0x9cac>
   1afb4:	movw	r1, #55307	; 0xd80b
   1afb8:	movt	r1, #1
   1afbc:	mov	r0, #0
   1afc0:	mov	r2, #5
   1afc4:	bl	11148 <dcgettext@plt>
   1afc8:	mov	r2, r0
   1afcc:	ldr	r3, [r7]
   1afd0:	ldmib	r7, {r0, r1, r6}
   1afd4:	ldr	r5, [r7, #16]
   1afd8:	ldr	r7, [r7, #20]
   1afdc:	stm	sp, {r0, r1, r6}
   1afe0:	str	r5, [sp, #12]
   1afe4:	str	r7, [sp, #16]
   1afe8:	b	1b028 <__assert_fail@plt+0x9cac>
   1afec:	movw	r1, #55347	; 0xd833
   1aff0:	movt	r1, #1
   1aff4:	mov	r0, #0
   1aff8:	mov	r2, #5
   1affc:	bl	11148 <dcgettext@plt>
   1b000:	mov	r2, r0
   1b004:	ldr	r3, [r7]
   1b008:	ldmib	r7, {r0, r1, r6}
   1b00c:	ldr	r5, [r7, #16]
   1b010:	ldr	r4, [r7, #20]
   1b014:	ldr	r7, [r7, #24]
   1b018:	stm	sp, {r0, r1, r6}
   1b01c:	str	r5, [sp, #12]
   1b020:	str	r4, [sp, #16]
   1b024:	str	r7, [sp, #20]
   1b028:	mov	r0, r8
   1b02c:	mov	r1, #1
   1b030:	b	1b0dc <__assert_fail@plt+0x9d60>
   1b034:	movw	r1, #55439	; 0xd88f
   1b038:	movt	r1, #1
   1b03c:	mov	r0, #0
   1b040:	mov	r2, #5
   1b044:	bl	11148 <dcgettext@plt>
   1b048:	mov	ip, r0
   1b04c:	ldr	r3, [r7]
   1b050:	ldr	r0, [r7, #4]
   1b054:	ldr	r1, [r7, #8]
   1b058:	ldr	r6, [r7, #12]
   1b05c:	ldr	r5, [r7, #16]
   1b060:	ldr	r4, [r7, #20]
   1b064:	ldr	r2, [r7, #24]
   1b068:	ldr	lr, [r7, #28]
   1b06c:	ldr	r7, [r7, #32]
   1b070:	stm	sp, {r0, r1, r6}
   1b074:	str	r5, [sp, #12]
   1b078:	str	r4, [sp, #16]
   1b07c:	str	r2, [sp, #20]
   1b080:	str	lr, [sp, #24]
   1b084:	str	r7, [sp, #28]
   1b088:	b	1b0d0 <__assert_fail@plt+0x9d54>
   1b08c:	movw	r1, #55391	; 0xd85f
   1b090:	movt	r1, #1
   1b094:	mov	r0, #0
   1b098:	mov	r2, #5
   1b09c:	bl	11148 <dcgettext@plt>
   1b0a0:	mov	ip, r0
   1b0a4:	ldr	r3, [r7]
   1b0a8:	ldmib	r7, {r0, r1, r6}
   1b0ac:	ldr	r5, [r7, #16]
   1b0b0:	ldr	r4, [r7, #20]
   1b0b4:	ldr	r2, [r7, #24]
   1b0b8:	ldr	r7, [r7, #28]
   1b0bc:	stm	sp, {r0, r1, r6}
   1b0c0:	str	r5, [sp, #12]
   1b0c4:	str	r4, [sp, #16]
   1b0c8:	str	r2, [sp, #20]
   1b0cc:	str	r7, [sp, #24]
   1b0d0:	mov	r0, r8
   1b0d4:	mov	r1, #1
   1b0d8:	mov	r2, ip
   1b0dc:	bl	112b0 <__fprintf_chk@plt>
   1b0e0:	sub	sp, fp, #24
   1b0e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b0e8:	push	{r4, sl, fp, lr}
   1b0ec:	add	fp, sp, #8
   1b0f0:	sub	sp, sp, #8
   1b0f4:	mov	lr, #0
   1b0f8:	ldr	ip, [fp, #8]
   1b0fc:	ldr	r4, [ip, lr, lsl #2]
   1b100:	add	lr, lr, #1
   1b104:	cmp	r4, #0
   1b108:	bne	1b0fc <__assert_fail@plt+0x9d80>
   1b10c:	sub	r4, lr, #1
   1b110:	str	ip, [sp]
   1b114:	str	r4, [sp, #4]
   1b118:	bl	1adb4 <__assert_fail@plt+0x9a38>
   1b11c:	sub	sp, fp, #8
   1b120:	pop	{r4, sl, fp, pc}
   1b124:	push	{r4, r5, fp, lr}
   1b128:	add	fp, sp, #8
   1b12c:	sub	sp, sp, #48	; 0x30
   1b130:	mov	ip, #0
   1b134:	ldr	r4, [fp, #8]
   1b138:	add	lr, sp, #8
   1b13c:	ldr	r5, [r4]
   1b140:	str	r5, [lr, ip, lsl #2]
   1b144:	cmp	r5, #0
   1b148:	beq	1b15c <__assert_fail@plt+0x9de0>
   1b14c:	add	ip, ip, #1
   1b150:	add	r4, r4, #4
   1b154:	cmp	ip, #10
   1b158:	bcc	1b13c <__assert_fail@plt+0x9dc0>
   1b15c:	str	lr, [sp]
   1b160:	str	ip, [sp, #4]
   1b164:	bl	1adb4 <__assert_fail@plt+0x9a38>
   1b168:	sub	sp, fp, #8
   1b16c:	pop	{r4, r5, fp, pc}
   1b170:	push	{fp, lr}
   1b174:	mov	fp, sp
   1b178:	sub	sp, sp, #8
   1b17c:	add	ip, fp, #8
   1b180:	str	ip, [sp, #4]
   1b184:	str	ip, [sp]
   1b188:	bl	1b124 <__assert_fail@plt+0x9da8>
   1b18c:	mov	sp, fp
   1b190:	pop	{fp, pc}
   1b194:	push	{fp, lr}
   1b198:	mov	fp, sp
   1b19c:	movw	r0, #57724	; 0xe17c
   1b1a0:	movt	r0, #2
   1b1a4:	ldr	r1, [r0]
   1b1a8:	movw	r0, #52042	; 0xcb4a
   1b1ac:	movt	r0, #1
   1b1b0:	bl	110c4 <fputs_unlocked@plt>
   1b1b4:	movw	r1, #55551	; 0xd8ff
   1b1b8:	movt	r1, #1
   1b1bc:	mov	r0, #0
   1b1c0:	mov	r2, #5
   1b1c4:	bl	11148 <dcgettext@plt>
   1b1c8:	mov	r1, r0
   1b1cc:	movw	r2, #55571	; 0xd913
   1b1d0:	movt	r2, #1
   1b1d4:	mov	r0, #1
   1b1d8:	bl	1128c <__printf_chk@plt>
   1b1dc:	movw	r1, #55593	; 0xd929
   1b1e0:	movt	r1, #1
   1b1e4:	mov	r0, #0
   1b1e8:	mov	r2, #5
   1b1ec:	bl	11148 <dcgettext@plt>
   1b1f0:	mov	r1, r0
   1b1f4:	movw	r2, #52631	; 0xcd97
   1b1f8:	movt	r2, #1
   1b1fc:	movw	r3, #53526	; 0xd116
   1b200:	movt	r3, #1
   1b204:	mov	r0, #1
   1b208:	bl	1128c <__printf_chk@plt>
   1b20c:	movw	r1, #55613	; 0xd93d
   1b210:	movt	r1, #1
   1b214:	mov	r0, #0
   1b218:	mov	r2, #5
   1b21c:	bl	11148 <dcgettext@plt>
   1b220:	mov	r1, r0
   1b224:	movw	r2, #55652	; 0xd964
   1b228:	movt	r2, #1
   1b22c:	mov	r0, #1
   1b230:	pop	{fp, lr}
   1b234:	b	1128c <__printf_chk@plt>
   1b238:	b	1b23c <__assert_fail@plt+0x9ec0>
   1b23c:	push	{r4, r5, r6, sl, fp, lr}
   1b240:	add	fp, sp, #16
   1b244:	mov	r4, r2
   1b248:	mov	r5, r1
   1b24c:	mov	r6, r0
   1b250:	bl	1c3e8 <__assert_fail@plt+0xb06c>
   1b254:	cmp	r0, #0
   1b258:	popne	{r4, r5, r6, sl, fp, pc}
   1b25c:	cmp	r6, #0
   1b260:	beq	1b274 <__assert_fail@plt+0x9ef8>
   1b264:	cmp	r5, #0
   1b268:	cmpne	r4, #0
   1b26c:	bne	1b274 <__assert_fail@plt+0x9ef8>
   1b270:	pop	{r4, r5, r6, sl, fp, pc}
   1b274:	bl	1b628 <__assert_fail@plt+0xa2ac>
   1b278:	push	{fp, lr}
   1b27c:	mov	fp, sp
   1b280:	bl	1bcec <__assert_fail@plt+0xa970>
   1b284:	bl	1b28c <__assert_fail@plt+0x9f10>
   1b288:	pop	{fp, pc}
   1b28c:	cmp	r0, #0
   1b290:	bxne	lr
   1b294:	push	{fp, lr}
   1b298:	mov	fp, sp
   1b29c:	bl	1b628 <__assert_fail@plt+0xa2ac>
   1b2a0:	push	{fp, lr}
   1b2a4:	mov	fp, sp
   1b2a8:	bl	1c31c <__assert_fail@plt+0xafa0>
   1b2ac:	bl	1b28c <__assert_fail@plt+0x9f10>
   1b2b0:	pop	{fp, pc}
   1b2b4:	b	1b278 <__assert_fail@plt+0x9efc>
   1b2b8:	push	{r4, r5, fp, lr}
   1b2bc:	add	fp, sp, #8
   1b2c0:	mov	r4, r1
   1b2c4:	mov	r5, r0
   1b2c8:	bl	1bd1c <__assert_fail@plt+0xa9a0>
   1b2cc:	cmp	r0, #0
   1b2d0:	popne	{r4, r5, fp, pc}
   1b2d4:	cmp	r5, #0
   1b2d8:	beq	1b2e8 <__assert_fail@plt+0x9f6c>
   1b2dc:	cmp	r4, #0
   1b2e0:	bne	1b2e8 <__assert_fail@plt+0x9f6c>
   1b2e4:	pop	{r4, r5, fp, pc}
   1b2e8:	bl	1b628 <__assert_fail@plt+0xa2ac>
   1b2ec:	push	{fp, lr}
   1b2f0:	mov	fp, sp
   1b2f4:	bl	1c320 <__assert_fail@plt+0xafa4>
   1b2f8:	bl	1b28c <__assert_fail@plt+0x9f10>
   1b2fc:	pop	{fp, pc}
   1b300:	push	{fp, lr}
   1b304:	mov	fp, sp
   1b308:	bl	1c330 <__assert_fail@plt+0xafb4>
   1b30c:	bl	1b28c <__assert_fail@plt+0x9f10>
   1b310:	pop	{fp, pc}
   1b314:	push	{fp, lr}
   1b318:	mov	fp, sp
   1b31c:	mov	r2, r1
   1b320:	mov	r1, r0
   1b324:	mov	r0, #0
   1b328:	bl	1b23c <__assert_fail@plt+0x9ec0>
   1b32c:	pop	{fp, pc}
   1b330:	mov	r2, r1
   1b334:	mov	r1, r0
   1b338:	mov	r0, #0
   1b33c:	b	1b300 <__assert_fail@plt+0x9f84>
   1b340:	mov	r2, #1
   1b344:	b	1b348 <__assert_fail@plt+0x9fcc>
   1b348:	push	{r4, r5, fp, lr}
   1b34c:	add	fp, sp, #8
   1b350:	mov	r4, r1
   1b354:	ldr	r5, [r1]
   1b358:	cmp	r0, #0
   1b35c:	beq	1b374 <__assert_fail@plt+0x9ff8>
   1b360:	mov	r1, #1
   1b364:	add	r1, r1, r5, lsr #1
   1b368:	adds	r5, r5, r1
   1b36c:	bcc	1b38c <__assert_fail@plt+0xa010>
   1b370:	bl	1b628 <__assert_fail@plt+0xa2ac>
   1b374:	cmp	r5, #0
   1b378:	bne	1b38c <__assert_fail@plt+0xa010>
   1b37c:	mov	r1, #64	; 0x40
   1b380:	udiv	r5, r1, r2
   1b384:	cmp	r2, #64	; 0x40
   1b388:	addhi	r5, r5, #1
   1b38c:	mov	r1, r5
   1b390:	bl	1b23c <__assert_fail@plt+0x9ec0>
   1b394:	str	r5, [r4]
   1b398:	pop	{r4, r5, fp, pc}
   1b39c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b3a0:	add	fp, sp, #24
   1b3a4:	mov	r8, r1
   1b3a8:	ldr	r6, [r1]
   1b3ac:	add	r1, r6, r6, asr #1
   1b3b0:	cmp	r1, r6
   1b3b4:	mvnvs	r1, #-2147483648	; 0x80000000
   1b3b8:	cmp	r1, r3
   1b3bc:	mov	r5, r1
   1b3c0:	movgt	r5, r3
   1b3c4:	cmn	r3, #1
   1b3c8:	movle	r5, r1
   1b3cc:	ldr	r4, [fp, #8]
   1b3d0:	cmn	r4, #1
   1b3d4:	ble	1b3fc <__assert_fail@plt+0xa080>
   1b3d8:	cmp	r4, #0
   1b3dc:	beq	1b450 <__assert_fail@plt+0xa0d4>
   1b3e0:	cmn	r5, #1
   1b3e4:	ble	1b424 <__assert_fail@plt+0xa0a8>
   1b3e8:	mvn	r7, #-2147483648	; 0x80000000
   1b3ec:	udiv	r1, r7, r4
   1b3f0:	cmp	r1, r5
   1b3f4:	bge	1b450 <__assert_fail@plt+0xa0d4>
   1b3f8:	b	1b460 <__assert_fail@plt+0xa0e4>
   1b3fc:	cmn	r5, #1
   1b400:	ble	1b440 <__assert_fail@plt+0xa0c4>
   1b404:	cmn	r4, #1
   1b408:	beq	1b450 <__assert_fail@plt+0xa0d4>
   1b40c:	mov	r1, #-2147483648	; 0x80000000
   1b410:	sdiv	r1, r1, r4
   1b414:	mvn	r7, #-2147483648	; 0x80000000
   1b418:	cmp	r1, r5
   1b41c:	bge	1b450 <__assert_fail@plt+0xa0d4>
   1b420:	b	1b460 <__assert_fail@plt+0xa0e4>
   1b424:	beq	1b450 <__assert_fail@plt+0xa0d4>
   1b428:	mov	r1, #-2147483648	; 0x80000000
   1b42c:	sdiv	r1, r1, r5
   1b430:	mvn	r7, #-2147483648	; 0x80000000
   1b434:	cmp	r1, r4
   1b438:	bge	1b450 <__assert_fail@plt+0xa0d4>
   1b43c:	b	1b460 <__assert_fail@plt+0xa0e4>
   1b440:	mvn	r7, #-2147483648	; 0x80000000
   1b444:	sdiv	r1, r7, r4
   1b448:	cmp	r5, r1
   1b44c:	blt	1b460 <__assert_fail@plt+0xa0e4>
   1b450:	mul	r1, r5, r4
   1b454:	mov	r7, #64	; 0x40
   1b458:	cmp	r1, #63	; 0x3f
   1b45c:	bgt	1b468 <__assert_fail@plt+0xa0ec>
   1b460:	sdiv	r5, r7, r4
   1b464:	mul	r1, r5, r4
   1b468:	cmp	r0, #0
   1b46c:	moveq	r7, #0
   1b470:	streq	r7, [r8]
   1b474:	sub	r7, r5, r6
   1b478:	cmp	r7, r2
   1b47c:	bge	1b528 <__assert_fail@plt+0xa1ac>
   1b480:	add	r5, r6, r2
   1b484:	mov	r1, #0
   1b488:	cmp	r5, r3
   1b48c:	mov	r2, #0
   1b490:	movwgt	r2, #1
   1b494:	cmn	r3, #1
   1b498:	movwgt	r1, #1
   1b49c:	cmp	r5, r6
   1b4a0:	bvs	1b510 <__assert_fail@plt+0xa194>
   1b4a4:	ands	r1, r1, r2
   1b4a8:	bne	1b510 <__assert_fail@plt+0xa194>
   1b4ac:	cmn	r4, #1
   1b4b0:	ble	1b4d8 <__assert_fail@plt+0xa15c>
   1b4b4:	cmp	r4, #0
   1b4b8:	beq	1b524 <__assert_fail@plt+0xa1a8>
   1b4bc:	cmn	r5, #1
   1b4c0:	ble	1b4fc <__assert_fail@plt+0xa180>
   1b4c4:	mvn	r1, #-2147483648	; 0x80000000
   1b4c8:	udiv	r1, r1, r4
   1b4cc:	cmp	r1, r5
   1b4d0:	bge	1b524 <__assert_fail@plt+0xa1a8>
   1b4d4:	b	1b510 <__assert_fail@plt+0xa194>
   1b4d8:	cmn	r5, #1
   1b4dc:	ble	1b514 <__assert_fail@plt+0xa198>
   1b4e0:	cmn	r4, #1
   1b4e4:	beq	1b524 <__assert_fail@plt+0xa1a8>
   1b4e8:	mov	r1, #-2147483648	; 0x80000000
   1b4ec:	sdiv	r1, r1, r4
   1b4f0:	cmp	r1, r5
   1b4f4:	bge	1b524 <__assert_fail@plt+0xa1a8>
   1b4f8:	b	1b510 <__assert_fail@plt+0xa194>
   1b4fc:	beq	1b524 <__assert_fail@plt+0xa1a8>
   1b500:	mov	r1, #-2147483648	; 0x80000000
   1b504:	sdiv	r1, r1, r5
   1b508:	cmp	r1, r4
   1b50c:	bge	1b524 <__assert_fail@plt+0xa1a8>
   1b510:	bl	1b628 <__assert_fail@plt+0xa2ac>
   1b514:	mvn	r1, #-2147483648	; 0x80000000
   1b518:	sdiv	r1, r1, r4
   1b51c:	cmp	r5, r1
   1b520:	blt	1b510 <__assert_fail@plt+0xa194>
   1b524:	mul	r1, r5, r4
   1b528:	bl	1b2b8 <__assert_fail@plt+0x9f3c>
   1b52c:	str	r5, [r8]
   1b530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b534:	mov	r1, #1
   1b538:	b	1b53c <__assert_fail@plt+0xa1c0>
   1b53c:	push	{fp, lr}
   1b540:	mov	fp, sp
   1b544:	bl	1bc98 <__assert_fail@plt+0xa91c>
   1b548:	bl	1b28c <__assert_fail@plt+0x9f10>
   1b54c:	pop	{fp, pc}
   1b550:	mov	r1, #1
   1b554:	b	1b558 <__assert_fail@plt+0xa1dc>
   1b558:	push	{fp, lr}
   1b55c:	mov	fp, sp
   1b560:	bl	1c32c <__assert_fail@plt+0xafb0>
   1b564:	bl	1b28c <__assert_fail@plt+0x9f10>
   1b568:	pop	{fp, pc}
   1b56c:	push	{r4, r5, r6, sl, fp, lr}
   1b570:	add	fp, sp, #16
   1b574:	mov	r4, r1
   1b578:	mov	r5, r0
   1b57c:	mov	r0, r1
   1b580:	bl	1b278 <__assert_fail@plt+0x9efc>
   1b584:	mov	r6, r0
   1b588:	mov	r1, r5
   1b58c:	mov	r2, r4
   1b590:	bl	11124 <memcpy@plt>
   1b594:	mov	r0, r6
   1b598:	pop	{r4, r5, r6, sl, fp, pc}
   1b59c:	push	{r4, r5, r6, sl, fp, lr}
   1b5a0:	add	fp, sp, #16
   1b5a4:	mov	r4, r1
   1b5a8:	mov	r5, r0
   1b5ac:	mov	r0, r1
   1b5b0:	bl	1b2a0 <__assert_fail@plt+0x9f24>
   1b5b4:	mov	r6, r0
   1b5b8:	mov	r1, r5
   1b5bc:	mov	r2, r4
   1b5c0:	bl	11124 <memcpy@plt>
   1b5c4:	mov	r0, r6
   1b5c8:	pop	{r4, r5, r6, sl, fp, pc}
   1b5cc:	push	{r4, r5, r6, sl, fp, lr}
   1b5d0:	add	fp, sp, #16
   1b5d4:	mov	r4, r1
   1b5d8:	mov	r5, r0
   1b5dc:	add	r0, r1, #1
   1b5e0:	bl	1b2a0 <__assert_fail@plt+0x9f24>
   1b5e4:	mov	r6, r0
   1b5e8:	mov	r0, #0
   1b5ec:	strb	r0, [r6, r4]
   1b5f0:	mov	r0, r6
   1b5f4:	mov	r1, r5
   1b5f8:	mov	r2, r4
   1b5fc:	bl	11124 <memcpy@plt>
   1b600:	mov	r0, r6
   1b604:	pop	{r4, r5, r6, sl, fp, pc}
   1b608:	push	{r4, sl, fp, lr}
   1b60c:	add	fp, sp, #8
   1b610:	mov	r4, r0
   1b614:	bl	11244 <strlen@plt>
   1b618:	add	r1, r0, #1
   1b61c:	mov	r0, r4
   1b620:	pop	{r4, sl, fp, lr}
   1b624:	b	1b56c <__assert_fail@plt+0xa1f0>
   1b628:	push	{fp, lr}
   1b62c:	mov	fp, sp
   1b630:	movw	r0, #57624	; 0xe118
   1b634:	movt	r0, #2
   1b638:	ldr	r4, [r0]
   1b63c:	movw	r1, #55728	; 0xd9b0
   1b640:	movt	r1, #1
   1b644:	mov	r0, #0
   1b648:	mov	r2, #5
   1b64c:	bl	11148 <dcgettext@plt>
   1b650:	mov	r3, r0
   1b654:	movw	r2, #52598	; 0xcd76
   1b658:	movt	r2, #1
   1b65c:	mov	r0, r4
   1b660:	mov	r1, #0
   1b664:	bl	111cc <error@plt>
   1b668:	bl	11340 <abort@plt>
   1b66c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b670:	add	fp, sp, #24
   1b674:	sub	sp, sp, #16
   1b678:	mov	r5, r3
   1b67c:	mov	r6, r2
   1b680:	mov	r2, r1
   1b684:	mov	r8, r0
   1b688:	ldr	r0, [fp, #16]
   1b68c:	str	r0, [sp]
   1b690:	add	r3, sp, #8
   1b694:	mov	r0, r8
   1b698:	mov	r1, #0
   1b69c:	bl	1b764 <__assert_fail@plt+0xa3e8>
   1b6a0:	cmp	r0, #0
   1b6a4:	bne	1b734 <__assert_fail@plt+0xa3b8>
   1b6a8:	ldr	r7, [sp, #8]
   1b6ac:	ldr	r4, [sp, #12]
   1b6b0:	subs	r0, r7, r6
   1b6b4:	sbcs	r0, r4, r5
   1b6b8:	bcc	1b6dc <__assert_fail@plt+0xa360>
   1b6bc:	ldr	r0, [fp, #12]
   1b6c0:	ldr	r1, [fp, #8]
   1b6c4:	subs	r1, r1, r7
   1b6c8:	sbcs	r0, r0, r4
   1b6cc:	ldrcs	r0, [sp, #8]
   1b6d0:	ldrcs	r1, [sp, #12]
   1b6d4:	subcs	sp, fp, #24
   1b6d8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b6dc:	bl	1125c <__errno_location@plt>
   1b6e0:	subs	r1, r7, #1073741824	; 0x40000000
   1b6e4:	sbcs	r1, r4, #0
   1b6e8:	movcc	r1, #34	; 0x22
   1b6ec:	movcs	r1, #75	; 0x4b
   1b6f0:	str	r1, [r0]
   1b6f4:	ldr	r5, [fp, #24]
   1b6f8:	ldr	r6, [fp, #20]
   1b6fc:	bl	1125c <__errno_location@plt>
   1b700:	ldr	r4, [r0]
   1b704:	mov	r0, r8
   1b708:	bl	1a994 <__assert_fail@plt+0x9618>
   1b70c:	str	r0, [sp]
   1b710:	subs	r1, r4, #22
   1b714:	movne	r1, r4
   1b718:	cmp	r5, #0
   1b71c:	movweq	r5, #1
   1b720:	movw	r2, #54687	; 0xd59f
   1b724:	movt	r2, #1
   1b728:	mov	r0, r5
   1b72c:	mov	r3, r6
   1b730:	bl	111cc <error@plt>
   1b734:	cmp	r0, #1
   1b738:	beq	1b750 <__assert_fail@plt+0xa3d4>
   1b73c:	cmp	r0, #3
   1b740:	bne	1b6f4 <__assert_fail@plt+0xa378>
   1b744:	bl	1125c <__errno_location@plt>
   1b748:	mov	r1, #0
   1b74c:	b	1b6f0 <__assert_fail@plt+0xa374>
   1b750:	bl	1125c <__errno_location@plt>
   1b754:	mov	r1, #75	; 0x4b
   1b758:	b	1b6f0 <__assert_fail@plt+0xa374>
   1b75c:	mov	r1, #10
   1b760:	b	1b66c <__assert_fail@plt+0xa2f0>
   1b764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b768:	add	fp, sp, #28
   1b76c:	sub	sp, sp, #20
   1b770:	cmp	r2, #37	; 0x25
   1b774:	bcs	1bba4 <__assert_fail@plt+0xa828>
   1b778:	mov	r5, r2
   1b77c:	mov	r6, r1
   1b780:	mov	r4, r0
   1b784:	str	r3, [sp, #4]
   1b788:	ldr	sl, [fp, #8]
   1b78c:	bl	1125c <__errno_location@plt>
   1b790:	mov	r7, r0
   1b794:	mov	r0, #0
   1b798:	str	r0, [r7]
   1b79c:	bl	11220 <__ctype_b_loc@plt>
   1b7a0:	ldr	r1, [r0]
   1b7a4:	mov	r2, r4
   1b7a8:	ldrb	r0, [r2], #1
   1b7ac:	add	r3, r1, r0, lsl #1
   1b7b0:	ldrb	r3, [r3, #1]
   1b7b4:	tst	r3, #32
   1b7b8:	bne	1b7a8 <__assert_fail@plt+0xa42c>
   1b7bc:	add	r9, sp, #16
   1b7c0:	cmp	r6, #0
   1b7c4:	movne	r9, r6
   1b7c8:	mov	r8, #4
   1b7cc:	cmp	r0, #45	; 0x2d
   1b7d0:	beq	1bb98 <__assert_fail@plt+0xa81c>
   1b7d4:	mov	r0, r4
   1b7d8:	mov	r1, r9
   1b7dc:	mov	r2, r5
   1b7e0:	bl	112a4 <strtoumax@plt>
   1b7e4:	str	r1, [sp, #12]
   1b7e8:	str	r0, [sp, #8]
   1b7ec:	ldr	r6, [r9]
   1b7f0:	cmp	r6, r4
   1b7f4:	beq	1b81c <__assert_fail@plt+0xa4a0>
   1b7f8:	ldr	r0, [r7]
   1b7fc:	cmp	r0, #0
   1b800:	beq	1b850 <__assert_fail@plt+0xa4d4>
   1b804:	cmp	r0, #34	; 0x22
   1b808:	bne	1bb98 <__assert_fail@plt+0xa81c>
   1b80c:	mov	r8, #1
   1b810:	cmp	sl, #0
   1b814:	bne	1b85c <__assert_fail@plt+0xa4e0>
   1b818:	b	1bb88 <__assert_fail@plt+0xa80c>
   1b81c:	cmp	sl, #0
   1b820:	ldrbne	r1, [r6]
   1b824:	cmpne	r1, #0
   1b828:	beq	1bb98 <__assert_fail@plt+0xa81c>
   1b82c:	mov	r0, sl
   1b830:	bl	11250 <strchr@plt>
   1b834:	cmp	r0, #0
   1b838:	beq	1bb98 <__assert_fail@plt+0xa81c>
   1b83c:	mov	r8, #0
   1b840:	str	r8, [sp, #12]
   1b844:	mov	r0, #1
   1b848:	str	r0, [sp, #8]
   1b84c:	b	1b85c <__assert_fail@plt+0xa4e0>
   1b850:	mov	r8, r0
   1b854:	cmp	sl, #0
   1b858:	beq	1bb88 <__assert_fail@plt+0xa80c>
   1b85c:	ldrb	r4, [r6]
   1b860:	cmp	r4, #0
   1b864:	beq	1bb88 <__assert_fail@plt+0xa80c>
   1b868:	mov	r0, sl
   1b86c:	mov	r1, r4
   1b870:	bl	11250 <strchr@plt>
   1b874:	cmp	r0, #0
   1b878:	beq	1ba88 <__assert_fail@plt+0xa70c>
   1b87c:	sub	r0, r4, #69	; 0x45
   1b880:	mov	r7, #1
   1b884:	mov	r5, #1024	; 0x400
   1b888:	cmp	r0, #47	; 0x2f
   1b88c:	bhi	1b984 <__assert_fail@plt+0xa608>
   1b890:	add	r1, pc, #0
   1b894:	ldr	pc, [r1, r0, lsl #2]
   1b898:	andeq	fp, r1, r8, asr r9
   1b89c:	andeq	fp, r1, r4, lsl #19
   1b8a0:	andeq	fp, r1, r8, asr r9
   1b8a4:	andeq	fp, r1, r4, lsl #19
   1b8a8:	andeq	fp, r1, r4, lsl #19
   1b8ac:	andeq	fp, r1, r4, lsl #19
   1b8b0:	andeq	fp, r1, r8, asr r9
   1b8b4:	andeq	fp, r1, r4, lsl #19
   1b8b8:	andeq	fp, r1, r8, asr r9
   1b8bc:	andeq	fp, r1, r4, lsl #19
   1b8c0:	andeq	fp, r1, r4, lsl #19
   1b8c4:	andeq	fp, r1, r8, asr r9
   1b8c8:	andeq	fp, r1, r4, lsl #19
   1b8cc:	andeq	fp, r1, r4, lsl #19
   1b8d0:	andeq	fp, r1, r4, lsl #19
   1b8d4:	andeq	fp, r1, r8, asr r9
   1b8d8:	andeq	fp, r1, r4, lsl #19
   1b8dc:	andeq	fp, r1, r4, lsl #19
   1b8e0:	andeq	fp, r1, r4, lsl #19
   1b8e4:	andeq	fp, r1, r4, lsl #19
   1b8e8:	andeq	fp, r1, r8, asr r9
   1b8ec:	andeq	fp, r1, r8, asr r9
   1b8f0:	andeq	fp, r1, r4, lsl #19
   1b8f4:	andeq	fp, r1, r4, lsl #19
   1b8f8:	andeq	fp, r1, r4, lsl #19
   1b8fc:	andeq	fp, r1, r4, lsl #19
   1b900:	andeq	fp, r1, r4, lsl #19
   1b904:	andeq	fp, r1, r4, lsl #19
   1b908:	andeq	fp, r1, r4, lsl #19
   1b90c:	andeq	fp, r1, r4, lsl #19
   1b910:	andeq	fp, r1, r4, lsl #19
   1b914:	andeq	fp, r1, r4, lsl #19
   1b918:	andeq	fp, r1, r4, lsl #19
   1b91c:	andeq	fp, r1, r4, lsl #19
   1b920:	andeq	fp, r1, r8, asr r9
   1b924:	andeq	fp, r1, r4, lsl #19
   1b928:	andeq	fp, r1, r4, lsl #19
   1b92c:	andeq	fp, r1, r4, lsl #19
   1b930:	andeq	fp, r1, r8, asr r9
   1b934:	andeq	fp, r1, r4, lsl #19
   1b938:	andeq	fp, r1, r8, asr r9
   1b93c:	andeq	fp, r1, r4, lsl #19
   1b940:	andeq	fp, r1, r4, lsl #19
   1b944:	andeq	fp, r1, r4, lsl #19
   1b948:	andeq	fp, r1, r4, lsl #19
   1b94c:	andeq	fp, r1, r4, lsl #19
   1b950:	andeq	fp, r1, r4, lsl #19
   1b954:	andeq	fp, r1, r8, asr r9
   1b958:	mov	r0, sl
   1b95c:	mov	r1, #48	; 0x30
   1b960:	bl	11250 <strchr@plt>
   1b964:	cmp	r0, #0
   1b968:	beq	1b984 <__assert_fail@plt+0xa608>
   1b96c:	ldrb	r0, [r6, #1]
   1b970:	cmp	r0, #66	; 0x42
   1b974:	cmpne	r0, #68	; 0x44
   1b978:	bne	1baa0 <__assert_fail@plt+0xa724>
   1b97c:	mov	r7, #2
   1b980:	mov	r5, #1000	; 0x3e8
   1b984:	sub	r1, r4, #66	; 0x42
   1b988:	cmp	r1, #53	; 0x35
   1b98c:	bhi	1ba88 <__assert_fail@plt+0xa70c>
   1b990:	mov	r0, #0
   1b994:	add	r2, pc, #0
   1b998:	ldr	pc, [r2, r1, lsl #2]
   1b99c:	andeq	fp, r1, ip, lsl #22
   1b9a0:	andeq	fp, r1, r8, lsl #21
   1b9a4:	andeq	fp, r1, r8, lsl #21
   1b9a8:	andeq	fp, r1, r8, lsl fp
   1b9ac:	andeq	fp, r1, r8, lsl #21
   1b9b0:	andeq	fp, r1, r4, ror sl
   1b9b4:	andeq	fp, r1, r8, lsl #21
   1b9b8:	andeq	fp, r1, r8, lsl #21
   1b9bc:	andeq	fp, r1, r8, lsl #21
   1b9c0:			; <UNDEFINED> instruction: 0x0001babc
   1b9c4:	andeq	fp, r1, r8, lsl #21
   1b9c8:	ldrdeq	fp, [r1], -r0
   1b9cc:	andeq	fp, r1, r8, lsl #21
   1b9d0:	andeq	fp, r1, r8, lsl #21
   1b9d4:	andeq	fp, r1, ip, lsr #22
   1b9d8:	andeq	fp, r1, r8, lsl #21
   1b9dc:	andeq	fp, r1, r8, lsl #21
   1b9e0:	andeq	fp, r1, r8, lsl #21
   1b9e4:	andeq	fp, r1, r4, ror #21
   1b9e8:	andeq	fp, r1, r8, lsl #21
   1b9ec:	andeq	fp, r1, r8, lsl #21
   1b9f0:	andeq	fp, r1, r8, lsl #21
   1b9f4:	andeq	fp, r1, r8, lsl #21
   1b9f8:	andeq	fp, r1, r0, asr #22
   1b9fc:	strdeq	fp, [r1], -r8
   1ba00:	andeq	fp, r1, r8, lsl #21
   1ba04:	andeq	fp, r1, r8, lsl #21
   1ba08:	andeq	fp, r1, r8, lsl #21
   1ba0c:	andeq	fp, r1, r8, lsl #21
   1ba10:	andeq	fp, r1, r8, lsl #21
   1ba14:	andeq	fp, r1, r8, lsl #21
   1ba18:	andeq	fp, r1, r8, lsl #21
   1ba1c:	andeq	fp, r1, r4, asr fp
   1ba20:	andeq	fp, r1, ip, ror #22
   1ba24:	andeq	fp, r1, r8, lsl #21
   1ba28:	andeq	fp, r1, r8, lsl #21
   1ba2c:	andeq	fp, r1, r8, lsl #21
   1ba30:	andeq	fp, r1, r4, ror sl
   1ba34:	andeq	fp, r1, r8, lsl #21
   1ba38:	andeq	fp, r1, r8, lsl #21
   1ba3c:	andeq	fp, r1, r8, lsl #21
   1ba40:			; <UNDEFINED> instruction: 0x0001babc
   1ba44:	andeq	fp, r1, r8, lsl #21
   1ba48:	ldrdeq	fp, [r1], -r0
   1ba4c:	andeq	fp, r1, r8, lsl #21
   1ba50:	andeq	fp, r1, r8, lsl #21
   1ba54:	andeq	fp, r1, r8, lsl #21
   1ba58:	andeq	fp, r1, r8, lsl #21
   1ba5c:	andeq	fp, r1, r8, lsl #21
   1ba60:	andeq	fp, r1, r8, lsl #21
   1ba64:	andeq	fp, r1, r4, ror #21
   1ba68:	andeq	fp, r1, r8, lsl #21
   1ba6c:	andeq	fp, r1, r8, lsl #21
   1ba70:	andeq	fp, r1, r0, ror #22
   1ba74:	add	r0, sp, #8
   1ba78:	mov	r1, r5
   1ba7c:	mov	r2, #3
   1ba80:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1ba84:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1ba88:	ldr	r0, [sp, #8]
   1ba8c:	ldr	r1, [sp, #12]
   1ba90:	ldr	r2, [sp, #4]
   1ba94:	strd	r0, [r2]
   1ba98:	orr	r8, r8, #2
   1ba9c:	b	1bb98 <__assert_fail@plt+0xa81c>
   1baa0:	cmp	r0, #105	; 0x69
   1baa4:	bne	1b984 <__assert_fail@plt+0xa608>
   1baa8:	ldrb	r0, [r6, #2]
   1baac:	mov	r7, #1
   1bab0:	cmp	r0, #66	; 0x42
   1bab4:	movweq	r7, #3
   1bab8:	b	1b984 <__assert_fail@plt+0xa608>
   1babc:	add	r0, sp, #8
   1bac0:	mov	r1, r5
   1bac4:	mov	r2, #1
   1bac8:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1bacc:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1bad0:	add	r0, sp, #8
   1bad4:	mov	r1, r5
   1bad8:	mov	r2, #2
   1badc:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1bae0:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1bae4:	add	r0, sp, #8
   1bae8:	mov	r1, r5
   1baec:	mov	r2, #4
   1baf0:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1baf4:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1baf8:	add	r0, sp, #8
   1bafc:	mov	r1, r5
   1bb00:	mov	r2, #7
   1bb04:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1bb08:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1bb0c:	add	r0, sp, #8
   1bb10:	mov	r1, #1024	; 0x400
   1bb14:	b	1bb68 <__assert_fail@plt+0xa7ec>
   1bb18:	add	r0, sp, #8
   1bb1c:	mov	r1, r5
   1bb20:	mov	r2, #6
   1bb24:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1bb28:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1bb2c:	add	r0, sp, #8
   1bb30:	mov	r1, r5
   1bb34:	mov	r2, #5
   1bb38:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1bb3c:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1bb40:	add	r0, sp, #8
   1bb44:	mov	r1, r5
   1bb48:	mov	r2, #8
   1bb4c:	bl	1bc50 <__assert_fail@plt+0xa8d4>
   1bb50:	b	1bb6c <__assert_fail@plt+0xa7f0>
   1bb54:	add	r0, sp, #8
   1bb58:	mov	r1, #512	; 0x200
   1bb5c:	b	1bb68 <__assert_fail@plt+0xa7ec>
   1bb60:	add	r0, sp, #8
   1bb64:	mov	r1, #2
   1bb68:	bl	1bbc4 <__assert_fail@plt+0xa848>
   1bb6c:	ldr	r1, [r9]
   1bb70:	add	r2, r1, r7
   1bb74:	str	r2, [r9]
   1bb78:	ldrb	r1, [r1, r7]
   1bb7c:	orr	r8, r0, r8
   1bb80:	cmp	r1, #0
   1bb84:	orrne	r8, r8, #2
   1bb88:	ldr	r0, [sp, #8]
   1bb8c:	ldr	r1, [sp, #12]
   1bb90:	ldr	r2, [sp, #4]
   1bb94:	strd	r0, [r2]
   1bb98:	mov	r0, r8
   1bb9c:	sub	sp, fp, #28
   1bba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bba4:	movw	r0, #55745	; 0xd9c1
   1bba8:	movt	r0, #1
   1bbac:	movw	r1, #55783	; 0xd9e7
   1bbb0:	movt	r1, #1
   1bbb4:	movw	r3, #55799	; 0xd9f7
   1bbb8:	movt	r3, #1
   1bbbc:	mov	r2, #85	; 0x55
   1bbc0:	bl	1137c <__assert_fail@plt>
   1bbc4:	push	{r4, r5, r6, r7, fp, lr}
   1bbc8:	add	fp, sp, #16
   1bbcc:	mov	r5, r1
   1bbd0:	mov	r4, r0
   1bbd4:	cmn	r1, #1
   1bbd8:	ble	1bc10 <__assert_fail@plt+0xa894>
   1bbdc:	cmp	r5, #0
   1bbe0:	beq	1bc30 <__assert_fail@plt+0xa8b4>
   1bbe4:	asr	r3, r5, #31
   1bbe8:	mvn	r6, #0
   1bbec:	mvn	r0, #0
   1bbf0:	mvn	r1, #0
   1bbf4:	mov	r2, r5
   1bbf8:	bl	1c530 <__assert_fail@plt+0xb1b4>
   1bbfc:	ldrd	r2, [r4]
   1bc00:	subs	r0, r0, r2
   1bc04:	sbcs	r0, r1, r3
   1bc08:	bcc	1bc20 <__assert_fail@plt+0xa8a4>
   1bc0c:	b	1bc30 <__assert_fail@plt+0xa8b4>
   1bc10:	ldrd	r0, [r4]
   1bc14:	orrs	r0, r0, r1
   1bc18:	beq	1bc30 <__assert_fail@plt+0xa8b4>
   1bc1c:	mvn	r6, #0
   1bc20:	mov	r0, #1
   1bc24:	mvn	r7, #0
   1bc28:	strd	r6, [r4]
   1bc2c:	pop	{r4, r5, r6, r7, fp, pc}
   1bc30:	ldrd	r0, [r4]
   1bc34:	umull	r6, r2, r0, r5
   1bc38:	asr	r3, r5, #31
   1bc3c:	mla	r0, r0, r3, r2
   1bc40:	mla	r7, r1, r5, r0
   1bc44:	mov	r0, #0
   1bc48:	strd	r6, [r4]
   1bc4c:	pop	{r4, r5, r6, r7, fp, pc}
   1bc50:	push	{r4, r5, r6, r7, fp, lr}
   1bc54:	add	fp, sp, #16
   1bc58:	cmp	r2, #0
   1bc5c:	moveq	r6, #0
   1bc60:	moveq	r0, r6
   1bc64:	popeq	{r4, r5, r6, r7, fp, pc}
   1bc68:	mov	r4, r2
   1bc6c:	mov	r5, r1
   1bc70:	mov	r7, r0
   1bc74:	mov	r6, #0
   1bc78:	mov	r0, r7
   1bc7c:	mov	r1, r5
   1bc80:	bl	1bbc4 <__assert_fail@plt+0xa848>
   1bc84:	orr	r6, r0, r6
   1bc88:	subs	r4, r4, #1
   1bc8c:	bne	1bc78 <__assert_fail@plt+0xa8fc>
   1bc90:	mov	r0, r6
   1bc94:	pop	{r4, r5, r6, r7, fp, pc}
   1bc98:	clz	r2, r1
   1bc9c:	lsr	r2, r2, #5
   1bca0:	clz	r3, r0
   1bca4:	lsr	r3, r3, #5
   1bca8:	orrs	r2, r3, r2
   1bcac:	movwne	r1, #1
   1bcb0:	movwne	r0, #1
   1bcb4:	cmp	r1, #0
   1bcb8:	beq	1bce8 <__assert_fail@plt+0xa96c>
   1bcbc:	mvn	r2, #-2147483648	; 0x80000000
   1bcc0:	udiv	r2, r2, r1
   1bcc4:	cmp	r2, r0
   1bcc8:	bcs	1bce8 <__assert_fail@plt+0xa96c>
   1bccc:	push	{fp, lr}
   1bcd0:	mov	fp, sp
   1bcd4:	bl	1125c <__errno_location@plt>
   1bcd8:	mov	r1, #12
   1bcdc:	str	r1, [r0]
   1bce0:	mov	r0, #0
   1bce4:	pop	{fp, pc}
   1bce8:	b	110b8 <calloc@plt>
   1bcec:	cmp	r0, #0
   1bcf0:	movweq	r0, #1
   1bcf4:	cmn	r0, #1
   1bcf8:	ble	1bd00 <__assert_fail@plt+0xa984>
   1bcfc:	b	111d8 <malloc@plt>
   1bd00:	push	{fp, lr}
   1bd04:	mov	fp, sp
   1bd08:	bl	1125c <__errno_location@plt>
   1bd0c:	mov	r1, #12
   1bd10:	str	r1, [r0]
   1bd14:	mov	r0, #0
   1bd18:	pop	{fp, pc}
   1bd1c:	push	{fp, lr}
   1bd20:	mov	fp, sp
   1bd24:	cmp	r0, #0
   1bd28:	beq	1bd44 <__assert_fail@plt+0xa9c8>
   1bd2c:	cmp	r1, #0
   1bd30:	beq	1bd50 <__assert_fail@plt+0xa9d4>
   1bd34:	cmn	r1, #1
   1bd38:	ble	1bd5c <__assert_fail@plt+0xa9e0>
   1bd3c:	pop	{fp, lr}
   1bd40:	b	11154 <realloc@plt>
   1bd44:	mov	r0, r1
   1bd48:	pop	{fp, lr}
   1bd4c:	b	1bcec <__assert_fail@plt+0xa970>
   1bd50:	bl	19090 <__assert_fail@plt+0x7d14>
   1bd54:	mov	r0, #0
   1bd58:	pop	{fp, pc}
   1bd5c:	bl	1125c <__errno_location@plt>
   1bd60:	mov	r1, #12
   1bd64:	str	r1, [r0]
   1bd68:	mov	r0, #0
   1bd6c:	pop	{fp, pc}
   1bd70:	mov	r1, r0
   1bd74:	sub	r2, r0, #65	; 0x41
   1bd78:	mov	r0, #1
   1bd7c:	cmp	r2, #26
   1bd80:	subcs	r2, r1, #97	; 0x61
   1bd84:	cmpcs	r2, #26
   1bd88:	bcs	1bd90 <__assert_fail@plt+0xaa14>
   1bd8c:	bx	lr
   1bd90:	sub	r1, r1, #48	; 0x30
   1bd94:	cmp	r1, #10
   1bd98:	movcs	r0, #0
   1bd9c:	bx	lr
   1bda0:	mov	r1, r0
   1bda4:	sub	r2, r0, #65	; 0x41
   1bda8:	mov	r0, #1
   1bdac:	cmp	r2, #26
   1bdb0:	subcs	r1, r1, #97	; 0x61
   1bdb4:	cmpcs	r1, #26
   1bdb8:	movcs	r0, #0
   1bdbc:	bx	lr
   1bdc0:	mov	r1, #0
   1bdc4:	cmp	r0, #128	; 0x80
   1bdc8:	movwcc	r1, #1
   1bdcc:	mov	r0, r1
   1bdd0:	bx	lr
   1bdd4:	sub	r1, r0, #9
   1bdd8:	clz	r1, r1
   1bddc:	lsr	r1, r1, #5
   1bde0:	sub	r0, r0, #32
   1bde4:	clz	r0, r0
   1bde8:	lsr	r0, r0, #5
   1bdec:	orr	r0, r0, r1
   1bdf0:	bx	lr
   1bdf4:	mov	r1, r0
   1bdf8:	mov	r0, #1
   1bdfc:	cmp	r1, #32
   1be00:	bxcc	lr
   1be04:	cmp	r1, #127	; 0x7f
   1be08:	movne	r0, #0
   1be0c:	bx	lr
   1be10:	sub	r1, r0, #48	; 0x30
   1be14:	mov	r0, #0
   1be18:	cmp	r1, #10
   1be1c:	movwcc	r0, #1
   1be20:	bx	lr
   1be24:	sub	r1, r0, #33	; 0x21
   1be28:	mov	r0, #0
   1be2c:	cmp	r1, #94	; 0x5e
   1be30:	movwcc	r0, #1
   1be34:	bx	lr
   1be38:	sub	r1, r0, #97	; 0x61
   1be3c:	mov	r0, #0
   1be40:	cmp	r1, #26
   1be44:	movwcc	r0, #1
   1be48:	bx	lr
   1be4c:	sub	r1, r0, #32
   1be50:	mov	r0, #0
   1be54:	cmp	r1, #95	; 0x5f
   1be58:	movwcc	r0, #1
   1be5c:	bx	lr
   1be60:	sub	r1, r0, #33	; 0x21
   1be64:	cmp	r1, #93	; 0x5d
   1be68:	bhi	1bff4 <__assert_fail@plt+0xac78>
   1be6c:	mov	r0, #1
   1be70:	add	r2, pc, #0
   1be74:	ldr	pc, [r2, r1, lsl #2]
   1be78:	strdeq	fp, [r1], -r0
   1be7c:	strdeq	fp, [r1], -r0
   1be80:	strdeq	fp, [r1], -r0
   1be84:	strdeq	fp, [r1], -r0
   1be88:	strdeq	fp, [r1], -r0
   1be8c:	strdeq	fp, [r1], -r0
   1be90:	strdeq	fp, [r1], -r0
   1be94:	strdeq	fp, [r1], -r0
   1be98:	strdeq	fp, [r1], -r0
   1be9c:	strdeq	fp, [r1], -r0
   1bea0:	strdeq	fp, [r1], -r0
   1bea4:	strdeq	fp, [r1], -r0
   1bea8:	strdeq	fp, [r1], -r0
   1beac:	strdeq	fp, [r1], -r0
   1beb0:	strdeq	fp, [r1], -r0
   1beb4:	strdeq	fp, [r1], -r4
   1beb8:	strdeq	fp, [r1], -r4
   1bebc:	strdeq	fp, [r1], -r4
   1bec0:	strdeq	fp, [r1], -r4
   1bec4:	strdeq	fp, [r1], -r4
   1bec8:	strdeq	fp, [r1], -r4
   1becc:	strdeq	fp, [r1], -r4
   1bed0:	strdeq	fp, [r1], -r4
   1bed4:	strdeq	fp, [r1], -r4
   1bed8:	strdeq	fp, [r1], -r4
   1bedc:	strdeq	fp, [r1], -r0
   1bee0:	strdeq	fp, [r1], -r0
   1bee4:	strdeq	fp, [r1], -r0
   1bee8:	strdeq	fp, [r1], -r0
   1beec:	strdeq	fp, [r1], -r0
   1bef0:	strdeq	fp, [r1], -r0
   1bef4:	strdeq	fp, [r1], -r0
   1bef8:	strdeq	fp, [r1], -r4
   1befc:	strdeq	fp, [r1], -r4
   1bf00:	strdeq	fp, [r1], -r4
   1bf04:	strdeq	fp, [r1], -r4
   1bf08:	strdeq	fp, [r1], -r4
   1bf0c:	strdeq	fp, [r1], -r4
   1bf10:	strdeq	fp, [r1], -r4
   1bf14:	strdeq	fp, [r1], -r4
   1bf18:	strdeq	fp, [r1], -r4
   1bf1c:	strdeq	fp, [r1], -r4
   1bf20:	strdeq	fp, [r1], -r4
   1bf24:	strdeq	fp, [r1], -r4
   1bf28:	strdeq	fp, [r1], -r4
   1bf2c:	strdeq	fp, [r1], -r4
   1bf30:	strdeq	fp, [r1], -r4
   1bf34:	strdeq	fp, [r1], -r4
   1bf38:	strdeq	fp, [r1], -r4
   1bf3c:	strdeq	fp, [r1], -r4
   1bf40:	strdeq	fp, [r1], -r4
   1bf44:	strdeq	fp, [r1], -r4
   1bf48:	strdeq	fp, [r1], -r4
   1bf4c:	strdeq	fp, [r1], -r4
   1bf50:	strdeq	fp, [r1], -r4
   1bf54:	strdeq	fp, [r1], -r4
   1bf58:	strdeq	fp, [r1], -r4
   1bf5c:	strdeq	fp, [r1], -r4
   1bf60:	strdeq	fp, [r1], -r0
   1bf64:	strdeq	fp, [r1], -r0
   1bf68:	strdeq	fp, [r1], -r0
   1bf6c:	strdeq	fp, [r1], -r0
   1bf70:	strdeq	fp, [r1], -r0
   1bf74:	strdeq	fp, [r1], -r0
   1bf78:	strdeq	fp, [r1], -r4
   1bf7c:	strdeq	fp, [r1], -r4
   1bf80:	strdeq	fp, [r1], -r4
   1bf84:	strdeq	fp, [r1], -r4
   1bf88:	strdeq	fp, [r1], -r4
   1bf8c:	strdeq	fp, [r1], -r4
   1bf90:	strdeq	fp, [r1], -r4
   1bf94:	strdeq	fp, [r1], -r4
   1bf98:	strdeq	fp, [r1], -r4
   1bf9c:	strdeq	fp, [r1], -r4
   1bfa0:	strdeq	fp, [r1], -r4
   1bfa4:	strdeq	fp, [r1], -r4
   1bfa8:	strdeq	fp, [r1], -r4
   1bfac:	strdeq	fp, [r1], -r4
   1bfb0:	strdeq	fp, [r1], -r4
   1bfb4:	strdeq	fp, [r1], -r4
   1bfb8:	strdeq	fp, [r1], -r4
   1bfbc:	strdeq	fp, [r1], -r4
   1bfc0:	strdeq	fp, [r1], -r4
   1bfc4:	strdeq	fp, [r1], -r4
   1bfc8:	strdeq	fp, [r1], -r4
   1bfcc:	strdeq	fp, [r1], -r4
   1bfd0:	strdeq	fp, [r1], -r4
   1bfd4:	strdeq	fp, [r1], -r4
   1bfd8:	strdeq	fp, [r1], -r4
   1bfdc:	strdeq	fp, [r1], -r4
   1bfe0:	strdeq	fp, [r1], -r0
   1bfe4:	strdeq	fp, [r1], -r0
   1bfe8:	strdeq	fp, [r1], -r0
   1bfec:	strdeq	fp, [r1], -r0
   1bff0:	bx	lr
   1bff4:	mov	r0, #0
   1bff8:	bx	lr
   1bffc:	sub	r0, r0, #9
   1c000:	cmp	r0, #23
   1c004:	movhi	r0, #0
   1c008:	bxhi	lr
   1c00c:	bic	r0, r0, #-16777216	; 0xff000000
   1c010:	movw	r1, #31
   1c014:	movt	r1, #128	; 0x80
   1c018:	mov	r2, #1
   1c01c:	and	r0, r2, r1, lsr r0
   1c020:	bx	lr
   1c024:	sub	r1, r0, #65	; 0x41
   1c028:	mov	r0, #0
   1c02c:	cmp	r1, #26
   1c030:	movwcc	r0, #1
   1c034:	bx	lr
   1c038:	mov	r1, r0
   1c03c:	sub	r2, r0, #48	; 0x30
   1c040:	mov	r0, #1
   1c044:	cmp	r2, #22
   1c048:	bhi	1c060 <__assert_fail@plt+0xace4>
   1c04c:	mov	ip, #1
   1c050:	movw	r3, #1023	; 0x3ff
   1c054:	movt	r3, #126	; 0x7e
   1c058:	tst	r3, ip, lsl r2
   1c05c:	bxne	lr
   1c060:	sub	r1, r1, #97	; 0x61
   1c064:	cmp	r1, #6
   1c068:	movcs	r0, #0
   1c06c:	bxcs	lr
   1c070:	bx	lr
   1c074:	sub	r1, r0, #65	; 0x41
   1c078:	cmp	r1, #26
   1c07c:	addcc	r0, r0, #32
   1c080:	bx	lr
   1c084:	sub	r1, r0, #97	; 0x61
   1c088:	cmp	r1, #26
   1c08c:	subcc	r0, r0, #32
   1c090:	bx	lr
   1c094:	push	{r4, r5, r6, sl, fp, lr}
   1c098:	add	fp, sp, #16
   1c09c:	mov	r4, r0
   1c0a0:	bl	111a8 <__fpending@plt>
   1c0a4:	mov	r5, r0
   1c0a8:	mov	r0, r4
   1c0ac:	bl	111b4 <ferror_unlocked@plt>
   1c0b0:	mov	r6, r0
   1c0b4:	mov	r0, r4
   1c0b8:	bl	18ed4 <__assert_fail@plt+0x7b58>
   1c0bc:	cmp	r6, #0
   1c0c0:	beq	1c0e0 <__assert_fail@plt+0xad64>
   1c0c4:	mvn	r4, #0
   1c0c8:	cmp	r0, #0
   1c0cc:	bne	1c114 <__assert_fail@plt+0xad98>
   1c0d0:	bl	1125c <__errno_location@plt>
   1c0d4:	mov	r1, #0
   1c0d8:	str	r1, [r0]
   1c0dc:	b	1c114 <__assert_fail@plt+0xad98>
   1c0e0:	cmp	r0, #0
   1c0e4:	mov	r4, r0
   1c0e8:	mvnne	r4, #0
   1c0ec:	cmp	r5, #0
   1c0f0:	bne	1c114 <__assert_fail@plt+0xad98>
   1c0f4:	cmp	r0, #0
   1c0f8:	beq	1c114 <__assert_fail@plt+0xad98>
   1c0fc:	bl	1125c <__errno_location@plt>
   1c100:	ldr	r0, [r0]
   1c104:	subs	r4, r0, #9
   1c108:	mvnne	r4, #0
   1c10c:	mov	r0, r4
   1c110:	pop	{r4, r5, r6, sl, fp, pc}
   1c114:	mov	r0, r4
   1c118:	pop	{r4, r5, r6, sl, fp, pc}
   1c11c:	sub	sp, sp, #8
   1c120:	push	{fp, lr}
   1c124:	mov	fp, sp
   1c128:	sub	sp, sp, #8
   1c12c:	str	r3, [fp, #12]
   1c130:	str	r2, [fp, #8]
   1c134:	add	r2, fp, #8
   1c138:	str	r2, [sp, #4]
   1c13c:	cmp	r1, #11
   1c140:	bhi	1c180 <__assert_fail@plt+0xae04>
   1c144:	mov	r2, #1
   1c148:	movw	r3, #1300	; 0x514
   1c14c:	tst	r3, r2, lsl r1
   1c150:	bne	1c1d0 <__assert_fail@plt+0xae54>
   1c154:	movw	r3, #2570	; 0xa0a
   1c158:	tst	r3, r2, lsl r1
   1c15c:	bne	1c1a8 <__assert_fail@plt+0xae2c>
   1c160:	cmp	r1, #0
   1c164:	bne	1c180 <__assert_fail@plt+0xae04>
   1c168:	ldr	r1, [sp, #4]
   1c16c:	add	r2, r1, #4
   1c170:	str	r2, [sp, #4]
   1c174:	ldr	r1, [r1]
   1c178:	bl	1c1f4 <__assert_fail@plt+0xae78>
   1c17c:	b	1c1e4 <__assert_fail@plt+0xae68>
   1c180:	sub	r2, r1, #1024	; 0x400
   1c184:	cmp	r2, #10
   1c188:	bhi	1c1d0 <__assert_fail@plt+0xae54>
   1c18c:	mov	ip, #1
   1c190:	movw	r3, #645	; 0x285
   1c194:	tst	r3, ip, lsl r2
   1c198:	bne	1c1d0 <__assert_fail@plt+0xae54>
   1c19c:	movw	r3, #1282	; 0x502
   1c1a0:	tst	r3, ip, lsl r2
   1c1a4:	beq	1c1b0 <__assert_fail@plt+0xae34>
   1c1a8:	bl	112d4 <fcntl64@plt>
   1c1ac:	b	1c1e4 <__assert_fail@plt+0xae68>
   1c1b0:	cmp	r2, #6
   1c1b4:	bne	1c1d0 <__assert_fail@plt+0xae54>
   1c1b8:	ldr	r1, [sp, #4]
   1c1bc:	add	r2, r1, #4
   1c1c0:	str	r2, [sp, #4]
   1c1c4:	ldr	r1, [r1]
   1c1c8:	bl	1c200 <__assert_fail@plt+0xae84>
   1c1cc:	b	1c1e4 <__assert_fail@plt+0xae68>
   1c1d0:	ldr	r2, [sp, #4]
   1c1d4:	add	r3, r2, #4
   1c1d8:	str	r3, [sp, #4]
   1c1dc:	ldr	r2, [r2]
   1c1e0:	bl	112d4 <fcntl64@plt>
   1c1e4:	mov	sp, fp
   1c1e8:	pop	{fp, lr}
   1c1ec:	add	sp, sp, #8
   1c1f0:	bx	lr
   1c1f4:	mov	r2, r1
   1c1f8:	mov	r1, #0
   1c1fc:	b	112d4 <fcntl64@plt>
   1c200:	push	{r4, r5, r6, r7, fp, lr}
   1c204:	add	fp, sp, #16
   1c208:	mov	r5, r1
   1c20c:	mov	r6, r0
   1c210:	movw	r7, #58080	; 0xe2e0
   1c214:	movt	r7, #2
   1c218:	ldr	r0, [r7]
   1c21c:	cmp	r0, #0
   1c220:	blt	1c284 <__assert_fail@plt+0xaf08>
   1c224:	mov	r0, r6
   1c228:	movw	r1, #1030	; 0x406
   1c22c:	mov	r2, r5
   1c230:	bl	112d4 <fcntl64@plt>
   1c234:	mov	r4, r0
   1c238:	cmn	r0, #1
   1c23c:	bgt	1c270 <__assert_fail@plt+0xaef4>
   1c240:	bl	1125c <__errno_location@plt>
   1c244:	ldr	r0, [r0]
   1c248:	cmp	r0, #22
   1c24c:	bne	1c270 <__assert_fail@plt+0xaef4>
   1c250:	mov	r0, r6
   1c254:	mov	r1, r5
   1c258:	bl	1c1f4 <__assert_fail@plt+0xae78>
   1c25c:	mov	r4, r0
   1c260:	cmp	r0, #0
   1c264:	blt	1c2d4 <__assert_fail@plt+0xaf58>
   1c268:	mvn	r0, #0
   1c26c:	b	1c274 <__assert_fail@plt+0xaef8>
   1c270:	mov	r0, #1
   1c274:	str	r0, [r7]
   1c278:	cmp	r4, #0
   1c27c:	bge	1c29c <__assert_fail@plt+0xaf20>
   1c280:	b	1c2d4 <__assert_fail@plt+0xaf58>
   1c284:	mov	r0, r6
   1c288:	mov	r1, r5
   1c28c:	bl	1c1f4 <__assert_fail@plt+0xae78>
   1c290:	mov	r4, r0
   1c294:	cmp	r4, #0
   1c298:	blt	1c2d4 <__assert_fail@plt+0xaf58>
   1c29c:	ldr	r0, [r7]
   1c2a0:	cmn	r0, #1
   1c2a4:	bne	1c2d4 <__assert_fail@plt+0xaf58>
   1c2a8:	mov	r0, r4
   1c2ac:	mov	r1, #1
   1c2b0:	bl	112d4 <fcntl64@plt>
   1c2b4:	cmp	r0, #0
   1c2b8:	blt	1c2dc <__assert_fail@plt+0xaf60>
   1c2bc:	orr	r2, r0, #1
   1c2c0:	mov	r0, r4
   1c2c4:	mov	r1, #2
   1c2c8:	bl	112d4 <fcntl64@plt>
   1c2cc:	cmn	r0, #1
   1c2d0:	beq	1c2dc <__assert_fail@plt+0xaf60>
   1c2d4:	mov	r0, r4
   1c2d8:	pop	{r4, r5, r6, r7, fp, pc}
   1c2dc:	bl	1125c <__errno_location@plt>
   1c2e0:	mov	r5, r0
   1c2e4:	ldr	r6, [r0]
   1c2e8:	mov	r0, r4
   1c2ec:	bl	11358 <close@plt>
   1c2f0:	str	r6, [r5]
   1c2f4:	mvn	r4, #0
   1c2f8:	mov	r0, r4
   1c2fc:	pop	{r4, r5, r6, r7, fp, pc}
   1c300:	push	{fp, lr}
   1c304:	mov	fp, sp
   1c308:	bl	1125c <__errno_location@plt>
   1c30c:	mov	r1, #12
   1c310:	str	r1, [r0]
   1c314:	mov	r0, #0
   1c318:	pop	{fp, pc}
   1c31c:	b	1bcec <__assert_fail@plt+0xa970>
   1c320:	cmp	r1, #0
   1c324:	orreq	r1, r1, #1
   1c328:	b	1bd1c <__assert_fail@plt+0xa9a0>
   1c32c:	b	1bc98 <__assert_fail@plt+0xa91c>
   1c330:	clz	r3, r2
   1c334:	lsr	ip, r3, #5
   1c338:	clz	r3, r1
   1c33c:	lsr	r3, r3, #5
   1c340:	orrs	r3, r3, ip
   1c344:	movwne	r1, #1
   1c348:	movwne	r2, #1
   1c34c:	b	1c3e8 <__assert_fail@plt+0xb06c>
   1c350:	push	{fp, lr}
   1c354:	mov	fp, sp
   1c358:	mov	r0, #14
   1c35c:	bl	112f8 <nl_langinfo@plt>
   1c360:	movw	r1, #52043	; 0xcb4b
   1c364:	movt	r1, #1
   1c368:	cmp	r0, #0
   1c36c:	movne	r1, r0
   1c370:	ldrb	r2, [r1]
   1c374:	movw	r0, #55878	; 0xda46
   1c378:	movt	r0, #1
   1c37c:	cmp	r2, #0
   1c380:	movne	r0, r1
   1c384:	pop	{fp, pc}
   1c388:	push	{r4, r5, r6, r7, fp, lr}
   1c38c:	add	fp, sp, #16
   1c390:	sub	sp, sp, #8
   1c394:	mov	r7, r2
   1c398:	mov	r4, r1
   1c39c:	add	r5, sp, #4
   1c3a0:	cmp	r0, #0
   1c3a4:	movne	r5, r0
   1c3a8:	mov	r0, r5
   1c3ac:	bl	111c0 <mbrtowc@plt>
   1c3b0:	mov	r6, r0
   1c3b4:	cmp	r7, #0
   1c3b8:	beq	1c3dc <__assert_fail@plt+0xb060>
   1c3bc:	cmn	r6, #2
   1c3c0:	bcc	1c3dc <__assert_fail@plt+0xb060>
   1c3c4:	mov	r0, #0
   1c3c8:	bl	1c424 <__assert_fail@plt+0xb0a8>
   1c3cc:	cmp	r0, #0
   1c3d0:	ldrbeq	r0, [r4]
   1c3d4:	streq	r0, [r5]
   1c3d8:	moveq	r6, #1
   1c3dc:	mov	r0, r6
   1c3e0:	sub	sp, fp, #16
   1c3e4:	pop	{r4, r5, r6, r7, fp, pc}
   1c3e8:	cmp	r2, #0
   1c3ec:	beq	1c41c <__assert_fail@plt+0xb0a0>
   1c3f0:	mvn	r3, #0
   1c3f4:	udiv	r3, r3, r2
   1c3f8:	cmp	r3, r1
   1c3fc:	bcs	1c41c <__assert_fail@plt+0xb0a0>
   1c400:	push	{fp, lr}
   1c404:	mov	fp, sp
   1c408:	bl	1125c <__errno_location@plt>
   1c40c:	mov	r1, #12
   1c410:	str	r1, [r0]
   1c414:	mov	r0, #0
   1c418:	pop	{fp, pc}
   1c41c:	mul	r1, r2, r1
   1c420:	b	1bd1c <__assert_fail@plt+0xa9a0>
   1c424:	push	{r4, sl, fp, lr}
   1c428:	add	fp, sp, #8
   1c42c:	sub	sp, sp, #264	; 0x108
   1c430:	add	r1, sp, #7
   1c434:	movw	r2, #257	; 0x101
   1c438:	bl	1c488 <__assert_fail@plt+0xb10c>
   1c43c:	mov	r4, #0
   1c440:	cmp	r0, #0
   1c444:	bne	1c47c <__assert_fail@plt+0xb100>
   1c448:	add	r0, sp, #7
   1c44c:	movw	r1, #55884	; 0xda4c
   1c450:	movt	r1, #1
   1c454:	bl	110dc <strcmp@plt>
   1c458:	cmp	r0, #0
   1c45c:	beq	1c47c <__assert_fail@plt+0xb100>
   1c460:	add	r0, sp, #7
   1c464:	movw	r1, #55886	; 0xda4e
   1c468:	movt	r1, #1
   1c46c:	bl	110dc <strcmp@plt>
   1c470:	mov	r4, r0
   1c474:	cmp	r0, #0
   1c478:	movwne	r4, #1
   1c47c:	mov	r0, r4
   1c480:	sub	sp, fp, #8
   1c484:	pop	{r4, sl, fp, pc}
   1c488:	b	1c48c <__assert_fail@plt+0xb110>
   1c48c:	push	{r4, r5, r6, r7, fp, lr}
   1c490:	add	fp, sp, #16
   1c494:	mov	r6, r2
   1c498:	mov	r4, r1
   1c49c:	bl	1c528 <__assert_fail@plt+0xb1ac>
   1c4a0:	cmp	r0, #0
   1c4a4:	beq	1c4d4 <__assert_fail@plt+0xb158>
   1c4a8:	mov	r7, r0
   1c4ac:	bl	11244 <strlen@plt>
   1c4b0:	cmp	r0, r6
   1c4b4:	bcs	1c4f4 <__assert_fail@plt+0xb178>
   1c4b8:	add	r2, r0, #1
   1c4bc:	mov	r0, r4
   1c4c0:	mov	r1, r7
   1c4c4:	bl	11124 <memcpy@plt>
   1c4c8:	mov	r5, #0
   1c4cc:	mov	r0, r5
   1c4d0:	pop	{r4, r5, r6, r7, fp, pc}
   1c4d4:	mov	r5, #22
   1c4d8:	cmp	r6, #0
   1c4dc:	movne	r0, #0
   1c4e0:	strbne	r0, [r4]
   1c4e4:	movne	r0, r5
   1c4e8:	popne	{r4, r5, r6, r7, fp, pc}
   1c4ec:	mov	r0, r5
   1c4f0:	pop	{r4, r5, r6, r7, fp, pc}
   1c4f4:	mov	r5, #34	; 0x22
   1c4f8:	cmp	r6, #0
   1c4fc:	beq	1c51c <__assert_fail@plt+0xb1a0>
   1c500:	sub	r6, r6, #1
   1c504:	mov	r0, r4
   1c508:	mov	r1, r7
   1c50c:	mov	r2, r6
   1c510:	bl	11124 <memcpy@plt>
   1c514:	mov	r0, #0
   1c518:	strb	r0, [r4, r6]
   1c51c:	mov	r0, r5
   1c520:	pop	{r4, r5, r6, r7, fp, pc}
   1c524:	b	1c528 <__assert_fail@plt+0xb1ac>
   1c528:	mov	r1, #0
   1c52c:	b	112e0 <setlocale@plt>
   1c530:	cmp	r3, #0
   1c534:	cmpeq	r2, #0
   1c538:	bne	1c550 <__assert_fail@plt+0xb1d4>
   1c53c:	cmp	r1, #0
   1c540:	cmpeq	r0, #0
   1c544:	mvnne	r1, #0
   1c548:	mvnne	r0, #0
   1c54c:	b	1c56c <__assert_fail@plt+0xb1f0>
   1c550:	sub	sp, sp, #8
   1c554:	push	{sp, lr}
   1c558:	bl	1c57c <__assert_fail@plt+0xb200>
   1c55c:	ldr	lr, [sp, #4]
   1c560:	add	sp, sp, #8
   1c564:	pop	{r2, r3}
   1c568:	bx	lr
   1c56c:	push	{r1, lr}
   1c570:	mov	r0, #8
   1c574:	bl	110d0 <raise@plt>
   1c578:	pop	{r1, pc}
   1c57c:	cmp	r1, r3
   1c580:	cmpeq	r0, r2
   1c584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c588:	mov	r4, r0
   1c58c:	movcc	r0, #0
   1c590:	mov	r5, r1
   1c594:	ldr	lr, [sp, #36]	; 0x24
   1c598:	movcc	r1, r0
   1c59c:	bcc	1c698 <__assert_fail@plt+0xb31c>
   1c5a0:	cmp	r3, #0
   1c5a4:	clzeq	ip, r2
   1c5a8:	clzne	ip, r3
   1c5ac:	addeq	ip, ip, #32
   1c5b0:	cmp	r5, #0
   1c5b4:	clzeq	r1, r4
   1c5b8:	addeq	r1, r1, #32
   1c5bc:	clzne	r1, r5
   1c5c0:	sub	ip, ip, r1
   1c5c4:	sub	sl, ip, #32
   1c5c8:	lsl	r9, r3, ip
   1c5cc:	rsb	fp, ip, #32
   1c5d0:	orr	r9, r9, r2, lsl sl
   1c5d4:	orr	r9, r9, r2, lsr fp
   1c5d8:	lsl	r8, r2, ip
   1c5dc:	cmp	r5, r9
   1c5e0:	cmpeq	r4, r8
   1c5e4:	movcc	r0, #0
   1c5e8:	movcc	r1, r0
   1c5ec:	bcc	1c608 <__assert_fail@plt+0xb28c>
   1c5f0:	mov	r0, #1
   1c5f4:	subs	r4, r4, r8
   1c5f8:	lsl	r1, r0, sl
   1c5fc:	orr	r1, r1, r0, lsr fp
   1c600:	lsl	r0, r0, ip
   1c604:	sbc	r5, r5, r9
   1c608:	cmp	ip, #0
   1c60c:	beq	1c698 <__assert_fail@plt+0xb31c>
   1c610:	lsr	r6, r8, #1
   1c614:	orr	r6, r6, r9, lsl #31
   1c618:	lsr	r7, r9, #1
   1c61c:	mov	r2, ip
   1c620:	b	1c644 <__assert_fail@plt+0xb2c8>
   1c624:	subs	r3, r4, r6
   1c628:	sbc	r8, r5, r7
   1c62c:	adds	r3, r3, r3
   1c630:	adc	r8, r8, r8
   1c634:	adds	r4, r3, #1
   1c638:	adc	r5, r8, #0
   1c63c:	subs	r2, r2, #1
   1c640:	beq	1c660 <__assert_fail@plt+0xb2e4>
   1c644:	cmp	r5, r7
   1c648:	cmpeq	r4, r6
   1c64c:	bcs	1c624 <__assert_fail@plt+0xb2a8>
   1c650:	adds	r4, r4, r4
   1c654:	adc	r5, r5, r5
   1c658:	subs	r2, r2, #1
   1c65c:	bne	1c644 <__assert_fail@plt+0xb2c8>
   1c660:	lsr	r3, r4, ip
   1c664:	orr	r3, r3, r5, lsl fp
   1c668:	lsr	r2, r5, ip
   1c66c:	orr	r3, r3, r5, lsr sl
   1c670:	adds	r0, r0, r4
   1c674:	mov	r4, r3
   1c678:	lsl	r3, r2, ip
   1c67c:	orr	r3, r3, r4, lsl sl
   1c680:	lsl	ip, r4, ip
   1c684:	orr	r3, r3, r4, lsr fp
   1c688:	adc	r1, r1, r5
   1c68c:	subs	r0, r0, ip
   1c690:	mov	r5, r2
   1c694:	sbc	r1, r1, r3
   1c698:	cmp	lr, #0
   1c69c:	strdne	r4, [lr]
   1c6a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c6a8:	mov	r7, r0
   1c6ac:	ldr	r6, [pc, #72]	; 1c6fc <__assert_fail@plt+0xb380>
   1c6b0:	ldr	r5, [pc, #72]	; 1c700 <__assert_fail@plt+0xb384>
   1c6b4:	add	r6, pc, r6
   1c6b8:	add	r5, pc, r5
   1c6bc:	sub	r6, r6, r5
   1c6c0:	mov	r8, r1
   1c6c4:	mov	r9, r2
   1c6c8:	bl	1108c <fdopen@plt-0x20>
   1c6cc:	asrs	r6, r6, #2
   1c6d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c6d4:	mov	r4, #0
   1c6d8:	add	r4, r4, #1
   1c6dc:	ldr	r3, [r5], #4
   1c6e0:	mov	r2, r9
   1c6e4:	mov	r1, r8
   1c6e8:	mov	r0, r7
   1c6ec:	blx	r3
   1c6f0:	cmp	r6, r4
   1c6f4:	bne	1c6d8 <__assert_fail@plt+0xb35c>
   1c6f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c6fc:	andeq	r1, r1, r0, asr r8
   1c700:	andeq	r1, r1, r8, asr #16
   1c704:	bx	lr
   1c708:	ldr	r3, [pc, #12]	; 1c71c <__assert_fail@plt+0xb3a0>
   1c70c:	mov	r1, #0
   1c710:	add	r3, pc, r3
   1c714:	ldr	r2, [r3]
   1c718:	b	11268 <__cxa_atexit@plt>
   1c71c:	strdeq	r1, [r1], -r4

Disassembly of section .fini:

0001c720 <.fini>:
   1c720:	push	{r3, lr}
   1c724:	pop	{r3, pc}
