
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d58 <.init>:
   10d58:	push	{r3, lr}
   10d5c:	bl	11000 <__assert_fail@plt+0x48>
   10d60:	pop	{r3, pc}

Disassembly of section .plt:

00010d64 <calloc@plt-0x14>:
   10d64:	push	{lr}		; (str lr, [sp, #-4]!)
   10d68:	ldr	lr, [pc, #4]	; 10d74 <calloc@plt-0x4>
   10d6c:	add	lr, pc, lr
   10d70:	ldr	pc, [lr, #8]!
   10d74:	andeq	r6, r1, ip, lsl #5

00010d78 <calloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #652]!	; 0x28c

00010d84 <fputs_unlocked@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #644]!	; 0x284

00010d90 <strcmp@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #636]!	; 0x27c

00010d9c <posix_fadvise64@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #628]!	; 0x274

00010da8 <fflush@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #620]!	; 0x26c

00010db4 <free@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #612]!	; 0x264

00010dc0 <_exit@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #604]!	; 0x25c

00010dcc <memcpy@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #596]!	; 0x254

00010dd8 <mbsinit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #588]!	; 0x24c

00010de4 <dcgettext@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #580]!	; 0x244

00010df0 <dup2@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #572]!	; 0x23c

00010dfc <realloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #564]!	; 0x234

00010e08 <textdomain@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #556]!	; 0x22c

00010e14 <iswprint@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #548]!	; 0x224

00010e20 <fwrite@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #540]!	; 0x21c

00010e2c <lseek64@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #532]!	; 0x214

00010e38 <__ctype_get_mb_cur_max@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #524]!	; 0x20c

00010e44 <__fpending@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #516]!	; 0x204

00010e50 <mbrtowc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #508]!	; 0x1fc

00010e5c <error@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #500]!	; 0x1f4

00010e68 <open64@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #492]!	; 0x1ec

00010e74 <puts@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e80 <malloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #476]!	; 0x1dc

00010e8c <__libc_start_main@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #468]!	; 0x1d4

00010e98 <__freading@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ea4 <__gmon_start__@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #452]!	; 0x1c4

00010eb0 <freopen64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #444]!	; 0x1bc

00010ebc <getopt_long@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ec8 <__ctype_b_loc@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ed4 <exit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ee0 <bcmp@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #412]!	; 0x19c

00010eec <strlen@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #404]!	; 0x194

00010ef8 <__errno_location@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #396]!	; 0x18c

00010f04 <__cxa_atexit@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #388]!	; 0x184

00010f10 <memset@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #380]!	; 0x17c

00010f1c <__printf_chk@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #372]!	; 0x174

00010f28 <fileno@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #364]!	; 0x16c

00010f34 <__fprintf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #356]!	; 0x164

00010f40 <fclose@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #348]!	; 0x15c

00010f4c <fseeko64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #340]!	; 0x154

00010f58 <__uflow@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #332]!	; 0x14c

00010f64 <setlocale@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #324]!	; 0x144

00010f70 <strrchr@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #316]!	; 0x13c

00010f7c <nl_langinfo@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #308]!	; 0x134

00010f88 <bindtextdomain@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #300]!	; 0x12c

00010f94 <strncmp@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #292]!	; 0x124

00010fa0 <abort@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #284]!	; 0x11c

00010fac <close@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #276]!	; 0x114

00010fb8 <__assert_fail@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #268]!	; 0x10c

Disassembly of section .text:

00010fc4 <.text>:
   10fc4:	mov	fp, #0
   10fc8:	mov	lr, #0
   10fcc:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd0:	mov	r2, sp
   10fd4:	push	{r2}		; (str r2, [sp, #-4]!)
   10fd8:	push	{r0}		; (str r0, [sp, #-4]!)
   10fdc:	ldr	ip, [pc, #16]	; 10ff4 <__assert_fail@plt+0x3c>
   10fe0:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe4:	ldr	r0, [pc, #12]	; 10ff8 <__assert_fail@plt+0x40>
   10fe8:	ldr	r3, [pc, #12]	; 10ffc <__assert_fail@plt+0x44>
   10fec:	bl	10e8c <__libc_start_main@plt>
   10ff0:	bl	10fa0 <abort@plt>
   10ff4:	andeq	r5, r1, r8, lsl #15
   10ff8:	andeq	r1, r1, r4, lsl r3
   10ffc:	andeq	r5, r1, r8, lsr #14
   11000:	ldr	r3, [pc, #20]	; 1101c <__assert_fail@plt+0x64>
   11004:	ldr	r2, [pc, #20]	; 11020 <__assert_fail@plt+0x68>
   11008:	add	r3, pc, r3
   1100c:	ldr	r2, [r3, r2]
   11010:	cmp	r2, #0
   11014:	bxeq	lr
   11018:	b	10ea4 <__gmon_start__@plt>
   1101c:	strdeq	r5, [r1], -r0
   11020:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11024:	ldr	r0, [pc, #24]	; 11044 <__assert_fail@plt+0x8c>
   11028:	ldr	r3, [pc, #24]	; 11048 <__assert_fail@plt+0x90>
   1102c:	cmp	r3, r0
   11030:	bxeq	lr
   11034:	ldr	r3, [pc, #16]	; 1104c <__assert_fail@plt+0x94>
   11038:	cmp	r3, #0
   1103c:	bxeq	lr
   11040:	bx	r3
   11044:	andeq	r7, r2, r8, lsr #2
   11048:	andeq	r7, r2, r8, lsr #2
   1104c:	andeq	r0, r0, r0
   11050:	ldr	r0, [pc, #36]	; 1107c <__assert_fail@plt+0xc4>
   11054:	ldr	r1, [pc, #36]	; 11080 <__assert_fail@plt+0xc8>
   11058:	sub	r1, r1, r0
   1105c:	asr	r1, r1, #2
   11060:	add	r1, r1, r1, lsr #31
   11064:	asrs	r1, r1, #1
   11068:	bxeq	lr
   1106c:	ldr	r3, [pc, #16]	; 11084 <__assert_fail@plt+0xcc>
   11070:	cmp	r3, #0
   11074:	bxeq	lr
   11078:	bx	r3
   1107c:	andeq	r7, r2, r8, lsr #2
   11080:	andeq	r7, r2, r8, lsr #2
   11084:	andeq	r0, r0, r0
   11088:	push	{r4, lr}
   1108c:	ldr	r4, [pc, #24]	; 110ac <__assert_fail@plt+0xf4>
   11090:	ldrb	r3, [r4]
   11094:	cmp	r3, #0
   11098:	popne	{r4, pc}
   1109c:	bl	11024 <__assert_fail@plt+0x6c>
   110a0:	mov	r3, #1
   110a4:	strb	r3, [r4]
   110a8:	pop	{r4, pc}
   110ac:	andeq	r7, r2, ip, asr #2
   110b0:	b	11050 <__assert_fail@plt+0x98>
   110b4:	push	{fp, lr}
   110b8:	mov	fp, sp
   110bc:	sub	sp, sp, #56	; 0x38
   110c0:	mov	r4, r0
   110c4:	cmp	r0, #0
   110c8:	bne	112d0 <__assert_fail@plt+0x318>
   110cc:	movw	r1, #22491	; 0x57db
   110d0:	mov	r0, #0
   110d4:	mov	r2, #5
   110d8:	movt	r1, #1
   110dc:	bl	10de4 <dcgettext@plt>
   110e0:	mov	r1, r0
   110e4:	movw	r0, #29032	; 0x7168
   110e8:	movt	r0, #2
   110ec:	ldr	r2, [r0]
   110f0:	mov	r0, #1
   110f4:	bl	10f1c <__printf_chk@plt>
   110f8:	movw	r1, #22765	; 0x58ed
   110fc:	mov	r0, #0
   11100:	mov	r2, #5
   11104:	movt	r1, #1
   11108:	bl	10de4 <dcgettext@plt>
   1110c:	movw	r7, #28996	; 0x7144
   11110:	movt	r7, #2
   11114:	ldr	r1, [r7]
   11118:	bl	10d84 <fputs_unlocked@plt>
   1111c:	movw	r1, #23134	; 0x5a5e
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10de4 <dcgettext@plt>
   11130:	ldr	r1, [r7]
   11134:	bl	10d84 <fputs_unlocked@plt>
   11138:	movw	r1, #22591	; 0x583f
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	movt	r1, #1
   11148:	bl	10de4 <dcgettext@plt>
   1114c:	ldr	r1, [r7]
   11150:	bl	10d84 <fputs_unlocked@plt>
   11154:	movw	r1, #22636	; 0x586c
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10de4 <dcgettext@plt>
   11168:	ldr	r1, [r7]
   1116c:	bl	10d84 <fputs_unlocked@plt>
   11170:	movw	r0, #23432	; 0x5b88
   11174:	mov	r2, #48	; 0x30
   11178:	mov	r6, sp
   1117c:	movw	r5, #22690	; 0x58a2
   11180:	movt	r0, #1
   11184:	movt	r5, #1
   11188:	add	r1, r0, #32
   1118c:	add	r3, r0, #16
   11190:	vld1.64	{d18-d19}, [r0], r2
   11194:	vld1.64	{d16-d17}, [r1]
   11198:	vld1.64	{d20-d21}, [r3]
   1119c:	vldr	d22, [r0]
   111a0:	add	r1, r6, #32
   111a4:	add	r0, r6, #16
   111a8:	vst1.64	{d16-d17}, [r1]
   111ac:	movw	r1, #22821	; 0x5925
   111b0:	vst1.64	{d20-d21}, [r0]
   111b4:	mov	r0, r6
   111b8:	movt	r1, #1
   111bc:	vst1.64	{d18-d19}, [r0], r2
   111c0:	vstr	d22, [r0]
   111c4:	mov	r0, r5
   111c8:	bl	10d90 <strcmp@plt>
   111cc:	cmp	r0, #0
   111d0:	ldrne	r1, [r6, #8]!
   111d4:	cmpne	r1, #0
   111d8:	bne	111c4 <__assert_fail@plt+0x20c>
   111dc:	movw	r1, #22916	; 0x5984
   111e0:	ldr	r6, [r6, #4]
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	movt	r1, #1
   111f0:	bl	10de4 <dcgettext@plt>
   111f4:	movw	r2, #22720	; 0x58c0
   111f8:	movw	r3, #22939	; 0x599b
   111fc:	mov	r1, r0
   11200:	mov	r0, #1
   11204:	movt	r2, #1
   11208:	movt	r3, #1
   1120c:	bl	10f1c <__printf_chk@plt>
   11210:	cmp	r6, #0
   11214:	mov	r0, #5
   11218:	mov	r1, #0
   1121c:	moveq	r6, r5
   11220:	bl	10f64 <setlocale@plt>
   11224:	cmp	r0, #0
   11228:	beq	11260 <__assert_fail@plt+0x2a8>
   1122c:	movw	r1, #22979	; 0x59c3
   11230:	mov	r2, #3
   11234:	movt	r1, #1
   11238:	bl	10f94 <strncmp@plt>
   1123c:	cmp	r0, #0
   11240:	beq	11260 <__assert_fail@plt+0x2a8>
   11244:	movw	r1, #22983	; 0x59c7
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10de4 <dcgettext@plt>
   11258:	ldr	r1, [r7]
   1125c:	bl	10d84 <fputs_unlocked@plt>
   11260:	movw	r1, #23054	; 0x5a0e
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10de4 <dcgettext@plt>
   11274:	movw	r2, #22939	; 0x599b
   11278:	mov	r1, r0
   1127c:	mov	r0, #1
   11280:	mov	r3, r5
   11284:	movt	r2, #1
   11288:	bl	10f1c <__printf_chk@plt>
   1128c:	movw	r1, #23081	; 0x5a29
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10de4 <dcgettext@plt>
   112a0:	mov	r1, r0
   112a4:	movw	r0, #22849	; 0x5941
   112a8:	movw	r3, #23135	; 0x5a5f
   112ac:	cmp	r6, r5
   112b0:	mov	r2, r6
   112b4:	movt	r0, #1
   112b8:	movt	r3, #1
   112bc:	moveq	r3, r0
   112c0:	mov	r0, #1
   112c4:	bl	10f1c <__printf_chk@plt>
   112c8:	mov	r0, r4
   112cc:	bl	10ed4 <exit@plt>
   112d0:	movw	r0, #28984	; 0x7138
   112d4:	movw	r1, #22452	; 0x57b4
   112d8:	mov	r2, #5
   112dc:	movt	r0, #2
   112e0:	movt	r1, #1
   112e4:	ldr	r5, [r0]
   112e8:	mov	r0, #0
   112ec:	bl	10de4 <dcgettext@plt>
   112f0:	mov	r2, r0
   112f4:	movw	r0, #29032	; 0x7168
   112f8:	mov	r1, #1
   112fc:	movt	r0, #2
   11300:	ldr	r3, [r0]
   11304:	mov	r0, r5
   11308:	bl	10f34 <__fprintf_chk@plt>
   1130c:	mov	r0, r4
   11310:	bl	10ed4 <exit@plt>
   11314:	push	{fp, lr}
   11318:	mov	fp, sp
   1131c:	sub	sp, sp, #24
   11320:	mov	r5, r0
   11324:	ldr	r0, [r1]
   11328:	mov	r4, r1
   1132c:	bl	124c0 <__assert_fail@plt+0x1508>
   11330:	movw	r1, #23135	; 0x5a5f
   11334:	mov	r0, #6
   11338:	movt	r1, #1
   1133c:	bl	10f64 <setlocale@plt>
   11340:	movw	r6, #22724	; 0x58c4
   11344:	movw	r1, #22696	; 0x58a8
   11348:	movt	r6, #1
   1134c:	movt	r1, #1
   11350:	mov	r0, r6
   11354:	bl	10f88 <bindtextdomain@plt>
   11358:	mov	r0, r6
   1135c:	bl	10e08 <textdomain@plt>
   11360:	movw	r0, #7700	; 0x1e14
   11364:	movt	r0, #1
   11368:	bl	1578c <__assert_fail@plt+0x47d4>
   1136c:	movw	r0, #28896	; 0x70e0
   11370:	movw	r2, #22734	; 0x58ce
   11374:	movw	r3, #4276	; 0x10b4
   11378:	mov	r6, #1
   1137c:	mov	r1, #0
   11380:	movt	r0, #2
   11384:	movt	r2, #1
   11388:	movt	r3, #1
   1138c:	ldr	r0, [r0]
   11390:	stm	sp, {r0, r6}
   11394:	str	r3, [sp, #8]
   11398:	movw	r3, #22720	; 0x58c0
   1139c:	str	r2, [sp, #12]
   113a0:	movw	r2, #22690	; 0x58a2
   113a4:	str	r1, [sp, #16]
   113a8:	mov	r0, r5
   113ac:	mov	r1, r4
   113b0:	movt	r2, #1
   113b4:	movt	r3, #1
   113b8:	bl	123fc <__assert_fail@plt+0x1444>
   113bc:	movw	r6, #28976	; 0x7130
   113c0:	movt	r6, #2
   113c4:	ldr	r0, [r6]
   113c8:	sub	r1, r5, r0
   113cc:	cmp	r1, #2
   113d0:	blt	11418 <__assert_fail@plt+0x460>
   113d4:	movw	r1, #22748	; 0x58dc
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	movt	r1, #1
   113e4:	bl	10de4 <dcgettext@plt>
   113e8:	mov	r5, r0
   113ec:	ldr	r0, [r6]
   113f0:	add	r0, r4, r0, lsl #2
   113f4:	ldr	r0, [r0, #4]
   113f8:	bl	14484 <__assert_fail@plt+0x34cc>
   113fc:	mov	r3, r0
   11400:	mov	r0, #0
   11404:	mov	r1, #0
   11408:	mov	r2, r5
   1140c:	bl	10e5c <error@plt>
   11410:	mov	r0, #1
   11414:	bl	110b4 <__assert_fail@plt+0xfc>
   11418:	cmp	r0, r5
   1141c:	bne	1142c <__assert_fail@plt+0x474>
   11420:	movw	r0, #23662	; 0x5c6e
   11424:	movt	r0, #1
   11428:	bl	11434 <__assert_fail@plt+0x47c>
   1142c:	ldr	r0, [r4, r0, lsl #2]
   11430:	bl	11434 <__assert_fail@plt+0x47c>
   11434:	push	{fp, lr}
   11438:	mov	fp, sp
   1143c:	sub	sp, sp, #40	; 0x28
   11440:	movw	r1, #23662	; 0x5c6e
   11444:	mov	r9, r0
   11448:	movt	r1, #1
   1144c:	bl	10d90 <strcmp@plt>
   11450:	mov	r4, r0
   11454:	mov	r0, #28
   11458:	bl	15238 <__assert_fail@plt+0x4280>
   1145c:	str	r4, [sp, #20]
   11460:	cmp	r4, #0
   11464:	movw	r4, #28992	; 0x7140
   11468:	mov	sl, r0
   1146c:	movt	r4, #2
   11470:	beq	11490 <__assert_fail@plt+0x4d8>
   11474:	ldr	r2, [r4]
   11478:	movw	r1, #23513	; 0x5bd9
   1147c:	mov	r0, r9
   11480:	movt	r1, #1
   11484:	bl	12038 <__assert_fail@plt+0x1080>
   11488:	cmp	r0, #0
   1148c:	beq	11af0 <__assert_fail@plt+0xb38>
   11490:	ldr	r0, [r4]
   11494:	mov	r1, #2
   11498:	bl	11f04 <__assert_fail@plt+0xf4c>
   1149c:	sub	r6, fp, #8
   114a0:	mov	r0, r6
   114a4:	bl	1449c <__assert_fail@plt+0x34e4>
   114a8:	movw	r5, #23132	; 0x5a5c
   114ac:	movt	r5, #1
   114b0:	mov	r0, #0
   114b4:	mov	r7, r0
   114b8:	ldr	r0, [r4]
   114bc:	mov	r1, r5
   114c0:	mov	r2, #3
   114c4:	mov	r3, r6
   114c8:	bl	144ac <__assert_fail@plt+0x34f4>
   114cc:	cmn	r0, #1
   114d0:	beq	1183c <__assert_fail@plt+0x884>
   114d4:	cmp	r0, #0
   114d8:	str	r7, [fp, #-12]
   114dc:	beq	11afc <__assert_fail@plt+0xb44>
   114e0:	ldr	r5, [sl, #8]
   114e4:	ldr	r7, [fp, #-4]
   114e8:	cmp	r5, #0
   114ec:	beq	11558 <__assert_fail@plt+0x5a0>
   114f0:	cmp	r7, #0
   114f4:	str	sl, [fp, #-16]
   114f8:	ldrne	r1, [r5]
   114fc:	cmpne	r1, #0
   11500:	beq	11a90 <__assert_fail@plt+0xad8>
   11504:	ldr	r6, [fp, #-16]
   11508:	mov	sl, r5
   1150c:	mov	r0, r7
   11510:	bl	10d90 <strcmp@plt>
   11514:	cmp	r0, #0
   11518:	beq	11580 <__assert_fail@plt+0x5c8>
   1151c:	mov	r4, r0
   11520:	mov	r0, #8
   11524:	movwmi	r0, #4
   11528:	ldr	r0, [r5, r0]
   1152c:	cmp	r0, #0
   11530:	beq	115c8 <__assert_fail@plt+0x610>
   11534:	ldrb	r1, [r0, #12]
   11538:	cmp	r1, #0
   1153c:	ldr	r1, [r0]
   11540:	movne	r6, r5
   11544:	movne	sl, r0
   11548:	mov	r5, r0
   1154c:	cmp	r1, #0
   11550:	bne	1150c <__assert_fail@plt+0x554>
   11554:	b	11a90 <__assert_fail@plt+0xad8>
   11558:	mov	r0, #28
   1155c:	bl	15238 <__assert_fail@plt+0x4280>
   11560:	mov	r8, r0
   11564:	cmp	r7, #0
   11568:	beq	11578 <__assert_fail@plt+0x5c0>
   1156c:	mov	r0, r7
   11570:	bl	15344 <__assert_fail@plt+0x438c>
   11574:	str	r0, [r8]
   11578:	str	r8, [sl, #8]
   1157c:	b	11594 <__assert_fail@plt+0x5dc>
   11580:	mov	r8, r5
   11584:	ldr	sl, [fp, #-16]
   11588:	movw	r4, #28992	; 0x7140
   1158c:	sub	r6, fp, #8
   11590:	movt	r4, #2
   11594:	ldr	r7, [fp, #-12]
   11598:	movw	r5, #23132	; 0x5a5c
   1159c:	movt	r5, #1
   115a0:	cmp	r7, #0
   115a4:	mov	r0, r8
   115a8:	beq	114b4 <__assert_fail@plt+0x4fc>
   115ac:	ldr	r1, [r8]
   115b0:	ldr	r0, [r7]
   115b4:	bl	10d90 <strcmp@plt>
   115b8:	cmp	r0, #0
   115bc:	mov	r0, #0
   115c0:	beq	114b4 <__assert_fail@plt+0x4fc>
   115c4:	b	11814 <__assert_fail@plt+0x85c>
   115c8:	mov	r0, #28
   115cc:	str	r9, [sp, #8]
   115d0:	add	r9, r5, #8
   115d4:	bl	15238 <__assert_fail@plt+0x4280>
   115d8:	mov	r8, r0
   115dc:	mov	r0, r7
   115e0:	bl	15344 <__assert_fail@plt+0x438c>
   115e4:	cmp	r4, #0
   115e8:	str	r0, [r8]
   115ec:	addmi	r9, r5, #4
   115f0:	cmp	sl, #0
   115f4:	str	r8, [r9]
   115f8:	ldrne	r1, [sl]
   115fc:	cmpne	r1, #0
   11600:	beq	11ab0 <__assert_fail@plt+0xaf8>
   11604:	mov	r0, r7
   11608:	bl	10d90 <strcmp@plt>
   1160c:	cmp	r0, #0
   11610:	beq	11ab0 <__assert_fail@plt+0xaf8>
   11614:	mov	r4, r0
   11618:	mov	r0, #1
   1161c:	mvnmi	r0, #0
   11620:	ldr	r9, [sp, #8]
   11624:	str	r0, [sp, #16]
   11628:	mov	r0, #8
   1162c:	movwmi	r0, #4
   11630:	ldr	r0, [sl, r0]
   11634:	cmp	r0, r8
   11638:	str	r0, [sp, #12]
   1163c:	beq	116a0 <__assert_fail@plt+0x6e8>
   11640:	ldr	r5, [sp, #12]
   11644:	cmp	r5, #0
   11648:	ldrne	r1, [r5]
   1164c:	cmpne	r1, #0
   11650:	beq	11ad0 <__assert_fail@plt+0xb18>
   11654:	mov	r0, r7
   11658:	bl	10d90 <strcmp@plt>
   1165c:	cmp	r0, #0
   11660:	beq	11ad0 <__assert_fail@plt+0xb18>
   11664:	cmn	r0, #1
   11668:	bgt	11688 <__assert_fail@plt+0x6d0>
   1166c:	mov	r0, #255	; 0xff
   11670:	strb	r0, [r5, #12]
   11674:	add	r0, r5, #4
   11678:	ldr	r5, [r0]
   1167c:	cmp	r5, r8
   11680:	bne	11644 <__assert_fail@plt+0x68c>
   11684:	b	116a0 <__assert_fail@plt+0x6e8>
   11688:	mov	r0, #1
   1168c:	strb	r0, [r5, #12]
   11690:	add	r0, r5, #8
   11694:	ldr	r5, [r0]
   11698:	cmp	r5, r8
   1169c:	bne	11644 <__assert_fail@plt+0x68c>
   116a0:	mov	r0, sl
   116a4:	ldr	r3, [sp, #16]
   116a8:	ldrsb	r2, [r0, #12]!
   116ac:	uxtb	r1, r2
   116b0:	cmp	r1, #0
   116b4:	cmnne	r2, r3
   116b8:	bne	116c8 <__assert_fail@plt+0x710>
   116bc:	add	r1, r1, r3
   116c0:	strb	r1, [r0]
   116c4:	b	11584 <__assert_fail@plt+0x5cc>
   116c8:	ldr	r5, [sp, #12]
   116cc:	ldr	r2, [sp, #16]
   116d0:	add	r3, sl, #8
   116d4:	add	lr, sl, #4
   116d8:	mov	r1, r5
   116dc:	ldrsb	r7, [r1, #12]!
   116e0:	cmp	r2, r7
   116e4:	bne	1172c <__assert_fail@plt+0x774>
   116e8:	cmp	r4, #0
   116ec:	add	r1, r5, #4
   116f0:	ldr	r7, [fp, #-12]
   116f4:	mov	r2, r0
   116f8:	addmi	r1, r5, #8
   116fc:	movmi	r3, lr
   11700:	cmp	r4, #0
   11704:	mov	r4, #0
   11708:	ldr	r1, [r1]
   1170c:	str	r1, [r3]
   11710:	mov	r1, #4
   11714:	movwmi	r1, #8
   11718:	str	sl, [r5, r1]
   1171c:	strb	r4, [r5, #12]
   11720:	movw	r5, #23132	; 0x5a5c
   11724:	movt	r5, #1
   11728:	b	117dc <__assert_fail@plt+0x824>
   1172c:	cmn	r4, #1
   11730:	mov	r4, #0
   11734:	bgt	11750 <__assert_fail@plt+0x798>
   11738:	ldr	r3, [r5, #8]
   1173c:	ldr	r7, [r3, #4]
   11740:	str	r7, [r5, #8]
   11744:	str	r5, [r3, #4]
   11748:	add	r7, r3, #8
   1174c:	b	11770 <__assert_fail@plt+0x7b8>
   11750:	mov	r7, r5
   11754:	ldr	r5, [r5, #4]
   11758:	mov	lr, r3
   1175c:	ldr	r2, [r5, #8]
   11760:	mov	r3, r5
   11764:	str	r2, [r7, #4]
   11768:	str	r7, [r5, #8]
   1176c:	add	r7, r5, #4
   11770:	ldr	ip, [sp, #16]
   11774:	ldr	r5, [r7]
   11778:	str	r3, [sp, #12]
   1177c:	rsb	r2, ip, #0
   11780:	str	r5, [lr]
   11784:	str	sl, [r7]
   11788:	strb	r4, [sl, #12]
   1178c:	strb	r4, [r1]
   11790:	str	r2, [sp, #4]
   11794:	mov	r2, r3
   11798:	ldrsb	r7, [r2, #12]!
   1179c:	cmp	ip, r7
   117a0:	bne	117c0 <__assert_fail@plt+0x808>
   117a4:	ldr	ip, [sp, #4]
   117a8:	ldr	r7, [fp, #-12]
   117ac:	movw	r5, #23132	; 0x5a5c
   117b0:	mov	r1, r0
   117b4:	movt	r5, #1
   117b8:	strb	ip, [r1]
   117bc:	b	117dc <__assert_fail@plt+0x824>
   117c0:	ldr	r0, [sp, #4]
   117c4:	ldr	ip, [sp, #16]
   117c8:	movw	r5, #23132	; 0x5a5c
   117cc:	movt	r5, #1
   117d0:	cmp	r7, r0
   117d4:	ldr	r7, [fp, #-12]
   117d8:	strbeq	ip, [r1]
   117dc:	strb	r4, [r2]
   117e0:	movw	r4, #28992	; 0x7140
   117e4:	ldr	r0, [r6, #8]
   117e8:	movt	r4, #2
   117ec:	cmp	sl, r0
   117f0:	ldr	r0, [sp, #12]
   117f4:	ldr	sl, [fp, #-16]
   117f8:	strne	r0, [r6, #4]
   117fc:	streq	r0, [r6, #8]
   11800:	sub	r6, fp, #8
   11804:	cmp	r7, #0
   11808:	mov	r0, r8
   1180c:	beq	114b4 <__assert_fail@plt+0x4fc>
   11810:	b	115ac <__assert_fail@plt+0x5f4>
   11814:	ldr	r0, [r8, #16]
   11818:	add	r0, r0, #1
   1181c:	str	r0, [r8, #16]
   11820:	mov	r0, #8
   11824:	bl	14e40 <__assert_fail@plt+0x3e88>
   11828:	str	r8, [r0]
   1182c:	ldr	r1, [r7, #24]
   11830:	str	r1, [r0, #4]
   11834:	str	r0, [r7, #24]
   11838:	b	114b0 <__assert_fail@plt+0x4f8>
   1183c:	cmp	r7, #0
   11840:	bne	11b1c <__assert_fail@plt+0xb64>
   11844:	ldr	r5, [sl, #8]
   11848:	cmp	r5, #0
   1184c:	beq	11860 <__assert_fail@plt+0x8a8>
   11850:	movw	r1, #7124	; 0x1bd4
   11854:	mov	r0, r5
   11858:	movt	r1, #1
   1185c:	bl	11d60 <__assert_fail@plt+0xda8>
   11860:	movw	r7, #29008	; 0x7150
   11864:	movt	r7, #2
   11868:	ldr	r0, [r7]
   1186c:	cmp	r0, #0
   11870:	beq	11b58 <__assert_fail@plt+0xba0>
   11874:	cmp	r5, #0
   11878:	beq	11994 <__assert_fail@plt+0x9dc>
   1187c:	movw	r4, #7228	; 0x1c3c
   11880:	mov	r8, #1
   11884:	mov	r6, #1
   11888:	movt	r4, #1
   1188c:	movw	r1, #7152	; 0x1bf0
   11890:	mov	r0, r5
   11894:	mov	sl, r9
   11898:	movt	r1, #1
   1189c:	bl	11d60 <__assert_fail@plt+0xda8>
   118a0:	ldr	r1, [r7, #4]
   118a4:	cmp	r1, #0
   118a8:	bne	118c4 <__assert_fail@plt+0x90c>
   118ac:	ldr	r0, [r7]
   118b0:	b	11920 <__assert_fail@plt+0x968>
   118b4:	ldr	r1, [r1, #20]
   118b8:	cmp	r1, #0
   118bc:	str	r1, [r7, #4]
   118c0:	beq	11920 <__assert_fail@plt+0x968>
   118c4:	ldr	r0, [r1]
   118c8:	ldr	r9, [r1, #24]
   118cc:	bl	10e74 <puts@plt>
   118d0:	ldm	r7, {r0, r1}
   118d4:	strb	r8, [r1, #13]
   118d8:	sub	r0, r0, #1
   118dc:	str	r0, [r7]
   118e0:	cmp	r9, #0
   118e4:	bne	118f8 <__assert_fail@plt+0x940>
   118e8:	b	118b4 <__assert_fail@plt+0x8fc>
   118ec:	ldr	r9, [r9, #4]
   118f0:	cmp	r9, #0
   118f4:	beq	118b4 <__assert_fail@plt+0x8fc>
   118f8:	ldr	r2, [r9]
   118fc:	ldr	r3, [r2, #16]
   11900:	subs	r3, r3, #1
   11904:	str	r3, [r2, #16]
   11908:	bne	118ec <__assert_fail@plt+0x934>
   1190c:	ldr	r3, [r7, #8]
   11910:	str	r2, [r3, #20]
   11914:	ldr	r2, [r9]
   11918:	str	r2, [r7, #8]
   1191c:	b	118ec <__assert_fail@plt+0x934>
   11920:	cmp	r0, #0
   11924:	mov	r9, sl
   11928:	beq	11b5c <__assert_fail@plt+0xba4>
   1192c:	movw	r1, #23225	; 0x5ab9
   11930:	mov	r0, #0
   11934:	mov	r2, #5
   11938:	movt	r1, #1
   1193c:	bl	10de4 <dcgettext@plt>
   11940:	mov	r6, r0
   11944:	mov	r0, #0
   11948:	mov	r1, #3
   1194c:	mov	r2, r9
   11950:	bl	141d8 <__assert_fail@plt+0x3220>
   11954:	mov	r3, r0
   11958:	mov	r0, #0
   1195c:	mov	r1, #0
   11960:	mov	r2, r6
   11964:	bl	10e5c <error@plt>
   11968:	mov	r0, r5
   1196c:	mov	r1, r4
   11970:	bl	11d60 <__assert_fail@plt+0xda8>
   11974:	ldr	r0, [r7, #12]
   11978:	cmp	r0, #0
   1197c:	bne	11968 <__assert_fail@plt+0x9b0>
   11980:	ldr	r0, [r7]
   11984:	mov	r6, #0
   11988:	cmp	r0, #0
   1198c:	bne	1188c <__assert_fail@plt+0x8d4>
   11990:	b	11b5c <__assert_fail@plt+0xba4>
   11994:	movw	r8, #23225	; 0x5ab9
   11998:	mov	r4, #1
   1199c:	mov	r6, #1
   119a0:	movt	r8, #1
   119a4:	ldr	r1, [r7, #4]
   119a8:	cmp	r1, #0
   119ac:	bne	119dc <__assert_fail@plt+0xa24>
   119b0:	b	11a40 <__assert_fail@plt+0xa88>
   119b4:	cmp	r0, #0
   119b8:	beq	11b5c <__assert_fail@plt+0xba4>
   119bc:	ldr	r1, [r7, #4]
   119c0:	cmp	r1, #0
   119c4:	bne	119dc <__assert_fail@plt+0xa24>
   119c8:	b	11a40 <__assert_fail@plt+0xa88>
   119cc:	ldr	r1, [r1, #20]
   119d0:	cmp	r1, #0
   119d4:	str	r1, [r7, #4]
   119d8:	beq	11a38 <__assert_fail@plt+0xa80>
   119dc:	ldr	r0, [r1]
   119e0:	ldr	r5, [r1, #24]
   119e4:	bl	10e74 <puts@plt>
   119e8:	ldm	r7, {r0, r1}
   119ec:	strb	r4, [r1, #13]
   119f0:	sub	r0, r0, #1
   119f4:	str	r0, [r7]
   119f8:	cmp	r5, #0
   119fc:	bne	11a10 <__assert_fail@plt+0xa58>
   11a00:	b	119cc <__assert_fail@plt+0xa14>
   11a04:	ldr	r5, [r5, #4]
   11a08:	cmp	r5, #0
   11a0c:	beq	119cc <__assert_fail@plt+0xa14>
   11a10:	ldr	r2, [r5]
   11a14:	ldr	r3, [r2, #16]
   11a18:	subs	r3, r3, #1
   11a1c:	str	r3, [r2, #16]
   11a20:	bne	11a04 <__assert_fail@plt+0xa4c>
   11a24:	ldr	r3, [r7, #8]
   11a28:	str	r2, [r3, #20]
   11a2c:	ldr	r2, [r5]
   11a30:	str	r2, [r7, #8]
   11a34:	b	11a04 <__assert_fail@plt+0xa4c>
   11a38:	cmp	r0, #0
   11a3c:	beq	119b4 <__assert_fail@plt+0x9fc>
   11a40:	mov	r0, #0
   11a44:	mov	r1, r8
   11a48:	mov	r2, #5
   11a4c:	bl	10de4 <dcgettext@plt>
   11a50:	mov	r5, r0
   11a54:	mov	r0, #0
   11a58:	mov	r1, #3
   11a5c:	mov	r2, r9
   11a60:	bl	141d8 <__assert_fail@plt+0x3220>
   11a64:	mov	r3, r0
   11a68:	mov	r0, #0
   11a6c:	mov	r1, #0
   11a70:	mov	r2, r5
   11a74:	bl	10e5c <error@plt>
   11a78:	ldr	r0, [r7, #12]
   11a7c:	cmp	r0, #0
   11a80:	bne	11a7c <__assert_fail@plt+0xac4>
   11a84:	ldr	r0, [r7]
   11a88:	mov	r6, #0
   11a8c:	b	119b4 <__assert_fail@plt+0x9fc>
   11a90:	movw	r0, #23321	; 0x5b19
   11a94:	movw	r1, #23145	; 0x5a69
   11a98:	movw	r3, #23267	; 0x5ae3
   11a9c:	mov	r2, #140	; 0x8c
   11aa0:	movt	r0, #1
   11aa4:	movt	r1, #1
   11aa8:	movt	r3, #1
   11aac:	bl	10fb8 <__assert_fail@plt>
   11ab0:	movw	r0, #23340	; 0x5b2c
   11ab4:	movw	r1, #23145	; 0x5a69
   11ab8:	movw	r3, #23267	; 0x5ae3
   11abc:	mov	r2, #163	; 0xa3
   11ac0:	movt	r0, #1
   11ac4:	movt	r1, #1
   11ac8:	movt	r3, #1
   11acc:	bl	10fb8 <__assert_fail@plt>
   11ad0:	movw	r0, #23383	; 0x5b57
   11ad4:	movw	r1, #23145	; 0x5a69
   11ad8:	movw	r3, #23267	; 0x5ae3
   11adc:	mov	r2, #177	; 0xb1
   11ae0:	movt	r0, #1
   11ae4:	movt	r1, #1
   11ae8:	movt	r3, #1
   11aec:	bl	10fb8 <__assert_fail@plt>
   11af0:	bl	10ef8 <__errno_location@plt>
   11af4:	ldr	r4, [r0]
   11af8:	b	11bac <__assert_fail@plt+0xbf4>
   11afc:	movw	r0, #23136	; 0x5a60
   11b00:	movw	r1, #23145	; 0x5a69
   11b04:	movw	r3, #23157	; 0x5a75
   11b08:	movw	r2, #458	; 0x1ca
   11b0c:	movt	r0, #1
   11b10:	movt	r1, #1
   11b14:	movt	r3, #1
   11b18:	bl	10fb8 <__assert_fail@plt>
   11b1c:	movw	r1, #23182	; 0x5a8e
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	movt	r1, #1
   11b2c:	bl	10de4 <dcgettext@plt>
   11b30:	mov	r4, r0
   11b34:	mov	r0, #0
   11b38:	mov	r1, #3
   11b3c:	mov	r2, r9
   11b40:	bl	141d8 <__assert_fail@plt+0x3220>
   11b44:	mov	r3, r0
   11b48:	mov	r0, #1
   11b4c:	mov	r1, #0
   11b50:	mov	r2, r4
   11b54:	bl	10e5c <error@plt>
   11b58:	mov	r6, #1
   11b5c:	movw	r0, #28992	; 0x7140
   11b60:	movt	r0, #2
   11b64:	ldr	r0, [r0]
   11b68:	bl	11f40 <__assert_fail@plt+0xf88>
   11b6c:	cmp	r0, #0
   11b70:	bne	11b80 <__assert_fail@plt+0xbc8>
   11b74:	mov	r0, #1
   11b78:	bic	r0, r0, r6
   11b7c:	bl	10ed4 <exit@plt>
   11b80:	bl	10ef8 <__errno_location@plt>
   11b84:	ldr	r4, [r0]
   11b88:	ldr	r0, [sp, #20]
   11b8c:	cmp	r0, #0
   11b90:	bne	11bac <__assert_fail@plt+0xbf4>
   11b94:	movw	r1, #23252	; 0x5ad4
   11b98:	mov	r0, #0
   11b9c:	mov	r2, #5
   11ba0:	movt	r1, #1
   11ba4:	bl	10de4 <dcgettext@plt>
   11ba8:	b	11bbc <__assert_fail@plt+0xc04>
   11bac:	mov	r0, #0
   11bb0:	mov	r1, #3
   11bb4:	mov	r2, r9
   11bb8:	bl	141d8 <__assert_fail@plt+0x3220>
   11bbc:	movw	r2, #23519	; 0x5bdf
   11bc0:	mov	r3, r0
   11bc4:	mov	r0, #1
   11bc8:	mov	r1, r4
   11bcc:	movt	r2, #1
   11bd0:	bl	10e5c <error@plt>
   11bd4:	movw	r0, #29008	; 0x7150
   11bd8:	movt	r0, #2
   11bdc:	ldr	r1, [r0]
   11be0:	add	r1, r1, #1
   11be4:	str	r1, [r0]
   11be8:	mov	r0, #0
   11bec:	bx	lr
   11bf0:	ldr	r1, [r0, #16]
   11bf4:	cmp	r1, #0
   11bf8:	bne	11c08 <__assert_fail@plt+0xc50>
   11bfc:	ldrb	r1, [r0, #13]
   11c00:	cmp	r1, #0
   11c04:	beq	11c10 <__assert_fail@plt+0xc58>
   11c08:	mov	r0, #0
   11c0c:	bx	lr
   11c10:	movw	r1, #29008	; 0x7150
   11c14:	movt	r1, #2
   11c18:	ldr	r2, [r1, #4]!
   11c1c:	ldr	r3, [r1, #4]
   11c20:	cmp	r2, #0
   11c24:	mov	r2, r1
   11c28:	addne	r2, r3, #20
   11c2c:	str	r0, [r2]
   11c30:	str	r0, [r1, #4]
   11c34:	mov	r0, #0
   11c38:	bx	lr
   11c3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c40:	add	fp, sp, #24
   11c44:	ldr	r1, [r0, #16]
   11c48:	mov	r4, r0
   11c4c:	mov	r0, #0
   11c50:	cmp	r1, #0
   11c54:	beq	11d5c <__assert_fail@plt+0xda4>
   11c58:	movw	r6, #29008	; 0x7150
   11c5c:	movt	r6, #2
   11c60:	ldr	r7, [r6, #12]
   11c64:	cmp	r7, #0
   11c68:	beq	11d0c <__assert_fail@plt+0xd54>
   11c6c:	mov	r8, r4
   11c70:	ldr	r1, [r8, #24]!
   11c74:	cmp	r1, #0
   11c78:	beq	11d5c <__assert_fail@plt+0xda4>
   11c7c:	ldr	r2, [r1]
   11c80:	cmp	r2, r7
   11c84:	beq	11ca8 <__assert_fail@plt+0xcf0>
   11c88:	mov	r2, r1
   11c8c:	ldr	r1, [r1, #4]
   11c90:	cmp	r1, #0
   11c94:	beq	11d5c <__assert_fail@plt+0xda4>
   11c98:	ldr	r3, [r1]
   11c9c:	cmp	r3, r7
   11ca0:	bne	11c88 <__assert_fail@plt+0xcd0>
   11ca4:	add	r8, r2, #4
   11ca8:	ldr	r1, [r4, #20]
   11cac:	cmp	r1, #0
   11cb0:	beq	11d08 <__assert_fail@plt+0xd50>
   11cb4:	movw	r5, #23519	; 0x5bdf
   11cb8:	mov	r9, #0
   11cbc:	movt	r5, #1
   11cc0:	ldr	r3, [r7]
   11cc4:	ldr	r7, [r7, #20]
   11cc8:	mov	r0, #0
   11ccc:	mov	r1, #0
   11cd0:	mov	r2, r5
   11cd4:	bl	10e5c <error@plt>
   11cd8:	ldr	r0, [r6, #12]
   11cdc:	cmp	r0, r4
   11ce0:	beq	11d14 <__assert_fail@plt+0xd5c>
   11ce4:	cmp	r7, #0
   11ce8:	str	r9, [r0, #20]
   11cec:	str	r7, [r6, #12]
   11cf0:	bne	11cc0 <__assert_fail@plt+0xd08>
   11cf4:	mov	r4, r7
   11cf8:	mov	r0, #1
   11cfc:	cmp	r4, #0
   11d00:	bne	11d3c <__assert_fail@plt+0xd84>
   11d04:	b	11d5c <__assert_fail@plt+0xda4>
   11d08:	str	r7, [r4, #20]
   11d0c:	str	r4, [r6, #12]
   11d10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d14:	ldr	r0, [r8]
   11d18:	ldr	r1, [r0]
   11d1c:	ldr	r2, [r1, #16]
   11d20:	sub	r2, r2, #1
   11d24:	str	r2, [r1, #16]
   11d28:	ldr	r0, [r0, #4]
   11d2c:	str	r0, [r8]
   11d30:	mov	r0, #1
   11d34:	cmp	r4, #0
   11d38:	beq	11d5c <__assert_fail@plt+0xda4>
   11d3c:	mov	r1, #0
   11d40:	ldr	r2, [r4, #20]
   11d44:	str	r1, [r4, #20]
   11d48:	cmp	r2, #0
   11d4c:	mov	r4, r2
   11d50:	bne	11d40 <__assert_fail@plt+0xd88>
   11d54:	mov	r1, #0
   11d58:	str	r1, [r6, #12]
   11d5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d60:	push	{r4, r5, r6, sl, fp, lr}
   11d64:	add	fp, sp, #16
   11d68:	mov	r4, r0
   11d6c:	ldr	r0, [r0, #4]
   11d70:	cmp	r0, #0
   11d74:	beq	11d94 <__assert_fail@plt+0xddc>
   11d78:	mov	r5, r1
   11d7c:	bl	11d60 <__assert_fail@plt+0xda8>
   11d80:	mov	r1, r5
   11d84:	mov	r5, #1
   11d88:	cmp	r0, #0
   11d8c:	beq	11da0 <__assert_fail@plt+0xde8>
   11d90:	b	11dd4 <__assert_fail@plt+0xe1c>
   11d94:	ldr	r0, [r4, #8]
   11d98:	cmp	r0, #0
   11d9c:	beq	11ddc <__assert_fail@plt+0xe24>
   11da0:	mov	r0, r4
   11da4:	mov	r6, r1
   11da8:	blx	r1
   11dac:	mov	r5, #1
   11db0:	cmp	r0, #0
   11db4:	bne	11dd4 <__assert_fail@plt+0xe1c>
   11db8:	ldr	r0, [r4, #8]
   11dbc:	cmp	r0, #0
   11dc0:	beq	11de8 <__assert_fail@plt+0xe30>
   11dc4:	mov	r1, r6
   11dc8:	bl	11d60 <__assert_fail@plt+0xda8>
   11dcc:	cmp	r0, #0
   11dd0:	moveq	r5, #0
   11dd4:	mov	r0, r5
   11dd8:	pop	{r4, r5, r6, sl, fp, pc}
   11ddc:	mov	r0, r4
   11de0:	pop	{r4, r5, r6, sl, fp, lr}
   11de4:	bx	r1
   11de8:	mov	r5, #0
   11dec:	mov	r0, r5
   11df0:	pop	{r4, r5, r6, sl, fp, pc}
   11df4:	movw	r1, #29024	; 0x7160
   11df8:	movt	r1, #2
   11dfc:	str	r0, [r1, #4]
   11e00:	bx	lr
   11e04:	movw	r1, #29024	; 0x7160
   11e08:	movt	r1, #2
   11e0c:	strb	r0, [r1]
   11e10:	bx	lr
   11e14:	push	{r4, r5, r6, sl, fp, lr}
   11e18:	add	fp, sp, #16
   11e1c:	sub	sp, sp, #8
   11e20:	movw	r0, #28996	; 0x7144
   11e24:	movt	r0, #2
   11e28:	ldr	r0, [r0]
   11e2c:	bl	15498 <__assert_fail@plt+0x44e0>
   11e30:	cmp	r0, #0
   11e34:	beq	11e5c <__assert_fail@plt+0xea4>
   11e38:	movw	r5, #29024	; 0x7160
   11e3c:	movt	r5, #2
   11e40:	ldrb	r0, [r5]
   11e44:	cmp	r0, #0
   11e48:	beq	11e88 <__assert_fail@plt+0xed0>
   11e4c:	bl	10ef8 <__errno_location@plt>
   11e50:	ldr	r0, [r0]
   11e54:	cmp	r0, #32
   11e58:	bne	11e88 <__assert_fail@plt+0xed0>
   11e5c:	movw	r0, #28984	; 0x7138
   11e60:	movt	r0, #2
   11e64:	ldr	r0, [r0]
   11e68:	bl	15498 <__assert_fail@plt+0x44e0>
   11e6c:	cmp	r0, #0
   11e70:	subeq	sp, fp, #16
   11e74:	popeq	{r4, r5, r6, sl, fp, pc}
   11e78:	movw	r0, #28900	; 0x70e4
   11e7c:	movt	r0, #2
   11e80:	ldr	r0, [r0]
   11e84:	bl	10dc0 <_exit@plt>
   11e88:	movw	r1, #23503	; 0x5bcf
   11e8c:	mov	r0, #0
   11e90:	mov	r2, #5
   11e94:	movt	r1, #1
   11e98:	bl	10de4 <dcgettext@plt>
   11e9c:	ldr	r6, [r5, #4]
   11ea0:	mov	r4, r0
   11ea4:	bl	10ef8 <__errno_location@plt>
   11ea8:	ldr	r5, [r0]
   11eac:	cmp	r6, #0
   11eb0:	bne	11ecc <__assert_fail@plt+0xf14>
   11eb4:	movw	r2, #23519	; 0x5bdf
   11eb8:	mov	r0, #0
   11ebc:	mov	r1, r5
   11ec0:	mov	r3, r4
   11ec4:	movt	r2, #1
   11ec8:	b	11eec <__assert_fail@plt+0xf34>
   11ecc:	mov	r0, r6
   11ed0:	bl	140fc <__assert_fail@plt+0x3144>
   11ed4:	movw	r2, #23515	; 0x5bdb
   11ed8:	mov	r3, r0
   11edc:	str	r4, [sp]
   11ee0:	mov	r0, #0
   11ee4:	mov	r1, r5
   11ee8:	movt	r2, #1
   11eec:	bl	10e5c <error@plt>
   11ef0:	movw	r0, #28900	; 0x70e4
   11ef4:	movt	r0, #2
   11ef8:	ldr	r0, [r0]
   11efc:	bl	10dc0 <_exit@plt>
   11f00:	b	10d9c <posix_fadvise64@plt>
   11f04:	cmp	r0, #0
   11f08:	bxeq	lr
   11f0c:	push	{r4, sl, fp, lr}
   11f10:	add	fp, sp, #8
   11f14:	sub	sp, sp, #16
   11f18:	mov	r4, r1
   11f1c:	bl	10f28 <fileno@plt>
   11f20:	mov	r1, #0
   11f24:	mov	r2, #0
   11f28:	mov	r3, #0
   11f2c:	str	r1, [sp]
   11f30:	stmib	sp, {r1, r4}
   11f34:	bl	10d9c <posix_fadvise64@plt>
   11f38:	sub	sp, fp, #8
   11f3c:	pop	{r4, sl, fp, pc}
   11f40:	push	{r4, r5, r6, sl, fp, lr}
   11f44:	add	fp, sp, #16
   11f48:	sub	sp, sp, #8
   11f4c:	mov	r4, r0
   11f50:	bl	10f28 <fileno@plt>
   11f54:	cmn	r0, #1
   11f58:	ble	11fcc <__assert_fail@plt+0x1014>
   11f5c:	mov	r0, r4
   11f60:	bl	10e98 <__freading@plt>
   11f64:	cmp	r0, #0
   11f68:	beq	11f94 <__assert_fail@plt+0xfdc>
   11f6c:	mov	r0, r4
   11f70:	bl	10f28 <fileno@plt>
   11f74:	mov	r1, #1
   11f78:	mov	r2, #0
   11f7c:	mov	r3, #0
   11f80:	str	r1, [sp]
   11f84:	bl	10e2c <lseek64@plt>
   11f88:	and	r0, r0, r1
   11f8c:	cmn	r0, #1
   11f90:	beq	11fcc <__assert_fail@plt+0x1014>
   11f94:	mov	r0, r4
   11f98:	bl	11fdc <__assert_fail@plt+0x1024>
   11f9c:	cmp	r0, #0
   11fa0:	beq	11fcc <__assert_fail@plt+0x1014>
   11fa4:	bl	10ef8 <__errno_location@plt>
   11fa8:	ldr	r6, [r0]
   11fac:	mov	r5, r0
   11fb0:	mov	r0, r4
   11fb4:	bl	10f40 <fclose@plt>
   11fb8:	cmp	r6, #0
   11fbc:	strne	r6, [r5]
   11fc0:	mvnne	r0, #0
   11fc4:	sub	sp, fp, #16
   11fc8:	pop	{r4, r5, r6, sl, fp, pc}
   11fcc:	mov	r0, r4
   11fd0:	sub	sp, fp, #16
   11fd4:	pop	{r4, r5, r6, sl, fp, lr}
   11fd8:	b	10f40 <fclose@plt>
   11fdc:	push	{r4, sl, fp, lr}
   11fe0:	add	fp, sp, #8
   11fe4:	sub	sp, sp, #8
   11fe8:	mov	r4, r0
   11fec:	cmp	r0, #0
   11ff0:	beq	12028 <__assert_fail@plt+0x1070>
   11ff4:	mov	r0, r4
   11ff8:	bl	10e98 <__freading@plt>
   11ffc:	cmp	r0, #0
   12000:	beq	12028 <__assert_fail@plt+0x1070>
   12004:	ldrb	r0, [r4, #1]
   12008:	tst	r0, #1
   1200c:	beq	12028 <__assert_fail@plt+0x1070>
   12010:	mov	r0, #1
   12014:	mov	r2, #0
   12018:	mov	r3, #0
   1201c:	str	r0, [sp]
   12020:	mov	r0, r4
   12024:	bl	122a4 <__assert_fail@plt+0x12ec>
   12028:	mov	r0, r4
   1202c:	sub	sp, fp, #8
   12030:	pop	{r4, sl, fp, lr}
   12034:	b	10da8 <fflush@plt>
   12038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1203c:	add	fp, sp, #28
   12040:	sub	sp, sp, #4
   12044:	mov	r5, r0
   12048:	mov	r0, r2
   1204c:	mov	r4, r2
   12050:	mov	r9, r1
   12054:	bl	10f28 <fileno@plt>
   12058:	mov	r7, #0
   1205c:	cmp	r0, #0
   12060:	beq	120a0 <__assert_fail@plt+0x10e8>
   12064:	cmp	r0, #1
   12068:	beq	120ac <__assert_fail@plt+0x10f4>
   1206c:	cmp	r0, #2
   12070:	beq	12088 <__assert_fail@plt+0x10d0>
   12074:	mov	r0, #2
   12078:	mov	r1, #2
   1207c:	bl	10df0 <dup2@plt>
   12080:	subs	r7, r0, #2
   12084:	movwne	r7, #1
   12088:	mov	r0, #1
   1208c:	mov	r1, #1
   12090:	bl	10df0 <dup2@plt>
   12094:	subs	r6, r0, #1
   12098:	movwne	r6, #1
   1209c:	b	120b0 <__assert_fail@plt+0x10f8>
   120a0:	mov	r6, #0
   120a4:	mov	r8, #0
   120a8:	b	12178 <__assert_fail@plt+0x11c0>
   120ac:	mov	r6, #0
   120b0:	mov	r0, #0
   120b4:	mov	r1, #0
   120b8:	mov	sl, #0
   120bc:	bl	10df0 <dup2@plt>
   120c0:	cmp	r0, #0
   120c4:	mov	r8, #0
   120c8:	beq	12108 <__assert_fail@plt+0x1150>
   120cc:	movw	r0, #23522	; 0x5be2
   120d0:	mov	r1, #0
   120d4:	movt	r0, #1
   120d8:	bl	10e68 <open64@plt>
   120dc:	cmp	r0, #0
   120e0:	beq	12104 <__assert_fail@plt+0x114c>
   120e4:	cmn	r0, #1
   120e8:	ble	12228 <__assert_fail@plt+0x1270>
   120ec:	bl	10fac <close@plt>
   120f0:	bl	10ef8 <__errno_location@plt>
   120f4:	mov	r4, r0
   120f8:	mov	r0, #9
   120fc:	str	r0, [r4]
   12100:	b	12230 <__assert_fail@plt+0x1278>
   12104:	mov	r8, #1
   12108:	cmp	r6, #0
   1210c:	beq	1212c <__assert_fail@plt+0x1174>
   12110:	movw	r0, #23522	; 0x5be2
   12114:	mov	r1, #0
   12118:	movt	r0, #1
   1211c:	bl	10e68 <open64@plt>
   12120:	mov	sl, #1
   12124:	cmp	r0, #1
   12128:	bne	121f8 <__assert_fail@plt+0x1240>
   1212c:	cmp	r7, #0
   12130:	beq	12170 <__assert_fail@plt+0x11b8>
   12134:	movw	r0, #23522	; 0x5be2
   12138:	mov	r1, #0
   1213c:	movt	r0, #1
   12140:	bl	10e68 <open64@plt>
   12144:	mov	r7, #1
   12148:	cmp	r0, #2
   1214c:	beq	12174 <__assert_fail@plt+0x11bc>
   12150:	cmn	r0, #1
   12154:	ble	12280 <__assert_fail@plt+0x12c8>
   12158:	bl	10fac <close@plt>
   1215c:	bl	10ef8 <__errno_location@plt>
   12160:	mov	r4, r0
   12164:	mov	r0, #9
   12168:	str	r0, [r4]
   1216c:	b	12288 <__assert_fail@plt+0x12d0>
   12170:	mov	r7, #0
   12174:	mov	r6, sl
   12178:	mov	r0, r5
   1217c:	mov	r1, r9
   12180:	mov	r2, r4
   12184:	bl	10eb0 <freopen64@plt>
   12188:	mov	r5, r0
   1218c:	bl	10ef8 <__errno_location@plt>
   12190:	ldr	r9, [r0]
   12194:	mov	r4, r0
   12198:	cmp	r7, #0
   1219c:	beq	121a8 <__assert_fail@plt+0x11f0>
   121a0:	mov	r0, #2
   121a4:	bl	10fac <close@plt>
   121a8:	cmp	r6, #0
   121ac:	beq	121b8 <__assert_fail@plt+0x1200>
   121b0:	mov	r0, #1
   121b4:	bl	10fac <close@plt>
   121b8:	cmp	r8, #0
   121bc:	beq	121dc <__assert_fail@plt+0x1224>
   121c0:	mov	r0, #0
   121c4:	bl	10fac <close@plt>
   121c8:	cmp	r5, #0
   121cc:	beq	121e4 <__assert_fail@plt+0x122c>
   121d0:	mov	r0, r5
   121d4:	sub	sp, fp, #28
   121d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121dc:	cmp	r5, #0
   121e0:	bne	121d0 <__assert_fail@plt+0x1218>
   121e4:	mov	r5, #0
   121e8:	str	r9, [r4]
   121ec:	mov	r0, r5
   121f0:	sub	sp, fp, #28
   121f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121f8:	cmn	r0, #1
   121fc:	ble	12248 <__assert_fail@plt+0x1290>
   12200:	bl	10fac <close@plt>
   12204:	bl	10ef8 <__errno_location@plt>
   12208:	mov	r4, r0
   1220c:	mov	r0, #9
   12210:	str	r0, [r4]
   12214:	ldr	r9, [r4]
   12218:	mov	r5, #0
   1221c:	cmp	r7, #0
   12220:	beq	121b0 <__assert_fail@plt+0x11f8>
   12224:	b	12260 <__assert_fail@plt+0x12a8>
   12228:	bl	10ef8 <__errno_location@plt>
   1222c:	mov	r4, r0
   12230:	ldr	r9, [r4]
   12234:	mov	r8, #1
   12238:	mov	r5, #0
   1223c:	cmp	r7, #0
   12240:	bne	121a0 <__assert_fail@plt+0x11e8>
   12244:	b	121a8 <__assert_fail@plt+0x11f0>
   12248:	bl	10ef8 <__errno_location@plt>
   1224c:	mov	r4, r0
   12250:	ldr	r9, [r4]
   12254:	mov	r5, #0
   12258:	cmp	r7, #0
   1225c:	beq	121b0 <__assert_fail@plt+0x11f8>
   12260:	mov	r0, #2
   12264:	bl	10fac <close@plt>
   12268:	mov	r0, #1
   1226c:	bl	10fac <close@plt>
   12270:	mov	r5, #0
   12274:	cmp	r8, #0
   12278:	beq	121e4 <__assert_fail@plt+0x122c>
   1227c:	b	121c0 <__assert_fail@plt+0x1208>
   12280:	bl	10ef8 <__errno_location@plt>
   12284:	mov	r4, r0
   12288:	ldr	r9, [r4]
   1228c:	mov	r0, #2
   12290:	bl	10fac <close@plt>
   12294:	mov	r5, #0
   12298:	cmp	sl, #0
   1229c:	bne	121b0 <__assert_fail@plt+0x11f8>
   122a0:	b	121b8 <__assert_fail@plt+0x1200>
   122a4:	push	{r4, r5, r6, r7, fp, lr}
   122a8:	add	fp, sp, #16
   122ac:	sub	sp, sp, #8
   122b0:	mov	r4, r0
   122b4:	ldr	r0, [r0, #4]
   122b8:	mov	r5, r3
   122bc:	mov	r6, r2
   122c0:	ldr	r1, [r4, #8]
   122c4:	cmp	r1, r0
   122c8:	bne	122e4 <__assert_fail@plt+0x132c>
   122cc:	ldrd	r0, [r4, #16]
   122d0:	cmp	r1, r0
   122d4:	bne	122e4 <__assert_fail@plt+0x132c>
   122d8:	ldr	r0, [r4, #36]	; 0x24
   122dc:	cmp	r0, #0
   122e0:	beq	122fc <__assert_fail@plt+0x1344>
   122e4:	mov	r0, r4
   122e8:	mov	r2, r6
   122ec:	mov	r3, r5
   122f0:	sub	sp, fp, #16
   122f4:	pop	{r4, r5, r6, r7, fp, lr}
   122f8:	b	10f4c <fseeko64@plt>
   122fc:	ldr	r7, [fp, #8]
   12300:	mov	r0, r4
   12304:	bl	10f28 <fileno@plt>
   12308:	mov	r2, r6
   1230c:	mov	r3, r5
   12310:	str	r7, [sp]
   12314:	bl	10e2c <lseek64@plt>
   12318:	and	r2, r0, r1
   1231c:	cmn	r2, #1
   12320:	beq	12340 <__assert_fail@plt+0x1388>
   12324:	strd	r0, [r4, #80]	; 0x50
   12328:	ldr	r0, [r4]
   1232c:	bic	r0, r0, #16
   12330:	str	r0, [r4]
   12334:	mov	r0, #0
   12338:	sub	sp, fp, #16
   1233c:	pop	{r4, r5, r6, r7, fp, pc}
   12340:	mvn	r0, #0
   12344:	sub	sp, fp, #16
   12348:	pop	{r4, r5, r6, r7, fp, pc}
   1234c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12350:	add	fp, sp, #24
   12354:	sub	sp, sp, #8
   12358:	movw	r6, #29000	; 0x7148
   1235c:	mov	r4, #0
   12360:	cmp	r0, #2
   12364:	movt	r6, #2
   12368:	ldr	r7, [r6]
   1236c:	str	r4, [r6]
   12370:	bne	123e4 <__assert_fail@plt+0x142c>
   12374:	mov	r8, r3
   12378:	movw	r3, #23548	; 0x5bfc
   1237c:	mov	r5, r2
   12380:	movw	r2, #23532	; 0x5bec
   12384:	mov	r0, #2
   12388:	str	r4, [sp]
   1238c:	movt	r2, #1
   12390:	movt	r3, #1
   12394:	bl	10ebc <getopt_long@plt>
   12398:	cmp	r0, #104	; 0x68
   1239c:	beq	123d8 <__assert_fail@plt+0x1420>
   123a0:	cmp	r0, #118	; 0x76
   123a4:	bne	123e4 <__assert_fail@plt+0x142c>
   123a8:	movw	r0, #28996	; 0x7144
   123ac:	ldr	r3, [fp, #8]
   123b0:	add	r1, fp, #16
   123b4:	mov	r2, r8
   123b8:	movt	r0, #2
   123bc:	str	r1, [sp, #4]
   123c0:	str	r1, [sp]
   123c4:	mov	r1, r5
   123c8:	ldr	r0, [r0]
   123cc:	bl	14af8 <__assert_fail@plt+0x3b40>
   123d0:	mov	r0, #0
   123d4:	bl	10ed4 <exit@plt>
   123d8:	ldr	r1, [fp, #12]
   123dc:	mov	r0, #0
   123e0:	blx	r1
   123e4:	movw	r0, #28976	; 0x7130
   123e8:	str	r7, [r6]
   123ec:	movt	r0, #2
   123f0:	str	r4, [r0]
   123f4:	sub	sp, fp, #24
   123f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12400:	add	fp, sp, #24
   12404:	sub	sp, sp, #8
   12408:	mov	r8, r3
   1240c:	ldr	r3, [fp, #12]
   12410:	movw	r7, #29000	; 0x7148
   12414:	movw	r5, #23135	; 0x5a5f
   12418:	mov	r9, r2
   1241c:	mov	r2, #1
   12420:	mov	r6, #0
   12424:	movt	r7, #2
   12428:	movt	r5, #1
   1242c:	str	r6, [sp]
   12430:	ldr	r4, [r7]
   12434:	str	r2, [r7]
   12438:	movw	r2, #23532	; 0x5bec
   1243c:	cmp	r3, #0
   12440:	movw	r3, #23548	; 0x5bfc
   12444:	movt	r2, #1
   12448:	movt	r3, #1
   1244c:	movne	r2, r5
   12450:	bl	10ebc <getopt_long@plt>
   12454:	cmn	r0, #1
   12458:	beq	12484 <__assert_fail@plt+0x14cc>
   1245c:	cmp	r0, #104	; 0x68
   12460:	beq	12478 <__assert_fail@plt+0x14c0>
   12464:	cmp	r0, #118	; 0x76
   12468:	beq	12490 <__assert_fail@plt+0x14d8>
   1246c:	movw	r0, #28900	; 0x70e4
   12470:	movt	r0, #2
   12474:	ldr	r6, [r0]
   12478:	ldr	r1, [fp, #16]
   1247c:	mov	r0, r6
   12480:	blx	r1
   12484:	str	r4, [r7]
   12488:	sub	sp, fp, #24
   1248c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12490:	movw	r0, #28996	; 0x7144
   12494:	ldr	r3, [fp, #8]
   12498:	add	r1, fp, #20
   1249c:	mov	r2, r8
   124a0:	movt	r0, #2
   124a4:	str	r1, [sp, #4]
   124a8:	str	r1, [sp]
   124ac:	mov	r1, r9
   124b0:	ldr	r0, [r0]
   124b4:	bl	14af8 <__assert_fail@plt+0x3b40>
   124b8:	mov	r0, #0
   124bc:	bl	10ed4 <exit@plt>
   124c0:	push	{r4, r5, fp, lr}
   124c4:	add	fp, sp, #8
   124c8:	cmp	r0, #0
   124cc:	beq	12560 <__assert_fail@plt+0x15a8>
   124d0:	mov	r1, #47	; 0x2f
   124d4:	mov	r4, r0
   124d8:	bl	10f70 <strrchr@plt>
   124dc:	cmp	r0, #0
   124e0:	mov	r5, r4
   124e4:	addne	r5, r0, #1
   124e8:	sub	r0, r5, r4
   124ec:	cmp	r0, #7
   124f0:	blt	12544 <__assert_fail@plt+0x158c>
   124f4:	movw	r1, #23652	; 0x5c64
   124f8:	sub	r0, r5, #7
   124fc:	mov	r2, #7
   12500:	movt	r1, #1
   12504:	bl	10f94 <strncmp@plt>
   12508:	cmp	r0, #0
   1250c:	bne	12544 <__assert_fail@plt+0x158c>
   12510:	movw	r1, #23660	; 0x5c6c
   12514:	mov	r0, r5
   12518:	mov	r2, #3
   1251c:	movt	r1, #1
   12520:	bl	10f94 <strncmp@plt>
   12524:	cmp	r0, #0
   12528:	beq	12534 <__assert_fail@plt+0x157c>
   1252c:	mov	r4, r5
   12530:	b	12544 <__assert_fail@plt+0x158c>
   12534:	movw	r0, #28968	; 0x7128
   12538:	add	r4, r5, #3
   1253c:	movt	r0, #2
   12540:	str	r4, [r0]
   12544:	movw	r0, #28972	; 0x712c
   12548:	movt	r0, #2
   1254c:	str	r4, [r0]
   12550:	movw	r0, #29032	; 0x7168
   12554:	movt	r0, #2
   12558:	str	r4, [r0]
   1255c:	pop	{r4, r5, fp, pc}
   12560:	movw	r0, #28984	; 0x7138
   12564:	mov	r1, #55	; 0x37
   12568:	mov	r2, #1
   1256c:	movt	r0, #2
   12570:	ldr	r3, [r0]
   12574:	movw	r0, #23596	; 0x5c2c
   12578:	movt	r0, #1
   1257c:	bl	10e20 <fwrite@plt>
   12580:	bl	10fa0 <abort@plt>
   12584:	push	{r4, r5, r6, sl, fp, lr}
   12588:	add	fp, sp, #16
   1258c:	mov	r4, r0
   12590:	movw	r0, #29040	; 0x7170
   12594:	movt	r0, #2
   12598:	cmp	r4, #0
   1259c:	moveq	r4, r0
   125a0:	bl	10ef8 <__errno_location@plt>
   125a4:	ldr	r6, [r0]
   125a8:	mov	r5, r0
   125ac:	mov	r0, r4
   125b0:	mov	r1, #48	; 0x30
   125b4:	bl	152a0 <__assert_fail@plt+0x42e8>
   125b8:	str	r6, [r5]
   125bc:	pop	{r4, r5, r6, sl, fp, pc}
   125c0:	movw	r1, #29040	; 0x7170
   125c4:	cmp	r0, #0
   125c8:	movt	r1, #2
   125cc:	movne	r1, r0
   125d0:	ldr	r0, [r1]
   125d4:	bx	lr
   125d8:	movw	r2, #29040	; 0x7170
   125dc:	cmp	r0, #0
   125e0:	movt	r2, #2
   125e4:	movne	r2, r0
   125e8:	str	r1, [r2]
   125ec:	bx	lr
   125f0:	movw	r3, #29040	; 0x7170
   125f4:	cmp	r0, #0
   125f8:	and	r2, r2, #1
   125fc:	movt	r3, #2
   12600:	movne	r3, r0
   12604:	ubfx	r0, r1, #5, #3
   12608:	and	r1, r1, #31
   1260c:	add	ip, r3, r0, lsl #2
   12610:	mov	r0, #1
   12614:	ldr	r3, [ip, #8]
   12618:	and	r0, r0, r3, lsr r1
   1261c:	eor	r2, r0, r2
   12620:	eor	r1, r3, r2, lsl r1
   12624:	str	r1, [ip, #8]
   12628:	bx	lr
   1262c:	movw	r2, #29040	; 0x7170
   12630:	cmp	r0, #0
   12634:	movt	r2, #2
   12638:	movne	r2, r0
   1263c:	ldr	r0, [r2, #4]
   12640:	str	r1, [r2, #4]
   12644:	bx	lr
   12648:	push	{fp, lr}
   1264c:	mov	fp, sp
   12650:	movw	r3, #29040	; 0x7170
   12654:	cmp	r0, #0
   12658:	movt	r3, #2
   1265c:	movne	r3, r0
   12660:	cmp	r1, #0
   12664:	mov	r0, #10
   12668:	cmpne	r2, #0
   1266c:	str	r0, [r3]
   12670:	bne	12678 <__assert_fail@plt+0x16c0>
   12674:	bl	10fa0 <abort@plt>
   12678:	str	r1, [r3, #40]	; 0x28
   1267c:	str	r2, [r3, #44]	; 0x2c
   12680:	pop	{fp, pc}
   12684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12688:	add	fp, sp, #28
   1268c:	sub	sp, sp, #20
   12690:	mov	r7, r0
   12694:	ldr	r0, [fp, #8]
   12698:	movw	r5, #29040	; 0x7170
   1269c:	mov	r8, r3
   126a0:	mov	r9, r2
   126a4:	mov	sl, r1
   126a8:	movt	r5, #2
   126ac:	cmp	r0, #0
   126b0:	movne	r5, r0
   126b4:	bl	10ef8 <__errno_location@plt>
   126b8:	ldr	r2, [r5, #40]	; 0x28
   126bc:	ldr	r3, [r5, #44]	; 0x2c
   126c0:	mov	r4, r0
   126c4:	ldm	r5, {r0, r1}
   126c8:	add	r5, r5, #8
   126cc:	ldr	r6, [r4]
   126d0:	stm	sp, {r0, r1, r5}
   126d4:	mov	r0, r7
   126d8:	mov	r1, sl
   126dc:	str	r2, [sp, #12]
   126e0:	str	r3, [sp, #16]
   126e4:	mov	r2, r9
   126e8:	mov	r3, r8
   126ec:	bl	126fc <__assert_fail@plt+0x1744>
   126f0:	str	r6, [r4]
   126f4:	sub	sp, fp, #28
   126f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12700:	add	fp, sp, #28
   12704:	sub	sp, sp, #156	; 0x9c
   12708:	str	r0, [fp, #-84]	; 0xffffffac
   1270c:	add	r0, r2, #1
   12710:	mov	r6, r1
   12714:	mov	r7, r3
   12718:	str	r2, [fp, #-80]	; 0xffffffb0
   1271c:	str	r0, [sp, #80]	; 0x50
   12720:	ldr	r0, [fp, #12]
   12724:	and	r1, r0, #1
   12728:	str	r1, [sp, #36]	; 0x24
   1272c:	and	r1, r0, #4
   12730:	str	r1, [sp, #32]
   12734:	ubfx	r8, r0, #1, #1
   12738:	bl	10e38 <__ctype_get_mb_cur_max@plt>
   1273c:	str	r0, [sp, #40]	; 0x28
   12740:	ldr	r0, [fp, #24]
   12744:	ldr	r4, [fp, #8]
   12748:	mov	r1, #0
   1274c:	str	r1, [fp, #-52]	; 0xffffffcc
   12750:	mov	r1, #0
   12754:	str	r1, [sp, #60]	; 0x3c
   12758:	mov	r1, #1
   1275c:	str	r1, [sp, #84]	; 0x54
   12760:	str	r0, [sp, #76]	; 0x4c
   12764:	ldr	r0, [fp, #20]
   12768:	str	r0, [sp, #72]	; 0x48
   1276c:	mov	r0, #0
   12770:	str	r0, [sp, #56]	; 0x38
   12774:	mov	r0, #0
   12778:	str	r0, [fp, #-88]	; 0xffffffa8
   1277c:	mov	r0, #0
   12780:	str	r0, [fp, #-72]	; 0xffffffb8
   12784:	mov	r0, #0
   12788:	cmp	r4, #10
   1278c:	bhi	13aa8 <__assert_fail@plt+0x2af0>
   12790:	add	r1, pc, #24
   12794:	ldr	ip, [fp, #-84]	; 0xffffffac
   12798:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1279c:	mov	r5, r6
   127a0:	mov	r9, #0
   127a4:	mov	r2, #1
   127a8:	mov	r3, #0
   127ac:	ldr	pc, [r1, r4, lsl #2]
   127b0:	andeq	r2, r1, r8, ror r8
   127b4:			; <UNDEFINED> instruction: 0x000128b4
   127b8:	andeq	r2, r1, r8, lsl #17
   127bc:	andeq	r2, r1, r0, ror r8
   127c0:	andeq	r2, r1, r8, lsr #17
   127c4:	andeq	r2, r1, ip, lsl #18
   127c8:	muleq	r1, r8, r8
   127cc:	andeq	r2, r1, r4, lsl #23
   127d0:	ldrdeq	r2, [r1], -ip
   127d4:	ldrdeq	r2, [r1], -ip
   127d8:	andeq	r2, r1, r4, lsl sl
   127dc:	movw	r6, #23742	; 0x5cbe
   127e0:	mov	r0, #0
   127e4:	mov	r2, #5
   127e8:	movt	r6, #1
   127ec:	mov	r1, r6
   127f0:	bl	10de4 <dcgettext@plt>
   127f4:	cmp	r0, r6
   127f8:	str	r0, [sp, #72]	; 0x48
   127fc:	bne	129ec <__assert_fail@plt+0x1a34>
   12800:	bl	15544 <__assert_fail@plt+0x458c>
   12804:	ldrb	r1, [r0]
   12808:	and	r1, r1, #223	; 0xdf
   1280c:	cmp	r1, #71	; 0x47
   12810:	beq	1296c <__assert_fail@plt+0x19b4>
   12814:	cmp	r1, #85	; 0x55
   12818:	bne	129d0 <__assert_fail@plt+0x1a18>
   1281c:	ldrb	r1, [r0, #1]
   12820:	and	r1, r1, #223	; 0xdf
   12824:	cmp	r1, #84	; 0x54
   12828:	bne	129d0 <__assert_fail@plt+0x1a18>
   1282c:	ldrb	r1, [r0, #2]
   12830:	and	r1, r1, #223	; 0xdf
   12834:	cmp	r1, #70	; 0x46
   12838:	bne	129d0 <__assert_fail@plt+0x1a18>
   1283c:	ldrb	r1, [r0, #3]
   12840:	cmp	r1, #45	; 0x2d
   12844:	bne	129d0 <__assert_fail@plt+0x1a18>
   12848:	ldrb	r1, [r0, #4]
   1284c:	cmp	r1, #56	; 0x38
   12850:	bne	129d0 <__assert_fail@plt+0x1a18>
   12854:	ldrb	r0, [r0, #5]
   12858:	cmp	r0, #0
   1285c:	movw	r0, #23746	; 0x5cc2
   12860:	movt	r0, #1
   12864:	str	r0, [sp, #72]	; 0x48
   12868:	bne	129d0 <__assert_fail@plt+0x1a18>
   1286c:	b	129ec <__assert_fail@plt+0x1a34>
   12870:	mov	r0, #1
   12874:	b	128b4 <__assert_fail@plt+0x18fc>
   12878:	mov	r4, #0
   1287c:	mov	r9, #0
   12880:	mov	r2, r0
   12884:	b	12904 <__assert_fail@plt+0x194c>
   12888:	tst	r8, #1
   1288c:	bne	128b4 <__assert_fail@plt+0x18fc>
   12890:	mov	r2, r0
   12894:	b	128dc <__assert_fail@plt+0x1924>
   12898:	mov	r0, #1
   1289c:	mov	r9, #0
   128a0:	mov	r4, #5
   128a4:	b	12920 <__assert_fail@plt+0x1968>
   128a8:	mov	r2, #1
   128ac:	tst	r8, #1
   128b0:	beq	128dc <__assert_fail@plt+0x1924>
   128b4:	mov	r1, #1
   128b8:	mov	r9, #0
   128bc:	mov	r4, #2
   128c0:	mov	r2, r0
   128c4:	mov	r3, #1
   128c8:	str	r1, [fp, #-72]	; 0xffffffb8
   128cc:	movw	r1, #23744	; 0x5cc0
   128d0:	movt	r1, #1
   128d4:	str	r1, [fp, #-88]	; 0xffffffa8
   128d8:	b	12b84 <__assert_fail@plt+0x1bcc>
   128dc:	cmp	r5, #0
   128e0:	mov	r9, #1
   128e4:	mov	r4, #2
   128e8:	movne	r0, #39	; 0x27
   128ec:	strbne	r0, [ip]
   128f0:	movw	r0, #23744	; 0x5cc0
   128f4:	movt	r0, #1
   128f8:	str	r0, [fp, #-88]	; 0xffffffa8
   128fc:	mov	r0, #1
   12900:	str	r0, [fp, #-72]	; 0xffffffb8
   12904:	mov	r3, #0
   12908:	b	12b84 <__assert_fail@plt+0x1bcc>
   1290c:	mov	r4, #5
   12910:	tst	r8, #1
   12914:	beq	1293c <__assert_fail@plt+0x1984>
   12918:	mov	r0, #1
   1291c:	mov	r9, #0
   12920:	str	r0, [fp, #-72]	; 0xffffffb8
   12924:	movw	r0, #23740	; 0x5cbc
   12928:	mov	r2, #1
   1292c:	mov	r3, #1
   12930:	movt	r0, #1
   12934:	str	r0, [fp, #-88]	; 0xffffffa8
   12938:	b	12b84 <__assert_fail@plt+0x1bcc>
   1293c:	cmp	r5, #0
   12940:	mov	r3, #0
   12944:	mov	r9, #1
   12948:	mov	r2, #1
   1294c:	movne	r0, #34	; 0x22
   12950:	strbne	r0, [ip]
   12954:	movw	r0, #23740	; 0x5cbc
   12958:	movt	r0, #1
   1295c:	str	r0, [fp, #-88]	; 0xffffffa8
   12960:	mov	r0, #1
   12964:	str	r0, [fp, #-72]	; 0xffffffb8
   12968:	b	12b84 <__assert_fail@plt+0x1bcc>
   1296c:	ldrb	r1, [r0, #1]
   12970:	and	r1, r1, #223	; 0xdf
   12974:	cmp	r1, #66	; 0x42
   12978:	bne	129d0 <__assert_fail@plt+0x1a18>
   1297c:	ldrb	r1, [r0, #2]
   12980:	cmp	r1, #49	; 0x31
   12984:	bne	129d0 <__assert_fail@plt+0x1a18>
   12988:	ldrb	r1, [r0, #3]
   1298c:	cmp	r1, #56	; 0x38
   12990:	bne	129d0 <__assert_fail@plt+0x1a18>
   12994:	ldrb	r1, [r0, #4]
   12998:	cmp	r1, #48	; 0x30
   1299c:	bne	129d0 <__assert_fail@plt+0x1a18>
   129a0:	ldrb	r1, [r0, #5]
   129a4:	cmp	r1, #51	; 0x33
   129a8:	bne	129d0 <__assert_fail@plt+0x1a18>
   129ac:	ldrb	r1, [r0, #6]
   129b0:	cmp	r1, #48	; 0x30
   129b4:	bne	129d0 <__assert_fail@plt+0x1a18>
   129b8:	ldrb	r0, [r0, #7]
   129bc:	cmp	r0, #0
   129c0:	movw	r0, #23754	; 0x5cca
   129c4:	movt	r0, #1
   129c8:	str	r0, [sp, #72]	; 0x48
   129cc:	beq	129ec <__assert_fail@plt+0x1a34>
   129d0:	movw	r1, #23740	; 0x5cbc
   129d4:	movw	r0, #23744	; 0x5cc0
   129d8:	cmp	r4, #9
   129dc:	movt	r1, #1
   129e0:	movt	r0, #1
   129e4:	moveq	r0, r1
   129e8:	str	r0, [sp, #72]	; 0x48
   129ec:	movw	r6, #23744	; 0x5cc0
   129f0:	mov	r0, #0
   129f4:	mov	r2, #5
   129f8:	movt	r6, #1
   129fc:	mov	r1, r6
   12a00:	bl	10de4 <dcgettext@plt>
   12a04:	cmp	r0, r6
   12a08:	str	r0, [sp, #76]	; 0x4c
   12a0c:	beq	12a58 <__assert_fail@plt+0x1aa0>
   12a10:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a14:	mov	r9, #0
   12a18:	tst	r8, #1
   12a1c:	bne	12b60 <__assert_fail@plt+0x1ba8>
   12a20:	ldr	r0, [sp, #72]	; 0x48
   12a24:	ldrb	r0, [r0]
   12a28:	cmp	r0, #0
   12a2c:	beq	12b60 <__assert_fail@plt+0x1ba8>
   12a30:	ldr	r1, [sp, #72]	; 0x48
   12a34:	mov	r9, #0
   12a38:	add	r1, r1, #1
   12a3c:	cmp	r9, r5
   12a40:	strbcc	r0, [ip, r9]
   12a44:	ldrb	r0, [r1, r9]
   12a48:	add	r9, r9, #1
   12a4c:	cmp	r0, #0
   12a50:	bne	12a3c <__assert_fail@plt+0x1a84>
   12a54:	b	12b60 <__assert_fail@plt+0x1ba8>
   12a58:	bl	15544 <__assert_fail@plt+0x458c>
   12a5c:	ldrb	r1, [r0]
   12a60:	and	r1, r1, #223	; 0xdf
   12a64:	cmp	r1, #71	; 0x47
   12a68:	beq	12ad8 <__assert_fail@plt+0x1b20>
   12a6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a70:	cmp	r1, #85	; 0x55
   12a74:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12a78:	ldrb	r1, [r0, #1]
   12a7c:	and	r1, r1, #223	; 0xdf
   12a80:	cmp	r1, #84	; 0x54
   12a84:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12a88:	ldrb	r1, [r0, #2]
   12a8c:	and	r1, r1, #223	; 0xdf
   12a90:	cmp	r1, #70	; 0x46
   12a94:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12a98:	ldrb	r1, [r0, #3]
   12a9c:	cmp	r1, #45	; 0x2d
   12aa0:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12aa4:	ldrb	r1, [r0, #4]
   12aa8:	cmp	r1, #56	; 0x38
   12aac:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12ab0:	ldrb	r0, [r0, #5]
   12ab4:	cmp	r0, #0
   12ab8:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12abc:	movw	r0, #23750	; 0x5cc6
   12ac0:	movt	r0, #1
   12ac4:	str	r0, [sp, #76]	; 0x4c
   12ac8:	mov	r9, #0
   12acc:	tst	r8, #1
   12ad0:	beq	12a20 <__assert_fail@plt+0x1a68>
   12ad4:	b	12b60 <__assert_fail@plt+0x1ba8>
   12ad8:	ldrb	r1, [r0, #1]
   12adc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ae0:	and	r1, r1, #223	; 0xdf
   12ae4:	cmp	r1, #66	; 0x42
   12ae8:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12aec:	ldrb	r1, [r0, #2]
   12af0:	cmp	r1, #49	; 0x31
   12af4:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12af8:	ldrb	r1, [r0, #3]
   12afc:	cmp	r1, #56	; 0x38
   12b00:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12b04:	ldrb	r1, [r0, #4]
   12b08:	cmp	r1, #48	; 0x30
   12b0c:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12b10:	ldrb	r1, [r0, #5]
   12b14:	cmp	r1, #51	; 0x33
   12b18:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12b1c:	ldrb	r1, [r0, #6]
   12b20:	cmp	r1, #48	; 0x30
   12b24:	bne	12b34 <__assert_fail@plt+0x1b7c>
   12b28:	ldrb	r0, [r0, #7]
   12b2c:	cmp	r0, #0
   12b30:	beq	13948 <__assert_fail@plt+0x2990>
   12b34:	movw	r0, #23744	; 0x5cc0
   12b38:	cmp	r4, #9
   12b3c:	movt	r0, #1
   12b40:	mov	r1, r0
   12b44:	movw	r0, #23740	; 0x5cbc
   12b48:	movt	r0, #1
   12b4c:	moveq	r1, r0
   12b50:	str	r1, [sp, #76]	; 0x4c
   12b54:	mov	r9, #0
   12b58:	tst	r8, #1
   12b5c:	beq	12a20 <__assert_fail@plt+0x1a68>
   12b60:	ldr	r6, [sp, #76]	; 0x4c
   12b64:	mov	r0, r6
   12b68:	bl	10eec <strlen@plt>
   12b6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b70:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12b74:	str	r0, [fp, #-72]	; 0xffffffb8
   12b78:	str	r6, [fp, #-88]	; 0xffffffa8
   12b7c:	mov	r2, #1
   12b80:	mov	r3, r8
   12b84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b88:	str	r4, [fp, #-64]	; 0xffffffc0
   12b8c:	mov	sl, #0
   12b90:	str	r3, [fp, #-76]	; 0xffffffb4
   12b94:	str	r2, [sp, #88]	; 0x58
   12b98:	cmp	r0, #0
   12b9c:	movwne	r0, #1
   12ba0:	and	r1, r0, r3
   12ba4:	and	r1, r2, r1
   12ba8:	str	r1, [sp, #48]	; 0x30
   12bac:	sub	r1, r4, #2
   12bb0:	clz	r1, r1
   12bb4:	lsr	r1, r1, #5
   12bb8:	and	r1, r1, r3
   12bbc:	str	r1, [sp, #44]	; 0x2c
   12bc0:	subs	r1, r4, #2
   12bc4:	eor	r4, r3, #1
   12bc8:	movwne	r1, #1
   12bcc:	str	r4, [sp, #92]	; 0x5c
   12bd0:	orr	r4, r1, r4
   12bd4:	and	r1, r1, r2
   12bd8:	and	r0, r0, r1
   12bdc:	str	r4, [sp, #64]	; 0x40
   12be0:	ldr	r4, [sp, #84]	; 0x54
   12be4:	str	r0, [fp, #-60]	; 0xffffffc4
   12be8:	orr	r0, r1, r3
   12bec:	ldr	r1, [fp, #16]
   12bf0:	eor	r0, r0, #1
   12bf4:	clz	r1, r1
   12bf8:	lsr	r1, r1, #5
   12bfc:	orr	r0, r1, r0
   12c00:	str	r0, [fp, #-68]	; 0xffffffbc
   12c04:	eor	r0, r2, #1
   12c08:	str	r0, [sp, #52]	; 0x34
   12c0c:	cmn	r7, #1
   12c10:	beq	12c20 <__assert_fail@plt+0x1c68>
   12c14:	cmp	sl, r7
   12c18:	bne	12c2c <__assert_fail@plt+0x1c74>
   12c1c:	b	138c0 <__assert_fail@plt+0x2908>
   12c20:	ldrb	r0, [lr, sl]
   12c24:	cmp	r0, #0
   12c28:	beq	138c8 <__assert_fail@plt+0x2910>
   12c2c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c30:	cmp	r0, #0
   12c34:	beq	12c94 <__assert_fail@plt+0x1cdc>
   12c38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c3c:	mov	r6, r5
   12c40:	add	r5, sl, r0
   12c44:	cmp	r0, #2
   12c48:	bcc	12cb4 <__assert_fail@plt+0x1cfc>
   12c4c:	mov	r0, #0
   12c50:	cmn	r7, #1
   12c54:	str	r0, [fp, #-56]	; 0xffffffc8
   12c58:	bne	12c70 <__assert_fail@plt+0x1cb8>
   12c5c:	mov	r0, lr
   12c60:	bl	10eec <strlen@plt>
   12c64:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12c68:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c6c:	mov	r7, r0
   12c70:	cmp	r5, r7
   12c74:	bls	12cc4 <__assert_fail@plt+0x1d0c>
   12c78:	mov	r0, #0
   12c7c:	mov	r5, r6
   12c80:	str	r0, [fp, #-48]	; 0xffffffd0
   12c84:	ldrb	r6, [lr, sl]
   12c88:	cmp	r6, #126	; 0x7e
   12c8c:	bls	12d14 <__assert_fail@plt+0x1d5c>
   12c90:	b	13270 <__assert_fail@plt+0x22b8>
   12c94:	mov	r0, #0
   12c98:	str	r0, [fp, #-56]	; 0xffffffc8
   12c9c:	mov	r0, #0
   12ca0:	str	r0, [fp, #-48]	; 0xffffffd0
   12ca4:	ldrb	r6, [lr, sl]
   12ca8:	cmp	r6, #126	; 0x7e
   12cac:	bls	12d14 <__assert_fail@plt+0x1d5c>
   12cb0:	b	13270 <__assert_fail@plt+0x22b8>
   12cb4:	mov	r0, #0
   12cb8:	str	r0, [fp, #-56]	; 0xffffffc8
   12cbc:	cmp	r5, r7
   12cc0:	bhi	12c78 <__assert_fail@plt+0x1cc0>
   12cc4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12cc8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ccc:	add	r0, lr, sl
   12cd0:	bl	10ee0 <bcmp@plt>
   12cd4:	ldr	r2, [sp, #92]	; 0x5c
   12cd8:	cmp	r0, #0
   12cdc:	mov	r1, r0
   12ce0:	mov	r5, r6
   12ce4:	movwne	r1, #1
   12ce8:	orr	r1, r1, r2
   12cec:	tst	r1, #1
   12cf0:	beq	13988 <__assert_fail@plt+0x29d0>
   12cf4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cf8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cfc:	clz	r0, r0
   12d00:	lsr	r0, r0, #5
   12d04:	str	r0, [fp, #-48]	; 0xffffffd0
   12d08:	ldrb	r6, [lr, sl]
   12d0c:	cmp	r6, #126	; 0x7e
   12d10:	bhi	13270 <__assert_fail@plt+0x22b8>
   12d14:	add	r3, pc, #16
   12d18:	mov	r8, #1
   12d1c:	mov	r2, #110	; 0x6e
   12d20:	mov	r0, #97	; 0x61
   12d24:	mov	r1, #0
   12d28:	ldr	pc, [r3, r6, lsl #2]
   12d2c:	andeq	r3, r1, r8, lsr #32
   12d30:	andeq	r3, r1, r0, ror r2
   12d34:	andeq	r3, r1, r0, ror r2
   12d38:	andeq	r3, r1, r0, ror r2
   12d3c:	andeq	r3, r1, r0, ror r2
   12d40:	andeq	r3, r1, r0, ror r2
   12d44:	andeq	r3, r1, r0, ror r2
   12d48:	andeq	r3, r1, r4, lsr #6
   12d4c:	andeq	r3, r1, r8
   12d50:	andeq	r3, r1, r0
   12d54:	andeq	r3, r1, r4, lsl r0
   12d58:	andeq	r3, r1, r4, asr #2
   12d5c:	strdeq	r2, [r1], -r8
   12d60:	andeq	r3, r1, r0, lsl r0
   12d64:	andeq	r3, r1, r0, ror r2
   12d68:	andeq	r3, r1, r0, ror r2
   12d6c:	andeq	r3, r1, r0, ror r2
   12d70:	andeq	r3, r1, r0, ror r2
   12d74:	andeq	r3, r1, r0, ror r2
   12d78:	andeq	r3, r1, r0, ror r2
   12d7c:	andeq	r3, r1, r0, ror r2
   12d80:	andeq	r3, r1, r0, ror r2
   12d84:	andeq	r3, r1, r0, ror r2
   12d88:	andeq	r3, r1, r0, ror r2
   12d8c:	andeq	r3, r1, r0, ror r2
   12d90:	andeq	r3, r1, r0, ror r2
   12d94:	andeq	r3, r1, r0, ror r2
   12d98:	andeq	r3, r1, r0, ror r2
   12d9c:	andeq	r3, r1, r0, ror r2
   12da0:	andeq	r3, r1, r0, ror r2
   12da4:	andeq	r3, r1, r0, ror r2
   12da8:	andeq	r3, r1, r0, ror r2
   12dac:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12db0:	andeq	r2, r1, r0, lsr #31
   12db4:	andeq	r2, r1, r0, lsr #31
   12db8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12dbc:	andeq	r2, r1, r0, lsr #31
   12dc0:	andeq	r2, r1, r8, lsr #30
   12dc4:	andeq	r2, r1, r0, lsr #31
   12dc8:	andeq	r3, r1, ip, asr #2
   12dcc:	andeq	r2, r1, r0, lsr #31
   12dd0:	andeq	r2, r1, r0, lsr #31
   12dd4:	andeq	r2, r1, r0, lsr #31
   12dd8:	andeq	r2, r1, r8, lsr #30
   12ddc:	andeq	r2, r1, r8, lsr #30
   12de0:	andeq	r2, r1, r8, lsr #30
   12de4:	andeq	r2, r1, r8, lsr #30
   12de8:	andeq	r2, r1, r8, lsr #30
   12dec:	andeq	r2, r1, r8, lsr #30
   12df0:	andeq	r2, r1, r8, lsr #30
   12df4:	andeq	r2, r1, r8, lsr #30
   12df8:	andeq	r2, r1, r8, lsr #30
   12dfc:	andeq	r2, r1, r8, lsr #30
   12e00:	andeq	r2, r1, r8, lsr #30
   12e04:	andeq	r2, r1, r8, lsr #30
   12e08:	andeq	r2, r1, r8, lsr #30
   12e0c:	andeq	r2, r1, r8, lsr #30
   12e10:	andeq	r2, r1, r8, lsr #30
   12e14:	andeq	r2, r1, r8, lsr #30
   12e18:	andeq	r2, r1, r0, lsr #31
   12e1c:	andeq	r2, r1, r0, lsr #31
   12e20:	andeq	r2, r1, r0, lsr #31
   12e24:	andeq	r2, r1, r0, lsr #31
   12e28:	andeq	r3, r1, r0, lsl r1
   12e2c:	andeq	r3, r1, r0, ror r2
   12e30:	andeq	r2, r1, r8, lsr #30
   12e34:	andeq	r2, r1, r8, lsr #30
   12e38:	andeq	r2, r1, r8, lsr #30
   12e3c:	andeq	r2, r1, r8, lsr #30
   12e40:	andeq	r2, r1, r8, lsr #30
   12e44:	andeq	r2, r1, r8, lsr #30
   12e48:	andeq	r2, r1, r8, lsr #30
   12e4c:	andeq	r2, r1, r8, lsr #30
   12e50:	andeq	r2, r1, r8, lsr #30
   12e54:	andeq	r2, r1, r8, lsr #30
   12e58:	andeq	r2, r1, r8, lsr #30
   12e5c:	andeq	r2, r1, r8, lsr #30
   12e60:	andeq	r2, r1, r8, lsr #30
   12e64:	andeq	r2, r1, r8, lsr #30
   12e68:	andeq	r2, r1, r8, lsr #30
   12e6c:	andeq	r2, r1, r8, lsr #30
   12e70:	andeq	r2, r1, r8, lsr #30
   12e74:	andeq	r2, r1, r8, lsr #30
   12e78:	andeq	r2, r1, r8, lsr #30
   12e7c:	andeq	r2, r1, r8, lsr #30
   12e80:	andeq	r2, r1, r8, lsr #30
   12e84:	andeq	r2, r1, r8, lsr #30
   12e88:	andeq	r2, r1, r8, lsr #30
   12e8c:	andeq	r2, r1, r8, lsr #30
   12e90:	andeq	r2, r1, r8, lsr #30
   12e94:	andeq	r2, r1, r8, lsr #30
   12e98:	andeq	r2, r1, r0, lsr #31
   12e9c:	ldrdeq	r2, [r1], -r4
   12ea0:	andeq	r2, r1, r8, lsr #30
   12ea4:	andeq	r2, r1, r0, lsr #31
   12ea8:	andeq	r2, r1, r8, lsr #30
   12eac:	andeq	r2, r1, r0, lsr #31
   12eb0:	andeq	r2, r1, r8, lsr #30
   12eb4:	andeq	r2, r1, r8, lsr #30
   12eb8:	andeq	r2, r1, r8, lsr #30
   12ebc:	andeq	r2, r1, r8, lsr #30
   12ec0:	andeq	r2, r1, r8, lsr #30
   12ec4:	andeq	r2, r1, r8, lsr #30
   12ec8:	andeq	r2, r1, r8, lsr #30
   12ecc:	andeq	r2, r1, r8, lsr #30
   12ed0:	andeq	r2, r1, r8, lsr #30
   12ed4:	andeq	r2, r1, r8, lsr #30
   12ed8:	andeq	r2, r1, r8, lsr #30
   12edc:	andeq	r2, r1, r8, lsr #30
   12ee0:	andeq	r2, r1, r8, lsr #30
   12ee4:	andeq	r2, r1, r8, lsr #30
   12ee8:	andeq	r2, r1, r8, lsr #30
   12eec:	andeq	r2, r1, r8, lsr #30
   12ef0:	andeq	r2, r1, r8, lsr #30
   12ef4:	andeq	r2, r1, r8, lsr #30
   12ef8:	andeq	r2, r1, r8, lsr #30
   12efc:	andeq	r2, r1, r8, lsr #30
   12f00:	andeq	r2, r1, r8, lsr #30
   12f04:	andeq	r2, r1, r8, lsr #30
   12f08:	andeq	r2, r1, r8, lsr #30
   12f0c:	andeq	r2, r1, r8, lsr #30
   12f10:	andeq	r2, r1, r8, lsr #30
   12f14:	andeq	r2, r1, r8, lsr #30
   12f18:	andeq	r2, r1, r8, ror #30
   12f1c:	andeq	r2, r1, r0, lsr #31
   12f20:	andeq	r2, r1, r8, ror #30
   12f24:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f2c:	tst	r0, #1
   12f30:	bne	131e8 <__assert_fail@plt+0x2230>
   12f34:	ldr	r1, [fp, #16]
   12f38:	ubfx	r0, r6, #5, #3
   12f3c:	mov	r2, #1
   12f40:	ldr	r0, [r1, r0, lsl #2]
   12f44:	and	r1, r6, #31
   12f48:	tst	r0, r2, lsl r1
   12f4c:	beq	131e8 <__assert_fail@plt+0x2230>
   12f50:	mov	r0, r6
   12f54:	mov	r1, r8
   12f58:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f5c:	tst	r2, #1
   12f60:	beq	13208 <__assert_fail@plt+0x2250>
   12f64:	b	13964 <__assert_fail@plt+0x29ac>
   12f68:	cmp	r7, #1
   12f6c:	beq	12f90 <__assert_fail@plt+0x1fd8>
   12f70:	mov	r8, #0
   12f74:	cmn	r7, #1
   12f78:	bne	131d4 <__assert_fail@plt+0x221c>
   12f7c:	ldrb	r0, [lr, #1]
   12f80:	cmp	r0, #0
   12f84:	beq	12f90 <__assert_fail@plt+0x1fd8>
   12f88:	mvn	r7, #0
   12f8c:	b	131d4 <__assert_fail@plt+0x221c>
   12f90:	mov	r8, #0
   12f94:	cmp	sl, #0
   12f98:	bne	131d4 <__assert_fail@plt+0x221c>
   12f9c:	mov	r1, #1
   12fa0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fa4:	cmp	r0, #2
   12fa8:	bne	12fc0 <__assert_fail@plt+0x2008>
   12fac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fb0:	mov	r8, r1
   12fb4:	tst	r0, #1
   12fb8:	beq	12f28 <__assert_fail@plt+0x1f70>
   12fbc:	b	13964 <__assert_fail@plt+0x29ac>
   12fc0:	mov	r8, r1
   12fc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fc8:	tst	r0, #1
   12fcc:	beq	12f34 <__assert_fail@plt+0x1f7c>
   12fd0:	b	131e8 <__assert_fail@plt+0x2230>
   12fd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fd8:	cmp	r0, #2
   12fdc:	bne	1329c <__assert_fail@plt+0x22e4>
   12fe0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fe4:	tst	r0, #1
   12fe8:	bne	13964 <__assert_fail@plt+0x29ac>
   12fec:	mov	r0, #0
   12ff0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ff4:	b	132b4 <__assert_fail@plt+0x22fc>
   12ff8:	mov	r0, #102	; 0x66
   12ffc:	b	13324 <__assert_fail@plt+0x236c>
   13000:	mov	r2, #116	; 0x74
   13004:	b	13014 <__assert_fail@plt+0x205c>
   13008:	mov	r0, #98	; 0x62
   1300c:	b	13324 <__assert_fail@plt+0x236c>
   13010:	mov	r2, #114	; 0x72
   13014:	ldr	r0, [sp, #64]	; 0x40
   13018:	tst	r0, #1
   1301c:	mov	r0, r2
   13020:	bne	13324 <__assert_fail@plt+0x236c>
   13024:	b	13964 <__assert_fail@plt+0x29ac>
   13028:	ldr	r0, [sp, #88]	; 0x58
   1302c:	tst	r0, #1
   13030:	beq	13344 <__assert_fail@plt+0x238c>
   13034:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13038:	tst	r0, #1
   1303c:	bne	13aa0 <__assert_fail@plt+0x2ae8>
   13040:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13044:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13048:	subs	r0, r0, #2
   1304c:	movwne	r0, #1
   13050:	orr	r0, r0, r1
   13054:	tst	r0, #1
   13058:	bne	13094 <__assert_fail@plt+0x20dc>
   1305c:	cmp	r9, r5
   13060:	movcc	r0, #39	; 0x27
   13064:	strbcc	r0, [ip, r9]
   13068:	add	r0, r9, #1
   1306c:	cmp	r0, r5
   13070:	movcc	r1, #36	; 0x24
   13074:	strbcc	r1, [ip, r0]
   13078:	add	r0, r9, #2
   1307c:	add	r9, r9, #3
   13080:	cmp	r0, r5
   13084:	movcc	r1, #39	; 0x27
   13088:	strbcc	r1, [ip, r0]
   1308c:	mov	r0, #1
   13090:	str	r0, [fp, #-52]	; 0xffffffcc
   13094:	mov	r1, #1
   13098:	cmp	r9, r5
   1309c:	mov	r8, #0
   130a0:	mov	r6, #48	; 0x30
   130a4:	str	r1, [fp, #-56]	; 0xffffffc8
   130a8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   130ac:	movcc	r0, #92	; 0x5c
   130b0:	strbcc	r0, [ip, r9]
   130b4:	add	r0, r9, #1
   130b8:	cmp	r1, #2
   130bc:	beq	13510 <__assert_fail@plt+0x2558>
   130c0:	add	r1, sl, #1
   130c4:	cmp	r1, r7
   130c8:	bcs	13510 <__assert_fail@plt+0x2558>
   130cc:	ldrb	r1, [lr, r1]
   130d0:	sub	r1, r1, #48	; 0x30
   130d4:	uxtb	r1, r1
   130d8:	cmp	r1, #9
   130dc:	bhi	13510 <__assert_fail@plt+0x2558>
   130e0:	cmp	r0, r5
   130e4:	movcc	r1, #48	; 0x30
   130e8:	strbcc	r1, [ip, r0]
   130ec:	add	r0, r9, #2
   130f0:	add	r9, r9, #3
   130f4:	cmp	r0, r5
   130f8:	movcc	r1, #48	; 0x30
   130fc:	strbcc	r1, [ip, r0]
   13100:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13104:	tst	r0, #1
   13108:	beq	12f34 <__assert_fail@plt+0x1f7c>
   1310c:	b	131e8 <__assert_fail@plt+0x2230>
   13110:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13114:	mov	r6, #63	; 0x3f
   13118:	cmp	r0, #5
   1311c:	beq	13524 <__assert_fail@plt+0x256c>
   13120:	mov	r1, #0
   13124:	cmp	r0, #2
   13128:	str	r1, [fp, #-56]	; 0xffffffc8
   1312c:	bne	135ec <__assert_fail@plt+0x2634>
   13130:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13134:	mov	r8, #0
   13138:	tst	r0, #1
   1313c:	beq	12f28 <__assert_fail@plt+0x1f70>
   13140:	b	13964 <__assert_fail@plt+0x29ac>
   13144:	mov	r0, #118	; 0x76
   13148:	b	13324 <__assert_fail@plt+0x236c>
   1314c:	mov	r0, #1
   13150:	mov	r6, #39	; 0x27
   13154:	str	r0, [sp, #60]	; 0x3c
   13158:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1315c:	cmp	r0, #2
   13160:	bne	13364 <__assert_fail@plt+0x23ac>
   13164:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13168:	tst	r0, #1
   1316c:	bne	13964 <__assert_fail@plt+0x29ac>
   13170:	ldr	r2, [sp, #56]	; 0x38
   13174:	clz	r1, r5
   13178:	mov	r8, #1
   1317c:	lsr	r1, r1, #5
   13180:	cmp	r2, #0
   13184:	mov	r0, r2
   13188:	movwne	r0, #1
   1318c:	orrs	r0, r0, r1
   13190:	moveq	r2, r5
   13194:	moveq	r5, r0
   13198:	cmp	r9, r5
   1319c:	str	r2, [sp, #56]	; 0x38
   131a0:	movcc	r0, #39	; 0x27
   131a4:	strbcc	r0, [ip, r9]
   131a8:	add	r0, r9, #1
   131ac:	cmp	r0, r5
   131b0:	movcc	r1, #92	; 0x5c
   131b4:	strbcc	r1, [ip, r0]
   131b8:	add	r0, r9, #2
   131bc:	add	r9, r9, #3
   131c0:	cmp	r0, r5
   131c4:	movcc	r1, #39	; 0x27
   131c8:	strbcc	r1, [ip, r0]
   131cc:	mov	r0, #0
   131d0:	str	r0, [fp, #-52]	; 0xffffffcc
   131d4:	mov	r0, #0
   131d8:	str	r0, [fp, #-56]	; 0xffffffc8
   131dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131e0:	tst	r0, #1
   131e4:	beq	12f34 <__assert_fail@plt+0x1f7c>
   131e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131ec:	mov	r1, r8
   131f0:	cmp	r0, #0
   131f4:	mov	r0, r6
   131f8:	beq	132bc <__assert_fail@plt+0x2304>
   131fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13200:	tst	r2, #1
   13204:	bne	13964 <__assert_fail@plt+0x29ac>
   13208:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1320c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13210:	subs	r2, r2, #2
   13214:	movwne	r2, #1
   13218:	orr	r2, r2, r3
   1321c:	tst	r2, #1
   13220:	bne	1325c <__assert_fail@plt+0x22a4>
   13224:	cmp	r9, r5
   13228:	movcc	r2, #39	; 0x27
   1322c:	strbcc	r2, [ip, r9]
   13230:	add	r2, r9, #1
   13234:	cmp	r2, r5
   13238:	movcc	r3, #36	; 0x24
   1323c:	strbcc	r3, [ip, r2]
   13240:	add	r2, r9, #2
   13244:	add	r9, r9, #3
   13248:	cmp	r2, r5
   1324c:	movcc	r3, #39	; 0x27
   13250:	strbcc	r3, [ip, r2]
   13254:	mov	r2, #1
   13258:	str	r2, [fp, #-52]	; 0xffffffcc
   1325c:	cmp	r9, r5
   13260:	movcc	r2, #92	; 0x5c
   13264:	strbcc	r2, [ip, r9]
   13268:	add	r9, r9, #1
   1326c:	b	13304 <__assert_fail@plt+0x234c>
   13270:	ldr	r0, [sp, #40]	; 0x28
   13274:	cmp	r0, #1
   13278:	bne	13378 <__assert_fail@plt+0x23c0>
   1327c:	bl	10ec8 <__ctype_b_loc@plt>
   13280:	ldr	r0, [r0]
   13284:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13288:	mov	r1, #1
   1328c:	add	r0, r0, r6, lsl #1
   13290:	ldrb	r0, [r0, #1]
   13294:	ubfx	r8, r0, #6, #1
   13298:	b	136d0 <__assert_fail@plt+0x2718>
   1329c:	ldr	r1, [sp, #48]	; 0x30
   132a0:	mov	r0, #0
   132a4:	str	r0, [fp, #-56]	; 0xffffffc8
   132a8:	mov	r0, #92	; 0x5c
   132ac:	cmp	r1, #0
   132b0:	beq	13324 <__assert_fail@plt+0x236c>
   132b4:	mov	r6, #92	; 0x5c
   132b8:	mov	r8, #0
   132bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   132c0:	cmp	r0, #0
   132c4:	bne	132fc <__assert_fail@plt+0x2344>
   132c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   132cc:	tst	r0, #1
   132d0:	beq	132fc <__assert_fail@plt+0x2344>
   132d4:	cmp	r9, r5
   132d8:	movcc	r0, #39	; 0x27
   132dc:	strbcc	r0, [ip, r9]
   132e0:	add	r0, r9, #1
   132e4:	add	r9, r9, #2
   132e8:	cmp	r0, r5
   132ec:	movcc	r1, #39	; 0x27
   132f0:	strbcc	r1, [ip, r0]
   132f4:	mov	r0, #0
   132f8:	str	r0, [fp, #-52]	; 0xffffffcc
   132fc:	mov	r1, r8
   13300:	mov	r0, r6
   13304:	cmp	r9, r5
   13308:	and	r4, r4, r1
   1330c:	strbcc	r0, [ip, r9]
   13310:	add	r9, r9, #1
   13314:	add	sl, sl, #1
   13318:	cmn	r7, #1
   1331c:	bne	12c14 <__assert_fail@plt+0x1c5c>
   13320:	b	12c20 <__assert_fail@plt+0x1c68>
   13324:	mov	r1, #0
   13328:	mov	r8, #0
   1332c:	str	r1, [fp, #-56]	; 0xffffffc8
   13330:	ldr	r1, [sp, #88]	; 0x58
   13334:	tst	r1, #1
   13338:	mov	r1, #0
   1333c:	beq	12f28 <__assert_fail@plt+0x1f70>
   13340:	b	131fc <__assert_fail@plt+0x2244>
   13344:	ldr	r0, [sp, #36]	; 0x24
   13348:	mov	r6, #0
   1334c:	mov	r8, #0
   13350:	cmp	r0, #0
   13354:	mov	r0, #0
   13358:	str	r0, [fp, #-56]	; 0xffffffc8
   1335c:	bne	13314 <__assert_fail@plt+0x235c>
   13360:	b	12f28 <__assert_fail@plt+0x1f70>
   13364:	mov	r8, #1
   13368:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1336c:	tst	r0, #1
   13370:	beq	12f34 <__assert_fail@plt+0x1f7c>
   13374:	b	131e8 <__assert_fail@plt+0x2230>
   13378:	mov	r0, #0
   1337c:	cmn	r7, #1
   13380:	str	r0, [fp, #-36]	; 0xffffffdc
   13384:	str	r0, [fp, #-40]	; 0xffffffd8
   13388:	bne	1339c <__assert_fail@plt+0x23e4>
   1338c:	mov	r0, lr
   13390:	bl	10eec <strlen@plt>
   13394:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13398:	mov	r7, r0
   1339c:	ldr	r0, [sp, #44]	; 0x2c
   133a0:	str	r4, [sp, #84]	; 0x54
   133a4:	str	r5, [sp, #28]
   133a8:	cmp	r0, #0
   133ac:	beq	13600 <__assert_fail@plt+0x2648>
   133b0:	ldr	r0, [sp, #80]	; 0x50
   133b4:	mov	r8, #1
   133b8:	mov	r5, #0
   133bc:	add	r0, r0, sl
   133c0:	str	r0, [sp, #24]
   133c4:	sub	r0, fp, #40	; 0x28
   133c8:	mov	r3, r0
   133cc:	b	13408 <__assert_fail@plt+0x2450>
   133d0:	ldr	r5, [sp, #68]	; 0x44
   133d4:	add	r5, r0, r5
   133d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   133dc:	bl	10e14 <iswprint@plt>
   133e0:	cmp	r0, #0
   133e4:	sub	r4, fp, #40	; 0x28
   133e8:	movwne	r0, #1
   133ec:	and	r8, r8, r0
   133f0:	mov	r0, r4
   133f4:	bl	10dd8 <mbsinit@plt>
   133f8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   133fc:	mov	r3, r4
   13400:	cmp	r0, #0
   13404:	bne	136c4 <__assert_fail@plt+0x270c>
   13408:	str	r5, [sp, #68]	; 0x44
   1340c:	add	r5, r5, sl
   13410:	sub	r0, fp, #44	; 0x2c
   13414:	add	r1, lr, r5
   13418:	sub	r2, r7, r5
   1341c:	bl	1557c <__assert_fail@plt+0x45c4>
   13420:	cmn	r0, #2
   13424:	beq	13684 <__assert_fail@plt+0x26cc>
   13428:	ldr	ip, [fp, #-84]	; 0xffffffac
   1342c:	cmn	r0, #1
   13430:	beq	13678 <__assert_fail@plt+0x26c0>
   13434:	cmp	r0, #0
   13438:	beq	1367c <__assert_fail@plt+0x26c4>
   1343c:	cmp	r0, #2
   13440:	bcc	133d0 <__assert_fail@plt+0x2418>
   13444:	ldr	r1, [sp, #68]	; 0x44
   13448:	ldr	r2, [sp, #24]
   1344c:	add	r1, r2, r1
   13450:	sub	r2, r0, #1
   13454:	ldrb	r3, [r1]
   13458:	sub	r3, r3, #91	; 0x5b
   1345c:	cmp	r3, #33	; 0x21
   13460:	bls	13480 <__assert_fail@plt+0x24c8>
   13464:	add	r1, r1, #1
   13468:	subs	r2, r2, #1
   1346c:	beq	133d0 <__assert_fail@plt+0x2418>
   13470:	ldrb	r3, [r1]
   13474:	sub	r3, r3, #91	; 0x5b
   13478:	cmp	r3, #33	; 0x21
   1347c:	bhi	13464 <__assert_fail@plt+0x24ac>
   13480:	add	r5, pc, #0
   13484:	ldr	pc, [r5, r3, lsl #2]
   13488:	muleq	r1, ip, r9
   1348c:	muleq	r1, ip, r9
   13490:	andeq	r3, r1, r4, ror #8
   13494:	muleq	r1, ip, r9
   13498:	andeq	r3, r1, r4, ror #8
   1349c:	muleq	r1, ip, r9
   134a0:	andeq	r3, r1, r4, ror #8
   134a4:	andeq	r3, r1, r4, ror #8
   134a8:	andeq	r3, r1, r4, ror #8
   134ac:	andeq	r3, r1, r4, ror #8
   134b0:	andeq	r3, r1, r4, ror #8
   134b4:	andeq	r3, r1, r4, ror #8
   134b8:	andeq	r3, r1, r4, ror #8
   134bc:	andeq	r3, r1, r4, ror #8
   134c0:	andeq	r3, r1, r4, ror #8
   134c4:	andeq	r3, r1, r4, ror #8
   134c8:	andeq	r3, r1, r4, ror #8
   134cc:	andeq	r3, r1, r4, ror #8
   134d0:	andeq	r3, r1, r4, ror #8
   134d4:	andeq	r3, r1, r4, ror #8
   134d8:	andeq	r3, r1, r4, ror #8
   134dc:	andeq	r3, r1, r4, ror #8
   134e0:	andeq	r3, r1, r4, ror #8
   134e4:	andeq	r3, r1, r4, ror #8
   134e8:	andeq	r3, r1, r4, ror #8
   134ec:	andeq	r3, r1, r4, ror #8
   134f0:	andeq	r3, r1, r4, ror #8
   134f4:	andeq	r3, r1, r4, ror #8
   134f8:	andeq	r3, r1, r4, ror #8
   134fc:	andeq	r3, r1, r4, ror #8
   13500:	andeq	r3, r1, r4, ror #8
   13504:	andeq	r3, r1, r4, ror #8
   13508:	andeq	r3, r1, r4, ror #8
   1350c:	muleq	r1, ip, r9
   13510:	mov	r9, r0
   13514:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13518:	tst	r0, #1
   1351c:	beq	12f34 <__assert_fail@plt+0x1f7c>
   13520:	b	131e8 <__assert_fail@plt+0x2230>
   13524:	mov	r0, #0
   13528:	str	r0, [fp, #-56]	; 0xffffffc8
   1352c:	ldr	r0, [sp, #32]
   13530:	cmp	r0, #0
   13534:	beq	135ec <__assert_fail@plt+0x2634>
   13538:	add	r0, sl, #2
   1353c:	mov	r1, r7
   13540:	cmp	r0, r7
   13544:	bcs	135ec <__assert_fail@plt+0x2634>
   13548:	add	r1, sl, lr
   1354c:	ldrb	r1, [r1, #1]
   13550:	cmp	r1, #63	; 0x3f
   13554:	bne	135ec <__assert_fail@plt+0x2634>
   13558:	ldrb	r8, [lr, r0]
   1355c:	sub	r2, r8, #33	; 0x21
   13560:	cmp	r2, #29
   13564:	bhi	135ec <__assert_fail@plt+0x2634>
   13568:	mov	r1, r4
   1356c:	movw	r4, #20929	; 0x51c1
   13570:	mov	r3, #1
   13574:	movt	r4, #14336	; 0x3800
   13578:	tst	r4, r3, lsl r2
   1357c:	beq	138a8 <__assert_fail@plt+0x28f0>
   13580:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13584:	tst	r2, #1
   13588:	bne	13964 <__assert_fail@plt+0x29ac>
   1358c:	cmp	r9, r5
   13590:	mov	r6, r8
   13594:	mov	r4, r1
   13598:	mov	sl, r0
   1359c:	mov	r8, #0
   135a0:	movcc	r2, #63	; 0x3f
   135a4:	strbcc	r2, [ip, r9]
   135a8:	add	r2, r9, #1
   135ac:	cmp	r2, r5
   135b0:	movcc	r3, #34	; 0x22
   135b4:	strbcc	r3, [ip, r2]
   135b8:	add	r2, r9, #2
   135bc:	cmp	r2, r5
   135c0:	movcc	r3, #34	; 0x22
   135c4:	strbcc	r3, [ip, r2]
   135c8:	add	r2, r9, #3
   135cc:	add	r9, r9, #4
   135d0:	cmp	r2, r5
   135d4:	movcc	r3, #63	; 0x3f
   135d8:	strbcc	r3, [ip, r2]
   135dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135e0:	tst	r0, #1
   135e4:	beq	12f34 <__assert_fail@plt+0x1f7c>
   135e8:	b	131e8 <__assert_fail@plt+0x2230>
   135ec:	mov	r8, #0
   135f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135f4:	tst	r0, #1
   135f8:	beq	12f34 <__assert_fail@plt+0x1f7c>
   135fc:	b	131e8 <__assert_fail@plt+0x2230>
   13600:	mov	r8, #1
   13604:	mov	r5, #0
   13608:	sub	r4, fp, #40	; 0x28
   1360c:	str	r5, [sp, #68]	; 0x44
   13610:	add	r5, r5, sl
   13614:	sub	r0, fp, #44	; 0x2c
   13618:	mov	r3, r4
   1361c:	add	r1, lr, r5
   13620:	sub	r2, r7, r5
   13624:	bl	1557c <__assert_fail@plt+0x45c4>
   13628:	cmn	r0, #2
   1362c:	beq	13684 <__assert_fail@plt+0x26cc>
   13630:	cmn	r0, #1
   13634:	beq	13678 <__assert_fail@plt+0x26c0>
   13638:	ldr	r5, [sp, #68]	; 0x44
   1363c:	cmp	r0, #0
   13640:	beq	136c0 <__assert_fail@plt+0x2708>
   13644:	add	r5, r0, r5
   13648:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1364c:	bl	10e14 <iswprint@plt>
   13650:	cmp	r0, #0
   13654:	sub	r4, fp, #40	; 0x28
   13658:	movwne	r0, #1
   1365c:	and	r8, r8, r0
   13660:	mov	r0, r4
   13664:	bl	10dd8 <mbsinit@plt>
   13668:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1366c:	cmp	r0, #0
   13670:	beq	1360c <__assert_fail@plt+0x2654>
   13674:	b	136c4 <__assert_fail@plt+0x270c>
   13678:	mov	r8, #0
   1367c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13680:	b	136b8 <__assert_fail@plt+0x2700>
   13684:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13688:	mov	r8, #0
   1368c:	cmp	r5, r7
   13690:	bcs	136b8 <__assert_fail@plt+0x2700>
   13694:	ldrb	r0, [lr, r5]
   13698:	cmp	r0, #0
   1369c:	beq	136b8 <__assert_fail@plt+0x2700>
   136a0:	ldr	r0, [sp, #68]	; 0x44
   136a4:	add	r0, r0, #1
   136a8:	add	r5, r0, sl
   136ac:	str	r0, [sp, #68]	; 0x44
   136b0:	cmp	r5, r7
   136b4:	bcc	13694 <__assert_fail@plt+0x26dc>
   136b8:	ldr	r5, [sp, #68]	; 0x44
   136bc:	b	136c4 <__assert_fail@plt+0x270c>
   136c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   136c4:	mov	r1, r5
   136c8:	ldr	r5, [sp, #28]
   136cc:	ldr	r4, [sp, #84]	; 0x54
   136d0:	ldr	r0, [sp, #52]	; 0x34
   136d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   136d8:	cmp	r1, #1
   136dc:	orr	r2, r8, r0
   136e0:	mov	r0, r1
   136e4:	bhi	136f0 <__assert_fail@plt+0x2738>
   136e8:	tst	r2, #1
   136ec:	bne	12f28 <__assert_fail@plt+0x1f70>
   136f0:	add	r0, r0, sl
   136f4:	str	r2, [sp, #84]	; 0x54
   136f8:	str	r0, [fp, #-56]	; 0xffffffc8
   136fc:	mov	r0, #0
   13700:	tst	r2, #1
   13704:	bne	137e4 <__assert_fail@plt+0x282c>
   13708:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1370c:	tst	r1, #1
   13710:	bne	13964 <__assert_fail@plt+0x29ac>
   13714:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13718:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1371c:	subs	r2, r1, #2
   13720:	movwne	r2, #1
   13724:	orr	r2, r2, r0
   13728:	tst	r2, #1
   1372c:	bne	13768 <__assert_fail@plt+0x27b0>
   13730:	cmp	r9, r5
   13734:	add	r2, r9, #1
   13738:	mov	r0, #1
   1373c:	movcc	r1, #39	; 0x27
   13740:	str	r0, [fp, #-52]	; 0xffffffcc
   13744:	strbcc	r1, [ip, r9]
   13748:	cmp	r2, r5
   1374c:	movcc	r1, #36	; 0x24
   13750:	strbcc	r1, [ip, r2]
   13754:	add	r2, r9, #2
   13758:	add	r9, r9, #3
   1375c:	cmp	r2, r5
   13760:	movcc	r1, #39	; 0x27
   13764:	strbcc	r1, [ip, r2]
   13768:	cmp	r9, r5
   1376c:	add	r2, r9, #1
   13770:	movcc	r1, #92	; 0x5c
   13774:	strbcc	r1, [ip, r9]
   13778:	cmp	r2, r5
   1377c:	bcs	13790 <__assert_fail@plt+0x27d8>
   13780:	uxtb	r3, r6
   13784:	mov	r1, #48	; 0x30
   13788:	orr	r3, r1, r3, lsr #6
   1378c:	strb	r3, [ip, r2]
   13790:	add	r2, r9, #2
   13794:	add	r9, r9, #3
   13798:	cmp	r2, r5
   1379c:	lsrcc	r3, r6, #3
   137a0:	movcc	r1, #6
   137a4:	bficc	r3, r1, #3, #29
   137a8:	mov	r1, #6
   137ac:	bfi	r6, r1, #3, #29
   137b0:	strbcc	r3, [ip, r2]
   137b4:	mov	r2, #1
   137b8:	b	13818 <__assert_fail@plt+0x2860>
   137bc:	ldr	r1, [sp, #80]	; 0x50
   137c0:	cmp	r9, r2
   137c4:	mov	r5, r2
   137c8:	ldr	r2, [sp, #84]	; 0x54
   137cc:	strbcc	r6, [ip, r9]
   137d0:	add	r9, r9, #1
   137d4:	ldrb	r6, [r1, sl]
   137d8:	mov	sl, r3
   137dc:	tst	r2, #1
   137e0:	beq	13708 <__assert_fail@plt+0x2750>
   137e4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   137e8:	tst	r1, #1
   137ec:	beq	1380c <__assert_fail@plt+0x2854>
   137f0:	cmp	r9, r5
   137f4:	mov	r2, r0
   137f8:	movcc	r1, #92	; 0x5c
   137fc:	strbcc	r1, [ip, r9]
   13800:	add	r9, r9, #1
   13804:	mov	r1, #0
   13808:	b	13814 <__assert_fail@plt+0x285c>
   1380c:	mov	r1, #0
   13810:	mov	r2, r0
   13814:	str	r1, [fp, #-48]	; 0xffffffd0
   13818:	mov	r0, r2
   1381c:	and	r1, r2, #1
   13820:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13824:	add	r3, sl, #1
   13828:	cmp	r2, r3
   1382c:	bls	1388c <__assert_fail@plt+0x28d4>
   13830:	mov	r2, r5
   13834:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13838:	cmp	r1, #0
   1383c:	movwne	r1, #1
   13840:	mvn	r5, r5
   13844:	orr	r5, r5, r1
   13848:	tst	r5, #1
   1384c:	bne	137bc <__assert_fail@plt+0x2804>
   13850:	cmp	r9, r2
   13854:	movcc	r5, r4
   13858:	movcc	r4, #39	; 0x27
   1385c:	strbcc	r4, [ip, r9]
   13860:	movcc	r4, r5
   13864:	add	r5, r9, #1
   13868:	add	r9, r9, #2
   1386c:	cmp	r5, r2
   13870:	movcc	r1, r4
   13874:	movcc	r4, #39	; 0x27
   13878:	strbcc	r4, [ip, r5]
   1387c:	movcc	r4, r1
   13880:	mov	r1, #0
   13884:	str	r1, [fp, #-52]	; 0xffffffcc
   13888:	b	137bc <__assert_fail@plt+0x2804>
   1388c:	cmp	r1, #0
   13890:	movwne	r1, #1
   13894:	str	r1, [fp, #-56]	; 0xffffffc8
   13898:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1389c:	cmp	r0, #0
   138a0:	beq	132c8 <__assert_fail@plt+0x2310>
   138a4:	b	132fc <__assert_fail@plt+0x2344>
   138a8:	mov	r8, #0
   138ac:	mov	r4, r1
   138b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138b4:	tst	r0, #1
   138b8:	beq	12f34 <__assert_fail@plt+0x1f7c>
   138bc:	b	131e8 <__assert_fail@plt+0x2230>
   138c0:	mov	r7, sl
   138c4:	b	138cc <__assert_fail@plt+0x2914>
   138c8:	mvn	r7, #0
   138cc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   138d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   138d4:	ldr	r2, [sp, #88]	; 0x58
   138d8:	eor	r0, r1, #2
   138dc:	orr	r0, r0, r9
   138e0:	clz	r0, r0
   138e4:	lsr	r0, r0, #5
   138e8:	tst	r3, r0
   138ec:	bne	13964 <__assert_fail@plt+0x29ac>
   138f0:	subs	r0, r1, #2
   138f4:	movwne	r0, #1
   138f8:	orr	r0, r3, r0
   138fc:	tst	r0, #1
   13900:	ldreq	r0, [sp, #60]	; 0x3c
   13904:	eoreq	r0, r0, #1
   13908:	tsteq	r0, #1
   1390c:	bne	13a40 <__assert_fail@plt+0x2a88>
   13910:	tst	r4, #1
   13914:	bne	13a04 <__assert_fail@plt+0x2a4c>
   13918:	ldr	r6, [sp, #56]	; 0x38
   1391c:	mov	r8, #0
   13920:	cmp	r6, #0
   13924:	beq	13a3c <__assert_fail@plt+0x2a84>
   13928:	mov	r1, #0
   1392c:	mov	r4, #2
   13930:	cmp	r5, #0
   13934:	mov	r0, r2
   13938:	mov	r3, #0
   1393c:	str	r1, [sp, #84]	; 0x54
   13940:	beq	12788 <__assert_fail@plt+0x17d0>
   13944:	b	13a40 <__assert_fail@plt+0x2a88>
   13948:	movw	r0, #23758	; 0x5cce
   1394c:	movt	r0, #1
   13950:	str	r0, [sp, #76]	; 0x4c
   13954:	mov	r9, #0
   13958:	tst	r8, #1
   1395c:	beq	12a20 <__assert_fail@plt+0x1a68>
   13960:	b	12b60 <__assert_fail@plt+0x1ba8>
   13964:	ldr	r1, [sp, #88]	; 0x58
   13968:	mov	r0, #2
   1396c:	tst	r1, #1
   13970:	movwne	r0, #4
   13974:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13978:	ldr	r1, [fp, #12]
   1397c:	cmp	r2, #2
   13980:	moveq	r2, r0
   13984:	b	139bc <__assert_fail@plt+0x2a04>
   13988:	ldr	ip, [fp, #-84]	; 0xffffffac
   1398c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13990:	ldr	r1, [fp, #12]
   13994:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13998:	b	139bc <__assert_fail@plt+0x2a04>
   1399c:	ldr	r1, [sp, #88]	; 0x58
   139a0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   139a4:	ldr	r5, [sp, #28]
   139a8:	mov	r0, #2
   139ac:	tst	r1, #1
   139b0:	ldr	r1, [fp, #12]
   139b4:	movwne	r0, #4
   139b8:	mov	r2, r0
   139bc:	mov	r0, #0
   139c0:	bic	r1, r1, #2
   139c4:	str	r2, [sp]
   139c8:	mov	r2, lr
   139cc:	str	r0, [sp, #8]
   139d0:	ldr	r0, [sp, #72]	; 0x48
   139d4:	str	r1, [sp, #4]
   139d8:	mov	r1, r5
   139dc:	str	r0, [sp, #12]
   139e0:	ldr	r0, [sp, #76]	; 0x4c
   139e4:	str	r0, [sp, #16]
   139e8:	mov	r0, ip
   139ec:	mov	r3, r7
   139f0:	bl	126fc <__assert_fail@plt+0x1744>
   139f4:	mov	r9, r0
   139f8:	mov	r0, r9
   139fc:	sub	sp, fp, #28
   13a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a04:	mov	r0, #5
   13a08:	ldr	r1, [sp, #56]	; 0x38
   13a0c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13a10:	str	r0, [sp]
   13a14:	ldr	r0, [fp, #12]
   13a18:	str	r0, [sp, #4]
   13a1c:	ldr	r0, [fp, #16]
   13a20:	str	r0, [sp, #8]
   13a24:	ldr	r0, [sp, #72]	; 0x48
   13a28:	str	r0, [sp, #12]
   13a2c:	ldr	r0, [sp, #76]	; 0x4c
   13a30:	str	r0, [sp, #16]
   13a34:	ldr	r0, [fp, #-84]	; 0xffffffac
   13a38:	b	139ec <__assert_fail@plt+0x2a34>
   13a3c:	mov	r3, #0
   13a40:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13a44:	cmp	r1, #0
   13a48:	beq	13a84 <__assert_fail@plt+0x2acc>
   13a4c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13a50:	tst	r3, #1
   13a54:	bne	13a88 <__assert_fail@plt+0x2ad0>
   13a58:	ldrb	r0, [r1]
   13a5c:	cmp	r0, #0
   13a60:	beq	13a88 <__assert_fail@plt+0x2ad0>
   13a64:	add	r1, r1, #1
   13a68:	cmp	r9, r5
   13a6c:	strbcc	r0, [r2, r9]
   13a70:	add	r9, r9, #1
   13a74:	ldrb	r0, [r1], #1
   13a78:	cmp	r0, #0
   13a7c:	bne	13a68 <__assert_fail@plt+0x2ab0>
   13a80:	b	13a88 <__assert_fail@plt+0x2ad0>
   13a84:	ldr	r2, [fp, #-84]	; 0xffffffac
   13a88:	cmp	r9, r5
   13a8c:	movcc	r0, #0
   13a90:	strbcc	r0, [r2, r9]
   13a94:	mov	r0, r9
   13a98:	sub	sp, fp, #28
   13a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa0:	mov	r0, #4
   13aa4:	b	13974 <__assert_fail@plt+0x29bc>
   13aa8:	bl	10fa0 <abort@plt>
   13aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab0:	add	fp, sp, #28
   13ab4:	sub	sp, sp, #28
   13ab8:	movw	r5, #29040	; 0x7170
   13abc:	cmp	r2, #0
   13ac0:	mov	r4, r1
   13ac4:	mov	r7, r0
   13ac8:	str	r0, [sp, #20]
   13acc:	movt	r5, #2
   13ad0:	movne	r5, r2
   13ad4:	bl	10ef8 <__errno_location@plt>
   13ad8:	mov	sl, r0
   13adc:	ldr	r2, [r5, #40]	; 0x28
   13ae0:	ldr	r3, [r5, #44]	; 0x2c
   13ae4:	ldm	r5, {r0, r1}
   13ae8:	orr	r8, r1, #1
   13aec:	add	r9, r5, #8
   13af0:	mov	r1, #0
   13af4:	ldr	r6, [sl]
   13af8:	stm	sp, {r0, r8, r9}
   13afc:	mov	r0, #0
   13b00:	str	r2, [sp, #12]
   13b04:	str	r3, [sp, #16]
   13b08:	mov	r2, r7
   13b0c:	mov	r3, r4
   13b10:	str	r6, [sp, #24]
   13b14:	mov	r6, r4
   13b18:	bl	126fc <__assert_fail@plt+0x1744>
   13b1c:	add	r7, r0, #1
   13b20:	mov	r0, r7
   13b24:	bl	14e70 <__assert_fail@plt+0x3eb8>
   13b28:	mov	r4, r0
   13b2c:	ldr	r0, [r5]
   13b30:	ldr	r2, [r5, #44]	; 0x2c
   13b34:	ldr	r1, [r5, #40]	; 0x28
   13b38:	mov	r3, r6
   13b3c:	stm	sp, {r0, r8, r9}
   13b40:	str	r2, [sp, #16]
   13b44:	ldr	r2, [sp, #20]
   13b48:	str	r1, [sp, #12]
   13b4c:	mov	r0, r4
   13b50:	mov	r1, r7
   13b54:	bl	126fc <__assert_fail@plt+0x1744>
   13b58:	ldr	r0, [sp, #24]
   13b5c:	str	r0, [sl]
   13b60:	mov	r0, r4
   13b64:	sub	sp, fp, #28
   13b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b70:	add	fp, sp, #28
   13b74:	sub	sp, sp, #36	; 0x24
   13b78:	movw	r8, #29040	; 0x7170
   13b7c:	cmp	r3, #0
   13b80:	mov	r4, r2
   13b84:	str	r2, [sp, #24]
   13b88:	mov	r5, r1
   13b8c:	mov	r6, r0
   13b90:	str	r0, [sp, #20]
   13b94:	movt	r8, #2
   13b98:	movne	r8, r3
   13b9c:	bl	10ef8 <__errno_location@plt>
   13ba0:	str	r0, [sp, #28]
   13ba4:	ldr	r1, [r8, #40]	; 0x28
   13ba8:	ldr	r2, [r8, #44]	; 0x2c
   13bac:	ldr	r7, [r0]
   13bb0:	cmp	r4, #0
   13bb4:	add	sl, r8, #8
   13bb8:	mov	r0, #0
   13bbc:	ldm	r8, {r3, r9}
   13bc0:	orreq	r9, r9, #1
   13bc4:	stm	sp, {r3, r9, sl}
   13bc8:	str	r1, [sp, #12]
   13bcc:	str	r2, [sp, #16]
   13bd0:	mov	r1, #0
   13bd4:	mov	r2, r6
   13bd8:	mov	r3, r5
   13bdc:	str	r7, [sp, #32]
   13be0:	mov	r7, r5
   13be4:	bl	126fc <__assert_fail@plt+0x1744>
   13be8:	add	r4, r0, #1
   13bec:	mov	r5, r0
   13bf0:	mov	r0, r4
   13bf4:	bl	14e70 <__assert_fail@plt+0x3eb8>
   13bf8:	mov	r6, r0
   13bfc:	ldr	r0, [r8]
   13c00:	ldr	r2, [r8, #44]	; 0x2c
   13c04:	ldr	r1, [r8, #40]	; 0x28
   13c08:	mov	r3, r7
   13c0c:	stm	sp, {r0, r9, sl}
   13c10:	str	r2, [sp, #16]
   13c14:	ldr	r2, [sp, #20]
   13c18:	str	r1, [sp, #12]
   13c1c:	mov	r0, r6
   13c20:	mov	r1, r4
   13c24:	bl	126fc <__assert_fail@plt+0x1744>
   13c28:	ldr	r0, [sp, #24]
   13c2c:	ldr	r1, [sp, #32]
   13c30:	ldr	r2, [sp, #28]
   13c34:	cmp	r0, #0
   13c38:	str	r1, [r2]
   13c3c:	strne	r5, [r0]
   13c40:	mov	r0, r6
   13c44:	sub	sp, fp, #28
   13c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c4c:	push	{r4, r5, r6, r7, fp, lr}
   13c50:	add	fp, sp, #16
   13c54:	movw	r4, #28952	; 0x7118
   13c58:	movt	r4, #2
   13c5c:	ldrd	r6, [r4]
   13c60:	cmp	r7, #2
   13c64:	blt	13c90 <__assert_fail@plt+0x2cd8>
   13c68:	add	r5, r6, #12
   13c6c:	mov	r7, #0
   13c70:	ldr	r0, [r5, r7, lsl #3]
   13c74:	bl	1551c <__assert_fail@plt+0x4564>
   13c78:	ldr	r1, [r4, #4]
   13c7c:	add	r2, r7, #2
   13c80:	add	r0, r7, #1
   13c84:	mov	r7, r0
   13c88:	cmp	r2, r1
   13c8c:	blt	13c70 <__assert_fail@plt+0x2cb8>
   13c90:	ldr	r0, [r6, #4]
   13c94:	movw	r5, #29088	; 0x71a0
   13c98:	movt	r5, #2
   13c9c:	cmp	r0, r5
   13ca0:	beq	13cb4 <__assert_fail@plt+0x2cfc>
   13ca4:	bl	1551c <__assert_fail@plt+0x4564>
   13ca8:	mov	r0, #256	; 0x100
   13cac:	str	r0, [r4, #8]
   13cb0:	str	r5, [r4, #12]
   13cb4:	add	r5, r4, #8
   13cb8:	cmp	r6, r5
   13cbc:	beq	13ccc <__assert_fail@plt+0x2d14>
   13cc0:	mov	r0, r6
   13cc4:	bl	1551c <__assert_fail@plt+0x4564>
   13cc8:	str	r5, [r4]
   13ccc:	mov	r0, #1
   13cd0:	str	r0, [r4, #4]
   13cd4:	pop	{r4, r5, r6, r7, fp, pc}
   13cd8:	movw	r3, #29040	; 0x7170
   13cdc:	mvn	r2, #0
   13ce0:	movt	r3, #2
   13ce4:	b	13ce8 <__assert_fail@plt+0x2d30>
   13ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cec:	add	fp, sp, #28
   13cf0:	sub	sp, sp, #44	; 0x2c
   13cf4:	mov	r7, r3
   13cf8:	str	r2, [sp, #36]	; 0x24
   13cfc:	str	r1, [sp, #32]
   13d00:	mov	r5, r0
   13d04:	bl	10ef8 <__errno_location@plt>
   13d08:	cmp	r5, #0
   13d0c:	bmi	13e74 <__assert_fail@plt+0x2ebc>
   13d10:	cmn	r5, #-2147483647	; 0x80000001
   13d14:	beq	13e74 <__assert_fail@plt+0x2ebc>
   13d18:	movw	r8, #28952	; 0x7118
   13d1c:	mov	r4, r0
   13d20:	ldr	r0, [r0]
   13d24:	movt	r8, #2
   13d28:	str	r4, [sp, #28]
   13d2c:	ldr	r1, [r8, #4]
   13d30:	ldr	r6, [r8]
   13d34:	str	r0, [sp, #24]
   13d38:	cmp	r1, r5
   13d3c:	ble	13d48 <__assert_fail@plt+0x2d90>
   13d40:	mov	sl, r6
   13d44:	b	13db0 <__assert_fail@plt+0x2df8>
   13d48:	mov	r0, #8
   13d4c:	add	r9, r8, #8
   13d50:	str	r1, [fp, #-32]	; 0xffffffe0
   13d54:	sub	r1, r5, r1
   13d58:	mvn	r3, #-2147483648	; 0x80000000
   13d5c:	str	r0, [sp]
   13d60:	subs	r0, r6, r9
   13d64:	add	r2, r1, #1
   13d68:	sub	r1, fp, #32
   13d6c:	movne	r0, r6
   13d70:	bl	15070 <__assert_fail@plt+0x40b8>
   13d74:	mov	sl, r0
   13d78:	cmp	r6, r9
   13d7c:	str	r0, [r8]
   13d80:	bne	13d8c <__assert_fail@plt+0x2dd4>
   13d84:	ldrd	r0, [r8, #8]
   13d88:	stm	sl, {r0, r1}
   13d8c:	ldr	r1, [r8, #4]
   13d90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13d94:	add	r0, sl, r1, lsl #3
   13d98:	sub	r1, r2, r1
   13d9c:	lsl	r2, r1, #3
   13da0:	mov	r1, #0
   13da4:	bl	10f10 <memset@plt>
   13da8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13dac:	str	r0, [r8, #4]
   13db0:	mov	r9, sl
   13db4:	ldm	r7, {r0, r1}
   13db8:	orr	r8, r1, #1
   13dbc:	add	r1, r7, #8
   13dc0:	ldr	r2, [r7, #40]	; 0x28
   13dc4:	ldr	r3, [r7, #44]	; 0x2c
   13dc8:	ldr	r6, [r9, r5, lsl #3]!
   13dcc:	str	r1, [sp, #20]
   13dd0:	ldr	r4, [r9, #4]!
   13dd4:	stm	sp, {r0, r8}
   13dd8:	add	r0, sp, #8
   13ddc:	stm	r0, {r1, r2, r3}
   13de0:	ldr	r2, [sp, #32]
   13de4:	ldr	r3, [sp, #36]	; 0x24
   13de8:	mov	r1, r6
   13dec:	mov	r0, r4
   13df0:	bl	126fc <__assert_fail@plt+0x1744>
   13df4:	cmp	r6, r0
   13df8:	bhi	13e5c <__assert_fail@plt+0x2ea4>
   13dfc:	add	r6, r0, #1
   13e00:	movw	r0, #29088	; 0x71a0
   13e04:	movt	r0, #2
   13e08:	str	r6, [sl, r5, lsl #3]
   13e0c:	cmp	r4, r0
   13e10:	beq	13e1c <__assert_fail@plt+0x2e64>
   13e14:	mov	r0, r4
   13e18:	bl	1551c <__assert_fail@plt+0x4564>
   13e1c:	mov	r0, r6
   13e20:	bl	14e70 <__assert_fail@plt+0x3eb8>
   13e24:	str	r0, [r9]
   13e28:	mov	r4, r0
   13e2c:	add	r3, sp, #8
   13e30:	ldr	r0, [r7]
   13e34:	ldr	r1, [r7, #40]	; 0x28
   13e38:	ldr	r2, [r7, #44]	; 0x2c
   13e3c:	stm	sp, {r0, r8}
   13e40:	ldr	r0, [sp, #20]
   13e44:	stm	r3, {r0, r1, r2}
   13e48:	ldr	r2, [sp, #32]
   13e4c:	ldr	r3, [sp, #36]	; 0x24
   13e50:	mov	r0, r4
   13e54:	mov	r1, r6
   13e58:	bl	126fc <__assert_fail@plt+0x1744>
   13e5c:	ldr	r1, [sp, #24]
   13e60:	ldr	r0, [sp, #28]
   13e64:	str	r1, [r0]
   13e68:	mov	r0, r4
   13e6c:	sub	sp, fp, #28
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	bl	10fa0 <abort@plt>
   13e78:	movw	r3, #29040	; 0x7170
   13e7c:	movt	r3, #2
   13e80:	b	13ce8 <__assert_fail@plt+0x2d30>
   13e84:	movw	r3, #29040	; 0x7170
   13e88:	mov	r1, r0
   13e8c:	mov	r0, #0
   13e90:	mvn	r2, #0
   13e94:	movt	r3, #2
   13e98:	b	13ce8 <__assert_fail@plt+0x2d30>
   13e9c:	movw	r3, #29040	; 0x7170
   13ea0:	mov	r2, r1
   13ea4:	mov	r1, r0
   13ea8:	mov	r0, #0
   13eac:	movt	r3, #2
   13eb0:	b	13ce8 <__assert_fail@plt+0x2d30>
   13eb4:	push	{fp, lr}
   13eb8:	mov	fp, sp
   13ebc:	sub	sp, sp, #48	; 0x30
   13ec0:	vmov.i32	q8, #0	; 0x00000000
   13ec4:	mov	ip, #32
   13ec8:	mov	r3, sp
   13ecc:	mov	lr, r2
   13ed0:	cmp	r1, #10
   13ed4:	add	r2, r3, #16
   13ed8:	vst1.64	{d16-d17}, [r3], ip
   13edc:	vst1.64	{d16-d17}, [r2]
   13ee0:	vst1.64	{d16-d17}, [r3]
   13ee4:	beq	13f04 <__assert_fail@plt+0x2f4c>
   13ee8:	str	r1, [sp]
   13eec:	mov	r3, sp
   13ef0:	mov	r1, lr
   13ef4:	mvn	r2, #0
   13ef8:	bl	13ce8 <__assert_fail@plt+0x2d30>
   13efc:	mov	sp, fp
   13f00:	pop	{fp, pc}
   13f04:	bl	10fa0 <abort@plt>
   13f08:	push	{r4, sl, fp, lr}
   13f0c:	add	fp, sp, #8
   13f10:	sub	sp, sp, #48	; 0x30
   13f14:	vmov.i32	q8, #0	; 0x00000000
   13f18:	mov	ip, r3
   13f1c:	mov	r3, sp
   13f20:	mov	lr, #32
   13f24:	cmp	r1, #10
   13f28:	add	r4, r3, #16
   13f2c:	vst1.64	{d16-d17}, [r3], lr
   13f30:	vst1.64	{d16-d17}, [r4]
   13f34:	vst1.64	{d16-d17}, [r3]
   13f38:	beq	13f58 <__assert_fail@plt+0x2fa0>
   13f3c:	str	r1, [sp]
   13f40:	mov	r1, r2
   13f44:	mov	r3, sp
   13f48:	mov	r2, ip
   13f4c:	bl	13ce8 <__assert_fail@plt+0x2d30>
   13f50:	sub	sp, fp, #8
   13f54:	pop	{r4, sl, fp, pc}
   13f58:	bl	10fa0 <abort@plt>
   13f5c:	push	{fp, lr}
   13f60:	mov	fp, sp
   13f64:	sub	sp, sp, #48	; 0x30
   13f68:	vmov.i32	q8, #0	; 0x00000000
   13f6c:	mov	r3, sp
   13f70:	mov	ip, #32
   13f74:	cmp	r0, #10
   13f78:	add	r2, r3, #16
   13f7c:	vst1.64	{d16-d17}, [r3], ip
   13f80:	vst1.64	{d16-d17}, [r2]
   13f84:	vst1.64	{d16-d17}, [r3]
   13f88:	beq	13fa8 <__assert_fail@plt+0x2ff0>
   13f8c:	str	r0, [sp]
   13f90:	mov	r3, sp
   13f94:	mov	r0, #0
   13f98:	mvn	r2, #0
   13f9c:	bl	13ce8 <__assert_fail@plt+0x2d30>
   13fa0:	mov	sp, fp
   13fa4:	pop	{fp, pc}
   13fa8:	bl	10fa0 <abort@plt>
   13fac:	push	{fp, lr}
   13fb0:	mov	fp, sp
   13fb4:	sub	sp, sp, #48	; 0x30
   13fb8:	vmov.i32	q8, #0	; 0x00000000
   13fbc:	mov	r3, sp
   13fc0:	mov	ip, #32
   13fc4:	cmp	r0, #10
   13fc8:	add	lr, r3, #16
   13fcc:	vst1.64	{d16-d17}, [r3], ip
   13fd0:	vst1.64	{d16-d17}, [lr]
   13fd4:	vst1.64	{d16-d17}, [r3]
   13fd8:	beq	13ff4 <__assert_fail@plt+0x303c>
   13fdc:	str	r0, [sp]
   13fe0:	mov	r3, sp
   13fe4:	mov	r0, #0
   13fe8:	bl	13ce8 <__assert_fail@plt+0x2d30>
   13fec:	mov	sp, fp
   13ff0:	pop	{fp, pc}
   13ff4:	bl	10fa0 <abort@plt>
   13ff8:	push	{r4, sl, fp, lr}
   13ffc:	add	fp, sp, #8
   14000:	sub	sp, sp, #48	; 0x30
   14004:	mov	lr, r0
   14008:	movw	r0, #29040	; 0x7170
   1400c:	mov	ip, r1
   14010:	mov	r1, #32
   14014:	mov	r4, #1
   14018:	movt	r0, #2
   1401c:	add	r3, r0, #16
   14020:	vld1.64	{d16-d17}, [r0], r1
   14024:	vld1.64	{d20-d21}, [r0]
   14028:	vld1.64	{d18-d19}, [r3]
   1402c:	mov	r3, sp
   14030:	add	r0, r3, #32
   14034:	add	r1, r3, #16
   14038:	vst1.64	{d20-d21}, [r0]
   1403c:	mov	r0, #28
   14040:	vst1.64	{d18-d19}, [r1]
   14044:	mov	r1, r3
   14048:	and	r0, r0, r2, lsr #3
   1404c:	and	r2, r2, #31
   14050:	vst1.64	{d16-d17}, [r1], r0
   14054:	ldr	r0, [r1, #8]
   14058:	bic	r4, r4, r0, lsr r2
   1405c:	eor	r0, r0, r4, lsl r2
   14060:	mov	r2, ip
   14064:	str	r0, [r1, #8]
   14068:	mov	r0, #0
   1406c:	mov	r1, lr
   14070:	bl	13ce8 <__assert_fail@plt+0x2d30>
   14074:	sub	sp, fp, #8
   14078:	pop	{r4, sl, fp, pc}
   1407c:	push	{fp, lr}
   14080:	mov	fp, sp
   14084:	sub	sp, sp, #48	; 0x30
   14088:	mov	ip, r0
   1408c:	movw	r0, #29040	; 0x7170
   14090:	mov	r2, #32
   14094:	movt	r0, #2
   14098:	add	r3, r0, #16
   1409c:	vld1.64	{d16-d17}, [r0], r2
   140a0:	vld1.64	{d20-d21}, [r0]
   140a4:	vld1.64	{d18-d19}, [r3]
   140a8:	mov	r3, sp
   140ac:	add	r0, r3, #32
   140b0:	add	r2, r3, #16
   140b4:	vst1.64	{d20-d21}, [r0]
   140b8:	mov	r0, #28
   140bc:	vst1.64	{d18-d19}, [r2]
   140c0:	mov	r2, r3
   140c4:	and	r0, r0, r1, lsr #3
   140c8:	and	r1, r1, #31
   140cc:	vst1.64	{d16-d17}, [r2], r0
   140d0:	mov	r0, #1
   140d4:	ldr	lr, [r2, #8]
   140d8:	bic	r0, r0, lr, lsr r1
   140dc:	eor	r0, lr, r0, lsl r1
   140e0:	mov	r1, ip
   140e4:	str	r0, [r2, #8]
   140e8:	mov	r0, #0
   140ec:	mvn	r2, #0
   140f0:	bl	13ce8 <__assert_fail@plt+0x2d30>
   140f4:	mov	sp, fp
   140f8:	pop	{fp, pc}
   140fc:	push	{fp, lr}
   14100:	mov	fp, sp
   14104:	sub	sp, sp, #48	; 0x30
   14108:	mov	r1, r0
   1410c:	movw	r0, #29040	; 0x7170
   14110:	mov	r3, #32
   14114:	movt	r0, #2
   14118:	add	r2, r0, #16
   1411c:	vld1.64	{d16-d17}, [r0], r3
   14120:	mov	r3, sp
   14124:	vld1.64	{d18-d19}, [r2]
   14128:	vld1.64	{d20-d21}, [r0]
   1412c:	add	r2, r3, #16
   14130:	add	r0, r3, #32
   14134:	vst1.64	{d18-d19}, [r2]
   14138:	vst1.64	{d20-d21}, [r0]
   1413c:	mov	r0, #12
   14140:	mov	r2, r3
   14144:	vst1.64	{d16-d17}, [r2], r0
   14148:	ldr	r0, [r2]
   1414c:	orr	r0, r0, #67108864	; 0x4000000
   14150:	str	r0, [r2]
   14154:	mov	r0, #0
   14158:	mvn	r2, #0
   1415c:	bl	13ce8 <__assert_fail@plt+0x2d30>
   14160:	mov	sp, fp
   14164:	pop	{fp, pc}
   14168:	push	{fp, lr}
   1416c:	mov	fp, sp
   14170:	sub	sp, sp, #48	; 0x30
   14174:	mov	ip, r1
   14178:	mov	r1, r0
   1417c:	movw	r0, #29040	; 0x7170
   14180:	mov	r2, #32
   14184:	movt	r0, #2
   14188:	add	r3, r0, #16
   1418c:	vld1.64	{d16-d17}, [r0], r2
   14190:	vld1.64	{d18-d19}, [r3]
   14194:	vld1.64	{d20-d21}, [r0]
   14198:	mov	r3, sp
   1419c:	add	r2, r3, #16
   141a0:	add	r0, r3, #32
   141a4:	vst1.64	{d18-d19}, [r2]
   141a8:	vst1.64	{d20-d21}, [r0]
   141ac:	mov	r0, #12
   141b0:	mov	r2, r3
   141b4:	vst1.64	{d16-d17}, [r2], r0
   141b8:	ldr	r0, [r2]
   141bc:	orr	r0, r0, #67108864	; 0x4000000
   141c0:	str	r0, [r2]
   141c4:	mov	r0, #0
   141c8:	mov	r2, ip
   141cc:	bl	13ce8 <__assert_fail@plt+0x2d30>
   141d0:	mov	sp, fp
   141d4:	pop	{fp, pc}
   141d8:	push	{r4, sl, fp, lr}
   141dc:	add	fp, sp, #8
   141e0:	sub	sp, sp, #96	; 0x60
   141e4:	vmov.i32	q8, #0	; 0x00000000
   141e8:	mov	ip, r2
   141ec:	mov	r2, sp
   141f0:	mov	r4, #28
   141f4:	cmp	r1, #10
   141f8:	mov	r3, r2
   141fc:	add	lr, r2, #16
   14200:	vst1.64	{d16-d17}, [r3], r4
   14204:	vst1.64	{d16-d17}, [lr]
   14208:	vst1.32	{d16-d17}, [r3]
   1420c:	beq	1425c <__assert_fail@plt+0x32a4>
   14210:	vld1.64	{d16-d17}, [r2], r4
   14214:	vld1.64	{d18-d19}, [lr]
   14218:	add	r3, sp, #48	; 0x30
   1421c:	vld1.32	{d20-d21}, [r2]
   14220:	add	r2, r3, #20
   14224:	add	r4, r3, #4
   14228:	vst1.32	{d18-d19}, [r2]
   1422c:	add	r2, r3, #32
   14230:	vst1.32	{d16-d17}, [r4]
   14234:	vst1.32	{d20-d21}, [r2]
   14238:	str	r1, [sp, #48]	; 0x30
   1423c:	mvn	r2, #0
   14240:	ldr	r1, [sp, #60]	; 0x3c
   14244:	orr	r1, r1, #67108864	; 0x4000000
   14248:	str	r1, [sp, #60]	; 0x3c
   1424c:	mov	r1, ip
   14250:	bl	13ce8 <__assert_fail@plt+0x2d30>
   14254:	sub	sp, fp, #8
   14258:	pop	{r4, sl, fp, pc}
   1425c:	bl	10fa0 <abort@plt>
   14260:	push	{r4, r5, r6, sl, fp, lr}
   14264:	add	fp, sp, #16
   14268:	sub	sp, sp, #48	; 0x30
   1426c:	mov	ip, r3
   14270:	movw	r3, #29040	; 0x7170
   14274:	mov	r6, #32
   14278:	cmp	r1, #0
   1427c:	mov	r4, sp
   14280:	movt	r3, #2
   14284:	cmpne	r2, #0
   14288:	add	r5, r4, #16
   1428c:	add	lr, r3, #16
   14290:	vld1.64	{d16-d17}, [r3], r6
   14294:	vld1.64	{d18-d19}, [lr]
   14298:	vld1.64	{d20-d21}, [r3]
   1429c:	mov	r3, #10
   142a0:	vst1.64	{d16-d17}, [r4], r6
   142a4:	vst1.64	{d18-d19}, [r5]
   142a8:	vst1.64	{d20-d21}, [r4]
   142ac:	str	r3, [sp]
   142b0:	bne	142b8 <__assert_fail@plt+0x3300>
   142b4:	bl	10fa0 <abort@plt>
   142b8:	str	r2, [sp, #44]	; 0x2c
   142bc:	str	r1, [sp, #40]	; 0x28
   142c0:	mov	r3, sp
   142c4:	mov	r1, ip
   142c8:	mvn	r2, #0
   142cc:	bl	13ce8 <__assert_fail@plt+0x2d30>
   142d0:	sub	sp, fp, #16
   142d4:	pop	{r4, r5, r6, sl, fp, pc}
   142d8:	push	{r4, r5, r6, sl, fp, lr}
   142dc:	add	fp, sp, #16
   142e0:	sub	sp, sp, #48	; 0x30
   142e4:	mov	lr, r3
   142e8:	movw	r3, #29040	; 0x7170
   142ec:	mov	r6, #32
   142f0:	cmp	r1, #0
   142f4:	mov	r4, sp
   142f8:	movt	r3, #2
   142fc:	cmpne	r2, #0
   14300:	add	r5, r4, #16
   14304:	add	ip, r3, #16
   14308:	vld1.64	{d16-d17}, [r3], r6
   1430c:	vld1.64	{d18-d19}, [ip]
   14310:	vld1.64	{d20-d21}, [r3]
   14314:	mov	r3, #10
   14318:	vst1.64	{d16-d17}, [r4], r6
   1431c:	vst1.64	{d18-d19}, [r5]
   14320:	vst1.64	{d20-d21}, [r4]
   14324:	str	r3, [sp]
   14328:	bne	14330 <__assert_fail@plt+0x3378>
   1432c:	bl	10fa0 <abort@plt>
   14330:	ldr	ip, [fp, #8]
   14334:	str	r2, [sp, #44]	; 0x2c
   14338:	str	r1, [sp, #40]	; 0x28
   1433c:	mov	r3, sp
   14340:	mov	r1, lr
   14344:	mov	r2, ip
   14348:	bl	13ce8 <__assert_fail@plt+0x2d30>
   1434c:	sub	sp, fp, #16
   14350:	pop	{r4, r5, r6, sl, fp, pc}
   14354:	push	{r4, sl, fp, lr}
   14358:	add	fp, sp, #8
   1435c:	sub	sp, sp, #48	; 0x30
   14360:	movw	r3, #29040	; 0x7170
   14364:	mov	lr, #32
   14368:	mov	ip, r2
   1436c:	cmp	r0, #0
   14370:	movt	r3, #2
   14374:	cmpne	r1, #0
   14378:	add	r2, r3, #16
   1437c:	vld1.64	{d16-d17}, [r3], lr
   14380:	vld1.64	{d20-d21}, [r3]
   14384:	vld1.64	{d18-d19}, [r2]
   14388:	mov	r2, sp
   1438c:	add	r4, r2, #16
   14390:	vst1.64	{d16-d17}, [r2], lr
   14394:	vst1.64	{d20-d21}, [r2]
   14398:	mov	r2, #10
   1439c:	vst1.64	{d18-d19}, [r4]
   143a0:	str	r2, [sp]
   143a4:	bne	143ac <__assert_fail@plt+0x33f4>
   143a8:	bl	10fa0 <abort@plt>
   143ac:	str	r1, [sp, #44]	; 0x2c
   143b0:	str	r0, [sp, #40]	; 0x28
   143b4:	mov	r3, sp
   143b8:	mov	r0, #0
   143bc:	mov	r1, ip
   143c0:	mvn	r2, #0
   143c4:	bl	13ce8 <__assert_fail@plt+0x2d30>
   143c8:	sub	sp, fp, #8
   143cc:	pop	{r4, sl, fp, pc}
   143d0:	push	{r4, r5, fp, lr}
   143d4:	add	fp, sp, #8
   143d8:	sub	sp, sp, #48	; 0x30
   143dc:	mov	ip, r3
   143e0:	movw	r3, #29040	; 0x7170
   143e4:	mov	r4, #32
   143e8:	mov	lr, r2
   143ec:	cmp	r0, #0
   143f0:	movt	r3, #2
   143f4:	cmpne	r1, #0
   143f8:	add	r2, r3, #16
   143fc:	vld1.64	{d16-d17}, [r3], r4
   14400:	vld1.64	{d20-d21}, [r3]
   14404:	vld1.64	{d18-d19}, [r2]
   14408:	mov	r2, sp
   1440c:	add	r5, r2, #16
   14410:	vst1.64	{d16-d17}, [r2], r4
   14414:	vst1.64	{d20-d21}, [r2]
   14418:	mov	r2, #10
   1441c:	vst1.64	{d18-d19}, [r5]
   14420:	str	r2, [sp]
   14424:	bne	1442c <__assert_fail@plt+0x3474>
   14428:	bl	10fa0 <abort@plt>
   1442c:	str	r1, [sp, #44]	; 0x2c
   14430:	str	r0, [sp, #40]	; 0x28
   14434:	mov	r3, sp
   14438:	mov	r0, #0
   1443c:	mov	r1, lr
   14440:	mov	r2, ip
   14444:	bl	13ce8 <__assert_fail@plt+0x2d30>
   14448:	sub	sp, fp, #8
   1444c:	pop	{r4, r5, fp, pc}
   14450:	movw	r3, #28904	; 0x70e8
   14454:	movt	r3, #2
   14458:	b	13ce8 <__assert_fail@plt+0x2d30>
   1445c:	movw	r3, #28904	; 0x70e8
   14460:	mov	r2, r1
   14464:	mov	r1, r0
   14468:	mov	r0, #0
   1446c:	movt	r3, #2
   14470:	b	13ce8 <__assert_fail@plt+0x2d30>
   14474:	movw	r3, #28904	; 0x70e8
   14478:	mvn	r2, #0
   1447c:	movt	r3, #2
   14480:	b	13ce8 <__assert_fail@plt+0x2d30>
   14484:	movw	r3, #28904	; 0x70e8
   14488:	mov	r1, r0
   1448c:	mov	r0, #0
   14490:	mvn	r2, #0
   14494:	movt	r3, #2
   14498:	b	13ce8 <__assert_fail@plt+0x2d30>
   1449c:	mov	r1, #0
   144a0:	str	r1, [r0]
   144a4:	str	r1, [r0, #4]
   144a8:	bx	lr
   144ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144b0:	add	fp, sp, #28
   144b4:	sub	sp, sp, #52	; 0x34
   144b8:	vmov.i32	q8, #0	; 0x00000000
   144bc:	add	sl, sp, #16
   144c0:	mov	r5, r0
   144c4:	mov	r8, r3
   144c8:	cmp	r2, #0
   144cc:	mov	r0, sl
   144d0:	vst1.64	{d16-d17}, [r0]!
   144d4:	vst1.64	{d16-d17}, [r0]
   144d8:	beq	14500 <__assert_fail@plt+0x3548>
   144dc:	mov	r0, #1
   144e0:	ldrb	r3, [r1], #1
   144e4:	subs	r2, r2, #1
   144e8:	ubfx	r7, r3, #5, #3
   144ec:	and	r3, r3, #31
   144f0:	ldr	r6, [sl, r7, lsl #2]
   144f4:	orr	r3, r6, r0, lsl r3
   144f8:	str	r3, [sl, r7, lsl #2]
   144fc:	bne	144e0 <__assert_fail@plt+0x3528>
   14500:	ldmib	r5, {r0, r1}
   14504:	cmp	r0, r1
   14508:	bcs	1456c <__assert_fail@plt+0x35b4>
   1450c:	add	r1, r0, #1
   14510:	str	r1, [r5, #4]
   14514:	ldrb	r6, [r0]
   14518:	mov	r4, #1
   1451c:	lsr	r0, r6, #5
   14520:	and	r1, r6, #31
   14524:	ldr	r0, [sl, r0, lsl #2]
   14528:	tst	r0, r4, lsl r1
   1452c:	beq	14580 <__assert_fail@plt+0x35c8>
   14530:	ldmib	r5, {r0, r1}
   14534:	cmp	r0, r1
   14538:	bcs	14554 <__assert_fail@plt+0x359c>
   1453c:	add	r1, r0, #1
   14540:	str	r1, [r5, #4]
   14544:	ldrb	r6, [r0]
   14548:	cmn	r6, #1
   1454c:	bgt	1451c <__assert_fail@plt+0x3564>
   14550:	b	14580 <__assert_fail@plt+0x35c8>
   14554:	mov	r0, r5
   14558:	bl	10f58 <__uflow@plt>
   1455c:	mov	r6, r0
   14560:	cmn	r6, #1
   14564:	bgt	1451c <__assert_fail@plt+0x3564>
   14568:	b	14580 <__assert_fail@plt+0x35c8>
   1456c:	mov	r0, r5
   14570:	bl	10f58 <__uflow@plt>
   14574:	mov	r6, r0
   14578:	cmp	r0, #0
   1457c:	bpl	14518 <__assert_fail@plt+0x3560>
   14580:	ldm	r8, {r0, r7}
   14584:	cmp	r6, #0
   14588:	str	r0, [sp, #12]
   1458c:	bmi	14640 <__assert_fail@plt+0x3688>
   14590:	str	r8, [sp, #8]
   14594:	mov	r9, #0
   14598:	mov	r8, #1
   1459c:	mov	r4, #0
   145a0:	cmp	r4, r0
   145a4:	bne	145c4 <__assert_fail@plt+0x360c>
   145a8:	mov	r0, r7
   145ac:	add	r1, sp, #12
   145b0:	mov	r2, #1
   145b4:	mvn	r3, #0
   145b8:	str	r8, [sp]
   145bc:	bl	15070 <__assert_fail@plt+0x40b8>
   145c0:	mov	r7, r0
   145c4:	tst	r9, #1
   145c8:	lsreq	r0, r6, #5
   145cc:	andeq	r1, r6, #31
   145d0:	ldreq	r0, [sl, r0, lsl #2]
   145d4:	tsteq	r0, r8, lsl r1
   145d8:	bne	14620 <__assert_fail@plt+0x3668>
   145dc:	strb	r6, [r7, r4]
   145e0:	ldmib	r5, {r0, r1}
   145e4:	cmp	r0, r1
   145e8:	bcs	14610 <__assert_fail@plt+0x3658>
   145ec:	add	r1, r0, #1
   145f0:	str	r1, [r5, #4]
   145f4:	ldrb	r6, [r0]
   145f8:	ldr	r0, [sp, #12]
   145fc:	add	r4, r4, #1
   14600:	lsr	r9, r6, #31
   14604:	cmp	r4, r0
   14608:	beq	145a8 <__assert_fail@plt+0x35f0>
   1460c:	b	145c4 <__assert_fail@plt+0x360c>
   14610:	mov	r0, r5
   14614:	bl	10f58 <__uflow@plt>
   14618:	mov	r6, r0
   1461c:	b	145f8 <__assert_fail@plt+0x3640>
   14620:	mov	r0, #0
   14624:	ldr	r1, [sp, #8]
   14628:	strb	r0, [r7, r4]
   1462c:	ldr	r0, [sp, #12]
   14630:	stm	r1, {r0, r7}
   14634:	mov	r0, r4
   14638:	sub	sp, fp, #28
   1463c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14640:	mvn	r4, #0
   14644:	mov	r0, r4
   14648:	sub	sp, fp, #28
   1464c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14654:	add	fp, sp, #28
   14658:	sub	sp, sp, #28
   1465c:	cmp	r1, #0
   14660:	add	r4, r1, #1
   14664:	mov	r7, r0
   14668:	mov	r1, #4
   1466c:	str	r3, [sp, #12]
   14670:	str	r2, [sp, #8]
   14674:	movweq	r4, #64	; 0x40
   14678:	mov	r0, r4
   1467c:	str	r4, [sp, #16]
   14680:	bl	14f10 <__assert_fail@plt+0x3f58>
   14684:	mov	r6, r0
   14688:	mov	r0, r4
   1468c:	mov	r1, #4
   14690:	bl	14f10 <__assert_fail@plt+0x3f58>
   14694:	mov	r4, #0
   14698:	mov	r5, r0
   1469c:	str	r4, [sp, #24]
   146a0:	str	r4, [sp, #20]
   146a4:	ldr	r1, [sp, #8]
   146a8:	ldr	r2, [sp, #12]
   146ac:	mov	r0, r7
   146b0:	add	r3, sp, #20
   146b4:	bl	144ac <__assert_fail@plt+0x34f4>
   146b8:	mov	sl, r0
   146bc:	ldr	r0, [sp, #16]
   146c0:	cmp	r4, r0
   146c4:	blt	146fc <__assert_fail@plt+0x3744>
   146c8:	mov	r0, #4
   146cc:	add	r1, sp, #16
   146d0:	mov	r2, #1
   146d4:	mvn	r3, #0
   146d8:	str	r0, [sp]
   146dc:	mov	r0, r6
   146e0:	bl	15070 <__assert_fail@plt+0x40b8>
   146e4:	ldr	r1, [sp, #16]
   146e8:	mov	r6, r0
   146ec:	mov	r0, r5
   146f0:	mov	r2, #4
   146f4:	bl	14e04 <__assert_fail@plt+0x3e4c>
   146f8:	mov	r5, r0
   146fc:	cmn	sl, #1
   14700:	beq	14734 <__assert_fail@plt+0x377c>
   14704:	add	r8, sl, #1
   14708:	mov	r1, #1
   1470c:	mov	r0, r8
   14710:	bl	14f10 <__assert_fail@plt+0x3f58>
   14714:	str	sl, [r5, r4, lsl #2]
   14718:	mov	r2, r8
   1471c:	mov	r9, r0
   14720:	ldr	r1, [sp, #24]
   14724:	bl	10dcc <memcpy@plt>
   14728:	str	r9, [r6, r4, lsl #2]
   1472c:	add	r4, r4, #1
   14730:	b	146a4 <__assert_fail@plt+0x36ec>
   14734:	mov	r0, #0
   14738:	str	r0, [r6, r4, lsl #2]
   1473c:	str	r0, [r5, r4, lsl #2]
   14740:	ldr	r0, [sp, #24]
   14744:	bl	1551c <__assert_fail@plt+0x4564>
   14748:	ldr	r0, [fp, #8]
   1474c:	str	r6, [r0]
   14750:	ldr	r0, [fp, #12]
   14754:	cmp	r0, #0
   14758:	beq	1476c <__assert_fail@plt+0x37b4>
   1475c:	str	r5, [r0]
   14760:	mov	r0, r4
   14764:	sub	sp, fp, #28
   14768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1476c:	mov	r0, r5
   14770:	bl	1551c <__assert_fail@plt+0x4564>
   14774:	mov	r0, r4
   14778:	sub	sp, fp, #28
   1477c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14780:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14784:	add	fp, sp, #24
   14788:	sub	sp, sp, #32
   1478c:	ldr	r6, [fp, #12]
   14790:	ldr	r7, [fp, #8]
   14794:	mov	r4, r2
   14798:	mov	r8, r0
   1479c:	cmp	r1, #0
   147a0:	beq	147c8 <__assert_fail@plt+0x3810>
   147a4:	movw	r2, #23848	; 0x5d28
   147a8:	mov	r5, r1
   147ac:	str	r3, [sp, #4]
   147b0:	str	r4, [sp]
   147b4:	mov	r0, r8
   147b8:	mov	r1, #1
   147bc:	movt	r2, #1
   147c0:	mov	r3, r5
   147c4:	b	147e0 <__assert_fail@plt+0x3828>
   147c8:	movw	r2, #23860	; 0x5d34
   147cc:	str	r3, [sp]
   147d0:	mov	r0, r8
   147d4:	mov	r1, #1
   147d8:	mov	r3, r4
   147dc:	movt	r2, #1
   147e0:	bl	10f34 <__fprintf_chk@plt>
   147e4:	movw	r1, #23867	; 0x5d3b
   147e8:	mov	r0, #0
   147ec:	mov	r2, #5
   147f0:	movt	r1, #1
   147f4:	bl	10de4 <dcgettext@plt>
   147f8:	movw	r2, #24585	; 0x6009
   147fc:	mov	r3, r0
   14800:	movw	r0, #2022	; 0x7e6
   14804:	mov	r1, #1
   14808:	movt	r2, #1
   1480c:	str	r0, [sp]
   14810:	mov	r0, r8
   14814:	bl	10f34 <__fprintf_chk@plt>
   14818:	movw	r4, #23134	; 0x5a5e
   1481c:	mov	r1, r8
   14820:	movt	r4, #1
   14824:	mov	r0, r4
   14828:	bl	10d84 <fputs_unlocked@plt>
   1482c:	movw	r1, #23871	; 0x5d3f
   14830:	mov	r0, #0
   14834:	mov	r2, #5
   14838:	movt	r1, #1
   1483c:	bl	10de4 <dcgettext@plt>
   14840:	movw	r3, #24042	; 0x5dea
   14844:	mov	r2, r0
   14848:	mov	r0, r8
   1484c:	mov	r1, #1
   14850:	movt	r3, #1
   14854:	bl	10f34 <__fprintf_chk@plt>
   14858:	mov	r0, r4
   1485c:	mov	r1, r8
   14860:	bl	10d84 <fputs_unlocked@plt>
   14864:	cmp	r6, #9
   14868:	bhi	148a4 <__assert_fail@plt+0x38ec>
   1486c:	add	r0, pc, #0
   14870:	ldr	pc, [r0, r6, lsl #2]
   14874:	muleq	r1, ip, r8
   14878:			; <UNDEFINED> instruction: 0x000148b0
   1487c:	andeq	r4, r1, r0, ror #17
   14880:	andeq	r4, r1, r8, lsl #18
   14884:	andeq	r4, r1, r0, lsr r9
   14888:	andeq	r4, r1, r8, asr r9
   1488c:	andeq	r4, r1, r0, lsl #19
   14890:			; <UNDEFINED> instruction: 0x000149b8
   14894:	andeq	r4, r1, r0, ror #20
   14898:	andeq	r4, r1, r8, lsl #20
   1489c:	sub	sp, fp, #24
   148a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148a4:	movw	r1, #24395	; 0x5f4b
   148a8:	movt	r1, #1
   148ac:	b	14a10 <__assert_fail@plt+0x3a58>
   148b0:	movw	r1, #24076	; 0x5e0c
   148b4:	mov	r0, #0
   148b8:	mov	r2, #5
   148bc:	movt	r1, #1
   148c0:	bl	10de4 <dcgettext@plt>
   148c4:	ldr	r3, [r7]
   148c8:	mov	r2, r0
   148cc:	mov	r0, r8
   148d0:	mov	r1, #1
   148d4:	sub	sp, fp, #24
   148d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   148dc:	b	10f34 <__fprintf_chk@plt>
   148e0:	movw	r1, #24092	; 0x5e1c
   148e4:	mov	r0, #0
   148e8:	mov	r2, #5
   148ec:	movt	r1, #1
   148f0:	bl	10de4 <dcgettext@plt>
   148f4:	mov	r2, r0
   148f8:	ldr	r3, [r7]
   148fc:	ldr	r0, [r7, #4]
   14900:	str	r0, [sp]
   14904:	b	149f4 <__assert_fail@plt+0x3a3c>
   14908:	movw	r1, #24115	; 0x5e33
   1490c:	mov	r0, #0
   14910:	mov	r2, #5
   14914:	movt	r1, #1
   14918:	bl	10de4 <dcgettext@plt>
   1491c:	mov	r2, r0
   14920:	ldr	r3, [r7]
   14924:	ldmib	r7, {r0, r1}
   14928:	stm	sp, {r0, r1}
   1492c:	b	149f4 <__assert_fail@plt+0x3a3c>
   14930:	movw	r1, #24143	; 0x5e4f
   14934:	mov	r0, #0
   14938:	mov	r2, #5
   1493c:	movt	r1, #1
   14940:	bl	10de4 <dcgettext@plt>
   14944:	ldr	r3, [r7]
   14948:	mov	r2, r0
   1494c:	ldmib	r7, {r0, r1, r7}
   14950:	stm	sp, {r0, r1, r7}
   14954:	b	149f4 <__assert_fail@plt+0x3a3c>
   14958:	movw	r1, #24175	; 0x5e6f
   1495c:	mov	r0, #0
   14960:	mov	r2, #5
   14964:	movt	r1, #1
   14968:	bl	10de4 <dcgettext@plt>
   1496c:	ldr	r3, [r7]
   14970:	mov	r2, r0
   14974:	ldmib	r7, {r0, r1, r6, r7}
   14978:	stm	sp, {r0, r1, r6, r7}
   1497c:	b	149f4 <__assert_fail@plt+0x3a3c>
   14980:	movw	r1, #24211	; 0x5e93
   14984:	mov	r0, #0
   14988:	mov	r2, #5
   1498c:	movt	r1, #1
   14990:	bl	10de4 <dcgettext@plt>
   14994:	mov	r2, r0
   14998:	ldr	r3, [r7]
   1499c:	ldmib	r7, {r0, r1, r6}
   149a0:	ldr	r5, [r7, #16]
   149a4:	ldr	r7, [r7, #20]
   149a8:	stm	sp, {r0, r1, r6}
   149ac:	str	r5, [sp, #12]
   149b0:	str	r7, [sp, #16]
   149b4:	b	149f4 <__assert_fail@plt+0x3a3c>
   149b8:	movw	r1, #24251	; 0x5ebb
   149bc:	mov	r0, #0
   149c0:	mov	r2, #5
   149c4:	movt	r1, #1
   149c8:	bl	10de4 <dcgettext@plt>
   149cc:	mov	r2, r0
   149d0:	ldr	r3, [r7]
   149d4:	ldmib	r7, {r0, r1, r6}
   149d8:	ldr	r5, [r7, #16]
   149dc:	ldr	r4, [r7, #20]
   149e0:	ldr	r7, [r7, #24]
   149e4:	stm	sp, {r0, r1, r6}
   149e8:	str	r5, [sp, #12]
   149ec:	str	r4, [sp, #16]
   149f0:	str	r7, [sp, #20]
   149f4:	mov	r0, r8
   149f8:	mov	r1, #1
   149fc:	bl	10f34 <__fprintf_chk@plt>
   14a00:	sub	sp, fp, #24
   14a04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a08:	movw	r1, #24343	; 0x5f17
   14a0c:	movt	r1, #1
   14a10:	mov	r0, #0
   14a14:	mov	r2, #5
   14a18:	bl	10de4 <dcgettext@plt>
   14a1c:	mov	ip, r0
   14a20:	ldr	r3, [r7]
   14a24:	ldr	r0, [r7, #4]
   14a28:	ldr	r1, [r7, #8]
   14a2c:	ldr	r6, [r7, #12]
   14a30:	ldr	r5, [r7, #16]
   14a34:	ldr	r4, [r7, #20]
   14a38:	ldr	r2, [r7, #24]
   14a3c:	ldr	lr, [r7, #28]
   14a40:	ldr	r7, [r7, #32]
   14a44:	stm	sp, {r0, r1, r6}
   14a48:	str	r5, [sp, #12]
   14a4c:	str	r4, [sp, #16]
   14a50:	str	r2, [sp, #20]
   14a54:	str	lr, [sp, #24]
   14a58:	str	r7, [sp, #28]
   14a5c:	b	14aa4 <__assert_fail@plt+0x3aec>
   14a60:	movw	r1, #24295	; 0x5ee7
   14a64:	mov	r0, #0
   14a68:	mov	r2, #5
   14a6c:	movt	r1, #1
   14a70:	bl	10de4 <dcgettext@plt>
   14a74:	mov	ip, r0
   14a78:	ldr	r3, [r7]
   14a7c:	ldmib	r7, {r0, r1, r6}
   14a80:	ldr	r5, [r7, #16]
   14a84:	ldr	r4, [r7, #20]
   14a88:	ldr	r2, [r7, #24]
   14a8c:	ldr	r7, [r7, #28]
   14a90:	stm	sp, {r0, r1, r6}
   14a94:	str	r5, [sp, #12]
   14a98:	str	r4, [sp, #16]
   14a9c:	str	r2, [sp, #20]
   14aa0:	str	r7, [sp, #24]
   14aa4:	mov	r0, r8
   14aa8:	mov	r1, #1
   14aac:	mov	r2, ip
   14ab0:	bl	10f34 <__fprintf_chk@plt>
   14ab4:	sub	sp, fp, #24
   14ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14abc:	push	{r4, sl, fp, lr}
   14ac0:	add	fp, sp, #8
   14ac4:	sub	sp, sp, #8
   14ac8:	ldr	ip, [fp, #8]
   14acc:	mov	lr, #0
   14ad0:	ldr	r4, [ip, lr, lsl #2]
   14ad4:	add	lr, lr, #1
   14ad8:	cmp	r4, #0
   14adc:	bne	14ad0 <__assert_fail@plt+0x3b18>
   14ae0:	sub	r4, lr, #1
   14ae4:	str	ip, [sp]
   14ae8:	str	r4, [sp, #4]
   14aec:	bl	14780 <__assert_fail@plt+0x37c8>
   14af0:	sub	sp, fp, #8
   14af4:	pop	{r4, sl, fp, pc}
   14af8:	push	{fp, lr}
   14afc:	mov	fp, sp
   14b00:	sub	sp, sp, #48	; 0x30
   14b04:	ldr	ip, [fp, #8]
   14b08:	ldr	lr, [ip]
   14b0c:	cmp	lr, #0
   14b10:	str	lr, [sp, #8]
   14b14:	beq	14bb0 <__assert_fail@plt+0x3bf8>
   14b18:	ldr	lr, [ip, #4]
   14b1c:	cmp	lr, #0
   14b20:	str	lr, [sp, #12]
   14b24:	beq	14bb8 <__assert_fail@plt+0x3c00>
   14b28:	ldr	lr, [ip, #8]
   14b2c:	cmp	lr, #0
   14b30:	str	lr, [sp, #16]
   14b34:	beq	14bc0 <__assert_fail@plt+0x3c08>
   14b38:	ldr	lr, [ip, #12]
   14b3c:	cmp	lr, #0
   14b40:	str	lr, [sp, #20]
   14b44:	beq	14bc8 <__assert_fail@plt+0x3c10>
   14b48:	ldr	lr, [ip, #16]
   14b4c:	cmp	lr, #0
   14b50:	str	lr, [sp, #24]
   14b54:	beq	14bd0 <__assert_fail@plt+0x3c18>
   14b58:	ldr	lr, [ip, #20]
   14b5c:	cmp	lr, #0
   14b60:	str	lr, [sp, #28]
   14b64:	beq	14bd8 <__assert_fail@plt+0x3c20>
   14b68:	ldr	lr, [ip, #24]
   14b6c:	cmp	lr, #0
   14b70:	str	lr, [sp, #32]
   14b74:	beq	14be0 <__assert_fail@plt+0x3c28>
   14b78:	ldr	lr, [ip, #28]
   14b7c:	cmp	lr, #0
   14b80:	str	lr, [sp, #36]	; 0x24
   14b84:	beq	14be8 <__assert_fail@plt+0x3c30>
   14b88:	ldr	lr, [ip, #32]
   14b8c:	cmp	lr, #0
   14b90:	str	lr, [sp, #40]	; 0x28
   14b94:	beq	14bf0 <__assert_fail@plt+0x3c38>
   14b98:	ldr	lr, [ip, #36]	; 0x24
   14b9c:	mov	ip, #10
   14ba0:	cmp	lr, #0
   14ba4:	str	lr, [sp, #44]	; 0x2c
   14ba8:	movweq	ip, #9
   14bac:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bb0:	mov	ip, #0
   14bb4:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bb8:	mov	ip, #1
   14bbc:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bc0:	mov	ip, #2
   14bc4:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bc8:	mov	ip, #3
   14bcc:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bd0:	mov	ip, #4
   14bd4:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bd8:	mov	ip, #5
   14bdc:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14be0:	mov	ip, #6
   14be4:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14be8:	mov	ip, #7
   14bec:	b	14bf4 <__assert_fail@plt+0x3c3c>
   14bf0:	mov	ip, #8
   14bf4:	add	lr, sp, #8
   14bf8:	str	ip, [sp, #4]
   14bfc:	str	lr, [sp]
   14c00:	bl	14780 <__assert_fail@plt+0x37c8>
   14c04:	mov	sp, fp
   14c08:	pop	{fp, pc}
   14c0c:	push	{fp, lr}
   14c10:	mov	fp, sp
   14c14:	sub	sp, sp, #56	; 0x38
   14c18:	add	ip, fp, #8
   14c1c:	str	ip, [sp, #12]
   14c20:	ldr	lr, [fp, #8]
   14c24:	cmp	lr, #0
   14c28:	str	lr, [sp, #16]
   14c2c:	beq	14cc8 <__assert_fail@plt+0x3d10>
   14c30:	ldr	lr, [ip, #4]
   14c34:	cmp	lr, #0
   14c38:	str	lr, [sp, #20]
   14c3c:	beq	14cd0 <__assert_fail@plt+0x3d18>
   14c40:	ldr	lr, [ip, #8]
   14c44:	cmp	lr, #0
   14c48:	str	lr, [sp, #24]
   14c4c:	beq	14cd8 <__assert_fail@plt+0x3d20>
   14c50:	ldr	lr, [ip, #12]
   14c54:	cmp	lr, #0
   14c58:	str	lr, [sp, #28]
   14c5c:	beq	14ce0 <__assert_fail@plt+0x3d28>
   14c60:	ldr	lr, [ip, #16]
   14c64:	cmp	lr, #0
   14c68:	str	lr, [sp, #32]
   14c6c:	beq	14ce8 <__assert_fail@plt+0x3d30>
   14c70:	ldr	lr, [ip, #20]
   14c74:	cmp	lr, #0
   14c78:	str	lr, [sp, #36]	; 0x24
   14c7c:	beq	14cf0 <__assert_fail@plt+0x3d38>
   14c80:	ldr	lr, [ip, #24]
   14c84:	cmp	lr, #0
   14c88:	str	lr, [sp, #40]	; 0x28
   14c8c:	beq	14cf8 <__assert_fail@plt+0x3d40>
   14c90:	ldr	lr, [ip, #28]
   14c94:	cmp	lr, #0
   14c98:	str	lr, [sp, #44]	; 0x2c
   14c9c:	beq	14d00 <__assert_fail@plt+0x3d48>
   14ca0:	ldr	lr, [ip, #32]
   14ca4:	cmp	lr, #0
   14ca8:	str	lr, [sp, #48]	; 0x30
   14cac:	beq	14d08 <__assert_fail@plt+0x3d50>
   14cb0:	ldr	lr, [ip, #36]	; 0x24
   14cb4:	mov	ip, #10
   14cb8:	cmp	lr, #0
   14cbc:	str	lr, [sp, #52]	; 0x34
   14cc0:	movweq	ip, #9
   14cc4:	b	14d0c <__assert_fail@plt+0x3d54>
   14cc8:	mov	ip, #0
   14ccc:	b	14d0c <__assert_fail@plt+0x3d54>
   14cd0:	mov	ip, #1
   14cd4:	b	14d0c <__assert_fail@plt+0x3d54>
   14cd8:	mov	ip, #2
   14cdc:	b	14d0c <__assert_fail@plt+0x3d54>
   14ce0:	mov	ip, #3
   14ce4:	b	14d0c <__assert_fail@plt+0x3d54>
   14ce8:	mov	ip, #4
   14cec:	b	14d0c <__assert_fail@plt+0x3d54>
   14cf0:	mov	ip, #5
   14cf4:	b	14d0c <__assert_fail@plt+0x3d54>
   14cf8:	mov	ip, #6
   14cfc:	b	14d0c <__assert_fail@plt+0x3d54>
   14d00:	mov	ip, #7
   14d04:	b	14d0c <__assert_fail@plt+0x3d54>
   14d08:	mov	ip, #8
   14d0c:	add	lr, sp, #16
   14d10:	str	ip, [sp, #4]
   14d14:	str	lr, [sp]
   14d18:	bl	14780 <__assert_fail@plt+0x37c8>
   14d1c:	mov	sp, fp
   14d20:	pop	{fp, pc}
   14d24:	push	{fp, lr}
   14d28:	mov	fp, sp
   14d2c:	movw	r0, #28996	; 0x7144
   14d30:	movt	r0, #2
   14d34:	ldr	r1, [r0]
   14d38:	movw	r0, #23134	; 0x5a5e
   14d3c:	movt	r0, #1
   14d40:	bl	10d84 <fputs_unlocked@plt>
   14d44:	movw	r1, #24455	; 0x5f87
   14d48:	mov	r0, #0
   14d4c:	mov	r2, #5
   14d50:	movt	r1, #1
   14d54:	bl	10de4 <dcgettext@plt>
   14d58:	movw	r2, #24475	; 0x5f9b
   14d5c:	mov	r1, r0
   14d60:	mov	r0, #1
   14d64:	movt	r2, #1
   14d68:	bl	10f1c <__printf_chk@plt>
   14d6c:	movw	r1, #24497	; 0x5fb1
   14d70:	mov	r0, #0
   14d74:	mov	r2, #5
   14d78:	movt	r1, #1
   14d7c:	bl	10de4 <dcgettext@plt>
   14d80:	movw	r2, #22720	; 0x58c0
   14d84:	movw	r3, #22939	; 0x599b
   14d88:	mov	r1, r0
   14d8c:	mov	r0, #1
   14d90:	movt	r2, #1
   14d94:	movt	r3, #1
   14d98:	bl	10f1c <__printf_chk@plt>
   14d9c:	movw	r1, #24517	; 0x5fc5
   14da0:	mov	r0, #0
   14da4:	mov	r2, #5
   14da8:	movt	r1, #1
   14dac:	bl	10de4 <dcgettext@plt>
   14db0:	movw	r2, #24556	; 0x5fec
   14db4:	mov	r1, r0
   14db8:	mov	r0, #1
   14dbc:	movt	r2, #1
   14dc0:	pop	{fp, lr}
   14dc4:	b	10f1c <__printf_chk@plt>
   14dc8:	push	{r4, r5, r6, sl, fp, lr}
   14dcc:	add	fp, sp, #16
   14dd0:	mov	r4, r2
   14dd4:	mov	r5, r1
   14dd8:	mov	r6, r0
   14ddc:	bl	155e0 <__assert_fail@plt+0x4628>
   14de0:	cmp	r0, #0
   14de4:	popne	{r4, r5, r6, sl, fp, pc}
   14de8:	cmp	r6, #0
   14dec:	beq	14e00 <__assert_fail@plt+0x3e48>
   14df0:	cmp	r5, #0
   14df4:	cmpne	r4, #0
   14df8:	bne	14e00 <__assert_fail@plt+0x3e48>
   14dfc:	pop	{r4, r5, r6, sl, fp, pc}
   14e00:	bl	1537c <__assert_fail@plt+0x43c4>
   14e04:	push	{r4, r5, r6, sl, fp, lr}
   14e08:	add	fp, sp, #16
   14e0c:	mov	r4, r2
   14e10:	mov	r5, r1
   14e14:	mov	r6, r0
   14e18:	bl	155e0 <__assert_fail@plt+0x4628>
   14e1c:	cmp	r0, #0
   14e20:	popne	{r4, r5, r6, sl, fp, pc}
   14e24:	cmp	r6, #0
   14e28:	beq	14e3c <__assert_fail@plt+0x3e84>
   14e2c:	cmp	r5, #0
   14e30:	cmpne	r4, #0
   14e34:	bne	14e3c <__assert_fail@plt+0x3e84>
   14e38:	pop	{r4, r5, r6, sl, fp, pc}
   14e3c:	bl	1537c <__assert_fail@plt+0x43c4>
   14e40:	push	{fp, lr}
   14e44:	mov	fp, sp
   14e48:	bl	15414 <__assert_fail@plt+0x445c>
   14e4c:	cmp	r0, #0
   14e50:	popne	{fp, pc}
   14e54:	bl	1537c <__assert_fail@plt+0x43c4>
   14e58:	push	{fp, lr}
   14e5c:	mov	fp, sp
   14e60:	bl	15414 <__assert_fail@plt+0x445c>
   14e64:	cmp	r0, #0
   14e68:	popne	{fp, pc}
   14e6c:	bl	1537c <__assert_fail@plt+0x43c4>
   14e70:	push	{fp, lr}
   14e74:	mov	fp, sp
   14e78:	bl	15414 <__assert_fail@plt+0x445c>
   14e7c:	cmp	r0, #0
   14e80:	popne	{fp, pc}
   14e84:	bl	1537c <__assert_fail@plt+0x43c4>
   14e88:	push	{r4, r5, fp, lr}
   14e8c:	add	fp, sp, #8
   14e90:	mov	r4, r1
   14e94:	mov	r5, r0
   14e98:	bl	15444 <__assert_fail@plt+0x448c>
   14e9c:	cmp	r0, #0
   14ea0:	popne	{r4, r5, fp, pc}
   14ea4:	cmp	r5, #0
   14ea8:	beq	14eb8 <__assert_fail@plt+0x3f00>
   14eac:	cmp	r4, #0
   14eb0:	bne	14eb8 <__assert_fail@plt+0x3f00>
   14eb4:	pop	{r4, r5, fp, pc}
   14eb8:	bl	1537c <__assert_fail@plt+0x43c4>
   14ebc:	push	{fp, lr}
   14ec0:	mov	fp, sp
   14ec4:	cmp	r1, #0
   14ec8:	orreq	r1, r1, #1
   14ecc:	bl	15444 <__assert_fail@plt+0x448c>
   14ed0:	cmp	r0, #0
   14ed4:	popne	{fp, pc}
   14ed8:	bl	1537c <__assert_fail@plt+0x43c4>
   14edc:	push	{fp, lr}
   14ee0:	mov	fp, sp
   14ee4:	clz	r3, r2
   14ee8:	lsr	ip, r3, #5
   14eec:	clz	r3, r1
   14ef0:	lsr	r3, r3, #5
   14ef4:	orrs	r3, r3, ip
   14ef8:	movwne	r1, #1
   14efc:	movwne	r2, #1
   14f00:	bl	155e0 <__assert_fail@plt+0x4628>
   14f04:	cmp	r0, #0
   14f08:	popne	{fp, pc}
   14f0c:	bl	1537c <__assert_fail@plt+0x43c4>
   14f10:	push	{fp, lr}
   14f14:	mov	fp, sp
   14f18:	mov	r2, r1
   14f1c:	mov	r1, r0
   14f20:	mov	r0, #0
   14f24:	bl	155e0 <__assert_fail@plt+0x4628>
   14f28:	cmp	r0, #0
   14f2c:	popne	{fp, pc}
   14f30:	bl	1537c <__assert_fail@plt+0x43c4>
   14f34:	push	{fp, lr}
   14f38:	mov	fp, sp
   14f3c:	mov	r2, r1
   14f40:	mov	r1, r0
   14f44:	clz	r0, r2
   14f48:	clz	r3, r1
   14f4c:	lsr	r0, r0, #5
   14f50:	lsr	r3, r3, #5
   14f54:	orrs	r0, r3, r0
   14f58:	mov	r0, #0
   14f5c:	movwne	r1, #1
   14f60:	movwne	r2, #1
   14f64:	bl	155e0 <__assert_fail@plt+0x4628>
   14f68:	cmp	r0, #0
   14f6c:	popne	{fp, pc}
   14f70:	bl	1537c <__assert_fail@plt+0x43c4>
   14f74:	push	{r4, r5, r6, sl, fp, lr}
   14f78:	add	fp, sp, #16
   14f7c:	ldr	r5, [r1]
   14f80:	mov	r4, r1
   14f84:	mov	r6, r0
   14f88:	cmp	r0, #0
   14f8c:	beq	14fa4 <__assert_fail@plt+0x3fec>
   14f90:	mov	r0, #1
   14f94:	add	r0, r0, r5, lsr #1
   14f98:	adds	r5, r5, r0
   14f9c:	bcc	14fac <__assert_fail@plt+0x3ff4>
   14fa0:	b	14fe8 <__assert_fail@plt+0x4030>
   14fa4:	cmp	r5, #0
   14fa8:	movweq	r5, #64	; 0x40
   14fac:	mov	r0, r6
   14fb0:	mov	r1, r5
   14fb4:	mov	r2, #1
   14fb8:	bl	155e0 <__assert_fail@plt+0x4628>
   14fbc:	cmp	r5, #0
   14fc0:	mov	r1, r5
   14fc4:	movwne	r1, #1
   14fc8:	cmp	r0, #0
   14fcc:	bne	14fe0 <__assert_fail@plt+0x4028>
   14fd0:	clz	r2, r6
   14fd4:	lsr	r2, r2, #5
   14fd8:	orrs	r1, r2, r1
   14fdc:	bne	14fe8 <__assert_fail@plt+0x4030>
   14fe0:	str	r5, [r4]
   14fe4:	pop	{r4, r5, r6, sl, fp, pc}
   14fe8:	bl	1537c <__assert_fail@plt+0x43c4>
   14fec:	push	{r4, r5, r6, r7, fp, lr}
   14ff0:	add	fp, sp, #16
   14ff4:	ldr	r5, [r1]
   14ff8:	mov	r6, r2
   14ffc:	mov	r4, r1
   15000:	mov	r7, r0
   15004:	cmp	r0, #0
   15008:	beq	15020 <__assert_fail@plt+0x4068>
   1500c:	mov	r0, #1
   15010:	add	r0, r0, r5, lsr #1
   15014:	adds	r5, r5, r0
   15018:	bcc	15038 <__assert_fail@plt+0x4080>
   1501c:	b	1506c <__assert_fail@plt+0x40b4>
   15020:	cmp	r5, #0
   15024:	bne	15038 <__assert_fail@plt+0x4080>
   15028:	mov	r0, #64	; 0x40
   1502c:	cmp	r6, #64	; 0x40
   15030:	udiv	r5, r0, r6
   15034:	addhi	r5, r5, #1
   15038:	mov	r0, r7
   1503c:	mov	r1, r5
   15040:	mov	r2, r6
   15044:	bl	155e0 <__assert_fail@plt+0x4628>
   15048:	cmp	r0, #0
   1504c:	bne	15064 <__assert_fail@plt+0x40ac>
   15050:	cmp	r7, #0
   15054:	beq	1506c <__assert_fail@plt+0x40b4>
   15058:	cmp	r6, #0
   1505c:	cmpne	r5, #0
   15060:	bne	1506c <__assert_fail@plt+0x40b4>
   15064:	str	r5, [r4]
   15068:	pop	{r4, r5, r6, r7, fp, pc}
   1506c:	bl	1537c <__assert_fail@plt+0x43c4>
   15070:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15074:	add	fp, sp, #24
   15078:	mov	r8, r1
   1507c:	ldr	r1, [r1]
   15080:	mov	r5, r0
   15084:	add	r0, r1, r1, asr #1
   15088:	cmp	r0, r1
   1508c:	mvnvs	r0, #-2147483648	; 0x80000000
   15090:	cmp	r0, r3
   15094:	mov	r7, r0
   15098:	movgt	r7, r3
   1509c:	cmn	r3, #1
   150a0:	movle	r7, r0
   150a4:	ldr	r0, [fp, #8]
   150a8:	cmn	r0, #1
   150ac:	ble	150d4 <__assert_fail@plt+0x411c>
   150b0:	cmp	r0, #0
   150b4:	beq	15128 <__assert_fail@plt+0x4170>
   150b8:	cmn	r7, #1
   150bc:	ble	150fc <__assert_fail@plt+0x4144>
   150c0:	mvn	r4, #-2147483648	; 0x80000000
   150c4:	udiv	r6, r4, r0
   150c8:	cmp	r6, r7
   150cc:	bge	15128 <__assert_fail@plt+0x4170>
   150d0:	b	15138 <__assert_fail@plt+0x4180>
   150d4:	cmn	r7, #1
   150d8:	ble	15118 <__assert_fail@plt+0x4160>
   150dc:	cmn	r0, #1
   150e0:	beq	15128 <__assert_fail@plt+0x4170>
   150e4:	mov	r6, #-2147483648	; 0x80000000
   150e8:	mvn	r4, #-2147483648	; 0x80000000
   150ec:	sdiv	r6, r6, r0
   150f0:	cmp	r6, r7
   150f4:	bge	15128 <__assert_fail@plt+0x4170>
   150f8:	b	15138 <__assert_fail@plt+0x4180>
   150fc:	beq	15128 <__assert_fail@plt+0x4170>
   15100:	mov	r6, #-2147483648	; 0x80000000
   15104:	mvn	r4, #-2147483648	; 0x80000000
   15108:	sdiv	r6, r6, r7
   1510c:	cmp	r6, r0
   15110:	bge	15128 <__assert_fail@plt+0x4170>
   15114:	b	15138 <__assert_fail@plt+0x4180>
   15118:	mvn	r4, #-2147483648	; 0x80000000
   1511c:	sdiv	r6, r4, r0
   15120:	cmp	r7, r6
   15124:	blt	15138 <__assert_fail@plt+0x4180>
   15128:	mul	r6, r7, r0
   1512c:	mov	r4, #64	; 0x40
   15130:	cmp	r6, #63	; 0x3f
   15134:	bgt	15140 <__assert_fail@plt+0x4188>
   15138:	sdiv	r7, r4, r0
   1513c:	mul	r6, r7, r0
   15140:	cmp	r5, #0
   15144:	moveq	r4, #0
   15148:	streq	r4, [r8]
   1514c:	sub	r4, r7, r1
   15150:	cmp	r4, r2
   15154:	bge	15200 <__assert_fail@plt+0x4248>
   15158:	add	r7, r1, r2
   1515c:	mov	r6, #0
   15160:	mov	r2, #0
   15164:	cmp	r7, r3
   15168:	movwgt	r6, #1
   1516c:	cmn	r3, #1
   15170:	movwgt	r2, #1
   15174:	cmp	r7, r1
   15178:	bvs	15234 <__assert_fail@plt+0x427c>
   1517c:	ands	r1, r2, r6
   15180:	bne	15234 <__assert_fail@plt+0x427c>
   15184:	cmn	r0, #1
   15188:	ble	151b0 <__assert_fail@plt+0x41f8>
   1518c:	cmp	r0, #0
   15190:	beq	151fc <__assert_fail@plt+0x4244>
   15194:	cmn	r7, #1
   15198:	ble	151d4 <__assert_fail@plt+0x421c>
   1519c:	mvn	r1, #-2147483648	; 0x80000000
   151a0:	udiv	r1, r1, r0
   151a4:	cmp	r1, r7
   151a8:	bge	151fc <__assert_fail@plt+0x4244>
   151ac:	b	15234 <__assert_fail@plt+0x427c>
   151b0:	cmn	r7, #1
   151b4:	ble	151ec <__assert_fail@plt+0x4234>
   151b8:	cmn	r0, #1
   151bc:	beq	151fc <__assert_fail@plt+0x4244>
   151c0:	mov	r1, #-2147483648	; 0x80000000
   151c4:	sdiv	r1, r1, r0
   151c8:	cmp	r1, r7
   151cc:	bge	151fc <__assert_fail@plt+0x4244>
   151d0:	b	15234 <__assert_fail@plt+0x427c>
   151d4:	beq	151fc <__assert_fail@plt+0x4244>
   151d8:	mov	r1, #-2147483648	; 0x80000000
   151dc:	sdiv	r1, r1, r7
   151e0:	cmp	r1, r0
   151e4:	bge	151fc <__assert_fail@plt+0x4244>
   151e8:	b	15234 <__assert_fail@plt+0x427c>
   151ec:	mvn	r1, #-2147483648	; 0x80000000
   151f0:	sdiv	r1, r1, r0
   151f4:	cmp	r7, r1
   151f8:	blt	15234 <__assert_fail@plt+0x427c>
   151fc:	mul	r6, r7, r0
   15200:	mov	r0, r5
   15204:	mov	r1, r6
   15208:	bl	15444 <__assert_fail@plt+0x448c>
   1520c:	cmp	r6, #0
   15210:	movwne	r6, #1
   15214:	cmp	r0, #0
   15218:	bne	1522c <__assert_fail@plt+0x4274>
   1521c:	clz	r1, r5
   15220:	lsr	r1, r1, #5
   15224:	orrs	r1, r1, r6
   15228:	bne	15234 <__assert_fail@plt+0x427c>
   1522c:	str	r7, [r8]
   15230:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15234:	bl	1537c <__assert_fail@plt+0x43c4>
   15238:	push	{fp, lr}
   1523c:	mov	fp, sp
   15240:	mov	r1, #1
   15244:	bl	153c0 <__assert_fail@plt+0x4408>
   15248:	cmp	r0, #0
   1524c:	popne	{fp, pc}
   15250:	bl	1537c <__assert_fail@plt+0x43c4>
   15254:	push	{fp, lr}
   15258:	mov	fp, sp
   1525c:	bl	153c0 <__assert_fail@plt+0x4408>
   15260:	cmp	r0, #0
   15264:	popne	{fp, pc}
   15268:	bl	1537c <__assert_fail@plt+0x43c4>
   1526c:	push	{fp, lr}
   15270:	mov	fp, sp
   15274:	mov	r1, #1
   15278:	bl	153c0 <__assert_fail@plt+0x4408>
   1527c:	cmp	r0, #0
   15280:	popne	{fp, pc}
   15284:	bl	1537c <__assert_fail@plt+0x43c4>
   15288:	push	{fp, lr}
   1528c:	mov	fp, sp
   15290:	bl	153c0 <__assert_fail@plt+0x4408>
   15294:	cmp	r0, #0
   15298:	popne	{fp, pc}
   1529c:	bl	1537c <__assert_fail@plt+0x43c4>
   152a0:	push	{r4, r5, fp, lr}
   152a4:	add	fp, sp, #8
   152a8:	mov	r5, r0
   152ac:	mov	r0, r1
   152b0:	mov	r4, r1
   152b4:	bl	15414 <__assert_fail@plt+0x445c>
   152b8:	cmp	r0, #0
   152bc:	beq	152d0 <__assert_fail@plt+0x4318>
   152c0:	mov	r1, r5
   152c4:	mov	r2, r4
   152c8:	pop	{r4, r5, fp, lr}
   152cc:	b	10dcc <memcpy@plt>
   152d0:	bl	1537c <__assert_fail@plt+0x43c4>
   152d4:	push	{r4, r5, fp, lr}
   152d8:	add	fp, sp, #8
   152dc:	mov	r5, r0
   152e0:	mov	r0, r1
   152e4:	mov	r4, r1
   152e8:	bl	15414 <__assert_fail@plt+0x445c>
   152ec:	cmp	r0, #0
   152f0:	beq	15304 <__assert_fail@plt+0x434c>
   152f4:	mov	r1, r5
   152f8:	mov	r2, r4
   152fc:	pop	{r4, r5, fp, lr}
   15300:	b	10dcc <memcpy@plt>
   15304:	bl	1537c <__assert_fail@plt+0x43c4>
   15308:	push	{r4, r5, fp, lr}
   1530c:	add	fp, sp, #8
   15310:	mov	r5, r0
   15314:	add	r0, r1, #1
   15318:	mov	r4, r1
   1531c:	bl	15414 <__assert_fail@plt+0x445c>
   15320:	cmp	r0, #0
   15324:	beq	15340 <__assert_fail@plt+0x4388>
   15328:	mov	r1, #0
   1532c:	mov	r2, r4
   15330:	strb	r1, [r0, r4]
   15334:	mov	r1, r5
   15338:	pop	{r4, r5, fp, lr}
   1533c:	b	10dcc <memcpy@plt>
   15340:	bl	1537c <__assert_fail@plt+0x43c4>
   15344:	push	{r4, r5, fp, lr}
   15348:	add	fp, sp, #8
   1534c:	mov	r4, r0
   15350:	bl	10eec <strlen@plt>
   15354:	add	r5, r0, #1
   15358:	mov	r0, r5
   1535c:	bl	15414 <__assert_fail@plt+0x445c>
   15360:	cmp	r0, #0
   15364:	beq	15378 <__assert_fail@plt+0x43c0>
   15368:	mov	r1, r4
   1536c:	mov	r2, r5
   15370:	pop	{r4, r5, fp, lr}
   15374:	b	10dcc <memcpy@plt>
   15378:	bl	1537c <__assert_fail@plt+0x43c4>
   1537c:	push	{fp, lr}
   15380:	mov	fp, sp
   15384:	movw	r0, #28900	; 0x70e4
   15388:	movw	r1, #24632	; 0x6038
   1538c:	mov	r2, #5
   15390:	movt	r0, #2
   15394:	movt	r1, #1
   15398:	ldr	r4, [r0]
   1539c:	mov	r0, #0
   153a0:	bl	10de4 <dcgettext@plt>
   153a4:	movw	r2, #23519	; 0x5bdf
   153a8:	mov	r3, r0
   153ac:	mov	r0, r4
   153b0:	mov	r1, #0
   153b4:	movt	r2, #1
   153b8:	bl	10e5c <error@plt>
   153bc:	bl	10fa0 <abort@plt>
   153c0:	clz	r2, r1
   153c4:	clz	r3, r0
   153c8:	lsr	r2, r2, #5
   153cc:	lsr	r3, r3, #5
   153d0:	orrs	r2, r3, r2
   153d4:	movwne	r1, #1
   153d8:	movwne	r0, #1
   153dc:	cmp	r1, #0
   153e0:	beq	15410 <__assert_fail@plt+0x4458>
   153e4:	mvn	r2, #-2147483648	; 0x80000000
   153e8:	udiv	r2, r2, r1
   153ec:	cmp	r2, r0
   153f0:	bcs	15410 <__assert_fail@plt+0x4458>
   153f4:	push	{fp, lr}
   153f8:	mov	fp, sp
   153fc:	bl	10ef8 <__errno_location@plt>
   15400:	mov	r1, #12
   15404:	str	r1, [r0]
   15408:	mov	r0, #0
   1540c:	pop	{fp, pc}
   15410:	b	10d78 <calloc@plt>
   15414:	cmp	r0, #0
   15418:	movweq	r0, #1
   1541c:	cmn	r0, #1
   15420:	ble	15428 <__assert_fail@plt+0x4470>
   15424:	b	10e80 <malloc@plt>
   15428:	push	{fp, lr}
   1542c:	mov	fp, sp
   15430:	bl	10ef8 <__errno_location@plt>
   15434:	mov	r1, #12
   15438:	str	r1, [r0]
   1543c:	mov	r0, #0
   15440:	pop	{fp, pc}
   15444:	push	{fp, lr}
   15448:	mov	fp, sp
   1544c:	cmp	r0, #0
   15450:	beq	1546c <__assert_fail@plt+0x44b4>
   15454:	cmp	r1, #0
   15458:	beq	15478 <__assert_fail@plt+0x44c0>
   1545c:	cmn	r1, #1
   15460:	ble	15484 <__assert_fail@plt+0x44cc>
   15464:	pop	{fp, lr}
   15468:	b	10dfc <realloc@plt>
   1546c:	mov	r0, r1
   15470:	pop	{fp, lr}
   15474:	b	15414 <__assert_fail@plt+0x445c>
   15478:	bl	1551c <__assert_fail@plt+0x4564>
   1547c:	mov	r0, #0
   15480:	pop	{fp, pc}
   15484:	bl	10ef8 <__errno_location@plt>
   15488:	mov	r1, #12
   1548c:	str	r1, [r0]
   15490:	mov	r0, #0
   15494:	pop	{fp, pc}
   15498:	push	{r4, r5, r6, sl, fp, lr}
   1549c:	add	fp, sp, #16
   154a0:	mov	r4, r0
   154a4:	bl	10e44 <__fpending@plt>
   154a8:	ldr	r6, [r4]
   154ac:	mov	r5, r0
   154b0:	mov	r0, r4
   154b4:	bl	11f40 <__assert_fail@plt+0xf88>
   154b8:	tst	r6, #32
   154bc:	bne	154f4 <__assert_fail@plt+0x453c>
   154c0:	cmp	r0, #0
   154c4:	mov	r4, r0
   154c8:	mvnne	r4, #0
   154cc:	cmp	r5, #0
   154d0:	bne	15500 <__assert_fail@plt+0x4548>
   154d4:	cmp	r0, #0
   154d8:	beq	15500 <__assert_fail@plt+0x4548>
   154dc:	bl	10ef8 <__errno_location@plt>
   154e0:	ldr	r0, [r0]
   154e4:	subs	r4, r0, #9
   154e8:	mvnne	r4, #0
   154ec:	mov	r0, r4
   154f0:	pop	{r4, r5, r6, sl, fp, pc}
   154f4:	mvn	r4, #0
   154f8:	cmp	r0, #0
   154fc:	beq	15508 <__assert_fail@plt+0x4550>
   15500:	mov	r0, r4
   15504:	pop	{r4, r5, r6, sl, fp, pc}
   15508:	bl	10ef8 <__errno_location@plt>
   1550c:	mov	r1, #0
   15510:	str	r1, [r0]
   15514:	mov	r0, r4
   15518:	pop	{r4, r5, r6, sl, fp, pc}
   1551c:	push	{r4, r5, r6, sl, fp, lr}
   15520:	add	fp, sp, #16
   15524:	mov	r4, r0
   15528:	bl	10ef8 <__errno_location@plt>
   1552c:	ldr	r6, [r0]
   15530:	mov	r5, r0
   15534:	mov	r0, r4
   15538:	bl	10db4 <free@plt>
   1553c:	str	r6, [r5]
   15540:	pop	{r4, r5, r6, sl, fp, pc}
   15544:	push	{fp, lr}
   15548:	mov	fp, sp
   1554c:	mov	r0, #14
   15550:	bl	10f7c <nl_langinfo@plt>
   15554:	movw	r1, #23135	; 0x5a5f
   15558:	cmp	r0, #0
   1555c:	movt	r1, #1
   15560:	movne	r1, r0
   15564:	movw	r0, #24649	; 0x6049
   15568:	ldrb	r2, [r1]
   1556c:	movt	r0, #1
   15570:	cmp	r2, #0
   15574:	movne	r0, r1
   15578:	pop	{fp, pc}
   1557c:	push	{r4, r5, r6, r7, fp, lr}
   15580:	add	fp, sp, #16
   15584:	sub	sp, sp, #8
   15588:	cmp	r0, #0
   1558c:	add	r5, sp, #4
   15590:	mov	r7, r2
   15594:	mov	r4, r1
   15598:	movne	r5, r0
   1559c:	mov	r0, r5
   155a0:	bl	10e50 <mbrtowc@plt>
   155a4:	mov	r6, r0
   155a8:	cmp	r7, #0
   155ac:	beq	155d4 <__assert_fail@plt+0x461c>
   155b0:	cmn	r6, #2
   155b4:	bcc	155d4 <__assert_fail@plt+0x461c>
   155b8:	mov	r0, #0
   155bc:	bl	1561c <__assert_fail@plt+0x4664>
   155c0:	cmp	r0, #0
   155c4:	bne	155d4 <__assert_fail@plt+0x461c>
   155c8:	ldrb	r0, [r4]
   155cc:	mov	r6, #1
   155d0:	str	r0, [r5]
   155d4:	mov	r0, r6
   155d8:	sub	sp, fp, #16
   155dc:	pop	{r4, r5, r6, r7, fp, pc}
   155e0:	cmp	r2, #0
   155e4:	beq	15614 <__assert_fail@plt+0x465c>
   155e8:	mvn	r3, #0
   155ec:	udiv	r3, r3, r2
   155f0:	cmp	r3, r1
   155f4:	bcs	15614 <__assert_fail@plt+0x465c>
   155f8:	push	{fp, lr}
   155fc:	mov	fp, sp
   15600:	bl	10ef8 <__errno_location@plt>
   15604:	mov	r1, #12
   15608:	str	r1, [r0]
   1560c:	mov	r0, #0
   15610:	pop	{fp, pc}
   15614:	mul	r1, r2, r1
   15618:	b	15444 <__assert_fail@plt+0x448c>
   1561c:	push	{r4, sl, fp, lr}
   15620:	add	fp, sp, #8
   15624:	sub	sp, sp, #264	; 0x108
   15628:	add	r1, sp, #7
   1562c:	movw	r2, #257	; 0x101
   15630:	bl	15688 <__assert_fail@plt+0x46d0>
   15634:	mov	r4, #0
   15638:	cmp	r0, #0
   1563c:	bne	1567c <__assert_fail@plt+0x46c4>
   15640:	movw	r1, #24655	; 0x604f
   15644:	add	r0, sp, #7
   15648:	mov	r2, #2
   1564c:	movt	r1, #1
   15650:	bl	10ee0 <bcmp@plt>
   15654:	cmp	r0, #0
   15658:	beq	1567c <__assert_fail@plt+0x46c4>
   1565c:	movw	r1, #24657	; 0x6051
   15660:	add	r0, sp, #7
   15664:	mov	r2, #6
   15668:	movt	r1, #1
   1566c:	bl	10ee0 <bcmp@plt>
   15670:	cmp	r0, #0
   15674:	mov	r4, r0
   15678:	movwne	r4, #1
   1567c:	mov	r0, r4
   15680:	sub	sp, fp, #8
   15684:	pop	{r4, sl, fp, pc}
   15688:	push	{r4, r5, r6, r7, fp, lr}
   1568c:	add	fp, sp, #16
   15690:	mov	r4, r1
   15694:	mov	r1, #0
   15698:	mov	r6, r2
   1569c:	bl	10f64 <setlocale@plt>
   156a0:	cmp	r0, #0
   156a4:	beq	156d4 <__assert_fail@plt+0x471c>
   156a8:	mov	r7, r0
   156ac:	bl	10eec <strlen@plt>
   156b0:	cmp	r0, r6
   156b4:	bcs	156f0 <__assert_fail@plt+0x4738>
   156b8:	add	r2, r0, #1
   156bc:	mov	r0, r4
   156c0:	mov	r1, r7
   156c4:	bl	10dcc <memcpy@plt>
   156c8:	mov	r5, #0
   156cc:	mov	r0, r5
   156d0:	pop	{r4, r5, r6, r7, fp, pc}
   156d4:	mov	r5, #22
   156d8:	cmp	r6, #0
   156dc:	beq	15718 <__assert_fail@plt+0x4760>
   156e0:	mov	r0, #0
   156e4:	strb	r0, [r4]
   156e8:	mov	r0, r5
   156ec:	pop	{r4, r5, r6, r7, fp, pc}
   156f0:	mov	r5, #34	; 0x22
   156f4:	cmp	r6, #0
   156f8:	beq	15718 <__assert_fail@plt+0x4760>
   156fc:	sub	r6, r6, #1
   15700:	mov	r0, r4
   15704:	mov	r1, r7
   15708:	mov	r2, r6
   1570c:	bl	10dcc <memcpy@plt>
   15710:	mov	r0, #0
   15714:	strb	r0, [r4, r6]
   15718:	mov	r0, r5
   1571c:	pop	{r4, r5, r6, r7, fp, pc}
   15720:	mov	r1, #0
   15724:	b	10f64 <setlocale@plt>
   15728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1572c:	mov	r7, r0
   15730:	ldr	r6, [pc, #72]	; 15780 <__assert_fail@plt+0x47c8>
   15734:	ldr	r5, [pc, #72]	; 15784 <__assert_fail@plt+0x47cc>
   15738:	add	r6, pc, r6
   1573c:	add	r5, pc, r5
   15740:	sub	r6, r6, r5
   15744:	mov	r8, r1
   15748:	mov	r9, r2
   1574c:	bl	10d58 <calloc@plt-0x20>
   15750:	asrs	r6, r6, #2
   15754:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15758:	mov	r4, #0
   1575c:	add	r4, r4, #1
   15760:	ldr	r3, [r5], #4
   15764:	mov	r2, r9
   15768:	mov	r1, r8
   1576c:	mov	r0, r7
   15770:	blx	r3
   15774:	cmp	r6, r4
   15778:	bne	1575c <__assert_fail@plt+0x47a4>
   1577c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15780:	andeq	r1, r1, ip, asr #15
   15784:	andeq	r1, r1, r4, asr #15
   15788:	bx	lr
   1578c:	ldr	r3, [pc, #12]	; 157a0 <__assert_fail@plt+0x47e8>
   15790:	mov	r1, #0
   15794:	add	r3, pc, r3
   15798:	ldr	r2, [r3]
   1579c:	b	10f04 <__cxa_atexit@plt>
   157a0:	andeq	r1, r1, r0, asr #18

Disassembly of section .fini:

000157a4 <.fini>:
   157a4:	push	{r3, lr}
   157a8:	pop	{r3, pc}
