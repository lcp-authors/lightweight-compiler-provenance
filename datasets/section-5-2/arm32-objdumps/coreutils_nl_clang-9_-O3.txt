
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00011184 <.init>:
   11184:	push	{r3, lr}
   11188:	bl	114fc <__assert_fail@plt+0x4c>
   1118c:	pop	{r3, pc}

Disassembly of section .plt:

00011190 <pthread_mutex_unlock@plt-0x14>:
   11190:	push	{lr}		; (str lr, [sp, #-4]!)
   11194:	ldr	lr, [pc, #4]	; 111a0 <pthread_mutex_unlock@plt-0x4>
   11198:	add	lr, pc, lr
   1119c:	ldr	pc, [lr, #8]!
   111a0:	andeq	ip, r2, r0, ror #28

000111a4 <pthread_mutex_unlock@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #44, 20	; 0x2c000
   111ac:	ldr	pc, [ip, #3680]!	; 0xe60

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #44, 20	; 0x2c000
   111b8:	ldr	pc, [ip, #3672]!	; 0xe58

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #44, 20	; 0x2c000
   111c4:	ldr	pc, [ip, #3664]!	; 0xe50

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #44, 20	; 0x2c000
   111d0:	ldr	pc, [ip, #3656]!	; 0xe48

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #44, 20	; 0x2c000
   111dc:	ldr	pc, [ip, #3648]!	; 0xe40

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #44, 20	; 0x2c000
   111e8:	ldr	pc, [ip, #3640]!	; 0xe38

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #44, 20	; 0x2c000
   111f4:	ldr	pc, [ip, #3632]!	; 0xe30

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #44, 20	; 0x2c000
   11200:	ldr	pc, [ip, #3624]!	; 0xe28

00011204 <posix_fadvise64@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #44, 20	; 0x2c000
   1120c:	ldr	pc, [ip, #3616]!	; 0xe20

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #44, 20	; 0x2c000
   11218:	ldr	pc, [ip, #3608]!	; 0xe18

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #44, 20	; 0x2c000
   11224:	ldr	pc, [ip, #3600]!	; 0xe10

00011228 <memmove@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #44, 20	; 0x2c000
   11230:	ldr	pc, [ip, #3592]!	; 0xe08

00011234 <free@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #44, 20	; 0x2c000
   1123c:	ldr	pc, [ip, #3584]!	; 0xe00

00011240 <pthread_mutex_lock@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #44, 20	; 0x2c000
   11248:	ldr	pc, [ip, #3576]!	; 0xdf8

0001124c <_exit@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #44, 20	; 0x2c000
   11254:	ldr	pc, [ip, #3568]!	; 0xdf0

00011258 <memcpy@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #44, 20	; 0x2c000
   11260:	ldr	pc, [ip, #3560]!	; 0xde8

00011264 <pthread_mutex_init@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #44, 20	; 0x2c000
   1126c:	ldr	pc, [ip, #3552]!	; 0xde0

00011270 <towlower@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #44, 20	; 0x2c000
   11278:	ldr	pc, [ip, #3544]!	; 0xdd8

0001127c <mbsinit@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #44, 20	; 0x2c000
   11284:	ldr	pc, [ip, #3536]!	; 0xdd0

00011288 <fwrite_unlocked@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #44, 20	; 0x2c000
   11290:	ldr	pc, [ip, #3528]!	; 0xdc8

00011294 <stpcpy@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #44, 20	; 0x2c000
   1129c:	ldr	pc, [ip, #3520]!	; 0xdc0

000112a0 <dcgettext@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #44, 20	; 0x2c000
   112a8:	ldr	pc, [ip, #3512]!	; 0xdb8

000112ac <realloc@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #44, 20	; 0x2c000
   112b4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112b8 <textdomain@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #44, 20	; 0x2c000
   112c0:	ldr	pc, [ip, #3496]!	; 0xda8

000112c4 <iswprint@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #44, 20	; 0x2c000
   112cc:	ldr	pc, [ip, #3488]!	; 0xda0

000112d0 <fwrite@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #44, 20	; 0x2c000
   112d8:	ldr	pc, [ip, #3480]!	; 0xd98

000112dc <lseek64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #44, 20	; 0x2c000
   112e4:	ldr	pc, [ip, #3472]!	; 0xd90

000112e8 <__ctype_get_mb_cur_max@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #44, 20	; 0x2c000
   112f0:	ldr	pc, [ip, #3464]!	; 0xd88

000112f4 <__fpending@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #44, 20	; 0x2c000
   112fc:	ldr	pc, [ip, #3456]!	; 0xd80

00011300 <mbrtowc@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #44, 20	; 0x2c000
   11308:	ldr	pc, [ip, #3448]!	; 0xd78

0001130c <error@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #44, 20	; 0x2c000
   11314:	ldr	pc, [ip, #3440]!	; 0xd70

00011318 <malloc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #44, 20	; 0x2c000
   11320:	ldr	pc, [ip, #3432]!	; 0xd68

00011324 <__libc_start_main@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #44, 20	; 0x2c000
   1132c:	ldr	pc, [ip, #3424]!	; 0xd60

00011330 <__freading@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #44, 20	; 0x2c000
   11338:	ldr	pc, [ip, #3416]!	; 0xd58

0001133c <__ctype_tolower_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #44, 20	; 0x2c000
   11344:	ldr	pc, [ip, #3408]!	; 0xd50

00011348 <__ctype_toupper_loc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #44, 20	; 0x2c000
   11350:	ldr	pc, [ip, #3400]!	; 0xd48

00011354 <__gmon_start__@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #44, 20	; 0x2c000
   1135c:	ldr	pc, [ip, #3392]!	; 0xd40

00011360 <getopt_long@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #44, 20	; 0x2c000
   11368:	ldr	pc, [ip, #3384]!	; 0xd38

0001136c <__ctype_b_loc@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #44, 20	; 0x2c000
   11374:	ldr	pc, [ip, #3376]!	; 0xd30

00011378 <exit@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #44, 20	; 0x2c000
   11380:	ldr	pc, [ip, #3368]!	; 0xd28

00011384 <bcmp@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #44, 20	; 0x2c000
   1138c:	ldr	pc, [ip, #3360]!	; 0xd20

00011390 <strlen@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #44, 20	; 0x2c000
   11398:	ldr	pc, [ip, #3352]!	; 0xd18

0001139c <strchr@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #44, 20	; 0x2c000
   113a4:	ldr	pc, [ip, #3344]!	; 0xd10

000113a8 <__errno_location@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #44, 20	; 0x2c000
   113b0:	ldr	pc, [ip, #3336]!	; 0xd08

000113b4 <iswalnum@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #44, 20	; 0x2c000
   113bc:	ldr	pc, [ip, #3328]!	; 0xd00

000113c0 <__cxa_atexit@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #44, 20	; 0x2c000
   113c8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113cc <memset@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #44, 20	; 0x2c000
   113d4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113d8 <btowc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #44, 20	; 0x2c000
   113e0:	ldr	pc, [ip, #3304]!	; 0xce8

000113e4 <__printf_chk@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #44, 20	; 0x2c000
   113ec:	ldr	pc, [ip, #3296]!	; 0xce0

000113f0 <fileno@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #44, 20	; 0x2c000
   113f8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113fc <__fprintf_chk@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #44, 20	; 0x2c000
   11404:	ldr	pc, [ip, #3280]!	; 0xcd0

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #44, 20	; 0x2c000
   11410:	ldr	pc, [ip, #3272]!	; 0xcc8

00011414 <fseeko64@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #44, 20	; 0x2c000
   1141c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011420 <__uflow@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #44, 20	; 0x2c000
   11428:	ldr	pc, [ip, #3256]!	; 0xcb8

0001142c <__overflow@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #44, 20	; 0x2c000
   11434:	ldr	pc, [ip, #3248]!	; 0xcb0

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #44, 20	; 0x2c000
   11440:	ldr	pc, [ip, #3240]!	; 0xca8

00011444 <strrchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #44, 20	; 0x2c000
   1144c:	ldr	pc, [ip, #3232]!	; 0xca0

00011450 <nl_langinfo@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #44, 20	; 0x2c000
   11458:	ldr	pc, [ip, #3224]!	; 0xc98

0001145c <clearerr_unlocked@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #44, 20	; 0x2c000
   11464:	ldr	pc, [ip, #3216]!	; 0xc90

00011468 <__strtoll_internal@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #44, 20	; 0x2c000
   11470:	ldr	pc, [ip, #3208]!	; 0xc88

00011474 <fopen64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #44, 20	; 0x2c000
   1147c:	ldr	pc, [ip, #3200]!	; 0xc80

00011480 <bindtextdomain@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #44, 20	; 0x2c000
   11488:	ldr	pc, [ip, #3192]!	; 0xc78

0001148c <towupper@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #44, 20	; 0x2c000
   11494:	ldr	pc, [ip, #3184]!	; 0xc70

00011498 <strncmp@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #44, 20	; 0x2c000
   114a0:	ldr	pc, [ip, #3176]!	; 0xc68

000114a4 <abort@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #44, 20	; 0x2c000
   114ac:	ldr	pc, [ip, #3168]!	; 0xc60

000114b0 <__assert_fail@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #44, 20	; 0x2c000
   114b8:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114c0 <.text>:
   114c0:	mov	fp, #0
   114c4:	mov	lr, #0
   114c8:	pop	{r1}		; (ldr r1, [sp], #4)
   114cc:	mov	r2, sp
   114d0:	push	{r2}		; (str r2, [sp, #-4]!)
   114d4:	push	{r0}		; (str r0, [sp, #-4]!)
   114d8:	ldr	ip, [pc, #16]	; 114f0 <__assert_fail@plt+0x40>
   114dc:	push	{ip}		; (str ip, [sp, #-4]!)
   114e0:	ldr	r0, [pc, #12]	; 114f4 <__assert_fail@plt+0x44>
   114e4:	ldr	r3, [pc, #12]	; 114f8 <__assert_fail@plt+0x48>
   114e8:	bl	11324 <__libc_start_main@plt>
   114ec:	bl	114a4 <abort@plt>
   114f0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   114f4:	ldrdeq	r1, [r1], -r4
   114f8:	andeq	ip, r2, ip, ror r0
   114fc:	ldr	r3, [pc, #20]	; 11518 <__assert_fail@plt+0x68>
   11500:	ldr	r2, [pc, #20]	; 1151c <__assert_fail@plt+0x6c>
   11504:	add	r3, pc, r3
   11508:	ldr	r2, [r3, r2]
   1150c:	cmp	r2, #0
   11510:	bxeq	lr
   11514:	b	11354 <__gmon_start__@plt>
   11518:	strdeq	ip, [r2], -r4
   1151c:	andeq	r0, r0, r4, lsl r1
   11520:	ldr	r0, [pc, #24]	; 11540 <__assert_fail@plt+0x90>
   11524:	ldr	r3, [pc, #24]	; 11544 <__assert_fail@plt+0x94>
   11528:	cmp	r3, r0
   1152c:	bxeq	lr
   11530:	ldr	r3, [pc, #16]	; 11548 <__assert_fail@plt+0x98>
   11534:	cmp	r3, #0
   11538:	bxeq	lr
   1153c:	bx	r3
   11540:	andeq	lr, r3, r8, lsr #3
   11544:	andeq	lr, r3, r8, lsr #3
   11548:	andeq	r0, r0, r0
   1154c:	ldr	r0, [pc, #36]	; 11578 <__assert_fail@plt+0xc8>
   11550:	ldr	r1, [pc, #36]	; 1157c <__assert_fail@plt+0xcc>
   11554:	sub	r1, r1, r0
   11558:	asr	r1, r1, #2
   1155c:	add	r1, r1, r1, lsr #31
   11560:	asrs	r1, r1, #1
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0xd0>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	lr, r3, r8, lsr #3
   1157c:	andeq	lr, r3, r8, lsr #3
   11580:	andeq	r0, r0, r0
   11584:	push	{r4, lr}
   11588:	ldr	r4, [pc, #24]	; 115a8 <__assert_fail@plt+0xf8>
   1158c:	ldrb	r3, [r4]
   11590:	cmp	r3, #0
   11594:	popne	{r4, pc}
   11598:	bl	11520 <__assert_fail@plt+0x70>
   1159c:	mov	r3, #1
   115a0:	strb	r3, [r4]
   115a4:	pop	{r4, pc}
   115a8:	andeq	lr, r3, ip, asr #3
   115ac:	b	1154c <__assert_fail@plt+0x9c>
   115b0:	push	{fp, lr}
   115b4:	mov	fp, sp
   115b8:	sub	sp, sp, #56	; 0x38
   115bc:	mov	r4, r0
   115c0:	cmp	r0, #0
   115c4:	bne	11890 <__assert_fail@plt+0x3e0>
   115c8:	movw	r1, #49451	; 0xc12b
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #2
   115d8:	bl	112a0 <dcgettext@plt>
   115dc:	mov	r1, r0
   115e0:	movw	r0, #58748	; 0xe57c
   115e4:	movt	r0, #3
   115e8:	ldr	r2, [r0]
   115ec:	mov	r0, #1
   115f0:	bl	113e4 <__printf_chk@plt>
   115f4:	movw	r1, #49484	; 0xc14c
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #2
   11604:	bl	112a0 <dcgettext@plt>
   11608:	movw	r7, #57796	; 0xe1c4
   1160c:	movt	r7, #3
   11610:	ldr	r1, [r7]
   11614:	bl	111bc <fputs_unlocked@plt>
   11618:	movw	r1, #51478	; 0xc916
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	movt	r1, #2
   11628:	bl	112a0 <dcgettext@plt>
   1162c:	ldr	r1, [r7]
   11630:	bl	111bc <fputs_unlocked@plt>
   11634:	movw	r1, #51534	; 0xc94e
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #2
   11644:	bl	112a0 <dcgettext@plt>
   11648:	ldr	r1, [r7]
   1164c:	bl	111bc <fputs_unlocked@plt>
   11650:	movw	r1, #49546	; 0xc18a
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #2
   11660:	bl	112a0 <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111bc <fputs_unlocked@plt>
   1166c:	movw	r1, #49756	; 0xc25c
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #2
   1167c:	bl	112a0 <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111bc <fputs_unlocked@plt>
   11688:	movw	r1, #50199	; 0xc417
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #2
   11698:	bl	112a0 <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111bc <fputs_unlocked@plt>
   116a4:	movw	r1, #50342	; 0xc4a6
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #2
   116b4:	bl	112a0 <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111bc <fputs_unlocked@plt>
   116c0:	movw	r1, #50387	; 0xc4d3
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #2
   116d0:	bl	112a0 <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111bc <fputs_unlocked@plt>
   116dc:	movw	r1, #50441	; 0xc509
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #2
   116ec:	bl	112a0 <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111bc <fputs_unlocked@plt>
   116f8:	movw	r1, #50764	; 0xc64c
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #2
   11708:	bl	112a0 <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111bc <fputs_unlocked@plt>
   11714:	movw	r1, #50966	; 0xc716
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #2
   11724:	bl	112a0 <dcgettext@plt>
   11728:	ldr	r1, [r7]
   1172c:	bl	111bc <fputs_unlocked@plt>
   11730:	movw	r0, #52424	; 0xccc8
   11734:	mov	r2, #48	; 0x30
   11738:	mov	r6, sp
   1173c:	movw	r5, #51113	; 0xc7a9
   11740:	movt	r0, #2
   11744:	movt	r5, #2
   11748:	add	r1, r0, #32
   1174c:	add	r3, r0, #16
   11750:	vld1.64	{d18-d19}, [r0], r2
   11754:	vld1.64	{d16-d17}, [r1]
   11758:	vld1.64	{d20-d21}, [r3]
   1175c:	vldr	d22, [r0]
   11760:	add	r1, r6, #32
   11764:	add	r0, r6, #16
   11768:	vst1.64	{d16-d17}, [r1]
   1176c:	movw	r1, #51609	; 0xc999
   11770:	vst1.64	{d20-d21}, [r0]
   11774:	mov	r0, r6
   11778:	movt	r1, #2
   1177c:	vst1.64	{d18-d19}, [r0], r2
   11780:	vstr	d22, [r0]
   11784:	mov	r0, r5
   11788:	bl	111f8 <strcmp@plt>
   1178c:	cmp	r0, #0
   11790:	ldrne	r1, [r6, #8]!
   11794:	cmpne	r1, #0
   11798:	bne	11784 <__assert_fail@plt+0x2d4>
   1179c:	movw	r1, #51704	; 0xc9f8
   117a0:	ldr	r6, [r6, #4]
   117a4:	mov	r0, #0
   117a8:	mov	r2, #5
   117ac:	movt	r1, #2
   117b0:	bl	112a0 <dcgettext@plt>
   117b4:	movw	r2, #51434	; 0xc8ea
   117b8:	movw	r3, #51727	; 0xca0f
   117bc:	mov	r1, r0
   117c0:	mov	r0, #1
   117c4:	movt	r2, #2
   117c8:	movt	r3, #2
   117cc:	bl	113e4 <__printf_chk@plt>
   117d0:	cmp	r6, #0
   117d4:	mov	r0, #5
   117d8:	mov	r1, #0
   117dc:	moveq	r6, r5
   117e0:	bl	11438 <setlocale@plt>
   117e4:	cmp	r0, #0
   117e8:	beq	11820 <__assert_fail@plt+0x370>
   117ec:	movw	r1, #51767	; 0xca37
   117f0:	mov	r2, #3
   117f4:	movt	r1, #2
   117f8:	bl	11498 <strncmp@plt>
   117fc:	cmp	r0, #0
   11800:	beq	11820 <__assert_fail@plt+0x370>
   11804:	movw	r1, #51771	; 0xca3b
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	movt	r1, #2
   11814:	bl	112a0 <dcgettext@plt>
   11818:	ldr	r1, [r7]
   1181c:	bl	111bc <fputs_unlocked@plt>
   11820:	movw	r1, #51842	; 0xca82
   11824:	mov	r0, #0
   11828:	mov	r2, #5
   1182c:	movt	r1, #2
   11830:	bl	112a0 <dcgettext@plt>
   11834:	movw	r2, #51727	; 0xca0f
   11838:	mov	r1, r0
   1183c:	mov	r0, #1
   11840:	mov	r3, r5
   11844:	movt	r2, #2
   11848:	bl	113e4 <__printf_chk@plt>
   1184c:	movw	r1, #51869	; 0xca9d
   11850:	mov	r0, #0
   11854:	mov	r2, #5
   11858:	movt	r1, #2
   1185c:	bl	112a0 <dcgettext@plt>
   11860:	mov	r1, r0
   11864:	movw	r0, #51637	; 0xc9b5
   11868:	movw	r3, #52110	; 0xcb8e
   1186c:	cmp	r6, r5
   11870:	mov	r2, r6
   11874:	movt	r0, #2
   11878:	movt	r3, #2
   1187c:	moveq	r3, r0
   11880:	mov	r0, #1
   11884:	bl	113e4 <__printf_chk@plt>
   11888:	mov	r0, r4
   1188c:	bl	11378 <exit@plt>
   11890:	movw	r0, #57784	; 0xe1b8
   11894:	movw	r1, #49412	; 0xc104
   11898:	mov	r2, #5
   1189c:	movt	r0, #3
   118a0:	movt	r1, #2
   118a4:	ldr	r5, [r0]
   118a8:	mov	r0, #0
   118ac:	bl	112a0 <dcgettext@plt>
   118b0:	mov	r2, r0
   118b4:	movw	r0, #58748	; 0xe57c
   118b8:	mov	r1, #1
   118bc:	movt	r0, #3
   118c0:	ldr	r3, [r0]
   118c4:	mov	r0, r5
   118c8:	bl	113fc <__fprintf_chk@plt>
   118cc:	mov	r0, r4
   118d0:	bl	11378 <exit@plt>
   118d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d8:	add	fp, sp, #28
   118dc:	sub	sp, sp, #36	; 0x24
   118e0:	mov	r9, r0
   118e4:	ldr	r0, [r1]
   118e8:	mov	r5, r1
   118ec:	bl	12d00 <__assert_fail@plt+0x1850>
   118f0:	movw	r1, #52110	; 0xcb8e
   118f4:	mov	r0, #6
   118f8:	movt	r1, #2
   118fc:	bl	11438 <setlocale@plt>
   11900:	movw	r6, #51438	; 0xc8ee
   11904:	movw	r1, #51116	; 0xc7ac
   11908:	movt	r6, #2
   1190c:	movt	r1, #2
   11910:	mov	r0, r6
   11914:	bl	11480 <bindtextdomain@plt>
   11918:	mov	r0, r6
   1191c:	bl	112b8 <textdomain@plt>
   11920:	movw	r0, #10260	; 0x2814
   11924:	movt	r0, #1
   11928:	bl	2c0e0 <__assert_fail@plt+0x1ac30>
   1192c:	movw	r0, #58576	; 0xe4d0
   11930:	mov	r1, #0
   11934:	movw	r7, #51140	; 0xc7c4
   11938:	mov	r4, #0
   1193c:	mov	sl, #1
   11940:	movt	r0, #3
   11944:	movt	r7, #2
   11948:	strb	r1, [r0]
   1194c:	movw	r0, #57640	; 0xe128
   11950:	movt	r0, #3
   11954:	add	r1, r0, #4
   11958:	add	r0, r0, #8
   1195c:	str	r1, [sp, #32]
   11960:	movw	r1, #58676	; 0xe534
   11964:	str	r0, [sp, #28]
   11968:	movt	r1, #3
   1196c:	add	r0, r1, #32
   11970:	str	r0, [sp, #24]
   11974:	movw	r3, #52168	; 0xcbc8
   11978:	mov	r0, r9
   1197c:	mov	r1, r5
   11980:	mov	r2, r7
   11984:	mov	r6, sl
   11988:	str	r4, [sp]
   1198c:	movt	r3, #2
   11990:	bl	11360 <getopt_long@plt>
   11994:	add	r0, r0, #3
   11998:	mov	sl, #0
   1199c:	cmp	r0, #122	; 0x7a
   119a0:	bhi	11974 <__assert_fail@plt+0x4c4>
   119a4:	add	r1, pc, #4
   119a8:	mov	sl, #0
   119ac:	ldr	pc, [r1, r0, lsl #2]
   119b0:	andeq	r2, r1, r8, asr #2
   119b4:	muleq	r1, ip, r1
   119b8:	andeq	r1, r1, r0, ror #31
   119bc:	andeq	r1, r1, r4, ror r9
   119c0:	andeq	r1, r1, r4, ror r9
   119c4:	andeq	r1, r1, r4, ror r9
   119c8:	andeq	r1, r1, r4, ror r9
   119cc:	andeq	r1, r1, r4, ror r9
   119d0:	andeq	r1, r1, r4, ror r9
   119d4:	andeq	r1, r1, r4, ror r9
   119d8:	andeq	r1, r1, r4, ror r9
   119dc:	andeq	r1, r1, r4, ror r9
   119e0:	andeq	r1, r1, r4, ror r9
   119e4:	andeq	r1, r1, r4, ror r9
   119e8:	andeq	r1, r1, r4, ror r9
   119ec:	andeq	r1, r1, r4, ror r9
   119f0:	andeq	r1, r1, r4, ror r9
   119f4:	andeq	r1, r1, r4, ror r9
   119f8:	andeq	r1, r1, r4, ror r9
   119fc:	andeq	r1, r1, r4, ror r9
   11a00:	andeq	r1, r1, r4, ror r9
   11a04:	andeq	r1, r1, r4, ror r9
   11a08:	andeq	r1, r1, r4, ror r9
   11a0c:	andeq	r1, r1, r4, ror r9
   11a10:	andeq	r1, r1, r4, ror r9
   11a14:	andeq	r1, r1, r4, ror r9
   11a18:	andeq	r1, r1, r4, ror r9
   11a1c:	andeq	r1, r1, r4, ror r9
   11a20:	andeq	r1, r1, r4, ror r9
   11a24:	andeq	r1, r1, r4, ror r9
   11a28:	andeq	r1, r1, r4, ror r9
   11a2c:	andeq	r1, r1, r4, ror r9
   11a30:	andeq	r1, r1, r4, ror r9
   11a34:	andeq	r1, r1, r4, ror r9
   11a38:	andeq	r1, r1, r4, ror r9
   11a3c:	andeq	r1, r1, r4, ror r9
   11a40:	andeq	r1, r1, r4, ror r9
   11a44:	andeq	r1, r1, r4, ror r9
   11a48:	andeq	r1, r1, r4, ror r9
   11a4c:	andeq	r1, r1, r4, ror r9
   11a50:	andeq	r1, r1, r4, ror r9
   11a54:	andeq	r1, r1, r4, ror r9
   11a58:	andeq	r1, r1, r4, ror r9
   11a5c:	andeq	r1, r1, r4, ror r9
   11a60:	andeq	r1, r1, r4, ror r9
   11a64:	andeq	r1, r1, r4, ror r9
   11a68:	andeq	r1, r1, r4, ror r9
   11a6c:	andeq	r1, r1, r4, ror r9
   11a70:	andeq	r1, r1, r4, ror r9
   11a74:	andeq	r1, r1, r4, ror r9
   11a78:	andeq	r1, r1, r4, ror r9
   11a7c:	andeq	r1, r1, r4, ror r9
   11a80:	andeq	r1, r1, r4, ror r9
   11a84:	andeq	r1, r1, r4, ror r9
   11a88:	andeq	r1, r1, r4, ror r9
   11a8c:	andeq	r1, r1, r4, ror r9
   11a90:	andeq	r1, r1, r4, ror r9
   11a94:	andeq	r1, r1, r4, ror r9
   11a98:	andeq	r1, r1, r4, ror r9
   11a9c:	andeq	r1, r1, r4, ror r9
   11aa0:	andeq	r1, r1, r4, ror r9
   11aa4:	andeq	r1, r1, r4, ror r9
   11aa8:	andeq	r1, r1, r4, ror r9
   11aac:	andeq	r1, r1, r4, ror r9
   11ab0:	andeq	r1, r1, r4, ror r9
   11ab4:	andeq	r1, r1, r4, ror r9
   11ab8:	andeq	r1, r1, r4, ror r9
   11abc:	andeq	r1, r1, r4, ror r9
   11ac0:	andeq	r1, r1, r4, ror r9
   11ac4:	andeq	r1, r1, r4, ror r9
   11ac8:	andeq	r1, r1, r4, ror r9
   11acc:	andeq	r1, r1, r4, ror r9
   11ad0:	andeq	r1, r1, r4, ror r9
   11ad4:	andeq	r1, r1, r4, ror r9
   11ad8:	andeq	r1, r1, r4, ror r9
   11adc:	andeq	r1, r1, r4, ror r9
   11ae0:	andeq	r1, r1, r4, ror r9
   11ae4:	andeq	r1, r1, r4, ror r9
   11ae8:	andeq	r1, r1, r4, ror r9
   11aec:	andeq	r1, r1, r4, ror r9
   11af0:	andeq	r1, r1, r4, ror r9
   11af4:	andeq	r1, r1, r4, ror r9
   11af8:	andeq	r1, r1, r4, ror r9
   11afc:	andeq	r1, r1, r4, ror r9
   11b00:	andeq	r1, r1, r4, ror r9
   11b04:	andeq	r1, r1, r4, ror r9
   11b08:	andeq	r1, r1, r4, ror r9
   11b0c:	andeq	r1, r1, r4, ror r9
   11b10:	andeq	r1, r1, r4, ror r9
   11b14:	andeq	r1, r1, r4, ror r9
   11b18:	andeq	r1, r1, r4, ror r9
   11b1c:	andeq	r1, r1, r4, ror r9
   11b20:	andeq	r1, r1, r4, ror r9
   11b24:	andeq	r1, r1, r4, ror r9
   11b28:	andeq	r1, r1, r4, ror r9
   11b2c:	andeq	r1, r1, r4, ror r9
   11b30:	andeq	r1, r1, r4, ror r9
   11b34:	andeq	r1, r1, r4, ror r9
   11b38:	andeq	r1, r1, r4, ror r9
   11b3c:	andeq	r1, r1, r4, ror r9
   11b40:	andeq	r1, r1, r4, ror r9
   11b44:	muleq	r1, ip, fp
   11b48:	andeq	r1, r1, r4, ror r9
   11b4c:	andeq	r1, r1, r4, lsr lr
   11b50:	andeq	r1, r1, r4, ror r9
   11b54:	andeq	r1, r1, r0, lsr #29
   11b58:	andeq	r1, r1, r4, ror r9
   11b5c:	andeq	r1, r1, ip, ror #26
   11b60:	andeq	r1, r1, ip, lsl #25
   11b64:	andeq	r1, r1, r4, ror r9
   11b68:	andeq	r1, r1, r4, ror r9
   11b6c:	strdeq	r1, [r1], -ip
   11b70:	andeq	r1, r1, r4, ror r9
   11b74:	strdeq	r1, [r1], -r4
   11b78:	andeq	r1, r1, r4, ror r9
   11b7c:	andeq	r1, r1, ip, lsr #27
   11b80:	andeq	r1, r1, r4, ror r9
   11b84:	andeq	r1, r1, r4, ror r9
   11b88:	ldrdeq	r1, [r1], -r4
   11b8c:	andeq	r1, r1, r4, ror r9
   11b90:	andeq	r1, r1, r4, ror r9
   11b94:	andeq	r1, r1, r4, asr #27
   11b98:	andeq	r1, r1, ip, lsl #30
   11b9c:	ldr	r0, [sp, #32]
   11ba0:	movw	r1, #58676	; 0xe534
   11ba4:	movw	r2, #58064	; 0xe2d0
   11ba8:	movt	r1, #3
   11bac:	movt	r2, #3
   11bb0:	bl	121c4 <__assert_fail@plt+0xd14>
   11bb4:	cmp	r0, #0
   11bb8:	mov	sl, r6
   11bbc:	bne	11974 <__assert_fail@plt+0x4c4>
   11bc0:	movw	r1, #51197	; 0xc7fd
   11bc4:	mov	sl, #0
   11bc8:	mov	r0, #0
   11bcc:	movt	r1, #2
   11bd0:	b	11ed0 <__assert_fail@plt+0xa20>
   11bd4:	movw	r0, #57800	; 0xe1c8
   11bd8:	movw	r1, #57640	; 0xe128
   11bdc:	mov	sl, r6
   11be0:	movt	r0, #3
   11be4:	movt	r1, #3
   11be8:	ldr	r0, [r0]
   11bec:	str	r0, [r1, #12]
   11bf0:	b	11974 <__assert_fail@plt+0x4c4>
   11bf4:	movw	r0, #57800	; 0xe1c8
   11bf8:	movw	r1, #51391	; 0xc8bf
   11bfc:	movt	r0, #3
   11c00:	movt	r1, #2
   11c04:	ldr	r7, [r0]
   11c08:	mov	r0, r7
   11c0c:	bl	111f8 <strcmp@plt>
   11c10:	cmp	r0, #0
   11c14:	beq	11f94 <__assert_fail@plt+0xae4>
   11c18:	movw	r1, #51394	; 0xc8c2
   11c1c:	mov	r0, r7
   11c20:	movt	r1, #2
   11c24:	bl	111f8 <strcmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	beq	11fa8 <__assert_fail@plt+0xaf8>
   11c30:	movw	r1, #51397	; 0xc8c5
   11c34:	mov	r0, r7
   11c38:	movt	r1, #2
   11c3c:	bl	111f8 <strcmp@plt>
   11c40:	cmp	r0, #0
   11c44:	beq	11fbc <__assert_fail@plt+0xb0c>
   11c48:	movw	r1, #51400	; 0xc8c8
   11c4c:	mov	r0, #0
   11c50:	mov	r2, #5
   11c54:	mov	sl, #0
   11c58:	movt	r1, #2
   11c5c:	bl	112a0 <dcgettext@plt>
   11c60:	mov	r7, r0
   11c64:	movw	r0, #57800	; 0xe1c8
   11c68:	movt	r0, #3
   11c6c:	ldr	r0, [r0]
   11c70:	bl	14cc4 <__assert_fail@plt+0x3814>
   11c74:	mov	r3, r0
   11c78:	mov	r0, #0
   11c7c:	mov	r1, #0
   11c80:	mov	r2, r7
   11c84:	bl	1130c <error@plt>
   11c88:	b	11fd4 <__assert_fail@plt+0xb24>
   11c8c:	movw	r0, #57800	; 0xe1c8
   11c90:	movw	r1, #51294	; 0xc85e
   11c94:	mov	r2, #5
   11c98:	movt	r0, #3
   11c9c:	movt	r1, #2
   11ca0:	ldr	r7, [r0]
   11ca4:	mov	r0, #0
   11ca8:	bl	112a0 <dcgettext@plt>
   11cac:	mvn	r1, #0
   11cb0:	str	r0, [sp, #12]
   11cb4:	mov	r0, r7
   11cb8:	movw	r7, #51140	; 0xc7c4
   11cbc:	mov	r2, #0
   11cc0:	mov	r3, #-2147483648	; 0x80000000
   11cc4:	str	r4, [sp, #16]
   11cc8:	str	r1, [sp]
   11ccc:	mvn	r1, #-2147483648	; 0x80000000
   11cd0:	movt	r7, #2
   11cd4:	str	r1, [sp, #4]
   11cd8:	movw	r1, #52110	; 0xcb8e
   11cdc:	movt	r1, #2
   11ce0:	str	r1, [sp, #8]
   11ce4:	bl	2a0a0 <__assert_fail@plt+0x18bf0>
   11ce8:	movw	r2, #57640	; 0xe128
   11cec:	mov	sl, r6
   11cf0:	movt	r2, #3
   11cf4:	strd	r0, [r2, #40]	; 0x28
   11cf8:	b	11974 <__assert_fail@plt+0x4c4>
   11cfc:	movw	r0, #57800	; 0xe1c8
   11d00:	movw	r1, #51324	; 0xc87c
   11d04:	mov	r2, #5
   11d08:	movt	r0, #3
   11d0c:	movt	r1, #2
   11d10:	ldr	r7, [r0]
   11d14:	mov	r0, #0
   11d18:	bl	112a0 <dcgettext@plt>
   11d1c:	mvn	r1, #0
   11d20:	str	r0, [sp, #12]
   11d24:	mov	r0, r7
   11d28:	movw	r7, #51140	; 0xc7c4
   11d2c:	mov	r2, #1
   11d30:	mov	r3, #0
   11d34:	str	r4, [sp, #16]
   11d38:	str	r1, [sp]
   11d3c:	mvn	r1, #-2147483648	; 0x80000000
   11d40:	movt	r7, #2
   11d44:	str	r1, [sp, #4]
   11d48:	movw	r1, #52110	; 0xcb8e
   11d4c:	movt	r1, #2
   11d50:	str	r1, [sp, #8]
   11d54:	bl	2a0a0 <__assert_fail@plt+0x18bf0>
   11d58:	movw	r2, #57640	; 0xe128
   11d5c:	mov	sl, r6
   11d60:	movt	r2, #3
   11d64:	strd	r0, [r2, #48]	; 0x30
   11d68:	b	11974 <__assert_fail@plt+0x4c4>
   11d6c:	movw	r0, #58576	; 0xe4d0
   11d70:	movw	r2, #57808	; 0xe1d0
   11d74:	movt	r0, #3
   11d78:	movt	r2, #3
   11d7c:	add	r1, r0, #68	; 0x44
   11d80:	movw	r0, #57640	; 0xe128
   11d84:	movt	r0, #3
   11d88:	bl	121c4 <__assert_fail@plt+0xd14>
   11d8c:	cmp	r0, #0
   11d90:	mov	sl, r6
   11d94:	bne	11974 <__assert_fail@plt+0x4c4>
   11d98:	movw	r1, #51162	; 0xc7da
   11d9c:	mov	sl, #0
   11da0:	mov	r0, #0
   11da4:	movt	r1, #2
   11da8:	b	11ed0 <__assert_fail@plt+0xa20>
   11dac:	movw	r0, #58576	; 0xe4d0
   11db0:	mov	r1, #1
   11db4:	mov	sl, r6
   11db8:	movt	r0, #3
   11dbc:	strb	r1, [r0, #1]
   11dc0:	b	11974 <__assert_fail@plt+0x4c4>
   11dc4:	movw	r0, #57800	; 0xe1c8
   11dc8:	movw	r1, #51265	; 0xc841
   11dcc:	mov	r2, #5
   11dd0:	movt	r0, #3
   11dd4:	movt	r1, #2
   11dd8:	ldr	r7, [r0]
   11ddc:	mov	r0, #0
   11de0:	bl	112a0 <dcgettext@plt>
   11de4:	mvn	r1, #0
   11de8:	str	r0, [sp, #12]
   11dec:	mov	r0, r7
   11df0:	movw	r7, #51140	; 0xc7c4
   11df4:	mov	r2, #0
   11df8:	mov	r3, #-2147483648	; 0x80000000
   11dfc:	str	r4, [sp, #16]
   11e00:	str	r1, [sp]
   11e04:	mvn	r1, #-2147483648	; 0x80000000
   11e08:	movt	r7, #2
   11e0c:	str	r1, [sp, #4]
   11e10:	movw	r1, #52110	; 0xcb8e
   11e14:	movt	r1, #2
   11e18:	str	r1, [sp, #8]
   11e1c:	bl	2a0a0 <__assert_fail@plt+0x18bf0>
   11e20:	movw	r2, #57640	; 0xe128
   11e24:	mov	sl, r6
   11e28:	movt	r2, #3
   11e2c:	strd	r0, [r2, #32]
   11e30:	b	11974 <__assert_fail@plt+0x4c4>
   11e34:	movw	r0, #57800	; 0xe1c8
   11e38:	movt	r0, #3
   11e3c:	ldr	r8, [r0]
   11e40:	mov	r0, r8
   11e44:	bl	11390 <strlen@plt>
   11e48:	sub	r0, r0, #1
   11e4c:	cmp	r0, #1
   11e50:	bhi	11f80 <__assert_fail@plt+0xad0>
   11e54:	ldrb	r0, [r8]
   11e58:	mov	sl, r6
   11e5c:	cmp	r0, #0
   11e60:	beq	11974 <__assert_fail@plt+0x4c4>
   11e64:	movw	r0, #57640	; 0xe128
   11e68:	movw	r2, #57800	; 0xe1c8
   11e6c:	movt	r0, #3
   11e70:	movt	r2, #3
   11e74:	ldr	r0, [r0, #24]
   11e78:	add	r1, r8, #1
   11e7c:	str	r1, [r2]
   11e80:	ldrb	r1, [r8]
   11e84:	strb	r1, [r0], #1
   11e88:	ldr	r8, [r2]
   11e8c:	ldrb	r1, [r8]
   11e90:	cmp	r1, #0
   11e94:	bne	11e78 <__assert_fail@plt+0x9c8>
   11e98:	mov	sl, r6
   11e9c:	b	11974 <__assert_fail@plt+0x4c4>
   11ea0:	ldr	r0, [sp, #28]
   11ea4:	ldr	r1, [sp, #24]
   11ea8:	movw	r2, #58320	; 0xe3d0
   11eac:	movt	r2, #3
   11eb0:	bl	121c4 <__assert_fail@plt+0xd14>
   11eb4:	cmp	r0, #0
   11eb8:	mov	sl, r6
   11ebc:	bne	11974 <__assert_fail@plt+0x4c4>
   11ec0:	movw	r1, #51230	; 0xc81e
   11ec4:	mov	sl, #0
   11ec8:	mov	r0, #0
   11ecc:	movt	r1, #2
   11ed0:	mov	r2, #5
   11ed4:	bl	112a0 <dcgettext@plt>
   11ed8:	mov	r7, r0
   11edc:	movw	r0, #57800	; 0xe1c8
   11ee0:	movt	r0, #3
   11ee4:	ldr	r0, [r0]
   11ee8:	bl	14cc4 <__assert_fail@plt+0x3814>
   11eec:	mov	r3, r0
   11ef0:	mov	r2, r7
   11ef4:	movw	r7, #51140	; 0xc7c4
   11ef8:	mov	r0, #0
   11efc:	mov	r1, #0
   11f00:	movt	r7, #2
   11f04:	bl	1130c <error@plt>
   11f08:	b	11974 <__assert_fail@plt+0x4c4>
   11f0c:	movw	r0, #57800	; 0xe1c8
   11f10:	movw	r1, #51359	; 0xc89f
   11f14:	mov	r2, #5
   11f18:	movt	r0, #3
   11f1c:	movt	r1, #2
   11f20:	ldr	r7, [r0]
   11f24:	mov	r0, #0
   11f28:	bl	112a0 <dcgettext@plt>
   11f2c:	mvn	r1, #-2147483648	; 0x80000000
   11f30:	mov	r2, #0
   11f34:	str	r0, [sp, #12]
   11f38:	mov	r0, r7
   11f3c:	movw	r7, #51140	; 0xc7c4
   11f40:	mov	r3, #0
   11f44:	mov	r4, #0
   11f48:	str	r1, [sp]
   11f4c:	movw	r1, #52110	; 0xcb8e
   11f50:	str	r2, [sp, #4]
   11f54:	str	r2, [sp, #16]
   11f58:	mov	r2, #1
   11f5c:	movt	r7, #2
   11f60:	movt	r1, #2
   11f64:	str	r1, [sp, #8]
   11f68:	bl	2a0a0 <__assert_fail@plt+0x18bf0>
   11f6c:	movw	r1, #57640	; 0xe128
   11f70:	mov	sl, r6
   11f74:	movt	r1, #3
   11f78:	str	r0, [r1, #16]
   11f7c:	b	11974 <__assert_fail@plt+0x4c4>
   11f80:	movw	r0, #57640	; 0xe128
   11f84:	mov	sl, r6
   11f88:	movt	r0, #3
   11f8c:	str	r8, [r0, #24]
   11f90:	b	11974 <__assert_fail@plt+0x4c4>
   11f94:	movw	r0, #57640	; 0xe128
   11f98:	movw	r1, #52392	; 0xcca8
   11f9c:	movt	r0, #3
   11fa0:	movt	r1, #2
   11fa4:	b	11fcc <__assert_fail@plt+0xb1c>
   11fa8:	movw	r0, #57640	; 0xe128
   11fac:	movw	r1, #52401	; 0xccb1
   11fb0:	movt	r0, #3
   11fb4:	movt	r1, #2
   11fb8:	b	11fcc <__assert_fail@plt+0xb1c>
   11fbc:	movw	r0, #57640	; 0xe128
   11fc0:	movw	r1, #52409	; 0xccb9
   11fc4:	movt	r0, #3
   11fc8:	movt	r1, #2
   11fcc:	mov	sl, r6
   11fd0:	str	r1, [r0, #20]
   11fd4:	movw	r7, #51140	; 0xc7c4
   11fd8:	movt	r7, #2
   11fdc:	b	11974 <__assert_fail@plt+0x4c4>
   11fe0:	tst	r6, #1
   11fe4:	beq	121a4 <__assert_fail@plt+0xcf4>
   11fe8:	mov	r8, r5
   11fec:	movw	r5, #57640	; 0xe128
   11ff0:	movt	r5, #3
   11ff4:	ldr	r0, [r5, #24]
   11ff8:	bl	11390 <strlen@plt>
   11ffc:	movw	r4, #58576	; 0xe4d0
   12000:	mov	r7, r0
   12004:	add	r0, r0, r0, lsl #1
   12008:	movt	r4, #3
   1200c:	str	r0, [r4, #4]
   12010:	add	r0, r0, #1
   12014:	bl	29a18 <__assert_fail@plt+0x18568>
   12018:	ldr	r1, [r5, #24]
   1201c:	str	r0, [r4, #8]
   12020:	bl	11294 <stpcpy@plt>
   12024:	ldr	r1, [r5, #24]
   12028:	bl	11294 <stpcpy@plt>
   1202c:	ldr	r1, [r5, #24]
   12030:	bl	11294 <stpcpy@plt>
   12034:	ldr	r1, [r4, #8]
   12038:	lsl	r0, r7, #1
   1203c:	add	r3, r4, #12
   12040:	add	r1, r1, r7
   12044:	stm	r3, {r0, r1, r7}
   12048:	add	r0, r4, #56	; 0x38
   1204c:	add	r2, r1, r7
   12050:	str	r2, [r4, #24]
   12054:	bl	12ae0 <__assert_fail@plt+0x1630>
   12058:	ldr	r0, [r5, #12]
   1205c:	bl	11390 <strlen@plt>
   12060:	mov	r7, r0
   12064:	ldr	r0, [r5, #16]
   12068:	add	r0, r7, r0
   1206c:	add	r0, r0, #1
   12070:	bl	29a18 <__assert_fail@plt+0x18568>
   12074:	mov	r6, r0
   12078:	str	r0, [r4, #28]
   1207c:	ldr	r0, [r5, #16]
   12080:	mov	r1, #32
   12084:	add	r7, r0, r7
   12088:	mov	r0, r6
   1208c:	mov	r2, r7
   12090:	bl	113cc <memset@plt>
   12094:	mov	r0, #0
   12098:	ldrd	r2, [r5, #32]
   1209c:	strb	r0, [r6, r7]
   120a0:	movw	r7, #57776	; 0xe1b0
   120a4:	movw	r0, #58676	; 0xe534
   120a8:	movt	r7, #3
   120ac:	movt	r0, #3
   120b0:	ldr	r1, [r7]
   120b4:	str	r0, [r4, #36]	; 0x24
   120b8:	ldr	r0, [r5, #4]
   120bc:	cmp	r1, r9
   120c0:	str	r0, [r4, #32]
   120c4:	str	r2, [r4, #40]	; 0x28
   120c8:	str	r3, [r4, #44]	; 0x2c
   120cc:	bne	120e4 <__assert_fail@plt+0xc34>
   120d0:	movw	r0, #52580	; 0xcd64
   120d4:	movt	r0, #2
   120d8:	bl	122c8 <__assert_fail@plt+0xe18>
   120dc:	mov	r6, r0
   120e0:	b	12110 <__assert_fail@plt+0xc60>
   120e4:	mov	r6, #1
   120e8:	bge	12110 <__assert_fail@plt+0xc60>
   120ec:	mov	r6, #1
   120f0:	ldr	r0, [r8, r1, lsl #2]
   120f4:	bl	122c8 <__assert_fail@plt+0xe18>
   120f8:	ldr	r1, [r7]
   120fc:	and	r6, r6, r0
   12100:	add	r1, r1, #1
   12104:	cmp	r1, r9
   12108:	str	r1, [r7]
   1210c:	blt	120f0 <__assert_fail@plt+0xc40>
   12110:	movw	r0, #58576	; 0xe4d0
   12114:	movt	r0, #3
   12118:	ldrb	r0, [r0]
   1211c:	cmp	r0, #1
   12120:	bne	1213c <__assert_fail@plt+0xc8c>
   12124:	movw	r0, #57792	; 0xe1c0
   12128:	movt	r0, #3
   1212c:	ldr	r0, [r0]
   12130:	bl	12940 <__assert_fail@plt+0x1490>
   12134:	cmn	r0, #1
   12138:	beq	121ac <__assert_fail@plt+0xcfc>
   1213c:	eor	r0, r6, #1
   12140:	sub	sp, fp, #28
   12144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12148:	movw	r0, #57696	; 0xe160
   1214c:	movw	r2, #51462	; 0xc906
   12150:	mov	r1, #0
   12154:	movw	r7, #51448	; 0xc8f8
   12158:	movt	r0, #3
   1215c:	movt	r2, #2
   12160:	str	r1, [sp, #8]
   12164:	movw	r1, #51113	; 0xc7a9
   12168:	movt	r7, #2
   1216c:	movt	r1, #2
   12170:	ldr	r3, [r0]
   12174:	movw	r0, #57796	; 0xe1c4
   12178:	str	r2, [sp, #4]
   1217c:	movw	r2, #51434	; 0xc8ea
   12180:	str	r7, [sp]
   12184:	movt	r0, #3
   12188:	movt	r2, #2
   1218c:	ldr	r0, [r0]
   12190:	bl	297e4 <__assert_fail@plt+0x18334>
   12194:	mov	r0, #0
   12198:	bl	11378 <exit@plt>
   1219c:	mov	r0, #0
   121a0:	bl	115b0 <__assert_fail@plt+0x100>
   121a4:	mov	r0, #1
   121a8:	bl	115b0 <__assert_fail@plt+0x100>
   121ac:	bl	113a8 <__errno_location@plt>
   121b0:	ldr	r1, [r0]
   121b4:	movw	r2, #52580	; 0xcd64
   121b8:	mov	r0, #1
   121bc:	movt	r2, #2
   121c0:	bl	1130c <error@plt>
   121c4:	push	{r4, r5, r6, sl, fp, lr}
   121c8:	add	fp, sp, #16
   121cc:	movw	ip, #57800	; 0xe1c8
   121d0:	mov	r6, r1
   121d4:	mov	r1, r0
   121d8:	movt	ip, #3
   121dc:	ldr	r5, [ip]
   121e0:	ldrb	r0, [r5]
   121e4:	sub	r3, r0, #97	; 0x61
   121e8:	mov	r0, #0
   121ec:	cmp	r3, #19
   121f0:	bhi	12254 <__assert_fail@plt+0xda4>
   121f4:	add	r4, pc, #0
   121f8:	ldr	pc, [r4, r3, lsl #2]
   121fc:	andeq	r2, r1, ip, asr #4
   12200:	andeq	r2, r1, r4, asr r2
   12204:	andeq	r2, r1, r4, asr r2
   12208:	andeq	r2, r1, r4, asr r2
   1220c:	andeq	r2, r1, r4, asr r2
   12210:	andeq	r2, r1, r4, asr r2
   12214:	andeq	r2, r1, r4, asr r2
   12218:	andeq	r2, r1, r4, asr r2
   1221c:	andeq	r2, r1, r4, asr r2
   12220:	andeq	r2, r1, r4, asr r2
   12224:	andeq	r2, r1, r4, asr r2
   12228:	andeq	r2, r1, r4, asr r2
   1222c:	andeq	r2, r1, r4, asr r2
   12230:	andeq	r2, r1, ip, asr #4
   12234:	andeq	r2, r1, r4, asr r2
   12238:	andeq	r2, r1, r8, asr r2
   1223c:	andeq	r2, r1, r4, asr r2
   12240:	andeq	r2, r1, r4, asr r2
   12244:	andeq	r2, r1, r4, asr r2
   12248:	andeq	r2, r1, ip, asr #4
   1224c:	mov	r0, #1
   12250:	str	r5, [r1]
   12254:	pop	{r4, r5, r6, sl, fp, pc}
   12258:	add	r0, r5, #1
   1225c:	str	r0, [ip]
   12260:	mov	r0, #0
   12264:	str	r5, [r1]
   12268:	str	r2, [r6, #16]
   1226c:	movw	r1, #710	; 0x2c6
   12270:	str	r0, [r6, #20]
   12274:	str	r0, [r6]
   12278:	str	r0, [r6, #4]
   1227c:	movw	r0, #59056	; 0xe6b0
   12280:	ldr	r5, [ip]
   12284:	movt	r0, #3
   12288:	str	r1, [r0]
   1228c:	mov	r0, r5
   12290:	bl	11390 <strlen@plt>
   12294:	mov	r1, r0
   12298:	mov	r0, r5
   1229c:	mov	r2, r6
   122a0:	bl	14ce0 <__assert_fail@plt+0x3830>
   122a4:	mov	r3, r0
   122a8:	mov	r0, #1
   122ac:	cmp	r3, #0
   122b0:	popeq	{r4, r5, r6, sl, fp, pc}
   122b4:	movw	r2, #51194	; 0xc7fa
   122b8:	mov	r0, #1
   122bc:	mov	r1, #0
   122c0:	movt	r2, #2
   122c4:	bl	1130c <error@plt>
   122c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122cc:	add	fp, sp, #28
   122d0:	sub	sp, sp, #20
   122d4:	movw	r1, #52580	; 0xcd64
   122d8:	mov	r7, r0
   122dc:	movt	r1, #2
   122e0:	bl	111f8 <strcmp@plt>
   122e4:	movw	r6, #58576	; 0xe4d0
   122e8:	cmp	r0, #0
   122ec:	movt	r6, #3
   122f0:	beq	1231c <__assert_fail@plt+0xe6c>
   122f4:	movw	r1, #51292	; 0xc85c
   122f8:	mov	r0, r7
   122fc:	movt	r1, #2
   12300:	bl	11474 <fopen64@plt>
   12304:	mov	r5, r0
   12308:	cmp	r0, #0
   1230c:	bne	12330 <__assert_fail@plt+0xe80>
   12310:	bl	113a8 <__errno_location@plt>
   12314:	ldr	r6, [r0]
   12318:	b	1274c <__assert_fail@plt+0x129c>
   1231c:	mov	r0, #1
   12320:	strb	r0, [r6]
   12324:	movw	r0, #57792	; 0xe1c0
   12328:	movt	r0, #3
   1232c:	ldr	r5, [r0]
   12330:	mov	r0, r5
   12334:	mov	r1, #2
   12338:	str	r7, [sp, #12]
   1233c:	bl	12904 <__assert_fail@plt+0x1454>
   12340:	add	r0, r6, #56	; 0x38
   12344:	mov	r1, r5
   12348:	str	r0, [sp, #16]
   1234c:	bl	12af4 <__assert_fail@plt+0x1644>
   12350:	cmp	r0, #0
   12354:	beq	126f8 <__assert_fail@plt+0x1248>
   12358:	movw	r8, #57640	; 0xe128
   1235c:	movt	r8, #3
   12360:	ldr	sl, [r6, #60]	; 0x3c
   12364:	sub	r7, sl, #1
   12368:	cmp	r7, #2
   1236c:	ldrcs	r9, [r6, #20]
   12370:	cmpcs	r9, #2
   12374:	bcs	124b8 <__assert_fail@plt+0x1008>
   12378:	ldr	r0, [r6, #32]
   1237c:	ldrb	r0, [r0]
   12380:	sub	r0, r0, #97	; 0x61
   12384:	cmp	r0, #19
   12388:	bhi	12640 <__assert_fail@plt+0x1190>
   1238c:	add	r1, pc, #0
   12390:	ldr	pc, [r1, r0, lsl #2]
   12394:	andeq	r2, r1, r4, ror #7
   12398:	andeq	r2, r1, r0, asr #12
   1239c:	andeq	r2, r1, r0, asr #12
   123a0:	andeq	r2, r1, r0, asr #12
   123a4:	andeq	r2, r1, r0, asr #12
   123a8:	andeq	r2, r1, r0, asr #12
   123ac:	andeq	r2, r1, r0, asr #12
   123b0:	andeq	r2, r1, r0, asr #12
   123b4:	andeq	r2, r1, r0, asr #12
   123b8:	andeq	r2, r1, r0, asr #12
   123bc:	andeq	r2, r1, r0, asr #12
   123c0:	andeq	r2, r1, r0, asr #12
   123c4:	andeq	r2, r1, r0, asr #12
   123c8:	andeq	r2, r1, ip, lsr #12
   123cc:	andeq	r2, r1, r0, asr #12
   123d0:	andeq	r2, r1, r0, ror #10
   123d4:	andeq	r2, r1, r0, asr #12
   123d8:	andeq	r2, r1, r0, asr #12
   123dc:	andeq	r2, r1, r0, asr #12
   123e0:	muleq	r1, r4, r5
   123e4:	ldrd	r0, [r8, #48]	; 0x30
   123e8:	subs	r2, r0, #2
   123ec:	sbcs	r2, r1, #0
   123f0:	blt	1259c <__assert_fail@plt+0x10ec>
   123f4:	cmp	sl, #1
   123f8:	bgt	1241c <__assert_fail@plt+0xf6c>
   123fc:	ldrd	r2, [r6, #48]	; 0x30
   12400:	adds	r2, r2, #1
   12404:	adc	r3, r3, #0
   12408:	eor	r0, r2, r0
   1240c:	eor	r1, r3, r1
   12410:	strd	r2, [r6, #48]	; 0x30
   12414:	orrs	r0, r0, r1
   12418:	bne	1262c <__assert_fail@plt+0x117c>
   1241c:	ldrb	r0, [r6, #2]
   12420:	cmp	r0, #1
   12424:	beq	127a4 <__assert_fail@plt+0x12f4>
   12428:	ldr	r0, [r6, #40]	; 0x28
   1242c:	ldr	r2, [r8, #16]
   12430:	ldr	r1, [r8, #20]
   12434:	ldr	r3, [r6, #44]	; 0x2c
   12438:	ldr	r7, [r8, #12]
   1243c:	stm	sp, {r0, r3, r7}
   12440:	mov	r0, #1
   12444:	bl	113e4 <__printf_chk@plt>
   12448:	ldrd	r0, [r8, #40]	; 0x28
   1244c:	ldrd	r2, [r6, #40]	; 0x28
   12450:	adds	r0, r2, r0
   12454:	mov	r2, #0
   12458:	adc	r7, r3, r1
   1245c:	cmn	r3, #1
   12460:	str	r0, [r6, #40]	; 0x28
   12464:	mov	r0, #0
   12468:	movwgt	r0, #1
   1246c:	cmn	r7, #1
   12470:	str	r7, [r6, #44]	; 0x2c
   12474:	movwgt	r2, #1
   12478:	subs	r2, r0, r2
   1247c:	movwne	r2, #1
   12480:	cmn	r1, #1
   12484:	mov	r1, #0
   12488:	movwgt	r1, #1
   1248c:	sub	r0, r0, r1
   12490:	clz	r0, r0
   12494:	lsr	r0, r0, #5
   12498:	and	r0, r0, r2
   1249c:	cmp	r0, #1
   124a0:	moveq	r0, #1
   124a4:	strbeq	r0, [r6, #2]
   124a8:	mov	r0, #0
   124ac:	str	r0, [r6, #48]	; 0x30
   124b0:	str	r0, [r6, #52]	; 0x34
   124b4:	b	12640 <__assert_fail@plt+0x1190>
   124b8:	ldr	r4, [r6, #64]	; 0x40
   124bc:	ldr	r1, [r8, #24]
   124c0:	mov	r2, #2
   124c4:	mov	r0, r4
   124c8:	bl	11384 <bcmp@plt>
   124cc:	cmp	r0, #0
   124d0:	bne	12378 <__assert_fail@plt+0xec8>
   124d4:	ldr	r0, [r6, #4]
   124d8:	cmp	r7, r0
   124dc:	bne	124f8 <__assert_fail@plt+0x1048>
   124e0:	ldr	r1, [r6, #8]
   124e4:	mov	r0, r4
   124e8:	mov	r2, r7
   124ec:	bl	11384 <bcmp@plt>
   124f0:	cmp	r0, #0
   124f4:	beq	12674 <__assert_fail@plt+0x11c4>
   124f8:	ldr	r0, [r6, #12]
   124fc:	cmp	r7, r0
   12500:	bne	1251c <__assert_fail@plt+0x106c>
   12504:	ldr	r1, [r6, #16]
   12508:	mov	r0, r4
   1250c:	mov	r2, r7
   12510:	bl	11384 <bcmp@plt>
   12514:	cmp	r0, #0
   12518:	beq	126cc <__assert_fail@plt+0x121c>
   1251c:	cmp	r7, r9
   12520:	bne	12378 <__assert_fail@plt+0xec8>
   12524:	ldr	r1, [r6, #24]
   12528:	mov	r0, r4
   1252c:	mov	r2, r7
   12530:	bl	11384 <bcmp@plt>
   12534:	cmp	r0, #0
   12538:	bne	12378 <__assert_fail@plt+0xec8>
   1253c:	movw	r0, #58676	; 0xe534
   12540:	movt	r0, #3
   12544:	add	r1, r0, #32
   12548:	ldr	r0, [r8, #8]
   1254c:	strd	r0, [r6, #32]
   12550:	ldrb	r0, [r6, #1]
   12554:	cmp	r0, #0
   12558:	beq	1268c <__assert_fail@plt+0x11dc>
   1255c:	b	1269c <__assert_fail@plt+0x11ec>
   12560:	ldr	r0, [r6, #36]	; 0x24
   12564:	ldr	r1, [r6, #64]	; 0x40
   12568:	mov	r2, #0
   1256c:	mov	r3, #0
   12570:	str	r7, [sp]
   12574:	str	r2, [sp, #4]
   12578:	mov	r2, r7
   1257c:	bl	1a514 <__assert_fail@plt+0x9064>
   12580:	cmn	r0, #1
   12584:	beq	1262c <__assert_fail@plt+0x117c>
   12588:	cmn	r0, #2
   1258c:	bne	1259c <__assert_fail@plt+0x10ec>
   12590:	b	127c8 <__assert_fail@plt+0x1318>
   12594:	cmp	sl, #2
   12598:	blt	1262c <__assert_fail@plt+0x117c>
   1259c:	ldrb	r0, [r6, #2]
   125a0:	cmp	r0, #1
   125a4:	beq	127a4 <__assert_fail@plt+0x12f4>
   125a8:	ldr	r0, [r6, #40]	; 0x28
   125ac:	ldr	r2, [r8, #16]
   125b0:	ldr	r1, [r8, #20]
   125b4:	ldr	r3, [r6, #44]	; 0x2c
   125b8:	ldr	r7, [r8, #12]
   125bc:	stm	sp, {r0, r3, r7}
   125c0:	mov	r0, #1
   125c4:	bl	113e4 <__printf_chk@plt>
   125c8:	ldrd	r0, [r8, #40]	; 0x28
   125cc:	ldrd	r2, [r6, #40]	; 0x28
   125d0:	adds	r0, r2, r0
   125d4:	mov	r2, #0
   125d8:	adc	r7, r3, r1
   125dc:	cmn	r3, #1
   125e0:	str	r0, [r6, #40]	; 0x28
   125e4:	mov	r0, #0
   125e8:	movwgt	r0, #1
   125ec:	cmn	r7, #1
   125f0:	str	r7, [r6, #44]	; 0x2c
   125f4:	movwgt	r2, #1
   125f8:	subs	r2, r0, r2
   125fc:	movwne	r2, #1
   12600:	cmn	r1, #1
   12604:	mov	r1, #0
   12608:	movwgt	r1, #1
   1260c:	sub	r0, r0, r1
   12610:	clz	r0, r0
   12614:	lsr	r0, r0, #5
   12618:	and	r0, r0, r2
   1261c:	cmp	r0, #1
   12620:	moveq	r0, #1
   12624:	strbeq	r0, [r6, #2]
   12628:	b	12640 <__assert_fail@plt+0x1190>
   1262c:	movw	r0, #57796	; 0xe1c4
   12630:	movt	r0, #3
   12634:	ldr	r1, [r0]
   12638:	ldr	r0, [r6, #28]
   1263c:	bl	111bc <fputs_unlocked@plt>
   12640:	movw	r0, #57796	; 0xe1c4
   12644:	ldr	r2, [r6, #60]	; 0x3c
   12648:	mov	r1, #1
   1264c:	movt	r0, #3
   12650:	ldr	r3, [r0]
   12654:	ldr	r0, [r6, #64]	; 0x40
   12658:	bl	11288 <fwrite_unlocked@plt>
   1265c:	ldr	r0, [sp, #16]
   12660:	mov	r1, r5
   12664:	bl	12af4 <__assert_fail@plt+0x1644>
   12668:	cmp	r0, #0
   1266c:	bne	12360 <__assert_fail@plt+0xeb0>
   12670:	b	126f8 <__assert_fail@plt+0x1248>
   12674:	ldr	r0, [r8]
   12678:	add	r1, r6, #68	; 0x44
   1267c:	strd	r0, [r6, #32]
   12680:	ldrb	r0, [r6, #1]
   12684:	cmp	r0, #0
   12688:	bne	1269c <__assert_fail@plt+0x11ec>
   1268c:	mov	r0, #0
   12690:	strb	r0, [r6, #2]
   12694:	ldrd	r0, [r8, #32]
   12698:	strd	r0, [r6, #40]	; 0x28
   1269c:	movw	r0, #57796	; 0xe1c4
   126a0:	movt	r0, #3
   126a4:	ldr	r0, [r0]
   126a8:	ldr	r1, [r0, #20]
   126ac:	ldr	r2, [r0, #24]
   126b0:	cmp	r1, r2
   126b4:	bcs	126ec <__assert_fail@plt+0x123c>
   126b8:	add	r2, r1, #1
   126bc:	str	r2, [r0, #20]
   126c0:	mov	r0, #10
   126c4:	strb	r0, [r1]
   126c8:	b	1265c <__assert_fail@plt+0x11ac>
   126cc:	ldr	r0, [r8, #4]
   126d0:	movw	r1, #58676	; 0xe534
   126d4:	movt	r1, #3
   126d8:	strd	r0, [r6, #32]
   126dc:	ldrb	r0, [r6, #1]
   126e0:	cmp	r0, #0
   126e4:	beq	1268c <__assert_fail@plt+0x11dc>
   126e8:	b	1269c <__assert_fail@plt+0x11ec>
   126ec:	mov	r1, #10
   126f0:	bl	1142c <__overflow@plt>
   126f4:	b	1265c <__assert_fail@plt+0x11ac>
   126f8:	bl	113a8 <__errno_location@plt>
   126fc:	ldr	r1, [r5]
   12700:	mov	r4, r0
   12704:	ldr	r0, [r0]
   12708:	ldr	r7, [sp, #12]
   1270c:	lsl	r1, r1, #26
   12710:	and	r6, r0, r1, asr #31
   12714:	movw	r1, #52580	; 0xcd64
   12718:	mov	r0, r7
   1271c:	movt	r1, #2
   12720:	bl	111f8 <strcmp@plt>
   12724:	cmp	r0, #0
   12728:	beq	12784 <__assert_fail@plt+0x12d4>
   1272c:	mov	r0, r5
   12730:	bl	12940 <__assert_fail@plt+0x1490>
   12734:	cmp	r6, #0
   12738:	bne	12744 <__assert_fail@plt+0x1294>
   1273c:	cmp	r0, #0
   12740:	ldrne	r6, [r4]
   12744:	cmp	r6, #0
   12748:	beq	12794 <__assert_fail@plt+0x12e4>
   1274c:	mov	r0, #0
   12750:	mov	r1, #3
   12754:	mov	r2, r7
   12758:	mov	r4, #0
   1275c:	bl	14a18 <__assert_fail@plt+0x3568>
   12760:	movw	r2, #51194	; 0xc7fa
   12764:	mov	r3, r0
   12768:	mov	r0, #0
   1276c:	mov	r1, r6
   12770:	movt	r2, #2
   12774:	bl	1130c <error@plt>
   12778:	mov	r0, r4
   1277c:	sub	sp, fp, #28
   12780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12784:	mov	r0, r5
   12788:	bl	1145c <clearerr_unlocked@plt>
   1278c:	cmp	r6, #0
   12790:	bne	1274c <__assert_fail@plt+0x129c>
   12794:	mov	r4, #1
   12798:	mov	r0, r4
   1279c:	sub	sp, fp, #28
   127a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a4:	movw	r1, #52146	; 0xcbb2
   127a8:	mov	r0, #0
   127ac:	mov	r2, #5
   127b0:	movt	r1, #2
   127b4:	bl	112a0 <dcgettext@plt>
   127b8:	mov	r2, r0
   127bc:	mov	r0, #1
   127c0:	mov	r1, #0
   127c4:	bl	1130c <error@plt>
   127c8:	bl	113a8 <__errno_location@plt>
   127cc:	movw	r1, #52111	; 0xcb8f
   127d0:	ldr	r4, [r0]
   127d4:	mov	r0, #0
   127d8:	mov	r2, #5
   127dc:	movt	r1, #2
   127e0:	bl	112a0 <dcgettext@plt>
   127e4:	mov	r2, r0
   127e8:	mov	r0, #1
   127ec:	mov	r1, r4
   127f0:	bl	1130c <error@plt>
   127f4:	movw	r1, #58740	; 0xe574
   127f8:	movt	r1, #3
   127fc:	str	r0, [r1, #4]
   12800:	bx	lr
   12804:	movw	r1, #58740	; 0xe574
   12808:	movt	r1, #3
   1280c:	strb	r0, [r1]
   12810:	bx	lr
   12814:	push	{r4, r5, r6, sl, fp, lr}
   12818:	add	fp, sp, #16
   1281c:	sub	sp, sp, #8
   12820:	movw	r0, #57796	; 0xe1c4
   12824:	movt	r0, #3
   12828:	ldr	r0, [r0]
   1282c:	bl	2bae0 <__assert_fail@plt+0x1a630>
   12830:	cmp	r0, #0
   12834:	beq	1285c <__assert_fail@plt+0x13ac>
   12838:	movw	r5, #58740	; 0xe574
   1283c:	movt	r5, #3
   12840:	ldrb	r0, [r5]
   12844:	cmp	r0, #0
   12848:	beq	12888 <__assert_fail@plt+0x13d8>
   1284c:	bl	113a8 <__errno_location@plt>
   12850:	ldr	r0, [r0]
   12854:	cmp	r0, #32
   12858:	bne	12888 <__assert_fail@plt+0x13d8>
   1285c:	movw	r0, #57784	; 0xe1b8
   12860:	movt	r0, #3
   12864:	ldr	r0, [r0]
   12868:	bl	2bae0 <__assert_fail@plt+0x1a630>
   1286c:	cmp	r0, #0
   12870:	subeq	sp, fp, #16
   12874:	popeq	{r4, r5, r6, sl, fp, pc}
   12878:	movw	r0, #57700	; 0xe164
   1287c:	movt	r0, #3
   12880:	ldr	r0, [r0]
   12884:	bl	1124c <_exit@plt>
   12888:	movw	r1, #52495	; 0xcd0f
   1288c:	mov	r0, #0
   12890:	mov	r2, #5
   12894:	movt	r1, #2
   12898:	bl	112a0 <dcgettext@plt>
   1289c:	ldr	r6, [r5, #4]
   128a0:	mov	r4, r0
   128a4:	bl	113a8 <__errno_location@plt>
   128a8:	ldr	r5, [r0]
   128ac:	cmp	r6, #0
   128b0:	bne	128cc <__assert_fail@plt+0x141c>
   128b4:	movw	r2, #51194	; 0xc7fa
   128b8:	mov	r0, #0
   128bc:	mov	r1, r5
   128c0:	mov	r3, r4
   128c4:	movt	r2, #2
   128c8:	b	128ec <__assert_fail@plt+0x143c>
   128cc:	mov	r0, r6
   128d0:	bl	1493c <__assert_fail@plt+0x348c>
   128d4:	movw	r2, #52507	; 0xcd1b
   128d8:	mov	r3, r0
   128dc:	str	r4, [sp]
   128e0:	mov	r0, #0
   128e4:	mov	r1, r5
   128e8:	movt	r2, #2
   128ec:	bl	1130c <error@plt>
   128f0:	movw	r0, #57700	; 0xe164
   128f4:	movt	r0, #3
   128f8:	ldr	r0, [r0]
   128fc:	bl	1124c <_exit@plt>
   12900:	b	11204 <posix_fadvise64@plt>
   12904:	cmp	r0, #0
   12908:	bxeq	lr
   1290c:	push	{r4, sl, fp, lr}
   12910:	add	fp, sp, #8
   12914:	sub	sp, sp, #16
   12918:	mov	r4, r1
   1291c:	bl	113f0 <fileno@plt>
   12920:	mov	r1, #0
   12924:	mov	r2, #0
   12928:	mov	r3, #0
   1292c:	str	r1, [sp]
   12930:	stmib	sp, {r1, r4}
   12934:	bl	11204 <posix_fadvise64@plt>
   12938:	sub	sp, fp, #8
   1293c:	pop	{r4, sl, fp, pc}
   12940:	push	{r4, r5, r6, sl, fp, lr}
   12944:	add	fp, sp, #16
   12948:	sub	sp, sp, #8
   1294c:	mov	r4, r0
   12950:	bl	113f0 <fileno@plt>
   12954:	cmn	r0, #1
   12958:	ble	129cc <__assert_fail@plt+0x151c>
   1295c:	mov	r0, r4
   12960:	bl	11330 <__freading@plt>
   12964:	cmp	r0, #0
   12968:	beq	12994 <__assert_fail@plt+0x14e4>
   1296c:	mov	r0, r4
   12970:	bl	113f0 <fileno@plt>
   12974:	mov	r1, #1
   12978:	mov	r2, #0
   1297c:	mov	r3, #0
   12980:	str	r1, [sp]
   12984:	bl	112dc <lseek64@plt>
   12988:	and	r0, r0, r1
   1298c:	cmn	r0, #1
   12990:	beq	129cc <__assert_fail@plt+0x151c>
   12994:	mov	r0, r4
   12998:	bl	129dc <__assert_fail@plt+0x152c>
   1299c:	cmp	r0, #0
   129a0:	beq	129cc <__assert_fail@plt+0x151c>
   129a4:	bl	113a8 <__errno_location@plt>
   129a8:	ldr	r6, [r0]
   129ac:	mov	r5, r0
   129b0:	mov	r0, r4
   129b4:	bl	11408 <fclose@plt>
   129b8:	cmp	r6, #0
   129bc:	strne	r6, [r5]
   129c0:	mvnne	r0, #0
   129c4:	sub	sp, fp, #16
   129c8:	pop	{r4, r5, r6, sl, fp, pc}
   129cc:	mov	r0, r4
   129d0:	sub	sp, fp, #16
   129d4:	pop	{r4, r5, r6, sl, fp, lr}
   129d8:	b	11408 <fclose@plt>
   129dc:	push	{r4, sl, fp, lr}
   129e0:	add	fp, sp, #8
   129e4:	sub	sp, sp, #8
   129e8:	mov	r4, r0
   129ec:	cmp	r0, #0
   129f0:	beq	12a28 <__assert_fail@plt+0x1578>
   129f4:	mov	r0, r4
   129f8:	bl	11330 <__freading@plt>
   129fc:	cmp	r0, #0
   12a00:	beq	12a28 <__assert_fail@plt+0x1578>
   12a04:	ldrb	r0, [r4, #1]
   12a08:	tst	r0, #1
   12a0c:	beq	12a28 <__assert_fail@plt+0x1578>
   12a10:	mov	r0, #1
   12a14:	mov	r2, #0
   12a18:	mov	r3, #0
   12a1c:	str	r0, [sp]
   12a20:	mov	r0, r4
   12a24:	bl	12a38 <__assert_fail@plt+0x1588>
   12a28:	mov	r0, r4
   12a2c:	sub	sp, fp, #8
   12a30:	pop	{r4, sl, fp, lr}
   12a34:	b	1121c <fflush@plt>
   12a38:	push	{r4, r5, r6, r7, fp, lr}
   12a3c:	add	fp, sp, #16
   12a40:	sub	sp, sp, #8
   12a44:	mov	r4, r0
   12a48:	ldr	r0, [r0, #4]
   12a4c:	mov	r5, r3
   12a50:	mov	r6, r2
   12a54:	ldr	r1, [r4, #8]
   12a58:	cmp	r1, r0
   12a5c:	bne	12a78 <__assert_fail@plt+0x15c8>
   12a60:	ldrd	r0, [r4, #16]
   12a64:	cmp	r1, r0
   12a68:	bne	12a78 <__assert_fail@plt+0x15c8>
   12a6c:	ldr	r0, [r4, #36]	; 0x24
   12a70:	cmp	r0, #0
   12a74:	beq	12a90 <__assert_fail@plt+0x15e0>
   12a78:	mov	r0, r4
   12a7c:	mov	r2, r6
   12a80:	mov	r3, r5
   12a84:	sub	sp, fp, #16
   12a88:	pop	{r4, r5, r6, r7, fp, lr}
   12a8c:	b	11414 <fseeko64@plt>
   12a90:	ldr	r7, [fp, #8]
   12a94:	mov	r0, r4
   12a98:	bl	113f0 <fileno@plt>
   12a9c:	mov	r2, r6
   12aa0:	mov	r3, r5
   12aa4:	str	r7, [sp]
   12aa8:	bl	112dc <lseek64@plt>
   12aac:	and	r2, r0, r1
   12ab0:	cmn	r2, #1
   12ab4:	beq	12ad4 <__assert_fail@plt+0x1624>
   12ab8:	strd	r0, [r4, #80]	; 0x50
   12abc:	ldr	r0, [r4]
   12ac0:	bic	r0, r0, #16
   12ac4:	str	r0, [r4]
   12ac8:	mov	r0, #0
   12acc:	sub	sp, fp, #16
   12ad0:	pop	{r4, r5, r6, r7, fp, pc}
   12ad4:	mvn	r0, #0
   12ad8:	sub	sp, fp, #16
   12adc:	pop	{r4, r5, r6, r7, fp, pc}
   12ae0:	mov	r1, #0
   12ae4:	str	r1, [r0]
   12ae8:	str	r1, [r0, #4]
   12aec:	str	r1, [r0, #8]
   12af0:	bx	lr
   12af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af8:	add	fp, sp, #28
   12afc:	sub	sp, sp, #4
   12b00:	mov	r9, r0
   12b04:	ldrb	r0, [r1]
   12b08:	tst	r0, #16
   12b0c:	bne	12be4 <__assert_fail@plt+0x1734>
   12b10:	ldr	r4, [r9, #8]
   12b14:	ldr	r0, [r9]
   12b18:	mov	r5, r1
   12b1c:	mov	r8, #1
   12b20:	add	sl, r4, r0
   12b24:	mov	r6, r4
   12b28:	ldmib	r5, {r0, r1}
   12b2c:	cmp	r0, r1
   12b30:	bcc	12b50 <__assert_fail@plt+0x16a0>
   12b34:	b	12b98 <__assert_fail@plt+0x16e8>
   12b38:	strb	r7, [r6], #1
   12b3c:	cmp	r7, #10
   12b40:	beq	12bd0 <__assert_fail@plt+0x1720>
   12b44:	ldmib	r5, {r0, r1}
   12b48:	cmp	r0, r1
   12b4c:	bcs	12b98 <__assert_fail@plt+0x16e8>
   12b50:	add	r1, r0, #1
   12b54:	str	r1, [r5, #4]
   12b58:	ldrb	r7, [r0]
   12b5c:	cmp	r6, sl
   12b60:	bne	12b38 <__assert_fail@plt+0x1688>
   12b64:	ldr	r6, [r9]
   12b68:	mov	r0, r4
   12b6c:	mov	r1, r9
   12b70:	mov	r2, #1
   12b74:	mvn	r3, #0
   12b78:	str	r8, [sp]
   12b7c:	bl	29c48 <__assert_fail@plt+0x18798>
   12b80:	str	r0, [r9, #8]
   12b84:	mov	r4, r0
   12b88:	add	r6, r0, r6
   12b8c:	ldr	r0, [r9]
   12b90:	add	sl, r4, r0
   12b94:	b	12b38 <__assert_fail@plt+0x1688>
   12b98:	mov	r0, r5
   12b9c:	bl	11420 <__uflow@plt>
   12ba0:	mov	r7, r0
   12ba4:	cmn	r0, #1
   12ba8:	bne	12b5c <__assert_fail@plt+0x16ac>
   12bac:	cmp	r6, r4
   12bb0:	beq	12be4 <__assert_fail@plt+0x1734>
   12bb4:	ldrb	r0, [r5]
   12bb8:	tst	r0, #32
   12bbc:	bne	12be4 <__assert_fail@plt+0x1734>
   12bc0:	ldrb	r0, [r6, #-1]
   12bc4:	mov	r7, #10
   12bc8:	cmp	r0, #10
   12bcc:	bne	12b5c <__assert_fail@plt+0x16ac>
   12bd0:	sub	r0, r6, r4
   12bd4:	str	r0, [r9, #4]
   12bd8:	mov	r0, r9
   12bdc:	sub	sp, fp, #28
   12be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be4:	mov	r9, #0
   12be8:	mov	r0, r9
   12bec:	sub	sp, fp, #28
   12bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bf8:	add	fp, sp, #28
   12bfc:	sub	sp, sp, #4
   12c00:	mov	sl, r0
   12c04:	ldrb	r0, [r1]
   12c08:	tst	r0, #16
   12c0c:	bne	12ce8 <__assert_fail@plt+0x1838>
   12c10:	ldr	r4, [sl, #8]
   12c14:	ldr	r0, [sl]
   12c18:	mov	r8, r2
   12c1c:	mov	r6, r1
   12c20:	add	r9, r4, r0
   12c24:	mov	r7, r4
   12c28:	ldmib	r6, {r0, r1}
   12c2c:	cmp	r0, r1
   12c30:	bcc	12c50 <__assert_fail@plt+0x17a0>
   12c34:	b	12c9c <__assert_fail@plt+0x17ec>
   12c38:	strb	r5, [r7], #1
   12c3c:	cmp	r5, r8
   12c40:	beq	12cd4 <__assert_fail@plt+0x1824>
   12c44:	ldmib	r6, {r0, r1}
   12c48:	cmp	r0, r1
   12c4c:	bcs	12c9c <__assert_fail@plt+0x17ec>
   12c50:	add	r1, r0, #1
   12c54:	str	r1, [r6, #4]
   12c58:	ldrb	r5, [r0]
   12c5c:	cmp	r7, r9
   12c60:	bne	12c38 <__assert_fail@plt+0x1788>
   12c64:	ldr	r7, [sl]
   12c68:	mov	r0, #1
   12c6c:	mov	r1, sl
   12c70:	mov	r2, #1
   12c74:	mvn	r3, #0
   12c78:	str	r0, [sp]
   12c7c:	mov	r0, r4
   12c80:	bl	29c48 <__assert_fail@plt+0x18798>
   12c84:	str	r0, [sl, #8]
   12c88:	mov	r4, r0
   12c8c:	add	r7, r0, r7
   12c90:	ldr	r0, [sl]
   12c94:	add	r9, r4, r0
   12c98:	b	12c38 <__assert_fail@plt+0x1788>
   12c9c:	mov	r0, r6
   12ca0:	bl	11420 <__uflow@plt>
   12ca4:	mov	r5, r0
   12ca8:	cmn	r0, #1
   12cac:	bne	12c5c <__assert_fail@plt+0x17ac>
   12cb0:	cmp	r7, r4
   12cb4:	beq	12ce8 <__assert_fail@plt+0x1838>
   12cb8:	ldrb	r0, [r6]
   12cbc:	tst	r0, #32
   12cc0:	bne	12ce8 <__assert_fail@plt+0x1838>
   12cc4:	ldrb	r0, [r7, #-1]
   12cc8:	mov	r5, r8
   12ccc:	cmp	r0, r8
   12cd0:	bne	12c5c <__assert_fail@plt+0x17ac>
   12cd4:	sub	r0, r7, r4
   12cd8:	str	r0, [sl, #4]
   12cdc:	mov	r0, sl
   12ce0:	sub	sp, fp, #28
   12ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce8:	mov	sl, #0
   12cec:	mov	r0, sl
   12cf0:	sub	sp, fp, #28
   12cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf8:	ldr	r0, [r0, #8]
   12cfc:	b	2bc28 <__assert_fail@plt+0x1a778>
   12d00:	push	{r4, r5, fp, lr}
   12d04:	add	fp, sp, #8
   12d08:	cmp	r0, #0
   12d0c:	beq	12da0 <__assert_fail@plt+0x18f0>
   12d10:	mov	r1, #47	; 0x2f
   12d14:	mov	r4, r0
   12d18:	bl	11444 <strrchr@plt>
   12d1c:	cmp	r0, #0
   12d20:	mov	r5, r4
   12d24:	addne	r5, r0, #1
   12d28:	sub	r0, r5, r4
   12d2c:	cmp	r0, #7
   12d30:	blt	12d84 <__assert_fail@plt+0x18d4>
   12d34:	movw	r1, #52570	; 0xcd5a
   12d38:	sub	r0, r5, #7
   12d3c:	mov	r2, #7
   12d40:	movt	r1, #2
   12d44:	bl	11498 <strncmp@plt>
   12d48:	cmp	r0, #0
   12d4c:	bne	12d84 <__assert_fail@plt+0x18d4>
   12d50:	movw	r1, #52578	; 0xcd62
   12d54:	mov	r0, r5
   12d58:	mov	r2, #3
   12d5c:	movt	r1, #2
   12d60:	bl	11498 <strncmp@plt>
   12d64:	cmp	r0, #0
   12d68:	beq	12d74 <__assert_fail@plt+0x18c4>
   12d6c:	mov	r4, r5
   12d70:	b	12d84 <__assert_fail@plt+0x18d4>
   12d74:	movw	r0, #57768	; 0xe1a8
   12d78:	add	r4, r5, #3
   12d7c:	movt	r0, #3
   12d80:	str	r4, [r0]
   12d84:	movw	r0, #57772	; 0xe1ac
   12d88:	movt	r0, #3
   12d8c:	str	r4, [r0]
   12d90:	movw	r0, #58748	; 0xe57c
   12d94:	movt	r0, #3
   12d98:	str	r4, [r0]
   12d9c:	pop	{r4, r5, fp, pc}
   12da0:	movw	r0, #57784	; 0xe1b8
   12da4:	mov	r1, #55	; 0x37
   12da8:	mov	r2, #1
   12dac:	movt	r0, #3
   12db0:	ldr	r3, [r0]
   12db4:	movw	r0, #52514	; 0xcd22
   12db8:	movt	r0, #2
   12dbc:	bl	112d0 <fwrite@plt>
   12dc0:	bl	114a4 <abort@plt>
   12dc4:	push	{r4, r5, r6, sl, fp, lr}
   12dc8:	add	fp, sp, #16
   12dcc:	mov	r4, r0
   12dd0:	movw	r0, #58752	; 0xe580
   12dd4:	movt	r0, #3
   12dd8:	cmp	r4, #0
   12ddc:	moveq	r4, r0
   12de0:	bl	113a8 <__errno_location@plt>
   12de4:	ldr	r6, [r0]
   12de8:	mov	r5, r0
   12dec:	mov	r0, r4
   12df0:	mov	r1, #48	; 0x30
   12df4:	bl	29e78 <__assert_fail@plt+0x189c8>
   12df8:	str	r6, [r5]
   12dfc:	pop	{r4, r5, r6, sl, fp, pc}
   12e00:	movw	r1, #58752	; 0xe580
   12e04:	cmp	r0, #0
   12e08:	movt	r1, #3
   12e0c:	movne	r1, r0
   12e10:	ldr	r0, [r1]
   12e14:	bx	lr
   12e18:	movw	r2, #58752	; 0xe580
   12e1c:	cmp	r0, #0
   12e20:	movt	r2, #3
   12e24:	movne	r2, r0
   12e28:	str	r1, [r2]
   12e2c:	bx	lr
   12e30:	movw	r3, #58752	; 0xe580
   12e34:	cmp	r0, #0
   12e38:	and	r2, r2, #1
   12e3c:	movt	r3, #3
   12e40:	movne	r3, r0
   12e44:	ubfx	r0, r1, #5, #3
   12e48:	and	r1, r1, #31
   12e4c:	add	ip, r3, r0, lsl #2
   12e50:	mov	r0, #1
   12e54:	ldr	r3, [ip, #8]
   12e58:	and	r0, r0, r3, lsr r1
   12e5c:	eor	r2, r0, r2
   12e60:	eor	r1, r3, r2, lsl r1
   12e64:	str	r1, [ip, #8]
   12e68:	bx	lr
   12e6c:	movw	r2, #58752	; 0xe580
   12e70:	cmp	r0, #0
   12e74:	movt	r2, #3
   12e78:	movne	r2, r0
   12e7c:	ldr	r0, [r2, #4]
   12e80:	str	r1, [r2, #4]
   12e84:	bx	lr
   12e88:	push	{fp, lr}
   12e8c:	mov	fp, sp
   12e90:	movw	r3, #58752	; 0xe580
   12e94:	cmp	r0, #0
   12e98:	movt	r3, #3
   12e9c:	movne	r3, r0
   12ea0:	cmp	r1, #0
   12ea4:	mov	r0, #10
   12ea8:	cmpne	r2, #0
   12eac:	str	r0, [r3]
   12eb0:	bne	12eb8 <__assert_fail@plt+0x1a08>
   12eb4:	bl	114a4 <abort@plt>
   12eb8:	str	r1, [r3, #40]	; 0x28
   12ebc:	str	r2, [r3, #44]	; 0x2c
   12ec0:	pop	{fp, pc}
   12ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec8:	add	fp, sp, #28
   12ecc:	sub	sp, sp, #20
   12ed0:	mov	r7, r0
   12ed4:	ldr	r0, [fp, #8]
   12ed8:	movw	r5, #58752	; 0xe580
   12edc:	mov	r8, r3
   12ee0:	mov	r9, r2
   12ee4:	mov	sl, r1
   12ee8:	movt	r5, #3
   12eec:	cmp	r0, #0
   12ef0:	movne	r5, r0
   12ef4:	bl	113a8 <__errno_location@plt>
   12ef8:	ldr	r2, [r5, #40]	; 0x28
   12efc:	ldr	r3, [r5, #44]	; 0x2c
   12f00:	mov	r4, r0
   12f04:	ldm	r5, {r0, r1}
   12f08:	add	r5, r5, #8
   12f0c:	ldr	r6, [r4]
   12f10:	stm	sp, {r0, r1, r5}
   12f14:	mov	r0, r7
   12f18:	mov	r1, sl
   12f1c:	str	r2, [sp, #12]
   12f20:	str	r3, [sp, #16]
   12f24:	mov	r2, r9
   12f28:	mov	r3, r8
   12f2c:	bl	12f3c <__assert_fail@plt+0x1a8c>
   12f30:	str	r6, [r4]
   12f34:	sub	sp, fp, #28
   12f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f40:	add	fp, sp, #28
   12f44:	sub	sp, sp, #156	; 0x9c
   12f48:	str	r0, [fp, #-84]	; 0xffffffac
   12f4c:	add	r0, r2, #1
   12f50:	mov	r6, r1
   12f54:	mov	r7, r3
   12f58:	str	r2, [fp, #-80]	; 0xffffffb0
   12f5c:	str	r0, [sp, #80]	; 0x50
   12f60:	ldr	r0, [fp, #12]
   12f64:	and	r1, r0, #1
   12f68:	str	r1, [sp, #36]	; 0x24
   12f6c:	and	r1, r0, #4
   12f70:	str	r1, [sp, #32]
   12f74:	ubfx	r8, r0, #1, #1
   12f78:	bl	112e8 <__ctype_get_mb_cur_max@plt>
   12f7c:	str	r0, [sp, #40]	; 0x28
   12f80:	ldr	r0, [fp, #24]
   12f84:	ldr	r4, [fp, #8]
   12f88:	mov	r1, #0
   12f8c:	str	r1, [fp, #-52]	; 0xffffffcc
   12f90:	mov	r1, #0
   12f94:	str	r1, [sp, #60]	; 0x3c
   12f98:	mov	r1, #1
   12f9c:	str	r1, [sp, #84]	; 0x54
   12fa0:	str	r0, [sp, #76]	; 0x4c
   12fa4:	ldr	r0, [fp, #20]
   12fa8:	str	r0, [sp, #72]	; 0x48
   12fac:	mov	r0, #0
   12fb0:	str	r0, [sp, #56]	; 0x38
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [fp, #-88]	; 0xffffffa8
   12fbc:	mov	r0, #0
   12fc0:	str	r0, [fp, #-72]	; 0xffffffb8
   12fc4:	mov	r0, #0
   12fc8:	cmp	r4, #10
   12fcc:	bhi	142e8 <__assert_fail@plt+0x2e38>
   12fd0:	add	r1, pc, #24
   12fd4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fd8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12fdc:	mov	r5, r6
   12fe0:	mov	r9, #0
   12fe4:	mov	r2, #1
   12fe8:	mov	r3, #0
   12fec:	ldr	pc, [r1, r4, lsl #2]
   12ff0:	strheq	r3, [r1], -r8
   12ff4:	strdeq	r3, [r1], -r4
   12ff8:	andeq	r3, r1, r8, asr #1
   12ffc:	strheq	r3, [r1], -r0
   13000:	andeq	r3, r1, r8, ror #1
   13004:	andeq	r3, r1, ip, asr #2
   13008:	ldrdeq	r3, [r1], -r8
   1300c:	andeq	r3, r1, r4, asr #7
   13010:	andeq	r3, r1, ip, lsl r0
   13014:	andeq	r3, r1, ip, lsl r0
   13018:	andeq	r3, r1, r4, asr r2
   1301c:	movw	r6, #52660	; 0xcdb4
   13020:	mov	r0, #0
   13024:	mov	r2, #5
   13028:	movt	r6, #2
   1302c:	mov	r1, r6
   13030:	bl	112a0 <dcgettext@plt>
   13034:	cmp	r0, r6
   13038:	str	r0, [sp, #72]	; 0x48
   1303c:	bne	1322c <__assert_fail@plt+0x1d7c>
   13040:	bl	2bc50 <__assert_fail@plt+0x1a7a0>
   13044:	ldrb	r1, [r0]
   13048:	and	r1, r1, #223	; 0xdf
   1304c:	cmp	r1, #71	; 0x47
   13050:	beq	131ac <__assert_fail@plt+0x1cfc>
   13054:	cmp	r1, #85	; 0x55
   13058:	bne	13210 <__assert_fail@plt+0x1d60>
   1305c:	ldrb	r1, [r0, #1]
   13060:	and	r1, r1, #223	; 0xdf
   13064:	cmp	r1, #84	; 0x54
   13068:	bne	13210 <__assert_fail@plt+0x1d60>
   1306c:	ldrb	r1, [r0, #2]
   13070:	and	r1, r1, #223	; 0xdf
   13074:	cmp	r1, #70	; 0x46
   13078:	bne	13210 <__assert_fail@plt+0x1d60>
   1307c:	ldrb	r1, [r0, #3]
   13080:	cmp	r1, #45	; 0x2d
   13084:	bne	13210 <__assert_fail@plt+0x1d60>
   13088:	ldrb	r1, [r0, #4]
   1308c:	cmp	r1, #56	; 0x38
   13090:	bne	13210 <__assert_fail@plt+0x1d60>
   13094:	ldrb	r0, [r0, #5]
   13098:	cmp	r0, #0
   1309c:	movw	r0, #52664	; 0xcdb8
   130a0:	movt	r0, #2
   130a4:	str	r0, [sp, #72]	; 0x48
   130a8:	bne	13210 <__assert_fail@plt+0x1d60>
   130ac:	b	1322c <__assert_fail@plt+0x1d7c>
   130b0:	mov	r0, #1
   130b4:	b	130f4 <__assert_fail@plt+0x1c44>
   130b8:	mov	r4, #0
   130bc:	mov	r9, #0
   130c0:	mov	r2, r0
   130c4:	b	13144 <__assert_fail@plt+0x1c94>
   130c8:	tst	r8, #1
   130cc:	bne	130f4 <__assert_fail@plt+0x1c44>
   130d0:	mov	r2, r0
   130d4:	b	1311c <__assert_fail@plt+0x1c6c>
   130d8:	mov	r0, #1
   130dc:	mov	r9, #0
   130e0:	mov	r4, #5
   130e4:	b	13160 <__assert_fail@plt+0x1cb0>
   130e8:	mov	r2, #1
   130ec:	tst	r8, #1
   130f0:	beq	1311c <__assert_fail@plt+0x1c6c>
   130f4:	mov	r1, #1
   130f8:	mov	r9, #0
   130fc:	mov	r4, #2
   13100:	mov	r2, r0
   13104:	mov	r3, #1
   13108:	str	r1, [fp, #-72]	; 0xffffffb8
   1310c:	movw	r1, #52662	; 0xcdb6
   13110:	movt	r1, #2
   13114:	str	r1, [fp, #-88]	; 0xffffffa8
   13118:	b	133c4 <__assert_fail@plt+0x1f14>
   1311c:	cmp	r5, #0
   13120:	mov	r9, #1
   13124:	mov	r4, #2
   13128:	movne	r0, #39	; 0x27
   1312c:	strbne	r0, [ip]
   13130:	movw	r0, #52662	; 0xcdb6
   13134:	movt	r0, #2
   13138:	str	r0, [fp, #-88]	; 0xffffffa8
   1313c:	mov	r0, #1
   13140:	str	r0, [fp, #-72]	; 0xffffffb8
   13144:	mov	r3, #0
   13148:	b	133c4 <__assert_fail@plt+0x1f14>
   1314c:	mov	r4, #5
   13150:	tst	r8, #1
   13154:	beq	1317c <__assert_fail@plt+0x1ccc>
   13158:	mov	r0, #1
   1315c:	mov	r9, #0
   13160:	str	r0, [fp, #-72]	; 0xffffffb8
   13164:	movw	r0, #52658	; 0xcdb2
   13168:	mov	r2, #1
   1316c:	mov	r3, #1
   13170:	movt	r0, #2
   13174:	str	r0, [fp, #-88]	; 0xffffffa8
   13178:	b	133c4 <__assert_fail@plt+0x1f14>
   1317c:	cmp	r5, #0
   13180:	mov	r3, #0
   13184:	mov	r9, #1
   13188:	mov	r2, #1
   1318c:	movne	r0, #34	; 0x22
   13190:	strbne	r0, [ip]
   13194:	movw	r0, #52658	; 0xcdb2
   13198:	movt	r0, #2
   1319c:	str	r0, [fp, #-88]	; 0xffffffa8
   131a0:	mov	r0, #1
   131a4:	str	r0, [fp, #-72]	; 0xffffffb8
   131a8:	b	133c4 <__assert_fail@plt+0x1f14>
   131ac:	ldrb	r1, [r0, #1]
   131b0:	and	r1, r1, #223	; 0xdf
   131b4:	cmp	r1, #66	; 0x42
   131b8:	bne	13210 <__assert_fail@plt+0x1d60>
   131bc:	ldrb	r1, [r0, #2]
   131c0:	cmp	r1, #49	; 0x31
   131c4:	bne	13210 <__assert_fail@plt+0x1d60>
   131c8:	ldrb	r1, [r0, #3]
   131cc:	cmp	r1, #56	; 0x38
   131d0:	bne	13210 <__assert_fail@plt+0x1d60>
   131d4:	ldrb	r1, [r0, #4]
   131d8:	cmp	r1, #48	; 0x30
   131dc:	bne	13210 <__assert_fail@plt+0x1d60>
   131e0:	ldrb	r1, [r0, #5]
   131e4:	cmp	r1, #51	; 0x33
   131e8:	bne	13210 <__assert_fail@plt+0x1d60>
   131ec:	ldrb	r1, [r0, #6]
   131f0:	cmp	r1, #48	; 0x30
   131f4:	bne	13210 <__assert_fail@plt+0x1d60>
   131f8:	ldrb	r0, [r0, #7]
   131fc:	cmp	r0, #0
   13200:	movw	r0, #52672	; 0xcdc0
   13204:	movt	r0, #2
   13208:	str	r0, [sp, #72]	; 0x48
   1320c:	beq	1322c <__assert_fail@plt+0x1d7c>
   13210:	movw	r1, #52658	; 0xcdb2
   13214:	movw	r0, #52662	; 0xcdb6
   13218:	cmp	r4, #9
   1321c:	movt	r1, #2
   13220:	movt	r0, #2
   13224:	moveq	r0, r1
   13228:	str	r0, [sp, #72]	; 0x48
   1322c:	movw	r6, #52662	; 0xcdb6
   13230:	mov	r0, #0
   13234:	mov	r2, #5
   13238:	movt	r6, #2
   1323c:	mov	r1, r6
   13240:	bl	112a0 <dcgettext@plt>
   13244:	cmp	r0, r6
   13248:	str	r0, [sp, #76]	; 0x4c
   1324c:	beq	13298 <__assert_fail@plt+0x1de8>
   13250:	ldr	ip, [fp, #-84]	; 0xffffffac
   13254:	mov	r9, #0
   13258:	tst	r8, #1
   1325c:	bne	133a0 <__assert_fail@plt+0x1ef0>
   13260:	ldr	r0, [sp, #72]	; 0x48
   13264:	ldrb	r0, [r0]
   13268:	cmp	r0, #0
   1326c:	beq	133a0 <__assert_fail@plt+0x1ef0>
   13270:	ldr	r1, [sp, #72]	; 0x48
   13274:	mov	r9, #0
   13278:	add	r1, r1, #1
   1327c:	cmp	r9, r5
   13280:	strbcc	r0, [ip, r9]
   13284:	ldrb	r0, [r1, r9]
   13288:	add	r9, r9, #1
   1328c:	cmp	r0, #0
   13290:	bne	1327c <__assert_fail@plt+0x1dcc>
   13294:	b	133a0 <__assert_fail@plt+0x1ef0>
   13298:	bl	2bc50 <__assert_fail@plt+0x1a7a0>
   1329c:	ldrb	r1, [r0]
   132a0:	and	r1, r1, #223	; 0xdf
   132a4:	cmp	r1, #71	; 0x47
   132a8:	beq	13318 <__assert_fail@plt+0x1e68>
   132ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   132b0:	cmp	r1, #85	; 0x55
   132b4:	bne	13374 <__assert_fail@plt+0x1ec4>
   132b8:	ldrb	r1, [r0, #1]
   132bc:	and	r1, r1, #223	; 0xdf
   132c0:	cmp	r1, #84	; 0x54
   132c4:	bne	13374 <__assert_fail@plt+0x1ec4>
   132c8:	ldrb	r1, [r0, #2]
   132cc:	and	r1, r1, #223	; 0xdf
   132d0:	cmp	r1, #70	; 0x46
   132d4:	bne	13374 <__assert_fail@plt+0x1ec4>
   132d8:	ldrb	r1, [r0, #3]
   132dc:	cmp	r1, #45	; 0x2d
   132e0:	bne	13374 <__assert_fail@plt+0x1ec4>
   132e4:	ldrb	r1, [r0, #4]
   132e8:	cmp	r1, #56	; 0x38
   132ec:	bne	13374 <__assert_fail@plt+0x1ec4>
   132f0:	ldrb	r0, [r0, #5]
   132f4:	cmp	r0, #0
   132f8:	bne	13374 <__assert_fail@plt+0x1ec4>
   132fc:	movw	r0, #52668	; 0xcdbc
   13300:	movt	r0, #2
   13304:	str	r0, [sp, #76]	; 0x4c
   13308:	mov	r9, #0
   1330c:	tst	r8, #1
   13310:	beq	13260 <__assert_fail@plt+0x1db0>
   13314:	b	133a0 <__assert_fail@plt+0x1ef0>
   13318:	ldrb	r1, [r0, #1]
   1331c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13320:	and	r1, r1, #223	; 0xdf
   13324:	cmp	r1, #66	; 0x42
   13328:	bne	13374 <__assert_fail@plt+0x1ec4>
   1332c:	ldrb	r1, [r0, #2]
   13330:	cmp	r1, #49	; 0x31
   13334:	bne	13374 <__assert_fail@plt+0x1ec4>
   13338:	ldrb	r1, [r0, #3]
   1333c:	cmp	r1, #56	; 0x38
   13340:	bne	13374 <__assert_fail@plt+0x1ec4>
   13344:	ldrb	r1, [r0, #4]
   13348:	cmp	r1, #48	; 0x30
   1334c:	bne	13374 <__assert_fail@plt+0x1ec4>
   13350:	ldrb	r1, [r0, #5]
   13354:	cmp	r1, #51	; 0x33
   13358:	bne	13374 <__assert_fail@plt+0x1ec4>
   1335c:	ldrb	r1, [r0, #6]
   13360:	cmp	r1, #48	; 0x30
   13364:	bne	13374 <__assert_fail@plt+0x1ec4>
   13368:	ldrb	r0, [r0, #7]
   1336c:	cmp	r0, #0
   13370:	beq	14188 <__assert_fail@plt+0x2cd8>
   13374:	movw	r0, #52662	; 0xcdb6
   13378:	cmp	r4, #9
   1337c:	movt	r0, #2
   13380:	mov	r1, r0
   13384:	movw	r0, #52658	; 0xcdb2
   13388:	movt	r0, #2
   1338c:	moveq	r1, r0
   13390:	str	r1, [sp, #76]	; 0x4c
   13394:	mov	r9, #0
   13398:	tst	r8, #1
   1339c:	beq	13260 <__assert_fail@plt+0x1db0>
   133a0:	ldr	r6, [sp, #76]	; 0x4c
   133a4:	mov	r0, r6
   133a8:	bl	11390 <strlen@plt>
   133ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   133b0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   133b4:	str	r0, [fp, #-72]	; 0xffffffb8
   133b8:	str	r6, [fp, #-88]	; 0xffffffa8
   133bc:	mov	r2, #1
   133c0:	mov	r3, r8
   133c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133c8:	str	r4, [fp, #-64]	; 0xffffffc0
   133cc:	mov	sl, #0
   133d0:	str	r3, [fp, #-76]	; 0xffffffb4
   133d4:	str	r2, [sp, #88]	; 0x58
   133d8:	cmp	r0, #0
   133dc:	movwne	r0, #1
   133e0:	and	r1, r0, r3
   133e4:	and	r1, r2, r1
   133e8:	str	r1, [sp, #48]	; 0x30
   133ec:	sub	r1, r4, #2
   133f0:	clz	r1, r1
   133f4:	lsr	r1, r1, #5
   133f8:	and	r1, r1, r3
   133fc:	str	r1, [sp, #44]	; 0x2c
   13400:	subs	r1, r4, #2
   13404:	eor	r4, r3, #1
   13408:	movwne	r1, #1
   1340c:	str	r4, [sp, #92]	; 0x5c
   13410:	orr	r4, r1, r4
   13414:	and	r1, r1, r2
   13418:	and	r0, r0, r1
   1341c:	str	r4, [sp, #64]	; 0x40
   13420:	ldr	r4, [sp, #84]	; 0x54
   13424:	str	r0, [fp, #-60]	; 0xffffffc4
   13428:	orr	r0, r1, r3
   1342c:	ldr	r1, [fp, #16]
   13430:	eor	r0, r0, #1
   13434:	clz	r1, r1
   13438:	lsr	r1, r1, #5
   1343c:	orr	r0, r1, r0
   13440:	str	r0, [fp, #-68]	; 0xffffffbc
   13444:	eor	r0, r2, #1
   13448:	str	r0, [sp, #52]	; 0x34
   1344c:	cmn	r7, #1
   13450:	beq	13460 <__assert_fail@plt+0x1fb0>
   13454:	cmp	sl, r7
   13458:	bne	1346c <__assert_fail@plt+0x1fbc>
   1345c:	b	14100 <__assert_fail@plt+0x2c50>
   13460:	ldrb	r0, [lr, sl]
   13464:	cmp	r0, #0
   13468:	beq	14108 <__assert_fail@plt+0x2c58>
   1346c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13470:	cmp	r0, #0
   13474:	beq	134d4 <__assert_fail@plt+0x2024>
   13478:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1347c:	mov	r6, r5
   13480:	add	r5, sl, r0
   13484:	cmp	r0, #2
   13488:	bcc	134f4 <__assert_fail@plt+0x2044>
   1348c:	mov	r0, #0
   13490:	cmn	r7, #1
   13494:	str	r0, [fp, #-56]	; 0xffffffc8
   13498:	bne	134b0 <__assert_fail@plt+0x2000>
   1349c:	mov	r0, lr
   134a0:	bl	11390 <strlen@plt>
   134a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   134a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   134ac:	mov	r7, r0
   134b0:	cmp	r5, r7
   134b4:	bls	13504 <__assert_fail@plt+0x2054>
   134b8:	mov	r0, #0
   134bc:	mov	r5, r6
   134c0:	str	r0, [fp, #-48]	; 0xffffffd0
   134c4:	ldrb	r6, [lr, sl]
   134c8:	cmp	r6, #126	; 0x7e
   134cc:	bls	13554 <__assert_fail@plt+0x20a4>
   134d0:	b	13ab0 <__assert_fail@plt+0x2600>
   134d4:	mov	r0, #0
   134d8:	str	r0, [fp, #-56]	; 0xffffffc8
   134dc:	mov	r0, #0
   134e0:	str	r0, [fp, #-48]	; 0xffffffd0
   134e4:	ldrb	r6, [lr, sl]
   134e8:	cmp	r6, #126	; 0x7e
   134ec:	bls	13554 <__assert_fail@plt+0x20a4>
   134f0:	b	13ab0 <__assert_fail@plt+0x2600>
   134f4:	mov	r0, #0
   134f8:	str	r0, [fp, #-56]	; 0xffffffc8
   134fc:	cmp	r5, r7
   13500:	bhi	134b8 <__assert_fail@plt+0x2008>
   13504:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13508:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1350c:	add	r0, lr, sl
   13510:	bl	11384 <bcmp@plt>
   13514:	ldr	r2, [sp, #92]	; 0x5c
   13518:	cmp	r0, #0
   1351c:	mov	r1, r0
   13520:	mov	r5, r6
   13524:	movwne	r1, #1
   13528:	orr	r1, r1, r2
   1352c:	tst	r1, #1
   13530:	beq	141c8 <__assert_fail@plt+0x2d18>
   13534:	ldr	ip, [fp, #-84]	; 0xffffffac
   13538:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1353c:	clz	r0, r0
   13540:	lsr	r0, r0, #5
   13544:	str	r0, [fp, #-48]	; 0xffffffd0
   13548:	ldrb	r6, [lr, sl]
   1354c:	cmp	r6, #126	; 0x7e
   13550:	bhi	13ab0 <__assert_fail@plt+0x2600>
   13554:	add	r3, pc, #16
   13558:	mov	r8, #1
   1355c:	mov	r2, #110	; 0x6e
   13560:	mov	r0, #97	; 0x61
   13564:	mov	r1, #0
   13568:	ldr	pc, [r3, r6, lsl #2]
   1356c:	andeq	r3, r1, r8, ror #16
   13570:			; <UNDEFINED> instruction: 0x00013ab0
   13574:			; <UNDEFINED> instruction: 0x00013ab0
   13578:			; <UNDEFINED> instruction: 0x00013ab0
   1357c:			; <UNDEFINED> instruction: 0x00013ab0
   13580:			; <UNDEFINED> instruction: 0x00013ab0
   13584:			; <UNDEFINED> instruction: 0x00013ab0
   13588:	andeq	r3, r1, r4, ror #22
   1358c:	andeq	r3, r1, r8, asr #16
   13590:	andeq	r3, r1, r0, asr #16
   13594:	andeq	r3, r1, r4, asr r8
   13598:	andeq	r3, r1, r4, lsl #19
   1359c:	andeq	r3, r1, r8, lsr r8
   135a0:	andeq	r3, r1, r0, asr r8
   135a4:			; <UNDEFINED> instruction: 0x00013ab0
   135a8:			; <UNDEFINED> instruction: 0x00013ab0
   135ac:			; <UNDEFINED> instruction: 0x00013ab0
   135b0:			; <UNDEFINED> instruction: 0x00013ab0
   135b4:			; <UNDEFINED> instruction: 0x00013ab0
   135b8:			; <UNDEFINED> instruction: 0x00013ab0
   135bc:			; <UNDEFINED> instruction: 0x00013ab0
   135c0:			; <UNDEFINED> instruction: 0x00013ab0
   135c4:			; <UNDEFINED> instruction: 0x00013ab0
   135c8:			; <UNDEFINED> instruction: 0x00013ab0
   135cc:			; <UNDEFINED> instruction: 0x00013ab0
   135d0:			; <UNDEFINED> instruction: 0x00013ab0
   135d4:			; <UNDEFINED> instruction: 0x00013ab0
   135d8:			; <UNDEFINED> instruction: 0x00013ab0
   135dc:			; <UNDEFINED> instruction: 0x00013ab0
   135e0:			; <UNDEFINED> instruction: 0x00013ab0
   135e4:			; <UNDEFINED> instruction: 0x00013ab0
   135e8:			; <UNDEFINED> instruction: 0x00013ab0
   135ec:	ldrdeq	r3, [r1], -ip
   135f0:	andeq	r3, r1, r0, ror #15
   135f4:	andeq	r3, r1, r0, ror #15
   135f8:	ldrdeq	r3, [r1], -r0
   135fc:	andeq	r3, r1, r0, ror #15
   13600:	andeq	r3, r1, r8, ror #14
   13604:	andeq	r3, r1, r0, ror #15
   13608:	andeq	r3, r1, ip, lsl #19
   1360c:	andeq	r3, r1, r0, ror #15
   13610:	andeq	r3, r1, r0, ror #15
   13614:	andeq	r3, r1, r0, ror #15
   13618:	andeq	r3, r1, r8, ror #14
   1361c:	andeq	r3, r1, r8, ror #14
   13620:	andeq	r3, r1, r8, ror #14
   13624:	andeq	r3, r1, r8, ror #14
   13628:	andeq	r3, r1, r8, ror #14
   1362c:	andeq	r3, r1, r8, ror #14
   13630:	andeq	r3, r1, r8, ror #14
   13634:	andeq	r3, r1, r8, ror #14
   13638:	andeq	r3, r1, r8, ror #14
   1363c:	andeq	r3, r1, r8, ror #14
   13640:	andeq	r3, r1, r8, ror #14
   13644:	andeq	r3, r1, r8, ror #14
   13648:	andeq	r3, r1, r8, ror #14
   1364c:	andeq	r3, r1, r8, ror #14
   13650:	andeq	r3, r1, r8, ror #14
   13654:	andeq	r3, r1, r8, ror #14
   13658:	andeq	r3, r1, r0, ror #15
   1365c:	andeq	r3, r1, r0, ror #15
   13660:	andeq	r3, r1, r0, ror #15
   13664:	andeq	r3, r1, r0, ror #15
   13668:	andeq	r3, r1, r0, asr r9
   1366c:			; <UNDEFINED> instruction: 0x00013ab0
   13670:	andeq	r3, r1, r8, ror #14
   13674:	andeq	r3, r1, r8, ror #14
   13678:	andeq	r3, r1, r8, ror #14
   1367c:	andeq	r3, r1, r8, ror #14
   13680:	andeq	r3, r1, r8, ror #14
   13684:	andeq	r3, r1, r8, ror #14
   13688:	andeq	r3, r1, r8, ror #14
   1368c:	andeq	r3, r1, r8, ror #14
   13690:	andeq	r3, r1, r8, ror #14
   13694:	andeq	r3, r1, r8, ror #14
   13698:	andeq	r3, r1, r8, ror #14
   1369c:	andeq	r3, r1, r8, ror #14
   136a0:	andeq	r3, r1, r8, ror #14
   136a4:	andeq	r3, r1, r8, ror #14
   136a8:	andeq	r3, r1, r8, ror #14
   136ac:	andeq	r3, r1, r8, ror #14
   136b0:	andeq	r3, r1, r8, ror #14
   136b4:	andeq	r3, r1, r8, ror #14
   136b8:	andeq	r3, r1, r8, ror #14
   136bc:	andeq	r3, r1, r8, ror #14
   136c0:	andeq	r3, r1, r8, ror #14
   136c4:	andeq	r3, r1, r8, ror #14
   136c8:	andeq	r3, r1, r8, ror #14
   136cc:	andeq	r3, r1, r8, ror #14
   136d0:	andeq	r3, r1, r8, ror #14
   136d4:	andeq	r3, r1, r8, ror #14
   136d8:	andeq	r3, r1, r0, ror #15
   136dc:	andeq	r3, r1, r4, lsl r8
   136e0:	andeq	r3, r1, r8, ror #14
   136e4:	andeq	r3, r1, r0, ror #15
   136e8:	andeq	r3, r1, r8, ror #14
   136ec:	andeq	r3, r1, r0, ror #15
   136f0:	andeq	r3, r1, r8, ror #14
   136f4:	andeq	r3, r1, r8, ror #14
   136f8:	andeq	r3, r1, r8, ror #14
   136fc:	andeq	r3, r1, r8, ror #14
   13700:	andeq	r3, r1, r8, ror #14
   13704:	andeq	r3, r1, r8, ror #14
   13708:	andeq	r3, r1, r8, ror #14
   1370c:	andeq	r3, r1, r8, ror #14
   13710:	andeq	r3, r1, r8, ror #14
   13714:	andeq	r3, r1, r8, ror #14
   13718:	andeq	r3, r1, r8, ror #14
   1371c:	andeq	r3, r1, r8, ror #14
   13720:	andeq	r3, r1, r8, ror #14
   13724:	andeq	r3, r1, r8, ror #14
   13728:	andeq	r3, r1, r8, ror #14
   1372c:	andeq	r3, r1, r8, ror #14
   13730:	andeq	r3, r1, r8, ror #14
   13734:	andeq	r3, r1, r8, ror #14
   13738:	andeq	r3, r1, r8, ror #14
   1373c:	andeq	r3, r1, r8, ror #14
   13740:	andeq	r3, r1, r8, ror #14
   13744:	andeq	r3, r1, r8, ror #14
   13748:	andeq	r3, r1, r8, ror #14
   1374c:	andeq	r3, r1, r8, ror #14
   13750:	andeq	r3, r1, r8, ror #14
   13754:	andeq	r3, r1, r8, ror #14
   13758:	andeq	r3, r1, r8, lsr #15
   1375c:	andeq	r3, r1, r0, ror #15
   13760:	andeq	r3, r1, r8, lsr #15
   13764:	ldrdeq	r3, [r1], -r0
   13768:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1376c:	tst	r0, #1
   13770:	bne	13a28 <__assert_fail@plt+0x2578>
   13774:	ldr	r1, [fp, #16]
   13778:	ubfx	r0, r6, #5, #3
   1377c:	mov	r2, #1
   13780:	ldr	r0, [r1, r0, lsl #2]
   13784:	and	r1, r6, #31
   13788:	tst	r0, r2, lsl r1
   1378c:	beq	13a28 <__assert_fail@plt+0x2578>
   13790:	mov	r0, r6
   13794:	mov	r1, r8
   13798:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1379c:	tst	r2, #1
   137a0:	beq	13a48 <__assert_fail@plt+0x2598>
   137a4:	b	141a4 <__assert_fail@plt+0x2cf4>
   137a8:	cmp	r7, #1
   137ac:	beq	137d0 <__assert_fail@plt+0x2320>
   137b0:	mov	r8, #0
   137b4:	cmn	r7, #1
   137b8:	bne	13a14 <__assert_fail@plt+0x2564>
   137bc:	ldrb	r0, [lr, #1]
   137c0:	cmp	r0, #0
   137c4:	beq	137d0 <__assert_fail@plt+0x2320>
   137c8:	mvn	r7, #0
   137cc:	b	13a14 <__assert_fail@plt+0x2564>
   137d0:	mov	r8, #0
   137d4:	cmp	sl, #0
   137d8:	bne	13a14 <__assert_fail@plt+0x2564>
   137dc:	mov	r1, #1
   137e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137e4:	cmp	r0, #2
   137e8:	bne	13800 <__assert_fail@plt+0x2350>
   137ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137f0:	mov	r8, r1
   137f4:	tst	r0, #1
   137f8:	beq	13768 <__assert_fail@plt+0x22b8>
   137fc:	b	141a4 <__assert_fail@plt+0x2cf4>
   13800:	mov	r8, r1
   13804:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13808:	tst	r0, #1
   1380c:	beq	13774 <__assert_fail@plt+0x22c4>
   13810:	b	13a28 <__assert_fail@plt+0x2578>
   13814:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13818:	cmp	r0, #2
   1381c:	bne	13adc <__assert_fail@plt+0x262c>
   13820:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13824:	tst	r0, #1
   13828:	bne	141a4 <__assert_fail@plt+0x2cf4>
   1382c:	mov	r0, #0
   13830:	str	r0, [fp, #-56]	; 0xffffffc8
   13834:	b	13af4 <__assert_fail@plt+0x2644>
   13838:	mov	r0, #102	; 0x66
   1383c:	b	13b64 <__assert_fail@plt+0x26b4>
   13840:	mov	r2, #116	; 0x74
   13844:	b	13854 <__assert_fail@plt+0x23a4>
   13848:	mov	r0, #98	; 0x62
   1384c:	b	13b64 <__assert_fail@plt+0x26b4>
   13850:	mov	r2, #114	; 0x72
   13854:	ldr	r0, [sp, #64]	; 0x40
   13858:	tst	r0, #1
   1385c:	mov	r0, r2
   13860:	bne	13b64 <__assert_fail@plt+0x26b4>
   13864:	b	141a4 <__assert_fail@plt+0x2cf4>
   13868:	ldr	r0, [sp, #88]	; 0x58
   1386c:	tst	r0, #1
   13870:	beq	13b84 <__assert_fail@plt+0x26d4>
   13874:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13878:	tst	r0, #1
   1387c:	bne	142e0 <__assert_fail@plt+0x2e30>
   13880:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13884:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13888:	subs	r0, r0, #2
   1388c:	movwne	r0, #1
   13890:	orr	r0, r0, r1
   13894:	tst	r0, #1
   13898:	bne	138d4 <__assert_fail@plt+0x2424>
   1389c:	cmp	r9, r5
   138a0:	movcc	r0, #39	; 0x27
   138a4:	strbcc	r0, [ip, r9]
   138a8:	add	r0, r9, #1
   138ac:	cmp	r0, r5
   138b0:	movcc	r1, #36	; 0x24
   138b4:	strbcc	r1, [ip, r0]
   138b8:	add	r0, r9, #2
   138bc:	add	r9, r9, #3
   138c0:	cmp	r0, r5
   138c4:	movcc	r1, #39	; 0x27
   138c8:	strbcc	r1, [ip, r0]
   138cc:	mov	r0, #1
   138d0:	str	r0, [fp, #-52]	; 0xffffffcc
   138d4:	mov	r1, #1
   138d8:	cmp	r9, r5
   138dc:	mov	r8, #0
   138e0:	mov	r6, #48	; 0x30
   138e4:	str	r1, [fp, #-56]	; 0xffffffc8
   138e8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   138ec:	movcc	r0, #92	; 0x5c
   138f0:	strbcc	r0, [ip, r9]
   138f4:	add	r0, r9, #1
   138f8:	cmp	r1, #2
   138fc:	beq	13d50 <__assert_fail@plt+0x28a0>
   13900:	add	r1, sl, #1
   13904:	cmp	r1, r7
   13908:	bcs	13d50 <__assert_fail@plt+0x28a0>
   1390c:	ldrb	r1, [lr, r1]
   13910:	sub	r1, r1, #48	; 0x30
   13914:	uxtb	r1, r1
   13918:	cmp	r1, #9
   1391c:	bhi	13d50 <__assert_fail@plt+0x28a0>
   13920:	cmp	r0, r5
   13924:	movcc	r1, #48	; 0x30
   13928:	strbcc	r1, [ip, r0]
   1392c:	add	r0, r9, #2
   13930:	add	r9, r9, #3
   13934:	cmp	r0, r5
   13938:	movcc	r1, #48	; 0x30
   1393c:	strbcc	r1, [ip, r0]
   13940:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13944:	tst	r0, #1
   13948:	beq	13774 <__assert_fail@plt+0x22c4>
   1394c:	b	13a28 <__assert_fail@plt+0x2578>
   13950:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13954:	mov	r6, #63	; 0x3f
   13958:	cmp	r0, #5
   1395c:	beq	13d64 <__assert_fail@plt+0x28b4>
   13960:	mov	r1, #0
   13964:	cmp	r0, #2
   13968:	str	r1, [fp, #-56]	; 0xffffffc8
   1396c:	bne	13e2c <__assert_fail@plt+0x297c>
   13970:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13974:	mov	r8, #0
   13978:	tst	r0, #1
   1397c:	beq	13768 <__assert_fail@plt+0x22b8>
   13980:	b	141a4 <__assert_fail@plt+0x2cf4>
   13984:	mov	r0, #118	; 0x76
   13988:	b	13b64 <__assert_fail@plt+0x26b4>
   1398c:	mov	r0, #1
   13990:	mov	r6, #39	; 0x27
   13994:	str	r0, [sp, #60]	; 0x3c
   13998:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1399c:	cmp	r0, #2
   139a0:	bne	13ba4 <__assert_fail@plt+0x26f4>
   139a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   139a8:	tst	r0, #1
   139ac:	bne	141a4 <__assert_fail@plt+0x2cf4>
   139b0:	ldr	r2, [sp, #56]	; 0x38
   139b4:	clz	r1, r5
   139b8:	mov	r8, #1
   139bc:	lsr	r1, r1, #5
   139c0:	cmp	r2, #0
   139c4:	mov	r0, r2
   139c8:	movwne	r0, #1
   139cc:	orrs	r0, r0, r1
   139d0:	moveq	r2, r5
   139d4:	moveq	r5, r0
   139d8:	cmp	r9, r5
   139dc:	str	r2, [sp, #56]	; 0x38
   139e0:	movcc	r0, #39	; 0x27
   139e4:	strbcc	r0, [ip, r9]
   139e8:	add	r0, r9, #1
   139ec:	cmp	r0, r5
   139f0:	movcc	r1, #92	; 0x5c
   139f4:	strbcc	r1, [ip, r0]
   139f8:	add	r0, r9, #2
   139fc:	add	r9, r9, #3
   13a00:	cmp	r0, r5
   13a04:	movcc	r1, #39	; 0x27
   13a08:	strbcc	r1, [ip, r0]
   13a0c:	mov	r0, #0
   13a10:	str	r0, [fp, #-52]	; 0xffffffcc
   13a14:	mov	r0, #0
   13a18:	str	r0, [fp, #-56]	; 0xffffffc8
   13a1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a20:	tst	r0, #1
   13a24:	beq	13774 <__assert_fail@plt+0x22c4>
   13a28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13a2c:	mov	r1, r8
   13a30:	cmp	r0, #0
   13a34:	mov	r0, r6
   13a38:	beq	13afc <__assert_fail@plt+0x264c>
   13a3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a40:	tst	r2, #1
   13a44:	bne	141a4 <__assert_fail@plt+0x2cf4>
   13a48:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13a4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13a50:	subs	r2, r2, #2
   13a54:	movwne	r2, #1
   13a58:	orr	r2, r2, r3
   13a5c:	tst	r2, #1
   13a60:	bne	13a9c <__assert_fail@plt+0x25ec>
   13a64:	cmp	r9, r5
   13a68:	movcc	r2, #39	; 0x27
   13a6c:	strbcc	r2, [ip, r9]
   13a70:	add	r2, r9, #1
   13a74:	cmp	r2, r5
   13a78:	movcc	r3, #36	; 0x24
   13a7c:	strbcc	r3, [ip, r2]
   13a80:	add	r2, r9, #2
   13a84:	add	r9, r9, #3
   13a88:	cmp	r2, r5
   13a8c:	movcc	r3, #39	; 0x27
   13a90:	strbcc	r3, [ip, r2]
   13a94:	mov	r2, #1
   13a98:	str	r2, [fp, #-52]	; 0xffffffcc
   13a9c:	cmp	r9, r5
   13aa0:	movcc	r2, #92	; 0x5c
   13aa4:	strbcc	r2, [ip, r9]
   13aa8:	add	r9, r9, #1
   13aac:	b	13b44 <__assert_fail@plt+0x2694>
   13ab0:	ldr	r0, [sp, #40]	; 0x28
   13ab4:	cmp	r0, #1
   13ab8:	bne	13bb8 <__assert_fail@plt+0x2708>
   13abc:	bl	1136c <__ctype_b_loc@plt>
   13ac0:	ldr	r0, [r0]
   13ac4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ac8:	mov	r1, #1
   13acc:	add	r0, r0, r6, lsl #1
   13ad0:	ldrb	r0, [r0, #1]
   13ad4:	ubfx	r8, r0, #6, #1
   13ad8:	b	13f10 <__assert_fail@plt+0x2a60>
   13adc:	ldr	r1, [sp, #48]	; 0x30
   13ae0:	mov	r0, #0
   13ae4:	str	r0, [fp, #-56]	; 0xffffffc8
   13ae8:	mov	r0, #92	; 0x5c
   13aec:	cmp	r1, #0
   13af0:	beq	13b64 <__assert_fail@plt+0x26b4>
   13af4:	mov	r6, #92	; 0x5c
   13af8:	mov	r8, #0
   13afc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13b00:	cmp	r0, #0
   13b04:	bne	13b3c <__assert_fail@plt+0x268c>
   13b08:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b0c:	tst	r0, #1
   13b10:	beq	13b3c <__assert_fail@plt+0x268c>
   13b14:	cmp	r9, r5
   13b18:	movcc	r0, #39	; 0x27
   13b1c:	strbcc	r0, [ip, r9]
   13b20:	add	r0, r9, #1
   13b24:	add	r9, r9, #2
   13b28:	cmp	r0, r5
   13b2c:	movcc	r1, #39	; 0x27
   13b30:	strbcc	r1, [ip, r0]
   13b34:	mov	r0, #0
   13b38:	str	r0, [fp, #-52]	; 0xffffffcc
   13b3c:	mov	r1, r8
   13b40:	mov	r0, r6
   13b44:	cmp	r9, r5
   13b48:	and	r4, r4, r1
   13b4c:	strbcc	r0, [ip, r9]
   13b50:	add	r9, r9, #1
   13b54:	add	sl, sl, #1
   13b58:	cmn	r7, #1
   13b5c:	bne	13454 <__assert_fail@plt+0x1fa4>
   13b60:	b	13460 <__assert_fail@plt+0x1fb0>
   13b64:	mov	r1, #0
   13b68:	mov	r8, #0
   13b6c:	str	r1, [fp, #-56]	; 0xffffffc8
   13b70:	ldr	r1, [sp, #88]	; 0x58
   13b74:	tst	r1, #1
   13b78:	mov	r1, #0
   13b7c:	beq	13768 <__assert_fail@plt+0x22b8>
   13b80:	b	13a3c <__assert_fail@plt+0x258c>
   13b84:	ldr	r0, [sp, #36]	; 0x24
   13b88:	mov	r6, #0
   13b8c:	mov	r8, #0
   13b90:	cmp	r0, #0
   13b94:	mov	r0, #0
   13b98:	str	r0, [fp, #-56]	; 0xffffffc8
   13b9c:	bne	13b54 <__assert_fail@plt+0x26a4>
   13ba0:	b	13768 <__assert_fail@plt+0x22b8>
   13ba4:	mov	r8, #1
   13ba8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bac:	tst	r0, #1
   13bb0:	beq	13774 <__assert_fail@plt+0x22c4>
   13bb4:	b	13a28 <__assert_fail@plt+0x2578>
   13bb8:	mov	r0, #0
   13bbc:	cmn	r7, #1
   13bc0:	str	r0, [fp, #-36]	; 0xffffffdc
   13bc4:	str	r0, [fp, #-40]	; 0xffffffd8
   13bc8:	bne	13bdc <__assert_fail@plt+0x272c>
   13bcc:	mov	r0, lr
   13bd0:	bl	11390 <strlen@plt>
   13bd4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13bd8:	mov	r7, r0
   13bdc:	ldr	r0, [sp, #44]	; 0x2c
   13be0:	str	r4, [sp, #84]	; 0x54
   13be4:	str	r5, [sp, #28]
   13be8:	cmp	r0, #0
   13bec:	beq	13e40 <__assert_fail@plt+0x2990>
   13bf0:	ldr	r0, [sp, #80]	; 0x50
   13bf4:	mov	r8, #1
   13bf8:	mov	r5, #0
   13bfc:	add	r0, r0, sl
   13c00:	str	r0, [sp, #24]
   13c04:	sub	r0, fp, #40	; 0x28
   13c08:	mov	r3, r0
   13c0c:	b	13c48 <__assert_fail@plt+0x2798>
   13c10:	ldr	r5, [sp, #68]	; 0x44
   13c14:	add	r5, r0, r5
   13c18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13c1c:	bl	112c4 <iswprint@plt>
   13c20:	cmp	r0, #0
   13c24:	sub	r4, fp, #40	; 0x28
   13c28:	movwne	r0, #1
   13c2c:	and	r8, r8, r0
   13c30:	mov	r0, r4
   13c34:	bl	1127c <mbsinit@plt>
   13c38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13c3c:	mov	r3, r4
   13c40:	cmp	r0, #0
   13c44:	bne	13f04 <__assert_fail@plt+0x2a54>
   13c48:	str	r5, [sp, #68]	; 0x44
   13c4c:	add	r5, r5, sl
   13c50:	sub	r0, fp, #44	; 0x2c
   13c54:	add	r1, lr, r5
   13c58:	sub	r2, r7, r5
   13c5c:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   13c60:	cmn	r0, #2
   13c64:	beq	13ec4 <__assert_fail@plt+0x2a14>
   13c68:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c6c:	cmn	r0, #1
   13c70:	beq	13eb8 <__assert_fail@plt+0x2a08>
   13c74:	cmp	r0, #0
   13c78:	beq	13ebc <__assert_fail@plt+0x2a0c>
   13c7c:	cmp	r0, #2
   13c80:	bcc	13c10 <__assert_fail@plt+0x2760>
   13c84:	ldr	r1, [sp, #68]	; 0x44
   13c88:	ldr	r2, [sp, #24]
   13c8c:	add	r1, r2, r1
   13c90:	sub	r2, r0, #1
   13c94:	ldrb	r3, [r1]
   13c98:	sub	r3, r3, #91	; 0x5b
   13c9c:	cmp	r3, #33	; 0x21
   13ca0:	bls	13cc0 <__assert_fail@plt+0x2810>
   13ca4:	add	r1, r1, #1
   13ca8:	subs	r2, r2, #1
   13cac:	beq	13c10 <__assert_fail@plt+0x2760>
   13cb0:	ldrb	r3, [r1]
   13cb4:	sub	r3, r3, #91	; 0x5b
   13cb8:	cmp	r3, #33	; 0x21
   13cbc:	bhi	13ca4 <__assert_fail@plt+0x27f4>
   13cc0:	add	r5, pc, #0
   13cc4:	ldr	pc, [r5, r3, lsl #2]
   13cc8:	ldrdeq	r4, [r1], -ip
   13ccc:	ldrdeq	r4, [r1], -ip
   13cd0:	andeq	r3, r1, r4, lsr #25
   13cd4:	ldrdeq	r4, [r1], -ip
   13cd8:	andeq	r3, r1, r4, lsr #25
   13cdc:	ldrdeq	r4, [r1], -ip
   13ce0:	andeq	r3, r1, r4, lsr #25
   13ce4:	andeq	r3, r1, r4, lsr #25
   13ce8:	andeq	r3, r1, r4, lsr #25
   13cec:	andeq	r3, r1, r4, lsr #25
   13cf0:	andeq	r3, r1, r4, lsr #25
   13cf4:	andeq	r3, r1, r4, lsr #25
   13cf8:	andeq	r3, r1, r4, lsr #25
   13cfc:	andeq	r3, r1, r4, lsr #25
   13d00:	andeq	r3, r1, r4, lsr #25
   13d04:	andeq	r3, r1, r4, lsr #25
   13d08:	andeq	r3, r1, r4, lsr #25
   13d0c:	andeq	r3, r1, r4, lsr #25
   13d10:	andeq	r3, r1, r4, lsr #25
   13d14:	andeq	r3, r1, r4, lsr #25
   13d18:	andeq	r3, r1, r4, lsr #25
   13d1c:	andeq	r3, r1, r4, lsr #25
   13d20:	andeq	r3, r1, r4, lsr #25
   13d24:	andeq	r3, r1, r4, lsr #25
   13d28:	andeq	r3, r1, r4, lsr #25
   13d2c:	andeq	r3, r1, r4, lsr #25
   13d30:	andeq	r3, r1, r4, lsr #25
   13d34:	andeq	r3, r1, r4, lsr #25
   13d38:	andeq	r3, r1, r4, lsr #25
   13d3c:	andeq	r3, r1, r4, lsr #25
   13d40:	andeq	r3, r1, r4, lsr #25
   13d44:	andeq	r3, r1, r4, lsr #25
   13d48:	andeq	r3, r1, r4, lsr #25
   13d4c:	ldrdeq	r4, [r1], -ip
   13d50:	mov	r9, r0
   13d54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d58:	tst	r0, #1
   13d5c:	beq	13774 <__assert_fail@plt+0x22c4>
   13d60:	b	13a28 <__assert_fail@plt+0x2578>
   13d64:	mov	r0, #0
   13d68:	str	r0, [fp, #-56]	; 0xffffffc8
   13d6c:	ldr	r0, [sp, #32]
   13d70:	cmp	r0, #0
   13d74:	beq	13e2c <__assert_fail@plt+0x297c>
   13d78:	add	r0, sl, #2
   13d7c:	mov	r1, r7
   13d80:	cmp	r0, r7
   13d84:	bcs	13e2c <__assert_fail@plt+0x297c>
   13d88:	add	r1, sl, lr
   13d8c:	ldrb	r1, [r1, #1]
   13d90:	cmp	r1, #63	; 0x3f
   13d94:	bne	13e2c <__assert_fail@plt+0x297c>
   13d98:	ldrb	r8, [lr, r0]
   13d9c:	sub	r2, r8, #33	; 0x21
   13da0:	cmp	r2, #29
   13da4:	bhi	13e2c <__assert_fail@plt+0x297c>
   13da8:	mov	r1, r4
   13dac:	movw	r4, #20929	; 0x51c1
   13db0:	mov	r3, #1
   13db4:	movt	r4, #14336	; 0x3800
   13db8:	tst	r4, r3, lsl r2
   13dbc:	beq	140e8 <__assert_fail@plt+0x2c38>
   13dc0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13dc4:	tst	r2, #1
   13dc8:	bne	141a4 <__assert_fail@plt+0x2cf4>
   13dcc:	cmp	r9, r5
   13dd0:	mov	r6, r8
   13dd4:	mov	r4, r1
   13dd8:	mov	sl, r0
   13ddc:	mov	r8, #0
   13de0:	movcc	r2, #63	; 0x3f
   13de4:	strbcc	r2, [ip, r9]
   13de8:	add	r2, r9, #1
   13dec:	cmp	r2, r5
   13df0:	movcc	r3, #34	; 0x22
   13df4:	strbcc	r3, [ip, r2]
   13df8:	add	r2, r9, #2
   13dfc:	cmp	r2, r5
   13e00:	movcc	r3, #34	; 0x22
   13e04:	strbcc	r3, [ip, r2]
   13e08:	add	r2, r9, #3
   13e0c:	add	r9, r9, #4
   13e10:	cmp	r2, r5
   13e14:	movcc	r3, #63	; 0x3f
   13e18:	strbcc	r3, [ip, r2]
   13e1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e20:	tst	r0, #1
   13e24:	beq	13774 <__assert_fail@plt+0x22c4>
   13e28:	b	13a28 <__assert_fail@plt+0x2578>
   13e2c:	mov	r8, #0
   13e30:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e34:	tst	r0, #1
   13e38:	beq	13774 <__assert_fail@plt+0x22c4>
   13e3c:	b	13a28 <__assert_fail@plt+0x2578>
   13e40:	mov	r8, #1
   13e44:	mov	r5, #0
   13e48:	sub	r4, fp, #40	; 0x28
   13e4c:	str	r5, [sp, #68]	; 0x44
   13e50:	add	r5, r5, sl
   13e54:	sub	r0, fp, #44	; 0x2c
   13e58:	mov	r3, r4
   13e5c:	add	r1, lr, r5
   13e60:	sub	r2, r7, r5
   13e64:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   13e68:	cmn	r0, #2
   13e6c:	beq	13ec4 <__assert_fail@plt+0x2a14>
   13e70:	cmn	r0, #1
   13e74:	beq	13eb8 <__assert_fail@plt+0x2a08>
   13e78:	ldr	r5, [sp, #68]	; 0x44
   13e7c:	cmp	r0, #0
   13e80:	beq	13f00 <__assert_fail@plt+0x2a50>
   13e84:	add	r5, r0, r5
   13e88:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13e8c:	bl	112c4 <iswprint@plt>
   13e90:	cmp	r0, #0
   13e94:	sub	r4, fp, #40	; 0x28
   13e98:	movwne	r0, #1
   13e9c:	and	r8, r8, r0
   13ea0:	mov	r0, r4
   13ea4:	bl	1127c <mbsinit@plt>
   13ea8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13eac:	cmp	r0, #0
   13eb0:	beq	13e4c <__assert_fail@plt+0x299c>
   13eb4:	b	13f04 <__assert_fail@plt+0x2a54>
   13eb8:	mov	r8, #0
   13ebc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ec0:	b	13ef8 <__assert_fail@plt+0x2a48>
   13ec4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ec8:	mov	r8, #0
   13ecc:	cmp	r5, r7
   13ed0:	bcs	13ef8 <__assert_fail@plt+0x2a48>
   13ed4:	ldrb	r0, [lr, r5]
   13ed8:	cmp	r0, #0
   13edc:	beq	13ef8 <__assert_fail@plt+0x2a48>
   13ee0:	ldr	r0, [sp, #68]	; 0x44
   13ee4:	add	r0, r0, #1
   13ee8:	add	r5, r0, sl
   13eec:	str	r0, [sp, #68]	; 0x44
   13ef0:	cmp	r5, r7
   13ef4:	bcc	13ed4 <__assert_fail@plt+0x2a24>
   13ef8:	ldr	r5, [sp, #68]	; 0x44
   13efc:	b	13f04 <__assert_fail@plt+0x2a54>
   13f00:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13f04:	mov	r1, r5
   13f08:	ldr	r5, [sp, #28]
   13f0c:	ldr	r4, [sp, #84]	; 0x54
   13f10:	ldr	r0, [sp, #52]	; 0x34
   13f14:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f18:	cmp	r1, #1
   13f1c:	orr	r2, r8, r0
   13f20:	mov	r0, r1
   13f24:	bhi	13f30 <__assert_fail@plt+0x2a80>
   13f28:	tst	r2, #1
   13f2c:	bne	13768 <__assert_fail@plt+0x22b8>
   13f30:	add	r0, r0, sl
   13f34:	str	r2, [sp, #84]	; 0x54
   13f38:	str	r0, [fp, #-56]	; 0xffffffc8
   13f3c:	mov	r0, #0
   13f40:	tst	r2, #1
   13f44:	bne	14024 <__assert_fail@plt+0x2b74>
   13f48:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13f4c:	tst	r1, #1
   13f50:	bne	141a4 <__assert_fail@plt+0x2cf4>
   13f54:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13f58:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13f5c:	subs	r2, r1, #2
   13f60:	movwne	r2, #1
   13f64:	orr	r2, r2, r0
   13f68:	tst	r2, #1
   13f6c:	bne	13fa8 <__assert_fail@plt+0x2af8>
   13f70:	cmp	r9, r5
   13f74:	add	r2, r9, #1
   13f78:	mov	r0, #1
   13f7c:	movcc	r1, #39	; 0x27
   13f80:	str	r0, [fp, #-52]	; 0xffffffcc
   13f84:	strbcc	r1, [ip, r9]
   13f88:	cmp	r2, r5
   13f8c:	movcc	r1, #36	; 0x24
   13f90:	strbcc	r1, [ip, r2]
   13f94:	add	r2, r9, #2
   13f98:	add	r9, r9, #3
   13f9c:	cmp	r2, r5
   13fa0:	movcc	r1, #39	; 0x27
   13fa4:	strbcc	r1, [ip, r2]
   13fa8:	cmp	r9, r5
   13fac:	add	r2, r9, #1
   13fb0:	movcc	r1, #92	; 0x5c
   13fb4:	strbcc	r1, [ip, r9]
   13fb8:	cmp	r2, r5
   13fbc:	bcs	13fd0 <__assert_fail@plt+0x2b20>
   13fc0:	uxtb	r3, r6
   13fc4:	mov	r1, #48	; 0x30
   13fc8:	orr	r3, r1, r3, lsr #6
   13fcc:	strb	r3, [ip, r2]
   13fd0:	add	r2, r9, #2
   13fd4:	add	r9, r9, #3
   13fd8:	cmp	r2, r5
   13fdc:	lsrcc	r3, r6, #3
   13fe0:	movcc	r1, #6
   13fe4:	bficc	r3, r1, #3, #29
   13fe8:	mov	r1, #6
   13fec:	bfi	r6, r1, #3, #29
   13ff0:	strbcc	r3, [ip, r2]
   13ff4:	mov	r2, #1
   13ff8:	b	14058 <__assert_fail@plt+0x2ba8>
   13ffc:	ldr	r1, [sp, #80]	; 0x50
   14000:	cmp	r9, r2
   14004:	mov	r5, r2
   14008:	ldr	r2, [sp, #84]	; 0x54
   1400c:	strbcc	r6, [ip, r9]
   14010:	add	r9, r9, #1
   14014:	ldrb	r6, [r1, sl]
   14018:	mov	sl, r3
   1401c:	tst	r2, #1
   14020:	beq	13f48 <__assert_fail@plt+0x2a98>
   14024:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14028:	tst	r1, #1
   1402c:	beq	1404c <__assert_fail@plt+0x2b9c>
   14030:	cmp	r9, r5
   14034:	mov	r2, r0
   14038:	movcc	r1, #92	; 0x5c
   1403c:	strbcc	r1, [ip, r9]
   14040:	add	r9, r9, #1
   14044:	mov	r1, #0
   14048:	b	14054 <__assert_fail@plt+0x2ba4>
   1404c:	mov	r1, #0
   14050:	mov	r2, r0
   14054:	str	r1, [fp, #-48]	; 0xffffffd0
   14058:	mov	r0, r2
   1405c:	and	r1, r2, #1
   14060:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14064:	add	r3, sl, #1
   14068:	cmp	r2, r3
   1406c:	bls	140cc <__assert_fail@plt+0x2c1c>
   14070:	mov	r2, r5
   14074:	ldr	r5, [fp, #-52]	; 0xffffffcc
   14078:	cmp	r1, #0
   1407c:	movwne	r1, #1
   14080:	mvn	r5, r5
   14084:	orr	r5, r5, r1
   14088:	tst	r5, #1
   1408c:	bne	13ffc <__assert_fail@plt+0x2b4c>
   14090:	cmp	r9, r2
   14094:	movcc	r5, r4
   14098:	movcc	r4, #39	; 0x27
   1409c:	strbcc	r4, [ip, r9]
   140a0:	movcc	r4, r5
   140a4:	add	r5, r9, #1
   140a8:	add	r9, r9, #2
   140ac:	cmp	r5, r2
   140b0:	movcc	r1, r4
   140b4:	movcc	r4, #39	; 0x27
   140b8:	strbcc	r4, [ip, r5]
   140bc:	movcc	r4, r1
   140c0:	mov	r1, #0
   140c4:	str	r1, [fp, #-52]	; 0xffffffcc
   140c8:	b	13ffc <__assert_fail@plt+0x2b4c>
   140cc:	cmp	r1, #0
   140d0:	movwne	r1, #1
   140d4:	str	r1, [fp, #-56]	; 0xffffffc8
   140d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   140dc:	cmp	r0, #0
   140e0:	beq	13b08 <__assert_fail@plt+0x2658>
   140e4:	b	13b3c <__assert_fail@plt+0x268c>
   140e8:	mov	r8, #0
   140ec:	mov	r4, r1
   140f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   140f4:	tst	r0, #1
   140f8:	beq	13774 <__assert_fail@plt+0x22c4>
   140fc:	b	13a28 <__assert_fail@plt+0x2578>
   14100:	mov	r7, sl
   14104:	b	1410c <__assert_fail@plt+0x2c5c>
   14108:	mvn	r7, #0
   1410c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14110:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14114:	ldr	r2, [sp, #88]	; 0x58
   14118:	eor	r0, r1, #2
   1411c:	orr	r0, r0, r9
   14120:	clz	r0, r0
   14124:	lsr	r0, r0, #5
   14128:	tst	r3, r0
   1412c:	bne	141a4 <__assert_fail@plt+0x2cf4>
   14130:	subs	r0, r1, #2
   14134:	movwne	r0, #1
   14138:	orr	r0, r3, r0
   1413c:	tst	r0, #1
   14140:	ldreq	r0, [sp, #60]	; 0x3c
   14144:	eoreq	r0, r0, #1
   14148:	tsteq	r0, #1
   1414c:	bne	14280 <__assert_fail@plt+0x2dd0>
   14150:	tst	r4, #1
   14154:	bne	14244 <__assert_fail@plt+0x2d94>
   14158:	ldr	r6, [sp, #56]	; 0x38
   1415c:	mov	r8, #0
   14160:	cmp	r6, #0
   14164:	beq	1427c <__assert_fail@plt+0x2dcc>
   14168:	mov	r1, #0
   1416c:	mov	r4, #2
   14170:	cmp	r5, #0
   14174:	mov	r0, r2
   14178:	mov	r3, #0
   1417c:	str	r1, [sp, #84]	; 0x54
   14180:	beq	12fc8 <__assert_fail@plt+0x1b18>
   14184:	b	14280 <__assert_fail@plt+0x2dd0>
   14188:	movw	r0, #52676	; 0xcdc4
   1418c:	movt	r0, #2
   14190:	str	r0, [sp, #76]	; 0x4c
   14194:	mov	r9, #0
   14198:	tst	r8, #1
   1419c:	beq	13260 <__assert_fail@plt+0x1db0>
   141a0:	b	133a0 <__assert_fail@plt+0x1ef0>
   141a4:	ldr	r1, [sp, #88]	; 0x58
   141a8:	mov	r0, #2
   141ac:	tst	r1, #1
   141b0:	movwne	r0, #4
   141b4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   141b8:	ldr	r1, [fp, #12]
   141bc:	cmp	r2, #2
   141c0:	moveq	r2, r0
   141c4:	b	141fc <__assert_fail@plt+0x2d4c>
   141c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   141cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   141d0:	ldr	r1, [fp, #12]
   141d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   141d8:	b	141fc <__assert_fail@plt+0x2d4c>
   141dc:	ldr	r1, [sp, #88]	; 0x58
   141e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   141e4:	ldr	r5, [sp, #28]
   141e8:	mov	r0, #2
   141ec:	tst	r1, #1
   141f0:	ldr	r1, [fp, #12]
   141f4:	movwne	r0, #4
   141f8:	mov	r2, r0
   141fc:	mov	r0, #0
   14200:	bic	r1, r1, #2
   14204:	str	r2, [sp]
   14208:	mov	r2, lr
   1420c:	str	r0, [sp, #8]
   14210:	ldr	r0, [sp, #72]	; 0x48
   14214:	str	r1, [sp, #4]
   14218:	mov	r1, r5
   1421c:	str	r0, [sp, #12]
   14220:	ldr	r0, [sp, #76]	; 0x4c
   14224:	str	r0, [sp, #16]
   14228:	mov	r0, ip
   1422c:	mov	r3, r7
   14230:	bl	12f3c <__assert_fail@plt+0x1a8c>
   14234:	mov	r9, r0
   14238:	mov	r0, r9
   1423c:	sub	sp, fp, #28
   14240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14244:	mov	r0, #5
   14248:	ldr	r1, [sp, #56]	; 0x38
   1424c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14250:	str	r0, [sp]
   14254:	ldr	r0, [fp, #12]
   14258:	str	r0, [sp, #4]
   1425c:	ldr	r0, [fp, #16]
   14260:	str	r0, [sp, #8]
   14264:	ldr	r0, [sp, #72]	; 0x48
   14268:	str	r0, [sp, #12]
   1426c:	ldr	r0, [sp, #76]	; 0x4c
   14270:	str	r0, [sp, #16]
   14274:	ldr	r0, [fp, #-84]	; 0xffffffac
   14278:	b	1422c <__assert_fail@plt+0x2d7c>
   1427c:	mov	r3, #0
   14280:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14284:	cmp	r1, #0
   14288:	beq	142c4 <__assert_fail@plt+0x2e14>
   1428c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14290:	tst	r3, #1
   14294:	bne	142c8 <__assert_fail@plt+0x2e18>
   14298:	ldrb	r0, [r1]
   1429c:	cmp	r0, #0
   142a0:	beq	142c8 <__assert_fail@plt+0x2e18>
   142a4:	add	r1, r1, #1
   142a8:	cmp	r9, r5
   142ac:	strbcc	r0, [r2, r9]
   142b0:	add	r9, r9, #1
   142b4:	ldrb	r0, [r1], #1
   142b8:	cmp	r0, #0
   142bc:	bne	142a8 <__assert_fail@plt+0x2df8>
   142c0:	b	142c8 <__assert_fail@plt+0x2e18>
   142c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   142c8:	cmp	r9, r5
   142cc:	movcc	r0, #0
   142d0:	strbcc	r0, [r2, r9]
   142d4:	mov	r0, r9
   142d8:	sub	sp, fp, #28
   142dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e0:	mov	r0, #4
   142e4:	b	141b4 <__assert_fail@plt+0x2d04>
   142e8:	bl	114a4 <abort@plt>
   142ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f0:	add	fp, sp, #28
   142f4:	sub	sp, sp, #28
   142f8:	movw	r5, #58752	; 0xe580
   142fc:	cmp	r2, #0
   14300:	mov	r4, r1
   14304:	mov	r7, r0
   14308:	str	r0, [sp, #20]
   1430c:	movt	r5, #3
   14310:	movne	r5, r2
   14314:	bl	113a8 <__errno_location@plt>
   14318:	mov	sl, r0
   1431c:	ldr	r2, [r5, #40]	; 0x28
   14320:	ldr	r3, [r5, #44]	; 0x2c
   14324:	ldm	r5, {r0, r1}
   14328:	orr	r8, r1, #1
   1432c:	add	r9, r5, #8
   14330:	mov	r1, #0
   14334:	ldr	r6, [sl]
   14338:	stm	sp, {r0, r8, r9}
   1433c:	mov	r0, #0
   14340:	str	r2, [sp, #12]
   14344:	str	r3, [sp, #16]
   14348:	mov	r2, r7
   1434c:	mov	r3, r4
   14350:	str	r6, [sp, #24]
   14354:	mov	r6, r4
   14358:	bl	12f3c <__assert_fail@plt+0x1a8c>
   1435c:	add	r7, r0, #1
   14360:	mov	r0, r7
   14364:	bl	29a48 <__assert_fail@plt+0x18598>
   14368:	mov	r4, r0
   1436c:	ldr	r0, [r5]
   14370:	ldr	r2, [r5, #44]	; 0x2c
   14374:	ldr	r1, [r5, #40]	; 0x28
   14378:	mov	r3, r6
   1437c:	stm	sp, {r0, r8, r9}
   14380:	str	r2, [sp, #16]
   14384:	ldr	r2, [sp, #20]
   14388:	str	r1, [sp, #12]
   1438c:	mov	r0, r4
   14390:	mov	r1, r7
   14394:	bl	12f3c <__assert_fail@plt+0x1a8c>
   14398:	ldr	r0, [sp, #24]
   1439c:	str	r0, [sl]
   143a0:	mov	r0, r4
   143a4:	sub	sp, fp, #28
   143a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b0:	add	fp, sp, #28
   143b4:	sub	sp, sp, #36	; 0x24
   143b8:	movw	r8, #58752	; 0xe580
   143bc:	cmp	r3, #0
   143c0:	mov	r4, r2
   143c4:	str	r2, [sp, #24]
   143c8:	mov	r5, r1
   143cc:	mov	r6, r0
   143d0:	str	r0, [sp, #20]
   143d4:	movt	r8, #3
   143d8:	movne	r8, r3
   143dc:	bl	113a8 <__errno_location@plt>
   143e0:	str	r0, [sp, #28]
   143e4:	ldr	r1, [r8, #40]	; 0x28
   143e8:	ldr	r2, [r8, #44]	; 0x2c
   143ec:	ldr	r7, [r0]
   143f0:	cmp	r4, #0
   143f4:	add	sl, r8, #8
   143f8:	mov	r0, #0
   143fc:	ldm	r8, {r3, r9}
   14400:	orreq	r9, r9, #1
   14404:	stm	sp, {r3, r9, sl}
   14408:	str	r1, [sp, #12]
   1440c:	str	r2, [sp, #16]
   14410:	mov	r1, #0
   14414:	mov	r2, r6
   14418:	mov	r3, r5
   1441c:	str	r7, [sp, #32]
   14420:	mov	r7, r5
   14424:	bl	12f3c <__assert_fail@plt+0x1a8c>
   14428:	add	r4, r0, #1
   1442c:	mov	r5, r0
   14430:	mov	r0, r4
   14434:	bl	29a48 <__assert_fail@plt+0x18598>
   14438:	mov	r6, r0
   1443c:	ldr	r0, [r8]
   14440:	ldr	r2, [r8, #44]	; 0x2c
   14444:	ldr	r1, [r8, #40]	; 0x28
   14448:	mov	r3, r7
   1444c:	stm	sp, {r0, r9, sl}
   14450:	str	r2, [sp, #16]
   14454:	ldr	r2, [sp, #20]
   14458:	str	r1, [sp, #12]
   1445c:	mov	r0, r6
   14460:	mov	r1, r4
   14464:	bl	12f3c <__assert_fail@plt+0x1a8c>
   14468:	ldr	r0, [sp, #24]
   1446c:	ldr	r1, [sp, #32]
   14470:	ldr	r2, [sp, #28]
   14474:	cmp	r0, #0
   14478:	str	r1, [r2]
   1447c:	strne	r5, [r0]
   14480:	mov	r0, r6
   14484:	sub	sp, fp, #28
   14488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1448c:	push	{r4, r5, r6, r7, fp, lr}
   14490:	add	fp, sp, #16
   14494:	movw	r4, #57752	; 0xe198
   14498:	movt	r4, #3
   1449c:	ldrd	r6, [r4]
   144a0:	cmp	r7, #2
   144a4:	blt	144d0 <__assert_fail@plt+0x3020>
   144a8:	add	r5, r6, #12
   144ac:	mov	r7, #0
   144b0:	ldr	r0, [r5, r7, lsl #3]
   144b4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   144b8:	ldr	r1, [r4, #4]
   144bc:	add	r2, r7, #2
   144c0:	add	r0, r7, #1
   144c4:	mov	r7, r0
   144c8:	cmp	r2, r1
   144cc:	blt	144b0 <__assert_fail@plt+0x3000>
   144d0:	ldr	r0, [r6, #4]
   144d4:	movw	r5, #58800	; 0xe5b0
   144d8:	movt	r5, #3
   144dc:	cmp	r0, r5
   144e0:	beq	144f4 <__assert_fail@plt+0x3044>
   144e4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   144e8:	mov	r0, #256	; 0x100
   144ec:	str	r0, [r4, #8]
   144f0:	str	r5, [r4, #12]
   144f4:	add	r5, r4, #8
   144f8:	cmp	r6, r5
   144fc:	beq	1450c <__assert_fail@plt+0x305c>
   14500:	mov	r0, r6
   14504:	bl	2bc28 <__assert_fail@plt+0x1a778>
   14508:	str	r5, [r4]
   1450c:	mov	r0, #1
   14510:	str	r0, [r4, #4]
   14514:	pop	{r4, r5, r6, r7, fp, pc}
   14518:	movw	r3, #58752	; 0xe580
   1451c:	mvn	r2, #0
   14520:	movt	r3, #3
   14524:	b	14528 <__assert_fail@plt+0x3078>
   14528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1452c:	add	fp, sp, #28
   14530:	sub	sp, sp, #44	; 0x2c
   14534:	mov	r7, r3
   14538:	str	r2, [sp, #36]	; 0x24
   1453c:	str	r1, [sp, #32]
   14540:	mov	r5, r0
   14544:	bl	113a8 <__errno_location@plt>
   14548:	cmp	r5, #0
   1454c:	bmi	146b4 <__assert_fail@plt+0x3204>
   14550:	cmn	r5, #-2147483647	; 0x80000001
   14554:	beq	146b4 <__assert_fail@plt+0x3204>
   14558:	movw	r8, #57752	; 0xe198
   1455c:	mov	r4, r0
   14560:	ldr	r0, [r0]
   14564:	movt	r8, #3
   14568:	str	r4, [sp, #28]
   1456c:	ldr	r1, [r8, #4]
   14570:	ldr	r6, [r8]
   14574:	str	r0, [sp, #24]
   14578:	cmp	r1, r5
   1457c:	ble	14588 <__assert_fail@plt+0x30d8>
   14580:	mov	sl, r6
   14584:	b	145f0 <__assert_fail@plt+0x3140>
   14588:	mov	r0, #8
   1458c:	add	r9, r8, #8
   14590:	str	r1, [fp, #-32]	; 0xffffffe0
   14594:	sub	r1, r5, r1
   14598:	mvn	r3, #-2147483648	; 0x80000000
   1459c:	str	r0, [sp]
   145a0:	subs	r0, r6, r9
   145a4:	add	r2, r1, #1
   145a8:	sub	r1, fp, #32
   145ac:	movne	r0, r6
   145b0:	bl	29c48 <__assert_fail@plt+0x18798>
   145b4:	mov	sl, r0
   145b8:	cmp	r6, r9
   145bc:	str	r0, [r8]
   145c0:	bne	145cc <__assert_fail@plt+0x311c>
   145c4:	ldrd	r0, [r8, #8]
   145c8:	stm	sl, {r0, r1}
   145cc:	ldr	r1, [r8, #4]
   145d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145d4:	add	r0, sl, r1, lsl #3
   145d8:	sub	r1, r2, r1
   145dc:	lsl	r2, r1, #3
   145e0:	mov	r1, #0
   145e4:	bl	113cc <memset@plt>
   145e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145ec:	str	r0, [r8, #4]
   145f0:	mov	r9, sl
   145f4:	ldm	r7, {r0, r1}
   145f8:	orr	r8, r1, #1
   145fc:	add	r1, r7, #8
   14600:	ldr	r2, [r7, #40]	; 0x28
   14604:	ldr	r3, [r7, #44]	; 0x2c
   14608:	ldr	r6, [r9, r5, lsl #3]!
   1460c:	str	r1, [sp, #20]
   14610:	ldr	r4, [r9, #4]!
   14614:	stm	sp, {r0, r8}
   14618:	add	r0, sp, #8
   1461c:	stm	r0, {r1, r2, r3}
   14620:	ldr	r2, [sp, #32]
   14624:	ldr	r3, [sp, #36]	; 0x24
   14628:	mov	r1, r6
   1462c:	mov	r0, r4
   14630:	bl	12f3c <__assert_fail@plt+0x1a8c>
   14634:	cmp	r6, r0
   14638:	bhi	1469c <__assert_fail@plt+0x31ec>
   1463c:	add	r6, r0, #1
   14640:	movw	r0, #58800	; 0xe5b0
   14644:	movt	r0, #3
   14648:	str	r6, [sl, r5, lsl #3]
   1464c:	cmp	r4, r0
   14650:	beq	1465c <__assert_fail@plt+0x31ac>
   14654:	mov	r0, r4
   14658:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1465c:	mov	r0, r6
   14660:	bl	29a48 <__assert_fail@plt+0x18598>
   14664:	str	r0, [r9]
   14668:	mov	r4, r0
   1466c:	add	r3, sp, #8
   14670:	ldr	r0, [r7]
   14674:	ldr	r1, [r7, #40]	; 0x28
   14678:	ldr	r2, [r7, #44]	; 0x2c
   1467c:	stm	sp, {r0, r8}
   14680:	ldr	r0, [sp, #20]
   14684:	stm	r3, {r0, r1, r2}
   14688:	ldr	r2, [sp, #32]
   1468c:	ldr	r3, [sp, #36]	; 0x24
   14690:	mov	r0, r4
   14694:	mov	r1, r6
   14698:	bl	12f3c <__assert_fail@plt+0x1a8c>
   1469c:	ldr	r1, [sp, #24]
   146a0:	ldr	r0, [sp, #28]
   146a4:	str	r1, [r0]
   146a8:	mov	r0, r4
   146ac:	sub	sp, fp, #28
   146b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b4:	bl	114a4 <abort@plt>
   146b8:	movw	r3, #58752	; 0xe580
   146bc:	movt	r3, #3
   146c0:	b	14528 <__assert_fail@plt+0x3078>
   146c4:	movw	r3, #58752	; 0xe580
   146c8:	mov	r1, r0
   146cc:	mov	r0, #0
   146d0:	mvn	r2, #0
   146d4:	movt	r3, #3
   146d8:	b	14528 <__assert_fail@plt+0x3078>
   146dc:	movw	r3, #58752	; 0xe580
   146e0:	mov	r2, r1
   146e4:	mov	r1, r0
   146e8:	mov	r0, #0
   146ec:	movt	r3, #3
   146f0:	b	14528 <__assert_fail@plt+0x3078>
   146f4:	push	{fp, lr}
   146f8:	mov	fp, sp
   146fc:	sub	sp, sp, #48	; 0x30
   14700:	vmov.i32	q8, #0	; 0x00000000
   14704:	mov	ip, #32
   14708:	mov	r3, sp
   1470c:	mov	lr, r2
   14710:	cmp	r1, #10
   14714:	add	r2, r3, #16
   14718:	vst1.64	{d16-d17}, [r3], ip
   1471c:	vst1.64	{d16-d17}, [r2]
   14720:	vst1.64	{d16-d17}, [r3]
   14724:	beq	14744 <__assert_fail@plt+0x3294>
   14728:	str	r1, [sp]
   1472c:	mov	r3, sp
   14730:	mov	r1, lr
   14734:	mvn	r2, #0
   14738:	bl	14528 <__assert_fail@plt+0x3078>
   1473c:	mov	sp, fp
   14740:	pop	{fp, pc}
   14744:	bl	114a4 <abort@plt>
   14748:	push	{r4, sl, fp, lr}
   1474c:	add	fp, sp, #8
   14750:	sub	sp, sp, #48	; 0x30
   14754:	vmov.i32	q8, #0	; 0x00000000
   14758:	mov	ip, r3
   1475c:	mov	r3, sp
   14760:	mov	lr, #32
   14764:	cmp	r1, #10
   14768:	add	r4, r3, #16
   1476c:	vst1.64	{d16-d17}, [r3], lr
   14770:	vst1.64	{d16-d17}, [r4]
   14774:	vst1.64	{d16-d17}, [r3]
   14778:	beq	14798 <__assert_fail@plt+0x32e8>
   1477c:	str	r1, [sp]
   14780:	mov	r1, r2
   14784:	mov	r3, sp
   14788:	mov	r2, ip
   1478c:	bl	14528 <__assert_fail@plt+0x3078>
   14790:	sub	sp, fp, #8
   14794:	pop	{r4, sl, fp, pc}
   14798:	bl	114a4 <abort@plt>
   1479c:	push	{fp, lr}
   147a0:	mov	fp, sp
   147a4:	sub	sp, sp, #48	; 0x30
   147a8:	vmov.i32	q8, #0	; 0x00000000
   147ac:	mov	r3, sp
   147b0:	mov	ip, #32
   147b4:	cmp	r0, #10
   147b8:	add	r2, r3, #16
   147bc:	vst1.64	{d16-d17}, [r3], ip
   147c0:	vst1.64	{d16-d17}, [r2]
   147c4:	vst1.64	{d16-d17}, [r3]
   147c8:	beq	147e8 <__assert_fail@plt+0x3338>
   147cc:	str	r0, [sp]
   147d0:	mov	r3, sp
   147d4:	mov	r0, #0
   147d8:	mvn	r2, #0
   147dc:	bl	14528 <__assert_fail@plt+0x3078>
   147e0:	mov	sp, fp
   147e4:	pop	{fp, pc}
   147e8:	bl	114a4 <abort@plt>
   147ec:	push	{fp, lr}
   147f0:	mov	fp, sp
   147f4:	sub	sp, sp, #48	; 0x30
   147f8:	vmov.i32	q8, #0	; 0x00000000
   147fc:	mov	r3, sp
   14800:	mov	ip, #32
   14804:	cmp	r0, #10
   14808:	add	lr, r3, #16
   1480c:	vst1.64	{d16-d17}, [r3], ip
   14810:	vst1.64	{d16-d17}, [lr]
   14814:	vst1.64	{d16-d17}, [r3]
   14818:	beq	14834 <__assert_fail@plt+0x3384>
   1481c:	str	r0, [sp]
   14820:	mov	r3, sp
   14824:	mov	r0, #0
   14828:	bl	14528 <__assert_fail@plt+0x3078>
   1482c:	mov	sp, fp
   14830:	pop	{fp, pc}
   14834:	bl	114a4 <abort@plt>
   14838:	push	{r4, sl, fp, lr}
   1483c:	add	fp, sp, #8
   14840:	sub	sp, sp, #48	; 0x30
   14844:	mov	lr, r0
   14848:	movw	r0, #58752	; 0xe580
   1484c:	mov	ip, r1
   14850:	mov	r1, #32
   14854:	mov	r4, #1
   14858:	movt	r0, #3
   1485c:	add	r3, r0, #16
   14860:	vld1.64	{d16-d17}, [r0], r1
   14864:	vld1.64	{d20-d21}, [r0]
   14868:	vld1.64	{d18-d19}, [r3]
   1486c:	mov	r3, sp
   14870:	add	r0, r3, #32
   14874:	add	r1, r3, #16
   14878:	vst1.64	{d20-d21}, [r0]
   1487c:	mov	r0, #28
   14880:	vst1.64	{d18-d19}, [r1]
   14884:	mov	r1, r3
   14888:	and	r0, r0, r2, lsr #3
   1488c:	and	r2, r2, #31
   14890:	vst1.64	{d16-d17}, [r1], r0
   14894:	ldr	r0, [r1, #8]
   14898:	bic	r4, r4, r0, lsr r2
   1489c:	eor	r0, r0, r4, lsl r2
   148a0:	mov	r2, ip
   148a4:	str	r0, [r1, #8]
   148a8:	mov	r0, #0
   148ac:	mov	r1, lr
   148b0:	bl	14528 <__assert_fail@plt+0x3078>
   148b4:	sub	sp, fp, #8
   148b8:	pop	{r4, sl, fp, pc}
   148bc:	push	{fp, lr}
   148c0:	mov	fp, sp
   148c4:	sub	sp, sp, #48	; 0x30
   148c8:	mov	ip, r0
   148cc:	movw	r0, #58752	; 0xe580
   148d0:	mov	r2, #32
   148d4:	movt	r0, #3
   148d8:	add	r3, r0, #16
   148dc:	vld1.64	{d16-d17}, [r0], r2
   148e0:	vld1.64	{d20-d21}, [r0]
   148e4:	vld1.64	{d18-d19}, [r3]
   148e8:	mov	r3, sp
   148ec:	add	r0, r3, #32
   148f0:	add	r2, r3, #16
   148f4:	vst1.64	{d20-d21}, [r0]
   148f8:	mov	r0, #28
   148fc:	vst1.64	{d18-d19}, [r2]
   14900:	mov	r2, r3
   14904:	and	r0, r0, r1, lsr #3
   14908:	and	r1, r1, #31
   1490c:	vst1.64	{d16-d17}, [r2], r0
   14910:	mov	r0, #1
   14914:	ldr	lr, [r2, #8]
   14918:	bic	r0, r0, lr, lsr r1
   1491c:	eor	r0, lr, r0, lsl r1
   14920:	mov	r1, ip
   14924:	str	r0, [r2, #8]
   14928:	mov	r0, #0
   1492c:	mvn	r2, #0
   14930:	bl	14528 <__assert_fail@plt+0x3078>
   14934:	mov	sp, fp
   14938:	pop	{fp, pc}
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	sub	sp, sp, #48	; 0x30
   14948:	mov	r1, r0
   1494c:	movw	r0, #58752	; 0xe580
   14950:	mov	r3, #32
   14954:	movt	r0, #3
   14958:	add	r2, r0, #16
   1495c:	vld1.64	{d16-d17}, [r0], r3
   14960:	mov	r3, sp
   14964:	vld1.64	{d18-d19}, [r2]
   14968:	vld1.64	{d20-d21}, [r0]
   1496c:	add	r2, r3, #16
   14970:	add	r0, r3, #32
   14974:	vst1.64	{d18-d19}, [r2]
   14978:	vst1.64	{d20-d21}, [r0]
   1497c:	mov	r0, #12
   14980:	mov	r2, r3
   14984:	vst1.64	{d16-d17}, [r2], r0
   14988:	ldr	r0, [r2]
   1498c:	orr	r0, r0, #67108864	; 0x4000000
   14990:	str	r0, [r2]
   14994:	mov	r0, #0
   14998:	mvn	r2, #0
   1499c:	bl	14528 <__assert_fail@plt+0x3078>
   149a0:	mov	sp, fp
   149a4:	pop	{fp, pc}
   149a8:	push	{fp, lr}
   149ac:	mov	fp, sp
   149b0:	sub	sp, sp, #48	; 0x30
   149b4:	mov	ip, r1
   149b8:	mov	r1, r0
   149bc:	movw	r0, #58752	; 0xe580
   149c0:	mov	r2, #32
   149c4:	movt	r0, #3
   149c8:	add	r3, r0, #16
   149cc:	vld1.64	{d16-d17}, [r0], r2
   149d0:	vld1.64	{d18-d19}, [r3]
   149d4:	vld1.64	{d20-d21}, [r0]
   149d8:	mov	r3, sp
   149dc:	add	r2, r3, #16
   149e0:	add	r0, r3, #32
   149e4:	vst1.64	{d18-d19}, [r2]
   149e8:	vst1.64	{d20-d21}, [r0]
   149ec:	mov	r0, #12
   149f0:	mov	r2, r3
   149f4:	vst1.64	{d16-d17}, [r2], r0
   149f8:	ldr	r0, [r2]
   149fc:	orr	r0, r0, #67108864	; 0x4000000
   14a00:	str	r0, [r2]
   14a04:	mov	r0, #0
   14a08:	mov	r2, ip
   14a0c:	bl	14528 <__assert_fail@plt+0x3078>
   14a10:	mov	sp, fp
   14a14:	pop	{fp, pc}
   14a18:	push	{r4, sl, fp, lr}
   14a1c:	add	fp, sp, #8
   14a20:	sub	sp, sp, #96	; 0x60
   14a24:	vmov.i32	q8, #0	; 0x00000000
   14a28:	mov	ip, r2
   14a2c:	mov	r2, sp
   14a30:	mov	r4, #28
   14a34:	cmp	r1, #10
   14a38:	mov	r3, r2
   14a3c:	add	lr, r2, #16
   14a40:	vst1.64	{d16-d17}, [r3], r4
   14a44:	vst1.64	{d16-d17}, [lr]
   14a48:	vst1.32	{d16-d17}, [r3]
   14a4c:	beq	14a9c <__assert_fail@plt+0x35ec>
   14a50:	vld1.64	{d16-d17}, [r2], r4
   14a54:	vld1.64	{d18-d19}, [lr]
   14a58:	add	r3, sp, #48	; 0x30
   14a5c:	vld1.32	{d20-d21}, [r2]
   14a60:	add	r2, r3, #20
   14a64:	add	r4, r3, #4
   14a68:	vst1.32	{d18-d19}, [r2]
   14a6c:	add	r2, r3, #32
   14a70:	vst1.32	{d16-d17}, [r4]
   14a74:	vst1.32	{d20-d21}, [r2]
   14a78:	str	r1, [sp, #48]	; 0x30
   14a7c:	mvn	r2, #0
   14a80:	ldr	r1, [sp, #60]	; 0x3c
   14a84:	orr	r1, r1, #67108864	; 0x4000000
   14a88:	str	r1, [sp, #60]	; 0x3c
   14a8c:	mov	r1, ip
   14a90:	bl	14528 <__assert_fail@plt+0x3078>
   14a94:	sub	sp, fp, #8
   14a98:	pop	{r4, sl, fp, pc}
   14a9c:	bl	114a4 <abort@plt>
   14aa0:	push	{r4, r5, r6, sl, fp, lr}
   14aa4:	add	fp, sp, #16
   14aa8:	sub	sp, sp, #48	; 0x30
   14aac:	mov	ip, r3
   14ab0:	movw	r3, #58752	; 0xe580
   14ab4:	mov	r6, #32
   14ab8:	cmp	r1, #0
   14abc:	mov	r4, sp
   14ac0:	movt	r3, #3
   14ac4:	cmpne	r2, #0
   14ac8:	add	r5, r4, #16
   14acc:	add	lr, r3, #16
   14ad0:	vld1.64	{d16-d17}, [r3], r6
   14ad4:	vld1.64	{d18-d19}, [lr]
   14ad8:	vld1.64	{d20-d21}, [r3]
   14adc:	mov	r3, #10
   14ae0:	vst1.64	{d16-d17}, [r4], r6
   14ae4:	vst1.64	{d18-d19}, [r5]
   14ae8:	vst1.64	{d20-d21}, [r4]
   14aec:	str	r3, [sp]
   14af0:	bne	14af8 <__assert_fail@plt+0x3648>
   14af4:	bl	114a4 <abort@plt>
   14af8:	str	r2, [sp, #44]	; 0x2c
   14afc:	str	r1, [sp, #40]	; 0x28
   14b00:	mov	r3, sp
   14b04:	mov	r1, ip
   14b08:	mvn	r2, #0
   14b0c:	bl	14528 <__assert_fail@plt+0x3078>
   14b10:	sub	sp, fp, #16
   14b14:	pop	{r4, r5, r6, sl, fp, pc}
   14b18:	push	{r4, r5, r6, sl, fp, lr}
   14b1c:	add	fp, sp, #16
   14b20:	sub	sp, sp, #48	; 0x30
   14b24:	mov	lr, r3
   14b28:	movw	r3, #58752	; 0xe580
   14b2c:	mov	r6, #32
   14b30:	cmp	r1, #0
   14b34:	mov	r4, sp
   14b38:	movt	r3, #3
   14b3c:	cmpne	r2, #0
   14b40:	add	r5, r4, #16
   14b44:	add	ip, r3, #16
   14b48:	vld1.64	{d16-d17}, [r3], r6
   14b4c:	vld1.64	{d18-d19}, [ip]
   14b50:	vld1.64	{d20-d21}, [r3]
   14b54:	mov	r3, #10
   14b58:	vst1.64	{d16-d17}, [r4], r6
   14b5c:	vst1.64	{d18-d19}, [r5]
   14b60:	vst1.64	{d20-d21}, [r4]
   14b64:	str	r3, [sp]
   14b68:	bne	14b70 <__assert_fail@plt+0x36c0>
   14b6c:	bl	114a4 <abort@plt>
   14b70:	ldr	ip, [fp, #8]
   14b74:	str	r2, [sp, #44]	; 0x2c
   14b78:	str	r1, [sp, #40]	; 0x28
   14b7c:	mov	r3, sp
   14b80:	mov	r1, lr
   14b84:	mov	r2, ip
   14b88:	bl	14528 <__assert_fail@plt+0x3078>
   14b8c:	sub	sp, fp, #16
   14b90:	pop	{r4, r5, r6, sl, fp, pc}
   14b94:	push	{r4, sl, fp, lr}
   14b98:	add	fp, sp, #8
   14b9c:	sub	sp, sp, #48	; 0x30
   14ba0:	movw	r3, #58752	; 0xe580
   14ba4:	mov	lr, #32
   14ba8:	mov	ip, r2
   14bac:	cmp	r0, #0
   14bb0:	movt	r3, #3
   14bb4:	cmpne	r1, #0
   14bb8:	add	r2, r3, #16
   14bbc:	vld1.64	{d16-d17}, [r3], lr
   14bc0:	vld1.64	{d20-d21}, [r3]
   14bc4:	vld1.64	{d18-d19}, [r2]
   14bc8:	mov	r2, sp
   14bcc:	add	r4, r2, #16
   14bd0:	vst1.64	{d16-d17}, [r2], lr
   14bd4:	vst1.64	{d20-d21}, [r2]
   14bd8:	mov	r2, #10
   14bdc:	vst1.64	{d18-d19}, [r4]
   14be0:	str	r2, [sp]
   14be4:	bne	14bec <__assert_fail@plt+0x373c>
   14be8:	bl	114a4 <abort@plt>
   14bec:	str	r1, [sp, #44]	; 0x2c
   14bf0:	str	r0, [sp, #40]	; 0x28
   14bf4:	mov	r3, sp
   14bf8:	mov	r0, #0
   14bfc:	mov	r1, ip
   14c00:	mvn	r2, #0
   14c04:	bl	14528 <__assert_fail@plt+0x3078>
   14c08:	sub	sp, fp, #8
   14c0c:	pop	{r4, sl, fp, pc}
   14c10:	push	{r4, r5, fp, lr}
   14c14:	add	fp, sp, #8
   14c18:	sub	sp, sp, #48	; 0x30
   14c1c:	mov	ip, r3
   14c20:	movw	r3, #58752	; 0xe580
   14c24:	mov	r4, #32
   14c28:	mov	lr, r2
   14c2c:	cmp	r0, #0
   14c30:	movt	r3, #3
   14c34:	cmpne	r1, #0
   14c38:	add	r2, r3, #16
   14c3c:	vld1.64	{d16-d17}, [r3], r4
   14c40:	vld1.64	{d20-d21}, [r3]
   14c44:	vld1.64	{d18-d19}, [r2]
   14c48:	mov	r2, sp
   14c4c:	add	r5, r2, #16
   14c50:	vst1.64	{d16-d17}, [r2], r4
   14c54:	vst1.64	{d20-d21}, [r2]
   14c58:	mov	r2, #10
   14c5c:	vst1.64	{d18-d19}, [r5]
   14c60:	str	r2, [sp]
   14c64:	bne	14c6c <__assert_fail@plt+0x37bc>
   14c68:	bl	114a4 <abort@plt>
   14c6c:	str	r1, [sp, #44]	; 0x2c
   14c70:	str	r0, [sp, #40]	; 0x28
   14c74:	mov	r3, sp
   14c78:	mov	r0, #0
   14c7c:	mov	r1, lr
   14c80:	mov	r2, ip
   14c84:	bl	14528 <__assert_fail@plt+0x3078>
   14c88:	sub	sp, fp, #8
   14c8c:	pop	{r4, r5, fp, pc}
   14c90:	movw	r3, #57704	; 0xe168
   14c94:	movt	r3, #3
   14c98:	b	14528 <__assert_fail@plt+0x3078>
   14c9c:	movw	r3, #57704	; 0xe168
   14ca0:	mov	r2, r1
   14ca4:	mov	r1, r0
   14ca8:	mov	r0, #0
   14cac:	movt	r3, #3
   14cb0:	b	14528 <__assert_fail@plt+0x3078>
   14cb4:	movw	r3, #57704	; 0xe168
   14cb8:	mvn	r2, #0
   14cbc:	movt	r3, #3
   14cc0:	b	14528 <__assert_fail@plt+0x3078>
   14cc4:	movw	r3, #57704	; 0xe168
   14cc8:	mov	r1, r0
   14ccc:	mov	r0, #0
   14cd0:	mvn	r2, #0
   14cd4:	movt	r3, #3
   14cd8:	b	14528 <__assert_fail@plt+0x3078>
   14cdc:	andeq	r0, r0, r0
   14ce0:	push	{fp, lr}
   14ce4:	mov	fp, sp
   14ce8:	mov	lr, r0
   14cec:	movw	r0, #59056	; 0xe6b0
   14cf0:	mov	ip, r1
   14cf4:	ldrb	r1, [r2, #28]
   14cf8:	movt	r0, #3
   14cfc:	ldr	r3, [r0]
   14d00:	mov	r0, #16
   14d04:	and	r1, r1, #111	; 0x6f
   14d08:	and	r0, r0, r3, lsr #21
   14d0c:	orr	r0, r1, r0
   14d10:	mov	r1, lr
   14d14:	orr	r0, r0, #128	; 0x80
   14d18:	strb	r0, [r2, #28]
   14d1c:	mov	r0, r2
   14d20:	mov	r2, ip
   14d24:	bl	14d60 <__assert_fail@plt+0x38b0>
   14d28:	cmp	r0, #0
   14d2c:	beq	14d58 <__assert_fail@plt+0x38a8>
   14d30:	movw	r1, #53152	; 0xcfa0
   14d34:	mov	r2, #5
   14d38:	movt	r1, #2
   14d3c:	ldr	r0, [r1, r0, lsl #2]
   14d40:	movw	r1, #52768	; 0xce20
   14d44:	movt	r1, #2
   14d48:	add	r1, r1, r0
   14d4c:	mov	r0, #0
   14d50:	pop	{fp, lr}
   14d54:	b	112a0 <dcgettext@plt>
   14d58:	mov	r0, #0
   14d5c:	pop	{fp, pc}
   14d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d64:	add	fp, sp, #28
   14d68:	sub	sp, sp, #140	; 0x8c
   14d6c:	mov	sl, r0
   14d70:	mov	r0, #0
   14d74:	mov	r9, r3
   14d78:	mov	r7, r2
   14d7c:	str	r1, [sp, #28]
   14d80:	str	r0, [fp, #-52]	; 0xffffffcc
   14d84:	str	r0, [sl, #24]
   14d88:	str	r0, [sl, #8]
   14d8c:	str	r3, [sl, #12]
   14d90:	ldrb	r0, [sl, #28]
   14d94:	and	r0, r0, #144	; 0x90
   14d98:	strb	r0, [sl, #28]
   14d9c:	ldr	r0, [sl, #4]
   14da0:	ldr	r5, [sl]
   14da4:	cmp	r0, #159	; 0x9f
   14da8:	bls	158c4 <__assert_fail@plt+0x4414>
   14dac:	mov	r0, #160	; 0xa0
   14db0:	mov	r1, #0
   14db4:	mov	r2, #160	; 0xa0
   14db8:	str	r0, [sl, #8]
   14dbc:	mov	r0, r5
   14dc0:	bl	113cc <memset@plt>
   14dc4:	mov	r0, #31
   14dc8:	str	r0, [r5, #64]	; 0x40
   14dcc:	movw	r0, #43689	; 0xaaa9
   14dd0:	movt	r0, #2730	; 0xaaa
   14dd4:	cmp	r7, r0
   14dd8:	bhi	151d8 <__assert_fail@plt+0x3d28>
   14ddc:	add	r8, r7, #1
   14de0:	lsl	r0, r8, #3
   14de4:	str	r8, [r5, #4]
   14de8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   14dec:	str	r0, [r5]
   14df0:	mov	r0, #1
   14df4:	mov	r6, r0
   14df8:	lsl	r0, r0, #1
   14dfc:	cmp	r6, r7
   14e00:	bls	14df4 <__assert_fail@plt+0x3944>
   14e04:	mov	r0, #12
   14e08:	mov	r1, r6
   14e0c:	bl	2ba08 <__assert_fail@plt+0x1a558>
   14e10:	sub	r1, r6, #1
   14e14:	str	r1, [r5, #68]	; 0x44
   14e18:	str	r0, [r5, #32]
   14e1c:	bl	112e8 <__ctype_get_mb_cur_max@plt>
   14e20:	str	r0, [r5, #92]	; 0x5c
   14e24:	mov	r0, #14
   14e28:	bl	11450 <nl_langinfo@plt>
   14e2c:	ldrb	r1, [r0]
   14e30:	orr	r1, r1, #32
   14e34:	cmp	r1, #117	; 0x75
   14e38:	bne	14e88 <__assert_fail@plt+0x39d8>
   14e3c:	ldrb	r1, [r0, #1]
   14e40:	orr	r1, r1, #32
   14e44:	cmp	r1, #116	; 0x74
   14e48:	bne	14e88 <__assert_fail@plt+0x39d8>
   14e4c:	ldrb	r1, [r0, #2]
   14e50:	orr	r1, r1, #32
   14e54:	cmp	r1, #102	; 0x66
   14e58:	bne	14e88 <__assert_fail@plt+0x39d8>
   14e5c:	ldrb	r1, [r0, #3]!
   14e60:	cmp	r1, #45	; 0x2d
   14e64:	movw	r1, #53268	; 0xd014
   14e68:	movt	r1, #2
   14e6c:	addeq	r0, r0, #1
   14e70:	bl	111f8 <strcmp@plt>
   14e74:	cmp	r0, #0
   14e78:	bne	14e88 <__assert_fail@plt+0x39d8>
   14e7c:	ldrb	r0, [r5, #88]	; 0x58
   14e80:	orr	r0, r0, #4
   14e84:	strb	r0, [r5, #88]	; 0x58
   14e88:	ldrb	r0, [r5, #88]	; 0x58
   14e8c:	and	r1, r0, #247	; 0xf7
   14e90:	strb	r1, [r5, #88]	; 0x58
   14e94:	ldr	r1, [r5, #92]	; 0x5c
   14e98:	cmp	r1, #2
   14e9c:	blt	151c4 <__assert_fail@plt+0x3d14>
   14ea0:	tst	r0, #4
   14ea4:	bne	14f20 <__assert_fail@plt+0x3a70>
   14ea8:	mov	r0, #32
   14eac:	mov	r1, #1
   14eb0:	mov	r4, #1
   14eb4:	bl	2ba08 <__assert_fail@plt+0x1a558>
   14eb8:	cmp	r0, #0
   14ebc:	str	r0, [r5, #60]	; 0x3c
   14ec0:	beq	151d8 <__assert_fail@plt+0x3d28>
   14ec4:	mov	r6, #0
   14ec8:	mov	r0, r6
   14ecc:	bl	113d8 <btowc@plt>
   14ed0:	cmn	r0, #1
   14ed4:	bne	14ef8 <__assert_fail@plt+0x3a48>
   14ed8:	b	14f08 <__assert_fail@plt+0x3a58>
   14edc:	add	r6, r6, #1
   14ee0:	cmp	r6, #32
   14ee4:	beq	14f30 <__assert_fail@plt+0x3a80>
   14ee8:	mov	r0, r6
   14eec:	bl	113d8 <btowc@plt>
   14ef0:	cmn	r0, #1
   14ef4:	beq	14f08 <__assert_fail@plt+0x3a58>
   14ef8:	ldr	r1, [r5, #60]	; 0x3c
   14efc:	ldr	r2, [r1]
   14f00:	orr	r2, r2, r4, lsl r6
   14f04:	str	r2, [r1]
   14f08:	cmp	r6, r0
   14f0c:	beq	14edc <__assert_fail@plt+0x3a2c>
   14f10:	ldrb	r0, [r5, #88]	; 0x58
   14f14:	orr	r0, r0, #8
   14f18:	strb	r0, [r5, #88]	; 0x58
   14f1c:	b	14edc <__assert_fail@plt+0x3a2c>
   14f20:	movw	r0, #53220	; 0xcfe4
   14f24:	movt	r0, #2
   14f28:	str	r0, [r5, #60]	; 0x3c
   14f2c:	b	151c4 <__assert_fail@plt+0x3d14>
   14f30:	mov	r6, #32
   14f34:	mov	r4, #1
   14f38:	mov	r0, r6
   14f3c:	bl	113d8 <btowc@plt>
   14f40:	cmn	r0, #1
   14f44:	bne	14f70 <__assert_fail@plt+0x3ac0>
   14f48:	b	14f84 <__assert_fail@plt+0x3ad4>
   14f4c:	sub	r1, r6, #31
   14f50:	add	r0, r6, #1
   14f54:	cmp	r1, #32
   14f58:	mov	r6, r0
   14f5c:	beq	14f9c <__assert_fail@plt+0x3aec>
   14f60:	mov	r0, r6
   14f64:	bl	113d8 <btowc@plt>
   14f68:	cmn	r0, #1
   14f6c:	beq	14f84 <__assert_fail@plt+0x3ad4>
   14f70:	ldr	r2, [r5, #60]	; 0x3c
   14f74:	sub	r1, r6, #32
   14f78:	ldr	r3, [r2, #4]
   14f7c:	orr	r1, r3, r4, lsl r1
   14f80:	str	r1, [r2, #4]
   14f84:	cmp	r0, r6
   14f88:	beq	14f4c <__assert_fail@plt+0x3a9c>
   14f8c:	ldrb	r0, [r5, #88]	; 0x58
   14f90:	orr	r0, r0, #8
   14f94:	strb	r0, [r5, #88]	; 0x58
   14f98:	b	14f4c <__assert_fail@plt+0x3a9c>
   14f9c:	mov	r6, #64	; 0x40
   14fa0:	mov	r4, #1
   14fa4:	mov	r0, r6
   14fa8:	bl	113d8 <btowc@plt>
   14fac:	cmn	r0, #1
   14fb0:	bne	14fdc <__assert_fail@plt+0x3b2c>
   14fb4:	b	14ff0 <__assert_fail@plt+0x3b40>
   14fb8:	sub	r1, r6, #63	; 0x3f
   14fbc:	add	r0, r6, #1
   14fc0:	cmp	r1, #32
   14fc4:	mov	r6, r0
   14fc8:	beq	15008 <__assert_fail@plt+0x3b58>
   14fcc:	mov	r0, r6
   14fd0:	bl	113d8 <btowc@plt>
   14fd4:	cmn	r0, #1
   14fd8:	beq	14ff0 <__assert_fail@plt+0x3b40>
   14fdc:	ldr	r2, [r5, #60]	; 0x3c
   14fe0:	sub	r1, r6, #64	; 0x40
   14fe4:	ldr	r3, [r2, #8]
   14fe8:	orr	r1, r3, r4, lsl r1
   14fec:	str	r1, [r2, #8]
   14ff0:	cmp	r0, r6
   14ff4:	beq	14fb8 <__assert_fail@plt+0x3b08>
   14ff8:	ldrb	r0, [r5, #88]	; 0x58
   14ffc:	orr	r0, r0, #8
   15000:	strb	r0, [r5, #88]	; 0x58
   15004:	b	14fb8 <__assert_fail@plt+0x3b08>
   15008:	mov	r6, #96	; 0x60
   1500c:	mov	r4, #1
   15010:	mov	r0, r6
   15014:	bl	113d8 <btowc@plt>
   15018:	cmn	r0, #1
   1501c:	bne	15048 <__assert_fail@plt+0x3b98>
   15020:	b	1505c <__assert_fail@plt+0x3bac>
   15024:	sub	r1, r6, #95	; 0x5f
   15028:	add	r0, r6, #1
   1502c:	cmp	r1, #32
   15030:	mov	r6, r0
   15034:	beq	15074 <__assert_fail@plt+0x3bc4>
   15038:	mov	r0, r6
   1503c:	bl	113d8 <btowc@plt>
   15040:	cmn	r0, #1
   15044:	beq	1505c <__assert_fail@plt+0x3bac>
   15048:	ldr	r2, [r5, #60]	; 0x3c
   1504c:	sub	r1, r6, #96	; 0x60
   15050:	ldr	r3, [r2, #12]
   15054:	orr	r1, r3, r4, lsl r1
   15058:	str	r1, [r2, #12]
   1505c:	cmp	r0, r6
   15060:	beq	15024 <__assert_fail@plt+0x3b74>
   15064:	ldrb	r0, [r5, #88]	; 0x58
   15068:	orr	r0, r0, #8
   1506c:	strb	r0, [r5, #88]	; 0x58
   15070:	b	15024 <__assert_fail@plt+0x3b74>
   15074:	mov	r6, #128	; 0x80
   15078:	mov	r4, #1
   1507c:	mov	r0, r6
   15080:	bl	113d8 <btowc@plt>
   15084:	cmn	r0, #1
   15088:	bne	150b0 <__assert_fail@plt+0x3c00>
   1508c:	sub	r1, r6, #127	; 0x7f
   15090:	add	r0, r6, #1
   15094:	cmp	r1, #32
   15098:	mov	r6, r0
   1509c:	beq	150c8 <__assert_fail@plt+0x3c18>
   150a0:	mov	r0, r6
   150a4:	bl	113d8 <btowc@plt>
   150a8:	cmn	r0, #1
   150ac:	beq	1508c <__assert_fail@plt+0x3bdc>
   150b0:	ldr	r1, [r5, #60]	; 0x3c
   150b4:	sub	r0, r6, #128	; 0x80
   150b8:	ldr	r2, [r1, #16]
   150bc:	orr	r0, r2, r4, lsl r0
   150c0:	str	r0, [r1, #16]
   150c4:	b	1508c <__assert_fail@plt+0x3bdc>
   150c8:	mov	r6, #160	; 0xa0
   150cc:	mov	r4, #1
   150d0:	mov	r0, r6
   150d4:	bl	113d8 <btowc@plt>
   150d8:	cmn	r0, #1
   150dc:	bne	15104 <__assert_fail@plt+0x3c54>
   150e0:	sub	r1, r6, #159	; 0x9f
   150e4:	add	r0, r6, #1
   150e8:	cmp	r1, #32
   150ec:	mov	r6, r0
   150f0:	beq	1511c <__assert_fail@plt+0x3c6c>
   150f4:	mov	r0, r6
   150f8:	bl	113d8 <btowc@plt>
   150fc:	cmn	r0, #1
   15100:	beq	150e0 <__assert_fail@plt+0x3c30>
   15104:	ldr	r1, [r5, #60]	; 0x3c
   15108:	sub	r0, r6, #160	; 0xa0
   1510c:	ldr	r2, [r1, #20]
   15110:	orr	r0, r2, r4, lsl r0
   15114:	str	r0, [r1, #20]
   15118:	b	150e0 <__assert_fail@plt+0x3c30>
   1511c:	mov	r6, #192	; 0xc0
   15120:	mov	r4, #1
   15124:	mov	r0, r6
   15128:	bl	113d8 <btowc@plt>
   1512c:	cmn	r0, #1
   15130:	bne	15158 <__assert_fail@plt+0x3ca8>
   15134:	sub	r1, r6, #191	; 0xbf
   15138:	add	r0, r6, #1
   1513c:	cmp	r1, #32
   15140:	mov	r6, r0
   15144:	beq	15170 <__assert_fail@plt+0x3cc0>
   15148:	mov	r0, r6
   1514c:	bl	113d8 <btowc@plt>
   15150:	cmn	r0, #1
   15154:	beq	15134 <__assert_fail@plt+0x3c84>
   15158:	ldr	r1, [r5, #60]	; 0x3c
   1515c:	sub	r0, r6, #192	; 0xc0
   15160:	ldr	r2, [r1, #24]
   15164:	orr	r0, r2, r4, lsl r0
   15168:	str	r0, [r1, #24]
   1516c:	b	15134 <__assert_fail@plt+0x3c84>
   15170:	mov	r6, #224	; 0xe0
   15174:	mov	r4, #1
   15178:	mov	r0, r6
   1517c:	bl	113d8 <btowc@plt>
   15180:	cmn	r0, #1
   15184:	bne	151ac <__assert_fail@plt+0x3cfc>
   15188:	sub	r1, r6, #223	; 0xdf
   1518c:	add	r0, r6, #1
   15190:	cmp	r1, #32
   15194:	mov	r6, r0
   15198:	beq	151c4 <__assert_fail@plt+0x3d14>
   1519c:	mov	r0, r6
   151a0:	bl	113d8 <btowc@plt>
   151a4:	cmn	r0, #1
   151a8:	beq	15188 <__assert_fail@plt+0x3cd8>
   151ac:	ldr	r1, [r5, #60]	; 0x3c
   151b0:	sub	r0, r6, #224	; 0xe0
   151b4:	ldr	r2, [r1, #28]
   151b8:	orr	r0, r2, r4, lsl r0
   151bc:	str	r0, [r1, #28]
   151c0:	b	15188 <__assert_fail@plt+0x3cd8>
   151c4:	ldr	r0, [r5]
   151c8:	cmp	r0, #0
   151cc:	ldrne	r0, [r5, #32]
   151d0:	cmpne	r0, #0
   151d4:	bne	15200 <__assert_fail@plt+0x3d50>
   151d8:	mov	r4, #12
   151dc:	mov	r0, r5
   151e0:	str	r4, [fp, #-52]	; 0xffffffcc
   151e4:	bl	17394 <__assert_fail@plt+0x5ee4>
   151e8:	mov	r0, #0
   151ec:	str	r0, [sl]
   151f0:	str	r0, [sl, #4]
   151f4:	mov	r0, r4
   151f8:	sub	sp, fp, #28
   151fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15200:	movw	r0, #0
   15204:	movw	r1, #0
   15208:	mov	r6, #0
   1520c:	movt	r0, #0
   15210:	movt	r1, #0
   15214:	str	r6, [fp, #-52]	; 0xffffffcc
   15218:	orrs	r4, r1, r0
   1521c:	beq	15234 <__assert_fail@plt+0x3d84>
   15220:	add	r0, r5, #136	; 0x88
   15224:	mov	r1, #0
   15228:	bl	11264 <pthread_mutex_init@plt>
   1522c:	cmp	r0, #0
   15230:	bne	151d8 <__assert_fail@plt+0x3d28>
   15234:	vmov.i32	q8, #0	; 0x00000000
   15238:	add	r1, sp, #32
   1523c:	str	r4, [sp, #8]
   15240:	ldr	r4, [sl, #20]
   15244:	ldr	r3, [sp, #28]
   15248:	add	r0, r1, #64	; 0x40
   1524c:	vst1.32	{d16-d17}, [r0]
   15250:	add	r0, r1, #52	; 0x34
   15254:	vst1.32	{d16-d17}, [r0]
   15258:	add	r0, r1, #36	; 0x24
   1525c:	vst1.32	{d16-d17}, [r0]
   15260:	add	r0, r1, #20
   15264:	vst1.32	{d16-d17}, [r0]
   15268:	add	r0, r1, #4
   1526c:	add	r1, r1, #44	; 0x2c
   15270:	vst1.32	{d16-d17}, [r0]
   15274:	str	r3, [sp, #32]
   15278:	ubfx	r0, r9, #22, #1
   1527c:	str	r9, [sp, #24]
   15280:	vdup.32	q8, r7
   15284:	str	r5, [sp, #20]
   15288:	strb	r0, [sp, #104]	; 0x68
   1528c:	and	r0, r9, #4194304	; 0x400000
   15290:	str	r4, [sp, #96]	; 0x60
   15294:	orrs	r9, r0, r4
   15298:	str	r0, [sp, #12]
   1529c:	movwne	r9, #1
   152a0:	cmp	r7, #1
   152a4:	strb	r9, [sp, #107]	; 0x6b
   152a8:	ldr	r0, [r5, #92]	; 0x5c
   152ac:	str	r0, [sp, #112]	; 0x70
   152b0:	ldrb	r2, [r5, #88]	; 0x58
   152b4:	vst1.32	{d16-d17}, [r1]
   152b8:	ubfx	r1, r2, #3, #1
   152bc:	strb	r1, [sp, #106]	; 0x6a
   152c0:	ubfx	r1, r2, #2, #1
   152c4:	strb	r1, [sp, #105]	; 0x69
   152c8:	blt	15340 <__assert_fail@plt+0x3e90>
   152cc:	cmp	r0, #2
   152d0:	blt	152fc <__assert_fail@plt+0x3e4c>
   152d4:	mov	r6, #12
   152d8:	cmn	r7, #-1073741822	; 0xc0000002
   152dc:	bhi	158a8 <__assert_fail@plt+0x43f8>
   152e0:	lsl	r1, r8, #2
   152e4:	mov	r0, #0
   152e8:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   152ec:	cmp	r0, #0
   152f0:	beq	158a8 <__assert_fail@plt+0x43f8>
   152f4:	ldr	r3, [sp, #28]
   152f8:	str	r0, [sp, #40]	; 0x28
   152fc:	cmp	r9, #0
   15300:	mov	r6, #0
   15304:	mov	r9, #0
   15308:	beq	15330 <__assert_fail@plt+0x3e80>
   1530c:	mov	r0, #0
   15310:	mov	r1, r8
   15314:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   15318:	cmp	r0, #0
   1531c:	beq	158a4 <__assert_fail@plt+0x43f4>
   15320:	ldr	r3, [sp, #28]
   15324:	mov	r6, r0
   15328:	mov	r9, #1
   1532c:	str	r0, [sp, #36]	; 0x24
   15330:	ldr	r0, [sp, #20]
   15334:	str	r8, [sp, #68]	; 0x44
   15338:	ldr	r0, [r0, #92]	; 0x5c
   1533c:	b	15344 <__assert_fail@plt+0x3e94>
   15340:	mov	r8, #0
   15344:	ldr	r1, [sp, #12]
   15348:	cmp	r9, #0
   1534c:	moveq	r6, r3
   15350:	str	r6, [sp, #36]	; 0x24
   15354:	cmp	r1, #0
   15358:	beq	15448 <__assert_fail@plt+0x3f98>
   1535c:	cmp	r0, #2
   15360:	blt	15460 <__assert_fail@plt+0x3fb0>
   15364:	add	r0, sp, #32
   15368:	bl	1a7c0 <__assert_fail@plt+0x9310>
   1536c:	ldr	r9, [sp, #20]
   15370:	cmp	r0, #0
   15374:	bne	1589c <__assert_fail@plt+0x43ec>
   15378:	add	r5, sp, #32
   1537c:	ldr	r0, [sp, #64]	; 0x40
   15380:	cmp	r0, r7
   15384:	blt	153ac <__assert_fail@plt+0x3efc>
   15388:	b	15554 <__assert_fail@plt+0x40a4>
   1538c:	mov	r0, r5
   15390:	str	r4, [sp, #68]	; 0x44
   15394:	bl	1a7c0 <__assert_fail@plt+0x9310>
   15398:	cmp	r0, #0
   1539c:	bne	1589c <__assert_fail@plt+0x43ec>
   153a0:	ldr	r0, [sp, #64]	; 0x40
   153a4:	cmp	r0, r7
   153a8:	bge	15554 <__assert_fail@plt+0x40a4>
   153ac:	ldr	r0, [r9, #92]	; 0x5c
   153b0:	ldr	r2, [sp, #60]	; 0x3c
   153b4:	ldr	r1, [sp, #68]	; 0x44
   153b8:	add	r0, r0, r2
   153bc:	cmp	r1, r0
   153c0:	bgt	15554 <__assert_fail@plt+0x40a4>
   153c4:	ldr	r0, [sp, #112]	; 0x70
   153c8:	lsl	r4, r1, #1
   153cc:	cmp	r0, #2
   153d0:	blt	15420 <__assert_fail@plt+0x3f70>
   153d4:	mov	r6, #12
   153d8:	cmn	r4, #-1073741823	; 0xc0000001
   153dc:	bhi	158a8 <__assert_fail@plt+0x43f8>
   153e0:	ldr	r0, [sp, #40]	; 0x28
   153e4:	lsl	r8, r1, #3
   153e8:	mov	r1, r8
   153ec:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   153f0:	cmp	r0, #0
   153f4:	beq	158a8 <__assert_fail@plt+0x43f8>
   153f8:	str	r0, [sp, #40]	; 0x28
   153fc:	ldr	r0, [sp, #44]	; 0x2c
   15400:	cmp	r0, #0
   15404:	beq	15420 <__assert_fail@plt+0x3f70>
   15408:	mov	r1, r8
   1540c:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   15410:	cmp	r0, #0
   15414:	beq	158a8 <__assert_fail@plt+0x43f8>
   15418:	ldr	r9, [sp, #20]
   1541c:	str	r0, [sp, #44]	; 0x2c
   15420:	ldrb	r0, [sp, #107]	; 0x6b
   15424:	cmp	r0, #0
   15428:	beq	1538c <__assert_fail@plt+0x3edc>
   1542c:	ldr	r0, [sp, #36]	; 0x24
   15430:	mov	r1, r4
   15434:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   15438:	cmp	r0, #0
   1543c:	beq	158a4 <__assert_fail@plt+0x43f4>
   15440:	str	r0, [sp, #36]	; 0x24
   15444:	b	1538c <__assert_fail@plt+0x3edc>
   15448:	cmp	r0, #2
   1544c:	blt	154e0 <__assert_fail@plt+0x4030>
   15450:	add	r0, sp, #32
   15454:	bl	1b0e0 <__assert_fail@plt+0x9c30>
   15458:	ldr	r9, [sp, #20]
   1545c:	b	15554 <__assert_fail@plt+0x40a4>
   15460:	ldr	r9, [sp, #20]
   15464:	cmp	r8, r7
   15468:	movgt	r8, r7
   1546c:	cmp	r8, #1
   15470:	blt	15548 <__assert_fail@plt+0x4098>
   15474:	mov	r6, #0
   15478:	bl	11348 <__ctype_toupper_loc@plt>
   1547c:	ldr	r3, [sp, #28]
   15480:	mov	r1, #0
   15484:	add	r2, r3, r6
   15488:	cmp	r4, #0
   1548c:	ldrb	r2, [r2, r1]
   15490:	beq	154bc <__assert_fail@plt+0x400c>
   15494:	b	154b8 <__assert_fail@plt+0x4008>
   15498:	ldr	r3, [sp, #32]
   1549c:	ldr	r6, [sp, #56]	; 0x38
   154a0:	ldr	r4, [sp, #96]	; 0x60
   154a4:	mov	r1, r2
   154a8:	add	r2, r3, r6
   154ac:	cmp	r4, #0
   154b0:	ldrb	r2, [r2, r1]
   154b4:	beq	154bc <__assert_fail@plt+0x400c>
   154b8:	ldrb	r2, [r4, r2]
   154bc:	ldr	r3, [r0]
   154c0:	ldr	r2, [r3, r2, lsl #2]
   154c4:	ldr	r3, [sp, #36]	; 0x24
   154c8:	strb	r2, [r3, r1]
   154cc:	add	r2, r1, #1
   154d0:	cmp	r2, r8
   154d4:	blt	15498 <__assert_fail@plt+0x3fe8>
   154d8:	add	r0, r1, #1
   154dc:	b	1554c <__assert_fail@plt+0x409c>
   154e0:	ldr	r9, [sp, #20]
   154e4:	cmp	r4, #0
   154e8:	beq	157fc <__assert_fail@plt+0x434c>
   154ec:	cmp	r8, r7
   154f0:	movgt	r8, r7
   154f4:	cmp	r8, #1
   154f8:	blt	15548 <__assert_fail@plt+0x4098>
   154fc:	ldrb	r0, [r3]
   15500:	cmp	r8, #1
   15504:	ldrb	r0, [r4, r0]
   15508:	strb	r0, [r6]
   1550c:	mov	r0, #1
   15510:	beq	1554c <__assert_fail@plt+0x409c>
   15514:	mov	r0, #1
   15518:	ldr	r1, [sp, #32]
   1551c:	ldr	r3, [sp, #56]	; 0x38
   15520:	ldr	r7, [sp, #96]	; 0x60
   15524:	ldr	r2, [sp, #36]	; 0x24
   15528:	add	r1, r1, r3
   1552c:	ldrb	r1, [r1, r0]
   15530:	ldrb	r1, [r7, r1]
   15534:	strb	r1, [r2, r0]
   15538:	add	r0, r0, #1
   1553c:	cmp	r0, r8
   15540:	blt	15518 <__assert_fail@plt+0x4068>
   15544:	b	1554c <__assert_fail@plt+0x409c>
   15548:	mov	r0, #0
   1554c:	str	r0, [sp, #64]	; 0x40
   15550:	str	r0, [sp, #60]	; 0x3c
   15554:	mov	r5, #0
   15558:	ldr	r4, [sp, #24]
   1555c:	sub	r8, fp, #48	; 0x30
   15560:	add	r6, sp, #32
   15564:	str	r5, [fp, #-52]	; 0xffffffcc
   15568:	str	r5, [sl, #24]
   1556c:	mov	r0, r8
   15570:	mov	r1, r6
   15574:	ldr	r7, [sl]
   15578:	orr	r2, r4, #8388608	; 0x800000
   1557c:	str	r4, [r7, #128]	; 0x80
   15580:	bl	1b678 <__assert_fail@plt+0xa1c8>
   15584:	ldr	r1, [sp, #72]	; 0x48
   15588:	mov	r2, r8
   1558c:	mov	r3, r4
   15590:	str	r5, [sp]
   15594:	add	r0, r1, r0
   15598:	mov	r1, sl
   1559c:	str	r0, [sp, #72]	; 0x48
   155a0:	sub	r0, fp, #52	; 0x34
   155a4:	str	r0, [sp, #4]
   155a8:	mov	r0, r6
   155ac:	bl	1b2f0 <__assert_fail@plt+0x9e40>
   155b0:	mov	r4, r0
   155b4:	cmp	r0, #0
   155b8:	bne	155c8 <__assert_fail@plt+0x4118>
   155bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   155c0:	cmp	r0, #0
   155c4:	bne	15950 <__assert_fail@plt+0x44a0>
   155c8:	ldr	r1, [r7, #64]	; 0x40
   155cc:	cmp	r1, #31
   155d0:	beq	158e8 <__assert_fail@plt+0x4438>
   155d4:	ldr	r0, [r7, #56]	; 0x38
   155d8:	add	r0, r0, r1, lsl #5
   155dc:	add	r2, r1, #1
   155e0:	vmov.i32	q8, #0	; 0x00000000
   155e4:	mov	r1, #0
   155e8:	str	r2, [r7, #64]	; 0x40
   155ec:	mov	r2, #2
   155f0:	add	r6, r0, #4
   155f4:	str	r1, [r0, #20]
   155f8:	str	r1, [r0, #24]
   155fc:	str	r2, [r0, #28]
   15600:	mov	r0, #28
   15604:	mov	r1, r6
   15608:	vst1.32	{d16-d17}, [r1], r0
   1560c:	mvn	r0, #0
   15610:	str	r0, [r1]
   15614:	cmp	r4, #0
   15618:	mov	r0, r6
   1561c:	beq	15670 <__assert_fail@plt+0x41c0>
   15620:	ldr	r1, [r7, #64]	; 0x40
   15624:	cmp	r1, #31
   15628:	beq	15920 <__assert_fail@plt+0x4470>
   1562c:	ldr	r0, [r7, #56]	; 0x38
   15630:	add	r0, r0, r1, lsl #5
   15634:	add	r2, r1, #1
   15638:	mov	r1, #0
   1563c:	cmp	r6, #0
   15640:	mvn	r3, #0
   15644:	str	r2, [r7, #64]	; 0x40
   15648:	mov	r2, #16
   1564c:	str	r1, [r0, #4]!
   15650:	add	ip, r0, #20
   15654:	stmib	r0, {r4, r6}
   15658:	str	r1, [r0, #12]
   1565c:	str	r1, [r0, #16]
   15660:	stm	ip, {r1, r2, r3}
   15664:	str	r0, [r4]
   15668:	beq	15948 <__assert_fail@plt+0x4498>
   1566c:	str	r0, [r6]
   15670:	cmp	r6, #0
   15674:	cmpne	r0, #0
   15678:	beq	15948 <__assert_fail@plt+0x4498>
   1567c:	str	r0, [r9, #52]	; 0x34
   15680:	ldr	r8, [sl]
   15684:	ldr	r0, [r8, #4]
   15688:	lsl	r0, r0, #2
   1568c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   15690:	str	r0, [r8, #12]
   15694:	ldr	r0, [r8, #4]
   15698:	lsl	r0, r0, #2
   1569c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   156a0:	str	r0, [r8, #16]
   156a4:	ldr	r0, [r8, #4]
   156a8:	add	r0, r0, r0, lsl #1
   156ac:	lsl	r0, r0, #2
   156b0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   156b4:	str	r0, [r8, #20]
   156b8:	ldr	r0, [r8, #4]
   156bc:	add	r0, r0, r0, lsl #1
   156c0:	lsl	r0, r0, #2
   156c4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   156c8:	str	r0, [r8, #24]
   156cc:	ldr	r1, [r8, #12]
   156d0:	cmp	r1, #0
   156d4:	ldrne	r1, [r8, #16]
   156d8:	cmpne	r1, #0
   156dc:	beq	156f0 <__assert_fail@plt+0x4240>
   156e0:	cmp	r0, #0
   156e4:	ldrne	r0, [r8, #20]
   156e8:	cmpne	r0, #0
   156ec:	bne	15798 <__assert_fail@plt+0x42e8>
   156f0:	mov	r0, #12
   156f4:	str	r0, [fp, #-52]	; 0xffffffcc
   156f8:	ldr	r4, [sl]
   156fc:	ldr	r0, [r4, #56]	; 0x38
   15700:	cmp	r0, #0
   15704:	beq	1571c <__assert_fail@plt+0x426c>
   15708:	ldr	r5, [r0]
   1570c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   15710:	cmp	r5, #0
   15714:	mov	r0, r5
   15718:	bne	15708 <__assert_fail@plt+0x4258>
   1571c:	mov	r0, #31
   15720:	mov	r5, #0
   15724:	str	r0, [r4, #64]	; 0x40
   15728:	str	r5, [r4, #52]	; 0x34
   1572c:	str	r5, [r4, #56]	; 0x38
   15730:	ldr	r0, [r4, #16]
   15734:	bl	2bc28 <__assert_fail@plt+0x1a778>
   15738:	str	r5, [r4, #16]
   1573c:	ldr	r0, [sp, #40]	; 0x28
   15740:	bl	2bc28 <__assert_fail@plt+0x1a778>
   15744:	ldr	r0, [sp, #44]	; 0x2c
   15748:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1574c:	ldrb	r0, [sp, #107]	; 0x6b
   15750:	cmp	r0, #0
   15754:	beq	15760 <__assert_fail@plt+0x42b0>
   15758:	ldr	r0, [sp, #36]	; 0x24
   1575c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   15760:	ldr	r0, [sp, #8]
   15764:	cmp	r0, #0
   15768:	beq	15774 <__assert_fail@plt+0x42c4>
   1576c:	add	r0, r9, #136	; 0x88
   15770:	bl	11210 <pthread_mutex_destroy@plt>
   15774:	mov	r0, r9
   15778:	bl	17394 <__assert_fail@plt+0x5ee4>
   1577c:	mov	r0, #0
   15780:	str	r0, [sl]
   15784:	str	r0, [sl, #4]
   15788:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1578c:	mov	r0, r4
   15790:	sub	sp, fp, #28
   15794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15798:	ldr	r0, [sl, #24]
   1579c:	lsl	r0, r0, #2
   157a0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   157a4:	cmp	r0, #0
   157a8:	str	r0, [r8, #132]	; 0x84
   157ac:	beq	15b64 <__assert_fail@plt+0x46b4>
   157b0:	ldr	r1, [sl, #24]
   157b4:	cmp	r1, #0
   157b8:	beq	15990 <__assert_fail@plt+0x44e0>
   157bc:	mov	r2, #0
   157c0:	cmp	r1, #4
   157c4:	bcc	15980 <__assert_fail@plt+0x44d0>
   157c8:	bic	r2, r1, #3
   157cc:	mov	r3, #1
   157d0:	add	r7, pc, #872	; 0x368
   157d4:	sub	r6, r2, #4
   157d8:	add	r3, r3, r6, lsr #2
   157dc:	cmp	r6, #12
   157e0:	and	ip, r3, #3
   157e4:	bcs	15808 <__assert_fail@plt+0x4358>
   157e8:	vld1.64	{d16-d17}, [r7 :128]
   157ec:	mov	r7, #0
   157f0:	cmp	ip, #0
   157f4:	bne	15878 <__assert_fail@plt+0x43c8>
   157f8:	b	15988 <__assert_fail@plt+0x44d8>
   157fc:	str	r8, [sp, #64]	; 0x40
   15800:	str	r8, [sp, #60]	; 0x3c
   15804:	b	15554 <__assert_fail@plt+0x40a4>
   15808:	sub	r6, r3, ip
   1580c:	add	r3, pc, #812	; 0x32c
   15810:	vmov.i32	q9, #12	; 0x0000000c
   15814:	vmov.i32	q10, #8	; 0x00000008
   15818:	vmov.i32	q11, #4	; 0x00000004
   1581c:	vmov.i32	q12, #16	; 0x00000010
   15820:	mov	r7, #0
   15824:	mov	lr, #64	; 0x40
   15828:	mov	r4, r0
   1582c:	vld1.64	{d16-d17}, [r3 :128]
   15830:	mov	r3, r0
   15834:	vadd.i32	q13, q8, q9
   15838:	add	r5, r3, #48	; 0x30
   1583c:	vadd.i32	q14, q8, q10
   15840:	vadd.i32	q15, q8, q11
   15844:	subs	r6, r6, #4
   15848:	add	r7, r7, #16
   1584c:	vst1.32	{d26-d27}, [r5]
   15850:	vst1.32	{d16-d17}, [r4], lr
   15854:	vadd.i32	q8, q8, q12
   15858:	add	r5, r3, #32
   1585c:	add	r3, r3, #16
   15860:	vst1.32	{d28-d29}, [r5]
   15864:	vst1.32	{d30-d31}, [r3]
   15868:	mov	r3, r4
   1586c:	bne	15834 <__assert_fail@plt+0x4384>
   15870:	cmp	ip, #0
   15874:	beq	15988 <__assert_fail@plt+0x44d8>
   15878:	vmov.i32	q9, #4	; 0x00000004
   1587c:	add	r3, r0, r7, lsl #2
   15880:	rsb	r7, ip, #0
   15884:	vadd.i32	q10, q8, q9
   15888:	vst1.32	{d16-d17}, [r3]!
   1588c:	adds	r7, r7, #1
   15890:	vorr	q8, q10, q10
   15894:	bcc	15884 <__assert_fail@plt+0x43d4>
   15898:	b	15988 <__assert_fail@plt+0x44d8>
   1589c:	mov	r6, r0
   158a0:	b	158a8 <__assert_fail@plt+0x43f8>
   158a4:	mov	r6, #12
   158a8:	ldr	r9, [sp, #20]
   158ac:	str	r6, [fp, #-52]	; 0xffffffcc
   158b0:	ldr	r4, [sl]
   158b4:	ldr	r0, [r4, #56]	; 0x38
   158b8:	cmp	r0, #0
   158bc:	bne	15708 <__assert_fail@plt+0x4258>
   158c0:	b	1571c <__assert_fail@plt+0x426c>
   158c4:	mov	r0, r5
   158c8:	mov	r1, #160	; 0xa0
   158cc:	mov	r4, #160	; 0xa0
   158d0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   158d4:	cmp	r0, #0
   158d8:	beq	15910 <__assert_fail@plt+0x4460>
   158dc:	mov	r5, r0
   158e0:	stm	sl, {r0, r4}
   158e4:	b	14dac <__assert_fail@plt+0x38fc>
   158e8:	mov	r0, #996	; 0x3e4
   158ec:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   158f0:	cmp	r0, #0
   158f4:	beq	1596c <__assert_fail@plt+0x44bc>
   158f8:	ldr	r1, [r7, #56]	; 0x38
   158fc:	str	r1, [r0]
   15900:	mov	r1, #0
   15904:	str	r1, [r7, #64]	; 0x40
   15908:	str	r0, [r7, #56]	; 0x38
   1590c:	b	155d8 <__assert_fail@plt+0x4128>
   15910:	mov	r4, #12
   15914:	mov	r0, r4
   15918:	sub	sp, fp, #28
   1591c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15920:	mov	r0, #996	; 0x3e4
   15924:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   15928:	cmp	r0, #0
   1592c:	beq	15948 <__assert_fail@plt+0x4498>
   15930:	ldr	r1, [r7, #56]	; 0x38
   15934:	str	r1, [r0]
   15938:	mov	r1, #0
   1593c:	str	r1, [r7, #64]	; 0x40
   15940:	str	r0, [r7, #56]	; 0x38
   15944:	b	15630 <__assert_fail@plt+0x4180>
   15948:	mov	r0, #12
   1594c:	str	r0, [fp, #-52]	; 0xffffffcc
   15950:	mov	r0, #0
   15954:	str	r0, [r9, #52]	; 0x34
   15958:	ldr	r4, [sl]
   1595c:	ldr	r0, [r4, #56]	; 0x38
   15960:	cmp	r0, #0
   15964:	bne	15708 <__assert_fail@plt+0x4258>
   15968:	b	1571c <__assert_fail@plt+0x426c>
   1596c:	mov	r6, #0
   15970:	cmp	r4, #0
   15974:	mov	r0, r6
   15978:	bne	15620 <__assert_fail@plt+0x4170>
   1597c:	b	15670 <__assert_fail@plt+0x41c0>
   15980:	str	r2, [r0, r2, lsl #2]
   15984:	add	r2, r2, #1
   15988:	cmp	r1, r2
   1598c:	bne	15980 <__assert_fail@plt+0x44d0>
   15990:	ldr	r2, [r8, #52]	; 0x34
   15994:	ldrb	r1, [r2, #24]
   15998:	cmp	r1, #17
   1599c:	beq	159c8 <__assert_fail@plt+0x4518>
   159a0:	cmp	r1, #4
   159a4:	bne	15a18 <__assert_fail@plt+0x4568>
   159a8:	ldr	r1, [r2, #20]
   159ac:	mov	r3, #1
   159b0:	ldr	r0, [r0, r1, lsl #2]
   159b4:	str	r0, [r2, #20]
   159b8:	ldr	r1, [r8, #80]	; 0x50
   159bc:	orr	r0, r1, r3, lsl r0
   159c0:	str	r0, [r8, #80]	; 0x50
   159c4:	b	15a18 <__assert_fail@plt+0x4568>
   159c8:	ldr	r1, [r2, #4]
   159cc:	cmp	r1, #0
   159d0:	beq	15a18 <__assert_fail@plt+0x4568>
   159d4:	ldrb	r3, [r1, #24]
   159d8:	cmp	r3, #17
   159dc:	bne	15a18 <__assert_fail@plt+0x4568>
   159e0:	ldr	r3, [r1, #4]
   159e4:	ldr	r1, [r1, #20]
   159e8:	cmp	r3, #0
   159ec:	str	r3, [r2, #4]
   159f0:	strne	r2, [r3]
   159f4:	cmp	r1, #31
   159f8:	ldr	r3, [r2, #20]
   159fc:	ldr	r3, [r0, r3, lsl #2]
   15a00:	str	r3, [r0, r1, lsl #2]
   15a04:	bgt	15a18 <__assert_fail@plt+0x4568>
   15a08:	ldr	r0, [r8, #80]	; 0x50
   15a0c:	mov	r3, #1
   15a10:	bic	r0, r0, r3, lsl r1
   15a14:	b	159c0 <__assert_fail@plt+0x4510>
   15a18:	mov	r0, #1
   15a1c:	ldr	r7, [r2, #4]
   15a20:	cmp	r7, #0
   15a24:	bne	15a54 <__assert_fail@plt+0x45a4>
   15a28:	mov	r3, #0
   15a2c:	ldr	r7, [r2, #8]
   15a30:	mov	r1, r2
   15a34:	cmp	r7, r3
   15a38:	cmpne	r7, #0
   15a3c:	bne	15a54 <__assert_fail@plt+0x45a4>
   15a40:	ldr	r2, [r1]
   15a44:	mov	r3, r1
   15a48:	cmp	r2, #0
   15a4c:	bne	15a2c <__assert_fail@plt+0x457c>
   15a50:	b	15b04 <__assert_fail@plt+0x4654>
   15a54:	ldrb	r1, [r7, #24]
   15a58:	cmp	r1, #17
   15a5c:	beq	15aa8 <__assert_fail@plt+0x45f8>
   15a60:	cmp	r1, #4
   15a64:	mov	r2, r7
   15a68:	bne	15a1c <__assert_fail@plt+0x456c>
   15a6c:	ldr	r1, [r8, #132]	; 0x84
   15a70:	mov	r2, r7
   15a74:	cmp	r1, #0
   15a78:	beq	15a1c <__assert_fail@plt+0x456c>
   15a7c:	ldr	r2, [r7, #20]
   15a80:	ldr	r1, [r1, r2, lsl #2]
   15a84:	str	r1, [r7, #20]
   15a88:	ldr	r2, [r8, #80]	; 0x50
   15a8c:	orr	r1, r2, r0, lsl r1
   15a90:	str	r1, [r8, #80]	; 0x50
   15a94:	mov	r2, r7
   15a98:	ldr	r7, [r2, #4]
   15a9c:	cmp	r7, #0
   15aa0:	bne	15a54 <__assert_fail@plt+0x45a4>
   15aa4:	b	15a28 <__assert_fail@plt+0x4578>
   15aa8:	ldr	r3, [r7, #4]
   15aac:	mov	r2, r7
   15ab0:	cmp	r3, #0
   15ab4:	beq	15a1c <__assert_fail@plt+0x456c>
   15ab8:	ldrb	r1, [r3, #24]
   15abc:	mov	r2, r7
   15ac0:	cmp	r1, #17
   15ac4:	bne	15a1c <__assert_fail@plt+0x456c>
   15ac8:	ldr	r1, [r3, #4]
   15acc:	ldr	r3, [r3, #20]
   15ad0:	cmp	r1, #0
   15ad4:	str	r1, [r7, #4]
   15ad8:	strne	r7, [r1]
   15adc:	cmp	r3, #31
   15ae0:	ldr	r1, [r7, #20]
   15ae4:	ldr	r2, [r8, #132]	; 0x84
   15ae8:	ldr	r1, [r2, r1, lsl #2]
   15aec:	str	r1, [r2, r3, lsl #2]
   15af0:	mov	r2, r7
   15af4:	bgt	15a1c <__assert_fail@plt+0x456c>
   15af8:	ldr	r1, [r8, #80]	; 0x50
   15afc:	bic	r1, r1, r0, lsl r3
   15b00:	b	15a90 <__assert_fail@plt+0x45e0>
   15b04:	ldr	r1, [sl, #24]
   15b08:	cmp	r1, #0
   15b0c:	beq	15b34 <__assert_fail@plt+0x4684>
   15b10:	ldr	r0, [r8, #132]	; 0x84
   15b14:	mov	r2, #0
   15b18:	ldr	r3, [r0, r2, lsl #2]
   15b1c:	cmp	r2, r3
   15b20:	bne	15b50 <__assert_fail@plt+0x46a0>
   15b24:	add	r2, r2, #1
   15b28:	cmp	r1, r2
   15b2c:	bne	15b18 <__assert_fail@plt+0x4668>
   15b30:	b	15b58 <__assert_fail@plt+0x46a8>
   15b34:	ldr	r0, [r8, #132]	; 0x84
   15b38:	b	15b58 <__assert_fail@plt+0x46a8>
   15b3c:	nop	{0}
   15b40:	andeq	r0, r0, r0
   15b44:	andeq	r0, r0, r1
   15b48:	andeq	r0, r0, r2
   15b4c:	andeq	r0, r0, r3
   15b50:	cmp	r1, r2
   15b54:	bne	15b64 <__assert_fail@plt+0x46b4>
   15b58:	bl	2bc28 <__assert_fail@plt+0x1a778>
   15b5c:	mov	r0, #0
   15b60:	str	r0, [r8, #132]	; 0x84
   15b64:	ldr	r0, [r8, #52]	; 0x34
   15b68:	str	r8, [sp, #24]
   15b6c:	mov	r7, #0
   15b70:	sub	r8, fp, #48	; 0x30
   15b74:	mov	r4, r0
   15b78:	ldr	r0, [r0, #4]
   15b7c:	cmp	r0, #0
   15b80:	bne	15b74 <__assert_fail@plt+0x46c4>
   15b84:	ldr	r0, [r4, #8]
   15b88:	cmp	r0, #0
   15b8c:	bne	15b74 <__assert_fail@plt+0x46c4>
   15b90:	mov	r3, #0
   15b94:	cmp	r3, #0
   15b98:	str	r7, [fp, #-48]	; 0xffffffd0
   15b9c:	beq	15bc8 <__assert_fail@plt+0x4718>
   15ba0:	ldrb	r0, [r3, #24]
   15ba4:	cmp	r0, #17
   15ba8:	bne	15bc8 <__assert_fail@plt+0x4718>
   15bac:	ldrb	r2, [sl, #28]
   15bb0:	ldr	r1, [sl]
   15bb4:	mov	r0, r8
   15bb8:	bl	1fe70 <__assert_fail@plt+0xe9c0>
   15bbc:	cmp	r0, #0
   15bc0:	str	r0, [r4, #4]
   15bc4:	strne	r4, [r0]
   15bc8:	ldr	r3, [r4, #8]
   15bcc:	cmp	r3, #0
   15bd0:	beq	15bfc <__assert_fail@plt+0x474c>
   15bd4:	ldrb	r0, [r3, #24]
   15bd8:	cmp	r0, #17
   15bdc:	bne	15bfc <__assert_fail@plt+0x474c>
   15be0:	ldrb	r2, [sl, #28]
   15be4:	ldr	r1, [sl]
   15be8:	mov	r0, r8
   15bec:	bl	1fe70 <__assert_fail@plt+0xe9c0>
   15bf0:	cmp	r0, #0
   15bf4:	str	r0, [r4, #8]
   15bf8:	strne	r4, [r0]
   15bfc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15c00:	cmp	r0, #0
   15c04:	bne	156f4 <__assert_fail@plt+0x4244>
   15c08:	ldr	r1, [r4]
   15c0c:	cmp	r1, #0
   15c10:	beq	15c3c <__assert_fail@plt+0x478c>
   15c14:	ldr	r0, [r1, #8]
   15c18:	cmp	r0, r4
   15c1c:	cmpne	r0, #0
   15c20:	bne	15b74 <__assert_fail@plt+0x46c4>
   15c24:	ldr	r3, [r1, #4]
   15c28:	mov	r4, r1
   15c2c:	cmp	r3, #0
   15c30:	str	r7, [fp, #-48]	; 0xffffffd0
   15c34:	bne	15ba0 <__assert_fail@plt+0x46f0>
   15c38:	b	15bc8 <__assert_fail@plt+0x4718>
   15c3c:	ldr	r8, [sp, #24]
   15c40:	ldr	r0, [r8, #52]	; 0x34
   15c44:	mov	r4, r0
   15c48:	ldr	r0, [r0, #4]
   15c4c:	cmp	r0, #0
   15c50:	bne	15c44 <__assert_fail@plt+0x4794>
   15c54:	ldr	r0, [r4, #8]
   15c58:	cmp	r0, #0
   15c5c:	bne	15c44 <__assert_fail@plt+0x4794>
   15c60:	ldr	r2, [r4, #24]
   15c64:	uxtb	r0, r2
   15c68:	cmp	r0, #16
   15c6c:	bne	15cb0 <__assert_fail@plt+0x4800>
   15c70:	ldr	r0, [r4, #4]
   15c74:	ldr	r1, [r0, #12]
   15c78:	str	r1, [r4, #12]
   15c7c:	ldr	r0, [r0, #28]
   15c80:	str	r0, [r4, #28]
   15c84:	ldr	r1, [r4]
   15c88:	cmp	r1, #0
   15c8c:	beq	15cfc <__assert_fail@plt+0x484c>
   15c90:	ldr	r0, [r1, #8]
   15c94:	cmp	r0, r4
   15c98:	mov	r4, r1
   15c9c:	beq	15c60 <__assert_fail@plt+0x47b0>
   15ca0:	cmp	r0, #0
   15ca4:	mov	r4, r1
   15ca8:	beq	15c60 <__assert_fail@plt+0x47b0>
   15cac:	b	15c44 <__assert_fail@plt+0x4794>
   15cb0:	str	r4, [r4, #12]
   15cb4:	mov	r0, r8
   15cb8:	ldr	r1, [r4, #20]
   15cbc:	bl	20158 <__assert_fail@plt+0xeca8>
   15cc0:	cmn	r0, #1
   15cc4:	str	r0, [r4, #28]
   15cc8:	beq	156f0 <__assert_fail@plt+0x4240>
   15ccc:	ldrb	r1, [r4, #24]
   15cd0:	cmp	r1, #12
   15cd4:	bne	15cf0 <__assert_fail@plt+0x4840>
   15cd8:	ldr	r1, [r8]
   15cdc:	ldr	r2, [r4, #20]
   15ce0:	add	r0, r1, r0, lsl #3
   15ce4:	ldr	r1, [r0, #4]
   15ce8:	bfi	r1, r2, #8, #10
   15cec:	str	r1, [r0, #4]
   15cf0:	ldr	r1, [r4]
   15cf4:	cmp	r1, #0
   15cf8:	bne	15c90 <__assert_fail@plt+0x47e0>
   15cfc:	ldr	r4, [r8, #52]	; 0x34
   15d00:	ldrb	r0, [r4, #24]
   15d04:	cmp	r0, #16
   15d08:	beq	15d2c <__assert_fail@plt+0x487c>
   15d0c:	cmp	r0, #11
   15d10:	bne	15d3c <__assert_fail@plt+0x488c>
   15d14:	ldr	r0, [r4, #4]
   15d18:	str	r4, [r0, #16]
   15d1c:	mov	r1, r4
   15d20:	cmp	r0, #0
   15d24:	bne	15d80 <__assert_fail@plt+0x48d0>
   15d28:	b	15de4 <__assert_fail@plt+0x4934>
   15d2c:	ldmib	r4, {r0, r1}
   15d30:	ldr	r2, [r1, #12]
   15d34:	str	r2, [r0, #16]
   15d38:	b	15d58 <__assert_fail@plt+0x48a8>
   15d3c:	ldr	r0, [r4, #4]
   15d40:	cmp	r0, #0
   15d44:	ldrne	r1, [r4, #16]
   15d48:	strne	r1, [r0, #16]
   15d4c:	ldr	r1, [r4, #8]
   15d50:	cmp	r1, #0
   15d54:	beq	15d60 <__assert_fail@plt+0x48b0>
   15d58:	ldr	r2, [r4, #16]
   15d5c:	str	r2, [r1, #16]
   15d60:	mov	r1, r4
   15d64:	cmp	r0, #0
   15d68:	bne	15d80 <__assert_fail@plt+0x48d0>
   15d6c:	b	15de4 <__assert_fail@plt+0x4934>
   15d70:	ldr	r0, [r1, #4]
   15d74:	str	r1, [r0, #16]
   15d78:	cmp	r0, #0
   15d7c:	beq	15de4 <__assert_fail@plt+0x4934>
   15d80:	mov	r1, r0
   15d84:	ldrb	r0, [r0, #24]
   15d88:	cmp	r0, #16
   15d8c:	beq	15dc8 <__assert_fail@plt+0x4918>
   15d90:	cmp	r0, #11
   15d94:	beq	15d70 <__assert_fail@plt+0x48c0>
   15d98:	ldr	r0, [r1, #4]
   15d9c:	cmp	r0, #0
   15da0:	ldrne	r2, [r1, #16]
   15da4:	strne	r2, [r0, #16]
   15da8:	ldr	r2, [r1, #8]
   15dac:	cmp	r2, #0
   15db0:	beq	15d78 <__assert_fail@plt+0x48c8>
   15db4:	ldr	r3, [r1, #16]
   15db8:	str	r3, [r2, #16]
   15dbc:	cmp	r0, #0
   15dc0:	bne	15d80 <__assert_fail@plt+0x48d0>
   15dc4:	b	15de4 <__assert_fail@plt+0x4934>
   15dc8:	ldmib	r1, {r0, r2}
   15dcc:	ldr	r3, [r2, #12]
   15dd0:	str	r3, [r0, #16]
   15dd4:	ldr	r3, [r1, #16]
   15dd8:	str	r3, [r2, #16]
   15ddc:	cmp	r0, #0
   15de0:	bne	15d80 <__assert_fail@plt+0x48d0>
   15de4:	mov	r3, #0
   15de8:	ldr	r0, [r1, #8]
   15dec:	mov	r2, r1
   15df0:	cmp	r0, r3
   15df4:	cmpne	r0, #0
   15df8:	bne	15d80 <__assert_fail@plt+0x48d0>
   15dfc:	ldr	r1, [r2]
   15e00:	mov	r3, r2
   15e04:	cmp	r1, #0
   15e08:	bne	15de8 <__assert_fail@plt+0x4938>
   15e0c:	mov	r0, r8
   15e10:	mov	r1, r4
   15e14:	bl	1fcd4 <__assert_fail@plt+0xe824>
   15e18:	cmp	r0, #0
   15e1c:	beq	15e3c <__assert_fail@plt+0x498c>
   15e20:	b	156f4 <__assert_fail@plt+0x4244>
   15e24:	mov	r0, r8
   15e28:	mov	r1, r7
   15e2c:	bl	1fcd4 <__assert_fail@plt+0xe824>
   15e30:	cmp	r0, #0
   15e34:	mov	r4, r7
   15e38:	bne	156f4 <__assert_fail@plt+0x4244>
   15e3c:	ldr	r7, [r4, #4]
   15e40:	cmp	r7, #0
   15e44:	bne	15e24 <__assert_fail@plt+0x4974>
   15e48:	mov	r1, #0
   15e4c:	ldr	r7, [r4, #8]
   15e50:	mov	r0, r4
   15e54:	cmp	r7, r1
   15e58:	cmpne	r7, #0
   15e5c:	bne	15e24 <__assert_fail@plt+0x4974>
   15e60:	ldr	r4, [r0]
   15e64:	mov	r1, r0
   15e68:	cmp	r4, #0
   15e6c:	bne	15e4c <__assert_fail@plt+0x499c>
   15e70:	mov	r5, #0
   15e74:	sub	r4, fp, #48	; 0x30
   15e78:	mov	r7, #0
   15e7c:	b	15eac <__assert_fail@plt+0x49fc>
   15e80:	mov	r1, r5
   15e84:	ldr	r2, [r8, #8]
   15e88:	add	r0, r7, #1
   15e8c:	subs	r3, r0, r2
   15e90:	mov	r7, r3
   15e94:	movwne	r3, #1
   15e98:	movne	r7, r0
   15e9c:	tst	r1, #1
   15ea0:	and	r5, r1, r3
   15ea4:	cmpeq	r0, r2
   15ea8:	beq	15f08 <__assert_fail@plt+0x4a58>
   15eac:	ldr	r0, [r8, #24]
   15eb0:	add	r6, r7, r7, lsl #1
   15eb4:	add	r0, r0, r6, lsl #2
   15eb8:	ldr	r0, [r0, #4]
   15ebc:	cmp	r0, #0
   15ec0:	bne	15e80 <__assert_fail@plt+0x49d0>
   15ec4:	mov	r0, r4
   15ec8:	mov	r1, r8
   15ecc:	mov	r2, r7
   15ed0:	mov	r3, #1
   15ed4:	bl	20330 <__assert_fail@plt+0xee80>
   15ed8:	cmp	r0, #0
   15edc:	bne	156f4 <__assert_fail@plt+0x4244>
   15ee0:	ldr	r0, [r8, #24]
   15ee4:	mov	r1, r5
   15ee8:	add	r0, r0, r6, lsl #2
   15eec:	ldr	r0, [r0, #4]
   15ef0:	cmp	r0, #0
   15ef4:	bne	15e84 <__assert_fail@plt+0x49d4>
   15ef8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15efc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   15f00:	mov	r1, #1
   15f04:	b	15e84 <__assert_fail@plt+0x49d4>
   15f08:	ldrb	r1, [sl, #28]
   15f0c:	tst	r1, #16
   15f10:	bne	15f2c <__assert_fail@plt+0x4a7c>
   15f14:	ldr	r1, [sl, #24]
   15f18:	cmp	r1, #0
   15f1c:	beq	15f2c <__assert_fail@plt+0x4a7c>
   15f20:	ldrb	r1, [r8, #88]	; 0x58
   15f24:	tst	r1, #1
   15f28:	bne	15f38 <__assert_fail@plt+0x4a88>
   15f2c:	ldr	r1, [r8, #76]	; 0x4c
   15f30:	cmp	r1, #0
   15f34:	beq	1607c <__assert_fail@plt+0x4bcc>
   15f38:	add	r0, r0, r0, lsl #1
   15f3c:	lsl	r0, r0, #2
   15f40:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   15f44:	cmp	r0, #0
   15f48:	str	r0, [r8, #28]
   15f4c:	beq	16530 <__assert_fail@plt+0x5080>
   15f50:	ldr	r1, [r8, #8]
   15f54:	cmp	r1, #0
   15f58:	beq	1607c <__assert_fail@plt+0x4bcc>
   15f5c:	mov	r1, #0
   15f60:	str	r1, [r0]
   15f64:	str	r1, [r0, #4]
   15f68:	str	r1, [r0, #8]
   15f6c:	ldr	r0, [r8, #8]
   15f70:	cmp	r0, #2
   15f74:	bcc	15fa4 <__assert_fail@plt+0x4af4>
   15f78:	mov	r2, #1
   15f7c:	mov	r3, #12
   15f80:	ldr	r0, [r8, #28]
   15f84:	add	r2, r2, #1
   15f88:	str	r1, [r0, r3]!
   15f8c:	add	r3, r3, #12
   15f90:	str	r1, [r0, #4]
   15f94:	str	r1, [r0, #8]
   15f98:	ldr	r0, [r8, #8]
   15f9c:	cmp	r2, r0
   15fa0:	bcc	15f80 <__assert_fail@plt+0x4ad0>
   15fa4:	cmp	r0, #0
   15fa8:	beq	1607c <__assert_fail@plt+0x4bcc>
   15fac:	ldr	ip, [r8, #24]
   15fb0:	mov	r7, #0
   15fb4:	str	sl, [sp, #16]
   15fb8:	b	15fd0 <__assert_fail@plt+0x4b20>
   15fbc:	ldr	r0, [r8, #8]
   15fc0:	ldr	sl, [sp, #16]
   15fc4:	add	r7, r7, #1
   15fc8:	cmp	r7, r0
   15fcc:	bcs	1607c <__assert_fail@plt+0x4bcc>
   15fd0:	add	r9, r7, r7, lsl #1
   15fd4:	add	r2, ip, r9, lsl #2
   15fd8:	ldr	r3, [r2, #4]
   15fdc:	cmp	r3, #1
   15fe0:	blt	15fc4 <__assert_fail@plt+0x4b14>
   15fe4:	ldr	r1, [r2, #8]
   15fe8:	mov	r6, #0
   15fec:	str	r1, [sp, #28]
   15ff0:	b	1601c <__assert_fail@plt+0x4b6c>
   15ff4:	add	r0, r4, r0, lsl #2
   15ff8:	ldr	r0, [r0, #8]
   15ffc:	add	r3, r2, #1
   16000:	add	r6, r6, #1
   16004:	str	r3, [sl]
   16008:	str	r7, [r0, r2, lsl #2]
   1600c:	add	r0, ip, r9, lsl #2
   16010:	ldr	r0, [r0, #4]
   16014:	cmp	r6, r0
   16018:	bge	15fbc <__assert_fail@plt+0x4b0c>
   1601c:	ldr	r0, [r1, r6, lsl #2]
   16020:	ldr	r4, [r8, #28]
   16024:	add	r0, r0, r0, lsl #1
   16028:	mov	r3, r4
   1602c:	ldr	r5, [r3, r0, lsl #2]!
   16030:	mov	sl, r3
   16034:	ldr	r2, [sl, #4]!
   16038:	cmp	r5, r2
   1603c:	bne	15ff4 <__assert_fail@plt+0x4b44>
   16040:	mov	r1, #2
   16044:	add	r8, r4, r0, lsl #2
   16048:	add	r1, r1, r5, lsl #1
   1604c:	str	r1, [r3]
   16050:	lsl	r1, r1, #2
   16054:	ldr	r0, [r8, #8]!
   16058:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1605c:	cmp	r0, #0
   16060:	beq	1652c <__assert_fail@plt+0x507c>
   16064:	str	r0, [r8]
   16068:	ldr	r8, [sp, #24]
   1606c:	ldr	r1, [sp, #28]
   16070:	ldr	r2, [sl]
   16074:	ldr	ip, [r8, #24]
   16078:	b	15ffc <__assert_fail@plt+0x4b4c>
   1607c:	mov	r0, #0
   16080:	str	r0, [fp, #-52]	; 0xffffffcc
   16084:	ldr	r0, [sp, #12]
   16088:	cmp	r0, #0
   1608c:	bne	16248 <__assert_fail@plt+0x4d98>
   16090:	ldr	r0, [sp, #20]
   16094:	ldrb	r2, [r0, #88]	; 0x58
   16098:	ands	r0, r2, #4
   1609c:	beq	16248 <__assert_fail@plt+0x4d98>
   160a0:	ldr	r0, [sl, #20]
   160a4:	cmp	r0, #0
   160a8:	bne	16248 <__assert_fail@plt+0x4d98>
   160ac:	ldr	r0, [sp, #20]
   160b0:	mov	r9, #0
   160b4:	ldr	r7, [r0, #8]
   160b8:	cmp	r7, #0
   160bc:	beq	160dc <__assert_fail@plt+0x4c2c>
   160c0:	ldr	r3, [r0]
   160c4:	mov	r8, #0
   160c8:	mov	ip, #1
   160cc:	mov	lr, #139	; 0x8b
   160d0:	mov	r6, #0
   160d4:	mov	r4, #0
   160d8:	b	16130 <__assert_fail@plt+0x4c80>
   160dc:	mov	r8, #0
   160e0:	ldr	r3, [sp, #20]
   160e4:	mov	r0, #1
   160e8:	and	r1, r2, #249	; 0xf9
   160ec:	str	r0, [r3, #92]	; 0x5c
   160f0:	ldr	r0, [r3, #76]	; 0x4c
   160f4:	cmp	r0, #0
   160f8:	movwgt	r9, #1
   160fc:	orr	r0, r8, r9
   16100:	and	r0, r0, #1
   16104:	orr	r0, r1, r0, lsl #1
   16108:	strb	r0, [r3, #88]	; 0x58
   1610c:	b	16248 <__assert_fail@plt+0x4d98>
   16110:	ldrsb	r0, [r5]
   16114:	cmp	r0, #0
   16118:	mov	r0, #0
   1611c:	movwmi	r0, #1
   16120:	orr	r6, r6, r0
   16124:	add	r4, r4, #1
   16128:	cmp	r7, r4
   1612c:	beq	161e0 <__assert_fail@plt+0x4d30>
   16130:	add	r5, r3, r4, lsl #3
   16134:	ldrb	r1, [r5, #4]
   16138:	sub	r1, r1, #1
   1613c:	cmp	r1, #11
   16140:	bhi	16580 <__assert_fail@plt+0x50d0>
   16144:	add	r0, pc, #0
   16148:	ldr	pc, [r0, r1, lsl #2]
   1614c:	andeq	r6, r1, r0, lsl r1
   16150:	andeq	r6, r1, r4, lsr #2
   16154:	andeq	r6, r1, ip, ror r1
   16158:	andeq	r6, r1, r4, lsr #2
   1615c:	ldrdeq	r6, [r1], -r0
   16160:	andeq	r6, r1, r8, asr #4
   16164:	andeq	r6, r1, r0, lsl #11
   16168:	andeq	r6, r1, r4, lsr #2
   1616c:	andeq	r6, r1, r4, lsr #2
   16170:	andeq	r6, r1, r4, lsr #2
   16174:	andeq	r6, r1, r4, lsr #2
   16178:			; <UNDEFINED> instruction: 0x000161b0
   1617c:	ldr	r5, [r3, r4, lsl #3]
   16180:	ldr	r0, [r5, #16]
   16184:	cmp	r0, #0
   16188:	bne	16248 <__assert_fail@plt+0x4d98>
   1618c:	ldr	r0, [r5, #20]
   16190:	cmp	r0, #0
   16194:	ldreq	r0, [r5, #24]
   16198:	cmpeq	r0, #0
   1619c:	bne	16248 <__assert_fail@plt+0x4d98>
   161a0:	ldr	r0, [r5, #28]
   161a4:	cmp	r0, #0
   161a8:	beq	16124 <__assert_fail@plt+0x4c74>
   161ac:	b	16248 <__assert_fail@plt+0x4d98>
   161b0:	ldr	r0, [r3, r4, lsl #3]
   161b4:	sub	r0, r0, #16
   161b8:	ror	r1, r0, #4
   161bc:	cmp	r1, #7
   161c0:	bhi	16248 <__assert_fail@plt+0x4d98>
   161c4:	tst	lr, ip, lsl r1
   161c8:	bne	16124 <__assert_fail@plt+0x4c74>
   161cc:	b	16248 <__assert_fail@plt+0x4d98>
   161d0:	mov	r8, #1
   161d4:	add	r4, r4, #1
   161d8:	cmp	r7, r4
   161dc:	bne	16130 <__assert_fail@plt+0x4c80>
   161e0:	orr	r0, r6, r8
   161e4:	tst	r0, #1
   161e8:	beq	160e0 <__assert_fail@plt+0x4c30>
   161ec:	mov	r2, #0
   161f0:	mov	r7, #7
   161f4:	add	r3, r3, r2, lsl #3
   161f8:	ldr	r6, [r3, #4]
   161fc:	uxtb	r1, r6
   16200:	cmp	r1, #5
   16204:	beq	16224 <__assert_fail@plt+0x4d74>
   16208:	cmp	r1, #1
   1620c:	bne	1622c <__assert_fail@plt+0x4d7c>
   16210:	ldrsb	r0, [r3]
   16214:	cmn	r0, #1
   16218:	bicle	r0, r6, #2097152	; 0x200000
   1621c:	strle	r0, [r3, #4]
   16220:	b	1622c <__assert_fail@plt+0x4d7c>
   16224:	bfi	r6, r7, #0, #8
   16228:	str	r6, [r3, #4]
   1622c:	ldr	r1, [sp, #20]
   16230:	add	r2, r2, #1
   16234:	ldr	r0, [r1, #8]
   16238:	cmp	r2, r0
   1623c:	bcs	16544 <__assert_fail@plt+0x5094>
   16240:	ldr	r3, [r1]
   16244:	b	161f4 <__assert_fail@plt+0x4d44>
   16248:	ldr	r8, [sp, #20]
   1624c:	ldr	r1, [r8, #52]	; 0x34
   16250:	ldr	r0, [r8, #24]
   16254:	ldr	r1, [r1, #12]
   16258:	ldr	r1, [r1, #28]
   1625c:	str	r1, [r8, #72]	; 0x48
   16260:	add	r1, r1, r1, lsl #1
   16264:	add	r5, r0, r1, lsl #2
   16268:	mov	r4, r5
   1626c:	ldr	r7, [r4, #4]!
   16270:	str	r7, [fp, #-44]	; 0xffffffd4
   16274:	ldr	r0, [r4]
   16278:	cmp	r0, #1
   1627c:	blt	163d4 <__assert_fail@plt+0x4f24>
   16280:	lsl	r0, r7, #2
   16284:	str	r7, [fp, #-48]	; 0xffffffd0
   16288:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1628c:	cmp	r0, #0
   16290:	str	r0, [fp, #-40]	; 0xffffffd8
   16294:	beq	16568 <__assert_fail@plt+0x50b8>
   16298:	mov	r6, r0
   1629c:	ldr	r0, [r4]
   162a0:	ldr	r1, [r5, #8]
   162a4:	lsl	r2, r0, #2
   162a8:	mov	r0, r6
   162ac:	bl	11258 <memcpy@plt>
   162b0:	mov	r0, #0
   162b4:	cmp	r7, #1
   162b8:	str	r0, [fp, #-32]	; 0xffffffe0
   162bc:	blt	163e8 <__assert_fail@plt+0x4f38>
   162c0:	ldr	r0, [sp, #20]
   162c4:	ldr	r0, [r0, #76]	; 0x4c
   162c8:	cmp	r0, #1
   162cc:	blt	163e8 <__assert_fail@plt+0x4f38>
   162d0:	mov	r0, #0
   162d4:	sub	r8, fp, #48	; 0x30
   162d8:	mov	r9, #1
   162dc:	ldr	r2, [sp, #20]
   162e0:	ldr	r1, [r6, r0, lsl #2]
   162e4:	ldr	r2, [r2]
   162e8:	add	r3, r2, r1, lsl #3
   162ec:	ldrb	r3, [r3, #4]
   162f0:	cmp	r3, #4
   162f4:	bne	163c0 <__assert_fail@plt+0x4f10>
   162f8:	mov	r3, #0
   162fc:	cmp	r7, #1
   16300:	bge	16314 <__assert_fail@plt+0x4e64>
   16304:	b	16338 <__assert_fail@plt+0x4e88>
   16308:	add	r3, r3, #1
   1630c:	cmp	r7, r3
   16310:	beq	163c0 <__assert_fail@plt+0x4f10>
   16314:	ldr	r5, [r6, r3, lsl #2]
   16318:	add	r4, r2, r5, lsl #3
   1631c:	ldrb	r4, [r4, #4]
   16320:	cmp	r4, #9
   16324:	bne	16308 <__assert_fail@plt+0x4e58>
   16328:	ldr	r4, [r2, r1, lsl #3]
   1632c:	ldr	r5, [r2, r5, lsl #3]
   16330:	cmp	r5, r4
   16334:	bne	16308 <__assert_fail@plt+0x4e58>
   16338:	cmp	r3, r7
   1633c:	beq	163c0 <__assert_fail@plt+0x4f10>
   16340:	ldr	r2, [sp, #20]
   16344:	add	r1, r1, r1, lsl #1
   16348:	cmp	r7, #1
   1634c:	ldr	r2, [r2, #20]
   16350:	add	r1, r2, r1, lsl #2
   16354:	ldr	r1, [r1, #8]
   16358:	ldr	ip, [r1]
   1635c:	blt	16398 <__assert_fail@plt+0x4ee8>
   16360:	mov	r2, #0
   16364:	subs	r3, r7, #1
   16368:	beq	1638c <__assert_fail@plt+0x4edc>
   1636c:	add	r5, r2, r3
   16370:	lsr	r4, r5, #1
   16374:	ldr	r1, [r6, r4, lsl #2]
   16378:	cmp	r1, ip
   1637c:	addlt	r2, r9, r5, lsr #1
   16380:	movge	r3, r4
   16384:	cmp	r2, r3
   16388:	bcc	1636c <__assert_fail@plt+0x4ebc>
   1638c:	ldr	r1, [r6, r2, lsl #2]
   16390:	cmp	r1, ip
   16394:	beq	163c0 <__assert_fail@plt+0x4f10>
   16398:	ldr	r0, [sp, #20]
   1639c:	add	r1, ip, ip, lsl #1
   163a0:	ldr	r0, [r0, #24]
   163a4:	add	r1, r0, r1, lsl #2
   163a8:	mov	r0, r8
   163ac:	bl	209e8 <__assert_fail@plt+0xf538>
   163b0:	cmp	r0, #0
   163b4:	bne	1653c <__assert_fail@plt+0x508c>
   163b8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   163bc:	mov	r0, #0
   163c0:	add	r0, r0, #1
   163c4:	cmp	r0, r7
   163c8:	bge	163e8 <__assert_fail@plt+0x4f38>
   163cc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   163d0:	b	162dc <__assert_fail@plt+0x4e2c>
   163d4:	mov	r0, #0
   163d8:	str	r0, [fp, #-44]	; 0xffffffd4
   163dc:	str	r0, [fp, #-48]	; 0xffffffd0
   163e0:	str	r0, [fp, #-40]	; 0xffffffd8
   163e4:	str	r0, [fp, #-32]	; 0xffffffe0
   163e8:	ldr	r8, [sp, #20]
   163ec:	sub	r0, fp, #32
   163f0:	sub	r2, fp, #48	; 0x30
   163f4:	mov	r3, #0
   163f8:	mov	r1, r8
   163fc:	bl	20d08 <__assert_fail@plt+0xf858>
   16400:	cmp	r0, #0
   16404:	str	r0, [r8, #36]	; 0x24
   16408:	beq	16488 <__assert_fail@plt+0x4fd8>
   1640c:	ldrsb	r1, [r0, #52]	; 0x34
   16410:	cmn	r1, #1
   16414:	ble	16428 <__assert_fail@plt+0x4f78>
   16418:	str	r0, [r8, #40]	; 0x28
   1641c:	str	r0, [r8, #44]	; 0x2c
   16420:	str	r0, [r8, #48]	; 0x30
   16424:	b	1649c <__assert_fail@plt+0x4fec>
   16428:	sub	r4, fp, #32
   1642c:	sub	r6, fp, #48	; 0x30
   16430:	mov	r1, r8
   16434:	mov	r3, #1
   16438:	mov	r0, r4
   1643c:	mov	r2, r6
   16440:	bl	20d08 <__assert_fail@plt+0xf858>
   16444:	str	r0, [r8, #40]	; 0x28
   16448:	mov	r0, r4
   1644c:	mov	r1, r8
   16450:	mov	r2, r6
   16454:	mov	r3, #2
   16458:	bl	20d08 <__assert_fail@plt+0xf858>
   1645c:	str	r0, [r8, #44]	; 0x2c
   16460:	mov	r0, r4
   16464:	mov	r1, r8
   16468:	mov	r2, r6
   1646c:	mov	r3, #6
   16470:	bl	20d08 <__assert_fail@plt+0xf858>
   16474:	str	r0, [r8, #48]	; 0x30
   16478:	ldr	r1, [r8, #40]	; 0x28
   1647c:	cmp	r1, #0
   16480:	cmpne	r0, #0
   16484:	bne	16490 <__assert_fail@plt+0x4fe0>
   16488:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1648c:	b	164a8 <__assert_fail@plt+0x4ff8>
   16490:	ldr	r0, [r8, #44]	; 0x2c
   16494:	cmp	r0, #0
   16498:	beq	16488 <__assert_fail@plt+0x4fd8>
   1649c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   164a0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   164a4:	mov	r0, #0
   164a8:	str	r0, [fp, #-52]	; 0xffffffcc
   164ac:	ldr	r5, [sl]
   164b0:	ldr	r0, [r5, #56]	; 0x38
   164b4:	cmp	r0, #0
   164b8:	beq	164d0 <__assert_fail@plt+0x5020>
   164bc:	ldr	r4, [r0]
   164c0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   164c4:	cmp	r4, #0
   164c8:	mov	r0, r4
   164cc:	bne	164bc <__assert_fail@plt+0x500c>
   164d0:	mov	r0, #31
   164d4:	mov	r4, #0
   164d8:	str	r0, [r5, #64]	; 0x40
   164dc:	str	r4, [r5, #52]	; 0x34
   164e0:	str	r4, [r5, #56]	; 0x38
   164e4:	ldr	r0, [r5, #16]
   164e8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   164ec:	str	r4, [r5, #16]
   164f0:	ldr	r0, [sp, #40]	; 0x28
   164f4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   164f8:	ldr	r0, [sp, #44]	; 0x2c
   164fc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   16500:	ldrb	r0, [sp, #107]	; 0x6b
   16504:	cmp	r0, #0
   16508:	beq	16514 <__assert_fail@plt+0x5064>
   1650c:	ldr	r0, [sp, #36]	; 0x24
   16510:	bl	2bc28 <__assert_fail@plt+0x1a778>
   16514:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16518:	cmp	r0, #0
   1651c:	bne	1654c <__assert_fail@plt+0x509c>
   16520:	mov	r0, r4
   16524:	sub	sp, fp, #28
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1652c:	ldr	sl, [sp, #16]
   16530:	mov	r0, #12
   16534:	ldr	r9, [sp, #20]
   16538:	b	156f4 <__assert_fail@plt+0x4244>
   1653c:	ldr	r8, [sp, #20]
   16540:	b	164a8 <__assert_fail@plt+0x4ff8>
   16544:	ldrb	r2, [r1, #88]	; 0x58
   16548:	b	160e0 <__assert_fail@plt+0x4c30>
   1654c:	ldr	r0, [sp, #8]
   16550:	cmp	r0, #0
   16554:	beq	16560 <__assert_fail@plt+0x50b0>
   16558:	add	r0, r8, #136	; 0x88
   1655c:	bl	11210 <pthread_mutex_destroy@plt>
   16560:	mov	r0, r8
   16564:	b	15778 <__assert_fail@plt+0x42c8>
   16568:	mov	r0, #0
   1656c:	str	r0, [fp, #-48]	; 0xffffffd0
   16570:	str	r0, [fp, #-44]	; 0xffffffd4
   16574:	mov	r0, #12
   16578:	str	r0, [fp, #-32]	; 0xffffffe0
   1657c:	b	164a8 <__assert_fail@plt+0x4ff8>
   16580:	bl	114a4 <abort@plt>
   16584:	movw	r2, #59056	; 0xe6b0
   16588:	movt	r2, #3
   1658c:	ldr	r1, [r2]
   16590:	str	r0, [r2]
   16594:	mov	r0, r1
   16598:	bx	lr
   1659c:	push	{r4, r5, r6, sl, fp, lr}
   165a0:	add	fp, sp, #16
   165a4:	ldr	r5, [r0, #16]
   165a8:	ldr	r6, [r0]
   165ac:	mov	r4, r0
   165b0:	mov	r1, #0
   165b4:	mov	r2, #256	; 0x100
   165b8:	mov	r0, r5
   165bc:	bl	113cc <memset@plt>
   165c0:	ldr	r1, [r6, #36]	; 0x24
   165c4:	mov	r0, r4
   165c8:	mov	r2, r5
   165cc:	bl	16634 <__assert_fail@plt+0x5184>
   165d0:	ldr	r0, [r6, #36]	; 0x24
   165d4:	ldr	r1, [r6, #40]	; 0x28
   165d8:	cmp	r0, r1
   165dc:	beq	165f0 <__assert_fail@plt+0x5140>
   165e0:	mov	r0, r4
   165e4:	mov	r2, r5
   165e8:	bl	16634 <__assert_fail@plt+0x5184>
   165ec:	ldr	r0, [r6, #36]	; 0x24
   165f0:	ldr	r1, [r6, #44]	; 0x2c
   165f4:	cmp	r0, r1
   165f8:	beq	1660c <__assert_fail@plt+0x515c>
   165fc:	mov	r0, r4
   16600:	mov	r2, r5
   16604:	bl	16634 <__assert_fail@plt+0x5184>
   16608:	ldr	r0, [r6, #36]	; 0x24
   1660c:	ldr	r1, [r6, #48]	; 0x30
   16610:	cmp	r0, r1
   16614:	movne	r0, r4
   16618:	movne	r2, r5
   1661c:	blne	16634 <__assert_fail@plt+0x5184>
   16620:	ldrb	r0, [r4, #28]
   16624:	orr	r0, r0, #8
   16628:	strb	r0, [r4, #28]
   1662c:	mov	r0, #0
   16630:	pop	{r4, r5, r6, sl, fp, pc}
   16634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16638:	add	fp, sp, #28
   1663c:	sub	sp, sp, #348	; 0x15c
   16640:	ldr	r3, [r0]
   16644:	mov	r8, r0
   16648:	mov	sl, r2
   1664c:	mov	r2, #0
   16650:	str	r2, [sp, #40]	; 0x28
   16654:	ldr	r0, [r3, #92]	; 0x5c
   16658:	cmp	r0, #1
   1665c:	bne	1666c <__assert_fail@plt+0x51bc>
   16660:	ldrb	r0, [r8, #14]
   16664:	ubfx	r0, r0, #6, #1
   16668:	str	r0, [sp, #40]	; 0x28
   1666c:	ldr	r0, [r1, #8]
   16670:	cmp	r0, #1
   16674:	blt	1711c <__assert_fail@plt+0x5c6c>
   16678:	mvn	r0, #5
   1667c:	mov	r7, #0
   16680:	mov	lr, #1
   16684:	mov	r2, #0
   16688:	str	r8, [sp, #28]
   1668c:	str	sl, [sp, #68]	; 0x44
   16690:	str	r1, [sp, #48]	; 0x30
   16694:	str	r3, [sp, #64]	; 0x40
   16698:	sub	r0, r0, sl
   1669c:	str	r0, [sp, #24]
   166a0:	add	r0, sl, #7
   166a4:	str	r0, [sp, #20]
   166a8:	add	r0, sl, #5
   166ac:	str	r0, [sp, #16]
   166b0:	add	r0, sl, #4
   166b4:	str	r0, [sp, #12]
   166b8:	add	r0, sl, #3
   166bc:	str	r0, [sp, #8]
   166c0:	add	r0, sp, #72	; 0x48
   166c4:	add	r0, r0, #1
   166c8:	str	r0, [sp, #4]
   166cc:	b	166f0 <__assert_fail@plt+0x5240>
   166d0:	mov	lr, #1
   166d4:	ldr	r1, [sp, #48]	; 0x30
   166d8:	ldr	r2, [sp, #52]	; 0x34
   166dc:	ldr	r3, [sp, #64]	; 0x40
   166e0:	ldr	r0, [r1, #8]
   166e4:	add	r2, r2, #1
   166e8:	cmp	r2, r0
   166ec:	bge	1711c <__assert_fail@plt+0x5c6c>
   166f0:	ldr	r0, [r1, #12]
   166f4:	str	r2, [sp, #52]	; 0x34
   166f8:	ldr	r6, [r0, r2, lsl #2]
   166fc:	ldr	r2, [r3]
   16700:	add	r0, r2, r6, lsl #3
   16704:	ldrb	r4, [r0, #4]
   16708:	sub	r0, r4, #1
   1670c:	cmp	r0, #6
   16710:	bhi	166d4 <__assert_fail@plt+0x5224>
   16714:	add	r1, pc, #0
   16718:	ldr	pc, [r1, r0, lsl #2]
   1671c:	andeq	r6, r1, r8, lsr r7
   16720:	strdeq	r7, [r1], -r8
   16724:	andeq	r6, r1, r0, asr #16
   16728:	ldrdeq	r6, [r1], -r4
   1672c:	strdeq	r7, [r1], -r8
   16730:	strdeq	r6, [r1], -r8
   16734:	strdeq	r7, [r1], -r8
   16738:	ldrb	r4, [r2, r6, lsl #3]
   1673c:	ldr	r0, [sp, #40]	; 0x28
   16740:	cmp	r0, #0
   16744:	strb	lr, [sl, r4]
   16748:	beq	16760 <__assert_fail@plt+0x52b0>
   1674c:	bl	1133c <__ctype_tolower_loc@plt>
   16750:	ldr	r0, [r0]
   16754:	mov	lr, #1
   16758:	ldr	r0, [r0, r4, lsl #2]
   1675c:	strb	lr, [sl, r0]
   16760:	ldrb	r0, [r8, #14]
   16764:	tst	r0, #64	; 0x40
   16768:	beq	166d4 <__assert_fail@plt+0x5224>
   1676c:	ldr	r0, [sp, #64]	; 0x40
   16770:	ldr	r0, [r0, #92]	; 0x5c
   16774:	cmp	r0, #2
   16778:	blt	166d4 <__assert_fail@plt+0x5224>
   1677c:	ldr	ip, [sp, #64]	; 0x40
   16780:	add	r1, r6, #1
   16784:	movw	r4, #1
   16788:	mov	r9, #1
   1678c:	add	r5, sp, #72	; 0x48
   16790:	movt	r4, #32
   16794:	ldr	r0, [ip]
   16798:	ldrb	r0, [r0, r6, lsl #3]
   1679c:	strb	r0, [sp, #72]	; 0x48
   167a0:	ldr	r0, [ip, #8]
   167a4:	cmp	r1, r0
   167a8:	ldr	r0, [sp, #4]
   167ac:	bcs	167f0 <__assert_fail@plt+0x5340>
   167b0:	ldr	r0, [sp, #4]
   167b4:	ldr	r1, [ip]
   167b8:	add	r3, r4, #254	; 0xfe
   167bc:	add	r1, r1, r6, lsl #3
   167c0:	ldr	r2, [r1, #12]
   167c4:	and	r2, r2, r3
   167c8:	cmp	r2, r4
   167cc:	bne	167f0 <__assert_fail@plt+0x5340>
   167d0:	ldrb	r1, [r1, #8]
   167d4:	add	r3, r6, #2
   167d8:	strb	r1, [r0], #1
   167dc:	add	r1, r6, #1
   167e0:	ldr	r2, [ip, #8]
   167e4:	mov	r6, r1
   167e8:	cmp	r3, r2
   167ec:	bcc	167b4 <__assert_fail@plt+0x5304>
   167f0:	sub	r4, r0, r5
   167f4:	sub	r0, fp, #36	; 0x24
   167f8:	mov	r1, r5
   167fc:	sub	r3, fp, #48	; 0x30
   16800:	str	r7, [fp, #-44]	; 0xffffffd4
   16804:	str	r7, [fp, #-48]	; 0xffffffd0
   16808:	mov	r2, r4
   1680c:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   16810:	cmp	r0, r4
   16814:	bne	166d0 <__assert_fail@plt+0x5220>
   16818:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1681c:	bl	11270 <towlower@plt>
   16820:	mov	r1, r0
   16824:	mov	r0, r5
   16828:	sub	r2, fp, #48	; 0x30
   1682c:	bl	111e0 <wcrtomb@plt>
   16830:	cmn	r0, #1
   16834:	ldrbne	r0, [sp, #72]	; 0x48
   16838:	strbne	r9, [sl, r0]
   1683c:	b	166d0 <__assert_fail@plt+0x5220>
   16840:	ldr	r0, [sp, #40]	; 0x28
   16844:	cmp	r0, #0
   16848:	beq	16adc <__assert_fail@plt+0x562c>
   1684c:	ldr	r0, [r2, r6, lsl #3]
   16850:	ldr	r1, [sp, #16]
   16854:	ldr	r2, [sp, #12]
   16858:	ldr	r7, [sp, #8]
   1685c:	mov	lr, #0
   16860:	mov	r3, #4
   16864:	str	r6, [sp, #44]	; 0x2c
   16868:	ldr	r0, [r0]
   1686c:	str	r0, [sp, #60]	; 0x3c
   16870:	ldr	r0, [sp, #20]
   16874:	b	168a0 <__assert_fail@plt+0x53f0>
   16878:	ldr	r1, [sp, #68]	; 0x44
   1687c:	strb	r2, [r1, r0]
   16880:	add	lr, r8, #1
   16884:	add	r0, r6, #1
   16888:	add	r1, r5, #1
   1688c:	add	r2, r9, #1
   16890:	add	r7, sl, #1
   16894:	add	r3, r4, #4
   16898:	cmp	lr, #32
   1689c:	beq	16c84 <__assert_fail@plt+0x57d4>
   168a0:	mov	r6, r0
   168a4:	ldr	r0, [sp, #60]	; 0x3c
   168a8:	mov	r9, r2
   168ac:	mov	r2, #1
   168b0:	mov	r8, lr
   168b4:	mov	r4, r3
   168b8:	mov	sl, r7
   168bc:	mov	r5, r1
   168c0:	tst	r0, r2, lsl lr
   168c4:	beq	16880 <__assert_fail@plt+0x53d0>
   168c8:	ldr	r0, [sp, #68]	; 0x44
   168cc:	strb	r2, [r0, r8]
   168d0:	add	r0, r8, #128	; 0x80
   168d4:	lsr	r0, r0, #7
   168d8:	cmp	r0, #2
   168dc:	mov	r0, r8
   168e0:	bhi	16878 <__assert_fail@plt+0x53c8>
   168e4:	bl	1133c <__ctype_tolower_loc@plt>
   168e8:	ldr	r0, [r0]
   168ec:	mov	r2, #1
   168f0:	ldr	r0, [r0, r8, lsl #2]
   168f4:	b	16878 <__assert_fail@plt+0x53c8>
   168f8:	ldr	r0, [sp, #64]	; 0x40
   168fc:	ldr	r4, [r2, r6, lsl #3]
   16900:	ldr	r0, [r0, #92]	; 0x5c
   16904:	cmp	r0, #2
   16908:	blt	16980 <__assert_fail@plt+0x54d0>
   1690c:	ldr	r0, [r4, #36]	; 0x24
   16910:	cmp	r0, #0
   16914:	bne	16930 <__assert_fail@plt+0x5480>
   16918:	ldrb	r0, [r4, #16]
   1691c:	tst	r0, #1
   16920:	bne	16930 <__assert_fail@plt+0x5480>
   16924:	ldr	r0, [r4, #32]
   16928:	cmp	r0, #0
   1692c:	beq	16980 <__assert_fail@plt+0x54d0>
   16930:	add	r4, sp, #72	; 0x48
   16934:	sub	r5, fp, #48	; 0x30
   16938:	strb	r7, [fp, #-48]	; 0xffffffd0
   1693c:	mov	r0, #0
   16940:	mov	r1, r5
   16944:	mov	r2, #1
   16948:	mov	r3, r4
   1694c:	str	r7, [sp, #76]	; 0x4c
   16950:	str	r7, [sp, #72]	; 0x48
   16954:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   16958:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1695c:	cmn	r0, #2
   16960:	mov	lr, #1
   16964:	add	r0, r1, #1
   16968:	strbeq	lr, [sl, r1]
   1696c:	uxtb	r1, r0
   16970:	strb	r0, [fp, #-48]	; 0xffffffd0
   16974:	cmp	r1, r0
   16978:	beq	1693c <__assert_fail@plt+0x548c>
   1697c:	b	166d4 <__assert_fail@plt+0x5224>
   16980:	ldr	r0, [r4, #20]
   16984:	cmp	r0, #1
   16988:	blt	166d4 <__assert_fail@plt+0x5224>
   1698c:	ldr	r0, [sp, #40]	; 0x28
   16990:	mov	r5, #0
   16994:	cmp	r0, #0
   16998:	bne	169b4 <__assert_fail@plt+0x5504>
   1699c:	b	16a5c <__assert_fail@plt+0x55ac>
   169a0:	ldr	r0, [r4, #20]
   169a4:	add	r5, r5, #1
   169a8:	mov	r7, #0
   169ac:	cmp	r5, r0
   169b0:	bge	166d4 <__assert_fail@plt+0x5224>
   169b4:	str	r7, [fp, #-44]	; 0xffffffd4
   169b8:	str	r7, [fp, #-48]	; 0xffffffd0
   169bc:	sub	r9, fp, #48	; 0x30
   169c0:	add	r7, sp, #72	; 0x48
   169c4:	ldr	r0, [r4]
   169c8:	mov	r2, r9
   169cc:	ldr	r1, [r0, r5, lsl #2]
   169d0:	mov	r0, r7
   169d4:	bl	111e0 <wcrtomb@plt>
   169d8:	mov	lr, #1
   169dc:	cmn	r0, #1
   169e0:	beq	16a00 <__assert_fail@plt+0x5550>
   169e4:	ldrb	r6, [sp, #72]	; 0x48
   169e8:	strb	lr, [sl, r6]
   169ec:	bl	1133c <__ctype_tolower_loc@plt>
   169f0:	ldr	r0, [r0]
   169f4:	mov	lr, #1
   169f8:	ldr	r0, [r0, r6, lsl #2]
   169fc:	strb	lr, [sl, r0]
   16a00:	ldrb	r0, [r8, #14]
   16a04:	tst	r0, #64	; 0x40
   16a08:	beq	169a0 <__assert_fail@plt+0x54f0>
   16a0c:	ldr	r0, [sp, #64]	; 0x40
   16a10:	ldr	r0, [r0, #92]	; 0x5c
   16a14:	cmp	r0, #2
   16a18:	blt	169a0 <__assert_fail@plt+0x54f0>
   16a1c:	ldr	r0, [r4]
   16a20:	ldr	r0, [r0, r5, lsl #2]
   16a24:	bl	11270 <towlower@plt>
   16a28:	mov	r1, r0
   16a2c:	mov	r0, r7
   16a30:	mov	r2, r9
   16a34:	bl	111e0 <wcrtomb@plt>
   16a38:	cmn	r0, #1
   16a3c:	mov	lr, #1
   16a40:	ldrbne	r0, [sp, #72]	; 0x48
   16a44:	strbne	lr, [sl, r0]
   16a48:	b	169a0 <__assert_fail@plt+0x54f0>
   16a4c:	ldr	r0, [r4, #20]
   16a50:	add	r5, r5, #1
   16a54:	cmp	r5, r0
   16a58:	bge	166d4 <__assert_fail@plt+0x5224>
   16a5c:	str	r7, [fp, #-44]	; 0xffffffd4
   16a60:	str	r7, [fp, #-48]	; 0xffffffd0
   16a64:	sub	r9, fp, #48	; 0x30
   16a68:	add	r6, sp, #72	; 0x48
   16a6c:	ldr	r0, [r4]
   16a70:	mov	r2, r9
   16a74:	ldr	r1, [r0, r5, lsl #2]
   16a78:	mov	r0, r6
   16a7c:	bl	111e0 <wcrtomb@plt>
   16a80:	cmn	r0, #1
   16a84:	mov	lr, #1
   16a88:	ldrbne	r0, [sp, #72]	; 0x48
   16a8c:	strbne	lr, [sl, r0]
   16a90:	ldrb	r0, [r8, #14]
   16a94:	tst	r0, #64	; 0x40
   16a98:	beq	16a4c <__assert_fail@plt+0x559c>
   16a9c:	ldr	r0, [sp, #64]	; 0x40
   16aa0:	ldr	r0, [r0, #92]	; 0x5c
   16aa4:	cmp	r0, #2
   16aa8:	blt	16a4c <__assert_fail@plt+0x559c>
   16aac:	ldr	r0, [r4]
   16ab0:	ldr	r0, [r0, r5, lsl #2]
   16ab4:	bl	11270 <towlower@plt>
   16ab8:	mov	r1, r0
   16abc:	mov	r0, r6
   16ac0:	mov	r2, r9
   16ac4:	bl	111e0 <wcrtomb@plt>
   16ac8:	cmn	r0, #1
   16acc:	mov	lr, #1
   16ad0:	ldrbne	r0, [sp, #72]	; 0x48
   16ad4:	strbne	lr, [sl, r0]
   16ad8:	b	16a4c <__assert_fail@plt+0x559c>
   16adc:	mov	r0, #0
   16ae0:	mov	r1, #31
   16ae4:	ldr	r2, [r2, r6, lsl #3]
   16ae8:	ldr	r2, [r2, r0]
   16aec:	tst	r2, #1
   16af0:	addne	r3, sl, r1
   16af4:	strbne	lr, [r3, #-31]	; 0xffffffe1
   16af8:	tst	r2, #2
   16afc:	addne	r3, sl, r0, lsl #3
   16b00:	strbne	lr, [r3, #1]
   16b04:	tst	r2, #4
   16b08:	addne	r3, sl, r0, lsl #3
   16b0c:	strbne	lr, [r3, #2]
   16b10:	tst	r2, #8
   16b14:	addne	r3, sl, r0, lsl #3
   16b18:	strbne	lr, [r3, #3]
   16b1c:	tst	r2, #16
   16b20:	addne	r3, sl, r0, lsl #3
   16b24:	strbne	lr, [r3, #4]
   16b28:	tst	r2, #32
   16b2c:	addne	r3, sl, r0, lsl #3
   16b30:	strbne	lr, [r3, #5]
   16b34:	tst	r2, #64	; 0x40
   16b38:	addne	r3, sl, r0, lsl #3
   16b3c:	strbne	lr, [r3, #6]
   16b40:	tst	r2, #128	; 0x80
   16b44:	addne	r3, sl, r0, lsl #3
   16b48:	strbne	lr, [r3, #7]
   16b4c:	tst	r2, #256	; 0x100
   16b50:	addne	r3, sl, r0, lsl #3
   16b54:	strbne	lr, [r3, #8]
   16b58:	tst	r2, #512	; 0x200
   16b5c:	addne	r3, sl, r0, lsl #3
   16b60:	strbne	lr, [r3, #9]
   16b64:	tst	r2, #1024	; 0x400
   16b68:	addne	r3, sl, r0, lsl #3
   16b6c:	strbne	lr, [r3, #10]
   16b70:	tst	r2, #2048	; 0x800
   16b74:	addne	r3, sl, r0, lsl #3
   16b78:	strbne	lr, [r3, #11]
   16b7c:	tst	r2, #4096	; 0x1000
   16b80:	addne	r3, sl, r0, lsl #3
   16b84:	strbne	lr, [r3, #12]
   16b88:	tst	r2, #8192	; 0x2000
   16b8c:	addne	r3, sl, r0, lsl #3
   16b90:	strbne	lr, [r3, #13]
   16b94:	tst	r2, #16384	; 0x4000
   16b98:	addne	r3, sl, r0, lsl #3
   16b9c:	strbne	lr, [r3, #14]
   16ba0:	tst	r2, #32768	; 0x8000
   16ba4:	addne	r3, sl, r0, lsl #3
   16ba8:	strbne	lr, [r3, #15]
   16bac:	tst	r2, #65536	; 0x10000
   16bb0:	addne	r3, sl, r0, lsl #3
   16bb4:	strbne	lr, [r3, #16]
   16bb8:	tst	r2, #131072	; 0x20000
   16bbc:	addne	r3, sl, r0, lsl #3
   16bc0:	strbne	lr, [r3, #17]
   16bc4:	tst	r2, #262144	; 0x40000
   16bc8:	addne	r3, sl, r0, lsl #3
   16bcc:	strbne	lr, [r3, #18]
   16bd0:	tst	r2, #524288	; 0x80000
   16bd4:	addne	r3, sl, r0, lsl #3
   16bd8:	strbne	lr, [r3, #19]
   16bdc:	tst	r2, #1048576	; 0x100000
   16be0:	addne	r3, sl, r0, lsl #3
   16be4:	strbne	lr, [r3, #20]
   16be8:	tst	r2, #2097152	; 0x200000
   16bec:	addne	r3, sl, r0, lsl #3
   16bf0:	strbne	lr, [r3, #21]
   16bf4:	tst	r2, #4194304	; 0x400000
   16bf8:	addne	r3, sl, r0, lsl #3
   16bfc:	strbne	lr, [r3, #22]
   16c00:	tst	r2, #8388608	; 0x800000
   16c04:	addne	r3, sl, r0, lsl #3
   16c08:	strbne	lr, [r3, #23]
   16c0c:	tst	r2, #16777216	; 0x1000000
   16c10:	addne	r3, sl, r0, lsl #3
   16c14:	strbne	lr, [r3, #24]
   16c18:	tst	r2, #33554432	; 0x2000000
   16c1c:	addne	r3, sl, r0, lsl #3
   16c20:	strbne	lr, [r3, #25]
   16c24:	tst	r2, #67108864	; 0x4000000
   16c28:	addne	r3, sl, r0, lsl #3
   16c2c:	strbne	lr, [r3, #26]
   16c30:	tst	r2, #134217728	; 0x8000000
   16c34:	addne	r3, sl, r0, lsl #3
   16c38:	strbne	lr, [r3, #27]
   16c3c:	tst	r2, #268435456	; 0x10000000
   16c40:	addne	r3, sl, r0, lsl #3
   16c44:	strbne	lr, [r3, #28]
   16c48:	tst	r2, #536870912	; 0x20000000
   16c4c:	addne	r3, sl, r0, lsl #3
   16c50:	strbne	lr, [r3, #29]
   16c54:	tst	r2, #1073741824	; 0x40000000
   16c58:	addne	r3, sl, r0, lsl #3
   16c5c:	strbne	lr, [r3, #30]
   16c60:	cmn	r2, #1
   16c64:	strble	lr, [sl, r1]
   16c68:	cmp	r0, #28
   16c6c:	beq	166d4 <__assert_fail@plt+0x5224>
   16c70:	ldr	r2, [sp, #64]	; 0x40
   16c74:	add	r1, r1, #32
   16c78:	add	r0, r0, #4
   16c7c:	ldr	r2, [r2]
   16c80:	b	16ae4 <__assert_fail@plt+0x5634>
   16c84:	ldr	r0, [sp, #68]	; 0x44
   16c88:	ldr	r1, [sp, #44]	; 0x2c
   16c8c:	mov	ip, r5
   16c90:	mov	r5, r8
   16c94:	str	r8, [sp, #36]	; 0x24
   16c98:	add	r3, r0, lr
   16c9c:	ldr	r0, [sp, #64]	; 0x40
   16ca0:	ldr	r0, [r0]
   16ca4:	ldr	r0, [r0, r1, lsl #3]
   16ca8:	mov	r1, ip
   16cac:	ldr	r0, [r0, #4]
   16cb0:	str	r0, [sp, #60]	; 0x3c
   16cb4:	mov	r0, #0
   16cb8:	b	16d20 <__assert_fail@plt+0x5870>
   16cbc:	mov	r9, r7
   16cc0:	str	sl, [sp, #56]	; 0x38
   16cc4:	mov	r6, ip
   16cc8:	mov	sl, lr
   16ccc:	mov	r7, r3
   16cd0:	bl	1133c <__ctype_tolower_loc@plt>
   16cd4:	ldr	r0, [r0]
   16cd8:	mov	lr, sl
   16cdc:	ldr	sl, [sp, #56]	; 0x38
   16ce0:	ldr	r1, [sp, #68]	; 0x44
   16ce4:	mov	r3, r7
   16ce8:	mov	r7, r9
   16cec:	mov	ip, r6
   16cf0:	mov	r2, #1
   16cf4:	ldr	r0, [r0, r4]
   16cf8:	strb	r2, [r1, r0]
   16cfc:	add	r0, r8, #1
   16d00:	mov	r2, sl
   16d04:	add	r6, ip, #1
   16d08:	add	r1, r7, #1
   16d0c:	add	r9, r5, #1
   16d10:	add	sl, sl, #1
   16d14:	add	r4, r4, #4
   16d18:	cmp	r0, #32
   16d1c:	beq	16d68 <__assert_fail@plt+0x58b8>
   16d20:	mov	r7, r1
   16d24:	ldr	r1, [sp, #60]	; 0x3c
   16d28:	mov	r8, r0
   16d2c:	mov	r0, #1
   16d30:	mov	r5, r9
   16d34:	mov	ip, r6
   16d38:	tst	r1, r0, lsl r8
   16d3c:	beq	16cfc <__assert_fail@plt+0x584c>
   16d40:	strb	r0, [r3, r8]
   16d44:	add	r0, lr, r8
   16d48:	add	r0, r0, #128	; 0x80
   16d4c:	lsr	r0, r0, #7
   16d50:	cmp	r0, #2
   16d54:	bls	16cbc <__assert_fail@plt+0x580c>
   16d58:	ldr	r1, [sp, #68]	; 0x44
   16d5c:	add	r0, lr, r8
   16d60:	mov	r2, #1
   16d64:	b	16cf8 <__assert_fail@plt+0x5848>
   16d68:	add	r9, lr, r0
   16d6c:	ldr	r0, [sp, #64]	; 0x40
   16d70:	ldr	r1, [sp, #44]	; 0x2c
   16d74:	mov	lr, #1
   16d78:	mov	r6, r2
   16d7c:	str	r8, [sp, #60]	; 0x3c
   16d80:	ldr	r0, [r0]
   16d84:	ldr	r0, [r0, r1, lsl #3]
   16d88:	ldr	sl, [r0, #8]
   16d8c:	mov	r0, #0
   16d90:	b	16dbc <__assert_fail@plt+0x590c>
   16d94:	ldr	r7, [sp, #68]	; 0x44
   16d98:	strb	lr, [r7, r0]
   16d9c:	add	r0, r1, #1
   16da0:	add	ip, r2, #1
   16da4:	add	r7, r3, #1
   16da8:	add	r5, r4, #1
   16dac:	add	r6, r8, #1
   16db0:	add	r9, r9, #1
   16db4:	cmp	r0, #32
   16db8:	beq	16e28 <__assert_fail@plt+0x5978>
   16dbc:	tst	sl, lr, lsl r0
   16dc0:	mov	r1, r0
   16dc4:	mov	r8, r6
   16dc8:	mov	r4, r5
   16dcc:	mov	r3, r7
   16dd0:	mov	r2, ip
   16dd4:	beq	16d9c <__assert_fail@plt+0x58ec>
   16dd8:	ldr	r0, [sp, #68]	; 0x44
   16ddc:	strb	lr, [r0, r9]
   16de0:	add	r0, r9, #128	; 0x80
   16de4:	lsr	r0, r0, #7
   16de8:	cmp	r0, #2
   16dec:	mov	r0, r9
   16df0:	bhi	16d94 <__assert_fail@plt+0x58e4>
   16df4:	mov	r6, sl
   16df8:	mov	r7, r1
   16dfc:	mov	r5, r2
   16e00:	mov	sl, r3
   16e04:	bl	1133c <__ctype_tolower_loc@plt>
   16e08:	ldr	r0, [r0]
   16e0c:	mov	r3, sl
   16e10:	mov	sl, r6
   16e14:	mov	r2, r5
   16e18:	mov	r1, r7
   16e1c:	mov	lr, #1
   16e20:	ldr	r0, [r0, r9, lsl #2]
   16e24:	b	16d94 <__assert_fail@plt+0x58e4>
   16e28:	ldr	r0, [sp, #64]	; 0x40
   16e2c:	str	r1, [sp, #56]	; 0x38
   16e30:	ldr	r1, [sp, #44]	; 0x2c
   16e34:	ldr	r0, [r0]
   16e38:	ldr	r0, [r0, r1, lsl #3]
   16e3c:	ldr	r5, [r0, #12]
   16e40:	mov	r0, #0
   16e44:	b	16e74 <__assert_fail@plt+0x59c4>
   16e48:	ldr	r1, [sp, #68]	; 0x44
   16e4c:	strb	lr, [r1, r0]
   16e50:	mov	r1, r4
   16e54:	add	r0, r1, #1
   16e58:	add	r2, sl, #1
   16e5c:	add	r3, r7, #1
   16e60:	add	r4, r6, #1
   16e64:	add	r8, r8, #1
   16e68:	add	r9, r9, #1
   16e6c:	cmp	r0, #32
   16e70:	beq	16ebc <__assert_fail@plt+0x5a0c>
   16e74:	tst	r5, lr, lsl r0
   16e78:	mov	r1, r0
   16e7c:	mov	r6, r4
   16e80:	mov	r7, r3
   16e84:	mov	sl, r2
   16e88:	beq	16e54 <__assert_fail@plt+0x59a4>
   16e8c:	add	r0, r9, #128	; 0x80
   16e90:	mov	r4, r1
   16e94:	strb	lr, [r8]
   16e98:	lsr	r0, r0, #7
   16e9c:	cmp	r0, #2
   16ea0:	mov	r0, r9
   16ea4:	bhi	16e48 <__assert_fail@plt+0x5998>
   16ea8:	bl	1133c <__ctype_tolower_loc@plt>
   16eac:	ldr	r0, [r0]
   16eb0:	mov	lr, #1
   16eb4:	ldr	r0, [r0, r9, lsl #2]
   16eb8:	b	16e48 <__assert_fail@plt+0x5998>
   16ebc:	ldr	r0, [sp, #64]	; 0x40
   16ec0:	str	r1, [sp, #32]
   16ec4:	ldr	r1, [sp, #44]	; 0x2c
   16ec8:	ldr	r0, [r0]
   16ecc:	ldr	r0, [r0, r1, lsl #3]
   16ed0:	ldr	r2, [r0, #16]
   16ed4:	mov	r0, #0
   16ed8:	b	16f00 <__assert_fail@plt+0x5a50>
   16edc:	ldr	r1, [sp, #68]	; 0x44
   16ee0:	strb	lr, [r1, r0]
   16ee4:	add	r0, r8, #1
   16ee8:	add	sl, r5, #1
   16eec:	add	r7, r4, #1
   16ef0:	add	r6, r6, #1
   16ef4:	add	r9, r9, #1
   16ef8:	cmp	r0, #32
   16efc:	beq	16f48 <__assert_fail@plt+0x5a98>
   16f00:	tst	r2, lr, lsl r0
   16f04:	mov	r8, r0
   16f08:	mov	r4, r7
   16f0c:	mov	r5, sl
   16f10:	beq	16ee4 <__assert_fail@plt+0x5a34>
   16f14:	add	r0, r9, #128	; 0x80
   16f18:	strb	lr, [r6]
   16f1c:	lsr	r0, r0, #7
   16f20:	cmp	r0, #2
   16f24:	mov	r0, r9
   16f28:	bhi	16edc <__assert_fail@plt+0x5a2c>
   16f2c:	mov	r7, r2
   16f30:	bl	1133c <__ctype_tolower_loc@plt>
   16f34:	ldr	r0, [r0]
   16f38:	mov	r2, r7
   16f3c:	mov	lr, #1
   16f40:	ldr	r0, [r0, r9, lsl #2]
   16f44:	b	16edc <__assert_fail@plt+0x5a2c>
   16f48:	ldr	r0, [sp, #64]	; 0x40
   16f4c:	ldr	r1, [sp, #44]	; 0x2c
   16f50:	ldr	r0, [r0]
   16f54:	ldr	r0, [r0, r1, lsl #3]
   16f58:	ldr	sl, [r0, #20]
   16f5c:	mov	r0, #0
   16f60:	tst	sl, lr, lsl r0
   16f64:	mov	r7, r0
   16f68:	mov	r6, r5
   16f6c:	bne	16fa4 <__assert_fail@plt+0x5af4>
   16f70:	b	16f7c <__assert_fail@plt+0x5acc>
   16f74:	ldr	r1, [sp, #68]	; 0x44
   16f78:	strb	lr, [r1, r0]
   16f7c:	add	r0, r7, #1
   16f80:	add	r5, r6, #1
   16f84:	add	r4, r4, #1
   16f88:	add	r9, r9, #1
   16f8c:	cmp	r0, #32
   16f90:	beq	16fd0 <__assert_fail@plt+0x5b20>
   16f94:	tst	sl, lr, lsl r0
   16f98:	mov	r7, r0
   16f9c:	mov	r6, r5
   16fa0:	beq	16f7c <__assert_fail@plt+0x5acc>
   16fa4:	add	r0, r9, #128	; 0x80
   16fa8:	strb	lr, [r4]
   16fac:	lsr	r0, r0, #7
   16fb0:	cmp	r0, #2
   16fb4:	mov	r0, r9
   16fb8:	bhi	16f74 <__assert_fail@plt+0x5ac4>
   16fbc:	bl	1133c <__ctype_tolower_loc@plt>
   16fc0:	ldr	r0, [r0]
   16fc4:	mov	lr, #1
   16fc8:	ldr	r0, [r0, r9, lsl #2]
   16fcc:	b	16f74 <__assert_fail@plt+0x5ac4>
   16fd0:	ldr	r0, [sp, #24]
   16fd4:	ldr	r1, [sp, #36]	; 0x24
   16fd8:	ldr	sl, [sp, #68]	; 0x44
   16fdc:	sub	r0, r0, r1
   16fe0:	ldr	r1, [sp, #60]	; 0x3c
   16fe4:	sub	r0, r0, r1
   16fe8:	ldr	r1, [sp, #56]	; 0x38
   16fec:	sub	r0, r0, r1
   16ff0:	ldr	r1, [sp, #32]
   16ff4:	sub	r0, r0, r1
   16ff8:	ldr	r1, [sp, #44]	; 0x2c
   16ffc:	sub	r0, r0, r8
   17000:	sub	r5, r0, r7
   17004:	ldr	r0, [sp, #64]	; 0x40
   17008:	mov	r7, #0
   1700c:	ldr	r0, [r0]
   17010:	ldr	r0, [r0, r1, lsl #3]
   17014:	ldr	r8, [r0, #24]
   17018:	tst	r8, lr, lsl r7
   1701c:	mov	r4, r6
   17020:	bne	17050 <__assert_fail@plt+0x5ba0>
   17024:	b	1702c <__assert_fail@plt+0x5b7c>
   17028:	strb	lr, [sl, r0]
   1702c:	add	r7, r7, #1
   17030:	add	r6, r4, #1
   17034:	sub	r5, r5, #1
   17038:	add	r9, r9, #1
   1703c:	cmp	r7, #32
   17040:	beq	17080 <__assert_fail@plt+0x5bd0>
   17044:	tst	r8, lr, lsl r7
   17048:	mov	r4, r6
   1704c:	beq	1702c <__assert_fail@plt+0x5b7c>
   17050:	mov	r0, #0
   17054:	strb	lr, [r0, -r5]
   17058:	add	r0, r9, #128	; 0x80
   1705c:	lsr	r0, r0, #7
   17060:	cmp	r0, #2
   17064:	mov	r0, r9
   17068:	bhi	17028 <__assert_fail@plt+0x5b78>
   1706c:	bl	1133c <__ctype_tolower_loc@plt>
   17070:	ldr	r0, [r0]
   17074:	mov	lr, #1
   17078:	ldr	r0, [r0, r9, lsl #2]
   1707c:	b	17028 <__assert_fail@plt+0x5b78>
   17080:	ldr	r0, [sp, #64]	; 0x40
   17084:	ldr	r1, [sp, #44]	; 0x2c
   17088:	ldr	r8, [sp, #28]
   1708c:	mov	r6, #0
   17090:	mov	r7, #0
   17094:	ldr	r0, [r0]
   17098:	ldr	r0, [r0, r1, lsl #3]
   1709c:	ldr	r5, [r0, #28]
   170a0:	tst	r5, lr, lsl r6
   170a4:	bne	170cc <__assert_fail@plt+0x5c1c>
   170a8:	b	170b0 <__assert_fail@plt+0x5c00>
   170ac:	strb	lr, [sl, r0]
   170b0:	add	r6, r6, #1
   170b4:	add	r4, r4, #1
   170b8:	add	r9, r9, #1
   170bc:	cmp	r6, #32
   170c0:	beq	166d4 <__assert_fail@plt+0x5224>
   170c4:	tst	r5, lr, lsl r6
   170c8:	beq	170b0 <__assert_fail@plt+0x5c00>
   170cc:	add	r0, r9, #128	; 0x80
   170d0:	strb	lr, [r4]
   170d4:	lsr	r0, r0, #7
   170d8:	cmp	r0, #2
   170dc:	mov	r0, r9
   170e0:	bhi	170ac <__assert_fail@plt+0x5bfc>
   170e4:	bl	1133c <__ctype_tolower_loc@plt>
   170e8:	ldr	r0, [r0]
   170ec:	mov	lr, #1
   170f0:	ldr	r0, [r0, r9, lsl #2]
   170f4:	b	170ac <__assert_fail@plt+0x5bfc>
   170f8:	mov	r0, sl
   170fc:	mov	r1, #1
   17100:	mov	r2, #256	; 0x100
   17104:	bl	113cc <memset@plt>
   17108:	cmp	r4, #2
   1710c:	bne	1711c <__assert_fail@plt+0x5c6c>
   17110:	ldrb	r0, [r8, #28]
   17114:	orr	r0, r0, #1
   17118:	strb	r0, [r8, #28]
   1711c:	sub	sp, fp, #28
   17120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17128:	add	fp, sp, #24
   1712c:	mov	r4, r0
   17130:	mov	r0, #0
   17134:	mov	r6, r2
   17138:	mov	r5, r1
   1713c:	str	r0, [r4]
   17140:	str	r0, [r4, #4]
   17144:	str	r0, [r4, #8]
   17148:	mov	r0, #256	; 0x100
   1714c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   17150:	cmp	r0, #0
   17154:	str	r0, [r4, #16]
   17158:	beq	17288 <__assert_fail@plt+0x5dd8>
   1715c:	movw	r0, #45820	; 0xb2fc
   17160:	tst	r6, #1
   17164:	and	r1, r6, #2
   17168:	movt	r0, #3
   1716c:	movweq	r0, #710	; 0x2c6
   17170:	movteq	r0, #257	; 0x101
   17174:	tst	r6, #4
   17178:	orr	r7, r0, r1, lsl #21
   1717c:	bne	17190 <__assert_fail@plt+0x5ce0>
   17180:	ldrb	r0, [r4, #28]
   17184:	and	r0, r0, #127	; 0x7f
   17188:	strb	r0, [r4, #28]
   1718c:	b	171b0 <__assert_fail@plt+0x5d00>
   17190:	ldrb	r0, [r4, #28]
   17194:	mvn	r1, #127	; 0x7f
   17198:	orr	r0, r0, r1
   1719c:	movw	r1, #45758	; 0xb2be
   171a0:	movt	r1, #323	; 0x143
   171a4:	strb	r0, [r4, #28]
   171a8:	and	r1, r7, r1
   171ac:	orr	r7, r1, #256	; 0x100
   171b0:	and	r1, r6, #8
   171b4:	and	r0, r0, #239	; 0xef
   171b8:	mov	r8, #0
   171bc:	orr	r0, r0, r1, lsl #1
   171c0:	str	r8, [r4, #20]
   171c4:	strb	r0, [r4, #28]
   171c8:	mov	r0, r5
   171cc:	bl	11390 <strlen@plt>
   171d0:	mov	r2, r0
   171d4:	mov	r0, r4
   171d8:	mov	r1, r5
   171dc:	mov	r3, r7
   171e0:	bl	14d60 <__assert_fail@plt+0x38b0>
   171e4:	cmp	r0, #16
   171e8:	mov	r5, r0
   171ec:	movweq	r5, #8
   171f0:	cmp	r5, #0
   171f4:	bne	17294 <__assert_fail@plt+0x5de4>
   171f8:	ldr	r5, [r4, #16]
   171fc:	ldr	r6, [r4]
   17200:	mov	r1, #0
   17204:	mov	r2, #256	; 0x100
   17208:	mov	r0, r5
   1720c:	bl	113cc <memset@plt>
   17210:	ldr	r1, [r6, #36]	; 0x24
   17214:	mov	r0, r4
   17218:	mov	r2, r5
   1721c:	bl	16634 <__assert_fail@plt+0x5184>
   17220:	ldr	r0, [r6, #36]	; 0x24
   17224:	ldr	r1, [r6, #40]	; 0x28
   17228:	cmp	r0, r1
   1722c:	beq	17240 <__assert_fail@plt+0x5d90>
   17230:	mov	r0, r4
   17234:	mov	r2, r5
   17238:	bl	16634 <__assert_fail@plt+0x5184>
   1723c:	ldr	r0, [r6, #36]	; 0x24
   17240:	ldr	r1, [r6, #44]	; 0x2c
   17244:	cmp	r0, r1
   17248:	beq	1725c <__assert_fail@plt+0x5dac>
   1724c:	mov	r0, r4
   17250:	mov	r2, r5
   17254:	bl	16634 <__assert_fail@plt+0x5184>
   17258:	ldr	r0, [r6, #36]	; 0x24
   1725c:	ldr	r1, [r6, #48]	; 0x30
   17260:	cmp	r0, r1
   17264:	movne	r0, r4
   17268:	movne	r2, r5
   1726c:	blne	16634 <__assert_fail@plt+0x5184>
   17270:	ldrb	r0, [r4, #28]
   17274:	mov	r5, #0
   17278:	orr	r0, r0, #8
   1727c:	strb	r0, [r4, #28]
   17280:	mov	r0, r5
   17284:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17288:	mov	r5, #12
   1728c:	mov	r0, r5
   17290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17294:	ldr	r0, [r4, #16]
   17298:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1729c:	mov	r0, r5
   172a0:	str	r8, [r4, #16]
   172a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172a8:	push	{r4, r5, r6, r7, fp, lr}
   172ac:	add	fp, sp, #16
   172b0:	cmp	r0, #17
   172b4:	bcs	17328 <__assert_fail@plt+0x5e78>
   172b8:	movw	r1, #53152	; 0xcfa0
   172bc:	mov	r4, r2
   172c0:	mov	r2, #5
   172c4:	mov	r5, r3
   172c8:	movt	r1, #2
   172cc:	ldr	r0, [r1, r0, lsl #2]
   172d0:	movw	r1, #52768	; 0xce20
   172d4:	movt	r1, #2
   172d8:	add	r1, r1, r0
   172dc:	mov	r0, #0
   172e0:	bl	112a0 <dcgettext@plt>
   172e4:	mov	r6, r0
   172e8:	bl	11390 <strlen@plt>
   172ec:	add	r7, r0, #1
   172f0:	cmp	r5, #0
   172f4:	beq	17310 <__assert_fail@plt+0x5e60>
   172f8:	cmp	r7, r5
   172fc:	mov	r2, r7
   17300:	bhi	17318 <__assert_fail@plt+0x5e68>
   17304:	mov	r0, r4
   17308:	mov	r1, r6
   1730c:	bl	11258 <memcpy@plt>
   17310:	mov	r0, r7
   17314:	pop	{r4, r5, r6, r7, fp, pc}
   17318:	sub	r2, r5, #1
   1731c:	mov	r0, #0
   17320:	strb	r0, [r4, r2]
   17324:	b	17304 <__assert_fail@plt+0x5e54>
   17328:	bl	114a4 <abort@plt>
   1732c:	push	{r4, r5, fp, lr}
   17330:	add	fp, sp, #8
   17334:	ldr	r5, [r0]
   17338:	mov	r4, r0
   1733c:	cmp	r5, #0
   17340:	beq	1736c <__assert_fail@plt+0x5ebc>
   17344:	movw	r0, #0
   17348:	movw	r1, #0
   1734c:	movt	r0, #0
   17350:	movt	r1, #0
   17354:	orrs	r0, r1, r0
   17358:	beq	17364 <__assert_fail@plt+0x5eb4>
   1735c:	add	r0, r5, #136	; 0x88
   17360:	bl	11210 <pthread_mutex_destroy@plt>
   17364:	mov	r0, r5
   17368:	bl	17394 <__assert_fail@plt+0x5ee4>
   1736c:	mov	r5, #0
   17370:	str	r5, [r4]
   17374:	str	r5, [r4, #4]
   17378:	ldr	r0, [r4, #16]
   1737c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17380:	str	r5, [r4, #16]
   17384:	ldr	r0, [r4, #20]
   17388:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1738c:	str	r5, [r4, #20]
   17390:	pop	{r4, r5, fp, pc}
   17394:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17398:	add	fp, sp, #24
   1739c:	mov	r8, r0
   173a0:	ldr	r0, [r0]
   173a4:	cmp	r0, #0
   173a8:	beq	1742c <__assert_fail@plt+0x5f7c>
   173ac:	ldr	r1, [r8, #8]
   173b0:	cmp	r1, #0
   173b4:	beq	1742c <__assert_fail@plt+0x5f7c>
   173b8:	movw	r7, #255	; 0xff
   173bc:	mov	r6, #0
   173c0:	movt	r7, #4
   173c4:	add	r1, r0, r6, lsl #3
   173c8:	ldr	r1, [r1, #4]
   173cc:	and	r1, r1, r7
   173d0:	cmp	r1, #3
   173d4:	beq	17408 <__assert_fail@plt+0x5f58>
   173d8:	cmp	r1, #6
   173dc:	bne	17414 <__assert_fail@plt+0x5f64>
   173e0:	ldr	r5, [r0, r6, lsl #3]
   173e4:	ldr	r0, [r5]
   173e8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   173ec:	ldr	r0, [r5, #4]
   173f0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   173f4:	ldr	r0, [r5, #8]
   173f8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   173fc:	ldr	r0, [r5, #12]
   17400:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17404:	b	1740c <__assert_fail@plt+0x5f5c>
   17408:	ldr	r5, [r0, r6, lsl #3]
   1740c:	mov	r0, r5
   17410:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17414:	ldr	r0, [r8, #8]
   17418:	add	r6, r6, #1
   1741c:	cmp	r6, r0
   17420:	bcs	1742c <__assert_fail@plt+0x5f7c>
   17424:	ldr	r0, [r8]
   17428:	b	173c4 <__assert_fail@plt+0x5f14>
   1742c:	ldr	r0, [r8, #12]
   17430:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17434:	ldr	r0, [r8, #8]
   17438:	cmp	r0, #0
   1743c:	beq	174ac <__assert_fail@plt+0x5ffc>
   17440:	mov	r5, #0
   17444:	mov	r6, #8
   17448:	ldr	r0, [r8, #24]
   1744c:	cmp	r0, #0
   17450:	bne	17478 <__assert_fail@plt+0x5fc8>
   17454:	b	17480 <__assert_fail@plt+0x5fd0>
   17458:	ldr	r0, [r8, #8]
   1745c:	add	r5, r5, #1
   17460:	add	r6, r6, #12
   17464:	cmp	r5, r0
   17468:	bcs	174ac <__assert_fail@plt+0x5ffc>
   1746c:	ldr	r0, [r8, #24]
   17470:	cmp	r0, #0
   17474:	beq	17480 <__assert_fail@plt+0x5fd0>
   17478:	ldr	r0, [r0, r6]
   1747c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17480:	ldr	r0, [r8, #28]
   17484:	cmp	r0, #0
   17488:	beq	17494 <__assert_fail@plt+0x5fe4>
   1748c:	ldr	r0, [r0, r6]
   17490:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17494:	ldr	r0, [r8, #20]
   17498:	cmp	r0, #0
   1749c:	beq	17458 <__assert_fail@plt+0x5fa8>
   174a0:	ldr	r0, [r0, r6]
   174a4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   174a8:	b	17458 <__assert_fail@plt+0x5fa8>
   174ac:	ldr	r0, [r8, #20]
   174b0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   174b4:	ldr	r0, [r8, #24]
   174b8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   174bc:	ldr	r0, [r8, #28]
   174c0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   174c4:	ldr	r0, [r8]
   174c8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   174cc:	ldr	r5, [r8, #32]
   174d0:	cmp	r5, #0
   174d4:	beq	17534 <__assert_fail@plt+0x6084>
   174d8:	mov	r6, #0
   174dc:	add	r0, r6, r6, lsl #1
   174e0:	ldr	r0, [r5, r0, lsl #2]!
   174e4:	add	r7, r5, #8
   174e8:	cmp	r0, #1
   174ec:	blt	17510 <__assert_fail@plt+0x6060>
   174f0:	mov	r4, #0
   174f4:	ldr	r0, [r7]
   174f8:	ldr	r0, [r0, r4, lsl #2]
   174fc:	bl	1a760 <__assert_fail@plt+0x92b0>
   17500:	ldr	r0, [r5]
   17504:	add	r4, r4, #1
   17508:	cmp	r4, r0
   1750c:	blt	174f4 <__assert_fail@plt+0x6044>
   17510:	ldr	r0, [r7]
   17514:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17518:	ldr	r0, [r8, #68]	; 0x44
   1751c:	cmp	r6, r0
   17520:	bcs	17530 <__assert_fail@plt+0x6080>
   17524:	ldr	r5, [r8, #32]
   17528:	add	r6, r6, #1
   1752c:	b	174dc <__assert_fail@plt+0x602c>
   17530:	ldr	r5, [r8, #32]
   17534:	mov	r0, r5
   17538:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1753c:	ldr	r0, [r8, #60]	; 0x3c
   17540:	movw	r1, #53220	; 0xcfe4
   17544:	movt	r1, #2
   17548:	cmp	r0, r1
   1754c:	beq	17554 <__assert_fail@plt+0x60a4>
   17550:	bl	2bc28 <__assert_fail@plt+0x1a778>
   17554:	ldr	r0, [r8, #132]	; 0x84
   17558:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1755c:	mov	r0, r8
   17560:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17564:	b	2bc28 <__assert_fail@plt+0x1a778>
   17568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1756c:	add	fp, sp, #28
   17570:	sub	sp, sp, #28
   17574:	ldr	sl, [fp, #8]
   17578:	mov	r7, #2
   1757c:	cmp	sl, #7
   17580:	bhi	17654 <__assert_fail@plt+0x61a4>
   17584:	mov	r5, r0
   17588:	ldr	r0, [r0]
   1758c:	mov	r6, r3
   17590:	mov	r9, r2
   17594:	mov	r4, r1
   17598:	tst	sl, #4
   1759c:	str	r0, [sp, #24]
   175a0:	bne	175b8 <__assert_fail@plt+0x6108>
   175a4:	mov	r0, r4
   175a8:	bl	11390 <strlen@plt>
   175ac:	mov	r7, r0
   175b0:	mov	r8, #0
   175b4:	b	175c0 <__assert_fail@plt+0x6110>
   175b8:	ldr	r8, [r6]
   175bc:	ldr	r7, [r6, #4]
   175c0:	movw	r0, #0
   175c4:	movw	r1, #0
   175c8:	movt	r0, #0
   175cc:	movt	r1, #0
   175d0:	orrs	r0, r1, r0
   175d4:	str	r0, [sp, #20]
   175d8:	beq	175e8 <__assert_fail@plt+0x6138>
   175dc:	ldr	r0, [sp, #24]
   175e0:	add	r0, r0, #136	; 0x88
   175e4:	bl	11240 <pthread_mutex_lock@plt>
   175e8:	ldrb	r0, [r5, #28]
   175ec:	tst	r0, #16
   175f0:	bne	17604 <__assert_fail@plt+0x6154>
   175f4:	str	r7, [sp]
   175f8:	stmib	sp, {r7, r9}
   175fc:	str	r6, [sp, #12]
   17600:	b	17618 <__assert_fail@plt+0x6168>
   17604:	mov	r0, #0
   17608:	str	r7, [sp]
   1760c:	str	r7, [sp, #4]
   17610:	str	r0, [sp, #8]
   17614:	str	r0, [sp, #12]
   17618:	mov	r0, r5
   1761c:	mov	r1, r4
   17620:	mov	r2, r7
   17624:	mov	r3, r8
   17628:	str	sl, [sp, #16]
   1762c:	bl	17660 <__assert_fail@plt+0x61b0>
   17630:	mov	r7, r0
   17634:	ldr	r0, [sp, #20]
   17638:	cmp	r0, #0
   1763c:	beq	1764c <__assert_fail@plt+0x619c>
   17640:	ldr	r0, [sp, #24]
   17644:	add	r0, r0, #136	; 0x88
   17648:	bl	111a4 <pthread_mutex_unlock@plt>
   1764c:	cmp	r7, #0
   17650:	movwne	r7, #1
   17654:	mov	r0, r7
   17658:	sub	sp, fp, #28
   1765c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17664:	add	fp, sp, #28
   17668:	sub	sp, sp, #412	; 0x19c
   1766c:	ldr	r7, [r0]
   17670:	str	r2, [sp, #76]	; 0x4c
   17674:	str	r1, [sp, #100]	; 0x64
   17678:	mov	r4, r0
   1767c:	add	r0, sp, #104	; 0x68
   17680:	mov	r1, #0
   17684:	mov	r2, #136	; 0x88
   17688:	mov	r6, r3
   1768c:	mov	r9, #0
   17690:	bl	113cc <memset@plt>
   17694:	str	r7, [sp, #188]	; 0xbc
   17698:	ldr	r0, [fp, #16]
   1769c:	ldr	sl, [fp, #8]
   176a0:	mov	r5, #0
   176a4:	ldr	r1, [r4, #16]
   176a8:	cmp	r1, #0
   176ac:	beq	176c8 <__assert_fail@plt+0x6218>
   176b0:	ldrb	r2, [r4, #28]
   176b4:	and	r2, r2, #9
   176b8:	cmp	r2, #8
   176bc:	movne	r1, #0
   176c0:	subs	r5, r6, sl
   176c4:	movne	r5, r1
   176c8:	ldr	r2, [r4, #24]
   176cc:	ldr	r1, [r4, #8]
   176d0:	mov	r8, #1
   176d4:	mvn	r3, r2
   176d8:	cmp	r2, r0
   176dc:	addcc	r9, r3, r0
   176e0:	cmp	r1, #0
   176e4:	beq	19cd8 <__assert_fail@plt+0x8828>
   176e8:	ldr	r1, [r7, #36]	; 0x24
   176ec:	cmp	r1, #0
   176f0:	ldrne	r2, [r7, #40]	; 0x28
   176f4:	cmpne	r2, #0
   176f8:	beq	19cd8 <__assert_fail@plt+0x8828>
   176fc:	ldr	r3, [r7, #44]	; 0x2c
   17700:	cmp	r3, #0
   17704:	strne	r7, [sp, #96]	; 0x60
   17708:	ldrne	r7, [r7, #48]	; 0x30
   1770c:	cmpne	r7, #0
   17710:	beq	19cd8 <__assert_fail@plt+0x8828>
   17714:	ldr	r1, [r1, #8]
   17718:	ldr	ip, [r4, #20]
   1771c:	cmp	r1, #0
   17720:	beq	1772c <__assert_fail@plt+0x627c>
   17724:	ldr	lr, [sp, #96]	; 0x60
   17728:	b	1773c <__assert_fail@plt+0x628c>
   1772c:	ldr	r1, [r2, #8]
   17730:	ldr	lr, [sp, #96]	; 0x60
   17734:	cmp	r1, #0
   17738:	beq	18df0 <__assert_fail@plt+0x7940>
   1773c:	str	sl, [sp, #80]	; 0x50
   17740:	subs	r0, r0, r9
   17744:	str	r9, [sp, #32]
   17748:	str	r0, [sp, #92]	; 0x5c
   1774c:	mov	r0, #1
   17750:	str	r0, [sp, #56]	; 0x38
   17754:	bne	17768 <__assert_fail@plt+0x62b8>
   17758:	ldr	r0, [lr, #76]	; 0x4c
   1775c:	cmp	r0, #0
   17760:	movwne	r0, #1
   17764:	str	r0, [sp, #56]	; 0x38
   17768:	ldr	r0, [r4, #12]
   1776c:	ldr	r2, [lr, #92]	; 0x5c
   17770:	ldr	r3, [sp, #100]	; 0x64
   17774:	ldr	r1, [lr, #8]
   17778:	str	ip, [sp, #168]	; 0xa8
   1777c:	mov	r7, r4
   17780:	str	r3, [sp, #104]	; 0x68
   17784:	str	r2, [sp, #184]	; 0xb8
   17788:	ubfx	r3, r0, #22, #1
   1778c:	ldr	r4, [sp, #76]	; 0x4c
   17790:	and	r0, r0, #4194304	; 0x400000
   17794:	add	r9, r1, #1
   17798:	orrs	sl, ip, r0
   1779c:	strb	r3, [sp, #176]	; 0xb0
   177a0:	mov	r3, lr
   177a4:	add	r3, sp, #104	; 0x68
   177a8:	movwne	sl, #1
   177ac:	add	r3, r3, #44	; 0x2c
   177b0:	cmp	r2, r9
   177b4:	strb	sl, [sp, #179]	; 0xb3
   177b8:	movgt	r9, r2
   177bc:	vdup.32	q8, r4
   177c0:	ldrb	r0, [lr, #88]	; 0x58
   177c4:	vst1.32	{d16-d17}, [r3]
   177c8:	ubfx	r3, r0, #3, #1
   177cc:	strb	r3, [sp, #178]	; 0xb2
   177d0:	ubfx	r0, r0, #2, #1
   177d4:	str	r7, [sp, #64]	; 0x40
   177d8:	str	r5, [sp, #88]	; 0x58
   177dc:	str	ip, [sp, #84]	; 0x54
   177e0:	strb	r0, [sp, #177]	; 0xb1
   177e4:	add	r0, r4, #1
   177e8:	cmp	r0, r9
   177ec:	movlt	r9, r0
   177f0:	cmp	r2, #2
   177f4:	blt	17828 <__assert_fail@plt+0x6378>
   177f8:	mov	r8, #12
   177fc:	cmn	r9, #-1073741823	; 0xc0000001
   17800:	bhi	19c84 <__assert_fail@plt+0x87d4>
   17804:	lsl	r1, r9, #2
   17808:	mov	r0, #0
   1780c:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   17810:	ldr	ip, [sp, #84]	; 0x54
   17814:	ldr	r5, [sp, #88]	; 0x58
   17818:	cmp	r0, #0
   1781c:	beq	19c84 <__assert_fail@plt+0x87d4>
   17820:	ldr	r7, [sp, #64]	; 0x40
   17824:	str	r0, [sp, #112]	; 0x70
   17828:	ldr	r4, [sp, #96]	; 0x60
   1782c:	mov	r8, #1
   17830:	cmp	sl, #0
   17834:	beq	1785c <__assert_fail@plt+0x63ac>
   17838:	mov	r0, #0
   1783c:	mov	r1, r9
   17840:	mov	r8, #0
   17844:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   17848:	cmp	r0, #0
   1784c:	beq	19cec <__assert_fail@plt+0x883c>
   17850:	ldr	r5, [sp, #88]	; 0x58
   17854:	ldr	ip, [sp, #84]	; 0x54
   17858:	str	r0, [sp, #108]	; 0x6c
   1785c:	add	r1, r4, #96	; 0x60
   17860:	str	r9, [sp, #140]	; 0x8c
   17864:	ldr	r0, [fp, #12]
   17868:	cmp	r8, #0
   1786c:	str	r1, [sp, #172]	; 0xac
   17870:	ldrb	r1, [r4, #88]	; 0x58
   17874:	ubfx	r1, r1, #4, #1
   17878:	strb	r1, [sp, #182]	; 0xb6
   1787c:	mov	r1, #0
   17880:	beq	1789c <__assert_fail@plt+0x63ec>
   17884:	ldr	r1, [sp, #100]	; 0x64
   17888:	str	r1, [sp, #108]	; 0x6c
   1788c:	ldr	r1, [r4, #92]	; 0x5c
   17890:	cmp	r1, #1
   17894:	ldr	r1, [sp, #76]	; 0x4c
   17898:	movwgt	r1, #0
   1789c:	str	r0, [sp, #160]	; 0xa0
   178a0:	str	r1, [sp, #136]	; 0x88
   178a4:	str	r1, [sp, #132]	; 0x84
   178a8:	str	r0, [sp, #156]	; 0x9c
   178ac:	ldrb	r0, [r7, #28]
   178b0:	lsr	r0, r0, #7
   178b4:	strb	r0, [sp, #181]	; 0xb5
   178b8:	mvn	r0, #0
   178bc:	ldr	sl, [r4, #76]	; 0x4c
   178c0:	str	r0, [sp, #196]	; 0xc4
   178c4:	ldr	r0, [fp, #24]
   178c8:	lsl	r4, sl, #1
   178cc:	cmp	sl, #1
   178d0:	str	r0, [sp, #192]	; 0xc0
   178d4:	blt	17924 <__assert_fail@plt+0x6474>
   178d8:	movw	r0, #43690	; 0xaaaa
   178dc:	mov	r8, #12
   178e0:	movt	r0, #2730	; 0xaaa
   178e4:	cmp	r4, r0
   178e8:	bhi	19c84 <__assert_fail@plt+0x87d4>
   178ec:	add	r0, sl, sl, lsl #1
   178f0:	lsl	r0, r0, #4
   178f4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   178f8:	mov	r5, r0
   178fc:	str	r0, [sp, #220]	; 0xdc
   17900:	lsl	r0, sl, #3
   17904:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   17908:	cmp	r0, #0
   1790c:	str	r0, [sp, #236]	; 0xec
   17910:	beq	19c84 <__assert_fail@plt+0x87d4>
   17914:	cmp	r5, #0
   17918:	ldr	r5, [sp, #88]	; 0x58
   1791c:	ldr	ip, [sp, #84]	; 0x54
   17920:	beq	19c84 <__assert_fail@plt+0x87d4>
   17924:	mov	r0, #1
   17928:	str	r4, [sp, #232]	; 0xe8
   1792c:	str	r0, [sp, #224]	; 0xe0
   17930:	ldr	r0, [sp, #92]	; 0x5c
   17934:	str	r4, [sp, #216]	; 0xd8
   17938:	cmp	r0, #1
   1793c:	bhi	17950 <__assert_fail@plt+0x64a0>
   17940:	ldr	r0, [sp, #96]	; 0x60
   17944:	ldrb	r0, [r0, #88]	; 0x58
   17948:	tst	r0, #2
   1794c:	beq	1797c <__assert_fail@plt+0x64cc>
   17950:	mov	r8, #12
   17954:	cmn	r9, #-1073741822	; 0xc0000002
   17958:	bhi	19c84 <__assert_fail@plt+0x87d4>
   1795c:	mov	r0, #4
   17960:	add	r0, r0, r9, lsl #2
   17964:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   17968:	ldr	ip, [sp, #84]	; 0x54
   1796c:	ldr	r5, [sp, #88]	; 0x58
   17970:	cmp	r0, #0
   17974:	str	r0, [sp, #204]	; 0xcc
   17978:	beq	19c84 <__assert_fail@plt+0x87d4>
   1797c:	ldr	r1, [fp, #24]
   17980:	ldr	r2, [sp, #80]	; 0x50
   17984:	str	r6, [fp, #-200]	; 0xffffff38
   17988:	mov	r0, #4
   1798c:	mov	r9, #1
   17990:	mov	sl, #1
   17994:	mov	r4, r6
   17998:	tst	r1, #1
   1799c:	mov	r1, #4
   179a0:	mov	r7, r2
   179a4:	movweq	r1, #6
   179a8:	cmp	r2, r6
   179ac:	str	r1, [sp, #164]	; 0xa4
   179b0:	ldr	r1, [sp, #96]	; 0x60
   179b4:	mvnlt	sl, #0
   179b8:	movlt	r7, r6
   179bc:	movlt	r4, r2
   179c0:	cmp	r5, #0
   179c4:	ldr	r1, [r1, #92]	; 0x5c
   179c8:	str	r1, [sp, #60]	; 0x3c
   179cc:	beq	17a10 <__assert_fail@plt+0x6560>
   179d0:	cmp	r1, #1
   179d4:	beq	179f4 <__assert_fail@plt+0x6544>
   179d8:	ldr	r0, [sp, #64]	; 0x40
   179dc:	ldr	r0, [r0, #12]
   179e0:	and	r0, r0, #4194304	; 0x400000
   179e4:	orr	r0, ip, r0
   179e8:	clz	r0, r0
   179ec:	lsr	r0, r0, #5
   179f0:	lsl	r0, r0, #2
   179f4:	cmp	ip, #0
   179f8:	mov	r1, ip
   179fc:	movwne	r1, #1
   17a00:	cmp	r2, r6
   17a04:	orrge	r1, r1, #2
   17a08:	orr	r0, r1, r0
   17a0c:	b	17a14 <__assert_fail@plt+0x6564>
   17a10:	mov	r0, #8
   17a14:	add	r1, sp, #104	; 0x68
   17a18:	cmp	r2, r6
   17a1c:	sub	r0, r0, #4
   17a20:	str	sl, [sp, #68]	; 0x44
   17a24:	str	r7, [sp, #52]	; 0x34
   17a28:	str	r4, [sp, #48]	; 0x30
   17a2c:	add	r1, r1, #32
   17a30:	str	r0, [sp, #80]	; 0x50
   17a34:	str	r1, [sp, #24]
   17a38:	sub	r1, fp, #200	; 0xc8
   17a3c:	movwlt	r1, #0
   17a40:	cmp	r1, #0
   17a44:	str	r1, [sp, #40]	; 0x28
   17a48:	movwne	r1, #1
   17a4c:	str	r1, [sp, #44]	; 0x2c
   17a50:	sub	r1, fp, #192	; 0xc0
   17a54:	add	r1, r1, #16
   17a58:	str	r1, [sp, #36]	; 0x24
   17a5c:	ldr	r1, [sp, #80]	; 0x50
   17a60:	cmp	r1, #4
   17a64:	bhi	17ad8 <__assert_fail@plt+0x6628>
   17a68:	add	r0, pc, #0
   17a6c:	ldr	pc, [r0, r1, lsl #2]
   17a70:	andeq	r7, r1, r4, lsl #21
   17a74:	andeq	r7, r1, r4, lsl #21
   17a78:	andeq	r7, r1, r4, ror fp
   17a7c:	andeq	r7, r1, r4, lsr #23
   17a80:	ldrdeq	r7, [r1], -ip
   17a84:	mov	r8, #1
   17a88:	cmp	r6, r4
   17a8c:	blt	19c84 <__assert_fail@plt+0x87d4>
   17a90:	cmp	ip, #0
   17a94:	beq	18720 <__assert_fail@plt+0x7270>
   17a98:	ldr	r1, [sp, #76]	; 0x4c
   17a9c:	mov	r0, #0
   17aa0:	cmp	r6, r1
   17aa4:	bge	17ab0 <__assert_fail@plt+0x6600>
   17aa8:	ldr	r0, [sp, #100]	; 0x64
   17aac:	ldrb	r0, [r0, r6]
   17ab0:	ldrb	r0, [ip, r0]
   17ab4:	ldrb	r0, [r5, r0]
   17ab8:	cmp	r0, #0
   17abc:	bne	17bdc <__assert_fail@plt+0x672c>
   17ac0:	sub	r0, r6, #1
   17ac4:	cmp	r6, r4
   17ac8:	mov	r6, r0
   17acc:	str	r0, [fp, #-200]	; 0xffffff38
   17ad0:	bgt	17a9c <__assert_fail@plt+0x65ec>
   17ad4:	b	19c84 <__assert_fail@plt+0x87d4>
   17ad8:	ldr	r0, [sp, #128]	; 0x80
   17adc:	ldr	r2, [sp, #136]	; 0x88
   17ae0:	sub	r1, r6, r0
   17ae4:	cmp	r1, r2
   17ae8:	bcs	17b30 <__assert_fail@plt+0x6680>
   17aec:	ldr	r3, [sp, #132]	; 0x84
   17af0:	mov	r2, #0
   17af4:	cmp	r1, r3
   17af8:	bcs	17b04 <__assert_fail@plt+0x6654>
   17afc:	ldr	r2, [sp, #108]	; 0x6c
   17b00:	ldrb	r2, [r2, r1]
   17b04:	ldrb	r1, [r5, r2]
   17b08:	cmp	r1, #0
   17b0c:	bne	17bdc <__assert_fail@plt+0x672c>
   17b10:	add	r6, r6, sl
   17b14:	mov	r8, #1
   17b18:	cmp	r6, r4
   17b1c:	str	r6, [fp, #-200]	; 0xffffff38
   17b20:	blt	19c84 <__assert_fail@plt+0x87d4>
   17b24:	cmp	r6, r7
   17b28:	ble	17adc <__assert_fail@plt+0x662c>
   17b2c:	b	19c84 <__assert_fail@plt+0x87d4>
   17b30:	ldr	r2, [fp, #24]
   17b34:	add	r0, sp, #104	; 0x68
   17b38:	mov	r1, r6
   17b3c:	bl	218ac <__assert_fail@plt+0x103fc>
   17b40:	cmp	r0, #0
   17b44:	bne	19d84 <__assert_fail@plt+0x88d4>
   17b48:	ldr	r0, [sp, #128]	; 0x80
   17b4c:	ldr	r6, [fp, #-200]	; 0xffffff38
   17b50:	ldr	r5, [sp, #88]	; 0x58
   17b54:	ldr	r7, [sp, #52]	; 0x34
   17b58:	ldr	r4, [sp, #48]	; 0x30
   17b5c:	sub	r1, r6, r0
   17b60:	ldr	r3, [sp, #132]	; 0x84
   17b64:	mov	r2, #0
   17b68:	cmp	r1, r3
   17b6c:	bcc	17afc <__assert_fail@plt+0x664c>
   17b70:	b	17b04 <__assert_fail@plt+0x6654>
   17b74:	ldr	r1, [sp, #100]	; 0x64
   17b78:	cmp	r6, r7
   17b7c:	bge	17bd4 <__assert_fail@plt+0x6724>
   17b80:	ldrb	r0, [r1, r6]
   17b84:	ldrb	r0, [r5, r0]
   17b88:	cmp	r0, #0
   17b8c:	bne	17bd4 <__assert_fail@plt+0x6724>
   17b90:	add	r6, r6, #1
   17b94:	cmp	r6, r7
   17b98:	str	r6, [fp, #-200]	; 0xffffff38
   17b9c:	blt	17b80 <__assert_fail@plt+0x66d0>
   17ba0:	b	17bd4 <__assert_fail@plt+0x6724>
   17ba4:	cmp	r6, r7
   17ba8:	bge	17bd4 <__assert_fail@plt+0x6724>
   17bac:	ldr	r1, [sp, #100]	; 0x64
   17bb0:	ldrb	r0, [r1, r6]
   17bb4:	ldrb	r0, [ip, r0]
   17bb8:	ldrb	r0, [r5, r0]
   17bbc:	cmp	r0, #0
   17bc0:	bne	17bd4 <__assert_fail@plt+0x6724>
   17bc4:	add	r6, r6, #1
   17bc8:	cmp	r6, r7
   17bcc:	str	r6, [fp, #-200]	; 0xffffff38
   17bd0:	blt	17bb0 <__assert_fail@plt+0x6700>
   17bd4:	cmp	r6, r7
   17bd8:	beq	18af4 <__assert_fail@plt+0x7644>
   17bdc:	ldr	r2, [fp, #24]
   17be0:	add	r0, sp, #104	; 0x68
   17be4:	mov	r1, r6
   17be8:	bl	218ac <__assert_fail@plt+0x103fc>
   17bec:	cmp	r0, #0
   17bf0:	bne	19d84 <__assert_fail@plt+0x88d4>
   17bf4:	ldr	r0, [sp, #60]	; 0x3c
   17bf8:	cmp	r0, #1
   17bfc:	ldrne	r0, [sp, #132]	; 0x84
   17c00:	cmpne	r0, #0
   17c04:	bne	1868c <__assert_fail@plt+0x71dc>
   17c08:	mov	r0, #0
   17c0c:	str	r0, [sp, #212]	; 0xd4
   17c10:	str	r0, [sp, #224]	; 0xe0
   17c14:	str	r0, [sp, #208]	; 0xd0
   17c18:	str	r0, [fp, #-196]	; 0xffffff3c
   17c1c:	ldr	r4, [sp, #188]	; 0xbc
   17c20:	ldr	ip, [sp, #144]	; 0x90
   17c24:	ldr	r6, [r4, #36]	; 0x24
   17c28:	ldrsb	r0, [r6, #52]	; 0x34
   17c2c:	cmn	r0, #1
   17c30:	ble	186a0 <__assert_fail@plt+0x71f0>
   17c34:	ldr	r7, [sp, #44]	; 0x2c
   17c38:	cmp	r6, #0
   17c3c:	beq	19cec <__assert_fail@plt+0x883c>
   17c40:	ldr	r0, [sp, #204]	; 0xcc
   17c44:	mov	r8, r7
   17c48:	cmp	r0, #0
   17c4c:	beq	17c64 <__assert_fail@plt+0x67b4>
   17c50:	str	r6, [r0, ip, lsl #2]
   17c54:	mov	r8, r7
   17c58:	ldr	r0, [r4, #76]	; 0x4c
   17c5c:	cmp	r0, #0
   17c60:	bne	189d4 <__assert_fail@plt+0x7524>
   17c64:	ldrb	r0, [r6, #52]	; 0x34
   17c68:	tst	r0, #16
   17c6c:	bne	189ac <__assert_fail@plt+0x74fc>
   17c70:	mov	r0, #0
   17c74:	mvn	r4, #0
   17c78:	str	r0, [sp, #72]	; 0x48
   17c7c:	ldr	r0, [sp, #144]	; 0x90
   17c80:	ldr	r1, [sp, #160]	; 0xa0
   17c84:	cmp	r1, r0
   17c88:	ble	18458 <__assert_fail@plt+0x6fa8>
   17c8c:	ldr	sl, [sp, #40]	; 0x28
   17c90:	b	17ca4 <__assert_fail@plt+0x67f4>
   17c94:	ldr	r0, [sp, #144]	; 0x90
   17c98:	ldr	r1, [sp, #160]	; 0xa0
   17c9c:	cmp	r1, r0
   17ca0:	ble	1845c <__assert_fail@plt+0x6fac>
   17ca4:	ldr	r2, [sp, #140]	; 0x8c
   17ca8:	ldr	r1, [sp, #152]	; 0x98
   17cac:	add	r7, r0, #1
   17cb0:	mov	r5, r6
   17cb4:	cmp	r7, r2
   17cb8:	blt	17cc4 <__assert_fail@plt+0x6814>
   17cbc:	cmp	r2, r1
   17cc0:	blt	182ec <__assert_fail@plt+0x6e3c>
   17cc4:	ldr	r2, [sp, #132]	; 0x84
   17cc8:	cmp	r7, r2
   17ccc:	blt	17cd8 <__assert_fail@plt+0x6828>
   17cd0:	cmp	r2, r1
   17cd4:	blt	182ec <__assert_fail@plt+0x6e3c>
   17cd8:	ldrb	r0, [r5, #52]	; 0x34
   17cdc:	tst	r0, #32
   17ce0:	bne	17e9c <__assert_fail@plt+0x69ec>
   17ce4:	ldr	r1, [sp, #144]	; 0x90
   17ce8:	ldr	r0, [sp, #108]	; 0x6c
   17cec:	add	r2, r1, #1
   17cf0:	str	r2, [sp, #144]	; 0x90
   17cf4:	ldrb	r6, [r0, r1]
   17cf8:	ldr	r0, [r5, #44]	; 0x2c
   17cfc:	cmp	r0, #0
   17d00:	bne	17d40 <__assert_fail@plt+0x6890>
   17d04:	ldr	r2, [r5, #48]	; 0x30
   17d08:	cmp	r2, #0
   17d0c:	bne	18310 <__assert_fail@plt+0x6e60>
   17d10:	ldr	r0, [sp, #188]	; 0xbc
   17d14:	mov	r1, r5
   17d18:	mov	r9, r8
   17d1c:	mov	r8, ip
   17d20:	bl	255c0 <__assert_fail@plt+0x14110>
   17d24:	mov	ip, r8
   17d28:	mov	r8, r9
   17d2c:	mov	r9, #1
   17d30:	cmp	r0, #0
   17d34:	bne	17cf8 <__assert_fail@plt+0x6848>
   17d38:	mov	r0, #12
   17d3c:	b	183d8 <__assert_fail@plt+0x6f28>
   17d40:	ldr	r6, [r0, r6, lsl #2]
   17d44:	ldr	r0, [sp, #204]	; 0xcc
   17d48:	cmp	r0, #0
   17d4c:	beq	17d6c <__assert_fail@plt+0x68bc>
   17d50:	mov	r2, r6
   17d54:	sub	r0, fp, #196	; 0xc4
   17d58:	add	r1, sp, #104	; 0x68
   17d5c:	mov	r6, ip
   17d60:	bl	23318 <__assert_fail@plt+0x11e68>
   17d64:	mov	ip, r6
   17d68:	mov	r6, r0
   17d6c:	cmp	r6, #0
   17d70:	beq	17de4 <__assert_fail@plt+0x6934>
   17d74:	sub	r0, r5, r6
   17d78:	clz	r0, r0
   17d7c:	lsr	r0, r0, #5
   17d80:	ands	r8, r8, r0
   17d84:	ldrb	r0, [r6, #52]	; 0x34
   17d88:	moveq	r7, ip
   17d8c:	mov	ip, r7
   17d90:	tst	r0, #16
   17d94:	beq	17c94 <__assert_fail@plt+0x67e4>
   17d98:	sxtb	r0, r0
   17d9c:	cmn	r0, #1
   17da0:	bgt	17dc4 <__assert_fail@plt+0x6914>
   17da4:	ldr	r2, [sp, #144]	; 0x90
   17da8:	add	r0, sp, #104	; 0x68
   17dac:	mov	r1, r6
   17db0:	mov	r5, ip
   17db4:	bl	2230c <__assert_fail@plt+0x10e5c>
   17db8:	mov	ip, r5
   17dbc:	cmp	r0, #0
   17dc0:	beq	17c94 <__assert_fail@plt+0x67e4>
   17dc4:	ldr	r0, [sp, #56]	; 0x38
   17dc8:	ldr	r4, [sp, #144]	; 0x90
   17dcc:	cmp	r0, #0
   17dd0:	beq	1846c <__assert_fail@plt+0x6fbc>
   17dd4:	mov	sl, #0
   17dd8:	mov	r0, #1
   17ddc:	str	r0, [sp, #72]	; 0x48
   17de0:	b	17c94 <__assert_fail@plt+0x67e4>
   17de4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   17de8:	cmp	r0, #0
   17dec:	bne	19cec <__assert_fail@plt+0x883c>
   17df0:	ldr	r0, [sp, #72]	; 0x48
   17df4:	ldr	r1, [sp, #56]	; 0x38
   17df8:	cmp	r0, #0
   17dfc:	mvn	r1, r1
   17e00:	movwne	r0, #1
   17e04:	tst	r1, r0
   17e08:	bne	1845c <__assert_fail@plt+0x6fac>
   17e0c:	ldr	r0, [sp, #204]	; 0xcc
   17e10:	cmp	r0, #0
   17e14:	beq	1845c <__assert_fail@plt+0x6fac>
   17e18:	ldr	r2, [sp, #144]	; 0x90
   17e1c:	ldr	r1, [sp, #208]	; 0xd0
   17e20:	add	r0, r0, #4
   17e24:	cmp	r2, r1
   17e28:	bge	1845c <__assert_fail@plt+0x6fac>
   17e2c:	add	r3, r2, #1
   17e30:	str	r3, [sp, #144]	; 0x90
   17e34:	ldr	r2, [r0, r2, lsl #2]
   17e38:	cmp	r2, #0
   17e3c:	mov	r2, r3
   17e40:	beq	17e24 <__assert_fail@plt+0x6974>
   17e44:	sub	r0, fp, #196	; 0xc4
   17e48:	add	r1, sp, #104	; 0x68
   17e4c:	mov	r2, #0
   17e50:	mov	r9, r8
   17e54:	mov	r8, ip
   17e58:	bl	23318 <__assert_fail@plt+0x11e68>
   17e5c:	cmp	r0, #0
   17e60:	mov	r6, r0
   17e64:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   17e68:	cmpeq	r0, #0
   17e6c:	bne	17e84 <__assert_fail@plt+0x69d4>
   17e70:	ldr	r0, [sp, #204]	; 0xcc
   17e74:	mov	ip, r8
   17e78:	mov	r8, r9
   17e7c:	mov	r9, #1
   17e80:	b	17e18 <__assert_fail@plt+0x6968>
   17e84:	mov	ip, r8
   17e88:	mov	r8, r9
   17e8c:	cmp	r6, #0
   17e90:	mov	r9, #1
   17e94:	bne	17d74 <__assert_fail@plt+0x68c4>
   17e98:	b	1845c <__assert_fail@plt+0x6fac>
   17e9c:	ldr	r0, [r5, #8]
   17ea0:	cmp	r0, #1
   17ea4:	blt	1835c <__assert_fail@plt+0x6eac>
   17ea8:	ldr	lr, [sp, #188]	; 0xbc
   17eac:	mov	r3, #0
   17eb0:	str	ip, [sp, #8]
   17eb4:	str	lr, [sp, #16]
   17eb8:	b	17ecc <__assert_fail@plt+0x6a1c>
   17ebc:	ldr	r0, [r5, #8]
   17ec0:	add	r3, r3, #1
   17ec4:	cmp	r3, r0
   17ec8:	bge	1835c <__assert_fail@plt+0x6eac>
   17ecc:	ldr	r0, [r5, #12]
   17ed0:	ldr	r2, [r0, r3, lsl #2]
   17ed4:	ldr	r0, [lr]
   17ed8:	add	r0, r0, r2, lsl #3
   17edc:	mov	r1, r2
   17ee0:	str	r2, [sp, #28]
   17ee4:	ldr	r1, [r0, #4]
   17ee8:	tst	r1, #1048576	; 0x100000
   17eec:	beq	17ebc <__assert_fail@plt+0x6a0c>
   17ef0:	movw	r0, #65280	; 0xff00
   17ef4:	str	r3, [sp, #20]
   17ef8:	movt	r0, #3
   17efc:	tst	r1, r0
   17f00:	beq	18014 <__assert_fail@plt+0x6b64>
   17f04:	ldr	r0, [sp, #144]	; 0x90
   17f08:	str	r1, [sp, #12]
   17f0c:	cmn	r0, #1
   17f10:	ble	17f4c <__assert_fail@plt+0x6a9c>
   17f14:	ldr	r1, [sp, #152]	; 0x98
   17f18:	cmp	r1, r0
   17f1c:	beq	18230 <__assert_fail@plt+0x6d80>
   17f20:	ldr	r1, [sp, #184]	; 0xb8
   17f24:	cmp	r1, #2
   17f28:	blt	17f54 <__assert_fail@plt+0x6aa4>
   17f2c:	ldr	r1, [sp, #112]	; 0x70
   17f30:	ldr	r3, [sp, #20]
   17f34:	ldr	r6, [r1, r0, lsl #2]
   17f38:	cmn	r6, #1
   17f3c:	bne	17f90 <__assert_fail@plt+0x6ae0>
   17f40:	sub	r0, r0, #1
   17f44:	cmn	r0, #1
   17f48:	bne	17f34 <__assert_fail@plt+0x6a84>
   17f4c:	ldr	r1, [sp, #164]	; 0xa4
   17f50:	b	17fb8 <__assert_fail@plt+0x6b08>
   17f54:	ldr	r1, [sp, #108]	; 0x6c
   17f58:	ldr	r2, [sp, #172]	; 0xac
   17f5c:	ldrb	r0, [r1, r0]
   17f60:	ubfx	r1, r0, #5, #3
   17f64:	and	r6, r0, #31
   17f68:	ldr	r3, [r2, r1, lsl #2]
   17f6c:	mov	r1, #1
   17f70:	mov	r2, #0
   17f74:	tst	r3, r1, lsl r6
   17f78:	ldr	r3, [sp, #20]
   17f7c:	bne	17fd4 <__assert_fail@plt+0x6b24>
   17f80:	mov	r1, #0
   17f84:	cmp	r0, #10
   17f88:	beq	17fa8 <__assert_fail@plt+0x6af8>
   17f8c:	b	17fb8 <__assert_fail@plt+0x6b08>
   17f90:	ldrb	r0, [sp, #182]	; 0xb6
   17f94:	cmp	r0, #0
   17f98:	bne	18260 <__assert_fail@plt+0x6db0>
   17f9c:	mov	r1, #0
   17fa0:	cmp	r6, #10
   17fa4:	bne	17fb8 <__assert_fail@plt+0x6b08>
   17fa8:	ldrb	r0, [sp, #181]	; 0xb5
   17fac:	cmp	r0, #0
   17fb0:	movwne	r0, #1
   17fb4:	lsl	r1, r0, #1
   17fb8:	ldr	r6, [sp, #12]
   17fbc:	and	r0, r1, #1
   17fc0:	eor	r2, r0, #1
   17fc4:	tst	r6, #1024	; 0x400
   17fc8:	beq	17fd4 <__assert_fail@plt+0x6b24>
   17fcc:	cmp	r0, #0
   17fd0:	beq	17ebc <__assert_fail@plt+0x6a0c>
   17fd4:	ldr	r0, [lr]
   17fd8:	ldr	r6, [sp, #28]
   17fdc:	cmp	r2, #0
   17fe0:	add	r0, r0, r6, lsl #3
   17fe4:	ldr	r0, [r0, #4]
   17fe8:	bne	17ff4 <__assert_fail@plt+0x6b44>
   17fec:	ands	r2, r0, #2048	; 0x800
   17ff0:	bne	17ebc <__assert_fail@plt+0x6a0c>
   17ff4:	tst	r1, #2
   17ff8:	bne	18004 <__assert_fail@plt+0x6b54>
   17ffc:	ands	r2, r0, #8192	; 0x2000
   18000:	bne	17ebc <__assert_fail@plt+0x6a0c>
   18004:	tst	r1, #8
   18008:	bne	18014 <__assert_fail@plt+0x6b64>
   1800c:	ands	r0, r0, #32768	; 0x8000
   18010:	bne	17ebc <__assert_fail@plt+0x6a0c>
   18014:	ldr	r3, [sp, #144]	; 0x90
   18018:	ldr	r1, [sp, #28]
   1801c:	mov	r0, lr
   18020:	add	r2, sp, #104	; 0x68
   18024:	bl	25004 <__assert_fail@plt+0x13b54>
   18028:	ldr	r3, [sp, #20]
   1802c:	ldr	lr, [sp, #16]
   18030:	ldr	ip, [sp, #8]
   18034:	cmp	r0, #0
   18038:	beq	17ebc <__assert_fail@plt+0x6a0c>
   1803c:	ldr	r1, [sp, #224]	; 0xe0
   18040:	cmp	r1, r0
   18044:	movlt	r1, r0
   18048:	str	r1, [sp, #224]	; 0xe0
   1804c:	ldr	r3, [sp, #144]	; 0x90
   18050:	ldr	r2, [sp, #140]	; 0x8c
   18054:	ldr	r1, [sp, #152]	; 0x98
   18058:	ldr	r6, [sp, #208]	; 0xd0
   1805c:	add	r3, r3, r0
   18060:	cmp	r2, r3
   18064:	str	r3, [sp, #12]
   18068:	cmple	r2, r1
   1806c:	blt	18080 <__assert_fail@plt+0x6bd0>
   18070:	ldr	r0, [sp, #132]	; 0x84
   18074:	cmp	r0, r3
   18078:	cmple	r0, r1
   1807c:	bge	1809c <__assert_fail@plt+0x6bec>
   18080:	add	r1, r3, #1
   18084:	add	r0, sp, #104	; 0x68
   18088:	bl	23114 <__assert_fail@plt+0x11c64>
   1808c:	ldr	r3, [sp, #12]
   18090:	ldr	lr, [sp, #16]
   18094:	cmp	r0, #0
   18098:	bne	183d0 <__assert_fail@plt+0x6f20>
   1809c:	cmp	r3, r6
   180a0:	ble	180cc <__assert_fail@plt+0x6c1c>
   180a4:	sub	r0, r3, r6
   180a8:	mov	r1, #0
   180ac:	lsl	r2, r0, #2
   180b0:	ldr	r0, [sp, #204]	; 0xcc
   180b4:	add	r0, r0, r6, lsl #2
   180b8:	add	r0, r0, #4
   180bc:	bl	113cc <memset@plt>
   180c0:	ldr	r3, [sp, #12]
   180c4:	ldr	lr, [sp, #16]
   180c8:	str	r3, [sp, #208]	; 0xd0
   180cc:	mov	r0, #0
   180d0:	ldr	r2, [sp, #28]
   180d4:	str	r0, [fp, #-48]	; 0xffffffd0
   180d8:	ldr	r0, [sp, #204]	; 0xcc
   180dc:	ldr	r1, [lr, #24]
   180e0:	ldr	r6, [r0, r3, lsl #2]
   180e4:	ldr	r0, [lr, #12]
   180e8:	ldr	r0, [r0, r2, lsl #2]
   180ec:	cmp	r6, #0
   180f0:	add	r0, r0, r0, lsl #1
   180f4:	add	r2, r1, r0, lsl #2
   180f8:	beq	1811c <__assert_fail@plt+0x6c6c>
   180fc:	ldr	r1, [r6, #40]	; 0x28
   18100:	sub	r0, fp, #192	; 0xc0
   18104:	bl	23558 <__assert_fail@plt+0x120a8>
   18108:	ldr	r3, [sp, #12]
   1810c:	cmp	r0, #0
   18110:	str	r0, [fp, #-48]	; 0xffffffd0
   18114:	beq	1812c <__assert_fail@plt+0x6c7c>
   18118:	b	183f0 <__assert_fail@plt+0x6f40>
   1811c:	vldr	d16, [r2]
   18120:	ldr	r0, [r2, #8]
   18124:	str	r0, [fp, #-184]	; 0xffffff48
   18128:	vstr	d16, [fp, #-192]	; 0xffffff40
   1812c:	cmp	r3, #0
   18130:	str	r6, [sp, #4]
   18134:	ble	18244 <__assert_fail@plt+0x6d94>
   18138:	ldr	r1, [sp, #152]	; 0x98
   1813c:	sub	r0, r3, #1
   18140:	cmp	r1, r0
   18144:	ldr	r1, [sp, #16]
   18148:	beq	18250 <__assert_fail@plt+0x6da0>
   1814c:	ldr	r2, [sp, #184]	; 0xb8
   18150:	cmp	r2, #2
   18154:	blt	1817c <__assert_fail@plt+0x6ccc>
   18158:	ldr	r2, [sp, #112]	; 0x70
   1815c:	ldr	r6, [r2, r0, lsl #2]
   18160:	cmn	r6, #1
   18164:	bne	181ac <__assert_fail@plt+0x6cfc>
   18168:	sub	r0, r0, #1
   1816c:	cmn	r0, #1
   18170:	bne	1815c <__assert_fail@plt+0x6cac>
   18174:	ldr	r3, [sp, #164]	; 0xa4
   18178:	b	181d4 <__assert_fail@plt+0x6d24>
   1817c:	ldr	r3, [sp, #108]	; 0x6c
   18180:	ldr	r2, [sp, #172]	; 0xac
   18184:	ldrb	r0, [r3, r0]
   18188:	ubfx	r3, r0, #5, #3
   1818c:	ldr	r6, [r2, r3, lsl #2]
   18190:	and	r2, r0, #31
   18194:	mov	r3, #1
   18198:	tst	r6, r3, lsl r2
   1819c:	moveq	r3, #0
   181a0:	cmpeq	r0, #10
   181a4:	bne	181d4 <__assert_fail@plt+0x6d24>
   181a8:	b	181c4 <__assert_fail@plt+0x6d14>
   181ac:	ldrb	r0, [sp, #182]	; 0xb6
   181b0:	cmp	r0, #0
   181b4:	bne	182a0 <__assert_fail@plt+0x6df0>
   181b8:	mov	r3, #0
   181bc:	cmp	r6, #10
   181c0:	bne	181d4 <__assert_fail@plt+0x6d24>
   181c4:	ldrb	r0, [sp, #181]	; 0xb5
   181c8:	cmp	r0, #0
   181cc:	movwne	r0, #1
   181d0:	lsl	r3, r0, #1
   181d4:	sub	r0, fp, #48	; 0x30
   181d8:	sub	r2, fp, #192	; 0xc0
   181dc:	bl	20d08 <__assert_fail@plt+0xf858>
   181e0:	ldr	r1, [sp, #204]	; 0xcc
   181e4:	ldr	r2, [sp, #12]
   181e8:	str	r0, [r1, r2, lsl #2]
   181ec:	ldr	r0, [sp, #4]
   181f0:	cmp	r0, #0
   181f4:	beq	18204 <__assert_fail@plt+0x6d54>
   181f8:	ldr	r0, [fp, #-184]	; 0xffffff48
   181fc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18200:	ldr	r2, [sp, #12]
   18204:	ldr	r0, [sp, #204]	; 0xcc
   18208:	ldr	ip, [sp, #8]
   1820c:	ldr	lr, [sp, #16]
   18210:	ldr	r3, [sp, #20]
   18214:	ldr	r0, [r0, r2, lsl #2]
   18218:	cmp	r0, #0
   1821c:	bne	17ebc <__assert_fail@plt+0x6a0c>
   18220:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18224:	cmp	r0, #0
   18228:	beq	17ebc <__assert_fail@plt+0x6a0c>
   1822c:	b	183d8 <__assert_fail@plt+0x6f28>
   18230:	ldr	r0, [sp, #192]	; 0xc0
   18234:	ldr	r3, [sp, #20]
   18238:	and	r0, r0, #2
   1823c:	eor	r1, r0, #10
   18240:	b	17fb8 <__assert_fail@plt+0x6b08>
   18244:	ldr	r3, [sp, #164]	; 0xa4
   18248:	ldr	r1, [sp, #16]
   1824c:	b	181d4 <__assert_fail@plt+0x6d24>
   18250:	ldr	r0, [sp, #192]	; 0xc0
   18254:	and	r0, r0, #2
   18258:	eor	r3, r0, #10
   1825c:	b	181d4 <__assert_fail@plt+0x6d24>
   18260:	mov	r0, r6
   18264:	str	r8, [sp, #4]
   18268:	mov	r8, ip
   1826c:	bl	113b4 <iswalnum@plt>
   18270:	mov	r1, #1
   18274:	mov	r2, #0
   18278:	cmp	r6, #95	; 0x5f
   1827c:	beq	182c8 <__assert_fail@plt+0x6e18>
   18280:	mov	ip, r8
   18284:	ldr	r8, [sp, #4]
   18288:	ldr	lr, [sp, #16]
   1828c:	ldr	r3, [sp, #20]
   18290:	cmp	r0, #0
   18294:	mov	r9, #1
   18298:	beq	17f9c <__assert_fail@plt+0x6aec>
   1829c:	b	17fd4 <__assert_fail@plt+0x6b24>
   182a0:	mov	r0, r6
   182a4:	bl	113b4 <iswalnum@plt>
   182a8:	mov	r3, #1
   182ac:	cmp	r6, #95	; 0x5f
   182b0:	beq	182e0 <__assert_fail@plt+0x6e30>
   182b4:	ldr	r1, [sp, #16]
   182b8:	cmp	r0, #0
   182bc:	mov	r9, #1
   182c0:	beq	181b8 <__assert_fail@plt+0x6d08>
   182c4:	b	181d4 <__assert_fail@plt+0x6d24>
   182c8:	mov	ip, r8
   182cc:	ldr	r8, [sp, #4]
   182d0:	ldr	lr, [sp, #16]
   182d4:	ldr	r3, [sp, #20]
   182d8:	mov	r9, #1
   182dc:	b	17fd4 <__assert_fail@plt+0x6b24>
   182e0:	ldr	r1, [sp, #16]
   182e4:	mov	r9, #1
   182e8:	b	181d4 <__assert_fail@plt+0x6d24>
   182ec:	add	r1, r0, #2
   182f0:	add	r0, sp, #104	; 0x68
   182f4:	mov	r6, ip
   182f8:	bl	23114 <__assert_fail@plt+0x11c64>
   182fc:	mov	ip, r6
   18300:	cmp	r0, #0
   18304:	str	r0, [fp, #-196]	; 0xffffff3c
   18308:	beq	17cd8 <__assert_fail@plt+0x6828>
   1830c:	b	19cec <__assert_fail@plt+0x883c>
   18310:	ldr	r0, [sp, #144]	; 0x90
   18314:	cmp	r0, #0
   18318:	ble	18354 <__assert_fail@plt+0x6ea4>
   1831c:	ldr	r1, [sp, #152]	; 0x98
   18320:	sub	r3, r0, #1
   18324:	cmp	r1, r3
   18328:	beq	183f8 <__assert_fail@plt+0x6f48>
   1832c:	ldr	r1, [sp, #184]	; 0xb8
   18330:	cmp	r1, #2
   18334:	blt	18368 <__assert_fail@plt+0x6eb8>
   18338:	ldr	r1, [sp, #112]	; 0x70
   1833c:	ldr	r0, [r1, r3, lsl #2]
   18340:	cmn	r0, #1
   18344:	bne	18390 <__assert_fail@plt+0x6ee0>
   18348:	sub	r3, r3, #1
   1834c:	cmn	r3, #1
   18350:	bne	1833c <__assert_fail@plt+0x6e8c>
   18354:	ldr	r1, [sp, #164]	; 0xa4
   18358:	b	183b8 <__assert_fail@plt+0x6f08>
   1835c:	mov	r0, #0
   18360:	str	r0, [fp, #-196]	; 0xffffff3c
   18364:	b	17ce4 <__assert_fail@plt+0x6834>
   18368:	ldr	r1, [sp, #108]	; 0x6c
   1836c:	ldr	lr, [sp, #172]	; 0xac
   18370:	ldrb	r0, [r1, r3]
   18374:	ubfx	r1, r0, #5, #3
   18378:	and	r3, r0, #31
   1837c:	ldr	lr, [lr, r1, lsl #2]
   18380:	mov	r1, #1
   18384:	tst	lr, r1, lsl r3
   18388:	bne	183b8 <__assert_fail@plt+0x6f08>
   1838c:	b	1839c <__assert_fail@plt+0x6eec>
   18390:	ldrb	r1, [sp, #182]	; 0xb6
   18394:	cmp	r1, #0
   18398:	bne	18400 <__assert_fail@plt+0x6f50>
   1839c:	mov	r1, #0
   183a0:	cmp	r0, #10
   183a4:	bne	183b8 <__assert_fail@plt+0x6f08>
   183a8:	ldrb	r0, [sp, #181]	; 0xb5
   183ac:	cmp	r0, #0
   183b0:	movwne	r0, #1
   183b4:	lsl	r1, r0, #1
   183b8:	bfi	r6, r1, #8, #1
   183bc:	ldr	r6, [r2, r6, lsl #2]
   183c0:	ldr	r0, [sp, #204]	; 0xcc
   183c4:	cmp	r0, #0
   183c8:	bne	17d50 <__assert_fail@plt+0x68a0>
   183cc:	b	17d6c <__assert_fail@plt+0x68bc>
   183d0:	ldr	ip, [sp, #8]
   183d4:	str	r0, [fp, #-48]	; 0xffffffd0
   183d8:	mov	r6, #0
   183dc:	str	r0, [fp, #-196]	; 0xffffff3c
   183e0:	ldr	r0, [sp, #204]	; 0xcc
   183e4:	cmp	r0, #0
   183e8:	bne	17d50 <__assert_fail@plt+0x68a0>
   183ec:	b	17d6c <__assert_fail@plt+0x68bc>
   183f0:	ldr	ip, [sp, #8]
   183f4:	b	183d8 <__assert_fail@plt+0x6f28>
   183f8:	mov	r1, #10
   183fc:	b	183b8 <__assert_fail@plt+0x6f08>
   18400:	str	r8, [sp, #4]
   18404:	str	r2, [sp, #28]
   18408:	mov	r8, ip
   1840c:	mov	r9, r0
   18410:	bl	113b4 <iswalnum@plt>
   18414:	mov	r1, #1
   18418:	cmp	r9, #95	; 0x5f
   1841c:	beq	18444 <__assert_fail@plt+0x6f94>
   18420:	mov	ip, r8
   18424:	ldr	r8, [sp, #4]
   18428:	ldr	r2, [sp, #28]
   1842c:	mov	r3, r9
   18430:	cmp	r0, #0
   18434:	mov	r9, #1
   18438:	mov	r0, r3
   1843c:	beq	1839c <__assert_fail@plt+0x6eec>
   18440:	b	183b8 <__assert_fail@plt+0x6f08>
   18444:	mov	ip, r8
   18448:	ldr	r8, [sp, #4]
   1844c:	ldr	r2, [sp, #28]
   18450:	mov	r9, #1
   18454:	b	183b8 <__assert_fail@plt+0x6f08>
   18458:	ldr	sl, [sp, #40]	; 0x28
   1845c:	cmp	sl, #0
   18460:	ldrne	r0, [sl]
   18464:	addne	r0, r0, ip
   18468:	strne	r0, [sl]
   1846c:	ldr	sl, [sp, #68]	; 0x44
   18470:	cmn	r4, #1
   18474:	beq	188c0 <__assert_fail@plt+0x7410>
   18478:	cmn	r4, #2
   1847c:	beq	19cec <__assert_fail@plt+0x883c>
   18480:	ldr	sl, [sp, #64]	; 0x40
   18484:	str	r4, [sp, #196]	; 0xc4
   18488:	ldr	r1, [sp, #92]	; 0x5c
   1848c:	ldr	r9, [sp, #96]	; 0x60
   18490:	ldrb	r0, [sl, #28]
   18494:	cmp	r1, #2
   18498:	bcc	184a4 <__assert_fail@plt+0x6ff4>
   1849c:	ands	r1, r0, #16
   184a0:	beq	184b0 <__assert_fail@plt+0x7000>
   184a4:	ldr	r1, [r9, #76]	; 0x4c
   184a8:	cmp	r1, #0
   184ac:	beq	184cc <__assert_fail@plt+0x701c>
   184b0:	ldr	r0, [sp, #204]	; 0xcc
   184b4:	mov	r2, r4
   184b8:	ldr	r1, [r0, r4, lsl #2]
   184bc:	add	r0, sp, #104	; 0x68
   184c0:	bl	2230c <__assert_fail@plt+0x10e5c>
   184c4:	str	r0, [sp, #200]	; 0xc8
   184c8:	ldrb	r0, [sl, #28]
   184cc:	ldr	r1, [sp, #92]	; 0x5c
   184d0:	cmp	r1, #2
   184d4:	bcc	184ec <__assert_fail@plt+0x703c>
   184d8:	ands	r0, r0, #16
   184dc:	bne	184ec <__assert_fail@plt+0x703c>
   184e0:	ldrb	r0, [r9, #88]	; 0x58
   184e4:	tst	r0, #1
   184e8:	bne	184f8 <__assert_fail@plt+0x7048>
   184ec:	ldr	r0, [r9, #76]	; 0x4c
   184f0:	cmp	r0, #0
   184f4:	beq	18c4c <__assert_fail@plt+0x779c>
   184f8:	ldr	r9, [sp, #196]	; 0xc4
   184fc:	cmn	r9, #-1073741823	; 0xc0000001
   18500:	bcs	19cec <__assert_fail@plt+0x883c>
   18504:	ldr	r0, [sp, #188]	; 0xbc
   18508:	ldr	r5, [sp, #200]	; 0xc8
   1850c:	str	r0, [sp, #72]	; 0x48
   18510:	mov	r0, #4
   18514:	add	r4, r0, r9, lsl #2
   18518:	mov	r0, r4
   1851c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   18520:	mov	r6, r0
   18524:	cmp	r0, #0
   18528:	beq	19dac <__assert_fail@plt+0x88fc>
   1852c:	ldr	r0, [sp, #72]	; 0x48
   18530:	ldr	r0, [r0, #76]	; 0x4c
   18534:	cmp	r0, #0
   18538:	beq	1875c <__assert_fail@plt+0x72ac>
   1853c:	mov	r0, r4
   18540:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   18544:	cmp	r0, #0
   18548:	beq	19dac <__assert_fail@plt+0x88fc>
   1854c:	add	r7, r9, #1
   18550:	mov	r1, #0
   18554:	mov	r4, r0
   18558:	lsl	r2, r7, #2
   1855c:	bl	113cc <memset@plt>
   18560:	ldr	r0, [sp, #36]	; 0x24
   18564:	mov	r1, #0
   18568:	str	r9, [fp, #-180]	; 0xffffff4c
   1856c:	str	r5, [fp, #-184]	; 0xffffff48
   18570:	str	r4, [fp, #-188]	; 0xffffff44
   18574:	str	r6, [fp, #-192]	; 0xffffff40
   18578:	str	r4, [sp, #28]
   1857c:	str	r1, [r0]
   18580:	str	r1, [r0, #4]
   18584:	str	r1, [r0, #8]
   18588:	add	r0, sp, #104	; 0x68
   1858c:	sub	r1, fp, #192	; 0xc0
   18590:	bl	272e0 <__assert_fail@plt+0x15e30>
   18594:	mov	r8, r0
   18598:	mov	r0, #0
   1859c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   185a0:	cmp	r8, #0
   185a4:	bne	18bac <__assert_fail@plt+0x76fc>
   185a8:	ldr	r0, [r6]
   185ac:	sub	r4, fp, #48	; 0x30
   185b0:	cmp	r0, #0
   185b4:	beq	187b4 <__assert_fail@plt+0x7304>
   185b8:	ldr	sl, [sp, #64]	; 0x40
   185bc:	mov	r1, #0
   185c0:	cmp	r9, #0
   185c4:	mov	r8, #0
   185c8:	str	r5, [sp, #16]
   185cc:	str	r6, [sp, #20]
   185d0:	str	r1, [sp, #12]
   185d4:	bmi	18670 <__assert_fail@plt+0x71c0>
   185d8:	ldr	r1, [sp, #20]
   185dc:	sub	r6, r7, #1
   185e0:	ldr	r7, [sp, #28]
   185e4:	add	r5, r1, #4
   185e8:	ldr	r2, [r7]
   185ec:	cmp	r0, #0
   185f0:	bne	18610 <__assert_fail@plt+0x7160>
   185f4:	b	18660 <__assert_fail@plt+0x71b0>
   185f8:	ldr	r0, [r5], #4
   185fc:	add	r7, r7, #4
   18600:	sub	r6, r6, #1
   18604:	ldr	r2, [r7]
   18608:	cmp	r0, #0
   1860c:	beq	18660 <__assert_fail@plt+0x71b0>
   18610:	cmp	r2, #0
   18614:	beq	18664 <__assert_fail@plt+0x71b4>
   18618:	add	r1, r0, #4
   1861c:	add	r2, r2, #4
   18620:	mov	r0, r4
   18624:	bl	23558 <__assert_fail@plt+0x120a8>
   18628:	cmp	r0, #0
   1862c:	str	r0, [fp, #-196]	; 0xffffff3c
   18630:	bne	189a4 <__assert_fail@plt+0x74f4>
   18634:	ldr	r1, [sp, #72]	; 0x48
   18638:	sub	r0, fp, #196	; 0xc4
   1863c:	mov	r2, r4
   18640:	bl	24cd4 <__assert_fail@plt+0x13824>
   18644:	str	r0, [r5, #-4]
   18648:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1864c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18650:	ldr	r8, [fp, #-196]	; 0xffffff3c
   18654:	cmp	r8, #0
   18658:	beq	18664 <__assert_fail@plt+0x71b4>
   1865c:	b	18670 <__assert_fail@plt+0x71c0>
   18660:	str	r2, [r5, #-4]
   18664:	cmp	r6, #0
   18668:	bne	185f8 <__assert_fail@plt+0x7148>
   1866c:	mov	r8, #0
   18670:	ldr	r0, [sp, #28]
   18674:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18678:	ldr	r6, [sp, #20]
   1867c:	ldr	r5, [sp, #16]
   18680:	cmp	r8, #0
   18684:	beq	18c24 <__assert_fail@plt+0x7774>
   18688:	b	18bec <__assert_fail@plt+0x773c>
   1868c:	ldr	r0, [sp, #112]	; 0x70
   18690:	ldr	r0, [r0]
   18694:	cmn	r0, #1
   18698:	bne	17c08 <__assert_fail@plt+0x6758>
   1869c:	b	188c8 <__assert_fail@plt+0x7418>
   186a0:	cmp	ip, #0
   186a4:	ble	18b24 <__assert_fail@plt+0x7674>
   186a8:	ldr	r1, [sp, #152]	; 0x98
   186ac:	ldr	r7, [sp, #44]	; 0x2c
   186b0:	sub	r0, ip, #1
   186b4:	cmp	r1, r0
   186b8:	beq	18b38 <__assert_fail@plt+0x7688>
   186bc:	ldr	r1, [sp, #184]	; 0xb8
   186c0:	cmp	r1, #2
   186c4:	blt	186f4 <__assert_fail@plt+0x7244>
   186c8:	ldr	r1, [sp, #112]	; 0x70
   186cc:	ldr	r5, [r1, r0, lsl #2]
   186d0:	cmn	r5, #1
   186d4:	bne	188fc <__assert_fail@plt+0x744c>
   186d8:	sub	r0, r0, #1
   186dc:	cmn	r0, #1
   186e0:	bne	186cc <__assert_fail@plt+0x721c>
   186e4:	ldr	r3, [sp, #164]	; 0xa4
   186e8:	tst	r3, #1
   186ec:	beq	18928 <__assert_fail@plt+0x7478>
   186f0:	b	18b4c <__assert_fail@plt+0x769c>
   186f4:	ldr	r1, [sp, #108]	; 0x6c
   186f8:	ldr	r2, [sp, #172]	; 0xac
   186fc:	ldrb	r0, [r1, r0]
   18700:	ubfx	r1, r0, #5, #3
   18704:	ldr	r1, [r2, r1, lsl #2]
   18708:	and	r2, r0, #31
   1870c:	tst	r1, r9, lsl r2
   18710:	bne	18b4c <__assert_fail@plt+0x769c>
   18714:	cmp	r0, #10
   18718:	beq	18910 <__assert_fail@plt+0x7460>
   1871c:	b	18b50 <__assert_fail@plt+0x76a0>
   18720:	ldr	r1, [sp, #76]	; 0x4c
   18724:	mov	r0, #0
   18728:	cmp	r6, r1
   1872c:	bge	18738 <__assert_fail@plt+0x7288>
   18730:	ldr	r0, [sp, #100]	; 0x64
   18734:	ldrb	r0, [r0, r6]
   18738:	ldrb	r0, [r5, r0]
   1873c:	cmp	r0, #0
   18740:	bne	17bdc <__assert_fail@plt+0x672c>
   18744:	sub	r0, r6, #1
   18748:	cmp	r6, r4
   1874c:	mov	r6, r0
   18750:	str	r0, [fp, #-200]	; 0xffffff38
   18754:	bgt	18724 <__assert_fail@plt+0x7274>
   18758:	b	19c84 <__assert_fail@plt+0x87d4>
   1875c:	ldr	r0, [sp, #36]	; 0x24
   18760:	mov	r1, #0
   18764:	str	r9, [fp, #-180]	; 0xffffff4c
   18768:	str	r5, [fp, #-184]	; 0xffffff48
   1876c:	str	r1, [fp, #-188]	; 0xffffff44
   18770:	str	r6, [fp, #-192]	; 0xffffff40
   18774:	str	r1, [r0]
   18778:	str	r1, [r0, #4]
   1877c:	str	r1, [r0, #8]
   18780:	add	r0, sp, #104	; 0x68
   18784:	sub	r1, fp, #192	; 0xc0
   18788:	bl	272e0 <__assert_fail@plt+0x15e30>
   1878c:	mov	r8, r0
   18790:	mov	r0, #0
   18794:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18798:	cmp	r8, #0
   1879c:	bne	18bb4 <__assert_fail@plt+0x7704>
   187a0:	ldr	r0, [r6]
   187a4:	mov	r8, #0
   187a8:	cmp	r0, #0
   187ac:	beq	188a8 <__assert_fail@plt+0x73f8>
   187b0:	b	18c24 <__assert_fail@plt+0x7774>
   187b4:	ldr	r8, [sp, #28]
   187b8:	ldr	r1, [r8]
   187bc:	cmp	r1, #0
   187c0:	bne	1899c <__assert_fail@plt+0x74ec>
   187c4:	cmp	r9, #1
   187c8:	blt	188a8 <__assert_fail@plt+0x73f8>
   187cc:	ldr	r0, [sp, #204]	; 0xcc
   187d0:	lsl	r4, r9, #2
   187d4:	add	sl, r9, #1
   187d8:	sub	r0, r0, #4
   187dc:	ldr	r1, [r0, r4]
   187e0:	cmp	r1, #0
   187e4:	bne	18804 <__assert_fail@plt+0x7354>
   187e8:	sub	sl, sl, #1
   187ec:	sub	r4, r4, #4
   187f0:	cmp	sl, #2
   187f4:	blt	188a8 <__assert_fail@plt+0x73f8>
   187f8:	ldr	r1, [r0, r4]
   187fc:	cmp	r1, #0
   18800:	beq	187e8 <__assert_fail@plt+0x7338>
   18804:	ldrb	r2, [r1, #52]	; 0x34
   18808:	tst	r2, #16
   1880c:	beq	187e8 <__assert_fail@plt+0x7338>
   18810:	sub	r9, sl, #2
   18814:	add	r5, sp, #104	; 0x68
   18818:	mov	r0, r5
   1881c:	mov	r2, r9
   18820:	bl	2230c <__assert_fail@plt+0x10e5c>
   18824:	mov	r5, r0
   18828:	mov	r0, r8
   1882c:	mov	r1, #0
   18830:	mov	r2, r4
   18834:	bl	113cc <memset@plt>
   18838:	ldr	r0, [sp, #36]	; 0x24
   1883c:	mov	r1, #0
   18840:	str	r9, [fp, #-180]	; 0xffffff4c
   18844:	str	r5, [fp, #-184]	; 0xffffff48
   18848:	str	r8, [fp, #-188]	; 0xffffff44
   1884c:	str	r6, [fp, #-192]	; 0xffffff40
   18850:	mov	r7, r5
   18854:	str	r1, [r0]
   18858:	str	r1, [r0, #4]
   1885c:	str	r1, [r0, #8]
   18860:	add	r0, sp, #104	; 0x68
   18864:	sub	r1, fp, #192	; 0xc0
   18868:	bl	272e0 <__assert_fail@plt+0x15e30>
   1886c:	mov	r8, r0
   18870:	mov	r0, #0
   18874:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18878:	cmp	r8, #0
   1887c:	bne	18be0 <__assert_fail@plt+0x7730>
   18880:	ldr	r0, [r6]
   18884:	sub	r1, sl, #1
   18888:	mov	r5, r7
   1888c:	sub	r4, fp, #48	; 0x30
   18890:	mov	r7, r1
   18894:	cmp	r0, #0
   18898:	beq	187b4 <__assert_fail@plt+0x7304>
   1889c:	sub	r9, sl, #2
   188a0:	sub	r7, sl, #1
   188a4:	b	185b8 <__assert_fail@plt+0x7108>
   188a8:	mov	r0, r6
   188ac:	bl	2bc28 <__assert_fail@plt+0x1a778>
   188b0:	mov	r0, r8
   188b4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   188b8:	ldr	sl, [sp, #68]	; 0x44
   188bc:	mov	r9, #1
   188c0:	add	r0, sp, #104	; 0x68
   188c4:	bl	224b4 <__assert_fail@plt+0x11004>
   188c8:	ldr	r0, [fp, #-200]	; 0xffffff38
   188cc:	ldr	r4, [sp, #48]	; 0x30
   188d0:	ldr	r7, [sp, #52]	; 0x34
   188d4:	mov	r8, #1
   188d8:	add	r6, r0, sl
   188dc:	cmp	r6, r4
   188e0:	str	r6, [fp, #-200]	; 0xffffff38
   188e4:	blt	19c84 <__assert_fail@plt+0x87d4>
   188e8:	ldr	r5, [sp, #88]	; 0x58
   188ec:	ldr	ip, [sp, #84]	; 0x54
   188f0:	cmp	r7, r6
   188f4:	bge	17a5c <__assert_fail@plt+0x65ac>
   188f8:	b	19c84 <__assert_fail@plt+0x87d4>
   188fc:	ldrb	r0, [sp, #182]	; 0xb6
   18900:	cmp	r0, #0
   18904:	bne	18bbc <__assert_fail@plt+0x770c>
   18908:	cmp	r5, #10
   1890c:	bne	18b50 <__assert_fail@plt+0x76a0>
   18910:	ldrb	r0, [sp, #181]	; 0xb5
   18914:	cmp	r0, #0
   18918:	movwne	r0, #1
   1891c:	lsl	r3, r0, #1
   18920:	tst	r3, #1
   18924:	bne	18b4c <__assert_fail@plt+0x769c>
   18928:	cmp	r3, #0
   1892c:	beq	18b50 <__assert_fail@plt+0x76a0>
   18930:	ands	r1, r3, #2
   18934:	and	r0, r3, #4
   18938:	cmpne	r0, #0
   1893c:	bne	1897c <__assert_fail@plt+0x74cc>
   18940:	cmp	r1, #0
   18944:	bne	1898c <__assert_fail@plt+0x74dc>
   18948:	ldr	r6, [r4, #36]	; 0x24
   1894c:	cmp	r0, #0
   18950:	beq	18b50 <__assert_fail@plt+0x76a0>
   18954:	ldr	r2, [r6, #40]	; 0x28
   18958:	sub	r0, fp, #196	; 0xc4
   1895c:	mov	r1, r4
   18960:	mov	r5, ip
   18964:	bl	20d08 <__assert_fail@plt+0xf858>
   18968:	mov	ip, r5
   1896c:	mov	r6, r0
   18970:	cmp	r6, #0
   18974:	bne	17c40 <__assert_fail@plt+0x6790>
   18978:	b	19cec <__assert_fail@plt+0x883c>
   1897c:	ldr	r6, [r4, #48]	; 0x30
   18980:	cmp	r6, #0
   18984:	bne	17c40 <__assert_fail@plt+0x6790>
   18988:	b	19cec <__assert_fail@plt+0x883c>
   1898c:	ldr	r6, [r4, #44]	; 0x2c
   18990:	cmp	r6, #0
   18994:	bne	17c40 <__assert_fail@plt+0x6790>
   18998:	b	19cec <__assert_fail@plt+0x883c>
   1899c:	mov	r2, r7
   189a0:	b	185b8 <__assert_fail@plt+0x7108>
   189a4:	mov	r8, r0
   189a8:	b	18670 <__assert_fail@plt+0x71c0>
   189ac:	sxtb	r0, r0
   189b0:	cmn	r0, #1
   189b4:	ble	18b5c <__assert_fail@plt+0x76ac>
   189b8:	mov	r0, #1
   189bc:	mov	r4, ip
   189c0:	str	r0, [sp, #72]	; 0x48
   189c4:	ldr	r0, [sp, #56]	; 0x38
   189c8:	cmp	r0, #0
   189cc:	bne	17c7c <__assert_fail@plt+0x67cc>
   189d0:	b	18b9c <__assert_fail@plt+0x76ec>
   189d4:	ldr	r0, [r6, #8]
   189d8:	cmp	r0, #1
   189dc:	blt	18ab0 <__assert_fail@plt+0x7600>
   189e0:	ldr	r4, [sp, #188]	; 0xbc
   189e4:	mov	r5, #0
   189e8:	str	ip, [sp, #8]
   189ec:	b	18a1c <__assert_fail@plt+0x756c>
   189f0:	add	r1, r1, #1
   189f4:	str	r7, [r0, #4]
   189f8:	ldr	ip, [sp, #8]
   189fc:	mov	r9, #1
   18a00:	str	r1, [sp, #228]	; 0xe4
   18a04:	mov	r1, #0
   18a08:	str	r1, [r0]
   18a0c:	ldr	r0, [r6, #8]
   18a10:	add	r5, r5, #1
   18a14:	cmp	r5, r0
   18a18:	bge	18ab0 <__assert_fail@plt+0x7600>
   18a1c:	ldr	r1, [r6, #12]
   18a20:	ldr	r7, [r1, r5, lsl #2]
   18a24:	ldr	r1, [r4]
   18a28:	add	r2, r1, r7, lsl #3
   18a2c:	ldrb	r2, [r2, #4]
   18a30:	cmp	r2, #8
   18a34:	bne	18a10 <__assert_fail@plt+0x7560>
   18a38:	ldr	r1, [r1, r7, lsl #3]
   18a3c:	cmp	r1, #31
   18a40:	bgt	18a10 <__assert_fail@plt+0x7560>
   18a44:	ldr	r2, [r4, #80]	; 0x50
   18a48:	tst	r2, r9, lsl r1
   18a4c:	beq	18a10 <__assert_fail@plt+0x7560>
   18a50:	ldr	r0, [sp, #228]	; 0xe4
   18a54:	ldr	r9, [sp, #232]	; 0xe8
   18a58:	cmp	r0, r9
   18a5c:	beq	18a8c <__assert_fail@plt+0x75dc>
   18a60:	mov	r0, #1
   18a64:	mov	r1, #24
   18a68:	bl	2ba08 <__assert_fail@plt+0x1a558>
   18a6c:	ldr	r1, [sp, #228]	; 0xe4
   18a70:	ldr	r2, [sp, #236]	; 0xec
   18a74:	str	r0, [r2, r1, lsl #2]
   18a78:	ldr	r0, [sp, #236]	; 0xec
   18a7c:	ldr	r0, [r0, r1, lsl #2]
   18a80:	cmp	r0, #0
   18a84:	bne	189f0 <__assert_fail@plt+0x7540>
   18a88:	b	18c1c <__assert_fail@plt+0x776c>
   18a8c:	ldr	r0, [sp, #236]	; 0xec
   18a90:	lsl	r1, r9, #3
   18a94:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   18a98:	cmp	r0, #0
   18a9c:	beq	18c1c <__assert_fail@plt+0x776c>
   18aa0:	str	r0, [sp, #236]	; 0xec
   18aa4:	lsl	r0, r9, #1
   18aa8:	str	r0, [sp, #232]	; 0xe8
   18aac:	b	18a60 <__assert_fail@plt+0x75b0>
   18ab0:	mov	r8, #0
   18ab4:	str	r8, [fp, #-196]	; 0xffffff3c
   18ab8:	ldrb	r0, [r6, #52]	; 0x34
   18abc:	tst	r0, #64	; 0x40
   18ac0:	beq	17c64 <__assert_fail@plt+0x67b4>
   18ac4:	add	r1, r6, #4
   18ac8:	add	r0, sp, #104	; 0x68
   18acc:	mov	r4, ip
   18ad0:	bl	22740 <__assert_fail@plt+0x11290>
   18ad4:	mov	ip, r4
   18ad8:	cmp	r0, #0
   18adc:	str	r0, [fp, #-196]	; 0xffffff3c
   18ae0:	beq	17c64 <__assert_fail@plt+0x67b4>
   18ae4:	mov	r4, r0
   18ae8:	cmn	r4, #1
   18aec:	bne	18478 <__assert_fail@plt+0x6fc8>
   18af0:	b	188c0 <__assert_fail@plt+0x7410>
   18af4:	ldr	r1, [sp, #76]	; 0x4c
   18af8:	mov	r0, #0
   18afc:	mov	r6, r7
   18b00:	cmp	r7, r1
   18b04:	ldr	r1, [sp, #100]	; 0x64
   18b08:	ldrblt	r0, [r1, r7]
   18b0c:	cmp	ip, #0
   18b10:	ldrbne	r0, [ip, r0]
   18b14:	ldrb	r0, [r5, r0]
   18b18:	cmp	r0, #0
   18b1c:	bne	17bdc <__assert_fail@plt+0x672c>
   18b20:	b	19eec <__assert_fail@plt+0x8a3c>
   18b24:	ldr	r3, [sp, #164]	; 0xa4
   18b28:	ldr	r7, [sp, #44]	; 0x2c
   18b2c:	tst	r3, #1
   18b30:	beq	18928 <__assert_fail@plt+0x7478>
   18b34:	b	18b4c <__assert_fail@plt+0x769c>
   18b38:	ldr	r0, [sp, #192]	; 0xc0
   18b3c:	and	r0, r0, #2
   18b40:	eor	r3, r0, #10
   18b44:	tst	r3, #1
   18b48:	beq	18928 <__assert_fail@plt+0x7478>
   18b4c:	ldr	r6, [r4, #40]	; 0x28
   18b50:	cmp	r6, #0
   18b54:	bne	17c40 <__assert_fail@plt+0x6790>
   18b58:	b	19cec <__assert_fail@plt+0x883c>
   18b5c:	add	r0, sp, #104	; 0x68
   18b60:	mov	r1, r6
   18b64:	mov	r2, ip
   18b68:	mov	r4, ip
   18b6c:	bl	2230c <__assert_fail@plt+0x10e5c>
   18b70:	clz	r1, r0
   18b74:	cmp	r0, #0
   18b78:	mov	ip, r4
   18b7c:	lsr	r2, r1, #5
   18b80:	ldr	r1, [sp, #56]	; 0x38
   18b84:	movwne	r0, #1
   18b88:	mvneq	r4, #0
   18b8c:	str	r0, [sp, #72]	; 0x48
   18b90:	orr	r1, r1, r2
   18b94:	cmp	r1, #0
   18b98:	bne	17c7c <__assert_fail@plt+0x67cc>
   18b9c:	mov	r4, ip
   18ba0:	cmn	r4, #1
   18ba4:	bne	18478 <__assert_fail@plt+0x6fc8>
   18ba8:	b	188c0 <__assert_fail@plt+0x7410>
   18bac:	ldr	r0, [sp, #28]
   18bb0:	b	18be8 <__assert_fail@plt+0x7738>
   18bb4:	mov	r0, #0
   18bb8:	b	18be8 <__assert_fail@plt+0x7738>
   18bbc:	mov	r0, r5
   18bc0:	mov	r8, ip
   18bc4:	bl	113b4 <iswalnum@plt>
   18bc8:	mov	ip, r8
   18bcc:	cmp	r5, #95	; 0x5f
   18bd0:	beq	18b4c <__assert_fail@plt+0x769c>
   18bd4:	cmp	r0, #0
   18bd8:	beq	18908 <__assert_fail@plt+0x7458>
   18bdc:	b	18b4c <__assert_fail@plt+0x769c>
   18be0:	ldr	r0, [sp, #28]
   18be4:	ldr	sl, [sp, #64]	; 0x40
   18be8:	str	r0, [sp, #12]
   18bec:	mov	r0, r6
   18bf0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18bf4:	ldr	r0, [sp, #12]
   18bf8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18bfc:	ldr	r9, [sp, #96]	; 0x60
   18c00:	cmp	r8, #0
   18c04:	beq	18c4c <__assert_fail@plt+0x779c>
   18c08:	ldr	sl, [sp, #68]	; 0x44
   18c0c:	cmp	r8, #1
   18c10:	mov	r9, #1
   18c14:	beq	188c0 <__assert_fail@plt+0x7410>
   18c18:	b	19c84 <__assert_fail@plt+0x87d4>
   18c1c:	mov	r4, #12
   18c20:	b	18480 <__assert_fail@plt+0x6fd0>
   18c24:	ldr	r0, [sp, #204]	; 0xcc
   18c28:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18c2c:	mov	r0, #0
   18c30:	str	r5, [sp, #200]	; 0xc8
   18c34:	str	r6, [sp, #204]	; 0xcc
   18c38:	str	r9, [sp, #196]	; 0xc4
   18c3c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18c40:	mov	r0, #0
   18c44:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18c48:	ldr	r9, [sp, #96]	; 0x60
   18c4c:	ldr	r0, [sp, #92]	; 0x5c
   18c50:	cmp	r0, #0
   18c54:	beq	19c80 <__assert_fail@plt+0x87d0>
   18c58:	ldr	r0, [sp, #92]	; 0x5c
   18c5c:	ldr	r1, [fp, #16]
   18c60:	ldr	r8, [fp, #20]
   18c64:	cmp	r0, #1
   18c68:	beq	18c88 <__assert_fail@plt+0x77d8>
   18c6c:	ldr	r0, [sp, #32]
   18c70:	mvn	r0, r0
   18c74:	add	r0, r0, r1
   18c78:	mov	r1, #255	; 0xff
   18c7c:	lsl	r2, r0, #3
   18c80:	add	r0, r8, #8
   18c84:	bl	113cc <memset@plt>
   18c88:	mov	r0, #0
   18c8c:	ldr	r1, [sp, #196]	; 0xc4
   18c90:	stm	r8, {r0, r1}
   18c94:	ldr	r0, [sp, #92]	; 0x5c
   18c98:	cmp	r0, #2
   18c9c:	bcc	19b80 <__assert_fail@plt+0x86d0>
   18ca0:	ldrb	r0, [sl, #28]
   18ca4:	ands	r0, r0, #16
   18ca8:	bne	19b80 <__assert_fail@plt+0x86d0>
   18cac:	ldrb	r1, [r9, #88]	; 0x58
   18cb0:	sub	r5, fp, #48	; 0x30
   18cb4:	mov	r0, #0
   18cb8:	tst	r1, #1
   18cbc:	mov	r1, #0
   18cc0:	beq	18cd4 <__assert_fail@plt+0x7824>
   18cc4:	ldr	r2, [r9, #76]	; 0x4c
   18cc8:	mov	r1, #0
   18ccc:	cmp	r2, #0
   18cd0:	movwgt	r1, #1
   18cd4:	movw	r2, #53256	; 0xd008
   18cd8:	ldr	r7, [sl]
   18cdc:	cmp	r1, #0
   18ce0:	mov	r6, #0
   18ce4:	movt	r2, #2
   18ce8:	vldr	d16, [r2]
   18cec:	ldr	r2, [r2, #8]
   18cf0:	str	r2, [fp, #-40]	; 0xffffffd8
   18cf4:	sub	r2, fp, #192	; 0xc0
   18cf8:	add	r4, r2, #12
   18cfc:	mov	r2, #16
   18d00:	vstr	d16, [fp, #-48]	; 0xffffffd0
   18d04:	str	r4, [fp, #-184]	; 0xffffff48
   18d08:	str	r2, [fp, #-188]	; 0xffffff44
   18d0c:	str	r0, [fp, #-192]	; 0xffffff40
   18d10:	beq	18d30 <__assert_fail@plt+0x7880>
   18d14:	mov	r0, #48	; 0x30
   18d18:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   18d1c:	cmp	r0, #0
   18d20:	str	r0, [fp, #-40]	; 0xffffffd8
   18d24:	beq	19cec <__assert_fail@plt+0x883c>
   18d28:	ldr	r0, [fp, #-192]	; 0xffffff40
   18d2c:	mov	r6, r5
   18d30:	ldr	r5, [sp, #92]	; 0x5c
   18d34:	ldr	sl, [r7, #72]	; 0x48
   18d38:	str	r4, [sp, #88]	; 0x58
   18d3c:	cmp	r0, r5
   18d40:	bcs	18e28 <__assert_fail@plt+0x7978>
   18d44:	sub	r0, fp, #192	; 0xc0
   18d48:	mov	r1, r5
   18d4c:	mov	r2, r4
   18d50:	mov	r3, #8
   18d54:	bl	2bb64 <__assert_fail@plt+0x1a6b4>
   18d58:	cmp	r0, #0
   18d5c:	bne	18e2c <__assert_fail@plt+0x797c>
   18d60:	ldr	r1, [sp, #88]	; 0x58
   18d64:	ldr	r0, [fp, #-184]	; 0xffffff48
   18d68:	mov	r4, r6
   18d6c:	mov	r5, r1
   18d70:	cmp	r0, r1
   18d74:	beq	18d7c <__assert_fail@plt+0x78cc>
   18d78:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18d7c:	mov	r0, #16
   18d80:	str	r5, [fp, #-184]	; 0xffffff48
   18d84:	mov	r8, #12
   18d88:	cmp	r4, #0
   18d8c:	str	r0, [fp, #-188]	; 0xffffff44
   18d90:	mov	r0, #0
   18d94:	str	r0, [fp, #-192]	; 0xffffff40
   18d98:	beq	19c84 <__assert_fail@plt+0x87d4>
   18d9c:	ldr	r1, [r4]
   18da0:	mov	r0, r4
   18da4:	ldr	r0, [r4, #8]
   18da8:	cmp	r1, #1
   18dac:	blt	19d7c <__assert_fail@plt+0x88cc>
   18db0:	mov	r5, #0
   18db4:	mov	r6, #0
   18db8:	add	r0, r0, r5
   18dbc:	ldr	r0, [r0, #20]
   18dc0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18dc4:	ldr	r0, [r4, #8]
   18dc8:	add	r0, r0, r5
   18dcc:	ldr	r0, [r0, #8]
   18dd0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18dd4:	ldr	r1, [r4]
   18dd8:	ldr	r0, [r4, #8]
   18ddc:	add	r6, r6, #1
   18de0:	add	r5, r5, #24
   18de4:	cmp	r6, r1
   18de8:	blt	18db8 <__assert_fail@plt+0x7908>
   18dec:	b	19d7c <__assert_fail@plt+0x88cc>
   18df0:	ldr	r1, [r3, #8]
   18df4:	cmp	r1, #0
   18df8:	beq	18e08 <__assert_fail@plt+0x7958>
   18dfc:	ldrsb	r1, [r4, #28]
   18e00:	cmp	r1, #0
   18e04:	bmi	1773c <__assert_fail@plt+0x628c>
   18e08:	mov	r1, #0
   18e0c:	cmp	r6, #0
   18e10:	str	r1, [sp, #80]	; 0x50
   18e14:	beq	19ce4 <__assert_fail@plt+0x8834>
   18e18:	cmp	sl, #0
   18e1c:	mov	r6, #0
   18e20:	bne	19cd8 <__assert_fail@plt+0x8828>
   18e24:	b	17740 <__assert_fail@plt+0x6290>
   18e28:	str	r5, [fp, #-192]	; 0xffffff40
   18e2c:	ldr	r0, [fp, #-184]	; 0xffffff48
   18e30:	lsl	r2, r5, #3
   18e34:	mov	r1, r8
   18e38:	str	r2, [sp, #76]	; 0x4c
   18e3c:	str	r0, [sp, #84]	; 0x54
   18e40:	bl	11258 <memcpy@plt>
   18e44:	ldr	r4, [r8]
   18e48:	ldr	r0, [r8, #4]
   18e4c:	mov	ip, #0
   18e50:	cmp	r4, r0
   18e54:	ble	18ee0 <__assert_fail@plt+0x7a30>
   18e58:	mov	r0, ip
   18e5c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18e60:	ldr	r0, [fp, #-184]	; 0xffffff48
   18e64:	ldr	r4, [sp, #88]	; 0x58
   18e68:	cmp	r0, r4
   18e6c:	beq	18e74 <__assert_fail@plt+0x79c4>
   18e70:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18e74:	mov	r0, #16
   18e78:	str	r4, [fp, #-184]	; 0xffffff48
   18e7c:	cmp	r6, #0
   18e80:	str	r0, [fp, #-188]	; 0xffffff44
   18e84:	mov	r0, #0
   18e88:	str	r0, [fp, #-192]	; 0xffffff40
   18e8c:	beq	19b80 <__assert_fail@plt+0x86d0>
   18e90:	ldr	r1, [r6]
   18e94:	ldr	r0, [r6, #8]
   18e98:	cmp	r1, #1
   18e9c:	blt	19b78 <__assert_fail@plt+0x86c8>
   18ea0:	mov	r4, #0
   18ea4:	mov	r5, #0
   18ea8:	add	r0, r0, r4
   18eac:	ldr	r0, [r0, #20]
   18eb0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18eb4:	ldr	r0, [r6, #8]
   18eb8:	add	r0, r0, r4
   18ebc:	ldr	r0, [r0, #8]
   18ec0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   18ec4:	ldr	r1, [r6]
   18ec8:	ldr	r0, [r6, #8]
   18ecc:	add	r5, r5, #1
   18ed0:	add	r4, r4, #24
   18ed4:	cmp	r5, r1
   18ed8:	blt	18ea8 <__assert_fail@plt+0x79f8>
   18edc:	b	19b78 <__assert_fail@plt+0x86c8>
   18ee0:	add	r0, r8, #4
   18ee4:	mov	lr, #1
   18ee8:	mov	r5, #0
   18eec:	mov	ip, #0
   18ef0:	mov	r3, #0
   18ef4:	str	r7, [sp, #60]	; 0x3c
   18ef8:	str	r6, [sp, #68]	; 0x44
   18efc:	str	r0, [sp, #64]	; 0x40
   18f00:	ldr	r0, [sp, #92]	; 0x5c
   18f04:	lsl	r0, r0, #4
   18f08:	str	r0, [sp, #44]	; 0x2c
   18f0c:	mov	r0, #0
   18f10:	str	r0, [sp, #72]	; 0x48
   18f14:	ldr	r0, [r7]
   18f18:	add	r1, r0, sl, lsl #3
   18f1c:	ldr	r1, [r1, #4]
   18f20:	uxtb	r2, r1
   18f24:	cmp	r2, #9
   18f28:	beq	18f5c <__assert_fail@plt+0x7aac>
   18f2c:	cmp	r2, #8
   18f30:	bne	18fd8 <__assert_fail@plt+0x7b28>
   18f34:	ldr	r0, [r0, sl, lsl #3]
   18f38:	ldr	r1, [sp, #92]	; 0x5c
   18f3c:	add	r0, r0, #1
   18f40:	cmp	r0, r1
   18f44:	bge	18fd8 <__assert_fail@plt+0x7b28>
   18f48:	mov	r1, r8
   18f4c:	str	r4, [r1, r0, lsl #3]!
   18f50:	mvn	r0, #0
   18f54:	str	r0, [r1, #4]
   18f58:	b	18fd8 <__assert_fail@plt+0x7b28>
   18f5c:	ldr	r0, [r0, sl, lsl #3]
   18f60:	ldr	r2, [sp, #92]	; 0x5c
   18f64:	add	r0, r0, #1
   18f68:	cmp	r0, r2
   18f6c:	bge	18fd8 <__assert_fail@plt+0x7b28>
   18f70:	ldr	r2, [r8, r0, lsl #3]
   18f74:	cmp	r2, r4
   18f78:	bge	18f90 <__assert_fail@plt+0x7ae0>
   18f7c:	add	r0, r8, r0, lsl #3
   18f80:	mov	r1, r8
   18f84:	str	r4, [r0, #4]
   18f88:	ldr	r0, [sp, #84]	; 0x54
   18f8c:	b	18fb0 <__assert_fail@plt+0x7b00>
   18f90:	tst	r1, #524288	; 0x80000
   18f94:	beq	18fd0 <__assert_fail@plt+0x7b20>
   18f98:	ldr	r1, [sp, #84]	; 0x54
   18f9c:	ldr	r1, [r1, r0, lsl #3]
   18fa0:	cmn	r1, #1
   18fa4:	beq	18fd0 <__assert_fail@plt+0x7b20>
   18fa8:	ldr	r1, [sp, #84]	; 0x54
   18fac:	mov	r0, r8
   18fb0:	ldr	r2, [sp, #76]	; 0x4c
   18fb4:	mov	r7, ip
   18fb8:	str	r3, [sp, #48]	; 0x30
   18fbc:	bl	11258 <memcpy@plt>
   18fc0:	ldr	r3, [sp, #48]	; 0x30
   18fc4:	mov	ip, r7
   18fc8:	mov	lr, #1
   18fcc:	b	18fd8 <__assert_fail@plt+0x7b28>
   18fd0:	add	r0, r8, r0, lsl #3
   18fd4:	str	r4, [r0, #4]
   18fd8:	ldr	r0, [r8, #4]
   18fdc:	cmp	r4, r0
   18fe0:	ldreq	r0, [sp, #200]	; 0xc8
   18fe4:	cmpeq	sl, r0
   18fe8:	beq	19044 <__assert_fail@plt+0x7b94>
   18fec:	cmp	r6, #0
   18ff0:	beq	1911c <__assert_fail@plt+0x7c6c>
   18ff4:	cmp	r3, #1
   18ff8:	blt	1911c <__assert_fail@plt+0x7c6c>
   18ffc:	str	ip, [sp, #52]	; 0x34
   19000:	mov	ip, r3
   19004:	mov	r0, #0
   19008:	subs	r1, r3, #1
   1900c:	beq	19030 <__assert_fail@plt+0x7b80>
   19010:	add	r2, r0, r1
   19014:	lsr	r3, r2, #1
   19018:	ldr	r7, [r5, r3, lsl #2]
   1901c:	cmp	r7, sl
   19020:	addlt	r0, lr, r2, lsr #1
   19024:	movge	r1, r3
   19028:	cmp	r0, r1
   1902c:	bcc	19010 <__assert_fail@plt+0x7b60>
   19030:	ldr	r0, [r5, r0, lsl #2]
   19034:	mov	r3, ip
   19038:	ldr	ip, [sp, #52]	; 0x34
   1903c:	cmp	r0, sl
   19040:	bne	1911c <__assert_fail@plt+0x7c6c>
   19044:	ldr	r4, [sp, #88]	; 0x58
   19048:	cmp	r6, #0
   1904c:	beq	19af8 <__assert_fail@plt+0x8648>
   19050:	ldr	r0, [sp, #92]	; 0x5c
   19054:	ldr	r1, [sp, #64]	; 0x40
   19058:	ldr	r2, [r1, #-4]
   1905c:	cmp	r2, #0
   19060:	bpl	1907c <__assert_fail@plt+0x7bcc>
   19064:	subs	r0, r0, #1
   19068:	add	r1, r1, #8
   1906c:	beq	19af8 <__assert_fail@plt+0x8648>
   19070:	ldr	r2, [r1, #-4]
   19074:	cmp	r2, #0
   19078:	bmi	19064 <__assert_fail@plt+0x7bb4>
   1907c:	ldr	r2, [r1]
   19080:	cmn	r2, #1
   19084:	bne	19064 <__assert_fail@plt+0x7bb4>
   19088:	ldr	r0, [r6]
   1908c:	cmp	r0, #0
   19090:	beq	19af8 <__assert_fail@plt+0x8648>
   19094:	sub	r1, r0, #1
   19098:	ldr	r7, [sp, #76]	; 0x4c
   1909c:	mov	r0, r8
   190a0:	mov	r8, ip
   190a4:	str	r1, [r6]
   190a8:	add	sl, r1, r1, lsl #1
   190ac:	ldr	r4, [r6, #8]
   190b0:	mov	r2, r7
   190b4:	ldr	r1, [r4, sl, lsl #3]!
   190b8:	str	r1, [sp, #100]	; 0x64
   190bc:	ldr	r1, [r4, #8]
   190c0:	bl	11258 <memcpy@plt>
   190c4:	ldr	r0, [r4, #8]
   190c8:	ldr	r1, [sp, #92]	; 0x5c
   190cc:	mov	r2, r7
   190d0:	add	r1, r0, r1, lsl #3
   190d4:	ldr	r0, [sp, #84]	; 0x54
   190d8:	bl	11258 <memcpy@plt>
   190dc:	mov	r0, r8
   190e0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   190e4:	ldr	r0, [r6, #8]
   190e8:	add	r0, r0, sl, lsl #3
   190ec:	ldr	r0, [r0, #8]
   190f0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   190f4:	ldr	r0, [r6, #8]
   190f8:	mov	lr, #1
   190fc:	add	r0, r0, sl, lsl #3
   19100:	ldr	ip, [r0, #20]
   19104:	ldr	r1, [r0, #12]
   19108:	ldr	sl, [r0, #4]
   1910c:	ldr	r3, [r0, #16]
   19110:	mov	r5, ip
   19114:	str	r1, [sp, #72]	; 0x48
   19118:	b	19120 <__assert_fail@plt+0x7c70>
   1911c:	str	r4, [sp, #100]	; 0x64
   19120:	ldr	r4, [sp, #188]	; 0xbc
   19124:	ldr	r0, [r4]
   19128:	add	r1, r0, sl, lsl #3
   1912c:	ldr	r1, [r1, #4]
   19130:	tst	r1, #8
   19134:	bne	19208 <__assert_fail@plt+0x7d58>
   19138:	tst	r1, #1048576	; 0x100000
   1913c:	bne	19298 <__assert_fail@plt+0x7de8>
   19140:	uxtb	r1, r1
   19144:	cmp	r1, #4
   19148:	bne	192c4 <__assert_fail@plt+0x7e14>
   1914c:	ldr	r0, [r0, sl, lsl #3]
   19150:	ldr	r2, [sp, #92]	; 0x5c
   19154:	str	r5, [sp, #56]	; 0x38
   19158:	mov	r7, #0
   1915c:	mov	r5, r2
   19160:	add	r0, r0, #1
   19164:	cmp	r0, r2
   19168:	bge	1917c <__assert_fail@plt+0x7ccc>
   1916c:	ldr	r1, [fp, #20]
   19170:	ldr	r2, [r1, r0, lsl #3]!
   19174:	ldr	r1, [r1, #4]
   19178:	sub	r7, r1, r2
   1917c:	ldr	r8, [sp, #100]	; 0x64
   19180:	cmp	r6, #0
   19184:	beq	19588 <__assert_fail@plt+0x80d8>
   19188:	cmp	r0, r5
   1918c:	bge	191ec <__assert_fail@plt+0x7d3c>
   19190:	ldr	r2, [fp, #20]
   19194:	ldr	r1, [r2, r0, lsl #3]
   19198:	cmn	r1, #1
   1919c:	beq	191ec <__assert_fail@plt+0x7d3c>
   191a0:	add	r0, r2, r0, lsl #3
   191a4:	ldr	r0, [r0, #4]
   191a8:	cmn	r0, #1
   191ac:	beq	191ec <__assert_fail@plt+0x7d3c>
   191b0:	cmp	r7, #0
   191b4:	beq	19600 <__assert_fail@plt+0x8150>
   191b8:	ldr	r0, [sp, #132]	; 0x84
   191bc:	sub	r0, r0, r8
   191c0:	cmp	r0, r7
   191c4:	blt	191ec <__assert_fail@plt+0x7d3c>
   191c8:	ldr	r2, [sp, #108]	; 0x6c
   191cc:	str	ip, [sp, #52]	; 0x34
   191d0:	add	r0, r2, r1
   191d4:	add	r1, r2, r8
   191d8:	mov	r2, r7
   191dc:	bl	11384 <bcmp@plt>
   191e0:	cmp	r0, #0
   191e4:	beq	197bc <__assert_fail@plt+0x830c>
   191e8:	ldr	ip, [sp, #52]	; 0x34
   191ec:	mov	sl, r5
   191f0:	ldr	r5, [sp, #56]	; 0x38
   191f4:	ldr	r4, [sp, #88]	; 0x58
   191f8:	ldr	r0, [r6]
   191fc:	cmp	r0, #0
   19200:	bne	197f8 <__assert_fail@plt+0x8348>
   19204:	b	19cf4 <__assert_fail@plt+0x8844>
   19208:	ldr	r0, [sp, #204]	; 0xcc
   1920c:	ldr	r1, [sp, #100]	; 0x64
   19210:	ldr	r8, [r4, #20]
   19214:	cmp	r3, #1
   19218:	ldr	r7, [r0, r1, lsl #2]
   1921c:	blt	19270 <__assert_fail@plt+0x7dc0>
   19220:	mov	r4, r3
   19224:	mov	r0, #0
   19228:	subs	r1, r3, #1
   1922c:	str	r7, [sp, #80]	; 0x50
   19230:	beq	19254 <__assert_fail@plt+0x7da4>
   19234:	add	r2, r0, r1
   19238:	lsr	r3, r2, #1
   1923c:	ldr	r7, [r5, r3, lsl #2]
   19240:	cmp	r7, sl
   19244:	addlt	r0, lr, r2, lsr #1
   19248:	movge	r1, r3
   1924c:	cmp	r0, r1
   19250:	bcc	19234 <__assert_fail@plt+0x7d84>
   19254:	ldr	r0, [r5, r0, lsl #2]
   19258:	ldr	r7, [sp, #80]	; 0x50
   1925c:	mov	r3, r4
   19260:	cmp	r0, sl
   19264:	bne	19270 <__assert_fail@plt+0x7dc0>
   19268:	str	r5, [sp, #56]	; 0x38
   1926c:	b	193b8 <__assert_fail@plt+0x7f08>
   19270:	ldr	r0, [sp, #72]	; 0x48
   19274:	cmp	r0, #0
   19278:	beq	1938c <__assert_fail@plt+0x7edc>
   1927c:	cmp	r3, #0
   19280:	str	r5, [sp, #56]	; 0x38
   19284:	bne	19898 <__assert_fail@plt+0x83e8>
   19288:	mov	r0, r5
   1928c:	str	sl, [r5]
   19290:	mov	r3, #1
   19294:	b	193b8 <__assert_fail@plt+0x7f08>
   19298:	ldr	r3, [sp, #100]	; 0x64
   1929c:	mov	r0, r4
   192a0:	mov	r1, sl
   192a4:	add	r2, sp, #104	; 0x68
   192a8:	mov	r8, ip
   192ac:	bl	25004 <__assert_fail@plt+0x13b54>
   192b0:	mov	lr, #1
   192b4:	mov	r1, r0
   192b8:	cmp	r1, #0
   192bc:	mov	ip, r8
   192c0:	bne	192f0 <__assert_fail@plt+0x7e40>
   192c4:	ldr	r0, [r4]
   192c8:	ldr	r2, [sp, #100]	; 0x64
   192cc:	mov	r6, ip
   192d0:	add	r1, r0, sl, lsl #3
   192d4:	add	r0, sp, #104	; 0x68
   192d8:	bl	25390 <__assert_fail@plt+0x13ee0>
   192dc:	mov	ip, r6
   192e0:	mov	lr, #1
   192e4:	mov	r1, #1
   192e8:	cmp	r0, #0
   192ec:	beq	193d8 <__assert_fail@plt+0x7f28>
   192f0:	ldr	r0, [r4, #12]
   192f4:	ldr	r2, [sp, #100]	; 0x64
   192f8:	ldr	r6, [sp, #68]	; 0x44
   192fc:	ldr	r7, [r0, sl, lsl #2]
   19300:	add	r2, r1, r2
   19304:	cmp	r6, #0
   19308:	beq	19480 <__assert_fail@plt+0x7fd0>
   1930c:	ldr	r0, [sp, #196]	; 0xc4
   19310:	ldr	r4, [sp, #88]	; 0x58
   19314:	cmp	r2, r0
   19318:	bgt	197e8 <__assert_fail@plt+0x8338>
   1931c:	ldr	r0, [sp, #204]	; 0xcc
   19320:	ldr	r0, [r0, r2, lsl #2]
   19324:	cmp	r0, #0
   19328:	beq	197e8 <__assert_fail@plt+0x8338>
   1932c:	ldr	r1, [r0, #8]
   19330:	cmp	r1, #1
   19334:	blt	197e8 <__assert_fail@plt+0x8338>
   19338:	ldr	r0, [r0, #12]
   1933c:	str	r2, [sp, #100]	; 0x64
   19340:	mov	r8, r5
   19344:	subs	r1, r1, #1
   19348:	mov	r2, #0
   1934c:	beq	19374 <__assert_fail@plt+0x7ec4>
   19350:	mov	r2, #0
   19354:	add	r3, r2, r1
   19358:	lsr	r6, r3, #1
   1935c:	ldr	r5, [r0, r6, lsl #2]
   19360:	cmp	r5, r7
   19364:	addlt	r2, lr, r3, lsr #1
   19368:	movge	r1, r6
   1936c:	cmp	r2, r1
   19370:	bcc	19354 <__assert_fail@plt+0x7ea4>
   19374:	ldr	r0, [r0, r2, lsl #2]
   19378:	mov	r3, #0
   1937c:	mov	r5, r8
   19380:	cmp	r0, r7
   19384:	bne	193d8 <__assert_fail@plt+0x7f28>
   19388:	b	1956c <__assert_fail@plt+0x80bc>
   1938c:	mov	r0, #4
   19390:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   19394:	cmp	r0, #0
   19398:	beq	19ef4 <__assert_fail@plt+0x8a44>
   1939c:	mov	ip, r0
   193a0:	str	sl, [r0]
   193a4:	mov	r0, #1
   193a8:	mov	r3, #1
   193ac:	mov	lr, #1
   193b0:	str	r0, [sp, #72]	; 0x48
   193b4:	str	ip, [sp, #56]	; 0x38
   193b8:	add	r0, sl, sl, lsl #1
   193bc:	add	r1, r8, r0, lsl #2
   193c0:	ldr	sl, [r1, #4]
   193c4:	cmp	sl, #1
   193c8:	ldrge	r2, [r7, #8]
   193cc:	subsge	r2, r2, #1
   193d0:	bge	193fc <__assert_fail@plt+0x7f4c>
   193d4:	ldr	r5, [sp, #56]	; 0x38
   193d8:	ldr	r6, [sp, #68]	; 0x44
   193dc:	cmp	r6, #0
   193e0:	beq	19d8c <__assert_fail@plt+0x88dc>
   193e4:	ldr	sl, [sp, #92]	; 0x5c
   193e8:	ldr	r4, [sp, #88]	; 0x58
   193ec:	ldr	r0, [r6]
   193f0:	cmp	r0, #0
   193f4:	bne	197f8 <__assert_fail@plt+0x8348>
   193f8:	b	19cf4 <__assert_fail@plt+0x8844>
   193fc:	str	r3, [sp, #48]	; 0x30
   19400:	ldr	r1, [r1, #8]
   19404:	ldr	r3, [r7, #12]
   19408:	cmp	r2, #0
   1940c:	beq	194ac <__assert_fail@plt+0x7ffc>
   19410:	mov	r5, #0
   19414:	mvn	lr, #0
   19418:	str	ip, [sp, #52]	; 0x34
   1941c:	str	r2, [sp, #80]	; 0x50
   19420:	b	19434 <__assert_fail@plt+0x7f84>
   19424:	ldr	r2, [sp, #80]	; 0x50
   19428:	add	r5, r5, #1
   1942c:	cmp	r5, sl
   19430:	beq	1949c <__assert_fail@plt+0x7fec>
   19434:	ldr	r4, [r1, r5, lsl #2]
   19438:	mov	r7, #0
   1943c:	mov	ip, #1
   19440:	add	r6, r7, r2
   19444:	lsr	r0, r6, #1
   19448:	ldr	r9, [r3, r0, lsl #2]
   1944c:	cmp	r9, r4
   19450:	addlt	r7, ip, r6, lsr #1
   19454:	movge	r2, r0
   19458:	cmp	r7, r2
   1945c:	bcc	19440 <__assert_fail@plt+0x7f90>
   19460:	ldr	r0, [r3, r7, lsl #2]
   19464:	cmp	r0, r4
   19468:	bne	19424 <__assert_fail@plt+0x7f74>
   1946c:	cmn	lr, #1
   19470:	mov	r7, lr
   19474:	mov	lr, r4
   19478:	beq	19424 <__assert_fail@plt+0x7f74>
   1947c:	b	194f0 <__assert_fail@plt+0x8040>
   19480:	str	r2, [sp, #100]	; 0x64
   19484:	mov	r3, #0
   19488:	cmn	r7, #1
   1948c:	bgt	19574 <__assert_fail@plt+0x80c4>
   19490:	cmn	r7, #2
   19494:	bne	193d8 <__assert_fail@plt+0x7f28>
   19498:	b	19e54 <__assert_fail@plt+0x89a4>
   1949c:	ldr	ip, [sp, #52]	; 0x34
   194a0:	mov	r7, lr
   194a4:	mov	lr, #1
   194a8:	b	19564 <__assert_fail@plt+0x80b4>
   194ac:	ldr	r4, [r3]
   194b0:	mvn	r7, #0
   194b4:	ldr	r2, [r1]
   194b8:	cmp	r4, r2
   194bc:	beq	194e0 <__assert_fail@plt+0x8030>
   194c0:	mov	r2, r7
   194c4:	add	r1, r1, #4
   194c8:	subs	sl, sl, #1
   194cc:	mov	r7, r2
   194d0:	beq	19560 <__assert_fail@plt+0x80b0>
   194d4:	ldr	r2, [r1]
   194d8:	cmp	r4, r2
   194dc:	bne	194c0 <__assert_fail@plt+0x8010>
   194e0:	cmn	r7, #1
   194e4:	mov	r2, r4
   194e8:	beq	194c4 <__assert_fail@plt+0x8014>
   194ec:	str	ip, [sp, #52]	; 0x34
   194f0:	ldr	r3, [sp, #48]	; 0x30
   194f4:	ldr	sl, [sp, #68]	; 0x44
   194f8:	ldr	ip, [sp, #52]	; 0x34
   194fc:	ldr	r8, [sp, #56]	; 0x38
   19500:	mov	lr, #1
   19504:	cmp	r3, #1
   19508:	blt	195b4 <__assert_fail@plt+0x8104>
   1950c:	mov	r0, #0
   19510:	mov	r5, r8
   19514:	subs	r1, r3, #1
   19518:	beq	1953c <__assert_fail@plt+0x808c>
   1951c:	add	r2, r0, r1
   19520:	lsr	r3, r2, #1
   19524:	ldr	r6, [r5, r3, lsl #2]
   19528:	cmp	r6, r7
   1952c:	addlt	r0, lr, r2, lsr #1
   19530:	movge	r1, r3
   19534:	cmp	r0, r1
   19538:	bcc	1951c <__assert_fail@plt+0x806c>
   1953c:	ldr	r0, [r5, r0, lsl #2]
   19540:	ldr	r3, [sp, #48]	; 0x30
   19544:	cmp	r0, r7
   19548:	bne	195b4 <__assert_fail@plt+0x8104>
   1954c:	mov	r7, r4
   19550:	mov	r5, r8
   19554:	cmn	r7, #1
   19558:	bgt	19574 <__assert_fail@plt+0x80c4>
   1955c:	b	19490 <__assert_fail@plt+0x7fe0>
   19560:	mov	r7, r2
   19564:	ldr	r5, [sp, #56]	; 0x38
   19568:	ldr	r3, [sp, #48]	; 0x30
   1956c:	cmn	r7, #1
   19570:	ble	19490 <__assert_fail@plt+0x7fe0>
   19574:	ldr	r8, [fp, #20]
   19578:	ldr	r6, [sp, #68]	; 0x44
   1957c:	ldr	r4, [sp, #100]	; 0x64
   19580:	mov	sl, r7
   19584:	b	19880 <__assert_fail@plt+0x83d0>
   19588:	cmp	r7, #0
   1958c:	beq	19600 <__assert_fail@plt+0x8150>
   19590:	ldr	r0, [r4, #12]
   19594:	add	r8, r7, r8
   19598:	ldr	r5, [sp, #56]	; 0x38
   1959c:	mov	r3, #0
   195a0:	str	r8, [sp, #100]	; 0x64
   195a4:	ldr	r7, [r0, sl, lsl #2]
   195a8:	cmn	r7, #1
   195ac:	bgt	19574 <__assert_fail@plt+0x80c4>
   195b0:	b	19490 <__assert_fail@plt+0x7fe0>
   195b4:	cmp	sl, #0
   195b8:	beq	19628 <__assert_fail@plt+0x8178>
   195bc:	ldr	r6, [sl]
   195c0:	ldr	r0, [sl, #4]
   195c4:	add	r1, r6, #1
   195c8:	cmp	r1, r0
   195cc:	str	r1, [sl]
   195d0:	bne	19638 <__assert_fail@plt+0x8188>
   195d4:	ldr	r0, [sl, #8]
   195d8:	add	r1, r1, r1, lsl #1
   195dc:	lsl	r1, r1, #4
   195e0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   195e4:	cmp	r0, #0
   195e8:	beq	19e50 <__assert_fail@plt+0x89a0>
   195ec:	str	r0, [sl, #8]
   195f0:	ldr	r1, [sl, #4]
   195f4:	lsl	r1, r1, #1
   195f8:	str	r1, [sl, #4]
   195fc:	b	1963c <__assert_fail@plt+0x818c>
   19600:	ldr	r0, [sp, #72]	; 0x48
   19604:	str	r7, [sp, #80]	; 0x50
   19608:	cmp	r0, #0
   1960c:	beq	1970c <__assert_fail@plt+0x825c>
   19610:	cmp	r3, #0
   19614:	bne	199dc <__assert_fail@plt+0x852c>
   19618:	ldr	r5, [sp, #56]	; 0x38
   1961c:	mov	r2, #1
   19620:	str	sl, [r5]
   19624:	b	19738 <__assert_fail@plt+0x8288>
   19628:	mov	r5, r8
   1962c:	cmn	r7, #1
   19630:	bgt	19574 <__assert_fail@plt+0x80c4>
   19634:	b	19490 <__assert_fail@plt+0x7fe0>
   19638:	ldr	r0, [sl, #8]
   1963c:	ldr	r1, [sp, #100]	; 0x64
   19640:	add	r6, r6, r6, lsl #1
   19644:	str	r1, [r0, r6, lsl #3]!
   19648:	str	r4, [r0, #4]
   1964c:	ldr	r0, [sp, #44]	; 0x2c
   19650:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   19654:	ldr	r1, [sl, #8]
   19658:	cmp	r0, #0
   1965c:	add	r4, r1, r6, lsl #3
   19660:	str	r0, [r4, #8]!
   19664:	beq	19e48 <__assert_fail@plt+0x8998>
   19668:	ldr	r9, [sp, #76]	; 0x4c
   1966c:	ldr	r1, [fp, #20]
   19670:	mov	r2, r9
   19674:	bl	11258 <memcpy@plt>
   19678:	ldr	r0, [r4]
   1967c:	ldr	r1, [sp, #92]	; 0x5c
   19680:	mov	r2, r9
   19684:	add	r0, r0, r1, lsl #3
   19688:	ldr	r1, [sp, #84]	; 0x54
   1968c:	bl	11258 <memcpy@plt>
   19690:	ldr	r0, [sl, #8]
   19694:	ldr	r3, [sp, #48]	; 0x30
   19698:	add	r5, r0, r6, lsl #3
   1969c:	cmp	r3, #1
   196a0:	mov	r6, r5
   196a4:	str	r3, [r6, #16]!
   196a8:	sub	sl, r6, #4
   196ac:	blt	196e4 <__assert_fail@plt+0x8234>
   196b0:	lsl	r4, r3, #2
   196b4:	str	r3, [sl]
   196b8:	mov	r0, r4
   196bc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   196c0:	cmp	r0, #0
   196c4:	str	r0, [r5, #20]
   196c8:	beq	19efc <__assert_fail@plt+0x8a4c>
   196cc:	ldr	r5, [sp, #52]	; 0x34
   196d0:	mov	r2, r4
   196d4:	mov	r1, r5
   196d8:	bl	11258 <memcpy@plt>
   196dc:	mov	ip, r5
   196e0:	b	194a4 <__assert_fail@plt+0x7ff4>
   196e4:	ldr	ip, [sp, #52]	; 0x34
   196e8:	ldr	r5, [sp, #56]	; 0x38
   196ec:	mov	r0, #0
   196f0:	mov	lr, #1
   196f4:	str	r0, [sl]
   196f8:	str	r0, [sl, #4]
   196fc:	str	r0, [sl, #8]
   19700:	cmn	r7, #1
   19704:	bgt	19574 <__assert_fail@plt+0x80c4>
   19708:	b	19490 <__assert_fail@plt+0x7fe0>
   1970c:	mov	r0, #4
   19710:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   19714:	cmp	r0, #0
   19718:	beq	19ef4 <__assert_fail@plt+0x8a44>
   1971c:	mov	ip, r0
   19720:	str	sl, [r0]
   19724:	mov	r0, #1
   19728:	mov	r2, #1
   1972c:	mov	lr, #1
   19730:	str	r0, [sp, #72]	; 0x48
   19734:	mov	r5, ip
   19738:	ldr	r0, [sp, #204]	; 0xcc
   1973c:	ldr	r0, [r0, r8, lsl #2]
   19740:	ldr	r1, [r0, #8]
   19744:	cmp	r1, #1
   19748:	blt	192c4 <__assert_fail@plt+0x7e14>
   1974c:	mov	r9, r2
   19750:	ldr	r2, [r4, #20]
   19754:	add	r3, sl, sl, lsl #1
   19758:	mov	r8, ip
   1975c:	ldr	ip, [r0, #12]
   19760:	add	r2, r2, r3, lsl #2
   19764:	ldr	r2, [r2, #8]
   19768:	ldr	r7, [r2]
   1976c:	subs	r2, r1, #1
   19770:	mov	r1, #0
   19774:	beq	19798 <__assert_fail@plt+0x82e8>
   19778:	add	r3, r1, r2
   1977c:	lsr	r6, r3, #1
   19780:	ldr	r0, [ip, r6, lsl #2]
   19784:	cmp	r0, r7
   19788:	addlt	r1, lr, r3, lsr #1
   1978c:	movge	r2, r6
   19790:	cmp	r1, r2
   19794:	bcc	19778 <__assert_fail@plt+0x82c8>
   19798:	ldr	r0, [ip, r1, lsl #2]
   1979c:	ldr	r1, [sp, #80]	; 0x50
   197a0:	cmp	r0, r7
   197a4:	bne	192b8 <__assert_fail@plt+0x7e08>
   197a8:	mov	ip, r8
   197ac:	mov	r3, r9
   197b0:	cmn	r7, #1
   197b4:	bgt	19574 <__assert_fail@plt+0x80c4>
   197b8:	b	19490 <__assert_fail@plt+0x7fe0>
   197bc:	ldr	r0, [r4, #12]
   197c0:	add	r8, r7, r8
   197c4:	ldr	ip, [sp, #52]	; 0x34
   197c8:	ldr	r5, [sp, #56]	; 0x38
   197cc:	mov	lr, #1
   197d0:	mov	r2, r8
   197d4:	ldr	r7, [r0, sl, lsl #2]
   197d8:	ldr	r0, [sp, #196]	; 0xc4
   197dc:	ldr	r4, [sp, #88]	; 0x58
   197e0:	cmp	r2, r0
   197e4:	ble	1931c <__assert_fail@plt+0x7e6c>
   197e8:	ldr	sl, [sp, #92]	; 0x5c
   197ec:	ldr	r0, [r6]
   197f0:	cmp	r0, #0
   197f4:	beq	19cf4 <__assert_fail@plt+0x8844>
   197f8:	sub	r0, r0, #1
   197fc:	ldr	r7, [sp, #76]	; 0x4c
   19800:	ldr	r8, [fp, #20]
   19804:	mov	r9, ip
   19808:	str	r0, [r6]
   1980c:	add	r5, r0, r0, lsl #1
   19810:	ldr	r4, [r6, #8]
   19814:	mov	r2, r7
   19818:	ldr	r0, [r4, r5, lsl #3]!
   1981c:	ldr	r1, [r4, #8]
   19820:	str	r0, [sp, #100]	; 0x64
   19824:	mov	r0, r8
   19828:	bl	11258 <memcpy@plt>
   1982c:	ldr	r0, [r4, #8]
   19830:	mov	r2, r7
   19834:	add	r1, r0, sl, lsl #3
   19838:	ldr	r0, [sp, #84]	; 0x54
   1983c:	bl	11258 <memcpy@plt>
   19840:	ldr	r4, [sp, #100]	; 0x64
   19844:	mov	r0, r9
   19848:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1984c:	ldr	r0, [r6, #8]
   19850:	add	r0, r0, r5, lsl #3
   19854:	ldr	r0, [r0, #8]
   19858:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1985c:	ldr	r0, [r6, #8]
   19860:	mov	lr, #1
   19864:	add	r0, r0, r5, lsl #3
   19868:	ldr	ip, [r0, #20]
   1986c:	ldr	r1, [r0, #12]
   19870:	ldr	sl, [r0, #4]
   19874:	ldr	r3, [r0, #16]
   19878:	mov	r5, ip
   1987c:	str	r1, [sp, #72]	; 0x48
   19880:	ldr	r0, [r8, #4]
   19884:	ldr	r9, [sp, #96]	; 0x60
   19888:	ldr	r7, [sp, #60]	; 0x3c
   1988c:	cmp	r4, r0
   19890:	ble	18f14 <__assert_fail@plt+0x7a64>
   19894:	b	18e58 <__assert_fail@plt+0x79a8>
   19898:	ldr	r0, [sp, #72]	; 0x48
   1989c:	str	r8, [sp, #52]	; 0x34
   198a0:	mov	r4, ip
   198a4:	mov	r8, r3
   198a8:	str	r7, [sp, #80]	; 0x50
   198ac:	cmp	r0, r3
   198b0:	bne	198e4 <__assert_fail@plt+0x8434>
   198b4:	ldr	r0, [sp, #72]	; 0x48
   198b8:	lsl	r1, r0, #3
   198bc:	mov	r0, r4
   198c0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   198c4:	ldr	r5, [sp, #56]	; 0x38
   198c8:	cmp	r0, #0
   198cc:	beq	19e54 <__assert_fail@plt+0x89a4>
   198d0:	ldr	r1, [sp, #72]	; 0x48
   198d4:	mov	r4, r0
   198d8:	str	r0, [sp, #56]	; 0x38
   198dc:	lsl	r1, r1, #1
   198e0:	str	r1, [sp, #72]	; 0x48
   198e4:	ldr	r0, [sp, #56]	; 0x38
   198e8:	ldr	r0, [r0]
   198ec:	cmp	r0, sl
   198f0:	ble	19980 <__assert_fail@plt+0x84d0>
   198f4:	mov	ip, r8
   198f8:	cmp	r8, #1
   198fc:	blt	199b8 <__assert_fail@plt+0x8508>
   19900:	mov	r0, r8
   19904:	ands	r1, r8, #3
   19908:	sub	r2, r8, #1
   1990c:	beq	1993c <__assert_fail@plt+0x848c>
   19910:	ldr	r0, [sp, #56]	; 0x38
   19914:	mov	r3, r8
   19918:	add	r7, r0, r8, lsl #2
   1991c:	mov	r0, r8
   19920:	mov	r3, r7
   19924:	ldr	r6, [r3, #-4]!
   19928:	subs	r1, r1, #1
   1992c:	sub	r0, r0, #1
   19930:	str	r6, [r7]
   19934:	mov	r7, r3
   19938:	bne	19924 <__assert_fail@plt+0x8474>
   1993c:	mov	ip, #0
   19940:	cmp	r2, #3
   19944:	bcc	199b8 <__assert_fail@plt+0x8508>
   19948:	ldr	r1, [sp, #56]	; 0x38
   1994c:	add	r2, r1, r0, lsl #2
   19950:	sub	r2, r2, #8
   19954:	ldr	r6, [r2]
   19958:	ldr	r1, [r2, #4]
   1995c:	ldmdb	r2, {r3, r7}
   19960:	sub	r0, r0, #4
   19964:	cmp	r0, #0
   19968:	stmda	r2, {r3, r7}
   1996c:	str	r6, [r2, #4]
   19970:	str	r1, [r2, #8]
   19974:	sub	r2, r2, #16
   19978:	bgt	19954 <__assert_fail@plt+0x84a4>
   1997c:	b	199b8 <__assert_fail@plt+0x8508>
   19980:	ldr	r0, [sp, #56]	; 0x38
   19984:	mov	ip, r8
   19988:	add	r0, r0, r8, lsl #2
   1998c:	ldr	r2, [r0, #-4]
   19990:	cmp	r2, sl
   19994:	ble	199b8 <__assert_fail@plt+0x8508>
   19998:	sub	r1, r8, #2
   1999c:	str	r2, [r0]
   199a0:	sub	r1, r1, #1
   199a4:	ldr	r2, [r0, #-8]
   199a8:	sub	r0, r0, #4
   199ac:	cmp	r2, sl
   199b0:	bgt	1999c <__assert_fail@plt+0x84ec>
   199b4:	add	ip, r1, #2
   199b8:	ldr	r0, [sp, #56]	; 0x38
   199bc:	mov	r3, r8
   199c0:	add	r3, r8, #1
   199c4:	ldr	r7, [sp, #80]	; 0x50
   199c8:	ldr	r8, [sp, #52]	; 0x34
   199cc:	mov	lr, #1
   199d0:	str	sl, [r0, ip, lsl #2]
   199d4:	mov	ip, r4
   199d8:	b	193b8 <__assert_fail@plt+0x7f08>
   199dc:	ldr	r0, [sp, #72]	; 0x48
   199e0:	ldr	r5, [sp, #56]	; 0x38
   199e4:	mov	r8, ip
   199e8:	mov	r9, r3
   199ec:	cmp	r0, r3
   199f0:	bne	19a20 <__assert_fail@plt+0x8570>
   199f4:	ldr	r0, [sp, #72]	; 0x48
   199f8:	lsl	r1, r0, #3
   199fc:	mov	r0, r8
   19a00:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   19a04:	cmp	r0, #0
   19a08:	beq	19e54 <__assert_fail@plt+0x89a4>
   19a0c:	ldr	r1, [sp, #72]	; 0x48
   19a10:	mov	r8, r0
   19a14:	mov	r5, r0
   19a18:	lsl	r1, r1, #1
   19a1c:	str	r1, [sp, #72]	; 0x48
   19a20:	ldr	r0, [r5]
   19a24:	mov	ip, r9
   19a28:	cmp	r0, sl
   19a2c:	ble	19aac <__assert_fail@plt+0x85fc>
   19a30:	cmp	r9, #1
   19a34:	blt	19adc <__assert_fail@plt+0x862c>
   19a38:	mov	r0, r9
   19a3c:	ands	r1, r9, #3
   19a40:	sub	r2, r9, #1
   19a44:	beq	19a6c <__assert_fail@plt+0x85bc>
   19a48:	add	r7, r5, r9, lsl #2
   19a4c:	mov	r0, r9
   19a50:	mov	r3, r7
   19a54:	ldr	r6, [r3, #-4]!
   19a58:	subs	r1, r1, #1
   19a5c:	sub	r0, r0, #1
   19a60:	str	r6, [r7]
   19a64:	mov	r7, r3
   19a68:	bne	19a54 <__assert_fail@plt+0x85a4>
   19a6c:	mov	ip, #0
   19a70:	cmp	r2, #3
   19a74:	bcc	19adc <__assert_fail@plt+0x862c>
   19a78:	add	r2, r5, r0, lsl #2
   19a7c:	sub	r2, r2, #8
   19a80:	ldr	r6, [r2]
   19a84:	ldr	r1, [r2, #4]
   19a88:	ldmdb	r2, {r3, r7}
   19a8c:	sub	r0, r0, #4
   19a90:	cmp	r0, #0
   19a94:	stmda	r2, {r3, r7}
   19a98:	str	r6, [r2, #4]
   19a9c:	str	r1, [r2, #8]
   19aa0:	sub	r2, r2, #16
   19aa4:	bgt	19a80 <__assert_fail@plt+0x85d0>
   19aa8:	b	19adc <__assert_fail@plt+0x862c>
   19aac:	add	r0, r5, r9, lsl #2
   19ab0:	ldr	r2, [r0, #-4]
   19ab4:	cmp	r2, sl
   19ab8:	ble	19adc <__assert_fail@plt+0x862c>
   19abc:	sub	r1, r9, #2
   19ac0:	str	r2, [r0]
   19ac4:	sub	r1, r1, #1
   19ac8:	ldr	r2, [r0, #-8]
   19acc:	sub	r0, r0, #4
   19ad0:	cmp	r2, sl
   19ad4:	bgt	19ac0 <__assert_fail@plt+0x8610>
   19ad8:	add	ip, r1, #2
   19adc:	str	sl, [r5, ip, lsl #2]
   19ae0:	mov	ip, r8
   19ae4:	ldr	r8, [sp, #100]	; 0x64
   19ae8:	mov	r2, r9
   19aec:	add	r2, r9, #1
   19af0:	mov	lr, #1
   19af4:	b	19738 <__assert_fail@plt+0x8288>
   19af8:	mov	r0, ip
   19afc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19b00:	ldr	r0, [fp, #-184]	; 0xffffff48
   19b04:	cmp	r0, r4
   19b08:	beq	19b10 <__assert_fail@plt+0x8660>
   19b0c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19b10:	mov	r0, #16
   19b14:	str	r4, [fp, #-184]	; 0xffffff48
   19b18:	cmp	r6, #0
   19b1c:	str	r0, [fp, #-188]	; 0xffffff44
   19b20:	mov	r0, #0
   19b24:	str	r0, [fp, #-192]	; 0xffffff40
   19b28:	beq	19b80 <__assert_fail@plt+0x86d0>
   19b2c:	ldr	r1, [r6]
   19b30:	ldr	r0, [r6, #8]
   19b34:	cmp	r1, #1
   19b38:	blt	19b78 <__assert_fail@plt+0x86c8>
   19b3c:	mov	r4, #0
   19b40:	mov	r5, #0
   19b44:	add	r0, r0, r4
   19b48:	ldr	r0, [r0, #20]
   19b4c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19b50:	ldr	r0, [r6, #8]
   19b54:	add	r0, r0, r4
   19b58:	ldr	r0, [r0, #8]
   19b5c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19b60:	ldr	r1, [r6]
   19b64:	ldr	r0, [r6, #8]
   19b68:	add	r5, r5, #1
   19b6c:	add	r4, r4, #24
   19b70:	cmp	r5, r1
   19b74:	blt	19b44 <__assert_fail@plt+0x8694>
   19b78:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19b7c:	ldr	r8, [fp, #20]
   19b80:	ldrb	r0, [sp, #180]	; 0xb4
   19b84:	cmp	r0, #0
   19b88:	bne	19dc4 <__assert_fail@plt+0x8914>
   19b8c:	ldr	r1, [fp, #-200]	; 0xffffff38
   19b90:	ldr	r2, [sp, #92]	; 0x5c
   19b94:	ldr	r5, [sp, #32]
   19b98:	add	r0, r8, #4
   19b9c:	ldr	r3, [r0, #-4]
   19ba0:	cmn	r3, #1
   19ba4:	bne	19bc0 <__assert_fail@plt+0x8710>
   19ba8:	add	r0, r0, #8
   19bac:	subs	r2, r2, #1
   19bb0:	beq	19be0 <__assert_fail@plt+0x8730>
   19bb4:	ldr	r3, [r0, #-4]
   19bb8:	cmn	r3, #1
   19bbc:	beq	19ba8 <__assert_fail@plt+0x86f8>
   19bc0:	add	r3, r3, r1
   19bc4:	str	r3, [r0, #-4]
   19bc8:	ldr	r3, [r0]
   19bcc:	add	r3, r3, r1
   19bd0:	str	r3, [r0]
   19bd4:	add	r0, r0, #8
   19bd8:	subs	r2, r2, #1
   19bdc:	bne	19bb4 <__assert_fail@plt+0x8704>
   19be0:	cmp	r5, #1
   19be4:	blt	19bfc <__assert_fail@plt+0x874c>
   19be8:	ldr	r0, [sp, #92]	; 0x5c
   19bec:	lsl	r2, r5, #3
   19bf0:	mov	r1, #255	; 0xff
   19bf4:	add	r0, r8, r0, lsl #3
   19bf8:	bl	113cc <memset@plt>
   19bfc:	ldr	r0, [r9, #132]	; 0x84
   19c00:	mov	r8, #0
   19c04:	cmp	r0, #0
   19c08:	beq	19c84 <__assert_fail@plt+0x87d4>
   19c0c:	ldr	r1, [sp, #92]	; 0x5c
   19c10:	cmp	r1, #2
   19c14:	bcc	19c84 <__assert_fail@plt+0x87d4>
   19c18:	ldr	r1, [sp, #32]
   19c1c:	ldr	r2, [fp, #16]
   19c20:	ldr	r6, [fp, #20]
   19c24:	mvn	r1, r1
   19c28:	add	r1, r1, r2
   19c2c:	mov	r2, #0
   19c30:	ldr	r3, [r0, r2, lsl #2]
   19c34:	cmp	r2, r3
   19c38:	bne	19c54 <__assert_fail@plt+0x87a4>
   19c3c:	add	r2, r2, #1
   19c40:	cmp	r1, r2
   19c44:	beq	19c80 <__assert_fail@plt+0x87d0>
   19c48:	ldr	r3, [r0, r2, lsl #2]
   19c4c:	cmp	r2, r3
   19c50:	beq	19c3c <__assert_fail@plt+0x878c>
   19c54:	add	r3, r6, r3, lsl #3
   19c58:	add	r7, r6, r2, lsl #3
   19c5c:	ldr	r3, [r3, #8]
   19c60:	str	r3, [r7, #8]
   19c64:	ldr	r3, [r0, r2, lsl #2]
   19c68:	add	r3, r6, r3, lsl #3
   19c6c:	ldr	r3, [r3, #12]
   19c70:	str	r3, [r7, #12]
   19c74:	add	r2, r2, #1
   19c78:	cmp	r1, r2
   19c7c:	bne	19c48 <__assert_fail@plt+0x8798>
   19c80:	mov	r8, #0
   19c84:	ldr	r0, [sp, #204]	; 0xcc
   19c88:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19c8c:	ldr	r0, [sp, #96]	; 0x60
   19c90:	ldr	r0, [r0, #76]	; 0x4c
   19c94:	cmp	r0, #0
   19c98:	beq	19cb4 <__assert_fail@plt+0x8804>
   19c9c:	add	r0, sp, #104	; 0x68
   19ca0:	bl	224b4 <__assert_fail@plt+0x11004>
   19ca4:	ldr	r0, [sp, #236]	; 0xec
   19ca8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19cac:	ldr	r0, [sp, #220]	; 0xdc
   19cb0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19cb4:	ldr	r0, [sp, #112]	; 0x70
   19cb8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19cbc:	ldr	r0, [sp, #116]	; 0x74
   19cc0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19cc4:	ldrb	r0, [sp, #179]	; 0xb3
   19cc8:	cmp	r0, #0
   19ccc:	beq	19cd8 <__assert_fail@plt+0x8828>
   19cd0:	ldr	r0, [sp, #108]	; 0x6c
   19cd4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19cd8:	mov	r0, r8
   19cdc:	sub	sp, fp, #28
   19ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ce4:	mov	r6, #0
   19ce8:	b	17740 <__assert_fail@plt+0x6290>
   19cec:	mov	r8, #12
   19cf0:	b	19c84 <__assert_fail@plt+0x87d4>
   19cf4:	mov	r0, r5
   19cf8:	mov	r5, #0
   19cfc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19d00:	ldr	r0, [fp, #-184]	; 0xffffff48
   19d04:	cmp	r0, r4
   19d08:	beq	19d10 <__assert_fail@plt+0x8860>
   19d0c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19d10:	mov	r0, #16
   19d14:	str	r4, [fp, #-184]	; 0xffffff48
   19d18:	mov	r8, #1
   19d1c:	cmp	r5, #0
   19d20:	str	r0, [fp, #-188]	; 0xffffff44
   19d24:	mov	r0, #0
   19d28:	str	r0, [fp, #-192]	; 0xffffff40
   19d2c:	bne	19c84 <__assert_fail@plt+0x87d4>
   19d30:	ldr	r1, [r6]
   19d34:	ldr	r0, [r6, #8]
   19d38:	cmp	r1, #1
   19d3c:	blt	19d7c <__assert_fail@plt+0x88cc>
   19d40:	mov	r5, #0
   19d44:	mov	r4, #0
   19d48:	add	r0, r0, r5
   19d4c:	ldr	r0, [r0, #20]
   19d50:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19d54:	ldr	r0, [r6, #8]
   19d58:	add	r0, r0, r5
   19d5c:	ldr	r0, [r0, #8]
   19d60:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19d64:	ldr	r1, [r6]
   19d68:	ldr	r0, [r6, #8]
   19d6c:	add	r4, r4, #1
   19d70:	add	r5, r5, #24
   19d74:	cmp	r4, r1
   19d78:	blt	19d48 <__assert_fail@plt+0x8898>
   19d7c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19d80:	b	19c84 <__assert_fail@plt+0x87d4>
   19d84:	mov	r8, r0
   19d88:	b	19c84 <__assert_fail@plt+0x87d4>
   19d8c:	ldr	r4, [sp, #88]	; 0x58
   19d90:	mov	r0, r5
   19d94:	mov	r5, #1
   19d98:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19d9c:	ldr	r0, [fp, #-184]	; 0xffffff48
   19da0:	cmp	r0, r4
   19da4:	bne	19d0c <__assert_fail@plt+0x885c>
   19da8:	b	19d10 <__assert_fail@plt+0x8860>
   19dac:	mov	r0, r6
   19db0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19db4:	mov	r0, #0
   19db8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19dbc:	mov	r8, #12
   19dc0:	b	19c84 <__assert_fail@plt+0x87d4>
   19dc4:	ldr	r1, [sp, #92]	; 0x5c
   19dc8:	ldr	r5, [sp, #32]
   19dcc:	add	r0, r8, #4
   19dd0:	ldr	r2, [r0, #-4]
   19dd4:	cmn	r2, #1
   19dd8:	bne	19df4 <__assert_fail@plt+0x8944>
   19ddc:	add	r0, r0, #8
   19de0:	subs	r1, r1, #1
   19de4:	beq	19be0 <__assert_fail@plt+0x8730>
   19de8:	ldr	r2, [r0, #-4]
   19dec:	cmn	r2, #1
   19df0:	beq	19ddc <__assert_fail@plt+0x892c>
   19df4:	ldr	r3, [sp, #132]	; 0x84
   19df8:	ldr	r7, [sp, #24]
   19dfc:	ldr	ip, [sp, #116]	; 0x74
   19e00:	cmp	r2, r3
   19e04:	mov	r6, r7
   19e08:	addne	r6, ip, r2, lsl #2
   19e0c:	ldr	r2, [r6]
   19e10:	str	r2, [r0, #-4]
   19e14:	ldr	r6, [r0]
   19e18:	cmp	r6, r3
   19e1c:	addne	r7, ip, r6, lsl #2
   19e20:	ldr	r3, [r7]
   19e24:	ldr	r7, [fp, #-200]	; 0xffffff38
   19e28:	add	r3, r3, r7
   19e2c:	add	r2, r2, r7
   19e30:	str	r3, [r0]
   19e34:	str	r2, [r0, #-4]
   19e38:	add	r0, r0, #8
   19e3c:	subs	r1, r1, #1
   19e40:	bne	19de8 <__assert_fail@plt+0x8938>
   19e44:	b	19be0 <__assert_fail@plt+0x8730>
   19e48:	ldr	r5, [sp, #56]	; 0x38
   19e4c:	b	19e54 <__assert_fail@plt+0x89a4>
   19e50:	mov	r5, r8
   19e54:	mov	r0, r5
   19e58:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19e5c:	ldr	r0, [fp, #-184]	; 0xffffff48
   19e60:	ldr	r4, [sp, #88]	; 0x58
   19e64:	cmp	r0, r4
   19e68:	beq	19e70 <__assert_fail@plt+0x89c0>
   19e6c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19e70:	mov	r0, #16
   19e74:	str	r4, [fp, #-184]	; 0xffffff48
   19e78:	mov	r8, #12
   19e7c:	str	r0, [fp, #-188]	; 0xffffff44
   19e80:	mov	r0, #0
   19e84:	str	r0, [fp, #-192]	; 0xffffff40
   19e88:	ldr	r0, [sp, #68]	; 0x44
   19e8c:	cmp	r0, #0
   19e90:	beq	19c84 <__assert_fail@plt+0x87d4>
   19e94:	ldr	r0, [sp, #68]	; 0x44
   19e98:	ldr	r1, [r0]
   19e9c:	mov	r4, r0
   19ea0:	ldr	r0, [r0, #8]
   19ea4:	cmp	r1, #1
   19ea8:	blt	19d7c <__assert_fail@plt+0x88cc>
   19eac:	mov	r5, #0
   19eb0:	mov	r6, #0
   19eb4:	add	r0, r0, r5
   19eb8:	ldr	r0, [r0, #20]
   19ebc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19ec0:	ldr	r0, [r4, #8]
   19ec4:	add	r0, r0, r5
   19ec8:	ldr	r0, [r0, #8]
   19ecc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   19ed0:	ldr	r1, [r4]
   19ed4:	ldr	r0, [r4, #8]
   19ed8:	add	r6, r6, #1
   19edc:	add	r5, r5, #24
   19ee0:	cmp	r6, r1
   19ee4:	blt	19eb4 <__assert_fail@plt+0x8a04>
   19ee8:	b	19d7c <__assert_fail@plt+0x88cc>
   19eec:	mov	r8, #1
   19ef0:	b	19c84 <__assert_fail@plt+0x87d4>
   19ef4:	mov	r5, #0
   19ef8:	b	19e54 <__assert_fail@plt+0x89a4>
   19efc:	ldr	r5, [sp, #56]	; 0x38
   19f00:	mov	r0, #0
   19f04:	str	r0, [r6]
   19f08:	str	r0, [sl]
   19f0c:	b	19e54 <__assert_fail@plt+0x89a4>
   19f10:	push	{fp, lr}
   19f14:	mov	fp, sp
   19f18:	sub	sp, sp, #16
   19f1c:	mov	ip, #1
   19f20:	str	r2, [sp, #4]
   19f24:	str	ip, [sp, #12]
   19f28:	mov	ip, #0
   19f2c:	str	ip, [sp]
   19f30:	ldr	ip, [fp, #8]
   19f34:	str	ip, [sp, #8]
   19f38:	bl	19f44 <__assert_fail@plt+0x8a94>
   19f3c:	mov	sp, fp
   19f40:	pop	{fp, pc}
   19f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f48:	add	fp, sp, #28
   19f4c:	sub	sp, sp, #60	; 0x3c
   19f50:	mvn	r4, #0
   19f54:	cmp	r3, #0
   19f58:	bmi	1a17c <__assert_fail@plt+0x8ccc>
   19f5c:	mov	r6, r3
   19f60:	mov	r7, r2
   19f64:	cmp	r3, r2
   19f68:	bgt	1a17c <__assert_fail@plt+0x8ccc>
   19f6c:	mov	r5, r0
   19f70:	ldr	r0, [fp, #8]
   19f74:	str	r1, [sp, #44]	; 0x2c
   19f78:	movw	r1, #0
   19f7c:	mov	r8, r7
   19f80:	ldr	r4, [r5]
   19f84:	movt	r1, #0
   19f88:	add	r0, r0, r6
   19f8c:	cmp	r0, r7
   19f90:	bicle	r8, r0, r0, asr #31
   19f94:	movw	r0, #0
   19f98:	movt	r0, #0
   19f9c:	orrs	r9, r1, r0
   19fa0:	beq	19fac <__assert_fail@plt+0x8afc>
   19fa4:	add	r0, r4, #136	; 0x88
   19fa8:	bl	11240 <pthread_mutex_lock@plt>
   19fac:	ldrb	r0, [r5, #28]
   19fb0:	ldr	r2, [fp, #16]
   19fb4:	cmp	r8, r6
   19fb8:	ubfx	r1, r0, #5, #2
   19fbc:	str	r4, [sp, #36]	; 0x24
   19fc0:	str	r6, [fp, #-36]	; 0xffffffdc
   19fc4:	str	r1, [sp, #40]	; 0x28
   19fc8:	ble	1a068 <__assert_fail@plt+0x8bb8>
   19fcc:	tst	r0, #8
   19fd0:	bne	1a068 <__assert_fail@plt+0x8bb8>
   19fd4:	ldr	r6, [r5, #16]
   19fd8:	cmp	r6, #0
   19fdc:	beq	1a068 <__assert_fail@plt+0x8bb8>
   19fe0:	ldr	r4, [r5]
   19fe4:	mov	sl, r2
   19fe8:	mov	r0, r6
   19fec:	mov	r1, #0
   19ff0:	mov	r2, #256	; 0x100
   19ff4:	bl	113cc <memset@plt>
   19ff8:	ldr	r1, [r4, #36]	; 0x24
   19ffc:	mov	r0, r5
   1a000:	mov	r2, r6
   1a004:	bl	16634 <__assert_fail@plt+0x5184>
   1a008:	ldr	r0, [r4, #36]	; 0x24
   1a00c:	ldr	r1, [r4, #40]	; 0x28
   1a010:	cmp	r0, r1
   1a014:	beq	1a028 <__assert_fail@plt+0x8b78>
   1a018:	mov	r0, r5
   1a01c:	mov	r2, r6
   1a020:	bl	16634 <__assert_fail@plt+0x5184>
   1a024:	ldr	r0, [r4, #36]	; 0x24
   1a028:	ldr	r1, [r4, #44]	; 0x2c
   1a02c:	cmp	r0, r1
   1a030:	beq	1a044 <__assert_fail@plt+0x8b94>
   1a034:	mov	r0, r5
   1a038:	mov	r2, r6
   1a03c:	bl	16634 <__assert_fail@plt+0x5184>
   1a040:	ldr	r0, [r4, #36]	; 0x24
   1a044:	ldr	r1, [r4, #48]	; 0x30
   1a048:	cmp	r0, r1
   1a04c:	movne	r0, r5
   1a050:	movne	r2, r6
   1a054:	blne	16634 <__assert_fail@plt+0x5184>
   1a058:	ldrb	r0, [r5, #28]
   1a05c:	mov	r2, sl
   1a060:	orr	r0, r0, #8
   1a064:	strb	r0, [r5, #28]
   1a068:	str	r9, [fp, #-40]	; 0xffffffd8
   1a06c:	mov	sl, #1
   1a070:	mov	r9, #0
   1a074:	cmp	r2, #0
   1a078:	str	r5, [fp, #-32]	; 0xffffffe0
   1a07c:	beq	1a0d0 <__assert_fail@plt+0x8c20>
   1a080:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1a084:	ands	r1, r0, #16
   1a088:	bne	1a108 <__assert_fail@plt+0x8c58>
   1a08c:	and	r0, r0, #6
   1a090:	cmp	r0, #4
   1a094:	bne	1a0f8 <__assert_fail@plt+0x8c48>
   1a098:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a09c:	ldr	sl, [r2]
   1a0a0:	ldr	r0, [r0, #24]
   1a0a4:	cmp	sl, r0
   1a0a8:	bhi	1a100 <__assert_fail@plt+0x8c50>
   1a0ac:	cmp	sl, #1
   1a0b0:	bge	1a104 <__assert_fail@plt+0x8c54>
   1a0b4:	mov	sl, #1
   1a0b8:	mov	r9, #0
   1a0bc:	lsl	r0, sl, #3
   1a0c0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a0c4:	cmp	r0, #0
   1a0c8:	bne	1a118 <__assert_fail@plt+0x8c68>
   1a0cc:	b	1a0e4 <__assert_fail@plt+0x8c34>
   1a0d0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1a0d4:	lsl	r0, sl, #3
   1a0d8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a0dc:	cmp	r0, #0
   1a0e0:	bne	1a118 <__assert_fail@plt+0x8c68>
   1a0e4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1a0e8:	mvn	r4, #1
   1a0ec:	cmp	r5, #0
   1a0f0:	bne	1a170 <__assert_fail@plt+0x8cc0>
   1a0f4:	b	1a17c <__assert_fail@plt+0x8ccc>
   1a0f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a0fc:	ldr	r0, [r0, #24]
   1a100:	add	sl, r0, #1
   1a104:	mov	r9, r2
   1a108:	lsl	r0, sl, #3
   1a10c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a110:	cmp	r0, #0
   1a114:	beq	1a0e4 <__assert_fail@plt+0x8c34>
   1a118:	mov	r6, r0
   1a11c:	ldr	r0, [fp, #12]
   1a120:	str	r8, [sp]
   1a124:	ldr	r1, [sp, #44]	; 0x2c
   1a128:	mov	r2, r7
   1a12c:	mov	r3, r4
   1a130:	stmib	sp, {r0, sl}
   1a134:	ldr	r0, [sp, #40]	; 0x28
   1a138:	str	r6, [sp, #12]
   1a13c:	str	r0, [sp, #16]
   1a140:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a144:	bl	17660 <__assert_fail@plt+0x61b0>
   1a148:	cmp	r0, #0
   1a14c:	beq	1a188 <__assert_fail@plt+0x8cd8>
   1a150:	cmp	r0, #1
   1a154:	mvn	r4, #1
   1a158:	mvneq	r4, #0
   1a15c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1a160:	mov	r0, r6
   1a164:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a168:	cmp	r5, #0
   1a16c:	beq	1a17c <__assert_fail@plt+0x8ccc>
   1a170:	ldr	r0, [sp, #36]	; 0x24
   1a174:	add	r0, r0, #136	; 0x88
   1a178:	bl	111a4 <pthread_mutex_unlock@plt>
   1a17c:	mov	r0, r4
   1a180:	sub	sp, fp, #28
   1a184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a188:	cmp	r9, #0
   1a18c:	beq	1a470 <__assert_fail@plt+0x8fc0>
   1a190:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a194:	add	r8, sl, #1
   1a198:	ldrb	r0, [r0, #28]
   1a19c:	ubfx	r0, r0, #1, #2
   1a1a0:	cmp	r0, #1
   1a1a4:	beq	1a1f4 <__assert_fail@plt+0x8d44>
   1a1a8:	cmp	r0, #0
   1a1ac:	bne	1a220 <__assert_fail@plt+0x8d70>
   1a1b0:	lsl	r5, r8, #2
   1a1b4:	mov	r0, r5
   1a1b8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a1bc:	mov	r7, #0
   1a1c0:	cmp	r0, #0
   1a1c4:	str	r0, [r9, #4]
   1a1c8:	beq	1a454 <__assert_fail@plt+0x8fa4>
   1a1cc:	mov	r0, r5
   1a1d0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a1d4:	cmp	r0, #0
   1a1d8:	str	r0, [r9, #8]
   1a1dc:	beq	1a4f0 <__assert_fail@plt+0x9040>
   1a1e0:	str	r8, [r9]
   1a1e4:	mov	lr, #1
   1a1e8:	cmp	sl, #1
   1a1ec:	bge	1a230 <__assert_fail@plt+0x8d80>
   1a1f0:	b	1a210 <__assert_fail@plt+0x8d60>
   1a1f4:	ldr	r0, [r9]
   1a1f8:	mov	lr, #1
   1a1fc:	cmp	r8, r0
   1a200:	bhi	1a498 <__assert_fail@plt+0x8fe8>
   1a204:	mov	r8, r0
   1a208:	cmp	sl, #1
   1a20c:	bge	1a230 <__assert_fail@plt+0x8d80>
   1a210:	mov	sl, #0
   1a214:	cmp	sl, r8
   1a218:	bcc	1a430 <__assert_fail@plt+0x8f80>
   1a21c:	b	1a450 <__assert_fail@plt+0x8fa0>
   1a220:	ldr	r8, [r9]
   1a224:	mov	lr, #2
   1a228:	cmp	sl, #1
   1a22c:	blt	1a210 <__assert_fail@plt+0x8d60>
   1a230:	ldr	r5, [r9, #4]
   1a234:	ldr	r4, [r9, #8]
   1a238:	mov	r2, #0
   1a23c:	cmp	sl, #3
   1a240:	str	r6, [sp, #44]	; 0x2c
   1a244:	bhi	1a2d8 <__assert_fail@plt+0x8e28>
   1a248:	tst	sl, #1
   1a24c:	mov	r3, r2
   1a250:	beq	1a26c <__assert_fail@plt+0x8dbc>
   1a254:	ldr	r0, [sp, #44]	; 0x2c
   1a258:	orr	r3, r2, #1
   1a25c:	ldr	r1, [r0, r2, lsl #3]!
   1a260:	str	r1, [r5, r2, lsl #2]
   1a264:	ldr	r0, [r0, #4]
   1a268:	str	r0, [r4, r2, lsl #2]
   1a26c:	orr	r0, r2, #1
   1a270:	cmp	sl, r0
   1a274:	beq	1a41c <__assert_fail@plt+0x8f6c>
   1a278:	ldr	r7, [sp, #44]	; 0x2c
   1a27c:	add	r2, r3, #1
   1a280:	sub	r0, sl, r3
   1a284:	mov	r6, #0
   1a288:	add	r1, r5, r2, lsl #2
   1a28c:	add	r2, r4, r2, lsl #2
   1a290:	add	ip, r7, r3, lsl #3
   1a294:	add	r7, ip, #12
   1a298:	ldr	r4, [r7, #-12]
   1a29c:	add	r5, r1, r6
   1a2a0:	subs	r0, r0, #2
   1a2a4:	str	r4, [r5, #-4]
   1a2a8:	add	r4, ip, r6, lsl #1
   1a2ac:	add	r5, r2, r6
   1a2b0:	ldr	r3, [r4, #4]
   1a2b4:	str	r3, [r5, #-4]
   1a2b8:	ldr	r3, [r4, #8]
   1a2bc:	str	r3, [r1, r6]
   1a2c0:	ldr	r3, [r7]
   1a2c4:	add	r7, r7, #16
   1a2c8:	str	r3, [r2, r6]
   1a2cc:	add	r6, r6, #8
   1a2d0:	bne	1a298 <__assert_fail@plt+0x8de8>
   1a2d4:	b	1a41c <__assert_fail@plt+0x8f6c>
   1a2d8:	ldr	r0, [sp, #44]	; 0x2c
   1a2dc:	str	lr, [sp, #40]	; 0x28
   1a2e0:	add	lr, r4, sl, lsl #2
   1a2e4:	add	r6, r5, sl, lsl #2
   1a2e8:	mov	r8, #0
   1a2ec:	mov	r1, #0
   1a2f0:	mov	r3, #0
   1a2f4:	mov	r2, #0
   1a2f8:	add	r7, r0, sl, lsl #3
   1a2fc:	cmp	r0, lr
   1a300:	movwcc	r8, #1
   1a304:	cmp	r7, r4
   1a308:	movwhi	r1, #1
   1a30c:	cmp	r0, r6
   1a310:	mov	r0, #0
   1a314:	movwcc	r3, #1
   1a318:	cmp	r7, r5
   1a31c:	mov	r7, #0
   1a320:	movwhi	r7, #1
   1a324:	cmp	r4, r6
   1a328:	mov	r6, #0
   1a32c:	movwcc	r6, #1
   1a330:	cmp	r5, lr
   1a334:	movwcc	r0, #1
   1a338:	tst	r0, r6
   1a33c:	bne	1a3c8 <__assert_fail@plt+0x8f18>
   1a340:	ands	r0, r7, r3
   1a344:	bne	1a3c8 <__assert_fail@plt+0x8f18>
   1a348:	ldr	lr, [sp, #40]	; 0x28
   1a34c:	ands	r0, r1, r8
   1a350:	bne	1a248 <__assert_fail@plt+0x8d98>
   1a354:	bic	r0, sl, #3
   1a358:	mov	r1, #1
   1a35c:	str	r4, [sp, #32]
   1a360:	str	r0, [sp, #28]
   1a364:	subs	r0, r0, #4
   1a368:	add	r0, r1, r0, lsr #2
   1a36c:	and	r1, r0, #1
   1a370:	str	r1, [sp, #24]
   1a374:	beq	1a3dc <__assert_fail@plt+0x8f2c>
   1a378:	ldr	r6, [sp, #44]	; 0x2c
   1a37c:	sub	r7, r0, r1
   1a380:	mov	r8, r4
   1a384:	mov	r3, #0
   1a388:	mov	r1, #32
   1a38c:	mov	r4, #64	; 0x40
   1a390:	mov	lr, r5
   1a394:	add	ip, r6, #32
   1a398:	vld2.32	{d16-d19}, [r6], r4
   1a39c:	add	r2, lr, #16
   1a3a0:	add	r0, r8, #16
   1a3a4:	subs	r7, r7, #2
   1a3a8:	add	r3, r3, #8
   1a3ac:	vst1.32	{d16-d17}, [lr], r1
   1a3b0:	vst1.32	{d18-d19}, [r8], r1
   1a3b4:	vld2.32	{d16-d19}, [ip]
   1a3b8:	vst1.32	{d16-d17}, [r2]
   1a3bc:	vst1.32	{d18-d19}, [r0]
   1a3c0:	bne	1a394 <__assert_fail@plt+0x8ee4>
   1a3c4:	b	1a3e0 <__assert_fail@plt+0x8f30>
   1a3c8:	ldr	lr, [sp, #40]	; 0x28
   1a3cc:	tst	sl, #1
   1a3d0:	mov	r3, r2
   1a3d4:	bne	1a254 <__assert_fail@plt+0x8da4>
   1a3d8:	b	1a26c <__assert_fail@plt+0x8dbc>
   1a3dc:	mov	r3, #0
   1a3e0:	ldr	r0, [sp, #24]
   1a3e4:	ldr	lr, [sp, #40]	; 0x28
   1a3e8:	ldr	r4, [sp, #32]
   1a3ec:	cmp	r0, #0
   1a3f0:	beq	1a410 <__assert_fail@plt+0x8f60>
   1a3f4:	ldr	r0, [sp, #44]	; 0x2c
   1a3f8:	add	r0, r0, r3, lsl #3
   1a3fc:	vld2.32	{d16-d19}, [r0]
   1a400:	add	r0, r5, r3, lsl #2
   1a404:	vst1.32	{d16-d17}, [r0]
   1a408:	add	r0, r4, r3, lsl #2
   1a40c:	vst1.32	{d18-d19}, [r0]
   1a410:	ldr	r2, [sp, #28]
   1a414:	cmp	sl, r2
   1a418:	bne	1a248 <__assert_fail@plt+0x8d98>
   1a41c:	ldr	r8, [r9]
   1a420:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1a424:	ldr	r6, [sp, #44]	; 0x2c
   1a428:	cmp	sl, r8
   1a42c:	bcs	1a450 <__assert_fail@plt+0x8fa0>
   1a430:	ldmib	r9, {r0, r1}
   1a434:	mvn	r2, #0
   1a438:	str	r2, [r1, sl, lsl #2]
   1a43c:	str	r2, [r0, sl, lsl #2]
   1a440:	add	sl, sl, #1
   1a444:	ldr	r3, [r9]
   1a448:	cmp	sl, r3
   1a44c:	bcc	1a438 <__assert_fail@plt+0x8f88>
   1a450:	mov	r7, lr
   1a454:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a458:	cmp	r7, #0
   1a45c:	ldrb	r0, [r1, #28]
   1a460:	and	r0, r0, #249	; 0xf9
   1a464:	orr	r0, r0, r7, lsl #1
   1a468:	strb	r0, [r1, #28]
   1a46c:	beq	1a490 <__assert_fail@plt+0x8fe0>
   1a470:	ldr	r0, [fp, #20]
   1a474:	cmp	r0, #0
   1a478:	beq	1a488 <__assert_fail@plt+0x8fd8>
   1a47c:	ldr	r0, [r6, #4]
   1a480:	sub	r4, r0, r4
   1a484:	b	1a15c <__assert_fail@plt+0x8cac>
   1a488:	ldr	r4, [r6]
   1a48c:	b	1a15c <__assert_fail@plt+0x8cac>
   1a490:	mvn	r4, #1
   1a494:	b	1a15c <__assert_fail@plt+0x8cac>
   1a498:	ldr	r0, [r9, #4]
   1a49c:	lsl	r1, r8, #2
   1a4a0:	str	r6, [sp, #44]	; 0x2c
   1a4a4:	mov	r6, r1
   1a4a8:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1a4ac:	mov	r7, #0
   1a4b0:	cmp	r0, #0
   1a4b4:	beq	1a4fc <__assert_fail@plt+0x904c>
   1a4b8:	mov	r5, r0
   1a4bc:	ldr	r0, [r9, #8]
   1a4c0:	mov	r1, r6
   1a4c4:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1a4c8:	cmp	r0, #0
   1a4cc:	beq	1a504 <__assert_fail@plt+0x9054>
   1a4d0:	ldr	r6, [sp, #44]	; 0x2c
   1a4d4:	str	r8, [r9]
   1a4d8:	str	r5, [r9, #4]
   1a4dc:	str	r0, [r9, #8]
   1a4e0:	mov	lr, #1
   1a4e4:	cmp	sl, #1
   1a4e8:	bge	1a230 <__assert_fail@plt+0x8d80>
   1a4ec:	b	1a210 <__assert_fail@plt+0x8d60>
   1a4f0:	ldr	r0, [r9, #4]
   1a4f4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a4f8:	b	1a454 <__assert_fail@plt+0x8fa4>
   1a4fc:	ldr	r6, [sp, #44]	; 0x2c
   1a500:	b	1a454 <__assert_fail@plt+0x8fa4>
   1a504:	mov	r0, r5
   1a508:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a50c:	ldr	r6, [sp, #44]	; 0x2c
   1a510:	b	1a454 <__assert_fail@plt+0x8fa4>
   1a514:	push	{fp, lr}
   1a518:	mov	fp, sp
   1a51c:	sub	sp, sp, #16
   1a520:	mov	ip, #0
   1a524:	str	r2, [sp, #4]
   1a528:	str	ip, [sp, #12]
   1a52c:	ldr	ip, [fp, #12]
   1a530:	str	ip, [sp, #8]
   1a534:	ldr	ip, [fp, #8]
   1a538:	str	ip, [sp]
   1a53c:	bl	19f44 <__assert_fail@plt+0x8a94>
   1a540:	mov	sp, fp
   1a544:	pop	{fp, pc}
   1a548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a54c:	add	fp, sp, #28
   1a550:	sub	sp, sp, #20
   1a554:	ldr	r4, [fp, #8]
   1a558:	mov	r8, r1
   1a55c:	mov	r1, r0
   1a560:	mov	r6, r2
   1a564:	orr	r0, r4, r2
   1a568:	ldr	r2, [fp, #20]
   1a56c:	orrs	r0, r0, r2
   1a570:	bmi	1a630 <__assert_fail@plt+0x9180>
   1a574:	adds	sl, r6, r4
   1a578:	bvs	1a630 <__assert_fail@plt+0x9180>
   1a57c:	mov	r5, #0
   1a580:	cmp	r4, #1
   1a584:	blt	1a5dc <__assert_fail@plt+0x912c>
   1a588:	mov	r9, r3
   1a58c:	cmp	r6, #1
   1a590:	blt	1a5e4 <__assert_fail@plt+0x9134>
   1a594:	mov	r0, sl
   1a598:	mov	r5, r1
   1a59c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a630 <__assert_fail@plt+0x9180>
   1a5a8:	mov	r1, r8
   1a5ac:	mov	r2, r6
   1a5b0:	mov	r7, r0
   1a5b4:	bl	11258 <memcpy@plt>
   1a5b8:	add	r0, r7, r6
   1a5bc:	mov	r1, r9
   1a5c0:	mov	r2, r4
   1a5c4:	bl	11258 <memcpy@plt>
   1a5c8:	ldr	r2, [fp, #20]
   1a5cc:	mov	r1, r5
   1a5d0:	mov	r4, r7
   1a5d4:	mov	r5, #0
   1a5d8:	b	1a5ec <__assert_fail@plt+0x913c>
   1a5dc:	mov	r7, r8
   1a5e0:	b	1a5e8 <__assert_fail@plt+0x9138>
   1a5e4:	mov	r7, r9
   1a5e8:	mov	r4, #0
   1a5ec:	ldr	r0, [fp, #16]
   1a5f0:	ldr	r3, [fp, #12]
   1a5f4:	mov	r6, #1
   1a5f8:	str	r2, [sp, #4]
   1a5fc:	mov	r2, sl
   1a600:	str	r5, [sp]
   1a604:	str	r6, [sp, #12]
   1a608:	str	r0, [sp, #8]
   1a60c:	mov	r0, r1
   1a610:	mov	r1, r7
   1a614:	bl	19f44 <__assert_fail@plt+0x8a94>
   1a618:	mov	r5, r0
   1a61c:	mov	r0, r4
   1a620:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a624:	mov	r0, r5
   1a628:	sub	sp, fp, #28
   1a62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a630:	mvn	r0, #1
   1a634:	sub	sp, fp, #28
   1a638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a63c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a640:	add	fp, sp, #28
   1a644:	sub	sp, sp, #20
   1a648:	ldr	r4, [fp, #8]
   1a64c:	mov	r8, r1
   1a650:	mov	r1, r0
   1a654:	mov	r6, r2
   1a658:	orr	r0, r4, r2
   1a65c:	ldr	r2, [fp, #24]
   1a660:	orrs	r0, r0, r2
   1a664:	bmi	1a724 <__assert_fail@plt+0x9274>
   1a668:	adds	sl, r6, r4
   1a66c:	bvs	1a724 <__assert_fail@plt+0x9274>
   1a670:	mov	r5, #0
   1a674:	cmp	r4, #1
   1a678:	blt	1a6d0 <__assert_fail@plt+0x9220>
   1a67c:	mov	r9, r3
   1a680:	cmp	r6, #1
   1a684:	blt	1a6d8 <__assert_fail@plt+0x9228>
   1a688:	mov	r0, sl
   1a68c:	mov	r5, r1
   1a690:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1a694:	cmp	r0, #0
   1a698:	beq	1a724 <__assert_fail@plt+0x9274>
   1a69c:	mov	r1, r8
   1a6a0:	mov	r2, r6
   1a6a4:	mov	r7, r0
   1a6a8:	bl	11258 <memcpy@plt>
   1a6ac:	add	r0, r7, r6
   1a6b0:	mov	r1, r9
   1a6b4:	mov	r2, r4
   1a6b8:	bl	11258 <memcpy@plt>
   1a6bc:	ldr	r2, [fp, #24]
   1a6c0:	mov	r1, r5
   1a6c4:	mov	r4, r7
   1a6c8:	mov	r5, #0
   1a6cc:	b	1a6e0 <__assert_fail@plt+0x9230>
   1a6d0:	mov	r7, r8
   1a6d4:	b	1a6dc <__assert_fail@plt+0x922c>
   1a6d8:	mov	r7, r9
   1a6dc:	mov	r4, #0
   1a6e0:	ldr	r0, [fp, #20]
   1a6e4:	ldr	r6, [fp, #16]
   1a6e8:	ldr	r3, [fp, #12]
   1a6ec:	str	r2, [sp, #4]
   1a6f0:	mov	r2, sl
   1a6f4:	str	r5, [sp, #12]
   1a6f8:	str	r0, [sp, #8]
   1a6fc:	mov	r0, r1
   1a700:	mov	r1, r7
   1a704:	str	r6, [sp]
   1a708:	bl	19f44 <__assert_fail@plt+0x8a94>
   1a70c:	mov	r5, r0
   1a710:	mov	r0, r4
   1a714:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a718:	mov	r0, r5
   1a71c:	sub	sp, fp, #28
   1a720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a724:	mvn	r0, #1
   1a728:	sub	sp, fp, #28
   1a72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a730:	ldrb	ip, [r0, #28]
   1a734:	cmp	r2, #0
   1a738:	bic	ip, ip, #6
   1a73c:	orrne	ip, ip, #2
   1a740:	strb	ip, [r0, #28]
   1a744:	ldr	r0, [sp]
   1a748:	moveq	r0, r2
   1a74c:	cmp	r2, #0
   1a750:	moveq	r3, r2
   1a754:	stm	r1, {r2, r3}
   1a758:	str	r0, [r1, #8]
   1a75c:	bx	lr
   1a760:	push	{r4, sl, fp, lr}
   1a764:	add	fp, sp, #8
   1a768:	mov	r4, r0
   1a76c:	ldr	r0, [r0, #24]
   1a770:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a774:	ldr	r0, [r4, #36]	; 0x24
   1a778:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a77c:	ldr	r0, [r4, #40]	; 0x28
   1a780:	add	r1, r4, #4
   1a784:	cmp	r0, r1
   1a788:	beq	1a79c <__assert_fail@plt+0x92ec>
   1a78c:	ldr	r0, [r0, #8]
   1a790:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a794:	ldr	r0, [r4, #40]	; 0x28
   1a798:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a79c:	ldr	r0, [r4, #12]
   1a7a0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a7a4:	ldr	r0, [r4, #48]	; 0x30
   1a7a8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a7ac:	ldr	r0, [r4, #44]	; 0x2c
   1a7b0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1a7b4:	mov	r0, r4
   1a7b8:	pop	{r4, sl, fp, lr}
   1a7bc:	b	2bc28 <__assert_fail@plt+0x1a778>
   1a7c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7c4:	add	fp, sp, #28
   1a7c8:	sub	sp, sp, #108	; 0x6c
   1a7cc:	mov	r3, r0
   1a7d0:	ldrb	r0, [r0, #74]	; 0x4a
   1a7d4:	ldr	r9, [r3, #36]	; 0x24
   1a7d8:	ldr	r1, [r3, #48]	; 0x30
   1a7dc:	ldr	r8, [r3, #28]
   1a7e0:	str	r3, [sp, #20]
   1a7e4:	cmp	r9, r1
   1a7e8:	movgt	r9, r1
   1a7ec:	cmp	r0, #0
   1a7f0:	bne	1a80c <__assert_fail@plt+0x935c>
   1a7f4:	ldr	r0, [r3, #64]	; 0x40
   1a7f8:	cmp	r0, #0
   1a7fc:	bne	1a80c <__assert_fail@plt+0x935c>
   1a800:	ldrb	r0, [r3, #76]	; 0x4c
   1a804:	cmp	r0, #0
   1a808:	beq	1a814 <__assert_fail@plt+0x9364>
   1a80c:	ldr	r7, [r3, #32]
   1a810:	b	1aa50 <__assert_fail@plt+0x95a0>
   1a814:	cmp	r9, r8
   1a818:	ble	1aa28 <__assert_fail@plt+0x9578>
   1a81c:	add	r5, r3, #16
   1a820:	add	sl, sp, #32
   1a824:	str	r9, [sp, #16]
   1a828:	b	1a848 <__assert_fail@plt+0x9398>
   1a82c:	mov	r8, r9
   1a830:	ldr	r9, [sp, #16]
   1a834:	mov	r3, sl
   1a838:	add	sl, sp, #32
   1a83c:	cmp	r9, r8
   1a840:	mov	r7, r8
   1a844:	ble	1ae20 <__assert_fail@plt+0x9970>
   1a848:	ldr	r6, [r3, #24]
   1a84c:	ldr	r4, [r3]
   1a850:	add	r0, r6, r8
   1a854:	ldrb	r7, [r4, r0]
   1a858:	tst	r7, #128	; 0x80
   1a85c:	bne	1a8b4 <__assert_fail@plt+0x9404>
   1a860:	mov	r0, r5
   1a864:	bl	1127c <mbsinit@plt>
   1a868:	cmp	r0, #0
   1a86c:	beq	1a8b4 <__assert_fail@plt+0x9404>
   1a870:	mov	r0, r7
   1a874:	bl	1148c <towupper@plt>
   1a878:	cmp	r0, #128	; 0x80
   1a87c:	bcs	1a8a8 <__assert_fail@plt+0x93f8>
   1a880:	ldr	r3, [sp, #20]
   1a884:	ldr	r1, [r3, #4]
   1a888:	strb	r0, [r1, r8]
   1a88c:	ldr	r1, [r3, #8]
   1a890:	str	r0, [r1, r8, lsl #2]
   1a894:	add	r8, r8, #1
   1a898:	cmp	r9, r8
   1a89c:	mov	r7, r8
   1a8a0:	bgt	1a848 <__assert_fail@plt+0x9398>
   1a8a4:	b	1ae20 <__assert_fail@plt+0x9970>
   1a8a8:	ldr	r0, [sp, #20]
   1a8ac:	ldr	r4, [r0]
   1a8b0:	ldr	r6, [r0, #24]
   1a8b4:	ldm	r5, {r0, r1}
   1a8b8:	str	r1, [fp, #-36]	; 0xffffffdc
   1a8bc:	sub	r2, r9, r8
   1a8c0:	mov	r3, r5
   1a8c4:	str	r0, [fp, #-40]	; 0xffffffd8
   1a8c8:	add	r0, r4, r6
   1a8cc:	add	r1, r0, r8
   1a8d0:	add	r0, sp, #28
   1a8d4:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   1a8d8:	sub	r4, r0, #1
   1a8dc:	mov	r6, r0
   1a8e0:	cmn	r4, #4
   1a8e4:	bhi	1a9d0 <__assert_fail@plt+0x9520>
   1a8e8:	ldr	r0, [sp, #28]
   1a8ec:	bl	1148c <towupper@plt>
   1a8f0:	mov	r7, r0
   1a8f4:	ldr	r0, [sp, #28]
   1a8f8:	cmp	r7, r0
   1a8fc:	bne	1a920 <__assert_fail@plt+0x9470>
   1a900:	ldr	sl, [sp, #20]
   1a904:	ldr	r1, [sl]
   1a908:	ldr	r2, [sl, #24]
   1a90c:	ldr	r0, [sl, #4]
   1a910:	add	r1, r1, r2
   1a914:	add	r0, r0, r8
   1a918:	add	r1, r1, r8
   1a91c:	b	1a948 <__assert_fail@plt+0x9498>
   1a920:	mov	r0, sl
   1a924:	mov	r1, r7
   1a928:	sub	r2, fp, #40	; 0x28
   1a92c:	bl	111e0 <wcrtomb@plt>
   1a930:	cmp	r6, r0
   1a934:	bne	1aa30 <__assert_fail@plt+0x9580>
   1a938:	mov	r1, sl
   1a93c:	ldr	sl, [sp, #20]
   1a940:	ldr	r0, [sl, #4]
   1a944:	add	r0, r0, r8
   1a948:	mov	r2, r6
   1a94c:	bl	11258 <memcpy@plt>
   1a950:	ldr	r0, [sl, #8]
   1a954:	add	r9, r8, #1
   1a958:	str	r7, [r0, r8, lsl #2]
   1a95c:	add	r7, r6, r8
   1a960:	cmp	r9, r7
   1a964:	bge	1a82c <__assert_fail@plt+0x937c>
   1a968:	add	r0, r0, r8, lsl #2
   1a96c:	mvn	r1, #3
   1a970:	add	r2, r1, r6, lsl #2
   1a974:	mov	r1, #255	; 0xff
   1a978:	add	r0, r0, #4
   1a97c:	bl	113cc <memset@plt>
   1a980:	sub	r0, r6, #2
   1a984:	ands	r1, r4, #7
   1a988:	add	sl, sp, #32
   1a98c:	beq	1a99c <__assert_fail@plt+0x94ec>
   1a990:	subs	r1, r1, #1
   1a994:	add	r9, r9, #1
   1a998:	bne	1a990 <__assert_fail@plt+0x94e0>
   1a99c:	ldr	r3, [sp, #20]
   1a9a0:	cmp	r0, #7
   1a9a4:	bcc	1a9b8 <__assert_fail@plt+0x9508>
   1a9a8:	add	r0, r6, r8
   1a9ac:	sub	r0, r0, r9
   1a9b0:	subs	r0, r0, #8
   1a9b4:	bne	1a9b0 <__assert_fail@plt+0x9500>
   1a9b8:	ldr	r9, [sp, #16]
   1a9bc:	mov	r8, r7
   1a9c0:	cmp	r9, r8
   1a9c4:	mov	r7, r8
   1a9c8:	bgt	1a848 <__assert_fail@plt+0x9398>
   1a9cc:	b	1ae20 <__assert_fail@plt+0x9970>
   1a9d0:	ldr	r3, [sp, #20]
   1a9d4:	add	r0, r6, #1
   1a9d8:	cmp	r0, #2
   1a9dc:	bcc	1a9f0 <__assert_fail@plt+0x9540>
   1a9e0:	ldr	r0, [r3, #36]	; 0x24
   1a9e4:	ldr	r1, [r3, #48]	; 0x30
   1a9e8:	cmp	r0, r1
   1a9ec:	blt	1aa3c <__assert_fail@plt+0x958c>
   1a9f0:	ldr	r0, [r3, #4]
   1a9f4:	cmn	r6, #1
   1a9f8:	strb	r7, [r0, r8]
   1a9fc:	ldr	r0, [r3, #8]
   1aa00:	str	r7, [r0, r8, lsl #2]
   1aa04:	add	r8, r8, #1
   1aa08:	bne	1a83c <__assert_fail@plt+0x938c>
   1aa0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1aa10:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1aa14:	stm	r5, {r0, r1}
   1aa18:	cmp	r9, r8
   1aa1c:	mov	r7, r8
   1aa20:	bgt	1a848 <__assert_fail@plt+0x9398>
   1aa24:	b	1ae20 <__assert_fail@plt+0x9970>
   1aa28:	mov	r7, r8
   1aa2c:	b	1ae20 <__assert_fail@plt+0x9970>
   1aa30:	ldr	r3, [sp, #20]
   1aa34:	mov	r7, r8
   1aa38:	b	1aa58 <__assert_fail@plt+0x95a8>
   1aa3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1aa40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1aa44:	mov	r7, r8
   1aa48:	stm	r5, {r0, r1}
   1aa4c:	b	1ae20 <__assert_fail@plt+0x9970>
   1aa50:	cmp	r8, r9
   1aa54:	bge	1ae20 <__assert_fail@plt+0x9970>
   1aa58:	mov	r4, r3
   1aa5c:	mov	sl, r9
   1aa60:	sub	r2, r9, r8
   1aa64:	ldr	r0, [r4, #16]!
   1aa68:	ldr	r1, [r4, #4]
   1aa6c:	str	r0, [fp, #-40]	; 0xffffffd8
   1aa70:	str	r1, [fp, #-36]	; 0xffffffdc
   1aa74:	ldr	r0, [r4, #48]	; 0x30
   1aa78:	cmp	r0, #0
   1aa7c:	bne	1ab9c <__assert_fail@plt+0x96ec>
   1aa80:	ldr	r0, [r3]
   1aa84:	ldr	r1, [r3, #24]
   1aa88:	mov	r9, r7
   1aa8c:	add	r0, r0, r1
   1aa90:	add	r7, r0, r7
   1aa94:	add	r0, sp, #24
   1aa98:	mov	r1, r7
   1aa9c:	mov	r3, r4
   1aaa0:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   1aaa4:	mov	r5, r0
   1aaa8:	sub	r0, r0, #1
   1aaac:	cmn	r0, #4
   1aab0:	str	r0, [sp, #16]
   1aab4:	bhi	1abf0 <__assert_fail@plt+0x9740>
   1aab8:	ldr	r0, [sp, #24]
   1aabc:	bl	1148c <towupper@plt>
   1aac0:	mov	r6, r0
   1aac4:	ldr	r0, [sp, #24]
   1aac8:	cmp	r6, r0
   1aacc:	bne	1aadc <__assert_fail@plt+0x962c>
   1aad0:	ldr	r4, [sp, #20]
   1aad4:	mov	r1, r7
   1aad8:	b	1aafc <__assert_fail@plt+0x964c>
   1aadc:	add	r0, sp, #32
   1aae0:	sub	r2, fp, #40	; 0x28
   1aae4:	mov	r1, r6
   1aae8:	bl	111e0 <wcrtomb@plt>
   1aaec:	cmp	r0, r5
   1aaf0:	bne	1ac70 <__assert_fail@plt+0x97c0>
   1aaf4:	ldr	r4, [sp, #20]
   1aaf8:	add	r1, sp, #32
   1aafc:	ldr	r0, [r4, #4]
   1ab00:	add	r0, r0, r8
   1ab04:	mov	r2, r5
   1ab08:	bl	11258 <memcpy@plt>
   1ab0c:	ldrb	r0, [r4, #76]	; 0x4c
   1ab10:	mov	r7, r9
   1ab14:	mov	r9, sl
   1ab18:	mov	r3, r4
   1ab1c:	cmp	r0, #0
   1ab20:	bne	1ad24 <__assert_fail@plt+0x9874>
   1ab24:	ldr	r0, [r3, #8]
   1ab28:	add	r4, r5, r8
   1ab2c:	add	r7, r5, r7
   1ab30:	str	r6, [r0, r8, lsl #2]
   1ab34:	add	r6, r8, #1
   1ab38:	cmp	r6, r4
   1ab3c:	bge	1ab94 <__assert_fail@plt+0x96e4>
   1ab40:	mvn	r1, #3
   1ab44:	add	r0, r0, r6, lsl #2
   1ab48:	add	r2, r1, r5, lsl #2
   1ab4c:	mov	r1, #255	; 0xff
   1ab50:	bl	113cc <memset@plt>
   1ab54:	ldr	r1, [sp, #16]
   1ab58:	sub	r0, r5, #2
   1ab5c:	ands	r1, r1, #7
   1ab60:	beq	1ab70 <__assert_fail@plt+0x96c0>
   1ab64:	subs	r1, r1, #1
   1ab68:	add	r6, r6, #1
   1ab6c:	bne	1ab64 <__assert_fail@plt+0x96b4>
   1ab70:	ldr	r3, [sp, #20]
   1ab74:	cmp	r0, #7
   1ab78:	bcc	1ab8c <__assert_fail@plt+0x96dc>
   1ab7c:	add	r0, r5, r8
   1ab80:	sub	r0, r0, r6
   1ab84:	subs	r0, r0, #8
   1ab88:	bne	1ab84 <__assert_fail@plt+0x96d4>
   1ab8c:	mov	r8, r4
   1ab90:	b	1aa50 <__assert_fail@plt+0x95a0>
   1ab94:	mov	r8, r6
   1ab98:	b	1aa50 <__assert_fail@plt+0x95a0>
   1ab9c:	cmp	r2, #1
   1aba0:	mov	r9, r7
   1aba4:	add	r7, sp, #32
   1aba8:	ldrge	r1, [r3, #80]	; 0x50
   1abac:	cmpge	r1, #1
   1abb0:	blt	1aa94 <__assert_fail@plt+0x95e4>
   1abb4:	ldr	r7, [r3, #24]
   1abb8:	ldr	r6, [r3]
   1abbc:	add	r7, r9, r7
   1abc0:	add	r3, r6, r7
   1abc4:	mov	r6, #0
   1abc8:	add	r7, sp, #32
   1abcc:	ldrb	r5, [r3, r6]
   1abd0:	ldrb	r5, [r0, r5]
   1abd4:	strb	r5, [r7, r6]
   1abd8:	add	r6, r6, #1
   1abdc:	cmp	r6, r2
   1abe0:	bge	1aa94 <__assert_fail@plt+0x95e4>
   1abe4:	cmp	r6, r1
   1abe8:	blt	1abcc <__assert_fail@plt+0x971c>
   1abec:	b	1aa94 <__assert_fail@plt+0x95e4>
   1abf0:	ldr	r3, [sp, #20]
   1abf4:	add	r0, r5, #1
   1abf8:	cmp	r0, #2
   1abfc:	bcc	1ac10 <__assert_fail@plt+0x9760>
   1ac00:	ldr	r0, [r3, #36]	; 0x24
   1ac04:	ldr	r1, [r3, #48]	; 0x30
   1ac08:	cmp	r0, r1
   1ac0c:	blt	1ae10 <__assert_fail@plt+0x9960>
   1ac10:	ldr	r2, [r3, #24]
   1ac14:	ldr	r0, [r3]
   1ac18:	ldr	r1, [r3, #64]	; 0x40
   1ac1c:	mov	r7, r9
   1ac20:	add	r2, r2, r9
   1ac24:	cmp	r1, #0
   1ac28:	ldrb	r0, [r0, r2]
   1ac2c:	bne	1b0a4 <__assert_fail@plt+0x9bf4>
   1ac30:	ldr	r1, [r3, #4]
   1ac34:	mov	r9, sl
   1ac38:	strb	r0, [r1, r8]
   1ac3c:	ldrb	r1, [r3, #76]	; 0x4c
   1ac40:	cmp	r1, #0
   1ac44:	bne	1b0ac <__assert_fail@plt+0x9bfc>
   1ac48:	ldr	r1, [r3, #8]
   1ac4c:	add	r7, r7, #1
   1ac50:	cmn	r5, #1
   1ac54:	str	r0, [r1, r8, lsl #2]
   1ac58:	add	r8, r8, #1
   1ac5c:	bne	1aa50 <__assert_fail@plt+0x95a0>
   1ac60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ac64:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1ac68:	stm	r4, {r0, r1}
   1ac6c:	b	1aa50 <__assert_fail@plt+0x95a0>
   1ac70:	ldr	r3, [sp, #20]
   1ac74:	mov	r2, r0
   1ac78:	cmn	r0, #1
   1ac7c:	beq	1ada0 <__assert_fail@plt+0x98f0>
   1ac80:	ldr	r1, [r3, #36]	; 0x24
   1ac84:	add	r0, r2, r8
   1ac88:	cmp	r0, r1
   1ac8c:	bhi	1ae10 <__assert_fail@plt+0x9960>
   1ac90:	str	r0, [sp, #12]
   1ac94:	ldr	r0, [r3, #12]
   1ac98:	mov	r7, r9
   1ac9c:	cmp	r0, #0
   1aca0:	bne	1acc4 <__assert_fail@plt+0x9814>
   1aca4:	lsl	r0, r1, #2
   1aca8:	mov	r4, r2
   1acac:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1acb0:	ldr	r3, [sp, #20]
   1acb4:	mov	r2, r4
   1acb8:	cmp	r0, #0
   1acbc:	str	r0, [r3, #12]
   1acc0:	beq	1b098 <__assert_fail@plt+0x9be8>
   1acc4:	ldrb	r1, [r3, #76]	; 0x4c
   1acc8:	ldr	r9, [sp, #16]
   1accc:	cmp	r1, #0
   1acd0:	bne	1aef0 <__assert_fail@plt+0x9a40>
   1acd4:	cmp	r8, #0
   1acd8:	beq	1aee8 <__assert_fail@plt+0x9a38>
   1acdc:	mov	r1, #0
   1ace0:	cmp	r8, #4
   1ace4:	bcc	1aed8 <__assert_fail@plt+0x9a28>
   1ace8:	bic	r1, r8, #3
   1acec:	stmib	sp, {r2, r7}
   1acf0:	mov	r2, #1
   1acf4:	add	r3, pc, #964	; 0x3c4
   1acf8:	sub	r7, r1, #4
   1acfc:	add	r2, r2, r7, lsr #2
   1ad00:	cmp	r7, #12
   1ad04:	and	r4, r2, #3
   1ad08:	bcs	1ae34 <__assert_fail@plt+0x9984>
   1ad0c:	vld1.64	{d16-d17}, [r3 :128]
   1ad10:	mov	sl, r4
   1ad14:	mov	r3, #0
   1ad18:	cmp	sl, #0
   1ad1c:	bne	1aea8 <__assert_fail@plt+0x99f8>
   1ad20:	b	1aec8 <__assert_fail@plt+0x9a18>
   1ad24:	ldr	lr, [r3, #12]
   1ad28:	mov	r1, #0
   1ad2c:	cmp	r5, #4
   1ad30:	bcc	1adec <__assert_fail@plt+0x993c>
   1ad34:	vdup.32	q8, r7
   1ad38:	bic	r1, r5, #3
   1ad3c:	mov	r3, #1
   1ad40:	mov	r9, r7
   1ad44:	subs	r2, r1, #4
   1ad48:	add	r2, r3, r2, lsr #2
   1ad4c:	add	r3, pc, #876	; 0x36c
   1ad50:	and	ip, r2, #1
   1ad54:	beq	1adb8 <__assert_fail@plt+0x9908>
   1ad58:	sub	r4, r2, ip
   1ad5c:	add	r2, pc, #860	; 0x35c
   1ad60:	vmov.i32	q10, #4	; 0x00000004
   1ad64:	vmov.i32	q11, #8	; 0x00000008
   1ad68:	add	r7, lr, r8, lsl #2
   1ad6c:	mov	r3, #0
   1ad70:	vld1.64	{d18-d19}, [r2 :128]
   1ad74:	mov	r2, #32
   1ad78:	vadd.i32	q12, q9, q8
   1ad7c:	vadd.i32	q9, q9, q11
   1ad80:	add	r0, r7, #16
   1ad84:	subs	r4, r4, #2
   1ad88:	add	r3, r3, #8
   1ad8c:	vadd.i32	q13, q12, q10
   1ad90:	vst1.32	{d24-d25}, [r7], r2
   1ad94:	vst1.32	{d26-d27}, [r0]
   1ad98:	bne	1ad78 <__assert_fail@plt+0x98c8>
   1ad9c:	b	1adc0 <__assert_fail@plt+0x9910>
   1ada0:	ldr	r0, [r3, #4]
   1ada4:	mov	r1, r7
   1ada8:	mov	r2, r5
   1adac:	mov	r4, r3
   1adb0:	add	r0, r0, r8
   1adb4:	b	1ab08 <__assert_fail@plt+0x9658>
   1adb8:	vld1.64	{d18-d19}, [r3 :128]
   1adbc:	mov	r3, #0
   1adc0:	cmp	ip, #0
   1adc4:	beq	1add8 <__assert_fail@plt+0x9928>
   1adc8:	add	r0, r3, r8
   1adcc:	vadd.i32	q8, q9, q8
   1add0:	add	r0, lr, r0, lsl #2
   1add4:	vst1.32	{d16-d17}, [r0]
   1add8:	ldr	r3, [sp, #20]
   1addc:	mov	r7, r9
   1ade0:	cmp	r5, r1
   1ade4:	mov	r9, sl
   1ade8:	beq	1ab24 <__assert_fail@plt+0x9674>
   1adec:	add	r0, r8, r1
   1adf0:	add	r2, r7, r1
   1adf4:	sub	r4, r5, r1
   1adf8:	add	r0, lr, r0, lsl #2
   1adfc:	str	r2, [r0], #4
   1ae00:	add	r2, r2, #1
   1ae04:	subs	r4, r4, #1
   1ae08:	bne	1adfc <__assert_fail@plt+0x994c>
   1ae0c:	b	1ab24 <__assert_fail@plt+0x9674>
   1ae10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ae14:	mov	r7, r9
   1ae18:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1ae1c:	stm	r4, {r0, r1}
   1ae20:	str	r8, [r3, #28]
   1ae24:	str	r7, [r3, #32]
   1ae28:	mov	r0, #0
   1ae2c:	sub	sp, fp, #28
   1ae30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae34:	mov	sl, r4
   1ae38:	sub	r4, r2, r4
   1ae3c:	add	r2, pc, #636	; 0x27c
   1ae40:	vmov.i32	q9, #12	; 0x0000000c
   1ae44:	vmov.i32	q10, #8	; 0x00000008
   1ae48:	vmov.i32	q11, #4	; 0x00000004
   1ae4c:	vmov.i32	q12, #16	; 0x00000010
   1ae50:	mov	r3, #0
   1ae54:	mov	lr, #64	; 0x40
   1ae58:	mov	r7, r0
   1ae5c:	vld1.64	{d16-d17}, [r2 :128]
   1ae60:	mov	r2, r0
   1ae64:	vadd.i32	q13, q8, q9
   1ae68:	add	ip, r2, #48	; 0x30
   1ae6c:	vadd.i32	q14, q8, q10
   1ae70:	vadd.i32	q15, q8, q11
   1ae74:	subs	r4, r4, #4
   1ae78:	add	r3, r3, #16
   1ae7c:	vst1.32	{d26-d27}, [ip]
   1ae80:	vst1.32	{d16-d17}, [r7], lr
   1ae84:	vadd.i32	q8, q8, q12
   1ae88:	add	ip, r2, #32
   1ae8c:	add	r2, r2, #16
   1ae90:	vst1.32	{d28-d29}, [ip]
   1ae94:	vst1.32	{d30-d31}, [r2]
   1ae98:	mov	r2, r7
   1ae9c:	bne	1ae64 <__assert_fail@plt+0x99b4>
   1aea0:	cmp	sl, #0
   1aea4:	beq	1aec8 <__assert_fail@plt+0x9a18>
   1aea8:	vmov.i32	q9, #4	; 0x00000004
   1aeac:	add	r2, r0, r3, lsl #2
   1aeb0:	rsb	r3, sl, #0
   1aeb4:	vadd.i32	q10, q8, q9
   1aeb8:	vst1.32	{d16-d17}, [r2]!
   1aebc:	adds	r3, r3, #1
   1aec0:	vorr	q8, q10, q10
   1aec4:	bcc	1aeb4 <__assert_fail@plt+0x9a04>
   1aec8:	ldr	r3, [sp, #20]
   1aecc:	ldmib	sp, {r2, r7}
   1aed0:	cmp	r8, r1
   1aed4:	beq	1aee8 <__assert_fail@plt+0x9a38>
   1aed8:	str	r1, [r0, r1, lsl #2]
   1aedc:	add	r1, r1, #1
   1aee0:	cmp	r8, r1
   1aee4:	bne	1aed8 <__assert_fail@plt+0x9a28>
   1aee8:	mov	r0, #1
   1aeec:	strb	r0, [r3, #76]	; 0x4c
   1aef0:	ldr	r0, [r3, #4]
   1aef4:	add	r1, sp, #32
   1aef8:	mov	r4, r3
   1aefc:	mov	sl, r2
   1af00:	add	r0, r0, r8
   1af04:	bl	11258 <memcpy@plt>
   1af08:	ldr	r0, [r4, #8]
   1af0c:	cmp	sl, #2
   1af10:	str	r6, [r0, r8, lsl #2]
   1af14:	mov	r6, r7
   1af18:	ldr	r1, [r4, #12]
   1af1c:	str	r7, [r1, r8, lsl #2]
   1af20:	bcc	1b050 <__assert_fail@plt+0x9ba0>
   1af24:	sub	lr, sl, #1
   1af28:	mov	ip, r6
   1af2c:	mov	r2, #1
   1af30:	cmp	lr, #4
   1af34:	bcc	1afb8 <__assert_fail@plt+0x9b08>
   1af38:	add	r7, sl, r8
   1af3c:	add	r4, r8, #1
   1af40:	str	ip, [sp, #8]
   1af44:	add	r6, r0, r4, lsl #2
   1af48:	add	r3, r0, r7, lsl #2
   1af4c:	add	r4, r1, r4, lsl #2
   1af50:	cmp	r4, r3
   1af54:	addcc	r3, r1, r7, lsl #2
   1af58:	cmpcc	r6, r3
   1af5c:	bcc	1afb8 <__assert_fail@plt+0x9b08>
   1af60:	add	r2, pc, #360	; 0x168
   1af64:	ldr	r3, [sp, #8]
   1af68:	vdup.32	q9, r9
   1af6c:	vdup.32	q10, r5
   1af70:	vmov.i32	q12, #4	; 0x00000004
   1af74:	vmov.i8	q13, #255	; 0xff
   1af78:	vld1.64	{d22-d23}, [r2 :128]
   1af7c:	vdup.32	q8, r3
   1af80:	bic	r3, lr, #3
   1af84:	orr	r2, r3, #1
   1af88:	mov	r7, r3
   1af8c:	vcgt.u32	q14, q10, q11
   1af90:	subs	r7, r7, #4
   1af94:	vbsl	q14, q11, q9
   1af98:	vadd.i32	q11, q11, q12
   1af9c:	vadd.i32	q14, q14, q8
   1afa0:	vst1.32	{d28-d29}, [r4]!
   1afa4:	vst1.32	{d26-d27}, [r6]!
   1afa8:	bne	1af8c <__assert_fail@plt+0x9adc>
   1afac:	cmp	lr, r3
   1afb0:	mov	r6, ip
   1afb4:	beq	1b050 <__assert_fail@plt+0x9ba0>
   1afb8:	tst	sl, #1
   1afbc:	mov	r3, r2
   1afc0:	bne	1afe8 <__assert_fail@plt+0x9b38>
   1afc4:	cmp	r2, r5
   1afc8:	mov	r3, r9
   1afcc:	add	r7, r2, r8
   1afd0:	movcc	r3, r2
   1afd4:	add	r3, r3, ip
   1afd8:	str	r3, [r1, r7, lsl #2]
   1afdc:	mvn	r3, #0
   1afe0:	str	r3, [r0, r7, lsl #2]
   1afe4:	add	r3, r2, #1
   1afe8:	add	r2, r2, #1
   1afec:	mov	r6, ip
   1aff0:	cmp	sl, r2
   1aff4:	beq	1b050 <__assert_fail@plt+0x9ba0>
   1aff8:	add	r2, r8, r3
   1affc:	add	r2, r2, #1
   1b000:	add	r1, r1, r2, lsl #2
   1b004:	add	r0, r0, r2, lsl #2
   1b008:	mvn	r2, #0
   1b00c:	cmp	r3, r5
   1b010:	mov	r7, r9
   1b014:	movcc	r7, r3
   1b018:	add	r7, r7, r6
   1b01c:	str	r7, [r1, #-4]
   1b020:	add	r7, r3, #1
   1b024:	add	r3, r3, #2
   1b028:	str	r2, [r0, #-4]
   1b02c:	cmp	r7, r5
   1b030:	movcs	r7, r9
   1b034:	cmp	r3, sl
   1b038:	add	r7, r7, r6
   1b03c:	str	r7, [r1]
   1b040:	str	r2, [r0]
   1b044:	add	r1, r1, #8
   1b048:	add	r0, r0, #8
   1b04c:	bne	1b00c <__assert_fail@plt+0x9b5c>
   1b050:	ldr	r3, [sp, #20]
   1b054:	sub	r1, sl, r5
   1b058:	mov	r7, r6
   1b05c:	ldr	r0, [r3, #48]	; 0x30
   1b060:	ldr	r2, [r3, #52]	; 0x34
   1b064:	add	r0, r0, r1
   1b068:	cmp	r2, r6
   1b06c:	str	r0, [r3, #48]	; 0x30
   1b070:	ble	1b080 <__assert_fail@plt+0x9bd0>
   1b074:	ldr	r2, [r3, #56]	; 0x38
   1b078:	add	r1, r2, r1
   1b07c:	str	r1, [r3, #56]	; 0x38
   1b080:	ldr	r9, [r3, #36]	; 0x24
   1b084:	ldr	r8, [sp, #12]
   1b088:	add	r7, r5, r7
   1b08c:	cmp	r9, r0
   1b090:	movgt	r9, r0
   1b094:	b	1aa50 <__assert_fail@plt+0x95a0>
   1b098:	mov	r0, #12
   1b09c:	sub	sp, fp, #28
   1b0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0a4:	ldrb	r0, [r1, r0]
   1b0a8:	b	1ac30 <__assert_fail@plt+0x9780>
   1b0ac:	ldr	r1, [r3, #12]
   1b0b0:	str	r7, [r1, r8, lsl #2]
   1b0b4:	b	1ac48 <__assert_fail@plt+0x9798>
   1b0b8:	nop	{0}
   1b0bc:	nop	{0}
   1b0c0:	andeq	r0, r0, r0
   1b0c4:	andeq	r0, r0, r1
   1b0c8:	andeq	r0, r0, r2
   1b0cc:	andeq	r0, r0, r3
   1b0d0:	andeq	r0, r0, r1
   1b0d4:	andeq	r0, r0, r2
   1b0d8:	andeq	r0, r0, r3
   1b0dc:	andeq	r0, r0, r4
   1b0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0e4:	add	fp, sp, #28
   1b0e8:	sub	sp, sp, #68	; 0x44
   1b0ec:	mov	r4, r0
   1b0f0:	ldr	r8, [r0, #28]
   1b0f4:	ldr	r5, [r0, #36]	; 0x24
   1b0f8:	ldr	r0, [r0, #48]	; 0x30
   1b0fc:	cmp	r5, r0
   1b100:	movgt	r5, r0
   1b104:	cmp	r5, r8
   1b108:	ble	1b2e0 <__assert_fail@plt+0x9e30>
   1b10c:	add	r9, r4, #16
   1b110:	mov	r0, sp
   1b114:	ldr	r3, [r4, #64]	; 0x40
   1b118:	ldm	r9, {r6, sl}
   1b11c:	sub	r2, r5, r8
   1b120:	cmp	r3, #0
   1b124:	bne	1b224 <__assert_fail@plt+0x9d74>
   1b128:	ldr	r3, [r4]
   1b12c:	ldr	r1, [r4, #24]
   1b130:	add	r1, r3, r1
   1b134:	add	r1, r1, r8
   1b138:	mov	r3, r9
   1b13c:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   1b140:	mov	r7, r0
   1b144:	add	r0, r0, #1
   1b148:	cmp	r0, #2
   1b14c:	bcc	1b168 <__assert_fail@plt+0x9cb8>
   1b150:	cmn	r7, #2
   1b154:	bne	1b194 <__assert_fail@plt+0x9ce4>
   1b158:	ldr	r0, [r4, #36]	; 0x24
   1b15c:	ldr	r1, [r4, #48]	; 0x30
   1b160:	cmp	r0, r1
   1b164:	blt	1b2dc <__assert_fail@plt+0x9e2c>
   1b168:	ldr	r1, [r4, #24]
   1b16c:	ldr	r0, [r4]
   1b170:	add	r1, r1, r8
   1b174:	ldrb	r0, [r0, r1]
   1b178:	str	r0, [sp]
   1b17c:	ldr	r1, [r4, #64]	; 0x40
   1b180:	cmp	r1, #0
   1b184:	bne	1b2d0 <__assert_fail@plt+0x9e20>
   1b188:	mov	r7, #1
   1b18c:	stm	r9, {r6, sl}
   1b190:	b	1b198 <__assert_fail@plt+0x9ce8>
   1b194:	ldr	r0, [sp]
   1b198:	ldr	r1, [r4, #8]
   1b19c:	add	sl, r7, r8
   1b1a0:	add	r6, r8, #1
   1b1a4:	cmp	r6, sl
   1b1a8:	str	r0, [r1, r8, lsl #2]
   1b1ac:	bge	1b210 <__assert_fail@plt+0x9d60>
   1b1b0:	mvn	r0, #3
   1b1b4:	add	r2, r0, r7, lsl #2
   1b1b8:	add	r0, r1, r8, lsl #2
   1b1bc:	mov	r1, #255	; 0xff
   1b1c0:	add	r0, r0, #4
   1b1c4:	bl	113cc <memset@plt>
   1b1c8:	sub	r1, r7, #1
   1b1cc:	sub	r0, r7, #2
   1b1d0:	ands	r1, r1, #7
   1b1d4:	beq	1b1e4 <__assert_fail@plt+0x9d34>
   1b1d8:	subs	r1, r1, #1
   1b1dc:	add	r6, r6, #1
   1b1e0:	bne	1b1d8 <__assert_fail@plt+0x9d28>
   1b1e4:	cmp	r0, #7
   1b1e8:	bcc	1b1fc <__assert_fail@plt+0x9d4c>
   1b1ec:	add	r0, r7, r8
   1b1f0:	sub	r0, r0, r6
   1b1f4:	subs	r0, r0, #8
   1b1f8:	bne	1b1f4 <__assert_fail@plt+0x9d44>
   1b1fc:	mov	r8, sl
   1b200:	mov	r0, sp
   1b204:	cmp	r5, r8
   1b208:	bgt	1b114 <__assert_fail@plt+0x9c64>
   1b20c:	b	1b2e0 <__assert_fail@plt+0x9e30>
   1b210:	mov	r8, r6
   1b214:	mov	r0, sp
   1b218:	cmp	r5, r8
   1b21c:	bgt	1b114 <__assert_fail@plt+0x9c64>
   1b220:	b	1b2e0 <__assert_fail@plt+0x9e30>
   1b224:	cmp	r2, #1
   1b228:	add	r1, sp, #4
   1b22c:	blt	1b138 <__assert_fail@plt+0x9c88>
   1b230:	ldr	r1, [r4, #80]	; 0x50
   1b234:	cmp	r1, #1
   1b238:	add	r1, sp, #4
   1b23c:	blt	1b138 <__assert_fail@plt+0x9c88>
   1b240:	ldr	r7, [r4, #24]
   1b244:	ldm	r4, {r1, ip}
   1b248:	cmp	r2, #2
   1b24c:	add	r7, r8, r7
   1b250:	ldrb	r1, [r1, r7]
   1b254:	ldrb	r1, [r3, r1]
   1b258:	strb	r1, [ip, r8]
   1b25c:	strb	r1, [sp, #4]
   1b260:	add	r1, sp, #4
   1b264:	blt	1b138 <__assert_fail@plt+0x9c88>
   1b268:	ldr	r1, [r4, #80]	; 0x50
   1b26c:	cmp	r1, #2
   1b270:	add	r1, sp, #4
   1b274:	blt	1b138 <__assert_fail@plt+0x9c88>
   1b278:	mov	lr, r0
   1b27c:	mov	r0, #1
   1b280:	ldr	r7, [r4, #24]
   1b284:	ldm	r4, {r1, ip}
   1b288:	ldr	r3, [r4, #64]	; 0x40
   1b28c:	add	r1, r1, r7
   1b290:	add	r1, r1, r8
   1b294:	ldrb	r1, [r1, r0]
   1b298:	ldrb	r1, [r3, r1]
   1b29c:	add	r3, ip, r8
   1b2a0:	strb	r1, [r3, r0]
   1b2a4:	add	r3, sp, #4
   1b2a8:	strb	r1, [r3, r0]
   1b2ac:	add	r0, r0, #1
   1b2b0:	cmp	r0, r2
   1b2b4:	bge	1b2c4 <__assert_fail@plt+0x9e14>
   1b2b8:	ldr	r1, [r4, #80]	; 0x50
   1b2bc:	cmp	r0, r1
   1b2c0:	blt	1b280 <__assert_fail@plt+0x9dd0>
   1b2c4:	add	r1, sp, #4
   1b2c8:	mov	r0, lr
   1b2cc:	b	1b138 <__assert_fail@plt+0x9c88>
   1b2d0:	ldrb	r0, [r1, r0]
   1b2d4:	str	r0, [sp]
   1b2d8:	b	1b188 <__assert_fail@plt+0x9cd8>
   1b2dc:	stm	r9, {r6, sl}
   1b2e0:	str	r8, [r4, #28]
   1b2e4:	str	r8, [r4, #32]
   1b2e8:	sub	sp, fp, #28
   1b2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2f4:	add	fp, sp, #28
   1b2f8:	sub	sp, sp, #28
   1b2fc:	ldr	r8, [r1]
   1b300:	mov	r7, r0
   1b304:	ldr	r6, [fp, #12]
   1b308:	mov	r5, r2
   1b30c:	str	r1, [sp, #20]
   1b310:	str	r3, [sp, #24]
   1b314:	ldr	r0, [r8, #84]	; 0x54
   1b318:	str	r6, [sp, #4]
   1b31c:	str	r0, [sp, #16]
   1b320:	ldr	r0, [fp, #8]
   1b324:	str	r0, [sp]
   1b328:	mov	r0, r7
   1b32c:	bl	1becc <__assert_fail@plt+0xaa1c>
   1b330:	mov	r4, r0
   1b334:	cmp	r0, #0
   1b338:	bne	1b348 <__assert_fail@plt+0x9e98>
   1b33c:	ldr	r0, [r6]
   1b340:	cmp	r0, #0
   1b344:	bne	1b66c <__assert_fail@plt+0xa1bc>
   1b348:	ldrb	r0, [r5, #4]
   1b34c:	cmp	r0, #10
   1b350:	bne	1b49c <__assert_fail@plt+0x9fec>
   1b354:	ldr	r0, [sp, #24]
   1b358:	mov	r9, #0
   1b35c:	orr	sl, r0, #8388608	; 0x800000
   1b360:	ldr	r0, [fp, #8]
   1b364:	str	sl, [sp, #12]
   1b368:	cmp	r0, #0
   1b36c:	beq	1b4d0 <__assert_fail@plt+0xa020>
   1b370:	mov	r0, r5
   1b374:	mov	r1, r7
   1b378:	mov	r2, sl
   1b37c:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1b380:	ldr	r1, [r7, #40]	; 0x28
   1b384:	mov	r6, #0
   1b388:	add	r0, r1, r0
   1b38c:	str	r0, [r7, #40]	; 0x28
   1b390:	ldrb	r0, [r5, #4]
   1b394:	orr	r1, r0, #8
   1b398:	cmp	r1, #10
   1b39c:	bne	1b400 <__assert_fail@plt+0x9f50>
   1b3a0:	ldr	r1, [r8, #64]	; 0x40
   1b3a4:	cmp	r1, #31
   1b3a8:	beq	1b474 <__assert_fail@plt+0x9fc4>
   1b3ac:	ldr	r0, [r8, #56]	; 0x38
   1b3b0:	add	r0, r0, r1, lsl #5
   1b3b4:	add	r2, r1, #1
   1b3b8:	mov	r1, #10
   1b3bc:	cmp	r4, #0
   1b3c0:	str	r2, [r8, #64]	; 0x40
   1b3c4:	str	r9, [r0, #4]!
   1b3c8:	stmib	r0, {r4, r6, r9}
   1b3cc:	str	r9, [r0, #16]
   1b3d0:	str	r9, [r0, #20]
   1b3d4:	str	r1, [r0, #24]
   1b3d8:	mvn	r1, #0
   1b3dc:	str	r1, [r0, #28]
   1b3e0:	strne	r0, [r4]
   1b3e4:	cmp	r6, #0
   1b3e8:	mov	r4, r0
   1b3ec:	strne	r0, [r6]
   1b3f0:	ldrb	r1, [r5, #4]
   1b3f4:	cmp	r1, #10
   1b3f8:	beq	1b370 <__assert_fail@plt+0x9ec0>
   1b3fc:	b	1b5b4 <__assert_fail@plt+0xa104>
   1b400:	cmp	r0, #9
   1b404:	mov	r6, #0
   1b408:	beq	1b3a0 <__assert_fail@plt+0x9ef0>
   1b40c:	ldr	r0, [sp, #16]
   1b410:	ldr	sl, [r8, #84]	; 0x54
   1b414:	ldr	r1, [sp, #20]
   1b418:	ldr	r3, [sp, #24]
   1b41c:	mov	r2, r5
   1b420:	str	r0, [r8, #84]	; 0x54
   1b424:	ldr	r0, [fp, #8]
   1b428:	str	r0, [sp]
   1b42c:	ldr	r0, [fp, #12]
   1b430:	str	r0, [sp, #4]
   1b434:	mov	r0, r7
   1b438:	bl	1becc <__assert_fail@plt+0xaa1c>
   1b43c:	mov	r6, r0
   1b440:	cmp	r0, #0
   1b444:	bne	1b458 <__assert_fail@plt+0x9fa8>
   1b448:	ldr	r0, [fp, #12]
   1b44c:	ldr	r0, [r0]
   1b450:	cmp	r0, #0
   1b454:	bne	1b5bc <__assert_fail@plt+0xa10c>
   1b458:	ldr	r0, [r8, #84]	; 0x54
   1b45c:	orr	r0, r0, sl
   1b460:	ldr	sl, [sp, #12]
   1b464:	str	r0, [r8, #84]	; 0x54
   1b468:	ldr	r1, [r8, #64]	; 0x40
   1b46c:	cmp	r1, #31
   1b470:	bne	1b3ac <__assert_fail@plt+0x9efc>
   1b474:	mov	r0, #996	; 0x3e4
   1b478:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1b47c:	cmp	r0, #0
   1b480:	beq	1b660 <__assert_fail@plt+0xa1b0>
   1b484:	ldr	r1, [r8, #56]	; 0x38
   1b488:	str	r1, [r0]
   1b48c:	mov	r1, #0
   1b490:	str	r1, [r8, #64]	; 0x40
   1b494:	str	r0, [r8, #56]	; 0x38
   1b498:	b	1b3b0 <__assert_fail@plt+0x9f00>
   1b49c:	mov	r0, r4
   1b4a0:	sub	sp, fp, #28
   1b4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4a8:	mov	r0, #996	; 0x3e4
   1b4ac:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1b4b0:	cmp	r0, #0
   1b4b4:	beq	1b660 <__assert_fail@plt+0xa1b0>
   1b4b8:	ldr	r1, [r8, #56]	; 0x38
   1b4bc:	str	r1, [r0]
   1b4c0:	mov	r1, #0
   1b4c4:	str	r1, [r8, #64]	; 0x40
   1b4c8:	str	r0, [r8, #56]	; 0x38
   1b4cc:	b	1b568 <__assert_fail@plt+0xa0b8>
   1b4d0:	mov	r0, r5
   1b4d4:	mov	r1, r7
   1b4d8:	mov	r2, sl
   1b4dc:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1b4e0:	ldr	r1, [r7, #40]	; 0x28
   1b4e4:	mov	r6, #0
   1b4e8:	add	r0, r1, r0
   1b4ec:	str	r0, [r7, #40]	; 0x28
   1b4f0:	ldrb	r0, [r5, #4]
   1b4f4:	orr	r0, r0, #8
   1b4f8:	cmp	r0, #10
   1b4fc:	beq	1b558 <__assert_fail@plt+0xa0a8>
   1b500:	ldr	r0, [sp, #16]
   1b504:	ldr	sl, [r8, #84]	; 0x54
   1b508:	ldr	r1, [sp, #20]
   1b50c:	ldr	r3, [sp, #24]
   1b510:	mov	r2, r5
   1b514:	str	r0, [r8, #84]	; 0x54
   1b518:	ldr	r0, [fp, #12]
   1b51c:	str	r9, [sp]
   1b520:	str	r0, [sp, #4]
   1b524:	mov	r0, r7
   1b528:	bl	1becc <__assert_fail@plt+0xaa1c>
   1b52c:	mov	r6, r0
   1b530:	cmp	r0, #0
   1b534:	bne	1b548 <__assert_fail@plt+0xa098>
   1b538:	ldr	r0, [fp, #12]
   1b53c:	ldr	r0, [r0]
   1b540:	cmp	r0, #0
   1b544:	bne	1b5bc <__assert_fail@plt+0xa10c>
   1b548:	ldr	r0, [r8, #84]	; 0x54
   1b54c:	orr	r0, r0, sl
   1b550:	ldr	sl, [sp, #12]
   1b554:	str	r0, [r8, #84]	; 0x54
   1b558:	ldr	r1, [r8, #64]	; 0x40
   1b55c:	cmp	r1, #31
   1b560:	beq	1b4a8 <__assert_fail@plt+0x9ff8>
   1b564:	ldr	r0, [r8, #56]	; 0x38
   1b568:	add	r0, r0, r1, lsl #5
   1b56c:	add	r2, r1, #1
   1b570:	mov	r1, #10
   1b574:	cmp	r4, #0
   1b578:	str	r2, [r8, #64]	; 0x40
   1b57c:	str	r9, [r0, #4]!
   1b580:	stmib	r0, {r4, r6, r9}
   1b584:	str	r9, [r0, #16]
   1b588:	str	r9, [r0, #20]
   1b58c:	str	r1, [r0, #24]
   1b590:	mvn	r1, #0
   1b594:	str	r1, [r0, #28]
   1b598:	strne	r0, [r4]
   1b59c:	cmp	r6, #0
   1b5a0:	mov	r4, r0
   1b5a4:	strne	r0, [r6]
   1b5a8:	ldrb	r1, [r5, #4]
   1b5ac:	cmp	r1, #10
   1b5b0:	beq	1b4d0 <__assert_fail@plt+0xa020>
   1b5b4:	sub	sp, fp, #28
   1b5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5bc:	cmp	r4, #0
   1b5c0:	beq	1b66c <__assert_fail@plt+0xa1bc>
   1b5c4:	movw	r5, #255	; 0xff
   1b5c8:	movt	r5, #4
   1b5cc:	mov	r6, r4
   1b5d0:	ldr	r4, [r4, #4]
   1b5d4:	cmp	r4, #0
   1b5d8:	bne	1b5cc <__assert_fail@plt+0xa11c>
   1b5dc:	ldr	r4, [r6, #8]
   1b5e0:	cmp	r4, #0
   1b5e4:	bne	1b5cc <__assert_fail@plt+0xa11c>
   1b5e8:	ldr	r0, [r6, #24]
   1b5ec:	and	r0, r0, r5
   1b5f0:	cmp	r0, #3
   1b5f4:	beq	1b628 <__assert_fail@plt+0xa178>
   1b5f8:	cmp	r0, #6
   1b5fc:	bne	1b634 <__assert_fail@plt+0xa184>
   1b600:	ldr	r4, [r6, #20]
   1b604:	ldr	r0, [r4]
   1b608:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1b60c:	ldr	r0, [r4, #4]
   1b610:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1b614:	ldr	r0, [r4, #8]
   1b618:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1b61c:	ldr	r0, [r4, #12]
   1b620:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1b624:	b	1b62c <__assert_fail@plt+0xa17c>
   1b628:	ldr	r4, [r6, #20]
   1b62c:	mov	r0, r4
   1b630:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1b634:	ldr	r0, [r6]
   1b638:	cmp	r0, #0
   1b63c:	beq	1b66c <__assert_fail@plt+0xa1bc>
   1b640:	ldr	r4, [r0, #8]
   1b644:	cmp	r4, r6
   1b648:	mov	r6, r0
   1b64c:	beq	1b5e8 <__assert_fail@plt+0xa138>
   1b650:	cmp	r4, #0
   1b654:	mov	r6, r0
   1b658:	beq	1b5e8 <__assert_fail@plt+0xa138>
   1b65c:	b	1b5cc <__assert_fail@plt+0xa11c>
   1b660:	ldr	r1, [fp, #12]
   1b664:	mov	r0, #12
   1b668:	str	r0, [r1]
   1b66c:	mov	r0, #0
   1b670:	sub	sp, fp, #28
   1b674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b678:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b67c:	add	fp, sp, #24
   1b680:	sub	sp, sp, #8
   1b684:	mov	r9, r0
   1b688:	mov	r7, r1
   1b68c:	ldr	r0, [r1, #40]	; 0x28
   1b690:	ldr	r1, [r1, #56]	; 0x38
   1b694:	cmp	r1, r0
   1b698:	ble	1b780 <__assert_fail@plt+0xa2d0>
   1b69c:	ldr	r1, [r7, #4]
   1b6a0:	mov	r5, r9
   1b6a4:	mov	r8, r2
   1b6a8:	ldrb	r6, [r1, r0]
   1b6ac:	strb	r6, [r5], #4
   1b6b0:	ldr	r0, [r5]
   1b6b4:	bic	r1, r0, #6291456	; 0x600000
   1b6b8:	str	r1, [r5]
   1b6bc:	ldr	r3, [r7, #80]	; 0x50
   1b6c0:	cmp	r3, #2
   1b6c4:	blt	1b6e8 <__assert_fail@plt+0xa238>
   1b6c8:	ldr	r2, [r7, #28]
   1b6cc:	ldr	r1, [r7, #40]	; 0x28
   1b6d0:	cmp	r1, r2
   1b6d4:	beq	1b6e8 <__assert_fail@plt+0xa238>
   1b6d8:	ldr	r2, [r7, #8]
   1b6dc:	ldr	r1, [r2, r1, lsl #2]
   1b6e0:	cmn	r1, #1
   1b6e4:	beq	1bbc4 <__assert_fail@plt+0xa714>
   1b6e8:	movw	r1, #65280	; 0xff00
   1b6ec:	cmp	r6, #92	; 0x5c
   1b6f0:	movt	r1, #65439	; 0xff9f
   1b6f4:	bne	1b798 <__assert_fail@plt+0xa2e8>
   1b6f8:	ldr	r6, [r7, #40]	; 0x28
   1b6fc:	ldr	r4, [r7, #48]	; 0x30
   1b700:	add	r2, r6, #1
   1b704:	cmp	r2, r4
   1b708:	bge	1b7ec <__assert_fail@plt+0xa33c>
   1b70c:	ldrb	r4, [r7, #75]	; 0x4b
   1b710:	cmp	r4, #0
   1b714:	bne	1be58 <__assert_fail@plt+0xa9a8>
   1b718:	ldr	r3, [r7, #4]
   1b71c:	ldrb	r6, [r3, r2]
   1b720:	and	r0, r0, r1
   1b724:	strb	r6, [r9]
   1b728:	orr	r4, r0, #1
   1b72c:	str	r4, [r9, #4]
   1b730:	ldr	r0, [r7, #80]	; 0x50
   1b734:	cmp	r0, #2
   1b738:	blt	1ba10 <__assert_fail@plt+0xa560>
   1b73c:	ldr	r0, [r7, #8]
   1b740:	ldr	r1, [r7, #40]	; 0x28
   1b744:	add	r0, r0, r1, lsl #2
   1b748:	ldr	r4, [r0, #4]
   1b74c:	mov	r0, r4
   1b750:	bl	113b4 <iswalnum@plt>
   1b754:	sub	r1, r4, #95	; 0x5f
   1b758:	cmp	r0, #0
   1b75c:	clz	r1, r1
   1b760:	movwne	r0, #1
   1b764:	lsr	r1, r1, #5
   1b768:	orr	r0, r1, r0
   1b76c:	ldr	r1, [r5]
   1b770:	bic	r1, r1, #4194304	; 0x400000
   1b774:	orr	r0, r1, r0, lsl #22
   1b778:	uxtb	r1, r6
   1b77c:	b	1ba34 <__assert_fail@plt+0xa584>
   1b780:	mov	r0, #2
   1b784:	mov	r4, #0
   1b788:	strb	r0, [r9, #4]
   1b78c:	mov	r0, r4
   1b790:	sub	sp, fp, #24
   1b794:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b798:	and	r0, r0, r1
   1b79c:	orr	r4, r0, #1
   1b7a0:	str	r4, [r5]
   1b7a4:	ldr	r0, [r7, #80]	; 0x50
   1b7a8:	cmp	r0, #2
   1b7ac:	blt	1b7f8 <__assert_fail@plt+0xa348>
   1b7b0:	ldr	r0, [r7, #8]
   1b7b4:	ldr	r1, [r7, #40]	; 0x28
   1b7b8:	ldr	r4, [r0, r1, lsl #2]
   1b7bc:	mov	r0, r4
   1b7c0:	bl	113b4 <iswalnum@plt>
   1b7c4:	sub	r1, r4, #95	; 0x5f
   1b7c8:	cmp	r0, #0
   1b7cc:	clz	r1, r1
   1b7d0:	movwne	r0, #1
   1b7d4:	lsr	r1, r1, #5
   1b7d8:	orr	r0, r1, r0
   1b7dc:	ldr	r1, [r5]
   1b7e0:	bic	r1, r1, #4194304	; 0x400000
   1b7e4:	orr	r0, r1, r0, lsl #22
   1b7e8:	b	1b818 <__assert_fail@plt+0xa368>
   1b7ec:	and	r0, r0, r1
   1b7f0:	orr	r0, r0, #36	; 0x24
   1b7f4:	b	1bbd8 <__assert_fail@plt+0xa728>
   1b7f8:	bl	1136c <__ctype_b_loc@plt>
   1b7fc:	ldr	r0, [r0]
   1b800:	cmp	r6, #95	; 0x5f
   1b804:	add	r0, r0, r6, lsl #1
   1b808:	ldrh	r0, [r0]
   1b80c:	ubfx	r0, r0, #3, #1
   1b810:	movweq	r0, #1
   1b814:	orr	r0, r4, r0, lsl #22
   1b818:	sub	r1, r6, #10
   1b81c:	mov	r4, #1
   1b820:	str	r0, [r5]
   1b824:	cmp	r1, #115	; 0x73
   1b828:	bhi	1be4c <__assert_fail@plt+0xa99c>
   1b82c:	add	r2, pc, #0
   1b830:	ldr	pc, [r2, r1, lsl #2]
   1b834:	andeq	fp, r1, r4, lsl #20
   1b838:	andeq	fp, r1, ip, asr #28
   1b83c:	andeq	fp, r1, ip, asr #28
   1b840:	andeq	fp, r1, ip, asr #28
   1b844:	andeq	fp, r1, ip, asr #28
   1b848:	andeq	fp, r1, ip, asr #28
   1b84c:	andeq	fp, r1, ip, asr #28
   1b850:	andeq	fp, r1, ip, asr #28
   1b854:	andeq	fp, r1, ip, asr #28
   1b858:	andeq	fp, r1, ip, asr #28
   1b85c:	andeq	fp, r1, ip, asr #28
   1b860:	andeq	fp, r1, ip, asr #28
   1b864:	andeq	fp, r1, ip, asr #28
   1b868:	andeq	fp, r1, ip, asr #28
   1b86c:	andeq	fp, r1, ip, asr #28
   1b870:	andeq	fp, r1, ip, asr #28
   1b874:	andeq	fp, r1, ip, asr #28
   1b878:	andeq	fp, r1, ip, asr #28
   1b87c:	andeq	fp, r1, ip, asr #28
   1b880:	andeq	fp, r1, ip, asr #28
   1b884:	andeq	fp, r1, ip, asr #28
   1b888:	andeq	fp, r1, ip, asr #28
   1b88c:	andeq	fp, r1, ip, asr #28
   1b890:	andeq	fp, r1, ip, asr #28
   1b894:	andeq	fp, r1, ip, asr #28
   1b898:	andeq	fp, r1, ip, asr #28
   1b89c:	andeq	fp, r1, ip, ror #23
   1b8a0:	andeq	fp, r1, ip, asr #28
   1b8a4:	andeq	fp, r1, ip, asr #28
   1b8a8:	andeq	fp, r1, ip, asr #28
   1b8ac:	andeq	fp, r1, r4, asr #24
   1b8b0:	andeq	fp, r1, r0, asr ip
   1b8b4:	andeq	fp, r1, ip, asr ip
   1b8b8:	andeq	fp, r1, r4, ror #24
   1b8bc:	andeq	fp, r1, ip, asr #28
   1b8c0:	andeq	fp, r1, ip, asr #28
   1b8c4:	andeq	fp, r1, r4, ror ip
   1b8c8:	andeq	fp, r1, ip, asr #28
   1b8cc:	andeq	fp, r1, ip, asr #28
   1b8d0:	andeq	fp, r1, ip, asr #28
   1b8d4:	andeq	fp, r1, ip, asr #28
   1b8d8:	andeq	fp, r1, ip, asr #28
   1b8dc:	andeq	fp, r1, ip, asr #28
   1b8e0:	andeq	fp, r1, ip, asr #28
   1b8e4:	andeq	fp, r1, ip, asr #28
   1b8e8:	andeq	fp, r1, ip, asr #28
   1b8ec:	andeq	fp, r1, ip, asr #28
   1b8f0:	andeq	fp, r1, ip, asr #28
   1b8f4:	andeq	fp, r1, ip, asr #28
   1b8f8:	andeq	fp, r1, ip, asr #28
   1b8fc:	andeq	fp, r1, ip, asr #28
   1b900:	andeq	fp, r1, ip, asr #28
   1b904:	andeq	fp, r1, ip, asr #28
   1b908:	andeq	fp, r1, ip, ror ip
   1b90c:	andeq	fp, r1, ip, asr #28
   1b910:	andeq	fp, r1, ip, asr #28
   1b914:	andeq	fp, r1, ip, asr #28
   1b918:	andeq	fp, r1, ip, asr #28
   1b91c:	andeq	fp, r1, ip, asr #28
   1b920:	andeq	fp, r1, ip, asr #28
   1b924:	andeq	fp, r1, ip, asr #28
   1b928:	andeq	fp, r1, ip, asr #28
   1b92c:	andeq	fp, r1, ip, asr #28
   1b930:	andeq	fp, r1, ip, asr #28
   1b934:	andeq	fp, r1, ip, asr #28
   1b938:	andeq	fp, r1, ip, asr #28
   1b93c:	andeq	fp, r1, ip, asr #28
   1b940:	andeq	fp, r1, ip, asr #28
   1b944:	andeq	fp, r1, ip, asr #28
   1b948:	andeq	fp, r1, ip, asr #28
   1b94c:	andeq	fp, r1, ip, asr #28
   1b950:	andeq	fp, r1, ip, asr #28
   1b954:	andeq	fp, r1, ip, asr #28
   1b958:	andeq	fp, r1, ip, asr #28
   1b95c:	andeq	fp, r1, ip, asr #28
   1b960:	andeq	fp, r1, ip, asr #28
   1b964:	andeq	fp, r1, ip, asr #28
   1b968:	andeq	fp, r1, ip, asr #28
   1b96c:	andeq	fp, r1, ip, asr #28
   1b970:	andeq	fp, r1, ip, asr #28
   1b974:	andeq	fp, r1, ip, asr #28
   1b978:	andeq	fp, r1, ip, lsl #25
   1b97c:	andeq	fp, r1, ip, asr #28
   1b980:	andeq	fp, r1, ip, asr #28
   1b984:	muleq	r1, r4, ip
   1b988:	andeq	fp, r1, ip, asr #28
   1b98c:	andeq	fp, r1, ip, asr #28
   1b990:	andeq	fp, r1, ip, asr #28
   1b994:	andeq	fp, r1, ip, asr #28
   1b998:	andeq	fp, r1, ip, asr #28
   1b99c:	andeq	fp, r1, ip, asr #28
   1b9a0:	andeq	fp, r1, ip, asr #28
   1b9a4:	andeq	fp, r1, ip, asr #28
   1b9a8:	andeq	fp, r1, ip, asr #28
   1b9ac:	andeq	fp, r1, ip, asr #28
   1b9b0:	andeq	fp, r1, ip, asr #28
   1b9b4:	andeq	fp, r1, ip, asr #28
   1b9b8:	andeq	fp, r1, ip, asr #28
   1b9bc:	andeq	fp, r1, ip, asr #28
   1b9c0:	andeq	fp, r1, ip, asr #28
   1b9c4:	andeq	fp, r1, ip, asr #28
   1b9c8:	andeq	fp, r1, ip, asr #28
   1b9cc:	andeq	fp, r1, ip, asr #28
   1b9d0:	andeq	fp, r1, ip, asr #28
   1b9d4:	andeq	fp, r1, ip, asr #28
   1b9d8:	andeq	fp, r1, ip, asr #28
   1b9dc:	andeq	fp, r1, ip, asr #28
   1b9e0:	andeq	fp, r1, ip, asr #28
   1b9e4:	andeq	fp, r1, ip, asr #28
   1b9e8:	andeq	fp, r1, ip, asr #28
   1b9ec:	andeq	fp, r1, ip, asr #28
   1b9f0:	andeq	fp, r1, ip, asr #28
   1b9f4:	andeq	fp, r1, ip, asr #28
   1b9f8:	andeq	fp, r1, r4, asr #25
   1b9fc:	ldrdeq	fp, [r1], -r4
   1ba00:	andeq	fp, r1, r8, ror #25
   1ba04:	tst	r8, #2048	; 0x800
   1ba08:	bne	1bce0 <__assert_fail@plt+0xa830>
   1ba0c:	b	1be4c <__assert_fail@plt+0xa99c>
   1ba10:	bl	1136c <__ctype_b_loc@plt>
   1ba14:	ldr	r0, [r0]
   1ba18:	uxtb	r1, r6
   1ba1c:	cmp	r1, #95	; 0x5f
   1ba20:	add	r0, r0, r1, lsl #1
   1ba24:	ldrh	r0, [r0]
   1ba28:	ubfx	r0, r0, #3, #1
   1ba2c:	movweq	r0, #1
   1ba30:	orr	r0, r4, r0, lsl #22
   1ba34:	mvn	r2, #38	; 0x26
   1ba38:	mov	r4, #2
   1ba3c:	str	r0, [r5]
   1ba40:	uxtab	r2, r2, r6
   1ba44:	cmp	r2, #86	; 0x56
   1ba48:	bhi	1be4c <__assert_fail@plt+0xa99c>
   1ba4c:	add	r3, pc, #0
   1ba50:	ldr	pc, [r3, r2, lsl #2]
   1ba54:	andeq	fp, r1, r4, lsr #26
   1ba58:	andeq	fp, r1, r4, lsr sp
   1ba5c:	andeq	fp, r1, r4, asr #26
   1ba60:	andeq	fp, r1, ip, asr #28
   1ba64:	andeq	fp, r1, r4, asr sp
   1ba68:	andeq	fp, r1, ip, asr #28
   1ba6c:	andeq	fp, r1, ip, asr #28
   1ba70:	andeq	fp, r1, ip, asr #28
   1ba74:	andeq	fp, r1, ip, asr #28
   1ba78:	andeq	fp, r1, ip, asr #28
   1ba7c:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba80:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba84:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba88:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba8c:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba90:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba94:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba98:			; <UNDEFINED> instruction: 0x0001bbb0
   1ba9c:			; <UNDEFINED> instruction: 0x0001bbb0
   1baa0:	andeq	fp, r1, ip, asr #28
   1baa4:	andeq	fp, r1, ip, asr #28
   1baa8:	andeq	fp, r1, ip, ror #26
   1baac:	andeq	fp, r1, ip, asr #28
   1bab0:	andeq	fp, r1, ip, ror sp
   1bab4:	andeq	fp, r1, ip, lsl #27
   1bab8:	andeq	fp, r1, ip, asr #28
   1babc:	andeq	fp, r1, ip, asr #28
   1bac0:	andeq	fp, r1, r4, lsr #27
   1bac4:	andeq	fp, r1, ip, asr #28
   1bac8:	andeq	fp, r1, ip, asr #28
   1bacc:	andeq	fp, r1, ip, asr #28
   1bad0:	andeq	fp, r1, ip, asr #28
   1bad4:	andeq	fp, r1, ip, asr #28
   1bad8:	andeq	fp, r1, ip, asr #28
   1badc:	andeq	fp, r1, ip, asr #28
   1bae0:	andeq	fp, r1, ip, asr #28
   1bae4:	andeq	fp, r1, ip, asr #28
   1bae8:	andeq	fp, r1, ip, asr #28
   1baec:	andeq	fp, r1, ip, asr #28
   1baf0:	andeq	fp, r1, ip, asr #28
   1baf4:	andeq	fp, r1, ip, asr #28
   1baf8:	andeq	fp, r1, ip, asr #28
   1bafc:	andeq	fp, r1, ip, asr #28
   1bb00:	andeq	fp, r1, ip, asr #28
   1bb04:			; <UNDEFINED> instruction: 0x0001bdb4
   1bb08:	andeq	fp, r1, ip, asr #28
   1bb0c:	andeq	fp, r1, ip, asr #28
   1bb10:	andeq	fp, r1, ip, asr #28
   1bb14:	andeq	fp, r1, r4, asr #27
   1bb18:	andeq	fp, r1, ip, asr #28
   1bb1c:	andeq	fp, r1, ip, asr #28
   1bb20:	andeq	fp, r1, ip, asr #28
   1bb24:	andeq	fp, r1, ip, asr #28
   1bb28:	andeq	fp, r1, ip, asr #28
   1bb2c:	andeq	fp, r1, ip, asr #28
   1bb30:	andeq	fp, r1, ip, asr #28
   1bb34:	andeq	fp, r1, ip, asr #28
   1bb38:	ldrdeq	fp, [r1], -r4
   1bb3c:	andeq	fp, r1, ip, asr #28
   1bb40:	andeq	fp, r1, r4, ror #27
   1bb44:	andeq	fp, r1, ip, asr #28
   1bb48:	andeq	fp, r1, ip, asr #28
   1bb4c:	andeq	fp, r1, ip, asr #28
   1bb50:	andeq	fp, r1, ip, asr #28
   1bb54:	andeq	fp, r1, ip, asr #28
   1bb58:	andeq	fp, r1, ip, asr #28
   1bb5c:	andeq	fp, r1, ip, asr #28
   1bb60:	andeq	fp, r1, ip, asr #28
   1bb64:	andeq	fp, r1, ip, asr #28
   1bb68:	andeq	fp, r1, ip, asr #28
   1bb6c:	andeq	fp, r1, ip, asr #28
   1bb70:	andeq	fp, r1, ip, asr #28
   1bb74:	andeq	fp, r1, ip, asr #28
   1bb78:	andeq	fp, r1, ip, asr #28
   1bb7c:	andeq	fp, r1, ip, asr #28
   1bb80:	andeq	fp, r1, ip, asr #28
   1bb84:	strdeq	fp, [r1], -r4
   1bb88:	andeq	fp, r1, ip, asr #28
   1bb8c:	andeq	fp, r1, ip, asr #28
   1bb90:	andeq	fp, r1, ip, asr #28
   1bb94:	andeq	fp, r1, r4, lsl #28
   1bb98:	andeq	fp, r1, ip, asr #28
   1bb9c:	andeq	fp, r1, ip, asr #28
   1bba0:	andeq	fp, r1, ip, asr #28
   1bba4:	andeq	fp, r1, r4, lsl lr
   1bba8:	andeq	fp, r1, r8, lsr #28
   1bbac:	andeq	fp, r1, r4, lsr lr
   1bbb0:	tst	r8, #16384	; 0x4000
   1bbb4:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bbb8:	sub	r1, r1, #49	; 0x31
   1bbbc:	mov	r2, #4
   1bbc0:	b	1bcac <__assert_fail@plt+0xa7fc>
   1bbc4:	movw	r1, #65280	; 0xff00
   1bbc8:	movt	r1, #65439	; 0xff9f
   1bbcc:	and	r0, r0, r1
   1bbd0:	orr	r0, r0, #1
   1bbd4:	orr	r0, r0, #2097152	; 0x200000
   1bbd8:	str	r0, [r5]
   1bbdc:	mov	r4, #1
   1bbe0:	mov	r0, r4
   1bbe4:	sub	sp, fp, #24
   1bbe8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bbec:	tst	r8, #8
   1bbf0:	bne	1bc3c <__assert_fail@plt+0xa78c>
   1bbf4:	ldr	r1, [r7, #40]	; 0x28
   1bbf8:	ldr	r2, [r7, #48]	; 0x30
   1bbfc:	add	r1, r1, #1
   1bc00:	cmp	r1, r2
   1bc04:	beq	1bc3c <__assert_fail@plt+0xa78c>
   1bc08:	str	r1, [r7, #40]	; 0x28
   1bc0c:	mov	r0, sp
   1bc10:	mov	r1, r7
   1bc14:	mov	r2, r8
   1bc18:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1bc1c:	ldr	r0, [r7, #40]	; 0x28
   1bc20:	sub	r0, r0, #1
   1bc24:	str	r0, [r7, #40]	; 0x28
   1bc28:	ldrb	r0, [sp, #4]
   1bc2c:	sub	r0, r0, #9
   1bc30:	cmp	r0, #1
   1bc34:	bhi	1be4c <__assert_fail@plt+0xa99c>
   1bc38:	ldr	r0, [r5]
   1bc3c:	mov	r1, #32
   1bc40:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bc44:	tst	r8, #8192	; 0x2000
   1bc48:	bne	1bd3c <__assert_fail@plt+0xa88c>
   1bc4c:	b	1be4c <__assert_fail@plt+0xa99c>
   1bc50:	tst	r8, #8192	; 0x2000
   1bc54:	bne	1bd4c <__assert_fail@plt+0xa89c>
   1bc58:	b	1be4c <__assert_fail@plt+0xa99c>
   1bc5c:	mov	r1, #11
   1bc60:	b	1be44 <__assert_fail@plt+0xa994>
   1bc64:	movw	r1, #1026	; 0x402
   1bc68:	tst	r8, r1
   1bc6c:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bc70:	b	1bd64 <__assert_fail@plt+0xa8b4>
   1bc74:	mov	r1, #5
   1bc78:	b	1be44 <__assert_fail@plt+0xa994>
   1bc7c:	movw	r1, #1026	; 0x402
   1bc80:	tst	r8, r1
   1bc84:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bc88:	b	1bd9c <__assert_fail@plt+0xa8ec>
   1bc8c:	mov	r1, #20
   1bc90:	b	1be44 <__assert_fail@plt+0xa994>
   1bc94:	movw	r1, #8
   1bc98:	movt	r1, #128	; 0x80
   1bc9c:	tst	r8, r1
   1bca0:	beq	1bcf8 <__assert_fail@plt+0xa848>
   1bca4:	mov	r1, #16
   1bca8:	mov	r2, #12
   1bcac:	bfi	r0, r2, #0, #8
   1bcb0:	str	r1, [r9]
   1bcb4:	str	r0, [r9, #4]
   1bcb8:	mov	r0, r4
   1bcbc:	sub	sp, fp, #24
   1bcc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bcc4:	and	r1, r8, #4608	; 0x1200
   1bcc8:	cmp	r1, #4608	; 0x1200
   1bccc:	beq	1be20 <__assert_fail@plt+0xa970>
   1bcd0:	b	1be4c <__assert_fail@plt+0xa99c>
   1bcd4:	and	r1, r8, #33792	; 0x8400
   1bcd8:	cmp	r1, #32768	; 0x8000
   1bcdc:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bce0:	mov	r1, #10
   1bce4:	b	1be44 <__assert_fail@plt+0xa994>
   1bce8:	and	r1, r8, #4608	; 0x1200
   1bcec:	cmp	r1, #4608	; 0x1200
   1bcf0:	beq	1be40 <__assert_fail@plt+0xa990>
   1bcf4:	b	1be4c <__assert_fail@plt+0xa99c>
   1bcf8:	ldr	r1, [r7, #40]	; 0x28
   1bcfc:	cmp	r1, #0
   1bd00:	beq	1bca4 <__assert_fail@plt+0xa7f4>
   1bd04:	tst	r8, #2048	; 0x800
   1bd08:	beq	1be4c <__assert_fail@plt+0xa99c>
   1bd0c:	ldr	r2, [r7, #4]
   1bd10:	add	r1, r1, r2
   1bd14:	ldrb	r1, [r1, #-1]
   1bd18:	cmp	r1, #10
   1bd1c:	beq	1bca4 <__assert_fail@plt+0xa7f4>
   1bd20:	b	1be4c <__assert_fail@plt+0xa99c>
   1bd24:	tst	r8, #524288	; 0x80000
   1bd28:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd2c:	mov	r1, #128	; 0x80
   1bd30:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bd34:	tst	r8, #8192	; 0x2000
   1bd38:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd3c:	mov	r1, #8
   1bd40:	b	1be44 <__assert_fail@plt+0xa994>
   1bd44:	tst	r8, #8192	; 0x2000
   1bd48:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd4c:	mov	r1, #9
   1bd50:	b	1be44 <__assert_fail@plt+0xa994>
   1bd54:	movw	r1, #1026	; 0x402
   1bd58:	and	r1, r8, r1
   1bd5c:	cmp	r1, #2
   1bd60:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd64:	mov	r1, #18
   1bd68:	b	1be44 <__assert_fail@plt+0xa994>
   1bd6c:	tst	r8, #524288	; 0x80000
   1bd70:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd74:	mov	r1, #6
   1bd78:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bd7c:	tst	r8, #524288	; 0x80000
   1bd80:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd84:	mov	r1, #9
   1bd88:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bd8c:	movw	r1, #1026	; 0x402
   1bd90:	and	r1, r8, r1
   1bd94:	cmp	r1, #2
   1bd98:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bd9c:	mov	r1, #19
   1bda0:	b	1be44 <__assert_fail@plt+0xa994>
   1bda4:	tst	r8, #524288	; 0x80000
   1bda8:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bdac:	mov	r1, #512	; 0x200
   1bdb0:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bdb4:	tst	r8, #524288	; 0x80000
   1bdb8:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bdbc:	mov	r1, #35	; 0x23
   1bdc0:	b	1be44 <__assert_fail@plt+0xa994>
   1bdc4:	tst	r8, #524288	; 0x80000
   1bdc8:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bdcc:	mov	r1, #33	; 0x21
   1bdd0:	b	1be44 <__assert_fail@plt+0xa994>
   1bdd4:	tst	r8, #524288	; 0x80000
   1bdd8:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bddc:	mov	r1, #64	; 0x40
   1bde0:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bde4:	tst	r8, #524288	; 0x80000
   1bde8:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bdec:	mov	r1, #256	; 0x100
   1bdf0:	b	1bca8 <__assert_fail@plt+0xa7f8>
   1bdf4:	tst	r8, #524288	; 0x80000
   1bdf8:	bne	1be4c <__assert_fail@plt+0xa99c>
   1bdfc:	mov	r1, #34	; 0x22
   1be00:	b	1be44 <__assert_fail@plt+0xa994>
   1be04:	tst	r8, #524288	; 0x80000
   1be08:	bne	1be4c <__assert_fail@plt+0xa99c>
   1be0c:	mov	r1, #32
   1be10:	b	1be44 <__assert_fail@plt+0xa994>
   1be14:	and	r1, r8, #4608	; 0x1200
   1be18:	cmp	r1, #512	; 0x200
   1be1c:	bne	1be4c <__assert_fail@plt+0xa99c>
   1be20:	mov	r1, #23
   1be24:	b	1be44 <__assert_fail@plt+0xa994>
   1be28:	tst	r8, #33792	; 0x8400
   1be2c:	bne	1be4c <__assert_fail@plt+0xa99c>
   1be30:	b	1bce0 <__assert_fail@plt+0xa830>
   1be34:	and	r1, r8, #4608	; 0x1200
   1be38:	cmp	r1, #512	; 0x200
   1be3c:	bne	1be4c <__assert_fail@plt+0xa99c>
   1be40:	mov	r1, #24
   1be44:	bfi	r0, r1, #0, #8
   1be48:	str	r0, [r5]
   1be4c:	mov	r0, r4
   1be50:	sub	sp, fp, #24
   1be54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1be58:	cmp	r3, #2
   1be5c:	blt	1be8c <__assert_fail@plt+0xa9dc>
   1be60:	ldr	r3, [r7, #8]
   1be64:	ldr	r4, [r3, r2, lsl #2]
   1be68:	cmn	r4, #1
   1be6c:	beq	1b718 <__assert_fail@plt+0xa268>
   1be70:	ldr	r4, [r7, #28]
   1be74:	add	r6, r6, #2
   1be78:	cmp	r4, r6
   1be7c:	beq	1be8c <__assert_fail@plt+0xa9dc>
   1be80:	ldr	r3, [r3, r6, lsl #2]
   1be84:	cmn	r3, #1
   1be88:	beq	1b718 <__assert_fail@plt+0xa268>
   1be8c:	ldrb	r3, [r7, #76]	; 0x4c
   1be90:	mov	r6, r2
   1be94:	cmp	r3, #0
   1be98:	beq	1bea4 <__assert_fail@plt+0xa9f4>
   1be9c:	ldr	r6, [r7, #12]
   1bea0:	ldr	r6, [r6, r2, lsl #2]
   1bea4:	ldr	r4, [r7, #24]
   1bea8:	ldr	ip, [r7]
   1beac:	cmp	r3, #0
   1beb0:	add	r6, r4, r6
   1beb4:	add	r6, ip, r6
   1beb8:	ldrsb	r6, [r6]
   1bebc:	beq	1b720 <__assert_fail@plt+0xa270>
   1bec0:	cmn	r6, #1
   1bec4:	ble	1b718 <__assert_fail@plt+0xa268>
   1bec8:	b	1b720 <__assert_fail@plt+0xa270>
   1becc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bed0:	add	fp, sp, #28
   1bed4:	sub	sp, sp, #12
   1bed8:	mov	r4, r1
   1bedc:	ldr	r8, [r1]
   1bee0:	ldr	r1, [fp, #8]
   1bee4:	ldr	r5, [fp, #12]
   1bee8:	mov	r7, r2
   1beec:	str	r0, [sp, #8]
   1bef0:	mov	sl, r3
   1bef4:	mov	r9, r1
   1bef8:	str	r1, [sp]
   1befc:	mov	r1, r4
   1bf00:	str	r5, [sp, #4]
   1bf04:	bl	1c330 <__assert_fail@plt+0xae80>
   1bf08:	mov	r3, r5
   1bf0c:	mov	r5, r0
   1bf10:	mov	r0, #0
   1bf14:	cmp	r5, #0
   1bf18:	bne	1bf28 <__assert_fail@plt+0xaa78>
   1bf1c:	ldr	r1, [r3]
   1bf20:	cmp	r1, #0
   1bf24:	bne	1c12c <__assert_fail@plt+0xac7c>
   1bf28:	cmp	r9, #0
   1bf2c:	beq	1c020 <__assert_fail@plt+0xab70>
   1bf30:	ldrb	r0, [r7, #4]
   1bf34:	orr	r1, r0, #8
   1bf38:	cmp	r1, #10
   1bf3c:	cmpne	r0, #9
   1bf40:	beq	1c128 <__assert_fail@plt+0xac78>
   1bf44:	ldr	r0, [sp, #8]
   1bf48:	str	r3, [sp, #4]
   1bf4c:	mov	r1, r4
   1bf50:	mov	r2, r7
   1bf54:	mov	r3, sl
   1bf58:	str	r9, [sp]
   1bf5c:	bl	1c330 <__assert_fail@plt+0xae80>
   1bf60:	ldr	r3, [fp, #12]
   1bf64:	cmp	r5, #0
   1bf68:	mov	r2, r5
   1bf6c:	mov	r6, r0
   1bf70:	movwne	r2, #1
   1bf74:	cmp	r0, #0
   1bf78:	bne	1bf88 <__assert_fail@plt+0xaad8>
   1bf7c:	ldr	r1, [r3]
   1bf80:	cmp	r1, #0
   1bf84:	bne	1c134 <__assert_fail@plt+0xac84>
   1bf88:	cmp	r5, #0
   1bf8c:	cmpne	r6, #0
   1bf90:	bne	1bfa0 <__assert_fail@plt+0xaaf0>
   1bf94:	cmp	r5, #0
   1bf98:	moveq	r5, r6
   1bf9c:	b	1bf30 <__assert_fail@plt+0xaa80>
   1bfa0:	ldr	r1, [r8, #64]	; 0x40
   1bfa4:	cmp	r1, #31
   1bfa8:	beq	1bff4 <__assert_fail@plt+0xab44>
   1bfac:	ldr	r0, [r8, #56]	; 0x38
   1bfb0:	add	r0, r0, r1, lsl #5
   1bfb4:	add	r2, r1, #1
   1bfb8:	mov	r1, #0
   1bfbc:	str	r2, [r8, #64]	; 0x40
   1bfc0:	str	r1, [r0, #4]!
   1bfc4:	stmib	r0, {r5, r6}
   1bfc8:	str	r1, [r0, #12]
   1bfcc:	str	r1, [r0, #16]
   1bfd0:	str	r1, [r0, #20]
   1bfd4:	mov	r1, #16
   1bfd8:	str	r1, [r0, #24]
   1bfdc:	mvn	r1, #0
   1bfe0:	str	r1, [r0, #28]
   1bfe4:	str	r0, [r5]
   1bfe8:	str	r0, [r6]
   1bfec:	mov	r5, r0
   1bff0:	b	1bf30 <__assert_fail@plt+0xaa80>
   1bff4:	mov	r0, #996	; 0x3e4
   1bff8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1bffc:	cmp	r0, #0
   1c000:	beq	1c1e0 <__assert_fail@plt+0xad30>
   1c004:	ldr	r1, [r8, #56]	; 0x38
   1c008:	ldr	r3, [fp, #12]
   1c00c:	str	r1, [r0]
   1c010:	mov	r1, #0
   1c014:	str	r1, [r8, #64]	; 0x40
   1c018:	str	r0, [r8, #56]	; 0x38
   1c01c:	b	1bfb0 <__assert_fail@plt+0xab00>
   1c020:	mov	r9, #0
   1c024:	ldrb	r0, [r7, #4]
   1c028:	orr	r0, r0, #8
   1c02c:	cmp	r0, #10
   1c030:	bne	1c050 <__assert_fail@plt+0xaba0>
   1c034:	b	1c128 <__assert_fail@plt+0xac78>
   1c038:	cmp	r5, #0
   1c03c:	moveq	r5, r6
   1c040:	ldrb	r0, [r7, #4]
   1c044:	orr	r0, r0, #8
   1c048:	cmp	r0, #10
   1c04c:	beq	1c128 <__assert_fail@plt+0xac78>
   1c050:	ldr	r0, [sp, #8]
   1c054:	str	r3, [sp, #4]
   1c058:	mov	r1, r4
   1c05c:	mov	r2, r7
   1c060:	mov	r3, sl
   1c064:	str	r9, [sp]
   1c068:	bl	1c330 <__assert_fail@plt+0xae80>
   1c06c:	ldr	r3, [fp, #12]
   1c070:	cmp	r5, #0
   1c074:	mov	r2, r5
   1c078:	mov	r6, r0
   1c07c:	movwne	r2, #1
   1c080:	cmp	r0, #0
   1c084:	bne	1c094 <__assert_fail@plt+0xabe4>
   1c088:	ldr	r1, [r3]
   1c08c:	cmp	r1, #0
   1c090:	bne	1c134 <__assert_fail@plt+0xac84>
   1c094:	cmp	r5, #0
   1c098:	cmpne	r6, #0
   1c09c:	beq	1c038 <__assert_fail@plt+0xab88>
   1c0a0:	ldr	r1, [r8, #64]	; 0x40
   1c0a4:	cmp	r1, #31
   1c0a8:	beq	1c0fc <__assert_fail@plt+0xac4c>
   1c0ac:	ldr	r0, [r8, #56]	; 0x38
   1c0b0:	add	r0, r0, r1, lsl #5
   1c0b4:	add	r2, r1, #1
   1c0b8:	mov	r1, #16
   1c0bc:	str	r2, [r8, #64]	; 0x40
   1c0c0:	str	r9, [r0, #4]!
   1c0c4:	stmib	r0, {r5, r6, r9}
   1c0c8:	str	r9, [r0, #16]
   1c0cc:	str	r9, [r0, #20]
   1c0d0:	str	r1, [r0, #24]
   1c0d4:	mvn	r1, #0
   1c0d8:	str	r1, [r0, #28]
   1c0dc:	str	r0, [r5]
   1c0e0:	str	r0, [r6]
   1c0e4:	mov	r5, r0
   1c0e8:	ldrb	r0, [r7, #4]
   1c0ec:	orr	r0, r0, #8
   1c0f0:	cmp	r0, #10
   1c0f4:	bne	1c050 <__assert_fail@plt+0xaba0>
   1c0f8:	b	1c128 <__assert_fail@plt+0xac78>
   1c0fc:	mov	r0, #996	; 0x3e4
   1c100:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1c104:	cmp	r0, #0
   1c108:	beq	1c1e0 <__assert_fail@plt+0xad30>
   1c10c:	ldr	r1, [r8, #56]	; 0x38
   1c110:	ldr	r3, [fp, #12]
   1c114:	str	r1, [r0]
   1c118:	mov	r1, #0
   1c11c:	str	r1, [r8, #64]	; 0x40
   1c120:	str	r0, [r8, #56]	; 0x38
   1c124:	b	1c0b0 <__assert_fail@plt+0xac00>
   1c128:	mov	r0, r5
   1c12c:	sub	sp, fp, #28
   1c130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c134:	mov	r0, #0
   1c138:	cmp	r2, #0
   1c13c:	beq	1c12c <__assert_fail@plt+0xac7c>
   1c140:	movw	r6, #255	; 0xff
   1c144:	movt	r6, #4
   1c148:	mov	r7, r5
   1c14c:	ldr	r5, [r5, #4]
   1c150:	cmp	r5, #0
   1c154:	bne	1c148 <__assert_fail@plt+0xac98>
   1c158:	ldr	r5, [r7, #8]
   1c15c:	cmp	r5, #0
   1c160:	bne	1c148 <__assert_fail@plt+0xac98>
   1c164:	ldr	r1, [r7, #24]
   1c168:	and	r1, r1, r6
   1c16c:	cmp	r1, #3
   1c170:	beq	1c1a4 <__assert_fail@plt+0xacf4>
   1c174:	cmp	r1, #6
   1c178:	bne	1c1b4 <__assert_fail@plt+0xad04>
   1c17c:	ldr	r4, [r7, #20]
   1c180:	ldr	r0, [r4]
   1c184:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c188:	ldr	r0, [r4, #4]
   1c18c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c190:	ldr	r0, [r4, #8]
   1c194:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c198:	ldr	r0, [r4, #12]
   1c19c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c1a0:	b	1c1a8 <__assert_fail@plt+0xacf8>
   1c1a4:	ldr	r4, [r7, #20]
   1c1a8:	mov	r0, r4
   1c1ac:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c1b0:	mov	r0, #0
   1c1b4:	ldr	r1, [r7]
   1c1b8:	cmp	r1, #0
   1c1bc:	beq	1c12c <__assert_fail@plt+0xac7c>
   1c1c0:	ldr	r5, [r1, #8]
   1c1c4:	cmp	r5, r7
   1c1c8:	mov	r7, r1
   1c1cc:	beq	1c164 <__assert_fail@plt+0xacb4>
   1c1d0:	cmp	r5, #0
   1c1d4:	mov	r7, r1
   1c1d8:	beq	1c164 <__assert_fail@plt+0xacb4>
   1c1dc:	b	1c148 <__assert_fail@plt+0xac98>
   1c1e0:	ldr	r1, [fp, #12]
   1c1e4:	movw	r8, #255	; 0xff
   1c1e8:	movt	r8, #4
   1c1ec:	mov	r7, r6
   1c1f0:	ldr	r6, [r6, #4]
   1c1f4:	cmp	r6, #0
   1c1f8:	bne	1c1ec <__assert_fail@plt+0xad3c>
   1c1fc:	ldr	r6, [r7, #8]
   1c200:	cmp	r6, #0
   1c204:	bne	1c1ec <__assert_fail@plt+0xad3c>
   1c208:	ldr	r0, [r7, #24]
   1c20c:	and	r0, r0, r8
   1c210:	cmp	r0, #3
   1c214:	beq	1c248 <__assert_fail@plt+0xad98>
   1c218:	cmp	r0, #6
   1c21c:	bne	1c258 <__assert_fail@plt+0xada8>
   1c220:	ldr	r4, [r7, #20]
   1c224:	ldr	r0, [r4]
   1c228:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c22c:	ldr	r0, [r4, #4]
   1c230:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c234:	ldr	r0, [r4, #8]
   1c238:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c23c:	ldr	r0, [r4, #12]
   1c240:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c244:	b	1c24c <__assert_fail@plt+0xad9c>
   1c248:	ldr	r4, [r7, #20]
   1c24c:	mov	r0, r4
   1c250:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c254:	ldr	r1, [fp, #12]
   1c258:	ldr	r0, [r7]
   1c25c:	cmp	r0, #0
   1c260:	beq	1c284 <__assert_fail@plt+0xadd4>
   1c264:	ldr	r6, [r0, #8]
   1c268:	cmp	r6, r7
   1c26c:	mov	r7, r0
   1c270:	beq	1c208 <__assert_fail@plt+0xad58>
   1c274:	cmp	r6, #0
   1c278:	mov	r7, r0
   1c27c:	beq	1c208 <__assert_fail@plt+0xad58>
   1c280:	b	1c1ec <__assert_fail@plt+0xad3c>
   1c284:	mov	r6, r5
   1c288:	ldr	r5, [r5, #4]
   1c28c:	cmp	r5, #0
   1c290:	bne	1c284 <__assert_fail@plt+0xadd4>
   1c294:	ldr	r5, [r6, #8]
   1c298:	cmp	r5, #0
   1c29c:	bne	1c284 <__assert_fail@plt+0xadd4>
   1c2a0:	ldr	r0, [r6, #24]
   1c2a4:	and	r0, r0, r8
   1c2a8:	cmp	r0, #3
   1c2ac:	beq	1c2e0 <__assert_fail@plt+0xae30>
   1c2b0:	cmp	r0, #6
   1c2b4:	bne	1c2f0 <__assert_fail@plt+0xae40>
   1c2b8:	ldr	r4, [r6, #20]
   1c2bc:	ldr	r0, [r4]
   1c2c0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c2c4:	ldr	r0, [r4, #4]
   1c2c8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c2cc:	ldr	r0, [r4, #8]
   1c2d0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c2d4:	ldr	r0, [r4, #12]
   1c2d8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c2dc:	b	1c2e4 <__assert_fail@plt+0xae34>
   1c2e0:	ldr	r4, [r6, #20]
   1c2e4:	mov	r0, r4
   1c2e8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1c2ec:	ldr	r1, [fp, #12]
   1c2f0:	ldr	r0, [r6]
   1c2f4:	cmp	r0, #0
   1c2f8:	beq	1c31c <__assert_fail@plt+0xae6c>
   1c2fc:	ldr	r5, [r0, #8]
   1c300:	cmp	r5, r6
   1c304:	mov	r6, r0
   1c308:	beq	1c2a0 <__assert_fail@plt+0xadf0>
   1c30c:	cmp	r5, #0
   1c310:	mov	r6, r0
   1c314:	beq	1c2a0 <__assert_fail@plt+0xadf0>
   1c318:	b	1c284 <__assert_fail@plt+0xadd4>
   1c31c:	mov	r0, #12
   1c320:	str	r0, [r1]
   1c324:	mov	r0, #0
   1c328:	sub	sp, fp, #28
   1c32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c334:	add	fp, sp, #28
   1c338:	sub	sp, sp, #156	; 0x9c
   1c33c:	mov	r5, r0
   1c340:	mov	lr, r2
   1c344:	ldr	r0, [r2, #4]
   1c348:	ldr	r2, [fp, #12]
   1c34c:	mov	r7, r1
   1c350:	mvn	r1, #0
   1c354:	mov	r9, #0
   1c358:	mov	ip, r3
   1c35c:	ldr	sl, [r7]
   1c360:	str	r2, [sp, #20]
   1c364:	uxtab	r1, r1, r0
   1c368:	ldr	r6, [fp, #8]
   1c36c:	add	r2, pc, #12
   1c370:	str	r5, [sp, #28]
   1c374:	str	r3, [sp, #48]	; 0x30
   1c378:	str	lr, [sp, #44]	; 0x2c
   1c37c:	ldr	pc, [r2, r1, lsl #2]
   1c380:	muleq	r1, r8, r6
   1c384:	andeq	lr, r1, r8, ror #7
   1c388:	andeq	lr, r1, ip, ror sl
   1c38c:	andeq	ip, r1, r0, ror #16
   1c390:	andeq	ip, r1, r0, ror #17
   1c394:	andeq	lr, r1, ip, ror sl
   1c398:	andeq	lr, r1, ip, ror sl
   1c39c:	andeq	ip, r1, r8, asr #18
   1c3a0:	andeq	ip, r1, r0, lsr r4
   1c3a4:	andeq	lr, r1, r8, ror #7
   1c3a8:	andeq	ip, r1, r0, lsr #8
   1c3ac:	andeq	ip, r1, r4, lsr #10
   1c3b0:	andeq	lr, r1, ip, ror sl
   1c3b4:	andeq	lr, r1, ip, ror sl
   1c3b8:	andeq	lr, r1, ip, ror sl
   1c3bc:	andeq	lr, r1, ip, ror sl
   1c3c0:	andeq	lr, r1, ip, ror sl
   1c3c4:	andeq	ip, r1, r0, lsr #8
   1c3c8:	andeq	ip, r1, r0, lsr #8
   1c3cc:	andeq	ip, r1, r4, lsr #12
   1c3d0:	andeq	lr, r1, ip, ror sl
   1c3d4:	andeq	lr, r1, ip, ror sl
   1c3d8:	andeq	ip, r1, ip, asr #19
   1c3dc:	andeq	ip, r1, r0, asr #8
   1c3e0:	andeq	lr, r1, ip, ror sl
   1c3e4:	andeq	lr, r1, ip, ror sl
   1c3e8:	andeq	lr, r1, ip, ror sl
   1c3ec:	andeq	lr, r1, ip, ror sl
   1c3f0:	andeq	lr, r1, ip, ror sl
   1c3f4:	andeq	lr, r1, ip, ror sl
   1c3f8:	andeq	lr, r1, ip, ror sl
   1c3fc:	muleq	r1, ip, r4
   1c400:	muleq	r1, ip, r4
   1c404:			; <UNDEFINED> instruction: 0x0001c4bc
   1c408:			; <UNDEFINED> instruction: 0x0001c4bc
   1c40c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c410:	andeq	r0, r0, r0
   1c414:	mvnseq	r0, #0
   1c418:			; <UNDEFINED> instruction: 0x87fffffe
   1c41c:			; <UNDEFINED> instruction: 0x07fffffe
   1c420:	tst	ip, #32
   1c424:	bne	1c9d4 <__assert_fail@plt+0xb524>
   1c428:	tst	ip, #16
   1c42c:	bne	1c9ec <__assert_fail@plt+0xb53c>
   1c430:	tst	ip, #131072	; 0x20000
   1c434:	uxtbeq	r1, r0
   1c438:	cmpeq	r1, #9
   1c43c:	beq	1ca2c <__assert_fail@plt+0xb57c>
   1c440:	mov	r1, #1
   1c444:	bfi	r0, r1, #0, #8
   1c448:	str	r0, [lr, #4]
   1c44c:	ldr	r1, [sl, #64]	; 0x40
   1c450:	cmp	r1, #31
   1c454:	beq	1e5a4 <__assert_fail@plt+0xd0f4>
   1c458:	ldr	r0, [sl, #56]	; 0x38
   1c45c:	add	r7, r0, r1, lsl #5
   1c460:	add	r2, r1, #1
   1c464:	mov	r0, #0
   1c468:	mvn	r3, #0
   1c46c:	str	r2, [sl, #64]	; 0x40
   1c470:	str	r0, [r7, #4]!
   1c474:	str	r0, [r7, #8]
   1c478:	str	r0, [r7, #4]
   1c47c:	ldm	lr, {r1, r2}
   1c480:	str	r3, [r7, #28]
   1c484:	str	r0, [r7, #16]
   1c488:	str	r0, [r7, #12]
   1c48c:	bic	r0, r2, #786432	; 0xc0000
   1c490:	str	r1, [r7, #20]
   1c494:	str	r0, [r7, #24]
   1c498:	b	1d488 <__assert_fail@plt+0xbfd8>
   1c49c:	mvn	r2, #32
   1c4a0:	ldr	r1, [r5, #64]	; 0x40
   1c4a4:	movw	r3, #51769	; 0xca39
   1c4a8:	uxtab	r0, r2, r0
   1c4ac:	movw	r2, #53270	; 0xd016
   1c4b0:	movt	r3, #2
   1c4b4:	movt	r2, #2
   1c4b8:	b	1c4d8 <__assert_fail@plt+0xb028>
   1c4bc:	mvn	r2, #34	; 0x22
   1c4c0:	ldr	r1, [r5, #64]	; 0x40
   1c4c4:	movw	r3, #52110	; 0xcb8e
   1c4c8:	uxtab	r0, r2, r0
   1c4cc:	movw	r2, #53276	; 0xd01c
   1c4d0:	movt	r3, #2
   1c4d4:	movt	r2, #2
   1c4d8:	clz	r0, r0
   1c4dc:	lsr	r0, r0, #5
   1c4e0:	str	r0, [sp]
   1c4e4:	ldr	r4, [sp, #20]
   1c4e8:	str	r4, [sp, #4]
   1c4ec:	mov	r0, sl
   1c4f0:	bl	1ea7c <__assert_fail@plt+0xd5cc>
   1c4f4:	mov	r7, r0
   1c4f8:	cmp	r0, #0
   1c4fc:	bne	1c518 <__assert_fail@plt+0xb068>
   1c500:	ldr	r0, [r4]
   1c504:	cmp	r0, #0
   1c508:	ldr	ip, [sp, #48]	; 0x30
   1c50c:	ldr	lr, [sp, #44]	; 0x2c
   1c510:	beq	1d488 <__assert_fail@plt+0xbfd8>
   1c514:	b	1e3e8 <__assert_fail@plt+0xcf38>
   1c518:	ldr	ip, [sp, #48]	; 0x30
   1c51c:	ldr	lr, [sp, #44]	; 0x2c
   1c520:	b	1d488 <__assert_fail@plt+0xbfd8>
   1c524:	ldr	r0, [lr]
   1c528:	movw	r1, #783	; 0x30f
   1c52c:	tst	r0, r1
   1c530:	beq	1c578 <__assert_fail@plt+0xb0c8>
   1c534:	ldrb	r0, [sl, #88]	; 0x58
   1c538:	tst	r0, #16
   1c53c:	bne	1c574 <__assert_fail@plt+0xb0c4>
   1c540:	orr	r1, r0, #16
   1c544:	tst	r0, #8
   1c548:	strb	r1, [sl, #88]	; 0x58
   1c54c:	bne	1e844 <__assert_fail@plt+0xd394>
   1c550:	sub	r1, pc, #328	; 0x148
   1c554:	tst	r0, #4
   1c558:	vld1.64	{d16-d17}, [r1 :128]
   1c55c:	add	r1, sl, #96	; 0x60
   1c560:	vst1.32	{d16-d17}, [r1]
   1c564:	beq	1e850 <__assert_fail@plt+0xd3a0>
   1c568:	vmov.i32	q8, #0	; 0x00000000
   1c56c:	add	r0, sl, #112	; 0x70
   1c570:	vst1.32	{d16-d17}, [r0]
   1c574:	ldr	r0, [lr]
   1c578:	cmp	r0, #512	; 0x200
   1c57c:	beq	1d274 <__assert_fail@plt+0xbdc4>
   1c580:	cmp	r0, #256	; 0x100
   1c584:	bne	1d38c <__assert_fail@plt+0xbedc>
   1c588:	mov	r0, #6
   1c58c:	str	r0, [lr]
   1c590:	ldr	r1, [sl, #64]	; 0x40
   1c594:	cmp	r1, #31
   1c598:	beq	1e7a4 <__assert_fail@plt+0xd2f4>
   1c59c:	ldr	r0, [sl, #56]	; 0x38
   1c5a0:	add	r4, r0, r1, lsl #5
   1c5a4:	add	r2, r1, #1
   1c5a8:	mov	r0, #0
   1c5ac:	mvn	r3, #0
   1c5b0:	str	r2, [sl, #64]	; 0x40
   1c5b4:	str	r0, [r4, #4]!
   1c5b8:	str	r0, [r4, #8]
   1c5bc:	str	r0, [r4, #4]
   1c5c0:	ldm	lr, {r1, r2}
   1c5c4:	str	r3, [r4, #28]
   1c5c8:	str	r0, [r4, #16]
   1c5cc:	str	r0, [r4, #12]
   1c5d0:	bic	r0, r2, #786432	; 0xc0000
   1c5d4:	str	r1, [r4, #20]
   1c5d8:	str	r0, [r4, #24]
   1c5dc:	mov	r0, #9
   1c5e0:	str	r0, [lr]
   1c5e4:	ldr	r1, [sl, #64]	; 0x40
   1c5e8:	cmp	r1, #31
   1c5ec:	bne	1d2dc <__assert_fail@plt+0xbe2c>
   1c5f0:	mov	r0, #996	; 0x3e4
   1c5f4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1c5f8:	cmp	r0, #0
   1c5fc:	beq	1e8e0 <__assert_fail@plt+0xd430>
   1c600:	ldr	r1, [sl, #56]	; 0x38
   1c604:	ldr	ip, [sp, #48]	; 0x30
   1c608:	ldr	lr, [sp, #44]	; 0x2c
   1c60c:	mov	r9, #0
   1c610:	str	r1, [r0]
   1c614:	mov	r1, #0
   1c618:	str	r1, [sl, #64]	; 0x40
   1c61c:	str	r0, [sl, #56]	; 0x38
   1c620:	b	1d2e0 <__assert_fail@plt+0xbe30>
   1c624:	mov	r9, #0
   1c628:	mov	r0, #32
   1c62c:	mov	r1, #1
   1c630:	str	r9, [fp, #-32]	; 0xffffffe0
   1c634:	bl	2ba08 <__assert_fail@plt+0x1a558>
   1c638:	mov	r8, r0
   1c63c:	mov	r0, #40	; 0x28
   1c640:	mov	r1, #1
   1c644:	bl	2ba08 <__assert_fail@plt+0x1a558>
   1c648:	mov	r7, r0
   1c64c:	cmp	r8, #0
   1c650:	cmpne	r7, #0
   1c654:	beq	1e604 <__assert_fail@plt+0xd154>
   1c658:	ldr	r6, [sp, #44]	; 0x2c
   1c65c:	ldr	r4, [sp, #48]	; 0x30
   1c660:	mov	r1, r5
   1c664:	mov	r0, r6
   1c668:	mov	r2, r4
   1c66c:	bl	1ee70 <__assert_fail@plt+0xd9c0>
   1c670:	mov	r3, r0
   1c674:	ldr	r0, [r6, #4]
   1c678:	str	r7, [sp, #60]	; 0x3c
   1c67c:	uxtb	r1, r0
   1c680:	cmp	r1, #25
   1c684:	beq	1ca34 <__assert_fail@plt+0xb584>
   1c688:	cmp	r1, #2
   1c68c:	beq	1e5f0 <__assert_fail@plt+0xd140>
   1c690:	mov	r1, #0
   1c694:	b	1ca8c <__assert_fail@plt+0xb5dc>
   1c698:	ldr	r1, [sl, #64]	; 0x40
   1c69c:	cmp	r1, #31
   1c6a0:	beq	1e618 <__assert_fail@plt+0xd168>
   1c6a4:	ldr	r0, [sl, #56]	; 0x38
   1c6a8:	add	r4, r0, r1, lsl #5
   1c6ac:	add	r2, r1, #1
   1c6b0:	mov	r0, #0
   1c6b4:	mvn	r3, #0
   1c6b8:	str	r2, [sl, #64]	; 0x40
   1c6bc:	str	r0, [r4, #4]!
   1c6c0:	str	r0, [r4, #8]
   1c6c4:	str	r0, [r4, #4]
   1c6c8:	ldm	lr, {r1, r2}
   1c6cc:	str	r3, [r4, #28]
   1c6d0:	str	r0, [r4, #16]
   1c6d4:	str	r0, [r4, #12]
   1c6d8:	bic	r0, r2, #786432	; 0xc0000
   1c6dc:	str	r1, [r4, #20]
   1c6e0:	str	r0, [r4, #24]
   1c6e4:	ldr	r0, [sl, #92]	; 0x5c
   1c6e8:	cmp	r0, #2
   1c6ec:	blt	1c9e4 <__assert_fail@plt+0xb534>
   1c6f0:	ldr	r0, [r5, #40]	; 0x28
   1c6f4:	ldr	r1, [r5, #56]	; 0x38
   1c6f8:	cmp	r1, r0
   1c6fc:	ble	1c9e4 <__assert_fail@plt+0xb534>
   1c700:	mov	r8, #0
   1c704:	mvn	r9, #0
   1c708:	ldr	r1, [r5, #28]
   1c70c:	cmp	r0, r1
   1c710:	beq	1c9e4 <__assert_fail@plt+0xb534>
   1c714:	ldr	r1, [r5, #8]
   1c718:	ldr	r0, [r1, r0, lsl #2]
   1c71c:	cmn	r0, #1
   1c720:	bne	1c9e4 <__assert_fail@plt+0xb534>
   1c724:	mov	r0, lr
   1c728:	mov	r1, r5
   1c72c:	mov	r2, ip
   1c730:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1c734:	ldr	r1, [r5, #40]	; 0x28
   1c738:	add	r0, r1, r0
   1c73c:	str	r0, [r5, #40]	; 0x28
   1c740:	ldr	r1, [sl, #64]	; 0x40
   1c744:	cmp	r1, #31
   1c748:	beq	1c7f0 <__assert_fail@plt+0xb340>
   1c74c:	ldr	r0, [sl, #56]	; 0x38
   1c750:	add	r6, r0, r1, lsl #5
   1c754:	ldr	lr, [sp, #44]	; 0x2c
   1c758:	add	r2, r1, #1
   1c75c:	ldr	ip, [sp, #48]	; 0x30
   1c760:	str	r2, [sl, #64]	; 0x40
   1c764:	str	r8, [r6, #4]!
   1c768:	str	r8, [r6, #8]
   1c76c:	str	r8, [r6, #4]
   1c770:	ldm	lr, {r0, r1}
   1c774:	str	r9, [r6, #28]
   1c778:	str	r8, [r6, #16]
   1c77c:	str	r8, [r6, #12]
   1c780:	str	r0, [r6, #20]
   1c784:	bic	r0, r1, #786432	; 0xc0000
   1c788:	str	r0, [r6, #24]
   1c78c:	ldr	r1, [sl, #64]	; 0x40
   1c790:	cmp	r1, #31
   1c794:	beq	1c830 <__assert_fail@plt+0xb380>
   1c798:	ldr	r0, [sl, #56]	; 0x38
   1c79c:	add	r7, r0, r1, lsl #5
   1c7a0:	add	r2, r1, #1
   1c7a4:	mov	r0, #16
   1c7a8:	cmp	r6, #0
   1c7ac:	str	r2, [sl, #64]	; 0x40
   1c7b0:	str	r8, [r7, #4]!
   1c7b4:	stmib	r7, {r4, r6, r8}
   1c7b8:	str	r8, [r7, #16]
   1c7bc:	str	r8, [r7, #20]
   1c7c0:	str	r0, [r7, #24]
   1c7c4:	str	r9, [r7, #28]
   1c7c8:	str	r7, [r4]
   1c7cc:	beq	1e83c <__assert_fail@plt+0xd38c>
   1c7d0:	ldr	r5, [sp, #28]
   1c7d4:	str	r7, [r6]
   1c7d8:	mov	r4, r7
   1c7dc:	ldr	r0, [r5, #40]	; 0x28
   1c7e0:	ldr	r1, [r5, #56]	; 0x38
   1c7e4:	cmp	r1, r0
   1c7e8:	bgt	1c708 <__assert_fail@plt+0xb258>
   1c7ec:	b	1d488 <__assert_fail@plt+0xbfd8>
   1c7f0:	mov	r0, #996	; 0x3e4
   1c7f4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1c7f8:	cmp	r0, #0
   1c7fc:	beq	1c818 <__assert_fail@plt+0xb368>
   1c800:	ldr	r1, [sl, #56]	; 0x38
   1c804:	str	r1, [r0]
   1c808:	mov	r1, #0
   1c80c:	str	r1, [sl, #64]	; 0x40
   1c810:	str	r0, [sl, #56]	; 0x38
   1c814:	b	1c750 <__assert_fail@plt+0xb2a0>
   1c818:	ldr	ip, [sp, #48]	; 0x30
   1c81c:	ldr	lr, [sp, #44]	; 0x2c
   1c820:	mov	r6, #0
   1c824:	ldr	r1, [sl, #64]	; 0x40
   1c828:	cmp	r1, #31
   1c82c:	bne	1c798 <__assert_fail@plt+0xb2e8>
   1c830:	mov	r0, #996	; 0x3e4
   1c834:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1c838:	ldr	lr, [sp, #44]	; 0x2c
   1c83c:	ldr	ip, [sp, #48]	; 0x30
   1c840:	cmp	r0, #0
   1c844:	beq	1e83c <__assert_fail@plt+0xd38c>
   1c848:	ldr	r1, [sl, #56]	; 0x38
   1c84c:	str	r1, [r0]
   1c850:	mov	r1, #0
   1c854:	str	r1, [sl, #64]	; 0x40
   1c858:	str	r0, [sl, #56]	; 0x38
   1c85c:	b	1c79c <__assert_fail@plt+0xb2ec>
   1c860:	ldr	r0, [lr]
   1c864:	ldr	r2, [sl, #84]	; 0x54
   1c868:	mov	r1, #1
   1c86c:	tst	r2, r1, lsl r0
   1c870:	beq	1e64c <__assert_fail@plt+0xd19c>
   1c874:	lsl	r0, r1, r0
   1c878:	ldr	r1, [sl, #64]	; 0x40
   1c87c:	ldr	r2, [sl, #80]	; 0x50
   1c880:	orr	r0, r2, r0
   1c884:	cmp	r1, #31
   1c888:	str	r0, [sl, #80]	; 0x50
   1c88c:	beq	1e688 <__assert_fail@plt+0xd1d8>
   1c890:	ldr	r0, [sl, #56]	; 0x38
   1c894:	add	r7, r0, r1, lsl #5
   1c898:	add	r2, r1, #1
   1c89c:	mov	r0, #0
   1c8a0:	mvn	r3, #0
   1c8a4:	str	r2, [sl, #64]	; 0x40
   1c8a8:	str	r0, [r7, #4]!
   1c8ac:	str	r0, [r7, #8]
   1c8b0:	str	r0, [r7, #4]
   1c8b4:	ldm	lr, {r1, r2}
   1c8b8:	str	r3, [r7, #28]
   1c8bc:	str	r0, [r7, #16]
   1c8c0:	str	r0, [r7, #12]
   1c8c4:	bic	r0, r2, #786432	; 0xc0000
   1c8c8:	str	r1, [r7, #20]
   1c8cc:	str	r0, [r7, #24]
   1c8d0:	ldr	r0, [sl, #76]	; 0x4c
   1c8d4:	add	r0, r0, #1
   1c8d8:	str	r0, [sl, #76]	; 0x4c
   1c8dc:	b	1c938 <__assert_fail@plt+0xb488>
   1c8e0:	ldr	r1, [sl, #64]	; 0x40
   1c8e4:	cmp	r1, #31
   1c8e8:	beq	1e654 <__assert_fail@plt+0xd1a4>
   1c8ec:	ldr	r0, [sl, #56]	; 0x38
   1c8f0:	add	r7, r0, r1, lsl #5
   1c8f4:	add	r2, r1, #1
   1c8f8:	mov	r0, #0
   1c8fc:	mvn	r3, #0
   1c900:	str	r2, [sl, #64]	; 0x40
   1c904:	str	r0, [r7, #4]!
   1c908:	str	r0, [r7, #8]
   1c90c:	str	r0, [r7, #4]
   1c910:	ldm	lr, {r1, r2}
   1c914:	str	r3, [r7, #28]
   1c918:	str	r0, [r7, #16]
   1c91c:	str	r0, [r7, #12]
   1c920:	bic	r0, r2, #786432	; 0xc0000
   1c924:	str	r1, [r7, #20]
   1c928:	str	r0, [r7, #24]
   1c92c:	ldr	r0, [sl, #92]	; 0x5c
   1c930:	cmp	r0, #2
   1c934:	blt	1d488 <__assert_fail@plt+0xbfd8>
   1c938:	ldrb	r0, [sl, #88]	; 0x58
   1c93c:	orr	r0, r0, #2
   1c940:	strb	r0, [sl, #88]	; 0x58
   1c944:	b	1d488 <__assert_fail@plt+0xbfd8>
   1c948:	ldr	r4, [r7, #24]
   1c94c:	orr	r2, ip, #8388608	; 0x800000
   1c950:	mov	r1, r5
   1c954:	add	r0, r4, #1
   1c958:	str	r0, [r7, #24]
   1c95c:	mov	r0, lr
   1c960:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1c964:	ldr	r1, [r5, #40]	; 0x28
   1c968:	ldr	lr, [sp, #44]	; 0x2c
   1c96c:	mov	r9, #0
   1c970:	add	r0, r1, r0
   1c974:	str	r0, [r5, #40]	; 0x28
   1c978:	ldrb	r0, [lr, #4]
   1c97c:	cmp	r0, #9
   1c980:	beq	1d418 <__assert_fail@plt+0xbf68>
   1c984:	add	r0, r6, #1
   1c988:	mov	r1, r7
   1c98c:	mov	r2, lr
   1c990:	mov	r7, lr
   1c994:	str	r0, [sp]
   1c998:	mov	r0, r5
   1c99c:	ldr	r6, [sp, #20]
   1c9a0:	str	r6, [sp, #4]
   1c9a4:	ldr	r3, [sp, #48]	; 0x30
   1c9a8:	bl	1b2f0 <__assert_fail@plt+0x9e40>
   1c9ac:	mov	r9, r0
   1c9b0:	ldr	r0, [r6]
   1c9b4:	cmp	r0, #0
   1c9b8:	beq	1d408 <__assert_fail@plt+0xbf58>
   1c9bc:	mov	r9, #0
   1c9c0:	mov	r0, r9
   1c9c4:	sub	sp, fp, #28
   1c9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9cc:	tst	ip, #16777216	; 0x1000000
   1c9d0:	beq	1c420 <__assert_fail@plt+0xaf70>
   1c9d4:	mov	r0, #13
   1c9d8:	b	1d378 <__assert_fail@plt+0xbec8>
   1c9dc:	mov	r0, #5
   1c9e0:	b	1d378 <__assert_fail@plt+0xbec8>
   1c9e4:	mov	r7, r4
   1c9e8:	b	1d488 <__assert_fail@plt+0xbfd8>
   1c9ec:	mov	r0, lr
   1c9f0:	mov	r1, r5
   1c9f4:	mov	r2, ip
   1c9f8:	mov	r4, ip
   1c9fc:	mov	r6, lr
   1ca00:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1ca04:	ldr	r1, [r5, #40]	; 0x28
   1ca08:	mov	r2, r6
   1ca0c:	mov	r3, r4
   1ca10:	add	r0, r1, r0
   1ca14:	mov	r1, r7
   1ca18:	str	r0, [r5, #40]	; 0x28
   1ca1c:	mov	r0, r5
   1ca20:	sub	sp, fp, #28
   1ca24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca28:	b	1c330 <__assert_fail@plt+0xae80>
   1ca2c:	mov	r0, #16
   1ca30:	b	1d378 <__assert_fail@plt+0xbec8>
   1ca34:	ldrb	r0, [r7, #16]
   1ca38:	tst	r4, #256	; 0x100
   1ca3c:	orr	r0, r0, #1
   1ca40:	strb	r0, [r7, #16]
   1ca44:	beq	1ca54 <__assert_fail@plt+0xb5a4>
   1ca48:	ldr	r0, [r8]
   1ca4c:	orr	r0, r0, #1024	; 0x400
   1ca50:	str	r0, [r8]
   1ca54:	ldr	r0, [r5, #40]	; 0x28
   1ca58:	mov	r1, r5
   1ca5c:	mov	r2, r4
   1ca60:	add	r0, r0, r3
   1ca64:	str	r0, [r5, #40]	; 0x28
   1ca68:	mov	r0, r6
   1ca6c:	bl	1ee70 <__assert_fail@plt+0xd9c0>
   1ca70:	ldr	r6, [sp, #44]	; 0x2c
   1ca74:	mov	r3, r0
   1ca78:	ldr	r0, [r6, #4]
   1ca7c:	uxtb	r1, r0
   1ca80:	cmp	r1, #2
   1ca84:	beq	1e5f0 <__assert_fail@plt+0xd140>
   1ca88:	mov	r1, #1
   1ca8c:	str	r1, [sp, #56]	; 0x38
   1ca90:	uxtb	r1, r0
   1ca94:	mov	r2, r6
   1ca98:	ldr	r7, [sp, #48]	; 0x30
   1ca9c:	cmp	r1, #21
   1caa0:	moveq	r1, #1
   1caa4:	bfieq	r0, r1, #0, #8
   1caa8:	mov	r1, r5
   1caac:	streq	r0, [r6, #4]
   1cab0:	sub	r0, fp, #80	; 0x50
   1cab4:	str	r0, [fp, #-36]	; 0xffffffdc
   1cab8:	mov	r0, #3
   1cabc:	str	r0, [fp, #-40]	; 0xffffffd8
   1cac0:	mov	r0, #1
   1cac4:	str	r7, [sp]
   1cac8:	str	r0, [sp, #4]
   1cacc:	sub	r0, fp, #40	; 0x28
   1cad0:	bl	1f018 <__assert_fail@plt+0xdb68>
   1cad4:	cmp	r0, #0
   1cad8:	bne	1e5d8 <__assert_fail@plt+0xd128>
   1cadc:	and	r0, r7, #65536	; 0x10000
   1cae0:	mov	r2, r7
   1cae4:	str	r0, [sp, #40]	; 0x28
   1cae8:	mov	r0, #0
   1caec:	str	r0, [sp, #36]	; 0x24
   1caf0:	mov	r0, #0
   1caf4:	str	r0, [sp, #32]
   1caf8:	ldr	r4, [sp, #44]	; 0x2c
   1cafc:	ldr	r7, [sp, #60]	; 0x3c
   1cb00:	mov	r0, r4
   1cb04:	mov	r1, r5
   1cb08:	bl	1ee70 <__assert_fail@plt+0xd9c0>
   1cb0c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1cb10:	mov	r9, r0
   1cb14:	cmp	r6, #2
   1cb18:	beq	1cd40 <__assert_fail@plt+0xb890>
   1cb1c:	cmp	r6, #4
   1cb20:	bne	1cb64 <__assert_fail@plt+0xb6b4>
   1cb24:	ldr	r5, [sp, #28]
   1cb28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1cb2c:	mov	r2, r7
   1cb30:	sub	r3, fp, #32
   1cb34:	ldr	r0, [r5, #64]	; 0x40
   1cb38:	str	r1, [sp]
   1cb3c:	ldr	r1, [sp, #48]	; 0x30
   1cb40:	str	r1, [sp, #4]
   1cb44:	mov	r1, r8
   1cb48:	bl	1f324 <__assert_fail@plt+0xde74>
   1cb4c:	ldr	r1, [sp, #20]
   1cb50:	ldr	lr, [sp, #44]	; 0x2c
   1cb54:	cmp	r0, #0
   1cb58:	str	r0, [r1]
   1cb5c:	beq	1cd88 <__assert_fail@plt+0xb8d8>
   1cb60:	b	1e550 <__assert_fail@plt+0xd0a0>
   1cb64:	ldr	r0, [sp, #44]	; 0x2c
   1cb68:	ldr	r2, [sp, #48]	; 0x30
   1cb6c:	mov	r4, r9
   1cb70:	mov	r9, #7
   1cb74:	str	sl, [sp, #52]	; 0x34
   1cb78:	ldrb	r0, [r0, #4]
   1cb7c:	cmp	r0, #22
   1cb80:	beq	1cb90 <__assert_fail@plt+0xb6e0>
   1cb84:	cmp	r0, #2
   1cb88:	bne	1cce8 <__assert_fail@plt+0xb838>
   1cb8c:	b	1e53c <__assert_fail@plt+0xd08c>
   1cb90:	ldr	r7, [sp, #28]
   1cb94:	mov	r5, r4
   1cb98:	ldr	r0, [r7, #40]	; 0x28
   1cb9c:	mov	r1, r7
   1cba0:	add	r0, r0, r4
   1cba4:	str	r0, [r7, #40]	; 0x28
   1cba8:	add	r0, sp, #64	; 0x40
   1cbac:	bl	1ee70 <__assert_fail@plt+0xd9c0>
   1cbb0:	mov	r3, r0
   1cbb4:	ldrb	r0, [sp, #68]	; 0x44
   1cbb8:	cmp	r0, #21
   1cbbc:	beq	1ccd0 <__assert_fail@plt+0xb820>
   1cbc0:	ldr	r4, [sp, #48]	; 0x30
   1cbc4:	cmp	r0, #2
   1cbc8:	beq	1e53c <__assert_fail@plt+0xd08c>
   1cbcc:	mov	r0, #3
   1cbd0:	str	r8, [sp, #24]
   1cbd4:	add	r2, sp, #64	; 0x40
   1cbd8:	str	r0, [fp, #-48]	; 0xffffffd0
   1cbdc:	add	r0, sp, #72	; 0x48
   1cbe0:	str	r0, [fp, #-44]	; 0xffffffd4
   1cbe4:	mov	r0, #1
   1cbe8:	str	r4, [sp]
   1cbec:	str	r0, [sp, #4]
   1cbf0:	sub	r0, fp, #48	; 0x30
   1cbf4:	ldr	r7, [sp, #28]
   1cbf8:	mov	r1, r7
   1cbfc:	bl	1f018 <__assert_fail@plt+0xdb68>
   1cc00:	cmp	r0, #0
   1cc04:	bne	1e9d8 <__assert_fail@plt+0xd528>
   1cc08:	ldr	r0, [sp, #44]	; 0x2c
   1cc0c:	mov	r1, r7
   1cc10:	mov	r2, r4
   1cc14:	bl	1ee70 <__assert_fail@plt+0xd9c0>
   1cc18:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1cc1c:	mov	r9, #11
   1cc20:	str	r0, [sp, #16]
   1cc24:	cmp	r8, #2
   1cc28:	beq	1e538 <__assert_fail@plt+0xd088>
   1cc2c:	cmp	r8, #4
   1cc30:	beq	1e538 <__assert_fail@plt+0xd088>
   1cc34:	cmp	r6, #3
   1cc38:	bne	1cc4c <__assert_fail@plt+0xb79c>
   1cc3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cc40:	bl	11390 <strlen@plt>
   1cc44:	cmp	r0, #1
   1cc48:	bhi	1e9e4 <__assert_fail@plt+0xd534>
   1cc4c:	cmp	r8, #3
   1cc50:	bne	1cc64 <__assert_fail@plt+0xb7b4>
   1cc54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1cc58:	bl	11390 <strlen@plt>
   1cc5c:	cmp	r0, #1
   1cc60:	bhi	1e9e4 <__assert_fail@plt+0xd534>
   1cc64:	ldr	lr, [sp, #44]	; 0x2c
   1cc68:	cmp	r6, #3
   1cc6c:	beq	1ce38 <__assert_fail@plt+0xb988>
   1cc70:	cmp	r6, #0
   1cc74:	mov	r7, #0
   1cc78:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1cc7c:	cmp	r8, #3
   1cc80:	beq	1ce48 <__assert_fail@plt+0xb998>
   1cc84:	cmp	r8, #0
   1cc88:	mov	sl, #0
   1cc8c:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1cc90:	cmp	r6, #3
   1cc94:	cmpne	r6, #0
   1cc98:	bne	1ce5c <__assert_fail@plt+0xb9ac>
   1cc9c:	ldr	r0, [sp, #52]	; 0x34
   1cca0:	ldr	r0, [r0, #92]	; 0x5c
   1cca4:	cmp	r0, #2
   1cca8:	blt	1ce60 <__assert_fail@plt+0xb9b0>
   1ccac:	mov	r0, r7
   1ccb0:	bl	113d8 <btowc@plt>
   1ccb4:	ldr	lr, [sp, #44]	; 0x2c
   1ccb8:	mov	r7, r0
   1ccbc:	cmp	r8, #3
   1ccc0:	cmpne	r8, #0
   1ccc4:	beq	1ce6c <__assert_fail@plt+0xb9bc>
   1ccc8:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1cccc:	b	1ce8c <__assert_fail@plt+0xb9dc>
   1ccd0:	ldr	r0, [r7, #40]	; 0x28
   1ccd4:	mov	r1, #1
   1ccd8:	sub	r0, r0, r5
   1ccdc:	str	r0, [r7, #40]	; 0x28
   1cce0:	ldr	r0, [sp, #44]	; 0x2c
   1cce4:	strb	r1, [r0, #4]
   1cce8:	add	r0, pc, #12
   1ccec:	ldr	sl, [sp, #52]	; 0x34
   1ccf0:	ldr	r7, [sp, #60]	; 0x3c
   1ccf4:	mov	r9, r4
   1ccf8:	ldr	pc, [r0, r6, lsl #2]
   1ccfc:	andeq	ip, r1, ip, lsl #26
   1cd00:	andeq	ip, r1, r4, ror #27
   1cd04:	andeq	ip, r1, r0, asr #26
   1cd08:	andeq	ip, r1, r0, lsr #28
   1cd0c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1cd10:	mov	r3, #1
   1cd14:	ubfx	r1, r0, #5, #3
   1cd18:	and	r0, r0, #31
   1cd1c:	ldr	r5, [sp, #28]
   1cd20:	ldr	lr, [sp, #44]	; 0x2c
   1cd24:	ldr	r2, [r8, r1, lsl #2]
   1cd28:	orr	r0, r2, r3, lsl r0
   1cd2c:	str	r0, [r8, r1, lsl #2]
   1cd30:	ldrb	r0, [lr, #4]
   1cd34:	cmp	r0, #21
   1cd38:	bne	1cd94 <__assert_fail@plt+0xb8e4>
   1cd3c:	b	1d010 <__assert_fail@plt+0xbb60>
   1cd40:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cd44:	mov	r0, r7
   1cd48:	bl	11390 <strlen@plt>
   1cd4c:	cmp	r0, #1
   1cd50:	bne	1e74c <__assert_fail@plt+0xd29c>
   1cd54:	ldrb	r0, [r7]
   1cd58:	mov	r3, #1
   1cd5c:	ubfx	r1, r0, #5, #3
   1cd60:	and	r0, r0, #31
   1cd64:	ldr	r2, [r8, r1, lsl #2]
   1cd68:	orr	r0, r2, r3, lsl r0
   1cd6c:	str	r0, [r8, r1, lsl #2]
   1cd70:	mov	r1, #0
   1cd74:	ldr	r0, [sp, #20]
   1cd78:	ldr	r5, [sp, #28]
   1cd7c:	ldr	lr, [sp, #44]	; 0x2c
   1cd80:	ldr	r7, [sp, #60]	; 0x3c
   1cd84:	str	r1, [r0]
   1cd88:	ldrb	r0, [lr, #4]
   1cd8c:	cmp	r0, #21
   1cd90:	beq	1d010 <__assert_fail@plt+0xbb60>
   1cd94:	cmp	r0, #2
   1cd98:	ldr	r0, [sp, #48]	; 0x30
   1cd9c:	beq	1e5e4 <__assert_fail@plt+0xd134>
   1cda0:	sub	r1, fp, #80	; 0x50
   1cda4:	mov	r2, lr
   1cda8:	mov	r3, r9
   1cdac:	mov	r4, lr
   1cdb0:	str	r1, [fp, #-36]	; 0xffffffdc
   1cdb4:	mov	r1, #3
   1cdb8:	str	r1, [fp, #-40]	; 0xffffffd8
   1cdbc:	str	r0, [sp]
   1cdc0:	mov	r0, #0
   1cdc4:	mov	r1, r5
   1cdc8:	str	r0, [sp, #4]
   1cdcc:	sub	r0, fp, #40	; 0x28
   1cdd0:	bl	1f018 <__assert_fail@plt+0xdb68>
   1cdd4:	ldr	r2, [sp, #48]	; 0x30
   1cdd8:	cmp	r0, #0
   1cddc:	beq	1cb00 <__assert_fail@plt+0xb650>
   1cde0:	b	1e5d8 <__assert_fail@plt+0xd128>
   1cde4:	ldr	r1, [r7, #20]
   1cde8:	ldr	r0, [sp, #36]	; 0x24
   1cdec:	cmp	r0, r1
   1cdf0:	beq	1cf74 <__assert_fail@plt+0xbac4>
   1cdf4:	ldr	r0, [r7]
   1cdf8:	ldr	r5, [sp, #28]
   1cdfc:	ldr	lr, [sp, #44]	; 0x2c
   1ce00:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ce04:	add	r2, r1, #1
   1ce08:	str	r2, [r7, #20]
   1ce0c:	str	r3, [r0, r1, lsl #2]
   1ce10:	ldrb	r0, [lr, #4]
   1ce14:	cmp	r0, #21
   1ce18:	bne	1cd94 <__assert_fail@plt+0xb8e4>
   1ce1c:	b	1d010 <__assert_fail@plt+0xbb60>
   1ce20:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ce24:	mov	r0, r7
   1ce28:	bl	11390 <strlen@plt>
   1ce2c:	cmp	r0, #1
   1ce30:	beq	1cd54 <__assert_fail@plt+0xb8a4>
   1ce34:	b	1e750 <__assert_fail@plt+0xd2a0>
   1ce38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ce3c:	ldrb	r7, [r0]
   1ce40:	cmp	r8, #3
   1ce44:	bne	1cc84 <__assert_fail@plt+0xb7d4>
   1ce48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ce4c:	ldrb	sl, [r0]
   1ce50:	cmp	r6, #3
   1ce54:	cmpne	r6, #0
   1ce58:	beq	1cc9c <__assert_fail@plt+0xb7ec>
   1ce5c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ce60:	cmp	r8, #3
   1ce64:	cmpne	r8, #0
   1ce68:	bne	1ccc8 <__assert_fail@plt+0xb818>
   1ce6c:	ldr	r0, [sp, #52]	; 0x34
   1ce70:	ldr	r0, [r0, #92]	; 0x5c
   1ce74:	cmp	r0, #2
   1ce78:	blt	1ce8c <__assert_fail@plt+0xb9dc>
   1ce7c:	mov	r0, sl
   1ce80:	bl	113d8 <btowc@plt>
   1ce84:	ldr	lr, [sp, #44]	; 0x2c
   1ce88:	mov	sl, r0
   1ce8c:	ldr	r8, [sp, #24]
   1ce90:	cmn	r7, #1
   1ce94:	mov	r9, #3
   1ce98:	cmnne	sl, #1
   1ce9c:	beq	1e53c <__assert_fail@plt+0xd08c>
   1cea0:	ldr	r0, [sp, #40]	; 0x28
   1cea4:	cmp	r0, #0
   1cea8:	beq	1ceb8 <__assert_fail@plt+0xba08>
   1ceac:	cmp	r7, sl
   1ceb0:	mov	r9, #11
   1ceb4:	bhi	1e53c <__assert_fail@plt+0xd08c>
   1ceb8:	ldr	r0, [sp, #52]	; 0x34
   1cebc:	ldr	r0, [r0, #92]	; 0x5c
   1cec0:	cmp	r0, #2
   1cec4:	blt	1cefc <__assert_fail@plt+0xba4c>
   1cec8:	ldr	r4, [sp, #60]	; 0x3c
   1cecc:	ldr	r1, [sp, #32]
   1ced0:	ldr	r5, [sp, #28]
   1ced4:	ldr	r0, [r4, #32]
   1ced8:	cmp	r1, r0
   1cedc:	beq	1cfb4 <__assert_fail@plt+0xbb04>
   1cee0:	ldmib	r4, {r6, r9}
   1cee4:	str	r7, [r6, r0, lsl #2]
   1cee8:	ldr	r0, [r4, #32]
   1ceec:	add	r1, r0, #1
   1cef0:	str	r1, [r4, #32]
   1cef4:	str	sl, [r9, r0, lsl #2]
   1cef8:	b	1cf00 <__assert_fail@plt+0xba50>
   1cefc:	ldr	r5, [sp, #28]
   1cf00:	ldr	r9, [sp, #16]
   1cf04:	mov	r0, #0
   1cf08:	cmp	r7, r0
   1cf0c:	cmpls	r0, sl
   1cf10:	bls	1cf2c <__assert_fail@plt+0xba7c>
   1cf14:	add	r0, r0, #1
   1cf18:	cmp	r0, #256	; 0x100
   1cf1c:	beq	1cf50 <__assert_fail@plt+0xbaa0>
   1cf20:	cmp	r7, r0
   1cf24:	cmpls	r0, sl
   1cf28:	bhi	1cf14 <__assert_fail@plt+0xba64>
   1cf2c:	ubfx	r1, r0, #5, #3
   1cf30:	and	r3, r0, #31
   1cf34:	mov	r4, #1
   1cf38:	ldr	r2, [r8, r1, lsl #2]
   1cf3c:	orr	r2, r2, r4, lsl r3
   1cf40:	str	r2, [r8, r1, lsl #2]
   1cf44:	add	r0, r0, #1
   1cf48:	cmp	r0, #256	; 0x100
   1cf4c:	bne	1cf20 <__assert_fail@plt+0xba70>
   1cf50:	ldr	r0, [sp, #20]
   1cf54:	ldr	sl, [sp, #52]	; 0x34
   1cf58:	ldr	r7, [sp, #60]	; 0x3c
   1cf5c:	mov	r1, #0
   1cf60:	str	r1, [r0]
   1cf64:	ldrb	r0, [lr, #4]
   1cf68:	cmp	r0, #21
   1cf6c:	bne	1cd94 <__assert_fail@plt+0xb8e4>
   1cf70:	b	1d010 <__assert_fail@plt+0xbb60>
   1cf74:	ldr	r1, [sp, #36]	; 0x24
   1cf78:	mov	r0, #1
   1cf7c:	orr	r1, r0, r1, lsl #1
   1cf80:	ldr	r0, [r7]
   1cf84:	str	r1, [sp, #36]	; 0x24
   1cf88:	lsl	r1, r1, #2
   1cf8c:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1cf90:	cmp	r0, #0
   1cf94:	beq	1ea48 <__assert_fail@plt+0xd598>
   1cf98:	ldr	r7, [sp, #60]	; 0x3c
   1cf9c:	ldr	r5, [sp, #28]
   1cfa0:	ldr	lr, [sp, #44]	; 0x2c
   1cfa4:	mov	r9, r4
   1cfa8:	str	r0, [r7]
   1cfac:	ldr	r1, [r7, #20]
   1cfb0:	b	1ce00 <__assert_fail@plt+0xb950>
   1cfb4:	ldr	r1, [sp, #32]
   1cfb8:	mov	r0, #1
   1cfbc:	orr	r1, r0, r1, lsl #1
   1cfc0:	ldr	r0, [r4, #4]
   1cfc4:	lsl	r9, r1, #2
   1cfc8:	str	r1, [sp, #32]
   1cfcc:	mov	r1, r9
   1cfd0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1cfd4:	mov	r6, r0
   1cfd8:	ldr	r0, [r4, #8]
   1cfdc:	mov	r1, r9
   1cfe0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1cfe4:	mov	r9, r0
   1cfe8:	cmp	r6, #0
   1cfec:	cmpne	r9, #0
   1cff0:	beq	1ea60 <__assert_fail@plt+0xd5b0>
   1cff4:	ldr	r4, [sp, #60]	; 0x3c
   1cff8:	stmib	r4, {r6, r9}
   1cffc:	ldr	r0, [r4, #32]
   1d000:	ldr	r5, [sp, #28]
   1d004:	ldr	lr, [sp, #44]	; 0x2c
   1d008:	ldr	r8, [sp, #24]
   1d00c:	b	1cee4 <__assert_fail@plt+0xba34>
   1d010:	ldr	r0, [r5, #40]	; 0x28
   1d014:	ldr	ip, [sp, #48]	; 0x30
   1d018:	add	r0, r0, r9
   1d01c:	str	r0, [r5, #40]	; 0x28
   1d020:	ldr	r0, [sp, #56]	; 0x38
   1d024:	cmp	r0, #0
   1d028:	beq	1d064 <__assert_fail@plt+0xbbb4>
   1d02c:	vld1.32	{d16-d17}, [r8]
   1d030:	mov	r0, r8
   1d034:	vmvn	q8, q8
   1d038:	vst1.32	{d16-d17}, [r0]!
   1d03c:	vld1.32	{d16-d17}, [r0]
   1d040:	vmvn	q8, q8
   1d044:	vst1.32	{d16-d17}, [r0]
   1d048:	ldr	r0, [sl, #92]	; 0x5c
   1d04c:	cmp	r0, #2
   1d050:	bge	1d070 <__assert_fail@plt+0xbbc0>
   1d054:	ldr	r1, [r7, #20]
   1d058:	cmp	r1, #0
   1d05c:	bne	1d120 <__assert_fail@plt+0xbc70>
   1d060:	b	1d0fc <__assert_fail@plt+0xbc4c>
   1d064:	ldr	r0, [sl, #92]	; 0x5c
   1d068:	cmp	r0, #2
   1d06c:	blt	1d054 <__assert_fail@plt+0xbba4>
   1d070:	ldr	r6, [sl, #60]	; 0x3c
   1d074:	ldm	r8, {r1, r2, r3, r7}
   1d078:	ldr	r5, [r6]
   1d07c:	and	r1, r1, r5
   1d080:	ldr	r5, [sp, #28]
   1d084:	str	r1, [r8]
   1d088:	ldr	r1, [r6, #4]
   1d08c:	and	r1, r2, r1
   1d090:	str	r1, [r8, #4]
   1d094:	ldr	r1, [r6, #8]
   1d098:	and	r1, r3, r1
   1d09c:	str	r1, [r8, #8]
   1d0a0:	ldr	r1, [r6, #12]
   1d0a4:	and	r1, r7, r1
   1d0a8:	ldr	r7, [sp, #60]	; 0x3c
   1d0ac:	str	r1, [r8, #12]
   1d0b0:	ldr	r1, [r8, #16]
   1d0b4:	ldr	r2, [r6, #16]
   1d0b8:	and	r1, r1, r2
   1d0bc:	str	r1, [r8, #16]
   1d0c0:	ldr	r1, [r6, #20]
   1d0c4:	ldr	r2, [r8, #20]
   1d0c8:	and	r1, r2, r1
   1d0cc:	str	r1, [r8, #20]
   1d0d0:	ldr	r1, [r6, #24]
   1d0d4:	ldr	r2, [r8, #24]
   1d0d8:	and	r1, r2, r1
   1d0dc:	str	r1, [r8, #24]
   1d0e0:	ldr	r1, [r6, #28]
   1d0e4:	ldr	r2, [r8, #28]
   1d0e8:	and	r1, r2, r1
   1d0ec:	str	r1, [r8, #28]
   1d0f0:	ldr	r1, [r7, #20]
   1d0f4:	cmp	r1, #0
   1d0f8:	bne	1d120 <__assert_fail@plt+0xbc70>
   1d0fc:	ldr	r1, [r7, #24]
   1d100:	cmp	r1, #0
   1d104:	bne	1d120 <__assert_fail@plt+0xbc70>
   1d108:	ldr	r1, [r7, #28]
   1d10c:	cmp	r1, #0
   1d110:	bne	1d120 <__assert_fail@plt+0xbc70>
   1d114:	ldr	r1, [r7, #32]
   1d118:	cmp	r1, #0
   1d11c:	beq	1e498 <__assert_fail@plt+0xcfe8>
   1d120:	ldrb	r0, [sl, #88]	; 0x58
   1d124:	orr	r0, r0, #2
   1d128:	strb	r0, [sl, #88]	; 0x58
   1d12c:	ldr	r1, [sl, #64]	; 0x40
   1d130:	cmp	r1, #31
   1d134:	beq	1e6bc <__assert_fail@plt+0xd20c>
   1d138:	ldr	r0, [sl, #56]	; 0x38
   1d13c:	add	r0, r0, r1, lsl #5
   1d140:	add	r2, r1, #1
   1d144:	vmov.i32	q8, #0	; 0x00000000
   1d148:	mov	r1, #6
   1d14c:	str	r2, [sl, #64]	; 0x40
   1d150:	mov	r2, #0
   1d154:	add	r4, r0, #4
   1d158:	str	r2, [r0, #20]
   1d15c:	str	r7, [r0, #24]
   1d160:	str	r1, [r0, #28]
   1d164:	mov	r0, #28
   1d168:	mov	r1, r4
   1d16c:	vst1.32	{d16-d17}, [r1], r0
   1d170:	mvn	r0, #0
   1d174:	str	r0, [r1]
   1d178:	ldr	r0, [r8]
   1d17c:	cmp	r0, #0
   1d180:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d184:	ldr	r0, [r8, #4]
   1d188:	cmp	r0, #0
   1d18c:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d190:	ldr	r0, [r8, #8]
   1d194:	cmp	r0, #0
   1d198:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d19c:	ldr	r0, [r8, #12]
   1d1a0:	cmp	r0, #0
   1d1a4:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d1a8:	ldr	r0, [r8, #16]
   1d1ac:	cmp	r0, #0
   1d1b0:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d1b4:	ldr	r0, [r8, #20]
   1d1b8:	cmp	r0, #0
   1d1bc:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d1c0:	ldr	r0, [r8, #24]
   1d1c4:	cmp	r0, #0
   1d1c8:	bne	1d1d8 <__assert_fail@plt+0xbd28>
   1d1cc:	ldr	r0, [r8, #28]
   1d1d0:	cmp	r0, #0
   1d1d4:	beq	1e758 <__assert_fail@plt+0xd2a8>
   1d1d8:	ldr	r1, [sl, #64]	; 0x40
   1d1dc:	cmp	r1, #31
   1d1e0:	beq	1e6ec <__assert_fail@plt+0xd23c>
   1d1e4:	ldr	r0, [sl, #56]	; 0x38
   1d1e8:	add	r0, r0, r1, lsl #5
   1d1ec:	add	r2, r1, #1
   1d1f0:	vmov.i32	q8, #0	; 0x00000000
   1d1f4:	mov	r1, #3
   1d1f8:	str	r2, [sl, #64]	; 0x40
   1d1fc:	mov	r2, #0
   1d200:	add	r6, r0, #4
   1d204:	str	r2, [r0, #20]
   1d208:	str	r8, [r0, #24]
   1d20c:	str	r1, [r0, #28]
   1d210:	mov	r0, #28
   1d214:	mov	r1, r6
   1d218:	vst1.32	{d16-d17}, [r1], r0
   1d21c:	mvn	r0, #0
   1d220:	str	r0, [r1]
   1d224:	ldr	r1, [sl, #64]	; 0x40
   1d228:	cmp	r1, #31
   1d22c:	beq	1e71c <__assert_fail@plt+0xd26c>
   1d230:	ldr	r0, [sl, #56]	; 0x38
   1d234:	add	r7, r0, r1, lsl #5
   1d238:	add	r2, r1, #1
   1d23c:	mov	r0, #0
   1d240:	mov	r1, #10
   1d244:	str	r2, [sl, #64]	; 0x40
   1d248:	mvn	r2, #0
   1d24c:	str	r0, [r7, #4]!
   1d250:	add	r3, r7, #20
   1d254:	str	r6, [r7, #4]
   1d258:	str	r4, [r7, #8]
   1d25c:	str	r0, [r7, #12]
   1d260:	str	r0, [r7, #16]
   1d264:	stm	r3, {r0, r1, r2}
   1d268:	str	r7, [r6]
   1d26c:	str	r7, [r4]
   1d270:	b	1d488 <__assert_fail@plt+0xbfd8>
   1d274:	mov	r0, #5
   1d278:	str	r0, [lr]
   1d27c:	ldr	r1, [sl, #64]	; 0x40
   1d280:	cmp	r1, #31
   1d284:	beq	1e7d8 <__assert_fail@plt+0xd328>
   1d288:	ldr	r0, [sl, #56]	; 0x38
   1d28c:	add	r4, r0, r1, lsl #5
   1d290:	add	r2, r1, #1
   1d294:	mov	r0, #0
   1d298:	mvn	r3, #0
   1d29c:	str	r2, [sl, #64]	; 0x40
   1d2a0:	str	r0, [r4, #4]!
   1d2a4:	str	r0, [r4, #8]
   1d2a8:	str	r0, [r4, #4]
   1d2ac:	ldm	lr, {r1, r2}
   1d2b0:	str	r3, [r4, #28]
   1d2b4:	str	r0, [r4, #16]
   1d2b8:	str	r0, [r4, #12]
   1d2bc:	bic	r0, r2, #786432	; 0xc0000
   1d2c0:	str	r1, [r4, #20]
   1d2c4:	str	r0, [r4, #24]
   1d2c8:	mov	r0, #10
   1d2cc:	str	r0, [lr]
   1d2d0:	ldr	r1, [sl, #64]	; 0x40
   1d2d4:	cmp	r1, #31
   1d2d8:	beq	1c5f0 <__assert_fail@plt+0xb140>
   1d2dc:	ldr	r0, [sl, #56]	; 0x38
   1d2e0:	add	r5, r0, r1, lsl #5
   1d2e4:	add	r2, r1, #1
   1d2e8:	mov	r0, #0
   1d2ec:	mvn	r3, #0
   1d2f0:	str	r2, [sl, #64]	; 0x40
   1d2f4:	str	r0, [r5, #4]!
   1d2f8:	str	r0, [r5, #8]
   1d2fc:	str	r0, [r5, #4]
   1d300:	ldm	lr, {r1, r2}
   1d304:	str	r3, [r5, #28]
   1d308:	str	r0, [r5, #16]
   1d30c:	str	r0, [r5, #12]
   1d310:	bic	r0, r2, #786432	; 0xc0000
   1d314:	str	r1, [r5, #20]
   1d318:	str	r0, [r5, #24]
   1d31c:	ldr	r1, [sl, #64]	; 0x40
   1d320:	cmp	r1, #31
   1d324:	beq	1e8fc <__assert_fail@plt+0xd44c>
   1d328:	ldr	r0, [sl, #56]	; 0x38
   1d32c:	add	r6, r0, r1, lsl #5
   1d330:	add	r2, r1, #1
   1d334:	mov	r0, #0
   1d338:	cmp	r4, #0
   1d33c:	mov	r1, #10
   1d340:	str	r2, [sl, #64]	; 0x40
   1d344:	mvn	r2, #0
   1d348:	str	r0, [r6, #4]!
   1d34c:	add	r3, r6, #20
   1d350:	stmib	r6, {r4, r5}
   1d354:	str	r0, [r6, #12]
   1d358:	str	r0, [r6, #16]
   1d35c:	stm	r3, {r0, r1, r2}
   1d360:	strne	r6, [r4]
   1d364:	cmp	r5, #0
   1d368:	strne	r6, [r5]
   1d36c:	cmpne	r4, #0
   1d370:	bne	1d3d8 <__assert_fail@plt+0xbf28>
   1d374:	mov	r0, #12
   1d378:	ldr	r1, [sp, #20]
   1d37c:	str	r0, [r1]
   1d380:	mov	r0, r9
   1d384:	sub	sp, fp, #28
   1d388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d38c:	ldr	r1, [sl, #64]	; 0x40
   1d390:	cmp	r1, #31
   1d394:	beq	1e80c <__assert_fail@plt+0xd35c>
   1d398:	ldr	r0, [sl, #56]	; 0x38
   1d39c:	add	r6, r0, r1, lsl #5
   1d3a0:	add	r2, r1, #1
   1d3a4:	mov	r0, #0
   1d3a8:	mvn	r3, #0
   1d3ac:	str	r2, [sl, #64]	; 0x40
   1d3b0:	str	r0, [r6, #4]!
   1d3b4:	str	r0, [r6, #8]
   1d3b8:	str	r0, [r6, #4]
   1d3bc:	ldm	lr, {r1, r2}
   1d3c0:	str	r3, [r6, #28]
   1d3c4:	str	r0, [r6, #16]
   1d3c8:	str	r0, [r6, #12]
   1d3cc:	bic	r0, r2, #786432	; 0xc0000
   1d3d0:	str	r1, [r6, #20]
   1d3d4:	str	r0, [r6, #24]
   1d3d8:	ldr	r4, [sp, #28]
   1d3dc:	mov	r0, lr
   1d3e0:	mov	r2, ip
   1d3e4:	mov	r1, r4
   1d3e8:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1d3ec:	ldr	r1, [r4, #40]	; 0x28
   1d3f0:	mov	r9, r6
   1d3f4:	add	r0, r1, r0
   1d3f8:	str	r0, [r4, #40]	; 0x28
   1d3fc:	mov	r0, r9
   1d400:	sub	sp, fp, #28
   1d404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d408:	ldrb	r0, [r7, #4]
   1d40c:	cmp	r0, #9
   1d410:	bne	1e92c <__assert_fail@plt+0xd47c>
   1d414:	mov	lr, r7
   1d418:	cmp	r4, #8
   1d41c:	bhi	1d430 <__assert_fail@plt+0xbf80>
   1d420:	ldr	r0, [sl, #84]	; 0x54
   1d424:	mov	r1, #1
   1d428:	orr	r0, r0, r1, lsl r4
   1d42c:	str	r0, [sl, #84]	; 0x54
   1d430:	ldr	r1, [sl, #64]	; 0x40
   1d434:	ldr	ip, [sp, #48]	; 0x30
   1d438:	cmp	r1, #31
   1d43c:	beq	1e770 <__assert_fail@plt+0xd2c0>
   1d440:	ldr	r0, [sl, #56]	; 0x38
   1d444:	add	r0, r0, r1, lsl #5
   1d448:	add	r2, r1, #1
   1d44c:	mov	r1, #0
   1d450:	cmp	r9, #0
   1d454:	mvn	r3, #0
   1d458:	str	r2, [sl, #64]	; 0x40
   1d45c:	mov	r2, #17
   1d460:	mov	r7, r0
   1d464:	str	r1, [r7, #4]!
   1d468:	add	r6, r7, #20
   1d46c:	str	r9, [r7, #4]
   1d470:	str	r1, [r7, #8]
   1d474:	str	r1, [r7, #12]
   1d478:	str	r1, [r7, #16]
   1d47c:	stm	r6, {r1, r2, r3}
   1d480:	strne	r7, [r9]
   1d484:	str	r4, [r0, #24]
   1d488:	mov	r0, lr
   1d48c:	mov	r1, r5
   1d490:	mov	r2, ip
   1d494:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1d498:	ldr	r1, [r5, #40]	; 0x28
   1d49c:	ldr	ip, [sp, #48]	; 0x30
   1d4a0:	ldr	lr, [sp, #44]	; 0x2c
   1d4a4:	mov	r4, #0
   1d4a8:	add	r0, r1, r0
   1d4ac:	str	r0, [r5, #40]	; 0x28
   1d4b0:	and	r0, ip, #16777216	; 0x1000000
   1d4b4:	str	r0, [sp, #32]
   1d4b8:	and	r0, ip, #2097152	; 0x200000
   1d4bc:	str	r0, [sp, #16]
   1d4c0:	add	r0, sl, #56	; 0x38
   1d4c4:	str	r0, [sp, #60]	; 0x3c
   1d4c8:	add	r0, sl, #64	; 0x40
   1d4cc:	str	r0, [sp, #24]
   1d4d0:	ldrb	r0, [lr, #4]
   1d4d4:	mov	r9, r7
   1d4d8:	cmp	r0, #23
   1d4dc:	bls	1d504 <__assert_fail@plt+0xc054>
   1d4e0:	b	1e3e8 <__assert_fail@plt+0xcf38>
   1d4e4:	ldrb	r1, [lr, #4]
   1d4e8:	cmp	r1, #23
   1d4ec:	cmpne	r1, #11
   1d4f0:	beq	1e334 <__assert_fail@plt+0xce84>
   1d4f4:	ldrb	r0, [lr, #4]
   1d4f8:	mov	r9, r7
   1d4fc:	cmp	r0, #23
   1d500:	bhi	1e3e8 <__assert_fail@plt+0xcf38>
   1d504:	movw	r2, #2048	; 0x800
   1d508:	mov	r1, #1
   1d50c:	movt	r2, #140	; 0x8c
   1d510:	tst	r2, r1, lsl r0
   1d514:	beq	1e3e8 <__assert_fail@plt+0xcf38>
   1d518:	cmp	r0, #23
   1d51c:	str	r9, [sp, #40]	; 0x28
   1d520:	bne	1d5d0 <__assert_fail@plt+0xc120>
   1d524:	ldr	r9, [r5, #40]	; 0x28
   1d528:	ldm	lr, {r7, sl}
   1d52c:	mov	r6, r5
   1d530:	mvn	r2, #0
   1d534:	mov	r8, r2
   1d538:	mov	r0, lr
   1d53c:	mov	r1, r6
   1d540:	mov	r2, ip
   1d544:	mov	r5, r6
   1d548:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1d54c:	ldr	r1, [r6, #40]	; 0x28
   1d550:	ldr	lr, [sp, #44]	; 0x2c
   1d554:	add	r0, r1, r0
   1d558:	str	r0, [r6, #40]	; 0x28
   1d55c:	ldrb	r0, [lr, #4]
   1d560:	ldrb	r1, [lr]
   1d564:	cmp	r0, #24
   1d568:	beq	1d5ec <__assert_fail@plt+0xc13c>
   1d56c:	cmp	r0, #2
   1d570:	beq	1dc48 <__assert_fail@plt+0xc798>
   1d574:	cmp	r1, #44	; 0x2c
   1d578:	beq	1d5ec <__assert_fail@plt+0xc13c>
   1d57c:	ldr	ip, [sp, #48]	; 0x30
   1d580:	mvn	r2, #1
   1d584:	cmp	r1, #48	; 0x30
   1d588:	bcc	1d534 <__assert_fail@plt+0xc084>
   1d58c:	cmp	r0, #1
   1d590:	bne	1d534 <__assert_fail@plt+0xc084>
   1d594:	cmn	r8, #2
   1d598:	beq	1d534 <__assert_fail@plt+0xc084>
   1d59c:	cmp	r1, #57	; 0x39
   1d5a0:	bhi	1d534 <__assert_fail@plt+0xc084>
   1d5a4:	cmn	r8, #1
   1d5a8:	beq	1d5c8 <__assert_fail@plt+0xc118>
   1d5ac:	add	r0, r8, r8, lsl #2
   1d5b0:	add	r0, r1, r0, lsl #1
   1d5b4:	movw	r1, #32816	; 0x8030
   1d5b8:	cmp	r0, r1
   1d5bc:	movge	r0, r1
   1d5c0:	sub	r2, r0, #48	; 0x30
   1d5c4:	b	1d534 <__assert_fail@plt+0xc084>
   1d5c8:	sub	r2, r1, #48	; 0x30
   1d5cc:	b	1d534 <__assert_fail@plt+0xc084>
   1d5d0:	cmp	r0, #19
   1d5d4:	sub	r0, r0, #18
   1d5d8:	mvn	sl, #0
   1d5dc:	clz	r0, r0
   1d5e0:	movweq	sl, #1
   1d5e4:	lsr	r8, r0, #5
   1d5e8:	b	1d7a0 <__assert_fail@plt+0xc2f0>
   1d5ec:	cmn	r8, #1
   1d5f0:	bne	1d634 <__assert_fail@plt+0xc184>
   1d5f4:	ldr	ip, [sp, #48]	; 0x30
   1d5f8:	cmp	r1, #44	; 0x2c
   1d5fc:	moveq	r8, #0
   1d600:	cmpeq	r0, #1
   1d604:	beq	1d690 <__assert_fail@plt+0xc1e0>
   1d608:	ldr	r0, [sp, #20]
   1d60c:	mov	r1, #10
   1d610:	str	r1, [r0]
   1d614:	ldr	r9, [sp, #40]	; 0x28
   1d618:	mov	r7, #0
   1d61c:	mov	r5, r6
   1d620:	clz	r0, r7
   1d624:	cmp	r7, #0
   1d628:	lsr	r0, r0, #5
   1d62c:	beq	1e314 <__assert_fail@plt+0xce64>
   1d630:	b	1e324 <__assert_fail@plt+0xce74>
   1d634:	ldr	ip, [sp, #48]	; 0x30
   1d638:	cmn	r8, #2
   1d63c:	beq	1d654 <__assert_fail@plt+0xc1a4>
   1d640:	cmp	r0, #24
   1d644:	beq	1d74c <__assert_fail@plt+0xc29c>
   1d648:	cmp	r0, #1
   1d64c:	cmpeq	r1, #44	; 0x2c
   1d650:	beq	1d690 <__assert_fail@plt+0xc1e0>
   1d654:	ldr	r1, [sp, #16]
   1d658:	cmp	r1, #0
   1d65c:	beq	1dc58 <__assert_fail@plt+0xc7a8>
   1d660:	mov	r0, #1
   1d664:	str	r9, [r6, #40]	; 0x28
   1d668:	mov	r5, r6
   1d66c:	bfi	sl, r0, #0, #8
   1d670:	stm	lr, {r7, sl}
   1d674:	ldr	r9, [sp, #40]	; 0x28
   1d678:	mov	r7, r9
   1d67c:	clz	r0, r7
   1d680:	cmp	r7, #0
   1d684:	lsr	r0, r0, #5
   1d688:	beq	1e314 <__assert_fail@plt+0xce64>
   1d68c:	b	1e324 <__assert_fail@plt+0xce74>
   1d690:	mvn	r2, #0
   1d694:	str	r9, [sp, #56]	; 0x38
   1d698:	mov	r9, r2
   1d69c:	mov	r0, lr
   1d6a0:	mov	r1, r6
   1d6a4:	mov	r2, ip
   1d6a8:	mov	r5, r6
   1d6ac:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1d6b0:	ldr	r1, [r6, #40]	; 0x28
   1d6b4:	ldr	lr, [sp, #44]	; 0x2c
   1d6b8:	add	r0, r1, r0
   1d6bc:	str	r0, [r6, #40]	; 0x28
   1d6c0:	ldrb	r0, [lr, #4]
   1d6c4:	cmp	r0, #24
   1d6c8:	beq	1d734 <__assert_fail@plt+0xc284>
   1d6cc:	cmp	r0, #2
   1d6d0:	beq	1e0b4 <__assert_fail@plt+0xcc04>
   1d6d4:	ldrb	r1, [lr]
   1d6d8:	ldr	ip, [sp, #48]	; 0x30
   1d6dc:	cmp	r1, #44	; 0x2c
   1d6e0:	beq	1d738 <__assert_fail@plt+0xc288>
   1d6e4:	mvn	r2, #1
   1d6e8:	cmp	r1, #48	; 0x30
   1d6ec:	bcc	1d698 <__assert_fail@plt+0xc1e8>
   1d6f0:	cmp	r0, #1
   1d6f4:	bne	1d698 <__assert_fail@plt+0xc1e8>
   1d6f8:	cmn	r9, #2
   1d6fc:	beq	1d698 <__assert_fail@plt+0xc1e8>
   1d700:	cmp	r1, #57	; 0x39
   1d704:	bhi	1d698 <__assert_fail@plt+0xc1e8>
   1d708:	cmn	r9, #1
   1d70c:	beq	1d72c <__assert_fail@plt+0xc27c>
   1d710:	add	r0, r9, r9, lsl #2
   1d714:	add	r0, r1, r0, lsl #1
   1d718:	movw	r1, #32816	; 0x8030
   1d71c:	cmp	r0, r1
   1d720:	movge	r0, r1
   1d724:	sub	r2, r0, #48	; 0x30
   1d728:	b	1d698 <__assert_fail@plt+0xc1e8>
   1d72c:	sub	r2, r1, #48	; 0x30
   1d730:	b	1d698 <__assert_fail@plt+0xc1e8>
   1d734:	ldr	ip, [sp, #48]	; 0x30
   1d738:	mov	r2, r9
   1d73c:	ldr	r9, [sp, #56]	; 0x38
   1d740:	cmn	r2, #2
   1d744:	bne	1d758 <__assert_fail@plt+0xc2a8>
   1d748:	b	1d654 <__assert_fail@plt+0xc1a4>
   1d74c:	mov	r2, r8
   1d750:	cmn	r2, #2
   1d754:	beq	1d654 <__assert_fail@plt+0xc1a4>
   1d758:	ldr	r9, [sp, #40]	; 0x28
   1d75c:	cmp	r8, r2
   1d760:	mov	r1, #0
   1d764:	mov	r5, r6
   1d768:	movwle	r1, #1
   1d76c:	cmp	r0, #24
   1d770:	bne	1e074 <__assert_fail@plt+0xcbc4>
   1d774:	add	r0, r2, #1
   1d778:	mov	sl, r2
   1d77c:	clz	r0, r0
   1d780:	lsr	r0, r0, #5
   1d784:	orrs	r0, r1, r0
   1d788:	beq	1e074 <__assert_fail@plt+0xcbc4>
   1d78c:	cmn	sl, #1
   1d790:	mov	r0, sl
   1d794:	moveq	r0, r8
   1d798:	cmp	r0, #32768	; 0x8000
   1d79c:	bge	1e244 <__assert_fail@plt+0xcd94>
   1d7a0:	mov	r0, lr
   1d7a4:	mov	r1, r5
   1d7a8:	mov	r2, ip
   1d7ac:	bl	1b678 <__assert_fail@plt+0xa1c8>
   1d7b0:	ldr	r1, [r5, #40]	; 0x28
   1d7b4:	mov	r7, #0
   1d7b8:	cmp	r9, #0
   1d7bc:	add	r0, r1, r0
   1d7c0:	str	r0, [r5, #40]	; 0x28
   1d7c4:	beq	1dc70 <__assert_fail@plt+0xc7c0>
   1d7c8:	ldr	ip, [sp, #48]	; 0x30
   1d7cc:	orrs	r0, sl, r8
   1d7d0:	beq	1dc8c <__assert_fail@plt+0xc7dc>
   1d7d4:	mov	r0, #0
   1d7d8:	cmp	r8, #1
   1d7dc:	mov	r7, r9
   1d7e0:	str	r0, [sp, #36]	; 0x24
   1d7e4:	ldr	lr, [sp, #44]	; 0x2c
   1d7e8:	ldr	r5, [sp, #24]
   1d7ec:	bge	1dd50 <__assert_fail@plt+0xc8a0>
   1d7f0:	ldrb	r0, [r7, #24]
   1d7f4:	cmp	r0, #17
   1d7f8:	bne	1d86c <__assert_fail@plt+0xc3bc>
   1d7fc:	ldr	r0, [r7, #20]
   1d800:	mov	r2, r7
   1d804:	mov	r1, r2
   1d808:	ldr	r2, [r2, #4]
   1d80c:	cmp	r2, #0
   1d810:	bne	1d804 <__assert_fail@plt+0xc354>
   1d814:	ldr	r2, [r1, #8]
   1d818:	cmp	r2, #0
   1d81c:	bne	1d804 <__assert_fail@plt+0xc354>
   1d820:	ldr	r2, [r1, #24]
   1d824:	uxtb	r3, r2
   1d828:	cmp	r3, #17
   1d82c:	bne	1d840 <__assert_fail@plt+0xc390>
   1d830:	ldr	r3, [r1, #20]
   1d834:	cmp	r3, r0
   1d838:	orreq	r2, r2, #524288	; 0x80000
   1d83c:	streq	r2, [r1, #24]
   1d840:	ldr	r3, [r1]
   1d844:	cmp	r3, #0
   1d848:	beq	1d86c <__assert_fail@plt+0xc3bc>
   1d84c:	ldr	r2, [r3, #8]
   1d850:	cmp	r2, r1
   1d854:	mov	r1, r3
   1d858:	beq	1d820 <__assert_fail@plt+0xc370>
   1d85c:	cmp	r2, #0
   1d860:	mov	r1, r3
   1d864:	beq	1d820 <__assert_fail@plt+0xc370>
   1d868:	b	1d804 <__assert_fail@plt+0xc354>
   1d86c:	ldr	r1, [r5]
   1d870:	cmn	sl, #1
   1d874:	mov	r6, #10
   1d878:	movweq	r6, #11
   1d87c:	cmp	r1, #31
   1d880:	beq	1e018 <__assert_fail@plt+0xcb68>
   1d884:	ldr	r0, [sp, #60]	; 0x3c
   1d888:	ldr	r0, [r0]
   1d88c:	add	r9, r0, r1, lsl #5
   1d890:	add	r2, r1, #1
   1d894:	mvn	r0, #0
   1d898:	str	r2, [r5]
   1d89c:	str	r4, [r9, #4]!
   1d8a0:	str	r7, [r9, #4]
   1d8a4:	str	r4, [r9, #8]
   1d8a8:	str	r4, [r9, #12]
   1d8ac:	str	r4, [r9, #16]
   1d8b0:	str	r4, [r9, #20]
   1d8b4:	str	r6, [r9, #24]
   1d8b8:	str	r0, [r9, #28]
   1d8bc:	add	r0, r8, #2
   1d8c0:	str	r9, [r7]
   1d8c4:	cmp	r0, sl
   1d8c8:	bgt	1dbc8 <__assert_fail@plt+0xc718>
   1d8cc:	str	sl, [sp, #52]	; 0x34
   1d8d0:	mov	sl, r9
   1d8d4:	ldr	r1, [r5]
   1d8d8:	str	r0, [sp, #56]	; 0x38
   1d8dc:	cmp	r1, #31
   1d8e0:	beq	1db00 <__assert_fail@plt+0xc650>
   1d8e4:	ldr	r0, [sp, #60]	; 0x3c
   1d8e8:	ldr	r0, [r0]
   1d8ec:	add	r8, r0, r1, lsl #5
   1d8f0:	add	r3, r1, #1
   1d8f4:	add	r2, r7, #20
   1d8f8:	sub	r6, fp, #80	; 0x50
   1d8fc:	str	r3, [r5]
   1d900:	str	r4, [r8, #4]!
   1d904:	str	r4, [r8, #8]
   1d908:	str	r4, [r8, #4]
   1d90c:	ldm	r2, {r0, r1}
   1d910:	mvn	r2, #0
   1d914:	str	r2, [r8, #28]
   1d918:	str	r4, [r8, #16]
   1d91c:	str	r4, [r8, #12]
   1d920:	str	r0, [r8, #20]
   1d924:	bic	r0, r1, #786432	; 0xc0000
   1d928:	str	r0, [r8, #24]
   1d92c:	mov	r0, r8
   1d930:	str	r8, [fp, #-80]	; 0xffffffb0
   1d934:	str	r9, [r0]
   1d938:	ldr	r0, [r6]
   1d93c:	ldr	r1, [r0, #24]
   1d940:	orr	r1, r1, #262144	; 0x40000
   1d944:	str	r1, [r0, #24]
   1d948:	ldr	r0, [r7, #4]
   1d94c:	ldr	r9, [r6]
   1d950:	cmp	r0, #0
   1d954:	beq	1d9b8 <__assert_fail@plt+0xc508>
   1d958:	add	r6, r9, #4
   1d95c:	mov	r7, r0
   1d960:	ldr	r1, [r5]
   1d964:	cmp	r1, #31
   1d968:	beq	1d9f8 <__assert_fail@plt+0xc548>
   1d96c:	ldr	r0, [sp, #60]	; 0x3c
   1d970:	ldr	r0, [r0]
   1d974:	add	r0, r0, r1, lsl #5
   1d978:	add	r3, r1, #1
   1d97c:	add	r2, r7, #20
   1d980:	str	r3, [r5]
   1d984:	mvn	r3, #0
   1d988:	str	r4, [r0, #4]!
   1d98c:	str	r4, [r0, #8]
   1d990:	str	r4, [r0, #4]
   1d994:	ldm	r2, {r1, r2}
   1d998:	str	r3, [r0, #28]
   1d99c:	str	r4, [r0, #16]
   1d9a0:	str	r4, [r0, #12]
   1d9a4:	str	r1, [r0, #20]
   1d9a8:	bic	r1, r2, #786432	; 0xc0000
   1d9ac:	str	r1, [r0, #24]
   1d9b0:	str	r0, [r6]
   1d9b4:	b	1d934 <__assert_fail@plt+0xc484>
   1d9b8:	mov	r1, #0
   1d9bc:	mov	r0, r7
   1d9c0:	ldr	r7, [r7, #8]
   1d9c4:	cmp	r7, r1
   1d9c8:	cmpne	r7, #0
   1d9cc:	bne	1d9e8 <__assert_fail@plt+0xc538>
   1d9d0:	ldr	r7, [r0]
   1d9d4:	ldr	r9, [r9]
   1d9d8:	mov	r1, r0
   1d9dc:	cmp	r7, #0
   1d9e0:	bne	1d9bc <__assert_fail@plt+0xc50c>
   1d9e4:	b	1da2c <__assert_fail@plt+0xc57c>
   1d9e8:	add	r6, r9, #8
   1d9ec:	ldr	r1, [r5]
   1d9f0:	cmp	r1, #31
   1d9f4:	bne	1d96c <__assert_fail@plt+0xc4bc>
   1d9f8:	mov	r0, #996	; 0x3e4
   1d9fc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1da00:	cmp	r0, #0
   1da04:	beq	1db74 <__assert_fail@plt+0xc6c4>
   1da08:	ldr	r2, [sp, #60]	; 0x3c
   1da0c:	ldr	ip, [sp, #48]	; 0x30
   1da10:	ldr	lr, [sp, #44]	; 0x2c
   1da14:	ldr	r1, [r2]
   1da18:	str	r1, [r0]
   1da1c:	mov	r1, #0
   1da20:	str	r0, [r2]
   1da24:	str	r1, [r5]
   1da28:	b	1d974 <__assert_fail@plt+0xc4c4>
   1da2c:	mov	r7, r8
   1da30:	ldr	r1, [r5]
   1da34:	cmp	r1, #31
   1da38:	beq	1db90 <__assert_fail@plt+0xc6e0>
   1da3c:	ldr	r0, [sp, #60]	; 0x3c
   1da40:	ldr	r0, [r0]
   1da44:	add	r6, r0, r1, lsl #5
   1da48:	add	r2, r1, #1
   1da4c:	mov	r0, #16
   1da50:	cmp	r7, #0
   1da54:	str	r2, [r5]
   1da58:	str	r4, [r6, #4]!
   1da5c:	str	sl, [r6, #4]
   1da60:	str	r7, [r6, #8]
   1da64:	str	r4, [r6, #12]
   1da68:	str	r4, [r6, #16]
   1da6c:	str	r4, [r6, #20]
   1da70:	str	r0, [r6, #24]
   1da74:	mvn	r0, #0
   1da78:	str	r0, [r6, #28]
   1da7c:	str	r6, [sl]
   1da80:	beq	1e2ec <__assert_fail@plt+0xce3c>
   1da84:	str	r6, [r7]
   1da88:	ldr	r1, [r5]
   1da8c:	cmp	r1, #31
   1da90:	beq	1db34 <__assert_fail@plt+0xc684>
   1da94:	ldr	r0, [sp, #60]	; 0x3c
   1da98:	ldr	r0, [r0]
   1da9c:	add	sl, r0, r1, lsl #5
   1daa0:	add	r2, r1, #1
   1daa4:	mov	r0, #10
   1daa8:	ldr	r1, [sp, #56]	; 0x38
   1daac:	str	r2, [r5]
   1dab0:	str	r4, [sl, #4]!
   1dab4:	str	r6, [sl, #4]
   1dab8:	str	r4, [sl, #8]
   1dabc:	str	r4, [sl, #12]
   1dac0:	str	r4, [sl, #16]
   1dac4:	str	r4, [sl, #20]
   1dac8:	str	r0, [sl, #24]
   1dacc:	mvn	r0, #0
   1dad0:	str	r0, [sl, #28]
   1dad4:	ldr	r0, [sp, #52]	; 0x34
   1dad8:	str	sl, [r6]
   1dadc:	cmp	r1, r0
   1dae0:	bge	1dbc4 <__assert_fail@plt+0xc714>
   1dae4:	ldr	r9, [r7]
   1dae8:	mov	r0, r1
   1daec:	add	r0, r1, #1
   1daf0:	ldr	r1, [r5]
   1daf4:	str	r0, [sp, #56]	; 0x38
   1daf8:	cmp	r1, #31
   1dafc:	bne	1d8e4 <__assert_fail@plt+0xc434>
   1db00:	mov	r0, #996	; 0x3e4
   1db04:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1db08:	cmp	r0, #0
   1db0c:	beq	1db68 <__assert_fail@plt+0xc6b8>
   1db10:	ldr	r2, [sp, #60]	; 0x3c
   1db14:	ldr	ip, [sp, #48]	; 0x30
   1db18:	ldr	lr, [sp, #44]	; 0x2c
   1db1c:	ldr	r1, [r2]
   1db20:	str	r1, [r0]
   1db24:	mov	r1, #0
   1db28:	str	r0, [r2]
   1db2c:	str	r1, [r5]
   1db30:	b	1d8ec <__assert_fail@plt+0xc43c>
   1db34:	mov	r0, #996	; 0x3e4
   1db38:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1db3c:	ldr	lr, [sp, #44]	; 0x2c
   1db40:	ldr	ip, [sp, #48]	; 0x30
   1db44:	cmp	r0, #0
   1db48:	beq	1e2ec <__assert_fail@plt+0xce3c>
   1db4c:	ldr	r2, [sp, #60]	; 0x3c
   1db50:	ldr	r1, [r2]
   1db54:	str	r1, [r0]
   1db58:	mov	r1, #0
   1db5c:	str	r0, [r2]
   1db60:	str	r1, [r5]
   1db64:	b	1da9c <__assert_fail@plt+0xc5ec>
   1db68:	mov	r7, #0
   1db6c:	str	r7, [fp, #-80]	; 0xffffffb0
   1db70:	b	1db7c <__assert_fail@plt+0xc6cc>
   1db74:	mov	r7, #0
   1db78:	str	r7, [r6]
   1db7c:	ldr	ip, [sp, #48]	; 0x30
   1db80:	ldr	lr, [sp, #44]	; 0x2c
   1db84:	ldr	r1, [r5]
   1db88:	cmp	r1, #31
   1db8c:	bne	1da3c <__assert_fail@plt+0xc58c>
   1db90:	mov	r0, #996	; 0x3e4
   1db94:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1db98:	ldr	lr, [sp, #44]	; 0x2c
   1db9c:	ldr	ip, [sp, #48]	; 0x30
   1dba0:	cmp	r0, #0
   1dba4:	beq	1e2ec <__assert_fail@plt+0xce3c>
   1dba8:	ldr	r2, [sp, #60]	; 0x3c
   1dbac:	ldr	r1, [r2]
   1dbb0:	str	r1, [r0]
   1dbb4:	mov	r1, #0
   1dbb8:	str	r0, [r2]
   1dbbc:	str	r1, [r5]
   1dbc0:	b	1da44 <__assert_fail@plt+0xc594>
   1dbc4:	mov	r9, sl
   1dbc8:	ldr	r6, [sp, #36]	; 0x24
   1dbcc:	ldr	r8, [sp, #28]
   1dbd0:	cmp	r6, #0
   1dbd4:	beq	1dc2c <__assert_fail@plt+0xc77c>
   1dbd8:	ldr	r1, [r5]
   1dbdc:	cmp	r1, #31
   1dbe0:	beq	1e080 <__assert_fail@plt+0xcbd0>
   1dbe4:	ldr	r0, [sp, #60]	; 0x3c
   1dbe8:	ldr	r0, [r0]
   1dbec:	add	r7, r0, r1, lsl #5
   1dbf0:	add	r2, r1, #1
   1dbf4:	mov	r0, #0
   1dbf8:	mov	r1, #16
   1dbfc:	str	r2, [r5]
   1dc00:	str	r0, [r7, #4]!
   1dc04:	stmib	r7, {r6, r9}
   1dc08:	str	r0, [r7, #12]
   1dc0c:	str	r0, [r7, #16]
   1dc10:	str	r0, [r7, #20]
   1dc14:	str	r1, [r7, #24]
   1dc18:	mvn	r1, #0
   1dc1c:	str	r1, [r7, #28]
   1dc20:	str	r7, [r6]
   1dc24:	str	r7, [r9]
   1dc28:	b	1dc34 <__assert_fail@plt+0xc784>
   1dc2c:	mov	r0, #0
   1dc30:	mov	r7, r9
   1dc34:	mov	r5, r8
   1dc38:	ldr	r1, [sp, #32]
   1dc3c:	cmp	r1, #0
   1dc40:	beq	1d4f4 <__assert_fail@plt+0xc044>
   1dc44:	b	1d4e4 <__assert_fail@plt+0xc034>
   1dc48:	ldr	ip, [sp, #48]	; 0x30
   1dc4c:	ldr	r1, [sp, #16]
   1dc50:	cmp	r1, #0
   1dc54:	bne	1d660 <__assert_fail@plt+0xc1b0>
   1dc58:	ldr	r1, [sp, #20]
   1dc5c:	cmp	r0, #2
   1dc60:	mov	r0, #10
   1dc64:	movweq	r0, #9
   1dc68:	str	r0, [r1]
   1dc6c:	b	1d614 <__assert_fail@plt+0xc164>
   1dc70:	ldr	ip, [sp, #48]	; 0x30
   1dc74:	ldr	lr, [sp, #44]	; 0x2c
   1dc78:	clz	r0, r7
   1dc7c:	cmp	r7, #0
   1dc80:	lsr	r0, r0, #5
   1dc84:	beq	1e314 <__assert_fail@plt+0xce64>
   1dc88:	b	1e324 <__assert_fail@plt+0xce74>
   1dc8c:	ldr	lr, [sp, #44]	; 0x2c
   1dc90:	mov	r0, r9
   1dc94:	mov	r6, r0
   1dc98:	ldr	r0, [r0, #4]
   1dc9c:	cmp	r0, #0
   1dca0:	bne	1dc94 <__assert_fail@plt+0xc7e4>
   1dca4:	ldr	r0, [r6, #8]
   1dca8:	cmp	r0, #0
   1dcac:	bne	1dc94 <__assert_fail@plt+0xc7e4>
   1dcb0:	ldr	r0, [r6, #24]
   1dcb4:	movw	r1, #255	; 0xff
   1dcb8:	movt	r1, #4
   1dcbc:	and	r0, r0, r1
   1dcc0:	cmp	r0, #3
   1dcc4:	beq	1dcf8 <__assert_fail@plt+0xc848>
   1dcc8:	cmp	r0, #6
   1dccc:	bne	1dd0c <__assert_fail@plt+0xc85c>
   1dcd0:	ldr	r5, [r6, #20]
   1dcd4:	ldr	r0, [r5]
   1dcd8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1dcdc:	ldr	r0, [r5, #4]
   1dce0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1dce4:	ldr	r0, [r5, #8]
   1dce8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1dcec:	ldr	r0, [r5, #12]
   1dcf0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1dcf4:	b	1dcfc <__assert_fail@plt+0xc84c>
   1dcf8:	ldr	r5, [r6, #20]
   1dcfc:	mov	r0, r5
   1dd00:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1dd04:	ldr	ip, [sp, #48]	; 0x30
   1dd08:	ldr	lr, [sp, #44]	; 0x2c
   1dd0c:	ldr	r1, [r6]
   1dd10:	cmp	r1, #0
   1dd14:	beq	1dd38 <__assert_fail@plt+0xc888>
   1dd18:	ldr	r0, [r1, #8]
   1dd1c:	cmp	r0, r6
   1dd20:	mov	r6, r1
   1dd24:	beq	1dcb0 <__assert_fail@plt+0xc800>
   1dd28:	cmp	r0, #0
   1dd2c:	mov	r6, r1
   1dd30:	beq	1dcb0 <__assert_fail@plt+0xc800>
   1dd34:	b	1dc94 <__assert_fail@plt+0xc7e4>
   1dd38:	ldr	r5, [sp, #28]
   1dd3c:	clz	r0, r7
   1dd40:	cmp	r7, #0
   1dd44:	lsr	r0, r0, #5
   1dd48:	beq	1e314 <__assert_fail@plt+0xce64>
   1dd4c:	b	1e324 <__assert_fail@plt+0xce74>
   1dd50:	mov	r3, r9
   1dd54:	str	sl, [sp, #52]	; 0x34
   1dd58:	str	r9, [sp, #36]	; 0x24
   1dd5c:	beq	1e04c <__assert_fail@plt+0xcb9c>
   1dd60:	ldr	sl, [sp, #40]	; 0x28
   1dd64:	ldr	r0, [sl]
   1dd68:	mov	r3, sl
   1dd6c:	str	r0, [sp, #36]	; 0x24
   1dd70:	mov	r0, #2
   1dd74:	ldr	r1, [r5]
   1dd78:	str	r0, [sp, #56]	; 0x38
   1dd7c:	cmp	r1, #31
   1dd80:	beq	1df5c <__assert_fail@plt+0xcaac>
   1dd84:	ldr	r0, [sp, #60]	; 0x3c
   1dd88:	ldr	r0, [r0]
   1dd8c:	add	r6, r0, r1, lsl #5
   1dd90:	add	r2, r3, #20
   1dd94:	mov	r9, r3
   1dd98:	add	r3, r1, #1
   1dd9c:	sub	r7, fp, #80	; 0x50
   1dda0:	str	r3, [r5]
   1dda4:	str	r4, [r6, #4]!
   1dda8:	str	r4, [r6, #8]
   1ddac:	str	r4, [r6, #4]
   1ddb0:	ldm	r2, {r0, r1}
   1ddb4:	mvn	r2, #0
   1ddb8:	str	r2, [r6, #28]
   1ddbc:	str	r4, [r6, #16]
   1ddc0:	str	r4, [r6, #12]
   1ddc4:	str	r0, [r6, #20]
   1ddc8:	bic	r0, r1, #786432	; 0xc0000
   1ddcc:	str	r0, [r6, #24]
   1ddd0:	mov	r0, r6
   1ddd4:	str	r6, [fp, #-80]	; 0xffffffb0
   1ddd8:	ldr	r1, [sp, #36]	; 0x24
   1dddc:	str	r1, [r0]
   1dde0:	ldr	r0, [r7]
   1dde4:	ldr	r1, [r0, #24]
   1dde8:	orr	r1, r1, #262144	; 0x40000
   1ddec:	str	r1, [r0, #24]
   1ddf0:	ldr	r0, [r9, #4]
   1ddf4:	ldr	r1, [r7]
   1ddf8:	cmp	r0, #0
   1ddfc:	str	r1, [sp, #36]	; 0x24
   1de00:	beq	1de64 <__assert_fail@plt+0xc9b4>
   1de04:	add	r7, r1, #4
   1de08:	mov	r9, r0
   1de0c:	ldr	r1, [r5]
   1de10:	cmp	r1, #31
   1de14:	beq	1deb0 <__assert_fail@plt+0xca00>
   1de18:	ldr	r0, [sp, #60]	; 0x3c
   1de1c:	ldr	r0, [r0]
   1de20:	add	r0, r0, r1, lsl #5
   1de24:	add	r3, r1, #1
   1de28:	add	r2, r9, #20
   1de2c:	str	r3, [r5]
   1de30:	mvn	r3, #0
   1de34:	str	r4, [r0, #4]!
   1de38:	str	r4, [r0, #8]
   1de3c:	str	r4, [r0, #4]
   1de40:	ldm	r2, {r1, r2}
   1de44:	str	r3, [r0, #28]
   1de48:	str	r4, [r0, #16]
   1de4c:	str	r4, [r0, #12]
   1de50:	str	r1, [r0, #20]
   1de54:	bic	r1, r2, #786432	; 0xc0000
   1de58:	str	r1, [r0, #24]
   1de5c:	str	r0, [r7]
   1de60:	b	1ddd8 <__assert_fail@plt+0xc928>
   1de64:	mov	r1, #0
   1de68:	mov	r0, r9
   1de6c:	ldr	r9, [r9, #8]
   1de70:	cmp	r9, r1
   1de74:	cmpne	r9, #0
   1de78:	bne	1de9c <__assert_fail@plt+0xc9ec>
   1de7c:	ldr	r1, [sp, #36]	; 0x24
   1de80:	ldr	r9, [r0]
   1de84:	ldr	r1, [r1]
   1de88:	cmp	r9, #0
   1de8c:	str	r1, [sp, #36]	; 0x24
   1de90:	mov	r1, r0
   1de94:	bne	1de68 <__assert_fail@plt+0xc9b8>
   1de98:	b	1dee4 <__assert_fail@plt+0xca34>
   1de9c:	ldr	r0, [sp, #36]	; 0x24
   1dea0:	add	r7, r0, #8
   1dea4:	ldr	r1, [r5]
   1dea8:	cmp	r1, #31
   1deac:	bne	1de18 <__assert_fail@plt+0xc968>
   1deb0:	mov	r0, #996	; 0x3e4
   1deb4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1deb8:	cmp	r0, #0
   1debc:	beq	1dff8 <__assert_fail@plt+0xcb48>
   1dec0:	ldr	r2, [sp, #60]	; 0x3c
   1dec4:	ldr	ip, [sp, #48]	; 0x30
   1dec8:	ldr	lr, [sp, #44]	; 0x2c
   1decc:	ldr	r1, [r2]
   1ded0:	str	r1, [r0]
   1ded4:	mov	r1, #0
   1ded8:	str	r0, [r2]
   1dedc:	str	r1, [r5]
   1dee0:	b	1de20 <__assert_fail@plt+0xc970>
   1dee4:	mov	r3, r6
   1dee8:	ldr	r1, [r5]
   1deec:	cmp	r1, #31
   1def0:	beq	1dfbc <__assert_fail@plt+0xcb0c>
   1def4:	ldr	r0, [sp, #60]	; 0x3c
   1def8:	ldr	r0, [r0]
   1defc:	add	r2, r1, #1
   1df00:	add	r1, r0, r1, lsl #5
   1df04:	mov	r0, #16
   1df08:	cmp	r3, #0
   1df0c:	str	r2, [r5]
   1df10:	str	r4, [r1, #4]!
   1df14:	str	sl, [r1, #4]
   1df18:	str	r3, [r1, #8]
   1df1c:	str	r4, [r1, #12]
   1df20:	str	r4, [r1, #16]
   1df24:	str	r4, [r1, #20]
   1df28:	str	r0, [r1, #24]
   1df2c:	mvn	r0, #0
   1df30:	str	r1, [sp, #36]	; 0x24
   1df34:	str	r0, [r1, #28]
   1df38:	str	r1, [sl]
   1df3c:	beq	1e2ec <__assert_fail@plt+0xce3c>
   1df40:	ldr	r1, [sp, #56]	; 0x38
   1df44:	ldr	sl, [sp, #36]	; 0x24
   1df48:	add	r0, r1, #1
   1df4c:	cmp	r1, r8
   1df50:	str	sl, [r3]
   1df54:	bne	1dd74 <__assert_fail@plt+0xc8c4>
   1df58:	b	1e04c <__assert_fail@plt+0xcb9c>
   1df5c:	mov	r0, #996	; 0x3e4
   1df60:	mov	r6, r3
   1df64:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1df68:	cmp	r0, #0
   1df6c:	beq	1df9c <__assert_fail@plt+0xcaec>
   1df70:	ldr	r2, [sp, #60]	; 0x3c
   1df74:	ldr	r5, [sp, #24]
   1df78:	ldr	ip, [sp, #48]	; 0x30
   1df7c:	ldr	lr, [sp, #44]	; 0x2c
   1df80:	mov	r3, r6
   1df84:	ldr	r1, [r2]
   1df88:	str	r1, [r0]
   1df8c:	mov	r1, #0
   1df90:	str	r0, [r2]
   1df94:	str	r1, [r5]
   1df98:	b	1dd8c <__assert_fail@plt+0xc8dc>
   1df9c:	ldr	ip, [sp, #48]	; 0x30
   1dfa0:	ldr	lr, [sp, #44]	; 0x2c
   1dfa4:	ldr	r5, [sp, #24]
   1dfa8:	mov	r3, #0
   1dfac:	str	r3, [fp, #-80]	; 0xffffffb0
   1dfb0:	ldr	r1, [r5]
   1dfb4:	cmp	r1, #31
   1dfb8:	bne	1def4 <__assert_fail@plt+0xca44>
   1dfbc:	mov	r0, #996	; 0x3e4
   1dfc0:	mov	r6, r3
   1dfc4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1dfc8:	ldr	lr, [sp, #44]	; 0x2c
   1dfcc:	ldr	ip, [sp, #48]	; 0x30
   1dfd0:	cmp	r0, #0
   1dfd4:	beq	1e2ec <__assert_fail@plt+0xce3c>
   1dfd8:	ldr	r2, [sp, #60]	; 0x3c
   1dfdc:	mov	r3, r6
   1dfe0:	ldr	r1, [r2]
   1dfe4:	str	r1, [r0]
   1dfe8:	mov	r1, #0
   1dfec:	str	r0, [r2]
   1dff0:	str	r1, [r5]
   1dff4:	b	1defc <__assert_fail@plt+0xca4c>
   1dff8:	ldr	ip, [sp, #48]	; 0x30
   1dffc:	ldr	lr, [sp, #44]	; 0x2c
   1e000:	mov	r3, #0
   1e004:	str	r3, [r7]
   1e008:	ldr	r1, [r5]
   1e00c:	cmp	r1, #31
   1e010:	bne	1def4 <__assert_fail@plt+0xca44>
   1e014:	b	1dfbc <__assert_fail@plt+0xcb0c>
   1e018:	mov	r0, #996	; 0x3e4
   1e01c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e020:	ldr	lr, [sp, #44]	; 0x2c
   1e024:	ldr	ip, [sp, #48]	; 0x30
   1e028:	cmp	r0, #0
   1e02c:	beq	1e2ec <__assert_fail@plt+0xce3c>
   1e030:	ldr	r2, [sp, #60]	; 0x3c
   1e034:	ldr	r1, [r2]
   1e038:	str	r1, [r0]
   1e03c:	mov	r1, #0
   1e040:	str	r0, [r2]
   1e044:	str	r1, [r5]
   1e048:	b	1d88c <__assert_fail@plt+0xc3dc>
   1e04c:	ldr	sl, [sp, #52]	; 0x34
   1e050:	mov	r0, #0
   1e054:	cmp	r8, sl
   1e058:	bne	1e0cc <__assert_fail@plt+0xcc1c>
   1e05c:	ldr	r7, [sp, #36]	; 0x24
   1e060:	ldr	r5, [sp, #28]
   1e064:	ldr	r1, [sp, #32]
   1e068:	cmp	r1, #0
   1e06c:	beq	1d4f4 <__assert_fail@plt+0xc044>
   1e070:	b	1d4e4 <__assert_fail@plt+0xc034>
   1e074:	ldr	r0, [sp, #20]
   1e078:	mov	r1, #10
   1e07c:	b	1e24c <__assert_fail@plt+0xcd9c>
   1e080:	mov	r0, #996	; 0x3e4
   1e084:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e088:	cmp	r0, #0
   1e08c:	beq	1e268 <__assert_fail@plt+0xcdb8>
   1e090:	ldr	r2, [sp, #60]	; 0x3c
   1e094:	ldr	ip, [sp, #48]	; 0x30
   1e098:	ldr	lr, [sp, #44]	; 0x2c
   1e09c:	ldr	r1, [r2]
   1e0a0:	str	r1, [r0]
   1e0a4:	mov	r1, #0
   1e0a8:	str	r0, [r2]
   1e0ac:	str	r1, [r5]
   1e0b0:	b	1dbec <__assert_fail@plt+0xc73c>
   1e0b4:	ldr	ip, [sp, #48]	; 0x30
   1e0b8:	ldr	r9, [sp, #56]	; 0x38
   1e0bc:	ldr	r1, [sp, #16]
   1e0c0:	cmp	r1, #0
   1e0c4:	bne	1d660 <__assert_fail@plt+0xc1b0>
   1e0c8:	b	1dc58 <__assert_fail@plt+0xc7a8>
   1e0cc:	mov	r6, r3
   1e0d0:	ldr	r1, [r5]
   1e0d4:	ldr	r9, [r6], #20
   1e0d8:	cmp	r1, #31
   1e0dc:	beq	1e290 <__assert_fail@plt+0xcde0>
   1e0e0:	ldr	r0, [sp, #60]	; 0x3c
   1e0e4:	ldr	r0, [r0]
   1e0e8:	add	r7, r0, r1, lsl #5
   1e0ec:	add	r2, r1, #1
   1e0f0:	str	r2, [r5]
   1e0f4:	mvn	r2, #0
   1e0f8:	str	r4, [r7, #4]!
   1e0fc:	str	r4, [r7, #8]
   1e100:	str	r4, [r7, #4]
   1e104:	ldm	r6, {r0, r1}
   1e108:	str	r2, [r7, #28]
   1e10c:	str	r4, [r7, #16]
   1e110:	str	r4, [r7, #12]
   1e114:	sub	r6, fp, #80	; 0x50
   1e118:	str	r0, [r7, #20]
   1e11c:	bic	r0, r1, #786432	; 0xc0000
   1e120:	str	r0, [r7, #24]
   1e124:	mov	r0, r7
   1e128:	str	r7, [fp, #-80]	; 0xffffffb0
   1e12c:	str	r9, [r0]
   1e130:	ldr	r0, [r6]
   1e134:	ldr	r1, [r0, #24]
   1e138:	orr	r1, r1, #262144	; 0x40000
   1e13c:	str	r1, [r0, #24]
   1e140:	ldr	r0, [r3, #4]
   1e144:	ldr	r9, [r6]
   1e148:	cmp	r0, #0
   1e14c:	beq	1e1bc <__assert_fail@plt+0xcd0c>
   1e150:	add	r2, r9, #4
   1e154:	mov	r6, r0
   1e158:	ldr	r1, [r5]
   1e15c:	str	r2, [sp, #56]	; 0x38
   1e160:	cmp	r1, #31
   1e164:	beq	1e200 <__assert_fail@plt+0xcd50>
   1e168:	ldr	r0, [sp, #60]	; 0x3c
   1e16c:	ldr	r0, [r0]
   1e170:	add	r0, r0, r1, lsl #5
   1e174:	add	r3, r1, #1
   1e178:	add	r2, r6, #20
   1e17c:	str	r3, [r5]
   1e180:	mvn	r3, #0
   1e184:	str	r4, [r0, #4]!
   1e188:	str	r4, [r0, #8]
   1e18c:	str	r4, [r0, #4]
   1e190:	ldm	r2, {r1, r2}
   1e194:	str	r3, [r0, #28]
   1e198:	mov	r3, r6
   1e19c:	ldr	r6, [sp, #56]	; 0x38
   1e1a0:	str	r4, [r0, #16]
   1e1a4:	str	r4, [r0, #12]
   1e1a8:	str	r1, [r0, #20]
   1e1ac:	bic	r1, r2, #786432	; 0xc0000
   1e1b0:	str	r1, [r0, #24]
   1e1b4:	str	r0, [r6]
   1e1b8:	b	1e12c <__assert_fail@plt+0xcc7c>
   1e1bc:	mov	r1, #0
   1e1c0:	ldr	r6, [r3, #8]
   1e1c4:	mov	r0, r3
   1e1c8:	cmp	r6, r1
   1e1cc:	cmpne	r6, #0
   1e1d0:	bne	1e1ec <__assert_fail@plt+0xcd3c>
   1e1d4:	ldr	r3, [r0]
   1e1d8:	ldr	r9, [r9]
   1e1dc:	mov	r1, r0
   1e1e0:	cmp	r3, #0
   1e1e4:	bne	1e1c0 <__assert_fail@plt+0xcd10>
   1e1e8:	b	1d7f0 <__assert_fail@plt+0xc340>
   1e1ec:	add	r2, r9, #8
   1e1f0:	ldr	r1, [r5]
   1e1f4:	str	r2, [sp, #56]	; 0x38
   1e1f8:	cmp	r1, #31
   1e1fc:	bne	1e168 <__assert_fail@plt+0xccb8>
   1e200:	mov	r0, #996	; 0x3e4
   1e204:	str	r6, [sp, #12]
   1e208:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e20c:	cmp	r0, #0
   1e210:	beq	1e2dc <__assert_fail@plt+0xce2c>
   1e214:	ldr	r2, [sp, #60]	; 0x3c
   1e218:	ldr	r5, [sp, #24]
   1e21c:	ldr	ip, [sp, #48]	; 0x30
   1e220:	ldr	lr, [sp, #44]	; 0x2c
   1e224:	ldr	sl, [sp, #52]	; 0x34
   1e228:	ldr	r6, [sp, #12]
   1e22c:	ldr	r1, [r2]
   1e230:	str	r1, [r0]
   1e234:	mov	r1, #0
   1e238:	str	r0, [r2]
   1e23c:	str	r1, [r5]
   1e240:	b	1e170 <__assert_fail@plt+0xccc0>
   1e244:	ldr	r0, [sp, #20]
   1e248:	mov	r1, #15
   1e24c:	str	r1, [r0]
   1e250:	mov	r7, #0
   1e254:	clz	r0, r7
   1e258:	cmp	r7, #0
   1e25c:	lsr	r0, r0, #5
   1e260:	beq	1e314 <__assert_fail@plt+0xce64>
   1e264:	b	1e324 <__assert_fail@plt+0xce74>
   1e268:	ldr	ip, [sp, #48]	; 0x30
   1e26c:	ldr	lr, [sp, #44]	; 0x2c
   1e270:	ldr	r9, [sp, #40]	; 0x28
   1e274:	mov	r7, #0
   1e278:	mov	r5, r8
   1e27c:	clz	r0, r7
   1e280:	cmp	r7, #0
   1e284:	lsr	r0, r0, #5
   1e288:	beq	1e314 <__assert_fail@plt+0xce64>
   1e28c:	b	1e324 <__assert_fail@plt+0xce74>
   1e290:	mov	r0, #996	; 0x3e4
   1e294:	mov	r7, r3
   1e298:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e29c:	cmp	r0, #0
   1e2a0:	beq	1e2d4 <__assert_fail@plt+0xce24>
   1e2a4:	ldr	r2, [sp, #60]	; 0x3c
   1e2a8:	ldr	r5, [sp, #24]
   1e2ac:	ldr	ip, [sp, #48]	; 0x30
   1e2b0:	ldr	lr, [sp, #44]	; 0x2c
   1e2b4:	ldr	sl, [sp, #52]	; 0x34
   1e2b8:	mov	r3, r7
   1e2bc:	ldr	r1, [r2]
   1e2c0:	str	r1, [r0]
   1e2c4:	mov	r1, #0
   1e2c8:	str	r0, [r2]
   1e2cc:	str	r1, [r5]
   1e2d0:	b	1e0e8 <__assert_fail@plt+0xcc38>
   1e2d4:	str	r4, [fp, #-80]	; 0xffffffb0
   1e2d8:	b	1e2e4 <__assert_fail@plt+0xce34>
   1e2dc:	ldr	r0, [sp, #56]	; 0x38
   1e2e0:	str	r4, [r0]
   1e2e4:	ldr	ip, [sp, #48]	; 0x30
   1e2e8:	ldr	lr, [sp, #44]	; 0x2c
   1e2ec:	ldr	r0, [sp, #20]
   1e2f0:	ldr	r5, [sp, #28]
   1e2f4:	ldr	r9, [sp, #40]	; 0x28
   1e2f8:	mov	r1, #12
   1e2fc:	mov	r7, #0
   1e300:	str	r1, [r0]
   1e304:	clz	r0, r7
   1e308:	cmp	r7, #0
   1e30c:	lsr	r0, r0, #5
   1e310:	bne	1e324 <__assert_fail@plt+0xce74>
   1e314:	ldr	r1, [sp, #20]
   1e318:	ldr	r1, [r1]
   1e31c:	cmp	r1, #0
   1e320:	bne	1e3f4 <__assert_fail@plt+0xcf44>
   1e324:	ldr	r1, [sp, #32]
   1e328:	cmp	r1, #0
   1e32c:	beq	1d4f4 <__assert_fail@plt+0xc044>
   1e330:	b	1d4e4 <__assert_fail@plt+0xc034>
   1e334:	movw	r6, #255	; 0xff
   1e338:	cmp	r0, #0
   1e33c:	movt	r6, #4
   1e340:	bne	1e3d8 <__assert_fail@plt+0xcf28>
   1e344:	mov	r5, r7
   1e348:	ldr	r7, [r7, #4]
   1e34c:	cmp	r7, #0
   1e350:	bne	1e344 <__assert_fail@plt+0xce94>
   1e354:	ldr	r7, [r5, #8]
   1e358:	cmp	r7, #0
   1e35c:	bne	1e344 <__assert_fail@plt+0xce94>
   1e360:	ldr	r0, [r5, #24]
   1e364:	and	r0, r0, r6
   1e368:	cmp	r0, #3
   1e36c:	beq	1e3a0 <__assert_fail@plt+0xcef0>
   1e370:	cmp	r0, #6
   1e374:	bne	1e3ac <__assert_fail@plt+0xcefc>
   1e378:	ldr	r4, [r5, #20]
   1e37c:	ldr	r0, [r4]
   1e380:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e384:	ldr	r0, [r4, #4]
   1e388:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e38c:	ldr	r0, [r4, #8]
   1e390:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e394:	ldr	r0, [r4, #12]
   1e398:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e39c:	b	1e3a4 <__assert_fail@plt+0xcef4>
   1e3a0:	ldr	r4, [r5, #20]
   1e3a4:	mov	r0, r4
   1e3a8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e3ac:	ldr	r0, [r5]
   1e3b0:	cmp	r0, #0
   1e3b4:	beq	1e3d8 <__assert_fail@plt+0xcf28>
   1e3b8:	ldr	r7, [r0, #8]
   1e3bc:	cmp	r7, r5
   1e3c0:	mov	r5, r0
   1e3c4:	beq	1e360 <__assert_fail@plt+0xceb0>
   1e3c8:	cmp	r7, #0
   1e3cc:	mov	r5, r0
   1e3d0:	beq	1e360 <__assert_fail@plt+0xceb0>
   1e3d4:	b	1e344 <__assert_fail@plt+0xce94>
   1e3d8:	mov	r0, #13
   1e3dc:	ldr	r1, [sp, #20]
   1e3e0:	mov	r9, #0
   1e3e4:	str	r0, [r1]
   1e3e8:	mov	r0, r9
   1e3ec:	sub	sp, fp, #28
   1e3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3f4:	cmp	r9, #0
   1e3f8:	beq	1c9bc <__assert_fail@plt+0xb50c>
   1e3fc:	movw	r6, #255	; 0xff
   1e400:	movt	r6, #4
   1e404:	mov	r5, r9
   1e408:	ldr	r9, [r9, #4]
   1e40c:	cmp	r9, #0
   1e410:	bne	1e404 <__assert_fail@plt+0xcf54>
   1e414:	ldr	r9, [r5, #8]
   1e418:	cmp	r9, #0
   1e41c:	bne	1e404 <__assert_fail@plt+0xcf54>
   1e420:	ldr	r0, [r5, #24]
   1e424:	and	r0, r0, r6
   1e428:	cmp	r0, #3
   1e42c:	beq	1e460 <__assert_fail@plt+0xcfb0>
   1e430:	cmp	r0, #6
   1e434:	bne	1e46c <__assert_fail@plt+0xcfbc>
   1e438:	ldr	r4, [r5, #20]
   1e43c:	ldr	r0, [r4]
   1e440:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e444:	ldr	r0, [r4, #4]
   1e448:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e44c:	ldr	r0, [r4, #8]
   1e450:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e454:	ldr	r0, [r4, #12]
   1e458:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e45c:	b	1e464 <__assert_fail@plt+0xcfb4>
   1e460:	ldr	r4, [r5, #20]
   1e464:	mov	r0, r4
   1e468:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e46c:	ldr	r0, [r5]
   1e470:	cmp	r0, #0
   1e474:	beq	1c9bc <__assert_fail@plt+0xb50c>
   1e478:	ldr	r9, [r0, #8]
   1e47c:	cmp	r9, r5
   1e480:	mov	r5, r0
   1e484:	beq	1e420 <__assert_fail@plt+0xcf70>
   1e488:	cmp	r9, #0
   1e48c:	mov	r5, r0
   1e490:	beq	1e420 <__assert_fail@plt+0xcf70>
   1e494:	b	1e404 <__assert_fail@plt+0xcf54>
   1e498:	cmp	r0, #2
   1e49c:	blt	1e4b8 <__assert_fail@plt+0xd008>
   1e4a0:	ldr	r0, [r7, #36]	; 0x24
   1e4a4:	cmp	r0, #0
   1e4a8:	bne	1d120 <__assert_fail@plt+0xbc70>
   1e4ac:	ldrb	r0, [r7, #16]
   1e4b0:	tst	r0, #1
   1e4b4:	bne	1d120 <__assert_fail@plt+0xbc70>
   1e4b8:	ldr	r0, [r7]
   1e4bc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e4c0:	ldr	r0, [r7, #4]
   1e4c4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e4c8:	ldr	r0, [r7, #8]
   1e4cc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e4d0:	ldr	r0, [r7, #12]
   1e4d4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e4d8:	mov	r0, r7
   1e4dc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e4e0:	ldr	r1, [sl, #64]	; 0x40
   1e4e4:	cmp	r1, #31
   1e4e8:	beq	1ea20 <__assert_fail@plt+0xd570>
   1e4ec:	ldr	r0, [sl, #56]	; 0x38
   1e4f0:	add	r0, r0, r1, lsl #5
   1e4f4:	add	r2, r1, #1
   1e4f8:	vmov.i32	q8, #0	; 0x00000000
   1e4fc:	ldr	ip, [sp, #48]	; 0x30
   1e500:	ldr	lr, [sp, #44]	; 0x2c
   1e504:	mov	r1, #3
   1e508:	str	r2, [sl, #64]	; 0x40
   1e50c:	mov	r2, #0
   1e510:	add	r7, r0, #4
   1e514:	str	r2, [r0, #20]
   1e518:	str	r8, [r0, #24]
   1e51c:	str	r1, [r0, #28]
   1e520:	mov	r0, #28
   1e524:	mov	r1, r7
   1e528:	vst1.32	{d16-d17}, [r1], r0
   1e52c:	mvn	r0, #0
   1e530:	str	r0, [r1]
   1e534:	b	1d488 <__assert_fail@plt+0xbfd8>
   1e538:	ldr	r8, [sp, #24]
   1e53c:	ldr	r0, [sp, #20]
   1e540:	ldr	r5, [sp, #28]
   1e544:	ldr	sl, [sp, #52]	; 0x34
   1e548:	ldr	r7, [sp, #60]	; 0x3c
   1e54c:	str	r9, [r0]
   1e550:	ldr	r4, [sp, #20]
   1e554:	mov	r0, r8
   1e558:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e55c:	ldr	r0, [r7]
   1e560:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e564:	ldr	r0, [r7, #4]
   1e568:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e56c:	ldr	r0, [r7, #8]
   1e570:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e574:	ldr	r0, [r7, #12]
   1e578:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e57c:	mov	r0, r7
   1e580:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e584:	ldr	r0, [r4]
   1e588:	mov	r7, #0
   1e58c:	mov	r9, #0
   1e590:	cmp	r0, #0
   1e594:	ldr	ip, [sp, #48]	; 0x30
   1e598:	ldr	lr, [sp, #44]	; 0x2c
   1e59c:	beq	1d488 <__assert_fail@plt+0xbfd8>
   1e5a0:	b	1e3e8 <__assert_fail@plt+0xcf38>
   1e5a4:	mov	r0, #996	; 0x3e4
   1e5a8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e5ac:	cmp	r0, #0
   1e5b0:	beq	1e83c <__assert_fail@plt+0xd38c>
   1e5b4:	ldr	r1, [sl, #56]	; 0x38
   1e5b8:	ldr	r5, [sp, #28]
   1e5bc:	ldr	ip, [sp, #48]	; 0x30
   1e5c0:	ldr	lr, [sp, #44]	; 0x2c
   1e5c4:	str	r1, [r0]
   1e5c8:	mov	r1, #0
   1e5cc:	str	r1, [sl, #64]	; 0x40
   1e5d0:	str	r0, [sl, #56]	; 0x38
   1e5d4:	b	1c45c <__assert_fail@plt+0xafac>
   1e5d8:	mov	r9, r0
   1e5dc:	str	sl, [sp, #52]	; 0x34
   1e5e0:	b	1e53c <__assert_fail@plt+0xd08c>
   1e5e4:	mov	r9, #7
   1e5e8:	str	sl, [sp, #52]	; 0x34
   1e5ec:	b	1e53c <__assert_fail@plt+0xd08c>
   1e5f0:	ldr	r4, [sp, #20]
   1e5f4:	ldr	r7, [sp, #60]	; 0x3c
   1e5f8:	mov	r0, #2
   1e5fc:	str	r0, [r4]
   1e600:	b	1e554 <__assert_fail@plt+0xd0a4>
   1e604:	mov	r0, r8
   1e608:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e60c:	mov	r0, r7
   1e610:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e614:	b	1d374 <__assert_fail@plt+0xbec4>
   1e618:	mov	r0, #996	; 0x3e4
   1e61c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e620:	cmp	r0, #0
   1e624:	beq	1e83c <__assert_fail@plt+0xd38c>
   1e628:	ldr	r1, [sl, #56]	; 0x38
   1e62c:	ldr	r5, [sp, #28]
   1e630:	ldr	ip, [sp, #48]	; 0x30
   1e634:	ldr	lr, [sp, #44]	; 0x2c
   1e638:	str	r1, [r0]
   1e63c:	mov	r1, #0
   1e640:	str	r1, [sl, #64]	; 0x40
   1e644:	str	r0, [sl, #56]	; 0x38
   1e648:	b	1c6a8 <__assert_fail@plt+0xb1f8>
   1e64c:	mov	r0, #6
   1e650:	b	1d378 <__assert_fail@plt+0xbec8>
   1e654:	mov	r0, #996	; 0x3e4
   1e658:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e65c:	cmp	r0, #0
   1e660:	beq	1e83c <__assert_fail@plt+0xd38c>
   1e664:	ldr	r1, [sl, #56]	; 0x38
   1e668:	ldr	r5, [sp, #28]
   1e66c:	ldr	ip, [sp, #48]	; 0x30
   1e670:	ldr	lr, [sp, #44]	; 0x2c
   1e674:	str	r1, [r0]
   1e678:	mov	r1, #0
   1e67c:	str	r1, [sl, #64]	; 0x40
   1e680:	str	r0, [sl, #56]	; 0x38
   1e684:	b	1c8f0 <__assert_fail@plt+0xb440>
   1e688:	mov	r0, #996	; 0x3e4
   1e68c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e690:	cmp	r0, #0
   1e694:	beq	1e83c <__assert_fail@plt+0xd38c>
   1e698:	ldr	r1, [sl, #56]	; 0x38
   1e69c:	ldr	r5, [sp, #28]
   1e6a0:	ldr	ip, [sp, #48]	; 0x30
   1e6a4:	ldr	lr, [sp, #44]	; 0x2c
   1e6a8:	str	r1, [r0]
   1e6ac:	mov	r1, #0
   1e6b0:	str	r1, [sl, #64]	; 0x40
   1e6b4:	str	r0, [sl, #56]	; 0x38
   1e6b8:	b	1c894 <__assert_fail@plt+0xb3e4>
   1e6bc:	mov	r0, #996	; 0x3e4
   1e6c0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e6c4:	cmp	r0, #0
   1e6c8:	beq	1ea50 <__assert_fail@plt+0xd5a0>
   1e6cc:	ldr	r1, [sl, #56]	; 0x38
   1e6d0:	ldr	ip, [sp, #48]	; 0x30
   1e6d4:	ldr	lr, [sp, #44]	; 0x2c
   1e6d8:	str	r1, [r0]
   1e6dc:	mov	r1, #0
   1e6e0:	str	r1, [sl, #64]	; 0x40
   1e6e4:	str	r0, [sl, #56]	; 0x38
   1e6e8:	b	1d13c <__assert_fail@plt+0xbc8c>
   1e6ec:	mov	r0, #996	; 0x3e4
   1e6f0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e6f4:	cmp	r0, #0
   1e6f8:	beq	1ea50 <__assert_fail@plt+0xd5a0>
   1e6fc:	ldr	r1, [sl, #56]	; 0x38
   1e700:	ldr	ip, [sp, #48]	; 0x30
   1e704:	ldr	lr, [sp, #44]	; 0x2c
   1e708:	str	r1, [r0]
   1e70c:	mov	r1, #0
   1e710:	str	r1, [sl, #64]	; 0x40
   1e714:	str	r0, [sl, #56]	; 0x38
   1e718:	b	1d1e8 <__assert_fail@plt+0xbd38>
   1e71c:	mov	r0, #996	; 0x3e4
   1e720:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e724:	cmp	r0, #0
   1e728:	beq	1ea50 <__assert_fail@plt+0xd5a0>
   1e72c:	ldr	r1, [sl, #56]	; 0x38
   1e730:	ldr	ip, [sp, #48]	; 0x30
   1e734:	ldr	lr, [sp, #44]	; 0x2c
   1e738:	str	r1, [r0]
   1e73c:	mov	r1, #0
   1e740:	str	r1, [sl, #64]	; 0x40
   1e744:	str	r0, [sl, #56]	; 0x38
   1e748:	b	1d234 <__assert_fail@plt+0xbd84>
   1e74c:	str	sl, [sp, #52]	; 0x34
   1e750:	mov	r9, #3
   1e754:	b	1e53c <__assert_fail@plt+0xd08c>
   1e758:	mov	r0, r8
   1e75c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e760:	ldr	lr, [sp, #44]	; 0x2c
   1e764:	ldr	ip, [sp, #48]	; 0x30
   1e768:	mov	r7, r4
   1e76c:	b	1d488 <__assert_fail@plt+0xbfd8>
   1e770:	mov	r0, #996	; 0x3e4
   1e774:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e778:	cmp	r0, #0
   1e77c:	beq	1e83c <__assert_fail@plt+0xd38c>
   1e780:	ldr	r1, [sl, #56]	; 0x38
   1e784:	ldr	r5, [sp, #28]
   1e788:	ldr	ip, [sp, #48]	; 0x30
   1e78c:	ldr	lr, [sp, #44]	; 0x2c
   1e790:	str	r1, [r0]
   1e794:	mov	r1, #0
   1e798:	str	r1, [sl, #64]	; 0x40
   1e79c:	str	r0, [sl, #56]	; 0x38
   1e7a0:	b	1d444 <__assert_fail@plt+0xbf94>
   1e7a4:	mov	r0, #996	; 0x3e4
   1e7a8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e7ac:	cmp	r0, #0
   1e7b0:	beq	1e9ec <__assert_fail@plt+0xd53c>
   1e7b4:	ldr	r1, [sl, #56]	; 0x38
   1e7b8:	ldr	ip, [sp, #48]	; 0x30
   1e7bc:	ldr	lr, [sp, #44]	; 0x2c
   1e7c0:	mov	r9, #0
   1e7c4:	str	r1, [r0]
   1e7c8:	mov	r1, #0
   1e7cc:	str	r1, [sl, #64]	; 0x40
   1e7d0:	str	r0, [sl, #56]	; 0x38
   1e7d4:	b	1c5a0 <__assert_fail@plt+0xb0f0>
   1e7d8:	mov	r0, #996	; 0x3e4
   1e7dc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e7e0:	cmp	r0, #0
   1e7e4:	beq	1e9f8 <__assert_fail@plt+0xd548>
   1e7e8:	ldr	r1, [sl, #56]	; 0x38
   1e7ec:	ldr	ip, [sp, #48]	; 0x30
   1e7f0:	ldr	lr, [sp, #44]	; 0x2c
   1e7f4:	mov	r9, #0
   1e7f8:	str	r1, [r0]
   1e7fc:	mov	r1, #0
   1e800:	str	r1, [sl, #64]	; 0x40
   1e804:	str	r0, [sl, #56]	; 0x38
   1e808:	b	1d28c <__assert_fail@plt+0xbddc>
   1e80c:	mov	r0, #996	; 0x3e4
   1e810:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e814:	cmp	r0, #0
   1e818:	beq	1e83c <__assert_fail@plt+0xd38c>
   1e81c:	ldr	r1, [sl, #56]	; 0x38
   1e820:	ldr	ip, [sp, #48]	; 0x30
   1e824:	ldr	lr, [sp, #44]	; 0x2c
   1e828:	str	r1, [r0]
   1e82c:	mov	r1, #0
   1e830:	str	r1, [sl, #64]	; 0x40
   1e834:	str	r0, [sl, #56]	; 0x38
   1e838:	b	1d39c <__assert_fail@plt+0xbeec>
   1e83c:	mov	r0, #12
   1e840:	b	1e3dc <__assert_fail@plt+0xcf2c>
   1e844:	mov	r4, #0
   1e848:	mov	r5, #0
   1e84c:	b	1e858 <__assert_fail@plt+0xd3a8>
   1e850:	mov	r5, #4
   1e854:	mov	r4, #128	; 0x80
   1e858:	bl	1136c <__ctype_b_loc@plt>
   1e85c:	ldr	r0, [r0]
   1e860:	ldr	ip, [sp, #48]	; 0x30
   1e864:	ldr	lr, [sp, #44]	; 0x2c
   1e868:	mov	r1, #1
   1e86c:	mov	r9, #0
   1e870:	add	r7, r0, r4, lsl #1
   1e874:	b	1e88c <__assert_fail@plt+0xd3dc>
   1e878:	add	r5, r5, #1
   1e87c:	add	r7, r7, #64	; 0x40
   1e880:	add	r4, r4, #32
   1e884:	cmp	r5, #8
   1e888:	beq	1c574 <__assert_fail@plt+0xb0c4>
   1e88c:	add	r0, sl, r5, lsl #2
   1e890:	mov	r3, #0
   1e894:	add	r2, r0, #96	; 0x60
   1e898:	mov	r0, r7
   1e89c:	add	r6, r4, r3
   1e8a0:	cmp	r6, #95	; 0x5f
   1e8a4:	bne	1e8d0 <__assert_fail@plt+0xd420>
   1e8a8:	ldr	r6, [r2]
   1e8ac:	orr	r6, r6, r1, lsl r3
   1e8b0:	str	r6, [r2]
   1e8b4:	add	r3, r3, #1
   1e8b8:	add	r0, r0, #2
   1e8bc:	cmp	r3, #32
   1e8c0:	beq	1e878 <__assert_fail@plt+0xd3c8>
   1e8c4:	add	r6, r4, r3
   1e8c8:	cmp	r6, #95	; 0x5f
   1e8cc:	beq	1e8a8 <__assert_fail@plt+0xd3f8>
   1e8d0:	ldrh	r6, [r0]
   1e8d4:	ands	r6, r6, #8
   1e8d8:	beq	1e8b4 <__assert_fail@plt+0xd404>
   1e8dc:	b	1e8a8 <__assert_fail@plt+0xd3f8>
   1e8e0:	ldr	ip, [sp, #48]	; 0x30
   1e8e4:	ldr	lr, [sp, #44]	; 0x2c
   1e8e8:	mov	r5, #0
   1e8ec:	mov	r9, #0
   1e8f0:	ldr	r1, [sl, #64]	; 0x40
   1e8f4:	cmp	r1, #31
   1e8f8:	bne	1d328 <__assert_fail@plt+0xbe78>
   1e8fc:	mov	r0, #996	; 0x3e4
   1e900:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1e904:	ldr	lr, [sp, #44]	; 0x2c
   1e908:	ldr	ip, [sp, #48]	; 0x30
   1e90c:	cmp	r0, #0
   1e910:	beq	1d374 <__assert_fail@plt+0xbec4>
   1e914:	ldr	r1, [sl, #56]	; 0x38
   1e918:	str	r1, [r0]
   1e91c:	mov	r1, #0
   1e920:	str	r1, [sl, #64]	; 0x40
   1e924:	str	r0, [sl, #56]	; 0x38
   1e928:	b	1d32c <__assert_fail@plt+0xbe7c>
   1e92c:	cmp	r9, #0
   1e930:	beq	1e9d0 <__assert_fail@plt+0xd520>
   1e934:	movw	r5, #255	; 0xff
   1e938:	movt	r5, #4
   1e93c:	mov	r6, r9
   1e940:	ldr	r9, [r9, #4]
   1e944:	cmp	r9, #0
   1e948:	bne	1e93c <__assert_fail@plt+0xd48c>
   1e94c:	ldr	r9, [r6, #8]
   1e950:	cmp	r9, #0
   1e954:	bne	1e93c <__assert_fail@plt+0xd48c>
   1e958:	ldr	r0, [r6, #24]
   1e95c:	and	r0, r0, r5
   1e960:	cmp	r0, #3
   1e964:	beq	1e998 <__assert_fail@plt+0xd4e8>
   1e968:	cmp	r0, #6
   1e96c:	bne	1e9a4 <__assert_fail@plt+0xd4f4>
   1e970:	ldr	r4, [r6, #20]
   1e974:	ldr	r0, [r4]
   1e978:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e97c:	ldr	r0, [r4, #4]
   1e980:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e984:	ldr	r0, [r4, #8]
   1e988:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e98c:	ldr	r0, [r4, #12]
   1e990:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e994:	b	1e99c <__assert_fail@plt+0xd4ec>
   1e998:	ldr	r4, [r6, #20]
   1e99c:	mov	r0, r4
   1e9a0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1e9a4:	ldr	r0, [r6]
   1e9a8:	cmp	r0, #0
   1e9ac:	beq	1e9d0 <__assert_fail@plt+0xd520>
   1e9b0:	ldr	r9, [r0, #8]
   1e9b4:	cmp	r9, r6
   1e9b8:	mov	r6, r0
   1e9bc:	beq	1e958 <__assert_fail@plt+0xd4a8>
   1e9c0:	cmp	r9, #0
   1e9c4:	mov	r6, r0
   1e9c8:	beq	1e958 <__assert_fail@plt+0xd4a8>
   1e9cc:	b	1e93c <__assert_fail@plt+0xd48c>
   1e9d0:	mov	r0, #8
   1e9d4:	b	1e3dc <__assert_fail@plt+0xcf2c>
   1e9d8:	ldr	r8, [sp, #24]
   1e9dc:	mov	r9, r0
   1e9e0:	b	1e53c <__assert_fail@plt+0xd08c>
   1e9e4:	ldr	r8, [sp, #24]
   1e9e8:	b	1e750 <__assert_fail@plt+0xd2a0>
   1e9ec:	mov	r4, #0
   1e9f0:	mov	r0, #9
   1e9f4:	b	1ea00 <__assert_fail@plt+0xd550>
   1e9f8:	mov	r4, #0
   1e9fc:	mov	r0, #10
   1ea00:	ldr	ip, [sp, #48]	; 0x30
   1ea04:	ldr	lr, [sp, #44]	; 0x2c
   1ea08:	mov	r9, #0
   1ea0c:	str	r0, [lr]
   1ea10:	ldr	r1, [sl, #64]	; 0x40
   1ea14:	cmp	r1, #31
   1ea18:	bne	1d2dc <__assert_fail@plt+0xbe2c>
   1ea1c:	b	1c5f0 <__assert_fail@plt+0xb140>
   1ea20:	mov	r0, #996	; 0x3e4
   1ea24:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1ea28:	cmp	r0, #0
   1ea2c:	beq	1ea50 <__assert_fail@plt+0xd5a0>
   1ea30:	ldr	r1, [sl, #56]	; 0x38
   1ea34:	str	r1, [r0]
   1ea38:	mov	r1, #0
   1ea3c:	str	r1, [sl, #64]	; 0x40
   1ea40:	str	r0, [sl, #56]	; 0x38
   1ea44:	b	1e4f0 <__assert_fail@plt+0xd040>
   1ea48:	ldr	r5, [sp, #28]
   1ea4c:	ldr	r7, [sp, #60]	; 0x3c
   1ea50:	ldr	r4, [sp, #20]
   1ea54:	mov	r0, #12
   1ea58:	str	r0, [r4]
   1ea5c:	b	1e554 <__assert_fail@plt+0xd0a4>
   1ea60:	mov	r0, r6
   1ea64:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ea68:	mov	r0, r9
   1ea6c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ea70:	ldr	r8, [sp, #24]
   1ea74:	mov	r9, #12
   1ea78:	b	1e53c <__assert_fail@plt+0xd08c>
   1ea7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea80:	add	fp, sp, #28
   1ea84:	sub	sp, sp, #12
   1ea88:	mov	r9, r1
   1ea8c:	mov	r6, r0
   1ea90:	mov	r4, #0
   1ea94:	mov	r0, #32
   1ea98:	mov	r1, #1
   1ea9c:	mov	sl, r3
   1eaa0:	mov	r5, r2
   1eaa4:	str	r4, [sp, #8]
   1eaa8:	bl	2ba08 <__assert_fail@plt+0x1a558>
   1eaac:	ldr	r1, [fp, #12]
   1eab0:	cmp	r0, #0
   1eab4:	beq	1ee34 <__assert_fail@plt+0xd984>
   1eab8:	mov	r7, r0
   1eabc:	mov	r0, #40	; 0x28
   1eac0:	mov	r1, #1
   1eac4:	bl	2ba08 <__assert_fail@plt+0x1a558>
   1eac8:	cmp	r0, #0
   1eacc:	beq	1ed6c <__assert_fail@plt+0xd8bc>
   1ead0:	mov	r8, r0
   1ead4:	ldrb	r0, [r0, #16]
   1ead8:	ldr	r1, [fp, #8]
   1eadc:	mov	r4, #0
   1eae0:	add	r3, sp, #8
   1eae4:	str	r5, [sp]
   1eae8:	mov	r2, r8
   1eaec:	str	r4, [sp, #4]
   1eaf0:	and	r0, r0, #254	; 0xfe
   1eaf4:	orr	r0, r0, r1
   1eaf8:	mov	r1, r7
   1eafc:	strb	r0, [r8, #16]
   1eb00:	mov	r0, r9
   1eb04:	bl	1f324 <__assert_fail@plt+0xde74>
   1eb08:	cmp	r0, #0
   1eb0c:	bne	1ed90 <__assert_fail@plt+0xd8e0>
   1eb10:	ldrb	r0, [sl]
   1eb14:	cmp	r0, #0
   1eb18:	beq	1eb44 <__assert_fail@plt+0xd694>
   1eb1c:	add	r1, sl, #1
   1eb20:	mov	r2, #1
   1eb24:	ubfx	r3, r0, #5, #3
   1eb28:	and	r0, r0, #31
   1eb2c:	ldr	r5, [r7, r3, lsl #2]
   1eb30:	orr	r0, r5, r2, lsl r0
   1eb34:	str	r0, [r7, r3, lsl #2]
   1eb38:	ldrb	r0, [r1], #1
   1eb3c:	cmp	r0, #0
   1eb40:	bne	1eb24 <__assert_fail@plt+0xd674>
   1eb44:	ldr	r0, [fp, #8]
   1eb48:	cmp	r0, #0
   1eb4c:	beq	1ec7c <__assert_fail@plt+0xd7cc>
   1eb50:	vld1.32	{d16-d17}, [r7]
   1eb54:	mov	r0, r7
   1eb58:	vmvn	q8, q8
   1eb5c:	vst1.32	{d16-d17}, [r0]!
   1eb60:	vld1.32	{d16-d17}, [r0]
   1eb64:	vmvn	q8, q8
   1eb68:	vst1.32	{d16-d17}, [r0]
   1eb6c:	ldr	r0, [r6, #92]	; 0x5c
   1eb70:	cmp	r0, #2
   1eb74:	bge	1ec88 <__assert_fail@plt+0xd7d8>
   1eb78:	ldr	r1, [r6, #64]	; 0x40
   1eb7c:	cmp	r1, #31
   1eb80:	beq	1ed0c <__assert_fail@plt+0xd85c>
   1eb84:	ldr	r0, [r6, #56]	; 0x38
   1eb88:	add	r0, r0, r1, lsl #5
   1eb8c:	add	r2, r1, #1
   1eb90:	vmov.i32	q8, #0	; 0x00000000
   1eb94:	mov	r1, #3
   1eb98:	str	r2, [r6, #64]	; 0x40
   1eb9c:	mov	r2, #0
   1eba0:	add	r5, r0, #4
   1eba4:	str	r2, [r0, #20]
   1eba8:	str	r7, [r0, #24]
   1ebac:	str	r1, [r0, #28]
   1ebb0:	mov	r0, #28
   1ebb4:	mov	r1, r5
   1ebb8:	vst1.32	{d16-d17}, [r1], r0
   1ebbc:	mvn	r0, #0
   1ebc0:	str	r0, [r1]
   1ebc4:	ldr	r0, [r6, #92]	; 0x5c
   1ebc8:	cmp	r0, #2
   1ebcc:	blt	1ed34 <__assert_fail@plt+0xd884>
   1ebd0:	ldrb	r0, [r6, #88]	; 0x58
   1ebd4:	orr	r0, r0, #2
   1ebd8:	strb	r0, [r6, #88]	; 0x58
   1ebdc:	ldr	r1, [r6, #64]	; 0x40
   1ebe0:	cmp	r1, #31
   1ebe4:	beq	1edd8 <__assert_fail@plt+0xd928>
   1ebe8:	ldr	r0, [r6, #56]	; 0x38
   1ebec:	add	r0, r0, r1, lsl #5
   1ebf0:	vmov.i32	q8, #0	; 0x00000000
   1ebf4:	add	r2, r1, #1
   1ebf8:	mov	r1, #6
   1ebfc:	mov	r4, #0
   1ec00:	str	r2, [r6, #64]	; 0x40
   1ec04:	add	r7, r0, #4
   1ec08:	str	r4, [r0, #20]
   1ec0c:	str	r8, [r0, #24]
   1ec10:	str	r1, [r0, #28]
   1ec14:	mov	r0, #28
   1ec18:	mov	r1, r7
   1ec1c:	vst1.32	{d16-d17}, [r1], r0
   1ec20:	mvn	r0, #0
   1ec24:	str	r0, [r1]
   1ec28:	ldr	r1, [r6, #64]	; 0x40
   1ec2c:	cmp	r1, #31
   1ec30:	beq	1ee48 <__assert_fail@plt+0xd998>
   1ec34:	ldr	r0, [r6, #56]	; 0x38
   1ec38:	add	r4, r0, r1, lsl #5
   1ec3c:	add	r2, r1, #1
   1ec40:	mov	r0, #0
   1ec44:	mov	r1, #10
   1ec48:	str	r2, [r6, #64]	; 0x40
   1ec4c:	mvn	r2, #0
   1ec50:	str	r0, [r4, #4]!
   1ec54:	add	r3, r4, #20
   1ec58:	stmib	r4, {r5, r7}
   1ec5c:	str	r0, [r4, #12]
   1ec60:	str	r0, [r4, #16]
   1ec64:	stm	r3, {r0, r1, r2}
   1ec68:	str	r4, [r5]
   1ec6c:	str	r4, [r7]
   1ec70:	mov	r0, r4
   1ec74:	sub	sp, fp, #28
   1ec78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec7c:	ldr	r0, [r6, #92]	; 0x5c
   1ec80:	cmp	r0, #2
   1ec84:	blt	1eb78 <__assert_fail@plt+0xd6c8>
   1ec88:	ldr	r5, [r6, #60]	; 0x3c
   1ec8c:	ldm	r7, {r0, r1, r2, ip}
   1ec90:	ldr	r3, [r5]
   1ec94:	and	r0, r0, r3
   1ec98:	str	r0, [r7]
   1ec9c:	ldr	r0, [r5, #4]
   1eca0:	and	r0, r1, r0
   1eca4:	str	r0, [r7, #4]
   1eca8:	ldr	r0, [r5, #8]
   1ecac:	and	r0, r2, r0
   1ecb0:	str	r0, [r7, #8]
   1ecb4:	ldr	r0, [r5, #12]
   1ecb8:	and	r0, ip, r0
   1ecbc:	str	r0, [r7, #12]
   1ecc0:	ldr	r0, [r7, #16]
   1ecc4:	ldr	r1, [r5, #16]
   1ecc8:	and	r0, r0, r1
   1eccc:	str	r0, [r7, #16]
   1ecd0:	ldr	r0, [r5, #20]
   1ecd4:	ldr	r1, [r7, #20]
   1ecd8:	and	r0, r1, r0
   1ecdc:	str	r0, [r7, #20]
   1ece0:	ldr	r0, [r5, #24]
   1ece4:	ldr	r1, [r7, #24]
   1ece8:	and	r0, r1, r0
   1ecec:	str	r0, [r7, #24]
   1ecf0:	ldr	r0, [r5, #28]
   1ecf4:	ldr	r1, [r7, #28]
   1ecf8:	and	r0, r1, r0
   1ecfc:	str	r0, [r7, #28]
   1ed00:	ldr	r1, [r6, #64]	; 0x40
   1ed04:	cmp	r1, #31
   1ed08:	bne	1eb84 <__assert_fail@plt+0xd6d4>
   1ed0c:	mov	r0, #996	; 0x3e4
   1ed10:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1ed14:	cmp	r0, #0
   1ed18:	beq	1ee00 <__assert_fail@plt+0xd950>
   1ed1c:	ldr	r1, [r6, #56]	; 0x38
   1ed20:	str	r1, [r0]
   1ed24:	mov	r1, #0
   1ed28:	str	r1, [r6, #64]	; 0x40
   1ed2c:	str	r0, [r6, #56]	; 0x38
   1ed30:	b	1eb88 <__assert_fail@plt+0xd6d8>
   1ed34:	ldr	r0, [r8]
   1ed38:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed3c:	ldr	r0, [r8, #4]
   1ed40:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed44:	ldr	r0, [r8, #8]
   1ed48:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed4c:	ldr	r0, [r8, #12]
   1ed50:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed54:	mov	r0, r8
   1ed58:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed5c:	mov	r4, r5
   1ed60:	mov	r0, r4
   1ed64:	sub	sp, fp, #28
   1ed68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed6c:	mov	r0, r7
   1ed70:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed74:	ldr	r1, [fp, #12]
   1ed78:	mov	r0, #12
   1ed7c:	mov	r4, #0
   1ed80:	str	r0, [r1]
   1ed84:	mov	r0, r4
   1ed88:	sub	sp, fp, #28
   1ed8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed90:	mov	r5, r0
   1ed94:	mov	r0, r7
   1ed98:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ed9c:	ldr	r0, [r8]
   1eda0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1eda4:	ldr	r0, [r8, #4]
   1eda8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1edac:	ldr	r0, [r8, #8]
   1edb0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1edb4:	ldr	r0, [r8, #12]
   1edb8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1edbc:	mov	r0, r8
   1edc0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1edc4:	ldr	r0, [fp, #12]
   1edc8:	str	r5, [r0]
   1edcc:	mov	r0, r4
   1edd0:	sub	sp, fp, #28
   1edd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1edd8:	mov	r0, #996	; 0x3e4
   1eddc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1ede0:	cmp	r0, #0
   1ede4:	beq	1ee00 <__assert_fail@plt+0xd950>
   1ede8:	ldr	r1, [r6, #56]	; 0x38
   1edec:	str	r1, [r0]
   1edf0:	mov	r1, #0
   1edf4:	str	r1, [r6, #64]	; 0x40
   1edf8:	str	r0, [r6, #56]	; 0x38
   1edfc:	b	1ebec <__assert_fail@plt+0xd73c>
   1ee00:	mov	r0, r7
   1ee04:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ee08:	ldr	r0, [r8]
   1ee0c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ee10:	ldr	r0, [r8, #4]
   1ee14:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ee18:	ldr	r0, [r8, #8]
   1ee1c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ee20:	ldr	r0, [r8, #12]
   1ee24:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ee28:	mov	r0, r8
   1ee2c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   1ee30:	ldr	r1, [fp, #12]
   1ee34:	mov	r0, #12
   1ee38:	str	r0, [r1]
   1ee3c:	mov	r0, r4
   1ee40:	sub	sp, fp, #28
   1ee44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee48:	mov	r0, #996	; 0x3e4
   1ee4c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1ee50:	cmp	r0, #0
   1ee54:	beq	1ed60 <__assert_fail@plt+0xd8b0>
   1ee58:	ldr	r1, [r6, #56]	; 0x38
   1ee5c:	str	r1, [r0]
   1ee60:	mov	r1, #0
   1ee64:	str	r1, [r6, #64]	; 0x40
   1ee68:	str	r0, [r6, #56]	; 0x38
   1ee6c:	b	1ec38 <__assert_fail@plt+0xd788>
   1ee70:	push	{fp, lr}
   1ee74:	mov	fp, sp
   1ee78:	ldr	ip, [r1, #40]	; 0x28
   1ee7c:	ldr	r3, [r1, #56]	; 0x38
   1ee80:	cmp	r3, ip
   1ee84:	ble	1ef04 <__assert_fail@plt+0xda54>
   1ee88:	ldr	r3, [r1, #4]
   1ee8c:	ldrb	lr, [r3, ip]
   1ee90:	strb	lr, [r0]
   1ee94:	ldr	r3, [r1, #80]	; 0x50
   1ee98:	cmp	r3, #2
   1ee9c:	blt	1eec0 <__assert_fail@plt+0xda10>
   1eea0:	ldr	r3, [r1, #28]
   1eea4:	ldr	ip, [r1, #40]	; 0x28
   1eea8:	cmp	ip, r3
   1eeac:	beq	1eec0 <__assert_fail@plt+0xda10>
   1eeb0:	ldr	r3, [r1, #8]
   1eeb4:	ldr	r3, [r3, ip, lsl #2]
   1eeb8:	cmn	r3, #1
   1eebc:	beq	1efd8 <__assert_fail@plt+0xdb28>
   1eec0:	tst	r2, #1
   1eec4:	beq	1ef18 <__assert_fail@plt+0xda68>
   1eec8:	cmp	lr, #92	; 0x5c
   1eecc:	bne	1ef18 <__assert_fail@plt+0xda68>
   1eed0:	ldr	r2, [r1, #40]	; 0x28
   1eed4:	ldr	r3, [r1, #48]	; 0x30
   1eed8:	add	r2, r2, #1
   1eedc:	cmp	r2, r3
   1eee0:	bge	1efd8 <__assert_fail@plt+0xdb28>
   1eee4:	str	r2, [r1, #40]	; 0x28
   1eee8:	ldr	r1, [r1, #4]
   1eeec:	ldrb	r2, [r1, r2]
   1eef0:	mov	r1, #1
   1eef4:	strb	r1, [r0, #4]
   1eef8:	strb	r2, [r0]
   1eefc:	mov	r0, r1
   1ef00:	pop	{fp, pc}
   1ef04:	mov	r1, #2
   1ef08:	strb	r1, [r0, #4]
   1ef0c:	mov	r1, #0
   1ef10:	mov	r0, r1
   1ef14:	pop	{fp, pc}
   1ef18:	cmp	lr, #92	; 0x5c
   1ef1c:	bgt	1ef7c <__assert_fail@plt+0xdacc>
   1ef20:	cmp	lr, #45	; 0x2d
   1ef24:	beq	1efa0 <__assert_fail@plt+0xdaf0>
   1ef28:	cmp	lr, #91	; 0x5b
   1ef2c:	bne	1efd8 <__assert_fail@plt+0xdb28>
   1ef30:	ldr	r3, [r1, #40]	; 0x28
   1ef34:	ldr	ip, [r1, #48]	; 0x30
   1ef38:	add	r3, r3, #1
   1ef3c:	cmp	r3, ip
   1ef40:	bge	1efc8 <__assert_fail@plt+0xdb18>
   1ef44:	ldr	r1, [r1, #4]
   1ef48:	ldrb	r1, [r1, r3]
   1ef4c:	cmp	r1, #61	; 0x3d
   1ef50:	strb	r1, [r0]
   1ef54:	beq	1efe8 <__assert_fail@plt+0xdb38>
   1ef58:	cmp	r1, #58	; 0x3a
   1ef5c:	beq	1effc <__assert_fail@plt+0xdb4c>
   1ef60:	cmp	r1, #46	; 0x2e
   1ef64:	bne	1efd0 <__assert_fail@plt+0xdb20>
   1ef68:	mov	r1, #26
   1ef6c:	strb	r1, [r0, #4]
   1ef70:	mov	r1, #2
   1ef74:	mov	r0, r1
   1ef78:	pop	{fp, pc}
   1ef7c:	cmp	lr, #93	; 0x5d
   1ef80:	beq	1efb4 <__assert_fail@plt+0xdb04>
   1ef84:	cmp	lr, #94	; 0x5e
   1ef88:	bne	1efd8 <__assert_fail@plt+0xdb28>
   1ef8c:	mov	r1, #25
   1ef90:	strb	r1, [r0, #4]
   1ef94:	mov	r1, #1
   1ef98:	mov	r0, r1
   1ef9c:	pop	{fp, pc}
   1efa0:	mov	r1, #22
   1efa4:	strb	r1, [r0, #4]
   1efa8:	mov	r1, #1
   1efac:	mov	r0, r1
   1efb0:	pop	{fp, pc}
   1efb4:	mov	r1, #21
   1efb8:	strb	r1, [r0, #4]
   1efbc:	mov	r1, #1
   1efc0:	mov	r0, r1
   1efc4:	pop	{fp, pc}
   1efc8:	mov	r1, #0
   1efcc:	strb	r1, [r0]
   1efd0:	mov	r1, #91	; 0x5b
   1efd4:	strb	r1, [r0]
   1efd8:	mov	r1, #1
   1efdc:	strb	r1, [r0, #4]
   1efe0:	mov	r0, r1
   1efe4:	pop	{fp, pc}
   1efe8:	mov	r1, #28
   1efec:	strb	r1, [r0, #4]
   1eff0:	mov	r1, #2
   1eff4:	mov	r0, r1
   1eff8:	pop	{fp, pc}
   1effc:	tst	r2, #4
   1f000:	beq	1efd0 <__assert_fail@plt+0xdb20>
   1f004:	mov	r1, #30
   1f008:	strb	r1, [r0, #4]
   1f00c:	mov	r1, #2
   1f010:	mov	r0, r1
   1f014:	pop	{fp, pc}
   1f018:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f01c:	add	fp, sp, #24
   1f020:	sub	sp, sp, #8
   1f024:	mov	r5, r2
   1f028:	ldr	r2, [r1, #80]	; 0x50
   1f02c:	mov	r9, r0
   1f030:	ldr	r0, [r1, #40]	; 0x28
   1f034:	cmp	r2, #1
   1f038:	beq	1f0b0 <__assert_fail@plt+0xdc00>
   1f03c:	ldr	r2, [r1, #28]
   1f040:	add	r6, r0, #1
   1f044:	cmp	r6, r2
   1f048:	bge	1f0b0 <__assert_fail@plt+0xdc00>
   1f04c:	ldr	lr, [r1, #8]
   1f050:	sub	r4, r0, r2
   1f054:	sub	ip, r2, r0
   1f058:	mvn	r2, #0
   1f05c:	add	r6, lr, r0, lsl #2
   1f060:	ldr	r7, [r6, -r2, lsl #2]
   1f064:	cmn	r7, #1
   1f068:	bne	1f07c <__assert_fail@plt+0xdbcc>
   1f06c:	sub	r2, r2, #1
   1f070:	cmp	r4, r2
   1f074:	bne	1f060 <__assert_fail@plt+0xdbb0>
   1f078:	b	1f088 <__assert_fail@plt+0xdbd8>
   1f07c:	rsb	ip, r2, #0
   1f080:	cmp	ip, #2
   1f084:	bcc	1f0b0 <__assert_fail@plt+0xdc00>
   1f088:	mov	r2, #1
   1f08c:	str	r2, [r9]
   1f090:	ldr	r0, [lr, r0, lsl #2]
   1f094:	str	r0, [r9, #4]
   1f098:	ldr	r0, [r1, #40]	; 0x28
   1f09c:	add	r0, r0, ip
   1f0a0:	str	r0, [r1, #40]	; 0x28
   1f0a4:	mov	r0, #0
   1f0a8:	sub	sp, fp, #24
   1f0ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0b0:	add	r2, r0, r3
   1f0b4:	str	r2, [r1, #40]	; 0x28
   1f0b8:	ldrb	r6, [r5, #4]
   1f0bc:	sub	r0, r6, #22
   1f0c0:	cmp	r0, #8
   1f0c4:	bhi	1f30c <__assert_fail@plt+0xde5c>
   1f0c8:	add	r3, pc, #0
   1f0cc:	ldr	pc, [r3, r0, lsl #2]
   1f0d0:	andeq	pc, r1, r4, ror #5
   1f0d4:	andeq	pc, r1, ip, lsl #6
   1f0d8:	andeq	pc, r1, ip, lsl #6
   1f0dc:	andeq	pc, r1, ip, lsl #6
   1f0e0:	strdeq	pc, [r1], -r4
   1f0e4:	andeq	pc, r1, ip, lsl #6
   1f0e8:	strdeq	pc, [r1], -r4
   1f0ec:	andeq	pc, r1, ip, lsl #6
   1f0f0:	strdeq	pc, [r1], -r4
   1f0f4:	ldr	r3, [r1, #56]	; 0x38
   1f0f8:	mov	r0, #7
   1f0fc:	cmp	r3, r2
   1f100:	ble	1f31c <__assert_fail@plt+0xde6c>
   1f104:	ldrb	r3, [r5]
   1f108:	mov	r2, #0
   1f10c:	uxtb	r7, r6
   1f110:	cmp	r7, #30
   1f114:	bne	1f124 <__assert_fail@plt+0xdc74>
   1f118:	ldrb	r7, [r1, #75]	; 0x4b
   1f11c:	cmp	r7, #0
   1f120:	bne	1f188 <__assert_fail@plt+0xdcd8>
   1f124:	ldr	r4, [r1, #40]	; 0x28
   1f128:	ldr	r7, [r1, #4]
   1f12c:	add	r6, r4, #1
   1f130:	str	r6, [r1, #40]	; 0x28
   1f134:	ldrb	r4, [r7, r4]
   1f138:	ldr	r7, [r1, #56]	; 0x38
   1f13c:	cmp	r7, r6
   1f140:	ble	1f31c <__assert_fail@plt+0xde6c>
   1f144:	uxtb	r7, r4
   1f148:	cmp	r7, r3
   1f14c:	bne	1f160 <__assert_fail@plt+0xdcb0>
   1f150:	ldr	r7, [r1, #4]
   1f154:	ldrb	r7, [r7, r6]
   1f158:	cmp	r7, #93	; 0x5d
   1f15c:	beq	1f284 <__assert_fail@plt+0xddd4>
   1f160:	ldr	r7, [r9, #4]
   1f164:	strb	r4, [r7, r2]
   1f168:	add	r2, r2, #1
   1f16c:	cmp	r2, #32
   1f170:	beq	1f31c <__assert_fail@plt+0xde6c>
   1f174:	ldrb	r6, [r5, #4]
   1f178:	uxtb	r7, r6
   1f17c:	cmp	r7, #30
   1f180:	beq	1f118 <__assert_fail@plt+0xdc68>
   1f184:	b	1f124 <__assert_fail@plt+0xdc74>
   1f188:	ldrb	r7, [r1, #76]	; 0x4c
   1f18c:	cmp	r7, #0
   1f190:	beq	1f238 <__assert_fail@plt+0xdd88>
   1f194:	ldr	lr, [r1, #28]
   1f198:	ldr	ip, [r1, #40]	; 0x28
   1f19c:	cmp	lr, ip
   1f1a0:	beq	1f1b4 <__assert_fail@plt+0xdd04>
   1f1a4:	ldr	r4, [r1, #8]
   1f1a8:	ldr	r4, [r4, ip, lsl #2]
   1f1ac:	cmn	r4, #1
   1f1b0:	beq	1f264 <__assert_fail@plt+0xddb4>
   1f1b4:	ldr	r6, [r1, #12]
   1f1b8:	ldr	r7, [r1, #24]
   1f1bc:	ldr	r4, [r1]
   1f1c0:	ldr	r6, [r6, ip, lsl #2]
   1f1c4:	add	r6, r7, r6
   1f1c8:	add	r4, r4, r6
   1f1cc:	ldrsb	r4, [r4]
   1f1d0:	cmn	r4, #1
   1f1d4:	ble	1f264 <__assert_fail@plt+0xddb4>
   1f1d8:	ldr	r7, [r1, #80]	; 0x50
   1f1dc:	mov	r6, #1
   1f1e0:	cmp	r7, #1
   1f1e4:	beq	1f220 <__assert_fail@plt+0xdd70>
   1f1e8:	add	r7, ip, #1
   1f1ec:	cmp	r7, lr
   1f1f0:	bge	1f220 <__assert_fail@plt+0xdd70>
   1f1f4:	ldr	r6, [r1, #8]
   1f1f8:	sub	lr, lr, ip
   1f1fc:	add	r8, r6, ip, lsl #2
   1f200:	mov	r6, #1
   1f204:	ldr	r7, [r8, r6, lsl #2]
   1f208:	cmn	r7, #1
   1f20c:	bne	1f220 <__assert_fail@plt+0xdd70>
   1f210:	add	r6, r6, #1
   1f214:	cmp	lr, r6
   1f218:	bne	1f204 <__assert_fail@plt+0xdd54>
   1f21c:	mov	r6, lr
   1f220:	add	r6, r6, ip
   1f224:	str	r6, [r1, #40]	; 0x28
   1f228:	ldr	r7, [r1, #56]	; 0x38
   1f22c:	cmp	r7, r6
   1f230:	bgt	1f144 <__assert_fail@plt+0xdc94>
   1f234:	b	1f31c <__assert_fail@plt+0xde6c>
   1f238:	ldr	r7, [r1, #40]	; 0x28
   1f23c:	ldr	r4, [r1, #24]
   1f240:	ldr	ip, [r1]
   1f244:	add	r6, r7, #1
   1f248:	add	r7, r7, r4
   1f24c:	str	r6, [r1, #40]	; 0x28
   1f250:	ldrb	r4, [ip, r7]
   1f254:	ldr	r7, [r1, #56]	; 0x38
   1f258:	cmp	r7, r6
   1f25c:	bgt	1f144 <__assert_fail@plt+0xdc94>
   1f260:	b	1f31c <__assert_fail@plt+0xde6c>
   1f264:	add	r6, ip, #1
   1f268:	str	r6, [r1, #40]	; 0x28
   1f26c:	ldr	r7, [r1, #4]
   1f270:	ldrb	r4, [r7, ip]
   1f274:	ldr	r7, [r1, #56]	; 0x38
   1f278:	cmp	r7, r6
   1f27c:	bgt	1f144 <__assert_fail@plt+0xdc94>
   1f280:	b	1f31c <__assert_fail@plt+0xde6c>
   1f284:	add	r0, r6, #1
   1f288:	str	r0, [r1, #40]	; 0x28
   1f28c:	mov	r0, #0
   1f290:	ldr	r1, [r9, #4]
   1f294:	strb	r0, [r1, r2]
   1f298:	ldrb	r1, [r5, #4]
   1f29c:	cmp	r1, #30
   1f2a0:	beq	1f2c4 <__assert_fail@plt+0xde14>
   1f2a4:	cmp	r1, #28
   1f2a8:	beq	1f2d4 <__assert_fail@plt+0xde24>
   1f2ac:	cmp	r1, #26
   1f2b0:	bne	1f31c <__assert_fail@plt+0xde6c>
   1f2b4:	mov	r1, #3
   1f2b8:	str	r1, [r9]
   1f2bc:	sub	sp, fp, #24
   1f2c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2c4:	mov	r1, #4
   1f2c8:	str	r1, [r9]
   1f2cc:	sub	sp, fp, #24
   1f2d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2d4:	mov	r1, #2
   1f2d8:	str	r1, [r9]
   1f2dc:	sub	sp, fp, #24
   1f2e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2e4:	ldr	r0, [fp, #12]
   1f2e8:	cmp	r0, #0
   1f2ec:	bne	1f30c <__assert_fail@plt+0xde5c>
   1f2f0:	ldr	r2, [fp, #8]
   1f2f4:	mov	r0, sp
   1f2f8:	bl	1ee70 <__assert_fail@plt+0xd9c0>
   1f2fc:	ldrb	r1, [sp, #4]
   1f300:	mov	r0, #11
   1f304:	cmp	r1, #21
   1f308:	bne	1f31c <__assert_fail@plt+0xde6c>
   1f30c:	mov	r0, #0
   1f310:	str	r0, [r9]
   1f314:	ldrb	r1, [r5]
   1f318:	strb	r1, [r9, #4]
   1f31c:	sub	sp, fp, #24
   1f320:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f324:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f328:	add	fp, sp, #24
   1f32c:	mov	r8, r0
   1f330:	ldrb	r0, [fp, #14]
   1f334:	ldr	r6, [fp, #8]
   1f338:	mov	r5, r3
   1f33c:	mov	r7, r2
   1f340:	mov	r4, r1
   1f344:	tst	r0, #64	; 0x40
   1f348:	beq	1f384 <__assert_fail@plt+0xded4>
   1f34c:	movw	r1, #53282	; 0xd022
   1f350:	mov	r0, r6
   1f354:	movt	r1, #2
   1f358:	bl	111f8 <strcmp@plt>
   1f35c:	cmp	r0, #0
   1f360:	beq	1f37c <__assert_fail@plt+0xdecc>
   1f364:	movw	r1, #53288	; 0xd028
   1f368:	mov	r0, r6
   1f36c:	movt	r1, #2
   1f370:	bl	111f8 <strcmp@plt>
   1f374:	cmp	r0, #0
   1f378:	bne	1f384 <__assert_fail@plt+0xded4>
   1f37c:	movw	r6, #53294	; 0xd02e
   1f380:	movt	r6, #2
   1f384:	ldr	r0, [r5]
   1f388:	ldr	r1, [r7, #36]	; 0x24
   1f38c:	cmp	r0, r1
   1f390:	beq	1f958 <__assert_fail@plt+0xe4a8>
   1f394:	mov	r0, r6
   1f398:	bl	111c8 <wctype@plt>
   1f39c:	ldr	r2, [r7, #36]	; 0x24
   1f3a0:	ldr	r1, [r7, #12]
   1f3a4:	add	r3, r2, #1
   1f3a8:	str	r3, [r7, #36]	; 0x24
   1f3ac:	str	r0, [r1, r2, lsl #2]
   1f3b0:	movw	r1, #53270	; 0xd016
   1f3b4:	mov	r0, r6
   1f3b8:	movt	r1, #2
   1f3bc:	bl	111f8 <strcmp@plt>
   1f3c0:	cmp	r0, #0
   1f3c4:	beq	1f4f4 <__assert_fail@plt+0xe044>
   1f3c8:	movw	r1, #53300	; 0xd034
   1f3cc:	mov	r0, r6
   1f3d0:	movt	r1, #2
   1f3d4:	bl	111f8 <strcmp@plt>
   1f3d8:	cmp	r0, #0
   1f3dc:	beq	1f560 <__assert_fail@plt+0xe0b0>
   1f3e0:	movw	r1, #53288	; 0xd028
   1f3e4:	mov	r0, r6
   1f3e8:	movt	r1, #2
   1f3ec:	bl	111f8 <strcmp@plt>
   1f3f0:	cmp	r0, #0
   1f3f4:	beq	1f5cc <__assert_fail@plt+0xe11c>
   1f3f8:	movw	r1, #53276	; 0xd01c
   1f3fc:	mov	r0, r6
   1f400:	movt	r1, #2
   1f404:	bl	111f8 <strcmp@plt>
   1f408:	cmp	r0, #0
   1f40c:	beq	1f638 <__assert_fail@plt+0xe188>
   1f410:	movw	r1, #53294	; 0xd02e
   1f414:	mov	r0, r6
   1f418:	movt	r1, #2
   1f41c:	bl	111f8 <strcmp@plt>
   1f420:	cmp	r0, #0
   1f424:	beq	1f6dc <__assert_fail@plt+0xe22c>
   1f428:	movw	r1, #53331	; 0xd053
   1f42c:	mov	r0, r6
   1f430:	movt	r1, #2
   1f434:	bl	111f8 <strcmp@plt>
   1f438:	cmp	r0, #0
   1f43c:	beq	1f748 <__assert_fail@plt+0xe298>
   1f440:	movw	r1, #53306	; 0xd03a
   1f444:	mov	r0, r6
   1f448:	movt	r1, #2
   1f44c:	bl	111f8 <strcmp@plt>
   1f450:	cmp	r0, #0
   1f454:	beq	1f7b4 <__assert_fail@plt+0xe304>
   1f458:	movw	r1, #53282	; 0xd022
   1f45c:	mov	r0, r6
   1f460:	movt	r1, #2
   1f464:	bl	111f8 <strcmp@plt>
   1f468:	cmp	r0, #0
   1f46c:	beq	1f808 <__assert_fail@plt+0xe358>
   1f470:	movw	r1, #53312	; 0xd040
   1f474:	mov	r0, r6
   1f478:	movt	r1, #2
   1f47c:	bl	111f8 <strcmp@plt>
   1f480:	cmp	r0, #0
   1f484:	beq	1f85c <__assert_fail@plt+0xe3ac>
   1f488:	movw	r1, #53318	; 0xd046
   1f48c:	mov	r0, r6
   1f490:	movt	r1, #2
   1f494:	bl	111f8 <strcmp@plt>
   1f498:	cmp	r0, #0
   1f49c:	beq	1f8b0 <__assert_fail@plt+0xe400>
   1f4a0:	movw	r1, #53324	; 0xd04c
   1f4a4:	mov	r0, r6
   1f4a8:	movt	r1, #2
   1f4ac:	bl	111f8 <strcmp@plt>
   1f4b0:	cmp	r0, #0
   1f4b4:	beq	1f904 <__assert_fail@plt+0xe454>
   1f4b8:	movw	r1, #53330	; 0xd052
   1f4bc:	mov	r0, r6
   1f4c0:	movt	r1, #2
   1f4c4:	bl	111f8 <strcmp@plt>
   1f4c8:	mov	r1, r0
   1f4cc:	mov	r0, #4
   1f4d0:	cmp	r1, #0
   1f4d4:	bne	1fcc8 <__assert_fail@plt+0xe818>
   1f4d8:	bl	1136c <__ctype_b_loc@plt>
   1f4dc:	ldr	r1, [r0]
   1f4e0:	mov	r2, #0
   1f4e4:	mov	r3, #1
   1f4e8:	cmp	r8, #0
   1f4ec:	beq	1f6b8 <__assert_fail@plt+0xe208>
   1f4f0:	b	1fc00 <__assert_fail@plt+0xe750>
   1f4f4:	bl	1136c <__ctype_b_loc@plt>
   1f4f8:	ldr	r1, [r0]
   1f4fc:	cmp	r8, #0
   1f500:	bne	1f9f8 <__assert_fail@plt+0xe548>
   1f504:	mov	r0, #0
   1f508:	mov	r2, #1
   1f50c:	ldrb	r3, [r1]
   1f510:	tst	r3, #8
   1f514:	bne	1f534 <__assert_fail@plt+0xe084>
   1f518:	add	r0, r0, #1
   1f51c:	add	r1, r1, #2
   1f520:	cmp	r0, #256	; 0x100
   1f524:	beq	1f558 <__assert_fail@plt+0xe0a8>
   1f528:	ldrb	r3, [r1]
   1f52c:	tst	r3, #8
   1f530:	beq	1f518 <__assert_fail@plt+0xe068>
   1f534:	ubfx	r3, r0, #5, #3
   1f538:	and	r6, r0, #31
   1f53c:	ldr	r7, [r4, r3, lsl #2]
   1f540:	orr	r7, r7, r2, lsl r6
   1f544:	str	r7, [r4, r3, lsl #2]
   1f548:	add	r0, r0, #1
   1f54c:	add	r1, r1, #2
   1f550:	cmp	r0, #256	; 0x100
   1f554:	bne	1f528 <__assert_fail@plt+0xe078>
   1f558:	mov	r0, #0
   1f55c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f560:	bl	1136c <__ctype_b_loc@plt>
   1f564:	ldr	r1, [r0]
   1f568:	cmp	r8, #0
   1f56c:	bne	1fa84 <__assert_fail@plt+0xe5d4>
   1f570:	mov	r0, #0
   1f574:	mov	r2, #1
   1f578:	ldrb	r3, [r1]
   1f57c:	tst	r3, #2
   1f580:	bne	1f5a0 <__assert_fail@plt+0xe0f0>
   1f584:	add	r0, r0, #1
   1f588:	add	r1, r1, #2
   1f58c:	cmp	r0, #256	; 0x100
   1f590:	beq	1f5c4 <__assert_fail@plt+0xe114>
   1f594:	ldrb	r3, [r1]
   1f598:	tst	r3, #2
   1f59c:	beq	1f584 <__assert_fail@plt+0xe0d4>
   1f5a0:	ubfx	r3, r0, #5, #3
   1f5a4:	and	r6, r0, #31
   1f5a8:	ldr	r7, [r4, r3, lsl #2]
   1f5ac:	orr	r7, r7, r2, lsl r6
   1f5b0:	str	r7, [r4, r3, lsl #2]
   1f5b4:	add	r0, r0, #1
   1f5b8:	add	r1, r1, #2
   1f5bc:	cmp	r0, #256	; 0x100
   1f5c0:	bne	1f594 <__assert_fail@plt+0xe0e4>
   1f5c4:	mov	r0, #0
   1f5c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f5cc:	bl	1136c <__ctype_b_loc@plt>
   1f5d0:	ldr	r1, [r0]
   1f5d4:	cmp	r8, #0
   1f5d8:	bne	1fb10 <__assert_fail@plt+0xe660>
   1f5dc:	mov	r0, #0
   1f5e0:	mov	r2, #1
   1f5e4:	ldrb	r3, [r1, #1]
   1f5e8:	tst	r3, #2
   1f5ec:	bne	1f60c <__assert_fail@plt+0xe15c>
   1f5f0:	add	r0, r0, #1
   1f5f4:	add	r1, r1, #2
   1f5f8:	cmp	r0, #256	; 0x100
   1f5fc:	beq	1f630 <__assert_fail@plt+0xe180>
   1f600:	ldrb	r3, [r1, #1]
   1f604:	tst	r3, #2
   1f608:	beq	1f5f0 <__assert_fail@plt+0xe140>
   1f60c:	ubfx	r3, r0, #5, #3
   1f610:	and	r6, r0, #31
   1f614:	ldr	r7, [r4, r3, lsl #2]
   1f618:	orr	r7, r7, r2, lsl r6
   1f61c:	str	r7, [r4, r3, lsl #2]
   1f620:	add	r0, r0, #1
   1f624:	add	r1, r1, #2
   1f628:	cmp	r0, #256	; 0x100
   1f62c:	bne	1f600 <__assert_fail@plt+0xe150>
   1f630:	mov	r0, #0
   1f634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f638:	bl	1136c <__ctype_b_loc@plt>
   1f63c:	ldr	r1, [r0]
   1f640:	cmp	r8, #0
   1f644:	bne	1fb9c <__assert_fail@plt+0xe6ec>
   1f648:	mov	r0, #0
   1f64c:	mov	r2, #1
   1f650:	ldrb	r3, [r1, #1]
   1f654:	tst	r3, #32
   1f658:	bne	1f678 <__assert_fail@plt+0xe1c8>
   1f65c:	add	r0, r0, #1
   1f660:	add	r1, r1, #2
   1f664:	cmp	r0, #256	; 0x100
   1f668:	beq	1f69c <__assert_fail@plt+0xe1ec>
   1f66c:	ldrb	r3, [r1, #1]
   1f670:	tst	r3, #32
   1f674:	beq	1f65c <__assert_fail@plt+0xe1ac>
   1f678:	ubfx	r3, r0, #5, #3
   1f67c:	and	r6, r0, #31
   1f680:	ldr	r7, [r4, r3, lsl #2]
   1f684:	orr	r7, r7, r2, lsl r6
   1f688:	str	r7, [r4, r3, lsl #2]
   1f68c:	add	r0, r0, #1
   1f690:	add	r1, r1, #2
   1f694:	cmp	r0, #256	; 0x100
   1f698:	bne	1f66c <__assert_fail@plt+0xe1bc>
   1f69c:	mov	r0, #0
   1f6a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f6a4:	add	r2, r2, #1
   1f6a8:	add	r1, r1, #2
   1f6ac:	mov	r0, #0
   1f6b0:	cmp	r2, #256	; 0x100
   1f6b4:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f6b8:	ldrb	r0, [r1, #1]
   1f6bc:	tst	r0, #16
   1f6c0:	beq	1f6a4 <__assert_fail@plt+0xe1f4>
   1f6c4:	ubfx	r0, r2, #5, #3
   1f6c8:	and	r6, r2, #31
   1f6cc:	ldr	r7, [r4, r0, lsl #2]
   1f6d0:	orr	r7, r7, r3, lsl r6
   1f6d4:	str	r7, [r4, r0, lsl #2]
   1f6d8:	b	1f6a4 <__assert_fail@plt+0xe1f4>
   1f6dc:	bl	1136c <__ctype_b_loc@plt>
   1f6e0:	ldr	r1, [r0]
   1f6e4:	cmp	r8, #0
   1f6e8:	bne	1fc28 <__assert_fail@plt+0xe778>
   1f6ec:	mov	r0, #0
   1f6f0:	mov	r2, #1
   1f6f4:	ldrb	r3, [r1, #1]
   1f6f8:	tst	r3, #4
   1f6fc:	bne	1f71c <__assert_fail@plt+0xe26c>
   1f700:	add	r0, r0, #1
   1f704:	add	r1, r1, #2
   1f708:	cmp	r0, #256	; 0x100
   1f70c:	beq	1f740 <__assert_fail@plt+0xe290>
   1f710:	ldrb	r3, [r1, #1]
   1f714:	tst	r3, #4
   1f718:	beq	1f700 <__assert_fail@plt+0xe250>
   1f71c:	ubfx	r3, r0, #5, #3
   1f720:	and	r6, r0, #31
   1f724:	ldr	r7, [r4, r3, lsl #2]
   1f728:	orr	r7, r7, r2, lsl r6
   1f72c:	str	r7, [r4, r3, lsl #2]
   1f730:	add	r0, r0, #1
   1f734:	add	r1, r1, #2
   1f738:	cmp	r0, #256	; 0x100
   1f73c:	bne	1f710 <__assert_fail@plt+0xe260>
   1f740:	mov	r0, #0
   1f744:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f748:	bl	1136c <__ctype_b_loc@plt>
   1f74c:	ldr	r1, [r0]
   1f750:	cmp	r8, #0
   1f754:	bne	1fc78 <__assert_fail@plt+0xe7c8>
   1f758:	mov	r0, #0
   1f75c:	mov	r2, #1
   1f760:	ldrb	r3, [r1, #1]
   1f764:	tst	r3, #8
   1f768:	bne	1f788 <__assert_fail@plt+0xe2d8>
   1f76c:	add	r0, r0, #1
   1f770:	add	r1, r1, #2
   1f774:	cmp	r0, #256	; 0x100
   1f778:	beq	1f7ac <__assert_fail@plt+0xe2fc>
   1f77c:	ldrb	r3, [r1, #1]
   1f780:	tst	r3, #8
   1f784:	beq	1f76c <__assert_fail@plt+0xe2bc>
   1f788:	ubfx	r3, r0, #5, #3
   1f78c:	and	r6, r0, #31
   1f790:	ldr	r7, [r4, r3, lsl #2]
   1f794:	orr	r7, r7, r2, lsl r6
   1f798:	str	r7, [r4, r3, lsl #2]
   1f79c:	add	r0, r0, #1
   1f7a0:	add	r1, r1, #2
   1f7a4:	cmp	r0, #256	; 0x100
   1f7a8:	bne	1f77c <__assert_fail@plt+0xe2cc>
   1f7ac:	mov	r0, #0
   1f7b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f7b4:	bl	1136c <__ctype_b_loc@plt>
   1f7b8:	ldr	r1, [r0]
   1f7bc:	mov	r2, #0
   1f7c0:	mov	r3, #1
   1f7c4:	cmp	r8, #0
   1f7c8:	beq	1f7e4 <__assert_fail@plt+0xe334>
   1f7cc:	b	1f994 <__assert_fail@plt+0xe4e4>
   1f7d0:	add	r2, r2, #1
   1f7d4:	add	r1, r1, #2
   1f7d8:	mov	r0, #0
   1f7dc:	cmp	r2, #256	; 0x100
   1f7e0:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f7e4:	ldrb	r0, [r1, #1]
   1f7e8:	tst	r0, #64	; 0x40
   1f7ec:	beq	1f7d0 <__assert_fail@plt+0xe320>
   1f7f0:	ubfx	r0, r2, #5, #3
   1f7f4:	and	r6, r2, #31
   1f7f8:	ldr	r7, [r4, r0, lsl #2]
   1f7fc:	orr	r7, r7, r3, lsl r6
   1f800:	str	r7, [r4, r0, lsl #2]
   1f804:	b	1f7d0 <__assert_fail@plt+0xe320>
   1f808:	bl	1136c <__ctype_b_loc@plt>
   1f80c:	ldr	r1, [r0]
   1f810:	mov	r2, #0
   1f814:	mov	r3, #1
   1f818:	cmp	r8, #0
   1f81c:	beq	1f838 <__assert_fail@plt+0xe388>
   1f820:	b	1f9d0 <__assert_fail@plt+0xe520>
   1f824:	add	r2, r2, #1
   1f828:	add	r1, r1, #2
   1f82c:	mov	r0, #0
   1f830:	cmp	r2, #256	; 0x100
   1f834:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f838:	ldrb	r0, [r1, #1]
   1f83c:	tst	r0, #1
   1f840:	beq	1f824 <__assert_fail@plt+0xe374>
   1f844:	ubfx	r0, r2, #5, #3
   1f848:	and	r6, r2, #31
   1f84c:	ldr	r7, [r4, r0, lsl #2]
   1f850:	orr	r7, r7, r3, lsl r6
   1f854:	str	r7, [r4, r0, lsl #2]
   1f858:	b	1f824 <__assert_fail@plt+0xe374>
   1f85c:	bl	1136c <__ctype_b_loc@plt>
   1f860:	ldr	r1, [r0]
   1f864:	mov	r2, #0
   1f868:	mov	r3, #1
   1f86c:	cmp	r8, #0
   1f870:	beq	1f88c <__assert_fail@plt+0xe3dc>
   1f874:	b	1fa5c <__assert_fail@plt+0xe5ac>
   1f878:	add	r2, r2, #1
   1f87c:	add	r1, r1, #2
   1f880:	mov	r0, #0
   1f884:	cmp	r2, #256	; 0x100
   1f888:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f88c:	ldrb	r0, [r1]
   1f890:	tst	r0, #1
   1f894:	beq	1f878 <__assert_fail@plt+0xe3c8>
   1f898:	ubfx	r0, r2, #5, #3
   1f89c:	and	r6, r2, #31
   1f8a0:	ldr	r7, [r4, r0, lsl #2]
   1f8a4:	orr	r7, r7, r3, lsl r6
   1f8a8:	str	r7, [r4, r0, lsl #2]
   1f8ac:	b	1f878 <__assert_fail@plt+0xe3c8>
   1f8b0:	bl	1136c <__ctype_b_loc@plt>
   1f8b4:	ldr	r1, [r0]
   1f8b8:	mov	r2, #0
   1f8bc:	mov	r3, #1
   1f8c0:	cmp	r8, #0
   1f8c4:	beq	1f8e0 <__assert_fail@plt+0xe430>
   1f8c8:	b	1fae8 <__assert_fail@plt+0xe638>
   1f8cc:	add	r2, r2, #1
   1f8d0:	add	r1, r1, #2
   1f8d4:	mov	r0, #0
   1f8d8:	cmp	r2, #256	; 0x100
   1f8dc:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f8e0:	ldrsh	r0, [r1]
   1f8e4:	cmn	r0, #1
   1f8e8:	bgt	1f8cc <__assert_fail@plt+0xe41c>
   1f8ec:	ubfx	r0, r2, #5, #3
   1f8f0:	and	r6, r2, #31
   1f8f4:	ldr	r7, [r4, r0, lsl #2]
   1f8f8:	orr	r7, r7, r3, lsl r6
   1f8fc:	str	r7, [r4, r0, lsl #2]
   1f900:	b	1f8cc <__assert_fail@plt+0xe41c>
   1f904:	bl	1136c <__ctype_b_loc@plt>
   1f908:	ldr	r1, [r0]
   1f90c:	mov	r2, #0
   1f910:	mov	r3, #1
   1f914:	cmp	r8, #0
   1f918:	beq	1f934 <__assert_fail@plt+0xe484>
   1f91c:	b	1fb74 <__assert_fail@plt+0xe6c4>
   1f920:	add	r2, r2, #1
   1f924:	add	r1, r1, #2
   1f928:	mov	r0, #0
   1f92c:	cmp	r2, #256	; 0x100
   1f930:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f934:	ldrb	r0, [r1]
   1f938:	tst	r0, #4
   1f93c:	beq	1f920 <__assert_fail@plt+0xe470>
   1f940:	ubfx	r0, r2, #5, #3
   1f944:	and	r6, r2, #31
   1f948:	ldr	r7, [r4, r0, lsl #2]
   1f94c:	orr	r7, r7, r3, lsl r6
   1f950:	str	r7, [r4, r0, lsl #2]
   1f954:	b	1f920 <__assert_fail@plt+0xe470>
   1f958:	mov	r1, #1
   1f95c:	orr	r9, r1, r0, lsl #1
   1f960:	ldr	r0, [r7, #12]
   1f964:	lsl	r1, r9, #2
   1f968:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   1f96c:	cmp	r0, #0
   1f970:	beq	1fccc <__assert_fail@plt+0xe81c>
   1f974:	str	r0, [r7, #12]
   1f978:	str	r9, [r5]
   1f97c:	b	1f394 <__assert_fail@plt+0xdee4>
   1f980:	add	r2, r2, #1
   1f984:	add	r1, r1, #2
   1f988:	mov	r0, #0
   1f98c:	cmp	r2, #256	; 0x100
   1f990:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f994:	ldrb	r0, [r1, #1]
   1f998:	tst	r0, #64	; 0x40
   1f99c:	beq	1f980 <__assert_fail@plt+0xe4d0>
   1f9a0:	ldrb	r0, [r8, r2]
   1f9a4:	ubfx	r7, r0, #5, #3
   1f9a8:	and	r0, r0, #31
   1f9ac:	ldr	r6, [r4, r7, lsl #2]
   1f9b0:	orr	r0, r6, r3, lsl r0
   1f9b4:	str	r0, [r4, r7, lsl #2]
   1f9b8:	b	1f980 <__assert_fail@plt+0xe4d0>
   1f9bc:	add	r2, r2, #1
   1f9c0:	add	r1, r1, #2
   1f9c4:	mov	r0, #0
   1f9c8:	cmp	r2, #256	; 0x100
   1f9cc:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1f9d0:	ldrb	r0, [r1, #1]
   1f9d4:	tst	r0, #1
   1f9d8:	beq	1f9bc <__assert_fail@plt+0xe50c>
   1f9dc:	ldrb	r0, [r8, r2]
   1f9e0:	ubfx	r7, r0, #5, #3
   1f9e4:	and	r0, r0, #31
   1f9e8:	ldr	r6, [r4, r7, lsl #2]
   1f9ec:	orr	r0, r6, r3, lsl r0
   1f9f0:	str	r0, [r4, r7, lsl #2]
   1f9f4:	b	1f9bc <__assert_fail@plt+0xe50c>
   1f9f8:	mov	r2, #0
   1f9fc:	mov	r3, #1
   1fa00:	ldrb	r0, [r1]
   1fa04:	tst	r0, #8
   1fa08:	bne	1fa2c <__assert_fail@plt+0xe57c>
   1fa0c:	add	r2, r2, #1
   1fa10:	add	r1, r1, #2
   1fa14:	mov	r0, #0
   1fa18:	cmp	r2, #256	; 0x100
   1fa1c:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fa20:	ldrb	r0, [r1]
   1fa24:	tst	r0, #8
   1fa28:	beq	1fa0c <__assert_fail@plt+0xe55c>
   1fa2c:	ldrb	r0, [r8, r2]
   1fa30:	ubfx	r7, r0, #5, #3
   1fa34:	and	r0, r0, #31
   1fa38:	ldr	r6, [r4, r7, lsl #2]
   1fa3c:	orr	r0, r6, r3, lsl r0
   1fa40:	str	r0, [r4, r7, lsl #2]
   1fa44:	b	1fa0c <__assert_fail@plt+0xe55c>
   1fa48:	add	r2, r2, #1
   1fa4c:	add	r1, r1, #2
   1fa50:	mov	r0, #0
   1fa54:	cmp	r2, #256	; 0x100
   1fa58:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fa5c:	ldrb	r0, [r1]
   1fa60:	tst	r0, #1
   1fa64:	beq	1fa48 <__assert_fail@plt+0xe598>
   1fa68:	ldrb	r0, [r8, r2]
   1fa6c:	ubfx	r7, r0, #5, #3
   1fa70:	and	r0, r0, #31
   1fa74:	ldr	r6, [r4, r7, lsl #2]
   1fa78:	orr	r0, r6, r3, lsl r0
   1fa7c:	str	r0, [r4, r7, lsl #2]
   1fa80:	b	1fa48 <__assert_fail@plt+0xe598>
   1fa84:	mov	r2, #0
   1fa88:	mov	r3, #1
   1fa8c:	ldrb	r0, [r1]
   1fa90:	tst	r0, #2
   1fa94:	bne	1fab8 <__assert_fail@plt+0xe608>
   1fa98:	add	r2, r2, #1
   1fa9c:	add	r1, r1, #2
   1faa0:	mov	r0, #0
   1faa4:	cmp	r2, #256	; 0x100
   1faa8:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1faac:	ldrb	r0, [r1]
   1fab0:	tst	r0, #2
   1fab4:	beq	1fa98 <__assert_fail@plt+0xe5e8>
   1fab8:	ldrb	r0, [r8, r2]
   1fabc:	ubfx	r7, r0, #5, #3
   1fac0:	and	r0, r0, #31
   1fac4:	ldr	r6, [r4, r7, lsl #2]
   1fac8:	orr	r0, r6, r3, lsl r0
   1facc:	str	r0, [r4, r7, lsl #2]
   1fad0:	b	1fa98 <__assert_fail@plt+0xe5e8>
   1fad4:	add	r2, r2, #1
   1fad8:	add	r1, r1, #2
   1fadc:	mov	r0, #0
   1fae0:	cmp	r2, #256	; 0x100
   1fae4:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fae8:	ldrsh	r0, [r1]
   1faec:	cmn	r0, #1
   1faf0:	bgt	1fad4 <__assert_fail@plt+0xe624>
   1faf4:	ldrb	r0, [r8, r2]
   1faf8:	ubfx	r7, r0, #5, #3
   1fafc:	and	r0, r0, #31
   1fb00:	ldr	r6, [r4, r7, lsl #2]
   1fb04:	orr	r0, r6, r3, lsl r0
   1fb08:	str	r0, [r4, r7, lsl #2]
   1fb0c:	b	1fad4 <__assert_fail@plt+0xe624>
   1fb10:	mov	r2, #0
   1fb14:	mov	r3, #1
   1fb18:	ldrb	r0, [r1, #1]
   1fb1c:	tst	r0, #2
   1fb20:	bne	1fb44 <__assert_fail@plt+0xe694>
   1fb24:	add	r2, r2, #1
   1fb28:	add	r1, r1, #2
   1fb2c:	mov	r0, #0
   1fb30:	cmp	r2, #256	; 0x100
   1fb34:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fb38:	ldrb	r0, [r1, #1]
   1fb3c:	tst	r0, #2
   1fb40:	beq	1fb24 <__assert_fail@plt+0xe674>
   1fb44:	ldrb	r0, [r8, r2]
   1fb48:	ubfx	r7, r0, #5, #3
   1fb4c:	and	r0, r0, #31
   1fb50:	ldr	r6, [r4, r7, lsl #2]
   1fb54:	orr	r0, r6, r3, lsl r0
   1fb58:	str	r0, [r4, r7, lsl #2]
   1fb5c:	b	1fb24 <__assert_fail@plt+0xe674>
   1fb60:	add	r2, r2, #1
   1fb64:	add	r1, r1, #2
   1fb68:	mov	r0, #0
   1fb6c:	cmp	r2, #256	; 0x100
   1fb70:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fb74:	ldrb	r0, [r1]
   1fb78:	tst	r0, #4
   1fb7c:	beq	1fb60 <__assert_fail@plt+0xe6b0>
   1fb80:	ldrb	r0, [r8, r2]
   1fb84:	ubfx	r7, r0, #5, #3
   1fb88:	and	r0, r0, #31
   1fb8c:	ldr	r6, [r4, r7, lsl #2]
   1fb90:	orr	r0, r6, r3, lsl r0
   1fb94:	str	r0, [r4, r7, lsl #2]
   1fb98:	b	1fb60 <__assert_fail@plt+0xe6b0>
   1fb9c:	mov	r2, #0
   1fba0:	mov	r3, #1
   1fba4:	ldrb	r0, [r1, #1]
   1fba8:	tst	r0, #32
   1fbac:	bne	1fbd0 <__assert_fail@plt+0xe720>
   1fbb0:	add	r2, r2, #1
   1fbb4:	add	r1, r1, #2
   1fbb8:	mov	r0, #0
   1fbbc:	cmp	r2, #256	; 0x100
   1fbc0:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fbc4:	ldrb	r0, [r1, #1]
   1fbc8:	tst	r0, #32
   1fbcc:	beq	1fbb0 <__assert_fail@plt+0xe700>
   1fbd0:	ldrb	r0, [r8, r2]
   1fbd4:	ubfx	r7, r0, #5, #3
   1fbd8:	and	r0, r0, #31
   1fbdc:	ldr	r6, [r4, r7, lsl #2]
   1fbe0:	orr	r0, r6, r3, lsl r0
   1fbe4:	str	r0, [r4, r7, lsl #2]
   1fbe8:	b	1fbb0 <__assert_fail@plt+0xe700>
   1fbec:	add	r2, r2, #1
   1fbf0:	add	r1, r1, #2
   1fbf4:	mov	r0, #0
   1fbf8:	cmp	r2, #256	; 0x100
   1fbfc:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fc00:	ldrb	r0, [r1, #1]
   1fc04:	tst	r0, #16
   1fc08:	beq	1fbec <__assert_fail@plt+0xe73c>
   1fc0c:	ldrb	r0, [r8, r2]
   1fc10:	ubfx	r7, r0, #5, #3
   1fc14:	and	r0, r0, #31
   1fc18:	ldr	r6, [r4, r7, lsl #2]
   1fc1c:	orr	r0, r6, r3, lsl r0
   1fc20:	str	r0, [r4, r7, lsl #2]
   1fc24:	b	1fbec <__assert_fail@plt+0xe73c>
   1fc28:	mov	r2, #0
   1fc2c:	mov	r3, #1
   1fc30:	ldrb	r0, [r1, #1]
   1fc34:	tst	r0, #4
   1fc38:	bne	1fc5c <__assert_fail@plt+0xe7ac>
   1fc3c:	add	r2, r2, #1
   1fc40:	add	r1, r1, #2
   1fc44:	mov	r0, #0
   1fc48:	cmp	r2, #256	; 0x100
   1fc4c:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fc50:	ldrb	r0, [r1, #1]
   1fc54:	tst	r0, #4
   1fc58:	beq	1fc3c <__assert_fail@plt+0xe78c>
   1fc5c:	ldrb	r0, [r8, r2]
   1fc60:	ubfx	r7, r0, #5, #3
   1fc64:	and	r0, r0, #31
   1fc68:	ldr	r6, [r4, r7, lsl #2]
   1fc6c:	orr	r0, r6, r3, lsl r0
   1fc70:	str	r0, [r4, r7, lsl #2]
   1fc74:	b	1fc3c <__assert_fail@plt+0xe78c>
   1fc78:	mov	r2, #0
   1fc7c:	mov	r3, #1
   1fc80:	ldrb	r0, [r1, #1]
   1fc84:	tst	r0, #8
   1fc88:	bne	1fcac <__assert_fail@plt+0xe7fc>
   1fc8c:	add	r2, r2, #1
   1fc90:	add	r1, r1, #2
   1fc94:	mov	r0, #0
   1fc98:	cmp	r2, #256	; 0x100
   1fc9c:	beq	1fcc8 <__assert_fail@plt+0xe818>
   1fca0:	ldrb	r0, [r1, #1]
   1fca4:	tst	r0, #8
   1fca8:	beq	1fc8c <__assert_fail@plt+0xe7dc>
   1fcac:	ldrb	r0, [r8, r2]
   1fcb0:	ubfx	r7, r0, #5, #3
   1fcb4:	and	r0, r0, #31
   1fcb8:	ldr	r6, [r4, r7, lsl #2]
   1fcbc:	orr	r0, r6, r3, lsl r0
   1fcc0:	str	r0, [r4, r7, lsl #2]
   1fcc4:	b	1fc8c <__assert_fail@plt+0xe7dc>
   1fcc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fccc:	mov	r0, #12
   1fcd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fcd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fcd8:	add	fp, sp, #24
   1fcdc:	ldr	r3, [r1, #24]
   1fce0:	mvn	r7, #1
   1fce4:	ldr	r2, [r1, #28]
   1fce8:	mov	r4, #0
   1fcec:	uxtab	r3, r7, r3
   1fcf0:	cmp	r3, #14
   1fcf4:	bhi	1fe18 <__assert_fail@plt+0xe968>
   1fcf8:	add	r7, pc, #0
   1fcfc:	ldr	pc, [r7, r3, lsl #2]
   1fd00:	andeq	pc, r1, ip, asr #28
   1fd04:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd08:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1fd0c:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd10:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd14:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd18:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   1fd1c:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   1fd20:	muleq	r1, r0, sp
   1fd24:	muleq	r1, r0, sp
   1fd28:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   1fd2c:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd30:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd34:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fd38:	andeq	pc, r1, ip, asr #28
   1fd3c:	ldr	r1, [r1, #16]
   1fd40:	ldr	r5, [r1, #28]
   1fd44:	ldr	r6, [r0, #20]
   1fd48:	add	r0, r2, r2, lsl #1
   1fd4c:	mov	r1, #1
   1fd50:	str	r1, [r6, r0, lsl #2]!
   1fd54:	mov	r0, #4
   1fd58:	mov	r7, r6
   1fd5c:	str	r1, [r7, #4]!
   1fd60:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1fd64:	cmp	r0, #0
   1fd68:	str	r0, [r6, #8]
   1fd6c:	strne	r5, [r0]
   1fd70:	movne	r0, r4
   1fd74:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fd78:	mov	r0, #0
   1fd7c:	str	r0, [r7]
   1fd80:	str	r0, [r6]
   1fd84:	mov	r4, #12
   1fd88:	mov	r0, r4
   1fd8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fd90:	ldrb	r3, [r0, #88]	; 0x58
   1fd94:	add	r6, r1, #16
   1fd98:	add	r5, r2, r2, lsl #1
   1fd9c:	orr	r3, r3, #1
   1fda0:	strb	r3, [r0, #88]	; 0x58
   1fda4:	mov	r3, r6
   1fda8:	ldr	r7, [r1, #4]
   1fdac:	ldr	r1, [r1, #8]
   1fdb0:	cmp	r1, #0
   1fdb4:	addne	r3, r1, #12
   1fdb8:	cmp	r7, #0
   1fdbc:	ldr	r1, [r3]
   1fdc0:	addne	r6, r7, #12
   1fdc4:	ldr	r8, [r1, #28]
   1fdc8:	ldr	r1, [r6]
   1fdcc:	ldr	r6, [r0, #20]
   1fdd0:	mov	r0, #2
   1fdd4:	ldr	r9, [r1, #28]
   1fdd8:	mov	r7, r6
   1fddc:	str	r0, [r7, r5, lsl #2]!
   1fde0:	mov	r0, #8
   1fde4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   1fde8:	cmp	r0, #0
   1fdec:	str	r0, [r7, #8]
   1fdf0:	beq	1fd84 <__assert_fail@plt+0xe8d4>
   1fdf4:	add	r1, r6, r5, lsl #2
   1fdf8:	cmp	r9, r8
   1fdfc:	add	r1, r1, #4
   1fe00:	bne	1fe54 <__assert_fail@plt+0xe9a4>
   1fe04:	mov	r2, #1
   1fe08:	str	r2, [r1]
   1fe0c:	str	r9, [r0]
   1fe10:	mov	r0, r4
   1fe14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe18:	ldr	r1, [r1, #16]
   1fe1c:	ldr	r0, [r0, #12]
   1fe20:	ldr	r1, [r1, #28]
   1fe24:	str	r1, [r0, r2, lsl #2]
   1fe28:	mov	r0, r4
   1fe2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe30:	ldr	r7, [r1, #16]
   1fe34:	ldr	r3, [r0, #12]
   1fe38:	ldr	r5, [r7, #28]
   1fe3c:	str	r5, [r3, r2, lsl #2]
   1fe40:	ldrb	r1, [r1, #24]
   1fe44:	cmp	r1, #4
   1fe48:	beq	1fd44 <__assert_fail@plt+0xe894>
   1fe4c:	mov	r0, r4
   1fe50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe54:	mov	r2, #2
   1fe58:	str	r2, [r1]
   1fe5c:	stmcs	r0, {r8, r9}
   1fe60:	strcc	r9, [r0]
   1fe64:	strcc	r8, [r0, #4]
   1fe68:	mov	r0, r4
   1fe6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe74:	add	fp, sp, #28
   1fe78:	sub	sp, sp, #4
   1fe7c:	ldr	r6, [r3, #4]
   1fe80:	tst	r2, #16
   1fe84:	mov	r9, r3
   1fe88:	mov	r7, r1
   1fe8c:	mov	r8, r0
   1fe90:	cmpne	r6, #0
   1fe94:	bne	2004c <__assert_fail@plt+0xeb9c>
   1fe98:	ldr	r1, [r7, #64]	; 0x40
   1fe9c:	cmp	r1, #31
   1fea0:	beq	20074 <__assert_fail@plt+0xebc4>
   1fea4:	ldr	r0, [r7, #56]	; 0x38
   1fea8:	add	r0, r0, r1, lsl #5
   1feac:	add	r2, r1, #1
   1feb0:	vmov.i32	q8, #0	; 0x00000000
   1feb4:	mov	r1, #0
   1feb8:	str	r2, [r7, #64]	; 0x40
   1febc:	mov	r2, #8
   1fec0:	add	sl, r0, #4
   1fec4:	str	r1, [r0, #20]
   1fec8:	str	r1, [r0, #24]
   1fecc:	str	r2, [r0, #28]
   1fed0:	mov	r0, #28
   1fed4:	mov	r1, sl
   1fed8:	vst1.32	{d16-d17}, [r1], r0
   1fedc:	mvn	r0, #0
   1fee0:	str	r0, [r1]
   1fee4:	ldr	r1, [r7, #64]	; 0x40
   1fee8:	cmp	r1, #31
   1feec:	beq	200d4 <__assert_fail@plt+0xec24>
   1fef0:	ldr	r0, [r7, #56]	; 0x38
   1fef4:	add	r0, r0, r1, lsl #5
   1fef8:	add	r2, r1, #1
   1fefc:	vmov.i32	q8, #0	; 0x00000000
   1ff00:	mov	r1, #0
   1ff04:	str	r2, [r7, #64]	; 0x40
   1ff08:	mov	r2, #9
   1ff0c:	add	r5, r0, #4
   1ff10:	str	r1, [r0, #20]
   1ff14:	str	r1, [r0, #24]
   1ff18:	str	r2, [r0, #28]
   1ff1c:	mov	r0, #28
   1ff20:	mov	r1, r5
   1ff24:	vst1.32	{d16-d17}, [r1], r0
   1ff28:	mvn	r0, #0
   1ff2c:	str	r0, [r1]
   1ff30:	cmp	r6, #0
   1ff34:	mov	r4, r5
   1ff38:	beq	1ff8c <__assert_fail@plt+0xeadc>
   1ff3c:	ldr	r1, [r7, #64]	; 0x40
   1ff40:	cmp	r1, #31
   1ff44:	beq	2009c <__assert_fail@plt+0xebec>
   1ff48:	ldr	r0, [r7, #56]	; 0x38
   1ff4c:	add	r4, r0, r1, lsl #5
   1ff50:	add	r2, r1, #1
   1ff54:	mov	r0, #0
   1ff58:	cmp	r5, #0
   1ff5c:	mov	r1, #16
   1ff60:	str	r2, [r7, #64]	; 0x40
   1ff64:	mvn	r2, #0
   1ff68:	str	r0, [r4, #4]!
   1ff6c:	add	r3, r4, #20
   1ff70:	str	r6, [r4, #4]
   1ff74:	str	r5, [r4, #8]
   1ff78:	str	r0, [r4, #12]
   1ff7c:	str	r0, [r4, #16]
   1ff80:	stm	r3, {r0, r1, r2}
   1ff84:	str	r4, [r6]
   1ff88:	strne	r4, [r5]
   1ff8c:	ldr	r1, [r7, #64]	; 0x40
   1ff90:	cmp	r1, #31
   1ff94:	beq	20120 <__assert_fail@plt+0xec70>
   1ff98:	ldr	r0, [r7, #56]	; 0x38
   1ff9c:	add	r6, r0, r1, lsl #5
   1ffa0:	add	r2, r1, #1
   1ffa4:	mov	r0, #0
   1ffa8:	cmp	sl, #0
   1ffac:	mov	r1, #16
   1ffb0:	str	r2, [r7, #64]	; 0x40
   1ffb4:	mvn	r2, #0
   1ffb8:	str	r0, [r6, #4]!
   1ffbc:	add	r3, r6, #20
   1ffc0:	str	sl, [r6, #4]
   1ffc4:	str	r4, [r6, #8]
   1ffc8:	str	r0, [r6, #12]
   1ffcc:	str	r0, [r6, #16]
   1ffd0:	stm	r3, {r0, r1, r2}
   1ffd4:	strne	r6, [sl]
   1ffd8:	cmp	r4, #0
   1ffdc:	strne	r6, [r4]
   1ffe0:	cmp	r5, #0
   1ffe4:	beq	1fff4 <__assert_fail@plt+0xeb44>
   1ffe8:	cmp	sl, #0
   1ffec:	cmpne	r4, #0
   1fff0:	bne	2000c <__assert_fail@plt+0xeb5c>
   1fff4:	mov	r0, #12
   1fff8:	mov	r6, #0
   1fffc:	str	r0, [r8]
   20000:	mov	r0, r6
   20004:	sub	sp, fp, #28
   20008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2000c:	cmp	r6, #0
   20010:	beq	1fff4 <__assert_fail@plt+0xeb44>
   20014:	ldr	r0, [r9, #20]
   20018:	str	r0, [r5, #20]
   2001c:	str	r0, [sl, #20]
   20020:	ldr	r1, [r9, #24]
   20024:	ldr	r0, [r5, #24]
   20028:	lsr	r1, r1, #19
   2002c:	bfi	r0, r1, #19, #1
   20030:	str	r0, [r5, #24]
   20034:	ldr	r0, [sl, #24]
   20038:	bfi	r0, r1, #19, #1
   2003c:	str	r0, [sl, #24]
   20040:	mov	r0, r6
   20044:	sub	sp, fp, #28
   20048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2004c:	ldr	r0, [r9, #20]
   20050:	cmp	r0, #31
   20054:	bgt	20068 <__assert_fail@plt+0xebb8>
   20058:	ldr	r1, [r7, #80]	; 0x50
   2005c:	mov	r2, #1
   20060:	tst	r1, r2, lsl r0
   20064:	bne	1fe98 <__assert_fail@plt+0xe9e8>
   20068:	mov	r0, r6
   2006c:	sub	sp, fp, #28
   20070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20074:	mov	r0, #996	; 0x3e4
   20078:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2007c:	cmp	r0, #0
   20080:	beq	200c4 <__assert_fail@plt+0xec14>
   20084:	ldr	r1, [r7, #56]	; 0x38
   20088:	str	r1, [r0]
   2008c:	mov	r1, #0
   20090:	str	r1, [r7, #64]	; 0x40
   20094:	str	r0, [r7, #56]	; 0x38
   20098:	b	1fea8 <__assert_fail@plt+0xe9f8>
   2009c:	mov	r0, #996	; 0x3e4
   200a0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   200a4:	cmp	r0, #0
   200a8:	beq	20110 <__assert_fail@plt+0xec60>
   200ac:	ldr	r1, [r7, #56]	; 0x38
   200b0:	str	r1, [r0]
   200b4:	mov	r1, #0
   200b8:	str	r1, [r7, #64]	; 0x40
   200bc:	str	r0, [r7, #56]	; 0x38
   200c0:	b	1ff4c <__assert_fail@plt+0xea9c>
   200c4:	mov	sl, #0
   200c8:	ldr	r1, [r7, #64]	; 0x40
   200cc:	cmp	r1, #31
   200d0:	bne	1fef0 <__assert_fail@plt+0xea40>
   200d4:	mov	r0, #996	; 0x3e4
   200d8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   200dc:	cmp	r0, #0
   200e0:	beq	200fc <__assert_fail@plt+0xec4c>
   200e4:	ldr	r1, [r7, #56]	; 0x38
   200e8:	str	r1, [r0]
   200ec:	mov	r1, #0
   200f0:	str	r1, [r7, #64]	; 0x40
   200f4:	str	r0, [r7, #56]	; 0x38
   200f8:	b	1fef4 <__assert_fail@plt+0xea44>
   200fc:	mov	r5, #0
   20100:	cmp	r6, #0
   20104:	mov	r4, r5
   20108:	bne	1ff3c <__assert_fail@plt+0xea8c>
   2010c:	b	1ff8c <__assert_fail@plt+0xeadc>
   20110:	mov	r4, #0
   20114:	ldr	r1, [r7, #64]	; 0x40
   20118:	cmp	r1, #31
   2011c:	bne	1ff98 <__assert_fail@plt+0xeae8>
   20120:	mov	r0, #996	; 0x3e4
   20124:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   20128:	cmp	r0, #0
   2012c:	beq	20148 <__assert_fail@plt+0xec98>
   20130:	ldr	r1, [r7, #56]	; 0x38
   20134:	str	r1, [r0]
   20138:	mov	r1, #0
   2013c:	str	r1, [r7, #64]	; 0x40
   20140:	str	r0, [r7, #56]	; 0x38
   20144:	b	1ff9c <__assert_fail@plt+0xeaec>
   20148:	mov	r6, #0
   2014c:	cmp	r5, #0
   20150:	bne	1ffe8 <__assert_fail@plt+0xeb38>
   20154:	b	1fff4 <__assert_fail@plt+0xeb44>
   20158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2015c:	add	fp, sp, #28
   20160:	sub	sp, sp, #12
   20164:	mov	r4, r0
   20168:	ldr	r7, [r0, #4]
   2016c:	ldr	r0, [r0, #8]
   20170:	mov	r5, r2
   20174:	mov	r9, r1
   20178:	cmp	r0, r7
   2017c:	bcs	20248 <__assert_fail@plt+0xed98>
   20180:	ldr	r1, [r4]
   20184:	str	r9, [r1, r0, lsl #3]!
   20188:	str	r5, [r1, #4]
   2018c:	ldr	r0, [r4]
   20190:	ldr	r1, [r4, #8]
   20194:	add	r0, r0, r1, lsl #3
   20198:	ldr	r1, [r0, #4]
   2019c:	bfc	r1, #8, #10
   201a0:	str	r1, [r0, #4]
   201a4:	uxtb	r1, r5
   201a8:	cmp	r1, #5
   201ac:	bne	201c0 <__assert_fail@plt+0xed10>
   201b0:	ldr	r2, [r4, #92]	; 0x5c
   201b4:	mov	r0, #1048576	; 0x100000
   201b8:	cmp	r2, #1
   201bc:	bgt	201d0 <__assert_fail@plt+0xed20>
   201c0:	sub	r0, r1, #6
   201c4:	clz	r0, r0
   201c8:	lsr	r0, r0, #5
   201cc:	lsl	r0, r0, #20
   201d0:	ldr	r1, [r4]
   201d4:	ldr	r2, [r4, #8]
   201d8:	add	r1, r1, r2, lsl #3
   201dc:	ldr	r2, [r1, #4]
   201e0:	bic	r2, r2, #1048576	; 0x100000
   201e4:	orr	r0, r2, r0
   201e8:	mvn	r2, #0
   201ec:	str	r0, [r1, #4]
   201f0:	ldr	r0, [r4, #8]
   201f4:	ldr	r1, [r4, #12]
   201f8:	str	r2, [r1, r0, lsl #2]
   201fc:	mov	r2, #0
   20200:	ldr	r0, [r4, #8]
   20204:	ldr	r1, [r4, #20]
   20208:	add	r0, r0, r0, lsl #1
   2020c:	str	r2, [r1, r0, lsl #2]!
   20210:	str	r2, [r1, #4]
   20214:	str	r2, [r1, #8]
   20218:	ldr	r0, [r4, #8]
   2021c:	ldr	r1, [r4, #24]
   20220:	add	r0, r0, r0, lsl #1
   20224:	str	r2, [r1, r0, lsl #2]!
   20228:	str	r2, [r1, #4]
   2022c:	str	r2, [r1, #8]
   20230:	ldr	r6, [r4, #8]
   20234:	add	r0, r6, #1
   20238:	str	r0, [r4, #8]
   2023c:	mov	r0, r6
   20240:	sub	sp, fp, #28
   20244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20248:	movw	r0, #21845	; 0x5555
   2024c:	lsl	r1, r7, #1
   20250:	mvn	r6, #0
   20254:	movt	r0, #5461	; 0x1555
   20258:	cmp	r1, r0
   2025c:	bhi	2023c <__assert_fail@plt+0xed8c>
   20260:	ldr	r0, [r4]
   20264:	str	r1, [sp, #8]
   20268:	lsl	r1, r7, #4
   2026c:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   20270:	cmp	r0, #0
   20274:	beq	2023c <__assert_fail@plt+0xed8c>
   20278:	str	r0, [r4]
   2027c:	lsl	r8, r7, #3
   20280:	ldr	r0, [r4, #12]
   20284:	mov	r1, r8
   20288:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   2028c:	str	r0, [sp, #4]
   20290:	ldr	r0, [r4, #16]
   20294:	mov	r1, r8
   20298:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   2029c:	mov	r2, r0
   202a0:	add	r1, r7, r7, lsl #1
   202a4:	ldr	r0, [r4, #20]
   202a8:	mov	r7, r2
   202ac:	lsl	r8, r1, #3
   202b0:	mov	r1, r8
   202b4:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   202b8:	mov	sl, r0
   202bc:	ldr	r0, [r4, #24]
   202c0:	mov	r1, r8
   202c4:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   202c8:	mov	r8, r0
   202cc:	ldr	r0, [sp, #4]
   202d0:	cmp	r0, #0
   202d4:	beq	202e4 <__assert_fail@plt+0xee34>
   202d8:	cmp	r7, #0
   202dc:	cmpne	sl, #0
   202e0:	bne	2030c <__assert_fail@plt+0xee5c>
   202e4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   202e8:	mov	r0, r7
   202ec:	bl	2bc28 <__assert_fail@plt+0x1a778>
   202f0:	mov	r0, sl
   202f4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   202f8:	mov	r0, r8
   202fc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   20300:	mov	r0, r6
   20304:	sub	sp, fp, #28
   20308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2030c:	cmp	r8, #0
   20310:	beq	202e4 <__assert_fail@plt+0xee34>
   20314:	add	r1, r4, #12
   20318:	stm	r1, {r0, r7, sl}
   2031c:	str	r8, [r4, #24]
   20320:	ldr	r0, [sp, #8]
   20324:	str	r0, [r4, #4]
   20328:	ldr	r0, [r4, #8]
   2032c:	b	20180 <__assert_fail@plt+0xecd0>
   20330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20334:	add	fp, sp, #28
   20338:	sub	sp, sp, #44	; 0x2c
   2033c:	mov	r8, r0
   20340:	ldr	r0, [r1, #20]
   20344:	add	r4, r2, r2, lsl #1
   20348:	mov	r5, r1
   2034c:	mov	r1, #0
   20350:	mov	r9, r3
   20354:	mov	r6, r2
   20358:	add	r0, r0, r4, lsl #2
   2035c:	ldr	r0, [r0, #4]
   20360:	str	r1, [sp, #36]	; 0x24
   20364:	add	r0, r0, #1
   20368:	str	r0, [sp, #32]
   2036c:	lsl	r0, r0, #2
   20370:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   20374:	cmp	r0, #0
   20378:	str	r0, [sp, #40]	; 0x28
   2037c:	beq	2054c <__assert_fail@plt+0xf09c>
   20380:	mov	r1, #1
   20384:	str	r6, [r0]
   20388:	str	r1, [sp, #36]	; 0x24
   2038c:	mvn	r1, #0
   20390:	ldr	r0, [r5, #24]
   20394:	add	r0, r0, r4, lsl #2
   20398:	str	r1, [r0, #4]
   2039c:	ldr	r2, [r5]
   203a0:	add	r0, r2, r6, lsl #3
   203a4:	ldr	r0, [r0, #4]
   203a8:	ubfx	r1, r0, #8, #10
   203ac:	cmp	r1, #0
   203b0:	beq	2040c <__assert_fail@plt+0xef5c>
   203b4:	ldr	r3, [r5, #20]
   203b8:	add	r3, r3, r4, lsl #2
   203bc:	ldr	r7, [r3, #4]
   203c0:	cmp	r7, #0
   203c4:	beq	2040c <__assert_fail@plt+0xef5c>
   203c8:	ldr	r3, [r3, #8]
   203cc:	ldr	r3, [r3]
   203d0:	add	r2, r2, r3, lsl #3
   203d4:	ldrb	r2, [r2, #6]
   203d8:	tst	r2, #4
   203dc:	bne	2040c <__assert_fail@plt+0xef5c>
   203e0:	str	r1, [sp]
   203e4:	mov	r0, r5
   203e8:	mov	r1, r6
   203ec:	mov	r2, r6
   203f0:	mov	r3, r6
   203f4:	bl	20558 <__assert_fail@plt+0xf0a8>
   203f8:	cmp	r0, #0
   203fc:	bne	20544 <__assert_fail@plt+0xf094>
   20400:	ldr	r0, [r5]
   20404:	add	r0, r0, r6, lsl #3
   20408:	ldr	r0, [r0, #4]
   2040c:	tst	r0, #8
   20410:	beq	20518 <__assert_fail@plt+0xf068>
   20414:	ldr	r0, [r5, #20]
   20418:	add	r1, r0, r4, lsl #2
   2041c:	ldr	r1, [r1, #4]
   20420:	cmp	r1, #1
   20424:	blt	20518 <__assert_fail@plt+0xf068>
   20428:	str	r8, [sp, #12]
   2042c:	mov	r8, #0
   20430:	add	r7, sp, #16
   20434:	add	sl, sp, #32
   20438:	mov	r6, #0
   2043c:	str	r9, [sp, #8]
   20440:	b	20460 <__assert_fail@plt+0xefb0>
   20444:	mov	r8, #1
   20448:	ldr	r0, [r5, #20]
   2044c:	add	r6, r6, #1
   20450:	add	r1, r0, r4, lsl #2
   20454:	ldr	r1, [r1, #4]
   20458:	cmp	r6, r1
   2045c:	bge	204ec <__assert_fail@plt+0xf03c>
   20460:	add	r0, r0, r4, lsl #2
   20464:	ldr	r0, [r0, #8]
   20468:	ldr	r2, [r0, r6, lsl #2]
   2046c:	ldr	r0, [r5, #24]
   20470:	add	r9, r2, r2, lsl #1
   20474:	add	r0, r0, r9, lsl #2
   20478:	ldr	r1, [r0, #4]
   2047c:	cmn	r1, #1
   20480:	beq	20444 <__assert_fail@plt+0xef94>
   20484:	cmp	r1, #0
   20488:	bne	204a8 <__assert_fail@plt+0xeff8>
   2048c:	mov	r0, r7
   20490:	mov	r1, r5
   20494:	mov	r3, #0
   20498:	bl	20330 <__assert_fail@plt+0xee80>
   2049c:	cmp	r0, #0
   204a0:	beq	204b8 <__assert_fail@plt+0xf008>
   204a4:	b	20544 <__assert_fail@plt+0xf094>
   204a8:	vldr	d16, [r0]
   204ac:	ldr	r0, [r0, #8]
   204b0:	str	r0, [sp, #24]
   204b4:	vstr	d16, [sp, #16]
   204b8:	mov	r0, sl
   204bc:	mov	r1, r7
   204c0:	bl	209e8 <__assert_fail@plt+0xf538>
   204c4:	cmp	r0, #0
   204c8:	bne	20544 <__assert_fail@plt+0xf094>
   204cc:	ldr	r0, [r5, #24]
   204d0:	add	r0, r0, r9, lsl #2
   204d4:	ldr	r0, [r0, #4]
   204d8:	cmp	r0, #0
   204dc:	bne	20448 <__assert_fail@plt+0xef98>
   204e0:	ldr	r0, [sp, #24]
   204e4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   204e8:	b	20444 <__assert_fail@plt+0xef94>
   204ec:	tst	r8, #1
   204f0:	ldr	r8, [sp, #12]
   204f4:	ldr	r0, [sp, #8]
   204f8:	beq	20518 <__assert_fail@plt+0xf068>
   204fc:	cmp	r0, #0
   20500:	bne	20518 <__assert_fail@plt+0xf068>
   20504:	ldr	r0, [r5, #24]
   20508:	mov	r1, #0
   2050c:	add	r0, r0, r4, lsl #2
   20510:	str	r1, [r0, #4]
   20514:	b	20530 <__assert_fail@plt+0xf080>
   20518:	ldr	r0, [r5, #24]
   2051c:	vldr	d16, [sp, #32]
   20520:	ldr	r1, [sp, #40]	; 0x28
   20524:	add	r0, r0, r4, lsl #2
   20528:	str	r1, [r0, #8]
   2052c:	vstr	d16, [r0]
   20530:	ldr	r0, [sp, #40]	; 0x28
   20534:	vldr	d16, [sp, #32]
   20538:	str	r0, [r8, #8]
   2053c:	mov	r0, #0
   20540:	vstr	d16, [r8]
   20544:	sub	sp, fp, #28
   20548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2054c:	mov	r0, #12
   20550:	sub	sp, fp, #28
   20554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2055c:	add	fp, sp, #28
   20560:	sub	sp, sp, #20
   20564:	mov	r9, r0
   20568:	ldr	r0, [fp, #8]
   2056c:	mov	r8, r2
   20570:	mov	r5, r1
   20574:	str	r3, [sp, #8]
   20578:	str	r0, [sp, #12]
   2057c:	ldr	r1, [sp, #12]
   20580:	movw	r0, #65280	; 0xff00
   20584:	movt	r0, #3
   20588:	and	r0, r0, r1, lsl #8
   2058c:	str	r0, [sp, #16]
   20590:	ldr	r2, [r9]
   20594:	add	r3, r2, r5, lsl #3
   20598:	ldrb	r0, [r3, #4]!
   2059c:	cmp	r0, #4
   205a0:	bne	20678 <__assert_fail@plt+0xf1c8>
   205a4:	ldr	r0, [r9, #12]
   205a8:	ldr	r1, [r9, #20]
   205ac:	add	r7, r8, r8, lsl #1
   205b0:	ldr	r6, [r0, r5, lsl #2]
   205b4:	add	r0, r1, r7, lsl #2
   205b8:	mov	r1, #0
   205bc:	str	r1, [r0, #4]
   205c0:	mov	r0, r9
   205c4:	ldr	r1, [r2, r6, lsl #3]!
   205c8:	ldr	r2, [r2, #4]
   205cc:	bl	20158 <__assert_fail@plt+0xeca8>
   205d0:	cmn	r0, #1
   205d4:	beq	209d8 <__assert_fail@plt+0xf528>
   205d8:	mov	r4, r0
   205dc:	ldr	r0, [r9]
   205e0:	movw	r2, #255	; 0xff
   205e4:	movt	r2, #65532	; 0xfffc
   205e8:	add	r0, r0, r4, lsl #3
   205ec:	ldr	r1, [r0, #4]
   205f0:	and	r1, r1, r2
   205f4:	ldr	r2, [sp, #16]
   205f8:	orr	r1, r1, r2
   205fc:	movw	r2, #65280	; 0xff00
   20600:	str	r1, [r0, #4]
   20604:	movt	r2, #3
   20608:	ldr	r0, [r9]
   2060c:	add	r1, r0, r6, lsl #3
   20610:	add	r0, r0, r4, lsl #3
   20614:	ldr	r1, [r1, #4]
   20618:	and	r1, r1, r2
   2061c:	ldr	r2, [r0, #4]
   20620:	orr	r1, r1, r2
   20624:	str	r1, [r0, #4]
   20628:	ldr	r0, [r9]
   2062c:	add	r0, r0, r4, lsl #3
   20630:	ldr	r1, [r0, #4]
   20634:	orr	r1, r1, #262144	; 0x40000
   20638:	str	r1, [r0, #4]
   2063c:	ldr	r0, [r9, #16]
   20640:	str	r6, [r0, r4, lsl #2]
   20644:	ldr	r0, [r9, #12]
   20648:	ldr	r1, [r0, r5, lsl #2]
   2064c:	str	r1, [r0, r8, lsl #2]
   20650:	mov	r1, r4
   20654:	ldr	r0, [r9, #20]
   20658:	add	r0, r0, r7, lsl #2
   2065c:	bl	20b88 <__assert_fail@plt+0xf6d8>
   20660:	cmp	r0, #0
   20664:	mov	r5, r6
   20668:	mov	r8, r4
   2066c:	mov	r7, #12
   20670:	bne	20590 <__assert_fail@plt+0xf0e0>
   20674:	b	209a8 <__assert_fail@plt+0xf4f8>
   20678:	ldr	r0, [r9, #20]
   2067c:	add	ip, r5, r5, lsl #1
   20680:	add	r7, r0, ip, lsl #2
   20684:	ldr	r1, [r7, #4]
   20688:	cmp	r1, #0
   2068c:	beq	2098c <__assert_fail@plt+0xf4dc>
   20690:	ldr	r7, [r7, #8]
   20694:	add	r4, r8, r8, lsl #1
   20698:	cmp	r1, #1
   2069c:	add	r0, r0, r4, lsl #2
   206a0:	ldr	sl, [r7]
   206a4:	mov	r7, #0
   206a8:	str	r7, [r0, #4]
   206ac:	beq	208b4 <__assert_fail@plt+0xf404>
   206b0:	ldr	r1, [r9, #8]
   206b4:	mov	r8, r4
   206b8:	ldr	r4, [sp, #12]
   206bc:	sub	r3, r1, #1
   206c0:	cmp	r3, #1
   206c4:	blt	20714 <__assert_fail@plt+0xf264>
   206c8:	add	r3, r2, r3, lsl #3
   206cc:	ldr	r7, [r3, #4]
   206d0:	ands	r3, r7, #262144	; 0x40000
   206d4:	beq	20714 <__assert_fail@plt+0xf264>
   206d8:	ldr	r6, [r9, #16]
   206dc:	sub	r3, r2, #12
   206e0:	sub	r6, r6, #4
   206e4:	ldr	r5, [r6, r1, lsl #2]
   206e8:	cmp	r5, sl
   206ec:	ubfxeq	r7, r7, #8, #10
   206f0:	cmpeq	r7, r4
   206f4:	beq	20898 <__assert_fail@plt+0xf3e8>
   206f8:	sub	r7, r1, #2
   206fc:	cmp	r7, #1
   20700:	blt	20714 <__assert_fail@plt+0xf264>
   20704:	ldr	r7, [r3, r1, lsl #3]
   20708:	sub	r1, r1, #1
   2070c:	ands	r5, r7, #262144	; 0x40000
   20710:	bne	206e4 <__assert_fail@plt+0xf234>
   20714:	ldr	r1, [r2, sl, lsl #3]!
   20718:	mov	r0, r9
   2071c:	mov	r5, ip
   20720:	ldr	r2, [r2, #4]
   20724:	bl	20158 <__assert_fail@plt+0xeca8>
   20728:	mov	r7, #12
   2072c:	cmn	r0, #1
   20730:	beq	209a8 <__assert_fail@plt+0xf4f8>
   20734:	mov	r6, r0
   20738:	ldr	r0, [r9]
   2073c:	movw	r2, #255	; 0xff
   20740:	mov	r4, r8
   20744:	movt	r2, #65532	; 0xfffc
   20748:	add	r0, r0, r6, lsl #3
   2074c:	ldr	r1, [r0, #4]
   20750:	and	r1, r1, r2
   20754:	ldr	r2, [sp, #16]
   20758:	orr	r1, r1, r2
   2075c:	movw	r2, #65280	; 0xff00
   20760:	str	r1, [r0, #4]
   20764:	movt	r2, #3
   20768:	ldr	r0, [r9]
   2076c:	add	r1, r0, sl, lsl #3
   20770:	add	r0, r0, r6, lsl #3
   20774:	ldr	r1, [r1, #4]
   20778:	and	r1, r1, r2
   2077c:	ldr	r2, [r0, #4]
   20780:	orr	r1, r1, r2
   20784:	str	r1, [r0, #4]
   20788:	ldr	r0, [r9]
   2078c:	add	r0, r0, r6, lsl #3
   20790:	ldr	r1, [r0, #4]
   20794:	orr	r1, r1, #262144	; 0x40000
   20798:	str	r1, [r0, #4]
   2079c:	mov	r1, r6
   207a0:	ldr	r0, [r9, #16]
   207a4:	str	sl, [r0, r6, lsl #2]
   207a8:	ldr	r0, [r9, #20]
   207ac:	add	r0, r0, r8, lsl #2
   207b0:	bl	20b88 <__assert_fail@plt+0xf6d8>
   207b4:	cmp	r0, #0
   207b8:	beq	209a8 <__assert_fail@plt+0xf4f8>
   207bc:	ldr	r0, [sp, #12]
   207c0:	ldr	r3, [sp, #8]
   207c4:	mov	r1, sl
   207c8:	mov	r2, r6
   207cc:	str	r0, [sp]
   207d0:	mov	r0, r9
   207d4:	bl	20558 <__assert_fail@plt+0xf0a8>
   207d8:	cmp	r0, #0
   207dc:	bne	209a4 <__assert_fail@plt+0xf4f4>
   207e0:	ldr	r1, [r9, #20]
   207e4:	ldr	r0, [r9]
   207e8:	add	r1, r1, r5, lsl #2
   207ec:	ldr	r1, [r1, #8]
   207f0:	ldr	r5, [r1, #4]
   207f4:	ldr	r1, [r0, r5, lsl #3]!
   207f8:	ldr	r2, [r0, #4]
   207fc:	mov	r0, r9
   20800:	bl	20158 <__assert_fail@plt+0xeca8>
   20804:	mov	r7, #12
   20808:	cmn	r0, #1
   2080c:	beq	209a8 <__assert_fail@plt+0xf4f8>
   20810:	mov	r8, r0
   20814:	ldr	r0, [r9]
   20818:	movw	r2, #255	; 0xff
   2081c:	movt	r2, #65532	; 0xfffc
   20820:	add	r0, r0, r8, lsl #3
   20824:	ldr	r1, [r0, #4]
   20828:	and	r1, r1, r2
   2082c:	ldr	r2, [sp, #16]
   20830:	orr	r1, r1, r2
   20834:	movw	r2, #65280	; 0xff00
   20838:	str	r1, [r0, #4]
   2083c:	movt	r2, #3
   20840:	ldr	r0, [r9]
   20844:	add	r1, r0, r5, lsl #3
   20848:	add	r0, r0, r8, lsl #3
   2084c:	ldr	r1, [r1, #4]
   20850:	and	r1, r1, r2
   20854:	ldr	r2, [r0, #4]
   20858:	orr	r1, r1, r2
   2085c:	str	r1, [r0, #4]
   20860:	ldr	r0, [r9]
   20864:	add	r0, r0, r8, lsl #3
   20868:	ldr	r1, [r0, #4]
   2086c:	orr	r1, r1, #262144	; 0x40000
   20870:	str	r1, [r0, #4]
   20874:	mov	r1, r8
   20878:	ldr	r0, [r9, #16]
   2087c:	str	r5, [r0, r8, lsl #2]
   20880:	ldr	r0, [r9, #20]
   20884:	add	r0, r0, r4, lsl #2
   20888:	bl	20b88 <__assert_fail@plt+0xf6d8>
   2088c:	cmp	r0, #0
   20890:	bne	20590 <__assert_fail@plt+0xf0e0>
   20894:	b	209a8 <__assert_fail@plt+0xf4f8>
   20898:	sub	r1, r1, #1
   2089c:	mov	r5, ip
   208a0:	bl	20b88 <__assert_fail@plt+0xf6d8>
   208a4:	cmp	r0, #0
   208a8:	mov	r4, r8
   208ac:	bne	207e0 <__assert_fail@plt+0xf330>
   208b0:	b	209d8 <__assert_fail@plt+0xf528>
   208b4:	ldr	r1, [sp, #8]
   208b8:	cmp	r5, r1
   208bc:	bne	208c8 <__assert_fail@plt+0xf418>
   208c0:	cmp	r8, r5
   208c4:	bne	209b4 <__assert_fail@plt+0xf504>
   208c8:	ldr	r1, [r2, sl, lsl #3]!
   208cc:	ldr	r6, [r3]
   208d0:	mov	r0, r9
   208d4:	ldr	r2, [r2, #4]
   208d8:	bl	20158 <__assert_fail@plt+0xeca8>
   208dc:	mov	r8, r0
   208e0:	ubfx	r0, r6, #8, #10
   208e4:	mov	r7, #12
   208e8:	cmn	r8, #1
   208ec:	beq	209a8 <__assert_fail@plt+0xf4f8>
   208f0:	ldr	r1, [sp, #12]
   208f4:	movw	r7, #255	; 0xff
   208f8:	movt	r7, #65532	; 0xfffc
   208fc:	orr	r1, r0, r1
   20900:	movw	r0, #65280	; 0xff00
   20904:	movt	r0, #3
   20908:	str	r1, [sp, #12]
   2090c:	mov	r3, r0
   20910:	and	r0, r0, r1, lsl #8
   20914:	ldr	r1, [r9]
   20918:	add	r1, r1, r8, lsl #3
   2091c:	ldr	r2, [r1, #4]
   20920:	and	r2, r2, r7
   20924:	mov	r7, #12
   20928:	orr	r0, r2, r0
   2092c:	str	r0, [r1, #4]
   20930:	ldr	r0, [r9]
   20934:	add	r1, r0, sl, lsl #3
   20938:	add	r0, r0, r8, lsl #3
   2093c:	ldr	r1, [r1, #4]
   20940:	ldr	r2, [r0, #4]
   20944:	and	r1, r1, r3
   20948:	orr	r1, r1, r2
   2094c:	str	r1, [r0, #4]
   20950:	ldr	r0, [r9]
   20954:	add	r0, r0, r8, lsl #3
   20958:	ldr	r1, [r0, #4]
   2095c:	orr	r1, r1, #262144	; 0x40000
   20960:	str	r1, [r0, #4]
   20964:	mov	r1, r8
   20968:	ldr	r0, [r9, #16]
   2096c:	str	sl, [r0, r8, lsl #2]
   20970:	ldr	r0, [r9, #20]
   20974:	add	r0, r0, r4, lsl #2
   20978:	bl	20b88 <__assert_fail@plt+0xf6d8>
   2097c:	cmp	r0, #0
   20980:	mov	r5, sl
   20984:	bne	2057c <__assert_fail@plt+0xf0cc>
   20988:	b	209a8 <__assert_fail@plt+0xf4f8>
   2098c:	ldr	r0, [r9, #12]
   20990:	ldr	r1, [r0, r5, lsl #2]
   20994:	str	r1, [r0, r8, lsl #2]
   20998:	mov	r0, #0
   2099c:	sub	sp, fp, #28
   209a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209a4:	mov	r7, r0
   209a8:	mov	r0, r7
   209ac:	sub	sp, fp, #28
   209b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209b4:	mov	r1, sl
   209b8:	bl	20b88 <__assert_fail@plt+0xf6d8>
   209bc:	mov	r1, r0
   209c0:	mov	r7, #12
   209c4:	mov	r0, #0
   209c8:	cmp	r1, #0
   209cc:	moveq	r0, r7
   209d0:	sub	sp, fp, #28
   209d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209d8:	mov	r7, #12
   209dc:	mov	r0, r7
   209e0:	sub	sp, fp, #28
   209e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   209ec:	add	fp, sp, #24
   209f0:	mov	r8, #0
   209f4:	cmp	r1, #0
   209f8:	beq	20b5c <__assert_fail@plt+0xf6ac>
   209fc:	mov	r6, r1
   20a00:	ldr	r1, [r1, #4]
   20a04:	cmp	r1, #0
   20a08:	beq	20b5c <__assert_fail@plt+0xf6ac>
   20a0c:	mov	r9, r0
   20a10:	ldr	r2, [r0]
   20a14:	ldr	r0, [r0, #4]
   20a18:	add	r3, r0, r1, lsl #1
   20a1c:	cmp	r2, r3
   20a20:	bge	20a4c <__assert_fail@plt+0xf59c>
   20a24:	ldr	r0, [r9, #8]
   20a28:	add	r7, r2, r1
   20a2c:	lsl	r1, r7, #3
   20a30:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   20a34:	cmp	r0, #0
   20a38:	beq	20b7c <__assert_fail@plt+0xf6cc>
   20a3c:	str	r0, [r9, #8]
   20a40:	lsl	r0, r7, #1
   20a44:	str	r0, [r9]
   20a48:	ldr	r0, [r9, #4]
   20a4c:	cmp	r0, #0
   20a50:	beq	20b64 <__assert_fail@plt+0xf6b4>
   20a54:	ldr	r2, [r6, #4]
   20a58:	sub	r1, r0, #1
   20a5c:	add	r7, r0, r2, lsl #1
   20a60:	sub	r0, r2, #1
   20a64:	orrs	r2, r0, r1
   20a68:	bmi	20ac4 <__assert_fail@plt+0xf614>
   20a6c:	ldr	r2, [r6, #8]
   20a70:	ldr	r3, [r9, #8]
   20a74:	ldr	r4, [r2, r0, lsl #2]
   20a78:	ldr	r5, [r3, r1, lsl #2]
   20a7c:	cmp	r5, r4
   20a80:	beq	20ab0 <__assert_fail@plt+0xf600>
   20a84:	sublt	r7, r7, #1
   20a88:	subge	r1, r1, #1
   20a8c:	sublt	r0, r0, #1
   20a90:	strlt	r4, [r3, r7, lsl #2]
   20a94:	orr	r5, r0, r1
   20a98:	cmn	r5, #1
   20a9c:	ble	20ac4 <__assert_fail@plt+0xf614>
   20aa0:	ldr	r4, [r2, r0, lsl #2]
   20aa4:	ldr	r5, [r3, r1, lsl #2]
   20aa8:	cmp	r5, r4
   20aac:	bne	20a84 <__assert_fail@plt+0xf5d4>
   20ab0:	sub	r1, r1, #1
   20ab4:	sub	r0, r0, #1
   20ab8:	orr	r5, r0, r1
   20abc:	cmn	r5, #1
   20ac0:	bgt	20aa0 <__assert_fail@plt+0xf5f0>
   20ac4:	cmp	r0, #0
   20ac8:	bmi	20ae8 <__assert_fail@plt+0xf638>
   20acc:	add	r2, r0, #1
   20ad0:	ldr	r0, [r9, #8]
   20ad4:	ldr	r1, [r6, #8]
   20ad8:	sub	r7, r7, r2
   20adc:	lsl	r2, r2, #2
   20ae0:	add	r0, r0, r7, lsl #2
   20ae4:	bl	11258 <memcpy@plt>
   20ae8:	ldr	r0, [r9, #4]
   20aec:	ldr	r2, [r6, #4]
   20af0:	sub	r1, r0, #1
   20af4:	add	r3, r1, r2, lsl #1
   20af8:	sub	r2, r3, r7
   20afc:	adds	r2, r2, #1
   20b00:	bcs	20b5c <__assert_fail@plt+0xf6ac>
   20b04:	add	r0, r2, r0
   20b08:	str	r0, [r9, #4]
   20b0c:	ldr	r0, [r9, #8]
   20b10:	ldr	r6, [r0, r1, lsl #2]
   20b14:	ldr	r5, [r0, r3, lsl #2]
   20b18:	cmp	r5, r6
   20b1c:	ble	20b38 <__assert_fail@plt+0xf688>
   20b20:	add	r6, r2, r1
   20b24:	subs	r2, r2, #1
   20b28:	sub	r3, r3, #1
   20b2c:	str	r5, [r0, r6, lsl #2]
   20b30:	bne	20b10 <__assert_fail@plt+0xf660>
   20b34:	b	20b5c <__assert_fail@plt+0xf6ac>
   20b38:	add	r5, r2, r1
   20b3c:	cmp	r1, #0
   20b40:	str	r6, [r0, r5, lsl #2]
   20b44:	sub	r6, r1, #1
   20b48:	mov	r1, r6
   20b4c:	bgt	20b10 <__assert_fail@plt+0xf660>
   20b50:	add	r1, r0, r7, lsl #2
   20b54:	lsl	r2, r2, #2
   20b58:	bl	11258 <memcpy@plt>
   20b5c:	mov	r0, r8
   20b60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20b64:	ldr	r0, [r6, #4]
   20b68:	str	r0, [r9, #4]
   20b6c:	ldr	r0, [r9, #8]
   20b70:	ldr	r2, [r6, #4]
   20b74:	ldr	r1, [r6, #8]
   20b78:	b	20b54 <__assert_fail@plt+0xf6a4>
   20b7c:	mov	r8, #12
   20b80:	mov	r0, r8
   20b84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20b88:	push	{r4, r5, r6, sl, fp, lr}
   20b8c:	add	fp, sp, #16
   20b90:	ldr	r2, [r0]
   20b94:	mov	r5, r1
   20b98:	mov	r4, r0
   20b9c:	cmp	r2, #0
   20ba0:	beq	20bd0 <__assert_fail@plt+0xf720>
   20ba4:	ldr	r1, [r4, #4]
   20ba8:	cmp	r1, #0
   20bac:	bne	20c0c <__assert_fail@plt+0xf75c>
   20bb0:	ldr	r0, [r4, #8]
   20bb4:	str	r5, [r0]
   20bb8:	ldr	r0, [r4, #4]
   20bbc:	mov	r6, #1
   20bc0:	add	r0, r0, #1
   20bc4:	str	r0, [r4, #4]
   20bc8:	mov	r0, r6
   20bcc:	pop	{r4, r5, r6, sl, fp, pc}
   20bd0:	mov	r6, #1
   20bd4:	mov	r0, #4
   20bd8:	str	r6, [r4]
   20bdc:	str	r6, [r4, #4]
   20be0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   20be4:	cmp	r0, #0
   20be8:	str	r0, [r4, #8]
   20bec:	strne	r5, [r0]
   20bf0:	movne	r0, r6
   20bf4:	popne	{r4, r5, r6, sl, fp, pc}
   20bf8:	mov	r6, #0
   20bfc:	mov	r0, r6
   20c00:	str	r6, [r4]
   20c04:	str	r6, [r4, #4]
   20c08:	pop	{r4, r5, r6, sl, fp, pc}
   20c0c:	cmp	r2, r1
   20c10:	bne	20c48 <__assert_fail@plt+0xf798>
   20c14:	lsl	r0, r2, #1
   20c18:	lsl	r1, r2, #3
   20c1c:	str	r0, [r4]
   20c20:	ldr	r0, [r4, #8]
   20c24:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   20c28:	cmp	r0, #0
   20c2c:	beq	20cfc <__assert_fail@plt+0xf84c>
   20c30:	str	r0, [r4, #8]
   20c34:	ldr	r1, [r4, #4]
   20c38:	ldr	r2, [r0]
   20c3c:	cmp	r2, r5
   20c40:	bgt	20c58 <__assert_fail@plt+0xf7a8>
   20c44:	b	20cc4 <__assert_fail@plt+0xf814>
   20c48:	ldr	r0, [r4, #8]
   20c4c:	ldr	r2, [r0]
   20c50:	cmp	r2, r5
   20c54:	ble	20cc4 <__assert_fail@plt+0xf814>
   20c58:	cmp	r1, #1
   20c5c:	blt	20cf4 <__assert_fail@plt+0xf844>
   20c60:	ands	r3, r1, #3
   20c64:	sub	ip, r1, #1
   20c68:	beq	20c8c <__assert_fail@plt+0xf7dc>
   20c6c:	add	lr, r0, r1, lsl #2
   20c70:	mov	r6, lr
   20c74:	ldr	r2, [r6, #-4]!
   20c78:	subs	r3, r3, #1
   20c7c:	sub	r1, r1, #1
   20c80:	str	r2, [lr]
   20c84:	mov	lr, r6
   20c88:	bne	20c74 <__assert_fail@plt+0xf7c4>
   20c8c:	cmp	ip, #3
   20c90:	bcc	20cbc <__assert_fail@plt+0xf80c>
   20c94:	add	r2, r0, r1, lsl #2
   20c98:	sub	r2, r2, #8
   20c9c:	sub	lr, r2, #8
   20ca0:	sub	r1, r1, #4
   20ca4:	sub	sl, r2, #4
   20ca8:	sub	r2, r2, #16
   20cac:	ldm	lr, {r3, r6, ip, lr}
   20cb0:	cmp	r1, #0
   20cb4:	stm	sl, {r3, r6, ip, lr}
   20cb8:	bgt	20c9c <__assert_fail@plt+0xf7ec>
   20cbc:	mov	r1, #0
   20cc0:	b	20cf4 <__assert_fail@plt+0xf844>
   20cc4:	add	r2, r0, r1, lsl #2
   20cc8:	ldr	r3, [r2, #-4]
   20ccc:	cmp	r3, r5
   20cd0:	ble	20cf4 <__assert_fail@plt+0xf844>
   20cd4:	sub	r1, r1, #2
   20cd8:	str	r3, [r2]
   20cdc:	sub	r1, r1, #1
   20ce0:	ldr	r3, [r2, #-8]
   20ce4:	sub	r2, r2, #4
   20ce8:	cmp	r3, r5
   20cec:	bgt	20cd8 <__assert_fail@plt+0xf828>
   20cf0:	add	r1, r1, #2
   20cf4:	str	r5, [r0, r1, lsl #2]
   20cf8:	b	20bb8 <__assert_fail@plt+0xf708>
   20cfc:	mov	r6, #0
   20d00:	mov	r0, r6
   20d04:	pop	{r4, r5, r6, sl, fp, pc}
   20d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d0c:	add	fp, sp, #28
   20d10:	sub	sp, sp, #28
   20d14:	ldr	sl, [r2, #4]
   20d18:	cmp	sl, #0
   20d1c:	beq	20f40 <__assert_fail@plt+0xfa90>
   20d20:	mov	r9, r3
   20d24:	add	r7, sl, r3
   20d28:	cmp	sl, #1
   20d2c:	str	r1, [sp, #16]
   20d30:	str	r2, [sp, #20]
   20d34:	str	r0, [sp]
   20d38:	blt	20e20 <__assert_fail@plt+0xf970>
   20d3c:	ldr	ip, [r2, #8]
   20d40:	mov	r8, #0
   20d44:	cmp	sl, #4
   20d48:	bcc	20e08 <__assert_fail@plt+0xf958>
   20d4c:	mov	r3, #0
   20d50:	bic	r8, sl, #3
   20d54:	mov	r1, #1
   20d58:	vdup.32	q8, r3
   20d5c:	sub	r4, r8, #4
   20d60:	add	r1, r1, r4, lsr #2
   20d64:	cmp	r4, #12
   20d68:	and	lr, r1, #3
   20d6c:	vmov.32	d16[0], r7
   20d70:	bcc	20dc4 <__assert_fail@plt+0xf914>
   20d74:	sub	r6, r1, lr
   20d78:	mov	r3, #0
   20d7c:	mov	r4, #64	; 0x40
   20d80:	mov	r7, ip
   20d84:	mov	r1, ip
   20d88:	vld1.32	{d18-d19}, [r1], r4
   20d8c:	add	r5, r7, #16
   20d90:	add	r2, r7, #32
   20d94:	subs	r6, r6, #4
   20d98:	add	r3, r3, #16
   20d9c:	vld1.32	{d20-d21}, [r5]
   20da0:	vadd.i32	q8, q9, q8
   20da4:	vld1.32	{d18-d19}, [r2]
   20da8:	add	r2, r7, #48	; 0x30
   20dac:	mov	r7, r1
   20db0:	vadd.i32	q8, q10, q8
   20db4:	vld1.32	{d20-d21}, [r2]
   20db8:	vadd.i32	q8, q9, q8
   20dbc:	vadd.i32	q8, q10, q8
   20dc0:	bne	20d88 <__assert_fail@plt+0xf8d8>
   20dc4:	cmp	lr, #0
   20dc8:	beq	20de4 <__assert_fail@plt+0xf934>
   20dcc:	add	r1, ip, r3, lsl #2
   20dd0:	rsb	r3, lr, #0
   20dd4:	vld1.32	{d18-d19}, [r1]!
   20dd8:	adds	r3, r3, #1
   20ddc:	vadd.i32	q8, q9, q8
   20de0:	bcc	20dd4 <__assert_fail@plt+0xf924>
   20de4:	vext.8	q9, q8, q8, #8
   20de8:	ldr	r1, [sp, #16]
   20dec:	ldr	r2, [sp, #20]
   20df0:	cmp	sl, r8
   20df4:	vadd.i32	q8, q8, q9
   20df8:	vdup.32	q9, d16[1]
   20dfc:	vadd.i32	q8, q8, q9
   20e00:	vmov.32	r7, d16[0]
   20e04:	beq	20e20 <__assert_fail@plt+0xf970>
   20e08:	add	r0, ip, r8, lsl #2
   20e0c:	sub	r6, sl, r8
   20e10:	ldr	r3, [r0], #4
   20e14:	subs	r6, r6, #1
   20e18:	add	r7, r3, r7
   20e1c:	bne	20e10 <__assert_fail@plt+0xf960>
   20e20:	ldr	r0, [r1, #32]
   20e24:	ldr	r1, [r1, #68]	; 0x44
   20e28:	and	r1, r1, r7
   20e2c:	add	r3, r1, r1, lsl #1
   20e30:	ldr	r1, [r0, r3, lsl #2]
   20e34:	cmp	r1, #1
   20e38:	blt	20ed8 <__assert_fail@plt+0xfa28>
   20e3c:	cmp	r2, #0
   20e40:	beq	20ed8 <__assert_fail@plt+0xfa28>
   20e44:	add	r0, r0, r3, lsl #2
   20e48:	sub	ip, sl, #1
   20e4c:	mov	r6, #0
   20e50:	ldr	lr, [r0, #8]
   20e54:	ldr	r8, [lr, r6, lsl #2]
   20e58:	ldr	r3, [r8]
   20e5c:	cmp	r3, r7
   20e60:	beq	20e80 <__assert_fail@plt+0xf9d0>
   20e64:	add	r6, r6, #1
   20e68:	cmp	r6, r1
   20e6c:	bge	20ed8 <__assert_fail@plt+0xfa28>
   20e70:	ldr	r8, [lr, r6, lsl #2]
   20e74:	ldr	r3, [r8]
   20e78:	cmp	r3, r7
   20e7c:	bne	20e64 <__assert_fail@plt+0xf9b4>
   20e80:	ldrb	r3, [r8, #52]	; 0x34
   20e84:	and	r3, r3, #15
   20e88:	cmp	r3, r9
   20e8c:	bne	20e64 <__assert_fail@plt+0xf9b4>
   20e90:	ldr	r4, [r8, #40]	; 0x28
   20e94:	cmp	r4, #0
   20e98:	beq	20e64 <__assert_fail@plt+0xf9b4>
   20e9c:	ldr	r3, [r4, #4]
   20ea0:	cmp	r3, sl
   20ea4:	bne	20e64 <__assert_fail@plt+0xf9b4>
   20ea8:	mov	r3, ip
   20eac:	add	r5, r3, #1
   20eb0:	cmp	r5, #1
   20eb4:	blt	21714 <__assert_fail@plt+0x10264>
   20eb8:	ldr	r5, [r2, #8]
   20ebc:	ldr	r0, [r4, #8]
   20ec0:	ldr	r5, [r5, r3, lsl #2]
   20ec4:	ldr	r0, [r0, r3, lsl #2]
   20ec8:	sub	r3, r3, #1
   20ecc:	cmp	r0, r5
   20ed0:	beq	20eac <__assert_fail@plt+0xf9fc>
   20ed4:	b	20e64 <__assert_fail@plt+0xf9b4>
   20ed8:	mov	r0, #56	; 0x38
   20edc:	mov	r1, #1
   20ee0:	bl	2ba08 <__assert_fail@plt+0x1a558>
   20ee4:	cmp	r0, #0
   20ee8:	beq	21734 <__assert_fail@plt+0x10284>
   20eec:	ldr	ip, [sp, #20]
   20ef0:	mov	r8, r0
   20ef4:	add	r6, r0, #4
   20ef8:	ldr	r3, [ip, #4]
   20efc:	cmp	r3, #1
   20f00:	str	r3, [r0, #8]
   20f04:	blt	20f54 <__assert_fail@plt+0xfaa4>
   20f08:	lsl	r0, r3, #2
   20f0c:	str	r3, [r8, #4]
   20f10:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   20f14:	cmp	r0, #0
   20f18:	str	r0, [r8, #12]
   20f1c:	beq	21750 <__assert_fail@plt+0x102a0>
   20f20:	ldr	r4, [sp, #20]
   20f24:	ldr	r5, [r4, #4]
   20f28:	ldr	r1, [r4, #8]
   20f2c:	lsl	r2, r5, #2
   20f30:	bl	11258 <memcpy@plt>
   20f34:	mov	r3, r5
   20f38:	mov	ip, r4
   20f3c:	b	20f64 <__assert_fail@plt+0xfab4>
   20f40:	mov	r8, #0
   20f44:	str	r8, [r0]
   20f48:	mov	r0, r8
   20f4c:	sub	sp, fp, #28
   20f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f54:	mov	r0, #0
   20f58:	str	r0, [r6]
   20f5c:	str	r0, [r6, #4]
   20f60:	str	r0, [r6, #8]
   20f64:	mov	sl, r8
   20f68:	and	r1, r9, #15
   20f6c:	cmp	r3, #1
   20f70:	str	r6, [sp, #24]
   20f74:	ldrb	r0, [sl, #52]!	; 0x34
   20f78:	str	r6, [sl, #-12]
   20f7c:	and	r0, r0, #240	; 0xf0
   20f80:	orr	r0, r0, r1
   20f84:	strb	r0, [sl]
   20f88:	ldr	r0, [sp, #16]
   20f8c:	blt	21700 <__assert_fail@plt+0x10250>
   20f90:	and	r1, r9, #4
   20f94:	tst	r9, #1
   20f98:	str	sl, [sp, #8]
   20f9c:	str	r1, [sp, #12]
   20fa0:	and	r1, r9, #2
   20fa4:	bne	21184 <__assert_fail@plt+0xfcd4>
   20fa8:	movw	r9, #65280	; 0xff00
   20fac:	mov	r6, #0
   20fb0:	mov	lr, #0
   20fb4:	cmp	r1, #0
   20fb8:	movt	r9, #3
   20fbc:	add	r5, r9, #255	; 0xff
   20fc0:	bne	21360 <__assert_fail@plt+0xfeb0>
   20fc4:	str	r5, [sp, #4]
   20fc8:	b	20fe0 <__assert_fail@plt+0xfb30>
   20fcc:	mov	r3, r5
   20fd0:	ldr	r5, [sp, #4]
   20fd4:	add	r6, r6, #1
   20fd8:	cmp	r6, r3
   20fdc:	bge	21700 <__assert_fail@plt+0x10250>
   20fe0:	ldr	r1, [ip, #8]
   20fe4:	ldr	r2, [r0]
   20fe8:	ldr	r1, [r1, r6, lsl #2]
   20fec:	add	r1, r2, r1, lsl #3
   20ff0:	ldr	r4, [r1, #4]
   20ff4:	and	r1, r4, r5
   20ff8:	cmp	r1, #1
   20ffc:	beq	20fd4 <__assert_fail@plt+0xfb24>
   21000:	mov	r5, r3
   21004:	ldrb	r3, [sl]
   21008:	mov	r2, #32
   2100c:	and	r1, r4, r9
   21010:	and	r2, r2, r4, lsr #15
   21014:	orr	r2, r3, r2
   21018:	uxtb	r3, r4
   2101c:	strb	r2, [sl]
   21020:	cmp	r3, #4
   21024:	beq	21038 <__assert_fail@plt+0xfb88>
   21028:	cmp	r3, #2
   2102c:	bne	21044 <__assert_fail@plt+0xfb94>
   21030:	mov	r3, #16
   21034:	b	2103c <__assert_fail@plt+0xfb8c>
   21038:	mov	r3, #64	; 0x40
   2103c:	orr	r2, r2, r3
   21040:	strb	r2, [sl]
   21044:	cmp	r1, #0
   21048:	beq	20fcc <__assert_fail@plt+0xfb1c>
   2104c:	ldr	r1, [r8, #40]	; 0x28
   21050:	ldr	r2, [sp, #24]
   21054:	mov	r3, r5
   21058:	cmp	r1, r2
   2105c:	beq	21084 <__assert_fail@plt+0xfbd4>
   21060:	ldr	r5, [sp, #4]
   21064:	tst	r4, #4352	; 0x1100
   21068:	bne	21128 <__assert_fail@plt+0xfc78>
   2106c:	ldr	r1, [sp, #12]
   21070:	cmp	r1, #0
   21074:	bne	20fd4 <__assert_fail@plt+0xfb24>
   21078:	ands	r1, r4, #16384	; 0x4000
   2107c:	bne	21128 <__assert_fail@plt+0xfc78>
   21080:	b	20fd4 <__assert_fail@plt+0xfb24>
   21084:	mov	r0, #12
   21088:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2108c:	cmp	r0, #0
   21090:	beq	2172c <__assert_fail@plt+0x1027c>
   21094:	ldr	ip, [sp, #20]
   21098:	str	r0, [r8, #40]	; 0x28
   2109c:	mov	sl, r0
   210a0:	mov	r5, r0
   210a4:	ldr	r3, [ip, #4]
   210a8:	str	r3, [sl, #4]!
   210ac:	cmp	r3, #0
   210b0:	ble	210f4 <__assert_fail@plt+0xfc44>
   210b4:	lsl	r0, r3, #2
   210b8:	str	r3, [r5]
   210bc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   210c0:	cmp	r0, #0
   210c4:	str	r0, [r5, #8]
   210c8:	beq	21720 <__assert_fail@plt+0x10270>
   210cc:	ldr	r5, [sp, #20]
   210d0:	ldr	r9, [r5, #4]
   210d4:	ldr	r1, [r5, #8]
   210d8:	lsl	r2, r9, #2
   210dc:	bl	11258 <memcpy@plt>
   210e0:	mov	r3, r9
   210e4:	movw	r9, #65280	; 0xff00
   210e8:	mov	ip, r5
   210ec:	movt	r9, #3
   210f0:	b	21104 <__assert_fail@plt+0xfc54>
   210f4:	mov	r0, #0
   210f8:	str	r0, [r5]
   210fc:	str	r0, [r5, #4]
   21100:	str	r0, [r5, #8]
   21104:	ldr	sl, [sp, #8]
   21108:	mov	lr, #0
   2110c:	ldrb	r0, [sl]
   21110:	orr	r0, r0, #128	; 0x80
   21114:	strb	r0, [sl]
   21118:	ldr	r0, [sp, #16]
   2111c:	ldr	r5, [sp, #4]
   21120:	tst	r4, #4352	; 0x1100
   21124:	beq	2106c <__assert_fail@plt+0xfbbc>
   21128:	subs	r1, r6, lr
   2112c:	bmi	21148 <__assert_fail@plt+0xfc98>
   21130:	ldr	r2, [r8, #8]
   21134:	cmp	r2, r1
   21138:	subgt	r2, r2, #1
   2113c:	strgt	r2, [r8, #8]
   21140:	cmpgt	r2, r1
   21144:	bgt	2115c <__assert_fail@plt+0xfcac>
   21148:	add	lr, lr, #1
   2114c:	add	r6, r6, #1
   21150:	cmp	r6, r3
   21154:	blt	20fe0 <__assert_fail@plt+0xfb30>
   21158:	b	21700 <__assert_fail@plt+0x10250>
   2115c:	ldr	r2, [r8, #12]
   21160:	add	r3, r2, r1, lsl #2
   21164:	ldr	r3, [r3, #4]
   21168:	str	r3, [r2, r1, lsl #2]
   2116c:	add	r1, r1, #1
   21170:	ldr	r3, [r8, #8]
   21174:	cmp	r1, r3
   21178:	blt	21160 <__assert_fail@plt+0xfcb0>
   2117c:	ldr	r3, [ip, #4]
   21180:	b	21148 <__assert_fail@plt+0xfc98>
   21184:	cmp	r1, #0
   21188:	bne	21520 <__assert_fail@plt+0x10070>
   2118c:	movw	r9, #65280	; 0xff00
   21190:	mov	r6, #0
   21194:	mov	lr, #0
   21198:	movt	r9, #3
   2119c:	add	r5, r9, #255	; 0xff
   211a0:	str	r5, [sp, #4]
   211a4:	b	211bc <__assert_fail@plt+0xfd0c>
   211a8:	mov	r3, r5
   211ac:	ldr	r5, [sp, #4]
   211b0:	add	r6, r6, #1
   211b4:	cmp	r6, r3
   211b8:	bge	21700 <__assert_fail@plt+0x10250>
   211bc:	ldr	r1, [ip, #8]
   211c0:	ldr	r2, [r0]
   211c4:	ldr	r1, [r1, r6, lsl #2]
   211c8:	add	r1, r2, r1, lsl #3
   211cc:	ldr	r4, [r1, #4]
   211d0:	and	r1, r4, r5
   211d4:	cmp	r1, #1
   211d8:	beq	211b0 <__assert_fail@plt+0xfd00>
   211dc:	mov	r5, r3
   211e0:	ldrb	r3, [sl]
   211e4:	mov	r2, #32
   211e8:	and	r1, r4, r9
   211ec:	and	r2, r2, r4, lsr #15
   211f0:	orr	r2, r3, r2
   211f4:	uxtb	r3, r4
   211f8:	strb	r2, [sl]
   211fc:	cmp	r3, #4
   21200:	beq	21214 <__assert_fail@plt+0xfd64>
   21204:	cmp	r3, #2
   21208:	bne	21220 <__assert_fail@plt+0xfd70>
   2120c:	mov	r3, #16
   21210:	b	21218 <__assert_fail@plt+0xfd68>
   21214:	mov	r3, #64	; 0x40
   21218:	orr	r2, r2, r3
   2121c:	strb	r2, [sl]
   21220:	cmp	r1, #0
   21224:	beq	211a8 <__assert_fail@plt+0xfcf8>
   21228:	ldr	r1, [r8, #40]	; 0x28
   2122c:	ldr	r2, [sp, #24]
   21230:	mov	r3, r5
   21234:	cmp	r1, r2
   21238:	beq	21260 <__assert_fail@plt+0xfdb0>
   2123c:	ldr	r5, [sp, #4]
   21240:	tst	r4, #4608	; 0x1200
   21244:	bne	21304 <__assert_fail@plt+0xfe54>
   21248:	ldr	r1, [sp, #12]
   2124c:	cmp	r1, #0
   21250:	bne	211b0 <__assert_fail@plt+0xfd00>
   21254:	ands	r1, r4, #16384	; 0x4000
   21258:	bne	21304 <__assert_fail@plt+0xfe54>
   2125c:	b	211b0 <__assert_fail@plt+0xfd00>
   21260:	mov	r0, #12
   21264:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   21268:	cmp	r0, #0
   2126c:	beq	2172c <__assert_fail@plt+0x1027c>
   21270:	ldr	ip, [sp, #20]
   21274:	str	r0, [r8, #40]	; 0x28
   21278:	mov	sl, r0
   2127c:	mov	r5, r0
   21280:	ldr	r3, [ip, #4]
   21284:	str	r3, [sl, #4]!
   21288:	cmp	r3, #0
   2128c:	ble	212d0 <__assert_fail@plt+0xfe20>
   21290:	lsl	r0, r3, #2
   21294:	str	r3, [r5]
   21298:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2129c:	cmp	r0, #0
   212a0:	str	r0, [r5, #8]
   212a4:	beq	21720 <__assert_fail@plt+0x10270>
   212a8:	ldr	r5, [sp, #20]
   212ac:	ldr	r9, [r5, #4]
   212b0:	ldr	r1, [r5, #8]
   212b4:	lsl	r2, r9, #2
   212b8:	bl	11258 <memcpy@plt>
   212bc:	mov	r3, r9
   212c0:	movw	r9, #65280	; 0xff00
   212c4:	mov	ip, r5
   212c8:	movt	r9, #3
   212cc:	b	212e0 <__assert_fail@plt+0xfe30>
   212d0:	mov	r0, #0
   212d4:	str	r0, [r5]
   212d8:	str	r0, [r5, #4]
   212dc:	str	r0, [r5, #8]
   212e0:	ldr	sl, [sp, #8]
   212e4:	mov	lr, #0
   212e8:	ldrb	r0, [sl]
   212ec:	orr	r0, r0, #128	; 0x80
   212f0:	strb	r0, [sl]
   212f4:	ldr	r0, [sp, #16]
   212f8:	ldr	r5, [sp, #4]
   212fc:	tst	r4, #4608	; 0x1200
   21300:	beq	21248 <__assert_fail@plt+0xfd98>
   21304:	subs	r1, r6, lr
   21308:	bmi	21324 <__assert_fail@plt+0xfe74>
   2130c:	ldr	r2, [r8, #8]
   21310:	cmp	r2, r1
   21314:	subgt	r2, r2, #1
   21318:	strgt	r2, [r8, #8]
   2131c:	cmpgt	r2, r1
   21320:	bgt	21338 <__assert_fail@plt+0xfe88>
   21324:	add	lr, lr, #1
   21328:	add	r6, r6, #1
   2132c:	cmp	r6, r3
   21330:	blt	211bc <__assert_fail@plt+0xfd0c>
   21334:	b	21700 <__assert_fail@plt+0x10250>
   21338:	ldr	r2, [r8, #12]
   2133c:	add	r3, r2, r1, lsl #2
   21340:	ldr	r3, [r3, #4]
   21344:	str	r3, [r2, r1, lsl #2]
   21348:	add	r1, r1, #1
   2134c:	ldr	r3, [r8, #8]
   21350:	cmp	r1, r3
   21354:	blt	2133c <__assert_fail@plt+0xfe8c>
   21358:	ldr	r3, [ip, #4]
   2135c:	b	21324 <__assert_fail@plt+0xfe74>
   21360:	str	r5, [sp, #4]
   21364:	b	2137c <__assert_fail@plt+0xfecc>
   21368:	mov	r3, r5
   2136c:	ldr	r5, [sp, #4]
   21370:	add	r6, r6, #1
   21374:	cmp	r6, r3
   21378:	bge	21700 <__assert_fail@plt+0x10250>
   2137c:	ldr	r1, [ip, #8]
   21380:	ldr	r2, [r0]
   21384:	ldr	r1, [r1, r6, lsl #2]
   21388:	add	r1, r2, r1, lsl #3
   2138c:	ldr	r4, [r1, #4]
   21390:	and	r1, r4, r5
   21394:	cmp	r1, #1
   21398:	beq	21370 <__assert_fail@plt+0xfec0>
   2139c:	mov	r5, r3
   213a0:	ldrb	r3, [sl]
   213a4:	mov	r2, #32
   213a8:	and	r1, r4, r9
   213ac:	and	r2, r2, r4, lsr #15
   213b0:	orr	r2, r3, r2
   213b4:	uxtb	r3, r4
   213b8:	strb	r2, [sl]
   213bc:	cmp	r3, #4
   213c0:	beq	213d4 <__assert_fail@plt+0xff24>
   213c4:	cmp	r3, #2
   213c8:	bne	213e0 <__assert_fail@plt+0xff30>
   213cc:	mov	r3, #16
   213d0:	b	213d8 <__assert_fail@plt+0xff28>
   213d4:	mov	r3, #64	; 0x40
   213d8:	orr	r2, r2, r3
   213dc:	strb	r2, [sl]
   213e0:	cmp	r1, #0
   213e4:	beq	21368 <__assert_fail@plt+0xfeb8>
   213e8:	ldr	r1, [r8, #40]	; 0x28
   213ec:	ldr	r2, [sp, #24]
   213f0:	mov	r3, r5
   213f4:	cmp	r1, r2
   213f8:	beq	21420 <__assert_fail@plt+0xff70>
   213fc:	ldr	r5, [sp, #4]
   21400:	tst	r4, #256	; 0x100
   21404:	bne	214c4 <__assert_fail@plt+0x10014>
   21408:	ldr	r1, [sp, #12]
   2140c:	cmp	r1, #0
   21410:	bne	21370 <__assert_fail@plt+0xfec0>
   21414:	ands	r1, r4, #16384	; 0x4000
   21418:	bne	214c4 <__assert_fail@plt+0x10014>
   2141c:	b	21370 <__assert_fail@plt+0xfec0>
   21420:	mov	r0, #12
   21424:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   21428:	cmp	r0, #0
   2142c:	beq	2172c <__assert_fail@plt+0x1027c>
   21430:	ldr	ip, [sp, #20]
   21434:	str	r0, [r8, #40]	; 0x28
   21438:	mov	sl, r0
   2143c:	mov	r5, r0
   21440:	ldr	r3, [ip, #4]
   21444:	str	r3, [sl, #4]!
   21448:	cmp	r3, #0
   2144c:	ble	21490 <__assert_fail@plt+0xffe0>
   21450:	lsl	r0, r3, #2
   21454:	str	r3, [r5]
   21458:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2145c:	cmp	r0, #0
   21460:	str	r0, [r5, #8]
   21464:	beq	21720 <__assert_fail@plt+0x10270>
   21468:	ldr	r5, [sp, #20]
   2146c:	ldr	r9, [r5, #4]
   21470:	ldr	r1, [r5, #8]
   21474:	lsl	r2, r9, #2
   21478:	bl	11258 <memcpy@plt>
   2147c:	mov	r3, r9
   21480:	movw	r9, #65280	; 0xff00
   21484:	mov	ip, r5
   21488:	movt	r9, #3
   2148c:	b	214a0 <__assert_fail@plt+0xfff0>
   21490:	mov	r0, #0
   21494:	str	r0, [r5]
   21498:	str	r0, [r5, #4]
   2149c:	str	r0, [r5, #8]
   214a0:	ldr	sl, [sp, #8]
   214a4:	mov	lr, #0
   214a8:	ldrb	r0, [sl]
   214ac:	orr	r0, r0, #128	; 0x80
   214b0:	strb	r0, [sl]
   214b4:	ldr	r0, [sp, #16]
   214b8:	ldr	r5, [sp, #4]
   214bc:	tst	r4, #256	; 0x100
   214c0:	beq	21408 <__assert_fail@plt+0xff58>
   214c4:	subs	r1, r6, lr
   214c8:	bmi	214e4 <__assert_fail@plt+0x10034>
   214cc:	ldr	r2, [r8, #8]
   214d0:	cmp	r2, r1
   214d4:	subgt	r2, r2, #1
   214d8:	strgt	r2, [r8, #8]
   214dc:	cmpgt	r2, r1
   214e0:	bgt	214f8 <__assert_fail@plt+0x10048>
   214e4:	add	lr, lr, #1
   214e8:	add	r6, r6, #1
   214ec:	cmp	r6, r3
   214f0:	blt	2137c <__assert_fail@plt+0xfecc>
   214f4:	b	21700 <__assert_fail@plt+0x10250>
   214f8:	ldr	r2, [r8, #12]
   214fc:	add	r3, r2, r1, lsl #2
   21500:	ldr	r3, [r3, #4]
   21504:	str	r3, [r2, r1, lsl #2]
   21508:	add	r1, r1, #1
   2150c:	ldr	r3, [r8, #8]
   21510:	cmp	r1, r3
   21514:	blt	214fc <__assert_fail@plt+0x1004c>
   21518:	ldr	r3, [ip, #4]
   2151c:	b	214e4 <__assert_fail@plt+0x10034>
   21520:	movw	lr, #65280	; 0xff00
   21524:	mov	r9, #0
   21528:	mov	r4, #0
   2152c:	movt	lr, #3
   21530:	add	r5, lr, #255	; 0xff
   21534:	str	r5, [sp, #4]
   21538:	b	21550 <__assert_fail@plt+0x100a0>
   2153c:	mov	r3, r5
   21540:	ldr	r5, [sp, #4]
   21544:	add	r9, r9, #1
   21548:	cmp	r9, r3
   2154c:	bge	21700 <__assert_fail@plt+0x10250>
   21550:	ldr	r1, [ip, #8]
   21554:	ldr	r2, [r0]
   21558:	ldr	r1, [r1, r9, lsl #2]
   2155c:	add	r1, r2, r1, lsl #3
   21560:	ldr	r6, [r1, #4]
   21564:	and	r1, r6, r5
   21568:	cmp	r1, #1
   2156c:	beq	21544 <__assert_fail@plt+0x10094>
   21570:	mov	r5, r3
   21574:	ldrb	r3, [sl]
   21578:	mov	r2, #32
   2157c:	and	r1, r6, lr
   21580:	and	r2, r2, r6, lsr #15
   21584:	orr	r2, r3, r2
   21588:	uxtb	r3, r6
   2158c:	strb	r2, [sl]
   21590:	cmp	r3, #2
   21594:	beq	215a8 <__assert_fail@plt+0x100f8>
   21598:	cmp	r3, #4
   2159c:	bne	215b4 <__assert_fail@plt+0x10104>
   215a0:	mov	r3, #64	; 0x40
   215a4:	b	215ac <__assert_fail@plt+0x100fc>
   215a8:	mov	r3, #16
   215ac:	orr	r2, r2, r3
   215b0:	strb	r2, [sl]
   215b4:	cmp	r1, #0
   215b8:	beq	2153c <__assert_fail@plt+0x1008c>
   215bc:	ldr	r1, [r8, #40]	; 0x28
   215c0:	ldr	r2, [sp, #24]
   215c4:	mov	r3, r5
   215c8:	cmp	r1, r2
   215cc:	beq	215f4 <__assert_fail@plt+0x10144>
   215d0:	ldr	r5, [sp, #4]
   215d4:	tst	r6, #512	; 0x200
   215d8:	bne	21698 <__assert_fail@plt+0x101e8>
   215dc:	ldr	r1, [sp, #12]
   215e0:	cmp	r1, #0
   215e4:	bne	21544 <__assert_fail@plt+0x10094>
   215e8:	ands	r1, r6, #16384	; 0x4000
   215ec:	bne	21698 <__assert_fail@plt+0x101e8>
   215f0:	b	21544 <__assert_fail@plt+0x10094>
   215f4:	mov	r0, #12
   215f8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   215fc:	cmp	r0, #0
   21600:	beq	2172c <__assert_fail@plt+0x1027c>
   21604:	ldr	ip, [sp, #20]
   21608:	str	r0, [r8, #40]	; 0x28
   2160c:	mov	sl, r0
   21610:	mov	r5, r0
   21614:	ldr	r3, [ip, #4]
   21618:	str	r3, [sl, #4]!
   2161c:	cmp	r3, #1
   21620:	blt	2165c <__assert_fail@plt+0x101ac>
   21624:	lsl	r0, r3, #2
   21628:	str	r3, [r5]
   2162c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   21630:	cmp	r0, #0
   21634:	str	r0, [r5, #8]
   21638:	beq	21720 <__assert_fail@plt+0x10270>
   2163c:	ldr	r4, [sp, #20]
   21640:	ldr	r5, [r4, #4]
   21644:	ldr	r1, [r4, #8]
   21648:	lsl	r2, r5, #2
   2164c:	bl	11258 <memcpy@plt>
   21650:	mov	r3, r5
   21654:	mov	ip, r4
   21658:	b	2166c <__assert_fail@plt+0x101bc>
   2165c:	mov	r0, #0
   21660:	str	r0, [r5]
   21664:	str	r0, [r5, #4]
   21668:	str	r0, [r5, #8]
   2166c:	ldr	sl, [sp, #8]
   21670:	movw	lr, #65280	; 0xff00
   21674:	mov	r4, #0
   21678:	movt	lr, #3
   2167c:	ldrb	r0, [sl]
   21680:	orr	r0, r0, #128	; 0x80
   21684:	strb	r0, [sl]
   21688:	ldr	r0, [sp, #16]
   2168c:	ldr	r5, [sp, #4]
   21690:	tst	r6, #512	; 0x200
   21694:	beq	215dc <__assert_fail@plt+0x1012c>
   21698:	subs	r1, r9, r4
   2169c:	bmi	216b8 <__assert_fail@plt+0x10208>
   216a0:	ldr	r2, [r8, #8]
   216a4:	cmp	r2, r1
   216a8:	subgt	r2, r2, #1
   216ac:	strgt	r2, [r8, #8]
   216b0:	cmpgt	r2, r1
   216b4:	bgt	216cc <__assert_fail@plt+0x1021c>
   216b8:	add	r4, r4, #1
   216bc:	add	r9, r9, #1
   216c0:	cmp	r9, r3
   216c4:	blt	21550 <__assert_fail@plt+0x100a0>
   216c8:	b	21700 <__assert_fail@plt+0x10250>
   216cc:	ldr	r2, [r8, #12]
   216d0:	add	r3, r2, r1, lsl #2
   216d4:	ldr	r3, [r3, #4]
   216d8:	str	r3, [r2, r1, lsl #2]
   216dc:	add	r1, r1, #1
   216e0:	ldr	r3, [r8, #8]
   216e4:	cmp	r1, r3
   216e8:	blt	216d0 <__assert_fail@plt+0x10220>
   216ec:	ldr	r3, [ip, #4]
   216f0:	add	r4, r4, #1
   216f4:	add	r9, r9, #1
   216f8:	cmp	r9, r3
   216fc:	blt	21550 <__assert_fail@plt+0x100a0>
   21700:	mov	r1, r8
   21704:	mov	r2, r7
   21708:	bl	21768 <__assert_fail@plt+0x102b8>
   2170c:	cmp	r0, #0
   21710:	bne	2172c <__assert_fail@plt+0x1027c>
   21714:	mov	r0, r8
   21718:	sub	sp, fp, #28
   2171c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21720:	mov	r0, #0
   21724:	str	r0, [sl]
   21728:	str	r0, [r5]
   2172c:	mov	r0, r8
   21730:	bl	1a760 <__assert_fail@plt+0x92b0>
   21734:	ldr	r1, [sp]
   21738:	mov	r0, #12
   2173c:	mov	r8, #0
   21740:	str	r0, [r1]
   21744:	mov	r0, r8
   21748:	sub	sp, fp, #28
   2174c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21750:	mov	r0, #0
   21754:	str	r0, [r8, #4]
   21758:	str	r0, [r8, #8]
   2175c:	mov	r0, r8
   21760:	bl	2bc28 <__assert_fail@plt+0x1a778>
   21764:	b	21734 <__assert_fail@plt+0x10284>
   21768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2176c:	add	fp, sp, #28
   21770:	sub	sp, sp, #4
   21774:	str	r2, [r1]
   21778:	mov	r4, r1
   2177c:	mov	r7, r0
   21780:	mov	r0, #0
   21784:	mov	r9, r2
   21788:	ldr	r1, [r1, #8]
   2178c:	str	r1, [r4, #16]
   21790:	str	r0, [r4, #20]
   21794:	lsl	r0, r1, #2
   21798:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2179c:	mov	r8, #12
   217a0:	cmp	r0, #0
   217a4:	str	r0, [r4, #24]
   217a8:	beq	21870 <__assert_fail@plt+0x103c0>
   217ac:	ldr	r1, [r4, #8]
   217b0:	cmp	r1, #1
   217b4:	blt	21830 <__assert_fail@plt+0x10380>
   217b8:	mov	r5, #0
   217bc:	mov	sl, #2
   217c0:	b	217e0 <__assert_fail@plt+0x10330>
   217c4:	add	r2, r1, #1
   217c8:	str	r2, [r4, #20]
   217cc:	str	r6, [r0, r1, lsl #2]
   217d0:	ldr	r1, [r4, #8]
   217d4:	add	r5, r5, #1
   217d8:	cmp	r5, r1
   217dc:	bge	21830 <__assert_fail@plt+0x10380>
   217e0:	ldr	r2, [r4, #12]
   217e4:	ldr	r6, [r2, r5, lsl #2]
   217e8:	ldr	r2, [r7]
   217ec:	add	r2, r2, r6, lsl #3
   217f0:	ldrb	r2, [r2, #4]
   217f4:	tst	r2, #8
   217f8:	bne	217d4 <__assert_fail@plt+0x10324>
   217fc:	ldr	r2, [r4, #16]
   21800:	ldr	r1, [r4, #20]
   21804:	cmp	r2, r1
   21808:	bne	217c4 <__assert_fail@plt+0x10314>
   2180c:	add	r1, sl, r2, lsl #1
   21810:	str	r1, [r4, #16]
   21814:	lsl	r1, r1, #2
   21818:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   2181c:	cmp	r0, #0
   21820:	beq	21870 <__assert_fail@plt+0x103c0>
   21824:	str	r0, [r4, #24]
   21828:	ldr	r1, [r4, #20]
   2182c:	b	217c4 <__assert_fail@plt+0x10314>
   21830:	ldr	r1, [r7, #68]	; 0x44
   21834:	ldr	r0, [r7, #32]
   21838:	and	r1, r1, r9
   2183c:	mov	r5, r0
   21840:	add	r2, r1, r1, lsl #1
   21844:	ldr	r1, [r5, r2, lsl #2]!
   21848:	mov	r6, r5
   2184c:	ldr	r3, [r6, #4]!
   21850:	cmp	r3, r1
   21854:	ble	2187c <__assert_fail@plt+0x103cc>
   21858:	add	r0, r0, r2, lsl #2
   2185c:	ldr	r0, [r0, #8]
   21860:	add	r2, r1, #1
   21864:	mov	r8, #0
   21868:	str	r2, [r5]
   2186c:	str	r4, [r0, r1, lsl #2]
   21870:	mov	r0, r8
   21874:	sub	sp, fp, #28
   21878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2187c:	add	r7, r0, r2, lsl #2
   21880:	mov	r2, #2
   21884:	add	r9, r2, r1, lsl #1
   21888:	ldr	r0, [r7, #8]!
   2188c:	lsl	r1, r9, #2
   21890:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   21894:	cmp	r0, #0
   21898:	beq	21870 <__assert_fail@plt+0x103c0>
   2189c:	str	r0, [r7]
   218a0:	str	r9, [r6]
   218a4:	ldr	r1, [r5]
   218a8:	b	21860 <__assert_fail@plt+0x103b0>
   218ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218b0:	add	fp, sp, #28
   218b4:	sub	sp, sp, #36	; 0x24
   218b8:	mov	r4, r0
   218bc:	ldr	r0, [r0, #24]
   218c0:	mov	r6, r2
   218c4:	mov	r9, r1
   218c8:	cmp	r0, r1
   218cc:	ble	21ae4 <__assert_fail@plt+0x10634>
   218d0:	ldr	r0, [r4, #80]	; 0x50
   218d4:	mov	r1, #4
   218d8:	cmp	r0, #2
   218dc:	movge	r0, #0
   218e0:	strge	r0, [r4, #16]
   218e4:	strge	r0, [r4, #20]
   218e8:	mov	r0, #0
   218ec:	tst	r6, #1
   218f0:	strb	r0, [r4, #76]	; 0x4c
   218f4:	str	r0, [r4, #24]
   218f8:	str	r0, [r4, #28]
   218fc:	str	r0, [r4, #32]
   21900:	movweq	r1, #6
   21904:	ldr	r2, [r4, #44]	; 0x2c
   21908:	ldr	r3, [r4, #52]	; 0x34
   2190c:	str	r2, [r4, #48]	; 0x30
   21910:	str	r3, [r4, #56]	; 0x38
   21914:	str	r1, [r4, #60]	; 0x3c
   21918:	ldrb	r1, [r4, #75]	; 0x4b
   2191c:	cmp	r1, #0
   21920:	bne	2192c <__assert_fail@plt+0x1047c>
   21924:	ldr	r1, [r4]
   21928:	str	r1, [r4, #4]
   2192c:	mov	r5, r9
   21930:	cmp	r5, #0
   21934:	beq	21a60 <__assert_fail@plt+0x105b0>
   21938:	ldr	r1, [r4, #32]
   2193c:	cmp	r5, r1
   21940:	bge	21af4 <__assert_fail@plt+0x10644>
   21944:	ldrb	r0, [r4, #76]	; 0x4c
   21948:	cmp	r0, #0
   2194c:	bne	21ca8 <__assert_fail@plt+0x107f8>
   21950:	cmp	r5, #0
   21954:	ble	21990 <__assert_fail@plt+0x104e0>
   21958:	ldr	r1, [r4, #48]	; 0x30
   2195c:	sub	r0, r5, #1
   21960:	cmp	r1, r0
   21964:	beq	21d70 <__assert_fail@plt+0x108c0>
   21968:	ldr	r1, [r4, #80]	; 0x50
   2196c:	cmp	r1, #2
   21970:	blt	219a8 <__assert_fail@plt+0x104f8>
   21974:	ldr	r1, [r4, #8]
   21978:	ldr	r6, [r1, r0, lsl #2]
   2197c:	cmn	r6, #1
   21980:	bne	219d8 <__assert_fail@plt+0x10528>
   21984:	sub	r0, r0, #1
   21988:	cmn	r0, #1
   2198c:	bne	21978 <__assert_fail@plt+0x104c8>
   21990:	ldr	r1, [r4, #60]	; 0x3c
   21994:	str	r1, [r4, #60]	; 0x3c
   21998:	ldr	r0, [r4, #80]	; 0x50
   2199c:	cmp	r0, #2
   219a0:	bge	21a10 <__assert_fail@plt+0x10560>
   219a4:	b	21a28 <__assert_fail@plt+0x10578>
   219a8:	ldr	r1, [r4, #4]
   219ac:	ldr	r2, [r4, #68]	; 0x44
   219b0:	ldrb	r0, [r1, r0]
   219b4:	ubfx	r1, r0, #5, #3
   219b8:	and	r3, r0, #31
   219bc:	ldr	r2, [r2, r1, lsl #2]
   219c0:	mov	r1, #1
   219c4:	tst	r2, r1, lsl r3
   219c8:	moveq	r1, #0
   219cc:	cmpeq	r0, #10
   219d0:	bne	21a00 <__assert_fail@plt+0x10550>
   219d4:	b	219f0 <__assert_fail@plt+0x10540>
   219d8:	ldrb	r0, [r4, #78]	; 0x4e
   219dc:	cmp	r0, #0
   219e0:	bne	21f3c <__assert_fail@plt+0x10a8c>
   219e4:	mov	r1, #0
   219e8:	cmp	r6, #10
   219ec:	bne	21a00 <__assert_fail@plt+0x10550>
   219f0:	ldrb	r0, [r4, #77]	; 0x4d
   219f4:	cmp	r0, #0
   219f8:	movwne	r0, #1
   219fc:	lsl	r1, r0, #1
   21a00:	str	r1, [r4, #60]	; 0x3c
   21a04:	ldr	r0, [r4, #80]	; 0x50
   21a08:	cmp	r0, #2
   21a0c:	blt	21a28 <__assert_fail@plt+0x10578>
   21a10:	ldr	r2, [r4, #28]
   21a14:	ldr	r0, [r4, #8]
   21a18:	sub	r2, r2, r5
   21a1c:	add	r1, r0, r5, lsl #2
   21a20:	lsl	r2, r2, #2
   21a24:	bl	11228 <memmove@plt>
   21a28:	ldrb	r0, [r4, #75]	; 0x4b
   21a2c:	cmp	r0, #0
   21a30:	bne	21d58 <__assert_fail@plt+0x108a8>
   21a34:	ldr	r0, [r4, #28]
   21a38:	ldr	r1, [r4, #32]
   21a3c:	sub	r0, r0, r5
   21a40:	sub	r1, r1, r5
   21a44:	str	r0, [r4, #28]
   21a48:	str	r1, [r4, #32]
   21a4c:	ldrb	r0, [r4, #75]	; 0x4b
   21a50:	cmp	r0, #0
   21a54:	ldreq	r0, [r4, #4]
   21a58:	addeq	r0, r0, r5
   21a5c:	streq	r0, [r4, #4]
   21a60:	str	r9, [r4, #24]
   21a64:	ldr	r0, [r4, #48]	; 0x30
   21a68:	ldr	r3, [r4, #80]	; 0x50
   21a6c:	ldr	r1, [r4, #56]	; 0x38
   21a70:	sub	r2, r0, r5
   21a74:	cmp	r3, #2
   21a78:	sub	r0, r1, r5
   21a7c:	str	r2, [r4, #48]	; 0x30
   21a80:	str	r0, [r4, #56]	; 0x38
   21a84:	blt	21aac <__assert_fail@plt+0x105fc>
   21a88:	ldrb	r0, [r4, #72]	; 0x48
   21a8c:	cmp	r0, #0
   21a90:	beq	21acc <__assert_fail@plt+0x1061c>
   21a94:	mov	r0, r4
   21a98:	bl	1a7c0 <__assert_fail@plt+0x9310>
   21a9c:	cmp	r0, #0
   21aa0:	beq	21ad4 <__assert_fail@plt+0x10624>
   21aa4:	sub	sp, fp, #28
   21aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aac:	ldrb	r0, [r4, #75]	; 0x4b
   21ab0:	cmp	r0, #0
   21ab4:	bne	21d8c <__assert_fail@plt+0x108dc>
   21ab8:	str	r2, [r4, #28]
   21abc:	mov	r0, #0
   21ac0:	str	r0, [r4, #40]	; 0x28
   21ac4:	sub	sp, fp, #28
   21ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21acc:	mov	r0, r4
   21ad0:	bl	1b0e0 <__assert_fail@plt+0x9c30>
   21ad4:	mov	r0, #0
   21ad8:	str	r0, [r4, #40]	; 0x28
   21adc:	sub	sp, fp, #28
   21ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ae4:	sub	r5, r9, r0
   21ae8:	cmp	r5, #0
   21aec:	bne	21938 <__assert_fail@plt+0x10488>
   21af0:	b	21a60 <__assert_fail@plt+0x105b0>
   21af4:	ldrb	r2, [r4, #76]	; 0x4c
   21af8:	ldr	lr, [r4, #28]
   21afc:	cmp	r2, #0
   21b00:	bne	220dc <__assert_fail@plt+0x10c2c>
   21b04:	mov	r2, #0
   21b08:	str	r2, [r4, #28]
   21b0c:	ldr	r3, [r4, #80]	; 0x50
   21b10:	cmp	r3, #2
   21b14:	blt	21dfc <__assert_fail@plt+0x1094c>
   21b18:	ldrb	r2, [r4, #73]	; 0x49
   21b1c:	cmp	r2, #0
   21b20:	beq	21bdc <__assert_fail@plt+0x1072c>
   21b24:	ldr	r7, [r4]
   21b28:	sub	r3, r5, r3
   21b2c:	add	ip, r7, r0
   21b30:	add	r3, ip, r3
   21b34:	add	r8, ip, r5
   21b38:	cmp	r3, r7
   21b3c:	movcc	r3, r7
   21b40:	mov	r7, r8
   21b44:	sub	r7, r7, #1
   21b48:	cmp	r7, r3
   21b4c:	bcc	21bdc <__assert_fail@plt+0x1072c>
   21b50:	ldrb	r2, [r7]
   21b54:	and	r2, r2, #192	; 0xc0
   21b58:	cmp	r2, #128	; 0x80
   21b5c:	beq	21b44 <__assert_fail@plt+0x10694>
   21b60:	ldr	r0, [r4, #48]	; 0x30
   21b64:	mov	sl, lr
   21b68:	mov	r1, r7
   21b6c:	add	r0, ip, r0
   21b70:	sub	r2, r0, r7
   21b74:	ldr	r0, [r4, #64]	; 0x40
   21b78:	cmp	r0, #0
   21b7c:	bne	222a8 <__assert_fail@plt+0x10df8>
   21b80:	mov	r0, #0
   21b84:	add	r3, sp, #24
   21b88:	str	r0, [sp, #28]
   21b8c:	str	r0, [sp, #24]
   21b90:	add	r0, sp, #20
   21b94:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   21b98:	sub	r1, r8, r7
   21b9c:	mvn	r7, #0
   21ba0:	cmp	r0, r1
   21ba4:	bcc	21bc8 <__assert_fail@plt+0x10718>
   21ba8:	cmn	r0, #3
   21bac:	bhi	21bc8 <__assert_fail@plt+0x10718>
   21bb0:	mov	r2, #0
   21bb4:	sub	r0, r0, r1
   21bb8:	str	r2, [r4, #16]
   21bbc:	str	r2, [r4, #20]
   21bc0:	str	r0, [r4, #28]
   21bc4:	ldr	r7, [sp, #20]
   21bc8:	cmn	r7, #1
   21bcc:	bne	21c8c <__assert_fail@plt+0x107dc>
   21bd0:	ldr	r0, [r4, #24]
   21bd4:	ldr	r1, [r4, #32]
   21bd8:	mov	lr, sl
   21bdc:	add	r8, r1, r0
   21be0:	cmp	r8, r9
   21be4:	bge	21f5c <__assert_fail@plt+0x10aac>
   21be8:	add	sl, r4, #16
   21bec:	str	lr, [sp]
   21bf0:	ldr	r0, [r4]
   21bf4:	ldr	r2, [r4, #44]	; 0x2c
   21bf8:	mov	r3, sl
   21bfc:	add	r1, r0, r8
   21c00:	ldr	r0, [sl]
   21c04:	sub	r7, r2, r8
   21c08:	mov	r2, r7
   21c0c:	str	r0, [sp, #8]
   21c10:	ldr	r0, [sl, #4]
   21c14:	str	r0, [sp, #4]
   21c18:	add	r0, sp, #24
   21c1c:	bl	2bc88 <__assert_fail@plt+0x1a7d8>
   21c20:	sub	r1, r0, #1
   21c24:	cmn	r1, #3
   21c28:	bcs	21c40 <__assert_fail@plt+0x10790>
   21c2c:	ldr	r7, [sp, #24]
   21c30:	add	r8, r0, r8
   21c34:	cmp	r8, r9
   21c38:	blt	21bf0 <__assert_fail@plt+0x10740>
   21c3c:	b	21c78 <__assert_fail@plt+0x107c8>
   21c40:	ldr	r3, [sp, #4]
   21c44:	ldr	r2, [sp, #8]
   21c48:	cmp	r7, #0
   21c4c:	mov	r1, #0
   21c50:	cmpne	r0, #0
   21c54:	beq	21c60 <__assert_fail@plt+0x107b0>
   21c58:	ldr	r0, [r4]
   21c5c:	ldrb	r1, [r0, r8]
   21c60:	stm	sl, {r2, r3}
   21c64:	mov	r0, #1
   21c68:	mov	r7, r1
   21c6c:	add	r8, r0, r8
   21c70:	cmp	r8, r9
   21c74:	blt	21bf0 <__assert_fail@plt+0x10740>
   21c78:	ldr	lr, [sp]
   21c7c:	sub	r0, r8, r9
   21c80:	cmn	r7, #1
   21c84:	str	r0, [r4, #28]
   21c88:	beq	21f64 <__assert_fail@plt+0x10ab4>
   21c8c:	ldrb	r0, [r4, #78]	; 0x4e
   21c90:	cmp	r0, #0
   21c94:	bne	22278 <__assert_fail@plt+0x10dc8>
   21c98:	mov	r1, #0
   21c9c:	cmp	r7, #10
   21ca0:	beq	220b0 <__assert_fail@plt+0x10c00>
   21ca4:	b	220c0 <__assert_fail@plt+0x10c10>
   21ca8:	ldr	ip, [r4, #12]
   21cac:	ldr	r0, [r4, #28]
   21cb0:	mov	r2, #0
   21cb4:	b	21cc4 <__assert_fail@plt+0x10814>
   21cb8:	cmp	r2, r3
   21cbc:	mov	r0, r3
   21cc0:	bge	21cf0 <__assert_fail@plt+0x10840>
   21cc4:	add	r1, r2, r0
   21cc8:	add	r1, r1, r1, lsr #31
   21ccc:	asr	r1, r1, #1
   21cd0:	ldr	r7, [ip, r1, lsl #2]
   21cd4:	mov	r3, r1
   21cd8:	cmp	r7, r5
   21cdc:	bgt	21cb8 <__assert_fail@plt+0x10808>
   21ce0:	bge	21cf0 <__assert_fail@plt+0x10840>
   21ce4:	add	r2, r1, #1
   21ce8:	mov	r3, r0
   21cec:	b	21cb8 <__assert_fail@plt+0x10808>
   21cf0:	cmp	r7, r5
   21cf4:	mov	r0, #0
   21cf8:	movwlt	r0, #1
   21cfc:	add	r7, r1, r0
   21d00:	cmp	r7, #0
   21d04:	ble	21d40 <__assert_fail@plt+0x10890>
   21d08:	ldr	r1, [r4, #48]	; 0x30
   21d0c:	sub	r0, r7, #1
   21d10:	cmp	r1, r0
   21d14:	beq	22104 <__assert_fail@plt+0x10c54>
   21d18:	ldr	r1, [r4, #80]	; 0x50
   21d1c:	cmp	r1, #2
   21d20:	blt	21e48 <__assert_fail@plt+0x10998>
   21d24:	ldr	r1, [r4, #8]
   21d28:	ldr	r6, [r1, r0, lsl #2]
   21d2c:	cmn	r6, #1
   21d30:	bne	21e78 <__assert_fail@plt+0x109c8>
   21d34:	sub	r0, r0, #1
   21d38:	cmn	r0, #1
   21d3c:	bne	21d28 <__assert_fail@plt+0x10878>
   21d40:	ldr	r1, [r4, #60]	; 0x3c
   21d44:	str	r1, [r4, #60]	; 0x3c
   21d48:	cmp	r7, r5
   21d4c:	ldr	r2, [r4, #28]
   21d50:	beq	21eb0 <__assert_fail@plt+0x10a00>
   21d54:	b	2211c <__assert_fail@plt+0x10c6c>
   21d58:	ldr	r2, [r4, #28]
   21d5c:	ldr	r0, [r4, #4]
   21d60:	add	r1, r0, r5
   21d64:	sub	r2, r2, r5
   21d68:	bl	11228 <memmove@plt>
   21d6c:	b	21a34 <__assert_fail@plt+0x10584>
   21d70:	and	r0, r6, #2
   21d74:	eor	r1, r0, #10
   21d78:	str	r1, [r4, #60]	; 0x3c
   21d7c:	ldr	r0, [r4, #80]	; 0x50
   21d80:	cmp	r0, #2
   21d84:	bge	21a10 <__assert_fail@plt+0x10560>
   21d88:	b	21a28 <__assert_fail@plt+0x10578>
   21d8c:	ldrb	r0, [r4, #72]	; 0x48
   21d90:	cmp	r0, #0
   21d94:	beq	21fac <__assert_fail@plt+0x10afc>
   21d98:	ldr	r6, [r4, #36]	; 0x24
   21d9c:	ldr	r5, [r4, #28]
   21da0:	cmp	r6, r2
   21da4:	movgt	r6, r2
   21da8:	cmp	r5, r6
   21dac:	bge	22038 <__assert_fail@plt+0x10b88>
   21db0:	bl	11348 <__ctype_toupper_loc@plt>
   21db4:	ldr	r1, [r4]
   21db8:	ldr	r2, [r4, #64]	; 0x40
   21dbc:	add	r1, r1, r9
   21dc0:	cmp	r2, #0
   21dc4:	ldrb	r1, [r1, r5]
   21dc8:	bne	21df4 <__assert_fail@plt+0x10944>
   21dcc:	ldr	r2, [r0]
   21dd0:	ldr	r1, [r2, r1, lsl #2]
   21dd4:	ldr	r2, [r4, #4]
   21dd8:	strb	r1, [r2, r5]
   21ddc:	add	r1, r5, #1
   21de0:	cmp	r1, r6
   21de4:	bge	22034 <__assert_fail@plt+0x10b84>
   21de8:	ldr	r9, [r4, #24]
   21dec:	mov	r5, r1
   21df0:	b	21db4 <__assert_fail@plt+0x10904>
   21df4:	ldrb	r1, [r2, r1]
   21df8:	b	21dcc <__assert_fail@plt+0x1091c>
   21dfc:	ldr	r3, [r4]
   21e00:	add	r0, r5, r0
   21e04:	ldr	r1, [r4, #64]	; 0x40
   21e08:	add	r0, r0, r3
   21e0c:	cmp	r1, #0
   21e10:	ldrb	r0, [r0, #-1]
   21e14:	str	r2, [r4, #32]
   21e18:	ldrbne	r0, [r1, r0]
   21e1c:	ldr	r1, [r4, #68]	; 0x44
   21e20:	ubfx	r2, r0, #5, #3
   21e24:	and	r3, r0, #31
   21e28:	ldr	r2, [r1, r2, lsl #2]
   21e2c:	mov	r1, #1
   21e30:	tst	r2, r1, lsl r3
   21e34:	moveq	r1, #0
   21e38:	cmpeq	r0, #10
   21e3c:	beq	22084 <__assert_fail@plt+0x10bd4>
   21e40:	str	r1, [r4, #60]	; 0x3c
   21e44:	b	21a4c <__assert_fail@plt+0x1059c>
   21e48:	ldr	r1, [r4, #4]
   21e4c:	ldr	r2, [r4, #68]	; 0x44
   21e50:	ldrb	r0, [r1, r0]
   21e54:	ubfx	r1, r0, #5, #3
   21e58:	and	r3, r0, #31
   21e5c:	ldr	r2, [r2, r1, lsl #2]
   21e60:	mov	r1, #1
   21e64:	tst	r2, r1, lsl r3
   21e68:	moveq	r1, #0
   21e6c:	cmpeq	r0, #10
   21e70:	bne	21ea0 <__assert_fail@plt+0x109f0>
   21e74:	b	21e90 <__assert_fail@plt+0x109e0>
   21e78:	ldrb	r0, [r4, #78]	; 0x4e
   21e7c:	cmp	r0, #0
   21e80:	bne	22258 <__assert_fail@plt+0x10da8>
   21e84:	mov	r1, #0
   21e88:	cmp	r6, #10
   21e8c:	bne	21ea0 <__assert_fail@plt+0x109f0>
   21e90:	ldrb	r0, [r4, #77]	; 0x4d
   21e94:	cmp	r0, #0
   21e98:	movwne	r0, #1
   21e9c:	lsl	r1, r0, #1
   21ea0:	str	r1, [r4, #60]	; 0x3c
   21ea4:	cmp	r7, r5
   21ea8:	ldr	r2, [r4, #28]
   21eac:	bne	2211c <__assert_fail@plt+0x10c6c>
   21eb0:	cmp	r2, r5
   21eb4:	ble	2211c <__assert_fail@plt+0x10c6c>
   21eb8:	ldr	r0, [r4, #12]
   21ebc:	ldr	r0, [r0, r5, lsl #2]
   21ec0:	cmp	r0, r5
   21ec4:	bne	2211c <__assert_fail@plt+0x10c6c>
   21ec8:	ldr	r0, [r4, #8]
   21ecc:	sub	r2, r2, r5
   21ed0:	lsl	r2, r2, #2
   21ed4:	add	r1, r0, r5, lsl #2
   21ed8:	bl	11228 <memmove@plt>
   21edc:	ldr	r2, [r4, #28]
   21ee0:	ldr	r0, [r4, #4]
   21ee4:	add	r1, r0, r5
   21ee8:	sub	r2, r2, r5
   21eec:	bl	11228 <memmove@plt>
   21ef0:	ldr	r0, [r4, #28]
   21ef4:	ldr	r1, [r4, #32]
   21ef8:	sub	r0, r0, r5
   21efc:	sub	r1, r1, r5
   21f00:	cmp	r0, #1
   21f04:	str	r0, [r4, #28]
   21f08:	str	r1, [r4, #32]
   21f0c:	blt	21a4c <__assert_fail@plt+0x1059c>
   21f10:	ldr	r0, [r4, #12]
   21f14:	mov	r2, #0
   21f18:	add	r1, r0, r5, lsl #2
   21f1c:	ldr	r3, [r1, r2, lsl #2]
   21f20:	sub	r3, r3, r5
   21f24:	str	r3, [r0, r2, lsl #2]
   21f28:	add	r2, r2, #1
   21f2c:	ldr	r3, [r4, #28]
   21f30:	cmp	r2, r3
   21f34:	blt	21f1c <__assert_fail@plt+0x10a6c>
   21f38:	b	21a4c <__assert_fail@plt+0x1059c>
   21f3c:	mov	r0, r6
   21f40:	bl	113b4 <iswalnum@plt>
   21f44:	mov	r1, #1
   21f48:	cmp	r6, #95	; 0x5f
   21f4c:	beq	21a00 <__assert_fail@plt+0x10550>
   21f50:	cmp	r0, #0
   21f54:	beq	219e4 <__assert_fail@plt+0x10534>
   21f58:	b	21a00 <__assert_fail@plt+0x10550>
   21f5c:	sub	r0, r8, r9
   21f60:	str	r0, [r4, #28]
   21f64:	cmp	lr, #0
   21f68:	ble	21fa4 <__assert_fail@plt+0x10af4>
   21f6c:	ldr	r1, [r4, #48]	; 0x30
   21f70:	sub	r0, lr, #1
   21f74:	cmp	r1, r0
   21f78:	beq	2224c <__assert_fail@plt+0x10d9c>
   21f7c:	ldr	r1, [r4, #80]	; 0x50
   21f80:	cmp	r1, #2
   21f84:	blt	22050 <__assert_fail@plt+0x10ba0>
   21f88:	ldr	r1, [r4, #8]
   21f8c:	ldr	r6, [r1, r0, lsl #2]
   21f90:	cmn	r6, #1
   21f94:	bne	22098 <__assert_fail@plt+0x10be8>
   21f98:	sub	r0, r0, #1
   21f9c:	cmn	r0, #1
   21fa0:	bne	21f8c <__assert_fail@plt+0x10adc>
   21fa4:	ldr	r1, [r4, #60]	; 0x3c
   21fa8:	b	220c0 <__assert_fail@plt+0x10c10>
   21fac:	ldr	r3, [r4, #64]	; 0x40
   21fb0:	cmp	r3, #0
   21fb4:	beq	21ad4 <__assert_fail@plt+0x10624>
   21fb8:	ldr	r1, [r4, #36]	; 0x24
   21fbc:	ldr	r0, [r4, #28]
   21fc0:	cmp	r1, r2
   21fc4:	movgt	r1, r2
   21fc8:	cmp	r0, r1
   21fcc:	bge	2201c <__assert_fail@plt+0x10b6c>
   21fd0:	ldr	r7, [r4]
   21fd4:	add	r2, r0, r9
   21fd8:	ldr	r6, [r4, #4]
   21fdc:	ldrb	r2, [r7, r2]
   21fe0:	ldrb	r2, [r3, r2]
   21fe4:	strb	r2, [r6, r0]
   21fe8:	add	r0, r0, #1
   21fec:	cmp	r0, r1
   21ff0:	bge	2201c <__assert_fail@plt+0x10b6c>
   21ff4:	ldr	r7, [r4, #24]
   21ff8:	ldm	r4, {r2, r3}
   21ffc:	ldr	r6, [r4, #64]	; 0x40
   22000:	add	r2, r2, r7
   22004:	ldrb	r2, [r2, r0]
   22008:	ldrb	r2, [r6, r2]
   2200c:	strb	r2, [r3, r0]
   22010:	add	r0, r0, #1
   22014:	cmp	r0, r1
   22018:	blt	21ff4 <__assert_fail@plt+0x10b44>
   2201c:	str	r0, [r4, #28]
   22020:	str	r0, [r4, #32]
   22024:	mov	r0, #0
   22028:	str	r0, [r4, #40]	; 0x28
   2202c:	sub	sp, fp, #28
   22030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22034:	add	r5, r5, #1
   22038:	str	r5, [r4, #28]
   2203c:	str	r5, [r4, #32]
   22040:	mov	r0, #0
   22044:	str	r0, [r4, #40]	; 0x28
   22048:	sub	sp, fp, #28
   2204c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22050:	ldr	r1, [r4, #4]
   22054:	ldr	r2, [r4, #68]	; 0x44
   22058:	ldrb	r0, [r1, r0]
   2205c:	ubfx	r1, r0, #5, #3
   22060:	and	r3, r0, #31
   22064:	ldr	r2, [r2, r1, lsl #2]
   22068:	mov	r1, #1
   2206c:	tst	r2, r1, lsl r3
   22070:	bne	220c0 <__assert_fail@plt+0x10c10>
   22074:	mov	r1, #0
   22078:	cmp	r0, #10
   2207c:	beq	220b0 <__assert_fail@plt+0x10c00>
   22080:	b	220c0 <__assert_fail@plt+0x10c10>
   22084:	ldrb	r0, [r4, #77]	; 0x4d
   22088:	cmp	r0, #0
   2208c:	movwne	r0, #1
   22090:	lsl	r1, r0, #1
   22094:	b	21e40 <__assert_fail@plt+0x10990>
   22098:	ldrb	r0, [r4, #78]	; 0x4e
   2209c:	cmp	r0, #0
   220a0:	bne	222e4 <__assert_fail@plt+0x10e34>
   220a4:	mov	r1, #0
   220a8:	cmp	r6, #10
   220ac:	bne	220c0 <__assert_fail@plt+0x10c10>
   220b0:	ldrb	r0, [r4, #77]	; 0x4d
   220b4:	cmp	r0, #0
   220b8:	movwne	r0, #1
   220bc:	lsl	r1, r0, #1
   220c0:	str	r1, [r4, #60]	; 0x3c
   220c4:	mov	r0, #0
   220c8:	ldr	r2, [r4, #28]
   220cc:	cmp	r2, #0
   220d0:	bne	22204 <__assert_fail@plt+0x10d54>
   220d4:	str	r0, [r4, #32]
   220d8:	b	21a4c <__assert_fail@plt+0x1059c>
   220dc:	mov	r2, #0
   220e0:	strb	r2, [r4, #76]	; 0x4c
   220e4:	sub	r2, r5, r9
   220e8:	ldr	r3, [r4, #44]	; 0x2c
   220ec:	ldr	r7, [r4, #52]	; 0x34
   220f0:	add	r3, r2, r3
   220f4:	add	r2, r2, r7
   220f8:	str	r3, [r4, #48]	; 0x30
   220fc:	str	r2, [r4, #56]	; 0x38
   22100:	b	21b04 <__assert_fail@plt+0x10654>
   22104:	and	r0, r6, #2
   22108:	eor	r1, r0, #10
   2210c:	str	r1, [r4, #60]	; 0x3c
   22110:	cmp	r7, r5
   22114:	ldr	r2, [r4, #28]
   22118:	beq	21eb0 <__assert_fail@plt+0x10a00>
   2211c:	mov	r0, #0
   22120:	strb	r0, [r4, #76]	; 0x4c
   22124:	sub	r0, r5, r9
   22128:	ldr	r1, [r4, #44]	; 0x2c
   2212c:	ldr	r3, [r4, #52]	; 0x34
   22130:	add	r1, r0, r1
   22134:	add	r0, r0, r3
   22138:	str	r1, [r4, #48]	; 0x30
   2213c:	sub	r1, r7, #1
   22140:	str	r0, [r4, #56]	; 0x38
   22144:	add	r0, r1, #1
   22148:	cmp	r0, #1
   2214c:	blt	22164 <__assert_fail@plt+0x10cb4>
   22150:	ldr	r3, [r4, #12]
   22154:	ldr	r3, [r3, r1, lsl #2]
   22158:	sub	r1, r1, #1
   2215c:	cmp	r3, r5
   22160:	beq	22144 <__assert_fail@plt+0x10c94>
   22164:	cmp	r0, r2
   22168:	bge	2218c <__assert_fail@plt+0x10cdc>
   2216c:	ldr	r1, [r4, #8]
   22170:	ldr	r3, [r1, r0, lsl #2]
   22174:	cmn	r3, #1
   22178:	bne	2218c <__assert_fail@plt+0x10cdc>
   2217c:	add	r0, r0, #1
   22180:	cmp	r2, r0
   22184:	bne	22170 <__assert_fail@plt+0x10cc0>
   22188:	b	22194 <__assert_fail@plt+0x10ce4>
   2218c:	cmp	r0, r2
   22190:	bne	221a4 <__assert_fail@plt+0x10cf4>
   22194:	mov	r0, #0
   22198:	str	r0, [r4, #28]
   2219c:	str	r0, [r4, #32]
   221a0:	b	21a4c <__assert_fail@plt+0x1059c>
   221a4:	ldr	r1, [r4, #12]
   221a8:	ldr	r0, [r1, r0, lsl #2]
   221ac:	subs	r2, r0, r5
   221b0:	str	r2, [r4, #28]
   221b4:	beq	221f8 <__assert_fail@plt+0x10d48>
   221b8:	cmp	r2, #1
   221bc:	blt	221e0 <__assert_fail@plt+0x10d30>
   221c0:	ldr	r0, [r4, #8]
   221c4:	mov	r1, #0
   221c8:	mvn	r3, #0
   221cc:	str	r3, [r0, r1, lsl #2]
   221d0:	add	r1, r1, #1
   221d4:	ldr	r2, [r4, #28]
   221d8:	cmp	r1, r2
   221dc:	blt	221cc <__assert_fail@plt+0x10d1c>
   221e0:	ldr	r0, [r4, #4]
   221e4:	mov	r1, #255	; 0xff
   221e8:	bl	113cc <memset@plt>
   221ec:	ldr	r0, [r4, #28]
   221f0:	str	r0, [r4, #32]
   221f4:	b	21a4c <__assert_fail@plt+0x1059c>
   221f8:	mov	r0, #0
   221fc:	str	r0, [r4, #32]
   22200:	b	21a4c <__assert_fail@plt+0x1059c>
   22204:	cmp	r2, #1
   22208:	blt	2222c <__assert_fail@plt+0x10d7c>
   2220c:	ldr	r0, [r4, #8]
   22210:	mov	r1, #0
   22214:	mvn	r3, #0
   22218:	str	r3, [r0, r1, lsl #2]
   2221c:	add	r1, r1, #1
   22220:	ldr	r2, [r4, #28]
   22224:	cmp	r1, r2
   22228:	blt	22218 <__assert_fail@plt+0x10d68>
   2222c:	ldrb	r0, [r4, #75]	; 0x4b
   22230:	cmp	r0, #0
   22234:	beq	2229c <__assert_fail@plt+0x10dec>
   22238:	ldr	r0, [r4, #4]
   2223c:	mov	r1, #255	; 0xff
   22240:	bl	113cc <memset@plt>
   22244:	ldr	r0, [r4, #28]
   22248:	b	220d4 <__assert_fail@plt+0x10c24>
   2224c:	and	r0, r6, #2
   22250:	eor	r1, r0, #10
   22254:	b	220c0 <__assert_fail@plt+0x10c10>
   22258:	mov	r0, r6
   2225c:	bl	113b4 <iswalnum@plt>
   22260:	mov	r1, #1
   22264:	cmp	r6, #95	; 0x5f
   22268:	beq	21ea0 <__assert_fail@plt+0x109f0>
   2226c:	cmp	r0, #0
   22270:	beq	21e84 <__assert_fail@plt+0x109d4>
   22274:	b	21ea0 <__assert_fail@plt+0x109f0>
   22278:	mov	r0, r7
   2227c:	bl	113b4 <iswalnum@plt>
   22280:	mov	r1, #1
   22284:	cmp	r7, #95	; 0x5f
   22288:	beq	220c0 <__assert_fail@plt+0x10c10>
   2228c:	cmp	r0, #0
   22290:	mov	r2, r7
   22294:	beq	21c98 <__assert_fail@plt+0x107e8>
   22298:	b	220c0 <__assert_fail@plt+0x10c10>
   2229c:	mov	r0, r2
   222a0:	str	r2, [r4, #32]
   222a4:	b	21a4c <__assert_fail@plt+0x1059c>
   222a8:	cmp	r2, #1
   222ac:	blt	22304 <__assert_fail@plt+0x10e54>
   222b0:	cmp	r2, #6
   222b4:	mov	r1, r2
   222b8:	movge	r1, #6
   222bc:	sub	ip, r1, #1
   222c0:	add	r1, sp, #14
   222c4:	ldrb	r3, [r7, ip]
   222c8:	cmp	ip, #0
   222cc:	ldrb	r3, [r0, r3]
   222d0:	strb	r3, [r1, ip]
   222d4:	sub	r3, ip, #1
   222d8:	mov	ip, r3
   222dc:	bgt	222c4 <__assert_fail@plt+0x10e14>
   222e0:	b	21b80 <__assert_fail@plt+0x106d0>
   222e4:	mov	r0, r6
   222e8:	bl	113b4 <iswalnum@plt>
   222ec:	mov	r1, #1
   222f0:	cmp	r6, #95	; 0x5f
   222f4:	beq	220c0 <__assert_fail@plt+0x10c10>
   222f8:	cmp	r0, #0
   222fc:	beq	220a4 <__assert_fail@plt+0x10bf4>
   22300:	b	220c0 <__assert_fail@plt+0x10c10>
   22304:	add	r1, sp, #14
   22308:	b	21b80 <__assert_fail@plt+0x106d0>
   2230c:	push	{r4, r5, r6, sl, fp, lr}
   22310:	add	fp, sp, #16
   22314:	mov	r3, r2
   22318:	ldr	r2, [r0, #88]	; 0x58
   2231c:	mov	r5, r1
   22320:	mov	r4, r0
   22324:	mov	r1, r3
   22328:	bl	22564 <__assert_fail@plt+0x110b4>
   2232c:	ldr	r1, [r5, #8]
   22330:	cmp	r1, #1
   22334:	blt	224ac <__assert_fail@plt+0x10ffc>
   22338:	ldr	r3, [r5, #12]
   2233c:	ldr	r5, [r4, #84]	; 0x54
   22340:	movw	lr, #65280	; 0xff00
   22344:	and	ip, r0, #8
   22348:	and	r2, r0, #2
   2234c:	tst	r0, #1
   22350:	movt	lr, #3
   22354:	ldr	r5, [r5]
   22358:	bne	223b4 <__assert_fail@plt+0x10f04>
   2235c:	cmp	r2, #0
   22360:	bne	2240c <__assert_fail@plt+0x10f5c>
   22364:	mov	r2, #0
   22368:	b	22378 <__assert_fail@plt+0x10ec8>
   2236c:	add	r2, r2, #1
   22370:	cmp	r2, r1
   22374:	bge	224ac <__assert_fail@plt+0x10ffc>
   22378:	ldr	r0, [r3, r2, lsl #2]
   2237c:	add	r4, r5, r0, lsl #3
   22380:	ldr	r4, [r4, #4]
   22384:	uxtb	r6, r4
   22388:	cmp	r6, #2
   2238c:	bne	2236c <__assert_fail@plt+0x10ebc>
   22390:	tst	r4, lr
   22394:	beq	224b0 <__assert_fail@plt+0x11000>
   22398:	tst	r4, #9216	; 0x2400
   2239c:	bne	2236c <__assert_fail@plt+0x10ebc>
   223a0:	cmp	ip, #0
   223a4:	bne	224b0 <__assert_fail@plt+0x11000>
   223a8:	ands	r4, r4, #32768	; 0x8000
   223ac:	bne	2236c <__assert_fail@plt+0x10ebc>
   223b0:	b	224b0 <__assert_fail@plt+0x11000>
   223b4:	cmp	r2, #0
   223b8:	bne	2245c <__assert_fail@plt+0x10fac>
   223bc:	mov	r2, #0
   223c0:	b	223d0 <__assert_fail@plt+0x10f20>
   223c4:	add	r2, r2, #1
   223c8:	cmp	r2, r1
   223cc:	bge	224ac <__assert_fail@plt+0x10ffc>
   223d0:	ldr	r0, [r3, r2, lsl #2]
   223d4:	add	r4, r5, r0, lsl #3
   223d8:	ldr	r4, [r4, #4]
   223dc:	uxtb	r6, r4
   223e0:	cmp	r6, #2
   223e4:	bne	223c4 <__assert_fail@plt+0x10f14>
   223e8:	tst	r4, lr
   223ec:	beq	224b0 <__assert_fail@plt+0x11000>
   223f0:	tst	r4, #10240	; 0x2800
   223f4:	bne	223c4 <__assert_fail@plt+0x10f14>
   223f8:	cmp	ip, #0
   223fc:	bne	224b0 <__assert_fail@plt+0x11000>
   22400:	ands	r4, r4, #32768	; 0x8000
   22404:	bne	223c4 <__assert_fail@plt+0x10f14>
   22408:	b	224b0 <__assert_fail@plt+0x11000>
   2240c:	mov	r2, #0
   22410:	b	22420 <__assert_fail@plt+0x10f70>
   22414:	add	r2, r2, #1
   22418:	cmp	r2, r1
   2241c:	bge	224ac <__assert_fail@plt+0x10ffc>
   22420:	ldr	r0, [r3, r2, lsl #2]
   22424:	add	r4, r5, r0, lsl #3
   22428:	ldr	r4, [r4, #4]
   2242c:	uxtb	r6, r4
   22430:	cmp	r6, #2
   22434:	bne	22414 <__assert_fail@plt+0x10f64>
   22438:	tst	r4, lr
   2243c:	beq	224b0 <__assert_fail@plt+0x11000>
   22440:	tst	r4, #1024	; 0x400
   22444:	bne	22414 <__assert_fail@plt+0x10f64>
   22448:	cmp	ip, #0
   2244c:	bne	224b0 <__assert_fail@plt+0x11000>
   22450:	ands	r4, r4, #32768	; 0x8000
   22454:	bne	22414 <__assert_fail@plt+0x10f64>
   22458:	b	224b0 <__assert_fail@plt+0x11000>
   2245c:	mov	r2, #0
   22460:	b	22470 <__assert_fail@plt+0x10fc0>
   22464:	add	r2, r2, #1
   22468:	cmp	r2, r1
   2246c:	bge	224ac <__assert_fail@plt+0x10ffc>
   22470:	ldr	r0, [r3, r2, lsl #2]
   22474:	add	r4, r5, r0, lsl #3
   22478:	ldr	r4, [r4, #4]
   2247c:	uxtb	r6, r4
   22480:	cmp	r6, #2
   22484:	bne	22464 <__assert_fail@plt+0x10fb4>
   22488:	tst	r4, lr
   2248c:	beq	224b0 <__assert_fail@plt+0x11000>
   22490:	tst	r4, #2048	; 0x800
   22494:	bne	22464 <__assert_fail@plt+0x10fb4>
   22498:	cmp	ip, #0
   2249c:	bne	224b0 <__assert_fail@plt+0x11000>
   224a0:	ands	r4, r4, #32768	; 0x8000
   224a4:	bne	22464 <__assert_fail@plt+0x10fb4>
   224a8:	b	224b0 <__assert_fail@plt+0x11000>
   224ac:	mov	r0, #0
   224b0:	pop	{r4, r5, r6, sl, fp, pc}
   224b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   224b8:	add	fp, sp, #24
   224bc:	mov	r8, r0
   224c0:	ldr	r0, [r0, #124]	; 0x7c
   224c4:	cmp	r0, #1
   224c8:	blt	22554 <__assert_fail@plt+0x110a4>
   224cc:	mov	r7, #0
   224d0:	b	224ec <__assert_fail@plt+0x1103c>
   224d4:	mov	r0, r5
   224d8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   224dc:	ldr	r0, [r8, #124]	; 0x7c
   224e0:	add	r7, r7, #1
   224e4:	cmp	r7, r0
   224e8:	bge	22554 <__assert_fail@plt+0x110a4>
   224ec:	ldr	r0, [r8, #132]	; 0x84
   224f0:	ldr	r5, [r0, r7, lsl #2]
   224f4:	ldr	r0, [r5, #16]
   224f8:	cmp	r0, #1
   224fc:	blt	2252c <__assert_fail@plt+0x1107c>
   22500:	mov	r4, #0
   22504:	ldr	r0, [r5, #20]
   22508:	ldr	r6, [r0, r4, lsl #2]
   2250c:	ldr	r0, [r6, #16]
   22510:	bl	2bc28 <__assert_fail@plt+0x1a778>
   22514:	mov	r0, r6
   22518:	bl	2bc28 <__assert_fail@plt+0x1a778>
   2251c:	ldr	r0, [r5, #16]
   22520:	add	r4, r4, #1
   22524:	cmp	r4, r0
   22528:	blt	22504 <__assert_fail@plt+0x11054>
   2252c:	ldr	r0, [r5, #20]
   22530:	bl	2bc28 <__assert_fail@plt+0x1a778>
   22534:	ldr	r0, [r5, #8]
   22538:	cmp	r0, #0
   2253c:	beq	224d4 <__assert_fail@plt+0x11024>
   22540:	ldr	r0, [r0, #8]
   22544:	bl	2bc28 <__assert_fail@plt+0x1a778>
   22548:	ldr	r0, [r5, #8]
   2254c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   22550:	b	224d4 <__assert_fail@plt+0x11024>
   22554:	mov	r0, #0
   22558:	str	r0, [r8, #108]	; 0x6c
   2255c:	str	r0, [r8, #124]	; 0x7c
   22560:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22564:	push	{r4, r5, fp, lr}
   22568:	add	fp, sp, #8
   2256c:	mov	r4, r0
   22570:	cmn	r1, #1
   22574:	ble	225ac <__assert_fail@plt+0x110fc>
   22578:	ldr	r0, [r4, #48]	; 0x30
   2257c:	cmp	r0, r1
   22580:	beq	22610 <__assert_fail@plt+0x11160>
   22584:	ldr	r0, [r4, #80]	; 0x50
   22588:	cmp	r0, #2
   2258c:	blt	225b4 <__assert_fail@plt+0x11104>
   22590:	ldr	r0, [r4, #8]
   22594:	ldr	r5, [r0, r1, lsl #2]
   22598:	cmn	r5, #1
   2259c:	bne	225e4 <__assert_fail@plt+0x11134>
   225a0:	sub	r1, r1, #1
   225a4:	cmn	r1, #1
   225a8:	bne	22594 <__assert_fail@plt+0x110e4>
   225ac:	ldr	r0, [r4, #60]	; 0x3c
   225b0:	pop	{r4, r5, fp, pc}
   225b4:	ldr	r0, [r4, #4]
   225b8:	ldr	r2, [r4, #68]	; 0x44
   225bc:	ldrb	r1, [r0, r1]
   225c0:	ubfx	r0, r1, #5, #3
   225c4:	and	r3, r1, #31
   225c8:	ldr	r2, [r2, r0, lsl #2]
   225cc:	mov	r0, #1
   225d0:	tst	r2, r0, lsl r3
   225d4:	moveq	r0, #0
   225d8:	cmpeq	r1, #10
   225dc:	bne	2260c <__assert_fail@plt+0x1115c>
   225e0:	b	225fc <__assert_fail@plt+0x1114c>
   225e4:	ldrb	r0, [r4, #78]	; 0x4e
   225e8:	cmp	r0, #0
   225ec:	bne	2261c <__assert_fail@plt+0x1116c>
   225f0:	mov	r0, #0
   225f4:	cmp	r5, #10
   225f8:	popne	{r4, r5, fp, pc}
   225fc:	ldrb	r0, [r4, #77]	; 0x4d
   22600:	cmp	r0, #0
   22604:	movwne	r0, #1
   22608:	lsl	r0, r0, #1
   2260c:	pop	{r4, r5, fp, pc}
   22610:	and	r0, r2, #2
   22614:	eor	r0, r0, #10
   22618:	pop	{r4, r5, fp, pc}
   2261c:	mov	r0, r5
   22620:	bl	113b4 <iswalnum@plt>
   22624:	mov	r1, r0
   22628:	mov	r0, #1
   2262c:	cmp	r5, #95	; 0x5f
   22630:	beq	2260c <__assert_fail@plt+0x1115c>
   22634:	cmp	r1, #0
   22638:	beq	225f0 <__assert_fail@plt+0x11140>
   2263c:	b	2260c <__assert_fail@plt+0x1115c>
   22640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22644:	add	fp, sp, #28
   22648:	sub	sp, sp, #4
   2264c:	mov	sl, r0
   22650:	ldr	r0, [r1, #4]
   22654:	cmp	r0, #1
   22658:	blt	22728 <__assert_fail@plt+0x11278>
   2265c:	ldr	r7, [sl, #84]	; 0x54
   22660:	mov	r8, r2
   22664:	mov	r5, r1
   22668:	mov	r4, #0
   2266c:	b	2267c <__assert_fail@plt+0x111cc>
   22670:	add	r4, r4, #1
   22674:	cmp	r4, r0
   22678:	bge	22728 <__assert_fail@plt+0x11278>
   2267c:	ldr	r1, [r5, #8]
   22680:	ldr	r6, [r1, r4, lsl #2]
   22684:	ldr	r1, [r7]
   22688:	add	r2, r1, r6, lsl #3
   2268c:	ldrb	r2, [r2, #4]
   22690:	cmp	r2, #8
   22694:	bne	22670 <__assert_fail@plt+0x111c0>
   22698:	ldr	r1, [r1, r6, lsl #3]
   2269c:	cmp	r1, #31
   226a0:	bgt	22670 <__assert_fail@plt+0x111c0>
   226a4:	ldr	r2, [r7, #80]	; 0x50
   226a8:	mov	r3, #1
   226ac:	tst	r2, r3, lsl r1
   226b0:	beq	22670 <__assert_fail@plt+0x111c0>
   226b4:	ldr	r0, [sl, #124]	; 0x7c
   226b8:	ldr	r9, [sl, #128]	; 0x80
   226bc:	cmp	r0, r9
   226c0:	beq	22704 <__assert_fail@plt+0x11254>
   226c4:	mov	r0, #1
   226c8:	mov	r1, #24
   226cc:	bl	2ba08 <__assert_fail@plt+0x1a558>
   226d0:	ldr	r1, [sl, #124]	; 0x7c
   226d4:	ldr	r2, [sl, #132]	; 0x84
   226d8:	str	r0, [r2, r1, lsl #2]
   226dc:	ldr	r0, [sl, #132]	; 0x84
   226e0:	ldr	r0, [r0, r1, lsl #2]
   226e4:	cmp	r0, #0
   226e8:	beq	22734 <__assert_fail@plt+0x11284>
   226ec:	add	r1, r1, #1
   226f0:	str	r6, [r0, #4]
   226f4:	str	r1, [sl, #124]	; 0x7c
   226f8:	str	r8, [r0]
   226fc:	ldr	r0, [r5, #4]
   22700:	b	22670 <__assert_fail@plt+0x111c0>
   22704:	ldr	r0, [sl, #132]	; 0x84
   22708:	lsl	r1, r9, #3
   2270c:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   22710:	cmp	r0, #0
   22714:	beq	22734 <__assert_fail@plt+0x11284>
   22718:	lsl	r1, r9, #1
   2271c:	str	r1, [sl, #128]	; 0x80
   22720:	str	r0, [sl, #132]	; 0x84
   22724:	b	226c4 <__assert_fail@plt+0x11214>
   22728:	mov	r0, #0
   2272c:	sub	sp, fp, #28
   22730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22734:	mov	r0, #12
   22738:	sub	sp, fp, #28
   2273c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22744:	add	fp, sp, #28
   22748:	sub	sp, sp, #76	; 0x4c
   2274c:	mov	ip, r0
   22750:	ldr	r0, [r1, #4]
   22754:	cmp	r0, #1
   22758:	blt	230c8 <__assert_fail@plt+0x11c18>
   2275c:	ldr	r2, [ip, #84]	; 0x54
   22760:	ldr	r0, [ip, #40]	; 0x28
   22764:	mov	r3, #0
   22768:	str	ip, [sp, #44]	; 0x2c
   2276c:	str	r1, [sp, #12]
   22770:	str	r0, [sp, #52]	; 0x34
   22774:	str	r2, [sp, #24]
   22778:	b	22798 <__assert_fail@plt+0x112e8>
   2277c:	ldr	r1, [sp, #12]
   22780:	ldr	r3, [sp, #16]
   22784:	ldr	r2, [sp, #24]
   22788:	ldr	r0, [r1, #4]
   2278c:	add	r3, r3, #1
   22790:	cmp	r3, r0
   22794:	bge	230c8 <__assert_fail@plt+0x11c18>
   22798:	ldr	r0, [r1, #8]
   2279c:	str	r3, [sp, #16]
   227a0:	ldr	r3, [r0, r3, lsl #2]
   227a4:	ldr	r0, [r2]
   227a8:	add	r4, r0, r3, lsl #3
   227ac:	mov	r1, r3
   227b0:	str	r3, [sp, #48]	; 0x30
   227b4:	ldr	r5, [r4, #4]!
   227b8:	uxtb	r0, r5
   227bc:	cmp	r0, #4
   227c0:	bne	2277c <__assert_fail@plt+0x112cc>
   227c4:	movw	r0, #65280	; 0xff00
   227c8:	movt	r0, #3
   227cc:	tst	r5, r0
   227d0:	beq	228e0 <__assert_fail@plt+0x11430>
   227d4:	ldr	r1, [sp, #52]	; 0x34
   227d8:	cmn	r1, #1
   227dc:	ble	22818 <__assert_fail@plt+0x11368>
   227e0:	ldr	r0, [ip, #48]	; 0x30
   227e4:	cmp	r0, r1
   227e8:	beq	2306c <__assert_fail@plt+0x11bbc>
   227ec:	ldr	r0, [ip, #80]	; 0x50
   227f0:	cmp	r0, #2
   227f4:	blt	22838 <__assert_fail@plt+0x11388>
   227f8:	ldr	r0, [ip, #8]
   227fc:	ldr	r1, [sp, #52]	; 0x34
   22800:	ldr	r6, [r0, r1, lsl #2]
   22804:	cmn	r6, #1
   22808:	bne	22874 <__assert_fail@plt+0x113c4>
   2280c:	sub	r1, r1, #1
   22810:	cmn	r1, #1
   22814:	bne	22800 <__assert_fail@plt+0x11350>
   22818:	ldr	r1, [ip, #60]	; 0x3c
   2281c:	and	r0, r1, #1
   22820:	tst	r5, #1024	; 0x400
   22824:	eor	r2, r0, #1
   22828:	beq	228ac <__assert_fail@plt+0x113fc>
   2282c:	cmp	r0, #0
   22830:	beq	2277c <__assert_fail@plt+0x112cc>
   22834:	b	228ac <__assert_fail@plt+0x113fc>
   22838:	ldr	r0, [ip, #4]
   2283c:	ldr	r2, [sp, #52]	; 0x34
   22840:	ldr	r1, [ip, #68]	; 0x44
   22844:	ldrb	r0, [r0, r2]
   22848:	ubfx	r2, r0, #5, #3
   2284c:	and	r7, r0, #31
   22850:	ldr	r3, [r1, r2, lsl #2]
   22854:	mov	r1, #1
   22858:	mov	r2, #0
   2285c:	tst	r3, r1, lsl r7
   22860:	bne	228ac <__assert_fail@plt+0x113fc>
   22864:	mov	r1, #0
   22868:	cmp	r0, #10
   2286c:	beq	2288c <__assert_fail@plt+0x113dc>
   22870:	b	2289c <__assert_fail@plt+0x113ec>
   22874:	ldrb	r0, [ip, #78]	; 0x4e
   22878:	cmp	r0, #0
   2287c:	bne	2308c <__assert_fail@plt+0x11bdc>
   22880:	mov	r1, #0
   22884:	cmp	r6, #10
   22888:	bne	2289c <__assert_fail@plt+0x113ec>
   2288c:	ldrb	r0, [ip, #77]	; 0x4d
   22890:	cmp	r0, #0
   22894:	movwne	r0, #1
   22898:	lsl	r1, r0, #1
   2289c:	and	r0, r1, #1
   228a0:	tst	r5, #1024	; 0x400
   228a4:	eor	r2, r0, #1
   228a8:	bne	2282c <__assert_fail@plt+0x1137c>
   228ac:	ldr	r0, [r4]
   228b0:	cmp	r2, #0
   228b4:	bne	228c0 <__assert_fail@plt+0x11410>
   228b8:	ands	r2, r0, #2048	; 0x800
   228bc:	bne	2277c <__assert_fail@plt+0x112cc>
   228c0:	tst	r1, #2
   228c4:	bne	228d0 <__assert_fail@plt+0x11420>
   228c8:	ands	r2, r0, #8192	; 0x2000
   228cc:	bne	2277c <__assert_fail@plt+0x112cc>
   228d0:	tst	r1, #8
   228d4:	bne	228e0 <__assert_fail@plt+0x11430>
   228d8:	ands	r0, r0, #32768	; 0x8000
   228dc:	bne	2277c <__assert_fail@plt+0x112cc>
   228e0:	ldr	r2, [ip, #108]	; 0x6c
   228e4:	ldr	r0, [ip, #84]	; 0x54
   228e8:	ldr	r9, [ip, #4]
   228ec:	cmp	r2, #1
   228f0:	str	r0, [sp, #36]	; 0x24
   228f4:	str	r2, [sp, #20]
   228f8:	blt	2298c <__assert_fail@plt+0x114dc>
   228fc:	ldr	r4, [sp, #52]	; 0x34
   22900:	ldr	r1, [ip, #116]	; 0x74
   22904:	mov	r0, #0
   22908:	mov	r5, #1
   2290c:	mov	lr, r4
   22910:	add	r3, r2, r0
   22914:	add	r3, r3, r3, lsr #31
   22918:	asr	r7, r3, #1
   2291c:	add	r6, r7, r7, lsl #1
   22920:	add	r6, r1, r6, lsl #3
   22924:	ldr	r6, [r6, #4]
   22928:	cmp	r6, lr
   2292c:	addlt	r0, r5, r3, asr #1
   22930:	movge	r2, r7
   22934:	cmp	r0, r2
   22938:	blt	22910 <__assert_fail@plt+0x11460>
   2293c:	ldr	r1, [sp, #20]
   22940:	cmp	r0, r1
   22944:	bge	229a4 <__assert_fail@plt+0x114f4>
   22948:	cmn	r0, #1
   2294c:	beq	229a4 <__assert_fail@plt+0x114f4>
   22950:	ldr	r1, [ip, #116]	; 0x74
   22954:	add	r0, r0, r0, lsl #1
   22958:	add	r0, r1, r0, lsl #3
   2295c:	ldr	r1, [r0, #4]
   22960:	cmp	r1, lr
   22964:	bne	229a4 <__assert_fail@plt+0x114f4>
   22968:	ldr	r1, [r0]
   2296c:	ldr	r2, [sp, #48]	; 0x30
   22970:	cmp	r1, r2
   22974:	beq	22dac <__assert_fail@plt+0x118fc>
   22978:	ldrb	r1, [r0, #20]
   2297c:	add	r0, r0, #24
   22980:	cmp	r1, #0
   22984:	bne	22968 <__assert_fail@plt+0x114b8>
   22988:	b	229a4 <__assert_fail@plt+0x114f4>
   2298c:	ldr	r4, [sp, #52]	; 0x34
   22990:	mov	r0, #0
   22994:	mov	lr, r4
   22998:	ldr	r1, [sp, #20]
   2299c:	cmp	r0, r1
   229a0:	blt	22948 <__assert_fail@plt+0x11498>
   229a4:	ldr	r0, [ip, #124]	; 0x7c
   229a8:	cmp	r0, #1
   229ac:	ldr	r0, [sp, #20]
   229b0:	blt	22db0 <__assert_fail@plt+0x11900>
   229b4:	ldr	r0, [sp, #36]	; 0x24
   229b8:	ldr	r1, [sp, #48]	; 0x30
   229bc:	mov	r3, #0
   229c0:	ldr	r0, [r0]
   229c4:	ldr	r2, [r0, r1, lsl #3]
   229c8:	str	r2, [sp, #32]
   229cc:	ldr	r1, [ip, #132]	; 0x84
   229d0:	str	r3, [sp, #28]
   229d4:	ldr	r6, [r1, r3, lsl #2]
   229d8:	ldr	r1, [r6, #4]
   229dc:	ldr	r0, [r0, r1, lsl #3]
   229e0:	cmp	r0, r2
   229e4:	bne	22d80 <__assert_fail@plt+0x118d0>
   229e8:	ldr	r0, [r6, #16]
   229ec:	ldr	r1, [r6]
   229f0:	mov	r8, #0
   229f4:	mov	r7, lr
   229f8:	str	r6, [sp, #40]	; 0x28
   229fc:	cmp	r0, #1
   22a00:	blt	22b38 <__assert_fail@plt+0x11688>
   22a04:	mov	r5, r1
   22a08:	ldr	r1, [r6, #20]
   22a0c:	ldr	r4, [r1, r8, lsl #2]
   22a10:	ldr	r1, [r4, #4]
   22a14:	sub	sl, r1, r5
   22a18:	str	r1, [fp, #-48]	; 0xffffffd0
   22a1c:	cmp	sl, #1
   22a20:	blt	22a54 <__assert_fail@plt+0x115a4>
   22a24:	ldr	r1, [ip, #28]
   22a28:	add	r3, sl, r7
   22a2c:	cmp	r3, r1
   22a30:	bgt	22aa8 <__assert_fail@plt+0x115f8>
   22a34:	add	r0, r9, r7
   22a38:	add	r1, r9, r5
   22a3c:	mov	r2, sl
   22a40:	bl	11384 <bcmp@plt>
   22a44:	ldr	ip, [sp, #44]	; 0x2c
   22a48:	ldr	lr, [sp, #52]	; 0x34
   22a4c:	cmp	r0, #0
   22a50:	bne	22b30 <__assert_fail@plt+0x11680>
   22a54:	ldr	r3, [sp, #48]	; 0x30
   22a58:	mov	r2, r4
   22a5c:	mov	r0, ip
   22a60:	mov	r1, r6
   22a64:	str	lr, [sp]
   22a68:	mov	r4, ip
   22a6c:	bl	237e8 <__assert_fail@plt+0x12338>
   22a70:	cmp	r0, #1
   22a74:	bhi	230dc <__assert_fail@plt+0x11c2c>
   22a78:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22a7c:	ldr	r0, [r6, #16]
   22a80:	ldr	r9, [r4, #4]
   22a84:	mov	ip, r4
   22a88:	ldr	r4, [sp, #52]	; 0x34
   22a8c:	add	r8, r8, #1
   22a90:	add	r7, sl, r7
   22a94:	cmp	r8, r0
   22a98:	mov	r5, r1
   22a9c:	mov	lr, r4
   22aa0:	blt	22a08 <__assert_fail@plt+0x11558>
   22aa4:	b	22b38 <__assert_fail@plt+0x11688>
   22aa8:	ldr	r2, [ip, #48]	; 0x30
   22aac:	cmp	r3, r2
   22ab0:	bgt	22d74 <__assert_fail@plt+0x118c4>
   22ab4:	ldr	r0, [ip, #36]	; 0x24
   22ab8:	ldr	r6, [ip, #104]	; 0x68
   22abc:	cmp	r0, r3
   22ac0:	cmple	r0, r2
   22ac4:	blt	22ad4 <__assert_fail@plt+0x11624>
   22ac8:	cmp	r1, r3
   22acc:	cmple	r1, r2
   22ad0:	bge	22af4 <__assert_fail@plt+0x11644>
   22ad4:	add	r1, r3, #1
   22ad8:	mov	r0, ip
   22adc:	mov	r9, r3
   22ae0:	bl	23114 <__assert_fail@plt+0x11c64>
   22ae4:	ldr	ip, [sp, #44]	; 0x2c
   22ae8:	mov	r3, r9
   22aec:	cmp	r0, #0
   22af0:	bne	230dc <__assert_fail@plt+0x11c2c>
   22af4:	cmp	r3, r6
   22af8:	ble	22b24 <__assert_fail@plt+0x11674>
   22afc:	sub	r0, r3, r6
   22b00:	mov	r1, #0
   22b04:	lsl	r2, r0, #2
   22b08:	ldr	r0, [ip, #100]	; 0x64
   22b0c:	add	r0, r0, r6, lsl #2
   22b10:	mov	r6, r3
   22b14:	add	r0, r0, #4
   22b18:	bl	113cc <memset@plt>
   22b1c:	ldr	ip, [sp, #44]	; 0x2c
   22b20:	str	r6, [ip, #104]	; 0x68
   22b24:	ldr	r9, [ip, #4]
   22b28:	ldr	r6, [sp, #40]	; 0x28
   22b2c:	b	22a34 <__assert_fail@plt+0x11584>
   22b30:	ldr	r0, [r6, #16]
   22b34:	mov	r1, r5
   22b38:	cmp	r8, r0
   22b3c:	blt	22d80 <__assert_fail@plt+0x118d0>
   22b40:	cmp	r8, #0
   22b44:	addne	r1, r1, #1
   22b48:	cmp	r1, lr
   22b4c:	ble	22b68 <__assert_fail@plt+0x116b8>
   22b50:	b	22d80 <__assert_fail@plt+0x118d0>
   22b54:	ldr	r6, [sp, #40]	; 0x28
   22b58:	add	r1, sl, #1
   22b5c:	cmp	sl, lr
   22b60:	mov	r9, r8
   22b64:	bge	22d80 <__assert_fail@plt+0x118d0>
   22b68:	ldr	r0, [r6]
   22b6c:	mov	sl, r1
   22b70:	cmp	r1, r0
   22b74:	ble	22ba0 <__assert_fail@plt+0x116f0>
   22b78:	ldr	r0, [ip, #28]
   22b7c:	cmp	r7, r0
   22b80:	bge	22d04 <__assert_fail@plt+0x11854>
   22b84:	add	r5, r7, #1
   22b88:	add	r1, sl, r9
   22b8c:	ldrb	r0, [r9, r7]
   22b90:	ldrb	r1, [r1, #-1]
   22b94:	cmp	r0, r1
   22b98:	beq	22ba4 <__assert_fail@plt+0x116f4>
   22b9c:	b	22d80 <__assert_fail@plt+0x118d0>
   22ba0:	mov	r5, r7
   22ba4:	ldr	r0, [ip, #100]	; 0x64
   22ba8:	mov	r8, r9
   22bac:	mov	r7, r5
   22bb0:	ldr	r2, [r0, sl, lsl #2]
   22bb4:	cmp	r2, #0
   22bb8:	beq	22b54 <__assert_fail@plt+0x116a4>
   22bbc:	ldr	r0, [r2, #8]
   22bc0:	cmp	r0, #1
   22bc4:	blt	22b54 <__assert_fail@plt+0x116a4>
   22bc8:	ldr	r1, [sp, #36]	; 0x24
   22bcc:	ldr	r2, [r2, #12]
   22bd0:	ldr	r4, [sp, #32]
   22bd4:	ldr	r1, [r1]
   22bd8:	b	22be8 <__assert_fail@plt+0x11738>
   22bdc:	add	r2, r2, #4
   22be0:	subs	r0, r0, #1
   22be4:	beq	22b54 <__assert_fail@plt+0x116a4>
   22be8:	ldr	r5, [r2]
   22bec:	add	r3, r1, r5, lsl #3
   22bf0:	ldrb	r3, [r3, #4]
   22bf4:	cmp	r3, #9
   22bf8:	bne	22bdc <__assert_fail@plt+0x1172c>
   22bfc:	ldr	r3, [r1, r5, lsl #3]
   22c00:	cmp	r3, r4
   22c04:	bne	22bdc <__assert_fail@plt+0x1172c>
   22c08:	cmn	r5, #1
   22c0c:	beq	22b54 <__assert_fail@plt+0x116a4>
   22c10:	ldr	r1, [r6, #8]
   22c14:	mov	r4, lr
   22c18:	str	r7, [fp, #-48]	; 0xffffffd0
   22c1c:	cmp	r1, #0
   22c20:	bne	22c50 <__assert_fail@plt+0x117a0>
   22c24:	ldr	r0, [r6]
   22c28:	mov	r9, #12
   22c2c:	sub	r0, sl, r0
   22c30:	add	r1, r0, #1
   22c34:	mov	r0, #12
   22c38:	bl	2ba08 <__assert_fail@plt+0x1a558>
   22c3c:	ldr	ip, [sp, #44]	; 0x2c
   22c40:	mov	r1, r0
   22c44:	cmp	r0, #0
   22c48:	str	r0, [r6, #8]
   22c4c:	beq	230cc <__assert_fail@plt+0x11c1c>
   22c50:	ldr	r3, [r6]
   22c54:	ldr	r2, [r6, #4]
   22c58:	mov	r0, #9
   22c5c:	stm	sp, {r5, sl}
   22c60:	str	r0, [sp, #8]
   22c64:	mov	r0, ip
   22c68:	bl	239c0 <__assert_fail@plt+0x12510>
   22c6c:	ldr	ip, [sp, #44]	; 0x2c
   22c70:	ldr	r7, [fp, #-48]	; 0xffffffd0
   22c74:	cmp	r0, #1
   22c78:	mov	lr, r4
   22c7c:	beq	22b54 <__assert_fail@plt+0x116a4>
   22c80:	mov	r9, r0
   22c84:	cmp	r0, #0
   22c88:	bne	230cc <__assert_fail@plt+0x11c1c>
   22c8c:	ldr	r7, [sp, #40]	; 0x28
   22c90:	ldr	r1, [r7, #12]
   22c94:	ldr	r0, [r7, #16]
   22c98:	cmp	r0, r1
   22c9c:	beq	22d4c <__assert_fail@plt+0x1189c>
   22ca0:	mov	r0, #1
   22ca4:	mov	r1, #20
   22ca8:	bl	2ba08 <__assert_fail@plt+0x1a558>
   22cac:	cmp	r0, #0
   22cb0:	beq	230fc <__assert_fail@plt+0x11c4c>
   22cb4:	mov	r2, r0
   22cb8:	ldr	r0, [r7, #16]
   22cbc:	ldr	r1, [r7, #20]
   22cc0:	ldr	r3, [sp, #48]	; 0x30
   22cc4:	str	r2, [r1, r0, lsl #2]
   22cc8:	stm	r2, {r5, sl}
   22ccc:	ldr	r5, [sp, #44]	; 0x2c
   22cd0:	add	r0, r0, #1
   22cd4:	mov	r1, r7
   22cd8:	str	r0, [r7, #16]
   22cdc:	str	r4, [sp]
   22ce0:	mov	r0, r5
   22ce4:	bl	237e8 <__assert_fail@plt+0x12338>
   22ce8:	cmp	r0, #1
   22cec:	bhi	230dc <__assert_fail@plt+0x11c2c>
   22cf0:	ldr	r8, [r5, #4]
   22cf4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   22cf8:	mov	ip, r5
   22cfc:	mov	lr, r4
   22d00:	b	22b54 <__assert_fail@plt+0x116a4>
   22d04:	ldr	r0, [ip, #48]	; 0x30
   22d08:	cmp	r7, r0
   22d0c:	bge	22d80 <__assert_fail@plt+0x118d0>
   22d10:	add	r5, r7, #1
   22d14:	mov	r0, ip
   22d18:	mov	r8, r7
   22d1c:	mov	r4, ip
   22d20:	mov	r1, r5
   22d24:	bl	23114 <__assert_fail@plt+0x11c64>
   22d28:	cmp	r0, #0
   22d2c:	bne	230dc <__assert_fail@plt+0x11c2c>
   22d30:	ldr	r9, [r4, #4]
   22d34:	mov	ip, r4
   22d38:	ldr	r4, [sp, #52]	; 0x34
   22d3c:	ldr	r6, [sp, #40]	; 0x28
   22d40:	mov	r7, r8
   22d44:	mov	lr, r4
   22d48:	b	22b88 <__assert_fail@plt+0x116d8>
   22d4c:	mov	r1, #1
   22d50:	orr	r6, r1, r0, lsl #1
   22d54:	ldr	r0, [r7, #20]
   22d58:	lsl	r1, r6, #2
   22d5c:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   22d60:	cmp	r0, #0
   22d64:	beq	230fc <__assert_fail@plt+0x11c4c>
   22d68:	str	r6, [r7, #12]
   22d6c:	str	r0, [r7, #20]
   22d70:	b	22ca0 <__assert_fail@plt+0x117f0>
   22d74:	mov	r1, r5
   22d78:	cmp	r8, r0
   22d7c:	bge	22b40 <__assert_fail@plt+0x11690>
   22d80:	ldr	r3, [sp, #28]
   22d84:	ldr	r0, [ip, #124]	; 0x7c
   22d88:	add	r3, r3, #1
   22d8c:	cmp	r3, r0
   22d90:	bge	22da4 <__assert_fail@plt+0x118f4>
   22d94:	ldr	r0, [sp, #36]	; 0x24
   22d98:	ldr	r2, [sp, #32]
   22d9c:	ldr	r0, [r0]
   22da0:	b	229cc <__assert_fail@plt+0x1151c>
   22da4:	ldr	r0, [ip, #108]	; 0x6c
   22da8:	b	22db0 <__assert_fail@plt+0x11900>
   22dac:	ldr	r0, [sp, #20]
   22db0:	ldr	r7, [sp, #20]
   22db4:	mov	r1, #0
   22db8:	str	r1, [fp, #-32]	; 0xffffffe0
   22dbc:	cmp	r7, r0
   22dc0:	blt	22dd8 <__assert_fail@plt+0x11928>
   22dc4:	b	2277c <__assert_fail@plt+0x112cc>
   22dc8:	ldr	r0, [ip, #108]	; 0x6c
   22dcc:	add	r7, r7, #1
   22dd0:	cmp	r7, r0
   22dd4:	bge	2277c <__assert_fail@plt+0x112cc>
   22dd8:	ldr	r0, [ip, #116]	; 0x74
   22ddc:	add	r1, r7, r7, lsl #1
   22de0:	ldr	r3, [sp, #48]	; 0x30
   22de4:	ldr	r2, [r0, r1, lsl #3]
   22de8:	cmp	r2, r3
   22dec:	bne	22dc8 <__assert_fail@plt+0x11918>
   22df0:	add	r0, r0, r1, lsl #3
   22df4:	ldr	r2, [sp, #52]	; 0x34
   22df8:	ldr	r1, [r0, #4]
   22dfc:	cmp	r1, r2
   22e00:	bne	22dc8 <__assert_fail@plt+0x11918>
   22e04:	str	r7, [sp, #20]
   22e08:	ldr	r4, [r0, #8]
   22e0c:	ldr	r7, [r0, #12]
   22e10:	ldr	r0, [sp, #24]
   22e14:	ldr	r8, [r0, #24]
   22e18:	cmp	r7, r4
   22e1c:	bne	22e38 <__assert_fail@plt+0x11988>
   22e20:	ldr	r1, [sp, #48]	; 0x30
   22e24:	ldr	r0, [r0, #20]
   22e28:	add	r1, r1, r1, lsl #1
   22e2c:	add	r0, r0, r1, lsl #2
   22e30:	ldr	r0, [r0, #8]
   22e34:	b	22e44 <__assert_fail@plt+0x11994>
   22e38:	ldr	r0, [r0, #12]
   22e3c:	ldr	r1, [sp, #48]	; 0x30
   22e40:	add	r0, r0, r1, lsl #2
   22e44:	ldr	r9, [r0]
   22e48:	ldr	r0, [sp, #52]	; 0x34
   22e4c:	add	r0, r7, r0
   22e50:	sub	r5, r0, r4
   22e54:	cmp	r5, #0
   22e58:	ble	22e94 <__assert_fail@plt+0x119e4>
   22e5c:	ldr	r1, [ip, #48]	; 0x30
   22e60:	sub	r0, r5, #1
   22e64:	cmp	r1, r0
   22e68:	beq	23030 <__assert_fail@plt+0x11b80>
   22e6c:	ldr	r1, [ip, #80]	; 0x50
   22e70:	cmp	r1, #2
   22e74:	blt	22e9c <__assert_fail@plt+0x119ec>
   22e78:	ldr	r1, [ip, #8]
   22e7c:	ldr	r6, [r1, r0, lsl #2]
   22e80:	cmn	r6, #1
   22e84:	bne	22ecc <__assert_fail@plt+0x11a1c>
   22e88:	sub	r0, r0, #1
   22e8c:	cmn	r0, #1
   22e90:	bne	22e7c <__assert_fail@plt+0x119cc>
   22e94:	ldr	sl, [ip, #60]	; 0x3c
   22e98:	b	22ef4 <__assert_fail@plt+0x11a44>
   22e9c:	ldr	r1, [ip, #4]
   22ea0:	ldr	r2, [ip, #68]	; 0x44
   22ea4:	mov	sl, #1
   22ea8:	ldrb	r0, [r1, r0]
   22eac:	ubfx	r1, r0, #5, #3
   22eb0:	ldr	r1, [r2, r1, lsl #2]
   22eb4:	and	r2, r0, #31
   22eb8:	tst	r1, sl, lsl r2
   22ebc:	moveq	sl, #0
   22ec0:	cmpeq	r0, #10
   22ec4:	bne	22ef4 <__assert_fail@plt+0x11a44>
   22ec8:	b	22ee4 <__assert_fail@plt+0x11a34>
   22ecc:	ldrb	r0, [ip, #78]	; 0x4e
   22ed0:	cmp	r0, #0
   22ed4:	bne	23040 <__assert_fail@plt+0x11b90>
   22ed8:	mov	sl, #0
   22edc:	cmp	r6, #10
   22ee0:	bne	22ef4 <__assert_fail@plt+0x11a44>
   22ee4:	ldrb	r0, [ip, #77]	; 0x4d
   22ee8:	cmp	r0, #0
   22eec:	movwne	r0, #1
   22ef0:	lsl	sl, r0, #1
   22ef4:	ldr	r0, [ip, #100]	; 0x64
   22ef8:	ldr	r2, [sp, #52]	; 0x34
   22efc:	add	r1, r9, r9, lsl #1
   22f00:	ldr	r2, [r0, r2, lsl #2]
   22f04:	ldr	r0, [r0, r5, lsl #2]
   22f08:	cmp	r2, #0
   22f0c:	beq	22f18 <__assert_fail@plt+0x11a68>
   22f10:	ldr	r2, [r2, #8]
   22f14:	b	22f1c <__assert_fail@plt+0x11a6c>
   22f18:	mov	r2, #0
   22f1c:	add	r8, r8, r1, lsl #2
   22f20:	sub	r6, fp, #44	; 0x2c
   22f24:	cmp	r0, #0
   22f28:	str	r2, [fp, #-48]	; 0xffffffd0
   22f2c:	beq	22f98 <__assert_fail@plt+0x11ae8>
   22f30:	ldr	r1, [r0, #40]	; 0x28
   22f34:	mov	r0, r6
   22f38:	mov	r2, r8
   22f3c:	bl	23558 <__assert_fail@plt+0x120a8>
   22f40:	cmp	r0, #0
   22f44:	str	r0, [fp, #-32]	; 0xffffffe0
   22f48:	bne	230e4 <__assert_fail@plt+0x11c34>
   22f4c:	ldr	r1, [sp, #24]
   22f50:	sub	r0, fp, #32
   22f54:	mov	r2, r6
   22f58:	mov	r3, sl
   22f5c:	bl	20d08 <__assert_fail@plt+0xf858>
   22f60:	ldr	r6, [sp, #44]	; 0x2c
   22f64:	ldr	r1, [r6, #100]	; 0x64
   22f68:	str	r0, [r1, r5, lsl #2]
   22f6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22f70:	bl	2bc28 <__assert_fail@plt+0x1a778>
   22f74:	ldr	r0, [r6, #100]	; 0x64
   22f78:	mov	ip, r6
   22f7c:	ldr	r1, [r0, r5, lsl #2]
   22f80:	cmp	r1, #0
   22f84:	bne	22fc8 <__assert_fail@plt+0x11b18>
   22f88:	ldr	r9, [fp, #-32]	; 0xffffffe0
   22f8c:	cmp	r9, #0
   22f90:	beq	22fc8 <__assert_fail@plt+0x11b18>
   22f94:	b	230d0 <__assert_fail@plt+0x11c20>
   22f98:	ldr	r1, [sp, #24]
   22f9c:	sub	r0, fp, #32
   22fa0:	mov	r2, r8
   22fa4:	mov	r3, sl
   22fa8:	bl	20d08 <__assert_fail@plt+0xf858>
   22fac:	ldr	ip, [sp, #44]	; 0x2c
   22fb0:	ldr	r1, [ip, #100]	; 0x64
   22fb4:	str	r0, [r1, r5, lsl #2]
   22fb8:	ldr	r0, [ip, #100]	; 0x64
   22fbc:	ldr	r1, [r0, r5, lsl #2]
   22fc0:	cmp	r1, #0
   22fc4:	beq	22f88 <__assert_fail@plt+0x11ad8>
   22fc8:	cmp	r7, r4
   22fcc:	ldr	r7, [sp, #20]
   22fd0:	bne	22dc8 <__assert_fail@plt+0x11918>
   22fd4:	ldr	r1, [sp, #52]	; 0x34
   22fd8:	ldr	r0, [r0, r1, lsl #2]
   22fdc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22fe0:	ldr	r0, [r0, #8]
   22fe4:	cmp	r0, r1
   22fe8:	ble	22dc8 <__assert_fail@plt+0x11918>
   22fec:	ldr	r2, [sp, #52]	; 0x34
   22ff0:	mov	r0, ip
   22ff4:	mov	r1, r8
   22ff8:	mov	r4, ip
   22ffc:	bl	22640 <__assert_fail@plt+0x11190>
   23000:	cmp	r0, #0
   23004:	str	r0, [fp, #-32]	; 0xffffffe0
   23008:	bne	23104 <__assert_fail@plt+0x11c54>
   2300c:	mov	r0, r4
   23010:	mov	r1, r8
   23014:	bl	22740 <__assert_fail@plt+0x11290>
   23018:	ldr	r7, [sp, #20]
   2301c:	cmp	r0, #0
   23020:	mov	ip, r4
   23024:	str	r0, [fp, #-32]	; 0xffffffe0
   23028:	beq	22dc8 <__assert_fail@plt+0x11918>
   2302c:	b	23104 <__assert_fail@plt+0x11c54>
   23030:	ldr	r0, [ip, #88]	; 0x58
   23034:	and	r0, r0, #2
   23038:	eor	sl, r0, #10
   2303c:	b	22ef4 <__assert_fail@plt+0x11a44>
   23040:	mov	r0, r6
   23044:	bl	113b4 <iswalnum@plt>
   23048:	mov	sl, #1
   2304c:	cmp	r6, #95	; 0x5f
   23050:	beq	23064 <__assert_fail@plt+0x11bb4>
   23054:	ldr	ip, [sp, #44]	; 0x2c
   23058:	cmp	r0, #0
   2305c:	beq	22ed8 <__assert_fail@plt+0x11a28>
   23060:	b	22ef4 <__assert_fail@plt+0x11a44>
   23064:	ldr	ip, [sp, #44]	; 0x2c
   23068:	b	22ef4 <__assert_fail@plt+0x11a44>
   2306c:	ldr	r0, [ip, #88]	; 0x58
   23070:	and	r0, r0, #2
   23074:	eor	r1, r0, #10
   23078:	and	r0, r1, #1
   2307c:	tst	r5, #1024	; 0x400
   23080:	eor	r2, r0, #1
   23084:	bne	2282c <__assert_fail@plt+0x1137c>
   23088:	b	228ac <__assert_fail@plt+0x113fc>
   2308c:	mov	r0, r6
   23090:	bl	113b4 <iswalnum@plt>
   23094:	mov	r1, #1
   23098:	mov	r2, #0
   2309c:	cmp	r6, #95	; 0x5f
   230a0:	beq	230b4 <__assert_fail@plt+0x11c04>
   230a4:	ldr	ip, [sp, #44]	; 0x2c
   230a8:	cmp	r0, #0
   230ac:	beq	22880 <__assert_fail@plt+0x113d0>
   230b0:	b	228ac <__assert_fail@plt+0x113fc>
   230b4:	ldr	ip, [sp, #44]	; 0x2c
   230b8:	ldr	r0, [r4]
   230bc:	cmp	r2, #0
   230c0:	beq	228b8 <__assert_fail@plt+0x11408>
   230c4:	b	228c0 <__assert_fail@plt+0x11410>
   230c8:	mov	r9, #0
   230cc:	str	r9, [fp, #-32]	; 0xffffffe0
   230d0:	mov	r0, r9
   230d4:	sub	sp, fp, #28
   230d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230dc:	mov	r9, r0
   230e0:	b	230cc <__assert_fail@plt+0x11c1c>
   230e4:	mov	r9, r0
   230e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   230ec:	bl	2bc28 <__assert_fail@plt+0x1a778>
   230f0:	mov	r0, r9
   230f4:	sub	sp, fp, #28
   230f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230fc:	mov	r9, #12
   23100:	b	230cc <__assert_fail@plt+0x11c1c>
   23104:	mov	r9, r0
   23108:	mov	r0, r9
   2310c:	sub	sp, fp, #28
   23110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23114:	push	{r4, r5, r6, r7, fp, lr}
   23118:	add	fp, sp, #16
   2311c:	mov	r4, r0
   23120:	ldr	r0, [r0, #36]	; 0x24
   23124:	mov	r5, #12
   23128:	cmn	r0, #-536870910	; 0xe0000002
   2312c:	bhi	23310 <__assert_fail@plt+0x11e60>
   23130:	ldr	r6, [r4, #48]	; 0x30
   23134:	ldr	r2, [r4, #80]	; 0x50
   23138:	cmp	r6, r0, lsl #1
   2313c:	lslge	r6, r0, #1
   23140:	cmp	r6, r1
   23144:	movle	r6, r1
   23148:	cmp	r2, #2
   2314c:	blt	23194 <__assert_fail@plt+0x11ce4>
   23150:	cmn	r6, #-1073741823	; 0xc0000001
   23154:	bhi	23310 <__assert_fail@plt+0x11e60>
   23158:	ldr	r0, [r4, #8]
   2315c:	lsl	r7, r6, #2
   23160:	mov	r1, r7
   23164:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   23168:	cmp	r0, #0
   2316c:	beq	23310 <__assert_fail@plt+0x11e60>
   23170:	str	r0, [r4, #8]
   23174:	ldr	r0, [r4, #12]
   23178:	cmp	r0, #0
   2317c:	beq	23194 <__assert_fail@plt+0x11ce4>
   23180:	mov	r1, r7
   23184:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   23188:	cmp	r0, #0
   2318c:	beq	23310 <__assert_fail@plt+0x11e60>
   23190:	str	r0, [r4, #12]
   23194:	ldrb	r0, [r4, #75]	; 0x4b
   23198:	cmp	r0, #0
   2319c:	beq	231b8 <__assert_fail@plt+0x11d08>
   231a0:	ldr	r0, [r4, #4]
   231a4:	mov	r1, r6
   231a8:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   231ac:	cmp	r0, #0
   231b0:	beq	23310 <__assert_fail@plt+0x11e60>
   231b4:	str	r0, [r4, #4]
   231b8:	str	r6, [r4, #36]	; 0x24
   231bc:	ldr	r0, [r4, #100]	; 0x64
   231c0:	cmp	r0, #0
   231c4:	beq	231e0 <__assert_fail@plt+0x11d30>
   231c8:	mov	r1, #4
   231cc:	add	r1, r1, r6, lsl #2
   231d0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   231d4:	cmp	r0, #0
   231d8:	beq	23310 <__assert_fail@plt+0x11e60>
   231dc:	str	r0, [r4, #100]	; 0x64
   231e0:	ldrb	r1, [r4, #72]	; 0x48
   231e4:	ldr	r0, [r4, #80]	; 0x50
   231e8:	cmp	r1, #0
   231ec:	beq	2320c <__assert_fail@plt+0x11d5c>
   231f0:	cmp	r0, #2
   231f4:	blt	23220 <__assert_fail@plt+0x11d70>
   231f8:	mov	r0, r4
   231fc:	bl	1a7c0 <__assert_fail@plt+0x9310>
   23200:	cmp	r0, #0
   23204:	beq	2330c <__assert_fail@plt+0x11e5c>
   23208:	pop	{r4, r5, r6, r7, fp, pc}
   2320c:	cmp	r0, #2
   23210:	blt	23290 <__assert_fail@plt+0x11de0>
   23214:	mov	r0, r4
   23218:	bl	1b0e0 <__assert_fail@plt+0x9c30>
   2321c:	b	2330c <__assert_fail@plt+0x11e5c>
   23220:	ldr	r6, [r4, #36]	; 0x24
   23224:	ldr	r0, [r4, #48]	; 0x30
   23228:	ldr	r5, [r4, #28]
   2322c:	cmp	r6, r0
   23230:	movgt	r6, r0
   23234:	cmp	r5, r6
   23238:	bge	23284 <__assert_fail@plt+0x11dd4>
   2323c:	bl	11348 <__ctype_toupper_loc@plt>
   23240:	ldr	r1, [r4]
   23244:	ldr	r3, [r4, #24]
   23248:	ldr	r2, [r4, #64]	; 0x40
   2324c:	add	r1, r1, r3
   23250:	cmp	r2, #0
   23254:	ldrb	r1, [r1, r5]
   23258:	bne	2327c <__assert_fail@plt+0x11dcc>
   2325c:	ldr	r2, [r0]
   23260:	ldr	r1, [r2, r1, lsl #2]
   23264:	ldr	r2, [r4, #4]
   23268:	strb	r1, [r2, r5]
   2326c:	add	r5, r5, #1
   23270:	cmp	r5, r6
   23274:	blt	23240 <__assert_fail@plt+0x11d90>
   23278:	b	23284 <__assert_fail@plt+0x11dd4>
   2327c:	ldrb	r1, [r2, r1]
   23280:	b	2325c <__assert_fail@plt+0x11dac>
   23284:	str	r5, [r4, #28]
   23288:	str	r5, [r4, #32]
   2328c:	b	2330c <__assert_fail@plt+0x11e5c>
   23290:	ldr	r2, [r4, #64]	; 0x40
   23294:	cmp	r2, #0
   23298:	beq	2330c <__assert_fail@plt+0x11e5c>
   2329c:	ldr	r1, [r4, #36]	; 0x24
   232a0:	ldr	r3, [r4, #48]	; 0x30
   232a4:	ldr	r0, [r4, #28]
   232a8:	cmp	r1, r3
   232ac:	movgt	r1, r3
   232b0:	cmp	r0, r1
   232b4:	bge	23304 <__assert_fail@plt+0x11e54>
   232b8:	ldr	r6, [r4, #24]
   232bc:	ldm	r4, {r3, r7}
   232c0:	add	r6, r6, r0
   232c4:	ldrb	r3, [r3, r6]
   232c8:	ldrb	r2, [r2, r3]
   232cc:	strb	r2, [r7, r0]
   232d0:	add	r0, r0, #1
   232d4:	cmp	r0, r1
   232d8:	bge	23304 <__assert_fail@plt+0x11e54>
   232dc:	ldr	r7, [r4, #24]
   232e0:	ldm	r4, {r2, r3}
   232e4:	ldr	r6, [r4, #64]	; 0x40
   232e8:	add	r2, r2, r7
   232ec:	ldrb	r2, [r2, r0]
   232f0:	ldrb	r2, [r6, r2]
   232f4:	strb	r2, [r3, r0]
   232f8:	add	r0, r0, #1
   232fc:	cmp	r0, r1
   23300:	blt	232dc <__assert_fail@plt+0x11e2c>
   23304:	str	r0, [r4, #28]
   23308:	str	r0, [r4, #32]
   2330c:	mov	r5, #0
   23310:	mov	r0, r5
   23314:	pop	{r4, r5, r6, r7, fp, pc}
   23318:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2331c:	add	fp, sp, #24
   23320:	sub	sp, sp, #16
   23324:	mov	r9, r0
   23328:	mov	r4, r1
   2332c:	ldr	r5, [r1, #40]	; 0x28
   23330:	ldr	r7, [r1, #84]	; 0x54
   23334:	ldr	r0, [r1, #100]	; 0x64
   23338:	ldr	r1, [r1, #104]	; 0x68
   2333c:	mov	r6, r2
   23340:	cmp	r5, r1
   23344:	ble	23364 <__assert_fail@plt+0x11eb4>
   23348:	str	r6, [r0, r5, lsl #2]
   2334c:	str	r5, [r4, #104]	; 0x68
   23350:	cmp	r6, #0
   23354:	ldrne	r0, [r7, #76]	; 0x4c
   23358:	cmpne	r0, #0
   2335c:	beq	234b4 <__assert_fail@plt+0x12004>
   23360:	b	234c0 <__assert_fail@plt+0x12010>
   23364:	ldr	r1, [r0, r5, lsl #2]
   23368:	cmp	r1, #0
   2336c:	beq	233e4 <__assert_fail@plt+0x11f34>
   23370:	ldr	r2, [r1, #40]	; 0x28
   23374:	cmp	r6, #0
   23378:	beq	2342c <__assert_fail@plt+0x11f7c>
   2337c:	ldr	r8, [r6, #40]	; 0x28
   23380:	mov	r0, sp
   23384:	mov	r1, r8
   23388:	bl	23558 <__assert_fail@plt+0x120a8>
   2338c:	cmp	r0, #0
   23390:	str	r0, [r9]
   23394:	bne	23518 <__assert_fail@plt+0x12068>
   23398:	ldr	r0, [r4, #40]	; 0x28
   2339c:	cmp	r0, #0
   233a0:	ble	233dc <__assert_fail@plt+0x11f2c>
   233a4:	ldr	r1, [r4, #48]	; 0x30
   233a8:	sub	r0, r0, #1
   233ac:	cmp	r1, r0
   233b0:	beq	23528 <__assert_fail@plt+0x12078>
   233b4:	ldr	r1, [r4, #80]	; 0x50
   233b8:	cmp	r1, #2
   233bc:	blt	233fc <__assert_fail@plt+0x11f4c>
   233c0:	ldr	r1, [r4, #8]
   233c4:	ldr	r6, [r1, r0, lsl #2]
   233c8:	cmn	r6, #1
   233cc:	bne	23450 <__assert_fail@plt+0x11fa0>
   233d0:	sub	r0, r0, #1
   233d4:	cmn	r0, #1
   233d8:	bne	233c4 <__assert_fail@plt+0x11f14>
   233dc:	ldr	r3, [r4, #60]	; 0x3c
   233e0:	b	23478 <__assert_fail@plt+0x11fc8>
   233e4:	str	r6, [r0, r5, lsl #2]
   233e8:	cmp	r6, #0
   233ec:	ldrne	r0, [r7, #76]	; 0x4c
   233f0:	cmpne	r0, #0
   233f4:	beq	234b4 <__assert_fail@plt+0x12004>
   233f8:	b	234c0 <__assert_fail@plt+0x12010>
   233fc:	ldr	r1, [r4, #4]
   23400:	ldr	r2, [r4, #68]	; 0x44
   23404:	mov	r3, #1
   23408:	ldrb	r0, [r1, r0]
   2340c:	ubfx	r1, r0, #5, #3
   23410:	ldr	r1, [r2, r1, lsl #2]
   23414:	and	r2, r0, #31
   23418:	tst	r1, r3, lsl r2
   2341c:	moveq	r3, #0
   23420:	cmpeq	r0, #10
   23424:	bne	23478 <__assert_fail@plt+0x11fc8>
   23428:	b	23468 <__assert_fail@plt+0x11fb8>
   2342c:	vldr	d16, [r2]
   23430:	ldr	r0, [r2, #8]
   23434:	mov	r8, #0
   23438:	str	r0, [sp, #8]
   2343c:	mov	r0, r5
   23440:	vstr	d16, [sp]
   23444:	cmp	r0, #0
   23448:	bgt	233a4 <__assert_fail@plt+0x11ef4>
   2344c:	b	233dc <__assert_fail@plt+0x11f2c>
   23450:	ldrb	r0, [r4, #78]	; 0x4e
   23454:	cmp	r0, #0
   23458:	bne	23538 <__assert_fail@plt+0x12088>
   2345c:	mov	r3, #0
   23460:	cmp	r6, #10
   23464:	bne	23478 <__assert_fail@plt+0x11fc8>
   23468:	ldrb	r0, [r4, #77]	; 0x4d
   2346c:	cmp	r0, #0
   23470:	movwne	r0, #1
   23474:	lsl	r3, r0, #1
   23478:	mov	r2, sp
   2347c:	mov	r0, r9
   23480:	mov	r1, r7
   23484:	bl	20d08 <__assert_fail@plt+0xf858>
   23488:	mov	r6, r0
   2348c:	ldr	r0, [r4, #100]	; 0x64
   23490:	cmp	r8, #0
   23494:	str	r6, [r0, r5, lsl #2]
   23498:	beq	234a4 <__assert_fail@plt+0x11ff4>
   2349c:	ldr	r0, [sp, #8]
   234a0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   234a4:	cmp	r6, #0
   234a8:	ldrne	r0, [r7, #76]	; 0x4c
   234ac:	cmpne	r0, #0
   234b0:	bne	234c0 <__assert_fail@plt+0x12010>
   234b4:	mov	r0, r6
   234b8:	sub	sp, fp, #24
   234bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   234c0:	add	r7, r6, #4
   234c4:	mov	r0, r4
   234c8:	mov	r2, r5
   234cc:	mov	r1, r7
   234d0:	bl	22640 <__assert_fail@plt+0x11190>
   234d4:	cmp	r0, #0
   234d8:	str	r0, [r9]
   234dc:	bne	23518 <__assert_fail@plt+0x12068>
   234e0:	ldrb	r0, [r6, #52]	; 0x34
   234e4:	tst	r0, #64	; 0x40
   234e8:	beq	234b4 <__assert_fail@plt+0x12004>
   234ec:	mov	r0, r4
   234f0:	mov	r1, r7
   234f4:	bl	22740 <__assert_fail@plt+0x11290>
   234f8:	str	r0, [r9]
   234fc:	cmp	r0, #0
   23500:	mov	r6, #0
   23504:	ldreq	r0, [r4, #100]	; 0x64
   23508:	ldreq	r6, [r0, r5, lsl #2]
   2350c:	mov	r0, r6
   23510:	sub	sp, fp, #24
   23514:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23518:	mov	r6, #0
   2351c:	mov	r0, r6
   23520:	sub	sp, fp, #24
   23524:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23528:	ldr	r0, [r4, #88]	; 0x58
   2352c:	and	r0, r0, #2
   23530:	eor	r3, r0, #10
   23534:	b	23478 <__assert_fail@plt+0x11fc8>
   23538:	mov	r0, r6
   2353c:	bl	113b4 <iswalnum@plt>
   23540:	mov	r3, #1
   23544:	cmp	r6, #95	; 0x5f
   23548:	beq	23478 <__assert_fail@plt+0x11fc8>
   2354c:	cmp	r0, #0
   23550:	beq	2345c <__assert_fail@plt+0x11fac>
   23554:	b	23478 <__assert_fail@plt+0x11fc8>
   23558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2355c:	add	fp, sp, #28
   23560:	sub	sp, sp, #20
   23564:	mov	sl, r2
   23568:	cmp	r1, #0
   2356c:	str	r0, [sp, #16]
   23570:	beq	236e4 <__assert_fail@plt+0x12234>
   23574:	ldr	r0, [r1, #4]
   23578:	mov	r8, r1
   2357c:	cmp	sl, #0
   23580:	beq	236a0 <__assert_fail@plt+0x121f0>
   23584:	cmp	r0, #1
   23588:	blt	236a0 <__assert_fail@plt+0x121f0>
   2358c:	ldr	r1, [sl, #4]
   23590:	cmp	r1, #1
   23594:	blt	236a0 <__assert_fail@plt+0x121f0>
   23598:	ldr	r4, [sp, #16]
   2359c:	add	r0, r1, r0
   235a0:	str	r0, [r4]
   235a4:	lsl	r0, r0, #2
   235a8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   235ac:	cmp	r0, #0
   235b0:	str	r0, [r4, #8]
   235b4:	beq	237dc <__assert_fail@plt+0x1232c>
   235b8:	ldr	r9, [sl, #4]
   235bc:	ldr	lr, [r8, #4]
   235c0:	mov	r7, #0
   235c4:	mov	r1, #0
   235c8:	cmp	r9, #0
   235cc:	movwgt	r1, #1
   235d0:	cmp	lr, #1
   235d4:	blt	23760 <__assert_fail@plt+0x122b0>
   235d8:	mov	r2, #0
   235dc:	mov	ip, #0
   235e0:	str	r2, [sp, #8]
   235e4:	mov	r2, #0
   235e8:	str	r2, [sp, #12]
   235ec:	mov	r2, #0
   235f0:	ldr	r4, [sp, #12]
   235f4:	mov	r7, ip
   235f8:	tst	r1, #1
   235fc:	beq	23790 <__assert_fail@plt+0x122e0>
   23600:	ldr	r1, [sl, #8]
   23604:	ldr	r5, [r1, r7, lsl #2]
   23608:	ldr	r1, [r8, #8]
   2360c:	ldr	r3, [r1, r2, lsl #2]
   23610:	cmp	r3, r5
   23614:	ble	2363c <__assert_fail@plt+0x1218c>
   23618:	add	r7, r7, #1
   2361c:	str	r5, [r0, r4, lsl #2]
   23620:	mov	r1, #0
   23624:	add	r4, r4, #1
   23628:	cmp	r9, r7
   2362c:	movwgt	r1, #1
   23630:	cmp	lr, r2
   23634:	bgt	235f8 <__assert_fail@plt+0x12148>
   23638:	b	23764 <__assert_fail@plt+0x122b4>
   2363c:	str	r3, [r0, r4, lsl #2]
   23640:	ldr	r6, [sp, #8]
   23644:	add	r1, r7, #1
   23648:	mov	ip, r7
   2364c:	add	r2, r2, #1
   23650:	ldr	r9, [sl, #4]
   23654:	ldr	lr, [r8, #4]
   23658:	moveq	ip, r1
   2365c:	str	r1, [sp, #4]
   23660:	mov	r1, #0
   23664:	sub	r6, r6, #1
   23668:	cmp	r9, ip
   2366c:	str	r6, [sp, #8]
   23670:	add	r6, r4, #1
   23674:	movwgt	r1, #1
   23678:	cmp	lr, r2
   2367c:	str	r6, [sp, #12]
   23680:	bgt	235f0 <__assert_fail@plt+0x12140>
   23684:	ldr	r2, [sp, #4]
   23688:	cmp	r3, r5
   2368c:	add	r4, r4, #1
   23690:	moveq	r7, r2
   23694:	cmp	r1, #0
   23698:	bne	2376c <__assert_fail@plt+0x122bc>
   2369c:	b	237b8 <__assert_fail@plt+0x12308>
   236a0:	cmp	r0, #1
   236a4:	blt	236e4 <__assert_fail@plt+0x12234>
   236a8:	ldr	r1, [sp, #16]
   236ac:	str	r0, [r1, #4]
   236b0:	ldr	r1, [r8, #4]
   236b4:	cmp	r1, #1
   236b8:	blt	23744 <__assert_fail@plt+0x12294>
   236bc:	ldr	r4, [sp, #16]
   236c0:	str	r0, [r4]
   236c4:	lsl	r0, r0, #2
   236c8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   236cc:	cmp	r0, #0
   236d0:	str	r0, [r4, #8]
   236d4:	beq	237cc <__assert_fail@plt+0x1231c>
   236d8:	ldr	r2, [r8, #4]
   236dc:	ldr	r1, [r8, #8]
   236e0:	b	23730 <__assert_fail@plt+0x12280>
   236e4:	cmp	sl, #0
   236e8:	beq	23744 <__assert_fail@plt+0x12294>
   236ec:	ldr	r0, [sl, #4]
   236f0:	cmp	r0, #1
   236f4:	blt	23744 <__assert_fail@plt+0x12294>
   236f8:	ldr	r1, [sp, #16]
   236fc:	str	r0, [r1, #4]
   23700:	ldr	r1, [sl, #4]
   23704:	cmp	r1, #1
   23708:	blt	23744 <__assert_fail@plt+0x12294>
   2370c:	ldr	r4, [sp, #16]
   23710:	str	r0, [r4]
   23714:	lsl	r0, r0, #2
   23718:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2371c:	cmp	r0, #0
   23720:	str	r0, [r4, #8]
   23724:	beq	237cc <__assert_fail@plt+0x1231c>
   23728:	ldr	r2, [sl, #4]
   2372c:	ldr	r1, [sl, #8]
   23730:	lsl	r2, r2, #2
   23734:	bl	11258 <memcpy@plt>
   23738:	mov	r0, #0
   2373c:	sub	sp, fp, #28
   23740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23744:	ldr	r1, [sp, #16]
   23748:	mov	r0, #0
   2374c:	str	r0, [r1]
   23750:	str	r0, [r1, #4]
   23754:	str	r0, [r1, #8]
   23758:	sub	sp, fp, #28
   2375c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23760:	mov	r4, #0
   23764:	cmp	r1, #0
   23768:	beq	237b8 <__assert_fail@plt+0x12308>
   2376c:	ldr	r1, [sl, #8]
   23770:	sub	r2, r9, r7
   23774:	add	r0, r0, r4, lsl #2
   23778:	lsl	r2, r2, #2
   2377c:	add	r1, r1, r7, lsl #2
   23780:	bl	11258 <memcpy@plt>
   23784:	sub	r0, r4, r7
   23788:	add	r4, r0, r9
   2378c:	b	237b8 <__assert_fail@plt+0x12308>
   23790:	ldr	r1, [r8, #8]
   23794:	add	r0, r0, r4, lsl #2
   23798:	add	r1, r1, r2, lsl #2
   2379c:	sub	r2, lr, r2
   237a0:	lsl	r2, r2, #2
   237a4:	bl	11258 <memcpy@plt>
   237a8:	ldr	r0, [r8, #4]
   237ac:	ldr	r1, [sp, #8]
   237b0:	add	r0, r0, r1
   237b4:	add	r4, r0, r4
   237b8:	ldr	r0, [sp, #16]
   237bc:	str	r4, [r0, #4]
   237c0:	mov	r0, #0
   237c4:	sub	sp, fp, #28
   237c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237cc:	ldr	r1, [sp, #16]
   237d0:	mov	r0, #0
   237d4:	str	r0, [r1]
   237d8:	str	r0, [r1, #4]
   237dc:	mov	r0, #12
   237e0:	sub	sp, fp, #28
   237e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237ec:	add	fp, sp, #28
   237f0:	sub	sp, sp, #12
   237f4:	mov	r6, r2
   237f8:	mov	r7, r3
   237fc:	ldr	r2, [r2]
   23800:	mov	r4, r0
   23804:	mov	r0, #8
   23808:	mov	r8, r1
   2380c:	ldr	r9, [fp, #8]
   23810:	ldr	r3, [r6, #4]
   23814:	str	r0, [sp, #8]
   23818:	add	r1, r6, #8
   2381c:	mov	r0, r4
   23820:	stm	sp, {r7, r9}
   23824:	bl	239c0 <__assert_fail@plt+0x12510>
   23828:	mov	r5, r0
   2382c:	cmp	r0, #0
   23830:	beq	23840 <__assert_fail@plt+0x12390>
   23834:	mov	r0, r5
   23838:	sub	sp, fp, #28
   2383c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23840:	ldr	r0, [r4, #108]	; 0x6c
   23844:	ldr	r1, [r4, #112]	; 0x70
   23848:	ldr	sl, [r6, #4]
   2384c:	ldr	r5, [r8]
   23850:	cmp	r0, r1
   23854:	blt	238a4 <__assert_fail@plt+0x123f4>
   23858:	ldr	r0, [r4, #116]	; 0x74
   2385c:	add	r1, r1, r1, lsl #1
   23860:	lsl	r1, r1, #4
   23864:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   23868:	cmp	r0, #0
   2386c:	beq	239a8 <__assert_fail@plt+0x124f8>
   23870:	str	r0, [r4, #116]	; 0x74
   23874:	ldr	r1, [r4, #108]	; 0x6c
   23878:	ldr	r2, [r4, #112]	; 0x70
   2387c:	add	r1, r1, r1, lsl #1
   23880:	add	r0, r0, r1, lsl #3
   23884:	add	r1, r2, r2, lsl #1
   23888:	lsl	r2, r1, #3
   2388c:	mov	r1, #0
   23890:	bl	113cc <memset@plt>
   23894:	ldr	r1, [r4, #112]	; 0x70
   23898:	ldr	r0, [r4, #108]	; 0x6c
   2389c:	lsl	r1, r1, #1
   238a0:	str	r1, [r4, #112]	; 0x70
   238a4:	ldr	r1, [r4, #116]	; 0x74
   238a8:	cmp	r0, #1
   238ac:	blt	238cc <__assert_fail@plt+0x1241c>
   238b0:	sub	r2, r0, #1
   238b4:	add	r2, r2, r2, lsl #1
   238b8:	add	r2, r1, r2, lsl #3
   238bc:	ldr	r3, [r2, #4]
   238c0:	cmp	r3, r9
   238c4:	moveq	r3, #1
   238c8:	strbeq	r3, [r2, #20]
   238cc:	add	r2, r0, r0, lsl #1
   238d0:	cmp	sl, r5
   238d4:	mov	r3, #0
   238d8:	mov	ip, #0
   238dc:	add	r0, r0, #1
   238e0:	mvneq	r3, #0
   238e4:	str	r7, [r1, r2, lsl #3]!
   238e8:	str	r9, [r1, #4]
   238ec:	str	r5, [r1, #8]
   238f0:	str	sl, [r1, #12]
   238f4:	str	r3, [r1, #16]
   238f8:	str	r0, [r4, #108]	; 0x6c
   238fc:	strb	ip, [r1, #20]
   23900:	sub	r0, sl, r5
   23904:	ldr	r1, [r4, #120]	; 0x78
   23908:	cmp	r1, r0
   2390c:	strlt	r0, [r4, #120]	; 0x78
   23910:	ldr	r0, [r6, #4]
   23914:	ldr	r1, [r8]
   23918:	ldr	r7, [r4, #104]	; 0x68
   2391c:	add	r0, r0, r9
   23920:	sub	r6, r0, r1
   23924:	ldr	r0, [r4, #36]	; 0x24
   23928:	cmp	r0, r6
   2392c:	bgt	2393c <__assert_fail@plt+0x1248c>
   23930:	ldr	r1, [r4, #48]	; 0x30
   23934:	cmp	r0, r1
   23938:	blt	23954 <__assert_fail@plt+0x124a4>
   2393c:	ldr	r0, [r4, #28]
   23940:	cmp	r0, r6
   23944:	bgt	2396c <__assert_fail@plt+0x124bc>
   23948:	ldr	r1, [r4, #48]	; 0x30
   2394c:	cmp	r0, r1
   23950:	bge	2396c <__assert_fail@plt+0x124bc>
   23954:	add	r1, r6, #1
   23958:	mov	r0, r4
   2395c:	bl	23114 <__assert_fail@plt+0x11c64>
   23960:	mov	r5, r0
   23964:	cmp	r0, #0
   23968:	bne	23834 <__assert_fail@plt+0x12384>
   2396c:	mov	r5, #0
   23970:	cmp	r6, r7
   23974:	ble	23834 <__assert_fail@plt+0x12384>
   23978:	sub	r0, r6, r7
   2397c:	mov	r1, #0
   23980:	mov	r5, #0
   23984:	lsl	r2, r0, #2
   23988:	ldr	r0, [r4, #100]	; 0x64
   2398c:	add	r0, r0, r7, lsl #2
   23990:	add	r0, r0, #4
   23994:	bl	113cc <memset@plt>
   23998:	str	r6, [r4, #104]	; 0x68
   2399c:	mov	r0, r5
   239a0:	sub	sp, fp, #28
   239a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239a8:	ldr	r0, [r4, #116]	; 0x74
   239ac:	bl	2bc28 <__assert_fail@plt+0x1a778>
   239b0:	mov	r5, #12
   239b4:	mov	r0, r5
   239b8:	sub	sp, fp, #28
   239bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239c4:	add	fp, sp, #28
   239c8:	sub	sp, sp, #84	; 0x54
   239cc:	ldr	r7, [r0, #84]	; 0x54
   239d0:	mov	ip, r1
   239d4:	mov	r1, #0
   239d8:	mov	lr, r2
   239dc:	mov	r9, r3
   239e0:	str	r0, [sp, #44]	; 0x2c
   239e4:	str	r1, [fp, #-52]	; 0xffffffcc
   239e8:	ldr	r4, [ip, #4]
   239ec:	ldr	r1, [r7]
   239f0:	str	r7, [sp, #24]
   239f4:	ldr	sl, [r1, r2, lsl #3]
   239f8:	ldr	r1, [r0, #120]	; 0x78
   239fc:	ldr	r2, [fp, #12]
   23a00:	add	r2, r1, r2
   23a04:	cmp	r4, r2
   23a08:	str	sl, [sp, #20]
   23a0c:	ble	24378 <__assert_fail@plt+0x12ec8>
   23a10:	ldr	r2, [r0, #100]	; 0x64
   23a14:	ldr	r5, [ip]
   23a18:	ldr	r4, [r0, #40]	; 0x28
   23a1c:	ldr	r1, [r0, #88]	; 0x58
   23a20:	str	r2, [sp, #8]
   23a24:	ldr	r2, [ip, #8]
   23a28:	cmp	r5, #0
   23a2c:	str	r4, [sp, #12]
   23a30:	moveq	r5, r9
   23a34:	cmp	r5, #0
   23a38:	str	r2, [r0, #100]	; 0x64
   23a3c:	str	r5, [r0, #40]	; 0x28
   23a40:	ble	243e8 <__assert_fail@plt+0x12f38>
   23a44:	ldr	r2, [r0, #48]	; 0x30
   23a48:	sub	r3, r5, #1
   23a4c:	cmp	r2, r3
   23a50:	beq	243fc <__assert_fail@plt+0x12f4c>
   23a54:	ldr	r1, [r0, #80]	; 0x50
   23a58:	cmp	r1, #2
   23a5c:	blt	23ad0 <__assert_fail@plt+0x12620>
   23a60:	ldr	r1, [r0, #8]
   23a64:	ldr	r6, [r1, r3, lsl #2]
   23a68:	cmn	r6, #1
   23a6c:	bne	23b00 <__assert_fail@plt+0x12650>
   23a70:	sub	r3, r3, #1
   23a74:	cmn	r3, #1
   23a78:	bne	23a64 <__assert_fail@plt+0x125b4>
   23a7c:	ldr	r0, [sp, #44]	; 0x2c
   23a80:	ldr	r8, [r0, #60]	; 0x3c
   23a84:	cmp	r5, r9
   23a88:	str	ip, [sp, #16]
   23a8c:	beq	23b3c <__assert_fail@plt+0x1268c>
   23a90:	ldr	r9, [sp, #44]	; 0x2c
   23a94:	ldr	r0, [r9, #100]	; 0x64
   23a98:	ldr	r6, [r0, r5, lsl #2]
   23a9c:	cmp	r6, #0
   23aa0:	beq	23c08 <__assert_fail@plt+0x12758>
   23aa4:	ldrb	r0, [r6, #52]	; 0x34
   23aa8:	tst	r0, #64	; 0x40
   23aac:	bne	23c28 <__assert_fail@plt+0x12778>
   23ab0:	mov	r0, #0
   23ab4:	str	r0, [sp, #52]	; 0x34
   23ab8:	str	r0, [sp, #48]	; 0x30
   23abc:	str	r0, [sp, #56]	; 0x38
   23ac0:	ldr	r4, [fp, #12]
   23ac4:	cmp	r5, r4
   23ac8:	blt	23c80 <__assert_fail@plt+0x127d0>
   23acc:	b	24260 <__assert_fail@plt+0x12db0>
   23ad0:	ldr	r1, [r0, #4]
   23ad4:	ldr	r2, [r0, #68]	; 0x44
   23ad8:	mov	r8, #1
   23adc:	ldrb	r0, [r1, r3]
   23ae0:	ubfx	r1, r0, #5, #3
   23ae4:	ldr	r1, [r2, r1, lsl #2]
   23ae8:	and	r2, r0, #31
   23aec:	tst	r1, r8, lsl r2
   23af0:	moveq	r8, #0
   23af4:	cmpeq	r0, #10
   23af8:	bne	23b30 <__assert_fail@plt+0x12680>
   23afc:	b	23b1c <__assert_fail@plt+0x1266c>
   23b00:	ldr	r0, [sp, #44]	; 0x2c
   23b04:	ldrb	r0, [r0, #78]	; 0x4e
   23b08:	cmp	r0, #0
   23b0c:	bne	2444c <__assert_fail@plt+0x12f9c>
   23b10:	mov	r8, #0
   23b14:	cmp	r6, #10
   23b18:	bne	23b30 <__assert_fail@plt+0x12680>
   23b1c:	ldr	r0, [sp, #44]	; 0x2c
   23b20:	ldrb	r0, [r0, #77]	; 0x4d
   23b24:	cmp	r0, #0
   23b28:	movwne	r0, #1
   23b2c:	lsl	r8, r0, #1
   23b30:	cmp	r5, r9
   23b34:	str	ip, [sp, #16]
   23b38:	bne	23a90 <__assert_fail@plt+0x125e0>
   23b3c:	mov	r0, #1
   23b40:	mov	r6, lr
   23b44:	str	r0, [sp, #52]	; 0x34
   23b48:	str	r0, [sp, #48]	; 0x30
   23b4c:	mov	r0, #4
   23b50:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   23b54:	cmp	r0, #0
   23b58:	str	r0, [sp, #56]	; 0x38
   23b5c:	beq	2442c <__assert_fail@plt+0x12f7c>
   23b60:	ldr	r3, [fp, #16]
   23b64:	str	r6, [r0]
   23b68:	mov	r0, #0
   23b6c:	add	r1, sp, #48	; 0x30
   23b70:	mov	r2, sl
   23b74:	str	r0, [fp, #-52]	; 0xffffffcc
   23b78:	mov	r0, r7
   23b7c:	bl	24494 <__assert_fail@plt+0x12fe4>
   23b80:	cmp	r0, #0
   23b84:	str	r0, [fp, #-52]	; 0xffffffcc
   23b88:	bne	24414 <__assert_fail@plt+0x12f64>
   23b8c:	ldr	r0, [sp, #52]	; 0x34
   23b90:	ldr	r9, [sp, #44]	; 0x2c
   23b94:	cmp	r0, #0
   23b98:	beq	23bc4 <__assert_fail@plt+0x12714>
   23b9c:	ldr	r0, [fp, #16]
   23ba0:	ldr	r3, [sp, #20]
   23ba4:	add	r1, sp, #48	; 0x30
   23ba8:	mov	r2, r5
   23bac:	str	r0, [sp]
   23bb0:	mov	r0, r9
   23bb4:	bl	245dc <__assert_fail@plt+0x1312c>
   23bb8:	cmp	r0, #0
   23bbc:	str	r0, [fp, #-52]	; 0xffffffcc
   23bc0:	bne	24414 <__assert_fail@plt+0x12f64>
   23bc4:	ldr	r1, [sp, #24]
   23bc8:	sub	r0, fp, #52	; 0x34
   23bcc:	add	r2, sp, #48	; 0x30
   23bd0:	mov	r3, r8
   23bd4:	bl	20d08 <__assert_fail@plt+0xf858>
   23bd8:	mov	r6, r0
   23bdc:	cmp	r0, #0
   23be0:	bne	23bf0 <__assert_fail@plt+0x12740>
   23be4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23be8:	cmp	r0, #0
   23bec:	bne	2434c <__assert_fail@plt+0x12e9c>
   23bf0:	ldr	r0, [r9, #100]	; 0x64
   23bf4:	str	r6, [r0, r5, lsl #2]
   23bf8:	ldr	r4, [fp, #12]
   23bfc:	cmp	r5, r4
   23c00:	blt	23c80 <__assert_fail@plt+0x127d0>
   23c04:	b	24260 <__assert_fail@plt+0x12db0>
   23c08:	mov	r6, #0
   23c0c:	str	r6, [sp, #52]	; 0x34
   23c10:	str	r6, [sp, #48]	; 0x30
   23c14:	str	r6, [sp, #56]	; 0x38
   23c18:	ldr	r4, [fp, #12]
   23c1c:	cmp	r5, r4
   23c20:	blt	23c80 <__assert_fail@plt+0x127d0>
   23c24:	b	24260 <__assert_fail@plt+0x12db0>
   23c28:	ldr	r0, [r6, #8]
   23c2c:	cmp	r0, #1
   23c30:	str	r0, [sp, #52]	; 0x34
   23c34:	blt	24310 <__assert_fail@plt+0x12e60>
   23c38:	str	r0, [sp, #48]	; 0x30
   23c3c:	lsl	r0, r0, #2
   23c40:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   23c44:	cmp	r0, #0
   23c48:	str	r0, [sp, #56]	; 0x38
   23c4c:	beq	2442c <__assert_fail@plt+0x12f7c>
   23c50:	ldr	r2, [r6, #8]
   23c54:	ldr	r1, [r6, #12]
   23c58:	lsl	r2, r2, #2
   23c5c:	bl	11258 <memcpy@plt>
   23c60:	ldrb	r0, [r6, #52]	; 0x34
   23c64:	mov	r1, #0
   23c68:	str	r1, [fp, #-52]	; 0xffffffcc
   23c6c:	tst	r0, #64	; 0x40
   23c70:	bne	23b9c <__assert_fail@plt+0x126ec>
   23c74:	ldr	r4, [fp, #12]
   23c78:	cmp	r5, r4
   23c7c:	bge	24260 <__assert_fail@plt+0x12db0>
   23c80:	ldr	r7, [sp, #24]
   23c84:	ldr	sl, [sp, #20]
   23c88:	ldr	r4, [fp, #16]
   23c8c:	add	r8, sp, #48	; 0x30
   23c90:	mov	r0, #0
   23c94:	str	r6, [sp, #40]	; 0x28
   23c98:	b	23cc8 <__assert_fail@plt+0x12818>
   23c9c:	ldr	r1, [sp, #40]	; 0x28
   23ca0:	ldr	r0, [r9, #100]	; 0x64
   23ca4:	ldr	r5, [sp, #28]
   23ca8:	str	r1, [r0, r5, lsl #2]
   23cac:	cmp	r1, #0
   23cb0:	ldr	r1, [sp, #32]
   23cb4:	mov	r0, #0
   23cb8:	addeq	r0, r1, #1
   23cbc:	ldr	r1, [fp, #12]
   23cc0:	cmp	r5, r1
   23cc4:	beq	2425c <__assert_fail@plt+0x12dac>
   23cc8:	str	r0, [sp, #32]
   23ccc:	ldr	r0, [r9, #120]	; 0x78
   23cd0:	ldr	r1, [sp, #32]
   23cd4:	cmp	r1, r0
   23cd8:	bgt	24260 <__assert_fail@plt+0x12db0>
   23cdc:	mov	r0, #0
   23ce0:	add	r1, r5, #1
   23ce4:	str	r0, [sp, #52]	; 0x34
   23ce8:	str	r1, [sp, #28]
   23cec:	ldr	r0, [r9, #100]	; 0x64
   23cf0:	ldr	r0, [r0, r1, lsl #2]
   23cf4:	cmp	r0, #0
   23cf8:	beq	23d14 <__assert_fail@plt+0x12864>
   23cfc:	add	r1, r0, #4
   23d00:	mov	r0, r8
   23d04:	bl	209e8 <__assert_fail@plt+0xf538>
   23d08:	cmp	r0, #0
   23d0c:	str	r0, [fp, #-52]	; 0xffffffcc
   23d10:	bne	2434c <__assert_fail@plt+0x12e9c>
   23d14:	ldr	r1, [sp, #40]	; 0x28
   23d18:	cmp	r1, #0
   23d1c:	beq	24114 <__assert_fail@plt+0x12c64>
   23d20:	mov	r0, #0
   23d24:	ldr	r8, [r9, #84]	; 0x54
   23d28:	str	r0, [fp, #-32]	; 0xffffffe0
   23d2c:	str	r0, [fp, #-44]	; 0xffffffd4
   23d30:	str	r0, [fp, #-48]	; 0xffffffd0
   23d34:	str	r0, [fp, #-40]	; 0xffffffd8
   23d38:	ldr	r1, [r1, #20]
   23d3c:	cmp	r1, #1
   23d40:	blt	24100 <__assert_fail@plt+0x12c50>
   23d44:	ldr	r7, [sp, #40]	; 0x28
   23d48:	mov	r4, #0
   23d4c:	b	23d80 <__assert_fail@plt+0x128d0>
   23d50:	ldr	r1, [sp, #52]	; 0x34
   23d54:	cmp	r1, #0
   23d58:	bne	23f0c <__assert_fail@plt+0x12a5c>
   23d5c:	ldr	r0, [sp, #56]	; 0x38
   23d60:	str	r6, [r0]
   23d64:	ldr	r0, [sp, #52]	; 0x34
   23d68:	add	r0, r0, #1
   23d6c:	str	r0, [sp, #52]	; 0x34
   23d70:	ldr	r0, [r7, #20]
   23d74:	add	r4, r4, #1
   23d78:	cmp	r4, r0
   23d7c:	bge	240f4 <__assert_fail@plt+0x12c44>
   23d80:	ldr	r0, [r7, #24]
   23d84:	ldr	sl, [r0, r4, lsl #2]
   23d88:	ldr	r0, [r8]
   23d8c:	add	r1, r0, sl, lsl #3
   23d90:	ldrb	r1, [r1, #6]
   23d94:	tst	r1, #16
   23d98:	beq	23ea8 <__assert_fail@plt+0x129f8>
   23d9c:	mov	r0, r8
   23da0:	mov	r1, sl
   23da4:	mov	r2, r9
   23da8:	mov	r3, r5
   23dac:	bl	25004 <__assert_fail@plt+0x13b54>
   23db0:	mov	r9, r0
   23db4:	cmp	r0, #2
   23db8:	blt	23e94 <__assert_fail@plt+0x129e4>
   23dbc:	ldr	r0, [sp, #44]	; 0x2c
   23dc0:	ldr	r1, [r8, #12]
   23dc4:	add	r6, r9, r5
   23dc8:	ldr	r0, [r0, #100]	; 0x64
   23dcc:	ldr	r1, [r1, sl, lsl #2]
   23dd0:	ldr	r0, [r0, r6, lsl #2]
   23dd4:	str	r1, [sp, #36]	; 0x24
   23dd8:	mov	r1, #0
   23ddc:	str	r1, [fp, #-44]	; 0xffffffd4
   23de0:	cmp	r0, #0
   23de4:	beq	23e00 <__assert_fail@plt+0x12950>
   23de8:	add	r1, r0, #4
   23dec:	sub	r0, fp, #48	; 0x30
   23df0:	bl	209e8 <__assert_fail@plt+0xf538>
   23df4:	cmp	r0, #0
   23df8:	str	r0, [fp, #-32]	; 0xffffffe0
   23dfc:	bne	2433c <__assert_fail@plt+0x12e8c>
   23e00:	ldr	r2, [fp, #-48]	; 0xffffffd0
   23e04:	cmp	r2, #0
   23e08:	beq	23e34 <__assert_fail@plt+0x12984>
   23e0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   23e10:	ldr	r7, [sp, #36]	; 0x24
   23e14:	cmp	r1, #0
   23e18:	bne	23ffc <__assert_fail@plt+0x12b4c>
   23e1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23e20:	str	r7, [r0]
   23e24:	ldr	r0, [fp, #-44]	; 0xffffffd4
   23e28:	add	r0, r0, #1
   23e2c:	str	r0, [fp, #-44]	; 0xffffffd4
   23e30:	b	23e5c <__assert_fail@plt+0x129ac>
   23e34:	mov	r0, #1
   23e38:	str	r0, [fp, #-44]	; 0xffffffd4
   23e3c:	str	r0, [fp, #-48]	; 0xffffffd0
   23e40:	mov	r0, #4
   23e44:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   23e48:	ldr	r1, [sp, #36]	; 0x24
   23e4c:	cmp	r0, #0
   23e50:	str	r0, [fp, #-40]	; 0xffffffd8
   23e54:	beq	24364 <__assert_fail@plt+0x12eb4>
   23e58:	str	r1, [r0]
   23e5c:	sub	r0, fp, #32
   23e60:	mov	r1, r8
   23e64:	sub	r2, fp, #48	; 0x30
   23e68:	bl	24cd4 <__assert_fail@plt+0x13824>
   23e6c:	ldr	r2, [sp, #44]	; 0x2c
   23e70:	ldr	r1, [r2, #100]	; 0x64
   23e74:	str	r0, [r1, r6, lsl #2]
   23e78:	ldr	r0, [r2, #100]	; 0x64
   23e7c:	ldr	r0, [r0, r6, lsl #2]
   23e80:	cmp	r0, #0
   23e84:	bne	23e94 <__assert_fail@plt+0x129e4>
   23e88:	ldr	r7, [fp, #-32]	; 0xffffffe0
   23e8c:	cmp	r7, #0
   23e90:	bne	24340 <__assert_fail@plt+0x12e90>
   23e94:	cmp	r9, #0
   23e98:	ldr	r9, [sp, #44]	; 0x2c
   23e9c:	ldr	r7, [sp, #40]	; 0x28
   23ea0:	bne	23ec0 <__assert_fail@plt+0x12a10>
   23ea4:	ldr	r0, [r8]
   23ea8:	add	r1, r0, sl, lsl #3
   23eac:	mov	r0, r9
   23eb0:	mov	r2, r5
   23eb4:	bl	25390 <__assert_fail@plt+0x13ee0>
   23eb8:	cmp	r0, #0
   23ebc:	beq	23d70 <__assert_fail@plt+0x128c0>
   23ec0:	ldr	r0, [r8, #12]
   23ec4:	ldr	r2, [sp, #48]	; 0x30
   23ec8:	ldr	r6, [r0, sl, lsl #2]
   23ecc:	cmp	r2, #0
   23ed0:	bne	23d50 <__assert_fail@plt+0x128a0>
   23ed4:	mov	r0, #1
   23ed8:	str	r0, [sp, #52]	; 0x34
   23edc:	str	r0, [sp, #48]	; 0x30
   23ee0:	mov	r0, #4
   23ee4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   23ee8:	cmp	r0, #0
   23eec:	str	r0, [sp, #56]	; 0x38
   23ef0:	beq	24328 <__assert_fail@plt+0x12e78>
   23ef4:	str	r6, [r0]
   23ef8:	ldr	r0, [r7, #20]
   23efc:	add	r4, r4, #1
   23f00:	cmp	r4, r0
   23f04:	blt	23d80 <__assert_fail@plt+0x128d0>
   23f08:	b	240f4 <__assert_fail@plt+0x12c44>
   23f0c:	cmp	r2, r1
   23f10:	bne	23f78 <__assert_fail@plt+0x12ac8>
   23f14:	lsl	r0, r2, #1
   23f18:	lsl	r1, r2, #3
   23f1c:	str	r0, [sp, #48]	; 0x30
   23f20:	ldr	r0, [sp, #56]	; 0x38
   23f24:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   23f28:	cmp	r0, #0
   23f2c:	beq	24334 <__assert_fail@plt+0x12e84>
   23f30:	str	r0, [sp, #56]	; 0x38
   23f34:	ldr	r1, [sp, #52]	; 0x34
   23f38:	ldr	r2, [r0]
   23f3c:	cmp	r2, r6
   23f40:	bgt	23f88 <__assert_fail@plt+0x12ad8>
   23f44:	add	r2, r0, r1, lsl #2
   23f48:	ldr	r3, [r2, #-4]
   23f4c:	cmp	r3, r6
   23f50:	ble	23ff4 <__assert_fail@plt+0x12b44>
   23f54:	sub	r1, r1, #2
   23f58:	str	r3, [r2]
   23f5c:	sub	r1, r1, #1
   23f60:	ldr	r3, [r2, #-8]
   23f64:	sub	r2, r2, #4
   23f68:	cmp	r3, r6
   23f6c:	bgt	23f58 <__assert_fail@plt+0x12aa8>
   23f70:	add	r1, r1, #2
   23f74:	b	23ff4 <__assert_fail@plt+0x12b44>
   23f78:	ldr	r0, [sp, #56]	; 0x38
   23f7c:	ldr	r2, [r0]
   23f80:	cmp	r2, r6
   23f84:	ble	23f44 <__assert_fail@plt+0x12a94>
   23f88:	cmp	r1, #1
   23f8c:	blt	23ff4 <__assert_fail@plt+0x12b44>
   23f90:	ands	r7, r1, #3
   23f94:	sub	ip, r1, #1
   23f98:	beq	23fbc <__assert_fail@plt+0x12b0c>
   23f9c:	add	lr, r0, r1, lsl #2
   23fa0:	mov	r3, lr
   23fa4:	ldr	r2, [r3, #-4]!
   23fa8:	subs	r7, r7, #1
   23fac:	sub	r1, r1, #1
   23fb0:	str	r2, [lr]
   23fb4:	mov	lr, r3
   23fb8:	bne	23fa4 <__assert_fail@plt+0x12af4>
   23fbc:	cmp	ip, #3
   23fc0:	bcc	23fec <__assert_fail@plt+0x12b3c>
   23fc4:	add	r2, r0, r1, lsl #2
   23fc8:	sub	r2, r2, #8
   23fcc:	sub	lr, r2, #8
   23fd0:	sub	r1, r1, #4
   23fd4:	sub	sl, r2, #4
   23fd8:	sub	r2, r2, #16
   23fdc:	ldm	lr, {r3, r7, ip, lr}
   23fe0:	cmp	r1, #0
   23fe4:	stm	sl, {r3, r7, ip, lr}
   23fe8:	bgt	23fcc <__assert_fail@plt+0x12b1c>
   23fec:	ldr	r7, [sp, #40]	; 0x28
   23ff0:	mov	r1, #0
   23ff4:	str	r6, [r0, r1, lsl #2]
   23ff8:	b	23d64 <__assert_fail@plt+0x128b4>
   23ffc:	cmp	r2, r1
   24000:	bne	24068 <__assert_fail@plt+0x12bb8>
   24004:	lsl	r0, r2, #1
   24008:	lsl	r1, r2, #3
   2400c:	str	r0, [fp, #-48]	; 0xffffffd0
   24010:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24014:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   24018:	cmp	r0, #0
   2401c:	beq	24334 <__assert_fail@plt+0x12e84>
   24020:	str	r0, [fp, #-40]	; 0xffffffd8
   24024:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24028:	ldr	r2, [r0]
   2402c:	cmp	r2, r7
   24030:	bgt	24078 <__assert_fail@plt+0x12bc8>
   24034:	add	r2, r0, r1, lsl #2
   24038:	ldr	r3, [r2, #-4]
   2403c:	cmp	r3, r7
   24040:	ble	240ec <__assert_fail@plt+0x12c3c>
   24044:	sub	r1, r1, #2
   24048:	str	r3, [r2]
   2404c:	sub	r1, r1, #1
   24050:	ldr	r3, [r2, #-8]
   24054:	sub	r2, r2, #4
   24058:	cmp	r3, r7
   2405c:	bgt	24048 <__assert_fail@plt+0x12b98>
   24060:	add	r1, r1, #2
   24064:	b	240ec <__assert_fail@plt+0x12c3c>
   24068:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2406c:	ldr	r2, [r0]
   24070:	cmp	r2, r7
   24074:	ble	24034 <__assert_fail@plt+0x12b84>
   24078:	cmp	r1, #1
   2407c:	blt	240ec <__assert_fail@plt+0x12c3c>
   24080:	ands	r3, r1, #3
   24084:	sub	ip, r1, #1
   24088:	beq	240ac <__assert_fail@plt+0x12bfc>
   2408c:	add	lr, r0, r1, lsl #2
   24090:	mov	r7, lr
   24094:	ldr	r2, [r7, #-4]!
   24098:	subs	r3, r3, #1
   2409c:	sub	r1, r1, #1
   240a0:	str	r2, [lr]
   240a4:	mov	lr, r7
   240a8:	bne	24094 <__assert_fail@plt+0x12be4>
   240ac:	cmp	ip, #3
   240b0:	bcc	240e4 <__assert_fail@plt+0x12c34>
   240b4:	add	r2, r0, r1, lsl #2
   240b8:	sub	r2, r2, #8
   240bc:	sub	lr, r2, #8
   240c0:	sub	r1, r1, #4
   240c4:	ldm	lr, {r3, r7, ip, lr}
   240c8:	cmp	r1, #0
   240cc:	str	r3, [r2, #-4]
   240d0:	str	r7, [r2]
   240d4:	str	ip, [r2, #4]
   240d8:	str	lr, [r2, #8]
   240dc:	sub	r2, r2, #16
   240e0:	bgt	240bc <__assert_fail@plt+0x12c0c>
   240e4:	ldr	r7, [sp, #36]	; 0x24
   240e8:	mov	r1, #0
   240ec:	str	r7, [r0, r1, lsl #2]
   240f0:	b	23e24 <__assert_fail@plt+0x12974>
   240f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   240f8:	ldr	r7, [sp, #24]
   240fc:	ldr	sl, [sp, #20]
   24100:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24104:	ldr	r4, [fp, #16]
   24108:	mov	r0, #0
   2410c:	add	r8, sp, #48	; 0x30
   24110:	str	r0, [fp, #-52]	; 0xffffffcc
   24114:	ldr	r0, [sp, #52]	; 0x34
   24118:	cmp	r0, #0
   2411c:	beq	24164 <__assert_fail@plt+0x12cb4>
   24120:	mov	r0, r7
   24124:	mov	r1, r8
   24128:	mov	r2, sl
   2412c:	mov	r3, r4
   24130:	bl	24494 <__assert_fail@plt+0x12fe4>
   24134:	cmp	r0, #0
   24138:	str	r0, [fp, #-52]	; 0xffffffcc
   2413c:	bne	2434c <__assert_fail@plt+0x12e9c>
   24140:	ldr	r2, [sp, #28]
   24144:	mov	r0, r9
   24148:	mov	r1, r8
   2414c:	mov	r3, sl
   24150:	str	r4, [sp]
   24154:	bl	245dc <__assert_fail@plt+0x1312c>
   24158:	cmp	r0, #0
   2415c:	str	r0, [fp, #-52]	; 0xffffffcc
   24160:	bne	2434c <__assert_fail@plt+0x12e9c>
   24164:	cmn	r5, #1
   24168:	ble	241a0 <__assert_fail@plt+0x12cf0>
   2416c:	ldr	r0, [r9, #48]	; 0x30
   24170:	cmp	r0, r5
   24174:	beq	2422c <__assert_fail@plt+0x12d7c>
   24178:	ldr	r0, [r9, #80]	; 0x50
   2417c:	cmp	r0, #2
   24180:	blt	241a8 <__assert_fail@plt+0x12cf8>
   24184:	ldr	r0, [r9, #8]
   24188:	ldr	r6, [r0, r5, lsl #2]
   2418c:	cmn	r6, #1
   24190:	bne	241d8 <__assert_fail@plt+0x12d28>
   24194:	sub	r5, r5, #1
   24198:	cmn	r5, #1
   2419c:	bne	24188 <__assert_fail@plt+0x12cd8>
   241a0:	ldr	r3, [r9, #60]	; 0x3c
   241a4:	b	24200 <__assert_fail@plt+0x12d50>
   241a8:	ldr	r0, [r9, #4]
   241ac:	ldr	r1, [r9, #68]	; 0x44
   241b0:	mov	r3, #1
   241b4:	ldrb	r0, [r0, r5]
   241b8:	ubfx	r2, r0, #5, #3
   241bc:	ldr	r1, [r1, r2, lsl #2]
   241c0:	and	r2, r0, #31
   241c4:	tst	r1, r3, lsl r2
   241c8:	moveq	r3, #0
   241cc:	cmpeq	r0, #10
   241d0:	bne	24200 <__assert_fail@plt+0x12d50>
   241d4:	b	241f0 <__assert_fail@plt+0x12d40>
   241d8:	ldrb	r0, [r9, #78]	; 0x4e
   241dc:	cmp	r0, #0
   241e0:	bne	2423c <__assert_fail@plt+0x12d8c>
   241e4:	mov	r3, #0
   241e8:	cmp	r6, #10
   241ec:	bne	24200 <__assert_fail@plt+0x12d50>
   241f0:	ldrb	r0, [r9, #77]	; 0x4d
   241f4:	cmp	r0, #0
   241f8:	movwne	r0, #1
   241fc:	lsl	r3, r0, #1
   24200:	sub	r0, fp, #52	; 0x34
   24204:	mov	r1, r7
   24208:	mov	r2, r8
   2420c:	bl	20d08 <__assert_fail@plt+0xf858>
   24210:	cmp	r0, #0
   24214:	str	r0, [sp, #40]	; 0x28
   24218:	bne	23c9c <__assert_fail@plt+0x127ec>
   2421c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24220:	cmp	r0, #0
   24224:	beq	23c9c <__assert_fail@plt+0x127ec>
   24228:	b	2434c <__assert_fail@plt+0x12e9c>
   2422c:	ldr	r0, [r9, #88]	; 0x58
   24230:	and	r0, r0, #2
   24234:	eor	r3, r0, #10
   24238:	b	24200 <__assert_fail@plt+0x12d50>
   2423c:	mov	r0, r6
   24240:	bl	113b4 <iswalnum@plt>
   24244:	mov	r3, #1
   24248:	cmp	r6, #95	; 0x5f
   2424c:	beq	24200 <__assert_fail@plt+0x12d50>
   24250:	cmp	r0, #0
   24254:	beq	241e4 <__assert_fail@plt+0x12d34>
   24258:	b	24200 <__assert_fail@plt+0x12d50>
   2425c:	ldr	r5, [fp, #12]
   24260:	ldr	r0, [sp, #56]	; 0x38
   24264:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24268:	ldr	r0, [r9, #100]	; 0x64
   2426c:	ldr	r1, [fp, #12]
   24270:	mov	sl, #1
   24274:	ldr	r1, [r0, r1, lsl #2]
   24278:	ldr	r0, [sp, #16]
   2427c:	str	r5, [r0]
   24280:	ldr	r0, [sp, #12]
   24284:	cmp	r1, #0
   24288:	addne	r1, r1, #4
   2428c:	str	r0, [r9, #40]	; 0x28
   24290:	ldr	r0, [sp, #8]
   24294:	str	r0, [r9, #100]	; 0x64
   24298:	beq	242f4 <__assert_fail@plt+0x12e44>
   2429c:	ldr	r2, [r1, #4]
   242a0:	cmp	r2, #1
   242a4:	blt	24300 <__assert_fail@plt+0x12e50>
   242a8:	ldr	r0, [fp, #8]
   242ac:	ldr	r1, [r1, #8]
   242b0:	subs	r2, r2, #1
   242b4:	mov	sl, #0
   242b8:	mov	r3, #0
   242bc:	beq	242e8 <__assert_fail@plt+0x12e38>
   242c0:	mov	r3, #0
   242c4:	mov	r7, #1
   242c8:	add	r5, r3, r2
   242cc:	lsr	r4, r5, #1
   242d0:	ldr	r6, [r1, r4, lsl #2]
   242d4:	cmp	r6, r0
   242d8:	addlt	r3, r7, r5, lsr #1
   242dc:	movge	r2, r4
   242e0:	cmp	r3, r2
   242e4:	bcc	242c8 <__assert_fail@plt+0x12e18>
   242e8:	ldr	r1, [r1, r3, lsl #2]
   242ec:	cmp	r1, r0
   242f0:	movne	sl, #1
   242f4:	mov	r0, sl
   242f8:	sub	sp, fp, #28
   242fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24300:	mov	sl, #1
   24304:	mov	r0, sl
   24308:	sub	sp, fp, #28
   2430c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24310:	mov	r0, #0
   24314:	str	r0, [sp, #52]	; 0x34
   24318:	str	r0, [sp, #48]	; 0x30
   2431c:	str	r0, [sp, #56]	; 0x38
   24320:	str	r0, [fp, #-52]	; 0xffffffcc
   24324:	b	23bc4 <__assert_fail@plt+0x12714>
   24328:	mov	r0, #0
   2432c:	str	r0, [sp, #48]	; 0x30
   24330:	str	r0, [sp, #52]	; 0x34
   24334:	mov	r7, #12
   24338:	b	24340 <__assert_fail@plt+0x12e90>
   2433c:	mov	r7, r0
   24340:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24344:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24348:	str	r7, [fp, #-52]	; 0xffffffcc
   2434c:	ldr	r0, [sp, #56]	; 0x38
   24350:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24354:	ldr	sl, [fp, #-52]	; 0xffffffcc
   24358:	mov	r0, sl
   2435c:	sub	sp, fp, #28
   24360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24364:	mov	r0, #0
   24368:	mov	r7, #12
   2436c:	str	r0, [fp, #-48]	; 0xffffffd0
   24370:	str	r0, [fp, #-44]	; 0xffffffd4
   24374:	b	24344 <__assert_fail@plt+0x12e94>
   24378:	mvn	r1, #-2147483648	; 0x80000000
   2437c:	mov	sl, #12
   24380:	sub	r1, r1, r4
   24384:	cmp	r1, r2
   24388:	ble	242f4 <__assert_fail@plt+0x12e44>
   2438c:	add	r8, r2, #1
   24390:	str	lr, [sp, #40]	; 0x28
   24394:	add	r5, r8, r4
   24398:	cmn	r5, #-1073741823	; 0xc0000001
   2439c:	bhi	242f4 <__assert_fail@plt+0x12e44>
   243a0:	ldr	r0, [ip, #8]
   243a4:	lsl	r1, r5, #2
   243a8:	mov	r6, ip
   243ac:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   243b0:	cmp	r0, #0
   243b4:	beq	242f4 <__assert_fail@plt+0x12e44>
   243b8:	str	r5, [r6, #4]
   243bc:	str	r0, [r6, #8]
   243c0:	add	r0, r0, r4, lsl #2
   243c4:	lsl	r2, r8, #2
   243c8:	mov	r1, #0
   243cc:	bl	113cc <memset@plt>
   243d0:	ldr	r0, [sp, #44]	; 0x2c
   243d4:	ldr	r7, [sp, #24]
   243d8:	ldr	sl, [sp, #20]
   243dc:	ldr	lr, [sp, #40]	; 0x28
   243e0:	mov	ip, r6
   243e4:	b	23a10 <__assert_fail@plt+0x12560>
   243e8:	ldr	r8, [r0, #60]	; 0x3c
   243ec:	cmp	r5, r9
   243f0:	str	ip, [sp, #16]
   243f4:	beq	23b3c <__assert_fail@plt+0x1268c>
   243f8:	b	23a90 <__assert_fail@plt+0x125e0>
   243fc:	and	r0, r1, #2
   24400:	eor	r8, r0, #10
   24404:	cmp	r5, r9
   24408:	str	ip, [sp, #16]
   2440c:	beq	23b3c <__assert_fail@plt+0x1268c>
   24410:	b	23a90 <__assert_fail@plt+0x125e0>
   24414:	mov	sl, r0
   24418:	ldr	r0, [sp, #56]	; 0x38
   2441c:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24420:	mov	r0, sl
   24424:	sub	sp, fp, #28
   24428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2442c:	mov	r0, #0
   24430:	mov	sl, #12
   24434:	str	r0, [sp, #48]	; 0x30
   24438:	str	r0, [sp, #52]	; 0x34
   2443c:	str	sl, [fp, #-52]	; 0xffffffcc
   24440:	mov	r0, sl
   24444:	sub	sp, fp, #28
   24448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2444c:	mov	r0, r6
   24450:	str	lr, [sp, #40]	; 0x28
   24454:	mov	r4, ip
   24458:	bl	113b4 <iswalnum@plt>
   2445c:	mov	r8, #1
   24460:	cmp	r6, #95	; 0x5f
   24464:	beq	2447c <__assert_fail@plt+0x12fcc>
   24468:	ldr	lr, [sp, #40]	; 0x28
   2446c:	cmp	r0, #0
   24470:	mov	ip, r4
   24474:	beq	23b10 <__assert_fail@plt+0x12660>
   24478:	b	23b30 <__assert_fail@plt+0x12680>
   2447c:	ldr	lr, [sp, #40]	; 0x28
   24480:	mov	ip, r4
   24484:	cmp	r5, r9
   24488:	str	ip, [sp, #16]
   2448c:	beq	23b3c <__assert_fail@plt+0x1268c>
   24490:	b	23a90 <__assert_fail@plt+0x125e0>
   24494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24498:	add	fp, sp, #28
   2449c:	sub	sp, sp, #20
   244a0:	str	r0, [sp, #4]
   244a4:	ldr	r0, [r1, #4]
   244a8:	mov	sl, r1
   244ac:	mov	r1, #0
   244b0:	mov	r5, r3
   244b4:	mov	r8, r2
   244b8:	str	r1, [sp, #12]
   244bc:	str	r0, [sp, #8]
   244c0:	lsl	r0, r0, #2
   244c4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   244c8:	cmp	r0, #0
   244cc:	str	r0, [sp, #16]
   244d0:	beq	245cc <__assert_fail@plt+0x1311c>
   244d4:	ldr	r0, [sl, #4]
   244d8:	cmp	r0, #1
   244dc:	blt	2458c <__assert_fail@plt+0x130dc>
   244e0:	mov	r9, #0
   244e4:	ldr	r0, [sl, #8]
   244e8:	ldr	r1, [sp, #4]
   244ec:	ldr	r2, [r0, r9, lsl #2]
   244f0:	ldr	r1, [r1, #24]
   244f4:	add	r0, r2, r2, lsl #1
   244f8:	add	r1, r1, r0, lsl #2
   244fc:	ldr	r0, [r1, #4]
   24500:	cmp	r0, #1
   24504:	blt	2456c <__assert_fail@plt+0x130bc>
   24508:	ldr	r7, [sp, #4]
   2450c:	ldr	r3, [r1, #8]
   24510:	ldr	r7, [r7]
   24514:	b	24524 <__assert_fail@plt+0x13074>
   24518:	add	r3, r3, #4
   2451c:	subs	r0, r0, #1
   24520:	beq	2456c <__assert_fail@plt+0x130bc>
   24524:	ldr	r6, [r3]
   24528:	add	r4, r7, r6, lsl #3
   2452c:	ldrb	r4, [r4, #4]
   24530:	cmp	r4, r5
   24534:	bne	24518 <__assert_fail@plt+0x13068>
   24538:	ldr	r4, [r7, r6, lsl #3]
   2453c:	cmp	r4, r8
   24540:	bne	24518 <__assert_fail@plt+0x13068>
   24544:	cmn	r6, #1
   24548:	beq	2456c <__assert_fail@plt+0x130bc>
   2454c:	ldr	r0, [sp, #4]
   24550:	add	r1, sp, #8
   24554:	mov	r3, r8
   24558:	str	r5, [sp]
   2455c:	bl	24b90 <__assert_fail@plt+0x136e0>
   24560:	cmp	r0, #0
   24564:	beq	2457c <__assert_fail@plt+0x130cc>
   24568:	b	245b4 <__assert_fail@plt+0x13104>
   2456c:	add	r0, sp, #8
   24570:	bl	209e8 <__assert_fail@plt+0xf538>
   24574:	cmp	r0, #0
   24578:	bne	245b4 <__assert_fail@plt+0x13104>
   2457c:	ldr	r0, [sl, #4]
   24580:	add	r9, r9, #1
   24584:	cmp	r9, r0
   24588:	blt	244e4 <__assert_fail@plt+0x13034>
   2458c:	ldr	r0, [sl, #8]
   24590:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24594:	vldr	d16, [sp, #8]
   24598:	ldr	r0, [sp, #16]
   2459c:	mov	r7, #0
   245a0:	str	r0, [sl, #8]
   245a4:	vstr	d16, [sl]
   245a8:	mov	r0, r7
   245ac:	sub	sp, fp, #28
   245b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245b4:	mov	r7, r0
   245b8:	ldr	r0, [sp, #16]
   245bc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   245c0:	mov	r0, r7
   245c4:	sub	sp, fp, #28
   245c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245cc:	mov	r7, #12
   245d0:	mov	r0, r7
   245d4:	sub	sp, fp, #28
   245d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245e0:	add	fp, sp, #28
   245e4:	sub	sp, sp, #52	; 0x34
   245e8:	ldr	ip, [r0, #108]	; 0x6c
   245ec:	mov	lr, r1
   245f0:	ldr	r1, [r0, #84]	; 0x54
   245f4:	str	r0, [sp, #24]
   245f8:	mov	sl, r2
   245fc:	mov	r8, #0
   24600:	mov	r0, #0
   24604:	cmp	ip, #1
   24608:	str	r1, [sp, #28]
   2460c:	blt	24650 <__assert_fail@plt+0x131a0>
   24610:	ldr	r0, [sp, #24]
   24614:	mov	r7, #1
   24618:	mov	r1, ip
   2461c:	ldr	r2, [r0, #116]	; 0x74
   24620:	mov	r0, #0
   24624:	add	r6, r1, r0
   24628:	add	r6, r6, r6, lsr #31
   2462c:	asr	r4, r6, #1
   24630:	add	r5, r4, r4, lsl #1
   24634:	add	r5, r2, r5, lsl #3
   24638:	ldr	r5, [r5, #4]
   2463c:	cmp	r5, sl
   24640:	addlt	r0, r7, r6, asr #1
   24644:	movge	r1, r4
   24648:	cmp	r0, r1
   2464c:	blt	24624 <__assert_fail@plt+0x13174>
   24650:	cmp	r0, ip
   24654:	bge	24b74 <__assert_fail@plt+0x136c4>
   24658:	cmn	r0, #1
   2465c:	beq	24b74 <__assert_fail@plt+0x136c4>
   24660:	ldr	r1, [sp, #24]
   24664:	add	r0, r0, r0, lsl #1
   24668:	str	r0, [sp, #8]
   2466c:	ldr	r1, [r1, #116]	; 0x74
   24670:	add	r0, r1, r0, lsl #3
   24674:	ldr	r0, [r0, #4]
   24678:	cmp	r0, sl
   2467c:	bne	24b74 <__assert_fail@plt+0x136c4>
   24680:	str	r3, [sp, #12]
   24684:	mov	r9, #1
   24688:	str	lr, [sp, #16]
   2468c:	ldr	r0, [sp, #8]
   24690:	add	r0, r1, r0, lsl #3
   24694:	mov	r8, r0
   24698:	ldr	r0, [lr, #4]
   2469c:	cmp	r0, #1
   246a0:	bge	24754 <__assert_fail@plt+0x132a4>
   246a4:	b	24734 <__assert_fail@plt+0x13284>
   246a8:	mov	r0, #4
   246ac:	str	r9, [sp, #36]	; 0x24
   246b0:	mov	r4, r1
   246b4:	str	r9, [sp, #32]
   246b8:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   246bc:	cmp	r0, #0
   246c0:	str	r0, [sp, #40]	; 0x28
   246c4:	beq	249e8 <__assert_fail@plt+0x13538>
   246c8:	str	r4, [r0]
   246cc:	mov	r0, #0
   246d0:	str	r0, [fp, #-32]	; 0xffffffe0
   246d4:	ldr	r1, [sp, #28]
   246d8:	sub	r0, fp, #32
   246dc:	add	r2, sp, #32
   246e0:	bl	24cd4 <__assert_fail@plt+0x13824>
   246e4:	ldr	r4, [sp, #24]
   246e8:	ldr	r1, [r4, #100]	; 0x64
   246ec:	str	r0, [r1, r7, lsl #2]
   246f0:	ldr	r0, [sp, #40]	; 0x28
   246f4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   246f8:	ldr	r0, [r4, #100]	; 0x64
   246fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24700:	ldr	r0, [r0, r7, lsl #2]
   24704:	cmp	r1, #0
   24708:	mov	r2, r1
   2470c:	movwne	r2, #1
   24710:	clz	r0, r0
   24714:	lsr	r0, r0, #5
   24718:	ands	r0, r0, r2
   2471c:	ldreq	r1, [sp, #20]
   24720:	str	r1, [sp, #20]
   24724:	ldr	lr, [sp, #16]
   24728:	cmp	r0, #0
   2472c:	cmpne	r0, #4
   24730:	bne	24b5c <__assert_fail@plt+0x136ac>
   24734:	ldrb	r1, [r8, #20]
   24738:	add	r0, r8, #24
   2473c:	cmp	r1, #0
   24740:	beq	24b70 <__assert_fail@plt+0x136c0>
   24744:	mov	r8, r0
   24748:	ldr	r0, [lr, #4]
   2474c:	cmp	r0, #1
   24750:	blt	24734 <__assert_fail@plt+0x13284>
   24754:	subs	r6, r0, #1
   24758:	ldr	r2, [r8]
   2475c:	ldr	r0, [lr, #8]
   24760:	mov	r3, #0
   24764:	beq	2478c <__assert_fail@plt+0x132dc>
   24768:	mov	r1, r6
   2476c:	add	r7, r3, r1
   24770:	lsr	r5, r7, #1
   24774:	ldr	r4, [r0, r5, lsl #2]
   24778:	cmp	r4, r2
   2477c:	addlt	r3, r9, r7, lsr #1
   24780:	movge	r1, r5
   24784:	cmp	r3, r1
   24788:	bcc	2476c <__assert_fail@plt+0x132bc>
   2478c:	ldr	r1, [r0, r3, lsl #2]
   24790:	cmp	r1, r2
   24794:	bne	24734 <__assert_fail@plt+0x13284>
   24798:	ldr	r3, [r8, #12]
   2479c:	ldr	r1, [r8, #8]
   247a0:	add	r3, r3, sl
   247a4:	sub	r7, r3, r1
   247a8:	cmp	r7, sl
   247ac:	bne	248a4 <__assert_fail@plt+0x133f4>
   247b0:	ldr	r1, [sp, #28]
   247b4:	add	r2, r2, r2, lsl #1
   247b8:	cmp	r6, #0
   247bc:	ldr	r1, [r1, #20]
   247c0:	add	r1, r1, r2, lsl #2
   247c4:	mov	r2, #0
   247c8:	ldr	r1, [r1, #8]
   247cc:	ldr	r4, [r1]
   247d0:	beq	247f4 <__assert_fail@plt+0x13344>
   247d4:	add	r1, r2, r6
   247d8:	lsr	r3, r1, #1
   247dc:	ldr	r7, [r0, r3, lsl #2]
   247e0:	cmp	r7, r4
   247e4:	addlt	r2, r9, r1, lsr #1
   247e8:	movge	r6, r3
   247ec:	cmp	r2, r6
   247f0:	bcc	247d4 <__assert_fail@plt+0x13324>
   247f4:	ldr	r1, [r0, r2, lsl #2]
   247f8:	mov	r0, #4
   247fc:	cmp	r1, r4
   24800:	beq	24728 <__assert_fail@plt+0x13278>
   24804:	mov	r0, #4
   24808:	str	r9, [sp, #36]	; 0x24
   2480c:	str	r9, [sp, #32]
   24810:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   24814:	cmp	r0, #0
   24818:	str	r0, [sp, #40]	; 0x28
   2481c:	beq	249d4 <__assert_fail@plt+0x13524>
   24820:	mov	r6, #0
   24824:	str	r4, [r0]
   24828:	ldr	r0, [sp, #28]
   2482c:	ldr	r2, [sp, #12]
   24830:	ldr	r3, [fp, #8]
   24834:	add	r4, sp, #32
   24838:	str	r6, [fp, #-32]	; 0xffffffe0
   2483c:	mov	r1, r4
   24840:	bl	24494 <__assert_fail@plt+0x12fe4>
   24844:	ldr	r5, [sp, #16]
   24848:	mov	r7, r0
   2484c:	mov	r1, r4
   24850:	mov	r0, r5
   24854:	bl	209e8 <__assert_fail@plt+0xf538>
   24858:	mov	r4, r0
   2485c:	ldr	r0, [sp, #40]	; 0x28
   24860:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24864:	orr	r0, r7, r6
   24868:	mov	lr, r5
   2486c:	orrs	r0, r0, r4
   24870:	mov	r0, #2
   24874:	beq	24728 <__assert_fail@plt+0x13278>
   24878:	cmp	r7, #0
   2487c:	mov	r0, #1
   24880:	movne	r4, r7
   24884:	cmp	r6, #0
   24888:	movne	r4, r6
   2488c:	str	r4, [fp, #-32]	; 0xffffffe0
   24890:	str	r4, [sp, #20]
   24894:	cmp	r0, #0
   24898:	cmpne	r0, #4
   2489c:	beq	24734 <__assert_fail@plt+0x13284>
   248a0:	b	24b5c <__assert_fail@plt+0x136ac>
   248a4:	ldr	r0, [sp, #24]
   248a8:	ldr	r0, [r0, #100]	; 0x64
   248ac:	ldr	r5, [r0, r7, lsl #2]
   248b0:	ldr	r0, [sp, #28]
   248b4:	ldr	r0, [r0, #12]
   248b8:	cmp	r5, #0
   248bc:	ldr	r1, [r0, r2, lsl #2]
   248c0:	beq	246a8 <__assert_fail@plt+0x131f8>
   248c4:	ldr	ip, [r5, #8]
   248c8:	cmp	ip, #0
   248cc:	ble	2498c <__assert_fail@plt+0x134dc>
   248d0:	ldr	r0, [r5, #12]
   248d4:	subs	r3, ip, #1
   248d8:	mov	r2, #0
   248dc:	str	r7, [sp, #4]
   248e0:	beq	24904 <__assert_fail@plt+0x13454>
   248e4:	add	r6, r2, r3
   248e8:	lsr	r7, r6, #1
   248ec:	ldr	r4, [r0, r7, lsl #2]
   248f0:	cmp	r4, r1
   248f4:	addlt	r2, r9, r6, lsr #1
   248f8:	movge	r3, r7
   248fc:	cmp	r2, r3
   24900:	bcc	248e4 <__assert_fail@plt+0x13434>
   24904:	ldr	r2, [r0, r2, lsl #2]
   24908:	mov	r0, #4
   2490c:	cmp	r2, r1
   24910:	beq	24728 <__assert_fail@plt+0x13278>
   24914:	ldr	r7, [sp, #4]
   24918:	mov	r4, r1
   2491c:	cmp	ip, #1
   24920:	str	ip, [sp, #36]	; 0x24
   24924:	blt	24994 <__assert_fail@plt+0x134e4>
   24928:	lsl	r0, ip, #2
   2492c:	str	ip, [sp, #32]
   24930:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   24934:	cmp	r0, #0
   24938:	str	r0, [sp, #40]	; 0x28
   2493c:	beq	24a3c <__assert_fail@plt+0x1358c>
   24940:	ldr	r2, [r5, #8]
   24944:	ldr	r1, [r5, #12]
   24948:	mov	r5, r0
   2494c:	lsl	r2, r2, #2
   24950:	bl	11258 <memcpy@plt>
   24954:	ldr	r1, [sp, #32]
   24958:	mov	r6, #0
   2495c:	str	r6, [fp, #-32]	; 0xffffffe0
   24960:	cmp	r1, #0
   24964:	beq	249a8 <__assert_fail@plt+0x134f8>
   24968:	ldr	r0, [sp, #36]	; 0x24
   2496c:	cmp	r0, #0
   24970:	bne	24a50 <__assert_fail@plt+0x135a0>
   24974:	str	r4, [r5]
   24978:	str	r9, [sp, #36]	; 0x24
   2497c:	mov	r6, #0
   24980:	cmp	r6, #0
   24984:	beq	246d4 <__assert_fail@plt+0x13224>
   24988:	b	24a14 <__assert_fail@plt+0x13564>
   2498c:	mov	r4, r1
   24990:	str	ip, [sp, #36]	; 0x24
   24994:	mov	r6, #0
   24998:	str	r6, [sp, #36]	; 0x24
   2499c:	str	r6, [sp, #32]
   249a0:	str	r6, [sp, #40]	; 0x28
   249a4:	str	r6, [fp, #-32]	; 0xffffffe0
   249a8:	mov	r0, #4
   249ac:	str	r9, [sp, #36]	; 0x24
   249b0:	str	r9, [sp, #32]
   249b4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   249b8:	cmp	r0, #0
   249bc:	str	r0, [sp, #40]	; 0x28
   249c0:	beq	24a08 <__assert_fail@plt+0x13558>
   249c4:	str	r4, [r0]
   249c8:	cmp	r6, #0
   249cc:	beq	246d4 <__assert_fail@plt+0x13224>
   249d0:	b	24a14 <__assert_fail@plt+0x13564>
   249d4:	mov	r0, #0
   249d8:	mov	r6, #12
   249dc:	str	r0, [sp, #32]
   249e0:	str	r0, [sp, #36]	; 0x24
   249e4:	b	24828 <__assert_fail@plt+0x13378>
   249e8:	mov	r0, #0
   249ec:	mov	r1, #12
   249f0:	str	r0, [sp, #32]
   249f4:	str	r0, [sp, #36]	; 0x24
   249f8:	mov	r0, #12
   249fc:	str	r1, [fp, #-32]	; 0xffffffe0
   24a00:	str	r0, [sp, #20]
   24a04:	b	24a34 <__assert_fail@plt+0x13584>
   24a08:	mov	r0, #0
   24a0c:	str	r0, [sp, #32]
   24a10:	str	r0, [sp, #36]	; 0x24
   24a14:	clz	r0, r6
   24a18:	lsr	r4, r0, #5
   24a1c:	ldr	r0, [sp, #40]	; 0x28
   24a20:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24a24:	cmp	r4, #0
   24a28:	movwne	r6, #12
   24a2c:	str	r6, [sp, #20]
   24a30:	str	r6, [fp, #-32]	; 0xffffffe0
   24a34:	mov	r0, #1
   24a38:	b	24724 <__assert_fail@plt+0x13274>
   24a3c:	mov	r0, #0
   24a40:	mov	r6, #12
   24a44:	str	r0, [sp, #32]
   24a48:	str	r0, [sp, #36]	; 0x24
   24a4c:	b	249a4 <__assert_fail@plt+0x134f4>
   24a50:	cmp	r1, r0
   24a54:	bne	24a80 <__assert_fail@plt+0x135d0>
   24a58:	lsl	r0, r1, #1
   24a5c:	lsl	r1, r1, #3
   24a60:	str	r0, [sp, #32]
   24a64:	mov	r0, r5
   24a68:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   24a6c:	cmp	r0, #0
   24a70:	beq	24b54 <__assert_fail@plt+0x136a4>
   24a74:	str	r0, [sp, #40]	; 0x28
   24a78:	mov	r5, r0
   24a7c:	ldr	r0, [sp, #36]	; 0x24
   24a80:	ldr	r1, [r5]
   24a84:	cmp	r1, r4
   24a88:	ble	24afc <__assert_fail@plt+0x1364c>
   24a8c:	cmp	r0, #1
   24a90:	blt	24b30 <__assert_fail@plt+0x13680>
   24a94:	ands	r2, r0, #3
   24a98:	sub	r1, r0, #1
   24a9c:	beq	24ac0 <__assert_fail@plt+0x13610>
   24aa0:	add	r6, r5, r0, lsl #2
   24aa4:	mov	r3, r6
   24aa8:	ldr	r7, [r3, #-4]!
   24aac:	subs	r2, r2, #1
   24ab0:	sub	r0, r0, #1
   24ab4:	str	r7, [r6]
   24ab8:	mov	r6, r3
   24abc:	bne	24aa8 <__assert_fail@plt+0x135f8>
   24ac0:	cmp	r1, #3
   24ac4:	bcc	24af4 <__assert_fail@plt+0x13644>
   24ac8:	add	r1, r5, r0, lsl #2
   24acc:	sub	r1, r1, #8
   24ad0:	ldr	r6, [r1, #4]
   24ad4:	ldmda	r1, {r2, r3, r7}
   24ad8:	sub	ip, r1, #4
   24adc:	sub	r0, r0, #4
   24ae0:	cmp	r0, #0
   24ae4:	stm	ip, {r2, r3, r7}
   24ae8:	str	r6, [r1, #8]
   24aec:	sub	r1, r1, #16
   24af0:	bgt	24ad0 <__assert_fail@plt+0x13620>
   24af4:	mov	r0, #0
   24af8:	b	24b30 <__assert_fail@plt+0x13680>
   24afc:	add	r1, r5, r0, lsl #2
   24b00:	ldr	r2, [r1, #-4]
   24b04:	cmp	r2, r4
   24b08:	ble	24b30 <__assert_fail@plt+0x13680>
   24b0c:	sub	r0, r0, #2
   24b10:	mov	r3, r4
   24b14:	str	r2, [r1]
   24b18:	sub	r0, r0, #1
   24b1c:	ldr	r2, [r1, #-8]
   24b20:	sub	r1, r1, #4
   24b24:	cmp	r2, r3
   24b28:	bgt	24b14 <__assert_fail@plt+0x13664>
   24b2c:	add	r0, r0, #2
   24b30:	str	r4, [r5, r0, lsl #2]
   24b34:	ldr	r7, [sp, #4]
   24b38:	mov	r6, #0
   24b3c:	ldr	r0, [sp, #36]	; 0x24
   24b40:	add	r0, r0, #1
   24b44:	str	r0, [sp, #36]	; 0x24
   24b48:	cmp	r6, #0
   24b4c:	beq	246d4 <__assert_fail@plt+0x13224>
   24b50:	b	24a14 <__assert_fail@plt+0x13564>
   24b54:	mov	r6, #0
   24b58:	b	24a14 <__assert_fail@plt+0x13564>
   24b5c:	cmp	r0, #2
   24b60:	bne	24b80 <__assert_fail@plt+0x136d0>
   24b64:	ldr	r0, [sp, #24]
   24b68:	ldr	r1, [r0, #116]	; 0x74
   24b6c:	b	2468c <__assert_fail@plt+0x131dc>
   24b70:	mov	r8, #0
   24b74:	mov	r0, r8
   24b78:	sub	sp, fp, #28
   24b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b80:	ldr	r8, [sp, #20]
   24b84:	mov	r0, r8
   24b88:	sub	sp, fp, #28
   24b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b94:	add	fp, sp, #28
   24b98:	sub	sp, sp, #4
   24b9c:	ldr	r4, [fp, #8]
   24ba0:	mov	r9, r3
   24ba4:	mov	r7, r2
   24ba8:	mov	r8, r1
   24bac:	mov	sl, r0
   24bb0:	mov	r5, #1
   24bb4:	ldr	r0, [r8, #4]
   24bb8:	cmp	r0, #1
   24bbc:	bge	24be4 <__assert_fail@plt+0x13734>
   24bc0:	b	24c28 <__assert_fail@plt+0x13778>
   24bc4:	cmp	r2, #0
   24bc8:	beq	24cbc <__assert_fail@plt+0x1380c>
   24bcc:	add	r0, r0, r7, lsl #2
   24bd0:	ldr	r0, [r0, #8]
   24bd4:	ldr	r7, [r0]
   24bd8:	ldr	r0, [r8, #4]
   24bdc:	cmp	r0, #1
   24be0:	blt	24c28 <__assert_fail@plt+0x13778>
   24be4:	subs	r2, r0, #1
   24be8:	ldr	r0, [r8, #8]
   24bec:	mov	ip, r4
   24bf0:	mov	r1, #0
   24bf4:	beq	24c18 <__assert_fail@plt+0x13768>
   24bf8:	add	r3, r1, r2
   24bfc:	lsr	r6, r3, #1
   24c00:	ldr	r4, [r0, r6, lsl #2]
   24c04:	cmp	r4, r7
   24c08:	addlt	r1, r5, r3, lsr #1
   24c0c:	movge	r2, r6
   24c10:	cmp	r1, r2
   24c14:	bcc	24bf8 <__assert_fail@plt+0x13748>
   24c18:	ldr	r0, [r0, r1, lsl #2]
   24c1c:	mov	r4, ip
   24c20:	cmp	r0, r7
   24c24:	beq	24cbc <__assert_fail@plt+0x1380c>
   24c28:	ldr	r0, [sl]
   24c2c:	add	r1, r0, r7, lsl #3
   24c30:	ldrb	r1, [r1, #4]
   24c34:	cmp	r1, r4
   24c38:	bne	24c48 <__assert_fail@plt+0x13798>
   24c3c:	ldr	r0, [r0, r7, lsl #3]
   24c40:	cmp	r0, r9
   24c44:	beq	24ca0 <__assert_fail@plt+0x137f0>
   24c48:	mov	r0, r8
   24c4c:	mov	r1, r7
   24c50:	bl	20b88 <__assert_fail@plt+0xf6d8>
   24c54:	cmp	r0, #0
   24c58:	beq	24cc8 <__assert_fail@plt+0x13818>
   24c5c:	ldr	r0, [sl, #20]
   24c60:	add	r7, r7, r7, lsl #1
   24c64:	add	r1, r0, r7, lsl #2
   24c68:	ldr	r2, [r1, #4]
   24c6c:	cmp	r2, #2
   24c70:	bne	24bc4 <__assert_fail@plt+0x13714>
   24c74:	ldr	r0, [r1, #8]
   24c78:	mov	r1, r8
   24c7c:	mov	r3, r9
   24c80:	ldr	r2, [r0, #4]
   24c84:	mov	r0, sl
   24c88:	str	r4, [sp]
   24c8c:	bl	24b90 <__assert_fail@plt+0x136e0>
   24c90:	cmp	r0, #0
   24c94:	bne	24cc0 <__assert_fail@plt+0x13810>
   24c98:	ldr	r0, [sl, #20]
   24c9c:	b	24bcc <__assert_fail@plt+0x1371c>
   24ca0:	cmp	r4, #9
   24ca4:	bne	24cbc <__assert_fail@plt+0x1380c>
   24ca8:	mov	r0, r8
   24cac:	mov	r1, r7
   24cb0:	bl	20b88 <__assert_fail@plt+0xf6d8>
   24cb4:	cmp	r0, #0
   24cb8:	beq	24cc8 <__assert_fail@plt+0x13818>
   24cbc:	mov	r0, #0
   24cc0:	sub	sp, fp, #28
   24cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24cc8:	mov	r0, #12
   24ccc:	sub	sp, fp, #28
   24cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cd8:	add	fp, sp, #28
   24cdc:	sub	sp, sp, #4
   24ce0:	ldr	r9, [r2, #4]
   24ce4:	cmp	r9, #0
   24ce8:	beq	24fb4 <__assert_fail@plt+0x13b04>
   24cec:	mov	r6, r2
   24cf0:	mov	r8, r1
   24cf4:	cmp	r9, #1
   24cf8:	mov	r7, r9
   24cfc:	blt	24de8 <__assert_fail@plt+0x13938>
   24d00:	ldr	ip, [r6, #8]
   24d04:	mov	sl, #0
   24d08:	cmp	r9, #4
   24d0c:	mov	r7, r9
   24d10:	bcc	24dd0 <__assert_fail@plt+0x13920>
   24d14:	mov	r3, #0
   24d18:	bic	sl, r9, #3
   24d1c:	mov	r1, #1
   24d20:	str	r8, [sp]
   24d24:	vdup.32	q8, r3
   24d28:	sub	r4, sl, #4
   24d2c:	add	r1, r1, r4, lsr #2
   24d30:	cmp	r4, #12
   24d34:	and	lr, r1, #3
   24d38:	vmov.32	d16[0], r9
   24d3c:	bcc	24d90 <__assert_fail@plt+0x138e0>
   24d40:	sub	r5, r1, lr
   24d44:	mov	r3, #0
   24d48:	mov	r4, #64	; 0x40
   24d4c:	mov	r7, ip
   24d50:	mov	r1, ip
   24d54:	vld1.32	{d18-d19}, [r1], r4
   24d58:	add	r8, r7, #16
   24d5c:	add	r2, r7, #32
   24d60:	subs	r5, r5, #4
   24d64:	add	r3, r3, #16
   24d68:	vld1.32	{d20-d21}, [r8]
   24d6c:	vadd.i32	q8, q9, q8
   24d70:	vld1.32	{d18-d19}, [r2]
   24d74:	add	r2, r7, #48	; 0x30
   24d78:	mov	r7, r1
   24d7c:	vadd.i32	q8, q10, q8
   24d80:	vld1.32	{d20-d21}, [r2]
   24d84:	vadd.i32	q8, q9, q8
   24d88:	vadd.i32	q8, q10, q8
   24d8c:	bne	24d54 <__assert_fail@plt+0x138a4>
   24d90:	cmp	lr, #0
   24d94:	beq	24db0 <__assert_fail@plt+0x13900>
   24d98:	add	r1, ip, r3, lsl #2
   24d9c:	rsb	r3, lr, #0
   24da0:	vld1.32	{d18-d19}, [r1]!
   24da4:	adds	r3, r3, #1
   24da8:	vadd.i32	q8, q9, q8
   24dac:	bcc	24da0 <__assert_fail@plt+0x138f0>
   24db0:	vext.8	q9, q8, q8, #8
   24db4:	ldr	r8, [sp]
   24db8:	cmp	r9, sl
   24dbc:	vadd.i32	q8, q8, q9
   24dc0:	vdup.32	q9, d16[1]
   24dc4:	vadd.i32	q8, q8, q9
   24dc8:	vmov.32	r7, d16[0]
   24dcc:	beq	24de8 <__assert_fail@plt+0x13938>
   24dd0:	add	r1, ip, sl, lsl #2
   24dd4:	sub	r2, r9, sl
   24dd8:	ldr	r3, [r1], #4
   24ddc:	subs	r2, r2, #1
   24de0:	add	r7, r3, r7
   24de4:	bne	24dd8 <__assert_fail@plt+0x13928>
   24de8:	ldr	r1, [r8, #68]	; 0x44
   24dec:	ldr	r2, [r8, #32]
   24df0:	str	r0, [sp]
   24df4:	and	r1, r1, r7
   24df8:	add	r3, r1, r1, lsl #1
   24dfc:	ldr	r1, [r2, r3, lsl #2]
   24e00:	cmp	r1, #1
   24e04:	blt	24e88 <__assert_fail@plt+0x139d8>
   24e08:	cmp	r6, #0
   24e0c:	beq	24e88 <__assert_fail@plt+0x139d8>
   24e10:	add	r2, r2, r3, lsl #2
   24e14:	sub	ip, r9, #1
   24e18:	mov	r5, #0
   24e1c:	ldr	lr, [r2, #8]
   24e20:	ldr	r4, [lr, r5, lsl #2]
   24e24:	ldr	r3, [r4]
   24e28:	cmp	r7, r3
   24e2c:	beq	24e4c <__assert_fail@plt+0x1399c>
   24e30:	add	r5, r5, #1
   24e34:	cmp	r5, r1
   24e38:	bge	24e88 <__assert_fail@plt+0x139d8>
   24e3c:	ldr	r4, [lr, r5, lsl #2]
   24e40:	ldr	r3, [r4]
   24e44:	cmp	r7, r3
   24e48:	bne	24e30 <__assert_fail@plt+0x13980>
   24e4c:	ldr	r3, [r4, #8]
   24e50:	cmp	r3, r9
   24e54:	bne	24e30 <__assert_fail@plt+0x13980>
   24e58:	mov	r3, ip
   24e5c:	add	r0, r3, #1
   24e60:	cmp	r0, #1
   24e64:	blt	24fa8 <__assert_fail@plt+0x13af8>
   24e68:	ldr	r0, [r6, #8]
   24e6c:	ldr	r2, [r4, #12]
   24e70:	ldr	r0, [r0, r3, lsl #2]
   24e74:	ldr	r2, [r2, r3, lsl #2]
   24e78:	sub	r3, r3, #1
   24e7c:	cmp	r2, r0
   24e80:	beq	24e5c <__assert_fail@plt+0x139ac>
   24e84:	b	24e30 <__assert_fail@plt+0x13980>
   24e88:	mov	r0, #56	; 0x38
   24e8c:	mov	r1, #1
   24e90:	bl	2ba08 <__assert_fail@plt+0x1a558>
   24e94:	cmp	r0, #0
   24e98:	beq	24fe8 <__assert_fail@plt+0x13b38>
   24e9c:	mov	r4, r0
   24ea0:	ldr	r0, [r6, #4]
   24ea4:	add	sl, r4, #4
   24ea8:	cmp	r0, #1
   24eac:	str	r0, [r4, #8]
   24eb0:	blt	24f78 <__assert_fail@plt+0x13ac8>
   24eb4:	str	r0, [r4, #4]
   24eb8:	lsl	r0, r0, #2
   24ebc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   24ec0:	cmp	r0, #0
   24ec4:	str	r0, [r4, #12]
   24ec8:	beq	24fd4 <__assert_fail@plt+0x13b24>
   24ecc:	ldmib	r6, {r5, r6}
   24ed0:	mov	r1, r6
   24ed4:	mov	r9, r8
   24ed8:	lsl	r2, r5, #2
   24edc:	bl	11258 <memcpy@plt>
   24ee0:	cmp	r5, #1
   24ee4:	str	sl, [r4, #40]	; 0x28
   24ee8:	blt	24f90 <__assert_fail@plt+0x13ae0>
   24eec:	movw	ip, #65280	; 0xff00
   24ef0:	ldr	sl, [r9]
   24ef4:	mov	lr, #32
   24ef8:	movt	ip, #3
   24efc:	add	r8, ip, #255	; 0xff
   24f00:	b	24f24 <__assert_fail@plt+0x13a74>
   24f04:	ldr	r0, [r1]
   24f08:	tst	r0, ip
   24f0c:	beq	24f18 <__assert_fail@plt+0x13a68>
   24f10:	orr	r0, r3, #128	; 0x80
   24f14:	strb	r0, [r4, #52]	; 0x34
   24f18:	add	r6, r6, #4
   24f1c:	subs	r5, r5, #1
   24f20:	beq	24f90 <__assert_fail@plt+0x13ae0>
   24f24:	ldr	r0, [r6]
   24f28:	add	r1, sl, r0, lsl #3
   24f2c:	ldr	r0, [r1, #4]!
   24f30:	and	r3, r0, r8
   24f34:	cmp	r3, #1
   24f38:	beq	24f18 <__assert_fail@plt+0x13a68>
   24f3c:	ldrb	r2, [r4, #52]	; 0x34
   24f40:	and	r3, lr, r0, lsr #15
   24f44:	uxtb	r0, r0
   24f48:	cmp	r0, #12
   24f4c:	orr	r3, r2, r3
   24f50:	strb	r3, [r4, #52]	; 0x34
   24f54:	beq	24f10 <__assert_fail@plt+0x13a60>
   24f58:	cmp	r0, #4
   24f5c:	beq	24f70 <__assert_fail@plt+0x13ac0>
   24f60:	cmp	r0, #2
   24f64:	bne	24f04 <__assert_fail@plt+0x13a54>
   24f68:	orr	r0, r3, #16
   24f6c:	b	24f14 <__assert_fail@plt+0x13a64>
   24f70:	orr	r0, r3, #64	; 0x40
   24f74:	b	24f14 <__assert_fail@plt+0x13a64>
   24f78:	mov	r0, #0
   24f7c:	mov	r9, r8
   24f80:	str	r0, [sl]
   24f84:	str	r0, [sl, #4]
   24f88:	str	r0, [sl, #8]
   24f8c:	str	sl, [r4, #40]	; 0x28
   24f90:	mov	r0, r9
   24f94:	mov	r1, r4
   24f98:	mov	r2, r7
   24f9c:	bl	21768 <__assert_fail@plt+0x102b8>
   24fa0:	cmp	r0, #0
   24fa4:	bne	24fc8 <__assert_fail@plt+0x13b18>
   24fa8:	mov	r0, r4
   24fac:	sub	sp, fp, #28
   24fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fb4:	mov	r4, #0
   24fb8:	str	r4, [r0]
   24fbc:	mov	r0, r4
   24fc0:	sub	sp, fp, #28
   24fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fc8:	mov	r0, r4
   24fcc:	bl	1a760 <__assert_fail@plt+0x92b0>
   24fd0:	b	24fe8 <__assert_fail@plt+0x13b38>
   24fd4:	mov	r0, #0
   24fd8:	str	r0, [r4, #4]
   24fdc:	str	r0, [r4, #8]
   24fe0:	mov	r0, r4
   24fe4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   24fe8:	ldr	r1, [sp]
   24fec:	mov	r0, #12
   24ff0:	mov	r4, #0
   24ff4:	str	r0, [r1]
   24ff8:	mov	r0, r4
   24ffc:	sub	sp, fp, #28
   25000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25004:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25008:	add	fp, sp, #24
   2500c:	ldr	lr, [r0]
   25010:	add	r7, lr, r1, lsl #3
   25014:	ldrb	r9, [r7, #4]
   25018:	cmp	r9, #7
   2501c:	beq	2521c <__assert_fail@plt+0x13d6c>
   25020:	ldr	ip, [r2, #80]	; 0x50
   25024:	mov	r6, #1
   25028:	cmp	ip, #1
   2502c:	beq	2506c <__assert_fail@plt+0x13bbc>
   25030:	ldr	r5, [r2, #28]
   25034:	add	r7, r3, #1
   25038:	cmp	r7, r5
   2503c:	bge	2506c <__assert_fail@plt+0x13bbc>
   25040:	ldr	r6, [r2, #8]
   25044:	sub	r5, r5, r3
   25048:	add	r7, r6, r3, lsl #2
   2504c:	mov	r6, #1
   25050:	ldr	r4, [r7, r6, lsl #2]
   25054:	cmn	r4, #1
   25058:	bne	2506c <__assert_fail@plt+0x13bbc>
   2505c:	add	r6, r6, #1
   25060:	cmp	r5, r6
   25064:	bne	25050 <__assert_fail@plt+0x13ba0>
   25068:	mov	r6, r5
   2506c:	mov	r8, #0
   25070:	cmp	r9, #5
   25074:	bne	250bc <__assert_fail@plt+0x13c0c>
   25078:	cmp	r6, #2
   2507c:	blt	251ec <__assert_fail@plt+0x13d3c>
   25080:	ldr	r0, [r0, #128]	; 0x80
   25084:	tst	r0, #64	; 0x40
   25088:	bne	2509c <__assert_fail@plt+0x13bec>
   2508c:	ldr	r1, [r2, #4]
   25090:	ldrb	r1, [r1, r3]
   25094:	cmp	r1, #10
   25098:	beq	251ec <__assert_fail@plt+0x13d3c>
   2509c:	tst	r0, #128	; 0x80
   250a0:	beq	251e8 <__assert_fail@plt+0x13d38>
   250a4:	ldr	r0, [r2, #4]
   250a8:	ldrb	r0, [r0, r3]
   250ac:	cmp	r0, #0
   250b0:	movne	r8, r6
   250b4:	mov	r0, r8
   250b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   250bc:	cmp	r9, #6
   250c0:	bne	251ec <__assert_fail@plt+0x13d3c>
   250c4:	cmp	r6, #2
   250c8:	blt	251ec <__assert_fail@plt+0x13d3c>
   250cc:	ldr	r7, [lr, r1, lsl #3]
   250d0:	ldr	r0, [r7, #32]
   250d4:	cmp	r0, #0
   250d8:	bne	250f4 <__assert_fail@plt+0x13c44>
   250dc:	ldr	r1, [r7, #36]	; 0x24
   250e0:	cmp	r1, #0
   250e4:	bne	250f4 <__assert_fail@plt+0x13c44>
   250e8:	ldr	r1, [r7, #20]
   250ec:	cmp	r1, #0
   250f0:	beq	25208 <__assert_fail@plt+0x13d58>
   250f4:	cmp	ip, #1
   250f8:	bne	25114 <__assert_fail@plt+0x13c64>
   250fc:	ldr	r1, [r2, #4]
   25100:	ldrb	r5, [r1, r3]
   25104:	ldr	r1, [r7, #20]
   25108:	cmp	r1, #1
   2510c:	bge	25128 <__assert_fail@plt+0x13c78>
   25110:	b	25148 <__assert_fail@plt+0x13c98>
   25114:	ldr	r1, [r2, #8]
   25118:	ldr	r5, [r1, r3, lsl #2]
   2511c:	ldr	r1, [r7, #20]
   25120:	cmp	r1, #1
   25124:	blt	25148 <__assert_fail@plt+0x13c98>
   25128:	ldr	r2, [r7]
   2512c:	mov	r3, #0
   25130:	ldr	r4, [r2, r3, lsl #2]
   25134:	cmp	r5, r4
   25138:	beq	251c8 <__assert_fail@plt+0x13d18>
   2513c:	add	r3, r3, #1
   25140:	cmp	r3, r1
   25144:	blt	25130 <__assert_fail@plt+0x13c80>
   25148:	ldr	r1, [r7, #36]	; 0x24
   2514c:	cmp	r1, #1
   25150:	blt	25184 <__assert_fail@plt+0x13cd4>
   25154:	mov	r4, #0
   25158:	ldr	r0, [r7, #12]
   2515c:	ldr	r1, [r0, r4, lsl #2]
   25160:	mov	r0, r5
   25164:	bl	111ec <iswctype@plt>
   25168:	cmp	r0, #0
   2516c:	bne	251c8 <__assert_fail@plt+0x13d18>
   25170:	ldr	r0, [r7, #36]	; 0x24
   25174:	add	r4, r4, #1
   25178:	cmp	r4, r0
   2517c:	blt	25158 <__assert_fail@plt+0x13ca8>
   25180:	ldr	r0, [r7, #32]
   25184:	cmp	r0, #1
   25188:	blt	251f4 <__assert_fail@plt+0x13d44>
   2518c:	ldr	r1, [r7, #4]
   25190:	mov	r2, #0
   25194:	ldr	r3, [r1, r2, lsl #2]
   25198:	cmp	r3, r5
   2519c:	bls	251b8 <__assert_fail@plt+0x13d08>
   251a0:	add	r2, r2, #1
   251a4:	cmp	r2, r0
   251a8:	bge	251f4 <__assert_fail@plt+0x13d44>
   251ac:	ldr	r3, [r1, r2, lsl #2]
   251b0:	cmp	r3, r5
   251b4:	bhi	251a0 <__assert_fail@plt+0x13cf0>
   251b8:	ldr	r3, [r7, #8]
   251bc:	ldr	r3, [r3, r2, lsl #2]
   251c0:	cmp	r5, r3
   251c4:	bhi	251a0 <__assert_fail@plt+0x13cf0>
   251c8:	mov	r0, r6
   251cc:	ldrb	r1, [r7, #16]
   251d0:	tst	r1, #1
   251d4:	beq	25204 <__assert_fail@plt+0x13d54>
   251d8:	cmp	r0, #0
   251dc:	bgt	251ec <__assert_fail@plt+0x13d3c>
   251e0:	cmp	r6, #1
   251e4:	movle	r6, #1
   251e8:	mov	r8, r6
   251ec:	mov	r0, r8
   251f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   251f4:	mov	r0, #0
   251f8:	ldrb	r1, [r7, #16]
   251fc:	tst	r1, #1
   25200:	bne	251d8 <__assert_fail@plt+0x13d28>
   25204:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25208:	mov	r5, #0
   2520c:	ldr	r1, [r7, #20]
   25210:	cmp	r1, #1
   25214:	bge	25128 <__assert_fail@plt+0x13c78>
   25218:	b	25148 <__assert_fail@plt+0x13c98>
   2521c:	ldr	r0, [r2, #4]
   25220:	mov	r8, #0
   25224:	ldrb	r6, [r0, r3]
   25228:	cmp	r6, #194	; 0xc2
   2522c:	bcc	251ec <__assert_fail@plt+0x13d3c>
   25230:	ldr	r2, [r2, #48]	; 0x30
   25234:	add	r1, r3, #2
   25238:	cmp	r1, r2
   2523c:	bgt	251ec <__assert_fail@plt+0x13d3c>
   25240:	add	r1, r3, r0
   25244:	cmp	r6, #223	; 0xdf
   25248:	ldrb	r7, [r1, #1]
   2524c:	bhi	25274 <__assert_fail@plt+0x13dc4>
   25250:	cmp	r7, #192	; 0xc0
   25254:	mov	r0, #0
   25258:	movwcc	r0, #1
   2525c:	lsl	r8, r0, #1
   25260:	sxtb	r0, r7
   25264:	cmn	r0, #1
   25268:	movwgt	r8, #0
   2526c:	mov	r0, r8
   25270:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25274:	cmp	r6, #239	; 0xef
   25278:	bhi	25294 <__assert_fail@plt+0x13de4>
   2527c:	mov	r0, #3
   25280:	cmp	r6, #224	; 0xe0
   25284:	bne	252f0 <__assert_fail@plt+0x13e40>
   25288:	cmp	r7, #160	; 0xa0
   2528c:	bcc	251ec <__assert_fail@plt+0x13d3c>
   25290:	b	252f0 <__assert_fail@plt+0x13e40>
   25294:	cmp	r6, #247	; 0xf7
   25298:	bhi	252b4 <__assert_fail@plt+0x13e04>
   2529c:	mov	r0, #4
   252a0:	cmp	r6, #240	; 0xf0
   252a4:	bne	252f0 <__assert_fail@plt+0x13e40>
   252a8:	cmp	r7, #144	; 0x90
   252ac:	bcc	251ec <__assert_fail@plt+0x13d3c>
   252b0:	b	252f0 <__assert_fail@plt+0x13e40>
   252b4:	cmp	r6, #251	; 0xfb
   252b8:	bhi	252d4 <__assert_fail@plt+0x13e24>
   252bc:	mov	r0, #5
   252c0:	cmp	r6, #248	; 0xf8
   252c4:	bne	252f0 <__assert_fail@plt+0x13e40>
   252c8:	cmp	r7, #136	; 0x88
   252cc:	bcc	251ec <__assert_fail@plt+0x13d3c>
   252d0:	b	252f0 <__assert_fail@plt+0x13e40>
   252d4:	cmp	r6, #253	; 0xfd
   252d8:	bhi	251ec <__assert_fail@plt+0x13d3c>
   252dc:	mov	r0, #6
   252e0:	cmp	r6, #252	; 0xfc
   252e4:	bne	252f0 <__assert_fail@plt+0x13e40>
   252e8:	cmp	r7, #132	; 0x84
   252ec:	bcc	251ec <__assert_fail@plt+0x13d3c>
   252f0:	add	r3, r0, r3
   252f4:	cmp	r3, r2
   252f8:	bgt	251ec <__assert_fail@plt+0x13d3c>
   252fc:	ldrb	r2, [r1, #1]
   25300:	sxtb	r3, r2
   25304:	cmn	r3, #1
   25308:	bgt	251ec <__assert_fail@plt+0x13d3c>
   2530c:	cmp	r2, #191	; 0xbf
   25310:	bhi	251ec <__assert_fail@plt+0x13d3c>
   25314:	ldrb	r2, [r1, #2]
   25318:	sxtb	r3, r2
   2531c:	cmn	r3, #1
   25320:	bgt	251ec <__assert_fail@plt+0x13d3c>
   25324:	cmp	r2, #191	; 0xbf
   25328:	bhi	251ec <__assert_fail@plt+0x13d3c>
   2532c:	cmp	r0, #3
   25330:	beq	25204 <__assert_fail@plt+0x13d54>
   25334:	ldrb	r2, [r1, #3]
   25338:	sxtb	r3, r2
   2533c:	cmn	r3, #1
   25340:	bgt	251ec <__assert_fail@plt+0x13d3c>
   25344:	cmp	r2, #191	; 0xbf
   25348:	bhi	251ec <__assert_fail@plt+0x13d3c>
   2534c:	cmp	r0, #4
   25350:	beq	25204 <__assert_fail@plt+0x13d54>
   25354:	ldrb	r2, [r1, #4]
   25358:	sxtb	r3, r2
   2535c:	cmn	r3, #1
   25360:	bgt	251ec <__assert_fail@plt+0x13d3c>
   25364:	cmp	r2, #191	; 0xbf
   25368:	bhi	251ec <__assert_fail@plt+0x13d3c>
   2536c:	cmp	r0, #5
   25370:	beq	25204 <__assert_fail@plt+0x13d54>
   25374:	ldrsb	r1, [r1, #5]
   25378:	uxtb	r2, r1
   2537c:	cmp	r2, #191	; 0xbf
   25380:	movwhi	r0, #0
   25384:	cmn	r1, #1
   25388:	movwgt	r0, #0
   2538c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25390:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25394:	add	fp, sp, #24
   25398:	ldr	r4, [r1, #4]
   2539c:	mov	r6, r0
   253a0:	mvn	r0, #0
   253a4:	mov	r8, #0
   253a8:	uxtab	r3, r0, r4
   253ac:	cmp	r3, #6
   253b0:	bhi	2555c <__assert_fail@plt+0x140ac>
   253b4:	ldr	r0, [r6, #4]
   253b8:	mov	r9, r1
   253bc:	ldrb	r1, [r0, r2]
   253c0:	add	r7, pc, #4
   253c4:	sxtb	r0, r1
   253c8:	ldr	pc, [r7, r3, lsl #2]
   253cc:	andeq	r5, r2, r8, ror #7
   253d0:	andeq	r5, r2, ip, asr r5
   253d4:	strdeq	r5, [r2], -ip
   253d8:	andeq	r5, r2, ip, asr r5
   253dc:	andeq	r5, r2, r4, lsr #8
   253e0:	andeq	r5, r2, ip, asr r5
   253e4:	andeq	r5, r2, ip, lsl r4
   253e8:	ldrb	r3, [r9]
   253ec:	uxtb	r7, r0
   253f0:	cmp	r3, r7
   253f4:	beq	25444 <__assert_fail@plt+0x13f94>
   253f8:	b	2555c <__assert_fail@plt+0x140ac>
   253fc:	ldr	r3, [r9]
   25400:	ubfx	r7, r1, #5, #3
   25404:	mov	r5, #1
   25408:	ldr	r3, [r3, r7, lsl #2]
   2540c:	and	r7, r1, #31
   25410:	tst	r3, r5, lsl r7
   25414:	bne	25444 <__assert_fail@plt+0x13f94>
   25418:	b	2555c <__assert_fail@plt+0x140ac>
   2541c:	cmp	r0, #0
   25420:	bmi	2555c <__assert_fail@plt+0x140ac>
   25424:	cmp	r1, #0
   25428:	beq	254ec <__assert_fail@plt+0x1403c>
   2542c:	cmp	r1, #10
   25430:	bne	25444 <__assert_fail@plt+0x13f94>
   25434:	ldr	r3, [r6, #84]	; 0x54
   25438:	ldrb	r3, [r3, #128]	; 0x80
   2543c:	tst	r3, #64	; 0x40
   25440:	beq	2555c <__assert_fail@plt+0x140ac>
   25444:	movw	r3, #65280	; 0xff00
   25448:	movt	r3, #3
   2544c:	tst	r4, r3
   25450:	beq	254b0 <__assert_fail@plt+0x14000>
   25454:	cmn	r2, #1
   25458:	ble	25490 <__assert_fail@plt+0x13fe0>
   2545c:	ldr	r3, [r6, #48]	; 0x30
   25460:	cmp	r3, r2
   25464:	beq	2557c <__assert_fail@plt+0x140cc>
   25468:	ldr	r3, [r6, #80]	; 0x50
   2546c:	cmp	r3, #2
   25470:	blt	254bc <__assert_fail@plt+0x1400c>
   25474:	ldr	r0, [r6, #8]
   25478:	ldr	r7, [r0, r2, lsl #2]
   2547c:	cmn	r7, #1
   25480:	bne	25500 <__assert_fail@plt+0x14050>
   25484:	sub	r2, r2, #1
   25488:	cmn	r2, #1
   2548c:	bne	25478 <__assert_fail@plt+0x13fc8>
   25490:	ldr	r1, [r6, #60]	; 0x3c
   25494:	and	r0, r1, #1
   25498:	tst	r4, #1024	; 0x400
   2549c:	eor	r2, r0, #1
   254a0:	beq	25538 <__assert_fail@plt+0x14088>
   254a4:	cmp	r0, #0
   254a8:	beq	2555c <__assert_fail@plt+0x140ac>
   254ac:	b	25538 <__assert_fail@plt+0x14088>
   254b0:	mov	r8, #1
   254b4:	mov	r0, r8
   254b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   254bc:	ldr	r2, [r6, #68]	; 0x44
   254c0:	ubfx	r3, r1, #5, #3
   254c4:	and	r7, r1, #31
   254c8:	mov	r1, #1
   254cc:	ldr	r3, [r2, r3, lsl #2]
   254d0:	mov	r2, #0
   254d4:	tst	r3, r1, lsl r7
   254d8:	bne	25538 <__assert_fail@plt+0x14088>
   254dc:	mov	r1, #0
   254e0:	cmp	r0, #10
   254e4:	beq	25518 <__assert_fail@plt+0x14068>
   254e8:	b	25528 <__assert_fail@plt+0x14078>
   254ec:	ldr	r3, [r6, #84]	; 0x54
   254f0:	ldrb	r3, [r3, #128]	; 0x80
   254f4:	tst	r3, #128	; 0x80
   254f8:	bne	2555c <__assert_fail@plt+0x140ac>
   254fc:	b	25444 <__assert_fail@plt+0x13f94>
   25500:	ldrb	r0, [r6, #78]	; 0x4e
   25504:	cmp	r0, #0
   25508:	bne	2559c <__assert_fail@plt+0x140ec>
   2550c:	mov	r1, #0
   25510:	cmp	r7, #10
   25514:	bne	25528 <__assert_fail@plt+0x14078>
   25518:	ldrb	r0, [r6, #77]	; 0x4d
   2551c:	cmp	r0, #0
   25520:	movwne	r0, #1
   25524:	lsl	r1, r0, #1
   25528:	and	r0, r1, #1
   2552c:	tst	r4, #1024	; 0x400
   25530:	eor	r2, r0, #1
   25534:	bne	254a4 <__assert_fail@plt+0x13ff4>
   25538:	ldr	r0, [r9, #4]
   2553c:	cmp	r2, #0
   25540:	bne	2554c <__assert_fail@plt+0x1409c>
   25544:	ands	r2, r0, #2048	; 0x800
   25548:	bne	2555c <__assert_fail@plt+0x140ac>
   2554c:	tst	r1, #2
   25550:	bne	25564 <__assert_fail@plt+0x140b4>
   25554:	ands	r2, r0, #8192	; 0x2000
   25558:	beq	25564 <__assert_fail@plt+0x140b4>
   2555c:	mov	r0, r8
   25560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25564:	uxth	r0, r0
   25568:	mov	r2, #1
   2556c:	and	r1, r1, #8
   25570:	eor	r0, r2, r0, lsr #15
   25574:	orr	r0, r0, r1, lsr #3
   25578:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2557c:	ldr	r0, [r6, #88]	; 0x58
   25580:	and	r0, r0, #2
   25584:	eor	r1, r0, #10
   25588:	and	r0, r1, #1
   2558c:	tst	r4, #1024	; 0x400
   25590:	eor	r2, r0, #1
   25594:	bne	254a4 <__assert_fail@plt+0x13ff4>
   25598:	b	25538 <__assert_fail@plt+0x14088>
   2559c:	mov	r0, r7
   255a0:	bl	113b4 <iswalnum@plt>
   255a4:	mov	r1, #1
   255a8:	mov	r2, #0
   255ac:	cmp	r7, #95	; 0x5f
   255b0:	beq	25538 <__assert_fail@plt+0x14088>
   255b4:	cmp	r0, #0
   255b8:	beq	2550c <__assert_fail@plt+0x1405c>
   255bc:	b	25538 <__assert_fail@plt+0x14088>
   255c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255c4:	add	fp, sp, #28
   255c8:	sub	sp, sp, #4
   255cc:	vpush	{d8-d9}
   255d0:	sub	sp, sp, #2272	; 0x8e0
   255d4:	sub	sp, sp, #12288	; 0x3000
   255d8:	sub	lr, fp, #1024	; 0x400
   255dc:	vmov.i32	q4, #0	; 0x00000000
   255e0:	mov	r8, r0
   255e4:	mov	r0, #0
   255e8:	str	r1, [sp, #104]	; 0x68
   255ec:	sub	r3, lr, #56	; 0x38
   255f0:	str	r0, [r1, #44]	; 0x2c
   255f4:	str	r0, [r1, #48]	; 0x30
   255f8:	mov	r0, r3
   255fc:	vst1.64	{d8-d9}, [r0]!
   25600:	vst1.64	{d8-d9}, [r0]
   25604:	ldr	r0, [r1, #8]
   25608:	cmp	r0, #0
   2560c:	ble	26d64 <__assert_fail@plt+0x158b4>
   25610:	add	r0, sp, #168	; 0xa8
   25614:	add	r2, r8, #96	; 0x60
   25618:	mov	r1, #0
   2561c:	str	r8, [sp, #96]	; 0x60
   25620:	add	r0, r0, #28
   25624:	str	r2, [sp]
   25628:	str	r0, [sp, #12]
   2562c:	add	r0, r2, #16
   25630:	str	r0, [sp, #4]
   25634:	add	r0, r3, #16
   25638:	str	r0, [sp, #8]
   2563c:	mov	r0, #0
   25640:	str	r0, [sp, #164]	; 0xa4
   25644:	b	25674 <__assert_fail@plt+0x141c4>
   25648:	sub	lr, fp, #1024	; 0x400
   2564c:	sub	r0, lr, #56	; 0x38
   25650:	vst1.64	{d8-d9}, [r0]!
   25654:	vst1.64	{d8-d9}, [r0]
   25658:	ldr	r8, [sp, #96]	; 0x60
   2565c:	ldr	r1, [sp, #100]	; 0x64
   25660:	ldr	r0, [sp, #104]	; 0x68
   25664:	add	r1, r1, #1
   25668:	ldr	r0, [r0, #8]
   2566c:	cmp	r1, r0
   25670:	bge	263d8 <__assert_fail@plt+0x14f28>
   25674:	ldr	r0, [sp, #104]	; 0x68
   25678:	ldr	r9, [r8]
   2567c:	str	r1, [sp, #100]	; 0x64
   25680:	ldr	r0, [r0, #12]
   25684:	ldr	ip, [r0, r1, lsl #2]
   25688:	add	r0, r9, ip, lsl #3
   2568c:	ldr	r0, [r0, #4]
   25690:	uxtb	r6, r0
   25694:	cmp	r6, #1
   25698:	bne	2578c <__assert_fail@plt+0x142dc>
   2569c:	ldrb	r1, [r9, ip, lsl #3]
   256a0:	sub	lr, fp, #1024	; 0x400
   256a4:	mov	r5, #1
   256a8:	sub	r3, lr, #56	; 0x38
   256ac:	add	lr, sp, #168	; 0xa8
   256b0:	mov	r7, r3
   256b4:	ubfx	r2, r1, #5, #3
   256b8:	and	r1, r1, #31
   256bc:	ldr	r3, [r3, r2, lsl #2]
   256c0:	orr	r1, r3, r5, lsl r1
   256c4:	str	r1, [r7, r2, lsl #2]
   256c8:	movw	r1, #65280	; 0xff00
   256cc:	ldr	r7, [sp, #12]
   256d0:	movt	r1, #3
   256d4:	ands	r1, r0, r1
   256d8:	beq	25ad8 <__assert_fail@plt+0x14628>
   256dc:	tst	r0, #8192	; 0x2000
   256e0:	beq	2570c <__assert_fail@plt+0x1425c>
   256e4:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   256e8:	sub	r2, fp, #1024	; 0x400
   256ec:	sub	r2, r2, #56	; 0x38
   256f0:	vst1.64	{d8-d9}, [r2]!
   256f4:	vst1.64	{d8-d9}, [r2]
   256f8:	tst	r1, #1024	; 0x400
   256fc:	beq	25658 <__assert_fail@plt+0x141a8>
   25700:	ldr	r7, [sp, #12]
   25704:	mov	r1, #1024	; 0x400
   25708:	str	r1, [fp, #-1080]	; 0xfffffbc8
   2570c:	tst	r0, #32768	; 0x8000
   25710:	bne	25648 <__assert_fail@plt+0x14198>
   25714:	tst	r0, #1024	; 0x400
   25718:	bne	2587c <__assert_fail@plt+0x143cc>
   2571c:	tst	r0, #2048	; 0x800
   25720:	beq	25ad8 <__assert_fail@plt+0x14628>
   25724:	tst	r0, #4194304	; 0x400000
   25728:	beq	25734 <__assert_fail@plt+0x14284>
   2572c:	cmp	r6, #1
   25730:	beq	25648 <__assert_fail@plt+0x14198>
   25734:	ldr	r1, [sp, #96]	; 0x60
   25738:	ldr	r0, [r1, #92]	; 0x5c
   2573c:	cmp	r0, #1
   25740:	ble	25a60 <__assert_fail@plt+0x145b0>
   25744:	ldr	r0, [r1, #60]	; 0x3c
   25748:	ldr	r1, [sp]
   2574c:	vld1.32	{d16-d17}, [r1]
   25750:	vld1.32	{d18-d19}, [r0]!
   25754:	sub	r1, fp, #1024	; 0x400
   25758:	sub	r1, r1, #56	; 0x38
   2575c:	vld1.64	{d20-d21}, [r1]
   25760:	vand	q8, q9, q8
   25764:	vbic	q9, q10, q8
   25768:	vst1.64	{d18-d19}, [r1]
   2576c:	ldr	r1, [sp, #4]
   25770:	vld1.32	{d20-d21}, [r0]
   25774:	ldr	r0, [sp, #8]
   25778:	vld1.32	{d16-d17}, [r1]
   2577c:	vld1.32	{d22-d23}, [r0]
   25780:	vand	q8, q10, q8
   25784:	vbic	q8, q11, q8
   25788:	b	25a90 <__assert_fail@plt+0x145e0>
   2578c:	cmp	r6, #7
   25790:	add	lr, sp, #168	; 0xa8
   25794:	beq	257dc <__assert_fail@plt+0x1432c>
   25798:	cmp	r6, #5
   2579c:	beq	2582c <__assert_fail@plt+0x1437c>
   257a0:	cmp	r6, #3
   257a4:	bne	25874 <__assert_fail@plt+0x143c4>
   257a8:	ldr	r1, [r9, ip, lsl #3]
   257ac:	sub	r2, fp, #1024	; 0x400
   257b0:	sub	r2, r2, #56	; 0x38
   257b4:	vld1.64	{d16-d17}, [r2]
   257b8:	vld1.32	{d18-d19}, [r1]!
   257bc:	vorr	q8, q8, q9
   257c0:	vst1.64	{d16-d17}, [r2]
   257c4:	vld1.32	{d16-d17}, [r1]
   257c8:	ldr	r1, [sp, #8]
   257cc:	vld1.32	{d18-d19}, [r1]
   257d0:	vorr	q8, q9, q8
   257d4:	vst1.32	{d16-d17}, [r1]
   257d8:	b	256c8 <__assert_fail@plt+0x14218>
   257dc:	mvn	r1, #0
   257e0:	str	r1, [fp, #-1068]	; 0xfffffbd4
   257e4:	str	r1, [fp, #-1072]	; 0xfffffbd0
   257e8:	str	r1, [fp, #-1076]	; 0xfffffbcc
   257ec:	str	r1, [fp, #-1080]	; 0xfffffbc8
   257f0:	ldr	r1, [sp, #96]	; 0x60
   257f4:	ldr	r2, [r1, #128]	; 0x80
   257f8:	and	r1, r2, #128	; 0x80
   257fc:	ands	r2, r2, #64	; 0x40
   25800:	beq	2580c <__assert_fail@plt+0x1435c>
   25804:	cmp	r1, #0
   25808:	beq	256c8 <__assert_fail@plt+0x14218>
   2580c:	cmp	r2, #0
   25810:	mvn	r2, #1
   25814:	movweq	r2, #64510	; 0xfbfe
   25818:	movteq	r2, #65535	; 0xffff
   2581c:	cmp	r1, #0
   25820:	mvneq	r2, #1024	; 0x400
   25824:	str	r2, [fp, #-1080]	; 0xfffffbc8
   25828:	b	256c8 <__assert_fail@plt+0x14218>
   2582c:	ldr	r3, [sp, #96]	; 0x60
   25830:	ldr	r1, [r3, #92]	; 0x5c
   25834:	cmp	r1, #2
   25838:	blt	25934 <__assert_fail@plt+0x14484>
   2583c:	ldr	r1, [r3, #60]	; 0x3c
   25840:	sub	r2, fp, #1024	; 0x400
   25844:	sub	r2, r2, #56	; 0x38
   25848:	vld1.64	{d16-d17}, [r2]
   2584c:	vld1.32	{d18-d19}, [r1]!
   25850:	vorr	q8, q8, q9
   25854:	vst1.64	{d16-d17}, [r2]
   25858:	vld1.32	{d18-d19}, [r1]
   2585c:	ldr	r1, [sp, #8]
   25860:	vld1.32	{d20-d21}, [r1]
   25864:	vorr	q9, q10, q9
   25868:	vst1.32	{d18-d19}, [r1]
   2586c:	vmov.32	r1, d16[0]
   25870:	b	25958 <__assert_fail@plt+0x144a8>
   25874:	ldr	r8, [sp, #96]	; 0x60
   25878:	b	25660 <__assert_fail@plt+0x141b0>
   2587c:	movw	r1, #255	; 0xff
   25880:	movt	r1, #64	; 0x40
   25884:	and	r1, r0, r1
   25888:	cmp	r1, #1
   2588c:	beq	25648 <__assert_fail@plt+0x14198>
   25890:	ldr	r7, [sp, #96]	; 0x60
   25894:	ldr	r1, [r7, #92]	; 0x5c
   25898:	cmp	r1, #1
   2589c:	ble	25984 <__assert_fail@plt+0x144d4>
   258a0:	ldr	r1, [r7, #60]	; 0x3c
   258a4:	ldr	r2, [sp]
   258a8:	vld1.32	{d16-d17}, [r2]
   258ac:	vld1.32	{d18-d19}, [r1]!
   258b0:	sub	r2, fp, #1024	; 0x400
   258b4:	sub	r2, r2, #56	; 0x38
   258b8:	vld1.64	{d20-d21}, [r2]
   258bc:	vorn	q8, q8, q9
   258c0:	vand	q8, q10, q8
   258c4:	vst1.64	{d16-d17}, [r2]
   258c8:	vmov.32	r2, d16[1]
   258cc:	vld1.32	{d18-d19}, [r1]
   258d0:	ldr	r1, [sp, #4]
   258d4:	vld1.32	{d20-d21}, [r1]
   258d8:	ldr	r1, [sp, #8]
   258dc:	vld1.32	{d22-d23}, [r1]
   258e0:	vorn	q9, q10, q9
   258e4:	vand	q9, q11, q9
   258e8:	vst1.32	{d18-d19}, [r1]
   258ec:	vmov.32	r1, d16[0]
   258f0:	orr	r1, r2, r1
   258f4:	vmov.32	r2, d17[0]
   258f8:	orr	r1, r1, r2
   258fc:	vmov.32	r2, d17[1]
   25900:	orr	r1, r1, r2
   25904:	vmov.32	r2, d18[0]
   25908:	orr	r1, r1, r2
   2590c:	vmov.32	r2, d18[1]
   25910:	orr	r1, r1, r2
   25914:	vmov.32	r2, d19[0]
   25918:	orr	r1, r1, r2
   2591c:	vmov.32	r2, d19[1]
   25920:	orr	r1, r1, r2
   25924:	ldr	r7, [sp, #12]
   25928:	cmp	r1, #0
   2592c:	bne	2571c <__assert_fail@plt+0x1426c>
   25930:	b	25658 <__assert_fail@plt+0x141a8>
   25934:	mvn	r1, #0
   25938:	str	r1, [fp, #-1052]	; 0xfffffbe4
   2593c:	str	r1, [fp, #-1056]	; 0xfffffbe0
   25940:	str	r1, [fp, #-1060]	; 0xfffffbdc
   25944:	str	r1, [fp, #-1064]	; 0xfffffbd8
   25948:	str	r1, [fp, #-1068]	; 0xfffffbd4
   2594c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   25950:	str	r1, [fp, #-1076]	; 0xfffffbcc
   25954:	str	r1, [fp, #-1080]	; 0xfffffbc8
   25958:	ldr	r2, [r3, #128]	; 0x80
   2595c:	ands	r3, r2, #64	; 0x40
   25960:	and	r2, r2, #128	; 0x80
   25964:	biceq	r1, r1, #1024	; 0x400
   25968:	beq	25974 <__assert_fail@plt+0x144c4>
   2596c:	cmp	r2, #0
   25970:	beq	256c8 <__assert_fail@plt+0x14218>
   25974:	cmp	r2, #0
   25978:	bicne	r1, r1, #1
   2597c:	str	r1, [fp, #-1080]	; 0xfffffbc8
   25980:	b	256c8 <__assert_fail@plt+0x14218>
   25984:	ldr	r1, [r7, #112]	; 0x70
   25988:	add	sl, r7, #96	; 0x60
   2598c:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   25990:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   25994:	ldm	sl, {r2, r3, r8, sl}
   25998:	str	ip, [sp, #28]
   2599c:	str	r9, [sp, #24]
   259a0:	ldr	r9, [sp, #24]
   259a4:	str	r1, [sp, #148]	; 0x94
   259a8:	ldr	r1, [r7, #116]	; 0x74
   259ac:	and	ip, r5, r3
   259b0:	and	lr, r4, r2
   259b4:	ldr	r2, [sp, #148]	; 0x94
   259b8:	str	r1, [sp, #152]	; 0x98
   259bc:	ldr	r1, [r7, #120]	; 0x78
   259c0:	str	r1, [sp, #156]	; 0x9c
   259c4:	ldr	r1, [r7, #124]	; 0x7c
   259c8:	ldr	r7, [fp, #-1072]	; 0xfffffbd0
   259cc:	ldr	r3, [sp, #156]	; 0x9c
   259d0:	str	r1, [sp, #160]	; 0xa0
   259d4:	ldr	r1, [fp, #-1068]	; 0xfffffbd4
   259d8:	and	r8, r7, r8
   259dc:	str	lr, [fp, #-1080]	; 0xfffffbc8
   259e0:	str	ip, [fp, #-1076]	; 0xfffffbcc
   259e4:	str	r8, [fp, #-1072]	; 0xfffffbd0
   259e8:	ldr	r7, [sp, #160]	; 0xa0
   259ec:	and	r1, r1, sl
   259f0:	add	sl, sp, #168	; 0xa8
   259f4:	str	r1, [fp, #-1068]	; 0xfffffbd4
   259f8:	ldr	r5, [fp, #-1064]	; 0xfffffbd8
   259fc:	and	r5, r5, r2
   25a00:	ldr	r2, [sp, #152]	; 0x98
   25a04:	str	r5, [fp, #-1064]	; 0xfffffbd8
   25a08:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   25a0c:	and	r4, r4, r2
   25a10:	str	r4, [fp, #-1060]	; 0xfffffbdc
   25a14:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   25a18:	and	r2, r2, r3
   25a1c:	str	r2, [fp, #-1056]	; 0xfffffbe0
   25a20:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
   25a24:	and	r3, r3, r7
   25a28:	orr	r7, ip, lr
   25a2c:	ldr	ip, [sp, #28]
   25a30:	mov	lr, sl
   25a34:	orr	r7, r7, r8
   25a38:	str	r3, [fp, #-1052]	; 0xfffffbe4
   25a3c:	orr	r1, r7, r1
   25a40:	orr	r1, r1, r5
   25a44:	orr	r1, r1, r4
   25a48:	orr	r1, r1, r2
   25a4c:	orr	r1, r1, r3
   25a50:	ldr	r7, [sp, #12]
   25a54:	cmp	r1, #0
   25a58:	bne	2571c <__assert_fail@plt+0x1426c>
   25a5c:	b	25658 <__assert_fail@plt+0x141a8>
   25a60:	ldr	r0, [sp]
   25a64:	vld1.32	{d16-d17}, [r0]
   25a68:	sub	r0, fp, #1024	; 0x400
   25a6c:	sub	r0, r0, #56	; 0x38
   25a70:	vld1.64	{d18-d19}, [r0]
   25a74:	vbic	q9, q9, q8
   25a78:	vst1.64	{d18-d19}, [r0]
   25a7c:	ldr	r0, [sp, #4]
   25a80:	vld1.32	{d16-d17}, [r0]
   25a84:	ldr	r0, [sp, #8]
   25a88:	vld1.32	{d20-d21}, [r0]
   25a8c:	vbic	q8, q10, q8
   25a90:	vst1.32	{d16-d17}, [r0]
   25a94:	vmov.32	r0, d18[0]
   25a98:	vmov.32	r1, d18[1]
   25a9c:	ldr	r7, [sp, #12]
   25aa0:	orr	r0, r1, r0
   25aa4:	vmov.32	r1, d19[0]
   25aa8:	orr	r0, r0, r1
   25aac:	vmov.32	r1, d19[1]
   25ab0:	orr	r0, r0, r1
   25ab4:	vmov.32	r1, d16[0]
   25ab8:	orr	r0, r0, r1
   25abc:	vmov.32	r1, d16[1]
   25ac0:	orr	r0, r0, r1
   25ac4:	vmov.32	r1, d17[0]
   25ac8:	orr	r0, r0, r1
   25acc:	vmov.32	r1, d17[1]
   25ad0:	orrs	r0, r0, r1
   25ad4:	beq	25658 <__assert_fail@plt+0x141a8>
   25ad8:	ldr	r0, [sp, #164]	; 0xa4
   25adc:	cmp	r0, #1
   25ae0:	blt	25f4c <__assert_fail@plt+0x14a9c>
   25ae4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   25ae8:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
   25aec:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   25af0:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   25af4:	cmp	r6, #1
   25af8:	mov	r4, #0
   25afc:	str	r0, [sp, #140]	; 0x8c
   25b00:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   25b04:	str	r1, [sp, #120]	; 0x78
   25b08:	str	r2, [sp, #144]	; 0x90
   25b0c:	str	r3, [sp, #152]	; 0x98
   25b10:	str	r0, [sp, #160]	; 0xa0
   25b14:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   25b18:	str	r0, [sp, #156]	; 0x9c
   25b1c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   25b20:	str	r0, [sp, #132]	; 0x84
   25b24:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   25b28:	str	r0, [sp, #148]	; 0x94
   25b2c:	bne	25f68 <__assert_fail@plt+0x14ab8>
   25b30:	ldr	r3, [sp, #148]	; 0x94
   25b34:	sub	r0, fp, #6144	; 0x1800
   25b38:	str	r7, [sp, #128]	; 0x80
   25b3c:	str	ip, [sp, #28]
   25b40:	str	r9, [sp, #24]
   25b44:	sub	r6, r0, #104	; 0x68
   25b48:	str	r6, [sp, #124]	; 0x7c
   25b4c:	b	25b80 <__assert_fail@plt+0x146d0>
   25b50:	mov	r8, ip
   25b54:	ldr	r0, [sp, #128]	; 0x80
   25b58:	add	r4, r4, #1
   25b5c:	mov	ip, r8
   25b60:	add	r0, r0, #32
   25b64:	str	r0, [sp, #128]	; 0x80
   25b68:	ldr	r0, [sp, #124]	; 0x7c
   25b6c:	add	r0, r0, #12
   25b70:	str	r0, [sp, #124]	; 0x7c
   25b74:	ldr	r0, [sp, #164]	; 0xa4
   25b78:	cmp	r4, r0
   25b7c:	bge	25f14 <__assert_fail@plt+0x14a64>
   25b80:	ldrb	r0, [r9, ip, lsl #3]
   25b84:	mov	r2, #1
   25b88:	ubfx	r1, r0, #5, #3
   25b8c:	and	r0, r0, #31
   25b90:	add	r1, lr, r1, lsl #2
   25b94:	ldr	r1, [r1, r4, lsl #5]
   25b98:	tst	r1, r2, lsl r0
   25b9c:	beq	25b50 <__assert_fail@plt+0x146a0>
   25ba0:	add	r9, lr, r4, lsl #5
   25ba4:	ldr	r2, [sp, #132]	; 0x84
   25ba8:	str	r4, [sp, #136]	; 0x88
   25bac:	ldr	r4, [sp, #120]	; 0x78
   25bb0:	ldr	sl, [sp, #156]	; 0x9c
   25bb4:	str	r3, [sp, #148]	; 0x94
   25bb8:	ldr	ip, [sp, #152]	; 0x98
   25bbc:	ldr	r0, [r9, #8]
   25bc0:	ldr	r6, [r9, #4]
   25bc4:	ldr	r7, [r9, #12]
   25bc8:	ldr	r5, [r9, #16]
   25bcc:	and	r1, r0, r2
   25bd0:	str	r0, [sp, #88]	; 0x58
   25bd4:	ldr	r0, [sp, #128]	; 0x80
   25bd8:	str	r6, [sp, #108]	; 0x6c
   25bdc:	and	r6, r6, sl
   25be0:	str	r7, [sp, #112]	; 0x70
   25be4:	str	r5, [sp, #92]	; 0x5c
   25be8:	str	r1, [sp, #84]	; 0x54
   25bec:	str	r6, [sp, #76]	; 0x4c
   25bf0:	ldr	lr, [r0, #-28]	; 0xffffffe4
   25bf4:	ldr	r8, [r0]
   25bf8:	and	r0, lr, r4
   25bfc:	str	r8, [sp, #116]	; 0x74
   25c00:	str	r0, [sp, #80]	; 0x50
   25c04:	orr	r0, r6, r0
   25c08:	orr	r0, r0, r1
   25c0c:	and	r1, r7, r3
   25c10:	ldr	r7, [sp, #160]	; 0xa0
   25c14:	ldr	r3, [sp, #140]	; 0x8c
   25c18:	str	r1, [sp, #72]	; 0x48
   25c1c:	orr	r0, r0, r1
   25c20:	and	r1, r5, r7
   25c24:	str	r1, [sp, #68]	; 0x44
   25c28:	orr	r0, r0, r1
   25c2c:	ldr	r1, [r9, #20]
   25c30:	and	r6, r1, r3
   25c34:	ldr	r3, [r9, #24]
   25c38:	str	r6, [sp, #64]	; 0x40
   25c3c:	orr	r0, r0, r6
   25c40:	ldr	r6, [sp, #144]	; 0x90
   25c44:	and	r5, r3, ip
   25c48:	orr	r0, r0, r5
   25c4c:	and	r6, r8, r6
   25c50:	orrs	r0, r0, r6
   25c54:	beq	25e00 <__assert_fail@plt+0x14950>
   25c58:	bic	r0, r4, lr
   25c5c:	ldr	ip, [sp, #88]	; 0x58
   25c60:	str	r5, [sp, #20]
   25c64:	ldr	r5, [sp, #148]	; 0x94
   25c68:	str	r6, [sp, #16]
   25c6c:	ldr	r6, [sp, #92]	; 0x5c
   25c70:	ldr	r8, [sp, #140]	; 0x8c
   25c74:	bic	lr, lr, r4
   25c78:	ldr	r4, [sp, #148]	; 0x94
   25c7c:	str	r0, [sp, #60]	; 0x3c
   25c80:	ldr	r0, [sp, #108]	; 0x6c
   25c84:	bic	r0, sl, r0
   25c88:	str	r0, [sp, #56]	; 0x38
   25c8c:	bic	r0, r2, ip
   25c90:	bic	r2, ip, r2
   25c94:	str	r0, [sp, #52]	; 0x34
   25c98:	ldr	r0, [sp, #112]	; 0x70
   25c9c:	str	r2, [sp, #156]	; 0x9c
   25ca0:	bic	r0, r5, r0
   25ca4:	ldr	r5, [sp, #144]	; 0x90
   25ca8:	str	r0, [sp, #48]	; 0x30
   25cac:	bic	r0, r7, r6
   25cb0:	str	r0, [sp, #44]	; 0x2c
   25cb4:	bic	r0, r8, r1
   25cb8:	bic	r1, r1, r8
   25cbc:	str	r0, [sp, #40]	; 0x28
   25cc0:	ldr	r0, [sp, #152]	; 0x98
   25cc4:	bic	r0, r0, r3
   25cc8:	str	r0, [sp, #36]	; 0x24
   25ccc:	ldr	r0, [sp, #116]	; 0x74
   25cd0:	bic	r0, r5, r0
   25cd4:	str	r0, [sp, #32]
   25cd8:	ldr	r0, [sp, #108]	; 0x6c
   25cdc:	bic	sl, r0, sl
   25ce0:	orr	r0, sl, lr
   25ce4:	orr	r0, r0, r2
   25ce8:	ldr	r2, [sp, #112]	; 0x70
   25cec:	bic	ip, r2, r4
   25cf0:	ldr	r4, [sp, #152]	; 0x98
   25cf4:	bic	r2, r6, r7
   25cf8:	orr	r0, r0, ip
   25cfc:	orr	r0, r0, r2
   25d00:	orr	r0, r0, r1
   25d04:	bic	r3, r3, r4
   25d08:	orr	r4, r0, r3
   25d0c:	ldr	r0, [sp, #116]	; 0x74
   25d10:	bic	r0, r0, r5
   25d14:	orrs	r4, r4, r0
   25d18:	beq	25e18 <__assert_fail@plt+0x14968>
   25d1c:	ldr	r5, [sp, #164]	; 0xa4
   25d20:	ldr	r7, [sp, #156]	; 0x9c
   25d24:	mov	r6, sl
   25d28:	add	sl, sp, #168	; 0xa8
   25d2c:	add	r4, sl, r5, lsl #5
   25d30:	str	lr, [sl, r5, lsl #5]
   25d34:	sub	lr, fp, #6144	; 0x1800
   25d38:	str	r5, [sp, #164]	; 0xa4
   25d3c:	str	r6, [r4, #4]
   25d40:	str	r7, [r4, #8]
   25d44:	str	ip, [r4, #12]
   25d48:	str	r2, [r4, #16]
   25d4c:	str	r1, [r4, #20]
   25d50:	str	r3, [r4, #24]
   25d54:	str	r0, [r4, #28]
   25d58:	ldr	r0, [sp, #128]	; 0x80
   25d5c:	ldr	r1, [sp, #80]	; 0x50
   25d60:	ldr	r6, [sp, #124]	; 0x7c
   25d64:	mov	ip, r5
   25d68:	str	r1, [r0, #-28]	; 0xffffffe4
   25d6c:	ldr	r1, [sp, #76]	; 0x4c
   25d70:	str	r1, [r9, #4]
   25d74:	ldr	r1, [sp, #84]	; 0x54
   25d78:	str	r1, [r9, #8]
   25d7c:	ldr	r1, [sp, #72]	; 0x48
   25d80:	str	r1, [r9, #12]
   25d84:	ldr	r1, [sp, #68]	; 0x44
   25d88:	str	r1, [r9, #16]
   25d8c:	ldr	r1, [sp, #64]	; 0x40
   25d90:	str	r1, [r9, #20]
   25d94:	ldr	r1, [sp, #20]
   25d98:	str	r1, [r9, #24]
   25d9c:	ldr	r1, [sp, #16]
   25da0:	str	r1, [r0]
   25da4:	add	r0, r5, r5, lsl #1
   25da8:	sub	r1, lr, #104	; 0x68
   25dac:	add	r5, r1, r0, lsl #2
   25db0:	ldr	r0, [r6, #4]
   25db4:	mov	r4, r5
   25db8:	str	r0, [r4, #4]!
   25dbc:	ldr	r8, [r6, #4]
   25dc0:	cmp	r8, #0
   25dc4:	ble	25e3c <__assert_fail@plt+0x1498c>
   25dc8:	str	r0, [r5]
   25dcc:	lsl	r0, r0, #2
   25dd0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   25dd4:	ldr	r9, [sp, #44]	; 0x2c
   25dd8:	ldr	r7, [sp, #40]	; 0x28
   25ddc:	ldr	sl, [sp, #32]
   25de0:	cmp	r0, #0
   25de4:	str	r0, [r5, #8]
   25de8:	beq	26ca8 <__assert_fail@plt+0x157f8>
   25dec:	ldr	r1, [r6, #8]
   25df0:	lsl	r2, r8, #2
   25df4:	bl	11258 <memcpy@plt>
   25df8:	ldr	r4, [sp, #136]	; 0x88
   25dfc:	b	25e5c <__assert_fail@plt+0x149ac>
   25e00:	ldr	r4, [sp, #136]	; 0x88
   25e04:	ldr	r8, [sp, #28]
   25e08:	ldr	r9, [sp, #24]
   25e0c:	ldr	r3, [sp, #148]	; 0x94
   25e10:	add	lr, sp, #168	; 0xa8
   25e14:	b	25b54 <__assert_fail@plt+0x146a4>
   25e18:	add	sl, sp, #168	; 0xa8
   25e1c:	ldr	r4, [sp, #136]	; 0x88
   25e20:	ldr	r6, [sp, #124]	; 0x7c
   25e24:	ldr	r5, [sp, #48]	; 0x30
   25e28:	ldr	r9, [sp, #44]	; 0x2c
   25e2c:	ldr	r7, [sp, #40]	; 0x28
   25e30:	mov	r8, sl
   25e34:	ldr	sl, [sp, #32]
   25e38:	b	25e70 <__assert_fail@plt+0x149c0>
   25e3c:	mov	r0, #0
   25e40:	ldr	r4, [sp, #136]	; 0x88
   25e44:	ldr	r9, [sp, #44]	; 0x2c
   25e48:	ldr	r7, [sp, #40]	; 0x28
   25e4c:	ldr	sl, [sp, #32]
   25e50:	str	r0, [r5]
   25e54:	str	r0, [r5, #4]
   25e58:	str	r0, [r5, #8]
   25e5c:	ldr	r5, [sp, #48]	; 0x30
   25e60:	ldr	r0, [sp, #164]	; 0xa4
   25e64:	add	r8, sp, #168	; 0xa8
   25e68:	add	r0, r0, #1
   25e6c:	str	r0, [sp, #164]	; 0xa4
   25e70:	ldr	r0, [sp, #104]	; 0x68
   25e74:	ldr	r1, [sp, #100]	; 0x64
   25e78:	ldr	r0, [r0, #12]
   25e7c:	ldr	r1, [r0, r1, lsl #2]
   25e80:	mov	r0, r6
   25e84:	bl	20b88 <__assert_fail@plt+0xf6d8>
   25e88:	cmp	r0, #0
   25e8c:	beq	26c2c <__assert_fail@plt+0x1577c>
   25e90:	ldr	r1, [sp, #60]	; 0x3c
   25e94:	ldr	r2, [sp, #56]	; 0x38
   25e98:	ldr	r3, [sp, #52]	; 0x34
   25e9c:	ldr	ip, [sp, #36]	; 0x24
   25ea0:	mov	lr, r8
   25ea4:	mov	r6, r9
   25ea8:	str	r9, [sp, #160]	; 0xa0
   25eac:	ldr	r8, [sp, #28]
   25eb0:	str	sl, [sp, #144]	; 0x90
   25eb4:	str	r7, [sp, #140]	; 0x8c
   25eb8:	orr	r0, r2, r1
   25ebc:	str	ip, [sp, #152]	; 0x98
   25ec0:	str	r2, [sp, #156]	; 0x9c
   25ec4:	str	r1, [sp, #120]	; 0x78
   25ec8:	orr	r0, r0, r3
   25ecc:	orr	r0, r0, r5
   25ed0:	orr	r0, r0, r9
   25ed4:	ldr	r9, [sp, #24]
   25ed8:	orr	r0, r0, r7
   25edc:	orr	r0, r0, ip
   25ee0:	orrs	r0, r0, sl
   25ee4:	mov	r0, r3
   25ee8:	mov	r3, r5
   25eec:	str	r0, [sp, #132]	; 0x84
   25ef0:	bne	25b54 <__assert_fail@plt+0x146a4>
   25ef4:	str	sl, [sp, #144]	; 0x90
   25ef8:	str	ip, [sp, #152]	; 0x98
   25efc:	str	r7, [sp, #140]	; 0x8c
   25f00:	str	r6, [sp, #160]	; 0xa0
   25f04:	mov	r3, r5
   25f08:	str	r0, [sp, #132]	; 0x84
   25f0c:	str	r2, [sp, #156]	; 0x9c
   25f10:	str	r1, [sp, #120]	; 0x78
   25f14:	ldr	r0, [sp, #144]	; 0x90
   25f18:	ldr	r8, [sp, #96]	; 0x60
   25f1c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   25f20:	ldr	r0, [sp, #152]	; 0x98
   25f24:	str	r0, [fp, #-1056]	; 0xfffffbe0
   25f28:	ldr	r0, [sp, #140]	; 0x8c
   25f2c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   25f30:	ldr	r0, [sp, #160]	; 0xa0
   25f34:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25f38:	ldr	r0, [sp, #132]	; 0x84
   25f3c:	str	r3, [fp, #-1068]	; 0xfffffbd4
   25f40:	str	r0, [fp, #-1072]	; 0xfffffbd0
   25f44:	ldr	r0, [sp, #156]	; 0x9c
   25f48:	b	26338 <__assert_fail@plt+0x14e88>
   25f4c:	ldr	r8, [sp, #96]	; 0x60
   25f50:	mov	r4, #0
   25f54:	ldr	r0, [sp, #164]	; 0xa4
   25f58:	ldr	r1, [sp, #100]	; 0x64
   25f5c:	cmp	r4, r0
   25f60:	bne	25660 <__assert_fail@plt+0x141b0>
   25f64:	b	26354 <__assert_fail@plt+0x14ea4>
   25f68:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   25f6c:	sub	lr, fp, #6144	; 0x1800
   25f70:	ldr	ip, [sp, #164]	; 0xa4
   25f74:	ldr	sl, [sp, #132]	; 0x84
   25f78:	str	r0, [sp, #48]	; 0x30
   25f7c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   25f80:	str	r0, [sp, #44]	; 0x2c
   25f84:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   25f88:	str	r0, [sp, #40]	; 0x28
   25f8c:	sub	r0, lr, #104	; 0x68
   25f90:	mov	lr, r1
   25f94:	str	r0, [sp, #128]	; 0x80
   25f98:	ldr	r0, [sp, #156]	; 0x9c
   25f9c:	b	25fd8 <__assert_fail@plt+0x14b28>
   25fa0:	ldr	r4, [sp, #136]	; 0x88
   25fa4:	ldr	ip, [sp, #164]	; 0xa4
   25fa8:	ldr	r8, [sp, #96]	; 0x60
   25fac:	ldr	r0, [sp, #156]	; 0x9c
   25fb0:	ldr	sl, [sp, #132]	; 0x84
   25fb4:	ldr	lr, [sp, #124]	; 0x7c
   25fb8:	ldr	r7, [sp, #116]	; 0x74
   25fbc:	ldr	r1, [sp, #128]	; 0x80
   25fc0:	add	r4, r4, #1
   25fc4:	cmp	r4, ip
   25fc8:	add	r7, r7, #32
   25fcc:	add	r1, r1, #12
   25fd0:	str	r1, [sp, #128]	; 0x80
   25fd4:	bge	26300 <__assert_fail@plt+0x14e50>
   25fd8:	add	r1, sp, #168	; 0xa8
   25fdc:	str	r4, [sp, #136]	; 0x88
   25fe0:	str	lr, [sp, #124]	; 0x7c
   25fe4:	str	ip, [sp, #164]	; 0xa4
   25fe8:	ldr	ip, [sp, #160]	; 0xa0
   25fec:	str	sl, [sp, #132]	; 0x84
   25ff0:	str	r7, [sp, #116]	; 0x74
   25ff4:	ldr	r3, [r7]
   25ff8:	str	r0, [sp, #156]	; 0x9c
   25ffc:	add	r8, r1, r4, lsl #5
   26000:	ldr	r4, [r7, #-28]	; 0xffffffe4
   26004:	ldr	r7, [sp, #140]	; 0x8c
   26008:	ldr	r5, [r8, #4]
   2600c:	ldr	r1, [r8, #8]
   26010:	ldr	r2, [r8, #12]
   26014:	ldr	r9, [r8, #16]
   26018:	str	r4, [sp, #108]	; 0x6c
   2601c:	and	r4, r4, lr
   26020:	ldr	lr, [sp, #148]	; 0x94
   26024:	str	r4, [sp, #72]	; 0x48
   26028:	and	r6, r5, r0
   2602c:	str	r1, [sp, #80]	; 0x50
   26030:	and	r1, r1, sl
   26034:	ldr	sl, [r8, #20]
   26038:	str	r9, [sp, #84]	; 0x54
   2603c:	str	r5, [sp, #112]	; 0x70
   26040:	str	r2, [sp, #88]	; 0x58
   26044:	orr	r0, r6, r4
   26048:	str	r1, [sp, #76]	; 0x4c
   2604c:	str	r6, [sp, #68]	; 0x44
   26050:	ldr	r6, [sp, #152]	; 0x98
   26054:	orr	r0, r0, r1
   26058:	and	r1, r2, lr
   2605c:	str	r1, [sp, #64]	; 0x40
   26060:	orr	r0, r0, r1
   26064:	and	r1, r9, ip
   26068:	ldr	r9, [sp, #144]	; 0x90
   2606c:	and	r4, sl, r7
   26070:	orr	r0, r0, r1
   26074:	str	r1, [sp, #60]	; 0x3c
   26078:	str	r4, [sp, #56]	; 0x38
   2607c:	orr	r0, r0, r4
   26080:	ldr	r4, [r8, #24]
   26084:	and	r5, r4, r6
   26088:	str	r5, [sp, #52]	; 0x34
   2608c:	orr	r0, r0, r5
   26090:	and	r5, r3, r9
   26094:	orrs	r0, r0, r5
   26098:	beq	25fa0 <__assert_fail@plt+0x14af0>
   2609c:	ldr	r0, [sp, #124]	; 0x7c
   260a0:	ldr	r1, [sp, #108]	; 0x6c
   260a4:	ldr	r2, [sp, #156]	; 0x9c
   260a8:	str	r5, [sp, #20]
   260ac:	ldr	r5, [sp, #132]	; 0x84
   260b0:	ldr	ip, [sp, #84]	; 0x54
   260b4:	str	r3, [sp, #92]	; 0x5c
   260b8:	ldr	r3, [sp, #108]	; 0x6c
   260bc:	bic	r0, r0, r1
   260c0:	ldr	r1, [sp, #88]	; 0x58
   260c4:	str	r0, [sp, #120]	; 0x78
   260c8:	ldr	r0, [sp, #112]	; 0x70
   260cc:	bic	r0, r2, r0
   260d0:	ldr	r2, [sp, #80]	; 0x50
   260d4:	str	r0, [sp, #48]	; 0x30
   260d8:	bic	r0, r5, r2
   260dc:	bic	r2, r2, r5
   260e0:	ldr	r5, [sp, #156]	; 0x9c
   260e4:	str	r0, [sp, #44]	; 0x2c
   260e8:	bic	r0, lr, r1
   260ec:	str	r2, [sp, #156]	; 0x9c
   260f0:	str	r0, [sp, #40]	; 0x28
   260f4:	ldr	r0, [sp, #160]	; 0xa0
   260f8:	bic	r0, r0, ip
   260fc:	str	r0, [sp, #32]
   26100:	bic	r0, r7, sl
   26104:	str	r0, [sp, #28]
   26108:	bic	r0, r6, r4
   2610c:	bic	r4, r4, r6
   26110:	str	r0, [sp, #24]
   26114:	ldr	r0, [sp, #92]	; 0x5c
   26118:	bic	r0, r9, r0
   2611c:	str	r0, [sp, #36]	; 0x24
   26120:	ldr	r0, [sp, #124]	; 0x7c
   26124:	bic	r0, r3, r0
   26128:	ldr	r3, [sp, #112]	; 0x70
   2612c:	bic	r3, r3, r5
   26130:	orr	r5, r3, r0
   26134:	str	r3, [sp, #132]	; 0x84
   26138:	orr	r3, r5, r2
   2613c:	bic	r5, r1, lr
   26140:	ldr	r1, [sp, #160]	; 0xa0
   26144:	orr	r2, r3, r5
   26148:	bic	r3, ip, r1
   2614c:	bic	r1, sl, r7
   26150:	orr	r2, r2, r3
   26154:	orr	r7, r2, r1
   26158:	orr	r2, r7, r4
   2615c:	ldr	r7, [sp, #92]	; 0x5c
   26160:	bic	r7, r7, r9
   26164:	orrs	r2, r2, r7
   26168:	beq	26238 <__assert_fail@plt+0x14d88>
   2616c:	ldr	r2, [sp, #164]	; 0xa4
   26170:	ldr	r6, [sp, #132]	; 0x84
   26174:	add	sl, sp, #168	; 0xa8
   26178:	sub	lr, fp, #6144	; 0x1800
   2617c:	str	r0, [sl, r2, lsl #5]
   26180:	add	r0, sl, r2, lsl #5
   26184:	str	r6, [r0, #4]
   26188:	ldr	r6, [sp, #156]	; 0x9c
   2618c:	str	r6, [r0, #8]
   26190:	str	r5, [r0, #12]
   26194:	str	r3, [r0, #16]
   26198:	add	r0, r0, #20
   2619c:	stm	r0, {r1, r4, r7}
   261a0:	ldr	r0, [sp, #116]	; 0x74
   261a4:	ldr	r1, [sp, #72]	; 0x48
   261a8:	ldr	r7, [sp, #128]	; 0x80
   261ac:	str	r1, [r0, #-28]	; 0xffffffe4
   261b0:	ldr	r1, [sp, #68]	; 0x44
   261b4:	str	r1, [r8, #4]
   261b8:	ldr	r1, [sp, #76]	; 0x4c
   261bc:	str	r1, [r8, #8]
   261c0:	ldr	r1, [sp, #64]	; 0x40
   261c4:	str	r1, [r8, #12]
   261c8:	ldr	r1, [sp, #60]	; 0x3c
   261cc:	str	r1, [r8, #16]
   261d0:	ldr	r1, [sp, #56]	; 0x38
   261d4:	str	r1, [r8, #20]
   261d8:	ldr	r1, [sp, #52]	; 0x34
   261dc:	str	r1, [r8, #24]
   261e0:	ldr	r1, [sp, #20]
   261e4:	str	r1, [r0]
   261e8:	add	r0, r2, r2, lsl #1
   261ec:	sub	r1, lr, #104	; 0x68
   261f0:	add	r6, r1, r0, lsl #2
   261f4:	ldr	r0, [r7, #4]
   261f8:	mov	r4, r6
   261fc:	str	r0, [r4, #4]!
   26200:	ldr	r5, [r7, #4]
   26204:	cmp	r5, #1
   26208:	blt	26250 <__assert_fail@plt+0x14da0>
   2620c:	str	r0, [r6]
   26210:	lsl	r0, r0, #2
   26214:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   26218:	ldr	r9, [sp, #36]	; 0x24
   2621c:	cmp	r0, #0
   26220:	str	r0, [r6, #8]
   26224:	beq	26c6c <__assert_fail@plt+0x157bc>
   26228:	ldr	r1, [r7, #8]
   2622c:	lsl	r2, r5, #2
   26230:	bl	11258 <memcpy@plt>
   26234:	b	26264 <__assert_fail@plt+0x14db4>
   26238:	ldr	r8, [sp, #96]	; 0x60
   2623c:	ldr	r5, [sp, #100]	; 0x64
   26240:	ldr	r4, [sp, #136]	; 0x88
   26244:	ldr	r7, [sp, #128]	; 0x80
   26248:	ldr	r9, [sp, #36]	; 0x24
   2624c:	b	2627c <__assert_fail@plt+0x14dcc>
   26250:	ldr	r9, [sp, #36]	; 0x24
   26254:	mov	r0, #0
   26258:	str	r0, [r6]
   2625c:	str	r0, [r6, #4]
   26260:	str	r0, [r6, #8]
   26264:	ldr	r0, [sp, #164]	; 0xa4
   26268:	ldr	r8, [sp, #96]	; 0x60
   2626c:	ldr	r5, [sp, #100]	; 0x64
   26270:	ldr	r4, [sp, #136]	; 0x88
   26274:	add	r0, r0, #1
   26278:	str	r0, [sp, #164]	; 0xa4
   2627c:	ldr	r0, [sp, #104]	; 0x68
   26280:	ldr	r0, [r0, #12]
   26284:	ldr	r1, [r0, r5, lsl #2]
   26288:	mov	r0, r7
   2628c:	bl	20b88 <__assert_fail@plt+0xf6d8>
   26290:	cmp	r0, #0
   26294:	beq	26bf0 <__assert_fail@plt+0x15740>
   26298:	ldr	lr, [sp, #120]	; 0x78
   2629c:	ldr	r2, [sp, #48]	; 0x30
   262a0:	ldr	sl, [sp, #44]	; 0x2c
   262a4:	ldr	r5, [sp, #40]	; 0x28
   262a8:	ldr	r7, [sp, #32]
   262ac:	ldr	r6, [sp, #28]
   262b0:	ldr	r1, [sp, #24]
   262b4:	ldr	ip, [sp, #164]	; 0xa4
   262b8:	str	r9, [sp, #144]	; 0x90
   262bc:	orr	r0, r2, lr
   262c0:	str	r1, [sp, #152]	; 0x98
   262c4:	str	r6, [sp, #140]	; 0x8c
   262c8:	str	r7, [sp, #160]	; 0xa0
   262cc:	str	r5, [sp, #148]	; 0x94
   262d0:	orr	r0, r0, sl
   262d4:	orr	r0, r0, r5
   262d8:	orr	r0, r0, r7
   262dc:	orr	r0, r0, r6
   262e0:	orr	r0, r0, r1
   262e4:	orrs	r0, r0, r9
   262e8:	mov	r0, r2
   262ec:	bne	25fb8 <__assert_fail@plt+0x14b08>
   262f0:	str	r9, [sp, #144]	; 0x90
   262f4:	str	r1, [sp, #152]	; 0x98
   262f8:	str	r6, [sp, #140]	; 0x8c
   262fc:	str	r7, [sp, #160]	; 0xa0
   26300:	ldr	r0, [sp, #144]	; 0x90
   26304:	str	ip, [sp, #164]	; 0xa4
   26308:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2630c:	ldr	r0, [sp, #152]	; 0x98
   26310:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26314:	ldr	r0, [sp, #140]	; 0x8c
   26318:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2631c:	ldr	r0, [sp, #160]	; 0xa0
   26320:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26324:	ldr	r0, [sp, #40]	; 0x28
   26328:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2632c:	ldr	r0, [sp, #44]	; 0x2c
   26330:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26334:	ldr	r0, [sp, #48]	; 0x30
   26338:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2633c:	ldr	r0, [sp, #120]	; 0x78
   26340:	str	r0, [fp, #-1080]	; 0xfffffbc8
   26344:	ldr	r0, [sp, #164]	; 0xa4
   26348:	ldr	r1, [sp, #100]	; 0x64
   2634c:	cmp	r4, r0
   26350:	bne	25660 <__assert_fail@plt+0x141b0>
   26354:	sub	lr, fp, #1024	; 0x400
   26358:	sub	r7, lr, #56	; 0x38
   2635c:	sub	lr, fp, #6144	; 0x1800
   26360:	mov	r0, r7
   26364:	mov	r8, r7
   26368:	sub	r2, lr, #104	; 0x68
   2636c:	vld1.32	{d16-d17}, [r0]!
   26370:	vld1.64	{d18-d19}, [r0]
   26374:	add	r0, sp, #168	; 0xa8
   26378:	add	r0, r0, r4, lsl #5
   2637c:	vst1.32	{d16-d17}, [r0]!
   26380:	vst1.32	{d18-d19}, [r0]
   26384:	ldr	r0, [sp, #104]	; 0x68
   26388:	ldr	r0, [r0, #12]
   2638c:	ldr	r7, [r0, r1, lsl #2]
   26390:	add	r0, r4, r4, lsl #1
   26394:	mov	r1, #1
   26398:	add	r5, r2, r0, lsl #2
   2639c:	str	r1, [r2, r0, lsl #2]
   263a0:	mov	r0, #4
   263a4:	mov	r6, r5
   263a8:	str	r1, [r6, #4]!
   263ac:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   263b0:	cmp	r0, #0
   263b4:	str	r0, [r5, #8]
   263b8:	beq	26d3c <__assert_fail@plt+0x1588c>
   263bc:	str	r7, [r0]
   263c0:	mov	r0, r8
   263c4:	vst1.64	{d8-d9}, [r0]!
   263c8:	vst1.64	{d8-d9}, [r0]
   263cc:	add	r0, r4, #1
   263d0:	str	r0, [sp, #164]	; 0xa4
   263d4:	b	25658 <__assert_fail@plt+0x141a8>
   263d8:	ldr	r0, [sp, #164]	; 0xa4
   263dc:	cmp	r0, #0
   263e0:	ble	26d5c <__assert_fail@plt+0x158ac>
   263e4:	ldr	r0, [sp, #164]	; 0xa4
   263e8:	mov	r4, #0
   263ec:	str	r4, [fp, #-3136]	; 0xfffff3c0
   263f0:	add	r0, r0, #1
   263f4:	str	r0, [fp, #-3140]	; 0xfffff3bc
   263f8:	lsl	r0, r0, #2
   263fc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   26400:	cmp	r0, #0
   26404:	str	r0, [fp, #-3132]	; 0xfffff3c4
   26408:	moveq	r4, #12
   2640c:	cmp	r0, #0
   26410:	str	r4, [fp, #-56]	; 0xffffffc8
   26414:	beq	26d90 <__assert_fail@plt+0x158e0>
   26418:	vmov.i32	q8, #0	; 0x00000000
   2641c:	sub	lr, fp, #3072	; 0xc00
   26420:	mov	r1, #0
   26424:	mov	r7, #0
   26428:	mov	r2, #0
   2642c:	mov	r6, #0
   26430:	mov	r5, #0
   26434:	mov	r9, #0
   26438:	sub	r0, lr, #104	; 0x68
   2643c:	sub	lr, fp, #3072	; 0xc00
   26440:	vst1.64	{d16-d17}, [r0]!
   26444:	vst1.64	{d16-d17}, [r0]
   26448:	sub	r0, lr, #56	; 0x38
   2644c:	str	r0, [sp, #128]	; 0x80
   26450:	mov	r0, #0
   26454:	str	r0, [sp, #148]	; 0x94
   26458:	mov	r0, #0
   2645c:	str	r0, [sp, #152]	; 0x98
   26460:	mov	r0, #0
   26464:	str	r0, [sp, #156]	; 0x9c
   26468:	mov	r0, #0
   2646c:	str	r0, [sp, #160]	; 0xa0
   26470:	mov	r0, #0
   26474:	str	r0, [sp, #132]	; 0x84
   26478:	b	26544 <__assert_fail@plt+0x15094>
   2647c:	ldrsb	r0, [r7, #52]	; 0x34
   26480:	cmn	r0, #1
   26484:	ble	2661c <__assert_fail@plt+0x1516c>
   26488:	sub	lr, fp, #3072	; 0xc00
   2648c:	sub	r0, lr, #56	; 0x38
   26490:	sub	lr, fp, #2048	; 0x800
   26494:	str	r7, [r0, r9, lsl #2]
   26498:	sub	r0, lr, #56	; 0x38
   2649c:	str	r7, [r0, r9, lsl #2]
   264a0:	add	r0, sp, #168	; 0xa8
   264a4:	ldr	r3, [sp, #148]	; 0x94
   264a8:	ldr	sl, [sp, #164]	; 0xa4
   264ac:	ldr	r8, [sp, #96]	; 0x60
   264b0:	mov	r2, r0
   264b4:	ldr	r0, [r0, r9, lsl #5]
   264b8:	orr	r5, r5, r0
   264bc:	add	r0, r2, r9, lsl #5
   264c0:	add	r9, r9, #1
   264c4:	mov	ip, r5
   264c8:	cmp	r9, sl
   264cc:	ldr	r2, [r0, #4]
   264d0:	ldr	lr, [r0, #8]
   264d4:	ldr	r7, [r0, #12]
   264d8:	ldr	r5, [r0, #16]
   264dc:	ldr	r4, [r0, #20]
   264e0:	str	r2, [sp, #136]	; 0x88
   264e4:	mov	r2, r6
   264e8:	ldr	r6, [r0, #24]
   264ec:	ldr	r0, [r0, #28]
   264f0:	orr	r3, r3, r0
   264f4:	ldr	r0, [sp, #152]	; 0x98
   264f8:	str	r3, [sp, #148]	; 0x94
   264fc:	orr	r0, r0, r6
   26500:	mov	r6, r2
   26504:	ldr	r2, [sp, #144]	; 0x90
   26508:	str	r0, [sp, #152]	; 0x98
   2650c:	ldr	r0, [sp, #156]	; 0x9c
   26510:	orr	r2, r2, lr
   26514:	orr	r0, r0, r4
   26518:	str	r0, [sp, #156]	; 0x9c
   2651c:	ldr	r0, [sp, #160]	; 0xa0
   26520:	orr	r0, r0, r5
   26524:	mov	r5, ip
   26528:	str	r0, [sp, #160]	; 0xa0
   2652c:	ldr	r0, [sp, #140]	; 0x8c
   26530:	orr	r0, r0, r7
   26534:	mov	r7, r0
   26538:	ldr	r0, [sp, #136]	; 0x88
   2653c:	orr	r6, r6, r0
   26540:	beq	266e4 <__assert_fail@plt+0x15234>
   26544:	mov	r0, #0
   26548:	sub	lr, fp, #6144	; 0x1800
   2654c:	str	r2, [sp, #144]	; 0x90
   26550:	str	r7, [sp, #140]	; 0x8c
   26554:	str	r0, [fp, #-3136]	; 0xfffff3c0
   26558:	add	r0, r9, r9, lsl #1
   2655c:	sub	r2, lr, #104	; 0x68
   26560:	add	r2, r2, r0, lsl #2
   26564:	mov	r7, r2
   26568:	ldr	r0, [r7, #4]!
   2656c:	cmp	r0, #1
   26570:	blt	265dc <__assert_fail@plt+0x1512c>
   26574:	mov	r4, r9
   26578:	add	sl, r2, #8
   2657c:	mov	r9, #0
   26580:	b	26598 <__assert_fail@plt+0x150e8>
   26584:	ldr	r0, [r7]
   26588:	mov	r1, #0
   2658c:	add	r9, r9, #1
   26590:	cmp	r9, r0
   26594:	bge	265d4 <__assert_fail@plt+0x15124>
   26598:	ldr	r2, [sl]
   2659c:	ldr	r3, [r8, #12]
   265a0:	ldr	r2, [r2, r9, lsl #2]
   265a4:	ldr	r2, [r3, r2, lsl #2]
   265a8:	cmn	r2, #1
   265ac:	beq	2658c <__assert_fail@plt+0x150dc>
   265b0:	ldr	r0, [r8, #24]
   265b4:	add	r1, r2, r2, lsl #1
   265b8:	sub	lr, fp, #3072	; 0xc00
   265bc:	add	r1, r0, r1, lsl #2
   265c0:	sub	r0, lr, #68	; 0x44
   265c4:	bl	209e8 <__assert_fail@plt+0xf538>
   265c8:	cmp	r0, #0
   265cc:	beq	26584 <__assert_fail@plt+0x150d4>
   265d0:	b	26b78 <__assert_fail@plt+0x156c8>
   265d4:	mov	r9, r4
   265d8:	str	r1, [fp, #-56]	; 0xffffffc8
   265dc:	sub	lr, fp, #3072	; 0xc00
   265e0:	sub	r0, fp, #56	; 0x38
   265e4:	mov	r1, r8
   265e8:	mov	r3, #0
   265ec:	sub	r2, lr, #68	; 0x44
   265f0:	bl	20d08 <__assert_fail@plt+0xf858>
   265f4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   265f8:	mov	r7, r0
   265fc:	sub	lr, fp, #1024	; 0x400
   26600:	sub	r0, lr, #56	; 0x38
   26604:	cmp	r7, #0
   26608:	str	r7, [r0, r9, lsl #2]
   2660c:	bne	2647c <__assert_fail@plt+0x14fcc>
   26610:	cmp	r1, #0
   26614:	beq	2647c <__assert_fail@plt+0x14fcc>
   26618:	b	266b0 <__assert_fail@plt+0x15200>
   2661c:	sub	lr, fp, #3072	; 0xc00
   26620:	sub	r0, fp, #56	; 0x38
   26624:	mov	r1, r8
   26628:	mov	r3, #1
   2662c:	sub	r2, lr, #68	; 0x44
   26630:	bl	20d08 <__assert_fail@plt+0xf858>
   26634:	sub	lr, fp, #2048	; 0x800
   26638:	cmp	r0, #0
   2663c:	sub	r1, lr, #56	; 0x38
   26640:	str	r0, [r1, r9, lsl #2]
   26644:	bne	26654 <__assert_fail@plt+0x151a4>
   26648:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2664c:	cmp	r1, #0
   26650:	bne	266b0 <__assert_fail@plt+0x15200>
   26654:	cmp	r7, r0
   26658:	beq	26678 <__assert_fail@plt+0x151c8>
   2665c:	ldr	r0, [r8, #92]	; 0x5c
   26660:	ldr	r1, [sp, #132]	; 0x84
   26664:	cmp	r0, #1
   26668:	mov	r0, #0
   2666c:	movwgt	r0, #1
   26670:	orr	r1, r1, r0
   26674:	str	r1, [sp, #132]	; 0x84
   26678:	sub	lr, fp, #3072	; 0xc00
   2667c:	sub	r0, fp, #56	; 0x38
   26680:	mov	r1, r8
   26684:	mov	r3, #2
   26688:	sub	r2, lr, #68	; 0x44
   2668c:	bl	20d08 <__assert_fail@plt+0xf858>
   26690:	sub	lr, fp, #3072	; 0xc00
   26694:	cmp	r0, #0
   26698:	sub	r1, lr, #56	; 0x38
   2669c:	str	r0, [r1, r9, lsl #2]
   266a0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   266a4:	bne	264a0 <__assert_fail@plt+0x14ff0>
   266a8:	cmp	r1, #0
   266ac:	beq	264a0 <__assert_fail@plt+0x14ff0>
   266b0:	ldr	r0, [sp, #148]	; 0x94
   266b4:	str	r0, [fp, #-3148]	; 0xfffff3b4
   266b8:	ldr	r0, [sp, #152]	; 0x98
   266bc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   266c0:	ldr	r0, [sp, #156]	; 0x9c
   266c4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   266c8:	ldr	r0, [sp, #160]	; 0xa0
   266cc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   266d0:	ldr	r0, [sp, #140]	; 0x8c
   266d4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   266d8:	ldr	r0, [sp, #144]	; 0x90
   266dc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   266e0:	b	26bac <__assert_fail@plt+0x156fc>
   266e4:	ldr	r0, [sp, #148]	; 0x94
   266e8:	ldr	r8, [sp, #132]	; 0x84
   266ec:	ldr	r4, [sp, #104]	; 0x68
   266f0:	str	r0, [fp, #-3148]	; 0xfffff3b4
   266f4:	ldr	r0, [sp, #152]	; 0x98
   266f8:	tst	r8, #1
   266fc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   26700:	ldr	r0, [sp, #156]	; 0x9c
   26704:	str	r0, [fp, #-3156]	; 0xfffff3ac
   26708:	ldr	r0, [sp, #160]	; 0xa0
   2670c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   26710:	mov	r0, #4
   26714:	str	r7, [fp, #-3164]	; 0xfffff3a4
   26718:	str	r2, [fp, #-3168]	; 0xfffff3a0
   2671c:	str	r6, [fp, #-3172]	; 0xfffff39c
   26720:	str	r5, [fp, #-3176]	; 0xfffff398
   26724:	bne	26d9c <__assert_fail@plt+0x158ec>
   26728:	mov	r1, #256	; 0x100
   2672c:	bl	2ba08 <__assert_fail@plt+0x1a558>
   26730:	cmp	r0, #0
   26734:	str	r0, [r4, #44]	; 0x2c
   26738:	beq	26bb4 <__assert_fail@plt+0x15704>
   2673c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   26740:	cmp	ip, #0
   26744:	beq	267c4 <__assert_fail@plt+0x15314>
   26748:	mov	r2, #0
   2674c:	mov	r3, #1
   26750:	mov	r1, ip
   26754:	mov	r7, #0
   26758:	tst	r1, #1
   2675c:	bne	2677c <__assert_fail@plt+0x152cc>
   26760:	lsr	r6, r1, #1
   26764:	cmp	r2, r1, lsr #1
   26768:	add	r7, r7, #1
   2676c:	lsl	r3, r3, #1
   26770:	mov	r1, r6
   26774:	bne	26758 <__assert_fail@plt+0x152a8>
   26778:	b	267c4 <__assert_fail@plt+0x15314>
   2677c:	mov	r6, #0
   26780:	add	r4, sp, #168	; 0xa8
   26784:	ldr	r5, [r4, r6, lsl #3]
   26788:	add	r6, r6, #4
   2678c:	tst	r5, r3
   26790:	beq	26784 <__assert_fail@plt+0x152d4>
   26794:	ldr	r5, [sp]
   26798:	sub	lr, fp, #2048	; 0x800
   2679c:	ldr	r5, [r5]
   267a0:	tst	r5, r3
   267a4:	sub	r5, lr, #56	; 0x38
   267a8:	sub	lr, fp, #1024	; 0x400
   267ac:	sub	r4, lr, #56	; 0x38
   267b0:	moveq	r5, r4
   267b4:	add	r6, r5, r6
   267b8:	ldr	r6, [r6, #-4]
   267bc:	str	r6, [r0, r7, lsl #2]
   267c0:	b	26760 <__assert_fail@plt+0x152b0>
   267c4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   267c8:	cmp	r2, #0
   267cc:	beq	2684c <__assert_fail@plt+0x1539c>
   267d0:	add	r1, sp, #168	; 0xa8
   267d4:	mov	r7, #32
   267d8:	mov	r6, #1
   267dc:	mov	r5, #0
   267e0:	add	lr, r1, #4
   267e4:	tst	r2, #1
   267e8:	bne	26808 <__assert_fail@plt+0x15358>
   267ec:	lsr	r1, r2, #1
   267f0:	cmp	r5, r2, lsr #1
   267f4:	add	r7, r7, #1
   267f8:	lsl	r6, r6, #1
   267fc:	mov	r2, r1
   26800:	bne	267e4 <__assert_fail@plt+0x15334>
   26804:	b	2684c <__assert_fail@plt+0x1539c>
   26808:	mov	r1, #0
   2680c:	ldr	r4, [lr, r1, lsl #3]
   26810:	add	r1, r1, #4
   26814:	tst	r4, r6
   26818:	beq	2680c <__assert_fail@plt+0x1535c>
   2681c:	ldr	r3, [sp, #96]	; 0x60
   26820:	ldr	r4, [r3, #100]	; 0x64
   26824:	sub	r3, fp, #2048	; 0x800
   26828:	tst	r4, r6
   2682c:	sub	r4, r3, #56	; 0x38
   26830:	sub	r3, fp, #1024	; 0x400
   26834:	sub	r3, r3, #56	; 0x38
   26838:	moveq	r4, r3
   2683c:	add	r1, r4, r1
   26840:	ldr	r1, [r1, #-4]
   26844:	str	r1, [r0, r7, lsl #2]
   26848:	b	267ec <__assert_fail@plt+0x1533c>
   2684c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   26850:	cmp	r2, #0
   26854:	beq	268d4 <__assert_fail@plt+0x15424>
   26858:	add	r1, sp, #168	; 0xa8
   2685c:	mov	r7, #64	; 0x40
   26860:	mov	r6, #1
   26864:	mov	r5, #0
   26868:	add	lr, r1, #8
   2686c:	tst	r2, #1
   26870:	bne	26890 <__assert_fail@plt+0x153e0>
   26874:	lsr	r1, r2, #1
   26878:	cmp	r5, r2, lsr #1
   2687c:	add	r7, r7, #1
   26880:	lsl	r6, r6, #1
   26884:	mov	r2, r1
   26888:	bne	2686c <__assert_fail@plt+0x153bc>
   2688c:	b	268d4 <__assert_fail@plt+0x15424>
   26890:	mov	r1, #0
   26894:	ldr	r4, [lr, r1, lsl #3]
   26898:	add	r1, r1, #4
   2689c:	tst	r4, r6
   268a0:	beq	26894 <__assert_fail@plt+0x153e4>
   268a4:	ldr	r3, [sp, #96]	; 0x60
   268a8:	ldr	r4, [r3, #104]	; 0x68
   268ac:	sub	r3, fp, #2048	; 0x800
   268b0:	tst	r4, r6
   268b4:	sub	r4, r3, #56	; 0x38
   268b8:	sub	r3, fp, #1024	; 0x400
   268bc:	sub	r3, r3, #56	; 0x38
   268c0:	moveq	r4, r3
   268c4:	add	r1, r4, r1
   268c8:	ldr	r1, [r1, #-4]
   268cc:	str	r1, [r0, r7, lsl #2]
   268d0:	b	26874 <__assert_fail@plt+0x153c4>
   268d4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   268d8:	cmp	r2, #0
   268dc:	beq	2695c <__assert_fail@plt+0x154ac>
   268e0:	add	r1, sp, #168	; 0xa8
   268e4:	mov	r7, #96	; 0x60
   268e8:	mov	r6, #1
   268ec:	mov	r5, #0
   268f0:	add	lr, r1, #12
   268f4:	tst	r2, #1
   268f8:	bne	26918 <__assert_fail@plt+0x15468>
   268fc:	lsr	r1, r2, #1
   26900:	cmp	r5, r2, lsr #1
   26904:	add	r7, r7, #1
   26908:	lsl	r6, r6, #1
   2690c:	mov	r2, r1
   26910:	bne	268f4 <__assert_fail@plt+0x15444>
   26914:	b	2695c <__assert_fail@plt+0x154ac>
   26918:	mov	r1, #0
   2691c:	ldr	r4, [lr, r1, lsl #3]
   26920:	add	r1, r1, #4
   26924:	tst	r4, r6
   26928:	beq	2691c <__assert_fail@plt+0x1546c>
   2692c:	ldr	r3, [sp, #96]	; 0x60
   26930:	ldr	r4, [r3, #108]	; 0x6c
   26934:	sub	r3, fp, #2048	; 0x800
   26938:	tst	r4, r6
   2693c:	sub	r4, r3, #56	; 0x38
   26940:	sub	r3, fp, #1024	; 0x400
   26944:	sub	r3, r3, #56	; 0x38
   26948:	moveq	r4, r3
   2694c:	add	r1, r4, r1
   26950:	ldr	r1, [r1, #-4]
   26954:	str	r1, [r0, r7, lsl #2]
   26958:	b	268fc <__assert_fail@plt+0x1544c>
   2695c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   26960:	cmp	r2, #0
   26964:	beq	269e4 <__assert_fail@plt+0x15534>
   26968:	add	r1, sp, #168	; 0xa8
   2696c:	mov	r7, #128	; 0x80
   26970:	mov	r6, #1
   26974:	mov	r5, #0
   26978:	add	lr, r1, #16
   2697c:	tst	r2, #1
   26980:	bne	269a0 <__assert_fail@plt+0x154f0>
   26984:	lsr	r1, r2, #1
   26988:	cmp	r5, r2, lsr #1
   2698c:	add	r7, r7, #1
   26990:	lsl	r6, r6, #1
   26994:	mov	r2, r1
   26998:	bne	2697c <__assert_fail@plt+0x154cc>
   2699c:	b	269e4 <__assert_fail@plt+0x15534>
   269a0:	mov	r1, #0
   269a4:	ldr	r4, [lr, r1, lsl #3]
   269a8:	add	r1, r1, #4
   269ac:	tst	r4, r6
   269b0:	beq	269a4 <__assert_fail@plt+0x154f4>
   269b4:	ldr	r3, [sp, #4]
   269b8:	ldr	r4, [r3]
   269bc:	sub	r3, fp, #2048	; 0x800
   269c0:	tst	r4, r6
   269c4:	sub	r4, r3, #56	; 0x38
   269c8:	sub	r3, fp, #1024	; 0x400
   269cc:	sub	r3, r3, #56	; 0x38
   269d0:	moveq	r4, r3
   269d4:	add	r1, r4, r1
   269d8:	ldr	r1, [r1, #-4]
   269dc:	str	r1, [r0, r7, lsl #2]
   269e0:	b	26984 <__assert_fail@plt+0x154d4>
   269e4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   269e8:	cmp	r2, #0
   269ec:	beq	26a6c <__assert_fail@plt+0x155bc>
   269f0:	add	r1, sp, #168	; 0xa8
   269f4:	mov	r7, #160	; 0xa0
   269f8:	mov	r6, #1
   269fc:	mov	r5, #0
   26a00:	add	lr, r1, #20
   26a04:	tst	r2, #1
   26a08:	bne	26a28 <__assert_fail@plt+0x15578>
   26a0c:	lsr	r1, r2, #1
   26a10:	cmp	r5, r2, lsr #1
   26a14:	add	r7, r7, #1
   26a18:	lsl	r6, r6, #1
   26a1c:	mov	r2, r1
   26a20:	bne	26a04 <__assert_fail@plt+0x15554>
   26a24:	b	26a6c <__assert_fail@plt+0x155bc>
   26a28:	mov	r1, #0
   26a2c:	ldr	r4, [lr, r1, lsl #3]
   26a30:	add	r1, r1, #4
   26a34:	tst	r4, r6
   26a38:	beq	26a2c <__assert_fail@plt+0x1557c>
   26a3c:	ldr	r3, [sp, #96]	; 0x60
   26a40:	ldr	r4, [r3, #116]	; 0x74
   26a44:	sub	r3, fp, #2048	; 0x800
   26a48:	tst	r4, r6
   26a4c:	sub	r4, r3, #56	; 0x38
   26a50:	sub	r3, fp, #1024	; 0x400
   26a54:	sub	r3, r3, #56	; 0x38
   26a58:	moveq	r4, r3
   26a5c:	add	r1, r4, r1
   26a60:	ldr	r1, [r1, #-4]
   26a64:	str	r1, [r0, r7, lsl #2]
   26a68:	b	26a0c <__assert_fail@plt+0x1555c>
   26a6c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   26a70:	cmp	r2, #0
   26a74:	beq	26af4 <__assert_fail@plt+0x15644>
   26a78:	add	r1, sp, #168	; 0xa8
   26a7c:	mov	r7, #192	; 0xc0
   26a80:	mov	r6, #1
   26a84:	mov	r5, #0
   26a88:	add	lr, r1, #24
   26a8c:	tst	r2, #1
   26a90:	bne	26ab0 <__assert_fail@plt+0x15600>
   26a94:	lsr	r1, r2, #1
   26a98:	cmp	r5, r2, lsr #1
   26a9c:	add	r7, r7, #1
   26aa0:	lsl	r6, r6, #1
   26aa4:	mov	r2, r1
   26aa8:	bne	26a8c <__assert_fail@plt+0x155dc>
   26aac:	b	26af4 <__assert_fail@plt+0x15644>
   26ab0:	mov	r1, #0
   26ab4:	ldr	r4, [lr, r1, lsl #3]
   26ab8:	add	r1, r1, #4
   26abc:	tst	r4, r6
   26ac0:	beq	26ab4 <__assert_fail@plt+0x15604>
   26ac4:	ldr	r3, [sp, #96]	; 0x60
   26ac8:	ldr	r4, [r3, #120]	; 0x78
   26acc:	sub	r3, fp, #2048	; 0x800
   26ad0:	tst	r4, r6
   26ad4:	sub	r4, r3, #56	; 0x38
   26ad8:	sub	r3, fp, #1024	; 0x400
   26adc:	sub	r3, r3, #56	; 0x38
   26ae0:	moveq	r4, r3
   26ae4:	add	r1, r4, r1
   26ae8:	ldr	r1, [r1, #-4]
   26aec:	str	r1, [r0, r7, lsl #2]
   26af0:	b	26a94 <__assert_fail@plt+0x155e4>
   26af4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   26af8:	cmp	r2, #0
   26afc:	beq	27254 <__assert_fail@plt+0x15da4>
   26b00:	mov	r3, #224	; 0xe0
   26b04:	mov	r7, #1
   26b08:	mov	r6, #0
   26b0c:	tst	r2, #1
   26b10:	bne	26b30 <__assert_fail@plt+0x15680>
   26b14:	lsr	r1, r2, #1
   26b18:	cmp	r6, r2, lsr #1
   26b1c:	add	r3, r3, #1
   26b20:	lsl	r7, r7, #1
   26b24:	mov	r2, r1
   26b28:	bne	26b0c <__assert_fail@plt+0x1565c>
   26b2c:	b	27254 <__assert_fail@plt+0x15da4>
   26b30:	ldr	r4, [sp, #12]
   26b34:	mov	r1, #0
   26b38:	ldr	r5, [r4, r1, lsl #3]
   26b3c:	add	r1, r1, #4
   26b40:	tst	r5, r7
   26b44:	beq	26b38 <__assert_fail@plt+0x15688>
   26b48:	ldr	r5, [sp, #96]	; 0x60
   26b4c:	sub	lr, fp, #2048	; 0x800
   26b50:	ldr	r5, [r5, #124]	; 0x7c
   26b54:	tst	r5, r7
   26b58:	sub	r5, lr, #56	; 0x38
   26b5c:	sub	lr, fp, #1024	; 0x400
   26b60:	sub	r4, lr, #56	; 0x38
   26b64:	moveq	r5, r4
   26b68:	add	r1, r5, r1
   26b6c:	ldr	r1, [r1, #-4]
   26b70:	str	r1, [r0, r3, lsl #2]
   26b74:	b	26b14 <__assert_fail@plt+0x15664>
   26b78:	ldr	r1, [sp, #148]	; 0x94
   26b7c:	str	r0, [fp, #-56]	; 0xffffffc8
   26b80:	str	r1, [fp, #-3148]	; 0xfffff3b4
   26b84:	ldr	r1, [sp, #152]	; 0x98
   26b88:	str	r1, [fp, #-3152]	; 0xfffff3b0
   26b8c:	ldr	r1, [sp, #156]	; 0x9c
   26b90:	str	r1, [fp, #-3156]	; 0xfffff3ac
   26b94:	ldr	r1, [sp, #160]	; 0xa0
   26b98:	str	r1, [fp, #-3160]	; 0xfffff3a8
   26b9c:	ldr	r1, [sp, #140]	; 0x8c
   26ba0:	str	r1, [fp, #-3164]	; 0xfffff3a4
   26ba4:	ldr	r1, [sp, #144]	; 0x90
   26ba8:	str	r1, [fp, #-3168]	; 0xfffff3a0
   26bac:	str	r6, [fp, #-3172]	; 0xfffff39c
   26bb0:	str	r5, [fp, #-3176]	; 0xfffff398
   26bb4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   26bb8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   26bbc:	ldr	r0, [sp, #164]	; 0xa4
   26bc0:	cmp	r0, #1
   26bc4:	blt	26d28 <__assert_fail@plt+0x15878>
   26bc8:	sub	lr, fp, #6144	; 0x1800
   26bcc:	sub	r0, lr, #104	; 0x68
   26bd0:	add	r4, r0, #8
   26bd4:	ldr	r0, [r4], #12
   26bd8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   26bdc:	ldr	r0, [sp, #164]	; 0xa4
   26be0:	subs	r0, r0, #1
   26be4:	str	r0, [sp, #164]	; 0xa4
   26be8:	bne	26bd4 <__assert_fail@plt+0x15724>
   26bec:	b	26d28 <__assert_fail@plt+0x15878>
   26bf0:	ldr	r0, [sp, #24]
   26bf4:	str	r9, [fp, #-1052]	; 0xfffffbe4
   26bf8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26bfc:	ldr	r0, [sp, #28]
   26c00:	str	r0, [fp, #-1060]	; 0xfffffbdc
   26c04:	ldr	r0, [sp, #32]
   26c08:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26c0c:	ldr	r0, [sp, #40]	; 0x28
   26c10:	str	r0, [fp, #-1068]	; 0xfffffbd4
   26c14:	ldr	r0, [sp, #44]	; 0x2c
   26c18:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26c1c:	ldr	r0, [sp, #48]	; 0x30
   26c20:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26c24:	ldr	r0, [sp, #120]	; 0x78
   26c28:	b	26c58 <__assert_fail@plt+0x157a8>
   26c2c:	ldr	r0, [sp, #36]	; 0x24
   26c30:	str	sl, [fp, #-1052]	; 0xfffffbe4
   26c34:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26c38:	ldr	r0, [sp, #52]	; 0x34
   26c3c:	str	r7, [fp, #-1060]	; 0xfffffbdc
   26c40:	str	r9, [fp, #-1064]	; 0xfffffbd8
   26c44:	str	r5, [fp, #-1068]	; 0xfffffbd4
   26c48:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26c4c:	ldr	r0, [sp, #56]	; 0x38
   26c50:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26c54:	ldr	r0, [sp, #60]	; 0x3c
   26c58:	str	r0, [fp, #-1080]	; 0xfffffbc8
   26c5c:	ldr	r0, [sp, #164]	; 0xa4
   26c60:	cmp	r0, #1
   26c64:	bge	26d04 <__assert_fail@plt+0x15854>
   26c68:	b	26d28 <__assert_fail@plt+0x15878>
   26c6c:	ldr	r0, [sp, #24]
   26c70:	str	r9, [fp, #-1052]	; 0xfffffbe4
   26c74:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26c78:	ldr	r0, [sp, #28]
   26c7c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   26c80:	ldr	r0, [sp, #32]
   26c84:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26c88:	ldr	r0, [sp, #40]	; 0x28
   26c8c:	str	r0, [fp, #-1068]	; 0xfffffbd4
   26c90:	ldr	r0, [sp, #44]	; 0x2c
   26c94:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26c98:	ldr	r0, [sp, #48]	; 0x30
   26c9c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26ca0:	ldr	r0, [sp, #120]	; 0x78
   26ca4:	b	26cd8 <__assert_fail@plt+0x15828>
   26ca8:	ldr	r0, [sp, #36]	; 0x24
   26cac:	str	sl, [fp, #-1052]	; 0xfffffbe4
   26cb0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26cb4:	ldr	r0, [sp, #48]	; 0x30
   26cb8:	str	r7, [fp, #-1060]	; 0xfffffbdc
   26cbc:	str	r9, [fp, #-1064]	; 0xfffffbd8
   26cc0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   26cc4:	ldr	r0, [sp, #52]	; 0x34
   26cc8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26ccc:	ldr	r0, [sp, #56]	; 0x38
   26cd0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26cd4:	ldr	r0, [sp, #60]	; 0x3c
   26cd8:	ldr	r1, [sp, #164]	; 0xa4
   26cdc:	sub	lr, fp, #6144	; 0x1800
   26ce0:	str	r0, [fp, #-1080]	; 0xfffffbc8
   26ce4:	mov	r0, #0
   26ce8:	sub	r2, lr, #104	; 0x68
   26cec:	str	r0, [r4]
   26cf0:	add	r1, r1, r1, lsl #1
   26cf4:	str	r0, [r2, r1, lsl #2]
   26cf8:	ldr	r0, [sp, #164]	; 0xa4
   26cfc:	cmp	r0, #1
   26d00:	blt	26d28 <__assert_fail@plt+0x15878>
   26d04:	sub	lr, fp, #6144	; 0x1800
   26d08:	sub	r0, lr, #104	; 0x68
   26d0c:	add	r4, r0, #8
   26d10:	ldr	r0, [r4], #12
   26d14:	bl	2bc28 <__assert_fail@plt+0x1a778>
   26d18:	ldr	r0, [sp, #164]	; 0xa4
   26d1c:	subs	r0, r0, #1
   26d20:	str	r0, [sp, #164]	; 0xa4
   26d24:	bne	26d10 <__assert_fail@plt+0x15860>
   26d28:	mov	r0, #0
   26d2c:	sub	sp, fp, #48	; 0x30
   26d30:	vpop	{d8-d9}
   26d34:	add	sp, sp, #4
   26d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d3c:	mov	r0, #0
   26d40:	str	r4, [sp, #164]	; 0xa4
   26d44:	str	r0, [r6]
   26d48:	str	r0, [r5]
   26d4c:	ldr	r0, [sp, #164]	; 0xa4
   26d50:	cmp	r0, #1
   26d54:	bge	26d04 <__assert_fail@plt+0x15854>
   26d58:	b	26d28 <__assert_fail@plt+0x15878>
   26d5c:	mov	r0, #0
   26d60:	bne	26d80 <__assert_fail@plt+0x158d0>
   26d64:	mov	r0, #4
   26d68:	mov	r1, #256	; 0x100
   26d6c:	bl	2ba08 <__assert_fail@plt+0x1a558>
   26d70:	ldr	r1, [sp, #104]	; 0x68
   26d74:	cmp	r0, #0
   26d78:	str	r0, [r1, #44]	; 0x2c
   26d7c:	movwne	r0, #1
   26d80:	sub	sp, fp, #48	; 0x30
   26d84:	vpop	{d8-d9}
   26d88:	add	sp, sp, #4
   26d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d90:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   26d94:	bl	2bc28 <__assert_fail@plt+0x1a778>
   26d98:	b	26bc8 <__assert_fail@plt+0x15718>
   26d9c:	mov	r1, #512	; 0x200
   26da0:	bl	2ba08 <__assert_fail@plt+0x1a558>
   26da4:	cmp	r0, #0
   26da8:	str	r0, [r4, #48]	; 0x30
   26dac:	beq	26bb4 <__assert_fail@plt+0x15704>
   26db0:	ldr	ip, [fp, #-3176]	; 0xfffff398
   26db4:	cmp	ip, #0
   26db8:	beq	26e44 <__assert_fail@plt+0x15994>
   26dbc:	sub	lr, fp, #1024	; 0x400
   26dc0:	mov	r7, #0
   26dc4:	mov	r6, #1
   26dc8:	add	r4, sp, #168	; 0xa8
   26dcc:	mov	r5, ip
   26dd0:	sub	r1, lr, #56	; 0x38
   26dd4:	sub	lr, r1, #4
   26dd8:	sub	r1, fp, #2048	; 0x800
   26ddc:	sub	r1, r1, #56	; 0x38
   26de0:	sub	r8, r1, #4
   26de4:	mov	r1, #0
   26de8:	tst	r5, #1
   26dec:	bne	26e0c <__assert_fail@plt+0x1595c>
   26df0:	lsr	r2, r5, #1
   26df4:	cmp	r7, r5, lsr #1
   26df8:	add	r1, r1, #1
   26dfc:	lsl	r6, r6, #1
   26e00:	mov	r5, r2
   26e04:	bne	26de8 <__assert_fail@plt+0x15938>
   26e08:	b	26e44 <__assert_fail@plt+0x15994>
   26e0c:	mov	r3, r4
   26e10:	mov	sl, lr
   26e14:	mov	r9, r8
   26e18:	ldr	r2, [r3], #32
   26e1c:	add	sl, sl, #4
   26e20:	add	r9, r9, #4
   26e24:	tst	r2, r6
   26e28:	beq	26e18 <__assert_fail@plt+0x15968>
   26e2c:	ldr	r2, [sl]
   26e30:	mov	r3, r0
   26e34:	str	r2, [r3, r1, lsl #2]!
   26e38:	ldr	r2, [r9]
   26e3c:	str	r2, [r3, #1024]	; 0x400
   26e40:	b	26df0 <__assert_fail@plt+0x15940>
   26e44:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   26e48:	cmp	r2, #0
   26e4c:	beq	26ed8 <__assert_fail@plt+0x15a28>
   26e50:	add	r1, sp, #168	; 0xa8
   26e54:	sub	lr, fp, #2048	; 0x800
   26e58:	mov	r5, #32
   26e5c:	mov	r3, #0
   26e60:	add	r4, r1, #4
   26e64:	sub	r1, lr, #56	; 0x38
   26e68:	sub	lr, r1, #4
   26e6c:	sub	r1, fp, #1024	; 0x400
   26e70:	sub	r1, r1, #56	; 0x38
   26e74:	sub	r8, r1, #4
   26e78:	mov	r1, #1
   26e7c:	tst	r2, #1
   26e80:	bne	26ea0 <__assert_fail@plt+0x159f0>
   26e84:	lsr	r6, r2, #1
   26e88:	cmp	r3, r2, lsr #1
   26e8c:	add	r5, r5, #1
   26e90:	lsl	r1, r1, #1
   26e94:	mov	r2, r6
   26e98:	bne	26e7c <__assert_fail@plt+0x159cc>
   26e9c:	b	26ed8 <__assert_fail@plt+0x15a28>
   26ea0:	mov	r7, r4
   26ea4:	mov	r9, lr
   26ea8:	mov	sl, r8
   26eac:	ldr	r6, [r7], #32
   26eb0:	add	r9, r9, #4
   26eb4:	add	sl, sl, #4
   26eb8:	tst	r6, r1
   26ebc:	beq	26eac <__assert_fail@plt+0x159fc>
   26ec0:	ldr	r6, [sl]
   26ec4:	mov	r7, r0
   26ec8:	str	r6, [r7, r5, lsl #2]!
   26ecc:	ldr	r6, [r9]
   26ed0:	str	r6, [r7, #1024]	; 0x400
   26ed4:	b	26e84 <__assert_fail@plt+0x159d4>
   26ed8:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   26edc:	cmp	r2, #0
   26ee0:	beq	26f6c <__assert_fail@plt+0x15abc>
   26ee4:	add	r1, sp, #168	; 0xa8
   26ee8:	sub	lr, fp, #2048	; 0x800
   26eec:	mov	r5, #64	; 0x40
   26ef0:	mov	r3, #0
   26ef4:	add	r4, r1, #8
   26ef8:	sub	r1, lr, #56	; 0x38
   26efc:	sub	lr, r1, #4
   26f00:	sub	r1, fp, #1024	; 0x400
   26f04:	sub	r1, r1, #56	; 0x38
   26f08:	sub	r8, r1, #4
   26f0c:	mov	r1, #1
   26f10:	tst	r2, #1
   26f14:	bne	26f34 <__assert_fail@plt+0x15a84>
   26f18:	lsr	r6, r2, #1
   26f1c:	cmp	r3, r2, lsr #1
   26f20:	add	r5, r5, #1
   26f24:	lsl	r1, r1, #1
   26f28:	mov	r2, r6
   26f2c:	bne	26f10 <__assert_fail@plt+0x15a60>
   26f30:	b	26f6c <__assert_fail@plt+0x15abc>
   26f34:	mov	r7, r4
   26f38:	mov	r9, lr
   26f3c:	mov	sl, r8
   26f40:	ldr	r6, [r7], #32
   26f44:	add	r9, r9, #4
   26f48:	add	sl, sl, #4
   26f4c:	tst	r6, r1
   26f50:	beq	26f40 <__assert_fail@plt+0x15a90>
   26f54:	ldr	r6, [sl]
   26f58:	mov	r7, r0
   26f5c:	str	r6, [r7, r5, lsl #2]!
   26f60:	ldr	r6, [r9]
   26f64:	str	r6, [r7, #1024]	; 0x400
   26f68:	b	26f18 <__assert_fail@plt+0x15a68>
   26f6c:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   26f70:	cmp	r2, #0
   26f74:	beq	27000 <__assert_fail@plt+0x15b50>
   26f78:	add	r1, sp, #168	; 0xa8
   26f7c:	sub	lr, fp, #2048	; 0x800
   26f80:	mov	r5, #96	; 0x60
   26f84:	mov	r3, #0
   26f88:	add	r4, r1, #12
   26f8c:	sub	r1, lr, #56	; 0x38
   26f90:	sub	lr, r1, #4
   26f94:	sub	r1, fp, #1024	; 0x400
   26f98:	sub	r1, r1, #56	; 0x38
   26f9c:	sub	r8, r1, #4
   26fa0:	mov	r1, #1
   26fa4:	tst	r2, #1
   26fa8:	bne	26fc8 <__assert_fail@plt+0x15b18>
   26fac:	lsr	r6, r2, #1
   26fb0:	cmp	r3, r2, lsr #1
   26fb4:	add	r5, r5, #1
   26fb8:	lsl	r1, r1, #1
   26fbc:	mov	r2, r6
   26fc0:	bne	26fa4 <__assert_fail@plt+0x15af4>
   26fc4:	b	27000 <__assert_fail@plt+0x15b50>
   26fc8:	mov	r7, r4
   26fcc:	mov	r9, lr
   26fd0:	mov	sl, r8
   26fd4:	ldr	r6, [r7], #32
   26fd8:	add	r9, r9, #4
   26fdc:	add	sl, sl, #4
   26fe0:	tst	r6, r1
   26fe4:	beq	26fd4 <__assert_fail@plt+0x15b24>
   26fe8:	ldr	r6, [sl]
   26fec:	mov	r7, r0
   26ff0:	str	r6, [r7, r5, lsl #2]!
   26ff4:	ldr	r6, [r9]
   26ff8:	str	r6, [r7, #1024]	; 0x400
   26ffc:	b	26fac <__assert_fail@plt+0x15afc>
   27000:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   27004:	cmp	r2, #0
   27008:	beq	27094 <__assert_fail@plt+0x15be4>
   2700c:	add	r1, sp, #168	; 0xa8
   27010:	sub	lr, fp, #2048	; 0x800
   27014:	mov	r5, #128	; 0x80
   27018:	mov	r3, #0
   2701c:	add	r4, r1, #16
   27020:	sub	r1, lr, #56	; 0x38
   27024:	sub	lr, r1, #4
   27028:	sub	r1, fp, #1024	; 0x400
   2702c:	sub	r1, r1, #56	; 0x38
   27030:	sub	r8, r1, #4
   27034:	mov	r1, #1
   27038:	tst	r2, #1
   2703c:	bne	2705c <__assert_fail@plt+0x15bac>
   27040:	lsr	r6, r2, #1
   27044:	cmp	r3, r2, lsr #1
   27048:	add	r5, r5, #1
   2704c:	lsl	r1, r1, #1
   27050:	mov	r2, r6
   27054:	bne	27038 <__assert_fail@plt+0x15b88>
   27058:	b	27094 <__assert_fail@plt+0x15be4>
   2705c:	mov	r7, r4
   27060:	mov	r9, lr
   27064:	mov	sl, r8
   27068:	ldr	r6, [r7], #32
   2706c:	add	r9, r9, #4
   27070:	add	sl, sl, #4
   27074:	tst	r6, r1
   27078:	beq	27068 <__assert_fail@plt+0x15bb8>
   2707c:	ldr	r6, [sl]
   27080:	mov	r7, r0
   27084:	str	r6, [r7, r5, lsl #2]!
   27088:	ldr	r6, [r9]
   2708c:	str	r6, [r7, #1024]	; 0x400
   27090:	b	27040 <__assert_fail@plt+0x15b90>
   27094:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   27098:	cmp	r2, #0
   2709c:	beq	27128 <__assert_fail@plt+0x15c78>
   270a0:	add	r1, sp, #168	; 0xa8
   270a4:	sub	lr, fp, #2048	; 0x800
   270a8:	mov	r5, #160	; 0xa0
   270ac:	mov	r3, #0
   270b0:	add	r4, r1, #20
   270b4:	sub	r1, lr, #56	; 0x38
   270b8:	sub	lr, r1, #4
   270bc:	sub	r1, fp, #1024	; 0x400
   270c0:	sub	r1, r1, #56	; 0x38
   270c4:	sub	r8, r1, #4
   270c8:	mov	r1, #1
   270cc:	tst	r2, #1
   270d0:	bne	270f0 <__assert_fail@plt+0x15c40>
   270d4:	lsr	r6, r2, #1
   270d8:	cmp	r3, r2, lsr #1
   270dc:	add	r5, r5, #1
   270e0:	lsl	r1, r1, #1
   270e4:	mov	r2, r6
   270e8:	bne	270cc <__assert_fail@plt+0x15c1c>
   270ec:	b	27128 <__assert_fail@plt+0x15c78>
   270f0:	mov	r7, r4
   270f4:	mov	r9, lr
   270f8:	mov	sl, r8
   270fc:	ldr	r6, [r7], #32
   27100:	add	r9, r9, #4
   27104:	add	sl, sl, #4
   27108:	tst	r6, r1
   2710c:	beq	270fc <__assert_fail@plt+0x15c4c>
   27110:	ldr	r6, [sl]
   27114:	mov	r7, r0
   27118:	str	r6, [r7, r5, lsl #2]!
   2711c:	ldr	r6, [r9]
   27120:	str	r6, [r7, #1024]	; 0x400
   27124:	b	270d4 <__assert_fail@plt+0x15c24>
   27128:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   2712c:	cmp	r2, #0
   27130:	beq	271bc <__assert_fail@plt+0x15d0c>
   27134:	add	r1, sp, #168	; 0xa8
   27138:	sub	lr, fp, #2048	; 0x800
   2713c:	mov	r5, #192	; 0xc0
   27140:	mov	r3, #0
   27144:	add	r4, r1, #24
   27148:	sub	r1, lr, #56	; 0x38
   2714c:	sub	lr, r1, #4
   27150:	sub	r1, fp, #1024	; 0x400
   27154:	sub	r1, r1, #56	; 0x38
   27158:	sub	r8, r1, #4
   2715c:	mov	r1, #1
   27160:	tst	r2, #1
   27164:	bne	27184 <__assert_fail@plt+0x15cd4>
   27168:	lsr	r6, r2, #1
   2716c:	cmp	r3, r2, lsr #1
   27170:	add	r5, r5, #1
   27174:	lsl	r1, r1, #1
   27178:	mov	r2, r6
   2717c:	bne	27160 <__assert_fail@plt+0x15cb0>
   27180:	b	271bc <__assert_fail@plt+0x15d0c>
   27184:	mov	r7, r4
   27188:	mov	r9, lr
   2718c:	mov	sl, r8
   27190:	ldr	r6, [r7], #32
   27194:	add	r9, r9, #4
   27198:	add	sl, sl, #4
   2719c:	tst	r6, r1
   271a0:	beq	27190 <__assert_fail@plt+0x15ce0>
   271a4:	ldr	r6, [sl]
   271a8:	mov	r7, r0
   271ac:	str	r6, [r7, r5, lsl #2]!
   271b0:	ldr	r6, [r9]
   271b4:	str	r6, [r7, #1024]	; 0x400
   271b8:	b	27168 <__assert_fail@plt+0x15cb8>
   271bc:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   271c0:	cmp	r2, #0
   271c4:	beq	27250 <__assert_fail@plt+0x15da0>
   271c8:	add	r1, sp, #168	; 0xa8
   271cc:	sub	lr, fp, #2048	; 0x800
   271d0:	mov	r5, #224	; 0xe0
   271d4:	mov	r3, #0
   271d8:	add	r4, r1, #28
   271dc:	sub	r1, lr, #56	; 0x38
   271e0:	sub	lr, r1, #4
   271e4:	sub	r1, fp, #1024	; 0x400
   271e8:	sub	r1, r1, #56	; 0x38
   271ec:	sub	r8, r1, #4
   271f0:	mov	r1, #1
   271f4:	tst	r2, #1
   271f8:	bne	27218 <__assert_fail@plt+0x15d68>
   271fc:	lsr	r6, r2, #1
   27200:	cmp	r3, r2, lsr #1
   27204:	add	r5, r5, #1
   27208:	lsl	r1, r1, #1
   2720c:	mov	r2, r6
   27210:	bne	271f4 <__assert_fail@plt+0x15d44>
   27214:	b	27250 <__assert_fail@plt+0x15da0>
   27218:	mov	r7, r4
   2721c:	mov	r9, lr
   27220:	mov	sl, r8
   27224:	ldr	r6, [r7], #32
   27228:	add	r9, r9, #4
   2722c:	add	sl, sl, #4
   27230:	tst	r6, r1
   27234:	beq	27224 <__assert_fail@plt+0x15d74>
   27238:	ldr	r6, [sl]
   2723c:	mov	r7, r0
   27240:	str	r6, [r7, r5, lsl #2]!
   27244:	ldr	r6, [r9]
   27248:	str	r6, [r7, #1024]	; 0x400
   2724c:	b	271fc <__assert_fail@plt+0x15d4c>
   27250:	ldr	r8, [sp, #132]	; 0x84
   27254:	tst	ip, #1024	; 0x400
   27258:	add	r3, sp, #168	; 0xa8
   2725c:	beq	272a0 <__assert_fail@plt+0x15df0>
   27260:	ldr	r1, [sp, #164]	; 0xa4
   27264:	ldrb	r2, [r3, #1]
   27268:	tst	r2, #4
   2726c:	bne	2728c <__assert_fail@plt+0x15ddc>
   27270:	ldr	r2, [sp, #128]	; 0x80
   27274:	add	r3, r3, #32
   27278:	subs	r1, r1, #1
   2727c:	add	r2, r2, #4
   27280:	str	r2, [sp, #128]	; 0x80
   27284:	bne	27264 <__assert_fail@plt+0x15db4>
   27288:	b	272a0 <__assert_fail@plt+0x15df0>
   2728c:	ldr	r1, [sp, #128]	; 0x80
   27290:	tst	r8, #1
   27294:	ldr	r1, [r1]
   27298:	str	r1, [r0, #40]	; 0x28
   2729c:	strne	r1, [r0, #1064]	; 0x428
   272a0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   272a4:	bl	2bc28 <__assert_fail@plt+0x1a778>
   272a8:	sub	lr, fp, #6144	; 0x1800
   272ac:	sub	r0, lr, #104	; 0x68
   272b0:	add	r4, r0, #8
   272b4:	ldr	r0, [r4], #12
   272b8:	bl	2bc28 <__assert_fail@plt+0x1a778>
   272bc:	ldr	r0, [sp, #164]	; 0xa4
   272c0:	subs	r0, r0, #1
   272c4:	str	r0, [sp, #164]	; 0xa4
   272c8:	bne	272b4 <__assert_fail@plt+0x15e04>
   272cc:	mov	r0, #1
   272d0:	sub	sp, fp, #48	; 0x30
   272d4:	vpop	{d8-d9}
   272d8:	add	sp, sp, #4
   272dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   272e4:	add	fp, sp, #28
   272e8:	sub	sp, sp, #68	; 0x44
   272ec:	ldr	r4, [r1, #8]
   272f0:	ldr	r6, [r1, #12]
   272f4:	mov	r8, r0
   272f8:	mov	r0, #1
   272fc:	mov	r5, r1
   27300:	str	r0, [fp, #-36]	; 0xffffffdc
   27304:	str	r0, [fp, #-40]	; 0xffffffd8
   27308:	mov	r0, #4
   2730c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   27310:	cmp	r0, #0
   27314:	str	r0, [fp, #-32]	; 0xffffffe0
   27318:	beq	279f8 <__assert_fail@plt+0x16548>
   2731c:	str	r4, [r0]
   27320:	sub	r3, fp, #40	; 0x28
   27324:	mov	r0, r8
   27328:	mov	r1, r5
   2732c:	mov	r2, r6
   27330:	str	r5, [sp, #28]
   27334:	bl	27a1c <__assert_fail@plt+0x1656c>
   27338:	cmp	r0, #0
   2733c:	bne	279f0 <__assert_fail@plt+0x16540>
   27340:	mov	r4, r6
   27344:	mov	r9, #1
   27348:	mov	r1, #0
   2734c:	str	r8, [sp, #48]	; 0x30
   27350:	cmp	r4, #1
   27354:	bge	27384 <__assert_fail@plt+0x15ed4>
   27358:	b	279b0 <__assert_fail@plt+0x16500>
   2735c:	mov	r0, r8
   27360:	mov	r1, lr
   27364:	mov	r2, r4
   27368:	sub	r3, fp, #40	; 0x28
   2736c:	bl	27a1c <__assert_fail@plt+0x1656c>
   27370:	ldr	r1, [sp, #4]
   27374:	cmp	r0, #0
   27378:	bne	279f0 <__assert_fail@plt+0x16540>
   2737c:	cmp	r4, #1
   27380:	blt	279b0 <__assert_fail@plt+0x16500>
   27384:	ldr	lr, [sp, #28]
   27388:	ldr	r0, [lr]
   2738c:	ldr	r2, [r0, r4, lsl #2]
   27390:	cmp	r2, #0
   27394:	mov	r2, #0
   27398:	addeq	r2, r1, #1
   2739c:	ldr	r1, [r8, #120]	; 0x78
   273a0:	cmp	r2, r1
   273a4:	bgt	279b8 <__assert_fail@plt+0x16508>
   273a8:	mov	r0, #0
   273ac:	str	r4, [sp, #36]	; 0x24
   273b0:	sub	r4, r4, #1
   273b4:	str	r2, [sp, #4]
   273b8:	str	r0, [fp, #-36]	; 0xffffffdc
   273bc:	ldr	r0, [r8, #100]	; 0x64
   273c0:	ldr	r1, [r0, r4, lsl #2]
   273c4:	cmp	r1, #0
   273c8:	beq	2735c <__assert_fail@plt+0x15eac>
   273cc:	ldr	r0, [r1, #20]
   273d0:	cmp	r0, #1
   273d4:	blt	2735c <__assert_fail@plt+0x15eac>
   273d8:	ldr	r0, [r8, #84]	; 0x54
   273dc:	mov	r2, #0
   273e0:	str	r4, [sp, #32]
   273e4:	str	r1, [sp, #16]
   273e8:	str	r0, [sp, #24]
   273ec:	b	27438 <__assert_fail@plt+0x15f88>
   273f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   273f4:	cmp	r2, #0
   273f8:	beq	27680 <__assert_fail@plt+0x161d0>
   273fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   27400:	ldr	r6, [fp, #-44]	; 0xffffffd4
   27404:	cmp	r1, #0
   27408:	bne	278b8 <__assert_fail@plt+0x16408>
   2740c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27410:	str	r6, [r0]
   27414:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27418:	add	r0, r0, #1
   2741c:	str	r0, [fp, #-36]	; 0xffffffdc
   27420:	ldr	r1, [sp, #16]
   27424:	ldr	r2, [sp, #20]
   27428:	ldr	r0, [r1, #20]
   2742c:	add	r2, r2, #1
   27430:	cmp	r2, r0
   27434:	bge	2735c <__assert_fail@plt+0x15eac>
   27438:	ldr	r0, [r1, #24]
   2743c:	str	r2, [sp, #20]
   27440:	ldr	r2, [r0, r2, lsl #2]
   27444:	ldr	r0, [sp, #24]
   27448:	ldr	r0, [r0]
   2744c:	mov	r1, r2
   27450:	str	r2, [fp, #-44]	; 0xffffffd4
   27454:	add	r0, r0, r2, lsl #3
   27458:	ldrb	r0, [r0, #6]
   2745c:	tst	r0, #16
   27460:	bne	27500 <__assert_fail@plt+0x16050>
   27464:	ldr	r0, [sp, #24]
   27468:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2746c:	mov	r2, r4
   27470:	ldr	r0, [r0]
   27474:	add	r1, r0, r1, lsl #3
   27478:	mov	r0, r8
   2747c:	bl	25390 <__assert_fail@plt+0x13ee0>
   27480:	ldr	lr, [sp, #28]
   27484:	cmp	r0, #0
   27488:	beq	27420 <__assert_fail@plt+0x15f70>
   2748c:	ldr	r0, [lr]
   27490:	ldr	r1, [sp, #36]	; 0x24
   27494:	ldr	r0, [r0, r1, lsl #2]
   27498:	cmp	r0, #0
   2749c:	beq	27420 <__assert_fail@plt+0x15f70>
   274a0:	ldr	r2, [r0, #8]
   274a4:	cmp	r2, #1
   274a8:	blt	27420 <__assert_fail@plt+0x15f70>
   274ac:	ldr	r1, [sp, #24]
   274b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   274b4:	ldr	r0, [r0, #12]
   274b8:	ldr	r1, [r1, #12]
   274bc:	ldr	r1, [r1, r3, lsl #2]
   274c0:	subs	r3, r2, #1
   274c4:	mov	r2, #0
   274c8:	beq	274ec <__assert_fail@plt+0x1603c>
   274cc:	add	r7, r2, r3
   274d0:	lsr	r6, r7, #1
   274d4:	ldr	r5, [r0, r6, lsl #2]
   274d8:	cmp	r5, r1
   274dc:	addlt	r2, r9, r7, lsr #1
   274e0:	movge	r3, r6
   274e4:	cmp	r2, r3
   274e8:	bcc	274cc <__assert_fail@plt+0x1601c>
   274ec:	ldr	r2, [r0, r2, lsl #2]
   274f0:	mov	r0, #1
   274f4:	cmp	r2, r1
   274f8:	bne	27420 <__assert_fail@plt+0x15f70>
   274fc:	b	2755c <__assert_fail@plt+0x160ac>
   27500:	ldr	r7, [r8, #84]	; 0x54
   27504:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27508:	mov	r5, r4
   2750c:	ldr	r4, [lr, #12]
   27510:	mov	r2, r8
   27514:	mov	r3, r5
   27518:	mov	r0, r7
   2751c:	bl	25004 <__assert_fail@plt+0x13b54>
   27520:	cmp	r0, #1
   27524:	blt	2754c <__assert_fail@plt+0x1609c>
   27528:	add	r1, r0, r5
   2752c:	cmp	r1, r4
   27530:	ble	27604 <__assert_fail@plt+0x16154>
   27534:	ldr	lr, [sp, #28]
   27538:	ldr	r4, [sp, #32]
   2753c:	ldr	ip, [lr, #20]
   27540:	cmp	ip, #0
   27544:	bne	27568 <__assert_fail@plt+0x160b8>
   27548:	b	273f0 <__assert_fail@plt+0x15f40>
   2754c:	ldr	lr, [sp, #28]
   27550:	cmp	r0, #0
   27554:	mov	r4, r5
   27558:	beq	27464 <__assert_fail@plt+0x15fb4>
   2755c:	ldr	ip, [lr, #20]
   27560:	cmp	ip, #0
   27564:	beq	273f0 <__assert_fail@plt+0x15f40>
   27568:	add	r0, r0, r4
   2756c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27570:	str	r0, [sp, #40]	; 0x28
   27574:	ldr	r0, [sp, #24]
   27578:	ldr	r0, [r0, #12]
   2757c:	ldr	r0, [r0, r1, lsl #2]
   27580:	str	r0, [sp, #8]
   27584:	ldr	r0, [r8, #108]	; 0x6c
   27588:	cmp	r0, #1
   2758c:	blt	276ac <__assert_fail@plt+0x161fc>
   27590:	ldr	r2, [r8, #116]	; 0x74
   27594:	ldr	r1, [sp, #40]	; 0x28
   27598:	mov	sl, #0
   2759c:	mov	r3, r0
   275a0:	add	r7, r3, sl
   275a4:	add	r7, r7, r7, lsr #31
   275a8:	asr	r6, r7, #1
   275ac:	add	r5, r6, r6, lsl #1
   275b0:	add	r5, r2, r5, lsl #3
   275b4:	ldr	r5, [r5, #4]
   275b8:	cmp	r5, r1
   275bc:	addlt	sl, r9, r7, asr #1
   275c0:	movge	r3, r6
   275c4:	cmp	sl, r3
   275c8:	blt	275a0 <__assert_fail@plt+0x160f0>
   275cc:	cmp	sl, r0
   275d0:	bge	276bc <__assert_fail@plt+0x1620c>
   275d4:	ldr	r2, [r8, #116]	; 0x74
   275d8:	add	r3, sl, sl, lsl #1
   275dc:	add	r2, r2, r3, lsl #3
   275e0:	ldr	r2, [r2, #4]
   275e4:	cmp	r2, r1
   275e8:	mvnne	sl, #0
   275ec:	cmp	r0, #1
   275f0:	bge	276c8 <__assert_fail@plt+0x16218>
   275f4:	mov	r5, #0
   275f8:	cmp	r5, r0
   275fc:	blt	27708 <__assert_fail@plt+0x16258>
   27600:	b	2772c <__assert_fail@plt+0x1627c>
   27604:	ldr	lr, [sp, #28]
   27608:	ldr	r4, [sp, #32]
   2760c:	ldr	r2, [lr]
   27610:	ldr	r2, [r2, r1, lsl #2]
   27614:	cmp	r2, #0
   27618:	beq	27464 <__assert_fail@plt+0x15fb4>
   2761c:	ldr	r3, [r2, #8]
   27620:	cmp	r3, #1
   27624:	blt	27464 <__assert_fail@plt+0x15fb4>
   27628:	ldr	r1, [r7, #12]
   2762c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   27630:	ldr	r2, [r2, #12]
   27634:	ldr	r1, [r1, r7, lsl #2]
   27638:	subs	r7, r3, #1
   2763c:	mov	r3, #0
   27640:	beq	27664 <__assert_fail@plt+0x161b4>
   27644:	add	r6, r3, r7
   27648:	lsr	r5, r6, #1
   2764c:	ldr	r4, [r2, r5, lsl #2]
   27650:	cmp	r4, r1
   27654:	addlt	r3, r9, r6, lsr #1
   27658:	movge	r7, r5
   2765c:	cmp	r3, r7
   27660:	bcc	27644 <__assert_fail@plt+0x16194>
   27664:	ldr	r4, [sp, #32]
   27668:	cmp	r0, #0
   2766c:	beq	27464 <__assert_fail@plt+0x15fb4>
   27670:	ldr	r2, [r2, r3, lsl #2]
   27674:	cmp	r2, r1
   27678:	beq	2755c <__assert_fail@plt+0x160ac>
   2767c:	b	27464 <__assert_fail@plt+0x15fb4>
   27680:	mov	r0, #4
   27684:	str	r9, [fp, #-36]	; 0xffffffdc
   27688:	str	r9, [fp, #-40]	; 0xffffffd8
   2768c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   27690:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27694:	cmp	r0, #0
   27698:	str	r0, [fp, #-32]	; 0xffffffe0
   2769c:	beq	279dc <__assert_fail@plt+0x1652c>
   276a0:	ldr	lr, [sp, #28]
   276a4:	str	r1, [r0]
   276a8:	b	27420 <__assert_fail@plt+0x15f70>
   276ac:	ldr	r1, [sp, #40]	; 0x28
   276b0:	mov	sl, #0
   276b4:	cmp	sl, r0
   276b8:	blt	275d4 <__assert_fail@plt+0x16124>
   276bc:	mvn	sl, #0
   276c0:	cmp	r0, #1
   276c4:	blt	275f4 <__assert_fail@plt+0x16144>
   276c8:	ldr	r2, [r8, #116]	; 0x74
   276cc:	mov	r5, #0
   276d0:	mov	r3, r0
   276d4:	add	r7, r3, r5
   276d8:	add	r7, r7, r7, lsr #31
   276dc:	asr	r6, r7, #1
   276e0:	add	r1, r6, r6, lsl #1
   276e4:	add	r1, r2, r1, lsl #3
   276e8:	ldr	r1, [r1, #4]
   276ec:	cmp	r1, r4
   276f0:	addlt	r5, r9, r7, asr #1
   276f4:	movge	r3, r6
   276f8:	cmp	r5, r3
   276fc:	blt	276d4 <__assert_fail@plt+0x16224>
   27700:	cmp	r5, r0
   27704:	bge	2772c <__assert_fail@plt+0x1627c>
   27708:	ldr	r0, [r8, #116]	; 0x74
   2770c:	add	r1, r5, r5, lsl #1
   27710:	add	r0, r0, r1, lsl #3
   27714:	ldr	r0, [r0, #4]
   27718:	cmp	r0, r4
   2771c:	mvnne	r5, #0
   27720:	cmp	ip, #1
   27724:	bge	27738 <__assert_fail@plt+0x16288>
   27728:	b	273f0 <__assert_fail@plt+0x15f40>
   2772c:	mvn	r5, #0
   27730:	cmp	ip, #1
   27734:	blt	273f0 <__assert_fail@plt+0x15f40>
   27738:	ldr	ip, [r8, #84]	; 0x54
   2773c:	mov	r6, #0
   27740:	str	ip, [sp, #12]
   27744:	ldr	r0, [lr, #24]
   27748:	ldr	r3, [r8, #116]	; 0x74
   2774c:	ldr	r4, [ip]
   27750:	mvn	r8, #0
   27754:	ldr	r2, [r0, r6, lsl #2]
   27758:	mov	r0, r3
   2775c:	add	r1, r2, r2, lsl #1
   27760:	ldr	r7, [r0, r1, lsl #3]!
   27764:	ldr	r0, [r0, #8]
   27768:	ldr	r4, [r4, r7, lsl #3]
   2776c:	ldr	r7, [sp, #40]	; 0x28
   27770:	cmp	r0, r7
   27774:	str	r4, [sp, #44]	; 0x2c
   27778:	ble	27794 <__assert_fail@plt+0x162e4>
   2777c:	mvn	r9, #0
   27780:	ldr	r1, [sp, #36]	; 0x24
   27784:	ldr	r4, [sp, #32]
   27788:	cmp	r0, r1
   2778c:	blt	27818 <__assert_fail@plt+0x16368>
   27790:	b	27894 <__assert_fail@plt+0x163e4>
   27794:	add	r1, r3, r1, lsl #3
   27798:	mov	r9, #1
   2779c:	ldr	r1, [r1, #12]
   277a0:	cmp	r1, r7
   277a4:	blt	27808 <__assert_fail@plt+0x16358>
   277a8:	sub	r1, r1, r7
   277ac:	cmp	r0, r7
   277b0:	mov	r7, #1
   277b4:	clz	r1, r1
   277b8:	lsr	r4, r1, #5
   277bc:	lsl	r1, r4, #1
   277c0:	orreq	r1, r7, r4, lsl #1
   277c4:	cmp	r1, #0
   277c8:	beq	27878 <__assert_fail@plt+0x163c8>
   277cc:	ldr	r4, [sp, #48]	; 0x30
   277d0:	ldr	r2, [sp, #44]	; 0x2c
   277d4:	ldr	r3, [sp, #8]
   277d8:	str	sl, [sp]
   277dc:	mov	r0, r4
   277e0:	bl	29018 <__assert_fail@plt+0x17b68>
   277e4:	ldr	lr, [sp, #28]
   277e8:	mov	r9, r0
   277ec:	ldr	r3, [r4, #116]	; 0x74
   277f0:	ldr	ip, [sp, #12]
   277f4:	ldr	r0, [lr, #24]
   277f8:	ldr	r2, [r0, r6, lsl #2]
   277fc:	add	r0, r2, r2, lsl #1
   27800:	add	r0, r3, r0, lsl #3
   27804:	ldr	r0, [r0, #8]
   27808:	ldr	r1, [sp, #36]	; 0x24
   2780c:	ldr	r4, [sp, #32]
   27810:	cmp	r0, r1
   27814:	bge	27894 <__assert_fail@plt+0x163e4>
   27818:	add	r1, r2, r2, lsl #1
   2781c:	mov	r8, #1
   27820:	add	r1, r3, r1, lsl #3
   27824:	ldr	r1, [r1, #12]
   27828:	cmp	r1, r4
   2782c:	blt	27894 <__assert_fail@plt+0x163e4>
   27830:	sub	r1, r1, r4
   27834:	cmp	r0, r4
   27838:	mov	r0, #1
   2783c:	clz	r1, r1
   27840:	lsr	r2, r1, #5
   27844:	lsl	r1, r2, #1
   27848:	orreq	r1, r0, r2, lsl #1
   2784c:	cmp	r1, #0
   27850:	beq	27890 <__assert_fail@plt+0x163e0>
   27854:	ldr	r0, [sp, #48]	; 0x30
   27858:	ldr	r2, [sp, #44]	; 0x2c
   2785c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   27860:	str	r5, [sp]
   27864:	bl	29018 <__assert_fail@plt+0x17b68>
   27868:	ldr	ip, [sp, #12]
   2786c:	ldr	lr, [sp, #28]
   27870:	mov	r8, r0
   27874:	b	27894 <__assert_fail@plt+0x163e4>
   27878:	mov	r9, #0
   2787c:	ldr	r1, [sp, #36]	; 0x24
   27880:	ldr	r4, [sp, #32]
   27884:	cmp	r0, r1
   27888:	blt	27818 <__assert_fail@plt+0x16368>
   2788c:	b	27894 <__assert_fail@plt+0x163e4>
   27890:	mov	r8, #0
   27894:	cmp	r8, r9
   27898:	ldr	r8, [sp, #48]	; 0x30
   2789c:	mov	r9, #1
   278a0:	bne	27420 <__assert_fail@plt+0x15f70>
   278a4:	ldr	r0, [lr, #20]
   278a8:	add	r6, r6, #1
   278ac:	cmp	r6, r0
   278b0:	blt	27744 <__assert_fail@plt+0x16294>
   278b4:	b	273f0 <__assert_fail@plt+0x15f40>
   278b8:	cmp	r2, r1
   278bc:	bne	278f8 <__assert_fail@plt+0x16448>
   278c0:	lsl	r0, r2, #1
   278c4:	lsl	r1, r2, #3
   278c8:	str	r0, [fp, #-40]	; 0xffffffd8
   278cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   278d0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   278d4:	cmp	r0, #0
   278d8:	beq	27a14 <__assert_fail@plt+0x16564>
   278dc:	str	r0, [fp, #-32]	; 0xffffffe0
   278e0:	ldr	lr, [sp, #28]
   278e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   278e8:	ldr	r2, [r0]
   278ec:	cmp	r2, r6
   278f0:	bgt	27908 <__assert_fail@plt+0x16458>
   278f4:	b	27978 <__assert_fail@plt+0x164c8>
   278f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   278fc:	ldr	r2, [r0]
   27900:	cmp	r2, r6
   27904:	ble	27978 <__assert_fail@plt+0x164c8>
   27908:	cmp	r1, #1
   2790c:	blt	279a8 <__assert_fail@plt+0x164f8>
   27910:	ands	r3, r1, #3
   27914:	sub	ip, r1, #1
   27918:	beq	2793c <__assert_fail@plt+0x1648c>
   2791c:	add	r2, r0, r1, lsl #2
   27920:	mov	r7, r2
   27924:	ldr	r5, [r7, #-4]!
   27928:	subs	r3, r3, #1
   2792c:	sub	r1, r1, #1
   27930:	str	r5, [r2]
   27934:	mov	r2, r7
   27938:	bne	27924 <__assert_fail@plt+0x16474>
   2793c:	cmp	ip, #3
   27940:	bcc	27970 <__assert_fail@plt+0x164c0>
   27944:	add	r2, r0, r1, lsl #2
   27948:	sub	r2, r2, #8
   2794c:	ldr	r5, [r2, #4]
   27950:	ldmda	r2, {r3, r7, ip}
   27954:	sub	sl, r2, #4
   27958:	sub	r1, r1, #4
   2795c:	cmp	r1, #0
   27960:	stm	sl, {r3, r7, ip}
   27964:	str	r5, [r2, #8]
   27968:	sub	r2, r2, #16
   2796c:	bgt	2794c <__assert_fail@plt+0x1649c>
   27970:	mov	r1, #0
   27974:	b	279a8 <__assert_fail@plt+0x164f8>
   27978:	add	r2, r0, r1, lsl #2
   2797c:	ldr	r3, [r2, #-4]
   27980:	cmp	r3, r6
   27984:	ble	279a8 <__assert_fail@plt+0x164f8>
   27988:	sub	r1, r1, #2
   2798c:	str	r3, [r2]
   27990:	sub	r1, r1, #1
   27994:	ldr	r3, [r2, #-8]
   27998:	sub	r2, r2, #4
   2799c:	cmp	r3, r6
   279a0:	bgt	2798c <__assert_fail@plt+0x164dc>
   279a4:	add	r1, r1, #2
   279a8:	str	r6, [r0, r1, lsl #2]
   279ac:	b	27414 <__assert_fail@plt+0x15f64>
   279b0:	mov	r7, #0
   279b4:	b	279c8 <__assert_fail@plt+0x16518>
   279b8:	lsl	r2, r4, #2
   279bc:	mov	r1, #0
   279c0:	mov	r7, #0
   279c4:	bl	113cc <memset@plt>
   279c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   279cc:	bl	2bc28 <__assert_fail@plt+0x1a778>
   279d0:	mov	r0, r7
   279d4:	sub	sp, fp, #28
   279d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   279dc:	mov	r0, #0
   279e0:	mov	r7, #12
   279e4:	str	r0, [fp, #-40]	; 0xffffffd8
   279e8:	str	r0, [fp, #-36]	; 0xffffffdc
   279ec:	b	279c8 <__assert_fail@plt+0x16518>
   279f0:	mov	r7, r0
   279f4:	b	279c8 <__assert_fail@plt+0x16518>
   279f8:	mov	r0, #0
   279fc:	mov	r7, #12
   27a00:	str	r0, [fp, #-40]	; 0xffffffd8
   27a04:	str	r0, [fp, #-36]	; 0xffffffdc
   27a08:	mov	r0, r7
   27a0c:	sub	sp, fp, #28
   27a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a14:	mov	r7, #12
   27a18:	b	279c8 <__assert_fail@plt+0x16518>
   27a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a20:	add	fp, sp, #28
   27a24:	sub	sp, sp, #140	; 0x8c
   27a28:	mov	r5, r1
   27a2c:	ldr	r1, [r0, #84]	; 0x54
   27a30:	mov	ip, r2
   27a34:	mov	r2, #0
   27a38:	str	r0, [sp, #76]	; 0x4c
   27a3c:	str	r2, [fp, #-76]	; 0xffffffb4
   27a40:	str	ip, [sp, #80]	; 0x50
   27a44:	str	r5, [sp, #84]	; 0x54
   27a48:	str	r1, [fp, #-80]	; 0xffffffb0
   27a4c:	ldr	r1, [r0, #100]	; 0x64
   27a50:	ldr	r8, [r1, ip, lsl #2]
   27a54:	ldr	r1, [r3, #4]
   27a58:	cmp	r8, #0
   27a5c:	mov	r6, r8
   27a60:	addne	r6, r6, #4
   27a64:	cmp	r1, #0
   27a68:	str	r6, [sp, #68]	; 0x44
   27a6c:	beq	27e50 <__assert_fail@plt+0x169a0>
   27a70:	mov	r9, r3
   27a74:	cmp	r8, #0
   27a78:	beq	27e70 <__assert_fail@plt+0x169c0>
   27a7c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   27a80:	mov	r0, #0
   27a84:	mov	r2, r9
   27a88:	str	r9, [sp, #60]	; 0x3c
   27a8c:	str	r0, [fp, #-72]	; 0xffffffb8
   27a90:	sub	r0, fp, #72	; 0x48
   27a94:	bl	24cd4 <__assert_fail@plt+0x13824>
   27a98:	ldr	r9, [fp, #-72]	; 0xffffffb8
   27a9c:	cmp	r9, #0
   27aa0:	bne	28928 <__assert_fail@plt+0x17478>
   27aa4:	mov	r4, r0
   27aa8:	mov	r5, r0
   27aac:	ldr	r0, [r4, #28]!
   27ab0:	cmp	r0, #0
   27ab4:	bne	27b4c <__assert_fail@plt+0x1669c>
   27ab8:	ldr	r0, [sp, #60]	; 0x3c
   27abc:	mov	r1, #0
   27ac0:	ldr	r0, [r0, #4]
   27ac4:	str	r0, [r5, #28]
   27ac8:	lsl	r0, r0, #2
   27acc:	str	r1, [r5, #32]
   27ad0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   27ad4:	cmp	r0, #0
   27ad8:	mov	r1, #12
   27adc:	mov	r9, #12
   27ae0:	str	r0, [r5, #36]	; 0x24
   27ae4:	movne	r1, #0
   27ae8:	cmp	r0, #0
   27aec:	str	r1, [fp, #-72]	; 0xffffffb8
   27af0:	beq	28928 <__assert_fail@plt+0x17478>
   27af4:	ldr	r0, [sp, #60]	; 0x3c
   27af8:	ldr	r0, [r0, #4]
   27afc:	cmp	r0, #1
   27b00:	blt	27b4c <__assert_fail@plt+0x1669c>
   27b04:	ldr	r7, [sp, #60]	; 0x3c
   27b08:	mov	r5, #0
   27b0c:	ldr	r0, [r7, #8]
   27b10:	ldr	r1, [fp, #-80]	; 0xffffffb0
   27b14:	ldr	r0, [r0, r5, lsl #2]
   27b18:	ldr	r1, [r1, #28]
   27b1c:	add	r0, r0, r0, lsl #1
   27b20:	add	r1, r1, r0, lsl #2
   27b24:	mov	r0, r4
   27b28:	bl	209e8 <__assert_fail@plt+0xf538>
   27b2c:	cmp	r0, #0
   27b30:	bne	28924 <__assert_fail@plt+0x17474>
   27b34:	ldr	r0, [r7, #4]
   27b38:	add	r5, r5, #1
   27b3c:	cmp	r5, r0
   27b40:	blt	27b0c <__assert_fail@plt+0x1665c>
   27b44:	mov	r0, #0
   27b48:	str	r0, [fp, #-72]	; 0xffffffb8
   27b4c:	ldr	r0, [sp, #60]	; 0x3c
   27b50:	mov	r1, r6
   27b54:	mov	r2, r4
   27b58:	bl	28998 <__assert_fail@plt+0x174e8>
   27b5c:	cmp	r0, #0
   27b60:	str	r0, [fp, #-76]	; 0xffffffb4
   27b64:	bne	28950 <__assert_fail@plt+0x174a0>
   27b68:	ldr	r5, [sp, #84]	; 0x54
   27b6c:	ldr	r9, [sp, #60]	; 0x3c
   27b70:	ldr	r0, [r5, #20]
   27b74:	cmp	r0, #0
   27b78:	beq	27e70 <__assert_fail@plt+0x169c0>
   27b7c:	ldr	lr, [sp, #80]	; 0x50
   27b80:	cmp	r0, #1
   27b84:	str	r8, [sp, #56]	; 0x38
   27b88:	blt	27e64 <__assert_fail@plt+0x169b4>
   27b8c:	ldr	r0, [sp, #76]	; 0x4c
   27b90:	mov	r1, #0
   27b94:	ldr	r0, [r0, #116]	; 0x74
   27b98:	str	r0, [sp, #64]	; 0x40
   27b9c:	b	27bb4 <__assert_fail@plt+0x16704>
   27ba0:	ldr	r1, [sp, #72]	; 0x48
   27ba4:	ldr	r0, [r5, #20]
   27ba8:	add	r1, r1, #1
   27bac:	cmp	r1, r0
   27bb0:	bge	27e64 <__assert_fail@plt+0x169b4>
   27bb4:	ldr	r0, [r5, #24]
   27bb8:	str	r1, [sp, #72]	; 0x48
   27bbc:	ldr	r0, [r0, r1, lsl #2]
   27bc0:	ldr	r1, [sp, #64]	; 0x40
   27bc4:	add	r0, r0, r0, lsl #1
   27bc8:	add	r1, r1, r0, lsl #3
   27bcc:	ldr	r2, [r1, #8]
   27bd0:	cmp	r2, lr
   27bd4:	bge	27ba0 <__assert_fail@plt+0x166f0>
   27bd8:	ldr	r1, [r1, #4]
   27bdc:	cmp	r1, lr
   27be0:	blt	27ba0 <__assert_fail@plt+0x166f0>
   27be4:	ldr	r1, [sp, #64]	; 0x40
   27be8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   27bec:	ldr	r0, [r1, r0, lsl #3]!
   27bf0:	ldr	r2, [r2]
   27bf4:	ldr	r1, [r1, #12]
   27bf8:	ldr	r6, [r2, r0, lsl #3]
   27bfc:	ldr	r0, [r9, #4]
   27c00:	cmp	r1, lr
   27c04:	bne	27de0 <__assert_fail@plt+0x16930>
   27c08:	cmp	r0, #1
   27c0c:	blt	27ba0 <__assert_fail@plt+0x166f0>
   27c10:	ldr	r3, [r9, #8]
   27c14:	mvn	r8, #0
   27c18:	mvn	r1, #0
   27c1c:	b	27c3c <__assert_fail@plt+0x1678c>
   27c20:	ldr	r4, [r2, r7, lsl #3]
   27c24:	cmp	r6, r4
   27c28:	moveq	r8, r7
   27c2c:	mov	r4, #1
   27c30:	add	r3, r3, #4
   27c34:	subs	r0, r0, #1
   27c38:	beq	27c74 <__assert_fail@plt+0x167c4>
   27c3c:	ldr	r7, [r3]
   27c40:	add	r4, r2, r7, lsl #3
   27c44:	ldrb	r4, [r4, #4]
   27c48:	cmp	r4, #9
   27c4c:	beq	27c20 <__assert_fail@plt+0x16770>
   27c50:	cmp	r4, #8
   27c54:	bne	27c2c <__assert_fail@plt+0x1677c>
   27c58:	ldr	r4, [r2, r7, lsl #3]
   27c5c:	cmp	r6, r4
   27c60:	moveq	r1, r7
   27c64:	mov	r4, #1
   27c68:	add	r3, r3, #4
   27c6c:	subs	r0, r0, #1
   27c70:	bne	27c3c <__assert_fail@plt+0x1678c>
   27c74:	ldr	r3, [sp, #68]	; 0x44
   27c78:	cmp	r1, #0
   27c7c:	bmi	27c98 <__assert_fail@plt+0x167e8>
   27c80:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27c84:	ldr	r2, [sp, #60]	; 0x3c
   27c88:	bl	28b8c <__assert_fail@plt+0x176dc>
   27c8c:	ldr	lr, [sp, #80]	; 0x50
   27c90:	cmp	r0, #0
   27c94:	bne	288d8 <__assert_fail@plt+0x17428>
   27c98:	ldr	r9, [sp, #60]	; 0x3c
   27c9c:	cmp	r8, #0
   27ca0:	bmi	27ba0 <__assert_fail@plt+0x166f0>
   27ca4:	ldr	ip, [r9, #4]
   27ca8:	cmp	ip, #1
   27cac:	blt	27ba0 <__assert_fail@plt+0x166f0>
   27cb0:	mov	sl, #0
   27cb4:	b	27cec <__assert_fail@plt+0x1683c>
   27cb8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27cbc:	ldr	r3, [sp, #68]	; 0x44
   27cc0:	mov	r2, r9
   27cc4:	bl	28b8c <__assert_fail@plt+0x176dc>
   27cc8:	cmp	r0, #0
   27ccc:	bne	288d8 <__assert_fail@plt+0x17428>
   27cd0:	ldr	ip, [r9, #4]
   27cd4:	ldr	lr, [sp, #80]	; 0x50
   27cd8:	sub	sl, sl, #1
   27cdc:	mov	r1, r9
   27ce0:	add	sl, sl, #1
   27ce4:	cmp	sl, ip
   27ce8:	bge	27ba0 <__assert_fail@plt+0x166f0>
   27cec:	ldr	r1, [r9, #8]
   27cf0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27cf4:	ldr	r1, [r1, sl, lsl #2]
   27cf8:	ldr	r3, [r0, #28]
   27cfc:	add	r2, r1, r1, lsl #1
   27d00:	add	r3, r3, r2, lsl #2
   27d04:	ldr	r7, [r3, #4]
   27d08:	cmp	r7, #1
   27d0c:	blt	27d6c <__assert_fail@plt+0x168bc>
   27d10:	ldr	r3, [r3, #8]
   27d14:	mov	lr, ip
   27d18:	subs	r6, r7, #1
   27d1c:	beq	27d50 <__assert_fail@plt+0x168a0>
   27d20:	mov	r7, #0
   27d24:	add	r4, r7, r6
   27d28:	mov	ip, #1
   27d2c:	lsr	r0, r4, #1
   27d30:	ldr	r5, [r3, r0, lsl #2]
   27d34:	cmp	r5, r8
   27d38:	addlt	r7, ip, r4, lsr #1
   27d3c:	movge	r6, r0
   27d40:	mov	r4, #1
   27d44:	cmp	r7, r6
   27d48:	bcc	27d24 <__assert_fail@plt+0x16874>
   27d4c:	b	27d54 <__assert_fail@plt+0x168a4>
   27d50:	mov	r7, #0
   27d54:	ldr	r0, [r3, r7, lsl #2]
   27d58:	mov	ip, lr
   27d5c:	ldr	r5, [sp, #84]	; 0x54
   27d60:	ldr	lr, [sp, #80]	; 0x50
   27d64:	cmp	r0, r8
   27d68:	beq	27ce0 <__assert_fail@plt+0x16830>
   27d6c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27d70:	ldr	r0, [r0, #24]
   27d74:	add	r2, r0, r2, lsl #2
   27d78:	ldr	r3, [r2, #4]
   27d7c:	cmp	r3, #1
   27d80:	blt	27cb8 <__assert_fail@plt+0x16808>
   27d84:	ldr	r2, [r2, #8]
   27d88:	subs	r7, r3, #1
   27d8c:	beq	27dc8 <__assert_fail@plt+0x16918>
   27d90:	mov	r3, #0
   27d94:	add	r0, r3, r7
   27d98:	lsr	r6, r0, #1
   27d9c:	ldr	r5, [r2, r6, lsl #2]
   27da0:	cmp	r5, r8
   27da4:	addlt	r3, r4, r0, lsr #1
   27da8:	movge	r7, r6
   27dac:	cmp	r3, r7
   27db0:	bcc	27d94 <__assert_fail@plt+0x168e4>
   27db4:	ldr	r0, [r2, r3, lsl #2]
   27db8:	ldr	r5, [sp, #84]	; 0x54
   27dbc:	cmp	r0, r8
   27dc0:	bne	27cb8 <__assert_fail@plt+0x16808>
   27dc4:	b	27ce0 <__assert_fail@plt+0x16830>
   27dc8:	mov	r3, #0
   27dcc:	ldr	r0, [r2, r3, lsl #2]
   27dd0:	ldr	r5, [sp, #84]	; 0x54
   27dd4:	cmp	r0, r8
   27dd8:	beq	27ce0 <__assert_fail@plt+0x16830>
   27ddc:	b	27cb8 <__assert_fail@plt+0x16808>
   27de0:	cmp	r0, #1
   27de4:	blt	27ba0 <__assert_fail@plt+0x166f0>
   27de8:	mov	r7, #0
   27dec:	ldr	r1, [r9, #8]
   27df0:	ldr	r1, [r1, r7, lsl #2]
   27df4:	add	r3, r2, r1, lsl #3
   27df8:	ldrb	r3, [r3, #4]
   27dfc:	orr	r3, r3, #1
   27e00:	cmp	r3, #9
   27e04:	bne	27e38 <__assert_fail@plt+0x16988>
   27e08:	ldr	r2, [r2, r1, lsl #3]
   27e0c:	cmp	r6, r2
   27e10:	bne	27e38 <__assert_fail@plt+0x16988>
   27e14:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27e18:	ldr	r3, [sp, #68]	; 0x44
   27e1c:	mov	r2, r9
   27e20:	bl	28b8c <__assert_fail@plt+0x176dc>
   27e24:	cmp	r0, #0
   27e28:	bne	288d8 <__assert_fail@plt+0x17428>
   27e2c:	ldr	r0, [r9, #4]
   27e30:	ldr	lr, [sp, #80]	; 0x50
   27e34:	mov	r1, r9
   27e38:	add	r7, r7, #1
   27e3c:	cmp	r7, r0
   27e40:	bge	27ba0 <__assert_fail@plt+0x166f0>
   27e44:	ldr	r1, [fp, #-80]	; 0xffffffb0
   27e48:	ldr	r2, [r1]
   27e4c:	b	27dec <__assert_fail@plt+0x1693c>
   27e50:	ldr	r1, [r5]
   27e54:	str	r2, [r1, ip, lsl #2]
   27e58:	cmp	r8, #0
   27e5c:	bne	27ea4 <__assert_fail@plt+0x169f4>
   27e60:	b	288c8 <__assert_fail@plt+0x17418>
   27e64:	ldr	r8, [sp, #56]	; 0x38
   27e68:	mov	r0, #0
   27e6c:	str	r0, [fp, #-76]	; 0xffffffb4
   27e70:	ldr	r1, [fp, #-80]	; 0xffffffb0
   27e74:	sub	r0, fp, #76	; 0x4c
   27e78:	mov	r2, r9
   27e7c:	bl	24cd4 <__assert_fail@plt+0x13824>
   27e80:	ldr	r1, [r5]
   27e84:	ldr	ip, [sp, #80]	; 0x50
   27e88:	str	r0, [r1, ip, lsl #2]
   27e8c:	ldr	r0, [sp, #76]	; 0x4c
   27e90:	ldr	r9, [fp, #-76]	; 0xffffffb4
   27e94:	cmp	r9, #0
   27e98:	bne	288cc <__assert_fail@plt+0x1741c>
   27e9c:	cmp	r8, #0
   27ea0:	beq	288c8 <__assert_fail@plt+0x17418>
   27ea4:	ldr	r1, [r0, #100]	; 0x64
   27ea8:	ldr	r1, [r1, ip, lsl #2]
   27eac:	ldrb	r1, [r1, #52]	; 0x34
   27eb0:	tst	r1, #64	; 0x40
   27eb4:	beq	288c8 <__assert_fail@plt+0x17418>
   27eb8:	ldr	lr, [r0, #108]	; 0x6c
   27ebc:	ldr	r8, [r0, #84]	; 0x54
   27ec0:	cmp	lr, #1
   27ec4:	blt	288b4 <__assert_fail@plt+0x17404>
   27ec8:	ldr	r1, [r0, #116]	; 0x74
   27ecc:	mov	r4, #0
   27ed0:	mov	r2, #1
   27ed4:	mov	r3, lr
   27ed8:	add	r7, r3, r4
   27edc:	add	r7, r7, r7, lsr #31
   27ee0:	asr	r6, r7, #1
   27ee4:	add	r5, r6, r6, lsl #1
   27ee8:	add	r5, r1, r5, lsl #3
   27eec:	ldr	r5, [r5, #4]
   27ef0:	cmp	r5, ip
   27ef4:	addlt	r4, r2, r7, asr #1
   27ef8:	movge	r3, r6
   27efc:	cmp	r4, r3
   27f00:	blt	27ed8 <__assert_fail@plt+0x16a28>
   27f04:	cmp	r4, lr
   27f08:	bge	288c0 <__assert_fail@plt+0x17410>
   27f0c:	cmn	r4, #1
   27f10:	beq	288c0 <__assert_fail@plt+0x17410>
   27f14:	ldr	r0, [sp, #76]	; 0x4c
   27f18:	add	r1, r4, r4, lsl #1
   27f1c:	str	r1, [sp, #28]
   27f20:	ldr	r0, [r0, #116]	; 0x74
   27f24:	add	r0, r0, r1, lsl #3
   27f28:	ldr	r0, [r0, #4]
   27f2c:	cmp	r0, ip
   27f30:	bne	288c0 <__assert_fail@plt+0x17410>
   27f34:	ldr	r1, [sp, #68]	; 0x44
   27f38:	mov	r2, #0
   27f3c:	str	r2, [fp, #-72]	; 0xffffffb8
   27f40:	ldr	r0, [r1, #4]
   27f44:	cmp	r0, #0
   27f48:	ble	288ec <__assert_fail@plt+0x1743c>
   27f4c:	str	r4, [sp, #20]
   27f50:	add	r0, ip, #1
   27f54:	ldr	r4, [sp, #84]	; 0x54
   27f58:	mov	r9, #0
   27f5c:	str	r8, [sp, #36]	; 0x24
   27f60:	str	r0, [sp, #12]
   27f64:	sub	r0, fp, #72	; 0x48
   27f68:	add	r0, r0, #16
   27f6c:	str	r0, [sp, #8]
   27f70:	mov	r0, #0
   27f74:	str	r0, [sp, #48]	; 0x30
   27f78:	b	27f90 <__assert_fail@plt+0x16ae0>
   27f7c:	ldr	r1, [sp, #68]	; 0x44
   27f80:	add	r9, r9, #1
   27f84:	ldr	r0, [r1, #4]
   27f88:	cmp	r9, r0
   27f8c:	bge	288f4 <__assert_fail@plt+0x17444>
   27f90:	ldr	r0, [r1, #8]
   27f94:	ldr	r1, [r4, #8]
   27f98:	ldr	r3, [r0, r9, lsl #2]
   27f9c:	ldr	r0, [r8]
   27fa0:	add	r0, r0, r3, lsl #3
   27fa4:	cmp	r3, r1
   27fa8:	ldrb	r0, [r0, #4]
   27fac:	bne	27fc8 <__assert_fail@plt+0x16b18>
   27fb0:	cmp	r0, #4
   27fb4:	bne	27f7c <__assert_fail@plt+0x16acc>
   27fb8:	ldr	r0, [r4, #12]
   27fbc:	cmp	r0, ip
   27fc0:	bne	27fd0 <__assert_fail@plt+0x16b20>
   27fc4:	b	27f7c <__assert_fail@plt+0x16acc>
   27fc8:	cmp	r0, #4
   27fcc:	bne	27f7c <__assert_fail@plt+0x16acc>
   27fd0:	ldr	r0, [sp, #76]	; 0x4c
   27fd4:	ldr	r1, [sp, #28]
   27fd8:	ldr	r5, [sp, #20]
   27fdc:	str	r9, [sp, #40]	; 0x28
   27fe0:	str	r3, [sp, #56]	; 0x38
   27fe4:	ldr	r0, [r0, #116]	; 0x74
   27fe8:	add	r7, r0, r1, lsl #3
   27fec:	ldr	r0, [r7]
   27ff0:	cmp	r0, r3
   27ff4:	beq	28740 <__assert_fail@plt+0x17290>
   27ff8:	b	28898 <__assert_fail@plt+0x173e8>
   27ffc:	mov	r8, lr
   28000:	ldr	r4, [sp, #84]	; 0x54
   28004:	ldr	r3, [sp, #56]	; 0x38
   28008:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2800c:	ldr	lr, [sp, #64]	; 0x40
   28010:	b	28898 <__assert_fail@plt+0x173e8>
   28014:	mov	r9, #0
   28018:	ldr	r3, [sp, #76]	; 0x4c
   2801c:	cmp	r9, r0
   28020:	blt	2882c <__assert_fail@plt+0x1737c>
   28024:	mvn	r9, #0
   28028:	cmp	r0, #1
   2802c:	blt	2884c <__assert_fail@plt+0x1739c>
   28030:	ldr	r1, [r3, #116]	; 0x74
   28034:	ldr	lr, [sp, #64]	; 0x40
   28038:	mov	r8, #0
   2803c:	mov	r2, r0
   28040:	add	r3, r2, r8
   28044:	add	r3, r3, r3, lsr #31
   28048:	asr	r6, r3, #1
   2804c:	add	r5, r6, r6, lsl #1
   28050:	add	r5, r1, r5, lsl #3
   28054:	ldr	r5, [r5, #4]
   28058:	cmp	r5, sl
   2805c:	addlt	r8, r4, r3, asr #1
   28060:	movge	r2, r6
   28064:	cmp	r8, r2
   28068:	blt	28040 <__assert_fail@plt+0x16b90>
   2806c:	ldr	r3, [sp, #76]	; 0x4c
   28070:	cmp	r8, r0
   28074:	bge	28860 <__assert_fail@plt+0x173b0>
   28078:	ldr	r0, [r3, #116]	; 0x74
   2807c:	add	r1, r8, r8, lsl #1
   28080:	add	r0, r0, r1, lsl #3
   28084:	ldr	r0, [r0, #4]
   28088:	cmp	r0, sl
   2808c:	mvnne	r8, #0
   28090:	ldr	r5, [sp, #84]	; 0x54
   28094:	ldr	r4, [r5, #20]
   28098:	cmp	r4, #1
   2809c:	blt	28220 <__assert_fail@plt+0x16d70>
   280a0:	ldr	r0, [r3, #84]	; 0x54
   280a4:	mov	r6, #0
   280a8:	str	r0, [sp, #60]	; 0x3c
   280ac:	ldr	r0, [r5, #24]
   280b0:	ldr	r3, [r3, #116]	; 0x74
   280b4:	ldr	r4, [sp, #60]	; 0x3c
   280b8:	ldr	r2, [r0, r6, lsl #2]
   280bc:	mov	r0, r3
   280c0:	ldr	r4, [r4]
   280c4:	add	r1, r2, r2, lsl #1
   280c8:	ldr	r5, [r0, r1, lsl #3]!
   280cc:	ldr	r0, [r0, #8]
   280d0:	ldr	r4, [r4, r5, lsl #3]
   280d4:	mvn	r5, #0
   280d8:	cmp	r0, ip
   280dc:	str	r4, [sp, #72]	; 0x48
   280e0:	ble	280f4 <__assert_fail@plt+0x16c44>
   280e4:	mvn	r4, #0
   280e8:	cmp	r0, sl
   280ec:	ble	2817c <__assert_fail@plt+0x16ccc>
   280f0:	b	281d8 <__assert_fail@plt+0x16d28>
   280f4:	add	r1, r3, r1, lsl #3
   280f8:	mov	r4, #1
   280fc:	ldr	r1, [r1, #12]
   28100:	cmp	r1, ip
   28104:	blt	28174 <__assert_fail@plt+0x16cc4>
   28108:	sub	r1, r1, ip
   2810c:	cmp	r0, ip
   28110:	mov	lr, #1
   28114:	clz	r1, r1
   28118:	lsr	r4, r1, #5
   2811c:	lsl	r1, r4, #1
   28120:	orreq	r1, lr, r4, lsl #1
   28124:	cmp	r1, #0
   28128:	beq	2816c <__assert_fail@plt+0x16cbc>
   2812c:	ldr	r0, [sp, #76]	; 0x4c
   28130:	ldr	r2, [sp, #72]	; 0x48
   28134:	ldr	r3, [sp, #56]	; 0x38
   28138:	str	r9, [sp]
   2813c:	bl	29018 <__assert_fail@plt+0x17b68>
   28140:	mov	r4, r0
   28144:	ldr	r0, [sp, #84]	; 0x54
   28148:	ldr	r1, [sp, #76]	; 0x4c
   2814c:	ldr	ip, [sp, #80]	; 0x50
   28150:	ldr	r0, [r0, #24]
   28154:	ldr	r3, [r1, #116]	; 0x74
   28158:	ldr	r2, [r0, r6, lsl #2]
   2815c:	add	r0, r2, r2, lsl #1
   28160:	add	r0, r3, r0, lsl #3
   28164:	ldr	r0, [r0, #8]
   28168:	b	28170 <__assert_fail@plt+0x16cc0>
   2816c:	mov	r4, #0
   28170:	ldr	lr, [sp, #64]	; 0x40
   28174:	cmp	r0, sl
   28178:	bgt	281d8 <__assert_fail@plt+0x16d28>
   2817c:	add	r1, r2, r2, lsl #1
   28180:	mov	r5, #1
   28184:	add	r1, r3, r1, lsl #3
   28188:	ldr	r1, [r1, #12]
   2818c:	cmp	r1, sl
   28190:	blt	281d8 <__assert_fail@plt+0x16d28>
   28194:	sub	r1, r1, sl
   28198:	cmp	r0, sl
   2819c:	mov	r0, #1
   281a0:	clz	r1, r1
   281a4:	lsr	r2, r1, #5
   281a8:	lsl	r1, r2, #1
   281ac:	orreq	r1, r0, r2, lsl #1
   281b0:	cmp	r1, #0
   281b4:	beq	281fc <__assert_fail@plt+0x16d4c>
   281b8:	ldr	r0, [sp, #76]	; 0x4c
   281bc:	ldr	r2, [sp, #72]	; 0x48
   281c0:	ldr	r3, [sp, #52]	; 0x34
   281c4:	str	r8, [sp]
   281c8:	bl	29018 <__assert_fail@plt+0x17b68>
   281cc:	ldr	lr, [sp, #64]	; 0x40
   281d0:	ldr	ip, [sp, #80]	; 0x50
   281d4:	mov	r5, r0
   281d8:	cmp	r5, r4
   281dc:	bne	28208 <__assert_fail@plt+0x16d58>
   281e0:	ldr	r5, [sp, #84]	; 0x54
   281e4:	ldr	r3, [sp, #76]	; 0x4c
   281e8:	add	r6, r6, #1
   281ec:	ldr	r4, [r5, #20]
   281f0:	cmp	r6, r4
   281f4:	blt	280ac <__assert_fail@plt+0x16bfc>
   281f8:	b	28220 <__assert_fail@plt+0x16d70>
   281fc:	mov	r5, #0
   28200:	cmp	r5, r4
   28204:	beq	281e0 <__assert_fail@plt+0x16d30>
   28208:	ldr	r4, [sp, #84]	; 0x54
   2820c:	ldr	r8, [sp, #36]	; 0x24
   28210:	ldr	r9, [sp, #40]	; 0x28
   28214:	ldr	r3, [sp, #56]	; 0x38
   28218:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2821c:	b	28898 <__assert_fail@plt+0x173e8>
   28220:	ldr	r0, [sp, #48]	; 0x30
   28224:	cmp	r0, #0
   28228:	beq	28268 <__assert_fail@plt+0x16db8>
   2822c:	ldr	r0, [sp, #56]	; 0x38
   28230:	str	ip, [fp, #-60]	; 0xffffffc4
   28234:	ldr	r8, [sp, #36]	; 0x24
   28238:	ldr	r9, [fp, #-80]	; 0xffffffb0
   2823c:	str	r0, [fp, #-64]	; 0xffffffc0
   28240:	ldr	r0, [sp, #24]
   28244:	cmp	r0, #0
   28248:	beq	283ec <__assert_fail@plt+0x16f3c>
   2824c:	ldr	r6, [sp, #44]	; 0x2c
   28250:	cmp	r6, #0
   28254:	bne	28720 <__assert_fail@plt+0x17270>
   28258:	mov	r6, #1
   2825c:	str	r9, [lr]
   28260:	str	lr, [sp, #32]
   28264:	b	28478 <__assert_fail@plt+0x16fc8>
   28268:	mov	r0, r5
   2826c:	mov	r1, #12
   28270:	ldr	r8, [sp, #36]	; 0x24
   28274:	ldr	r9, [fp, #-80]	; 0xffffffb0
   28278:	cmp	r4, #1
   2827c:	vld1.32	{d16-d17}, [r0], r1
   28280:	sub	r1, fp, #72	; 0x48
   28284:	vld1.32	{d18-d19}, [r0]
   28288:	add	r0, r1, #12
   2828c:	vst1.32	{d18-d19}, [r0]
   28290:	mov	r0, r1
   28294:	mov	r1, #20
   28298:	vst1.64	{d16-d17}, [r0], r1
   2829c:	str	r4, [r0]
   282a0:	blt	283cc <__assert_fail@plt+0x16f1c>
   282a4:	lsl	r0, r4, #2
   282a8:	str	r4, [fp, #-56]	; 0xffffffc8
   282ac:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   282b0:	cmp	r0, #0
   282b4:	str	r0, [fp, #-48]	; 0xffffffd0
   282b8:	beq	28960 <__assert_fail@plt+0x174b0>
   282bc:	ldr	r2, [r5, #20]
   282c0:	ldr	r1, [r5, #24]
   282c4:	mov	r6, r0
   282c8:	lsl	r2, r2, #2
   282cc:	bl	11258 <memcpy@plt>
   282d0:	ldr	r0, [sp, #80]	; 0x50
   282d4:	mov	r2, r6
   282d8:	mov	r6, r4
   282dc:	mov	lr, r2
   282e0:	str	r0, [fp, #-60]	; 0xffffffc4
   282e4:	ldr	r0, [sp, #56]	; 0x38
   282e8:	str	r0, [fp, #-64]	; 0xffffffc0
   282ec:	lsl	r0, r6, #1
   282f0:	lsl	r1, r6, #3
   282f4:	mov	r4, lr
   282f8:	str	r0, [sp, #24]
   282fc:	str	r0, [fp, #-56]	; 0xffffffc8
   28300:	mov	r0, r2
   28304:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   28308:	cmp	r0, #0
   2830c:	beq	28980 <__assert_fail@plt+0x174d0>
   28310:	ldr	ip, [sp, #80]	; 0x50
   28314:	mov	lr, r0
   28318:	mov	r2, r0
   2831c:	str	r0, [fp, #-48]	; 0xffffffd0
   28320:	str	r0, [sp, #16]
   28324:	ldr	r0, [lr]
   28328:	str	r2, [sp, #32]
   2832c:	cmp	r0, r9
   28330:	ble	28434 <__assert_fail@plt+0x16f84>
   28334:	ldr	r3, [sp, #76]	; 0x4c
   28338:	cmp	r6, #1
   2833c:	mov	r1, r6
   28340:	blt	2846c <__assert_fail@plt+0x16fbc>
   28344:	mov	sl, r3
   28348:	ands	r1, r6, #3
   2834c:	sub	r2, r6, #1
   28350:	mov	r4, r6
   28354:	mov	r0, r6
   28358:	beq	28380 <__assert_fail@plt+0x16ed0>
   2835c:	add	r7, lr, r4, lsl #2
   28360:	mov	r0, r4
   28364:	mov	r3, r7
   28368:	ldr	r6, [r3, #-4]!
   2836c:	subs	r1, r1, #1
   28370:	sub	r0, r0, #1
   28374:	str	r6, [r7]
   28378:	mov	r7, r3
   2837c:	bne	28368 <__assert_fail@plt+0x16eb8>
   28380:	mov	r1, #0
   28384:	cmp	r2, #3
   28388:	bcc	283c0 <__assert_fail@plt+0x16f10>
   2838c:	add	r2, lr, r0, lsl #2
   28390:	sub	r2, r2, #8
   28394:	ldr	r6, [r2]
   28398:	ldr	r5, [r2, #4]
   2839c:	ldmdb	r2, {r3, r7}
   283a0:	sub	r0, r0, #4
   283a4:	cmp	r0, #0
   283a8:	stmda	r2, {r3, r7}
   283ac:	str	r6, [r2, #4]
   283b0:	str	r5, [r2, #8]
   283b4:	sub	r2, r2, #16
   283b8:	bgt	28394 <__assert_fail@plt+0x16ee4>
   283bc:	ldr	r5, [sp, #84]	; 0x54
   283c0:	mov	r6, r4
   283c4:	mov	r3, sl
   283c8:	b	2846c <__assert_fail@plt+0x16fbc>
   283cc:	ldr	r1, [sp, #8]
   283d0:	mov	r0, #0
   283d4:	str	r0, [r1]
   283d8:	str	r0, [r1, #4]
   283dc:	str	r0, [r1, #8]
   283e0:	ldr	r0, [sp, #56]	; 0x38
   283e4:	str	ip, [fp, #-60]	; 0xffffffc4
   283e8:	str	r0, [fp, #-64]	; 0xffffffc0
   283ec:	mov	r0, #1
   283f0:	str	r0, [fp, #-52]	; 0xffffffcc
   283f4:	str	r0, [fp, #-56]	; 0xffffffc8
   283f8:	mov	r0, #4
   283fc:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   28400:	cmp	r0, #0
   28404:	str	r0, [fp, #-48]	; 0xffffffd0
   28408:	beq	28960 <__assert_fail@plt+0x174b0>
   2840c:	ldr	ip, [sp, #80]	; 0x50
   28410:	ldr	r3, [sp, #76]	; 0x4c
   28414:	str	r9, [r0]
   28418:	str	r0, [sp, #16]
   2841c:	str	r0, [sp, #64]	; 0x40
   28420:	str	r0, [sp, #32]
   28424:	mov	r0, #1
   28428:	mov	r6, #1
   2842c:	str	r0, [sp, #24]
   28430:	b	2847c <__assert_fail@plt+0x16fcc>
   28434:	add	r0, lr, r6, lsl #2
   28438:	ldr	r3, [sp, #76]	; 0x4c
   2843c:	mov	r1, r6
   28440:	ldr	r2, [r0, #-4]
   28444:	cmp	r2, r9
   28448:	ble	2846c <__assert_fail@plt+0x16fbc>
   2844c:	sub	r1, r6, #2
   28450:	str	r2, [r0]
   28454:	sub	r1, r1, #1
   28458:	ldr	r2, [r0, #-8]
   2845c:	sub	r0, r0, #4
   28460:	cmp	r2, r9
   28464:	bgt	28450 <__assert_fail@plt+0x16fa0>
   28468:	add	r1, r1, #2
   2846c:	add	r6, r6, #1
   28470:	str	r9, [lr, r1, lsl #2]
   28474:	str	lr, [sp, #64]	; 0x40
   28478:	str	r6, [fp, #-52]	; 0xffffffcc
   2847c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28480:	sub	r1, fp, #72	; 0x48
   28484:	ldr	sl, [r0, ip, lsl #2]
   28488:	str	r0, [sp, #48]	; 0x30
   2848c:	mov	r0, r3
   28490:	bl	272e0 <__assert_fail@plt+0x15e30>
   28494:	cmp	r0, #0
   28498:	bne	28938 <__assert_fail@plt+0x17488>
   2849c:	ldr	r5, [r5, #4]
   284a0:	ldr	ip, [sp, #80]	; 0x50
   284a4:	ldr	lr, [sp, #64]	; 0x40
   284a8:	str	r6, [sp, #44]	; 0x2c
   284ac:	cmp	r5, #0
   284b0:	beq	28558 <__assert_fail@plt+0x170a8>
   284b4:	cmp	ip, #0
   284b8:	bmi	28554 <__assert_fail@plt+0x170a4>
   284bc:	ldr	r6, [sp, #48]	; 0x30
   284c0:	ldr	r7, [sp, #12]
   284c4:	ldr	r1, [r5]
   284c8:	ldr	r0, [r6]
   284cc:	cmp	r1, #0
   284d0:	bne	284f8 <__assert_fail@plt+0x17048>
   284d4:	str	r0, [r5]
   284d8:	add	r5, r5, #4
   284dc:	add	r6, r6, #4
   284e0:	subs	r7, r7, #1
   284e4:	beq	28554 <__assert_fail@plt+0x170a4>
   284e8:	ldr	r1, [r5]
   284ec:	ldr	r0, [r6]
   284f0:	cmp	r1, #0
   284f4:	beq	284d4 <__assert_fail@plt+0x17024>
   284f8:	cmp	r0, #0
   284fc:	beq	284d8 <__assert_fail@plt+0x17028>
   28500:	sub	r4, fp, #44	; 0x2c
   28504:	add	r2, r0, #4
   28508:	add	r1, r1, #4
   2850c:	mov	r0, r4
   28510:	bl	23558 <__assert_fail@plt+0x120a8>
   28514:	cmp	r0, #0
   28518:	str	r0, [fp, #-32]	; 0xffffffe0
   2851c:	bne	28938 <__assert_fail@plt+0x17488>
   28520:	sub	r0, fp, #32
   28524:	mov	r1, r8
   28528:	mov	r2, r4
   2852c:	bl	24cd4 <__assert_fail@plt+0x13824>
   28530:	str	r0, [r5]
   28534:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28538:	bl	2bc28 <__assert_fail@plt+0x1a778>
   2853c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   28540:	ldr	ip, [sp, #80]	; 0x50
   28544:	ldr	lr, [sp, #64]	; 0x40
   28548:	cmp	r9, #0
   2854c:	beq	284d8 <__assert_fail@plt+0x17028>
   28550:	b	288f8 <__assert_fail@plt+0x17448>
   28554:	ldr	r6, [sp, #44]	; 0x2c
   28558:	ldr	r0, [sp, #48]	; 0x30
   2855c:	cmp	r6, #1
   28560:	str	sl, [r0, ip, lsl #2]
   28564:	blt	285f8 <__assert_fail@plt+0x17148>
   28568:	ldr	r4, [sp, #84]	; 0x54
   2856c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   28570:	subs	sl, r6, #1
   28574:	mov	r9, #20
   28578:	mov	r1, #0
   2857c:	beq	285a8 <__assert_fail@plt+0x170f8>
   28580:	mov	r2, sl
   28584:	mov	r0, #1
   28588:	add	r3, r1, r2
   2858c:	lsr	r7, r3, #1
   28590:	ldr	r6, [lr, r7, lsl #2]
   28594:	cmp	r6, r5
   28598:	addlt	r1, r0, r3, lsr #1
   2859c:	movge	r2, r7
   285a0:	cmp	r1, r2
   285a4:	bcc	28588 <__assert_fail@plt+0x170d8>
   285a8:	ldr	r2, [lr, r1, lsl #2]
   285ac:	mov	r3, #1
   285b0:	cmp	r2, r5
   285b4:	mov	r2, r1
   285b8:	mvnne	r2, #0
   285bc:	cmp	r2, #0
   285c0:	bmi	2860c <__assert_fail@plt+0x1715c>
   285c4:	ldr	r0, [sp, #44]	; 0x2c
   285c8:	cmp	r0, r2
   285cc:	ble	2860c <__assert_fail@plt+0x1715c>
   285d0:	cmp	sl, r2
   285d4:	str	sl, [fp, #-52]	; 0xffffffcc
   285d8:	ble	28618 <__assert_fail@plt+0x17168>
   285dc:	mvn	r2, r1
   285e0:	str	sl, [sp, #72]	; 0x48
   285e4:	add	sl, r0, r2
   285e8:	cmp	sl, #4
   285ec:	bcs	28628 <__assert_fail@plt+0x17178>
   285f0:	ldr	r9, [sp, #40]	; 0x28
   285f4:	b	286dc <__assert_fail@plt+0x1722c>
   285f8:	ldr	r4, [sp, #84]	; 0x54
   285fc:	ldr	r9, [sp, #40]	; 0x28
   28600:	ldr	r3, [sp, #56]	; 0x38
   28604:	ldr	r5, [fp, #-80]	; 0xffffffb0
   28608:	b	2870c <__assert_fail@plt+0x1725c>
   2860c:	ldr	r0, [sp, #16]
   28610:	ldr	r9, [sp, #40]	; 0x28
   28614:	b	28704 <__assert_fail@plt+0x17254>
   28618:	ldr	r0, [sp, #16]
   2861c:	ldr	r9, [sp, #40]	; 0x28
   28620:	str	sl, [sp, #44]	; 0x2c
   28624:	b	28704 <__assert_fail@plt+0x17254>
   28628:	bic	lr, sl, #3
   2862c:	subs	r7, lr, #4
   28630:	add	r6, r3, r7, lsr #2
   28634:	and	ip, r6, #1
   28638:	beq	2867c <__assert_fail@plt+0x171cc>
   2863c:	ldr	r3, [sp, #64]	; 0x40
   28640:	sub	r2, ip, r6
   28644:	mov	r6, #0
   28648:	add	r3, r3, r1, lsl #2
   2864c:	add	r7, r3, #4
   28650:	mov	r4, r3
   28654:	adds	r2, r2, #2
   28658:	add	r6, r6, #8
   2865c:	vld1.32	{d16-d17}, [r7]
   28660:	vst1.32	{d16-d17}, [r4], r9
   28664:	vld1.32	{d16-d17}, [r4]
   28668:	add	r4, r3, #16
   2866c:	add	r3, r3, #32
   28670:	vst1.32	{d16-d17}, [r4]
   28674:	bne	2864c <__assert_fail@plt+0x1719c>
   28678:	b	28680 <__assert_fail@plt+0x171d0>
   2867c:	mov	r6, #0
   28680:	cmp	ip, #0
   28684:	beq	286a0 <__assert_fail@plt+0x171f0>
   28688:	ldr	r7, [sp, #64]	; 0x40
   2868c:	add	r3, r1, r6
   28690:	add	r3, r7, r3, lsl #2
   28694:	add	r7, r3, #4
   28698:	vld1.32	{d16-d17}, [r7]
   2869c:	vst1.32	{d16-d17}, [r3]
   286a0:	ldr	r4, [sp, #84]	; 0x54
   286a4:	ldr	r9, [sp, #40]	; 0x28
   286a8:	cmp	sl, lr
   286ac:	bne	286cc <__assert_fail@plt+0x1721c>
   286b0:	ldr	r0, [sp, #16]
   286b4:	ldr	ip, [sp, #80]	; 0x50
   286b8:	ldr	lr, [sp, #64]	; 0x40
   286bc:	str	r0, [sp, #32]
   286c0:	ldr	r0, [sp, #72]	; 0x48
   286c4:	str	r0, [sp, #44]	; 0x2c
   286c8:	b	28708 <__assert_fail@plt+0x17258>
   286cc:	add	r1, r1, lr
   286d0:	ldr	ip, [sp, #80]	; 0x50
   286d4:	ldr	lr, [sp, #64]	; 0x40
   286d8:	ldr	r0, [sp, #44]	; 0x2c
   286dc:	ldr	r6, [sp, #72]	; 0x48
   286e0:	sub	r2, r0, #1
   286e4:	add	r3, lr, r1, lsl #2
   286e8:	ldr	r3, [r3, #4]
   286ec:	str	r3, [lr, r1, lsl #2]
   286f0:	add	r1, r1, #1
   286f4:	cmp	r2, r1
   286f8:	bne	286e4 <__assert_fail@plt+0x17234>
   286fc:	ldr	r0, [sp, #16]
   28700:	str	r6, [sp, #44]	; 0x2c
   28704:	str	r0, [sp, #32]
   28708:	ldr	r3, [sp, #56]	; 0x38
   2870c:	ldr	r0, [sp, #76]	; 0x4c
   28710:	add	r1, r5, r5, lsl #1
   28714:	ldr	r0, [r0, #116]	; 0x74
   28718:	add	r0, r0, r1, lsl #3
   2871c:	b	2889c <__assert_fail@plt+0x173ec>
   28720:	ldr	r0, [sp, #24]
   28724:	ldr	r2, [sp, #32]
   28728:	cmp	r0, r6
   2872c:	beq	282ec <__assert_fail@plt+0x16e3c>
   28730:	b	28324 <__assert_fail@plt+0x16e74>
   28734:	ldr	r0, [r7]
   28738:	cmp	r0, r3
   2873c:	bne	28898 <__assert_fail@plt+0x173e8>
   28740:	ldr	r0, [r7, #8]
   28744:	ldr	r1, [r7, #12]
   28748:	str	r5, [fp, #-80]	; 0xffffffb0
   2874c:	subs	r0, r1, r0
   28750:	add	sl, r0, ip
   28754:	beq	28878 <__assert_fail@plt+0x173c8>
   28758:	ldr	r0, [r8, #12]
   2875c:	add	r0, r0, r3, lsl #2
   28760:	ldr	r1, [r4, #12]
   28764:	cmp	sl, r1
   28768:	bgt	28894 <__assert_fail@plt+0x173e4>
   2876c:	ldr	r1, [r4]
   28770:	ldr	r1, [r1, sl, lsl #2]
   28774:	cmp	r1, #0
   28778:	beq	28894 <__assert_fail@plt+0x173e4>
   2877c:	ldr	r2, [r1, #8]
   28780:	cmp	r2, #1
   28784:	blt	28894 <__assert_fail@plt+0x173e4>
   28788:	str	lr, [sp, #64]	; 0x40
   2878c:	mov	lr, r8
   28790:	ldr	r8, [r0]
   28794:	ldr	r0, [r1, #12]
   28798:	subs	r2, r2, #1
   2879c:	mov	r1, #0
   287a0:	mov	r4, #1
   287a4:	beq	287c8 <__assert_fail@plt+0x17318>
   287a8:	add	r3, r1, r2
   287ac:	lsr	r6, r3, #1
   287b0:	ldr	r5, [r0, r6, lsl #2]
   287b4:	cmp	r5, r8
   287b8:	addlt	r1, r4, r3, lsr #1
   287bc:	movge	r2, r6
   287c0:	cmp	r1, r2
   287c4:	bcc	287a8 <__assert_fail@plt+0x172f8>
   287c8:	ldr	r0, [r0, r1, lsl #2]
   287cc:	cmp	r0, r8
   287d0:	bne	27ffc <__assert_fail@plt+0x16b4c>
   287d4:	ldr	r1, [sp, #76]	; 0x4c
   287d8:	str	r8, [sp, #52]	; 0x34
   287dc:	ldr	r0, [r1, #108]	; 0x6c
   287e0:	cmp	r0, #1
   287e4:	blt	28014 <__assert_fail@plt+0x16b64>
   287e8:	ldr	r1, [r1, #116]	; 0x74
   287ec:	mov	r9, #0
   287f0:	mov	r2, r0
   287f4:	add	r3, r2, r9
   287f8:	add	r3, r3, r3, lsr #31
   287fc:	asr	r6, r3, #1
   28800:	add	r5, r6, r6, lsl #1
   28804:	add	r5, r1, r5, lsl #3
   28808:	ldr	r5, [r5, #4]
   2880c:	cmp	r5, ip
   28810:	addlt	r9, r4, r3, asr #1
   28814:	movge	r2, r6
   28818:	cmp	r9, r2
   2881c:	blt	287f4 <__assert_fail@plt+0x17344>
   28820:	ldr	r3, [sp, #76]	; 0x4c
   28824:	cmp	r9, r0
   28828:	bge	28024 <__assert_fail@plt+0x16b74>
   2882c:	ldr	r1, [r3, #116]	; 0x74
   28830:	add	r2, r9, r9, lsl #1
   28834:	add	r1, r1, r2, lsl #3
   28838:	ldr	r1, [r1, #4]
   2883c:	cmp	r1, ip
   28840:	mvnne	r9, #0
   28844:	cmp	r0, #1
   28848:	bge	28030 <__assert_fail@plt+0x16b80>
   2884c:	ldr	lr, [sp, #64]	; 0x40
   28850:	mov	r8, #0
   28854:	ldr	r3, [sp, #76]	; 0x4c
   28858:	cmp	r8, r0
   2885c:	blt	28078 <__assert_fail@plt+0x16bc8>
   28860:	mvn	r8, #0
   28864:	ldr	r5, [sp, #84]	; 0x54
   28868:	ldr	r4, [r5, #20]
   2886c:	cmp	r4, #1
   28870:	bge	280a0 <__assert_fail@plt+0x16bf0>
   28874:	b	28220 <__assert_fail@plt+0x16d70>
   28878:	ldr	r0, [r8, #20]
   2887c:	add	r1, r3, r3, lsl #1
   28880:	add	r0, r0, r1, lsl #2
   28884:	ldr	r0, [r0, #8]
   28888:	ldr	r1, [r4, #12]
   2888c:	cmp	sl, r1
   28890:	ble	2876c <__assert_fail@plt+0x172bc>
   28894:	ldr	r5, [fp, #-80]	; 0xffffffb0
   28898:	mov	r0, r7
   2889c:	add	r7, r0, #24
   288a0:	ldrb	r0, [r0, #20]
   288a4:	add	r5, r5, #1
   288a8:	cmp	r0, #0
   288ac:	bne	28734 <__assert_fail@plt+0x17284>
   288b0:	b	27f7c <__assert_fail@plt+0x16acc>
   288b4:	mov	r4, #0
   288b8:	cmp	r4, lr
   288bc:	blt	27f0c <__assert_fail@plt+0x16a5c>
   288c0:	mov	r0, #0
   288c4:	str	r0, [fp, #-76]	; 0xffffffb4
   288c8:	mov	r9, #0
   288cc:	mov	r0, r9
   288d0:	sub	sp, fp, #28
   288d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288d8:	mov	r9, r0
   288dc:	str	r0, [fp, #-76]	; 0xffffffb4
   288e0:	mov	r0, r9
   288e4:	sub	sp, fp, #28
   288e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288ec:	str	r2, [fp, #-76]	; 0xffffffb4
   288f0:	b	288c8 <__assert_fail@plt+0x17418>
   288f4:	mov	r9, #0
   288f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   288fc:	cmp	r0, #0
   28900:	beq	2890c <__assert_fail@plt+0x1745c>
   28904:	mov	r0, lr
   28908:	bl	2bc28 <__assert_fail@plt+0x1a778>
   2890c:	cmp	r9, #0
   28910:	str	r9, [fp, #-76]	; 0xffffffb4
   28914:	moveq	r9, #0
   28918:	mov	r0, r9
   2891c:	sub	sp, fp, #28
   28920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28924:	str	r0, [fp, #-72]	; 0xffffffb8
   28928:	str	r9, [fp, #-76]	; 0xffffffb4
   2892c:	mov	r0, r9
   28930:	sub	sp, fp, #28
   28934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28938:	ldr	lr, [sp, #64]	; 0x40
   2893c:	mov	r9, r0
   28940:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28944:	cmp	r0, #0
   28948:	bne	28904 <__assert_fail@plt+0x17454>
   2894c:	b	2890c <__assert_fail@plt+0x1745c>
   28950:	mov	r9, r0
   28954:	mov	r0, r9
   28958:	sub	sp, fp, #28
   2895c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28960:	mov	lr, #0
   28964:	mov	r9, #12
   28968:	str	lr, [fp, #-56]	; 0xffffffc8
   2896c:	str	lr, [fp, #-52]	; 0xffffffcc
   28970:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28974:	cmp	r0, #0
   28978:	bne	28904 <__assert_fail@plt+0x17454>
   2897c:	b	2890c <__assert_fail@plt+0x1745c>
   28980:	mov	r9, #12
   28984:	mov	lr, r4
   28988:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2898c:	cmp	r0, #0
   28990:	bne	28904 <__assert_fail@plt+0x17454>
   28994:	b	2890c <__assert_fail@plt+0x1745c>
   28998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2899c:	add	fp, sp, #28
   289a0:	sub	sp, sp, #4
   289a4:	mov	r9, r0
   289a8:	ldr	r0, [r1, #4]
   289ac:	mov	r8, #0
   289b0:	cmp	r0, #0
   289b4:	beq	28b70 <__assert_fail@plt+0x176c0>
   289b8:	mov	r5, r2
   289bc:	ldr	r2, [r2, #4]
   289c0:	cmp	r2, #0
   289c4:	beq	28b70 <__assert_fail@plt+0x176c0>
   289c8:	mov	sl, r1
   289cc:	ldr	r1, [r9, #4]
   289d0:	ldr	r7, [r9]
   289d4:	add	r3, r2, r0
   289d8:	add	r6, r1, r3
   289dc:	cmp	r6, r7
   289e0:	ble	28a10 <__assert_fail@plt+0x17560>
   289e4:	ldr	r0, [r9, #8]
   289e8:	add	r4, r7, r3
   289ec:	lsl	r1, r4, #2
   289f0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   289f4:	cmp	r0, #0
   289f8:	beq	28b7c <__assert_fail@plt+0x176cc>
   289fc:	str	r4, [r9]
   28a00:	str	r0, [r9, #8]
   28a04:	ldr	r1, [r9, #4]
   28a08:	ldr	r2, [r5, #4]
   28a0c:	ldr	r0, [sl, #4]
   28a10:	ldr	lr, [r5, #8]
   28a14:	ldr	r4, [sl, #8]
   28a18:	add	r3, r0, r1
   28a1c:	sub	r7, r1, #1
   28a20:	add	ip, r3, r2
   28a24:	sub	r0, r0, #1
   28a28:	sub	r3, r2, #1
   28a2c:	ldr	r1, [lr, r3, lsl #2]
   28a30:	ldr	r6, [r4, r0, lsl #2]
   28a34:	cmp	r6, r1
   28a38:	beq	28a64 <__assert_fail@plt+0x175b4>
   28a3c:	blt	28a54 <__assert_fail@plt+0x175a4>
   28a40:	sub	r6, r0, #1
   28a44:	cmp	r0, #0
   28a48:	mov	r0, r6
   28a4c:	bgt	28a30 <__assert_fail@plt+0x17580>
   28a50:	b	28ad4 <__assert_fail@plt+0x17624>
   28a54:	cmp	r2, #2
   28a58:	mov	r2, r3
   28a5c:	bge	28a28 <__assert_fail@plt+0x17578>
   28a60:	b	28ad4 <__assert_fail@plt+0x17624>
   28a64:	cmp	r7, #0
   28a68:	bmi	28ab0 <__assert_fail@plt+0x17600>
   28a6c:	ldr	r8, [r9, #8]
   28a70:	mov	r1, r7
   28a74:	ldr	r7, [r8, r1, lsl #2]
   28a78:	cmp	r7, r6
   28a7c:	ble	28a94 <__assert_fail@plt+0x175e4>
   28a80:	sub	r7, r1, #1
   28a84:	cmp	r1, #0
   28a88:	mov	r1, r7
   28a8c:	bgt	28a74 <__assert_fail@plt+0x175c4>
   28a90:	b	28ab0 <__assert_fail@plt+0x17600>
   28a94:	mov	r7, r1
   28a98:	bne	28ab0 <__assert_fail@plt+0x17600>
   28a9c:	mov	r7, r1
   28aa0:	cmp	r0, #1
   28aa4:	mov	r8, #0
   28aa8:	bge	28ac8 <__assert_fail@plt+0x17618>
   28aac:	b	28ad4 <__assert_fail@plt+0x17624>
   28ab0:	ldr	r1, [r9, #8]
   28ab4:	sub	ip, ip, #1
   28ab8:	str	r6, [r1, ip, lsl #2]
   28abc:	cmp	r0, #1
   28ac0:	mov	r8, #0
   28ac4:	blt	28ad4 <__assert_fail@plt+0x17624>
   28ac8:	cmp	r2, #2
   28acc:	mov	r2, r3
   28ad0:	bge	28a24 <__assert_fail@plt+0x17574>
   28ad4:	ldr	r2, [r9, #4]
   28ad8:	ldr	lr, [sl, #4]
   28adc:	ldr	r4, [r5, #4]
   28ae0:	ldr	r0, [r9, #8]
   28ae4:	subs	r1, r2, #1
   28ae8:	add	r3, r1, lr
   28aec:	add	r3, r3, r4
   28af0:	sub	r7, r3, ip
   28af4:	add	r6, r7, #1
   28af8:	add	r5, r6, r2
   28afc:	str	r5, [r9, #4]
   28b00:	blt	28b60 <__assert_fail@plt+0x176b0>
   28b04:	cmp	r7, #0
   28b08:	bmi	28b60 <__assert_fail@plt+0x176b0>
   28b0c:	add	r2, r2, r4
   28b10:	add	r2, r2, lr
   28b14:	sub	r2, r2, ip
   28b18:	add	r7, r0, r2, lsl #2
   28b1c:	ldr	r2, [r0, r1, lsl #2]
   28b20:	ldr	r5, [r0, r3, lsl #2]
   28b24:	cmp	r5, r2
   28b28:	bgt	28b44 <__assert_fail@plt+0x17694>
   28b2c:	str	r2, [r7, r1, lsl #2]
   28b30:	sub	r2, r1, #1
   28b34:	cmp	r1, #0
   28b38:	mov	r1, r2
   28b3c:	bgt	28b1c <__assert_fail@plt+0x1766c>
   28b40:	b	28b60 <__assert_fail@plt+0x176b0>
   28b44:	str	r5, [r7, r1, lsl #2]
   28b48:	sub	r7, r7, #4
   28b4c:	subs	r6, r6, #1
   28b50:	sub	r3, r3, #1
   28b54:	mov	r2, #0
   28b58:	bne	28b1c <__assert_fail@plt+0x1766c>
   28b5c:	b	28b64 <__assert_fail@plt+0x176b4>
   28b60:	mov	r2, r6
   28b64:	add	r1, r0, ip, lsl #2
   28b68:	lsl	r2, r2, #2
   28b6c:	bl	11258 <memcpy@plt>
   28b70:	mov	r0, r8
   28b74:	sub	sp, fp, #28
   28b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b7c:	mov	r8, #12
   28b80:	mov	r0, r8
   28b84:	sub	sp, fp, #28
   28b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b90:	add	fp, sp, #28
   28b94:	sub	sp, sp, #44	; 0x2c
   28b98:	mov	ip, r0
   28b9c:	ldr	r0, [r0, #28]
   28ba0:	str	r3, [sp, #4]
   28ba4:	add	r3, r1, r1, lsl #1
   28ba8:	mov	r4, #0
   28bac:	str	r4, [sp, #36]	; 0x24
   28bb0:	str	r4, [sp, #32]
   28bb4:	str	r4, [sp, #40]	; 0x28
   28bb8:	add	r3, r0, r3, lsl #2
   28bbc:	mov	r0, r3
   28bc0:	ldr	lr, [r0, #4]!
   28bc4:	str	r0, [sp, #24]
   28bc8:	cmp	lr, #1
   28bcc:	blt	28f0c <__assert_fail@plt+0x17a5c>
   28bd0:	add	r4, r3, #8
   28bd4:	mov	r9, #0
   28bd8:	mov	sl, #1
   28bdc:	str	r2, [sp, #28]
   28be0:	str	r3, [sp]
   28be4:	str	r1, [sp, #12]
   28be8:	str	ip, [sp, #8]
   28bec:	str	r4, [sp, #20]
   28bf0:	ldr	r3, [r4]
   28bf4:	ldr	r0, [r3, r9, lsl #2]
   28bf8:	cmp	r0, r1
   28bfc:	bne	28c1c <__assert_fail@plt+0x1776c>
   28c00:	add	r9, r9, #1
   28c04:	cmp	r9, lr
   28c08:	bge	28dcc <__assert_fail@plt+0x1791c>
   28c0c:	ldr	r3, [r4]
   28c10:	ldr	r0, [r3, r9, lsl #2]
   28c14:	cmp	r0, r1
   28c18:	beq	28c00 <__assert_fail@plt+0x17750>
   28c1c:	ldr	r2, [ip]
   28c20:	add	r2, r2, r0, lsl #3
   28c24:	ldrb	r2, [r2, #4]
   28c28:	tst	r2, #8
   28c2c:	beq	28c00 <__assert_fail@plt+0x17750>
   28c30:	ldr	r2, [ip, #20]
   28c34:	add	r0, r0, r0, lsl #1
   28c38:	mvn	r8, #0
   28c3c:	str	r0, [sp, #16]
   28c40:	add	r0, r2, r0, lsl #2
   28c44:	ldr	r7, [r0, #4]
   28c48:	ldr	r0, [r0, #8]
   28c4c:	cmp	r7, #2
   28c50:	ldr	r5, [r0]
   28c54:	ldrge	r8, [r0, #4]
   28c58:	cmp	lr, #1
   28c5c:	blt	28c9c <__assert_fail@plt+0x177ec>
   28c60:	mov	r2, #0
   28c64:	subs	r7, lr, #1
   28c68:	beq	28c8c <__assert_fail@plt+0x177dc>
   28c6c:	add	r6, r2, r7
   28c70:	lsr	r4, r6, #1
   28c74:	ldr	r0, [r3, r4, lsl #2]
   28c78:	cmp	r0, r5
   28c7c:	addlt	r2, sl, r6, lsr #1
   28c80:	movge	r7, r4
   28c84:	cmp	r2, r7
   28c88:	bcc	28c6c <__assert_fail@plt+0x177bc>
   28c8c:	ldr	r0, [r3, r2, lsl #2]
   28c90:	ldr	r4, [sp, #20]
   28c94:	cmp	r0, r5
   28c98:	beq	28cf8 <__assert_fail@plt+0x17848>
   28c9c:	ldr	r0, [sp, #28]
   28ca0:	ldr	r0, [r0, #4]
   28ca4:	cmp	r0, #1
   28ca8:	blt	28cf8 <__assert_fail@plt+0x17848>
   28cac:	subs	r7, r0, #1
   28cb0:	ldr	r0, [sp, #28]
   28cb4:	mov	r6, #0
   28cb8:	ldr	r1, [r0, #8]
   28cbc:	beq	28ce0 <__assert_fail@plt+0x17830>
   28cc0:	add	r0, r6, r7
   28cc4:	lsr	r4, r0, #1
   28cc8:	ldr	ip, [r1, r4, lsl #2]
   28ccc:	cmp	ip, r5
   28cd0:	addlt	r6, sl, r0, lsr #1
   28cd4:	movge	r7, r4
   28cd8:	cmp	r6, r7
   28cdc:	bcc	28cc0 <__assert_fail@plt+0x17810>
   28ce0:	ldr	r0, [r1, r6, lsl #2]
   28ce4:	ldr	r1, [sp, #12]
   28ce8:	ldr	ip, [sp, #8]
   28cec:	ldr	r4, [sp, #20]
   28cf0:	cmp	r0, r5
   28cf4:	beq	28d90 <__assert_fail@plt+0x178e0>
   28cf8:	cmp	r8, #1
   28cfc:	blt	28c00 <__assert_fail@plt+0x17750>
   28d00:	cmp	lr, #1
   28d04:	blt	28d40 <__assert_fail@plt+0x17890>
   28d08:	mov	r2, #0
   28d0c:	subs	r7, lr, #1
   28d10:	beq	28d34 <__assert_fail@plt+0x17884>
   28d14:	add	r0, r2, r7
   28d18:	lsr	r6, r0, #1
   28d1c:	ldr	r5, [r3, r6, lsl #2]
   28d20:	cmp	r5, r8
   28d24:	addlt	r2, sl, r0, lsr #1
   28d28:	movge	r7, r6
   28d2c:	cmp	r2, r7
   28d30:	bcc	28d14 <__assert_fail@plt+0x17864>
   28d34:	ldr	r0, [r3, r2, lsl #2]
   28d38:	cmp	r0, r8
   28d3c:	beq	28c00 <__assert_fail@plt+0x17750>
   28d40:	ldr	r2, [sp, #28]
   28d44:	ldr	r0, [r2, #4]
   28d48:	cmp	r0, #1
   28d4c:	blt	28c00 <__assert_fail@plt+0x17750>
   28d50:	ldr	r4, [r2, #8]
   28d54:	subs	r7, r0, #1
   28d58:	mov	r3, #0
   28d5c:	beq	28d80 <__assert_fail@plt+0x178d0>
   28d60:	add	r0, r3, r7
   28d64:	lsr	r6, r0, #1
   28d68:	ldr	r5, [r4, r6, lsl #2]
   28d6c:	cmp	r5, r8
   28d70:	addlt	r3, sl, r0, lsr #1
   28d74:	movge	r7, r6
   28d78:	cmp	r3, r7
   28d7c:	bcc	28d60 <__assert_fail@plt+0x178b0>
   28d80:	ldr	r0, [r4, r3, lsl #2]
   28d84:	ldr	r4, [sp, #20]
   28d88:	cmp	r0, r8
   28d8c:	bne	28c00 <__assert_fail@plt+0x17750>
   28d90:	ldr	r0, [ip, #28]
   28d94:	ldr	r1, [sp, #16]
   28d98:	add	r2, r0, r1, lsl #2
   28d9c:	ldr	r1, [sp, #4]
   28da0:	add	r0, sp, #32
   28da4:	bl	28998 <__assert_fail@plt+0x174e8>
   28da8:	cmp	r0, #0
   28dac:	bne	28ffc <__assert_fail@plt+0x17b4c>
   28db0:	ldr	r0, [sp, #24]
   28db4:	ldr	r1, [sp, #12]
   28db8:	ldr	ip, [sp, #8]
   28dbc:	ldr	lr, [r0]
   28dc0:	add	r9, r9, #1
   28dc4:	cmp	r9, lr
   28dc8:	blt	28c0c <__assert_fail@plt+0x1775c>
   28dcc:	ldr	r2, [sp, #28]
   28dd0:	ldr	r0, [sp]
   28dd4:	cmp	lr, #0
   28dd8:	mov	r4, #0
   28ddc:	ble	28f0c <__assert_fail@plt+0x17a5c>
   28de0:	ldr	r1, [sp, #36]	; 0x24
   28de4:	ldr	r9, [r0, #8]
   28de8:	ldr	r0, [sp, #40]	; 0x28
   28dec:	subs	lr, r1, #1
   28df0:	str	r9, [sp, #20]
   28df4:	blt	28f20 <__assert_fail@plt+0x17a70>
   28df8:	mov	ip, #0
   28dfc:	mov	r7, #1
   28e00:	ldr	r6, [r9, ip, lsl #2]
   28e04:	cmp	lr, #0
   28e08:	mov	r1, #0
   28e0c:	bne	28e38 <__assert_fail@plt+0x17988>
   28e10:	b	28e60 <__assert_fail@plt+0x179b0>
   28e14:	ldr	r1, [sp, #24]
   28e18:	add	ip, ip, #1
   28e1c:	ldr	r1, [r1]
   28e20:	cmp	ip, r1
   28e24:	bge	28fe8 <__assert_fail@plt+0x17b38>
   28e28:	ldr	r6, [r9, ip, lsl #2]
   28e2c:	cmp	lr, #0
   28e30:	mov	r1, #0
   28e34:	beq	28e60 <__assert_fail@plt+0x179b0>
   28e38:	mov	r1, #0
   28e3c:	mov	r2, lr
   28e40:	add	r5, r1, r2
   28e44:	lsr	r4, r5, #1
   28e48:	ldr	r3, [r0, r4, lsl #2]
   28e4c:	cmp	r3, r6
   28e50:	addlt	r1, r7, r5, lsr #1
   28e54:	movge	r2, r4
   28e58:	cmp	r1, r2
   28e5c:	bcc	28e40 <__assert_fail@plt+0x17990>
   28e60:	ldr	r1, [r0, r1, lsl #2]
   28e64:	cmp	r1, r6
   28e68:	ldr	r1, [sp, #28]
   28e6c:	beq	28e14 <__assert_fail@plt+0x17964>
   28e70:	ldr	sl, [r1, #4]
   28e74:	cmp	sl, #1
   28e78:	blt	28e14 <__assert_fail@plt+0x17964>
   28e7c:	ldr	r5, [r1, #8]
   28e80:	subs	r4, sl, #1
   28e84:	beq	28eb4 <__assert_fail@plt+0x17a04>
   28e88:	mov	r1, #0
   28e8c:	mov	r8, r4
   28e90:	add	r3, r1, r4
   28e94:	lsr	r2, r3, #1
   28e98:	ldr	r9, [r5, r2, lsl #2]
   28e9c:	cmp	r9, r6
   28ea0:	addlt	r1, r7, r3, lsr #1
   28ea4:	movge	r4, r2
   28ea8:	cmp	r1, r4
   28eac:	bcc	28e90 <__assert_fail@plt+0x179e0>
   28eb0:	b	28ebc <__assert_fail@plt+0x17a0c>
   28eb4:	mov	r8, r4
   28eb8:	mov	r1, #0
   28ebc:	ldr	r2, [r5, r1, lsl #2]
   28ec0:	ldr	r3, [sp, #28]
   28ec4:	ldr	r9, [sp, #20]
   28ec8:	mov	r4, r1
   28ecc:	cmp	r2, r6
   28ed0:	mvnne	r4, #0
   28ed4:	cmp	r4, #0
   28ed8:	bmi	28e14 <__assert_fail@plt+0x17964>
   28edc:	cmp	sl, r4
   28ee0:	strgt	r8, [r3, #4]
   28ee4:	cmpgt	r8, r4
   28ee8:	ble	28e14 <__assert_fail@plt+0x17964>
   28eec:	add	r2, r5, r1, lsl #2
   28ef0:	ldr	r2, [r2, #4]
   28ef4:	str	r2, [r5, r1, lsl #2]
   28ef8:	add	r1, r1, #1
   28efc:	ldr	r2, [r3, #4]
   28f00:	cmp	r1, r2
   28f04:	blt	28eec <__assert_fail@plt+0x17a3c>
   28f08:	b	28e14 <__assert_fail@plt+0x17964>
   28f0c:	ldr	r0, [sp, #40]	; 0x28
   28f10:	bl	2bc28 <__assert_fail@plt+0x1a778>
   28f14:	mov	r0, r4
   28f18:	sub	sp, fp, #28
   28f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f20:	ldr	r7, [r2, #4]
   28f24:	mov	sl, #0
   28f28:	mov	r9, #1
   28f2c:	cmp	r7, #1
   28f30:	bge	28f58 <__assert_fail@plt+0x17aa8>
   28f34:	b	28f3c <__assert_fail@plt+0x17a8c>
   28f38:	ldr	r2, [sp, #28]
   28f3c:	ldr	r1, [sp, #24]
   28f40:	add	sl, sl, #1
   28f44:	ldr	r1, [r1]
   28f48:	cmp	sl, r1
   28f4c:	bge	28fe8 <__assert_fail@plt+0x17b38>
   28f50:	cmp	r7, #1
   28f54:	blt	28f3c <__assert_fail@plt+0x17a8c>
   28f58:	ldr	r1, [sp, #20]
   28f5c:	ldr	r6, [r2, #8]
   28f60:	subs	lr, r7, #1
   28f64:	mov	r5, #0
   28f68:	ldr	r1, [r1, sl, lsl #2]
   28f6c:	beq	28f94 <__assert_fail@plt+0x17ae4>
   28f70:	mov	r4, lr
   28f74:	add	r3, r5, r4
   28f78:	lsr	r2, r3, #1
   28f7c:	ldr	ip, [r6, r2, lsl #2]
   28f80:	cmp	ip, r1
   28f84:	addlt	r5, r9, r3, lsr #1
   28f88:	movge	r4, r2
   28f8c:	cmp	r5, r4
   28f90:	bcc	28f74 <__assert_fail@plt+0x17ac4>
   28f94:	ldr	r2, [r6, r5, lsl #2]
   28f98:	cmp	r2, r1
   28f9c:	mov	r1, r5
   28fa0:	mvnne	r1, #0
   28fa4:	cmp	r1, #0
   28fa8:	bmi	28f38 <__assert_fail@plt+0x17a88>
   28fac:	ldr	r2, [sp, #28]
   28fb0:	cmp	r7, r1
   28fb4:	ble	28f3c <__assert_fail@plt+0x17a8c>
   28fb8:	cmp	lr, r1
   28fbc:	mov	r7, lr
   28fc0:	str	lr, [r2, #4]
   28fc4:	ble	28f3c <__assert_fail@plt+0x17a8c>
   28fc8:	add	r1, r6, r5, lsl #2
   28fcc:	ldr	r1, [r1, #4]
   28fd0:	str	r1, [r6, r5, lsl #2]
   28fd4:	add	r5, r5, #1
   28fd8:	ldr	r7, [r2, #4]
   28fdc:	cmp	r5, r7
   28fe0:	blt	28fc8 <__assert_fail@plt+0x17b18>
   28fe4:	b	28f3c <__assert_fail@plt+0x17a8c>
   28fe8:	mov	r4, #0
   28fec:	bl	2bc28 <__assert_fail@plt+0x1a778>
   28ff0:	mov	r0, r4
   28ff4:	sub	sp, fp, #28
   28ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ffc:	mov	r1, r0
   29000:	ldr	r0, [sp, #40]	; 0x28
   29004:	mov	r4, r1
   29008:	bl	2bc28 <__assert_fail@plt+0x1a778>
   2900c:	mov	r0, r4
   29010:	sub	sp, fp, #28
   29014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2901c:	add	fp, sp, #28
   29020:	sub	sp, sp, #44	; 0x2c
   29024:	ldr	r4, [r0, #84]	; 0x54
   29028:	mov	r7, r0
   2902c:	str	r1, [fp, #-32]	; 0xffffffe0
   29030:	add	r1, r3, r3, lsl #1
   29034:	mov	r6, r2
   29038:	str	r3, [sp, #36]	; 0x24
   2903c:	ldr	r0, [r4, #24]
   29040:	add	r0, r0, r1, lsl #2
   29044:	mov	r2, r0
   29048:	ldr	r1, [r2, #4]!
   2904c:	str	r2, [sp, #28]
   29050:	cmp	r1, #1
   29054:	blt	29320 <__assert_fail@plt+0x17e70>
   29058:	mov	r1, #1
   2905c:	cmp	r6, #31
   29060:	add	r0, r0, #8
   29064:	mov	sl, #0
   29068:	mvn	r2, r1, lsl r6
   2906c:	lsl	r1, r1, r6
   29070:	str	r0, [sp, #32]
   29074:	str	r2, [sp, #16]
   29078:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2907c:	str	r1, [sp, #24]
   29080:	mov	r1, #0
   29084:	movwgt	r1, #1
   29088:	and	r3, r2, #2
   2908c:	and	r0, r2, #1
   29090:	orr	r1, r1, r3, lsr #1
   29094:	str	r3, [sp, #20]
   29098:	str	r0, [sp, #8]
   2909c:	str	r1, [sp, #12]
   290a0:	b	290b8 <__assert_fail@plt+0x17c08>
   290a4:	ldr	r0, [sp, #28]
   290a8:	add	sl, sl, #1
   290ac:	ldr	r0, [r0]
   290b0:	cmp	sl, r0
   290b4:	bge	29320 <__assert_fail@plt+0x17e70>
   290b8:	ldr	r0, [sp, #32]
   290bc:	ldr	r0, [r0]
   290c0:	ldr	r8, [r0, sl, lsl #2]
   290c4:	ldr	r0, [r4]
   290c8:	add	r1, r0, r8, lsl #3
   290cc:	ldrb	r1, [r1, #4]
   290d0:	cmp	r1, #9
   290d4:	beq	29120 <__assert_fail@plt+0x17c70>
   290d8:	cmp	r1, #8
   290dc:	beq	2913c <__assert_fail@plt+0x17c8c>
   290e0:	cmp	r1, #4
   290e4:	bne	290a4 <__assert_fail@plt+0x17bf4>
   290e8:	ldr	r0, [fp, #8]
   290ec:	cmn	r0, #1
   290f0:	beq	290a4 <__assert_fail@plt+0x17bf4>
   290f4:	ldr	r1, [fp, #8]
   290f8:	ldr	r0, [r7, #116]	; 0x74
   290fc:	cmp	r6, #31
   29100:	add	r1, r1, r1, lsl #1
   29104:	bgt	291f8 <__assert_fail@plt+0x17d48>
   29108:	add	r0, r0, r1, lsl #3
   2910c:	add	r9, r0, #16
   29110:	ldr	r0, [r9, #-16]
   29114:	cmp	r0, r8
   29118:	bne	29170 <__assert_fail@plt+0x17cc0>
   2911c:	b	2918c <__assert_fail@plt+0x17cdc>
   29120:	ldr	r1, [sp, #20]
   29124:	cmp	r1, #0
   29128:	beq	290a4 <__assert_fail@plt+0x17bf4>
   2912c:	ldr	r0, [r0, r8, lsl #3]
   29130:	cmp	r0, r6
   29134:	bne	290a4 <__assert_fail@plt+0x17bf4>
   29138:	b	29340 <__assert_fail@plt+0x17e90>
   2913c:	ldr	r1, [sp, #8]
   29140:	cmp	r1, #0
   29144:	beq	290a4 <__assert_fail@plt+0x17bf4>
   29148:	ldr	r0, [r0, r8, lsl #3]
   2914c:	cmp	r0, r6
   29150:	bne	290a4 <__assert_fail@plt+0x17bf4>
   29154:	b	2934c <__assert_fail@plt+0x17e9c>
   29158:	cmn	r0, #1
   2915c:	beq	29318 <__assert_fail@plt+0x17e68>
   29160:	ldr	r0, [r9]
   29164:	ldr	r1, [sp, #16]
   29168:	and	r0, r0, r1
   2916c:	str	r0, [r9]
   29170:	ldrb	r0, [r9, #4]
   29174:	add	r9, r9, #24
   29178:	cmp	r0, #0
   2917c:	beq	290a4 <__assert_fail@plt+0x17bf4>
   29180:	ldr	r0, [r9, #-16]
   29184:	cmp	r0, r8
   29188:	bne	29170 <__assert_fail@plt+0x17cc0>
   2918c:	ldr	r0, [r9]
   29190:	ldr	r1, [sp, #24]
   29194:	tst	r0, r1
   29198:	beq	29170 <__assert_fail@plt+0x17cc0>
   2919c:	ldr	r0, [r4, #20]
   291a0:	add	r1, r8, r8, lsl #1
   291a4:	add	r0, r0, r1, lsl #2
   291a8:	ldr	r0, [r0, #8]
   291ac:	ldr	r3, [r0]
   291b0:	ldr	r0, [sp, #36]	; 0x24
   291b4:	cmp	r3, r0
   291b8:	beq	29330 <__assert_fail@plt+0x17e80>
   291bc:	ldr	r0, [fp, #8]
   291c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   291c4:	mov	r2, r6
   291c8:	str	r0, [sp]
   291cc:	mov	r0, r7
   291d0:	bl	29018 <__assert_fail@plt+0x17b68>
   291d4:	cmp	r0, #0
   291d8:	bne	29158 <__assert_fail@plt+0x17ca8>
   291dc:	ldr	r0, [sp, #12]
   291e0:	cmp	r0, #0
   291e4:	beq	29160 <__assert_fail@plt+0x17cb0>
   291e8:	ldr	r0, [sp, #20]
   291ec:	cmp	r0, #0
   291f0:	beq	29170 <__assert_fail@plt+0x17cc0>
   291f4:	b	29340 <__assert_fail@plt+0x17e90>
   291f8:	ldr	r2, [sp, #12]
   291fc:	cmp	r2, #0
   29200:	beq	2928c <__assert_fail@plt+0x17ddc>
   29204:	add	r5, r0, r1, lsl #3
   29208:	ldr	r0, [r5]
   2920c:	cmp	r0, r8
   29210:	bne	29224 <__assert_fail@plt+0x17d74>
   29214:	b	29240 <__assert_fail@plt+0x17d90>
   29218:	ldr	r0, [sp, #20]
   2921c:	cmp	r0, #0
   29220:	bne	29340 <__assert_fail@plt+0x17e90>
   29224:	ldrb	r0, [r5, #20]
   29228:	add	r5, r5, #24
   2922c:	cmp	r0, #0
   29230:	beq	290a4 <__assert_fail@plt+0x17bf4>
   29234:	ldr	r0, [r5]
   29238:	cmp	r0, r8
   2923c:	bne	29224 <__assert_fail@plt+0x17d74>
   29240:	ldr	r0, [r4, #20]
   29244:	add	r1, r8, r8, lsl #1
   29248:	add	r0, r0, r1, lsl #2
   2924c:	ldr	r0, [r0, #8]
   29250:	ldr	r3, [r0]
   29254:	ldr	r0, [sp, #36]	; 0x24
   29258:	cmp	r3, r0
   2925c:	beq	29330 <__assert_fail@plt+0x17e80>
   29260:	ldr	r0, [fp, #8]
   29264:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29268:	mov	r2, r6
   2926c:	str	r0, [sp]
   29270:	mov	r0, r7
   29274:	bl	29018 <__assert_fail@plt+0x17b68>
   29278:	cmp	r0, #0
   2927c:	beq	29218 <__assert_fail@plt+0x17d68>
   29280:	cmn	r0, #1
   29284:	bne	29224 <__assert_fail@plt+0x17d74>
   29288:	b	29318 <__assert_fail@plt+0x17e68>
   2928c:	add	r0, r0, r1, lsl #3
   29290:	add	r5, r0, #16
   29294:	ldr	r0, [r5, #-16]
   29298:	cmp	r0, r8
   2929c:	bne	292b4 <__assert_fail@plt+0x17e04>
   292a0:	b	292d0 <__assert_fail@plt+0x17e20>
   292a4:	ldr	r0, [r5]
   292a8:	ldr	r1, [sp, #16]
   292ac:	and	r0, r0, r1
   292b0:	str	r0, [r5]
   292b4:	ldrb	r0, [r5, #4]
   292b8:	add	r5, r5, #24
   292bc:	cmp	r0, #0
   292c0:	beq	290a4 <__assert_fail@plt+0x17bf4>
   292c4:	ldr	r0, [r5, #-16]
   292c8:	cmp	r0, r8
   292cc:	bne	292b4 <__assert_fail@plt+0x17e04>
   292d0:	ldr	r0, [r4, #20]
   292d4:	add	r1, r8, r8, lsl #1
   292d8:	add	r0, r0, r1, lsl #2
   292dc:	ldr	r0, [r0, #8]
   292e0:	ldr	r3, [r0]
   292e4:	ldr	r0, [sp, #36]	; 0x24
   292e8:	cmp	r3, r0
   292ec:	beq	29330 <__assert_fail@plt+0x17e80>
   292f0:	ldr	r0, [fp, #8]
   292f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   292f8:	mov	r2, r6
   292fc:	str	r0, [sp]
   29300:	mov	r0, r7
   29304:	bl	29018 <__assert_fail@plt+0x17b68>
   29308:	cmp	r0, #0
   2930c:	beq	292a4 <__assert_fail@plt+0x17df4>
   29310:	cmn	r0, #1
   29314:	bne	292b4 <__assert_fail@plt+0x17e04>
   29318:	sub	sp, fp, #28
   2931c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29320:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29324:	ubfx	r0, r0, #1, #1
   29328:	sub	sp, fp, #28
   2932c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29330:	ldr	r0, [sp, #8]
   29334:	rsb	r0, r0, #0
   29338:	sub	sp, fp, #28
   2933c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29340:	mov	r0, #0
   29344:	sub	sp, fp, #28
   29348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2934c:	mvn	r0, #0
   29350:	sub	sp, fp, #28
   29354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29358:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2935c:	add	fp, sp, #24
   29360:	sub	sp, sp, #32
   29364:	ldr	r6, [fp, #12]
   29368:	ldr	r7, [fp, #8]
   2936c:	mov	r4, r2
   29370:	mov	r8, r0
   29374:	cmp	r1, #0
   29378:	beq	293a0 <__assert_fail@plt+0x17ef0>
   2937c:	movw	r2, #53337	; 0xd059
   29380:	mov	r5, r1
   29384:	str	r3, [sp, #4]
   29388:	str	r4, [sp]
   2938c:	mov	r0, r8
   29390:	mov	r1, #1
   29394:	movt	r2, #2
   29398:	mov	r3, r5
   2939c:	b	293b8 <__assert_fail@plt+0x17f08>
   293a0:	movw	r2, #53349	; 0xd065
   293a4:	str	r3, [sp]
   293a8:	mov	r0, r8
   293ac:	mov	r1, #1
   293b0:	mov	r3, r4
   293b4:	movt	r2, #2
   293b8:	bl	113fc <__fprintf_chk@plt>
   293bc:	movw	r1, #53356	; 0xd06c
   293c0:	mov	r0, #0
   293c4:	mov	r2, #5
   293c8:	movt	r1, #2
   293cc:	bl	112a0 <dcgettext@plt>
   293d0:	movw	r2, #54074	; 0xd33a
   293d4:	mov	r3, r0
   293d8:	movw	r0, #2022	; 0x7e6
   293dc:	mov	r1, #1
   293e0:	movt	r2, #2
   293e4:	str	r0, [sp]
   293e8:	mov	r0, r8
   293ec:	bl	113fc <__fprintf_chk@plt>
   293f0:	movw	r4, #51111	; 0xc7a7
   293f4:	mov	r1, r8
   293f8:	movt	r4, #2
   293fc:	mov	r0, r4
   29400:	bl	111bc <fputs_unlocked@plt>
   29404:	movw	r1, #53360	; 0xd070
   29408:	mov	r0, #0
   2940c:	mov	r2, #5
   29410:	movt	r1, #2
   29414:	bl	112a0 <dcgettext@plt>
   29418:	movw	r3, #53531	; 0xd11b
   2941c:	mov	r2, r0
   29420:	mov	r0, r8
   29424:	mov	r1, #1
   29428:	movt	r3, #2
   2942c:	bl	113fc <__fprintf_chk@plt>
   29430:	mov	r0, r4
   29434:	mov	r1, r8
   29438:	bl	111bc <fputs_unlocked@plt>
   2943c:	cmp	r6, #9
   29440:	bhi	2947c <__assert_fail@plt+0x17fcc>
   29444:	add	r0, pc, #0
   29448:	ldr	pc, [r0, r6, lsl #2]
   2944c:	andeq	r9, r2, r4, ror r4
   29450:	andeq	r9, r2, r8, lsl #9
   29454:			; <UNDEFINED> instruction: 0x000294b8
   29458:	andeq	r9, r2, r0, ror #9
   2945c:	andeq	r9, r2, r8, lsl #10
   29460:	andeq	r9, r2, r0, lsr r5
   29464:	andeq	r9, r2, r8, asr r5
   29468:	muleq	r2, r0, r5
   2946c:	andeq	r9, r2, r8, lsr r6
   29470:	andeq	r9, r2, r0, ror #11
   29474:	sub	sp, fp, #24
   29478:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2947c:	movw	r1, #53884	; 0xd27c
   29480:	movt	r1, #2
   29484:	b	295e8 <__assert_fail@plt+0x18138>
   29488:	movw	r1, #53565	; 0xd13d
   2948c:	mov	r0, #0
   29490:	mov	r2, #5
   29494:	movt	r1, #2
   29498:	bl	112a0 <dcgettext@plt>
   2949c:	ldr	r3, [r7]
   294a0:	mov	r2, r0
   294a4:	mov	r0, r8
   294a8:	mov	r1, #1
   294ac:	sub	sp, fp, #24
   294b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   294b4:	b	113fc <__fprintf_chk@plt>
   294b8:	movw	r1, #53581	; 0xd14d
   294bc:	mov	r0, #0
   294c0:	mov	r2, #5
   294c4:	movt	r1, #2
   294c8:	bl	112a0 <dcgettext@plt>
   294cc:	mov	r2, r0
   294d0:	ldr	r3, [r7]
   294d4:	ldr	r0, [r7, #4]
   294d8:	str	r0, [sp]
   294dc:	b	295cc <__assert_fail@plt+0x1811c>
   294e0:	movw	r1, #53604	; 0xd164
   294e4:	mov	r0, #0
   294e8:	mov	r2, #5
   294ec:	movt	r1, #2
   294f0:	bl	112a0 <dcgettext@plt>
   294f4:	mov	r2, r0
   294f8:	ldr	r3, [r7]
   294fc:	ldmib	r7, {r0, r1}
   29500:	stm	sp, {r0, r1}
   29504:	b	295cc <__assert_fail@plt+0x1811c>
   29508:	movw	r1, #53632	; 0xd180
   2950c:	mov	r0, #0
   29510:	mov	r2, #5
   29514:	movt	r1, #2
   29518:	bl	112a0 <dcgettext@plt>
   2951c:	ldr	r3, [r7]
   29520:	mov	r2, r0
   29524:	ldmib	r7, {r0, r1, r7}
   29528:	stm	sp, {r0, r1, r7}
   2952c:	b	295cc <__assert_fail@plt+0x1811c>
   29530:	movw	r1, #53664	; 0xd1a0
   29534:	mov	r0, #0
   29538:	mov	r2, #5
   2953c:	movt	r1, #2
   29540:	bl	112a0 <dcgettext@plt>
   29544:	ldr	r3, [r7]
   29548:	mov	r2, r0
   2954c:	ldmib	r7, {r0, r1, r6, r7}
   29550:	stm	sp, {r0, r1, r6, r7}
   29554:	b	295cc <__assert_fail@plt+0x1811c>
   29558:	movw	r1, #53700	; 0xd1c4
   2955c:	mov	r0, #0
   29560:	mov	r2, #5
   29564:	movt	r1, #2
   29568:	bl	112a0 <dcgettext@plt>
   2956c:	mov	r2, r0
   29570:	ldr	r3, [r7]
   29574:	ldmib	r7, {r0, r1, r6}
   29578:	ldr	r5, [r7, #16]
   2957c:	ldr	r7, [r7, #20]
   29580:	stm	sp, {r0, r1, r6}
   29584:	str	r5, [sp, #12]
   29588:	str	r7, [sp, #16]
   2958c:	b	295cc <__assert_fail@plt+0x1811c>
   29590:	movw	r1, #53740	; 0xd1ec
   29594:	mov	r0, #0
   29598:	mov	r2, #5
   2959c:	movt	r1, #2
   295a0:	bl	112a0 <dcgettext@plt>
   295a4:	mov	r2, r0
   295a8:	ldr	r3, [r7]
   295ac:	ldmib	r7, {r0, r1, r6}
   295b0:	ldr	r5, [r7, #16]
   295b4:	ldr	r4, [r7, #20]
   295b8:	ldr	r7, [r7, #24]
   295bc:	stm	sp, {r0, r1, r6}
   295c0:	str	r5, [sp, #12]
   295c4:	str	r4, [sp, #16]
   295c8:	str	r7, [sp, #20]
   295cc:	mov	r0, r8
   295d0:	mov	r1, #1
   295d4:	bl	113fc <__fprintf_chk@plt>
   295d8:	sub	sp, fp, #24
   295dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   295e0:	movw	r1, #53832	; 0xd248
   295e4:	movt	r1, #2
   295e8:	mov	r0, #0
   295ec:	mov	r2, #5
   295f0:	bl	112a0 <dcgettext@plt>
   295f4:	mov	ip, r0
   295f8:	ldr	r3, [r7]
   295fc:	ldr	r0, [r7, #4]
   29600:	ldr	r1, [r7, #8]
   29604:	ldr	r6, [r7, #12]
   29608:	ldr	r5, [r7, #16]
   2960c:	ldr	r4, [r7, #20]
   29610:	ldr	r2, [r7, #24]
   29614:	ldr	lr, [r7, #28]
   29618:	ldr	r7, [r7, #32]
   2961c:	stm	sp, {r0, r1, r6}
   29620:	str	r5, [sp, #12]
   29624:	str	r4, [sp, #16]
   29628:	str	r2, [sp, #20]
   2962c:	str	lr, [sp, #24]
   29630:	str	r7, [sp, #28]
   29634:	b	2967c <__assert_fail@plt+0x181cc>
   29638:	movw	r1, #53784	; 0xd218
   2963c:	mov	r0, #0
   29640:	mov	r2, #5
   29644:	movt	r1, #2
   29648:	bl	112a0 <dcgettext@plt>
   2964c:	mov	ip, r0
   29650:	ldr	r3, [r7]
   29654:	ldmib	r7, {r0, r1, r6}
   29658:	ldr	r5, [r7, #16]
   2965c:	ldr	r4, [r7, #20]
   29660:	ldr	r2, [r7, #24]
   29664:	ldr	r7, [r7, #28]
   29668:	stm	sp, {r0, r1, r6}
   2966c:	str	r5, [sp, #12]
   29670:	str	r4, [sp, #16]
   29674:	str	r2, [sp, #20]
   29678:	str	r7, [sp, #24]
   2967c:	mov	r0, r8
   29680:	mov	r1, #1
   29684:	mov	r2, ip
   29688:	bl	113fc <__fprintf_chk@plt>
   2968c:	sub	sp, fp, #24
   29690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29694:	push	{r4, sl, fp, lr}
   29698:	add	fp, sp, #8
   2969c:	sub	sp, sp, #8
   296a0:	ldr	ip, [fp, #8]
   296a4:	mov	lr, #0
   296a8:	ldr	r4, [ip, lr, lsl #2]
   296ac:	add	lr, lr, #1
   296b0:	cmp	r4, #0
   296b4:	bne	296a8 <__assert_fail@plt+0x181f8>
   296b8:	sub	r4, lr, #1
   296bc:	str	ip, [sp]
   296c0:	str	r4, [sp, #4]
   296c4:	bl	29358 <__assert_fail@plt+0x17ea8>
   296c8:	sub	sp, fp, #8
   296cc:	pop	{r4, sl, fp, pc}
   296d0:	push	{fp, lr}
   296d4:	mov	fp, sp
   296d8:	sub	sp, sp, #48	; 0x30
   296dc:	ldr	ip, [fp, #8]
   296e0:	ldr	lr, [ip]
   296e4:	cmp	lr, #0
   296e8:	str	lr, [sp, #8]
   296ec:	beq	29788 <__assert_fail@plt+0x182d8>
   296f0:	ldr	lr, [ip, #4]
   296f4:	cmp	lr, #0
   296f8:	str	lr, [sp, #12]
   296fc:	beq	29790 <__assert_fail@plt+0x182e0>
   29700:	ldr	lr, [ip, #8]
   29704:	cmp	lr, #0
   29708:	str	lr, [sp, #16]
   2970c:	beq	29798 <__assert_fail@plt+0x182e8>
   29710:	ldr	lr, [ip, #12]
   29714:	cmp	lr, #0
   29718:	str	lr, [sp, #20]
   2971c:	beq	297a0 <__assert_fail@plt+0x182f0>
   29720:	ldr	lr, [ip, #16]
   29724:	cmp	lr, #0
   29728:	str	lr, [sp, #24]
   2972c:	beq	297a8 <__assert_fail@plt+0x182f8>
   29730:	ldr	lr, [ip, #20]
   29734:	cmp	lr, #0
   29738:	str	lr, [sp, #28]
   2973c:	beq	297b0 <__assert_fail@plt+0x18300>
   29740:	ldr	lr, [ip, #24]
   29744:	cmp	lr, #0
   29748:	str	lr, [sp, #32]
   2974c:	beq	297b8 <__assert_fail@plt+0x18308>
   29750:	ldr	lr, [ip, #28]
   29754:	cmp	lr, #0
   29758:	str	lr, [sp, #36]	; 0x24
   2975c:	beq	297c0 <__assert_fail@plt+0x18310>
   29760:	ldr	lr, [ip, #32]
   29764:	cmp	lr, #0
   29768:	str	lr, [sp, #40]	; 0x28
   2976c:	beq	297c8 <__assert_fail@plt+0x18318>
   29770:	ldr	lr, [ip, #36]	; 0x24
   29774:	mov	ip, #10
   29778:	cmp	lr, #0
   2977c:	str	lr, [sp, #44]	; 0x2c
   29780:	movweq	ip, #9
   29784:	b	297cc <__assert_fail@plt+0x1831c>
   29788:	mov	ip, #0
   2978c:	b	297cc <__assert_fail@plt+0x1831c>
   29790:	mov	ip, #1
   29794:	b	297cc <__assert_fail@plt+0x1831c>
   29798:	mov	ip, #2
   2979c:	b	297cc <__assert_fail@plt+0x1831c>
   297a0:	mov	ip, #3
   297a4:	b	297cc <__assert_fail@plt+0x1831c>
   297a8:	mov	ip, #4
   297ac:	b	297cc <__assert_fail@plt+0x1831c>
   297b0:	mov	ip, #5
   297b4:	b	297cc <__assert_fail@plt+0x1831c>
   297b8:	mov	ip, #6
   297bc:	b	297cc <__assert_fail@plt+0x1831c>
   297c0:	mov	ip, #7
   297c4:	b	297cc <__assert_fail@plt+0x1831c>
   297c8:	mov	ip, #8
   297cc:	add	lr, sp, #8
   297d0:	str	ip, [sp, #4]
   297d4:	str	lr, [sp]
   297d8:	bl	29358 <__assert_fail@plt+0x17ea8>
   297dc:	mov	sp, fp
   297e0:	pop	{fp, pc}
   297e4:	push	{fp, lr}
   297e8:	mov	fp, sp
   297ec:	sub	sp, sp, #56	; 0x38
   297f0:	add	ip, fp, #8
   297f4:	str	ip, [sp, #12]
   297f8:	ldr	lr, [fp, #8]
   297fc:	cmp	lr, #0
   29800:	str	lr, [sp, #16]
   29804:	beq	298a0 <__assert_fail@plt+0x183f0>
   29808:	ldr	lr, [ip, #4]
   2980c:	cmp	lr, #0
   29810:	str	lr, [sp, #20]
   29814:	beq	298a8 <__assert_fail@plt+0x183f8>
   29818:	ldr	lr, [ip, #8]
   2981c:	cmp	lr, #0
   29820:	str	lr, [sp, #24]
   29824:	beq	298b0 <__assert_fail@plt+0x18400>
   29828:	ldr	lr, [ip, #12]
   2982c:	cmp	lr, #0
   29830:	str	lr, [sp, #28]
   29834:	beq	298b8 <__assert_fail@plt+0x18408>
   29838:	ldr	lr, [ip, #16]
   2983c:	cmp	lr, #0
   29840:	str	lr, [sp, #32]
   29844:	beq	298c0 <__assert_fail@plt+0x18410>
   29848:	ldr	lr, [ip, #20]
   2984c:	cmp	lr, #0
   29850:	str	lr, [sp, #36]	; 0x24
   29854:	beq	298c8 <__assert_fail@plt+0x18418>
   29858:	ldr	lr, [ip, #24]
   2985c:	cmp	lr, #0
   29860:	str	lr, [sp, #40]	; 0x28
   29864:	beq	298d0 <__assert_fail@plt+0x18420>
   29868:	ldr	lr, [ip, #28]
   2986c:	cmp	lr, #0
   29870:	str	lr, [sp, #44]	; 0x2c
   29874:	beq	298d8 <__assert_fail@plt+0x18428>
   29878:	ldr	lr, [ip, #32]
   2987c:	cmp	lr, #0
   29880:	str	lr, [sp, #48]	; 0x30
   29884:	beq	298e0 <__assert_fail@plt+0x18430>
   29888:	ldr	lr, [ip, #36]	; 0x24
   2988c:	mov	ip, #10
   29890:	cmp	lr, #0
   29894:	str	lr, [sp, #52]	; 0x34
   29898:	movweq	ip, #9
   2989c:	b	298e4 <__assert_fail@plt+0x18434>
   298a0:	mov	ip, #0
   298a4:	b	298e4 <__assert_fail@plt+0x18434>
   298a8:	mov	ip, #1
   298ac:	b	298e4 <__assert_fail@plt+0x18434>
   298b0:	mov	ip, #2
   298b4:	b	298e4 <__assert_fail@plt+0x18434>
   298b8:	mov	ip, #3
   298bc:	b	298e4 <__assert_fail@plt+0x18434>
   298c0:	mov	ip, #4
   298c4:	b	298e4 <__assert_fail@plt+0x18434>
   298c8:	mov	ip, #5
   298cc:	b	298e4 <__assert_fail@plt+0x18434>
   298d0:	mov	ip, #6
   298d4:	b	298e4 <__assert_fail@plt+0x18434>
   298d8:	mov	ip, #7
   298dc:	b	298e4 <__assert_fail@plt+0x18434>
   298e0:	mov	ip, #8
   298e4:	add	lr, sp, #16
   298e8:	str	ip, [sp, #4]
   298ec:	str	lr, [sp]
   298f0:	bl	29358 <__assert_fail@plt+0x17ea8>
   298f4:	mov	sp, fp
   298f8:	pop	{fp, pc}
   298fc:	push	{fp, lr}
   29900:	mov	fp, sp
   29904:	movw	r0, #57796	; 0xe1c4
   29908:	movt	r0, #3
   2990c:	ldr	r1, [r0]
   29910:	movw	r0, #51111	; 0xc7a7
   29914:	movt	r0, #2
   29918:	bl	111bc <fputs_unlocked@plt>
   2991c:	movw	r1, #53944	; 0xd2b8
   29920:	mov	r0, #0
   29924:	mov	r2, #5
   29928:	movt	r1, #2
   2992c:	bl	112a0 <dcgettext@plt>
   29930:	movw	r2, #53964	; 0xd2cc
   29934:	mov	r1, r0
   29938:	mov	r0, #1
   2993c:	movt	r2, #2
   29940:	bl	113e4 <__printf_chk@plt>
   29944:	movw	r1, #53986	; 0xd2e2
   29948:	mov	r0, #0
   2994c:	mov	r2, #5
   29950:	movt	r1, #2
   29954:	bl	112a0 <dcgettext@plt>
   29958:	movw	r2, #51434	; 0xc8ea
   2995c:	movw	r3, #51727	; 0xca0f
   29960:	mov	r1, r0
   29964:	mov	r0, #1
   29968:	movt	r2, #2
   2996c:	movt	r3, #2
   29970:	bl	113e4 <__printf_chk@plt>
   29974:	movw	r1, #54006	; 0xd2f6
   29978:	mov	r0, #0
   2997c:	mov	r2, #5
   29980:	movt	r1, #2
   29984:	bl	112a0 <dcgettext@plt>
   29988:	movw	r2, #54045	; 0xd31d
   2998c:	mov	r1, r0
   29990:	mov	r0, #1
   29994:	movt	r2, #2
   29998:	pop	{fp, lr}
   2999c:	b	113e4 <__printf_chk@plt>
   299a0:	push	{r4, r5, r6, sl, fp, lr}
   299a4:	add	fp, sp, #16
   299a8:	mov	r4, r2
   299ac:	mov	r5, r1
   299b0:	mov	r6, r0
   299b4:	bl	2bcec <__assert_fail@plt+0x1a83c>
   299b8:	cmp	r0, #0
   299bc:	popne	{r4, r5, r6, sl, fp, pc}
   299c0:	cmp	r6, #0
   299c4:	beq	299d8 <__assert_fail@plt+0x18528>
   299c8:	cmp	r5, #0
   299cc:	cmpne	r4, #0
   299d0:	bne	299d8 <__assert_fail@plt+0x18528>
   299d4:	pop	{r4, r5, r6, sl, fp, pc}
   299d8:	bl	29f54 <__assert_fail@plt+0x18aa4>
   299dc:	push	{r4, r5, r6, sl, fp, lr}
   299e0:	add	fp, sp, #16
   299e4:	mov	r4, r2
   299e8:	mov	r5, r1
   299ec:	mov	r6, r0
   299f0:	bl	2bcec <__assert_fail@plt+0x1a83c>
   299f4:	cmp	r0, #0
   299f8:	popne	{r4, r5, r6, sl, fp, pc}
   299fc:	cmp	r6, #0
   29a00:	beq	29a14 <__assert_fail@plt+0x18564>
   29a04:	cmp	r5, #0
   29a08:	cmpne	r4, #0
   29a0c:	bne	29a14 <__assert_fail@plt+0x18564>
   29a10:	pop	{r4, r5, r6, sl, fp, pc}
   29a14:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29a18:	push	{fp, lr}
   29a1c:	mov	fp, sp
   29a20:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29a24:	cmp	r0, #0
   29a28:	popne	{fp, pc}
   29a2c:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29a30:	push	{fp, lr}
   29a34:	mov	fp, sp
   29a38:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29a3c:	cmp	r0, #0
   29a40:	popne	{fp, pc}
   29a44:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29a48:	push	{fp, lr}
   29a4c:	mov	fp, sp
   29a50:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29a54:	cmp	r0, #0
   29a58:	popne	{fp, pc}
   29a5c:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29a60:	push	{r4, r5, fp, lr}
   29a64:	add	fp, sp, #8
   29a68:	mov	r4, r1
   29a6c:	mov	r5, r0
   29a70:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   29a74:	cmp	r0, #0
   29a78:	popne	{r4, r5, fp, pc}
   29a7c:	cmp	r5, #0
   29a80:	beq	29a90 <__assert_fail@plt+0x185e0>
   29a84:	cmp	r4, #0
   29a88:	bne	29a90 <__assert_fail@plt+0x185e0>
   29a8c:	pop	{r4, r5, fp, pc}
   29a90:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29a94:	push	{fp, lr}
   29a98:	mov	fp, sp
   29a9c:	cmp	r1, #0
   29aa0:	orreq	r1, r1, #1
   29aa4:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   29aa8:	cmp	r0, #0
   29aac:	popne	{fp, pc}
   29ab0:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29ab4:	push	{fp, lr}
   29ab8:	mov	fp, sp
   29abc:	clz	r3, r2
   29ac0:	lsr	ip, r3, #5
   29ac4:	clz	r3, r1
   29ac8:	lsr	r3, r3, #5
   29acc:	orrs	r3, r3, ip
   29ad0:	movwne	r1, #1
   29ad4:	movwne	r2, #1
   29ad8:	bl	2bcec <__assert_fail@plt+0x1a83c>
   29adc:	cmp	r0, #0
   29ae0:	popne	{fp, pc}
   29ae4:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29ae8:	push	{fp, lr}
   29aec:	mov	fp, sp
   29af0:	mov	r2, r1
   29af4:	mov	r1, r0
   29af8:	mov	r0, #0
   29afc:	bl	2bcec <__assert_fail@plt+0x1a83c>
   29b00:	cmp	r0, #0
   29b04:	popne	{fp, pc}
   29b08:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29b0c:	push	{fp, lr}
   29b10:	mov	fp, sp
   29b14:	mov	r2, r1
   29b18:	mov	r1, r0
   29b1c:	clz	r0, r2
   29b20:	clz	r3, r1
   29b24:	lsr	r0, r0, #5
   29b28:	lsr	r3, r3, #5
   29b2c:	orrs	r0, r3, r0
   29b30:	mov	r0, #0
   29b34:	movwne	r1, #1
   29b38:	movwne	r2, #1
   29b3c:	bl	2bcec <__assert_fail@plt+0x1a83c>
   29b40:	cmp	r0, #0
   29b44:	popne	{fp, pc}
   29b48:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29b4c:	push	{r4, r5, r6, sl, fp, lr}
   29b50:	add	fp, sp, #16
   29b54:	ldr	r5, [r1]
   29b58:	mov	r4, r1
   29b5c:	mov	r6, r0
   29b60:	cmp	r0, #0
   29b64:	beq	29b7c <__assert_fail@plt+0x186cc>
   29b68:	mov	r0, #1
   29b6c:	add	r0, r0, r5, lsr #1
   29b70:	adds	r5, r5, r0
   29b74:	bcc	29b84 <__assert_fail@plt+0x186d4>
   29b78:	b	29bc0 <__assert_fail@plt+0x18710>
   29b7c:	cmp	r5, #0
   29b80:	movweq	r5, #64	; 0x40
   29b84:	mov	r0, r6
   29b88:	mov	r1, r5
   29b8c:	mov	r2, #1
   29b90:	bl	2bcec <__assert_fail@plt+0x1a83c>
   29b94:	cmp	r5, #0
   29b98:	mov	r1, r5
   29b9c:	movwne	r1, #1
   29ba0:	cmp	r0, #0
   29ba4:	bne	29bb8 <__assert_fail@plt+0x18708>
   29ba8:	clz	r2, r6
   29bac:	lsr	r2, r2, #5
   29bb0:	orrs	r1, r2, r1
   29bb4:	bne	29bc0 <__assert_fail@plt+0x18710>
   29bb8:	str	r5, [r4]
   29bbc:	pop	{r4, r5, r6, sl, fp, pc}
   29bc0:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29bc4:	push	{r4, r5, r6, r7, fp, lr}
   29bc8:	add	fp, sp, #16
   29bcc:	ldr	r5, [r1]
   29bd0:	mov	r6, r2
   29bd4:	mov	r4, r1
   29bd8:	mov	r7, r0
   29bdc:	cmp	r0, #0
   29be0:	beq	29bf8 <__assert_fail@plt+0x18748>
   29be4:	mov	r0, #1
   29be8:	add	r0, r0, r5, lsr #1
   29bec:	adds	r5, r5, r0
   29bf0:	bcc	29c10 <__assert_fail@plt+0x18760>
   29bf4:	b	29c44 <__assert_fail@plt+0x18794>
   29bf8:	cmp	r5, #0
   29bfc:	bne	29c10 <__assert_fail@plt+0x18760>
   29c00:	mov	r0, #64	; 0x40
   29c04:	cmp	r6, #64	; 0x40
   29c08:	udiv	r5, r0, r6
   29c0c:	addhi	r5, r5, #1
   29c10:	mov	r0, r7
   29c14:	mov	r1, r5
   29c18:	mov	r2, r6
   29c1c:	bl	2bcec <__assert_fail@plt+0x1a83c>
   29c20:	cmp	r0, #0
   29c24:	bne	29c3c <__assert_fail@plt+0x1878c>
   29c28:	cmp	r7, #0
   29c2c:	beq	29c44 <__assert_fail@plt+0x18794>
   29c30:	cmp	r6, #0
   29c34:	cmpne	r5, #0
   29c38:	bne	29c44 <__assert_fail@plt+0x18794>
   29c3c:	str	r5, [r4]
   29c40:	pop	{r4, r5, r6, r7, fp, pc}
   29c44:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29c48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29c4c:	add	fp, sp, #24
   29c50:	mov	r8, r1
   29c54:	ldr	r1, [r1]
   29c58:	mov	r5, r0
   29c5c:	add	r0, r1, r1, asr #1
   29c60:	cmp	r0, r1
   29c64:	mvnvs	r0, #-2147483648	; 0x80000000
   29c68:	cmp	r0, r3
   29c6c:	mov	r7, r0
   29c70:	movgt	r7, r3
   29c74:	cmn	r3, #1
   29c78:	movle	r7, r0
   29c7c:	ldr	r0, [fp, #8]
   29c80:	cmn	r0, #1
   29c84:	ble	29cac <__assert_fail@plt+0x187fc>
   29c88:	cmp	r0, #0
   29c8c:	beq	29d00 <__assert_fail@plt+0x18850>
   29c90:	cmn	r7, #1
   29c94:	ble	29cd4 <__assert_fail@plt+0x18824>
   29c98:	mvn	r4, #-2147483648	; 0x80000000
   29c9c:	udiv	r6, r4, r0
   29ca0:	cmp	r6, r7
   29ca4:	bge	29d00 <__assert_fail@plt+0x18850>
   29ca8:	b	29d10 <__assert_fail@plt+0x18860>
   29cac:	cmn	r7, #1
   29cb0:	ble	29cf0 <__assert_fail@plt+0x18840>
   29cb4:	cmn	r0, #1
   29cb8:	beq	29d00 <__assert_fail@plt+0x18850>
   29cbc:	mov	r6, #-2147483648	; 0x80000000
   29cc0:	mvn	r4, #-2147483648	; 0x80000000
   29cc4:	sdiv	r6, r6, r0
   29cc8:	cmp	r6, r7
   29ccc:	bge	29d00 <__assert_fail@plt+0x18850>
   29cd0:	b	29d10 <__assert_fail@plt+0x18860>
   29cd4:	beq	29d00 <__assert_fail@plt+0x18850>
   29cd8:	mov	r6, #-2147483648	; 0x80000000
   29cdc:	mvn	r4, #-2147483648	; 0x80000000
   29ce0:	sdiv	r6, r6, r7
   29ce4:	cmp	r6, r0
   29ce8:	bge	29d00 <__assert_fail@plt+0x18850>
   29cec:	b	29d10 <__assert_fail@plt+0x18860>
   29cf0:	mvn	r4, #-2147483648	; 0x80000000
   29cf4:	sdiv	r6, r4, r0
   29cf8:	cmp	r7, r6
   29cfc:	blt	29d10 <__assert_fail@plt+0x18860>
   29d00:	mul	r6, r7, r0
   29d04:	mov	r4, #64	; 0x40
   29d08:	cmp	r6, #63	; 0x3f
   29d0c:	bgt	29d18 <__assert_fail@plt+0x18868>
   29d10:	sdiv	r7, r4, r0
   29d14:	mul	r6, r7, r0
   29d18:	cmp	r5, #0
   29d1c:	moveq	r4, #0
   29d20:	streq	r4, [r8]
   29d24:	sub	r4, r7, r1
   29d28:	cmp	r4, r2
   29d2c:	bge	29dd8 <__assert_fail@plt+0x18928>
   29d30:	add	r7, r1, r2
   29d34:	mov	r6, #0
   29d38:	mov	r2, #0
   29d3c:	cmp	r7, r3
   29d40:	movwgt	r6, #1
   29d44:	cmn	r3, #1
   29d48:	movwgt	r2, #1
   29d4c:	cmp	r7, r1
   29d50:	bvs	29e0c <__assert_fail@plt+0x1895c>
   29d54:	ands	r1, r2, r6
   29d58:	bne	29e0c <__assert_fail@plt+0x1895c>
   29d5c:	cmn	r0, #1
   29d60:	ble	29d88 <__assert_fail@plt+0x188d8>
   29d64:	cmp	r0, #0
   29d68:	beq	29dd4 <__assert_fail@plt+0x18924>
   29d6c:	cmn	r7, #1
   29d70:	ble	29dac <__assert_fail@plt+0x188fc>
   29d74:	mvn	r1, #-2147483648	; 0x80000000
   29d78:	udiv	r1, r1, r0
   29d7c:	cmp	r1, r7
   29d80:	bge	29dd4 <__assert_fail@plt+0x18924>
   29d84:	b	29e0c <__assert_fail@plt+0x1895c>
   29d88:	cmn	r7, #1
   29d8c:	ble	29dc4 <__assert_fail@plt+0x18914>
   29d90:	cmn	r0, #1
   29d94:	beq	29dd4 <__assert_fail@plt+0x18924>
   29d98:	mov	r1, #-2147483648	; 0x80000000
   29d9c:	sdiv	r1, r1, r0
   29da0:	cmp	r1, r7
   29da4:	bge	29dd4 <__assert_fail@plt+0x18924>
   29da8:	b	29e0c <__assert_fail@plt+0x1895c>
   29dac:	beq	29dd4 <__assert_fail@plt+0x18924>
   29db0:	mov	r1, #-2147483648	; 0x80000000
   29db4:	sdiv	r1, r1, r7
   29db8:	cmp	r1, r0
   29dbc:	bge	29dd4 <__assert_fail@plt+0x18924>
   29dc0:	b	29e0c <__assert_fail@plt+0x1895c>
   29dc4:	mvn	r1, #-2147483648	; 0x80000000
   29dc8:	sdiv	r1, r1, r0
   29dcc:	cmp	r7, r1
   29dd0:	blt	29e0c <__assert_fail@plt+0x1895c>
   29dd4:	mul	r6, r7, r0
   29dd8:	mov	r0, r5
   29ddc:	mov	r1, r6
   29de0:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   29de4:	cmp	r6, #0
   29de8:	movwne	r6, #1
   29dec:	cmp	r0, #0
   29df0:	bne	29e04 <__assert_fail@plt+0x18954>
   29df4:	clz	r1, r5
   29df8:	lsr	r1, r1, #5
   29dfc:	orrs	r1, r1, r6
   29e00:	bne	29e0c <__assert_fail@plt+0x1895c>
   29e04:	str	r7, [r8]
   29e08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29e0c:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29e10:	push	{fp, lr}
   29e14:	mov	fp, sp
   29e18:	mov	r1, #1
   29e1c:	bl	2ba08 <__assert_fail@plt+0x1a558>
   29e20:	cmp	r0, #0
   29e24:	popne	{fp, pc}
   29e28:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29e2c:	push	{fp, lr}
   29e30:	mov	fp, sp
   29e34:	bl	2ba08 <__assert_fail@plt+0x1a558>
   29e38:	cmp	r0, #0
   29e3c:	popne	{fp, pc}
   29e40:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29e44:	push	{fp, lr}
   29e48:	mov	fp, sp
   29e4c:	mov	r1, #1
   29e50:	bl	2ba08 <__assert_fail@plt+0x1a558>
   29e54:	cmp	r0, #0
   29e58:	popne	{fp, pc}
   29e5c:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29e60:	push	{fp, lr}
   29e64:	mov	fp, sp
   29e68:	bl	2ba08 <__assert_fail@plt+0x1a558>
   29e6c:	cmp	r0, #0
   29e70:	popne	{fp, pc}
   29e74:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29e78:	push	{r4, r5, fp, lr}
   29e7c:	add	fp, sp, #8
   29e80:	mov	r5, r0
   29e84:	mov	r0, r1
   29e88:	mov	r4, r1
   29e8c:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29e90:	cmp	r0, #0
   29e94:	beq	29ea8 <__assert_fail@plt+0x189f8>
   29e98:	mov	r1, r5
   29e9c:	mov	r2, r4
   29ea0:	pop	{r4, r5, fp, lr}
   29ea4:	b	11258 <memcpy@plt>
   29ea8:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29eac:	push	{r4, r5, fp, lr}
   29eb0:	add	fp, sp, #8
   29eb4:	mov	r5, r0
   29eb8:	mov	r0, r1
   29ebc:	mov	r4, r1
   29ec0:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29ec4:	cmp	r0, #0
   29ec8:	beq	29edc <__assert_fail@plt+0x18a2c>
   29ecc:	mov	r1, r5
   29ed0:	mov	r2, r4
   29ed4:	pop	{r4, r5, fp, lr}
   29ed8:	b	11258 <memcpy@plt>
   29edc:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29ee0:	push	{r4, r5, fp, lr}
   29ee4:	add	fp, sp, #8
   29ee8:	mov	r5, r0
   29eec:	add	r0, r1, #1
   29ef0:	mov	r4, r1
   29ef4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29ef8:	cmp	r0, #0
   29efc:	beq	29f18 <__assert_fail@plt+0x18a68>
   29f00:	mov	r1, #0
   29f04:	mov	r2, r4
   29f08:	strb	r1, [r0, r4]
   29f0c:	mov	r1, r5
   29f10:	pop	{r4, r5, fp, lr}
   29f14:	b	11258 <memcpy@plt>
   29f18:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29f1c:	push	{r4, r5, fp, lr}
   29f20:	add	fp, sp, #8
   29f24:	mov	r4, r0
   29f28:	bl	11390 <strlen@plt>
   29f2c:	add	r5, r0, #1
   29f30:	mov	r0, r5
   29f34:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   29f38:	cmp	r0, #0
   29f3c:	beq	29f50 <__assert_fail@plt+0x18aa0>
   29f40:	mov	r1, r4
   29f44:	mov	r2, r5
   29f48:	pop	{r4, r5, fp, lr}
   29f4c:	b	11258 <memcpy@plt>
   29f50:	bl	29f54 <__assert_fail@plt+0x18aa4>
   29f54:	push	{fp, lr}
   29f58:	mov	fp, sp
   29f5c:	movw	r0, #57700	; 0xe164
   29f60:	movw	r1, #54121	; 0xd369
   29f64:	mov	r2, #5
   29f68:	movt	r0, #3
   29f6c:	movt	r1, #2
   29f70:	ldr	r4, [r0]
   29f74:	mov	r0, #0
   29f78:	bl	112a0 <dcgettext@plt>
   29f7c:	movw	r2, #51194	; 0xc7fa
   29f80:	mov	r3, r0
   29f84:	mov	r0, r4
   29f88:	mov	r1, #0
   29f8c:	movt	r2, #2
   29f90:	bl	1130c <error@plt>
   29f94:	bl	114a4 <abort@plt>
   29f98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29f9c:	add	fp, sp, #24
   29fa0:	sub	sp, sp, #16
   29fa4:	mov	r8, r0
   29fa8:	ldr	r0, [fp, #16]
   29fac:	mov	r7, r3
   29fb0:	mov	r4, r2
   29fb4:	mov	r2, r1
   29fb8:	add	r3, sp, #8
   29fbc:	mov	r1, #0
   29fc0:	str	r0, [sp]
   29fc4:	mov	r0, r8
   29fc8:	bl	2a0a8 <__assert_fail@plt+0x18bf8>
   29fcc:	cmp	r0, #0
   29fd0:	bne	2a07c <__assert_fail@plt+0x18bcc>
   29fd4:	ldr	r6, [sp, #8]
   29fd8:	ldr	r5, [sp, #12]
   29fdc:	subs	r0, r6, r4
   29fe0:	sbcs	r0, r5, r7
   29fe4:	blt	2a008 <__assert_fail@plt+0x18b58>
   29fe8:	ldr	r1, [fp, #8]
   29fec:	ldr	r0, [fp, #12]
   29ff0:	subs	r1, r1, r6
   29ff4:	sbcs	r0, r0, r5
   29ff8:	movge	r0, r6
   29ffc:	movge	r1, r5
   2a000:	subge	sp, fp, #24
   2a004:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a008:	subs	r0, r6, #1073741824	; 0x40000000
   2a00c:	sbcs	r0, r5, #0
   2a010:	blt	2a020 <__assert_fail@plt+0x18b70>
   2a014:	bl	113a8 <__errno_location@plt>
   2a018:	mov	r1, #75	; 0x4b
   2a01c:	b	2a03c <__assert_fail@plt+0x18b8c>
   2a020:	bl	113a8 <__errno_location@plt>
   2a024:	mvn	r2, #1073741824	; 0x40000000
   2a028:	mvn	r1, #0
   2a02c:	subs	r2, r2, r6
   2a030:	sbcs	r1, r1, r5
   2a034:	movlt	r1, #34	; 0x22
   2a038:	movge	r1, #75	; 0x4b
   2a03c:	str	r1, [r0]
   2a040:	ldr	r6, [r0]
   2a044:	ldr	r4, [fp, #24]
   2a048:	ldr	r5, [fp, #20]
   2a04c:	mov	r0, r8
   2a050:	bl	14cc4 <__assert_fail@plt+0x3814>
   2a054:	subs	r1, r6, #22
   2a058:	movw	r2, #52507	; 0xcd1b
   2a05c:	str	r0, [sp]
   2a060:	mov	r3, r5
   2a064:	movne	r1, r6
   2a068:	cmp	r4, #0
   2a06c:	movt	r2, #2
   2a070:	movweq	r4, #1
   2a074:	mov	r0, r4
   2a078:	bl	1130c <error@plt>
   2a07c:	cmp	r0, #1
   2a080:	beq	2a014 <__assert_fail@plt+0x18b64>
   2a084:	cmp	r0, #3
   2a088:	bne	2a098 <__assert_fail@plt+0x18be8>
   2a08c:	bl	113a8 <__errno_location@plt>
   2a090:	mov	r1, #0
   2a094:	b	2a03c <__assert_fail@plt+0x18b8c>
   2a098:	bl	113a8 <__errno_location@plt>
   2a09c:	b	2a040 <__assert_fail@plt+0x18b90>
   2a0a0:	mov	r1, #10
   2a0a4:	b	29f98 <__assert_fail@plt+0x18ae8>
   2a0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a0ac:	add	fp, sp, #28
   2a0b0:	sub	sp, sp, #36	; 0x24
   2a0b4:	cmp	r2, #37	; 0x25
   2a0b8:	bcs	2b9e8 <__assert_fail@plt+0x1a538>
   2a0bc:	ldr	r8, [fp, #8]
   2a0c0:	mov	r9, r3
   2a0c4:	mov	r6, r2
   2a0c8:	mov	r7, r1
   2a0cc:	mov	r4, r0
   2a0d0:	bl	113a8 <__errno_location@plt>
   2a0d4:	cmp	r7, #0
   2a0d8:	add	sl, sp, #32
   2a0dc:	mov	r5, r0
   2a0e0:	mov	r0, #0
   2a0e4:	mov	r2, r6
   2a0e8:	mov	r3, #0
   2a0ec:	movne	sl, r7
   2a0f0:	str	r0, [r5]
   2a0f4:	mov	r0, r4
   2a0f8:	mov	r1, sl
   2a0fc:	bl	11468 <__strtoll_internal@plt>
   2a100:	mov	r7, r1
   2a104:	ldr	r1, [sl]
   2a108:	cmp	r1, r4
   2a10c:	beq	2a148 <__assert_fail@plt+0x18c98>
   2a110:	mov	r6, r0
   2a114:	ldr	r0, [r5]
   2a118:	cmp	r0, #0
   2a11c:	beq	2a2d4 <__assert_fail@plt+0x18e24>
   2a120:	mov	r5, #4
   2a124:	cmp	r0, #34	; 0x22
   2a128:	bne	2a52c <__assert_fail@plt+0x1907c>
   2a12c:	mov	r5, #1
   2a130:	cmp	r8, #0
   2a134:	beq	2a2e0 <__assert_fail@plt+0x18e30>
   2a138:	ldrb	r4, [r1]
   2a13c:	cmp	r4, #0
   2a140:	bne	2a190 <__assert_fail@plt+0x18ce0>
   2a144:	b	2a2e0 <__assert_fail@plt+0x18e30>
   2a148:	mov	r5, #4
   2a14c:	cmp	r8, #0
   2a150:	beq	2a52c <__assert_fail@plt+0x1907c>
   2a154:	mov	r6, r1
   2a158:	ldrb	r1, [r4]
   2a15c:	cmp	r1, #0
   2a160:	beq	2a52c <__assert_fail@plt+0x1907c>
   2a164:	mov	r0, r8
   2a168:	bl	1139c <strchr@plt>
   2a16c:	cmp	r0, #0
   2a170:	beq	2a52c <__assert_fail@plt+0x1907c>
   2a174:	mov	r1, r6
   2a178:	mov	r5, #0
   2a17c:	mov	r6, #1
   2a180:	mov	r7, #0
   2a184:	ldrb	r4, [r1]
   2a188:	cmp	r4, #0
   2a18c:	beq	2a2e0 <__assert_fail@plt+0x18e30>
   2a190:	str	r1, [sp, #20]
   2a194:	mov	r0, r8
   2a198:	mov	r1, r4
   2a19c:	bl	1139c <strchr@plt>
   2a1a0:	cmp	r0, #0
   2a1a4:	beq	2a524 <__assert_fail@plt+0x19074>
   2a1a8:	sub	r0, r4, #69	; 0x45
   2a1ac:	mov	r1, #1
   2a1b0:	mov	r3, #0
   2a1b4:	mov	r2, #1024	; 0x400
   2a1b8:	cmp	r0, #47	; 0x2f
   2a1bc:	str	r1, [sp, #16]
   2a1c0:	bhi	2a2f8 <__assert_fail@plt+0x18e48>
   2a1c4:	add	r1, pc, #0
   2a1c8:	ldr	pc, [r1, r0, lsl #2]
   2a1cc:	andeq	sl, r2, ip, lsl #5
   2a1d0:	strdeq	sl, [r2], -r8
   2a1d4:	andeq	sl, r2, ip, lsl #5
   2a1d8:	strdeq	sl, [r2], -r8
   2a1dc:	strdeq	sl, [r2], -r8
   2a1e0:	strdeq	sl, [r2], -r8
   2a1e4:	andeq	sl, r2, ip, lsl #5
   2a1e8:	strdeq	sl, [r2], -r8
   2a1ec:	andeq	sl, r2, ip, lsl #5
   2a1f0:	strdeq	sl, [r2], -r8
   2a1f4:	strdeq	sl, [r2], -r8
   2a1f8:	andeq	sl, r2, ip, lsl #5
   2a1fc:	strdeq	sl, [r2], -r8
   2a200:	strdeq	sl, [r2], -r8
   2a204:	strdeq	sl, [r2], -r8
   2a208:	andeq	sl, r2, ip, lsl #5
   2a20c:	strdeq	sl, [r2], -r8
   2a210:	strdeq	sl, [r2], -r8
   2a214:	strdeq	sl, [r2], -r8
   2a218:	strdeq	sl, [r2], -r8
   2a21c:	andeq	sl, r2, ip, lsl #5
   2a220:	andeq	sl, r2, ip, lsl #5
   2a224:	strdeq	sl, [r2], -r8
   2a228:	strdeq	sl, [r2], -r8
   2a22c:	strdeq	sl, [r2], -r8
   2a230:	strdeq	sl, [r2], -r8
   2a234:	strdeq	sl, [r2], -r8
   2a238:	strdeq	sl, [r2], -r8
   2a23c:	strdeq	sl, [r2], -r8
   2a240:	strdeq	sl, [r2], -r8
   2a244:	strdeq	sl, [r2], -r8
   2a248:	strdeq	sl, [r2], -r8
   2a24c:	strdeq	sl, [r2], -r8
   2a250:	strdeq	sl, [r2], -r8
   2a254:	andeq	sl, r2, ip, lsl #5
   2a258:	strdeq	sl, [r2], -r8
   2a25c:	strdeq	sl, [r2], -r8
   2a260:	strdeq	sl, [r2], -r8
   2a264:	andeq	sl, r2, ip, lsl #5
   2a268:	strdeq	sl, [r2], -r8
   2a26c:	andeq	sl, r2, ip, lsl #5
   2a270:	strdeq	sl, [r2], -r8
   2a274:	strdeq	sl, [r2], -r8
   2a278:	strdeq	sl, [r2], -r8
   2a27c:	strdeq	sl, [r2], -r8
   2a280:	strdeq	sl, [r2], -r8
   2a284:	strdeq	sl, [r2], -r8
   2a288:	andeq	sl, r2, ip, lsl #5
   2a28c:	mov	r0, r8
   2a290:	mov	r1, #48	; 0x30
   2a294:	bl	1139c <strchr@plt>
   2a298:	cmp	r0, #0
   2a29c:	beq	2a2f0 <__assert_fail@plt+0x18e40>
   2a2a0:	ldr	r1, [sp, #20]
   2a2a4:	ldrb	r0, [r1, #1]
   2a2a8:	cmp	r0, #66	; 0x42
   2a2ac:	cmpne	r0, #68	; 0x44
   2a2b0:	bne	2a42c <__assert_fail@plt+0x18f7c>
   2a2b4:	mov	r0, #2
   2a2b8:	mov	r2, #1000	; 0x3e8
   2a2bc:	mov	r3, #0
   2a2c0:	str	r0, [sp, #16]
   2a2c4:	sub	r0, r4, #66	; 0x42
   2a2c8:	cmp	r0, #53	; 0x35
   2a2cc:	bls	2a304 <__assert_fail@plt+0x18e54>
   2a2d0:	b	2a524 <__assert_fail@plt+0x19074>
   2a2d4:	mov	r5, r0
   2a2d8:	cmp	r8, #0
   2a2dc:	bne	2a138 <__assert_fail@plt+0x18c88>
   2a2e0:	strd	r6, [r9]
   2a2e4:	mov	r0, r5
   2a2e8:	sub	sp, fp, #28
   2a2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2f0:	mov	r3, #0
   2a2f4:	mov	r2, #1024	; 0x400
   2a2f8:	sub	r0, r4, #66	; 0x42
   2a2fc:	cmp	r0, #53	; 0x35
   2a300:	bhi	2a524 <__assert_fail@plt+0x19074>
   2a304:	add	r1, pc, #8
   2a308:	str	r3, [sp, #28]
   2a30c:	str	r2, [sp, #24]
   2a310:	ldr	pc, [r1, r0, lsl #2]
   2a314:	andeq	sl, r2, ip, ror r5
   2a318:	andeq	sl, r2, r4, lsr #10
   2a31c:	andeq	sl, r2, r4, lsr #10
   2a320:	muleq	r2, r0, r5
   2a324:	andeq	sl, r2, r4, lsr #10
   2a328:	andeq	sl, r2, ip, ror #7
   2a32c:	andeq	sl, r2, r4, lsr #10
   2a330:	andeq	sl, r2, r4, lsr #10
   2a334:	andeq	sl, r2, r4, lsr #10
   2a338:	andeq	sl, r2, r0, ror #8
   2a33c:	andeq	sl, r2, r4, lsr #10
   2a340:	muleq	r2, r0, r4
   2a344:	andeq	sl, r2, r4, lsr #10
   2a348:	andeq	sl, r2, r4, lsr #10
   2a34c:	ldrdeq	sl, [r2], -r4
   2a350:	andeq	sl, r2, r4, lsr #10
   2a354:	andeq	sl, r2, r4, lsr #10
   2a358:	andeq	sl, r2, r4, lsr #10
   2a35c:	ldrdeq	sl, [r2], -r0
   2a360:	andeq	sl, r2, r4, lsr #10
   2a364:	andeq	sl, r2, r4, lsr #10
   2a368:	andeq	sl, r2, r4, lsr #10
   2a36c:	andeq	sl, r2, r4, lsr #10
   2a370:	andeq	sl, r2, r8, lsl r6
   2a374:	andeq	sl, r2, r8, lsr r5
   2a378:	andeq	sl, r2, r4, lsr #10
   2a37c:	andeq	sl, r2, r4, lsr #10
   2a380:	andeq	sl, r2, r4, lsr #10
   2a384:	andeq	sl, r2, r4, lsr #10
   2a388:	andeq	sl, r2, r4, lsr #10
   2a38c:	andeq	sl, r2, r4, lsr #10
   2a390:	andeq	sl, r2, r4, lsr #10
   2a394:	andeq	sl, r2, ip, asr r6
   2a398:	ldrdeq	fp, [r2], -r4
   2a39c:	andeq	sl, r2, r4, lsr #10
   2a3a0:	andeq	sl, r2, r4, lsr #10
   2a3a4:	andeq	sl, r2, r4, lsr #10
   2a3a8:	andeq	sl, r2, ip, ror #7
   2a3ac:	andeq	sl, r2, r4, lsr #10
   2a3b0:	andeq	sl, r2, r4, lsr #10
   2a3b4:	andeq	sl, r2, r4, lsr #10
   2a3b8:	andeq	sl, r2, r0, ror #8
   2a3bc:	andeq	sl, r2, r4, lsr #10
   2a3c0:	muleq	r2, r0, r4
   2a3c4:	andeq	sl, r2, r4, lsr #10
   2a3c8:	andeq	sl, r2, r4, lsr #10
   2a3cc:	andeq	sl, r2, r4, lsr #10
   2a3d0:	andeq	sl, r2, r4, lsr #10
   2a3d4:	andeq	sl, r2, r4, lsr #10
   2a3d8:	andeq	sl, r2, r4, lsr #10
   2a3dc:	ldrdeq	sl, [r2], -r0
   2a3e0:	andeq	sl, r2, r4, lsr #10
   2a3e4:	andeq	sl, r2, r4, lsr #10
   2a3e8:	andeq	sl, r2, r0, ror r6
   2a3ec:	cmn	r7, #1
   2a3f0:	str	r9, [sp, #12]
   2a3f4:	ble	2a684 <__assert_fail@plt+0x191d4>
   2a3f8:	ldr	r3, [sp, #28]
   2a3fc:	mvn	r0, #0
   2a400:	mvn	r1, #-2147483648	; 0x80000000
   2a404:	mvn	r8, #0
   2a408:	mvn	r9, #-2147483648	; 0x80000000
   2a40c:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a410:	ldr	r2, [sp, #24]
   2a414:	ldr	r3, [sp, #28]
   2a418:	subs	r0, r0, r6
   2a41c:	mov	r4, #1
   2a420:	sbcs	r0, r1, r7
   2a424:	bge	2a6c4 <__assert_fail@plt+0x19214>
   2a428:	b	2a6dc <__assert_fail@plt+0x1922c>
   2a42c:	cmp	r0, #105	; 0x69
   2a430:	mov	r3, #0
   2a434:	bne	2a514 <__assert_fail@plt+0x19064>
   2a438:	ldrb	r0, [r1, #2]
   2a43c:	mov	r1, #1
   2a440:	mov	r2, #1024	; 0x400
   2a444:	cmp	r0, #66	; 0x42
   2a448:	movweq	r1, #3
   2a44c:	str	r1, [sp, #16]
   2a450:	sub	r0, r4, #66	; 0x42
   2a454:	cmp	r0, #53	; 0x35
   2a458:	bls	2a304 <__assert_fail@plt+0x18e54>
   2a45c:	b	2a524 <__assert_fail@plt+0x19074>
   2a460:	cmn	r7, #1
   2a464:	ble	2a718 <__assert_fail@plt+0x19268>
   2a468:	ldr	r3, [sp, #28]
   2a46c:	mvn	r0, #0
   2a470:	mvn	r1, #-2147483648	; 0x80000000
   2a474:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a478:	ldr	r2, [sp, #24]
   2a47c:	ldr	r3, [sp, #28]
   2a480:	subs	r0, r0, r6
   2a484:	sbcs	r0, r1, r7
   2a488:	bge	2a74c <__assert_fail@plt+0x1929c>
   2a48c:	b	2ae5c <__assert_fail@plt+0x199ac>
   2a490:	cmn	r7, #1
   2a494:	str	r9, [sp, #12]
   2a498:	ble	2a760 <__assert_fail@plt+0x192b0>
   2a49c:	ldr	r3, [sp, #28]
   2a4a0:	mvn	r0, #0
   2a4a4:	mvn	r1, #-2147483648	; 0x80000000
   2a4a8:	mvn	r8, #0
   2a4ac:	mvn	r9, #-2147483648	; 0x80000000
   2a4b0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a4b4:	ldr	r2, [sp, #24]
   2a4b8:	ldr	r3, [sp, #28]
   2a4bc:	subs	r0, r0, r6
   2a4c0:	mov	r4, #1
   2a4c4:	sbcs	r0, r1, r7
   2a4c8:	bge	2a7a0 <__assert_fail@plt+0x192f0>
   2a4cc:	b	2a7b8 <__assert_fail@plt+0x19308>
   2a4d0:	cmn	r7, #1
   2a4d4:	str	r9, [sp, #12]
   2a4d8:	ble	2a7f0 <__assert_fail@plt+0x19340>
   2a4dc:	ldr	r3, [sp, #28]
   2a4e0:	mvn	r0, #0
   2a4e4:	mvn	r1, #-2147483648	; 0x80000000
   2a4e8:	mvn	r9, #-2147483648	; 0x80000000
   2a4ec:	str	r0, [sp, #8]
   2a4f0:	mvn	r0, #0
   2a4f4:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a4f8:	ldr	r2, [sp, #24]
   2a4fc:	ldr	r3, [sp, #28]
   2a500:	subs	r0, r0, r6
   2a504:	mov	r4, #1
   2a508:	sbcs	r0, r1, r7
   2a50c:	bge	2a834 <__assert_fail@plt+0x19384>
   2a510:	b	2a850 <__assert_fail@plt+0x193a0>
   2a514:	mov	r2, #1024	; 0x400
   2a518:	sub	r0, r4, #66	; 0x42
   2a51c:	cmp	r0, #53	; 0x35
   2a520:	bls	2a304 <__assert_fail@plt+0x18e54>
   2a524:	orr	r5, r5, #2
   2a528:	strd	r6, [r9]
   2a52c:	mov	r0, r5
   2a530:	sub	sp, fp, #28
   2a534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a538:	cmp	r7, #0
   2a53c:	str	r9, [sp, #12]
   2a540:	bmi	2ab38 <__assert_fail@plt+0x19688>
   2a544:	ldr	r3, [sp, #28]
   2a548:	mvn	r0, #0
   2a54c:	mvn	r1, #-2147483648	; 0x80000000
   2a550:	mvn	r9, #-2147483648	; 0x80000000
   2a554:	str	r0, [sp, #8]
   2a558:	mvn	r0, #0
   2a55c:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a560:	ldr	r2, [sp, #24]
   2a564:	ldr	r3, [sp, #28]
   2a568:	subs	r0, r0, r6
   2a56c:	mov	r4, #1
   2a570:	sbcs	r0, r1, r7
   2a574:	bge	2ab7c <__assert_fail@plt+0x196cc>
   2a578:	b	2ab98 <__assert_fail@plt+0x196e8>
   2a57c:	cmn	r7, #1
   2a580:	ble	2abd4 <__assert_fail@plt+0x19724>
   2a584:	cmp	r7, #2097152	; 0x200000
   2a588:	blt	2ac04 <__assert_fail@plt+0x19754>
   2a58c:	b	2ae5c <__assert_fail@plt+0x199ac>
   2a590:	cmp	r7, #0
   2a594:	str	r9, [sp, #12]
   2a598:	bmi	2ac14 <__assert_fail@plt+0x19764>
   2a59c:	ldr	r3, [sp, #28]
   2a5a0:	mvn	r0, #0
   2a5a4:	mvn	r1, #-2147483648	; 0x80000000
   2a5a8:	mvn	r9, #-2147483648	; 0x80000000
   2a5ac:	str	r0, [sp, #8]
   2a5b0:	mvn	r0, #0
   2a5b4:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a5b8:	ldr	r2, [sp, #24]
   2a5bc:	ldr	r3, [sp, #28]
   2a5c0:	subs	r0, r0, r6
   2a5c4:	mov	r4, #1
   2a5c8:	sbcs	r0, r1, r7
   2a5cc:	bge	2ac58 <__assert_fail@plt+0x197a8>
   2a5d0:	b	2ac74 <__assert_fail@plt+0x197c4>
   2a5d4:	cmp	r7, #0
   2a5d8:	str	r9, [sp, #12]
   2a5dc:	bmi	2acb0 <__assert_fail@plt+0x19800>
   2a5e0:	ldr	r3, [sp, #28]
   2a5e4:	mvn	r0, #0
   2a5e8:	mvn	r1, #-2147483648	; 0x80000000
   2a5ec:	mvn	r8, #-2147483648	; 0x80000000
   2a5f0:	str	r0, [sp, #8]
   2a5f4:	mvn	r0, #0
   2a5f8:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a5fc:	ldr	r2, [sp, #24]
   2a600:	ldr	r3, [sp, #28]
   2a604:	subs	r0, r0, r6
   2a608:	mov	r4, #1
   2a60c:	sbcs	r0, r1, r7
   2a610:	bge	2acf4 <__assert_fail@plt+0x19844>
   2a614:	b	2ad10 <__assert_fail@plt+0x19860>
   2a618:	cmp	r7, #0
   2a61c:	str	r9, [sp, #12]
   2a620:	bmi	2ad4c <__assert_fail@plt+0x1989c>
   2a624:	ldr	r3, [sp, #28]
   2a628:	mvn	r0, #0
   2a62c:	mvn	r1, #-2147483648	; 0x80000000
   2a630:	mvn	r9, #-2147483648	; 0x80000000
   2a634:	str	r0, [sp, #8]
   2a638:	mvn	r0, #0
   2a63c:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a640:	ldr	r2, [sp, #24]
   2a644:	ldr	r3, [sp, #28]
   2a648:	subs	r0, r0, r6
   2a64c:	mov	r4, #1
   2a650:	sbcs	r0, r1, r7
   2a654:	bge	2ad90 <__assert_fail@plt+0x198e0>
   2a658:	b	2adac <__assert_fail@plt+0x198fc>
   2a65c:	cmn	r7, #1
   2a660:	ble	2adec <__assert_fail@plt+0x1993c>
   2a664:	cmp	r7, #4194304	; 0x400000
   2a668:	blt	2ae1c <__assert_fail@plt+0x1996c>
   2a66c:	b	2ae5c <__assert_fail@plt+0x199ac>
   2a670:	cmn	r7, #1
   2a674:	ble	2ae2c <__assert_fail@plt+0x1997c>
   2a678:	cmp	r7, #1073741824	; 0x40000000
   2a67c:	bge	2ae5c <__assert_fail@plt+0x199ac>
   2a680:	b	2ae7c <__assert_fail@plt+0x199cc>
   2a684:	and	r0, r6, r7
   2a688:	cmn	r0, #1
   2a68c:	beq	2a6c4 <__assert_fail@plt+0x19214>
   2a690:	mov	r0, #0
   2a694:	mov	r1, #-2147483648	; 0x80000000
   2a698:	mov	r2, r6
   2a69c:	mov	r3, r7
   2a6a0:	mov	r8, #0
   2a6a4:	mov	r9, #-2147483648	; 0x80000000
   2a6a8:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a6ac:	ldr	r2, [sp, #24]
   2a6b0:	ldr	r3, [sp, #28]
   2a6b4:	mov	r4, #1
   2a6b8:	subs	r0, r0, r2
   2a6bc:	sbcs	r0, r1, r3
   2a6c0:	blt	2a88c <__assert_fail@plt+0x193dc>
   2a6c4:	umull	r8, r0, r6, r2
   2a6c8:	mov	r4, #0
   2a6cc:	mla	r0, r6, r3, r0
   2a6d0:	mla	r9, r7, r2, r0
   2a6d4:	cmp	r9, #0
   2a6d8:	bmi	2a88c <__assert_fail@plt+0x193dc>
   2a6dc:	ldr	r3, [sp, #28]
   2a6e0:	mvn	r0, #-2147483648	; 0x80000000
   2a6e4:	mvn	r1, #-2147483648	; 0x80000000
   2a6e8:	mov	r6, r4
   2a6ec:	mvn	r4, #0
   2a6f0:	str	r0, [sp, #8]
   2a6f4:	mvn	r0, #0
   2a6f8:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a6fc:	ldr	r2, [sp, #24]
   2a700:	ldr	r3, [sp, #28]
   2a704:	subs	r0, r0, r8
   2a708:	mov	r7, #1
   2a70c:	sbcs	r0, r1, r9
   2a710:	bge	2a8c8 <__assert_fail@plt+0x19418>
   2a714:	b	2a8e4 <__assert_fail@plt+0x19434>
   2a718:	and	r0, r6, r7
   2a71c:	cmn	r0, #1
   2a720:	beq	2a74c <__assert_fail@plt+0x1929c>
   2a724:	mov	r0, #0
   2a728:	mov	r1, #-2147483648	; 0x80000000
   2a72c:	mov	r2, r6
   2a730:	mov	r3, r7
   2a734:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a738:	ldr	r2, [sp, #24]
   2a73c:	ldr	r3, [sp, #28]
   2a740:	subs	r0, r0, r2
   2a744:	sbcs	r0, r1, r3
   2a748:	blt	2ae5c <__assert_fail@plt+0x199ac>
   2a74c:	umull	r0, r1, r6, r2
   2a750:	mla	r1, r6, r3, r1
   2a754:	mla	r7, r7, r2, r1
   2a758:	mov	r6, r0
   2a75c:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2a760:	and	r0, r6, r7
   2a764:	cmn	r0, #1
   2a768:	beq	2a7a0 <__assert_fail@plt+0x192f0>
   2a76c:	mov	r0, #0
   2a770:	mov	r1, #-2147483648	; 0x80000000
   2a774:	mov	r2, r6
   2a778:	mov	r3, r7
   2a77c:	mov	r8, #0
   2a780:	mov	r9, #-2147483648	; 0x80000000
   2a784:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a788:	ldr	r2, [sp, #24]
   2a78c:	ldr	r3, [sp, #28]
   2a790:	mov	r4, #1
   2a794:	subs	r0, r0, r2
   2a798:	sbcs	r0, r1, r3
   2a79c:	blt	2a978 <__assert_fail@plt+0x194c8>
   2a7a0:	umull	r8, r0, r6, r2
   2a7a4:	mov	r4, #0
   2a7a8:	mla	r0, r6, r3, r0
   2a7ac:	mla	r9, r7, r2, r0
   2a7b0:	cmp	r9, #0
   2a7b4:	bmi	2a978 <__assert_fail@plt+0x194c8>
   2a7b8:	ldr	r3, [sp, #28]
   2a7bc:	mvn	r0, #0
   2a7c0:	mvn	r1, #-2147483648	; 0x80000000
   2a7c4:	str	r4, [sp, #8]
   2a7c8:	mvn	r6, #0
   2a7cc:	mvn	r7, #-2147483648	; 0x80000000
   2a7d0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a7d4:	ldr	r4, [sp, #24]
   2a7d8:	ldr	r3, [sp, #28]
   2a7dc:	subs	r0, r0, r8
   2a7e0:	mov	r2, #1
   2a7e4:	sbcs	r0, r1, r9
   2a7e8:	bge	2a9b0 <__assert_fail@plt+0x19500>
   2a7ec:	b	2aae8 <__assert_fail@plt+0x19638>
   2a7f0:	and	r0, r6, r7
   2a7f4:	cmn	r0, #1
   2a7f8:	beq	2a834 <__assert_fail@plt+0x19384>
   2a7fc:	mov	r0, #0
   2a800:	mov	r1, #-2147483648	; 0x80000000
   2a804:	mov	r2, r6
   2a808:	mov	r3, r7
   2a80c:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a810:	ldr	r2, [sp, #24]
   2a814:	ldr	r3, [sp, #28]
   2a818:	mov	r4, #1
   2a81c:	mov	r9, #-2147483648	; 0x80000000
   2a820:	subs	r0, r0, r2
   2a824:	sbcs	r0, r1, r3
   2a828:	mov	r0, #0
   2a82c:	str	r0, [sp, #8]
   2a830:	blt	2a9c4 <__assert_fail@plt+0x19514>
   2a834:	umull	r1, r0, r6, r2
   2a838:	mov	r4, #0
   2a83c:	mla	r0, r6, r3, r0
   2a840:	mla	r9, r7, r2, r0
   2a844:	str	r1, [sp, #8]
   2a848:	cmp	r9, #0
   2a84c:	bmi	2a9c4 <__assert_fail@plt+0x19514>
   2a850:	ldr	r3, [sp, #28]
   2a854:	mvn	r0, #0
   2a858:	mvn	r1, #-2147483648	; 0x80000000
   2a85c:	str	r4, [sp, #4]
   2a860:	mvn	r6, #0
   2a864:	mvn	r8, #-2147483648	; 0x80000000
   2a868:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a86c:	ldr	r4, [sp, #8]
   2a870:	ldr	r2, [sp, #24]
   2a874:	ldr	r3, [sp, #28]
   2a878:	mov	r7, #1
   2a87c:	subs	r0, r0, r4
   2a880:	sbcs	r0, r1, r9
   2a884:	bge	2aa00 <__assert_fail@plt+0x19550>
   2a888:	b	2aa18 <__assert_fail@plt+0x19568>
   2a88c:	mov	r0, #-2147483648	; 0x80000000
   2a890:	mov	r1, #-2147483648	; 0x80000000
   2a894:	mov	r2, r8
   2a898:	mov	r3, r9
   2a89c:	mov	r6, r4
   2a8a0:	mov	r4, #0
   2a8a4:	str	r0, [sp, #8]
   2a8a8:	mov	r0, #0
   2a8ac:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a8b0:	ldr	r2, [sp, #24]
   2a8b4:	ldr	r3, [sp, #28]
   2a8b8:	mov	r7, #1
   2a8bc:	subs	r0, r0, r2
   2a8c0:	sbcs	r0, r1, r3
   2a8c4:	blt	2a938 <__assert_fail@plt+0x19488>
   2a8c8:	umull	r4, r0, r8, r2
   2a8cc:	mov	r7, r6
   2a8d0:	mla	r0, r8, r3, r0
   2a8d4:	mla	r0, r9, r2, r0
   2a8d8:	cmp	r0, #0
   2a8dc:	str	r0, [sp, #8]
   2a8e0:	bmi	2a938 <__assert_fail@plt+0x19488>
   2a8e4:	ldr	r3, [sp, #28]
   2a8e8:	mvn	r0, #0
   2a8ec:	mvn	r1, #-2147483648	; 0x80000000
   2a8f0:	mov	r9, r7
   2a8f4:	mvn	r6, #0
   2a8f8:	mvn	r7, #-2147483648	; 0x80000000
   2a8fc:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2a900:	ldr	r8, [sp, #8]
   2a904:	ldr	r3, [sp, #24]
   2a908:	ldr	ip, [sp, #28]
   2a90c:	subs	r0, r0, r4
   2a910:	mov	r2, #1
   2a914:	sbcs	r0, r1, r8
   2a918:	blt	2a92c <__assert_fail@plt+0x1947c>
   2a91c:	umull	r6, r0, r4, r3
   2a920:	mov	r2, #0
   2a924:	mla	r0, r4, ip, r0
   2a928:	mla	r7, r8, r3, r0
   2a92c:	orr	r3, r2, r9
   2a930:	ldr	r9, [sp, #12]
   2a934:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2a938:	ldr	r8, [sp, #8]
   2a93c:	mov	r0, #0
   2a940:	mov	r1, #-2147483648	; 0x80000000
   2a944:	mov	r2, r4
   2a948:	mov	r9, r7
   2a94c:	mov	r6, #0
   2a950:	mov	r7, #-2147483648	; 0x80000000
   2a954:	mov	r3, r8
   2a958:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a95c:	ldr	r3, [sp, #24]
   2a960:	ldr	ip, [sp, #28]
   2a964:	mov	r2, #1
   2a968:	subs	r0, r0, r3
   2a96c:	sbcs	r0, r1, ip
   2a970:	bge	2a91c <__assert_fail@plt+0x1946c>
   2a974:	b	2a92c <__assert_fail@plt+0x1947c>
   2a978:	mov	r0, #0
   2a97c:	mov	r1, #-2147483648	; 0x80000000
   2a980:	mov	r2, r8
   2a984:	mov	r3, r9
   2a988:	str	r4, [sp, #8]
   2a98c:	mov	r6, #0
   2a990:	mov	r7, #-2147483648	; 0x80000000
   2a994:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a998:	ldr	r4, [sp, #24]
   2a99c:	ldr	r3, [sp, #28]
   2a9a0:	mov	r2, #1
   2a9a4:	subs	r0, r0, r4
   2a9a8:	sbcs	r0, r1, r3
   2a9ac:	blt	2aae8 <__assert_fail@plt+0x19638>
   2a9b0:	umull	r6, r0, r8, r4
   2a9b4:	mov	r2, #0
   2a9b8:	mla	r0, r8, r3, r0
   2a9bc:	mla	r7, r9, r4, r0
   2a9c0:	b	2aae8 <__assert_fail@plt+0x19638>
   2a9c4:	str	r4, [sp, #4]
   2a9c8:	ldr	r4, [sp, #8]
   2a9cc:	mov	r0, #0
   2a9d0:	mov	r1, #-2147483648	; 0x80000000
   2a9d4:	mov	r3, r9
   2a9d8:	mov	r2, r4
   2a9dc:	bl	2be34 <__assert_fail@plt+0x1a984>
   2a9e0:	ldr	r2, [sp, #24]
   2a9e4:	ldr	r3, [sp, #28]
   2a9e8:	mov	r7, #1
   2a9ec:	mov	r6, #0
   2a9f0:	mov	r8, #-2147483648	; 0x80000000
   2a9f4:	subs	r0, r0, r2
   2a9f8:	sbcs	r0, r1, r3
   2a9fc:	blt	2aa50 <__assert_fail@plt+0x195a0>
   2aa00:	umull	r6, r0, r4, r2
   2aa04:	ldr	r7, [sp, #4]
   2aa08:	mla	r0, r4, r3, r0
   2aa0c:	mla	r8, r9, r2, r0
   2aa10:	cmp	r8, #0
   2aa14:	bmi	2aa50 <__assert_fail@plt+0x195a0>
   2aa18:	ldr	r3, [sp, #28]
   2aa1c:	mvn	r0, #0
   2aa20:	mvn	r1, #-2147483648	; 0x80000000
   2aa24:	str	r7, [sp, #8]
   2aa28:	mvn	r4, #0
   2aa2c:	mvn	r9, #-2147483648	; 0x80000000
   2aa30:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2aa34:	ldr	r2, [sp, #24]
   2aa38:	ldr	r3, [sp, #28]
   2aa3c:	subs	r0, r0, r6
   2aa40:	mov	r7, #1
   2aa44:	sbcs	r0, r1, r8
   2aa48:	bge	2aa88 <__assert_fail@plt+0x195d8>
   2aa4c:	b	2aaa0 <__assert_fail@plt+0x195f0>
   2aa50:	mov	r0, #0
   2aa54:	mov	r1, #-2147483648	; 0x80000000
   2aa58:	mov	r2, r6
   2aa5c:	mov	r3, r8
   2aa60:	str	r7, [sp, #8]
   2aa64:	bl	2be34 <__assert_fail@plt+0x1a984>
   2aa68:	ldr	r2, [sp, #24]
   2aa6c:	ldr	r3, [sp, #28]
   2aa70:	mov	r7, #1
   2aa74:	mov	r4, #0
   2aa78:	mov	r9, #-2147483648	; 0x80000000
   2aa7c:	subs	r0, r0, r2
   2aa80:	sbcs	r0, r1, r3
   2aa84:	blt	2aaf8 <__assert_fail@plt+0x19648>
   2aa88:	umull	r4, r0, r6, r2
   2aa8c:	ldr	r7, [sp, #8]
   2aa90:	mla	r0, r6, r3, r0
   2aa94:	mla	r9, r8, r2, r0
   2aa98:	cmp	r9, #0
   2aa9c:	bmi	2aaf8 <__assert_fail@plt+0x19648>
   2aaa0:	ldr	r3, [sp, #28]
   2aaa4:	mvn	r0, #0
   2aaa8:	mvn	r1, #-2147483648	; 0x80000000
   2aaac:	str	r7, [sp, #8]
   2aab0:	mvn	r6, #0
   2aab4:	mvn	r7, #-2147483648	; 0x80000000
   2aab8:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2aabc:	ldr	r3, [sp, #24]
   2aac0:	ldr	ip, [sp, #28]
   2aac4:	subs	r0, r0, r4
   2aac8:	mov	r2, #1
   2aacc:	mov	r8, r4
   2aad0:	sbcs	r0, r1, r9
   2aad4:	blt	2aae8 <__assert_fail@plt+0x19638>
   2aad8:	umull	r6, r0, r8, r3
   2aadc:	mov	r2, #0
   2aae0:	mla	r0, r8, ip, r0
   2aae4:	mla	r7, r9, r3, r0
   2aae8:	ldr	r0, [sp, #8]
   2aaec:	ldr	r9, [sp, #12]
   2aaf0:	orr	r3, r2, r0
   2aaf4:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2aaf8:	mov	r0, #0
   2aafc:	mov	r1, #-2147483648	; 0x80000000
   2ab00:	mov	r2, r4
   2ab04:	mov	r3, r9
   2ab08:	str	r7, [sp, #8]
   2ab0c:	mov	r8, r4
   2ab10:	bl	2be34 <__assert_fail@plt+0x1a984>
   2ab14:	ldr	r3, [sp, #24]
   2ab18:	ldr	ip, [sp, #28]
   2ab1c:	mov	r2, #1
   2ab20:	mov	r6, #0
   2ab24:	mov	r7, #-2147483648	; 0x80000000
   2ab28:	subs	r0, r0, r3
   2ab2c:	sbcs	r0, r1, ip
   2ab30:	bge	2aad8 <__assert_fail@plt+0x19628>
   2ab34:	b	2aae8 <__assert_fail@plt+0x19638>
   2ab38:	and	r0, r6, r7
   2ab3c:	cmn	r0, #1
   2ab40:	beq	2ab7c <__assert_fail@plt+0x196cc>
   2ab44:	mov	r0, #0
   2ab48:	mov	r1, #-2147483648	; 0x80000000
   2ab4c:	mov	r2, r6
   2ab50:	mov	r3, r7
   2ab54:	bl	2be34 <__assert_fail@plt+0x1a984>
   2ab58:	ldr	r2, [sp, #24]
   2ab5c:	ldr	r3, [sp, #28]
   2ab60:	mov	r4, #1
   2ab64:	mov	r9, #-2147483648	; 0x80000000
   2ab68:	subs	r0, r0, r2
   2ab6c:	sbcs	r0, r1, r3
   2ab70:	mov	r0, #0
   2ab74:	str	r0, [sp, #8]
   2ab78:	blt	2ae8c <__assert_fail@plt+0x199dc>
   2ab7c:	umull	r1, r0, r6, r2
   2ab80:	mov	r4, #0
   2ab84:	mla	r0, r6, r3, r0
   2ab88:	mla	r9, r7, r2, r0
   2ab8c:	str	r1, [sp, #8]
   2ab90:	cmp	r9, #0
   2ab94:	bmi	2ae8c <__assert_fail@plt+0x199dc>
   2ab98:	ldr	r3, [sp, #28]
   2ab9c:	mvn	r0, #0
   2aba0:	mvn	r1, #-2147483648	; 0x80000000
   2aba4:	str	r4, [sp, #4]
   2aba8:	mvn	r8, #0
   2abac:	mvn	r4, #-2147483648	; 0x80000000
   2abb0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2abb4:	ldr	r6, [sp, #8]
   2abb8:	ldr	r2, [sp, #24]
   2abbc:	ldr	r3, [sp, #28]
   2abc0:	mov	r7, #1
   2abc4:	subs	r0, r0, r6
   2abc8:	sbcs	r0, r1, r9
   2abcc:	bge	2aec8 <__assert_fail@plt+0x19a18>
   2abd0:	b	2aee0 <__assert_fail@plt+0x19a30>
   2abd4:	and	r0, r6, r7
   2abd8:	cmn	r0, #1
   2abdc:	beq	2ac04 <__assert_fail@plt+0x19754>
   2abe0:	mov	r0, #0
   2abe4:	mov	r1, #-2147483648	; 0x80000000
   2abe8:	mov	r2, r6
   2abec:	mov	r3, r7
   2abf0:	bl	2be34 <__assert_fail@plt+0x1a984>
   2abf4:	ldr	r3, [sp, #28]
   2abf8:	subs	r0, r0, #1024	; 0x400
   2abfc:	sbcs	r0, r1, #0
   2ac00:	blt	2ae5c <__assert_fail@plt+0x199ac>
   2ac04:	lsl	r0, r7, #10
   2ac08:	orr	r7, r0, r6, lsr #22
   2ac0c:	lsl	r6, r6, #10
   2ac10:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2ac14:	and	r0, r6, r7
   2ac18:	cmn	r0, #1
   2ac1c:	beq	2ac58 <__assert_fail@plt+0x197a8>
   2ac20:	mov	r0, #0
   2ac24:	mov	r1, #-2147483648	; 0x80000000
   2ac28:	mov	r2, r6
   2ac2c:	mov	r3, r7
   2ac30:	bl	2be34 <__assert_fail@plt+0x1a984>
   2ac34:	ldr	r2, [sp, #24]
   2ac38:	ldr	r3, [sp, #28]
   2ac3c:	mov	r4, #1
   2ac40:	mov	r9, #-2147483648	; 0x80000000
   2ac44:	subs	r0, r0, r2
   2ac48:	sbcs	r0, r1, r3
   2ac4c:	mov	r0, #0
   2ac50:	str	r0, [sp, #8]
   2ac54:	blt	2b1a4 <__assert_fail@plt+0x19cf4>
   2ac58:	umull	r1, r0, r6, r2
   2ac5c:	mov	r4, #0
   2ac60:	mla	r0, r6, r3, r0
   2ac64:	mla	r9, r7, r2, r0
   2ac68:	str	r1, [sp, #8]
   2ac6c:	cmp	r9, #0
   2ac70:	bmi	2b1a4 <__assert_fail@plt+0x19cf4>
   2ac74:	ldr	r3, [sp, #28]
   2ac78:	mvn	r0, #0
   2ac7c:	mvn	r1, #-2147483648	; 0x80000000
   2ac80:	str	r4, [sp, #4]
   2ac84:	mvn	r8, #0
   2ac88:	mvn	r4, #-2147483648	; 0x80000000
   2ac8c:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2ac90:	ldr	r6, [sp, #8]
   2ac94:	ldr	r2, [sp, #24]
   2ac98:	ldr	r3, [sp, #28]
   2ac9c:	mov	r7, #1
   2aca0:	subs	r0, r0, r6
   2aca4:	sbcs	r0, r1, r9
   2aca8:	bge	2b1e0 <__assert_fail@plt+0x19d30>
   2acac:	b	2b1f8 <__assert_fail@plt+0x19d48>
   2acb0:	and	r0, r6, r7
   2acb4:	cmn	r0, #1
   2acb8:	beq	2acf4 <__assert_fail@plt+0x19844>
   2acbc:	mov	r0, #0
   2acc0:	mov	r1, #-2147483648	; 0x80000000
   2acc4:	mov	r2, r6
   2acc8:	mov	r3, r7
   2accc:	bl	2be34 <__assert_fail@plt+0x1a984>
   2acd0:	ldr	r2, [sp, #24]
   2acd4:	ldr	r3, [sp, #28]
   2acd8:	mov	r4, #1
   2acdc:	mov	r8, #-2147483648	; 0x80000000
   2ace0:	subs	r0, r0, r2
   2ace4:	sbcs	r0, r1, r3
   2ace8:	mov	r0, #0
   2acec:	str	r0, [sp, #8]
   2acf0:	blt	2b420 <__assert_fail@plt+0x19f70>
   2acf4:	umull	r1, r0, r6, r2
   2acf8:	mov	r4, #0
   2acfc:	mla	r0, r6, r3, r0
   2ad00:	mla	r8, r7, r2, r0
   2ad04:	str	r1, [sp, #8]
   2ad08:	cmp	r8, #0
   2ad0c:	bmi	2b420 <__assert_fail@plt+0x19f70>
   2ad10:	ldr	r3, [sp, #28]
   2ad14:	mvn	r0, #0
   2ad18:	mvn	r1, #-2147483648	; 0x80000000
   2ad1c:	str	r4, [sp, #4]
   2ad20:	mvn	r9, #0
   2ad24:	mvn	r4, #-2147483648	; 0x80000000
   2ad28:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2ad2c:	ldr	r6, [sp, #8]
   2ad30:	ldr	r2, [sp, #24]
   2ad34:	ldr	r3, [sp, #28]
   2ad38:	mov	r7, #1
   2ad3c:	subs	r0, r0, r6
   2ad40:	sbcs	r0, r1, r8
   2ad44:	bge	2b45c <__assert_fail@plt+0x19fac>
   2ad48:	b	2b474 <__assert_fail@plt+0x19fc4>
   2ad4c:	and	r0, r6, r7
   2ad50:	cmn	r0, #1
   2ad54:	beq	2ad90 <__assert_fail@plt+0x198e0>
   2ad58:	mov	r0, #0
   2ad5c:	mov	r1, #-2147483648	; 0x80000000
   2ad60:	mov	r2, r6
   2ad64:	mov	r3, r7
   2ad68:	bl	2be34 <__assert_fail@plt+0x1a984>
   2ad6c:	ldr	r2, [sp, #24]
   2ad70:	ldr	r3, [sp, #28]
   2ad74:	mov	r4, #1
   2ad78:	mov	r9, #-2147483648	; 0x80000000
   2ad7c:	subs	r0, r0, r2
   2ad80:	sbcs	r0, r1, r3
   2ad84:	mov	r0, #0
   2ad88:	str	r0, [sp, #8]
   2ad8c:	blt	2b63c <__assert_fail@plt+0x1a18c>
   2ad90:	umull	r1, r0, r6, r2
   2ad94:	mov	r4, #0
   2ad98:	mla	r0, r6, r3, r0
   2ad9c:	mla	r9, r7, r2, r0
   2ada0:	str	r1, [sp, #8]
   2ada4:	cmp	r9, #0
   2ada8:	bmi	2b63c <__assert_fail@plt+0x1a18c>
   2adac:	ldr	r3, [sp, #28]
   2adb0:	mvn	r0, #0
   2adb4:	mvn	r1, #-2147483648	; 0x80000000
   2adb8:	str	r4, [sp]
   2adbc:	mvn	r8, #-2147483648	; 0x80000000
   2adc0:	str	r0, [sp, #4]
   2adc4:	mvn	r0, #0
   2adc8:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2adcc:	ldr	r6, [sp, #8]
   2add0:	ldr	r2, [sp, #24]
   2add4:	ldr	r3, [sp, #28]
   2add8:	mov	r7, #1
   2addc:	subs	r0, r0, r6
   2ade0:	sbcs	r0, r1, r9
   2ade4:	bge	2b67c <__assert_fail@plt+0x1a1cc>
   2ade8:	b	2b698 <__assert_fail@plt+0x1a1e8>
   2adec:	and	r0, r6, r7
   2adf0:	cmn	r0, #1
   2adf4:	beq	2ae1c <__assert_fail@plt+0x1996c>
   2adf8:	mov	r0, #0
   2adfc:	mov	r1, #-2147483648	; 0x80000000
   2ae00:	mov	r2, r6
   2ae04:	mov	r3, r7
   2ae08:	bl	2be34 <__assert_fail@plt+0x1a984>
   2ae0c:	ldr	r3, [sp, #28]
   2ae10:	subs	r0, r0, #512	; 0x200
   2ae14:	sbcs	r0, r1, #0
   2ae18:	blt	2ae5c <__assert_fail@plt+0x199ac>
   2ae1c:	lsl	r0, r7, #9
   2ae20:	orr	r7, r0, r6, lsr #23
   2ae24:	lsl	r6, r6, #9
   2ae28:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2ae2c:	and	r0, r6, r7
   2ae30:	cmn	r0, #1
   2ae34:	beq	2ae7c <__assert_fail@plt+0x199cc>
   2ae38:	mov	r0, #0
   2ae3c:	mov	r1, #-2147483648	; 0x80000000
   2ae40:	mov	r2, r6
   2ae44:	mov	r3, r7
   2ae48:	bl	2be34 <__assert_fail@plt+0x1a984>
   2ae4c:	ldr	r3, [sp, #28]
   2ae50:	subs	r0, r0, #2
   2ae54:	sbcs	r0, r1, #0
   2ae58:	bge	2ae7c <__assert_fail@plt+0x199cc>
   2ae5c:	cmp	r7, #0
   2ae60:	mvn	r0, #-2147483648	; 0x80000000
   2ae64:	mvn	r6, #0
   2ae68:	mov	r3, #1
   2ae6c:	movmi	r0, #-2147483648	; 0x80000000
   2ae70:	movwmi	r6, #0
   2ae74:	mov	r7, r0
   2ae78:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2ae7c:	lsl	r0, r7, #1
   2ae80:	orr	r7, r0, r6, lsr #31
   2ae84:	lsl	r6, r6, #1
   2ae88:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2ae8c:	ldr	r6, [sp, #8]
   2ae90:	mov	r0, #0
   2ae94:	mov	r1, #-2147483648	; 0x80000000
   2ae98:	mov	r3, r9
   2ae9c:	str	r4, [sp, #4]
   2aea0:	mov	r2, r6
   2aea4:	bl	2be34 <__assert_fail@plt+0x1a984>
   2aea8:	ldr	r2, [sp, #24]
   2aeac:	ldr	r3, [sp, #28]
   2aeb0:	mov	r7, #1
   2aeb4:	mov	r8, #0
   2aeb8:	mov	r4, #-2147483648	; 0x80000000
   2aebc:	subs	r0, r0, r2
   2aec0:	sbcs	r0, r1, r3
   2aec4:	blt	2af18 <__assert_fail@plt+0x19a68>
   2aec8:	umull	r8, r0, r6, r2
   2aecc:	ldr	r7, [sp, #4]
   2aed0:	mla	r0, r6, r3, r0
   2aed4:	mla	r4, r9, r2, r0
   2aed8:	cmp	r4, #0
   2aedc:	bmi	2af18 <__assert_fail@plt+0x19a68>
   2aee0:	ldr	r3, [sp, #28]
   2aee4:	mvn	r0, #0
   2aee8:	mvn	r1, #-2147483648	; 0x80000000
   2aeec:	str	r7, [sp, #8]
   2aef0:	mvn	r7, #0
   2aef4:	mvn	r9, #-2147483648	; 0x80000000
   2aef8:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2aefc:	ldr	r2, [sp, #24]
   2af00:	ldr	r3, [sp, #28]
   2af04:	subs	r0, r0, r8
   2af08:	mov	r6, #1
   2af0c:	sbcs	r0, r1, r4
   2af10:	bge	2af50 <__assert_fail@plt+0x19aa0>
   2af14:	b	2af68 <__assert_fail@plt+0x19ab8>
   2af18:	mov	r0, #0
   2af1c:	mov	r1, #-2147483648	; 0x80000000
   2af20:	mov	r2, r8
   2af24:	mov	r3, r4
   2af28:	str	r7, [sp, #8]
   2af2c:	bl	2be34 <__assert_fail@plt+0x1a984>
   2af30:	ldr	r2, [sp, #24]
   2af34:	ldr	r3, [sp, #28]
   2af38:	mov	r6, #1
   2af3c:	mov	r7, #0
   2af40:	mov	r9, #-2147483648	; 0x80000000
   2af44:	subs	r0, r0, r2
   2af48:	sbcs	r0, r1, r3
   2af4c:	blt	2afa8 <__assert_fail@plt+0x19af8>
   2af50:	umull	r7, r0, r8, r2
   2af54:	ldr	r6, [sp, #8]
   2af58:	mla	r0, r8, r3, r0
   2af5c:	mla	r9, r4, r2, r0
   2af60:	cmp	r9, #0
   2af64:	bmi	2afa8 <__assert_fail@plt+0x19af8>
   2af68:	ldr	r3, [sp, #28]
   2af6c:	mvn	r0, #0
   2af70:	mvn	r1, #-2147483648	; 0x80000000
   2af74:	str	r6, [sp, #8]
   2af78:	mvn	r8, #0
   2af7c:	mvn	r4, #-2147483648	; 0x80000000
   2af80:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2af84:	ldr	r2, [sp, #24]
   2af88:	ldr	r3, [sp, #28]
   2af8c:	subs	r0, r0, r7
   2af90:	sbcs	r0, r1, r9
   2af94:	bge	2afec <__assert_fail@plt+0x19b3c>
   2af98:	mov	r0, #1
   2af9c:	mov	r6, #0
   2afa0:	str	r0, [sp, #8]
   2afa4:	b	2b004 <__assert_fail@plt+0x19b54>
   2afa8:	mov	r0, #0
   2afac:	mov	r1, #-2147483648	; 0x80000000
   2afb0:	mov	r2, r7
   2afb4:	mov	r3, r9
   2afb8:	str	r6, [sp, #8]
   2afbc:	bl	2be34 <__assert_fail@plt+0x1a984>
   2afc0:	ldr	r2, [sp, #24]
   2afc4:	ldr	r3, [sp, #28]
   2afc8:	subs	r0, r0, r2
   2afcc:	sbcs	r0, r1, r3
   2afd0:	bge	2afec <__assert_fail@plt+0x19b3c>
   2afd4:	mov	r0, #1
   2afd8:	mov	r8, #0
   2afdc:	mov	r4, #-2147483648	; 0x80000000
   2afe0:	mov	r6, #0
   2afe4:	str	r0, [sp, #8]
   2afe8:	b	2b03c <__assert_fail@plt+0x19b8c>
   2afec:	umull	r8, r0, r7, r2
   2aff0:	mov	r6, #0
   2aff4:	mla	r0, r7, r3, r0
   2aff8:	mla	r4, r9, r2, r0
   2affc:	cmp	r4, #0
   2b000:	bmi	2b03c <__assert_fail@plt+0x19b8c>
   2b004:	ldr	r3, [sp, #28]
   2b008:	mvn	r0, #0
   2b00c:	mvn	r1, #-2147483648	; 0x80000000
   2b010:	mvn	r9, #0
   2b014:	mvn	r7, #-2147483648	; 0x80000000
   2b018:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b01c:	ldr	r2, [sp, #24]
   2b020:	ldr	r3, [sp, #28]
   2b024:	subs	r0, r0, r8
   2b028:	sbcs	r0, r1, r4
   2b02c:	bge	2b078 <__assert_fail@plt+0x19bc8>
   2b030:	mov	r0, #1
   2b034:	str	r0, [sp, #8]
   2b038:	b	2b08c <__assert_fail@plt+0x19bdc>
   2b03c:	mov	r0, #0
   2b040:	mov	r1, #-2147483648	; 0x80000000
   2b044:	mov	r2, r8
   2b048:	mov	r3, r4
   2b04c:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b050:	ldr	r2, [sp, #24]
   2b054:	ldr	r3, [sp, #28]
   2b058:	subs	r0, r0, r2
   2b05c:	sbcs	r0, r1, r3
   2b060:	bge	2b078 <__assert_fail@plt+0x19bc8>
   2b064:	mov	r0, #1
   2b068:	mov	r9, #0
   2b06c:	mov	r7, #-2147483648	; 0x80000000
   2b070:	str	r0, [sp, #8]
   2b074:	b	2b0c8 <__assert_fail@plt+0x19c18>
   2b078:	umull	r9, r0, r8, r2
   2b07c:	mla	r0, r8, r3, r0
   2b080:	mla	r7, r4, r2, r0
   2b084:	cmp	r7, #0
   2b088:	bmi	2b0c8 <__assert_fail@plt+0x19c18>
   2b08c:	ldr	r3, [sp, #28]
   2b090:	mvn	r0, #0
   2b094:	mvn	r1, #-2147483648	; 0x80000000
   2b098:	mvn	r8, #0
   2b09c:	mvn	r4, #-2147483648	; 0x80000000
   2b0a0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b0a4:	ldr	r2, [sp, #24]
   2b0a8:	ldr	r3, [sp, #28]
   2b0ac:	subs	r0, r0, r9
   2b0b0:	sbcs	r0, r1, r7
   2b0b4:	bge	2b108 <__assert_fail@plt+0x19c58>
   2b0b8:	ldr	r9, [sp, #12]
   2b0bc:	mov	r0, #1
   2b0c0:	str	r0, [sp, #8]
   2b0c4:	b	2b120 <__assert_fail@plt+0x19c70>
   2b0c8:	mov	r0, #0
   2b0cc:	mov	r1, #-2147483648	; 0x80000000
   2b0d0:	mov	r2, r9
   2b0d4:	mov	r3, r7
   2b0d8:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b0dc:	ldr	r2, [sp, #24]
   2b0e0:	ldr	r3, [sp, #28]
   2b0e4:	subs	r0, r0, r2
   2b0e8:	sbcs	r0, r1, r3
   2b0ec:	bge	2b108 <__assert_fail@plt+0x19c58>
   2b0f0:	ldr	r9, [sp, #12]
   2b0f4:	mov	r0, #1
   2b0f8:	mov	r8, #0
   2b0fc:	mov	r4, #-2147483648	; 0x80000000
   2b100:	str	r0, [sp, #8]
   2b104:	b	2b170 <__assert_fail@plt+0x19cc0>
   2b108:	umull	r8, r0, r9, r2
   2b10c:	mla	r0, r9, r3, r0
   2b110:	ldr	r9, [sp, #12]
   2b114:	mla	r4, r7, r2, r0
   2b118:	cmp	r4, #0
   2b11c:	bmi	2b170 <__assert_fail@plt+0x19cc0>
   2b120:	ldr	r3, [sp, #28]
   2b124:	mvn	r0, #0
   2b128:	mvn	r1, #-2147483648	; 0x80000000
   2b12c:	mvn	r6, #0
   2b130:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b134:	ldr	r7, [sp, #24]
   2b138:	ldr	r3, [sp, #28]
   2b13c:	subs	r0, r0, r8
   2b140:	mov	r2, #1
   2b144:	sbcs	r0, r1, r4
   2b148:	mvn	r0, #-2147483648	; 0x80000000
   2b14c:	blt	2b160 <__assert_fail@plt+0x19cb0>
   2b150:	umull	r6, r0, r8, r7
   2b154:	mov	r2, #0
   2b158:	mla	r0, r8, r3, r0
   2b15c:	mla	r0, r4, r7, r0
   2b160:	ldr	r1, [sp, #8]
   2b164:	mov	r7, r0
   2b168:	orr	r3, r2, r1
   2b16c:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2b170:	mov	r0, #0
   2b174:	mov	r1, #-2147483648	; 0x80000000
   2b178:	mov	r2, r8
   2b17c:	mov	r3, r4
   2b180:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b184:	ldr	r7, [sp, #24]
   2b188:	ldr	r3, [sp, #28]
   2b18c:	mov	r2, #1
   2b190:	subs	r0, r0, r7
   2b194:	sbcs	r0, r1, r3
   2b198:	mov	r0, #-2147483648	; 0x80000000
   2b19c:	bge	2b150 <__assert_fail@plt+0x19ca0>
   2b1a0:	b	2b160 <__assert_fail@plt+0x19cb0>
   2b1a4:	ldr	r6, [sp, #8]
   2b1a8:	mov	r0, #0
   2b1ac:	mov	r1, #-2147483648	; 0x80000000
   2b1b0:	mov	r3, r9
   2b1b4:	str	r4, [sp, #4]
   2b1b8:	mov	r2, r6
   2b1bc:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b1c0:	ldr	r2, [sp, #24]
   2b1c4:	ldr	r3, [sp, #28]
   2b1c8:	mov	r7, #1
   2b1cc:	mov	r8, #0
   2b1d0:	mov	r4, #-2147483648	; 0x80000000
   2b1d4:	subs	r0, r0, r2
   2b1d8:	sbcs	r0, r1, r3
   2b1dc:	blt	2b234 <__assert_fail@plt+0x19d84>
   2b1e0:	umull	r8, r0, r6, r2
   2b1e4:	ldr	r7, [sp, #4]
   2b1e8:	mla	r0, r6, r3, r0
   2b1ec:	mla	r4, r9, r2, r0
   2b1f0:	cmp	r4, #0
   2b1f4:	bmi	2b234 <__assert_fail@plt+0x19d84>
   2b1f8:	ldr	r3, [sp, #28]
   2b1fc:	mvn	r0, #0
   2b200:	mvn	r1, #-2147483648	; 0x80000000
   2b204:	str	r7, [sp, #4]
   2b208:	mvn	r7, #0
   2b20c:	mvn	r9, #-2147483648	; 0x80000000
   2b210:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b214:	ldr	r2, [sp, #24]
   2b218:	ldr	r3, [sp, #28]
   2b21c:	subs	r0, r0, r8
   2b220:	mov	r6, #1
   2b224:	sbcs	r0, r1, r4
   2b228:	str	r6, [sp, #8]
   2b22c:	bge	2b270 <__assert_fail@plt+0x19dc0>
   2b230:	b	2b28c <__assert_fail@plt+0x19ddc>
   2b234:	mov	r0, #0
   2b238:	mov	r1, #-2147483648	; 0x80000000
   2b23c:	mov	r2, r8
   2b240:	mov	r3, r4
   2b244:	str	r7, [sp, #4]
   2b248:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b24c:	ldr	r2, [sp, #24]
   2b250:	ldr	r3, [sp, #28]
   2b254:	mov	r7, #1
   2b258:	mov	r9, #-2147483648	; 0x80000000
   2b25c:	str	r7, [sp, #8]
   2b260:	mov	r7, #0
   2b264:	subs	r0, r0, r2
   2b268:	sbcs	r0, r1, r3
   2b26c:	blt	2b2c4 <__assert_fail@plt+0x19e14>
   2b270:	umull	r7, r0, r8, r2
   2b274:	mla	r0, r8, r3, r0
   2b278:	mla	r9, r4, r2, r0
   2b27c:	ldr	r0, [sp, #4]
   2b280:	cmp	r9, #0
   2b284:	str	r0, [sp, #8]
   2b288:	bmi	2b2c4 <__assert_fail@plt+0x19e14>
   2b28c:	ldr	r3, [sp, #28]
   2b290:	mvn	r0, #0
   2b294:	mvn	r1, #-2147483648	; 0x80000000
   2b298:	mvn	r4, #0
   2b29c:	mvn	r8, #-2147483648	; 0x80000000
   2b2a0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b2a4:	ldr	r2, [sp, #24]
   2b2a8:	ldr	r3, [sp, #28]
   2b2ac:	subs	r0, r0, r7
   2b2b0:	sbcs	r0, r1, r9
   2b2b4:	bge	2b300 <__assert_fail@plt+0x19e50>
   2b2b8:	mov	r0, #1
   2b2bc:	str	r0, [sp, #8]
   2b2c0:	b	2b314 <__assert_fail@plt+0x19e64>
   2b2c4:	mov	r0, #0
   2b2c8:	mov	r1, #-2147483648	; 0x80000000
   2b2cc:	mov	r2, r7
   2b2d0:	mov	r3, r9
   2b2d4:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b2d8:	ldr	r2, [sp, #24]
   2b2dc:	ldr	r3, [sp, #28]
   2b2e0:	subs	r0, r0, r2
   2b2e4:	sbcs	r0, r1, r3
   2b2e8:	bge	2b300 <__assert_fail@plt+0x19e50>
   2b2ec:	mov	r0, #1
   2b2f0:	mov	r4, #0
   2b2f4:	mov	r8, #-2147483648	; 0x80000000
   2b2f8:	str	r0, [sp, #8]
   2b2fc:	b	2b348 <__assert_fail@plt+0x19e98>
   2b300:	umull	r4, r0, r7, r2
   2b304:	mla	r0, r7, r3, r0
   2b308:	mla	r8, r9, r2, r0
   2b30c:	cmp	r8, #0
   2b310:	bmi	2b348 <__assert_fail@plt+0x19e98>
   2b314:	ldr	r3, [sp, #28]
   2b318:	mvn	r0, #0
   2b31c:	mvn	r1, #-2147483648	; 0x80000000
   2b320:	mvn	r6, #0
   2b324:	mvn	r9, #-2147483648	; 0x80000000
   2b328:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b32c:	ldr	r2, [sp, #24]
   2b330:	ldr	r3, [sp, #28]
   2b334:	subs	r0, r0, r4
   2b338:	sbcs	r0, r1, r8
   2b33c:	bge	2b380 <__assert_fail@plt+0x19ed0>
   2b340:	mov	r8, #1
   2b344:	b	2b398 <__assert_fail@plt+0x19ee8>
   2b348:	mov	r0, #0
   2b34c:	mov	r1, #-2147483648	; 0x80000000
   2b350:	mov	r2, r4
   2b354:	mov	r3, r8
   2b358:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b35c:	ldr	r2, [sp, #24]
   2b360:	ldr	r3, [sp, #28]
   2b364:	subs	r0, r0, r2
   2b368:	sbcs	r0, r1, r3
   2b36c:	bge	2b380 <__assert_fail@plt+0x19ed0>
   2b370:	mov	r8, #1
   2b374:	mov	r6, #0
   2b378:	mov	r9, #-2147483648	; 0x80000000
   2b37c:	b	2b3e8 <__assert_fail@plt+0x19f38>
   2b380:	umull	r6, r0, r4, r2
   2b384:	mla	r0, r4, r3, r0
   2b388:	mla	r9, r8, r2, r0
   2b38c:	ldr	r8, [sp, #8]
   2b390:	cmp	r9, #0
   2b394:	bmi	2b3e8 <__assert_fail@plt+0x19f38>
   2b398:	ldr	r3, [sp, #28]
   2b39c:	mvn	r0, #0
   2b3a0:	mvn	r1, #-2147483648	; 0x80000000
   2b3a4:	mvn	r4, #0
   2b3a8:	mvn	r7, #-2147483648	; 0x80000000
   2b3ac:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b3b0:	ldr	r3, [sp, #24]
   2b3b4:	ldr	ip, [sp, #28]
   2b3b8:	subs	r0, r0, r6
   2b3bc:	mov	r2, #1
   2b3c0:	sbcs	r0, r1, r9
   2b3c4:	blt	2b3d8 <__assert_fail@plt+0x19f28>
   2b3c8:	umull	r4, r0, r6, r3
   2b3cc:	mov	r2, #0
   2b3d0:	mla	r0, r6, ip, r0
   2b3d4:	mla	r7, r9, r3, r0
   2b3d8:	ldr	r9, [sp, #12]
   2b3dc:	orr	r3, r2, r8
   2b3e0:	mov	r6, r4
   2b3e4:	b	2b5d4 <__assert_fail@plt+0x1a124>
   2b3e8:	mov	r0, #0
   2b3ec:	mov	r1, #-2147483648	; 0x80000000
   2b3f0:	mov	r2, r6
   2b3f4:	mov	r3, r9
   2b3f8:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b3fc:	ldr	r3, [sp, #24]
   2b400:	ldr	ip, [sp, #28]
   2b404:	mov	r2, #1
   2b408:	mov	r4, #0
   2b40c:	mov	r7, #-2147483648	; 0x80000000
   2b410:	subs	r0, r0, r3
   2b414:	sbcs	r0, r1, ip
   2b418:	bge	2b3c8 <__assert_fail@plt+0x19f18>
   2b41c:	b	2b3d8 <__assert_fail@plt+0x19f28>
   2b420:	ldr	r6, [sp, #8]
   2b424:	mov	r0, #0
   2b428:	mov	r1, #-2147483648	; 0x80000000
   2b42c:	mov	r3, r8
   2b430:	str	r4, [sp, #4]
   2b434:	mov	r2, r6
   2b438:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b43c:	ldr	r2, [sp, #24]
   2b440:	ldr	r3, [sp, #28]
   2b444:	mov	r7, #1
   2b448:	mov	r9, #0
   2b44c:	mov	r4, #-2147483648	; 0x80000000
   2b450:	subs	r0, r0, r2
   2b454:	sbcs	r0, r1, r3
   2b458:	blt	2b4b0 <__assert_fail@plt+0x1a000>
   2b45c:	umull	r9, r0, r6, r2
   2b460:	ldr	r7, [sp, #4]
   2b464:	mla	r0, r6, r3, r0
   2b468:	mla	r4, r8, r2, r0
   2b46c:	cmp	r4, #0
   2b470:	bmi	2b4b0 <__assert_fail@plt+0x1a000>
   2b474:	ldr	r3, [sp, #28]
   2b478:	mvn	r0, #0
   2b47c:	mvn	r1, #-2147483648	; 0x80000000
   2b480:	str	r7, [sp, #4]
   2b484:	mvn	r8, #0
   2b488:	mvn	r7, #-2147483648	; 0x80000000
   2b48c:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b490:	ldr	r2, [sp, #24]
   2b494:	ldr	r3, [sp, #28]
   2b498:	subs	r0, r0, r9
   2b49c:	mov	r6, #1
   2b4a0:	sbcs	r0, r1, r4
   2b4a4:	str	r6, [sp, #8]
   2b4a8:	bge	2b4ec <__assert_fail@plt+0x1a03c>
   2b4ac:	b	2b508 <__assert_fail@plt+0x1a058>
   2b4b0:	mov	r0, #0
   2b4b4:	mov	r1, #-2147483648	; 0x80000000
   2b4b8:	mov	r2, r9
   2b4bc:	mov	r3, r4
   2b4c0:	str	r7, [sp, #4]
   2b4c4:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b4c8:	ldr	r2, [sp, #24]
   2b4cc:	ldr	r3, [sp, #28]
   2b4d0:	mov	r7, #1
   2b4d4:	mov	r8, #0
   2b4d8:	str	r7, [sp, #8]
   2b4dc:	mov	r7, #-2147483648	; 0x80000000
   2b4e0:	subs	r0, r0, r2
   2b4e4:	sbcs	r0, r1, r3
   2b4e8:	blt	2b53c <__assert_fail@plt+0x1a08c>
   2b4ec:	umull	r8, r0, r9, r2
   2b4f0:	mla	r0, r9, r3, r0
   2b4f4:	mla	r7, r4, r2, r0
   2b4f8:	ldr	r0, [sp, #4]
   2b4fc:	cmp	r7, #0
   2b500:	str	r0, [sp, #8]
   2b504:	bmi	2b53c <__assert_fail@plt+0x1a08c>
   2b508:	ldr	r3, [sp, #28]
   2b50c:	mvn	r0, #0
   2b510:	mvn	r1, #-2147483648	; 0x80000000
   2b514:	mvn	r4, #0
   2b518:	mvn	r9, #-2147483648	; 0x80000000
   2b51c:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b520:	ldr	r2, [sp, #24]
   2b524:	ldr	r3, [sp, #28]
   2b528:	subs	r0, r0, r8
   2b52c:	sbcs	r0, r1, r7
   2b530:	bge	2b574 <__assert_fail@plt+0x1a0c4>
   2b534:	mov	r8, #1
   2b538:	b	2b58c <__assert_fail@plt+0x1a0dc>
   2b53c:	mov	r0, #0
   2b540:	mov	r1, #-2147483648	; 0x80000000
   2b544:	mov	r2, r8
   2b548:	mov	r3, r7
   2b54c:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b550:	ldr	r2, [sp, #24]
   2b554:	ldr	r3, [sp, #28]
   2b558:	subs	r0, r0, r2
   2b55c:	sbcs	r0, r1, r3
   2b560:	bge	2b574 <__assert_fail@plt+0x1a0c4>
   2b564:	mov	r8, #1
   2b568:	mov	r4, #0
   2b56c:	mov	r9, #-2147483648	; 0x80000000
   2b570:	b	2b604 <__assert_fail@plt+0x1a154>
   2b574:	umull	r4, r0, r8, r2
   2b578:	mla	r0, r8, r3, r0
   2b57c:	ldr	r8, [sp, #8]
   2b580:	mla	r9, r7, r2, r0
   2b584:	cmp	r9, #0
   2b588:	bmi	2b604 <__assert_fail@plt+0x1a154>
   2b58c:	ldr	r3, [sp, #28]
   2b590:	mvn	r0, #0
   2b594:	mvn	r1, #-2147483648	; 0x80000000
   2b598:	mvn	r6, #0
   2b59c:	mvn	r7, #-2147483648	; 0x80000000
   2b5a0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b5a4:	ldr	r3, [sp, #24]
   2b5a8:	ldr	ip, [sp, #28]
   2b5ac:	subs	r0, r0, r4
   2b5b0:	mov	r2, #1
   2b5b4:	sbcs	r0, r1, r9
   2b5b8:	blt	2b5cc <__assert_fail@plt+0x1a11c>
   2b5bc:	umull	r6, r0, r4, r3
   2b5c0:	mov	r2, #0
   2b5c4:	mla	r0, r4, ip, r0
   2b5c8:	mla	r7, r9, r3, r0
   2b5cc:	ldr	r9, [sp, #12]
   2b5d0:	orr	r3, r2, r8
   2b5d4:	ldr	r1, [sp, #20]
   2b5d8:	ldr	r2, [sp, #16]
   2b5dc:	orr	r5, r3, r5
   2b5e0:	add	r0, r1, r2
   2b5e4:	str	r0, [sl]
   2b5e8:	ldrb	r0, [r1, r2]
   2b5ec:	cmp	r0, #0
   2b5f0:	orrne	r5, r5, #2
   2b5f4:	strd	r6, [r9]
   2b5f8:	mov	r0, r5
   2b5fc:	sub	sp, fp, #28
   2b600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b604:	mov	r0, #0
   2b608:	mov	r1, #-2147483648	; 0x80000000
   2b60c:	mov	r2, r4
   2b610:	mov	r3, r9
   2b614:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b618:	ldr	r3, [sp, #24]
   2b61c:	ldr	ip, [sp, #28]
   2b620:	mov	r2, #1
   2b624:	mov	r6, #0
   2b628:	mov	r7, #-2147483648	; 0x80000000
   2b62c:	subs	r0, r0, r3
   2b630:	sbcs	r0, r1, ip
   2b634:	bge	2b5bc <__assert_fail@plt+0x1a10c>
   2b638:	b	2b5cc <__assert_fail@plt+0x1a11c>
   2b63c:	ldr	r6, [sp, #8]
   2b640:	mov	r0, #0
   2b644:	mov	r1, #-2147483648	; 0x80000000
   2b648:	mov	r3, r9
   2b64c:	str	r4, [sp]
   2b650:	mov	r2, r6
   2b654:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b658:	ldr	r2, [sp, #24]
   2b65c:	ldr	r3, [sp, #28]
   2b660:	mov	r7, #1
   2b664:	mov	r8, #-2147483648	; 0x80000000
   2b668:	subs	r0, r0, r2
   2b66c:	sbcs	r0, r1, r3
   2b670:	mov	r0, #0
   2b674:	str	r0, [sp, #4]
   2b678:	blt	2b6d8 <__assert_fail@plt+0x1a228>
   2b67c:	umull	r1, r0, r6, r2
   2b680:	ldr	r7, [sp]
   2b684:	mla	r0, r6, r3, r0
   2b688:	mla	r8, r9, r2, r0
   2b68c:	str	r1, [sp, #4]
   2b690:	cmp	r8, #0
   2b694:	bmi	2b6d8 <__assert_fail@plt+0x1a228>
   2b698:	ldr	r3, [sp, #28]
   2b69c:	mvn	r0, #0
   2b6a0:	mvn	r1, #-2147483648	; 0x80000000
   2b6a4:	str	r7, [sp]
   2b6a8:	mvn	r7, #0
   2b6ac:	mvn	r4, #-2147483648	; 0x80000000
   2b6b0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b6b4:	mov	r6, #1
   2b6b8:	ldr	r2, [sp, #24]
   2b6bc:	ldr	r3, [sp, #28]
   2b6c0:	str	r6, [sp, #8]
   2b6c4:	ldr	r6, [sp, #4]
   2b6c8:	subs	r0, r0, r6
   2b6cc:	sbcs	r0, r1, r8
   2b6d0:	bge	2b718 <__assert_fail@plt+0x1a268>
   2b6d4:	b	2b734 <__assert_fail@plt+0x1a284>
   2b6d8:	ldr	r6, [sp, #4]
   2b6dc:	mov	r0, #0
   2b6e0:	mov	r1, #-2147483648	; 0x80000000
   2b6e4:	mov	r3, r8
   2b6e8:	str	r7, [sp]
   2b6ec:	mov	r2, r6
   2b6f0:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b6f4:	ldr	r2, [sp, #24]
   2b6f8:	ldr	r3, [sp, #28]
   2b6fc:	mov	r7, #1
   2b700:	mov	r4, #-2147483648	; 0x80000000
   2b704:	str	r7, [sp, #8]
   2b708:	mov	r7, #0
   2b70c:	subs	r0, r0, r2
   2b710:	sbcs	r0, r1, r3
   2b714:	blt	2b76c <__assert_fail@plt+0x1a2bc>
   2b718:	umull	r7, r0, r6, r2
   2b71c:	mla	r0, r6, r3, r0
   2b720:	mla	r4, r8, r2, r0
   2b724:	ldr	r0, [sp]
   2b728:	cmp	r4, #0
   2b72c:	str	r0, [sp, #8]
   2b730:	bmi	2b76c <__assert_fail@plt+0x1a2bc>
   2b734:	ldr	r3, [sp, #28]
   2b738:	mvn	r0, #0
   2b73c:	mvn	r1, #-2147483648	; 0x80000000
   2b740:	mvn	r9, #0
   2b744:	mvn	r8, #-2147483648	; 0x80000000
   2b748:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b74c:	ldr	r2, [sp, #24]
   2b750:	ldr	r3, [sp, #28]
   2b754:	subs	r0, r0, r7
   2b758:	sbcs	r0, r1, r4
   2b75c:	bge	2b7a8 <__assert_fail@plt+0x1a2f8>
   2b760:	mov	r0, #1
   2b764:	str	r0, [sp, #8]
   2b768:	b	2b7bc <__assert_fail@plt+0x1a30c>
   2b76c:	mov	r0, #0
   2b770:	mov	r1, #-2147483648	; 0x80000000
   2b774:	mov	r2, r7
   2b778:	mov	r3, r4
   2b77c:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b780:	ldr	r2, [sp, #24]
   2b784:	ldr	r3, [sp, #28]
   2b788:	subs	r0, r0, r2
   2b78c:	sbcs	r0, r1, r3
   2b790:	bge	2b7a8 <__assert_fail@plt+0x1a2f8>
   2b794:	mov	r0, #1
   2b798:	mov	r9, #0
   2b79c:	mov	r8, #-2147483648	; 0x80000000
   2b7a0:	str	r0, [sp, #8]
   2b7a4:	b	2b7f4 <__assert_fail@plt+0x1a344>
   2b7a8:	umull	r9, r0, r7, r2
   2b7ac:	mla	r0, r7, r3, r0
   2b7b0:	mla	r8, r4, r2, r0
   2b7b4:	cmp	r8, #0
   2b7b8:	bmi	2b7f4 <__assert_fail@plt+0x1a344>
   2b7bc:	ldr	r3, [sp, #28]
   2b7c0:	mvn	r0, #0
   2b7c4:	mvn	r1, #-2147483648	; 0x80000000
   2b7c8:	mvn	r4, #0
   2b7cc:	mvn	r7, #-2147483648	; 0x80000000
   2b7d0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b7d4:	ldr	r2, [sp, #24]
   2b7d8:	ldr	r3, [sp, #28]
   2b7dc:	subs	r0, r0, r9
   2b7e0:	sbcs	r0, r1, r8
   2b7e4:	bge	2b830 <__assert_fail@plt+0x1a380>
   2b7e8:	mov	r0, #1
   2b7ec:	str	r0, [sp, #8]
   2b7f0:	b	2b844 <__assert_fail@plt+0x1a394>
   2b7f4:	mov	r0, #0
   2b7f8:	mov	r1, #-2147483648	; 0x80000000
   2b7fc:	mov	r2, r9
   2b800:	mov	r3, r8
   2b804:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b808:	ldr	r2, [sp, #24]
   2b80c:	ldr	r3, [sp, #28]
   2b810:	subs	r0, r0, r2
   2b814:	sbcs	r0, r1, r3
   2b818:	bge	2b830 <__assert_fail@plt+0x1a380>
   2b81c:	mov	r0, #1
   2b820:	mov	r4, #0
   2b824:	mov	r7, #-2147483648	; 0x80000000
   2b828:	str	r0, [sp, #8]
   2b82c:	b	2b87c <__assert_fail@plt+0x1a3cc>
   2b830:	umull	r4, r0, r9, r2
   2b834:	mla	r0, r9, r3, r0
   2b838:	mla	r7, r8, r2, r0
   2b83c:	cmp	r7, #0
   2b840:	bmi	2b87c <__assert_fail@plt+0x1a3cc>
   2b844:	ldr	r3, [sp, #28]
   2b848:	mvn	r0, #0
   2b84c:	mvn	r1, #-2147483648	; 0x80000000
   2b850:	mvn	r8, #0
   2b854:	mvn	r9, #-2147483648	; 0x80000000
   2b858:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b85c:	ldr	r2, [sp, #24]
   2b860:	ldr	r3, [sp, #28]
   2b864:	subs	r0, r0, r4
   2b868:	sbcs	r0, r1, r7
   2b86c:	bge	2b8b8 <__assert_fail@plt+0x1a408>
   2b870:	mov	r0, #1
   2b874:	str	r0, [sp, #8]
   2b878:	b	2b8cc <__assert_fail@plt+0x1a41c>
   2b87c:	mov	r0, #0
   2b880:	mov	r1, #-2147483648	; 0x80000000
   2b884:	mov	r2, r4
   2b888:	mov	r3, r7
   2b88c:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b890:	ldr	r2, [sp, #24]
   2b894:	ldr	r3, [sp, #28]
   2b898:	subs	r0, r0, r2
   2b89c:	sbcs	r0, r1, r3
   2b8a0:	bge	2b8b8 <__assert_fail@plt+0x1a408>
   2b8a4:	mov	r0, #1
   2b8a8:	mov	r8, #0
   2b8ac:	mov	r9, #-2147483648	; 0x80000000
   2b8b0:	str	r0, [sp, #8]
   2b8b4:	b	2b908 <__assert_fail@plt+0x1a458>
   2b8b8:	umull	r8, r0, r4, r2
   2b8bc:	mla	r0, r4, r3, r0
   2b8c0:	mla	r9, r7, r2, r0
   2b8c4:	cmp	r9, #0
   2b8c8:	bmi	2b908 <__assert_fail@plt+0x1a458>
   2b8cc:	ldr	r3, [sp, #28]
   2b8d0:	mvn	r0, #0
   2b8d4:	mvn	r1, #-2147483648	; 0x80000000
   2b8d8:	mvn	r4, #0
   2b8dc:	mvn	r6, #-2147483648	; 0x80000000
   2b8e0:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b8e4:	ldr	r2, [sp, #24]
   2b8e8:	ldr	r3, [sp, #28]
   2b8ec:	subs	r0, r0, r8
   2b8f0:	sbcs	r0, r1, r9
   2b8f4:	bge	2b948 <__assert_fail@plt+0x1a498>
   2b8f8:	ldr	r9, [sp, #12]
   2b8fc:	mov	r0, #1
   2b900:	str	r0, [sp, #8]
   2b904:	b	2b960 <__assert_fail@plt+0x1a4b0>
   2b908:	mov	r0, #0
   2b90c:	mov	r1, #-2147483648	; 0x80000000
   2b910:	mov	r2, r8
   2b914:	mov	r3, r9
   2b918:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b91c:	ldr	r2, [sp, #24]
   2b920:	ldr	r3, [sp, #28]
   2b924:	subs	r0, r0, r2
   2b928:	sbcs	r0, r1, r3
   2b92c:	bge	2b948 <__assert_fail@plt+0x1a498>
   2b930:	ldr	r9, [sp, #12]
   2b934:	mov	r0, #1
   2b938:	mov	r4, #0
   2b93c:	mov	r6, #-2147483648	; 0x80000000
   2b940:	str	r0, [sp, #8]
   2b944:	b	2b9ac <__assert_fail@plt+0x1a4fc>
   2b948:	umull	r4, r0, r8, r2
   2b94c:	mla	r0, r8, r3, r0
   2b950:	mla	r6, r9, r2, r0
   2b954:	ldr	r9, [sp, #12]
   2b958:	cmp	r6, #0
   2b95c:	bmi	2b9ac <__assert_fail@plt+0x1a4fc>
   2b960:	ldr	r3, [sp, #28]
   2b964:	mvn	r0, #0
   2b968:	mvn	r1, #-2147483648	; 0x80000000
   2b96c:	mov	r8, r6
   2b970:	mvn	r6, #0
   2b974:	mvn	r7, #-2147483648	; 0x80000000
   2b978:	bl	2bf08 <__assert_fail@plt+0x1aa58>
   2b97c:	ldr	r3, [sp, #24]
   2b980:	ldr	ip, [sp, #28]
   2b984:	subs	r0, r0, r4
   2b988:	mov	r2, #1
   2b98c:	sbcs	r0, r1, r8
   2b990:	blt	2b9a4 <__assert_fail@plt+0x1a4f4>
   2b994:	umull	r6, r0, r4, r3
   2b998:	mov	r2, #0
   2b99c:	mla	r0, r4, ip, r0
   2b9a0:	mla	r7, r8, r3, r0
   2b9a4:	ldr	r0, [sp, #8]
   2b9a8:	b	2aaf0 <__assert_fail@plt+0x19640>
   2b9ac:	mov	r0, #0
   2b9b0:	mov	r1, #-2147483648	; 0x80000000
   2b9b4:	mov	r2, r4
   2b9b8:	mov	r3, r6
   2b9bc:	bl	2be34 <__assert_fail@plt+0x1a984>
   2b9c0:	ldr	r3, [sp, #24]
   2b9c4:	ldr	ip, [sp, #28]
   2b9c8:	mov	r8, r6
   2b9cc:	mov	r2, #1
   2b9d0:	mov	r6, #0
   2b9d4:	mov	r7, #-2147483648	; 0x80000000
   2b9d8:	subs	r0, r0, r3
   2b9dc:	sbcs	r0, r1, ip
   2b9e0:	bge	2b994 <__assert_fail@plt+0x1a4e4>
   2b9e4:	b	2b9a4 <__assert_fail@plt+0x1a4f4>
   2b9e8:	movw	r0, #54138	; 0xd37a
   2b9ec:	movw	r1, #54176	; 0xd3a0
   2b9f0:	movw	r3, #54192	; 0xd3b0
   2b9f4:	mov	r2, #85	; 0x55
   2b9f8:	movt	r0, #2
   2b9fc:	movt	r1, #2
   2ba00:	movt	r3, #2
   2ba04:	bl	114b0 <__assert_fail@plt>
   2ba08:	clz	r2, r1
   2ba0c:	clz	r3, r0
   2ba10:	lsr	r2, r2, #5
   2ba14:	lsr	r3, r3, #5
   2ba18:	orrs	r2, r3, r2
   2ba1c:	movwne	r1, #1
   2ba20:	movwne	r0, #1
   2ba24:	cmp	r1, #0
   2ba28:	beq	2ba58 <__assert_fail@plt+0x1a5a8>
   2ba2c:	mvn	r2, #-2147483648	; 0x80000000
   2ba30:	udiv	r2, r2, r1
   2ba34:	cmp	r2, r0
   2ba38:	bcs	2ba58 <__assert_fail@plt+0x1a5a8>
   2ba3c:	push	{fp, lr}
   2ba40:	mov	fp, sp
   2ba44:	bl	113a8 <__errno_location@plt>
   2ba48:	mov	r1, #12
   2ba4c:	str	r1, [r0]
   2ba50:	mov	r0, #0
   2ba54:	pop	{fp, pc}
   2ba58:	b	111b0 <calloc@plt>
   2ba5c:	cmp	r0, #0
   2ba60:	movweq	r0, #1
   2ba64:	cmn	r0, #1
   2ba68:	ble	2ba70 <__assert_fail@plt+0x1a5c0>
   2ba6c:	b	11318 <malloc@plt>
   2ba70:	push	{fp, lr}
   2ba74:	mov	fp, sp
   2ba78:	bl	113a8 <__errno_location@plt>
   2ba7c:	mov	r1, #12
   2ba80:	str	r1, [r0]
   2ba84:	mov	r0, #0
   2ba88:	pop	{fp, pc}
   2ba8c:	push	{fp, lr}
   2ba90:	mov	fp, sp
   2ba94:	cmp	r0, #0
   2ba98:	beq	2bab4 <__assert_fail@plt+0x1a604>
   2ba9c:	cmp	r1, #0
   2baa0:	beq	2bac0 <__assert_fail@plt+0x1a610>
   2baa4:	cmn	r1, #1
   2baa8:	ble	2bacc <__assert_fail@plt+0x1a61c>
   2baac:	pop	{fp, lr}
   2bab0:	b	112ac <realloc@plt>
   2bab4:	mov	r0, r1
   2bab8:	pop	{fp, lr}
   2babc:	b	2ba5c <__assert_fail@plt+0x1a5ac>
   2bac0:	bl	2bc28 <__assert_fail@plt+0x1a778>
   2bac4:	mov	r0, #0
   2bac8:	pop	{fp, pc}
   2bacc:	bl	113a8 <__errno_location@plt>
   2bad0:	mov	r1, #12
   2bad4:	str	r1, [r0]
   2bad8:	mov	r0, #0
   2badc:	pop	{fp, pc}
   2bae0:	push	{r4, r5, r6, sl, fp, lr}
   2bae4:	add	fp, sp, #16
   2bae8:	mov	r4, r0
   2baec:	bl	112f4 <__fpending@plt>
   2baf0:	ldr	r6, [r4]
   2baf4:	mov	r5, r0
   2baf8:	mov	r0, r4
   2bafc:	bl	12940 <__assert_fail@plt+0x1490>
   2bb00:	tst	r6, #32
   2bb04:	bne	2bb3c <__assert_fail@plt+0x1a68c>
   2bb08:	cmp	r0, #0
   2bb0c:	mov	r4, r0
   2bb10:	mvnne	r4, #0
   2bb14:	cmp	r5, #0
   2bb18:	bne	2bb48 <__assert_fail@plt+0x1a698>
   2bb1c:	cmp	r0, #0
   2bb20:	beq	2bb48 <__assert_fail@plt+0x1a698>
   2bb24:	bl	113a8 <__errno_location@plt>
   2bb28:	ldr	r0, [r0]
   2bb2c:	subs	r4, r0, #9
   2bb30:	mvnne	r4, #0
   2bb34:	mov	r0, r4
   2bb38:	pop	{r4, r5, r6, sl, fp, pc}
   2bb3c:	mvn	r4, #0
   2bb40:	cmp	r0, #0
   2bb44:	beq	2bb50 <__assert_fail@plt+0x1a6a0>
   2bb48:	mov	r0, r4
   2bb4c:	pop	{r4, r5, r6, sl, fp, pc}
   2bb50:	bl	113a8 <__errno_location@plt>
   2bb54:	mov	r1, #0
   2bb58:	str	r1, [r0]
   2bb5c:	mov	r0, r4
   2bb60:	pop	{r4, r5, r6, sl, fp, pc}
   2bb64:	push	{r4, r5, r6, r7, fp, lr}
   2bb68:	add	fp, sp, #16
   2bb6c:	mov	r4, r0
   2bb70:	ldr	r0, [r0, #4]
   2bb74:	mov	r5, r1
   2bb78:	cmp	r0, r1
   2bb7c:	bcs	2bbb0 <__assert_fail@plt+0x1a700>
   2bb80:	mov	r6, r3
   2bb84:	cmp	r3, #0
   2bb88:	beq	2bbbc <__assert_fail@plt+0x1a70c>
   2bb8c:	mvn	r0, #0
   2bb90:	udiv	r0, r0, r6
   2bb94:	cmp	r0, r5
   2bb98:	bcs	2bbbc <__assert_fail@plt+0x1a70c>
   2bb9c:	bl	113a8 <__errno_location@plt>
   2bba0:	mov	r1, #12
   2bba4:	str	r1, [r0]
   2bba8:	mov	r0, #0
   2bbac:	pop	{r4, r5, r6, r7, fp, pc}
   2bbb0:	mov	r0, #1
   2bbb4:	str	r5, [r4]
   2bbb8:	pop	{r4, r5, r6, r7, fp, pc}
   2bbbc:	ldr	r0, [r4, #8]
   2bbc0:	mul	r1, r6, r5
   2bbc4:	cmp	r0, r2
   2bbc8:	beq	2bbe0 <__assert_fail@plt+0x1a730>
   2bbcc:	bl	2ba8c <__assert_fail@plt+0x1a5dc>
   2bbd0:	mov	r7, r0
   2bbd4:	cmp	r0, #0
   2bbd8:	bne	2bc10 <__assert_fail@plt+0x1a760>
   2bbdc:	b	2bc20 <__assert_fail@plt+0x1a770>
   2bbe0:	mov	r0, r1
   2bbe4:	bl	2ba5c <__assert_fail@plt+0x1a5ac>
   2bbe8:	cmp	r0, #0
   2bbec:	beq	2bc20 <__assert_fail@plt+0x1a770>
   2bbf0:	ldr	r1, [r4, #8]
   2bbf4:	mov	r7, r0
   2bbf8:	cmp	r1, #0
   2bbfc:	beq	2bc10 <__assert_fail@plt+0x1a760>
   2bc00:	ldr	r0, [r4]
   2bc04:	mul	r2, r0, r6
   2bc08:	mov	r0, r7
   2bc0c:	bl	11258 <memcpy@plt>
   2bc10:	mov	r0, #1
   2bc14:	str	r5, [r4]
   2bc18:	stmib	r4, {r5, r7}
   2bc1c:	pop	{r4, r5, r6, r7, fp, pc}
   2bc20:	mov	r0, #0
   2bc24:	pop	{r4, r5, r6, r7, fp, pc}
   2bc28:	push	{r4, r5, r6, sl, fp, lr}
   2bc2c:	add	fp, sp, #16
   2bc30:	mov	r4, r0
   2bc34:	bl	113a8 <__errno_location@plt>
   2bc38:	ldr	r6, [r0]
   2bc3c:	mov	r5, r0
   2bc40:	mov	r0, r4
   2bc44:	bl	11234 <free@plt>
   2bc48:	str	r6, [r5]
   2bc4c:	pop	{r4, r5, r6, sl, fp, pc}
   2bc50:	push	{fp, lr}
   2bc54:	mov	fp, sp
   2bc58:	mov	r0, #14
   2bc5c:	bl	11450 <nl_langinfo@plt>
   2bc60:	movw	r1, #52110	; 0xcb8e
   2bc64:	cmp	r0, #0
   2bc68:	movt	r1, #2
   2bc6c:	movne	r1, r0
   2bc70:	movw	r0, #54270	; 0xd3fe
   2bc74:	ldrb	r2, [r1]
   2bc78:	movt	r0, #2
   2bc7c:	cmp	r2, #0
   2bc80:	movne	r0, r1
   2bc84:	pop	{fp, pc}
   2bc88:	push	{r4, r5, r6, r7, fp, lr}
   2bc8c:	add	fp, sp, #16
   2bc90:	sub	sp, sp, #8
   2bc94:	cmp	r0, #0
   2bc98:	add	r5, sp, #4
   2bc9c:	mov	r7, r2
   2bca0:	mov	r4, r1
   2bca4:	movne	r5, r0
   2bca8:	mov	r0, r5
   2bcac:	bl	11300 <mbrtowc@plt>
   2bcb0:	mov	r6, r0
   2bcb4:	cmp	r7, #0
   2bcb8:	beq	2bce0 <__assert_fail@plt+0x1a830>
   2bcbc:	cmn	r6, #2
   2bcc0:	bcc	2bce0 <__assert_fail@plt+0x1a830>
   2bcc4:	mov	r0, #0
   2bcc8:	bl	2bd28 <__assert_fail@plt+0x1a878>
   2bccc:	cmp	r0, #0
   2bcd0:	bne	2bce0 <__assert_fail@plt+0x1a830>
   2bcd4:	ldrb	r0, [r4]
   2bcd8:	mov	r6, #1
   2bcdc:	str	r0, [r5]
   2bce0:	mov	r0, r6
   2bce4:	sub	sp, fp, #16
   2bce8:	pop	{r4, r5, r6, r7, fp, pc}
   2bcec:	cmp	r2, #0
   2bcf0:	beq	2bd20 <__assert_fail@plt+0x1a870>
   2bcf4:	mvn	r3, #0
   2bcf8:	udiv	r3, r3, r2
   2bcfc:	cmp	r3, r1
   2bd00:	bcs	2bd20 <__assert_fail@plt+0x1a870>
   2bd04:	push	{fp, lr}
   2bd08:	mov	fp, sp
   2bd0c:	bl	113a8 <__errno_location@plt>
   2bd10:	mov	r1, #12
   2bd14:	str	r1, [r0]
   2bd18:	mov	r0, #0
   2bd1c:	pop	{fp, pc}
   2bd20:	mul	r1, r2, r1
   2bd24:	b	2ba8c <__assert_fail@plt+0x1a5dc>
   2bd28:	push	{r4, sl, fp, lr}
   2bd2c:	add	fp, sp, #8
   2bd30:	sub	sp, sp, #264	; 0x108
   2bd34:	add	r1, sp, #7
   2bd38:	movw	r2, #257	; 0x101
   2bd3c:	bl	2bd94 <__assert_fail@plt+0x1a8e4>
   2bd40:	mov	r4, #0
   2bd44:	cmp	r0, #0
   2bd48:	bne	2bd88 <__assert_fail@plt+0x1a8d8>
   2bd4c:	movw	r1, #54276	; 0xd404
   2bd50:	add	r0, sp, #7
   2bd54:	mov	r2, #2
   2bd58:	movt	r1, #2
   2bd5c:	bl	11384 <bcmp@plt>
   2bd60:	cmp	r0, #0
   2bd64:	beq	2bd88 <__assert_fail@plt+0x1a8d8>
   2bd68:	movw	r1, #54278	; 0xd406
   2bd6c:	add	r0, sp, #7
   2bd70:	mov	r2, #6
   2bd74:	movt	r1, #2
   2bd78:	bl	11384 <bcmp@plt>
   2bd7c:	cmp	r0, #0
   2bd80:	mov	r4, r0
   2bd84:	movwne	r4, #1
   2bd88:	mov	r0, r4
   2bd8c:	sub	sp, fp, #8
   2bd90:	pop	{r4, sl, fp, pc}
   2bd94:	push	{r4, r5, r6, r7, fp, lr}
   2bd98:	add	fp, sp, #16
   2bd9c:	mov	r4, r1
   2bda0:	mov	r1, #0
   2bda4:	mov	r6, r2
   2bda8:	bl	11438 <setlocale@plt>
   2bdac:	cmp	r0, #0
   2bdb0:	beq	2bde0 <__assert_fail@plt+0x1a930>
   2bdb4:	mov	r7, r0
   2bdb8:	bl	11390 <strlen@plt>
   2bdbc:	cmp	r0, r6
   2bdc0:	bcs	2bdfc <__assert_fail@plt+0x1a94c>
   2bdc4:	add	r2, r0, #1
   2bdc8:	mov	r0, r4
   2bdcc:	mov	r1, r7
   2bdd0:	bl	11258 <memcpy@plt>
   2bdd4:	mov	r5, #0
   2bdd8:	mov	r0, r5
   2bddc:	pop	{r4, r5, r6, r7, fp, pc}
   2bde0:	mov	r5, #22
   2bde4:	cmp	r6, #0
   2bde8:	beq	2be24 <__assert_fail@plt+0x1a974>
   2bdec:	mov	r0, #0
   2bdf0:	strb	r0, [r4]
   2bdf4:	mov	r0, r5
   2bdf8:	pop	{r4, r5, r6, r7, fp, pc}
   2bdfc:	mov	r5, #34	; 0x22
   2be00:	cmp	r6, #0
   2be04:	beq	2be24 <__assert_fail@plt+0x1a974>
   2be08:	sub	r6, r6, #1
   2be0c:	mov	r0, r4
   2be10:	mov	r1, r7
   2be14:	mov	r2, r6
   2be18:	bl	11258 <memcpy@plt>
   2be1c:	mov	r0, #0
   2be20:	strb	r0, [r4, r6]
   2be24:	mov	r0, r5
   2be28:	pop	{r4, r5, r6, r7, fp, pc}
   2be2c:	mov	r1, #0
   2be30:	b	11438 <setlocale@plt>
   2be34:	cmp	r3, #0
   2be38:	cmpeq	r2, #0
   2be3c:	bne	2be60 <__assert_fail@plt+0x1a9b0>
   2be40:	cmp	r1, #0
   2be44:	movlt	r1, #-2147483648	; 0x80000000
   2be48:	movlt	r0, #0
   2be4c:	blt	2be5c <__assert_fail@plt+0x1a9ac>
   2be50:	cmpeq	r0, #0
   2be54:	mvnne	r1, #-2147483648	; 0x80000000
   2be58:	mvnne	r0, #0
   2be5c:	b	2bf44 <__assert_fail@plt+0x1aa94>
   2be60:	sub	sp, sp, #8
   2be64:	push	{sp, lr}
   2be68:	cmp	r1, #0
   2be6c:	blt	2be8c <__assert_fail@plt+0x1a9dc>
   2be70:	cmp	r3, #0
   2be74:	blt	2bec0 <__assert_fail@plt+0x1aa10>
   2be78:	bl	2bf54 <__assert_fail@plt+0x1aaa4>
   2be7c:	ldr	lr, [sp, #4]
   2be80:	add	sp, sp, #8
   2be84:	pop	{r2, r3}
   2be88:	bx	lr
   2be8c:	rsbs	r0, r0, #0
   2be90:	sbc	r1, r1, r1, lsl #1
   2be94:	cmp	r3, #0
   2be98:	blt	2bee4 <__assert_fail@plt+0x1aa34>
   2be9c:	bl	2bf54 <__assert_fail@plt+0x1aaa4>
   2bea0:	ldr	lr, [sp, #4]
   2bea4:	add	sp, sp, #8
   2bea8:	pop	{r2, r3}
   2beac:	rsbs	r0, r0, #0
   2beb0:	sbc	r1, r1, r1, lsl #1
   2beb4:	rsbs	r2, r2, #0
   2beb8:	sbc	r3, r3, r3, lsl #1
   2bebc:	bx	lr
   2bec0:	rsbs	r2, r2, #0
   2bec4:	sbc	r3, r3, r3, lsl #1
   2bec8:	bl	2bf54 <__assert_fail@plt+0x1aaa4>
   2becc:	ldr	lr, [sp, #4]
   2bed0:	add	sp, sp, #8
   2bed4:	pop	{r2, r3}
   2bed8:	rsbs	r0, r0, #0
   2bedc:	sbc	r1, r1, r1, lsl #1
   2bee0:	bx	lr
   2bee4:	rsbs	r2, r2, #0
   2bee8:	sbc	r3, r3, r3, lsl #1
   2beec:	bl	2bf54 <__assert_fail@plt+0x1aaa4>
   2bef0:	ldr	lr, [sp, #4]
   2bef4:	add	sp, sp, #8
   2bef8:	pop	{r2, r3}
   2befc:	rsbs	r2, r2, #0
   2bf00:	sbc	r3, r3, r3, lsl #1
   2bf04:	bx	lr
   2bf08:	cmp	r3, #0
   2bf0c:	cmpeq	r2, #0
   2bf10:	bne	2bf28 <__assert_fail@plt+0x1aa78>
   2bf14:	cmp	r1, #0
   2bf18:	cmpeq	r0, #0
   2bf1c:	mvnne	r1, #0
   2bf20:	mvnne	r0, #0
   2bf24:	b	2bf44 <__assert_fail@plt+0x1aa94>
   2bf28:	sub	sp, sp, #8
   2bf2c:	push	{sp, lr}
   2bf30:	bl	2bf54 <__assert_fail@plt+0x1aaa4>
   2bf34:	ldr	lr, [sp, #4]
   2bf38:	add	sp, sp, #8
   2bf3c:	pop	{r2, r3}
   2bf40:	bx	lr
   2bf44:	push	{r1, lr}
   2bf48:	mov	r0, #8
   2bf4c:	bl	111d4 <raise@plt>
   2bf50:	pop	{r1, pc}
   2bf54:	cmp	r1, r3
   2bf58:	cmpeq	r0, r2
   2bf5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf60:	mov	r4, r0
   2bf64:	movcc	r0, #0
   2bf68:	mov	r5, r1
   2bf6c:	ldr	lr, [sp, #36]	; 0x24
   2bf70:	movcc	r1, r0
   2bf74:	bcc	2c070 <__assert_fail@plt+0x1abc0>
   2bf78:	cmp	r3, #0
   2bf7c:	clzeq	ip, r2
   2bf80:	clzne	ip, r3
   2bf84:	addeq	ip, ip, #32
   2bf88:	cmp	r5, #0
   2bf8c:	clzeq	r1, r4
   2bf90:	addeq	r1, r1, #32
   2bf94:	clzne	r1, r5
   2bf98:	sub	ip, ip, r1
   2bf9c:	sub	sl, ip, #32
   2bfa0:	lsl	r9, r3, ip
   2bfa4:	rsb	fp, ip, #32
   2bfa8:	orr	r9, r9, r2, lsl sl
   2bfac:	orr	r9, r9, r2, lsr fp
   2bfb0:	lsl	r8, r2, ip
   2bfb4:	cmp	r5, r9
   2bfb8:	cmpeq	r4, r8
   2bfbc:	movcc	r0, #0
   2bfc0:	movcc	r1, r0
   2bfc4:	bcc	2bfe0 <__assert_fail@plt+0x1ab30>
   2bfc8:	mov	r0, #1
   2bfcc:	subs	r4, r4, r8
   2bfd0:	lsl	r1, r0, sl
   2bfd4:	orr	r1, r1, r0, lsr fp
   2bfd8:	lsl	r0, r0, ip
   2bfdc:	sbc	r5, r5, r9
   2bfe0:	cmp	ip, #0
   2bfe4:	beq	2c070 <__assert_fail@plt+0x1abc0>
   2bfe8:	lsr	r6, r8, #1
   2bfec:	orr	r6, r6, r9, lsl #31
   2bff0:	lsr	r7, r9, #1
   2bff4:	mov	r2, ip
   2bff8:	b	2c01c <__assert_fail@plt+0x1ab6c>
   2bffc:	subs	r3, r4, r6
   2c000:	sbc	r8, r5, r7
   2c004:	adds	r3, r3, r3
   2c008:	adc	r8, r8, r8
   2c00c:	adds	r4, r3, #1
   2c010:	adc	r5, r8, #0
   2c014:	subs	r2, r2, #1
   2c018:	beq	2c038 <__assert_fail@plt+0x1ab88>
   2c01c:	cmp	r5, r7
   2c020:	cmpeq	r4, r6
   2c024:	bcs	2bffc <__assert_fail@plt+0x1ab4c>
   2c028:	adds	r4, r4, r4
   2c02c:	adc	r5, r5, r5
   2c030:	subs	r2, r2, #1
   2c034:	bne	2c01c <__assert_fail@plt+0x1ab6c>
   2c038:	lsr	r3, r4, ip
   2c03c:	orr	r3, r3, r5, lsl fp
   2c040:	lsr	r2, r5, ip
   2c044:	orr	r3, r3, r5, lsr sl
   2c048:	adds	r0, r0, r4
   2c04c:	mov	r4, r3
   2c050:	lsl	r3, r2, ip
   2c054:	orr	r3, r3, r4, lsl sl
   2c058:	lsl	ip, r4, ip
   2c05c:	orr	r3, r3, r4, lsr fp
   2c060:	adc	r1, r1, r5
   2c064:	subs	r0, r0, ip
   2c068:	mov	r5, r2
   2c06c:	sbc	r1, r1, r3
   2c070:	cmp	lr, #0
   2c074:	strdne	r4, [lr]
   2c078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c07c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c080:	mov	r7, r0
   2c084:	ldr	r6, [pc, #72]	; 2c0d4 <__assert_fail@plt+0x1ac24>
   2c088:	ldr	r5, [pc, #72]	; 2c0d8 <__assert_fail@plt+0x1ac28>
   2c08c:	add	r6, pc, r6
   2c090:	add	r5, pc, r5
   2c094:	sub	r6, r6, r5
   2c098:	mov	r8, r1
   2c09c:	mov	r9, r2
   2c0a0:	bl	11184 <pthread_mutex_unlock@plt-0x20>
   2c0a4:	asrs	r6, r6, #2
   2c0a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c0ac:	mov	r4, #0
   2c0b0:	add	r4, r4, #1
   2c0b4:	ldr	r3, [r5], #4
   2c0b8:	mov	r2, r9
   2c0bc:	mov	r1, r8
   2c0c0:	mov	r0, r7
   2c0c4:	blx	r3
   2c0c8:	cmp	r6, r4
   2c0cc:	bne	2c0b0 <__assert_fail@plt+0x1ac00>
   2c0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c0d4:	andeq	r1, r1, r8, ror lr
   2c0d8:	andeq	r1, r1, r0, ror lr
   2c0dc:	bx	lr
   2c0e0:	ldr	r3, [pc, #12]	; 2c0f4 <__assert_fail@plt+0x1ac44>
   2c0e4:	mov	r1, #0
   2c0e8:	add	r3, pc, r3
   2c0ec:	ldr	r2, [r3]
   2c0f0:	b	113c0 <__cxa_atexit@plt>
   2c0f4:	andeq	r2, r1, ip, lsr #32

Disassembly of section .fini:

0002c0f8 <.fini>:
   2c0f8:	push	{r3, lr}
   2c0fc:	pop	{r3, pc}
