
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	126b8 <__assert_fail@plt+0x152c>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <fdopen@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <fdopen@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	r2, r2, r4, asr r1

00010eb0 <fdopen@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #139264	; 0x22000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <calloc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #139264	; 0x22000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <fputs_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #139264	; 0x22000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <raise@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #139264	; 0x22000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <__getdelim@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #139264	; 0x22000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <strcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #139264	; 0x22000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <posix_fadvise64@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #139264	; 0x22000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <fflush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #139264	; 0x22000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <free@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #139264	; 0x22000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <ferror@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #139264	; 0x22000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <_exit@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #139264	; 0x22000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <memcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #139264	; 0x22000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <__strtoull_internal@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #139264	; 0x22000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #139264	; 0x22000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <fwrite_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #139264	; 0x22000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <memcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #139264	; 0x22000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fputc_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #139264	; 0x22000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <dcgettext@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #139264	; 0x22000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <realloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #139264	; 0x22000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <textdomain@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #139264	; 0x22000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <iswprint@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #139264	; 0x22000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <__memcpy_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #139264	; 0x22000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <fwrite@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #139264	; 0x22000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <lseek64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #139264	; 0x22000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <__ctype_get_mb_cur_max@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #139264	; 0x22000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <fread@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #139264	; 0x22000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__fpending@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #139264	; 0x22000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <mbrtowc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #139264	; 0x22000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <error@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #139264	; 0x22000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #139264	; 0x22000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #139264	; 0x22000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #139264	; 0x22000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <__ctype_tolower_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #139264	; 0x22000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <__gmon_start__@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #139264	; 0x22000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <getopt_long@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #139264	; 0x22000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #139264	; 0x22000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #139264	; 0x22000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <feof@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #139264	; 0x22000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #139264	; 0x22000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #139264	; 0x22000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #139264	; 0x22000
   11098:	ldr	pc, [ip, #20]!

0001109c <__cxa_atexit@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #139264	; 0x22000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <setvbuf@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #139264	; 0x22000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #135168	; 0x21000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <__printf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #135168	; 0x21000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <fileno@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #135168	; 0x21000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <__fprintf_chk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #135168	; 0x21000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <fclose@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #135168	; 0x21000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <fseeko64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #135168	; 0x21000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <fcntl64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #135168	; 0x21000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <__overflow@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #135168	; 0x21000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #135168	; 0x21000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #135168	; 0x21000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #135168	; 0x21000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <clearerr_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #135168	; 0x21000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <fopen64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #135168	; 0x21000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #135168	; 0x21000
   11158:	ldr	pc, [ip, #3988]!	; 0xf94

0001115c <strncmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #135168	; 0x21000
   11164:	ldr	pc, [ip, #3980]!	; 0xf8c

00011168 <abort@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #135168	; 0x21000
   11170:	ldr	pc, [ip, #3972]!	; 0xf84

00011174 <close@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #135168	; 0x21000
   1117c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011180 <dcngettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #135168	; 0x21000
   11188:	ldr	pc, [ip, #3956]!	; 0xf74

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #135168	; 0x21000
   11194:	ldr	pc, [ip, #3948]!	; 0xf6c

Disassembly of section .text:

00011198 <.text>:
   11198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1119c:	mov	r6, r0
   111a0:	sub	sp, sp, #300	; 0x12c
   111a4:	ldr	r0, [r1]
   111a8:	mov	r5, r1
   111ac:	bl	1a600 <__assert_fail@plt+0x9474>
   111b0:	ldr	r1, [pc, #3868]	; 120d4 <__assert_fail@plt+0xf48>
   111b4:	mov	r0, #6
   111b8:	bl	11114 <setlocale@plt>
   111bc:	ldr	r1, [pc, #3860]	; 120d8 <__assert_fail@plt+0xf4c>
   111c0:	ldr	r0, [pc, #3860]	; 120dc <__assert_fail@plt+0xf50>
   111c4:	bl	11150 <bindtextdomain@plt>
   111c8:	ldr	r0, [pc, #3852]	; 120dc <__assert_fail@plt+0xf50>
   111cc:	bl	10f94 <textdomain@plt>
   111d0:	ldr	r0, [pc, #3848]	; 120e0 <__assert_fail@plt+0xf54>
   111d4:	bl	21270 <__assert_fail@plt+0x100e4>
   111d8:	ldr	r2, [pc, #3844]	; 120e4 <__assert_fail@plt+0xf58>
   111dc:	ldr	r8, [pc, #3844]	; 120e8 <__assert_fail@plt+0xf5c>
   111e0:	ldr	r7, [pc, #3844]	; 120ec <__assert_fail@plt+0xf60>
   111e4:	ldr	r9, [pc, #3844]	; 120f0 <__assert_fail@plt+0xf64>
   111e8:	mov	r3, #0
   111ec:	ldr	fp, [pc, #3808]	; 120d4 <__assert_fail@plt+0xf48>
   111f0:	mvn	sl, #0
   111f4:	ldr	r0, [r2]
   111f8:	mov	r4, r3
   111fc:	mov	r1, r3
   11200:	mov	r2, #1
   11204:	str	r3, [sp, #36]	; 0x24
   11208:	bl	110a8 <setvbuf@plt>
   1120c:	str	fp, [sp, #24]
   11210:	str	r4, [sp, #28]
   11214:	mov	r4, #0
   11218:	str	r4, [sp]
   1121c:	mov	r3, r8
   11220:	mov	r2, r7
   11224:	mov	r1, r5
   11228:	mov	r0, r6
   1122c:	bl	11048 <getopt_long@plt>
   11230:	cmn	r0, #1
   11234:	beq	11424 <__assert_fail@plt+0x298>
   11238:	cmp	r0, #119	; 0x77
   1123c:	beq	11410 <__assert_fail@plt+0x284>
   11240:	bgt	11270 <__assert_fail@plt+0xe4>
   11244:	cmp	r0, #98	; 0x62
   11248:	beq	11408 <__assert_fail@plt+0x27c>
   1124c:	ble	112a8 <__assert_fail@plt+0x11c>
   11250:	cmp	r0, #108	; 0x6c
   11254:	beq	11368 <__assert_fail@plt+0x1dc>
   11258:	cmp	r0, #116	; 0x74
   1125c:	beq	112dc <__assert_fail@plt+0x150>
   11260:	cmp	r0, #99	; 0x63
   11264:	beq	1133c <__assert_fail@plt+0x1b0>
   11268:	mov	r0, #1
   1126c:	bl	12a50 <__assert_fail@plt+0x18c4>
   11270:	ldr	r3, [pc, #3708]	; 120f4 <__assert_fail@plt+0xf68>
   11274:	cmp	r0, r3
   11278:	beq	11354 <__assert_fail@plt+0x1c8>
   1127c:	ble	112c0 <__assert_fail@plt+0x134>
   11280:	ldr	r3, [pc, #3696]	; 120f8 <__assert_fail@plt+0xf6c>
   11284:	cmp	r0, r3
   11288:	beq	11348 <__assert_fail@plt+0x1bc>
   1128c:	blt	11328 <__assert_fail@plt+0x19c>
   11290:	cmp	r0, #260	; 0x104
   11294:	bne	11268 <__assert_fail@plt+0xdc>
   11298:	mov	r3, #1
   1129c:	str	r3, [sp, #36]	; 0x24
   112a0:	mov	sl, r3
   112a4:	b	11214 <__assert_fail@plt+0x88>
   112a8:	cmn	r0, #3
   112ac:	beq	112f0 <__assert_fail@plt+0x164>
   112b0:	cmn	r0, #2
   112b4:	bne	11268 <__assert_fail@plt+0xdc>
   112b8:	mov	r0, r4
   112bc:	bl	12a50 <__assert_fail@plt+0x18c4>
   112c0:	cmp	r0, #122	; 0x7a
   112c4:	beq	112e4 <__assert_fail@plt+0x158>
   112c8:	cmp	r0, #256	; 0x100
   112cc:	bne	11268 <__assert_fail@plt+0xdc>
   112d0:	mov	r3, #1
   112d4:	strb	r3, [r9, #16]
   112d8:	b	11214 <__assert_fail@plt+0x88>
   112dc:	mov	sl, r4
   112e0:	b	11214 <__assert_fail@plt+0x88>
   112e4:	ldr	r3, [pc, #3772]	; 121a8 <__assert_fail@plt+0x101c>
   112e8:	strb	r4, [r3]
   112ec:	b	11214 <__assert_fail@plt+0x88>
   112f0:	ldr	r3, [pc, #3588]	; 120fc <__assert_fail@plt+0xf70>
   112f4:	ldr	r0, [pc, #3560]	; 120e4 <__assert_fail@plt+0xf58>
   112f8:	ldr	r1, [pc, #3584]	; 12100 <__assert_fail@plt+0xf74>
   112fc:	ldr	r2, [pc, #3584]	; 12104 <__assert_fail@plt+0xf78>
   11300:	str	r4, [sp, #8]
   11304:	ldr	r0, [r0]
   11308:	ldr	r3, [r3]
   1130c:	str	r1, [sp, #4]
   11310:	str	r2, [sp]
   11314:	ldr	r1, [pc, #3564]	; 12108 <__assert_fail@plt+0xf7c>
   11318:	ldr	r2, [pc, #3564]	; 1210c <__assert_fail@plt+0xf80>
   1131c:	bl	1eeac <__assert_fail@plt+0xdd20>
   11320:	mov	r0, r4
   11324:	bl	11060 <exit@plt>
   11328:	mov	r3, #1
   1132c:	strb	r4, [r9, #17]
   11330:	strb	r4, [r9, #18]
   11334:	strb	r3, [r9, #19]
   11338:	b	11214 <__assert_fail@plt+0x88>
   1133c:	mov	r3, #1
   11340:	str	r3, [sp, #28]
   11344:	b	11214 <__assert_fail@plt+0x88>
   11348:	mov	r3, #1
   1134c:	strb	r3, [r9, #20]
   11350:	b	11214 <__assert_fail@plt+0x88>
   11354:	mov	r3, #1
   11358:	strb	r4, [r9, #18]
   1135c:	strb	r4, [r9, #19]
   11360:	strb	r3, [r9, #17]
   11364:	b	11214 <__assert_fail@plt+0x88>
   11368:	ldr	r3, [pc, #3488]	; 12110 <__assert_fail@plt+0xf84>
   1136c:	mov	r2, #5
   11370:	ldr	r1, [pc, #3484]	; 12114 <__assert_fail@plt+0xf88>
   11374:	ldr	r3, [r3]
   11378:	mov	r0, r4
   1137c:	str	r3, [sp, #24]
   11380:	bl	10f7c <dcgettext@plt>
   11384:	mvn	r2, #0
   11388:	mvn	r3, #0
   1138c:	str	r4, [sp, #16]
   11390:	strd	r2, [sp]
   11394:	str	fp, [sp, #8]
   11398:	mov	r2, #0
   1139c:	mov	r3, #0
   113a0:	str	r0, [sp, #12]
   113a4:	ldr	r0, [sp, #24]
   113a8:	bl	1f858 <__assert_fail@plt+0xe6cc>
   113ac:	mov	r3, #0
   113b0:	and	r2, r0, #7
   113b4:	orrs	r3, r2, r3
   113b8:	ldr	r3, [pc, #3408]	; 12110 <__assert_fail@plt+0xf84>
   113bc:	strd	r0, [r9, #8]
   113c0:	ldr	r3, [r3]
   113c4:	str	r3, [sp, #24]
   113c8:	beq	11214 <__assert_fail@plt+0x88>
   113cc:	mov	r2, #5
   113d0:	ldr	r1, [pc, #3552]	; 121b8 <__assert_fail@plt+0x102c>
   113d4:	mov	r0, r4
   113d8:	bl	10f7c <dcgettext@plt>
   113dc:	mov	r5, r0
   113e0:	ldr	r0, [sp, #24]
   113e4:	bl	1e4cc <__assert_fail@plt+0xd340>
   113e8:	mov	r2, r5
   113ec:	mov	r1, r4
   113f0:	mov	r3, r0
   113f4:	mov	r0, r4
   113f8:	bl	11000 <error@plt>
   113fc:	mov	r2, #5
   11400:	ldr	r1, [pc, #3344]	; 12118 <__assert_fail@plt+0xf8c>
   11404:	b	1203c <__assert_fail@plt+0xeb0>
   11408:	mov	sl, #1
   1140c:	b	11214 <__assert_fail@plt+0x88>
   11410:	mov	r3, #1
   11414:	strb	r4, [r9, #17]
   11418:	strb	r4, [r9, #19]
   1141c:	strb	r3, [r9, #18]
   11420:	b	11214 <__assert_fail@plt+0x88>
   11424:	ldr	r9, [pc, #3268]	; 120f0 <__assert_fail@plt+0xf64>
   11428:	mov	r1, #3
   1142c:	ldrd	r2, [r9, #8]
   11430:	str	r1, [r9, #24]
   11434:	cmp	r3, #0
   11438:	cmpeq	r2, #512	; 0x200
   1143c:	bhi	12614 <__assert_fail@plt+0x1488>
   11440:	orrs	r3, r2, r3
   11444:	beq	11fa8 <__assert_fail@plt+0xe1c>
   11448:	ldr	r3, [r9, #8]
   1144c:	ldr	r2, [r9, #12]
   11450:	ldr	r7, [sp, #36]	; 0x24
   11454:	lsr	r3, r3, #2
   11458:	cmp	sl, #0
   1145c:	movne	r7, #0
   11460:	andeq	r7, r7, #1
   11464:	orr	r3, r3, r2, lsl #30
   11468:	cmp	r7, #0
   1146c:	str	r3, [r9, #28]
   11470:	bne	125b8 <__assert_fail@plt+0x142c>
   11474:	ldr	r3, [pc, #3372]	; 121a8 <__assert_fail@plt+0x101c>
   11478:	ldrb	r4, [r3]
   1147c:	ldr	r3, [sp, #28]
   11480:	cmp	r4, #10
   11484:	moveq	r3, #0
   11488:	andne	r3, r3, #1
   1148c:	cmp	r3, #0
   11490:	movne	r2, #5
   11494:	ldrne	r1, [pc, #3200]	; 1211c <__assert_fail@plt+0xf90>
   11498:	bne	125c0 <__assert_fail@plt+0x1434>
   1149c:	ldr	r2, [sp, #36]	; 0x24
   114a0:	ldr	r3, [sp, #28]
   114a4:	ands	r7, r3, r2
   114a8:	movne	r2, #5
   114ac:	ldrne	r1, [pc, #3180]	; 12120 <__assert_fail@plt+0xf94>
   114b0:	bne	125c0 <__assert_fail@plt+0x1434>
   114b4:	ldr	r4, [sp, #28]
   114b8:	cmp	sl, #0
   114bc:	movlt	r4, #0
   114c0:	andge	r4, r4, #1
   114c4:	cmp	r4, #0
   114c8:	movne	r2, #5
   114cc:	ldrne	r1, [pc, #3152]	; 12124 <__assert_fail@plt+0xf98>
   114d0:	bne	125c0 <__assert_fail@plt+0x1434>
   114d4:	ldrb	r7, [r9, #16]
   114d8:	ldr	r3, [sp, #28]
   114dc:	eor	r7, r7, #1
   114e0:	orrs	r7, r3, r7
   114e4:	moveq	r2, #5
   114e8:	ldreq	r1, [pc, #3128]	; 12128 <__assert_fail@plt+0xf9c>
   114ec:	beq	125c0 <__assert_fail@plt+0x1434>
   114f0:	ldrb	r7, [r9, #17]
   114f4:	ldr	r3, [sp, #28]
   114f8:	eor	r7, r7, #1
   114fc:	orrs	r7, r3, r7
   11500:	moveq	r2, #5
   11504:	ldreq	r1, [pc, #3104]	; 1212c <__assert_fail@plt+0xfa0>
   11508:	beq	125c0 <__assert_fail@plt+0x1434>
   1150c:	ldrb	r7, [r9, #18]
   11510:	ldr	r3, [sp, #28]
   11514:	eor	r7, r7, #1
   11518:	orrs	r7, r3, r7
   1151c:	moveq	r2, #5
   11520:	ldreq	r1, [pc, #3080]	; 12130 <__assert_fail@plt+0xfa4>
   11524:	beq	125c0 <__assert_fail@plt+0x1434>
   11528:	ldrb	r3, [r9, #19]
   1152c:	ldr	r2, [sp, #28]
   11530:	eor	r3, r3, #1
   11534:	orrs	r3, r2, r3
   11538:	str	r3, [sp, #60]	; 0x3c
   1153c:	moveq	r2, #5
   11540:	ldreq	r1, [pc, #3052]	; 12134 <__assert_fail@plt+0xfa8>
   11544:	beq	125c0 <__assert_fail@plt+0x1434>
   11548:	ldrb	r2, [r9, #20]
   1154c:	ldr	r3, [sp, #28]
   11550:	eor	r3, r3, #1
   11554:	ands	r3, r2, r3
   11558:	str	r3, [sp, #56]	; 0x38
   1155c:	movne	r2, #5
   11560:	ldrne	r1, [pc, #3024]	; 12138 <__assert_fail@plt+0xfac>
   11564:	bne	125c0 <__assert_fail@plt+0x1434>
   11568:	ldr	r3, [pc, #3020]	; 1213c <__assert_fail@plt+0xfb0>
   1156c:	cmn	sl, #1
   11570:	add	r2, r5, r6, lsl #2
   11574:	ldr	r3, [r3]
   11578:	moveq	sl, #0
   1157c:	cmp	r6, r3
   11580:	str	r2, [sp, #72]	; 0x48
   11584:	addeq	r2, r2, #4
   11588:	streq	r2, [sp, #72]	; 0x48
   1158c:	ldreq	r2, [pc, #2988]	; 12140 <__assert_fail@plt+0xfb4>
   11590:	add	r3, r5, r3, lsl #2
   11594:	streq	r2, [r5, r6, lsl #2]
   11598:	cmp	sl, #0
   1159c:	movne	r2, #42	; 0x2a
   115a0:	moveq	r2, #32
   115a4:	str	r3, [sp, #32]
   115a8:	uxtb	r3, r2
   115ac:	str	r3, [sp, #120]	; 0x78
   115b0:	add	r3, sp, #224	; 0xe0
   115b4:	str	r2, [sp, #124]	; 0x7c
   115b8:	str	r3, [sp, #100]	; 0x64
   115bc:	ldr	r3, [sp, #72]	; 0x48
   115c0:	ldr	r2, [sp, #32]
   115c4:	cmp	r3, r2
   115c8:	bls	11f88 <__assert_fail@plt+0xdfc>
   115cc:	ldr	r3, [sp, #28]
   115d0:	cmp	r3, #0
   115d4:	ldr	r3, [sp, #32]
   115d8:	ldr	r5, [r3], #4
   115dc:	str	r3, [sp, #32]
   115e0:	beq	11bf8 <__assert_fail@plt+0xa6c>
   115e4:	ldr	r1, [pc, #2900]	; 12140 <__assert_fail@plt+0xfb4>
   115e8:	mov	r0, r5
   115ec:	bl	10eec <strcmp@plt>
   115f0:	subs	r3, r0, #0
   115f4:	str	r3, [sp, #64]	; 0x40
   115f8:	bne	11e2c <__assert_fail@plt+0xca0>
   115fc:	mov	r3, #1
   11600:	mov	r2, #5
   11604:	ldr	r1, [pc, #2872]	; 12144 <__assert_fail@plt+0xfb8>
   11608:	strb	r3, [r9]
   1160c:	bl	10f7c <dcgettext@plt>
   11610:	ldr	r3, [pc, #2864]	; 12148 <__assert_fail@plt+0xfbc>
   11614:	ldr	r7, [r3]
   11618:	str	r0, [sp, #76]	; 0x4c
   1161c:	mov	r3, #0
   11620:	mov	r2, #0
   11624:	add	r8, sp, #296	; 0x128
   11628:	strd	r2, [sp, #88]	; 0x58
   1162c:	strd	r2, [sp, #80]	; 0x50
   11630:	strd	r2, [sp, #40]	; 0x28
   11634:	ldr	r3, [sp, #56]	; 0x38
   11638:	mov	r1, #0
   1163c:	str	r1, [r8, #-160]!	; 0xffffff60
   11640:	str	r1, [sp, #132]	; 0x84
   11644:	str	r3, [sp, #112]	; 0x70
   11648:	str	r3, [sp, #96]	; 0x60
   1164c:	mov	sl, #1
   11650:	mov	fp, #0
   11654:	str	r8, [sp, #24]
   11658:	b	11678 <__assert_fail@plt+0x4ec>
   1165c:	ldr	r3, [r7]
   11660:	ands	r3, r3, #48	; 0x30
   11664:	bne	11c18 <__assert_fail@plt+0xa8c>
   11668:	adds	sl, sl, #1
   1166c:	adc	fp, fp, #0
   11670:	orrs	r2, sl, fp
   11674:	beq	1228c <__assert_fail@plt+0x1100>
   11678:	mov	r3, r7
   1167c:	mov	r2, #10
   11680:	ldr	r1, [sp, #24]
   11684:	add	r0, sp, #132	; 0x84
   11688:	bl	10ee0 <__getdelim@plt>
   1168c:	subs	r4, r0, #0
   11690:	ble	11c18 <__assert_fail@plt+0xa8c>
   11694:	ldr	r3, [sp, #132]	; 0x84
   11698:	ldrb	r2, [r3]
   1169c:	cmp	r2, #35	; 0x23
   116a0:	beq	1165c <__assert_fail@plt+0x4d0>
   116a4:	add	r2, r3, r4
   116a8:	ldrb	r0, [r2, #-1]
   116ac:	cmp	r0, #10
   116b0:	subeq	r4, r4, #1
   116b4:	cmp	r4, #0
   116b8:	movle	r2, r4
   116bc:	subgt	r2, r4, #1
   116c0:	ldrb	r0, [r3, r2]
   116c4:	cmp	r0, #13
   116c8:	subeq	r4, r4, #1
   116cc:	cmp	r4, #0
   116d0:	beq	1165c <__assert_fail@plt+0x4d0>
   116d4:	mov	r2, #0
   116d8:	strb	r2, [r3, r4]
   116dc:	ldr	r6, [sp, #132]	; 0x84
   116e0:	ldrb	r3, [r6]
   116e4:	cmp	r3, #9
   116e8:	cmpne	r3, #32
   116ec:	moveq	r5, #1
   116f0:	movne	r5, #0
   116f4:	bne	11714 <__assert_fail@plt+0x588>
   116f8:	mov	r2, r6
   116fc:	mov	r5, #0
   11700:	ldrb	r3, [r2, #1]!
   11704:	add	r5, r5, #1
   11708:	cmp	r3, #9
   1170c:	cmpne	r3, #32
   11710:	beq	11700 <__assert_fail@plt+0x574>
   11714:	cmp	r3, #92	; 0x5c
   11718:	addeq	r5, r5, #1
   1171c:	ldreq	r3, [sp, #28]
   11720:	ldrne	r3, [sp, #56]	; 0x38
   11724:	add	r8, r6, r5
   11728:	mov	r2, #7
   1172c:	mov	r0, r8
   11730:	ldr	r1, [pc, #2696]	; 121c0 <__assert_fail@plt+0x1034>
   11734:	str	r3, [sp, #68]	; 0x44
   11738:	str	r8, [sp, #48]	; 0x30
   1173c:	bl	1115c <strncmp@plt>
   11740:	subs	r2, r0, #0
   11744:	bne	11930 <__assert_fail@plt+0x7a4>
   11748:	add	r3, r5, #7
   1174c:	mov	r0, r8
   11750:	ldr	r1, [pc, #2664]	; 121c0 <__assert_fail@plt+0x1034>
   11754:	ldrb	r8, [r6, r3]
   11758:	strb	r2, [r6, r3]
   1175c:	str	r3, [sp, #48]	; 0x30
   11760:	bl	10eec <strcmp@plt>
   11764:	ldr	r3, [sp, #48]	; 0x30
   11768:	add	r2, r6, r3
   1176c:	subs	ip, r0, #0
   11770:	bne	118cc <__assert_fail@plt+0x740>
   11774:	cmp	r8, #40	; 0x28
   11778:	mov	r0, #512	; 0x200
   1177c:	mov	r1, #0
   11780:	beq	11f7c <__assert_fail@plt+0xdf0>
   11784:	cmp	r8, #45	; 0x2d
   11788:	add	r3, r5, #8
   1178c:	strd	r0, [r9, #8]
   11790:	beq	122c8 <__assert_fail@plt+0x113c>
   11794:	ldrb	r2, [r6, r3]
   11798:	ldr	r5, [r9, #8]
   1179c:	ldr	r1, [r9, #12]
   117a0:	cmp	r2, #32
   117a4:	addeq	r3, r3, #1
   117a8:	lsr	r5, r5, #2
   117ac:	ldrb	r2, [r6, r3]
   117b0:	orr	r8, r5, r1, lsl #30
   117b4:	str	r8, [r9, #28]
   117b8:	cmp	r2, #40	; 0x28
   117bc:	bne	118cc <__assert_fail@plt+0x740>
   117c0:	add	r3, r3, #1
   117c4:	subs	r4, r4, r3
   117c8:	beq	118cc <__assert_fail@plt+0x740>
   117cc:	add	r5, r6, r3
   117d0:	sub	r4, r4, #1
   117d4:	add	r2, r5, r4
   117d8:	mov	lr, r5
   117dc:	b	117f4 <__assert_fail@plt+0x668>
   117e0:	mov	r0, r2
   117e4:	sub	r2, r2, #1
   117e8:	ldrb	ip, [r0]
   117ec:	cmp	ip, #41	; 0x29
   117f0:	beq	11814 <__assert_fail@plt+0x688>
   117f4:	cmp	r5, r2
   117f8:	sub	r1, r2, r5
   117fc:	bne	117e0 <__assert_fail@plt+0x654>
   11800:	ldrb	r3, [r6, r3]
   11804:	cmp	r3, #41	; 0x29
   11808:	bne	118cc <__assert_fail@plt+0x740>
   1180c:	mov	r0, r5
   11810:	mov	r1, #0
   11814:	ldr	r3, [sp, #68]	; 0x44
   11818:	cmp	r3, #0
   1181c:	bne	1252c <__assert_fail@plt+0x13a0>
   11820:	mov	r3, #0
   11824:	add	r1, r1, #1
   11828:	strb	r3, [r0]
   1182c:	b	11834 <__assert_fail@plt+0x6a8>
   11830:	add	r1, r1, #1
   11834:	ldrb	r3, [r5, r1]
   11838:	cmp	r3, #9
   1183c:	cmpne	r3, #32
   11840:	beq	11830 <__assert_fail@plt+0x6a4>
   11844:	cmp	r3, #61	; 0x3d
   11848:	addeq	r1, r1, #1
   1184c:	addeq	r1, r5, r1
   11850:	bne	118cc <__assert_fail@plt+0x740>
   11854:	b	1185c <__assert_fail@plt+0x6d0>
   11858:	mov	r1, r3
   1185c:	mov	r3, r1
   11860:	ldrb	r2, [r3], #1
   11864:	cmp	r2, #9
   11868:	cmpne	r2, #32
   1186c:	beq	11858 <__assert_fail@plt+0x6cc>
   11870:	mov	r4, r1
   11874:	strd	sl, [sp, #48]	; 0x30
   11878:	mov	r6, r1
   1187c:	b	118a0 <__assert_fail@plt+0x714>
   11880:	bl	11054 <__ctype_b_loc@plt>
   11884:	ldrb	r3, [fp]
   11888:	add	r4, r4, #1
   1188c:	lsl	r3, r3, #1
   11890:	ldr	r2, [r0]
   11894:	ldrh	r3, [r2, r3]
   11898:	tst	r3, #4096	; 0x1000
   1189c:	beq	118c8 <__assert_fail@plt+0x73c>
   118a0:	sub	r3, r4, r6
   118a4:	cmp	r8, r3
   118a8:	mov	fp, r4
   118ac:	bhi	11880 <__assert_fail@plt+0x6f4>
   118b0:	ldrb	r3, [r4]
   118b4:	ldrd	sl, [sp, #48]	; 0x30
   118b8:	clz	r3, r3
   118bc:	mov	r8, r6
   118c0:	lsr	r3, r3, #5
   118c4:	b	11af8 <__assert_fail@plt+0x96c>
   118c8:	ldrd	sl, [sp, #48]	; 0x30
   118cc:	ldrd	r0, [sp, #40]	; 0x28
   118d0:	ldrb	r3, [r9, #18]
   118d4:	adds	r0, r0, #1
   118d8:	adc	r1, r1, #0
   118dc:	cmp	r3, #0
   118e0:	strd	r0, [sp, #40]	; 0x28
   118e4:	beq	1165c <__assert_fail@plt+0x4d0>
   118e8:	mov	r2, #5
   118ec:	ldr	r1, [pc, #2136]	; 1214c <__assert_fail@plt+0xfc0>
   118f0:	mov	r0, #0
   118f4:	bl	10f7c <dcgettext@plt>
   118f8:	ldr	r2, [sp, #76]	; 0x4c
   118fc:	mov	r1, #3
   11900:	mov	r4, r0
   11904:	mov	r0, #0
   11908:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   1190c:	ldr	r3, [pc, #2220]	; 121c0 <__assert_fail@plt+0x1034>
   11910:	mov	r1, #0
   11914:	str	r3, [sp, #8]
   11918:	mov	r2, r4
   1191c:	strd	sl, [sp]
   11920:	mov	r3, r0
   11924:	mov	r0, r1
   11928:	bl	11000 <error@plt>
   1192c:	b	1165c <__assert_fail@plt+0x4d0>
   11930:	ldrb	r1, [r6, r5]
   11934:	ldr	r3, [r9, #24]
   11938:	sub	r2, r4, r5
   1193c:	cmp	r1, #92	; 0x5c
   11940:	addeq	r3, r3, #1
   11944:	cmp	r2, r3
   11948:	bcc	118cc <__assert_fail@plt+0x740>
   1194c:	mov	r3, #0
   11950:	str	r3, [r9, #28]
   11954:	bl	11054 <__ctype_b_loc@plt>
   11958:	mov	r2, #0
   1195c:	strd	sl, [sp, #104]	; 0x68
   11960:	ldr	r8, [sp, #56]	; 0x38
   11964:	mov	fp, r5
   11968:	ldr	r1, [sp, #48]	; 0x30
   1196c:	mov	r5, r4
   11970:	ldr	r4, [sp, #28]
   11974:	str	r0, [sp, #116]	; 0x74
   11978:	ldr	lr, [r0]
   1197c:	mov	r0, r2
   11980:	b	11990 <__assert_fail@plt+0x804>
   11984:	mov	r0, ip
   11988:	mov	r2, ip
   1198c:	mov	r8, r4
   11990:	ldrb	r3, [r1], #1
   11994:	add	ip, r2, #1
   11998:	lsl	r3, r3, #1
   1199c:	ldrh	r3, [lr, r3]
   119a0:	tst	r3, #4096	; 0x1000
   119a4:	bne	11984 <__assert_fail@plt+0x7f8>
   119a8:	cmp	r8, #0
   119ac:	sub	r3, r2, #2
   119b0:	strne	r0, [r9, #28]
   119b4:	cmp	r3, #126	; 0x7e
   119b8:	mov	r4, r5
   119bc:	mov	r5, fp
   119c0:	ldrd	sl, [sp, #104]	; 0x68
   119c4:	bhi	118cc <__assert_fail@plt+0x740>
   119c8:	ands	r1, r2, #1
   119cc:	bne	118cc <__assert_fail@plt+0x740>
   119d0:	add	r5, r5, r2
   119d4:	lsl	r0, r2, #2
   119d8:	ldrb	r3, [r6, r5]
   119dc:	str	r1, [r9, #12]
   119e0:	str	r0, [r9, #8]
   119e4:	cmp	r3, #32
   119e8:	cmpne	r3, #9
   119ec:	movne	r3, #1
   119f0:	moveq	r3, #0
   119f4:	bne	118cc <__assert_fail@plt+0x740>
   119f8:	strb	r3, [r6, r5]
   119fc:	ldr	r3, [sp, #116]	; 0x74
   11a00:	ldr	r0, [r3]
   11a04:	ldr	r3, [sp, #48]	; 0x30
   11a08:	add	r2, r3, r2
   11a0c:	mov	r1, r3
   11a10:	ldrb	r3, [r1], #1
   11a14:	lsl	r3, r3, #1
   11a18:	ldrh	r3, [r0, r3]
   11a1c:	tst	r3, #4096	; 0x1000
   11a20:	beq	118cc <__assert_fail@plt+0x740>
   11a24:	cmp	r2, r1
   11a28:	bne	11a10 <__assert_fail@plt+0x884>
   11a2c:	ldrb	r3, [r2]
   11a30:	cmp	r3, #0
   11a34:	bne	118cc <__assert_fail@plt+0x740>
   11a38:	add	r3, r5, #1
   11a3c:	sub	r2, r4, r3
   11a40:	cmp	r2, #1
   11a44:	beq	12444 <__assert_fail@plt+0x12b8>
   11a48:	ldrb	r2, [r6, r3]
   11a4c:	cmp	r2, #32
   11a50:	cmpne	r2, #42	; 0x2a
   11a54:	movne	r2, #1
   11a58:	moveq	r2, #0
   11a5c:	bne	12444 <__assert_fail@plt+0x12b8>
   11a60:	ldr	r1, [pc, #1856]	; 121a8 <__assert_fail@plt+0x101c>
   11a64:	ldr	r1, [r1, #4]
   11a68:	cmp	r1, #1
   11a6c:	ldrne	r3, [pc, #1844]	; 121a8 <__assert_fail@plt+0x101c>
   11a70:	strne	r2, [r3, #4]
   11a74:	addne	r3, r5, #2
   11a78:	ldr	r2, [sp, #68]	; 0x44
   11a7c:	add	r5, r6, r3
   11a80:	cmp	r2, #0
   11a84:	ldreq	r8, [sp, #48]	; 0x30
   11a88:	beq	11b00 <__assert_fail@plt+0x974>
   11a8c:	sub	r3, r4, r3
   11a90:	sub	ip, r3, #1
   11a94:	mov	r1, r5
   11a98:	mov	r2, #0
   11a9c:	mov	lr, #10
   11aa0:	mov	r8, #13
   11aa4:	cmp	r3, r2
   11aa8:	bls	125f8 <__assert_fail@plt+0x146c>
   11aac:	ldrb	r0, [r5, r2]
   11ab0:	cmp	r0, #0
   11ab4:	beq	11ae8 <__assert_fail@plt+0x95c>
   11ab8:	cmp	r0, #92	; 0x5c
   11abc:	bne	12474 <__assert_fail@plt+0x12e8>
   11ac0:	cmp	r2, ip
   11ac4:	beq	11ae8 <__assert_fail@plt+0x95c>
   11ac8:	add	r2, r2, #1
   11acc:	ldrb	r0, [r5, r2]
   11ad0:	cmp	r0, #110	; 0x6e
   11ad4:	beq	12590 <__assert_fail@plt+0x1404>
   11ad8:	cmp	r0, #114	; 0x72
   11adc:	beq	12598 <__assert_fail@plt+0x140c>
   11ae0:	cmp	r0, #92	; 0x5c
   11ae4:	beq	12474 <__assert_fail@plt+0x12e8>
   11ae8:	mov	r3, #0
   11aec:	adds	r3, r3, #0
   11af0:	ldr	r8, [sp, #48]	; 0x30
   11af4:	movne	r3, #1
   11af8:	cmp	r3, #0
   11afc:	beq	118cc <__assert_fail@plt+0x740>
   11b00:	ldr	r3, [sp, #64]	; 0x40
   11b04:	cmp	r3, #0
   11b08:	bne	11b20 <__assert_fail@plt+0x994>
   11b0c:	ldr	r1, [pc, #1580]	; 12140 <__assert_fail@plt+0xfb4>
   11b10:	mov	r0, r5
   11b14:	bl	10eec <strcmp@plt>
   11b18:	cmp	r0, #0
   11b1c:	beq	118cc <__assert_fail@plt+0x740>
   11b20:	ldrb	r3, [r9, #17]
   11b24:	cmp	r3, #0
   11b28:	ldrne	r3, [sp, #56]	; 0x38
   11b2c:	strne	r3, [sp, #48]	; 0x30
   11b30:	bne	11b4c <__assert_fail@plt+0x9c0>
   11b34:	mov	r1, #10
   11b38:	mov	r0, r5
   11b3c:	bl	11084 <strchr@plt>
   11b40:	adds	r3, r0, #0
   11b44:	movne	r3, #1
   11b48:	str	r3, [sp, #48]	; 0x30
   11b4c:	add	r2, sp, #144	; 0x90
   11b50:	ldr	r1, [sp, #100]	; 0x64
   11b54:	mov	r0, r5
   11b58:	bl	1289c <__assert_fail@plt+0x1710>
   11b5c:	ldr	r2, [sp, #48]	; 0x30
   11b60:	and	r3, r2, #1
   11b64:	str	r3, [sp, #68]	; 0x44
   11b68:	subs	r3, r0, #0
   11b6c:	str	r3, [sp, #96]	; 0x60
   11b70:	bne	12094 <__assert_fail@plt+0xf08>
   11b74:	ldrd	r0, [sp, #80]	; 0x50
   11b78:	ldrb	r3, [r9, #17]
   11b7c:	adds	r0, r0, #1
   11b80:	adc	r1, r1, #0
   11b84:	cmp	r3, #0
   11b88:	strd	r0, [sp, #80]	; 0x50
   11b8c:	bne	11bec <__assert_fail@plt+0xa60>
   11b90:	cmp	r2, #0
   11b94:	beq	11bc0 <__assert_fail@plt+0xa34>
   11b98:	ldr	r3, [pc, #1348]	; 120e4 <__assert_fail@plt+0xf58>
   11b9c:	ldr	r0, [r3]
   11ba0:	ldr	r3, [r0, #20]
   11ba4:	ldr	r2, [r0, #24]
   11ba8:	cmp	r3, r2
   11bac:	addcc	r1, r3, #1
   11bb0:	movcc	r2, #92	; 0x5c
   11bb4:	strcc	r1, [r0, #20]
   11bb8:	strbcc	r2, [r3]
   11bbc:	bcs	12514 <__assert_fail@plt+0x1388>
   11bc0:	ldr	r1, [sp, #68]	; 0x44
   11bc4:	mov	r0, r5
   11bc8:	bl	127a4 <__assert_fail@plt+0x1618>
   11bcc:	ldr	r1, [pc, #1404]	; 12150 <__assert_fail@plt+0xfc4>
   11bd0:	mov	r2, #5
   11bd4:	mov	r0, #0
   11bd8:	bl	10f7c <dcgettext@plt>
   11bdc:	ldr	r1, [pc, #1392]	; 12154 <__assert_fail@plt+0xfc8>
   11be0:	mov	r2, r0
   11be4:	mov	r0, #1
   11be8:	bl	110c0 <__printf_chk@plt>
   11bec:	ldr	r3, [sp, #28]
   11bf0:	str	r3, [sp, #96]	; 0x60
   11bf4:	b	1165c <__assert_fail@plt+0x4d0>
   11bf8:	add	r2, sp, #224	; 0xe0
   11bfc:	add	r1, sp, #152	; 0x98
   11c00:	mov	r0, r5
   11c04:	bl	1289c <__assert_fail@plt+0x1710>
   11c08:	subs	r8, r0, #0
   11c0c:	bne	11edc <__assert_fail@plt+0xd50>
   11c10:	str	r8, [sp, #60]	; 0x3c
   11c14:	b	115bc <__assert_fail@plt+0x430>
   11c18:	ldr	r0, [sp, #132]	; 0x84
   11c1c:	bl	1a508 <__assert_fail@plt+0x937c>
   11c20:	ldr	r4, [r7]
   11c24:	ldr	r3, [sp, #64]	; 0x40
   11c28:	ands	r4, r4, #32
   11c2c:	mov	r0, r7
   11c30:	bne	11e78 <__assert_fail@plt+0xcec>
   11c34:	cmp	r3, #0
   11c38:	beq	11c64 <__assert_fail@plt+0xad8>
   11c3c:	bl	1a370 <__assert_fail@plt+0x91e4>
   11c40:	cmp	r0, #0
   11c44:	beq	11c68 <__assert_fail@plt+0xadc>
   11c48:	bl	11090 <__errno_location@plt>
   11c4c:	ldr	r5, [r0]
   11c50:	cmp	r5, #0
   11c54:	blt	11c68 <__assert_fail@plt+0xadc>
   11c58:	ldrne	r4, [pc, #1272]	; 12158 <__assert_fail@plt+0xfcc>
   11c5c:	bne	11e9c <__assert_fail@plt+0xd10>
   11c60:	b	11e84 <__assert_fail@plt+0xcf8>
   11c64:	bl	11138 <clearerr_unlocked@plt>
   11c68:	ldr	r3, [sp, #96]	; 0x60
   11c6c:	cmp	r3, #0
   11c70:	beq	12054 <__assert_fail@plt+0xec8>
   11c74:	ldrb	r3, [r9, #17]
   11c78:	cmp	r3, #0
   11c7c:	bne	11de8 <__assert_fail@plt+0xc5c>
   11c80:	ldrd	r0, [sp, #40]	; 0x28
   11c84:	mov	r2, r0
   11c88:	mov	r3, r1
   11c8c:	orrs	r3, r2, r3
   11c90:	beq	11cf0 <__assert_fail@plt+0xb64>
   11c94:	mov	r3, #0
   11c98:	cmp	r1, r3
   11c9c:	mvn	r2, #0
   11ca0:	cmpeq	r0, r2
   11ca4:	ldrls	r3, [sp, #40]	; 0x28
   11ca8:	bls	11cc0 <__assert_fail@plt+0xb34>
   11cac:	ldr	r2, [pc, #1192]	; 1215c <__assert_fail@plt+0xfd0>
   11cb0:	mov	r3, #0
   11cb4:	bl	21098 <__assert_fail@plt+0xff0c>
   11cb8:	add	r3, r2, #999424	; 0xf4000
   11cbc:	add	r3, r3, #576	; 0x240
   11cc0:	mov	r2, #5
   11cc4:	str	r2, [sp]
   11cc8:	ldr	r1, [pc, #1168]	; 12160 <__assert_fail@plt+0xfd4>
   11ccc:	ldr	r2, [pc, #1168]	; 12164 <__assert_fail@plt+0xfd8>
   11cd0:	mov	r0, #0
   11cd4:	bl	11180 <dcngettext@plt>
   11cd8:	ldrd	r2, [sp, #40]	; 0x28
   11cdc:	mov	r1, #0
   11ce0:	strd	r2, [sp]
   11ce4:	mov	r2, r0
   11ce8:	mov	r0, r1
   11cec:	bl	11000 <error@plt>
   11cf0:	ldrd	r0, [sp, #80]	; 0x50
   11cf4:	mov	r2, r0
   11cf8:	mov	r3, r1
   11cfc:	orrs	r3, r2, r3
   11d00:	beq	11d60 <__assert_fail@plt+0xbd4>
   11d04:	mov	r3, #0
   11d08:	cmp	r1, r3
   11d0c:	mvn	r2, #0
   11d10:	cmpeq	r0, r2
   11d14:	ldrls	r3, [sp, #80]	; 0x50
   11d18:	bls	11d30 <__assert_fail@plt+0xba4>
   11d1c:	ldr	r2, [pc, #1080]	; 1215c <__assert_fail@plt+0xfd0>
   11d20:	mov	r3, #0
   11d24:	bl	21098 <__assert_fail@plt+0xff0c>
   11d28:	add	r3, r2, #999424	; 0xf4000
   11d2c:	add	r3, r3, #576	; 0x240
   11d30:	mov	r2, #5
   11d34:	str	r2, [sp]
   11d38:	ldr	r1, [pc, #1064]	; 12168 <__assert_fail@plt+0xfdc>
   11d3c:	ldr	r2, [pc, #1064]	; 1216c <__assert_fail@plt+0xfe0>
   11d40:	mov	r0, #0
   11d44:	bl	11180 <dcngettext@plt>
   11d48:	ldrd	r2, [sp, #80]	; 0x50
   11d4c:	mov	r1, #0
   11d50:	strd	r2, [sp]
   11d54:	mov	r2, r0
   11d58:	mov	r0, r1
   11d5c:	bl	11000 <error@plt>
   11d60:	ldrd	r0, [sp, #88]	; 0x58
   11d64:	mov	r2, r0
   11d68:	mov	r3, r1
   11d6c:	orrs	r3, r2, r3
   11d70:	beq	11dd0 <__assert_fail@plt+0xc44>
   11d74:	mov	r3, #0
   11d78:	cmp	r1, r3
   11d7c:	mvn	r2, #0
   11d80:	cmpeq	r0, r2
   11d84:	ldrls	r3, [sp, #88]	; 0x58
   11d88:	bls	11da0 <__assert_fail@plt+0xc14>
   11d8c:	ldr	r2, [pc, #968]	; 1215c <__assert_fail@plt+0xfd0>
   11d90:	mov	r3, #0
   11d94:	bl	21098 <__assert_fail@plt+0xff0c>
   11d98:	add	r3, r2, #999424	; 0xf4000
   11d9c:	add	r3, r3, #576	; 0x240
   11da0:	mov	r2, #5
   11da4:	str	r2, [sp]
   11da8:	ldr	r1, [pc, #960]	; 12170 <__assert_fail@plt+0xfe4>
   11dac:	ldr	r2, [pc, #960]	; 12174 <__assert_fail@plt+0xfe8>
   11db0:	mov	r0, #0
   11db4:	bl	11180 <dcngettext@plt>
   11db8:	ldrd	r2, [sp, #88]	; 0x58
   11dbc:	mov	r1, #0
   11dc0:	strd	r2, [sp]
   11dc4:	mov	r2, r0
   11dc8:	mov	r0, r1
   11dcc:	bl	11000 <error@plt>
   11dd0:	ldrb	r5, [r9, #16]
   11dd4:	ldr	r3, [sp, #112]	; 0x70
   11dd8:	eor	r5, r5, #1
   11ddc:	orr	r5, r3, r5
   11de0:	ands	r5, r5, #255	; 0xff
   11de4:	beq	124ac <__assert_fail@plt+0x1320>
   11de8:	ldr	r3, [sp, #112]	; 0x70
   11dec:	cmp	r3, #0
   11df0:	beq	11e24 <__assert_fail@plt+0xc98>
   11df4:	ldrd	r2, [sp, #80]	; 0x50
   11df8:	ldrd	r0, [sp, #88]	; 0x58
   11dfc:	orr	r2, r2, r0
   11e00:	orr	r3, r3, r1
   11e04:	orrs	r3, r2, r3
   11e08:	bne	11e24 <__assert_fail@plt+0xc98>
   11e0c:	ldrd	r2, [sp, #40]	; 0x28
   11e10:	ldrb	r4, [r9, #20]
   11e14:	mov	r1, r2
   11e18:	orrs	r3, r1, r3
   11e1c:	eor	r4, r4, #1
   11e20:	orreq	r4, r4, #1
   11e24:	and	r4, r4, #1
   11e28:	b	11ec4 <__assert_fail@plt+0xd38>
   11e2c:	ldr	r1, [pc, #836]	; 12178 <__assert_fail@plt+0xfec>
   11e30:	mov	r0, r5
   11e34:	bl	1a470 <__assert_fail@plt+0x92e4>
   11e38:	subs	r7, r0, #0
   11e3c:	strne	r5, [sp, #76]	; 0x4c
   11e40:	bne	1161c <__assert_fail@plt+0x490>
   11e44:	bl	11090 <__errno_location@plt>
   11e48:	mov	r2, r5
   11e4c:	mov	r1, #3
   11e50:	ldr	r4, [r0]
   11e54:	mov	r0, r7
   11e58:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   11e5c:	mov	r1, r4
   11e60:	ldr	r2, [pc, #752]	; 12158 <__assert_fail@plt+0xfcc>
   11e64:	mov	r3, r0
   11e68:	mov	r0, r7
   11e6c:	bl	11000 <error@plt>
   11e70:	ldr	r4, [sp, #56]	; 0x38
   11e74:	b	11ec4 <__assert_fail@plt+0xd38>
   11e78:	cmp	r3, #0
   11e7c:	beq	11ed4 <__assert_fail@plt+0xd48>
   11e80:	bl	1a370 <__assert_fail@plt+0x91e4>
   11e84:	mov	r2, #5
   11e88:	ldr	r1, [pc, #748]	; 1217c <__assert_fail@plt+0xff0>
   11e8c:	mov	r0, #0
   11e90:	bl	10f7c <dcgettext@plt>
   11e94:	mov	r5, #0
   11e98:	mov	r4, r0
   11e9c:	ldr	r2, [sp, #76]	; 0x4c
   11ea0:	mov	r1, #3
   11ea4:	mov	r0, #0
   11ea8:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   11eac:	mov	r2, r4
   11eb0:	mov	r1, r5
   11eb4:	mov	r3, r0
   11eb8:	mov	r0, #0
   11ebc:	bl	11000 <error@plt>
   11ec0:	ldr	r4, [sp, #56]	; 0x38
   11ec4:	ldr	r3, [sp, #60]	; 0x3c
   11ec8:	and	r3, r3, r4
   11ecc:	str	r3, [sp, #60]	; 0x3c
   11ed0:	b	115bc <__assert_fail@plt+0x430>
   11ed4:	bl	11138 <clearerr_unlocked@plt>
   11ed8:	b	11e84 <__assert_fail@plt+0xcf8>
   11edc:	ldr	r3, [pc, #708]	; 121a8 <__assert_fail@plt+0x101c>
   11ee0:	ldrb	r7, [r3]
   11ee4:	cmp	r7, #10
   11ee8:	beq	123fc <__assert_fail@plt+0x1270>
   11eec:	ldr	r8, [sp, #28]
   11ef0:	ldr	r3, [sp, #36]	; 0x24
   11ef4:	cmp	r3, #0
   11ef8:	bne	12380 <__assert_fail@plt+0x11f4>
   11efc:	ldr	r3, [r9, #28]
   11f00:	lsrs	r3, r3, #1
   11f04:	beq	11fb8 <__assert_fail@plt+0xe2c>
   11f08:	ldr	sl, [pc, #624]	; 12180 <__assert_fail@plt+0xff4>
   11f0c:	add	fp, sp, #151	; 0x97
   11f10:	mov	r4, #0
   11f14:	mov	r6, #1
   11f18:	ldrb	r2, [fp, #1]!
   11f1c:	mov	r1, sl
   11f20:	mov	r0, r6
   11f24:	bl	110c0 <__printf_chk@plt>
   11f28:	ldr	r3, [r9, #28]
   11f2c:	add	r4, r4, #1
   11f30:	cmp	r4, r3, lsr #1
   11f34:	bcc	11f18 <__assert_fail@plt+0xd8c>
   11f38:	ldr	r3, [sp, #36]	; 0x24
   11f3c:	cmp	r3, #0
   11f40:	beq	11fb8 <__assert_fail@plt+0xe2c>
   11f44:	ldr	r3, [pc, #408]	; 120e4 <__assert_fail@plt+0xf58>
   11f48:	ldr	r0, [r3]
   11f4c:	ldr	r3, [r0, #20]
   11f50:	ldr	r2, [r0, #24]
   11f54:	cmp	r3, r2
   11f58:	addcc	r2, r3, #1
   11f5c:	strcc	r2, [r0, #20]
   11f60:	ldrcc	r8, [sp, #60]	; 0x3c
   11f64:	strbcc	r7, [r3]
   11f68:	bcc	11c10 <__assert_fail@plt+0xa84>
   11f6c:	mov	r1, r7
   11f70:	bl	11108 <__overflow@plt>
   11f74:	ldr	r8, [sp, #60]	; 0x3c
   11f78:	b	11c10 <__assert_fail@plt+0xa84>
   11f7c:	strb	r8, [r2]
   11f80:	strd	r0, [r9, #8]
   11f84:	b	11794 <__assert_fail@plt+0x608>
   11f88:	ldrb	r3, [r9]
   11f8c:	cmp	r3, #0
   11f90:	bne	12018 <__assert_fail@plt+0xe8c>
   11f94:	ldr	r3, [sp, #60]	; 0x3c
   11f98:	eor	r0, r3, #1
   11f9c:	uxtb	r0, r0
   11fa0:	add	sp, sp, #300	; 0x12c
   11fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fa8:	mov	r2, #512	; 0x200
   11fac:	mov	r3, #0
   11fb0:	strd	r2, [r9, #8]
   11fb4:	b	11448 <__assert_fail@plt+0x2bc>
   11fb8:	ldr	r3, [pc, #292]	; 120e4 <__assert_fail@plt+0xf58>
   11fbc:	ldr	r0, [r3]
   11fc0:	ldr	r3, [r0, #20]
   11fc4:	ldr	r2, [r0, #24]
   11fc8:	cmp	r3, r2
   11fcc:	addcc	r1, r3, #1
   11fd0:	movcc	r2, #32
   11fd4:	strcc	r1, [r0, #20]
   11fd8:	strbcc	r2, [r3]
   11fdc:	bcs	124a0 <__assert_fail@plt+0x1314>
   11fe0:	ldr	r3, [pc, #252]	; 120e4 <__assert_fail@plt+0xf58>
   11fe4:	ldr	r0, [r3]
   11fe8:	ldr	r2, [r0, #24]
   11fec:	ldr	r3, [r0, #20]
   11ff0:	cmp	r3, r2
   11ff4:	addcc	r2, r3, #1
   11ff8:	strcc	r2, [r0, #20]
   11ffc:	ldrbcc	r2, [sp, #120]	; 0x78
   12000:	strbcc	r2, [r3]
   12004:	bcs	12494 <__assert_fail@plt+0x1308>
   12008:	mov	r1, r8
   1200c:	mov	r0, r5
   12010:	bl	127a4 <__assert_fail@plt+0x1618>
   12014:	b	11f44 <__assert_fail@plt+0xdb8>
   12018:	ldr	r3, [pc, #296]	; 12148 <__assert_fail@plt+0xfbc>
   1201c:	ldr	r0, [r3]
   12020:	bl	1a370 <__assert_fail@plt+0x91e4>
   12024:	cmn	r0, #1
   12028:	bne	11f94 <__assert_fail@plt+0xe08>
   1202c:	bl	11090 <__errno_location@plt>
   12030:	ldr	r1, [pc, #268]	; 12144 <__assert_fail@plt+0xfb8>
   12034:	mov	r2, #5
   12038:	ldr	r4, [r0]
   1203c:	mov	r0, #0
   12040:	bl	10f7c <dcgettext@plt>
   12044:	mov	r1, r4
   12048:	mov	r2, r0
   1204c:	mov	r0, #1
   12050:	bl	11000 <error@plt>
   12054:	mov	r0, r3
   12058:	mov	r2, #5
   1205c:	ldr	r1, [pc, #288]	; 12184 <__assert_fail@plt+0xff8>
   12060:	mov	r6, r3
   12064:	bl	10f7c <dcgettext@plt>
   12068:	ldr	r2, [sp, #76]	; 0x4c
   1206c:	mov	r1, #3
   12070:	mov	r5, r0
   12074:	mov	r0, r6
   12078:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   1207c:	mov	r2, r5
   12080:	mov	r1, r6
   12084:	mov	r3, r0
   12088:	mov	r0, r6
   1208c:	bl	11000 <error@plt>
   12090:	b	11e24 <__assert_fail@plt+0xc98>
   12094:	ldrb	r3, [r9, #16]
   12098:	cmp	r3, #0
   1209c:	beq	120ac <__assert_fail@plt+0xf20>
   120a0:	ldrb	r3, [sp, #144]	; 0x90
   120a4:	cmp	r3, #0
   120a8:	bne	11bec <__assert_fail@plt+0xa60>
   120ac:	ldr	r6, [r9, #28]
   120b0:	lsrs	r6, r6, #1
   120b4:	beq	12324 <__assert_fail@plt+0x1198>
   120b8:	bl	11030 <__ctype_tolower_loc@plt>
   120bc:	ldr	r3, [sp, #100]	; 0x64
   120c0:	mov	r4, #0
   120c4:	mov	r2, r8
   120c8:	sub	r1, r3, #1
   120cc:	ldr	r0, [r0]
   120d0:	b	121f4 <__assert_fail@plt+0x1068>
   120d4:	andeq	r1, r2, r4, asr r6
   120d8:	andeq	r1, r2, ip, ror #22
   120dc:	andeq	r1, r2, r4, asr #21
   120e0:	andeq	sl, r1, ip, asr #4
   120e4:	andeq	r3, r3, r4, lsl #3
   120e8:	andeq	r1, r2, ip, asr #5
   120ec:	andeq	r1, r2, r8, ror #23
   120f0:	muleq	r3, r0, r1
   120f4:	andeq	r0, r0, r1, lsl #2
   120f8:	andeq	r0, r0, r3, lsl #2
   120fc:	andeq	r3, r3, ip, lsl r1
   12100:	andeq	r1, r2, r8, asr #23
   12104:	ldrdeq	r1, [r2], -r8
   12108:	ldrdeq	r1, [r2], -r0
   1210c:	andeq	r1, r2, r0, asr #21
   12110:	andeq	r3, r3, r8, lsl #3
   12114:	andeq	r1, r2, r4, lsl #23
   12118:	andeq	r1, r2, r8, lsr #23
   1211c:	andeq	r1, r2, ip, lsr ip
   12120:	andeq	r1, r2, r8, ror ip
   12124:			; <UNDEFINED> instruction: 0x00021cb4
   12128:	andeq	r1, r2, r0, lsl #26
   1212c:	andeq	r1, r2, r8, asr #26
   12130:	andeq	r1, r2, r8, lsl #27
   12134:	andeq	r1, r2, r8, asr #27
   12138:	andeq	r1, r2, r8, lsl #28
   1213c:	andeq	r3, r3, r0, ror r1
   12140:	andeq	r1, r2, r8, asr #7
   12144:	andeq	r1, r2, r8, asr #28
   12148:	andeq	r3, r3, r0, lsl #3
   1214c:	andeq	r1, r2, r4, ror lr
   12150:	andeq	r1, r2, r4, lsr #29
   12154:			; <UNDEFINED> instruction: 0x00021eb8
   12158:	andeq	r1, r2, r4, lsr #23
   1215c:	andeq	r4, pc, r0, asr #4
   12160:	andeq	r1, r2, ip, lsr pc
   12164:	andeq	r1, r2, ip, lsl #30
   12168:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   1216c:	andeq	r1, r2, r8, ror #30
   12170:	strdeq	r1, [r2], -r4
   12174:	andeq	r1, r2, r4, asr #31
   12178:	andeq	r1, r2, ip, asr #7
   1217c:	andeq	r1, r2, ip, asr #29
   12180:	andeq	r2, r2, r4, asr r0
   12184:	ldrdeq	r1, [r2], -ip
   12188:	muleq	r2, r4, r2
   1218c:	andeq	r1, r2, r0, asr #29
   12190:	andeq	r1, r2, r8, asr lr
   12194:	andeq	r1, r2, r8, asr #29
   12198:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1219c:	andeq	r2, r2, r8, asr #32
   121a0:	andeq	r2, r2, ip, asr #32
   121a4:	andeq	r3, r3, r4, lsl #3
   121a8:	andeq	r3, r3, r0, lsl r1
   121ac:	andeq	r2, r2, r0, asr #32
   121b0:	andeq	r2, r2, r4, lsr #32
   121b4:	andeq	r1, r2, r8, lsl ip
   121b8:	muleq	r2, r4, fp
   121bc:	strdeq	r1, [r2], -r0
   121c0:	andeq	r1, r2, ip, asr #8
   121c4:	ldr	lr, [pc, #-68]	; 12188 <__assert_fail@plt+0xffc>
   121c8:	and	r3, r3, #15
   121cc:	ldrb	ip, [r2, #1]
   121d0:	add	r3, lr, r3
   121d4:	ldrb	r3, [r3, #280]	; 0x118
   121d8:	ldr	ip, [r0, ip, lsl #2]
   121dc:	cmp	ip, r3
   121e0:	bne	12214 <__assert_fail@plt+0x1088>
   121e4:	add	r4, r4, #1
   121e8:	cmp	r6, r4
   121ec:	add	r2, r2, #2
   121f0:	beq	12324 <__assert_fail@plt+0x1198>
   121f4:	ldrb	r3, [r1, #1]!
   121f8:	ldr	ip, [pc, #-120]	; 12188 <__assert_fail@plt+0xffc>
   121fc:	ldrb	lr, [r8, r4, lsl #1]
   12200:	add	ip, ip, r3, lsr #4
   12204:	ldrb	ip, [ip, #280]	; 0x118
   12208:	ldr	lr, [r0, lr, lsl #2]
   1220c:	cmp	lr, ip
   12210:	beq	121c4 <__assert_fail@plt+0x1038>
   12214:	cmp	r6, r4
   12218:	beq	12324 <__assert_fail@plt+0x1198>
   1221c:	ldrd	r0, [sp, #88]	; 0x58
   12220:	ldrb	r3, [r9, #17]
   12224:	adds	r0, r0, #1
   12228:	adc	r1, r1, #0
   1222c:	cmp	r3, #0
   12230:	strd	r0, [sp, #88]	; 0x58
   12234:	bne	11bec <__assert_fail@plt+0xa60>
   12238:	ldr	r3, [sp, #48]	; 0x30
   1223c:	cmp	r3, #0
   12240:	beq	12464 <__assert_fail@plt+0x12d8>
   12244:	ldr	r3, [pc, #-168]	; 121a4 <__assert_fail@plt+0x1018>
   12248:	ldr	r0, [r3]
   1224c:	ldr	r3, [r0, #20]
   12250:	ldr	r2, [r0, #24]
   12254:	cmp	r3, r2
   12258:	addcc	r1, r3, #1
   1225c:	movcc	r2, #92	; 0x5c
   12260:	strcc	r1, [r0, #20]
   12264:	strbcc	r2, [r3]
   12268:	bcs	12520 <__assert_fail@plt+0x1394>
   1226c:	ldr	r1, [sp, #68]	; 0x44
   12270:	mov	r0, r5
   12274:	bl	127a4 <__assert_fail@plt+0x1618>
   12278:	cmp	r6, r4
   1227c:	beq	12368 <__assert_fail@plt+0x11dc>
   12280:	mov	r2, #5
   12284:	ldr	r1, [pc, #-256]	; 1218c <__assert_fail@plt+0x1000>
   12288:	b	11bd4 <__assert_fail@plt+0xa48>
   1228c:	mov	r0, r3
   12290:	mov	r2, #5
   12294:	ldr	r1, [pc, #-268]	; 12190 <__assert_fail@plt+0x1004>
   12298:	mov	r4, r3
   1229c:	bl	10f7c <dcgettext@plt>
   122a0:	ldr	r2, [sp, #76]	; 0x4c
   122a4:	mov	r1, #3
   122a8:	mov	r5, r0
   122ac:	mov	r0, r4
   122b0:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   122b4:	mov	r2, r5
   122b8:	mov	r1, r4
   122bc:	mov	r3, r0
   122c0:	mov	r0, #1
   122c4:	bl	11000 <error@plt>
   122c8:	add	r0, r6, r3
   122cc:	str	ip, [sp]
   122d0:	add	r3, sp, #144	; 0x90
   122d4:	mov	r2, #0
   122d8:	add	r1, sp, #140	; 0x8c
   122dc:	bl	1f998 <__assert_fail@plt+0xe80c>
   122e0:	cmp	r0, #0
   122e4:	bne	118cc <__assert_fail@plt+0x740>
   122e8:	ldrd	r0, [sp, #144]	; 0x90
   122ec:	orrs	r3, r0, r1
   122f0:	beq	118cc <__assert_fail@plt+0x740>
   122f4:	ldrd	r2, [r9, #8]
   122f8:	cmp	r1, r3
   122fc:	cmpeq	r0, r2
   12300:	bhi	118cc <__assert_fail@plt+0x740>
   12304:	and	r2, r0, #7
   12308:	mov	r3, #0
   1230c:	orrs	r3, r2, r3
   12310:	bne	118cc <__assert_fail@plt+0x740>
   12314:	ldr	r3, [sp, #140]	; 0x8c
   12318:	strd	r0, [r9, #8]
   1231c:	sub	r3, r3, r6
   12320:	b	11794 <__assert_fail@plt+0x608>
   12324:	ldrb	r3, [r9, #17]
   12328:	cmp	r3, #0
   1232c:	str	r3, [sp, #112]	; 0x70
   12330:	bne	11bec <__assert_fail@plt+0xa60>
   12334:	ldrb	r3, [r9, #19]
   12338:	mov	r4, r6
   1233c:	cmp	r3, #0
   12340:	str	r3, [sp, #112]	; 0x70
   12344:	bne	11bec <__assert_fail@plt+0xa60>
   12348:	ldr	r3, [sp, #48]	; 0x30
   1234c:	cmp	r3, #0
   12350:	bne	125ec <__assert_fail@plt+0x1460>
   12354:	ldr	r3, [sp, #96]	; 0x60
   12358:	mov	r0, r5
   1235c:	mov	r1, #0
   12360:	str	r3, [sp, #112]	; 0x70
   12364:	bl	127a4 <__assert_fail@plt+0x1618>
   12368:	ldrb	r3, [r9, #19]
   1236c:	cmp	r3, #0
   12370:	bne	11bec <__assert_fail@plt+0xa60>
   12374:	mov	r2, #5
   12378:	ldr	r1, [pc, #-492]	; 12194 <__assert_fail@plt+0x1008>
   1237c:	b	11bd4 <__assert_fail@plt+0xa48>
   12380:	ldr	r3, [pc, #-484]	; 121a4 <__assert_fail@plt+0x1018>
   12384:	mov	r2, #7
   12388:	mov	r1, #1
   1238c:	ldr	r3, [r3]
   12390:	ldr	r0, [pc, #-472]	; 121c0 <__assert_fail@plt+0x1034>
   12394:	bl	10f58 <fwrite_unlocked@plt>
   12398:	ldrd	r2, [r9, #8]
   1239c:	ldr	r0, [pc, #-524]	; 12198 <__assert_fail@plt+0x100c>
   123a0:	mov	r1, #0
   123a4:	cmp	r3, r1
   123a8:	cmpeq	r2, r0
   123ac:	bls	12484 <__assert_fail@plt+0x12f8>
   123b0:	ldr	r3, [pc, #-532]	; 121a4 <__assert_fail@plt+0x1018>
   123b4:	mov	r2, #2
   123b8:	mov	r1, #1
   123bc:	ldr	r3, [r3]
   123c0:	ldr	r0, [pc, #-556]	; 1219c <__assert_fail@plt+0x1010>
   123c4:	bl	10f58 <fwrite_unlocked@plt>
   123c8:	mov	r1, r8
   123cc:	mov	r0, r5
   123d0:	bl	127a4 <__assert_fail@plt+0x1618>
   123d4:	ldr	r3, [pc, #-568]	; 121a4 <__assert_fail@plt+0x1018>
   123d8:	mov	r2, #4
   123dc:	mov	r1, #1
   123e0:	ldr	r3, [r3]
   123e4:	ldr	r0, [pc, #-588]	; 121a0 <__assert_fail@plt+0x1014>
   123e8:	bl	10f58 <fwrite_unlocked@plt>
   123ec:	ldr	r3, [r9, #28]
   123f0:	lsrs	r3, r3, #1
   123f4:	bne	11f08 <__assert_fail@plt+0xd7c>
   123f8:	b	11f44 <__assert_fail@plt+0xdb8>
   123fc:	mov	r1, #92	; 0x5c
   12400:	mov	r0, r5
   12404:	bl	11084 <strchr@plt>
   12408:	cmp	r0, #0
   1240c:	beq	124e8 <__assert_fail@plt+0x135c>
   12410:	ldr	r3, [pc, #-628]	; 121a4 <__assert_fail@plt+0x1018>
   12414:	ldr	r0, [r3]
   12418:	ldr	r3, [r0, #20]
   1241c:	ldr	r2, [r0, #24]
   12420:	cmp	r3, r2
   12424:	addcc	r1, r3, #1
   12428:	movcc	r2, #92	; 0x5c
   1242c:	strcc	r1, [r0, #20]
   12430:	strbcc	r2, [r3]
   12434:	bcc	11ef0 <__assert_fail@plt+0xd64>
   12438:	mov	r1, #92	; 0x5c
   1243c:	bl	11108 <__overflow@plt>
   12440:	b	11ef0 <__assert_fail@plt+0xd64>
   12444:	ldr	r2, [pc, #-676]	; 121a8 <__assert_fail@plt+0x101c>
   12448:	ldr	r2, [r2, #4]
   1244c:	cmp	r2, #0
   12450:	movne	r2, #1
   12454:	ldrne	r1, [pc, #-692]	; 121a8 <__assert_fail@plt+0x101c>
   12458:	strne	r2, [r1, #4]
   1245c:	bne	11a78 <__assert_fail@plt+0x8ec>
   12460:	b	118cc <__assert_fail@plt+0x740>
   12464:	mov	r0, r5
   12468:	mov	r1, #0
   1246c:	bl	127a4 <__assert_fail@plt+0x1618>
   12470:	b	12280 <__assert_fail@plt+0x10f4>
   12474:	strb	r0, [r1]
   12478:	add	r2, r2, #1
   1247c:	add	r1, r1, #1
   12480:	b	11aa4 <__assert_fail@plt+0x918>
   12484:	ldr	r1, [pc, #-736]	; 121ac <__assert_fail@plt+0x1020>
   12488:	mov	r0, #1
   1248c:	bl	110c0 <__printf_chk@plt>
   12490:	b	123b0 <__assert_fail@plt+0x1224>
   12494:	ldr	r1, [sp, #124]	; 0x7c
   12498:	bl	11108 <__overflow@plt>
   1249c:	b	12008 <__assert_fail@plt+0xe7c>
   124a0:	mov	r1, #32
   124a4:	bl	11108 <__overflow@plt>
   124a8:	b	11fe0 <__assert_fail@plt+0xe54>
   124ac:	mov	r2, #5
   124b0:	ldr	r1, [pc, #-776]	; 121b0 <__assert_fail@plt+0x1024>
   124b4:	mov	r0, r5
   124b8:	bl	10f7c <dcgettext@plt>
   124bc:	ldr	r2, [sp, #76]	; 0x4c
   124c0:	mov	r1, #3
   124c4:	mov	r6, r0
   124c8:	mov	r0, r5
   124cc:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   124d0:	mov	r2, r6
   124d4:	mov	r1, r5
   124d8:	mov	r3, r0
   124dc:	mov	r0, r5
   124e0:	bl	11000 <error@plt>
   124e4:	b	11e24 <__assert_fail@plt+0xc98>
   124e8:	mov	r1, r7
   124ec:	mov	r0, r5
   124f0:	bl	11084 <strchr@plt>
   124f4:	cmp	r0, #0
   124f8:	bne	12410 <__assert_fail@plt+0x1284>
   124fc:	mov	r1, #13
   12500:	mov	r0, r5
   12504:	bl	11084 <strchr@plt>
   12508:	cmp	r0, #0
   1250c:	bne	12410 <__assert_fail@plt+0x1284>
   12510:	b	11eec <__assert_fail@plt+0xd60>
   12514:	mov	r1, #92	; 0x5c
   12518:	bl	11108 <__overflow@plt>
   1251c:	b	11bc0 <__assert_fail@plt+0xa34>
   12520:	mov	r1, #92	; 0x5c
   12524:	bl	11108 <__overflow@plt>
   12528:	b	1226c <__assert_fail@plt+0x10e0>
   1252c:	mov	r3, #0
   12530:	sub	ip, r1, #1
   12534:	mov	r4, #10
   12538:	mov	r6, #13
   1253c:	cmp	r3, r1
   12540:	bcs	125a0 <__assert_fail@plt+0x1414>
   12544:	ldrb	r2, [r5, r3]
   12548:	cmp	r2, #0
   1254c:	beq	118cc <__assert_fail@plt+0x740>
   12550:	cmp	r2, #92	; 0x5c
   12554:	bne	12580 <__assert_fail@plt+0x13f4>
   12558:	cmp	r3, ip
   1255c:	beq	118cc <__assert_fail@plt+0x740>
   12560:	add	r3, r3, #1
   12564:	ldrb	r2, [r5, r3]
   12568:	cmp	r2, #110	; 0x6e
   1256c:	beq	125e4 <__assert_fail@plt+0x1458>
   12570:	cmp	r2, #114	; 0x72
   12574:	beq	125dc <__assert_fail@plt+0x1450>
   12578:	cmp	r2, #92	; 0x5c
   1257c:	bne	118cc <__assert_fail@plt+0x740>
   12580:	strb	r2, [lr]
   12584:	add	r3, r3, #1
   12588:	add	lr, lr, #1
   1258c:	b	1253c <__assert_fail@plt+0x13b0>
   12590:	strb	lr, [r1]
   12594:	b	12478 <__assert_fail@plt+0x12ec>
   12598:	strb	r8, [r1]
   1259c:	b	12478 <__assert_fail@plt+0x12ec>
   125a0:	cmp	lr, r0
   125a4:	movcc	r3, #0
   125a8:	strbcc	r3, [lr]
   125ac:	cmp	r5, #0
   125b0:	bne	11820 <__assert_fail@plt+0x694>
   125b4:	b	118cc <__assert_fail@plt+0x740>
   125b8:	ldr	r1, [pc, #-1036]	; 121b4 <__assert_fail@plt+0x1028>
   125bc:	mov	r2, #5
   125c0:	mov	r0, #0
   125c4:	bl	10f7c <dcgettext@plt>
   125c8:	mov	r1, #0
   125cc:	mov	r2, r0
   125d0:	mov	r0, r1
   125d4:	bl	11000 <error@plt>
   125d8:	b	11268 <__assert_fail@plt+0xdc>
   125dc:	strb	r6, [lr]
   125e0:	b	12584 <__assert_fail@plt+0x13f8>
   125e4:	strb	r4, [lr]
   125e8:	b	12584 <__assert_fail@plt+0x13f8>
   125ec:	ldr	r3, [sp, #96]	; 0x60
   125f0:	str	r3, [sp, #112]	; 0x70
   125f4:	b	12244 <__assert_fail@plt+0x10b8>
   125f8:	add	r4, r6, r4
   125fc:	cmp	r1, r4
   12600:	movcs	r3, r5
   12604:	movcc	r3, #0
   12608:	strbcc	r3, [r1]
   1260c:	movcc	r3, r5
   12610:	b	11aec <__assert_fail@plt+0x960>
   12614:	mov	r2, #5
   12618:	ldr	r1, [pc, #-1128]	; 121b8 <__assert_fail@plt+0x102c>
   1261c:	mov	r0, r4
   12620:	bl	10f7c <dcgettext@plt>
   12624:	mov	r5, r0
   12628:	ldr	r0, [sp, #24]
   1262c:	bl	1e4cc <__assert_fail@plt+0xd340>
   12630:	mov	r2, r5
   12634:	mov	r1, r4
   12638:	mov	r3, r0
   1263c:	mov	r0, r4
   12640:	bl	11000 <error@plt>
   12644:	mov	r2, #5
   12648:	ldr	r1, [pc, #-1172]	; 121bc <__assert_fail@plt+0x1030>
   1264c:	mov	r0, r4
   12650:	bl	10f7c <dcgettext@plt>
   12654:	mov	r5, r0
   12658:	ldr	r0, [pc, #-1184]	; 121c0 <__assert_fail@plt+0x1034>
   1265c:	bl	1e4cc <__assert_fail@plt+0xd340>
   12660:	mov	r3, #512	; 0x200
   12664:	str	r3, [sp]
   12668:	mov	r2, r5
   1266c:	mov	r1, r4
   12670:	mov	r3, r0
   12674:	mov	r0, #1
   12678:	bl	11000 <error@plt>
   1267c:	mov	fp, #0
   12680:	mov	lr, #0
   12684:	pop	{r1}		; (ldr r1, [sp], #4)
   12688:	mov	r2, sp
   1268c:	push	{r2}		; (str r2, [sp, #-4]!)
   12690:	push	{r0}		; (str r0, [sp, #-4]!)
   12694:	ldr	ip, [pc, #16]	; 126ac <__assert_fail@plt+0x1520>
   12698:	push	{ip}		; (str ip, [sp, #-4]!)
   1269c:	ldr	r0, [pc, #12]	; 126b0 <__assert_fail@plt+0x1524>
   126a0:	ldr	r3, [pc, #12]	; 126b4 <__assert_fail@plt+0x1528>
   126a4:	bl	11018 <__libc_start_main@plt>
   126a8:	bl	11168 <abort@plt>
   126ac:	andeq	r1, r2, ip, ror #4
   126b0:	muleq	r1, r8, r1
   126b4:	andeq	r1, r2, ip, lsl #4
   126b8:	ldr	r3, [pc, #20]	; 126d4 <__assert_fail@plt+0x1548>
   126bc:	ldr	r2, [pc, #20]	; 126d8 <__assert_fail@plt+0x154c>
   126c0:	add	r3, pc, r3
   126c4:	ldr	r2, [r3, r2]
   126c8:	cmp	r2, #0
   126cc:	bxeq	lr
   126d0:	b	1103c <__gmon_start__@plt>
   126d4:	andeq	r0, r2, r8, lsr r9
   126d8:	andeq	r0, r0, r4, lsl #2
   126dc:	ldr	r3, [pc, #28]	; 12700 <__assert_fail@plt+0x1574>
   126e0:	ldr	r0, [pc, #28]	; 12704 <__assert_fail@plt+0x1578>
   126e4:	sub	r3, r3, r0
   126e8:	cmp	r3, #6
   126ec:	bxls	lr
   126f0:	ldr	r3, [pc, #16]	; 12708 <__assert_fail@plt+0x157c>
   126f4:	cmp	r3, #0
   126f8:	bxeq	lr
   126fc:	bx	r3
   12700:	andeq	r3, r3, r7, ror #2
   12704:	andeq	r3, r3, r4, ror #2
   12708:	andeq	r0, r0, r0
   1270c:	ldr	r1, [pc, #36]	; 12738 <__assert_fail@plt+0x15ac>
   12710:	ldr	r0, [pc, #36]	; 1273c <__assert_fail@plt+0x15b0>
   12714:	sub	r1, r1, r0
   12718:	asr	r1, r1, #2
   1271c:	add	r1, r1, r1, lsr #31
   12720:	asrs	r1, r1, #1
   12724:	bxeq	lr
   12728:	ldr	r3, [pc, #16]	; 12740 <__assert_fail@plt+0x15b4>
   1272c:	cmp	r3, #0
   12730:	bxeq	lr
   12734:	bx	r3
   12738:	andeq	r3, r3, r4, ror #2
   1273c:	andeq	r3, r3, r4, ror #2
   12740:	andeq	r0, r0, r0
   12744:	push	{r4, lr}
   12748:	ldr	r4, [pc, #24]	; 12768 <__assert_fail@plt+0x15dc>
   1274c:	ldrb	r3, [r4]
   12750:	cmp	r3, #0
   12754:	popne	{r4, pc}
   12758:	bl	126dc <__assert_fail@plt+0x1550>
   1275c:	mov	r3, #1
   12760:	strb	r3, [r4]
   12764:	pop	{r4, pc}
   12768:	andeq	r3, r3, ip, lsl #3
   1276c:	ldr	r0, [pc, #40]	; 1279c <__assert_fail@plt+0x1610>
   12770:	ldr	r3, [r0]
   12774:	cmp	r3, #0
   12778:	bne	12780 <__assert_fail@plt+0x15f4>
   1277c:	b	1270c <__assert_fail@plt+0x1580>
   12780:	ldr	r3, [pc, #24]	; 127a0 <__assert_fail@plt+0x1614>
   12784:	cmp	r3, #0
   12788:	beq	1277c <__assert_fail@plt+0x15f0>
   1278c:	push	{r4, lr}
   12790:	blx	r3
   12794:	pop	{r4, lr}
   12798:	b	1270c <__assert_fail@plt+0x1580>
   1279c:	andeq	r2, r3, r4, lsl pc
   127a0:	andeq	r0, r0, r0
   127a4:	cmp	r1, #0
   127a8:	beq	12874 <__assert_fail@plt+0x16e8>
   127ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127b0:	mov	r4, r0
   127b4:	ldrb	r1, [r0]
   127b8:	cmp	r1, #0
   127bc:	beq	12888 <__assert_fail@plt+0x16fc>
   127c0:	ldr	r5, [pc, #196]	; 1288c <__assert_fail@plt+0x1700>
   127c4:	ldr	sl, [pc, #196]	; 12890 <__assert_fail@plt+0x1704>
   127c8:	ldr	r9, [pc, #196]	; 12894 <__assert_fail@plt+0x1708>
   127cc:	ldr	r8, [pc, #196]	; 12898 <__assert_fail@plt+0x170c>
   127d0:	mov	r7, #2
   127d4:	mov	r6, #1
   127d8:	b	12818 <__assert_fail@plt+0x168c>
   127dc:	cmp	r1, #92	; 0x5c
   127e0:	beq	1285c <__assert_fail@plt+0x16d0>
   127e4:	cmp	r1, #10
   127e8:	beq	12844 <__assert_fail@plt+0x16b8>
   127ec:	ldr	r0, [r5]
   127f0:	ldr	r3, [r0, #20]
   127f4:	ldr	r2, [r0, #24]
   127f8:	add	ip, r3, #1
   127fc:	cmp	r3, r2
   12800:	strcc	ip, [r0, #20]
   12804:	strbcc	r1, [r3]
   12808:	bcs	12880 <__assert_fail@plt+0x16f4>
   1280c:	ldrb	r1, [r4, #1]!
   12810:	cmp	r1, #0
   12814:	beq	12840 <__assert_fail@plt+0x16b4>
   12818:	cmp	r1, #13
   1281c:	bne	127dc <__assert_fail@plt+0x1650>
   12820:	mov	r1, r6
   12824:	ldr	r3, [r5]
   12828:	mov	r2, r7
   1282c:	mov	r0, sl
   12830:	bl	10f58 <fwrite_unlocked@plt>
   12834:	ldrb	r1, [r4, #1]!
   12838:	cmp	r1, #0
   1283c:	bne	12818 <__assert_fail@plt+0x168c>
   12840:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12844:	ldr	r3, [r5]
   12848:	mov	r2, r7
   1284c:	mov	r1, r6
   12850:	mov	r0, r8
   12854:	bl	10f58 <fwrite_unlocked@plt>
   12858:	b	1280c <__assert_fail@plt+0x1680>
   1285c:	ldr	r3, [r5]
   12860:	mov	r2, r7
   12864:	mov	r1, r6
   12868:	mov	r0, r9
   1286c:	bl	10f58 <fwrite_unlocked@plt>
   12870:	b	1280c <__assert_fail@plt+0x1680>
   12874:	ldr	r3, [pc, #16]	; 1288c <__assert_fail@plt+0x1700>
   12878:	ldr	r1, [r3]
   1287c:	b	10ec8 <fputs_unlocked@plt>
   12880:	bl	11108 <__overflow@plt>
   12884:	b	1280c <__assert_fail@plt+0x1680>
   12888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1288c:	andeq	r3, r3, r4, lsl #3
   12890:	andeq	r1, r2, r0, asr #7
   12894:	andeq	r1, r2, r4, asr #7
   12898:			; <UNDEFINED> instruction: 0x000213bc
   1289c:	push	{r4, r5, r6, r7, r8, lr}
   128a0:	mov	r7, r1
   128a4:	ldr	r1, [pc, #400]	; 12a3c <__assert_fail@plt+0x18b0>
   128a8:	mov	r5, r2
   128ac:	mov	r6, r0
   128b0:	bl	10eec <strcmp@plt>
   128b4:	mov	r3, #0
   128b8:	strb	r3, [r5]
   128bc:	cmp	r0, r3
   128c0:	bne	1297c <__assert_fail@plt+0x17f0>
   128c4:	ldr	r2, [pc, #372]	; 12a40 <__assert_fail@plt+0x18b4>
   128c8:	ldr	r4, [pc, #372]	; 12a44 <__assert_fail@plt+0x18b8>
   128cc:	mov	r3, #1
   128d0:	ldr	r5, [r2]
   128d4:	mov	r1, #2
   128d8:	mov	r0, r5
   128dc:	strb	r3, [r4]
   128e0:	bl	1a33c <__assert_fail@plt+0x91b0>
   128e4:	ldr	r3, [r4, #8]
   128e8:	ldr	r2, [r4, #12]
   128ec:	mov	r1, r7
   128f0:	lsr	r3, r3, #3
   128f4:	orr	r2, r3, r2, lsl #29
   128f8:	mov	r0, r5
   128fc:	bl	1a140 <__assert_fail@plt+0x8fb4>
   12900:	subs	r4, r0, #0
   12904:	beq	12910 <__assert_fail@plt+0x1784>
   12908:	bl	11090 <__errno_location@plt>
   1290c:	ldr	r4, [r0]
   12910:	mov	r0, r5
   12914:	bl	11138 <clearerr_unlocked@plt>
   12918:	cmp	r4, #0
   1291c:	bne	1294c <__assert_fail@plt+0x17c0>
   12920:	mov	r4, #1
   12924:	mov	r0, r4
   12928:	pop	{r4, r5, r6, r7, r8, pc}
   1292c:	bl	11090 <__errno_location@plt>
   12930:	ldr	r4, [r0]
   12934:	mov	r0, r8
   12938:	bl	1a370 <__assert_fail@plt+0x91e4>
   1293c:	cmp	r0, #0
   12940:	beq	12918 <__assert_fail@plt+0x178c>
   12944:	cmp	r4, #0
   12948:	beq	129d0 <__assert_fail@plt+0x1844>
   1294c:	mov	r2, r6
   12950:	mov	r1, #3
   12954:	mov	r0, #0
   12958:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   1295c:	mov	r1, r4
   12960:	ldr	r2, [pc, #224]	; 12a48 <__assert_fail@plt+0x18bc>
   12964:	mov	r4, #0
   12968:	mov	r3, r0
   1296c:	mov	r0, #0
   12970:	bl	11000 <error@plt>
   12974:	mov	r0, r4
   12978:	pop	{r4, r5, r6, r7, r8, pc}
   1297c:	ldr	r1, [pc, #200]	; 12a4c <__assert_fail@plt+0x18c0>
   12980:	mov	r0, r6
   12984:	bl	1a470 <__assert_fail@plt+0x92e4>
   12988:	subs	r8, r0, #0
   1298c:	beq	129dc <__assert_fail@plt+0x1850>
   12990:	mov	r1, #2
   12994:	bl	1a33c <__assert_fail@plt+0x91b0>
   12998:	ldr	r2, [pc, #164]	; 12a44 <__assert_fail@plt+0x18b8>
   1299c:	mov	r1, r7
   129a0:	mov	r0, r8
   129a4:	ldr	r3, [r2, #8]
   129a8:	ldr	r2, [r2, #12]
   129ac:	lsr	r3, r3, #3
   129b0:	orr	r2, r3, r2, lsl #29
   129b4:	bl	1a140 <__assert_fail@plt+0x8fb4>
   129b8:	cmp	r0, #0
   129bc:	bne	1292c <__assert_fail@plt+0x17a0>
   129c0:	mov	r0, r8
   129c4:	bl	1a370 <__assert_fail@plt+0x91e4>
   129c8:	cmp	r0, #0
   129cc:	beq	12920 <__assert_fail@plt+0x1794>
   129d0:	bl	11090 <__errno_location@plt>
   129d4:	ldr	r4, [r0]
   129d8:	b	12918 <__assert_fail@plt+0x178c>
   129dc:	ldr	r3, [pc, #96]	; 12a44 <__assert_fail@plt+0x18b8>
   129e0:	ldrb	r4, [r3, #16]
   129e4:	cmp	r4, #0
   129e8:	beq	12a30 <__assert_fail@plt+0x18a4>
   129ec:	bl	11090 <__errno_location@plt>
   129f0:	ldr	r7, [r0]
   129f4:	cmp	r7, #2
   129f8:	moveq	r3, #1
   129fc:	strbeq	r3, [r5]
   12a00:	beq	12924 <__assert_fail@plt+0x1798>
   12a04:	mov	r2, r6
   12a08:	mov	r1, #3
   12a0c:	mov	r0, #0
   12a10:	bl	1d5d8 <__assert_fail@plt+0xc44c>
   12a14:	mov	r1, r7
   12a18:	ldr	r2, [pc, #40]	; 12a48 <__assert_fail@plt+0x18bc>
   12a1c:	mov	r4, #0
   12a20:	mov	r3, r0
   12a24:	mov	r0, #0
   12a28:	bl	11000 <error@plt>
   12a2c:	b	12924 <__assert_fail@plt+0x1798>
   12a30:	bl	11090 <__errno_location@plt>
   12a34:	ldr	r7, [r0]
   12a38:	b	12a04 <__assert_fail@plt+0x1878>
   12a3c:	andeq	r1, r2, r8, asr #7
   12a40:	andeq	r3, r3, r0, lsl #3
   12a44:	muleq	r3, r0, r1
   12a48:	andeq	r1, r2, r4, lsr #23
   12a4c:	andeq	r1, r2, ip, asr #7
   12a50:	subs	r5, r0, #0
   12a54:	push	{r7, lr}
   12a58:	sub	sp, sp, #56	; 0x38
   12a5c:	beq	12a98 <__assert_fail@plt+0x190c>
   12a60:	ldr	r3, [pc, #896]	; 12de8 <__assert_fail@plt+0x1c5c>
   12a64:	mov	r2, #5
   12a68:	ldr	r1, [pc, #892]	; 12dec <__assert_fail@plt+0x1c60>
   12a6c:	mov	r0, #0
   12a70:	ldr	r4, [r3]
   12a74:	bl	10f7c <dcgettext@plt>
   12a78:	ldr	r3, [pc, #880]	; 12df0 <__assert_fail@plt+0x1c64>
   12a7c:	mov	r1, #1
   12a80:	ldr	r3, [r3]
   12a84:	mov	r2, r0
   12a88:	mov	r0, r4
   12a8c:	bl	110d8 <__fprintf_chk@plt>
   12a90:	mov	r0, r5
   12a94:	bl	11060 <exit@plt>
   12a98:	mov	r2, #5
   12a9c:	ldr	r1, [pc, #848]	; 12df4 <__assert_fail@plt+0x1c68>
   12aa0:	bl	10f7c <dcgettext@plt>
   12aa4:	ldr	r3, [pc, #836]	; 12df0 <__assert_fail@plt+0x1c64>
   12aa8:	ldr	r6, [pc, #840]	; 12df8 <__assert_fail@plt+0x1c6c>
   12aac:	ldr	r4, [pc, #840]	; 12dfc <__assert_fail@plt+0x1c70>
   12ab0:	ldr	r2, [r3]
   12ab4:	mov	r1, r0
   12ab8:	mov	r0, #1
   12abc:	bl	110c0 <__printf_chk@plt>
   12ac0:	mov	r2, #5
   12ac4:	ldr	r1, [pc, #820]	; 12e00 <__assert_fail@plt+0x1c74>
   12ac8:	mov	r0, r5
   12acc:	bl	10f7c <dcgettext@plt>
   12ad0:	mov	r3, #512	; 0x200
   12ad4:	ldr	r2, [pc, #808]	; 12e04 <__assert_fail@plt+0x1c78>
   12ad8:	mov	r1, r0
   12adc:	mov	r0, #1
   12ae0:	bl	110c0 <__printf_chk@plt>
   12ae4:	mov	r2, #5
   12ae8:	ldr	r1, [pc, #792]	; 12e08 <__assert_fail@plt+0x1c7c>
   12aec:	mov	r0, r5
   12af0:	bl	10f7c <dcgettext@plt>
   12af4:	ldr	r1, [r6]
   12af8:	bl	10ec8 <fputs_unlocked@plt>
   12afc:	mov	r2, #5
   12b00:	ldr	r1, [pc, #772]	; 12e0c <__assert_fail@plt+0x1c80>
   12b04:	mov	r0, r5
   12b08:	bl	10f7c <dcgettext@plt>
   12b0c:	ldr	r1, [r6]
   12b10:	bl	10ec8 <fputs_unlocked@plt>
   12b14:	mov	r2, #5
   12b18:	ldr	r1, [pc, #752]	; 12e10 <__assert_fail@plt+0x1c84>
   12b1c:	mov	r0, r5
   12b20:	bl	10f7c <dcgettext@plt>
   12b24:	ldr	r1, [r6]
   12b28:	bl	10ec8 <fputs_unlocked@plt>
   12b2c:	mov	r2, #5
   12b30:	ldr	r1, [pc, #732]	; 12e14 <__assert_fail@plt+0x1c88>
   12b34:	mov	r0, r5
   12b38:	bl	10f7c <dcgettext@plt>
   12b3c:	ldr	r1, [r6]
   12b40:	bl	10ec8 <fputs_unlocked@plt>
   12b44:	mov	r2, #5
   12b48:	ldr	r1, [pc, #712]	; 12e18 <__assert_fail@plt+0x1c8c>
   12b4c:	mov	r0, r5
   12b50:	bl	10f7c <dcgettext@plt>
   12b54:	ldr	r1, [r6]
   12b58:	bl	10ec8 <fputs_unlocked@plt>
   12b5c:	mov	r2, #5
   12b60:	ldr	r1, [pc, #692]	; 12e1c <__assert_fail@plt+0x1c90>
   12b64:	mov	r0, r5
   12b68:	bl	10f7c <dcgettext@plt>
   12b6c:	ldr	r1, [r6]
   12b70:	bl	10ec8 <fputs_unlocked@plt>
   12b74:	mov	r2, #5
   12b78:	ldr	r1, [pc, #672]	; 12e20 <__assert_fail@plt+0x1c94>
   12b7c:	mov	r0, r5
   12b80:	bl	10f7c <dcgettext@plt>
   12b84:	ldr	r1, [r6]
   12b88:	bl	10ec8 <fputs_unlocked@plt>
   12b8c:	mov	r2, #5
   12b90:	ldr	r1, [pc, #652]	; 12e24 <__assert_fail@plt+0x1c98>
   12b94:	mov	r0, r5
   12b98:	bl	10f7c <dcgettext@plt>
   12b9c:	ldr	r1, [r6]
   12ba0:	bl	10ec8 <fputs_unlocked@plt>
   12ba4:	mov	r2, #5
   12ba8:	ldr	r1, [pc, #632]	; 12e28 <__assert_fail@plt+0x1c9c>
   12bac:	mov	r0, r5
   12bb0:	bl	10f7c <dcgettext@plt>
   12bb4:	ldr	r1, [r6]
   12bb8:	bl	10ec8 <fputs_unlocked@plt>
   12bbc:	mov	r2, #5
   12bc0:	ldr	r1, [pc, #612]	; 12e2c <__assert_fail@plt+0x1ca0>
   12bc4:	mov	r0, r5
   12bc8:	bl	10f7c <dcgettext@plt>
   12bcc:	ldr	r1, [r6]
   12bd0:	bl	10ec8 <fputs_unlocked@plt>
   12bd4:	mov	r2, #5
   12bd8:	ldr	r1, [pc, #592]	; 12e30 <__assert_fail@plt+0x1ca4>
   12bdc:	mov	r0, r5
   12be0:	bl	10f7c <dcgettext@plt>
   12be4:	ldr	r1, [r6]
   12be8:	bl	10ec8 <fputs_unlocked@plt>
   12bec:	mov	r2, #5
   12bf0:	ldr	r1, [pc, #572]	; 12e34 <__assert_fail@plt+0x1ca8>
   12bf4:	mov	r0, r5
   12bf8:	bl	10f7c <dcgettext@plt>
   12bfc:	ldr	r2, [pc, #564]	; 12e38 <__assert_fail@plt+0x1cac>
   12c00:	mov	r1, r0
   12c04:	mov	r0, #1
   12c08:	bl	110c0 <__printf_chk@plt>
   12c0c:	mov	r2, #5
   12c10:	ldr	r1, [pc, #548]	; 12e3c <__assert_fail@plt+0x1cb0>
   12c14:	mov	r0, r5
   12c18:	bl	10f7c <dcgettext@plt>
   12c1c:	ldr	r1, [r6]
   12c20:	bl	10ec8 <fputs_unlocked@plt>
   12c24:	ldm	r4!, {r0, r1, r2, r3}
   12c28:	mov	lr, sp
   12c2c:	stmia	lr!, {r0, r1, r2, r3}
   12c30:	ldm	r4!, {r0, r1, r2, r3}
   12c34:	ldr	ip, [sp]
   12c38:	stmia	lr!, {r0, r1, r2, r3}
   12c3c:	cmp	ip, #0
   12c40:	ldm	r4!, {r0, r1, r2, r3}
   12c44:	stmia	lr!, {r0, r1, r2, r3}
   12c48:	ldm	r4, {r0, r1}
   12c4c:	moveq	r4, sp
   12c50:	stm	lr, {r0, r1}
   12c54:	beq	12c84 <__assert_fail@plt+0x1af8>
   12c58:	ldr	r7, [pc, #480]	; 12e40 <__assert_fail@plt+0x1cb4>
   12c5c:	mov	r4, sp
   12c60:	b	12c70 <__assert_fail@plt+0x1ae4>
   12c64:	ldr	ip, [r4, #8]!
   12c68:	cmp	ip, #0
   12c6c:	beq	12c84 <__assert_fail@plt+0x1af8>
   12c70:	mov	r1, ip
   12c74:	mov	r0, r7
   12c78:	bl	10eec <strcmp@plt>
   12c7c:	cmp	r0, #0
   12c80:	bne	12c64 <__assert_fail@plt+0x1ad8>
   12c84:	ldr	r4, [r4, #4]
   12c88:	mov	r2, #5
   12c8c:	cmp	r4, #0
   12c90:	ldr	r1, [pc, #428]	; 12e44 <__assert_fail@plt+0x1cb8>
   12c94:	beq	12d3c <__assert_fail@plt+0x1bb0>
   12c98:	mov	r0, #0
   12c9c:	bl	10f7c <dcgettext@plt>
   12ca0:	ldr	r3, [pc, #416]	; 12e48 <__assert_fail@plt+0x1cbc>
   12ca4:	ldr	r2, [pc, #416]	; 12e4c <__assert_fail@plt+0x1cc0>
   12ca8:	mov	r1, r0
   12cac:	mov	r0, #1
   12cb0:	bl	110c0 <__printf_chk@plt>
   12cb4:	mov	r1, #0
   12cb8:	mov	r0, #5
   12cbc:	bl	11114 <setlocale@plt>
   12cc0:	cmp	r0, #0
   12cc4:	ldreq	r7, [pc, #372]	; 12e40 <__assert_fail@plt+0x1cb4>
   12cc8:	beq	12ce4 <__assert_fail@plt+0x1b58>
   12ccc:	mov	r2, #3
   12cd0:	ldr	r1, [pc, #376]	; 12e50 <__assert_fail@plt+0x1cc4>
   12cd4:	bl	1115c <strncmp@plt>
   12cd8:	ldr	r7, [pc, #352]	; 12e40 <__assert_fail@plt+0x1cb4>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12dcc <__assert_fail@plt+0x1c40>
   12ce4:	mov	r2, #5
   12ce8:	ldr	r1, [pc, #356]	; 12e54 <__assert_fail@plt+0x1cc8>
   12cec:	mov	r0, #0
   12cf0:	bl	10f7c <dcgettext@plt>
   12cf4:	ldr	r3, [pc, #324]	; 12e40 <__assert_fail@plt+0x1cb4>
   12cf8:	ldr	r2, [pc, #328]	; 12e48 <__assert_fail@plt+0x1cbc>
   12cfc:	mov	r1, r0
   12d00:	mov	r0, #1
   12d04:	bl	110c0 <__printf_chk@plt>
   12d08:	mov	r2, #5
   12d0c:	ldr	r1, [pc, #324]	; 12e58 <__assert_fail@plt+0x1ccc>
   12d10:	mov	r0, #0
   12d14:	bl	10f7c <dcgettext@plt>
   12d18:	ldr	r2, [pc, #316]	; 12e5c <__assert_fail@plt+0x1cd0>
   12d1c:	cmp	r4, r7
   12d20:	ldr	r3, [pc, #312]	; 12e60 <__assert_fail@plt+0x1cd4>
   12d24:	movne	r3, r2
   12d28:	mov	r1, r0
   12d2c:	mov	r2, r4
   12d30:	mov	r0, #1
   12d34:	bl	110c0 <__printf_chk@plt>
   12d38:	b	12a90 <__assert_fail@plt+0x1904>
   12d3c:	mov	r0, r4
   12d40:	bl	10f7c <dcgettext@plt>
   12d44:	ldr	r3, [pc, #252]	; 12e48 <__assert_fail@plt+0x1cbc>
   12d48:	ldr	r2, [pc, #252]	; 12e4c <__assert_fail@plt+0x1cc0>
   12d4c:	mov	r1, r0
   12d50:	mov	r0, #1
   12d54:	bl	110c0 <__printf_chk@plt>
   12d58:	mov	r1, r4
   12d5c:	mov	r0, #5
   12d60:	bl	11114 <setlocale@plt>
   12d64:	cmp	r0, #0
   12d68:	beq	12d80 <__assert_fail@plt+0x1bf4>
   12d6c:	mov	r2, #3
   12d70:	ldr	r1, [pc, #216]	; 12e50 <__assert_fail@plt+0x1cc4>
   12d74:	bl	1115c <strncmp@plt>
   12d78:	cmp	r0, #0
   12d7c:	bne	12dc4 <__assert_fail@plt+0x1c38>
   12d80:	mov	r2, #5
   12d84:	ldr	r1, [pc, #200]	; 12e54 <__assert_fail@plt+0x1cc8>
   12d88:	mov	r0, #0
   12d8c:	bl	10f7c <dcgettext@plt>
   12d90:	ldr	r3, [pc, #168]	; 12e40 <__assert_fail@plt+0x1cb4>
   12d94:	ldr	r2, [pc, #172]	; 12e48 <__assert_fail@plt+0x1cbc>
   12d98:	mov	r4, r3
   12d9c:	mov	r1, r0
   12da0:	mov	r0, #1
   12da4:	bl	110c0 <__printf_chk@plt>
   12da8:	ldr	r1, [pc, #168]	; 12e58 <__assert_fail@plt+0x1ccc>
   12dac:	mov	r2, #5
   12db0:	mov	r0, #0
   12db4:	bl	10f7c <dcgettext@plt>
   12db8:	ldr	r3, [pc, #160]	; 12e60 <__assert_fail@plt+0x1cd4>
   12dbc:	mov	r1, r0
   12dc0:	b	12d2c <__assert_fail@plt+0x1ba0>
   12dc4:	ldr	r7, [pc, #116]	; 12e40 <__assert_fail@plt+0x1cb4>
   12dc8:	mov	r4, r7
   12dcc:	mov	r2, #5
   12dd0:	ldr	r1, [pc, #140]	; 12e64 <__assert_fail@plt+0x1cd8>
   12dd4:	mov	r0, #0
   12dd8:	bl	10f7c <dcgettext@plt>
   12ddc:	ldr	r1, [r6]
   12de0:	bl	10ec8 <fputs_unlocked@plt>
   12de4:	b	12ce4 <__assert_fail@plt+0x1b58>
   12de8:	andeq	r3, r3, r8, ror r1
   12dec:	ldrdeq	r1, [r2], -r8
   12df0:			; <UNDEFINED> instruction: 0x000331b8
   12df4:	andeq	r1, r2, r0, lsl #8
   12df8:	andeq	r3, r3, r4, lsl #3
   12dfc:	muleq	r2, r4, r2
   12e00:	andeq	r1, r2, r4, lsr #8
   12e04:	andeq	r1, r2, ip, asr #8
   12e08:	andeq	r1, r2, r4, asr r4
   12e0c:	andeq	r1, r2, ip, lsl #9
   12e10:	ldrdeq	r1, [r2], -r8
   12e14:	andeq	r1, r2, r8, lsl #10
   12e18:	andeq	r1, r2, r0, asr r5
   12e1c:	andeq	r1, r2, r8, ror #11
   12e20:	andeq	r1, r2, r0, lsr #12
   12e24:	andeq	r1, r2, r8, asr r6
   12e28:	ldrdeq	r1, [r2], -r8
   12e2c:	muleq	r2, r0, r8
   12e30:	andeq	r1, r2, r0, asr #17
   12e34:	strdeq	r1, [r2], -r8
   12e38:	andeq	r1, r2, r4, lsr #18
   12e3c:	andeq	r1, r2, r0, lsr r9
   12e40:	ldrdeq	r1, [r2], -r0
   12e44:	andeq	r1, r2, r0, lsl #21
   12e48:	muleq	r2, r8, sl
   12e4c:	andeq	r1, r2, r0, asr #21
   12e50:	ldrdeq	r1, [r2], -r0
   12e54:	andeq	r1, r2, ip, lsl fp
   12e58:	andeq	r1, r2, r8, lsr fp
   12e5c:	andeq	r1, r2, r4, asr r6
   12e60:	andeq	r2, r2, r4, rrx
   12e64:	ldrdeq	r1, [r2], -r4
   12e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e6c:	sub	sp, sp, #548	; 0x224
   12e70:	mov	r2, r1
   12e74:	add	ip, sp, #288	; 0x120
   12e78:	add	lr, sp, #416	; 0x1a0
   12e7c:	str	r0, [sp, #4]
   12e80:	ldr	r0, [r2]
   12e84:	ldr	r1, [r2, #4]
   12e88:	mov	r3, lr
   12e8c:	add	r2, r2, #8
   12e90:	stmia	r3!, {r0, r1}
   12e94:	add	r3, sp, #416	; 0x1a0
   12e98:	ldrd	r0, [r3]
   12e9c:	strd	r0, [ip], #8
   12ea0:	cmp	lr, ip
   12ea4:	bne	12e80 <__assert_fail@plt+0x1cf4>
   12ea8:	ldr	r3, [sp, #4]
   12eac:	mov	ip, r3
   12eb0:	add	r5, r3, #64	; 0x40
   12eb4:	ldr	r0, [ip]
   12eb8:	ldr	r1, [ip, #4]
   12ebc:	ldr	r2, [ip, #8]
   12ec0:	ldr	r3, [ip, #12]
   12ec4:	mov	r4, lr
   12ec8:	add	ip, ip, #16
   12ecc:	cmp	ip, r5
   12ed0:	stmia	r4!, {r0, r1, r2, r3}
   12ed4:	mov	lr, r4
   12ed8:	bne	12eb4 <__assert_fail@plt+0x1d28>
   12edc:	add	r3, sp, #456	; 0x1c8
   12ee0:	ldr	lr, [sp, #4]
   12ee4:	ldrd	r6, [r3]
   12ee8:	add	r3, sp, #424	; 0x1a8
   12eec:	add	r1, pc, #796	; 0x31c
   12ef0:	ldrd	r0, [r1]
   12ef4:	ldrd	sl, [r3]
   12ef8:	add	r3, sp, #304	; 0x130
   12efc:	add	ip, sp, #320	; 0x140
   12f00:	ldrd	r2, [r3]
   12f04:	adds	sl, sl, r6
   12f08:	adc	fp, fp, r7
   12f0c:	mov	r4, r2
   12f10:	mov	r5, r3
   12f14:	ldrd	r2, [lr, #72]	; 0x48
   12f18:	strd	r4, [sp, #88]	; 0x58
   12f1c:	adds	r4, r4, sl
   12f20:	adc	r5, r5, fp
   12f24:	mov	r8, r4
   12f28:	mov	r9, r5
   12f2c:	eor	r8, r8, r0
   12f30:	eor	r9, r9, r1
   12f34:	mov	r0, r8
   12f38:	mov	r1, r9
   12f3c:	eor	r0, r0, r2
   12f40:	eor	r1, r1, r3
   12f44:	add	r3, sp, #336	; 0x150
   12f48:	str	r1, [sp, #16]
   12f4c:	str	r0, [sp, #20]
   12f50:	strd	r4, [sp, #40]	; 0x28
   12f54:	ldrd	r0, [r3]
   12f58:	add	r5, pc, #696	; 0x2b8
   12f5c:	ldrd	r4, [r5]
   12f60:	ldrd	r2, [sp, #16]
   12f64:	mov	sl, r0
   12f68:	mov	fp, r1
   12f6c:	adds	r2, r2, r4
   12f70:	adc	r3, r3, r5
   12f74:	mov	r8, r2
   12f78:	mov	r9, r3
   12f7c:	add	r3, sp, #472	; 0x1d8
   12f80:	strd	r8, [sp, #72]	; 0x48
   12f84:	eor	r8, r8, r6
   12f88:	eor	r9, r9, r7
   12f8c:	mov	r4, r8
   12f90:	mov	r5, r9
   12f94:	ldrd	r8, [ip]
   12f98:	add	ip, sp, #312	; 0x138
   12f9c:	ldrd	r6, [r3]
   12fa0:	add	r3, sp, #440	; 0x1b8
   12fa4:	strd	r8, [sp, #32]
   12fa8:	ldrd	r8, [ip]
   12fac:	ldrd	r2, [r3]
   12fb0:	add	ip, sp, #288	; 0x120
   12fb4:	strd	r8, [sp, #24]
   12fb8:	ldrd	r8, [ip]
   12fbc:	add	r1, pc, #604	; 0x25c
   12fc0:	ldrd	r0, [r1]
   12fc4:	adds	r6, r6, r2
   12fc8:	adc	r7, r7, r3
   12fcc:	strd	sl, [sp, #96]	; 0x60
   12fd0:	adds	sl, sl, r6
   12fd4:	strd	r8, [sp, #8]
   12fd8:	mov	r8, sl
   12fdc:	eor	r8, r8, r0
   12fe0:	adc	fp, fp, r7
   12fe4:	mov	r0, r8
   12fe8:	add	r8, sp, #464	; 0x1d0
   12fec:	strd	sl, [sp, #80]	; 0x50
   12ff0:	mov	r9, fp
   12ff4:	ldrd	sl, [r8]
   12ff8:	add	r8, sp, #432	; 0x1b0
   12ffc:	eor	r9, r9, r1
   13000:	mov	r1, r9
   13004:	ldrd	r8, [r8]
   13008:	ldrd	r2, [lr, #88]	; 0x58
   1300c:	lsr	ip, r4, #24
   13010:	adds	sl, sl, r8
   13014:	adc	fp, fp, r9
   13018:	add	r8, sp, #448	; 0x1c0
   1301c:	strd	sl, [sp, #64]	; 0x40
   13020:	ldrd	sl, [lr, #80]	; 0x50
   13024:	ldrd	r8, [r8]
   13028:	orr	ip, ip, r5, lsl #8
   1302c:	strd	sl, [sp, #112]	; 0x70
   13030:	add	sl, sp, #416	; 0x1a0
   13034:	eor	r2, r2, r0
   13038:	ldrd	sl, [sl]
   1303c:	eor	r3, r3, r1
   13040:	str	ip, [sp, #56]	; 0x38
   13044:	adds	sl, sl, r8
   13048:	adc	fp, fp, r9
   1304c:	mov	r8, sl
   13050:	mov	r9, fp
   13054:	ldrd	sl, [lr, #64]	; 0x40
   13058:	mov	r0, r2
   1305c:	mov	r1, r3
   13060:	strd	sl, [sp, #48]	; 0x30
   13064:	ldrd	r2, [sp, #64]	; 0x40
   13068:	ldrd	sl, [sp, #32]
   1306c:	lsr	ip, r5, #24
   13070:	str	r1, [sp, #104]	; 0x68
   13074:	adds	sl, sl, r2
   13078:	adc	fp, fp, r3
   1307c:	orr	r3, ip, r4, lsl #8
   13080:	strd	sl, [sp, #120]	; 0x78
   13084:	ldrd	r4, [sp, #40]	; 0x28
   13088:	ldrd	sl, [sp, #24]
   1308c:	str	r3, [sp, #60]	; 0x3c
   13090:	add	r3, pc, #400	; 0x190
   13094:	ldrd	r2, [r3]
   13098:	adds	r4, r4, sl
   1309c:	adc	r5, r5, fp
   130a0:	mov	sl, r4
   130a4:	mov	fp, r5
   130a8:	ldrd	r4, [sp, #8]
   130ac:	str	r0, [sp, #108]	; 0x6c
   130b0:	ldrd	r0, [sp, #112]	; 0x70
   130b4:	adds	r4, r4, r8
   130b8:	adc	r5, r5, r9
   130bc:	mov	r8, r4
   130c0:	mov	r9, r5
   130c4:	ldrd	r4, [sp, #120]	; 0x78
   130c8:	add	r7, pc, #352	; 0x160
   130cc:	ldrd	r6, [r7]
   130d0:	strd	r8, [sp, #144]	; 0x90
   130d4:	eor	r2, r2, r4
   130d8:	eor	r3, r3, r5
   130dc:	mov	r4, r2
   130e0:	mov	r5, r3
   130e4:	ldrd	r2, [sp, #56]	; 0x38
   130e8:	eor	r0, r0, r4
   130ec:	eor	r1, r1, r5
   130f0:	mov	r4, r0
   130f4:	mov	r5, r1
   130f8:	ldrd	r0, [sp, #16]
   130fc:	adds	r2, r2, sl
   13100:	adc	r3, r3, fp
   13104:	eor	r0, r0, r2
   13108:	eor	r1, r1, r3
   1310c:	strd	r2, [sp, #168]	; 0xa8
   13110:	mov	r2, r0
   13114:	mov	r3, r1
   13118:	ldrd	r0, [sp, #48]	; 0x30
   1311c:	mov	sl, r8
   13120:	mov	fp, r9
   13124:	eor	sl, sl, r6
   13128:	eor	fp, fp, r7
   1312c:	eor	r0, r0, sl
   13130:	eor	r1, r1, fp
   13134:	mov	r6, r0
   13138:	mov	r7, r1
   1313c:	add	r9, pc, #244	; 0xf4
   13140:	ldrd	r8, [r9]
   13144:	ldrd	r0, [sp, #104]	; 0x68
   13148:	str	r5, [sp, #64]	; 0x40
   1314c:	str	r4, [sp, #68]	; 0x44
   13150:	adds	r8, r8, r0
   13154:	adc	r9, r9, r1
   13158:	add	r1, sp, #472	; 0x1d8
   1315c:	strd	r8, [sp, #192]	; 0xc0
   13160:	ldrd	r0, [r1]
   13164:	ldrd	r4, [sp, #64]	; 0x40
   13168:	str	r7, [sp, #136]	; 0x88
   1316c:	eor	r1, r1, r9
   13170:	mov	r9, r1
   13174:	add	r1, sp, #344	; 0x158
   13178:	eor	r0, r0, r8
   1317c:	mov	r8, r0
   13180:	str	r6, [sp, #140]	; 0x8c
   13184:	ldrd	r6, [r1]
   13188:	add	r1, pc, #176	; 0xb0
   1318c:	ldrd	r0, [r1]
   13190:	lsr	ip, r2, #16
   13194:	strd	r6, [sp, #48]	; 0x30
   13198:	adds	r0, r0, r4
   1319c:	adc	r1, r1, r5
   131a0:	mov	r7, r1
   131a4:	orr	r1, ip, r3, lsl #16
   131a8:	mov	r6, r0
   131ac:	add	fp, pc, #148	; 0x94
   131b0:	ldrd	sl, [fp]
   131b4:	str	r1, [sp, #112]	; 0x70
   131b8:	ldrd	r0, [sp, #136]	; 0x88
   131bc:	lsr	ip, r3, #16
   131c0:	orr	ip, ip, r2, lsl #16
   131c4:	adds	r0, r0, sl
   131c8:	adc	r1, r1, fp
   131cc:	mov	r5, r1
   131d0:	add	r1, sp, #464	; 0x1d0
   131d4:	add	r2, sp, #448	; 0x1c0
   131d8:	ldrd	sl, [r1]
   131dc:	strd	r6, [sp, #152]	; 0x98
   131e0:	mov	r4, r0
   131e4:	eor	sl, sl, r6
   131e8:	eor	fp, fp, r7
   131ec:	ldrd	r6, [r2]
   131f0:	add	r2, sp, #328	; 0x148
   131f4:	str	ip, [sp, #116]	; 0x74
   131f8:	eor	r6, r6, r4
   131fc:	eor	r7, r7, r5
   13200:	strd	r4, [sp, #160]	; 0xa0
   13204:	mov	r4, r6
   13208:	mov	r5, r7
   1320c:	b	13250 <__assert_fail@plt+0x20c4>
   13210:	blcs	fae294 <optarg@@GLIBC_2.4+0xf7b10c>
   13214:	blls	16d44c <optarg@@GLIBC_2.4+0x13a2c4>
   13218:	strbhi	sl, [sl], #1851	; 0x73b
   1321c:	bllt	19fec38 <optarg@@GLIBC_2.4+0x19cbab0>
   13220:	cmnne	lr, #1073741854	; 0x4000001e
   13224:	blpl	ff846690 <optarg@@GLIBC_2.4+0xff813508>
   13228:	blx	10827de <optarg@@GLIBC_2.4+0x104f656>
   1322c:	svcne	0x0083d9ab
   13230:	sfmge	f0, 3, [r6, #836]!	; 0x344
   13234:	tstpl	lr, pc, ror r2
   13238:	svcpl	0x001d36f1
   1323c:	strbge	pc, [pc, #-1338]	; 12d0a <__assert_fail@plt+0x1b7e>	; <UNPREDICTABLE>
   13240:	vcmla.f32	d15, d4, d27[0], #90
   13244:	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
   13248:	vtbl.8	d12, {d12-d13}, d8
   1324c:	bvs	28cbf0 <optarg@@GLIBC_2.4+0x259a68>
   13250:	ldrd	r6, [r2]
   13254:	mov	r0, sl
   13258:	mov	r1, fp
   1325c:	strd	r6, [sp, #40]	; 0x28
   13260:	ldrd	sl, [sp, #112]	; 0x70
   13264:	ldrd	r6, [sp, #72]	; 0x48
   13268:	add	r2, sp, #296	; 0x128
   1326c:	lsr	r3, r8, #24
   13270:	adds	r6, r6, sl
   13274:	adc	r7, r7, fp
   13278:	mov	sl, r6
   1327c:	mov	fp, r7
   13280:	orr	r3, r3, r9, lsl #8
   13284:	ldrd	r6, [r2]
   13288:	str	r3, [sp, #128]	; 0x80
   1328c:	lsr	r3, r9, #24
   13290:	orr	r3, r3, r8, lsl #8
   13294:	strd	r6, [sp, #16]
   13298:	str	r3, [sp, #132]	; 0x84
   1329c:	ldrd	r6, [sp, #80]	; 0x50
   132a0:	ldrd	r2, [sp, #48]	; 0x30
   132a4:	strd	sl, [sp, #176]	; 0xb0
   132a8:	ldrd	r8, [sp, #128]	; 0x80
   132ac:	adds	r6, r6, r2
   132b0:	adc	r7, r7, r3
   132b4:	ldrd	r2, [sp, #56]	; 0x38
   132b8:	adds	r8, r8, r6
   132bc:	adc	r9, r9, r7
   132c0:	eor	r3, r3, fp
   132c4:	mov	fp, r3
   132c8:	lsr	r3, r4, #24
   132cc:	orr	r3, r3, r5, lsl #8
   132d0:	str	r3, [sp, #80]	; 0x50
   132d4:	add	r3, sp, #352	; 0x160
   132d8:	eor	r2, r2, sl
   132dc:	mov	sl, r2
   132e0:	ldrd	r2, [r3]
   132e4:	lsr	ip, r0, #24
   132e8:	mov	r6, r8
   132ec:	strd	r2, [sp, #56]	; 0x38
   132f0:	mov	r7, r9
   132f4:	ldrd	r2, [sp, #104]	; 0x68
   132f8:	orr	ip, ip, r1, lsl #8
   132fc:	lsr	r1, r1, #24
   13300:	orr	r1, r1, r0, lsl #8
   13304:	str	ip, [sp, #72]	; 0x48
   13308:	str	r1, [sp, #76]	; 0x4c
   1330c:	strd	r6, [sp, #208]	; 0xd0
   13310:	ldrd	r0, [sp, #40]	; 0x28
   13314:	ldrd	r6, [sp, #120]	; 0x78
   13318:	lsr	ip, r5, #24
   1331c:	eor	r2, r2, r8
   13320:	eor	r3, r3, r9
   13324:	orr	ip, ip, r4, lsl #8
   13328:	ldrd	r8, [sp, #144]	; 0x90
   1332c:	ldrd	r4, [sp, #16]
   13330:	adds	r6, r6, r0
   13334:	adc	r7, r7, r1
   13338:	adds	r8, r8, r4
   1333c:	adc	r9, r9, r5
   13340:	ldrd	r4, [sp, #72]	; 0x48
   13344:	str	ip, [sp, #84]	; 0x54
   13348:	lsl	r1, fp, #1
   1334c:	adds	r4, r4, r6
   13350:	adc	r5, r5, r7
   13354:	ldrd	r6, [sp, #80]	; 0x50
   13358:	orr	r1, r1, sl, lsr #31
   1335c:	str	r1, [sp, #108]	; 0x6c
   13360:	adds	r6, r6, r8
   13364:	adc	r7, r7, r9
   13368:	mov	r8, r6
   1336c:	mov	r9, r7
   13370:	ldrd	r6, [sp, #64]	; 0x40
   13374:	lsl	lr, sl, #1
   13378:	lsr	ip, r2, #16
   1337c:	eor	r6, r6, r4
   13380:	eor	r7, r7, r5
   13384:	mov	r0, r6
   13388:	mov	r1, r7
   1338c:	ldrd	r6, [sp, #56]	; 0x38
   13390:	strd	r4, [sp, #184]	; 0xb8
   13394:	orr	ip, ip, r3, lsl #16
   13398:	orr	r5, lr, fp, lsr #31
   1339c:	str	r5, [sp, #104]	; 0x68
   133a0:	str	ip, [sp, #120]	; 0x78
   133a4:	ldrd	r4, [sp, #104]	; 0x68
   133a8:	lsr	ip, r0, #16
   133ac:	adds	r6, r6, r8
   133b0:	orr	ip, ip, r1, lsl #16
   133b4:	lsr	r3, r3, #16
   133b8:	lsr	r1, r1, #16
   133bc:	adc	r7, r7, r9
   133c0:	mov	sl, r6
   133c4:	orr	r3, r3, r2, lsl #16
   133c8:	orr	r1, r1, r0, lsl #16
   133cc:	adds	r6, r4, sl
   133d0:	str	ip, [sp, #104]	; 0x68
   133d4:	str	r3, [sp, #124]	; 0x7c
   133d8:	str	r1, [sp, #108]	; 0x6c
   133dc:	mov	fp, r7
   133e0:	adc	r7, r5, fp
   133e4:	ldrd	r0, [sp, #104]	; 0x68
   133e8:	ldrd	sl, [sp, #152]	; 0x98
   133ec:	ldrd	r2, [sp, #120]	; 0x78
   133f0:	strd	r6, [sp, #200]	; 0xc8
   133f4:	adds	sl, sl, r0
   133f8:	eor	r3, r3, r7
   133fc:	adc	fp, fp, r1
   13400:	eor	r2, r2, r6
   13404:	ldrd	r0, [sp, #136]	; 0x88
   13408:	mov	r6, r3
   1340c:	mov	r7, r2
   13410:	mov	r2, sl
   13414:	adds	sl, sl, r6
   13418:	mov	r3, fp
   1341c:	adc	fp, fp, r7
   13420:	eor	r1, r1, r9
   13424:	eor	r5, r5, fp
   13428:	strd	sl, [sp, #216]	; 0xd8
   1342c:	mov	fp, r5
   13430:	mov	r5, r1
   13434:	add	r1, sp, #360	; 0x168
   13438:	eor	r0, r0, r8
   1343c:	eor	r4, r4, sl
   13440:	mov	sl, r4
   13444:	mov	r4, r0
   13448:	ldrd	r0, [r1]
   1344c:	strd	r4, [sp, #144]	; 0x90
   13450:	lsr	r9, fp, #24
   13454:	strd	r0, [sp, #64]	; 0x40
   13458:	ldrd	r0, [sp, #72]	; 0x48
   1345c:	lsr	ip, r4, #16
   13460:	eor	r0, r0, r2
   13464:	mov	r2, r0
   13468:	eor	r1, r1, r3
   1346c:	lsr	r0, sl, #24
   13470:	mov	r3, r1
   13474:	orr	r1, r0, fp, lsl #8
   13478:	str	r1, [sp, #152]	; 0x98
   1347c:	add	r1, sp, #368	; 0x170
   13480:	ldrd	r0, [r1]
   13484:	strd	r0, [sp, #72]	; 0x48
   13488:	ldrd	r0, [sp, #144]	; 0x90
   1348c:	lsl	r0, r3, #1
   13490:	orr	r4, ip, r1, lsl #16
   13494:	orr	ip, r9, sl, lsl #8
   13498:	ldrd	sl, [sp, #64]	; 0x40
   1349c:	ldrd	r8, [sp, #200]	; 0xc8
   134a0:	str	ip, [sp, #156]	; 0x9c
   134a4:	ldr	ip, [sp, #144]	; 0x90
   134a8:	adds	r8, r8, sl
   134ac:	adc	r9, r9, fp
   134b0:	mov	sl, r8
   134b4:	mov	fp, r9
   134b8:	ldrd	r8, [sp, #152]	; 0x98
   134bc:	lsr	r1, r1, #16
   134c0:	orr	r5, r1, ip, lsl #16
   134c4:	adds	r8, r8, sl
   134c8:	orr	r1, r0, r2, lsr #31
   134cc:	adc	r9, r9, fp
   134d0:	lsl	r2, r2, #1
   134d4:	str	r1, [sp, #140]	; 0x8c
   134d8:	mov	r0, r8
   134dc:	mov	r1, r9
   134e0:	orr	r3, r2, r3, lsr #31
   134e4:	str	r3, [sp, #136]	; 0x88
   134e8:	mov	r2, r0
   134ec:	mov	r3, r1
   134f0:	ldrd	r8, [sp, #160]	; 0xa0
   134f4:	eor	r2, r2, r6
   134f8:	eor	r3, r3, r7
   134fc:	strd	r0, [sp, #224]	; 0xe0
   13500:	ldrd	r6, [sp, #72]	; 0x48
   13504:	mov	r0, r2
   13508:	mov	r1, r3
   1350c:	ldrd	r2, [sp, #168]	; 0xa8
   13510:	adds	r8, r8, r4
   13514:	adc	r9, r9, r5
   13518:	adds	r2, r2, r6
   1351c:	adc	r3, r3, r7
   13520:	ldrd	r6, [sp, #136]	; 0x88
   13524:	mov	sl, r2
   13528:	mov	fp, r3
   1352c:	adds	r6, r6, sl
   13530:	adc	r7, r7, fp
   13534:	ldrd	r2, [sp, #80]	; 0x50
   13538:	mov	sl, r6
   1353c:	mov	fp, r7
   13540:	eor	fp, fp, r5
   13544:	lsr	lr, r0, #16
   13548:	eor	sl, sl, r4
   1354c:	orr	r5, lr, r1, lsl #16
   13550:	eor	r3, r3, r9
   13554:	strd	r8, [sp, #80]	; 0x50
   13558:	add	ip, sp, #400	; 0x190
   1355c:	strd	r6, [sp, #232]	; 0xe8
   13560:	strd	sl, [sp, #144]	; 0x90
   13564:	str	r5, [sp, #160]	; 0xa0
   13568:	str	fp, [sp, #168]	; 0xa8
   1356c:	ldrd	r4, [sp, #120]	; 0x78
   13570:	ldrd	sl, [sp, #192]	; 0xc0
   13574:	eor	r2, r2, r8
   13578:	lsr	r1, r1, #16
   1357c:	ldrd	r8, [ip]
   13580:	orr	r1, r1, r0, lsl #16
   13584:	lsl	ip, r3, #1
   13588:	adds	sl, sl, r4
   1358c:	orr	r7, ip, r2, lsr #31
   13590:	str	r1, [sp, #164]	; 0xa4
   13594:	lsl	r2, r2, #1
   13598:	adc	fp, fp, r5
   1359c:	orr	r6, r2, r3, lsr #31
   135a0:	ldrd	r4, [sp, #216]	; 0xd8
   135a4:	ldrd	r2, [sp, #160]	; 0xa0
   135a8:	ldr	r1, [sp, #144]	; 0x90
   135ac:	strd	r8, [sp, #120]	; 0x78
   135b0:	adds	r4, r4, r2
   135b4:	str	r1, [sp, #172]	; 0xac
   135b8:	adc	r5, r5, r3
   135bc:	ldrd	r2, [sp, #168]	; 0xa8
   135c0:	strd	r4, [sp, #200]	; 0xc8
   135c4:	ldrd	r4, [sp, #208]	; 0xd0
   135c8:	adds	r2, r2, sl
   135cc:	adc	r3, r3, fp
   135d0:	ldrd	r0, [sp, #104]	; 0x68
   135d4:	adds	r4, r4, r8
   135d8:	strd	r2, [sp, #192]	; 0xc0
   135dc:	adc	r5, r5, r9
   135e0:	adds	r2, r4, r6
   135e4:	adc	r3, r5, r7
   135e8:	ldrd	r4, [sp, #128]	; 0x80
   135ec:	eor	r0, r0, r2
   135f0:	eor	r1, r1, r3
   135f4:	mov	r8, r1
   135f8:	mov	r9, r0
   135fc:	ldrd	r0, [sp, #176]	; 0xb0
   13600:	eor	r5, r5, fp
   13604:	mov	fp, r5
   13608:	add	ip, sp, #384	; 0x180
   1360c:	eor	r4, r4, sl
   13610:	adds	r0, r0, r8
   13614:	mov	sl, r4
   13618:	adc	r1, r1, r9
   1361c:	ldrd	r4, [ip]
   13620:	lsl	ip, fp, #1
   13624:	orr	ip, ip, sl, lsr #31
   13628:	str	ip, [sp, #148]	; 0x94
   1362c:	strd	r0, [sp, #208]	; 0xd0
   13630:	lsl	ip, sl, #1
   13634:	eor	r1, r1, r7
   13638:	mov	r7, r1
   1363c:	orr	r1, ip, fp, lsr #31
   13640:	ldrd	sl, [sp, #184]	; 0xb8
   13644:	str	r1, [sp, #144]	; 0x90
   13648:	add	r1, sp, #408	; 0x198
   1364c:	adds	sl, sl, r4
   13650:	adc	fp, fp, r5
   13654:	strd	r4, [sp, #104]	; 0x68
   13658:	ldrd	r4, [r1]
   1365c:	eor	r0, r0, r6
   13660:	mov	r6, r0
   13664:	mov	r1, r5
   13668:	mov	r0, r4
   1366c:	ldrd	r4, [sp, #144]	; 0x90
   13670:	strd	r0, [sp, #128]	; 0x80
   13674:	lsr	ip, r6, #24
   13678:	adds	r4, r4, sl
   1367c:	adc	r5, r5, fp
   13680:	mov	sl, r4
   13684:	mov	fp, r5
   13688:	ldrd	r4, [sp, #112]	; 0x70
   1368c:	strd	sl, [sp, #112]	; 0x70
   13690:	eor	r4, r4, sl
   13694:	adds	sl, r0, r2
   13698:	eor	r5, r5, fp
   1369c:	adc	fp, r1, r3
   136a0:	lsr	r1, r7, #24
   136a4:	str	r5, [sp, #176]	; 0xb0
   136a8:	mov	r2, sl
   136ac:	mov	r3, fp
   136b0:	orr	sl, ip, r7, lsl #8
   136b4:	orr	fp, r1, r6, lsl #8
   136b8:	str	r4, [sp, #180]	; 0xb4
   136bc:	ldrd	r6, [sp, #136]	; 0x88
   136c0:	ldrd	r0, [sp, #192]	; 0xc0
   136c4:	adds	r4, r2, sl
   136c8:	adc	r5, r3, fp
   136cc:	eor	r6, r6, r0
   136d0:	eor	r7, r7, r1
   136d4:	add	r1, sp, #376	; 0x178
   136d8:	strd	r6, [sp, #136]	; 0x88
   136dc:	ldrd	r2, [sp, #80]	; 0x50
   136e0:	ldrd	r6, [sp, #176]	; 0xb0
   136e4:	strd	r4, [sp, #240]	; 0xf0
   136e8:	eor	r4, r4, r8
   136ec:	eor	r5, r5, r9
   136f0:	ldrd	r8, [r1]
   136f4:	adds	r2, r2, r6
   136f8:	adc	r3, r3, r7
   136fc:	strd	r8, [sp, #80]	; 0x50
   13700:	ldrd	r6, [sp, #136]	; 0x88
   13704:	ldrd	r8, [sp, #144]	; 0x90
   13708:	strd	r2, [sp, #216]	; 0xd8
   1370c:	lsr	ip, r4, #16
   13710:	eor	r9, r9, r3
   13714:	lsr	r3, r6, #24
   13718:	orr	r3, r3, r7, lsl #8
   1371c:	str	r3, [sp, #144]	; 0x90
   13720:	add	r3, sp, #392	; 0x188
   13724:	eor	r8, r8, r2
   13728:	mov	r0, r8
   1372c:	mov	r1, r9
   13730:	ldrd	r8, [r3]
   13734:	ldrd	r6, [sp, #232]	; 0xe8
   13738:	orr	ip, ip, r5, lsl #16
   1373c:	mov	r2, r8
   13740:	mov	r3, r9
   13744:	ldrd	r8, [sp, #80]	; 0x50
   13748:	str	ip, [sp, #184]	; 0xb8
   1374c:	adds	r6, r6, r8
   13750:	adc	r7, r7, r9
   13754:	ldrd	r8, [sp, #112]	; 0x70
   13758:	strd	r6, [sp, #232]	; 0xe8
   1375c:	ldrd	r6, [sp, #136]	; 0x88
   13760:	adds	r8, r8, r2
   13764:	strd	r2, [sp, #112]	; 0x70
   13768:	adc	r9, r9, r3
   1376c:	add	r3, sp, #256	; 0x100
   13770:	lsr	ip, r7, #24
   13774:	strd	r8, [r3]
   13778:	ldrd	r2, [sp, #152]	; 0x98
   1377c:	ldrd	r8, [sp, #200]	; 0xc8
   13780:	orr	ip, ip, r6, lsl #8
   13784:	str	ip, [sp, #148]	; 0x94
   13788:	ldrd	r6, [sp, #144]	; 0x90
   1378c:	eor	r2, r2, r8
   13790:	eor	r3, r3, r9
   13794:	ldrd	r8, [sp, #232]	; 0xe8
   13798:	lsr	ip, r0, #24
   1379c:	orr	ip, ip, r1, lsl #8
   137a0:	adds	r8, r8, r6
   137a4:	adc	r9, r9, r7
   137a8:	ldrd	r6, [sp, #168]	; 0xa8
   137ac:	str	ip, [sp, #152]	; 0x98
   137b0:	lsr	ip, r5, #16
   137b4:	eor	r6, r6, r8
   137b8:	eor	r7, r7, r9
   137bc:	orr	ip, ip, r4, lsl #16
   137c0:	str	ip, [sp, #188]	; 0xbc
   137c4:	ldrd	r4, [sp, #184]	; 0xb8
   137c8:	strd	r6, [sp, #168]	; 0xa8
   137cc:	ldrd	r6, [sp, #208]	; 0xd0
   137d0:	lsr	r1, r1, #24
   137d4:	orr	r1, r1, r0, lsl #8
   137d8:	adds	r6, r6, r4
   137dc:	adc	r7, r7, r5
   137e0:	lsl	lr, r3, #1
   137e4:	strd	r6, [sp, #248]	; 0xf8
   137e8:	str	r1, [sp, #156]	; 0x9c
   137ec:	add	r1, sp, #256	; 0x100
   137f0:	eor	r6, r6, sl
   137f4:	ldrd	r4, [r1]
   137f8:	ldrd	r0, [sp, #152]	; 0x98
   137fc:	eor	r7, r7, fp
   13800:	mov	sl, r6
   13804:	mov	fp, r7
   13808:	ldrd	r6, [sp, #176]	; 0xb0
   1380c:	adds	r4, r4, r0
   13810:	adc	r5, r5, r1
   13814:	eor	r6, r6, r4
   13818:	eor	r7, r7, r5
   1381c:	mov	r0, r6
   13820:	mov	r1, r7
   13824:	ldrd	r6, [sp, #168]	; 0xa8
   13828:	strd	r4, [sp, #232]	; 0xe8
   1382c:	orr	r5, lr, r2, lsr #31
   13830:	lsr	ip, r6, #16
   13834:	lsl	r2, r2, #1
   13838:	orr	r4, ip, r7, lsl #16
   1383c:	orr	r3, r2, r3, lsr #31
   13840:	lsr	r2, r7, #16
   13844:	ldrd	r6, [sp, #32]
   13848:	str	r3, [sp, #136]	; 0x88
   1384c:	ldr	r3, [sp, #168]	; 0xa8
   13850:	adds	r6, r6, r8
   13854:	str	r5, [sp, #140]	; 0x8c
   13858:	adc	r7, r7, r9
   1385c:	orr	r5, r2, r3, lsl #16
   13860:	ldrd	r8, [sp, #120]	; 0x78
   13864:	ldrd	r2, [sp, #224]	; 0xe0
   13868:	lsr	ip, r0, #16
   1386c:	lsl	lr, fp, #1
   13870:	adds	r2, r2, r8
   13874:	adc	r3, r3, r9
   13878:	orr	r9, lr, sl, lsr #31
   1387c:	strd	r2, [sp, #168]	; 0xa8
   13880:	ldrd	r2, [sp, #136]	; 0x88
   13884:	adds	r2, r2, r6
   13888:	adc	r3, r3, r7
   1388c:	strd	r2, [sp, #208]	; 0xd0
   13890:	ldrd	r2, [sp, #192]	; 0xc0
   13894:	adds	r2, r2, r4
   13898:	adc	r3, r3, r5
   1389c:	mov	r6, r2
   138a0:	mov	r7, r3
   138a4:	ldrd	r2, [sp, #144]	; 0x90
   138a8:	strd	r6, [sp, #224]	; 0xe0
   138ac:	eor	r2, r2, r6
   138b0:	orr	r6, ip, r1, lsl #16
   138b4:	lsr	r1, r1, #16
   138b8:	eor	r3, r3, r7
   138bc:	orr	r7, r1, r0, lsl #16
   138c0:	ldrd	r0, [sp, #208]	; 0xd0
   138c4:	lsl	ip, sl, #1
   138c8:	orr	r8, ip, fp, lsr #31
   138cc:	eor	r0, r0, r6
   138d0:	eor	r1, r1, r7
   138d4:	ldrd	sl, [sp, #168]	; 0xa8
   138d8:	strd	r0, [sp, #168]	; 0xa8
   138dc:	ldrd	r0, [sp, #216]	; 0xd8
   138e0:	adds	sl, sl, r8
   138e4:	adc	fp, fp, r9
   138e8:	adds	r0, r0, r6
   138ec:	adc	r1, r1, r7
   138f0:	mov	r6, r0
   138f4:	mov	r7, r1
   138f8:	ldrd	r0, [sp, #168]	; 0xa8
   138fc:	lsl	ip, r3, #1
   13900:	eor	r4, r4, sl
   13904:	str	r1, [sp, #176]	; 0xb0
   13908:	eor	r5, r5, fp
   1390c:	orr	r1, ip, r2, lsr #31
   13910:	str	r0, [sp, #180]	; 0xb4
   13914:	str	r5, [sp, #168]	; 0xa8
   13918:	str	r4, [sp, #172]	; 0xac
   1391c:	str	r1, [sp, #148]	; 0x94
   13920:	ldrd	r4, [sp, #248]	; 0xf8
   13924:	ldrd	r0, [sp, #176]	; 0xb0
   13928:	lsl	r2, r2, #1
   1392c:	orr	r3, r2, r3, lsr #31
   13930:	adds	r4, r4, r0
   13934:	adc	r5, r5, r1
   13938:	str	r3, [sp, #144]	; 0x90
   1393c:	ldrd	r0, [sp, #64]	; 0x40
   13940:	ldrd	r2, [sp, #232]	; 0xe8
   13944:	strd	r4, [sp, #216]	; 0xd8
   13948:	add	ip, sp, #256	; 0x100
   1394c:	adds	r0, r0, r2
   13950:	adc	r1, r1, r3
   13954:	ldrd	r2, [sp, #136]	; 0x88
   13958:	strd	r0, [sp, #192]	; 0xc0
   1395c:	ldrd	r0, [sp, #168]	; 0xa8
   13960:	eor	r2, r2, r4
   13964:	eor	r3, r3, r5
   13968:	adds	r0, r0, r6
   1396c:	adc	r1, r1, r7
   13970:	mov	r4, r2
   13974:	mov	r5, r3
   13978:	strd	r0, [sp, #232]	; 0xe8
   1397c:	ldrd	r2, [sp, #192]	; 0xc0
   13980:	eor	r0, r0, r8
   13984:	eor	r1, r1, r9
   13988:	ldrd	r8, [sp, #144]	; 0x90
   1398c:	lsr	lr, r4, #24
   13990:	adds	r2, r2, r8
   13994:	adc	r3, r3, r9
   13998:	mov	r8, r2
   1399c:	mov	r9, r3
   139a0:	ldrd	r2, [sp, #184]	; 0xb8
   139a4:	strd	r8, [ip]
   139a8:	lsr	ip, r0, #24
   139ac:	eor	r8, r8, r2
   139b0:	eor	r9, r9, r3
   139b4:	mov	r2, r8
   139b8:	mov	r3, r9
   139bc:	ldrd	r8, [sp, #56]	; 0x38
   139c0:	strd	r2, [sp, #248]	; 0xf8
   139c4:	ldrd	r2, [sp, #208]	; 0xd0
   139c8:	adds	r8, r8, r2
   139cc:	adc	r9, r9, r3
   139d0:	orr	r3, lr, r5, lsl #8
   139d4:	str	r3, [sp, #184]	; 0xb8
   139d8:	orr	r3, ip, r1, lsl #8
   139dc:	str	r3, [sp, #136]	; 0x88
   139e0:	ldrd	r2, [sp, #152]	; 0x98
   139e4:	strd	r8, [sp, #208]	; 0xd0
   139e8:	ldrd	r8, [sp, #72]	; 0x48
   139ec:	eor	r2, r2, r6
   139f0:	eor	r3, r3, r7
   139f4:	mov	r7, r3
   139f8:	mov	r6, r2
   139fc:	ldrd	r2, [sp, #248]	; 0xf8
   13a00:	adds	r8, r8, sl
   13a04:	adc	r9, r9, fp
   13a08:	str	r3, [sp, #192]	; 0xc0
   13a0c:	str	r2, [sp, #196]	; 0xc4
   13a10:	mov	sl, r8
   13a14:	ldrd	r2, [sp, #200]	; 0xc8
   13a18:	mov	fp, r9
   13a1c:	ldrd	r8, [sp, #192]	; 0xc0
   13a20:	add	ip, sp, #264	; 0x108
   13a24:	lsr	r1, r1, #24
   13a28:	adds	r2, r2, r8
   13a2c:	adc	r3, r3, r9
   13a30:	ldrd	r8, [sp, #144]	; 0x90
   13a34:	strd	r2, [ip]
   13a38:	lsr	ip, r5, #24
   13a3c:	eor	r8, r8, r2
   13a40:	eor	r9, r9, r3
   13a44:	orr	ip, ip, r4, lsl #8
   13a48:	str	ip, [sp, #188]	; 0xbc
   13a4c:	ldrd	r4, [sp, #208]	; 0xd0
   13a50:	strd	r8, [sp, #200]	; 0xc8
   13a54:	ldrd	r8, [sp, #184]	; 0xb8
   13a58:	orr	r1, r1, r0, lsl #8
   13a5c:	str	r1, [sp, #140]	; 0x8c
   13a60:	adds	r4, r4, r8
   13a64:	adc	r5, r5, r9
   13a68:	ldrd	r8, [sp, #136]	; 0x88
   13a6c:	add	r3, sp, #256	; 0x100
   13a70:	lsl	ip, r7, #1
   13a74:	adds	r8, r8, sl
   13a78:	adc	r9, r9, fp
   13a7c:	ldrd	sl, [sp, #176]	; 0xb0
   13a80:	strd	r4, [sp, #248]	; 0xf8
   13a84:	strd	r8, [sp, #176]	; 0xb0
   13a88:	eor	sl, sl, r4
   13a8c:	eor	fp, fp, r5
   13a90:	mov	r4, sl
   13a94:	mov	r5, fp
   13a98:	ldrd	sl, [sp, #168]	; 0xa8
   13a9c:	ldrd	r2, [r3]
   13aa0:	lsr	lr, r4, #16
   13aa4:	eor	sl, sl, r8
   13aa8:	eor	fp, fp, r9
   13aac:	ldrd	r8, [sp, #128]	; 0x80
   13ab0:	mov	r1, fp
   13ab4:	orr	fp, ip, r6, lsr #31
   13ab8:	lsl	r6, r6, #1
   13abc:	mov	r0, sl
   13ac0:	lsr	ip, sl, #16
   13ac4:	orr	sl, r6, r7, lsr #31
   13ac8:	orr	r7, lr, r5, lsl #16
   13acc:	lsr	lr, r5, #16
   13ad0:	adds	r2, r2, r8
   13ad4:	orr	r5, lr, r4, lsl #16
   13ad8:	str	r5, [sp, #156]	; 0x9c
   13adc:	adc	r3, r3, r9
   13ae0:	str	r7, [sp, #152]	; 0x98
   13ae4:	ldrd	r4, [sp, #216]	; 0xd8
   13ae8:	ldrd	r6, [sp, #152]	; 0x98
   13aec:	mov	r9, r3
   13af0:	ldr	r3, [sp, #200]	; 0xc8
   13af4:	orr	ip, ip, r1, lsl #16
   13af8:	lsr	r1, r1, #16
   13afc:	orr	r1, r1, r0, lsl #16
   13b00:	adds	r4, r4, r6
   13b04:	str	ip, [sp, #144]	; 0x90
   13b08:	str	r1, [sp, #148]	; 0x94
   13b0c:	lsr	ip, r3, #24
   13b10:	ldr	r3, [sp, #204]	; 0xcc
   13b14:	ldrd	r0, [sp, #232]	; 0xe8
   13b18:	adc	r5, r5, r7
   13b1c:	mov	r8, r2
   13b20:	ldrd	r6, [sp, #144]	; 0x90
   13b24:	ldr	r2, [sp, #200]	; 0xc8
   13b28:	orr	ip, ip, r3, lsl #8
   13b2c:	lsr	r3, r3, #24
   13b30:	adds	r0, r0, r6
   13b34:	orr	r3, r3, r2, lsl #8
   13b38:	str	ip, [sp, #168]	; 0xa8
   13b3c:	adc	r1, r1, r7
   13b40:	str	r3, [sp, #172]	; 0xac
   13b44:	strd	r4, [sp, #216]	; 0xd8
   13b48:	ldrd	r4, [sp, #168]	; 0xa8
   13b4c:	ldrd	r2, [sp, #112]	; 0x70
   13b50:	strd	r0, [sp, #208]	; 0xd0
   13b54:	ldrd	r0, [sp, #240]	; 0xf0
   13b58:	adds	r4, r4, r8
   13b5c:	adc	r5, r5, r9
   13b60:	adds	r0, r0, r2
   13b64:	adc	r1, r1, r3
   13b68:	ldrd	r2, [sp, #160]	; 0xa0
   13b6c:	adds	r0, r0, sl
   13b70:	adc	r1, r1, fp
   13b74:	ldrd	r6, [sp, #224]	; 0xe0
   13b78:	eor	r3, r3, r1
   13b7c:	strd	r4, [sp, #200]	; 0xc8
   13b80:	eor	r2, r2, r0
   13b84:	mov	r5, r3
   13b88:	adds	r6, r6, r5
   13b8c:	mov	r4, r2
   13b90:	adc	r7, r7, r4
   13b94:	mov	r2, r3
   13b98:	mov	r3, r4
   13b9c:	mov	r4, r6
   13ba0:	eor	r4, r4, sl
   13ba4:	strd	r6, [sp, #224]	; 0xe0
   13ba8:	mov	r5, r7
   13bac:	ldrd	r6, [sp, #96]	; 0x60
   13bb0:	eor	r5, r5, fp
   13bb4:	lsr	ip, r4, #24
   13bb8:	orr	r8, ip, r5, lsl #8
   13bbc:	adds	r6, r6, r0
   13bc0:	lsr	ip, r5, #24
   13bc4:	orr	r9, ip, r4, lsl #8
   13bc8:	adc	r7, r7, r1
   13bcc:	adds	sl, r6, r8
   13bd0:	adc	fp, r7, r9
   13bd4:	mov	r6, sl
   13bd8:	mov	r7, fp
   13bdc:	ldrd	r0, [sp, #192]	; 0xc0
   13be0:	ldrd	sl, [sp, #200]	; 0xc8
   13be4:	strd	r6, [sp, #232]	; 0xe8
   13be8:	eor	r0, r0, sl
   13bec:	eor	r1, r1, fp
   13bf0:	mov	sl, r6
   13bf4:	mov	fp, r7
   13bf8:	eor	sl, sl, r2
   13bfc:	eor	fp, fp, r3
   13c00:	mov	r4, r0
   13c04:	mov	r5, r1
   13c08:	mov	r2, sl
   13c0c:	ldrd	r0, [sp, #184]	; 0xb8
   13c10:	mov	r3, fp
   13c14:	ldrd	sl, [sp, #216]	; 0xd8
   13c18:	lsr	lr, r4, #16
   13c1c:	eor	r1, r1, fp
   13c20:	eor	r0, r0, sl
   13c24:	lsl	ip, r1, #1
   13c28:	orr	ip, ip, r0, lsr #31
   13c2c:	lsl	r0, r0, #1
   13c30:	orr	r1, r0, r1, lsr #31
   13c34:	str	ip, [sp, #164]	; 0xa4
   13c38:	str	r1, [sp, #160]	; 0xa0
   13c3c:	ldrd	sl, [sp, #16]
   13c40:	ldrd	r0, [sp, #176]	; 0xb0
   13c44:	ldrd	r6, [sp, #136]	; 0x88
   13c48:	lsr	ip, r2, #16
   13c4c:	adds	sl, sl, r0
   13c50:	adc	fp, fp, r1
   13c54:	orr	r1, lr, r5, lsl #16
   13c58:	str	r1, [sp, #176]	; 0xb0
   13c5c:	ldrd	r0, [sp, #208]	; 0xd0
   13c60:	eor	r6, r6, r0
   13c64:	eor	r7, r7, r1
   13c68:	ldrd	r0, [sp, #160]	; 0xa0
   13c6c:	adds	r0, r0, sl
   13c70:	adc	r1, r1, fp
   13c74:	strd	r0, [sp, #192]	; 0xc0
   13c78:	orr	r0, ip, r3, lsl #16
   13c7c:	lsr	ip, r5, #16
   13c80:	orr	ip, ip, r4, lsl #16
   13c84:	str	ip, [sp, #180]	; 0xb4
   13c88:	add	ip, sp, #264	; 0x108
   13c8c:	ldrd	r4, [sp, #176]	; 0xb0
   13c90:	ldrd	sl, [ip]
   13c94:	lsr	r3, r3, #16
   13c98:	orr	r1, r3, r2, lsl #16
   13c9c:	adds	sl, sl, r4
   13ca0:	adc	fp, fp, r5
   13ca4:	ldrd	r4, [sp, #224]	; 0xe0
   13ca8:	lsl	ip, r7, #1
   13cac:	adds	r4, r4, r0
   13cb0:	adc	r5, r5, r1
   13cb4:	mov	r2, r4
   13cb8:	mov	r3, r5
   13cbc:	ldrd	r4, [sp, #168]	; 0xa8
   13cc0:	strd	r2, [sp, #240]	; 0xf0
   13cc4:	eor	r2, r2, r8
   13cc8:	eor	r3, r3, r9
   13ccc:	ldrd	r8, [sp, #192]	; 0xc0
   13cd0:	eor	r5, r5, fp
   13cd4:	eor	r4, r4, sl
   13cd8:	strd	r2, [sp, #184]	; 0xb8
   13cdc:	eor	r8, r8, r0
   13ce0:	orr	r3, ip, r6, lsr #31
   13ce4:	eor	r9, r9, r1
   13ce8:	lsl	ip, r6, #1
   13cec:	lsl	r1, r5, #1
   13cf0:	str	r9, [sp, #168]	; 0xa8
   13cf4:	str	r8, [sp, #172]	; 0xac
   13cf8:	str	r3, [sp, #140]	; 0x8c
   13cfc:	ldrd	r8, [sp, #248]	; 0xf8
   13d00:	orr	r3, ip, r7, lsr #31
   13d04:	orr	r7, r1, r4, lsr #31
   13d08:	ldrd	r0, [sp, #8]
   13d0c:	str	r3, [sp, #136]	; 0x88
   13d10:	ldrd	r2, [sp, #184]	; 0xb8
   13d14:	adds	r0, r0, r8
   13d18:	adc	r1, r1, r9
   13d1c:	ldrd	r8, [sp, #80]	; 0x50
   13d20:	strd	r0, [sp, #224]	; 0xe0
   13d24:	ldrd	r0, [sp, #200]	; 0xc8
   13d28:	lsl	ip, r3, #1
   13d2c:	lsl	lr, r4, #1
   13d30:	adds	r8, r8, r0
   13d34:	orr	r6, lr, r5, lsr #31
   13d38:	adc	r9, r9, r1
   13d3c:	orr	r5, ip, r2, lsr #31
   13d40:	ldrd	r0, [sp, #40]	; 0x28
   13d44:	lsl	ip, r2, #1
   13d48:	ldrd	r2, [sp, #232]	; 0xe8
   13d4c:	adds	r0, r0, r2
   13d50:	adc	r1, r1, r3
   13d54:	ldr	r3, [sp, #188]	; 0xbc
   13d58:	strd	r0, [sp, #200]	; 0xc8
   13d5c:	ldrd	r0, [sp, #224]	; 0xe0
   13d60:	orr	r4, ip, r3, lsr #31
   13d64:	ldrd	r2, [sp, #168]	; 0xa8
   13d68:	adds	r2, r2, sl
   13d6c:	adc	r3, r3, fp
   13d70:	adds	r0, r0, r6
   13d74:	adc	r1, r1, r7
   13d78:	strd	r0, [sp, #224]	; 0xe0
   13d7c:	ldrd	sl, [sp, #200]	; 0xc8
   13d80:	ldrd	r0, [sp, #136]	; 0x88
   13d84:	adds	r0, r0, sl
   13d88:	adc	r1, r1, fp
   13d8c:	adds	sl, r8, r4
   13d90:	adc	fp, r9, r5
   13d94:	strd	r0, [sp, #248]	; 0xf8
   13d98:	strd	sl, [sp, #232]	; 0xe8
   13d9c:	ldrd	sl, [sp, #160]	; 0xa0
   13da0:	add	r1, sp, #256	; 0x100
   13da4:	ldrd	r8, [sp, #224]	; 0xe0
   13da8:	eor	sl, sl, r2
   13dac:	eor	fp, fp, r3
   13db0:	strd	r2, [r1]
   13db4:	mov	r2, sl
   13db8:	mov	r3, fp
   13dbc:	ldrd	sl, [sp, #144]	; 0x90
   13dc0:	ldrd	r0, [sp, #176]	; 0xb0
   13dc4:	lsr	ip, r2, #24
   13dc8:	eor	sl, sl, r8
   13dcc:	eor	fp, fp, r9
   13dd0:	mov	r8, sl
   13dd4:	mov	r9, fp
   13dd8:	ldrd	sl, [sp, #248]	; 0xf8
   13ddc:	eor	r0, r0, sl
   13de0:	eor	r1, r1, fp
   13de4:	ldrd	sl, [sp, #152]	; 0x98
   13de8:	strd	r0, [sp, #160]	; 0xa0
   13dec:	ldrd	r0, [sp, #232]	; 0xe8
   13df0:	str	r9, [sp, #152]	; 0x98
   13df4:	str	r8, [sp, #156]	; 0x9c
   13df8:	eor	fp, fp, r1
   13dfc:	orr	r1, ip, r3, lsl #8
   13e00:	str	r1, [sp, #144]	; 0x90
   13e04:	eor	sl, sl, r0
   13e08:	ldrd	r0, [sp, #160]	; 0xa0
   13e0c:	str	fp, [sp, #176]	; 0xb0
   13e10:	str	sl, [sp, #180]	; 0xb4
   13e14:	str	r1, [sp, #184]	; 0xb8
   13e18:	ldrd	sl, [sp, #192]	; 0xc0
   13e1c:	str	r0, [sp, #188]	; 0xbc
   13e20:	ldrd	r0, [sp, #104]	; 0x68
   13e24:	lsr	r3, r3, #24
   13e28:	orr	r3, r3, r2, lsl #8
   13e2c:	adds	r0, r0, sl
   13e30:	adc	r1, r1, fp
   13e34:	str	r3, [sp, #148]	; 0x94
   13e38:	ldrd	sl, [sp, #152]	; 0x98
   13e3c:	ldrd	r2, [sp, #240]	; 0xf0
   13e40:	ldrd	r8, [sp, #176]	; 0xb0
   13e44:	adds	r2, r2, sl
   13e48:	adc	r3, r3, fp
   13e4c:	ldrd	sl, [sp, #208]	; 0xd0
   13e50:	adds	sl, sl, r8
   13e54:	adc	fp, fp, r9
   13e58:	ldrd	r8, [sp, #216]	; 0xd8
   13e5c:	strd	sl, [sp, #240]	; 0xf0
   13e60:	ldrd	sl, [sp, #184]	; 0xb8
   13e64:	adds	sl, sl, r8
   13e68:	adc	fp, fp, r9
   13e6c:	mov	r8, sl
   13e70:	mov	r9, fp
   13e74:	ldrd	sl, [sp, #144]	; 0x90
   13e78:	adds	sl, sl, r0
   13e7c:	adc	fp, fp, r1
   13e80:	add	r1, sp, #264	; 0x108
   13e84:	strd	sl, [sp, #208]	; 0xd0
   13e88:	mov	r0, r2
   13e8c:	strd	r2, [r1]
   13e90:	mov	r1, r3
   13e94:	ldrd	r2, [sp, #240]	; 0xf0
   13e98:	eor	r0, r0, r6
   13e9c:	eor	r1, r1, r7
   13ea0:	eor	r2, r2, r4
   13ea4:	eor	r3, r3, r5
   13ea8:	ldrd	r4, [sp, #208]	; 0xd0
   13eac:	strd	r2, [sp, #200]	; 0xc8
   13eb0:	add	r3, sp, #272	; 0x110
   13eb4:	mov	r6, r0
   13eb8:	strd	r8, [r3]
   13ebc:	ldrd	r2, [sp, #168]	; 0xa8
   13ec0:	mov	r7, r1
   13ec4:	ldrd	r0, [sp, #136]	; 0x88
   13ec8:	eor	r2, r2, r4
   13ecc:	eor	r3, r3, r5
   13ed0:	eor	r0, r0, r8
   13ed4:	ldrd	r4, [sp, #224]	; 0xe0
   13ed8:	eor	r1, r1, r9
   13edc:	ldrd	r8, [sp, #88]	; 0x58
   13ee0:	strd	r2, [sp, #160]	; 0xa0
   13ee4:	ldrd	sl, [sp, #24]
   13ee8:	lsr	ip, r2, #16
   13eec:	ldrd	r2, [sp, #248]	; 0xf8
   13ef0:	adds	r8, r8, r4
   13ef4:	adc	r9, r9, r5
   13ef8:	adds	sl, sl, r2
   13efc:	adc	fp, fp, r3
   13f00:	ldrd	r4, [sp, #232]	; 0xe8
   13f04:	strd	sl, [sp, #224]	; 0xe0
   13f08:	ldrd	sl, [sp, #48]	; 0x30
   13f0c:	lsr	lr, r6, #24
   13f10:	adds	sl, sl, r4
   13f14:	adc	fp, fp, r5
   13f18:	ldrd	r4, [sp, #160]	; 0xa0
   13f1c:	orr	r3, ip, r5, lsl #16
   13f20:	str	r3, [sp, #136]	; 0x88
   13f24:	ldr	r3, [sp, #200]	; 0xc8
   13f28:	lsr	ip, r3, #24
   13f2c:	lsr	r3, r5, #16
   13f30:	orr	r3, r3, r4, lsl #16
   13f34:	str	r3, [sp, #140]	; 0x8c
   13f38:	orr	r3, lr, r7, lsl #8
   13f3c:	str	r3, [sp, #160]	; 0xa0
   13f40:	add	r3, sp, #256	; 0x100
   13f44:	ldrd	r4, [sp, #136]	; 0x88
   13f48:	ldrd	r2, [r3]
   13f4c:	lsr	lr, r0, #24
   13f50:	adds	r2, r2, r4
   13f54:	adc	r3, r3, r5
   13f58:	ldrd	r4, [sp, #144]	; 0x90
   13f5c:	strd	r2, [sp, #232]	; 0xe8
   13f60:	eor	r5, r5, r3
   13f64:	mov	r3, r5
   13f68:	ldr	r5, [sp, #204]	; 0xcc
   13f6c:	eor	r4, r4, r2
   13f70:	mov	r2, r4
   13f74:	orr	ip, ip, r5, lsl #8
   13f78:	str	ip, [sp, #168]	; 0xa8
   13f7c:	orr	ip, lr, r1, lsl #8
   13f80:	str	ip, [sp, #192]	; 0xc0
   13f84:	lsl	ip, r3, #1
   13f88:	orr	ip, ip, r4, lsr #31
   13f8c:	str	ip, [sp, #148]	; 0x94
   13f90:	lsr	ip, r7, #24
   13f94:	orr	ip, ip, r6, lsl #8
   13f98:	ldrd	r4, [sp, #200]	; 0xc8
   13f9c:	str	ip, [sp, #164]	; 0xa4
   13fa0:	ldrd	r6, [sp, #160]	; 0xa0
   13fa4:	lsr	ip, r5, #24
   13fa8:	orr	ip, ip, r4, lsl #8
   13fac:	adds	r8, r8, r6
   13fb0:	adc	r9, r9, r7
   13fb4:	mov	r4, sl
   13fb8:	ldrd	r6, [sp, #152]	; 0x98
   13fbc:	mov	r5, fp
   13fc0:	str	ip, [sp, #172]	; 0xac
   13fc4:	ldrd	sl, [sp, #168]	; 0xa8
   13fc8:	lsr	r1, r1, #24
   13fcc:	orr	r1, r1, r0, lsl #8
   13fd0:	adds	r4, r4, sl
   13fd4:	adc	r5, r5, fp
   13fd8:	str	r1, [sp, #196]	; 0xc4
   13fdc:	ldrd	sl, [sp, #192]	; 0xc0
   13fe0:	strd	r4, [sp, #216]	; 0xd8
   13fe4:	ldrd	r4, [sp, #224]	; 0xe0
   13fe8:	ldrd	r0, [sp, #176]	; 0xb0
   13fec:	eor	r6, r6, r8
   13ff0:	adds	r4, r4, sl
   13ff4:	adc	r5, r5, fp
   13ff8:	mov	sl, r4
   13ffc:	mov	fp, r5
   14000:	ldrd	r4, [sp, #216]	; 0xd8
   14004:	strd	sl, [sp, #176]	; 0xb0
   14008:	eor	r7, r7, r9
   1400c:	eor	r0, r0, r4
   14010:	eor	r1, r1, r5
   14014:	mov	r4, r0
   14018:	mov	r5, r1
   1401c:	mov	r0, sl
   14020:	mov	r1, fp
   14024:	ldrd	sl, [sp, #184]	; 0xb8
   14028:	lsl	r2, r2, #1
   1402c:	lsr	lr, r6, #16
   14030:	eor	sl, sl, r0
   14034:	eor	fp, fp, r1
   14038:	orr	r3, r2, r3, lsr #31
   1403c:	str	r3, [sp, #144]	; 0x90
   14040:	mov	r0, sl
   14044:	orr	r3, lr, r7, lsl #16
   14048:	str	r3, [sp, #152]	; 0x98
   1404c:	lsr	lr, sl, #16
   14050:	lsr	r3, r7, #16
   14054:	lsr	r1, fp, #16
   14058:	orr	sl, lr, fp, lsl #16
   1405c:	orr	r3, r3, r6, lsl #16
   14060:	orr	fp, r1, r0, lsl #16
   14064:	add	r1, sp, #264	; 0x108
   14068:	str	r3, [sp, #156]	; 0x9c
   1406c:	ldrd	r6, [sp, #152]	; 0x98
   14070:	ldrd	r0, [r1]
   14074:	lsr	ip, r4, #16
   14078:	orr	r2, ip, r5, lsl #16
   1407c:	lsr	ip, r5, #16
   14080:	orr	r3, ip, r4, lsl #16
   14084:	adds	r0, r0, r6
   14088:	ldrd	r4, [sp, #240]	; 0xf0
   1408c:	adc	r1, r1, r7
   14090:	ldrd	r6, [sp, #208]	; 0xd0
   14094:	strd	r0, [sp, #200]	; 0xc8
   14098:	adds	r4, r4, r2
   1409c:	add	r1, sp, #272	; 0x110
   140a0:	adc	r5, r5, r3
   140a4:	ldrd	r0, [r1]
   140a8:	strd	r4, [sp, #224]	; 0xe0
   140ac:	ldrd	r4, [sp, #80]	; 0x50
   140b0:	adds	r0, r0, sl
   140b4:	adc	r1, r1, fp
   140b8:	adds	r4, r4, r6
   140bc:	adc	r5, r5, r7
   140c0:	strd	r4, [sp, #248]	; 0xf8
   140c4:	ldrd	r4, [sp, #104]	; 0x68
   140c8:	adds	r4, r4, r8
   140cc:	adc	r5, r5, r9
   140d0:	mov	r8, r4
   140d4:	mov	r9, r5
   140d8:	ldrd	r4, [sp, #144]	; 0x90
   140dc:	adds	r4, r4, r8
   140e0:	adc	r5, r5, r9
   140e4:	ldrd	r8, [sp, #168]	; 0xa8
   140e8:	strd	r4, [sp, #208]	; 0xd0
   140ec:	eor	r4, r4, r2
   140f0:	eor	r5, r5, r3
   140f4:	ldrd	r2, [sp, #224]	; 0xe0
   140f8:	str	r5, [sp, #168]	; 0xa8
   140fc:	str	r4, [sp, #172]	; 0xac
   14100:	eor	r8, r8, r2
   14104:	ldrd	r4, [sp, #200]	; 0xc8
   14108:	eor	r9, r9, r3
   1410c:	ldrd	r2, [sp, #160]	; 0xa0
   14110:	lsl	ip, r9, #1
   14114:	eor	r2, r2, r4
   14118:	eor	r3, r3, r5
   1411c:	mov	r6, r2
   14120:	mov	r7, r3
   14124:	ldrd	r2, [sp, #192]	; 0xc0
   14128:	eor	r2, r2, r0
   1412c:	eor	r3, r3, r1
   14130:	mov	r4, r2
   14134:	mov	r5, r3
   14138:	ldrd	r2, [sp, #168]	; 0xa8
   1413c:	lsl	lr, r5, #1
   14140:	adds	r2, r2, r0
   14144:	adc	r3, r3, r1
   14148:	orr	r1, ip, r8, lsr #31
   1414c:	str	r1, [sp, #164]	; 0xa4
   14150:	ldrd	r0, [sp, #144]	; 0x90
   14154:	strd	r8, [sp, #240]	; 0xf0
   14158:	lsl	ip, r8, #1
   1415c:	strd	r2, [sp, #192]	; 0xc0
   14160:	ldrd	r8, [sp, #176]	; 0xb0
   14164:	eor	r0, r0, r2
   14168:	eor	r1, r1, r3
   1416c:	ldrd	r2, [sp, #128]	; 0x80
   14170:	strd	r0, [sp, #184]	; 0xb8
   14174:	adds	r2, r2, r8
   14178:	adc	r3, r3, r9
   1417c:	mov	r9, r3
   14180:	ldr	r3, [sp, #244]	; 0xf4
   14184:	orr	r3, ip, r3, lsr #31
   14188:	str	r3, [sp, #160]	; 0xa0
   1418c:	ldrd	r0, [sp, #160]	; 0xa0
   14190:	lsl	r3, r7, #1
   14194:	orr	r3, r3, r6, lsr #31
   14198:	adds	r0, r0, r2
   1419c:	adc	r1, r1, r9
   141a0:	str	r3, [sp, #148]	; 0x94
   141a4:	ldrd	r8, [sp, #40]	; 0x28
   141a8:	ldrd	r2, [sp, #216]	; 0xd8
   141ac:	lsl	ip, r6, #1
   141b0:	adds	r8, r8, r2
   141b4:	adc	r9, r9, r3
   141b8:	add	r3, sp, #264	; 0x108
   141bc:	strd	r8, [sp, #176]	; 0xb0
   141c0:	ldrd	r8, [sp, #136]	; 0x88
   141c4:	strd	r0, [r3]
   141c8:	eor	r8, r8, r0
   141cc:	eor	r9, r9, r1
   141d0:	orr	r1, ip, r7, lsr #31
   141d4:	str	r1, [sp, #144]	; 0x90
   141d8:	ldrd	r6, [sp, #8]
   141dc:	ldr	r1, [sp, #184]	; 0xb8
   141e0:	mov	r2, r8
   141e4:	mov	r3, r9
   141e8:	ldrd	r8, [sp, #208]	; 0xd0
   141ec:	lsr	ip, r1, #24
   141f0:	orr	r1, lr, r4, lsr #31
   141f4:	adds	r6, r6, r8
   141f8:	lsl	lr, r4, #1
   141fc:	str	r1, [sp, #140]	; 0x8c
   14200:	adc	r7, r7, r9
   14204:	orr	r1, lr, r5, lsr #31
   14208:	ldrd	r4, [sp, #184]	; 0xb8
   1420c:	ldrd	r8, [sp, #176]	; 0xb0
   14210:	strd	r6, [sp, #208]	; 0xd0
   14214:	ldrd	r6, [sp, #144]	; 0x90
   14218:	str	r1, [sp, #136]	; 0x88
   1421c:	orr	r1, ip, r5, lsl #8
   14220:	str	r1, [sp, #176]	; 0xb0
   14224:	lsr	r1, r5, #24
   14228:	adds	r6, r6, r8
   1422c:	orr	r1, r1, r4, lsl #8
   14230:	adc	r7, r7, r9
   14234:	str	r1, [sp, #180]	; 0xb4
   14238:	add	r1, sp, #256	; 0x100
   1423c:	mov	r0, r6
   14240:	strd	r6, [r1]
   14244:	mov	r1, r7
   14248:	ldrd	r8, [sp, #136]	; 0x88
   1424c:	eor	r0, r0, sl
   14250:	eor	r1, r1, fp
   14254:	ldrd	sl, [sp, #248]	; 0xf8
   14258:	str	r3, [sp, #184]	; 0xb8
   1425c:	mov	r4, r0
   14260:	adds	sl, sl, r8
   14264:	adc	fp, fp, r9
   14268:	ldrd	r8, [sp, #208]	; 0xd0
   1426c:	ldrd	r6, [sp, #176]	; 0xb0
   14270:	mov	r5, r1
   14274:	strd	sl, [sp, #240]	; 0xf0
   14278:	adds	r8, r8, r6
   1427c:	adc	r9, r9, r7
   14280:	mov	r0, r8
   14284:	mov	r1, r9
   14288:	ldrd	r8, [sp, #152]	; 0x98
   1428c:	strd	r0, [sp, #248]	; 0xf8
   14290:	str	r2, [sp, #188]	; 0xbc
   14294:	eor	r8, r8, sl
   14298:	eor	r9, r9, fp
   1429c:	mov	sl, r0
   142a0:	mov	fp, r1
   142a4:	ldrd	r0, [sp, #168]	; 0xa8
   142a8:	ldrd	r6, [sp, #200]	; 0xc8
   142ac:	mov	r2, r8
   142b0:	mov	r3, r9
   142b4:	ldrd	r8, [sp, #184]	; 0xb8
   142b8:	eor	r0, r0, sl
   142bc:	eor	r1, r1, fp
   142c0:	mov	sl, r0
   142c4:	mov	fp, r1
   142c8:	ldrd	r0, [sp, #160]	; 0xa0
   142cc:	adds	r6, r6, r8
   142d0:	adc	r7, r7, r9
   142d4:	add	ip, sp, #272	; 0x110
   142d8:	eor	r0, r0, r6
   142dc:	eor	r1, r1, r7
   142e0:	strd	r6, [ip]
   142e4:	mov	r6, r0
   142e8:	mov	r7, r1
   142ec:	ldrd	r0, [sp, #232]	; 0xe8
   142f0:	str	r3, [sp, #152]	; 0x98
   142f4:	lsr	r3, sl, #16
   142f8:	adds	r0, r0, r5
   142fc:	adc	r1, r1, r4
   14300:	str	r2, [sp, #156]	; 0x9c
   14304:	orr	r3, r3, fp, lsl #16
   14308:	strd	r0, [sp, #216]	; 0xd8
   1430c:	str	r3, [sp, #160]	; 0xa0
   14310:	ldrd	r0, [sp, #152]	; 0x98
   14314:	ldrd	r2, [sp, #224]	; 0xe0
   14318:	mov	r8, r5
   1431c:	lsr	r5, fp, #16
   14320:	adds	r2, r2, r0
   14324:	adc	r3, r3, r1
   14328:	ldrd	r0, [sp, #216]	; 0xd8
   1432c:	strd	r2, [sp, #208]	; 0xd0
   14330:	ldrd	r2, [sp, #144]	; 0x90
   14334:	mov	r9, r4
   14338:	lsr	ip, r6, #24
   1433c:	eor	r2, r2, r0
   14340:	eor	r3, r3, r1
   14344:	ldrd	r0, [sp, #208]	; 0xd0
   14348:	strd	r2, [sp, #200]	; 0xc8
   1434c:	orr	r3, r5, sl, lsl #16
   14350:	ldrd	sl, [sp, #136]	; 0x88
   14354:	str	r3, [sp, #164]	; 0xa4
   14358:	add	r3, sp, #264	; 0x108
   1435c:	eor	sl, sl, r0
   14360:	eor	fp, fp, r1
   14364:	mov	r0, sl
   14368:	ldrd	r2, [r3]
   1436c:	mov	r1, fp
   14370:	ldrd	sl, [sp, #112]	; 0x70
   14374:	ldrd	r4, [sp, #160]	; 0xa0
   14378:	orr	ip, ip, r7, lsl #8
   1437c:	adds	sl, sl, r2
   14380:	adc	fp, fp, r3
   14384:	ldrd	r2, [sp, #192]	; 0xc0
   14388:	str	ip, [sp, #192]	; 0xc0
   1438c:	lsr	ip, r7, #24
   14390:	adds	r2, r2, r4
   14394:	adc	r3, r3, r5
   14398:	ldrd	r4, [sp, #176]	; 0xb0
   1439c:	strd	r2, [sp, #224]	; 0xe0
   143a0:	add	lr, sp, #256	; 0x100
   143a4:	eor	r5, r5, r3
   143a8:	orr	r3, ip, r6, lsl #8
   143ac:	str	r3, [sp, #196]	; 0xc4
   143b0:	ldr	r3, [sp, #200]	; 0xc8
   143b4:	eor	r4, r4, r2
   143b8:	ldrd	r6, [lr]
   143bc:	lsr	ip, r3, #24
   143c0:	ldrd	r2, [sp, #192]	; 0xc0
   143c4:	adds	r2, r2, sl
   143c8:	adc	r3, r3, fp
   143cc:	ldrd	sl, [sp, #88]	; 0x58
   143d0:	strd	r2, [lr]
   143d4:	lsl	lr, r4, #1
   143d8:	adds	sl, sl, r6
   143dc:	adc	fp, fp, r7
   143e0:	ldrd	r6, [sp, #184]	; 0xb8
   143e4:	strd	sl, [sp, #176]	; 0xb0
   143e8:	ldrd	sl, [sp, #56]	; 0x38
   143ec:	eor	r7, r7, r3
   143f0:	ldr	r3, [sp, #204]	; 0xcc
   143f4:	eor	r6, r6, r2
   143f8:	orr	r3, ip, r3, lsl #8
   143fc:	str	r3, [sp, #144]	; 0x90
   14400:	ldrd	r2, [sp, #240]	; 0xf0
   14404:	lsl	ip, r5, #1
   14408:	adds	sl, sl, r2
   1440c:	adc	fp, fp, r3
   14410:	orr	r3, ip, r4, lsr #31
   14414:	str	r3, [sp, #172]	; 0xac
   14418:	lsr	ip, r0, #24
   1441c:	orr	r3, lr, r5, lsr #31
   14420:	str	r3, [sp, #168]	; 0xa8
   14424:	orr	r3, ip, r1, lsl #8
   14428:	lsr	r1, r1, #24
   1442c:	str	r3, [sp, #136]	; 0x88
   14430:	orr	r3, r1, r0, lsl #8
   14434:	ldrd	r0, [sp, #200]	; 0xc8
   14438:	str	r3, [sp, #140]	; 0x8c
   1443c:	ldrd	r4, [sp, #176]	; 0xb0
   14440:	lsr	r3, r1, #24
   14444:	orr	r3, r3, r0, lsl #8
   14448:	str	r3, [sp, #148]	; 0x94
   1444c:	ldrd	r2, [sp, #144]	; 0x90
   14450:	ldrd	r0, [sp, #136]	; 0x88
   14454:	lsr	ip, r6, #16
   14458:	adds	r4, r4, r2
   1445c:	adc	r5, r5, r3
   14460:	adds	r0, r0, sl
   14464:	adc	r1, r1, fp
   14468:	mov	sl, r0
   1446c:	mov	fp, r1
   14470:	ldrd	r2, [sp, #72]	; 0x48
   14474:	mov	r0, r4
   14478:	mov	r1, r5
   1447c:	eor	r0, r0, r8
   14480:	eor	r1, r1, r9
   14484:	ldrd	r8, [sp, #168]	; 0xa8
   14488:	orr	ip, ip, r7, lsl #16
   1448c:	adds	r2, r2, sl
   14490:	str	ip, [sp, #176]	; 0xb0
   14494:	lsr	ip, r7, #16
   14498:	strd	r4, [sp, #232]	; 0xe8
   1449c:	adc	r3, r3, fp
   144a0:	orr	ip, ip, r6, lsl #16
   144a4:	adds	r4, r8, r2
   144a8:	adc	r5, r9, r3
   144ac:	str	ip, [sp, #180]	; 0xb4
   144b0:	mov	r2, r4
   144b4:	mov	r3, r5
   144b8:	ldrd	r4, [sp, #176]	; 0xb0
   144bc:	lsr	ip, r0, #16
   144c0:	orr	ip, ip, r1, lsl #16
   144c4:	lsr	r1, r1, #16
   144c8:	eor	r4, r4, r2
   144cc:	eor	r5, r5, r3
   144d0:	orr	r1, r1, r0, lsl #16
   144d4:	str	ip, [sp, #168]	; 0xa8
   144d8:	mov	r6, r4
   144dc:	mov	r7, r5
   144e0:	str	r1, [sp, #172]	; 0xac
   144e4:	ldrd	r4, [sp, #216]	; 0xd8
   144e8:	ldrd	r0, [sp, #168]	; 0xa8
   144ec:	str	r7, [sp, #184]	; 0xb8
   144f0:	str	r6, [sp, #188]	; 0xbc
   144f4:	ldrd	r6, [sp, #152]	; 0x98
   144f8:	adds	r0, r0, r4
   144fc:	adc	r1, r1, r5
   14500:	eor	r6, r6, sl
   14504:	eor	r7, r7, fp
   14508:	mov	sl, r6
   1450c:	mov	fp, r7
   14510:	ldrd	r6, [sp, #184]	; 0xb8
   14514:	mov	r4, r0
   14518:	mov	r5, r1
   1451c:	ldrd	r0, [sp, #144]	; 0x90
   14520:	adds	r6, r6, r4
   14524:	adc	r7, r7, r5
   14528:	eor	r1, r1, r5
   1452c:	eor	r0, r0, r4
   14530:	mov	r5, r7
   14534:	mov	r4, r6
   14538:	mov	r7, r9
   1453c:	mov	r6, r8
   14540:	eor	r6, r6, r4
   14544:	eor	r7, r7, r5
   14548:	strd	r4, [sp, #200]	; 0xc8
   1454c:	mov	r4, r6
   14550:	mov	r5, r7
   14554:	ldrd	r6, [sp, #120]	; 0x78
   14558:	lsr	ip, sl, #16
   1455c:	orr	ip, ip, fp, lsl #16
   14560:	str	ip, [sp, #144]	; 0x90
   14564:	adds	r6, r6, r2
   14568:	lsr	ip, fp, #16
   1456c:	adc	r7, r7, r3
   14570:	ldrd	r8, [sp, #24]
   14574:	orr	r3, ip, sl, lsl #16
   14578:	ldrd	sl, [sp, #248]	; 0xf8
   1457c:	str	r3, [sp, #148]	; 0x94
   14580:	lsr	ip, r5, #24
   14584:	adds	r8, r8, sl
   14588:	adc	r9, r9, fp
   1458c:	ldrd	sl, [sp, #144]	; 0x90
   14590:	strd	r8, [sp, #248]	; 0xf8
   14594:	ldrd	r8, [sp, #208]	; 0xd0
   14598:	lsr	r3, r4, #24
   1459c:	orr	r3, r3, r5, lsl #8
   145a0:	adds	r8, r8, sl
   145a4:	adc	r9, r9, fp
   145a8:	orr	ip, ip, r4, lsl #8
   145ac:	ldrd	sl, [sp, #136]	; 0x88
   145b0:	str	r3, [sp, #152]	; 0x98
   145b4:	str	ip, [sp, #156]	; 0x9c
   145b8:	ldrd	r4, [sp, #152]	; 0x98
   145bc:	eor	fp, fp, r9
   145c0:	mov	r3, fp
   145c4:	adds	r4, r4, r6
   145c8:	eor	sl, sl, r8
   145cc:	lsl	ip, r1, #1
   145d0:	orr	fp, ip, r0, lsr #31
   145d4:	adc	r5, r5, r7
   145d8:	lsl	ip, r3, #1
   145dc:	strd	r8, [sp, #216]	; 0xd8
   145e0:	orr	ip, ip, sl, lsr #31
   145e4:	mov	r8, r4
   145e8:	mov	r9, r5
   145ec:	ldrd	r4, [sp, #184]	; 0xb8
   145f0:	str	ip, [sp, #140]	; 0x8c
   145f4:	add	ip, sp, #272	; 0x110
   145f8:	ldrd	r6, [sp, #176]	; 0xb0
   145fc:	eor	r4, r4, r8
   14600:	eor	r5, r5, r9
   14604:	strd	r8, [sp, #240]	; 0xf0
   14608:	ldrd	r8, [ip]
   1460c:	lsl	r0, r0, #1
   14610:	lsl	r2, sl, #1
   14614:	orr	sl, r0, r1, lsr #31
   14618:	ldrd	r0, [sp, #248]	; 0xf8
   1461c:	adds	r8, r8, r6
   14620:	lsr	ip, r4, #16
   14624:	orr	r3, r2, r3, lsr #31
   14628:	adc	r9, r9, r7
   1462c:	str	r3, [sp, #136]	; 0x88
   14630:	ldrd	r6, [sp, #144]	; 0x90
   14634:	orr	r3, ip, r5, lsl #16
   14638:	adds	r0, r0, sl
   1463c:	str	r3, [sp, #144]	; 0x90
   14640:	lsr	r3, r5, #16
   14644:	adc	r1, r1, fp
   14648:	orr	r3, r3, r4, lsl #16
   1464c:	str	r3, [sp, #148]	; 0x94
   14650:	eor	r6, r6, r0
   14654:	eor	r7, r7, r1
   14658:	ldrd	r4, [sp, #200]	; 0xc8
   1465c:	str	r7, [sp, #176]	; 0xb0
   14660:	str	r6, [sp, #180]	; 0xb4
   14664:	ldrd	r6, [sp, #144]	; 0x90
   14668:	strd	r0, [sp, #248]	; 0xf8
   1466c:	adds	r4, r4, r6
   14670:	adc	r5, r5, r7
   14674:	strd	r4, [sp, #208]	; 0xd0
   14678:	ldrd	r6, [sp, #176]	; 0xb0
   1467c:	ldrd	r4, [sp, #64]	; 0x40
   14680:	adds	r2, r8, r6
   14684:	adc	r3, r9, r7
   14688:	ldrd	r6, [sp, #136]	; 0x88
   1468c:	strd	r2, [sp, #200]	; 0xc8
   14690:	add	r3, sp, #256	; 0x100
   14694:	ldrd	r0, [r3]
   14698:	ldrd	r2, [sp, #192]	; 0xc0
   1469c:	adds	r4, r4, r0
   146a0:	adc	r5, r5, r1
   146a4:	mov	r0, r4
   146a8:	adds	r4, r6, r0
   146ac:	mov	r1, r5
   146b0:	adc	r5, r7, r1
   146b4:	mov	r0, r4
   146b8:	mov	r1, r5
   146bc:	ldrd	r4, [sp, #168]	; 0xa8
   146c0:	eor	r3, r3, r9
   146c4:	eor	r2, r2, r8
   146c8:	eor	r4, r4, r0
   146cc:	eor	r5, r5, r1
   146d0:	mov	r8, r5
   146d4:	mov	r9, r4
   146d8:	ldrd	r4, [sp, #224]	; 0xe0
   146dc:	lsl	ip, r3, #1
   146e0:	orr	ip, ip, r2, lsr #31
   146e4:	lsl	r2, r2, #1
   146e8:	adds	r4, r4, r8
   146ec:	orr	r3, r2, r3, lsr #31
   146f0:	str	r3, [sp, #136]	; 0x88
   146f4:	adc	r5, r5, r9
   146f8:	add	r3, sp, #256	; 0x100
   146fc:	mov	r2, r6
   14700:	strd	r4, [r3]
   14704:	mov	r3, r7
   14708:	eor	r2, r2, r4
   1470c:	eor	r3, r3, r5
   14710:	ldrd	r6, [sp, #232]	; 0xe8
   14714:	mov	r4, r2
   14718:	mov	r5, r3
   1471c:	ldrd	r2, [sp, #48]	; 0x30
   14720:	str	ip, [sp, #140]	; 0x8c
   14724:	strd	r4, [sp, #168]	; 0xa8
   14728:	adds	r2, r2, r6
   1472c:	adc	r3, r3, r7
   14730:	ldrd	r6, [sp, #136]	; 0x88
   14734:	lsr	ip, r4, #24
   14738:	ldrd	r4, [sp, #32]
   1473c:	adds	r6, r6, r2
   14740:	adc	r7, r7, r3
   14744:	adds	r4, r4, r0
   14748:	adc	r5, r5, r1
   1474c:	mov	r0, r4
   14750:	mov	r1, r5
   14754:	ldrd	r4, [sp, #168]	; 0xa8
   14758:	mov	r2, r6
   1475c:	mov	r3, r7
   14760:	orr	ip, ip, r5, lsl #8
   14764:	ldrd	r6, [sp, #160]	; 0xa0
   14768:	str	ip, [sp, #184]	; 0xb8
   1476c:	lsr	ip, r5, #24
   14770:	orr	ip, ip, r4, lsl #8
   14774:	str	ip, [sp, #188]	; 0xbc
   14778:	eor	r6, r6, r2
   1477c:	eor	r7, r7, r3
   14780:	str	r7, [sp, #168]	; 0xa8
   14784:	str	r6, [sp, #172]	; 0xac
   14788:	ldrd	r6, [sp, #184]	; 0xb8
   1478c:	add	ip, sp, #264	; 0x108
   14790:	adds	r6, r6, r0
   14794:	adc	r7, r7, r1
   14798:	mov	r4, r6
   1479c:	mov	r5, r7
   147a0:	ldrd	r6, [sp, #200]	; 0xc8
   147a4:	ldrd	r0, [sp, #216]	; 0xd8
   147a8:	strd	r4, [ip]
   147ac:	eor	r6, r6, sl
   147b0:	eor	r7, r7, fp
   147b4:	ldrd	sl, [sp, #168]	; 0xa8
   147b8:	lsr	lr, r6, #24
   147bc:	adds	r0, r0, sl
   147c0:	adc	r1, r1, fp
   147c4:	mov	sl, r4
   147c8:	mov	fp, r5
   147cc:	eor	sl, sl, r8
   147d0:	eor	fp, fp, r9
   147d4:	mov	r4, sl
   147d8:	mov	r5, fp
   147dc:	ldrd	sl, [sp, #136]	; 0x88
   147e0:	ldrd	r8, [sp, #96]	; 0x60
   147e4:	strd	r0, [sp, #224]	; 0xe0
   147e8:	eor	sl, sl, r0
   147ec:	eor	fp, fp, r1
   147f0:	lsr	ip, r4, #16
   147f4:	strd	sl, [sp, #136]	; 0x88
   147f8:	ldrd	sl, [sp, #248]	; 0xf8
   147fc:	adds	r8, r8, sl
   14800:	adc	r9, r9, fp
   14804:	ldrd	sl, [sp, #16]
   14808:	ldrd	r0, [sp, #152]	; 0x98
   1480c:	adds	sl, sl, r2
   14810:	adc	fp, fp, r3
   14814:	orr	r3, lr, r7, lsl #8
   14818:	str	r3, [sp, #160]	; 0xa0
   1481c:	ldrd	r2, [sp, #208]	; 0xd0
   14820:	eor	r1, r1, r3
   14824:	mov	r3, r1
   14828:	orr	r1, ip, r5, lsl #16
   1482c:	lsr	ip, r7, #24
   14830:	str	r1, [sp, #192]	; 0xc0
   14834:	orr	r1, ip, r6, lsl #8
   14838:	str	r1, [sp, #164]	; 0xa4
   1483c:	eor	r0, r0, r2
   14840:	mov	r2, r0
   14844:	ldrd	r0, [sp, #160]	; 0xa0
   14848:	ldrd	r6, [sp, #176]	; 0xb0
   1484c:	lsl	lr, r3, #1
   14850:	adds	r0, r0, r8
   14854:	adc	r1, r1, r9
   14858:	ldrd	r8, [sp, #136]	; 0x88
   1485c:	strd	r0, [sp, #152]	; 0x98
   14860:	eor	r1, r1, r7
   14864:	lsr	ip, r8, #24
   14868:	mov	r7, r1
   1486c:	orr	r1, ip, r9, lsl #8
   14870:	lsr	ip, r5, #16
   14874:	str	r1, [sp, #176]	; 0xb0
   14878:	orr	r1, ip, r4, lsl #16
   1487c:	str	r1, [sp, #196]	; 0xc4
   14880:	add	r1, sp, #256	; 0x100
   14884:	eor	r0, r0, r6
   14888:	mov	r6, r0
   1488c:	ldrd	r4, [r1]
   14890:	ldrd	r0, [sp, #192]	; 0xc0
   14894:	lsr	ip, r6, #16
   14898:	adds	r4, r4, r0
   1489c:	adc	r5, r5, r1
   148a0:	ldrd	r0, [sp, #184]	; 0xb8
   148a4:	strd	r4, [sp, #248]	; 0xf8
   148a8:	eor	r1, r1, r5
   148ac:	mov	r5, r1
   148b0:	lsr	r1, r9, #24
   148b4:	orr	r1, r1, r8, lsl #8
   148b8:	str	r1, [sp, #180]	; 0xb4
   148bc:	eor	r0, r0, r4
   148c0:	mov	r4, r0
   148c4:	orr	r9, lr, r2, lsr #31
   148c8:	ldrd	r0, [sp, #176]	; 0xb0
   148cc:	lsl	r2, r2, #1
   148d0:	orr	r3, r2, r3, lsr #31
   148d4:	str	r9, [sp, #140]	; 0x8c
   148d8:	str	r3, [sp, #136]	; 0x88
   148dc:	ldrd	r8, [sp, #240]	; 0xf0
   148e0:	ldrd	r2, [sp, #48]	; 0x30
   148e4:	adds	r0, r0, sl
   148e8:	adc	r1, r1, fp
   148ec:	mov	sl, r0
   148f0:	adds	r2, r2, r8
   148f4:	mov	fp, r1
   148f8:	ldrd	r0, [sp, #168]	; 0xa8
   148fc:	adc	r3, r3, r9
   14900:	strd	sl, [sp, #232]	; 0xe8
   14904:	eor	r0, r0, sl
   14908:	ldrd	r8, [sp, #152]	; 0x98
   1490c:	orr	sl, ip, r7, lsl #16
   14910:	strd	r2, [sp, #184]	; 0xb8
   14914:	lsr	ip, r7, #16
   14918:	ldrd	r2, [sp, #24]
   1491c:	eor	r1, r1, fp
   14920:	orr	fp, ip, r6, lsl #16
   14924:	ldrd	r6, [sp, #136]	; 0x88
   14928:	adds	r8, r8, r2
   1492c:	adc	r9, r9, r3
   14930:	adds	r6, r6, r8
   14934:	adc	r7, r7, r9
   14938:	mov	r8, r6
   1493c:	mov	r9, r7
   14940:	lsl	lr, r5, #1
   14944:	ldrd	r6, [sp, #200]	; 0xc8
   14948:	orr	r3, lr, r4, lsr #31
   1494c:	str	r3, [sp, #172]	; 0xac
   14950:	ldrd	r2, [sp, #160]	; 0xa0
   14954:	adds	r6, r6, sl
   14958:	adc	r7, r7, fp
   1495c:	lsr	ip, r0, #16
   14960:	eor	r2, r2, r6
   14964:	eor	r3, r3, r7
   14968:	strd	r6, [sp, #216]	; 0xd8
   1496c:	orr	r6, ip, r1, lsl #16
   14970:	lsl	ip, r4, #1
   14974:	strd	r2, [sp, #200]	; 0xc8
   14978:	orr	r3, ip, r5, lsr #31
   1497c:	str	r3, [sp, #168]	; 0xa8
   14980:	ldrd	r2, [sp, #168]	; 0xa8
   14984:	ldrd	r4, [sp, #184]	; 0xb8
   14988:	lsr	r1, r1, #16
   1498c:	orr	r7, r1, r0, lsl #16
   14990:	adds	r4, r4, r2
   14994:	adc	r5, r5, r3
   14998:	eor	r0, r6, r8
   1499c:	strd	r4, [sp, #240]	; 0xf0
   149a0:	eor	r4, r4, sl
   149a4:	eor	r5, r5, fp
   149a8:	mov	sl, r4
   149ac:	mov	fp, r5
   149b0:	ldrd	r4, [sp, #224]	; 0xe0
   149b4:	eor	r1, r7, r9
   149b8:	ldr	r3, [sp, #204]	; 0xcc
   149bc:	adds	r4, r4, r6
   149c0:	str	r1, [sp, #184]	; 0xb8
   149c4:	str	r0, [sp, #188]	; 0xbc
   149c8:	adc	r5, r5, r7
   149cc:	ldrd	r0, [sp, #248]	; 0xf8
   149d0:	mov	r6, r4
   149d4:	mov	r7, r5
   149d8:	str	fp, [sp, #160]	; 0xa0
   149dc:	str	sl, [sp, #164]	; 0xa4
   149e0:	ldrd	r4, [sp, #184]	; 0xb8
   149e4:	ldrd	sl, [sp, #200]	; 0xc8
   149e8:	lsl	ip, r3, #1
   149ec:	adds	r4, r4, r0
   149f0:	orr	r3, ip, sl, lsr #31
   149f4:	lsl	r2, sl, #1
   149f8:	adc	r5, r5, r1
   149fc:	str	r3, [sp, #156]	; 0x9c
   14a00:	ldrd	r0, [sp, #112]	; 0x70
   14a04:	orr	r3, r2, fp, lsr #31
   14a08:	ldrd	sl, [sp, #232]	; 0xe8
   14a0c:	str	r3, [sp, #152]	; 0x98
   14a10:	strd	r4, [sp, #248]	; 0xf8
   14a14:	adds	r0, r0, sl
   14a18:	adc	r1, r1, fp
   14a1c:	mov	r2, r0
   14a20:	ldrd	sl, [sp, #136]	; 0x88
   14a24:	mov	r3, r1
   14a28:	ldrd	r0, [sp, #160]	; 0xa0
   14a2c:	eor	sl, sl, r4
   14a30:	eor	fp, fp, r5
   14a34:	adds	r0, r0, r6
   14a38:	ldrd	r4, [sp, #168]	; 0xa8
   14a3c:	adc	r1, r1, r7
   14a40:	lsr	lr, sl, #24
   14a44:	strd	r0, [sp, #224]	; 0xe0
   14a48:	eor	r4, r4, r0
   14a4c:	eor	r5, r5, r1
   14a50:	ldrd	r0, [sp, #152]	; 0x98
   14a54:	strd	r4, [sp, #200]	; 0xc8
   14a58:	ldrd	r4, [sp, #192]	; 0xc0
   14a5c:	adds	r0, r0, r2
   14a60:	adc	r1, r1, r3
   14a64:	mov	r3, r1
   14a68:	eor	r5, r5, r1
   14a6c:	ldr	r1, [sp, #200]	; 0xc8
   14a70:	mov	r2, r0
   14a74:	eor	r4, r4, r0
   14a78:	lsr	ip, r1, #24
   14a7c:	ldrd	r0, [sp, #16]
   14a80:	strd	r2, [sp, #192]	; 0xc0
   14a84:	mov	r2, r4
   14a88:	adds	r0, r0, r8
   14a8c:	adc	r1, r1, r9
   14a90:	mov	r3, r5
   14a94:	mov	r8, r0
   14a98:	ldrd	r4, [sp, #64]	; 0x40
   14a9c:	mov	r9, r1
   14aa0:	ldrd	r0, [sp, #240]	; 0xf0
   14aa4:	adds	r4, r4, r0
   14aa8:	adc	r5, r5, r1
   14aac:	orr	r1, lr, fp, lsl #8
   14ab0:	str	r1, [sp, #168]	; 0xa8
   14ab4:	ldr	r1, [sp, #204]	; 0xcc
   14ab8:	orr	r1, ip, r1, lsl #8
   14abc:	str	r1, [sp, #136]	; 0x88
   14ac0:	ldrd	r0, [sp, #176]	; 0xb0
   14ac4:	str	r3, [sp, #176]	; 0xb0
   14ac8:	str	r2, [sp, #180]	; 0xb4
   14acc:	eor	r0, r0, r6
   14ad0:	eor	r1, r1, r7
   14ad4:	ldrd	r2, [sp, #208]	; 0xd0
   14ad8:	mov	r7, r1
   14adc:	mov	r6, r0
   14ae0:	ldrd	r0, [sp, #176]	; 0xb0
   14ae4:	add	ip, sp, #256	; 0x100
   14ae8:	adds	r2, r2, r0
   14aec:	adc	r3, r3, r1
   14af0:	ldrd	r0, [sp, #152]	; 0x98
   14af4:	strd	r2, [ip]
   14af8:	lsr	ip, fp, #24
   14afc:	eor	r1, r1, r3
   14b00:	orr	r3, ip, sl, lsl #8
   14b04:	str	r3, [sp, #172]	; 0xac
   14b08:	ldrd	sl, [sp, #168]	; 0xa8
   14b0c:	eor	r0, r0, r2
   14b10:	lsl	ip, r7, #1
   14b14:	adds	sl, sl, r8
   14b18:	adc	fp, fp, r9
   14b1c:	ldrd	r8, [sp, #200]	; 0xc8
   14b20:	strd	r0, [sp, #208]	; 0xd0
   14b24:	strd	sl, [sp, #240]	; 0xf0
   14b28:	lsr	r1, r9, #24
   14b2c:	orr	r3, r1, r8, lsl #8
   14b30:	str	r3, [sp, #140]	; 0x8c
   14b34:	ldrd	r8, [sp, #136]	; 0x88
   14b38:	ldrd	r2, [sp, #184]	; 0xb8
   14b3c:	adds	r0, r4, r8
   14b40:	adc	r1, r5, r9
   14b44:	ldrd	r8, [sp, #160]	; 0xa0
   14b48:	eor	r2, r2, sl
   14b4c:	eor	r3, r3, fp
   14b50:	eor	r8, r8, r0
   14b54:	eor	r9, r9, r1
   14b58:	orr	fp, ip, r6, lsr #31
   14b5c:	mov	r5, r3
   14b60:	strd	r0, [sp, #232]	; 0xe8
   14b64:	mov	r4, r2
   14b68:	mov	r0, r8
   14b6c:	mov	r1, r9
   14b70:	lsr	lr, r2, #16
   14b74:	lsr	ip, r8, #16
   14b78:	ldrd	r2, [sp, #192]	; 0xc0
   14b7c:	ldrd	r8, [sp, #104]	; 0x68
   14b80:	lsl	r6, r6, #1
   14b84:	orr	sl, r6, r7, lsr #31
   14b88:	adds	r8, r8, r2
   14b8c:	adc	r9, r9, r3
   14b90:	orr	r3, lr, r5, lsl #16
   14b94:	lsr	lr, r5, #16
   14b98:	str	r3, [sp, #160]	; 0xa0
   14b9c:	orr	r3, lr, r4, lsl #16
   14ba0:	str	r3, [sp, #164]	; 0xa4
   14ba4:	orr	r3, ip, r1, lsl #16
   14ba8:	ldrd	r6, [sp, #208]	; 0xd0
   14bac:	str	r3, [sp, #152]	; 0x98
   14bb0:	ldrd	r4, [sp, #248]	; 0xf8
   14bb4:	ldrd	r2, [sp, #160]	; 0xa0
   14bb8:	lsr	ip, r6, #24
   14bbc:	lsr	r1, r1, #16
   14bc0:	adds	r4, r4, r2
   14bc4:	adc	r5, r5, r3
   14bc8:	orr	r3, ip, r7, lsl #8
   14bcc:	str	r3, [sp, #184]	; 0xb8
   14bd0:	orr	r3, r1, r0, lsl #16
   14bd4:	str	r3, [sp, #156]	; 0x9c
   14bd8:	ldrd	r2, [sp, #152]	; 0x98
   14bdc:	strd	r4, [sp, #200]	; 0xc8
   14be0:	ldrd	r4, [sp, #224]	; 0xe0
   14be4:	add	r1, sp, #264	; 0x108
   14be8:	adds	r4, r4, r2
   14bec:	adc	r5, r5, r3
   14bf0:	lsr	r3, r7, #24
   14bf4:	orr	r3, r3, r6, lsl #8
   14bf8:	str	r3, [sp, #188]	; 0xbc
   14bfc:	strd	r4, [sp, #192]	; 0xc0
   14c00:	ldrd	r2, [sp, #184]	; 0xb8
   14c04:	ldrd	r4, [r1]
   14c08:	ldrd	r6, [sp, #216]	; 0xd8
   14c0c:	adds	r2, r2, r8
   14c10:	adc	r3, r3, r9
   14c14:	strd	r2, [sp, #208]	; 0xd0
   14c18:	ldrd	r2, [sp, #80]	; 0x50
   14c1c:	adds	r2, r2, r4
   14c20:	adc	r3, r3, r5
   14c24:	ldrd	r4, [sp, #144]	; 0x90
   14c28:	adds	r0, r2, sl
   14c2c:	adc	r1, r3, fp
   14c30:	eor	r5, r5, r1
   14c34:	adds	r6, r6, r5
   14c38:	eor	r4, r4, r0
   14c3c:	adc	r7, r7, r4
   14c40:	mov	r3, r4
   14c44:	mov	r4, r6
   14c48:	strd	r6, [sp, #224]	; 0xe0
   14c4c:	eor	r4, r4, sl
   14c50:	mov	r2, r5
   14c54:	mov	r5, r7
   14c58:	ldrd	r6, [sp, #120]	; 0x78
   14c5c:	eor	r5, r5, fp
   14c60:	lsr	ip, r4, #24
   14c64:	orr	r8, ip, r5, lsl #8
   14c68:	adds	r6, r6, r0
   14c6c:	lsr	ip, r5, #24
   14c70:	orr	r9, ip, r4, lsl #8
   14c74:	adc	r7, r7, r1
   14c78:	adds	r6, r6, r8
   14c7c:	adc	r7, r7, r9
   14c80:	ldrd	r4, [sp, #176]	; 0xb0
   14c84:	mov	r0, r6
   14c88:	mov	r1, r7
   14c8c:	ldrd	r6, [sp, #208]	; 0xd0
   14c90:	ldrd	sl, [sp, #200]	; 0xc8
   14c94:	strd	r0, [sp, #248]	; 0xf8
   14c98:	eor	r4, r4, r6
   14c9c:	eor	r5, r5, r7
   14ca0:	mov	r6, r0
   14ca4:	mov	r7, r1
   14ca8:	ldrd	r0, [sp, #168]	; 0xa8
   14cac:	eor	r6, r6, r2
   14cb0:	lsr	lr, r4, #16
   14cb4:	eor	r1, r1, fp
   14cb8:	eor	r0, r0, sl
   14cbc:	lsl	ip, r1, #1
   14cc0:	orr	ip, ip, r0, lsr #31
   14cc4:	lsl	r0, r0, #1
   14cc8:	orr	r1, r0, r1, lsr #31
   14ccc:	str	r1, [sp, #144]	; 0x90
   14cd0:	ldrd	sl, [sp, #88]	; 0x58
   14cd4:	ldrd	r0, [sp, #232]	; 0xe8
   14cd8:	eor	r7, r7, r3
   14cdc:	str	ip, [sp, #148]	; 0x94
   14ce0:	adds	sl, sl, r0
   14ce4:	adc	fp, fp, r1
   14ce8:	orr	r1, lr, r5, lsl #16
   14cec:	str	r1, [sp, #168]	; 0xa8
   14cf0:	mov	r2, r6
   14cf4:	ldrd	r0, [sp, #192]	; 0xc0
   14cf8:	mov	r3, r7
   14cfc:	lsr	ip, r6, #16
   14d00:	ldrd	r6, [sp, #136]	; 0x88
   14d04:	eor	r6, r6, r0
   14d08:	eor	r7, r7, r1
   14d0c:	ldrd	r0, [sp, #144]	; 0x90
   14d10:	adds	r0, r0, sl
   14d14:	adc	r1, r1, fp
   14d18:	strd	r0, [sp, #216]	; 0xd8
   14d1c:	orr	r0, ip, r3, lsl #16
   14d20:	lsr	ip, r5, #16
   14d24:	orr	ip, ip, r4, lsl #16
   14d28:	str	ip, [sp, #172]	; 0xac
   14d2c:	add	ip, sp, #256	; 0x100
   14d30:	ldrd	r4, [sp, #168]	; 0xa8
   14d34:	ldrd	sl, [ip]
   14d38:	lsr	r3, r3, #16
   14d3c:	orr	r1, r3, r2, lsl #16
   14d40:	adds	sl, sl, r4
   14d44:	adc	fp, fp, r5
   14d48:	ldrd	r4, [sp, #224]	; 0xe0
   14d4c:	adds	r4, r4, r0
   14d50:	adc	r5, r5, r1
   14d54:	mov	r2, r4
   14d58:	mov	r3, r5
   14d5c:	ldrd	r4, [sp, #184]	; 0xb8
   14d60:	strd	r2, [ip]
   14d64:	eor	r3, r3, r9
   14d68:	eor	r2, r2, r8
   14d6c:	ldrd	r8, [sp, #216]	; 0xd8
   14d70:	strd	sl, [sp, #184]	; 0xb8
   14d74:	lsl	ip, r7, #1
   14d78:	eor	fp, fp, r5
   14d7c:	eor	sl, sl, r4
   14d80:	orr	ip, ip, r6, lsr #31
   14d84:	eor	r8, r8, r0
   14d88:	eor	r9, r9, r1
   14d8c:	str	ip, [sp, #140]	; 0x8c
   14d90:	lsl	r1, fp, #1
   14d94:	lsl	ip, r6, #1
   14d98:	str	r9, [sp, #176]	; 0xb0
   14d9c:	orr	ip, ip, r7, lsr #31
   14da0:	str	r8, [sp, #180]	; 0xb4
   14da4:	orr	r7, r1, sl, lsr #31
   14da8:	ldrd	r8, [sp, #240]	; 0xf0
   14dac:	ldrd	r0, [sp, #40]	; 0x28
   14db0:	lsl	lr, sl, #1
   14db4:	orr	r6, lr, fp, lsr #31
   14db8:	adds	r0, r0, r8
   14dbc:	adc	r1, r1, r9
   14dc0:	ldrd	r8, [sp, #32]
   14dc4:	strd	r0, [sp, #224]	; 0xe0
   14dc8:	ldrd	r0, [sp, #208]	; 0xd0
   14dcc:	ldrd	sl, [sp, #248]	; 0xf8
   14dd0:	str	ip, [sp, #136]	; 0x88
   14dd4:	adds	r8, r8, r0
   14dd8:	adc	r9, r9, r1
   14ddc:	ldrd	r0, [sp, #128]	; 0x80
   14de0:	lsl	ip, r3, #1
   14de4:	orr	r5, ip, r2, lsr #31
   14de8:	adds	r0, r0, sl
   14dec:	adc	r1, r1, fp
   14df0:	lsl	r2, r2, #1
   14df4:	strd	r0, [sp, #232]	; 0xe8
   14df8:	orr	r4, r2, r3, lsr #31
   14dfc:	ldrd	r0, [sp, #184]	; 0xb8
   14e00:	ldrd	r2, [sp, #176]	; 0xb0
   14e04:	adds	r0, r0, r2
   14e08:	adc	r1, r1, r3
   14e0c:	mov	r2, r0
   14e10:	mov	r3, r1
   14e14:	ldrd	r0, [sp, #224]	; 0xe0
   14e18:	strd	r2, [sp, #240]	; 0xf0
   14e1c:	adds	r0, r0, r6
   14e20:	adc	r1, r1, r7
   14e24:	mov	sl, r0
   14e28:	mov	fp, r1
   14e2c:	ldrd	r0, [sp, #136]	; 0x88
   14e30:	strd	sl, [sp, #208]	; 0xd0
   14e34:	ldrd	sl, [sp, #232]	; 0xe8
   14e38:	adds	r0, r0, sl
   14e3c:	adc	r1, r1, fp
   14e40:	adds	sl, r8, r4
   14e44:	adc	fp, r9, r5
   14e48:	strd	r0, [sp, #232]	; 0xe8
   14e4c:	ldrd	r8, [sp, #208]	; 0xd0
   14e50:	ldrd	r0, [sp, #144]	; 0x90
   14e54:	strd	sl, [sp, #224]	; 0xe0
   14e58:	ldrd	sl, [sp, #152]	; 0x98
   14e5c:	eor	r0, r0, r2
   14e60:	eor	r1, r1, r3
   14e64:	eor	sl, sl, r8
   14e68:	eor	fp, fp, r9
   14e6c:	mov	r2, r0
   14e70:	mov	r3, r1
   14e74:	mov	r8, sl
   14e78:	ldrd	r0, [sp, #168]	; 0xa8
   14e7c:	mov	r9, fp
   14e80:	ldrd	sl, [sp, #232]	; 0xe8
   14e84:	lsr	ip, r2, #24
   14e88:	str	r9, [sp, #152]	; 0x98
   14e8c:	eor	r0, r0, sl
   14e90:	eor	r1, r1, fp
   14e94:	ldrd	sl, [sp, #160]	; 0xa0
   14e98:	strd	r0, [sp, #248]	; 0xf8
   14e9c:	ldrd	r0, [sp, #224]	; 0xe0
   14ea0:	str	r8, [sp, #156]	; 0x9c
   14ea4:	eor	fp, fp, r1
   14ea8:	orr	r1, ip, r3, lsl #8
   14eac:	eor	sl, sl, r0
   14eb0:	str	r1, [sp, #144]	; 0x90
   14eb4:	ldrd	r0, [sp, #248]	; 0xf8
   14eb8:	str	fp, [sp, #168]	; 0xa8
   14ebc:	str	sl, [sp, #172]	; 0xac
   14ec0:	lsr	r3, r3, #24
   14ec4:	str	r1, [sp, #184]	; 0xb8
   14ec8:	ldrd	r8, [sp, #216]	; 0xd8
   14ecc:	str	r0, [sp, #188]	; 0xbc
   14ed0:	ldrd	r0, [sp, #96]	; 0x60
   14ed4:	orr	r3, r3, r2, lsl #8
   14ed8:	str	r3, [sp, #148]	; 0x94
   14edc:	add	r3, sp, #256	; 0x100
   14ee0:	adds	r0, r0, r8
   14ee4:	adc	r1, r1, r9
   14ee8:	ldrd	r2, [r3]
   14eec:	ldrd	r8, [sp, #152]	; 0x98
   14ef0:	ldrd	sl, [sp, #192]	; 0xc0
   14ef4:	adds	r2, r2, r8
   14ef8:	adc	r3, r3, r9
   14efc:	ldrd	r8, [sp, #168]	; 0xa8
   14f00:	strd	r2, [sp, #248]	; 0xf8
   14f04:	adds	sl, sl, r8
   14f08:	adc	fp, fp, r9
   14f0c:	ldrd	r8, [sp, #200]	; 0xc8
   14f10:	strd	sl, [sp, #216]	; 0xd8
   14f14:	ldrd	sl, [sp, #184]	; 0xb8
   14f18:	adds	sl, sl, r8
   14f1c:	adc	fp, fp, r9
   14f20:	mov	r8, sl
   14f24:	mov	r9, fp
   14f28:	ldrd	sl, [sp, #144]	; 0x90
   14f2c:	adds	sl, sl, r0
   14f30:	adc	fp, fp, r1
   14f34:	mov	r0, r2
   14f38:	strd	sl, [sp, #200]	; 0xc8
   14f3c:	ldrd	sl, [sp, #216]	; 0xd8
   14f40:	mov	r1, r3
   14f44:	add	r3, sp, #256	; 0x100
   14f48:	eor	r0, r0, r6
   14f4c:	eor	r1, r1, r7
   14f50:	eor	sl, sl, r4
   14f54:	eor	fp, fp, r5
   14f58:	mov	r6, r0
   14f5c:	mov	r7, r1
   14f60:	mov	r4, sl
   14f64:	ldrd	r0, [sp, #136]	; 0x88
   14f68:	mov	r5, fp
   14f6c:	strd	r8, [r3]
   14f70:	ldrd	sl, [sp, #200]	; 0xc8
   14f74:	ldrd	r2, [sp, #176]	; 0xb0
   14f78:	eor	r0, r0, r8
   14f7c:	eor	r1, r1, r9
   14f80:	eor	r2, r2, sl
   14f84:	ldrd	r8, [sp, #72]	; 0x48
   14f88:	eor	r3, r3, fp
   14f8c:	ldrd	sl, [sp, #208]	; 0xd0
   14f90:	lsr	ip, r2, #16
   14f94:	orr	ip, ip, r3, lsl #16
   14f98:	adds	r8, r8, sl
   14f9c:	adc	r9, r9, fp
   14fa0:	add	sl, sp, #264	; 0x108
   14fa4:	lsr	r3, r3, #16
   14fa8:	strd	r8, [sl]
   14fac:	ldrd	r8, [sp, #232]	; 0xe8
   14fb0:	ldrd	sl, [sp, #56]	; 0x38
   14fb4:	lsr	lr, r6, #24
   14fb8:	orr	r3, r3, r2, lsl #16
   14fbc:	adds	sl, sl, r8
   14fc0:	adc	fp, fp, r9
   14fc4:	ldrd	r8, [sp, #8]
   14fc8:	strd	sl, [sp, #232]	; 0xe8
   14fcc:	ldrd	sl, [sp, #224]	; 0xe0
   14fd0:	str	ip, [sp, #136]	; 0x88
   14fd4:	str	r3, [sp, #140]	; 0x8c
   14fd8:	adds	r8, r8, sl
   14fdc:	orr	r3, lr, r7, lsl #8
   14fe0:	adc	r9, r9, fp
   14fe4:	mov	sl, r8
   14fe8:	mov	fp, r9
   14fec:	str	r3, [sp, #160]	; 0xa0
   14ff0:	ldrd	r8, [sp, #136]	; 0x88
   14ff4:	ldrd	r2, [sp, #240]	; 0xf0
   14ff8:	lsr	ip, r4, #24
   14ffc:	lsr	lr, r0, #24
   15000:	adds	r2, r2, r8
   15004:	adc	r3, r3, r9
   15008:	orr	ip, ip, r5, lsl #8
   1500c:	strd	r2, [sp, #208]	; 0xd0
   15010:	ldrd	r8, [sp, #144]	; 0x90
   15014:	str	ip, [sp, #176]	; 0xb0
   15018:	orr	ip, lr, r1, lsl #8
   1501c:	eor	r9, r9, r3
   15020:	eor	r8, r8, r2
   15024:	str	ip, [sp, #192]	; 0xc0
   15028:	lsl	ip, r9, #1
   1502c:	orr	ip, ip, r8, lsr #31
   15030:	str	ip, [sp, #148]	; 0x94
   15034:	lsr	ip, r7, #24
   15038:	orr	ip, ip, r6, lsl #8
   1503c:	str	ip, [sp, #164]	; 0xa4
   15040:	add	ip, sp, #264	; 0x108
   15044:	mov	r2, r8
   15048:	ldrd	r6, [ip]
   1504c:	lsr	ip, r5, #24
   15050:	orr	ip, ip, r4, lsl #8
   15054:	str	ip, [sp, #180]	; 0xb4
   15058:	mov	r3, r9
   1505c:	ldrd	r8, [sp, #160]	; 0xa0
   15060:	mov	r4, sl
   15064:	mov	r5, fp
   15068:	ldrd	sl, [sp, #176]	; 0xb0
   1506c:	adds	r6, r6, r8
   15070:	lsr	r1, r1, #24
   15074:	adc	r7, r7, r9
   15078:	orr	r1, r1, r0, lsl #8
   1507c:	adds	r4, r4, sl
   15080:	adc	r5, r5, fp
   15084:	str	r1, [sp, #196]	; 0xc4
   15088:	ldrd	r0, [sp, #192]	; 0xc0
   1508c:	mov	sl, r4
   15090:	mov	fp, r5
   15094:	ldrd	r4, [sp, #232]	; 0xe8
   15098:	mov	r8, r6
   1509c:	mov	r9, r7
   150a0:	adds	r4, r4, r0
   150a4:	adc	r5, r5, r1
   150a8:	ldrd	r6, [sp, #152]	; 0x98
   150ac:	mov	r0, r4
   150b0:	mov	r1, r5
   150b4:	ldrd	r4, [sp, #168]	; 0xa8
   150b8:	eor	r6, r6, r8
   150bc:	strd	sl, [sp, #224]	; 0xe0
   150c0:	eor	r4, r4, sl
   150c4:	eor	r5, r5, fp
   150c8:	ldrd	sl, [sp, #184]	; 0xb8
   150cc:	eor	r7, r7, r9
   150d0:	lsl	r2, r2, #1
   150d4:	lsr	lr, r6, #16
   150d8:	orr	r3, r2, r3, lsr #31
   150dc:	eor	fp, fp, r1
   150e0:	str	r3, [sp, #144]	; 0x90
   150e4:	orr	r3, lr, r7, lsl #16
   150e8:	eor	sl, sl, r0
   150ec:	str	r3, [sp, #152]	; 0x98
   150f0:	lsr	r3, r7, #16
   150f4:	strd	r0, [sp, #232]	; 0xe8
   150f8:	orr	r3, r3, r6, lsl #16
   150fc:	lsr	r1, fp, #16
   15100:	str	r3, [sp, #156]	; 0x9c
   15104:	lsr	ip, r4, #16
   15108:	orr	r1, r1, sl, lsl #16
   1510c:	ldrd	r6, [sp, #152]	; 0x98
   15110:	orr	r2, ip, r5, lsl #16
   15114:	str	r1, [sp, #172]	; 0xac
   15118:	lsr	ip, r5, #16
   1511c:	ldrd	r0, [sp, #248]	; 0xf8
   15120:	orr	r3, ip, r4, lsl #16
   15124:	ldrd	r4, [sp, #216]	; 0xd8
   15128:	adds	r0, r0, r6
   1512c:	lsr	lr, sl, #16
   15130:	adc	r1, r1, r7
   15134:	adds	r4, r4, r2
   15138:	orr	ip, lr, fp, lsl #16
   1513c:	mov	r7, r1
   15140:	adc	r5, r5, r3
   15144:	add	r1, sp, #256	; 0x100
   15148:	str	ip, [sp, #168]	; 0xa8
   1514c:	ldrd	sl, [sp, #168]	; 0xa8
   15150:	strd	r4, [sp, #184]	; 0xb8
   15154:	ldrd	r4, [r1]
   15158:	mov	r6, r0
   1515c:	add	ip, sp, #256	; 0x100
   15160:	adds	sl, sl, r4
   15164:	adc	fp, fp, r5
   15168:	mov	r0, sl
   1516c:	mov	r1, fp
   15170:	ldrd	r4, [sp, #64]	; 0x40
   15174:	ldrd	sl, [sp, #200]	; 0xc8
   15178:	adds	r4, r4, sl
   1517c:	adc	r5, r5, fp
   15180:	strd	r4, [ip]
   15184:	ldrd	r4, [sp, #40]	; 0x28
   15188:	adds	r4, r4, r8
   1518c:	adc	r5, r5, r9
   15190:	mov	r8, r4
   15194:	mov	r9, r5
   15198:	ldrd	r4, [sp, #144]	; 0x90
   1519c:	ldrd	sl, [sp, #176]	; 0xb0
   151a0:	strd	r6, [sp, #200]	; 0xc8
   151a4:	adds	r4, r4, r8
   151a8:	adc	r5, r5, r9
   151ac:	ldrd	r8, [sp, #184]	; 0xb8
   151b0:	strd	r4, [sp, #216]	; 0xd8
   151b4:	eor	r4, r4, r2
   151b8:	eor	sl, sl, r8
   151bc:	eor	fp, fp, r9
   151c0:	eor	r5, r5, r3
   151c4:	mov	r2, sl
   151c8:	mov	r3, fp
   151cc:	ldrd	sl, [sp, #160]	; 0xa0
   151d0:	strd	r2, [sp, #176]	; 0xb0
   151d4:	mov	r8, r5
   151d8:	eor	sl, sl, r6
   151dc:	eor	fp, fp, r7
   151e0:	mov	r6, sl
   151e4:	mov	r7, fp
   151e8:	ldrd	sl, [sp, #192]	; 0xc0
   151ec:	mov	r9, r4
   151f0:	adds	r2, r0, r8
   151f4:	eor	sl, sl, r0
   151f8:	eor	fp, fp, r1
   151fc:	mov	r4, sl
   15200:	mov	r5, fp
   15204:	ldrd	sl, [sp, #176]	; 0xb0
   15208:	lsl	ip, r3, #1
   1520c:	adc	r3, r1, r9
   15210:	orr	r1, ip, sl, lsr #31
   15214:	str	r1, [sp, #164]	; 0xa4
   15218:	ldrd	r0, [sp, #144]	; 0x90
   1521c:	strd	r2, [sp, #240]	; 0xf0
   15220:	lsl	ip, sl, #1
   15224:	eor	r0, r0, r2
   15228:	eor	r1, r1, r3
   1522c:	ldrd	r2, [sp, #232]	; 0xe8
   15230:	strd	r0, [sp, #176]	; 0xb0
   15234:	ldrd	r0, [sp, #72]	; 0x48
   15238:	lsl	lr, r5, #1
   1523c:	adds	r0, r0, r2
   15240:	adc	r1, r1, r3
   15244:	orr	r3, ip, fp, lsr #31
   15248:	str	r3, [sp, #160]	; 0xa0
   1524c:	ldrd	sl, [sp, #160]	; 0xa0
   15250:	lsl	r3, r7, #1
   15254:	orr	r3, r3, r6, lsr #31
   15258:	adds	sl, sl, r0
   1525c:	adc	fp, fp, r1
   15260:	str	r3, [sp, #148]	; 0x94
   15264:	ldrd	r0, [sp, #88]	; 0x58
   15268:	ldrd	r2, [sp, #224]	; 0xe0
   1526c:	lsl	ip, r6, #1
   15270:	strd	sl, [sp, #232]	; 0xe8
   15274:	adds	r0, r0, r2
   15278:	adc	r1, r1, r3
   1527c:	strd	r0, [sp, #224]	; 0xe0
   15280:	ldrd	r0, [sp, #136]	; 0x88
   15284:	eor	r1, r1, fp
   15288:	mov	r3, r1
   1528c:	orr	r1, ip, r7, lsr #31
   15290:	str	r1, [sp, #144]	; 0x90
   15294:	ldr	r1, [sp, #176]	; 0xb0
   15298:	eor	r0, r0, sl
   1529c:	ldrd	r6, [sp, #48]	; 0x30
   152a0:	lsr	ip, r1, #24
   152a4:	orr	r1, lr, r4, lsr #31
   152a8:	mov	r2, r0
   152ac:	str	r1, [sp, #140]	; 0x8c
   152b0:	ldrd	r0, [sp, #216]	; 0xd8
   152b4:	ldrd	sl, [sp, #144]	; 0x90
   152b8:	lsl	lr, r4, #1
   152bc:	adds	r6, r6, r0
   152c0:	adc	r7, r7, r1
   152c4:	ldrd	r0, [sp, #224]	; 0xe0
   152c8:	strd	r6, [sp, #192]	; 0xc0
   152cc:	adds	sl, sl, r0
   152d0:	adc	fp, fp, r1
   152d4:	orr	r1, lr, r5, lsr #31
   152d8:	str	r1, [sp, #136]	; 0x88
   152dc:	ldrd	r6, [sp, #176]	; 0xb0
   152e0:	strd	sl, [sp, #248]	; 0xf8
   152e4:	str	r3, [sp, #176]	; 0xb0
   152e8:	lsr	r1, r7, #24
   152ec:	orr	r5, r1, r6, lsl #8
   152f0:	ldrd	r0, [sp, #168]	; 0xa8
   152f4:	orr	r4, ip, r7, lsl #8
   152f8:	add	ip, sp, #256	; 0x100
   152fc:	ldrd	r6, [sp, #136]	; 0x88
   15300:	eor	r0, r0, sl
   15304:	eor	r1, r1, fp
   15308:	ldrd	sl, [ip]
   1530c:	str	r2, [sp, #180]	; 0xb4
   15310:	ldrd	r2, [sp, #160]	; 0xa0
   15314:	adds	sl, sl, r6
   15318:	adc	fp, fp, r7
   1531c:	ldrd	r6, [sp, #192]	; 0xc0
   15320:	strd	sl, [sp, #224]	; 0xe0
   15324:	adds	r6, r6, r4
   15328:	adc	r7, r7, r5
   1532c:	strd	r6, [sp, #216]	; 0xd8
   15330:	ldrd	r6, [sp, #152]	; 0x98
   15334:	eor	r6, r6, sl
   15338:	eor	r7, r7, fp
   1533c:	strd	r6, [sp, #168]	; 0xa8
   15340:	ldrd	r6, [sp, #216]	; 0xd8
   15344:	eor	r6, r6, r8
   15348:	eor	r7, r7, r9
   1534c:	mov	sl, r6
   15350:	ldrd	r8, [sp, #176]	; 0xb0
   15354:	mov	fp, r7
   15358:	ldrd	r6, [sp, #200]	; 0xc8
   1535c:	lsr	lr, fp, #16
   15360:	adds	r6, r6, r8
   15364:	adc	r7, r7, r9
   15368:	mov	r8, r1
   1536c:	mov	r9, r0
   15370:	ldrd	r0, [sp, #208]	; 0xd0
   15374:	eor	r3, r3, r7
   15378:	strd	r6, [ip]
   1537c:	eor	r2, r2, r6
   15380:	mov	r7, r3
   15384:	ldr	r3, [sp, #172]	; 0xac
   15388:	adds	r0, r0, r8
   1538c:	mov	r6, r2
   15390:	ldr	r2, [sp, #168]	; 0xa8
   15394:	str	r3, [sp, #152]	; 0x98
   15398:	adc	r1, r1, r9
   1539c:	lsr	r3, sl, #16
   153a0:	str	r2, [sp, #156]	; 0x9c
   153a4:	orr	r3, r3, fp, lsl #16
   153a8:	strd	r0, [sp, #200]	; 0xc8
   153ac:	str	r3, [sp, #160]	; 0xa0
   153b0:	ldrd	r0, [sp, #152]	; 0x98
   153b4:	ldrd	r2, [sp, #184]	; 0xb8
   153b8:	lsr	ip, r6, #24
   153bc:	adds	r2, r2, r0
   153c0:	adc	r3, r3, r1
   153c4:	ldrd	r0, [sp, #144]	; 0x90
   153c8:	strd	r2, [sp, #208]	; 0xd0
   153cc:	ldrd	r2, [sp, #200]	; 0xc8
   153d0:	eor	r0, r0, r2
   153d4:	eor	r1, r1, r3
   153d8:	orr	r3, lr, sl, lsl #16
   153dc:	strd	r0, [sp, #192]	; 0xc0
   153e0:	str	r3, [sp, #164]	; 0xa4
   153e4:	ldrd	r0, [sp, #136]	; 0x88
   153e8:	ldrd	r2, [sp, #208]	; 0xd0
   153ec:	ldrd	sl, [sp, #232]	; 0xe8
   153f0:	eor	r0, r0, r2
   153f4:	eor	r1, r1, r3
   153f8:	ldrd	r2, [sp, #128]	; 0x80
   153fc:	strd	r0, [sp, #136]	; 0x88
   15400:	ldrd	r0, [sp, #160]	; 0xa0
   15404:	adds	r2, r2, sl
   15408:	adc	r3, r3, fp
   1540c:	mov	sl, r2
   15410:	mov	fp, r3
   15414:	ldrd	r2, [sp, #240]	; 0xf0
   15418:	adds	r2, r2, r0
   1541c:	adc	r3, r3, r1
   15420:	orr	r1, ip, r7, lsl #8
   15424:	strd	r2, [sp, #232]	; 0xe8
   15428:	lsr	ip, r7, #24
   1542c:	eor	r3, r3, r5
   15430:	mov	r5, r3
   15434:	orr	r3, ip, r6, lsl #8
   15438:	str	r1, [sp, #184]	; 0xb8
   1543c:	str	r3, [sp, #188]	; 0xbc
   15440:	ldrd	r6, [sp, #184]	; 0xb8
   15444:	ldr	r3, [sp, #192]	; 0xc0
   15448:	eor	r2, r2, r4
   1544c:	adds	r6, r6, sl
   15450:	adc	r7, r7, fp
   15454:	mov	r4, r2
   15458:	ldrd	sl, [sp, #32]
   1545c:	mov	r2, r6
   15460:	lsr	ip, r3, #24
   15464:	mov	r3, r7
   15468:	ldrd	r6, [sp, #248]	; 0xf8
   1546c:	strd	r2, [sp, #240]	; 0xf0
   15470:	ldrd	r0, [sp, #136]	; 0x88
   15474:	adds	sl, sl, r6
   15478:	adc	fp, fp, r7
   1547c:	lsl	lr, r4, #1
   15480:	strd	sl, [sp, #248]	; 0xf8
   15484:	ldrd	sl, [sp, #176]	; 0xb0
   15488:	eor	fp, fp, r3
   1548c:	ldr	r3, [sp, #196]	; 0xc4
   15490:	eor	sl, sl, r2
   15494:	mov	r6, sl
   15498:	orr	r3, ip, r3, lsl #8
   1549c:	mov	r7, fp
   154a0:	str	r3, [sp, #168]	; 0xa8
   154a4:	ldrd	sl, [sp, #8]
   154a8:	ldrd	r2, [sp, #224]	; 0xe0
   154ac:	lsl	ip, r5, #1
   154b0:	adds	sl, sl, r2
   154b4:	adc	fp, fp, r3
   154b8:	orr	r3, ip, r4, lsr #31
   154bc:	str	r3, [sp, #148]	; 0x94
   154c0:	lsr	ip, r0, #24
   154c4:	orr	r3, lr, r5, lsr #31
   154c8:	mov	r4, r0
   154cc:	str	r3, [sp, #144]	; 0x90
   154d0:	orr	r3, ip, r1, lsl #8
   154d4:	lsr	r1, r1, #24
   154d8:	str	r3, [sp, #136]	; 0x88
   154dc:	orr	r3, r1, r4, lsl #8
   154e0:	ldrd	r0, [sp, #192]	; 0xc0
   154e4:	str	r3, [sp, #140]	; 0x8c
   154e8:	ldrd	r4, [sp, #248]	; 0xf8
   154ec:	lsr	r3, r1, #24
   154f0:	orr	r3, r3, r0, lsl #8
   154f4:	str	r3, [sp, #172]	; 0xac
   154f8:	ldrd	r0, [sp, #168]	; 0xa8
   154fc:	lsr	ip, r6, #16
   15500:	orr	ip, ip, r7, lsl #16
   15504:	adds	r4, r4, r0
   15508:	adc	r5, r5, r1
   1550c:	ldrd	r0, [sp, #136]	; 0x88
   15510:	strd	r4, [sp, #224]	; 0xe0
   15514:	ldrd	r2, [sp, #120]	; 0x78
   15518:	eor	r4, r4, r8
   1551c:	eor	r5, r5, r9
   15520:	ldrd	r8, [sp, #144]	; 0x90
   15524:	str	ip, [sp, #192]	; 0xc0
   15528:	lsr	ip, r7, #16
   1552c:	adds	r0, r0, sl
   15530:	orr	ip, ip, r6, lsl #16
   15534:	mov	sl, r0
   15538:	str	ip, [sp, #196]	; 0xc4
   1553c:	adc	r1, r1, fp
   15540:	lsr	ip, r4, #16
   15544:	mov	fp, r1
   15548:	adds	r2, r2, sl
   1554c:	mov	r0, r4
   15550:	orr	ip, ip, r5, lsl #16
   15554:	mov	r1, r5
   15558:	ldrd	r4, [sp, #192]	; 0xc0
   1555c:	adc	r3, r3, fp
   15560:	adds	r8, r8, r2
   15564:	adc	r9, r9, r3
   15568:	lsr	r1, r1, #16
   1556c:	mov	r2, r8
   15570:	mov	r3, r9
   15574:	eor	r4, r4, r8
   15578:	eor	r5, r5, r9
   1557c:	orr	r1, r1, r0, lsl #16
   15580:	ldrd	r8, [sp, #152]	; 0x98
   15584:	str	ip, [sp, #176]	; 0xb0
   15588:	str	r1, [sp, #180]	; 0xb4
   1558c:	ldrd	r0, [sp, #176]	; 0xb0
   15590:	mov	r6, r4
   15594:	mov	r7, r5
   15598:	ldrd	r4, [sp, #200]	; 0xc8
   1559c:	eor	r8, r8, sl
   155a0:	eor	r9, r9, fp
   155a4:	mov	sl, r8
   155a8:	mov	fp, r9
   155ac:	ldrd	r8, [sp, #168]	; 0xa8
   155b0:	adds	r0, r0, r4
   155b4:	adc	r1, r1, r5
   155b8:	str	r7, [sp, #200]	; 0xc8
   155bc:	str	r6, [sp, #204]	; 0xcc
   155c0:	eor	r8, r8, r0
   155c4:	eor	r9, r9, r1
   155c8:	mov	r4, r0
   155cc:	mov	r5, r1
   155d0:	mov	r0, r8
   155d4:	mov	r1, r9
   155d8:	ldrd	r8, [sp, #200]	; 0xc8
   155dc:	ldrd	r6, [sp, #16]
   155e0:	lsr	ip, sl, #16
   155e4:	adds	r8, r8, r4
   155e8:	adc	r9, r9, r5
   155ec:	ldrd	r4, [sp, #144]	; 0x90
   155f0:	orr	ip, ip, fp, lsl #16
   155f4:	adds	r6, r6, r2
   155f8:	str	ip, [sp, #144]	; 0x90
   155fc:	lsr	ip, fp, #16
   15600:	eor	r4, r4, r8
   15604:	eor	r5, r5, r9
   15608:	adc	r7, r7, r3
   1560c:	strd	r8, [sp, #248]	; 0xf8
   15610:	orr	r3, ip, sl, lsl #16
   15614:	ldrd	r8, [sp, #80]	; 0x50
   15618:	ldrd	sl, [sp, #216]	; 0xd8
   1561c:	str	r3, [sp, #148]	; 0x94
   15620:	lsr	ip, r5, #24
   15624:	adds	r8, r8, sl
   15628:	adc	r9, r9, fp
   1562c:	ldrd	sl, [sp, #208]	; 0xd0
   15630:	strd	r8, [sp, #168]	; 0xa8
   15634:	ldrd	r8, [sp, #144]	; 0x90
   15638:	lsr	r3, r4, #24
   1563c:	orr	r3, r3, r5, lsl #8
   15640:	adds	sl, sl, r8
   15644:	adc	fp, fp, r9
   15648:	ldrd	r8, [sp, #136]	; 0x88
   1564c:	orr	ip, ip, r4, lsl #8
   15650:	str	r3, [sp, #152]	; 0x98
   15654:	str	ip, [sp, #156]	; 0x9c
   15658:	eor	r8, r8, sl
   1565c:	eor	r9, r9, fp
   15660:	strd	sl, [sp, #216]	; 0xd8
   15664:	ldrd	sl, [sp, #152]	; 0x98
   15668:	ldrd	r4, [sp, #200]	; 0xc8
   1566c:	add	ip, sp, #264	; 0x108
   15670:	adds	sl, sl, r6
   15674:	adc	fp, fp, r7
   15678:	eor	r5, r5, fp
   1567c:	strd	sl, [ip]
   15680:	lsl	ip, r1, #1
   15684:	orr	fp, ip, r0, lsr #31
   15688:	lsl	ip, r9, #1
   1568c:	orr	r7, ip, r8, lsr #31
   15690:	eor	r4, r4, sl
   15694:	add	ip, sp, #256	; 0x100
   15698:	mov	r3, r9
   1569c:	lsl	r2, r8, #1
   156a0:	strd	r4, [sp, #136]	; 0x88
   156a4:	ldrd	r8, [ip]
   156a8:	lsl	r0, r0, #1
   156ac:	ldrd	r4, [sp, #192]	; 0xc0
   156b0:	orr	sl, r0, r1, lsr #31
   156b4:	ldrd	r0, [sp, #168]	; 0xa8
   156b8:	adds	r8, r8, r4
   156bc:	adc	r9, r9, r5
   156c0:	adds	r0, r0, sl
   156c4:	ldrd	r4, [sp, #144]	; 0x90
   156c8:	adc	r1, r1, fp
   156cc:	ldr	ip, [sp, #136]	; 0x88
   156d0:	orr	r6, r2, r3, lsr #31
   156d4:	ldr	r3, [sp, #140]	; 0x8c
   156d8:	strd	r0, [sp, #192]	; 0xc0
   156dc:	eor	r4, r4, r0
   156e0:	eor	r5, r5, r1
   156e4:	ldrd	r0, [sp, #136]	; 0x88
   156e8:	lsr	ip, ip, #16
   156ec:	orr	r3, ip, r3, lsl #16
   156f0:	str	r3, [sp, #144]	; 0x90
   156f4:	lsr	r3, r1, #16
   156f8:	orr	r3, r3, r0, lsl #16
   156fc:	str	r3, [sp, #148]	; 0x94
   15700:	ldrd	r0, [sp, #144]	; 0x90
   15704:	str	r5, [sp, #168]	; 0xa8
   15708:	str	r4, [sp, #172]	; 0xac
   1570c:	ldrd	r4, [sp, #248]	; 0xf8
   15710:	adds	r4, r4, r0
   15714:	adc	r5, r5, r1
   15718:	ldrd	r0, [sp, #240]	; 0xf0
   1571c:	strd	r4, [sp, #200]	; 0xc8
   15720:	ldrd	r4, [sp, #168]	; 0xa8
   15724:	adds	r2, r8, r4
   15728:	adc	r3, r9, r5
   1572c:	ldrd	r4, [sp, #24]
   15730:	strd	r2, [sp, #208]	; 0xd0
   15734:	ldrd	r2, [sp, #184]	; 0xb8
   15738:	adds	r4, r4, r0
   1573c:	adc	r5, r5, r1
   15740:	eor	r3, r3, r9
   15744:	eor	r2, r2, r8
   15748:	lsl	ip, r3, #1
   1574c:	adds	r0, r4, r6
   15750:	orr	ip, ip, r2, lsr #31
   15754:	lsl	r2, r2, #1
   15758:	adc	r1, r5, r7
   1575c:	orr	r3, r2, r3, lsr #31
   15760:	ldrd	r4, [sp, #176]	; 0xb0
   15764:	str	r3, [sp, #136]	; 0x88
   15768:	ldrd	r2, [sp, #232]	; 0xe8
   1576c:	eor	r5, r5, r1
   15770:	eor	r4, r4, r0
   15774:	adds	r2, r2, r5
   15778:	adc	r3, r3, r4
   1577c:	mov	r8, r5
   15780:	strd	r2, [sp, #232]	; 0xe8
   15784:	eor	r2, r2, r6
   15788:	eor	r3, r3, r7
   1578c:	mov	r5, r3
   15790:	ldrd	r6, [sp, #224]	; 0xe0
   15794:	mov	r9, r4
   15798:	mov	r4, r2
   1579c:	ldrd	r2, [sp, #96]	; 0x60
   157a0:	str	ip, [sp, #140]	; 0x8c
   157a4:	lsr	ip, r4, #24
   157a8:	adds	r2, r2, r6
   157ac:	adc	r3, r3, r7
   157b0:	ldrd	r6, [sp, #136]	; 0x88
   157b4:	orr	ip, ip, r5, lsl #8
   157b8:	str	ip, [sp, #184]	; 0xb8
   157bc:	adds	r6, r6, r2
   157c0:	adc	r7, r7, r3
   157c4:	mov	r2, r6
   157c8:	mov	r3, r7
   157cc:	ldrd	r6, [sp, #160]	; 0xa0
   157d0:	lsr	ip, r5, #24
   157d4:	orr	ip, ip, r4, lsl #8
   157d8:	eor	r6, r6, r2
   157dc:	eor	r7, r7, r3
   157e0:	str	ip, [sp, #188]	; 0xbc
   157e4:	strd	r6, [sp, #160]	; 0xa0
   157e8:	ldrd	r6, [sp, #112]	; 0x70
   157ec:	ldrd	r4, [sp, #160]	; 0xa0
   157f0:	adds	r6, r6, r0
   157f4:	adc	r7, r7, r1
   157f8:	mov	r0, r6
   157fc:	mov	r1, r7
   15800:	ldrd	r6, [sp, #184]	; 0xb8
   15804:	str	r5, [sp, #176]	; 0xb0
   15808:	str	r4, [sp, #180]	; 0xb4
   1580c:	adds	r6, r6, r0
   15810:	adc	r7, r7, r1
   15814:	mov	r0, r6
   15818:	mov	r1, r7
   1581c:	ldrd	r6, [sp, #208]	; 0xd0
   15820:	ldrd	r4, [sp, #216]	; 0xd8
   15824:	strd	r0, [sp, #240]	; 0xf0
   15828:	eor	r6, r6, sl
   1582c:	eor	r7, r7, fp
   15830:	ldrd	sl, [sp, #176]	; 0xb0
   15834:	lsr	lr, r6, #24
   15838:	adds	r4, r4, sl
   1583c:	adc	r5, r5, fp
   15840:	mov	sl, r4
   15844:	mov	fp, r5
   15848:	mov	r4, r0
   1584c:	mov	r5, r1
   15850:	ldrd	r0, [sp, #136]	; 0x88
   15854:	eor	r4, r4, r8
   15858:	eor	r5, r5, r9
   1585c:	eor	r0, r0, sl
   15860:	ldrd	r8, [sp, #104]	; 0x68
   15864:	strd	sl, [sp, #224]	; 0xe0
   15868:	eor	r1, r1, fp
   1586c:	ldrd	sl, [sp, #192]	; 0xc0
   15870:	lsr	ip, r4, #16
   15874:	orr	ip, ip, r5, lsl #16
   15878:	adds	r8, r8, sl
   1587c:	adc	r9, r9, fp
   15880:	ldrd	sl, [sp, #56]	; 0x38
   15884:	str	ip, [sp, #192]	; 0xc0
   15888:	lsr	ip, r7, #24
   1588c:	adds	sl, sl, r2
   15890:	adc	fp, fp, r3
   15894:	orr	r3, lr, r7, lsl #8
   15898:	strd	sl, [sp, #136]	; 0x88
   1589c:	str	r3, [sp, #160]	; 0xa0
   158a0:	ldrd	sl, [sp, #152]	; 0x98
   158a4:	ldrd	r2, [sp, #200]	; 0xc8
   158a8:	orr	ip, ip, r6, lsl #8
   158ac:	str	ip, [sp, #164]	; 0xa4
   158b0:	eor	sl, sl, r2
   158b4:	eor	fp, fp, r3
   158b8:	mov	r2, sl
   158bc:	mov	r3, fp
   158c0:	ldrd	sl, [sp, #160]	; 0xa0
   158c4:	lsr	ip, r0, #24
   158c8:	orr	ip, ip, r1, lsl #8
   158cc:	adds	sl, sl, r8
   158d0:	adc	fp, fp, r9
   158d4:	ldrd	r8, [sp, #168]	; 0xa8
   158d8:	str	ip, [sp, #168]	; 0xa8
   158dc:	lsr	ip, r5, #16
   158e0:	mov	r6, sl
   158e4:	mov	r7, fp
   158e8:	orr	ip, ip, r4, lsl #16
   158ec:	str	ip, [sp, #196]	; 0xc4
   158f0:	strd	r6, [sp, #152]	; 0x98
   158f4:	ldrd	r4, [sp, #232]	; 0xe8
   158f8:	eor	r6, r6, r8
   158fc:	eor	r7, r7, r9
   15900:	ldrd	r8, [sp, #192]	; 0xc0
   15904:	lsr	r1, r1, #24
   15908:	orr	r1, r1, r0, lsl #8
   1590c:	adds	r4, r4, r8
   15910:	adc	r5, r5, r9
   15914:	ldrd	r8, [sp, #184]	; 0xb8
   15918:	str	r1, [sp, #172]	; 0xac
   1591c:	strd	r4, [sp, #248]	; 0xf8
   15920:	eor	r8, r8, r4
   15924:	eor	r9, r9, r5
   15928:	mov	r4, r8
   1592c:	mov	r5, r9
   15930:	ldrd	r0, [sp, #136]	; 0x88
   15934:	ldrd	r8, [sp, #168]	; 0xa8
   15938:	lsl	lr, r3, #1
   1593c:	lsr	ip, r6, #16
   15940:	adds	r0, r0, r8
   15944:	adc	r1, r1, r9
   15948:	mov	r8, r0
   1594c:	mov	r9, r1
   15950:	ldrd	r0, [sp, #176]	; 0xb0
   15954:	strd	r8, [sp, #232]	; 0xe8
   15958:	orr	sl, ip, r7, lsl #16
   1595c:	eor	r1, r1, r9
   15960:	orr	r9, lr, r2, lsr #31
   15964:	lsl	r2, r2, #1
   15968:	orr	r3, r2, r3, lsr #31
   1596c:	str	r3, [sp, #136]	; 0x88
   15970:	add	r3, sp, #264	; 0x108
   15974:	str	r9, [sp, #140]	; 0x8c
   15978:	ldrd	r2, [r3]
   1597c:	eor	r0, r0, r8
   15980:	ldrd	r8, [sp, #88]	; 0x58
   15984:	lsl	lr, r5, #1
   15988:	lsr	ip, r7, #16
   1598c:	adds	r8, r8, r2
   15990:	adc	r9, r9, r3
   15994:	add	r3, sp, #256	; 0x100
   15998:	orr	fp, ip, r6, lsl #16
   1599c:	strd	r8, [r3]
   159a0:	ldrd	r8, [sp, #96]	; 0x60
   159a4:	ldrd	r2, [sp, #152]	; 0x98
   159a8:	ldrd	r6, [sp, #208]	; 0xd0
   159ac:	lsr	ip, r0, #16
   159b0:	adds	r2, r2, r8
   159b4:	adc	r3, r3, r9
   159b8:	mov	r9, r3
   159bc:	orr	r3, lr, r4, lsr #31
   159c0:	str	r3, [sp, #180]	; 0xb4
   159c4:	mov	r8, r2
   159c8:	ldrd	r2, [sp, #136]	; 0x88
   159cc:	adds	r2, r2, r8
   159d0:	adc	r3, r3, r9
   159d4:	mov	r8, r2
   159d8:	mov	r9, r3
   159dc:	ldrd	r2, [sp, #160]	; 0xa0
   159e0:	adds	r6, r6, sl
   159e4:	adc	r7, r7, fp
   159e8:	eor	r2, r2, r6
   159ec:	eor	r3, r3, r7
   159f0:	strd	r6, [sp, #216]	; 0xd8
   159f4:	orr	r6, ip, r1, lsl #16
   159f8:	lsl	ip, r4, #1
   159fc:	strd	r2, [sp, #184]	; 0xb8
   15a00:	orr	r3, ip, r5, lsr #31
   15a04:	str	r3, [sp, #176]	; 0xb0
   15a08:	add	r3, sp, #256	; 0x100
   15a0c:	lsr	r1, r1, #16
   15a10:	ldrd	r4, [r3]
   15a14:	ldrd	r2, [sp, #176]	; 0xb0
   15a18:	orr	r7, r1, r0, lsl #16
   15a1c:	eor	r1, r7, r9
   15a20:	adds	r4, r4, r2
   15a24:	adc	r5, r5, r3
   15a28:	eor	r0, r6, r8
   15a2c:	strd	r4, [sp, #208]	; 0xd0
   15a30:	eor	r4, r4, sl
   15a34:	eor	r5, r5, fp
   15a38:	mov	sl, r4
   15a3c:	mov	fp, r5
   15a40:	ldrd	r4, [sp, #224]	; 0xe0
   15a44:	ldr	r3, [sp, #188]	; 0xbc
   15a48:	str	fp, [sp, #160]	; 0xa0
   15a4c:	adds	r4, r4, r6
   15a50:	adc	r5, r5, r7
   15a54:	mov	r6, r4
   15a58:	mov	r7, r5
   15a5c:	mov	r4, r1
   15a60:	mov	r5, r0
   15a64:	ldrd	r0, [sp, #184]	; 0xb8
   15a68:	lsl	ip, r3, #1
   15a6c:	str	sl, [sp, #164]	; 0xa4
   15a70:	orr	r3, ip, r0, lsr #31
   15a74:	lsl	r2, r0, #1
   15a78:	ldrd	sl, [sp, #248]	; 0xf8
   15a7c:	str	r3, [sp, #156]	; 0x9c
   15a80:	orr	r3, r2, r1, lsr #31
   15a84:	str	r3, [sp, #152]	; 0x98
   15a88:	ldrd	r0, [sp, #232]	; 0xe8
   15a8c:	ldrd	r2, [sp, #8]
   15a90:	adds	sl, sl, r4
   15a94:	adc	fp, fp, r5
   15a98:	adds	r2, r2, r0
   15a9c:	adc	r3, r3, r1
   15aa0:	ldrd	r0, [sp, #136]	; 0x88
   15aa4:	strd	sl, [sp, #248]	; 0xf8
   15aa8:	strd	r2, [sp, #232]	; 0xe8
   15aac:	eor	r0, r0, sl
   15ab0:	eor	r1, r1, fp
   15ab4:	mov	sl, r0
   15ab8:	mov	fp, r1
   15abc:	ldrd	r0, [sp, #160]	; 0xa0
   15ac0:	ldrd	r2, [sp, #176]	; 0xb0
   15ac4:	lsr	lr, sl, #24
   15ac8:	adds	r0, r0, r6
   15acc:	adc	r1, r1, r7
   15ad0:	eor	r2, r2, r0
   15ad4:	eor	r3, r3, r1
   15ad8:	strd	r0, [sp, #224]	; 0xe0
   15adc:	strd	r2, [sp, #184]	; 0xb8
   15ae0:	ldrd	r0, [sp, #152]	; 0x98
   15ae4:	ldrd	r2, [sp, #232]	; 0xe8
   15ae8:	adds	r2, r2, r0
   15aec:	adc	r3, r3, r1
   15af0:	ldrd	r0, [sp, #192]	; 0xc0
   15af4:	strd	r2, [sp, #192]	; 0xc0
   15af8:	eor	r1, r1, r3
   15afc:	mov	r3, r1
   15b00:	ldr	r1, [sp, #184]	; 0xb8
   15b04:	eor	r0, r0, r2
   15b08:	mov	r2, r0
   15b0c:	lsr	ip, r1, #24
   15b10:	ldrd	r0, [sp, #72]	; 0x48
   15b14:	adds	r0, r0, r8
   15b18:	adc	r1, r1, r9
   15b1c:	ldrd	r8, [sp, #104]	; 0x68
   15b20:	strd	r0, [sp, #232]	; 0xe8
   15b24:	ldrd	r0, [sp, #208]	; 0xd0
   15b28:	adds	r8, r8, r0
   15b2c:	adc	r9, r9, r1
   15b30:	orr	r1, lr, fp, lsl #8
   15b34:	str	r1, [sp, #176]	; 0xb0
   15b38:	ldr	r1, [sp, #188]	; 0xbc
   15b3c:	orr	r1, ip, r1, lsl #8
   15b40:	str	r1, [sp, #136]	; 0x88
   15b44:	ldrd	r0, [sp, #168]	; 0xa8
   15b48:	str	r3, [sp, #168]	; 0xa8
   15b4c:	str	r2, [sp, #172]	; 0xac
   15b50:	eor	r0, r0, r6
   15b54:	eor	r1, r1, r7
   15b58:	ldrd	r2, [sp, #200]	; 0xc8
   15b5c:	mov	r7, r1
   15b60:	mov	r6, r0
   15b64:	ldrd	r0, [sp, #168]	; 0xa8
   15b68:	add	ip, sp, #264	; 0x108
   15b6c:	adds	r2, r2, r0
   15b70:	adc	r3, r3, r1
   15b74:	ldrd	r0, [sp, #152]	; 0x98
   15b78:	strd	r2, [ip]
   15b7c:	lsr	ip, fp, #24
   15b80:	eor	r0, r0, r2
   15b84:	eor	r1, r1, r3
   15b88:	orr	r3, ip, sl, lsl #8
   15b8c:	str	r3, [sp, #180]	; 0xb4
   15b90:	ldrd	sl, [sp, #176]	; 0xb0
   15b94:	strd	r0, [sp, #200]	; 0xc8
   15b98:	ldrd	r0, [sp, #232]	; 0xe8
   15b9c:	ldrd	r2, [sp, #184]	; 0xb8
   15ba0:	lsl	ip, r7, #1
   15ba4:	adds	r0, r0, sl
   15ba8:	adc	r1, r1, fp
   15bac:	mov	fp, r1
   15bb0:	lsr	r1, r3, #24
   15bb4:	orr	r3, r1, r2, lsl #8
   15bb8:	str	r3, [sp, #140]	; 0x8c
   15bbc:	mov	sl, r0
   15bc0:	mov	r1, r9
   15bc4:	mov	r0, r8
   15bc8:	ldrd	r8, [sp, #136]	; 0x88
   15bcc:	add	r3, sp, #256	; 0x100
   15bd0:	adds	r0, r0, r8
   15bd4:	mov	r8, sl
   15bd8:	adc	r1, r1, r9
   15bdc:	eor	r8, r8, r4
   15be0:	mov	r9, fp
   15be4:	eor	r9, r9, r5
   15be8:	mov	r5, r9
   15bec:	strd	sl, [r3]
   15bf0:	mov	r4, r8
   15bf4:	ldrd	r2, [sp, #192]	; 0xc0
   15bf8:	ldrd	sl, [sp, #160]	; 0xa0
   15bfc:	lsr	lr, r8, #16
   15c00:	ldrd	r8, [sp, #80]	; 0x50
   15c04:	eor	sl, sl, r0
   15c08:	eor	fp, fp, r1
   15c0c:	adds	r8, r8, r2
   15c10:	strd	r0, [sp, #232]	; 0xe8
   15c14:	adc	r9, r9, r3
   15c18:	mov	r1, fp
   15c1c:	orr	r3, lr, r5, lsl #16
   15c20:	lsr	lr, r5, #16
   15c24:	str	r3, [sp, #160]	; 0xa0
   15c28:	orr	fp, ip, r6, lsr #31
   15c2c:	orr	r3, lr, r4, lsl #16
   15c30:	lsr	ip, sl, #16
   15c34:	str	r3, [sp, #164]	; 0xa4
   15c38:	lsl	r6, r6, #1
   15c3c:	orr	r3, ip, r1, lsl #16
   15c40:	str	r3, [sp, #152]	; 0x98
   15c44:	ldrd	r4, [sp, #248]	; 0xf8
   15c48:	ldrd	r2, [sp, #160]	; 0xa0
   15c4c:	mov	r0, sl
   15c50:	orr	sl, r6, r7, lsr #31
   15c54:	ldrd	r6, [sp, #200]	; 0xc8
   15c58:	adds	r4, r4, r2
   15c5c:	adc	r5, r5, r3
   15c60:	lsr	ip, r6, #24
   15c64:	orr	r3, ip, r7, lsl #8
   15c68:	lsr	r1, r1, #16
   15c6c:	str	r3, [sp, #184]	; 0xb8
   15c70:	orr	r3, r1, r0, lsl #16
   15c74:	str	r3, [sp, #156]	; 0x9c
   15c78:	ldrd	r2, [sp, #152]	; 0x98
   15c7c:	strd	r4, [sp, #208]	; 0xd0
   15c80:	ldrd	r4, [sp, #224]	; 0xe0
   15c84:	ldrd	r0, [sp, #56]	; 0x38
   15c88:	adds	r4, r4, r2
   15c8c:	adc	r5, r5, r3
   15c90:	lsr	r3, r7, #24
   15c94:	orr	r3, r3, r6, lsl #8
   15c98:	str	r3, [sp, #188]	; 0xbc
   15c9c:	ldrd	r2, [sp, #184]	; 0xb8
   15ca0:	strd	r4, [sp, #200]	; 0xc8
   15ca4:	ldrd	r4, [sp, #240]	; 0xf0
   15ca8:	adds	r2, r2, r8
   15cac:	adc	r3, r3, r9
   15cb0:	adds	r0, r0, r4
   15cb4:	adc	r1, r1, r5
   15cb8:	ldrd	r4, [sp, #144]	; 0x90
   15cbc:	adds	r0, r0, sl
   15cc0:	ldrd	r6, [sp, #216]	; 0xd8
   15cc4:	adc	r1, r1, fp
   15cc8:	eor	r5, r5, r1
   15ccc:	adds	r6, r6, r5
   15cd0:	eor	r4, r4, r0
   15cd4:	adc	r7, r7, r4
   15cd8:	strd	r2, [sp, #192]	; 0xc0
   15cdc:	mov	r3, r4
   15ce0:	mov	r4, r6
   15ce4:	eor	r4, r4, sl
   15ce8:	mov	r2, r5
   15cec:	strd	r6, [sp, #224]	; 0xe0
   15cf0:	mov	r5, r7
   15cf4:	ldrd	r6, [sp, #24]
   15cf8:	eor	r5, r5, fp
   15cfc:	lsr	ip, r4, #24
   15d00:	orr	r8, ip, r5, lsl #8
   15d04:	adds	r6, r6, r0
   15d08:	lsr	ip, r5, #24
   15d0c:	orr	r9, ip, r4, lsl #8
   15d10:	adc	r7, r7, r1
   15d14:	adds	r4, r6, r8
   15d18:	adc	r5, r7, r9
   15d1c:	mov	sl, r4
   15d20:	ldrd	r6, [sp, #168]	; 0xa8
   15d24:	mov	fp, r5
   15d28:	ldrd	r4, [sp, #192]	; 0xc0
   15d2c:	ldrd	r0, [sp, #176]	; 0xb0
   15d30:	strd	sl, [sp, #240]	; 0xf0
   15d34:	eor	r6, r6, r4
   15d38:	eor	r7, r7, r5
   15d3c:	mov	r4, r6
   15d40:	mov	r5, r7
   15d44:	mov	r6, sl
   15d48:	mov	r7, fp
   15d4c:	ldrd	sl, [sp, #208]	; 0xd0
   15d50:	eor	r6, r6, r2
   15d54:	lsr	lr, r4, #16
   15d58:	eor	r1, r1, fp
   15d5c:	eor	r0, r0, sl
   15d60:	lsl	ip, r1, #1
   15d64:	orr	ip, ip, r0, lsr #31
   15d68:	lsl	r0, r0, #1
   15d6c:	orr	r1, r0, r1, lsr #31
   15d70:	ldrd	sl, [sp, #32]
   15d74:	str	r1, [sp, #144]	; 0x90
   15d78:	ldrd	r0, [sp, #232]	; 0xe8
   15d7c:	eor	r7, r7, r3
   15d80:	mov	r2, r6
   15d84:	adds	sl, sl, r0
   15d88:	adc	fp, fp, r1
   15d8c:	orr	r1, lr, r5, lsl #16
   15d90:	mov	r3, r7
   15d94:	str	ip, [sp, #148]	; 0x94
   15d98:	str	r1, [sp, #168]	; 0xa8
   15d9c:	lsr	ip, r6, #16
   15da0:	ldrd	r0, [sp, #200]	; 0xc8
   15da4:	ldrd	r6, [sp, #136]	; 0x88
   15da8:	eor	r6, r6, r0
   15dac:	eor	r7, r7, r1
   15db0:	ldrd	r0, [sp, #144]	; 0x90
   15db4:	adds	r0, r0, sl
   15db8:	adc	r1, r1, fp
   15dbc:	strd	r0, [sp, #216]	; 0xd8
   15dc0:	orr	r0, ip, r3, lsl #16
   15dc4:	lsr	ip, r5, #16
   15dc8:	orr	ip, ip, r4, lsl #16
   15dcc:	str	ip, [sp, #172]	; 0xac
   15dd0:	add	ip, sp, #264	; 0x108
   15dd4:	ldrd	r4, [sp, #168]	; 0xa8
   15dd8:	ldrd	sl, [ip]
   15ddc:	lsr	r3, r3, #16
   15de0:	orr	r1, r3, r2, lsl #16
   15de4:	adds	sl, sl, r4
   15de8:	adc	fp, fp, r5
   15dec:	ldrd	r4, [sp, #224]	; 0xe0
   15df0:	lsl	ip, r7, #1
   15df4:	strd	sl, [sp, #224]	; 0xe0
   15df8:	adds	r4, r4, r0
   15dfc:	adc	r5, r5, r1
   15e00:	mov	r2, r4
   15e04:	mov	r3, r5
   15e08:	ldrd	r4, [sp, #184]	; 0xb8
   15e0c:	strd	r2, [sp, #248]	; 0xf8
   15e10:	eor	r2, r2, r8
   15e14:	eor	r3, r3, r9
   15e18:	ldrd	r8, [sp, #216]	; 0xd8
   15e1c:	eor	fp, fp, r5
   15e20:	eor	sl, sl, r4
   15e24:	eor	r8, r8, r0
   15e28:	str	r8, [sp, #188]	; 0xbc
   15e2c:	orr	ip, ip, r6, lsr #31
   15e30:	add	r8, sp, #256	; 0x100
   15e34:	str	ip, [sp, #140]	; 0x8c
   15e38:	eor	r9, r9, r1
   15e3c:	lsl	ip, r6, #1
   15e40:	lsl	r1, fp, #1
   15e44:	mov	r5, fp
   15e48:	orr	ip, ip, r7, lsr #31
   15e4c:	lsl	lr, sl, #1
   15e50:	orr	r7, r1, sl, lsr #31
   15e54:	ldrd	sl, [r8]
   15e58:	ldrd	r0, [sp, #48]	; 0x30
   15e5c:	str	r9, [sp, #184]	; 0xb8
   15e60:	ldrd	r8, [sp, #128]	; 0x80
   15e64:	adds	r0, r0, sl
   15e68:	adc	r1, r1, fp
   15e6c:	ldrd	sl, [sp, #192]	; 0xc0
   15e70:	orr	r6, lr, r5, lsr #31
   15e74:	ldrd	r4, [sp, #240]	; 0xf0
   15e78:	adds	r8, r8, sl
   15e7c:	adc	r9, r9, fp
   15e80:	ldrd	sl, [sp, #16]
   15e84:	str	ip, [sp, #136]	; 0x88
   15e88:	lsl	ip, r3, #1
   15e8c:	orr	ip, ip, r2, lsr #31
   15e90:	lsl	r2, r2, #1
   15e94:	adds	sl, sl, r4
   15e98:	orr	r3, r2, r3, lsr #31
   15e9c:	adc	fp, fp, r5
   15ea0:	str	r3, [sp, #176]	; 0xb0
   15ea4:	ldrd	r4, [sp, #224]	; 0xe0
   15ea8:	ldrd	r2, [sp, #184]	; 0xb8
   15eac:	str	ip, [sp, #180]	; 0xb4
   15eb0:	add	ip, sp, #256	; 0x100
   15eb4:	adds	r4, r4, r2
   15eb8:	mov	r2, r4
   15ebc:	adc	r5, r5, r3
   15ec0:	adds	r4, r0, r6
   15ec4:	mov	r3, r5
   15ec8:	adc	r5, r1, r7
   15ecc:	ldrd	r0, [sp, #144]	; 0x90
   15ed0:	strd	r4, [sp, #224]	; 0xe0
   15ed4:	ldrd	r4, [sp, #136]	; 0x88
   15ed8:	eor	r0, r0, r2
   15edc:	eor	r1, r1, r3
   15ee0:	adds	r4, r4, sl
   15ee4:	adc	r5, r5, fp
   15ee8:	ldrd	sl, [sp, #176]	; 0xb0
   15eec:	strd	r2, [ip]
   15ef0:	mov	r2, r0
   15ef4:	adds	sl, sl, r8
   15ef8:	adc	fp, fp, r9
   15efc:	ldrd	r8, [sp, #224]	; 0xe0
   15f00:	strd	sl, [sp, #232]	; 0xe8
   15f04:	ldrd	sl, [sp, #152]	; 0x98
   15f08:	mov	r3, r1
   15f0c:	add	ip, sp, #264	; 0x108
   15f10:	eor	sl, sl, r8
   15f14:	eor	fp, fp, r9
   15f18:	strd	sl, [sp, #144]	; 0x90
   15f1c:	ldrd	r0, [sp, #168]	; 0xa8
   15f20:	strd	r4, [ip]
   15f24:	ldrd	r8, [sp, #232]	; 0xe8
   15f28:	eor	r0, r0, r4
   15f2c:	eor	r1, r1, r5
   15f30:	ldrd	r4, [sp, #144]	; 0x90
   15f34:	ldrd	sl, [sp, #160]	; 0xa0
   15f38:	str	r1, [sp, #192]	; 0xc0
   15f3c:	str	r5, [sp, #152]	; 0x98
   15f40:	str	r4, [sp, #156]	; 0x9c
   15f44:	str	r0, [sp, #196]	; 0xc4
   15f48:	ldrd	r4, [sp, #216]	; 0xd8
   15f4c:	ldrd	r0, [sp, #112]	; 0x70
   15f50:	lsr	ip, r2, #24
   15f54:	eor	sl, sl, r8
   15f58:	adds	r0, r0, r4
   15f5c:	orr	r8, ip, r3, lsl #8
   15f60:	lsr	r3, r3, #24
   15f64:	adc	r1, r1, r5
   15f68:	eor	fp, fp, r9
   15f6c:	ldrd	r4, [sp, #152]	; 0x98
   15f70:	orr	r9, r3, r2, lsl #8
   15f74:	ldrd	r2, [sp, #248]	; 0xf8
   15f78:	str	fp, [sp, #168]	; 0xa8
   15f7c:	str	sl, [sp, #172]	; 0xac
   15f80:	adds	r2, r2, r4
   15f84:	adc	r3, r3, r5
   15f88:	ldrd	r4, [sp, #168]	; 0xa8
   15f8c:	strd	r2, [sp, #216]	; 0xd8
   15f90:	ldrd	r2, [sp, #200]	; 0xc8
   15f94:	adds	r2, r2, r4
   15f98:	adc	r3, r3, r5
   15f9c:	ldrd	r4, [sp, #192]	; 0xc0
   15fa0:	strd	r2, [sp, #200]	; 0xc8
   15fa4:	ldrd	r2, [sp, #208]	; 0xd0
   15fa8:	adds	r4, r4, r2
   15fac:	adc	r5, r5, r3
   15fb0:	mov	r2, r4
   15fb4:	adds	r4, r0, r8
   15fb8:	mov	r3, r5
   15fbc:	adc	r5, r1, r9
   15fc0:	ldrd	r0, [sp, #216]	; 0xd8
   15fc4:	strd	r2, [sp, #240]	; 0xf0
   15fc8:	ldrd	r2, [sp, #200]	; 0xc8
   15fcc:	eor	r0, r0, r6
   15fd0:	eor	r1, r1, r7
   15fd4:	mov	sl, r4
   15fd8:	strd	r0, [sp, #144]	; 0x90
   15fdc:	ldrd	r0, [sp, #176]	; 0xb0
   15fe0:	ldrd	r6, [sp, #240]	; 0xf0
   15fe4:	mov	fp, r5
   15fe8:	eor	r0, r0, r2
   15fec:	eor	r1, r1, r3
   15ff0:	mov	r4, r0
   15ff4:	mov	r5, r1
   15ff8:	ldrd	r2, [sp, #184]	; 0xb8
   15ffc:	ldrd	r0, [sp, #136]	; 0x88
   16000:	ldr	ip, [sp, #144]	; 0x90
   16004:	eor	r2, r2, sl
   16008:	eor	r0, r0, r6
   1600c:	eor	r1, r1, r7
   16010:	eor	r3, r3, fp
   16014:	ldrd	r6, [sp, #40]	; 0x28
   16018:	strd	sl, [sp, #248]	; 0xf8
   1601c:	ldrd	sl, [sp, #224]	; 0xe0
   16020:	lsr	lr, ip, #24
   16024:	lsr	ip, r2, #16
   16028:	adds	r6, r6, sl
   1602c:	adc	r7, r7, fp
   16030:	add	sl, sp, #264	; 0x108
   16034:	strd	r6, [sp, #208]	; 0xd0
   16038:	ldrd	sl, [sl]
   1603c:	ldrd	r6, [sp, #64]	; 0x40
   16040:	orr	ip, ip, r3, lsl #16
   16044:	lsr	r3, r3, #16
   16048:	adds	r6, r6, sl
   1604c:	adc	r7, r7, fp
   16050:	add	sl, sp, #264	; 0x108
   16054:	orr	r3, r3, r2, lsl #16
   16058:	strd	r6, [sl]
   1605c:	ldrd	sl, [sp, #232]	; 0xe8
   16060:	ldrd	r6, [sp, #120]	; 0x78
   16064:	str	r3, [sp, #140]	; 0x8c
   16068:	str	ip, [sp, #136]	; 0x88
   1606c:	adds	r6, r6, sl
   16070:	adc	r7, r7, fp
   16074:	ldrd	sl, [sp, #136]	; 0x88
   16078:	strd	r6, [sp, #232]	; 0xe8
   1607c:	ldrd	r6, [sp, #144]	; 0x90
   16080:	lsr	ip, r4, #24
   16084:	orr	ip, ip, r5, lsl #8
   16088:	orr	r3, lr, r7, lsl #8
   1608c:	str	r3, [sp, #160]	; 0xa0
   16090:	add	r3, sp, #256	; 0x100
   16094:	lsr	lr, r0, #24
   16098:	ldrd	r2, [r3]
   1609c:	str	ip, [sp, #176]	; 0xb0
   160a0:	orr	ip, lr, r1, lsl #8
   160a4:	adds	r2, r2, sl
   160a8:	adc	r3, r3, fp
   160ac:	str	ip, [sp, #184]	; 0xb8
   160b0:	strd	r2, [sp, #224]	; 0xe0
   160b4:	eor	r3, r3, r9
   160b8:	eor	r2, r2, r8
   160bc:	lsl	ip, r3, #1
   160c0:	orr	ip, ip, r2, lsr #31
   160c4:	str	ip, [sp, #148]	; 0x94
   160c8:	lsr	ip, r7, #24
   160cc:	orr	ip, ip, r6, lsl #8
   160d0:	str	ip, [sp, #164]	; 0xa4
   160d4:	ldrd	r8, [sp, #208]	; 0xd0
   160d8:	ldrd	sl, [sp, #160]	; 0xa0
   160dc:	lsr	ip, r5, #24
   160e0:	orr	ip, ip, r4, lsl #8
   160e4:	adds	r8, r8, sl
   160e8:	adc	r9, r9, fp
   160ec:	ldrd	sl, [sp, #152]	; 0x98
   160f0:	str	ip, [sp, #180]	; 0xb4
   160f4:	ldrd	r4, [sp, #232]	; 0xe8
   160f8:	eor	sl, sl, r8
   160fc:	eor	fp, fp, r9
   16100:	mov	r6, sl
   16104:	mov	r7, fp
   16108:	ldrd	sl, [sp, #176]	; 0xb0
   1610c:	lsr	r1, r1, #24
   16110:	orr	r1, r1, r0, lsl #8
   16114:	adds	r4, r4, sl
   16118:	adc	r5, r5, fp
   1611c:	str	r1, [sp, #188]	; 0xbc
   16120:	add	r1, sp, #264	; 0x108
   16124:	strd	r4, [sp, #208]	; 0xd0
   16128:	ldrd	r4, [r1]
   1612c:	ldrd	r0, [sp, #184]	; 0xb8
   16130:	ldrd	sl, [sp, #168]	; 0xa8
   16134:	lsl	r2, r2, #1
   16138:	adds	r4, r4, r0
   1613c:	adc	r5, r5, r1
   16140:	mov	r0, r4
   16144:	mov	r1, r5
   16148:	ldrd	r4, [sp, #208]	; 0xd0
   1614c:	strd	r0, [sp, #232]	; 0xe8
   16150:	lsr	lr, r6, #16
   16154:	eor	sl, sl, r4
   16158:	eor	fp, fp, r5
   1615c:	mov	r4, sl
   16160:	mov	r5, fp
   16164:	ldrd	sl, [sp, #192]	; 0xc0
   16168:	orr	r3, r2, r3, lsr #31
   1616c:	str	r3, [sp, #144]	; 0x90
   16170:	orr	r3, lr, r7, lsl #16
   16174:	str	r3, [sp, #152]	; 0x98
   16178:	eor	sl, sl, r0
   1617c:	eor	fp, fp, r1
   16180:	lsr	r3, r7, #16
   16184:	mov	r0, sl
   16188:	lsr	ip, r4, #16
   1618c:	orr	r3, r3, r6, lsl #16
   16190:	orr	r2, ip, r5, lsl #16
   16194:	str	r3, [sp, #156]	; 0x9c
   16198:	lsr	ip, r5, #16
   1619c:	lsr	lr, sl, #16
   161a0:	lsr	r1, fp, #16
   161a4:	orr	r3, ip, r4, lsl #16
   161a8:	orr	sl, lr, fp, lsl #16
   161ac:	ldrd	r4, [sp, #152]	; 0x98
   161b0:	orr	fp, r1, r0, lsl #16
   161b4:	ldrd	r0, [sp, #216]	; 0xd8
   161b8:	ldrd	r6, [sp, #248]	; 0xf8
   161bc:	add	ip, sp, #264	; 0x108
   161c0:	adds	r0, r0, r4
   161c4:	adc	r1, r1, r5
   161c8:	ldrd	r4, [sp, #200]	; 0xc8
   161cc:	strd	r0, [sp, #192]	; 0xc0
   161d0:	adds	r4, r4, r2
   161d4:	adc	r5, r5, r3
   161d8:	strd	r4, [sp, #200]	; 0xc8
   161dc:	ldrd	r4, [sp, #240]	; 0xf0
   161e0:	adds	r4, r4, sl
   161e4:	adc	r5, r5, fp
   161e8:	mov	r0, r4
   161ec:	mov	r1, r5
   161f0:	ldrd	r4, [sp, #104]	; 0x68
   161f4:	adds	r4, r4, r6
   161f8:	adc	r5, r5, r7
   161fc:	strd	r4, [ip]
   16200:	ldrd	r4, [sp, #16]
   16204:	adds	r4, r4, r8
   16208:	adc	r5, r5, r9
   1620c:	mov	r8, r4
   16210:	mov	r9, r5
   16214:	ldrd	r4, [sp, #144]	; 0x90
   16218:	adds	r4, r4, r8
   1621c:	adc	r5, r5, r9
   16220:	mov	r8, r4
   16224:	mov	r9, r5
   16228:	strd	r8, [sp, #216]	; 0xd8
   1622c:	eor	r8, r8, r2
   16230:	eor	r9, r9, r3
   16234:	mov	r4, r8
   16238:	ldrd	r2, [sp, #200]	; 0xc8
   1623c:	mov	r5, r9
   16240:	ldrd	r8, [sp, #176]	; 0xb0
   16244:	str	r5, [sp, #168]	; 0xa8
   16248:	str	r4, [sp, #172]	; 0xac
   1624c:	eor	r8, r8, r2
   16250:	eor	r9, r9, r3
   16254:	ldrd	r4, [sp, #192]	; 0xc0
   16258:	mov	r2, r8
   1625c:	mov	r3, r9
   16260:	ldrd	r8, [sp, #160]	; 0xa0
   16264:	lsl	ip, r3, #1
   16268:	eor	r8, r8, r4
   1626c:	eor	r9, r9, r5
   16270:	mov	r6, r8
   16274:	mov	r7, r9
   16278:	ldrd	r4, [sp, #168]	; 0xa8
   1627c:	ldrd	r8, [sp, #184]	; 0xb8
   16280:	adds	r4, r4, r0
   16284:	eor	r8, r8, r0
   16288:	eor	r9, r9, r1
   1628c:	adc	r5, r5, r1
   16290:	strd	r8, [sp, #176]	; 0xb0
   16294:	mov	r8, r4
   16298:	mov	r9, r5
   1629c:	ldrd	r4, [sp, #144]	; 0x90
   162a0:	orr	r1, ip, r2, lsr #31
   162a4:	str	r1, [sp, #164]	; 0xa4
   162a8:	eor	r4, r4, r8
   162ac:	eor	r5, r5, r9
   162b0:	mov	r0, r4
   162b4:	strd	r8, [sp, #240]	; 0xf0
   162b8:	mov	r1, r5
   162bc:	ldrd	r8, [sp, #232]	; 0xe8
   162c0:	ldrd	r4, [sp, #32]
   162c4:	lsl	r2, r2, #1
   162c8:	orr	r3, r2, r3, lsr #31
   162cc:	adds	r4, r4, r8
   162d0:	str	r3, [sp, #160]	; 0xa0
   162d4:	lsl	r3, r7, #1
   162d8:	adc	r5, r5, r9
   162dc:	orr	r3, r3, r6, lsr #31
   162e0:	ldrd	r8, [sp, #160]	; 0xa0
   162e4:	str	r3, [sp, #148]	; 0x94
   162e8:	ldr	r3, [sp, #180]	; 0xb4
   162ec:	adds	r8, r8, r4
   162f0:	adc	r9, r9, r5
   162f4:	lsl	lr, r3, #1
   162f8:	ldrd	r4, [sp, #208]	; 0xd0
   162fc:	ldrd	r2, [sp, #120]	; 0x78
   16300:	lsl	ip, r6, #1
   16304:	orr	ip, ip, r7, lsr #31
   16308:	adds	r2, r2, r4
   1630c:	adc	r3, r3, r5
   16310:	ldrd	r4, [sp, #136]	; 0x88
   16314:	strd	r2, [sp, #184]	; 0xb8
   16318:	add	r3, sp, #256	; 0x100
   1631c:	eor	r4, r4, r8
   16320:	strd	r8, [r3]
   16324:	eor	r5, r5, r9
   16328:	ldrd	r8, [sp, #176]	; 0xb0
   1632c:	ldrd	r6, [sp, #216]	; 0xd8
   16330:	mov	r3, r5
   16334:	orr	r5, lr, r8, lsr #31
   16338:	lsl	lr, r8, #1
   1633c:	ldrd	r8, [sp, #128]	; 0x80
   16340:	str	ip, [sp, #144]	; 0x90
   16344:	str	r5, [sp, #140]	; 0x8c
   16348:	adds	r8, r8, r6
   1634c:	adc	r9, r9, r7
   16350:	mov	r2, r4
   16354:	mov	r6, r8
   16358:	ldrd	r4, [sp, #184]	; 0xb8
   1635c:	mov	r7, r9
   16360:	ldrd	r8, [sp, #144]	; 0x90
   16364:	lsr	ip, r0, #24
   16368:	orr	ip, ip, r1, lsl #8
   1636c:	adds	r8, r8, r4
   16370:	adc	r9, r9, r5
   16374:	ldr	r5, [sp, #180]	; 0xb4
   16378:	lsr	r1, r1, #24
   1637c:	str	ip, [sp, #176]	; 0xb0
   16380:	orr	r5, lr, r5, lsr #31
   16384:	add	ip, sp, #264	; 0x108
   16388:	orr	r1, r1, r0, lsl #8
   1638c:	str	r5, [sp, #136]	; 0x88
   16390:	str	r1, [sp, #180]	; 0xb4
   16394:	mov	r0, r8
   16398:	mov	r1, r9
   1639c:	strd	r8, [sp, #248]	; 0xf8
   163a0:	eor	r0, r0, sl
   163a4:	ldrd	r8, [ip]
   163a8:	eor	r1, r1, fp
   163ac:	ldrd	sl, [sp, #136]	; 0x88
   163b0:	str	r3, [sp, #184]	; 0xb8
   163b4:	str	r2, [sp, #188]	; 0xbc
   163b8:	adds	r8, r8, sl
   163bc:	adc	r9, r9, fp
   163c0:	ldrd	sl, [sp, #176]	; 0xb0
   163c4:	strd	r8, [sp, #216]	; 0xd8
   163c8:	add	lr, sp, #256	; 0x100
   163cc:	adds	sl, sl, r6
   163d0:	adc	fp, fp, r7
   163d4:	mov	r6, sl
   163d8:	mov	r7, fp
   163dc:	ldrd	sl, [sp, #152]	; 0x98
   163e0:	strd	r6, [sp, #232]	; 0xe8
   163e4:	eor	sl, sl, r8
   163e8:	eor	fp, fp, r9
   163ec:	mov	r2, sl
   163f0:	mov	r3, fp
   163f4:	mov	sl, r6
   163f8:	mov	fp, r7
   163fc:	ldrd	r6, [sp, #168]	; 0xa8
   16400:	mov	r8, r1
   16404:	mov	r9, r0
   16408:	eor	r6, r6, sl
   1640c:	eor	r7, r7, fp
   16410:	mov	sl, r6
   16414:	mov	fp, r7
   16418:	ldrd	r6, [sp, #192]	; 0xc0
   1641c:	strd	sl, [sp, #168]	; 0xa8
   16420:	ldrd	sl, [sp, #184]	; 0xb8
   16424:	adds	r6, r6, sl
   16428:	adc	r7, r7, fp
   1642c:	ldrd	sl, [sp, #160]	; 0xa0
   16430:	strd	r6, [ip]
   16434:	str	r3, [sp, #152]	; 0x98
   16438:	eor	sl, sl, r6
   1643c:	ldrd	r0, [sp, #224]	; 0xe0
   16440:	eor	fp, fp, r7
   16444:	mov	r6, sl
   16448:	mov	r7, fp
   1644c:	ldrd	sl, [sp, #168]	; 0xa8
   16450:	adds	r0, r0, r8
   16454:	adc	r1, r1, r9
   16458:	lsr	r3, sl, #16
   1645c:	str	r2, [sp, #156]	; 0x9c
   16460:	orr	r3, r3, fp, lsl #16
   16464:	strd	r0, [sp, #208]	; 0xd0
   16468:	str	r3, [sp, #160]	; 0xa0
   1646c:	lsr	r1, fp, #16
   16470:	ldrd	r2, [sp, #200]	; 0xc8
   16474:	ldrd	sl, [sp, #152]	; 0x98
   16478:	lsr	ip, r6, #24
   1647c:	orr	ip, ip, r7, lsl #8
   16480:	adds	r2, r2, sl
   16484:	adc	r3, r3, fp
   16488:	mov	r4, r2
   1648c:	mov	r5, r3
   16490:	ldrd	sl, [sp, #144]	; 0x90
   16494:	ldrd	r2, [sp, #208]	; 0xd0
   16498:	strd	r4, [sp, #224]	; 0xe0
   1649c:	str	ip, [sp, #192]	; 0xc0
   164a0:	eor	sl, sl, r2
   164a4:	eor	fp, fp, r3
   164a8:	ldr	r3, [sp, #168]	; 0xa8
   164ac:	strd	sl, [sp, #200]	; 0xc8
   164b0:	ldrd	sl, [sp, #136]	; 0x88
   164b4:	orr	r3, r1, r3, lsl #16
   164b8:	str	r3, [sp, #164]	; 0xa4
   164bc:	add	r3, sp, #256	; 0x100
   164c0:	eor	sl, sl, r4
   164c4:	eor	fp, fp, r5
   164c8:	ldrd	r2, [r3]
   164cc:	mov	r0, sl
   164d0:	mov	r1, fp
   164d4:	ldrd	sl, [sp, #72]	; 0x48
   164d8:	ldrd	r4, [sp, #160]	; 0xa0
   164dc:	lsr	ip, r7, #24
   164e0:	adds	sl, sl, r2
   164e4:	adc	fp, fp, r3
   164e8:	ldrd	r2, [sp, #240]	; 0xf0
   164ec:	adds	r2, r2, r4
   164f0:	adc	r3, r3, r5
   164f4:	ldrd	r4, [sp, #176]	; 0xb0
   164f8:	strd	r2, [sp, #240]	; 0xf0
   164fc:	eor	r5, r5, r3
   16500:	orr	r3, ip, r6, lsl #8
   16504:	str	r3, [sp, #196]	; 0xc4
   16508:	ldr	r3, [sp, #200]	; 0xc8
   1650c:	eor	r4, r4, r2
   16510:	ldrd	r6, [sp, #248]	; 0xf8
   16514:	lsr	ip, r3, #24
   16518:	ldrd	r2, [sp, #192]	; 0xc0
   1651c:	adds	r2, r2, sl
   16520:	adc	r3, r3, fp
   16524:	ldrd	sl, [sp, #112]	; 0x70
   16528:	strd	r2, [lr]
   1652c:	lsl	lr, r4, #1
   16530:	adds	sl, sl, r6
   16534:	adc	fp, fp, r7
   16538:	ldrd	r6, [sp, #184]	; 0xb8
   1653c:	strd	sl, [sp, #176]	; 0xb0
   16540:	eor	r7, r7, r3
   16544:	ldr	r3, [sp, #204]	; 0xcc
   16548:	eor	r6, r6, r2
   1654c:	orr	r3, ip, r3, lsl #8
   16550:	str	r3, [sp, #168]	; 0xa8
   16554:	ldrd	r2, [sp, #40]	; 0x28
   16558:	ldrd	sl, [sp, #216]	; 0xd8
   1655c:	lsl	ip, r5, #1
   16560:	adds	r2, r2, sl
   16564:	adc	r3, r3, fp
   16568:	mov	fp, r3
   1656c:	orr	r3, ip, r4, lsr #31
   16570:	str	r3, [sp, #148]	; 0x94
   16574:	lsr	ip, r0, #24
   16578:	orr	r3, lr, r5, lsr #31
   1657c:	str	r3, [sp, #144]	; 0x90
   16580:	orr	r3, ip, r1, lsl #8
   16584:	lsr	r1, r1, #24
   16588:	str	r3, [sp, #136]	; 0x88
   1658c:	orr	r3, r1, r0, lsl #8
   16590:	ldrd	r0, [sp, #200]	; 0xc8
   16594:	str	r3, [sp, #140]	; 0x8c
   16598:	ldrd	r4, [sp, #176]	; 0xb0
   1659c:	lsr	r3, r1, #24
   165a0:	orr	r3, r3, r0, lsl #8
   165a4:	str	r3, [sp, #172]	; 0xac
   165a8:	ldrd	r0, [sp, #168]	; 0xa8
   165ac:	mov	sl, r2
   165b0:	lsr	ip, r6, #16
   165b4:	adds	r4, r4, r0
   165b8:	adc	r5, r5, r1
   165bc:	ldrd	r0, [sp, #136]	; 0x88
   165c0:	strd	r4, [sp, #248]	; 0xf8
   165c4:	orr	ip, ip, r7, lsl #16
   165c8:	adds	r0, r0, sl
   165cc:	eor	r4, r4, r8
   165d0:	mov	sl, r0
   165d4:	str	ip, [sp, #184]	; 0xb8
   165d8:	mov	r0, r4
   165dc:	adc	r1, r1, fp
   165e0:	eor	r5, r5, r9
   165e4:	lsr	ip, r7, #16
   165e8:	mov	fp, r1
   165ec:	orr	ip, ip, r6, lsl #16
   165f0:	mov	r1, r5
   165f4:	str	ip, [sp, #188]	; 0xbc
   165f8:	lsr	ip, r0, #16
   165fc:	orr	ip, ip, r1, lsl #16
   16600:	lsr	r1, r1, #16
   16604:	ldrd	r2, [sp, #8]
   16608:	orr	r1, r1, r0, lsl #16
   1660c:	ldrd	r4, [sp, #144]	; 0x90
   16610:	str	ip, [sp, #176]	; 0xb0
   16614:	str	r1, [sp, #180]	; 0xb4
   16618:	ldrd	r8, [sp, #176]	; 0xb0
   1661c:	ldrd	r0, [sp, #208]	; 0xd0
   16620:	adds	r2, r2, sl
   16624:	adc	r3, r3, fp
   16628:	adds	r4, r4, r2
   1662c:	adc	r5, r5, r3
   16630:	adds	r8, r8, r0
   16634:	adc	r9, r9, r1
   16638:	ldrd	r0, [sp, #152]	; 0x98
   1663c:	mov	r2, r4
   16640:	mov	r3, r5
   16644:	ldrd	r4, [sp, #184]	; 0xb8
   16648:	eor	r0, r0, sl
   1664c:	eor	r1, r1, fp
   16650:	mov	sl, r0
   16654:	mov	fp, r1
   16658:	eor	r4, r4, r2
   1665c:	ldrd	r0, [sp, #168]	; 0xa8
   16660:	eor	r5, r5, r3
   16664:	mov	r6, r4
   16668:	mov	r7, r5
   1666c:	str	r7, [sp, #200]	; 0xc8
   16670:	str	r6, [sp, #204]	; 0xcc
   16674:	eor	r1, r1, r9
   16678:	mov	r4, r8
   1667c:	mov	r5, r9
   16680:	eor	r0, r0, r8
   16684:	ldrd	r8, [sp, #200]	; 0xc8
   16688:	ldrd	r6, [sp, #144]	; 0x90
   1668c:	lsr	ip, sl, #16
   16690:	adds	r8, r8, r4
   16694:	adc	r9, r9, r5
   16698:	eor	r6, r6, r8
   1669c:	eor	r7, r7, r9
   166a0:	mov	r4, r6
   166a4:	mov	r5, r7
   166a8:	ldrd	r6, [sp, #48]	; 0x30
   166ac:	orr	ip, ip, fp, lsl #16
   166b0:	str	ip, [sp, #144]	; 0x90
   166b4:	adds	r6, r6, r2
   166b8:	lsr	ip, fp, #16
   166bc:	adc	r7, r7, r3
   166c0:	strd	r8, [sp, #208]	; 0xd0
   166c4:	orr	r3, ip, sl, lsl #16
   166c8:	ldrd	r8, [sp, #232]	; 0xe8
   166cc:	ldrd	sl, [sp, #96]	; 0x60
   166d0:	str	r3, [sp, #148]	; 0x94
   166d4:	lsr	ip, r5, #24
   166d8:	adds	sl, sl, r8
   166dc:	adc	fp, fp, r9
   166e0:	lsr	r3, r4, #24
   166e4:	strd	sl, [sp, #168]	; 0xa8
   166e8:	ldrd	r8, [sp, #144]	; 0x90
   166ec:	ldrd	sl, [sp, #224]	; 0xe0
   166f0:	orr	r3, r3, r5, lsl #8
   166f4:	orr	ip, ip, r4, lsl #8
   166f8:	adds	sl, sl, r8
   166fc:	adc	fp, fp, r9
   16700:	ldrd	r8, [sp, #136]	; 0x88
   16704:	str	r3, [sp, #152]	; 0x98
   16708:	str	ip, [sp, #156]	; 0x9c
   1670c:	eor	r8, r8, sl
   16710:	eor	r9, r9, fp
   16714:	mov	r2, r8
   16718:	mov	r3, r9
   1671c:	ldrd	r8, [sp, #152]	; 0x98
   16720:	strd	sl, [sp, #216]	; 0xd8
   16724:	ldrd	sl, [sp, #200]	; 0xc8
   16728:	adds	r8, r8, r6
   1672c:	adc	r9, r9, r7
   16730:	eor	fp, fp, r9
   16734:	lsl	ip, r1, #1
   16738:	mov	r5, fp
   1673c:	orr	fp, ip, r0, lsr #31
   16740:	lsl	ip, r3, #1
   16744:	orr	ip, ip, r2, lsr #31
   16748:	str	ip, [sp, #140]	; 0x8c
   1674c:	add	ip, sp, #264	; 0x108
   16750:	ldrd	r6, [sp, #184]	; 0xb8
   16754:	strd	r8, [sp, #224]	; 0xe0
   16758:	eor	sl, sl, r8
   1675c:	ldrd	r8, [ip]
   16760:	mov	r4, sl
   16764:	lsl	r0, r0, #1
   16768:	orr	sl, r0, r1, lsr #31
   1676c:	lsl	r2, r2, #1
   16770:	ldrd	r0, [sp, #168]	; 0xa8
   16774:	adds	r8, r8, r6
   16778:	lsr	ip, r4, #16
   1677c:	orr	r3, r2, r3, lsr #31
   16780:	adc	r9, r9, r7
   16784:	str	r3, [sp, #136]	; 0x88
   16788:	ldrd	r6, [sp, #144]	; 0x90
   1678c:	orr	r3, ip, r5, lsl #16
   16790:	adds	r0, r0, sl
   16794:	str	r3, [sp, #144]	; 0x90
   16798:	lsr	r3, r5, #16
   1679c:	adc	r1, r1, fp
   167a0:	orr	r3, r3, r4, lsl #16
   167a4:	str	r3, [sp, #148]	; 0x94
   167a8:	eor	r6, r6, r0
   167ac:	eor	r7, r7, r1
   167b0:	str	r7, [sp, #168]	; 0xa8
   167b4:	str	r6, [sp, #172]	; 0xac
   167b8:	strd	r0, [sp, #232]	; 0xe8
   167bc:	ldrd	r6, [sp, #144]	; 0x90
   167c0:	ldrd	r0, [sp, #208]	; 0xd0
   167c4:	adds	r0, r0, r6
   167c8:	adc	r1, r1, r7
   167cc:	ldrd	r6, [sp, #168]	; 0xa8
   167d0:	strd	r0, [sp, #200]	; 0xc8
   167d4:	add	r1, sp, #256	; 0x100
   167d8:	adds	r2, r8, r6
   167dc:	adc	r3, r9, r7
   167e0:	ldrd	r0, [r1]
   167e4:	strd	r2, [sp, #208]	; 0xd0
   167e8:	ldrd	r2, [sp, #56]	; 0x38
   167ec:	ldrd	r6, [sp, #136]	; 0x88
   167f0:	adds	r2, r2, r0
   167f4:	adc	r3, r3, r1
   167f8:	adds	r4, r6, r2
   167fc:	adc	r5, r7, r3
   16800:	ldrd	r2, [sp, #192]	; 0xc0
   16804:	mov	r0, r4
   16808:	mov	r1, r5
   1680c:	eor	r3, r3, r9
   16810:	eor	r2, r2, r8
   16814:	lsl	ip, r3, #1
   16818:	orr	ip, ip, r2, lsr #31
   1681c:	lsl	r2, r2, #1
   16820:	ldrd	r4, [sp, #176]	; 0xb0
   16824:	orr	r3, r2, r3, lsr #31
   16828:	str	ip, [sp, #140]	; 0x8c
   1682c:	str	r3, [sp, #136]	; 0x88
   16830:	ldrd	r2, [sp, #240]	; 0xf0
   16834:	eor	r5, r5, r1
   16838:	eor	r4, r4, r0
   1683c:	adds	r2, r2, r5
   16840:	adc	r3, r3, r4
   16844:	mov	r8, r5
   16848:	strd	r2, [sp, #240]	; 0xf0
   1684c:	mov	r9, r4
   16850:	mov	r5, r3
   16854:	mov	r4, r2
   16858:	mov	r3, r7
   1685c:	mov	r2, r6
   16860:	eor	r2, r2, r4
   16864:	eor	r3, r3, r5
   16868:	ldrd	r6, [sp, #248]	; 0xf8
   1686c:	mov	r4, r2
   16870:	mov	r5, r3
   16874:	ldrd	r2, [sp, #64]	; 0x40
   16878:	lsr	ip, r4, #24
   1687c:	orr	ip, ip, r5, lsl #8
   16880:	adds	r2, r2, r6
   16884:	adc	r3, r3, r7
   16888:	ldrd	r6, [sp, #136]	; 0x88
   1688c:	str	ip, [sp, #184]	; 0xb8
   16890:	lsr	ip, r5, #24
   16894:	adds	r6, r6, r2
   16898:	adc	r7, r7, r3
   1689c:	mov	r2, r6
   168a0:	mov	r3, r7
   168a4:	ldrd	r6, [sp, #160]	; 0xa0
   168a8:	orr	ip, ip, r4, lsl #8
   168ac:	str	ip, [sp, #188]	; 0xbc
   168b0:	eor	r6, r6, r2
   168b4:	eor	r7, r7, r3
   168b8:	strd	r6, [sp, #160]	; 0xa0
   168bc:	ldrd	r4, [sp, #160]	; 0xa0
   168c0:	ldrd	r6, [sp, #80]	; 0x50
   168c4:	str	r5, [sp, #176]	; 0xb0
   168c8:	str	r4, [sp, #180]	; 0xb4
   168cc:	ldrd	r4, [sp, #184]	; 0xb8
   168d0:	adds	r6, r6, r0
   168d4:	adc	r7, r7, r1
   168d8:	adds	r4, r4, r6
   168dc:	adc	r5, r5, r7
   168e0:	ldrd	r6, [sp, #208]	; 0xd0
   168e4:	mov	r0, r4
   168e8:	mov	r1, r5
   168ec:	eor	r6, r6, sl
   168f0:	ldrd	r4, [sp, #216]	; 0xd8
   168f4:	eor	r7, r7, fp
   168f8:	ldrd	sl, [sp, #176]	; 0xb0
   168fc:	strd	r0, [sp, #248]	; 0xf8
   16900:	lsr	lr, r6, #24
   16904:	adds	r4, r4, sl
   16908:	adc	r5, r5, fp
   1690c:	mov	sl, r4
   16910:	mov	fp, r5
   16914:	mov	r4, r0
   16918:	mov	r5, r1
   1691c:	ldrd	r0, [sp, #136]	; 0x88
   16920:	eor	r4, r4, r8
   16924:	eor	r5, r5, r9
   16928:	strd	sl, [sp, #216]	; 0xd8
   1692c:	ldrd	r8, [sp, #24]
   16930:	eor	r0, r0, sl
   16934:	eor	r1, r1, fp
   16938:	ldrd	sl, [sp, #232]	; 0xe8
   1693c:	strd	r0, [sp, #136]	; 0x88
   16940:	ldrd	r0, [sp, #152]	; 0x98
   16944:	adds	r8, r8, sl
   16948:	adc	r9, r9, fp
   1694c:	ldrd	sl, [sp, #88]	; 0x58
   16950:	lsr	ip, r4, #16
   16954:	adds	sl, sl, r2
   16958:	adc	fp, fp, r3
   1695c:	orr	r3, lr, r7, lsl #8
   16960:	str	r3, [sp, #160]	; 0xa0
   16964:	ldrd	r2, [sp, #200]	; 0xc8
   16968:	eor	r1, r1, r3
   1696c:	mov	r3, r1
   16970:	orr	r1, ip, r5, lsl #16
   16974:	lsr	ip, r7, #24
   16978:	str	r1, [sp, #192]	; 0xc0
   1697c:	orr	r1, ip, r6, lsl #8
   16980:	str	r1, [sp, #164]	; 0xa4
   16984:	eor	r0, r0, r2
   16988:	mov	r2, r0
   1698c:	ldrd	r0, [sp, #160]	; 0xa0
   16990:	lsl	lr, r3, #1
   16994:	adds	r0, r0, r8
   16998:	adc	r1, r1, r9
   1699c:	mov	r9, r1
   169a0:	ldr	r1, [sp, #136]	; 0x88
   169a4:	mov	r8, r0
   169a8:	lsr	ip, r1, #24
   169ac:	ldrd	r0, [sp, #168]	; 0xa8
   169b0:	eor	r1, r1, r9
   169b4:	mov	r7, r1
   169b8:	ldr	r1, [sp, #140]	; 0x8c
   169bc:	eor	r0, r0, r8
   169c0:	mov	r6, r0
   169c4:	orr	r1, ip, r1, lsl #8
   169c8:	lsr	ip, r5, #16
   169cc:	str	r1, [sp, #168]	; 0xa8
   169d0:	orr	r1, ip, r4, lsl #16
   169d4:	str	r1, [sp, #196]	; 0xc4
   169d8:	ldrd	r4, [sp, #240]	; 0xf0
   169dc:	ldrd	r0, [sp, #192]	; 0xc0
   169e0:	lsr	ip, r6, #16
   169e4:	adds	r4, r4, r0
   169e8:	adc	r5, r5, r1
   169ec:	ldrd	r0, [sp, #184]	; 0xb8
   169f0:	strd	r4, [sp, #240]	; 0xf0
   169f4:	eor	r1, r1, r5
   169f8:	mov	r5, r1
   169fc:	eor	r0, r0, r4
   16a00:	ldr	r1, [sp, #140]	; 0x8c
   16a04:	mov	r4, r0
   16a08:	ldr	r0, [sp, #136]	; 0x88
   16a0c:	lsr	r1, r1, #24
   16a10:	strd	r4, [sp, #184]	; 0xb8
   16a14:	orr	r1, r1, r0, lsl #8
   16a18:	str	r1, [sp, #172]	; 0xac
   16a1c:	ldrd	r0, [sp, #168]	; 0xa8
   16a20:	adds	r0, r0, sl
   16a24:	adc	r1, r1, fp
   16a28:	mov	sl, r0
   16a2c:	mov	fp, r1
   16a30:	ldrd	r0, [sp, #176]	; 0xb0
   16a34:	strd	sl, [sp, #232]	; 0xe8
   16a38:	eor	r0, r0, sl
   16a3c:	eor	r1, r1, fp
   16a40:	orr	sl, ip, r7, lsl #16
   16a44:	strd	r0, [sp, #152]	; 0x98
   16a48:	orr	r1, lr, r2, lsr #31
   16a4c:	lsl	r2, r2, #1
   16a50:	orr	r3, r2, r3, lsr #31
   16a54:	str	r1, [sp, #140]	; 0x8c
   16a58:	str	r3, [sp, #136]	; 0x88
   16a5c:	ldrd	r0, [sp, #224]	; 0xe0
   16a60:	lsl	r3, r5, #1
   16a64:	ldrd	r4, [sp, #112]	; 0x70
   16a68:	lsr	r2, r7, #16
   16a6c:	orr	fp, r2, r6, lsl #16
   16a70:	adds	r4, r4, r0
   16a74:	adc	r5, r5, r1
   16a78:	ldrd	r0, [sp, #48]	; 0x30
   16a7c:	ldrd	r6, [sp, #136]	; 0x88
   16a80:	ldr	r2, [sp, #184]	; 0xb8
   16a84:	adds	r0, r0, r8
   16a88:	adc	r1, r1, r9
   16a8c:	adds	r6, r6, r0
   16a90:	adc	r7, r7, r1
   16a94:	mov	r8, r6
   16a98:	mov	r9, r7
   16a9c:	ldrd	r6, [sp, #208]	; 0xd0
   16aa0:	ldrd	r0, [sp, #152]	; 0x98
   16aa4:	orr	r3, r3, r2, lsr #31
   16aa8:	adds	r6, r6, sl
   16aac:	str	r3, [sp, #180]	; 0xb4
   16ab0:	ldrd	r2, [sp, #160]	; 0xa0
   16ab4:	adc	r7, r7, fp
   16ab8:	lsr	ip, r0, #16
   16abc:	strd	r6, [sp, #224]	; 0xe0
   16ac0:	eor	r2, r2, r6
   16ac4:	orr	r6, ip, r1, lsl #16
   16ac8:	ldrd	r0, [sp, #184]	; 0xb8
   16acc:	eor	r3, r3, r7
   16ad0:	lsl	ip, r0, #1
   16ad4:	orr	r1, ip, r1, lsr #31
   16ad8:	str	r1, [sp, #176]	; 0xb0
   16adc:	ldrd	r0, [sp, #176]	; 0xb0
   16ae0:	lsl	ip, r3, #1
   16ae4:	adds	r4, r4, r0
   16ae8:	adc	r5, r5, r1
   16aec:	eor	r0, r6, r8
   16af0:	strd	r4, [sp, #208]	; 0xd0
   16af4:	eor	r4, r4, sl
   16af8:	eor	r5, r5, fp
   16afc:	mov	sl, r4
   16b00:	mov	fp, r5
   16b04:	ldrd	r4, [sp, #152]	; 0x98
   16b08:	lsr	r1, r5, #16
   16b0c:	orr	r7, r1, r4, lsl #16
   16b10:	ldrd	r4, [sp, #216]	; 0xd8
   16b14:	eor	r1, r7, r9
   16b18:	str	fp, [sp, #160]	; 0xa0
   16b1c:	adds	r4, r4, r6
   16b20:	mov	r6, r4
   16b24:	adc	r5, r5, r7
   16b28:	mov	r4, r1
   16b2c:	orr	r1, ip, r2, lsr #31
   16b30:	lsl	r2, r2, #1
   16b34:	mov	r7, r5
   16b38:	str	r1, [sp, #156]	; 0x9c
   16b3c:	mov	r5, r0
   16b40:	orr	r3, r2, r3, lsr #31
   16b44:	ldrd	r0, [sp, #240]	; 0xf0
   16b48:	str	sl, [sp, #164]	; 0xa4
   16b4c:	str	r3, [sp, #152]	; 0x98
   16b50:	ldrd	sl, [sp, #232]	; 0xe8
   16b54:	ldrd	r2, [sp, #104]	; 0x68
   16b58:	adds	r0, r0, r4
   16b5c:	adc	r1, r1, r5
   16b60:	adds	r2, r2, sl
   16b64:	adc	r3, r3, fp
   16b68:	ldrd	sl, [sp, #136]	; 0x88
   16b6c:	strd	r0, [sp, #232]	; 0xe8
   16b70:	strd	r2, [sp, #240]	; 0xf0
   16b74:	eor	sl, sl, r0
   16b78:	eor	fp, fp, r1
   16b7c:	ldrd	r0, [sp, #160]	; 0xa0
   16b80:	ldrd	r2, [sp, #176]	; 0xb0
   16b84:	add	ip, sp, #256	; 0x100
   16b88:	adds	r0, r0, r6
   16b8c:	adc	r1, r1, r7
   16b90:	eor	r2, r2, r0
   16b94:	eor	r3, r3, r1
   16b98:	strd	r0, [sp, #216]	; 0xd8
   16b9c:	strd	r2, [sp, #184]	; 0xb8
   16ba0:	ldrd	r0, [sp, #152]	; 0x98
   16ba4:	ldrd	r2, [sp, #240]	; 0xf0
   16ba8:	lsr	lr, sl, #24
   16bac:	adds	r2, r2, r0
   16bb0:	adc	r3, r3, r1
   16bb4:	ldrd	r0, [sp, #192]	; 0xc0
   16bb8:	strd	r2, [ip]
   16bbc:	eor	r1, r1, r3
   16bc0:	mov	r3, r1
   16bc4:	ldr	r1, [sp, #184]	; 0xb8
   16bc8:	eor	r0, r0, r2
   16bcc:	mov	r2, r0
   16bd0:	lsr	ip, r1, #24
   16bd4:	ldrd	r0, [sp, #120]	; 0x78
   16bd8:	adds	r0, r0, r8
   16bdc:	adc	r1, r1, r9
   16be0:	ldrd	r8, [sp, #80]	; 0x50
   16be4:	strd	r0, [sp, #192]	; 0xc0
   16be8:	ldrd	r0, [sp, #208]	; 0xd0
   16bec:	adds	r8, r8, r0
   16bf0:	adc	r9, r9, r1
   16bf4:	orr	r1, lr, fp, lsl #8
   16bf8:	str	r1, [sp, #176]	; 0xb0
   16bfc:	ldr	r1, [sp, #188]	; 0xbc
   16c00:	orr	r1, ip, r1, lsl #8
   16c04:	str	r1, [sp, #136]	; 0x88
   16c08:	ldrd	r0, [sp, #168]	; 0xa8
   16c0c:	str	r3, [sp, #168]	; 0xa8
   16c10:	str	r2, [sp, #172]	; 0xac
   16c14:	eor	r0, r0, r6
   16c18:	eor	r1, r1, r7
   16c1c:	mov	r7, r1
   16c20:	ldrd	r2, [sp, #200]	; 0xc8
   16c24:	mov	r6, r0
   16c28:	ldrd	r0, [sp, #168]	; 0xa8
   16c2c:	add	ip, sp, #264	; 0x108
   16c30:	adds	r2, r2, r0
   16c34:	adc	r3, r3, r1
   16c38:	ldrd	r0, [sp, #152]	; 0x98
   16c3c:	strd	r2, [ip]
   16c40:	lsr	ip, fp, #24
   16c44:	eor	r1, r1, r3
   16c48:	mov	r3, r1
   16c4c:	orr	r1, ip, sl, lsl #8
   16c50:	str	r1, [sp, #180]	; 0xb4
   16c54:	eor	r0, r0, r2
   16c58:	ldrd	sl, [sp, #176]	; 0xb0
   16c5c:	mov	r2, r0
   16c60:	ldrd	r0, [sp, #192]	; 0xc0
   16c64:	lsl	ip, r7, #1
   16c68:	adds	r0, r0, sl
   16c6c:	adc	r1, r1, fp
   16c70:	mov	fp, r1
   16c74:	ldr	r1, [sp, #188]	; 0xbc
   16c78:	mov	sl, r0
   16c7c:	ldr	r0, [sp, #184]	; 0xb8
   16c80:	lsr	r1, r1, #24
   16c84:	strd	sl, [sp, #240]	; 0xf0
   16c88:	orr	r1, r1, r0, lsl #8
   16c8c:	str	r1, [sp, #140]	; 0x8c
   16c90:	mov	r0, r8
   16c94:	mov	r1, r9
   16c98:	ldrd	r8, [sp, #136]	; 0x88
   16c9c:	adds	r0, r0, r8
   16ca0:	adc	r1, r1, r9
   16ca4:	mov	r8, sl
   16ca8:	mov	r9, fp
   16cac:	eor	r8, r8, r4
   16cb0:	eor	r9, r9, r5
   16cb4:	ldrd	sl, [sp, #160]	; 0xa0
   16cb8:	mov	r4, r8
   16cbc:	mov	r5, r9
   16cc0:	eor	sl, sl, r0
   16cc4:	strd	r4, [sp, #152]	; 0x98
   16cc8:	add	r4, sp, #256	; 0x100
   16ccc:	eor	fp, fp, r1
   16cd0:	ldrd	r4, [r4]
   16cd4:	strd	r0, [sp, #192]	; 0xc0
   16cd8:	lsr	lr, r8, #16
   16cdc:	mov	r1, fp
   16ce0:	ldrd	r8, [sp, #16]
   16ce4:	orr	fp, ip, r6, lsr #31
   16ce8:	lsl	r6, r6, #1
   16cec:	mov	r0, sl
   16cf0:	lsr	ip, sl, #16
   16cf4:	orr	sl, r6, r7, lsr #31
   16cf8:	ldrd	r6, [sp, #152]	; 0x98
   16cfc:	adds	r8, r8, r4
   16d00:	adc	r9, r9, r5
   16d04:	orr	r5, lr, r7, lsl #16
   16d08:	lsr	lr, r7, #16
   16d0c:	str	r5, [sp, #160]	; 0xa0
   16d10:	orr	r5, lr, r6, lsl #16
   16d14:	str	r5, [sp, #164]	; 0xa4
   16d18:	ldrd	r6, [sp, #160]	; 0xa0
   16d1c:	ldrd	r4, [sp, #232]	; 0xe8
   16d20:	orr	ip, ip, r1, lsl #16
   16d24:	lsr	r1, r1, #16
   16d28:	adds	r4, r4, r6
   16d2c:	adc	r5, r5, r7
   16d30:	orr	r1, r1, r0, lsl #16
   16d34:	str	ip, [sp, #152]	; 0x98
   16d38:	str	r1, [sp, #156]	; 0x9c
   16d3c:	ldrd	r0, [sp, #152]	; 0x98
   16d40:	strd	r4, [sp, #208]	; 0xd0
   16d44:	ldrd	r4, [sp, #216]	; 0xd8
   16d48:	lsr	ip, r2, #24
   16d4c:	orr	ip, ip, r3, lsl #8
   16d50:	adds	r4, r4, r0
   16d54:	lsr	r3, r3, #24
   16d58:	adc	r5, r5, r1
   16d5c:	orr	r3, r3, r2, lsl #8
   16d60:	str	ip, [sp, #184]	; 0xb8
   16d64:	str	r3, [sp, #188]	; 0xbc
   16d68:	strd	r4, [sp, #200]	; 0xc8
   16d6c:	ldrd	r4, [sp, #184]	; 0xb8
   16d70:	ldrd	r0, [sp, #24]
   16d74:	adds	r4, r4, r8
   16d78:	adc	r5, r5, r9
   16d7c:	strd	r4, [sp, #216]	; 0xd8
   16d80:	ldrd	r4, [sp, #248]	; 0xf8
   16d84:	adds	r0, r0, r4
   16d88:	adc	r1, r1, r5
   16d8c:	ldrd	r4, [sp, #144]	; 0x90
   16d90:	adds	r0, r0, sl
   16d94:	ldrd	r6, [sp, #224]	; 0xe0
   16d98:	adc	r1, r1, fp
   16d9c:	eor	r5, r5, r1
   16da0:	adds	r6, r6, r5
   16da4:	eor	r4, r4, r0
   16da8:	adc	r7, r7, r4
   16dac:	mov	r3, r4
   16db0:	mov	r4, r6
   16db4:	strd	r6, [sp, #232]	; 0xe8
   16db8:	eor	r4, r4, sl
   16dbc:	mov	r2, r5
   16dc0:	mov	r5, r7
   16dc4:	ldrd	r6, [sp, #64]	; 0x40
   16dc8:	eor	r5, r5, fp
   16dcc:	lsr	ip, r4, #24
   16dd0:	orr	r8, ip, r5, lsl #8
   16dd4:	adds	r6, r6, r0
   16dd8:	lsr	ip, r5, #24
   16ddc:	orr	r9, ip, r4, lsl #8
   16de0:	adc	r7, r7, r1
   16de4:	adds	r6, r6, r8
   16de8:	adc	r7, r7, r9
   16dec:	ldrd	sl, [sp, #168]	; 0xa8
   16df0:	mov	r0, r6
   16df4:	mov	r1, r7
   16df8:	ldrd	r6, [sp, #216]	; 0xd8
   16dfc:	strd	r0, [sp, #248]	; 0xf8
   16e00:	eor	sl, sl, r6
   16e04:	eor	fp, fp, r7
   16e08:	mov	r4, sl
   16e0c:	mov	r5, fp
   16e10:	mov	sl, r0
   16e14:	mov	fp, r1
   16e18:	eor	sl, sl, r2
   16e1c:	eor	fp, fp, r3
   16e20:	ldrd	r6, [sp, #176]	; 0xb0
   16e24:	mov	r2, sl
   16e28:	mov	r3, fp
   16e2c:	ldrd	sl, [sp, #208]	; 0xd0
   16e30:	lsr	lr, r4, #16
   16e34:	eor	r6, r6, sl
   16e38:	eor	r7, r7, fp
   16e3c:	lsl	r0, r6, #1
   16e40:	orr	r1, r0, r7, lsr #31
   16e44:	str	r1, [sp, #144]	; 0x90
   16e48:	ldrd	sl, [sp, #40]	; 0x28
   16e4c:	ldrd	r0, [sp, #192]	; 0xc0
   16e50:	lsl	ip, r7, #1
   16e54:	orr	ip, ip, r6, lsr #31
   16e58:	adds	sl, sl, r0
   16e5c:	adc	fp, fp, r1
   16e60:	orr	r1, lr, r5, lsl #16
   16e64:	ldrd	r6, [sp, #136]	; 0x88
   16e68:	str	r1, [sp, #168]	; 0xa8
   16e6c:	ldrd	r0, [sp, #200]	; 0xc8
   16e70:	str	ip, [sp, #148]	; 0x94
   16e74:	lsr	ip, r2, #16
   16e78:	eor	r6, r6, r0
   16e7c:	eor	r7, r7, r1
   16e80:	ldrd	r0, [sp, #144]	; 0x90
   16e84:	adds	r0, r0, sl
   16e88:	adc	r1, r1, fp
   16e8c:	strd	r0, [sp, #224]	; 0xe0
   16e90:	orr	r0, ip, r3, lsl #16
   16e94:	lsr	ip, r5, #16
   16e98:	orr	ip, ip, r4, lsl #16
   16e9c:	str	ip, [sp, #172]	; 0xac
   16ea0:	add	ip, sp, #264	; 0x108
   16ea4:	ldrd	r4, [sp, #168]	; 0xa8
   16ea8:	ldrd	sl, [ip]
   16eac:	lsr	r3, r3, #16
   16eb0:	orr	r1, r3, r2, lsl #16
   16eb4:	adds	sl, sl, r4
   16eb8:	adc	fp, fp, r5
   16ebc:	ldrd	r4, [sp, #232]	; 0xe8
   16ec0:	lsl	ip, r7, #1
   16ec4:	orr	ip, ip, r6, lsr #31
   16ec8:	adds	r4, r4, r0
   16ecc:	adc	r5, r5, r1
   16ed0:	mov	r2, r4
   16ed4:	mov	r3, r5
   16ed8:	ldrd	r4, [sp, #184]	; 0xb8
   16edc:	strd	r2, [sp, #232]	; 0xe8
   16ee0:	eor	r2, r2, r8
   16ee4:	eor	r3, r3, r9
   16ee8:	ldrd	r8, [sp, #224]	; 0xe0
   16eec:	str	ip, [sp, #140]	; 0x8c
   16ef0:	lsl	ip, r6, #1
   16ef4:	eor	r8, r8, r0
   16ef8:	eor	r9, r9, r1
   16efc:	str	r9, [sp, #192]	; 0xc0
   16f00:	str	r8, [sp, #196]	; 0xc4
   16f04:	orr	ip, ip, r7, lsr #31
   16f08:	ldrd	r8, [sp, #240]	; 0xf0
   16f0c:	ldrd	r6, [sp, #128]	; 0x80
   16f10:	eor	r5, r5, fp
   16f14:	eor	r4, r4, sl
   16f18:	adds	r6, r6, r8
   16f1c:	lsl	r1, r5, #1
   16f20:	adc	r7, r7, r9
   16f24:	orr	r1, r1, r4, lsr #31
   16f28:	str	ip, [sp, #136]	; 0x88
   16f2c:	str	r1, [sp, #180]	; 0xb4
   16f30:	mov	r0, r6
   16f34:	mov	r1, r7
   16f38:	ldrd	r6, [sp, #56]	; 0x38
   16f3c:	ldrd	r8, [sp, #216]	; 0xd8
   16f40:	lsl	lr, r4, #1
   16f44:	orr	lr, lr, r5, lsr #31
   16f48:	adds	r6, r6, r8
   16f4c:	adc	r7, r7, r9
   16f50:	ldrd	r4, [sp, #248]	; 0xf8
   16f54:	mov	r8, r6
   16f58:	mov	r9, r7
   16f5c:	ldrd	r6, [sp, #88]	; 0x58
   16f60:	lsl	ip, r3, #1
   16f64:	orr	ip, ip, r2, lsr #31
   16f68:	adds	r6, r6, r4
   16f6c:	lsl	r2, r2, #1
   16f70:	str	lr, [sp, #176]	; 0xb0
   16f74:	adc	r7, r7, r5
   16f78:	orr	r3, r2, r3, lsr #31
   16f7c:	ldrd	r4, [sp, #192]	; 0xc0
   16f80:	str	r3, [sp, #184]	; 0xb8
   16f84:	ldrd	r2, [sp, #176]	; 0xb0
   16f88:	adds	r4, r4, sl
   16f8c:	adc	r5, r5, fp
   16f90:	adds	r2, r2, r0
   16f94:	adc	r3, r3, r1
   16f98:	mov	sl, r2
   16f9c:	mov	fp, r3
   16fa0:	str	ip, [sp, #188]	; 0xbc
   16fa4:	strd	sl, [sp, #248]	; 0xf8
   16fa8:	ldrd	sl, [sp, #136]	; 0x88
   16fac:	ldrd	r0, [sp, #184]	; 0xb8
   16fb0:	strd	r4, [sp, #240]	; 0xf0
   16fb4:	adds	sl, sl, r6
   16fb8:	adc	fp, fp, r7
   16fbc:	adds	r0, r0, r8
   16fc0:	adc	r1, r1, r9
   16fc4:	mov	r6, r0
   16fc8:	mov	r7, r1
   16fcc:	ldrd	r0, [sp, #144]	; 0x90
   16fd0:	ldrd	r8, [sp, #248]	; 0xf8
   16fd4:	strd	r6, [sp, #216]	; 0xd8
   16fd8:	eor	r0, r0, r4
   16fdc:	eor	r1, r1, r5
   16fe0:	mov	r2, r0
   16fe4:	mov	r3, r1
   16fe8:	ldrd	r0, [sp, #152]	; 0x98
   16fec:	ldrd	r4, [sp, #168]	; 0xa8
   16ff0:	lsr	ip, r2, #24
   16ff4:	eor	r1, r1, r9
   16ff8:	mov	r7, r1
   16ffc:	add	r1, sp, #256	; 0x100
   17000:	eor	r0, r0, r8
   17004:	eor	r4, r4, sl
   17008:	eor	r5, r5, fp
   1700c:	mov	r6, r0
   17010:	strd	sl, [r1]
   17014:	mov	r0, r4
   17018:	ldrd	sl, [sp, #160]	; 0xa0
   1701c:	mov	r1, r5
   17020:	ldrd	r4, [sp, #216]	; 0xd8
   17024:	orr	ip, ip, r3, lsl #8
   17028:	lsr	r3, r3, #24
   1702c:	eor	sl, sl, r4
   17030:	eor	fp, fp, r5
   17034:	str	fp, [sp, #168]	; 0xa8
   17038:	ldrd	r4, [sp, #224]	; 0xe0
   1703c:	mov	fp, r0
   17040:	str	sl, [sp, #172]	; 0xac
   17044:	mov	sl, r1
   17048:	ldrd	r0, [sp, #8]
   1704c:	str	r7, [sp, #152]	; 0x98
   17050:	str	r6, [sp, #156]	; 0x9c
   17054:	adds	r0, r0, r4
   17058:	orr	r3, r3, r2, lsl #8
   1705c:	adc	r1, r1, r5
   17060:	str	r3, [sp, #148]	; 0x94
   17064:	ldrd	r4, [sp, #152]	; 0x98
   17068:	ldrd	r2, [sp, #232]	; 0xe8
   1706c:	str	ip, [sp, #144]	; 0x90
   17070:	adds	r2, r2, r4
   17074:	adc	r3, r3, r5
   17078:	ldrd	r4, [sp, #200]	; 0xc8
   1707c:	ldrd	r6, [sp, #168]	; 0xa8
   17080:	strd	r2, [sp, #232]	; 0xe8
   17084:	adds	r4, r4, r6
   17088:	adc	r5, r5, r7
   1708c:	ldrd	r6, [sp, #208]	; 0xd0
   17090:	strd	r4, [sp, #248]	; 0xf8
   17094:	adds	r6, r6, sl
   17098:	adc	r7, r7, fp
   1709c:	strd	r6, [sp, #224]	; 0xe0
   170a0:	ldrd	r6, [sp, #144]	; 0x90
   170a4:	adds	r6, r6, r0
   170a8:	adc	r7, r7, r1
   170ac:	ldrd	r0, [sp, #136]	; 0x88
   170b0:	strd	r6, [sp, #208]	; 0xd0
   170b4:	ldrd	r6, [sp, #176]	; 0xb0
   170b8:	eor	r6, r6, r2
   170bc:	eor	r7, r7, r3
   170c0:	ldrd	r2, [sp, #184]	; 0xb8
   170c4:	lsr	lr, r6, #24
   170c8:	eor	r2, r2, r4
   170cc:	eor	r3, r3, r5
   170d0:	mov	r4, r2
   170d4:	mov	r5, r3
   170d8:	ldrd	r2, [sp, #192]	; 0xc0
   170dc:	strd	r4, [sp, #200]	; 0xc8
   170e0:	ldrd	r4, [sp, #224]	; 0xe0
   170e4:	eor	r0, r0, r4
   170e8:	eor	r1, r1, r5
   170ec:	ldrd	r4, [sp, #208]	; 0xd0
   170f0:	eor	r2, r2, r4
   170f4:	eor	r3, r3, r5
   170f8:	ldrd	r4, [sp, #32]
   170fc:	strd	r2, [sp, #160]	; 0xa0
   17100:	add	r3, sp, #264	; 0x108
   17104:	adds	r4, r4, r8
   17108:	adc	r5, r5, r9
   1710c:	lsr	ip, r2, #16
   17110:	strd	r4, [r3]
   17114:	add	r3, sp, #256	; 0x100
   17118:	ldrd	r4, [sp, #72]	; 0x48
   1711c:	ldrd	r2, [r3]
   17120:	ldrd	r8, [sp, #216]	; 0xd8
   17124:	adds	r4, r4, r2
   17128:	adc	r5, r5, r3
   1712c:	add	r3, sp, #256	; 0x100
   17130:	strd	r4, [r3]
   17134:	ldrd	r4, [sp, #96]	; 0x60
   17138:	adds	r4, r4, r8
   1713c:	adc	r5, r5, r9
   17140:	ldrd	r8, [sp, #160]	; 0xa0
   17144:	orr	r3, ip, r9, lsl #16
   17148:	str	r3, [sp, #136]	; 0x88
   1714c:	ldr	r3, [sp, #200]	; 0xc8
   17150:	lsr	ip, r3, #24
   17154:	lsr	r3, r9, #16
   17158:	orr	r3, r3, r8, lsl #16
   1715c:	str	r3, [sp, #140]	; 0x8c
   17160:	orr	r3, lr, r7, lsl #8
   17164:	ldrd	r8, [sp, #136]	; 0x88
   17168:	str	r3, [sp, #160]	; 0xa0
   1716c:	ldrd	r2, [sp, #240]	; 0xf0
   17170:	lsr	lr, r0, #24
   17174:	adds	r2, r2, r8
   17178:	adc	r3, r3, r9
   1717c:	ldrd	r8, [sp, #144]	; 0x90
   17180:	strd	r2, [sp, #216]	; 0xd8
   17184:	eor	r9, r9, r3
   17188:	mov	r3, r9
   1718c:	ldr	r9, [sp, #204]	; 0xcc
   17190:	eor	r8, r8, r2
   17194:	mov	r2, r8
   17198:	orr	ip, ip, r9, lsl #8
   1719c:	str	ip, [sp, #176]	; 0xb0
   171a0:	orr	ip, lr, r1, lsl #8
   171a4:	str	ip, [sp, #184]	; 0xb8
   171a8:	lsl	ip, r3, #1
   171ac:	orr	ip, ip, r8, lsr #31
   171b0:	str	ip, [sp, #196]	; 0xc4
   171b4:	lsr	ip, r7, #24
   171b8:	orr	ip, ip, r6, lsl #8
   171bc:	str	ip, [sp, #164]	; 0xa4
   171c0:	add	ip, sp, #264	; 0x108
   171c4:	ldrd	r6, [sp, #160]	; 0xa0
   171c8:	ldrd	r8, [ip]
   171cc:	lsr	r1, r1, #24
   171d0:	orr	r1, r1, r0, lsl #8
   171d4:	adds	r8, r8, r6
   171d8:	adc	r9, r9, r7
   171dc:	ldrd	r6, [sp, #152]	; 0x98
   171e0:	strd	r8, [sp, #152]	; 0x98
   171e4:	str	r1, [sp, #188]	; 0xbc
   171e8:	eor	r8, r8, r6
   171ec:	eor	r9, r9, r7
   171f0:	mov	r6, r8
   171f4:	mov	r7, r9
   171f8:	ldrd	r8, [sp, #200]	; 0xc8
   171fc:	add	r1, sp, #256	; 0x100
   17200:	lsl	r2, r2, #1
   17204:	lsr	ip, r9, #24
   17208:	orr	ip, ip, r8, lsl #8
   1720c:	str	ip, [sp, #180]	; 0xb4
   17210:	ldrd	r8, [sp, #176]	; 0xb0
   17214:	ldrd	r0, [r1]
   17218:	lsr	lr, r6, #16
   1721c:	adds	r4, r4, r8
   17220:	adc	r5, r5, r9
   17224:	ldrd	r8, [sp, #184]	; 0xb8
   17228:	strd	r4, [sp, #240]	; 0xf0
   1722c:	orr	r3, r2, r3, lsr #31
   17230:	adds	r0, r0, r8
   17234:	adc	r1, r1, r9
   17238:	mov	r8, r0
   1723c:	mov	r9, r1
   17240:	ldrd	r0, [sp, #168]	; 0xa8
   17244:	str	r3, [sp, #192]	; 0xc0
   17248:	orr	r3, lr, r7, lsl #16
   1724c:	eor	r1, r1, r5
   17250:	mov	r5, r1
   17254:	eor	r0, r0, r4
   17258:	add	r1, sp, #256	; 0x100
   1725c:	mov	r4, r0
   17260:	mov	r0, r8
   17264:	eor	r0, r0, sl
   17268:	strd	r8, [r1]
   1726c:	mov	r1, r9
   17270:	str	r3, [sp, #144]	; 0x90
   17274:	eor	r1, r1, fp
   17278:	lsr	ip, r4, #16
   1727c:	lsr	r3, r7, #16
   17280:	orr	r2, ip, r5, lsl #16
   17284:	orr	r3, r3, r6, lsl #16
   17288:	lsr	lr, r0, #16
   1728c:	lsr	ip, r5, #16
   17290:	str	r3, [sp, #148]	; 0x94
   17294:	orr	r3, ip, r4, lsl #16
   17298:	orr	ip, lr, r1, lsl #16
   1729c:	lsr	r1, r1, #16
   172a0:	orr	r1, r1, r0, lsl #16
   172a4:	ldrd	sl, [sp, #144]	; 0x90
   172a8:	str	r1, [sp, #172]	; 0xac
   172ac:	ldrd	r0, [sp, #232]	; 0xe8
   172b0:	str	ip, [sp, #168]	; 0xa8
   172b4:	ldrd	r4, [sp, #208]	; 0xd0
   172b8:	adds	r0, r0, sl
   172bc:	adc	r1, r1, fp
   172c0:	ldrd	sl, [sp, #248]	; 0xf8
   172c4:	mov	r6, r0
   172c8:	mov	r7, r1
   172cc:	adds	sl, sl, r2
   172d0:	adc	fp, fp, r3
   172d4:	ldrd	r0, [sp, #168]	; 0xa8
   172d8:	strd	sl, [sp, #200]	; 0xc8
   172dc:	ldrd	sl, [sp, #224]	; 0xe0
   172e0:	ldrd	r8, [sp, #152]	; 0x98
   172e4:	adds	r0, r0, sl
   172e8:	adc	r1, r1, fp
   172ec:	ldrd	sl, [sp, #96]	; 0x60
   172f0:	adds	sl, sl, r4
   172f4:	adc	fp, fp, r5
   172f8:	strd	sl, [sp, #232]	; 0xe8
   172fc:	ldrd	sl, [sp, #120]	; 0x78
   17300:	adds	r8, r8, sl
   17304:	adc	r9, r9, fp
   17308:	ldrd	sl, [sp, #192]	; 0xc0
   1730c:	strd	r6, [sp, #208]	; 0xd0
   17310:	adds	r4, sl, r8
   17314:	adc	r5, fp, r9
   17318:	mov	r8, r4
   1731c:	mov	r9, r5
   17320:	strd	r8, [sp, #192]	; 0xc0
   17324:	eor	r8, r8, r2
   17328:	eor	r9, r9, r3
   1732c:	mov	r4, r8
   17330:	ldrd	r2, [sp, #176]	; 0xb0
   17334:	mov	r5, r9
   17338:	ldrd	r8, [sp, #200]	; 0xc8
   1733c:	str	r5, [sp, #176]	; 0xb0
   17340:	str	r4, [sp, #180]	; 0xb4
   17344:	eor	r2, r2, r8
   17348:	eor	r3, r3, r9
   1734c:	ldrd	r8, [sp, #160]	; 0xa0
   17350:	ldrd	r4, [sp, #184]	; 0xb8
   17354:	lsl	ip, r3, #1
   17358:	eor	r8, r8, r6
   1735c:	eor	r9, r9, r7
   17360:	mov	r6, r8
   17364:	mov	r7, r9
   17368:	ldrd	r8, [sp, #176]	; 0xb0
   1736c:	eor	r5, r5, r1
   17370:	eor	r4, r4, r0
   17374:	adds	r8, r8, r0
   17378:	adc	r9, r9, r1
   1737c:	orr	r1, ip, r2, lsr #31
   17380:	add	ip, sp, #256	; 0x100
   17384:	str	r1, [sp, #164]	; 0xa4
   17388:	mov	r0, sl
   1738c:	mov	r1, fp
   17390:	eor	r0, r0, r8
   17394:	ldrd	sl, [sp, #8]
   17398:	strd	r8, [sp, #248]	; 0xf8
   1739c:	eor	r1, r1, r9
   173a0:	ldrd	r8, [ip]
   173a4:	lsl	r2, r2, #1
   173a8:	orr	r3, r2, r3, lsr #31
   173ac:	adds	sl, sl, r8
   173b0:	str	r3, [sp, #160]	; 0xa0
   173b4:	adc	fp, fp, r9
   173b8:	ldrd	r8, [sp, #160]	; 0xa0
   173bc:	lsl	r3, r7, #1
   173c0:	orr	r3, r3, r6, lsr #31
   173c4:	adds	r8, r8, sl
   173c8:	adc	r9, r9, fp
   173cc:	str	r3, [sp, #156]	; 0x9c
   173d0:	strd	r8, [sp, #224]	; 0xe0
   173d4:	ldrd	r2, [sp, #240]	; 0xf0
   173d8:	ldrd	r8, [sp, #80]	; 0x50
   173dc:	lsl	lr, r5, #1
   173e0:	lsl	ip, r6, #1
   173e4:	adds	r8, r8, r2
   173e8:	adc	r9, r9, r3
   173ec:	mov	sl, r8
   173f0:	ldrd	r2, [sp, #224]	; 0xe0
   173f4:	mov	fp, r9
   173f8:	ldrd	r8, [sp, #136]	; 0x88
   173fc:	orr	ip, ip, r7, lsr #31
   17400:	orr	r7, lr, r4, lsr #31
   17404:	eor	r8, r8, r2
   17408:	eor	r9, r9, r3
   1740c:	mov	r2, r8
   17410:	mov	r3, r9
   17414:	str	r7, [sp, #140]	; 0x8c
   17418:	ldrd	r8, [sp, #64]	; 0x40
   1741c:	ldrd	r6, [sp, #192]	; 0xc0
   17420:	str	ip, [sp, #152]	; 0x98
   17424:	lsr	ip, r0, #24
   17428:	adds	r8, r8, r6
   1742c:	adc	r9, r9, r7
   17430:	ldrd	r6, [sp, #152]	; 0x98
   17434:	orr	ip, ip, r1, lsl #8
   17438:	lsr	r1, r1, #24
   1743c:	adds	r6, r6, sl
   17440:	orr	r1, r1, r0, lsl #8
   17444:	adc	r7, r7, fp
   17448:	lsl	lr, r4, #1
   1744c:	str	r1, [sp, #188]	; 0xbc
   17450:	add	r1, sp, #256	; 0x100
   17454:	orr	r5, lr, r5, lsr #31
   17458:	strd	r8, [sp, #240]	; 0xf0
   1745c:	str	r5, [sp, #136]	; 0x88
   17460:	str	ip, [sp, #184]	; 0xb8
   17464:	str	r3, [sp, #192]	; 0xc0
   17468:	strd	r6, [r1]
   1746c:	ldrd	r4, [sp, #168]	; 0xa8
   17470:	ldrd	sl, [sp, #232]	; 0xe8
   17474:	ldrd	r0, [sp, #184]	; 0xb8
   17478:	eor	r4, r4, r6
   1747c:	eor	r5, r5, r7
   17480:	ldrd	r6, [sp, #136]	; 0x88
   17484:	str	r2, [sp, #196]	; 0xc4
   17488:	add	ip, sp, #264	; 0x108
   1748c:	adds	sl, sl, r6
   17490:	adc	fp, fp, r7
   17494:	ldrd	r6, [sp, #240]	; 0xf0
   17498:	strd	sl, [sp, #232]	; 0xe8
   1749c:	mov	r8, r5
   174a0:	adds	r6, r6, r0
   174a4:	adc	r7, r7, r1
   174a8:	ldrd	r0, [sp, #144]	; 0x90
   174ac:	strd	r6, [sp, #240]	; 0xf0
   174b0:	mov	r9, r4
   174b4:	eor	r0, r0, sl
   174b8:	eor	r1, r1, fp
   174bc:	mov	r2, r0
   174c0:	mov	r3, r1
   174c4:	mov	r0, r6
   174c8:	mov	r1, r7
   174cc:	ldrd	r6, [sp, #176]	; 0xb0
   174d0:	str	r3, [sp, #144]	; 0x90
   174d4:	str	r2, [sp, #148]	; 0x94
   174d8:	eor	r6, r6, r0
   174dc:	eor	r7, r7, r1
   174e0:	mov	sl, r6
   174e4:	ldrd	r0, [sp, #192]	; 0xc0
   174e8:	mov	fp, r7
   174ec:	ldrd	r6, [sp, #208]	; 0xd0
   174f0:	lsr	r3, sl, #16
   174f4:	orr	r3, r3, fp, lsl #16
   174f8:	adds	r6, r6, r0
   174fc:	adc	r7, r7, r1
   17500:	ldrd	r0, [sp, #160]	; 0xa0
   17504:	strd	r6, [ip]
   17508:	str	r3, [sp, #160]	; 0xa0
   1750c:	eor	r0, r0, r6
   17510:	eor	r1, r1, r7
   17514:	mov	r6, r0
   17518:	mov	r7, r1
   1751c:	ldrd	r0, [sp, #216]	; 0xd8
   17520:	ldrd	r2, [sp, #200]	; 0xc8
   17524:	lsr	ip, r6, #24
   17528:	adds	r0, r0, r5
   1752c:	adc	r1, r1, r4
   17530:	lsr	r5, fp, #16
   17534:	strd	r0, [sp, #216]	; 0xd8
   17538:	ldrd	r0, [sp, #144]	; 0x90
   1753c:	orr	ip, ip, r7, lsl #8
   17540:	add	lr, sp, #256	; 0x100
   17544:	adds	r2, r2, r0
   17548:	adc	r3, r3, r1
   1754c:	ldrd	r0, [sp, #152]	; 0x98
   17550:	strd	r2, [sp, #208]	; 0xd0
   17554:	ldrd	r2, [sp, #216]	; 0xd8
   17558:	eor	r0, r0, r2
   1755c:	eor	r1, r1, r3
   17560:	orr	r3, r5, sl, lsl #16
   17564:	str	r3, [sp, #164]	; 0xa4
   17568:	strd	r0, [sp, #176]	; 0xb0
   1756c:	ldrd	r2, [sp, #136]	; 0x88
   17570:	ldrd	r0, [sp, #208]	; 0xd0
   17574:	ldrd	sl, [sp, #56]	; 0x38
   17578:	ldrd	r4, [sp, #160]	; 0xa0
   1757c:	eor	r2, r2, r0
   17580:	eor	r3, r3, r1
   17584:	mov	r0, r2
   17588:	mov	r1, r3
   1758c:	ldrd	r2, [sp, #224]	; 0xe0
   17590:	adds	sl, sl, r2
   17594:	adc	fp, fp, r3
   17598:	ldrd	r2, [sp, #248]	; 0xf8
   1759c:	str	ip, [sp, #200]	; 0xc8
   175a0:	lsr	ip, r7, #24
   175a4:	adds	r2, r2, r4
   175a8:	adc	r3, r3, r5
   175ac:	ldrd	r4, [sp, #184]	; 0xb8
   175b0:	strd	r2, [sp, #248]	; 0xf8
   175b4:	eor	r4, r4, r2
   175b8:	eor	r5, r5, r3
   175bc:	mov	r2, r4
   175c0:	mov	r3, r5
   175c4:	ldrd	r4, [lr]
   175c8:	strd	r2, [sp, #136]	; 0x88
   175cc:	orr	r3, ip, r6, lsl #8
   175d0:	str	r3, [sp, #204]	; 0xcc
   175d4:	ldr	r3, [sp, #176]	; 0xb0
   175d8:	ldrd	r6, [sp, #24]
   175dc:	lsr	ip, r3, #24
   175e0:	ldrd	r2, [sp, #200]	; 0xc8
   175e4:	adds	r2, r2, sl
   175e8:	adc	r3, r3, fp
   175ec:	adds	r6, r6, r4
   175f0:	adc	r7, r7, r5
   175f4:	strd	r2, [lr]
   175f8:	strd	r6, [sp, #184]	; 0xb8
   175fc:	ldrd	r6, [sp, #192]	; 0xc0
   17600:	ldrd	sl, [sp, #232]	; 0xe8
   17604:	ldrd	r4, [sp, #128]	; 0x80
   17608:	eor	r7, r7, r3
   1760c:	ldr	r3, [sp, #180]	; 0xb4
   17610:	eor	r6, r6, r2
   17614:	adds	r4, r4, sl
   17618:	orr	r3, ip, r3, lsl #8
   1761c:	str	r3, [sp, #168]	; 0xa8
   17620:	ldrd	r2, [sp, #136]	; 0x88
   17624:	adc	r5, r5, fp
   17628:	mov	sl, r4
   1762c:	mov	r4, r2
   17630:	mov	fp, r5
   17634:	lsl	ip, r3, #1
   17638:	mov	r5, r3
   1763c:	lsl	lr, r4, #1
   17640:	orr	r3, ip, r2, lsr #31
   17644:	str	r3, [sp, #156]	; 0x9c
   17648:	lsr	ip, r0, #24
   1764c:	orr	r3, lr, r5, lsr #31
   17650:	str	r3, [sp, #152]	; 0x98
   17654:	orr	r3, ip, r1, lsl #8
   17658:	lsr	r1, r1, #24
   1765c:	str	r3, [sp, #136]	; 0x88
   17660:	orr	r3, r1, r0, lsl #8
   17664:	ldrd	r0, [sp, #176]	; 0xb0
   17668:	str	r3, [sp, #140]	; 0x8c
   1766c:	lsr	ip, r6, #16
   17670:	lsr	r3, r1, #24
   17674:	orr	r3, r3, r0, lsl #8
   17678:	str	r3, [sp, #172]	; 0xac
   1767c:	ldrd	r0, [sp, #168]	; 0xa8
   17680:	ldrd	r2, [sp, #184]	; 0xb8
   17684:	orr	ip, ip, r7, lsl #16
   17688:	str	ip, [sp, #184]	; 0xb8
   1768c:	adds	r2, r2, r0
   17690:	adc	r3, r3, r1
   17694:	ldrd	r0, [sp, #136]	; 0x88
   17698:	strd	r2, [sp, #232]	; 0xe8
   1769c:	lsr	ip, r7, #16
   176a0:	adds	r0, r0, sl
   176a4:	adc	r1, r1, fp
   176a8:	mov	sl, r0
   176ac:	mov	fp, r1
   176b0:	mov	r0, r2
   176b4:	mov	r1, r3
   176b8:	ldrd	r2, [sp, #104]	; 0x68
   176bc:	eor	r0, r0, r8
   176c0:	eor	r1, r1, r9
   176c4:	orr	ip, ip, r6, lsl #16
   176c8:	ldrd	r8, [sp, #152]	; 0x98
   176cc:	str	ip, [sp, #188]	; 0xbc
   176d0:	adds	r2, r2, sl
   176d4:	ldrd	r6, [sp, #184]	; 0xb8
   176d8:	lsr	ip, r0, #16
   176dc:	adc	r3, r3, fp
   176e0:	orr	ip, ip, r1, lsl #16
   176e4:	adds	r8, r8, r2
   176e8:	lsr	r1, r1, #16
   176ec:	adc	r9, r9, r3
   176f0:	orr	r1, r1, r0, lsl #16
   176f4:	mov	r2, r8
   176f8:	mov	r3, r9
   176fc:	str	ip, [sp, #176]	; 0xb0
   17700:	eor	r6, r6, r8
   17704:	str	r1, [sp, #180]	; 0xb4
   17708:	eor	r7, r7, r9
   1770c:	ldrd	r0, [sp, #216]	; 0xd8
   17710:	ldrd	r8, [sp, #176]	; 0xb0
   17714:	str	r7, [sp, #192]	; 0xc0
   17718:	str	r6, [sp, #196]	; 0xc4
   1771c:	adds	r8, r8, r0
   17720:	adc	r9, r9, r1
   17724:	mov	r4, r8
   17728:	mov	r5, r9
   1772c:	ldrd	r8, [sp, #144]	; 0x90
   17730:	ldrd	r6, [sp, #152]	; 0x98
   17734:	ldrd	r0, [sp, #168]	; 0xa8
   17738:	eor	r8, r8, sl
   1773c:	eor	r9, r9, fp
   17740:	mov	sl, r8
   17744:	mov	fp, r9
   17748:	ldrd	r8, [sp, #192]	; 0xc0
   1774c:	lsr	ip, sl, #16
   17750:	orr	ip, ip, fp, lsl #16
   17754:	adds	r8, r8, r4
   17758:	adc	r9, r9, r5
   1775c:	eor	r6, r6, r8
   17760:	strd	r8, [sp, #216]	; 0xd8
   17764:	eor	r7, r7, r9
   17768:	ldrd	r8, [sp, #88]	; 0x58
   1776c:	str	ip, [sp, #144]	; 0x90
   17770:	lsr	ip, fp, #16
   17774:	adds	r8, r8, r2
   17778:	adc	r9, r9, r3
   1777c:	eor	r1, r1, r5
   17780:	orr	r3, ip, sl, lsl #16
   17784:	mov	r5, r7
   17788:	ldrd	sl, [sp, #240]	; 0xf0
   1778c:	eor	r0, r0, r4
   17790:	mov	r7, r9
   17794:	mov	r4, r6
   17798:	mov	r6, r8
   1779c:	ldrd	r8, [sp, #112]	; 0x70
   177a0:	str	r3, [sp, #148]	; 0x94
   177a4:	lsr	ip, r5, #24
   177a8:	adds	r8, r8, sl
   177ac:	adc	r9, r9, fp
   177b0:	ldrd	sl, [sp, #208]	; 0xd0
   177b4:	strd	r8, [sp, #168]	; 0xa8
   177b8:	ldrd	r8, [sp, #144]	; 0x90
   177bc:	lsr	r3, r4, #24
   177c0:	orr	r3, r3, r5, lsl #8
   177c4:	adds	sl, sl, r8
   177c8:	adc	fp, fp, r9
   177cc:	ldrd	r8, [sp, #136]	; 0x88
   177d0:	orr	ip, ip, r4, lsl #8
   177d4:	str	r3, [sp, #152]	; 0x98
   177d8:	str	ip, [sp, #156]	; 0x9c
   177dc:	eor	r8, r8, sl
   177e0:	eor	r9, r9, fp
   177e4:	strd	sl, [sp, #224]	; 0xe0
   177e8:	ldrd	sl, [sp, #152]	; 0x98
   177ec:	ldrd	r4, [sp, #192]	; 0xc0
   177f0:	lsl	ip, r1, #1
   177f4:	adds	sl, sl, r6
   177f8:	adc	fp, fp, r7
   177fc:	eor	r5, r5, fp
   17800:	mov	r7, fp
   17804:	orr	fp, ip, r0, lsr #31
   17808:	lsl	ip, r9, #1
   1780c:	orr	ip, ip, r8, lsr #31
   17810:	mov	r6, sl
   17814:	str	ip, [sp, #140]	; 0x8c
   17818:	add	ip, sp, #264	; 0x108
   1781c:	strd	r6, [sp, #240]	; 0xf0
   17820:	lsl	r2, r8, #1
   17824:	ldrd	r6, [sp, #184]	; 0xb8
   17828:	mov	r3, r9
   1782c:	ldrd	r8, [ip]
   17830:	lsl	r0, r0, #1
   17834:	eor	r4, r4, sl
   17838:	orr	sl, r0, r1, lsr #31
   1783c:	ldrd	r0, [sp, #168]	; 0xa8
   17840:	adds	r8, r8, r6
   17844:	adc	r9, r9, r7
   17848:	lsr	ip, r4, #16
   1784c:	ldrd	r6, [sp, #144]	; 0x90
   17850:	orr	r3, r2, r3, lsr #31
   17854:	adds	r0, r0, sl
   17858:	str	r3, [sp, #136]	; 0x88
   1785c:	orr	r3, ip, r5, lsl #16
   17860:	adc	r1, r1, fp
   17864:	str	r3, [sp, #144]	; 0x90
   17868:	lsr	r3, r5, #16
   1786c:	eor	r7, r7, r1
   17870:	orr	r3, r3, r4, lsl #16
   17874:	strd	r0, [sp, #192]	; 0xc0
   17878:	eor	r6, r6, r0
   1787c:	str	r7, [sp, #168]	; 0xa8
   17880:	str	r3, [sp, #148]	; 0x94
   17884:	ldrd	r4, [sp, #216]	; 0xd8
   17888:	str	r6, [sp, #172]	; 0xac
   1788c:	ldrd	r6, [sp, #144]	; 0x90
   17890:	ldrd	r0, [sp, #168]	; 0xa8
   17894:	adds	r4, r4, r6
   17898:	adc	r5, r5, r7
   1789c:	adds	r2, r8, r0
   178a0:	adc	r3, r9, r1
   178a4:	strd	r4, [sp, #208]	; 0xd0
   178a8:	strd	r2, [sp, #216]	; 0xd8
   178ac:	add	r3, sp, #256	; 0x100
   178b0:	ldrd	r4, [sp, #72]	; 0x48
   178b4:	ldrd	r0, [r3]
   178b8:	ldrd	r6, [sp, #136]	; 0x88
   178bc:	ldrd	r2, [sp, #200]	; 0xc8
   178c0:	adds	r4, r4, r0
   178c4:	adc	r5, r5, r1
   178c8:	mov	r0, r4
   178cc:	adds	r4, r6, r0
   178d0:	mov	r1, r5
   178d4:	adc	r5, r7, r1
   178d8:	mov	r0, r4
   178dc:	mov	r1, r5
   178e0:	ldrd	r4, [sp, #176]	; 0xb0
   178e4:	eor	r3, r3, r9
   178e8:	eor	r2, r2, r8
   178ec:	eor	r4, r4, r0
   178f0:	eor	r5, r5, r1
   178f4:	mov	r8, r5
   178f8:	mov	r9, r4
   178fc:	ldrd	r4, [sp, #248]	; 0xf8
   17900:	lsl	ip, r3, #1
   17904:	orr	ip, ip, r2, lsr #31
   17908:	lsl	r2, r2, #1
   1790c:	adds	r4, r4, r8
   17910:	orr	r3, r2, r3, lsr #31
   17914:	str	r3, [sp, #136]	; 0x88
   17918:	adc	r5, r5, r9
   1791c:	mov	r2, r6
   17920:	mov	r3, r7
   17924:	eor	r2, r2, r4
   17928:	eor	r3, r3, r5
   1792c:	strd	r4, [sp, #248]	; 0xf8
   17930:	ldrd	r6, [sp, #16]
   17934:	mov	r4, r2
   17938:	mov	r5, r3
   1793c:	ldrd	r2, [sp, #232]	; 0xe8
   17940:	str	ip, [sp, #140]	; 0x8c
   17944:	lsr	ip, r4, #24
   17948:	adds	r6, r6, r2
   1794c:	adc	r7, r7, r3
   17950:	mov	r2, r6
   17954:	mov	r3, r7
   17958:	ldrd	r6, [sp, #136]	; 0x88
   1795c:	adds	r6, r6, r2
   17960:	adc	r7, r7, r3
   17964:	ldrd	r2, [sp, #160]	; 0xa0
   17968:	strd	r6, [sp, #160]	; 0xa0
   1796c:	eor	r6, r6, r2
   17970:	eor	r7, r7, r3
   17974:	ldrd	r2, [sp, #40]	; 0x28
   17978:	str	r7, [sp, #176]	; 0xb0
   1797c:	str	r6, [sp, #180]	; 0xb4
   17980:	adds	r2, r2, r0
   17984:	adc	r3, r3, r1
   17988:	mov	r1, r3
   1798c:	orr	r3, ip, r5, lsl #8
   17990:	lsr	ip, r5, #24
   17994:	str	r3, [sp, #184]	; 0xb8
   17998:	orr	r3, ip, r4, lsl #8
   1799c:	str	r3, [sp, #188]	; 0xbc
   179a0:	ldrd	r6, [sp, #184]	; 0xb8
   179a4:	ldrd	r4, [sp, #176]	; 0xb0
   179a8:	add	ip, sp, #256	; 0x100
   179ac:	adds	r6, r6, r2
   179b0:	ldrd	r2, [sp, #224]	; 0xe0
   179b4:	adc	r7, r7, r1
   179b8:	mov	r0, r6
   179bc:	adds	r2, r2, r4
   179c0:	mov	r1, r7
   179c4:	ldrd	r6, [sp, #216]	; 0xd8
   179c8:	adc	r3, r3, r5
   179cc:	strd	r0, [ip]
   179d0:	eor	r0, r0, r8
   179d4:	eor	r1, r1, r9
   179d8:	eor	r6, r6, sl
   179dc:	eor	r7, r7, fp
   179e0:	mov	r4, r0
   179e4:	mov	r5, r1
   179e8:	ldrd	r0, [sp, #136]	; 0x88
   179ec:	strd	r2, [sp, #200]	; 0xc8
   179f0:	ldrd	sl, [sp, #192]	; 0xc0
   179f4:	ldrd	r8, [sp, #48]	; 0x30
   179f8:	eor	r0, r0, r2
   179fc:	eor	r1, r1, r3
   17a00:	adds	r8, r8, sl
   17a04:	ldrd	r2, [sp, #160]	; 0xa0
   17a08:	adc	r9, r9, fp
   17a0c:	ldrd	sl, [sp, #32]
   17a10:	lsr	lr, r6, #24
   17a14:	lsr	ip, r4, #16
   17a18:	adds	r2, r2, sl
   17a1c:	adc	r3, r3, fp
   17a20:	mov	sl, r2
   17a24:	mov	fp, r3
   17a28:	orr	r3, lr, r7, lsl #8
   17a2c:	strd	sl, [sp, #136]	; 0x88
   17a30:	str	r3, [sp, #160]	; 0xa0
   17a34:	ldrd	sl, [sp, #152]	; 0x98
   17a38:	ldrd	r2, [sp, #208]	; 0xd0
   17a3c:	orr	ip, ip, r5, lsl #16
   17a40:	str	ip, [sp, #192]	; 0xc0
   17a44:	lsr	ip, r7, #24
   17a48:	orr	ip, ip, r6, lsl #8
   17a4c:	str	ip, [sp, #164]	; 0xa4
   17a50:	eor	sl, sl, r2
   17a54:	eor	fp, fp, r3
   17a58:	mov	r2, sl
   17a5c:	mov	r3, fp
   17a60:	ldrd	sl, [sp, #160]	; 0xa0
   17a64:	lsr	ip, r0, #24
   17a68:	orr	ip, ip, r1, lsl #8
   17a6c:	adds	sl, sl, r8
   17a70:	adc	fp, fp, r9
   17a74:	str	ip, [sp, #152]	; 0x98
   17a78:	mov	r6, sl
   17a7c:	mov	r7, fp
   17a80:	lsr	ip, r5, #16
   17a84:	ldrd	sl, [sp, #168]	; 0xa8
   17a88:	orr	ip, ip, r4, lsl #16
   17a8c:	str	ip, [sp, #196]	; 0xc4
   17a90:	strd	r6, [sp, #168]	; 0xa8
   17a94:	ldrd	r4, [sp, #248]	; 0xf8
   17a98:	eor	r6, r6, sl
   17a9c:	eor	r7, r7, fp
   17aa0:	ldrd	sl, [sp, #192]	; 0xc0
   17aa4:	ldrd	r8, [sp, #184]	; 0xb8
   17aa8:	lsr	r1, r1, #24
   17aac:	adds	r4, r4, sl
   17ab0:	adc	r5, r5, fp
   17ab4:	lsl	lr, r3, #1
   17ab8:	eor	r9, r9, r5
   17abc:	orr	r1, r1, r0, lsl #8
   17ac0:	strd	r4, [sp, #248]	; 0xf8
   17ac4:	str	r1, [sp, #156]	; 0x9c
   17ac8:	mov	r5, r9
   17acc:	orr	r9, lr, r2, lsr #31
   17ad0:	lsl	r2, r2, #1
   17ad4:	ldrd	sl, [sp, #152]	; 0x98
   17ad8:	ldrd	r0, [sp, #136]	; 0x88
   17adc:	eor	r8, r8, r4
   17ae0:	orr	r3, r2, r3, lsr #31
   17ae4:	mov	r4, r8
   17ae8:	str	r9, [sp, #140]	; 0x8c
   17aec:	str	r3, [sp, #136]	; 0x88
   17af0:	ldrd	r8, [sp, #72]	; 0x48
   17af4:	ldrd	r2, [sp, #240]	; 0xf0
   17af8:	adds	r0, r0, sl
   17afc:	adc	r1, r1, fp
   17b00:	adds	r8, r8, r2
   17b04:	adc	r9, r9, r3
   17b08:	mov	sl, r0
   17b0c:	ldrd	r2, [sp, #168]	; 0xa8
   17b10:	mov	fp, r1
   17b14:	ldrd	r0, [sp, #176]	; 0xb0
   17b18:	strd	r8, [sp, #176]	; 0xb0
   17b1c:	ldrd	r8, [sp, #56]	; 0x38
   17b20:	lsr	ip, r6, #16
   17b24:	lsl	lr, r5, #1
   17b28:	adds	r2, r2, r8
   17b2c:	adc	r3, r3, r9
   17b30:	strd	sl, [sp, #232]	; 0xe8
   17b34:	eor	r0, r0, sl
   17b38:	mov	r9, r3
   17b3c:	orr	sl, ip, r7, lsl #16
   17b40:	orr	r3, lr, r4, lsr #31
   17b44:	lsr	ip, r7, #16
   17b48:	eor	r1, r1, fp
   17b4c:	str	r3, [sp, #172]	; 0xac
   17b50:	orr	fp, ip, r6, lsl #16
   17b54:	ldrd	r6, [sp, #136]	; 0x88
   17b58:	lsr	ip, r0, #16
   17b5c:	adds	r6, r6, r2
   17b60:	adc	r7, r7, r9
   17b64:	mov	r8, r6
   17b68:	mov	r9, r7
   17b6c:	ldrd	r6, [sp, #216]	; 0xd8
   17b70:	ldrd	r2, [sp, #160]	; 0xa0
   17b74:	adds	r6, r6, sl
   17b78:	adc	r7, r7, fp
   17b7c:	eor	r2, r2, r6
   17b80:	eor	r3, r3, r7
   17b84:	strd	r6, [sp, #224]	; 0xe0
   17b88:	orr	r6, ip, r1, lsl #16
   17b8c:	lsl	ip, r4, #1
   17b90:	strd	r2, [sp, #160]	; 0xa0
   17b94:	orr	r3, ip, r5, lsr #31
   17b98:	str	r3, [sp, #168]	; 0xa8
   17b9c:	ldrd	r4, [sp, #176]	; 0xb0
   17ba0:	ldrd	r2, [sp, #168]	; 0xa8
   17ba4:	lsr	r1, r1, #16
   17ba8:	orr	r7, r1, r0, lsl #16
   17bac:	adds	r4, r4, r2
   17bb0:	adc	r5, r5, r3
   17bb4:	ldrd	r2, [sp, #160]	; 0xa0
   17bb8:	strd	r4, [sp, #216]	; 0xd8
   17bbc:	eor	r4, r4, sl
   17bc0:	eor	r5, r5, fp
   17bc4:	mov	sl, r4
   17bc8:	mov	fp, r5
   17bcc:	ldrd	r4, [sp, #200]	; 0xc8
   17bd0:	eor	r0, r6, r8
   17bd4:	eor	r1, r7, r9
   17bd8:	adds	r4, r4, r6
   17bdc:	str	r1, [sp, #176]	; 0xb0
   17be0:	str	r0, [sp, #180]	; 0xb4
   17be4:	adc	r5, r5, r7
   17be8:	ldrd	r0, [sp, #248]	; 0xf8
   17bec:	mov	r6, r4
   17bf0:	mov	r7, r5
   17bf4:	str	sl, [sp, #164]	; 0xa4
   17bf8:	ldrd	r4, [sp, #176]	; 0xb0
   17bfc:	mov	sl, r2
   17c00:	str	fp, [sp, #160]	; 0xa0
   17c04:	lsl	ip, r3, #1
   17c08:	mov	fp, r3
   17c0c:	orr	r3, ip, r2, lsr #31
   17c10:	lsl	r2, sl, #1
   17c14:	adds	r4, r4, r0
   17c18:	str	r3, [sp, #188]	; 0xbc
   17c1c:	orr	r3, r2, fp, lsr #31
   17c20:	adc	r5, r5, r1
   17c24:	str	r3, [sp, #184]	; 0xb8
   17c28:	ldrd	r0, [sp, #48]	; 0x30
   17c2c:	ldrd	r2, [sp, #232]	; 0xe8
   17c30:	ldrd	sl, [sp, #136]	; 0x88
   17c34:	strd	r4, [sp, #248]	; 0xf8
   17c38:	adds	r0, r0, r2
   17c3c:	adc	r1, r1, r3
   17c40:	mov	r2, r0
   17c44:	mov	r3, r1
   17c48:	eor	sl, sl, r4
   17c4c:	ldrd	r0, [sp, #160]	; 0xa0
   17c50:	eor	fp, fp, r5
   17c54:	add	ip, sp, #272	; 0x110
   17c58:	strd	sl, [sp, #200]	; 0xc8
   17c5c:	ldrd	sl, [sp, #168]	; 0xa8
   17c60:	adds	r0, r0, r6
   17c64:	adc	r1, r1, r7
   17c68:	eor	sl, sl, r0
   17c6c:	eor	fp, fp, r1
   17c70:	strd	r0, [sp, #232]	; 0xe8
   17c74:	mov	r0, sl
   17c78:	mov	r1, fp
   17c7c:	ldrd	sl, [sp, #184]	; 0xb8
   17c80:	adds	r4, sl, r2
   17c84:	adc	r5, fp, r3
   17c88:	mov	r2, r4
   17c8c:	mov	r3, r5
   17c90:	ldrd	r4, [sp, #192]	; 0xc0
   17c94:	strd	r2, [ip]
   17c98:	lsr	ip, r0, #24
   17c9c:	eor	r5, r5, r3
   17ca0:	ldr	r3, [sp, #200]	; 0xc8
   17ca4:	eor	r4, r4, r2
   17ca8:	lsr	lr, r3, #24
   17cac:	strd	r4, [sp, #240]	; 0xf0
   17cb0:	ldrd	r2, [sp, #32]
   17cb4:	ldrd	r4, [sp, #88]	; 0x58
   17cb8:	adds	r2, r2, r8
   17cbc:	adc	r3, r3, r9
   17cc0:	mov	r8, r2
   17cc4:	mov	r9, r3
   17cc8:	ldrd	r2, [sp, #216]	; 0xd8
   17ccc:	adds	r4, r4, r2
   17cd0:	adc	r5, r5, r3
   17cd4:	ldr	r3, [sp, #204]	; 0xcc
   17cd8:	strd	r4, [sp, #192]	; 0xc0
   17cdc:	orr	r3, lr, r3, lsl #8
   17ce0:	str	r3, [sp, #168]	; 0xa8
   17ce4:	orr	r3, ip, r1, lsl #8
   17ce8:	str	r3, [sp, #136]	; 0x88
   17cec:	ldrd	r2, [sp, #152]	; 0x98
   17cf0:	add	ip, sp, #280	; 0x118
   17cf4:	lsr	r1, r1, #24
   17cf8:	eor	r2, r2, r6
   17cfc:	eor	r3, r3, r7
   17d00:	mov	r7, r3
   17d04:	mov	r6, r2
   17d08:	ldrd	r2, [sp, #240]	; 0xf0
   17d0c:	orr	r1, r1, r0, lsl #8
   17d10:	str	r1, [sp, #140]	; 0x8c
   17d14:	str	r3, [sp, #184]	; 0xb8
   17d18:	str	r2, [sp, #188]	; 0xbc
   17d1c:	ldrd	r4, [sp, #184]	; 0xb8
   17d20:	ldrd	r2, [sp, #208]	; 0xd0
   17d24:	ldrd	r0, [sp, #192]	; 0xc0
   17d28:	adds	r2, r2, r4
   17d2c:	adc	r3, r3, r5
   17d30:	eor	sl, sl, r2
   17d34:	eor	fp, fp, r3
   17d38:	strd	r2, [ip]
   17d3c:	mov	r2, sl
   17d40:	mov	r3, fp
   17d44:	ldrd	sl, [sp, #200]	; 0xc8
   17d48:	lsr	ip, fp, #24
   17d4c:	orr	ip, ip, sl, lsl #8
   17d50:	str	ip, [sp, #172]	; 0xac
   17d54:	ldrd	sl, [sp, #168]	; 0xa8
   17d58:	add	ip, sp, #264	; 0x108
   17d5c:	adds	sl, sl, r8
   17d60:	adc	fp, fp, r9
   17d64:	ldrd	r8, [sp, #136]	; 0x88
   17d68:	strd	sl, [ip]
   17d6c:	lsl	ip, r7, #1
   17d70:	adds	r0, r0, r8
   17d74:	adc	r1, r1, r9
   17d78:	ldrd	r8, [sp, #176]	; 0xb0
   17d7c:	orr	ip, ip, r6, lsr #31
   17d80:	strd	r0, [sp, #240]	; 0xf0
   17d84:	eor	r8, r8, sl
   17d88:	eor	r9, r9, fp
   17d8c:	ldrd	sl, [sp, #160]	; 0xa0
   17d90:	mov	r4, r8
   17d94:	str	ip, [sp, #196]	; 0xc4
   17d98:	eor	sl, sl, r0
   17d9c:	mov	r0, sl
   17da0:	lsr	ip, sl, #16
   17da4:	add	sl, sp, #272	; 0x110
   17da8:	mov	r5, r9
   17dac:	eor	fp, fp, r1
   17db0:	ldrd	r8, [sp, #96]	; 0x60
   17db4:	mov	r1, fp
   17db8:	lsr	lr, r4, #16
   17dbc:	ldrd	sl, [sl]
   17dc0:	lsl	r6, r6, #1
   17dc4:	orr	r6, r6, r7, lsr #31
   17dc8:	orr	r7, lr, r5, lsl #16
   17dcc:	lsr	lr, r5, #16
   17dd0:	orr	r5, lr, r4, lsl #16
   17dd4:	adds	r8, r8, sl
   17dd8:	str	r7, [sp, #160]	; 0xa0
   17ddc:	str	r5, [sp, #164]	; 0xa4
   17de0:	orr	ip, ip, r1, lsl #16
   17de4:	adc	r9, r9, fp
   17de8:	ldrd	r4, [sp, #248]	; 0xf8
   17dec:	str	r6, [sp, #192]	; 0xc0
   17df0:	str	ip, [sp, #152]	; 0x98
   17df4:	ldrd	sl, [sp, #160]	; 0xa0
   17df8:	lsr	r1, r1, #16
   17dfc:	orr	r1, r1, r0, lsl #16
   17e00:	adds	r4, r4, sl
   17e04:	adc	r5, r5, fp
   17e08:	str	r1, [sp, #156]	; 0x9c
   17e0c:	ldrd	sl, [sp, #152]	; 0x98
   17e10:	strd	r4, [sp, #208]	; 0xd0
   17e14:	lsr	ip, r2, #24
   17e18:	ldrd	r4, [sp, #232]	; 0xe8
   17e1c:	orr	ip, ip, r3, lsl #8
   17e20:	lsr	r3, r3, #24
   17e24:	orr	r3, r3, r2, lsl #8
   17e28:	adds	r4, r4, sl
   17e2c:	str	ip, [sp, #176]	; 0xb0
   17e30:	str	r3, [sp, #180]	; 0xb4
   17e34:	adc	r5, r5, fp
   17e38:	add	r1, sp, #256	; 0x100
   17e3c:	ldrd	sl, [sp, #176]	; 0xb0
   17e40:	ldrd	r0, [r1]
   17e44:	ldrd	r2, [sp, #16]
   17e48:	adds	sl, sl, r8
   17e4c:	adc	fp, fp, r9
   17e50:	ldrd	r8, [sp, #192]	; 0xc0
   17e54:	adds	r2, r2, r0
   17e58:	ldrd	r6, [sp, #144]	; 0x90
   17e5c:	adc	r3, r3, r1
   17e60:	mov	r0, r2
   17e64:	adds	r2, r8, r0
   17e68:	mov	r1, r3
   17e6c:	adc	r3, r9, r1
   17e70:	eor	r6, r6, r2
   17e74:	eor	r7, r7, r3
   17e78:	strd	r4, [sp, #200]	; 0xc8
   17e7c:	mov	r0, r2
   17e80:	mov	r1, r3
   17e84:	mov	r4, r6
   17e88:	mov	r5, r7
   17e8c:	mov	r2, r7
   17e90:	mov	r3, r6
   17e94:	ldrd	r6, [sp, #224]	; 0xe0
   17e98:	strd	sl, [sp, #216]	; 0xd8
   17e9c:	ldrd	sl, [sp, #216]	; 0xd8
   17ea0:	adds	r6, r6, r5
   17ea4:	adc	r7, r7, r4
   17ea8:	mov	r5, r7
   17eac:	strd	r6, [sp, #192]	; 0xc0
   17eb0:	mov	r4, r6
   17eb4:	mov	r7, r9
   17eb8:	mov	r6, r8
   17ebc:	eor	r6, r6, r4
   17ec0:	eor	r7, r7, r5
   17ec4:	mov	r4, r6
   17ec8:	mov	r5, r7
   17ecc:	ldrd	r6, [sp, #40]	; 0x28
   17ed0:	lsr	ip, r4, #24
   17ed4:	orr	r8, ip, r5, lsl #8
   17ed8:	adds	r6, r6, r0
   17edc:	lsr	ip, r5, #24
   17ee0:	orr	r9, ip, r4, lsl #8
   17ee4:	adc	r7, r7, r1
   17ee8:	adds	r6, r6, r8
   17eec:	adc	r7, r7, r9
   17ef0:	mov	r0, r6
   17ef4:	mov	r1, r7
   17ef8:	ldrd	r6, [sp, #184]	; 0xb8
   17efc:	strd	r0, [sp, #232]	; 0xe8
   17f00:	eor	r6, r6, sl
   17f04:	eor	r7, r7, fp
   17f08:	mov	r4, r6
   17f0c:	ldrd	sl, [sp, #208]	; 0xd0
   17f10:	mov	r5, r7
   17f14:	mov	r6, r0
   17f18:	mov	r7, r1
   17f1c:	ldrd	r0, [sp, #168]	; 0xa8
   17f20:	eor	r6, r6, r2
   17f24:	lsr	lr, r4, #16
   17f28:	eor	r1, r1, fp
   17f2c:	eor	r0, r0, sl
   17f30:	lsl	ip, r1, #1
   17f34:	orr	ip, ip, r0, lsr #31
   17f38:	lsl	r0, r0, #1
   17f3c:	orr	r1, r0, r1, lsr #31
   17f40:	str	r1, [sp, #144]	; 0x90
   17f44:	ldrd	sl, [sp, #128]	; 0x80
   17f48:	ldrd	r0, [sp, #240]	; 0xf0
   17f4c:	eor	r7, r7, r3
   17f50:	str	ip, [sp, #148]	; 0x94
   17f54:	adds	sl, sl, r0
   17f58:	adc	fp, fp, r1
   17f5c:	orr	r1, lr, r5, lsl #16
   17f60:	mov	r2, r6
   17f64:	mov	r3, r7
   17f68:	lsr	ip, r6, #16
   17f6c:	str	r1, [sp, #168]	; 0xa8
   17f70:	ldrd	r6, [sp, #136]	; 0x88
   17f74:	ldrd	r0, [sp, #200]	; 0xc8
   17f78:	eor	r6, r6, r0
   17f7c:	eor	r7, r7, r1
   17f80:	ldrd	r0, [sp, #144]	; 0x90
   17f84:	adds	r0, r0, sl
   17f88:	adc	r1, r1, fp
   17f8c:	strd	r0, [sp, #224]	; 0xe0
   17f90:	orr	r0, ip, r3, lsl #16
   17f94:	lsr	ip, r5, #16
   17f98:	orr	ip, ip, r4, lsl #16
   17f9c:	str	ip, [sp, #172]	; 0xac
   17fa0:	add	ip, sp, #280	; 0x118
   17fa4:	lsr	r3, r3, #16
   17fa8:	ldrd	r4, [ip]
   17fac:	ldrd	sl, [sp, #168]	; 0xa8
   17fb0:	orr	r1, r3, r2, lsl #16
   17fb4:	lsl	ip, r7, #1
   17fb8:	adds	r4, r4, sl
   17fbc:	adc	r5, r5, fp
   17fc0:	mov	sl, r4
   17fc4:	mov	fp, r5
   17fc8:	ldrd	r4, [sp, #192]	; 0xc0
   17fcc:	orr	ip, ip, r6, lsr #31
   17fd0:	str	ip, [sp, #140]	; 0x8c
   17fd4:	adds	r4, r4, r0
   17fd8:	adc	r5, r5, r1
   17fdc:	mov	r2, r4
   17fe0:	mov	r3, r5
   17fe4:	ldrd	r4, [sp, #176]	; 0xb0
   17fe8:	strd	r2, [sp, #240]	; 0xf0
   17fec:	eor	r2, r2, r8
   17ff0:	eor	r3, r3, r9
   17ff4:	ldrd	r8, [sp, #224]	; 0xe0
   17ff8:	eor	r5, r5, fp
   17ffc:	eor	r4, r4, sl
   18000:	eor	r8, r8, r0
   18004:	str	r8, [sp, #188]	; 0xbc
   18008:	add	r8, sp, #264	; 0x108
   1800c:	eor	r9, r9, r1
   18010:	lsl	ip, r6, #1
   18014:	lsl	r1, r5, #1
   18018:	str	r9, [sp, #184]	; 0xb8
   1801c:	orr	ip, ip, r7, lsr #31
   18020:	ldrd	r8, [r8]
   18024:	orr	r7, r1, r4, lsr #31
   18028:	ldrd	r0, [sp, #64]	; 0x40
   1802c:	str	ip, [sp, #136]	; 0x88
   18030:	lsl	ip, r3, #1
   18034:	adds	r0, r0, r8
   18038:	adc	r1, r1, r9
   1803c:	ldrd	r8, [sp, #24]
   18040:	strd	r0, [sp, #192]	; 0xc0
   18044:	ldrd	r0, [sp, #216]	; 0xd8
   18048:	lsl	lr, r4, #1
   1804c:	orr	r6, lr, r5, lsr #31
   18050:	adds	r8, r8, r0
   18054:	adc	r9, r9, r1
   18058:	orr	r1, ip, r2, lsr #31
   1805c:	lsl	r2, r2, #1
   18060:	strd	r8, [sp, #216]	; 0xd8
   18064:	str	r1, [sp, #180]	; 0xb4
   18068:	ldrd	r8, [sp, #232]	; 0xe8
   1806c:	ldrd	r0, [sp, #112]	; 0x70
   18070:	orr	r3, r2, r3, lsr #31
   18074:	str	r3, [sp, #176]	; 0xb0
   18078:	ldrd	r2, [sp, #184]	; 0xb8
   1807c:	adds	r0, r0, r8
   18080:	adc	r1, r1, r9
   18084:	adds	r2, r2, sl
   18088:	adc	r3, r3, fp
   1808c:	mov	sl, r2
   18090:	mov	fp, r3
   18094:	ldrd	r2, [sp, #192]	; 0xc0
   18098:	add	ip, sp, #256	; 0x100
   1809c:	strd	sl, [sp, #248]	; 0xf8
   180a0:	adds	r2, r2, r6
   180a4:	adc	r3, r3, r7
   180a8:	mov	r8, r2
   180ac:	mov	r9, r3
   180b0:	ldrd	r2, [sp, #136]	; 0x88
   180b4:	strd	r8, [ip]
   180b8:	adds	r2, r2, r0
   180bc:	adc	r3, r3, r1
   180c0:	ldrd	r0, [sp, #216]	; 0xd8
   180c4:	strd	r2, [sp, #232]	; 0xe8
   180c8:	ldrd	r2, [sp, #176]	; 0xb0
   180cc:	adds	r0, r0, r2
   180d0:	adc	r1, r1, r3
   180d4:	mov	r4, r0
   180d8:	mov	r5, r1
   180dc:	ldrd	r0, [sp, #152]	; 0x98
   180e0:	ldrd	r2, [sp, #144]	; 0x90
   180e4:	eor	r0, r0, r8
   180e8:	eor	r1, r1, r9
   180ec:	eor	r2, r2, sl
   180f0:	eor	r3, r3, fp
   180f4:	mov	r8, r0
   180f8:	ldrd	sl, [sp, #168]	; 0xa8
   180fc:	mov	r9, r1
   18100:	ldrd	r0, [sp, #232]	; 0xe8
   18104:	lsr	ip, r2, #24
   18108:	eor	sl, sl, r0
   1810c:	eor	fp, fp, r1
   18110:	orr	r1, ip, r3, lsl #8
   18114:	strd	sl, [sp, #216]	; 0xd8
   18118:	ldrd	sl, [sp, #160]	; 0xa0
   1811c:	str	r1, [sp, #144]	; 0x90
   18120:	ldrd	r0, [sp, #216]	; 0xd8
   18124:	eor	sl, sl, r4
   18128:	eor	fp, fp, r5
   1812c:	str	fp, [sp, #168]	; 0xa8
   18130:	str	sl, [sp, #172]	; 0xac
   18134:	str	r1, [sp, #192]	; 0xc0
   18138:	ldrd	sl, [sp, #224]	; 0xe0
   1813c:	str	r0, [sp, #196]	; 0xc4
   18140:	ldrd	r0, [sp, #80]	; 0x50
   18144:	lsr	r3, r3, #24
   18148:	str	r9, [sp, #152]	; 0x98
   1814c:	adds	r0, r0, sl
   18150:	str	r8, [sp, #156]	; 0x9c
   18154:	orr	r3, r3, r2, lsl #8
   18158:	adc	r1, r1, fp
   1815c:	str	r3, [sp, #148]	; 0x94
   18160:	ldrd	sl, [sp, #152]	; 0x98
   18164:	ldrd	r2, [sp, #240]	; 0xf0
   18168:	ldrd	r8, [sp, #168]	; 0xa8
   1816c:	adds	r2, r2, sl
   18170:	adc	r3, r3, fp
   18174:	ldrd	sl, [sp, #200]	; 0xc8
   18178:	strd	r2, [sp, #240]	; 0xf0
   1817c:	adds	sl, sl, r8
   18180:	adc	fp, fp, r9
   18184:	ldrd	r8, [sp, #208]	; 0xd0
   18188:	strd	sl, [sp, #216]	; 0xd8
   1818c:	ldrd	sl, [sp, #192]	; 0xc0
   18190:	adds	sl, sl, r8
   18194:	adc	fp, fp, r9
   18198:	mov	r8, sl
   1819c:	mov	r9, fp
   181a0:	ldrd	sl, [sp, #144]	; 0x90
   181a4:	adds	sl, sl, r0
   181a8:	adc	fp, fp, r1
   181ac:	mov	r0, r2
   181b0:	strd	sl, [sp, #208]	; 0xd0
   181b4:	mov	r1, r3
   181b8:	ldrd	sl, [sp, #216]	; 0xd8
   181bc:	ldrd	r2, [sp, #176]	; 0xb0
   181c0:	eor	r0, r0, r6
   181c4:	eor	r1, r1, r7
   181c8:	eor	r2, r2, sl
   181cc:	eor	r3, r3, fp
   181d0:	mov	sl, r2
   181d4:	mov	fp, r3
   181d8:	add	r3, sp, #264	; 0x108
   181dc:	strd	sl, [sp, #200]	; 0xc8
   181e0:	ldrd	sl, [sp, #136]	; 0x88
   181e4:	mov	r6, r0
   181e8:	mov	r7, r1
   181ec:	eor	sl, sl, r8
   181f0:	eor	fp, fp, r9
   181f4:	strd	r8, [r3]
   181f8:	mov	r0, sl
   181fc:	ldrd	r2, [sp, #184]	; 0xb8
   18200:	mov	r1, fp
   18204:	ldrd	sl, [sp, #208]	; 0xd0
   18208:	add	r8, sp, #256	; 0x100
   1820c:	lsr	lr, r6, #24
   18210:	ldrd	r8, [r8]
   18214:	eor	r2, r2, sl
   18218:	eor	r3, r3, fp
   1821c:	ldrd	sl, [sp, #120]	; 0x78
   18220:	lsr	ip, r2, #16
   18224:	orr	ip, ip, r3, lsl #16
   18228:	adds	sl, sl, r8
   1822c:	adc	fp, fp, r9
   18230:	add	r8, sp, #256	; 0x100
   18234:	lsr	r3, r3, #16
   18238:	strd	sl, [r8]
   1823c:	ldrd	r8, [sp, #8]
   18240:	ldrd	sl, [sp, #232]	; 0xe8
   18244:	orr	r3, r3, r2, lsl #16
   18248:	str	ip, [sp, #136]	; 0x88
   1824c:	adds	r8, r8, sl
   18250:	adc	r9, r9, fp
   18254:	mov	sl, r8
   18258:	mov	fp, r9
   1825c:	ldrd	r8, [sp, #104]	; 0x68
   18260:	str	r3, [sp, #140]	; 0x8c
   18264:	orr	r3, lr, r7, lsl #8
   18268:	adds	r8, r8, r4
   1826c:	adc	r9, r9, r5
   18270:	str	r3, [sp, #160]	; 0xa0
   18274:	strd	r8, [sp, #232]	; 0xe8
   18278:	ldrd	r2, [sp, #248]	; 0xf8
   1827c:	ldrd	r8, [sp, #136]	; 0x88
   18280:	ldrd	r4, [sp, #144]	; 0x90
   18284:	ldr	ip, [sp, #200]	; 0xc8
   18288:	adds	r2, r2, r8
   1828c:	adc	r3, r3, r9
   18290:	eor	r5, r5, r3
   18294:	strd	r2, [sp, #224]	; 0xe0
   18298:	mov	r3, r5
   1829c:	ldr	r5, [sp, #204]	; 0xcc
   182a0:	lsr	ip, ip, #24
   182a4:	lsr	lr, r0, #24
   182a8:	orr	ip, ip, r5, lsl #8
   182ac:	str	ip, [sp, #176]	; 0xb0
   182b0:	eor	r4, r4, r2
   182b4:	orr	ip, lr, r1, lsl #8
   182b8:	str	ip, [sp, #184]	; 0xb8
   182bc:	lsl	ip, r3, #1
   182c0:	orr	ip, ip, r4, lsr #31
   182c4:	str	ip, [sp, #148]	; 0x94
   182c8:	lsr	ip, r7, #24
   182cc:	orr	ip, ip, r6, lsl #8
   182d0:	str	ip, [sp, #164]	; 0xa4
   182d4:	add	ip, sp, #256	; 0x100
   182d8:	ldrd	r8, [sp, #160]	; 0xa0
   182dc:	ldrd	r6, [ip]
   182e0:	mov	r2, r4
   182e4:	ldrd	r4, [sp, #200]	; 0xc8
   182e8:	adds	r6, r6, r8
   182ec:	adc	r7, r7, r9
   182f0:	mov	r8, r6
   182f4:	mov	r9, r7
   182f8:	ldrd	r6, [sp, #152]	; 0x98
   182fc:	lsr	ip, r5, #24
   18300:	orr	ip, ip, r4, lsl #8
   18304:	eor	r6, r6, r8
   18308:	eor	r7, r7, r9
   1830c:	str	ip, [sp, #180]	; 0xb4
   18310:	ldrd	r4, [sp, #232]	; 0xe8
   18314:	strd	r6, [sp, #152]	; 0x98
   18318:	ldrd	r6, [sp, #176]	; 0xb0
   1831c:	lsr	r1, r1, #24
   18320:	orr	r1, r1, r0, lsl #8
   18324:	adds	r4, r4, r6
   18328:	str	r1, [sp, #188]	; 0xbc
   1832c:	adc	r5, r5, r7
   18330:	ldrd	r6, [sp, #184]	; 0xb8
   18334:	strd	r4, [sp, #200]	; 0xc8
   18338:	ldrd	r0, [sp, #168]	; 0xa8
   1833c:	adds	r4, sl, r6
   18340:	adc	r5, fp, r7
   18344:	mov	sl, r4
   18348:	mov	fp, r5
   1834c:	ldrd	r4, [sp, #200]	; 0xc8
   18350:	strd	sl, [sp, #232]	; 0xe8
   18354:	lsl	r2, r2, #1
   18358:	eor	r0, r0, r4
   1835c:	eor	r1, r1, r5
   18360:	mov	r4, r0
   18364:	mov	r5, r1
   18368:	ldrd	r0, [sp, #192]	; 0xc0
   1836c:	orr	r3, r2, r3, lsr #31
   18370:	lsr	ip, r4, #16
   18374:	eor	r0, r0, sl
   18378:	eor	r1, r1, fp
   1837c:	ldrd	sl, [sp, #152]	; 0x98
   18380:	str	r3, [sp, #144]	; 0x90
   18384:	orr	r2, ip, r5, lsl #16
   18388:	lsr	lr, sl, #16
   1838c:	orr	r3, lr, fp, lsl #16
   18390:	str	r3, [sp, #152]	; 0x98
   18394:	lsr	r3, fp, #16
   18398:	orr	r3, r3, sl, lsl #16
   1839c:	lsr	lr, r0, #16
   183a0:	lsr	ip, r5, #16
   183a4:	str	r3, [sp, #156]	; 0x9c
   183a8:	orr	r3, ip, r4, lsl #16
   183ac:	orr	ip, lr, r1, lsl #16
   183b0:	lsr	r1, r1, #16
   183b4:	orr	r1, r1, r0, lsl #16
   183b8:	ldrd	r6, [sp, #152]	; 0x98
   183bc:	str	r1, [sp, #172]	; 0xac
   183c0:	ldrd	r0, [sp, #240]	; 0xf0
   183c4:	ldrd	r4, [sp, #216]	; 0xd8
   183c8:	str	ip, [sp, #168]	; 0xa8
   183cc:	adds	r0, r0, r6
   183d0:	adc	r1, r1, r7
   183d4:	mov	r7, r1
   183d8:	adds	r4, r4, r2
   183dc:	add	r1, sp, #264	; 0x108
   183e0:	adc	r5, r5, r3
   183e4:	mov	r6, r0
   183e8:	mov	sl, r4
   183ec:	ldrd	r0, [r1]
   183f0:	mov	fp, r5
   183f4:	ldrd	r4, [sp, #168]	; 0xa8
   183f8:	strd	sl, [sp, #216]	; 0xd8
   183fc:	adds	r4, r4, r0
   18400:	adc	r5, r5, r1
   18404:	mov	r0, r4
   18408:	mov	r1, r5
   1840c:	ldrd	r4, [sp, #8]
   18410:	strd	r0, [sp, #192]	; 0xc0
   18414:	ldrd	r0, [sp, #208]	; 0xd0
   18418:	strd	r6, [sp, #208]	; 0xd0
   1841c:	adds	r4, r4, r0
   18420:	adc	r5, r5, r1
   18424:	add	r1, sp, #264	; 0x108
   18428:	strd	r4, [r1]
   1842c:	ldrd	r4, [sp, #88]	; 0x58
   18430:	ldrd	r0, [sp, #192]	; 0xc0
   18434:	adds	r4, r4, r8
   18438:	adc	r5, r5, r9
   1843c:	mov	r8, r4
   18440:	mov	r9, r5
   18444:	ldrd	r4, [sp, #144]	; 0x90
   18448:	adds	r4, r4, r8
   1844c:	adc	r5, r5, r9
   18450:	strd	r4, [sp, #240]	; 0xf0
   18454:	eor	r4, r4, r2
   18458:	eor	r5, r5, r3
   1845c:	ldrd	r2, [sp, #176]	; 0xb0
   18460:	str	r5, [sp, #176]	; 0xb0
   18464:	str	r4, [sp, #180]	; 0xb4
   18468:	ldrd	r8, [sp, #176]	; 0xb0
   1846c:	eor	r2, r2, sl
   18470:	eor	r3, r3, fp
   18474:	ldrd	sl, [sp, #160]	; 0xa0
   18478:	mov	r4, r0
   1847c:	adds	r0, r0, r8
   18480:	eor	sl, sl, r6
   18484:	eor	fp, fp, r7
   18488:	mov	r5, r1
   1848c:	adc	r1, r1, r9
   18490:	ldrd	r8, [sp, #144]	; 0x90
   18494:	mov	r6, sl
   18498:	mov	r7, fp
   1849c:	ldrd	sl, [sp, #184]	; 0xb8
   184a0:	eor	r8, r8, r0
   184a4:	eor	r9, r9, r1
   184a8:	eor	r4, r4, sl
   184ac:	strd	r0, [sp, #248]	; 0xf8
   184b0:	eor	r5, r5, fp
   184b4:	mov	r0, r8
   184b8:	ldrd	sl, [sp, #232]	; 0xe8
   184bc:	mov	r1, r9
   184c0:	ldrd	r8, [sp, #96]	; 0x60
   184c4:	lsl	ip, r3, #1
   184c8:	orr	ip, ip, r2, lsr #31
   184cc:	lsl	r2, r2, #1
   184d0:	adds	r8, r8, sl
   184d4:	orr	r3, r2, r3, lsr #31
   184d8:	adc	r9, r9, fp
   184dc:	str	ip, [sp, #164]	; 0xa4
   184e0:	str	r3, [sp, #160]	; 0xa0
   184e4:	ldrd	sl, [sp, #160]	; 0xa0
   184e8:	lsl	r3, r7, #1
   184ec:	orr	r3, r3, r6, lsr #31
   184f0:	adds	sl, sl, r8
   184f4:	adc	fp, fp, r9
   184f8:	str	r3, [sp, #148]	; 0x94
   184fc:	strd	sl, [sp, #192]	; 0xc0
   18500:	ldrd	r2, [sp, #200]	; 0xc8
   18504:	ldrd	sl, [sp, #32]
   18508:	lsl	lr, r5, #1
   1850c:	lsl	ip, r6, #1
   18510:	adds	sl, sl, r2
   18514:	adc	fp, fp, r3
   18518:	mov	r8, sl
   1851c:	ldrd	r2, [sp, #136]	; 0x88
   18520:	mov	r9, fp
   18524:	ldrd	sl, [sp, #192]	; 0xc0
   18528:	orr	ip, ip, r7, lsr #31
   1852c:	orr	r7, lr, r4, lsr #31
   18530:	str	r7, [sp, #140]	; 0x8c
   18534:	eor	r2, r2, sl
   18538:	ldrd	r6, [sp, #240]	; 0xf0
   1853c:	eor	r3, r3, fp
   18540:	ldrd	sl, [sp, #24]
   18544:	str	ip, [sp, #144]	; 0x90
   18548:	lsl	lr, r4, #1
   1854c:	adds	sl, sl, r6
   18550:	adc	fp, fp, r7
   18554:	ldrd	r6, [sp, #144]	; 0x90
   18558:	lsr	ip, r0, #24
   1855c:	orr	r4, ip, r1, lsl #8
   18560:	adds	r6, r6, r8
   18564:	orr	r5, lr, r5, lsr #31
   18568:	lsr	r1, r1, #24
   1856c:	adc	r7, r7, r9
   18570:	str	r5, [sp, #136]	; 0x88
   18574:	orr	r5, r1, r0, lsl #8
   18578:	add	r1, sp, #256	; 0x100
   1857c:	mov	r0, r6
   18580:	strd	r6, [r1]
   18584:	mov	r1, r7
   18588:	ldrd	r6, [sp, #168]	; 0xa8
   1858c:	add	ip, sp, #264	; 0x108
   18590:	strd	sl, [sp, #200]	; 0xc8
   18594:	eor	r6, r6, r0
   18598:	eor	r7, r7, r1
   1859c:	ldrd	sl, [ip]
   185a0:	mov	r0, r6
   185a4:	mov	r1, r7
   185a8:	ldrd	r6, [sp, #136]	; 0x88
   185ac:	str	r3, [sp, #184]	; 0xb8
   185b0:	str	r2, [sp, #188]	; 0xbc
   185b4:	adds	sl, sl, r6
   185b8:	adc	fp, fp, r7
   185bc:	ldrd	r6, [sp, #200]	; 0xc8
   185c0:	ldrd	r2, [sp, #152]	; 0x98
   185c4:	strd	sl, [sp, #232]	; 0xe8
   185c8:	adds	r6, r6, r4
   185cc:	adc	r7, r7, r5
   185d0:	mov	r8, r6
   185d4:	mov	r9, r7
   185d8:	ldrd	r6, [sp, #176]	; 0xb0
   185dc:	eor	r2, r2, sl
   185e0:	eor	r3, r3, fp
   185e4:	eor	r6, r6, r8
   185e8:	eor	r7, r7, r9
   185ec:	strd	r2, [sp, #168]	; 0xa8
   185f0:	mov	sl, r6
   185f4:	ldrd	r2, [sp, #184]	; 0xb8
   185f8:	mov	fp, r7
   185fc:	ldrd	r6, [sp, #208]	; 0xd0
   18600:	strd	r8, [sp, #240]	; 0xf0
   18604:	mov	r8, r1
   18608:	adds	r6, r6, r2
   1860c:	adc	r7, r7, r3
   18610:	ldrd	r2, [sp, #160]	; 0xa0
   18614:	strd	r6, [ip]
   18618:	mov	r9, r0
   1861c:	eor	r3, r3, r7
   18620:	mov	r7, r3
   18624:	ldr	r3, [sp, #172]	; 0xac
   18628:	eor	r2, r2, r6
   1862c:	mov	r6, r2
   18630:	str	r3, [sp, #152]	; 0x98
   18634:	ldr	r2, [sp, #168]	; 0xa8
   18638:	ldrd	r0, [sp, #224]	; 0xe0
   1863c:	lsr	r3, sl, #16
   18640:	str	r2, [sp, #156]	; 0x9c
   18644:	adds	r0, r0, r8
   18648:	adc	r1, r1, r9
   1864c:	orr	r3, r3, fp, lsl #16
   18650:	strd	r0, [sp, #200]	; 0xc8
   18654:	str	r3, [sp, #160]	; 0xa0
   18658:	ldrd	r0, [sp, #152]	; 0x98
   1865c:	ldrd	r2, [sp, #216]	; 0xd8
   18660:	lsr	lr, fp, #16
   18664:	lsr	ip, r6, #24
   18668:	adds	r2, r2, r0
   1866c:	adc	r3, r3, r1
   18670:	ldrd	r0, [sp, #144]	; 0x90
   18674:	strd	r2, [sp, #208]	; 0xd0
   18678:	ldrd	r2, [sp, #200]	; 0xc8
   1867c:	eor	r0, r0, r2
   18680:	eor	r1, r1, r3
   18684:	orr	r3, lr, sl, lsl #16
   18688:	strd	r0, [sp, #176]	; 0xb0
   1868c:	ldrd	sl, [sp, #136]	; 0x88
   18690:	ldrd	r0, [sp, #208]	; 0xd0
   18694:	str	r3, [sp, #164]	; 0xa4
   18698:	ldrd	r2, [sp, #160]	; 0xa0
   1869c:	eor	sl, sl, r0
   186a0:	eor	fp, fp, r1
   186a4:	ldrd	r0, [sp, #192]	; 0xc0
   186a8:	strd	sl, [sp, #136]	; 0x88
   186ac:	ldrd	sl, [sp, #48]	; 0x30
   186b0:	add	lr, sp, #256	; 0x100
   186b4:	adds	sl, sl, r0
   186b8:	adc	fp, fp, r1
   186bc:	ldrd	r0, [sp, #248]	; 0xf8
   186c0:	adds	r0, r0, r2
   186c4:	adc	r1, r1, r3
   186c8:	orr	r3, ip, r7, lsl #8
   186cc:	lsr	ip, r7, #24
   186d0:	str	r3, [sp, #192]	; 0xc0
   186d4:	orr	r3, ip, r6, lsl #8
   186d8:	str	r3, [sp, #196]	; 0xc4
   186dc:	strd	r0, [sp, #224]	; 0xe0
   186e0:	eor	r0, r0, r4
   186e4:	eor	r1, r1, r5
   186e8:	ldrd	r4, [sp, #192]	; 0xc0
   186ec:	strd	r0, [sp, #144]	; 0x90
   186f0:	ldrd	r6, [sp, #40]	; 0x28
   186f4:	adds	r4, r4, sl
   186f8:	adc	r5, r5, fp
   186fc:	mov	r0, r4
   18700:	mov	r1, r5
   18704:	ldrd	r4, [lr]
   18708:	ldrd	r2, [sp, #176]	; 0xb0
   1870c:	strd	r0, [sp, #248]	; 0xf8
   18710:	adds	r6, r6, r4
   18714:	adc	r7, r7, r5
   18718:	lsr	ip, r2, #24
   1871c:	orr	r3, ip, r3, lsl #8
   18720:	ldrd	r4, [sp, #16]
   18724:	strd	r6, [sp, #216]	; 0xd8
   18728:	str	r3, [sp, #168]	; 0xa8
   1872c:	ldrd	r6, [sp, #184]	; 0xb8
   18730:	ldrd	sl, [sp, #232]	; 0xe8
   18734:	ldrd	r2, [sp, #144]	; 0x90
   18738:	eor	r6, r6, r0
   1873c:	adds	r4, r4, sl
   18740:	eor	r7, r7, r1
   18744:	adc	r5, r5, fp
   18748:	ldrd	r0, [sp, #136]	; 0x88
   1874c:	mov	sl, r4
   18750:	mov	r4, r2
   18754:	mov	fp, r5
   18758:	lsl	ip, r3, #1
   1875c:	mov	r5, r3
   18760:	lsl	lr, r4, #1
   18764:	orr	r3, ip, r2, lsr #31
   18768:	str	r3, [sp, #148]	; 0x94
   1876c:	lsr	ip, r0, #24
   18770:	orr	r3, lr, r5, lsr #31
   18774:	mov	r4, r0
   18778:	str	r3, [sp, #144]	; 0x90
   1877c:	orr	r3, ip, r1, lsl #8
   18780:	lsr	r1, r1, #24
   18784:	str	r3, [sp, #136]	; 0x88
   18788:	orr	r3, r1, r4, lsl #8
   1878c:	ldrd	r0, [sp, #176]	; 0xb0
   18790:	str	r3, [sp, #140]	; 0x8c
   18794:	lsr	ip, r6, #16
   18798:	lsr	r3, r1, #24
   1879c:	orr	r3, r3, r0, lsl #8
   187a0:	str	r3, [sp, #172]	; 0xac
   187a4:	ldrd	r4, [sp, #168]	; 0xa8
   187a8:	ldrd	r0, [sp, #216]	; 0xd8
   187ac:	ldrd	r2, [sp, #136]	; 0x88
   187b0:	orr	ip, ip, r7, lsl #16
   187b4:	adds	r0, r0, r4
   187b8:	adc	r1, r1, r5
   187bc:	adds	r2, r2, sl
   187c0:	adc	r3, r3, fp
   187c4:	mov	sl, r2
   187c8:	mov	fp, r3
   187cc:	ldrd	r2, [sp, #56]	; 0x38
   187d0:	ldrd	r4, [sp, #144]	; 0x90
   187d4:	str	ip, [sp, #184]	; 0xb8
   187d8:	adds	r2, r2, sl
   187dc:	lsr	ip, r7, #16
   187e0:	strd	r0, [sp, #232]	; 0xe8
   187e4:	adc	r3, r3, fp
   187e8:	eor	r0, r0, r8
   187ec:	adds	r4, r4, r2
   187f0:	orr	ip, ip, r6, lsl #16
   187f4:	str	ip, [sp, #188]	; 0xbc
   187f8:	eor	r1, r1, r9
   187fc:	adc	r5, r5, r3
   18800:	mov	r2, r4
   18804:	mov	r3, r5
   18808:	lsr	ip, r0, #16
   1880c:	ldrd	r4, [sp, #184]	; 0xb8
   18810:	orr	ip, ip, r1, lsl #16
   18814:	lsr	r1, r1, #16
   18818:	orr	r1, r1, r0, lsl #16
   1881c:	str	ip, [sp, #176]	; 0xb0
   18820:	eor	r4, r4, r2
   18824:	eor	r5, r5, r3
   18828:	str	r1, [sp, #180]	; 0xb4
   1882c:	ldrd	r0, [sp, #176]	; 0xb0
   18830:	mov	r6, r4
   18834:	mov	r7, r5
   18838:	ldrd	r4, [sp, #200]	; 0xc8
   1883c:	str	r7, [sp, #200]	; 0xc8
   18840:	str	r6, [sp, #204]	; 0xcc
   18844:	adds	r0, r0, r4
   18848:	adc	r1, r1, r5
   1884c:	mov	r4, r0
   18850:	mov	r5, r1
   18854:	ldrd	r0, [sp, #152]	; 0x98
   18858:	ldrd	r8, [sp, #200]	; 0xc8
   1885c:	ldrd	r6, [sp, #144]	; 0x90
   18860:	eor	r0, r0, sl
   18864:	eor	r1, r1, fp
   18868:	mov	sl, r0
   1886c:	mov	fp, r1
   18870:	ldrd	r0, [sp, #168]	; 0xa8
   18874:	adds	r8, r8, r4
   18878:	adc	r9, r9, r5
   1887c:	eor	r1, r1, r5
   18880:	eor	r0, r0, r4
   18884:	mov	r5, r9
   18888:	mov	r4, r8
   1888c:	add	ip, sp, #256	; 0x100
   18890:	eor	r6, r6, r8
   18894:	eor	r7, r7, r9
   18898:	strd	r4, [ip]
   1889c:	mov	r4, r6
   188a0:	mov	r5, r7
   188a4:	ldrd	r6, [sp, #64]	; 0x40
   188a8:	lsr	ip, sl, #16
   188ac:	orr	ip, ip, fp, lsl #16
   188b0:	adds	r6, r6, r2
   188b4:	str	ip, [sp, #144]	; 0x90
   188b8:	lsr	ip, fp, #16
   188bc:	adc	r7, r7, r3
   188c0:	orr	r3, ip, sl, lsl #16
   188c4:	str	r3, [sp, #148]	; 0x94
   188c8:	ldrd	sl, [sp, #72]	; 0x48
   188cc:	ldrd	r8, [sp, #240]	; 0xf0
   188d0:	lsr	r3, r4, #24
   188d4:	orr	r3, r3, r5, lsl #8
   188d8:	adds	sl, sl, r8
   188dc:	adc	fp, fp, r9
   188e0:	ldrd	r8, [sp, #144]	; 0x90
   188e4:	strd	sl, [sp, #168]	; 0xa8
   188e8:	ldrd	sl, [sp, #208]	; 0xd0
   188ec:	str	r3, [sp, #152]	; 0x98
   188f0:	ldrd	r2, [sp, #136]	; 0x88
   188f4:	adds	sl, sl, r8
   188f8:	adc	fp, fp, r9
   188fc:	eor	r2, r2, sl
   18900:	eor	r3, r3, fp
   18904:	lsr	ip, r5, #24
   18908:	strd	r2, [sp, #136]	; 0x88
   1890c:	orr	r3, ip, r4, lsl #8
   18910:	str	r3, [sp, #156]	; 0x9c
   18914:	ldrd	r8, [sp, #152]	; 0x98
   18918:	ldrd	r2, [sp, #136]	; 0x88
   1891c:	ldrd	r4, [sp, #200]	; 0xc8
   18920:	adds	r8, r8, r6
   18924:	lsl	ip, r1, #1
   18928:	adc	r9, r9, r7
   1892c:	strd	sl, [sp, #216]	; 0xd8
   18930:	orr	fp, ip, r0, lsr #31
   18934:	lsl	ip, r3, #1
   18938:	add	r3, sp, #264	; 0x108
   1893c:	orr	r7, ip, r2, lsr #31
   18940:	eor	r4, r4, r8
   18944:	eor	r5, r5, r9
   18948:	strd	r8, [sp, #240]	; 0xf0
   1894c:	lsl	lr, r2, #1
   18950:	ldrd	r8, [r3]
   18954:	ldrd	r2, [sp, #184]	; 0xb8
   18958:	lsl	r0, r0, #1
   1895c:	orr	sl, r0, r1, lsr #31
   18960:	ldrd	r0, [sp, #168]	; 0xa8
   18964:	adds	r8, r8, r2
   18968:	adc	r9, r9, r3
   1896c:	ldrd	r2, [sp, #144]	; 0x90
   18970:	adds	r0, r0, sl
   18974:	adc	r1, r1, fp
   18978:	add	ip, sp, #264	; 0x108
   1897c:	eor	r3, r3, r1
   18980:	strd	r0, [ip]
   18984:	mov	r1, r3
   18988:	ldr	r3, [sp, #140]	; 0x8c
   1898c:	lsr	ip, r4, #16
   18990:	eor	r2, r2, r0
   18994:	orr	r6, lr, r3, lsr #31
   18998:	orr	r3, ip, r5, lsl #16
   1899c:	str	r3, [sp, #144]	; 0x90
   189a0:	lsr	r3, r5, #16
   189a4:	orr	r3, r3, r4, lsl #16
   189a8:	str	r3, [sp, #148]	; 0x94
   189ac:	add	r3, sp, #256	; 0x100
   189b0:	str	r2, [sp, #172]	; 0xac
   189b4:	ldrd	r4, [r3]
   189b8:	ldrd	r2, [sp, #144]	; 0x90
   189bc:	str	r1, [sp, #168]	; 0xa8
   189c0:	adds	r4, r4, r2
   189c4:	adc	r5, r5, r3
   189c8:	strd	r4, [sp, #200]	; 0xc8
   189cc:	ldrd	r4, [sp, #168]	; 0xa8
   189d0:	adds	r2, r8, r4
   189d4:	adc	r3, r9, r5
   189d8:	ldrd	r4, [sp, #120]	; 0x78
   189dc:	strd	r2, [sp, #208]	; 0xd0
   189e0:	ldrd	r2, [sp, #248]	; 0xf8
   189e4:	adds	r4, r4, r2
   189e8:	adc	r5, r5, r3
   189ec:	adds	r0, r4, r6
   189f0:	adc	r1, r5, r7
   189f4:	ldrd	r4, [sp, #176]	; 0xb0
   189f8:	ldrd	r2, [sp, #192]	; 0xc0
   189fc:	eor	r5, r5, r1
   18a00:	eor	r3, r3, r9
   18a04:	eor	r2, r2, r8
   18a08:	lsl	ip, r3, #1
   18a0c:	orr	ip, ip, r2, lsr #31
   18a10:	lsl	r2, r2, #1
   18a14:	orr	r3, r2, r3, lsr #31
   18a18:	str	r3, [sp, #136]	; 0x88
   18a1c:	ldrd	r2, [sp, #224]	; 0xe0
   18a20:	eor	r4, r4, r0
   18a24:	mov	r8, r5
   18a28:	adds	r2, r2, r5
   18a2c:	adc	r3, r3, r4
   18a30:	mov	r9, r4
   18a34:	mov	r5, r3
   18a38:	mov	r4, r2
   18a3c:	strd	r2, [sp, #224]	; 0xe0
   18a40:	eor	r4, r4, r6
   18a44:	ldrd	r2, [sp, #104]	; 0x68
   18a48:	eor	r5, r5, r7
   18a4c:	ldrd	r6, [sp, #232]	; 0xe8
   18a50:	str	ip, [sp, #140]	; 0x8c
   18a54:	strd	r4, [sp, #184]	; 0xb8
   18a58:	ldrd	r4, [sp, #136]	; 0x88
   18a5c:	adds	r2, r2, r6
   18a60:	adc	r3, r3, r7
   18a64:	ldrd	r6, [sp, #160]	; 0xa0
   18a68:	adds	r4, r4, r2
   18a6c:	adc	r5, r5, r3
   18a70:	mov	r2, r4
   18a74:	mov	r3, r5
   18a78:	eor	r6, r6, r4
   18a7c:	eor	r7, r7, r5
   18a80:	ldrd	r4, [sp, #128]	; 0x80
   18a84:	ldr	ip, [sp, #184]	; 0xb8
   18a88:	str	r7, [sp, #160]	; 0xa0
   18a8c:	adds	r4, r4, r0
   18a90:	adc	r5, r5, r1
   18a94:	mov	r0, r4
   18a98:	mov	r1, r5
   18a9c:	ldrd	r4, [sp, #184]	; 0xb8
   18aa0:	lsr	ip, ip, #24
   18aa4:	str	r6, [sp, #164]	; 0xa4
   18aa8:	orr	ip, ip, r5, lsl #8
   18aac:	str	ip, [sp, #176]	; 0xb0
   18ab0:	lsr	ip, r5, #24
   18ab4:	orr	ip, ip, r4, lsl #8
   18ab8:	str	ip, [sp, #180]	; 0xb4
   18abc:	ldrd	r4, [sp, #176]	; 0xb0
   18ac0:	ldrd	r6, [sp, #208]	; 0xd0
   18ac4:	adds	r4, r4, r0
   18ac8:	adc	r5, r5, r1
   18acc:	eor	r6, r6, sl
   18ad0:	eor	r7, r7, fp
   18ad4:	mov	r0, r4
   18ad8:	ldrd	sl, [sp, #160]	; 0xa0
   18adc:	mov	r1, r5
   18ae0:	ldrd	r4, [sp, #216]	; 0xd8
   18ae4:	strd	r0, [sp, #232]	; 0xe8
   18ae8:	eor	r0, r0, r8
   18aec:	adds	r4, r4, sl
   18af0:	adc	r5, r5, fp
   18af4:	eor	r1, r1, r9
   18af8:	mov	sl, r4
   18afc:	mov	fp, r5
   18b00:	mov	r4, r0
   18b04:	mov	r5, r1
   18b08:	ldrd	r0, [sp, #136]	; 0x88
   18b0c:	ldrd	r8, [sp, #80]	; 0x50
   18b10:	strd	sl, [sp, #216]	; 0xd8
   18b14:	eor	r0, r0, sl
   18b18:	eor	r1, r1, fp
   18b1c:	lsr	lr, r6, #24
   18b20:	strd	r0, [sp, #136]	; 0x88
   18b24:	add	r1, sp, #264	; 0x108
   18b28:	lsr	ip, r4, #16
   18b2c:	ldrd	sl, [r1]
   18b30:	ldrd	r0, [sp, #152]	; 0x98
   18b34:	adds	r8, r8, sl
   18b38:	adc	r9, r9, fp
   18b3c:	ldrd	sl, [sp, #112]	; 0x70
   18b40:	adds	sl, sl, r2
   18b44:	adc	fp, fp, r3
   18b48:	add	r3, sp, #256	; 0x100
   18b4c:	strd	sl, [r3]
   18b50:	ldrd	r2, [sp, #200]	; 0xc8
   18b54:	orr	sl, lr, r7, lsl #8
   18b58:	eor	r1, r1, r3
   18b5c:	mov	r3, r1
   18b60:	orr	r1, ip, r5, lsl #16
   18b64:	lsr	ip, r7, #24
   18b68:	orr	fp, ip, r6, lsl #8
   18b6c:	eor	r0, r0, r2
   18b70:	adds	r6, r8, sl
   18b74:	adc	r7, r9, fp
   18b78:	mov	r2, r0
   18b7c:	str	r1, [sp, #184]	; 0xb8
   18b80:	ldrd	r8, [sp, #136]	; 0x88
   18b84:	ldrd	r0, [sp, #168]	; 0xa8
   18b88:	strd	r6, [sp, #192]	; 0xc0
   18b8c:	lsr	ip, r8, #24
   18b90:	eor	r6, r6, r0
   18b94:	eor	r7, r7, r1
   18b98:	mov	r0, r6
   18b9c:	mov	r1, r7
   18ba0:	ldrd	r6, [sp, #176]	; 0xb0
   18ba4:	strd	r0, [sp, #168]	; 0xa8
   18ba8:	orr	r1, ip, r9, lsl #8
   18bac:	lsr	ip, r5, #16
   18bb0:	str	r1, [sp, #152]	; 0x98
   18bb4:	orr	r1, ip, r4, lsl #16
   18bb8:	str	r1, [sp, #188]	; 0xbc
   18bbc:	ldrd	r0, [sp, #184]	; 0xb8
   18bc0:	ldrd	r4, [sp, #224]	; 0xe0
   18bc4:	lsl	lr, r3, #1
   18bc8:	adds	r4, r4, r0
   18bcc:	adc	r5, r5, r1
   18bd0:	lsr	r1, r9, #24
   18bd4:	orr	r1, r1, r8, lsl #8
   18bd8:	str	r1, [sp, #156]	; 0x9c
   18bdc:	add	r1, sp, #256	; 0x100
   18be0:	ldrd	r8, [sp, #152]	; 0x98
   18be4:	ldrd	r0, [r1]
   18be8:	eor	r7, r7, r5
   18bec:	strd	r4, [sp, #248]	; 0xf8
   18bf0:	adds	r0, r0, r8
   18bf4:	adc	r1, r1, r9
   18bf8:	ldrd	r8, [sp, #160]	; 0xa0
   18bfc:	strd	r0, [sp, #224]	; 0xe0
   18c00:	mov	r5, r7
   18c04:	eor	r8, r8, r0
   18c08:	eor	r9, r9, r1
   18c0c:	mov	r0, r8
   18c10:	mov	r1, r9
   18c14:	ldrd	r8, [sp, #168]	; 0xa8
   18c18:	eor	r6, r6, r4
   18c1c:	orr	r7, lr, r2, lsr #31
   18c20:	lsr	ip, r8, #16
   18c24:	lsl	lr, r5, #1
   18c28:	lsl	r2, r2, #1
   18c2c:	str	r7, [sp, #140]	; 0x8c
   18c30:	orr	r3, r2, r3, lsr #31
   18c34:	mov	r4, r6
   18c38:	orr	r2, ip, r9, lsl #16
   18c3c:	ldrd	r8, [sp, #240]	; 0xf0
   18c40:	orr	ip, lr, r6, lsr #31
   18c44:	ldrd	r6, [sp, #120]	; 0x78
   18c48:	lsl	r4, r4, #1
   18c4c:	str	r3, [sp, #136]	; 0x88
   18c50:	adds	r6, r6, r8
   18c54:	adc	r7, r7, r9
   18c58:	orr	r5, r4, r5, lsr #31
   18c5c:	strd	r6, [sp, #120]	; 0x78
   18c60:	ldrd	r8, [sp, #192]	; 0xc0
   18c64:	ldrd	r6, [sp, #32]
   18c68:	str	r5, [sp, #160]	; 0xa0
   18c6c:	ldrd	r4, [sp, #136]	; 0x88
   18c70:	adds	r8, r8, r6
   18c74:	adc	r9, r9, r7
   18c78:	adds	r4, r4, r8
   18c7c:	str	ip, [sp, #164]	; 0xa4
   18c80:	adc	r5, r5, r9
   18c84:	ldr	ip, [sp, #172]	; 0xac
   18c88:	ldr	r6, [sp, #168]	; 0xa8
   18c8c:	mov	r8, r4
   18c90:	mov	r9, r5
   18c94:	ldrd	r4, [sp, #208]	; 0xd0
   18c98:	lsr	lr, ip, #16
   18c9c:	orr	r3, lr, r6, lsl #16
   18ca0:	adds	r4, r4, r2
   18ca4:	adc	r5, r5, r3
   18ca8:	lsr	ip, r0, #16
   18cac:	orr	r6, ip, r1, lsl #16
   18cb0:	lsr	r1, r1, #16
   18cb4:	orr	r7, r1, r0, lsl #16
   18cb8:	strd	r4, [sp, #168]	; 0xa8
   18cbc:	ldrd	r0, [sp, #120]	; 0x78
   18cc0:	ldrd	r4, [sp, #160]	; 0xa0
   18cc4:	adds	r4, r4, r0
   18cc8:	adc	r5, r5, r1
   18ccc:	ldrd	r0, [sp, #168]	; 0xa8
   18cd0:	strd	r4, [sp, #208]	; 0xd0
   18cd4:	eor	r0, r0, sl
   18cd8:	eor	r1, r1, fp
   18cdc:	eor	sl, r6, r8
   18ce0:	eor	fp, r7, r9
   18ce4:	strd	sl, [sp, #176]	; 0xb0
   18ce8:	ldr	ip, [sp, #180]	; 0xb4
   18cec:	mov	sl, r4
   18cf0:	mov	fp, r5
   18cf4:	ldrd	r4, [sp, #216]	; 0xd8
   18cf8:	str	ip, [sp, #120]	; 0x78
   18cfc:	ldr	ip, [sp, #176]	; 0xb0
   18d00:	eor	fp, fp, r3
   18d04:	eor	sl, sl, r2
   18d08:	lsl	r3, r1, #1
   18d0c:	adds	r4, r4, r6
   18d10:	str	ip, [sp, #124]	; 0x7c
   18d14:	mov	r2, sl
   18d18:	orr	r3, r3, r0, lsr #31
   18d1c:	mov	sl, fp
   18d20:	adc	r5, r5, r7
   18d24:	mov	fp, r2
   18d28:	str	r3, [sp, #36]	; 0x24
   18d2c:	ldrd	r6, [sp, #248]	; 0xf8
   18d30:	ldrd	r2, [sp, #120]	; 0x78
   18d34:	lsl	ip, r0, #1
   18d38:	strd	r4, [sp, #192]	; 0xc0
   18d3c:	adds	r6, r6, r2
   18d40:	adc	r7, r7, r3
   18d44:	orr	r3, ip, r1, lsr #31
   18d48:	str	r3, [sp, #32]
   18d4c:	ldrd	r0, [sp, #224]	; 0xe0
   18d50:	ldrd	r2, [sp, #64]	; 0x40
   18d54:	adds	r4, r4, sl
   18d58:	adc	r5, r5, fp
   18d5c:	adds	r2, r2, r0
   18d60:	strd	r6, [sp, #176]	; 0xb0
   18d64:	adc	r3, r3, r1
   18d68:	mov	r6, r4
   18d6c:	ldrd	r0, [sp, #176]	; 0xb0
   18d70:	mov	r7, r5
   18d74:	mov	r4, r2
   18d78:	mov	r5, r3
   18d7c:	ldrd	r2, [sp, #136]	; 0x88
   18d80:	eor	r2, r2, r0
   18d84:	eor	r3, r3, r1
   18d88:	mov	r0, r2
   18d8c:	mov	r1, r3
   18d90:	ldrd	r2, [sp, #160]	; 0xa0
   18d94:	strd	r6, [sp, #160]	; 0xa0
   18d98:	lsr	lr, r0, #24
   18d9c:	eor	r2, r2, r6
   18da0:	eor	r3, r3, r7
   18da4:	ldrd	r6, [sp, #32]
   18da8:	lsr	ip, r2, #24
   18dac:	orr	ip, ip, r3, lsl #8
   18db0:	adds	r6, r6, r4
   18db4:	adc	r7, r7, r5
   18db8:	ldrd	r4, [sp, #184]	; 0xb8
   18dbc:	strd	r6, [sp, #184]	; 0xb8
   18dc0:	lsr	r3, r3, #24
   18dc4:	eor	r5, r5, r7
   18dc8:	orr	r7, lr, r1, lsl #8
   18dcc:	eor	r4, r4, r6
   18dd0:	str	r7, [sp, #136]	; 0x88
   18dd4:	ldrd	r6, [sp, #56]	; 0x38
   18dd8:	lsr	r1, r1, #24
   18ddc:	orr	r1, r1, r0, lsl #8
   18de0:	adds	r6, r6, r8
   18de4:	adc	r7, r7, r9
   18de8:	mov	r8, r6
   18dec:	mov	r9, r7
   18df0:	str	r1, [sp, #140]	; 0x8c
   18df4:	ldrd	r6, [sp, #208]	; 0xd0
   18df8:	ldrd	r0, [sp, #72]	; 0x48
   18dfc:	orr	r3, r3, r2, lsl #8
   18e00:	str	ip, [sp, #64]	; 0x40
   18e04:	str	r5, [sp, #56]	; 0x38
   18e08:	str	r4, [sp, #60]	; 0x3c
   18e0c:	str	r3, [sp, #68]	; 0x44
   18e10:	ldrd	r2, [sp, #136]	; 0x88
   18e14:	adds	r0, r0, r6
   18e18:	adc	r1, r1, r7
   18e1c:	adds	r2, r2, r8
   18e20:	adc	r3, r3, r9
   18e24:	mov	r8, r2
   18e28:	mov	r9, r3
   18e2c:	ldrd	r2, [sp, #64]	; 0x40
   18e30:	ldrd	r4, [sp, #120]	; 0x78
   18e34:	ldrd	r6, [sp, #56]	; 0x38
   18e38:	adds	r2, r2, r0
   18e3c:	adc	r3, r3, r1
   18e40:	ldrd	r0, [sp, #200]	; 0xc8
   18e44:	eor	r4, r4, r8
   18e48:	strd	r2, [sp, #200]	; 0xc8
   18e4c:	eor	r5, r5, r9
   18e50:	eor	r2, r2, sl
   18e54:	eor	r3, r3, fp
   18e58:	adds	r0, r0, r6
   18e5c:	strd	r8, [sp, #208]	; 0xd0
   18e60:	mov	r8, r4
   18e64:	mov	r9, r5
   18e68:	mov	r4, r2
   18e6c:	mov	r5, r3
   18e70:	ldrd	r2, [sp, #32]
   18e74:	adc	r1, r1, r7
   18e78:	ldrd	sl, [sp, #192]	; 0xc0
   18e7c:	ldrd	r6, [sp, #152]	; 0x98
   18e80:	eor	r2, r2, r0
   18e84:	strd	r0, [sp, #216]	; 0xd8
   18e88:	eor	r7, r7, fp
   18e8c:	mov	r0, r2
   18e90:	eor	r3, r3, r1
   18e94:	eor	r6, r6, sl
   18e98:	mov	r1, r3
   18e9c:	lsr	ip, r8, #16
   18ea0:	lsr	r3, r0, #24
   18ea4:	lsl	lr, r7, #1
   18ea8:	lsr	r2, r4, #16
   18eac:	orr	ip, ip, r9, lsl #16
   18eb0:	orr	r3, r3, r1, lsl #8
   18eb4:	orr	lr, lr, r6, lsr #31
   18eb8:	lsr	r9, r9, #16
   18ebc:	lsr	r1, r1, #24
   18ec0:	str	ip, [sp, #72]	; 0x48
   18ec4:	str	lr, [sp, #156]	; 0x9c
   18ec8:	orr	ip, r2, r5, lsl #16
   18ecc:	lsl	lr, r6, #1
   18ed0:	orr	r9, r9, r8, lsl #16
   18ed4:	orr	r1, r1, r0, lsl #8
   18ed8:	ldrd	sl, [sp, #184]	; 0xb8
   18edc:	str	ip, [sp, #32]
   18ee0:	str	r3, [sp, #120]	; 0x78
   18ee4:	str	r9, [sp, #76]	; 0x4c
   18ee8:	ldrd	r2, [sp, #128]	; 0x80
   18eec:	str	r1, [sp, #124]	; 0x7c
   18ef0:	lsr	ip, r5, #16
   18ef4:	orr	r1, lr, r7, lsr #31
   18ef8:	str	r1, [sp, #152]	; 0x98
   18efc:	orr	ip, ip, r4, lsl #16
   18f00:	ldrd	r0, [sp, #176]	; 0xb0
   18f04:	ldrd	r4, [sp, #72]	; 0x48
   18f08:	adds	r2, r2, sl
   18f0c:	adc	r3, r3, fp
   18f10:	adds	r0, r0, r4
   18f14:	adc	r1, r1, r5
   18f18:	str	ip, [sp, #36]	; 0x24
   18f1c:	ldrd	r4, [sp, #32]
   18f20:	strd	r0, [sp, #176]	; 0xb0
   18f24:	ldrd	r0, [sp, #160]	; 0xa0
   18f28:	ldrd	r6, [sp, #232]	; 0xe8
   18f2c:	ldrd	sl, [sp, #152]	; 0x98
   18f30:	adds	r0, r0, r4
   18f34:	adc	r1, r1, r5
   18f38:	ldrd	r4, [sp, #120]	; 0x78
   18f3c:	strd	r0, [sp, #160]	; 0xa0
   18f40:	adds	r4, r4, r2
   18f44:	adc	r5, r5, r3
   18f48:	ldrd	r2, [sp, #112]	; 0x70
   18f4c:	strd	r4, [sp, #184]	; 0xb8
   18f50:	ldrd	r4, [sp, #144]	; 0x90
   18f54:	adds	r2, r2, r6
   18f58:	adc	r3, r3, r7
   18f5c:	adds	r0, sl, r2
   18f60:	adc	r1, fp, r3
   18f64:	eor	r4, r4, r0
   18f68:	eor	r5, r5, r1
   18f6c:	mov	r2, r0
   18f70:	mov	r3, r1
   18f74:	mov	r0, r5
   18f78:	mov	r1, r4
   18f7c:	ldrd	r4, [sp, #168]	; 0xa8
   18f80:	ldrd	r6, [sp, #96]	; 0x60
   18f84:	adds	r4, r4, r0
   18f88:	adc	r5, r5, r1
   18f8c:	eor	sl, sl, r4
   18f90:	eor	fp, fp, r5
   18f94:	lsr	ip, sl, #24
   18f98:	orr	r8, ip, fp, lsl #8
   18f9c:	adds	r6, r6, r2
   18fa0:	lsr	ip, fp, #24
   18fa4:	orr	r9, ip, sl, lsl #8
   18fa8:	adc	r7, r7, r3
   18fac:	adds	sl, r6, r8
   18fb0:	adc	fp, r7, r9
   18fb4:	mov	r2, sl
   18fb8:	mov	r3, fp
   18fbc:	eor	r2, r2, r0
   18fc0:	eor	r3, r3, r1
   18fc4:	ldrd	r6, [sp, #184]	; 0xb8
   18fc8:	mov	r0, r2
   18fcc:	mov	r1, r3
   18fd0:	ldrd	r2, [sp, #56]	; 0x38
   18fd4:	lsr	lr, r0, #16
   18fd8:	strd	sl, [sp, #144]	; 0x90
   18fdc:	eor	r2, r2, r6
   18fe0:	eor	r3, r3, r7
   18fe4:	lsr	ip, r2, #16
   18fe8:	orr	r7, lr, r1, lsl #16
   18fec:	lsr	r1, r1, #16
   18ff0:	orr	ip, ip, r3, lsl #16
   18ff4:	orr	r1, r1, r0, lsl #16
   18ff8:	lsr	r3, r3, #16
   18ffc:	str	r7, [sp, #128]	; 0x80
   19000:	str	r1, [sp, #132]	; 0x84
   19004:	orr	r3, r3, r2, lsl #16
   19008:	str	r3, [sp, #100]	; 0x64
   1900c:	ldrd	r2, [sp, #128]	; 0x80
   19010:	ldrd	r6, [sp, #64]	; 0x40
   19014:	ldrd	r0, [sp, #160]	; 0xa0
   19018:	adds	r2, r2, r4
   1901c:	str	ip, [sp, #96]	; 0x60
   19020:	adc	r3, r3, r5
   19024:	eor	r6, r6, r0
   19028:	mov	r4, r2
   1902c:	mov	r5, r3
   19030:	eor	r7, r7, r1
   19034:	ldrd	r2, [sp, #96]	; 0x60
   19038:	ldrd	r0, [sp, #216]	; 0xd8
   1903c:	strd	r4, [sp, #152]	; 0x98
   19040:	eor	r4, r4, r8
   19044:	adds	r0, r0, r2
   19048:	adc	r1, r1, r3
   1904c:	eor	r5, r5, r9
   19050:	mov	sl, r0
   19054:	ldrd	r8, [sp, #136]	; 0x88
   19058:	mov	fp, r1
   1905c:	mov	r0, r4
   19060:	mov	r1, r5
   19064:	ldrd	r4, [sp, #176]	; 0xb0
   19068:	strd	sl, [sp, #136]	; 0x88
   1906c:	lsl	lr, r6, #1
   19070:	eor	r8, r8, r4
   19074:	eor	r9, r9, r5
   19078:	mov	r2, r8
   1907c:	mov	r3, r9
   19080:	ldrd	r8, [sp, #120]	; 0x78
   19084:	lsl	ip, r7, #1
   19088:	orr	r7, lr, r7, lsr #31
   1908c:	eor	r9, r9, fp
   19090:	mov	r5, r9
   19094:	eor	r8, r8, sl
   19098:	lsl	r9, r1, #1
   1909c:	mov	r4, r8
   190a0:	orr	r9, r9, r0, lsr #31
   190a4:	lsl	r8, r3, #1
   190a8:	str	r9, [sp, #124]	; 0x7c
   190ac:	orr	r9, r8, r2, lsr #31
   190b0:	ldrd	sl, [sp, #184]	; 0xb8
   190b4:	str	r9, [sp, #68]	; 0x44
   190b8:	ldrd	r8, [sp, #80]	; 0x50
   190bc:	orr	ip, ip, r6, lsr #31
   190c0:	str	r7, [sp, #56]	; 0x38
   190c4:	adds	r8, r8, sl
   190c8:	ldrd	r6, [sp, #40]	; 0x28
   190cc:	adc	r9, r9, fp
   190d0:	ldrd	sl, [sp, #144]	; 0x90
   190d4:	str	ip, [sp, #60]	; 0x3c
   190d8:	lsl	r0, r0, #1
   190dc:	lsl	ip, r5, #1
   190e0:	lsl	r2, r2, #1
   190e4:	adds	sl, sl, r6
   190e8:	orr	ip, ip, r4, lsr #31
   190ec:	orr	r1, r0, r1, lsr #31
   190f0:	orr	r3, r2, r3, lsr #31
   190f4:	adc	fp, fp, r7
   190f8:	str	ip, [sp, #116]	; 0x74
   190fc:	ldrd	r6, [sp, #16]
   19100:	str	r3, [sp, #64]	; 0x40
   19104:	str	r1, [sp, #120]	; 0x78
   19108:	ldrd	r0, [sp, #200]	; 0xc8
   1910c:	ldrd	r2, [sp, #8]
   19110:	lsl	ip, r4, #1
   19114:	adds	r6, r6, r0
   19118:	adc	r7, r7, r1
   1911c:	mov	r0, r6
   19120:	mov	r1, r7
   19124:	ldrd	r6, [sp, #208]	; 0xd0
   19128:	orr	ip, ip, r5, lsr #31
   1912c:	str	ip, [sp, #112]	; 0x70
   19130:	adds	r2, r2, r6
   19134:	adc	r3, r3, r7
   19138:	ldrd	r6, [sp, #56]	; 0x38
   1913c:	ldrd	r4, [sp, #72]	; 0x48
   19140:	adds	r6, r6, sl
   19144:	adc	r7, r7, fp
   19148:	mov	sl, r6
   1914c:	mov	fp, r7
   19150:	ldrd	r6, [sp, #120]	; 0x78
   19154:	adds	r6, r6, r8
   19158:	adc	r7, r7, r9
   1915c:	strd	r6, [sp, #80]	; 0x50
   19160:	ldrd	r6, [sp, #64]	; 0x40
   19164:	adds	r6, r6, r0
   19168:	adc	r7, r7, r1
   1916c:	ldrd	r0, [sp, #112]	; 0x70
   19170:	mov	r8, r6
   19174:	mov	r9, r7
   19178:	ldrd	r6, [sp, #80]	; 0x50
   1917c:	adds	r0, r0, r2
   19180:	adc	r1, r1, r3
   19184:	eor	r6, r6, r4
   19188:	eor	r7, r7, r5
   1918c:	ldrd	r4, [sp, #32]
   19190:	mov	r2, r0
   19194:	mov	r3, r1
   19198:	ldrd	r0, [sp, #96]	; 0x60
   1919c:	eor	r4, r4, r2
   191a0:	eor	r5, r5, r3
   191a4:	strd	r2, [sp, #144]	; 0x90
   191a8:	ldrd	r2, [sp, #128]	; 0x80
   191ac:	str	r7, [sp, #40]	; 0x28
   191b0:	str	r6, [sp, #44]	; 0x2c
   191b4:	eor	r0, r0, sl
   191b8:	eor	r1, r1, fp
   191bc:	str	r1, [sp, #72]	; 0x48
   191c0:	str	r0, [sp, #76]	; 0x4c
   191c4:	strd	r8, [sp, #96]	; 0x60
   191c8:	ldrd	r0, [sp, #160]	; 0xa0
   191cc:	eor	r2, r2, r8
   191d0:	eor	r3, r3, r9
   191d4:	ldrd	r8, [sp, #40]	; 0x28
   191d8:	str	r3, [sp, #8]
   191dc:	str	r2, [sp, #12]
   191e0:	ldrd	r6, [sp, #176]	; 0xb0
   191e4:	ldrd	r2, [sp, #72]	; 0x48
   191e8:	adds	r0, r0, r8
   191ec:	adc	r1, r1, r9
   191f0:	adds	r6, r6, r2
   191f4:	adc	r7, r7, r3
   191f8:	mov	r2, r6
   191fc:	mov	r3, r7
   19200:	ldrd	r6, [sp, #120]	; 0x78
   19204:	strd	r0, [sp, #128]	; 0x80
   19208:	eor	r6, r6, r0
   1920c:	eor	r7, r7, r1
   19210:	ldrd	r0, [sp, #136]	; 0x88
   19214:	strd	r6, [sp, #32]
   19218:	ldrd	r6, [sp, #8]
   1921c:	adds	r0, r0, r6
   19220:	adc	r1, r1, r7
   19224:	ldrd	r6, [sp, #56]	; 0x38
   19228:	strd	r2, [sp, #136]	; 0x88
   1922c:	mov	r9, r1
   19230:	eor	r6, r6, r2
   19234:	eor	r7, r7, r3
   19238:	mov	r2, r6
   1923c:	mov	r3, r7
   19240:	ldrd	r6, [sp, #64]	; 0x40
   19244:	mov	r8, r0
   19248:	ldr	ip, [sp, #32]
   1924c:	eor	r7, r7, r9
   19250:	eor	r6, r6, r8
   19254:	mov	r1, r7
   19258:	lsr	r7, r2, #24
   1925c:	strd	r8, [sp, #120]	; 0x78
   19260:	mov	r0, r6
   19264:	mov	r9, r7
   19268:	ldrd	r6, [sp, #32]
   1926c:	lsr	ip, ip, #24
   19270:	orr	ip, ip, r7, lsl #8
   19274:	lsr	lr, r7, #24
   19278:	orr	r7, r9, r3, lsl #8
   1927c:	ldrd	r8, [sp, #24]
   19280:	str	r7, [sp, #64]	; 0x40
   19284:	ldrd	r6, [sp, #80]	; 0x50
   19288:	adds	r8, r8, sl
   1928c:	adc	r9, r9, fp
   19290:	lsr	r3, r3, #24
   19294:	strd	r8, [sp, #160]	; 0xa0
   19298:	ldrd	r8, [sp, #48]	; 0x30
   1929c:	ldrd	sl, [sp, #96]	; 0x60
   192a0:	orr	r3, r3, r2, lsl #8
   192a4:	adds	r6, r6, r8
   192a8:	adc	r7, r7, r9
   192ac:	mov	r8, r6
   192b0:	mov	r9, r7
   192b4:	str	r3, [sp, #68]	; 0x44
   192b8:	strd	r8, [sp, #48]	; 0x30
   192bc:	ldrd	r8, [sp, #104]	; 0x68
   192c0:	ldrd	r2, [sp, #152]	; 0x98
   192c4:	ldr	r6, [sp, #32]
   192c8:	adds	r8, r8, sl
   192cc:	adc	r9, r9, fp
   192d0:	adds	r2, r2, r5
   192d4:	adc	r3, r3, r4
   192d8:	strd	r8, [sp, #32]
   192dc:	mov	r8, r5
   192e0:	mov	r9, r4
   192e4:	ldrd	r4, [sp, #112]	; 0x70
   192e8:	strd	r2, [sp, #96]	; 0x60
   192ec:	ldrd	sl, [sp, #144]	; 0x90
   192f0:	eor	r4, r4, r2
   192f4:	eor	r5, r5, r3
   192f8:	lsr	r3, r4, #24
   192fc:	orr	r3, r3, r5, lsl #8
   19300:	str	r3, [sp, #24]
   19304:	ldrd	r2, [sp, #88]	; 0x58
   19308:	orr	r7, lr, r6, lsl #8
   1930c:	str	ip, [sp, #56]	; 0x38
   19310:	adds	r2, r2, sl
   19314:	str	r7, [sp, #60]	; 0x3c
   19318:	adc	r3, r3, fp
   1931c:	ldrd	r6, [sp, #48]	; 0x30
   19320:	ldrd	sl, [sp, #56]	; 0x38
   19324:	lsr	ip, r0, #24
   19328:	orr	ip, ip, r1, lsl #8
   1932c:	lsr	r1, r1, #24
   19330:	adds	sl, sl, r6
   19334:	orr	r1, r1, r0, lsl #8
   19338:	adc	fp, fp, r7
   1933c:	str	r1, [sp, #20]
   19340:	ldrd	r6, [sp, #64]	; 0x40
   19344:	ldrd	r0, [sp, #160]	; 0xa0
   19348:	str	ip, [sp, #16]
   1934c:	lsr	ip, r5, #24
   19350:	adds	r0, r0, r6
   19354:	adc	r1, r1, r7
   19358:	mov	r6, r0
   1935c:	mov	r7, r1
   19360:	orr	r1, ip, r4, lsl #8
   19364:	strd	r6, [sp, #80]	; 0x50
   19368:	str	r1, [sp, #28]
   1936c:	ldrd	r6, [sp, #40]	; 0x28
   19370:	strd	sl, [sp, #104]	; 0x68
   19374:	ldrd	r0, [sp, #32]
   19378:	ldrd	r4, [sp, #16]
   1937c:	eor	r6, r6, sl
   19380:	eor	r7, r7, fp
   19384:	adds	r4, r4, r0
   19388:	adc	r5, r5, r1
   1938c:	ldrd	sl, [sp, #72]	; 0x48
   19390:	mov	r0, r4
   19394:	mov	r1, r5
   19398:	ldrd	r4, [sp, #80]	; 0x50
   1939c:	strd	r6, [sp, #40]	; 0x28
   193a0:	ldrd	r6, [sp, #8]
   193a4:	eor	sl, sl, r4
   193a8:	eor	fp, fp, r5
   193ac:	mov	r4, sl
   193b0:	mov	r5, fp
   193b4:	ldrd	sl, [sp, #24]
   193b8:	eor	r6, r6, r0
   193bc:	eor	r7, r7, r1
   193c0:	adds	sl, sl, r2
   193c4:	adc	fp, fp, r3
   193c8:	mov	r2, sl
   193cc:	strd	sl, [sp, #88]	; 0x58
   193d0:	mov	r3, fp
   193d4:	ldrd	sl, [sp, #40]	; 0x28
   193d8:	strd	r0, [sp, #72]	; 0x48
   193dc:	mov	r0, r6
   193e0:	lsr	lr, sl, #16
   193e4:	ldr	r6, [sp, #4]
   193e8:	mov	r1, r7
   193ec:	orr	r7, lr, fp, lsl #16
   193f0:	str	r7, [sp, #40]	; 0x28
   193f4:	lsr	r7, fp, #16
   193f8:	orr	r7, r7, sl, lsl #16
   193fc:	eor	r2, r2, r8
   19400:	str	r7, [sp, #44]	; 0x2c
   19404:	eor	r3, r3, r9
   19408:	ldrd	r8, [r6]
   1940c:	ldrd	r6, [r6, #8]
   19410:	lsr	ip, r4, #16
   19414:	strd	r8, [sp, #144]	; 0x90
   19418:	strd	r6, [sp, #152]	; 0x98
   1941c:	ldrd	r8, [sp, #128]	; 0x80
   19420:	ldrd	r6, [sp, #40]	; 0x28
   19424:	orr	ip, ip, r5, lsl #16
   19428:	str	ip, [sp, #48]	; 0x30
   1942c:	adds	r8, r8, r6
   19430:	lsr	ip, r2, #16
   19434:	lsr	r5, r5, #16
   19438:	adc	r9, r9, r7
   1943c:	lsr	lr, r0, #16
   19440:	ldrd	r6, [sp, #72]	; 0x48
   19444:	orr	r5, r5, r4, lsl #16
   19448:	orr	ip, ip, r3, lsl #16
   1944c:	lsr	r3, r3, #16
   19450:	str	r5, [sp, #52]	; 0x34
   19454:	orr	r3, r3, r2, lsl #16
   19458:	orr	r5, lr, r1, lsl #16
   1945c:	lsr	r1, r1, #16
   19460:	str	r3, [sp, #36]	; 0x24
   19464:	orr	r1, r1, r0, lsl #16
   19468:	mov	r2, r8
   1946c:	mov	r3, r9
   19470:	str	r5, [sp, #8]
   19474:	ldrd	sl, [sp, #136]	; 0x88
   19478:	ldrd	r4, [sp, #48]	; 0x30
   1947c:	str	r1, [sp, #12]
   19480:	eor	r2, r2, r6
   19484:	eor	r3, r3, r7
   19488:	ldrd	r0, [sp, #120]	; 0x78
   1948c:	mov	r6, r2
   19490:	mov	r7, r3
   19494:	ldrd	r2, [sp, #8]
   19498:	adds	sl, sl, r4
   1949c:	adc	fp, fp, r5
   194a0:	adds	r0, r0, r2
   194a4:	adc	r1, r1, r3
   194a8:	ldrd	r4, [sp, #88]	; 0x58
   194ac:	mov	r2, r0
   194b0:	mov	r3, r1
   194b4:	str	ip, [sp, #32]
   194b8:	strd	r8, [sp, #112]	; 0x70
   194bc:	ldrd	r0, [sp, #96]	; 0x60
   194c0:	ldrd	r8, [sp, #32]
   194c4:	eor	r4, r4, sl
   194c8:	eor	r5, r5, fp
   194cc:	adds	r0, r0, r8
   194d0:	adc	r1, r1, r9
   194d4:	ldrd	r8, [sp, #112]	; 0x70
   194d8:	strd	r0, [sp, #72]	; 0x48
   194dc:	ldrd	r0, [sp, #56]	; 0x38
   194e0:	strd	r2, [sp, #88]	; 0x58
   194e4:	ldr	lr, [sp, #4]
   194e8:	eor	r8, r8, r0
   194ec:	eor	r9, r9, r1
   194f0:	ldrd	r0, [sp, #144]	; 0x90
   194f4:	lsl	ip, r9, #1
   194f8:	eor	r0, r0, r6
   194fc:	eor	r1, r1, r7
   19500:	mov	r6, r0
   19504:	mov	r7, r1
   19508:	ldrd	r0, [sp, #64]	; 0x40
   1950c:	strd	r6, [lr]
   19510:	ldrd	r6, [lr, #16]
   19514:	eor	r0, r0, sl
   19518:	eor	r1, r1, fp
   1951c:	mov	sl, r0
   19520:	mov	fp, r1
   19524:	ldrd	r0, [sp, #152]	; 0x98
   19528:	strd	r6, [sp, #96]	; 0x60
   1952c:	ldrd	r6, [lr, #32]
   19530:	eor	r0, r0, r4
   19534:	eor	r1, r1, r5
   19538:	mov	r4, r0
   1953c:	mov	r5, r1
   19540:	ldrd	r0, [sp, #16]
   19544:	strd	r4, [lr, #8]
   19548:	lsl	r5, fp, #1
   1954c:	eor	r0, r0, r2
   19550:	eor	r1, r1, r3
   19554:	ldrd	r2, [sp, #72]	; 0x48
   19558:	strd	r0, [sp, #16]
   1955c:	ldrd	r0, [sp, #24]
   19560:	orr	r5, r5, sl, lsr #31
   19564:	strd	r6, [sp, #120]	; 0x78
   19568:	eor	r0, r0, r2
   1956c:	eor	r1, r1, r3
   19570:	mov	r2, r0
   19574:	mov	r3, r1
   19578:	ldrd	r0, [lr, #56]	; 0x38
   1957c:	str	r5, [sp, #28]
   19580:	lsl	r5, sl, #1
   19584:	strd	r0, [sp, #152]	; 0x98
   19588:	ldr	r1, [sp, #20]
   1958c:	lsl	r4, r1, #1
   19590:	ldrd	r0, [lr, #40]	; 0x28
   19594:	strd	r0, [sp, #128]	; 0x80
   19598:	lsl	r1, r3, #1
   1959c:	str	r1, [sp, #136]	; 0x88
   195a0:	ldrd	r0, [lr, #48]	; 0x30
   195a4:	strd	r0, [sp, #144]	; 0x90
   195a8:	ldrd	r0, [lr, #24]
   195ac:	strd	r0, [sp, #112]	; 0x70
   195b0:	orr	r1, ip, r8, lsr #31
   195b4:	str	r1, [sp, #68]	; 0x44
   195b8:	ldrd	r0, [sp, #16]
   195bc:	ldr	r1, [sp, #136]	; 0x88
   195c0:	lsl	ip, r8, #1
   195c4:	orr	lr, r1, r2, lsr #31
   195c8:	str	lr, [sp, #60]	; 0x3c
   195cc:	orr	lr, ip, r9, lsr #31
   195d0:	str	lr, [sp, #64]	; 0x40
   195d4:	orr	r7, r4, r0, lsr #31
   195d8:	orr	lr, r5, fp, lsr #31
   195dc:	ldrd	r8, [sp, #64]	; 0x40
   195e0:	ldrd	r4, [sp, #152]	; 0x98
   195e4:	ldr	r1, [sp, #20]
   195e8:	str	lr, [sp, #24]
   195ec:	eor	r8, r8, r4
   195f0:	eor	r9, r9, r5
   195f4:	mov	sl, r8
   195f8:	ldrd	r4, [sp, #24]
   195fc:	mov	fp, r9
   19600:	ldrd	r8, [sp, #120]	; 0x78
   19604:	lsl	r0, r0, #1
   19608:	lsl	r2, r2, #1
   1960c:	orr	r6, r0, r1, lsr #31
   19610:	orr	r3, r2, r3, lsr #31
   19614:	ldrd	r0, [sp, #128]	; 0x80
   19618:	str	r3, [sp, #56]	; 0x38
   1961c:	eor	r4, r4, r8
   19620:	ldrd	r2, [sp, #96]	; 0x60
   19624:	eor	r5, r5, r9
   19628:	ldrd	r8, [sp, #88]	; 0x58
   1962c:	eor	r0, r0, r6
   19630:	eor	r1, r1, r7
   19634:	eor	r8, r8, r2
   19638:	eor	r9, r9, r3
   1963c:	mov	r6, r0
   19640:	ldrd	r2, [sp, #144]	; 0x90
   19644:	mov	r7, r1
   19648:	ldrd	r0, [sp, #56]	; 0x38
   1964c:	ldr	ip, [sp, #4]
   19650:	eor	r0, r0, r2
   19654:	eor	r1, r1, r3
   19658:	ldrd	r2, [sp, #80]	; 0x50
   1965c:	strd	r0, [sp, #16]
   19660:	ldrd	r0, [sp, #112]	; 0x70
   19664:	eor	r2, r2, r0
   19668:	eor	r3, r3, r1
   1966c:	ldrd	r0, [sp, #8]
   19670:	eor	r0, r0, sl
   19674:	eor	r1, r1, fp
   19678:	ldrd	sl, [sp, #104]	; 0x68
   1967c:	strd	r0, [sp, #8]
   19680:	ldrd	r0, [sp, #32]
   19684:	eor	sl, sl, r8
   19688:	eor	fp, fp, r9
   1968c:	mov	r8, sl
   19690:	mov	r9, fp
   19694:	ldrd	sl, [sp, #40]	; 0x28
   19698:	eor	r0, r0, r4
   1969c:	eor	r1, r1, r5
   196a0:	eor	sl, sl, r6
   196a4:	eor	fp, fp, r7
   196a8:	mov	r6, sl
   196ac:	mov	r7, fp
   196b0:	mov	r4, r0
   196b4:	ldrd	sl, [sp, #48]	; 0x30
   196b8:	mov	r5, r1
   196bc:	ldrd	r0, [sp, #16]
   196c0:	strd	r8, [ip, #16]
   196c4:	strd	r6, [ip, #40]	; 0x28
   196c8:	eor	r0, r0, sl
   196cc:	eor	r1, r1, fp
   196d0:	ldrd	sl, [sp, #72]	; 0x48
   196d4:	eor	sl, sl, r2
   196d8:	eor	fp, fp, r3
   196dc:	mov	r2, sl
   196e0:	mov	r3, fp
   196e4:	ldrd	sl, [sp, #8]
   196e8:	strd	sl, [ip, #56]	; 0x38
   196ec:	strd	r4, [ip, #32]
   196f0:	strd	r0, [ip, #48]	; 0x30
   196f4:	strd	r2, [ip, #24]
   196f8:	add	sp, sp, #548	; 0x224
   196fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19704:	mov	r4, r0
   19708:	ldr	r0, [r0, #224]	; 0xe0
   1970c:	mov	r5, r2
   19710:	rsb	r8, r0, #128	; 0x80
   19714:	cmp	r8, r2
   19718:	mov	r6, r1
   1971c:	addcs	r7, r4, #96	; 0x60
   19720:	bcc	19744 <__assert_fail@plt+0x85b8>
   19724:	mov	r2, r5
   19728:	mov	r1, r6
   1972c:	add	r0, r7, r0
   19730:	bl	10f34 <memcpy@plt>
   19734:	ldr	r3, [r4, #224]	; 0xe0
   19738:	add	r5, r3, r5
   1973c:	str	r5, [r4, #224]	; 0xe0
   19740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19744:	mov	r3, #0
   19748:	add	r7, r4, #96	; 0x60
   1974c:	str	r3, [r4, #224]	; 0xe0
   19750:	mov	r2, r8
   19754:	add	r0, r7, r0
   19758:	bl	10f34 <memcpy@plt>
   1975c:	ldrd	r2, [r4, #64]	; 0x40
   19760:	ldrd	r0, [r4, #72]	; 0x48
   19764:	sub	r5, r5, r8
   19768:	adds	r2, r2, #128	; 0x80
   1976c:	adc	r3, r3, #0
   19770:	cmp	r3, #0
   19774:	cmpeq	r2, #127	; 0x7f
   19778:	movls	ip, #1
   1977c:	movhi	ip, #0
   19780:	strd	r2, [r4, #64]	; 0x40
   19784:	add	r6, r6, r8
   19788:	adds	r2, r0, ip
   1978c:	adc	r3, r1, #0
   19790:	mov	r0, r4
   19794:	mov	r1, r7
   19798:	strd	r2, [r4, #72]	; 0x48
   1979c:	bl	12e68 <__assert_fail@plt+0x1cdc>
   197a0:	cmp	r5, #128	; 0x80
   197a4:	ldrls	r0, [r4, #224]	; 0xe0
   197a8:	bls	19724 <__assert_fail@plt+0x8598>
   197ac:	mov	r9, r5
   197b0:	mov	r8, r6
   197b4:	ldrd	r2, [r4, #64]	; 0x40
   197b8:	ldrd	r0, [r4, #72]	; 0x48
   197bc:	sub	r9, r9, #128	; 0x80
   197c0:	adds	r2, r2, #128	; 0x80
   197c4:	adc	r3, r3, #0
   197c8:	cmp	r3, #0
   197cc:	cmpeq	r2, #127	; 0x7f
   197d0:	movls	ip, #1
   197d4:	movhi	ip, #0
   197d8:	adds	r0, r0, ip
   197dc:	adc	r1, r1, #0
   197e0:	strd	r2, [r4, #64]	; 0x40
   197e4:	strd	r0, [r4, #72]	; 0x48
   197e8:	mov	r1, r8
   197ec:	mov	r0, r4
   197f0:	bl	12e68 <__assert_fail@plt+0x1cdc>
   197f4:	cmp	r9, #128	; 0x80
   197f8:	add	r8, r8, #128	; 0x80
   197fc:	bhi	197b4 <__assert_fail@plt+0x8628>
   19800:	sub	r3, r5, #129	; 0x81
   19804:	bic	r2, r3, #127	; 0x7f
   19808:	mov	r3, r2
   1980c:	sub	r5, r5, #128	; 0x80
   19810:	add	r2, r2, #128	; 0x80
   19814:	ldr	r0, [r4, #224]	; 0xe0
   19818:	sub	r5, r5, r3
   1981c:	add	r6, r6, r2
   19820:	b	19724 <__assert_fail@plt+0x8598>
   19824:	push	{r4, r5, r6, r7, lr}
   19828:	mov	r2, #240	; 0xf0
   1982c:	ldr	r4, [pc, #144]	; 198c4 <__assert_fail@plt+0x8738>
   19830:	mov	r6, r0
   19834:	sub	sp, sp, #12
   19838:	mov	r7, r1
   1983c:	mov	r1, #0
   19840:	bl	110b4 <memset@plt>
   19844:	add	r5, r4, #64	; 0x40
   19848:	mov	lr, r6
   1984c:	mov	ip, r4
   19850:	add	lr, lr, #16
   19854:	ldm	ip!, {r0, r1, r2, r3}
   19858:	add	r4, r4, #16
   1985c:	cmp	ip, r5
   19860:	str	r0, [lr, #-16]
   19864:	str	r1, [lr, #-12]
   19868:	str	r2, [lr, #-8]
   1986c:	str	r3, [lr, #-4]
   19870:	bne	1984c <__assert_fail@plt+0x86c0>
   19874:	mov	ip, r7
   19878:	sub	r2, r6, #8
   1987c:	add	lr, r6, #56	; 0x38
   19880:	ldr	r0, [ip]
   19884:	ldr	r1, [ip, #4]
   19888:	mov	r3, sp
   1988c:	ldrd	r4, [r2, #8]
   19890:	stmia	r3!, {r0, r1}
   19894:	ldrd	r0, [sp]
   19898:	add	ip, ip, #8
   1989c:	eor	r4, r4, r0
   198a0:	eor	r5, r5, r1
   198a4:	strd	r4, [r2, #8]!
   198a8:	cmp	lr, r2
   198ac:	bne	19880 <__assert_fail@plt+0x86f4>
   198b0:	ldrb	r3, [r7]
   198b4:	mov	r0, #0
   198b8:	str	r3, [r6, #228]	; 0xe4
   198bc:	add	sp, sp, #12
   198c0:	pop	{r4, r5, r6, r7, pc}
   198c4:	andeq	r2, r2, r0, lsr r1
   198c8:	sub	r3, r1, #1
   198cc:	cmp	r3, #63	; 0x3f
   198d0:	bhi	199c8 <__assert_fail@plt+0x883c>
   198d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   198d8:	mov	r3, #0
   198dc:	sub	sp, sp, #76	; 0x4c
   198e0:	ldr	r4, [pc, #232]	; 199d0 <__assert_fail@plt+0x8844>
   198e4:	mov	ip, #1
   198e8:	mov	r9, r0
   198ec:	mov	r8, r1
   198f0:	mov	r2, #240	; 0xf0
   198f4:	mov	r1, r3
   198f8:	strb	r8, [sp, #8]
   198fc:	strb	r3, [sp, #9]
   19900:	str	r3, [sp, #12]
   19904:	str	r3, [sp, #16]
   19908:	str	r3, [sp, #20]
   1990c:	strb	r3, [sp, #24]
   19910:	strb	r3, [sp, #25]
   19914:	str	r3, [sp, #26]
   19918:	str	r3, [sp, #40]	; 0x28
   1991c:	str	r3, [sp, #56]	; 0x38
   19920:	str	r3, [sp, #30]
   19924:	str	r3, [sp, #34]	; 0x22
   19928:	strh	r3, [sp, #38]	; 0x26
   1992c:	str	r3, [sp, #44]	; 0x2c
   19930:	str	r3, [sp, #48]	; 0x30
   19934:	str	r3, [sp, #52]	; 0x34
   19938:	str	r3, [sp, #60]	; 0x3c
   1993c:	str	r3, [sp, #64]	; 0x40
   19940:	str	r3, [sp, #68]	; 0x44
   19944:	strb	ip, [sp, #10]
   19948:	strb	ip, [sp, #11]
   1994c:	add	r5, r4, #64	; 0x40
   19950:	bl	110b4 <memset@plt>
   19954:	mov	lr, r9
   19958:	mov	ip, r4
   1995c:	add	lr, lr, #16
   19960:	ldm	ip!, {r0, r1, r2, r3}
   19964:	add	r4, r4, #16
   19968:	cmp	ip, r5
   1996c:	str	r0, [lr, #-16]
   19970:	str	r1, [lr, #-12]
   19974:	str	r2, [lr, #-8]
   19978:	str	r3, [lr, #-4]
   1997c:	bne	19958 <__assert_fail@plt+0x87cc>
   19980:	add	r2, sp, #8
   19984:	sub	r3, r9, #8
   19988:	add	lr, r9, #56	; 0x38
   1998c:	mov	ip, sp
   19990:	ldm	r2, {r0, r1}
   19994:	ldrd	r4, [r3, #8]
   19998:	add	r2, r2, #8
   1999c:	stm	ip, {r0, r1}
   199a0:	ldrd	r6, [sp]
   199a4:	eor	r4, r4, r6
   199a8:	eor	r5, r5, r7
   199ac:	strd	r4, [r3, #8]!
   199b0:	cmp	lr, r3
   199b4:	bne	19990 <__assert_fail@plt+0x8804>
   199b8:	mov	r0, #0
   199bc:	str	r8, [r9, #228]	; 0xe4
   199c0:	add	sp, sp, #76	; 0x4c
   199c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   199c8:	mvn	r0, #0
   199cc:	bx	lr
   199d0:	andeq	r2, r2, r0, lsr r1
   199d4:	sub	ip, r1, #1
   199d8:	cmp	ip, #63	; 0x3f
   199dc:	bhi	19b4c <__assert_fail@plt+0x89c0>
   199e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199e4:	sub	ip, r3, #1
   199e8:	clz	lr, r2
   199ec:	lsr	lr, lr, #5
   199f0:	cmp	ip, #63	; 0x3f
   199f4:	movls	ip, lr
   199f8:	orrhi	ip, lr, #1
   199fc:	cmp	ip, #0
   19a00:	sub	sp, sp, #196	; 0xc4
   19a04:	bne	19b44 <__assert_fail@plt+0x89b8>
   19a08:	ldr	r4, [pc, #324]	; 19b54 <__assert_fail@plt+0x89c8>
   19a0c:	mov	r7, r0
   19a10:	strb	r1, [sp]
   19a14:	strb	r3, [sp, #1]
   19a18:	mov	r9, r3
   19a1c:	mov	sl, r2
   19a20:	mov	r3, #1
   19a24:	mov	r8, r1
   19a28:	mov	r2, #240	; 0xf0
   19a2c:	mov	r1, ip
   19a30:	str	ip, [sp, #4]
   19a34:	str	ip, [sp, #8]
   19a38:	str	ip, [sp, #12]
   19a3c:	strb	ip, [sp, #16]
   19a40:	strb	ip, [sp, #17]
   19a44:	str	ip, [sp, #18]
   19a48:	str	ip, [sp, #32]
   19a4c:	str	ip, [sp, #48]	; 0x30
   19a50:	str	ip, [sp, #22]
   19a54:	str	ip, [sp, #26]
   19a58:	strh	ip, [sp, #30]
   19a5c:	str	ip, [sp, #36]	; 0x24
   19a60:	str	ip, [sp, #40]	; 0x28
   19a64:	str	ip, [sp, #44]	; 0x2c
   19a68:	str	ip, [sp, #52]	; 0x34
   19a6c:	str	ip, [sp, #56]	; 0x38
   19a70:	str	ip, [sp, #60]	; 0x3c
   19a74:	strb	r3, [sp, #2]
   19a78:	strb	r3, [sp, #3]
   19a7c:	add	r5, r4, #64	; 0x40
   19a80:	bl	110b4 <memset@plt>
   19a84:	mov	lr, r7
   19a88:	mov	ip, r4
   19a8c:	add	lr, lr, #16
   19a90:	ldm	ip!, {r0, r1, r2, r3}
   19a94:	add	r4, r4, #16
   19a98:	cmp	ip, r5
   19a9c:	str	r0, [lr, #-16]
   19aa0:	str	r1, [lr, #-12]
   19aa4:	str	r2, [lr, #-8]
   19aa8:	str	r3, [lr, #-4]
   19aac:	bne	19a88 <__assert_fail@plt+0x88fc>
   19ab0:	mov	lr, sp
   19ab4:	sub	ip, r7, #8
   19ab8:	add	fp, r7, #56	; 0x38
   19abc:	add	r6, sp, #64	; 0x40
   19ac0:	ldm	lr, {r0, r1}
   19ac4:	ldrd	r4, [ip, #8]
   19ac8:	add	lr, lr, #8
   19acc:	stm	r6, {r0, r1}
   19ad0:	ldrd	r2, [sp, #64]	; 0x40
   19ad4:	eor	r2, r2, r4
   19ad8:	eor	r3, r3, r5
   19adc:	strd	r2, [ip, #8]!
   19ae0:	cmp	fp, ip
   19ae4:	bne	19ac0 <__assert_fail@plt+0x8934>
   19ae8:	mov	r2, #128	; 0x80
   19aec:	mov	r1, #0
   19af0:	str	r8, [r7, #228]	; 0xe4
   19af4:	mov	r0, r6
   19af8:	bl	110b4 <memset@plt>
   19afc:	mov	r3, #128	; 0x80
   19b00:	mov	r2, r9
   19b04:	mov	r1, sl
   19b08:	mov	r0, r6
   19b0c:	bl	10fac <__memcpy_chk@plt>
   19b10:	mov	r0, r7
   19b14:	mov	r2, #128	; 0x80
   19b18:	mov	r1, r6
   19b1c:	bl	19700 <__assert_fail@plt+0x8574>
   19b20:	ldr	r3, [pc, #48]	; 19b58 <__assert_fail@plt+0x89cc>
   19b24:	mov	r0, r6
   19b28:	mov	r2, #128	; 0x80
   19b2c:	ldr	r3, [r3]
   19b30:	mov	r1, #0
   19b34:	blx	r3
   19b38:	mov	r0, #0
   19b3c:	add	sp, sp, #196	; 0xc4
   19b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b44:	mvn	r0, #0
   19b48:	b	19b3c <__assert_fail@plt+0x89b0>
   19b4c:	mvn	r0, #0
   19b50:	bx	lr
   19b54:	andeq	r2, r2, r0, lsr r1
   19b58:	andeq	r3, r3, r8, lsl r1
   19b5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b60:	subs	r5, r2, #0
   19b64:	beq	19ba0 <__assert_fail@plt+0x8a14>
   19b68:	mov	r4, r0
   19b6c:	ldr	r0, [r0, #224]	; 0xe0
   19b70:	mov	r6, r1
   19b74:	rsb	r8, r0, #128	; 0x80
   19b78:	cmp	r5, r8
   19b7c:	addls	r7, r4, #96	; 0x60
   19b80:	bhi	19ba8 <__assert_fail@plt+0x8a1c>
   19b84:	mov	r2, r5
   19b88:	mov	r1, r6
   19b8c:	add	r0, r7, r0
   19b90:	bl	10f34 <memcpy@plt>
   19b94:	ldr	r3, [r4, #224]	; 0xe0
   19b98:	add	r5, r3, r5
   19b9c:	str	r5, [r4, #224]	; 0xe0
   19ba0:	mov	r0, #0
   19ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ba8:	mov	r3, #0
   19bac:	add	r7, r4, #96	; 0x60
   19bb0:	str	r3, [r4, #224]	; 0xe0
   19bb4:	mov	r2, r8
   19bb8:	add	r0, r7, r0
   19bbc:	bl	10f34 <memcpy@plt>
   19bc0:	ldrd	r2, [r4, #64]	; 0x40
   19bc4:	ldrd	r0, [r4, #72]	; 0x48
   19bc8:	sub	r5, r5, r8
   19bcc:	adds	r2, r2, #128	; 0x80
   19bd0:	adc	r3, r3, #0
   19bd4:	cmp	r3, #0
   19bd8:	cmpeq	r2, #127	; 0x7f
   19bdc:	movls	ip, #1
   19be0:	movhi	ip, #0
   19be4:	strd	r2, [r4, #64]	; 0x40
   19be8:	add	r6, r6, r8
   19bec:	adds	r2, r0, ip
   19bf0:	adc	r3, r1, #0
   19bf4:	mov	r0, r4
   19bf8:	mov	r1, r7
   19bfc:	strd	r2, [r4, #72]	; 0x48
   19c00:	bl	12e68 <__assert_fail@plt+0x1cdc>
   19c04:	cmp	r5, #128	; 0x80
   19c08:	ldrls	r0, [r4, #224]	; 0xe0
   19c0c:	bls	19b84 <__assert_fail@plt+0x89f8>
   19c10:	mov	r9, r5
   19c14:	mov	r8, r6
   19c18:	ldrd	r2, [r4, #64]	; 0x40
   19c1c:	ldrd	r0, [r4, #72]	; 0x48
   19c20:	sub	r9, r9, #128	; 0x80
   19c24:	adds	r2, r2, #128	; 0x80
   19c28:	adc	r3, r3, #0
   19c2c:	cmp	r3, #0
   19c30:	cmpeq	r2, #127	; 0x7f
   19c34:	movls	ip, #1
   19c38:	movhi	ip, #0
   19c3c:	adds	r0, r0, ip
   19c40:	adc	r1, r1, #0
   19c44:	strd	r2, [r4, #64]	; 0x40
   19c48:	strd	r0, [r4, #72]	; 0x48
   19c4c:	mov	r1, r8
   19c50:	mov	r0, r4
   19c54:	bl	12e68 <__assert_fail@plt+0x1cdc>
   19c58:	cmp	r9, #128	; 0x80
   19c5c:	add	r8, r8, #128	; 0x80
   19c60:	bhi	19c18 <__assert_fail@plt+0x8a8c>
   19c64:	sub	r3, r5, #129	; 0x81
   19c68:	bic	r2, r3, #127	; 0x7f
   19c6c:	mov	r3, r2
   19c70:	sub	r5, r5, #128	; 0x80
   19c74:	add	r2, r2, #128	; 0x80
   19c78:	ldr	r0, [r4, #224]	; 0xe0
   19c7c:	sub	r5, r5, r3
   19c80:	add	r6, r6, r2
   19c84:	b	19b84 <__assert_fail@plt+0x89f8>
   19c88:	push	{r4, r5, r6, r7, r8, r9, lr}
   19c8c:	sub	sp, sp, #76	; 0x4c
   19c90:	mov	r6, r1
   19c94:	mov	r7, r0
   19c98:	mov	r4, r2
   19c9c:	add	r0, sp, #8
   19ca0:	mov	r2, #64	; 0x40
   19ca4:	mov	r1, #0
   19ca8:	bl	110b4 <memset@plt>
   19cac:	cmp	r6, #0
   19cb0:	beq	19dac <__assert_fail@plt+0x8c20>
   19cb4:	ldr	r3, [r7, #228]	; 0xe4
   19cb8:	cmp	r3, r4
   19cbc:	bhi	19dac <__assert_fail@plt+0x8c20>
   19cc0:	ldrd	r2, [r7, #80]	; 0x50
   19cc4:	orrs	r3, r2, r3
   19cc8:	bne	19dac <__assert_fail@plt+0x8c20>
   19ccc:	ldrd	r0, [r7, #64]	; 0x40
   19cd0:	ldr	r2, [r7, #224]	; 0xe0
   19cd4:	mov	r9, #0
   19cd8:	adds	r0, r0, r2
   19cdc:	adc	r1, r1, r9
   19ce0:	cmp	r9, r1
   19ce4:	ldrd	r4, [r7, #72]	; 0x48
   19ce8:	cmpeq	r2, r0
   19cec:	ldrb	r3, [r7, #232]	; 0xe8
   19cf0:	movhi	ip, #1
   19cf4:	movls	ip, #0
   19cf8:	adds	r4, r4, ip
   19cfc:	adc	r5, r5, #0
   19d00:	cmp	r3, #0
   19d04:	strd	r0, [r7, #64]	; 0x40
   19d08:	strd	r4, [r7, #72]	; 0x48
   19d0c:	bne	19d9c <__assert_fail@plt+0x8c10>
   19d10:	mvn	r0, #0
   19d14:	mvn	r1, #0
   19d18:	add	r4, r7, #96	; 0x60
   19d1c:	strd	r0, [r7, #80]	; 0x50
   19d20:	add	r0, r4, r2
   19d24:	mov	r1, #0
   19d28:	rsb	r2, r2, #128	; 0x80
   19d2c:	bl	110b4 <memset@plt>
   19d30:	mov	r1, r4
   19d34:	mov	r0, r7
   19d38:	bl	12e68 <__assert_fail@plt+0x1cdc>
   19d3c:	sub	r2, r7, #8
   19d40:	add	r3, sp, #8
   19d44:	add	lr, r7, #56	; 0x38
   19d48:	mov	ip, sp
   19d4c:	ldrd	r0, [r2, #8]!
   19d50:	strd	r0, [sp]
   19d54:	ldm	ip, {r0, r1}
   19d58:	cmp	r2, lr
   19d5c:	stm	r3, {r0, r1}
   19d60:	add	r3, r3, #8
   19d64:	bne	19d4c <__assert_fail@plt+0x8bc0>
   19d68:	ldr	r2, [r7, #228]	; 0xe4
   19d6c:	add	r1, sp, #8
   19d70:	mov	r0, r6
   19d74:	bl	10f34 <memcpy@plt>
   19d78:	ldr	r3, [pc, #52]	; 19db4 <__assert_fail@plt+0x8c28>
   19d7c:	add	r0, sp, #8
   19d80:	mov	r2, #64	; 0x40
   19d84:	ldr	r3, [r3]
   19d88:	mov	r1, #0
   19d8c:	blx	r3
   19d90:	mov	r0, #0
   19d94:	add	sp, sp, #76	; 0x4c
   19d98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19d9c:	mvn	r0, #0
   19da0:	mvn	r1, #0
   19da4:	strd	r0, [r7, #88]	; 0x58
   19da8:	b	19d10 <__assert_fail@plt+0x8b84>
   19dac:	mvn	r0, #0
   19db0:	b	19d94 <__assert_fail@plt+0x8c08>
   19db4:	andeq	r3, r3, r8, lsl r1
   19db8:	cmp	r3, #0
   19dbc:	clz	ip, r2
   19dc0:	lsr	ip, ip, #5
   19dc4:	moveq	ip, #0
   19dc8:	cmp	r0, #0
   19dcc:	orreq	ip, ip, #1
   19dd0:	push	{r4, r5, r6, r7, r8, r9, lr}
   19dd4:	sub	sp, sp, #316	; 0x13c
   19dd8:	cmp	ip, #0
   19ddc:	ldr	ip, [sp, #348]	; 0x15c
   19de0:	bne	19f5c <__assert_fail@plt+0x8dd0>
   19de4:	cmp	ip, #0
   19de8:	ldr	r4, [sp, #344]	; 0x158
   19dec:	clz	r4, r4
   19df0:	lsr	r4, r4, #5
   19df4:	moveq	r4, #0
   19df8:	cmp	r4, #0
   19dfc:	bne	19f5c <__assert_fail@plt+0x8dd0>
   19e00:	sub	r4, r1, #1
   19e04:	cmp	ip, #64	; 0x40
   19e08:	cmpls	r4, #63	; 0x3f
   19e0c:	mov	r8, r1
   19e10:	bhi	19f5c <__assert_fail@plt+0x8dd0>
   19e14:	cmp	ip, #0
   19e18:	mov	r5, r0
   19e1c:	mov	r6, r3
   19e20:	mov	r7, r2
   19e24:	add	r4, sp, #72	; 0x48
   19e28:	bne	19f44 <__assert_fail@plt+0x8db8>
   19e2c:	mov	r0, r4
   19e30:	bl	198c8 <__assert_fail@plt+0x873c>
   19e34:	cmp	r0, #0
   19e38:	blt	19f5c <__assert_fail@plt+0x8dd0>
   19e3c:	cmp	r6, #0
   19e40:	bne	19f64 <__assert_fail@plt+0x8dd8>
   19e44:	add	r0, sp, #8
   19e48:	mov	r2, #64	; 0x40
   19e4c:	mov	r1, #0
   19e50:	bl	110b4 <memset@plt>
   19e54:	ldr	r3, [sp, #300]	; 0x12c
   19e58:	cmp	r8, r3
   19e5c:	bcc	19f38 <__assert_fail@plt+0x8dac>
   19e60:	ldrd	r2, [sp, #152]	; 0x98
   19e64:	orrs	r3, r2, r3
   19e68:	bne	19f38 <__assert_fail@plt+0x8dac>
   19e6c:	ldrd	r6, [sp, #136]	; 0x88
   19e70:	ldr	r2, [sp, #296]	; 0x128
   19e74:	mov	r1, #0
   19e78:	adds	r6, r6, r2
   19e7c:	adc	r7, r7, r1
   19e80:	cmp	r1, r7
   19e84:	ldrd	r8, [sp, #144]	; 0x90
   19e88:	cmpeq	r2, r6
   19e8c:	ldrb	r3, [sp, #304]	; 0x130
   19e90:	movhi	r1, #1
   19e94:	movls	r1, #0
   19e98:	adds	r8, r8, r1
   19e9c:	adc	r9, r9, #0
   19ea0:	cmp	r3, #0
   19ea4:	strd	r6, [sp, #136]	; 0x88
   19ea8:	strd	r8, [sp, #144]	; 0x90
   19eac:	mvnne	r0, #0
   19eb0:	mvnne	r1, #0
   19eb4:	strdne	r0, [sp, #160]	; 0xa0
   19eb8:	add	r3, sp, #168	; 0xa8
   19ebc:	mvn	r6, #0
   19ec0:	mvn	r7, #0
   19ec4:	add	r0, r3, r2
   19ec8:	mov	r1, #0
   19ecc:	rsb	r2, r2, #128	; 0x80
   19ed0:	strd	r6, [sp, #152]	; 0x98
   19ed4:	bl	110b4 <memset@plt>
   19ed8:	add	r1, sp, #168	; 0xa8
   19edc:	mov	r0, r4
   19ee0:	bl	12e68 <__assert_fail@plt+0x1cdc>
   19ee4:	mov	r2, r4
   19ee8:	add	r3, sp, #8
   19eec:	add	lr, sp, #136	; 0x88
   19ef0:	mov	ip, sp
   19ef4:	ldrd	r0, [r2], #8
   19ef8:	strd	r0, [sp]
   19efc:	ldm	ip, {r0, r1}
   19f00:	cmp	lr, r2
   19f04:	stm	r3, {r0, r1}
   19f08:	add	r3, r3, #8
   19f0c:	bne	19ef4 <__assert_fail@plt+0x8d68>
   19f10:	ldr	r2, [sp, #300]	; 0x12c
   19f14:	add	r1, sp, #8
   19f18:	mov	r0, r5
   19f1c:	bl	10f34 <memcpy@plt>
   19f20:	ldr	r3, [pc, #80]	; 19f78 <__assert_fail@plt+0x8dec>
   19f24:	add	r0, sp, #8
   19f28:	mov	r2, #64	; 0x40
   19f2c:	ldr	r3, [r3]
   19f30:	mov	r1, #0
   19f34:	blx	r3
   19f38:	mov	r0, #0
   19f3c:	add	sp, sp, #316	; 0x13c
   19f40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19f44:	mov	r3, ip
   19f48:	mov	r0, r4
   19f4c:	ldr	r2, [sp, #344]	; 0x158
   19f50:	bl	199d4 <__assert_fail@plt+0x8848>
   19f54:	cmp	r0, #0
   19f58:	bge	19e3c <__assert_fail@plt+0x8cb0>
   19f5c:	mvn	r0, #0
   19f60:	b	19f3c <__assert_fail@plt+0x8db0>
   19f64:	mov	r2, r6
   19f68:	mov	r1, r7
   19f6c:	mov	r0, r4
   19f70:	bl	19700 <__assert_fail@plt+0x8574>
   19f74:	b	19e44 <__assert_fail@plt+0x8cb8>
   19f78:	andeq	r3, r3, r8, lsl r1
   19f7c:	cmp	r3, #0
   19f80:	clz	ip, r2
   19f84:	lsr	ip, ip, #5
   19f88:	moveq	ip, #0
   19f8c:	cmp	r0, #0
   19f90:	orreq	ip, ip, #1
   19f94:	push	{r4, r5, r6, r7, r8, r9, lr}
   19f98:	sub	sp, sp, #316	; 0x13c
   19f9c:	cmp	ip, #0
   19fa0:	ldr	ip, [sp, #348]	; 0x15c
   19fa4:	bne	1a120 <__assert_fail@plt+0x8f94>
   19fa8:	cmp	ip, #0
   19fac:	ldr	r4, [sp, #344]	; 0x158
   19fb0:	clz	r4, r4
   19fb4:	lsr	r4, r4, #5
   19fb8:	moveq	r4, #0
   19fbc:	cmp	r4, #0
   19fc0:	bne	1a120 <__assert_fail@plt+0x8f94>
   19fc4:	sub	r4, r1, #1
   19fc8:	cmp	ip, #64	; 0x40
   19fcc:	cmpls	r4, #63	; 0x3f
   19fd0:	mov	r8, r1
   19fd4:	bhi	1a120 <__assert_fail@plt+0x8f94>
   19fd8:	cmp	ip, #0
   19fdc:	mov	r5, r0
   19fe0:	mov	r6, r3
   19fe4:	mov	r7, r2
   19fe8:	add	r4, sp, #72	; 0x48
   19fec:	bne	1a108 <__assert_fail@plt+0x8f7c>
   19ff0:	mov	r0, r4
   19ff4:	bl	198c8 <__assert_fail@plt+0x873c>
   19ff8:	cmp	r0, #0
   19ffc:	blt	1a120 <__assert_fail@plt+0x8f94>
   1a000:	cmp	r6, #0
   1a004:	bne	1a128 <__assert_fail@plt+0x8f9c>
   1a008:	add	r0, sp, #8
   1a00c:	mov	r2, #64	; 0x40
   1a010:	mov	r1, #0
   1a014:	bl	110b4 <memset@plt>
   1a018:	ldr	r3, [sp, #300]	; 0x12c
   1a01c:	cmp	r8, r3
   1a020:	bcc	1a0fc <__assert_fail@plt+0x8f70>
   1a024:	ldrd	r2, [sp, #152]	; 0x98
   1a028:	orrs	r3, r2, r3
   1a02c:	bne	1a0fc <__assert_fail@plt+0x8f70>
   1a030:	ldrd	r6, [sp, #136]	; 0x88
   1a034:	ldr	r2, [sp, #296]	; 0x128
   1a038:	mov	r1, #0
   1a03c:	adds	r6, r6, r2
   1a040:	adc	r7, r7, r1
   1a044:	cmp	r1, r7
   1a048:	ldrd	r8, [sp, #144]	; 0x90
   1a04c:	cmpeq	r2, r6
   1a050:	ldrb	r3, [sp, #304]	; 0x130
   1a054:	movhi	r1, #1
   1a058:	movls	r1, #0
   1a05c:	adds	r8, r8, r1
   1a060:	adc	r9, r9, #0
   1a064:	cmp	r3, #0
   1a068:	strd	r6, [sp, #136]	; 0x88
   1a06c:	strd	r8, [sp, #144]	; 0x90
   1a070:	mvnne	r0, #0
   1a074:	mvnne	r1, #0
   1a078:	strdne	r0, [sp, #160]	; 0xa0
   1a07c:	add	r3, sp, #168	; 0xa8
   1a080:	mvn	r6, #0
   1a084:	mvn	r7, #0
   1a088:	add	r0, r3, r2
   1a08c:	mov	r1, #0
   1a090:	rsb	r2, r2, #128	; 0x80
   1a094:	strd	r6, [sp, #152]	; 0x98
   1a098:	bl	110b4 <memset@plt>
   1a09c:	add	r1, sp, #168	; 0xa8
   1a0a0:	mov	r0, r4
   1a0a4:	bl	12e68 <__assert_fail@plt+0x1cdc>
   1a0a8:	mov	r2, r4
   1a0ac:	add	r3, sp, #8
   1a0b0:	add	lr, sp, #136	; 0x88
   1a0b4:	mov	ip, sp
   1a0b8:	ldrd	r0, [r2], #8
   1a0bc:	strd	r0, [sp]
   1a0c0:	ldm	ip, {r0, r1}
   1a0c4:	cmp	lr, r2
   1a0c8:	stm	r3, {r0, r1}
   1a0cc:	add	r3, r3, #8
   1a0d0:	bne	1a0b8 <__assert_fail@plt+0x8f2c>
   1a0d4:	ldr	r2, [sp, #300]	; 0x12c
   1a0d8:	add	r1, sp, #8
   1a0dc:	mov	r0, r5
   1a0e0:	bl	10f34 <memcpy@plt>
   1a0e4:	ldr	r3, [pc, #80]	; 1a13c <__assert_fail@plt+0x8fb0>
   1a0e8:	add	r0, sp, #8
   1a0ec:	mov	r2, #64	; 0x40
   1a0f0:	ldr	r3, [r3]
   1a0f4:	mov	r1, #0
   1a0f8:	blx	r3
   1a0fc:	mov	r0, #0
   1a100:	add	sp, sp, #316	; 0x13c
   1a104:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a108:	mov	r3, ip
   1a10c:	mov	r0, r4
   1a110:	ldr	r2, [sp, #344]	; 0x158
   1a114:	bl	199d4 <__assert_fail@plt+0x8848>
   1a118:	cmp	r0, #0
   1a11c:	bge	1a000 <__assert_fail@plt+0x8e74>
   1a120:	mvn	r0, #0
   1a124:	b	1a100 <__assert_fail@plt+0x8f74>
   1a128:	mov	r2, r6
   1a12c:	mov	r1, r7
   1a130:	mov	r0, r4
   1a134:	bl	19700 <__assert_fail@plt+0x8574>
   1a138:	b	1a008 <__assert_fail@plt+0x8e7c>
   1a13c:	andeq	r3, r3, r8, lsl r1
   1a140:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a144:	mov	r5, r0
   1a148:	sub	sp, sp, #240	; 0xf0
   1a14c:	mov	r0, #32768	; 0x8000
   1a150:	mov	r9, r1
   1a154:	mov	r8, r2
   1a158:	bl	207ac <__assert_fail@plt+0xf620>
   1a15c:	subs	r6, r0, #0
   1a160:	beq	1a224 <__assert_fail@plt+0x9098>
   1a164:	mov	r0, sp
   1a168:	mov	r1, r8
   1a16c:	bl	198c8 <__assert_fail@plt+0x873c>
   1a170:	mov	r7, #1
   1a174:	mov	sl, #32768	; 0x8000
   1a178:	mov	r4, #0
   1a17c:	b	1a194 <__assert_fail@plt+0x9008>
   1a180:	cmp	r3, #0
   1a184:	beq	1a1d0 <__assert_fail@plt+0x9044>
   1a188:	bl	1106c <feof@plt>
   1a18c:	cmp	r0, #0
   1a190:	bne	1a1e0 <__assert_fail@plt+0x9054>
   1a194:	mov	r3, r5
   1a198:	rsb	r2, r4, #32768	; 0x8000
   1a19c:	add	r0, r6, r4
   1a1a0:	mov	r1, r7
   1a1a4:	bl	10fdc <fread@plt>
   1a1a8:	mov	r3, r0
   1a1ac:	add	r4, r4, r3
   1a1b0:	cmp	r4, #32768	; 0x8000
   1a1b4:	mov	r0, r5
   1a1b8:	bne	1a180 <__assert_fail@plt+0x8ff4>
   1a1bc:	mov	r2, sl
   1a1c0:	mov	r1, r6
   1a1c4:	mov	r0, sp
   1a1c8:	bl	19b5c <__assert_fail@plt+0x89d0>
   1a1cc:	b	1a178 <__assert_fail@plt+0x8fec>
   1a1d0:	bl	10f1c <ferror@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	mvnne	r4, #0
   1a1dc:	bne	1a1fc <__assert_fail@plt+0x9070>
   1a1e0:	cmp	r4, #0
   1a1e4:	bne	1a210 <__assert_fail@plt+0x9084>
   1a1e8:	mov	r2, r8
   1a1ec:	mov	r1, r9
   1a1f0:	mov	r0, sp
   1a1f4:	bl	19c88 <__assert_fail@plt+0x8afc>
   1a1f8:	mov	r4, #0
   1a1fc:	mov	r0, r6
   1a200:	bl	1a508 <__assert_fail@plt+0x937c>
   1a204:	mov	r0, r4
   1a208:	add	sp, sp, #240	; 0xf0
   1a20c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a210:	mov	r2, r4
   1a214:	mov	r1, r6
   1a218:	mov	r0, sp
   1a21c:	bl	19b5c <__assert_fail@plt+0x89d0>
   1a220:	b	1a1e8 <__assert_fail@plt+0x905c>
   1a224:	mvn	r4, #0
   1a228:	b	1a204 <__assert_fail@plt+0x9078>
   1a22c:	ldr	r3, [pc, #4]	; 1a238 <__assert_fail@plt+0x90ac>
   1a230:	str	r0, [r3]
   1a234:	bx	lr
   1a238:			; <UNDEFINED> instruction: 0x000331b0
   1a23c:	ldr	r3, [pc, #4]	; 1a248 <__assert_fail@plt+0x90bc>
   1a240:	strb	r0, [r3, #4]
   1a244:	bx	lr
   1a248:			; <UNDEFINED> instruction: 0x000331b0
   1a24c:	ldr	r3, [pc, #192]	; 1a314 <__assert_fail@plt+0x9188>
   1a250:	push	{r4, r5, r6, lr}
   1a254:	sub	sp, sp, #8
   1a258:	ldr	r0, [r3]
   1a25c:	bl	20834 <__assert_fail@plt+0xf6a8>
   1a260:	cmp	r0, #0
   1a264:	beq	1a288 <__assert_fail@plt+0x90fc>
   1a268:	ldr	r4, [pc, #168]	; 1a318 <__assert_fail@plt+0x918c>
   1a26c:	ldrb	r3, [r4, #4]
   1a270:	cmp	r3, #0
   1a274:	beq	1a2a4 <__assert_fail@plt+0x9118>
   1a278:	bl	11090 <__errno_location@plt>
   1a27c:	ldr	r3, [r0]
   1a280:	cmp	r3, #32
   1a284:	bne	1a2a4 <__assert_fail@plt+0x9118>
   1a288:	ldr	r3, [pc, #140]	; 1a31c <__assert_fail@plt+0x9190>
   1a28c:	ldr	r0, [r3]
   1a290:	bl	20834 <__assert_fail@plt+0xf6a8>
   1a294:	cmp	r0, #0
   1a298:	bne	1a2ec <__assert_fail@plt+0x9160>
   1a29c:	add	sp, sp, #8
   1a2a0:	pop	{r4, r5, r6, pc}
   1a2a4:	mov	r2, #5
   1a2a8:	ldr	r1, [pc, #112]	; 1a320 <__assert_fail@plt+0x9194>
   1a2ac:	mov	r0, #0
   1a2b0:	bl	10f7c <dcgettext@plt>
   1a2b4:	ldr	r4, [r4]
   1a2b8:	cmp	r4, #0
   1a2bc:	mov	r5, r0
   1a2c0:	beq	1a2f8 <__assert_fail@plt+0x916c>
   1a2c4:	bl	11090 <__errno_location@plt>
   1a2c8:	ldr	r6, [r0]
   1a2cc:	mov	r0, r4
   1a2d0:	bl	1d26c <__assert_fail@plt+0xc0e0>
   1a2d4:	mov	r1, r6
   1a2d8:	str	r5, [sp]
   1a2dc:	ldr	r2, [pc, #64]	; 1a324 <__assert_fail@plt+0x9198>
   1a2e0:	mov	r3, r0
   1a2e4:	mov	r0, #0
   1a2e8:	bl	11000 <error@plt>
   1a2ec:	ldr	r3, [pc, #52]	; 1a328 <__assert_fail@plt+0x919c>
   1a2f0:	ldr	r0, [r3]
   1a2f4:	bl	10f28 <_exit@plt>
   1a2f8:	bl	11090 <__errno_location@plt>
   1a2fc:	mov	r3, r5
   1a300:	ldr	r2, [pc, #36]	; 1a32c <__assert_fail@plt+0x91a0>
   1a304:	ldr	r1, [r0]
   1a308:	mov	r0, r4
   1a30c:	bl	11000 <error@plt>
   1a310:	b	1a2ec <__assert_fail@plt+0x9160>
   1a314:	andeq	r3, r3, r4, lsl #3
   1a318:			; <UNDEFINED> instruction: 0x000331b0
   1a31c:	andeq	r3, r3, r8, ror r1
   1a320:	andeq	r2, r2, r0, lsl #3
   1a324:	andeq	r2, r2, ip, lsl #3
   1a328:	andeq	r3, r3, r0, lsr #2
   1a32c:	andeq	r1, r2, r4, lsr #23
   1a330:	push	{r4, r5}
   1a334:	pop	{r4, r5}
   1a338:	b	10ef8 <posix_fadvise64@plt>
   1a33c:	cmp	r0, #0
   1a340:	bxeq	lr
   1a344:	push	{r4, lr}
   1a348:	sub	sp, sp, #16
   1a34c:	mov	r4, r1
   1a350:	bl	110cc <fileno@plt>
   1a354:	mov	r2, #0
   1a358:	mov	r3, #0
   1a35c:	str	r4, [sp, #8]
   1a360:	strd	r2, [sp]
   1a364:	bl	10ef8 <posix_fadvise64@plt>
   1a368:	add	sp, sp, #16
   1a36c:	pop	{r4, pc}
   1a370:	push	{r4, r5, lr}
   1a374:	sub	sp, sp, #12
   1a378:	mov	r4, r0
   1a37c:	bl	110cc <fileno@plt>
   1a380:	cmp	r0, #0
   1a384:	mov	r0, r4
   1a388:	blt	1a404 <__assert_fail@plt+0x9278>
   1a38c:	bl	11024 <__freading@plt>
   1a390:	cmp	r0, #0
   1a394:	bne	1a3d0 <__assert_fail@plt+0x9244>
   1a398:	mov	r0, r4
   1a39c:	bl	1a410 <__assert_fail@plt+0x9284>
   1a3a0:	cmp	r0, #0
   1a3a4:	beq	1a400 <__assert_fail@plt+0x9274>
   1a3a8:	bl	11090 <__errno_location@plt>
   1a3ac:	mov	r5, r0
   1a3b0:	mov	r0, r4
   1a3b4:	ldr	r4, [r5]
   1a3b8:	bl	110e4 <fclose@plt>
   1a3bc:	cmp	r4, #0
   1a3c0:	mvnne	r0, #0
   1a3c4:	strne	r4, [r5]
   1a3c8:	add	sp, sp, #12
   1a3cc:	pop	{r4, r5, pc}
   1a3d0:	mov	r0, r4
   1a3d4:	bl	110cc <fileno@plt>
   1a3d8:	mov	r3, #1
   1a3dc:	str	r3, [sp]
   1a3e0:	mov	r2, #0
   1a3e4:	mov	r3, #0
   1a3e8:	bl	10fc4 <lseek64@plt>
   1a3ec:	mvn	r3, #0
   1a3f0:	mvn	r2, #0
   1a3f4:	cmp	r1, r3
   1a3f8:	cmpeq	r0, r2
   1a3fc:	bne	1a398 <__assert_fail@plt+0x920c>
   1a400:	mov	r0, r4
   1a404:	add	sp, sp, #12
   1a408:	pop	{r4, r5, lr}
   1a40c:	b	110e4 <fclose@plt>
   1a410:	push	{r4, lr}
   1a414:	subs	r4, r0, #0
   1a418:	sub	sp, sp, #8
   1a41c:	beq	1a438 <__assert_fail@plt+0x92ac>
   1a420:	bl	11024 <__freading@plt>
   1a424:	cmp	r0, #0
   1a428:	beq	1a438 <__assert_fail@plt+0x92ac>
   1a42c:	ldr	r3, [r4]
   1a430:	tst	r3, #256	; 0x100
   1a434:	bne	1a448 <__assert_fail@plt+0x92bc>
   1a438:	mov	r0, r4
   1a43c:	add	sp, sp, #8
   1a440:	pop	{r4, lr}
   1a444:	b	10f04 <fflush@plt>
   1a448:	mov	r3, #1
   1a44c:	str	r3, [sp]
   1a450:	mov	r2, #0
   1a454:	mov	r3, #0
   1a458:	mov	r0, r4
   1a45c:	bl	1a560 <__assert_fail@plt+0x93d4>
   1a460:	mov	r0, r4
   1a464:	add	sp, sp, #8
   1a468:	pop	{r4, lr}
   1a46c:	b	10f04 <fflush@plt>
   1a470:	push	{r4, r5, r6, lr}
   1a474:	mov	r5, r1
   1a478:	bl	11144 <fopen64@plt>
   1a47c:	subs	r4, r0, #0
   1a480:	beq	1a490 <__assert_fail@plt+0x9304>
   1a484:	bl	110cc <fileno@plt>
   1a488:	cmp	r0, #2
   1a48c:	bls	1a498 <__assert_fail@plt+0x930c>
   1a490:	mov	r0, r4
   1a494:	pop	{r4, r5, r6, pc}
   1a498:	bl	1e64c <__assert_fail@plt+0xd4c0>
   1a49c:	subs	r6, r0, #0
   1a4a0:	blt	1a4e8 <__assert_fail@plt+0x935c>
   1a4a4:	mov	r0, r4
   1a4a8:	bl	1a370 <__assert_fail@plt+0x91e4>
   1a4ac:	cmp	r0, #0
   1a4b0:	bne	1a4c8 <__assert_fail@plt+0x933c>
   1a4b4:	mov	r1, r5
   1a4b8:	mov	r0, r6
   1a4bc:	bl	10eb0 <fdopen@plt>
   1a4c0:	subs	r4, r0, #0
   1a4c4:	bne	1a490 <__assert_fail@plt+0x9304>
   1a4c8:	bl	11090 <__errno_location@plt>
   1a4cc:	mov	r4, #0
   1a4d0:	mov	r5, r0
   1a4d4:	mov	r0, r6
   1a4d8:	ldr	r6, [r5]
   1a4dc:	bl	11174 <close@plt>
   1a4e0:	str	r6, [r5]
   1a4e4:	b	1a490 <__assert_fail@plt+0x9304>
   1a4e8:	bl	11090 <__errno_location@plt>
   1a4ec:	mov	r5, r0
   1a4f0:	mov	r0, r4
   1a4f4:	ldr	r6, [r5]
   1a4f8:	mov	r4, #0
   1a4fc:	bl	1a370 <__assert_fail@plt+0x91e4>
   1a500:	str	r6, [r5]
   1a504:	b	1a490 <__assert_fail@plt+0x9304>
   1a508:	push	{r4, r5, lr}
   1a50c:	sub	sp, sp, #12
   1a510:	mov	r5, r0
   1a514:	bl	11090 <__errno_location@plt>
   1a518:	mov	r2, #0
   1a51c:	mov	r4, r0
   1a520:	ldr	r3, [r0]
   1a524:	str	r2, [r4]
   1a528:	mov	r0, r5
   1a52c:	str	r3, [sp]
   1a530:	str	r3, [sp, #4]
   1a534:	bl	10f10 <free@plt>
   1a538:	ldr	r3, [r4]
   1a53c:	add	r2, sp, #8
   1a540:	cmp	r3, #0
   1a544:	moveq	r3, #4
   1a548:	movne	r3, #0
   1a54c:	add	r3, r2, r3
   1a550:	ldr	r3, [r3, #-8]
   1a554:	str	r3, [r4]
   1a558:	add	sp, sp, #12
   1a55c:	pop	{r4, r5, pc}
   1a560:	push	{r4, r5, r6, r7, r8, lr}
   1a564:	sub	sp, sp, #8
   1a568:	ldmib	r0, {ip, lr}
   1a56c:	mov	r4, r0
   1a570:	ldr	r5, [sp, #32]
   1a574:	cmp	lr, ip
   1a578:	beq	1a590 <__assert_fail@plt+0x9404>
   1a57c:	str	r5, [sp, #32]
   1a580:	mov	r0, r4
   1a584:	add	sp, sp, #8
   1a588:	pop	{r4, r5, r6, r7, r8, lr}
   1a58c:	b	110f0 <fseeko64@plt>
   1a590:	ldr	lr, [r0, #20]
   1a594:	ldr	ip, [r0, #16]
   1a598:	cmp	lr, ip
   1a59c:	bne	1a57c <__assert_fail@plt+0x93f0>
   1a5a0:	ldr	r8, [r0, #36]	; 0x24
   1a5a4:	cmp	r8, #0
   1a5a8:	bne	1a57c <__assert_fail@plt+0x93f0>
   1a5ac:	mov	r6, r2
   1a5b0:	mov	r7, r3
   1a5b4:	bl	110cc <fileno@plt>
   1a5b8:	mov	r2, r6
   1a5bc:	mov	r3, r7
   1a5c0:	str	r5, [sp]
   1a5c4:	bl	10fc4 <lseek64@plt>
   1a5c8:	mvn	r3, #0
   1a5cc:	mvn	r2, #0
   1a5d0:	cmp	r1, r3
   1a5d4:	cmpeq	r0, r2
   1a5d8:	beq	1a5f8 <__assert_fail@plt+0x946c>
   1a5dc:	ldr	r3, [r4]
   1a5e0:	strd	r0, [r4, #80]	; 0x50
   1a5e4:	mov	r0, r8
   1a5e8:	bic	r3, r3, #16
   1a5ec:	str	r3, [r4]
   1a5f0:	add	sp, sp, #8
   1a5f4:	pop	{r4, r5, r6, r7, r8, pc}
   1a5f8:	mvn	r0, #0
   1a5fc:	b	1a5f0 <__assert_fail@plt+0x9464>
   1a600:	push	{r4, r5, r6, lr}
   1a604:	subs	r4, r0, #0
   1a608:	beq	1a67c <__assert_fail@plt+0x94f0>
   1a60c:	mov	r1, #47	; 0x2f
   1a610:	bl	11120 <strrchr@plt>
   1a614:	subs	r5, r0, #0
   1a618:	beq	1a668 <__assert_fail@plt+0x94dc>
   1a61c:	add	r6, r5, #1
   1a620:	sub	r3, r6, r4
   1a624:	cmp	r3, #6
   1a628:	ble	1a668 <__assert_fail@plt+0x94dc>
   1a62c:	mov	r2, #7
   1a630:	ldr	r1, [pc, #96]	; 1a698 <__assert_fail@plt+0x950c>
   1a634:	sub	r0, r5, #6
   1a638:	bl	1115c <strncmp@plt>
   1a63c:	cmp	r0, #0
   1a640:	bne	1a668 <__assert_fail@plt+0x94dc>
   1a644:	mov	r2, #3
   1a648:	ldr	r1, [pc, #76]	; 1a69c <__assert_fail@plt+0x9510>
   1a64c:	mov	r0, r6
   1a650:	bl	1115c <strncmp@plt>
   1a654:	cmp	r0, #0
   1a658:	movne	r4, r6
   1a65c:	ldreq	r3, [pc, #60]	; 1a6a0 <__assert_fail@plt+0x9514>
   1a660:	addeq	r4, r5, #4
   1a664:	streq	r4, [r3]
   1a668:	ldr	r2, [pc, #52]	; 1a6a4 <__assert_fail@plt+0x9518>
   1a66c:	ldr	r3, [pc, #52]	; 1a6a8 <__assert_fail@plt+0x951c>
   1a670:	str	r4, [r2]
   1a674:	str	r4, [r3]
   1a678:	pop	{r4, r5, r6, pc}
   1a67c:	ldr	r3, [pc, #40]	; 1a6ac <__assert_fail@plt+0x9520>
   1a680:	mov	r2, #55	; 0x37
   1a684:	mov	r1, #1
   1a688:	ldr	r3, [r3]
   1a68c:	ldr	r0, [pc, #28]	; 1a6b0 <__assert_fail@plt+0x9524>
   1a690:	bl	10fb8 <fwrite@plt>
   1a694:	bl	11168 <abort@plt>
   1a698:	andeq	r2, r2, ip, asr #3
   1a69c:	ldrdeq	r2, [r2], -r4
   1a6a0:	andeq	r3, r3, r8, ror #2
   1a6a4:			; <UNDEFINED> instruction: 0x000331b8
   1a6a8:	andeq	r3, r3, ip, ror #2
   1a6ac:	andeq	r3, r3, r8, ror r1
   1a6b0:	muleq	r2, r4, r1
   1a6b4:	push	{r4, r5, r6, lr}
   1a6b8:	mov	r4, r0
   1a6bc:	mov	r5, r1
   1a6c0:	bl	20a84 <__assert_fail@plt+0xf8f8>
   1a6c4:	ldrb	r3, [r0]
   1a6c8:	bic	r3, r3, #32
   1a6cc:	cmp	r3, #85	; 0x55
   1a6d0:	bne	1a730 <__assert_fail@plt+0x95a4>
   1a6d4:	ldrb	r3, [r0, #1]
   1a6d8:	bic	r3, r3, #32
   1a6dc:	cmp	r3, #84	; 0x54
   1a6e0:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a6e4:	ldrb	r3, [r0, #2]
   1a6e8:	bic	r3, r3, #32
   1a6ec:	cmp	r3, #70	; 0x46
   1a6f0:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a6f4:	ldrb	r3, [r0, #3]
   1a6f8:	cmp	r3, #45	; 0x2d
   1a6fc:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a700:	ldrb	r3, [r0, #4]
   1a704:	cmp	r3, #56	; 0x38
   1a708:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a70c:	ldrb	r3, [r0, #5]
   1a710:	cmp	r3, #0
   1a714:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a718:	ldrb	r2, [r4]
   1a71c:	ldr	r3, [pc, #152]	; 1a7bc <__assert_fail@plt+0x9630>
   1a720:	ldr	r0, [pc, #152]	; 1a7c0 <__assert_fail@plt+0x9634>
   1a724:	cmp	r2, #96	; 0x60
   1a728:	movne	r0, r3
   1a72c:	pop	{r4, r5, r6, pc}
   1a730:	cmp	r3, #71	; 0x47
   1a734:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a738:	ldrb	r3, [r0, #1]
   1a73c:	bic	r3, r3, #32
   1a740:	cmp	r3, #66	; 0x42
   1a744:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a748:	ldrb	r3, [r0, #2]
   1a74c:	cmp	r3, #49	; 0x31
   1a750:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a754:	ldrb	r3, [r0, #3]
   1a758:	cmp	r3, #56	; 0x38
   1a75c:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a760:	ldrb	r3, [r0, #4]
   1a764:	cmp	r3, #48	; 0x30
   1a768:	beq	1a780 <__assert_fail@plt+0x95f4>
   1a76c:	ldr	r3, [pc, #80]	; 1a7c4 <__assert_fail@plt+0x9638>
   1a770:	cmp	r5, #9
   1a774:	ldr	r0, [pc, #76]	; 1a7c8 <__assert_fail@plt+0x963c>
   1a778:	movne	r0, r3
   1a77c:	pop	{r4, r5, r6, pc}
   1a780:	ldrb	r3, [r0, #5]
   1a784:	cmp	r3, #51	; 0x33
   1a788:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a78c:	ldrb	r3, [r0, #6]
   1a790:	cmp	r3, #48	; 0x30
   1a794:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a798:	ldrb	r3, [r0, #7]
   1a79c:	cmp	r3, #0
   1a7a0:	bne	1a76c <__assert_fail@plt+0x95e0>
   1a7a4:	ldrb	r2, [r4]
   1a7a8:	ldr	r3, [pc, #28]	; 1a7cc <__assert_fail@plt+0x9640>
   1a7ac:	ldr	r0, [pc, #28]	; 1a7d0 <__assert_fail@plt+0x9644>
   1a7b0:	cmp	r2, #96	; 0x60
   1a7b4:	movne	r0, r3
   1a7b8:	pop	{r4, r5, r6, pc}
   1a7bc:	andeq	r2, r2, r0, lsr r2
   1a7c0:	andeq	r2, r2, ip, lsr #4
   1a7c4:	andeq	r2, r2, r0, asr #4
   1a7c8:	andeq	r2, r2, ip, lsr r2
   1a7cc:	andeq	r2, r2, r8, lsr r2
   1a7d0:	andeq	r2, r2, r4, lsr r2
   1a7d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7d8:	sub	sp, sp, #140	; 0x8c
   1a7dc:	mov	r9, r1
   1a7e0:	str	r3, [sp, #24]
   1a7e4:	mov	r3, #1
   1a7e8:	mov	sl, r0
   1a7ec:	str	r2, [sp, #44]	; 0x2c
   1a7f0:	str	r3, [sp, #28]
   1a7f4:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   1a7f8:	ldr	r3, [sp, #180]	; 0xb4
   1a7fc:	mov	fp, r9
   1a800:	mov	r9, sl
   1a804:	lsr	r3, r3, #1
   1a808:	and	r3, r3, #1
   1a80c:	str	r3, [sp, #40]	; 0x28
   1a810:	ldr	r3, [sp, #180]	; 0xb4
   1a814:	mov	r2, #0
   1a818:	and	r3, r3, #4
   1a81c:	str	r3, [sp, #100]	; 0x64
   1a820:	ldr	r3, [sp, #180]	; 0xb4
   1a824:	str	r2, [sp, #76]	; 0x4c
   1a828:	and	r3, r3, #1
   1a82c:	str	r3, [sp, #96]	; 0x60
   1a830:	str	r2, [sp, #36]	; 0x24
   1a834:	str	r2, [sp, #56]	; 0x38
   1a838:	str	r2, [sp, #68]	; 0x44
   1a83c:	str	r2, [sp, #72]	; 0x48
   1a840:	str	r2, [sp, #84]	; 0x54
   1a844:	str	r0, [sp, #80]	; 0x50
   1a848:	ldr	r3, [sp, #176]	; 0xb0
   1a84c:	cmp	r3, #10
   1a850:	ldrls	pc, [pc, r3, lsl #2]
   1a854:	b	1ba2c <__assert_fail@plt+0xa8a0>
   1a858:	andeq	sl, r1, r4, lsl #17
   1a85c:	andeq	sl, r1, r4, lsr #23
   1a860:	strdeq	sl, [r1], -ip
   1a864:	ldrdeq	sl, [r1], -r8
   1a868:	andeq	sl, r1, r0, asr sp
   1a86c:	andeq	sl, r1, r0, lsr sp
   1a870:	strdeq	sl, [r1], -r8
   1a874:	andeq	sl, r1, ip, lsl ip
   1a878:	andeq	sl, r1, r4, asr #24
   1a87c:	andeq	sl, r1, r4, asr #24
   1a880:	andeq	sl, r1, r4, asr #24
   1a884:	mov	r3, #0
   1a888:	ldr	r1, [sp, #56]	; 0x38
   1a88c:	ldr	r2, [sp, #176]	; 0xb0
   1a890:	ldr	lr, [sp, #176]	; 0xb0
   1a894:	mov	r8, r3
   1a898:	mov	ip, r3
   1a89c:	str	r3, [sp, #40]	; 0x28
   1a8a0:	mov	r3, r1
   1a8a4:	cmp	r2, #2
   1a8a8:	moveq	r3, #0
   1a8ac:	andne	r3, r3, #1
   1a8b0:	mov	r0, r3
   1a8b4:	str	r3, [sp, #92]	; 0x5c
   1a8b8:	ldr	r3, [sp, #68]	; 0x44
   1a8bc:	sub	lr, lr, #2
   1a8c0:	adds	r2, r3, #0
   1a8c4:	movne	r2, #1
   1a8c8:	and	r3, r1, ip
   1a8cc:	and	r3, r2, r3
   1a8d0:	clz	lr, lr
   1a8d4:	str	r3, [sp, #88]	; 0x58
   1a8d8:	lsr	lr, lr, #5
   1a8dc:	mov	r3, ip
   1a8e0:	and	r3, r3, lr
   1a8e4:	mov	sl, #0
   1a8e8:	and	r0, r2, r0
   1a8ec:	str	r3, [sp, #64]	; 0x40
   1a8f0:	eor	r3, r1, #1
   1a8f4:	str	lr, [sp, #52]	; 0x34
   1a8f8:	str	r0, [sp, #48]	; 0x30
   1a8fc:	str	r3, [sp, #60]	; 0x3c
   1a900:	ldr	r3, [sp, #24]
   1a904:	cmn	r3, #1
   1a908:	beq	1ae38 <__assert_fail@plt+0x9cac>
   1a90c:	subs	r7, r3, sl
   1a910:	movne	r7, #1
   1a914:	cmp	r7, #0
   1a918:	beq	1ae50 <__assert_fail@plt+0x9cc4>
   1a91c:	ldr	r3, [sp, #48]	; 0x30
   1a920:	cmp	r3, #0
   1a924:	beq	1b1bc <__assert_fail@plt+0xa030>
   1a928:	ldr	r2, [sp, #68]	; 0x44
   1a92c:	ldr	r1, [sp, #24]
   1a930:	cmp	r2, #1
   1a934:	mov	r3, r2
   1a938:	movls	r3, #0
   1a93c:	movhi	r3, #1
   1a940:	cmn	r1, #1
   1a944:	movne	r3, #0
   1a948:	cmp	r3, #0
   1a94c:	add	r4, sl, r2
   1a950:	beq	1a960 <__assert_fail@plt+0x97d4>
   1a954:	ldr	r0, [sp, #44]	; 0x2c
   1a958:	bl	11078 <strlen@plt>
   1a95c:	str	r0, [sp, #24]
   1a960:	ldr	r3, [sp, #24]
   1a964:	cmp	r3, r4
   1a968:	ldr	r3, [sp, #44]	; 0x2c
   1a96c:	add	r5, r3, sl
   1a970:	bcc	1b1c4 <__assert_fail@plt+0xa038>
   1a974:	mov	r0, r5
   1a978:	ldr	r2, [sp, #68]	; 0x44
   1a97c:	ldr	r1, [sp, #72]	; 0x48
   1a980:	bl	10f64 <memcmp@plt>
   1a984:	cmp	r0, #0
   1a988:	bne	1b1c4 <__assert_fail@plt+0xa038>
   1a98c:	ldr	r3, [sp, #40]	; 0x28
   1a990:	cmp	r3, #0
   1a994:	bne	1bb80 <__assert_fail@plt+0xa9f4>
   1a998:	ldrb	r4, [r5]
   1a99c:	cmp	r4, #126	; 0x7e
   1a9a0:	ldrls	pc, [pc, r4, lsl #2]
   1a9a4:	b	1babc <__assert_fail@plt+0xa930>
   1a9a8:	andeq	fp, r1, ip, ror r0
   1a9ac:			; <UNDEFINED> instruction: 0x0001babc
   1a9b0:			; <UNDEFINED> instruction: 0x0001babc
   1a9b4:			; <UNDEFINED> instruction: 0x0001babc
   1a9b8:			; <UNDEFINED> instruction: 0x0001babc
   1a9bc:			; <UNDEFINED> instruction: 0x0001babc
   1a9c0:			; <UNDEFINED> instruction: 0x0001babc
   1a9c4:	andeq	fp, r1, r8, rrx
   1a9c8:	andeq	fp, r1, r4, asr r0
   1a9cc:	andeq	fp, r1, r0, lsr r0
   1a9d0:	andeq	fp, r1, r0, lsl r0
   1a9d4:	andeq	fp, r1, r0, asr #32
   1a9d8:	andeq	sl, r1, r8, ror pc
   1a9dc:	andeq	fp, r1, ip, lsr #3
   1a9e0:			; <UNDEFINED> instruction: 0x0001babc
   1a9e4:			; <UNDEFINED> instruction: 0x0001babc
   1a9e8:			; <UNDEFINED> instruction: 0x0001babc
   1a9ec:			; <UNDEFINED> instruction: 0x0001babc
   1a9f0:			; <UNDEFINED> instruction: 0x0001babc
   1a9f4:			; <UNDEFINED> instruction: 0x0001babc
   1a9f8:			; <UNDEFINED> instruction: 0x0001babc
   1a9fc:			; <UNDEFINED> instruction: 0x0001babc
   1aa00:			; <UNDEFINED> instruction: 0x0001babc
   1aa04:			; <UNDEFINED> instruction: 0x0001babc
   1aa08:			; <UNDEFINED> instruction: 0x0001babc
   1aa0c:			; <UNDEFINED> instruction: 0x0001babc
   1aa10:			; <UNDEFINED> instruction: 0x0001babc
   1aa14:			; <UNDEFINED> instruction: 0x0001babc
   1aa18:			; <UNDEFINED> instruction: 0x0001babc
   1aa1c:			; <UNDEFINED> instruction: 0x0001babc
   1aa20:			; <UNDEFINED> instruction: 0x0001babc
   1aa24:			; <UNDEFINED> instruction: 0x0001babc
   1aa28:	muleq	r1, ip, r1
   1aa2c:	andeq	fp, r1, ip, ror r1
   1aa30:	andeq	fp, r1, ip, ror r1
   1aa34:	andeq	fp, r1, ip, asr r1
   1aa38:	andeq	fp, r1, ip, ror r1
   1aa3c:	andeq	sl, r1, r8, ror #30
   1aa40:	andeq	fp, r1, ip, ror r1
   1aa44:	andeq	sl, r1, r4, asr #30
   1aa48:	andeq	fp, r1, ip, ror r1
   1aa4c:	andeq	fp, r1, ip, ror r1
   1aa50:	andeq	fp, r1, ip, ror r1
   1aa54:	andeq	sl, r1, r8, ror #30
   1aa58:	andeq	sl, r1, r8, ror #30
   1aa5c:	andeq	sl, r1, r8, ror #30
   1aa60:	andeq	sl, r1, r8, ror #30
   1aa64:	andeq	sl, r1, r8, ror #30
   1aa68:	andeq	sl, r1, r8, ror #30
   1aa6c:	andeq	sl, r1, r8, ror #30
   1aa70:	andeq	sl, r1, r8, ror #30
   1aa74:	andeq	sl, r1, r8, ror #30
   1aa78:	andeq	sl, r1, r8, ror #30
   1aa7c:	andeq	sl, r1, r8, ror #30
   1aa80:	andeq	sl, r1, r8, ror #30
   1aa84:	andeq	sl, r1, r8, ror #30
   1aa88:	andeq	sl, r1, r8, ror #30
   1aa8c:	andeq	sl, r1, r8, ror #30
   1aa90:	andeq	sl, r1, r8, ror #30
   1aa94:	andeq	fp, r1, ip, ror r1
   1aa98:	andeq	fp, r1, ip, ror r1
   1aa9c:	andeq	fp, r1, ip, ror r1
   1aaa0:	andeq	fp, r1, ip, ror r1
   1aaa4:	strdeq	sl, [r1], -r4
   1aaa8:			; <UNDEFINED> instruction: 0x0001babc
   1aaac:	andeq	sl, r1, r8, ror #30
   1aab0:	andeq	sl, r1, r8, ror #30
   1aab4:	andeq	sl, r1, r8, ror #30
   1aab8:	andeq	sl, r1, r8, ror #30
   1aabc:	andeq	sl, r1, r8, ror #30
   1aac0:	andeq	sl, r1, r8, ror #30
   1aac4:	andeq	sl, r1, r8, ror #30
   1aac8:	andeq	sl, r1, r8, ror #30
   1aacc:	andeq	sl, r1, r8, ror #30
   1aad0:	andeq	sl, r1, r8, ror #30
   1aad4:	andeq	sl, r1, r8, ror #30
   1aad8:	andeq	sl, r1, r8, ror #30
   1aadc:	andeq	sl, r1, r8, ror #30
   1aae0:	andeq	sl, r1, r8, ror #30
   1aae4:	andeq	sl, r1, r8, ror #30
   1aae8:	andeq	sl, r1, r8, ror #30
   1aaec:	andeq	sl, r1, r8, ror #30
   1aaf0:	andeq	sl, r1, r8, ror #30
   1aaf4:	andeq	sl, r1, r8, ror #30
   1aaf8:	andeq	sl, r1, r8, ror #30
   1aafc:	andeq	sl, r1, r8, ror #30
   1ab00:	andeq	sl, r1, r8, ror #30
   1ab04:	andeq	sl, r1, r8, ror #30
   1ab08:	andeq	sl, r1, r8, ror #30
   1ab0c:	andeq	sl, r1, r8, ror #30
   1ab10:	andeq	sl, r1, r8, ror #30
   1ab14:	andeq	fp, r1, ip, ror r1
   1ab18:	andeq	sl, r1, r0, asr #29
   1ab1c:	andeq	sl, r1, r8, ror #30
   1ab20:	andeq	fp, r1, ip, ror r1
   1ab24:	andeq	sl, r1, r8, ror #30
   1ab28:	andeq	fp, r1, ip, ror r1
   1ab2c:	andeq	sl, r1, r8, ror #30
   1ab30:	andeq	sl, r1, r8, ror #30
   1ab34:	andeq	sl, r1, r8, ror #30
   1ab38:	andeq	sl, r1, r8, ror #30
   1ab3c:	andeq	sl, r1, r8, ror #30
   1ab40:	andeq	sl, r1, r8, ror #30
   1ab44:	andeq	sl, r1, r8, ror #30
   1ab48:	andeq	sl, r1, r8, ror #30
   1ab4c:	andeq	sl, r1, r8, ror #30
   1ab50:	andeq	sl, r1, r8, ror #30
   1ab54:	andeq	sl, r1, r8, ror #30
   1ab58:	andeq	sl, r1, r8, ror #30
   1ab5c:	andeq	sl, r1, r8, ror #30
   1ab60:	andeq	sl, r1, r8, ror #30
   1ab64:	andeq	sl, r1, r8, ror #30
   1ab68:	andeq	sl, r1, r8, ror #30
   1ab6c:	andeq	sl, r1, r8, ror #30
   1ab70:	andeq	sl, r1, r8, ror #30
   1ab74:	andeq	sl, r1, r8, ror #30
   1ab78:	andeq	sl, r1, r8, ror #30
   1ab7c:	andeq	sl, r1, r8, ror #30
   1ab80:	andeq	sl, r1, r8, ror #30
   1ab84:	andeq	sl, r1, r8, ror #30
   1ab88:	andeq	sl, r1, r8, ror #30
   1ab8c:	andeq	sl, r1, r8, ror #30
   1ab90:	andeq	sl, r1, r8, ror #30
   1ab94:	andeq	sl, r1, r8, ror sp
   1ab98:	andeq	fp, r1, ip, ror r1
   1ab9c:	andeq	sl, r1, r8, ror sp
   1aba0:	andeq	fp, r1, ip, asr r1
   1aba4:	mov	r3, #1
   1aba8:	str	r3, [sp, #40]	; 0x28
   1abac:	str	r3, [sp, #68]	; 0x44
   1abb0:	mov	r8, #0
   1abb4:	ldr	r3, [pc, #4056]	; 1bb94 <__assert_fail@plt+0xaa08>
   1abb8:	str	r3, [sp, #72]	; 0x48
   1abbc:	mov	r3, #2
   1abc0:	str	r3, [sp, #176]	; 0xb0
   1abc4:	ldr	r1, [sp, #56]	; 0x38
   1abc8:	mov	r2, r3
   1abcc:	ldr	ip, [sp, #40]	; 0x28
   1abd0:	mov	lr, r3
   1abd4:	b	1a8a0 <__assert_fail@plt+0x9714>
   1abd8:	mov	r3, #1
   1abdc:	str	r3, [sp, #56]	; 0x38
   1abe0:	str	r3, [sp, #68]	; 0x44
   1abe4:	str	r3, [sp, #40]	; 0x28
   1abe8:	ldr	r3, [pc, #4004]	; 1bb94 <__assert_fail@plt+0xaa08>
   1abec:	mov	r8, #0
   1abf0:	str	r3, [sp, #72]	; 0x48
   1abf4:	b	1abbc <__assert_fail@plt+0x9a30>
   1abf8:	mov	r3, #1
   1abfc:	str	r3, [sp, #56]	; 0x38
   1ac00:	str	r3, [sp, #68]	; 0x44
   1ac04:	str	r3, [sp, #40]	; 0x28
   1ac08:	ldr	r3, [pc, #3976]	; 1bb98 <__assert_fail@plt+0xaa0c>
   1ac0c:	mov	r8, #0
   1ac10:	str	r3, [sp, #72]	; 0x48
   1ac14:	mov	r3, #5
   1ac18:	b	1abc0 <__assert_fail@plt+0x9a34>
   1ac1c:	mov	r3, #0
   1ac20:	str	r3, [sp, #40]	; 0x28
   1ac24:	mov	r3, #1
   1ac28:	str	r3, [sp, #56]	; 0x38
   1ac2c:	mov	r8, #0
   1ac30:	mov	r1, r3
   1ac34:	ldr	r2, [sp, #176]	; 0xb0
   1ac38:	ldr	ip, [sp, #40]	; 0x28
   1ac3c:	ldr	lr, [sp, #176]	; 0xb0
   1ac40:	b	1a8a0 <__assert_fail@plt+0x9714>
   1ac44:	ldr	r3, [sp, #176]	; 0xb0
   1ac48:	cmp	r3, #10
   1ac4c:	beq	1ac90 <__assert_fail@plt+0x9b04>
   1ac50:	mov	r2, #5
   1ac54:	ldr	r1, [pc, #3904]	; 1bb9c <__assert_fail@plt+0xaa10>
   1ac58:	mov	r0, #0
   1ac5c:	bl	10f7c <dcgettext@plt>
   1ac60:	ldr	r2, [pc, #3892]	; 1bb9c <__assert_fail@plt+0xaa10>
   1ac64:	cmp	r0, r2
   1ac68:	str	r0, [sp, #188]	; 0xbc
   1ac6c:	beq	1bd28 <__assert_fail@plt+0xab9c>
   1ac70:	mov	r2, #5
   1ac74:	ldr	r1, [pc, #3864]	; 1bb94 <__assert_fail@plt+0xaa08>
   1ac78:	mov	r0, #0
   1ac7c:	bl	10f7c <dcgettext@plt>
   1ac80:	ldr	r2, [pc, #3852]	; 1bb94 <__assert_fail@plt+0xaa08>
   1ac84:	cmp	r0, r2
   1ac88:	str	r0, [sp, #192]	; 0xc0
   1ac8c:	beq	1bd18 <__assert_fail@plt+0xab8c>
   1ac90:	ldr	r8, [sp, #40]	; 0x28
   1ac94:	cmp	r8, #0
   1ac98:	movne	r8, #0
   1ac9c:	bne	1accc <__assert_fail@plt+0x9b40>
   1aca0:	ldr	r3, [sp, #188]	; 0xbc
   1aca4:	ldrb	r3, [r3]
   1aca8:	cmp	r3, #0
   1acac:	beq	1accc <__assert_fail@plt+0x9b40>
   1acb0:	ldr	r2, [sp, #188]	; 0xbc
   1acb4:	cmp	fp, r8
   1acb8:	strbhi	r3, [r9, r8]
   1acbc:	ldrb	r3, [r2, #1]!
   1acc0:	add	r8, r8, #1
   1acc4:	cmp	r3, #0
   1acc8:	bne	1acb4 <__assert_fail@plt+0x9b28>
   1accc:	ldr	r0, [sp, #192]	; 0xc0
   1acd0:	bl	11078 <strlen@plt>
   1acd4:	ldr	r3, [sp, #192]	; 0xc0
   1acd8:	ldr	r2, [sp, #176]	; 0xb0
   1acdc:	str	r3, [sp, #72]	; 0x48
   1ace0:	mov	r3, #1
   1ace4:	str	r3, [sp, #56]	; 0x38
   1ace8:	mov	r1, r3
   1acec:	ldr	ip, [sp, #40]	; 0x28
   1acf0:	ldr	lr, [sp, #176]	; 0xb0
   1acf4:	str	r0, [sp, #68]	; 0x44
   1acf8:	b	1a8a0 <__assert_fail@plt+0x9714>
   1acfc:	ldr	r3, [sp, #40]	; 0x28
   1ad00:	cmp	r3, #0
   1ad04:	beq	1b9ac <__assert_fail@plt+0xa820>
   1ad08:	mov	r3, #1
   1ad0c:	str	r3, [sp, #68]	; 0x44
   1ad10:	ldr	r3, [pc, #3708]	; 1bb94 <__assert_fail@plt+0xaa08>
   1ad14:	str	r3, [sp, #72]	; 0x48
   1ad18:	mov	r8, #0
   1ad1c:	ldr	r1, [sp, #56]	; 0x38
   1ad20:	ldr	r2, [sp, #176]	; 0xb0
   1ad24:	ldr	ip, [sp, #40]	; 0x28
   1ad28:	ldr	lr, [sp, #176]	; 0xb0
   1ad2c:	b	1a8a0 <__assert_fail@plt+0x9714>
   1ad30:	ldr	r3, [sp, #40]	; 0x28
   1ad34:	cmp	r3, #0
   1ad38:	beq	1ba30 <__assert_fail@plt+0xa8a4>
   1ad3c:	str	r3, [sp, #56]	; 0x38
   1ad40:	mov	r3, #1
   1ad44:	str	r3, [sp, #68]	; 0x44
   1ad48:	ldr	r3, [pc, #3656]	; 1bb98 <__assert_fail@plt+0xaa0c>
   1ad4c:	b	1ad14 <__assert_fail@plt+0x9b88>
   1ad50:	ldr	r3, [sp, #40]	; 0x28
   1ad54:	cmp	r3, #0
   1ad58:	mov	r3, #1
   1ad5c:	streq	r3, [sp, #56]	; 0x38
   1ad60:	beq	1b9ac <__assert_fail@plt+0xa820>
   1ad64:	str	r3, [sp, #68]	; 0x44
   1ad68:	ldr	r3, [pc, #3620]	; 1bb94 <__assert_fail@plt+0xaa08>
   1ad6c:	mov	r8, #0
   1ad70:	str	r3, [sp, #72]	; 0x48
   1ad74:	b	1abbc <__assert_fail@plt+0x9a30>
   1ad78:	ldr	r3, [sp, #24]
   1ad7c:	ldr	r6, [sp, #48]	; 0x30
   1ad80:	cmn	r3, #1
   1ad84:	beq	1b3e0 <__assert_fail@plt+0xa254>
   1ad88:	subs	r3, r3, #1
   1ad8c:	movne	r3, #1
   1ad90:	cmp	r3, #0
   1ad94:	beq	1b160 <__assert_fail@plt+0x9fd4>
   1ad98:	ldr	r1, [sp, #52]	; 0x34
   1ad9c:	mov	r7, r3
   1ada0:	mov	r3, #0
   1ada4:	str	r3, [sp, #32]
   1ada8:	ldr	r3, [sp, #60]	; 0x3c
   1adac:	orr	r2, r1, r3
   1adb0:	ldr	r3, [sp, #40]	; 0x28
   1adb4:	eor	r2, r2, #1
   1adb8:	orr	r2, r3, r2
   1adbc:	tst	r2, #255	; 0xff
   1adc0:	bne	1b6e4 <__assert_fail@plt+0xa558>
   1adc4:	cmp	r6, #0
   1adc8:	bne	1afa4 <__assert_fail@plt+0x9e18>
   1adcc:	ldr	r3, [sp, #36]	; 0x24
   1add0:	add	sl, sl, #1
   1add4:	and	r3, r3, r7
   1add8:	uxtb	r6, r3
   1addc:	cmp	r6, #0
   1ade0:	beq	1ae0c <__assert_fail@plt+0x9c80>
   1ade4:	cmp	fp, r8
   1ade8:	movhi	r3, #39	; 0x27
   1adec:	strbhi	r3, [r9, r8]
   1adf0:	add	r3, r8, #1
   1adf4:	cmp	fp, r3
   1adf8:	movhi	r2, #39	; 0x27
   1adfc:	add	r8, r8, #2
   1ae00:	strbhi	r2, [r9, r3]
   1ae04:	mov	r3, #0
   1ae08:	str	r3, [sp, #36]	; 0x24
   1ae0c:	ldr	r2, [sp, #32]
   1ae10:	cmp	r8, fp
   1ae14:	ldr	r3, [sp, #28]
   1ae18:	strbcc	r4, [r9, r8]
   1ae1c:	cmp	r2, #0
   1ae20:	moveq	r3, #0
   1ae24:	str	r3, [sp, #28]
   1ae28:	ldr	r3, [sp, #24]
   1ae2c:	add	r8, r8, #1
   1ae30:	cmn	r3, #1
   1ae34:	bne	1a90c <__assert_fail@plt+0x9780>
   1ae38:	ldr	r3, [sp, #44]	; 0x2c
   1ae3c:	ldrb	r3, [r3, sl]
   1ae40:	adds	r7, r3, #0
   1ae44:	movne	r7, #1
   1ae48:	cmp	r7, #0
   1ae4c:	bne	1a91c <__assert_fail@plt+0x9790>
   1ae50:	ldr	r3, [sp, #64]	; 0x40
   1ae54:	cmp	r8, #0
   1ae58:	movne	r3, #0
   1ae5c:	andeq	r3, r3, #1
   1ae60:	cmp	r3, #0
   1ae64:	str	r3, [sp, #64]	; 0x40
   1ae68:	bne	1b90c <__assert_fail@plt+0xa780>
   1ae6c:	ldr	r3, [sp, #40]	; 0x28
   1ae70:	ldr	r2, [sp, #52]	; 0x34
   1ae74:	eor	r3, r3, #1
   1ae78:	ands	r2, r2, r3
   1ae7c:	beq	1bd38 <__assert_fail@plt+0xabac>
   1ae80:	ldr	r3, [sp, #76]	; 0x4c
   1ae84:	cmp	r3, #0
   1ae88:	beq	1bd08 <__assert_fail@plt+0xab7c>
   1ae8c:	ldr	r3, [sp, #28]
   1ae90:	cmp	r3, #0
   1ae94:	bne	1bcc4 <__assert_fail@plt+0xab38>
   1ae98:	ldr	r2, [sp, #84]	; 0x54
   1ae9c:	clz	r3, fp
   1aea0:	cmp	r2, #0
   1aea4:	lsr	r3, r3, #5
   1aea8:	moveq	r3, #0
   1aeac:	cmp	r3, #0
   1aeb0:	beq	1bc64 <__assert_fail@plt+0xaad8>
   1aeb4:	mov	fp, r2
   1aeb8:	str	r3, [sp, #76]	; 0x4c
   1aebc:	b	1a848 <__assert_fail@plt+0x96bc>
   1aec0:	ldr	r3, [sp, #176]	; 0xb0
   1aec4:	ldr	r6, [sp, #48]	; 0x30
   1aec8:	cmp	r3, #2
   1aecc:	beq	1b404 <__assert_fail@plt+0xa278>
   1aed0:	ldr	r3, [sp, #88]	; 0x58
   1aed4:	cmp	r3, #0
   1aed8:	beq	1b988 <__assert_fail@plt+0xa7fc>
   1aedc:	mov	r3, #0
   1aee0:	add	sl, sl, #1
   1aee4:	ldr	r6, [sp, #36]	; 0x24
   1aee8:	str	r3, [sp, #32]
   1aeec:	mov	r4, #92	; 0x5c
   1aef0:	b	1addc <__assert_fail@plt+0x9c50>
   1aef4:	ldr	r3, [sp, #176]	; 0xb0
   1aef8:	ldr	r6, [sp, #48]	; 0x30
   1aefc:	cmp	r3, #2
   1af00:	beq	1b434 <__assert_fail@plt+0xa2a8>
   1af04:	cmp	r3, #5
   1af08:	bne	1b998 <__assert_fail@plt+0xa80c>
   1af0c:	ldr	r3, [sp, #100]	; 0x64
   1af10:	cmp	r3, #0
   1af14:	beq	1b9fc <__assert_fail@plt+0xa870>
   1af18:	ldr	r2, [sp, #24]
   1af1c:	add	r3, sl, #2
   1af20:	cmp	r2, r3
   1af24:	bls	1af34 <__assert_fail@plt+0x9da8>
   1af28:	ldrb	r4, [r5, #1]
   1af2c:	cmp	r4, #63	; 0x3f
   1af30:	beq	1bba4 <__assert_fail@plt+0xaa18>
   1af34:	mov	r1, #0
   1af38:	str	r1, [sp, #32]
   1af3c:	mov	r4, #63	; 0x3f
   1af40:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1af44:	ldr	r3, [sp, #176]	; 0xb0
   1af48:	ldr	r6, [sp, #48]	; 0x30
   1af4c:	cmp	r3, #2
   1af50:	beq	1b460 <__assert_fail@plt+0xa2d4>
   1af54:	str	r7, [sp, #32]
   1af58:	str	r7, [sp, #76]	; 0x4c
   1af5c:	mov	r1, #0
   1af60:	mov	r4, #39	; 0x27
   1af64:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1af68:	ldr	r6, [sp, #48]	; 0x30
   1af6c:	ldr	r1, [sp, #52]	; 0x34
   1af70:	str	r7, [sp, #32]
   1af74:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1af78:	ldr	r6, [sp, #48]	; 0x30
   1af7c:	ldr	r1, [sp, #52]	; 0x34
   1af80:	mov	r4, #12
   1af84:	mov	r3, #102	; 0x66
   1af88:	ldr	r2, [sp, #56]	; 0x38
   1af8c:	cmp	r2, #0
   1af90:	streq	r2, [sp, #32]
   1af94:	beq	1ada8 <__assert_fail@plt+0x9c1c>
   1af98:	mov	r4, r3
   1af9c:	mov	r3, #0
   1afa0:	str	r3, [sp, #32]
   1afa4:	ldr	r3, [sp, #40]	; 0x28
   1afa8:	cmp	r3, #0
   1afac:	bne	1b71c <__assert_fail@plt+0xa590>
   1afb0:	ldr	r3, [sp, #36]	; 0x24
   1afb4:	eor	r3, r3, #1
   1afb8:	and	r3, r3, r1
   1afbc:	ands	r3, r3, #255	; 0xff
   1afc0:	beq	1aff8 <__assert_fail@plt+0x9e6c>
   1afc4:	cmp	fp, r8
   1afc8:	movhi	r2, #39	; 0x27
   1afcc:	strbhi	r2, [r9, r8]
   1afd0:	add	r2, r8, #1
   1afd4:	cmp	fp, r2
   1afd8:	movhi	r1, #36	; 0x24
   1afdc:	strbhi	r1, [r9, r2]
   1afe0:	add	r2, r8, #2
   1afe4:	cmp	fp, r2
   1afe8:	add	r8, r8, #3
   1afec:	movhi	r1, #39	; 0x27
   1aff0:	strbhi	r1, [r9, r2]
   1aff4:	str	r3, [sp, #36]	; 0x24
   1aff8:	cmp	fp, r8
   1affc:	movhi	r3, #92	; 0x5c
   1b000:	strbhi	r3, [r9, r8]
   1b004:	add	sl, sl, #1
   1b008:	add	r8, r8, #1
   1b00c:	b	1ae0c <__assert_fail@plt+0x9c80>
   1b010:	ldr	r6, [sp, #48]	; 0x30
   1b014:	mov	r4, #10
   1b018:	mov	r3, #110	; 0x6e
   1b01c:	ldr	r2, [sp, #64]	; 0x40
   1b020:	cmp	r2, #0
   1b024:	bne	1baa4 <__assert_fail@plt+0xa918>
   1b028:	ldr	r1, [sp, #52]	; 0x34
   1b02c:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b030:	ldr	r6, [sp, #48]	; 0x30
   1b034:	ldr	r1, [sp, #52]	; 0x34
   1b038:	mov	r3, #116	; 0x74
   1b03c:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b040:	ldr	r6, [sp, #48]	; 0x30
   1b044:	ldr	r1, [sp, #52]	; 0x34
   1b048:	mov	r4, #11
   1b04c:	mov	r3, #118	; 0x76
   1b050:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b054:	ldr	r6, [sp, #48]	; 0x30
   1b058:	ldr	r1, [sp, #52]	; 0x34
   1b05c:	mov	r4, #8
   1b060:	mov	r3, #98	; 0x62
   1b064:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b068:	ldr	r6, [sp, #48]	; 0x30
   1b06c:	ldr	r1, [sp, #52]	; 0x34
   1b070:	mov	r4, #7
   1b074:	mov	r3, #97	; 0x61
   1b078:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b07c:	ldr	r3, [sp, #56]	; 0x38
   1b080:	ldr	r6, [sp, #48]	; 0x30
   1b084:	cmp	r3, #0
   1b088:	beq	1b54c <__assert_fail@plt+0xa3c0>
   1b08c:	ldr	r3, [sp, #40]	; 0x28
   1b090:	cmp	r3, #0
   1b094:	bne	1bb80 <__assert_fail@plt+0xa9f4>
   1b098:	ldr	r3, [sp, #36]	; 0x24
   1b09c:	ldr	r2, [sp, #52]	; 0x34
   1b0a0:	eor	r3, r3, #1
   1b0a4:	ands	r3, r2, r3
   1b0a8:	moveq	r2, r8
   1b0ac:	beq	1b0e4 <__assert_fail@plt+0x9f58>
   1b0b0:	cmp	fp, r8
   1b0b4:	movhi	r2, #39	; 0x27
   1b0b8:	strbhi	r2, [r9, r8]
   1b0bc:	add	r2, r8, #1
   1b0c0:	cmp	fp, r2
   1b0c4:	movhi	r1, #36	; 0x24
   1b0c8:	strbhi	r1, [r9, r2]
   1b0cc:	add	r2, r8, #2
   1b0d0:	cmp	fp, r2
   1b0d4:	movhi	r1, #39	; 0x27
   1b0d8:	strbhi	r1, [r9, r2]
   1b0dc:	add	r2, r8, #3
   1b0e0:	str	r3, [sp, #36]	; 0x24
   1b0e4:	cmp	fp, r2
   1b0e8:	movhi	r3, #92	; 0x5c
   1b0ec:	strbhi	r3, [r9, r2]
   1b0f0:	ldr	r3, [sp, #92]	; 0x5c
   1b0f4:	add	r8, r2, #1
   1b0f8:	cmp	r3, #0
   1b0fc:	beq	1ba80 <__assert_fail@plt+0xa8f4>
   1b100:	ldr	r1, [sp, #24]
   1b104:	add	r3, sl, #1
   1b108:	cmp	r1, r3
   1b10c:	bls	1b144 <__assert_fail@plt+0x9fb8>
   1b110:	ldr	r1, [sp, #44]	; 0x2c
   1b114:	ldrb	r3, [r1, r3]
   1b118:	sub	r3, r3, #48	; 0x30
   1b11c:	cmp	r3, #9
   1b120:	bhi	1b144 <__assert_fail@plt+0x9fb8>
   1b124:	cmp	fp, r8
   1b128:	movhi	r3, #48	; 0x30
   1b12c:	strbhi	r3, [r9, r8]
   1b130:	add	r3, r2, #2
   1b134:	cmp	fp, r3
   1b138:	add	r8, r2, #3
   1b13c:	movhi	r1, #48	; 0x30
   1b140:	strbhi	r1, [r9, r3]
   1b144:	ldr	r3, [sp, #40]	; 0x28
   1b148:	ldr	r1, [sp, #52]	; 0x34
   1b14c:	mov	r7, r3
   1b150:	str	r3, [sp, #32]
   1b154:	mov	r4, #48	; 0x30
   1b158:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b15c:	ldr	r6, [sp, #48]	; 0x30
   1b160:	cmp	sl, #0
   1b164:	streq	r7, [sp, #32]
   1b168:	beq	1b188 <__assert_fail@plt+0x9ffc>
   1b16c:	mov	r3, #0
   1b170:	ldr	r1, [sp, #52]	; 0x34
   1b174:	str	r3, [sp, #32]
   1b178:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b17c:	ldr	r6, [sp, #48]	; 0x30
   1b180:	mov	r3, #0
   1b184:	str	r3, [sp, #32]
   1b188:	ldr	r3, [sp, #64]	; 0x40
   1b18c:	cmp	r3, #0
   1b190:	bne	1b90c <__assert_fail@plt+0xa780>
   1b194:	ldr	r1, [sp, #52]	; 0x34
   1b198:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b19c:	ldr	r3, [sp, #48]	; 0x30
   1b1a0:	mov	r6, r3
   1b1a4:	str	r3, [sp, #32]
   1b1a8:	b	1b188 <__assert_fail@plt+0x9ffc>
   1b1ac:	ldr	r6, [sp, #48]	; 0x30
   1b1b0:	mov	r4, #13
   1b1b4:	mov	r3, #114	; 0x72
   1b1b8:	b	1b01c <__assert_fail@plt+0x9e90>
   1b1bc:	ldr	r3, [sp, #44]	; 0x2c
   1b1c0:	add	r5, r3, sl
   1b1c4:	ldrb	r4, [r5]
   1b1c8:	cmp	r4, #126	; 0x7e
   1b1cc:	ldrls	pc, [pc, r4, lsl #2]
   1b1d0:	b	1b56c <__assert_fail@plt+0xa3e0>
   1b1d4:	andeq	fp, r1, ip, lsr r5
   1b1d8:	andeq	fp, r1, ip, ror #10
   1b1dc:	andeq	fp, r1, ip, ror #10
   1b1e0:	andeq	fp, r1, ip, ror #10
   1b1e4:	andeq	fp, r1, ip, ror #10
   1b1e8:	andeq	fp, r1, ip, ror #10
   1b1ec:	andeq	fp, r1, ip, ror #10
   1b1f0:	andeq	fp, r1, r4, lsr r5
   1b1f4:	andeq	fp, r1, ip, lsr #10
   1b1f8:	andeq	fp, r1, r0, lsr #10
   1b1fc:	andeq	fp, r1, r8, lsl r5
   1b200:	andeq	fp, r1, r0, lsl r5
   1b204:	andeq	fp, r1, r8, lsl #10
   1b208:	andeq	fp, r1, r0, lsl #10
   1b20c:	andeq	fp, r1, ip, ror #10
   1b210:	andeq	fp, r1, ip, ror #10
   1b214:	andeq	fp, r1, ip, ror #10
   1b218:	andeq	fp, r1, ip, ror #10
   1b21c:	andeq	fp, r1, ip, ror #10
   1b220:	andeq	fp, r1, ip, ror #10
   1b224:	andeq	fp, r1, ip, ror #10
   1b228:	andeq	fp, r1, ip, ror #10
   1b22c:	andeq	fp, r1, ip, ror #10
   1b230:	andeq	fp, r1, ip, ror #10
   1b234:	andeq	fp, r1, ip, ror #10
   1b238:	andeq	fp, r1, ip, ror #10
   1b23c:	andeq	fp, r1, ip, ror #10
   1b240:	andeq	fp, r1, ip, ror #10
   1b244:	andeq	fp, r1, ip, ror #10
   1b248:	andeq	fp, r1, ip, ror #10
   1b24c:	andeq	fp, r1, ip, ror #10
   1b250:	andeq	fp, r1, ip, ror #10
   1b254:	strdeq	fp, [r1], -r4
   1b258:	andeq	fp, r1, ip, ror #9
   1b25c:	andeq	fp, r1, ip, ror #9
   1b260:	andeq	fp, r1, r4, ror #9
   1b264:	andeq	fp, r1, ip, ror #9
   1b268:	ldrdeq	fp, [r1], -ip
   1b26c:	andeq	fp, r1, ip, ror #9
   1b270:	andeq	fp, r1, r0, asr r4
   1b274:	andeq	fp, r1, ip, ror #9
   1b278:	andeq	fp, r1, ip, ror #9
   1b27c:	andeq	fp, r1, ip, ror #9
   1b280:	ldrdeq	fp, [r1], -ip
   1b284:	ldrdeq	fp, [r1], -ip
   1b288:	ldrdeq	fp, [r1], -ip
   1b28c:	ldrdeq	fp, [r1], -ip
   1b290:	ldrdeq	fp, [r1], -ip
   1b294:	ldrdeq	fp, [r1], -ip
   1b298:	ldrdeq	fp, [r1], -ip
   1b29c:	ldrdeq	fp, [r1], -ip
   1b2a0:	ldrdeq	fp, [r1], -ip
   1b2a4:	ldrdeq	fp, [r1], -ip
   1b2a8:	ldrdeq	fp, [r1], -ip
   1b2ac:	ldrdeq	fp, [r1], -ip
   1b2b0:	ldrdeq	fp, [r1], -ip
   1b2b4:	ldrdeq	fp, [r1], -ip
   1b2b8:	ldrdeq	fp, [r1], -ip
   1b2bc:	ldrdeq	fp, [r1], -ip
   1b2c0:	andeq	fp, r1, ip, ror #9
   1b2c4:	andeq	fp, r1, ip, ror #9
   1b2c8:	andeq	fp, r1, ip, ror #9
   1b2cc:	andeq	fp, r1, ip, ror #9
   1b2d0:	andeq	fp, r1, r4, lsr #8
   1b2d4:	andeq	fp, r1, ip, ror #10
   1b2d8:	ldrdeq	fp, [r1], -ip
   1b2dc:	ldrdeq	fp, [r1], -ip
   1b2e0:	ldrdeq	fp, [r1], -ip
   1b2e4:	ldrdeq	fp, [r1], -ip
   1b2e8:	ldrdeq	fp, [r1], -ip
   1b2ec:	ldrdeq	fp, [r1], -ip
   1b2f0:	ldrdeq	fp, [r1], -ip
   1b2f4:	ldrdeq	fp, [r1], -ip
   1b2f8:	ldrdeq	fp, [r1], -ip
   1b2fc:	ldrdeq	fp, [r1], -ip
   1b300:	ldrdeq	fp, [r1], -ip
   1b304:	ldrdeq	fp, [r1], -ip
   1b308:	ldrdeq	fp, [r1], -ip
   1b30c:	ldrdeq	fp, [r1], -ip
   1b310:	ldrdeq	fp, [r1], -ip
   1b314:	ldrdeq	fp, [r1], -ip
   1b318:	ldrdeq	fp, [r1], -ip
   1b31c:	ldrdeq	fp, [r1], -ip
   1b320:	ldrdeq	fp, [r1], -ip
   1b324:	ldrdeq	fp, [r1], -ip
   1b328:	ldrdeq	fp, [r1], -ip
   1b32c:	ldrdeq	fp, [r1], -ip
   1b330:	ldrdeq	fp, [r1], -ip
   1b334:	ldrdeq	fp, [r1], -ip
   1b338:	ldrdeq	fp, [r1], -ip
   1b33c:	ldrdeq	fp, [r1], -ip
   1b340:	andeq	fp, r1, ip, ror #9
   1b344:	strdeq	fp, [r1], -r4
   1b348:	ldrdeq	fp, [r1], -ip
   1b34c:	andeq	fp, r1, ip, ror #9
   1b350:	ldrdeq	fp, [r1], -ip
   1b354:	andeq	fp, r1, ip, ror #9
   1b358:	ldrdeq	fp, [r1], -ip
   1b35c:	ldrdeq	fp, [r1], -ip
   1b360:	ldrdeq	fp, [r1], -ip
   1b364:	ldrdeq	fp, [r1], -ip
   1b368:	ldrdeq	fp, [r1], -ip
   1b36c:	ldrdeq	fp, [r1], -ip
   1b370:	ldrdeq	fp, [r1], -ip
   1b374:	ldrdeq	fp, [r1], -ip
   1b378:	ldrdeq	fp, [r1], -ip
   1b37c:	ldrdeq	fp, [r1], -ip
   1b380:	ldrdeq	fp, [r1], -ip
   1b384:	ldrdeq	fp, [r1], -ip
   1b388:	ldrdeq	fp, [r1], -ip
   1b38c:	ldrdeq	fp, [r1], -ip
   1b390:	ldrdeq	fp, [r1], -ip
   1b394:	ldrdeq	fp, [r1], -ip
   1b398:	ldrdeq	fp, [r1], -ip
   1b39c:	ldrdeq	fp, [r1], -ip
   1b3a0:	ldrdeq	fp, [r1], -ip
   1b3a4:	ldrdeq	fp, [r1], -ip
   1b3a8:	ldrdeq	fp, [r1], -ip
   1b3ac:	ldrdeq	fp, [r1], -ip
   1b3b0:	ldrdeq	fp, [r1], -ip
   1b3b4:	ldrdeq	fp, [r1], -ip
   1b3b8:	ldrdeq	fp, [r1], -ip
   1b3bc:	ldrdeq	fp, [r1], -ip
   1b3c0:	ldrdeq	fp, [r1], -r0
   1b3c4:	andeq	fp, r1, ip, ror #9
   1b3c8:	ldrdeq	fp, [r1], -r0
   1b3cc:	andeq	fp, r1, r4, ror #9
   1b3d0:	ldr	r3, [sp, #24]
   1b3d4:	mov	r6, #0
   1b3d8:	cmn	r3, #1
   1b3dc:	bne	1ad88 <__assert_fail@plt+0x9bfc>
   1b3e0:	ldr	r3, [sp, #44]	; 0x2c
   1b3e4:	ldrb	r3, [r3, #1]
   1b3e8:	adds	r3, r3, #0
   1b3ec:	movne	r3, #1
   1b3f0:	b	1ad90 <__assert_fail@plt+0x9c04>
   1b3f4:	ldr	r3, [sp, #176]	; 0xb0
   1b3f8:	mov	r6, #0
   1b3fc:	cmp	r3, #2
   1b400:	bne	1aed0 <__assert_fail@plt+0x9d44>
   1b404:	ldr	r3, [sp, #64]	; 0x40
   1b408:	cmp	r3, #0
   1b40c:	bne	1bc44 <__assert_fail@plt+0xaab8>
   1b410:	add	sl, sl, #1
   1b414:	ldr	r6, [sp, #36]	; 0x24
   1b418:	str	r3, [sp, #32]
   1b41c:	mov	r4, #92	; 0x5c
   1b420:	b	1addc <__assert_fail@plt+0x9c50>
   1b424:	ldr	r3, [sp, #176]	; 0xb0
   1b428:	mov	r6, #0
   1b42c:	cmp	r3, #2
   1b430:	bne	1af04 <__assert_fail@plt+0x9d78>
   1b434:	ldr	r3, [sp, #40]	; 0x28
   1b438:	cmp	r3, #0
   1b43c:	bne	1b720 <__assert_fail@plt+0xa594>
   1b440:	mov	r1, r7
   1b444:	str	r3, [sp, #32]
   1b448:	mov	r4, #63	; 0x3f
   1b44c:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b450:	ldr	r3, [sp, #176]	; 0xb0
   1b454:	mov	r6, #0
   1b458:	cmp	r3, #2
   1b45c:	bne	1af54 <__assert_fail@plt+0x9dc8>
   1b460:	ldr	r3, [sp, #64]	; 0x40
   1b464:	cmp	r3, #0
   1b468:	bne	1bc44 <__assert_fail@plt+0xaab8>
   1b46c:	ldr	r2, [sp, #84]	; 0x54
   1b470:	adds	r3, fp, #0
   1b474:	movne	r3, #1
   1b478:	cmp	r2, #0
   1b47c:	movne	r3, #0
   1b480:	cmp	r3, #0
   1b484:	strne	fp, [sp, #84]	; 0x54
   1b488:	movne	fp, #0
   1b48c:	bne	1b4bc <__assert_fail@plt+0xa330>
   1b490:	cmp	fp, r8
   1b494:	movhi	r3, #39	; 0x27
   1b498:	strbhi	r3, [r9, r8]
   1b49c:	add	r3, r8, #1
   1b4a0:	cmp	fp, r3
   1b4a4:	movhi	r2, #92	; 0x5c
   1b4a8:	strbhi	r2, [r9, r3]
   1b4ac:	add	r3, r8, #2
   1b4b0:	cmp	fp, r3
   1b4b4:	movhi	r2, #39	; 0x27
   1b4b8:	strbhi	r2, [r9, r3]
   1b4bc:	ldr	r3, [sp, #64]	; 0x40
   1b4c0:	add	r8, r8, #3
   1b4c4:	mov	r1, r7
   1b4c8:	str	r7, [sp, #32]
   1b4cc:	str	r7, [sp, #76]	; 0x4c
   1b4d0:	str	r3, [sp, #36]	; 0x24
   1b4d4:	mov	r4, #39	; 0x27
   1b4d8:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b4dc:	mov	r6, #0
   1b4e0:	b	1af6c <__assert_fail@plt+0x9de0>
   1b4e4:	mov	r6, #0
   1b4e8:	b	1b160 <__assert_fail@plt+0x9fd4>
   1b4ec:	mov	r6, #0
   1b4f0:	b	1b180 <__assert_fail@plt+0x9ff4>
   1b4f4:	str	r7, [sp, #32]
   1b4f8:	mov	r6, #0
   1b4fc:	b	1b188 <__assert_fail@plt+0x9ffc>
   1b500:	mov	r6, #0
   1b504:	b	1b1b0 <__assert_fail@plt+0xa024>
   1b508:	mov	r6, #0
   1b50c:	b	1af7c <__assert_fail@plt+0x9df0>
   1b510:	mov	r6, #0
   1b514:	b	1b044 <__assert_fail@plt+0x9eb8>
   1b518:	mov	r6, #0
   1b51c:	b	1b014 <__assert_fail@plt+0x9e88>
   1b520:	mov	r6, #0
   1b524:	mov	r3, #116	; 0x74
   1b528:	b	1b01c <__assert_fail@plt+0x9e90>
   1b52c:	mov	r6, #0
   1b530:	b	1b058 <__assert_fail@plt+0x9ecc>
   1b534:	mov	r6, #0
   1b538:	b	1b06c <__assert_fail@plt+0x9ee0>
   1b53c:	ldr	r3, [sp, #56]	; 0x38
   1b540:	mov	r6, #0
   1b544:	cmp	r3, #0
   1b548:	bne	1b08c <__assert_fail@plt+0x9f00>
   1b54c:	ldr	r3, [sp, #96]	; 0x60
   1b550:	cmp	r3, #0
   1b554:	addne	sl, sl, #1
   1b558:	bne	1a900 <__assert_fail@plt+0x9774>
   1b55c:	ldr	r1, [sp, #52]	; 0x34
   1b560:	str	r3, [sp, #32]
   1b564:	mov	r4, r3
   1b568:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b56c:	mov	r6, #0
   1b570:	ldr	r3, [sp, #80]	; 0x50
   1b574:	cmp	r3, #1
   1b578:	bne	1b768 <__assert_fail@plt+0xa5dc>
   1b57c:	bl	11054 <__ctype_b_loc@plt>
   1b580:	ldr	r2, [sp, #80]	; 0x50
   1b584:	sxth	r3, r4
   1b588:	mov	r1, r2
   1b58c:	lsl	r3, r3, #1
   1b590:	ldr	r2, [r0]
   1b594:	ldrh	r3, [r2, r3]
   1b598:	and	r3, r3, #16384	; 0x4000
   1b59c:	cmp	r3, #0
   1b5a0:	movne	r3, #1
   1b5a4:	moveq	r3, #0
   1b5a8:	str	r3, [sp, #32]
   1b5ac:	moveq	r3, #1
   1b5b0:	movne	r3, #0
   1b5b4:	ldr	r2, [sp, #56]	; 0x38
   1b5b8:	and	r3, r3, r2
   1b5bc:	ands	r3, r3, #255	; 0xff
   1b5c0:	beq	1b194 <__assert_fail@plt+0xa008>
   1b5c4:	add	r1, sl, r1
   1b5c8:	mov	r0, #0
   1b5cc:	ldr	r7, [sp, #40]	; 0x28
   1b5d0:	ldr	r2, [sp, #36]	; 0x24
   1b5d4:	ldr	lr, [sp, #52]	; 0x34
   1b5d8:	b	1b688 <__assert_fail@plt+0xa4fc>
   1b5dc:	cmp	r7, #0
   1b5e0:	bne	1b9dc <__assert_fail@plt+0xa850>
   1b5e4:	eor	r0, r2, #1
   1b5e8:	ands	r0, lr, r0
   1b5ec:	beq	1b624 <__assert_fail@plt+0xa498>
   1b5f0:	cmp	fp, r8
   1b5f4:	movhi	r2, #39	; 0x27
   1b5f8:	strbhi	r2, [r9, r8]
   1b5fc:	add	r2, r8, #1
   1b600:	cmp	fp, r2
   1b604:	movhi	ip, #36	; 0x24
   1b608:	strbhi	ip, [r9, r2]
   1b60c:	add	r2, r8, #2
   1b610:	cmp	fp, r2
   1b614:	movhi	ip, #39	; 0x27
   1b618:	strbhi	ip, [r9, r2]
   1b61c:	add	r8, r8, #3
   1b620:	mov	r2, r0
   1b624:	cmp	fp, r8
   1b628:	movhi	r0, #92	; 0x5c
   1b62c:	strbhi	r0, [r9, r8]
   1b630:	add	r0, r8, #1
   1b634:	cmp	fp, r0
   1b638:	lsrhi	ip, r4, #6
   1b63c:	addhi	ip, ip, #48	; 0x30
   1b640:	strbhi	ip, [r9, r0]
   1b644:	add	ip, r8, #2
   1b648:	cmp	fp, ip
   1b64c:	lsrhi	r0, r4, #3
   1b650:	andhi	r0, r0, #7
   1b654:	addhi	r0, r0, #48	; 0x30
   1b658:	add	sl, sl, #1
   1b65c:	strbhi	r0, [r9, ip]
   1b660:	and	r4, r4, #7
   1b664:	cmp	sl, r1
   1b668:	add	r4, r4, #48	; 0x30
   1b66c:	add	r8, r8, #3
   1b670:	bcs	1b9f4 <__assert_fail@plt+0xa868>
   1b674:	mov	r0, r3
   1b678:	cmp	fp, r8
   1b67c:	strbhi	r4, [r9, r8]
   1b680:	ldrb	r4, [r5, #1]!
   1b684:	add	r8, r8, #1
   1b688:	cmp	r3, #0
   1b68c:	bne	1b5dc <__assert_fail@plt+0xa450>
   1b690:	cmp	r6, #0
   1b694:	bne	1b738 <__assert_fail@plt+0xa5ac>
   1b698:	eor	r6, r0, #1
   1b69c:	and	r6, r6, r2
   1b6a0:	add	sl, sl, #1
   1b6a4:	cmp	r1, sl
   1b6a8:	uxtb	r6, r6
   1b6ac:	bls	1b760 <__assert_fail@plt+0xa5d4>
   1b6b0:	cmp	r6, #0
   1b6b4:	beq	1b678 <__assert_fail@plt+0xa4ec>
   1b6b8:	cmp	fp, r8
   1b6bc:	movhi	r2, #39	; 0x27
   1b6c0:	strbhi	r2, [r9, r8]
   1b6c4:	add	r2, r8, #1
   1b6c8:	cmp	fp, r2
   1b6cc:	movhi	ip, #39	; 0x27
   1b6d0:	strbhi	ip, [r9, r2]
   1b6d4:	add	r8, r8, #2
   1b6d8:	mov	r6, r3
   1b6dc:	mov	r2, r3
   1b6e0:	b	1b678 <__assert_fail@plt+0xa4ec>
   1b6e4:	ldr	r3, [sp, #184]	; 0xb8
   1b6e8:	cmp	r3, #0
   1b6ec:	beq	1adc4 <__assert_fail@plt+0x9c38>
   1b6f0:	lsr	r2, r4, #5
   1b6f4:	mov	r0, r3
   1b6f8:	uxtb	r2, r2
   1b6fc:	and	r3, r4, #31
   1b700:	ldr	r2, [r0, r2, lsl #2]
   1b704:	lsr	r3, r2, r3
   1b708:	tst	r3, #1
   1b70c:	beq	1adc4 <__assert_fail@plt+0x9c38>
   1b710:	ldr	r3, [sp, #40]	; 0x28
   1b714:	cmp	r3, #0
   1b718:	beq	1afb0 <__assert_fail@plt+0x9e24>
   1b71c:	mov	r3, r1
   1b720:	str	r3, [sp, #64]	; 0x40
   1b724:	mov	sl, r9
   1b728:	ldr	r3, [sp, #56]	; 0x38
   1b72c:	mov	r9, fp
   1b730:	ldr	r2, [sp, #64]	; 0x40
   1b734:	b	1b924 <__assert_fail@plt+0xa798>
   1b738:	cmp	fp, r8
   1b73c:	eor	r6, r0, #1
   1b740:	movhi	ip, #92	; 0x5c
   1b744:	and	r6, r6, r2
   1b748:	add	sl, sl, #1
   1b74c:	strbhi	ip, [r9, r8]
   1b750:	cmp	r1, sl
   1b754:	add	r8, r8, #1
   1b758:	uxtb	r6, r6
   1b75c:	bhi	1b6b0 <__assert_fail@plt+0xa524>
   1b760:	str	r2, [sp, #36]	; 0x24
   1b764:	b	1addc <__assert_fail@plt+0x9c50>
   1b768:	ldr	r3, [sp, #24]
   1b76c:	cmn	r3, #1
   1b770:	mov	r3, #0
   1b774:	str	r3, [sp, #128]	; 0x80
   1b778:	str	r3, [sp, #132]	; 0x84
   1b77c:	beq	1ba70 <__assert_fail@plt+0xa8e4>
   1b780:	mov	r2, r7
   1b784:	mov	r3, #0
   1b788:	str	r7, [sp, #104]	; 0x68
   1b78c:	str	r5, [sp, #116]	; 0x74
   1b790:	mov	r7, r3
   1b794:	mov	r5, r2
   1b798:	str	r4, [sp, #32]
   1b79c:	str	r6, [sp, #108]	; 0x6c
   1b7a0:	str	r8, [sp, #112]	; 0x70
   1b7a4:	ldr	r3, [sp, #44]	; 0x2c
   1b7a8:	add	r6, sl, r7
   1b7ac:	add	r4, r3, r6
   1b7b0:	ldr	r3, [sp, #24]
   1b7b4:	mov	r1, r4
   1b7b8:	sub	r2, r3, r6
   1b7bc:	add	r0, sp, #124	; 0x7c
   1b7c0:	add	r3, sp, #128	; 0x80
   1b7c4:	bl	20ab8 <__assert_fail@plt+0xf92c>
   1b7c8:	subs	r8, r0, #0
   1b7cc:	beq	1bb54 <__assert_fail@plt+0xa9c8>
   1b7d0:	cmn	r8, #1
   1b7d4:	beq	1bb2c <__assert_fail@plt+0xa9a0>
   1b7d8:	cmn	r8, #2
   1b7dc:	beq	1bac4 <__assert_fail@plt+0xa938>
   1b7e0:	ldr	r3, [sp, #64]	; 0x40
   1b7e4:	cmp	r3, #0
   1b7e8:	beq	1b8a8 <__assert_fail@plt+0xa71c>
   1b7ec:	cmp	r8, #1
   1b7f0:	beq	1b8a8 <__assert_fail@plt+0xa71c>
   1b7f4:	sub	r3, r8, #1
   1b7f8:	add	r6, r3, r6
   1b7fc:	ldr	r3, [sp, #44]	; 0x2c
   1b800:	add	r6, r3, r6
   1b804:	ldrb	r3, [r4, #1]!
   1b808:	sub	r3, r3, #91	; 0x5b
   1b80c:	cmp	r3, #33	; 0x21
   1b810:	ldrls	pc, [pc, r3, lsl #2]
   1b814:	b	1b8a0 <__assert_fail@plt+0xa714>
   1b818:	andeq	fp, r1, ip, lsl #18
   1b81c:	andeq	fp, r1, ip, lsl #18
   1b820:	andeq	fp, r1, r0, lsr #17
   1b824:	andeq	fp, r1, ip, lsl #18
   1b828:	andeq	fp, r1, r0, lsr #17
   1b82c:	andeq	fp, r1, ip, lsl #18
   1b830:	andeq	fp, r1, r0, lsr #17
   1b834:	andeq	fp, r1, r0, lsr #17
   1b838:	andeq	fp, r1, r0, lsr #17
   1b83c:	andeq	fp, r1, r0, lsr #17
   1b840:	andeq	fp, r1, r0, lsr #17
   1b844:	andeq	fp, r1, r0, lsr #17
   1b848:	andeq	fp, r1, r0, lsr #17
   1b84c:	andeq	fp, r1, r0, lsr #17
   1b850:	andeq	fp, r1, r0, lsr #17
   1b854:	andeq	fp, r1, r0, lsr #17
   1b858:	andeq	fp, r1, r0, lsr #17
   1b85c:	andeq	fp, r1, r0, lsr #17
   1b860:	andeq	fp, r1, r0, lsr #17
   1b864:	andeq	fp, r1, r0, lsr #17
   1b868:	andeq	fp, r1, r0, lsr #17
   1b86c:	andeq	fp, r1, r0, lsr #17
   1b870:	andeq	fp, r1, r0, lsr #17
   1b874:	andeq	fp, r1, r0, lsr #17
   1b878:	andeq	fp, r1, r0, lsr #17
   1b87c:	andeq	fp, r1, r0, lsr #17
   1b880:	andeq	fp, r1, r0, lsr #17
   1b884:	andeq	fp, r1, r0, lsr #17
   1b888:	andeq	fp, r1, r0, lsr #17
   1b88c:	andeq	fp, r1, r0, lsr #17
   1b890:	andeq	fp, r1, r0, lsr #17
   1b894:	andeq	fp, r1, r0, lsr #17
   1b898:	andeq	fp, r1, r0, lsr #17
   1b89c:	andeq	fp, r1, ip, lsl #18
   1b8a0:	cmp	r6, r4
   1b8a4:	bne	1b804 <__assert_fail@plt+0xa678>
   1b8a8:	ldr	r0, [sp, #124]	; 0x7c
   1b8ac:	bl	10fa0 <iswprint@plt>
   1b8b0:	add	r7, r7, r8
   1b8b4:	cmp	r0, #0
   1b8b8:	add	r0, sp, #128	; 0x80
   1b8bc:	moveq	r5, #0
   1b8c0:	bl	10f4c <mbsinit@plt>
   1b8c4:	cmp	r0, #0
   1b8c8:	beq	1b7a4 <__assert_fail@plt+0xa618>
   1b8cc:	ldr	r4, [sp, #32]
   1b8d0:	str	r5, [sp, #32]
   1b8d4:	ldr	r3, [sp, #32]
   1b8d8:	mov	r1, r7
   1b8dc:	eor	r3, r3, #1
   1b8e0:	ldr	r7, [sp, #104]	; 0x68
   1b8e4:	ldr	r6, [sp, #108]	; 0x6c
   1b8e8:	ldr	r8, [sp, #112]	; 0x70
   1b8ec:	ldr	r5, [sp, #116]	; 0x74
   1b8f0:	uxtb	r3, r3
   1b8f4:	cmp	r1, #1
   1b8f8:	bls	1b5b4 <__assert_fail@plt+0xa428>
   1b8fc:	ldr	r2, [sp, #56]	; 0x38
   1b900:	and	r3, r3, r2
   1b904:	uxtb	r3, r3
   1b908:	b	1b5c4 <__assert_fail@plt+0xa438>
   1b90c:	mov	r3, #2
   1b910:	str	r3, [sp, #176]	; 0xb0
   1b914:	ldr	r2, [sp, #64]	; 0x40
   1b918:	ldr	r3, [sp, #56]	; 0x38
   1b91c:	mov	sl, r9
   1b920:	mov	r9, fp
   1b924:	and	r3, r3, r2
   1b928:	tst	r3, #255	; 0xff
   1b92c:	ldr	r3, [sp, #176]	; 0xb0
   1b930:	movne	r3, #4
   1b934:	str	r3, [sp, #176]	; 0xb0
   1b938:	ldr	r3, [sp, #180]	; 0xb4
   1b93c:	mov	ip, #0
   1b940:	bic	r3, r3, #2
   1b944:	str	r3, [sp, #4]
   1b948:	ldr	r3, [sp, #192]	; 0xc0
   1b94c:	ldr	r2, [sp, #44]	; 0x2c
   1b950:	str	r3, [sp, #16]
   1b954:	ldr	r3, [sp, #188]	; 0xbc
   1b958:	mov	r1, r9
   1b95c:	str	r3, [sp, #12]
   1b960:	ldr	r3, [sp, #176]	; 0xb0
   1b964:	mov	r0, sl
   1b968:	str	r3, [sp]
   1b96c:	str	ip, [sp, #8]
   1b970:	ldr	r3, [sp, #24]
   1b974:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1b978:	mov	fp, r0
   1b97c:	mov	r0, fp
   1b980:	add	sp, sp, #140	; 0x8c
   1b984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b988:	mov	r4, #92	; 0x5c
   1b98c:	mov	r1, #0
   1b990:	mov	r3, r4
   1b994:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b998:	mov	r3, #0
   1b99c:	ldr	r1, [sp, #52]	; 0x34
   1b9a0:	str	r3, [sp, #32]
   1b9a4:	mov	r4, #63	; 0x3f
   1b9a8:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1b9ac:	cmp	fp, #0
   1b9b0:	beq	1ba0c <__assert_fail@plt+0xa880>
   1b9b4:	mov	r3, #39	; 0x27
   1b9b8:	strb	r3, [r9]
   1b9bc:	mov	r3, #0
   1b9c0:	str	r3, [sp, #40]	; 0x28
   1b9c4:	mov	r3, #1
   1b9c8:	str	r3, [sp, #68]	; 0x44
   1b9cc:	ldr	r3, [pc, #448]	; 1bb94 <__assert_fail@plt+0xaa08>
   1b9d0:	mov	r8, #1
   1b9d4:	str	r3, [sp, #72]	; 0x48
   1b9d8:	b	1abbc <__assert_fail@plt+0x9a30>
   1b9dc:	ldr	r3, [sp, #40]	; 0x28
   1b9e0:	mov	sl, r9
   1b9e4:	str	r3, [sp, #56]	; 0x38
   1b9e8:	mov	r9, fp
   1b9ec:	ldr	r2, [sp, #64]	; 0x40
   1b9f0:	b	1b924 <__assert_fail@plt+0xa798>
   1b9f4:	str	r2, [sp, #36]	; 0x24
   1b9f8:	b	1ae0c <__assert_fail@plt+0x9c80>
   1b9fc:	mov	r1, #0
   1ba00:	str	r3, [sp, #32]
   1ba04:	mov	r4, #63	; 0x3f
   1ba08:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1ba0c:	ldr	r3, [pc, #384]	; 1bb94 <__assert_fail@plt+0xaa08>
   1ba10:	str	r3, [sp, #72]	; 0x48
   1ba14:	mov	r3, #0
   1ba18:	str	r3, [sp, #40]	; 0x28
   1ba1c:	mov	r3, #1
   1ba20:	str	r3, [sp, #68]	; 0x44
   1ba24:	mov	r8, r3
   1ba28:	b	1abbc <__assert_fail@plt+0x9a30>
   1ba2c:	bl	11168 <abort@plt>
   1ba30:	cmp	fp, #0
   1ba34:	beq	1ba94 <__assert_fail@plt+0xa908>
   1ba38:	mov	r2, #1
   1ba3c:	mov	r3, #34	; 0x22
   1ba40:	strb	r3, [r9]
   1ba44:	mov	r8, r2
   1ba48:	mov	r3, r2
   1ba4c:	str	r2, [sp, #68]	; 0x44
   1ba50:	str	r3, [sp, #56]	; 0x38
   1ba54:	ldr	r3, [pc, #316]	; 1bb98 <__assert_fail@plt+0xaa0c>
   1ba58:	ldr	r1, [sp, #56]	; 0x38
   1ba5c:	str	r3, [sp, #72]	; 0x48
   1ba60:	ldr	r2, [sp, #176]	; 0xb0
   1ba64:	ldr	ip, [sp, #40]	; 0x28
   1ba68:	ldr	lr, [sp, #176]	; 0xb0
   1ba6c:	b	1a8a0 <__assert_fail@plt+0x9714>
   1ba70:	ldr	r0, [sp, #44]	; 0x2c
   1ba74:	bl	11078 <strlen@plt>
   1ba78:	str	r0, [sp, #24]
   1ba7c:	b	1b780 <__assert_fail@plt+0xa5f4>
   1ba80:	mov	r7, #0
   1ba84:	ldr	r1, [sp, #52]	; 0x34
   1ba88:	str	r3, [sp, #32]
   1ba8c:	mov	r4, #48	; 0x30
   1ba90:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1ba94:	mov	r3, #1
   1ba98:	str	r3, [sp, #68]	; 0x44
   1ba9c:	mov	r8, r3
   1baa0:	b	1ba50 <__assert_fail@plt+0xa8c4>
   1baa4:	mov	r3, #2
   1baa8:	mov	sl, r9
   1baac:	str	r3, [sp, #176]	; 0xb0
   1bab0:	mov	r9, fp
   1bab4:	ldr	r3, [sp, #56]	; 0x38
   1bab8:	b	1b924 <__assert_fail@plt+0xa798>
   1babc:	ldr	r6, [sp, #48]	; 0x30
   1bac0:	b	1b570 <__assert_fail@plt+0xa3e4>
   1bac4:	ldr	r0, [sp, #24]
   1bac8:	mov	ip, r6
   1bacc:	cmp	r0, ip
   1bad0:	mov	r1, r7
   1bad4:	mov	r2, r4
   1bad8:	ldr	r7, [sp, #104]	; 0x68
   1badc:	ldr	r4, [sp, #32]
   1bae0:	ldr	r6, [sp, #108]	; 0x6c
   1bae4:	ldr	r8, [sp, #112]	; 0x70
   1bae8:	ldr	r5, [sp, #116]	; 0x74
   1baec:	bls	1bb1c <__assert_fail@plt+0xa990>
   1baf0:	ldrb	r3, [r2]
   1baf4:	cmp	r3, #0
   1baf8:	bne	1bb0c <__assert_fail@plt+0xa980>
   1bafc:	b	1bc2c <__assert_fail@plt+0xaaa0>
   1bb00:	ldrb	r3, [r2, #1]!
   1bb04:	cmp	r3, #0
   1bb08:	beq	1bc2c <__assert_fail@plt+0xaaa0>
   1bb0c:	add	r1, r1, #1
   1bb10:	add	r3, sl, r1
   1bb14:	cmp	r0, r3
   1bb18:	bhi	1bb00 <__assert_fail@plt+0xa974>
   1bb1c:	mov	r2, #0
   1bb20:	mov	r3, r7
   1bb24:	str	r2, [sp, #32]
   1bb28:	b	1b8f4 <__assert_fail@plt+0xa768>
   1bb2c:	mov	r1, r7
   1bb30:	ldr	r7, [sp, #104]	; 0x68
   1bb34:	mov	r2, #0
   1bb38:	ldr	r4, [sp, #32]
   1bb3c:	ldr	r6, [sp, #108]	; 0x6c
   1bb40:	ldr	r8, [sp, #112]	; 0x70
   1bb44:	ldr	r5, [sp, #116]	; 0x74
   1bb48:	mov	r3, r7
   1bb4c:	str	r2, [sp, #32]
   1bb50:	b	1b8f4 <__assert_fail@plt+0xa768>
   1bb54:	mov	r3, r5
   1bb58:	eor	r3, r3, #1
   1bb5c:	ldr	r4, [sp, #32]
   1bb60:	mov	r1, r7
   1bb64:	str	r5, [sp, #32]
   1bb68:	ldr	r7, [sp, #104]	; 0x68
   1bb6c:	ldr	r6, [sp, #108]	; 0x6c
   1bb70:	ldr	r8, [sp, #112]	; 0x70
   1bb74:	ldr	r5, [sp, #116]	; 0x74
   1bb78:	uxtb	r3, r3
   1bb7c:	b	1b8f4 <__assert_fail@plt+0xa768>
   1bb80:	mov	sl, r9
   1bb84:	str	r3, [sp, #56]	; 0x38
   1bb88:	mov	r9, fp
   1bb8c:	ldr	r2, [sp, #64]	; 0x40
   1bb90:	b	1b924 <__assert_fail@plt+0xa798>
   1bb94:	andeq	r2, r2, r0, asr #4
   1bb98:	andeq	r2, r2, ip, lsr r2
   1bb9c:	andeq	r2, r2, r4, asr #4
   1bba0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1bba4:	ldr	r2, [sp, #44]	; 0x2c
   1bba8:	ldrb	r1, [r2, r3]
   1bbac:	sub	r2, r1, #33	; 0x21
   1bbb0:	uxtb	r2, r2
   1bbb4:	cmp	r2, #29
   1bbb8:	bhi	1bc38 <__assert_fail@plt+0xaaac>
   1bbbc:	ldr	r0, [pc, #-36]	; 1bba0 <__assert_fail@plt+0xaa14>
   1bbc0:	mov	ip, #1
   1bbc4:	ands	r2, r0, ip, lsl r2
   1bbc8:	beq	1bc58 <__assert_fail@plt+0xaacc>
   1bbcc:	ldr	r2, [sp, #40]	; 0x28
   1bbd0:	cmp	r2, #0
   1bbd4:	bne	1bd4c <__assert_fail@plt+0xabc0>
   1bbd8:	add	r2, r8, #1
   1bbdc:	cmp	fp, r8
   1bbe0:	strbhi	r4, [r9, r8]
   1bbe4:	cmp	fp, r2
   1bbe8:	movhi	r0, #34	; 0x22
   1bbec:	strbhi	r0, [r9, r2]
   1bbf0:	add	r2, r8, #2
   1bbf4:	cmp	fp, r2
   1bbf8:	movhi	r0, #34	; 0x22
   1bbfc:	strbhi	r0, [r9, r2]
   1bc00:	add	r2, r8, #3
   1bc04:	cmp	fp, r2
   1bc08:	mov	sl, r3
   1bc0c:	ldr	r3, [sp, #40]	; 0x28
   1bc10:	movhi	r0, #63	; 0x3f
   1bc14:	mov	r4, r1
   1bc18:	strbhi	r0, [r9, r2]
   1bc1c:	add	r8, r8, #4
   1bc20:	mov	r1, r3
   1bc24:	str	r3, [sp, #32]
   1bc28:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1bc2c:	str	r3, [sp, #32]
   1bc30:	mov	r3, r7
   1bc34:	b	1b8f4 <__assert_fail@plt+0xa768>
   1bc38:	mov	r1, #0
   1bc3c:	str	r1, [sp, #32]
   1bc40:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1bc44:	mov	sl, r9
   1bc48:	ldr	r3, [sp, #56]	; 0x38
   1bc4c:	mov	r9, fp
   1bc50:	ldr	r2, [sp, #64]	; 0x40
   1bc54:	b	1b924 <__assert_fail@plt+0xa798>
   1bc58:	str	r2, [sp, #32]
   1bc5c:	mov	r1, #0
   1bc60:	b	1ada8 <__assert_fail@plt+0x9c1c>
   1bc64:	ldr	r2, [sp, #76]	; 0x4c
   1bc68:	mov	sl, r9
   1bc6c:	mov	r9, fp
   1bc70:	mov	fp, r8
   1bc74:	ldr	r1, [sp, #72]	; 0x48
   1bc78:	cmp	r1, #0
   1bc7c:	moveq	r3, #0
   1bc80:	andne	r3, r2, #1
   1bc84:	cmp	r3, #0
   1bc88:	beq	1bcb4 <__assert_fail@plt+0xab28>
   1bc8c:	ldrb	r3, [r1]
   1bc90:	cmp	r3, #0
   1bc94:	beq	1bcb4 <__assert_fail@plt+0xab28>
   1bc98:	mov	r2, r1
   1bc9c:	cmp	r9, fp
   1bca0:	strbhi	r3, [sl, fp]
   1bca4:	ldrb	r3, [r2, #1]!
   1bca8:	add	fp, fp, #1
   1bcac:	cmp	r3, #0
   1bcb0:	bne	1bc9c <__assert_fail@plt+0xab10>
   1bcb4:	cmp	r9, fp
   1bcb8:	movhi	r3, #0
   1bcbc:	strbhi	r3, [sl, fp]
   1bcc0:	b	1b97c <__assert_fail@plt+0xa7f0>
   1bcc4:	ldr	r3, [sp, #192]	; 0xc0
   1bcc8:	mov	ip, #5
   1bccc:	str	r3, [sp, #16]
   1bcd0:	ldr	r3, [sp, #188]	; 0xbc
   1bcd4:	ldr	r2, [sp, #44]	; 0x2c
   1bcd8:	str	r3, [sp, #12]
   1bcdc:	ldr	r3, [sp, #184]	; 0xb8
   1bce0:	ldr	r1, [sp, #84]	; 0x54
   1bce4:	str	r3, [sp, #8]
   1bce8:	ldr	r3, [sp, #180]	; 0xb4
   1bcec:	mov	r0, r9
   1bcf0:	str	r3, [sp, #4]
   1bcf4:	str	ip, [sp]
   1bcf8:	ldr	r3, [sp, #24]
   1bcfc:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1bd00:	mov	fp, r0
   1bd04:	b	1b97c <__assert_fail@plt+0xa7f0>
   1bd08:	mov	sl, r9
   1bd0c:	mov	r9, fp
   1bd10:	mov	fp, r8
   1bd14:	b	1bc74 <__assert_fail@plt+0xaae8>
   1bd18:	ldr	r1, [sp, #176]	; 0xb0
   1bd1c:	bl	1a6b4 <__assert_fail@plt+0x9528>
   1bd20:	str	r0, [sp, #192]	; 0xc0
   1bd24:	b	1ac90 <__assert_fail@plt+0x9b04>
   1bd28:	ldr	r1, [sp, #176]	; 0xb0
   1bd2c:	bl	1a6b4 <__assert_fail@plt+0x9528>
   1bd30:	str	r0, [sp, #188]	; 0xbc
   1bd34:	b	1ac70 <__assert_fail@plt+0x9ae4>
   1bd38:	mov	sl, r9
   1bd3c:	mov	r2, r3
   1bd40:	mov	r9, fp
   1bd44:	mov	fp, r8
   1bd48:	b	1bc74 <__assert_fail@plt+0xaae8>
   1bd4c:	mov	sl, r9
   1bd50:	mov	r9, fp
   1bd54:	b	1b938 <__assert_fail@plt+0xa7ac>
   1bd58:	push	{r4, r5, r6, lr}
   1bd5c:	mov	r5, r0
   1bd60:	bl	11090 <__errno_location@plt>
   1bd64:	cmp	r5, #0
   1bd68:	mov	r1, #48	; 0x30
   1bd6c:	mov	r4, r0
   1bd70:	ldr	r0, [pc, #16]	; 1bd88 <__assert_fail@plt+0xabfc>
   1bd74:	ldr	r6, [r4]
   1bd78:	movne	r0, r5
   1bd7c:	bl	1f600 <__assert_fail@plt+0xe474>
   1bd80:	str	r6, [r4]
   1bd84:	pop	{r4, r5, r6, pc}
   1bd88:			; <UNDEFINED> instruction: 0x000331bc
   1bd8c:	ldr	r3, [pc, #12]	; 1bda0 <__assert_fail@plt+0xac14>
   1bd90:	cmp	r0, #0
   1bd94:	moveq	r0, r3
   1bd98:	ldr	r0, [r0]
   1bd9c:	bx	lr
   1bda0:			; <UNDEFINED> instruction: 0x000331bc
   1bda4:	ldr	r3, [pc, #12]	; 1bdb8 <__assert_fail@plt+0xac2c>
   1bda8:	cmp	r0, #0
   1bdac:	moveq	r0, r3
   1bdb0:	str	r1, [r0]
   1bdb4:	bx	lr
   1bdb8:			; <UNDEFINED> instruction: 0x000331bc
   1bdbc:	ldr	r3, [pc, #52]	; 1bdf8 <__assert_fail@plt+0xac6c>
   1bdc0:	cmp	r0, #0
   1bdc4:	moveq	r0, r3
   1bdc8:	add	r3, r0, #8
   1bdcc:	push	{lr}		; (str lr, [sp, #-4]!)
   1bdd0:	lsr	lr, r1, #5
   1bdd4:	and	r1, r1, #31
   1bdd8:	ldr	ip, [r3, lr, lsl #2]
   1bddc:	lsr	r0, ip, r1
   1bde0:	eor	r2, r2, r0
   1bde4:	and	r2, r2, #1
   1bde8:	and	r0, r0, #1
   1bdec:	eor	r1, ip, r2, lsl r1
   1bdf0:	str	r1, [r3, lr, lsl #2]
   1bdf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf8:			; <UNDEFINED> instruction: 0x000331bc
   1bdfc:	ldr	r3, [pc, #16]	; 1be14 <__assert_fail@plt+0xac88>
   1be00:	cmp	r0, #0
   1be04:	movne	r3, r0
   1be08:	ldr	r0, [r3, #4]
   1be0c:	str	r1, [r3, #4]
   1be10:	bx	lr
   1be14:			; <UNDEFINED> instruction: 0x000331bc
   1be18:	ldr	r3, [pc, #44]	; 1be4c <__assert_fail@plt+0xacc0>
   1be1c:	cmp	r0, #0
   1be20:	moveq	r0, r3
   1be24:	mov	ip, #10
   1be28:	cmp	r2, #0
   1be2c:	cmpne	r1, #0
   1be30:	str	ip, [r0]
   1be34:	beq	1be44 <__assert_fail@plt+0xacb8>
   1be38:	str	r1, [r0, #40]	; 0x28
   1be3c:	str	r2, [r0, #44]	; 0x2c
   1be40:	bx	lr
   1be44:	push	{r4, lr}
   1be48:	bl	11168 <abort@plt>
   1be4c:			; <UNDEFINED> instruction: 0x000331bc
   1be50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1be54:	sub	sp, sp, #24
   1be58:	ldr	ip, [pc, #108]	; 1becc <__assert_fail@plt+0xad40>
   1be5c:	ldr	r4, [sp, #56]	; 0x38
   1be60:	mov	r9, r2
   1be64:	cmp	r4, #0
   1be68:	moveq	r4, ip
   1be6c:	mov	sl, r3
   1be70:	mov	r7, r0
   1be74:	mov	r8, r1
   1be78:	bl	11090 <__errno_location@plt>
   1be7c:	ldr	r3, [r4, #44]	; 0x2c
   1be80:	mov	r1, r8
   1be84:	ldr	r6, [r0]
   1be88:	str	r3, [sp, #16]
   1be8c:	ldr	r2, [r4, #40]	; 0x28
   1be90:	add	r3, r4, #8
   1be94:	str	r3, [sp, #8]
   1be98:	str	r2, [sp, #12]
   1be9c:	ldr	r2, [r4, #4]
   1bea0:	mov	r5, r0
   1bea4:	str	r2, [sp, #4]
   1bea8:	ldr	ip, [r4]
   1beac:	mov	r3, sl
   1beb0:	mov	r2, r9
   1beb4:	mov	r0, r7
   1beb8:	str	ip, [sp]
   1bebc:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1bec0:	str	r6, [r5]
   1bec4:	add	sp, sp, #24
   1bec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1becc:			; <UNDEFINED> instruction: 0x000331bc
   1bed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bed4:	cmp	r2, #0
   1bed8:	sub	sp, sp, #36	; 0x24
   1bedc:	ldr	r4, [pc, #164]	; 1bf88 <__assert_fail@plt+0xadfc>
   1bee0:	mov	r8, r1
   1bee4:	movne	r4, r2
   1bee8:	mov	r7, r0
   1beec:	bl	11090 <__errno_location@plt>
   1bef0:	ldr	r3, [r4, #44]	; 0x2c
   1bef4:	ldr	r5, [r4, #4]
   1bef8:	add	r9, r4, #8
   1befc:	orr	r5, r5, #1
   1bf00:	mov	r1, #0
   1bf04:	mov	r2, r7
   1bf08:	ldr	fp, [r0]
   1bf0c:	str	r3, [sp, #16]
   1bf10:	ldr	r3, [r4, #40]	; 0x28
   1bf14:	stmib	sp, {r5, r9}
   1bf18:	str	r3, [sp, #12]
   1bf1c:	ldr	r3, [r4]
   1bf20:	mov	r6, r0
   1bf24:	str	r3, [sp]
   1bf28:	mov	r0, r1
   1bf2c:	mov	r3, r8
   1bf30:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1bf34:	add	r1, r0, #1
   1bf38:	mov	r0, r1
   1bf3c:	str	r1, [sp, #28]
   1bf40:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1bf44:	ldr	r3, [r4, #44]	; 0x2c
   1bf48:	ldr	r1, [sp, #28]
   1bf4c:	str	r3, [sp, #16]
   1bf50:	ldr	r3, [r4, #40]	; 0x28
   1bf54:	str	r5, [sp, #4]
   1bf58:	str	r3, [sp, #12]
   1bf5c:	str	r9, [sp, #8]
   1bf60:	ldr	ip, [r4]
   1bf64:	mov	r3, r8
   1bf68:	mov	r2, r7
   1bf6c:	str	ip, [sp]
   1bf70:	mov	sl, r0
   1bf74:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1bf78:	mov	r0, sl
   1bf7c:	str	fp, [r6]
   1bf80:	add	sp, sp, #36	; 0x24
   1bf84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf88:			; <UNDEFINED> instruction: 0x000331bc
   1bf8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf90:	cmp	r3, #0
   1bf94:	sub	sp, sp, #44	; 0x2c
   1bf98:	ldr	r4, [pc, #192]	; 1c060 <__assert_fail@plt+0xaed4>
   1bf9c:	mov	r6, r2
   1bfa0:	movne	r4, r3
   1bfa4:	mov	r9, r1
   1bfa8:	mov	r8, r0
   1bfac:	bl	11090 <__errno_location@plt>
   1bfb0:	ldr	r3, [r4, #44]	; 0x2c
   1bfb4:	ldr	r5, [r4, #4]
   1bfb8:	add	sl, r4, #8
   1bfbc:	cmp	r6, #0
   1bfc0:	orreq	r5, r5, #1
   1bfc4:	mov	r1, #0
   1bfc8:	ldr	r2, [r0]
   1bfcc:	str	r3, [sp, #16]
   1bfd0:	ldr	r3, [r4, #40]	; 0x28
   1bfd4:	stmib	sp, {r5, sl}
   1bfd8:	str	r3, [sp, #12]
   1bfdc:	ldr	r3, [r4]
   1bfe0:	mov	r7, r0
   1bfe4:	str	r2, [sp, #28]
   1bfe8:	str	r3, [sp]
   1bfec:	mov	r2, r8
   1bff0:	mov	r3, r9
   1bff4:	mov	r0, r1
   1bff8:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1bffc:	add	r1, r0, #1
   1c000:	mov	fp, r0
   1c004:	mov	r0, r1
   1c008:	str	r1, [sp, #36]	; 0x24
   1c00c:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1c010:	ldr	r3, [r4, #44]	; 0x2c
   1c014:	mov	r2, r8
   1c018:	str	r3, [sp, #16]
   1c01c:	ldr	r3, [r4, #40]	; 0x28
   1c020:	str	r5, [sp, #4]
   1c024:	str	r3, [sp, #12]
   1c028:	str	sl, [sp, #8]
   1c02c:	ldr	ip, [r4]
   1c030:	ldr	r1, [sp, #36]	; 0x24
   1c034:	mov	r3, r9
   1c038:	str	ip, [sp]
   1c03c:	str	r0, [sp, #32]
   1c040:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c044:	ldr	r2, [sp, #28]
   1c048:	cmp	r6, #0
   1c04c:	str	r2, [r7]
   1c050:	ldr	r0, [sp, #32]
   1c054:	strne	fp, [r6]
   1c058:	add	sp, sp, #44	; 0x2c
   1c05c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c060:			; <UNDEFINED> instruction: 0x000331bc
   1c064:	push	{r4, r5, r6, r7, r8, lr}
   1c068:	ldr	r6, [pc, #116]	; 1c0e4 <__assert_fail@plt+0xaf58>
   1c06c:	ldr	r3, [r6, #4]
   1c070:	ldr	r7, [r6]
   1c074:	cmp	r3, #1
   1c078:	movgt	r5, r7
   1c07c:	movgt	r4, #1
   1c080:	ble	1c0a0 <__assert_fail@plt+0xaf14>
   1c084:	ldr	r0, [r5, #12]
   1c088:	bl	1a508 <__assert_fail@plt+0x937c>
   1c08c:	ldr	r3, [r6, #4]
   1c090:	add	r4, r4, #1
   1c094:	cmp	r3, r4
   1c098:	add	r5, r5, #8
   1c09c:	bgt	1c084 <__assert_fail@plt+0xaef8>
   1c0a0:	ldr	r0, [r7, #4]
   1c0a4:	ldr	r4, [pc, #60]	; 1c0e8 <__assert_fail@plt+0xaf5c>
   1c0a8:	cmp	r0, r4
   1c0ac:	beq	1c0c0 <__assert_fail@plt+0xaf34>
   1c0b0:	bl	1a508 <__assert_fail@plt+0x937c>
   1c0b4:	mov	r3, #256	; 0x100
   1c0b8:	str	r4, [r6, #12]
   1c0bc:	str	r3, [r6, #8]
   1c0c0:	ldr	r4, [pc, #36]	; 1c0ec <__assert_fail@plt+0xaf60>
   1c0c4:	cmp	r7, r4
   1c0c8:	beq	1c0d8 <__assert_fail@plt+0xaf4c>
   1c0cc:	mov	r0, r7
   1c0d0:	bl	1a508 <__assert_fail@plt+0x937c>
   1c0d4:	str	r4, [r6]
   1c0d8:	mov	r3, #1
   1c0dc:	str	r3, [r6, #4]
   1c0e0:	pop	{r4, r5, r6, r7, r8, pc}
   1c0e4:	andeq	r3, r3, r4, lsr #2
   1c0e8:	andeq	r3, r3, ip, ror #3
   1c0ec:	andeq	r3, r3, ip, lsr #2
   1c0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0f4:	sub	sp, sp, #44	; 0x2c
   1c0f8:	mov	r5, r0
   1c0fc:	mov	sl, r1
   1c100:	bl	11090 <__errno_location@plt>
   1c104:	ldr	r4, [pc, #400]	; 1c29c <__assert_fail@plt+0xb110>
   1c108:	cmn	r5, #-2147483647	; 0x80000001
   1c10c:	ldr	r6, [r4]
   1c110:	mov	r8, r0
   1c114:	movne	r0, #0
   1c118:	moveq	r0, #1
   1c11c:	ldr	r3, [r8]
   1c120:	orrs	r0, r0, r5, lsr #31
   1c124:	str	r3, [sp, #24]
   1c128:	bne	1c298 <__assert_fail@plt+0xb10c>
   1c12c:	ldr	r2, [r4, #4]
   1c130:	cmp	r5, r2
   1c134:	blt	1c194 <__assert_fail@plt+0xb008>
   1c138:	add	r7, r4, #8
   1c13c:	cmp	r6, r7
   1c140:	str	r2, [sp, #36]	; 0x24
   1c144:	beq	1c268 <__assert_fail@plt+0xb0dc>
   1c148:	mov	r3, #8
   1c14c:	sub	r2, r5, r2
   1c150:	mov	r0, r6
   1c154:	str	r3, [sp]
   1c158:	add	r2, r2, #1
   1c15c:	mvn	r3, #-2147483648	; 0x80000000
   1c160:	add	r1, sp, #36	; 0x24
   1c164:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c168:	mov	r6, r0
   1c16c:	str	r0, [r4]
   1c170:	ldr	r0, [r4, #4]
   1c174:	ldr	r2, [sp, #36]	; 0x24
   1c178:	mov	r1, #0
   1c17c:	sub	r2, r2, r0
   1c180:	add	r0, r6, r0, lsl #3
   1c184:	lsl	r2, r2, #3
   1c188:	bl	110b4 <memset@plt>
   1c18c:	ldr	r3, [sp, #36]	; 0x24
   1c190:	str	r3, [r4, #4]
   1c194:	ldr	r4, [pc, #260]	; 1c2a0 <__assert_fail@plt+0xb114>
   1c198:	add	fp, r6, r5, lsl #3
   1c19c:	ldr	r9, [r6, r5, lsl #3]
   1c1a0:	ldr	r0, [r4, #4]
   1c1a4:	ldr	r3, [r4]
   1c1a8:	ldr	r7, [fp, #4]
   1c1ac:	ldr	r1, [r4, #44]	; 0x2c
   1c1b0:	ldr	r2, [r4, #40]	; 0x28
   1c1b4:	orr	r0, r0, #1
   1c1b8:	str	r3, [sp]
   1c1bc:	add	r3, r4, #8
   1c1c0:	str	r0, [sp, #28]
   1c1c4:	str	r0, [sp, #4]
   1c1c8:	str	r1, [sp, #16]
   1c1cc:	str	r2, [sp, #12]
   1c1d0:	str	r3, [sp, #8]
   1c1d4:	mov	r0, r7
   1c1d8:	mov	r1, r9
   1c1dc:	mvn	r3, #0
   1c1e0:	mov	r2, sl
   1c1e4:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c1e8:	cmp	r9, r0
   1c1ec:	bhi	1c254 <__assert_fail@plt+0xb0c8>
   1c1f0:	add	r3, r4, #48	; 0x30
   1c1f4:	add	r9, r0, #1
   1c1f8:	cmp	r7, r3
   1c1fc:	str	r9, [r6, r5, lsl #3]
   1c200:	beq	1c20c <__assert_fail@plt+0xb080>
   1c204:	mov	r0, r7
   1c208:	bl	1a508 <__assert_fail@plt+0x937c>
   1c20c:	mov	r0, r9
   1c210:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1c214:	ldr	ip, [r4, #44]	; 0x2c
   1c218:	ldr	r3, [r4]
   1c21c:	ldr	lr, [r4, #40]	; 0x28
   1c220:	ldr	r4, [pc, #124]	; 1c2a4 <__assert_fail@plt+0xb118>
   1c224:	mov	r2, sl
   1c228:	mov	r1, r9
   1c22c:	str	r0, [fp, #4]
   1c230:	str	r4, [sp, #8]
   1c234:	ldr	r4, [sp, #28]
   1c238:	str	r3, [sp]
   1c23c:	str	r4, [sp, #4]
   1c240:	str	ip, [sp, #16]
   1c244:	str	lr, [sp, #12]
   1c248:	mvn	r3, #0
   1c24c:	mov	r7, r0
   1c250:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c254:	ldr	r3, [sp, #24]
   1c258:	mov	r0, r7
   1c25c:	str	r3, [r8]
   1c260:	add	sp, sp, #44	; 0x2c
   1c264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c268:	mov	r3, #8
   1c26c:	sub	r2, r5, r2
   1c270:	str	r3, [sp]
   1c274:	add	r1, sp, #36	; 0x24
   1c278:	add	r2, r2, #1
   1c27c:	mvn	r3, #-2147483648	; 0x80000000
   1c280:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c284:	mov	r6, r0
   1c288:	ldm	r7, {r0, r1}
   1c28c:	str	r6, [r4]
   1c290:	stm	r6, {r0, r1}
   1c294:	b	1c170 <__assert_fail@plt+0xafe4>
   1c298:	bl	11168 <abort@plt>
   1c29c:	andeq	r3, r3, r4, lsr #2
   1c2a0:			; <UNDEFINED> instruction: 0x000331bc
   1c2a4:	andeq	r3, r3, r4, asr #3
   1c2a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2ac:	sub	sp, sp, #52	; 0x34
   1c2b0:	mov	r5, r0
   1c2b4:	mov	sl, r1
   1c2b8:	mov	fp, r2
   1c2bc:	bl	11090 <__errno_location@plt>
   1c2c0:	ldr	r4, [pc, #408]	; 1c460 <__assert_fail@plt+0xb2d4>
   1c2c4:	cmn	r5, #-2147483647	; 0x80000001
   1c2c8:	ldr	r6, [r4]
   1c2cc:	mov	r8, r0
   1c2d0:	movne	r0, #0
   1c2d4:	moveq	r0, #1
   1c2d8:	ldr	r3, [r8]
   1c2dc:	orrs	r0, r0, r5, lsr #31
   1c2e0:	str	r3, [sp, #28]
   1c2e4:	bne	1c45c <__assert_fail@plt+0xb2d0>
   1c2e8:	ldr	r2, [r4, #4]
   1c2ec:	cmp	r5, r2
   1c2f0:	blt	1c350 <__assert_fail@plt+0xb1c4>
   1c2f4:	add	r7, r4, #8
   1c2f8:	cmp	r6, r7
   1c2fc:	str	r2, [sp, #44]	; 0x2c
   1c300:	beq	1c42c <__assert_fail@plt+0xb2a0>
   1c304:	mov	r3, #8
   1c308:	sub	r2, r5, r2
   1c30c:	mov	r0, r6
   1c310:	str	r3, [sp]
   1c314:	add	r2, r2, #1
   1c318:	mvn	r3, #-2147483648	; 0x80000000
   1c31c:	add	r1, sp, #44	; 0x2c
   1c320:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c324:	mov	r6, r0
   1c328:	str	r0, [r4]
   1c32c:	ldr	r0, [r4, #4]
   1c330:	ldr	r2, [sp, #44]	; 0x2c
   1c334:	mov	r1, #0
   1c338:	sub	r2, r2, r0
   1c33c:	add	r0, r6, r0, lsl #3
   1c340:	lsl	r2, r2, #3
   1c344:	bl	110b4 <memset@plt>
   1c348:	ldr	r3, [sp, #44]	; 0x2c
   1c34c:	str	r3, [r4, #4]
   1c350:	ldr	r4, [pc, #268]	; 1c464 <__assert_fail@plt+0xb2d8>
   1c354:	add	r3, r6, r5, lsl #3
   1c358:	str	r3, [sp, #32]
   1c35c:	ldr	r7, [r3, #4]
   1c360:	ldr	r0, [r4, #4]
   1c364:	ldr	r3, [r4]
   1c368:	ldr	r9, [r6, r5, lsl #3]
   1c36c:	ldr	r1, [r4, #44]	; 0x2c
   1c370:	ldr	r2, [r4, #40]	; 0x28
   1c374:	orr	r0, r0, #1
   1c378:	str	r3, [sp]
   1c37c:	add	r3, r4, #8
   1c380:	str	r0, [sp, #36]	; 0x24
   1c384:	str	r0, [sp, #4]
   1c388:	str	r1, [sp, #16]
   1c38c:	str	r2, [sp, #12]
   1c390:	str	r3, [sp, #8]
   1c394:	mov	r0, r7
   1c398:	mov	r1, r9
   1c39c:	mov	r3, fp
   1c3a0:	mov	r2, sl
   1c3a4:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c3a8:	cmp	r9, r0
   1c3ac:	bhi	1c418 <__assert_fail@plt+0xb28c>
   1c3b0:	add	r3, r4, #48	; 0x30
   1c3b4:	add	r9, r0, #1
   1c3b8:	cmp	r7, r3
   1c3bc:	str	r9, [r6, r5, lsl #3]
   1c3c0:	beq	1c3cc <__assert_fail@plt+0xb240>
   1c3c4:	mov	r0, r7
   1c3c8:	bl	1a508 <__assert_fail@plt+0x937c>
   1c3cc:	mov	r0, r9
   1c3d0:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1c3d4:	ldr	ip, [sp, #32]
   1c3d8:	ldr	lr, [r4, #44]	; 0x2c
   1c3dc:	ldr	r5, [r4, #40]	; 0x28
   1c3e0:	mov	r3, fp
   1c3e4:	mov	r2, sl
   1c3e8:	mov	r1, r9
   1c3ec:	str	r0, [ip, #4]
   1c3f0:	ldr	ip, [r4]
   1c3f4:	ldr	r4, [pc, #108]	; 1c468 <__assert_fail@plt+0xb2dc>
   1c3f8:	str	lr, [sp, #16]
   1c3fc:	str	r4, [sp, #8]
   1c400:	ldr	r4, [sp, #36]	; 0x24
   1c404:	str	r5, [sp, #12]
   1c408:	str	r4, [sp, #4]
   1c40c:	str	ip, [sp]
   1c410:	mov	r7, r0
   1c414:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c418:	ldr	r3, [sp, #28]
   1c41c:	mov	r0, r7
   1c420:	str	r3, [r8]
   1c424:	add	sp, sp, #52	; 0x34
   1c428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c42c:	mov	r3, #8
   1c430:	sub	r2, r5, r2
   1c434:	str	r3, [sp]
   1c438:	add	r1, sp, #44	; 0x2c
   1c43c:	add	r2, r2, #1
   1c440:	mvn	r3, #-2147483648	; 0x80000000
   1c444:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c448:	mov	r6, r0
   1c44c:	ldm	r7, {r0, r1}
   1c450:	str	r6, [r4]
   1c454:	stm	r6, {r0, r1}
   1c458:	b	1c32c <__assert_fail@plt+0xb1a0>
   1c45c:	bl	11168 <abort@plt>
   1c460:	andeq	r3, r3, r4, lsr #2
   1c464:			; <UNDEFINED> instruction: 0x000331bc
   1c468:	andeq	r3, r3, r4, asr #3
   1c46c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c470:	sub	sp, sp, #44	; 0x2c
   1c474:	mov	sl, r0
   1c478:	bl	11090 <__errno_location@plt>
   1c47c:	ldr	r4, [pc, #352]	; 1c5e4 <__assert_fail@plt+0xb458>
   1c480:	ldr	r2, [r4, #4]
   1c484:	ldr	r5, [r4]
   1c488:	cmp	r2, #0
   1c48c:	ldr	r3, [r0]
   1c490:	mov	r8, r0
   1c494:	str	r3, [sp, #28]
   1c498:	bgt	1c4f4 <__assert_fail@plt+0xb368>
   1c49c:	add	r6, r4, #8
   1c4a0:	cmp	r5, r6
   1c4a4:	str	r2, [sp, #36]	; 0x24
   1c4a8:	beq	1c5b4 <__assert_fail@plt+0xb428>
   1c4ac:	mov	r3, #8
   1c4b0:	mov	r0, r5
   1c4b4:	str	r3, [sp]
   1c4b8:	rsb	r2, r2, #1
   1c4bc:	mvn	r3, #-2147483648	; 0x80000000
   1c4c0:	add	r1, sp, #36	; 0x24
   1c4c4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c4c8:	mov	r5, r0
   1c4cc:	str	r0, [r4]
   1c4d0:	ldr	r0, [r4, #4]
   1c4d4:	ldr	r2, [sp, #36]	; 0x24
   1c4d8:	mov	r1, #0
   1c4dc:	sub	r2, r2, r0
   1c4e0:	add	r0, r5, r0, lsl #3
   1c4e4:	lsl	r2, r2, #3
   1c4e8:	bl	110b4 <memset@plt>
   1c4ec:	ldr	r3, [sp, #36]	; 0x24
   1c4f0:	str	r3, [r4, #4]
   1c4f4:	ldr	r4, [pc, #236]	; 1c5e8 <__assert_fail@plt+0xb45c>
   1c4f8:	ldr	r9, [r5]
   1c4fc:	ldr	r6, [r5, #4]
   1c500:	ldr	r7, [r4, #4]
   1c504:	ldr	r1, [r4, #44]	; 0x2c
   1c508:	ldr	r2, [r4, #40]	; 0x28
   1c50c:	ldr	r3, [r4]
   1c510:	orr	r7, r7, #1
   1c514:	add	fp, r4, #8
   1c518:	str	r1, [sp, #16]
   1c51c:	str	r2, [sp, #12]
   1c520:	str	r3, [sp]
   1c524:	str	r7, [sp, #4]
   1c528:	str	fp, [sp, #8]
   1c52c:	mov	r1, r9
   1c530:	mov	r0, r6
   1c534:	mvn	r3, #0
   1c538:	mov	r2, sl
   1c53c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c540:	cmp	r9, r0
   1c544:	bhi	1c5a0 <__assert_fail@plt+0xb414>
   1c548:	add	r3, r4, #48	; 0x30
   1c54c:	add	r9, r0, #1
   1c550:	cmp	r6, r3
   1c554:	str	r9, [r5]
   1c558:	beq	1c564 <__assert_fail@plt+0xb3d8>
   1c55c:	mov	r0, r6
   1c560:	bl	1a508 <__assert_fail@plt+0x937c>
   1c564:	mov	r0, r9
   1c568:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1c56c:	ldr	ip, [r4, #44]	; 0x2c
   1c570:	ldr	r3, [r4]
   1c574:	ldr	lr, [r4, #40]	; 0x28
   1c578:	mov	r2, sl
   1c57c:	mov	r1, r9
   1c580:	str	r0, [r5, #4]
   1c584:	str	r3, [sp]
   1c588:	stmib	sp, {r7, fp}
   1c58c:	str	ip, [sp, #16]
   1c590:	str	lr, [sp, #12]
   1c594:	mvn	r3, #0
   1c598:	mov	r6, r0
   1c59c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c5a0:	ldr	r3, [sp, #28]
   1c5a4:	mov	r0, r6
   1c5a8:	str	r3, [r8]
   1c5ac:	add	sp, sp, #44	; 0x2c
   1c5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5b4:	mov	r3, #8
   1c5b8:	str	r3, [sp]
   1c5bc:	add	r1, sp, #36	; 0x24
   1c5c0:	rsb	r2, r2, #1
   1c5c4:	mvn	r3, #-2147483648	; 0x80000000
   1c5c8:	mov	r0, #0
   1c5cc:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c5d0:	mov	r5, r0
   1c5d4:	ldm	r6, {r0, r1}
   1c5d8:	str	r5, [r4]
   1c5dc:	stm	r5, {r0, r1}
   1c5e0:	b	1c4d0 <__assert_fail@plt+0xb344>
   1c5e4:	andeq	r3, r3, r4, lsr #2
   1c5e8:			; <UNDEFINED> instruction: 0x000331bc
   1c5ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5f0:	sub	sp, sp, #44	; 0x2c
   1c5f4:	mov	r9, r0
   1c5f8:	mov	sl, r1
   1c5fc:	bl	11090 <__errno_location@plt>
   1c600:	ldr	r4, [pc, #364]	; 1c774 <__assert_fail@plt+0xb5e8>
   1c604:	ldr	r2, [r4, #4]
   1c608:	ldr	r5, [r4]
   1c60c:	cmp	r2, #0
   1c610:	ldr	r3, [r0]
   1c614:	mov	r7, r0
   1c618:	str	r3, [sp, #24]
   1c61c:	bgt	1c678 <__assert_fail@plt+0xb4ec>
   1c620:	add	r6, r4, #8
   1c624:	cmp	r5, r6
   1c628:	str	r2, [sp, #36]	; 0x24
   1c62c:	beq	1c744 <__assert_fail@plt+0xb5b8>
   1c630:	mov	r3, #8
   1c634:	mov	r0, r5
   1c638:	str	r3, [sp]
   1c63c:	rsb	r2, r2, #1
   1c640:	mvn	r3, #-2147483648	; 0x80000000
   1c644:	add	r1, sp, #36	; 0x24
   1c648:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c64c:	mov	r5, r0
   1c650:	str	r0, [r4]
   1c654:	ldr	r0, [r4, #4]
   1c658:	ldr	r2, [sp, #36]	; 0x24
   1c65c:	mov	r1, #0
   1c660:	sub	r2, r2, r0
   1c664:	add	r0, r5, r0, lsl #3
   1c668:	lsl	r2, r2, #3
   1c66c:	bl	110b4 <memset@plt>
   1c670:	ldr	r3, [sp, #36]	; 0x24
   1c674:	str	r3, [r4, #4]
   1c678:	ldr	r4, [pc, #248]	; 1c778 <__assert_fail@plt+0xb5ec>
   1c67c:	ldr	r8, [r5]
   1c680:	ldr	r6, [r5, #4]
   1c684:	ldr	r0, [r4, #4]
   1c688:	ldr	r1, [r4, #44]	; 0x2c
   1c68c:	ldr	r2, [r4, #40]	; 0x28
   1c690:	ldr	r3, [r4]
   1c694:	orr	r0, r0, #1
   1c698:	add	fp, r4, #8
   1c69c:	str	r0, [sp, #28]
   1c6a0:	str	r0, [sp, #4]
   1c6a4:	str	r1, [sp, #16]
   1c6a8:	str	r2, [sp, #12]
   1c6ac:	str	r3, [sp]
   1c6b0:	str	fp, [sp, #8]
   1c6b4:	mov	r1, r8
   1c6b8:	mov	r0, r6
   1c6bc:	mov	r3, sl
   1c6c0:	mov	r2, r9
   1c6c4:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c6c8:	cmp	r8, r0
   1c6cc:	bhi	1c730 <__assert_fail@plt+0xb5a4>
   1c6d0:	add	r3, r4, #48	; 0x30
   1c6d4:	add	r8, r0, #1
   1c6d8:	cmp	r6, r3
   1c6dc:	str	r8, [r5]
   1c6e0:	beq	1c6ec <__assert_fail@plt+0xb560>
   1c6e4:	mov	r0, r6
   1c6e8:	bl	1a508 <__assert_fail@plt+0x937c>
   1c6ec:	mov	r0, r8
   1c6f0:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1c6f4:	ldr	lr, [r4, #44]	; 0x2c
   1c6f8:	ldr	ip, [r4]
   1c6fc:	mov	r3, sl
   1c700:	mov	r2, r9
   1c704:	mov	r1, r8
   1c708:	str	r0, [r5, #4]
   1c70c:	ldr	r5, [r4, #40]	; 0x28
   1c710:	ldr	r4, [sp, #28]
   1c714:	str	fp, [sp, #8]
   1c718:	str	r4, [sp, #4]
   1c71c:	str	lr, [sp, #16]
   1c720:	str	r5, [sp, #12]
   1c724:	str	ip, [sp]
   1c728:	mov	r6, r0
   1c72c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c730:	ldr	r3, [sp, #24]
   1c734:	mov	r0, r6
   1c738:	str	r3, [r7]
   1c73c:	add	sp, sp, #44	; 0x2c
   1c740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c744:	mov	r3, #8
   1c748:	str	r3, [sp]
   1c74c:	add	r1, sp, #36	; 0x24
   1c750:	rsb	r2, r2, #1
   1c754:	mvn	r3, #-2147483648	; 0x80000000
   1c758:	mov	r0, #0
   1c75c:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c760:	mov	r5, r0
   1c764:	ldm	r6, {r0, r1}
   1c768:	str	r5, [r4]
   1c76c:	stm	r5, {r0, r1}
   1c770:	b	1c654 <__assert_fail@plt+0xb4c8>
   1c774:	andeq	r3, r3, r4, lsr #2
   1c778:			; <UNDEFINED> instruction: 0x000331bc
   1c77c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c780:	sub	sp, sp, #132	; 0x84
   1c784:	mov	r5, r1
   1c788:	mov	r4, r0
   1c78c:	mov	r9, r2
   1c790:	add	r0, sp, #80	; 0x50
   1c794:	mov	r2, #48	; 0x30
   1c798:	mov	r1, #0
   1c79c:	bl	110b4 <memset@plt>
   1c7a0:	cmp	r5, #10
   1c7a4:	beq	1c95c <__assert_fail@plt+0xb7d0>
   1c7a8:	add	lr, sp, #80	; 0x50
   1c7ac:	str	r5, [sp, #80]	; 0x50
   1c7b0:	ldm	lr!, {r0, r1, r2, r3}
   1c7b4:	add	ip, sp, #32
   1c7b8:	ldr	r6, [pc, #416]	; 1c960 <__assert_fail@plt+0xb7d4>
   1c7bc:	stmia	ip!, {r0, r1, r2, r3}
   1c7c0:	ldm	lr!, {r0, r1, r2, r3}
   1c7c4:	stmia	ip!, {r0, r1, r2, r3}
   1c7c8:	ldm	lr, {r0, r1, r2, r3}
   1c7cc:	stm	ip, {r0, r1, r2, r3}
   1c7d0:	bl	11090 <__errno_location@plt>
   1c7d4:	cmn	r4, #-2147483647	; 0x80000001
   1c7d8:	ldr	r5, [r6]
   1c7dc:	mov	r7, r0
   1c7e0:	movne	r0, #0
   1c7e4:	moveq	r0, #1
   1c7e8:	ldr	r3, [r7]
   1c7ec:	orrs	r0, r0, r4, lsr #31
   1c7f0:	str	r3, [sp, #24]
   1c7f4:	bne	1c95c <__assert_fail@plt+0xb7d0>
   1c7f8:	ldr	r2, [r6, #4]
   1c7fc:	cmp	r4, r2
   1c800:	blt	1c860 <__assert_fail@plt+0xb6d4>
   1c804:	add	r8, r6, #8
   1c808:	cmp	r5, r8
   1c80c:	str	r2, [sp, #80]	; 0x50
   1c810:	beq	1c92c <__assert_fail@plt+0xb7a0>
   1c814:	mov	r3, #8
   1c818:	sub	r2, r4, r2
   1c81c:	mov	r0, r5
   1c820:	str	r3, [sp]
   1c824:	add	r2, r2, #1
   1c828:	add	r1, sp, #80	; 0x50
   1c82c:	mvn	r3, #-2147483648	; 0x80000000
   1c830:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c834:	mov	r5, r0
   1c838:	str	r0, [r6]
   1c83c:	ldr	r0, [r6, #4]
   1c840:	ldr	r2, [sp, #80]	; 0x50
   1c844:	mov	r1, #0
   1c848:	sub	r2, r2, r0
   1c84c:	add	r0, r5, r0, lsl #3
   1c850:	lsl	r2, r2, #3
   1c854:	bl	110b4 <memset@plt>
   1c858:	ldr	r3, [sp, #80]	; 0x50
   1c85c:	str	r3, [r6, #4]
   1c860:	add	fp, r5, r4, lsl #3
   1c864:	ldr	r1, [sp, #36]	; 0x24
   1c868:	ldr	r8, [r5, r4, lsl #3]
   1c86c:	ldr	r6, [fp, #4]
   1c870:	ldr	r2, [sp, #72]	; 0x48
   1c874:	ldr	r3, [sp, #32]
   1c878:	ldr	ip, [sp, #76]	; 0x4c
   1c87c:	orr	r1, r1, #1
   1c880:	add	sl, sp, #40	; 0x28
   1c884:	str	r1, [sp, #28]
   1c888:	str	r1, [sp, #4]
   1c88c:	str	r2, [sp, #12]
   1c890:	str	r3, [sp]
   1c894:	mov	r0, r6
   1c898:	mov	r1, r8
   1c89c:	str	ip, [sp, #16]
   1c8a0:	str	sl, [sp, #8]
   1c8a4:	mvn	r3, #0
   1c8a8:	mov	r2, r9
   1c8ac:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c8b0:	cmp	r8, r0
   1c8b4:	bhi	1c918 <__assert_fail@plt+0xb78c>
   1c8b8:	ldr	r3, [pc, #164]	; 1c964 <__assert_fail@plt+0xb7d8>
   1c8bc:	add	r8, r0, #1
   1c8c0:	cmp	r6, r3
   1c8c4:	str	r8, [r5, r4, lsl #3]
   1c8c8:	beq	1c8d4 <__assert_fail@plt+0xb748>
   1c8cc:	mov	r0, r6
   1c8d0:	bl	1a508 <__assert_fail@plt+0x937c>
   1c8d4:	mov	r0, r8
   1c8d8:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1c8dc:	ldr	lr, [sp, #76]	; 0x4c
   1c8e0:	ldr	r3, [sp, #32]
   1c8e4:	ldr	ip, [sp, #72]	; 0x48
   1c8e8:	ldr	r4, [sp, #28]
   1c8ec:	mov	r2, r9
   1c8f0:	mov	r1, r8
   1c8f4:	str	r0, [fp, #4]
   1c8f8:	str	r3, [sp]
   1c8fc:	str	sl, [sp, #8]
   1c900:	str	r4, [sp, #4]
   1c904:	str	lr, [sp, #16]
   1c908:	str	ip, [sp, #12]
   1c90c:	mvn	r3, #0
   1c910:	mov	r6, r0
   1c914:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1c918:	ldr	r3, [sp, #24]
   1c91c:	mov	r0, r6
   1c920:	str	r3, [r7]
   1c924:	add	sp, sp, #132	; 0x84
   1c928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c92c:	mov	r3, #8
   1c930:	sub	r2, r4, r2
   1c934:	add	r1, sp, #80	; 0x50
   1c938:	str	r3, [sp]
   1c93c:	add	r2, r2, #1
   1c940:	mvn	r3, #-2147483648	; 0x80000000
   1c944:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1c948:	mov	r5, r0
   1c94c:	ldm	r8, {r0, r1}
   1c950:	str	r5, [r6]
   1c954:	stm	r5, {r0, r1}
   1c958:	b	1c83c <__assert_fail@plt+0xb6b0>
   1c95c:	bl	11168 <abort@plt>
   1c960:	andeq	r3, r3, r4, lsr #2
   1c964:	andeq	r3, r3, ip, ror #3
   1c968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c96c:	sub	sp, sp, #132	; 0x84
   1c970:	mov	r5, r1
   1c974:	mov	r4, r0
   1c978:	mov	r9, r2
   1c97c:	add	r0, sp, #80	; 0x50
   1c980:	mov	r2, #48	; 0x30
   1c984:	mov	r1, #0
   1c988:	mov	sl, r3
   1c98c:	bl	110b4 <memset@plt>
   1c990:	cmp	r5, #10
   1c994:	beq	1cb50 <__assert_fail@plt+0xb9c4>
   1c998:	add	lr, sp, #80	; 0x50
   1c99c:	str	r5, [sp, #80]	; 0x50
   1c9a0:	ldm	lr!, {r0, r1, r2, r3}
   1c9a4:	add	ip, sp, #32
   1c9a8:	ldr	r6, [pc, #420]	; 1cb54 <__assert_fail@plt+0xb9c8>
   1c9ac:	stmia	ip!, {r0, r1, r2, r3}
   1c9b0:	ldm	lr!, {r0, r1, r2, r3}
   1c9b4:	stmia	ip!, {r0, r1, r2, r3}
   1c9b8:	ldm	lr, {r0, r1, r2, r3}
   1c9bc:	stm	ip, {r0, r1, r2, r3}
   1c9c0:	bl	11090 <__errno_location@plt>
   1c9c4:	cmn	r4, #-2147483647	; 0x80000001
   1c9c8:	ldr	r5, [r6]
   1c9cc:	mov	r7, r0
   1c9d0:	movne	r0, #0
   1c9d4:	moveq	r0, #1
   1c9d8:	ldr	r3, [r7]
   1c9dc:	orrs	r0, r0, r4, lsr #31
   1c9e0:	str	r3, [sp, #24]
   1c9e4:	bne	1cb50 <__assert_fail@plt+0xb9c4>
   1c9e8:	ldr	r2, [r6, #4]
   1c9ec:	cmp	r4, r2
   1c9f0:	blt	1ca50 <__assert_fail@plt+0xb8c4>
   1c9f4:	add	r8, r6, #8
   1c9f8:	cmp	r5, r8
   1c9fc:	str	r2, [sp, #80]	; 0x50
   1ca00:	beq	1cb20 <__assert_fail@plt+0xb994>
   1ca04:	mov	r3, #8
   1ca08:	sub	r2, r4, r2
   1ca0c:	mov	r0, r5
   1ca10:	str	r3, [sp]
   1ca14:	add	r2, r2, #1
   1ca18:	add	r1, sp, #80	; 0x50
   1ca1c:	mvn	r3, #-2147483648	; 0x80000000
   1ca20:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1ca24:	mov	r5, r0
   1ca28:	str	r0, [r6]
   1ca2c:	ldr	r0, [r6, #4]
   1ca30:	ldr	r2, [sp, #80]	; 0x50
   1ca34:	mov	r1, #0
   1ca38:	sub	r2, r2, r0
   1ca3c:	add	r0, r5, r0, lsl #3
   1ca40:	lsl	r2, r2, #3
   1ca44:	bl	110b4 <memset@plt>
   1ca48:	ldr	r3, [sp, #80]	; 0x50
   1ca4c:	str	r3, [r6, #4]
   1ca50:	add	fp, r5, r4, lsl #3
   1ca54:	ldr	r3, [sp, #32]
   1ca58:	ldr	r1, [sp, #36]	; 0x24
   1ca5c:	ldr	r8, [r5, r4, lsl #3]
   1ca60:	ldr	r6, [fp, #4]
   1ca64:	ldr	r2, [sp, #72]	; 0x48
   1ca68:	ldr	ip, [sp, #76]	; 0x4c
   1ca6c:	orr	r1, r1, #1
   1ca70:	str	r3, [sp]
   1ca74:	add	r3, sp, #40	; 0x28
   1ca78:	str	r1, [sp, #28]
   1ca7c:	str	r1, [sp, #4]
   1ca80:	str	r2, [sp, #12]
   1ca84:	str	r3, [sp, #8]
   1ca88:	mov	r0, r6
   1ca8c:	mov	r1, r8
   1ca90:	str	ip, [sp, #16]
   1ca94:	mov	r3, sl
   1ca98:	mov	r2, r9
   1ca9c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1caa0:	cmp	r8, r0
   1caa4:	bhi	1cb0c <__assert_fail@plt+0xb980>
   1caa8:	ldr	r3, [pc, #168]	; 1cb58 <__assert_fail@plt+0xb9cc>
   1caac:	add	r8, r0, #1
   1cab0:	cmp	r6, r3
   1cab4:	str	r8, [r5, r4, lsl #3]
   1cab8:	beq	1cac4 <__assert_fail@plt+0xb938>
   1cabc:	mov	r0, r6
   1cac0:	bl	1a508 <__assert_fail@plt+0x937c>
   1cac4:	mov	r0, r8
   1cac8:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1cacc:	add	lr, sp, #40	; 0x28
   1cad0:	ldr	ip, [sp, #76]	; 0x4c
   1cad4:	ldr	r4, [sp, #72]	; 0x48
   1cad8:	ldr	r5, [sp, #28]
   1cadc:	mov	r3, sl
   1cae0:	mov	r2, r9
   1cae4:	mov	r1, r8
   1cae8:	str	r0, [fp, #4]
   1caec:	str	lr, [sp, #8]
   1caf0:	ldr	lr, [sp, #32]
   1caf4:	str	r5, [sp, #4]
   1caf8:	str	ip, [sp, #16]
   1cafc:	str	r4, [sp, #12]
   1cb00:	str	lr, [sp]
   1cb04:	mov	r6, r0
   1cb08:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1cb0c:	ldr	r3, [sp, #24]
   1cb10:	mov	r0, r6
   1cb14:	str	r3, [r7]
   1cb18:	add	sp, sp, #132	; 0x84
   1cb1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb20:	mov	r3, #8
   1cb24:	sub	r2, r4, r2
   1cb28:	add	r1, sp, #80	; 0x50
   1cb2c:	str	r3, [sp]
   1cb30:	add	r2, r2, #1
   1cb34:	mvn	r3, #-2147483648	; 0x80000000
   1cb38:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1cb3c:	mov	r5, r0
   1cb40:	ldm	r8, {r0, r1}
   1cb44:	str	r5, [r6]
   1cb48:	stm	r5, {r0, r1}
   1cb4c:	b	1ca2c <__assert_fail@plt+0xb8a0>
   1cb50:	bl	11168 <abort@plt>
   1cb54:	andeq	r3, r3, r4, lsr #2
   1cb58:	andeq	r3, r3, ip, ror #3
   1cb5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb60:	sub	sp, sp, #124	; 0x7c
   1cb64:	mov	r4, r0
   1cb68:	mov	r9, r1
   1cb6c:	add	r0, sp, #72	; 0x48
   1cb70:	mov	r2, #48	; 0x30
   1cb74:	mov	r1, #0
   1cb78:	bl	110b4 <memset@plt>
   1cb7c:	cmp	r4, #10
   1cb80:	beq	1cd0c <__assert_fail@plt+0xbb80>
   1cb84:	add	lr, sp, #72	; 0x48
   1cb88:	str	r4, [sp, #72]	; 0x48
   1cb8c:	ldm	lr!, {r0, r1, r2, r3}
   1cb90:	add	ip, sp, #24
   1cb94:	ldr	r5, [pc, #372]	; 1cd10 <__assert_fail@plt+0xbb84>
   1cb98:	stmia	ip!, {r0, r1, r2, r3}
   1cb9c:	ldm	lr!, {r0, r1, r2, r3}
   1cba0:	stmia	ip!, {r0, r1, r2, r3}
   1cba4:	ldm	lr, {r0, r1, r2, r3}
   1cba8:	stm	ip, {r0, r1, r2, r3}
   1cbac:	bl	11090 <__errno_location@plt>
   1cbb0:	ldr	r2, [r5, #4]
   1cbb4:	ldr	r4, [r5]
   1cbb8:	cmp	r2, #0
   1cbbc:	mov	r7, r0
   1cbc0:	ldr	fp, [r0]
   1cbc4:	bgt	1cc20 <__assert_fail@plt+0xba94>
   1cbc8:	add	r6, r5, #8
   1cbcc:	cmp	r4, r6
   1cbd0:	str	r2, [sp, #72]	; 0x48
   1cbd4:	beq	1ccdc <__assert_fail@plt+0xbb50>
   1cbd8:	mov	r3, #8
   1cbdc:	mov	r0, r4
   1cbe0:	str	r3, [sp]
   1cbe4:	rsb	r2, r2, #1
   1cbe8:	add	r1, sp, #72	; 0x48
   1cbec:	mvn	r3, #-2147483648	; 0x80000000
   1cbf0:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1cbf4:	mov	r4, r0
   1cbf8:	str	r0, [r5]
   1cbfc:	ldr	r0, [r5, #4]
   1cc00:	ldr	r2, [sp, #72]	; 0x48
   1cc04:	mov	r1, #0
   1cc08:	sub	r2, r2, r0
   1cc0c:	add	r0, r4, r0, lsl #3
   1cc10:	lsl	r2, r2, #3
   1cc14:	bl	110b4 <memset@plt>
   1cc18:	ldr	r3, [sp, #72]	; 0x48
   1cc1c:	str	r3, [r5, #4]
   1cc20:	ldr	r6, [sp, #28]
   1cc24:	ldr	r8, [r4]
   1cc28:	ldr	r5, [r4, #4]
   1cc2c:	ldr	r2, [sp, #64]	; 0x40
   1cc30:	ldr	r3, [sp, #24]
   1cc34:	ldr	ip, [sp, #68]	; 0x44
   1cc38:	orr	r6, r6, #1
   1cc3c:	add	sl, sp, #32
   1cc40:	str	r2, [sp, #12]
   1cc44:	str	r3, [sp]
   1cc48:	str	r6, [sp, #4]
   1cc4c:	mov	r1, r8
   1cc50:	mov	r0, r5
   1cc54:	str	ip, [sp, #16]
   1cc58:	str	sl, [sp, #8]
   1cc5c:	mvn	r3, #0
   1cc60:	mov	r2, r9
   1cc64:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1cc68:	cmp	r8, r0
   1cc6c:	bhi	1cccc <__assert_fail@plt+0xbb40>
   1cc70:	ldr	r3, [pc, #156]	; 1cd14 <__assert_fail@plt+0xbb88>
   1cc74:	add	r8, r0, #1
   1cc78:	cmp	r5, r3
   1cc7c:	str	r8, [r4]
   1cc80:	beq	1cc8c <__assert_fail@plt+0xbb00>
   1cc84:	mov	r0, r5
   1cc88:	bl	1a508 <__assert_fail@plt+0x937c>
   1cc8c:	mov	r0, r8
   1cc90:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1cc94:	ldr	lr, [sp, #68]	; 0x44
   1cc98:	ldr	r3, [sp, #24]
   1cc9c:	ldr	ip, [sp, #64]	; 0x40
   1cca0:	mov	r2, r9
   1cca4:	mov	r1, r8
   1cca8:	str	r0, [r4, #4]
   1ccac:	str	r3, [sp]
   1ccb0:	str	sl, [sp, #8]
   1ccb4:	str	r6, [sp, #4]
   1ccb8:	str	lr, [sp, #16]
   1ccbc:	str	ip, [sp, #12]
   1ccc0:	mvn	r3, #0
   1ccc4:	mov	r5, r0
   1ccc8:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1cccc:	mov	r0, r5
   1ccd0:	str	fp, [r7]
   1ccd4:	add	sp, sp, #124	; 0x7c
   1ccd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccdc:	mov	r3, #8
   1cce0:	add	r1, sp, #72	; 0x48
   1cce4:	str	r3, [sp]
   1cce8:	rsb	r2, r2, #1
   1ccec:	mvn	r3, #-2147483648	; 0x80000000
   1ccf0:	mov	r0, #0
   1ccf4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1ccf8:	mov	r4, r0
   1ccfc:	ldm	r6, {r0, r1}
   1cd00:	str	r4, [r5]
   1cd04:	stm	r4, {r0, r1}
   1cd08:	b	1cbfc <__assert_fail@plt+0xba70>
   1cd0c:	bl	11168 <abort@plt>
   1cd10:	andeq	r3, r3, r4, lsr #2
   1cd14:	andeq	r3, r3, ip, ror #3
   1cd18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd1c:	sub	sp, sp, #132	; 0x84
   1cd20:	mov	r4, r0
   1cd24:	mov	r9, r1
   1cd28:	mov	sl, r2
   1cd2c:	add	r0, sp, #80	; 0x50
   1cd30:	mov	r2, #48	; 0x30
   1cd34:	mov	r1, #0
   1cd38:	bl	110b4 <memset@plt>
   1cd3c:	cmp	r4, #10
   1cd40:	beq	1ced4 <__assert_fail@plt+0xbd48>
   1cd44:	add	lr, sp, #80	; 0x50
   1cd48:	str	r4, [sp, #80]	; 0x50
   1cd4c:	ldm	lr!, {r0, r1, r2, r3}
   1cd50:	add	ip, sp, #32
   1cd54:	ldr	r5, [pc, #380]	; 1ced8 <__assert_fail@plt+0xbd4c>
   1cd58:	stmia	ip!, {r0, r1, r2, r3}
   1cd5c:	ldm	lr!, {r0, r1, r2, r3}
   1cd60:	stmia	ip!, {r0, r1, r2, r3}
   1cd64:	ldm	lr, {r0, r1, r2, r3}
   1cd68:	stm	ip, {r0, r1, r2, r3}
   1cd6c:	bl	11090 <__errno_location@plt>
   1cd70:	ldr	r2, [r5, #4]
   1cd74:	ldr	r4, [r5]
   1cd78:	cmp	r2, #0
   1cd7c:	ldr	r3, [r0]
   1cd80:	mov	r7, r0
   1cd84:	str	r3, [sp, #28]
   1cd88:	bgt	1cde4 <__assert_fail@plt+0xbc58>
   1cd8c:	add	r6, r5, #8
   1cd90:	cmp	r4, r6
   1cd94:	str	r2, [sp, #80]	; 0x50
   1cd98:	beq	1cea4 <__assert_fail@plt+0xbd18>
   1cd9c:	mov	r3, #8
   1cda0:	mov	r0, r4
   1cda4:	str	r3, [sp]
   1cda8:	rsb	r2, r2, #1
   1cdac:	add	r1, sp, #80	; 0x50
   1cdb0:	mvn	r3, #-2147483648	; 0x80000000
   1cdb4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1cdb8:	mov	r4, r0
   1cdbc:	str	r0, [r5]
   1cdc0:	ldr	r0, [r5, #4]
   1cdc4:	ldr	r2, [sp, #80]	; 0x50
   1cdc8:	mov	r1, #0
   1cdcc:	sub	r2, r2, r0
   1cdd0:	add	r0, r4, r0, lsl #3
   1cdd4:	lsl	r2, r2, #3
   1cdd8:	bl	110b4 <memset@plt>
   1cddc:	ldr	r3, [sp, #80]	; 0x50
   1cde0:	str	r3, [r5, #4]
   1cde4:	ldr	r6, [sp, #36]	; 0x24
   1cde8:	ldr	r8, [r4]
   1cdec:	ldr	r5, [r4, #4]
   1cdf0:	ldr	r2, [sp, #72]	; 0x48
   1cdf4:	ldr	r3, [sp, #32]
   1cdf8:	ldr	ip, [sp, #76]	; 0x4c
   1cdfc:	orr	r6, r6, #1
   1ce00:	add	fp, sp, #40	; 0x28
   1ce04:	str	r2, [sp, #12]
   1ce08:	str	r3, [sp]
   1ce0c:	str	r6, [sp, #4]
   1ce10:	mov	r1, r8
   1ce14:	mov	r0, r5
   1ce18:	str	ip, [sp, #16]
   1ce1c:	str	fp, [sp, #8]
   1ce20:	mov	r3, sl
   1ce24:	mov	r2, r9
   1ce28:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1ce2c:	cmp	r8, r0
   1ce30:	bhi	1ce90 <__assert_fail@plt+0xbd04>
   1ce34:	ldr	r3, [pc, #160]	; 1cedc <__assert_fail@plt+0xbd50>
   1ce38:	add	r8, r0, #1
   1ce3c:	cmp	r5, r3
   1ce40:	str	r8, [r4]
   1ce44:	beq	1ce50 <__assert_fail@plt+0xbcc4>
   1ce48:	mov	r0, r5
   1ce4c:	bl	1a508 <__assert_fail@plt+0x937c>
   1ce50:	mov	r0, r8
   1ce54:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1ce58:	ldr	ip, [sp, #76]	; 0x4c
   1ce5c:	ldr	lr, [sp, #32]
   1ce60:	mov	r3, sl
   1ce64:	mov	r2, r9
   1ce68:	mov	r1, r8
   1ce6c:	str	r0, [r4, #4]
   1ce70:	ldr	r4, [sp, #72]	; 0x48
   1ce74:	str	fp, [sp, #8]
   1ce78:	str	r6, [sp, #4]
   1ce7c:	str	ip, [sp, #16]
   1ce80:	str	r4, [sp, #12]
   1ce84:	str	lr, [sp]
   1ce88:	mov	r5, r0
   1ce8c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1ce90:	ldr	r3, [sp, #28]
   1ce94:	mov	r0, r5
   1ce98:	str	r3, [r7]
   1ce9c:	add	sp, sp, #132	; 0x84
   1cea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cea4:	mov	r3, #8
   1cea8:	add	r1, sp, #80	; 0x50
   1ceac:	str	r3, [sp]
   1ceb0:	rsb	r2, r2, #1
   1ceb4:	mvn	r3, #-2147483648	; 0x80000000
   1ceb8:	mov	r0, #0
   1cebc:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1cec0:	mov	r4, r0
   1cec4:	ldm	r6, {r0, r1}
   1cec8:	str	r4, [r5]
   1cecc:	stm	r4, {r0, r1}
   1ced0:	b	1cdc0 <__assert_fail@plt+0xbc34>
   1ced4:	bl	11168 <abort@plt>
   1ced8:	andeq	r3, r3, r4, lsr #2
   1cedc:	andeq	r3, r3, ip, ror #3
   1cee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cee4:	mov	r4, r2
   1cee8:	ldr	lr, [pc, #432]	; 1d0a0 <__assert_fail@plt+0xbf14>
   1ceec:	mov	sl, r0
   1cef0:	mov	fp, r1
   1cef4:	ldm	lr!, {r0, r1, r2, r3}
   1cef8:	sub	sp, sp, #92	; 0x5c
   1cefc:	add	ip, sp, #40	; 0x28
   1cf00:	lsr	r7, r4, #5
   1cf04:	stmia	ip!, {r0, r1, r2, r3}
   1cf08:	add	r6, sp, #48	; 0x30
   1cf0c:	ldm	lr!, {r0, r1, r2, r3}
   1cf10:	and	r4, r4, #31
   1cf14:	ldr	r5, [pc, #392]	; 1d0a4 <__assert_fail@plt+0xbf18>
   1cf18:	stmia	ip!, {r0, r1, r2, r3}
   1cf1c:	ldm	lr, {r0, r1, r2, r3}
   1cf20:	stm	ip, {r0, r1, r2, r3}
   1cf24:	ldr	r2, [r6, r7, lsl #2]
   1cf28:	lsr	r3, r2, r4
   1cf2c:	eor	r3, r3, #1
   1cf30:	and	r3, r3, #1
   1cf34:	eor	r4, r2, r3, lsl r4
   1cf38:	str	r4, [r6, r7, lsl #2]
   1cf3c:	bl	11090 <__errno_location@plt>
   1cf40:	ldr	r2, [r5, #4]
   1cf44:	ldr	r4, [r5]
   1cf48:	cmp	r2, #0
   1cf4c:	ldr	r3, [r0]
   1cf50:	mov	r8, r0
   1cf54:	str	r3, [sp, #28]
   1cf58:	bgt	1cfb4 <__assert_fail@plt+0xbe28>
   1cf5c:	add	r7, r5, #8
   1cf60:	cmp	r4, r7
   1cf64:	str	r2, [sp, #36]	; 0x24
   1cf68:	beq	1d070 <__assert_fail@plt+0xbee4>
   1cf6c:	mov	r3, #8
   1cf70:	mov	r0, r4
   1cf74:	str	r3, [sp]
   1cf78:	rsb	r2, r2, #1
   1cf7c:	mvn	r3, #-2147483648	; 0x80000000
   1cf80:	add	r1, sp, #36	; 0x24
   1cf84:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1cf88:	mov	r4, r0
   1cf8c:	str	r0, [r5]
   1cf90:	ldr	r0, [r5, #4]
   1cf94:	ldr	r2, [sp, #36]	; 0x24
   1cf98:	mov	r1, #0
   1cf9c:	sub	r2, r2, r0
   1cfa0:	add	r0, r4, r0, lsl #3
   1cfa4:	lsl	r2, r2, #3
   1cfa8:	bl	110b4 <memset@plt>
   1cfac:	ldr	r3, [sp, #36]	; 0x24
   1cfb0:	str	r3, [r5, #4]
   1cfb4:	ldr	r7, [sp, #44]	; 0x2c
   1cfb8:	ldr	r9, [r4]
   1cfbc:	ldr	r5, [r4, #4]
   1cfc0:	ldr	r2, [sp, #80]	; 0x50
   1cfc4:	ldr	r3, [sp, #40]	; 0x28
   1cfc8:	ldr	ip, [sp, #84]	; 0x54
   1cfcc:	orr	r7, r7, #1
   1cfd0:	str	r2, [sp, #12]
   1cfd4:	str	r3, [sp]
   1cfd8:	str	r7, [sp, #4]
   1cfdc:	str	r6, [sp, #8]
   1cfe0:	mov	r1, r9
   1cfe4:	mov	r0, r5
   1cfe8:	str	ip, [sp, #16]
   1cfec:	mov	r3, fp
   1cff0:	mov	r2, sl
   1cff4:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1cff8:	cmp	r9, r0
   1cffc:	bhi	1d05c <__assert_fail@plt+0xbed0>
   1d000:	ldr	r3, [pc, #160]	; 1d0a8 <__assert_fail@plt+0xbf1c>
   1d004:	add	r9, r0, #1
   1d008:	cmp	r5, r3
   1d00c:	str	r9, [r4]
   1d010:	beq	1d01c <__assert_fail@plt+0xbe90>
   1d014:	mov	r0, r5
   1d018:	bl	1a508 <__assert_fail@plt+0x937c>
   1d01c:	mov	r0, r9
   1d020:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1d024:	ldr	ip, [sp, #84]	; 0x54
   1d028:	ldr	lr, [sp, #40]	; 0x28
   1d02c:	mov	r3, fp
   1d030:	mov	r2, sl
   1d034:	mov	r1, r9
   1d038:	str	r0, [r4, #4]
   1d03c:	ldr	r4, [sp, #80]	; 0x50
   1d040:	str	r6, [sp, #8]
   1d044:	str	r7, [sp, #4]
   1d048:	str	ip, [sp, #16]
   1d04c:	str	r4, [sp, #12]
   1d050:	str	lr, [sp]
   1d054:	mov	r5, r0
   1d058:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d05c:	ldr	r3, [sp, #28]
   1d060:	mov	r0, r5
   1d064:	str	r3, [r8]
   1d068:	add	sp, sp, #92	; 0x5c
   1d06c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d070:	mov	r3, #8
   1d074:	str	r3, [sp]
   1d078:	add	r1, sp, #36	; 0x24
   1d07c:	rsb	r2, r2, #1
   1d080:	mvn	r3, #-2147483648	; 0x80000000
   1d084:	mov	r0, #0
   1d088:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d08c:	mov	r4, r0
   1d090:	ldm	r7, {r0, r1}
   1d094:	str	r4, [r5]
   1d098:	stm	r4, {r0, r1}
   1d09c:	b	1cf90 <__assert_fail@plt+0xbe04>
   1d0a0:			; <UNDEFINED> instruction: 0x000331bc
   1d0a4:	andeq	r3, r3, r4, lsr #2
   1d0a8:	andeq	r3, r3, ip, ror #3
   1d0ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0b0:	mov	r4, r1
   1d0b4:	ldr	lr, [pc, #420]	; 1d260 <__assert_fail@plt+0xc0d4>
   1d0b8:	mov	r6, r0
   1d0bc:	sub	sp, sp, #84	; 0x54
   1d0c0:	ldm	lr!, {r0, r1, r2, r3}
   1d0c4:	add	ip, sp, #32
   1d0c8:	lsr	r8, r4, #5
   1d0cc:	add	r5, sp, #40	; 0x28
   1d0d0:	stmia	ip!, {r0, r1, r2, r3}
   1d0d4:	and	r4, r4, #31
   1d0d8:	ldm	lr!, {r0, r1, r2, r3}
   1d0dc:	ldr	r7, [pc, #384]	; 1d264 <__assert_fail@plt+0xc0d8>
   1d0e0:	stmia	ip!, {r0, r1, r2, r3}
   1d0e4:	ldm	lr, {r0, r1, r2, r3}
   1d0e8:	stm	ip, {r0, r1, r2, r3}
   1d0ec:	ldr	r2, [r5, r8, lsl #2]
   1d0f0:	lsr	r3, r2, r4
   1d0f4:	eor	r3, r3, #1
   1d0f8:	and	r3, r3, #1
   1d0fc:	eor	r4, r2, r3, lsl r4
   1d100:	str	r4, [r5, r8, lsl #2]
   1d104:	bl	11090 <__errno_location@plt>
   1d108:	ldr	r2, [r7, #4]
   1d10c:	ldr	r4, [r7]
   1d110:	cmp	r2, #0
   1d114:	mov	r9, r0
   1d118:	ldr	sl, [r0]
   1d11c:	bgt	1d178 <__assert_fail@plt+0xbfec>
   1d120:	add	r8, r7, #8
   1d124:	cmp	r4, r8
   1d128:	str	r2, [sp, #28]
   1d12c:	beq	1d230 <__assert_fail@plt+0xc0a4>
   1d130:	mov	r3, #8
   1d134:	mov	r0, r4
   1d138:	str	r3, [sp]
   1d13c:	rsb	r2, r2, #1
   1d140:	mvn	r3, #-2147483648	; 0x80000000
   1d144:	add	r1, sp, #28
   1d148:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d14c:	mov	r4, r0
   1d150:	str	r0, [r7]
   1d154:	ldr	r0, [r7, #4]
   1d158:	ldr	r2, [sp, #28]
   1d15c:	mov	r1, #0
   1d160:	sub	r2, r2, r0
   1d164:	add	r0, r4, r0, lsl #3
   1d168:	lsl	r2, r2, #3
   1d16c:	bl	110b4 <memset@plt>
   1d170:	ldr	r3, [sp, #28]
   1d174:	str	r3, [r7, #4]
   1d178:	ldr	r8, [sp, #36]	; 0x24
   1d17c:	ldr	fp, [r4]
   1d180:	ldr	r7, [r4, #4]
   1d184:	ldr	r2, [sp, #72]	; 0x48
   1d188:	ldr	r3, [sp, #32]
   1d18c:	ldr	ip, [sp, #76]	; 0x4c
   1d190:	orr	r8, r8, #1
   1d194:	str	r2, [sp, #12]
   1d198:	str	r3, [sp]
   1d19c:	str	r8, [sp, #4]
   1d1a0:	str	r5, [sp, #8]
   1d1a4:	mov	r1, fp
   1d1a8:	mov	r0, r7
   1d1ac:	str	ip, [sp, #16]
   1d1b0:	mvn	r3, #0
   1d1b4:	mov	r2, r6
   1d1b8:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d1bc:	cmp	fp, r0
   1d1c0:	bhi	1d220 <__assert_fail@plt+0xc094>
   1d1c4:	ldr	r3, [pc, #156]	; 1d268 <__assert_fail@plt+0xc0dc>
   1d1c8:	add	fp, r0, #1
   1d1cc:	cmp	r7, r3
   1d1d0:	str	fp, [r4]
   1d1d4:	beq	1d1e0 <__assert_fail@plt+0xc054>
   1d1d8:	mov	r0, r7
   1d1dc:	bl	1a508 <__assert_fail@plt+0x937c>
   1d1e0:	mov	r0, fp
   1d1e4:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1d1e8:	ldr	lr, [sp, #76]	; 0x4c
   1d1ec:	ldr	r3, [sp, #32]
   1d1f0:	ldr	ip, [sp, #72]	; 0x48
   1d1f4:	mov	r2, r6
   1d1f8:	mov	r1, fp
   1d1fc:	str	r0, [r4, #4]
   1d200:	str	r3, [sp]
   1d204:	str	r5, [sp, #8]
   1d208:	str	r8, [sp, #4]
   1d20c:	str	lr, [sp, #16]
   1d210:	str	ip, [sp, #12]
   1d214:	mvn	r3, #0
   1d218:	mov	r7, r0
   1d21c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d220:	mov	r0, r7
   1d224:	str	sl, [r9]
   1d228:	add	sp, sp, #84	; 0x54
   1d22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d230:	mov	r3, #8
   1d234:	str	r3, [sp]
   1d238:	add	r1, sp, #28
   1d23c:	rsb	r2, r2, #1
   1d240:	mvn	r3, #-2147483648	; 0x80000000
   1d244:	mov	r0, #0
   1d248:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d24c:	mov	r4, r0
   1d250:	ldm	r8, {r0, r1}
   1d254:	str	r4, [r7]
   1d258:	stm	r4, {r0, r1}
   1d25c:	b	1d154 <__assert_fail@plt+0xbfc8>
   1d260:			; <UNDEFINED> instruction: 0x000331bc
   1d264:	andeq	r3, r3, r4, lsr #2
   1d268:	andeq	r3, r3, ip, ror #3
   1d26c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d270:	mov	r6, r0
   1d274:	ldr	lr, [pc, #404]	; 1d410 <__assert_fail@plt+0xc284>
   1d278:	sub	sp, sp, #84	; 0x54
   1d27c:	add	ip, sp, #32
   1d280:	ldm	lr!, {r0, r1, r2, r3}
   1d284:	ldr	r5, [pc, #392]	; 1d414 <__assert_fail@plt+0xc288>
   1d288:	stmia	ip!, {r0, r1, r2, r3}
   1d28c:	ldm	lr!, {r0, r1, r2, r3}
   1d290:	ldr	r4, [sp, #44]	; 0x2c
   1d294:	stmia	ip!, {r0, r1, r2, r3}
   1d298:	ldm	lr, {r0, r1, r2, r3}
   1d29c:	mvn	lr, r4
   1d2a0:	and	lr, lr, #67108864	; 0x4000000
   1d2a4:	eor	lr, lr, r4
   1d2a8:	stm	ip, {r0, r1, r2, r3}
   1d2ac:	str	lr, [sp, #44]	; 0x2c
   1d2b0:	bl	11090 <__errno_location@plt>
   1d2b4:	ldr	r2, [r5, #4]
   1d2b8:	ldr	r4, [r5]
   1d2bc:	cmp	r2, #0
   1d2c0:	mov	r8, r0
   1d2c4:	ldr	sl, [r0]
   1d2c8:	bgt	1d324 <__assert_fail@plt+0xc198>
   1d2cc:	add	r7, r5, #8
   1d2d0:	cmp	r4, r7
   1d2d4:	str	r2, [sp, #28]
   1d2d8:	beq	1d3e0 <__assert_fail@plt+0xc254>
   1d2dc:	mov	r3, #8
   1d2e0:	mov	r0, r4
   1d2e4:	str	r3, [sp]
   1d2e8:	rsb	r2, r2, #1
   1d2ec:	mvn	r3, #-2147483648	; 0x80000000
   1d2f0:	add	r1, sp, #28
   1d2f4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d2f8:	mov	r4, r0
   1d2fc:	str	r0, [r5]
   1d300:	ldr	r0, [r5, #4]
   1d304:	ldr	r2, [sp, #28]
   1d308:	mov	r1, #0
   1d30c:	sub	r2, r2, r0
   1d310:	add	r0, r4, r0, lsl #3
   1d314:	lsl	r2, r2, #3
   1d318:	bl	110b4 <memset@plt>
   1d31c:	ldr	r3, [sp, #28]
   1d320:	str	r3, [r5, #4]
   1d324:	ldr	r7, [sp, #36]	; 0x24
   1d328:	ldr	r9, [r4]
   1d32c:	ldr	r5, [r4, #4]
   1d330:	ldr	r2, [sp, #72]	; 0x48
   1d334:	ldr	r3, [sp, #32]
   1d338:	ldr	ip, [sp, #76]	; 0x4c
   1d33c:	orr	r7, r7, #1
   1d340:	add	fp, sp, #40	; 0x28
   1d344:	str	r2, [sp, #12]
   1d348:	str	r3, [sp]
   1d34c:	str	r7, [sp, #4]
   1d350:	mov	r1, r9
   1d354:	mov	r0, r5
   1d358:	str	ip, [sp, #16]
   1d35c:	str	fp, [sp, #8]
   1d360:	mvn	r3, #0
   1d364:	mov	r2, r6
   1d368:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d36c:	cmp	r9, r0
   1d370:	bhi	1d3d0 <__assert_fail@plt+0xc244>
   1d374:	ldr	r3, [pc, #156]	; 1d418 <__assert_fail@plt+0xc28c>
   1d378:	add	r9, r0, #1
   1d37c:	cmp	r5, r3
   1d380:	str	r9, [r4]
   1d384:	beq	1d390 <__assert_fail@plt+0xc204>
   1d388:	mov	r0, r5
   1d38c:	bl	1a508 <__assert_fail@plt+0x937c>
   1d390:	mov	r0, r9
   1d394:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1d398:	ldr	lr, [sp, #76]	; 0x4c
   1d39c:	ldr	r3, [sp, #32]
   1d3a0:	ldr	ip, [sp, #72]	; 0x48
   1d3a4:	mov	r2, r6
   1d3a8:	mov	r1, r9
   1d3ac:	str	r0, [r4, #4]
   1d3b0:	str	r3, [sp]
   1d3b4:	str	fp, [sp, #8]
   1d3b8:	str	r7, [sp, #4]
   1d3bc:	str	lr, [sp, #16]
   1d3c0:	str	ip, [sp, #12]
   1d3c4:	mvn	r3, #0
   1d3c8:	mov	r5, r0
   1d3cc:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d3d0:	mov	r0, r5
   1d3d4:	str	sl, [r8]
   1d3d8:	add	sp, sp, #84	; 0x54
   1d3dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3e0:	mov	r3, #8
   1d3e4:	str	r3, [sp]
   1d3e8:	add	r1, sp, #28
   1d3ec:	rsb	r2, r2, #1
   1d3f0:	mvn	r3, #-2147483648	; 0x80000000
   1d3f4:	mov	r0, #0
   1d3f8:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d3fc:	mov	r4, r0
   1d400:	ldm	r7, {r0, r1}
   1d404:	str	r4, [r5]
   1d408:	stm	r4, {r0, r1}
   1d40c:	b	1d300 <__assert_fail@plt+0xc174>
   1d410:			; <UNDEFINED> instruction: 0x000331bc
   1d414:	andeq	r3, r3, r4, lsr #2
   1d418:	andeq	r3, r3, ip, ror #3
   1d41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d420:	mov	r9, r0
   1d424:	ldr	lr, [pc, #416]	; 1d5cc <__assert_fail@plt+0xc440>
   1d428:	mov	sl, r1
   1d42c:	sub	sp, sp, #92	; 0x5c
   1d430:	ldm	lr!, {r0, r1, r2, r3}
   1d434:	add	ip, sp, #40	; 0x28
   1d438:	ldr	r5, [pc, #400]	; 1d5d0 <__assert_fail@plt+0xc444>
   1d43c:	stmia	ip!, {r0, r1, r2, r3}
   1d440:	ldm	lr!, {r0, r1, r2, r3}
   1d444:	ldr	r4, [sp, #52]	; 0x34
   1d448:	stmia	ip!, {r0, r1, r2, r3}
   1d44c:	ldm	lr, {r0, r1, r2, r3}
   1d450:	mvn	lr, r4
   1d454:	and	lr, lr, #67108864	; 0x4000000
   1d458:	eor	lr, lr, r4
   1d45c:	stm	ip, {r0, r1, r2, r3}
   1d460:	str	lr, [sp, #52]	; 0x34
   1d464:	bl	11090 <__errno_location@plt>
   1d468:	ldr	r2, [r5, #4]
   1d46c:	ldr	r4, [r5]
   1d470:	cmp	r2, #0
   1d474:	ldr	r3, [r0]
   1d478:	mov	r7, r0
   1d47c:	str	r3, [sp, #28]
   1d480:	bgt	1d4dc <__assert_fail@plt+0xc350>
   1d484:	add	r6, r5, #8
   1d488:	cmp	r4, r6
   1d48c:	str	r2, [sp, #36]	; 0x24
   1d490:	beq	1d59c <__assert_fail@plt+0xc410>
   1d494:	mov	r3, #8
   1d498:	mov	r0, r4
   1d49c:	str	r3, [sp]
   1d4a0:	rsb	r2, r2, #1
   1d4a4:	mvn	r3, #-2147483648	; 0x80000000
   1d4a8:	add	r1, sp, #36	; 0x24
   1d4ac:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d4b0:	mov	r4, r0
   1d4b4:	str	r0, [r5]
   1d4b8:	ldr	r0, [r5, #4]
   1d4bc:	ldr	r2, [sp, #36]	; 0x24
   1d4c0:	mov	r1, #0
   1d4c4:	sub	r2, r2, r0
   1d4c8:	add	r0, r4, r0, lsl #3
   1d4cc:	lsl	r2, r2, #3
   1d4d0:	bl	110b4 <memset@plt>
   1d4d4:	ldr	r3, [sp, #36]	; 0x24
   1d4d8:	str	r3, [r5, #4]
   1d4dc:	ldr	r6, [sp, #44]	; 0x2c
   1d4e0:	ldr	r8, [r4]
   1d4e4:	ldr	r5, [r4, #4]
   1d4e8:	ldr	r2, [sp, #80]	; 0x50
   1d4ec:	ldr	r3, [sp, #40]	; 0x28
   1d4f0:	ldr	ip, [sp, #84]	; 0x54
   1d4f4:	orr	r6, r6, #1
   1d4f8:	add	fp, sp, #48	; 0x30
   1d4fc:	str	r2, [sp, #12]
   1d500:	str	r3, [sp]
   1d504:	str	r6, [sp, #4]
   1d508:	mov	r1, r8
   1d50c:	mov	r0, r5
   1d510:	str	ip, [sp, #16]
   1d514:	str	fp, [sp, #8]
   1d518:	mov	r3, sl
   1d51c:	mov	r2, r9
   1d520:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d524:	cmp	r8, r0
   1d528:	bhi	1d588 <__assert_fail@plt+0xc3fc>
   1d52c:	ldr	r3, [pc, #160]	; 1d5d4 <__assert_fail@plt+0xc448>
   1d530:	add	r8, r0, #1
   1d534:	cmp	r5, r3
   1d538:	str	r8, [r4]
   1d53c:	beq	1d548 <__assert_fail@plt+0xc3bc>
   1d540:	mov	r0, r5
   1d544:	bl	1a508 <__assert_fail@plt+0x937c>
   1d548:	mov	r0, r8
   1d54c:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1d550:	ldr	ip, [sp, #84]	; 0x54
   1d554:	ldr	lr, [sp, #40]	; 0x28
   1d558:	mov	r3, sl
   1d55c:	mov	r2, r9
   1d560:	mov	r1, r8
   1d564:	str	r0, [r4, #4]
   1d568:	ldr	r4, [sp, #80]	; 0x50
   1d56c:	str	fp, [sp, #8]
   1d570:	str	r6, [sp, #4]
   1d574:	str	ip, [sp, #16]
   1d578:	str	r4, [sp, #12]
   1d57c:	str	lr, [sp]
   1d580:	mov	r5, r0
   1d584:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d588:	ldr	r3, [sp, #28]
   1d58c:	mov	r0, r5
   1d590:	str	r3, [r7]
   1d594:	add	sp, sp, #92	; 0x5c
   1d598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d59c:	mov	r3, #8
   1d5a0:	str	r3, [sp]
   1d5a4:	add	r1, sp, #36	; 0x24
   1d5a8:	rsb	r2, r2, #1
   1d5ac:	mvn	r3, #-2147483648	; 0x80000000
   1d5b0:	mov	r0, #0
   1d5b4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d5b8:	mov	r4, r0
   1d5bc:	ldm	r6, {r0, r1}
   1d5c0:	str	r4, [r5]
   1d5c4:	stm	r4, {r0, r1}
   1d5c8:	b	1d4b8 <__assert_fail@plt+0xc32c>
   1d5cc:			; <UNDEFINED> instruction: 0x000331bc
   1d5d0:	andeq	r3, r3, r4, lsr #2
   1d5d4:	andeq	r3, r3, ip, ror #3
   1d5d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5dc:	sub	sp, sp, #180	; 0xb4
   1d5e0:	mov	r6, r1
   1d5e4:	mov	r4, r0
   1d5e8:	mov	r9, r2
   1d5ec:	add	r0, sp, #80	; 0x50
   1d5f0:	mov	r2, #48	; 0x30
   1d5f4:	mov	r1, #0
   1d5f8:	bl	110b4 <memset@plt>
   1d5fc:	cmp	r6, #10
   1d600:	beq	1d7e0 <__assert_fail@plt+0xc654>
   1d604:	add	r5, sp, #80	; 0x50
   1d608:	str	r6, [sp, #80]	; 0x50
   1d60c:	ldm	r5!, {r0, r1, r2, r3}
   1d610:	add	ip, sp, #128	; 0x80
   1d614:	mov	r7, ip
   1d618:	add	lr, sp, #32
   1d61c:	stmia	ip!, {r0, r1, r2, r3}
   1d620:	mov	r8, #67108864	; 0x4000000
   1d624:	ldm	r5!, {r0, r1, r2, r3}
   1d628:	ldr	r6, [pc, #436]	; 1d7e4 <__assert_fail@plt+0xc658>
   1d62c:	stmia	ip!, {r0, r1, r2, r3}
   1d630:	ldm	r5, {r0, r1, r2, r3}
   1d634:	stm	ip, {r0, r1, r2, r3}
   1d638:	ldm	r7!, {r0, r1, r2, r3}
   1d63c:	stmia	lr!, {r0, r1, r2, r3}
   1d640:	ldm	r7!, {r0, r1, r2, r3}
   1d644:	str	r8, [sp, #44]	; 0x2c
   1d648:	stmia	lr!, {r0, r1, r2, r3}
   1d64c:	ldm	ip, {r0, r1, r2, r3}
   1d650:	stm	lr, {r0, r1, r2, r3}
   1d654:	bl	11090 <__errno_location@plt>
   1d658:	cmn	r4, #-2147483647	; 0x80000001
   1d65c:	ldr	r5, [r6]
   1d660:	mov	r7, r0
   1d664:	movne	r0, #0
   1d668:	moveq	r0, #1
   1d66c:	ldr	r3, [r7]
   1d670:	orrs	r0, r0, r4, lsr #31
   1d674:	str	r3, [sp, #24]
   1d678:	bne	1d7e0 <__assert_fail@plt+0xc654>
   1d67c:	ldr	r2, [r6, #4]
   1d680:	cmp	r4, r2
   1d684:	blt	1d6e4 <__assert_fail@plt+0xc558>
   1d688:	add	r8, r6, #8
   1d68c:	cmp	r5, r8
   1d690:	str	r2, [sp, #80]	; 0x50
   1d694:	beq	1d7b0 <__assert_fail@plt+0xc624>
   1d698:	mov	r3, #8
   1d69c:	sub	r2, r4, r2
   1d6a0:	mov	r0, r5
   1d6a4:	str	r3, [sp]
   1d6a8:	add	r2, r2, #1
   1d6ac:	add	r1, sp, #80	; 0x50
   1d6b0:	mvn	r3, #-2147483648	; 0x80000000
   1d6b4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d6b8:	mov	r5, r0
   1d6bc:	str	r0, [r6]
   1d6c0:	ldr	r0, [r6, #4]
   1d6c4:	ldr	r2, [sp, #80]	; 0x50
   1d6c8:	mov	r1, #0
   1d6cc:	sub	r2, r2, r0
   1d6d0:	add	r0, r5, r0, lsl #3
   1d6d4:	lsl	r2, r2, #3
   1d6d8:	bl	110b4 <memset@plt>
   1d6dc:	ldr	r3, [sp, #80]	; 0x50
   1d6e0:	str	r3, [r6, #4]
   1d6e4:	add	fp, r5, r4, lsl #3
   1d6e8:	ldr	r1, [sp, #36]	; 0x24
   1d6ec:	ldr	r8, [r5, r4, lsl #3]
   1d6f0:	ldr	r6, [fp, #4]
   1d6f4:	ldr	r2, [sp, #72]	; 0x48
   1d6f8:	ldr	r3, [sp, #32]
   1d6fc:	ldr	ip, [sp, #76]	; 0x4c
   1d700:	orr	r1, r1, #1
   1d704:	add	sl, sp, #40	; 0x28
   1d708:	str	r1, [sp, #28]
   1d70c:	str	r1, [sp, #4]
   1d710:	str	r2, [sp, #12]
   1d714:	str	r3, [sp]
   1d718:	mov	r0, r6
   1d71c:	mov	r1, r8
   1d720:	str	ip, [sp, #16]
   1d724:	str	sl, [sp, #8]
   1d728:	mvn	r3, #0
   1d72c:	mov	r2, r9
   1d730:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d734:	cmp	r8, r0
   1d738:	bhi	1d79c <__assert_fail@plt+0xc610>
   1d73c:	ldr	r3, [pc, #164]	; 1d7e8 <__assert_fail@plt+0xc65c>
   1d740:	add	r8, r0, #1
   1d744:	cmp	r6, r3
   1d748:	str	r8, [r5, r4, lsl #3]
   1d74c:	beq	1d758 <__assert_fail@plt+0xc5cc>
   1d750:	mov	r0, r6
   1d754:	bl	1a508 <__assert_fail@plt+0x937c>
   1d758:	mov	r0, r8
   1d75c:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1d760:	ldr	lr, [sp, #76]	; 0x4c
   1d764:	ldr	r3, [sp, #32]
   1d768:	ldr	ip, [sp, #72]	; 0x48
   1d76c:	ldr	r4, [sp, #28]
   1d770:	mov	r2, r9
   1d774:	mov	r1, r8
   1d778:	str	r0, [fp, #4]
   1d77c:	str	r3, [sp]
   1d780:	str	sl, [sp, #8]
   1d784:	str	r4, [sp, #4]
   1d788:	str	lr, [sp, #16]
   1d78c:	str	ip, [sp, #12]
   1d790:	mvn	r3, #0
   1d794:	mov	r6, r0
   1d798:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d79c:	ldr	r3, [sp, #24]
   1d7a0:	mov	r0, r6
   1d7a4:	str	r3, [r7]
   1d7a8:	add	sp, sp, #180	; 0xb4
   1d7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7b0:	mov	r3, #8
   1d7b4:	sub	r2, r4, r2
   1d7b8:	add	r1, sp, #80	; 0x50
   1d7bc:	str	r3, [sp]
   1d7c0:	add	r2, r2, #1
   1d7c4:	mvn	r3, #-2147483648	; 0x80000000
   1d7c8:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d7cc:	mov	r5, r0
   1d7d0:	ldm	r8, {r0, r1}
   1d7d4:	str	r5, [r6]
   1d7d8:	stm	r5, {r0, r1}
   1d7dc:	b	1d6c0 <__assert_fail@plt+0xc534>
   1d7e0:	bl	11168 <abort@plt>
   1d7e4:	andeq	r3, r3, r4, lsr #2
   1d7e8:	andeq	r3, r3, ip, ror #3
   1d7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7f0:	mov	r7, r1
   1d7f4:	ldr	lr, [pc, #492]	; 1d9e8 <__assert_fail@plt+0xc85c>
   1d7f8:	mov	r8, r2
   1d7fc:	mov	r4, r0
   1d800:	mov	fp, r3
   1d804:	ldm	lr!, {r0, r1, r2, r3}
   1d808:	sub	sp, sp, #100	; 0x64
   1d80c:	add	ip, sp, #48	; 0x30
   1d810:	mov	sl, #10
   1d814:	stmia	ip!, {r0, r1, r2, r3}
   1d818:	cmp	r8, #0
   1d81c:	cmpne	r7, #0
   1d820:	ldm	lr!, {r0, r1, r2, r3}
   1d824:	str	sl, [sp, #48]	; 0x30
   1d828:	stmia	ip!, {r0, r1, r2, r3}
   1d82c:	ldm	lr, {r0, r1, r2, r3}
   1d830:	stm	ip, {r0, r1, r2, r3}
   1d834:	beq	1d9e4 <__assert_fail@plt+0xc858>
   1d838:	str	r7, [sp, #88]	; 0x58
   1d83c:	str	r8, [sp, #92]	; 0x5c
   1d840:	bl	11090 <__errno_location@plt>
   1d844:	ldr	r6, [pc, #416]	; 1d9ec <__assert_fail@plt+0xc860>
   1d848:	cmn	r4, #-2147483647	; 0x80000001
   1d84c:	ldr	r5, [r6]
   1d850:	mov	r9, r0
   1d854:	movne	r0, #0
   1d858:	moveq	r0, #1
   1d85c:	ldr	r3, [r9]
   1d860:	orrs	r0, r0, r4, lsr #31
   1d864:	str	r3, [sp, #28]
   1d868:	bne	1d9e4 <__assert_fail@plt+0xc858>
   1d86c:	ldr	r2, [r6, #4]
   1d870:	cmp	r4, r2
   1d874:	movlt	r3, sl
   1d878:	blt	1d8e4 <__assert_fail@plt+0xc758>
   1d87c:	add	r7, r6, #8
   1d880:	cmp	r5, r7
   1d884:	str	r2, [sp, #44]	; 0x2c
   1d888:	beq	1d9b4 <__assert_fail@plt+0xc828>
   1d88c:	mov	r3, #8
   1d890:	sub	r2, r4, r2
   1d894:	mov	r0, r5
   1d898:	str	r3, [sp]
   1d89c:	add	r2, r2, #1
   1d8a0:	mvn	r3, #-2147483648	; 0x80000000
   1d8a4:	add	r1, sp, #44	; 0x2c
   1d8a8:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d8ac:	mov	r5, r0
   1d8b0:	str	r0, [r6]
   1d8b4:	ldr	r0, [r6, #4]
   1d8b8:	ldr	r2, [sp, #44]	; 0x2c
   1d8bc:	mov	r1, #0
   1d8c0:	sub	r2, r2, r0
   1d8c4:	add	r0, r5, r0, lsl #3
   1d8c8:	lsl	r2, r2, #3
   1d8cc:	bl	110b4 <memset@plt>
   1d8d0:	ldr	r3, [sp, #48]	; 0x30
   1d8d4:	ldr	r7, [sp, #88]	; 0x58
   1d8d8:	ldr	r8, [sp, #92]	; 0x5c
   1d8dc:	ldr	r2, [sp, #44]	; 0x2c
   1d8e0:	str	r2, [r6, #4]
   1d8e4:	add	r2, r5, r4, lsl #3
   1d8e8:	mov	r1, r2
   1d8ec:	str	r2, [sp, #32]
   1d8f0:	ldr	r2, [sp, #52]	; 0x34
   1d8f4:	ldr	r6, [r1, #4]
   1d8f8:	ldr	sl, [r5, r4, lsl #3]
   1d8fc:	orr	r2, r2, #1
   1d900:	str	r3, [sp]
   1d904:	add	r3, sp, #56	; 0x38
   1d908:	str	r2, [sp, #36]	; 0x24
   1d90c:	str	r2, [sp, #4]
   1d910:	str	r3, [sp, #8]
   1d914:	mov	r0, r6
   1d918:	str	r8, [sp, #16]
   1d91c:	str	r7, [sp, #12]
   1d920:	mov	r1, sl
   1d924:	mvn	r3, #0
   1d928:	mov	r2, fp
   1d92c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d930:	cmp	sl, r0
   1d934:	bhi	1d9a0 <__assert_fail@plt+0xc814>
   1d938:	ldr	r3, [pc, #176]	; 1d9f0 <__assert_fail@plt+0xc864>
   1d93c:	add	r7, r0, #1
   1d940:	cmp	r6, r3
   1d944:	str	r7, [r5, r4, lsl #3]
   1d948:	beq	1d954 <__assert_fail@plt+0xc7c8>
   1d94c:	mov	r0, r6
   1d950:	bl	1a508 <__assert_fail@plt+0x937c>
   1d954:	mov	r0, r7
   1d958:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1d95c:	ldr	r3, [sp, #32]
   1d960:	ldr	lr, [sp, #92]	; 0x5c
   1d964:	ldr	ip, [sp, #88]	; 0x58
   1d968:	ldr	r4, [sp, #36]	; 0x24
   1d96c:	mov	r2, fp
   1d970:	mov	r1, r7
   1d974:	str	r0, [r3, #4]
   1d978:	add	r3, sp, #56	; 0x38
   1d97c:	str	r3, [sp, #8]
   1d980:	ldr	r3, [sp, #48]	; 0x30
   1d984:	str	r4, [sp, #4]
   1d988:	str	r3, [sp]
   1d98c:	str	lr, [sp, #16]
   1d990:	str	ip, [sp, #12]
   1d994:	mvn	r3, #0
   1d998:	mov	r6, r0
   1d99c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1d9a0:	ldr	r3, [sp, #28]
   1d9a4:	mov	r0, r6
   1d9a8:	str	r3, [r9]
   1d9ac:	add	sp, sp, #100	; 0x64
   1d9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9b4:	mov	r3, #8
   1d9b8:	sub	r2, r4, r2
   1d9bc:	str	r3, [sp]
   1d9c0:	add	r1, sp, #44	; 0x2c
   1d9c4:	add	r2, r2, #1
   1d9c8:	mvn	r3, #-2147483648	; 0x80000000
   1d9cc:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1d9d0:	mov	r5, r0
   1d9d4:	ldm	r7, {r0, r1}
   1d9d8:	str	r5, [r6]
   1d9dc:	stm	r5, {r0, r1}
   1d9e0:	b	1d8b4 <__assert_fail@plt+0xc728>
   1d9e4:	bl	11168 <abort@plt>
   1d9e8:			; <UNDEFINED> instruction: 0x000331bc
   1d9ec:	andeq	r3, r3, r4, lsr #2
   1d9f0:	andeq	r3, r3, ip, ror #3
   1d9f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9f8:	mov	r7, r1
   1d9fc:	ldr	lr, [pc, #492]	; 1dbf0 <__assert_fail@plt+0xca64>
   1da00:	mov	r8, r2
   1da04:	mov	r4, r0
   1da08:	mov	fp, r3
   1da0c:	ldm	lr!, {r0, r1, r2, r3}
   1da10:	sub	sp, sp, #100	; 0x64
   1da14:	add	ip, sp, #48	; 0x30
   1da18:	mov	sl, #10
   1da1c:	stmia	ip!, {r0, r1, r2, r3}
   1da20:	cmp	r8, #0
   1da24:	cmpne	r7, #0
   1da28:	ldm	lr!, {r0, r1, r2, r3}
   1da2c:	str	sl, [sp, #48]	; 0x30
   1da30:	stmia	ip!, {r0, r1, r2, r3}
   1da34:	ldm	lr, {r0, r1, r2, r3}
   1da38:	stm	ip, {r0, r1, r2, r3}
   1da3c:	beq	1dbec <__assert_fail@plt+0xca60>
   1da40:	str	r7, [sp, #88]	; 0x58
   1da44:	str	r8, [sp, #92]	; 0x5c
   1da48:	bl	11090 <__errno_location@plt>
   1da4c:	ldr	r6, [pc, #416]	; 1dbf4 <__assert_fail@plt+0xca68>
   1da50:	cmn	r4, #-2147483647	; 0x80000001
   1da54:	ldr	r5, [r6]
   1da58:	mov	r9, r0
   1da5c:	movne	r0, #0
   1da60:	moveq	r0, #1
   1da64:	ldr	r3, [r9]
   1da68:	orrs	r0, r0, r4, lsr #31
   1da6c:	str	r3, [sp, #28]
   1da70:	bne	1dbec <__assert_fail@plt+0xca60>
   1da74:	ldr	r2, [r6, #4]
   1da78:	cmp	r4, r2
   1da7c:	movlt	r3, sl
   1da80:	blt	1daec <__assert_fail@plt+0xc960>
   1da84:	add	r7, r6, #8
   1da88:	cmp	r5, r7
   1da8c:	str	r2, [sp, #44]	; 0x2c
   1da90:	beq	1dbbc <__assert_fail@plt+0xca30>
   1da94:	mov	r3, #8
   1da98:	sub	r2, r4, r2
   1da9c:	mov	r0, r5
   1daa0:	str	r3, [sp]
   1daa4:	add	r2, r2, #1
   1daa8:	mvn	r3, #-2147483648	; 0x80000000
   1daac:	add	r1, sp, #44	; 0x2c
   1dab0:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1dab4:	mov	r5, r0
   1dab8:	str	r0, [r6]
   1dabc:	ldr	r0, [r6, #4]
   1dac0:	ldr	r2, [sp, #44]	; 0x2c
   1dac4:	mov	r1, #0
   1dac8:	sub	r2, r2, r0
   1dacc:	add	r0, r5, r0, lsl #3
   1dad0:	lsl	r2, r2, #3
   1dad4:	bl	110b4 <memset@plt>
   1dad8:	ldr	r3, [sp, #48]	; 0x30
   1dadc:	ldr	r7, [sp, #88]	; 0x58
   1dae0:	ldr	r8, [sp, #92]	; 0x5c
   1dae4:	ldr	r2, [sp, #44]	; 0x2c
   1dae8:	str	r2, [r6, #4]
   1daec:	add	r2, r5, r4, lsl #3
   1daf0:	mov	r1, r2
   1daf4:	str	r2, [sp, #32]
   1daf8:	ldr	r2, [sp, #52]	; 0x34
   1dafc:	ldr	r6, [r1, #4]
   1db00:	ldr	sl, [r5, r4, lsl #3]
   1db04:	orr	r2, r2, #1
   1db08:	str	r3, [sp]
   1db0c:	add	r3, sp, #56	; 0x38
   1db10:	str	r2, [sp, #36]	; 0x24
   1db14:	str	r2, [sp, #4]
   1db18:	str	r3, [sp, #8]
   1db1c:	mov	r0, r6
   1db20:	str	r8, [sp, #16]
   1db24:	str	r7, [sp, #12]
   1db28:	mov	r1, sl
   1db2c:	ldr	r3, [sp, #136]	; 0x88
   1db30:	mov	r2, fp
   1db34:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1db38:	cmp	sl, r0
   1db3c:	bhi	1dba8 <__assert_fail@plt+0xca1c>
   1db40:	ldr	r3, [pc, #176]	; 1dbf8 <__assert_fail@plt+0xca6c>
   1db44:	add	r7, r0, #1
   1db48:	cmp	r6, r3
   1db4c:	str	r7, [r5, r4, lsl #3]
   1db50:	beq	1db5c <__assert_fail@plt+0xc9d0>
   1db54:	mov	r0, r6
   1db58:	bl	1a508 <__assert_fail@plt+0x937c>
   1db5c:	mov	r0, r7
   1db60:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1db64:	ldr	r3, [sp, #32]
   1db68:	ldr	lr, [sp, #92]	; 0x5c
   1db6c:	ldr	ip, [sp, #88]	; 0x58
   1db70:	ldr	r4, [sp, #36]	; 0x24
   1db74:	mov	r2, fp
   1db78:	mov	r1, r7
   1db7c:	str	r0, [r3, #4]
   1db80:	add	r3, sp, #56	; 0x38
   1db84:	str	r3, [sp, #8]
   1db88:	ldr	r3, [sp, #48]	; 0x30
   1db8c:	str	r4, [sp, #4]
   1db90:	str	r3, [sp]
   1db94:	str	lr, [sp, #16]
   1db98:	str	ip, [sp, #12]
   1db9c:	ldr	r3, [sp, #136]	; 0x88
   1dba0:	mov	r6, r0
   1dba4:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1dba8:	ldr	r3, [sp, #28]
   1dbac:	mov	r0, r6
   1dbb0:	str	r3, [r9]
   1dbb4:	add	sp, sp, #100	; 0x64
   1dbb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbbc:	mov	r3, #8
   1dbc0:	sub	r2, r4, r2
   1dbc4:	str	r3, [sp]
   1dbc8:	add	r1, sp, #44	; 0x2c
   1dbcc:	add	r2, r2, #1
   1dbd0:	mvn	r3, #-2147483648	; 0x80000000
   1dbd4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1dbd8:	mov	r5, r0
   1dbdc:	ldm	r7, {r0, r1}
   1dbe0:	str	r5, [r6]
   1dbe4:	stm	r5, {r0, r1}
   1dbe8:	b	1dabc <__assert_fail@plt+0xc930>
   1dbec:	bl	11168 <abort@plt>
   1dbf0:			; <UNDEFINED> instruction: 0x000331bc
   1dbf4:	andeq	r3, r3, r4, lsr #2
   1dbf8:	andeq	r3, r3, ip, ror #3
   1dbfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc00:	mov	r5, r0
   1dc04:	ldr	lr, [pc, #452]	; 1ddd0 <__assert_fail@plt+0xcc44>
   1dc08:	mov	r6, r1
   1dc0c:	mov	sl, r2
   1dc10:	ldm	lr!, {r0, r1, r2, r3}
   1dc14:	sub	sp, sp, #92	; 0x5c
   1dc18:	add	ip, sp, #40	; 0x28
   1dc1c:	cmp	r6, #0
   1dc20:	cmpne	r5, #0
   1dc24:	stmia	ip!, {r0, r1, r2, r3}
   1dc28:	mov	r9, #10
   1dc2c:	ldm	lr!, {r0, r1, r2, r3}
   1dc30:	moveq	fp, #1
   1dc34:	movne	fp, #0
   1dc38:	str	r9, [sp, #40]	; 0x28
   1dc3c:	stmia	ip!, {r0, r1, r2, r3}
   1dc40:	ldm	lr, {r0, r1, r2, r3}
   1dc44:	stm	ip, {r0, r1, r2, r3}
   1dc48:	beq	1ddcc <__assert_fail@plt+0xcc40>
   1dc4c:	str	r5, [sp, #80]	; 0x50
   1dc50:	str	r6, [sp, #84]	; 0x54
   1dc54:	bl	11090 <__errno_location@plt>
   1dc58:	ldr	r7, [pc, #372]	; 1ddd4 <__assert_fail@plt+0xcc48>
   1dc5c:	ldr	r2, [r7, #4]
   1dc60:	ldr	r4, [r7]
   1dc64:	cmp	r2, #0
   1dc68:	ldr	r3, [r0]
   1dc6c:	mov	r8, r0
   1dc70:	str	r3, [sp, #24]
   1dc74:	movgt	r3, r9
   1dc78:	bgt	1dce0 <__assert_fail@plt+0xcb54>
   1dc7c:	add	r5, r7, #8
   1dc80:	cmp	r4, r5
   1dc84:	str	r2, [sp, #36]	; 0x24
   1dc88:	beq	1dd9c <__assert_fail@plt+0xcc10>
   1dc8c:	mov	r3, #8
   1dc90:	mov	r0, r4
   1dc94:	str	r3, [sp]
   1dc98:	rsb	r2, r2, #1
   1dc9c:	mvn	r3, #-2147483648	; 0x80000000
   1dca0:	add	r1, sp, #36	; 0x24
   1dca4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1dca8:	mov	r4, r0
   1dcac:	str	r0, [r7]
   1dcb0:	ldr	r0, [r7, #4]
   1dcb4:	ldr	r2, [sp, #36]	; 0x24
   1dcb8:	mov	r1, #0
   1dcbc:	sub	r2, r2, r0
   1dcc0:	add	r0, r4, r0, lsl #3
   1dcc4:	lsl	r2, r2, #3
   1dcc8:	bl	110b4 <memset@plt>
   1dccc:	ldr	r3, [sp, #40]	; 0x28
   1dcd0:	ldr	r5, [sp, #80]	; 0x50
   1dcd4:	ldr	r6, [sp, #84]	; 0x54
   1dcd8:	ldr	r2, [sp, #36]	; 0x24
   1dcdc:	str	r2, [r7, #4]
   1dce0:	ldr	r2, [sp, #44]	; 0x2c
   1dce4:	ldr	r9, [r4]
   1dce8:	ldr	r7, [r4, #4]
   1dcec:	orr	r2, r2, #1
   1dcf0:	add	fp, sp, #48	; 0x30
   1dcf4:	str	r2, [sp, #28]
   1dcf8:	str	r2, [sp, #4]
   1dcfc:	str	r3, [sp]
   1dd00:	str	r6, [sp, #16]
   1dd04:	str	r5, [sp, #12]
   1dd08:	mov	r1, r9
   1dd0c:	mov	r0, r7
   1dd10:	str	fp, [sp, #8]
   1dd14:	mvn	r3, #0
   1dd18:	mov	r2, sl
   1dd1c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1dd20:	cmp	r9, r0
   1dd24:	bhi	1dd88 <__assert_fail@plt+0xcbfc>
   1dd28:	ldr	r3, [pc, #168]	; 1ddd8 <__assert_fail@plt+0xcc4c>
   1dd2c:	add	r5, r0, #1
   1dd30:	cmp	r7, r3
   1dd34:	str	r5, [r4]
   1dd38:	beq	1dd44 <__assert_fail@plt+0xcbb8>
   1dd3c:	mov	r0, r7
   1dd40:	bl	1a508 <__assert_fail@plt+0x937c>
   1dd44:	mov	r0, r5
   1dd48:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1dd4c:	ldr	lr, [sp, #84]	; 0x54
   1dd50:	ldr	r3, [sp, #40]	; 0x28
   1dd54:	ldr	ip, [sp, #80]	; 0x50
   1dd58:	mov	r2, sl
   1dd5c:	mov	r1, r5
   1dd60:	str	r0, [r4, #4]
   1dd64:	ldr	r4, [sp, #28]
   1dd68:	str	r3, [sp]
   1dd6c:	str	fp, [sp, #8]
   1dd70:	str	r4, [sp, #4]
   1dd74:	str	lr, [sp, #16]
   1dd78:	str	ip, [sp, #12]
   1dd7c:	mvn	r3, #0
   1dd80:	mov	r7, r0
   1dd84:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1dd88:	ldr	r3, [sp, #24]
   1dd8c:	mov	r0, r7
   1dd90:	str	r3, [r8]
   1dd94:	add	sp, sp, #92	; 0x5c
   1dd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd9c:	mov	r3, #8
   1dda0:	str	r3, [sp]
   1dda4:	add	r1, sp, #36	; 0x24
   1dda8:	rsb	r2, r2, #1
   1ddac:	mov	r0, fp
   1ddb0:	mvn	r3, #-2147483648	; 0x80000000
   1ddb4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1ddb8:	mov	r4, r0
   1ddbc:	ldm	r5, {r0, r1}
   1ddc0:	str	r4, [r7]
   1ddc4:	stm	r4, {r0, r1}
   1ddc8:	b	1dcb0 <__assert_fail@plt+0xcb24>
   1ddcc:	bl	11168 <abort@plt>
   1ddd0:			; <UNDEFINED> instruction: 0x000331bc
   1ddd4:	andeq	r3, r3, r4, lsr #2
   1ddd8:	andeq	r3, r3, ip, ror #3
   1dddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dde0:	mov	r5, r0
   1dde4:	ldr	lr, [pc, #464]	; 1dfbc <__assert_fail@plt+0xce30>
   1dde8:	mov	r6, r1
   1ddec:	mov	sl, r2
   1ddf0:	mov	fp, r3
   1ddf4:	ldm	lr!, {r0, r1, r2, r3}
   1ddf8:	sub	sp, sp, #92	; 0x5c
   1ddfc:	add	ip, sp, #40	; 0x28
   1de00:	cmp	r6, #0
   1de04:	cmpne	r5, #0
   1de08:	stmia	ip!, {r0, r1, r2, r3}
   1de0c:	moveq	r4, #1
   1de10:	ldm	lr!, {r0, r1, r2, r3}
   1de14:	movne	r4, #0
   1de18:	mov	r9, #10
   1de1c:	str	r4, [sp, #28]
   1de20:	stmia	ip!, {r0, r1, r2, r3}
   1de24:	ldm	lr, {r0, r1, r2, r3}
   1de28:	str	r9, [sp, #40]	; 0x28
   1de2c:	stm	ip, {r0, r1, r2, r3}
   1de30:	beq	1dfb8 <__assert_fail@plt+0xce2c>
   1de34:	str	r5, [sp, #80]	; 0x50
   1de38:	str	r6, [sp, #84]	; 0x54
   1de3c:	bl	11090 <__errno_location@plt>
   1de40:	ldr	r7, [pc, #376]	; 1dfc0 <__assert_fail@plt+0xce34>
   1de44:	ldr	r2, [r7, #4]
   1de48:	ldr	r4, [r7]
   1de4c:	cmp	r2, #0
   1de50:	ldr	r3, [r0]
   1de54:	mov	r8, r0
   1de58:	str	r3, [sp, #24]
   1de5c:	movgt	r3, r9
   1de60:	bgt	1dec8 <__assert_fail@plt+0xcd3c>
   1de64:	add	r5, r7, #8
   1de68:	cmp	r4, r5
   1de6c:	str	r2, [sp, #36]	; 0x24
   1de70:	beq	1df88 <__assert_fail@plt+0xcdfc>
   1de74:	mov	r3, #8
   1de78:	mov	r0, r4
   1de7c:	str	r3, [sp]
   1de80:	rsb	r2, r2, #1
   1de84:	mvn	r3, #-2147483648	; 0x80000000
   1de88:	add	r1, sp, #36	; 0x24
   1de8c:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1de90:	mov	r4, r0
   1de94:	str	r0, [r7]
   1de98:	ldr	r0, [r7, #4]
   1de9c:	ldr	r2, [sp, #36]	; 0x24
   1dea0:	mov	r1, #0
   1dea4:	sub	r2, r2, r0
   1dea8:	add	r0, r4, r0, lsl #3
   1deac:	lsl	r2, r2, #3
   1deb0:	bl	110b4 <memset@plt>
   1deb4:	ldr	r3, [sp, #40]	; 0x28
   1deb8:	ldr	r5, [sp, #80]	; 0x50
   1debc:	ldr	r6, [sp, #84]	; 0x54
   1dec0:	ldr	r2, [sp, #36]	; 0x24
   1dec4:	str	r2, [r7, #4]
   1dec8:	ldr	r2, [sp, #44]	; 0x2c
   1decc:	ldr	r9, [r4]
   1ded0:	ldr	r7, [r4, #4]
   1ded4:	orr	r2, r2, #1
   1ded8:	str	r3, [sp]
   1dedc:	add	r3, sp, #48	; 0x30
   1dee0:	str	r2, [sp, #28]
   1dee4:	str	r2, [sp, #4]
   1dee8:	str	r3, [sp, #8]
   1deec:	str	r6, [sp, #16]
   1def0:	str	r5, [sp, #12]
   1def4:	mov	r1, r9
   1def8:	mov	r0, r7
   1defc:	mov	r3, fp
   1df00:	mov	r2, sl
   1df04:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1df08:	cmp	r9, r0
   1df0c:	bhi	1df74 <__assert_fail@plt+0xcde8>
   1df10:	ldr	r3, [pc, #172]	; 1dfc4 <__assert_fail@plt+0xce38>
   1df14:	add	r5, r0, #1
   1df18:	cmp	r7, r3
   1df1c:	str	r5, [r4]
   1df20:	beq	1df2c <__assert_fail@plt+0xcda0>
   1df24:	mov	r0, r7
   1df28:	bl	1a508 <__assert_fail@plt+0x937c>
   1df2c:	mov	r0, r5
   1df30:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1df34:	add	lr, sp, #48	; 0x30
   1df38:	ldr	ip, [sp, #84]	; 0x54
   1df3c:	mov	r1, r5
   1df40:	ldr	r5, [sp, #28]
   1df44:	mov	r3, fp
   1df48:	mov	r2, sl
   1df4c:	str	r0, [r4, #4]
   1df50:	ldr	r4, [sp, #80]	; 0x50
   1df54:	str	lr, [sp, #8]
   1df58:	ldr	lr, [sp, #40]	; 0x28
   1df5c:	str	r5, [sp, #4]
   1df60:	str	ip, [sp, #16]
   1df64:	str	r4, [sp, #12]
   1df68:	str	lr, [sp]
   1df6c:	mov	r7, r0
   1df70:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1df74:	ldr	r3, [sp, #24]
   1df78:	mov	r0, r7
   1df7c:	str	r3, [r8]
   1df80:	add	sp, sp, #92	; 0x5c
   1df84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df88:	mov	r3, #8
   1df8c:	str	r3, [sp]
   1df90:	add	r1, sp, #36	; 0x24
   1df94:	rsb	r2, r2, #1
   1df98:	ldr	r0, [sp, #28]
   1df9c:	mvn	r3, #-2147483648	; 0x80000000
   1dfa0:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1dfa4:	mov	r4, r0
   1dfa8:	ldm	r5, {r0, r1}
   1dfac:	str	r4, [r7]
   1dfb0:	stm	r4, {r0, r1}
   1dfb4:	b	1de98 <__assert_fail@plt+0xcd0c>
   1dfb8:	bl	11168 <abort@plt>
   1dfbc:			; <UNDEFINED> instruction: 0x000331bc
   1dfc0:	andeq	r3, r3, r4, lsr #2
   1dfc4:	andeq	r3, r3, ip, ror #3
   1dfc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfcc:	sub	sp, sp, #52	; 0x34
   1dfd0:	mov	r5, r0
   1dfd4:	mov	sl, r1
   1dfd8:	mov	fp, r2
   1dfdc:	bl	11090 <__errno_location@plt>
   1dfe0:	ldr	r4, [pc, #404]	; 1e17c <__assert_fail@plt+0xcff0>
   1dfe4:	cmn	r5, #-2147483647	; 0x80000001
   1dfe8:	ldr	r6, [r4]
   1dfec:	mov	r8, r0
   1dff0:	movne	r0, #0
   1dff4:	moveq	r0, #1
   1dff8:	ldr	r3, [r8]
   1dffc:	orrs	r0, r0, r5, lsr #31
   1e000:	str	r3, [sp, #28]
   1e004:	bne	1e178 <__assert_fail@plt+0xcfec>
   1e008:	ldr	r2, [r4, #4]
   1e00c:	cmp	r5, r2
   1e010:	blt	1e070 <__assert_fail@plt+0xcee4>
   1e014:	add	r7, r4, #8
   1e018:	cmp	r6, r7
   1e01c:	str	r2, [sp, #44]	; 0x2c
   1e020:	beq	1e148 <__assert_fail@plt+0xcfbc>
   1e024:	mov	r3, #8
   1e028:	sub	r2, r5, r2
   1e02c:	mov	r0, r6
   1e030:	str	r3, [sp]
   1e034:	add	r2, r2, #1
   1e038:	mvn	r3, #-2147483648	; 0x80000000
   1e03c:	add	r1, sp, #44	; 0x2c
   1e040:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e044:	mov	r6, r0
   1e048:	str	r0, [r4]
   1e04c:	ldr	r0, [r4, #4]
   1e050:	ldr	r2, [sp, #44]	; 0x2c
   1e054:	mov	r1, #0
   1e058:	sub	r2, r2, r0
   1e05c:	add	r0, r6, r0, lsl #3
   1e060:	lsl	r2, r2, #3
   1e064:	bl	110b4 <memset@plt>
   1e068:	ldr	r3, [sp, #44]	; 0x2c
   1e06c:	str	r3, [r4, #4]
   1e070:	ldr	r2, [r4, #56]	; 0x38
   1e074:	add	r3, r6, r5, lsl #3
   1e078:	ldr	r1, [r4, #20]
   1e07c:	ldr	r7, [r3, #4]
   1e080:	ldr	r9, [r6, r5, lsl #3]
   1e084:	ldr	ip, [r4, #60]	; 0x3c
   1e088:	str	r3, [sp, #32]
   1e08c:	ldr	r3, [r4, #16]
   1e090:	str	r2, [sp, #12]
   1e094:	ldr	r2, [pc, #228]	; 1e180 <__assert_fail@plt+0xcff4>
   1e098:	orr	r1, r1, #1
   1e09c:	str	r1, [sp, #36]	; 0x24
   1e0a0:	str	r1, [sp, #4]
   1e0a4:	str	r2, [sp, #8]
   1e0a8:	str	r3, [sp]
   1e0ac:	mov	r0, r7
   1e0b0:	mov	r1, r9
   1e0b4:	str	ip, [sp, #16]
   1e0b8:	mov	r3, fp
   1e0bc:	mov	r2, sl
   1e0c0:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e0c4:	cmp	r9, r0
   1e0c8:	bhi	1e134 <__assert_fail@plt+0xcfa8>
   1e0cc:	ldr	r3, [pc, #176]	; 1e184 <__assert_fail@plt+0xcff8>
   1e0d0:	add	r9, r0, #1
   1e0d4:	cmp	r7, r3
   1e0d8:	str	r9, [r6, r5, lsl #3]
   1e0dc:	beq	1e0e8 <__assert_fail@plt+0xcf5c>
   1e0e0:	mov	r0, r7
   1e0e4:	bl	1a508 <__assert_fail@plt+0x937c>
   1e0e8:	mov	r0, r9
   1e0ec:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1e0f0:	ldr	ip, [sp, #32]
   1e0f4:	ldr	lr, [r4, #60]	; 0x3c
   1e0f8:	ldr	r5, [r4, #56]	; 0x38
   1e0fc:	mov	r3, fp
   1e100:	mov	r2, sl
   1e104:	mov	r1, r9
   1e108:	str	r0, [ip, #4]
   1e10c:	ldr	ip, [r4, #16]
   1e110:	ldr	r4, [pc, #104]	; 1e180 <__assert_fail@plt+0xcff4>
   1e114:	str	lr, [sp, #16]
   1e118:	str	r4, [sp, #8]
   1e11c:	ldr	r4, [sp, #36]	; 0x24
   1e120:	str	r5, [sp, #12]
   1e124:	str	r4, [sp, #4]
   1e128:	str	ip, [sp]
   1e12c:	mov	r7, r0
   1e130:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e134:	ldr	r3, [sp, #28]
   1e138:	mov	r0, r7
   1e13c:	str	r3, [r8]
   1e140:	add	sp, sp, #52	; 0x34
   1e144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e148:	mov	r3, #8
   1e14c:	sub	r2, r5, r2
   1e150:	str	r3, [sp]
   1e154:	add	r1, sp, #44	; 0x2c
   1e158:	add	r2, r2, #1
   1e15c:	mvn	r3, #-2147483648	; 0x80000000
   1e160:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e164:	mov	r6, r0
   1e168:	ldm	r7, {r0, r1}
   1e16c:	str	r6, [r4]
   1e170:	stm	r6, {r0, r1}
   1e174:	b	1e04c <__assert_fail@plt+0xcec0>
   1e178:	bl	11168 <abort@plt>
   1e17c:	andeq	r3, r3, r4, lsr #2
   1e180:	andeq	r3, r3, ip, lsr r1
   1e184:	andeq	r3, r3, ip, ror #3
   1e188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e18c:	sub	sp, sp, #44	; 0x2c
   1e190:	mov	r9, r0
   1e194:	mov	sl, r1
   1e198:	bl	11090 <__errno_location@plt>
   1e19c:	ldr	r4, [pc, #360]	; 1e30c <__assert_fail@plt+0xd180>
   1e1a0:	ldr	r2, [r4, #4]
   1e1a4:	ldr	r5, [r4]
   1e1a8:	cmp	r2, #0
   1e1ac:	ldr	r3, [r0]
   1e1b0:	mov	r7, r0
   1e1b4:	str	r3, [sp, #24]
   1e1b8:	bgt	1e214 <__assert_fail@plt+0xd088>
   1e1bc:	add	r6, r4, #8
   1e1c0:	cmp	r5, r6
   1e1c4:	str	r2, [sp, #36]	; 0x24
   1e1c8:	beq	1e2dc <__assert_fail@plt+0xd150>
   1e1cc:	mov	r3, #8
   1e1d0:	mov	r0, r5
   1e1d4:	str	r3, [sp]
   1e1d8:	rsb	r2, r2, #1
   1e1dc:	mvn	r3, #-2147483648	; 0x80000000
   1e1e0:	add	r1, sp, #36	; 0x24
   1e1e4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e1e8:	mov	r5, r0
   1e1ec:	str	r0, [r4]
   1e1f0:	ldr	r0, [r4, #4]
   1e1f4:	ldr	r2, [sp, #36]	; 0x24
   1e1f8:	mov	r1, #0
   1e1fc:	sub	r2, r2, r0
   1e200:	add	r0, r5, r0, lsl #3
   1e204:	lsl	r2, r2, #3
   1e208:	bl	110b4 <memset@plt>
   1e20c:	ldr	r3, [sp, #36]	; 0x24
   1e210:	str	r3, [r4, #4]
   1e214:	ldr	r1, [r4, #20]
   1e218:	ldr	r8, [r5]
   1e21c:	ldr	r6, [r5, #4]
   1e220:	ldr	r2, [r4, #56]	; 0x38
   1e224:	ldr	r3, [r4, #16]
   1e228:	ldr	ip, [r4, #60]	; 0x3c
   1e22c:	ldr	fp, [pc, #220]	; 1e310 <__assert_fail@plt+0xd184>
   1e230:	orr	r1, r1, #1
   1e234:	str	r1, [sp, #28]
   1e238:	str	r1, [sp, #4]
   1e23c:	str	r2, [sp, #12]
   1e240:	str	r3, [sp]
   1e244:	mov	r1, r8
   1e248:	mov	r0, r6
   1e24c:	str	ip, [sp, #16]
   1e250:	str	fp, [sp, #8]
   1e254:	mov	r3, sl
   1e258:	mov	r2, r9
   1e25c:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e260:	cmp	r8, r0
   1e264:	bhi	1e2c8 <__assert_fail@plt+0xd13c>
   1e268:	ldr	r3, [pc, #164]	; 1e314 <__assert_fail@plt+0xd188>
   1e26c:	add	r8, r0, #1
   1e270:	cmp	r6, r3
   1e274:	str	r8, [r5]
   1e278:	beq	1e284 <__assert_fail@plt+0xd0f8>
   1e27c:	mov	r0, r6
   1e280:	bl	1a508 <__assert_fail@plt+0x937c>
   1e284:	mov	r0, r8
   1e288:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1e28c:	ldr	lr, [r4, #60]	; 0x3c
   1e290:	ldr	ip, [r4, #16]
   1e294:	mov	r3, sl
   1e298:	mov	r2, r9
   1e29c:	mov	r1, r8
   1e2a0:	str	r0, [r5, #4]
   1e2a4:	ldr	r5, [r4, #56]	; 0x38
   1e2a8:	ldr	r4, [sp, #28]
   1e2ac:	str	fp, [sp, #8]
   1e2b0:	str	r4, [sp, #4]
   1e2b4:	str	lr, [sp, #16]
   1e2b8:	str	r5, [sp, #12]
   1e2bc:	str	ip, [sp]
   1e2c0:	mov	r6, r0
   1e2c4:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e2c8:	ldr	r3, [sp, #24]
   1e2cc:	mov	r0, r6
   1e2d0:	str	r3, [r7]
   1e2d4:	add	sp, sp, #44	; 0x2c
   1e2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2dc:	mov	r3, #8
   1e2e0:	str	r3, [sp]
   1e2e4:	add	r1, sp, #36	; 0x24
   1e2e8:	rsb	r2, r2, #1
   1e2ec:	mvn	r3, #-2147483648	; 0x80000000
   1e2f0:	mov	r0, #0
   1e2f4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e2f8:	mov	r5, r0
   1e2fc:	ldm	r6, {r0, r1}
   1e300:	str	r5, [r4]
   1e304:	stm	r5, {r0, r1}
   1e308:	b	1e1f0 <__assert_fail@plt+0xd064>
   1e30c:	andeq	r3, r3, r4, lsr #2
   1e310:	andeq	r3, r3, ip, lsr r1
   1e314:	andeq	r3, r3, ip, ror #3
   1e318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e31c:	sub	sp, sp, #44	; 0x2c
   1e320:	mov	r5, r0
   1e324:	mov	sl, r1
   1e328:	bl	11090 <__errno_location@plt>
   1e32c:	ldr	r4, [pc, #396]	; 1e4c0 <__assert_fail@plt+0xd334>
   1e330:	cmn	r5, #-2147483647	; 0x80000001
   1e334:	ldr	r6, [r4]
   1e338:	mov	r8, r0
   1e33c:	movne	r0, #0
   1e340:	moveq	r0, #1
   1e344:	ldr	r3, [r8]
   1e348:	orrs	r0, r0, r5, lsr #31
   1e34c:	str	r3, [sp, #24]
   1e350:	bne	1e4bc <__assert_fail@plt+0xd330>
   1e354:	ldr	r2, [r4, #4]
   1e358:	cmp	r5, r2
   1e35c:	blt	1e3bc <__assert_fail@plt+0xd230>
   1e360:	add	r7, r4, #8
   1e364:	cmp	r6, r7
   1e368:	str	r2, [sp, #36]	; 0x24
   1e36c:	beq	1e48c <__assert_fail@plt+0xd300>
   1e370:	mov	r3, #8
   1e374:	sub	r2, r5, r2
   1e378:	mov	r0, r6
   1e37c:	str	r3, [sp]
   1e380:	add	r2, r2, #1
   1e384:	mvn	r3, #-2147483648	; 0x80000000
   1e388:	add	r1, sp, #36	; 0x24
   1e38c:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e390:	mov	r6, r0
   1e394:	str	r0, [r4]
   1e398:	ldr	r0, [r4, #4]
   1e39c:	ldr	r2, [sp, #36]	; 0x24
   1e3a0:	mov	r1, #0
   1e3a4:	sub	r2, r2, r0
   1e3a8:	add	r0, r6, r0, lsl #3
   1e3ac:	lsl	r2, r2, #3
   1e3b0:	bl	110b4 <memset@plt>
   1e3b4:	ldr	r3, [sp, #36]	; 0x24
   1e3b8:	str	r3, [r4, #4]
   1e3bc:	ldr	r2, [r4, #56]	; 0x38
   1e3c0:	add	fp, r6, r5, lsl #3
   1e3c4:	ldr	r1, [r4, #20]
   1e3c8:	ldr	r9, [r6, r5, lsl #3]
   1e3cc:	ldr	r7, [fp, #4]
   1e3d0:	ldr	r3, [r4, #16]
   1e3d4:	ldr	ip, [r4, #60]	; 0x3c
   1e3d8:	str	r2, [sp, #12]
   1e3dc:	ldr	r2, [pc, #224]	; 1e4c4 <__assert_fail@plt+0xd338>
   1e3e0:	orr	r1, r1, #1
   1e3e4:	str	r1, [sp, #28]
   1e3e8:	str	r1, [sp, #4]
   1e3ec:	str	r2, [sp, #8]
   1e3f0:	str	r3, [sp]
   1e3f4:	mov	r0, r7
   1e3f8:	mov	r1, r9
   1e3fc:	str	ip, [sp, #16]
   1e400:	mvn	r3, #0
   1e404:	mov	r2, sl
   1e408:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e40c:	cmp	r9, r0
   1e410:	bhi	1e478 <__assert_fail@plt+0xd2ec>
   1e414:	ldr	r3, [pc, #172]	; 1e4c8 <__assert_fail@plt+0xd33c>
   1e418:	add	r9, r0, #1
   1e41c:	cmp	r7, r3
   1e420:	str	r9, [r6, r5, lsl #3]
   1e424:	beq	1e430 <__assert_fail@plt+0xd2a4>
   1e428:	mov	r0, r7
   1e42c:	bl	1a508 <__assert_fail@plt+0x937c>
   1e430:	mov	r0, r9
   1e434:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1e438:	ldr	ip, [r4, #60]	; 0x3c
   1e43c:	ldr	r3, [r4, #16]
   1e440:	ldr	lr, [r4, #56]	; 0x38
   1e444:	ldr	r4, [pc, #120]	; 1e4c4 <__assert_fail@plt+0xd338>
   1e448:	mov	r2, sl
   1e44c:	mov	r1, r9
   1e450:	str	r0, [fp, #4]
   1e454:	str	r4, [sp, #8]
   1e458:	ldr	r4, [sp, #28]
   1e45c:	str	r3, [sp]
   1e460:	str	r4, [sp, #4]
   1e464:	str	ip, [sp, #16]
   1e468:	str	lr, [sp, #12]
   1e46c:	mvn	r3, #0
   1e470:	mov	r7, r0
   1e474:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e478:	ldr	r3, [sp, #24]
   1e47c:	mov	r0, r7
   1e480:	str	r3, [r8]
   1e484:	add	sp, sp, #44	; 0x2c
   1e488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e48c:	mov	r3, #8
   1e490:	sub	r2, r5, r2
   1e494:	str	r3, [sp]
   1e498:	add	r1, sp, #36	; 0x24
   1e49c:	add	r2, r2, #1
   1e4a0:	mvn	r3, #-2147483648	; 0x80000000
   1e4a4:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e4a8:	mov	r6, r0
   1e4ac:	ldm	r7, {r0, r1}
   1e4b0:	str	r6, [r4]
   1e4b4:	stm	r6, {r0, r1}
   1e4b8:	b	1e398 <__assert_fail@plt+0xd20c>
   1e4bc:	bl	11168 <abort@plt>
   1e4c0:	andeq	r3, r3, r4, lsr #2
   1e4c4:	andeq	r3, r3, ip, lsr r1
   1e4c8:	andeq	r3, r3, ip, ror #3
   1e4cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4d0:	sub	sp, sp, #44	; 0x2c
   1e4d4:	mov	sl, r0
   1e4d8:	bl	11090 <__errno_location@plt>
   1e4dc:	ldr	r4, [pc, #348]	; 1e640 <__assert_fail@plt+0xd4b4>
   1e4e0:	ldr	r2, [r4, #4]
   1e4e4:	ldr	r5, [r4]
   1e4e8:	cmp	r2, #0
   1e4ec:	ldr	r3, [r0]
   1e4f0:	mov	r8, r0
   1e4f4:	str	r3, [sp, #28]
   1e4f8:	bgt	1e554 <__assert_fail@plt+0xd3c8>
   1e4fc:	add	r6, r4, #8
   1e500:	cmp	r5, r6
   1e504:	str	r2, [sp, #36]	; 0x24
   1e508:	beq	1e610 <__assert_fail@plt+0xd484>
   1e50c:	mov	r3, #8
   1e510:	mov	r0, r5
   1e514:	str	r3, [sp]
   1e518:	rsb	r2, r2, #1
   1e51c:	mvn	r3, #-2147483648	; 0x80000000
   1e520:	add	r1, sp, #36	; 0x24
   1e524:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e528:	mov	r5, r0
   1e52c:	str	r0, [r4]
   1e530:	ldr	r0, [r4, #4]
   1e534:	ldr	r2, [sp, #36]	; 0x24
   1e538:	mov	r1, #0
   1e53c:	sub	r2, r2, r0
   1e540:	add	r0, r5, r0, lsl #3
   1e544:	lsl	r2, r2, #3
   1e548:	bl	110b4 <memset@plt>
   1e54c:	ldr	r3, [sp, #36]	; 0x24
   1e550:	str	r3, [r4, #4]
   1e554:	ldr	r7, [r4, #20]
   1e558:	ldr	r9, [r5]
   1e55c:	ldr	r6, [r5, #4]
   1e560:	ldr	r2, [r4, #56]	; 0x38
   1e564:	ldr	r3, [r4, #16]
   1e568:	ldr	ip, [r4, #60]	; 0x3c
   1e56c:	ldr	fp, [pc, #208]	; 1e644 <__assert_fail@plt+0xd4b8>
   1e570:	orr	r7, r7, #1
   1e574:	str	r2, [sp, #12]
   1e578:	str	r3, [sp]
   1e57c:	str	r7, [sp, #4]
   1e580:	mov	r1, r9
   1e584:	mov	r0, r6
   1e588:	str	ip, [sp, #16]
   1e58c:	str	fp, [sp, #8]
   1e590:	mvn	r3, #0
   1e594:	mov	r2, sl
   1e598:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e59c:	cmp	r9, r0
   1e5a0:	bhi	1e5fc <__assert_fail@plt+0xd470>
   1e5a4:	ldr	r3, [pc, #156]	; 1e648 <__assert_fail@plt+0xd4bc>
   1e5a8:	add	r9, r0, #1
   1e5ac:	cmp	r6, r3
   1e5b0:	str	r9, [r5]
   1e5b4:	beq	1e5c0 <__assert_fail@plt+0xd434>
   1e5b8:	mov	r0, r6
   1e5bc:	bl	1a508 <__assert_fail@plt+0x937c>
   1e5c0:	mov	r0, r9
   1e5c4:	bl	1f0bc <__assert_fail@plt+0xdf30>
   1e5c8:	ldr	ip, [r4, #60]	; 0x3c
   1e5cc:	ldr	r3, [r4, #16]
   1e5d0:	ldr	lr, [r4, #56]	; 0x38
   1e5d4:	mov	r2, sl
   1e5d8:	mov	r1, r9
   1e5dc:	str	r0, [r5, #4]
   1e5e0:	str	r3, [sp]
   1e5e4:	stmib	sp, {r7, fp}
   1e5e8:	str	ip, [sp, #16]
   1e5ec:	str	lr, [sp, #12]
   1e5f0:	mvn	r3, #0
   1e5f4:	mov	r6, r0
   1e5f8:	bl	1a7d4 <__assert_fail@plt+0x9648>
   1e5fc:	ldr	r3, [sp, #28]
   1e600:	mov	r0, r6
   1e604:	str	r3, [r8]
   1e608:	add	sp, sp, #44	; 0x2c
   1e60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e610:	mov	r3, #8
   1e614:	str	r3, [sp]
   1e618:	add	r1, sp, #36	; 0x24
   1e61c:	rsb	r2, r2, #1
   1e620:	mvn	r3, #-2147483648	; 0x80000000
   1e624:	mov	r0, #0
   1e628:	bl	1f2d8 <__assert_fail@plt+0xe14c>
   1e62c:	mov	r5, r0
   1e630:	ldm	r6, {r0, r1}
   1e634:	str	r5, [r4]
   1e638:	stm	r5, {r0, r1}
   1e63c:	b	1e530 <__assert_fail@plt+0xd3a4>
   1e640:	andeq	r3, r3, r4, lsr #2
   1e644:	andeq	r3, r3, ip, lsr r1
   1e648:	andeq	r3, r3, ip, ror #3
   1e64c:	mov	r2, #3
   1e650:	mov	r1, #0
   1e654:	b	208b0 <__assert_fail@plt+0xf724>
   1e658:	push	{r4, r5, r6, lr}
   1e65c:	sub	sp, sp, #32
   1e660:	cmp	r1, #0
   1e664:	mov	r4, r0
   1e668:	ldr	r5, [sp, #48]	; 0x30
   1e66c:	ldr	r6, [sp, #52]	; 0x34
   1e670:	beq	1e988 <__assert_fail@plt+0xd7fc>
   1e674:	stm	sp, {r2, r3}
   1e678:	mov	r3, r1
   1e67c:	ldr	r2, [pc, #808]	; 1e9ac <__assert_fail@plt+0xd820>
   1e680:	mov	r1, #1
   1e684:	bl	110d8 <__fprintf_chk@plt>
   1e688:	mov	r2, #5
   1e68c:	ldr	r1, [pc, #796]	; 1e9b0 <__assert_fail@plt+0xd824>
   1e690:	mov	r0, #0
   1e694:	bl	10f7c <dcgettext@plt>
   1e698:	ldr	r3, [pc, #788]	; 1e9b4 <__assert_fail@plt+0xd828>
   1e69c:	ldr	r2, [pc, #788]	; 1e9b8 <__assert_fail@plt+0xd82c>
   1e6a0:	str	r3, [sp]
   1e6a4:	mov	r1, #1
   1e6a8:	mov	r3, r0
   1e6ac:	mov	r0, r4
   1e6b0:	bl	110d8 <__fprintf_chk@plt>
   1e6b4:	mov	r1, r4
   1e6b8:	mov	r0, #10
   1e6bc:	bl	10f70 <fputc_unlocked@plt>
   1e6c0:	mov	r2, #5
   1e6c4:	ldr	r1, [pc, #752]	; 1e9bc <__assert_fail@plt+0xd830>
   1e6c8:	mov	r0, #0
   1e6cc:	bl	10f7c <dcgettext@plt>
   1e6d0:	mov	r1, #1
   1e6d4:	ldr	r3, [pc, #740]	; 1e9c0 <__assert_fail@plt+0xd834>
   1e6d8:	mov	r2, r0
   1e6dc:	mov	r0, r4
   1e6e0:	bl	110d8 <__fprintf_chk@plt>
   1e6e4:	mov	r1, r4
   1e6e8:	mov	r0, #10
   1e6ec:	bl	10f70 <fputc_unlocked@plt>
   1e6f0:	cmp	r6, #9
   1e6f4:	ldrls	pc, [pc, r6, lsl #2]
   1e6f8:	b	1e9a0 <__assert_fail@plt+0xd814>
   1e6fc:	andeq	lr, r1, r0, lsl #15
   1e700:	andeq	lr, r1, r8, lsl #15
   1e704:			; <UNDEFINED> instruction: 0x0001e7b4
   1e708:	andeq	lr, r1, r8, ror #15
   1e70c:	andeq	lr, r1, r4, lsr #16
   1e710:	andeq	lr, r1, r0, ror #16
   1e714:	muleq	r1, ip, r8
   1e718:	andeq	lr, r1, r0, ror #17
   1e71c:	andeq	lr, r1, r0, lsr r9
   1e720:	andeq	lr, r1, r4, lsr #14
   1e724:	ldr	r1, [pc, #664]	; 1e9c4 <__assert_fail@plt+0xd838>
   1e728:	mov	r2, #5
   1e72c:	mov	r0, #0
   1e730:	bl	10f7c <dcgettext@plt>
   1e734:	ldr	ip, [r5, #32]
   1e738:	ldr	r1, [r5, #28]
   1e73c:	ldr	r2, [r5, #24]
   1e740:	ldr	r3, [r5]
   1e744:	ldr	r6, [r5, #20]
   1e748:	str	ip, [sp, #28]
   1e74c:	ldr	lr, [r5, #16]
   1e750:	str	r1, [sp, #24]
   1e754:	ldr	ip, [r5, #12]
   1e758:	str	r2, [sp, #20]
   1e75c:	ldr	r1, [r5, #8]
   1e760:	ldr	r2, [r5, #4]
   1e764:	str	r6, [sp, #16]
   1e768:	stmib	sp, {r1, ip, lr}
   1e76c:	mov	r1, #1
   1e770:	str	r2, [sp]
   1e774:	mov	r2, r0
   1e778:	mov	r0, r4
   1e77c:	bl	110d8 <__fprintf_chk@plt>
   1e780:	add	sp, sp, #32
   1e784:	pop	{r4, r5, r6, pc}
   1e788:	mov	r2, #5
   1e78c:	ldr	r1, [pc, #564]	; 1e9c8 <__assert_fail@plt+0xd83c>
   1e790:	mov	r0, #0
   1e794:	bl	10f7c <dcgettext@plt>
   1e798:	ldr	r3, [r5]
   1e79c:	mov	r1, #1
   1e7a0:	mov	r2, r0
   1e7a4:	mov	r0, r4
   1e7a8:	add	sp, sp, #32
   1e7ac:	pop	{r4, r5, r6, lr}
   1e7b0:	b	110d8 <__fprintf_chk@plt>
   1e7b4:	mov	r2, #5
   1e7b8:	ldr	r1, [pc, #524]	; 1e9cc <__assert_fail@plt+0xd840>
   1e7bc:	mov	r0, #0
   1e7c0:	bl	10f7c <dcgettext@plt>
   1e7c4:	ldr	r2, [r5, #4]
   1e7c8:	ldr	r3, [r5]
   1e7cc:	mov	r1, #1
   1e7d0:	str	r2, [sp, #48]	; 0x30
   1e7d4:	mov	r2, r0
   1e7d8:	mov	r0, r4
   1e7dc:	add	sp, sp, #32
   1e7e0:	pop	{r4, r5, r6, lr}
   1e7e4:	b	110d8 <__fprintf_chk@plt>
   1e7e8:	mov	r2, #5
   1e7ec:	ldr	r1, [pc, #476]	; 1e9d0 <__assert_fail@plt+0xd844>
   1e7f0:	mov	r0, #0
   1e7f4:	bl	10f7c <dcgettext@plt>
   1e7f8:	ldr	r1, [r5, #8]
   1e7fc:	ldr	r2, [r5, #4]
   1e800:	ldr	r3, [r5]
   1e804:	str	r1, [sp, #52]	; 0x34
   1e808:	str	r2, [sp, #48]	; 0x30
   1e80c:	mov	r1, #1
   1e810:	mov	r2, r0
   1e814:	mov	r0, r4
   1e818:	add	sp, sp, #32
   1e81c:	pop	{r4, r5, r6, lr}
   1e820:	b	110d8 <__fprintf_chk@plt>
   1e824:	mov	r2, #5
   1e828:	ldr	r1, [pc, #420]	; 1e9d4 <__assert_fail@plt+0xd848>
   1e82c:	mov	r0, #0
   1e830:	bl	10f7c <dcgettext@plt>
   1e834:	ldr	r1, [r5, #8]
   1e838:	ldr	ip, [r5, #12]
   1e83c:	ldr	r2, [r5, #4]
   1e840:	ldr	r3, [r5]
   1e844:	stmib	sp, {r1, ip}
   1e848:	str	r2, [sp]
   1e84c:	mov	r1, #1
   1e850:	mov	r2, r0
   1e854:	mov	r0, r4
   1e858:	bl	110d8 <__fprintf_chk@plt>
   1e85c:	b	1e780 <__assert_fail@plt+0xd5f4>
   1e860:	mov	r2, #5
   1e864:	ldr	r1, [pc, #364]	; 1e9d8 <__assert_fail@plt+0xd84c>
   1e868:	mov	r0, #0
   1e86c:	bl	10f7c <dcgettext@plt>
   1e870:	add	r1, r5, #8
   1e874:	ldr	r2, [r5, #4]
   1e878:	ldm	r1, {r1, ip, lr}
   1e87c:	ldr	r3, [r5]
   1e880:	str	r2, [sp]
   1e884:	stmib	sp, {r1, ip, lr}
   1e888:	mov	r1, #1
   1e88c:	mov	r2, r0
   1e890:	mov	r0, r4
   1e894:	bl	110d8 <__fprintf_chk@plt>
   1e898:	b	1e780 <__assert_fail@plt+0xd5f4>
   1e89c:	mov	r2, #5
   1e8a0:	ldr	r1, [pc, #308]	; 1e9dc <__assert_fail@plt+0xd850>
   1e8a4:	mov	r0, #0
   1e8a8:	bl	10f7c <dcgettext@plt>
   1e8ac:	add	r1, r5, #8
   1e8b0:	ldr	r2, [r5, #4]
   1e8b4:	ldm	r1, {r1, ip, lr}
   1e8b8:	ldr	r6, [r5, #20]
   1e8bc:	ldr	r3, [r5]
   1e8c0:	stmib	sp, {r1, ip, lr}
   1e8c4:	mov	r1, #1
   1e8c8:	str	r2, [sp]
   1e8cc:	str	r6, [sp, #16]
   1e8d0:	mov	r2, r0
   1e8d4:	mov	r0, r4
   1e8d8:	bl	110d8 <__fprintf_chk@plt>
   1e8dc:	b	1e780 <__assert_fail@plt+0xd5f4>
   1e8e0:	mov	r2, #5
   1e8e4:	ldr	r1, [pc, #244]	; 1e9e0 <__assert_fail@plt+0xd854>
   1e8e8:	mov	r0, #0
   1e8ec:	bl	10f7c <dcgettext@plt>
   1e8f0:	ldr	r2, [r5, #24]
   1e8f4:	ldr	r3, [r5]
   1e8f8:	ldr	r6, [r5, #20]
   1e8fc:	ldr	lr, [r5, #16]
   1e900:	ldr	ip, [r5, #12]
   1e904:	str	r2, [sp, #20]
   1e908:	ldr	r1, [r5, #8]
   1e90c:	ldr	r2, [r5, #4]
   1e910:	str	r6, [sp, #16]
   1e914:	stmib	sp, {r1, ip, lr}
   1e918:	mov	r1, #1
   1e91c:	str	r2, [sp]
   1e920:	mov	r2, r0
   1e924:	mov	r0, r4
   1e928:	bl	110d8 <__fprintf_chk@plt>
   1e92c:	b	1e780 <__assert_fail@plt+0xd5f4>
   1e930:	mov	r2, #5
   1e934:	ldr	r1, [pc, #168]	; 1e9e4 <__assert_fail@plt+0xd858>
   1e938:	mov	r0, #0
   1e93c:	bl	10f7c <dcgettext@plt>
   1e940:	ldr	r1, [r5, #28]
   1e944:	ldr	r2, [r5, #24]
   1e948:	ldr	r3, [r5]
   1e94c:	ldr	r6, [r5, #20]
   1e950:	ldr	lr, [r5, #16]
   1e954:	str	r1, [sp, #24]
   1e958:	ldr	ip, [r5, #12]
   1e95c:	str	r2, [sp, #20]
   1e960:	ldr	r1, [r5, #8]
   1e964:	ldr	r2, [r5, #4]
   1e968:	str	r6, [sp, #16]
   1e96c:	stmib	sp, {r1, ip, lr}
   1e970:	mov	r1, #1
   1e974:	str	r2, [sp]
   1e978:	mov	r2, r0
   1e97c:	mov	r0, r4
   1e980:	bl	110d8 <__fprintf_chk@plt>
   1e984:	b	1e780 <__assert_fail@plt+0xd5f4>
   1e988:	str	r3, [sp]
   1e98c:	mov	r1, #1
   1e990:	mov	r3, r2
   1e994:	ldr	r2, [pc, #76]	; 1e9e8 <__assert_fail@plt+0xd85c>
   1e998:	bl	110d8 <__fprintf_chk@plt>
   1e99c:	b	1e688 <__assert_fail@plt+0xd4fc>
   1e9a0:	mov	r2, #5
   1e9a4:	ldr	r1, [pc, #64]	; 1e9ec <__assert_fail@plt+0xd860>
   1e9a8:	b	1e72c <__assert_fail@plt+0xd5a0>
   1e9ac:	andeq	r2, r2, ip, lsr #5
   1e9b0:	andeq	r2, r2, r0, asr #5
   1e9b4:	andeq	r0, r0, r6, ror #15
   1e9b8:	muleq	r2, r8, r5
   1e9bc:	andeq	r2, r2, r4, asr #5
   1e9c0:	andeq	r2, r2, r0, ror r3
   1e9c4:	andeq	r2, r2, r0, lsr #9
   1e9c8:	muleq	r2, r4, r3
   1e9cc:	andeq	r2, r2, r4, lsr #7
   1e9d0:			; <UNDEFINED> instruction: 0x000223bc
   1e9d4:	ldrdeq	r2, [r2], -r8
   1e9d8:	strdeq	r2, [r2], -r8
   1e9dc:	andeq	r2, r2, ip, lsl r4
   1e9e0:	andeq	r2, r2, r4, asr #8
   1e9e4:	andeq	r2, r2, r0, ror r4
   1e9e8:			; <UNDEFINED> instruction: 0x000222b8
   1e9ec:	ldrdeq	r2, [r2], -r4
   1e9f0:	push	{r4, r5, lr}
   1e9f4:	sub	sp, sp, #12
   1e9f8:	ldr	r5, [sp, #24]
   1e9fc:	ldr	ip, [r5]
   1ea00:	cmp	ip, #0
   1ea04:	beq	1ea20 <__assert_fail@plt+0xd894>
   1ea08:	mov	lr, r5
   1ea0c:	mov	ip, #0
   1ea10:	ldr	r4, [lr, #4]!
   1ea14:	add	ip, ip, #1
   1ea18:	cmp	r4, #0
   1ea1c:	bne	1ea10 <__assert_fail@plt+0xd884>
   1ea20:	stm	sp, {r5, ip}
   1ea24:	bl	1e658 <__assert_fail@plt+0xd4cc>
   1ea28:	add	sp, sp, #12
   1ea2c:	pop	{r4, r5, pc}
   1ea30:	push	{r4, r5, lr}
   1ea34:	sub	sp, sp, #76	; 0x4c
   1ea38:	mov	r5, r0
   1ea3c:	ldr	ip, [sp, #88]	; 0x58
   1ea40:	ldr	r0, [ip]
   1ea44:	cmp	r0, #0
   1ea48:	str	r0, [sp, #32]
   1ea4c:	beq	1ee20 <__assert_fail@plt+0xdc94>
   1ea50:	ldr	r0, [ip, #4]
   1ea54:	cmp	r0, #0
   1ea58:	str	r0, [sp, #36]	; 0x24
   1ea5c:	beq	1ee28 <__assert_fail@plt+0xdc9c>
   1ea60:	ldr	r0, [ip, #8]
   1ea64:	cmp	r0, #0
   1ea68:	str	r0, [sp, #40]	; 0x28
   1ea6c:	beq	1ee30 <__assert_fail@plt+0xdca4>
   1ea70:	ldr	r0, [ip, #12]
   1ea74:	cmp	r0, #0
   1ea78:	str	r0, [sp, #44]	; 0x2c
   1ea7c:	beq	1ee38 <__assert_fail@plt+0xdcac>
   1ea80:	ldr	r0, [ip, #16]
   1ea84:	cmp	r0, #0
   1ea88:	str	r0, [sp, #48]	; 0x30
   1ea8c:	beq	1ee40 <__assert_fail@plt+0xdcb4>
   1ea90:	ldr	r0, [ip, #20]
   1ea94:	cmp	r0, #0
   1ea98:	str	r0, [sp, #52]	; 0x34
   1ea9c:	beq	1ee48 <__assert_fail@plt+0xdcbc>
   1eaa0:	ldr	r0, [ip, #24]
   1eaa4:	cmp	r0, #0
   1eaa8:	str	r0, [sp, #56]	; 0x38
   1eaac:	beq	1ee50 <__assert_fail@plt+0xdcc4>
   1eab0:	ldr	r0, [ip, #28]
   1eab4:	cmp	r0, #0
   1eab8:	str	r0, [sp, #60]	; 0x3c
   1eabc:	beq	1ee58 <__assert_fail@plt+0xdccc>
   1eac0:	ldr	r0, [ip, #32]
   1eac4:	cmp	r0, #0
   1eac8:	str	r0, [sp, #64]	; 0x40
   1eacc:	beq	1ee60 <__assert_fail@plt+0xdcd4>
   1ead0:	ldr	r0, [ip, #36]	; 0x24
   1ead4:	cmp	r0, #0
   1ead8:	movne	r4, #10
   1eadc:	moveq	r4, #9
   1eae0:	cmp	r1, #0
   1eae4:	beq	1edf8 <__assert_fail@plt+0xdc6c>
   1eae8:	stm	sp, {r2, r3}
   1eaec:	mov	r0, r5
   1eaf0:	mov	r3, r1
   1eaf4:	ldr	r2, [pc, #876]	; 1ee68 <__assert_fail@plt+0xdcdc>
   1eaf8:	mov	r1, #1
   1eafc:	bl	110d8 <__fprintf_chk@plt>
   1eb00:	mov	r2, #5
   1eb04:	ldr	r1, [pc, #864]	; 1ee6c <__assert_fail@plt+0xdce0>
   1eb08:	mov	r0, #0
   1eb0c:	bl	10f7c <dcgettext@plt>
   1eb10:	ldr	r3, [pc, #856]	; 1ee70 <__assert_fail@plt+0xdce4>
   1eb14:	ldr	r2, [pc, #856]	; 1ee74 <__assert_fail@plt+0xdce8>
   1eb18:	str	r3, [sp]
   1eb1c:	mov	r1, #1
   1eb20:	mov	r3, r0
   1eb24:	mov	r0, r5
   1eb28:	bl	110d8 <__fprintf_chk@plt>
   1eb2c:	mov	r1, r5
   1eb30:	mov	r0, #10
   1eb34:	bl	10f70 <fputc_unlocked@plt>
   1eb38:	mov	r2, #5
   1eb3c:	ldr	r1, [pc, #820]	; 1ee78 <__assert_fail@plt+0xdcec>
   1eb40:	mov	r0, #0
   1eb44:	bl	10f7c <dcgettext@plt>
   1eb48:	mov	r1, #1
   1eb4c:	ldr	r3, [pc, #808]	; 1ee7c <__assert_fail@plt+0xdcf0>
   1eb50:	mov	r2, r0
   1eb54:	mov	r0, r5
   1eb58:	bl	110d8 <__fprintf_chk@plt>
   1eb5c:	mov	r1, r5
   1eb60:	mov	r0, #10
   1eb64:	bl	10f70 <fputc_unlocked@plt>
   1eb68:	cmp	r4, #9
   1eb6c:	ldrls	pc, [pc, r4, lsl #2]
   1eb70:	b	1ee14 <__assert_fail@plt+0xdc88>
   1eb74:	strdeq	lr, [r1], -r8
   1eb78:	andeq	lr, r1, r0, lsl #24
   1eb7c:	andeq	lr, r1, ip, lsr #24
   1eb80:	andeq	lr, r1, r0, ror #24
   1eb84:	muleq	r1, r8, ip
   1eb88:	ldrdeq	lr, [r1], -r4
   1eb8c:	andeq	lr, r1, r0, lsl sp
   1eb90:	andeq	lr, r1, r4, asr sp
   1eb94:	andeq	lr, r1, r0, lsr #27
   1eb98:	muleq	r1, ip, fp
   1eb9c:	ldr	r1, [pc, #732]	; 1ee80 <__assert_fail@plt+0xdcf4>
   1eba0:	mov	r2, #5
   1eba4:	mov	r0, #0
   1eba8:	bl	10f7c <dcgettext@plt>
   1ebac:	ldr	ip, [sp, #64]	; 0x40
   1ebb0:	ldr	r1, [sp, #60]	; 0x3c
   1ebb4:	ldr	r2, [sp, #56]	; 0x38
   1ebb8:	ldr	lr, [sp, #48]	; 0x30
   1ebbc:	str	ip, [sp, #28]
   1ebc0:	str	r1, [sp, #24]
   1ebc4:	ldr	ip, [sp, #44]	; 0x2c
   1ebc8:	ldr	r1, [sp, #40]	; 0x28
   1ebcc:	ldr	r4, [sp, #52]	; 0x34
   1ebd0:	str	r2, [sp, #20]
   1ebd4:	ldr	r2, [sp, #36]	; 0x24
   1ebd8:	stmib	sp, {r1, ip, lr}
   1ebdc:	mov	r1, #1
   1ebe0:	str	r2, [sp]
   1ebe4:	ldr	r3, [sp, #32]
   1ebe8:	str	r4, [sp, #16]
   1ebec:	mov	r2, r0
   1ebf0:	mov	r0, r5
   1ebf4:	bl	110d8 <__fprintf_chk@plt>
   1ebf8:	add	sp, sp, #76	; 0x4c
   1ebfc:	pop	{r4, r5, pc}
   1ec00:	mov	r2, #5
   1ec04:	ldr	r1, [pc, #632]	; 1ee84 <__assert_fail@plt+0xdcf8>
   1ec08:	mov	r0, #0
   1ec0c:	bl	10f7c <dcgettext@plt>
   1ec10:	ldr	r3, [sp, #32]
   1ec14:	mov	r1, #1
   1ec18:	mov	r2, r0
   1ec1c:	mov	r0, r5
   1ec20:	add	sp, sp, #76	; 0x4c
   1ec24:	pop	{r4, r5, lr}
   1ec28:	b	110d8 <__fprintf_chk@plt>
   1ec2c:	mov	r2, #5
   1ec30:	ldr	r1, [pc, #592]	; 1ee88 <__assert_fail@plt+0xdcfc>
   1ec34:	mov	r0, #0
   1ec38:	bl	10f7c <dcgettext@plt>
   1ec3c:	ldr	r2, [sp, #36]	; 0x24
   1ec40:	ldr	r3, [sp, #32]
   1ec44:	str	r2, [sp, #88]	; 0x58
   1ec48:	mov	r1, #1
   1ec4c:	mov	r2, r0
   1ec50:	mov	r0, r5
   1ec54:	add	sp, sp, #76	; 0x4c
   1ec58:	pop	{r4, r5, lr}
   1ec5c:	b	110d8 <__fprintf_chk@plt>
   1ec60:	mov	r2, #5
   1ec64:	ldr	r1, [pc, #544]	; 1ee8c <__assert_fail@plt+0xdd00>
   1ec68:	mov	r0, #0
   1ec6c:	bl	10f7c <dcgettext@plt>
   1ec70:	ldr	r1, [sp, #40]	; 0x28
   1ec74:	ldr	r2, [sp, #36]	; 0x24
   1ec78:	str	r1, [sp, #4]
   1ec7c:	str	r2, [sp]
   1ec80:	ldr	r3, [sp, #32]
   1ec84:	mov	r1, #1
   1ec88:	mov	r2, r0
   1ec8c:	mov	r0, r5
   1ec90:	bl	110d8 <__fprintf_chk@plt>
   1ec94:	b	1ebf8 <__assert_fail@plt+0xda6c>
   1ec98:	mov	r2, #5
   1ec9c:	ldr	r1, [pc, #492]	; 1ee90 <__assert_fail@plt+0xdd04>
   1eca0:	mov	r0, #0
   1eca4:	bl	10f7c <dcgettext@plt>
   1eca8:	ldr	r1, [sp, #40]	; 0x28
   1ecac:	ldr	ip, [sp, #44]	; 0x2c
   1ecb0:	ldr	r2, [sp, #36]	; 0x24
   1ecb4:	ldr	r3, [sp, #32]
   1ecb8:	stmib	sp, {r1, ip}
   1ecbc:	str	r2, [sp]
   1ecc0:	mov	r1, #1
   1ecc4:	mov	r2, r0
   1ecc8:	mov	r0, r5
   1eccc:	bl	110d8 <__fprintf_chk@plt>
   1ecd0:	b	1ebf8 <__assert_fail@plt+0xda6c>
   1ecd4:	mov	r2, #5
   1ecd8:	ldr	r1, [pc, #436]	; 1ee94 <__assert_fail@plt+0xdd08>
   1ecdc:	mov	r0, #0
   1ece0:	bl	10f7c <dcgettext@plt>
   1ece4:	add	r1, sp, #40	; 0x28
   1ece8:	ldr	r2, [sp, #36]	; 0x24
   1ecec:	ldm	r1, {r1, ip, lr}
   1ecf0:	ldr	r3, [sp, #32]
   1ecf4:	str	r2, [sp]
   1ecf8:	stmib	sp, {r1, ip, lr}
   1ecfc:	mov	r1, #1
   1ed00:	mov	r2, r0
   1ed04:	mov	r0, r5
   1ed08:	bl	110d8 <__fprintf_chk@plt>
   1ed0c:	b	1ebf8 <__assert_fail@plt+0xda6c>
   1ed10:	mov	r2, #5
   1ed14:	ldr	r1, [pc, #380]	; 1ee98 <__assert_fail@plt+0xdd0c>
   1ed18:	mov	r0, #0
   1ed1c:	bl	10f7c <dcgettext@plt>
   1ed20:	add	r1, sp, #40	; 0x28
   1ed24:	ldr	r2, [sp, #36]	; 0x24
   1ed28:	ldm	r1, {r1, ip, lr}
   1ed2c:	ldr	r4, [sp, #52]	; 0x34
   1ed30:	str	r2, [sp]
   1ed34:	stmib	sp, {r1, ip, lr}
   1ed38:	mov	r1, #1
   1ed3c:	ldr	r3, [sp, #32]
   1ed40:	str	r4, [sp, #16]
   1ed44:	mov	r2, r0
   1ed48:	mov	r0, r5
   1ed4c:	bl	110d8 <__fprintf_chk@plt>
   1ed50:	b	1ebf8 <__assert_fail@plt+0xda6c>
   1ed54:	mov	r2, #5
   1ed58:	ldr	r1, [pc, #316]	; 1ee9c <__assert_fail@plt+0xdd10>
   1ed5c:	mov	r0, #0
   1ed60:	bl	10f7c <dcgettext@plt>
   1ed64:	add	r1, sp, #40	; 0x28
   1ed68:	ldr	r2, [sp, #56]	; 0x38
   1ed6c:	ldm	r1, {r1, ip, lr}
   1ed70:	ldr	r4, [sp, #52]	; 0x34
   1ed74:	str	r2, [sp, #20]
   1ed78:	ldr	r2, [sp, #36]	; 0x24
   1ed7c:	stmib	sp, {r1, ip, lr}
   1ed80:	mov	r1, #1
   1ed84:	str	r2, [sp]
   1ed88:	ldr	r3, [sp, #32]
   1ed8c:	str	r4, [sp, #16]
   1ed90:	mov	r2, r0
   1ed94:	mov	r0, r5
   1ed98:	bl	110d8 <__fprintf_chk@plt>
   1ed9c:	b	1ebf8 <__assert_fail@plt+0xda6c>
   1eda0:	mov	r2, #5
   1eda4:	ldr	r1, [pc, #244]	; 1eea0 <__assert_fail@plt+0xdd14>
   1eda8:	mov	r0, #0
   1edac:	bl	10f7c <dcgettext@plt>
   1edb0:	ldr	r1, [sp, #60]	; 0x3c
   1edb4:	ldr	r2, [sp, #56]	; 0x38
   1edb8:	ldr	lr, [sp, #48]	; 0x30
   1edbc:	ldr	ip, [sp, #44]	; 0x2c
   1edc0:	str	r1, [sp, #24]
   1edc4:	ldr	r1, [sp, #40]	; 0x28
   1edc8:	ldr	r4, [sp, #52]	; 0x34
   1edcc:	str	r2, [sp, #20]
   1edd0:	ldr	r2, [sp, #36]	; 0x24
   1edd4:	stmib	sp, {r1, ip, lr}
   1edd8:	mov	r1, #1
   1eddc:	str	r2, [sp]
   1ede0:	ldr	r3, [sp, #32]
   1ede4:	str	r4, [sp, #16]
   1ede8:	mov	r2, r0
   1edec:	mov	r0, r5
   1edf0:	bl	110d8 <__fprintf_chk@plt>
   1edf4:	b	1ebf8 <__assert_fail@plt+0xda6c>
   1edf8:	str	r3, [sp]
   1edfc:	mov	r1, #1
   1ee00:	mov	r3, r2
   1ee04:	mov	r0, r5
   1ee08:	ldr	r2, [pc, #148]	; 1eea4 <__assert_fail@plt+0xdd18>
   1ee0c:	bl	110d8 <__fprintf_chk@plt>
   1ee10:	b	1eb00 <__assert_fail@plt+0xd974>
   1ee14:	mov	r2, #5
   1ee18:	ldr	r1, [pc, #136]	; 1eea8 <__assert_fail@plt+0xdd1c>
   1ee1c:	b	1eba4 <__assert_fail@plt+0xda18>
   1ee20:	mov	r4, r0
   1ee24:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee28:	mov	r4, #1
   1ee2c:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee30:	mov	r4, #2
   1ee34:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee38:	mov	r4, #3
   1ee3c:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee40:	mov	r4, #4
   1ee44:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee48:	mov	r4, #5
   1ee4c:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee50:	mov	r4, #6
   1ee54:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee58:	mov	r4, #7
   1ee5c:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee60:	mov	r4, #8
   1ee64:	b	1eae0 <__assert_fail@plt+0xd954>
   1ee68:	andeq	r2, r2, ip, lsr #5
   1ee6c:	andeq	r2, r2, r0, asr #5
   1ee70:	andeq	r0, r0, r6, ror #15
   1ee74:	muleq	r2, r8, r5
   1ee78:	andeq	r2, r2, r4, asr #5
   1ee7c:	andeq	r2, r2, r0, ror r3
   1ee80:	andeq	r2, r2, r0, lsr #9
   1ee84:	muleq	r2, r4, r3
   1ee88:	andeq	r2, r2, r4, lsr #7
   1ee8c:			; <UNDEFINED> instruction: 0x000223bc
   1ee90:	ldrdeq	r2, [r2], -r8
   1ee94:	strdeq	r2, [r2], -r8
   1ee98:	andeq	r2, r2, ip, lsl r4
   1ee9c:	andeq	r2, r2, r4, asr #8
   1eea0:	andeq	r2, r2, r0, ror r4
   1eea4:			; <UNDEFINED> instruction: 0x000222b8
   1eea8:	ldrdeq	r2, [r2], -r4
   1eeac:	push	{r3}		; (str r3, [sp, #-4]!)
   1eeb0:	push	{lr}		; (str lr, [sp, #-4]!)
   1eeb4:	sub	sp, sp, #56	; 0x38
   1eeb8:	add	r3, sp, #64	; 0x40
   1eebc:	ldr	ip, [sp, #64]	; 0x40
   1eec0:	str	r3, [sp, #12]
   1eec4:	cmp	ip, #0
   1eec8:	str	ip, [sp, #16]
   1eecc:	beq	1ef64 <__assert_fail@plt+0xddd8>
   1eed0:	ldr	ip, [sp, #68]	; 0x44
   1eed4:	cmp	ip, #0
   1eed8:	str	ip, [sp, #20]
   1eedc:	beq	1ef84 <__assert_fail@plt+0xddf8>
   1eee0:	ldr	ip, [sp, #72]	; 0x48
   1eee4:	cmp	ip, #0
   1eee8:	str	ip, [sp, #24]
   1eeec:	beq	1ef8c <__assert_fail@plt+0xde00>
   1eef0:	ldr	ip, [sp, #76]	; 0x4c
   1eef4:	cmp	ip, #0
   1eef8:	str	ip, [sp, #28]
   1eefc:	beq	1ef94 <__assert_fail@plt+0xde08>
   1ef00:	ldr	ip, [sp, #80]	; 0x50
   1ef04:	cmp	ip, #0
   1ef08:	str	ip, [sp, #32]
   1ef0c:	beq	1ef9c <__assert_fail@plt+0xde10>
   1ef10:	ldr	ip, [sp, #84]	; 0x54
   1ef14:	cmp	ip, #0
   1ef18:	str	ip, [sp, #36]	; 0x24
   1ef1c:	beq	1efa4 <__assert_fail@plt+0xde18>
   1ef20:	ldr	ip, [sp, #88]	; 0x58
   1ef24:	cmp	ip, #0
   1ef28:	str	ip, [sp, #40]	; 0x28
   1ef2c:	beq	1efac <__assert_fail@plt+0xde20>
   1ef30:	ldr	ip, [sp, #92]	; 0x5c
   1ef34:	cmp	ip, #0
   1ef38:	str	ip, [sp, #44]	; 0x2c
   1ef3c:	beq	1efb4 <__assert_fail@plt+0xde28>
   1ef40:	ldr	ip, [sp, #96]	; 0x60
   1ef44:	cmp	ip, #0
   1ef48:	str	ip, [sp, #48]	; 0x30
   1ef4c:	beq	1efbc <__assert_fail@plt+0xde30>
   1ef50:	ldr	ip, [sp, #100]	; 0x64
   1ef54:	cmp	ip, #0
   1ef58:	str	ip, [sp, #52]	; 0x34
   1ef5c:	movne	ip, #10
   1ef60:	moveq	ip, #9
   1ef64:	add	r3, sp, #16
   1ef68:	stm	sp, {r3, ip}
   1ef6c:	ldr	r3, [sp, #60]	; 0x3c
   1ef70:	bl	1e658 <__assert_fail@plt+0xd4cc>
   1ef74:	add	sp, sp, #56	; 0x38
   1ef78:	pop	{lr}		; (ldr lr, [sp], #4)
   1ef7c:	add	sp, sp, #4
   1ef80:	bx	lr
   1ef84:	mov	ip, #1
   1ef88:	b	1ef64 <__assert_fail@plt+0xddd8>
   1ef8c:	mov	ip, #2
   1ef90:	b	1ef64 <__assert_fail@plt+0xddd8>
   1ef94:	mov	ip, #3
   1ef98:	b	1ef64 <__assert_fail@plt+0xddd8>
   1ef9c:	mov	ip, #4
   1efa0:	b	1ef64 <__assert_fail@plt+0xddd8>
   1efa4:	mov	ip, #5
   1efa8:	b	1ef64 <__assert_fail@plt+0xddd8>
   1efac:	mov	ip, #6
   1efb0:	b	1ef64 <__assert_fail@plt+0xddd8>
   1efb4:	mov	ip, #7
   1efb8:	b	1ef64 <__assert_fail@plt+0xddd8>
   1efbc:	mov	ip, #8
   1efc0:	b	1ef64 <__assert_fail@plt+0xddd8>
   1efc4:	ldr	r3, [pc, #116]	; 1f040 <__assert_fail@plt+0xdeb4>
   1efc8:	push	{r4, lr}
   1efcc:	mov	r0, #10
   1efd0:	ldr	r1, [r3]
   1efd4:	bl	10f70 <fputc_unlocked@plt>
   1efd8:	mov	r2, #5
   1efdc:	ldr	r1, [pc, #96]	; 1f044 <__assert_fail@plt+0xdeb8>
   1efe0:	mov	r0, #0
   1efe4:	bl	10f7c <dcgettext@plt>
   1efe8:	ldr	r2, [pc, #88]	; 1f048 <__assert_fail@plt+0xdebc>
   1efec:	mov	r1, r0
   1eff0:	mov	r0, #1
   1eff4:	bl	110c0 <__printf_chk@plt>
   1eff8:	mov	r2, #5
   1effc:	ldr	r1, [pc, #72]	; 1f04c <__assert_fail@plt+0xdec0>
   1f000:	mov	r0, #0
   1f004:	bl	10f7c <dcgettext@plt>
   1f008:	ldr	r3, [pc, #64]	; 1f050 <__assert_fail@plt+0xdec4>
   1f00c:	ldr	r2, [pc, #64]	; 1f054 <__assert_fail@plt+0xdec8>
   1f010:	mov	r1, r0
   1f014:	mov	r0, #1
   1f018:	bl	110c0 <__printf_chk@plt>
   1f01c:	mov	r2, #5
   1f020:	ldr	r1, [pc, #48]	; 1f058 <__assert_fail@plt+0xdecc>
   1f024:	mov	r0, #0
   1f028:	bl	10f7c <dcgettext@plt>
   1f02c:	ldr	r2, [pc, #40]	; 1f05c <__assert_fail@plt+0xded0>
   1f030:	pop	{r4, lr}
   1f034:	mov	r1, r0
   1f038:	mov	r0, #1
   1f03c:	b	110c0 <__printf_chk@plt>
   1f040:	andeq	r3, r3, r4, lsl #3
   1f044:	andeq	r2, r2, r0, lsl r5
   1f048:	andeq	r2, r2, r4, lsr #10
   1f04c:	andeq	r2, r2, ip, lsr r5
   1f050:	muleq	r2, r8, sl
   1f054:	andeq	r1, r2, r0, asr #21
   1f058:	andeq	r2, r2, r0, asr r5
   1f05c:	andeq	r2, r2, r8, ror r5
   1f060:	push	{r4, r5, r6, lr}
   1f064:	mov	r6, r0
   1f068:	mov	r5, r1
   1f06c:	mov	r4, r2
   1f070:	bl	20b0c <__assert_fail@plt+0xf980>
   1f074:	cmp	r0, #0
   1f078:	popne	{r4, r5, r6, pc}
   1f07c:	cmp	r6, #0
   1f080:	beq	1f090 <__assert_fail@plt+0xdf04>
   1f084:	cmp	r5, #0
   1f088:	cmpne	r4, #0
   1f08c:	popeq	{r4, r5, r6, pc}
   1f090:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f094:	push	{r4, lr}
   1f098:	bl	207ac <__assert_fail@plt+0xf620>
   1f09c:	cmp	r0, #0
   1f0a0:	popne	{r4, pc}
   1f0a4:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f0a8:	push	{r4, lr}
   1f0ac:	bl	207ac <__assert_fail@plt+0xf620>
   1f0b0:	cmp	r0, #0
   1f0b4:	popne	{r4, pc}
   1f0b8:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f0bc:	push	{r4, lr}
   1f0c0:	bl	207ac <__assert_fail@plt+0xf620>
   1f0c4:	cmp	r0, #0
   1f0c8:	popne	{r4, pc}
   1f0cc:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f0d0:	push	{r4, r5, r6, lr}
   1f0d4:	mov	r5, r0
   1f0d8:	mov	r4, r1
   1f0dc:	bl	207d8 <__assert_fail@plt+0xf64c>
   1f0e0:	cmp	r0, #0
   1f0e4:	popne	{r4, r5, r6, pc}
   1f0e8:	adds	r4, r4, #0
   1f0ec:	movne	r4, #1
   1f0f0:	cmp	r5, #0
   1f0f4:	orreq	r4, r4, #1
   1f0f8:	cmp	r4, #0
   1f0fc:	popeq	{r4, r5, r6, pc}
   1f100:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f104:	push	{r4, lr}
   1f108:	cmp	r1, #0
   1f10c:	orreq	r1, r1, #1
   1f110:	bl	207d8 <__assert_fail@plt+0xf64c>
   1f114:	cmp	r0, #0
   1f118:	popne	{r4, pc}
   1f11c:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f120:	push	{r4, r5, r6, lr}
   1f124:	mov	r6, r0
   1f128:	mov	r5, r1
   1f12c:	mov	r4, r2
   1f130:	bl	20b0c <__assert_fail@plt+0xf980>
   1f134:	cmp	r0, #0
   1f138:	popne	{r4, r5, r6, pc}
   1f13c:	cmp	r6, #0
   1f140:	beq	1f150 <__assert_fail@plt+0xdfc4>
   1f144:	cmp	r5, #0
   1f148:	cmpne	r4, #0
   1f14c:	popeq	{r4, r5, r6, pc}
   1f150:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f154:	cmp	r2, #0
   1f158:	cmpne	r1, #0
   1f15c:	moveq	r2, #1
   1f160:	moveq	r1, r2
   1f164:	push	{r4, lr}
   1f168:	bl	20b0c <__assert_fail@plt+0xf980>
   1f16c:	cmp	r0, #0
   1f170:	popne	{r4, pc}
   1f174:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f178:	push	{r4, lr}
   1f17c:	mov	r2, r1
   1f180:	mov	r1, r0
   1f184:	mov	r0, #0
   1f188:	bl	20b0c <__assert_fail@plt+0xf980>
   1f18c:	cmp	r0, #0
   1f190:	popne	{r4, pc}
   1f194:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f198:	cmp	r1, #0
   1f19c:	cmpne	r0, #0
   1f1a0:	moveq	r2, #1
   1f1a4:	movne	r2, r1
   1f1a8:	moveq	r1, r2
   1f1ac:	movne	r1, r0
   1f1b0:	push	{r4, lr}
   1f1b4:	mov	r0, #0
   1f1b8:	bl	20b0c <__assert_fail@plt+0xf980>
   1f1bc:	cmp	r0, #0
   1f1c0:	popne	{r4, pc}
   1f1c4:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f1c8:	cmp	r0, #0
   1f1cc:	push	{r4, r5, r6, lr}
   1f1d0:	mov	r5, r1
   1f1d4:	ldr	r4, [r1]
   1f1d8:	beq	1f214 <__assert_fail@plt+0xe088>
   1f1dc:	lsr	r2, r4, #1
   1f1e0:	add	r3, r2, #1
   1f1e4:	mvn	r3, r3
   1f1e8:	cmp	r4, r3
   1f1ec:	bhi	1f230 <__assert_fail@plt+0xe0a4>
   1f1f0:	add	r4, r4, #1
   1f1f4:	add	r4, r4, r2
   1f1f8:	mov	r1, r4
   1f1fc:	mov	r2, #1
   1f200:	bl	20b0c <__assert_fail@plt+0xf980>
   1f204:	cmp	r0, #0
   1f208:	beq	1f234 <__assert_fail@plt+0xe0a8>
   1f20c:	str	r4, [r5]
   1f210:	pop	{r4, r5, r6, pc}
   1f214:	cmp	r4, #0
   1f218:	moveq	r4, #64	; 0x40
   1f21c:	mov	r1, r4
   1f220:	mov	r2, #1
   1f224:	bl	20b0c <__assert_fail@plt+0xf980>
   1f228:	cmp	r0, #0
   1f22c:	bne	1f20c <__assert_fail@plt+0xe080>
   1f230:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f234:	cmp	r4, #0
   1f238:	bne	1f230 <__assert_fail@plt+0xe0a4>
   1f23c:	str	r4, [r5]
   1f240:	pop	{r4, r5, r6, pc}
   1f244:	cmp	r0, #0
   1f248:	push	{r4, r5, r6, lr}
   1f24c:	mov	r5, r1
   1f250:	ldr	r4, [r1]
   1f254:	mov	r6, r2
   1f258:	beq	1f29c <__assert_fail@plt+0xe110>
   1f25c:	lsr	r1, r4, #1
   1f260:	add	r3, r1, #1
   1f264:	mvn	r3, r3
   1f268:	cmp	r4, r3
   1f26c:	bhi	1f2d4 <__assert_fail@plt+0xe148>
   1f270:	add	r4, r4, #1
   1f274:	add	r4, r4, r1
   1f278:	mov	r1, r4
   1f27c:	bl	20b0c <__assert_fail@plt+0xf980>
   1f280:	cmp	r0, #0
   1f284:	bne	1f294 <__assert_fail@plt+0xe108>
   1f288:	cmp	r4, #0
   1f28c:	cmpne	r6, #0
   1f290:	bne	1f2d4 <__assert_fail@plt+0xe148>
   1f294:	str	r4, [r5]
   1f298:	pop	{r4, r5, r6, pc}
   1f29c:	cmp	r4, #0
   1f2a0:	bne	1f2bc <__assert_fail@plt+0xe130>
   1f2a4:	mov	r1, r2
   1f2a8:	mov	r0, #64	; 0x40
   1f2ac:	bl	20c4c <__assert_fail@plt+0xfac0>
   1f2b0:	cmp	r0, #0
   1f2b4:	movne	r4, r0
   1f2b8:	addeq	r4, r0, #1
   1f2bc:	mov	r2, r6
   1f2c0:	mov	r1, r4
   1f2c4:	mov	r0, #0
   1f2c8:	bl	20b0c <__assert_fail@plt+0xf980>
   1f2cc:	cmp	r0, #0
   1f2d0:	bne	1f294 <__assert_fail@plt+0xe108>
   1f2d4:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f2d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2dc:	sub	sp, sp, #12
   1f2e0:	ldr	r6, [r1]
   1f2e4:	mov	r8, r1
   1f2e8:	mov	r9, r0
   1f2ec:	asrs	r4, r6, #1
   1f2f0:	mov	sl, r2
   1f2f4:	mov	fp, r3
   1f2f8:	ldr	r7, [sp, #48]	; 0x30
   1f2fc:	bmi	1f478 <__assert_fail@plt+0xe2ec>
   1f300:	mvn	r1, #-2147483648	; 0x80000000
   1f304:	sub	r1, r1, r4
   1f308:	cmp	r6, r1
   1f30c:	movle	r1, #0
   1f310:	movgt	r1, #1
   1f314:	mvn	r3, fp
   1f318:	cmp	r1, #0
   1f31c:	addeq	r4, r4, r6
   1f320:	mvnne	r4, #-2147483648	; 0x80000000
   1f324:	lsr	r3, r3, #31
   1f328:	cmp	fp, r4
   1f32c:	movge	r2, #0
   1f330:	andlt	r2, r3, #1
   1f334:	cmp	r2, #0
   1f338:	beq	1f428 <__assert_fail@plt+0xe29c>
   1f33c:	cmp	r7, #0
   1f340:	blt	1f510 <__assert_fail@plt+0xe384>
   1f344:	bne	1f508 <__assert_fail@plt+0xe37c>
   1f348:	mov	r5, #64	; 0x40
   1f34c:	mov	r1, r7
   1f350:	mov	r0, r5
   1f354:	str	r3, [sp, #4]
   1f358:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f35c:	mov	r1, r7
   1f360:	mov	r4, r0
   1f364:	mov	r0, r5
   1f368:	bl	21078 <__assert_fail@plt+0xfeec>
   1f36c:	ldr	r3, [sp, #4]
   1f370:	sub	r5, r5, r1
   1f374:	cmp	r9, #0
   1f378:	sub	r2, r4, r6
   1f37c:	streq	r9, [r8]
   1f380:	cmp	r2, sl
   1f384:	bge	1f408 <__assert_fail@plt+0xe27c>
   1f388:	cmp	sl, #0
   1f38c:	blt	1f4a8 <__assert_fail@plt+0xe31c>
   1f390:	cmp	r6, #0
   1f394:	blt	1f3b4 <__assert_fail@plt+0xe228>
   1f398:	mvn	r2, #-2147483648	; 0x80000000
   1f39c:	sub	r2, r2, sl
   1f3a0:	cmp	r6, r2
   1f3a4:	movle	r2, #0
   1f3a8:	movgt	r2, #1
   1f3ac:	cmp	r2, #0
   1f3b0:	bne	1f4a4 <__assert_fail@plt+0xe318>
   1f3b4:	add	r6, r6, sl
   1f3b8:	cmp	fp, r6
   1f3bc:	movge	r3, #0
   1f3c0:	andlt	r3, r3, #1
   1f3c4:	cmp	r3, #0
   1f3c8:	mov	r4, r6
   1f3cc:	bne	1f4a4 <__assert_fail@plt+0xe318>
   1f3d0:	cmp	r7, #0
   1f3d4:	blt	1f4bc <__assert_fail@plt+0xe330>
   1f3d8:	beq	1f404 <__assert_fail@plt+0xe278>
   1f3dc:	cmp	r6, #0
   1f3e0:	blt	1f560 <__assert_fail@plt+0xe3d4>
   1f3e4:	mov	r1, r7
   1f3e8:	mvn	r0, #-2147483648	; 0x80000000
   1f3ec:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f3f0:	cmp	r6, r0
   1f3f4:	movle	r0, #0
   1f3f8:	movgt	r0, #1
   1f3fc:	cmp	r0, #0
   1f400:	bne	1f4a4 <__assert_fail@plt+0xe318>
   1f404:	mul	r5, r6, r7
   1f408:	mov	r1, r5
   1f40c:	mov	r0, r9
   1f410:	bl	207d8 <__assert_fail@plt+0xf64c>
   1f414:	cmp	r0, #0
   1f418:	beq	1f48c <__assert_fail@plt+0xe300>
   1f41c:	str	r4, [r8]
   1f420:	add	sp, sp, #12
   1f424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f428:	cmp	r7, #0
   1f42c:	blt	1f4e8 <__assert_fail@plt+0xe35c>
   1f430:	beq	1f348 <__assert_fail@plt+0xe1bc>
   1f434:	cmp	r4, #0
   1f438:	blt	1f518 <__assert_fail@plt+0xe38c>
   1f43c:	mov	r1, r7
   1f440:	mvn	r0, #-2147483648	; 0x80000000
   1f444:	str	r3, [sp, #4]
   1f448:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f44c:	ldr	r3, [sp, #4]
   1f450:	cmp	r0, r4
   1f454:	movge	r0, #0
   1f458:	movlt	r0, #1
   1f45c:	cmp	r0, #0
   1f460:	mvnne	r5, #-2147483648	; 0x80000000
   1f464:	bne	1f34c <__assert_fail@plt+0xe1c0>
   1f468:	mul	r5, r7, r4
   1f46c:	cmp	r5, #63	; 0x3f
   1f470:	bgt	1f374 <__assert_fail@plt+0xe1e8>
   1f474:	b	1f348 <__assert_fail@plt+0xe1bc>
   1f478:	rsb	r1, r4, #-2147483648	; 0x80000000
   1f47c:	cmp	r6, r1
   1f480:	movge	r1, #0
   1f484:	movlt	r1, #1
   1f488:	b	1f314 <__assert_fail@plt+0xe188>
   1f48c:	adds	r5, r5, #0
   1f490:	movne	r5, #1
   1f494:	cmp	r9, #0
   1f498:	orreq	r5, r5, #1
   1f49c:	cmp	r5, #0
   1f4a0:	beq	1f41c <__assert_fail@plt+0xe290>
   1f4a4:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f4a8:	rsb	r2, sl, #-2147483648	; 0x80000000
   1f4ac:	cmp	r6, r2
   1f4b0:	movge	r2, #0
   1f4b4:	movlt	r2, #1
   1f4b8:	b	1f3ac <__assert_fail@plt+0xe220>
   1f4bc:	cmp	r6, #0
   1f4c0:	blt	1f544 <__assert_fail@plt+0xe3b8>
   1f4c4:	cmn	r7, #1
   1f4c8:	beq	1f404 <__assert_fail@plt+0xe278>
   1f4cc:	mov	r1, r7
   1f4d0:	mov	r0, #-2147483648	; 0x80000000
   1f4d4:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f4d8:	cmp	r6, r0
   1f4dc:	movle	r0, #0
   1f4e0:	movgt	r0, #1
   1f4e4:	b	1f3fc <__assert_fail@plt+0xe270>
   1f4e8:	cmp	r4, #0
   1f4ec:	blt	1f584 <__assert_fail@plt+0xe3f8>
   1f4f0:	cmn	r7, #1
   1f4f4:	beq	1f468 <__assert_fail@plt+0xe2dc>
   1f4f8:	str	r3, [sp, #4]
   1f4fc:	mov	r1, r7
   1f500:	mov	r0, #-2147483648	; 0x80000000
   1f504:	b	1f448 <__assert_fail@plt+0xe2bc>
   1f508:	mov	r4, fp
   1f50c:	b	1f43c <__assert_fail@plt+0xe2b0>
   1f510:	mov	r4, fp
   1f514:	b	1f4f0 <__assert_fail@plt+0xe364>
   1f518:	cmn	r4, #1
   1f51c:	beq	1f468 <__assert_fail@plt+0xe2dc>
   1f520:	mov	r1, r4
   1f524:	mov	r0, #-2147483648	; 0x80000000
   1f528:	str	r3, [sp, #4]
   1f52c:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f530:	ldr	r3, [sp, #4]
   1f534:	cmp	r7, r0
   1f538:	movle	r0, #0
   1f53c:	movgt	r0, #1
   1f540:	b	1f45c <__assert_fail@plt+0xe2d0>
   1f544:	mov	r1, r7
   1f548:	mvn	r0, #-2147483648	; 0x80000000
   1f54c:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f550:	cmp	r6, r0
   1f554:	movge	r0, #0
   1f558:	movlt	r0, #1
   1f55c:	b	1f3fc <__assert_fail@plt+0xe270>
   1f560:	cmn	r6, #1
   1f564:	beq	1f404 <__assert_fail@plt+0xe278>
   1f568:	mov	r1, r6
   1f56c:	mov	r0, #-2147483648	; 0x80000000
   1f570:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f574:	cmp	r7, r0
   1f578:	movle	r0, #0
   1f57c:	movgt	r0, #1
   1f580:	b	1f3fc <__assert_fail@plt+0xe270>
   1f584:	mov	r1, r7
   1f588:	mvn	r0, #-2147483648	; 0x80000000
   1f58c:	str	r3, [sp, #4]
   1f590:	bl	20e58 <__assert_fail@plt+0xfccc>
   1f594:	ldr	r3, [sp, #4]
   1f598:	cmp	r0, r4
   1f59c:	movle	r0, #0
   1f5a0:	movgt	r0, #1
   1f5a4:	b	1f45c <__assert_fail@plt+0xe2d0>
   1f5a8:	push	{r4, lr}
   1f5ac:	mov	r1, #1
   1f5b0:	bl	20764 <__assert_fail@plt+0xf5d8>
   1f5b4:	cmp	r0, #0
   1f5b8:	popne	{r4, pc}
   1f5bc:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f5c0:	push	{r4, lr}
   1f5c4:	mov	r1, #1
   1f5c8:	bl	20764 <__assert_fail@plt+0xf5d8>
   1f5cc:	cmp	r0, #0
   1f5d0:	popne	{r4, pc}
   1f5d4:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f5d8:	push	{r4, lr}
   1f5dc:	bl	20764 <__assert_fail@plt+0xf5d8>
   1f5e0:	cmp	r0, #0
   1f5e4:	popne	{r4, pc}
   1f5e8:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f5ec:	push	{r4, lr}
   1f5f0:	bl	20764 <__assert_fail@plt+0xf5d8>
   1f5f4:	cmp	r0, #0
   1f5f8:	popne	{r4, pc}
   1f5fc:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f600:	push	{r4, r5, r6, lr}
   1f604:	mov	r6, r0
   1f608:	mov	r0, r1
   1f60c:	mov	r4, r1
   1f610:	bl	207ac <__assert_fail@plt+0xf620>
   1f614:	subs	r5, r0, #0
   1f618:	beq	1f630 <__assert_fail@plt+0xe4a4>
   1f61c:	mov	r2, r4
   1f620:	mov	r1, r6
   1f624:	bl	10f34 <memcpy@plt>
   1f628:	mov	r0, r5
   1f62c:	pop	{r4, r5, r6, pc}
   1f630:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f634:	push	{r4, r5, r6, lr}
   1f638:	mov	r6, r0
   1f63c:	mov	r0, r1
   1f640:	mov	r4, r1
   1f644:	bl	207ac <__assert_fail@plt+0xf620>
   1f648:	subs	r5, r0, #0
   1f64c:	beq	1f664 <__assert_fail@plt+0xe4d8>
   1f650:	mov	r2, r4
   1f654:	mov	r1, r6
   1f658:	bl	10f34 <memcpy@plt>
   1f65c:	mov	r0, r5
   1f660:	pop	{r4, r5, r6, pc}
   1f664:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f668:	push	{r4, r5, r6, lr}
   1f66c:	mov	r6, r0
   1f670:	add	r0, r1, #1
   1f674:	mov	r4, r1
   1f678:	bl	207ac <__assert_fail@plt+0xf620>
   1f67c:	subs	r5, r0, #0
   1f680:	beq	1f6a0 <__assert_fail@plt+0xe514>
   1f684:	mov	r3, #0
   1f688:	mov	r1, r6
   1f68c:	strb	r3, [r5, r4]
   1f690:	mov	r2, r4
   1f694:	bl	10f34 <memcpy@plt>
   1f698:	mov	r0, r5
   1f69c:	pop	{r4, r5, r6, pc}
   1f6a0:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f6a4:	push	{r4, r5, r6, lr}
   1f6a8:	mov	r6, r0
   1f6ac:	bl	11078 <strlen@plt>
   1f6b0:	add	r4, r0, #1
   1f6b4:	mov	r0, r4
   1f6b8:	bl	207ac <__assert_fail@plt+0xf620>
   1f6bc:	subs	r5, r0, #0
   1f6c0:	beq	1f6d8 <__assert_fail@plt+0xe54c>
   1f6c4:	mov	r2, r4
   1f6c8:	mov	r1, r6
   1f6cc:	bl	10f34 <memcpy@plt>
   1f6d0:	mov	r0, r5
   1f6d4:	pop	{r4, r5, r6, pc}
   1f6d8:	bl	1f6dc <__assert_fail@plt+0xe550>
   1f6dc:	ldr	r3, [pc, #44]	; 1f710 <__assert_fail@plt+0xe584>
   1f6e0:	push	{r4, lr}
   1f6e4:	mov	r2, #5
   1f6e8:	ldr	r1, [pc, #36]	; 1f714 <__assert_fail@plt+0xe588>
   1f6ec:	mov	r0, #0
   1f6f0:	ldr	r4, [r3]
   1f6f4:	bl	10f7c <dcgettext@plt>
   1f6f8:	ldr	r2, [pc, #24]	; 1f718 <__assert_fail@plt+0xe58c>
   1f6fc:	mov	r1, #0
   1f700:	mov	r3, r0
   1f704:	mov	r0, r4
   1f708:	bl	11000 <error@plt>
   1f70c:	bl	11168 <abort@plt>
   1f710:	andeq	r3, r3, r0, lsr #2
   1f714:	andeq	r2, r2, r8, asr #11
   1f718:	andeq	r1, r2, r4, lsr #23
   1f71c:	push	{r4, r5, r6, r7, lr}
   1f720:	sub	sp, sp, #20
   1f724:	mov	r6, r2
   1f728:	ldr	ip, [sp, #48]	; 0x30
   1f72c:	mov	r2, r1
   1f730:	mov	r7, r3
   1f734:	str	ip, [sp]
   1f738:	add	r3, sp, #8
   1f73c:	mov	r1, #0
   1f740:	mov	r5, r0
   1f744:	ldr	r4, [sp, #56]	; 0x38
   1f748:	bl	1f998 <__assert_fail@plt+0xe80c>
   1f74c:	cmp	r0, #0
   1f750:	bne	1f7d4 <__assert_fail@plt+0xe648>
   1f754:	ldrd	r0, [sp, #8]
   1f758:	cmp	r1, r7
   1f75c:	cmpeq	r0, r6
   1f760:	ldrd	r6, [sp, #40]	; 0x28
   1f764:	movcc	r3, #1
   1f768:	movcs	r3, #0
   1f76c:	cmp	r1, r7
   1f770:	cmpeq	r0, r6
   1f774:	orrhi	r3, r3, #1
   1f778:	cmp	r3, #0
   1f77c:	beq	1f7cc <__assert_fail@plt+0xe640>
   1f780:	mov	r3, #0
   1f784:	mvn	r2, #-1073741824	; 0xc0000000
   1f788:	cmp	r1, r3
   1f78c:	cmpeq	r0, r2
   1f790:	bhi	1f800 <__assert_fail@plt+0xe674>
   1f794:	bl	11090 <__errno_location@plt>
   1f798:	mov	r3, #34	; 0x22
   1f79c:	mov	r6, r3
   1f7a0:	str	r3, [r0]
   1f7a4:	cmp	r4, #0
   1f7a8:	moveq	r4, #1
   1f7ac:	mov	r0, r5
   1f7b0:	bl	1e4cc <__assert_fail@plt+0xd340>
   1f7b4:	mov	r1, r6
   1f7b8:	ldr	r3, [sp, #52]	; 0x34
   1f7bc:	ldr	r2, [pc, #144]	; 1f854 <__assert_fail@plt+0xe6c8>
   1f7c0:	str	r0, [sp]
   1f7c4:	mov	r0, r4
   1f7c8:	bl	11000 <error@plt>
   1f7cc:	add	sp, sp, #20
   1f7d0:	pop	{r4, r5, r6, r7, pc}
   1f7d4:	cmp	r0, #1
   1f7d8:	beq	1f814 <__assert_fail@plt+0xe688>
   1f7dc:	cmp	r0, #3
   1f7e0:	beq	1f844 <__assert_fail@plt+0xe6b8>
   1f7e4:	cmp	r4, #0
   1f7e8:	beq	1f834 <__assert_fail@plt+0xe6a8>
   1f7ec:	bl	11090 <__errno_location@plt>
   1f7f0:	ldr	r6, [r0]
   1f7f4:	cmp	r6, #22
   1f7f8:	moveq	r6, #0
   1f7fc:	b	1f7ac <__assert_fail@plt+0xe620>
   1f800:	bl	11090 <__errno_location@plt>
   1f804:	mov	r3, #75	; 0x4b
   1f808:	mov	r6, r3
   1f80c:	str	r3, [r0]
   1f810:	b	1f7a4 <__assert_fail@plt+0xe618>
   1f814:	bl	11090 <__errno_location@plt>
   1f818:	mov	r3, #75	; 0x4b
   1f81c:	mov	r6, r3
   1f820:	str	r3, [r0]
   1f824:	cmp	r4, #0
   1f828:	moveq	r4, #1
   1f82c:	bne	1f7f4 <__assert_fail@plt+0xe668>
   1f830:	b	1f7ac <__assert_fail@plt+0xe620>
   1f834:	bl	11090 <__errno_location@plt>
   1f838:	mov	r4, #1
   1f83c:	ldr	r6, [r0]
   1f840:	b	1f7f4 <__assert_fail@plt+0xe668>
   1f844:	bl	11090 <__errno_location@plt>
   1f848:	mov	r6, #0
   1f84c:	str	r6, [r0]
   1f850:	b	1f824 <__assert_fail@plt+0xe698>
   1f854:	andeq	r2, r2, ip, lsl #3
   1f858:	push	{r4, r5, r6, r7, lr}
   1f85c:	sub	sp, sp, #20
   1f860:	mov	r6, r2
   1f864:	ldr	r1, [sp, #48]	; 0x30
   1f868:	mov	r7, r3
   1f86c:	str	r1, [sp]
   1f870:	add	r3, sp, #8
   1f874:	mov	r2, #10
   1f878:	mov	r1, #0
   1f87c:	mov	r5, r0
   1f880:	ldr	r4, [sp, #56]	; 0x38
   1f884:	bl	1f998 <__assert_fail@plt+0xe80c>
   1f888:	cmp	r0, #0
   1f88c:	bne	1f910 <__assert_fail@plt+0xe784>
   1f890:	ldrd	r0, [sp, #8]
   1f894:	cmp	r7, r1
   1f898:	cmpeq	r6, r0
   1f89c:	ldrd	r6, [sp, #40]	; 0x28
   1f8a0:	movhi	r3, #1
   1f8a4:	movls	r3, #0
   1f8a8:	cmp	r7, r1
   1f8ac:	cmpeq	r6, r0
   1f8b0:	orrcc	r3, r3, #1
   1f8b4:	cmp	r3, #0
   1f8b8:	beq	1f908 <__assert_fail@plt+0xe77c>
   1f8bc:	mov	r3, #0
   1f8c0:	mvn	r2, #-1073741824	; 0xc0000000
   1f8c4:	cmp	r1, r3
   1f8c8:	cmpeq	r0, r2
   1f8cc:	bhi	1f93c <__assert_fail@plt+0xe7b0>
   1f8d0:	bl	11090 <__errno_location@plt>
   1f8d4:	mov	r3, #34	; 0x22
   1f8d8:	mov	r6, r3
   1f8dc:	str	r3, [r0]
   1f8e0:	cmp	r4, #0
   1f8e4:	moveq	r4, #1
   1f8e8:	mov	r0, r5
   1f8ec:	bl	1e4cc <__assert_fail@plt+0xd340>
   1f8f0:	mov	r1, r6
   1f8f4:	ldr	r3, [sp, #52]	; 0x34
   1f8f8:	ldr	r2, [pc, #144]	; 1f990 <__assert_fail@plt+0xe804>
   1f8fc:	str	r0, [sp]
   1f900:	mov	r0, r4
   1f904:	bl	11000 <error@plt>
   1f908:	add	sp, sp, #20
   1f90c:	pop	{r4, r5, r6, r7, pc}
   1f910:	cmp	r0, #1
   1f914:	beq	1f950 <__assert_fail@plt+0xe7c4>
   1f918:	cmp	r0, #3
   1f91c:	beq	1f980 <__assert_fail@plt+0xe7f4>
   1f920:	cmp	r4, #0
   1f924:	beq	1f970 <__assert_fail@plt+0xe7e4>
   1f928:	bl	11090 <__errno_location@plt>
   1f92c:	ldr	r6, [r0]
   1f930:	cmp	r6, #22
   1f934:	moveq	r6, #0
   1f938:	b	1f8e8 <__assert_fail@plt+0xe75c>
   1f93c:	bl	11090 <__errno_location@plt>
   1f940:	mov	r3, #75	; 0x4b
   1f944:	mov	r6, r3
   1f948:	str	r3, [r0]
   1f94c:	b	1f8e0 <__assert_fail@plt+0xe754>
   1f950:	bl	11090 <__errno_location@plt>
   1f954:	mov	r3, #75	; 0x4b
   1f958:	mov	r6, r3
   1f95c:	str	r3, [r0]
   1f960:	cmp	r4, #0
   1f964:	moveq	r4, #1
   1f968:	bne	1f930 <__assert_fail@plt+0xe7a4>
   1f96c:	b	1f8e8 <__assert_fail@plt+0xe75c>
   1f970:	bl	11090 <__errno_location@plt>
   1f974:	mov	r4, #1
   1f978:	ldr	r6, [r0]
   1f97c:	b	1f930 <__assert_fail@plt+0xe7a4>
   1f980:	bl	11090 <__errno_location@plt>
   1f984:	mov	r6, #0
   1f988:	str	r6, [r0]
   1f98c:	b	1f960 <__assert_fail@plt+0xe7d4>
   1f990:	andeq	r2, r2, ip, lsl #3
   1f994:	andeq	r0, r0, r0
   1f998:	cmp	r2, #36	; 0x24
   1f99c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9a0:	sub	sp, sp, #52	; 0x34
   1f9a4:	bhi	20734 <__assert_fail@plt+0xf5a8>
   1f9a8:	cmp	r1, #0
   1f9ac:	mov	r6, r2
   1f9b0:	mov	sl, r0
   1f9b4:	mov	r5, r1
   1f9b8:	mov	r8, r3
   1f9bc:	addeq	r5, sp, #44	; 0x2c
   1f9c0:	bl	11090 <__errno_location@plt>
   1f9c4:	mov	r3, #0
   1f9c8:	str	r3, [r0]
   1f9cc:	mov	fp, r0
   1f9d0:	bl	11054 <__ctype_b_loc@plt>
   1f9d4:	ldrb	r3, [sl]
   1f9d8:	mov	r2, sl
   1f9dc:	ldr	r0, [r0]
   1f9e0:	b	1f9e8 <__assert_fail@plt+0xe85c>
   1f9e4:	ldrb	r3, [r2, #1]!
   1f9e8:	lsl	r1, r3, #1
   1f9ec:	ldrh	r4, [r0, r1]
   1f9f0:	ands	r4, r4, #8192	; 0x2000
   1f9f4:	bne	1f9e4 <__assert_fail@plt+0xe858>
   1f9f8:	cmp	r3, #45	; 0x2d
   1f9fc:	bne	1fa10 <__assert_fail@plt+0xe884>
   1fa00:	mov	r4, #4
   1fa04:	mov	r0, r4
   1fa08:	add	sp, sp, #52	; 0x34
   1fa0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa10:	mov	r2, r6
   1fa14:	mov	r3, r4
   1fa18:	mov	r1, r5
   1fa1c:	mov	r0, sl
   1fa20:	bl	10f40 <__strtoull_internal@plt>
   1fa24:	ldr	r9, [r5]
   1fa28:	cmp	sl, r9
   1fa2c:	mov	r6, r0
   1fa30:	mov	r7, r1
   1fa34:	beq	1fa7c <__assert_fail@plt+0xe8f0>
   1fa38:	ldr	r4, [fp]
   1fa3c:	cmp	r4, #0
   1fa40:	bne	1fa6c <__assert_fail@plt+0xe8e0>
   1fa44:	ldr	r3, [sp, #88]	; 0x58
   1fa48:	cmp	r3, #0
   1fa4c:	beq	1fa5c <__assert_fail@plt+0xe8d0>
   1fa50:	ldrb	sl, [r9]
   1fa54:	cmp	sl, #0
   1fa58:	bne	1fab0 <__assert_fail@plt+0xe924>
   1fa5c:	mov	r0, r4
   1fa60:	strd	r6, [r8]
   1fa64:	add	sp, sp, #52	; 0x34
   1fa68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa6c:	cmp	r4, #34	; 0x22
   1fa70:	bne	1fa00 <__assert_fail@plt+0xe874>
   1fa74:	mov	r4, #1
   1fa78:	b	1fa44 <__assert_fail@plt+0xe8b8>
   1fa7c:	ldr	r3, [sp, #88]	; 0x58
   1fa80:	cmp	r3, #0
   1fa84:	beq	1fa00 <__assert_fail@plt+0xe874>
   1fa88:	ldrb	sl, [r9]
   1fa8c:	cmp	sl, #0
   1fa90:	beq	1fa00 <__assert_fail@plt+0xe874>
   1fa94:	mov	r1, sl
   1fa98:	mov	r0, r3
   1fa9c:	bl	11084 <strchr@plt>
   1faa0:	cmp	r0, #0
   1faa4:	movne	r6, #1
   1faa8:	movne	r7, #0
   1faac:	beq	1fa00 <__assert_fail@plt+0xe874>
   1fab0:	mov	r1, sl
   1fab4:	ldr	r0, [sp, #88]	; 0x58
   1fab8:	bl	11084 <strchr@plt>
   1fabc:	cmp	r0, #0
   1fac0:	beq	20620 <__assert_fail@plt+0xf494>
   1fac4:	sub	r3, sl, #69	; 0x45
   1fac8:	cmp	r3, #47	; 0x2f
   1facc:	ldrls	pc, [pc, r3, lsl #2]
   1fad0:	b	1fbc4 <__assert_fail@plt+0xea38>
   1fad4:	muleq	r1, r4, fp
   1fad8:	andeq	pc, r1, r4, asr #23
   1fadc:	muleq	r1, r4, fp
   1fae0:	andeq	pc, r1, r4, asr #23
   1fae4:	andeq	pc, r1, r4, asr #23
   1fae8:	andeq	pc, r1, r4, asr #23
   1faec:	muleq	r1, r4, fp
   1faf0:	andeq	pc, r1, r4, asr #23
   1faf4:	muleq	r1, r4, fp
   1faf8:	andeq	pc, r1, r4, asr #23
   1fafc:	andeq	pc, r1, r4, asr #23
   1fb00:	muleq	r1, r4, fp
   1fb04:	andeq	pc, r1, r4, asr #23
   1fb08:	andeq	pc, r1, r4, asr #23
   1fb0c:	andeq	pc, r1, r4, asr #23
   1fb10:	muleq	r1, r4, fp
   1fb14:	andeq	pc, r1, r4, asr #23
   1fb18:	andeq	pc, r1, r4, asr #23
   1fb1c:	andeq	pc, r1, r4, asr #23
   1fb20:	andeq	pc, r1, r4, asr #23
   1fb24:	muleq	r1, r4, fp
   1fb28:	muleq	r1, r4, fp
   1fb2c:	andeq	pc, r1, r4, asr #23
   1fb30:	andeq	pc, r1, r4, asr #23
   1fb34:	andeq	pc, r1, r4, asr #23
   1fb38:	andeq	pc, r1, r4, asr #23
   1fb3c:	andeq	pc, r1, r4, asr #23
   1fb40:	andeq	pc, r1, r4, asr #23
   1fb44:	andeq	pc, r1, r4, asr #23
   1fb48:	andeq	pc, r1, r4, asr #23
   1fb4c:	andeq	pc, r1, r4, asr #23
   1fb50:	andeq	pc, r1, r4, asr #23
   1fb54:	andeq	pc, r1, r4, asr #23
   1fb58:	andeq	pc, r1, r4, asr #23
   1fb5c:	muleq	r1, r4, fp
   1fb60:	andeq	pc, r1, r4, asr #23
   1fb64:	andeq	pc, r1, r4, asr #23
   1fb68:	andeq	pc, r1, r4, asr #23
   1fb6c:	muleq	r1, r4, fp
   1fb70:	andeq	pc, r1, r4, asr #23
   1fb74:	muleq	r1, r4, fp
   1fb78:	andeq	pc, r1, r4, asr #23
   1fb7c:	andeq	pc, r1, r4, asr #23
   1fb80:	andeq	pc, r1, r4, asr #23
   1fb84:	andeq	pc, r1, r4, asr #23
   1fb88:	andeq	pc, r1, r4, asr #23
   1fb8c:	andeq	pc, r1, r4, asr #23
   1fb90:	muleq	r1, r4, fp
   1fb94:	mov	r1, #48	; 0x30
   1fb98:	ldr	r0, [sp, #88]	; 0x58
   1fb9c:	bl	11084 <strchr@plt>
   1fba0:	cmp	r0, #0
   1fba4:	beq	206b4 <__assert_fail@plt+0xf528>
   1fba8:	ldrb	r3, [r9, #1]
   1fbac:	cmp	r3, #68	; 0x44
   1fbb0:	beq	20694 <__assert_fail@plt+0xf508>
   1fbb4:	cmp	r3, #105	; 0x69
   1fbb8:	beq	20664 <__assert_fail@plt+0xf4d8>
   1fbbc:	cmp	r3, #66	; 0x42
   1fbc0:	beq	20694 <__assert_fail@plt+0xf508>
   1fbc4:	ldr	r3, [pc, #2948]	; 20750 <__assert_fail@plt+0xf5c4>
   1fbc8:	mvn	r2, #0
   1fbcc:	mov	r1, #1024	; 0x400
   1fbd0:	mov	lr, #0
   1fbd4:	strd	r2, [sp]
   1fbd8:	mov	r3, #1
   1fbdc:	str	r3, [sp, #12]
   1fbe0:	sub	sl, sl, #66	; 0x42
   1fbe4:	cmp	sl, #53	; 0x35
   1fbe8:	ldrls	pc, [pc, sl, lsl #2]
   1fbec:	b	20620 <__assert_fail@plt+0xf494>
   1fbf0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fbf4:	andeq	r0, r2, r0, lsr #12
   1fbf8:	andeq	r0, r2, r0, lsr #12
   1fbfc:	andeq	r0, r2, ip, ror #8
   1fc00:	andeq	r0, r2, r0, lsr #12
   1fc04:	andeq	r0, r2, r8, lsr #7
   1fc08:	andeq	r0, r2, r0, lsr #12
   1fc0c:	andeq	r0, r2, r0, lsr #12
   1fc10:	andeq	r0, r2, r0, lsr #12
   1fc14:	andeq	r0, r2, ip, lsr #12
   1fc18:	andeq	r0, r2, r0, lsr #12
   1fc1c:	andeq	pc, r1, r8, asr #25
   1fc20:	andeq	r0, r2, r0, lsr #12
   1fc24:	andeq	r0, r2, r0, lsr #12
   1fc28:	andeq	pc, r1, r4, asr sp	; <UNPREDICTABLE>
   1fc2c:	andeq	r0, r2, r0, lsr #12
   1fc30:	andeq	r0, r2, r0, lsr #12
   1fc34:	andeq	r0, r2, r0, lsr #12
   1fc38:	ldrdeq	r0, [r2], -r4
   1fc3c:	andeq	r0, r2, r0, lsr #12
   1fc40:	andeq	r0, r2, r0, lsr #12
   1fc44:	andeq	r0, r2, r0, lsr #12
   1fc48:	andeq	r0, r2, r0, lsr #12
   1fc4c:	andeq	pc, r1, ip, lsr #29
   1fc50:	andeq	r0, r2, r8, lsl #4
   1fc54:	andeq	r0, r2, r0, lsr #12
   1fc58:	andeq	r0, r2, r0, lsr #12
   1fc5c:	andeq	r0, r2, r0, lsr #12
   1fc60:	andeq	r0, r2, r0, lsr #12
   1fc64:	andeq	r0, r2, r0, lsr #12
   1fc68:	andeq	r0, r2, r0, lsr #12
   1fc6c:	andeq	r0, r2, r0, lsr #12
   1fc70:	ldrdeq	r0, [r2], -r8
   1fc74:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fc78:	andeq	r0, r2, r0, lsr #12
   1fc7c:	andeq	r0, r2, r0, lsr #12
   1fc80:	andeq	r0, r2, r0, lsr #12
   1fc84:	andeq	r0, r2, r8, lsr #7
   1fc88:	andeq	r0, r2, r0, lsr #12
   1fc8c:	andeq	r0, r2, r0, lsr #12
   1fc90:	andeq	r0, r2, r0, lsr #12
   1fc94:	andeq	r0, r2, ip, lsr #12
   1fc98:	andeq	r0, r2, r0, lsr #12
   1fc9c:	andeq	pc, r1, r8, asr #25
   1fca0:	andeq	r0, r2, r0, lsr #12
   1fca4:	andeq	r0, r2, r0, lsr #12
   1fca8:	andeq	r0, r2, r0, lsr #12
   1fcac:	andeq	r0, r2, r0, lsr #12
   1fcb0:	andeq	r0, r2, r0, lsr #12
   1fcb4:	andeq	r0, r2, r0, lsr #12
   1fcb8:	ldrdeq	r0, [r2], -r4
   1fcbc:	andeq	r0, r2, r0, lsr #12
   1fcc0:	andeq	r0, r2, r0, lsr #12
   1fcc4:			; <UNDEFINED> instruction: 0x000201b4
   1fcc8:	mul	r0, r6, lr
   1fccc:	ldrd	sl, [sp]
   1fcd0:	umull	r2, r3, r6, r1
   1fcd4:	mla	r0, r1, r7, r0
   1fcd8:	cmp	r7, fp
   1fcdc:	cmpeq	r6, sl
   1fce0:	add	r3, r0, r3
   1fce4:	mvnhi	r3, #0
   1fce8:	mvnhi	r2, #0
   1fcec:	mul	r6, r1, r3
   1fcf0:	umull	r0, r1, r1, r2
   1fcf4:	mla	lr, lr, r2, r6
   1fcf8:	ldrd	r6, [sp]
   1fcfc:	movhi	ip, #1
   1fd00:	movls	ip, #0
   1fd04:	cmp	r7, r3
   1fd08:	cmpeq	r6, r2
   1fd0c:	mvncc	r0, #0
   1fd10:	add	r1, lr, r1
   1fd14:	mov	sl, r6
   1fd18:	movcc	r1, r0
   1fd1c:	mov	fp, r7
   1fd20:	cmp	fp, r3
   1fd24:	cmpeq	sl, r2
   1fd28:	mov	r6, r0
   1fd2c:	mov	r7, r1
   1fd30:	orrcc	ip, ip, #1
   1fd34:	ldr	r2, [sp, #12]
   1fd38:	orr	r4, r4, ip
   1fd3c:	add	r3, r9, r2
   1fd40:	str	r3, [r5]
   1fd44:	ldrb	r3, [r9, r2]
   1fd48:	cmp	r3, #0
   1fd4c:	orrne	r4, r4, #2
   1fd50:	b	1fa5c <__assert_fail@plt+0xe8d0>
   1fd54:	ldrd	sl, [sp]
   1fd58:	umull	r2, r3, r6, r1
   1fd5c:	mul	r0, r6, lr
   1fd60:	cmp	r7, fp
   1fd64:	cmpeq	r6, sl
   1fd68:	mvnhi	r2, #0
   1fd6c:	mla	r0, r1, r7, r0
   1fd70:	umull	sl, fp, r2, r1
   1fd74:	add	r3, r0, r3
   1fd78:	mul	r0, lr, r2
   1fd7c:	mvnhi	r3, #0
   1fd80:	strd	sl, [sp, #16]
   1fd84:	ldrd	sl, [sp]
   1fd88:	mla	r0, r1, r3, r0
   1fd8c:	ldr	ip, [sp, #20]
   1fd90:	cmp	r3, fp
   1fd94:	add	r0, r0, ip
   1fd98:	cmpeq	r2, sl
   1fd9c:	str	r0, [sp, #20]
   1fda0:	bls	1fdb8 <__assert_fail@plt+0xec2c>
   1fda4:	mvn	sl, #0
   1fda8:	mvn	fp, #0
   1fdac:	strd	sl, [sp, #16]
   1fdb0:	ldr	r0, [sp, #20]
   1fdb4:	ldrd	sl, [sp]
   1fdb8:	cmp	r7, fp
   1fdbc:	cmpeq	r6, sl
   1fdc0:	mul	r0, r1, r0
   1fdc4:	ldrd	r6, [sp, #16]
   1fdc8:	mla	ip, lr, r6, r0
   1fdcc:	mov	r0, r6
   1fdd0:	movhi	r0, #1
   1fdd4:	movls	r0, #0
   1fdd8:	cmp	r3, fp
   1fddc:	cmpeq	r2, sl
   1fde0:	ldrd	r2, [sp, #16]
   1fde4:	umull	r6, r7, r1, r6
   1fde8:	orrhi	r0, r0, #1
   1fdec:	cmp	fp, r3
   1fdf0:	cmpeq	sl, r2
   1fdf4:	add	r7, ip, r7
   1fdf8:	bcc	20704 <__assert_fail@plt+0xf578>
   1fdfc:	mov	sl, r6
   1fe00:	mov	fp, r7
   1fe04:	strd	r6, [sp, #24]
   1fe08:	mul	r3, r1, fp
   1fe0c:	umull	r6, r7, r1, sl
   1fe10:	mla	ip, lr, sl, r3
   1fe14:	ldrd	sl, [sp]
   1fe18:	ldrd	r2, [sp, #16]
   1fe1c:	add	r7, ip, r7
   1fe20:	cmp	fp, r3
   1fe24:	cmpeq	sl, r2
   1fe28:	mov	r3, fp
   1fe2c:	mov	r2, sl
   1fe30:	ldrd	sl, [sp, #24]
   1fe34:	orrcc	r0, r0, #1
   1fe38:	str	r0, [sp, #16]
   1fe3c:	cmp	r3, fp
   1fe40:	cmpeq	r2, sl
   1fe44:	bcs	2039c <__assert_fail@plt+0xf210>
   1fe48:	mvn	r2, #0
   1fe4c:	mvn	r3, #0
   1fe50:	mul	ip, lr, r2
   1fe54:	ldrd	sl, [sp]
   1fe58:	mla	ip, r1, r3, ip
   1fe5c:	umull	r6, r7, r2, r1
   1fe60:	ldrd	r0, [sp, #24]
   1fe64:	add	r7, ip, r7
   1fe68:	cmp	fp, r1
   1fe6c:	ldr	r1, [sp, #16]
   1fe70:	cmpeq	sl, r0
   1fe74:	orrcc	r1, r1, #1
   1fe78:	cmp	r3, fp
   1fe7c:	cmpeq	r2, sl
   1fe80:	mvnhi	r0, #0
   1fe84:	movls	ip, r7
   1fe88:	movhi	ip, r0
   1fe8c:	movls	r0, r6
   1fe90:	cmp	r3, fp
   1fe94:	cmpeq	r2, sl
   1fe98:	mov	r7, ip
   1fe9c:	mov	r6, r0
   1fea0:	movls	ip, r1
   1fea4:	orrhi	ip, r1, #1
   1fea8:	b	1fd34 <__assert_fail@plt+0xeba8>
   1feac:	ldrd	sl, [sp]
   1feb0:	umull	r2, r3, r6, r1
   1feb4:	mul	r0, r6, lr
   1feb8:	cmp	r7, fp
   1febc:	cmpeq	r6, sl
   1fec0:	mvnhi	r2, #0
   1fec4:	mla	r0, r1, r7, r0
   1fec8:	umull	sl, fp, r2, r1
   1fecc:	add	r3, r0, r3
   1fed0:	mul	r0, lr, r2
   1fed4:	mvnhi	r3, #0
   1fed8:	strd	sl, [sp, #16]
   1fedc:	ldrd	sl, [sp]
   1fee0:	mla	r0, r1, r3, r0
   1fee4:	ldr	ip, [sp, #20]
   1fee8:	cmp	r3, fp
   1feec:	add	r0, r0, ip
   1fef0:	cmpeq	r2, sl
   1fef4:	str	r0, [sp, #20]
   1fef8:	mvnhi	sl, #0
   1fefc:	mvnhi	fp, #0
   1ff00:	strdhi	sl, [sp, #16]
   1ff04:	ldrdhi	sl, [sp]
   1ff08:	ldr	r0, [sp, #16]
   1ff0c:	cmp	r3, fp
   1ff10:	ldr	r3, [sp, #20]
   1ff14:	mul	r0, lr, r0
   1ff18:	cmpeq	r2, sl
   1ff1c:	mla	r0, r1, r3, r0
   1ff20:	ldr	r3, [sp, #16]
   1ff24:	umull	r2, r3, r3, r1
   1ff28:	strd	r2, [sp, #24]
   1ff2c:	movhi	r3, #1
   1ff30:	movls	r3, #0
   1ff34:	cmp	r7, fp
   1ff38:	cmpeq	r6, sl
   1ff3c:	ldrd	r6, [sp, #16]
   1ff40:	ldr	r2, [sp, #28]
   1ff44:	movls	ip, r3
   1ff48:	orrhi	ip, r3, #1
   1ff4c:	cmp	r7, fp
   1ff50:	add	r2, r0, r2
   1ff54:	cmpeq	r6, sl
   1ff58:	str	r2, [sp, #28]
   1ff5c:	mvnhi	r2, #0
   1ff60:	mvnhi	r3, #0
   1ff64:	strdhi	r2, [sp, #24]
   1ff68:	ldrd	r6, [sp, #24]
   1ff6c:	mul	r2, r1, r7
   1ff70:	umull	sl, fp, r1, r6
   1ff74:	mla	r3, lr, r6, r2
   1ff78:	ldrd	r6, [sp]
   1ff7c:	str	r3, [sp, #32]
   1ff80:	ldrd	r2, [sp, #16]
   1ff84:	cmp	r3, r7
   1ff88:	cmpeq	r2, r6
   1ff8c:	ldrd	r2, [sp, #24]
   1ff90:	orrhi	ip, ip, #1
   1ff94:	cmp	r3, r7
   1ff98:	ldr	r3, [sp, #32]
   1ff9c:	cmpeq	r2, r6
   1ffa0:	add	r2, r3, fp
   1ffa4:	mov	fp, r2
   1ffa8:	bhi	206ec <__assert_fail@plt+0xf560>
   1ffac:	strd	sl, [sp, #16]
   1ffb0:	mul	r2, r1, fp
   1ffb4:	umull	r6, r7, r1, sl
   1ffb8:	mla	r3, lr, sl, r2
   1ffbc:	ldrd	sl, [sp]
   1ffc0:	str	r3, [sp, #32]
   1ffc4:	ldrd	r2, [sp, #24]
   1ffc8:	cmp	r3, fp
   1ffcc:	cmpeq	r2, sl
   1ffd0:	ldrd	r2, [sp, #16]
   1ffd4:	orrhi	ip, ip, #1
   1ffd8:	cmp	fp, r3
   1ffdc:	ldr	r3, [sp, #32]
   1ffe0:	cmpeq	sl, r2
   1ffe4:	add	r2, r3, r7
   1ffe8:	mov	r7, r2
   1ffec:	mvncc	r7, #0
   1fff0:	mvncc	r6, #0
   1fff4:	mul	r2, r1, r7
   1fff8:	mov	sl, r6
   1fffc:	strd	r6, [sp, #24]
   20000:	mla	r0, lr, sl, r2
   20004:	ldrd	r2, [sp, #16]
   20008:	ldrd	sl, [sp]
   2000c:	umull	r6, r7, r1, r6
   20010:	cmp	fp, r3
   20014:	cmpeq	sl, r2
   20018:	mov	r3, fp
   2001c:	mov	r2, sl
   20020:	ldrd	sl, [sp, #24]
   20024:	orrcc	ip, ip, #1
   20028:	add	r7, r0, r7
   2002c:	cmp	r3, fp
   20030:	cmpeq	r2, sl
   20034:	mvncc	r6, #0
   20038:	mvncc	r7, #0
   2003c:	umull	sl, fp, r1, r6
   20040:	mul	r3, r1, r7
   20044:	strd	sl, [sp, #16]
   20048:	mla	r0, lr, r6, r3
   2004c:	ldrd	sl, [sp, #24]
   20050:	ldrd	r2, [sp]
   20054:	cmp	r3, fp
   20058:	cmpeq	r2, sl
   2005c:	orrcc	ip, ip, #1
   20060:	cmp	r3, r7
   20064:	ldr	r3, [sp, #20]
   20068:	cmpeq	r2, r6
   2006c:	add	r3, r0, r3
   20070:	str	r3, [sp, #20]
   20074:	mvncc	r2, #0
   20078:	mvncc	r3, #0
   2007c:	ldrdcs	r2, [sp, #16]
   20080:	ldrd	sl, [sp]
   20084:	mul	r0, r1, r3
   20088:	cmp	fp, r7
   2008c:	str	r0, [sp, #16]
   20090:	cmpeq	sl, r6
   20094:	ldr	r6, [sp, #16]
   20098:	umull	r0, r1, r1, r2
   2009c:	mla	lr, lr, r2, r6
   200a0:	orrcc	ip, ip, #1
   200a4:	cmp	r3, fp
   200a8:	cmpeq	r2, sl
   200ac:	add	r1, lr, r1
   200b0:	bls	200bc <__assert_fail@plt+0xef30>
   200b4:	mvn	r0, #0
   200b8:	mov	r1, r0
   200bc:	cmp	r3, fp
   200c0:	cmpeq	r2, sl
   200c4:	mov	r6, r0
   200c8:	mov	r7, r1
   200cc:	orrhi	ip, ip, #1
   200d0:	b	1fd34 <__assert_fail@plt+0xeba8>
   200d4:	ldrd	sl, [sp]
   200d8:	umull	r2, r3, r6, r1
   200dc:	mul	r0, r6, lr
   200e0:	cmp	r7, fp
   200e4:	cmpeq	r6, sl
   200e8:	mvnhi	r2, #0
   200ec:	mla	r0, r1, r7, r0
   200f0:	umull	sl, fp, r1, r2
   200f4:	add	r3, r0, r3
   200f8:	mvnhi	r3, #0
   200fc:	strd	sl, [sp, #16]
   20100:	mul	r0, r1, r3
   20104:	ldrd	sl, [sp]
   20108:	mla	r0, lr, r2, r0
   2010c:	ldr	ip, [sp, #20]
   20110:	cmp	fp, r3
   20114:	add	r0, r0, ip
   20118:	cmpeq	sl, r2
   2011c:	str	r0, [sp, #20]
   20120:	mvncc	sl, #0
   20124:	mvncc	fp, #0
   20128:	strdcc	sl, [sp, #16]
   2012c:	ldrdcc	sl, [sp]
   20130:	ldr	r0, [sp, #16]
   20134:	cmp	fp, r3
   20138:	cmpeq	sl, r2
   2013c:	mul	r0, lr, r0
   20140:	ldr	r2, [sp, #20]
   20144:	ldr	r3, [sp, #16]
   20148:	movcc	ip, #1
   2014c:	movcs	ip, #0
   20150:	cmp	r7, fp
   20154:	cmpeq	r6, sl
   20158:	ldrd	r6, [sp, #16]
   2015c:	mla	r0, r1, r2, r0
   20160:	umull	r2, r3, r3, r1
   20164:	orrhi	ip, ip, #1
   20168:	cmp	r7, fp
   2016c:	cmpeq	r6, sl
   20170:	add	r3, r0, r3
   20174:	mvnhi	r3, #0
   20178:	mvnhi	r2, #0
   2017c:	mul	r0, r1, r3
   20180:	cmp	r7, fp
   20184:	str	r0, [sp, #24]
   20188:	cmpeq	r6, sl
   2018c:	ldr	r6, [sp, #24]
   20190:	umull	r0, r1, r1, r2
   20194:	mla	lr, lr, r2, r6
   20198:	orrhi	ip, ip, #1
   2019c:	cmp	fp, r3
   201a0:	cmpeq	sl, r2
   201a4:	mvncc	r0, #0
   201a8:	add	r1, lr, r1
   201ac:	movcc	r1, r0
   201b0:	b	1fd20 <__assert_fail@plt+0xeb94>
   201b4:	cmp	r6, #0
   201b8:	sbcs	r3, r7, #0
   201bc:	blt	20654 <__assert_fail@plt+0xf4c8>
   201c0:	adds	r6, r6, r6
   201c4:	adc	r7, r7, r7
   201c8:	mov	ip, #0
   201cc:	b	1fd34 <__assert_fail@plt+0xeba8>
   201d0:	mov	ip, #0
   201d4:	b	1fd34 <__assert_fail@plt+0xeba8>
   201d8:	ldr	r3, [pc, #1396]	; 20754 <__assert_fail@plt+0xf5c8>
   201dc:	mvn	r2, #0
   201e0:	cmp	r7, r3
   201e4:	cmpeq	r6, r2
   201e8:	bhi	20654 <__assert_fail@plt+0xf4c8>
   201ec:	lsl	r3, r7, #9
   201f0:	orr	r3, r3, r6, lsr #23
   201f4:	lsl	r2, r6, #9
   201f8:	mov	r6, r2
   201fc:	mov	r7, r3
   20200:	mov	ip, #0
   20204:	b	1fd34 <__assert_fail@plt+0xeba8>
   20208:	ldrd	sl, [sp]
   2020c:	umull	r2, r3, r6, r1
   20210:	mul	r0, r6, lr
   20214:	cmp	r7, fp
   20218:	cmpeq	r6, sl
   2021c:	mvnhi	r2, #0
   20220:	mla	r0, r1, r7, r0
   20224:	umull	sl, fp, r2, r1
   20228:	add	r3, r0, r3
   2022c:	mul	r0, lr, r2
   20230:	mvnhi	r3, #0
   20234:	strd	sl, [sp, #16]
   20238:	ldrd	sl, [sp]
   2023c:	mla	r0, r1, r3, r0
   20240:	ldr	ip, [sp, #20]
   20244:	cmp	r3, fp
   20248:	add	r0, r0, ip
   2024c:	cmpeq	r2, sl
   20250:	str	r0, [sp, #20]
   20254:	mvnhi	sl, #0
   20258:	mvnhi	fp, #0
   2025c:	strdhi	sl, [sp, #16]
   20260:	ldrdhi	sl, [sp]
   20264:	ldr	r0, [sp, #16]
   20268:	cmp	r3, fp
   2026c:	ldr	r3, [sp, #20]
   20270:	mul	r0, lr, r0
   20274:	cmpeq	r2, sl
   20278:	mla	r0, r1, r3, r0
   2027c:	ldr	r3, [sp, #16]
   20280:	umull	r2, r3, r3, r1
   20284:	strd	r2, [sp, #24]
   20288:	movhi	r3, #1
   2028c:	movls	r3, #0
   20290:	cmp	r7, fp
   20294:	cmpeq	r6, sl
   20298:	ldrd	r6, [sp, #16]
   2029c:	ldr	r2, [sp, #28]
   202a0:	movls	ip, r3
   202a4:	orrhi	ip, r3, #1
   202a8:	cmp	r7, fp
   202ac:	add	r2, r0, r2
   202b0:	cmpeq	r6, sl
   202b4:	str	r2, [sp, #28]
   202b8:	mvnhi	r2, #0
   202bc:	mvnhi	r3, #0
   202c0:	strdhi	r2, [sp, #24]
   202c4:	ldrd	r6, [sp, #24]
   202c8:	mul	r2, lr, r6
   202cc:	umull	sl, fp, r6, r1
   202d0:	mla	r3, r1, r7, r2
   202d4:	ldrd	r6, [sp]
   202d8:	str	r3, [sp, #32]
   202dc:	ldrd	r2, [sp, #16]
   202e0:	cmp	r3, r7
   202e4:	cmpeq	r2, r6
   202e8:	ldrd	r2, [sp, #24]
   202ec:	orrhi	ip, ip, #1
   202f0:	cmp	r3, r7
   202f4:	ldr	r3, [sp, #32]
   202f8:	cmpeq	r2, r6
   202fc:	add	r2, r3, fp
   20300:	mov	fp, r2
   20304:	bhi	2071c <__assert_fail@plt+0xf590>
   20308:	strd	sl, [sp, #16]
   2030c:	mul	r2, lr, sl
   20310:	umull	r6, r7, sl, r1
   20314:	mla	r3, r1, fp, r2
   20318:	ldrd	sl, [sp]
   2031c:	str	r3, [sp, #32]
   20320:	ldrd	r2, [sp, #24]
   20324:	cmp	r3, fp
   20328:	cmpeq	r2, sl
   2032c:	ldrd	r2, [sp, #16]
   20330:	orrhi	ip, ip, #1
   20334:	cmp	r3, fp
   20338:	ldr	r3, [sp, #32]
   2033c:	cmpeq	r2, sl
   20340:	add	r2, r3, r7
   20344:	mov	r7, r2
   20348:	mvnhi	r7, #0
   2034c:	mvnhi	r6, #0
   20350:	mul	r2, r1, r7
   20354:	mov	sl, r6
   20358:	strd	r6, [sp, #24]
   2035c:	mla	r0, lr, sl, r2
   20360:	ldrd	sl, [sp]
   20364:	ldrd	r2, [sp, #16]
   20368:	umull	r6, r7, r1, r6
   2036c:	cmp	r3, fp
   20370:	cmpeq	r2, sl
   20374:	mov	r3, ip
   20378:	orrhi	r3, r3, #1
   2037c:	mov	r2, sl
   20380:	str	r3, [sp, #16]
   20384:	mov	r3, fp
   20388:	ldrd	sl, [sp, #24]
   2038c:	add	r7, r0, r7
   20390:	cmp	r3, fp
   20394:	cmpeq	r2, sl
   20398:	bcc	1fe48 <__assert_fail@plt+0xecbc>
   2039c:	mov	r2, r6
   203a0:	mov	r3, r7
   203a4:	b	1fe50 <__assert_fail@plt+0xecc4>
   203a8:	ldrd	sl, [sp]
   203ac:	umull	r2, r3, r6, r1
   203b0:	mul	r0, r6, lr
   203b4:	cmp	r7, fp
   203b8:	cmpeq	r6, sl
   203bc:	mvnhi	r2, #0
   203c0:	mla	r0, r1, r7, r0
   203c4:	umull	sl, fp, r2, r1
   203c8:	add	r3, r0, r3
   203cc:	mul	r0, lr, r2
   203d0:	mvnhi	r3, #0
   203d4:	strd	sl, [sp, #16]
   203d8:	ldrd	sl, [sp]
   203dc:	mla	r0, r1, r3, r0
   203e0:	ldr	ip, [sp, #20]
   203e4:	cmp	r3, fp
   203e8:	add	r0, r0, ip
   203ec:	cmpeq	r2, sl
   203f0:	str	r0, [sp, #20]
   203f4:	mvnhi	sl, #0
   203f8:	mvnhi	fp, #0
   203fc:	strdhi	sl, [sp, #16]
   20400:	ldrdhi	sl, [sp]
   20404:	ldr	r0, [sp, #16]
   20408:	cmp	r3, fp
   2040c:	ldr	ip, [sp, #20]
   20410:	mul	r0, lr, r0
   20414:	ldr	r3, [sp, #16]
   20418:	cmpeq	r2, sl
   2041c:	mla	r0, r1, ip, r0
   20420:	umull	r2, r3, r3, r1
   20424:	movhi	r1, #1
   20428:	movls	r1, #0
   2042c:	cmp	r7, fp
   20430:	cmpeq	r6, sl
   20434:	ldrd	r6, [sp, #16]
   20438:	movls	ip, r1
   2043c:	orrhi	ip, r1, #1
   20440:	cmp	r7, fp
   20444:	cmpeq	r6, sl
   20448:	mvnhi	r2, #0
   2044c:	add	r3, r0, r3
   20450:	movhi	r3, r2
   20454:	cmp	r7, fp
   20458:	cmpeq	r6, sl
   2045c:	mov	r7, r3
   20460:	mov	r6, r2
   20464:	orrhi	ip, ip, #1
   20468:	b	1fd34 <__assert_fail@plt+0xeba8>
   2046c:	ldrd	sl, [sp]
   20470:	umull	r2, r3, r6, r1
   20474:	mul	r0, r6, lr
   20478:	cmp	r7, fp
   2047c:	cmpeq	r6, sl
   20480:	mvnhi	r2, #0
   20484:	mla	r0, r1, r7, r0
   20488:	umull	sl, fp, r1, r2
   2048c:	add	r3, r0, r3
   20490:	mvnhi	r3, #0
   20494:	strd	sl, [sp, #16]
   20498:	mul	r0, r1, r3
   2049c:	ldrd	sl, [sp]
   204a0:	mla	r0, lr, r2, r0
   204a4:	ldr	ip, [sp, #20]
   204a8:	cmp	fp, r3
   204ac:	add	r0, r0, ip
   204b0:	cmpeq	sl, r2
   204b4:	str	r0, [sp, #20]
   204b8:	mvncc	sl, #0
   204bc:	mvncc	fp, #0
   204c0:	strdcc	sl, [sp, #16]
   204c4:	ldrdcc	sl, [sp]
   204c8:	ldr	r0, [sp, #16]
   204cc:	cmp	fp, r3
   204d0:	ldr	r3, [sp, #20]
   204d4:	mul	r0, lr, r0
   204d8:	cmpeq	sl, r2
   204dc:	mla	r0, r1, r3, r0
   204e0:	ldr	r3, [sp, #16]
   204e4:	umull	r2, r3, r3, r1
   204e8:	strd	r2, [sp, #24]
   204ec:	movcc	r3, #1
   204f0:	movcs	r3, #0
   204f4:	cmp	r7, fp
   204f8:	cmpeq	r6, sl
   204fc:	movls	ip, r3
   20500:	orrhi	ip, r3, #1
   20504:	ldrd	r2, [sp, #16]
   20508:	cmp	r3, fp
   2050c:	ldr	r3, [sp, #28]
   20510:	cmpeq	r2, sl
   20514:	add	r3, r0, r3
   20518:	str	r3, [sp, #28]
   2051c:	bhi	206d4 <__assert_fail@plt+0xf548>
   20520:	ldrd	r2, [sp, #24]
   20524:	mov	sl, r2
   20528:	mov	fp, r3
   2052c:	mul	r2, lr, sl
   20530:	umull	r6, r7, sl, r1
   20534:	mla	r0, r1, fp, r2
   20538:	ldrd	r2, [sp]
   2053c:	add	r7, r0, r7
   20540:	mov	sl, r2
   20544:	mov	fp, r3
   20548:	strd	r2, [sp, #32]
   2054c:	ldrd	r2, [sp, #16]
   20550:	cmp	r3, fp
   20554:	cmpeq	r2, sl
   20558:	ldrd	r2, [sp, #32]
   2055c:	ldrd	sl, [sp, #24]
   20560:	orrhi	ip, ip, #1
   20564:	cmp	fp, r3
   20568:	cmpeq	sl, r2
   2056c:	mvnhi	r6, #0
   20570:	mvnhi	r7, #0
   20574:	umull	sl, fp, r6, r1
   20578:	mul	r3, lr, r6
   2057c:	strd	sl, [sp, #16]
   20580:	mla	r0, r1, r7, r3
   20584:	ldrd	sl, [sp, #24]
   20588:	ldrd	r2, [sp]
   2058c:	cmp	fp, r3
   20590:	cmpeq	sl, r2
   20594:	orrhi	ip, ip, #1
   20598:	cmp	r7, r3
   2059c:	ldr	r3, [sp, #20]
   205a0:	cmpeq	r6, r2
   205a4:	add	r3, r0, r3
   205a8:	str	r3, [sp, #20]
   205ac:	mvnhi	r2, #0
   205b0:	mvnhi	r3, #0
   205b4:	ldrdls	r2, [sp, #16]
   205b8:	ldrd	sl, [sp]
   205bc:	mul	r0, r1, r3
   205c0:	cmp	r7, fp
   205c4:	str	r0, [sp, #16]
   205c8:	cmpeq	r6, sl
   205cc:	ldr	r6, [sp, #16]
   205d0:	umull	r0, r1, r1, r2
   205d4:	mla	lr, lr, r2, r6
   205d8:	orrhi	ip, ip, #1
   205dc:	cmp	r3, fp
   205e0:	cmpeq	r2, sl
   205e4:	add	r1, lr, r1
   205e8:	bls	200bc <__assert_fail@plt+0xef30>
   205ec:	b	200b4 <__assert_fail@plt+0xef28>
   205f0:	ldr	r3, [pc, #344]	; 20750 <__assert_fail@plt+0xf5c4>
   205f4:	mvn	r2, #0
   205f8:	cmp	r7, r3
   205fc:	cmpeq	r6, r2
   20600:	bhi	20654 <__assert_fail@plt+0xf4c8>
   20604:	lsl	r3, r7, #10
   20608:	orr	r3, r3, r6, lsr #22
   2060c:	lsl	r2, r6, #10
   20610:	mov	r6, r2
   20614:	mov	r7, r3
   20618:	mov	ip, #0
   2061c:	b	1fd34 <__assert_fail@plt+0xeba8>
   20620:	strd	r6, [r8]
   20624:	orr	r4, r4, #2
   20628:	b	1fa04 <__assert_fail@plt+0xe878>
   2062c:	ldrd	r2, [sp]
   20630:	cmp	r7, r3
   20634:	cmpeq	r6, r2
   20638:	bhi	20654 <__assert_fail@plt+0xf4c8>
   2063c:	mul	r3, r6, lr
   20640:	mov	ip, #0
   20644:	mla	r3, r1, r7, r3
   20648:	umull	r6, r7, r6, r1
   2064c:	add	r7, r3, r7
   20650:	b	1fd34 <__assert_fail@plt+0xeba8>
   20654:	mvn	r6, #0
   20658:	mvn	r7, #0
   2065c:	mov	ip, #1
   20660:	b	1fd34 <__assert_fail@plt+0xeba8>
   20664:	ldrb	r3, [r9, #2]
   20668:	mvn	r2, #0
   2066c:	mov	r1, #1024	; 0x400
   20670:	cmp	r3, #66	; 0x42
   20674:	ldr	r3, [pc, #212]	; 20750 <__assert_fail@plt+0xf5c4>
   20678:	mov	lr, #0
   2067c:	strd	r2, [sp]
   20680:	moveq	r3, #3
   20684:	streq	r3, [sp, #12]
   20688:	movne	r3, #1
   2068c:	strne	r3, [sp, #12]
   20690:	b	1fbe0 <__assert_fail@plt+0xea54>
   20694:	add	r3, pc, #172	; 0xac
   20698:	ldrd	r2, [r3]
   2069c:	mov	r1, #1000	; 0x3e8
   206a0:	mov	lr, #0
   206a4:	strd	r2, [sp]
   206a8:	mov	r3, #2
   206ac:	str	r3, [sp, #12]
   206b0:	b	1fbe0 <__assert_fail@plt+0xea54>
   206b4:	ldr	r3, [pc, #148]	; 20750 <__assert_fail@plt+0xf5c4>
   206b8:	mvn	r2, #0
   206bc:	mov	lr, r0
   206c0:	strd	r2, [sp]
   206c4:	mov	r3, #1
   206c8:	mov	r1, #1024	; 0x400
   206cc:	str	r3, [sp, #12]
   206d0:	b	1fbe0 <__assert_fail@plt+0xea54>
   206d4:	mvn	r2, #0
   206d8:	mvn	r3, #0
   206dc:	mov	sl, r2
   206e0:	strd	r2, [sp, #24]
   206e4:	mov	fp, r3
   206e8:	b	2052c <__assert_fail@plt+0xf3a0>
   206ec:	mvn	r2, #0
   206f0:	mvn	r3, #0
   206f4:	mov	sl, r2
   206f8:	strd	r2, [sp, #16]
   206fc:	mov	fp, r3
   20700:	b	1ffb0 <__assert_fail@plt+0xee24>
   20704:	mvn	r2, #0
   20708:	mvn	r3, #0
   2070c:	mov	sl, r2
   20710:	strd	r2, [sp, #24]
   20714:	mov	fp, r3
   20718:	b	1fe08 <__assert_fail@plt+0xec7c>
   2071c:	mvn	r2, #0
   20720:	mvn	r3, #0
   20724:	mov	sl, r2
   20728:	strd	r2, [sp, #16]
   2072c:	mov	fp, r3
   20730:	b	2030c <__assert_fail@plt+0xf180>
   20734:	ldr	r3, [pc, #28]	; 20758 <__assert_fail@plt+0xf5cc>
   20738:	mov	r2, #85	; 0x55
   2073c:	ldr	r1, [pc, #24]	; 2075c <__assert_fail@plt+0xf5d0>
   20740:	ldr	r0, [pc, #24]	; 20760 <__assert_fail@plt+0xf5d4>
   20744:	bl	1118c <__assert_fail@plt>
   20748:	blmi	ff1ca70c <optarg@@GLIBC_2.4+0xff197584>
   2074c:	subeq	r8, r1, r7, lsr r9
   20750:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   20754:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   20758:	ldrdeq	r2, [r2], -ip
   2075c:	andeq	r2, r2, r8, ror #11
   20760:	strdeq	r2, [r2], -r8
   20764:	cmp	r1, #0
   20768:	cmpne	r0, #0
   2076c:	moveq	r1, #1
   20770:	moveq	r0, r1
   20774:	umull	r2, r3, r0, r1
   20778:	adds	r3, r3, #0
   2077c:	movne	r3, #1
   20780:	cmp	r2, #0
   20784:	blt	20794 <__assert_fail@plt+0xf608>
   20788:	cmp	r3, #0
   2078c:	bne	20794 <__assert_fail@plt+0xf608>
   20790:	b	10ebc <calloc@plt>
   20794:	push	{r4, lr}
   20798:	bl	11090 <__errno_location@plt>
   2079c:	mov	r3, #12
   207a0:	str	r3, [r0]
   207a4:	mov	r0, #0
   207a8:	pop	{r4, pc}
   207ac:	cmp	r0, #0
   207b0:	moveq	r0, #1
   207b4:	cmp	r0, #0
   207b8:	blt	207c0 <__assert_fail@plt+0xf634>
   207bc:	b	1100c <malloc@plt>
   207c0:	push	{r4, lr}
   207c4:	bl	11090 <__errno_location@plt>
   207c8:	mov	r3, #12
   207cc:	str	r3, [r0]
   207d0:	mov	r0, #0
   207d4:	pop	{r4, pc}
   207d8:	cmp	r0, #0
   207dc:	beq	20800 <__assert_fail@plt+0xf674>
   207e0:	cmp	r1, #0
   207e4:	push	{lr}		; (str lr, [sp, #-4]!)
   207e8:	sub	sp, sp, #12
   207ec:	beq	20808 <__assert_fail@plt+0xf67c>
   207f0:	blt	20820 <__assert_fail@plt+0xf694>
   207f4:	add	sp, sp, #12
   207f8:	pop	{lr}		; (ldr lr, [sp], #4)
   207fc:	b	10f88 <realloc@plt>
   20800:	mov	r0, r1
   20804:	b	207ac <__assert_fail@plt+0xf620>
   20808:	str	r1, [sp, #4]
   2080c:	bl	1a508 <__assert_fail@plt+0x937c>
   20810:	ldr	r3, [sp, #4]
   20814:	mov	r0, r3
   20818:	add	sp, sp, #12
   2081c:	pop	{pc}		; (ldr pc, [sp], #4)
   20820:	bl	11090 <__errno_location@plt>
   20824:	mov	r2, #12
   20828:	mov	r3, #0
   2082c:	str	r2, [r0]
   20830:	b	20814 <__assert_fail@plt+0xf688>
   20834:	push	{r4, r5, r6, lr}
   20838:	mov	r4, r0
   2083c:	bl	10fe8 <__fpending@plt>
   20840:	ldr	r5, [r4]
   20844:	and	r5, r5, #32
   20848:	mov	r6, r0
   2084c:	mov	r0, r4
   20850:	bl	1a370 <__assert_fail@plt+0x91e4>
   20854:	cmp	r5, #0
   20858:	mov	r4, r0
   2085c:	bne	2087c <__assert_fail@plt+0xf6f0>
   20860:	cmp	r0, #0
   20864:	beq	20874 <__assert_fail@plt+0xf6e8>
   20868:	cmp	r6, #0
   2086c:	beq	20898 <__assert_fail@plt+0xf70c>
   20870:	mvn	r4, #0
   20874:	mov	r0, r4
   20878:	pop	{r4, r5, r6, pc}
   2087c:	cmp	r0, #0
   20880:	bne	20870 <__assert_fail@plt+0xf6e4>
   20884:	bl	11090 <__errno_location@plt>
   20888:	str	r4, [r0]
   2088c:	mvn	r4, #0
   20890:	mov	r0, r4
   20894:	pop	{r4, r5, r6, pc}
   20898:	bl	11090 <__errno_location@plt>
   2089c:	ldr	r4, [r0]
   208a0:	subs	r4, r4, #9
   208a4:	mvnne	r4, #0
   208a8:	mov	r0, r4
   208ac:	pop	{r4, r5, r6, pc}
   208b0:	push	{r1, r2, r3}
   208b4:	push	{r4, r5, r6, r7, lr}
   208b8:	sub	sp, sp, #8
   208bc:	add	r3, sp, #32
   208c0:	ldr	r1, [sp, #28]
   208c4:	str	r3, [sp, #4]
   208c8:	cmp	r1, #0
   208cc:	beq	20964 <__assert_fail@plt+0xf7d8>
   208d0:	ldr	r2, [pc, #412]	; 20a74 <__assert_fail@plt+0xf8e8>
   208d4:	mov	r5, r0
   208d8:	cmp	r1, r2
   208dc:	bne	20928 <__assert_fail@plt+0xf79c>
   208e0:	ldr	r6, [pc, #400]	; 20a78 <__assert_fail@plt+0xf8ec>
   208e4:	ldr	r7, [r3]
   208e8:	add	r2, sp, #36	; 0x24
   208ec:	ldr	r3, [r6]
   208f0:	str	r2, [sp, #4]
   208f4:	cmp	r3, #0
   208f8:	mov	r2, r7
   208fc:	blt	20a28 <__assert_fail@plt+0xf89c>
   20900:	bl	110fc <fcntl64@plt>
   20904:	subs	r4, r0, #0
   20908:	blt	209ac <__assert_fail@plt+0xf820>
   2090c:	mov	r3, #1
   20910:	str	r3, [r6]
   20914:	mov	r0, r4
   20918:	add	sp, sp, #8
   2091c:	pop	{r4, r5, r6, r7, lr}
   20920:	add	sp, sp, #12
   20924:	bx	lr
   20928:	cmp	r1, #11
   2092c:	beq	20954 <__assert_fail@plt+0xf7c8>
   20930:	bgt	20974 <__assert_fail@plt+0xf7e8>
   20934:	cmp	r1, #3
   20938:	beq	20954 <__assert_fail@plt+0xf7c8>
   2093c:	ble	20a68 <__assert_fail@plt+0xf8dc>
   20940:	cmp	r1, #8
   20944:	beq	20994 <__assert_fail@plt+0xf808>
   20948:	ble	20994 <__assert_fail@plt+0xf808>
   2094c:	cmp	r1, #9
   20950:	bne	20994 <__assert_fail@plt+0xf808>
   20954:	mov	r0, r5
   20958:	bl	110fc <fcntl64@plt>
   2095c:	mov	r4, r0
   20960:	b	20914 <__assert_fail@plt+0xf788>
   20964:	ldr	r2, [sp, #32]
   20968:	bl	110fc <fcntl64@plt>
   2096c:	mov	r4, r0
   20970:	b	20914 <__assert_fail@plt+0xf788>
   20974:	ldr	r3, [pc, #256]	; 20a7c <__assert_fail@plt+0xf8f0>
   20978:	cmp	r1, r3
   2097c:	bgt	20a48 <__assert_fail@plt+0xf8bc>
   20980:	cmp	r1, r2
   20984:	bge	20994 <__assert_fail@plt+0xf808>
   20988:	sub	r3, r3, #6
   2098c:	cmp	r1, r3
   20990:	beq	20954 <__assert_fail@plt+0xf7c8>
   20994:	ldr	r3, [sp, #4]
   20998:	mov	r0, r5
   2099c:	ldr	r2, [r3]
   209a0:	bl	110fc <fcntl64@plt>
   209a4:	mov	r4, r0
   209a8:	b	20914 <__assert_fail@plt+0xf788>
   209ac:	bl	11090 <__errno_location@plt>
   209b0:	ldr	r3, [r0]
   209b4:	cmp	r3, #22
   209b8:	bne	2090c <__assert_fail@plt+0xf780>
   209bc:	mov	r2, r7
   209c0:	mov	r0, r5
   209c4:	mov	r1, #0
   209c8:	bl	110fc <fcntl64@plt>
   209cc:	subs	r4, r0, #0
   209d0:	blt	20914 <__assert_fail@plt+0xf788>
   209d4:	mvn	r3, #0
   209d8:	str	r3, [r6]
   209dc:	mov	r1, #1
   209e0:	mov	r0, r4
   209e4:	bl	110fc <fcntl64@plt>
   209e8:	subs	r2, r0, #0
   209ec:	blt	20a08 <__assert_fail@plt+0xf87c>
   209f0:	orr	r2, r2, #1
   209f4:	mov	r1, #2
   209f8:	mov	r0, r4
   209fc:	bl	110fc <fcntl64@plt>
   20a00:	cmn	r0, #1
   20a04:	bne	20914 <__assert_fail@plt+0xf788>
   20a08:	bl	11090 <__errno_location@plt>
   20a0c:	mov	r5, r0
   20a10:	mov	r0, r4
   20a14:	ldr	r6, [r5]
   20a18:	mvn	r4, #0
   20a1c:	bl	11174 <close@plt>
   20a20:	str	r6, [r5]
   20a24:	b	20914 <__assert_fail@plt+0xf788>
   20a28:	mov	r1, #0
   20a2c:	bl	110fc <fcntl64@plt>
   20a30:	subs	r4, r0, #0
   20a34:	blt	20914 <__assert_fail@plt+0xf788>
   20a38:	ldr	r3, [r6]
   20a3c:	cmn	r3, #1
   20a40:	beq	209dc <__assert_fail@plt+0xf850>
   20a44:	b	20914 <__assert_fail@plt+0xf788>
   20a48:	ldr	r3, [pc, #48]	; 20a80 <__assert_fail@plt+0xf8f4>
   20a4c:	cmp	r1, r3
   20a50:	beq	20994 <__assert_fail@plt+0xf808>
   20a54:	blt	20954 <__assert_fail@plt+0xf7c8>
   20a58:	add	r3, r3, #1
   20a5c:	cmp	r1, r3
   20a60:	bne	20994 <__assert_fail@plt+0xf808>
   20a64:	b	20954 <__assert_fail@plt+0xf7c8>
   20a68:	cmp	r1, #1
   20a6c:	bne	20994 <__assert_fail@plt+0xf808>
   20a70:	b	20954 <__assert_fail@plt+0xf7c8>
   20a74:	andeq	r0, r0, r6, lsl #8
   20a78:	andeq	r3, r3, ip, ror #5
   20a7c:	andeq	r0, r0, r7, lsl #8
   20a80:	andeq	r0, r0, r9, lsl #8
   20a84:	push	{r4, lr}
   20a88:	mov	r0, #14
   20a8c:	bl	1112c <nl_langinfo@plt>
   20a90:	cmp	r0, #0
   20a94:	beq	20aac <__assert_fail@plt+0xf920>
   20a98:	ldrb	r2, [r0]
   20a9c:	ldr	r3, [pc, #16]	; 20ab4 <__assert_fail@plt+0xf928>
   20aa0:	cmp	r2, #0
   20aa4:	moveq	r0, r3
   20aa8:	pop	{r4, pc}
   20aac:	ldr	r0, [pc]	; 20ab4 <__assert_fail@plt+0xf928>
   20ab0:	pop	{r4, pc}
   20ab4:	andeq	r2, r2, r0, lsr #12
   20ab8:	push	{r4, r5, r6, r7, lr}
   20abc:	subs	r6, r0, #0
   20ac0:	sub	sp, sp, #12
   20ac4:	addeq	r6, sp, #4
   20ac8:	mov	r0, r6
   20acc:	mov	r5, r2
   20ad0:	mov	r7, r1
   20ad4:	bl	10ff4 <mbrtowc@plt>
   20ad8:	cmp	r5, #0
   20adc:	cmnne	r0, #3
   20ae0:	mov	r4, r0
   20ae4:	bls	20b00 <__assert_fail@plt+0xf974>
   20ae8:	mov	r0, #0
   20aec:	bl	20b58 <__assert_fail@plt+0xf9cc>
   20af0:	cmp	r0, #0
   20af4:	moveq	r4, #1
   20af8:	ldrbeq	r3, [r7]
   20afc:	streq	r3, [r6]
   20b00:	mov	r0, r4
   20b04:	add	sp, sp, #12
   20b08:	pop	{r4, r5, r6, r7, pc}
   20b0c:	push	{r4, r5, r6, lr}
   20b10:	subs	r4, r2, #0
   20b14:	mov	r6, r0
   20b18:	mov	r5, r1
   20b1c:	beq	20b48 <__assert_fail@plt+0xf9bc>
   20b20:	mov	r1, r4
   20b24:	mvn	r0, #0
   20b28:	bl	20c4c <__assert_fail@plt+0xfac0>
   20b2c:	cmp	r0, r5
   20b30:	bcs	20b48 <__assert_fail@plt+0xf9bc>
   20b34:	bl	11090 <__errno_location@plt>
   20b38:	mov	r3, #12
   20b3c:	str	r3, [r0]
   20b40:	mov	r0, #0
   20b44:	pop	{r4, r5, r6, pc}
   20b48:	mul	r1, r5, r4
   20b4c:	mov	r0, r6
   20b50:	pop	{r4, r5, r6, lr}
   20b54:	b	207d8 <__assert_fail@plt+0xf64c>
   20b58:	push	{lr}		; (str lr, [sp, #-4]!)
   20b5c:	sub	sp, sp, #268	; 0x10c
   20b60:	add	r1, sp, #4
   20b64:	ldr	r2, [pc, #60]	; 20ba8 <__assert_fail@plt+0xfa1c>
   20b68:	bl	20bb4 <__assert_fail@plt+0xfa28>
   20b6c:	cmp	r0, #0
   20b70:	movne	r0, #0
   20b74:	bne	20ba0 <__assert_fail@plt+0xfa14>
   20b78:	ldr	r1, [pc, #44]	; 20bac <__assert_fail@plt+0xfa20>
   20b7c:	add	r0, sp, #4
   20b80:	bl	10eec <strcmp@plt>
   20b84:	cmp	r0, #0
   20b88:	beq	20ba0 <__assert_fail@plt+0xfa14>
   20b8c:	add	r0, sp, #4
   20b90:	ldr	r1, [pc, #24]	; 20bb0 <__assert_fail@plt+0xfa24>
   20b94:	bl	10eec <strcmp@plt>
   20b98:	adds	r0, r0, #0
   20b9c:	movne	r0, #1
   20ba0:	add	sp, sp, #268	; 0x10c
   20ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   20ba8:	andeq	r0, r0, r1, lsl #2
   20bac:	andeq	r2, r2, r8, lsr #12
   20bb0:	andeq	r2, r2, ip, lsr #12
   20bb4:	push	{r4, r5, r6, lr}
   20bb8:	mov	r5, r1
   20bbc:	mov	r1, #0
   20bc0:	mov	r4, r2
   20bc4:	bl	11114 <setlocale@plt>
   20bc8:	subs	r6, r0, #0
   20bcc:	beq	20c28 <__assert_fail@plt+0xfa9c>
   20bd0:	bl	11078 <strlen@plt>
   20bd4:	cmp	r4, r0
   20bd8:	bhi	20c10 <__assert_fail@plt+0xfa84>
   20bdc:	cmp	r4, #0
   20be0:	bne	20bec <__assert_fail@plt+0xfa60>
   20be4:	mov	r0, #34	; 0x22
   20be8:	pop	{r4, r5, r6, pc}
   20bec:	sub	r4, r4, #1
   20bf0:	mov	r1, r6
   20bf4:	mov	r2, r4
   20bf8:	mov	r0, r5
   20bfc:	bl	10f34 <memcpy@plt>
   20c00:	mov	r3, #0
   20c04:	strb	r3, [r5, r4]
   20c08:	mov	r0, #34	; 0x22
   20c0c:	pop	{r4, r5, r6, pc}
   20c10:	add	r2, r0, #1
   20c14:	mov	r1, r6
   20c18:	mov	r0, r5
   20c1c:	bl	10f34 <memcpy@plt>
   20c20:	mov	r0, #0
   20c24:	pop	{r4, r5, r6, pc}
   20c28:	cmp	r4, #0
   20c2c:	beq	20c3c <__assert_fail@plt+0xfab0>
   20c30:	strb	r6, [r5]
   20c34:	mov	r0, #22
   20c38:	pop	{r4, r5, r6, pc}
   20c3c:	mov	r0, #22
   20c40:	pop	{r4, r5, r6, pc}
   20c44:	mov	r1, #0
   20c48:	b	11114 <setlocale@plt>
   20c4c:	subs	r2, r1, #1
   20c50:	bxeq	lr
   20c54:	bcc	20e2c <__assert_fail@plt+0xfca0>
   20c58:	cmp	r0, r1
   20c5c:	bls	20e10 <__assert_fail@plt+0xfc84>
   20c60:	tst	r1, r2
   20c64:	beq	20e1c <__assert_fail@plt+0xfc90>
   20c68:	clz	r3, r0
   20c6c:	clz	r2, r1
   20c70:	sub	r3, r2, r3
   20c74:	rsbs	r3, r3, #31
   20c78:	addne	r3, r3, r3, lsl #1
   20c7c:	mov	r2, #0
   20c80:	addne	pc, pc, r3, lsl #2
   20c84:	nop			; (mov r0, r0)
   20c88:	cmp	r0, r1, lsl #31
   20c8c:	adc	r2, r2, r2
   20c90:	subcs	r0, r0, r1, lsl #31
   20c94:	cmp	r0, r1, lsl #30
   20c98:	adc	r2, r2, r2
   20c9c:	subcs	r0, r0, r1, lsl #30
   20ca0:	cmp	r0, r1, lsl #29
   20ca4:	adc	r2, r2, r2
   20ca8:	subcs	r0, r0, r1, lsl #29
   20cac:	cmp	r0, r1, lsl #28
   20cb0:	adc	r2, r2, r2
   20cb4:	subcs	r0, r0, r1, lsl #28
   20cb8:	cmp	r0, r1, lsl #27
   20cbc:	adc	r2, r2, r2
   20cc0:	subcs	r0, r0, r1, lsl #27
   20cc4:	cmp	r0, r1, lsl #26
   20cc8:	adc	r2, r2, r2
   20ccc:	subcs	r0, r0, r1, lsl #26
   20cd0:	cmp	r0, r1, lsl #25
   20cd4:	adc	r2, r2, r2
   20cd8:	subcs	r0, r0, r1, lsl #25
   20cdc:	cmp	r0, r1, lsl #24
   20ce0:	adc	r2, r2, r2
   20ce4:	subcs	r0, r0, r1, lsl #24
   20ce8:	cmp	r0, r1, lsl #23
   20cec:	adc	r2, r2, r2
   20cf0:	subcs	r0, r0, r1, lsl #23
   20cf4:	cmp	r0, r1, lsl #22
   20cf8:	adc	r2, r2, r2
   20cfc:	subcs	r0, r0, r1, lsl #22
   20d00:	cmp	r0, r1, lsl #21
   20d04:	adc	r2, r2, r2
   20d08:	subcs	r0, r0, r1, lsl #21
   20d0c:	cmp	r0, r1, lsl #20
   20d10:	adc	r2, r2, r2
   20d14:	subcs	r0, r0, r1, lsl #20
   20d18:	cmp	r0, r1, lsl #19
   20d1c:	adc	r2, r2, r2
   20d20:	subcs	r0, r0, r1, lsl #19
   20d24:	cmp	r0, r1, lsl #18
   20d28:	adc	r2, r2, r2
   20d2c:	subcs	r0, r0, r1, lsl #18
   20d30:	cmp	r0, r1, lsl #17
   20d34:	adc	r2, r2, r2
   20d38:	subcs	r0, r0, r1, lsl #17
   20d3c:	cmp	r0, r1, lsl #16
   20d40:	adc	r2, r2, r2
   20d44:	subcs	r0, r0, r1, lsl #16
   20d48:	cmp	r0, r1, lsl #15
   20d4c:	adc	r2, r2, r2
   20d50:	subcs	r0, r0, r1, lsl #15
   20d54:	cmp	r0, r1, lsl #14
   20d58:	adc	r2, r2, r2
   20d5c:	subcs	r0, r0, r1, lsl #14
   20d60:	cmp	r0, r1, lsl #13
   20d64:	adc	r2, r2, r2
   20d68:	subcs	r0, r0, r1, lsl #13
   20d6c:	cmp	r0, r1, lsl #12
   20d70:	adc	r2, r2, r2
   20d74:	subcs	r0, r0, r1, lsl #12
   20d78:	cmp	r0, r1, lsl #11
   20d7c:	adc	r2, r2, r2
   20d80:	subcs	r0, r0, r1, lsl #11
   20d84:	cmp	r0, r1, lsl #10
   20d88:	adc	r2, r2, r2
   20d8c:	subcs	r0, r0, r1, lsl #10
   20d90:	cmp	r0, r1, lsl #9
   20d94:	adc	r2, r2, r2
   20d98:	subcs	r0, r0, r1, lsl #9
   20d9c:	cmp	r0, r1, lsl #8
   20da0:	adc	r2, r2, r2
   20da4:	subcs	r0, r0, r1, lsl #8
   20da8:	cmp	r0, r1, lsl #7
   20dac:	adc	r2, r2, r2
   20db0:	subcs	r0, r0, r1, lsl #7
   20db4:	cmp	r0, r1, lsl #6
   20db8:	adc	r2, r2, r2
   20dbc:	subcs	r0, r0, r1, lsl #6
   20dc0:	cmp	r0, r1, lsl #5
   20dc4:	adc	r2, r2, r2
   20dc8:	subcs	r0, r0, r1, lsl #5
   20dcc:	cmp	r0, r1, lsl #4
   20dd0:	adc	r2, r2, r2
   20dd4:	subcs	r0, r0, r1, lsl #4
   20dd8:	cmp	r0, r1, lsl #3
   20ddc:	adc	r2, r2, r2
   20de0:	subcs	r0, r0, r1, lsl #3
   20de4:	cmp	r0, r1, lsl #2
   20de8:	adc	r2, r2, r2
   20dec:	subcs	r0, r0, r1, lsl #2
   20df0:	cmp	r0, r1, lsl #1
   20df4:	adc	r2, r2, r2
   20df8:	subcs	r0, r0, r1, lsl #1
   20dfc:	cmp	r0, r1
   20e00:	adc	r2, r2, r2
   20e04:	subcs	r0, r0, r1
   20e08:	mov	r0, r2
   20e0c:	bx	lr
   20e10:	moveq	r0, #1
   20e14:	movne	r0, #0
   20e18:	bx	lr
   20e1c:	clz	r2, r1
   20e20:	rsb	r2, r2, #31
   20e24:	lsr	r0, r0, r2
   20e28:	bx	lr
   20e2c:	cmp	r0, #0
   20e30:	mvnne	r0, #0
   20e34:	b	210d4 <__assert_fail@plt+0xff48>
   20e38:	cmp	r1, #0
   20e3c:	beq	20e2c <__assert_fail@plt+0xfca0>
   20e40:	push	{r0, r1, lr}
   20e44:	bl	20c4c <__assert_fail@plt+0xfac0>
   20e48:	pop	{r1, r2, lr}
   20e4c:	mul	r3, r2, r0
   20e50:	sub	r1, r1, r3
   20e54:	bx	lr
   20e58:	cmp	r1, #0
   20e5c:	beq	21068 <__assert_fail@plt+0xfedc>
   20e60:	eor	ip, r0, r1
   20e64:	rsbmi	r1, r1, #0
   20e68:	subs	r2, r1, #1
   20e6c:	beq	21034 <__assert_fail@plt+0xfea8>
   20e70:	movs	r3, r0
   20e74:	rsbmi	r3, r0, #0
   20e78:	cmp	r3, r1
   20e7c:	bls	21040 <__assert_fail@plt+0xfeb4>
   20e80:	tst	r1, r2
   20e84:	beq	21050 <__assert_fail@plt+0xfec4>
   20e88:	clz	r2, r3
   20e8c:	clz	r0, r1
   20e90:	sub	r2, r0, r2
   20e94:	rsbs	r2, r2, #31
   20e98:	addne	r2, r2, r2, lsl #1
   20e9c:	mov	r0, #0
   20ea0:	addne	pc, pc, r2, lsl #2
   20ea4:	nop			; (mov r0, r0)
   20ea8:	cmp	r3, r1, lsl #31
   20eac:	adc	r0, r0, r0
   20eb0:	subcs	r3, r3, r1, lsl #31
   20eb4:	cmp	r3, r1, lsl #30
   20eb8:	adc	r0, r0, r0
   20ebc:	subcs	r3, r3, r1, lsl #30
   20ec0:	cmp	r3, r1, lsl #29
   20ec4:	adc	r0, r0, r0
   20ec8:	subcs	r3, r3, r1, lsl #29
   20ecc:	cmp	r3, r1, lsl #28
   20ed0:	adc	r0, r0, r0
   20ed4:	subcs	r3, r3, r1, lsl #28
   20ed8:	cmp	r3, r1, lsl #27
   20edc:	adc	r0, r0, r0
   20ee0:	subcs	r3, r3, r1, lsl #27
   20ee4:	cmp	r3, r1, lsl #26
   20ee8:	adc	r0, r0, r0
   20eec:	subcs	r3, r3, r1, lsl #26
   20ef0:	cmp	r3, r1, lsl #25
   20ef4:	adc	r0, r0, r0
   20ef8:	subcs	r3, r3, r1, lsl #25
   20efc:	cmp	r3, r1, lsl #24
   20f00:	adc	r0, r0, r0
   20f04:	subcs	r3, r3, r1, lsl #24
   20f08:	cmp	r3, r1, lsl #23
   20f0c:	adc	r0, r0, r0
   20f10:	subcs	r3, r3, r1, lsl #23
   20f14:	cmp	r3, r1, lsl #22
   20f18:	adc	r0, r0, r0
   20f1c:	subcs	r3, r3, r1, lsl #22
   20f20:	cmp	r3, r1, lsl #21
   20f24:	adc	r0, r0, r0
   20f28:	subcs	r3, r3, r1, lsl #21
   20f2c:	cmp	r3, r1, lsl #20
   20f30:	adc	r0, r0, r0
   20f34:	subcs	r3, r3, r1, lsl #20
   20f38:	cmp	r3, r1, lsl #19
   20f3c:	adc	r0, r0, r0
   20f40:	subcs	r3, r3, r1, lsl #19
   20f44:	cmp	r3, r1, lsl #18
   20f48:	adc	r0, r0, r0
   20f4c:	subcs	r3, r3, r1, lsl #18
   20f50:	cmp	r3, r1, lsl #17
   20f54:	adc	r0, r0, r0
   20f58:	subcs	r3, r3, r1, lsl #17
   20f5c:	cmp	r3, r1, lsl #16
   20f60:	adc	r0, r0, r0
   20f64:	subcs	r3, r3, r1, lsl #16
   20f68:	cmp	r3, r1, lsl #15
   20f6c:	adc	r0, r0, r0
   20f70:	subcs	r3, r3, r1, lsl #15
   20f74:	cmp	r3, r1, lsl #14
   20f78:	adc	r0, r0, r0
   20f7c:	subcs	r3, r3, r1, lsl #14
   20f80:	cmp	r3, r1, lsl #13
   20f84:	adc	r0, r0, r0
   20f88:	subcs	r3, r3, r1, lsl #13
   20f8c:	cmp	r3, r1, lsl #12
   20f90:	adc	r0, r0, r0
   20f94:	subcs	r3, r3, r1, lsl #12
   20f98:	cmp	r3, r1, lsl #11
   20f9c:	adc	r0, r0, r0
   20fa0:	subcs	r3, r3, r1, lsl #11
   20fa4:	cmp	r3, r1, lsl #10
   20fa8:	adc	r0, r0, r0
   20fac:	subcs	r3, r3, r1, lsl #10
   20fb0:	cmp	r3, r1, lsl #9
   20fb4:	adc	r0, r0, r0
   20fb8:	subcs	r3, r3, r1, lsl #9
   20fbc:	cmp	r3, r1, lsl #8
   20fc0:	adc	r0, r0, r0
   20fc4:	subcs	r3, r3, r1, lsl #8
   20fc8:	cmp	r3, r1, lsl #7
   20fcc:	adc	r0, r0, r0
   20fd0:	subcs	r3, r3, r1, lsl #7
   20fd4:	cmp	r3, r1, lsl #6
   20fd8:	adc	r0, r0, r0
   20fdc:	subcs	r3, r3, r1, lsl #6
   20fe0:	cmp	r3, r1, lsl #5
   20fe4:	adc	r0, r0, r0
   20fe8:	subcs	r3, r3, r1, lsl #5
   20fec:	cmp	r3, r1, lsl #4
   20ff0:	adc	r0, r0, r0
   20ff4:	subcs	r3, r3, r1, lsl #4
   20ff8:	cmp	r3, r1, lsl #3
   20ffc:	adc	r0, r0, r0
   21000:	subcs	r3, r3, r1, lsl #3
   21004:	cmp	r3, r1, lsl #2
   21008:	adc	r0, r0, r0
   2100c:	subcs	r3, r3, r1, lsl #2
   21010:	cmp	r3, r1, lsl #1
   21014:	adc	r0, r0, r0
   21018:	subcs	r3, r3, r1, lsl #1
   2101c:	cmp	r3, r1
   21020:	adc	r0, r0, r0
   21024:	subcs	r3, r3, r1
   21028:	cmp	ip, #0
   2102c:	rsbmi	r0, r0, #0
   21030:	bx	lr
   21034:	teq	ip, r0
   21038:	rsbmi	r0, r0, #0
   2103c:	bx	lr
   21040:	movcc	r0, #0
   21044:	asreq	r0, ip, #31
   21048:	orreq	r0, r0, #1
   2104c:	bx	lr
   21050:	clz	r2, r1
   21054:	rsb	r2, r2, #31
   21058:	cmp	ip, #0
   2105c:	lsr	r0, r3, r2
   21060:	rsbmi	r0, r0, #0
   21064:	bx	lr
   21068:	cmp	r0, #0
   2106c:	mvngt	r0, #-2147483648	; 0x80000000
   21070:	movlt	r0, #-2147483648	; 0x80000000
   21074:	b	210d4 <__assert_fail@plt+0xff48>
   21078:	cmp	r1, #0
   2107c:	beq	21068 <__assert_fail@plt+0xfedc>
   21080:	push	{r0, r1, lr}
   21084:	bl	20e60 <__assert_fail@plt+0xfcd4>
   21088:	pop	{r1, r2, lr}
   2108c:	mul	r3, r2, r0
   21090:	sub	r1, r1, r3
   21094:	bx	lr
   21098:	cmp	r3, #0
   2109c:	cmpeq	r2, #0
   210a0:	bne	210b8 <__assert_fail@plt+0xff2c>
   210a4:	cmp	r1, #0
   210a8:	cmpeq	r0, #0
   210ac:	mvnne	r1, #0
   210b0:	mvnne	r0, #0
   210b4:	b	210d4 <__assert_fail@plt+0xff48>
   210b8:	sub	sp, sp, #8
   210bc:	push	{sp, lr}
   210c0:	bl	210e4 <__assert_fail@plt+0xff58>
   210c4:	ldr	lr, [sp, #4]
   210c8:	add	sp, sp, #8
   210cc:	pop	{r2, r3}
   210d0:	bx	lr
   210d4:	push	{r1, lr}
   210d8:	mov	r0, #8
   210dc:	bl	10ed4 <raise@plt>
   210e0:	pop	{r1, pc}
   210e4:	cmp	r1, r3
   210e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   210ec:	cmpeq	r0, r2
   210f0:	mov	r4, r0
   210f4:	mov	r5, r1
   210f8:	ldr	r9, [sp, #28]
   210fc:	movcc	r0, #0
   21100:	movcc	r1, #0
   21104:	bcc	211fc <__assert_fail@plt+0x10070>
   21108:	cmp	r3, #0
   2110c:	clzeq	ip, r2
   21110:	clzne	ip, r3
   21114:	addeq	ip, ip, #32
   21118:	cmp	r5, #0
   2111c:	clzeq	r1, r4
   21120:	addeq	r1, r1, #32
   21124:	clzne	r1, r5
   21128:	sub	ip, ip, r1
   2112c:	sub	lr, ip, #32
   21130:	lsl	r7, r3, ip
   21134:	rsb	r8, ip, #32
   21138:	orr	r7, r7, r2, lsl lr
   2113c:	orr	r7, r7, r2, lsr r8
   21140:	lsl	r6, r2, ip
   21144:	cmp	r5, r7
   21148:	cmpeq	r4, r6
   2114c:	movcc	r0, #0
   21150:	movcc	r1, #0
   21154:	bcc	21170 <__assert_fail@plt+0xffe4>
   21158:	mov	r3, #1
   2115c:	subs	r4, r4, r6
   21160:	lsl	r1, r3, lr
   21164:	lsl	r0, r3, ip
   21168:	orr	r1, r1, r3, lsr r8
   2116c:	sbc	r5, r5, r7
   21170:	cmp	ip, #0
   21174:	beq	211fc <__assert_fail@plt+0x10070>
   21178:	lsrs	r3, r7, #1
   2117c:	rrx	r2, r6
   21180:	mov	r6, ip
   21184:	b	211a8 <__assert_fail@plt+0x1001c>
   21188:	subs	r4, r4, r2
   2118c:	sbc	r5, r5, r3
   21190:	adds	r4, r4, r4
   21194:	adc	r5, r5, r5
   21198:	adds	r4, r4, #1
   2119c:	adc	r5, r5, #0
   211a0:	subs	r6, r6, #1
   211a4:	beq	211c4 <__assert_fail@plt+0x10038>
   211a8:	cmp	r5, r3
   211ac:	cmpeq	r4, r2
   211b0:	bcs	21188 <__assert_fail@plt+0xfffc>
   211b4:	adds	r4, r4, r4
   211b8:	adc	r5, r5, r5
   211bc:	subs	r6, r6, #1
   211c0:	bne	211a8 <__assert_fail@plt+0x1001c>
   211c4:	lsr	r6, r4, ip
   211c8:	lsr	r7, r5, ip
   211cc:	orr	r6, r6, r5, lsl r8
   211d0:	adds	r2, r0, r4
   211d4:	orr	r6, r6, r5, lsr lr
   211d8:	adc	r3, r1, r5
   211dc:	lsl	r1, r7, ip
   211e0:	orr	r1, r1, r6, lsl lr
   211e4:	lsl	r0, r6, ip
   211e8:	orr	r1, r1, r6, lsr r8
   211ec:	subs	r0, r2, r0
   211f0:	mov	r4, r6
   211f4:	mov	r5, r7
   211f8:	sbc	r1, r3, r1
   211fc:	cmp	r9, #0
   21200:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   21204:	strd	r4, [r9]
   21208:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2120c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21210:	mov	r7, r0
   21214:	ldr	r6, [pc, #72]	; 21264 <__assert_fail@plt+0x100d8>
   21218:	ldr	r5, [pc, #72]	; 21268 <__assert_fail@plt+0x100dc>
   2121c:	add	r6, pc, r6
   21220:	add	r5, pc, r5
   21224:	sub	r6, r6, r5
   21228:	mov	r8, r1
   2122c:	mov	r9, r2
   21230:	bl	10e90 <fdopen@plt-0x20>
   21234:	asrs	r6, r6, #2
   21238:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2123c:	mov	r4, #0
   21240:	add	r4, r4, #1
   21244:	ldr	r3, [r5], #4
   21248:	mov	r2, r9
   2124c:	mov	r1, r8
   21250:	mov	r0, r7
   21254:	blx	r3
   21258:	cmp	r6, r4
   2125c:	bne	21240 <__assert_fail@plt+0x100b4>
   21260:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21264:	andeq	r1, r1, ip, ror #25
   21268:	andeq	r1, r1, r4, ror #25
   2126c:	bx	lr
   21270:	ldr	r3, [pc, #12]	; 21284 <__assert_fail@plt+0x100f8>
   21274:	mov	r1, #0
   21278:	add	r3, pc, r3
   2127c:	ldr	r2, [r3]
   21280:	b	1109c <__cxa_atexit@plt>
   21284:	andeq	r1, r1, ip, lsl #29

Disassembly of section .fini:

00021288 <.fini>:
   21288:	push	{r3, lr}
   2128c:	pop	{r3, pc}
