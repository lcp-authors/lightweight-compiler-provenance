
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

000110fc <.init>:
   110fc:	push	{r3, lr}
   11100:	bl	11e60 <__assert_fail@plt+0x9a8>
   11104:	pop	{r3, pc}

Disassembly of section .plt:

00011108 <fdopen@plt-0x14>:
   11108:	push	{lr}		; (str lr, [sp, #-4]!)
   1110c:	ldr	lr, [pc, #4]	; 11118 <fdopen@plt-0x4>
   11110:	add	lr, pc, lr
   11114:	ldr	pc, [lr, #8]!
   11118:	andeq	r9, r1, r8, ror #29

0001111c <fdopen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3816]!	; 0xee8

00011128 <calloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3808]!	; 0xee0

00011134 <fputs_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3800]!	; 0xed8

00011140 <raise@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3792]!	; 0xed0

0001114c <fsync@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3784]!	; 0xec8

00011158 <strcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3776]!	; 0xec0

00011164 <fflush@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011170 <memmove@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3760]!	; 0xeb0

0001117c <free@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3752]!	; 0xea8

00011188 <_exit@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3744]!	; 0xea0

00011194 <memcpy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3736]!	; 0xe98

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ac <mbsinit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3720]!	; 0xe88

000111b8 <time@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3712]!	; 0xe80

000111c4 <ftruncate64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3704]!	; 0xe78

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3696]!	; 0xe70

000111dc <fputc_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3688]!	; 0xe68

000111e8 <dcgettext@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3680]!	; 0xe60

000111f4 <unlink@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3672]!	; 0xe58

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3664]!	; 0xe50

0001120c <textdomain@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3656]!	; 0xe48

00011218 <__fxstatat64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3648]!	; 0xe40

00011224 <iswprint@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3640]!	; 0xe38

00011230 <__fxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3632]!	; 0xe30

0001123c <__memcpy_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3624]!	; 0xe28

00011248 <fwrite@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3616]!	; 0xe20

00011254 <ioctl@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #102400	; 0x19000
   1125c:	ldr	pc, [ip, #3608]!	; 0xe18

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #102400	; 0x19000
   11268:	ldr	pc, [ip, #3600]!	; 0xe10

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #102400	; 0x19000
   11274:	ldr	pc, [ip, #3592]!	; 0xe08

00011278 <__strcpy_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #102400	; 0x19000
   11280:	ldr	pc, [ip, #3584]!	; 0xe00

00011284 <__fpending@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #102400	; 0x19000
   1128c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011290 <mbrtowc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #102400	; 0x19000
   11298:	ldr	pc, [ip, #3568]!	; 0xdf0

0001129c <error@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #102400	; 0x19000
   112a4:	ldr	pc, [ip, #3560]!	; 0xde8

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #102400	; 0x19000
   112b0:	ldr	pc, [ip, #3552]!	; 0xde0

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #102400	; 0x19000
   112bc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112c0 <malloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #102400	; 0x19000
   112c8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112cc <__libc_start_main@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #102400	; 0x19000
   112d4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d8 <__freading@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #102400	; 0x19000
   112e0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #102400	; 0x19000
   112ec:	ldr	pc, [ip, #3512]!	; 0xdb8

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #102400	; 0x19000
   112f8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112fc <__ctype_b_loc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #102400	; 0x19000
   11304:	ldr	pc, [ip, #3496]!	; 0xda8

00011308 <exit@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #102400	; 0x19000
   11310:	ldr	pc, [ip, #3488]!	; 0xda0

00011314 <strlen@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #102400	; 0x19000
   1131c:	ldr	pc, [ip, #3480]!	; 0xd98

00011320 <strchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #102400	; 0x19000
   11328:	ldr	pc, [ip, #3472]!	; 0xd90

0001132c <getpagesize@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #102400	; 0x19000
   11334:	ldr	pc, [ip, #3464]!	; 0xd88

00011338 <__errno_location@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #102400	; 0x19000
   11340:	ldr	pc, [ip, #3456]!	; 0xd80

00011344 <__sprintf_chk@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #102400	; 0x19000
   1134c:	ldr	pc, [ip, #3448]!	; 0xd78

00011350 <__cxa_atexit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #102400	; 0x19000
   11358:	ldr	pc, [ip, #3440]!	; 0xd70

0001135c <setvbuf@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #102400	; 0x19000
   11364:	ldr	pc, [ip, #3432]!	; 0xd68

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #102400	; 0x19000
   11370:	ldr	pc, [ip, #3424]!	; 0xd60

00011374 <renameat2@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #102400	; 0x19000
   1137c:	ldr	pc, [ip, #3416]!	; 0xd58

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #102400	; 0x19000
   11388:	ldr	pc, [ip, #3408]!	; 0xd50

0001138c <write@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #102400	; 0x19000
   11394:	ldr	pc, [ip, #3400]!	; 0xd48

00011398 <fileno@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #102400	; 0x19000
   113a0:	ldr	pc, [ip, #3392]!	; 0xd40

000113a4 <__fprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #102400	; 0x19000
   113ac:	ldr	pc, [ip, #3384]!	; 0xd38

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #102400	; 0x19000
   113b8:	ldr	pc, [ip, #3376]!	; 0xd30

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #102400	; 0x19000
   113c4:	ldr	pc, [ip, #3368]!	; 0xd28

000113c8 <fcntl64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #102400	; 0x19000
   113d0:	ldr	pc, [ip, #3360]!	; 0xd20

000113d4 <__overflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #102400	; 0x19000
   113dc:	ldr	pc, [ip, #3352]!	; 0xd18

000113e0 <setlocale@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #102400	; 0x19000
   113e8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ec <__explicit_bzero_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #102400	; 0x19000
   113f4:	ldr	pc, [ip, #3336]!	; 0xd08

000113f8 <strrchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #102400	; 0x19000
   11400:	ldr	pc, [ip, #3328]!	; 0xd00

00011404 <nl_langinfo@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #102400	; 0x19000
   1140c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #102400	; 0x19000
   11418:	ldr	pc, [ip, #3312]!	; 0xcf0

0001141c <fopen64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #102400	; 0x19000
   11424:	ldr	pc, [ip, #3304]!	; 0xce8

00011428 <renameat@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #102400	; 0x19000
   11430:	ldr	pc, [ip, #3296]!	; 0xce0

00011434 <bindtextdomain@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #102400	; 0x19000
   1143c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011440 <fread_unlocked@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #102400	; 0x19000
   11448:	ldr	pc, [ip, #3280]!	; 0xcd0

0001144c <getrandom@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #102400	; 0x19000
   11454:	ldr	pc, [ip, #3272]!	; 0xcc8

00011458 <aligned_alloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #102400	; 0x19000
   11460:	ldr	pc, [ip, #3264]!	; 0xcc0

00011464 <sync@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #102400	; 0x19000
   1146c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011470 <chmod@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #102400	; 0x19000
   11478:	ldr	pc, [ip, #3248]!	; 0xcb0

0001147c <isatty@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #102400	; 0x19000
   11484:	ldr	pc, [ip, #3240]!	; 0xca8

00011488 <strncmp@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #102400	; 0x19000
   11490:	ldr	pc, [ip, #3232]!	; 0xca0

00011494 <fdatasync@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #102400	; 0x19000
   1149c:	ldr	pc, [ip, #3224]!	; 0xc98

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #102400	; 0x19000
   114a8:	ldr	pc, [ip, #3216]!	; 0xc90

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #102400	; 0x19000
   114b4:	ldr	pc, [ip, #3208]!	; 0xc88

000114b8 <__assert_fail@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #102400	; 0x19000
   114c0:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

000114c8 <.text>:
   114c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114cc:	sub	sp, sp, #108	; 0x6c
   114d0:	mov	r4, #0
   114d4:	mov	r6, r0
   114d8:	ldr	r0, [r1]
   114dc:	mov	r5, r1
   114e0:	str	r4, [sp, #84]	; 0x54
   114e4:	str	r4, [sp, #80]	; 0x50
   114e8:	str	r4, [sp, #88]	; 0x58
   114ec:	str	r4, [sp, #92]	; 0x5c
   114f0:	str	r4, [sp, #96]	; 0x60
   114f4:	str	r4, [sp, #100]	; 0x64
   114f8:	bl	14848 <__assert_fail@plt+0x3390>
   114fc:	ldr	r1, [pc, #2180]	; 11d88 <__assert_fail@plt+0x8d0>
   11500:	mov	r0, #6
   11504:	bl	113e0 <setlocale@plt>
   11508:	ldr	r1, [pc, #2172]	; 11d8c <__assert_fail@plt+0x8d4>
   1150c:	ldr	r0, [pc, #2172]	; 11d90 <__assert_fail@plt+0x8d8>
   11510:	bl	11434 <bindtextdomain@plt>
   11514:	ldr	sl, [pc, #2168]	; 11d94 <__assert_fail@plt+0x8dc>
   11518:	ldr	r0, [pc, #2160]	; 11d90 <__assert_fail@plt+0x8d8>
   1151c:	bl	1120c <textdomain@plt>
   11520:	ldr	r7, [pc, #2160]	; 11d98 <__assert_fail@plt+0x8e0>
   11524:	ldr	r0, [pc, #2160]	; 11d9c <__assert_fail@plt+0x8e4>
   11528:	ldr	r9, [pc, #2160]	; 11da0 <__assert_fail@plt+0x8e8>
   1152c:	bl	195d4 <__assert_fail@plt+0x811c>
   11530:	add	r8, sl, #304	; 0x130
   11534:	mvn	r2, #0
   11538:	mvn	r3, #0
   1153c:	mov	r1, #3
   11540:	str	r4, [sp, #24]
   11544:	strd	r2, [sp, #88]	; 0x58
   11548:	str	r1, [sp, #84]	; 0x54
   1154c:	mov	r4, #0
   11550:	str	r4, [sp]
   11554:	mov	r3, r8
   11558:	mov	r2, r7
   1155c:	mov	r1, r5
   11560:	mov	r0, r6
   11564:	bl	112f0 <getopt_long@plt>
   11568:	cmn	r0, #1
   1156c:	beq	11770 <__assert_fail@plt+0x2b8>
   11570:	cmp	r0, #115	; 0x73
   11574:	beq	11724 <__assert_fail@plt+0x26c>
   11578:	ble	115a4 <__assert_fail@plt+0xec>
   1157c:	cmp	r0, #120	; 0x78
   11580:	beq	116e4 <__assert_fail@plt+0x22c>
   11584:	bgt	11608 <__assert_fail@plt+0x150>
   11588:	cmp	r0, #117	; 0x75
   1158c:	beq	1165c <__assert_fail@plt+0x1a4>
   11590:	cmp	r0, #118	; 0x76
   11594:	bne	1171c <__assert_fail@plt+0x264>
   11598:	mov	r3, #1
   1159c:	strb	r3, [sp, #100]	; 0x64
   115a0:	b	1154c <__assert_fail@plt+0x94>
   115a4:	cmn	r0, #2
   115a8:	beq	116f0 <__assert_fail@plt+0x238>
   115ac:	ble	116ac <__assert_fail@plt+0x1f4>
   115b0:	cmp	r0, #102	; 0x66
   115b4:	beq	11650 <__assert_fail@plt+0x198>
   115b8:	cmp	r0, #110	; 0x6e
   115bc:	bne	1171c <__assert_fail@plt+0x264>
   115c0:	mov	r2, #5
   115c4:	ldr	r1, [pc, #2008]	; 11da4 <__assert_fail@plt+0x8ec>
   115c8:	mov	r0, r4
   115cc:	ldr	fp, [r9]
   115d0:	bl	111e8 <dcgettext@plt>
   115d4:	ldr	r1, [pc, #1964]	; 11d88 <__assert_fail@plt+0x8d0>
   115d8:	mvn	r2, #-1073741824	; 0xc0000000
   115dc:	mov	r3, #0
   115e0:	str	r4, [sp, #16]
   115e4:	strd	r2, [sp]
   115e8:	str	r1, [sp, #8]
   115ec:	mov	r2, #0
   115f0:	mov	r3, #0
   115f4:	str	r0, [sp, #12]
   115f8:	mov	r0, fp
   115fc:	bl	17f30 <__assert_fail@plt+0x6a78>
   11600:	str	r0, [sp, #84]	; 0x54
   11604:	b	1154c <__assert_fail@plt+0x94>
   11608:	cmp	r0, #122	; 0x7a
   1160c:	beq	11644 <__assert_fail@plt+0x18c>
   11610:	cmp	r0, #256	; 0x100
   11614:	bne	1171c <__assert_fail@plt+0x264>
   11618:	ldr	r3, [sp, #24]
   1161c:	cmp	r3, #0
   11620:	beq	11638 <__assert_fail@plt+0x180>
   11624:	mov	r0, r3
   11628:	ldr	r1, [r9]
   1162c:	bl	11158 <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	bne	11d68 <__assert_fail@plt+0x8b0>
   11638:	ldr	r3, [r9]
   1163c:	str	r3, [sp, #24]
   11640:	b	1154c <__assert_fail@plt+0x94>
   11644:	mov	r3, #1
   11648:	strb	r3, [sp, #102]	; 0x66
   1164c:	b	1154c <__assert_fail@plt+0x94>
   11650:	mov	r3, #1
   11654:	strb	r3, [sp, #80]	; 0x50
   11658:	b	1154c <__assert_fail@plt+0x94>
   1165c:	ldr	r1, [r9]
   11660:	cmp	r1, #0
   11664:	moveq	r3, #3
   11668:	streq	r3, [sp, #96]	; 0x60
   1166c:	beq	1154c <__assert_fail@plt+0x94>
   11670:	ldr	r3, [pc, #1840]	; 11da8 <__assert_fail@plt+0x8f0>
   11674:	mov	ip, #1
   11678:	mov	r0, #4
   1167c:	ldr	r2, [r3]
   11680:	ldr	r3, [pc, #1828]	; 11dac <__assert_fail@plt+0x8f4>
   11684:	str	r2, [sp, #4]
   11688:	str	r0, [sp]
   1168c:	add	r2, r3, #12
   11690:	str	ip, [sp, #8]
   11694:	ldr	r0, [pc, #1812]	; 11db0 <__assert_fail@plt+0x8f8>
   11698:	bl	1360c <__assert_fail@plt+0x2154>
   1169c:	add	r0, sl, r0, lsl #2
   116a0:	ldr	r3, [r0, #276]	; 0x114
   116a4:	str	r3, [sp, #96]	; 0x60
   116a8:	b	1154c <__assert_fail@plt+0x94>
   116ac:	cmn	r0, #3
   116b0:	bne	1171c <__assert_fail@plt+0x264>
   116b4:	ldr	r1, [pc, #1784]	; 11db4 <__assert_fail@plt+0x8fc>
   116b8:	ldr	r3, [pc, #1784]	; 11db8 <__assert_fail@plt+0x900>
   116bc:	ldr	r2, [pc, #1784]	; 11dbc <__assert_fail@plt+0x904>
   116c0:	str	r4, [sp, #4]
   116c4:	ldr	r0, [r1]
   116c8:	ldr	r3, [r3]
   116cc:	ldr	r1, [pc, #1772]	; 11dc0 <__assert_fail@plt+0x908>
   116d0:	str	r2, [sp]
   116d4:	ldr	r2, [pc, #1768]	; 11dc4 <__assert_fail@plt+0x90c>
   116d8:	bl	1775c <__assert_fail@plt+0x62a4>
   116dc:	mov	r0, r4
   116e0:	bl	11308 <exit@plt>
   116e4:	mov	r3, #1
   116e8:	strb	r3, [sp, #101]	; 0x65
   116ec:	b	1154c <__assert_fail@plt+0x94>
   116f0:	mov	r0, r4
   116f4:	bl	12fc8 <__assert_fail@plt+0x1b10>
   116f8:	ldr	r4, [sp, #40]	; 0x28
   116fc:	mov	r2, #5
   11700:	ldr	r1, [pc, #1728]	; 11dc8 <__assert_fail@plt+0x910>
   11704:	mov	r0, r4
   11708:	bl	111e8 <dcgettext@plt>
   1170c:	mov	r1, r4
   11710:	mov	r2, r0
   11714:	mov	r0, r4
   11718:	bl	1129c <error@plt>
   1171c:	mov	r0, #1
   11720:	bl	12fc8 <__assert_fail@plt+0x1b10>
   11724:	mov	r2, #5
   11728:	ldr	r1, [pc, #1692]	; 11dcc <__assert_fail@plt+0x914>
   1172c:	mov	r0, r4
   11730:	ldr	fp, [r9]
   11734:	bl	111e8 <dcgettext@plt>
   11738:	ldr	r3, [pc, #1680]	; 11dd0 <__assert_fail@plt+0x918>
   1173c:	mvn	r2, #0
   11740:	str	r3, [sp, #8]
   11744:	mvn	r3, #-2147483648	; 0x80000000
   11748:	str	r4, [sp, #16]
   1174c:	strd	r2, [sp]
   11750:	mov	r1, r4
   11754:	mov	r2, #0
   11758:	mov	r3, #0
   1175c:	str	r0, [sp, #12]
   11760:	mov	r0, fp
   11764:	bl	17df4 <__assert_fail@plt+0x693c>
   11768:	strd	r0, [sp, #88]	; 0x58
   1176c:	b	1154c <__assert_fail@plt+0x94>
   11770:	ldr	r3, [pc, #1628]	; 11dd4 <__assert_fail@plt+0x91c>
   11774:	mov	fp, r0
   11778:	ldr	r3, [r3]
   1177c:	subs	r2, r6, r3
   11780:	str	r2, [sp, #40]	; 0x28
   11784:	lsl	r6, r3, #2
   11788:	beq	116f8 <__assert_fail@plt+0x240>
   1178c:	mov	r1, r0
   11790:	ldr	r0, [sp, #24]
   11794:	bl	16748 <__assert_fail@plt+0x5290>
   11798:	ldr	r3, [pc, #1592]	; 11dd8 <__assert_fail@plt+0x920>
   1179c:	cmp	r0, #0
   117a0:	mov	r7, r0
   117a4:	str	r0, [r3]
   117a8:	beq	11d2c <__assert_fail@plt+0x874>
   117ac:	ldr	r0, [pc, #1576]	; 11ddc <__assert_fail@plt+0x924>
   117b0:	bl	195d4 <__assert_fail@plt+0x811c>
   117b4:	ldr	r3, [sp, #40]	; 0x28
   117b8:	cmp	r3, #0
   117bc:	mov	r3, #1
   117c0:	str	r3, [sp, #24]
   117c4:	ble	1198c <__assert_fail@plt+0x4d4>
   117c8:	add	r3, r5, r6
   117cc:	str	fp, [sp, #72]	; 0x48
   117d0:	ldr	r9, [pc, #1544]	; 11de0 <__assert_fail@plt+0x928>
   117d4:	str	r3, [sp, #28]
   117d8:	mov	fp, r4
   117dc:	b	1183c <__assert_fail@plt+0x384>
   117e0:	ldr	r3, [pc, #1520]	; 11dd8 <__assert_fail@plt+0x920>
   117e4:	mov	r1, #3
   117e8:	mov	r0, #1
   117ec:	ldr	r5, [r3]
   117f0:	bl	13978 <__assert_fail@plt+0x24c0>
   117f4:	cmp	r0, #0
   117f8:	blt	11c6c <__assert_fail@plt+0x7b4>
   117fc:	tst	r0, #1024	; 0x400
   11800:	bne	118e4 <__assert_fail@plt+0x42c>
   11804:	mov	r2, r5
   11808:	add	r3, sp, #80	; 0x50
   1180c:	mov	r1, r7
   11810:	mov	r0, #1
   11814:	bl	12994 <__assert_fail@plt+0x14dc>
   11818:	ldr	r3, [sp, #24]
   1181c:	and	r3, r3, r0
   11820:	str	r3, [sp, #24]
   11824:	mov	r0, r7
   11828:	bl	13b84 <__assert_fail@plt+0x26cc>
   1182c:	ldr	r3, [sp, #40]	; 0x28
   11830:	add	fp, fp, #1
   11834:	cmp	r3, fp
   11838:	beq	1198c <__assert_fail@plt+0x4d4>
   1183c:	ldr	r4, [sp, #28]
   11840:	mov	r1, #3
   11844:	mov	r0, #0
   11848:	ldr	r2, [r4]
   1184c:	bl	16584 <__assert_fail@plt+0x50cc>
   11850:	bl	17d98 <__assert_fail@plt+0x68e0>
   11854:	ldr	r6, [r4], #4
   11858:	ldr	r1, [pc, #1412]	; 11de4 <__assert_fail@plt+0x92c>
   1185c:	str	r4, [sp, #28]
   11860:	mov	r7, r0
   11864:	mov	r0, r6
   11868:	bl	11158 <strcmp@plt>
   1186c:	subs	r4, r0, #0
   11870:	beq	117e0 <__assert_fail@plt+0x328>
   11874:	ldr	r3, [pc, #1372]	; 11dd8 <__assert_fail@plt+0x920>
   11878:	ldr	r1, [pc, #1384]	; 11de8 <__assert_fail@plt+0x930>
   1187c:	mov	r0, r6
   11880:	ldr	r5, [r3]
   11884:	bl	13b4c <__assert_fail@plt+0x2694>
   11888:	subs	r4, r0, #0
   1188c:	blt	11910 <__assert_fail@plt+0x458>
   11890:	mov	r2, r5
   11894:	add	r3, sp, #80	; 0x50
   11898:	mov	r1, r7
   1189c:	mov	r0, r4
   118a0:	bl	12994 <__assert_fail@plt+0x14dc>
   118a4:	str	r0, [sp, #32]
   118a8:	mov	r0, r4
   118ac:	bl	114ac <close@plt>
   118b0:	subs	r4, r0, #0
   118b4:	bne	11954 <__assert_fail@plt+0x49c>
   118b8:	ldr	r3, [sp, #32]
   118bc:	cmp	r3, #0
   118c0:	beq	118d0 <__assert_fail@plt+0x418>
   118c4:	ldr	r3, [sp, #96]	; 0x60
   118c8:	cmp	r3, #0
   118cc:	bne	1199c <__assert_fail@plt+0x4e4>
   118d0:	ldr	r3, [sp, #24]
   118d4:	ldr	r2, [sp, #32]
   118d8:	and	r3, r3, r2
   118dc:	str	r3, [sp, #24]
   118e0:	b	11824 <__assert_fail@plt+0x36c>
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #1276]	; 11dec <__assert_fail@plt+0x934>
   118ec:	mov	r0, r4
   118f0:	bl	111e8 <dcgettext@plt>
   118f4:	mov	r3, r7
   118f8:	mov	r1, r4
   118fc:	mov	r2, r0
   11900:	mov	r0, r4
   11904:	bl	1129c <error@plt>
   11908:	mov	r0, r4
   1190c:	b	11818 <__assert_fail@plt+0x360>
   11910:	bl	11338 <__errno_location@plt>
   11914:	ldr	r4, [r0]
   11918:	mov	r8, r0
   1191c:	cmp	r4, #13
   11920:	beq	11ca0 <__assert_fail@plt+0x7e8>
   11924:	mov	r2, #5
   11928:	ldr	r1, [pc, #1216]	; 11df0 <__assert_fail@plt+0x938>
   1192c:	mov	r0, #0
   11930:	bl	111e8 <dcgettext@plt>
   11934:	mov	r3, r7
   11938:	mov	r1, r4
   1193c:	mov	r2, r0
   11940:	mov	r0, #0
   11944:	bl	1129c <error@plt>
   11948:	mov	r3, #0
   1194c:	str	r3, [sp, #32]
   11950:	b	118d0 <__assert_fail@plt+0x418>
   11954:	bl	11338 <__errno_location@plt>
   11958:	mov	r3, #0
   1195c:	mov	r2, #5
   11960:	ldr	r1, [pc, #1164]	; 11df4 <__assert_fail@plt+0x93c>
   11964:	str	r3, [sp, #32]
   11968:	ldr	r4, [r0]
   1196c:	mov	r0, r3
   11970:	bl	111e8 <dcgettext@plt>
   11974:	mov	r3, r7
   11978:	mov	r1, r4
   1197c:	mov	r2, r0
   11980:	mov	r0, #0
   11984:	bl	1129c <error@plt>
   11988:	b	118d0 <__assert_fail@plt+0x418>
   1198c:	ldr	r3, [sp, #24]
   11990:	eor	r0, r3, #1
   11994:	add	sp, sp, #108	; 0x6c
   11998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	mov	r0, r6
   119a0:	bl	17d98 <__assert_fail@plt+0x68e0>
   119a4:	mov	r5, r0
   119a8:	str	r0, [sp, #36]	; 0x24
   119ac:	bl	136e4 <__assert_fail@plt+0x222c>
   119b0:	str	r0, [sp, #44]	; 0x2c
   119b4:	mov	r0, r5
   119b8:	bl	13894 <__assert_fail@plt+0x23dc>
   119bc:	mov	r1, #3
   119c0:	mov	r2, r0
   119c4:	str	r0, [sp, #68]	; 0x44
   119c8:	mov	r0, r4
   119cc:	bl	16584 <__assert_fail@plt+0x50cc>
   119d0:	bl	17d98 <__assert_fail@plt+0x68e0>
   119d4:	ldr	r3, [sp, #96]	; 0x60
   119d8:	cmp	r3, #3
   119dc:	ldrne	r3, [sp, #72]	; 0x48
   119e0:	strne	r3, [sp, #48]	; 0x30
   119e4:	str	r0, [sp, #52]	; 0x34
   119e8:	beq	11cec <__assert_fail@plt+0x834>
   119ec:	ldrb	r3, [sp, #100]	; 0x64
   119f0:	cmp	r3, #0
   119f4:	bne	11b84 <__assert_fail@plt+0x6cc>
   119f8:	ldr	r3, [sp, #96]	; 0x60
   119fc:	cmp	r3, #1
   11a00:	beq	11ae0 <__assert_fail@plt+0x628>
   11a04:	ldr	r4, [sp, #44]	; 0x2c
   11a08:	mov	r0, r4
   11a0c:	bl	13740 <__assert_fail@plt+0x2288>
   11a10:	ldr	r1, [sp, #36]	; 0x24
   11a14:	str	r7, [sp, #64]	; 0x40
   11a18:	sub	r3, r4, r1
   11a1c:	add	r3, r6, r3
   11a20:	str	r3, [sp, #60]	; 0x3c
   11a24:	sub	r5, r4, #1
   11a28:	ldr	r3, [sp, #32]
   11a2c:	str	fp, [sp, #76]	; 0x4c
   11a30:	str	r3, [sp, #56]	; 0x38
   11a34:	add	r1, r4, r0
   11a38:	mov	r8, r0
   11a3c:	mov	r7, r1
   11a40:	cmp	r8, #0
   11a44:	beq	11ad8 <__assert_fail@plt+0x620>
   11a48:	mov	r2, r8
   11a4c:	mov	r1, #48	; 0x30
   11a50:	ldr	r0, [sp, #44]	; 0x2c
   11a54:	mvn	sl, #99	; 0x63
   11a58:	mov	r4, #48	; 0x30
   11a5c:	bl	11368 <memset@plt>
   11a60:	mov	r3, #0
   11a64:	strb	r3, [r7], #-1
   11a68:	mov	r3, #1
   11a6c:	str	r3, [sp]
   11a70:	mov	r2, sl
   11a74:	ldr	r3, [sp, #36]	; 0x24
   11a78:	mov	r1, r6
   11a7c:	mvn	r0, #99	; 0x63
   11a80:	bl	1710c <__assert_fail@plt+0x5c54>
   11a84:	cmp	r0, #0
   11a88:	beq	11be4 <__assert_fail@plt+0x72c>
   11a8c:	bl	11338 <__errno_location@plt>
   11a90:	ldr	r3, [r0]
   11a94:	cmp	r3, #17
   11a98:	bne	11c64 <__assert_fail@plt+0x7ac>
   11a9c:	mov	fp, r7
   11aa0:	b	11ab0 <__assert_fail@plt+0x5f8>
   11aa4:	strb	r4, [fp], #-1
   11aa8:	cmp	r5, fp
   11aac:	beq	11c64 <__assert_fail@plt+0x7ac>
   11ab0:	ldrb	r1, [fp]
   11ab4:	mov	r0, r9
   11ab8:	bl	11320 <strchr@plt>
   11abc:	cmp	r0, #0
   11ac0:	beq	11d00 <__assert_fail@plt+0x848>
   11ac4:	ldrb	r3, [r0, #1]
   11ac8:	cmp	r3, #0
   11acc:	beq	11aa4 <__assert_fail@plt+0x5ec>
   11ad0:	strb	r3, [fp]
   11ad4:	b	11a68 <__assert_fail@plt+0x5b0>
   11ad8:	ldr	r7, [sp, #64]	; 0x40
   11adc:	ldr	fp, [sp, #76]	; 0x4c
   11ae0:	mov	r0, r6
   11ae4:	bl	111f4 <unlink@plt>
   11ae8:	subs	r4, r0, #0
   11aec:	bne	11bac <__assert_fail@plt+0x6f4>
   11af0:	ldrb	r3, [sp, #100]	; 0x64
   11af4:	cmp	r3, #0
   11af8:	bne	11cc8 <__assert_fail@plt+0x810>
   11afc:	ldr	r4, [sp, #48]	; 0x30
   11b00:	cmp	r4, #0
   11b04:	blt	11b68 <__assert_fail@plt+0x6b0>
   11b08:	ldr	r1, [sp, #52]	; 0x34
   11b0c:	mov	r0, r4
   11b10:	bl	11fa0 <__assert_fail@plt+0xae8>
   11b14:	ldr	r3, [sp, #32]
   11b18:	cmp	r0, #0
   11b1c:	movne	r3, #0
   11b20:	mov	r0, r4
   11b24:	str	r3, [sp, #32]
   11b28:	bl	114ac <close@plt>
   11b2c:	cmp	r0, #0
   11b30:	beq	11b68 <__assert_fail@plt+0x6b0>
   11b34:	bl	11338 <__errno_location@plt>
   11b38:	mov	r3, #0
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #684]	; 11df4 <__assert_fail@plt+0x93c>
   11b44:	str	r3, [sp, #32]
   11b48:	ldr	r4, [r0]
   11b4c:	mov	r0, r3
   11b50:	bl	111e8 <dcgettext@plt>
   11b54:	ldr	r3, [sp, #52]	; 0x34
   11b58:	mov	r1, r4
   11b5c:	mov	r2, r0
   11b60:	mov	r0, #0
   11b64:	bl	1129c <error@plt>
   11b68:	ldr	r0, [sp, #36]	; 0x24
   11b6c:	bl	13b84 <__assert_fail@plt+0x26cc>
   11b70:	ldr	r0, [sp, #68]	; 0x44
   11b74:	bl	13b84 <__assert_fail@plt+0x26cc>
   11b78:	ldr	r0, [sp, #52]	; 0x34
   11b7c:	bl	13b84 <__assert_fail@plt+0x26cc>
   11b80:	b	118d0 <__assert_fail@plt+0x418>
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #616]	; 11df8 <__assert_fail@plt+0x940>
   11b8c:	mov	r0, #0
   11b90:	bl	111e8 <dcgettext@plt>
   11b94:	mov	r1, #0
   11b98:	mov	r3, r7
   11b9c:	mov	r2, r0
   11ba0:	mov	r0, r1
   11ba4:	bl	1129c <error@plt>
   11ba8:	b	119f8 <__assert_fail@plt+0x540>
   11bac:	bl	11338 <__errno_location@plt>
   11bb0:	mov	r3, #0
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #572]	; 11dfc <__assert_fail@plt+0x944>
   11bbc:	str	r3, [sp, #32]
   11bc0:	ldr	r4, [r0]
   11bc4:	mov	r0, r3
   11bc8:	bl	111e8 <dcgettext@plt>
   11bcc:	mov	r3, r7
   11bd0:	mov	r1, r4
   11bd4:	mov	r2, r0
   11bd8:	mov	r0, #0
   11bdc:	bl	1129c <error@plt>
   11be0:	b	11afc <__assert_fail@plt+0x644>
   11be4:	ldr	r3, [sp, #48]	; 0x30
   11be8:	cmp	r3, #0
   11bec:	blt	11c0c <__assert_fail@plt+0x754>
   11bf0:	mov	r0, r3
   11bf4:	ldr	r1, [sp, #52]	; 0x34
   11bf8:	bl	11fa0 <__assert_fail@plt+0xae8>
   11bfc:	ldr	r3, [sp, #32]
   11c00:	cmp	r0, #0
   11c04:	movne	r3, #0
   11c08:	str	r3, [sp, #32]
   11c0c:	ldrb	r3, [sp, #100]	; 0x64
   11c10:	cmp	r3, #0
   11c14:	beq	11c54 <__assert_fail@plt+0x79c>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #476]	; 11e00 <__assert_fail@plt+0x948>
   11c20:	mov	r0, #0
   11c24:	bl	111e8 <dcgettext@plt>
   11c28:	ldr	r2, [sp, #56]	; 0x38
   11c2c:	mov	r1, #0
   11c30:	cmp	r2, #0
   11c34:	ldr	r2, [sp, #36]	; 0x24
   11c38:	ldr	r3, [sp, #64]	; 0x40
   11c3c:	str	r2, [sp]
   11c40:	moveq	r3, r6
   11c44:	str	r1, [sp, #56]	; 0x38
   11c48:	mov	r2, r0
   11c4c:	mov	r0, r1
   11c50:	bl	1129c <error@plt>
   11c54:	add	r2, r8, #1
   11c58:	ldr	r1, [sp, #44]	; 0x2c
   11c5c:	ldr	r0, [sp, #60]	; 0x3c
   11c60:	bl	11194 <memcpy@plt>
   11c64:	sub	r8, r8, #1
   11c68:	b	11a40 <__assert_fail@plt+0x588>
   11c6c:	bl	11338 <__errno_location@plt>
   11c70:	mov	r2, #5
   11c74:	ldr	r1, [pc, #392]	; 11e04 <__assert_fail@plt+0x94c>
   11c78:	ldr	r5, [r0]
   11c7c:	mov	r0, r4
   11c80:	bl	111e8 <dcgettext@plt>
   11c84:	mov	r3, r7
   11c88:	mov	r1, r5
   11c8c:	mov	r2, r0
   11c90:	mov	r0, r4
   11c94:	bl	1129c <error@plt>
   11c98:	mov	r0, r4
   11c9c:	b	11818 <__assert_fail@plt+0x360>
   11ca0:	ldrb	r3, [sp, #80]	; 0x50
   11ca4:	cmp	r3, #0
   11ca8:	beq	11924 <__assert_fail@plt+0x46c>
   11cac:	mov	r1, #128	; 0x80
   11cb0:	mov	r0, r6
   11cb4:	bl	11470 <chmod@plt>
   11cb8:	cmp	r0, #0
   11cbc:	beq	11d14 <__assert_fail@plt+0x85c>
   11cc0:	ldr	r4, [r8]
   11cc4:	b	11924 <__assert_fail@plt+0x46c>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #308]	; 11e08 <__assert_fail@plt+0x950>
   11cd0:	bl	111e8 <dcgettext@plt>
   11cd4:	mov	r3, r7
   11cd8:	mov	r1, r4
   11cdc:	mov	r2, r0
   11ce0:	mov	r0, r4
   11ce4:	bl	1129c <error@plt>
   11ce8:	b	11afc <__assert_fail@plt+0x644>
   11cec:	mov	r1, #18688	; 0x4900
   11cf0:	ldr	r0, [sp, #68]	; 0x44
   11cf4:	bl	13b4c <__assert_fail@plt+0x2694>
   11cf8:	str	r0, [sp, #48]	; 0x30
   11cfc:	b	119ec <__assert_fail@plt+0x534>
   11d00:	ldr	r3, [pc, #260]	; 11e0c <__assert_fail@plt+0x954>
   11d04:	mov	r2, #1000	; 0x3e8
   11d08:	ldr	r1, [pc, #256]	; 11e10 <__assert_fail@plt+0x958>
   11d0c:	ldr	r0, [pc, #256]	; 11e14 <__assert_fail@plt+0x95c>
   11d10:	bl	114b8 <__assert_fail@plt>
   11d14:	ldr	r1, [pc, #204]	; 11de8 <__assert_fail@plt+0x930>
   11d18:	mov	r0, r6
   11d1c:	bl	13b4c <__assert_fail@plt+0x2694>
   11d20:	subs	r4, r0, #0
   11d24:	bge	11890 <__assert_fail@plt+0x3d8>
   11d28:	b	11cc0 <__assert_fail@plt+0x808>
   11d2c:	bl	11338 <__errno_location@plt>
   11d30:	ldr	r3, [sp, #24]
   11d34:	ldr	r2, [pc, #220]	; 11e18 <__assert_fail@plt+0x960>
   11d38:	cmp	r3, #0
   11d3c:	moveq	r3, r2
   11d40:	mov	r2, r3
   11d44:	mov	r1, #3
   11d48:	ldr	r4, [r0]
   11d4c:	mov	r0, r7
   11d50:	bl	16584 <__assert_fail@plt+0x50cc>
   11d54:	mov	r1, r4
   11d58:	ldr	r2, [pc, #188]	; 11e1c <__assert_fail@plt+0x964>
   11d5c:	mov	r3, r0
   11d60:	mov	r0, #1
   11d64:	bl	1129c <error@plt>
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #172]	; 11e20 <__assert_fail@plt+0x968>
   11d70:	mov	r0, r4
   11d74:	bl	111e8 <dcgettext@plt>
   11d78:	mov	r1, r4
   11d7c:	mov	r2, r0
   11d80:	mov	r0, #1
   11d84:	bl	1129c <error@plt>
   11d88:	andeq	r9, r1, ip, lsl #31
   11d8c:	andeq	sl, r1, r8, lsr #3
   11d90:	strdeq	sl, [r1], -r4
   11d94:	strdeq	r9, [r1], -r8
   11d98:	andeq	sl, r1, ip, lsr r2
   11d9c:			; <UNDEFINED> instruction: 0x000137b0
   11da0:			; <UNDEFINED> instruction: 0x0002b1b8
   11da4:	andeq	sl, r1, r0, asr #3
   11da8:	andeq	fp, r2, r4, asr r1
   11dac:	andeq	r9, r1, ip, lsl #14
   11db0:	andeq	sl, r1, r0, lsl #4
   11db4:			; <UNDEFINED> instruction: 0x0002b1b4
   11db8:	andeq	fp, r2, r0, asr r1
   11dbc:	andeq	sl, r1, r0, lsr r2
   11dc0:	andeq	r9, r1, r0, lsl #19
   11dc4:	strdeq	sl, [r1], -r0
   11dc8:	andeq	sl, r1, r8, asr #4
   11dcc:	andeq	sl, r1, ip, lsl #4
   11dd0:	andeq	sl, r1, r0, lsr #4
   11dd4:	andeq	fp, r2, r8, lsr #3
   11dd8:	andeq	fp, r2, r0, asr #3
   11ddc:	andeq	r1, r1, r0, asr pc
   11de0:	ldrdeq	r9, [r1], -r8
   11de4:	andeq	sl, r1, r0, ror #4
   11de8:	andeq	r0, r0, r1, lsl #2
   11dec:	andeq	sl, r1, r8, ror r2
   11df0:	andeq	sl, r1, r8, lsr #5
   11df4:	andeq	sl, r1, r8, asr #5
   11df8:	ldrdeq	sl, [r1], -ip
   11dfc:	andeq	sl, r1, r0, lsl r3
   11e00:	strdeq	sl, [r1], -ip
   11e04:	andeq	sl, r1, r4, ror #4
   11e08:	andeq	sl, r1, r8, lsr #6
   11e0c:	andeq	r9, r1, ip, lsl r8
   11e10:	andeq	sl, r1, ip, ror #5
   11e14:	strdeq	sl, [r1], -r8
   11e18:	muleq	r1, ip, r1
   11e1c:	muleq	r1, ip, r4
   11e20:	ldrdeq	sl, [r1], -ip
   11e24:	mov	fp, #0
   11e28:	mov	lr, #0
   11e2c:	pop	{r1}		; (ldr r1, [sp], #4)
   11e30:	mov	r2, sp
   11e34:	push	{r2}		; (str r2, [sp, #-4]!)
   11e38:	push	{r0}		; (str r0, [sp, #-4]!)
   11e3c:	ldr	ip, [pc, #16]	; 11e54 <__assert_fail@plt+0x99c>
   11e40:	push	{ip}		; (str ip, [sp, #-4]!)
   11e44:	ldr	r0, [pc, #12]	; 11e58 <__assert_fail@plt+0x9a0>
   11e48:	ldr	r3, [pc, #12]	; 11e5c <__assert_fail@plt+0x9a4>
   11e4c:	bl	112cc <__libc_start_main@plt>
   11e50:	bl	114a0 <abort@plt>
   11e54:	ldrdeq	r9, [r1], -r0
   11e58:	andeq	r1, r1, r8, asr #9
   11e5c:	andeq	r9, r1, r0, ror r5
   11e60:	ldr	r3, [pc, #20]	; 11e7c <__assert_fail@plt+0x9c4>
   11e64:	ldr	r2, [pc, #20]	; 11e80 <__assert_fail@plt+0x9c8>
   11e68:	add	r3, pc, r3
   11e6c:	ldr	r2, [r3, r2]
   11e70:	cmp	r2, #0
   11e74:	bxeq	lr
   11e78:	b	112e4 <__gmon_start__@plt>
   11e7c:	muleq	r1, r0, r1
   11e80:	andeq	r0, r0, r4, asr #2
   11e84:	ldr	r3, [pc, #28]	; 11ea8 <__assert_fail@plt+0x9f0>
   11e88:	ldr	r0, [pc, #28]	; 11eac <__assert_fail@plt+0x9f4>
   11e8c:	sub	r3, r3, r0
   11e90:	cmp	r3, #6
   11e94:	bxls	lr
   11e98:	ldr	r3, [pc, #16]	; 11eb0 <__assert_fail@plt+0x9f8>
   11e9c:	cmp	r3, #0
   11ea0:	bxeq	lr
   11ea4:	bx	r3
   11ea8:	muleq	r2, pc, r1	; <UNPREDICTABLE>
   11eac:	muleq	r2, ip, r1
   11eb0:	andeq	r0, r0, r0
   11eb4:	ldr	r1, [pc, #36]	; 11ee0 <__assert_fail@plt+0xa28>
   11eb8:	ldr	r0, [pc, #36]	; 11ee4 <__assert_fail@plt+0xa2c>
   11ebc:	sub	r1, r1, r0
   11ec0:	asr	r1, r1, #2
   11ec4:	add	r1, r1, r1, lsr #31
   11ec8:	asrs	r1, r1, #1
   11ecc:	bxeq	lr
   11ed0:	ldr	r3, [pc, #16]	; 11ee8 <__assert_fail@plt+0xa30>
   11ed4:	cmp	r3, #0
   11ed8:	bxeq	lr
   11edc:	bx	r3
   11ee0:	muleq	r2, ip, r1
   11ee4:	muleq	r2, ip, r1
   11ee8:	andeq	r0, r0, r0
   11eec:	push	{r4, lr}
   11ef0:	ldr	r4, [pc, #24]	; 11f10 <__assert_fail@plt+0xa58>
   11ef4:	ldrb	r3, [r4]
   11ef8:	cmp	r3, #0
   11efc:	popne	{r4, pc}
   11f00:	bl	11e84 <__assert_fail@plt+0x9cc>
   11f04:	mov	r3, #1
   11f08:	strb	r3, [r4]
   11f0c:	pop	{r4, pc}
   11f10:			; <UNDEFINED> instruction: 0x0002b1bc
   11f14:	ldr	r0, [pc, #40]	; 11f44 <__assert_fail@plt+0xa8c>
   11f18:	ldr	r3, [r0]
   11f1c:	cmp	r3, #0
   11f20:	bne	11f28 <__assert_fail@plt+0xa70>
   11f24:	b	11eb4 <__assert_fail@plt+0x9fc>
   11f28:	ldr	r3, [pc, #24]	; 11f48 <__assert_fail@plt+0xa90>
   11f2c:	cmp	r3, #0
   11f30:	beq	11f24 <__assert_fail@plt+0xa6c>
   11f34:	push	{r4, lr}
   11f38:	blx	r3
   11f3c:	pop	{r4, lr}
   11f40:	b	11eb4 <__assert_fail@plt+0x9fc>
   11f44:	andeq	sl, r2, r4, lsl pc
	...
   11f50:	ldr	r3, [pc, #4]	; 11f5c <__assert_fail@plt+0xaa4>
   11f54:	ldr	r0, [r3]
   11f58:	b	16968 <__assert_fail@plt+0x54b0>
   11f5c:	andeq	fp, r2, r0, asr #3
   11f60:	push	{r4, r5, r6, lr}
   11f64:	mov	r4, r1
   11f68:	mov	r1, #3
   11f6c:	mov	r5, r0
   11f70:	bl	13978 <__assert_fail@plt+0x24c0>
   11f74:	cmp	r0, #0
   11f78:	pople	{r4, r5, r6, pc}
   11f7c:	cmp	r4, #0
   11f80:	orrne	r2, r0, #65536	; 0x10000
   11f84:	biceq	r2, r0, #65536	; 0x10000
   11f88:	cmp	r2, r0
   11f8c:	popeq	{r4, r5, r6, pc}
   11f90:	mov	r0, r5
   11f94:	mov	r1, #4
   11f98:	pop	{r4, r5, r6, lr}
   11f9c:	b	13978 <__assert_fail@plt+0x24c0>
   11fa0:	push	{r4, r5, r6, r7, r8, lr}
   11fa4:	mov	r7, r1
   11fa8:	mov	r8, r0
   11fac:	bl	11494 <fdatasync@plt>
   11fb0:	cmp	r0, #0
   11fb4:	beq	1206c <__assert_fail@plt+0xbb4>
   11fb8:	bl	11338 <__errno_location@plt>
   11fbc:	ldr	r4, [r0]
   11fc0:	mov	r6, r0
   11fc4:	sub	r0, r4, #21
   11fc8:	cmp	r4, #9
   11fcc:	cmpne	r0, #1
   11fd0:	movls	r5, #1
   11fd4:	movhi	r5, #0
   11fd8:	bls	1200c <__assert_fail@plt+0xb54>
   11fdc:	mov	r2, #5
   11fe0:	ldr	r1, [pc, #140]	; 12074 <__assert_fail@plt+0xbbc>
   11fe4:	mov	r0, r5
   11fe8:	bl	111e8 <dcgettext@plt>
   11fec:	mov	r3, r7
   11ff0:	mov	r1, r4
   11ff4:	mov	r2, r0
   11ff8:	mov	r0, r5
   11ffc:	bl	1129c <error@plt>
   12000:	str	r4, [r6]
   12004:	mvn	r0, #0
   12008:	pop	{r4, r5, r6, r7, r8, pc}
   1200c:	mov	r0, r8
   12010:	bl	1114c <fsync@plt>
   12014:	cmp	r0, #0
   12018:	beq	1206c <__assert_fail@plt+0xbb4>
   1201c:	ldr	r4, [r6]
   12020:	sub	r0, r4, #21
   12024:	cmp	r4, #9
   12028:	cmpne	r0, #1
   1202c:	movls	r5, #1
   12030:	movhi	r5, #0
   12034:	bls	12068 <__assert_fail@plt+0xbb0>
   12038:	mov	r2, #5
   1203c:	ldr	r1, [pc, #52]	; 12078 <__assert_fail@plt+0xbc0>
   12040:	mov	r0, r5
   12044:	bl	111e8 <dcgettext@plt>
   12048:	mov	r3, r7
   1204c:	mov	r1, r4
   12050:	mov	r2, r0
   12054:	mov	r0, r5
   12058:	bl	1129c <error@plt>
   1205c:	mvn	r0, #0
   12060:	str	r4, [r6]
   12064:	pop	{r4, r5, r6, r7, r8, pc}
   12068:	bl	11464 <sync@plt>
   1206c:	mov	r0, #0
   12070:	pop	{r4, r5, r6, r7, r8, pc}
   12074:	andeq	r9, r1, r4, lsr #16
   12078:	andeq	r9, r1, ip, lsr r8
   1207c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12080:	sub	sp, sp, #2048	; 0x800
   12084:	sub	sp, sp, #12
   12088:	mov	r4, r3
   1208c:	str	r3, [sp, #68]	; 0x44
   12090:	str	r2, [sp, #48]	; 0x30
   12094:	mov	r9, r0
   12098:	mov	r5, r1
   1209c:	bl	1132c <getpagesize@plt>
   120a0:	ldr	r3, [sp, #2096]	; 0x830
   120a4:	cmp	r3, #0
   120a8:	ldrd	r2, [r4]
   120ac:	strd	r2, [sp, #32]
   120b0:	ble	121b4 <__assert_fail@plt+0xcfc>
   120b4:	ldr	r3, [sp, #2096]	; 0x830
   120b8:	lsl	r3, r3, #20
   120bc:	lsr	r3, r3, #20
   120c0:	orr	r2, r3, r3, lsl #12
   120c4:	lsr	r3, r3, #4
   120c8:	lsr	r1, r2, #8
   120cc:	uxtb	r2, r2
   120d0:	uxtb	r1, r1
   120d4:	cmp	r2, r3
   120d8:	cmpeq	r1, r3
   120dc:	beq	121b4 <__assert_fail@plt+0xcfc>
   120e0:	mov	r1, #61440	; 0xf000
   120e4:	mov	r4, r1
   120e8:	str	r1, [sp, #64]	; 0x40
   120ec:	bl	17858 <__assert_fail@plt+0x63a0>
   120f0:	mov	sl, r0
   120f4:	ldrd	r0, [sp, #32]
   120f8:	mov	r3, r1
   120fc:	cmp	r0, #1
   12100:	sbcs	r3, r3, #0
   12104:	blt	1211c <__assert_fail@plt+0xc64>
   12108:	ldr	r2, [sp, #64]	; 0x40
   1210c:	mov	r3, #0
   12110:	cmp	r0, r2
   12114:	sbcs	r3, r1, r3
   12118:	blt	121c8 <__assert_fail@plt+0xd10>
   1211c:	mov	r1, #1
   12120:	mov	r0, r9
   12124:	bl	11f60 <__assert_fail@plt+0xaa8>
   12128:	mov	r3, #0
   1212c:	str	r3, [sp, #52]	; 0x34
   12130:	ldr	r3, [r5, #16]
   12134:	and	r3, r3, #61440	; 0xf000
   12138:	cmp	r3, #8192	; 0x2000
   1213c:	beq	121e0 <__assert_fail@plt+0xd28>
   12140:	mov	r3, #0
   12144:	str	r3, [sp]
   12148:	mov	r2, #0
   1214c:	mov	r3, #0
   12150:	mov	r0, r9
   12154:	bl	11260 <lseek64@plt>
   12158:	cmp	r0, #1
   1215c:	sbcs	r3, r1, #0
   12160:	blt	12734 <__assert_fail@plt+0x127c>
   12164:	bl	11338 <__errno_location@plt>
   12168:	mov	r3, #22
   1216c:	mov	r4, r3
   12170:	str	r3, [r0]
   12174:	ldr	r1, [pc, #1940]	; 12910 <__assert_fail@plt+0x1458>
   12178:	mov	r2, #5
   1217c:	mov	r0, #0
   12180:	bl	111e8 <dcgettext@plt>
   12184:	ldr	r3, [sp, #48]	; 0x30
   12188:	mov	r1, r4
   1218c:	mov	r2, r0
   12190:	mov	r0, #0
   12194:	bl	1129c <error@plt>
   12198:	mov	r0, sl
   1219c:	bl	13b84 <__assert_fail@plt+0x26cc>
   121a0:	mvn	r4, #0
   121a4:	mov	r0, r4
   121a8:	add	sp, sp, #2048	; 0x800
   121ac:	add	sp, sp, #12
   121b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b4:	ldr	r1, [pc, #1880]	; 12914 <__assert_fail@plt+0x145c>
   121b8:	mov	r3, #65536	; 0x10000
   121bc:	str	r3, [sp, #64]	; 0x40
   121c0:	mov	r4, r1
   121c4:	b	120ec <__assert_fail@plt+0xc34>
   121c8:	mov	r3, #1
   121cc:	str	r3, [sp, #52]	; 0x34
   121d0:	ldr	r3, [r5, #16]
   121d4:	and	r3, r3, #61440	; 0xf000
   121d8:	cmp	r3, #8192	; 0x2000
   121dc:	bne	12140 <__assert_fail@plt+0xc88>
   121e0:	add	r3, sp, #1392	; 0x570
   121e4:	add	r3, r3, #12
   121e8:	mov	r1, #6
   121ec:	mov	ip, #1
   121f0:	strh	r1, [r3]
   121f4:	mov	r2, r3
   121f8:	ldr	r1, [pc, #1816]	; 12918 <__assert_fail@plt+0x1460>
   121fc:	mov	r0, r9
   12200:	str	ip, [sp, #1408]	; 0x580
   12204:	bl	11254 <ioctl@plt>
   12208:	cmp	r0, #0
   1220c:	bne	12140 <__assert_fail@plt+0xc88>
   12210:	ldr	r3, [sp, #2096]	; 0x830
   12214:	cmp	r3, #0
   12218:	blt	127b0 <__assert_fail@plt+0x12f8>
   1221c:	ldrd	r0, [sp, #32]
   12220:	mov	r3, r1
   12224:	cmp	r0, #0
   12228:	sbcs	r3, r3, #0
   1222c:	blt	12240 <__assert_fail@plt+0xd88>
   12230:	cmp	r0, r4
   12234:	mov	r3, #0
   12238:	sbcs	r3, r1, r3
   1223c:	movlt	r4, r0
   12240:	ldr	r3, [sp, #2096]	; 0x830
   12244:	lsr	r5, r4, #1
   12248:	cmp	r5, #2
   1224c:	lsl	r3, r3, #20
   12250:	mov	r6, #3
   12254:	lsr	r3, r3, #20
   12258:	orr	r3, r3, r3, lsl #12
   1225c:	strb	r3, [sl, #2]
   12260:	lsr	r2, r3, #4
   12264:	lsr	r3, r3, #8
   12268:	strb	r2, [sl]
   1226c:	strb	r3, [sl, #1]
   12270:	bls	12290 <__assert_fail@plt+0xdd8>
   12274:	mov	r2, r6
   12278:	add	r0, sl, r6
   1227c:	mov	r1, sl
   12280:	lsl	r6, r6, #1
   12284:	bl	11194 <memcpy@plt>
   12288:	cmp	r6, r5
   1228c:	bls	12274 <__assert_fail@plt+0xdbc>
   12290:	cmp	r4, r6
   12294:	bhi	1279c <__assert_fail@plt+0x12e4>
   12298:	ldr	r3, [sp, #2096]	; 0x830
   1229c:	tst	r3, #4096	; 0x1000
   122a0:	beq	122cc <__assert_fail@plt+0xe14>
   122a4:	cmp	r4, #0
   122a8:	beq	122cc <__assert_fail@plt+0xe14>
   122ac:	mov	r3, #0
   122b0:	mvn	r1, #127	; 0x7f
   122b4:	ldrb	r2, [sl, r3]
   122b8:	eor	r2, r2, r1
   122bc:	strb	r2, [sl, r3]
   122c0:	add	r3, r3, #512	; 0x200
   122c4:	cmp	r4, r3
   122c8:	bhi	122b4 <__assert_fail@plt+0xdfc>
   122cc:	ldrb	r1, [sl, #2]
   122d0:	ldrb	r2, [sl, #1]
   122d4:	ldrb	r3, [sl]
   122d8:	add	r0, sp, #104	; 0x68
   122dc:	str	r0, [sp, #72]	; 0x48
   122e0:	str	r1, [sp, #8]
   122e4:	str	r2, [sp, #4]
   122e8:	str	r3, [sp]
   122ec:	add	r0, sp, #92	; 0x5c
   122f0:	ldr	r3, [pc, #1572]	; 1291c <__assert_fail@plt+0x1464>
   122f4:	mov	r2, #7
   122f8:	mov	r1, #1
   122fc:	bl	11344 <__sprintf_chk@plt>
   12300:	ldr	r3, [sp, #2108]	; 0x83c
   12304:	cmp	r3, #0
   12308:	bne	12748 <__assert_fail@plt+0x1290>
   1230c:	ldr	r3, [sp, #2108]	; 0x83c
   12310:	str	r3, [sp, #84]	; 0x54
   12314:	ldr	r3, [pc, #1540]	; 12920 <__assert_fail@plt+0x1468>
   12318:	mov	r2, #0
   1231c:	str	r3, [sp, #76]	; 0x4c
   12320:	mov	r3, #0
   12324:	mov	fp, #0
   12328:	str	fp, [sp, #80]	; 0x50
   1232c:	strd	r2, [sp, #24]
   12330:	ldrd	r4, [sp, #32]
   12334:	cmp	r4, #0
   12338:	sbcs	r1, r5, #0
   1233c:	blt	126e4 <__assert_fail@plt+0x122c>
   12340:	ldrd	r6, [sp, #24]
   12344:	ldr	r2, [sp, #64]	; 0x40
   12348:	mov	r3, #0
   1234c:	subs	r0, r4, r6
   12350:	sbc	r1, r5, r7
   12354:	cmp	r0, r2
   12358:	sbcs	r3, r1, r3
   1235c:	bge	126e4 <__assert_fail@plt+0x122c>
   12360:	cmp	r4, r6
   12364:	sbcs	ip, r5, r7
   12368:	blt	128c4 <__assert_fail@plt+0x140c>
   1236c:	subs	r6, r4, r6
   12370:	beq	128c4 <__assert_fail@plt+0x140c>
   12374:	ldr	r3, [sp, #2096]	; 0x830
   12378:	cmp	r3, #0
   1237c:	blt	126f4 <__assert_fail@plt+0x123c>
   12380:	ldr	r3, [sp, #36]	; 0x24
   12384:	mov	r4, #0
   12388:	cmp	r3, r4
   1238c:	movlt	r3, #0
   12390:	movge	r3, #1
   12394:	mov	r8, r4
   12398:	str	r3, [sp, #56]	; 0x38
   1239c:	b	123ac <__assert_fail@plt+0xef4>
   123a0:	add	r4, r4, r0
   123a4:	cmp	r6, r4
   123a8:	bls	124ac <__assert_fail@plt+0xff4>
   123ac:	sub	r2, r6, r4
   123b0:	add	r1, sl, r4
   123b4:	mov	r0, r9
   123b8:	bl	1138c <write@plt>
   123bc:	cmp	r0, #0
   123c0:	bgt	123a0 <__assert_fail@plt+0xee8>
   123c4:	ldrd	r2, [sp, #32]
   123c8:	cmp	r2, #0
   123cc:	sbcs	r3, r3, #0
   123d0:	blt	12678 <__assert_fail@plt+0x11c0>
   123d4:	bl	11338 <__errno_location@plt>
   123d8:	ldr	r5, [r0]
   123dc:	str	r0, [sp, #60]	; 0x3c
   123e0:	ldr	r3, [sp, #52]	; 0x34
   123e4:	eor	r7, r3, #1
   123e8:	cmp	r5, #22
   123ec:	movne	r7, #0
   123f0:	andeq	r7, r7, #1
   123f4:	cmp	r7, #0
   123f8:	bne	1271c <__assert_fail@plt+0x1264>
   123fc:	mov	r2, #5
   12400:	ldr	r1, [pc, #1308]	; 12924 <__assert_fail@plt+0x146c>
   12404:	mov	r0, r8
   12408:	bl	111e8 <dcgettext@plt>
   1240c:	add	r2, sp, #1392	; 0x570
   12410:	add	r2, r2, #12
   12414:	str	r0, [sp, #44]	; 0x2c
   12418:	ldrd	r0, [sp, #24]
   1241c:	adds	r0, r0, r4
   12420:	adc	r1, r1, #0
   12424:	bl	147e0 <__assert_fail@plt+0x3328>
   12428:	ldr	r3, [sp, #44]	; 0x2c
   1242c:	ldr	fp, [sp, #56]	; 0x38
   12430:	mov	r2, r3
   12434:	cmp	r5, #5
   12438:	movne	fp, #0
   1243c:	andeq	fp, fp, #1
   12440:	ldr	r3, [sp, #48]	; 0x30
   12444:	mov	r1, r5
   12448:	str	r0, [sp]
   1244c:	mov	r0, r8
   12450:	bl	1129c <error@plt>
   12454:	cmp	fp, #0
   12458:	beq	12198 <__assert_fail@plt+0xce0>
   1245c:	mvn	r5, r4, lsr #9
   12460:	mvn	r5, r5, lsl #9
   12464:	cmp	r6, r5
   12468:	bls	12198 <__assert_fail@plt+0xce0>
   1246c:	ldrd	r2, [sp, #24]
   12470:	add	r5, r5, #1
   12474:	str	r7, [sp]
   12478:	adds	r2, r2, r5
   1247c:	adc	r3, r3, #0
   12480:	mov	r0, r9
   12484:	bl	11260 <lseek64@plt>
   12488:	mvn	r3, #0
   1248c:	mvn	r2, #0
   12490:	cmp	r1, r3
   12494:	cmpeq	r0, r2
   12498:	beq	12708 <__assert_fail@plt+0x1250>
   1249c:	sub	r0, r5, r4
   124a0:	add	r4, r4, r0
   124a4:	cmp	r6, r4
   124a8:	bhi	123ac <__assert_fail@plt+0xef4>
   124ac:	ldrd	r6, [sp, #24]
   124b0:	mvn	r2, #0
   124b4:	mvn	r3, #-2147483648	; 0x80000000
   124b8:	subs	r0, r2, r6
   124bc:	sbc	r1, r3, r7
   124c0:	mov	r3, r1
   124c4:	mov	r5, #0
   124c8:	cmp	r0, r4
   124cc:	sbcs	r3, r3, r5
   124d0:	blt	126bc <__assert_fail@plt+0x1204>
   124d4:	adds	r0, r6, r4
   124d8:	ldr	r3, [sp, #2108]	; 0x83c
   124dc:	adc	r1, r7, r5
   124e0:	cmp	r3, #0
   124e4:	strd	r0, [sp, #24]
   124e8:	beq	12330 <__assert_fail@plt+0xe78>
   124ec:	ldrd	r2, [sp, #32]
   124f0:	cmp	r3, r1
   124f4:	cmpeq	r2, r0
   124f8:	beq	127dc <__assert_fail@plt+0x1324>
   124fc:	mov	r0, #0
   12500:	bl	111b8 <time@plt>
   12504:	ldr	r2, [sp, #84]	; 0x54
   12508:	cmp	r2, r0
   1250c:	str	r0, [sp, #80]	; 0x50
   12510:	bgt	12330 <__assert_fail@plt+0xe78>
   12514:	ldrd	r6, [sp, #24]
   12518:	mov	r2, #1
   1251c:	mov	r3, #0
   12520:	mov	r1, r7
   12524:	strd	r2, [sp, #8]
   12528:	strd	r2, [sp]
   1252c:	mov	r0, r6
   12530:	add	r2, sp, #752	; 0x2f0
   12534:	ldr	r3, [pc, #1004]	; 12928 <__assert_fail@plt+0x1470>
   12538:	bl	13be0 <__assert_fail@plt+0x2728>
   1253c:	mov	r1, r0
   12540:	mov	r4, r0
   12544:	ldr	r0, [sp, #76]	; 0x4c
   12548:	bl	11158 <strcmp@plt>
   1254c:	cmp	r0, #0
   12550:	beq	12330 <__assert_fail@plt+0xe78>
   12554:	ldrd	r2, [sp, #32]
   12558:	cmp	r2, #0
   1255c:	sbcs	r3, r3, #0
   12560:	blt	12944 <__assert_fail@plt+0x148c>
   12564:	ldrd	r2, [sp, #32]
   12568:	orrs	r3, r2, r3
   1256c:	moveq	r5, #100	; 0x64
   12570:	beq	125a0 <__assert_fail@plt+0x10e8>
   12574:	add	r1, pc, #908	; 0x38c
   12578:	ldrd	r0, [r1]
   1257c:	cmp	r7, r1
   12580:	cmpeq	r6, r0
   12584:	bhi	12898 <__assert_fail@plt+0x13e0>
   12588:	mov	r3, #100	; 0x64
   1258c:	umull	r0, r1, r6, r3
   12590:	mla	r1, r3, r7, r1
   12594:	ldrd	r2, [sp, #32]
   12598:	bl	193b0 <__assert_fail@plt+0x7ef8>
   1259c:	mov	r5, r0
   125a0:	mov	r0, #1
   125a4:	mov	r1, #0
   125a8:	add	r2, sp, #1392	; 0x570
   125ac:	mov	r3, #432	; 0x1b0
   125b0:	strd	r0, [sp, #8]
   125b4:	strd	r0, [sp]
   125b8:	add	r2, r2, #12
   125bc:	ldrd	r0, [sp, #32]
   125c0:	bl	13be0 <__assert_fail@plt+0x2728>
   125c4:	ldrd	r2, [sp, #32]
   125c8:	mov	r6, r0
   125cc:	ldrd	r0, [sp, #24]
   125d0:	cmp	r3, r1
   125d4:	cmpeq	r2, r0
   125d8:	ldr	r1, [pc, #844]	; 1292c <__assert_fail@plt+0x1474>
   125dc:	mov	r2, #5
   125e0:	mov	r0, #0
   125e4:	moveq	r4, r6
   125e8:	bl	111e8 <dcgettext@plt>
   125ec:	ldr	r2, [sp, #2108]	; 0x83c
   125f0:	ldr	r3, [sp, #72]	; 0x48
   125f4:	str	r2, [sp, #4]
   125f8:	ldr	r2, [sp, #2104]	; 0x838
   125fc:	sub	r3, r3, #12
   12600:	mov	r1, #0
   12604:	str	r2, [sp]
   12608:	str	r3, [sp, #8]
   1260c:	str	r6, [sp, #16]
   12610:	str	r4, [sp, #12]
   12614:	str	r5, [sp, #20]
   12618:	ldr	r3, [sp, #48]	; 0x30
   1261c:	mov	r2, r0
   12620:	mov	r0, r1
   12624:	bl	1129c <error@plt>
   12628:	mov	r1, r4
   1262c:	mov	r2, #652	; 0x28c
   12630:	add	r0, sp, #100	; 0x64
   12634:	bl	11278 <__strcpy_chk@plt>
   12638:	ldr	r1, [sp, #48]	; 0x30
   1263c:	mov	r0, r9
   12640:	bl	11fa0 <__assert_fail@plt+0xae8>
   12644:	ldr	r3, [sp, #80]	; 0x50
   12648:	add	r3, r3, #5
   1264c:	str	r3, [sp, #84]	; 0x54
   12650:	cmp	r0, #0
   12654:	beq	12860 <__assert_fail@plt+0x13a8>
   12658:	bl	11338 <__errno_location@plt>
   1265c:	ldr	r3, [r0]
   12660:	cmp	r3, #5
   12664:	bne	12198 <__assert_fail@plt+0xce0>
   12668:	add	r3, sp, #100	; 0x64
   1266c:	str	r3, [sp, #76]	; 0x4c
   12670:	mov	fp, #1
   12674:	b	12330 <__assert_fail@plt+0xe78>
   12678:	cmp	r0, #0
   1267c:	beq	12694 <__assert_fail@plt+0x11dc>
   12680:	bl	11338 <__errno_location@plt>
   12684:	ldr	r5, [r0]
   12688:	str	r0, [sp, #60]	; 0x3c
   1268c:	cmp	r5, #28
   12690:	bne	123e0 <__assert_fail@plt+0xf28>
   12694:	ldrd	r0, [sp, #24]
   12698:	mvn	r2, #0
   1269c:	mvn	r3, #-2147483648	; 0x80000000
   126a0:	subs	r0, r2, r0
   126a4:	sbc	r1, r3, r1
   126a8:	mov	r3, r1
   126ac:	mov	r5, #0
   126b0:	cmp	r0, r4
   126b4:	sbcs	r3, r3, r5
   126b8:	bge	1286c <__assert_fail@plt+0x13b4>
   126bc:	mov	r2, #5
   126c0:	ldr	r1, [pc, #616]	; 12930 <__assert_fail@plt+0x1478>
   126c4:	mov	r0, #0
   126c8:	bl	111e8 <dcgettext@plt>
   126cc:	mov	r1, #0
   126d0:	ldr	r3, [sp, #48]	; 0x30
   126d4:	mov	r2, r0
   126d8:	mov	r0, r1
   126dc:	bl	1129c <error@plt>
   126e0:	b	12198 <__assert_fail@plt+0xce0>
   126e4:	ldr	r3, [sp, #2096]	; 0x830
   126e8:	ldr	r6, [sp, #64]	; 0x40
   126ec:	cmp	r3, #0
   126f0:	bge	12380 <__assert_fail@plt+0xec8>
   126f4:	mov	r2, r6
   126f8:	mov	r1, sl
   126fc:	ldr	r0, [sp, #2100]	; 0x834
   12700:	bl	16b98 <__assert_fail@plt+0x56e0>
   12704:	b	12380 <__assert_fail@plt+0xec8>
   12708:	ldr	r3, [sp, #60]	; 0x3c
   1270c:	mov	r2, #5
   12710:	ldr	r1, [pc, #540]	; 12934 <__assert_fail@plt+0x147c>
   12714:	ldr	r4, [r3]
   12718:	b	1217c <__assert_fail@plt+0xcc4>
   1271c:	mov	r0, r9
   12720:	mov	r1, r8
   12724:	str	r7, [sp, #52]	; 0x34
   12728:	bl	11f60 <__assert_fail@plt+0xaa8>
   1272c:	mov	r0, r8
   12730:	b	123a0 <__assert_fail@plt+0xee8>
   12734:	orrs	r3, r0, r1
   12738:	beq	12210 <__assert_fail@plt+0xd58>
   1273c:	bl	11338 <__errno_location@plt>
   12740:	ldr	r4, [r0]
   12744:	b	12174 <__assert_fail@plt+0xcbc>
   12748:	mov	r2, #5
   1274c:	ldr	r1, [pc, #484]	; 12938 <__assert_fail@plt+0x1480>
   12750:	mov	r0, #0
   12754:	bl	111e8 <dcgettext@plt>
   12758:	ldr	r2, [sp, #2108]	; 0x83c
   1275c:	ldr	r3, [sp, #72]	; 0x48
   12760:	str	r2, [sp, #4]
   12764:	ldr	r2, [sp, #2104]	; 0x838
   12768:	mov	r1, #0
   1276c:	sub	r3, r3, #12
   12770:	str	r2, [sp]
   12774:	str	r3, [sp, #8]
   12778:	ldr	r3, [sp, #48]	; 0x30
   1277c:	mov	r2, r0
   12780:	mov	r0, r1
   12784:	bl	1129c <error@plt>
   12788:	mov	r0, #0
   1278c:	bl	111b8 <time@plt>
   12790:	add	r3, r0, #5
   12794:	str	r3, [sp, #84]	; 0x54
   12798:	b	12314 <__assert_fail@plt+0xe5c>
   1279c:	sub	r2, r4, r6
   127a0:	add	r0, sl, r6
   127a4:	mov	r1, sl
   127a8:	bl	11194 <memcpy@plt>
   127ac:	b	12298 <__assert_fail@plt+0xde0>
   127b0:	ldr	r3, [pc, #388]	; 1293c <__assert_fail@plt+0x1484>
   127b4:	add	r2, sp, #104	; 0x68
   127b8:	str	r2, [sp, #72]	; 0x48
   127bc:	ldm	r3, {r0, r1}
   127c0:	lsr	r3, r1, #16
   127c4:	str	r0, [sp, #92]	; 0x5c
   127c8:	strh	r1, [sp, #96]	; 0x60
   127cc:	strb	r3, [sp, #98]	; 0x62
   127d0:	b	12300 <__assert_fail@plt+0xe48>
   127d4:	ldrd	r2, [sp, #24]
   127d8:	strd	r2, [sp, #32]
   127dc:	ldr	r3, [sp, #76]	; 0x4c
   127e0:	ldrb	r0, [r3]
   127e4:	cmp	r0, #0
   127e8:	bne	12830 <__assert_fail@plt+0x1378>
   127ec:	bl	111b8 <time@plt>
   127f0:	ldr	r2, [sp, #84]	; 0x54
   127f4:	cmp	r2, r0
   127f8:	str	r0, [sp, #80]	; 0x50
   127fc:	bgt	12330 <__assert_fail@plt+0xe78>
   12800:	ldrd	r6, [sp, #32]
   12804:	mov	r2, #1
   12808:	mov	r3, #0
   1280c:	mov	r0, r6
   12810:	strd	r2, [sp, #8]
   12814:	strd	r2, [sp]
   12818:	mov	r1, r7
   1281c:	add	r2, sp, #752	; 0x2f0
   12820:	ldr	r3, [pc, #256]	; 12928 <__assert_fail@plt+0x1470>
   12824:	bl	13be0 <__assert_fail@plt+0x2728>
   12828:	mov	r4, r0
   1282c:	b	12554 <__assert_fail@plt+0x109c>
   12830:	ldrd	r6, [sp, #24]
   12834:	mov	r2, #1
   12838:	mov	r3, #0
   1283c:	mov	r0, r6
   12840:	strd	r2, [sp, #8]
   12844:	strd	r2, [sp]
   12848:	mov	r1, r7
   1284c:	add	r2, sp, #752	; 0x2f0
   12850:	ldr	r3, [pc, #208]	; 12928 <__assert_fail@plt+0x1470>
   12854:	bl	13be0 <__assert_fail@plt+0x2728>
   12858:	mov	r4, r0
   1285c:	b	12554 <__assert_fail@plt+0x109c>
   12860:	add	r3, sp, #100	; 0x64
   12864:	str	r3, [sp, #76]	; 0x4c
   12868:	b	12330 <__assert_fail@plt+0xe78>
   1286c:	ldrd	r2, [sp, #24]
   12870:	ldr	r1, [sp, #2108]	; 0x83c
   12874:	adds	r2, r2, r4
   12878:	adc	r3, r3, r5
   1287c:	cmp	r1, #0
   12880:	ldr	r1, [sp, #68]	; 0x44
   12884:	strd	r2, [sp, #24]
   12888:	strd	r2, [r1]
   1288c:	bne	127d4 <__assert_fail@plt+0x131c>
   12890:	strd	r2, [sp, #32]
   12894:	b	12330 <__assert_fail@plt+0xe78>
   12898:	mov	r2, #100	; 0x64
   1289c:	mov	r3, #0
   128a0:	ldrd	r0, [sp, #32]
   128a4:	bl	192dc <__assert_fail@plt+0x7e24>
   128a8:	mov	r2, r0
   128ac:	mov	r3, r1
   128b0:	mov	r0, r6
   128b4:	mov	r1, r7
   128b8:	bl	193b0 <__assert_fail@plt+0x7ef8>
   128bc:	mov	r5, r0
   128c0:	b	125a0 <__assert_fail@plt+0x10e8>
   128c4:	ldr	r1, [sp, #48]	; 0x30
   128c8:	mov	r0, r9
   128cc:	bl	11fa0 <__assert_fail@plt+0xae8>
   128d0:	cmp	r0, #0
   128d4:	beq	1298c <__assert_fail@plt+0x14d4>
   128d8:	bl	11338 <__errno_location@plt>
   128dc:	ldr	r3, [r0]
   128e0:	cmp	r3, #5
   128e4:	moveq	r4, #1
   128e8:	bne	12198 <__assert_fail@plt+0xce0>
   128ec:	mov	r0, sl
   128f0:	bl	13b84 <__assert_fail@plt+0x26cc>
   128f4:	mov	r0, r4
   128f8:	add	sp, sp, #2048	; 0x800
   128fc:	add	sp, sp, #12
   12900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12904:	nop			; (mov r0, r0)
   12908:			; <UNDEFINED> instruction: 0xf5c28f5c
   1290c:	addeq	r5, pc, #40, 24	; 0x2800
   12910:	andeq	r9, r1, r0, asr r8
   12914:	andeq	r0, r1, r2
   12918:	andmi	r6, r8, r1, lsl #26
   1291c:	andeq	r9, r1, r4, ror #16
   12920:	andeq	r9, r1, ip, lsl #31
   12924:	andeq	r9, r1, r4, lsr #17
   12928:			; <UNDEFINED> instruction: 0x000001b2
   1292c:	strdeq	r9, [r1], -r4
   12930:	muleq	r1, r0, r8
   12934:	andeq	r9, r1, r4, asr #17
   12938:	andeq	r9, r1, r4, ror r8
   1293c:	andeq	r9, r1, r8, lsl r9
   12940:	ldrdeq	r9, [r1], -r8
   12944:	mov	r2, #5
   12948:	ldr	r1, [pc, #-16]	; 12940 <__assert_fail@plt+0x1488>
   1294c:	mov	r0, #0
   12950:	bl	111e8 <dcgettext@plt>
   12954:	ldr	r2, [sp, #2108]	; 0x83c
   12958:	ldr	r3, [sp, #72]	; 0x48
   1295c:	str	r2, [sp, #4]
   12960:	ldr	r2, [sp, #2104]	; 0x838
   12964:	sub	r3, r3, #12
   12968:	mov	r1, #0
   1296c:	str	r2, [sp]
   12970:	str	r3, [sp, #8]
   12974:	str	r4, [sp, #12]
   12978:	ldr	r3, [sp, #48]	; 0x30
   1297c:	mov	r2, r0
   12980:	mov	r0, r1
   12984:	bl	1129c <error@plt>
   12988:	b	12628 <__assert_fail@plt+0x1170>
   1298c:	mov	r4, fp
   12990:	b	128ec <__assert_fail@plt+0x1434>
   12994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12998:	mov	r5, r3
   1299c:	ldrb	r3, [r3, #20]
   129a0:	sub	sp, sp, #188	; 0xbc
   129a4:	mov	r6, r0
   129a8:	cmp	r3, #0
   129ac:	str	r2, [sp, #36]	; 0x24
   129b0:	ldrbne	r2, [r5, #22]
   129b4:	ldrne	r3, [r5, #4]
   129b8:	str	r1, [sp, #20]
   129bc:	addne	r3, r2, r3
   129c0:	mov	r1, r0
   129c4:	add	r2, sp, #80	; 0x50
   129c8:	mov	r0, #3
   129cc:	str	r3, [sp, #40]	; 0x28
   129d0:	bl	11230 <__fxstat64@plt>
   129d4:	subs	r7, r0, #0
   129d8:	bne	12d30 <__assert_fail@plt+0x1878>
   129dc:	ldr	r3, [sp, #96]	; 0x60
   129e0:	and	r3, r3, #61440	; 0xf000
   129e4:	cmp	r3, #8192	; 0x2000
   129e8:	beq	12e88 <__assert_fail@plt+0x19d0>
   129ec:	cmp	r3, #4096	; 0x1000
   129f0:	cmpne	r3, #49152	; 0xc000
   129f4:	moveq	r2, #1
   129f8:	movne	r2, #0
   129fc:	str	r2, [sp, #32]
   12a00:	beq	12b14 <__assert_fail@plt+0x165c>
   12a04:	cmp	r3, #32768	; 0x8000
   12a08:	beq	12af0 <__assert_fail@plt+0x1638>
   12a0c:	mov	r1, #4
   12a10:	ldr	r0, [r5, #4]
   12a14:	bl	17954 <__assert_fail@plt+0x649c>
   12a18:	ldrd	r2, [r5, #8]
   12a1c:	mov	r1, r3
   12a20:	mvn	r3, #0
   12a24:	cmp	r1, r3
   12a28:	ldr	r3, [sp, #96]	; 0x60
   12a2c:	and	r3, r3, #61440	; 0xf000
   12a30:	mov	r9, r0
   12a34:	mov	r0, r2
   12a38:	mvn	r2, #0
   12a3c:	cmpeq	r0, r2
   12a40:	strd	r0, [sp, #24]
   12a44:	beq	12dbc <__assert_fail@plt+0x1904>
   12a48:	cmp	r3, #32768	; 0x8000
   12a4c:	beq	12ea4 <__assert_fail@plt+0x19ec>
   12a50:	ldr	r3, [r5, #4]
   12a54:	cmp	r3, #0
   12a58:	str	r3, [sp, #44]	; 0x2c
   12a5c:	beq	12da8 <__assert_fail@plt+0x18f0>
   12a60:	mov	r2, #0
   12a64:	mov	r3, #0
   12a68:	strd	r2, [sp, #48]	; 0x30
   12a6c:	ldr	r3, [pc, #1340]	; 12fb0 <__assert_fail@plt+0x1af8>
   12a70:	mov	r2, #0
   12a74:	str	r5, [sp, #60]	; 0x3c
   12a78:	mvn	r4, #1
   12a7c:	ldr	r8, [sp, #44]	; 0x2c
   12a80:	str	r9, [sp, #56]	; 0x38
   12a84:	mov	ip, r3
   12a88:	mov	r5, r9
   12a8c:	mov	sl, r2
   12a90:	b	12aac <__assert_fail@plt+0x15f4>
   12a94:	rsb	r2, r4, #0
   12a98:	cmp	r2, r8
   12a9c:	bcs	12ef8 <__assert_fail@plt+0x1a40>
   12aa0:	sub	sl, sl, r4
   12aa4:	add	r8, r8, r4
   12aa8:	ldr	r4, [ip]
   12aac:	cmp	r4, #0
   12ab0:	mvneq	r4, #1
   12ab4:	ldreq	ip, [pc, #1272]	; 12fb4 <__assert_fail@plt+0x1afc>
   12ab8:	beq	12a94 <__assert_fail@plt+0x15dc>
   12abc:	lsl	r9, r4, #2
   12ac0:	add	fp, ip, #4
   12ac4:	mov	r0, r5
   12ac8:	mov	r2, r9
   12acc:	mov	r1, fp
   12ad0:	blt	12fa8 <__assert_fail@plt+0x1af0>
   12ad4:	cmp	r4, r8
   12ad8:	bhi	12b4c <__assert_fail@plt+0x1694>
   12adc:	bl	11194 <memcpy@plt>
   12ae0:	add	r5, r5, r9
   12ae4:	add	ip, fp, r9
   12ae8:	sub	r8, r8, r4
   12aec:	b	12aa8 <__assert_fail@plt+0x15f0>
   12af0:	ldrd	r2, [sp, #128]	; 0x80
   12af4:	cmp	r2, #0
   12af8:	sbcs	r3, r3, #0
   12afc:	bge	12a0c <__assert_fail@plt+0x1554>
   12b00:	ldr	r4, [sp, #32]
   12b04:	mov	r2, #5
   12b08:	ldr	r1, [pc, #1192]	; 12fb8 <__assert_fail@plt+0x1b00>
   12b0c:	mov	r0, r4
   12b10:	b	12d4c <__assert_fail@plt+0x1894>
   12b14:	mov	r2, #5
   12b18:	ldr	r1, [pc, #1180]	; 12fbc <__assert_fail@plt+0x1b04>
   12b1c:	mov	r0, #0
   12b20:	bl	111e8 <dcgettext@plt>
   12b24:	mov	r1, #0
   12b28:	ldr	r3, [sp, #20]
   12b2c:	mov	r2, r0
   12b30:	mov	r0, r1
   12b34:	bl	1129c <error@plt>
   12b38:	mov	r3, #0
   12b3c:	str	r3, [sp, #32]
   12b40:	ldr	r0, [sp, #32]
   12b44:	add	sp, sp, #188	; 0xbc
   12b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b4c:	cmp	r8, #1
   12b50:	ldr	r9, [sp, #56]	; 0x38
   12b54:	str	sl, [sp, #56]	; 0x38
   12b58:	mov	sl, r5
   12b5c:	ldr	r5, [sp, #60]	; 0x3c
   12b60:	bls	12d70 <__assert_fail@plt+0x18b8>
   12b64:	add	r2, r8, r8, lsl #1
   12b68:	cmp	r4, r2
   12b6c:	bhi	12d70 <__assert_fail@plt+0x18b8>
   12b70:	subs	r2, r4, #1
   12b74:	asr	r1, r4, #31
   12b78:	sbc	r3, r1, #0
   12b7c:	str	r9, [sp, #60]	; 0x3c
   12b80:	str	r7, [sp, #64]	; 0x40
   12b84:	str	r6, [sp, #68]	; 0x44
   12b88:	add	fp, ip, #8
   12b8c:	sub	r4, r4, #1
   12b90:	mov	r6, r2
   12b94:	mov	r7, r3
   12b98:	ldr	r9, [sp, #36]	; 0x24
   12b9c:	b	12bb0 <__assert_fail@plt+0x16f8>
   12ba0:	subs	r6, r6, #1
   12ba4:	add	fp, fp, #4
   12ba8:	sub	r4, r4, #1
   12bac:	sbc	r7, r7, #0
   12bb0:	add	r1, r4, #1
   12bb4:	cmp	r8, r1
   12bb8:	mov	r2, r6
   12bbc:	mov	r3, r7
   12bc0:	mov	r0, r9
   12bc4:	beq	12bdc <__assert_fail@plt+0x1724>
   12bc8:	bl	16788 <__assert_fail@plt+0x52d0>
   12bcc:	mov	r3, #0
   12bd0:	cmp	r1, r3
   12bd4:	cmpeq	r0, r8
   12bd8:	bcs	12ba0 <__assert_fail@plt+0x16e8>
   12bdc:	ldr	r3, [fp, #-4]
   12be0:	subs	r8, r8, #1
   12be4:	str	r3, [sl]
   12be8:	add	sl, sl, #4
   12bec:	bne	12ba0 <__assert_fail@plt+0x16e8>
   12bf0:	ldr	r9, [sp, #60]	; 0x3c
   12bf4:	ldr	r7, [sp, #64]	; 0x40
   12bf8:	ldr	r6, [sp, #68]	; 0x44
   12bfc:	ldr	r2, [sp, #56]	; 0x38
   12c00:	ldr	r3, [sp, #44]	; 0x2c
   12c04:	sub	fp, r2, #1
   12c08:	sub	sl, r3, r2
   12c0c:	sub	r2, r3, #1
   12c10:	str	r7, [sp, #44]	; 0x2c
   12c14:	str	r6, [sp, #56]	; 0x38
   12c18:	mov	r8, fp
   12c1c:	mov	r4, #0
   12c20:	mov	r6, r3
   12c24:	mov	r7, r2
   12c28:	b	12c54 <__assert_fail@plt+0x179c>
   12c2c:	ldr	r3, [r9, r4, lsl #2]
   12c30:	add	r8, r8, r7
   12c34:	str	r3, [r9, sl, lsl #2]
   12c38:	mvn	r3, #0
   12c3c:	str	r3, [r9, r4, lsl #2]
   12c40:	add	r4, r4, #1
   12c44:	cmp	r4, r6
   12c48:	add	sl, sl, #1
   12c4c:	sub	r8, r8, fp
   12c50:	bcs	12c98 <__assert_fail@plt+0x17e0>
   12c54:	cmp	r8, fp
   12c58:	bls	12c2c <__assert_fail@plt+0x1774>
   12c5c:	sub	r2, sl, r4
   12c60:	subs	r2, r2, #1
   12c64:	mov	r3, #0
   12c68:	sbc	r3, r3, #0
   12c6c:	ldr	r0, [sp, #36]	; 0x24
   12c70:	bl	16788 <__assert_fail@plt+0x52d0>
   12c74:	ldr	r3, [r9, r4, lsl #2]
   12c78:	sub	r8, r8, fp
   12c7c:	add	r0, r4, r0
   12c80:	ldr	r2, [r9, r0, lsl #2]
   12c84:	str	r2, [r9, r4, lsl #2]
   12c88:	add	r4, r4, #1
   12c8c:	cmp	r4, r6
   12c90:	str	r3, [r9, r0, lsl #2]
   12c94:	bcc	12c54 <__assert_fail@plt+0x179c>
   12c98:	ldr	r7, [sp, #44]	; 0x2c
   12c9c:	ldr	r6, [sp, #56]	; 0x38
   12ca0:	ldr	r0, [sp, #36]	; 0x24
   12ca4:	bl	16780 <__assert_fail@plt+0x52c8>
   12ca8:	ldrd	r2, [sp, #48]	; 0x30
   12cac:	orrs	r1, r2, r3
   12cb0:	mov	sl, r0
   12cb4:	beq	12d80 <__assert_fail@plt+0x18c8>
   12cb8:	mov	fp, #1
   12cbc:	mov	r8, #0
   12cc0:	strd	r2, [sp, #72]	; 0x48
   12cc4:	mov	r4, #0
   12cc8:	ldrb	r3, [r5, #22]
   12ccc:	ldr	r2, [r5, #4]
   12cd0:	mov	r1, r7
   12cd4:	add	r3, r3, r2
   12cd8:	cmp	r4, r3
   12cdc:	bcs	12d84 <__assert_fail@plt+0x18cc>
   12ce0:	cmp	r4, r2
   12ce4:	add	r3, sp, #72	; 0x48
   12ce8:	ldrcc	r1, [r9, r4, lsl #2]
   12cec:	add	r4, r4, #1
   12cf0:	str	r4, [sp, #8]
   12cf4:	stm	sp, {r1, sl}
   12cf8:	str	r8, [sp, #12]
   12cfc:	ldr	r2, [sp, #20]
   12d00:	add	r1, sp, #80	; 0x50
   12d04:	mov	r0, r6
   12d08:	bl	1207c <__assert_fail@plt+0xbc4>
   12d0c:	cmp	r0, #0
   12d10:	beq	12cc8 <__assert_fail@plt+0x1810>
   12d14:	ldr	fp, [sp, #32]
   12d18:	bge	12cc8 <__assert_fail@plt+0x1810>
   12d1c:	mov	r0, r9
   12d20:	bl	13b84 <__assert_fail@plt+0x26cc>
   12d24:	ldr	r0, [sp, #32]
   12d28:	add	sp, sp, #188	; 0xbc
   12d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d30:	bl	11338 <__errno_location@plt>
   12d34:	mov	r3, #0
   12d38:	ldr	r1, [pc, #640]	; 12fc0 <__assert_fail@plt+0x1b08>
   12d3c:	mov	r2, #5
   12d40:	str	r3, [sp, #32]
   12d44:	ldr	r4, [r0]
   12d48:	mov	r0, r3
   12d4c:	bl	111e8 <dcgettext@plt>
   12d50:	ldr	r3, [sp, #20]
   12d54:	mov	r1, r4
   12d58:	mov	r2, r0
   12d5c:	mov	r0, #0
   12d60:	bl	1129c <error@plt>
   12d64:	ldr	r0, [sp, #32]
   12d68:	add	sp, sp, #188	; 0xbc
   12d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d70:	ldr	r3, [sp, #56]	; 0x38
   12d74:	add	r3, r3, r8
   12d78:	str	r3, [sp, #56]	; 0x38
   12d7c:	b	12bfc <__assert_fail@plt+0x1744>
   12d80:	mov	fp, #1
   12d84:	ldrd	r2, [sp, #24]
   12d88:	orrs	r1, r2, r3
   12d8c:	beq	12f34 <__assert_fail@plt+0x1a7c>
   12d90:	strd	r2, [sp, #72]	; 0x48
   12d94:	mov	r2, #0
   12d98:	mov	r3, #0
   12d9c:	ldr	r8, [sp, #40]	; 0x28
   12da0:	strd	r2, [sp, #24]
   12da4:	b	12cc4 <__assert_fail@plt+0x180c>
   12da8:	ldr	r0, [sp, #36]	; 0x24
   12dac:	bl	16780 <__assert_fail@plt+0x52c8>
   12db0:	mov	fp, #1
   12db4:	mov	sl, r0
   12db8:	b	12d84 <__assert_fail@plt+0x18cc>
   12dbc:	cmp	r3, #32768	; 0x8000
   12dc0:	bne	12f0c <__assert_fail@plt+0x1a54>
   12dc4:	ldrb	r3, [r5, #21]
   12dc8:	ldrd	r0, [sp, #128]	; 0x80
   12dcc:	cmp	r3, #0
   12dd0:	strd	r0, [sp, #24]
   12dd4:	bne	12a50 <__assert_fail@plt+0x1598>
   12dd8:	ldr	sl, [sp, #136]	; 0x88
   12ddc:	sub	r3, sl, #1
   12de0:	cmn	r3, #-536870911	; 0xe0000001
   12de4:	movhi	sl, #512	; 0x200
   12de8:	mov	r2, sl
   12dec:	asr	fp, sl, #31
   12df0:	mov	r3, fp
   12df4:	bl	192dc <__assert_fail@plt+0x7e24>
   12df8:	ldr	ip, [sp, #24]
   12dfc:	mov	r0, r2
   12e00:	mov	r1, r3
   12e04:	ldrd	r2, [sp, #24]
   12e08:	cmp	r2, sl
   12e0c:	ldr	r2, [sp, #28]
   12e10:	sbcs	r3, r3, fp
   12e14:	movlt	r3, #1
   12e18:	movge	r3, #0
   12e1c:	orrs	r2, ip, r2
   12e20:	moveq	r3, #0
   12e24:	andne	r3, r3, #1
   12e28:	cmp	r3, #0
   12e2c:	bne	12f48 <__assert_fail@plt+0x1a90>
   12e30:	mov	r2, #0
   12e34:	mov	r3, #0
   12e38:	strd	r2, [sp, #48]	; 0x30
   12e3c:	orrs	r3, r0, r1
   12e40:	beq	12ee4 <__assert_fail@plt+0x1a2c>
   12e44:	subs	sl, sl, r0
   12e48:	sbc	fp, fp, r1
   12e4c:	ldrd	r0, [sp, #24]
   12e50:	mvn	r2, #0
   12e54:	mvn	r3, #-2147483648	; 0x80000000
   12e58:	subs	r0, r2, r0
   12e5c:	sbc	r1, r3, r1
   12e60:	mov	r3, r1
   12e64:	cmp	r0, sl
   12e68:	sbcs	r1, r3, fp
   12e6c:	movlt	fp, r3
   12e70:	ldrd	r2, [sp, #24]
   12e74:	movlt	sl, r0
   12e78:	adds	r2, r2, sl
   12e7c:	adc	r3, r3, fp
   12e80:	strd	r2, [sp, #24]
   12e84:	b	12ee4 <__assert_fail@plt+0x1a2c>
   12e88:	mov	r0, r6
   12e8c:	bl	1147c <isatty@plt>
   12e90:	cmp	r0, #0
   12e94:	bne	12b14 <__assert_fail@plt+0x165c>
   12e98:	ldr	r3, [sp, #96]	; 0x60
   12e9c:	and	r3, r3, #61440	; 0xf000
   12ea0:	b	129ec <__assert_fail@plt+0x1534>
   12ea4:	ldr	r2, [sp, #136]	; 0x88
   12ea8:	ldrd	r0, [sp, #128]	; 0x80
   12eac:	sub	r3, r2, #1
   12eb0:	cmn	r3, #-536870911	; 0xe0000001
   12eb4:	strd	r0, [sp, #48]	; 0x30
   12eb8:	ldrd	r0, [sp, #24]
   12ebc:	movhi	r2, #512	; 0x200
   12ec0:	cmp	r0, r2
   12ec4:	asr	r3, r2, #31
   12ec8:	sbcs	ip, r1, r3
   12ecc:	movlt	r3, r1
   12ed0:	movlt	r2, r0
   12ed4:	ldrd	r0, [sp, #48]	; 0x30
   12ed8:	cmp	r0, r2
   12edc:	sbcs	r3, r1, r3
   12ee0:	bge	12a50 <__assert_fail@plt+0x1598>
   12ee4:	ldr	r3, [r5, #4]
   12ee8:	cmp	r3, #0
   12eec:	str	r3, [sp, #44]	; 0x2c
   12ef0:	bne	12a6c <__assert_fail@plt+0x15b4>
   12ef4:	b	12ca0 <__assert_fail@plt+0x17e8>
   12ef8:	add	r3, sl, r8
   12efc:	ldr	r9, [sp, #56]	; 0x38
   12f00:	ldr	r5, [sp, #60]	; 0x3c
   12f04:	str	r3, [sp, #56]	; 0x38
   12f08:	b	12bfc <__assert_fail@plt+0x1744>
   12f0c:	mov	r3, #2
   12f10:	str	r3, [sp]
   12f14:	mov	r2, #0
   12f18:	mov	r3, #0
   12f1c:	mov	r0, r6
   12f20:	bl	11260 <lseek64@plt>
   12f24:	cmp	r0, #1
   12f28:	sbcs	r3, r1, #0
   12f2c:	strdge	r0, [sp, #24]
   12f30:	b	12a50 <__assert_fail@plt+0x1598>
   12f34:	ldr	r3, [r5, #16]
   12f38:	cmp	r3, #0
   12f3c:	bne	12f54 <__assert_fail@plt+0x1a9c>
   12f40:	str	fp, [sp, #32]
   12f44:	b	12d1c <__assert_fail@plt+0x1864>
   12f48:	ldrd	r2, [sp, #24]
   12f4c:	strd	r2, [sp, #48]	; 0x30
   12f50:	b	12e3c <__assert_fail@plt+0x1984>
   12f54:	ldrd	r2, [sp, #24]
   12f58:	mov	r0, r6
   12f5c:	bl	111c4 <ftruncate64@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	12f40 <__assert_fail@plt+0x1a88>
   12f68:	ldr	r3, [sp, #96]	; 0x60
   12f6c:	and	r3, r3, #61440	; 0xf000
   12f70:	cmp	r3, #32768	; 0x8000
   12f74:	bne	12f40 <__assert_fail@plt+0x1a88>
   12f78:	bl	11338 <__errno_location@plt>
   12f7c:	mov	r2, #5
   12f80:	ldr	r1, [pc, #60]	; 12fc4 <__assert_fail@plt+0x1b0c>
   12f84:	ldr	r4, [r0]
   12f88:	mov	r0, #0
   12f8c:	bl	111e8 <dcgettext@plt>
   12f90:	ldr	r3, [sp, #20]
   12f94:	mov	r1, r4
   12f98:	mov	r2, r0
   12f9c:	mov	r0, #0
   12fa0:	bl	1129c <error@plt>
   12fa4:	b	12d1c <__assert_fail@plt+0x1864>
   12fa8:	mov	ip, fp
   12fac:	b	12a94 <__assert_fail@plt+0x15dc>
   12fb0:	strdeq	r9, [r1], -r8
   12fb4:	strdeq	r9, [r1], -ip
   12fb8:	andeq	r9, r1, ip, asr #18
   12fbc:	andeq	r9, r1, r4, lsr r9
   12fc0:	andeq	r9, r1, r0, lsr #18
   12fc4:	andeq	r9, r1, r8, ror #18
   12fc8:	subs	r5, r0, #0
   12fcc:	push	{r7, lr}
   12fd0:	sub	sp, sp, #56	; 0x38
   12fd4:	beq	13010 <__assert_fail@plt+0x1b58>
   12fd8:	ldr	r3, [pc, #764]	; 132dc <__assert_fail@plt+0x1e24>
   12fdc:	mov	r2, #5
   12fe0:	ldr	r1, [pc, #760]	; 132e0 <__assert_fail@plt+0x1e28>
   12fe4:	mov	r0, #0
   12fe8:	ldr	r4, [r3]
   12fec:	bl	111e8 <dcgettext@plt>
   12ff0:	ldr	r3, [pc, #748]	; 132e4 <__assert_fail@plt+0x1e2c>
   12ff4:	mov	r1, #1
   12ff8:	ldr	r3, [r3]
   12ffc:	mov	r2, r0
   13000:	mov	r0, r4
   13004:	bl	113a4 <__fprintf_chk@plt>
   13008:	mov	r0, r5
   1300c:	bl	11308 <exit@plt>
   13010:	mov	r2, #5
   13014:	ldr	r1, [pc, #716]	; 132e8 <__assert_fail@plt+0x1e30>
   13018:	bl	111e8 <dcgettext@plt>
   1301c:	ldr	r3, [pc, #704]	; 132e4 <__assert_fail@plt+0x1e2c>
   13020:	ldr	r7, [pc, #708]	; 132ec <__assert_fail@plt+0x1e34>
   13024:	ldr	r4, [pc, #708]	; 132f0 <__assert_fail@plt+0x1e38>
   13028:	ldr	r2, [r3]
   1302c:	mov	r1, r0
   13030:	mov	r0, #1
   13034:	bl	11380 <__printf_chk@plt>
   13038:	mov	r2, #5
   1303c:	ldr	r1, [pc, #688]	; 132f4 <__assert_fail@plt+0x1e3c>
   13040:	mov	r0, r5
   13044:	bl	111e8 <dcgettext@plt>
   13048:	ldr	r1, [r7]
   1304c:	bl	11134 <fputs_unlocked@plt>
   13050:	mov	r2, #5
   13054:	ldr	r1, [pc, #668]	; 132f8 <__assert_fail@plt+0x1e40>
   13058:	mov	r0, r5
   1305c:	bl	111e8 <dcgettext@plt>
   13060:	ldr	r1, [r7]
   13064:	bl	11134 <fputs_unlocked@plt>
   13068:	mov	r2, #5
   1306c:	ldr	r1, [pc, #648]	; 132fc <__assert_fail@plt+0x1e44>
   13070:	mov	r0, r5
   13074:	bl	111e8 <dcgettext@plt>
   13078:	ldr	r1, [r7]
   1307c:	bl	11134 <fputs_unlocked@plt>
   13080:	mov	r2, #5
   13084:	ldr	r1, [pc, #628]	; 13300 <__assert_fail@plt+0x1e48>
   13088:	mov	r0, r5
   1308c:	bl	111e8 <dcgettext@plt>
   13090:	mov	r2, #3
   13094:	mov	r1, r0
   13098:	mov	r0, #1
   1309c:	bl	11380 <__printf_chk@plt>
   130a0:	mov	r2, #5
   130a4:	ldr	r1, [pc, #600]	; 13304 <__assert_fail@plt+0x1e4c>
   130a8:	mov	r0, r5
   130ac:	bl	111e8 <dcgettext@plt>
   130b0:	ldr	r1, [r7]
   130b4:	bl	11134 <fputs_unlocked@plt>
   130b8:	mov	r2, #5
   130bc:	ldr	r1, [pc, #580]	; 13308 <__assert_fail@plt+0x1e50>
   130c0:	mov	r0, r5
   130c4:	bl	111e8 <dcgettext@plt>
   130c8:	ldr	r1, [r7]
   130cc:	bl	11134 <fputs_unlocked@plt>
   130d0:	mov	r2, #5
   130d4:	ldr	r1, [pc, #560]	; 1330c <__assert_fail@plt+0x1e54>
   130d8:	mov	r0, r5
   130dc:	bl	111e8 <dcgettext@plt>
   130e0:	ldr	r1, [r7]
   130e4:	bl	11134 <fputs_unlocked@plt>
   130e8:	mov	r2, #5
   130ec:	ldr	r1, [pc, #540]	; 13310 <__assert_fail@plt+0x1e58>
   130f0:	mov	r0, r5
   130f4:	bl	111e8 <dcgettext@plt>
   130f8:	ldr	r1, [r7]
   130fc:	bl	11134 <fputs_unlocked@plt>
   13100:	mov	r2, #5
   13104:	ldr	r1, [pc, #520]	; 13314 <__assert_fail@plt+0x1e5c>
   13108:	mov	r0, r5
   1310c:	bl	111e8 <dcgettext@plt>
   13110:	ldr	r1, [r7]
   13114:	bl	11134 <fputs_unlocked@plt>
   13118:	ldm	r4!, {r0, r1, r2, r3}
   1311c:	mov	lr, sp
   13120:	stmia	lr!, {r0, r1, r2, r3}
   13124:	ldm	r4!, {r0, r1, r2, r3}
   13128:	ldr	ip, [sp]
   1312c:	stmia	lr!, {r0, r1, r2, r3}
   13130:	cmp	ip, #0
   13134:	ldm	r4!, {r0, r1, r2, r3}
   13138:	stmia	lr!, {r0, r1, r2, r3}
   1313c:	ldm	r4, {r0, r1}
   13140:	moveq	r4, sp
   13144:	stm	lr, {r0, r1}
   13148:	beq	13178 <__assert_fail@plt+0x1cc0>
   1314c:	ldr	r6, [pc, #452]	; 13318 <__assert_fail@plt+0x1e60>
   13150:	mov	r4, sp
   13154:	b	13164 <__assert_fail@plt+0x1cac>
   13158:	ldr	ip, [r4, #8]!
   1315c:	cmp	ip, #0
   13160:	beq	13178 <__assert_fail@plt+0x1cc0>
   13164:	mov	r1, ip
   13168:	mov	r0, r6
   1316c:	bl	11158 <strcmp@plt>
   13170:	cmp	r0, #0
   13174:	bne	13158 <__assert_fail@plt+0x1ca0>
   13178:	ldr	r4, [r4, #4]
   1317c:	mov	r2, #5
   13180:	cmp	r4, #0
   13184:	ldr	r1, [pc, #400]	; 1331c <__assert_fail@plt+0x1e64>
   13188:	beq	13230 <__assert_fail@plt+0x1d78>
   1318c:	mov	r0, #0
   13190:	bl	111e8 <dcgettext@plt>
   13194:	ldr	r3, [pc, #388]	; 13320 <__assert_fail@plt+0x1e68>
   13198:	ldr	r2, [pc, #388]	; 13324 <__assert_fail@plt+0x1e6c>
   1319c:	mov	r1, r0
   131a0:	mov	r0, #1
   131a4:	bl	11380 <__printf_chk@plt>
   131a8:	mov	r1, #0
   131ac:	mov	r0, #5
   131b0:	bl	113e0 <setlocale@plt>
   131b4:	cmp	r0, #0
   131b8:	ldreq	r6, [pc, #344]	; 13318 <__assert_fail@plt+0x1e60>
   131bc:	beq	131d8 <__assert_fail@plt+0x1d20>
   131c0:	mov	r2, #3
   131c4:	ldr	r1, [pc, #348]	; 13328 <__assert_fail@plt+0x1e70>
   131c8:	bl	11488 <strncmp@plt>
   131cc:	ldr	r6, [pc, #324]	; 13318 <__assert_fail@plt+0x1e60>
   131d0:	cmp	r0, #0
   131d4:	bne	132c0 <__assert_fail@plt+0x1e08>
   131d8:	mov	r2, #5
   131dc:	ldr	r1, [pc, #328]	; 1332c <__assert_fail@plt+0x1e74>
   131e0:	mov	r0, #0
   131e4:	bl	111e8 <dcgettext@plt>
   131e8:	ldr	r3, [pc, #296]	; 13318 <__assert_fail@plt+0x1e60>
   131ec:	ldr	r2, [pc, #300]	; 13320 <__assert_fail@plt+0x1e68>
   131f0:	mov	r1, r0
   131f4:	mov	r0, #1
   131f8:	bl	11380 <__printf_chk@plt>
   131fc:	mov	r2, #5
   13200:	ldr	r1, [pc, #296]	; 13330 <__assert_fail@plt+0x1e78>
   13204:	mov	r0, #0
   13208:	bl	111e8 <dcgettext@plt>
   1320c:	ldr	r2, [pc, #288]	; 13334 <__assert_fail@plt+0x1e7c>
   13210:	cmp	r4, r6
   13214:	ldr	r3, [pc, #284]	; 13338 <__assert_fail@plt+0x1e80>
   13218:	movne	r3, r2
   1321c:	mov	r1, r0
   13220:	mov	r2, r4
   13224:	mov	r0, #1
   13228:	bl	11380 <__printf_chk@plt>
   1322c:	b	13008 <__assert_fail@plt+0x1b50>
   13230:	mov	r0, r4
   13234:	bl	111e8 <dcgettext@plt>
   13238:	ldr	r3, [pc, #224]	; 13320 <__assert_fail@plt+0x1e68>
   1323c:	ldr	r2, [pc, #224]	; 13324 <__assert_fail@plt+0x1e6c>
   13240:	mov	r1, r0
   13244:	mov	r0, #1
   13248:	bl	11380 <__printf_chk@plt>
   1324c:	mov	r1, r4
   13250:	mov	r0, #5
   13254:	bl	113e0 <setlocale@plt>
   13258:	cmp	r0, #0
   1325c:	beq	13274 <__assert_fail@plt+0x1dbc>
   13260:	mov	r2, #3
   13264:	ldr	r1, [pc, #188]	; 13328 <__assert_fail@plt+0x1e70>
   13268:	bl	11488 <strncmp@plt>
   1326c:	cmp	r0, #0
   13270:	bne	132b8 <__assert_fail@plt+0x1e00>
   13274:	mov	r2, #5
   13278:	ldr	r1, [pc, #172]	; 1332c <__assert_fail@plt+0x1e74>
   1327c:	mov	r0, #0
   13280:	bl	111e8 <dcgettext@plt>
   13284:	ldr	r3, [pc, #140]	; 13318 <__assert_fail@plt+0x1e60>
   13288:	ldr	r2, [pc, #144]	; 13320 <__assert_fail@plt+0x1e68>
   1328c:	mov	r4, r3
   13290:	mov	r1, r0
   13294:	mov	r0, #1
   13298:	bl	11380 <__printf_chk@plt>
   1329c:	ldr	r1, [pc, #140]	; 13330 <__assert_fail@plt+0x1e78>
   132a0:	mov	r2, #5
   132a4:	mov	r0, #0
   132a8:	bl	111e8 <dcgettext@plt>
   132ac:	ldr	r3, [pc, #132]	; 13338 <__assert_fail@plt+0x1e80>
   132b0:	mov	r1, r0
   132b4:	b	13220 <__assert_fail@plt+0x1d68>
   132b8:	ldr	r6, [pc, #88]	; 13318 <__assert_fail@plt+0x1e60>
   132bc:	mov	r4, r6
   132c0:	mov	r2, #5
   132c4:	ldr	r1, [pc, #112]	; 1333c <__assert_fail@plt+0x1e84>
   132c8:	mov	r0, #0
   132cc:	bl	111e8 <dcgettext@plt>
   132d0:	ldr	r1, [r7]
   132d4:	bl	11134 <fputs_unlocked@plt>
   132d8:	b	131d8 <__assert_fail@plt+0x1d20>
   132dc:			; <UNDEFINED> instruction: 0x0002b1b0
   132e0:	andeq	r9, r1, r8, lsl #19
   132e4:	ldrdeq	fp, [r2], -r0
   132e8:			; <UNDEFINED> instruction: 0x000199b0
   132ec:			; <UNDEFINED> instruction: 0x0002b1b4
   132f0:	ldrdeq	r9, [r1], -r4
   132f4:	ldrdeq	r9, [r1], -r0
   132f8:	andeq	r9, r1, r8, asr sl
   132fc:	andeq	r9, r1, r0, lsl #21
   13300:	andeq	r9, r1, ip, asr #21
   13304:	ldrdeq	r9, [r1], -r4
   13308:	andeq	r9, r1, r4, asr #26
   1330c:	andeq	r9, r1, r4, ror sp
   13310:	andeq	r9, r1, ip, lsr #27
   13314:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13318:	andeq	r9, r1, r0, lsl #19
   1331c:	strheq	sl, [r1], -r0
   13320:	andeq	sl, r1, r8, asr #1
   13324:	strdeq	sl, [r1], -r0
   13328:	andeq	sl, r1, r0, lsl #2
   1332c:	andeq	sl, r1, ip, asr #2
   13330:	andeq	sl, r1, r8, ror #2
   13334:	andeq	r9, r1, ip, lsl #31
   13338:	andeq	sl, r1, ip, lsr r3
   1333c:	andeq	sl, r1, r4, lsl #2
   13340:	mov	r0, #1
   13344:	b	12fc8 <__assert_fail@plt+0x1b10>
   13348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1334c:	mov	r5, r1
   13350:	sub	sp, sp, #12
   13354:	mov	r4, r2
   13358:	str	r2, [sp]
   1335c:	mov	r7, r3
   13360:	mov	sl, r0
   13364:	bl	11314 <strlen@plt>
   13368:	ldr	fp, [r5]
   1336c:	cmp	fp, #0
   13370:	beq	13438 <__assert_fail@plt+0x1f80>
   13374:	mov	r3, #0
   13378:	mov	r8, r0
   1337c:	str	r3, [sp, #4]
   13380:	mov	r6, r3
   13384:	mvn	r9, #0
   13388:	b	133b4 <__assert_fail@plt+0x1efc>
   1338c:	bl	111d0 <memcmp@plt>
   13390:	ldr	r3, [sp, #4]
   13394:	cmp	r0, #0
   13398:	movne	r3, #1
   1339c:	str	r3, [sp, #4]
   133a0:	ldr	fp, [r5, #4]!
   133a4:	add	r6, r6, #1
   133a8:	cmp	fp, #0
   133ac:	add	r4, r4, r7
   133b0:	beq	13410 <__assert_fail@plt+0x1f58>
   133b4:	mov	r2, r8
   133b8:	mov	r1, sl
   133bc:	mov	r0, fp
   133c0:	bl	11488 <strncmp@plt>
   133c4:	cmp	r0, #0
   133c8:	mov	r0, fp
   133cc:	bne	133a0 <__assert_fail@plt+0x1ee8>
   133d0:	bl	11314 <strlen@plt>
   133d4:	ldr	r3, [sp]
   133d8:	mov	r2, r7
   133dc:	mov	r1, r4
   133e0:	cmp	r8, r0
   133e4:	mla	r0, r7, r9, r3
   133e8:	beq	13428 <__assert_fail@plt+0x1f70>
   133ec:	cmn	r9, #1
   133f0:	moveq	r9, r6
   133f4:	beq	133a0 <__assert_fail@plt+0x1ee8>
   133f8:	ldr	r3, [sp]
   133fc:	cmp	r3, #0
   13400:	bne	1338c <__assert_fail@plt+0x1ed4>
   13404:	mov	r3, #1
   13408:	str	r3, [sp, #4]
   1340c:	b	133a0 <__assert_fail@plt+0x1ee8>
   13410:	ldr	r3, [sp, #4]
   13414:	cmp	r3, #0
   13418:	mvnne	r9, #1
   1341c:	mov	r0, r9
   13420:	add	sp, sp, #12
   13424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13428:	mov	r9, r6
   1342c:	mov	r0, r9
   13430:	add	sp, sp, #12
   13434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13438:	mvn	r9, #0
   1343c:	b	1341c <__assert_fail@plt+0x1f64>
   13440:	push	{r4, r5, r6, lr}
   13444:	mov	r6, r0
   13448:	ldr	r0, [r1]
   1344c:	cmp	r0, #0
   13450:	beq	13488 <__assert_fail@plt+0x1fd0>
   13454:	mov	r4, r1
   13458:	mov	r5, #0
   1345c:	b	13470 <__assert_fail@plt+0x1fb8>
   13460:	ldr	r0, [r4, #4]!
   13464:	add	r5, r5, #1
   13468:	cmp	r0, #0
   1346c:	beq	13488 <__assert_fail@plt+0x1fd0>
   13470:	mov	r1, r6
   13474:	bl	11158 <strcmp@plt>
   13478:	cmp	r0, #0
   1347c:	bne	13460 <__assert_fail@plt+0x1fa8>
   13480:	mov	r0, r5
   13484:	pop	{r4, r5, r6, pc}
   13488:	mvn	r0, #0
   1348c:	pop	{r4, r5, r6, pc}
   13490:	cmn	r2, #1
   13494:	push	{r4, r5, r6, lr}
   13498:	mov	r2, #5
   1349c:	sub	sp, sp, #8
   134a0:	mov	r4, r1
   134a4:	mov	r5, r0
   134a8:	ldreq	r1, [pc, #76]	; 134fc <__assert_fail@plt+0x2044>
   134ac:	ldrne	r1, [pc, #76]	; 13500 <__assert_fail@plt+0x2048>
   134b0:	mov	r0, #0
   134b4:	bl	111e8 <dcgettext@plt>
   134b8:	mov	r2, r4
   134bc:	mov	r1, #8
   134c0:	mov	r6, r0
   134c4:	mov	r0, #0
   134c8:	bl	1645c <__assert_fail@plt+0x4fa4>
   134cc:	mov	r1, r5
   134d0:	mov	r4, r0
   134d4:	mov	r0, #1
   134d8:	bl	166f8 <__assert_fail@plt+0x5240>
   134dc:	mov	r1, #0
   134e0:	mov	r3, r4
   134e4:	mov	r2, r6
   134e8:	str	r0, [sp]
   134ec:	mov	r0, r1
   134f0:	bl	1129c <error@plt>
   134f4:	add	sp, sp, #8
   134f8:	pop	{r4, r5, r6, pc}
   134fc:	andeq	sl, r1, r8, lsr #8
   13500:	andeq	sl, r1, r4, asr #8
   13504:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13508:	mov	r6, r0
   1350c:	ldr	r9, [pc, #232]	; 135fc <__assert_fail@plt+0x2144>
   13510:	mov	r4, r1
   13514:	mov	r7, r2
   13518:	ldr	r1, [pc, #224]	; 13600 <__assert_fail@plt+0x2148>
   1351c:	mov	r2, #5
   13520:	mov	r0, #0
   13524:	bl	111e8 <dcgettext@plt>
   13528:	ldr	r1, [r9]
   1352c:	bl	11134 <fputs_unlocked@plt>
   13530:	ldr	fp, [r6]
   13534:	cmp	fp, #0
   13538:	movne	r8, #0
   1353c:	movne	r5, r8
   13540:	movne	sl, #1
   13544:	bne	13584 <__assert_fail@plt+0x20cc>
   13548:	b	135c8 <__assert_fail@plt+0x2110>
   1354c:	mov	r0, fp
   13550:	ldr	r8, [r9]
   13554:	bl	16708 <__assert_fail@plt+0x5250>
   13558:	ldr	r2, [pc, #164]	; 13604 <__assert_fail@plt+0x214c>
   1355c:	mov	r1, sl
   13560:	mov	r3, r0
   13564:	mov	r0, r8
   13568:	bl	113a4 <__fprintf_chk@plt>
   1356c:	mov	r8, r4
   13570:	ldr	fp, [r6, #4]!
   13574:	add	r5, r5, #1
   13578:	cmp	fp, #0
   1357c:	add	r4, r4, r7
   13580:	beq	135c8 <__assert_fail@plt+0x2110>
   13584:	cmp	r5, #0
   13588:	mov	r1, r4
   1358c:	mov	r2, r7
   13590:	mov	r0, r8
   13594:	beq	1354c <__assert_fail@plt+0x2094>
   13598:	bl	111d0 <memcmp@plt>
   1359c:	cmp	r0, #0
   135a0:	bne	1354c <__assert_fail@plt+0x2094>
   135a4:	mov	r0, fp
   135a8:	ldr	fp, [r9]
   135ac:	bl	16708 <__assert_fail@plt+0x5250>
   135b0:	ldr	r2, [pc, #80]	; 13608 <__assert_fail@plt+0x2150>
   135b4:	mov	r1, sl
   135b8:	mov	r3, r0
   135bc:	mov	r0, fp
   135c0:	bl	113a4 <__fprintf_chk@plt>
   135c4:	b	13570 <__assert_fail@plt+0x20b8>
   135c8:	ldr	r0, [r9]
   135cc:	ldr	r3, [r0, #20]
   135d0:	ldr	r2, [r0, #24]
   135d4:	cmp	r3, r2
   135d8:	bcs	135f0 <__assert_fail@plt+0x2138>
   135dc:	add	r1, r3, #1
   135e0:	mov	r2, #10
   135e4:	str	r1, [r0, #20]
   135e8:	strb	r2, [r3]
   135ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f0:	mov	r1, #10
   135f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135f8:	b	113d4 <__overflow@plt>
   135fc:			; <UNDEFINED> instruction: 0x0002b1b0
   13600:	andeq	sl, r1, r4, ror #8
   13604:	andeq	sl, r1, ip, ror r4
   13608:	andeq	sl, r1, r4, lsl #9
   1360c:	push	{r4, r5, r6, r7, r8, lr}
   13610:	mov	r7, r0
   13614:	ldrb	ip, [sp, #32]
   13618:	mov	r5, r1
   1361c:	mov	r4, r2
   13620:	cmp	ip, #0
   13624:	mov	r6, r3
   13628:	beq	13678 <__assert_fail@plt+0x21c0>
   1362c:	ldr	r3, [sp, #24]
   13630:	mov	r2, r6
   13634:	mov	r1, r4
   13638:	mov	r0, r5
   1363c:	bl	13348 <__assert_fail@plt+0x1e90>
   13640:	cmp	r0, #0
   13644:	popge	{r4, r5, r6, r7, r8, pc}
   13648:	mov	r2, r0
   1364c:	mov	r1, r5
   13650:	mov	r0, r7
   13654:	bl	13490 <__assert_fail@plt+0x1fd8>
   13658:	mov	r0, r4
   1365c:	ldr	r2, [sp, #24]
   13660:	mov	r1, r6
   13664:	bl	13504 <__assert_fail@plt+0x204c>
   13668:	ldr	r3, [sp, #28]
   1366c:	blx	r3
   13670:	mvn	r0, #0
   13674:	pop	{r4, r5, r6, r7, r8, pc}
   13678:	mov	r1, r2
   1367c:	mov	r0, r5
   13680:	bl	13440 <__assert_fail@plt+0x1f88>
   13684:	cmp	r0, #0
   13688:	popge	{r4, r5, r6, r7, r8, pc}
   1368c:	b	13648 <__assert_fail@plt+0x2190>
   13690:	push	{r4, r5, r6, r7, r8, lr}
   13694:	ldr	r7, [r1]
   13698:	cmp	r7, #0
   1369c:	beq	136dc <__assert_fail@plt+0x2224>
   136a0:	mov	r6, r3
   136a4:	mov	r8, r0
   136a8:	mov	r4, r2
   136ac:	mov	r5, r1
   136b0:	b	136c0 <__assert_fail@plt+0x2208>
   136b4:	ldr	r7, [r5, #4]!
   136b8:	cmp	r7, #0
   136bc:	beq	136dc <__assert_fail@plt+0x2224>
   136c0:	mov	r1, r4
   136c4:	mov	r2, r6
   136c8:	mov	r0, r8
   136cc:	bl	111d0 <memcmp@plt>
   136d0:	add	r4, r4, r6
   136d4:	cmp	r0, #0
   136d8:	bne	136b4 <__assert_fail@plt+0x21fc>
   136dc:	mov	r0, r7
   136e0:	pop	{r4, r5, r6, r7, r8, pc}
   136e4:	ldrb	r3, [r0]
   136e8:	cmp	r3, #47	; 0x2f
   136ec:	bne	136fc <__assert_fail@plt+0x2244>
   136f0:	ldrb	r3, [r0, #1]!
   136f4:	cmp	r3, #47	; 0x2f
   136f8:	beq	136f0 <__assert_fail@plt+0x2238>
   136fc:	cmp	r3, #0
   13700:	bxeq	lr
   13704:	mov	r2, #0
   13708:	push	{lr}		; (str lr, [sp, #-4]!)
   1370c:	mov	ip, r2
   13710:	mov	r1, r0
   13714:	mov	lr, #1
   13718:	cmp	r3, #47	; 0x2f
   1371c:	moveq	r2, lr
   13720:	beq	13730 <__assert_fail@plt+0x2278>
   13724:	cmp	r2, #0
   13728:	movne	r0, r1
   1372c:	movne	r2, ip
   13730:	ldrb	r3, [r1, #1]!
   13734:	cmp	r3, #0
   13738:	bne	13718 <__assert_fail@plt+0x2260>
   1373c:	pop	{pc}		; (ldr pc, [sp], #4)
   13740:	push	{r4, lr}
   13744:	mov	r4, r0
   13748:	bl	11314 <strlen@plt>
   1374c:	cmp	r0, #1
   13750:	popls	{r4, pc}
   13754:	sub	r3, r0, #1
   13758:	add	r2, r4, r3
   1375c:	ldrb	r1, [r4, r3]
   13760:	cmp	r1, #47	; 0x2f
   13764:	popne	{r4, pc}
   13768:	cmp	r3, #1
   1376c:	beq	13780 <__assert_fail@plt+0x22c8>
   13770:	ldrb	r1, [r2, #-1]!
   13774:	sub	r0, r3, #1
   13778:	cmp	r1, #47	; 0x2f
   1377c:	beq	13788 <__assert_fail@plt+0x22d0>
   13780:	mov	r0, r3
   13784:	pop	{r4, pc}
   13788:	mov	r3, r0
   1378c:	b	13768 <__assert_fail@plt+0x22b0>
   13790:	ldr	r3, [pc, #4]	; 1379c <__assert_fail@plt+0x22e4>
   13794:	str	r0, [r3]
   13798:	bx	lr
   1379c:	andeq	fp, r2, r4, asr #3
   137a0:	ldr	r3, [pc, #4]	; 137ac <__assert_fail@plt+0x22f4>
   137a4:	strb	r0, [r3, #4]
   137a8:	bx	lr
   137ac:	andeq	fp, r2, r4, asr #3
   137b0:	ldr	r3, [pc, #192]	; 13878 <__assert_fail@plt+0x23c0>
   137b4:	push	{r4, r5, r6, lr}
   137b8:	sub	sp, sp, #8
   137bc:	ldr	r0, [r3]
   137c0:	bl	18650 <__assert_fail@plt+0x7198>
   137c4:	cmp	r0, #0
   137c8:	beq	137ec <__assert_fail@plt+0x2334>
   137cc:	ldr	r4, [pc, #168]	; 1387c <__assert_fail@plt+0x23c4>
   137d0:	ldrb	r3, [r4, #4]
   137d4:	cmp	r3, #0
   137d8:	beq	13808 <__assert_fail@plt+0x2350>
   137dc:	bl	11338 <__errno_location@plt>
   137e0:	ldr	r3, [r0]
   137e4:	cmp	r3, #32
   137e8:	bne	13808 <__assert_fail@plt+0x2350>
   137ec:	ldr	r3, [pc, #140]	; 13880 <__assert_fail@plt+0x23c8>
   137f0:	ldr	r0, [r3]
   137f4:	bl	18650 <__assert_fail@plt+0x7198>
   137f8:	cmp	r0, #0
   137fc:	bne	13850 <__assert_fail@plt+0x2398>
   13800:	add	sp, sp, #8
   13804:	pop	{r4, r5, r6, pc}
   13808:	mov	r2, #5
   1380c:	ldr	r1, [pc, #112]	; 13884 <__assert_fail@plt+0x23cc>
   13810:	mov	r0, #0
   13814:	bl	111e8 <dcgettext@plt>
   13818:	ldr	r4, [r4]
   1381c:	cmp	r4, #0
   13820:	mov	r5, r0
   13824:	beq	1385c <__assert_fail@plt+0x23a4>
   13828:	bl	11338 <__errno_location@plt>
   1382c:	ldr	r6, [r0]
   13830:	mov	r0, r4
   13834:	bl	16570 <__assert_fail@plt+0x50b8>
   13838:	mov	r1, r6
   1383c:	str	r5, [sp]
   13840:	ldr	r2, [pc, #64]	; 13888 <__assert_fail@plt+0x23d0>
   13844:	mov	r3, r0
   13848:	mov	r0, #0
   1384c:	bl	1129c <error@plt>
   13850:	ldr	r3, [pc, #52]	; 1388c <__assert_fail@plt+0x23d4>
   13854:	ldr	r0, [r3]
   13858:	bl	11188 <_exit@plt>
   1385c:	bl	11338 <__errno_location@plt>
   13860:	mov	r3, r5
   13864:	ldr	r2, [pc, #36]	; 13890 <__assert_fail@plt+0x23d8>
   13868:	ldr	r1, [r0]
   1386c:	mov	r0, r4
   13870:	bl	1129c <error@plt>
   13874:	b	13850 <__assert_fail@plt+0x2398>
   13878:			; <UNDEFINED> instruction: 0x0002b1b4
   1387c:	andeq	fp, r2, r4, asr #3
   13880:			; <UNDEFINED> instruction: 0x0002b1b0
   13884:	andeq	sl, r1, ip, lsl #9
   13888:	muleq	r1, r8, r4
   1388c:	andeq	fp, r2, r8, asr r1
   13890:	muleq	r1, ip, r4
   13894:	push	{r4, lr}
   13898:	bl	13920 <__assert_fail@plt+0x2468>
   1389c:	cmp	r0, #0
   138a0:	popne	{r4, pc}
   138a4:	bl	17db4 <__assert_fail@plt+0x68fc>
   138a8:	push	{r4, r5, r6, lr}
   138ac:	mov	r5, r0
   138b0:	ldrb	r4, [r0]
   138b4:	bl	136e4 <__assert_fail@plt+0x222c>
   138b8:	sub	r4, r4, #47	; 0x2f
   138bc:	clz	r4, r4
   138c0:	lsr	r4, r4, #5
   138c4:	sub	r0, r0, r5
   138c8:	cmp	r0, r4
   138cc:	bls	13918 <__assert_fail@plt+0x2460>
   138d0:	sub	r3, r0, #1
   138d4:	add	r2, r5, r3
   138d8:	ldrb	r1, [r5, r3]
   138dc:	cmp	r1, #47	; 0x2f
   138e0:	beq	138fc <__assert_fail@plt+0x2444>
   138e4:	b	13918 <__assert_fail@plt+0x2460>
   138e8:	ldrb	r1, [r2, #-1]!
   138ec:	sub	r0, r3, #1
   138f0:	cmp	r1, #47	; 0x2f
   138f4:	bne	1390c <__assert_fail@plt+0x2454>
   138f8:	mov	r3, r0
   138fc:	cmp	r4, r3
   13900:	bne	138e8 <__assert_fail@plt+0x2430>
   13904:	mov	r0, r4
   13908:	pop	{r4, r5, r6, pc}
   1390c:	mov	r4, r3
   13910:	mov	r0, r4
   13914:	pop	{r4, r5, r6, pc}
   13918:	mov	r4, r0
   1391c:	b	13904 <__assert_fail@plt+0x244c>
   13920:	push	{r4, r5, r6, lr}
   13924:	mov	r6, r0
   13928:	bl	138a8 <__assert_fail@plt+0x23f0>
   1392c:	add	r3, r0, #1
   13930:	mov	r4, r0
   13934:	cmp	r0, #0
   13938:	movne	r0, r3
   1393c:	addeq	r0, r3, #1
   13940:	bl	185c8 <__assert_fail@plt+0x7110>
   13944:	subs	r5, r0, #0
   13948:	beq	13970 <__assert_fail@plt+0x24b8>
   1394c:	mov	r2, r4
   13950:	mov	r1, r6
   13954:	bl	11194 <memcpy@plt>
   13958:	cmp	r4, #0
   1395c:	moveq	r3, #46	; 0x2e
   13960:	moveq	r4, #1
   13964:	strbeq	r3, [r5]
   13968:	mov	r3, #0
   1396c:	strb	r3, [r5, r4]
   13970:	mov	r0, r5
   13974:	pop	{r4, r5, r6, pc}
   13978:	push	{r1, r2, r3}
   1397c:	push	{r4, r5, r6, r7, lr}
   13980:	sub	sp, sp, #8
   13984:	add	r3, sp, #32
   13988:	ldr	r1, [sp, #28]
   1398c:	str	r3, [sp, #4]
   13990:	cmp	r1, #0
   13994:	beq	13a2c <__assert_fail@plt+0x2574>
   13998:	ldr	r2, [pc, #412]	; 13b3c <__assert_fail@plt+0x2684>
   1399c:	mov	r5, r0
   139a0:	cmp	r1, r2
   139a4:	bne	139f0 <__assert_fail@plt+0x2538>
   139a8:	ldr	r6, [pc, #400]	; 13b40 <__assert_fail@plt+0x2688>
   139ac:	ldr	r7, [r3]
   139b0:	add	r2, sp, #36	; 0x24
   139b4:	ldr	r3, [r6]
   139b8:	str	r2, [sp, #4]
   139bc:	cmp	r3, #0
   139c0:	mov	r2, r7
   139c4:	blt	13af0 <__assert_fail@plt+0x2638>
   139c8:	bl	113c8 <fcntl64@plt>
   139cc:	subs	r4, r0, #0
   139d0:	blt	13a74 <__assert_fail@plt+0x25bc>
   139d4:	mov	r3, #1
   139d8:	str	r3, [r6]
   139dc:	mov	r0, r4
   139e0:	add	sp, sp, #8
   139e4:	pop	{r4, r5, r6, r7, lr}
   139e8:	add	sp, sp, #12
   139ec:	bx	lr
   139f0:	cmp	r1, #11
   139f4:	beq	13a1c <__assert_fail@plt+0x2564>
   139f8:	bgt	13a3c <__assert_fail@plt+0x2584>
   139fc:	cmp	r1, #3
   13a00:	beq	13a1c <__assert_fail@plt+0x2564>
   13a04:	ble	13b30 <__assert_fail@plt+0x2678>
   13a08:	cmp	r1, #8
   13a0c:	beq	13a5c <__assert_fail@plt+0x25a4>
   13a10:	ble	13a5c <__assert_fail@plt+0x25a4>
   13a14:	cmp	r1, #9
   13a18:	bne	13a5c <__assert_fail@plt+0x25a4>
   13a1c:	mov	r0, r5
   13a20:	bl	113c8 <fcntl64@plt>
   13a24:	mov	r4, r0
   13a28:	b	139dc <__assert_fail@plt+0x2524>
   13a2c:	ldr	r2, [sp, #32]
   13a30:	bl	113c8 <fcntl64@plt>
   13a34:	mov	r4, r0
   13a38:	b	139dc <__assert_fail@plt+0x2524>
   13a3c:	ldr	r3, [pc, #256]	; 13b44 <__assert_fail@plt+0x268c>
   13a40:	cmp	r1, r3
   13a44:	bgt	13b10 <__assert_fail@plt+0x2658>
   13a48:	cmp	r1, r2
   13a4c:	bge	13a5c <__assert_fail@plt+0x25a4>
   13a50:	sub	r3, r3, #6
   13a54:	cmp	r1, r3
   13a58:	beq	13a1c <__assert_fail@plt+0x2564>
   13a5c:	ldr	r3, [sp, #4]
   13a60:	mov	r0, r5
   13a64:	ldr	r2, [r3]
   13a68:	bl	113c8 <fcntl64@plt>
   13a6c:	mov	r4, r0
   13a70:	b	139dc <__assert_fail@plt+0x2524>
   13a74:	bl	11338 <__errno_location@plt>
   13a78:	ldr	r3, [r0]
   13a7c:	cmp	r3, #22
   13a80:	bne	139d4 <__assert_fail@plt+0x251c>
   13a84:	mov	r2, r7
   13a88:	mov	r0, r5
   13a8c:	mov	r1, #0
   13a90:	bl	113c8 <fcntl64@plt>
   13a94:	subs	r4, r0, #0
   13a98:	blt	139dc <__assert_fail@plt+0x2524>
   13a9c:	mvn	r3, #0
   13aa0:	str	r3, [r6]
   13aa4:	mov	r1, #1
   13aa8:	mov	r0, r4
   13aac:	bl	113c8 <fcntl64@plt>
   13ab0:	subs	r2, r0, #0
   13ab4:	blt	13ad0 <__assert_fail@plt+0x2618>
   13ab8:	orr	r2, r2, #1
   13abc:	mov	r1, #2
   13ac0:	mov	r0, r4
   13ac4:	bl	113c8 <fcntl64@plt>
   13ac8:	cmn	r0, #1
   13acc:	bne	139dc <__assert_fail@plt+0x2524>
   13ad0:	bl	11338 <__errno_location@plt>
   13ad4:	mov	r5, r0
   13ad8:	mov	r0, r4
   13adc:	ldr	r6, [r5]
   13ae0:	mvn	r4, #0
   13ae4:	bl	114ac <close@plt>
   13ae8:	str	r6, [r5]
   13aec:	b	139dc <__assert_fail@plt+0x2524>
   13af0:	mov	r1, #0
   13af4:	bl	113c8 <fcntl64@plt>
   13af8:	subs	r4, r0, #0
   13afc:	blt	139dc <__assert_fail@plt+0x2524>
   13b00:	ldr	r3, [r6]
   13b04:	cmn	r3, #1
   13b08:	beq	13aa4 <__assert_fail@plt+0x25ec>
   13b0c:	b	139dc <__assert_fail@plt+0x2524>
   13b10:	ldr	r3, [pc, #48]	; 13b48 <__assert_fail@plt+0x2690>
   13b14:	cmp	r1, r3
   13b18:	beq	13a5c <__assert_fail@plt+0x25a4>
   13b1c:	blt	13a1c <__assert_fail@plt+0x2564>
   13b20:	add	r3, r3, #1
   13b24:	cmp	r1, r3
   13b28:	bne	13a5c <__assert_fail@plt+0x25a4>
   13b2c:	b	13a1c <__assert_fail@plt+0x2564>
   13b30:	cmp	r1, #1
   13b34:	bne	13a5c <__assert_fail@plt+0x25a4>
   13b38:	b	13a1c <__assert_fail@plt+0x2564>
   13b3c:	andeq	r0, r0, r6, lsl #8
   13b40:	andeq	fp, r2, ip, asr #3
   13b44:	andeq	r0, r0, r7, lsl #8
   13b48:	andeq	r0, r0, r9, lsl #8
   13b4c:	push	{r1, r2, r3}
   13b50:	push	{lr}		; (str lr, [sp, #-4]!)
   13b54:	sub	sp, sp, #8
   13b58:	ldr	r1, [sp, #12]
   13b5c:	ands	r2, r1, #64	; 0x40
   13b60:	addne	r3, sp, #16
   13b64:	ldrne	r2, [sp, #16]
   13b68:	strne	r3, [sp, #4]
   13b6c:	bl	112a8 <open64@plt>
   13b70:	bl	172fc <__assert_fail@plt+0x5e44>
   13b74:	add	sp, sp, #8
   13b78:	pop	{lr}		; (ldr lr, [sp], #4)
   13b7c:	add	sp, sp, #12
   13b80:	bx	lr
   13b84:	push	{r4, r5, lr}
   13b88:	sub	sp, sp, #12
   13b8c:	mov	r5, r0
   13b90:	bl	11338 <__errno_location@plt>
   13b94:	mov	r2, #0
   13b98:	mov	r4, r0
   13b9c:	ldr	r3, [r0]
   13ba0:	str	r2, [r4]
   13ba4:	mov	r0, r5
   13ba8:	str	r3, [sp]
   13bac:	str	r3, [sp, #4]
   13bb0:	bl	1117c <free@plt>
   13bb4:	ldr	r3, [r4]
   13bb8:	add	r2, sp, #8
   13bbc:	cmp	r3, #0
   13bc0:	moveq	r3, #4
   13bc4:	movne	r3, #0
   13bc8:	add	r3, r2, r3
   13bcc:	ldr	r3, [r3, #-8]
   13bd0:	str	r3, [r4]
   13bd4:	add	sp, sp, #12
   13bd8:	pop	{r4, r5, pc}
   13bdc:	andeq	r0, r0, r0
   13be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be4:	vpush	{d8-d9}
   13be8:	mov	r8, r3
   13bec:	ands	r3, r3, #32
   13bf0:	mov	r4, r2
   13bf4:	sub	sp, sp, #124	; 0x7c
   13bf8:	mov	r7, r1
   13bfc:	str	r3, [sp, #20]
   13c00:	moveq	r3, #1000	; 0x3e8
   13c04:	movne	r3, #1024	; 0x400
   13c08:	str	r2, [sp, #12]
   13c0c:	str	r3, [sp, #24]
   13c10:	mov	r6, r0
   13c14:	bl	11410 <localeconv@plt>
   13c18:	add	r3, r4, #644	; 0x284
   13c1c:	str	r3, [sp, #36]	; 0x24
   13c20:	add	r3, r3, #3
   13c24:	str	r3, [sp, #8]
   13c28:	ldr	r9, [r0]
   13c2c:	mov	r5, r0
   13c30:	mov	r0, r9
   13c34:	bl	11314 <strlen@plt>
   13c38:	ldr	fp, [r5, #4]
   13c3c:	ldr	r3, [pc, #1036]	; 14050 <__assert_fail@plt+0x2b98>
   13c40:	sub	r2, r0, #1
   13c44:	cmp	r2, #16
   13c48:	movcc	r3, r9
   13c4c:	mov	r4, r0
   13c50:	mov	r0, fp
   13c54:	movcs	r4, #1
   13c58:	str	r3, [sp, #32]
   13c5c:	bl	11314 <strlen@plt>
   13c60:	ldr	r3, [pc, #1004]	; 14054 <__assert_fail@plt+0x2b9c>
   13c64:	and	r2, r8, #3
   13c68:	str	r2, [sp, #16]
   13c6c:	ldr	r9, [r5, #8]
   13c70:	cmp	r0, #16
   13c74:	movhi	fp, r3
   13c78:	ldrd	r0, [sp, #176]	; 0xb0
   13c7c:	ldrd	r2, [sp, #184]	; 0xb8
   13c80:	str	fp, [sp, #28]
   13c84:	cmp	r3, r1
   13c88:	cmpeq	r2, r0
   13c8c:	bhi	13e78 <__assert_fail@plt+0x29c0>
   13c90:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13c94:	orrs	r3, r2, r3
   13c98:	bne	13cd8 <__assert_fail@plt+0x2820>
   13c9c:	ldrd	r2, [sp, #184]	; 0xb8
   13ca0:	ldrd	r0, [sp, #176]	; 0xb0
   13ca4:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13ca8:	mov	r2, r0
   13cac:	mul	r0, r0, r7
   13cb0:	umull	sl, fp, r2, r6
   13cb4:	mla	r0, r6, r1, r0
   13cb8:	mov	r3, r1
   13cbc:	add	fp, r0, fp
   13cc0:	mov	r1, fp
   13cc4:	mov	r0, sl
   13cc8:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13ccc:	cmp	r7, r1
   13cd0:	cmpeq	r6, r0
   13cd4:	beq	142e4 <__assert_fail@plt+0x2e2c>
   13cd8:	ldrd	r0, [sp, #176]	; 0xb0
   13cdc:	bl	19268 <__assert_fail@plt+0x7db0>
   13ce0:	vmov	d9, r0, r1
   13ce4:	ldrd	r0, [sp, #184]	; 0xb8
   13ce8:	bl	19268 <__assert_fail@plt+0x7db0>
   13cec:	vmov	d7, r0, r1
   13cf0:	mov	r0, r6
   13cf4:	mov	r1, r7
   13cf8:	vdiv.f64	d8, d9, d7
   13cfc:	bl	19268 <__assert_fail@plt+0x7db0>
   13d00:	ands	r6, r8, #16
   13d04:	vmov	d7, r0, r1
   13d08:	vmul.f64	d8, d8, d7
   13d0c:	beq	14060 <__assert_fail@plt+0x2ba8>
   13d10:	vldr	s15, [sp, #24]
   13d14:	mov	r5, #0
   13d18:	vcvt.f64.s32	d6, s15
   13d1c:	vmov.f64	d7, d6
   13d20:	vmov.f64	d5, d7
   13d24:	vmul.f64	d7, d7, d6
   13d28:	add	r5, r5, #1
   13d2c:	vcmpe.f64	d8, d7
   13d30:	vmrs	APSR_nzcv, fpscr
   13d34:	blt	13d40 <__assert_fail@plt+0x2888>
   13d38:	cmp	r5, #8
   13d3c:	bne	13d20 <__assert_fail@plt+0x2868>
   13d40:	ldr	sl, [sp, #16]
   13d44:	vdiv.f64	d9, d8, d5
   13d48:	cmp	sl, #1
   13d4c:	beq	1418c <__assert_fail@plt+0x2cd4>
   13d50:	vldr	d7, [pc, #744]	; 14040 <__assert_fail@plt+0x2b88>
   13d54:	vmov	r0, r1, d9
   13d58:	vcmpe.f64	d9, d7
   13d5c:	vmrs	APSR_nzcv, fpscr
   13d60:	bpl	13da8 <__assert_fail@plt+0x28f0>
   13d64:	bl	19400 <__assert_fail@plt+0x7f48>
   13d68:	cmp	sl, #0
   13d6c:	mov	r6, r0
   13d70:	mov	r7, r1
   13d74:	movne	r0, #0
   13d78:	bne	13d94 <__assert_fail@plt+0x28dc>
   13d7c:	bl	19268 <__assert_fail@plt+0x7db0>
   13d80:	vmov	d7, r0, r1
   13d84:	vcmp.f64	d7, d9
   13d88:	vmrs	APSR_nzcv, fpscr
   13d8c:	movne	r0, #1
   13d90:	moveq	r0, #0
   13d94:	adds	r2, r6, r0
   13d98:	adc	r3, r7, #0
   13d9c:	mov	r0, r2
   13da0:	mov	r1, r3
   13da4:	bl	19268 <__assert_fail@plt+0x7db0>
   13da8:	ldr	r6, [sp, #12]
   13dac:	strd	r0, [sp]
   13db0:	ldr	r3, [pc, #672]	; 14058 <__assert_fail@plt+0x2ba0>
   13db4:	mvn	r2, #0
   13db8:	mov	r1, #1
   13dbc:	mov	r0, r6
   13dc0:	bl	11344 <__sprintf_chk@plt>
   13dc4:	mov	r0, r6
   13dc8:	bl	11314 <strlen@plt>
   13dcc:	ldr	r3, [sp, #20]
   13dd0:	add	r6, r4, #1
   13dd4:	cmp	r3, #0
   13dd8:	movne	r3, #1
   13ddc:	moveq	r3, #2
   13de0:	add	r3, r3, r6
   13de4:	cmp	r0, r3
   13de8:	mov	r7, r0
   13dec:	bls	141d4 <__assert_fail@plt+0x2d1c>
   13df0:	vldr	d7, [pc, #592]	; 14048 <__assert_fail@plt+0x2b90>
   13df4:	vmul.f64	d9, d9, d7
   13df8:	vldr	d7, [pc, #576]	; 14040 <__assert_fail@plt+0x2b88>
   13dfc:	vcmpe.f64	d9, d7
   13e00:	vmrs	APSR_nzcv, fpscr
   13e04:	bpl	13e40 <__assert_fail@plt+0x2988>
   13e08:	vmov	r0, r1, d9
   13e0c:	bl	19400 <__assert_fail@plt+0x7f48>
   13e10:	ldr	r3, [sp, #16]
   13e14:	cmp	r3, #0
   13e18:	mov	r6, r0
   13e1c:	mov	r7, r1
   13e20:	movne	r0, #0
   13e24:	beq	14498 <__assert_fail@plt+0x2fe0>
   13e28:	adds	r2, r6, r0
   13e2c:	adc	r3, r7, #0
   13e30:	mov	r0, r2
   13e34:	mov	r1, r3
   13e38:	bl	19268 <__assert_fail@plt+0x7db0>
   13e3c:	vmov	d9, r0, r1
   13e40:	vldr	d6, [pc, #512]	; 14048 <__assert_fail@plt+0x2b90>
   13e44:	ldr	r4, [sp, #12]
   13e48:	ldr	r3, [pc, #524]	; 1405c <__assert_fail@plt+0x2ba4>
   13e4c:	mvn	r2, #0
   13e50:	vdiv.f64	d7, d9, d6
   13e54:	mov	r1, #1
   13e58:	mov	r0, r4
   13e5c:	mov	r6, #0
   13e60:	vstr	d7, [sp]
   13e64:	bl	11344 <__sprintf_chk@plt>
   13e68:	mov	r0, r4
   13e6c:	bl	11314 <strlen@plt>
   13e70:	mov	r7, r0
   13e74:	b	140ac <__assert_fail@plt+0x2bf4>
   13e78:	ldrd	r2, [sp, #176]	; 0xb0
   13e7c:	orrs	r3, r2, r3
   13e80:	beq	13cd8 <__assert_fail@plt+0x2820>
   13e84:	ldrd	r2, [sp, #176]	; 0xb0
   13e88:	ldrd	r0, [sp, #184]	; 0xb8
   13e8c:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13e90:	orrs	r3, r2, r3
   13e94:	bne	13cd8 <__assert_fail@plt+0x2820>
   13e98:	ldrd	r2, [sp, #176]	; 0xb0
   13e9c:	ldrd	r0, [sp, #184]	; 0xb8
   13ea0:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13ea4:	mov	sl, r0
   13ea8:	mov	fp, r1
   13eac:	mov	r2, r0
   13eb0:	mov	r3, r1
   13eb4:	mov	r0, r6
   13eb8:	mov	r1, r7
   13ebc:	strd	sl, [sp, #48]	; 0x30
   13ec0:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13ec4:	mov	r1, #10
   13ec8:	umull	sl, fp, r2, r1
   13ecc:	mla	r3, r1, r3, fp
   13ed0:	strd	sl, [sp, #40]	; 0x28
   13ed4:	ldrd	sl, [sp, #48]	; 0x30
   13ed8:	str	r3, [sp, #44]	; 0x2c
   13edc:	ldrd	r0, [sp, #40]	; 0x28
   13ee0:	mov	r2, sl
   13ee4:	mov	r3, fp
   13ee8:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13eec:	mov	r0, r6
   13ef0:	mov	r1, r7
   13ef4:	lsls	r6, r2, #1
   13ef8:	adc	r7, r3, r3
   13efc:	mov	r2, sl
   13f00:	mov	r3, fp
   13f04:	strd	r6, [sp, #56]	; 0x38
   13f08:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13f0c:	mov	r7, fp
   13f10:	mov	r6, sl
   13f14:	mov	r3, r7
   13f18:	mov	r2, r6
   13f1c:	strd	r6, [sp, #48]	; 0x30
   13f20:	mov	sl, r0
   13f24:	mov	fp, r1
   13f28:	ldrd	r0, [sp, #40]	; 0x28
   13f2c:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13f30:	ldrd	r2, [sp, #48]	; 0x30
   13f34:	mov	r7, r0
   13f38:	ldrd	r0, [sp, #56]	; 0x38
   13f3c:	cmp	r3, r1
   13f40:	cmpeq	r2, r0
   13f44:	bls	14474 <__assert_fail@plt+0x2fbc>
   13f48:	mov	r3, r0
   13f4c:	orrs	r3, r3, r1
   13f50:	movne	r3, #1
   13f54:	moveq	r3, #0
   13f58:	str	r3, [sp, #48]	; 0x30
   13f5c:	ands	r3, r8, #16
   13f60:	str	r3, [sp, #56]	; 0x38
   13f64:	beq	14340 <__assert_fail@plt+0x2e88>
   13f68:	ldr	r1, [sp, #24]
   13f6c:	mov	r3, #0
   13f70:	mov	r2, r1
   13f74:	cmp	fp, r3
   13f78:	cmpeq	sl, r1
   13f7c:	strd	r2, [sp, #40]	; 0x28
   13f80:	bcc	14488 <__assert_fail@plt+0x2fd0>
   13f84:	mov	r5, #0
   13f88:	mov	r6, r7
   13f8c:	str	r9, [sp, #64]	; 0x40
   13f90:	str	r8, [sp, #68]	; 0x44
   13f94:	mov	r7, r1
   13f98:	mov	r8, r5
   13f9c:	mov	r9, r4
   13fa0:	ldr	r5, [sp, #48]	; 0x30
   13fa4:	b	13fd0 <__assert_fail@plt+0x2b18>
   13fa8:	cmn	r5, r4
   13fac:	movne	r5, #1
   13fb0:	moveq	r5, #0
   13fb4:	ldrd	r2, [sp, #40]	; 0x28
   13fb8:	add	r8, r8, #1
   13fbc:	cmp	r3, fp
   13fc0:	cmpeq	r2, sl
   13fc4:	bhi	144e4 <__assert_fail@plt+0x302c>
   13fc8:	cmp	r8, #8
   13fcc:	beq	144c0 <__assert_fail@plt+0x3008>
   13fd0:	mov	r0, sl
   13fd4:	mov	r1, fp
   13fd8:	ldrd	r2, [sp, #40]	; 0x28
   13fdc:	bl	193b0 <__assert_fail@plt+0x7ef8>
   13fe0:	mov	r1, r7
   13fe4:	asr	r4, r5, #1
   13fe8:	add	r2, r2, r2, lsl #2
   13fec:	add	r6, r6, r2, lsl #1
   13ff0:	mov	r0, r6
   13ff4:	bl	18cc4 <__assert_fail@plt+0x780c>
   13ff8:	ldrd	r2, [sp, #40]	; 0x28
   13ffc:	mov	r0, sl
   14000:	add	r4, r4, r1, lsl #1
   14004:	mov	r1, fp
   14008:	bl	193b0 <__assert_fail@plt+0x7ef8>
   1400c:	mov	sl, r0
   14010:	mov	fp, r1
   14014:	mov	r0, r6
   14018:	mov	r1, r7
   1401c:	bl	18ad8 <__assert_fail@plt+0x7620>
   14020:	cmp	r7, r4
   14024:	add	r3, r5, r4
   14028:	mov	r6, r0
   1402c:	bhi	13fa8 <__assert_fail@plt+0x2af0>
   14030:	cmp	r7, r3
   14034:	movcs	r5, #2
   14038:	movcc	r5, #3
   1403c:	b	13fb4 <__assert_fail@plt+0x2afc>
   14040:	andeq	r0, r0, r0
   14044:	mvnsmi	r0, #0
   14048:	andeq	r0, r0, r0
   1404c:	eormi	r0, r4, r0
   14050:	andeq	sl, r1, r0, asr #9
   14054:	andeq	r9, r1, ip, lsl #31
   14058:	andeq	sl, r1, ip, asr #9
   1405c:	andeq	sl, r1, r4, asr #9
   14060:	and	r7, r8, #3
   14064:	cmp	r7, #1
   14068:	beq	1407c <__assert_fail@plt+0x2bc4>
   1406c:	vldr	d7, [pc, #996]	; 14458 <__assert_fail@plt+0x2fa0>
   14070:	vcmpe.f64	d8, d7
   14074:	vmrs	APSR_nzcv, fpscr
   14078:	bmi	142a0 <__assert_fail@plt+0x2de8>
   1407c:	ldr	r4, [sp, #12]
   14080:	ldr	r3, [pc, #992]	; 14468 <__assert_fail@plt+0x2fb0>
   14084:	mvn	r2, #0
   14088:	mov	r1, #1
   1408c:	vstr	d8, [sp]
   14090:	mov	r0, r4
   14094:	bl	11344 <__sprintf_chk@plt>
   14098:	mov	r0, r4
   1409c:	bl	11314 <strlen@plt>
   140a0:	mov	r6, #0
   140a4:	mvn	r5, #0
   140a8:	mov	r7, r0
   140ac:	ldr	r3, [sp, #8]
   140b0:	mov	r2, r7
   140b4:	sub	r4, r3, r7
   140b8:	mov	r0, r4
   140bc:	ldr	r1, [sp, #12]
   140c0:	bl	11170 <memmove@plt>
   140c4:	sub	r7, r7, r6
   140c8:	add	r7, r4, r7
   140cc:	tst	r8, #4
   140d0:	bne	14208 <__assert_fail@plt+0x2d50>
   140d4:	tst	r8, #128	; 0x80
   140d8:	beq	14170 <__assert_fail@plt+0x2cb8>
   140dc:	cmn	r5, #1
   140e0:	beq	142f4 <__assert_fail@plt+0x2e3c>
   140e4:	and	r3, r8, #256	; 0x100
   140e8:	orrs	r2, r5, r3
   140ec:	beq	14170 <__assert_fail@plt+0x2cb8>
   140f0:	tst	r8, #64	; 0x40
   140f4:	ldrne	r1, [sp, #12]
   140f8:	addne	r2, r1, #648	; 0x288
   140fc:	strne	r2, [sp, #8]
   14100:	movne	r2, #32
   14104:	strbne	r2, [r1, #647]	; 0x287
   14108:	cmp	r5, #0
   1410c:	beq	14624 <__assert_fail@plt+0x316c>
   14110:	ldr	r2, [sp, #20]
   14114:	ldr	r0, [sp, #8]
   14118:	cmp	r2, #0
   1411c:	cmpeq	r5, #1
   14120:	ldr	r2, [sp, #8]
   14124:	ldrne	r1, [pc, #832]	; 1446c <__assert_fail@plt+0x2fb4>
   14128:	moveq	r1, #107	; 0x6b
   1412c:	add	r2, r2, #1
   14130:	ldrbne	r1, [r1, r5]
   14134:	cmp	r3, #0
   14138:	streq	r2, [sp, #8]
   1413c:	strb	r1, [r0]
   14140:	beq	14170 <__assert_fail@plt+0x2cb8>
   14144:	ldr	r3, [sp, #20]
   14148:	cmp	r5, #0
   1414c:	cmpne	r3, #0
   14150:	movne	r2, r0
   14154:	movne	r3, #105	; 0x69
   14158:	strbne	r3, [r2, #1]
   1415c:	addne	r2, r2, #2
   14160:	mov	r3, #66	; 0x42
   14164:	strb	r3, [r2]
   14168:	add	r3, r2, #1
   1416c:	str	r3, [sp, #8]
   14170:	ldr	r2, [sp, #8]
   14174:	mov	r3, #0
   14178:	mov	r0, r4
   1417c:	strb	r3, [r2]
   14180:	add	sp, sp, #124	; 0x7c
   14184:	vpop	{d8-d9}
   14188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1418c:	ldr	r6, [sp, #12]
   14190:	ldr	r3, [pc, #728]	; 14470 <__assert_fail@plt+0x2fb8>
   14194:	mvn	r2, #0
   14198:	ldr	r1, [sp, #16]
   1419c:	mov	r0, r6
   141a0:	vstr	d9, [sp]
   141a4:	bl	11344 <__sprintf_chk@plt>
   141a8:	mov	r0, r6
   141ac:	bl	11314 <strlen@plt>
   141b0:	ldr	r3, [sp, #20]
   141b4:	add	r6, r4, #1
   141b8:	cmp	r3, #0
   141bc:	movne	r3, #1
   141c0:	moveq	r3, #2
   141c4:	add	r3, r3, r6
   141c8:	cmp	r3, r0
   141cc:	mov	r7, r0
   141d0:	bcc	144b4 <__assert_fail@plt+0x2ffc>
   141d4:	tst	r8, #8
   141d8:	beq	140ac <__assert_fail@plt+0x2bf4>
   141dc:	ldr	r3, [sp, #12]
   141e0:	add	r3, r3, r7
   141e4:	ldrb	r3, [r3, #-1]
   141e8:	cmp	r3, #48	; 0x30
   141ec:	bne	140ac <__assert_fail@plt+0x2bf4>
   141f0:	vldr	d7, [pc, #616]	; 14460 <__assert_fail@plt+0x2fa8>
   141f4:	ldr	r3, [sp, #16]
   141f8:	cmp	r3, #1
   141fc:	vmul.f64	d9, d9, d7
   14200:	beq	13e40 <__assert_fail@plt+0x2988>
   14204:	b	13df8 <__assert_fail@plt+0x2940>
   14208:	ldr	r0, [sp, #28]
   1420c:	bl	11314 <strlen@plt>
   14210:	sub	r6, r7, r4
   14214:	mov	r1, r4
   14218:	mov	r2, r6
   1421c:	mov	r3, #41	; 0x29
   14220:	mvn	sl, #0
   14224:	mov	fp, r0
   14228:	add	r0, sp, #76	; 0x4c
   1422c:	bl	1123c <__memcpy_chk@plt>
   14230:	ldr	r4, [sp, #28]
   14234:	b	1423c <__assert_fail@plt+0x2d84>
   14238:	bl	11194 <memcpy@plt>
   1423c:	ldrb	r3, [r9]
   14240:	cmp	r3, #0
   14244:	beq	14258 <__assert_fail@plt+0x2da0>
   14248:	cmp	r3, #255	; 0xff
   1424c:	movne	sl, r3
   14250:	moveq	sl, r6
   14254:	add	r9, r9, #1
   14258:	cmp	sl, r6
   1425c:	movcs	sl, r6
   14260:	sub	r3, r7, sl
   14264:	sub	r6, r6, sl
   14268:	add	r2, sp, #76	; 0x4c
   1426c:	add	r1, r2, r6
   14270:	mov	r0, r3
   14274:	mov	r2, sl
   14278:	sub	r7, r3, fp
   1427c:	bl	11194 <memcpy@plt>
   14280:	cmp	r6, #0
   14284:	mov	r2, fp
   14288:	mov	r1, r4
   1428c:	mov	r3, r0
   14290:	mov	r0, r7
   14294:	bne	14238 <__assert_fail@plt+0x2d80>
   14298:	mov	r4, r3
   1429c:	b	140d4 <__assert_fail@plt+0x2c1c>
   142a0:	vmov	r0, r1, d8
   142a4:	bl	19400 <__assert_fail@plt+0x7f48>
   142a8:	cmp	r7, #0
   142ac:	mov	r4, r0
   142b0:	mov	r5, r1
   142b4:	bne	142d0 <__assert_fail@plt+0x2e18>
   142b8:	bl	19268 <__assert_fail@plt+0x7db0>
   142bc:	vmov	d7, r0, r1
   142c0:	vcmp.f64	d7, d8
   142c4:	vmrs	APSR_nzcv, fpscr
   142c8:	movne	r6, #1
   142cc:	moveq	r6, #0
   142d0:	adds	r0, r4, r6
   142d4:	adc	r1, r5, #0
   142d8:	bl	19268 <__assert_fail@plt+0x7db0>
   142dc:	vmov	d8, r0, r1
   142e0:	b	1407c <__assert_fail@plt+0x2bc4>
   142e4:	mov	r3, #0
   142e8:	str	r3, [sp, #48]	; 0x30
   142ec:	mov	r7, r3
   142f0:	b	13f5c <__assert_fail@plt+0x2aa4>
   142f4:	ldrd	r2, [sp, #184]	; 0xb8
   142f8:	cmp	r3, #0
   142fc:	cmpeq	r2, #1
   14300:	bls	14598 <__assert_fail@plt+0x30e0>
   14304:	ldr	r1, [sp, #24]
   14308:	ldrd	r6, [sp, #184]	; 0xb8
   1430c:	mov	r5, #1
   14310:	mov	r2, #1
   14314:	mov	r3, #0
   14318:	mul	r0, r1, r3
   1431c:	umull	r2, r3, r2, r1
   14320:	add	r3, r0, r3
   14324:	cmp	r7, r3
   14328:	cmpeq	r6, r2
   1432c:	bls	140e4 <__assert_fail@plt+0x2c2c>
   14330:	add	r5, r5, #1
   14334:	cmp	r5, #8
   14338:	bne	14318 <__assert_fail@plt+0x2e60>
   1433c:	b	140e4 <__assert_fail@plt+0x2c2c>
   14340:	ldr	r3, [sp, #8]
   14344:	mvn	r5, #0
   14348:	str	r3, [sp, #36]	; 0x24
   1434c:	ldr	r3, [sp, #16]
   14350:	cmp	r3, #1
   14354:	beq	143d8 <__assert_fail@plt+0x2f20>
   14358:	ldr	r3, [sp, #16]
   1435c:	cmp	r3, #0
   14360:	bne	14400 <__assert_fail@plt+0x2f48>
   14364:	ldr	r3, [sp, #48]	; 0x30
   14368:	add	r7, r7, r3
   1436c:	cmp	r7, #0
   14370:	ble	14400 <__assert_fail@plt+0x2f48>
   14374:	ldr	r3, [sp, #56]	; 0x38
   14378:	adds	sl, sl, #1
   1437c:	adc	fp, fp, #0
   14380:	cmp	r3, #0
   14384:	beq	14400 <__assert_fail@plt+0x2f48>
   14388:	mov	r3, #0
   1438c:	ldr	r2, [sp, #24]
   14390:	cmp	r3, fp
   14394:	cmpeq	r2, sl
   14398:	moveq	r3, #1
   1439c:	movne	r3, #0
   143a0:	cmp	r5, #7
   143a4:	movgt	r3, #0
   143a8:	andle	r3, r3, #1
   143ac:	cmp	r3, #0
   143b0:	beq	14400 <__assert_fail@plt+0x2f48>
   143b4:	tst	r8, #8
   143b8:	add	r5, r5, #1
   143bc:	beq	145f8 <__assert_fail@plt+0x3140>
   143c0:	ldr	r2, [sp, #36]	; 0x24
   143c4:	mov	r3, #49	; 0x31
   143c8:	sub	r4, r2, #1
   143cc:	strb	r3, [r2, #-1]
   143d0:	mov	r7, r2
   143d4:	b	140cc <__assert_fail@plt+0x2c14>
   143d8:	ldr	r1, [sp, #48]	; 0x30
   143dc:	and	r2, sl, #1
   143e0:	adds	r2, r2, r1
   143e4:	mov	r3, #0
   143e8:	adc	r3, r3, r1, asr #31
   143ec:	orr	r2, r2, r3
   143f0:	cmp	r2, #0
   143f4:	addne	r7, r7, #1
   143f8:	cmp	r7, #5
   143fc:	bgt	14374 <__assert_fail@plt+0x2ebc>
   14400:	ldr	r4, [sp, #36]	; 0x24
   14404:	mov	r6, #10
   14408:	mov	r7, #0
   1440c:	mov	r0, sl
   14410:	mov	r1, fp
   14414:	mov	r2, r6
   14418:	mov	r3, r7
   1441c:	bl	193b0 <__assert_fail@plt+0x7ef8>
   14420:	mov	r0, sl
   14424:	mov	r1, fp
   14428:	mov	r3, r7
   1442c:	add	r2, r2, #48	; 0x30
   14430:	strb	r2, [r4, #-1]!
   14434:	mov	r2, r6
   14438:	bl	193b0 <__assert_fail@plt+0x7ef8>
   1443c:	mov	sl, r0
   14440:	mov	fp, r1
   14444:	orrs	r3, sl, fp
   14448:	bne	1440c <__assert_fail@plt+0x2f54>
   1444c:	ldr	r7, [sp, #36]	; 0x24
   14450:	b	140cc <__assert_fail@plt+0x2c14>
   14454:	nop			; (mov r0, r0)
   14458:	andeq	r0, r0, r0
   1445c:	mvnsmi	r0, #0
   14460:	andeq	r0, r0, r0
   14464:	eormi	r0, r4, r0
   14468:	andeq	sl, r1, r4, asr #9
   1446c:	andeq	sl, r1, r0, lsr #9
   14470:	andeq	sl, r1, ip, asr #9
   14474:	movcc	r3, #3
   14478:	strcc	r3, [sp, #48]	; 0x30
   1447c:	movcs	r3, #2
   14480:	strcs	r3, [sp, #48]	; 0x30
   14484:	b	13f5c <__assert_fail@plt+0x2aa4>
   14488:	ldr	r3, [sp, #8]
   1448c:	mov	r5, #0
   14490:	str	r3, [sp, #36]	; 0x24
   14494:	b	1434c <__assert_fail@plt+0x2e94>
   14498:	bl	19268 <__assert_fail@plt+0x7db0>
   1449c:	vmov	d7, r0, r1
   144a0:	vcmp.f64	d7, d9
   144a4:	vmrs	APSR_nzcv, fpscr
   144a8:	movne	r0, #1
   144ac:	moveq	r0, #0
   144b0:	b	13e28 <__assert_fail@plt+0x2970>
   144b4:	vldr	d7, [pc, #380]	; 14638 <__assert_fail@plt+0x3180>
   144b8:	vmul.f64	d9, d9, d7
   144bc:	b	13e40 <__assert_fail@plt+0x2988>
   144c0:	ldr	r3, [sp, #8]
   144c4:	str	r5, [sp, #48]	; 0x30
   144c8:	mov	r4, r9
   144cc:	mov	r5, r8
   144d0:	mov	r7, r6
   144d4:	ldr	r9, [sp, #64]	; 0x40
   144d8:	ldr	r8, [sp, #68]	; 0x44
   144dc:	str	r3, [sp, #36]	; 0x24
   144e0:	b	1434c <__assert_fail@plt+0x2e94>
   144e4:	cmp	fp, #0
   144e8:	cmpeq	sl, #9
   144ec:	str	r5, [sp, #48]	; 0x30
   144f0:	mov	r4, r9
   144f4:	mov	r5, r8
   144f8:	mov	r7, r6
   144fc:	ldr	r9, [sp, #64]	; 0x40
   14500:	ldr	r8, [sp, #68]	; 0x44
   14504:	bhi	145ec <__assert_fail@plt+0x3134>
   14508:	ldr	r3, [sp, #16]
   1450c:	cmp	r3, #1
   14510:	beq	145a0 <__assert_fail@plt+0x30e8>
   14514:	ldr	r2, [sp, #48]	; 0x30
   14518:	ldr	r3, [sp, #16]
   1451c:	cmp	r2, #0
   14520:	clz	r3, r3
   14524:	lsr	r3, r3, #5
   14528:	moveq	r3, #0
   1452c:	cmp	r3, #0
   14530:	beq	14580 <__assert_fail@plt+0x30c8>
   14534:	add	r7, r7, #1
   14538:	cmp	r7, #10
   1453c:	beq	145cc <__assert_fail@plt+0x3114>
   14540:	add	r7, r7, #48	; 0x30
   14544:	uxtb	r3, r7
   14548:	ldr	r2, [sp, #36]	; 0x24
   1454c:	ldr	r1, [sp, #12]
   14550:	add	r7, r2, #2
   14554:	sub	r2, r7, r4
   14558:	str	r2, [sp, #36]	; 0x24
   1455c:	strb	r3, [r1, #646]	; 0x286
   14560:	mov	r0, r2
   14564:	mov	r3, #0
   14568:	mov	r2, r4
   1456c:	ldr	r1, [sp, #32]
   14570:	mov	r7, r3
   14574:	str	r3, [sp, #48]	; 0x30
   14578:	bl	11194 <memcpy@plt>
   1457c:	b	1434c <__assert_fail@plt+0x2e94>
   14580:	cmp	r7, #0
   14584:	bne	14540 <__assert_fail@plt+0x3088>
   14588:	tst	r8, #8
   1458c:	bne	145bc <__assert_fail@plt+0x3104>
   14590:	mov	r3, #48	; 0x30
   14594:	b	14548 <__assert_fail@plt+0x3090>
   14598:	mov	r5, #0
   1459c:	b	140e4 <__assert_fail@plt+0x2c2c>
   145a0:	ldr	r2, [sp, #48]	; 0x30
   145a4:	and	r3, r6, #1
   145a8:	add	r3, r3, r2
   145ac:	cmp	r3, #2
   145b0:	movle	r3, #0
   145b4:	movgt	r3, #1
   145b8:	b	1452c <__assert_fail@plt+0x3074>
   145bc:	ldr	r3, [sp, #8]
   145c0:	mov	r7, #0
   145c4:	str	r3, [sp, #36]	; 0x24
   145c8:	b	1434c <__assert_fail@plt+0x2e94>
   145cc:	adds	sl, sl, #1
   145d0:	adc	fp, fp, #0
   145d4:	cmp	fp, #0
   145d8:	mov	r3, #0
   145dc:	cmpeq	sl, #10
   145e0:	str	r3, [sp, #48]	; 0x30
   145e4:	moveq	r7, r3
   145e8:	bne	14588 <__assert_fail@plt+0x30d0>
   145ec:	ldr	r3, [sp, #8]
   145f0:	str	r3, [sp, #36]	; 0x24
   145f4:	b	1434c <__assert_fail@plt+0x2e94>
   145f8:	ldr	r1, [sp, #36]	; 0x24
   145fc:	mvn	r3, r4
   14600:	add	r3, r1, r3
   14604:	mov	r2, #48	; 0x30
   14608:	strb	r2, [r1, #-1]
   1460c:	mov	r0, r3
   14610:	ldr	r1, [sp, #32]
   14614:	mov	r2, r4
   14618:	str	r3, [sp, #36]	; 0x24
   1461c:	bl	11194 <memcpy@plt>
   14620:	b	143c0 <__assert_fail@plt+0x2f08>
   14624:	cmp	r3, #0
   14628:	ldrne	r2, [sp, #8]
   1462c:	bne	14160 <__assert_fail@plt+0x2ca8>
   14630:	b	14170 <__assert_fail@plt+0x2cb8>
   14634:	nop			; (mov r0, r0)
   14638:	andeq	r0, r0, r0
   1463c:	eormi	r0, r4, r0
   14640:	push	{r4, r5, r6, r7, r8, lr}
   14644:	subs	r4, r0, #0
   14648:	sub	sp, sp, #16
   1464c:	mov	r8, r1
   14650:	mov	r7, r2
   14654:	beq	1474c <__assert_fail@plt+0x3294>
   14658:	ldrb	r3, [r4]
   1465c:	ldr	r5, [pc, #360]	; 147cc <__assert_fail@plt+0x3314>
   14660:	cmp	r3, #39	; 0x27
   14664:	addeq	r4, r4, #1
   14668:	mov	r3, #4
   1466c:	add	r2, r5, #12
   14670:	add	r1, r5, #20
   14674:	mov	r0, r4
   14678:	moveq	r6, #4
   1467c:	movne	r6, #0
   14680:	bl	13348 <__assert_fail@plt+0x1e90>
   14684:	cmp	r0, #0
   14688:	blt	146e8 <__assert_fail@plt+0x3230>
   1468c:	add	r5, r5, r0, lsl #2
   14690:	mov	r1, #0
   14694:	ldr	ip, [r5, #12]
   14698:	mov	r0, #1
   1469c:	mov	r2, r0
   146a0:	orr	r6, r6, ip
   146a4:	mov	r3, r1
   146a8:	str	r0, [r7]
   146ac:	str	r1, [r7, #4]
   146b0:	mov	r0, #0
   146b4:	str	r6, [r8]
   146b8:	orrs	r3, r2, r3
   146bc:	bne	146e0 <__assert_fail@plt+0x3228>
   146c0:	ldr	r0, [pc, #264]	; 147d0 <__assert_fail@plt+0x3318>
   146c4:	bl	112b4 <getenv@plt>
   146c8:	mov	r3, #0
   146cc:	cmp	r0, #0
   146d0:	movne	r2, #512	; 0x200
   146d4:	moveq	r2, #1024	; 0x400
   146d8:	mov	r0, #4
   146dc:	strd	r2, [r7]
   146e0:	add	sp, sp, #16
   146e4:	pop	{r4, r5, r6, r7, r8, pc}
   146e8:	ldr	r2, [pc, #228]	; 147d4 <__assert_fail@plt+0x331c>
   146ec:	mov	r3, r7
   146f0:	str	r2, [sp]
   146f4:	add	r1, sp, #12
   146f8:	mov	r2, #0
   146fc:	mov	r0, r4
   14700:	bl	17fd8 <__assert_fail@plt+0x6b20>
   14704:	cmp	r0, #0
   14708:	bne	14790 <__assert_fail@plt+0x32d8>
   1470c:	ldrb	r3, [r4]
   14710:	sub	r3, r3, #48	; 0x30
   14714:	cmp	r3, #9
   14718:	bls	14744 <__assert_fail@plt+0x328c>
   1471c:	ldr	r2, [sp, #12]
   14720:	cmp	r4, r2
   14724:	bne	14734 <__assert_fail@plt+0x327c>
   14728:	b	147a0 <__assert_fail@plt+0x32e8>
   1472c:	cmp	r2, r4
   14730:	beq	147a0 <__assert_fail@plt+0x32e8>
   14734:	ldrb	r3, [r4, #1]!
   14738:	sub	r3, r3, #48	; 0x30
   1473c:	cmp	r3, #9
   14740:	bhi	1472c <__assert_fail@plt+0x3274>
   14744:	ldrd	r2, [r7]
   14748:	b	146b0 <__assert_fail@plt+0x31f8>
   1474c:	ldr	r0, [pc, #132]	; 147d8 <__assert_fail@plt+0x3320>
   14750:	bl	112b4 <getenv@plt>
   14754:	subs	r4, r0, #0
   14758:	bne	14658 <__assert_fail@plt+0x31a0>
   1475c:	ldr	r0, [pc, #120]	; 147dc <__assert_fail@plt+0x3324>
   14760:	bl	112b4 <getenv@plt>
   14764:	subs	r4, r0, #0
   14768:	bne	14658 <__assert_fail@plt+0x31a0>
   1476c:	ldr	r0, [pc, #92]	; 147d0 <__assert_fail@plt+0x3318>
   14770:	bl	112b4 <getenv@plt>
   14774:	mov	r3, #0
   14778:	mov	r6, #0
   1477c:	cmp	r0, #0
   14780:	movne	r2, #512	; 0x200
   14784:	moveq	r2, #1024	; 0x400
   14788:	strd	r2, [r7]
   1478c:	b	146b0 <__assert_fail@plt+0x31f8>
   14790:	mov	r3, #0
   14794:	str	r3, [r8]
   14798:	ldrd	r2, [r7]
   1479c:	b	146b8 <__assert_fail@plt+0x3200>
   147a0:	ldrb	r3, [r2, #-1]
   147a4:	cmp	r3, #66	; 0x42
   147a8:	orrne	r6, r6, #128	; 0x80
   147ac:	beq	147b8 <__assert_fail@plt+0x3300>
   147b0:	orr	r6, r6, #32
   147b4:	b	14744 <__assert_fail@plt+0x328c>
   147b8:	ldrb	r3, [r2, #-2]
   147bc:	orr	r6, r6, #384	; 0x180
   147c0:	cmp	r3, #105	; 0x69
   147c4:	bne	14744 <__assert_fail@plt+0x328c>
   147c8:	b	147b0 <__assert_fail@plt+0x32f8>
   147cc:	andeq	sl, r1, r0, lsr #9
   147d0:	andeq	sl, r1, ip, ror #9
   147d4:	strdeq	sl, [r1], -ip
   147d8:	ldrdeq	sl, [r1], -r4
   147dc:	andeq	sl, r1, r0, ror #9
   147e0:	push	{r4, r5, r6, r8, r9, lr}
   147e4:	mov	r4, r0
   147e8:	mov	r5, r1
   147ec:	add	r6, r2, #20
   147f0:	mov	r8, #10
   147f4:	mov	r9, #0
   147f8:	mov	r3, #0
   147fc:	strb	r3, [r2, #20]
   14800:	mov	r0, r4
   14804:	mov	r1, r5
   14808:	mov	r2, r8
   1480c:	mov	r3, r9
   14810:	bl	193b0 <__assert_fail@plt+0x7ef8>
   14814:	mov	r0, r4
   14818:	mov	r1, r5
   1481c:	mov	r3, r9
   14820:	add	r2, r2, #48	; 0x30
   14824:	strb	r2, [r6, #-1]!
   14828:	mov	r2, r8
   1482c:	bl	193b0 <__assert_fail@plt+0x7ef8>
   14830:	mov	r4, r0
   14834:	mov	r5, r1
   14838:	orrs	r3, r4, r5
   1483c:	bne	14800 <__assert_fail@plt+0x3348>
   14840:	mov	r0, r6
   14844:	pop	{r4, r5, r6, r8, r9, pc}
   14848:	push	{r4, r5, r6, lr}
   1484c:	subs	r4, r0, #0
   14850:	beq	148c4 <__assert_fail@plt+0x340c>
   14854:	mov	r1, #47	; 0x2f
   14858:	bl	113f8 <strrchr@plt>
   1485c:	subs	r5, r0, #0
   14860:	beq	148b0 <__assert_fail@plt+0x33f8>
   14864:	add	r6, r5, #1
   14868:	sub	r3, r6, r4
   1486c:	cmp	r3, #6
   14870:	ble	148b0 <__assert_fail@plt+0x33f8>
   14874:	mov	r2, #7
   14878:	ldr	r1, [pc, #96]	; 148e0 <__assert_fail@plt+0x3428>
   1487c:	sub	r0, r5, #6
   14880:	bl	11488 <strncmp@plt>
   14884:	cmp	r0, #0
   14888:	bne	148b0 <__assert_fail@plt+0x33f8>
   1488c:	mov	r2, #3
   14890:	ldr	r1, [pc, #76]	; 148e4 <__assert_fail@plt+0x342c>
   14894:	mov	r0, r6
   14898:	bl	11488 <strncmp@plt>
   1489c:	cmp	r0, #0
   148a0:	movne	r4, r6
   148a4:	ldreq	r3, [pc, #60]	; 148e8 <__assert_fail@plt+0x3430>
   148a8:	addeq	r4, r5, #4
   148ac:	streq	r4, [r3]
   148b0:	ldr	r2, [pc, #52]	; 148ec <__assert_fail@plt+0x3434>
   148b4:	ldr	r3, [pc, #52]	; 148f0 <__assert_fail@plt+0x3438>
   148b8:	str	r4, [r2]
   148bc:	str	r4, [r3]
   148c0:	pop	{r4, r5, r6, pc}
   148c4:	ldr	r3, [pc, #40]	; 148f4 <__assert_fail@plt+0x343c>
   148c8:	mov	r2, #55	; 0x37
   148cc:	mov	r1, #1
   148d0:	ldr	r3, [r3]
   148d4:	ldr	r0, [pc, #28]	; 148f8 <__assert_fail@plt+0x3440>
   148d8:	bl	11248 <fwrite@plt>
   148dc:	bl	114a0 <abort@plt>
   148e0:	andeq	sl, r1, ip, asr r5
   148e4:	andeq	sl, r1, r4, ror #10
   148e8:	andeq	fp, r2, r0, lsr #3
   148ec:	ldrdeq	fp, [r2], -r0
   148f0:	andeq	fp, r2, r4, lsr #3
   148f4:			; <UNDEFINED> instruction: 0x0002b1b0
   148f8:	andeq	sl, r1, r4, lsr #10
   148fc:	push	{r4, r5, r6, lr}
   14900:	mov	r2, #48	; 0x30
   14904:	mov	r4, r1
   14908:	mov	r1, #0
   1490c:	mov	r5, r0
   14910:	bl	11368 <memset@plt>
   14914:	cmp	r4, #10
   14918:	beq	14928 <__assert_fail@plt+0x3470>
   1491c:	str	r4, [r5]
   14920:	mov	r0, r5
   14924:	pop	{r4, r5, r6, pc}
   14928:	bl	114a0 <abort@plt>
   1492c:	push	{r4, r5, r6, lr}
   14930:	mov	r4, r0
   14934:	mov	r5, r1
   14938:	bl	18904 <__assert_fail@plt+0x744c>
   1493c:	ldrb	r3, [r0]
   14940:	bic	r3, r3, #32
   14944:	cmp	r3, #85	; 0x55
   14948:	bne	149a8 <__assert_fail@plt+0x34f0>
   1494c:	ldrb	r3, [r0, #1]
   14950:	bic	r3, r3, #32
   14954:	cmp	r3, #84	; 0x54
   14958:	bne	149e4 <__assert_fail@plt+0x352c>
   1495c:	ldrb	r3, [r0, #2]
   14960:	bic	r3, r3, #32
   14964:	cmp	r3, #70	; 0x46
   14968:	bne	149e4 <__assert_fail@plt+0x352c>
   1496c:	ldrb	r3, [r0, #3]
   14970:	cmp	r3, #45	; 0x2d
   14974:	bne	149e4 <__assert_fail@plt+0x352c>
   14978:	ldrb	r3, [r0, #4]
   1497c:	cmp	r3, #56	; 0x38
   14980:	bne	149e4 <__assert_fail@plt+0x352c>
   14984:	ldrb	r3, [r0, #5]
   14988:	cmp	r3, #0
   1498c:	bne	149e4 <__assert_fail@plt+0x352c>
   14990:	ldrb	r2, [r4]
   14994:	ldr	r3, [pc, #152]	; 14a34 <__assert_fail@plt+0x357c>
   14998:	ldr	r0, [pc, #152]	; 14a38 <__assert_fail@plt+0x3580>
   1499c:	cmp	r2, #96	; 0x60
   149a0:	movne	r0, r3
   149a4:	pop	{r4, r5, r6, pc}
   149a8:	cmp	r3, #71	; 0x47
   149ac:	bne	149e4 <__assert_fail@plt+0x352c>
   149b0:	ldrb	r3, [r0, #1]
   149b4:	bic	r3, r3, #32
   149b8:	cmp	r3, #66	; 0x42
   149bc:	bne	149e4 <__assert_fail@plt+0x352c>
   149c0:	ldrb	r3, [r0, #2]
   149c4:	cmp	r3, #49	; 0x31
   149c8:	bne	149e4 <__assert_fail@plt+0x352c>
   149cc:	ldrb	r3, [r0, #3]
   149d0:	cmp	r3, #56	; 0x38
   149d4:	bne	149e4 <__assert_fail@plt+0x352c>
   149d8:	ldrb	r3, [r0, #4]
   149dc:	cmp	r3, #48	; 0x30
   149e0:	beq	149f8 <__assert_fail@plt+0x3540>
   149e4:	ldr	r3, [pc, #80]	; 14a3c <__assert_fail@plt+0x3584>
   149e8:	cmp	r5, #9
   149ec:	ldr	r0, [pc, #76]	; 14a40 <__assert_fail@plt+0x3588>
   149f0:	movne	r0, r3
   149f4:	pop	{r4, r5, r6, pc}
   149f8:	ldrb	r3, [r0, #5]
   149fc:	cmp	r3, #51	; 0x33
   14a00:	bne	149e4 <__assert_fail@plt+0x352c>
   14a04:	ldrb	r3, [r0, #6]
   14a08:	cmp	r3, #48	; 0x30
   14a0c:	bne	149e4 <__assert_fail@plt+0x352c>
   14a10:	ldrb	r3, [r0, #7]
   14a14:	cmp	r3, #0
   14a18:	bne	149e4 <__assert_fail@plt+0x352c>
   14a1c:	ldrb	r2, [r4]
   14a20:	ldr	r3, [pc, #28]	; 14a44 <__assert_fail@plt+0x358c>
   14a24:	ldr	r0, [pc, #28]	; 14a48 <__assert_fail@plt+0x3590>
   14a28:	cmp	r2, #96	; 0x60
   14a2c:	movne	r0, r3
   14a30:	pop	{r4, r5, r6, pc}
   14a34:	andeq	sl, r1, r0, asr #11
   14a38:			; <UNDEFINED> instruction: 0x0001a5bc
   14a3c:	ldrdeq	sl, [r1], -r0
   14a40:	andeq	sl, r1, ip, asr #11
   14a44:	andeq	sl, r1, r8, asr #11
   14a48:	andeq	sl, r1, r4, asr #11
   14a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a50:	sub	sp, sp, #116	; 0x74
   14a54:	mov	sl, r0
   14a58:	str	r3, [sp, #24]
   14a5c:	mov	r3, #1
   14a60:	mov	r8, r1
   14a64:	str	r2, [sp, #56]	; 0x38
   14a68:	str	r3, [sp, #36]	; 0x24
   14a6c:	bl	1126c <__ctype_get_mb_cur_max@plt>
   14a70:	ldr	r3, [sp, #156]	; 0x9c
   14a74:	mov	fp, r8
   14a78:	mov	r2, #0
   14a7c:	lsr	r3, r3, #1
   14a80:	and	r3, r3, #1
   14a84:	str	r2, [sp, #68]	; 0x44
   14a88:	str	r3, [sp, #28]
   14a8c:	str	r2, [sp, #40]	; 0x28
   14a90:	str	r2, [sp, #44]	; 0x2c
   14a94:	str	r2, [sp, #52]	; 0x34
   14a98:	str	r2, [sp, #64]	; 0x40
   14a9c:	str	r2, [sp, #72]	; 0x48
   14aa0:	str	sl, [sp, #32]
   14aa4:	str	r0, [sp, #76]	; 0x4c
   14aa8:	ldr	r3, [sp, #152]	; 0x98
   14aac:	cmp	r3, #10
   14ab0:	ldrls	pc, [pc, r3, lsl #2]
   14ab4:	b	15c74 <__assert_fail@plt+0x47bc>
   14ab8:	andeq	r4, r1, r4, ror #21
   14abc:	andeq	r4, r1, ip, asr #27
   14ac0:	strdeq	r4, [r1], -r0
   14ac4:	andeq	r4, r1, r4, lsl lr
   14ac8:	andeq	r4, r1, r0, asr #30
   14acc:	andeq	r4, r1, r4, lsl pc
   14ad0:	andeq	r4, r1, ip, ror #29
   14ad4:	andeq	r4, r1, r8, lsr #28
   14ad8:	andeq	r4, r1, r0, asr #28
   14adc:	andeq	r4, r1, r0, asr #28
   14ae0:	andeq	r4, r1, r0, asr #28
   14ae4:	mov	r3, #0
   14ae8:	mov	r7, r3
   14aec:	str	r3, [sp, #28]
   14af0:	ldr	r3, [sp, #44]	; 0x2c
   14af4:	mov	sl, #0
   14af8:	eor	r3, r3, #1
   14afc:	str	r3, [sp, #60]	; 0x3c
   14b00:	ldr	r3, [sp, #24]
   14b04:	cmn	r3, #1
   14b08:	beq	1506c <__assert_fail@plt+0x3bb4>
   14b0c:	ldr	r3, [sp, #24]
   14b10:	subs	r5, r3, sl
   14b14:	movne	r5, #1
   14b18:	cmp	r5, #0
   14b1c:	beq	15084 <__assert_fail@plt+0x3bcc>
   14b20:	ldr	r3, [sp, #152]	; 0x98
   14b24:	ldr	r8, [sp, #44]	; 0x2c
   14b28:	cmp	r3, #2
   14b2c:	moveq	r8, #0
   14b30:	andne	r8, r8, #1
   14b34:	ldr	r3, [sp, #52]	; 0x34
   14b38:	adds	r9, r3, #0
   14b3c:	movne	r9, #1
   14b40:	ands	r6, r9, r8
   14b44:	beq	154ec <__assert_fail@plt+0x4034>
   14b48:	ldr	r2, [sp, #52]	; 0x34
   14b4c:	ldr	r1, [sp, #24]
   14b50:	cmp	r2, #1
   14b54:	mov	r3, r2
   14b58:	movls	r3, #0
   14b5c:	movhi	r3, #1
   14b60:	cmn	r1, #1
   14b64:	movne	r3, #0
   14b68:	cmp	r3, #0
   14b6c:	add	r4, sl, r2
   14b70:	beq	14b80 <__assert_fail@plt+0x36c8>
   14b74:	ldr	r0, [sp, #56]	; 0x38
   14b78:	bl	11314 <strlen@plt>
   14b7c:	str	r0, [sp, #24]
   14b80:	ldr	r3, [sp, #24]
   14b84:	cmp	r3, r4
   14b88:	ldr	r3, [sp, #56]	; 0x38
   14b8c:	add	r3, r3, sl
   14b90:	str	r3, [sp, #48]	; 0x30
   14b94:	bcc	154f8 <__assert_fail@plt+0x4040>
   14b98:	mov	r0, r3
   14b9c:	ldr	r2, [sp, #52]	; 0x34
   14ba0:	ldr	r1, [sp, #64]	; 0x40
   14ba4:	bl	111d0 <memcmp@plt>
   14ba8:	cmp	r0, #0
   14bac:	bne	154f8 <__assert_fail@plt+0x4040>
   14bb0:	ldr	r3, [sp, #28]
   14bb4:	cmp	r3, #0
   14bb8:	bne	15d74 <__assert_fail@plt+0x48bc>
   14bbc:	ldr	r3, [sp, #48]	; 0x30
   14bc0:	ldrb	r4, [r3]
   14bc4:	cmp	r4, #126	; 0x7e
   14bc8:	ldrls	pc, [pc, r4, lsl #2]
   14bcc:	b	1548c <__assert_fail@plt+0x3fd4>
   14bd0:			; <UNDEFINED> instruction: 0x000152b0
   14bd4:	andeq	r5, r1, ip, lsl #9
   14bd8:	andeq	r5, r1, ip, lsl #9
   14bdc:	andeq	r5, r1, ip, lsl #9
   14be0:	andeq	r5, r1, ip, lsl #9
   14be4:	andeq	r5, r1, ip, lsl #9
   14be8:	andeq	r5, r1, ip, lsl #9
   14bec:	muleq	r1, r4, r2
   14bf0:	andeq	r5, r1, r8, ror r2
   14bf4:	andeq	r5, r1, r4, ror r4
   14bf8:	ldrdeq	r5, [r1], -r8
   14bfc:			; <UNDEFINED> instruction: 0x000151bc
   14c00:	andeq	r5, r1, r0, asr r4
   14c04:	andeq	r5, r1, ip, lsr #8
   14c08:	andeq	r5, r1, ip, lsl #9
   14c0c:	andeq	r5, r1, ip, lsl #9
   14c10:	andeq	r5, r1, ip, lsl #9
   14c14:	andeq	r5, r1, ip, lsl #9
   14c18:	andeq	r5, r1, ip, lsl #9
   14c1c:	andeq	r5, r1, ip, lsl #9
   14c20:	andeq	r5, r1, ip, lsl #9
   14c24:	andeq	r5, r1, ip, lsl #9
   14c28:	andeq	r5, r1, ip, lsl #9
   14c2c:	andeq	r5, r1, ip, lsl #9
   14c30:	andeq	r5, r1, ip, lsl #9
   14c34:	andeq	r5, r1, ip, lsl #9
   14c38:	andeq	r5, r1, ip, lsl #9
   14c3c:	andeq	r5, r1, ip, lsl #9
   14c40:	andeq	r5, r1, ip, lsl #9
   14c44:	andeq	r5, r1, ip, lsl #9
   14c48:	andeq	r5, r1, ip, lsl #9
   14c4c:	andeq	r5, r1, ip, lsl #9
   14c50:	andeq	r5, r1, ip, ror #8
   14c54:	andeq	r5, r1, r0, lsr #7
   14c58:	andeq	r5, r1, r0, lsr #7
   14c5c:			; <UNDEFINED> instruction: 0x00014fb0
   14c60:	andeq	r5, r1, r0, lsr #7
   14c64:	andeq	r5, r1, r8, lsr r4
   14c68:	andeq	r5, r1, r0, lsr #7
   14c6c:	andeq	r5, r1, ip, lsl #8
   14c70:	andeq	r5, r1, r0, lsr #7
   14c74:	andeq	r5, r1, r0, lsr #7
   14c78:	andeq	r5, r1, r0, lsr #7
   14c7c:	andeq	r5, r1, r8, lsr r4
   14c80:	andeq	r5, r1, r8, lsr r4
   14c84:	andeq	r5, r1, r8, lsr r4
   14c88:	andeq	r5, r1, r8, lsr r4
   14c8c:	andeq	r5, r1, r8, lsr r4
   14c90:	andeq	r5, r1, r8, lsr r4
   14c94:	andeq	r5, r1, r8, lsr r4
   14c98:	andeq	r5, r1, r8, lsr r4
   14c9c:	andeq	r5, r1, r8, lsr r4
   14ca0:	andeq	r5, r1, r8, lsr r4
   14ca4:	andeq	r5, r1, r8, lsr r4
   14ca8:	andeq	r5, r1, r8, lsr r4
   14cac:	andeq	r5, r1, r8, lsr r4
   14cb0:	andeq	r5, r1, r8, lsr r4
   14cb4:	andeq	r5, r1, r8, lsr r4
   14cb8:	andeq	r5, r1, r8, lsr r4
   14cbc:	andeq	r5, r1, r0, lsr #7
   14cc0:	andeq	r5, r1, r0, lsr #7
   14cc4:	andeq	r5, r1, r0, lsr #7
   14cc8:	andeq	r5, r1, r0, lsr #7
   14ccc:	ldrdeq	r5, [r1], -ip
   14cd0:	andeq	r5, r1, ip, lsl #9
   14cd4:	andeq	r5, r1, r8, lsr r4
   14cd8:	andeq	r5, r1, r8, lsr r4
   14cdc:	andeq	r5, r1, r8, lsr r4
   14ce0:	andeq	r5, r1, r8, lsr r4
   14ce4:	andeq	r5, r1, r8, lsr r4
   14ce8:	andeq	r5, r1, r8, lsr r4
   14cec:	andeq	r5, r1, r8, lsr r4
   14cf0:	andeq	r5, r1, r8, lsr r4
   14cf4:	andeq	r5, r1, r8, lsr r4
   14cf8:	andeq	r5, r1, r8, lsr r4
   14cfc:	andeq	r5, r1, r8, lsr r4
   14d00:	andeq	r5, r1, r8, lsr r4
   14d04:	andeq	r5, r1, r8, lsr r4
   14d08:	andeq	r5, r1, r8, lsr r4
   14d0c:	andeq	r5, r1, r8, lsr r4
   14d10:	andeq	r5, r1, r8, lsr r4
   14d14:	andeq	r5, r1, r8, lsr r4
   14d18:	andeq	r5, r1, r8, lsr r4
   14d1c:	andeq	r5, r1, r8, lsr r4
   14d20:	andeq	r5, r1, r8, lsr r4
   14d24:	andeq	r5, r1, r8, lsr r4
   14d28:	andeq	r5, r1, r8, lsr r4
   14d2c:	andeq	r5, r1, r8, lsr r4
   14d30:	andeq	r5, r1, r8, lsr r4
   14d34:	andeq	r5, r1, r8, lsr r4
   14d38:	andeq	r5, r1, r8, lsr r4
   14d3c:	andeq	r5, r1, r0, lsr #7
   14d40:	strdeq	r5, [r1], -ip
   14d44:	andeq	r5, r1, r8, lsr r4
   14d48:	andeq	r5, r1, r0, lsr #7
   14d4c:	andeq	r5, r1, r8, lsr r4
   14d50:	andeq	r5, r1, r0, lsr #7
   14d54:	andeq	r5, r1, r8, lsr r4
   14d58:	andeq	r5, r1, r8, lsr r4
   14d5c:	andeq	r5, r1, r8, lsr r4
   14d60:	andeq	r5, r1, r8, lsr r4
   14d64:	andeq	r5, r1, r8, lsr r4
   14d68:	andeq	r5, r1, r8, lsr r4
   14d6c:	andeq	r5, r1, r8, lsr r4
   14d70:	andeq	r5, r1, r8, lsr r4
   14d74:	andeq	r5, r1, r8, lsr r4
   14d78:	andeq	r5, r1, r8, lsr r4
   14d7c:	andeq	r5, r1, r8, lsr r4
   14d80:	andeq	r5, r1, r8, lsr r4
   14d84:	andeq	r5, r1, r8, lsr r4
   14d88:	andeq	r5, r1, r8, lsr r4
   14d8c:	andeq	r5, r1, r8, lsr r4
   14d90:	andeq	r5, r1, r8, lsr r4
   14d94:	andeq	r5, r1, r8, lsr r4
   14d98:	andeq	r5, r1, r8, lsr r4
   14d9c:	andeq	r5, r1, r8, lsr r4
   14da0:	andeq	r5, r1, r8, lsr r4
   14da4:	andeq	r5, r1, r8, lsr r4
   14da8:	andeq	r5, r1, r8, lsr r4
   14dac:	andeq	r5, r1, r8, lsr r4
   14db0:	andeq	r5, r1, r8, lsr r4
   14db4:	andeq	r5, r1, r8, lsr r4
   14db8:	andeq	r5, r1, r8, lsr r4
   14dbc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14dc0:	andeq	r5, r1, r0, lsr #7
   14dc4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14dc8:			; <UNDEFINED> instruction: 0x00014fb0
   14dcc:	mov	r3, #1
   14dd0:	str	r3, [sp, #28]
   14dd4:	str	r3, [sp, #52]	; 0x34
   14dd8:	ldr	r3, [pc, #4000]	; 15d80 <__assert_fail@plt+0x48c8>
   14ddc:	mov	r7, #0
   14de0:	str	r3, [sp, #64]	; 0x40
   14de4:	mov	r3, #2
   14de8:	str	r3, [sp, #152]	; 0x98
   14dec:	b	14af0 <__assert_fail@plt+0x3638>
   14df0:	ldr	r3, [sp, #28]
   14df4:	cmp	r3, #0
   14df8:	beq	14f54 <__assert_fail@plt+0x3a9c>
   14dfc:	mov	r3, #1
   14e00:	str	r3, [sp, #52]	; 0x34
   14e04:	ldr	r3, [pc, #3956]	; 15d80 <__assert_fail@plt+0x48c8>
   14e08:	mov	r7, #0
   14e0c:	str	r3, [sp, #64]	; 0x40
   14e10:	b	14af0 <__assert_fail@plt+0x3638>
   14e14:	mov	r3, #1
   14e18:	str	r3, [sp, #44]	; 0x2c
   14e1c:	str	r3, [sp, #52]	; 0x34
   14e20:	str	r3, [sp, #28]
   14e24:	b	14dd8 <__assert_fail@plt+0x3920>
   14e28:	mov	r3, #0
   14e2c:	str	r3, [sp, #28]
   14e30:	mov	r3, #1
   14e34:	str	r3, [sp, #44]	; 0x2c
   14e38:	mov	r7, #0
   14e3c:	b	14af0 <__assert_fail@plt+0x3638>
   14e40:	ldr	r3, [sp, #152]	; 0x98
   14e44:	cmp	r3, #10
   14e48:	beq	14e8c <__assert_fail@plt+0x39d4>
   14e4c:	mov	r2, #5
   14e50:	ldr	r1, [pc, #3884]	; 15d84 <__assert_fail@plt+0x48cc>
   14e54:	mov	r0, #0
   14e58:	bl	111e8 <dcgettext@plt>
   14e5c:	ldr	r2, [pc, #3872]	; 15d84 <__assert_fail@plt+0x48cc>
   14e60:	cmp	r0, r2
   14e64:	str	r0, [sp, #164]	; 0xa4
   14e68:	beq	15e70 <__assert_fail@plt+0x49b8>
   14e6c:	mov	r2, #5
   14e70:	ldr	r1, [pc, #3848]	; 15d80 <__assert_fail@plt+0x48c8>
   14e74:	mov	r0, #0
   14e78:	bl	111e8 <dcgettext@plt>
   14e7c:	ldr	r2, [pc, #3836]	; 15d80 <__assert_fail@plt+0x48c8>
   14e80:	cmp	r0, r2
   14e84:	str	r0, [sp, #168]	; 0xa8
   14e88:	beq	15e60 <__assert_fail@plt+0x49a8>
   14e8c:	ldr	r7, [sp, #28]
   14e90:	cmp	r7, #0
   14e94:	movne	r7, #0
   14e98:	bne	14ecc <__assert_fail@plt+0x3a14>
   14e9c:	ldr	r3, [sp, #164]	; 0xa4
   14ea0:	ldrb	r3, [r3]
   14ea4:	cmp	r3, #0
   14ea8:	beq	15e80 <__assert_fail@plt+0x49c8>
   14eac:	ldr	r2, [sp, #164]	; 0xa4
   14eb0:	ldr	r1, [sp, #32]
   14eb4:	cmp	fp, r7
   14eb8:	strbhi	r3, [r1, r7]
   14ebc:	ldrb	r3, [r2, #1]!
   14ec0:	add	r7, r7, #1
   14ec4:	cmp	r3, #0
   14ec8:	bne	14eb4 <__assert_fail@plt+0x39fc>
   14ecc:	ldr	r0, [sp, #168]	; 0xa8
   14ed0:	bl	11314 <strlen@plt>
   14ed4:	ldr	r3, [sp, #168]	; 0xa8
   14ed8:	str	r3, [sp, #64]	; 0x40
   14edc:	mov	r3, #1
   14ee0:	str	r3, [sp, #44]	; 0x2c
   14ee4:	str	r0, [sp, #52]	; 0x34
   14ee8:	b	14af0 <__assert_fail@plt+0x3638>
   14eec:	mov	r3, #1
   14ef0:	str	r3, [sp, #44]	; 0x2c
   14ef4:	str	r3, [sp, #52]	; 0x34
   14ef8:	str	r3, [sp, #28]
   14efc:	ldr	r3, [pc, #3716]	; 15d88 <__assert_fail@plt+0x48d0>
   14f00:	mov	r7, #0
   14f04:	str	r3, [sp, #64]	; 0x40
   14f08:	mov	r3, #5
   14f0c:	str	r3, [sp, #152]	; 0x98
   14f10:	b	14af0 <__assert_fail@plt+0x3638>
   14f14:	ldr	r3, [sp, #28]
   14f18:	cmp	r3, #0
   14f1c:	beq	15c1c <__assert_fail@plt+0x4764>
   14f20:	ldr	r3, [sp, #28]
   14f24:	mov	r7, #0
   14f28:	str	r3, [sp, #44]	; 0x2c
   14f2c:	mov	r3, #1
   14f30:	str	r3, [sp, #52]	; 0x34
   14f34:	ldr	r3, [pc, #3660]	; 15d88 <__assert_fail@plt+0x48d0>
   14f38:	str	r3, [sp, #64]	; 0x40
   14f3c:	b	14af0 <__assert_fail@plt+0x3638>
   14f40:	ldr	r3, [sp, #28]
   14f44:	cmp	r3, #0
   14f48:	mov	r3, #1
   14f4c:	streq	r3, [sp, #44]	; 0x2c
   14f50:	bne	14dd4 <__assert_fail@plt+0x391c>
   14f54:	cmp	fp, #0
   14f58:	beq	15c4c <__assert_fail@plt+0x4794>
   14f5c:	ldr	r3, [sp, #32]
   14f60:	mov	r2, #39	; 0x27
   14f64:	mov	r7, #1
   14f68:	strb	r2, [r3]
   14f6c:	mov	r3, #0
   14f70:	str	r3, [sp, #28]
   14f74:	mov	r3, #1
   14f78:	str	r3, [sp, #52]	; 0x34
   14f7c:	ldr	r3, [pc, #3580]	; 15d80 <__assert_fail@plt+0x48c8>
   14f80:	str	r3, [sp, #64]	; 0x40
   14f84:	mov	r3, #2
   14f88:	str	r3, [sp, #152]	; 0x98
   14f8c:	b	14af0 <__assert_fail@plt+0x3638>
   14f90:	ldr	r3, [sp, #24]
   14f94:	cmn	r3, #1
   14f98:	beq	15bb0 <__assert_fail@plt+0x46f8>
   14f9c:	ldr	r3, [sp, #24]
   14fa0:	subs	r3, r3, #1
   14fa4:	movne	r3, #1
   14fa8:	cmp	r3, #0
   14fac:	bne	14fb8 <__assert_fail@plt+0x3b00>
   14fb0:	cmp	sl, #0
   14fb4:	beq	153a4 <__assert_fail@plt+0x3eec>
   14fb8:	ldr	r3, [sp, #152]	; 0x98
   14fbc:	mov	r5, #0
   14fc0:	sub	r2, r3, #2
   14fc4:	mov	r8, r5
   14fc8:	clz	r2, r2
   14fcc:	lsr	r2, r2, #5
   14fd0:	ldr	r3, [sp, #60]	; 0x3c
   14fd4:	ldr	r1, [sp, #28]
   14fd8:	orr	r3, r2, r3
   14fdc:	eor	r3, r3, #1
   14fe0:	orr	r3, r1, r3
   14fe4:	tst	r3, #255	; 0xff
   14fe8:	bne	15714 <__assert_fail@plt+0x425c>
   14fec:	cmp	r6, #0
   14ff0:	bne	15140 <__assert_fail@plt+0x3c88>
   14ff4:	ldr	r3, [sp, #40]	; 0x28
   14ff8:	eor	r8, r8, #1
   14ffc:	and	r8, r8, r3
   15000:	add	sl, sl, #1
   15004:	uxtb	r6, r8
   15008:	cmp	r6, #0
   1500c:	beq	15040 <__assert_fail@plt+0x3b88>
   15010:	cmp	fp, r7
   15014:	movhi	r2, #39	; 0x27
   15018:	ldrhi	r3, [sp, #32]
   1501c:	strbhi	r2, [r3, r7]
   15020:	add	r3, r7, #1
   15024:	cmp	fp, r3
   15028:	movhi	r1, #39	; 0x27
   1502c:	ldrhi	r2, [sp, #32]
   15030:	add	r7, r7, #2
   15034:	strbhi	r1, [r2, r3]
   15038:	mov	r3, #0
   1503c:	str	r3, [sp, #40]	; 0x28
   15040:	cmp	r7, fp
   15044:	ldrcc	r3, [sp, #32]
   15048:	strbcc	r4, [r3, r7]
   1504c:	ldr	r3, [sp, #36]	; 0x24
   15050:	cmp	r5, #0
   15054:	moveq	r3, #0
   15058:	str	r3, [sp, #36]	; 0x24
   1505c:	ldr	r3, [sp, #24]
   15060:	add	r7, r7, #1
   15064:	cmn	r3, #1
   15068:	bne	14b0c <__assert_fail@plt+0x3654>
   1506c:	ldr	r3, [sp, #56]	; 0x38
   15070:	ldrb	r5, [r3, sl]
   15074:	adds	r5, r5, #0
   15078:	movne	r5, #1
   1507c:	cmp	r5, #0
   15080:	bne	14b20 <__assert_fail@plt+0x3668>
   15084:	ldr	r3, [sp, #152]	; 0x98
   15088:	ldr	r1, [sp, #28]
   1508c:	sub	r3, r3, #2
   15090:	clz	r3, r3
   15094:	lsr	r3, r3, #5
   15098:	and	r9, r1, r3
   1509c:	cmp	r7, #0
   150a0:	movne	r2, #0
   150a4:	andeq	r2, r9, #1
   150a8:	cmp	r2, #0
   150ac:	bne	15a88 <__assert_fail@plt+0x45d0>
   150b0:	eor	r2, r1, #1
   150b4:	ands	r3, r3, r2
   150b8:	beq	15f44 <__assert_fail@plt+0x4a8c>
   150bc:	ldr	r2, [sp, #68]	; 0x44
   150c0:	cmp	r2, #0
   150c4:	beq	15f30 <__assert_fail@plt+0x4a78>
   150c8:	ldr	r3, [sp, #36]	; 0x24
   150cc:	cmp	r3, #0
   150d0:	bne	15ee8 <__assert_fail@plt+0x4a30>
   150d4:	ldr	r2, [sp, #72]	; 0x48
   150d8:	clz	r3, fp
   150dc:	cmp	r2, #0
   150e0:	lsr	r3, r3, #5
   150e4:	moveq	r3, #0
   150e8:	cmp	r3, #0
   150ec:	beq	15e88 <__assert_fail@plt+0x49d0>
   150f0:	str	r3, [sp, #68]	; 0x44
   150f4:	ldr	fp, [sp, #72]	; 0x48
   150f8:	b	14aa8 <__assert_fail@plt+0x35f0>
   150fc:	ldr	r3, [sp, #152]	; 0x98
   15100:	cmp	r3, #2
   15104:	beq	15758 <__assert_fail@plt+0x42a0>
   15108:	ldr	r3, [sp, #44]	; 0x2c
   1510c:	ldr	r2, [sp, #28]
   15110:	and	r2, r3, r2
   15114:	ands	r2, r9, r2
   15118:	bne	15764 <__assert_fail@plt+0x42ac>
   1511c:	mov	r4, #92	; 0x5c
   15120:	mov	r3, r4
   15124:	ldr	r1, [sp, #44]	; 0x2c
   15128:	cmp	r1, #0
   1512c:	moveq	r5, #0
   15130:	moveq	r8, r1
   15134:	beq	14fd0 <__assert_fail@plt+0x3b18>
   15138:	mov	r4, r3
   1513c:	mov	r5, #0
   15140:	ldr	r3, [sp, #28]
   15144:	cmp	r3, #0
   15148:	bne	1574c <__assert_fail@plt+0x4294>
   1514c:	ldr	r3, [sp, #40]	; 0x28
   15150:	eor	r9, r3, #1
   15154:	and	r9, r9, r2
   15158:	ands	r9, r9, #255	; 0xff
   1515c:	beq	151a0 <__assert_fail@plt+0x3ce8>
   15160:	cmp	fp, r7
   15164:	movhi	r2, #39	; 0x27
   15168:	ldrhi	r3, [sp, #32]
   1516c:	str	r9, [sp, #40]	; 0x28
   15170:	strbhi	r2, [r3, r7]
   15174:	add	r3, r7, #1
   15178:	cmp	fp, r3
   1517c:	movhi	r1, #36	; 0x24
   15180:	ldrhi	r2, [sp, #32]
   15184:	strbhi	r1, [r2, r3]
   15188:	add	r3, r7, #2
   1518c:	cmp	fp, r3
   15190:	add	r7, r7, #3
   15194:	ldrhi	r2, [sp, #32]
   15198:	movhi	r1, #39	; 0x27
   1519c:	strbhi	r1, [r2, r3]
   151a0:	cmp	fp, r7
   151a4:	movhi	r2, #92	; 0x5c
   151a8:	ldrhi	r3, [sp, #32]
   151ac:	add	sl, sl, #1
   151b0:	strbhi	r2, [r3, r7]
   151b4:	add	r7, r7, #1
   151b8:	b	15040 <__assert_fail@plt+0x3b88>
   151bc:	ldr	r3, [sp, #152]	; 0x98
   151c0:	mov	r4, #11
   151c4:	sub	r2, r3, #2
   151c8:	mov	r3, #118	; 0x76
   151cc:	clz	r2, r2
   151d0:	lsr	r2, r2, #5
   151d4:	b	15124 <__assert_fail@plt+0x3c6c>
   151d8:	mov	r4, #10
   151dc:	mov	r3, #110	; 0x6e
   151e0:	ldr	r2, [sp, #152]	; 0x98
   151e4:	ldr	r1, [sp, #28]
   151e8:	sub	r2, r2, #2
   151ec:	clz	r2, r2
   151f0:	lsr	r2, r2, #5
   151f4:	ands	r1, r1, r2
   151f8:	beq	15124 <__assert_fail@plt+0x3c6c>
   151fc:	ldr	sl, [sp, #32]
   15200:	mov	r8, fp
   15204:	mov	r2, r1
   15208:	mov	r3, #2
   1520c:	str	r3, [sp, #152]	; 0x98
   15210:	ldr	r9, [sp, #44]	; 0x2c
   15214:	ldr	r3, [sp, #152]	; 0x98
   15218:	and	r9, r9, r2
   1521c:	tst	r9, #255	; 0xff
   15220:	movne	r3, #4
   15224:	str	r3, [sp, #152]	; 0x98
   15228:	ldr	r3, [sp, #156]	; 0x9c
   1522c:	mov	ip, #0
   15230:	bic	r3, r3, #2
   15234:	str	r3, [sp, #4]
   15238:	ldr	r3, [sp, #168]	; 0xa8
   1523c:	ldr	r2, [sp, #56]	; 0x38
   15240:	str	r3, [sp, #16]
   15244:	ldr	r3, [sp, #164]	; 0xa4
   15248:	mov	r1, r8
   1524c:	str	r3, [sp, #12]
   15250:	ldr	r3, [sp, #152]	; 0x98
   15254:	mov	r0, sl
   15258:	str	r3, [sp]
   1525c:	str	ip, [sp, #8]
   15260:	ldr	r3, [sp, #24]
   15264:	bl	14a4c <__assert_fail@plt+0x3594>
   15268:	mov	fp, r0
   1526c:	mov	r0, fp
   15270:	add	sp, sp, #116	; 0x74
   15274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15278:	ldr	r3, [sp, #152]	; 0x98
   1527c:	mov	r4, #8
   15280:	sub	r2, r3, #2
   15284:	mov	r3, #98	; 0x62
   15288:	clz	r2, r2
   1528c:	lsr	r2, r2, #5
   15290:	b	15124 <__assert_fail@plt+0x3c6c>
   15294:	ldr	r3, [sp, #152]	; 0x98
   15298:	mov	r4, #7
   1529c:	sub	r2, r3, #2
   152a0:	mov	r3, #97	; 0x61
   152a4:	clz	r2, r2
   152a8:	lsr	r2, r2, #5
   152ac:	b	15124 <__assert_fail@plt+0x3c6c>
   152b0:	ldr	r3, [sp, #44]	; 0x2c
   152b4:	cmp	r3, #0
   152b8:	beq	15a9c <__assert_fail@plt+0x45e4>
   152bc:	ldr	r3, [sp, #28]
   152c0:	cmp	r3, #0
   152c4:	bne	15d74 <__assert_fail@plt+0x48bc>
   152c8:	ldr	r3, [sp, #152]	; 0x98
   152cc:	sub	r2, r3, #2
   152d0:	ldr	r3, [sp, #40]	; 0x28
   152d4:	clz	r2, r2
   152d8:	eor	r3, r3, #1
   152dc:	lsr	r2, r2, #5
   152e0:	ands	r3, r2, r3
   152e4:	moveq	r1, r7
   152e8:	beq	1532c <__assert_fail@plt+0x3e74>
   152ec:	cmp	fp, r7
   152f0:	movhi	r0, #39	; 0x27
   152f4:	ldrhi	r1, [sp, #32]
   152f8:	str	r3, [sp, #40]	; 0x28
   152fc:	strbhi	r0, [r1, r7]
   15300:	add	r1, r7, #1
   15304:	cmp	fp, r1
   15308:	movhi	ip, #36	; 0x24
   1530c:	ldrhi	r0, [sp, #32]
   15310:	strbhi	ip, [r0, r1]
   15314:	add	r1, r7, #2
   15318:	cmp	fp, r1
   1531c:	movhi	ip, #39	; 0x27
   15320:	ldrhi	r0, [sp, #32]
   15324:	strbhi	ip, [r0, r1]
   15328:	add	r1, r7, #3
   1532c:	cmp	fp, r1
   15330:	movhi	r0, #92	; 0x5c
   15334:	ldrhi	r3, [sp, #32]
   15338:	add	r7, r1, #1
   1533c:	strbhi	r0, [r3, r1]
   15340:	cmp	r8, #0
   15344:	beq	15c88 <__assert_fail@plt+0x47d0>
   15348:	ldr	r0, [sp, #24]
   1534c:	add	r3, sl, #1
   15350:	cmp	r3, r0
   15354:	bcs	15bc4 <__assert_fail@plt+0x470c>
   15358:	ldr	r0, [sp, #56]	; 0x38
   1535c:	ldrb	r3, [r0, r3]
   15360:	sub	r3, r3, #48	; 0x30
   15364:	cmp	r3, #9
   15368:	bhi	15bc4 <__assert_fail@plt+0x470c>
   1536c:	cmp	fp, r7
   15370:	movhi	r3, #48	; 0x30
   15374:	ldrhi	r0, [sp, #32]
   15378:	ldr	r5, [sp, #28]
   1537c:	mov	r4, #48	; 0x30
   15380:	strbhi	r3, [r0, r7]
   15384:	add	r3, r1, #2
   15388:	cmp	fp, r3
   1538c:	movhi	r0, #48	; 0x30
   15390:	ldrhi	ip, [sp, #32]
   15394:	add	r7, r1, #3
   15398:	strbhi	r0, [ip, r3]
   1539c:	b	14fd0 <__assert_fail@plt+0x3b18>
   153a0:	mov	r5, #0
   153a4:	ldr	r3, [sp, #152]	; 0x98
   153a8:	sub	r2, r3, #2
   153ac:	ldr	r3, [sp, #28]
   153b0:	clz	r2, r2
   153b4:	lsr	r2, r2, #5
   153b8:	ands	r8, r3, r2
   153bc:	beq	14fd0 <__assert_fail@plt+0x3b18>
   153c0:	mov	r3, r8
   153c4:	mov	r2, r3
   153c8:	mov	r3, #2
   153cc:	ldr	sl, [sp, #32]
   153d0:	mov	r8, fp
   153d4:	str	r3, [sp, #152]	; 0x98
   153d8:	b	15210 <__assert_fail@plt+0x3d58>
   153dc:	ldr	r3, [sp, #152]	; 0x98
   153e0:	cmp	r3, #2
   153e4:	beq	15b08 <__assert_fail@plt+0x4650>
   153e8:	cmp	r3, #5
   153ec:	beq	15ac8 <__assert_fail@plt+0x4610>
   153f0:	mov	r5, #0
   153f4:	sub	r2, r3, #2
   153f8:	mov	r8, r5
   153fc:	clz	r2, r2
   15400:	mov	r4, #63	; 0x3f
   15404:	lsr	r2, r2, #5
   15408:	b	14fd0 <__assert_fail@plt+0x3b18>
   1540c:	ldr	r3, [sp, #152]	; 0x98
   15410:	cmp	r3, #2
   15414:	beq	15b28 <__assert_fail@plt+0x4670>
   15418:	mov	r2, #0
   1541c:	str	r5, [sp, #68]	; 0x44
   15420:	mov	r8, r2
   15424:	mov	r4, #39	; 0x27
   15428:	b	14fd0 <__assert_fail@plt+0x3b18>
   1542c:	mov	r4, #13
   15430:	mov	r3, #114	; 0x72
   15434:	b	151e0 <__assert_fail@plt+0x3d28>
   15438:	ldr	r3, [sp, #152]	; 0x98
   1543c:	mov	r8, #0
   15440:	sub	r2, r3, #2
   15444:	clz	r2, r2
   15448:	lsr	r2, r2, #5
   1544c:	b	14fd0 <__assert_fail@plt+0x3b18>
   15450:	ldr	r3, [sp, #152]	; 0x98
   15454:	mov	r4, #12
   15458:	sub	r2, r3, #2
   1545c:	mov	r3, #102	; 0x66
   15460:	clz	r2, r2
   15464:	lsr	r2, r2, #5
   15468:	b	15124 <__assert_fail@plt+0x3c6c>
   1546c:	mov	r5, r6
   15470:	b	153a4 <__assert_fail@plt+0x3eec>
   15474:	ldr	r3, [sp, #152]	; 0x98
   15478:	sub	r2, r3, #2
   1547c:	mov	r3, #116	; 0x74
   15480:	clz	r2, r2
   15484:	lsr	r2, r2, #5
   15488:	b	15124 <__assert_fail@plt+0x3c6c>
   1548c:	ldr	r8, [sp, #76]	; 0x4c
   15490:	cmp	r8, #1
   15494:	bne	15944 <__assert_fail@plt+0x448c>
   15498:	bl	112fc <__ctype_b_loc@plt>
   1549c:	sxth	r3, r4
   154a0:	mov	ip, r8
   154a4:	lsl	r3, r3, #1
   154a8:	ldr	r2, [r0]
   154ac:	ldrh	r3, [r2, r3]
   154b0:	and	r3, r3, #16384	; 0x4000
   154b4:	cmp	r3, #0
   154b8:	movne	r5, #1
   154bc:	moveq	r5, #0
   154c0:	moveq	r3, #1
   154c4:	movne	r3, #0
   154c8:	ldr	r2, [sp, #44]	; 0x2c
   154cc:	and	r3, r3, r2
   154d0:	ands	r8, r3, #255	; 0xff
   154d4:	bne	157d8 <__assert_fail@plt+0x4320>
   154d8:	ldr	r3, [sp, #152]	; 0x98
   154dc:	sub	r2, r3, #2
   154e0:	clz	r2, r2
   154e4:	lsr	r2, r2, #5
   154e8:	b	14fd0 <__assert_fail@plt+0x3b18>
   154ec:	ldr	r3, [sp, #56]	; 0x38
   154f0:	add	r3, r3, sl
   154f4:	str	r3, [sp, #48]	; 0x30
   154f8:	ldr	r3, [sp, #48]	; 0x30
   154fc:	mov	r6, #0
   15500:	ldrb	r4, [r3]
   15504:	cmp	r4, #126	; 0x7e
   15508:	ldrls	pc, [pc, r4, lsl #2]
   1550c:	b	1548c <__assert_fail@plt+0x3fd4>
   15510:			; <UNDEFINED> instruction: 0x000152b0
   15514:	andeq	r5, r1, ip, lsl #9
   15518:	andeq	r5, r1, ip, lsl #9
   1551c:	andeq	r5, r1, ip, lsl #9
   15520:	andeq	r5, r1, ip, lsl #9
   15524:	andeq	r5, r1, ip, lsl #9
   15528:	andeq	r5, r1, ip, lsl #9
   1552c:	muleq	r1, r4, r2
   15530:	andeq	r5, r1, r8, ror r2
   15534:	andeq	r5, r1, ip, lsl #14
   15538:	ldrdeq	r5, [r1], -r8
   1553c:			; <UNDEFINED> instruction: 0x000151bc
   15540:	andeq	r5, r1, r0, asr r4
   15544:	andeq	r5, r1, ip, lsr #8
   15548:	andeq	r5, r1, ip, lsl #9
   1554c:	andeq	r5, r1, ip, lsl #9
   15550:	andeq	r5, r1, ip, lsl #9
   15554:	andeq	r5, r1, ip, lsl #9
   15558:	andeq	r5, r1, ip, lsl #9
   1555c:	andeq	r5, r1, ip, lsl #9
   15560:	andeq	r5, r1, ip, lsl #9
   15564:	andeq	r5, r1, ip, lsl #9
   15568:	andeq	r5, r1, ip, lsl #9
   1556c:	andeq	r5, r1, ip, lsl #9
   15570:	andeq	r5, r1, ip, lsl #9
   15574:	andeq	r5, r1, ip, lsl #9
   15578:	andeq	r5, r1, ip, lsl #9
   1557c:	andeq	r5, r1, ip, lsl #9
   15580:	andeq	r5, r1, ip, lsl #9
   15584:	andeq	r5, r1, ip, lsl #9
   15588:	andeq	r5, r1, ip, lsl #9
   1558c:	andeq	r5, r1, ip, lsl #9
   15590:	andeq	r5, r1, r4, lsr #7
   15594:	andeq	r5, r1, r0, lsr #7
   15598:	andeq	r5, r1, r0, lsr #7
   1559c:			; <UNDEFINED> instruction: 0x00014fb0
   155a0:	andeq	r5, r1, r0, lsr #7
   155a4:	andeq	r5, r1, r8, lsr r4
   155a8:	andeq	r5, r1, r0, lsr #7
   155ac:	andeq	r5, r1, ip, lsl #8
   155b0:	andeq	r5, r1, r0, lsr #7
   155b4:	andeq	r5, r1, r0, lsr #7
   155b8:	andeq	r5, r1, r0, lsr #7
   155bc:	andeq	r5, r1, r8, lsr r4
   155c0:	andeq	r5, r1, r8, lsr r4
   155c4:	andeq	r5, r1, r8, lsr r4
   155c8:	andeq	r5, r1, r8, lsr r4
   155cc:	andeq	r5, r1, r8, lsr r4
   155d0:	andeq	r5, r1, r8, lsr r4
   155d4:	andeq	r5, r1, r8, lsr r4
   155d8:	andeq	r5, r1, r8, lsr r4
   155dc:	andeq	r5, r1, r8, lsr r4
   155e0:	andeq	r5, r1, r8, lsr r4
   155e4:	andeq	r5, r1, r8, lsr r4
   155e8:	andeq	r5, r1, r8, lsr r4
   155ec:	andeq	r5, r1, r8, lsr r4
   155f0:	andeq	r5, r1, r8, lsr r4
   155f4:	andeq	r5, r1, r8, lsr r4
   155f8:	andeq	r5, r1, r8, lsr r4
   155fc:	andeq	r5, r1, r0, lsr #7
   15600:	andeq	r5, r1, r0, lsr #7
   15604:	andeq	r5, r1, r0, lsr #7
   15608:	andeq	r5, r1, r0, lsr #7
   1560c:	ldrdeq	r5, [r1], -ip
   15610:	andeq	r5, r1, ip, lsl #9
   15614:	andeq	r5, r1, r8, lsr r4
   15618:	andeq	r5, r1, r8, lsr r4
   1561c:	andeq	r5, r1, r8, lsr r4
   15620:	andeq	r5, r1, r8, lsr r4
   15624:	andeq	r5, r1, r8, lsr r4
   15628:	andeq	r5, r1, r8, lsr r4
   1562c:	andeq	r5, r1, r8, lsr r4
   15630:	andeq	r5, r1, r8, lsr r4
   15634:	andeq	r5, r1, r8, lsr r4
   15638:	andeq	r5, r1, r8, lsr r4
   1563c:	andeq	r5, r1, r8, lsr r4
   15640:	andeq	r5, r1, r8, lsr r4
   15644:	andeq	r5, r1, r8, lsr r4
   15648:	andeq	r5, r1, r8, lsr r4
   1564c:	andeq	r5, r1, r8, lsr r4
   15650:	andeq	r5, r1, r8, lsr r4
   15654:	andeq	r5, r1, r8, lsr r4
   15658:	andeq	r5, r1, r8, lsr r4
   1565c:	andeq	r5, r1, r8, lsr r4
   15660:	andeq	r5, r1, r8, lsr r4
   15664:	andeq	r5, r1, r8, lsr r4
   15668:	andeq	r5, r1, r8, lsr r4
   1566c:	andeq	r5, r1, r8, lsr r4
   15670:	andeq	r5, r1, r8, lsr r4
   15674:	andeq	r5, r1, r8, lsr r4
   15678:	andeq	r5, r1, r8, lsr r4
   1567c:	andeq	r5, r1, r0, lsr #7
   15680:	strdeq	r5, [r1], -ip
   15684:	andeq	r5, r1, r8, lsr r4
   15688:	andeq	r5, r1, r0, lsr #7
   1568c:	andeq	r5, r1, r8, lsr r4
   15690:	andeq	r5, r1, r0, lsr #7
   15694:	andeq	r5, r1, r8, lsr r4
   15698:	andeq	r5, r1, r8, lsr r4
   1569c:	andeq	r5, r1, r8, lsr r4
   156a0:	andeq	r5, r1, r8, lsr r4
   156a4:	andeq	r5, r1, r8, lsr r4
   156a8:	andeq	r5, r1, r8, lsr r4
   156ac:	andeq	r5, r1, r8, lsr r4
   156b0:	andeq	r5, r1, r8, lsr r4
   156b4:	andeq	r5, r1, r8, lsr r4
   156b8:	andeq	r5, r1, r8, lsr r4
   156bc:	andeq	r5, r1, r8, lsr r4
   156c0:	andeq	r5, r1, r8, lsr r4
   156c4:	andeq	r5, r1, r8, lsr r4
   156c8:	andeq	r5, r1, r8, lsr r4
   156cc:	andeq	r5, r1, r8, lsr r4
   156d0:	andeq	r5, r1, r8, lsr r4
   156d4:	andeq	r5, r1, r8, lsr r4
   156d8:	andeq	r5, r1, r8, lsr r4
   156dc:	andeq	r5, r1, r8, lsr r4
   156e0:	andeq	r5, r1, r8, lsr r4
   156e4:	andeq	r5, r1, r8, lsr r4
   156e8:	andeq	r5, r1, r8, lsr r4
   156ec:	andeq	r5, r1, r8, lsr r4
   156f0:	andeq	r5, r1, r8, lsr r4
   156f4:	andeq	r5, r1, r8, lsr r4
   156f8:	andeq	r5, r1, r8, lsr r4
   156fc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15700:	andeq	r5, r1, r0, lsr #7
   15704:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15708:			; <UNDEFINED> instruction: 0x00014fb0
   1570c:	mov	r3, #116	; 0x74
   15710:	b	151e0 <__assert_fail@plt+0x3d28>
   15714:	ldr	r3, [sp, #160]	; 0xa0
   15718:	cmp	r3, #0
   1571c:	beq	14fec <__assert_fail@plt+0x3b34>
   15720:	lsr	r3, r4, #5
   15724:	ldr	r0, [sp, #160]	; 0xa0
   15728:	uxtb	r3, r3
   1572c:	and	r1, r4, #31
   15730:	ldr	r0, [r0, r3, lsl #2]
   15734:	lsr	r3, r0, r1
   15738:	tst	r3, #1
   1573c:	beq	14fec <__assert_fail@plt+0x3b34>
   15740:	ldr	r3, [sp, #28]
   15744:	cmp	r3, #0
   15748:	beq	1514c <__assert_fail@plt+0x3c94>
   1574c:	ldr	sl, [sp, #32]
   15750:	mov	r8, fp
   15754:	b	15210 <__assert_fail@plt+0x3d58>
   15758:	ldr	r3, [sp, #28]
   1575c:	cmp	r3, #0
   15760:	bne	15cb4 <__assert_fail@plt+0x47fc>
   15764:	add	sl, sl, #1
   15768:	ldr	r6, [sp, #40]	; 0x28
   1576c:	mov	r5, #0
   15770:	mov	r4, #92	; 0x5c
   15774:	b	15008 <__assert_fail@plt+0x3b50>
   15778:	cmp	r9, r8
   1577c:	bne	159ec <__assert_fail@plt+0x4534>
   15780:	ldr	r0, [sp, #100]	; 0x64
   15784:	bl	11224 <iswprint@plt>
   15788:	add	r5, r5, r4
   1578c:	cmp	r0, #0
   15790:	add	r0, sp, #104	; 0x68
   15794:	moveq	r6, #0
   15798:	bl	111ac <mbsinit@plt>
   1579c:	cmp	r0, #0
   157a0:	beq	15980 <__assert_fail@plt+0x44c8>
   157a4:	mov	r2, r6
   157a8:	mov	ip, r5
   157ac:	eor	r5, r2, #1
   157b0:	ldr	r4, [sp, #80]	; 0x50
   157b4:	ldr	r6, [sp, #84]	; 0x54
   157b8:	ldr	r7, [sp, #88]	; 0x58
   157bc:	uxtb	r5, r5
   157c0:	cmp	ip, #1
   157c4:	bls	15cc4 <__assert_fail@plt+0x480c>
   157c8:	ldr	r3, [sp, #44]	; 0x2c
   157cc:	and	r8, r3, r5
   157d0:	mov	r5, r2
   157d4:	uxtb	r8, r8
   157d8:	add	r2, sl, ip
   157dc:	ldr	r0, [sp, #48]	; 0x30
   157e0:	mov	r1, #0
   157e4:	str	r5, [sp, #48]	; 0x30
   157e8:	ldr	r9, [sp, #28]
   157ec:	ldr	ip, [sp, #40]	; 0x28
   157f0:	ldr	r3, [sp, #32]
   157f4:	ldr	r5, [sp, #152]	; 0x98
   157f8:	b	158b4 <__assert_fail@plt+0x43fc>
   157fc:	cmp	r9, #0
   15800:	bne	15bd8 <__assert_fail@plt+0x4720>
   15804:	eor	r1, ip, #1
   15808:	cmp	r5, #2
   1580c:	movne	r1, #0
   15810:	andeq	r1, r1, #1
   15814:	cmp	r1, #0
   15818:	beq	15850 <__assert_fail@plt+0x4398>
   1581c:	cmp	fp, r7
   15820:	movhi	ip, #39	; 0x27
   15824:	strbhi	ip, [r3, r7]
   15828:	add	ip, r7, #1
   1582c:	cmp	fp, ip
   15830:	movhi	lr, #36	; 0x24
   15834:	strbhi	lr, [r3, ip]
   15838:	add	ip, r7, #2
   1583c:	cmp	fp, ip
   15840:	movhi	lr, #39	; 0x27
   15844:	strbhi	lr, [r3, ip]
   15848:	add	r7, r7, #3
   1584c:	mov	ip, r1
   15850:	cmp	fp, r7
   15854:	movhi	r1, #92	; 0x5c
   15858:	strbhi	r1, [r3, r7]
   1585c:	add	r1, r7, #1
   15860:	cmp	fp, r1
   15864:	lsrhi	lr, r4, #6
   15868:	addhi	lr, lr, #48	; 0x30
   1586c:	strbhi	lr, [r3, r1]
   15870:	add	lr, r7, #2
   15874:	cmp	fp, lr
   15878:	lsrhi	r1, r4, #3
   1587c:	andhi	r1, r1, #7
   15880:	addhi	r1, r1, #48	; 0x30
   15884:	add	sl, sl, #1
   15888:	strbhi	r1, [r3, lr]
   1588c:	and	r4, r4, #7
   15890:	cmp	r2, sl
   15894:	add	r4, r4, #48	; 0x30
   15898:	add	r7, r7, #3
   1589c:	bls	15bfc <__assert_fail@plt+0x4744>
   158a0:	mov	r1, r8
   158a4:	cmp	fp, r7
   158a8:	strbhi	r4, [r3, r7]
   158ac:	ldrb	r4, [r0, #1]!
   158b0:	add	r7, r7, #1
   158b4:	cmp	r8, #0
   158b8:	bne	157fc <__assert_fail@plt+0x4344>
   158bc:	cmp	r6, #0
   158c0:	bne	15910 <__assert_fail@plt+0x4458>
   158c4:	eor	r6, r1, #1
   158c8:	and	r6, r6, ip
   158cc:	add	sl, sl, #1
   158d0:	cmp	r2, sl
   158d4:	uxtb	r6, r6
   158d8:	bls	15938 <__assert_fail@plt+0x4480>
   158dc:	cmp	r6, #0
   158e0:	beq	158a4 <__assert_fail@plt+0x43ec>
   158e4:	cmp	fp, r7
   158e8:	movhi	ip, #39	; 0x27
   158ec:	strbhi	ip, [r3, r7]
   158f0:	add	ip, r7, #1
   158f4:	cmp	fp, ip
   158f8:	movhi	lr, #39	; 0x27
   158fc:	strbhi	lr, [r3, ip]
   15900:	add	r7, r7, #2
   15904:	mov	r6, r8
   15908:	mov	ip, r8
   1590c:	b	158a4 <__assert_fail@plt+0x43ec>
   15910:	cmp	fp, r7
   15914:	eor	r6, r1, #1
   15918:	movhi	lr, #92	; 0x5c
   1591c:	and	r6, r6, ip
   15920:	add	sl, sl, #1
   15924:	strbhi	lr, [r3, r7]
   15928:	cmp	r2, sl
   1592c:	add	r7, r7, #1
   15930:	uxtb	r6, r6
   15934:	bhi	158dc <__assert_fail@plt+0x4424>
   15938:	str	ip, [sp, #40]	; 0x28
   1593c:	ldr	r5, [sp, #48]	; 0x30
   15940:	b	15008 <__assert_fail@plt+0x3b50>
   15944:	ldr	r3, [sp, #24]
   15948:	cmn	r3, #1
   1594c:	mov	r3, #0
   15950:	str	r3, [sp, #104]	; 0x68
   15954:	str	r3, [sp, #108]	; 0x6c
   15958:	beq	15c78 <__assert_fail@plt+0x47c0>
   1595c:	mov	r2, r5
   15960:	mov	r3, #0
   15964:	str	r7, [sp, #88]	; 0x58
   15968:	ldr	r7, [sp, #152]	; 0x98
   1596c:	str	r5, [sp, #92]	; 0x5c
   15970:	str	r6, [sp, #84]	; 0x54
   15974:	mov	r5, r3
   15978:	mov	r6, r2
   1597c:	str	r4, [sp, #80]	; 0x50
   15980:	ldr	r3, [sp, #56]	; 0x38
   15984:	add	r9, sl, r5
   15988:	add	r8, r3, r9
   1598c:	ldr	r3, [sp, #24]
   15990:	mov	r1, r8
   15994:	sub	r2, r3, r9
   15998:	add	r0, sp, #100	; 0x64
   1599c:	add	r3, sp, #104	; 0x68
   159a0:	bl	18938 <__assert_fail@plt+0x7480>
   159a4:	subs	r4, r0, #0
   159a8:	beq	15d50 <__assert_fail@plt+0x4898>
   159ac:	cmn	r4, #1
   159b0:	beq	15d30 <__assert_fail@plt+0x4878>
   159b4:	cmn	r4, #2
   159b8:	beq	15cd0 <__assert_fail@plt+0x4818>
   159bc:	ldr	r2, [sp, #28]
   159c0:	cmp	r7, #2
   159c4:	movne	r2, #0
   159c8:	andeq	r2, r2, #1
   159cc:	cmp	r2, #0
   159d0:	beq	15780 <__assert_fail@plt+0x42c8>
   159d4:	cmp	r4, #1
   159d8:	beq	15780 <__assert_fail@plt+0x42c8>
   159dc:	sub	r3, r4, #1
   159e0:	add	r9, r3, r9
   159e4:	ldr	r3, [sp, #56]	; 0x38
   159e8:	add	r9, r3, r9
   159ec:	ldrb	r3, [r8, #1]!
   159f0:	sub	r3, r3, #91	; 0x5b
   159f4:	cmp	r3, #33	; 0x21
   159f8:	ldrls	pc, [pc, r3, lsl #2]
   159fc:	b	15778 <__assert_fail@plt+0x42c0>
   15a00:	andeq	r5, r1, r8, lsl #21
   15a04:	andeq	r5, r1, r8, lsl #21
   15a08:	andeq	r5, r1, r8, ror r7
   15a0c:	andeq	r5, r1, r8, lsl #21
   15a10:	andeq	r5, r1, r8, ror r7
   15a14:	andeq	r5, r1, r8, lsl #21
   15a18:	andeq	r5, r1, r8, ror r7
   15a1c:	andeq	r5, r1, r8, ror r7
   15a20:	andeq	r5, r1, r8, ror r7
   15a24:	andeq	r5, r1, r8, ror r7
   15a28:	andeq	r5, r1, r8, ror r7
   15a2c:	andeq	r5, r1, r8, ror r7
   15a30:	andeq	r5, r1, r8, ror r7
   15a34:	andeq	r5, r1, r8, ror r7
   15a38:	andeq	r5, r1, r8, ror r7
   15a3c:	andeq	r5, r1, r8, ror r7
   15a40:	andeq	r5, r1, r8, ror r7
   15a44:	andeq	r5, r1, r8, ror r7
   15a48:	andeq	r5, r1, r8, ror r7
   15a4c:	andeq	r5, r1, r8, ror r7
   15a50:	andeq	r5, r1, r8, ror r7
   15a54:	andeq	r5, r1, r8, ror r7
   15a58:	andeq	r5, r1, r8, ror r7
   15a5c:	andeq	r5, r1, r8, ror r7
   15a60:	andeq	r5, r1, r8, ror r7
   15a64:	andeq	r5, r1, r8, ror r7
   15a68:	andeq	r5, r1, r8, ror r7
   15a6c:	andeq	r5, r1, r8, ror r7
   15a70:	andeq	r5, r1, r8, ror r7
   15a74:	andeq	r5, r1, r8, ror r7
   15a78:	andeq	r5, r1, r8, ror r7
   15a7c:	andeq	r5, r1, r8, ror r7
   15a80:	andeq	r5, r1, r8, ror r7
   15a84:	andeq	r5, r1, r8, lsl #21
   15a88:	mov	r3, #2
   15a8c:	ldr	sl, [sp, #32]
   15a90:	mov	r8, fp
   15a94:	str	r3, [sp, #152]	; 0x98
   15a98:	b	15210 <__assert_fail@plt+0x3d58>
   15a9c:	ldr	r3, [sp, #156]	; 0x9c
   15aa0:	tst	r3, #1
   15aa4:	bne	15bd0 <__assert_fail@plt+0x4718>
   15aa8:	ldr	r3, [sp, #152]	; 0x98
   15aac:	ldr	r4, [sp, #44]	; 0x2c
   15ab0:	sub	r2, r3, #2
   15ab4:	mov	r5, #0
   15ab8:	clz	r2, r2
   15abc:	mov	r8, r4
   15ac0:	lsr	r2, r2, #5
   15ac4:	b	14fd0 <__assert_fail@plt+0x3b18>
   15ac8:	ldr	r3, [sp, #156]	; 0x9c
   15acc:	ands	r9, r3, #4
   15ad0:	beq	15c08 <__assert_fail@plt+0x4750>
   15ad4:	ldr	r2, [sp, #24]
   15ad8:	add	r3, sl, #2
   15adc:	cmp	r3, r2
   15ae0:	bcs	15af4 <__assert_fail@plt+0x463c>
   15ae4:	ldr	r2, [sp, #48]	; 0x30
   15ae8:	ldrb	r4, [r2, #1]
   15aec:	cmp	r4, #63	; 0x3f
   15af0:	beq	15d90 <__assert_fail@plt+0x48d8>
   15af4:	mov	r2, #0
   15af8:	mov	r8, r2
   15afc:	mov	r5, r2
   15b00:	mov	r4, #63	; 0x3f
   15b04:	b	14fd0 <__assert_fail@plt+0x3b18>
   15b08:	ldr	r3, [sp, #28]
   15b0c:	cmp	r3, #0
   15b10:	bne	15e34 <__assert_fail@plt+0x497c>
   15b14:	mov	r2, r5
   15b18:	mov	r8, r3
   15b1c:	mov	r5, #0
   15b20:	mov	r4, #63	; 0x3f
   15b24:	b	14fd0 <__assert_fail@plt+0x3b18>
   15b28:	ldr	r3, [sp, #28]
   15b2c:	cmp	r3, #0
   15b30:	bne	15e34 <__assert_fail@plt+0x497c>
   15b34:	ldr	r2, [sp, #72]	; 0x48
   15b38:	adds	r3, fp, #0
   15b3c:	movne	r3, #1
   15b40:	cmp	r2, #0
   15b44:	movne	r3, #0
   15b48:	cmp	r3, #0
   15b4c:	strne	fp, [sp, #72]	; 0x48
   15b50:	movne	fp, #0
   15b54:	bne	15b90 <__assert_fail@plt+0x46d8>
   15b58:	cmp	fp, r7
   15b5c:	movhi	r2, #39	; 0x27
   15b60:	ldrhi	r3, [sp, #32]
   15b64:	strbhi	r2, [r3, r7]
   15b68:	add	r3, r7, #1
   15b6c:	cmp	fp, r3
   15b70:	movhi	r1, #92	; 0x5c
   15b74:	ldrhi	r2, [sp, #32]
   15b78:	strbhi	r1, [r2, r3]
   15b7c:	add	r3, r7, #2
   15b80:	cmp	fp, r3
   15b84:	movhi	r1, #39	; 0x27
   15b88:	ldrhi	r2, [sp, #32]
   15b8c:	strbhi	r1, [r2, r3]
   15b90:	ldr	r3, [sp, #28]
   15b94:	add	r7, r7, #3
   15b98:	mov	r2, r5
   15b9c:	mov	r8, r3
   15ba0:	str	r5, [sp, #68]	; 0x44
   15ba4:	str	r3, [sp, #40]	; 0x28
   15ba8:	mov	r4, #39	; 0x27
   15bac:	b	14fd0 <__assert_fail@plt+0x3b18>
   15bb0:	ldr	r3, [sp, #56]	; 0x38
   15bb4:	ldrb	r3, [r3, #1]
   15bb8:	adds	r3, r3, #0
   15bbc:	movne	r3, #1
   15bc0:	b	14fa8 <__assert_fail@plt+0x3af0>
   15bc4:	ldr	r5, [sp, #28]
   15bc8:	mov	r4, #48	; 0x30
   15bcc:	b	14fd0 <__assert_fail@plt+0x3b18>
   15bd0:	add	sl, sl, #1
   15bd4:	b	14b00 <__assert_fail@plt+0x3648>
   15bd8:	mov	sl, r3
   15bdc:	ldr	r3, [sp, #28]
   15be0:	mov	r8, fp
   15be4:	str	r3, [sp, #44]	; 0x2c
   15be8:	ldr	r3, [sp, #152]	; 0x98
   15bec:	sub	r2, r3, #2
   15bf0:	clz	r2, r2
   15bf4:	lsr	r2, r2, #5
   15bf8:	b	15210 <__assert_fail@plt+0x3d58>
   15bfc:	str	ip, [sp, #40]	; 0x28
   15c00:	ldr	r5, [sp, #48]	; 0x30
   15c04:	b	15040 <__assert_fail@plt+0x3b88>
   15c08:	mov	r2, r9
   15c0c:	mov	r8, r9
   15c10:	mov	r5, #0
   15c14:	mov	r4, #63	; 0x3f
   15c18:	b	14fd0 <__assert_fail@plt+0x3b18>
   15c1c:	cmp	fp, #0
   15c20:	beq	15c98 <__assert_fail@plt+0x47e0>
   15c24:	ldr	r1, [sp, #32]
   15c28:	mov	r3, #34	; 0x22
   15c2c:	mov	r2, #1
   15c30:	strb	r3, [r1]
   15c34:	ldr	r3, [pc, #332]	; 15d88 <__assert_fail@plt+0x48d0>
   15c38:	str	r2, [sp, #52]	; 0x34
   15c3c:	mov	r7, r2
   15c40:	str	r2, [sp, #44]	; 0x2c
   15c44:	str	r3, [sp, #64]	; 0x40
   15c48:	b	14af0 <__assert_fail@plt+0x3638>
   15c4c:	ldr	r3, [pc, #300]	; 15d80 <__assert_fail@plt+0x48c8>
   15c50:	str	r3, [sp, #64]	; 0x40
   15c54:	mov	r3, #0
   15c58:	str	r3, [sp, #28]
   15c5c:	mov	r3, #1
   15c60:	str	r3, [sp, #52]	; 0x34
   15c64:	mov	r7, r3
   15c68:	mov	r3, #2
   15c6c:	str	r3, [sp, #152]	; 0x98
   15c70:	b	14af0 <__assert_fail@plt+0x3638>
   15c74:	bl	114a0 <abort@plt>
   15c78:	ldr	r0, [sp, #56]	; 0x38
   15c7c:	bl	11314 <strlen@plt>
   15c80:	str	r0, [sp, #24]
   15c84:	b	1595c <__assert_fail@plt+0x44a4>
   15c88:	mov	r5, r8
   15c8c:	mov	r4, #48	; 0x30
   15c90:	ldr	r8, [sp, #44]	; 0x2c
   15c94:	b	14fd0 <__assert_fail@plt+0x3b18>
   15c98:	mov	r3, #1
   15c9c:	str	r3, [sp, #52]	; 0x34
   15ca0:	mov	r7, r3
   15ca4:	str	r3, [sp, #44]	; 0x2c
   15ca8:	ldr	r3, [pc, #216]	; 15d88 <__assert_fail@plt+0x48d0>
   15cac:	str	r3, [sp, #64]	; 0x40
   15cb0:	b	14af0 <__assert_fail@plt+0x3638>
   15cb4:	ldr	sl, [sp, #32]
   15cb8:	mov	r8, fp
   15cbc:	mov	r2, r3
   15cc0:	b	15210 <__assert_fail@plt+0x3d58>
   15cc4:	mov	r3, r5
   15cc8:	mov	r5, r2
   15ccc:	b	154c8 <__assert_fail@plt+0x4010>
   15cd0:	ldr	r1, [sp, #24]
   15cd4:	mov	r2, r5
   15cd8:	cmp	r1, r9
   15cdc:	mov	ip, r5
   15ce0:	ldr	r4, [sp, #80]	; 0x50
   15ce4:	ldr	r5, [sp, #92]	; 0x5c
   15ce8:	ldr	r6, [sp, #84]	; 0x54
   15cec:	ldr	r7, [sp, #88]	; 0x58
   15cf0:	bls	15d24 <__assert_fail@plt+0x486c>
   15cf4:	ldrb	r3, [r8]
   15cf8:	cmp	r3, #0
   15cfc:	bne	15d10 <__assert_fail@plt+0x4858>
   15d00:	b	15d28 <__assert_fail@plt+0x4870>
   15d04:	ldrb	r3, [r8, #1]!
   15d08:	cmp	r3, #0
   15d0c:	beq	15e28 <__assert_fail@plt+0x4970>
   15d10:	add	r2, r2, #1
   15d14:	add	r3, sl, r2
   15d18:	cmp	r1, r3
   15d1c:	bhi	15d04 <__assert_fail@plt+0x484c>
   15d20:	mov	ip, r2
   15d24:	mov	r3, #0
   15d28:	mov	r2, r3
   15d2c:	b	157c0 <__assert_fail@plt+0x4308>
   15d30:	mov	r3, #0
   15d34:	mov	ip, r5
   15d38:	ldr	r4, [sp, #80]	; 0x50
   15d3c:	ldr	r5, [sp, #92]	; 0x5c
   15d40:	ldr	r6, [sp, #84]	; 0x54
   15d44:	ldr	r7, [sp, #88]	; 0x58
   15d48:	mov	r2, r3
   15d4c:	b	157c0 <__assert_fail@plt+0x4308>
   15d50:	mov	r3, r6
   15d54:	mov	ip, r5
   15d58:	eor	r5, r3, #1
   15d5c:	mov	r2, r6
   15d60:	ldr	r4, [sp, #80]	; 0x50
   15d64:	ldr	r6, [sp, #84]	; 0x54
   15d68:	ldr	r7, [sp, #88]	; 0x58
   15d6c:	uxtb	r5, r5
   15d70:	b	157c0 <__assert_fail@plt+0x4308>
   15d74:	ldr	sl, [sp, #32]
   15d78:	mov	r8, fp
   15d7c:	b	15be4 <__assert_fail@plt+0x472c>
   15d80:	ldrdeq	sl, [r1], -r0
   15d84:	ldrdeq	sl, [r1], -r4
   15d88:	andeq	sl, r1, ip, asr #11
   15d8c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15d90:	ldr	r2, [sp, #56]	; 0x38
   15d94:	ldrb	r1, [r2, r3]
   15d98:	sub	r2, r1, #33	; 0x21
   15d9c:	uxtb	r2, r2
   15da0:	cmp	r2, #29
   15da4:	bhi	15e44 <__assert_fail@plt+0x498c>
   15da8:	ldr	r0, [pc, #-36]	; 15d8c <__assert_fail@plt+0x48d4>
   15dac:	mov	ip, #1
   15db0:	ands	r2, r0, ip, lsl r2
   15db4:	beq	15e54 <__assert_fail@plt+0x499c>
   15db8:	ldr	r2, [sp, #28]
   15dbc:	cmp	r2, #0
   15dc0:	bne	15f54 <__assert_fail@plt+0x4a9c>
   15dc4:	cmp	fp, r7
   15dc8:	ldr	r8, [sp, #28]
   15dcc:	ldrhi	r2, [sp, #32]
   15dd0:	mov	sl, r3
   15dd4:	mov	r5, r8
   15dd8:	strbhi	r4, [r2, r7]
   15ddc:	add	r2, r7, #1
   15de0:	cmp	fp, r2
   15de4:	movhi	r0, #34	; 0x22
   15de8:	ldrhi	ip, [sp, #32]
   15dec:	mov	r4, r1
   15df0:	strbhi	r0, [ip, r2]
   15df4:	add	r2, r7, #2
   15df8:	cmp	fp, r2
   15dfc:	movhi	r0, #34	; 0x22
   15e00:	ldrhi	ip, [sp, #32]
   15e04:	strbhi	r0, [ip, r2]
   15e08:	add	r2, r7, #3
   15e0c:	cmp	fp, r2
   15e10:	movhi	r0, #63	; 0x3f
   15e14:	ldrhi	ip, [sp, #32]
   15e18:	add	r7, r7, #4
   15e1c:	strbhi	r0, [ip, r2]
   15e20:	mov	r2, r8
   15e24:	b	14fd0 <__assert_fail@plt+0x3b18>
   15e28:	mov	ip, r2
   15e2c:	mov	r2, r3
   15e30:	b	157c0 <__assert_fail@plt+0x4308>
   15e34:	ldr	sl, [sp, #32]
   15e38:	mov	r8, fp
   15e3c:	ldr	r2, [sp, #28]
   15e40:	b	15210 <__assert_fail@plt+0x3d58>
   15e44:	mov	r2, #0
   15e48:	mov	r8, r2
   15e4c:	mov	r5, r2
   15e50:	b	14fd0 <__assert_fail@plt+0x3b18>
   15e54:	mov	r8, r2
   15e58:	mov	r5, #0
   15e5c:	b	14fd0 <__assert_fail@plt+0x3b18>
   15e60:	ldr	r1, [sp, #152]	; 0x98
   15e64:	bl	1492c <__assert_fail@plt+0x3474>
   15e68:	str	r0, [sp, #168]	; 0xa8
   15e6c:	b	14e8c <__assert_fail@plt+0x39d4>
   15e70:	ldr	r1, [sp, #152]	; 0x98
   15e74:	bl	1492c <__assert_fail@plt+0x3474>
   15e78:	str	r0, [sp, #164]	; 0xa4
   15e7c:	b	14e6c <__assert_fail@plt+0x39b4>
   15e80:	ldr	r7, [sp, #28]
   15e84:	b	14ecc <__assert_fail@plt+0x3a14>
   15e88:	ldr	sl, [sp, #32]
   15e8c:	ldr	r2, [sp, #68]	; 0x44
   15e90:	mov	r8, fp
   15e94:	mov	fp, r7
   15e98:	ldr	r3, [sp, #64]	; 0x40
   15e9c:	cmp	r3, #0
   15ea0:	moveq	r2, #0
   15ea4:	andne	r2, r2, #1
   15ea8:	cmp	r2, #0
   15eac:	beq	15ed8 <__assert_fail@plt+0x4a20>
   15eb0:	mov	r2, r3
   15eb4:	ldrb	r3, [r3]
   15eb8:	cmp	r3, #0
   15ebc:	beq	15ed8 <__assert_fail@plt+0x4a20>
   15ec0:	cmp	r8, fp
   15ec4:	strbhi	r3, [sl, fp]
   15ec8:	ldrb	r3, [r2, #1]!
   15ecc:	add	fp, fp, #1
   15ed0:	cmp	r3, #0
   15ed4:	bne	15ec0 <__assert_fail@plt+0x4a08>
   15ed8:	cmp	r8, fp
   15edc:	movhi	r3, #0
   15ee0:	strbhi	r3, [sl, fp]
   15ee4:	b	1526c <__assert_fail@plt+0x3db4>
   15ee8:	ldr	r3, [sp, #168]	; 0xa8
   15eec:	ldr	sl, [sp, #32]
   15ef0:	str	r3, [sp, #16]
   15ef4:	ldr	r3, [sp, #164]	; 0xa4
   15ef8:	mov	ip, #5
   15efc:	str	r3, [sp, #12]
   15f00:	ldr	r3, [sp, #160]	; 0xa0
   15f04:	ldr	r2, [sp, #56]	; 0x38
   15f08:	str	r3, [sp, #8]
   15f0c:	ldr	r3, [sp, #156]	; 0x9c
   15f10:	ldr	r1, [sp, #72]	; 0x48
   15f14:	str	r3, [sp, #4]
   15f18:	mov	r0, sl
   15f1c:	ldr	r3, [sp, #24]
   15f20:	str	ip, [sp]
   15f24:	bl	14a4c <__assert_fail@plt+0x3594>
   15f28:	mov	fp, r0
   15f2c:	b	1526c <__assert_fail@plt+0x3db4>
   15f30:	mov	r8, fp
   15f34:	ldr	sl, [sp, #32]
   15f38:	mov	fp, r7
   15f3c:	mov	r2, r3
   15f40:	b	15e98 <__assert_fail@plt+0x49e0>
   15f44:	mov	r8, fp
   15f48:	ldr	sl, [sp, #32]
   15f4c:	mov	fp, r7
   15f50:	b	15e98 <__assert_fail@plt+0x49e0>
   15f54:	ldr	sl, [sp, #32]
   15f58:	mov	r8, fp
   15f5c:	b	15228 <__assert_fail@plt+0x3d70>
   15f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f64:	sub	sp, sp, #52	; 0x34
   15f68:	mov	r4, r0
   15f6c:	mov	r5, r3
   15f70:	mov	sl, r1
   15f74:	mov	fp, r2
   15f78:	bl	11338 <__errno_location@plt>
   15f7c:	ldr	r7, [pc, #412]	; 16120 <__assert_fail@plt+0x4c68>
   15f80:	cmn	r4, #-2147483647	; 0x80000001
   15f84:	ldr	r6, [r7]
   15f88:	mov	r8, r0
   15f8c:	movne	r0, #0
   15f90:	moveq	r0, #1
   15f94:	ldr	r3, [r8]
   15f98:	orrs	r0, r0, r4, lsr #31
   15f9c:	str	r3, [sp, #24]
   15fa0:	bne	1611c <__assert_fail@plt+0x4c64>
   15fa4:	ldr	r2, [r7, #4]
   15fa8:	cmp	r4, r2
   15fac:	blt	1600c <__assert_fail@plt+0x4b54>
   15fb0:	add	r9, r7, #8
   15fb4:	cmp	r6, r9
   15fb8:	str	r2, [sp, #44]	; 0x2c
   15fbc:	beq	160ec <__assert_fail@plt+0x4c34>
   15fc0:	mov	r3, #8
   15fc4:	sub	r2, r4, r2
   15fc8:	mov	r0, r6
   15fcc:	str	r3, [sp]
   15fd0:	add	r2, r2, #1
   15fd4:	mvn	r3, #-2147483648	; 0x80000000
   15fd8:	add	r1, sp, #44	; 0x2c
   15fdc:	bl	179f8 <__assert_fail@plt+0x6540>
   15fe0:	mov	r6, r0
   15fe4:	str	r0, [r7]
   15fe8:	ldr	r0, [r7, #4]
   15fec:	ldr	r2, [sp, #44]	; 0x2c
   15ff0:	mov	r1, #0
   15ff4:	sub	r2, r2, r0
   15ff8:	add	r0, r6, r0, lsl #3
   15ffc:	lsl	r2, r2, #3
   16000:	bl	11368 <memset@plt>
   16004:	ldr	r3, [sp, #44]	; 0x2c
   16008:	str	r3, [r7, #4]
   1600c:	add	r3, r6, r4, lsl #3
   16010:	ldr	r1, [r5, #4]
   16014:	ldr	r7, [r3, #4]
   16018:	ldr	r9, [r6, r4, lsl #3]
   1601c:	ldr	r2, [r5, #40]	; 0x28
   16020:	ldr	ip, [r5, #44]	; 0x2c
   16024:	add	r0, r5, #8
   16028:	str	r3, [sp, #28]
   1602c:	ldr	r3, [r5]
   16030:	orr	r1, r1, #1
   16034:	mov	lr, r0
   16038:	str	r1, [sp, #32]
   1603c:	str	r0, [sp, #36]	; 0x24
   16040:	str	r1, [sp, #4]
   16044:	str	r2, [sp, #12]
   16048:	str	r3, [sp]
   1604c:	mov	r0, r7
   16050:	mov	r1, r9
   16054:	str	ip, [sp, #16]
   16058:	str	lr, [sp, #8]
   1605c:	mov	r3, fp
   16060:	mov	r2, sl
   16064:	bl	14a4c <__assert_fail@plt+0x3594>
   16068:	cmp	r9, r0
   1606c:	bhi	160d8 <__assert_fail@plt+0x4c20>
   16070:	ldr	r3, [pc, #172]	; 16124 <__assert_fail@plt+0x4c6c>
   16074:	add	r9, r0, #1
   16078:	cmp	r7, r3
   1607c:	str	r9, [r6, r4, lsl #3]
   16080:	beq	1608c <__assert_fail@plt+0x4bd4>
   16084:	mov	r0, r7
   16088:	bl	13b84 <__assert_fail@plt+0x26cc>
   1608c:	mov	r0, r9
   16090:	bl	17894 <__assert_fail@plt+0x63dc>
   16094:	ldr	lr, [sp, #28]
   16098:	ldr	ip, [r5, #44]	; 0x2c
   1609c:	ldr	r4, [r5, #40]	; 0x28
   160a0:	mov	r3, fp
   160a4:	mov	r2, sl
   160a8:	mov	r1, r9
   160ac:	str	r0, [lr, #4]
   160b0:	ldr	lr, [r5]
   160b4:	ldr	r5, [sp, #36]	; 0x24
   160b8:	str	ip, [sp, #16]
   160bc:	str	r5, [sp, #8]
   160c0:	ldr	r5, [sp, #32]
   160c4:	str	r4, [sp, #12]
   160c8:	str	r5, [sp, #4]
   160cc:	str	lr, [sp]
   160d0:	mov	r7, r0
   160d4:	bl	14a4c <__assert_fail@plt+0x3594>
   160d8:	ldr	r3, [sp, #24]
   160dc:	mov	r0, r7
   160e0:	str	r3, [r8]
   160e4:	add	sp, sp, #52	; 0x34
   160e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160ec:	mov	r3, #8
   160f0:	sub	r2, r4, r2
   160f4:	str	r3, [sp]
   160f8:	add	r1, sp, #44	; 0x2c
   160fc:	add	r2, r2, #1
   16100:	mvn	r3, #-2147483648	; 0x80000000
   16104:	bl	179f8 <__assert_fail@plt+0x6540>
   16108:	mov	r6, r0
   1610c:	ldm	r9, {r0, r1}
   16110:	str	r6, [r7]
   16114:	stm	r6, {r0, r1}
   16118:	b	15fe8 <__assert_fail@plt+0x4b30>
   1611c:	bl	114a0 <abort@plt>
   16120:	andeq	fp, r2, ip, asr r1
   16124:	ldrdeq	fp, [r2], -r4
   16128:	push	{r4, r5, r6, lr}
   1612c:	mov	r5, r0
   16130:	bl	11338 <__errno_location@plt>
   16134:	cmp	r5, #0
   16138:	mov	r1, #48	; 0x30
   1613c:	mov	r4, r0
   16140:	ldr	r0, [pc, #16]	; 16158 <__assert_fail@plt+0x4ca0>
   16144:	ldr	r6, [r4]
   16148:	movne	r0, r5
   1614c:	bl	17cf4 <__assert_fail@plt+0x683c>
   16150:	str	r6, [r4]
   16154:	pop	{r4, r5, r6, pc}
   16158:	ldrdeq	fp, [r2], -r4
   1615c:	ldr	r3, [pc, #12]	; 16170 <__assert_fail@plt+0x4cb8>
   16160:	cmp	r0, #0
   16164:	moveq	r0, r3
   16168:	ldr	r0, [r0]
   1616c:	bx	lr
   16170:	ldrdeq	fp, [r2], -r4
   16174:	ldr	r3, [pc, #12]	; 16188 <__assert_fail@plt+0x4cd0>
   16178:	cmp	r0, #0
   1617c:	moveq	r0, r3
   16180:	str	r1, [r0]
   16184:	bx	lr
   16188:	ldrdeq	fp, [r2], -r4
   1618c:	ldr	r3, [pc, #52]	; 161c8 <__assert_fail@plt+0x4d10>
   16190:	cmp	r0, #0
   16194:	moveq	r0, r3
   16198:	add	r3, r0, #8
   1619c:	push	{lr}		; (str lr, [sp, #-4]!)
   161a0:	lsr	lr, r1, #5
   161a4:	and	r1, r1, #31
   161a8:	ldr	ip, [r3, lr, lsl #2]
   161ac:	lsr	r0, ip, r1
   161b0:	eor	r2, r2, r0
   161b4:	and	r2, r2, #1
   161b8:	and	r0, r0, #1
   161bc:	eor	r1, ip, r2, lsl r1
   161c0:	str	r1, [r3, lr, lsl #2]
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	ldrdeq	fp, [r2], -r4
   161cc:	ldr	r3, [pc, #16]	; 161e4 <__assert_fail@plt+0x4d2c>
   161d0:	cmp	r0, #0
   161d4:	movne	r3, r0
   161d8:	ldr	r0, [r3, #4]
   161dc:	str	r1, [r3, #4]
   161e0:	bx	lr
   161e4:	ldrdeq	fp, [r2], -r4
   161e8:	ldr	r3, [pc, #44]	; 1621c <__assert_fail@plt+0x4d64>
   161ec:	cmp	r0, #0
   161f0:	moveq	r0, r3
   161f4:	mov	ip, #10
   161f8:	cmp	r2, #0
   161fc:	cmpne	r1, #0
   16200:	str	ip, [r0]
   16204:	beq	16214 <__assert_fail@plt+0x4d5c>
   16208:	str	r1, [r0, #40]	; 0x28
   1620c:	str	r2, [r0, #44]	; 0x2c
   16210:	bx	lr
   16214:	push	{r4, lr}
   16218:	bl	114a0 <abort@plt>
   1621c:	ldrdeq	fp, [r2], -r4
   16220:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16224:	sub	sp, sp, #24
   16228:	ldr	ip, [pc, #108]	; 1629c <__assert_fail@plt+0x4de4>
   1622c:	ldr	r4, [sp, #56]	; 0x38
   16230:	mov	r9, r2
   16234:	cmp	r4, #0
   16238:	moveq	r4, ip
   1623c:	mov	sl, r3
   16240:	mov	r7, r0
   16244:	mov	r8, r1
   16248:	bl	11338 <__errno_location@plt>
   1624c:	ldr	r3, [r4, #44]	; 0x2c
   16250:	mov	r1, r8
   16254:	ldr	r6, [r0]
   16258:	str	r3, [sp, #16]
   1625c:	ldr	r2, [r4, #40]	; 0x28
   16260:	add	r3, r4, #8
   16264:	str	r3, [sp, #8]
   16268:	str	r2, [sp, #12]
   1626c:	ldr	r2, [r4, #4]
   16270:	mov	r5, r0
   16274:	str	r2, [sp, #4]
   16278:	ldr	ip, [r4]
   1627c:	mov	r3, sl
   16280:	mov	r2, r9
   16284:	mov	r0, r7
   16288:	str	ip, [sp]
   1628c:	bl	14a4c <__assert_fail@plt+0x3594>
   16290:	str	r6, [r5]
   16294:	add	sp, sp, #24
   16298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1629c:	ldrdeq	fp, [r2], -r4
   162a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a4:	cmp	r3, #0
   162a8:	sub	sp, sp, #44	; 0x2c
   162ac:	ldr	r4, [pc, #192]	; 16374 <__assert_fail@plt+0x4ebc>
   162b0:	mov	r6, r2
   162b4:	movne	r4, r3
   162b8:	mov	r9, r1
   162bc:	mov	r8, r0
   162c0:	bl	11338 <__errno_location@plt>
   162c4:	ldr	r3, [r4, #44]	; 0x2c
   162c8:	ldr	r5, [r4, #4]
   162cc:	add	sl, r4, #8
   162d0:	cmp	r6, #0
   162d4:	orreq	r5, r5, #1
   162d8:	mov	r1, #0
   162dc:	ldr	r2, [r0]
   162e0:	str	r3, [sp, #16]
   162e4:	ldr	r3, [r4, #40]	; 0x28
   162e8:	stmib	sp, {r5, sl}
   162ec:	str	r3, [sp, #12]
   162f0:	ldr	r3, [r4]
   162f4:	mov	r7, r0
   162f8:	str	r2, [sp, #28]
   162fc:	str	r3, [sp]
   16300:	mov	r2, r8
   16304:	mov	r3, r9
   16308:	mov	r0, r1
   1630c:	bl	14a4c <__assert_fail@plt+0x3594>
   16310:	add	r1, r0, #1
   16314:	mov	fp, r0
   16318:	mov	r0, r1
   1631c:	str	r1, [sp, #36]	; 0x24
   16320:	bl	17894 <__assert_fail@plt+0x63dc>
   16324:	ldr	r3, [r4, #44]	; 0x2c
   16328:	mov	r2, r8
   1632c:	str	r3, [sp, #16]
   16330:	ldr	r3, [r4, #40]	; 0x28
   16334:	str	r5, [sp, #4]
   16338:	str	r3, [sp, #12]
   1633c:	str	sl, [sp, #8]
   16340:	ldr	ip, [r4]
   16344:	ldr	r1, [sp, #36]	; 0x24
   16348:	mov	r3, r9
   1634c:	str	ip, [sp]
   16350:	str	r0, [sp, #32]
   16354:	bl	14a4c <__assert_fail@plt+0x3594>
   16358:	ldr	r2, [sp, #28]
   1635c:	cmp	r6, #0
   16360:	str	r2, [r7]
   16364:	ldr	r0, [sp, #32]
   16368:	strne	fp, [r6]
   1636c:	add	sp, sp, #44	; 0x2c
   16370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16374:	ldrdeq	fp, [r2], -r4
   16378:	mov	r3, r2
   1637c:	mov	r2, #0
   16380:	b	162a0 <__assert_fail@plt+0x4de8>
   16384:	push	{r4, r5, r6, r7, r8, lr}
   16388:	ldr	r6, [pc, #116]	; 16404 <__assert_fail@plt+0x4f4c>
   1638c:	ldr	r3, [r6, #4]
   16390:	ldr	r7, [r6]
   16394:	cmp	r3, #1
   16398:	movgt	r5, r7
   1639c:	movgt	r4, #1
   163a0:	ble	163c0 <__assert_fail@plt+0x4f08>
   163a4:	ldr	r0, [r5, #12]
   163a8:	bl	13b84 <__assert_fail@plt+0x26cc>
   163ac:	ldr	r3, [r6, #4]
   163b0:	add	r4, r4, #1
   163b4:	cmp	r3, r4
   163b8:	add	r5, r5, #8
   163bc:	bgt	163a4 <__assert_fail@plt+0x4eec>
   163c0:	ldr	r0, [r7, #4]
   163c4:	ldr	r4, [pc, #60]	; 16408 <__assert_fail@plt+0x4f50>
   163c8:	cmp	r0, r4
   163cc:	beq	163e0 <__assert_fail@plt+0x4f28>
   163d0:	bl	13b84 <__assert_fail@plt+0x26cc>
   163d4:	mov	r3, #256	; 0x100
   163d8:	str	r4, [r6, #12]
   163dc:	str	r3, [r6, #8]
   163e0:	ldr	r4, [pc, #36]	; 1640c <__assert_fail@plt+0x4f54>
   163e4:	cmp	r7, r4
   163e8:	beq	163f8 <__assert_fail@plt+0x4f40>
   163ec:	mov	r0, r7
   163f0:	bl	13b84 <__assert_fail@plt+0x26cc>
   163f4:	str	r4, [r6]
   163f8:	mov	r3, #1
   163fc:	str	r3, [r6, #4]
   16400:	pop	{r4, r5, r6, r7, r8, pc}
   16404:	andeq	fp, r2, ip, asr r1
   16408:	ldrdeq	fp, [r2], -r4
   1640c:	andeq	fp, r2, r4, ror #2
   16410:	ldr	r3, [pc, #4]	; 1641c <__assert_fail@plt+0x4f64>
   16414:	mvn	r2, #0
   16418:	b	15f60 <__assert_fail@plt+0x4aa8>
   1641c:	ldrdeq	fp, [r2], -r4
   16420:	ldr	r3, [pc]	; 16428 <__assert_fail@plt+0x4f70>
   16424:	b	15f60 <__assert_fail@plt+0x4aa8>
   16428:	ldrdeq	fp, [r2], -r4
   1642c:	mov	r1, r0
   16430:	ldr	r3, [pc, #8]	; 16440 <__assert_fail@plt+0x4f88>
   16434:	mvn	r2, #0
   16438:	mov	r0, #0
   1643c:	b	15f60 <__assert_fail@plt+0x4aa8>
   16440:	ldrdeq	fp, [r2], -r4
   16444:	mov	r2, r1
   16448:	ldr	r3, [pc, #8]	; 16458 <__assert_fail@plt+0x4fa0>
   1644c:	mov	r1, r0
   16450:	mov	r0, #0
   16454:	b	15f60 <__assert_fail@plt+0x4aa8>
   16458:	ldrdeq	fp, [r2], -r4
   1645c:	push	{r4, r5, lr}
   16460:	sub	sp, sp, #52	; 0x34
   16464:	mov	r5, r2
   16468:	mov	r4, r0
   1646c:	mov	r0, sp
   16470:	bl	148fc <__assert_fail@plt+0x3444>
   16474:	mov	r3, sp
   16478:	mov	r1, r5
   1647c:	mov	r0, r4
   16480:	mvn	r2, #0
   16484:	bl	15f60 <__assert_fail@plt+0x4aa8>
   16488:	add	sp, sp, #52	; 0x34
   1648c:	pop	{r4, r5, pc}
   16490:	push	{r4, r5, r6, lr}
   16494:	sub	sp, sp, #48	; 0x30
   16498:	mov	r5, r2
   1649c:	mov	r6, r3
   164a0:	mov	r4, r0
   164a4:	mov	r0, sp
   164a8:	bl	148fc <__assert_fail@plt+0x3444>
   164ac:	mov	r3, sp
   164b0:	mov	r2, r6
   164b4:	mov	r1, r5
   164b8:	mov	r0, r4
   164bc:	bl	15f60 <__assert_fail@plt+0x4aa8>
   164c0:	add	sp, sp, #48	; 0x30
   164c4:	pop	{r4, r5, r6, pc}
   164c8:	mov	r2, r1
   164cc:	mov	r1, r0
   164d0:	mov	r0, #0
   164d4:	b	1645c <__assert_fail@plt+0x4fa4>
   164d8:	mov	r3, r2
   164dc:	mov	r2, r1
   164e0:	mov	r1, r0
   164e4:	mov	r0, #0
   164e8:	b	16490 <__assert_fail@plt+0x4fd8>
   164ec:	push	{r4, r5, r6, r7, r8, lr}
   164f0:	mov	r7, r0
   164f4:	ldr	lr, [pc, #100]	; 16560 <__assert_fail@plt+0x50a8>
   164f8:	mov	r8, r1
   164fc:	mov	r4, r2
   16500:	ldm	lr!, {r0, r1, r2, r3}
   16504:	sub	sp, sp, #48	; 0x30
   16508:	mov	ip, sp
   1650c:	lsr	r5, r4, #5
   16510:	stmia	ip!, {r0, r1, r2, r3}
   16514:	add	r6, sp, #8
   16518:	ldm	lr!, {r0, r1, r2, r3}
   1651c:	and	r4, r4, #31
   16520:	stmia	ip!, {r0, r1, r2, r3}
   16524:	ldm	lr, {r0, r1, r2, r3}
   16528:	stm	ip, {r0, r1, r2, r3}
   1652c:	mov	r2, r8
   16530:	ldr	lr, [r6, r5, lsl #2]
   16534:	mov	r1, r7
   16538:	mov	r3, sp
   1653c:	lsr	ip, lr, r4
   16540:	eor	ip, ip, #1
   16544:	and	ip, ip, #1
   16548:	mov	r0, #0
   1654c:	eor	r4, lr, ip, lsl r4
   16550:	str	r4, [r6, r5, lsl #2]
   16554:	bl	15f60 <__assert_fail@plt+0x4aa8>
   16558:	add	sp, sp, #48	; 0x30
   1655c:	pop	{r4, r5, r6, r7, r8, pc}
   16560:	ldrdeq	fp, [r2], -r4
   16564:	mov	r2, r1
   16568:	mvn	r1, #0
   1656c:	b	164ec <__assert_fail@plt+0x5034>
   16570:	mov	r2, #58	; 0x3a
   16574:	mvn	r1, #0
   16578:	b	164ec <__assert_fail@plt+0x5034>
   1657c:	mov	r2, #58	; 0x3a
   16580:	b	164ec <__assert_fail@plt+0x5034>
   16584:	push	{r4, r5, r6, r7, lr}
   16588:	sub	sp, sp, #100	; 0x64
   1658c:	mov	r6, r0
   16590:	mov	r0, sp
   16594:	mov	r7, r2
   16598:	bl	148fc <__assert_fail@plt+0x3444>
   1659c:	mov	ip, sp
   165a0:	add	lr, sp, #48	; 0x30
   165a4:	ldm	ip!, {r0, r1, r2, r3}
   165a8:	stmia	lr!, {r0, r1, r2, r3}
   165ac:	ldm	ip!, {r0, r1, r2, r3}
   165b0:	ldr	r5, [sp, #60]	; 0x3c
   165b4:	stmia	lr!, {r0, r1, r2, r3}
   165b8:	mvn	r4, r5
   165bc:	ldm	ip, {r0, r1, r2, r3}
   165c0:	and	ip, r4, #67108864	; 0x4000000
   165c4:	eor	ip, ip, r5
   165c8:	str	ip, [sp, #60]	; 0x3c
   165cc:	stm	lr, {r0, r1, r2, r3}
   165d0:	mov	r1, r7
   165d4:	mov	r0, r6
   165d8:	add	r3, sp, #48	; 0x30
   165dc:	mvn	r2, #0
   165e0:	bl	15f60 <__assert_fail@plt+0x4aa8>
   165e4:	add	sp, sp, #100	; 0x64
   165e8:	pop	{r4, r5, r6, r7, pc}
   165ec:	push	{r4, r5, r6, r7, r8, lr}
   165f0:	mov	r5, r1
   165f4:	ldr	lr, [pc, #100]	; 16660 <__assert_fail@plt+0x51a8>
   165f8:	mov	r4, r2
   165fc:	mov	r7, r0
   16600:	mov	r8, r3
   16604:	ldm	lr!, {r0, r1, r2, r3}
   16608:	sub	sp, sp, #48	; 0x30
   1660c:	mov	ip, sp
   16610:	mov	r6, #10
   16614:	stmia	ip!, {r0, r1, r2, r3}
   16618:	cmp	r4, #0
   1661c:	cmpne	r5, #0
   16620:	ldm	lr!, {r0, r1, r2, r3}
   16624:	str	r6, [sp]
   16628:	stmia	ip!, {r0, r1, r2, r3}
   1662c:	ldm	lr, {r0, r1, r2, r3}
   16630:	stm	ip, {r0, r1, r2, r3}
   16634:	beq	1665c <__assert_fail@plt+0x51a4>
   16638:	mov	r3, sp
   1663c:	mov	r1, r8
   16640:	mov	r0, r7
   16644:	ldr	r2, [sp, #72]	; 0x48
   16648:	str	r5, [sp, #40]	; 0x28
   1664c:	str	r4, [sp, #44]	; 0x2c
   16650:	bl	15f60 <__assert_fail@plt+0x4aa8>
   16654:	add	sp, sp, #48	; 0x30
   16658:	pop	{r4, r5, r6, r7, r8, pc}
   1665c:	bl	114a0 <abort@plt>
   16660:	ldrdeq	fp, [r2], -r4
   16664:	push	{lr}		; (str lr, [sp, #-4]!)
   16668:	sub	sp, sp, #12
   1666c:	mvn	ip, #0
   16670:	str	ip, [sp]
   16674:	bl	165ec <__assert_fail@plt+0x5134>
   16678:	add	sp, sp, #12
   1667c:	pop	{pc}		; (ldr pc, [sp], #4)
   16680:	push	{lr}		; (str lr, [sp, #-4]!)
   16684:	sub	sp, sp, #12
   16688:	mvn	ip, #0
   1668c:	mov	r3, r2
   16690:	str	ip, [sp]
   16694:	mov	r2, r1
   16698:	mov	r1, r0
   1669c:	mov	r0, #0
   166a0:	bl	165ec <__assert_fail@plt+0x5134>
   166a4:	add	sp, sp, #12
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	push	{lr}		; (str lr, [sp, #-4]!)
   166b0:	sub	sp, sp, #12
   166b4:	str	r3, [sp]
   166b8:	mov	r3, r2
   166bc:	mov	r2, r1
   166c0:	mov	r1, r0
   166c4:	mov	r0, #0
   166c8:	bl	165ec <__assert_fail@plt+0x5134>
   166cc:	add	sp, sp, #12
   166d0:	pop	{pc}		; (ldr pc, [sp], #4)
   166d4:	ldr	r3, [pc]	; 166dc <__assert_fail@plt+0x5224>
   166d8:	b	15f60 <__assert_fail@plt+0x4aa8>
   166dc:	andeq	fp, r2, ip, ror #2
   166e0:	mov	r2, r1
   166e4:	ldr	r3, [pc, #8]	; 166f4 <__assert_fail@plt+0x523c>
   166e8:	mov	r1, r0
   166ec:	mov	r0, #0
   166f0:	b	15f60 <__assert_fail@plt+0x4aa8>
   166f4:	andeq	fp, r2, ip, ror #2
   166f8:	ldr	r3, [pc, #4]	; 16704 <__assert_fail@plt+0x524c>
   166fc:	mvn	r2, #0
   16700:	b	15f60 <__assert_fail@plt+0x4aa8>
   16704:	andeq	fp, r2, ip, ror #2
   16708:	mov	r1, r0
   1670c:	ldr	r3, [pc, #8]	; 1671c <__assert_fail@plt+0x5264>
   16710:	mvn	r2, #0
   16714:	mov	r0, #0
   16718:	b	15f60 <__assert_fail@plt+0x4aa8>
   1671c:	andeq	fp, r2, ip, ror #2
   16720:	push	{r4, r5, r6, lr}
   16724:	mov	r6, r0
   16728:	mov	r0, #24
   1672c:	bl	1786c <__assert_fail@plt+0x63b4>
   16730:	mov	r4, #0
   16734:	mov	r5, #0
   16738:	str	r6, [r0]
   1673c:	strd	r4, [r0, #16]
   16740:	strd	r4, [r0, #8]
   16744:	pop	{r4, r5, r6, pc}
   16748:	push	{r4, lr}
   1674c:	bl	16a4c <__assert_fail@plt+0x5594>
   16750:	subs	r4, r0, #0
   16754:	beq	16778 <__assert_fail@plt+0x52c0>
   16758:	mov	r0, #24
   1675c:	bl	1786c <__assert_fail@plt+0x63b4>
   16760:	mov	r2, #0
   16764:	mov	r3, #0
   16768:	str	r4, [r0]
   1676c:	strd	r2, [r0, #16]
   16770:	strd	r2, [r0, #8]
   16774:	pop	{r4, pc}
   16778:	mov	r0, r4
   1677c:	pop	{r4, pc}
   16780:	ldr	r0, [r0]
   16784:	bx	lr
   16788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1678c:	sub	sp, sp, #60	; 0x3c
   16790:	ldrd	r4, [r0, #8]
   16794:	strd	r2, [sp]
   16798:	ldrd	r2, [sp]
   1679c:	ldrd	r6, [r0, #16]
   167a0:	ldr	r1, [r0]
   167a4:	adds	r2, r2, #1
   167a8:	adc	r3, r3, #0
   167ac:	str	r0, [sp, #44]	; 0x2c
   167b0:	str	r1, [sp, #40]	; 0x28
   167b4:	strd	r2, [sp, #16]
   167b8:	ldrd	r2, [sp]
   167bc:	cmp	r7, r3
   167c0:	cmpeq	r6, r2
   167c4:	bcs	1685c <__assert_fail@plt+0x53a4>
   167c8:	mov	r2, #0
   167cc:	mov	ip, r2
   167d0:	ldrd	r2, [sp]
   167d4:	mov	r0, r6
   167d8:	mov	r1, r7
   167dc:	lsl	r9, r1, #8
   167e0:	lsl	r8, r0, #8
   167e4:	orr	r9, r9, r0, lsr #24
   167e8:	adds	r0, r8, #255	; 0xff
   167ec:	adc	r1, r9, #0
   167f0:	cmp	r3, r1
   167f4:	cmpeq	r2, r0
   167f8:	add	ip, ip, #1
   167fc:	bhi	167dc <__assert_fail@plt+0x5324>
   16800:	mov	r2, ip
   16804:	add	r1, sp, #48	; 0x30
   16808:	ldr	r0, [sp, #40]	; 0x28
   1680c:	bl	16b98 <__assert_fail@plt+0x56e0>
   16810:	add	r3, sp, #48	; 0x30
   16814:	ldrd	r0, [sp]
   16818:	mov	ip, r3
   1681c:	lsl	fp, r5, #8
   16820:	orr	fp, fp, r4, lsr #24
   16824:	lsl	sl, r4, #8
   16828:	ldrb	r4, [ip], #1
   1682c:	lsl	r3, r7, #8
   16830:	lsl	r2, r6, #8
   16834:	orr	r3, r3, r6, lsr #24
   16838:	adds	r6, r2, #255	; 0xff
   1683c:	adc	r7, r3, #0
   16840:	mov	r5, #0
   16844:	adds	r4, r4, sl
   16848:	adc	r5, r5, fp
   1684c:	cmp	r1, r7
   16850:	cmpeq	r0, r6
   16854:	bhi	1681c <__assert_fail@plt+0x5364>
   16858:	strd	r2, [sp, #24]
   1685c:	ldrd	r2, [sp]
   16860:	cmp	r7, r3
   16864:	cmpeq	r6, r2
   16868:	beq	168d0 <__assert_fail@plt+0x5418>
   1686c:	ldrd	r2, [sp]
   16870:	subs	r2, r6, r2
   16874:	sbc	r3, r7, r3
   16878:	mov	r0, r2
   1687c:	strd	r2, [sp, #32]
   16880:	mov	r1, r3
   16884:	ldrd	r2, [sp, #16]
   16888:	bl	193b0 <__assert_fail@plt+0x7ef8>
   1688c:	mov	r0, r4
   16890:	mov	r1, r5
   16894:	strd	r2, [sp, #8]
   16898:	ldrd	r2, [sp, #16]
   1689c:	bl	193b0 <__assert_fail@plt+0x7ef8>
   168a0:	ldrd	r0, [sp, #8]
   168a4:	subs	r0, r6, r0
   168a8:	sbc	r1, r7, r1
   168ac:	cmp	r5, r1
   168b0:	cmpeq	r4, r0
   168b4:	bls	168f4 <__assert_fail@plt+0x543c>
   168b8:	ldrd	r6, [sp, #8]
   168bc:	mov	r4, r2
   168c0:	mov	r5, r3
   168c4:	subs	r6, r6, #1
   168c8:	sbc	r7, r7, #0
   168cc:	b	167b8 <__assert_fail@plt+0x5300>
   168d0:	ldr	r1, [sp, #44]	; 0x2c
   168d4:	mov	r2, #0
   168d8:	mov	r3, #0
   168dc:	mov	r0, r4
   168e0:	strd	r2, [r1, #16]
   168e4:	strd	r2, [r1, #8]
   168e8:	mov	r1, r5
   168ec:	add	sp, sp, #60	; 0x3c
   168f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168f4:	mov	r0, r4
   168f8:	mov	r1, r5
   168fc:	ldrd	r4, [sp, #16]
   16900:	mov	r8, r2
   16904:	mov	r7, r3
   16908:	mov	r2, r4
   1690c:	mov	r3, r5
   16910:	bl	193b0 <__assert_fail@plt+0x7ef8>
   16914:	ldr	r6, [sp, #44]	; 0x2c
   16918:	mov	r2, r4
   1691c:	mov	r3, r5
   16920:	mov	r4, r8
   16924:	mov	r5, r7
   16928:	strd	r0, [r6, #8]
   1692c:	ldrd	r0, [sp, #32]
   16930:	bl	193b0 <__assert_fail@plt+0x7ef8>
   16934:	strd	r0, [r6, #16]
   16938:	mov	r0, r4
   1693c:	mov	r1, r5
   16940:	add	sp, sp, #60	; 0x3c
   16944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16948:	push	{r4, lr}
   1694c:	mvn	r2, #0
   16950:	mov	r4, r0
   16954:	mov	r1, #24
   16958:	bl	113ec <__explicit_bzero_chk@plt>
   1695c:	mov	r0, r4
   16960:	pop	{r4, lr}
   16964:	b	13b84 <__assert_fail@plt+0x26cc>
   16968:	push	{r4, r5, r6, r7, r8, lr}
   1696c:	mov	r4, r0
   16970:	ldr	r0, [r0]
   16974:	bl	16cf0 <__assert_fail@plt+0x5838>
   16978:	mov	r6, r0
   1697c:	bl	11338 <__errno_location@plt>
   16980:	mvn	r2, #0
   16984:	mov	r1, #24
   16988:	ldr	r7, [r0]
   1698c:	mov	r5, r0
   16990:	mov	r0, r4
   16994:	bl	113ec <__explicit_bzero_chk@plt>
   16998:	mov	r0, r4
   1699c:	bl	13b84 <__assert_fail@plt+0x26cc>
   169a0:	str	r7, [r5]
   169a4:	mov	r0, r6
   169a8:	pop	{r4, r5, r6, r7, r8, pc}
   169ac:	subs	r5, r0, #0
   169b0:	push	{r7, lr}
   169b4:	beq	16a04 <__assert_fail@plt+0x554c>
   169b8:	ldr	r3, [pc, #72]	; 16a08 <__assert_fail@plt+0x5550>
   169bc:	ldr	r6, [r3]
   169c0:	bl	11338 <__errno_location@plt>
   169c4:	mov	r2, #5
   169c8:	ldr	r4, [r0]
   169cc:	cmp	r4, #0
   169d0:	moveq	r0, r4
   169d4:	ldreq	r1, [pc, #48]	; 16a0c <__assert_fail@plt+0x5554>
   169d8:	ldrne	r1, [pc, #48]	; 16a10 <__assert_fail@plt+0x5558>
   169dc:	movne	r0, #0
   169e0:	bl	111e8 <dcgettext@plt>
   169e4:	mov	r7, r0
   169e8:	mov	r0, r5
   169ec:	bl	16708 <__assert_fail@plt+0x5250>
   169f0:	mov	r2, r7
   169f4:	mov	r1, r4
   169f8:	mov	r3, r0
   169fc:	mov	r0, r6
   16a00:	bl	1129c <error@plt>
   16a04:	bl	114a0 <abort@plt>
   16a08:	andeq	fp, r2, r8, asr r1
   16a0c:	andeq	sl, r1, ip, lsr r6
   16a10:	andeq	sl, r1, ip, asr #12
   16a14:	push	{r4, r5, r6, lr}
   16a18:	mvn	r2, #0
   16a1c:	ldr	r5, [r0]
   16a20:	mov	r4, r0
   16a24:	ldr	r1, [pc, #28]	; 16a48 <__assert_fail@plt+0x5590>
   16a28:	bl	113ec <__explicit_bzero_chk@plt>
   16a2c:	mov	r0, r4
   16a30:	bl	13b84 <__assert_fail@plt+0x26cc>
   16a34:	subs	r0, r5, #0
   16a38:	beq	16a44 <__assert_fail@plt+0x558c>
   16a3c:	pop	{r4, r5, r6, lr}
   16a40:	b	186cc <__assert_fail@plt+0x7214>
   16a44:	pop	{r4, r5, r6, pc}
   16a48:	andeq	r0, r0, ip, lsl r8
   16a4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a50:	subs	r5, r1, #0
   16a54:	beq	16ab4 <__assert_fail@plt+0x55fc>
   16a58:	cmp	r0, #0
   16a5c:	mov	r4, r0
   16a60:	beq	16ad4 <__assert_fail@plt+0x561c>
   16a64:	ldr	r1, [pc, #272]	; 16b7c <__assert_fail@plt+0x56c4>
   16a68:	bl	187cc <__assert_fail@plt+0x7314>
   16a6c:	subs	r6, r0, #0
   16a70:	beq	16b74 <__assert_fail@plt+0x56bc>
   16a74:	ldr	r0, [pc, #260]	; 16b80 <__assert_fail@plt+0x56c8>
   16a78:	bl	1786c <__assert_fail@plt+0x63b4>
   16a7c:	ldr	r2, [pc, #256]	; 16b84 <__assert_fail@plt+0x56cc>
   16a80:	cmp	r5, #2048	; 0x800
   16a84:	movcc	r3, r5
   16a88:	movcs	r3, #2048	; 0x800
   16a8c:	mov	r7, r0
   16a90:	str	r6, [r0]
   16a94:	str	r4, [r0, #8]
   16a98:	add	r1, r7, #12
   16a9c:	str	r2, [r7, #4]
   16aa0:	mov	r0, r6
   16aa4:	mov	r2, #0
   16aa8:	bl	1135c <setvbuf@plt>
   16aac:	mov	r0, r7
   16ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ab4:	ldr	r0, [pc, #196]	; 16b80 <__assert_fail@plt+0x56c8>
   16ab8:	bl	1786c <__assert_fail@plt+0x63b4>
   16abc:	ldr	r3, [pc, #192]	; 16b84 <__assert_fail@plt+0x56cc>
   16ac0:	mov	r7, r0
   16ac4:	str	r5, [r0]
   16ac8:	stmib	r0, {r3, r5}
   16acc:	mov	r0, r7
   16ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ad4:	ldr	r0, [pc, #164]	; 16b80 <__assert_fail@plt+0x56c8>
   16ad8:	bl	1786c <__assert_fail@plt+0x63b4>
   16adc:	ldr	r3, [pc, #160]	; 16b84 <__assert_fail@plt+0x56cc>
   16ae0:	add	r8, r0, #16
   16ae4:	cmp	r5, #1024	; 0x400
   16ae8:	addls	r5, r8, r5
   16aec:	addhi	r5, r8, #1024	; 0x400
   16af0:	cmp	r8, r5
   16af4:	mov	r7, r0
   16af8:	str	r4, [r0]
   16afc:	str	r4, [r0, #8]
   16b00:	str	r4, [r0, #12]
   16b04:	str	r3, [r0, #4]
   16b08:	bcs	16b64 <__assert_fail@plt+0x56ac>
   16b0c:	mov	r6, r4
   16b10:	mov	r4, r8
   16b14:	b	16b20 <__assert_fail@plt+0x5668>
   16b18:	cmp	r5, r4
   16b1c:	bls	16b64 <__assert_fail@plt+0x56ac>
   16b20:	sub	r1, r5, r4
   16b24:	mov	r0, r4
   16b28:	mov	r2, r6
   16b2c:	bl	1144c <getrandom@plt>
   16b30:	cmp	r0, #0
   16b34:	addge	r4, r4, r0
   16b38:	bge	16b18 <__assert_fail@plt+0x5660>
   16b3c:	bl	11338 <__errno_location@plt>
   16b40:	ldr	sl, [r0]
   16b44:	mov	r9, r0
   16b48:	cmp	sl, #4
   16b4c:	beq	16b18 <__assert_fail@plt+0x5660>
   16b50:	mov	r0, r7
   16b54:	bl	16a14 <__assert_fail@plt+0x555c>
   16b58:	mov	r7, #0
   16b5c:	str	sl, [r9]
   16b60:	b	16aac <__assert_fail@plt+0x55f4>
   16b64:	mov	r0, r8
   16b68:	bl	16f18 <__assert_fail@plt+0x5a60>
   16b6c:	mov	r0, r7
   16b70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b74:	mov	r7, r6
   16b78:	b	16aac <__assert_fail@plt+0x55f4>
   16b7c:	andeq	sl, r1, ip, asr r6
   16b80:	andeq	r0, r0, ip, lsl r8
   16b84:	andeq	r6, r1, ip, lsr #19
   16b88:	str	r1, [r0, #4]
   16b8c:	bx	lr
   16b90:	str	r1, [r0, #8]
   16b94:	bx	lr
   16b98:	ldr	r3, [r0]
   16b9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ba0:	sub	sp, sp, #8
   16ba4:	cmp	r3, #0
   16ba8:	mov	r6, r0
   16bac:	mov	r5, r1
   16bb0:	mov	r4, r2
   16bb4:	str	r3, [sp, #4]
   16bb8:	beq	16c1c <__assert_fail@plt+0x5764>
   16bbc:	bl	11338 <__errno_location@plt>
   16bc0:	mov	r8, #1
   16bc4:	ldr	r3, [sp, #4]
   16bc8:	mov	r7, r0
   16bcc:	b	16bf4 <__assert_fail@plt+0x573c>
   16bd0:	ldr	r3, [r6]
   16bd4:	ldr	r1, [r6, #4]
   16bd8:	ldr	r0, [r6, #8]
   16bdc:	ldr	r3, [r3]
   16be0:	ands	r3, r3, #32
   16be4:	movne	r3, r2
   16be8:	str	r3, [r7]
   16bec:	blx	r1
   16bf0:	ldr	r3, [r6]
   16bf4:	mov	r2, r4
   16bf8:	mov	r0, r5
   16bfc:	mov	r1, r8
   16c00:	bl	11440 <fread_unlocked@plt>
   16c04:	ldr	r2, [r7]
   16c08:	subs	r4, r4, r0
   16c0c:	add	r5, r5, r0
   16c10:	bne	16bd0 <__assert_fail@plt+0x5718>
   16c14:	add	sp, sp, #8
   16c18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c1c:	ldr	r7, [r0, #12]
   16c20:	add	r9, r0, #12
   16c24:	cmp	r2, r7
   16c28:	add	r9, r9, #1040	; 0x410
   16c2c:	addhi	r8, r0, #16
   16c30:	movhi	sl, #1024	; 0x400
   16c34:	bls	16ce4 <__assert_fail@plt+0x582c>
   16c38:	rsb	r1, r7, #1024	; 0x400
   16c3c:	mov	r0, r5
   16c40:	add	r1, r9, r1
   16c44:	mov	r2, r7
   16c48:	add	r5, r5, r7
   16c4c:	bl	11194 <memcpy@plt>
   16c50:	tst	r5, #3
   16c54:	sub	r4, r4, r7
   16c58:	bne	16cc8 <__assert_fail@plt+0x5810>
   16c5c:	ldr	r7, [pc, #136]	; 16cec <__assert_fail@plt+0x5834>
   16c60:	cmp	r4, r7
   16c64:	bhi	16c74 <__assert_fail@plt+0x57bc>
   16c68:	b	16c98 <__assert_fail@plt+0x57e0>
   16c6c:	cmp	r4, r7
   16c70:	bls	16c98 <__assert_fail@plt+0x57e0>
   16c74:	mov	r1, r5
   16c78:	mov	r0, r8
   16c7c:	bl	16cf4 <__assert_fail@plt+0x583c>
   16c80:	subs	r4, r4, #1024	; 0x400
   16c84:	add	r5, r5, #1024	; 0x400
   16c88:	bne	16c6c <__assert_fail@plt+0x57b4>
   16c8c:	str	r4, [r6, #12]
   16c90:	add	sp, sp, #8
   16c94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c98:	mov	r0, r8
   16c9c:	mov	r1, r9
   16ca0:	bl	16cf4 <__assert_fail@plt+0x583c>
   16ca4:	mov	r1, #0
   16ca8:	mov	r7, #1024	; 0x400
   16cac:	mov	r2, r4
   16cb0:	add	r1, r9, r1
   16cb4:	mov	r0, r5
   16cb8:	sub	r4, r7, r4
   16cbc:	bl	11194 <memcpy@plt>
   16cc0:	str	r4, [r6, #12]
   16cc4:	b	16c14 <__assert_fail@plt+0x575c>
   16cc8:	mov	r1, r9
   16ccc:	mov	r0, r8
   16cd0:	bl	16cf4 <__assert_fail@plt+0x583c>
   16cd4:	cmp	r4, #1024	; 0x400
   16cd8:	mov	r7, sl
   16cdc:	bhi	16c38 <__assert_fail@plt+0x5780>
   16ce0:	b	16ca4 <__assert_fail@plt+0x57ec>
   16ce4:	rsb	r1, r7, #1024	; 0x400
   16ce8:	b	16cac <__assert_fail@plt+0x57f4>
   16cec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16cf0:	b	16a14 <__assert_fail@plt+0x555c>
   16cf4:	ldr	r2, [r0, #1032]	; 0x408
   16cf8:	push	{r4, r5, r6, r7, r8, lr}
   16cfc:	add	r2, r2, #1
   16d00:	ldr	r5, [r0, #1028]	; 0x404
   16d04:	ldr	r3, [r0, #1024]	; 0x400
   16d08:	add	r1, r1, #16
   16d0c:	add	r5, r5, r2
   16d10:	add	r4, r0, #512	; 0x200
   16d14:	add	ip, r0, #16
   16d18:	str	r2, [r0, #1032]	; 0x408
   16d1c:	ldr	lr, [ip, #-16]
   16d20:	ldr	r6, [ip, #496]	; 0x1f0
   16d24:	and	r2, lr, #1020	; 0x3fc
   16d28:	eor	r3, r3, r3, lsl #13
   16d2c:	ldr	r2, [r0, r2]
   16d30:	add	r3, r3, r6
   16d34:	add	r2, r3, r2
   16d38:	add	r5, r2, r5
   16d3c:	str	r5, [ip, #-16]
   16d40:	lsr	r5, r5, #8
   16d44:	and	r5, r5, #1020	; 0x3fc
   16d48:	eor	r3, r3, r3, lsr #6
   16d4c:	ldr	r6, [r0, r5]
   16d50:	cmp	r4, ip
   16d54:	add	r6, lr, r6
   16d58:	str	r6, [r1, #-16]
   16d5c:	ldr	r5, [ip, #-12]
   16d60:	ldr	r7, [ip, #500]	; 0x1f4
   16d64:	and	lr, r5, #1020	; 0x3fc
   16d68:	add	r3, r3, r7
   16d6c:	ldr	r7, [r0, lr]
   16d70:	eor	lr, r3, r3, lsl #2
   16d74:	add	r3, r3, r7
   16d78:	add	r3, r3, r6
   16d7c:	str	r3, [ip, #-12]
   16d80:	lsr	r3, r3, #8
   16d84:	and	r3, r3, #1020	; 0x3fc
   16d88:	mov	r2, ip
   16d8c:	ldr	r3, [r0, r3]
   16d90:	add	ip, ip, #16
   16d94:	add	r5, r5, r3
   16d98:	str	r5, [r1, #-12]
   16d9c:	ldr	r7, [ip, #-24]	; 0xffffffe8
   16da0:	ldr	r8, [ip, #488]	; 0x1e8
   16da4:	and	r3, r7, #1020	; 0x3fc
   16da8:	add	lr, lr, r8
   16dac:	ldr	r8, [r0, r3]
   16db0:	eor	r3, lr, lr, lsr #16
   16db4:	add	lr, lr, r8
   16db8:	add	lr, lr, r5
   16dbc:	str	lr, [ip, #-24]	; 0xffffffe8
   16dc0:	lsr	lr, lr, #8
   16dc4:	and	lr, lr, #1020	; 0x3fc
   16dc8:	add	r1, r1, #16
   16dcc:	ldr	lr, [r0, lr]
   16dd0:	add	r7, r7, lr
   16dd4:	str	r7, [r1, #-24]	; 0xffffffe8
   16dd8:	ldr	r5, [ip, #-20]	; 0xffffffec
   16ddc:	ldr	r8, [ip, #492]	; 0x1ec
   16de0:	and	lr, r5, #1020	; 0x3fc
   16de4:	add	r3, r3, r8
   16de8:	ldr	lr, [r0, lr]
   16dec:	add	lr, r3, lr
   16df0:	add	lr, lr, r7
   16df4:	str	lr, [ip, #-20]	; 0xffffffec
   16df8:	lsr	lr, lr, #8
   16dfc:	and	lr, lr, #1020	; 0x3fc
   16e00:	ldr	lr, [r0, lr]
   16e04:	add	r5, r5, lr
   16e08:	str	r5, [r1, #-20]	; 0xffffffec
   16e0c:	bhi	16d1c <__assert_fail@plt+0x5864>
   16e10:	mov	ip, r1
   16e14:	add	r2, r2, #16
   16e18:	add	lr, r0, #1024	; 0x400
   16e1c:	ldr	r4, [r2, #-16]
   16e20:	ldr	r6, [r2, #-528]	; 0xfffffdf0
   16e24:	and	r1, r4, #1020	; 0x3fc
   16e28:	eor	r3, r3, r3, lsl #13
   16e2c:	ldr	r1, [r0, r1]
   16e30:	add	r3, r3, r6
   16e34:	add	r1, r3, r1
   16e38:	add	r5, r1, r5
   16e3c:	str	r5, [r2, #-16]
   16e40:	lsr	r5, r5, #8
   16e44:	and	r5, r5, #1020	; 0x3fc
   16e48:	eor	r3, r3, r3, lsr #6
   16e4c:	ldr	r1, [r0, r5]
   16e50:	cmp	r2, lr
   16e54:	add	r4, r4, r1
   16e58:	str	r4, [ip, #-16]
   16e5c:	ldr	r5, [r2, #-12]
   16e60:	ldr	r7, [r2, #-524]	; 0xfffffdf4
   16e64:	and	r1, r5, #1020	; 0x3fc
   16e68:	add	r3, r3, r7
   16e6c:	ldr	r7, [r0, r1]
   16e70:	eor	r1, r3, r3, lsl #2
   16e74:	add	r3, r3, r7
   16e78:	add	r3, r3, r4
   16e7c:	str	r3, [r2, #-12]
   16e80:	lsr	r3, r3, #8
   16e84:	and	r3, r3, #1020	; 0x3fc
   16e88:	add	r2, r2, #16
   16e8c:	ldr	r3, [r0, r3]
   16e90:	add	ip, ip, #16
   16e94:	add	r5, r5, r3
   16e98:	str	r5, [ip, #-28]	; 0xffffffe4
   16e9c:	ldr	r4, [r2, #-24]	; 0xffffffe8
   16ea0:	ldr	r6, [r2, #-536]	; 0xfffffde8
   16ea4:	and	r3, r4, #1020	; 0x3fc
   16ea8:	add	r1, r1, r6
   16eac:	ldr	r6, [r0, r3]
   16eb0:	eor	r3, r1, r1, lsr #16
   16eb4:	add	r1, r1, r6
   16eb8:	add	r1, r1, r5
   16ebc:	str	r1, [r2, #-24]	; 0xffffffe8
   16ec0:	lsr	r1, r1, #8
   16ec4:	and	r1, r1, #1020	; 0x3fc
   16ec8:	ldr	r1, [r0, r1]
   16ecc:	add	r4, r4, r1
   16ed0:	str	r4, [ip, #-24]	; 0xffffffe8
   16ed4:	ldr	r5, [r2, #-20]	; 0xffffffec
   16ed8:	ldr	r6, [r2, #-532]	; 0xfffffdec
   16edc:	and	r1, r5, #1020	; 0x3fc
   16ee0:	add	r3, r3, r6
   16ee4:	ldr	r1, [r0, r1]
   16ee8:	add	r1, r3, r1
   16eec:	add	r1, r1, r4
   16ef0:	str	r1, [r2, #-20]	; 0xffffffec
   16ef4:	lsr	r1, r1, #8
   16ef8:	and	r1, r1, #1020	; 0x3fc
   16efc:	ldr	r1, [r0, r1]
   16f00:	add	r5, r5, r1
   16f04:	str	r5, [ip, #-20]	; 0xffffffec
   16f08:	bcc	16e1c <__assert_fail@plt+0x5964>
   16f0c:	str	r3, [r0, #1024]	; 0x400
   16f10:	str	r5, [r0, #1028]	; 0x404
   16f14:	pop	{r4, r5, r6, r7, r8, pc}
   16f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f1c:	mov	r2, r0
   16f20:	ldr	r8, [pc, #452]	; 170ec <__assert_fail@plt+0x5c34>
   16f24:	ldr	r7, [pc, #452]	; 170f0 <__assert_fail@plt+0x5c38>
   16f28:	ldr	r6, [pc, #452]	; 170f4 <__assert_fail@plt+0x5c3c>
   16f2c:	ldr	r4, [pc, #452]	; 170f8 <__assert_fail@plt+0x5c40>
   16f30:	ldr	lr, [pc, #452]	; 170fc <__assert_fail@plt+0x5c44>
   16f34:	ldr	ip, [pc, #452]	; 17100 <__assert_fail@plt+0x5c48>
   16f38:	ldr	r1, [pc, #452]	; 17104 <__assert_fail@plt+0x5c4c>
   16f3c:	ldr	r9, [pc, #452]	; 17108 <__assert_fail@plt+0x5c50>
   16f40:	add	fp, r0, #1024	; 0x400
   16f44:	mov	r3, r0
   16f48:	ldm	r3, {r5, sl}
   16f4c:	add	r3, r3, #32
   16f50:	add	r1, r1, sl
   16f54:	add	r9, r9, r5
   16f58:	ldr	sl, [r3, #-24]	; 0xffffffe8
   16f5c:	ldr	r5, [r3, #-20]	; 0xffffffec
   16f60:	eor	r9, r9, r1, lsl #11
   16f64:	add	ip, ip, sl
   16f68:	add	r5, r9, r5
   16f6c:	ldr	sl, [r3, #-16]
   16f70:	add	lr, r5, lr
   16f74:	add	r1, r1, ip
   16f78:	ldr	r5, [r3, #-12]
   16f7c:	eor	r1, r1, ip, lsr #2
   16f80:	add	ip, ip, lr
   16f84:	add	sl, r1, sl
   16f88:	eor	ip, ip, lr, lsl #8
   16f8c:	add	r4, sl, r4
   16f90:	add	r5, ip, r5
   16f94:	add	r6, r5, r6
   16f98:	add	lr, lr, r4
   16f9c:	ldr	r5, [r3, #-8]
   16fa0:	eor	lr, lr, r4, lsr #16
   16fa4:	ldr	sl, [r3, #-4]
   16fa8:	add	r4, r4, r6
   16fac:	add	r5, lr, r5
   16fb0:	eor	r4, r4, r6, lsl #10
   16fb4:	add	r7, r5, r7
   16fb8:	add	r6, r6, r7
   16fbc:	add	sl, r4, sl
   16fc0:	add	r8, sl, r8
   16fc4:	eor	r6, r6, r7, lsr #4
   16fc8:	add	r9, r9, r6
   16fcc:	add	r7, r7, r8
   16fd0:	eor	r7, r7, r8, lsl #8
   16fd4:	add	r8, r8, r9
   16fd8:	eor	r8, r8, r9, lsr #9
   16fdc:	add	r1, r1, r7
   16fe0:	add	r9, r9, r1
   16fe4:	add	ip, ip, r8
   16fe8:	str	r4, [r3, #-16]
   16fec:	str	lr, [r3, #-20]	; 0xffffffec
   16ff0:	str	r1, [r3, #-28]	; 0xffffffe4
   16ff4:	str	r9, [r3, #-32]	; 0xffffffe0
   16ff8:	str	ip, [r3, #-24]	; 0xffffffe8
   16ffc:	str	r7, [r3, #-8]
   17000:	str	r8, [r3, #-4]
   17004:	str	r6, [r3, #-12]
   17008:	cmp	fp, r3
   1700c:	bne	16f48 <__assert_fail@plt+0x5a90>
   17010:	ldm	r2, {r5, sl}
   17014:	add	r2, r2, #32
   17018:	add	r1, r1, sl
   1701c:	ldr	sl, [r2, #-24]	; 0xffffffe8
   17020:	add	r9, r9, r5
   17024:	ldr	r5, [r2, #-20]	; 0xffffffec
   17028:	add	ip, ip, sl
   1702c:	eor	r9, r9, r1, lsl #11
   17030:	ldr	sl, [r2, #-16]
   17034:	add	r5, r9, r5
   17038:	add	r1, r1, ip
   1703c:	add	lr, r5, lr
   17040:	eor	r1, r1, ip, lsr #2
   17044:	ldr	r5, [r2, #-12]
   17048:	add	sl, r1, sl
   1704c:	add	ip, ip, lr
   17050:	add	r4, sl, r4
   17054:	eor	ip, ip, lr, lsl #8
   17058:	ldr	sl, [r2, #-8]
   1705c:	add	r5, ip, r5
   17060:	add	lr, lr, r4
   17064:	add	r6, r5, r6
   17068:	eor	lr, lr, r4, lsr #16
   1706c:	ldr	r5, [r2, #-4]
   17070:	add	r4, r4, r6
   17074:	add	sl, lr, sl
   17078:	eor	r4, r4, r6, lsl #10
   1707c:	add	r7, sl, r7
   17080:	add	r6, r6, r7
   17084:	add	r5, r4, r5
   17088:	add	r8, r5, r8
   1708c:	eor	r6, r6, r7, lsr #4
   17090:	add	r9, r9, r6
   17094:	add	r7, r7, r8
   17098:	eor	r7, r7, r8, lsl #8
   1709c:	add	r8, r8, r9
   170a0:	eor	r8, r8, r9, lsr #9
   170a4:	add	r1, r1, r7
   170a8:	add	r9, r9, r1
   170ac:	add	ip, ip, r8
   170b0:	str	r4, [r2, #-16]
   170b4:	str	lr, [r2, #-20]	; 0xffffffec
   170b8:	str	r1, [r2, #-28]	; 0xffffffe4
   170bc:	str	r9, [r2, #-32]	; 0xffffffe0
   170c0:	str	ip, [r2, #-24]	; 0xffffffe8
   170c4:	str	r7, [r2, #-8]
   170c8:	str	r8, [r2, #-4]
   170cc:	str	r6, [r2, #-12]
   170d0:	cmp	r3, r2
   170d4:	bne	17010 <__assert_fail@plt+0x5b58>
   170d8:	mov	r3, #0
   170dc:	str	r3, [r0, #1032]	; 0x408
   170e0:	str	r3, [r0, #1028]	; 0x404
   170e4:	str	r3, [r0, #1024]	; 0x400
   170e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170ec:	rsbcc	r9, r0, r9, lsl r1
   170f0:	strbtgt	lr, [pc], #2587	; 170f8 <__assert_fail@plt+0x5c40>
   170f4:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   170f8:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   170fc:	svceq	0x00421ad8
   17100:	tstgt	r6, #1200	; 0x4b0
   17104:	ldrbls	r0, [r9, #89]	; 0x59
   17108:	cmnne	r7, #360	; 0x168
   1710c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17110:	sub	sp, sp, #220	; 0xdc
   17114:	mov	r8, r1
   17118:	ldr	r5, [sp, #256]	; 0x100
   1711c:	mov	r9, r2
   17120:	str	r5, [sp]
   17124:	mov	r7, r3
   17128:	mov	sl, r0
   1712c:	bl	11374 <renameat2@plt>
   17130:	mov	r4, r0
   17134:	bl	11338 <__errno_location@plt>
   17138:	cmp	r4, #0
   1713c:	blt	1714c <__assert_fail@plt+0x5c94>
   17140:	mov	r0, r4
   17144:	add	sp, sp, #220	; 0xdc
   17148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1714c:	ldr	r2, [r0]
   17150:	mov	r6, r0
   17154:	sub	r3, r2, #22
   17158:	bic	r3, r3, #16
   1715c:	cmp	r2, #95	; 0x5f
   17160:	cmpne	r3, #0
   17164:	movne	fp, #1
   17168:	moveq	fp, #0
   1716c:	bne	17140 <__assert_fail@plt+0x5c88>
   17170:	cmp	r5, #0
   17174:	beq	171c4 <__assert_fail@plt+0x5d0c>
   17178:	cmp	r5, #1
   1717c:	bne	172b4 <__assert_fail@plt+0x5dfc>
   17180:	mov	r3, #256	; 0x100
   17184:	str	r3, [sp]
   17188:	mov	r2, r7
   1718c:	add	r3, sp, #112	; 0x70
   17190:	mov	r1, r9
   17194:	mov	r0, #3
   17198:	bl	11218 <__fxstatat64@plt>
   1719c:	cmp	r0, #0
   171a0:	beq	1724c <__assert_fail@plt+0x5d94>
   171a4:	ldr	r3, [r6]
   171a8:	cmp	r3, #75	; 0x4b
   171ac:	beq	1724c <__assert_fail@plt+0x5d94>
   171b0:	cmp	r3, #2
   171b4:	beq	171c0 <__assert_fail@plt+0x5d08>
   171b8:	mvn	r4, #0
   171bc:	b	17140 <__assert_fail@plt+0x5c88>
   171c0:	mov	fp, r5
   171c4:	mov	r0, r8
   171c8:	bl	11314 <strlen@plt>
   171cc:	mov	r4, r0
   171d0:	mov	r0, r7
   171d4:	bl	11314 <strlen@plt>
   171d8:	cmp	r0, #0
   171dc:	cmpne	r4, #0
   171e0:	beq	17298 <__assert_fail@plt+0x5de0>
   171e4:	add	r4, r8, r4
   171e8:	add	r0, r7, r0
   171ec:	ldrb	r2, [r4, #-1]
   171f0:	ldrb	r3, [r0, #-1]
   171f4:	cmp	r2, #47	; 0x2f
   171f8:	cmpne	r3, #47	; 0x2f
   171fc:	bne	17298 <__assert_fail@plt+0x5de0>
   17200:	mov	r4, #256	; 0x100
   17204:	str	r4, [sp]
   17208:	add	r3, sp, #8
   1720c:	mov	r2, r8
   17210:	mov	r1, sl
   17214:	mov	r0, #3
   17218:	bl	11218 <__fxstatat64@plt>
   1721c:	cmp	r0, #0
   17220:	bne	171b8 <__assert_fail@plt+0x5d00>
   17224:	cmp	fp, #0
   17228:	beq	1725c <__assert_fail@plt+0x5da4>
   1722c:	ldr	r3, [sp, #24]
   17230:	and	r3, r3, #61440	; 0xf000
   17234:	cmp	r3, #16384	; 0x4000
   17238:	beq	17298 <__assert_fail@plt+0x5de0>
   1723c:	mov	r3, #2
   17240:	str	r3, [r6]
   17244:	mvn	r4, #0
   17248:	b	17140 <__assert_fail@plt+0x5c88>
   1724c:	mov	r3, #17
   17250:	str	r3, [r6]
   17254:	mvn	r4, #0
   17258:	b	17140 <__assert_fail@plt+0x5c88>
   1725c:	str	r4, [sp]
   17260:	add	r3, sp, #112	; 0x70
   17264:	mov	r2, r7
   17268:	mov	r1, r9
   1726c:	mov	r0, #3
   17270:	bl	11218 <__fxstatat64@plt>
   17274:	cmp	r0, #0
   17278:	beq	172c4 <__assert_fail@plt+0x5e0c>
   1727c:	ldr	r3, [r6]
   17280:	cmp	r3, #2
   17284:	bne	171b8 <__assert_fail@plt+0x5d00>
   17288:	ldr	r3, [sp, #24]
   1728c:	and	r3, r3, #61440	; 0xf000
   17290:	cmp	r3, #16384	; 0x4000
   17294:	bne	171b8 <__assert_fail@plt+0x5d00>
   17298:	mov	r3, r7
   1729c:	mov	r2, r9
   172a0:	mov	r1, r8
   172a4:	mov	r0, sl
   172a8:	bl	11428 <renameat@plt>
   172ac:	mov	r4, r0
   172b0:	b	17140 <__assert_fail@plt+0x5c88>
   172b4:	mov	r3, #95	; 0x5f
   172b8:	str	r3, [r0]
   172bc:	mvn	r4, #0
   172c0:	b	17140 <__assert_fail@plt+0x5c88>
   172c4:	ldr	r3, [sp, #128]	; 0x80
   172c8:	and	r3, r3, #61440	; 0xf000
   172cc:	cmp	r3, #16384	; 0x4000
   172d0:	movne	r3, #20
   172d4:	strne	r3, [r6]
   172d8:	bne	171b8 <__assert_fail@plt+0x5d00>
   172dc:	ldr	r3, [sp, #24]
   172e0:	and	r3, r3, #61440	; 0xf000
   172e4:	cmp	r3, #16384	; 0x4000
   172e8:	beq	17298 <__assert_fail@plt+0x5de0>
   172ec:	mov	r3, #21
   172f0:	str	r3, [r6]
   172f4:	mvn	r4, #0
   172f8:	b	17140 <__assert_fail@plt+0x5c88>
   172fc:	cmp	r0, #2
   17300:	push	{r4, r5, r6, r7, r8, lr}
   17304:	mov	r4, r0
   17308:	bhi	17330 <__assert_fail@plt+0x5e78>
   1730c:	bl	189d8 <__assert_fail@plt+0x7520>
   17310:	mov	r7, r0
   17314:	bl	11338 <__errno_location@plt>
   17318:	mov	r5, r0
   1731c:	mov	r0, r4
   17320:	ldr	r6, [r5]
   17324:	mov	r4, r7
   17328:	bl	114ac <close@plt>
   1732c:	str	r6, [r5]
   17330:	mov	r0, r4
   17334:	pop	{r4, r5, r6, r7, r8, pc}
   17338:	push	{r4, r5, r6, lr}
   1733c:	sub	sp, sp, #32
   17340:	cmp	r1, #0
   17344:	mov	r4, r0
   17348:	ldr	r5, [sp, #48]	; 0x30
   1734c:	ldr	r6, [sp, #52]	; 0x34
   17350:	beq	17668 <__assert_fail@plt+0x61b0>
   17354:	stm	sp, {r2, r3}
   17358:	mov	r3, r1
   1735c:	ldr	r2, [pc, #808]	; 1768c <__assert_fail@plt+0x61d4>
   17360:	mov	r1, #1
   17364:	bl	113a4 <__fprintf_chk@plt>
   17368:	mov	r2, #5
   1736c:	ldr	r1, [pc, #796]	; 17690 <__assert_fail@plt+0x61d8>
   17370:	mov	r0, #0
   17374:	bl	111e8 <dcgettext@plt>
   17378:	ldr	r3, [pc, #788]	; 17694 <__assert_fail@plt+0x61dc>
   1737c:	ldr	r2, [pc, #788]	; 17698 <__assert_fail@plt+0x61e0>
   17380:	str	r3, [sp]
   17384:	mov	r1, #1
   17388:	mov	r3, r0
   1738c:	mov	r0, r4
   17390:	bl	113a4 <__fprintf_chk@plt>
   17394:	mov	r1, r4
   17398:	mov	r0, #10
   1739c:	bl	111dc <fputc_unlocked@plt>
   173a0:	mov	r2, #5
   173a4:	ldr	r1, [pc, #752]	; 1769c <__assert_fail@plt+0x61e4>
   173a8:	mov	r0, #0
   173ac:	bl	111e8 <dcgettext@plt>
   173b0:	mov	r1, #1
   173b4:	ldr	r3, [pc, #740]	; 176a0 <__assert_fail@plt+0x61e8>
   173b8:	mov	r2, r0
   173bc:	mov	r0, r4
   173c0:	bl	113a4 <__fprintf_chk@plt>
   173c4:	mov	r1, r4
   173c8:	mov	r0, #10
   173cc:	bl	111dc <fputc_unlocked@plt>
   173d0:	cmp	r6, #9
   173d4:	ldrls	pc, [pc, r6, lsl #2]
   173d8:	b	17680 <__assert_fail@plt+0x61c8>
   173dc:	andeq	r7, r1, r0, ror #8
   173e0:	andeq	r7, r1, r8, ror #8
   173e4:	muleq	r1, r4, r4
   173e8:	andeq	r7, r1, r8, asr #9
   173ec:	andeq	r7, r1, r4, lsl #10
   173f0:	andeq	r7, r1, r0, asr #10
   173f4:	andeq	r7, r1, ip, ror r5
   173f8:	andeq	r7, r1, r0, asr #11
   173fc:	andeq	r7, r1, r0, lsl r6
   17400:	andeq	r7, r1, r4, lsl #8
   17404:	ldr	r1, [pc, #664]	; 176a4 <__assert_fail@plt+0x61ec>
   17408:	mov	r2, #5
   1740c:	mov	r0, #0
   17410:	bl	111e8 <dcgettext@plt>
   17414:	ldr	ip, [r5, #32]
   17418:	ldr	r1, [r5, #28]
   1741c:	ldr	r2, [r5, #24]
   17420:	ldr	r3, [r5]
   17424:	ldr	r6, [r5, #20]
   17428:	str	ip, [sp, #28]
   1742c:	ldr	lr, [r5, #16]
   17430:	str	r1, [sp, #24]
   17434:	ldr	ip, [r5, #12]
   17438:	str	r2, [sp, #20]
   1743c:	ldr	r1, [r5, #8]
   17440:	ldr	r2, [r5, #4]
   17444:	str	r6, [sp, #16]
   17448:	stmib	sp, {r1, ip, lr}
   1744c:	mov	r1, #1
   17450:	str	r2, [sp]
   17454:	mov	r2, r0
   17458:	mov	r0, r4
   1745c:	bl	113a4 <__fprintf_chk@plt>
   17460:	add	sp, sp, #32
   17464:	pop	{r4, r5, r6, pc}
   17468:	mov	r2, #5
   1746c:	ldr	r1, [pc, #564]	; 176a8 <__assert_fail@plt+0x61f0>
   17470:	mov	r0, #0
   17474:	bl	111e8 <dcgettext@plt>
   17478:	ldr	r3, [r5]
   1747c:	mov	r1, #1
   17480:	mov	r2, r0
   17484:	mov	r0, r4
   17488:	add	sp, sp, #32
   1748c:	pop	{r4, r5, r6, lr}
   17490:	b	113a4 <__fprintf_chk@plt>
   17494:	mov	r2, #5
   17498:	ldr	r1, [pc, #524]	; 176ac <__assert_fail@plt+0x61f4>
   1749c:	mov	r0, #0
   174a0:	bl	111e8 <dcgettext@plt>
   174a4:	ldr	r2, [r5, #4]
   174a8:	ldr	r3, [r5]
   174ac:	mov	r1, #1
   174b0:	str	r2, [sp, #48]	; 0x30
   174b4:	mov	r2, r0
   174b8:	mov	r0, r4
   174bc:	add	sp, sp, #32
   174c0:	pop	{r4, r5, r6, lr}
   174c4:	b	113a4 <__fprintf_chk@plt>
   174c8:	mov	r2, #5
   174cc:	ldr	r1, [pc, #476]	; 176b0 <__assert_fail@plt+0x61f8>
   174d0:	mov	r0, #0
   174d4:	bl	111e8 <dcgettext@plt>
   174d8:	ldr	r1, [r5, #8]
   174dc:	ldr	r2, [r5, #4]
   174e0:	ldr	r3, [r5]
   174e4:	str	r1, [sp, #52]	; 0x34
   174e8:	str	r2, [sp, #48]	; 0x30
   174ec:	mov	r1, #1
   174f0:	mov	r2, r0
   174f4:	mov	r0, r4
   174f8:	add	sp, sp, #32
   174fc:	pop	{r4, r5, r6, lr}
   17500:	b	113a4 <__fprintf_chk@plt>
   17504:	mov	r2, #5
   17508:	ldr	r1, [pc, #420]	; 176b4 <__assert_fail@plt+0x61fc>
   1750c:	mov	r0, #0
   17510:	bl	111e8 <dcgettext@plt>
   17514:	ldr	r1, [r5, #8]
   17518:	ldr	ip, [r5, #12]
   1751c:	ldr	r2, [r5, #4]
   17520:	ldr	r3, [r5]
   17524:	stmib	sp, {r1, ip}
   17528:	str	r2, [sp]
   1752c:	mov	r1, #1
   17530:	mov	r2, r0
   17534:	mov	r0, r4
   17538:	bl	113a4 <__fprintf_chk@plt>
   1753c:	b	17460 <__assert_fail@plt+0x5fa8>
   17540:	mov	r2, #5
   17544:	ldr	r1, [pc, #364]	; 176b8 <__assert_fail@plt+0x6200>
   17548:	mov	r0, #0
   1754c:	bl	111e8 <dcgettext@plt>
   17550:	add	r1, r5, #8
   17554:	ldr	r2, [r5, #4]
   17558:	ldm	r1, {r1, ip, lr}
   1755c:	ldr	r3, [r5]
   17560:	str	r2, [sp]
   17564:	stmib	sp, {r1, ip, lr}
   17568:	mov	r1, #1
   1756c:	mov	r2, r0
   17570:	mov	r0, r4
   17574:	bl	113a4 <__fprintf_chk@plt>
   17578:	b	17460 <__assert_fail@plt+0x5fa8>
   1757c:	mov	r2, #5
   17580:	ldr	r1, [pc, #308]	; 176bc <__assert_fail@plt+0x6204>
   17584:	mov	r0, #0
   17588:	bl	111e8 <dcgettext@plt>
   1758c:	add	r1, r5, #8
   17590:	ldr	r2, [r5, #4]
   17594:	ldm	r1, {r1, ip, lr}
   17598:	ldr	r6, [r5, #20]
   1759c:	ldr	r3, [r5]
   175a0:	stmib	sp, {r1, ip, lr}
   175a4:	mov	r1, #1
   175a8:	str	r2, [sp]
   175ac:	str	r6, [sp, #16]
   175b0:	mov	r2, r0
   175b4:	mov	r0, r4
   175b8:	bl	113a4 <__fprintf_chk@plt>
   175bc:	b	17460 <__assert_fail@plt+0x5fa8>
   175c0:	mov	r2, #5
   175c4:	ldr	r1, [pc, #244]	; 176c0 <__assert_fail@plt+0x6208>
   175c8:	mov	r0, #0
   175cc:	bl	111e8 <dcgettext@plt>
   175d0:	ldr	r2, [r5, #24]
   175d4:	ldr	r3, [r5]
   175d8:	ldr	r6, [r5, #20]
   175dc:	ldr	lr, [r5, #16]
   175e0:	ldr	ip, [r5, #12]
   175e4:	str	r2, [sp, #20]
   175e8:	ldr	r1, [r5, #8]
   175ec:	ldr	r2, [r5, #4]
   175f0:	str	r6, [sp, #16]
   175f4:	stmib	sp, {r1, ip, lr}
   175f8:	mov	r1, #1
   175fc:	str	r2, [sp]
   17600:	mov	r2, r0
   17604:	mov	r0, r4
   17608:	bl	113a4 <__fprintf_chk@plt>
   1760c:	b	17460 <__assert_fail@plt+0x5fa8>
   17610:	mov	r2, #5
   17614:	ldr	r1, [pc, #168]	; 176c4 <__assert_fail@plt+0x620c>
   17618:	mov	r0, #0
   1761c:	bl	111e8 <dcgettext@plt>
   17620:	ldr	r1, [r5, #28]
   17624:	ldr	r2, [r5, #24]
   17628:	ldr	r3, [r5]
   1762c:	ldr	r6, [r5, #20]
   17630:	ldr	lr, [r5, #16]
   17634:	str	r1, [sp, #24]
   17638:	ldr	ip, [r5, #12]
   1763c:	str	r2, [sp, #20]
   17640:	ldr	r1, [r5, #8]
   17644:	ldr	r2, [r5, #4]
   17648:	str	r6, [sp, #16]
   1764c:	stmib	sp, {r1, ip, lr}
   17650:	mov	r1, #1
   17654:	str	r2, [sp]
   17658:	mov	r2, r0
   1765c:	mov	r0, r4
   17660:	bl	113a4 <__fprintf_chk@plt>
   17664:	b	17460 <__assert_fail@plt+0x5fa8>
   17668:	str	r3, [sp]
   1766c:	mov	r1, #1
   17670:	mov	r3, r2
   17674:	ldr	r2, [pc, #76]	; 176c8 <__assert_fail@plt+0x6210>
   17678:	bl	113a4 <__fprintf_chk@plt>
   1767c:	b	17368 <__assert_fail@plt+0x5eb0>
   17680:	mov	r2, #5
   17684:	ldr	r1, [pc, #64]	; 176cc <__assert_fail@plt+0x6214>
   17688:	b	1740c <__assert_fail@plt+0x5f54>
   1768c:	andeq	sl, r1, r0, ror #12
   17690:	andeq	sl, r1, r4, ror r6
   17694:	andeq	r0, r0, r6, ror #15
   17698:	andeq	sl, r1, ip, asr #18
   1769c:	andeq	sl, r1, r8, ror r6
   176a0:	andeq	sl, r1, r4, lsr #14
   176a4:	andeq	sl, r1, r4, asr r8
   176a8:	andeq	sl, r1, r8, asr #14
   176ac:	andeq	sl, r1, r8, asr r7
   176b0:	andeq	sl, r1, r0, ror r7
   176b4:	andeq	sl, r1, ip, lsl #15
   176b8:	andeq	sl, r1, ip, lsr #15
   176bc:	ldrdeq	sl, [r1], -r0
   176c0:	strdeq	sl, [r1], -r8
   176c4:	andeq	sl, r1, r4, lsr #16
   176c8:	andeq	sl, r1, ip, ror #12
   176cc:	andeq	sl, r1, r8, lsl #17
   176d0:	push	{r4, r5, lr}
   176d4:	sub	sp, sp, #12
   176d8:	ldr	r5, [sp, #24]
   176dc:	ldr	ip, [r5]
   176e0:	cmp	ip, #0
   176e4:	beq	17700 <__assert_fail@plt+0x6248>
   176e8:	mov	lr, r5
   176ec:	mov	ip, #0
   176f0:	ldr	r4, [lr, #4]!
   176f4:	add	ip, ip, #1
   176f8:	cmp	r4, #0
   176fc:	bne	176f0 <__assert_fail@plt+0x6238>
   17700:	stm	sp, {r5, ip}
   17704:	bl	17338 <__assert_fail@plt+0x5e80>
   17708:	add	sp, sp, #12
   1770c:	pop	{r4, r5, pc}
   17710:	push	{r4, r5, lr}
   17714:	sub	sp, sp, #52	; 0x34
   17718:	add	r5, sp, #4
   1771c:	ldr	r4, [sp, #64]	; 0x40
   17720:	mov	ip, #0
   17724:	sub	r4, r4, #4
   17728:	ldr	lr, [r4, #4]!
   1772c:	cmp	lr, #0
   17730:	str	lr, [r5, #4]!
   17734:	beq	17744 <__assert_fail@plt+0x628c>
   17738:	add	ip, ip, #1
   1773c:	cmp	ip, #10
   17740:	bne	17728 <__assert_fail@plt+0x6270>
   17744:	add	lr, sp, #8
   17748:	str	ip, [sp, #4]
   1774c:	str	lr, [sp]
   17750:	bl	17338 <__assert_fail@plt+0x5e80>
   17754:	add	sp, sp, #52	; 0x34
   17758:	pop	{r4, r5, pc}
   1775c:	push	{r3}		; (str r3, [sp, #-4]!)
   17760:	push	{r4, lr}
   17764:	sub	sp, sp, #60	; 0x3c
   17768:	add	lr, sp, #56	; 0x38
   1776c:	add	r3, sp, #72	; 0x48
   17770:	str	r3, [lr, #-44]!	; 0xffffffd4
   17774:	add	r4, sp, #68	; 0x44
   17778:	mov	r3, #0
   1777c:	ldr	ip, [r4, #4]!
   17780:	cmp	ip, #0
   17784:	str	ip, [lr, #4]!
   17788:	beq	17798 <__assert_fail@plt+0x62e0>
   1778c:	add	r3, r3, #1
   17790:	cmp	r3, #10
   17794:	bne	1777c <__assert_fail@plt+0x62c4>
   17798:	add	ip, sp, #16
   1779c:	str	r3, [sp, #4]
   177a0:	str	ip, [sp]
   177a4:	ldr	r3, [sp, #68]	; 0x44
   177a8:	bl	17338 <__assert_fail@plt+0x5e80>
   177ac:	add	sp, sp, #60	; 0x3c
   177b0:	pop	{r4, lr}
   177b4:	add	sp, sp, #4
   177b8:	bx	lr
   177bc:	ldr	r3, [pc, #116]	; 17838 <__assert_fail@plt+0x6380>
   177c0:	push	{r4, lr}
   177c4:	mov	r0, #10
   177c8:	ldr	r1, [r3]
   177cc:	bl	111dc <fputc_unlocked@plt>
   177d0:	mov	r2, #5
   177d4:	ldr	r1, [pc, #96]	; 1783c <__assert_fail@plt+0x6384>
   177d8:	mov	r0, #0
   177dc:	bl	111e8 <dcgettext@plt>
   177e0:	ldr	r2, [pc, #88]	; 17840 <__assert_fail@plt+0x6388>
   177e4:	mov	r1, r0
   177e8:	mov	r0, #1
   177ec:	bl	11380 <__printf_chk@plt>
   177f0:	mov	r2, #5
   177f4:	ldr	r1, [pc, #72]	; 17844 <__assert_fail@plt+0x638c>
   177f8:	mov	r0, #0
   177fc:	bl	111e8 <dcgettext@plt>
   17800:	ldr	r3, [pc, #64]	; 17848 <__assert_fail@plt+0x6390>
   17804:	ldr	r2, [pc, #64]	; 1784c <__assert_fail@plt+0x6394>
   17808:	mov	r1, r0
   1780c:	mov	r0, #1
   17810:	bl	11380 <__printf_chk@plt>
   17814:	mov	r2, #5
   17818:	ldr	r1, [pc, #48]	; 17850 <__assert_fail@plt+0x6398>
   1781c:	mov	r0, #0
   17820:	bl	111e8 <dcgettext@plt>
   17824:	ldr	r2, [pc, #40]	; 17854 <__assert_fail@plt+0x639c>
   17828:	pop	{r4, lr}
   1782c:	mov	r1, r0
   17830:	mov	r0, #1
   17834:	b	11380 <__printf_chk@plt>
   17838:			; <UNDEFINED> instruction: 0x0002b1b4
   1783c:	andeq	sl, r1, r4, asr #17
   17840:	ldrdeq	sl, [r1], -r8
   17844:	strdeq	sl, [r1], -r0
   17848:	andeq	sl, r1, r8, asr #1
   1784c:	strdeq	sl, [r1], -r0
   17850:	andeq	sl, r1, r4, lsl #18
   17854:	andeq	sl, r1, ip, lsr #18
   17858:	push	{r4, lr}
   1785c:	bl	11458 <aligned_alloc@plt>
   17860:	cmp	r0, #0
   17864:	popne	{r4, pc}
   17868:	bl	17db4 <__assert_fail@plt+0x68fc>
   1786c:	push	{r4, lr}
   17870:	bl	185c8 <__assert_fail@plt+0x7110>
   17874:	cmp	r0, #0
   17878:	popne	{r4, pc}
   1787c:	bl	17db4 <__assert_fail@plt+0x68fc>
   17880:	push	{r4, lr}
   17884:	bl	185c8 <__assert_fail@plt+0x7110>
   17888:	cmp	r0, #0
   1788c:	popne	{r4, pc}
   17890:	bl	17db4 <__assert_fail@plt+0x68fc>
   17894:	push	{r4, lr}
   17898:	bl	185c8 <__assert_fail@plt+0x7110>
   1789c:	cmp	r0, #0
   178a0:	popne	{r4, pc}
   178a4:	bl	17db4 <__assert_fail@plt+0x68fc>
   178a8:	push	{r4, r5, r6, lr}
   178ac:	mov	r5, r0
   178b0:	mov	r4, r1
   178b4:	bl	185f4 <__assert_fail@plt+0x713c>
   178b8:	cmp	r0, #0
   178bc:	popne	{r4, r5, r6, pc}
   178c0:	adds	r4, r4, #0
   178c4:	movne	r4, #1
   178c8:	cmp	r5, #0
   178cc:	orreq	r4, r4, #1
   178d0:	cmp	r4, #0
   178d4:	popeq	{r4, r5, r6, pc}
   178d8:	bl	17db4 <__assert_fail@plt+0x68fc>
   178dc:	push	{r4, lr}
   178e0:	cmp	r1, #0
   178e4:	orreq	r1, r1, #1
   178e8:	bl	185f4 <__assert_fail@plt+0x713c>
   178ec:	cmp	r0, #0
   178f0:	popne	{r4, pc}
   178f4:	bl	17db4 <__assert_fail@plt+0x68fc>
   178f8:	push	{r4, r5, r6, lr}
   178fc:	mov	r6, r0
   17900:	mov	r5, r1
   17904:	mov	r4, r2
   17908:	bl	1898c <__assert_fail@plt+0x74d4>
   1790c:	cmp	r0, #0
   17910:	popne	{r4, r5, r6, pc}
   17914:	cmp	r6, #0
   17918:	beq	17928 <__assert_fail@plt+0x6470>
   1791c:	cmp	r5, #0
   17920:	cmpne	r4, #0
   17924:	popeq	{r4, r5, r6, pc}
   17928:	bl	17db4 <__assert_fail@plt+0x68fc>
   1792c:	b	178f8 <__assert_fail@plt+0x6440>
   17930:	cmp	r2, #0
   17934:	cmpne	r1, #0
   17938:	moveq	r2, #1
   1793c:	moveq	r1, r2
   17940:	push	{r4, lr}
   17944:	bl	1898c <__assert_fail@plt+0x74d4>
   17948:	cmp	r0, #0
   1794c:	popne	{r4, pc}
   17950:	bl	17db4 <__assert_fail@plt+0x68fc>
   17954:	mov	r2, r1
   17958:	mov	r1, r0
   1795c:	mov	r0, #0
   17960:	b	178f8 <__assert_fail@plt+0x6440>
   17964:	mov	r2, r1
   17968:	mov	r1, r0
   1796c:	mov	r0, #0
   17970:	b	17930 <__assert_fail@plt+0x6478>
   17974:	push	{r4, r5, r6, lr}
   17978:	subs	r6, r0, #0
   1797c:	sub	sp, sp, #8
   17980:	mov	r5, r1
   17984:	ldr	r4, [r1]
   17988:	beq	179c4 <__assert_fail@plt+0x650c>
   1798c:	lsr	r1, r4, #1
   17990:	add	r3, r1, #1
   17994:	mvn	r3, r3
   17998:	cmp	r4, r3
   1799c:	bhi	179c0 <__assert_fail@plt+0x6508>
   179a0:	add	r4, r4, #1
   179a4:	add	r4, r4, r1
   179a8:	mov	r0, r6
   179ac:	mov	r1, r4
   179b0:	bl	178f8 <__assert_fail@plt+0x6440>
   179b4:	str	r4, [r5]
   179b8:	add	sp, sp, #8
   179bc:	pop	{r4, r5, r6, pc}
   179c0:	bl	17db4 <__assert_fail@plt+0x68fc>
   179c4:	cmp	r4, #0
   179c8:	bne	179a8 <__assert_fail@plt+0x64f0>
   179cc:	mov	r1, r2
   179d0:	mov	r0, #64	; 0x40
   179d4:	str	r2, [sp, #4]
   179d8:	bl	18ad8 <__assert_fail@plt+0x7620>
   179dc:	ldr	r2, [sp, #4]
   179e0:	cmp	r0, #0
   179e4:	movne	r4, r0
   179e8:	addeq	r4, r0, #1
   179ec:	b	179a8 <__assert_fail@plt+0x64f0>
   179f0:	mov	r2, #1
   179f4:	b	17974 <__assert_fail@plt+0x64bc>
   179f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179fc:	sub	sp, sp, #12
   17a00:	ldr	r6, [r1]
   17a04:	mov	sl, r1
   17a08:	mov	r9, r0
   17a0c:	asrs	r4, r6, #1
   17a10:	mov	r5, r2
   17a14:	mov	fp, r3
   17a18:	ldr	r7, [sp, #48]	; 0x30
   17a1c:	bmi	17b88 <__assert_fail@plt+0x66d0>
   17a20:	mvn	r3, #-2147483648	; 0x80000000
   17a24:	sub	r3, r3, r4
   17a28:	cmp	r6, r3
   17a2c:	movle	r3, #0
   17a30:	movgt	r3, #1
   17a34:	mvn	r8, fp
   17a38:	cmp	r3, #0
   17a3c:	addeq	r4, r4, r6
   17a40:	mvnne	r4, #-2147483648	; 0x80000000
   17a44:	lsr	r8, r8, #31
   17a48:	cmp	fp, r4
   17a4c:	movge	r3, #0
   17a50:	andlt	r3, r8, #1
   17a54:	cmp	r3, #0
   17a58:	beq	17b40 <__assert_fail@plt+0x6688>
   17a5c:	cmp	r7, #0
   17a60:	blt	17c10 <__assert_fail@plt+0x6758>
   17a64:	bne	17c08 <__assert_fail@plt+0x6750>
   17a68:	mov	r2, #64	; 0x40
   17a6c:	mov	r1, r7
   17a70:	mov	r0, r2
   17a74:	str	r2, [sp, #4]
   17a78:	bl	18ce4 <__assert_fail@plt+0x782c>
   17a7c:	ldr	r2, [sp, #4]
   17a80:	mov	r1, r7
   17a84:	mov	r4, r0
   17a88:	mov	r0, r2
   17a8c:	bl	18f04 <__assert_fail@plt+0x7a4c>
   17a90:	ldr	r2, [sp, #4]
   17a94:	sub	r1, r2, r1
   17a98:	cmp	r9, #0
   17a9c:	sub	r3, r4, r6
   17aa0:	streq	r9, [sl]
   17aa4:	cmp	r3, r5
   17aa8:	bge	17b2c <__assert_fail@plt+0x6674>
   17aac:	cmp	r5, #0
   17ab0:	blt	17b9c <__assert_fail@plt+0x66e4>
   17ab4:	cmp	r6, #0
   17ab8:	blt	17ad8 <__assert_fail@plt+0x6620>
   17abc:	mvn	r3, #-2147483648	; 0x80000000
   17ac0:	sub	r3, r3, r5
   17ac4:	cmp	r6, r3
   17ac8:	movle	r3, #0
   17acc:	movgt	r3, #1
   17ad0:	cmp	r3, #0
   17ad4:	bne	17c98 <__assert_fail@plt+0x67e0>
   17ad8:	add	r5, r6, r5
   17adc:	cmp	fp, r5
   17ae0:	movge	r8, #0
   17ae4:	andlt	r8, r8, #1
   17ae8:	cmp	r8, #0
   17aec:	mov	r4, r5
   17af0:	bne	17c98 <__assert_fail@plt+0x67e0>
   17af4:	cmp	r7, #0
   17af8:	blt	17bb0 <__assert_fail@plt+0x66f8>
   17afc:	beq	17b28 <__assert_fail@plt+0x6670>
   17b00:	cmp	r5, #0
   17b04:	blt	17c58 <__assert_fail@plt+0x67a0>
   17b08:	mov	r1, r7
   17b0c:	mvn	r0, #-2147483648	; 0x80000000
   17b10:	bl	18ce4 <__assert_fail@plt+0x782c>
   17b14:	cmp	r5, r0
   17b18:	movle	r0, #0
   17b1c:	movgt	r0, #1
   17b20:	cmp	r0, #0
   17b24:	bne	17c98 <__assert_fail@plt+0x67e0>
   17b28:	mul	r1, r5, r7
   17b2c:	mov	r0, r9
   17b30:	bl	178a8 <__assert_fail@plt+0x63f0>
   17b34:	str	r4, [sl]
   17b38:	add	sp, sp, #12
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b40:	cmp	r7, #0
   17b44:	blt	17bdc <__assert_fail@plt+0x6724>
   17b48:	beq	17a68 <__assert_fail@plt+0x65b0>
   17b4c:	cmp	r4, #0
   17b50:	blt	17c18 <__assert_fail@plt+0x6760>
   17b54:	mov	r1, r7
   17b58:	mvn	r0, #-2147483648	; 0x80000000
   17b5c:	bl	18ce4 <__assert_fail@plt+0x782c>
   17b60:	cmp	r0, r4
   17b64:	movge	r0, #0
   17b68:	movlt	r0, #1
   17b6c:	cmp	r0, #0
   17b70:	mvnne	r2, #-2147483648	; 0x80000000
   17b74:	bne	17a6c <__assert_fail@plt+0x65b4>
   17b78:	mul	r1, r7, r4
   17b7c:	cmp	r1, #63	; 0x3f
   17b80:	bgt	17a98 <__assert_fail@plt+0x65e0>
   17b84:	b	17a68 <__assert_fail@plt+0x65b0>
   17b88:	rsb	r3, r4, #-2147483648	; 0x80000000
   17b8c:	cmp	r6, r3
   17b90:	movge	r3, #0
   17b94:	movlt	r3, #1
   17b98:	b	17a34 <__assert_fail@plt+0x657c>
   17b9c:	rsb	r3, r5, #-2147483648	; 0x80000000
   17ba0:	cmp	r6, r3
   17ba4:	movge	r3, #0
   17ba8:	movlt	r3, #1
   17bac:	b	17ad0 <__assert_fail@plt+0x6618>
   17bb0:	cmp	r5, #0
   17bb4:	blt	17c3c <__assert_fail@plt+0x6784>
   17bb8:	cmn	r7, #1
   17bbc:	beq	17b28 <__assert_fail@plt+0x6670>
   17bc0:	mov	r1, r7
   17bc4:	mov	r0, #-2147483648	; 0x80000000
   17bc8:	bl	18ce4 <__assert_fail@plt+0x782c>
   17bcc:	cmp	r5, r0
   17bd0:	movle	r0, #0
   17bd4:	movgt	r0, #1
   17bd8:	b	17b20 <__assert_fail@plt+0x6668>
   17bdc:	cmp	r4, #0
   17be0:	blt	17c7c <__assert_fail@plt+0x67c4>
   17be4:	cmn	r7, #1
   17be8:	beq	17b78 <__assert_fail@plt+0x66c0>
   17bec:	mov	r1, r7
   17bf0:	mov	r0, #-2147483648	; 0x80000000
   17bf4:	bl	18ce4 <__assert_fail@plt+0x782c>
   17bf8:	cmp	r0, r4
   17bfc:	movge	r0, #0
   17c00:	movlt	r0, #1
   17c04:	b	17b6c <__assert_fail@plt+0x66b4>
   17c08:	mov	r4, fp
   17c0c:	b	17b54 <__assert_fail@plt+0x669c>
   17c10:	mov	r4, fp
   17c14:	b	17be4 <__assert_fail@plt+0x672c>
   17c18:	cmn	r4, #1
   17c1c:	beq	17b78 <__assert_fail@plt+0x66c0>
   17c20:	mov	r1, r4
   17c24:	mov	r0, #-2147483648	; 0x80000000
   17c28:	bl	18ce4 <__assert_fail@plt+0x782c>
   17c2c:	cmp	r7, r0
   17c30:	movle	r0, #0
   17c34:	movgt	r0, #1
   17c38:	b	17b6c <__assert_fail@plt+0x66b4>
   17c3c:	mov	r1, r7
   17c40:	mvn	r0, #-2147483648	; 0x80000000
   17c44:	bl	18ce4 <__assert_fail@plt+0x782c>
   17c48:	cmp	r5, r0
   17c4c:	movge	r0, #0
   17c50:	movlt	r0, #1
   17c54:	b	17b20 <__assert_fail@plt+0x6668>
   17c58:	cmn	r5, #1
   17c5c:	beq	17b28 <__assert_fail@plt+0x6670>
   17c60:	mov	r1, r5
   17c64:	mov	r0, #-2147483648	; 0x80000000
   17c68:	bl	18ce4 <__assert_fail@plt+0x782c>
   17c6c:	cmp	r7, r0
   17c70:	movle	r0, #0
   17c74:	movgt	r0, #1
   17c78:	b	17b20 <__assert_fail@plt+0x6668>
   17c7c:	mov	r1, r7
   17c80:	mvn	r0, #-2147483648	; 0x80000000
   17c84:	bl	18ce4 <__assert_fail@plt+0x782c>
   17c88:	cmp	r0, r4
   17c8c:	movle	r0, #0
   17c90:	movgt	r0, #1
   17c94:	b	17b6c <__assert_fail@plt+0x66b4>
   17c98:	bl	17db4 <__assert_fail@plt+0x68fc>
   17c9c:	push	{r4, lr}
   17ca0:	mov	r1, #1
   17ca4:	bl	18580 <__assert_fail@plt+0x70c8>
   17ca8:	cmp	r0, #0
   17cac:	popne	{r4, pc}
   17cb0:	bl	17db4 <__assert_fail@plt+0x68fc>
   17cb4:	push	{r4, lr}
   17cb8:	mov	r1, #1
   17cbc:	bl	18580 <__assert_fail@plt+0x70c8>
   17cc0:	cmp	r0, #0
   17cc4:	popne	{r4, pc}
   17cc8:	bl	17db4 <__assert_fail@plt+0x68fc>
   17ccc:	push	{r4, lr}
   17cd0:	bl	18580 <__assert_fail@plt+0x70c8>
   17cd4:	cmp	r0, #0
   17cd8:	popne	{r4, pc}
   17cdc:	bl	17db4 <__assert_fail@plt+0x68fc>
   17ce0:	push	{r4, lr}
   17ce4:	bl	18580 <__assert_fail@plt+0x70c8>
   17ce8:	cmp	r0, #0
   17cec:	popne	{r4, pc}
   17cf0:	bl	17db4 <__assert_fail@plt+0x68fc>
   17cf4:	push	{r4, r5, r6, lr}
   17cf8:	mov	r6, r0
   17cfc:	mov	r0, r1
   17d00:	mov	r4, r1
   17d04:	bl	185c8 <__assert_fail@plt+0x7110>
   17d08:	subs	r5, r0, #0
   17d0c:	beq	17d24 <__assert_fail@plt+0x686c>
   17d10:	mov	r2, r4
   17d14:	mov	r1, r6
   17d18:	bl	11194 <memcpy@plt>
   17d1c:	mov	r0, r5
   17d20:	pop	{r4, r5, r6, pc}
   17d24:	bl	17db4 <__assert_fail@plt+0x68fc>
   17d28:	push	{r4, r5, r6, lr}
   17d2c:	mov	r6, r0
   17d30:	mov	r0, r1
   17d34:	mov	r4, r1
   17d38:	bl	185c8 <__assert_fail@plt+0x7110>
   17d3c:	subs	r5, r0, #0
   17d40:	beq	17d58 <__assert_fail@plt+0x68a0>
   17d44:	mov	r2, r4
   17d48:	mov	r1, r6
   17d4c:	bl	11194 <memcpy@plt>
   17d50:	mov	r0, r5
   17d54:	pop	{r4, r5, r6, pc}
   17d58:	bl	17db4 <__assert_fail@plt+0x68fc>
   17d5c:	push	{r4, r5, r6, lr}
   17d60:	mov	r6, r0
   17d64:	add	r0, r1, #1
   17d68:	mov	r4, r1
   17d6c:	bl	185c8 <__assert_fail@plt+0x7110>
   17d70:	subs	r5, r0, #0
   17d74:	beq	17d94 <__assert_fail@plt+0x68dc>
   17d78:	mov	r3, #0
   17d7c:	mov	r1, r6
   17d80:	strb	r3, [r5, r4]
   17d84:	mov	r2, r4
   17d88:	bl	11194 <memcpy@plt>
   17d8c:	mov	r0, r5
   17d90:	pop	{r4, r5, r6, pc}
   17d94:	bl	17db4 <__assert_fail@plt+0x68fc>
   17d98:	push	{r4, lr}
   17d9c:	mov	r4, r0
   17da0:	bl	11314 <strlen@plt>
   17da4:	add	r1, r0, #1
   17da8:	mov	r0, r4
   17dac:	pop	{r4, lr}
   17db0:	b	17cf4 <__assert_fail@plt+0x683c>
   17db4:	ldr	r3, [pc, #44]	; 17de8 <__assert_fail@plt+0x6930>
   17db8:	push	{r4, lr}
   17dbc:	mov	r2, #5
   17dc0:	ldr	r1, [pc, #36]	; 17dec <__assert_fail@plt+0x6934>
   17dc4:	mov	r0, #0
   17dc8:	ldr	r4, [r3]
   17dcc:	bl	111e8 <dcgettext@plt>
   17dd0:	ldr	r2, [pc, #24]	; 17df0 <__assert_fail@plt+0x6938>
   17dd4:	mov	r1, #0
   17dd8:	mov	r3, r0
   17ddc:	mov	r0, r4
   17de0:	bl	1129c <error@plt>
   17de4:	bl	114a0 <abort@plt>
   17de8:	andeq	fp, r2, r8, asr r1
   17dec:	andeq	sl, r1, ip, ror r9
   17df0:	muleq	r1, ip, r4
   17df4:	push	{r4, r5, r6, r7, lr}
   17df8:	sub	sp, sp, #20
   17dfc:	mov	r6, r2
   17e00:	ldr	ip, [sp, #48]	; 0x30
   17e04:	mov	r2, r1
   17e08:	mov	r7, r3
   17e0c:	str	ip, [sp]
   17e10:	add	r3, sp, #8
   17e14:	mov	r1, #0
   17e18:	mov	r5, r0
   17e1c:	ldr	r4, [sp, #56]	; 0x38
   17e20:	bl	17fd8 <__assert_fail@plt+0x6b20>
   17e24:	cmp	r0, #0
   17e28:	bne	17eac <__assert_fail@plt+0x69f4>
   17e2c:	ldrd	r0, [sp, #8]
   17e30:	cmp	r1, r7
   17e34:	cmpeq	r0, r6
   17e38:	ldrd	r6, [sp, #40]	; 0x28
   17e3c:	movcc	r3, #1
   17e40:	movcs	r3, #0
   17e44:	cmp	r1, r7
   17e48:	cmpeq	r0, r6
   17e4c:	orrhi	r3, r3, #1
   17e50:	cmp	r3, #0
   17e54:	beq	17ea4 <__assert_fail@plt+0x69ec>
   17e58:	mov	r3, #0
   17e5c:	mvn	r2, #-1073741824	; 0xc0000000
   17e60:	cmp	r1, r3
   17e64:	cmpeq	r0, r2
   17e68:	bhi	17ed8 <__assert_fail@plt+0x6a20>
   17e6c:	bl	11338 <__errno_location@plt>
   17e70:	mov	r3, #34	; 0x22
   17e74:	mov	r6, r3
   17e78:	str	r3, [r0]
   17e7c:	cmp	r4, #0
   17e80:	moveq	r4, #1
   17e84:	mov	r0, r5
   17e88:	bl	16708 <__assert_fail@plt+0x5250>
   17e8c:	mov	r1, r6
   17e90:	ldr	r3, [sp, #52]	; 0x34
   17e94:	ldr	r2, [pc, #144]	; 17f2c <__assert_fail@plt+0x6a74>
   17e98:	str	r0, [sp]
   17e9c:	mov	r0, r4
   17ea0:	bl	1129c <error@plt>
   17ea4:	add	sp, sp, #20
   17ea8:	pop	{r4, r5, r6, r7, pc}
   17eac:	cmp	r0, #1
   17eb0:	beq	17eec <__assert_fail@plt+0x6a34>
   17eb4:	cmp	r0, #3
   17eb8:	beq	17f1c <__assert_fail@plt+0x6a64>
   17ebc:	cmp	r4, #0
   17ec0:	beq	17f0c <__assert_fail@plt+0x6a54>
   17ec4:	bl	11338 <__errno_location@plt>
   17ec8:	ldr	r6, [r0]
   17ecc:	cmp	r6, #22
   17ed0:	moveq	r6, #0
   17ed4:	b	17e84 <__assert_fail@plt+0x69cc>
   17ed8:	bl	11338 <__errno_location@plt>
   17edc:	mov	r3, #75	; 0x4b
   17ee0:	mov	r6, r3
   17ee4:	str	r3, [r0]
   17ee8:	b	17e7c <__assert_fail@plt+0x69c4>
   17eec:	bl	11338 <__errno_location@plt>
   17ef0:	mov	r3, #75	; 0x4b
   17ef4:	mov	r6, r3
   17ef8:	str	r3, [r0]
   17efc:	cmp	r4, #0
   17f00:	moveq	r4, #1
   17f04:	bne	17ecc <__assert_fail@plt+0x6a14>
   17f08:	b	17e84 <__assert_fail@plt+0x69cc>
   17f0c:	bl	11338 <__errno_location@plt>
   17f10:	mov	r4, #1
   17f14:	ldr	r6, [r0]
   17f18:	b	17ecc <__assert_fail@plt+0x6a14>
   17f1c:	bl	11338 <__errno_location@plt>
   17f20:	mov	r6, #0
   17f24:	str	r6, [r0]
   17f28:	b	17efc <__assert_fail@plt+0x6a44>
   17f2c:	muleq	r1, r8, r4
   17f30:	push	{r4, r5}
   17f34:	mov	r1, #10
   17f38:	pop	{r4, r5}
   17f3c:	b	17df4 <__assert_fail@plt+0x693c>
   17f40:	push	{r4, r5, r6, r7, r8, lr}
   17f44:	subs	r5, r1, #0
   17f48:	mov	r4, r0
   17f4c:	blt	17fc0 <__assert_fail@plt+0x6b08>
   17f50:	moveq	r6, #0
   17f54:	moveq	r7, #0
   17f58:	bne	17f80 <__assert_fail@plt+0x6ac8>
   17f5c:	ldr	r2, [r4]
   17f60:	ldr	r1, [r4, #4]
   17f64:	mov	r0, #0
   17f68:	mul	ip, r2, r7
   17f6c:	umull	r2, r3, r2, r5
   17f70:	mla	r5, r5, r1, ip
   17f74:	add	r3, r5, r3
   17f78:	strd	r2, [r4]
   17f7c:	pop	{r4, r5, r6, r7, r8, pc}
   17f80:	asr	r7, r5, #31
   17f84:	mov	r2, r5
   17f88:	mov	r3, r7
   17f8c:	mvn	r0, #0
   17f90:	mvn	r1, #0
   17f94:	bl	193b0 <__assert_fail@plt+0x7ef8>
   17f98:	ldrd	r2, [r4]
   17f9c:	mov	r6, r5
   17fa0:	cmp	r1, r3
   17fa4:	cmpeq	r0, r2
   17fa8:	bcs	17f5c <__assert_fail@plt+0x6aa4>
   17fac:	mvn	r2, #0
   17fb0:	mvn	r3, #0
   17fb4:	mov	r0, #1
   17fb8:	strd	r2, [r4]
   17fbc:	pop	{r4, r5, r6, r7, r8, pc}
   17fc0:	ldrd	r2, [r0]
   17fc4:	orrs	r3, r2, r3
   17fc8:	moveq	r6, r5
   17fcc:	asreq	r7, r6, #31
   17fd0:	bne	17fac <__assert_fail@plt+0x6af4>
   17fd4:	b	17f5c <__assert_fail@plt+0x6aa4>
   17fd8:	cmp	r2, #36	; 0x24
   17fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fe0:	sub	sp, sp, #20
   17fe4:	bhi	18558 <__assert_fail@plt+0x70a0>
   17fe8:	cmp	r1, #0
   17fec:	mov	r8, r2
   17ff0:	mov	r7, r0
   17ff4:	mov	r5, r1
   17ff8:	mov	r6, r3
   17ffc:	addeq	r5, sp, #4
   18000:	bl	11338 <__errno_location@plt>
   18004:	mov	r3, #0
   18008:	str	r3, [r0]
   1800c:	mov	r9, r0
   18010:	bl	112fc <__ctype_b_loc@plt>
   18014:	ldrb	r3, [r7]
   18018:	mov	r2, r7
   1801c:	ldr	r0, [r0]
   18020:	b	18028 <__assert_fail@plt+0x6b70>
   18024:	ldrb	r3, [r2, #1]!
   18028:	lsl	r1, r3, #1
   1802c:	ldrh	r4, [r0, r1]
   18030:	ands	r4, r4, #8192	; 0x2000
   18034:	bne	18024 <__assert_fail@plt+0x6b6c>
   18038:	cmp	r3, #45	; 0x2d
   1803c:	bne	18050 <__assert_fail@plt+0x6b98>
   18040:	mov	r4, #4
   18044:	mov	r0, r4
   18048:	add	sp, sp, #20
   1804c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18050:	mov	r2, r8
   18054:	mov	r3, r4
   18058:	mov	r1, r5
   1805c:	mov	r0, r7
   18060:	bl	111a0 <__strtoull_internal@plt>
   18064:	ldr	r8, [r5]
   18068:	cmp	r7, r8
   1806c:	mov	r2, r0
   18070:	str	r0, [sp, #8]
   18074:	str	r1, [sp, #12]
   18078:	beq	180c4 <__assert_fail@plt+0x6c0c>
   1807c:	ldr	r4, [r9]
   18080:	cmp	r4, #0
   18084:	bne	180b4 <__assert_fail@plt+0x6bfc>
   18088:	ldr	r3, [sp, #56]	; 0x38
   1808c:	cmp	r3, #0
   18090:	beq	180a0 <__assert_fail@plt+0x6be8>
   18094:	ldrb	r9, [r8]
   18098:	cmp	r9, #0
   1809c:	bne	180fc <__assert_fail@plt+0x6c44>
   180a0:	mov	r0, r4
   180a4:	str	r2, [r6]
   180a8:	str	r1, [r6, #4]
   180ac:	add	sp, sp, #20
   180b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180b4:	cmp	r4, #34	; 0x22
   180b8:	bne	18040 <__assert_fail@plt+0x6b88>
   180bc:	mov	r4, #1
   180c0:	b	18088 <__assert_fail@plt+0x6bd0>
   180c4:	ldr	r3, [sp, #56]	; 0x38
   180c8:	cmp	r3, #0
   180cc:	beq	18040 <__assert_fail@plt+0x6b88>
   180d0:	ldrb	r1, [r8]
   180d4:	cmp	r1, #0
   180d8:	beq	18040 <__assert_fail@plt+0x6b88>
   180dc:	mov	r0, r3
   180e0:	bl	11320 <strchr@plt>
   180e4:	cmp	r0, #0
   180e8:	beq	18040 <__assert_fail@plt+0x6b88>
   180ec:	ldrb	r9, [r8]
   180f0:	mov	r2, #1
   180f4:	mov	r3, #0
   180f8:	strd	r2, [sp, #8]
   180fc:	mov	r1, r9
   18100:	ldr	r0, [sp, #56]	; 0x38
   18104:	bl	11320 <strchr@plt>
   18108:	cmp	r0, #0
   1810c:	beq	18514 <__assert_fail@plt+0x705c>
   18110:	sub	r3, r9, #69	; 0x45
   18114:	cmp	r3, #47	; 0x2f
   18118:	ldrls	pc, [pc, r3, lsl #2]
   1811c:	b	181e0 <__assert_fail@plt+0x6d28>
   18120:	ldrdeq	r8, [r1], -r0
   18124:	andeq	r8, r1, r0, ror #3
   18128:	ldrdeq	r8, [r1], -r0
   1812c:	andeq	r8, r1, r0, ror #3
   18130:	andeq	r8, r1, r0, ror #3
   18134:	andeq	r8, r1, r0, ror #3
   18138:	ldrdeq	r8, [r1], -r0
   1813c:	andeq	r8, r1, r0, ror #3
   18140:	ldrdeq	r8, [r1], -r0
   18144:	andeq	r8, r1, r0, ror #3
   18148:	andeq	r8, r1, r0, ror #3
   1814c:	ldrdeq	r8, [r1], -r0
   18150:	andeq	r8, r1, r0, ror #3
   18154:	andeq	r8, r1, r0, ror #3
   18158:	andeq	r8, r1, r0, ror #3
   1815c:	ldrdeq	r8, [r1], -r0
   18160:	andeq	r8, r1, r0, ror #3
   18164:	andeq	r8, r1, r0, ror #3
   18168:	andeq	r8, r1, r0, ror #3
   1816c:	andeq	r8, r1, r0, ror #3
   18170:	ldrdeq	r8, [r1], -r0
   18174:	ldrdeq	r8, [r1], -r0
   18178:	andeq	r8, r1, r0, ror #3
   1817c:	andeq	r8, r1, r0, ror #3
   18180:	andeq	r8, r1, r0, ror #3
   18184:	andeq	r8, r1, r0, ror #3
   18188:	andeq	r8, r1, r0, ror #3
   1818c:	andeq	r8, r1, r0, ror #3
   18190:	andeq	r8, r1, r0, ror #3
   18194:	andeq	r8, r1, r0, ror #3
   18198:	andeq	r8, r1, r0, ror #3
   1819c:	andeq	r8, r1, r0, ror #3
   181a0:	andeq	r8, r1, r0, ror #3
   181a4:	andeq	r8, r1, r0, ror #3
   181a8:	ldrdeq	r8, [r1], -r0
   181ac:	andeq	r8, r1, r0, ror #3
   181b0:	andeq	r8, r1, r0, ror #3
   181b4:	andeq	r8, r1, r0, ror #3
   181b8:	ldrdeq	r8, [r1], -r0
   181bc:	andeq	r8, r1, r0, ror #3
   181c0:	ldrdeq	r8, [r1], -r0
   181c4:	andeq	r8, r1, r0, ror #3
   181c8:	andeq	r8, r1, r0, ror #3
   181cc:	andeq	r8, r1, r0, ror #3
   181d0:	andeq	r8, r1, r0, ror #3
   181d4:	andeq	r8, r1, r0, ror #3
   181d8:	andeq	r8, r1, r0, ror #3
   181dc:	ldrdeq	r8, [r1], -r0
   181e0:	mov	r7, #1
   181e4:	mov	sl, #1024	; 0x400
   181e8:	sub	r9, r9, #66	; 0x42
   181ec:	cmp	r9, #53	; 0x35
   181f0:	ldrls	pc, [pc, r9, lsl #2]
   181f4:	b	18514 <__assert_fail@plt+0x705c>
   181f8:	andeq	r8, r1, r0, ror #8
   181fc:	andeq	r8, r1, r4, lsl r5
   18200:	andeq	r8, r1, r4, lsl r5
   18204:	andeq	r8, r1, r8, lsr r4
   18208:	andeq	r8, r1, r4, lsl r5
   1820c:	andeq	r8, r1, r0, lsl r4
   18210:	andeq	r8, r1, r4, lsl r5
   18214:	andeq	r8, r1, r4, lsl r5
   18218:	andeq	r8, r1, r4, lsl r5
   1821c:	strdeq	r8, [r1], -r0
   18220:	andeq	r8, r1, r4, lsl r5
   18224:			; <UNDEFINED> instruction: 0x000184bc
   18228:	andeq	r8, r1, r4, lsl r5
   1822c:	andeq	r8, r1, r4, lsl r5
   18230:	muleq	r1, r4, r4
   18234:	andeq	r8, r1, r4, lsl r5
   18238:	andeq	r8, r1, r4, lsl r5
   1823c:	andeq	r8, r1, r4, lsl r5
   18240:	andeq	r8, r1, ip, ror #9
   18244:	andeq	r8, r1, r4, lsl r5
   18248:	andeq	r8, r1, r4, lsl r5
   1824c:	andeq	r8, r1, r4, lsl r5
   18250:	andeq	r8, r1, r4, lsl r5
   18254:	andeq	r8, r1, r8, asr #7
   18258:	muleq	r1, r4, r3
   1825c:	andeq	r8, r1, r4, lsl r5
   18260:	andeq	r8, r1, r4, lsl r5
   18264:	andeq	r8, r1, r4, lsl r5
   18268:	andeq	r8, r1, r4, lsl r5
   1826c:	andeq	r8, r1, r4, lsl r5
   18270:	andeq	r8, r1, r4, lsl r5
   18274:	andeq	r8, r1, r4, lsl r5
   18278:	andeq	r8, r1, r0, ror #6
   1827c:	andeq	r8, r1, r0, asr r3
   18280:	andeq	r8, r1, r4, lsl r5
   18284:	andeq	r8, r1, r4, lsl r5
   18288:	andeq	r8, r1, r4, lsl r5
   1828c:	andeq	r8, r1, r0, lsl r4
   18290:	andeq	r8, r1, r4, lsl r5
   18294:	andeq	r8, r1, r4, lsl r5
   18298:	andeq	r8, r1, r4, lsl r5
   1829c:	strdeq	r8, [r1], -r0
   182a0:	andeq	r8, r1, r4, lsl r5
   182a4:			; <UNDEFINED> instruction: 0x000184bc
   182a8:	andeq	r8, r1, r4, lsl r5
   182ac:	andeq	r8, r1, r4, lsl r5
   182b0:	andeq	r8, r1, r4, lsl r5
   182b4:	andeq	r8, r1, r4, lsl r5
   182b8:	andeq	r8, r1, r4, lsl r5
   182bc:	andeq	r8, r1, r4, lsl r5
   182c0:	andeq	r8, r1, ip, ror #9
   182c4:	andeq	r8, r1, r4, lsl r5
   182c8:	andeq	r8, r1, r4, lsl r5
   182cc:	andeq	r8, r1, ip, lsl #6
   182d0:	mov	r1, #48	; 0x30
   182d4:	ldr	r0, [sp, #56]	; 0x38
   182d8:	bl	11320 <strchr@plt>
   182dc:	cmp	r0, #0
   182e0:	beq	181e0 <__assert_fail@plt+0x6d28>
   182e4:	ldrb	r3, [r8, #1]
   182e8:	cmp	r3, #68	; 0x44
   182ec:	beq	18300 <__assert_fail@plt+0x6e48>
   182f0:	cmp	r3, #105	; 0x69
   182f4:	beq	18524 <__assert_fail@plt+0x706c>
   182f8:	cmp	r3, #66	; 0x42
   182fc:	bne	181e0 <__assert_fail@plt+0x6d28>
   18300:	mov	r7, #2
   18304:	mov	sl, #1000	; 0x3e8
   18308:	b	181e8 <__assert_fail@plt+0x6d30>
   1830c:	ldrd	r2, [sp, #8]
   18310:	cmp	r2, #0
   18314:	sbcs	r1, r3, #0
   18318:	blt	1853c <__assert_fail@plt+0x7084>
   1831c:	adds	r2, r2, r2
   18320:	adc	r3, r3, r3
   18324:	mov	r1, r3
   18328:	mov	r9, #0
   1832c:	str	r2, [sp, #8]
   18330:	str	r3, [sp, #12]
   18334:	add	r3, r8, r7
   18338:	str	r3, [r5]
   1833c:	ldrb	r3, [r8, r7]
   18340:	orr	r4, r4, r9
   18344:	cmp	r3, #0
   18348:	orrne	r4, r4, #2
   1834c:	b	180a0 <__assert_fail@plt+0x6be8>
   18350:	ldr	r2, [sp, #8]
   18354:	ldr	r1, [sp, #12]
   18358:	mov	r9, #0
   1835c:	b	18334 <__assert_fail@plt+0x6e7c>
   18360:	ldrd	r2, [sp, #8]
   18364:	ldr	r1, [pc, #512]	; 1856c <__assert_fail@plt+0x70b4>
   18368:	mvn	r0, #0
   1836c:	cmp	r3, r1
   18370:	cmpeq	r2, r0
   18374:	bhi	1853c <__assert_fail@plt+0x7084>
   18378:	lsl	r1, r3, #9
   1837c:	orr	r1, r1, r2, lsr #23
   18380:	lsl	r2, r2, #9
   18384:	str	r1, [sp, #12]
   18388:	str	r2, [sp, #8]
   1838c:	mov	r9, #0
   18390:	b	18334 <__assert_fail@plt+0x6e7c>
   18394:	mov	fp, #7
   18398:	mov	r9, #0
   1839c:	add	r8, sp, #8
   183a0:	mov	r1, sl
   183a4:	mov	r0, r8
   183a8:	bl	17f40 <__assert_fail@plt+0x6a88>
   183ac:	subs	fp, fp, #1
   183b0:	orr	r9, r9, r0
   183b4:	bne	183a0 <__assert_fail@plt+0x6ee8>
   183b8:	ldr	r8, [r5]
   183bc:	ldr	r2, [sp, #8]
   183c0:	ldr	r1, [sp, #12]
   183c4:	b	18334 <__assert_fail@plt+0x6e7c>
   183c8:	mov	fp, #8
   183cc:	mov	r9, #0
   183d0:	add	r8, sp, fp
   183d4:	mov	r1, sl
   183d8:	mov	r0, r8
   183dc:	bl	17f40 <__assert_fail@plt+0x6a88>
   183e0:	subs	fp, fp, #1
   183e4:	orr	r9, r9, r0
   183e8:	bne	183d4 <__assert_fail@plt+0x6f1c>
   183ec:	b	183b8 <__assert_fail@plt+0x6f00>
   183f0:	mov	r1, sl
   183f4:	add	r0, sp, #8
   183f8:	bl	17f40 <__assert_fail@plt+0x6a88>
   183fc:	ldr	r8, [r5]
   18400:	ldr	r2, [sp, #8]
   18404:	ldr	r1, [sp, #12]
   18408:	mov	r9, r0
   1840c:	b	18334 <__assert_fail@plt+0x6e7c>
   18410:	mov	fp, #3
   18414:	mov	r9, #0
   18418:	add	r8, sp, #8
   1841c:	mov	r1, sl
   18420:	mov	r0, r8
   18424:	bl	17f40 <__assert_fail@plt+0x6a88>
   18428:	subs	fp, fp, #1
   1842c:	orr	r9, r9, r0
   18430:	bne	1841c <__assert_fail@plt+0x6f64>
   18434:	b	183b8 <__assert_fail@plt+0x6f00>
   18438:	mov	fp, #6
   1843c:	mov	r9, #0
   18440:	add	r8, sp, #8
   18444:	mov	r1, sl
   18448:	mov	r0, r8
   1844c:	bl	17f40 <__assert_fail@plt+0x6a88>
   18450:	subs	fp, fp, #1
   18454:	orr	r9, r9, r0
   18458:	bne	18444 <__assert_fail@plt+0x6f8c>
   1845c:	b	183b8 <__assert_fail@plt+0x6f00>
   18460:	ldrd	r0, [sp, #8]
   18464:	ldr	r3, [pc, #260]	; 18570 <__assert_fail@plt+0x70b8>
   18468:	mvn	r2, #0
   1846c:	cmp	r1, r3
   18470:	cmpeq	r0, r2
   18474:	bhi	1853c <__assert_fail@plt+0x7084>
   18478:	lsl	r1, r1, #10
   1847c:	orr	r1, r1, r0, lsr #22
   18480:	lsl	r2, r0, #10
   18484:	str	r1, [sp, #12]
   18488:	str	r2, [sp, #8]
   1848c:	mov	r9, #0
   18490:	b	18334 <__assert_fail@plt+0x6e7c>
   18494:	mov	fp, #5
   18498:	mov	r9, #0
   1849c:	add	r8, sp, #8
   184a0:	mov	r1, sl
   184a4:	mov	r0, r8
   184a8:	bl	17f40 <__assert_fail@plt+0x6a88>
   184ac:	subs	fp, fp, #1
   184b0:	orr	r9, r9, r0
   184b4:	bne	184a0 <__assert_fail@plt+0x6fe8>
   184b8:	b	183b8 <__assert_fail@plt+0x6f00>
   184bc:	mov	r1, sl
   184c0:	add	r0, sp, #8
   184c4:	bl	17f40 <__assert_fail@plt+0x6a88>
   184c8:	mov	r1, sl
   184cc:	mov	r9, r0
   184d0:	add	r0, sp, #8
   184d4:	bl	17f40 <__assert_fail@plt+0x6a88>
   184d8:	ldr	r8, [r5]
   184dc:	ldr	r2, [sp, #8]
   184e0:	ldr	r1, [sp, #12]
   184e4:	orr	r9, r9, r0
   184e8:	b	18334 <__assert_fail@plt+0x6e7c>
   184ec:	mov	fp, #4
   184f0:	mov	r9, #0
   184f4:	add	r8, sp, #8
   184f8:	mov	r1, sl
   184fc:	mov	r0, r8
   18500:	bl	17f40 <__assert_fail@plt+0x6a88>
   18504:	subs	fp, fp, #1
   18508:	orr	r9, r9, r0
   1850c:	bne	184f8 <__assert_fail@plt+0x7040>
   18510:	b	183b8 <__assert_fail@plt+0x6f00>
   18514:	ldrd	r2, [sp, #8]
   18518:	orr	r4, r4, #2
   1851c:	strd	r2, [r6]
   18520:	b	18044 <__assert_fail@plt+0x6b8c>
   18524:	ldrb	r7, [r8, #2]
   18528:	mov	sl, #1024	; 0x400
   1852c:	cmp	r7, #66	; 0x42
   18530:	movne	r7, #1
   18534:	moveq	r7, #3
   18538:	b	181e8 <__assert_fail@plt+0x6d30>
   1853c:	mvn	r1, #0
   18540:	mvn	r0, #0
   18544:	mvn	r2, #0
   18548:	strd	r0, [sp, #8]
   1854c:	mov	r9, #1
   18550:	mov	r1, r2
   18554:	b	18334 <__assert_fail@plt+0x6e7c>
   18558:	ldr	r3, [pc, #20]	; 18574 <__assert_fail@plt+0x70bc>
   1855c:	mov	r2, #85	; 0x55
   18560:	ldr	r1, [pc, #16]	; 18578 <__assert_fail@plt+0x70c0>
   18564:	ldr	r0, [pc, #16]	; 1857c <__assert_fail@plt+0x70c4>
   18568:	bl	114b8 <__assert_fail@plt>
   1856c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18570:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18574:	muleq	r1, r0, r9
   18578:	muleq	r1, ip, r9
   1857c:	andeq	sl, r1, ip, lsr #19
   18580:	cmp	r1, #0
   18584:	cmpne	r0, #0
   18588:	moveq	r1, #1
   1858c:	moveq	r0, r1
   18590:	umull	r2, r3, r0, r1
   18594:	adds	r3, r3, #0
   18598:	movne	r3, #1
   1859c:	cmp	r2, #0
   185a0:	blt	185b0 <__assert_fail@plt+0x70f8>
   185a4:	cmp	r3, #0
   185a8:	bne	185b0 <__assert_fail@plt+0x70f8>
   185ac:	b	11128 <calloc@plt>
   185b0:	push	{r4, lr}
   185b4:	bl	11338 <__errno_location@plt>
   185b8:	mov	r3, #12
   185bc:	str	r3, [r0]
   185c0:	mov	r0, #0
   185c4:	pop	{r4, pc}
   185c8:	cmp	r0, #0
   185cc:	moveq	r0, #1
   185d0:	cmp	r0, #0
   185d4:	blt	185dc <__assert_fail@plt+0x7124>
   185d8:	b	112c0 <malloc@plt>
   185dc:	push	{r4, lr}
   185e0:	bl	11338 <__errno_location@plt>
   185e4:	mov	r3, #12
   185e8:	str	r3, [r0]
   185ec:	mov	r0, #0
   185f0:	pop	{r4, pc}
   185f4:	cmp	r0, #0
   185f8:	beq	1861c <__assert_fail@plt+0x7164>
   185fc:	cmp	r1, #0
   18600:	push	{lr}		; (str lr, [sp, #-4]!)
   18604:	sub	sp, sp, #12
   18608:	beq	18624 <__assert_fail@plt+0x716c>
   1860c:	blt	1863c <__assert_fail@plt+0x7184>
   18610:	add	sp, sp, #12
   18614:	pop	{lr}		; (ldr lr, [sp], #4)
   18618:	b	11200 <realloc@plt>
   1861c:	mov	r0, r1
   18620:	b	185c8 <__assert_fail@plt+0x7110>
   18624:	str	r1, [sp, #4]
   18628:	bl	13b84 <__assert_fail@plt+0x26cc>
   1862c:	ldr	r3, [sp, #4]
   18630:	mov	r0, r3
   18634:	add	sp, sp, #12
   18638:	pop	{pc}		; (ldr pc, [sp], #4)
   1863c:	bl	11338 <__errno_location@plt>
   18640:	mov	r2, #12
   18644:	mov	r3, #0
   18648:	str	r2, [r0]
   1864c:	b	18630 <__assert_fail@plt+0x7178>
   18650:	push	{r4, r5, r6, lr}
   18654:	mov	r4, r0
   18658:	bl	11284 <__fpending@plt>
   1865c:	ldr	r5, [r4]
   18660:	and	r5, r5, #32
   18664:	mov	r6, r0
   18668:	mov	r0, r4
   1866c:	bl	186cc <__assert_fail@plt+0x7214>
   18670:	cmp	r5, #0
   18674:	mov	r4, r0
   18678:	bne	18698 <__assert_fail@plt+0x71e0>
   1867c:	cmp	r0, #0
   18680:	beq	18690 <__assert_fail@plt+0x71d8>
   18684:	cmp	r6, #0
   18688:	beq	186b4 <__assert_fail@plt+0x71fc>
   1868c:	mvn	r4, #0
   18690:	mov	r0, r4
   18694:	pop	{r4, r5, r6, pc}
   18698:	cmp	r0, #0
   1869c:	bne	1868c <__assert_fail@plt+0x71d4>
   186a0:	bl	11338 <__errno_location@plt>
   186a4:	str	r4, [r0]
   186a8:	mvn	r4, #0
   186ac:	mov	r0, r4
   186b0:	pop	{r4, r5, r6, pc}
   186b4:	bl	11338 <__errno_location@plt>
   186b8:	ldr	r4, [r0]
   186bc:	subs	r4, r4, #9
   186c0:	mvnne	r4, #0
   186c4:	mov	r0, r4
   186c8:	pop	{r4, r5, r6, pc}
   186cc:	push	{r4, r5, lr}
   186d0:	sub	sp, sp, #12
   186d4:	mov	r4, r0
   186d8:	bl	11398 <fileno@plt>
   186dc:	cmp	r0, #0
   186e0:	mov	r0, r4
   186e4:	blt	18760 <__assert_fail@plt+0x72a8>
   186e8:	bl	112d8 <__freading@plt>
   186ec:	cmp	r0, #0
   186f0:	bne	1872c <__assert_fail@plt+0x7274>
   186f4:	mov	r0, r4
   186f8:	bl	1876c <__assert_fail@plt+0x72b4>
   186fc:	cmp	r0, #0
   18700:	beq	1875c <__assert_fail@plt+0x72a4>
   18704:	bl	11338 <__errno_location@plt>
   18708:	mov	r5, r0
   1870c:	mov	r0, r4
   18710:	ldr	r4, [r5]
   18714:	bl	113b0 <fclose@plt>
   18718:	cmp	r4, #0
   1871c:	mvnne	r0, #0
   18720:	strne	r4, [r5]
   18724:	add	sp, sp, #12
   18728:	pop	{r4, r5, pc}
   1872c:	mov	r0, r4
   18730:	bl	11398 <fileno@plt>
   18734:	mov	r3, #1
   18738:	str	r3, [sp]
   1873c:	mov	r2, #0
   18740:	mov	r3, #0
   18744:	bl	11260 <lseek64@plt>
   18748:	mvn	r3, #0
   1874c:	mvn	r2, #0
   18750:	cmp	r1, r3
   18754:	cmpeq	r0, r2
   18758:	bne	186f4 <__assert_fail@plt+0x723c>
   1875c:	mov	r0, r4
   18760:	add	sp, sp, #12
   18764:	pop	{r4, r5, lr}
   18768:	b	113b0 <fclose@plt>
   1876c:	push	{r4, lr}
   18770:	subs	r4, r0, #0
   18774:	sub	sp, sp, #8
   18778:	beq	18794 <__assert_fail@plt+0x72dc>
   1877c:	bl	112d8 <__freading@plt>
   18780:	cmp	r0, #0
   18784:	beq	18794 <__assert_fail@plt+0x72dc>
   18788:	ldr	r3, [r4]
   1878c:	tst	r3, #256	; 0x100
   18790:	bne	187a4 <__assert_fail@plt+0x72ec>
   18794:	mov	r0, r4
   18798:	add	sp, sp, #8
   1879c:	pop	{r4, lr}
   187a0:	b	11164 <fflush@plt>
   187a4:	mov	r3, #1
   187a8:	str	r3, [sp]
   187ac:	mov	r2, #0
   187b0:	mov	r3, #0
   187b4:	mov	r0, r4
   187b8:	bl	18864 <__assert_fail@plt+0x73ac>
   187bc:	mov	r0, r4
   187c0:	add	sp, sp, #8
   187c4:	pop	{r4, lr}
   187c8:	b	11164 <fflush@plt>
   187cc:	push	{r4, r5, r6, lr}
   187d0:	mov	r5, r1
   187d4:	bl	1141c <fopen64@plt>
   187d8:	subs	r4, r0, #0
   187dc:	beq	187ec <__assert_fail@plt+0x7334>
   187e0:	bl	11398 <fileno@plt>
   187e4:	cmp	r0, #2
   187e8:	bls	187f4 <__assert_fail@plt+0x733c>
   187ec:	mov	r0, r4
   187f0:	pop	{r4, r5, r6, pc}
   187f4:	bl	189d8 <__assert_fail@plt+0x7520>
   187f8:	subs	r6, r0, #0
   187fc:	blt	18844 <__assert_fail@plt+0x738c>
   18800:	mov	r0, r4
   18804:	bl	186cc <__assert_fail@plt+0x7214>
   18808:	cmp	r0, #0
   1880c:	bne	18824 <__assert_fail@plt+0x736c>
   18810:	mov	r1, r5
   18814:	mov	r0, r6
   18818:	bl	1111c <fdopen@plt>
   1881c:	subs	r4, r0, #0
   18820:	bne	187ec <__assert_fail@plt+0x7334>
   18824:	bl	11338 <__errno_location@plt>
   18828:	mov	r4, #0
   1882c:	mov	r5, r0
   18830:	mov	r0, r6
   18834:	ldr	r6, [r5]
   18838:	bl	114ac <close@plt>
   1883c:	str	r6, [r5]
   18840:	b	187ec <__assert_fail@plt+0x7334>
   18844:	bl	11338 <__errno_location@plt>
   18848:	mov	r5, r0
   1884c:	mov	r0, r4
   18850:	ldr	r6, [r5]
   18854:	mov	r4, #0
   18858:	bl	186cc <__assert_fail@plt+0x7214>
   1885c:	str	r6, [r5]
   18860:	b	187ec <__assert_fail@plt+0x7334>
   18864:	push	{r4, r5, r6, r7, r8, lr}
   18868:	sub	sp, sp, #8
   1886c:	ldmib	r0, {ip, lr}
   18870:	mov	r4, r0
   18874:	ldr	r5, [sp, #32]
   18878:	cmp	lr, ip
   1887c:	beq	18894 <__assert_fail@plt+0x73dc>
   18880:	str	r5, [sp, #32]
   18884:	mov	r0, r4
   18888:	add	sp, sp, #8
   1888c:	pop	{r4, r5, r6, r7, r8, lr}
   18890:	b	113bc <fseeko64@plt>
   18894:	ldr	lr, [r0, #20]
   18898:	ldr	ip, [r0, #16]
   1889c:	cmp	lr, ip
   188a0:	bne	18880 <__assert_fail@plt+0x73c8>
   188a4:	ldr	r8, [r0, #36]	; 0x24
   188a8:	cmp	r8, #0
   188ac:	bne	18880 <__assert_fail@plt+0x73c8>
   188b0:	mov	r6, r2
   188b4:	mov	r7, r3
   188b8:	bl	11398 <fileno@plt>
   188bc:	mov	r2, r6
   188c0:	mov	r3, r7
   188c4:	str	r5, [sp]
   188c8:	bl	11260 <lseek64@plt>
   188cc:	mvn	r3, #0
   188d0:	mvn	r2, #0
   188d4:	cmp	r1, r3
   188d8:	cmpeq	r0, r2
   188dc:	beq	188fc <__assert_fail@plt+0x7444>
   188e0:	ldr	r3, [r4]
   188e4:	strd	r0, [r4, #80]	; 0x50
   188e8:	mov	r0, r8
   188ec:	bic	r3, r3, #16
   188f0:	str	r3, [r4]
   188f4:	add	sp, sp, #8
   188f8:	pop	{r4, r5, r6, r7, r8, pc}
   188fc:	mvn	r0, #0
   18900:	b	188f4 <__assert_fail@plt+0x743c>
   18904:	push	{r4, lr}
   18908:	mov	r0, #14
   1890c:	bl	11404 <nl_langinfo@plt>
   18910:	cmp	r0, #0
   18914:	beq	1892c <__assert_fail@plt+0x7474>
   18918:	ldrb	r2, [r0]
   1891c:	ldr	r3, [pc, #16]	; 18934 <__assert_fail@plt+0x747c>
   18920:	cmp	r2, #0
   18924:	moveq	r0, r3
   18928:	pop	{r4, pc}
   1892c:	ldr	r0, [pc]	; 18934 <__assert_fail@plt+0x747c>
   18930:	pop	{r4, pc}
   18934:	ldrdeq	sl, [r1], -r4
   18938:	push	{r4, r5, r6, r7, lr}
   1893c:	subs	r6, r0, #0
   18940:	sub	sp, sp, #12
   18944:	addeq	r6, sp, #4
   18948:	mov	r0, r6
   1894c:	mov	r5, r2
   18950:	mov	r7, r1
   18954:	bl	11290 <mbrtowc@plt>
   18958:	cmp	r5, #0
   1895c:	cmnne	r0, #3
   18960:	mov	r4, r0
   18964:	bls	18980 <__assert_fail@plt+0x74c8>
   18968:	mov	r0, #0
   1896c:	bl	189e4 <__assert_fail@plt+0x752c>
   18970:	cmp	r0, #0
   18974:	moveq	r4, #1
   18978:	ldrbeq	r3, [r7]
   1897c:	streq	r3, [r6]
   18980:	mov	r0, r4
   18984:	add	sp, sp, #12
   18988:	pop	{r4, r5, r6, r7, pc}
   1898c:	push	{r4, r5, r6, lr}
   18990:	subs	r4, r2, #0
   18994:	mov	r6, r0
   18998:	mov	r5, r1
   1899c:	beq	189c8 <__assert_fail@plt+0x7510>
   189a0:	mov	r1, r4
   189a4:	mvn	r0, #0
   189a8:	bl	18ad8 <__assert_fail@plt+0x7620>
   189ac:	cmp	r0, r5
   189b0:	bcs	189c8 <__assert_fail@plt+0x7510>
   189b4:	bl	11338 <__errno_location@plt>
   189b8:	mov	r3, #12
   189bc:	str	r3, [r0]
   189c0:	mov	r0, #0
   189c4:	pop	{r4, r5, r6, pc}
   189c8:	mul	r1, r5, r4
   189cc:	mov	r0, r6
   189d0:	pop	{r4, r5, r6, lr}
   189d4:	b	185f4 <__assert_fail@plt+0x713c>
   189d8:	mov	r2, #3
   189dc:	mov	r1, #0
   189e0:	b	13978 <__assert_fail@plt+0x24c0>
   189e4:	push	{lr}		; (str lr, [sp, #-4]!)
   189e8:	sub	sp, sp, #268	; 0x10c
   189ec:	add	r1, sp, #4
   189f0:	ldr	r2, [pc, #60]	; 18a34 <__assert_fail@plt+0x757c>
   189f4:	bl	18a40 <__assert_fail@plt+0x7588>
   189f8:	cmp	r0, #0
   189fc:	movne	r0, #0
   18a00:	bne	18a2c <__assert_fail@plt+0x7574>
   18a04:	ldr	r1, [pc, #44]	; 18a38 <__assert_fail@plt+0x7580>
   18a08:	add	r0, sp, #4
   18a0c:	bl	11158 <strcmp@plt>
   18a10:	cmp	r0, #0
   18a14:	beq	18a2c <__assert_fail@plt+0x7574>
   18a18:	add	r0, sp, #4
   18a1c:	ldr	r1, [pc, #24]	; 18a3c <__assert_fail@plt+0x7584>
   18a20:	bl	11158 <strcmp@plt>
   18a24:	adds	r0, r0, #0
   18a28:	movne	r0, #1
   18a2c:	add	sp, sp, #268	; 0x10c
   18a30:	pop	{pc}		; (ldr pc, [sp], #4)
   18a34:	andeq	r0, r0, r1, lsl #2
   18a38:	ldrdeq	sl, [r1], -ip
   18a3c:	andeq	sl, r1, r0, ror #19
   18a40:	push	{r4, r5, r6, lr}
   18a44:	mov	r5, r1
   18a48:	mov	r1, #0
   18a4c:	mov	r4, r2
   18a50:	bl	113e0 <setlocale@plt>
   18a54:	subs	r6, r0, #0
   18a58:	beq	18ab4 <__assert_fail@plt+0x75fc>
   18a5c:	bl	11314 <strlen@plt>
   18a60:	cmp	r4, r0
   18a64:	bhi	18a9c <__assert_fail@plt+0x75e4>
   18a68:	cmp	r4, #0
   18a6c:	bne	18a78 <__assert_fail@plt+0x75c0>
   18a70:	mov	r0, #34	; 0x22
   18a74:	pop	{r4, r5, r6, pc}
   18a78:	sub	r4, r4, #1
   18a7c:	mov	r1, r6
   18a80:	mov	r2, r4
   18a84:	mov	r0, r5
   18a88:	bl	11194 <memcpy@plt>
   18a8c:	mov	r3, #0
   18a90:	strb	r3, [r5, r4]
   18a94:	mov	r0, #34	; 0x22
   18a98:	pop	{r4, r5, r6, pc}
   18a9c:	add	r2, r0, #1
   18aa0:	mov	r1, r6
   18aa4:	mov	r0, r5
   18aa8:	bl	11194 <memcpy@plt>
   18aac:	mov	r0, #0
   18ab0:	pop	{r4, r5, r6, pc}
   18ab4:	cmp	r4, #0
   18ab8:	beq	18ac8 <__assert_fail@plt+0x7610>
   18abc:	strb	r6, [r5]
   18ac0:	mov	r0, #22
   18ac4:	pop	{r4, r5, r6, pc}
   18ac8:	mov	r0, #22
   18acc:	pop	{r4, r5, r6, pc}
   18ad0:	mov	r1, #0
   18ad4:	b	113e0 <setlocale@plt>
   18ad8:	subs	r2, r1, #1
   18adc:	bxeq	lr
   18ae0:	bcc	18cb8 <__assert_fail@plt+0x7800>
   18ae4:	cmp	r0, r1
   18ae8:	bls	18c9c <__assert_fail@plt+0x77e4>
   18aec:	tst	r1, r2
   18af0:	beq	18ca8 <__assert_fail@plt+0x77f0>
   18af4:	clz	r3, r0
   18af8:	clz	r2, r1
   18afc:	sub	r3, r2, r3
   18b00:	rsbs	r3, r3, #31
   18b04:	addne	r3, r3, r3, lsl #1
   18b08:	mov	r2, #0
   18b0c:	addne	pc, pc, r3, lsl #2
   18b10:	nop			; (mov r0, r0)
   18b14:	cmp	r0, r1, lsl #31
   18b18:	adc	r2, r2, r2
   18b1c:	subcs	r0, r0, r1, lsl #31
   18b20:	cmp	r0, r1, lsl #30
   18b24:	adc	r2, r2, r2
   18b28:	subcs	r0, r0, r1, lsl #30
   18b2c:	cmp	r0, r1, lsl #29
   18b30:	adc	r2, r2, r2
   18b34:	subcs	r0, r0, r1, lsl #29
   18b38:	cmp	r0, r1, lsl #28
   18b3c:	adc	r2, r2, r2
   18b40:	subcs	r0, r0, r1, lsl #28
   18b44:	cmp	r0, r1, lsl #27
   18b48:	adc	r2, r2, r2
   18b4c:	subcs	r0, r0, r1, lsl #27
   18b50:	cmp	r0, r1, lsl #26
   18b54:	adc	r2, r2, r2
   18b58:	subcs	r0, r0, r1, lsl #26
   18b5c:	cmp	r0, r1, lsl #25
   18b60:	adc	r2, r2, r2
   18b64:	subcs	r0, r0, r1, lsl #25
   18b68:	cmp	r0, r1, lsl #24
   18b6c:	adc	r2, r2, r2
   18b70:	subcs	r0, r0, r1, lsl #24
   18b74:	cmp	r0, r1, lsl #23
   18b78:	adc	r2, r2, r2
   18b7c:	subcs	r0, r0, r1, lsl #23
   18b80:	cmp	r0, r1, lsl #22
   18b84:	adc	r2, r2, r2
   18b88:	subcs	r0, r0, r1, lsl #22
   18b8c:	cmp	r0, r1, lsl #21
   18b90:	adc	r2, r2, r2
   18b94:	subcs	r0, r0, r1, lsl #21
   18b98:	cmp	r0, r1, lsl #20
   18b9c:	adc	r2, r2, r2
   18ba0:	subcs	r0, r0, r1, lsl #20
   18ba4:	cmp	r0, r1, lsl #19
   18ba8:	adc	r2, r2, r2
   18bac:	subcs	r0, r0, r1, lsl #19
   18bb0:	cmp	r0, r1, lsl #18
   18bb4:	adc	r2, r2, r2
   18bb8:	subcs	r0, r0, r1, lsl #18
   18bbc:	cmp	r0, r1, lsl #17
   18bc0:	adc	r2, r2, r2
   18bc4:	subcs	r0, r0, r1, lsl #17
   18bc8:	cmp	r0, r1, lsl #16
   18bcc:	adc	r2, r2, r2
   18bd0:	subcs	r0, r0, r1, lsl #16
   18bd4:	cmp	r0, r1, lsl #15
   18bd8:	adc	r2, r2, r2
   18bdc:	subcs	r0, r0, r1, lsl #15
   18be0:	cmp	r0, r1, lsl #14
   18be4:	adc	r2, r2, r2
   18be8:	subcs	r0, r0, r1, lsl #14
   18bec:	cmp	r0, r1, lsl #13
   18bf0:	adc	r2, r2, r2
   18bf4:	subcs	r0, r0, r1, lsl #13
   18bf8:	cmp	r0, r1, lsl #12
   18bfc:	adc	r2, r2, r2
   18c00:	subcs	r0, r0, r1, lsl #12
   18c04:	cmp	r0, r1, lsl #11
   18c08:	adc	r2, r2, r2
   18c0c:	subcs	r0, r0, r1, lsl #11
   18c10:	cmp	r0, r1, lsl #10
   18c14:	adc	r2, r2, r2
   18c18:	subcs	r0, r0, r1, lsl #10
   18c1c:	cmp	r0, r1, lsl #9
   18c20:	adc	r2, r2, r2
   18c24:	subcs	r0, r0, r1, lsl #9
   18c28:	cmp	r0, r1, lsl #8
   18c2c:	adc	r2, r2, r2
   18c30:	subcs	r0, r0, r1, lsl #8
   18c34:	cmp	r0, r1, lsl #7
   18c38:	adc	r2, r2, r2
   18c3c:	subcs	r0, r0, r1, lsl #7
   18c40:	cmp	r0, r1, lsl #6
   18c44:	adc	r2, r2, r2
   18c48:	subcs	r0, r0, r1, lsl #6
   18c4c:	cmp	r0, r1, lsl #5
   18c50:	adc	r2, r2, r2
   18c54:	subcs	r0, r0, r1, lsl #5
   18c58:	cmp	r0, r1, lsl #4
   18c5c:	adc	r2, r2, r2
   18c60:	subcs	r0, r0, r1, lsl #4
   18c64:	cmp	r0, r1, lsl #3
   18c68:	adc	r2, r2, r2
   18c6c:	subcs	r0, r0, r1, lsl #3
   18c70:	cmp	r0, r1, lsl #2
   18c74:	adc	r2, r2, r2
   18c78:	subcs	r0, r0, r1, lsl #2
   18c7c:	cmp	r0, r1, lsl #1
   18c80:	adc	r2, r2, r2
   18c84:	subcs	r0, r0, r1, lsl #1
   18c88:	cmp	r0, r1
   18c8c:	adc	r2, r2, r2
   18c90:	subcs	r0, r0, r1
   18c94:	mov	r0, r2
   18c98:	bx	lr
   18c9c:	moveq	r0, #1
   18ca0:	movne	r0, #0
   18ca4:	bx	lr
   18ca8:	clz	r2, r1
   18cac:	rsb	r2, r2, #31
   18cb0:	lsr	r0, r0, r2
   18cb4:	bx	lr
   18cb8:	cmp	r0, #0
   18cbc:	mvnne	r0, #0
   18cc0:	b	193ec <__assert_fail@plt+0x7f34>
   18cc4:	cmp	r1, #0
   18cc8:	beq	18cb8 <__assert_fail@plt+0x7800>
   18ccc:	push	{r0, r1, lr}
   18cd0:	bl	18ad8 <__assert_fail@plt+0x7620>
   18cd4:	pop	{r1, r2, lr}
   18cd8:	mul	r3, r2, r0
   18cdc:	sub	r1, r1, r3
   18ce0:	bx	lr
   18ce4:	cmp	r1, #0
   18ce8:	beq	18ef4 <__assert_fail@plt+0x7a3c>
   18cec:	eor	ip, r0, r1
   18cf0:	rsbmi	r1, r1, #0
   18cf4:	subs	r2, r1, #1
   18cf8:	beq	18ec0 <__assert_fail@plt+0x7a08>
   18cfc:	movs	r3, r0
   18d00:	rsbmi	r3, r0, #0
   18d04:	cmp	r3, r1
   18d08:	bls	18ecc <__assert_fail@plt+0x7a14>
   18d0c:	tst	r1, r2
   18d10:	beq	18edc <__assert_fail@plt+0x7a24>
   18d14:	clz	r2, r3
   18d18:	clz	r0, r1
   18d1c:	sub	r2, r0, r2
   18d20:	rsbs	r2, r2, #31
   18d24:	addne	r2, r2, r2, lsl #1
   18d28:	mov	r0, #0
   18d2c:	addne	pc, pc, r2, lsl #2
   18d30:	nop			; (mov r0, r0)
   18d34:	cmp	r3, r1, lsl #31
   18d38:	adc	r0, r0, r0
   18d3c:	subcs	r3, r3, r1, lsl #31
   18d40:	cmp	r3, r1, lsl #30
   18d44:	adc	r0, r0, r0
   18d48:	subcs	r3, r3, r1, lsl #30
   18d4c:	cmp	r3, r1, lsl #29
   18d50:	adc	r0, r0, r0
   18d54:	subcs	r3, r3, r1, lsl #29
   18d58:	cmp	r3, r1, lsl #28
   18d5c:	adc	r0, r0, r0
   18d60:	subcs	r3, r3, r1, lsl #28
   18d64:	cmp	r3, r1, lsl #27
   18d68:	adc	r0, r0, r0
   18d6c:	subcs	r3, r3, r1, lsl #27
   18d70:	cmp	r3, r1, lsl #26
   18d74:	adc	r0, r0, r0
   18d78:	subcs	r3, r3, r1, lsl #26
   18d7c:	cmp	r3, r1, lsl #25
   18d80:	adc	r0, r0, r0
   18d84:	subcs	r3, r3, r1, lsl #25
   18d88:	cmp	r3, r1, lsl #24
   18d8c:	adc	r0, r0, r0
   18d90:	subcs	r3, r3, r1, lsl #24
   18d94:	cmp	r3, r1, lsl #23
   18d98:	adc	r0, r0, r0
   18d9c:	subcs	r3, r3, r1, lsl #23
   18da0:	cmp	r3, r1, lsl #22
   18da4:	adc	r0, r0, r0
   18da8:	subcs	r3, r3, r1, lsl #22
   18dac:	cmp	r3, r1, lsl #21
   18db0:	adc	r0, r0, r0
   18db4:	subcs	r3, r3, r1, lsl #21
   18db8:	cmp	r3, r1, lsl #20
   18dbc:	adc	r0, r0, r0
   18dc0:	subcs	r3, r3, r1, lsl #20
   18dc4:	cmp	r3, r1, lsl #19
   18dc8:	adc	r0, r0, r0
   18dcc:	subcs	r3, r3, r1, lsl #19
   18dd0:	cmp	r3, r1, lsl #18
   18dd4:	adc	r0, r0, r0
   18dd8:	subcs	r3, r3, r1, lsl #18
   18ddc:	cmp	r3, r1, lsl #17
   18de0:	adc	r0, r0, r0
   18de4:	subcs	r3, r3, r1, lsl #17
   18de8:	cmp	r3, r1, lsl #16
   18dec:	adc	r0, r0, r0
   18df0:	subcs	r3, r3, r1, lsl #16
   18df4:	cmp	r3, r1, lsl #15
   18df8:	adc	r0, r0, r0
   18dfc:	subcs	r3, r3, r1, lsl #15
   18e00:	cmp	r3, r1, lsl #14
   18e04:	adc	r0, r0, r0
   18e08:	subcs	r3, r3, r1, lsl #14
   18e0c:	cmp	r3, r1, lsl #13
   18e10:	adc	r0, r0, r0
   18e14:	subcs	r3, r3, r1, lsl #13
   18e18:	cmp	r3, r1, lsl #12
   18e1c:	adc	r0, r0, r0
   18e20:	subcs	r3, r3, r1, lsl #12
   18e24:	cmp	r3, r1, lsl #11
   18e28:	adc	r0, r0, r0
   18e2c:	subcs	r3, r3, r1, lsl #11
   18e30:	cmp	r3, r1, lsl #10
   18e34:	adc	r0, r0, r0
   18e38:	subcs	r3, r3, r1, lsl #10
   18e3c:	cmp	r3, r1, lsl #9
   18e40:	adc	r0, r0, r0
   18e44:	subcs	r3, r3, r1, lsl #9
   18e48:	cmp	r3, r1, lsl #8
   18e4c:	adc	r0, r0, r0
   18e50:	subcs	r3, r3, r1, lsl #8
   18e54:	cmp	r3, r1, lsl #7
   18e58:	adc	r0, r0, r0
   18e5c:	subcs	r3, r3, r1, lsl #7
   18e60:	cmp	r3, r1, lsl #6
   18e64:	adc	r0, r0, r0
   18e68:	subcs	r3, r3, r1, lsl #6
   18e6c:	cmp	r3, r1, lsl #5
   18e70:	adc	r0, r0, r0
   18e74:	subcs	r3, r3, r1, lsl #5
   18e78:	cmp	r3, r1, lsl #4
   18e7c:	adc	r0, r0, r0
   18e80:	subcs	r3, r3, r1, lsl #4
   18e84:	cmp	r3, r1, lsl #3
   18e88:	adc	r0, r0, r0
   18e8c:	subcs	r3, r3, r1, lsl #3
   18e90:	cmp	r3, r1, lsl #2
   18e94:	adc	r0, r0, r0
   18e98:	subcs	r3, r3, r1, lsl #2
   18e9c:	cmp	r3, r1, lsl #1
   18ea0:	adc	r0, r0, r0
   18ea4:	subcs	r3, r3, r1, lsl #1
   18ea8:	cmp	r3, r1
   18eac:	adc	r0, r0, r0
   18eb0:	subcs	r3, r3, r1
   18eb4:	cmp	ip, #0
   18eb8:	rsbmi	r0, r0, #0
   18ebc:	bx	lr
   18ec0:	teq	ip, r0
   18ec4:	rsbmi	r0, r0, #0
   18ec8:	bx	lr
   18ecc:	movcc	r0, #0
   18ed0:	asreq	r0, ip, #31
   18ed4:	orreq	r0, r0, #1
   18ed8:	bx	lr
   18edc:	clz	r2, r1
   18ee0:	rsb	r2, r2, #31
   18ee4:	cmp	ip, #0
   18ee8:	lsr	r0, r3, r2
   18eec:	rsbmi	r0, r0, #0
   18ef0:	bx	lr
   18ef4:	cmp	r0, #0
   18ef8:	mvngt	r0, #-2147483648	; 0x80000000
   18efc:	movlt	r0, #-2147483648	; 0x80000000
   18f00:	b	193ec <__assert_fail@plt+0x7f34>
   18f04:	cmp	r1, #0
   18f08:	beq	18ef4 <__assert_fail@plt+0x7a3c>
   18f0c:	push	{r0, r1, lr}
   18f10:	bl	18cec <__assert_fail@plt+0x7834>
   18f14:	pop	{r1, r2, lr}
   18f18:	mul	r3, r2, r0
   18f1c:	sub	r1, r1, r3
   18f20:	bx	lr
   18f24:	eor	r1, r1, #-2147483648	; 0x80000000
   18f28:	b	18f30 <__assert_fail@plt+0x7a78>
   18f2c:	eor	r3, r3, #-2147483648	; 0x80000000
   18f30:	push	{r4, r5, lr}
   18f34:	lsl	r4, r1, #1
   18f38:	lsl	r5, r3, #1
   18f3c:	teq	r4, r5
   18f40:	teqeq	r0, r2
   18f44:	orrsne	ip, r4, r0
   18f48:	orrsne	ip, r5, r2
   18f4c:	mvnsne	ip, r4, asr #21
   18f50:	mvnsne	ip, r5, asr #21
   18f54:	beq	19140 <__assert_fail@plt+0x7c88>
   18f58:	lsr	r4, r4, #21
   18f5c:	rsbs	r5, r4, r5, lsr #21
   18f60:	rsblt	r5, r5, #0
   18f64:	ble	18f84 <__assert_fail@plt+0x7acc>
   18f68:	add	r4, r4, r5
   18f6c:	eor	r2, r0, r2
   18f70:	eor	r3, r1, r3
   18f74:	eor	r0, r2, r0
   18f78:	eor	r1, r3, r1
   18f7c:	eor	r2, r0, r2
   18f80:	eor	r3, r1, r3
   18f84:	cmp	r5, #54	; 0x36
   18f88:	pophi	{r4, r5, pc}
   18f8c:	tst	r1, #-2147483648	; 0x80000000
   18f90:	lsl	r1, r1, #12
   18f94:	mov	ip, #1048576	; 0x100000
   18f98:	orr	r1, ip, r1, lsr #12
   18f9c:	beq	18fa8 <__assert_fail@plt+0x7af0>
   18fa0:	rsbs	r0, r0, #0
   18fa4:	rsc	r1, r1, #0
   18fa8:	tst	r3, #-2147483648	; 0x80000000
   18fac:	lsl	r3, r3, #12
   18fb0:	orr	r3, ip, r3, lsr #12
   18fb4:	beq	18fc0 <__assert_fail@plt+0x7b08>
   18fb8:	rsbs	r2, r2, #0
   18fbc:	rsc	r3, r3, #0
   18fc0:	teq	r4, r5
   18fc4:	beq	19128 <__assert_fail@plt+0x7c70>
   18fc8:	sub	r4, r4, #1
   18fcc:	rsbs	lr, r5, #32
   18fd0:	blt	18fec <__assert_fail@plt+0x7b34>
   18fd4:	lsl	ip, r2, lr
   18fd8:	adds	r0, r0, r2, lsr r5
   18fdc:	adc	r1, r1, #0
   18fe0:	adds	r0, r0, r3, lsl lr
   18fe4:	adcs	r1, r1, r3, asr r5
   18fe8:	b	19008 <__assert_fail@plt+0x7b50>
   18fec:	sub	r5, r5, #32
   18ff0:	add	lr, lr, #32
   18ff4:	cmp	r2, #1
   18ff8:	lsl	ip, r3, lr
   18ffc:	orrcs	ip, ip, #2
   19000:	adds	r0, r0, r3, asr r5
   19004:	adcs	r1, r1, r3, asr #31
   19008:	and	r5, r1, #-2147483648	; 0x80000000
   1900c:	bpl	1901c <__assert_fail@plt+0x7b64>
   19010:	rsbs	ip, ip, #0
   19014:	rscs	r0, r0, #0
   19018:	rsc	r1, r1, #0
   1901c:	cmp	r1, #1048576	; 0x100000
   19020:	bcc	19060 <__assert_fail@plt+0x7ba8>
   19024:	cmp	r1, #2097152	; 0x200000
   19028:	bcc	19048 <__assert_fail@plt+0x7b90>
   1902c:	lsrs	r1, r1, #1
   19030:	rrxs	r0, r0
   19034:	rrx	ip, ip
   19038:	add	r4, r4, #1
   1903c:	lsl	r2, r4, #21
   19040:	cmn	r2, #4194304	; 0x400000
   19044:	bcs	191a0 <__assert_fail@plt+0x7ce8>
   19048:	cmp	ip, #-2147483648	; 0x80000000
   1904c:	lsrseq	ip, r0, #1
   19050:	adcs	r0, r0, #0
   19054:	adc	r1, r1, r4, lsl #20
   19058:	orr	r1, r1, r5
   1905c:	pop	{r4, r5, pc}
   19060:	lsls	ip, ip, #1
   19064:	adcs	r0, r0, r0
   19068:	adc	r1, r1, r1
   1906c:	tst	r1, #1048576	; 0x100000
   19070:	sub	r4, r4, #1
   19074:	bne	19048 <__assert_fail@plt+0x7b90>
   19078:	teq	r1, #0
   1907c:	moveq	r1, r0
   19080:	moveq	r0, #0
   19084:	clz	r3, r1
   19088:	addeq	r3, r3, #32
   1908c:	sub	r3, r3, #11
   19090:	subs	r2, r3, #32
   19094:	bge	190b8 <__assert_fail@plt+0x7c00>
   19098:	adds	r2, r2, #12
   1909c:	ble	190b4 <__assert_fail@plt+0x7bfc>
   190a0:	add	ip, r2, #20
   190a4:	rsb	r2, r2, #12
   190a8:	lsl	r0, r1, ip
   190ac:	lsr	r1, r1, r2
   190b0:	b	190c8 <__assert_fail@plt+0x7c10>
   190b4:	add	r2, r2, #20
   190b8:	rsble	ip, r2, #32
   190bc:	lsl	r1, r1, r2
   190c0:	orrle	r1, r1, r0, lsr ip
   190c4:	lslle	r0, r0, r2
   190c8:	subs	r4, r4, r3
   190cc:	addge	r1, r1, r4, lsl #20
   190d0:	orrge	r1, r1, r5
   190d4:	popge	{r4, r5, pc}
   190d8:	mvn	r4, r4
   190dc:	subs	r4, r4, #31
   190e0:	bge	1911c <__assert_fail@plt+0x7c64>
   190e4:	adds	r4, r4, #12
   190e8:	bgt	19104 <__assert_fail@plt+0x7c4c>
   190ec:	add	r4, r4, #20
   190f0:	rsb	r2, r4, #32
   190f4:	lsr	r0, r0, r4
   190f8:	orr	r0, r0, r1, lsl r2
   190fc:	orr	r1, r5, r1, lsr r4
   19100:	pop	{r4, r5, pc}
   19104:	rsb	r4, r4, #12
   19108:	rsb	r2, r4, #32
   1910c:	lsr	r0, r0, r2
   19110:	orr	r0, r0, r1, lsl r4
   19114:	mov	r1, r5
   19118:	pop	{r4, r5, pc}
   1911c:	lsr	r0, r1, r4
   19120:	mov	r1, r5
   19124:	pop	{r4, r5, pc}
   19128:	teq	r4, #0
   1912c:	eor	r3, r3, #1048576	; 0x100000
   19130:	eoreq	r1, r1, #1048576	; 0x100000
   19134:	addeq	r4, r4, #1
   19138:	subne	r5, r5, #1
   1913c:	b	18fc8 <__assert_fail@plt+0x7b10>
   19140:	mvns	ip, r4, asr #21
   19144:	mvnsne	ip, r5, asr #21
   19148:	beq	191b0 <__assert_fail@plt+0x7cf8>
   1914c:	teq	r4, r5
   19150:	teqeq	r0, r2
   19154:	beq	19168 <__assert_fail@plt+0x7cb0>
   19158:	orrs	ip, r4, r0
   1915c:	moveq	r1, r3
   19160:	moveq	r0, r2
   19164:	pop	{r4, r5, pc}
   19168:	teq	r1, r3
   1916c:	movne	r1, #0
   19170:	movne	r0, #0
   19174:	popne	{r4, r5, pc}
   19178:	lsrs	ip, r4, #21
   1917c:	bne	19190 <__assert_fail@plt+0x7cd8>
   19180:	lsls	r0, r0, #1
   19184:	adcs	r1, r1, r1
   19188:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1918c:	pop	{r4, r5, pc}
   19190:	adds	r4, r4, #4194304	; 0x400000
   19194:	addcc	r1, r1, #1048576	; 0x100000
   19198:	popcc	{r4, r5, pc}
   1919c:	and	r5, r1, #-2147483648	; 0x80000000
   191a0:	orr	r1, r5, #2130706432	; 0x7f000000
   191a4:	orr	r1, r1, #15728640	; 0xf00000
   191a8:	mov	r0, #0
   191ac:	pop	{r4, r5, pc}
   191b0:	mvns	ip, r4, asr #21
   191b4:	movne	r1, r3
   191b8:	movne	r0, r2
   191bc:	mvnseq	ip, r5, asr #21
   191c0:	movne	r3, r1
   191c4:	movne	r2, r0
   191c8:	orrs	r4, r0, r1, lsl #12
   191cc:	orrseq	r5, r2, r3, lsl #12
   191d0:	teqeq	r1, r3
   191d4:	orrne	r1, r1, #524288	; 0x80000
   191d8:	pop	{r4, r5, pc}
   191dc:	teq	r0, #0
   191e0:	moveq	r1, #0
   191e4:	bxeq	lr
   191e8:	push	{r4, r5, lr}
   191ec:	mov	r4, #1024	; 0x400
   191f0:	add	r4, r4, #50	; 0x32
   191f4:	mov	r5, #0
   191f8:	mov	r1, #0
   191fc:	b	19078 <__assert_fail@plt+0x7bc0>
   19200:	teq	r0, #0
   19204:	moveq	r1, #0
   19208:	bxeq	lr
   1920c:	push	{r4, r5, lr}
   19210:	mov	r4, #1024	; 0x400
   19214:	add	r4, r4, #50	; 0x32
   19218:	ands	r5, r0, #-2147483648	; 0x80000000
   1921c:	rsbmi	r0, r0, #0
   19220:	mov	r1, #0
   19224:	b	19078 <__assert_fail@plt+0x7bc0>
   19228:	lsls	r2, r0, #1
   1922c:	asr	r1, r2, #3
   19230:	rrx	r1, r1
   19234:	lsl	r0, r2, #28
   19238:	andsne	r3, r2, #-16777216	; 0xff000000
   1923c:	teqne	r3, #-16777216	; 0xff000000
   19240:	eorne	r1, r1, #939524096	; 0x38000000
   19244:	bxne	lr
   19248:	teq	r2, #0
   1924c:	teqne	r3, #-16777216	; 0xff000000
   19250:	bxeq	lr
   19254:	push	{r4, r5, lr}
   19258:	mov	r4, #896	; 0x380
   1925c:	and	r5, r1, #-2147483648	; 0x80000000
   19260:	bic	r1, r1, #-2147483648	; 0x80000000
   19264:	b	19078 <__assert_fail@plt+0x7bc0>
   19268:	orrs	r2, r0, r1
   1926c:	bxeq	lr
   19270:	push	{r4, r5, lr}
   19274:	mov	r5, #0
   19278:	b	19298 <__assert_fail@plt+0x7de0>
   1927c:	orrs	r2, r0, r1
   19280:	bxeq	lr
   19284:	push	{r4, r5, lr}
   19288:	ands	r5, r1, #-2147483648	; 0x80000000
   1928c:	bpl	19298 <__assert_fail@plt+0x7de0>
   19290:	rsbs	r0, r0, #0
   19294:	rsc	r1, r1, #0
   19298:	mov	r4, #1024	; 0x400
   1929c:	add	r4, r4, #50	; 0x32
   192a0:	lsrs	ip, r1, #22
   192a4:	beq	1901c <__assert_fail@plt+0x7b64>
   192a8:	mov	r2, #3
   192ac:	lsrs	ip, ip, #3
   192b0:	addne	r2, r2, #3
   192b4:	lsrs	ip, ip, #3
   192b8:	addne	r2, r2, #3
   192bc:	add	r2, r2, ip, lsr #3
   192c0:	rsb	r3, r2, #32
   192c4:	lsl	ip, r0, r3
   192c8:	lsr	r0, r0, r2
   192cc:	orr	r0, r0, r1, lsl r3
   192d0:	lsr	r1, r1, r2
   192d4:	add	r4, r4, r2
   192d8:	b	1901c <__assert_fail@plt+0x7b64>
   192dc:	cmp	r3, #0
   192e0:	cmpeq	r2, #0
   192e4:	bne	19308 <__assert_fail@plt+0x7e50>
   192e8:	cmp	r1, #0
   192ec:	movlt	r1, #-2147483648	; 0x80000000
   192f0:	movlt	r0, #0
   192f4:	blt	19304 <__assert_fail@plt+0x7e4c>
   192f8:	cmpeq	r0, #0
   192fc:	mvnne	r1, #-2147483648	; 0x80000000
   19300:	mvnne	r0, #0
   19304:	b	193ec <__assert_fail@plt+0x7f34>
   19308:	sub	sp, sp, #8
   1930c:	push	{sp, lr}
   19310:	cmp	r1, #0
   19314:	blt	19334 <__assert_fail@plt+0x7e7c>
   19318:	cmp	r3, #0
   1931c:	blt	19368 <__assert_fail@plt+0x7eb0>
   19320:	bl	19448 <__assert_fail@plt+0x7f90>
   19324:	ldr	lr, [sp, #4]
   19328:	add	sp, sp, #8
   1932c:	pop	{r2, r3}
   19330:	bx	lr
   19334:	rsbs	r0, r0, #0
   19338:	sbc	r1, r1, r1, lsl #1
   1933c:	cmp	r3, #0
   19340:	blt	1938c <__assert_fail@plt+0x7ed4>
   19344:	bl	19448 <__assert_fail@plt+0x7f90>
   19348:	ldr	lr, [sp, #4]
   1934c:	add	sp, sp, #8
   19350:	pop	{r2, r3}
   19354:	rsbs	r0, r0, #0
   19358:	sbc	r1, r1, r1, lsl #1
   1935c:	rsbs	r2, r2, #0
   19360:	sbc	r3, r3, r3, lsl #1
   19364:	bx	lr
   19368:	rsbs	r2, r2, #0
   1936c:	sbc	r3, r3, r3, lsl #1
   19370:	bl	19448 <__assert_fail@plt+0x7f90>
   19374:	ldr	lr, [sp, #4]
   19378:	add	sp, sp, #8
   1937c:	pop	{r2, r3}
   19380:	rsbs	r0, r0, #0
   19384:	sbc	r1, r1, r1, lsl #1
   19388:	bx	lr
   1938c:	rsbs	r2, r2, #0
   19390:	sbc	r3, r3, r3, lsl #1
   19394:	bl	19448 <__assert_fail@plt+0x7f90>
   19398:	ldr	lr, [sp, #4]
   1939c:	add	sp, sp, #8
   193a0:	pop	{r2, r3}
   193a4:	rsbs	r2, r2, #0
   193a8:	sbc	r3, r3, r3, lsl #1
   193ac:	bx	lr
   193b0:	cmp	r3, #0
   193b4:	cmpeq	r2, #0
   193b8:	bne	193d0 <__assert_fail@plt+0x7f18>
   193bc:	cmp	r1, #0
   193c0:	cmpeq	r0, #0
   193c4:	mvnne	r1, #0
   193c8:	mvnne	r0, #0
   193cc:	b	193ec <__assert_fail@plt+0x7f34>
   193d0:	sub	sp, sp, #8
   193d4:	push	{sp, lr}
   193d8:	bl	19448 <__assert_fail@plt+0x7f90>
   193dc:	ldr	lr, [sp, #4]
   193e0:	add	sp, sp, #8
   193e4:	pop	{r2, r3}
   193e8:	bx	lr
   193ec:	push	{r1, lr}
   193f0:	mov	r0, #8
   193f4:	bl	11140 <raise@plt>
   193f8:	pop	{r1, pc}
   193fc:	andeq	r0, r0, r0
   19400:	vmov	d7, r0, r1
   19404:	vldr	d6, [pc, #44]	; 19438 <__assert_fail@plt+0x7f80>
   19408:	vldr	d5, [pc, #48]	; 19440 <__assert_fail@plt+0x7f88>
   1940c:	mov	r0, #0
   19410:	vmul.f64	d6, d7, d6
   19414:	vcvt.u32.f64	s12, d6
   19418:	vcvt.f64.u32	d4, s12
   1941c:	vmov	r1, s12
   19420:	vmls.f64	d7, d4, d5
   19424:	vcvt.u32.f64	s14, d7
   19428:	vmov	r3, s14
   1942c:	orr	r0, r0, r3
   19430:	bx	lr
   19434:	nop			; (mov r0, r0)
   19438:	andeq	r0, r0, r0
   1943c:	ldclcc	0, cr0, [r0]
   19440:	andeq	r0, r0, r0
   19444:	mvnsmi	r0, r0
   19448:	cmp	r1, r3
   1944c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19450:	cmpeq	r0, r2
   19454:	mov	r4, r0
   19458:	mov	r5, r1
   1945c:	ldr	r9, [sp, #28]
   19460:	movcc	r0, #0
   19464:	movcc	r1, #0
   19468:	bcc	19560 <__assert_fail@plt+0x80a8>
   1946c:	cmp	r3, #0
   19470:	clzeq	ip, r2
   19474:	clzne	ip, r3
   19478:	addeq	ip, ip, #32
   1947c:	cmp	r5, #0
   19480:	clzeq	r1, r4
   19484:	addeq	r1, r1, #32
   19488:	clzne	r1, r5
   1948c:	sub	ip, ip, r1
   19490:	sub	lr, ip, #32
   19494:	lsl	r7, r3, ip
   19498:	rsb	r8, ip, #32
   1949c:	orr	r7, r7, r2, lsl lr
   194a0:	orr	r7, r7, r2, lsr r8
   194a4:	lsl	r6, r2, ip
   194a8:	cmp	r5, r7
   194ac:	cmpeq	r4, r6
   194b0:	movcc	r0, #0
   194b4:	movcc	r1, #0
   194b8:	bcc	194d4 <__assert_fail@plt+0x801c>
   194bc:	mov	r3, #1
   194c0:	subs	r4, r4, r6
   194c4:	lsl	r1, r3, lr
   194c8:	lsl	r0, r3, ip
   194cc:	orr	r1, r1, r3, lsr r8
   194d0:	sbc	r5, r5, r7
   194d4:	cmp	ip, #0
   194d8:	beq	19560 <__assert_fail@plt+0x80a8>
   194dc:	lsrs	r3, r7, #1
   194e0:	rrx	r2, r6
   194e4:	mov	r6, ip
   194e8:	b	1950c <__assert_fail@plt+0x8054>
   194ec:	subs	r4, r4, r2
   194f0:	sbc	r5, r5, r3
   194f4:	adds	r4, r4, r4
   194f8:	adc	r5, r5, r5
   194fc:	adds	r4, r4, #1
   19500:	adc	r5, r5, #0
   19504:	subs	r6, r6, #1
   19508:	beq	19528 <__assert_fail@plt+0x8070>
   1950c:	cmp	r5, r3
   19510:	cmpeq	r4, r2
   19514:	bcs	194ec <__assert_fail@plt+0x8034>
   19518:	adds	r4, r4, r4
   1951c:	adc	r5, r5, r5
   19520:	subs	r6, r6, #1
   19524:	bne	1950c <__assert_fail@plt+0x8054>
   19528:	lsr	r6, r4, ip
   1952c:	lsr	r7, r5, ip
   19530:	orr	r6, r6, r5, lsl r8
   19534:	adds	r2, r0, r4
   19538:	orr	r6, r6, r5, lsr lr
   1953c:	adc	r3, r1, r5
   19540:	lsl	r1, r7, ip
   19544:	orr	r1, r1, r6, lsl lr
   19548:	lsl	r0, r6, ip
   1954c:	orr	r1, r1, r6, lsr r8
   19550:	subs	r0, r2, r0
   19554:	mov	r4, r6
   19558:	mov	r5, r7
   1955c:	sbc	r1, r3, r1
   19560:	cmp	r9, #0
   19564:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19568:	strd	r4, [r9]
   1956c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19570:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19574:	mov	r7, r0
   19578:	ldr	r6, [pc, #72]	; 195c8 <__assert_fail@plt+0x8110>
   1957c:	ldr	r5, [pc, #72]	; 195cc <__assert_fail@plt+0x8114>
   19580:	add	r6, pc, r6
   19584:	add	r5, pc, r5
   19588:	sub	r6, r6, r5
   1958c:	mov	r8, r1
   19590:	mov	r9, r2
   19594:	bl	110fc <fdopen@plt-0x20>
   19598:	asrs	r6, r6, #2
   1959c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   195a0:	mov	r4, #0
   195a4:	add	r4, r4, #1
   195a8:	ldr	r3, [r5], #4
   195ac:	mov	r2, r9
   195b0:	mov	r1, r8
   195b4:	mov	r0, r7
   195b8:	blx	r3
   195bc:	cmp	r6, r4
   195c0:	bne	195a4 <__assert_fail@plt+0x80ec>
   195c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195c8:	andeq	r1, r1, r8, lsl #19
   195cc:	andeq	r1, r1, r0, lsl #19
   195d0:	bx	lr
   195d4:	ldr	r3, [pc, #12]	; 195e8 <__assert_fail@plt+0x8130>
   195d8:	mov	r1, #0
   195dc:	add	r3, pc, r3
   195e0:	ldr	r2, [r3]
   195e4:	b	11350 <__cxa_atexit@plt>
   195e8:	andeq	r1, r1, r8, ror #22

Disassembly of section .fini:

000195ec <.fini>:
   195ec:	push	{r3, lr}
   195f0:	pop	{r3, pc}
