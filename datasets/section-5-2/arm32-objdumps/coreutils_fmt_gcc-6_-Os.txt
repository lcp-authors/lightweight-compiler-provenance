
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	114e4 <__assert_fail@plt+0x570>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <calloc@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <calloc@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r6, r1, ip, lsl #6

00010cf8 <calloc@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <fputs_unlocked@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <posix_fadvise64@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <fflush@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <__memmove_chk@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <free@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <_exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <memcpy@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <mbsinit@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <fwrite_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <memcmp@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <fputc_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <getc_unlocked@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <dcgettext@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <realloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <textdomain@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <iswprint@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <lseek64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <__ctype_get_mb_cur_max@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <__fpending@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <ferror_unlocked@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <mbrtowc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <error@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <malloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__libc_start_main@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__freading@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <__gmon_start__@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <getopt_long@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <__ctype_b_loc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <exit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <strlen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <strchr@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <__errno_location@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <strtoumax@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <__fprintf_chk@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <fclose@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <fseeko64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <setlocale@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <strrchr@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <nl_langinfo@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <clearerr_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <fopen64@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <bindtextdomain@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <fputs@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <strncmp@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <abort@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

00010f68 <putchar_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #364]!	; 0x16c

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #356]!	; 0x164

Disassembly of section .text:

00010f80 <.text>:
   10f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f84:	sub	sp, sp, #44	; 0x2c
   10f88:	ldr	r6, [pc, #1204]	; 11444 <__assert_fail@plt+0x4d0>
   10f8c:	str	r0, [sp, #28]
   10f90:	ldr	r0, [r1]
   10f94:	mov	r5, r1
   10f98:	bl	127c8 <__assert_fail@plt+0x1854>
   10f9c:	mov	r1, r6
   10fa0:	mov	r0, #6
   10fa4:	bl	10efc <setlocale@plt>
   10fa8:	ldr	r1, [pc, #1176]	; 11448 <__assert_fail@plt+0x4d4>
   10fac:	ldr	r0, [pc, #1176]	; 1144c <__assert_fail@plt+0x4d8>
   10fb0:	bl	10f38 <bindtextdomain@plt>
   10fb4:	ldr	r7, [pc, #1172]	; 11450 <__assert_fail@plt+0x4dc>
   10fb8:	ldr	r0, [pc, #1164]	; 1144c <__assert_fail@plt+0x4d8>
   10fbc:	bl	10dc4 <textdomain@plt>
   10fc0:	ldr	r0, [pc, #1164]	; 11454 <__assert_fail@plt+0x4e0>
   10fc4:	bl	15698 <__assert_fail@plt+0x4724>
   10fc8:	mov	r3, #75	; 0x4b
   10fcc:	ldr	fp, [pc, #1156]	; 11458 <__assert_fail@plt+0x4e4>
   10fd0:	ldr	r8, [pc, #1156]	; 1145c <__assert_fail@plt+0x4e8>
   10fd4:	str	r3, [r7, #20]
   10fd8:	ldr	r3, [sp, #28]
   10fdc:	mov	r4, #0
   10fe0:	cmp	r3, #1
   10fe4:	strb	r4, [fp, #331]	; 0x14b
   10fe8:	strb	r4, [fp, #328]	; 0x148
   10fec:	strb	r4, [fp, #330]	; 0x14a
   10ff0:	strb	r4, [fp, #329]	; 0x149
   10ff4:	str	r6, [r8, #3500]	; 0xdac
   10ff8:	str	r4, [r7, #8]
   10ffc:	str	r4, [r8, #3496]	; 0xda8
   11000:	str	r4, [r8, #3492]	; 0xda4
   11004:	str	r6, [sp, #32]
   11008:	ble	11040 <__assert_fail@plt+0xcc>
   1100c:	ldr	r3, [r5, #4]
   11010:	ldrb	r2, [r3]
   11014:	cmp	r2, #45	; 0x2d
   11018:	bne	11040 <__assert_fail@plt+0xcc>
   1101c:	ldrb	r2, [r3, #1]
   11020:	sub	r2, r2, #48	; 0x30
   11024:	cmp	r2, #9
   11028:	addls	r4, r3, #1
   1102c:	ldrls	r3, [r5]
   11030:	strls	r3, [r5, #4]!
   11034:	ldrls	r3, [sp, #28]
   11038:	subls	r3, r3, #1
   1103c:	strls	r3, [sp, #28]
   11040:	mov	r9, #0
   11044:	mov	sl, #1
   11048:	mov	r6, #0
   1104c:	ldr	r3, [pc, #1036]	; 11460 <__assert_fail@plt+0x4ec>
   11050:	str	r6, [sp]
   11054:	ldr	r2, [pc, #1032]	; 11464 <__assert_fail@plt+0x4f0>
   11058:	mov	r1, r5
   1105c:	ldr	r0, [sp, #28]
   11060:	bl	10e54 <getopt_long@plt>
   11064:	cmn	r0, #1
   11068:	mov	r3, r0
   1106c:	bne	11128 <__assert_fail@plt+0x1b4>
   11070:	cmp	r4, r6
   11074:	beq	113f0 <__assert_fail@plt+0x47c>
   11078:	mov	r2, #5
   1107c:	ldr	r1, [pc, #996]	; 11468 <__assert_fail@plt+0x4f4>
   11080:	mov	r0, r6
   11084:	bl	10dac <dcgettext@plt>
   11088:	ldr	r3, [sp, #32]
   1108c:	ldr	r2, [pc, #984]	; 1146c <__assert_fail@plt+0x4f8>
   11090:	str	r3, [sp, #8]
   11094:	mov	r3, #0
   11098:	str	r6, [sp, #16]
   1109c:	strd	r2, [sp]
   110a0:	mov	r2, #0
   110a4:	mov	r3, #0
   110a8:	str	r0, [sp, #12]
   110ac:	mov	r0, r4
   110b0:	bl	14910 <__assert_fail@plt+0x399c>
   110b4:	cmp	r9, r6
   110b8:	mov	r4, r0
   110bc:	str	r0, [r7, #20]
   110c0:	bne	113b0 <__assert_fail@plt+0x43c>
   110c4:	ldr	r3, [r7, #20]
   110c8:	mov	r0, #187	; 0xbb
   110cc:	mov	r1, #200	; 0xc8
   110d0:	mul	r0, r0, r3
   110d4:	bl	15280 <__assert_fail@plt+0x430c>
   110d8:	str	r0, [r7, #32]
   110dc:	ldr	r6, [pc, #908]	; 11470 <__assert_fail@plt+0x4fc>
   110e0:	ldr	r2, [sp, #28]
   110e4:	ldr	r3, [r6]
   110e8:	cmp	r3, r2
   110ec:	beq	112b0 <__assert_fail@plt+0x33c>
   110f0:	ldr	sl, [pc, #892]	; 11474 <__assert_fail@plt+0x500>
   110f4:	ldr	fp, [pc, #892]	; 11478 <__assert_fail@plt+0x504>
   110f8:	mov	r8, #0
   110fc:	mov	r4, #1
   11100:	ldr	r3, [r6]
   11104:	ldr	r2, [sp, #28]
   11108:	cmp	r3, r2
   1110c:	blt	11304 <__assert_fail@plt+0x390>
   11110:	cmp	r8, #0
   11114:	bne	112c4 <__assert_fail@plt+0x350>
   11118:	eor	r0, r4, #1
   1111c:	uxtb	r0, r0
   11120:	add	sp, sp, #44	; 0x2c
   11124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11128:	cmp	r3, #112	; 0x70
   1112c:	beq	111f0 <__assert_fail@plt+0x27c>
   11130:	bgt	111a0 <__assert_fail@plt+0x22c>
   11134:	cmn	r3, #2
   11138:	beq	11278 <__assert_fail@plt+0x304>
   1113c:	bgt	11184 <__assert_fail@plt+0x210>
   11140:	cmn	r3, #3
   11144:	beq	11280 <__assert_fail@plt+0x30c>
   11148:	sub	r2, r3, #48	; 0x30
   1114c:	cmp	r2, #9
   11150:	bhi	1117c <__assert_fail@plt+0x208>
   11154:	mov	r2, #5
   11158:	ldr	r1, [pc, #796]	; 1147c <__assert_fail@plt+0x508>
   1115c:	mov	r0, #0
   11160:	str	r3, [sp, #28]
   11164:	bl	10dac <dcgettext@plt>
   11168:	mov	r1, #0
   1116c:	ldr	r3, [sp, #28]
   11170:	mov	r2, r0
   11174:	mov	r0, r1
   11178:	bl	10e18 <error@plt>
   1117c:	mov	r0, #1
   11180:	bl	12268 <__assert_fail@plt+0x12f4>
   11184:	cmp	r3, #99	; 0x63
   11188:	beq	111d8 <__assert_fail@plt+0x264>
   1118c:	cmp	r3, #103	; 0x67
   11190:	bne	11148 <__assert_fail@plt+0x1d4>
   11194:	ldr	r3, [pc, #740]	; 11480 <__assert_fail@plt+0x50c>
   11198:	ldr	r9, [r3]
   1119c:	b	11048 <__assert_fail@plt+0xd4>
   111a0:	cmp	r3, #116	; 0x74
   111a4:	beq	111e0 <__assert_fail@plt+0x26c>
   111a8:	bgt	111bc <__assert_fail@plt+0x248>
   111ac:	cmp	r3, #115	; 0x73
   111b0:	bne	11148 <__assert_fail@plt+0x1d4>
   111b4:	strb	sl, [fp, #328]	; 0x148
   111b8:	b	11048 <__assert_fail@plt+0xd4>
   111bc:	cmp	r3, #117	; 0x75
   111c0:	beq	111e8 <__assert_fail@plt+0x274>
   111c4:	cmp	r3, #119	; 0x77
   111c8:	bne	11148 <__assert_fail@plt+0x1d4>
   111cc:	ldr	r3, [pc, #684]	; 11480 <__assert_fail@plt+0x50c>
   111d0:	ldr	r4, [r3]
   111d4:	b	11048 <__assert_fail@plt+0xd4>
   111d8:	strb	sl, [fp, #329]	; 0x149
   111dc:	b	11048 <__assert_fail@plt+0xd4>
   111e0:	strb	sl, [fp, #330]	; 0x14a
   111e4:	b	11048 <__assert_fail@plt+0xd4>
   111e8:	strb	sl, [fp, #331]	; 0x14b
   111ec:	b	11048 <__assert_fail@plt+0xd4>
   111f0:	ldr	r3, [pc, #648]	; 11480 <__assert_fail@plt+0x50c>
   111f4:	str	r6, [r8, #3496]	; 0xda8
   111f8:	ldr	r2, [r3]
   111fc:	mov	r3, r2
   11200:	ldrb	r0, [r3]
   11204:	sub	r1, r3, r2
   11208:	add	ip, r3, #1
   1120c:	cmp	r0, #32
   11210:	beq	11264 <__assert_fail@plt+0x2f0>
   11214:	cmp	r6, #0
   11218:	mov	r0, r3
   1121c:	str	r3, [r8, #3500]	; 0xdac
   11220:	str	r3, [sp, #36]	; 0x24
   11224:	strne	r1, [r8, #3496]	; 0xda8
   11228:	bl	10e78 <strlen@plt>
   1122c:	ldr	r3, [sp, #36]	; 0x24
   11230:	str	r0, [r7, #8]
   11234:	add	r0, r3, r0
   11238:	cmp	r3, r0
   1123c:	bcs	11250 <__assert_fail@plt+0x2dc>
   11240:	ldrb	r2, [r0, #-1]
   11244:	sub	r1, r0, #1
   11248:	cmp	r2, #32
   1124c:	beq	11270 <__assert_fail@plt+0x2fc>
   11250:	mov	r2, #0
   11254:	strb	r2, [r0]
   11258:	sub	r0, r0, r3
   1125c:	str	r0, [r8, #3492]	; 0xda4
   11260:	b	11048 <__assert_fail@plt+0xd4>
   11264:	mov	r3, ip
   11268:	mov	r6, sl
   1126c:	b	11200 <__assert_fail@plt+0x28c>
   11270:	mov	r0, r1
   11274:	b	11238 <__assert_fail@plt+0x2c4>
   11278:	mov	r0, r6
   1127c:	b	11180 <__assert_fail@plt+0x20c>
   11280:	ldr	r3, [pc, #508]	; 11484 <__assert_fail@plt+0x510>
   11284:	ldr	r0, [pc, #508]	; 11488 <__assert_fail@plt+0x514>
   11288:	str	r3, [sp]
   1128c:	ldr	r3, [pc, #504]	; 1148c <__assert_fail@plt+0x518>
   11290:	str	r6, [sp, #4]
   11294:	ldr	r2, [pc, #500]	; 11490 <__assert_fail@plt+0x51c>
   11298:	ldr	r0, [r0]
   1129c:	ldr	r3, [r3]
   112a0:	ldr	r1, [pc, #492]	; 11494 <__assert_fail@plt+0x520>
   112a4:	bl	14248 <__assert_fail@plt+0x32d4>
   112a8:	mov	r0, r6
   112ac:	bl	10e6c <exit@plt>
   112b0:	ldr	r3, [pc, #448]	; 11478 <__assert_fail@plt+0x504>
   112b4:	ldr	r1, [pc, #476]	; 11498 <__assert_fail@plt+0x524>
   112b8:	ldr	r0, [r3]
   112bc:	bl	11ed8 <__assert_fail@plt+0xf64>
   112c0:	mov	r4, r0
   112c4:	ldr	r3, [pc, #428]	; 11478 <__assert_fail@plt+0x504>
   112c8:	ldr	r0, [r3]
   112cc:	bl	1263c <__assert_fail@plt+0x16c8>
   112d0:	cmp	r0, #0
   112d4:	beq	11118 <__assert_fail@plt+0x1a4>
   112d8:	bl	10e90 <__errno_location@plt>
   112dc:	mov	r2, #5
   112e0:	ldr	r1, [pc, #436]	; 1149c <__assert_fail@plt+0x528>
   112e4:	ldr	r4, [r0]
   112e8:	mov	r0, #0
   112ec:	bl	10dac <dcgettext@plt>
   112f0:	ldr	r2, [pc, #424]	; 114a0 <__assert_fail@plt+0x52c>
   112f4:	mov	r1, r4
   112f8:	mov	r3, r0
   112fc:	mov	r0, #1
   11300:	bl	10e18 <error@plt>
   11304:	ldr	r9, [r5, r3, lsl #2]
   11308:	ldr	r1, [pc, #392]	; 11498 <__assert_fail@plt+0x524>
   1130c:	mov	r0, r9
   11310:	bl	10d1c <strcmp@plt>
   11314:	cmp	r0, #0
   11318:	bne	11344 <__assert_fail@plt+0x3d0>
   1131c:	mov	r1, r9
   11320:	ldr	r0, [fp]
   11324:	bl	11ed8 <__assert_fail@plt+0xf64>
   11328:	mov	r8, #1
   1132c:	and	r4, r4, r0
   11330:	uxtb	r4, r4
   11334:	ldr	r3, [r6]
   11338:	add	r3, r3, #1
   1133c:	str	r3, [r6]
   11340:	b	11100 <__assert_fail@plt+0x18c>
   11344:	mov	r1, sl
   11348:	mov	r0, r9
   1134c:	bl	10f2c <fopen64@plt>
   11350:	subs	r7, r0, #0
   11354:	beq	1136c <__assert_fail@plt+0x3f8>
   11358:	mov	r1, r9
   1135c:	bl	11ed8 <__assert_fail@plt+0xf64>
   11360:	and	r4, r4, r0
   11364:	uxtb	r4, r4
   11368:	b	11334 <__assert_fail@plt+0x3c0>
   1136c:	bl	10e90 <__errno_location@plt>
   11370:	mov	r2, #5
   11374:	ldr	r1, [pc, #296]	; 114a4 <__assert_fail@plt+0x530>
   11378:	ldr	r4, [r0]
   1137c:	mov	r0, r7
   11380:	bl	10dac <dcgettext@plt>
   11384:	mov	r1, r9
   11388:	str	r0, [sp, #32]
   1138c:	mov	r0, #4
   11390:	bl	13c14 <__assert_fail@plt+0x2ca0>
   11394:	mov	r1, r4
   11398:	ldr	r2, [sp, #32]
   1139c:	mov	r4, r7
   113a0:	mov	r3, r0
   113a4:	mov	r0, r7
   113a8:	bl	10e18 <error@plt>
   113ac:	b	11334 <__assert_fail@plt+0x3c0>
   113b0:	mov	r2, #5
   113b4:	ldr	r1, [pc, #172]	; 11468 <__assert_fail@plt+0x4f4>
   113b8:	mov	r0, r6
   113bc:	bl	10dac <dcgettext@plt>
   113c0:	ldr	r3, [sp, #32]
   113c4:	asr	r1, r4, #31
   113c8:	str	r3, [sp, #8]
   113cc:	str	r6, [sp, #16]
   113d0:	mov	r2, #0
   113d4:	mov	r3, #0
   113d8:	str	r0, [sp, #12]
   113dc:	mov	r0, r4
   113e0:	strd	r0, [sp]
   113e4:	mov	r0, r9
   113e8:	bl	14910 <__assert_fail@plt+0x399c>
   113ec:	b	110d8 <__assert_fail@plt+0x164>
   113f0:	cmp	r9, #0
   113f4:	beq	110c4 <__assert_fail@plt+0x150>
   113f8:	mov	r2, #5
   113fc:	ldr	r1, [pc, #100]	; 11468 <__assert_fail@plt+0x4f4>
   11400:	mov	r0, r4
   11404:	bl	10dac <dcgettext@plt>
   11408:	ldr	r3, [sp, #32]
   1140c:	mov	r2, #75	; 0x4b
   11410:	str	r3, [sp, #8]
   11414:	mov	r3, #0
   11418:	str	r4, [sp, #16]
   1141c:	strd	r2, [sp]
   11420:	mov	r2, #0
   11424:	mov	r3, #0
   11428:	str	r0, [sp, #12]
   1142c:	mov	r0, r9
   11430:	bl	14910 <__assert_fail@plt+0x399c>
   11434:	str	r0, [r7, #32]
   11438:	add	r0, r0, #10
   1143c:	str	r0, [r7, #20]
   11440:	b	110dc <__assert_fail@plt+0x168>
   11444:	andeq	r5, r1, pc, lsr #25
   11448:			; <UNDEFINED> instruction: 0x00015cb0
   1144c:	andeq	r5, r1, sp, lsl #24
   11450:	andeq	r7, r2, r0, ror #2
   11454:	andeq	r2, r1, ip, lsl r5
   11458:	andeq	pc, r2, r0, asr #2
   1145c:	andeq	sp, r2, r8, asr #2
   11460:	andeq	r5, r1, r4, lsl #14
   11464:	andeq	r5, r1, r4, lsr sp
   11468:	andeq	r5, r1, r9, asr #26
   1146c:	andeq	r0, r0, r4, asr #19
   11470:	andeq	r7, r2, r0, asr #2
   11474:	ldrdeq	r5, [r1], -r8
   11478:	andeq	r7, r2, r0, asr r1
   1147c:	andeq	r5, r1, r8, asr #25
   11480:	andeq	r7, r2, r8, asr r1
   11484:	andeq	r5, r1, r6, lsr #26
   11488:	andeq	r7, r2, r4, asr r1
   1148c:	strdeq	r7, [r2], -r0
   11490:	andeq	r5, r1, r9, lsl #24
   11494:	ldrdeq	r5, [r1], -sl
   11498:	muleq	r1, lr, lr
   1149c:	andeq	r5, r1, r2, ror sp
   114a0:	andeq	r5, r1, r9, asr lr
   114a4:	andeq	r5, r1, r7, asr sp
   114a8:	mov	fp, #0
   114ac:	mov	lr, #0
   114b0:	pop	{r1}		; (ldr r1, [sp], #4)
   114b4:	mov	r2, sp
   114b8:	push	{r2}		; (str r2, [sp, #-4]!)
   114bc:	push	{r0}		; (str r0, [sp, #-4]!)
   114c0:	ldr	ip, [pc, #16]	; 114d8 <__assert_fail@plt+0x564>
   114c4:	push	{ip}		; (str ip, [sp, #-4]!)
   114c8:	ldr	r0, [pc, #12]	; 114dc <__assert_fail@plt+0x568>
   114cc:	ldr	r3, [pc, #12]	; 114e0 <__assert_fail@plt+0x56c>
   114d0:	bl	10e30 <__libc_start_main@plt>
   114d4:	bl	10f5c <abort@plt>
   114d8:	muleq	r1, r4, r6
   114dc:	andeq	r0, r1, r0, lsl #31
   114e0:	andeq	r5, r1, r4, lsr r6
   114e4:	ldr	r3, [pc, #20]	; 11500 <__assert_fail@plt+0x58c>
   114e8:	ldr	r2, [pc, #20]	; 11504 <__assert_fail@plt+0x590>
   114ec:	add	r3, pc, r3
   114f0:	ldr	r2, [r3, r2]
   114f4:	cmp	r2, #0
   114f8:	bxeq	lr
   114fc:	b	10e48 <__gmon_start__@plt>
   11500:	andeq	r5, r1, ip, lsl #22
   11504:	andeq	r0, r0, r4, ror #1
   11508:	ldr	r3, [pc, #28]	; 1152c <__assert_fail@plt+0x5b8>
   1150c:	ldr	r0, [pc, #28]	; 11530 <__assert_fail@plt+0x5bc>
   11510:	sub	r3, r3, r0
   11514:	cmp	r3, #6
   11518:	bxls	lr
   1151c:	ldr	r3, [pc, #16]	; 11534 <__assert_fail@plt+0x5c0>
   11520:	cmp	r3, #0
   11524:	bxeq	lr
   11528:	bx	r3
   1152c:	andeq	r7, r2, fp, lsr r1
   11530:	andeq	r7, r2, r8, lsr r1
   11534:	andeq	r0, r0, r0
   11538:	ldr	r1, [pc, #36]	; 11564 <__assert_fail@plt+0x5f0>
   1153c:	ldr	r0, [pc, #36]	; 11568 <__assert_fail@plt+0x5f4>
   11540:	sub	r1, r1, r0
   11544:	asr	r1, r1, #2
   11548:	add	r1, r1, r1, lsr #31
   1154c:	asrs	r1, r1, #1
   11550:	bxeq	lr
   11554:	ldr	r3, [pc, #16]	; 1156c <__assert_fail@plt+0x5f8>
   11558:	cmp	r3, #0
   1155c:	bxeq	lr
   11560:	bx	r3
   11564:	andeq	r7, r2, r8, lsr r1
   11568:	andeq	r7, r2, r8, lsr r1
   1156c:	andeq	r0, r0, r0
   11570:	push	{r4, lr}
   11574:	ldr	r4, [pc, #24]	; 11594 <__assert_fail@plt+0x620>
   11578:	ldrb	r3, [r4]
   1157c:	cmp	r3, #0
   11580:	popne	{r4, pc}
   11584:	bl	11508 <__assert_fail@plt+0x594>
   11588:	mov	r3, #1
   1158c:	strb	r3, [r4]
   11590:	pop	{r4, pc}
   11594:	andeq	r7, r2, ip, asr r1
   11598:	ldr	r0, [pc, #40]	; 115c8 <__assert_fail@plt+0x654>
   1159c:	ldr	r3, [r0]
   115a0:	cmp	r3, #0
   115a4:	bne	115ac <__assert_fail@plt+0x638>
   115a8:	b	11538 <__assert_fail@plt+0x5c4>
   115ac:	ldr	r3, [pc, #24]	; 115cc <__assert_fail@plt+0x658>
   115b0:	cmp	r3, #0
   115b4:	beq	115a8 <__assert_fail@plt+0x634>
   115b8:	push	{r4, lr}
   115bc:	blx	r3
   115c0:	pop	{r4, lr}
   115c4:	b	11538 <__assert_fail@plt+0x5c4>
   115c8:	andeq	r6, r2, r4, lsl pc
   115cc:	andeq	r0, r0, r0
   115d0:	ldr	r2, [pc, #60]	; 11614 <__assert_fail@plt+0x6a0>
   115d4:	ldr	r3, [r2]
   115d8:	ldr	r1, [r2, #4]
   115dc:	cmp	r3, r1
   115e0:	bne	1160c <__assert_fail@plt+0x698>
   115e4:	ldr	r1, [r2, #8]
   115e8:	ldr	r2, [r2, #12]
   115ec:	add	r3, r3, r1
   115f0:	cmp	r3, r2
   115f4:	bgt	1160c <__assert_fail@plt+0x698>
   115f8:	cmp	r0, #10
   115fc:	cmnne	r0, #1
   11600:	movne	r0, #1
   11604:	moveq	r0, #0
   11608:	bx	lr
   1160c:	mov	r0, #0
   11610:	bx	lr
   11614:	andeq	r7, r2, r0, ror #2
   11618:	ldr	r2, [pc, #448]	; 117e0 <__assert_fail@plt+0x86c>
   1161c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11620:	mov	r3, #0
   11624:	ldr	r6, [r2, #16]
   11628:	sub	sp, sp, #28
   1162c:	ldr	sl, [r2, #36]	; 0x24
   11630:	str	r3, [r6, #20]
   11634:	ldr	r3, [r6, #4]
   11638:	ldr	r9, [r2, #20]
   1163c:	str	r3, [sp]
   11640:	ldr	r3, [r2, #24]
   11644:	sub	r4, r6, #28
   11648:	str	r3, [sp, #8]
   1164c:	ldr	r3, [r2, #28]
   11650:	add	r8, r2, #40	; 0x28
   11654:	str	r3, [sp, #4]
   11658:	ldr	r3, [r2, #32]
   1165c:	mov	fp, #10
   11660:	str	r3, [sp, #12]
   11664:	add	r3, r2, #68	; 0x44
   11668:	str	r9, [r6, #4]
   1166c:	str	r3, [sp, #16]
   11670:	cmp	r4, r8
   11674:	bcs	11688 <__assert_fail@plt+0x714>
   11678:	ldr	r3, [sp]
   1167c:	str	r3, [r6, #4]
   11680:	add	sp, sp, #28
   11684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11688:	ldrne	r1, [sp, #8]
   1168c:	ldreq	r1, [sp, #4]
   11690:	ldr	r2, [r4, #4]
   11694:	mov	r0, r4
   11698:	add	r1, r1, r2
   1169c:	mvn	r7, #-2147483648	; 0x80000000
   116a0:	add	r0, r0, #28
   116a4:	cmp	r6, r0
   116a8:	moveq	ip, #0
   116ac:	beq	116dc <__assert_fail@plt+0x768>
   116b0:	ldr	lr, [r0, #24]
   116b4:	ldr	r3, [sp, #12]
   116b8:	cmp	r6, lr
   116bc:	sub	ip, r3, r1
   116c0:	ldrne	lr, [r0, #16]
   116c4:	mul	ip, fp, ip
   116c8:	subne	lr, r1, lr
   116cc:	mulne	lr, fp, lr
   116d0:	mul	ip, ip, ip
   116d4:	mulne	lr, lr, lr
   116d8:	addne	ip, ip, lr, asr #1
   116dc:	ldr	lr, [r0, #20]
   116e0:	cmp	r4, r8
   116e4:	add	ip, ip, lr
   116e8:	bne	11700 <__assert_fail@plt+0x78c>
   116ec:	cmp	sl, #0
   116f0:	subgt	lr, r1, sl
   116f4:	mulgt	lr, fp, lr
   116f8:	mulgt	lr, lr, lr
   116fc:	addgt	ip, ip, lr, asr #1
   11700:	cmp	ip, r7
   11704:	strlt	r0, [r4, #24]
   11708:	strlt	r1, [r4, #16]
   1170c:	movlt	r7, ip
   11710:	cmp	r6, r0
   11714:	bne	11728 <__assert_fail@plt+0x7b4>
   11718:	cmp	r4, r8
   1171c:	bhi	11744 <__assert_fail@plt+0x7d0>
   11720:	ldr	r5, [pc, #188]	; 117e4 <__assert_fail@plt+0x870>
   11724:	b	11760 <__assert_fail@plt+0x7ec>
   11728:	ldr	ip, [r0, #-20]	; 0xffffffec
   1172c:	ldr	lr, [r0, #4]
   11730:	add	ip, ip, lr
   11734:	add	r1, r1, ip
   11738:	cmp	r9, r1
   1173c:	bgt	116a0 <__assert_fail@plt+0x72c>
   11740:	b	11718 <__assert_fail@plt+0x7a4>
   11744:	ldrb	r1, [r4, #-16]
   11748:	tst	r1, #2
   1174c:	beq	11798 <__assert_fail@plt+0x824>
   11750:	ldr	r3, [pc, #144]	; 117e8 <__assert_fail@plt+0x874>
   11754:	tst	r1, #8
   11758:	movne	r5, #2400	; 0x960
   1175c:	moveq	r5, r3
   11760:	ldrb	r1, [r4, #12]
   11764:	tst	r1, #1
   11768:	subne	r5, r5, #1600	; 0x640
   1176c:	bne	11788 <__assert_fail@plt+0x814>
   11770:	tst	r1, #8
   11774:	beq	11788 <__assert_fail@plt+0x814>
   11778:	add	r1, r2, #2
   1177c:	ldr	r0, [pc, #104]	; 117ec <__assert_fail@plt+0x878>
   11780:	bl	15280 <__assert_fail@plt+0x430c>
   11784:	add	r5, r5, r0
   11788:	add	r5, r7, r5
   1178c:	str	r5, [r4, #20]
   11790:	sub	r4, r4, #28
   11794:	b	11670 <__assert_fail@plt+0x6fc>
   11798:	tst	r1, #4
   1179c:	ldrne	r5, [pc, #76]	; 117f0 <__assert_fail@plt+0x87c>
   117a0:	bne	11760 <__assert_fail@plt+0x7ec>
   117a4:	ldr	r3, [sp, #16]
   117a8:	cmp	r4, r3
   117ac:	bls	11720 <__assert_fail@plt+0x7ac>
   117b0:	ldrb	r1, [r4, #-44]	; 0xffffffd4
   117b4:	tst	r1, #8
   117b8:	beq	11720 <__assert_fail@plt+0x7ac>
   117bc:	ldr	r1, [r4, #-24]	; 0xffffffe8
   117c0:	ldr	r0, [pc, #44]	; 117f4 <__assert_fail@plt+0x880>
   117c4:	add	r1, r1, #2
   117c8:	str	r2, [sp, #20]
   117cc:	bl	15280 <__assert_fail@plt+0x430c>
   117d0:	ldr	r2, [sp, #20]
   117d4:	add	r0, r0, #4864	; 0x1300
   117d8:	add	r5, r0, #36	; 0x24
   117dc:	b	11760 <__assert_fail@plt+0x7ec>
   117e0:	andeq	r7, r2, r0, ror #2
   117e4:	andeq	r1, r0, r4, lsr #6
   117e8:	andeq	r9, r5, r4, ror #2
   117ec:	andeq	r5, r0, r4, ror #15
   117f0:	andeq	r0, r0, r4, ror #25
   117f4:	andeq	r9, r0, r0, asr #24
   117f8:	push	{r4, r5, r6, r7, r8, lr}
   117fc:	mov	r5, r0
   11800:	ldr	r6, [pc, #76]	; 11854 <__assert_fail@plt+0x8e0>
   11804:	ldr	r4, [pc, #76]	; 11858 <__assert_fail@plt+0x8e4>
   11808:	mov	r0, r1
   1180c:	mov	r7, #1
   11810:	cmp	r0, #32
   11814:	ldreq	r3, [r4, #12]
   11818:	addeq	r3, r3, #1
   1181c:	beq	11844 <__assert_fail@plt+0x8d0>
   11820:	cmp	r0, #9
   11824:	popne	{r4, r5, r6, r7, r8, pc}
   11828:	ldr	r3, [r4, #12]
   1182c:	strb	r7, [r6, #3488]	; 0xda0
   11830:	add	r2, r3, #7
   11834:	cmp	r3, #0
   11838:	movlt	r3, r2
   1183c:	bic	r3, r3, #7
   11840:	add	r3, r3, #8
   11844:	mov	r0, r5
   11848:	str	r3, [r4, #12]
   1184c:	bl	10da0 <getc_unlocked@plt>
   11850:	b	11810 <__assert_fail@plt+0x89c>
   11854:	andeq	sp, r2, r8, asr #2
   11858:	andeq	r7, r2, r0, ror #2
   1185c:	push	{r4, r5, r6, lr}
   11860:	mov	r3, #0
   11864:	ldr	r4, [pc, #140]	; 118f8 <__assert_fail@plt+0x984>
   11868:	mov	r6, r0
   1186c:	str	r3, [r4, #12]
   11870:	bl	10da0 <getc_unlocked@plt>
   11874:	mov	r1, r0
   11878:	mov	r0, r6
   1187c:	bl	117f8 <__assert_fail@plt+0x884>
   11880:	ldr	r3, [pc, #116]	; 118fc <__assert_fail@plt+0x988>
   11884:	ldr	r2, [r3, #3492]	; 0xda4
   11888:	cmp	r2, #0
   1188c:	bne	118a8 <__assert_fail@plt+0x934>
   11890:	ldr	r2, [r4, #12]
   11894:	ldr	r3, [r3, #3496]	; 0xda8
   11898:	cmp	r2, r3
   1189c:	strle	r2, [r4]
   118a0:	strgt	r3, [r4]
   118a4:	pop	{r4, r5, r6, pc}
   118a8:	ldr	r2, [r4, #12]
   118ac:	mov	r5, r4
   118b0:	str	r2, [r4]
   118b4:	ldr	r4, [r3, #3500]	; 0xdac
   118b8:	sub	r4, r4, #1
   118bc:	ldrb	r3, [r4, #1]!
   118c0:	cmp	r3, #0
   118c4:	bne	118d8 <__assert_fail@plt+0x964>
   118c8:	mov	r1, r0
   118cc:	mov	r0, r6
   118d0:	pop	{r4, r5, r6, lr}
   118d4:	b	117f8 <__assert_fail@plt+0x884>
   118d8:	cmp	r0, r3
   118dc:	popne	{r4, r5, r6, pc}
   118e0:	ldr	r3, [r5, #12]
   118e4:	mov	r0, r6
   118e8:	add	r3, r3, #1
   118ec:	str	r3, [r5, #12]
   118f0:	bl	10da0 <getc_unlocked@plt>
   118f4:	b	118bc <__assert_fail@plt+0x948>
   118f8:	andeq	r7, r2, r0, ror #2
   118fc:	andeq	sp, r2, r8, asr #2
   11900:	push	{r4, r5, r6, r7, r8, lr}
   11904:	ldr	r4, [pc, #148]	; 119a0 <__assert_fail@plt+0xa2c>
   11908:	ldrb	r2, [r4, #3488]	; 0xda0
   1190c:	ldr	r3, [r4, #3504]	; 0xdb0
   11910:	cmp	r2, #0
   11914:	add	r6, r3, r0
   11918:	bne	11930 <__assert_fail@plt+0x9bc>
   1191c:	mov	r5, #32
   11920:	ldr	r3, [r4, #3504]	; 0xdb0
   11924:	cmp	r6, r3
   11928:	bgt	11988 <__assert_fail@plt+0xa14>
   1192c:	pop	{r4, r5, r6, r7, r8, pc}
   11930:	cmp	r6, #0
   11934:	add	r5, r6, #7
   11938:	movge	r5, r6
   1193c:	bic	r5, r5, #7
   11940:	add	r3, r3, #1
   11944:	cmp	r5, r3
   11948:	ble	1191c <__assert_fail@plt+0x9a8>
   1194c:	mov	r7, #9
   11950:	b	11978 <__assert_fail@plt+0xa04>
   11954:	mov	r0, r7
   11958:	bl	10f68 <putchar_unlocked@plt>
   1195c:	ldr	r3, [r4, #3504]	; 0xdb0
   11960:	add	r2, r3, #7
   11964:	cmp	r3, #0
   11968:	movlt	r3, r2
   1196c:	bic	r3, r3, #7
   11970:	add	r3, r3, #8
   11974:	str	r3, [r4, #3504]	; 0xdb0
   11978:	ldr	r3, [r4, #3504]	; 0xdb0
   1197c:	cmp	r5, r3
   11980:	bgt	11954 <__assert_fail@plt+0x9e0>
   11984:	b	1191c <__assert_fail@plt+0x9a8>
   11988:	mov	r0, r5
   1198c:	bl	10f68 <putchar_unlocked@plt>
   11990:	ldr	r3, [r4, #3504]	; 0xdb0
   11994:	add	r3, r3, #1
   11998:	str	r3, [r4, #3504]	; 0xdb0
   1199c:	b	11920 <__assert_fail@plt+0x9ac>
   119a0:	andeq	sp, r2, r8, asr #2
   119a4:	push	{r4, r5, r6, lr}
   119a8:	mov	r5, r0
   119ac:	ldm	r0, {r4, r6}
   119b0:	add	r6, r4, r6
   119b4:	cmp	r4, r6
   119b8:	bne	119d4 <__assert_fail@plt+0xa60>
   119bc:	ldr	r2, [pc, #28]	; 119e0 <__assert_fail@plt+0xa6c>
   119c0:	ldr	r3, [r5, #4]
   119c4:	ldr	r1, [r2, #3504]	; 0xdb0
   119c8:	add	r3, r3, r1
   119cc:	str	r3, [r2, #3504]	; 0xdb0
   119d0:	pop	{r4, r5, r6, pc}
   119d4:	ldrb	r0, [r4], #1
   119d8:	bl	10f68 <putchar_unlocked@plt>
   119dc:	b	119b4 <__assert_fail@plt+0xa40>
   119e0:	andeq	sp, r2, r8, asr #2
   119e4:	push	{r4, r5, r6, r7, r8, lr}
   119e8:	mov	r3, #0
   119ec:	ldr	r6, [pc, #124]	; 11a70 <__assert_fail@plt+0xafc>
   119f0:	ldr	r4, [pc, #124]	; 11a74 <__assert_fail@plt+0xb00>
   119f4:	mov	r5, r0
   119f8:	ldr	r0, [r6, #4]
   119fc:	mov	r7, r1
   11a00:	str	r3, [r4, #3504]	; 0xdb0
   11a04:	bl	11900 <__assert_fail@plt+0x98c>
   11a08:	ldr	r3, [pc, #104]	; 11a78 <__assert_fail@plt+0xb04>
   11a0c:	ldr	r0, [r4, #3500]	; 0xdac
   11a10:	ldr	r1, [r3]
   11a14:	bl	10d04 <fputs_unlocked@plt>
   11a18:	ldr	r0, [r4, #3504]	; 0xdb0
   11a1c:	ldr	r3, [r4, #3492]	; 0xda4
   11a20:	add	r0, r0, r3
   11a24:	str	r0, [r4, #3504]	; 0xdb0
   11a28:	sub	r0, r7, r0
   11a2c:	bl	11900 <__assert_fail@plt+0x98c>
   11a30:	ldr	r7, [r5, #24]
   11a34:	sub	r7, r7, #28
   11a38:	cmp	r5, r7
   11a3c:	mov	r0, r5
   11a40:	bne	11a5c <__assert_fail@plt+0xae8>
   11a44:	bl	119a4 <__assert_fail@plt+0xa30>
   11a48:	ldr	r3, [r4, #3504]	; 0xdb0
   11a4c:	mov	r0, #10
   11a50:	str	r3, [r6, #36]	; 0x24
   11a54:	pop	{r4, r5, r6, r7, r8, lr}
   11a58:	b	10f68 <putchar_unlocked@plt>
   11a5c:	bl	119a4 <__assert_fail@plt+0xa30>
   11a60:	ldr	r0, [r5, #8]
   11a64:	bl	11900 <__assert_fail@plt+0x98c>
   11a68:	add	r5, r5, #28
   11a6c:	b	11a38 <__assert_fail@plt+0xac4>
   11a70:	andeq	r7, r2, r0, ror #2
   11a74:	andeq	sp, r2, r8, asr #2
   11a78:	andeq	r7, r2, r4, asr r1
   11a7c:	push	{r4, r5, r6, lr}
   11a80:	mov	r6, r0
   11a84:	ldr	r4, [pc, #44]	; 11ab8 <__assert_fail@plt+0xb44>
   11a88:	add	r0, r4, #40	; 0x28
   11a8c:	ldr	r1, [r4, #28]
   11a90:	bl	119e4 <__assert_fail@plt+0xa70>
   11a94:	ldr	r5, [r4, #64]	; 0x40
   11a98:	cmp	r5, r6
   11a9c:	bne	11aa4 <__assert_fail@plt+0xb30>
   11aa0:	pop	{r4, r5, r6, pc}
   11aa4:	mov	r0, r5
   11aa8:	ldr	r1, [r4, #24]
   11aac:	bl	119e4 <__assert_fail@plt+0xa70>
   11ab0:	ldr	r5, [r5, #24]
   11ab4:	b	11a98 <__assert_fail@plt+0xb24>
   11ab8:	andeq	r7, r2, r0, ror #2
   11abc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ac0:	ldr	r5, [pc, #284]	; 11be4 <__assert_fail@plt+0xc70>
   11ac4:	add	r4, r5, #40	; 0x28
   11ac8:	ldr	r6, [r5, #16]
   11acc:	cmp	r6, r4
   11ad0:	bne	11b00 <__assert_fail@plt+0xb8c>
   11ad4:	ldr	r5, [pc, #268]	; 11be8 <__assert_fail@plt+0xc74>
   11ad8:	ldr	r3, [pc, #268]	; 11bec <__assert_fail@plt+0xc78>
   11adc:	ldr	r4, [pc, #268]	; 11bf0 <__assert_fail@plt+0xc7c>
   11ae0:	ldr	r2, [r5, #3508]	; 0xdb4
   11ae4:	ldr	r3, [r3]
   11ae8:	sub	r2, r2, r4
   11aec:	mov	r1, #1
   11af0:	mov	r0, r4
   11af4:	bl	10d7c <fwrite_unlocked@plt>
   11af8:	str	r4, [r5, #3508]	; 0xdb4
   11afc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b00:	bl	11618 <__assert_fail@plt+0x6a4>
   11b04:	ldr	r2, [r5, #64]	; 0x40
   11b08:	mov	r7, r4
   11b0c:	mvn	r3, #-2147483648	; 0x80000000
   11b10:	mov	r4, r6
   11b14:	cmp	r2, r6
   11b18:	bne	11ba4 <__assert_fail@plt+0xc30>
   11b1c:	ldr	r9, [pc, #196]	; 11be8 <__assert_fail@plt+0xc74>
   11b20:	mov	r0, r4
   11b24:	bl	11a7c <__assert_fail@plt+0xb08>
   11b28:	ldr	r6, [pc, #192]	; 11bf0 <__assert_fail@plt+0xc7c>
   11b2c:	ldr	r8, [r9, #3508]	; 0xdb4
   11b30:	ldr	r1, [r4]
   11b34:	ldr	r3, [pc, #184]	; 11bf4 <__assert_fail@plt+0xc80>
   11b38:	sub	r2, r8, r1
   11b3c:	mov	r0, r6
   11b40:	bl	10d40 <__memmove_chk@plt>
   11b44:	ldr	r3, [r4]
   11b48:	mov	r2, r4
   11b4c:	sub	r3, r6, r3
   11b50:	ldr	r6, [r5, #16]
   11b54:	add	r8, r8, r3
   11b58:	str	r8, [r9, #3508]	; 0xdb4
   11b5c:	cmp	r6, r2
   11b60:	add	r1, r2, #28
   11b64:	bcs	11bd0 <__assert_fail@plt+0xc5c>
   11b68:	sub	r2, r6, r4
   11b6c:	mov	r1, #28
   11b70:	asr	r3, r2, #2
   11b74:	ldr	r2, [pc, #124]	; 11bf8 <__assert_fail@plt+0xc84>
   11b78:	ldr	r0, [pc, #124]	; 11bfc <__assert_fail@plt+0xc88>
   11b7c:	mul	r2, r2, r3
   11b80:	ldr	r3, [pc, #120]	; 11c00 <__assert_fail@plt+0xc8c>
   11b84:	add	r2, r2, #1
   11b88:	mul	r2, r1, r2
   11b8c:	mov	r1, r4
   11b90:	sub	r4, r4, r7
   11b94:	sub	r4, r6, r4
   11b98:	bl	10d40 <__memmove_chk@plt>
   11b9c:	str	r4, [r5, #16]
   11ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ba4:	ldr	r0, [r2, #24]
   11ba8:	ldr	r1, [r2, #20]
   11bac:	ldr	ip, [r0, #20]
   11bb0:	sub	r1, r1, ip
   11bb4:	cmp	r3, r1
   11bb8:	movgt	r3, r1
   11bbc:	movgt	r4, r2
   11bc0:	cmn	r3, #-2147483638	; 0x8000000a
   11bc4:	addle	r3, r3, #9
   11bc8:	mov	r2, r0
   11bcc:	b	11b14 <__assert_fail@plt+0xba0>
   11bd0:	ldr	r2, [r1, #-28]	; 0xffffffe4
   11bd4:	add	r2, r2, r3
   11bd8:	str	r2, [r1, #-28]	; 0xffffffe4
   11bdc:	mov	r2, r1
   11be0:	b	11b5c <__assert_fail@plt+0xbe8>
   11be4:	andeq	r7, r2, r0, ror #2
   11be8:	andeq	sp, r2, r8, asr #2
   11bec:	andeq	r7, r2, r4, asr r1
   11bf0:	andeq	sp, r2, r0, lsl #30
   11bf4:	andeq	r1, r0, r8, lsl #7
   11bf8:			; <UNDEFINED> instruction: 0xb6db6db7
   11bfc:	andeq	r7, r2, r8, lsl #3
   11c00:	andeq	r6, r0, r0, ror #26
   11c04:	ldr	r2, [pc, #120]	; 11c84 <__assert_fail@plt+0xd10>
   11c08:	ldrb	r3, [r2, #328]	; 0x148
   11c0c:	cmp	r3, #0
   11c10:	ldr	r3, [pc, #112]	; 11c88 <__assert_fail@plt+0xd14>
   11c14:	beq	11c20 <__assert_fail@plt+0xcac>
   11c18:	ldr	r2, [r3, #28]
   11c1c:	b	11c38 <__assert_fail@plt+0xcc4>
   11c20:	ldrb	r1, [r2, #329]	; 0x149
   11c24:	cmp	r1, #0
   11c28:	beq	11c40 <__assert_fail@plt+0xccc>
   11c2c:	cmp	r0, #0
   11c30:	ldrne	r2, [r3, #12]
   11c34:	beq	11c18 <__assert_fail@plt+0xca4>
   11c38:	str	r2, [r3, #24]
   11c3c:	bx	lr
   11c40:	ldrb	r2, [r2, #330]	; 0x14a
   11c44:	cmp	r2, #0
   11c48:	beq	11c18 <__assert_fail@plt+0xca4>
   11c4c:	cmp	r0, #0
   11c50:	beq	11c64 <__assert_fail@plt+0xcf0>
   11c54:	ldr	r2, [r3, #12]
   11c58:	ldr	r1, [r3, #28]
   11c5c:	cmp	r2, r1
   11c60:	bne	11c38 <__assert_fail@plt+0xcc4>
   11c64:	ldr	r2, [r3, #24]
   11c68:	ldr	r1, [r3, #28]
   11c6c:	cmp	r2, r1
   11c70:	bxne	lr
   11c74:	cmp	r2, #0
   11c78:	moveq	r2, #3
   11c7c:	movne	r2, #0
   11c80:	b	11c38 <__assert_fail@plt+0xcc4>
   11c84:	andeq	pc, r2, r0, asr #2
   11c88:	andeq	r7, r2, r0, ror #2
   11c8c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c90:	mov	sl, r0
   11c94:	ldr	r5, [pc, #540]	; 11eb8 <__assert_fail@plt+0xf44>
   11c98:	ldr	fp, [pc, #540]	; 11ebc <__assert_fail@plt+0xf48>
   11c9c:	mov	r4, r1
   11ca0:	ldr	r7, [pc, #536]	; 11ec0 <__assert_fail@plt+0xf4c>
   11ca4:	ldr	r3, [r5, #16]
   11ca8:	mov	r6, r7
   11cac:	ldr	r2, [r7, #3508]	; 0xdb4
   11cb0:	mov	r8, #1
   11cb4:	str	r2, [r3]
   11cb8:	ldr	r3, [r6, #3508]	; 0xdb4
   11cbc:	ldr	r2, [pc, #512]	; 11ec4 <__assert_fail@plt+0xf50>
   11cc0:	cmp	r3, r2
   11cc4:	bne	11cd4 <__assert_fail@plt+0xd60>
   11cc8:	mov	r0, r8
   11ccc:	bl	11c04 <__assert_fail@plt+0xc90>
   11cd0:	bl	11abc <__assert_fail@plt+0xb48>
   11cd4:	ldr	r3, [r6, #3508]	; 0xdb4
   11cd8:	mov	r0, sl
   11cdc:	add	r2, r3, #1
   11ce0:	strb	r4, [r3]
   11ce4:	str	r2, [r6, #3508]	; 0xdb4
   11ce8:	bl	10da0 <getc_unlocked@plt>
   11cec:	cmn	r0, #1
   11cf0:	mov	r4, r0
   11cf4:	beq	11d10 <__assert_fail@plt+0xd9c>
   11cf8:	bl	10e60 <__ctype_b_loc@plt>
   11cfc:	lsl	r3, r4, #1
   11d00:	ldr	r2, [r0]
   11d04:	ldrh	r3, [r2, r3]
   11d08:	tst	r3, #8192	; 0x2000
   11d0c:	beq	11cb8 <__assert_fail@plt+0xd44>
   11d10:	ldr	r6, [r5, #16]
   11d14:	ldr	r3, [r7, #3508]	; 0xdb4
   11d18:	ldr	r9, [r5, #12]
   11d1c:	ldr	r8, [r6]
   11d20:	ldr	r0, [pc, #416]	; 11ec8 <__assert_fail@plt+0xf54>
   11d24:	sub	r3, r3, r8
   11d28:	str	r3, [r6, #4]
   11d2c:	add	r9, r3, r9
   11d30:	sub	r3, r3, #1
   11d34:	add	r7, r8, r3
   11d38:	ldrb	r3, [r8, r3]
   11d3c:	ldrb	r1, [r8]
   11d40:	str	r9, [r5, #12]
   11d44:	str	r3, [sp]
   11d48:	bl	10e84 <strchr@plt>
   11d4c:	ldrb	r2, [r6, #12]
   11d50:	bic	r2, r2, #1
   11d54:	cmp	r0, #0
   11d58:	moveq	r0, r2
   11d5c:	orrne	r0, r2, #1
   11d60:	strb	r0, [r6, #12]
   11d64:	bl	10e60 <__ctype_b_loc@plt>
   11d68:	ldr	r3, [sp]
   11d6c:	lsl	r3, r3, #1
   11d70:	ldr	r2, [r0]
   11d74:	ldrh	r3, [r2, r3]
   11d78:	ldrb	r2, [r6, #12]
   11d7c:	and	r3, r3, #4
   11d80:	bic	r2, r2, #4
   11d84:	orr	r3, r3, r2
   11d88:	ldr	r2, [pc, #316]	; 11ecc <__assert_fail@plt+0xf58>
   11d8c:	strb	r3, [r6, #12]
   11d90:	cmp	r8, r7
   11d94:	mov	r3, r7
   11d98:	bcc	11df4 <__assert_fail@plt+0xe80>
   11d9c:	ldrb	r1, [r3]
   11da0:	ldr	r0, [pc, #296]	; 11ed0 <__assert_fail@plt+0xf5c>
   11da4:	bl	10e84 <strchr@plt>
   11da8:	ldrb	r3, [r6, #12]
   11dac:	mov	r1, r4
   11db0:	bic	r3, r3, #2
   11db4:	cmp	r0, #0
   11db8:	movne	r0, #2
   11dbc:	moveq	r0, #0
   11dc0:	orr	r0, r0, r3
   11dc4:	strb	r0, [r6, #12]
   11dc8:	mov	r0, sl
   11dcc:	bl	117f8 <__assert_fail@plt+0x884>
   11dd0:	ldr	r2, [r5, #16]
   11dd4:	ldr	r1, [r5, #12]
   11dd8:	sub	r1, r1, r9
   11ddc:	str	r1, [r2, #8]
   11de0:	cmn	r0, #1
   11de4:	mov	r4, r0
   11de8:	bne	11e1c <__assert_fail@plt+0xea8>
   11dec:	mov	r9, #1
   11df0:	b	11e3c <__assert_fail@plt+0xec8>
   11df4:	ldrb	r1, [r3]
   11df8:	mov	r0, r2
   11dfc:	str	r3, [sp, #4]
   11e00:	str	r2, [sp]
   11e04:	bl	10e84 <strchr@plt>
   11e08:	sub	r7, r7, #1
   11e0c:	ldm	sp, {r2, r3}
   11e10:	cmp	r0, #0
   11e14:	bne	11d90 <__assert_fail@plt+0xe1c>
   11e18:	b	11d9c <__assert_fail@plt+0xe28>
   11e1c:	ldrb	r3, [r2, #12]
   11e20:	ands	r9, r3, #2
   11e24:	beq	11e3c <__assert_fail@plt+0xec8>
   11e28:	cmp	r1, #1
   11e2c:	movle	r9, #0
   11e30:	movgt	r9, #1
   11e34:	cmp	r0, #10
   11e38:	orreq	r9, r9, #1
   11e3c:	ldrb	r3, [r2, #12]
   11e40:	cmn	r4, #1
   11e44:	cmpne	r4, #10
   11e48:	bic	r3, r3, #8
   11e4c:	orr	r9, r3, r9, lsl #3
   11e50:	strb	r9, [r2, #12]
   11e54:	beq	11e68 <__assert_fail@plt+0xef4>
   11e58:	ldr	r3, [pc, #116]	; 11ed4 <__assert_fail@plt+0xf60>
   11e5c:	ldrb	r3, [r3, #331]	; 0x14b
   11e60:	cmp	r3, #0
   11e64:	beq	11e7c <__assert_fail@plt+0xf08>
   11e68:	ldrb	r3, [r2, #12]
   11e6c:	tst	r3, #8
   11e70:	movne	r3, #2
   11e74:	moveq	r3, #1
   11e78:	str	r3, [r2, #8]
   11e7c:	cmp	r2, fp
   11e80:	bne	11e90 <__assert_fail@plt+0xf1c>
   11e84:	mov	r0, #1
   11e88:	bl	11c04 <__assert_fail@plt+0xc90>
   11e8c:	bl	11abc <__assert_fail@plt+0xb48>
   11e90:	ldr	r3, [r5, #16]
   11e94:	cmp	r4, #10
   11e98:	cmnne	r4, #1
   11e9c:	add	r3, r3, #28
   11ea0:	str	r3, [r5, #16]
   11ea4:	bne	11ca0 <__assert_fail@plt+0xd2c>
   11ea8:	mov	r0, sl
   11eac:	add	sp, sp, #12
   11eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb4:	b	1185c <__assert_fail@plt+0x8e8>
   11eb8:	andeq	r7, r2, r0, ror #2
   11ebc:			; <UNDEFINED> instruction: 0x0002deb0
   11ec0:	andeq	sp, r2, r8, asr #2
   11ec4:	andeq	pc, r2, r8, lsl #5
   11ec8:	andeq	r5, r1, r4, lsr #15
   11ecc:	andeq	r5, r1, lr, lsr #15
   11ed0:	andeq	r5, r1, sl, lsr #15
   11ed4:	andeq	pc, r2, r0, asr #2
   11ed8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11edc:	mov	r5, r0
   11ee0:	ldr	r6, [pc, #848]	; 12238 <__assert_fail@plt+0x12c4>
   11ee4:	ldr	r4, [pc, #848]	; 1223c <__assert_fail@plt+0x12c8>
   11ee8:	str	r1, [sp]
   11eec:	mov	r1, #2
   11ef0:	bl	1260c <__assert_fail@plt+0x1698>
   11ef4:	mov	r8, #0
   11ef8:	mov	r0, r5
   11efc:	strb	r8, [r6, #3488]	; 0xda0
   11f00:	str	r8, [r4, #24]
   11f04:	bl	1185c <__assert_fail@plt+0x8e8>
   11f08:	ldr	r7, [pc, #816]	; 12240 <__assert_fail@plt+0x12cc>
   11f0c:	ldr	sl, [pc, #816]	; 12244 <__assert_fail@plt+0x12d0>
   11f10:	str	r0, [r7, #332]	; 0x14c
   11f14:	ldr	r9, [r7, #332]	; 0x14c
   11f18:	mov	fp, #10
   11f1c:	str	r8, [r4, #36]	; 0x24
   11f20:	cmn	r9, #1
   11f24:	cmpne	r9, #10
   11f28:	beq	11ff0 <__assert_fail@plt+0x107c>
   11f2c:	ldr	r3, [r4]
   11f30:	ldr	r2, [r6, #3496]	; 0xda8
   11f34:	cmp	r3, r2
   11f38:	blt	11ff0 <__assert_fail@plt+0x107c>
   11f3c:	ldr	r2, [r4, #8]
   11f40:	ldr	r0, [r4, #12]
   11f44:	add	r2, r3, r2
   11f48:	cmp	r2, r0
   11f4c:	bgt	11ff0 <__assert_fail@plt+0x107c>
   11f50:	ldr	fp, [pc, #752]	; 12248 <__assert_fail@plt+0x12d4>
   11f54:	mov	r1, r9
   11f58:	str	r0, [r4, #28]
   11f5c:	mov	r0, r5
   11f60:	str	r3, [r4, #4]
   11f64:	str	sl, [r6, #3508]	; 0xdb4
   11f68:	str	fp, [r4, #16]
   11f6c:	bl	11c8c <__assert_fail@plt+0xd18>
   11f70:	mov	r9, r0
   11f74:	bl	115d0 <__assert_fail@plt+0x65c>
   11f78:	bl	11c04 <__assert_fail@plt+0xc90>
   11f7c:	ldrb	r3, [r7, #328]	; 0x148
   11f80:	cmp	r3, #0
   11f84:	bne	11fd0 <__assert_fail@plt+0x105c>
   11f88:	ldrb	r3, [r7, #329]	; 0x149
   11f8c:	cmp	r3, #0
   11f90:	beq	12160 <__assert_fail@plt+0x11ec>
   11f94:	mov	r0, r9
   11f98:	bl	115d0 <__assert_fail@plt+0x65c>
   11f9c:	cmp	r0, #0
   11fa0:	beq	11fd0 <__assert_fail@plt+0x105c>
   11fa4:	mov	r1, r9
   11fa8:	mov	r0, r5
   11fac:	bl	11c8c <__assert_fail@plt+0xd18>
   11fb0:	mov	r9, r0
   11fb4:	bl	115d0 <__assert_fail@plt+0x65c>
   11fb8:	cmp	r0, #0
   11fbc:	beq	11fd0 <__assert_fail@plt+0x105c>
   11fc0:	ldr	r2, [r4, #12]
   11fc4:	ldr	r3, [r4, #24]
   11fc8:	cmp	r2, r3
   11fcc:	beq	11fa4 <__assert_fail@plt+0x1030>
   11fd0:	ldr	r0, [r4, #16]
   11fd4:	cmp	r0, fp
   11fd8:	bhi	121f0 <__assert_fail@plt+0x127c>
   11fdc:	ldr	r3, [pc, #616]	; 1224c <__assert_fail@plt+0x12d8>
   11fe0:	ldr	r2, [pc, #616]	; 12250 <__assert_fail@plt+0x12dc>
   11fe4:	ldr	r1, [pc, #616]	; 12254 <__assert_fail@plt+0x12e0>
   11fe8:	ldr	r0, [pc, #616]	; 12258 <__assert_fail@plt+0x12e4>
   11fec:	bl	10f74 <__assert_fail@plt>
   11ff0:	ldr	r0, [r4]
   11ff4:	ldr	r3, [r4, #12]
   11ff8:	str	r8, [r6, #3504]	; 0xdb0
   11ffc:	cmp	r3, r0
   12000:	bgt	12010 <__assert_fail@plt+0x109c>
   12004:	cmp	r9, #10
   12008:	cmnne	r9, #1
   1200c:	beq	1204c <__assert_fail@plt+0x10d8>
   12010:	bl	11900 <__assert_fail@plt+0x98c>
   12014:	ldr	r3, [r6, #3500]	; 0xdac
   12018:	sub	r3, r3, #1
   1201c:	ldr	ip, [r6, #3504]	; 0xdb0
   12020:	ldr	r2, [r4, #12]
   12024:	cmp	ip, r2
   12028:	bne	1206c <__assert_fail@plt+0x10f8>
   1202c:	cmp	r9, #10
   12030:	cmnne	r9, #1
   12034:	beq	12094 <__assert_fail@plt+0x1120>
   12038:	sub	r0, r2, ip
   1203c:	bl	11900 <__assert_fail@plt+0x98c>
   12040:	cmp	r9, #10
   12044:	cmnne	r9, #1
   12048:	bne	12148 <__assert_fail@plt+0x11d4>
   1204c:	cmn	r9, #1
   12050:	beq	120b8 <__assert_fail@plt+0x1144>
   12054:	mov	r0, fp
   12058:	bl	10f68 <putchar_unlocked@plt>
   1205c:	mov	r0, r5
   12060:	bl	1185c <__assert_fail@plt+0x8e8>
   12064:	mov	r9, r0
   12068:	b	11f20 <__assert_fail@plt+0xfac>
   1206c:	ldrb	r0, [r3, #1]!
   12070:	cmp	r0, #0
   12074:	beq	1202c <__assert_fail@plt+0x10b8>
   12078:	str	r3, [sp, #4]
   1207c:	bl	10f68 <putchar_unlocked@plt>
   12080:	ldr	r2, [r6, #3504]	; 0xdb0
   12084:	ldr	r3, [sp, #4]
   12088:	add	r2, r2, #1
   1208c:	str	r2, [r6, #3504]	; 0xdb0
   12090:	b	1201c <__assert_fail@plt+0x10a8>
   12094:	cmn	r9, #1
   12098:	bne	12054 <__assert_fail@plt+0x10e0>
   1209c:	ldr	r3, [r4]
   120a0:	ldr	r1, [r6, #3492]	; 0xda4
   120a4:	add	r3, r3, r1
   120a8:	cmp	r2, r3
   120ac:	blt	120b8 <__assert_fail@plt+0x1144>
   120b0:	mov	r0, #10
   120b4:	bl	10f68 <putchar_unlocked@plt>
   120b8:	mvn	r3, #0
   120bc:	mov	r0, r5
   120c0:	str	r3, [r7, #332]	; 0x14c
   120c4:	bl	10e00 <ferror_unlocked@plt>
   120c8:	ldr	r3, [pc, #396]	; 1225c <__assert_fail@plt+0x12e8>
   120cc:	ldr	r3, [r3]
   120d0:	cmp	r0, #0
   120d4:	movne	r4, #0
   120d8:	mvneq	r4, #0
   120dc:	cmp	r5, r3
   120e0:	mov	r6, r0
   120e4:	bne	12214 <__assert_fail@plt+0x12a0>
   120e8:	mov	r0, r5
   120ec:	bl	10f20 <clearerr_unlocked@plt>
   120f0:	cmp	r4, #0
   120f4:	blt	1213c <__assert_fail@plt+0x11c8>
   120f8:	ldrne	r5, [pc, #352]	; 12260 <__assert_fail@plt+0x12ec>
   120fc:	bne	12118 <__assert_fail@plt+0x11a4>
   12100:	mov	r2, #5
   12104:	ldr	r1, [pc, #344]	; 12264 <__assert_fail@plt+0x12f0>
   12108:	mov	r0, #0
   1210c:	bl	10dac <dcgettext@plt>
   12110:	mov	r4, #0
   12114:	mov	r5, r0
   12118:	ldr	r2, [sp]
   1211c:	mov	r1, #3
   12120:	mov	r0, #0
   12124:	bl	13cb8 <__assert_fail@plt+0x2d44>
   12128:	mov	r2, r5
   1212c:	mov	r1, r4
   12130:	mov	r3, r0
   12134:	mov	r0, #0
   12138:	bl	10e18 <error@plt>
   1213c:	lsr	r0, r4, #31
   12140:	add	sp, sp, #12
   12144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12148:	mov	r0, r9
   1214c:	bl	10f68 <putchar_unlocked@plt>
   12150:	mov	r0, r5
   12154:	bl	10da0 <getc_unlocked@plt>
   12158:	mov	r9, r0
   1215c:	b	12040 <__assert_fail@plt+0x10cc>
   12160:	ldrb	r3, [r7, #330]	; 0x14a
   12164:	cmp	r3, #0
   12168:	beq	121cc <__assert_fail@plt+0x1258>
   1216c:	mov	r0, r9
   12170:	bl	115d0 <__assert_fail@plt+0x65c>
   12174:	cmp	r0, #0
   12178:	beq	11fd0 <__assert_fail@plt+0x105c>
   1217c:	ldr	r2, [r4, #12]
   12180:	ldr	r3, [r4, #28]
   12184:	cmp	r2, r3
   12188:	beq	11fd0 <__assert_fail@plt+0x105c>
   1218c:	mov	r1, r9
   12190:	mov	r0, r5
   12194:	bl	11c8c <__assert_fail@plt+0xd18>
   12198:	mov	r9, r0
   1219c:	bl	115d0 <__assert_fail@plt+0x65c>
   121a0:	cmp	r0, #0
   121a4:	beq	11fd0 <__assert_fail@plt+0x105c>
   121a8:	ldr	r2, [r4, #12]
   121ac:	ldr	r3, [r4, #24]
   121b0:	cmp	r2, r3
   121b4:	beq	1218c <__assert_fail@plt+0x1218>
   121b8:	b	11fd0 <__assert_fail@plt+0x105c>
   121bc:	mov	r1, r9
   121c0:	mov	r0, r5
   121c4:	bl	11c8c <__assert_fail@plt+0xd18>
   121c8:	mov	r9, r0
   121cc:	mov	r0, r9
   121d0:	bl	115d0 <__assert_fail@plt+0x65c>
   121d4:	cmp	r0, #0
   121d8:	beq	11fd0 <__assert_fail@plt+0x105c>
   121dc:	ldr	r2, [r4, #12]
   121e0:	ldr	r3, [r4, #24]
   121e4:	cmp	r2, r3
   121e8:	beq	121bc <__assert_fail@plt+0x1248>
   121ec:	b	11fd0 <__assert_fail@plt+0x105c>
   121f0:	ldrb	r3, [r0, #-16]
   121f4:	str	r0, [sp, #4]
   121f8:	str	r9, [r7, #332]	; 0x14c
   121fc:	orr	r3, r3, #10
   12200:	strb	r3, [r0, #-16]
   12204:	bl	11618 <__assert_fail@plt+0x6a4>
   12208:	ldr	r0, [sp, #4]
   1220c:	bl	11a7c <__assert_fail@plt+0xb08>
   12210:	b	11f14 <__assert_fail@plt+0xfa0>
   12214:	mov	r0, r5
   12218:	bl	1263c <__assert_fail@plt+0x16c8>
   1221c:	cmp	r0, #0
   12220:	beq	120f0 <__assert_fail@plt+0x117c>
   12224:	cmp	r6, #0
   12228:	bne	12100 <__assert_fail@plt+0x118c>
   1222c:	bl	10e90 <__errno_location@plt>
   12230:	ldr	r4, [r0]
   12234:	b	120f0 <__assert_fail@plt+0x117c>
   12238:	andeq	sp, r2, r8, asr #2
   1223c:	andeq	r7, r2, r0, ror #2
   12240:	andeq	pc, r2, r0, asr #2
   12244:	andeq	sp, r2, r0, lsl #30
   12248:	andeq	r7, r2, r8, lsl #3
   1224c:			; <UNDEFINED> instruction: 0x000156bc
   12250:	andeq	r0, r0, pc, ror #4
   12254:			; <UNDEFINED> instruction: 0x000157b3
   12258:			; <UNDEFINED> instruction: 0x000157bd
   1225c:	andeq	r7, r2, r0, asr r1
   12260:	andeq	r5, r1, r9, asr lr
   12264:	andeq	r5, r1, pc, asr #15
   12268:	subs	r5, r0, #0
   1226c:	push	{r7, lr}
   12270:	sub	sp, sp, #56	; 0x38
   12274:	ldr	r4, [pc, #548]	; 124a0 <__assert_fail@plt+0x152c>
   12278:	beq	122b0 <__assert_fail@plt+0x133c>
   1227c:	ldr	r3, [pc, #544]	; 124a4 <__assert_fail@plt+0x1530>
   12280:	mov	r2, #5
   12284:	ldr	r1, [pc, #540]	; 124a8 <__assert_fail@plt+0x1534>
   12288:	mov	r0, #0
   1228c:	ldr	r6, [r3]
   12290:	bl	10dac <dcgettext@plt>
   12294:	ldr	r3, [r4]
   12298:	mov	r1, #1
   1229c:	mov	r2, r0
   122a0:	mov	r0, r6
   122a4:	bl	10ed8 <__fprintf_chk@plt>
   122a8:	mov	r0, r5
   122ac:	bl	10e6c <exit@plt>
   122b0:	mov	r2, #5
   122b4:	ldr	r1, [pc, #496]	; 124ac <__assert_fail@plt+0x1538>
   122b8:	bl	10dac <dcgettext@plt>
   122bc:	ldr	r2, [r4]
   122c0:	ldr	r4, [pc, #488]	; 124b0 <__assert_fail@plt+0x153c>
   122c4:	ldr	r8, [pc, #488]	; 124b4 <__assert_fail@plt+0x1540>
   122c8:	mov	r6, r5
   122cc:	mov	r1, r0
   122d0:	mov	r0, #1
   122d4:	bl	10eb4 <__printf_chk@plt>
   122d8:	mov	r2, #5
   122dc:	ldr	r1, [pc, #468]	; 124b8 <__assert_fail@plt+0x1544>
   122e0:	mov	r0, r5
   122e4:	bl	10dac <dcgettext@plt>
   122e8:	ldr	r1, [r4]
   122ec:	bl	10d04 <fputs_unlocked@plt>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #448]	; 124bc <__assert_fail@plt+0x1548>
   122f8:	mov	r0, r5
   122fc:	bl	10dac <dcgettext@plt>
   12300:	ldr	r1, [r4]
   12304:	bl	10d04 <fputs_unlocked@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #428]	; 124c0 <__assert_fail@plt+0x154c>
   12310:	mov	r0, r5
   12314:	bl	10dac <dcgettext@plt>
   12318:	ldr	r1, [r4]
   1231c:	bl	10d04 <fputs_unlocked@plt>
   12320:	mov	r2, #5
   12324:	ldr	r1, [pc, #408]	; 124c4 <__assert_fail@plt+0x1550>
   12328:	mov	r0, r5
   1232c:	bl	10dac <dcgettext@plt>
   12330:	ldr	r1, [r4]
   12334:	bl	10d04 <fputs_unlocked@plt>
   12338:	mov	r2, #5
   1233c:	ldr	r1, [pc, #388]	; 124c8 <__assert_fail@plt+0x1554>
   12340:	mov	r0, r5
   12344:	bl	10dac <dcgettext@plt>
   12348:	ldr	r1, [r4]
   1234c:	bl	10d04 <fputs_unlocked@plt>
   12350:	mov	r2, #5
   12354:	ldr	r1, [pc, #368]	; 124cc <__assert_fail@plt+0x1558>
   12358:	mov	r0, r5
   1235c:	bl	10dac <dcgettext@plt>
   12360:	ldr	r1, [r4]
   12364:	bl	10d04 <fputs_unlocked@plt>
   12368:	mov	r2, #5
   1236c:	ldr	r1, [pc, #348]	; 124d0 <__assert_fail@plt+0x155c>
   12370:	mov	r0, r5
   12374:	bl	10dac <dcgettext@plt>
   12378:	ldr	r1, [r4]
   1237c:	bl	10d04 <fputs_unlocked@plt>
   12380:	ldr	lr, [pc, #332]	; 124d4 <__assert_fail@plt+0x1560>
   12384:	mov	ip, sp
   12388:	ldm	lr!, {r0, r1, r2, r3}
   1238c:	stmia	ip!, {r0, r1, r2, r3}
   12390:	ldm	lr!, {r0, r1, r2, r3}
   12394:	stmia	ip!, {r0, r1, r2, r3}
   12398:	ldm	lr!, {r0, r1, r2, r3}
   1239c:	stmia	ip!, {r0, r1, r2, r3}
   123a0:	ldm	lr, {r0, r1}
   123a4:	stm	ip, {r0, r1}
   123a8:	ldr	r1, [sp, r6]
   123ac:	add	r7, sp, r6
   123b0:	cmp	r1, #0
   123b4:	bne	12458 <__assert_fail@plt+0x14e4>
   123b8:	ldr	r6, [r7, #4]
   123bc:	ldr	r7, [pc, #240]	; 124b4 <__assert_fail@plt+0x1540>
   123c0:	cmp	r6, #0
   123c4:	mov	r2, #5
   123c8:	ldr	r1, [pc, #264]	; 124d8 <__assert_fail@plt+0x1564>
   123cc:	mov	r0, #0
   123d0:	moveq	r6, r7
   123d4:	bl	10dac <dcgettext@plt>
   123d8:	ldr	r3, [pc, #252]	; 124dc <__assert_fail@plt+0x1568>
   123dc:	ldr	r2, [pc, #252]	; 124e0 <__assert_fail@plt+0x156c>
   123e0:	mov	r1, r0
   123e4:	mov	r0, #1
   123e8:	bl	10eb4 <__printf_chk@plt>
   123ec:	mov	r1, #0
   123f0:	mov	r0, #5
   123f4:	bl	10efc <setlocale@plt>
   123f8:	cmp	r0, #0
   123fc:	bne	12470 <__assert_fail@plt+0x14fc>
   12400:	mov	r2, #5
   12404:	ldr	r1, [pc, #216]	; 124e4 <__assert_fail@plt+0x1570>
   12408:	mov	r0, #0
   1240c:	bl	10dac <dcgettext@plt>
   12410:	ldr	r3, [pc, #156]	; 124b4 <__assert_fail@plt+0x1540>
   12414:	ldr	r2, [pc, #192]	; 124dc <__assert_fail@plt+0x1568>
   12418:	mov	r1, r0
   1241c:	mov	r0, #1
   12420:	bl	10eb4 <__printf_chk@plt>
   12424:	mov	r2, #5
   12428:	ldr	r1, [pc, #184]	; 124e8 <__assert_fail@plt+0x1574>
   1242c:	mov	r0, #0
   12430:	bl	10dac <dcgettext@plt>
   12434:	ldr	r2, [pc, #176]	; 124ec <__assert_fail@plt+0x1578>
   12438:	cmp	r6, r7
   1243c:	ldr	r3, [pc, #172]	; 124f0 <__assert_fail@plt+0x157c>
   12440:	moveq	r3, r2
   12444:	mov	r2, r6
   12448:	mov	r1, r0
   1244c:	mov	r0, #1
   12450:	bl	10eb4 <__printf_chk@plt>
   12454:	b	122a8 <__assert_fail@plt+0x1334>
   12458:	mov	r0, r8
   1245c:	bl	10d1c <strcmp@plt>
   12460:	add	r6, r6, #8
   12464:	cmp	r0, #0
   12468:	bne	123a8 <__assert_fail@plt+0x1434>
   1246c:	b	123b8 <__assert_fail@plt+0x1444>
   12470:	mov	r2, #3
   12474:	ldr	r1, [pc, #120]	; 124f4 <__assert_fail@plt+0x1580>
   12478:	bl	10f50 <strncmp@plt>
   1247c:	cmp	r0, #0
   12480:	beq	12400 <__assert_fail@plt+0x148c>
   12484:	mov	r2, #5
   12488:	ldr	r1, [pc, #104]	; 124f8 <__assert_fail@plt+0x1584>
   1248c:	mov	r0, #0
   12490:	bl	10dac <dcgettext@plt>
   12494:	ldr	r1, [r4]
   12498:	bl	10d04 <fputs_unlocked@plt>
   1249c:	b	12400 <__assert_fail@plt+0x148c>
   124a0:	muleq	r2, r8, r2
   124a4:	andeq	r7, r2, r8, asr #2
   124a8:	ldrdeq	r5, [r1], -lr
   124ac:	andeq	r5, r1, r5, lsl #16
   124b0:	andeq	r7, r2, r4, asr r1
   124b4:	ldrdeq	r5, [r1], -sl
   124b8:	andeq	r5, r1, pc, lsr #16
   124bc:			; <UNDEFINED> instruction: 0x000158b0
   124c0:	andeq	r5, r1, r8, ror #17
   124c4:	andeq	r5, r1, r3, lsr r9
   124c8:	andeq	r5, r1, r9, asr #20
   124cc:	andeq	r5, r1, r7, ror #22
   124d0:	muleq	r1, r4, fp
   124d4:	andeq	r5, r1, ip, asr #13
   124d8:	andeq	r5, r1, sl, asr #23
   124dc:	andeq	r5, r1, r1, ror #23
   124e0:	andeq	r5, r1, r9, lsl #24
   124e4:	andeq	r5, r1, r2, ror #24
   124e8:	andeq	r5, r1, sp, ror ip
   124ec:	andeq	r5, r1, r5, lsr #27
   124f0:	andeq	r5, r1, pc, lsr #25
   124f4:	andeq	r5, r1, r7, lsl ip
   124f8:	andeq	r5, r1, fp, lsl ip
   124fc:	ldr	r3, [pc, #4]	; 12508 <__assert_fail@plt+0x1594>
   12500:	str	r0, [r3]
   12504:	bx	lr
   12508:	muleq	r2, r0, r2
   1250c:	ldr	r3, [pc, #4]	; 12518 <__assert_fail@plt+0x15a4>
   12510:	strb	r0, [r3, #4]
   12514:	bx	lr
   12518:	muleq	r2, r0, r2
   1251c:	ldr	r3, [pc, #192]	; 125e4 <__assert_fail@plt+0x1670>
   12520:	push	{r0, r1, r4, r5, r6, lr}
   12524:	ldr	r0, [r3]
   12528:	bl	14e00 <__assert_fail@plt+0x3e8c>
   1252c:	cmp	r0, #0
   12530:	beq	125c8 <__assert_fail@plt+0x1654>
   12534:	ldr	r3, [pc, #172]	; 125e8 <__assert_fail@plt+0x1674>
   12538:	mov	r4, r3
   1253c:	ldrb	r2, [r3, #4]
   12540:	cmp	r2, #0
   12544:	beq	12558 <__assert_fail@plt+0x15e4>
   12548:	bl	10e90 <__errno_location@plt>
   1254c:	ldr	r3, [r0]
   12550:	cmp	r3, #32
   12554:	beq	125c8 <__assert_fail@plt+0x1654>
   12558:	mov	r2, #5
   1255c:	ldr	r1, [pc, #136]	; 125ec <__assert_fail@plt+0x1678>
   12560:	mov	r0, #0
   12564:	bl	10dac <dcgettext@plt>
   12568:	ldr	r4, [r4]
   1256c:	cmp	r4, #0
   12570:	mov	r5, r0
   12574:	beq	125ac <__assert_fail@plt+0x1638>
   12578:	bl	10e90 <__errno_location@plt>
   1257c:	ldr	r6, [r0]
   12580:	mov	r0, r4
   12584:	bl	13ca8 <__assert_fail@plt+0x2d34>
   12588:	str	r5, [sp]
   1258c:	ldr	r2, [pc, #92]	; 125f0 <__assert_fail@plt+0x167c>
   12590:	mov	r1, r6
   12594:	mov	r3, r0
   12598:	mov	r0, #0
   1259c:	bl	10e18 <error@plt>
   125a0:	ldr	r3, [pc, #76]	; 125f4 <__assert_fail@plt+0x1680>
   125a4:	ldr	r0, [r3]
   125a8:	bl	10d58 <_exit@plt>
   125ac:	bl	10e90 <__errno_location@plt>
   125b0:	mov	r3, r5
   125b4:	ldr	r2, [pc, #60]	; 125f8 <__assert_fail@plt+0x1684>
   125b8:	ldr	r1, [r0]
   125bc:	mov	r0, r4
   125c0:	bl	10e18 <error@plt>
   125c4:	b	125a0 <__assert_fail@plt+0x162c>
   125c8:	ldr	r3, [pc, #44]	; 125fc <__assert_fail@plt+0x1688>
   125cc:	ldr	r0, [r3]
   125d0:	bl	14e00 <__assert_fail@plt+0x3e8c>
   125d4:	cmp	r0, #0
   125d8:	bne	125a0 <__assert_fail@plt+0x162c>
   125dc:	add	sp, sp, #8
   125e0:	pop	{r4, r5, r6, pc}
   125e4:	andeq	r7, r2, r4, asr r1
   125e8:	muleq	r2, r0, r2
   125ec:	andeq	r5, r1, r9, asr #28
   125f0:	andeq	r5, r1, r5, asr lr
   125f4:	strdeq	r7, [r2], -r4
   125f8:	andeq	r5, r1, r9, asr lr
   125fc:	andeq	r7, r2, r8, asr #2
   12600:	push	{r4, r5}
   12604:	pop	{r4, r5}
   12608:	b	10d28 <posix_fadvise64@plt>
   1260c:	cmp	r0, #0
   12610:	bxeq	lr
   12614:	push	{r0, r1, r2, r3, r4, lr}
   12618:	mov	r4, r1
   1261c:	bl	10ec0 <fileno@plt>
   12620:	mov	r2, #0
   12624:	mov	r3, #0
   12628:	str	r4, [sp, #8]
   1262c:	strd	r2, [sp]
   12630:	bl	10d28 <posix_fadvise64@plt>
   12634:	add	sp, sp, #16
   12638:	pop	{r4, pc}
   1263c:	push	{r0, r1, r2, r4, r5, lr}
   12640:	mov	r4, r0
   12644:	bl	10ec0 <fileno@plt>
   12648:	cmp	r0, #0
   1264c:	mov	r0, r4
   12650:	bge	12660 <__assert_fail@plt+0x16ec>
   12654:	add	sp, sp, #12
   12658:	pop	{r4, r5, lr}
   1265c:	b	10ee4 <fclose@plt>
   12660:	bl	10e3c <__freading@plt>
   12664:	cmp	r0, #0
   12668:	bne	126a4 <__assert_fail@plt+0x1730>
   1266c:	mov	r0, r4
   12670:	bl	126e4 <__assert_fail@plt+0x1770>
   12674:	cmp	r0, #0
   12678:	bne	126d8 <__assert_fail@plt+0x1764>
   1267c:	mov	r5, #0
   12680:	mov	r0, r4
   12684:	bl	10ee4 <fclose@plt>
   12688:	cmp	r5, #0
   1268c:	beq	1269c <__assert_fail@plt+0x1728>
   12690:	bl	10e90 <__errno_location@plt>
   12694:	str	r5, [r0]
   12698:	mvn	r0, #0
   1269c:	add	sp, sp, #12
   126a0:	pop	{r4, r5, pc}
   126a4:	mov	r0, r4
   126a8:	bl	10ec0 <fileno@plt>
   126ac:	mov	r3, #1
   126b0:	str	r3, [sp]
   126b4:	mov	r2, #0
   126b8:	mov	r3, #0
   126bc:	bl	10ddc <lseek64@plt>
   126c0:	mvn	r3, #0
   126c4:	mvn	r2, #0
   126c8:	cmp	r1, r3
   126cc:	cmpeq	r0, r2
   126d0:	bne	1266c <__assert_fail@plt+0x16f8>
   126d4:	b	1267c <__assert_fail@plt+0x1708>
   126d8:	bl	10e90 <__errno_location@plt>
   126dc:	ldr	r5, [r0]
   126e0:	b	12680 <__assert_fail@plt+0x170c>
   126e4:	push	{r0, r1, r4, lr}
   126e8:	subs	r4, r0, #0
   126ec:	bne	12700 <__assert_fail@plt+0x178c>
   126f0:	mov	r0, r4
   126f4:	add	sp, sp, #8
   126f8:	pop	{r4, lr}
   126fc:	b	10d34 <fflush@plt>
   12700:	bl	10e3c <__freading@plt>
   12704:	cmp	r0, #0
   12708:	beq	126f0 <__assert_fail@plt+0x177c>
   1270c:	ldr	r3, [r4]
   12710:	tst	r3, #256	; 0x100
   12714:	beq	126f0 <__assert_fail@plt+0x177c>
   12718:	mov	r3, #1
   1271c:	str	r3, [sp]
   12720:	mov	r2, #0
   12724:	mov	r3, #0
   12728:	mov	r0, r4
   1272c:	bl	12734 <__assert_fail@plt+0x17c0>
   12730:	b	126f0 <__assert_fail@plt+0x177c>
   12734:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12738:	mov	r4, r0
   1273c:	ldmib	r0, {ip, lr}
   12740:	ldr	r8, [sp, #32]
   12744:	cmp	lr, ip
   12748:	bne	127b4 <__assert_fail@plt+0x1840>
   1274c:	ldr	lr, [r0, #20]
   12750:	ldr	ip, [r0, #16]
   12754:	cmp	lr, ip
   12758:	bne	127b4 <__assert_fail@plt+0x1840>
   1275c:	ldr	r5, [r0, #36]	; 0x24
   12760:	cmp	r5, #0
   12764:	bne	127b4 <__assert_fail@plt+0x1840>
   12768:	mov	r6, r2
   1276c:	mov	r7, r3
   12770:	bl	10ec0 <fileno@plt>
   12774:	mov	r2, r6
   12778:	mov	r3, r7
   1277c:	str	r8, [sp]
   12780:	bl	10ddc <lseek64@plt>
   12784:	mvn	r3, #0
   12788:	mvn	r2, #0
   1278c:	cmp	r1, r3
   12790:	cmpeq	r0, r2
   12794:	mvneq	r0, #0
   12798:	ldrne	r3, [r4]
   1279c:	strdne	r0, [r4, #80]	; 0x50
   127a0:	movne	r0, r5
   127a4:	bicne	r3, r3, #16
   127a8:	strne	r3, [r4]
   127ac:	add	sp, sp, #8
   127b0:	pop	{r4, r5, r6, r7, r8, pc}
   127b4:	str	r8, [sp, #32]
   127b8:	mov	r0, r4
   127bc:	add	sp, sp, #8
   127c0:	pop	{r4, r5, r6, r7, r8, lr}
   127c4:	b	10ef0 <fseeko64@plt>
   127c8:	push	{r4, r5, r6, lr}
   127cc:	subs	r5, r0, #0
   127d0:	bne	127e8 <__assert_fail@plt+0x1874>
   127d4:	ldr	r3, [pc, #124]	; 12858 <__assert_fail@plt+0x18e4>
   127d8:	ldr	r0, [pc, #124]	; 1285c <__assert_fail@plt+0x18e8>
   127dc:	ldr	r1, [r3]
   127e0:	bl	10f44 <fputs@plt>
   127e4:	bl	10f5c <abort@plt>
   127e8:	mov	r1, #47	; 0x2f
   127ec:	bl	10f08 <strrchr@plt>
   127f0:	cmp	r0, #0
   127f4:	addne	r4, r0, #1
   127f8:	moveq	r4, r5
   127fc:	sub	r3, r4, r5
   12800:	cmp	r3, #6
   12804:	ble	12844 <__assert_fail@plt+0x18d0>
   12808:	mov	r2, #7
   1280c:	ldr	r1, [pc, #76]	; 12860 <__assert_fail@plt+0x18ec>
   12810:	sub	r0, r4, #7
   12814:	bl	10f50 <strncmp@plt>
   12818:	cmp	r0, #0
   1281c:	bne	12844 <__assert_fail@plt+0x18d0>
   12820:	mov	r2, #3
   12824:	ldr	r1, [pc, #56]	; 12864 <__assert_fail@plt+0x18f0>
   12828:	mov	r0, r4
   1282c:	bl	10f50 <strncmp@plt>
   12830:	cmp	r0, #0
   12834:	movne	r5, r4
   12838:	ldreq	r3, [pc, #40]	; 12868 <__assert_fail@plt+0x18f4>
   1283c:	addeq	r5, r4, #3
   12840:	streq	r5, [r3]
   12844:	ldr	r3, [pc, #32]	; 1286c <__assert_fail@plt+0x18f8>
   12848:	str	r5, [r3]
   1284c:	ldr	r3, [pc, #28]	; 12870 <__assert_fail@plt+0x18fc>
   12850:	str	r5, [r3]
   12854:	pop	{r4, r5, r6, pc}
   12858:	andeq	r7, r2, r8, asr #2
   1285c:	andeq	r5, r1, ip, asr lr
   12860:	muleq	r1, r4, lr
   12864:	muleq	r1, ip, lr
   12868:	andeq	r7, r2, r8, lsr r1
   1286c:	muleq	r2, r8, r2
   12870:	andeq	r7, r2, ip, lsr r1
   12874:	push	{r4, r5, r6, lr}
   12878:	mov	r2, #48	; 0x30
   1287c:	mov	r5, r1
   12880:	mov	r1, #0
   12884:	mov	r4, r0
   12888:	bl	10ea8 <memset@plt>
   1288c:	cmp	r5, #10
   12890:	bne	12898 <__assert_fail@plt+0x1924>
   12894:	bl	10f5c <abort@plt>
   12898:	str	r5, [r4]
   1289c:	mov	r0, r4
   128a0:	pop	{r4, r5, r6, pc}
   128a4:	push	{r4, r5, r6, lr}
   128a8:	mov	r4, r0
   128ac:	mov	r5, r1
   128b0:	bl	14ec4 <__assert_fail@plt+0x3f50>
   128b4:	ldrb	r3, [r0]
   128b8:	bic	r3, r3, #32
   128bc:	cmp	r3, #85	; 0x55
   128c0:	bne	12930 <__assert_fail@plt+0x19bc>
   128c4:	ldrb	r3, [r0, #1]
   128c8:	bic	r3, r3, #32
   128cc:	cmp	r3, #84	; 0x54
   128d0:	bne	12908 <__assert_fail@plt+0x1994>
   128d4:	ldrb	r3, [r0, #2]
   128d8:	bic	r3, r3, #32
   128dc:	cmp	r3, #70	; 0x46
   128e0:	bne	12908 <__assert_fail@plt+0x1994>
   128e4:	ldrb	r3, [r0, #3]
   128e8:	cmp	r3, #45	; 0x2d
   128ec:	bne	12908 <__assert_fail@plt+0x1994>
   128f0:	ldrb	r3, [r0, #4]
   128f4:	cmp	r3, #56	; 0x38
   128f8:	bne	12908 <__assert_fail@plt+0x1994>
   128fc:	ldrb	r3, [r0, #5]
   12900:	cmp	r3, #0
   12904:	beq	1291c <__assert_fail@plt+0x19a8>
   12908:	ldr	r1, [pc, #144]	; 129a0 <__assert_fail@plt+0x1a2c>
   1290c:	ldr	r0, [pc, #144]	; 129a4 <__assert_fail@plt+0x1a30>
   12910:	cmp	r5, #9
   12914:	movne	r0, r1
   12918:	pop	{r4, r5, r6, pc}
   1291c:	ldrb	r3, [r4]
   12920:	ldr	r1, [pc, #128]	; 129a8 <__assert_fail@plt+0x1a34>
   12924:	ldr	r0, [pc, #128]	; 129ac <__assert_fail@plt+0x1a38>
   12928:	cmp	r3, #96	; 0x60
   1292c:	b	12914 <__assert_fail@plt+0x19a0>
   12930:	cmp	r3, #71	; 0x47
   12934:	bne	12908 <__assert_fail@plt+0x1994>
   12938:	ldrb	r3, [r0, #1]
   1293c:	bic	r3, r3, #32
   12940:	cmp	r3, #66	; 0x42
   12944:	bne	12908 <__assert_fail@plt+0x1994>
   12948:	ldrb	r3, [r0, #2]
   1294c:	cmp	r3, #49	; 0x31
   12950:	bne	12908 <__assert_fail@plt+0x1994>
   12954:	ldrb	r3, [r0, #3]
   12958:	cmp	r3, #56	; 0x38
   1295c:	bne	12908 <__assert_fail@plt+0x1994>
   12960:	ldrb	r3, [r0, #4]
   12964:	cmp	r3, #48	; 0x30
   12968:	bne	12908 <__assert_fail@plt+0x1994>
   1296c:	ldrb	r3, [r0, #5]
   12970:	cmp	r3, #51	; 0x33
   12974:	bne	12908 <__assert_fail@plt+0x1994>
   12978:	ldrb	r3, [r0, #6]
   1297c:	cmp	r3, #48	; 0x30
   12980:	bne	12908 <__assert_fail@plt+0x1994>
   12984:	ldrb	r3, [r0, #7]
   12988:	cmp	r3, #0
   1298c:	bne	12908 <__assert_fail@plt+0x1994>
   12990:	ldrb	r3, [r4]
   12994:	ldr	r1, [pc, #20]	; 129b0 <__assert_fail@plt+0x1a3c>
   12998:	ldr	r0, [pc, #20]	; 129b4 <__assert_fail@plt+0x1a40>
   1299c:	b	12928 <__assert_fail@plt+0x19b4>
   129a0:	andeq	r5, r1, r3, lsl #30
   129a4:			; <UNDEFINED> instruction: 0x000157b1
   129a8:	strdeq	r5, [r1], -r8
   129ac:	strdeq	r5, [r1], -r4
   129b0:	andeq	r5, r1, r0, lsl #30
   129b4:	strdeq	r5, [r1], -ip
   129b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129bc:	sub	sp, sp, #108	; 0x6c
   129c0:	mov	r8, r0
   129c4:	str	r3, [sp, #36]	; 0x24
   129c8:	mov	r5, r1
   129cc:	str	r2, [sp, #44]	; 0x2c
   129d0:	ldr	sl, [sp, #144]	; 0x90
   129d4:	bl	10de8 <__ctype_get_mb_cur_max@plt>
   129d8:	ldr	r3, [sp, #148]	; 0x94
   129dc:	mov	r7, #0
   129e0:	str	r7, [sp, #48]	; 0x30
   129e4:	lsr	r6, r3, #1
   129e8:	and	r6, r6, #1
   129ec:	mov	r3, #1
   129f0:	str	r3, [sp, #72]	; 0x48
   129f4:	str	r7, [sp, #24]
   129f8:	str	r7, [sp, #32]
   129fc:	str	r7, [sp, #40]	; 0x28
   12a00:	str	r7, [sp, #60]	; 0x3c
   12a04:	str	r0, [sp, #76]	; 0x4c
   12a08:	cmp	sl, #10
   12a0c:	ldrls	pc, [pc, sl, lsl #2]
   12a10:	b	12c4c <__assert_fail@plt+0x1cd8>
   12a14:	andeq	r2, r1, r0, asr #20
   12a18:	ldrdeq	r3, [r1], -r4
   12a1c:	andeq	r2, r1, r8, lsl ip
   12a20:	andeq	r2, r1, r4, ror #24
   12a24:	strdeq	r2, [r1], -r4
   12a28:	andeq	r2, r1, ip, asr #20
   12a2c:			; <UNDEFINED> instruction: 0x000136b4
   12a30:	andeq	r2, r1, r0, asr ip
   12a34:	andeq	r2, r1, r4, asr #22
   12a38:	andeq	r2, r1, r4, asr #22
   12a3c:	andeq	r2, r1, r4, asr #22
   12a40:	mov	r6, #0
   12a44:	mov	r4, #0
   12a48:	b	12a78 <__assert_fail@plt+0x1b04>
   12a4c:	cmp	r6, #0
   12a50:	bne	12c74 <__assert_fail@plt+0x1d00>
   12a54:	cmp	r5, #0
   12a58:	movne	r3, #34	; 0x22
   12a5c:	strbne	r3, [r8]
   12a60:	mov	r3, #1
   12a64:	str	r3, [sp, #24]
   12a68:	str	r3, [sp, #32]
   12a6c:	mov	r4, #1
   12a70:	ldr	r3, [pc, #3172]	; 136dc <__assert_fail@plt+0x2768>
   12a74:	str	r3, [sp, #40]	; 0x28
   12a78:	mov	r9, r5
   12a7c:	mov	r3, #0
   12a80:	str	r7, [sp, #68]	; 0x44
   12a84:	str	r3, [sp, #28]
   12a88:	ldr	r3, [sp, #36]	; 0x24
   12a8c:	cmn	r3, #1
   12a90:	bne	13620 <__assert_fail@plt+0x26ac>
   12a94:	ldr	r3, [sp, #44]	; 0x2c
   12a98:	ldr	r2, [sp, #28]
   12a9c:	ldrb	r3, [r3, r2]
   12aa0:	adds	r3, r3, #0
   12aa4:	movne	r3, #1
   12aa8:	str	r3, [sp, #52]	; 0x34
   12aac:	ldr	r3, [sp, #52]	; 0x34
   12ab0:	cmp	r3, #0
   12ab4:	bne	12c9c <__assert_fail@plt+0x1d28>
   12ab8:	sub	r2, sl, #2
   12abc:	clz	r2, r2
   12ac0:	lsr	r2, r2, #5
   12ac4:	and	r3, r6, r2
   12ac8:	cmp	r4, #0
   12acc:	movne	r3, #0
   12ad0:	andeq	r3, r3, #1
   12ad4:	cmp	r3, #0
   12ad8:	bne	12e64 <__assert_fail@plt+0x1ef0>
   12adc:	eor	r3, r6, #1
   12ae0:	ands	r2, r2, r3
   12ae4:	beq	13658 <__assert_fail@plt+0x26e4>
   12ae8:	ldr	r3, [sp, #68]	; 0x44
   12aec:	cmp	r3, #0
   12af0:	beq	13690 <__assert_fail@plt+0x271c>
   12af4:	ldr	r3, [sp, #72]	; 0x48
   12af8:	cmp	r3, #0
   12afc:	beq	13634 <__assert_fail@plt+0x26c0>
   12b00:	ldr	r3, [sp, #160]	; 0xa0
   12b04:	ldr	r2, [sp, #44]	; 0x2c
   12b08:	str	r3, [sp, #16]
   12b0c:	ldr	r3, [sp, #156]	; 0x9c
   12b10:	ldr	r1, [sp, #60]	; 0x3c
   12b14:	str	r3, [sp, #12]
   12b18:	ldr	r3, [sp, #152]	; 0x98
   12b1c:	str	r3, [sp, #8]
   12b20:	ldr	r3, [sp, #148]	; 0x94
   12b24:	str	r3, [sp, #4]
   12b28:	mov	r3, #5
   12b2c:	str	r3, [sp]
   12b30:	ldr	r3, [sp, #36]	; 0x24
   12b34:	mov	r0, r8
   12b38:	bl	129b8 <__assert_fail@plt+0x1a44>
   12b3c:	mov	r4, r0
   12b40:	b	13684 <__assert_fail@plt+0x2710>
   12b44:	cmp	sl, #10
   12b48:	beq	12ba4 <__assert_fail@plt+0x1c30>
   12b4c:	ldr	r4, [pc, #2956]	; 136e0 <__assert_fail@plt+0x276c>
   12b50:	mov	r2, #5
   12b54:	mov	r1, r4
   12b58:	mov	r0, #0
   12b5c:	bl	10dac <dcgettext@plt>
   12b60:	cmp	r0, r4
   12b64:	str	r0, [sp, #156]	; 0x9c
   12b68:	bne	12b78 <__assert_fail@plt+0x1c04>
   12b6c:	mov	r1, sl
   12b70:	bl	128a4 <__assert_fail@plt+0x1930>
   12b74:	str	r0, [sp, #156]	; 0x9c
   12b78:	ldr	r4, [pc, #2916]	; 136e4 <__assert_fail@plt+0x2770>
   12b7c:	mov	r2, #5
   12b80:	mov	r1, r4
   12b84:	mov	r0, #0
   12b88:	bl	10dac <dcgettext@plt>
   12b8c:	cmp	r0, r4
   12b90:	str	r0, [sp, #160]	; 0xa0
   12b94:	bne	12ba4 <__assert_fail@plt+0x1c30>
   12b98:	mov	r1, sl
   12b9c:	bl	128a4 <__assert_fail@plt+0x1930>
   12ba0:	str	r0, [sp, #160]	; 0xa0
   12ba4:	cmp	r6, #0
   12ba8:	moveq	r4, r6
   12bac:	beq	12bc4 <__assert_fail@plt+0x1c50>
   12bb0:	mov	r4, #0
   12bb4:	b	12bd4 <__assert_fail@plt+0x1c60>
   12bb8:	cmp	r5, r4
   12bbc:	strbhi	r3, [r8, r4]
   12bc0:	add	r4, r4, #1
   12bc4:	ldr	r3, [sp, #156]	; 0x9c
   12bc8:	ldrb	r3, [r3, r4]
   12bcc:	cmp	r3, #0
   12bd0:	bne	12bb8 <__assert_fail@plt+0x1c44>
   12bd4:	ldr	r0, [sp, #160]	; 0xa0
   12bd8:	bl	10e78 <strlen@plt>
   12bdc:	ldr	r3, [sp, #160]	; 0xa0
   12be0:	str	r3, [sp, #40]	; 0x28
   12be4:	mov	r3, #1
   12be8:	str	r3, [sp, #24]
   12bec:	str	r0, [sp, #32]
   12bf0:	b	12a78 <__assert_fail@plt+0x1b04>
   12bf4:	mov	r3, #1
   12bf8:	cmp	r6, #0
   12bfc:	streq	r3, [sp, #24]
   12c00:	beq	12c20 <__assert_fail@plt+0x1cac>
   12c04:	str	r3, [sp, #32]
   12c08:	ldr	r3, [pc, #2772]	; 136e4 <__assert_fail@plt+0x2770>
   12c0c:	mov	r4, #0
   12c10:	str	r3, [sp, #40]	; 0x28
   12c14:	b	12c44 <__assert_fail@plt+0x1cd0>
   12c18:	cmp	r6, #0
   12c1c:	bne	12c8c <__assert_fail@plt+0x1d18>
   12c20:	cmp	r5, #0
   12c24:	movne	r3, #39	; 0x27
   12c28:	strbne	r3, [r8]
   12c2c:	mov	r3, #1
   12c30:	str	r3, [sp, #32]
   12c34:	mov	r6, #0
   12c38:	ldr	r3, [pc, #2724]	; 136e4 <__assert_fail@plt+0x2770>
   12c3c:	mov	r4, #1
   12c40:	str	r3, [sp, #40]	; 0x28
   12c44:	mov	sl, #2
   12c48:	b	12a78 <__assert_fail@plt+0x1b04>
   12c4c:	bl	10f5c <abort@plt>
   12c50:	mov	r6, #0
   12c54:	mov	r3, #1
   12c58:	str	r3, [sp, #24]
   12c5c:	mov	r4, r6
   12c60:	b	12a78 <__assert_fail@plt+0x1b04>
   12c64:	mov	r6, #1
   12c68:	str	r6, [sp, #24]
   12c6c:	str	r6, [sp, #32]
   12c70:	b	12c08 <__assert_fail@plt+0x1c94>
   12c74:	mov	r3, #1
   12c78:	str	r3, [sp, #32]
   12c7c:	ldr	r3, [pc, #2648]	; 136dc <__assert_fail@plt+0x2768>
   12c80:	str	r6, [sp, #24]
   12c84:	str	r3, [sp, #40]	; 0x28
   12c88:	b	12a44 <__assert_fail@plt+0x1ad0>
   12c8c:	mov	r3, #1
   12c90:	str	r3, [sp, #32]
   12c94:	ldr	r3, [pc, #2632]	; 136e4 <__assert_fail@plt+0x2770>
   12c98:	b	12c84 <__assert_fail@plt+0x1d10>
   12c9c:	ldr	r3, [sp, #32]
   12ca0:	ldr	fp, [sp, #24]
   12ca4:	cmp	sl, #2
   12ca8:	moveq	fp, #0
   12cac:	andne	fp, fp, #1
   12cb0:	adds	r5, r3, #0
   12cb4:	movne	r5, #1
   12cb8:	ands	r3, r5, fp
   12cbc:	str	r3, [sp, #64]	; 0x40
   12cc0:	beq	12d90 <__assert_fail@plt+0x1e1c>
   12cc4:	ldr	r2, [sp, #32]
   12cc8:	ldr	r3, [sp, #28]
   12ccc:	add	r7, r3, r2
   12cd0:	mov	r3, r2
   12cd4:	ldr	r2, [sp, #36]	; 0x24
   12cd8:	cmp	r3, #1
   12cdc:	movls	r3, #0
   12ce0:	movhi	r3, #1
   12ce4:	cmn	r2, #1
   12ce8:	movne	r3, #0
   12cec:	cmp	r3, #0
   12cf0:	beq	12d00 <__assert_fail@plt+0x1d8c>
   12cf4:	ldr	r0, [sp, #44]	; 0x2c
   12cf8:	bl	10e78 <strlen@plt>
   12cfc:	str	r0, [sp, #36]	; 0x24
   12d00:	ldr	r3, [sp, #36]	; 0x24
   12d04:	cmp	r3, r7
   12d08:	bcc	12d88 <__assert_fail@plt+0x1e14>
   12d0c:	ldr	r3, [sp, #44]	; 0x2c
   12d10:	ldr	r0, [sp, #28]
   12d14:	ldr	r2, [sp, #32]
   12d18:	ldr	r1, [sp, #40]	; 0x28
   12d1c:	add	r0, r3, r0
   12d20:	bl	10d88 <memcmp@plt>
   12d24:	cmp	r0, #0
   12d28:	bne	12d88 <__assert_fail@plt+0x1e14>
   12d2c:	cmp	r6, #0
   12d30:	beq	12d90 <__assert_fail@plt+0x1e1c>
   12d34:	str	r6, [sp, #24]
   12d38:	ldr	r3, [sp, #24]
   12d3c:	ldr	r2, [sp, #44]	; 0x2c
   12d40:	cmp	sl, #2
   12d44:	movne	r3, #0
   12d48:	andeq	r3, r3, #1
   12d4c:	cmp	r3, #0
   12d50:	ldr	r3, [sp, #160]	; 0xa0
   12d54:	movne	sl, #4
   12d58:	str	r3, [sp, #16]
   12d5c:	ldr	r3, [sp, #156]	; 0x9c
   12d60:	str	sl, [sp]
   12d64:	str	r3, [sp, #12]
   12d68:	mov	r3, #0
   12d6c:	str	r3, [sp, #8]
   12d70:	ldr	r3, [sp, #148]	; 0x94
   12d74:	mov	r1, r9
   12d78:	bic	r3, r3, #2
   12d7c:	str	r3, [sp, #4]
   12d80:	ldr	r3, [sp, #36]	; 0x24
   12d84:	b	12b34 <__assert_fail@plt+0x1bc0>
   12d88:	mov	r3, #0
   12d8c:	str	r3, [sp, #64]	; 0x40
   12d90:	ldr	r2, [sp, #28]
   12d94:	ldr	r3, [sp, #44]	; 0x2c
   12d98:	add	r3, r3, r2
   12d9c:	str	r3, [sp, #80]	; 0x50
   12da0:	ldr	r3, [sp, #44]	; 0x2c
   12da4:	ldrb	r7, [r3, r2]
   12da8:	cmp	r7, #58	; 0x3a
   12dac:	bhi	12f14 <__assert_fail@plt+0x1fa0>
   12db0:	cmp	r7, #43	; 0x2b
   12db4:	bcs	12f68 <__assert_fail@plt+0x1ff4>
   12db8:	cmp	r7, #32
   12dbc:	beq	12fc0 <__assert_fail@plt+0x204c>
   12dc0:	bhi	12e6c <__assert_fail@plt+0x1ef8>
   12dc4:	cmp	r7, #9
   12dc8:	beq	13274 <__assert_fail@plt+0x2300>
   12dcc:	bhi	12e30 <__assert_fail@plt+0x1ebc>
   12dd0:	cmp	r7, #7
   12dd4:	beq	13320 <__assert_fail@plt+0x23ac>
   12dd8:	bhi	12fdc <__assert_fail@plt+0x2068>
   12ddc:	cmp	r7, #0
   12de0:	beq	12ff8 <__assert_fail@plt+0x2084>
   12de4:	ldr	r3, [sp, #76]	; 0x4c
   12de8:	cmp	r3, #1
   12dec:	bne	13364 <__assert_fail@plt+0x23f0>
   12df0:	bl	10e60 <__ctype_b_loc@plt>
   12df4:	sxth	r3, r7
   12df8:	lsl	r3, r3, #1
   12dfc:	ldr	r2, [r0]
   12e00:	ldrh	r5, [r2, r3]
   12e04:	ldr	r3, [sp, #76]	; 0x4c
   12e08:	str	r3, [sp, #56]	; 0x38
   12e0c:	lsr	r5, r5, #14
   12e10:	and	r5, r5, #1
   12e14:	ldr	r3, [sp, #24]
   12e18:	eor	fp, r5, #1
   12e1c:	and	fp, fp, r3
   12e20:	ands	fp, fp, #255	; 0xff
   12e24:	beq	131ac <__assert_fail@plt+0x2238>
   12e28:	mov	r5, #0
   12e2c:	b	13410 <__assert_fail@plt+0x249c>
   12e30:	cmp	r7, #11
   12e34:	beq	1327c <__assert_fail@plt+0x2308>
   12e38:	bcc	13318 <__assert_fail@plt+0x23a4>
   12e3c:	cmp	r7, #12
   12e40:	beq	13328 <__assert_fail@plt+0x23b4>
   12e44:	cmp	r7, #13
   12e48:	moveq	r3, #114	; 0x72
   12e4c:	bne	12de4 <__assert_fail@plt+0x1e70>
   12e50:	cmp	sl, #2
   12e54:	movne	r2, #0
   12e58:	andeq	r2, r6, #1
   12e5c:	cmp	r2, #0
   12e60:	beq	12fe0 <__assert_fail@plt+0x206c>
   12e64:	mov	sl, #2
   12e68:	b	12d38 <__assert_fail@plt+0x1dc4>
   12e6c:	cmp	r7, #37	; 0x25
   12e70:	beq	12f68 <__assert_fail@plt+0x1ff4>
   12e74:	bhi	12e88 <__assert_fail@plt+0x1f14>
   12e78:	cmp	r7, #35	; 0x23
   12e7c:	beq	12fb4 <__assert_fail@plt+0x2040>
   12e80:	mov	r5, #0
   12e84:	b	12fc4 <__assert_fail@plt+0x2050>
   12e88:	cmp	r7, #39	; 0x27
   12e8c:	bne	12e80 <__assert_fail@plt+0x1f0c>
   12e90:	cmp	sl, #2
   12e94:	ldrne	r5, [sp, #52]	; 0x34
   12e98:	movne	r3, r5
   12e9c:	strne	r3, [sp, #68]	; 0x44
   12ea0:	bne	12f6c <__assert_fail@plt+0x1ff8>
   12ea4:	cmp	r6, #0
   12ea8:	bne	12d38 <__assert_fail@plt+0x1dc4>
   12eac:	ldr	r2, [sp, #60]	; 0x3c
   12eb0:	adds	r3, r9, #0
   12eb4:	movne	r3, #1
   12eb8:	cmp	r2, #0
   12ebc:	movne	r3, #0
   12ec0:	cmp	r3, #0
   12ec4:	strne	r9, [sp, #60]	; 0x3c
   12ec8:	movne	r9, #0
   12ecc:	bne	12edc <__assert_fail@plt+0x1f68>
   12ed0:	cmp	r9, r4
   12ed4:	movhi	r3, #39	; 0x27
   12ed8:	strbhi	r3, [r8, r4]
   12edc:	add	r3, r4, #1
   12ee0:	cmp	r3, r9
   12ee4:	movcc	r2, #92	; 0x5c
   12ee8:	strbcc	r2, [r8, r3]
   12eec:	add	r3, r4, #2
   12ef0:	cmp	r3, r9
   12ef4:	ldr	r5, [sp, #52]	; 0x34
   12ef8:	movcc	r2, #39	; 0x27
   12efc:	strbcc	r2, [r8, r3]
   12f00:	add	r4, r4, #3
   12f04:	mov	fp, r6
   12f08:	str	r5, [sp, #68]	; 0x44
   12f0c:	str	r6, [sp, #48]	; 0x30
   12f10:	b	131ac <__assert_fail@plt+0x2238>
   12f14:	cmp	r7, #94	; 0x5e
   12f18:	beq	12e80 <__assert_fail@plt+0x1f0c>
   12f1c:	bhi	12f74 <__assert_fail@plt+0x2000>
   12f20:	cmp	r7, #90	; 0x5a
   12f24:	bhi	12f5c <__assert_fail@plt+0x1fe8>
   12f28:	cmp	r7, #65	; 0x41
   12f2c:	bcs	12f68 <__assert_fail@plt+0x1ff4>
   12f30:	cmp	r7, #62	; 0x3e
   12f34:	bls	12e80 <__assert_fail@plt+0x1f0c>
   12f38:	cmp	r7, #63	; 0x3f
   12f3c:	bne	12de4 <__assert_fail@plt+0x1e70>
   12f40:	cmp	sl, #2
   12f44:	beq	130e8 <__assert_fail@plt+0x2174>
   12f48:	cmp	sl, #5
   12f4c:	beq	130f8 <__assert_fail@plt+0x2184>
   12f50:	mov	fp, #0
   12f54:	mov	r5, fp
   12f58:	b	131ac <__assert_fail@plt+0x2238>
   12f5c:	cmp	r7, #92	; 0x5c
   12f60:	beq	13284 <__assert_fail@plt+0x2310>
   12f64:	bls	12e80 <__assert_fail@plt+0x1f0c>
   12f68:	ldr	r5, [sp, #52]	; 0x34
   12f6c:	mov	fp, #0
   12f70:	b	131ac <__assert_fail@plt+0x2238>
   12f74:	cmp	r7, #122	; 0x7a
   12f78:	bhi	12f98 <__assert_fail@plt+0x2024>
   12f7c:	cmp	r7, #97	; 0x61
   12f80:	bcs	12f68 <__assert_fail@plt+0x1ff4>
   12f84:	cmp	r7, #95	; 0x5f
   12f88:	beq	12f68 <__assert_fail@plt+0x1ff4>
   12f8c:	cmp	r7, #96	; 0x60
   12f90:	bne	12de4 <__assert_fail@plt+0x1e70>
   12f94:	b	12e80 <__assert_fail@plt+0x1f0c>
   12f98:	cmp	r7, #124	; 0x7c
   12f9c:	beq	12e80 <__assert_fail@plt+0x1f0c>
   12fa0:	bcc	13330 <__assert_fail@plt+0x23bc>
   12fa4:	cmp	r7, #125	; 0x7d
   12fa8:	beq	13330 <__assert_fail@plt+0x23bc>
   12fac:	cmp	r7, #126	; 0x7e
   12fb0:	bne	12de4 <__assert_fail@plt+0x1e70>
   12fb4:	ldr	r3, [sp, #28]
   12fb8:	cmp	r3, #0
   12fbc:	bne	130f0 <__assert_fail@plt+0x217c>
   12fc0:	ldr	r5, [sp, #52]	; 0x34
   12fc4:	cmp	sl, #2
   12fc8:	movne	fp, #0
   12fcc:	andeq	fp, r6, #1
   12fd0:	cmp	fp, #0
   12fd4:	beq	131ac <__assert_fail@plt+0x2238>
   12fd8:	b	12e64 <__assert_fail@plt+0x1ef0>
   12fdc:	mov	r3, #98	; 0x62
   12fe0:	ldr	r2, [sp, #24]
   12fe4:	cmp	r2, #0
   12fe8:	beq	130f0 <__assert_fail@plt+0x217c>
   12fec:	mov	r7, r3
   12ff0:	mov	r5, #0
   12ff4:	b	13204 <__assert_fail@plt+0x2290>
   12ff8:	ldr	r3, [sp, #24]
   12ffc:	cmp	r3, #0
   13000:	beq	130cc <__assert_fail@plt+0x2158>
   13004:	cmp	r6, #0
   13008:	bne	12d34 <__assert_fail@plt+0x1dc0>
   1300c:	ldr	r3, [sp, #48]	; 0x30
   13010:	eor	r2, r3, #1
   13014:	cmp	sl, #2
   13018:	movne	r2, #0
   1301c:	andeq	r2, r2, #1
   13020:	cmp	r2, #0
   13024:	moveq	r3, r4
   13028:	beq	13060 <__assert_fail@plt+0x20ec>
   1302c:	cmp	r9, r4
   13030:	movhi	r3, #39	; 0x27
   13034:	strbhi	r3, [r8, r4]
   13038:	add	r3, r4, #1
   1303c:	cmp	r9, r3
   13040:	movhi	r1, #36	; 0x24
   13044:	strbhi	r1, [r8, r3]
   13048:	add	r3, r4, #2
   1304c:	cmp	r9, r3
   13050:	movhi	r1, #39	; 0x27
   13054:	strbhi	r1, [r8, r3]
   13058:	add	r3, r4, #3
   1305c:	str	r2, [sp, #48]	; 0x30
   13060:	cmp	r9, r3
   13064:	movhi	r2, #92	; 0x5c
   13068:	strbhi	r2, [r8, r3]
   1306c:	cmp	fp, #0
   13070:	add	r4, r3, #1
   13074:	beq	13604 <__assert_fail@plt+0x2690>
   13078:	ldr	r2, [sp, #28]
   1307c:	ldr	r1, [sp, #36]	; 0x24
   13080:	add	r2, r2, #1
   13084:	cmp	r1, r2
   13088:	bls	130c4 <__assert_fail@plt+0x2150>
   1308c:	ldr	r1, [sp, #44]	; 0x2c
   13090:	mov	r7, #48	; 0x30
   13094:	ldrb	r2, [r1, r2]
   13098:	sub	r2, r2, #48	; 0x30
   1309c:	cmp	r2, #9
   130a0:	movhi	r5, r6
   130a4:	bhi	131ac <__assert_fail@plt+0x2238>
   130a8:	cmp	r9, r4
   130ac:	add	r2, r3, #2
   130b0:	strbhi	r7, [r8, r4]
   130b4:	cmp	r9, r2
   130b8:	add	r4, r3, #3
   130bc:	movhi	r1, #48	; 0x30
   130c0:	strbhi	r1, [r8, r2]
   130c4:	mov	r5, r6
   130c8:	b	1360c <__assert_fail@plt+0x2698>
   130cc:	ldr	r3, [sp, #148]	; 0x94
   130d0:	tst	r3, #1
   130d4:	ldreq	r5, [sp, #24]
   130d8:	beq	13618 <__assert_fail@plt+0x26a4>
   130dc:	ldr	r3, [sp, #28]
   130e0:	add	r3, r3, #1
   130e4:	b	12a84 <__assert_fail@plt+0x1b10>
   130e8:	cmp	r6, #0
   130ec:	bne	12d38 <__assert_fail@plt+0x1dc4>
   130f0:	mov	r5, #0
   130f4:	b	12f6c <__assert_fail@plt+0x1ff8>
   130f8:	ldr	r3, [sp, #148]	; 0x94
   130fc:	tst	r3, #4
   13100:	beq	130f0 <__assert_fail@plt+0x217c>
   13104:	ldr	r3, [sp, #28]
   13108:	add	r2, r3, #2
   1310c:	ldr	r3, [sp, #36]	; 0x24
   13110:	cmp	r3, r2
   13114:	bls	130f0 <__assert_fail@plt+0x217c>
   13118:	ldr	r3, [sp, #44]	; 0x2c
   1311c:	ldr	r1, [sp, #28]
   13120:	add	r3, r3, r1
   13124:	ldrb	r0, [r3, #1]
   13128:	cmp	r0, #63	; 0x3f
   1312c:	bne	130f0 <__assert_fail@plt+0x217c>
   13130:	ldr	r3, [sp, #44]	; 0x2c
   13134:	ldrb	r1, [r3, r2]
   13138:	sub	r3, r1, #33	; 0x21
   1313c:	uxtb	r3, r3
   13140:	cmp	r3, #29
   13144:	bhi	13614 <__assert_fail@plt+0x26a0>
   13148:	mov	ip, #1
   1314c:	ldr	r5, [pc, #1428]	; 136e8 <__assert_fail@plt+0x2774>
   13150:	ands	r5, r5, ip, lsl r3
   13154:	beq	12f6c <__assert_fail@plt+0x1ff8>
   13158:	cmp	r6, #0
   1315c:	bne	12d38 <__assert_fail@plt+0x1dc4>
   13160:	add	r3, r4, #1
   13164:	cmp	r9, r4
   13168:	strbhi	r0, [r8, r4]
   1316c:	cmp	r9, r3
   13170:	movhi	r0, #34	; 0x22
   13174:	strbhi	r0, [r8, r3]
   13178:	add	r3, r4, #2
   1317c:	cmp	r9, r3
   13180:	movhi	r0, #34	; 0x22
   13184:	strbhi	r0, [r8, r3]
   13188:	add	r3, r4, #3
   1318c:	cmp	r9, r3
   13190:	add	r4, r4, #4
   13194:	mov	r5, r6
   13198:	mov	fp, r6
   1319c:	mov	r7, r1
   131a0:	movhi	r0, #63	; 0x3f
   131a4:	strbhi	r0, [r8, r3]
   131a8:	str	r2, [sp, #28]
   131ac:	ldr	r3, [sp, #24]
   131b0:	eor	r3, r3, #1
   131b4:	cmp	sl, #2
   131b8:	orreq	r3, r3, #1
   131bc:	eor	r3, r3, #1
   131c0:	orr	r3, r6, r3
   131c4:	tst	r3, #255	; 0xff
   131c8:	beq	131f8 <__assert_fail@plt+0x2284>
   131cc:	ldr	r3, [sp, #152]	; 0x98
   131d0:	cmp	r3, #0
   131d4:	beq	131f8 <__assert_fail@plt+0x2284>
   131d8:	lsr	r2, r7, #5
   131dc:	ldr	r1, [sp, #152]	; 0x98
   131e0:	uxtb	r2, r2
   131e4:	and	r3, r7, #31
   131e8:	ldr	r2, [r1, r2, lsl #2]
   131ec:	lsr	r3, r2, r3
   131f0:	tst	r3, #1
   131f4:	bne	13204 <__assert_fail@plt+0x2290>
   131f8:	ldr	r3, [sp, #64]	; 0x40
   131fc:	cmp	r3, #0
   13200:	beq	1329c <__assert_fail@plt+0x2328>
   13204:	cmp	r6, #0
   13208:	bne	12d38 <__assert_fail@plt+0x1dc4>
   1320c:	ldr	r3, [sp, #48]	; 0x30
   13210:	eor	r3, r3, #1
   13214:	cmp	sl, #2
   13218:	movne	r3, #0
   1321c:	andeq	r3, r3, #1
   13220:	cmp	r3, #0
   13224:	beq	1325c <__assert_fail@plt+0x22e8>
   13228:	cmp	r9, r4
   1322c:	movhi	r2, #39	; 0x27
   13230:	strbhi	r2, [r8, r4]
   13234:	add	r2, r4, #1
   13238:	cmp	r9, r2
   1323c:	movhi	r1, #36	; 0x24
   13240:	strbhi	r1, [r8, r2]
   13244:	add	r2, r4, #2
   13248:	cmp	r9, r2
   1324c:	add	r4, r4, #3
   13250:	movhi	r1, #39	; 0x27
   13254:	strbhi	r1, [r8, r2]
   13258:	str	r3, [sp, #48]	; 0x30
   1325c:	cmp	r9, r4
   13260:	movhi	r3, #92	; 0x5c
   13264:	strbhi	r3, [r8, r4]
   13268:	ldr	fp, [sp, #52]	; 0x34
   1326c:	add	r4, r4, #1
   13270:	b	1329c <__assert_fail@plt+0x2328>
   13274:	mov	r3, #116	; 0x74
   13278:	b	12e50 <__assert_fail@plt+0x1edc>
   1327c:	mov	r3, #118	; 0x76
   13280:	b	12fe0 <__assert_fail@plt+0x206c>
   13284:	cmp	sl, #2
   13288:	bne	132f8 <__assert_fail@plt+0x2384>
   1328c:	cmp	r6, #0
   13290:	bne	12d38 <__assert_fail@plt+0x1dc4>
   13294:	mov	r5, r6
   13298:	mov	fp, r6
   1329c:	ldr	r3, [sp, #48]	; 0x30
   132a0:	eor	fp, fp, #1
   132a4:	and	fp, fp, r3
   132a8:	tst	fp, #255	; 0xff
   132ac:	beq	132d8 <__assert_fail@plt+0x2364>
   132b0:	cmp	r9, r4
   132b4:	movhi	r3, #39	; 0x27
   132b8:	strbhi	r3, [r8, r4]
   132bc:	add	r3, r4, #1
   132c0:	cmp	r9, r3
   132c4:	movhi	r2, #39	; 0x27
   132c8:	add	r4, r4, #2
   132cc:	strbhi	r2, [r8, r3]
   132d0:	mov	r3, #0
   132d4:	str	r3, [sp, #48]	; 0x30
   132d8:	cmp	r9, r4
   132dc:	strbhi	r7, [r8, r4]
   132e0:	ldr	r3, [sp, #72]	; 0x48
   132e4:	cmp	r5, #0
   132e8:	moveq	r3, #0
   132ec:	add	r4, r4, #1
   132f0:	str	r3, [sp, #72]	; 0x48
   132f4:	b	130dc <__assert_fail@plt+0x2168>
   132f8:	ldr	r3, [sp, #24]
   132fc:	and	r3, r3, r6
   13300:	tst	r5, r3
   13304:	moveq	r3, r7
   13308:	beq	12e50 <__assert_fail@plt+0x1edc>
   1330c:	mov	fp, #0
   13310:	mov	r5, fp
   13314:	b	1329c <__assert_fail@plt+0x2328>
   13318:	mov	r3, #110	; 0x6e
   1331c:	b	12e50 <__assert_fail@plt+0x1edc>
   13320:	mov	r3, #97	; 0x61
   13324:	b	12fe0 <__assert_fail@plt+0x206c>
   13328:	mov	r3, #102	; 0x66
   1332c:	b	12fe0 <__assert_fail@plt+0x206c>
   13330:	ldr	r3, [sp, #36]	; 0x24
   13334:	cmn	r3, #1
   13338:	bne	13358 <__assert_fail@plt+0x23e4>
   1333c:	ldr	r3, [sp, #44]	; 0x2c
   13340:	ldrb	r3, [r3, #1]
   13344:	adds	r3, r3, #0
   13348:	movne	r3, #1
   1334c:	cmp	r3, #0
   13350:	bne	130f0 <__assert_fail@plt+0x217c>
   13354:	b	12fb4 <__assert_fail@plt+0x2040>
   13358:	ldr	r3, [sp, #36]	; 0x24
   1335c:	subs	r3, r3, #1
   13360:	b	13348 <__assert_fail@plt+0x23d4>
   13364:	mov	r3, #0
   13368:	str	r3, [sp, #96]	; 0x60
   1336c:	str	r3, [sp, #100]	; 0x64
   13370:	ldr	r3, [sp, #36]	; 0x24
   13374:	cmn	r3, #1
   13378:	bne	13388 <__assert_fail@plt+0x2414>
   1337c:	ldr	r0, [sp, #44]	; 0x2c
   13380:	bl	10e78 <strlen@plt>
   13384:	str	r0, [sp, #36]	; 0x24
   13388:	ldr	r5, [sp, #52]	; 0x34
   1338c:	mov	r3, #0
   13390:	str	r3, [sp, #56]	; 0x38
   13394:	ldr	r3, [sp, #28]
   13398:	ldr	r2, [sp, #56]	; 0x38
   1339c:	ldr	r1, [sp, #36]	; 0x24
   133a0:	add	r2, r3, r2
   133a4:	ldr	r3, [sp, #44]	; 0x2c
   133a8:	add	r0, sp, #92	; 0x5c
   133ac:	add	fp, r3, r2
   133b0:	sub	r2, r1, r2
   133b4:	add	r3, sp, #96	; 0x60
   133b8:	mov	r1, fp
   133bc:	bl	14ef8 <__assert_fail@plt+0x3f84>
   133c0:	subs	r2, r0, #0
   133c4:	beq	13404 <__assert_fail@plt+0x2490>
   133c8:	cmn	r2, #1
   133cc:	beq	135dc <__assert_fail@plt+0x2668>
   133d0:	cmn	r2, #2
   133d4:	bne	1354c <__assert_fail@plt+0x25d8>
   133d8:	ldr	r2, [sp, #56]	; 0x38
   133dc:	ldr	r3, [sp, #28]
   133e0:	add	r3, r3, r2
   133e4:	ldr	r2, [sp, #36]	; 0x24
   133e8:	cmp	r2, r3
   133ec:	bls	135dc <__assert_fail@plt+0x2668>
   133f0:	ldr	r3, [sp, #80]	; 0x50
   133f4:	ldr	r2, [sp, #56]	; 0x38
   133f8:	ldrb	r5, [r3, r2]
   133fc:	cmp	r5, #0
   13400:	bne	1353c <__assert_fail@plt+0x25c8>
   13404:	ldr	r3, [sp, #56]	; 0x38
   13408:	cmp	r3, #1
   1340c:	bls	12e14 <__assert_fail@plt+0x1ea0>
   13410:	ldr	r2, [sp, #56]	; 0x38
   13414:	ldr	r3, [sp, #28]
   13418:	mov	fp, #0
   1341c:	add	r3, r3, r2
   13420:	ldr	r2, [sp, #24]
   13424:	str	r3, [sp, #52]	; 0x34
   13428:	eor	r3, r5, #1
   1342c:	and	r3, r3, r2
   13430:	mov	ip, #92	; 0x5c
   13434:	uxtb	r3, r3
   13438:	mov	r2, #39	; 0x27
   1343c:	cmp	r3, #0
   13440:	beq	135e4 <__assert_fail@plt+0x2670>
   13444:	cmp	r6, #0
   13448:	bne	12d34 <__assert_fail@plt+0x1dc0>
   1344c:	ldr	r1, [sp, #48]	; 0x30
   13450:	eor	r1, r1, #1
   13454:	cmp	sl, #2
   13458:	movne	r1, #0
   1345c:	andeq	r1, r1, #1
   13460:	cmp	r1, #0
   13464:	beq	13494 <__assert_fail@plt+0x2520>
   13468:	add	r0, r4, #1
   1346c:	cmp	r9, r4
   13470:	strbhi	r2, [r8, r4]
   13474:	cmp	r9, r0
   13478:	movhi	lr, #36	; 0x24
   1347c:	strbhi	lr, [r8, r0]
   13480:	add	r0, r4, #2
   13484:	add	r4, r4, #3
   13488:	cmp	r9, r0
   1348c:	strbhi	r2, [r8, r0]
   13490:	str	r1, [sp, #48]	; 0x30
   13494:	add	r0, r4, #1
   13498:	cmp	r9, r4
   1349c:	strbhi	ip, [r8, r4]
   134a0:	cmp	r9, r0
   134a4:	lsrhi	r1, r7, #6
   134a8:	addhi	r1, r1, #48	; 0x30
   134ac:	strbhi	r1, [r8, r0]
   134b0:	add	r0, r4, #2
   134b4:	cmp	r9, r0
   134b8:	lsrhi	r1, r7, #3
   134bc:	and	r7, r7, #7
   134c0:	andhi	r1, r1, #7
   134c4:	add	r4, r4, #3
   134c8:	add	r7, r7, #48	; 0x30
   134cc:	mov	fp, r3
   134d0:	addhi	r1, r1, #48	; 0x30
   134d4:	strbhi	r1, [r8, r0]
   134d8:	ldr	r1, [sp, #28]
   134dc:	ldr	r0, [sp, #52]	; 0x34
   134e0:	add	r1, r1, #1
   134e4:	cmp	r0, r1
   134e8:	bls	1329c <__assert_fail@plt+0x2328>
   134ec:	ldr	lr, [sp, #48]	; 0x30
   134f0:	eor	r0, fp, #1
   134f4:	and	r0, r0, lr
   134f8:	tst	r0, #255	; 0xff
   134fc:	beq	13520 <__assert_fail@plt+0x25ac>
   13500:	add	r0, r4, #1
   13504:	cmp	r9, r4
   13508:	strbhi	r2, [r8, r4]
   1350c:	cmp	r9, r0
   13510:	add	r4, r4, #2
   13514:	strbhi	r2, [r8, r0]
   13518:	mov	r0, #0
   1351c:	str	r0, [sp, #48]	; 0x30
   13520:	ldr	r0, [sp, #44]	; 0x2c
   13524:	cmp	r9, r4
   13528:	strbhi	r7, [r8, r4]
   1352c:	str	r1, [sp, #28]
   13530:	add	r4, r4, #1
   13534:	ldrb	r7, [r0, r1]
   13538:	b	1343c <__assert_fail@plt+0x24c8>
   1353c:	ldr	r3, [sp, #56]	; 0x38
   13540:	add	r3, r3, #1
   13544:	str	r3, [sp, #56]	; 0x38
   13548:	b	133d8 <__assert_fail@plt+0x2464>
   1354c:	cmp	sl, #2
   13550:	movne	r3, #0
   13554:	andeq	r3, r6, #1
   13558:	cmp	r3, #0
   1355c:	movne	r1, #1
   13560:	bne	135bc <__assert_fail@plt+0x2648>
   13564:	ldr	r0, [sp, #92]	; 0x5c
   13568:	str	r2, [sp, #84]	; 0x54
   1356c:	bl	10dd0 <iswprint@plt>
   13570:	ldr	r3, [sp, #56]	; 0x38
   13574:	ldr	r2, [sp, #84]	; 0x54
   13578:	add	r3, r3, r2
   1357c:	str	r3, [sp, #56]	; 0x38
   13580:	cmp	r0, #0
   13584:	add	r0, sp, #96	; 0x60
   13588:	moveq	r5, #0
   1358c:	bl	10d70 <mbsinit@plt>
   13590:	cmp	r0, #0
   13594:	beq	13394 <__assert_fail@plt+0x2420>
   13598:	b	13404 <__assert_fail@plt+0x2490>
   1359c:	ldrb	r3, [fp, r1]
   135a0:	cmp	r3, #94	; 0x5e
   135a4:	beq	12e64 <__assert_fail@plt+0x1ef0>
   135a8:	bhi	135c8 <__assert_fail@plt+0x2654>
   135ac:	sub	r3, r3, #91	; 0x5b
   135b0:	cmp	r3, #1
   135b4:	bls	12e64 <__assert_fail@plt+0x1ef0>
   135b8:	add	r1, r1, #1
   135bc:	cmp	r1, r2
   135c0:	bne	1359c <__assert_fail@plt+0x2628>
   135c4:	b	13564 <__assert_fail@plt+0x25f0>
   135c8:	cmp	r3, #96	; 0x60
   135cc:	beq	12e64 <__assert_fail@plt+0x1ef0>
   135d0:	cmp	r3, #124	; 0x7c
   135d4:	bne	135b8 <__assert_fail@plt+0x2644>
   135d8:	b	12e64 <__assert_fail@plt+0x1ef0>
   135dc:	mov	r5, #0
   135e0:	b	13404 <__assert_fail@plt+0x2490>
   135e4:	ldr	r1, [sp, #64]	; 0x40
   135e8:	cmp	r1, #0
   135ec:	beq	134d8 <__assert_fail@plt+0x2564>
   135f0:	cmp	r9, r4
   135f4:	strbhi	ip, [r8, r4]
   135f8:	str	r3, [sp, #64]	; 0x40
   135fc:	add	r4, r4, #1
   13600:	b	134d8 <__assert_fail@plt+0x2564>
   13604:	mov	r5, fp
   13608:	ldr	fp, [sp, #24]
   1360c:	mov	r7, #48	; 0x30
   13610:	b	131ac <__assert_fail@plt+0x2238>
   13614:	mov	r5, #0
   13618:	mov	fp, r5
   1361c:	b	131ac <__assert_fail@plt+0x2238>
   13620:	ldr	r3, [sp, #36]	; 0x24
   13624:	ldr	r2, [sp, #28]
   13628:	subs	r3, r3, r2
   1362c:	movne	r3, #1
   13630:	b	12aa8 <__assert_fail@plt+0x1b34>
   13634:	ldr	r3, [sp, #60]	; 0x3c
   13638:	clz	r7, r9
   1363c:	cmp	r3, #0
   13640:	lsr	r7, r7, #5
   13644:	moveq	r7, #0
   13648:	cmp	r7, #0
   1364c:	mov	r5, r3
   13650:	bne	12a08 <__assert_fail@plt+0x1a94>
   13654:	ldr	r3, [sp, #68]	; 0x44
   13658:	ldr	r2, [sp, #40]	; 0x28
   1365c:	cmp	r2, #0
   13660:	moveq	r3, #0
   13664:	andne	r3, r3, #1
   13668:	cmp	r3, #0
   1366c:	movne	r3, r2
   13670:	subne	r2, r3, #1
   13674:	bne	136a4 <__assert_fail@plt+0x2730>
   13678:	cmp	r9, r4
   1367c:	movhi	r3, #0
   13680:	strbhi	r3, [r8, r4]
   13684:	mov	r0, r4
   13688:	add	sp, sp, #108	; 0x6c
   1368c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13690:	mov	r3, r2
   13694:	b	13658 <__assert_fail@plt+0x26e4>
   13698:	cmp	r9, r4
   1369c:	strbhi	r3, [r8, r4]
   136a0:	add	r4, r4, #1
   136a4:	ldrb	r3, [r2, #1]!
   136a8:	cmp	r3, #0
   136ac:	bne	13698 <__assert_fail@plt+0x2724>
   136b0:	b	13678 <__assert_fail@plt+0x2704>
   136b4:	ldr	r3, [pc, #32]	; 136dc <__assert_fail@plt+0x2768>
   136b8:	mov	r6, #1
   136bc:	str	r6, [sp, #24]
   136c0:	str	r6, [sp, #32]
   136c4:	str	r3, [sp, #40]	; 0x28
   136c8:	mov	r4, #0
   136cc:	mov	sl, #5
   136d0:	b	12a78 <__assert_fail@plt+0x1b04>
   136d4:	mov	r6, #1
   136d8:	b	12c6c <__assert_fail@plt+0x1cf8>
   136dc:			; <UNDEFINED> instruction: 0x000157b1
   136e0:	andeq	r5, r1, r5, lsl #30
   136e4:	andeq	r5, r1, r3, lsl #30
   136e8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   136ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f0:	sub	sp, sp, #52	; 0x34
   136f4:	mov	r6, r0
   136f8:	mov	r5, r3
   136fc:	mov	r8, r1
   13700:	mov	r9, r2
   13704:	bl	10e90 <__errno_location@plt>
   13708:	ldr	r7, [pc, #380]	; 1388c <__assert_fail@plt+0x2918>
   1370c:	cmn	r6, #-2147483647	; 0x80000001
   13710:	ldr	r4, [r7]
   13714:	ldr	r3, [r0]
   13718:	str	r0, [sp, #24]
   1371c:	str	r3, [sp, #32]
   13720:	movne	r3, #0
   13724:	moveq	r3, #1
   13728:	orrs	r3, r3, r6, lsr #31
   1372c:	beq	13734 <__assert_fail@plt+0x27c0>
   13730:	bl	10f5c <abort@plt>
   13734:	ldr	r2, [r7, #4]
   13738:	cmp	r6, r2
   1373c:	blt	137ac <__assert_fail@plt+0x2838>
   13740:	add	r1, sp, #48	; 0x30
   13744:	add	sl, r7, #8
   13748:	str	r2, [r1, #-4]!
   1374c:	cmp	r4, sl
   13750:	mov	r3, #8
   13754:	sub	r2, r6, r2
   13758:	movne	r0, r4
   1375c:	str	r3, [sp]
   13760:	add	r2, r2, #1
   13764:	mvn	r3, #-2147483648	; 0x80000000
   13768:	moveq	r0, #0
   1376c:	bl	14480 <__assert_fail@plt+0x350c>
   13770:	cmp	r4, sl
   13774:	ldr	r2, [sp, #44]	; 0x2c
   13778:	mov	fp, r0
   1377c:	str	r0, [r7]
   13780:	ldmeq	r4, {r0, r1}
   13784:	mov	r4, fp
   13788:	stmeq	fp, {r0, r1}
   1378c:	ldr	r0, [r7, #4]
   13790:	mov	r1, #0
   13794:	sub	r2, r2, r0
   13798:	add	r0, fp, r0, lsl #3
   1379c:	lsl	r2, r2, #3
   137a0:	bl	10ea8 <memset@plt>
   137a4:	ldr	r3, [sp, #44]	; 0x2c
   137a8:	str	r3, [r7, #4]
   137ac:	ldr	r3, [r5, #4]
   137b0:	add	sl, r4, r6, lsl #3
   137b4:	orr	r3, r3, #1
   137b8:	str	r3, [sp, #28]
   137bc:	add	r3, r5, #8
   137c0:	str	r3, [sp, #36]	; 0x24
   137c4:	ldr	r3, [r5, #44]	; 0x2c
   137c8:	ldr	fp, [r4, r6, lsl #3]
   137cc:	ldr	r7, [sl, #4]
   137d0:	str	r3, [sp, #16]
   137d4:	ldr	r3, [r5, #40]	; 0x28
   137d8:	mov	r2, r8
   137dc:	str	r3, [sp, #12]
   137e0:	add	r3, r5, #8
   137e4:	str	r3, [sp, #8]
   137e8:	ldr	r3, [sp, #28]
   137ec:	mov	r1, fp
   137f0:	str	r3, [sp, #4]
   137f4:	ldr	r3, [r5]
   137f8:	mov	r0, r7
   137fc:	str	r3, [sp]
   13800:	mov	r3, r9
   13804:	bl	129b8 <__assert_fail@plt+0x1a44>
   13808:	cmp	fp, r0
   1380c:	bhi	13874 <__assert_fail@plt+0x2900>
   13810:	ldr	r3, [pc, #120]	; 13890 <__assert_fail@plt+0x291c>
   13814:	add	fp, r0, #1
   13818:	cmp	r7, r3
   1381c:	str	fp, [r4, r6, lsl #3]
   13820:	beq	1382c <__assert_fail@plt+0x28b8>
   13824:	mov	r0, r7
   13828:	bl	14e70 <__assert_fail@plt+0x3efc>
   1382c:	mov	r0, fp
   13830:	bl	14338 <__assert_fail@plt+0x33c4>
   13834:	ldr	r3, [r5, #44]	; 0x2c
   13838:	mov	r2, r8
   1383c:	mov	r1, fp
   13840:	str	r0, [sl, #4]
   13844:	str	r3, [sp, #16]
   13848:	ldr	r3, [r5, #40]	; 0x28
   1384c:	mov	r7, r0
   13850:	str	r3, [sp, #12]
   13854:	add	r3, r5, #8
   13858:	str	r3, [sp, #8]
   1385c:	ldr	r3, [sp, #28]
   13860:	str	r3, [sp, #4]
   13864:	ldr	r3, [r5]
   13868:	str	r3, [sp]
   1386c:	mov	r3, r9
   13870:	bl	129b8 <__assert_fail@plt+0x1a44>
   13874:	ldr	r3, [sp, #24]
   13878:	ldr	r2, [sp, #32]
   1387c:	mov	r0, r7
   13880:	str	r2, [r3]
   13884:	add	sp, sp, #52	; 0x34
   13888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1388c:	strdeq	r7, [r2], -r8
   13890:	muleq	r2, ip, r2
   13894:	push	{r4, r5, r6, lr}
   13898:	mov	r5, r0
   1389c:	bl	10e90 <__errno_location@plt>
   138a0:	cmp	r5, #0
   138a4:	mov	r1, #48	; 0x30
   138a8:	ldr	r6, [r0]
   138ac:	mov	r4, r0
   138b0:	ldr	r0, [pc, #12]	; 138c4 <__assert_fail@plt+0x2950>
   138b4:	movne	r0, r5
   138b8:	bl	14714 <__assert_fail@plt+0x37a0>
   138bc:	str	r6, [r4]
   138c0:	pop	{r4, r5, r6, pc}
   138c4:	muleq	r2, ip, r3
   138c8:	ldr	r3, [pc, #12]	; 138dc <__assert_fail@plt+0x2968>
   138cc:	cmp	r0, #0
   138d0:	moveq	r0, r3
   138d4:	ldr	r0, [r0]
   138d8:	bx	lr
   138dc:	muleq	r2, ip, r3
   138e0:	ldr	r3, [pc, #12]	; 138f4 <__assert_fail@plt+0x2980>
   138e4:	cmp	r0, #0
   138e8:	moveq	r0, r3
   138ec:	str	r1, [r0]
   138f0:	bx	lr
   138f4:	muleq	r2, ip, r3
   138f8:	ldr	r3, [pc, #52]	; 13934 <__assert_fail@plt+0x29c0>
   138fc:	cmp	r0, #0
   13900:	moveq	r0, r3
   13904:	add	r3, r0, #8
   13908:	push	{lr}		; (str lr, [sp, #-4]!)
   1390c:	lsr	lr, r1, #5
   13910:	and	r1, r1, #31
   13914:	ldr	ip, [r3, lr, lsl #2]
   13918:	lsr	r0, ip, r1
   1391c:	eor	r2, r2, r0
   13920:	and	r2, r2, #1
   13924:	and	r0, r0, #1
   13928:	eor	r1, ip, r2, lsl r1
   1392c:	str	r1, [r3, lr, lsl #2]
   13930:	pop	{pc}		; (ldr pc, [sp], #4)
   13934:	muleq	r2, ip, r3
   13938:	ldr	r3, [pc, #16]	; 13950 <__assert_fail@plt+0x29dc>
   1393c:	cmp	r0, #0
   13940:	movne	r3, r0
   13944:	ldr	r0, [r3, #4]
   13948:	str	r1, [r3, #4]
   1394c:	bx	lr
   13950:	muleq	r2, ip, r3
   13954:	ldr	r3, [pc, #44]	; 13988 <__assert_fail@plt+0x2a14>
   13958:	cmp	r0, #0
   1395c:	moveq	r0, r3
   13960:	mov	r3, #10
   13964:	cmp	r2, #0
   13968:	cmpne	r1, #0
   1396c:	str	r3, [r0]
   13970:	bne	1397c <__assert_fail@plt+0x2a08>
   13974:	push	{r4, lr}
   13978:	bl	10f5c <abort@plt>
   1397c:	str	r1, [r0, #40]	; 0x28
   13980:	str	r2, [r0, #44]	; 0x2c
   13984:	bx	lr
   13988:	muleq	r2, ip, r3
   1398c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13990:	sub	sp, sp, #24
   13994:	mov	sl, r3
   13998:	ldr	r4, [sp, #56]	; 0x38
   1399c:	ldr	r3, [pc, #100]	; 13a08 <__assert_fail@plt+0x2a94>
   139a0:	cmp	r4, #0
   139a4:	moveq	r4, r3
   139a8:	mov	r7, r0
   139ac:	mov	r8, r1
   139b0:	mov	r9, r2
   139b4:	bl	10e90 <__errno_location@plt>
   139b8:	ldr	r3, [r4, #44]	; 0x2c
   139bc:	mov	r2, r9
   139c0:	mov	r1, r8
   139c4:	ldr	r6, [r0]
   139c8:	str	r3, [sp, #16]
   139cc:	ldr	r3, [r4, #40]	; 0x28
   139d0:	mov	r5, r0
   139d4:	str	r3, [sp, #12]
   139d8:	add	r3, r4, #8
   139dc:	str	r3, [sp, #8]
   139e0:	ldr	r3, [r4, #4]
   139e4:	mov	r0, r7
   139e8:	str	r3, [sp, #4]
   139ec:	ldr	r3, [r4]
   139f0:	str	r3, [sp]
   139f4:	mov	r3, sl
   139f8:	bl	129b8 <__assert_fail@plt+0x1a44>
   139fc:	str	r6, [r5]
   13a00:	add	sp, sp, #24
   13a04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a08:	muleq	r2, ip, r3
   13a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a10:	cmp	r3, #0
   13a14:	sub	sp, sp, #44	; 0x2c
   13a18:	ldr	r4, [pc, #188]	; 13adc <__assert_fail@plt+0x2b68>
   13a1c:	mov	r6, r2
   13a20:	movne	r4, r3
   13a24:	mov	sl, r1
   13a28:	mov	r9, r0
   13a2c:	bl	10e90 <__errno_location@plt>
   13a30:	ldr	r5, [r4, #4]
   13a34:	add	fp, r4, #8
   13a38:	cmp	r6, #0
   13a3c:	orreq	r5, r5, #1
   13a40:	mov	r1, #0
   13a44:	mov	r2, r9
   13a48:	ldr	r3, [r0]
   13a4c:	mov	r8, r0
   13a50:	str	r3, [sp, #28]
   13a54:	ldr	r3, [r4, #44]	; 0x2c
   13a58:	mov	r0, r1
   13a5c:	str	r3, [sp, #16]
   13a60:	ldr	r3, [r4, #40]	; 0x28
   13a64:	stmib	sp, {r5, fp}
   13a68:	str	r3, [sp, #12]
   13a6c:	ldr	r3, [r4]
   13a70:	str	r3, [sp]
   13a74:	mov	r3, sl
   13a78:	bl	129b8 <__assert_fail@plt+0x1a44>
   13a7c:	add	r1, r0, #1
   13a80:	mov	r7, r0
   13a84:	mov	r0, r1
   13a88:	str	r1, [sp, #36]	; 0x24
   13a8c:	bl	14338 <__assert_fail@plt+0x33c4>
   13a90:	ldr	r3, [r4, #44]	; 0x2c
   13a94:	mov	r2, r9
   13a98:	str	r3, [sp, #16]
   13a9c:	ldr	r3, [r4, #40]	; 0x28
   13aa0:	stmib	sp, {r5, fp}
   13aa4:	str	r3, [sp, #12]
   13aa8:	ldr	r3, [r4]
   13aac:	ldr	r1, [sp, #36]	; 0x24
   13ab0:	str	r3, [sp]
   13ab4:	mov	r3, sl
   13ab8:	str	r0, [sp, #32]
   13abc:	bl	129b8 <__assert_fail@plt+0x1a44>
   13ac0:	ldr	r3, [sp, #28]
   13ac4:	cmp	r6, #0
   13ac8:	str	r3, [r8]
   13acc:	ldr	r0, [sp, #32]
   13ad0:	strne	r7, [r6]
   13ad4:	add	sp, sp, #44	; 0x2c
   13ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13adc:	muleq	r2, ip, r3
   13ae0:	mov	r3, r2
   13ae4:	mov	r2, #0
   13ae8:	b	13a0c <__assert_fail@plt+0x2a98>
   13aec:	push	{r4, r5, r6, r7, r8, lr}
   13af0:	mov	r6, #1
   13af4:	ldr	r4, [pc, #104]	; 13b64 <__assert_fail@plt+0x2bf0>
   13af8:	ldr	r5, [r4]
   13afc:	add	r7, r5, #12
   13b00:	ldr	r3, [r4, #4]
   13b04:	add	r7, r7, #8
   13b08:	cmp	r6, r3
   13b0c:	blt	13b54 <__assert_fail@plt+0x2be0>
   13b10:	ldr	r0, [r5, #4]
   13b14:	ldr	r6, [pc, #76]	; 13b68 <__assert_fail@plt+0x2bf4>
   13b18:	cmp	r0, r6
   13b1c:	beq	13b30 <__assert_fail@plt+0x2bbc>
   13b20:	bl	14e70 <__assert_fail@plt+0x3efc>
   13b24:	mov	r3, #256	; 0x100
   13b28:	str	r3, [r4, #8]
   13b2c:	str	r6, [r4, #12]
   13b30:	ldr	r6, [pc, #52]	; 13b6c <__assert_fail@plt+0x2bf8>
   13b34:	cmp	r5, r6
   13b38:	beq	13b48 <__assert_fail@plt+0x2bd4>
   13b3c:	mov	r0, r5
   13b40:	bl	14e70 <__assert_fail@plt+0x3efc>
   13b44:	str	r6, [r4]
   13b48:	mov	r3, #1
   13b4c:	str	r3, [r4, #4]
   13b50:	pop	{r4, r5, r6, r7, r8, pc}
   13b54:	ldr	r0, [r7, #-8]
   13b58:	bl	14e70 <__assert_fail@plt+0x3efc>
   13b5c:	add	r6, r6, #1
   13b60:	b	13b00 <__assert_fail@plt+0x2b8c>
   13b64:	strdeq	r7, [r2], -r8
   13b68:	muleq	r2, ip, r2
   13b6c:	andeq	r7, r2, r0, lsl #2
   13b70:	ldr	r3, [pc, #4]	; 13b7c <__assert_fail@plt+0x2c08>
   13b74:	mvn	r2, #0
   13b78:	b	136ec <__assert_fail@plt+0x2778>
   13b7c:	muleq	r2, ip, r3
   13b80:	ldr	r3, [pc]	; 13b88 <__assert_fail@plt+0x2c14>
   13b84:	b	136ec <__assert_fail@plt+0x2778>
   13b88:	muleq	r2, ip, r3
   13b8c:	mov	r1, r0
   13b90:	mov	r0, #0
   13b94:	b	13b70 <__assert_fail@plt+0x2bfc>
   13b98:	mov	r2, r1
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #0
   13ba4:	b	13b80 <__assert_fail@plt+0x2c0c>
   13ba8:	push	{r4, r5, lr}
   13bac:	sub	sp, sp, #52	; 0x34
   13bb0:	mov	r5, r2
   13bb4:	mov	r4, r0
   13bb8:	mov	r0, sp
   13bbc:	bl	12874 <__assert_fail@plt+0x1900>
   13bc0:	mov	r3, sp
   13bc4:	mvn	r2, #0
   13bc8:	mov	r1, r5
   13bcc:	mov	r0, r4
   13bd0:	bl	136ec <__assert_fail@plt+0x2778>
   13bd4:	add	sp, sp, #52	; 0x34
   13bd8:	pop	{r4, r5, pc}
   13bdc:	push	{r4, r5, r6, lr}
   13be0:	sub	sp, sp, #48	; 0x30
   13be4:	mov	r5, r2
   13be8:	mov	r6, r3
   13bec:	mov	r4, r0
   13bf0:	mov	r0, sp
   13bf4:	bl	12874 <__assert_fail@plt+0x1900>
   13bf8:	mov	r3, sp
   13bfc:	mov	r2, r6
   13c00:	mov	r1, r5
   13c04:	mov	r0, r4
   13c08:	bl	136ec <__assert_fail@plt+0x2778>
   13c0c:	add	sp, sp, #48	; 0x30
   13c10:	pop	{r4, r5, r6, pc}
   13c14:	mov	r2, r1
   13c18:	mov	r1, r0
   13c1c:	mov	r0, #0
   13c20:	b	13ba8 <__assert_fail@plt+0x2c34>
   13c24:	mov	r3, r2
   13c28:	mov	r2, r1
   13c2c:	mov	r1, r0
   13c30:	mov	r0, #0
   13c34:	b	13bdc <__assert_fail@plt+0x2c68>
   13c38:	push	{r4, r5, r6, lr}
   13c3c:	mov	r4, r0
   13c40:	ldr	lr, [pc, #80]	; 13c98 <__assert_fail@plt+0x2d24>
   13c44:	mov	r5, r1
   13c48:	mov	r6, r2
   13c4c:	ldm	lr!, {r0, r1, r2, r3}
   13c50:	sub	sp, sp, #48	; 0x30
   13c54:	mov	ip, sp
   13c58:	stmia	ip!, {r0, r1, r2, r3}
   13c5c:	ldm	lr!, {r0, r1, r2, r3}
   13c60:	stmia	ip!, {r0, r1, r2, r3}
   13c64:	ldm	lr, {r0, r1, r2, r3}
   13c68:	stm	ip, {r0, r1, r2, r3}
   13c6c:	mov	r1, r6
   13c70:	mov	r2, #1
   13c74:	mov	r0, sp
   13c78:	bl	138f8 <__assert_fail@plt+0x2984>
   13c7c:	mov	r3, sp
   13c80:	mov	r2, r5
   13c84:	mov	r1, r4
   13c88:	mov	r0, #0
   13c8c:	bl	136ec <__assert_fail@plt+0x2778>
   13c90:	add	sp, sp, #48	; 0x30
   13c94:	pop	{r4, r5, r6, pc}
   13c98:	muleq	r2, ip, r3
   13c9c:	mov	r2, r1
   13ca0:	mvn	r1, #0
   13ca4:	b	13c38 <__assert_fail@plt+0x2cc4>
   13ca8:	mov	r1, #58	; 0x3a
   13cac:	b	13c9c <__assert_fail@plt+0x2d28>
   13cb0:	mov	r2, #58	; 0x3a
   13cb4:	b	13c38 <__assert_fail@plt+0x2cc4>
   13cb8:	push	{r4, r5, lr}
   13cbc:	sub	sp, sp, #100	; 0x64
   13cc0:	mov	r4, r0
   13cc4:	mov	r0, sp
   13cc8:	mov	r5, r2
   13ccc:	bl	12874 <__assert_fail@plt+0x1900>
   13cd0:	mov	ip, sp
   13cd4:	add	lr, sp, #48	; 0x30
   13cd8:	ldm	ip!, {r0, r1, r2, r3}
   13cdc:	stmia	lr!, {r0, r1, r2, r3}
   13ce0:	ldm	ip!, {r0, r1, r2, r3}
   13ce4:	stmia	lr!, {r0, r1, r2, r3}
   13ce8:	ldm	ip, {r0, r1, r2, r3}
   13cec:	stm	lr, {r0, r1, r2, r3}
   13cf0:	mov	r2, #1
   13cf4:	mov	r1, #58	; 0x3a
   13cf8:	add	r0, sp, #48	; 0x30
   13cfc:	bl	138f8 <__assert_fail@plt+0x2984>
   13d00:	add	r3, sp, #48	; 0x30
   13d04:	mvn	r2, #0
   13d08:	mov	r1, r5
   13d0c:	mov	r0, r4
   13d10:	bl	136ec <__assert_fail@plt+0x2778>
   13d14:	add	sp, sp, #100	; 0x64
   13d18:	pop	{r4, r5, pc}
   13d1c:	push	{r4, r5, r6, r7, lr}
   13d20:	mov	r4, r0
   13d24:	ldr	lr, [pc, #84]	; 13d80 <__assert_fail@plt+0x2e0c>
   13d28:	mov	r6, r1
   13d2c:	mov	r7, r2
   13d30:	mov	r5, r3
   13d34:	ldm	lr!, {r0, r1, r2, r3}
   13d38:	sub	sp, sp, #52	; 0x34
   13d3c:	mov	ip, sp
   13d40:	stmia	ip!, {r0, r1, r2, r3}
   13d44:	ldm	lr!, {r0, r1, r2, r3}
   13d48:	stmia	ip!, {r0, r1, r2, r3}
   13d4c:	ldm	lr, {r0, r1, r2, r3}
   13d50:	stm	ip, {r0, r1, r2, r3}
   13d54:	mov	r2, r7
   13d58:	mov	r1, r6
   13d5c:	mov	r0, sp
   13d60:	bl	13954 <__assert_fail@plt+0x29e0>
   13d64:	mov	r3, sp
   13d68:	ldr	r2, [sp, #72]	; 0x48
   13d6c:	mov	r1, r5
   13d70:	mov	r0, r4
   13d74:	bl	136ec <__assert_fail@plt+0x2778>
   13d78:	add	sp, sp, #52	; 0x34
   13d7c:	pop	{r4, r5, r6, r7, pc}
   13d80:	muleq	r2, ip, r3
   13d84:	mvn	ip, #0
   13d88:	push	{r0, r1, r2, lr}
   13d8c:	str	ip, [sp]
   13d90:	bl	13d1c <__assert_fail@plt+0x2da8>
   13d94:	add	sp, sp, #12
   13d98:	pop	{pc}		; (ldr pc, [sp], #4)
   13d9c:	mov	r3, r2
   13da0:	mov	r2, r1
   13da4:	mov	r1, r0
   13da8:	mov	r0, #0
   13dac:	b	13d84 <__assert_fail@plt+0x2e10>
   13db0:	push	{r0, r1, r2, lr}
   13db4:	str	r3, [sp]
   13db8:	mov	r3, r2
   13dbc:	mov	r2, r1
   13dc0:	mov	r1, r0
   13dc4:	mov	r0, #0
   13dc8:	bl	13d1c <__assert_fail@plt+0x2da8>
   13dcc:	add	sp, sp, #12
   13dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13dd4:	ldr	r3, [pc]	; 13ddc <__assert_fail@plt+0x2e68>
   13dd8:	b	136ec <__assert_fail@plt+0x2778>
   13ddc:	andeq	r7, r2, r8, lsl #2
   13de0:	mov	r2, r1
   13de4:	mov	r1, r0
   13de8:	mov	r0, #0
   13dec:	b	13dd4 <__assert_fail@plt+0x2e60>
   13df0:	mvn	r2, #0
   13df4:	b	13dd4 <__assert_fail@plt+0x2e60>
   13df8:	mov	r1, r0
   13dfc:	mov	r0, #0
   13e00:	b	13df0 <__assert_fail@plt+0x2e7c>
   13e04:	push	{r4, r5, r6, lr}
   13e08:	sub	sp, sp, #32
   13e0c:	cmp	r1, #0
   13e10:	mov	r5, r0
   13e14:	ldr	r4, [sp, #48]	; 0x30
   13e18:	ldr	r6, [sp, #52]	; 0x34
   13e1c:	beq	13ed0 <__assert_fail@plt+0x2f5c>
   13e20:	stm	sp, {r2, r3}
   13e24:	mov	r3, r1
   13e28:	ldr	r2, [pc, #860]	; 1418c <__assert_fail@plt+0x3218>
   13e2c:	mov	r1, #1
   13e30:	bl	10ed8 <__fprintf_chk@plt>
   13e34:	mov	r2, #5
   13e38:	ldr	r1, [pc, #848]	; 14190 <__assert_fail@plt+0x321c>
   13e3c:	mov	r0, #0
   13e40:	bl	10dac <dcgettext@plt>
   13e44:	ldr	r3, [pc, #840]	; 14194 <__assert_fail@plt+0x3220>
   13e48:	ldr	r2, [pc, #840]	; 14198 <__assert_fail@plt+0x3224>
   13e4c:	str	r3, [sp]
   13e50:	mov	r1, #1
   13e54:	mov	r3, r0
   13e58:	mov	r0, r5
   13e5c:	bl	10ed8 <__fprintf_chk@plt>
   13e60:	mov	r1, r5
   13e64:	mov	r0, #10
   13e68:	bl	10d94 <fputc_unlocked@plt>
   13e6c:	mov	r2, #5
   13e70:	ldr	r1, [pc, #804]	; 1419c <__assert_fail@plt+0x3228>
   13e74:	mov	r0, #0
   13e78:	bl	10dac <dcgettext@plt>
   13e7c:	mov	r1, #1
   13e80:	ldr	r3, [pc, #792]	; 141a0 <__assert_fail@plt+0x322c>
   13e84:	mov	r2, r0
   13e88:	mov	r0, r5
   13e8c:	bl	10ed8 <__fprintf_chk@plt>
   13e90:	mov	r1, r5
   13e94:	mov	r0, #10
   13e98:	bl	10d94 <fputc_unlocked@plt>
   13e9c:	cmp	r6, #9
   13ea0:	ldrls	pc, [pc, r6, lsl #2]
   13ea4:	b	14180 <__assert_fail@plt+0x320c>
   13ea8:	andeq	r3, r1, r0, asr #31
   13eac:	andeq	r3, r1, r8, ror #29
   13eb0:	andeq	r3, r1, r4, lsl pc
   13eb4:	andeq	r3, r1, r8, asr #30
   13eb8:	andeq	r3, r1, r4, lsl #31
   13ebc:	andeq	r3, r1, r8, asr #31
   13ec0:	andeq	r4, r1, r0, lsl r0
   13ec4:	andeq	r4, r1, r0, rrx
   13ec8:	strheq	r4, [r1], -r8
   13ecc:	andeq	r4, r1, r8, lsl r1
   13ed0:	str	r3, [sp]
   13ed4:	mov	r1, #1
   13ed8:	mov	r3, r2
   13edc:	ldr	r2, [pc, #704]	; 141a4 <__assert_fail@plt+0x3230>
   13ee0:	bl	10ed8 <__fprintf_chk@plt>
   13ee4:	b	13e34 <__assert_fail@plt+0x2ec0>
   13ee8:	mov	r2, #5
   13eec:	ldr	r1, [pc, #692]	; 141a8 <__assert_fail@plt+0x3234>
   13ef0:	mov	r0, #0
   13ef4:	bl	10dac <dcgettext@plt>
   13ef8:	ldr	r3, [r4]
   13efc:	mov	r1, #1
   13f00:	mov	r2, r0
   13f04:	mov	r0, r5
   13f08:	add	sp, sp, #32
   13f0c:	pop	{r4, r5, r6, lr}
   13f10:	b	10ed8 <__fprintf_chk@plt>
   13f14:	mov	r2, #5
   13f18:	ldr	r1, [pc, #652]	; 141ac <__assert_fail@plt+0x3238>
   13f1c:	mov	r0, #0
   13f20:	bl	10dac <dcgettext@plt>
   13f24:	ldr	r3, [r4, #4]
   13f28:	mov	r1, #1
   13f2c:	str	r3, [sp, #48]	; 0x30
   13f30:	ldr	r3, [r4]
   13f34:	mov	r2, r0
   13f38:	mov	r0, r5
   13f3c:	add	sp, sp, #32
   13f40:	pop	{r4, r5, r6, lr}
   13f44:	b	10ed8 <__fprintf_chk@plt>
   13f48:	mov	r2, #5
   13f4c:	ldr	r1, [pc, #604]	; 141b0 <__assert_fail@plt+0x323c>
   13f50:	mov	r0, #0
   13f54:	bl	10dac <dcgettext@plt>
   13f58:	ldr	r3, [r4, #8]
   13f5c:	mov	r1, #1
   13f60:	str	r3, [sp, #52]	; 0x34
   13f64:	ldr	r3, [r4, #4]
   13f68:	str	r3, [sp, #48]	; 0x30
   13f6c:	ldr	r3, [r4]
   13f70:	mov	r2, r0
   13f74:	mov	r0, r5
   13f78:	add	sp, sp, #32
   13f7c:	pop	{r4, r5, r6, lr}
   13f80:	b	10ed8 <__fprintf_chk@plt>
   13f84:	mov	r2, #5
   13f88:	ldr	r1, [pc, #548]	; 141b4 <__assert_fail@plt+0x3240>
   13f8c:	mov	r0, #0
   13f90:	bl	10dac <dcgettext@plt>
   13f94:	ldr	r3, [r4, #12]
   13f98:	mov	r1, #1
   13f9c:	str	r3, [sp, #8]
   13fa0:	ldr	r3, [r4, #8]
   13fa4:	str	r3, [sp, #4]
   13fa8:	ldr	r3, [r4, #4]
   13fac:	str	r3, [sp]
   13fb0:	ldr	r3, [r4]
   13fb4:	mov	r2, r0
   13fb8:	mov	r0, r5
   13fbc:	bl	10ed8 <__fprintf_chk@plt>
   13fc0:	add	sp, sp, #32
   13fc4:	pop	{r4, r5, r6, pc}
   13fc8:	mov	r2, #5
   13fcc:	ldr	r1, [pc, #484]	; 141b8 <__assert_fail@plt+0x3244>
   13fd0:	mov	r0, #0
   13fd4:	bl	10dac <dcgettext@plt>
   13fd8:	ldr	r3, [r4, #16]
   13fdc:	mov	r1, #1
   13fe0:	str	r3, [sp, #12]
   13fe4:	ldr	r3, [r4, #12]
   13fe8:	str	r3, [sp, #8]
   13fec:	ldr	r3, [r4, #8]
   13ff0:	str	r3, [sp, #4]
   13ff4:	ldr	r3, [r4, #4]
   13ff8:	str	r3, [sp]
   13ffc:	ldr	r3, [r4]
   14000:	mov	r2, r0
   14004:	mov	r0, r5
   14008:	bl	10ed8 <__fprintf_chk@plt>
   1400c:	b	13fc0 <__assert_fail@plt+0x304c>
   14010:	mov	r2, #5
   14014:	ldr	r1, [pc, #416]	; 141bc <__assert_fail@plt+0x3248>
   14018:	mov	r0, #0
   1401c:	bl	10dac <dcgettext@plt>
   14020:	ldr	r3, [r4, #20]
   14024:	mov	r1, #1
   14028:	str	r3, [sp, #16]
   1402c:	ldr	r3, [r4, #16]
   14030:	str	r3, [sp, #12]
   14034:	ldr	r3, [r4, #12]
   14038:	str	r3, [sp, #8]
   1403c:	ldr	r3, [r4, #8]
   14040:	str	r3, [sp, #4]
   14044:	ldr	r3, [r4, #4]
   14048:	str	r3, [sp]
   1404c:	ldr	r3, [r4]
   14050:	mov	r2, r0
   14054:	mov	r0, r5
   14058:	bl	10ed8 <__fprintf_chk@plt>
   1405c:	b	13fc0 <__assert_fail@plt+0x304c>
   14060:	mov	r2, #5
   14064:	ldr	r1, [pc, #340]	; 141c0 <__assert_fail@plt+0x324c>
   14068:	mov	r0, #0
   1406c:	bl	10dac <dcgettext@plt>
   14070:	ldr	r3, [r4, #24]
   14074:	mov	r1, #1
   14078:	str	r3, [sp, #20]
   1407c:	ldr	r3, [r4, #20]
   14080:	str	r3, [sp, #16]
   14084:	ldr	r3, [r4, #16]
   14088:	str	r3, [sp, #12]
   1408c:	ldr	r3, [r4, #12]
   14090:	str	r3, [sp, #8]
   14094:	ldr	r3, [r4, #8]
   14098:	str	r3, [sp, #4]
   1409c:	ldr	r3, [r4, #4]
   140a0:	str	r3, [sp]
   140a4:	ldr	r3, [r4]
   140a8:	mov	r2, r0
   140ac:	mov	r0, r5
   140b0:	bl	10ed8 <__fprintf_chk@plt>
   140b4:	b	13fc0 <__assert_fail@plt+0x304c>
   140b8:	mov	r2, #5
   140bc:	ldr	r1, [pc, #256]	; 141c4 <__assert_fail@plt+0x3250>
   140c0:	mov	r0, #0
   140c4:	bl	10dac <dcgettext@plt>
   140c8:	ldr	r3, [r4, #28]
   140cc:	mov	r1, #1
   140d0:	str	r3, [sp, #24]
   140d4:	ldr	r3, [r4, #24]
   140d8:	str	r3, [sp, #20]
   140dc:	ldr	r3, [r4, #20]
   140e0:	str	r3, [sp, #16]
   140e4:	ldr	r3, [r4, #16]
   140e8:	str	r3, [sp, #12]
   140ec:	ldr	r3, [r4, #12]
   140f0:	str	r3, [sp, #8]
   140f4:	ldr	r3, [r4, #8]
   140f8:	str	r3, [sp, #4]
   140fc:	ldr	r3, [r4, #4]
   14100:	str	r3, [sp]
   14104:	ldr	r3, [r4]
   14108:	mov	r2, r0
   1410c:	mov	r0, r5
   14110:	bl	10ed8 <__fprintf_chk@plt>
   14114:	b	13fc0 <__assert_fail@plt+0x304c>
   14118:	ldr	r1, [pc, #168]	; 141c8 <__assert_fail@plt+0x3254>
   1411c:	mov	r2, #5
   14120:	mov	r0, #0
   14124:	bl	10dac <dcgettext@plt>
   14128:	ldr	r3, [r4, #32]
   1412c:	mov	r1, #1
   14130:	str	r3, [sp, #28]
   14134:	ldr	r3, [r4, #28]
   14138:	str	r3, [sp, #24]
   1413c:	ldr	r3, [r4, #24]
   14140:	str	r3, [sp, #20]
   14144:	ldr	r3, [r4, #20]
   14148:	str	r3, [sp, #16]
   1414c:	ldr	r3, [r4, #16]
   14150:	str	r3, [sp, #12]
   14154:	ldr	r3, [r4, #12]
   14158:	str	r3, [sp, #8]
   1415c:	ldr	r3, [r4, #8]
   14160:	str	r3, [sp, #4]
   14164:	ldr	r3, [r4, #4]
   14168:	str	r3, [sp]
   1416c:	ldr	r3, [r4]
   14170:	mov	r2, r0
   14174:	mov	r0, r5
   14178:	bl	10ed8 <__fprintf_chk@plt>
   1417c:	b	13fc0 <__assert_fail@plt+0x304c>
   14180:	mov	r2, #5
   14184:	ldr	r1, [pc, #64]	; 141cc <__assert_fail@plt+0x3258>
   14188:	b	14120 <__assert_fail@plt+0x31ac>
   1418c:	andeq	r5, r1, r3, asr pc
   14190:	andeq	r5, r1, r6, ror #30
   14194:	andeq	r0, r0, r6, ror #15
   14198:	andeq	r6, r1, r4, lsr r2
   1419c:	andeq	r5, r1, sl, ror #30
   141a0:	andeq	r6, r1, r5, lsl r0
   141a4:	andeq	r5, r1, pc, asr pc
   141a8:	andeq	r6, r1, r7, lsr r0
   141ac:	andeq	r6, r1, r7, asr #32
   141b0:	andeq	r6, r1, lr, asr r0
   141b4:	andeq	r6, r1, sl, ror r0
   141b8:	muleq	r1, sl, r0
   141bc:	strheq	r6, [r1], -lr
   141c0:	andeq	r6, r1, r6, ror #1
   141c4:	andeq	r6, r1, r2, lsl r1
   141c8:	andeq	r6, r1, r2, asr #2
   141cc:	andeq	r6, r1, r6, ror r1
   141d0:	push	{r0, r1, r4, lr}
   141d4:	mov	ip, #0
   141d8:	ldr	lr, [sp, #16]
   141dc:	ldr	r4, [lr, ip, lsl #2]
   141e0:	cmp	r4, #0
   141e4:	bne	141fc <__assert_fail@plt+0x3288>
   141e8:	str	ip, [sp, #4]
   141ec:	str	lr, [sp]
   141f0:	bl	13e04 <__assert_fail@plt+0x2e90>
   141f4:	add	sp, sp, #8
   141f8:	pop	{r4, pc}
   141fc:	add	ip, ip, #1
   14200:	b	141dc <__assert_fail@plt+0x3268>
   14204:	push	{r4, r5, lr}
   14208:	sub	sp, sp, #52	; 0x34
   1420c:	mov	ip, #0
   14210:	ldr	r5, [sp, #64]	; 0x40
   14214:	add	lr, sp, #8
   14218:	ldr	r4, [r5, ip, lsl #2]
   1421c:	cmp	r4, #0
   14220:	str	r4, [lr, ip, lsl #2]
   14224:	beq	14234 <__assert_fail@plt+0x32c0>
   14228:	add	ip, ip, #1
   1422c:	cmp	ip, #10
   14230:	bne	14218 <__assert_fail@plt+0x32a4>
   14234:	str	ip, [sp, #4]
   14238:	str	lr, [sp]
   1423c:	bl	13e04 <__assert_fail@plt+0x2e90>
   14240:	add	sp, sp, #52	; 0x34
   14244:	pop	{r4, r5, pc}
   14248:	push	{r3}		; (str r3, [sp, #-4]!)
   1424c:	push	{r0, r1, r2, r3, lr}
   14250:	add	r3, sp, #24
   14254:	str	r3, [sp, #12]
   14258:	str	r3, [sp]
   1425c:	ldr	r3, [sp, #20]
   14260:	bl	14204 <__assert_fail@plt+0x3290>
   14264:	add	sp, sp, #16
   14268:	pop	{lr}		; (ldr lr, [sp], #4)
   1426c:	add	sp, sp, #4
   14270:	bx	lr
   14274:	ldr	r3, [pc, #116]	; 142f0 <__assert_fail@plt+0x337c>
   14278:	push	{r4, lr}
   1427c:	mov	r0, #10
   14280:	ldr	r1, [r3]
   14284:	bl	10d94 <fputc_unlocked@plt>
   14288:	mov	r2, #5
   1428c:	ldr	r1, [pc, #96]	; 142f4 <__assert_fail@plt+0x3380>
   14290:	mov	r0, #0
   14294:	bl	10dac <dcgettext@plt>
   14298:	ldr	r2, [pc, #88]	; 142f8 <__assert_fail@plt+0x3384>
   1429c:	mov	r1, r0
   142a0:	mov	r0, #1
   142a4:	bl	10eb4 <__printf_chk@plt>
   142a8:	mov	r2, #5
   142ac:	ldr	r1, [pc, #72]	; 142fc <__assert_fail@plt+0x3388>
   142b0:	mov	r0, #0
   142b4:	bl	10dac <dcgettext@plt>
   142b8:	ldr	r3, [pc, #64]	; 14300 <__assert_fail@plt+0x338c>
   142bc:	ldr	r2, [pc, #64]	; 14304 <__assert_fail@plt+0x3390>
   142c0:	mov	r1, r0
   142c4:	mov	r0, #1
   142c8:	bl	10eb4 <__printf_chk@plt>
   142cc:	mov	r2, #5
   142d0:	ldr	r1, [pc, #48]	; 14308 <__assert_fail@plt+0x3394>
   142d4:	mov	r0, #0
   142d8:	bl	10dac <dcgettext@plt>
   142dc:	ldr	r2, [pc, #40]	; 1430c <__assert_fail@plt+0x3398>
   142e0:	pop	{r4, lr}
   142e4:	mov	r1, r0
   142e8:	mov	r0, #1
   142ec:	b	10eb4 <__printf_chk@plt>
   142f0:	andeq	r7, r2, r4, asr r1
   142f4:			; <UNDEFINED> instruction: 0x000161b2
   142f8:	andeq	r6, r1, r6, asr #3
   142fc:	ldrdeq	r6, [r1], -ip
   14300:	andeq	r5, r1, r1, ror #23
   14304:	andeq	r5, r1, r9, lsl #24
   14308:	strdeq	r6, [r1], -r0
   1430c:	andeq	r6, r1, r7, lsl r2
   14310:	push	{r4, lr}
   14314:	bl	14d64 <__assert_fail@plt+0x3df0>
   14318:	cmp	r0, #0
   1431c:	popne	{r4, pc}
   14320:	bl	147a4 <__assert_fail@plt+0x3830>
   14324:	push	{r4, lr}
   14328:	bl	14d64 <__assert_fail@plt+0x3df0>
   1432c:	cmp	r0, #0
   14330:	popne	{r4, pc}
   14334:	bl	147a4 <__assert_fail@plt+0x3830>
   14338:	b	14310 <__assert_fail@plt+0x339c>
   1433c:	push	{r4, r5, r6, lr}
   14340:	mov	r5, r0
   14344:	mov	r4, r1
   14348:	bl	14da4 <__assert_fail@plt+0x3e30>
   1434c:	cmp	r0, #0
   14350:	popne	{r4, r5, r6, pc}
   14354:	adds	r4, r4, #0
   14358:	movne	r4, #1
   1435c:	cmp	r5, #0
   14360:	orreq	r4, r4, #1
   14364:	cmp	r4, #0
   14368:	popeq	{r4, r5, r6, pc}
   1436c:	bl	147a4 <__assert_fail@plt+0x3830>
   14370:	push	{r4, lr}
   14374:	cmp	r1, #0
   14378:	orreq	r1, r1, #1
   1437c:	bl	14da4 <__assert_fail@plt+0x3e30>
   14380:	cmp	r0, #0
   14384:	popne	{r4, pc}
   14388:	bl	147a4 <__assert_fail@plt+0x3830>
   1438c:	push	{r4, r5, r6, lr}
   14390:	mov	r6, r0
   14394:	mov	r5, r1
   14398:	mov	r4, r2
   1439c:	bl	14f48 <__assert_fail@plt+0x3fd4>
   143a0:	cmp	r0, #0
   143a4:	popne	{r4, r5, r6, pc}
   143a8:	cmp	r6, #0
   143ac:	beq	143bc <__assert_fail@plt+0x3448>
   143b0:	cmp	r5, #0
   143b4:	cmpne	r4, #0
   143b8:	popeq	{r4, r5, r6, pc}
   143bc:	bl	147a4 <__assert_fail@plt+0x3830>
   143c0:	b	1438c <__assert_fail@plt+0x3418>
   143c4:	cmp	r2, #0
   143c8:	cmpne	r1, #0
   143cc:	moveq	r2, #1
   143d0:	moveq	r1, r2
   143d4:	push	{r4, lr}
   143d8:	bl	14f48 <__assert_fail@plt+0x3fd4>
   143dc:	cmp	r0, #0
   143e0:	popne	{r4, pc}
   143e4:	bl	147a4 <__assert_fail@plt+0x3830>
   143e8:	mov	r2, r1
   143ec:	mov	r1, r0
   143f0:	mov	r0, #0
   143f4:	b	1438c <__assert_fail@plt+0x3418>
   143f8:	mov	r2, r1
   143fc:	mov	r1, r0
   14400:	mov	r0, #0
   14404:	b	143c4 <__assert_fail@plt+0x3450>
   14408:	push	{r4, r5, r6, r7, r8, lr}
   1440c:	subs	r7, r0, #0
   14410:	mov	r5, r1
   14414:	mov	r6, r2
   14418:	ldr	r4, [r1]
   1441c:	bne	14458 <__assert_fail@plt+0x34e4>
   14420:	cmp	r4, #0
   14424:	bne	14440 <__assert_fail@plt+0x34cc>
   14428:	mov	r1, r2
   1442c:	mov	r0, #64	; 0x40
   14430:	bl	15074 <__assert_fail@plt+0x4100>
   14434:	cmp	r0, #0
   14438:	movne	r4, r0
   1443c:	addeq	r4, r0, #1
   14440:	mov	r2, r6
   14444:	mov	r1, r4
   14448:	mov	r0, r7
   1444c:	bl	1438c <__assert_fail@plt+0x3418>
   14450:	str	r4, [r5]
   14454:	pop	{r4, r5, r6, r7, r8, pc}
   14458:	lsr	r2, r4, #1
   1445c:	add	r3, r2, #1
   14460:	mvn	r3, r3
   14464:	cmp	r4, r3
   14468:	addls	r4, r4, #1
   1446c:	addls	r4, r4, r2
   14470:	bls	14440 <__assert_fail@plt+0x34cc>
   14474:	bl	147a4 <__assert_fail@plt+0x3830>
   14478:	mov	r2, #1
   1447c:	b	14408 <__assert_fail@plt+0x3494>
   14480:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14484:	mov	sl, r0
   14488:	ldr	r8, [r1]
   1448c:	mov	fp, r1
   14490:	mov	r5, r2
   14494:	asrs	r4, r8, #1
   14498:	mov	r9, r3
   1449c:	ldr	r7, [sp, #48]	; 0x30
   144a0:	bpl	1453c <__assert_fail@plt+0x35c8>
   144a4:	rsb	r2, r4, #-2147483648	; 0x80000000
   144a8:	cmp	r8, r2
   144ac:	movge	r2, #0
   144b0:	movlt	r2, #1
   144b4:	mvn	r3, r9
   144b8:	cmp	r2, #0
   144bc:	lsr	r3, r3, #31
   144c0:	addeq	r4, r4, r8
   144c4:	mvnne	r4, #-2147483648	; 0x80000000
   144c8:	mov	r0, r3
   144cc:	cmp	r9, r4
   144d0:	movge	r0, #0
   144d4:	andlt	r0, r0, #1
   144d8:	cmp	r0, #0
   144dc:	str	r3, [sp, #4]
   144e0:	bne	146b0 <__assert_fail@plt+0x373c>
   144e4:	cmp	r7, #0
   144e8:	bge	145fc <__assert_fail@plt+0x3688>
   144ec:	cmp	r4, #0
   144f0:	bge	14554 <__assert_fail@plt+0x35e0>
   144f4:	mov	r1, r7
   144f8:	mvn	r0, #-2147483648	; 0x80000000
   144fc:	bl	15280 <__assert_fail@plt+0x430c>
   14500:	cmp	r0, r4
   14504:	movle	r0, #0
   14508:	movgt	r0, #1
   1450c:	cmp	r0, #0
   14510:	mvnne	r6, #-2147483648	; 0x80000000
   14514:	beq	14564 <__assert_fail@plt+0x35f0>
   14518:	mov	r1, r7
   1451c:	mov	r0, r6
   14520:	bl	15280 <__assert_fail@plt+0x430c>
   14524:	mov	r1, r7
   14528:	mov	r4, r0
   1452c:	mov	r0, r6
   14530:	bl	154a0 <__assert_fail@plt+0x452c>
   14534:	sub	r1, r6, r1
   14538:	b	14574 <__assert_fail@plt+0x3600>
   1453c:	mvn	r2, #-2147483648	; 0x80000000
   14540:	sub	r2, r2, r4
   14544:	cmp	r8, r2
   14548:	movle	r2, #0
   1454c:	movgt	r2, #1
   14550:	b	144b4 <__assert_fail@plt+0x3540>
   14554:	cmn	r7, #1
   14558:	movne	r1, r7
   1455c:	movne	r0, #-2147483648	; 0x80000000
   14560:	bne	146c8 <__assert_fail@plt+0x3754>
   14564:	mul	r1, r7, r4
   14568:	cmp	r1, #63	; 0x3f
   1456c:	movle	r6, #64	; 0x40
   14570:	ble	14518 <__assert_fail@plt+0x35a4>
   14574:	cmp	sl, #0
   14578:	sub	r2, r4, r8
   1457c:	streq	sl, [fp]
   14580:	cmp	r2, r5
   14584:	bge	14658 <__assert_fail@plt+0x36e4>
   14588:	cmp	r5, #0
   1458c:	bge	14624 <__assert_fail@plt+0x36b0>
   14590:	rsb	r2, r5, #-2147483648	; 0x80000000
   14594:	cmp	r8, r2
   14598:	movge	r2, #0
   1459c:	movlt	r2, #1
   145a0:	cmp	r2, #0
   145a4:	bne	145f8 <__assert_fail@plt+0x3684>
   145a8:	ldr	r0, [sp, #4]
   145ac:	add	r5, r8, r5
   145b0:	cmp	r9, r5
   145b4:	movge	r0, #0
   145b8:	andlt	r0, r0, #1
   145bc:	cmp	r0, #0
   145c0:	mov	r4, r5
   145c4:	bne	145f8 <__assert_fail@plt+0x3684>
   145c8:	cmp	r7, #0
   145cc:	bge	1466c <__assert_fail@plt+0x36f8>
   145d0:	cmp	r5, #0
   145d4:	bge	14644 <__assert_fail@plt+0x36d0>
   145d8:	mov	r1, r7
   145dc:	mvn	r0, #-2147483648	; 0x80000000
   145e0:	bl	15280 <__assert_fail@plt+0x430c>
   145e4:	cmp	r5, r0
   145e8:	movge	r0, #0
   145ec:	movlt	r0, #1
   145f0:	cmp	r0, #0
   145f4:	beq	14654 <__assert_fail@plt+0x36e0>
   145f8:	bl	147a4 <__assert_fail@plt+0x3830>
   145fc:	beq	14564 <__assert_fail@plt+0x35f0>
   14600:	cmp	r4, #0
   14604:	bge	146c0 <__assert_fail@plt+0x374c>
   14608:	cmn	r4, #1
   1460c:	beq	14564 <__assert_fail@plt+0x35f0>
   14610:	mov	r1, r4
   14614:	mov	r0, #-2147483648	; 0x80000000
   14618:	bl	15280 <__assert_fail@plt+0x430c>
   1461c:	cmp	r7, r0
   14620:	b	14504 <__assert_fail@plt+0x3590>
   14624:	cmp	r8, #0
   14628:	blt	145a8 <__assert_fail@plt+0x3634>
   1462c:	mvn	r2, #-2147483648	; 0x80000000
   14630:	sub	r2, r2, r5
   14634:	cmp	r8, r2
   14638:	movle	r2, #0
   1463c:	movgt	r2, #1
   14640:	b	145a0 <__assert_fail@plt+0x362c>
   14644:	cmn	r7, #1
   14648:	movne	r1, r7
   1464c:	movne	r0, #-2147483648	; 0x80000000
   14650:	bne	146a4 <__assert_fail@plt+0x3730>
   14654:	mul	r1, r5, r7
   14658:	mov	r0, sl
   1465c:	bl	1433c <__assert_fail@plt+0x33c8>
   14660:	str	r4, [fp]
   14664:	add	sp, sp, #12
   14668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1466c:	beq	14654 <__assert_fail@plt+0x36e0>
   14670:	cmp	r5, #0
   14674:	movge	r1, r7
   14678:	mvnge	r0, #-2147483648	; 0x80000000
   1467c:	bge	146a4 <__assert_fail@plt+0x3730>
   14680:	cmn	r5, #1
   14684:	beq	14654 <__assert_fail@plt+0x36e0>
   14688:	mov	r1, r5
   1468c:	mov	r0, #-2147483648	; 0x80000000
   14690:	bl	15280 <__assert_fail@plt+0x430c>
   14694:	cmp	r7, r0
   14698:	movle	r0, #0
   1469c:	movgt	r0, #1
   146a0:	b	145f0 <__assert_fail@plt+0x367c>
   146a4:	bl	15280 <__assert_fail@plt+0x430c>
   146a8:	cmp	r5, r0
   146ac:	b	14698 <__assert_fail@plt+0x3724>
   146b0:	cmp	r7, #0
   146b4:	mov	r4, r9
   146b8:	blt	14554 <__assert_fail@plt+0x35e0>
   146bc:	beq	14564 <__assert_fail@plt+0x35f0>
   146c0:	mov	r1, r7
   146c4:	mvn	r0, #-2147483648	; 0x80000000
   146c8:	bl	15280 <__assert_fail@plt+0x430c>
   146cc:	cmp	r0, r4
   146d0:	movge	r0, #0
   146d4:	movlt	r0, #1
   146d8:	b	1450c <__assert_fail@plt+0x3598>
   146dc:	push	{r4, lr}
   146e0:	bl	14d1c <__assert_fail@plt+0x3da8>
   146e4:	cmp	r0, #0
   146e8:	popne	{r4, pc}
   146ec:	bl	147a4 <__assert_fail@plt+0x3830>
   146f0:	mov	r1, #1
   146f4:	b	146dc <__assert_fail@plt+0x3768>
   146f8:	push	{r4, lr}
   146fc:	bl	14d1c <__assert_fail@plt+0x3da8>
   14700:	cmp	r0, #0
   14704:	popne	{r4, pc}
   14708:	bl	147a4 <__assert_fail@plt+0x3830>
   1470c:	mov	r1, #1
   14710:	b	146f8 <__assert_fail@plt+0x3784>
   14714:	push	{r4, r5, r6, lr}
   14718:	mov	r4, r1
   1471c:	mov	r5, r0
   14720:	mov	r0, r1
   14724:	bl	14310 <__assert_fail@plt+0x339c>
   14728:	mov	r2, r4
   1472c:	mov	r1, r5
   14730:	pop	{r4, r5, r6, lr}
   14734:	b	10d64 <memcpy@plt>
   14738:	push	{r4, r5, r6, lr}
   1473c:	mov	r4, r1
   14740:	mov	r5, r0
   14744:	mov	r0, r1
   14748:	bl	14324 <__assert_fail@plt+0x33b0>
   1474c:	mov	r2, r4
   14750:	mov	r1, r5
   14754:	pop	{r4, r5, r6, lr}
   14758:	b	10d64 <memcpy@plt>
   1475c:	push	{r4, r5, r6, lr}
   14760:	mov	r5, r0
   14764:	add	r0, r1, #1
   14768:	mov	r4, r1
   1476c:	bl	14324 <__assert_fail@plt+0x33b0>
   14770:	mov	r2, #0
   14774:	mov	r1, r5
   14778:	strb	r2, [r0, r4]
   1477c:	mov	r2, r4
   14780:	pop	{r4, r5, r6, lr}
   14784:	b	10d64 <memcpy@plt>
   14788:	push	{r4, lr}
   1478c:	mov	r4, r0
   14790:	bl	10e78 <strlen@plt>
   14794:	add	r1, r0, #1
   14798:	mov	r0, r4
   1479c:	pop	{r4, lr}
   147a0:	b	14714 <__assert_fail@plt+0x37a0>
   147a4:	ldr	r3, [pc, #44]	; 147d8 <__assert_fail@plt+0x3864>
   147a8:	push	{r4, lr}
   147ac:	mov	r2, #5
   147b0:	ldr	r1, [pc, #36]	; 147dc <__assert_fail@plt+0x3868>
   147b4:	mov	r0, #0
   147b8:	ldr	r4, [r3]
   147bc:	bl	10dac <dcgettext@plt>
   147c0:	ldr	r2, [pc, #24]	; 147e0 <__assert_fail@plt+0x386c>
   147c4:	mov	r1, #0
   147c8:	mov	r3, r0
   147cc:	mov	r0, r4
   147d0:	bl	10e18 <error@plt>
   147d4:	bl	10f5c <abort@plt>
   147d8:	strdeq	r7, [r2], -r4
   147dc:	andeq	r6, r1, r3, ror #4
   147e0:	andeq	r5, r1, r9, asr lr
   147e4:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   147e8:	mov	r9, r3
   147ec:	ldr	r3, [sp, #48]	; 0x30
   147f0:	mov	r8, r2
   147f4:	str	r3, [sp]
   147f8:	mov	r2, r1
   147fc:	add	r3, sp, #8
   14800:	mov	r1, #0
   14804:	mov	r6, r0
   14808:	ldr	r4, [sp, #56]	; 0x38
   1480c:	bl	149f0 <__assert_fail@plt+0x3a7c>
   14810:	cmp	r0, #0
   14814:	bne	14888 <__assert_fail@plt+0x3914>
   14818:	ldrd	r0, [sp, #8]
   1481c:	ldrd	r2, [sp, #40]	; 0x28
   14820:	cmp	r1, r9
   14824:	cmpeq	r0, r8
   14828:	movcc	ip, #1
   1482c:	movcs	ip, #0
   14830:	cmp	r1, r3
   14834:	cmpeq	r0, r2
   14838:	movls	r3, ip
   1483c:	orrhi	r3, ip, #1
   14840:	cmp	r3, #0
   14844:	beq	14904 <__assert_fail@plt+0x3990>
   14848:	mov	r3, #0
   1484c:	mvn	r2, #-1073741824	; 0xc0000000
   14850:	cmp	r1, r3
   14854:	cmpeq	r0, r2
   14858:	bls	1487c <__assert_fail@plt+0x3908>
   1485c:	bl	10e90 <__errno_location@plt>
   14860:	mov	r3, #75	; 0x4b
   14864:	cmp	r4, #0
   14868:	str	r3, [r0]
   1486c:	beq	148d0 <__assert_fail@plt+0x395c>
   14870:	bl	10e90 <__errno_location@plt>
   14874:	ldr	r5, [r0]
   14878:	b	148e4 <__assert_fail@plt+0x3970>
   1487c:	bl	10e90 <__errno_location@plt>
   14880:	mov	r3, #34	; 0x22
   14884:	b	14864 <__assert_fail@plt+0x38f0>
   14888:	cmp	r0, #1
   1488c:	bne	148b4 <__assert_fail@plt+0x3940>
   14890:	bl	10e90 <__errno_location@plt>
   14894:	mov	r3, #75	; 0x4b
   14898:	cmp	r4, #0
   1489c:	str	r3, [r0]
   148a0:	bne	148d4 <__assert_fail@plt+0x3960>
   148a4:	bl	10e90 <__errno_location@plt>
   148a8:	mov	r4, #1
   148ac:	ldr	r5, [r0]
   148b0:	b	148e4 <__assert_fail@plt+0x3970>
   148b4:	cmp	r0, #3
   148b8:	bne	148c8 <__assert_fail@plt+0x3954>
   148bc:	bl	10e90 <__errno_location@plt>
   148c0:	mov	r3, #0
   148c4:	b	14898 <__assert_fail@plt+0x3924>
   148c8:	cmp	r4, #0
   148cc:	bne	148d4 <__assert_fail@plt+0x3960>
   148d0:	mov	r4, #1
   148d4:	bl	10e90 <__errno_location@plt>
   148d8:	ldr	r5, [r0]
   148dc:	cmp	r5, #22
   148e0:	moveq	r5, #0
   148e4:	mov	r0, r6
   148e8:	bl	13df8 <__assert_fail@plt+0x2e84>
   148ec:	ldr	r3, [sp, #52]	; 0x34
   148f0:	ldr	r2, [pc, #20]	; 1490c <__assert_fail@plt+0x3998>
   148f4:	mov	r1, r5
   148f8:	str	r0, [sp]
   148fc:	mov	r0, r4
   14900:	bl	10e18 <error@plt>
   14904:	add	sp, sp, #16
   14908:	pop	{r4, r5, r6, r8, r9, pc}
   1490c:	andeq	r5, r1, r5, asr lr
   14910:	push	{r4, r5}
   14914:	mov	r1, #10
   14918:	pop	{r4, r5}
   1491c:	b	147e4 <__assert_fail@plt+0x3870>
   14920:	push	{r4, r5, r6, lr}
   14924:	subs	r5, r1, #0
   14928:	mov	r4, r0
   1492c:	bge	1496c <__assert_fail@plt+0x39f8>
   14930:	ldm	r0, {r0, r3}
   14934:	orr	r0, r0, r3
   14938:	adds	r0, r0, #0
   1493c:	movne	r0, #1
   14940:	cmp	r0, #0
   14944:	bne	149a0 <__assert_fail@plt+0x3a2c>
   14948:	ldr	r2, [r4]
   1494c:	asr	r3, r5, #31
   14950:	ldr	r1, [r4, #4]
   14954:	mul	r3, r3, r2
   14958:	mla	r1, r5, r1, r3
   1495c:	umull	r2, r3, r2, r5
   14960:	add	r3, r1, r3
   14964:	strd	r2, [r4]
   14968:	pop	{r4, r5, r6, pc}
   1496c:	moveq	r0, r5
   14970:	beq	14940 <__assert_fail@plt+0x39cc>
   14974:	mov	r2, r5
   14978:	asr	r3, r5, #31
   1497c:	mvn	r0, #0
   14980:	mvn	r1, #0
   14984:	bl	154c0 <__assert_fail@plt+0x454c>
   14988:	ldrd	r2, [r4]
   1498c:	cmp	r1, r3
   14990:	cmpeq	r0, r2
   14994:	movcc	r0, #1
   14998:	movcs	r0, #0
   1499c:	b	14940 <__assert_fail@plt+0x39cc>
   149a0:	mvn	r2, #0
   149a4:	mvn	r3, #0
   149a8:	mov	r0, #1
   149ac:	strd	r2, [r4]
   149b0:	pop	{r4, r5, r6, pc}
   149b4:	push	{r4, r5, r6, r7, r8, lr}
   149b8:	mov	r6, r0
   149bc:	mov	r7, r1
   149c0:	mov	r5, r2
   149c4:	mov	r4, #0
   149c8:	cmp	r5, #0
   149cc:	bne	149d8 <__assert_fail@plt+0x3a64>
   149d0:	mov	r0, r4
   149d4:	pop	{r4, r5, r6, r7, r8, pc}
   149d8:	mov	r1, r7
   149dc:	mov	r0, r6
   149e0:	bl	14920 <__assert_fail@plt+0x39ac>
   149e4:	sub	r5, r5, #1
   149e8:	orr	r4, r4, r0
   149ec:	b	149c8 <__assert_fail@plt+0x3a54>
   149f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149f4:	sub	sp, sp, #20
   149f8:	cmp	r2, #36	; 0x24
   149fc:	ldr	r9, [sp, #56]	; 0x38
   14a00:	bls	14a18 <__assert_fail@plt+0x3aa4>
   14a04:	ldr	r3, [pc, #772]	; 14d10 <__assert_fail@plt+0x3d9c>
   14a08:	mov	r2, #85	; 0x55
   14a0c:	ldr	r1, [pc, #768]	; 14d14 <__assert_fail@plt+0x3da0>
   14a10:	ldr	r0, [pc, #768]	; 14d18 <__assert_fail@plt+0x3da4>
   14a14:	bl	10f74 <__assert_fail@plt>
   14a18:	cmp	r1, #0
   14a1c:	mov	r7, r1
   14a20:	mov	r4, r0
   14a24:	mov	fp, r2
   14a28:	mov	r8, r3
   14a2c:	addeq	r7, sp, #4
   14a30:	bl	10e90 <__errno_location@plt>
   14a34:	mov	r3, #0
   14a38:	str	r3, [r0]
   14a3c:	mov	sl, r0
   14a40:	bl	10e60 <__ctype_b_loc@plt>
   14a44:	ldrb	r6, [r4]
   14a48:	mov	r3, r4
   14a4c:	ldr	r1, [r0]
   14a50:	lsl	r2, r6, #1
   14a54:	ldrh	r5, [r1, r2]
   14a58:	ands	r5, r5, #8192	; 0x2000
   14a5c:	bne	14a78 <__assert_fail@plt+0x3b04>
   14a60:	cmp	r6, #45	; 0x2d
   14a64:	bne	14a80 <__assert_fail@plt+0x3b0c>
   14a68:	mov	r5, #4
   14a6c:	mov	r0, r5
   14a70:	add	sp, sp, #20
   14a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a78:	ldrb	r6, [r3, #1]!
   14a7c:	b	14a50 <__assert_fail@plt+0x3adc>
   14a80:	mov	r2, fp
   14a84:	mov	r1, r7
   14a88:	mov	r0, r4
   14a8c:	bl	10ecc <strtoumax@plt>
   14a90:	ldr	r6, [r7]
   14a94:	cmp	r4, r6
   14a98:	strd	r0, [sp, #8]
   14a9c:	bne	14b00 <__assert_fail@plt+0x3b8c>
   14aa0:	cmp	r9, #0
   14aa4:	beq	14a68 <__assert_fail@plt+0x3af4>
   14aa8:	ldrb	r1, [r6]
   14aac:	cmp	r1, #0
   14ab0:	beq	14a68 <__assert_fail@plt+0x3af4>
   14ab4:	mov	r0, r9
   14ab8:	bl	10e84 <strchr@plt>
   14abc:	cmp	r0, #0
   14ac0:	beq	14a68 <__assert_fail@plt+0x3af4>
   14ac4:	mov	r2, #1
   14ac8:	mov	r3, #0
   14acc:	strd	r2, [sp, #8]
   14ad0:	ldrb	r4, [r6]
   14ad4:	cmp	r4, #0
   14ad8:	beq	14c10 <__assert_fail@plt+0x3c9c>
   14adc:	mov	r1, r4
   14ae0:	mov	r0, r9
   14ae4:	bl	10e84 <strchr@plt>
   14ae8:	cmp	r0, #0
   14aec:	bne	14b28 <__assert_fail@plt+0x3bb4>
   14af0:	ldrd	r2, [sp, #8]
   14af4:	orr	r5, r5, #2
   14af8:	strd	r2, [r8]
   14afc:	b	14a6c <__assert_fail@plt+0x3af8>
   14b00:	ldr	r5, [sl]
   14b04:	cmp	r5, #0
   14b08:	beq	14b18 <__assert_fail@plt+0x3ba4>
   14b0c:	cmp	r5, #34	; 0x22
   14b10:	bne	14a68 <__assert_fail@plt+0x3af4>
   14b14:	mov	r5, #1
   14b18:	cmp	r9, #0
   14b1c:	bne	14ad0 <__assert_fail@plt+0x3b5c>
   14b20:	strd	r0, [r8]
   14b24:	b	14a6c <__assert_fail@plt+0x3af8>
   14b28:	cmp	r4, #84	; 0x54
   14b2c:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14b30:	bhi	14b68 <__assert_fail@plt+0x3bf4>
   14b34:	cmp	r4, #75	; 0x4b
   14b38:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14b3c:	bhi	14b58 <__assert_fail@plt+0x3be4>
   14b40:	cmp	r4, #69	; 0x45
   14b44:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14b48:	cmp	r4, #71	; 0x47
   14b4c:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14b50:	mov	r6, #1
   14b54:	b	14c44 <__assert_fail@plt+0x3cd0>
   14b58:	cmp	r4, #77	; 0x4d
   14b5c:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14b60:	cmp	r4, #80	; 0x50
   14b64:	b	14b4c <__assert_fail@plt+0x3bd8>
   14b68:	cmp	r4, #103	; 0x67
   14b6c:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14b70:	bhi	14c1c <__assert_fail@plt+0x3ca8>
   14b74:	sub	r3, r4, #89	; 0x59
   14b78:	cmp	r3, #1
   14b7c:	bhi	14b50 <__assert_fail@plt+0x3bdc>
   14b80:	mov	r1, #48	; 0x30
   14b84:	mov	r0, r9
   14b88:	bl	10e84 <strchr@plt>
   14b8c:	cmp	r0, #0
   14b90:	beq	14b50 <__assert_fail@plt+0x3bdc>
   14b94:	ldrb	r3, [r6, #1]
   14b98:	cmp	r3, #68	; 0x44
   14b9c:	beq	14bb0 <__assert_fail@plt+0x3c3c>
   14ba0:	cmp	r3, #105	; 0x69
   14ba4:	beq	14c34 <__assert_fail@plt+0x3cc0>
   14ba8:	cmp	r3, #66	; 0x42
   14bac:	bne	14b50 <__assert_fail@plt+0x3bdc>
   14bb0:	mov	r6, #2
   14bb4:	mov	r1, #1000	; 0x3e8
   14bb8:	cmp	r4, #89	; 0x59
   14bbc:	beq	14cf8 <__assert_fail@plt+0x3d84>
   14bc0:	bhi	14c6c <__assert_fail@plt+0x3cf8>
   14bc4:	cmp	r4, #75	; 0x4b
   14bc8:	beq	14cac <__assert_fail@plt+0x3d38>
   14bcc:	bhi	14c4c <__assert_fail@plt+0x3cd8>
   14bd0:	cmp	r4, #69	; 0x45
   14bd4:	beq	14cd4 <__assert_fail@plt+0x3d60>
   14bd8:	cmp	r4, #71	; 0x47
   14bdc:	beq	14ce0 <__assert_fail@plt+0x3d6c>
   14be0:	cmp	r4, #66	; 0x42
   14be4:	moveq	r1, #1024	; 0x400
   14be8:	bne	14af0 <__assert_fail@plt+0x3b7c>
   14bec:	add	r0, sp, #8
   14bf0:	bl	14920 <__assert_fail@plt+0x39ac>
   14bf4:	ldr	r3, [r7]
   14bf8:	orr	r5, r5, r0
   14bfc:	add	r2, r3, r6
   14c00:	str	r2, [r7]
   14c04:	ldrb	r3, [r3, r6]
   14c08:	cmp	r3, #0
   14c0c:	orrne	r5, r5, #2
   14c10:	ldrd	r2, [sp, #8]
   14c14:	strd	r2, [r8]
   14c18:	b	14a6c <__assert_fail@plt+0x3af8>
   14c1c:	cmp	r4, #109	; 0x6d
   14c20:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14c24:	cmp	r4, #116	; 0x74
   14c28:	beq	14b80 <__assert_fail@plt+0x3c0c>
   14c2c:	cmp	r4, #107	; 0x6b
   14c30:	b	14b4c <__assert_fail@plt+0x3bd8>
   14c34:	ldrb	r6, [r6, #2]
   14c38:	cmp	r6, #66	; 0x42
   14c3c:	movne	r6, #1
   14c40:	moveq	r6, #3
   14c44:	mov	r1, #1024	; 0x400
   14c48:	b	14bb8 <__assert_fail@plt+0x3c44>
   14c4c:	cmp	r4, #80	; 0x50
   14c50:	beq	14ce8 <__assert_fail@plt+0x3d74>
   14c54:	cmp	r4, #84	; 0x54
   14c58:	beq	14cf0 <__assert_fail@plt+0x3d7c>
   14c5c:	cmp	r4, #77	; 0x4d
   14c60:	bne	14af0 <__assert_fail@plt+0x3b7c>
   14c64:	mov	r2, #2
   14c68:	b	14cd8 <__assert_fail@plt+0x3d64>
   14c6c:	cmp	r4, #103	; 0x67
   14c70:	beq	14ce0 <__assert_fail@plt+0x3d6c>
   14c74:	bhi	14c98 <__assert_fail@plt+0x3d24>
   14c78:	cmp	r4, #98	; 0x62
   14c7c:	beq	14ccc <__assert_fail@plt+0x3d58>
   14c80:	cmp	r4, #99	; 0x63
   14c84:	beq	14d08 <__assert_fail@plt+0x3d94>
   14c88:	cmp	r4, #90	; 0x5a
   14c8c:	bne	14af0 <__assert_fail@plt+0x3b7c>
   14c90:	mov	r2, #7
   14c94:	b	14cd8 <__assert_fail@plt+0x3d64>
   14c98:	cmp	r4, #109	; 0x6d
   14c9c:	beq	14c64 <__assert_fail@plt+0x3cf0>
   14ca0:	bhi	14cb4 <__assert_fail@plt+0x3d40>
   14ca4:	cmp	r4, #107	; 0x6b
   14ca8:	bne	14af0 <__assert_fail@plt+0x3b7c>
   14cac:	mov	r2, #1
   14cb0:	b	14cd8 <__assert_fail@plt+0x3d64>
   14cb4:	cmp	r4, #116	; 0x74
   14cb8:	beq	14cf0 <__assert_fail@plt+0x3d7c>
   14cbc:	cmp	r4, #119	; 0x77
   14cc0:	moveq	r1, #2
   14cc4:	beq	14bec <__assert_fail@plt+0x3c78>
   14cc8:	b	14af0 <__assert_fail@plt+0x3b7c>
   14ccc:	mov	r1, #512	; 0x200
   14cd0:	b	14bec <__assert_fail@plt+0x3c78>
   14cd4:	mov	r2, #6
   14cd8:	add	r0, sp, #8
   14cdc:	b	14d00 <__assert_fail@plt+0x3d8c>
   14ce0:	mov	r2, #3
   14ce4:	b	14cd8 <__assert_fail@plt+0x3d64>
   14ce8:	mov	r2, #5
   14cec:	b	14cd8 <__assert_fail@plt+0x3d64>
   14cf0:	mov	r2, #4
   14cf4:	b	14cd8 <__assert_fail@plt+0x3d64>
   14cf8:	mov	r2, #8
   14cfc:	add	r0, sp, r2
   14d00:	bl	149b4 <__assert_fail@plt+0x3a40>
   14d04:	b	14bf4 <__assert_fail@plt+0x3c80>
   14d08:	mov	r0, #0
   14d0c:	b	14bf4 <__assert_fail@plt+0x3c80>
   14d10:	andeq	r6, r1, r4, ror r2
   14d14:	andeq	r6, r1, pc, ror r2
   14d18:	andeq	r6, r1, sp, lsl #5
   14d1c:	cmp	r1, #0
   14d20:	cmpne	r0, #0
   14d24:	moveq	r1, #1
   14d28:	moveq	r0, r1
   14d2c:	umull	r2, r3, r0, r1
   14d30:	adds	r3, r3, #0
   14d34:	movne	r3, #1
   14d38:	cmp	r2, #0
   14d3c:	blt	14d4c <__assert_fail@plt+0x3dd8>
   14d40:	cmp	r3, #0
   14d44:	bne	14d4c <__assert_fail@plt+0x3dd8>
   14d48:	b	10cf8 <calloc@plt>
   14d4c:	push	{r4, lr}
   14d50:	bl	10e90 <__errno_location@plt>
   14d54:	mov	r3, #12
   14d58:	str	r3, [r0]
   14d5c:	mov	r0, #0
   14d60:	pop	{r4, pc}
   14d64:	cmp	r0, #0
   14d68:	mov	r3, #0
   14d6c:	moveq	r0, #1
   14d70:	adds	r3, r3, #0
   14d74:	movne	r3, #1
   14d78:	cmp	r0, #0
   14d7c:	blt	14d8c <__assert_fail@plt+0x3e18>
   14d80:	cmp	r3, #0
   14d84:	bne	14d8c <__assert_fail@plt+0x3e18>
   14d88:	b	10e24 <malloc@plt>
   14d8c:	push	{r4, lr}
   14d90:	bl	10e90 <__errno_location@plt>
   14d94:	mov	r3, #12
   14d98:	str	r3, [r0]
   14d9c:	mov	r0, #0
   14da0:	pop	{r4, pc}
   14da4:	cmp	r0, #0
   14da8:	push	{r4, lr}
   14dac:	mov	r4, r1
   14db0:	bne	14dc0 <__assert_fail@plt+0x3e4c>
   14db4:	mov	r0, r1
   14db8:	pop	{r4, lr}
   14dbc:	b	14d64 <__assert_fail@plt+0x3df0>
   14dc0:	cmp	r1, #0
   14dc4:	bne	14dd4 <__assert_fail@plt+0x3e60>
   14dc8:	bl	14e70 <__assert_fail@plt+0x3efc>
   14dcc:	mov	r0, #0
   14dd0:	pop	{r4, pc}
   14dd4:	cmp	r1, #0
   14dd8:	blt	14de8 <__assert_fail@plt+0x3e74>
   14ddc:	mov	r3, #0
   14de0:	cmp	r3, r3
   14de4:	beq	14df8 <__assert_fail@plt+0x3e84>
   14de8:	bl	10e90 <__errno_location@plt>
   14dec:	mov	r3, #12
   14df0:	str	r3, [r0]
   14df4:	b	14dcc <__assert_fail@plt+0x3e58>
   14df8:	pop	{r4, lr}
   14dfc:	b	10db8 <realloc@plt>
   14e00:	push	{r4, r5, r6, lr}
   14e04:	mov	r4, r0
   14e08:	bl	10df4 <__fpending@plt>
   14e0c:	mov	r5, r0
   14e10:	mov	r0, r4
   14e14:	bl	10e00 <ferror_unlocked@plt>
   14e18:	mov	r6, r0
   14e1c:	mov	r0, r4
   14e20:	bl	1263c <__assert_fail@plt+0x16c8>
   14e24:	cmp	r6, #0
   14e28:	mov	r4, r0
   14e2c:	bne	14e58 <__assert_fail@plt+0x3ee4>
   14e30:	cmp	r0, #0
   14e34:	beq	14e50 <__assert_fail@plt+0x3edc>
   14e38:	cmp	r5, #0
   14e3c:	bne	14e68 <__assert_fail@plt+0x3ef4>
   14e40:	bl	10e90 <__errno_location@plt>
   14e44:	ldr	r4, [r0]
   14e48:	subs	r4, r4, #9
   14e4c:	mvnne	r4, #0
   14e50:	mov	r0, r4
   14e54:	pop	{r4, r5, r6, pc}
   14e58:	cmp	r0, #0
   14e5c:	bne	14e68 <__assert_fail@plt+0x3ef4>
   14e60:	bl	10e90 <__errno_location@plt>
   14e64:	str	r4, [r0]
   14e68:	mvn	r4, #0
   14e6c:	b	14e50 <__assert_fail@plt+0x3edc>
   14e70:	push	{r0, r1, r2, r4, r5, lr}
   14e74:	mov	r5, r0
   14e78:	bl	10e90 <__errno_location@plt>
   14e7c:	ldr	r3, [r0]
   14e80:	mov	r4, r0
   14e84:	str	r3, [sp]
   14e88:	str	r3, [sp, #4]
   14e8c:	mov	r3, #0
   14e90:	str	r3, [r0]
   14e94:	mov	r0, r5
   14e98:	bl	10d4c <free@plt>
   14e9c:	ldr	r3, [r4]
   14ea0:	add	r2, sp, #8
   14ea4:	cmp	r3, #0
   14ea8:	moveq	r3, #4
   14eac:	movne	r3, #0
   14eb0:	add	r3, r2, r3
   14eb4:	ldr	r3, [r3, #-8]
   14eb8:	str	r3, [r4]
   14ebc:	add	sp, sp, #12
   14ec0:	pop	{r4, r5, pc}
   14ec4:	push	{r4, lr}
   14ec8:	mov	r0, #14
   14ecc:	bl	10f14 <nl_langinfo@plt>
   14ed0:	ldr	r3, [pc, #24]	; 14ef0 <__assert_fail@plt+0x3f7c>
   14ed4:	cmp	r0, #0
   14ed8:	moveq	r0, r3
   14edc:	ldr	r3, [pc, #16]	; 14ef4 <__assert_fail@plt+0x3f80>
   14ee0:	ldrb	r2, [r0]
   14ee4:	cmp	r2, #0
   14ee8:	moveq	r0, r3
   14eec:	pop	{r4, pc}
   14ef0:	andeq	r5, r1, pc, lsr #25
   14ef4:			; <UNDEFINED> instruction: 0x000162b3
   14ef8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14efc:	subs	r5, r0, #0
   14f00:	addeq	r5, sp, #4
   14f04:	mov	r0, r5
   14f08:	mov	r7, r2
   14f0c:	mov	r6, r1
   14f10:	bl	10e0c <mbrtowc@plt>
   14f14:	cmp	r7, #0
   14f18:	cmnne	r0, #3
   14f1c:	mov	r4, r0
   14f20:	bls	14f3c <__assert_fail@plt+0x3fc8>
   14f24:	mov	r0, #0
   14f28:	bl	14f94 <__assert_fail@plt+0x4020>
   14f2c:	cmp	r0, #0
   14f30:	moveq	r4, #1
   14f34:	ldrbeq	r3, [r6]
   14f38:	streq	r3, [r5]
   14f3c:	mov	r0, r4
   14f40:	add	sp, sp, #12
   14f44:	pop	{r4, r5, r6, r7, pc}
   14f48:	push	{r4, r5, r6, lr}
   14f4c:	subs	r4, r2, #0
   14f50:	mov	r6, r0
   14f54:	mov	r5, r1
   14f58:	beq	14f70 <__assert_fail@plt+0x3ffc>
   14f5c:	mov	r1, r4
   14f60:	mvn	r0, #0
   14f64:	bl	15074 <__assert_fail@plt+0x4100>
   14f68:	cmp	r0, r5
   14f6c:	bcc	14f80 <__assert_fail@plt+0x400c>
   14f70:	mul	r1, r5, r4
   14f74:	mov	r0, r6
   14f78:	pop	{r4, r5, r6, lr}
   14f7c:	b	14da4 <__assert_fail@plt+0x3e30>
   14f80:	bl	10e90 <__errno_location@plt>
   14f84:	mov	r3, #12
   14f88:	str	r3, [r0]
   14f8c:	mov	r0, #0
   14f90:	pop	{r4, r5, r6, pc}
   14f94:	push	{lr}		; (str lr, [sp, #-4]!)
   14f98:	sub	sp, sp, #268	; 0x10c
   14f9c:	ldr	r2, [pc, #64]	; 14fe4 <__assert_fail@plt+0x4070>
   14fa0:	add	r1, sp, #4
   14fa4:	bl	14ff0 <__assert_fail@plt+0x407c>
   14fa8:	cmp	r0, #0
   14fac:	movne	r0, #0
   14fb0:	bne	14fdc <__assert_fail@plt+0x4068>
   14fb4:	ldr	r1, [pc, #44]	; 14fe8 <__assert_fail@plt+0x4074>
   14fb8:	add	r0, sp, #4
   14fbc:	bl	10d1c <strcmp@plt>
   14fc0:	cmp	r0, #0
   14fc4:	beq	14fdc <__assert_fail@plt+0x4068>
   14fc8:	ldr	r1, [pc, #28]	; 14fec <__assert_fail@plt+0x4078>
   14fcc:	add	r0, sp, #4
   14fd0:	bl	10d1c <strcmp@plt>
   14fd4:	adds	r0, r0, #0
   14fd8:	movne	r0, #1
   14fdc:	add	sp, sp, #268	; 0x10c
   14fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fe4:	andeq	r0, r0, r1, lsl #2
   14fe8:			; <UNDEFINED> instruction: 0x000162b9
   14fec:			; <UNDEFINED> instruction: 0x000162bb
   14ff0:	push	{r4, r5, r6, lr}
   14ff4:	mov	r5, r1
   14ff8:	mov	r1, #0
   14ffc:	mov	r4, r2
   15000:	bl	10efc <setlocale@plt>
   15004:	subs	r6, r0, #0
   15008:	bne	1501c <__assert_fail@plt+0x40a8>
   1500c:	cmp	r4, #0
   15010:	strbne	r6, [r5]
   15014:	mov	r0, #22
   15018:	pop	{r4, r5, r6, pc}
   1501c:	bl	10e78 <strlen@plt>
   15020:	cmp	r4, r0
   15024:	bls	15040 <__assert_fail@plt+0x40cc>
   15028:	add	r2, r0, #1
   1502c:	mov	r1, r6
   15030:	mov	r0, r5
   15034:	bl	10d64 <memcpy@plt>
   15038:	mov	r0, #0
   1503c:	pop	{r4, r5, r6, pc}
   15040:	cmp	r4, #0
   15044:	beq	15064 <__assert_fail@plt+0x40f0>
   15048:	sub	r4, r4, #1
   1504c:	mov	r2, r4
   15050:	mov	r1, r6
   15054:	mov	r0, r5
   15058:	bl	10d64 <memcpy@plt>
   1505c:	mov	r3, #0
   15060:	strb	r3, [r5, r4]
   15064:	mov	r0, #34	; 0x22
   15068:	pop	{r4, r5, r6, pc}
   1506c:	mov	r1, #0
   15070:	b	10efc <setlocale@plt>
   15074:	subs	r2, r1, #1
   15078:	bxeq	lr
   1507c:	bcc	15254 <__assert_fail@plt+0x42e0>
   15080:	cmp	r0, r1
   15084:	bls	15238 <__assert_fail@plt+0x42c4>
   15088:	tst	r1, r2
   1508c:	beq	15244 <__assert_fail@plt+0x42d0>
   15090:	clz	r3, r0
   15094:	clz	r2, r1
   15098:	sub	r3, r2, r3
   1509c:	rsbs	r3, r3, #31
   150a0:	addne	r3, r3, r3, lsl #1
   150a4:	mov	r2, #0
   150a8:	addne	pc, pc, r3, lsl #2
   150ac:	nop			; (mov r0, r0)
   150b0:	cmp	r0, r1, lsl #31
   150b4:	adc	r2, r2, r2
   150b8:	subcs	r0, r0, r1, lsl #31
   150bc:	cmp	r0, r1, lsl #30
   150c0:	adc	r2, r2, r2
   150c4:	subcs	r0, r0, r1, lsl #30
   150c8:	cmp	r0, r1, lsl #29
   150cc:	adc	r2, r2, r2
   150d0:	subcs	r0, r0, r1, lsl #29
   150d4:	cmp	r0, r1, lsl #28
   150d8:	adc	r2, r2, r2
   150dc:	subcs	r0, r0, r1, lsl #28
   150e0:	cmp	r0, r1, lsl #27
   150e4:	adc	r2, r2, r2
   150e8:	subcs	r0, r0, r1, lsl #27
   150ec:	cmp	r0, r1, lsl #26
   150f0:	adc	r2, r2, r2
   150f4:	subcs	r0, r0, r1, lsl #26
   150f8:	cmp	r0, r1, lsl #25
   150fc:	adc	r2, r2, r2
   15100:	subcs	r0, r0, r1, lsl #25
   15104:	cmp	r0, r1, lsl #24
   15108:	adc	r2, r2, r2
   1510c:	subcs	r0, r0, r1, lsl #24
   15110:	cmp	r0, r1, lsl #23
   15114:	adc	r2, r2, r2
   15118:	subcs	r0, r0, r1, lsl #23
   1511c:	cmp	r0, r1, lsl #22
   15120:	adc	r2, r2, r2
   15124:	subcs	r0, r0, r1, lsl #22
   15128:	cmp	r0, r1, lsl #21
   1512c:	adc	r2, r2, r2
   15130:	subcs	r0, r0, r1, lsl #21
   15134:	cmp	r0, r1, lsl #20
   15138:	adc	r2, r2, r2
   1513c:	subcs	r0, r0, r1, lsl #20
   15140:	cmp	r0, r1, lsl #19
   15144:	adc	r2, r2, r2
   15148:	subcs	r0, r0, r1, lsl #19
   1514c:	cmp	r0, r1, lsl #18
   15150:	adc	r2, r2, r2
   15154:	subcs	r0, r0, r1, lsl #18
   15158:	cmp	r0, r1, lsl #17
   1515c:	adc	r2, r2, r2
   15160:	subcs	r0, r0, r1, lsl #17
   15164:	cmp	r0, r1, lsl #16
   15168:	adc	r2, r2, r2
   1516c:	subcs	r0, r0, r1, lsl #16
   15170:	cmp	r0, r1, lsl #15
   15174:	adc	r2, r2, r2
   15178:	subcs	r0, r0, r1, lsl #15
   1517c:	cmp	r0, r1, lsl #14
   15180:	adc	r2, r2, r2
   15184:	subcs	r0, r0, r1, lsl #14
   15188:	cmp	r0, r1, lsl #13
   1518c:	adc	r2, r2, r2
   15190:	subcs	r0, r0, r1, lsl #13
   15194:	cmp	r0, r1, lsl #12
   15198:	adc	r2, r2, r2
   1519c:	subcs	r0, r0, r1, lsl #12
   151a0:	cmp	r0, r1, lsl #11
   151a4:	adc	r2, r2, r2
   151a8:	subcs	r0, r0, r1, lsl #11
   151ac:	cmp	r0, r1, lsl #10
   151b0:	adc	r2, r2, r2
   151b4:	subcs	r0, r0, r1, lsl #10
   151b8:	cmp	r0, r1, lsl #9
   151bc:	adc	r2, r2, r2
   151c0:	subcs	r0, r0, r1, lsl #9
   151c4:	cmp	r0, r1, lsl #8
   151c8:	adc	r2, r2, r2
   151cc:	subcs	r0, r0, r1, lsl #8
   151d0:	cmp	r0, r1, lsl #7
   151d4:	adc	r2, r2, r2
   151d8:	subcs	r0, r0, r1, lsl #7
   151dc:	cmp	r0, r1, lsl #6
   151e0:	adc	r2, r2, r2
   151e4:	subcs	r0, r0, r1, lsl #6
   151e8:	cmp	r0, r1, lsl #5
   151ec:	adc	r2, r2, r2
   151f0:	subcs	r0, r0, r1, lsl #5
   151f4:	cmp	r0, r1, lsl #4
   151f8:	adc	r2, r2, r2
   151fc:	subcs	r0, r0, r1, lsl #4
   15200:	cmp	r0, r1, lsl #3
   15204:	adc	r2, r2, r2
   15208:	subcs	r0, r0, r1, lsl #3
   1520c:	cmp	r0, r1, lsl #2
   15210:	adc	r2, r2, r2
   15214:	subcs	r0, r0, r1, lsl #2
   15218:	cmp	r0, r1, lsl #1
   1521c:	adc	r2, r2, r2
   15220:	subcs	r0, r0, r1, lsl #1
   15224:	cmp	r0, r1
   15228:	adc	r2, r2, r2
   1522c:	subcs	r0, r0, r1
   15230:	mov	r0, r2
   15234:	bx	lr
   15238:	moveq	r0, #1
   1523c:	movne	r0, #0
   15240:	bx	lr
   15244:	clz	r2, r1
   15248:	rsb	r2, r2, #31
   1524c:	lsr	r0, r0, r2
   15250:	bx	lr
   15254:	cmp	r0, #0
   15258:	mvnne	r0, #0
   1525c:	b	154fc <__assert_fail@plt+0x4588>
   15260:	cmp	r1, #0
   15264:	beq	15254 <__assert_fail@plt+0x42e0>
   15268:	push	{r0, r1, lr}
   1526c:	bl	15074 <__assert_fail@plt+0x4100>
   15270:	pop	{r1, r2, lr}
   15274:	mul	r3, r2, r0
   15278:	sub	r1, r1, r3
   1527c:	bx	lr
   15280:	cmp	r1, #0
   15284:	beq	15490 <__assert_fail@plt+0x451c>
   15288:	eor	ip, r0, r1
   1528c:	rsbmi	r1, r1, #0
   15290:	subs	r2, r1, #1
   15294:	beq	1545c <__assert_fail@plt+0x44e8>
   15298:	movs	r3, r0
   1529c:	rsbmi	r3, r0, #0
   152a0:	cmp	r3, r1
   152a4:	bls	15468 <__assert_fail@plt+0x44f4>
   152a8:	tst	r1, r2
   152ac:	beq	15478 <__assert_fail@plt+0x4504>
   152b0:	clz	r2, r3
   152b4:	clz	r0, r1
   152b8:	sub	r2, r0, r2
   152bc:	rsbs	r2, r2, #31
   152c0:	addne	r2, r2, r2, lsl #1
   152c4:	mov	r0, #0
   152c8:	addne	pc, pc, r2, lsl #2
   152cc:	nop			; (mov r0, r0)
   152d0:	cmp	r3, r1, lsl #31
   152d4:	adc	r0, r0, r0
   152d8:	subcs	r3, r3, r1, lsl #31
   152dc:	cmp	r3, r1, lsl #30
   152e0:	adc	r0, r0, r0
   152e4:	subcs	r3, r3, r1, lsl #30
   152e8:	cmp	r3, r1, lsl #29
   152ec:	adc	r0, r0, r0
   152f0:	subcs	r3, r3, r1, lsl #29
   152f4:	cmp	r3, r1, lsl #28
   152f8:	adc	r0, r0, r0
   152fc:	subcs	r3, r3, r1, lsl #28
   15300:	cmp	r3, r1, lsl #27
   15304:	adc	r0, r0, r0
   15308:	subcs	r3, r3, r1, lsl #27
   1530c:	cmp	r3, r1, lsl #26
   15310:	adc	r0, r0, r0
   15314:	subcs	r3, r3, r1, lsl #26
   15318:	cmp	r3, r1, lsl #25
   1531c:	adc	r0, r0, r0
   15320:	subcs	r3, r3, r1, lsl #25
   15324:	cmp	r3, r1, lsl #24
   15328:	adc	r0, r0, r0
   1532c:	subcs	r3, r3, r1, lsl #24
   15330:	cmp	r3, r1, lsl #23
   15334:	adc	r0, r0, r0
   15338:	subcs	r3, r3, r1, lsl #23
   1533c:	cmp	r3, r1, lsl #22
   15340:	adc	r0, r0, r0
   15344:	subcs	r3, r3, r1, lsl #22
   15348:	cmp	r3, r1, lsl #21
   1534c:	adc	r0, r0, r0
   15350:	subcs	r3, r3, r1, lsl #21
   15354:	cmp	r3, r1, lsl #20
   15358:	adc	r0, r0, r0
   1535c:	subcs	r3, r3, r1, lsl #20
   15360:	cmp	r3, r1, lsl #19
   15364:	adc	r0, r0, r0
   15368:	subcs	r3, r3, r1, lsl #19
   1536c:	cmp	r3, r1, lsl #18
   15370:	adc	r0, r0, r0
   15374:	subcs	r3, r3, r1, lsl #18
   15378:	cmp	r3, r1, lsl #17
   1537c:	adc	r0, r0, r0
   15380:	subcs	r3, r3, r1, lsl #17
   15384:	cmp	r3, r1, lsl #16
   15388:	adc	r0, r0, r0
   1538c:	subcs	r3, r3, r1, lsl #16
   15390:	cmp	r3, r1, lsl #15
   15394:	adc	r0, r0, r0
   15398:	subcs	r3, r3, r1, lsl #15
   1539c:	cmp	r3, r1, lsl #14
   153a0:	adc	r0, r0, r0
   153a4:	subcs	r3, r3, r1, lsl #14
   153a8:	cmp	r3, r1, lsl #13
   153ac:	adc	r0, r0, r0
   153b0:	subcs	r3, r3, r1, lsl #13
   153b4:	cmp	r3, r1, lsl #12
   153b8:	adc	r0, r0, r0
   153bc:	subcs	r3, r3, r1, lsl #12
   153c0:	cmp	r3, r1, lsl #11
   153c4:	adc	r0, r0, r0
   153c8:	subcs	r3, r3, r1, lsl #11
   153cc:	cmp	r3, r1, lsl #10
   153d0:	adc	r0, r0, r0
   153d4:	subcs	r3, r3, r1, lsl #10
   153d8:	cmp	r3, r1, lsl #9
   153dc:	adc	r0, r0, r0
   153e0:	subcs	r3, r3, r1, lsl #9
   153e4:	cmp	r3, r1, lsl #8
   153e8:	adc	r0, r0, r0
   153ec:	subcs	r3, r3, r1, lsl #8
   153f0:	cmp	r3, r1, lsl #7
   153f4:	adc	r0, r0, r0
   153f8:	subcs	r3, r3, r1, lsl #7
   153fc:	cmp	r3, r1, lsl #6
   15400:	adc	r0, r0, r0
   15404:	subcs	r3, r3, r1, lsl #6
   15408:	cmp	r3, r1, lsl #5
   1540c:	adc	r0, r0, r0
   15410:	subcs	r3, r3, r1, lsl #5
   15414:	cmp	r3, r1, lsl #4
   15418:	adc	r0, r0, r0
   1541c:	subcs	r3, r3, r1, lsl #4
   15420:	cmp	r3, r1, lsl #3
   15424:	adc	r0, r0, r0
   15428:	subcs	r3, r3, r1, lsl #3
   1542c:	cmp	r3, r1, lsl #2
   15430:	adc	r0, r0, r0
   15434:	subcs	r3, r3, r1, lsl #2
   15438:	cmp	r3, r1, lsl #1
   1543c:	adc	r0, r0, r0
   15440:	subcs	r3, r3, r1, lsl #1
   15444:	cmp	r3, r1
   15448:	adc	r0, r0, r0
   1544c:	subcs	r3, r3, r1
   15450:	cmp	ip, #0
   15454:	rsbmi	r0, r0, #0
   15458:	bx	lr
   1545c:	teq	ip, r0
   15460:	rsbmi	r0, r0, #0
   15464:	bx	lr
   15468:	movcc	r0, #0
   1546c:	asreq	r0, ip, #31
   15470:	orreq	r0, r0, #1
   15474:	bx	lr
   15478:	clz	r2, r1
   1547c:	rsb	r2, r2, #31
   15480:	cmp	ip, #0
   15484:	lsr	r0, r3, r2
   15488:	rsbmi	r0, r0, #0
   1548c:	bx	lr
   15490:	cmp	r0, #0
   15494:	mvngt	r0, #-2147483648	; 0x80000000
   15498:	movlt	r0, #-2147483648	; 0x80000000
   1549c:	b	154fc <__assert_fail@plt+0x4588>
   154a0:	cmp	r1, #0
   154a4:	beq	15490 <__assert_fail@plt+0x451c>
   154a8:	push	{r0, r1, lr}
   154ac:	bl	15288 <__assert_fail@plt+0x4314>
   154b0:	pop	{r1, r2, lr}
   154b4:	mul	r3, r2, r0
   154b8:	sub	r1, r1, r3
   154bc:	bx	lr
   154c0:	cmp	r3, #0
   154c4:	cmpeq	r2, #0
   154c8:	bne	154e0 <__assert_fail@plt+0x456c>
   154cc:	cmp	r1, #0
   154d0:	cmpeq	r0, #0
   154d4:	mvnne	r1, #0
   154d8:	mvnne	r0, #0
   154dc:	b	154fc <__assert_fail@plt+0x4588>
   154e0:	sub	sp, sp, #8
   154e4:	push	{sp, lr}
   154e8:	bl	1550c <__assert_fail@plt+0x4598>
   154ec:	ldr	lr, [sp, #4]
   154f0:	add	sp, sp, #8
   154f4:	pop	{r2, r3}
   154f8:	bx	lr
   154fc:	push	{r1, lr}
   15500:	mov	r0, #8
   15504:	bl	10d10 <raise@plt>
   15508:	pop	{r1, pc}
   1550c:	cmp	r1, r3
   15510:	push	{r4, r5, r6, r7, r8, r9, lr}
   15514:	cmpeq	r0, r2
   15518:	mov	r4, r0
   1551c:	mov	r5, r1
   15520:	ldr	r9, [sp, #28]
   15524:	movcc	r0, #0
   15528:	movcc	r1, #0
   1552c:	bcc	15624 <__assert_fail@plt+0x46b0>
   15530:	cmp	r3, #0
   15534:	clzeq	ip, r2
   15538:	clzne	ip, r3
   1553c:	addeq	ip, ip, #32
   15540:	cmp	r5, #0
   15544:	clzeq	r1, r4
   15548:	addeq	r1, r1, #32
   1554c:	clzne	r1, r5
   15550:	sub	ip, ip, r1
   15554:	sub	lr, ip, #32
   15558:	lsl	r7, r3, ip
   1555c:	rsb	r8, ip, #32
   15560:	orr	r7, r7, r2, lsl lr
   15564:	orr	r7, r7, r2, lsr r8
   15568:	lsl	r6, r2, ip
   1556c:	cmp	r5, r7
   15570:	cmpeq	r4, r6
   15574:	movcc	r0, #0
   15578:	movcc	r1, #0
   1557c:	bcc	15598 <__assert_fail@plt+0x4624>
   15580:	mov	r3, #1
   15584:	subs	r4, r4, r6
   15588:	lsl	r1, r3, lr
   1558c:	lsl	r0, r3, ip
   15590:	orr	r1, r1, r3, lsr r8
   15594:	sbc	r5, r5, r7
   15598:	cmp	ip, #0
   1559c:	beq	15624 <__assert_fail@plt+0x46b0>
   155a0:	lsrs	r3, r7, #1
   155a4:	rrx	r2, r6
   155a8:	mov	r6, ip
   155ac:	b	155d0 <__assert_fail@plt+0x465c>
   155b0:	subs	r4, r4, r2
   155b4:	sbc	r5, r5, r3
   155b8:	adds	r4, r4, r4
   155bc:	adc	r5, r5, r5
   155c0:	adds	r4, r4, #1
   155c4:	adc	r5, r5, #0
   155c8:	subs	r6, r6, #1
   155cc:	beq	155ec <__assert_fail@plt+0x4678>
   155d0:	cmp	r5, r3
   155d4:	cmpeq	r4, r2
   155d8:	bcs	155b0 <__assert_fail@plt+0x463c>
   155dc:	adds	r4, r4, r4
   155e0:	adc	r5, r5, r5
   155e4:	subs	r6, r6, #1
   155e8:	bne	155d0 <__assert_fail@plt+0x465c>
   155ec:	lsr	r6, r4, ip
   155f0:	lsr	r7, r5, ip
   155f4:	orr	r6, r6, r5, lsl r8
   155f8:	adds	r2, r0, r4
   155fc:	orr	r6, r6, r5, lsr lr
   15600:	adc	r3, r1, r5
   15604:	lsl	r1, r7, ip
   15608:	orr	r1, r1, r6, lsl lr
   1560c:	lsl	r0, r6, ip
   15610:	orr	r1, r1, r6, lsr r8
   15614:	subs	r0, r2, r0
   15618:	mov	r4, r6
   1561c:	mov	r5, r7
   15620:	sbc	r1, r3, r1
   15624:	cmp	r9, #0
   15628:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1562c:	strd	r4, [r9]
   15630:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15634:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15638:	mov	r7, r0
   1563c:	ldr	r6, [pc, #72]	; 1568c <__assert_fail@plt+0x4718>
   15640:	ldr	r5, [pc, #72]	; 15690 <__assert_fail@plt+0x471c>
   15644:	add	r6, pc, r6
   15648:	add	r5, pc, r5
   1564c:	sub	r6, r6, r5
   15650:	mov	r8, r1
   15654:	mov	r9, r2
   15658:	bl	10cd8 <calloc@plt-0x20>
   1565c:	asrs	r6, r6, #2
   15660:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15664:	mov	r4, #0
   15668:	add	r4, r4, #1
   1566c:	ldr	r3, [r5], #4
   15670:	mov	r2, r9
   15674:	mov	r1, r8
   15678:	mov	r0, r7
   1567c:	blx	r3
   15680:	cmp	r6, r4
   15684:	bne	15668 <__assert_fail@plt+0x46f4>
   15688:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1568c:	andeq	r1, r1, r4, asr #17
   15690:			; <UNDEFINED> instruction: 0x000118bc
   15694:	bx	lr
   15698:	ldr	r3, [pc, #12]	; 156ac <__assert_fail@plt+0x4738>
   1569c:	mov	r1, #0
   156a0:	add	r3, pc, r3
   156a4:	ldr	r2, [r3]
   156a8:	b	10e9c <__cxa_atexit@plt>
   156ac:	andeq	r1, r1, r4, asr #20

Disassembly of section .fini:

000156b0 <.fini>:
   156b0:	push	{r3, lr}
   156b4:	pop	{r3, pc}
