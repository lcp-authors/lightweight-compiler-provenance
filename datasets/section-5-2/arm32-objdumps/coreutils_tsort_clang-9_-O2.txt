
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d58 <.init>:
   10d58:	push	{r3, lr}
   10d5c:	bl	11000 <__assert_fail@plt+0x48>
   10d60:	pop	{r3, pc}

Disassembly of section .plt:

00010d64 <calloc@plt-0x14>:
   10d64:	push	{lr}		; (str lr, [sp, #-4]!)
   10d68:	ldr	lr, [pc, #4]	; 10d74 <calloc@plt-0x4>
   10d6c:	add	lr, pc, lr
   10d70:	ldr	pc, [lr, #8]!
   10d74:	andeq	r5, r1, ip, lsl #5

00010d78 <calloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #652]!	; 0x28c

00010d84 <fputs_unlocked@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #644]!	; 0x284

00010d90 <strcmp@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #636]!	; 0x27c

00010d9c <posix_fadvise64@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #628]!	; 0x274

00010da8 <fflush@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #620]!	; 0x26c

00010db4 <free@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #612]!	; 0x264

00010dc0 <_exit@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #604]!	; 0x25c

00010dcc <memcpy@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #596]!	; 0x254

00010dd8 <mbsinit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #588]!	; 0x24c

00010de4 <dcgettext@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #580]!	; 0x244

00010df0 <dup2@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #572]!	; 0x23c

00010dfc <realloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #564]!	; 0x234

00010e08 <textdomain@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #556]!	; 0x22c

00010e14 <iswprint@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #548]!	; 0x224

00010e20 <fwrite@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #540]!	; 0x21c

00010e2c <lseek64@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #532]!	; 0x214

00010e38 <__ctype_get_mb_cur_max@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #524]!	; 0x20c

00010e44 <__fpending@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #516]!	; 0x204

00010e50 <mbrtowc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #508]!	; 0x1fc

00010e5c <error@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #500]!	; 0x1f4

00010e68 <open64@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #492]!	; 0x1ec

00010e74 <puts@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e80 <malloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #476]!	; 0x1dc

00010e8c <__libc_start_main@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #468]!	; 0x1d4

00010e98 <__freading@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ea4 <__gmon_start__@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #452]!	; 0x1c4

00010eb0 <freopen64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #444]!	; 0x1bc

00010ebc <getopt_long@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ec8 <__ctype_b_loc@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ed4 <exit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ee0 <bcmp@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #412]!	; 0x19c

00010eec <strlen@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #404]!	; 0x194

00010ef8 <__errno_location@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #396]!	; 0x18c

00010f04 <__cxa_atexit@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #388]!	; 0x184

00010f10 <memset@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #380]!	; 0x17c

00010f1c <__printf_chk@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #372]!	; 0x174

00010f28 <fileno@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #364]!	; 0x16c

00010f34 <__fprintf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #356]!	; 0x164

00010f40 <fclose@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #348]!	; 0x15c

00010f4c <fseeko64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #340]!	; 0x154

00010f58 <__uflow@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #332]!	; 0x14c

00010f64 <setlocale@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #324]!	; 0x144

00010f70 <strrchr@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #316]!	; 0x13c

00010f7c <nl_langinfo@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #308]!	; 0x134

00010f88 <bindtextdomain@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #300]!	; 0x12c

00010f94 <strncmp@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #292]!	; 0x124

00010fa0 <abort@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #284]!	; 0x11c

00010fac <close@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #276]!	; 0x114

00010fb8 <__assert_fail@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #268]!	; 0x10c

Disassembly of section .text:

00010fc4 <.text>:
   10fc4:	mov	fp, #0
   10fc8:	mov	lr, #0
   10fcc:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd0:	mov	r2, sp
   10fd4:	push	{r2}		; (str r2, [sp, #-4]!)
   10fd8:	push	{r0}		; (str r0, [sp, #-4]!)
   10fdc:	ldr	ip, [pc, #16]	; 10ff4 <__assert_fail@plt+0x3c>
   10fe0:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe4:	ldr	r0, [pc, #12]	; 10ff8 <__assert_fail@plt+0x40>
   10fe8:	ldr	r3, [pc, #12]	; 10ffc <__assert_fail@plt+0x44>
   10fec:	bl	10e8c <__libc_start_main@plt>
   10ff0:	bl	10fa0 <abort@plt>
   10ff4:	andeq	r5, r1, ip, lsl r4
   10ff8:	andeq	r1, r1, r4, lsl r3
   10ffc:			; <UNDEFINED> instruction: 0x000153bc
   11000:	ldr	r3, [pc, #20]	; 1101c <__assert_fail@plt+0x64>
   11004:	ldr	r2, [pc, #20]	; 11020 <__assert_fail@plt+0x68>
   11008:	add	r3, pc, r3
   1100c:	ldr	r2, [r3, r2]
   11010:	cmp	r2, #0
   11014:	bxeq	lr
   11018:	b	10ea4 <__gmon_start__@plt>
   1101c:	strdeq	r4, [r1], -r0
   11020:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11024:	ldr	r0, [pc, #24]	; 11044 <__assert_fail@plt+0x8c>
   11028:	ldr	r3, [pc, #24]	; 11048 <__assert_fail@plt+0x90>
   1102c:	cmp	r3, r0
   11030:	bxeq	lr
   11034:	ldr	r3, [pc, #16]	; 1104c <__assert_fail@plt+0x94>
   11038:	cmp	r3, #0
   1103c:	bxeq	lr
   11040:	bx	r3
   11044:	andeq	r6, r2, r8, lsr #2
   11048:	andeq	r6, r2, r8, lsr #2
   1104c:	andeq	r0, r0, r0
   11050:	ldr	r0, [pc, #36]	; 1107c <__assert_fail@plt+0xc4>
   11054:	ldr	r1, [pc, #36]	; 11080 <__assert_fail@plt+0xc8>
   11058:	sub	r1, r1, r0
   1105c:	asr	r1, r1, #2
   11060:	add	r1, r1, r1, lsr #31
   11064:	asrs	r1, r1, #1
   11068:	bxeq	lr
   1106c:	ldr	r3, [pc, #16]	; 11084 <__assert_fail@plt+0xcc>
   11070:	cmp	r3, #0
   11074:	bxeq	lr
   11078:	bx	r3
   1107c:	andeq	r6, r2, r8, lsr #2
   11080:	andeq	r6, r2, r8, lsr #2
   11084:	andeq	r0, r0, r0
   11088:	push	{r4, lr}
   1108c:	ldr	r4, [pc, #24]	; 110ac <__assert_fail@plt+0xf4>
   11090:	ldrb	r3, [r4]
   11094:	cmp	r3, #0
   11098:	popne	{r4, pc}
   1109c:	bl	11024 <__assert_fail@plt+0x6c>
   110a0:	mov	r3, #1
   110a4:	strb	r3, [r4]
   110a8:	pop	{r4, pc}
   110ac:	andeq	r6, r2, ip, asr #2
   110b0:	b	11050 <__assert_fail@plt+0x98>
   110b4:	push	{fp, lr}
   110b8:	mov	fp, sp
   110bc:	sub	sp, sp, #56	; 0x38
   110c0:	mov	r4, r0
   110c4:	cmp	r0, #0
   110c8:	bne	112d0 <__assert_fail@plt+0x318>
   110cc:	movw	r1, #21611	; 0x546b
   110d0:	mov	r0, #0
   110d4:	mov	r2, #5
   110d8:	movt	r1, #1
   110dc:	bl	10de4 <dcgettext@plt>
   110e0:	mov	r1, r0
   110e4:	movw	r0, #24936	; 0x6168
   110e8:	movt	r0, #2
   110ec:	ldr	r2, [r0]
   110f0:	mov	r0, #1
   110f4:	bl	10f1c <__printf_chk@plt>
   110f8:	movw	r1, #21885	; 0x557d
   110fc:	mov	r0, #0
   11100:	mov	r2, #5
   11104:	movt	r1, #1
   11108:	bl	10de4 <dcgettext@plt>
   1110c:	movw	r7, #24900	; 0x6144
   11110:	movt	r7, #2
   11114:	ldr	r1, [r7]
   11118:	bl	10d84 <fputs_unlocked@plt>
   1111c:	movw	r1, #22254	; 0x56ee
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10de4 <dcgettext@plt>
   11130:	ldr	r1, [r7]
   11134:	bl	10d84 <fputs_unlocked@plt>
   11138:	movw	r1, #21711	; 0x54cf
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	movt	r1, #1
   11148:	bl	10de4 <dcgettext@plt>
   1114c:	ldr	r1, [r7]
   11150:	bl	10d84 <fputs_unlocked@plt>
   11154:	movw	r1, #21756	; 0x54fc
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10de4 <dcgettext@plt>
   11168:	ldr	r1, [r7]
   1116c:	bl	10d84 <fputs_unlocked@plt>
   11170:	movw	r0, #22552	; 0x5818
   11174:	mov	r2, #48	; 0x30
   11178:	mov	r6, sp
   1117c:	movw	r5, #21810	; 0x5532
   11180:	movt	r0, #1
   11184:	movt	r5, #1
   11188:	add	r1, r0, #32
   1118c:	add	r3, r0, #16
   11190:	vld1.64	{d18-d19}, [r0], r2
   11194:	vld1.64	{d16-d17}, [r1]
   11198:	vld1.64	{d20-d21}, [r3]
   1119c:	vldr	d22, [r0]
   111a0:	add	r1, r6, #32
   111a4:	add	r0, r6, #16
   111a8:	vst1.64	{d16-d17}, [r1]
   111ac:	movw	r1, #21941	; 0x55b5
   111b0:	vst1.64	{d20-d21}, [r0]
   111b4:	mov	r0, r6
   111b8:	movt	r1, #1
   111bc:	vst1.64	{d18-d19}, [r0], r2
   111c0:	vstr	d22, [r0]
   111c4:	mov	r0, r5
   111c8:	bl	10d90 <strcmp@plt>
   111cc:	cmp	r0, #0
   111d0:	ldrne	r1, [r6, #8]!
   111d4:	cmpne	r1, #0
   111d8:	bne	111c4 <__assert_fail@plt+0x20c>
   111dc:	movw	r1, #22036	; 0x5614
   111e0:	ldr	r6, [r6, #4]
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	movt	r1, #1
   111f0:	bl	10de4 <dcgettext@plt>
   111f4:	movw	r2, #21840	; 0x5550
   111f8:	movw	r3, #22059	; 0x562b
   111fc:	mov	r1, r0
   11200:	mov	r0, #1
   11204:	movt	r2, #1
   11208:	movt	r3, #1
   1120c:	bl	10f1c <__printf_chk@plt>
   11210:	cmp	r6, #0
   11214:	mov	r0, #5
   11218:	mov	r1, #0
   1121c:	moveq	r6, r5
   11220:	bl	10f64 <setlocale@plt>
   11224:	cmp	r0, #0
   11228:	beq	11260 <__assert_fail@plt+0x2a8>
   1122c:	movw	r1, #22099	; 0x5653
   11230:	mov	r2, #3
   11234:	movt	r1, #1
   11238:	bl	10f94 <strncmp@plt>
   1123c:	cmp	r0, #0
   11240:	beq	11260 <__assert_fail@plt+0x2a8>
   11244:	movw	r1, #22103	; 0x5657
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10de4 <dcgettext@plt>
   11258:	ldr	r1, [r7]
   1125c:	bl	10d84 <fputs_unlocked@plt>
   11260:	movw	r1, #22174	; 0x569e
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10de4 <dcgettext@plt>
   11274:	movw	r2, #22059	; 0x562b
   11278:	mov	r1, r0
   1127c:	mov	r0, #1
   11280:	mov	r3, r5
   11284:	movt	r2, #1
   11288:	bl	10f1c <__printf_chk@plt>
   1128c:	movw	r1, #22201	; 0x56b9
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10de4 <dcgettext@plt>
   112a0:	mov	r1, r0
   112a4:	movw	r0, #21969	; 0x55d1
   112a8:	movw	r3, #22255	; 0x56ef
   112ac:	cmp	r6, r5
   112b0:	mov	r2, r6
   112b4:	movt	r0, #1
   112b8:	movt	r3, #1
   112bc:	moveq	r3, r0
   112c0:	mov	r0, #1
   112c4:	bl	10f1c <__printf_chk@plt>
   112c8:	mov	r0, r4
   112cc:	bl	10ed4 <exit@plt>
   112d0:	movw	r0, #24888	; 0x6138
   112d4:	movw	r1, #21572	; 0x5444
   112d8:	mov	r2, #5
   112dc:	movt	r0, #2
   112e0:	movt	r1, #1
   112e4:	ldr	r5, [r0]
   112e8:	mov	r0, #0
   112ec:	bl	10de4 <dcgettext@plt>
   112f0:	mov	r2, r0
   112f4:	movw	r0, #24936	; 0x6168
   112f8:	mov	r1, #1
   112fc:	movt	r0, #2
   11300:	ldr	r3, [r0]
   11304:	mov	r0, r5
   11308:	bl	10f34 <__fprintf_chk@plt>
   1130c:	mov	r0, r4
   11310:	bl	10ed4 <exit@plt>
   11314:	push	{fp, lr}
   11318:	mov	fp, sp
   1131c:	sub	sp, sp, #24
   11320:	mov	r5, r0
   11324:	ldr	r0, [r1]
   11328:	mov	r4, r1
   1132c:	bl	123a8 <__assert_fail@plt+0x13f0>
   11330:	movw	r1, #22255	; 0x56ef
   11334:	mov	r0, #6
   11338:	movt	r1, #1
   1133c:	bl	10f64 <setlocale@plt>
   11340:	movw	r6, #21844	; 0x5554
   11344:	movw	r1, #21816	; 0x5538
   11348:	movt	r6, #1
   1134c:	movt	r1, #1
   11350:	mov	r0, r6
   11354:	bl	10f88 <bindtextdomain@plt>
   11358:	mov	r0, r6
   1135c:	bl	10e08 <textdomain@plt>
   11360:	movw	r0, #7460	; 0x1d24
   11364:	movt	r0, #1
   11368:	bl	15420 <__assert_fail@plt+0x4468>
   1136c:	movw	r0, #24800	; 0x60e0
   11370:	movw	r2, #21854	; 0x555e
   11374:	movw	r3, #4276	; 0x10b4
   11378:	mov	r6, #1
   1137c:	mov	r1, #0
   11380:	movt	r0, #2
   11384:	movt	r2, #1
   11388:	movt	r3, #1
   1138c:	ldr	r0, [r0]
   11390:	stm	sp, {r0, r6}
   11394:	str	r3, [sp, #8]
   11398:	movw	r3, #21840	; 0x5550
   1139c:	str	r2, [sp, #12]
   113a0:	movw	r2, #21810	; 0x5532
   113a4:	str	r1, [sp, #16]
   113a8:	mov	r0, r5
   113ac:	mov	r1, r4
   113b0:	movt	r2, #1
   113b4:	movt	r3, #1
   113b8:	bl	122e4 <__assert_fail@plt+0x132c>
   113bc:	movw	r6, #24880	; 0x6130
   113c0:	movt	r6, #2
   113c4:	ldr	r0, [r6]
   113c8:	sub	r1, r5, r0
   113cc:	cmp	r1, #2
   113d0:	blt	11418 <__assert_fail@plt+0x460>
   113d4:	movw	r1, #21868	; 0x556c
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	movt	r1, #1
   113e4:	bl	10de4 <dcgettext@plt>
   113e8:	mov	r5, r0
   113ec:	ldr	r0, [r6]
   113f0:	add	r0, r4, r0, lsl #2
   113f4:	ldr	r0, [r0, #4]
   113f8:	bl	13ffc <__assert_fail@plt+0x3044>
   113fc:	mov	r3, r0
   11400:	mov	r0, #0
   11404:	mov	r1, #0
   11408:	mov	r2, r5
   1140c:	bl	10e5c <error@plt>
   11410:	mov	r0, #1
   11414:	bl	110b4 <__assert_fail@plt+0xfc>
   11418:	cmp	r0, r5
   1141c:	bne	1142c <__assert_fail@plt+0x474>
   11420:	movw	r0, #22782	; 0x58fe
   11424:	movt	r0, #1
   11428:	bl	11434 <__assert_fail@plt+0x47c>
   1142c:	ldr	r0, [r4, r0, lsl #2]
   11430:	bl	11434 <__assert_fail@plt+0x47c>
   11434:	push	{fp, lr}
   11438:	mov	fp, sp
   1143c:	sub	sp, sp, #40	; 0x28
   11440:	movw	r1, #22782	; 0x58fe
   11444:	mov	r9, r0
   11448:	movt	r1, #1
   1144c:	bl	10d90 <strcmp@plt>
   11450:	mov	r4, r0
   11454:	mov	r0, #28
   11458:	bl	14ecc <__assert_fail@plt+0x3f14>
   1145c:	str	r4, [sp, #16]
   11460:	cmp	r4, #0
   11464:	movw	r4, #24896	; 0x6140
   11468:	mov	sl, r0
   1146c:	movt	r4, #2
   11470:	beq	11490 <__assert_fail@plt+0x4d8>
   11474:	ldr	r2, [r4]
   11478:	movw	r1, #22633	; 0x5869
   1147c:	mov	r0, r9
   11480:	movt	r1, #1
   11484:	bl	11f44 <__assert_fail@plt+0xf8c>
   11488:	cmp	r0, #0
   1148c:	beq	11a6c <__assert_fail@plt+0xab4>
   11490:	ldr	r0, [r4]
   11494:	mov	r1, #2
   11498:	bl	11e10 <__assert_fail@plt+0xe58>
   1149c:	sub	r6, fp, #8
   114a0:	mov	r0, r6
   114a4:	bl	14148 <__assert_fail@plt+0x3190>
   114a8:	movw	r5, #22252	; 0x56ec
   114ac:	mov	r0, #0
   114b0:	str	r9, [fp, #-12]
   114b4:	movt	r5, #1
   114b8:	mov	r7, r0
   114bc:	ldr	r0, [r4]
   114c0:	mov	r1, r5
   114c4:	mov	r2, #3
   114c8:	mov	r3, r6
   114cc:	bl	14158 <__assert_fail@plt+0x31a0>
   114d0:	cmn	r0, #1
   114d4:	beq	1182c <__assert_fail@plt+0x874>
   114d8:	cmp	r0, #0
   114dc:	str	r7, [fp, #-16]
   114e0:	beq	11a84 <__assert_fail@plt+0xacc>
   114e4:	ldr	r5, [sl, #8]
   114e8:	ldr	r7, [fp, #-4]
   114ec:	cmp	r5, #0
   114f0:	beq	1155c <__assert_fail@plt+0x5a4>
   114f4:	cmp	r7, #0
   114f8:	str	sl, [sp, #20]
   114fc:	ldrne	r1, [r5]
   11500:	cmpne	r1, #0
   11504:	beq	119f4 <__assert_fail@plt+0xa3c>
   11508:	ldr	r6, [sp, #20]
   1150c:	mov	sl, r5
   11510:	mov	r0, r7
   11514:	bl	10d90 <strcmp@plt>
   11518:	cmp	r0, #0
   1151c:	beq	11584 <__assert_fail@plt+0x5cc>
   11520:	mov	r4, r0
   11524:	mov	r0, #8
   11528:	movwmi	r0, #4
   1152c:	ldr	r0, [r5, r0]
   11530:	cmp	r0, #0
   11534:	beq	115f4 <__assert_fail@plt+0x63c>
   11538:	ldrb	r1, [r0, #12]
   1153c:	cmp	r1, #0
   11540:	ldr	r1, [r0]
   11544:	movne	r6, r5
   11548:	movne	sl, r0
   1154c:	mov	r5, r0
   11550:	cmp	r1, #0
   11554:	bne	11510 <__assert_fail@plt+0x558>
   11558:	b	119f4 <__assert_fail@plt+0xa3c>
   1155c:	mov	r0, #28
   11560:	bl	14ecc <__assert_fail@plt+0x3f14>
   11564:	mov	r8, r0
   11568:	cmp	r7, #0
   1156c:	beq	1157c <__assert_fail@plt+0x5c4>
   11570:	mov	r0, r7
   11574:	bl	14fd8 <__assert_fail@plt+0x4020>
   11578:	str	r0, [r8]
   1157c:	str	r8, [sl, #8]
   11580:	b	11598 <__assert_fail@plt+0x5e0>
   11584:	mov	r8, r5
   11588:	ldr	sl, [sp, #20]
   1158c:	movw	r4, #24896	; 0x6140
   11590:	sub	r6, fp, #8
   11594:	movt	r4, #2
   11598:	ldr	r7, [fp, #-16]
   1159c:	movw	r5, #22252	; 0x56ec
   115a0:	movt	r5, #1
   115a4:	cmp	r7, #0
   115a8:	mov	r0, r8
   115ac:	beq	114b8 <__assert_fail@plt+0x500>
   115b0:	ldr	r1, [r8]
   115b4:	ldr	r0, [r7]
   115b8:	bl	10d90 <strcmp@plt>
   115bc:	cmp	r0, #0
   115c0:	mov	r0, #0
   115c4:	beq	114b8 <__assert_fail@plt+0x500>
   115c8:	ldr	r0, [r8, #16]
   115cc:	add	r0, r0, #1
   115d0:	str	r0, [r8, #16]
   115d4:	mov	r0, #8
   115d8:	bl	14ad4 <__assert_fail@plt+0x3b1c>
   115dc:	str	r8, [r0]
   115e0:	ldr	r1, [r7, #24]
   115e4:	str	r1, [r0, #4]
   115e8:	str	r0, [r7, #24]
   115ec:	mov	r0, #0
   115f0:	b	114b8 <__assert_fail@plt+0x500>
   115f4:	mov	r0, #28
   115f8:	add	r9, r5, #8
   115fc:	bl	14ecc <__assert_fail@plt+0x3f14>
   11600:	mov	r8, r0
   11604:	mov	r0, r7
   11608:	bl	14fd8 <__assert_fail@plt+0x4020>
   1160c:	cmp	r4, #0
   11610:	str	r0, [r8]
   11614:	addmi	r9, r5, #4
   11618:	cmp	sl, #0
   1161c:	str	r8, [r9]
   11620:	ldrne	r1, [sl]
   11624:	cmpne	r1, #0
   11628:	beq	11a3c <__assert_fail@plt+0xa84>
   1162c:	mov	r0, r7
   11630:	bl	10d90 <strcmp@plt>
   11634:	cmp	r0, #0
   11638:	beq	11a3c <__assert_fail@plt+0xa84>
   1163c:	mov	r4, r0
   11640:	mov	r0, #1
   11644:	mvnmi	r0, #0
   11648:	ldr	r9, [fp, #-12]
   1164c:	str	r0, [sp, #12]
   11650:	mov	r0, #8
   11654:	movwmi	r0, #4
   11658:	ldr	r0, [sl, r0]
   1165c:	cmp	r0, r8
   11660:	str	r0, [sp, #8]
   11664:	beq	116bc <__assert_fail@plt+0x704>
   11668:	ldr	r5, [sp, #8]
   1166c:	cmp	r5, #0
   11670:	ldrne	r1, [r5]
   11674:	cmpne	r1, #0
   11678:	beq	11a54 <__assert_fail@plt+0xa9c>
   1167c:	mov	r0, r7
   11680:	bl	10d90 <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	beq	11a54 <__assert_fail@plt+0xa9c>
   1168c:	cmn	r0, #1
   11690:	bgt	116a4 <__assert_fail@plt+0x6ec>
   11694:	mov	r0, #255	; 0xff
   11698:	strb	r0, [r5, #12]
   1169c:	add	r0, r5, #4
   116a0:	b	116b0 <__assert_fail@plt+0x6f8>
   116a4:	mov	r0, #1
   116a8:	strb	r0, [r5, #12]
   116ac:	add	r0, r5, #8
   116b0:	ldr	r5, [r0]
   116b4:	cmp	r5, r8
   116b8:	bne	1166c <__assert_fail@plt+0x6b4>
   116bc:	mov	r0, sl
   116c0:	ldr	r3, [sp, #12]
   116c4:	ldrsb	r2, [r0, #12]!
   116c8:	uxtb	r1, r2
   116cc:	cmp	r1, #0
   116d0:	cmnne	r2, r3
   116d4:	bne	116e4 <__assert_fail@plt+0x72c>
   116d8:	add	r1, r1, r3
   116dc:	strb	r1, [r0]
   116e0:	b	11588 <__assert_fail@plt+0x5d0>
   116e4:	ldr	r5, [sp, #8]
   116e8:	ldr	r2, [sp, #12]
   116ec:	add	r3, sl, #8
   116f0:	add	lr, sl, #4
   116f4:	mov	r1, r5
   116f8:	ldrsb	r7, [r1, #12]!
   116fc:	cmp	r2, r7
   11700:	bne	11750 <__assert_fail@plt+0x798>
   11704:	cmp	r4, #0
   11708:	add	r1, r5, #4
   1170c:	ldr	r7, [fp, #-16]
   11710:	mov	ip, #0
   11714:	mov	r2, r0
   11718:	addmi	r1, r5, #8
   1171c:	movmi	r3, lr
   11720:	cmp	r4, #0
   11724:	movw	r4, #24896	; 0x6140
   11728:	ldr	r1, [r1]
   1172c:	movt	r4, #2
   11730:	str	r1, [r3]
   11734:	mov	r1, #4
   11738:	movwmi	r1, #8
   1173c:	str	sl, [r5, r1]
   11740:	strb	ip, [r5, #12]
   11744:	movw	r5, #22252	; 0x56ec
   11748:	movt	r5, #1
   1174c:	b	11808 <__assert_fail@plt+0x850>
   11750:	cmn	r4, #1
   11754:	mov	ip, #0
   11758:	bgt	11778 <__assert_fail@plt+0x7c0>
   1175c:	ldr	r3, [r5, #8]
   11760:	ldr	r7, [r3, #4]
   11764:	mov	r2, r3
   11768:	str	r7, [r5, #8]
   1176c:	str	r5, [r3, #4]
   11770:	add	r7, r3, #8
   11774:	b	11798 <__assert_fail@plt+0x7e0>
   11778:	mov	r7, r5
   1177c:	ldr	r5, [r5, #4]
   11780:	mov	lr, r3
   11784:	ldr	r2, [r5, #8]
   11788:	str	r2, [r7, #4]
   1178c:	str	r7, [r5, #8]
   11790:	add	r7, r5, #4
   11794:	mov	r2, r5
   11798:	ldr	r3, [sp, #12]
   1179c:	str	r2, [sp, #8]
   117a0:	movw	r4, #24896	; 0x6140
   117a4:	movt	r4, #2
   117a8:	rsb	r5, r3, #0
   117ac:	str	r5, [sp, #4]
   117b0:	ldr	r5, [r7]
   117b4:	str	r5, [lr]
   117b8:	str	sl, [r7]
   117bc:	strb	ip, [sl, #12]
   117c0:	strb	ip, [r1]
   117c4:	ldrsb	r7, [r2, #12]!
   117c8:	cmp	r3, r7
   117cc:	bne	117ec <__assert_fail@plt+0x834>
   117d0:	ldr	lr, [sp, #4]
   117d4:	ldr	r7, [fp, #-16]
   117d8:	movw	r5, #22252	; 0x56ec
   117dc:	mov	r1, r0
   117e0:	movt	r5, #1
   117e4:	strb	lr, [r1]
   117e8:	b	11808 <__assert_fail@plt+0x850>
   117ec:	ldr	r0, [sp, #4]
   117f0:	ldr	lr, [sp, #12]
   117f4:	movw	r5, #22252	; 0x56ec
   117f8:	movt	r5, #1
   117fc:	cmp	r7, r0
   11800:	ldr	r7, [fp, #-16]
   11804:	strbeq	lr, [r1]
   11808:	strb	ip, [r2]
   1180c:	ldr	r0, [r6, #8]
   11810:	cmp	sl, r0
   11814:	ldr	r0, [sp, #8]
   11818:	ldr	sl, [sp, #20]
   1181c:	streq	r0, [r6, #8]
   11820:	strne	r0, [r6, #4]
   11824:	sub	r6, fp, #8
   11828:	b	115a4 <__assert_fail@plt+0x5ec>
   1182c:	cmp	r7, #0
   11830:	bne	11aa4 <__assert_fail@plt+0xaec>
   11834:	ldr	r5, [sl, #8]
   11838:	cmp	r5, #0
   1183c:	beq	11850 <__assert_fail@plt+0x898>
   11840:	movw	r1, #6892	; 0x1aec
   11844:	mov	r0, r5
   11848:	movt	r1, #1
   1184c:	bl	11c70 <__assert_fail@plt+0xcb8>
   11850:	movw	r6, #24912	; 0x6150
   11854:	movt	r6, #2
   11858:	ldr	r0, [r6]
   1185c:	cmp	r0, #0
   11860:	beq	11ae0 <__assert_fail@plt+0xb28>
   11864:	movw	sl, #24916	; 0x6154
   11868:	movw	r9, #24924	; 0x615c
   1186c:	movw	r7, #7000	; 0x1b58
   11870:	movw	r4, #24920	; 0x6158
   11874:	mov	r0, #1
   11878:	movt	sl, #2
   1187c:	movt	r9, #2
   11880:	movt	r7, #1
   11884:	movt	r4, #2
   11888:	str	r0, [fp, #-16]
   1188c:	cmp	r5, #0
   11890:	beq	118a4 <__assert_fail@plt+0x8ec>
   11894:	movw	r1, #6920	; 0x1b08
   11898:	mov	r0, r5
   1189c:	movt	r1, #1
   118a0:	bl	11c70 <__assert_fail@plt+0xcb8>
   118a4:	ldr	r1, [sl]
   118a8:	cmp	r1, #0
   118ac:	bne	118c8 <__assert_fail@plt+0x910>
   118b0:	ldr	r0, [r6]
   118b4:	b	1192c <__assert_fail@plt+0x974>
   118b8:	ldr	r1, [r1, #20]
   118bc:	cmp	r1, #0
   118c0:	str	r1, [sl]
   118c4:	beq	1192c <__assert_fail@plt+0x974>
   118c8:	ldr	r0, [r1]
   118cc:	ldr	r8, [r1, #24]
   118d0:	bl	10e74 <puts@plt>
   118d4:	ldr	r1, [sl]
   118d8:	mov	r0, #1
   118dc:	strb	r0, [r1, #13]
   118e0:	ldr	r0, [r6]
   118e4:	sub	r0, r0, #1
   118e8:	str	r0, [r6]
   118ec:	cmp	r8, #0
   118f0:	bne	11904 <__assert_fail@plt+0x94c>
   118f4:	b	118b8 <__assert_fail@plt+0x900>
   118f8:	ldr	r8, [r8, #4]
   118fc:	cmp	r8, #0
   11900:	beq	118b8 <__assert_fail@plt+0x900>
   11904:	ldr	r2, [r8]
   11908:	ldr	r3, [r2, #16]
   1190c:	subs	r3, r3, #1
   11910:	str	r3, [r2, #16]
   11914:	bne	118f8 <__assert_fail@plt+0x940>
   11918:	ldr	r3, [r4]
   1191c:	str	r2, [r3, #20]
   11920:	ldr	r2, [r8]
   11924:	str	r2, [r4]
   11928:	b	118f8 <__assert_fail@plt+0x940>
   1192c:	cmp	r0, #0
   11930:	beq	119a0 <__assert_fail@plt+0x9e8>
   11934:	movw	r1, #22345	; 0x5749
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	movt	r1, #1
   11944:	bl	10de4 <dcgettext@plt>
   11948:	ldr	r2, [fp, #-12]
   1194c:	mov	r8, r0
   11950:	mov	r0, #0
   11954:	mov	r1, #3
   11958:	bl	13d50 <__assert_fail@plt+0x2d98>
   1195c:	mov	r3, r0
   11960:	mov	r0, #0
   11964:	mov	r1, #0
   11968:	mov	r2, r8
   1196c:	bl	10e5c <error@plt>
   11970:	cmp	r5, #0
   11974:	movne	r0, r5
   11978:	movne	r1, r7
   1197c:	blne	11c70 <__assert_fail@plt+0xcb8>
   11980:	ldr	r0, [r9]
   11984:	cmp	r0, #0
   11988:	bne	11970 <__assert_fail@plt+0x9b8>
   1198c:	ldr	r0, [r6]
   11990:	mov	r1, #0
   11994:	str	r1, [fp, #-16]
   11998:	cmp	r0, #0
   1199c:	bne	1188c <__assert_fail@plt+0x8d4>
   119a0:	movw	r0, #24896	; 0x6140
   119a4:	movt	r0, #2
   119a8:	ldr	r0, [r0]
   119ac:	bl	11e4c <__assert_fail@plt+0xe94>
   119b0:	cmp	r0, #0
   119b4:	bne	119c8 <__assert_fail@plt+0xa10>
   119b8:	ldr	r1, [fp, #-16]
   119bc:	mov	r0, #1
   119c0:	bic	r0, r0, r1
   119c4:	bl	10ed4 <exit@plt>
   119c8:	bl	10ef8 <__errno_location@plt>
   119cc:	ldr	r4, [r0]
   119d0:	ldr	r0, [sp, #16]
   119d4:	cmp	r0, #0
   119d8:	bne	11a14 <__assert_fail@plt+0xa5c>
   119dc:	movw	r1, #22372	; 0x5764
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	movt	r1, #1
   119ec:	bl	10de4 <dcgettext@plt>
   119f0:	b	11a24 <__assert_fail@plt+0xa6c>
   119f4:	movw	r0, #22441	; 0x57a9
   119f8:	movw	r1, #22265	; 0x56f9
   119fc:	movw	r3, #22387	; 0x5773
   11a00:	mov	r2, #140	; 0x8c
   11a04:	movt	r0, #1
   11a08:	movt	r1, #1
   11a0c:	movt	r3, #1
   11a10:	bl	10fb8 <__assert_fail@plt>
   11a14:	ldr	r2, [fp, #-12]
   11a18:	mov	r0, #0
   11a1c:	mov	r1, #3
   11a20:	bl	13d50 <__assert_fail@plt+0x2d98>
   11a24:	movw	r2, #22639	; 0x586f
   11a28:	mov	r3, r0
   11a2c:	mov	r0, #1
   11a30:	mov	r1, r4
   11a34:	movt	r2, #1
   11a38:	bl	10e5c <error@plt>
   11a3c:	movw	r0, #22460	; 0x57bc
   11a40:	movw	r1, #22265	; 0x56f9
   11a44:	movw	r3, #22387	; 0x5773
   11a48:	mov	r2, #163	; 0xa3
   11a4c:	movt	r0, #1
   11a50:	b	11a08 <__assert_fail@plt+0xa50>
   11a54:	movw	r0, #22503	; 0x57e7
   11a58:	movw	r1, #22265	; 0x56f9
   11a5c:	movw	r3, #22387	; 0x5773
   11a60:	mov	r2, #177	; 0xb1
   11a64:	movt	r0, #1
   11a68:	b	11a08 <__assert_fail@plt+0xa50>
   11a6c:	bl	10ef8 <__errno_location@plt>
   11a70:	ldr	r4, [r0]
   11a74:	mov	r0, #0
   11a78:	mov	r1, #3
   11a7c:	mov	r2, r9
   11a80:	b	11a20 <__assert_fail@plt+0xa68>
   11a84:	movw	r0, #22256	; 0x56f0
   11a88:	movw	r1, #22265	; 0x56f9
   11a8c:	movw	r3, #22277	; 0x5705
   11a90:	movw	r2, #458	; 0x1ca
   11a94:	movt	r0, #1
   11a98:	movt	r1, #1
   11a9c:	movt	r3, #1
   11aa0:	bl	10fb8 <__assert_fail@plt>
   11aa4:	movw	r1, #22302	; 0x571e
   11aa8:	mov	r0, #0
   11aac:	mov	r2, #5
   11ab0:	movt	r1, #1
   11ab4:	bl	10de4 <dcgettext@plt>
   11ab8:	mov	r4, r0
   11abc:	mov	r0, #0
   11ac0:	mov	r1, #3
   11ac4:	mov	r2, r9
   11ac8:	bl	13d50 <__assert_fail@plt+0x2d98>
   11acc:	mov	r3, r0
   11ad0:	mov	r0, #1
   11ad4:	mov	r1, #0
   11ad8:	mov	r2, r4
   11adc:	bl	10e5c <error@plt>
   11ae0:	mov	r0, #1
   11ae4:	str	r0, [fp, #-16]
   11ae8:	b	119a0 <__assert_fail@plt+0x9e8>
   11aec:	movw	r0, #24912	; 0x6150
   11af0:	movt	r0, #2
   11af4:	ldr	r1, [r0]
   11af8:	add	r1, r1, #1
   11afc:	str	r1, [r0]
   11b00:	mov	r0, #0
   11b04:	bx	lr
   11b08:	ldr	r1, [r0, #16]
   11b0c:	cmp	r1, #0
   11b10:	bne	11b20 <__assert_fail@plt+0xb68>
   11b14:	ldrb	r1, [r0, #13]
   11b18:	cmp	r1, #0
   11b1c:	beq	11b28 <__assert_fail@plt+0xb70>
   11b20:	mov	r0, #0
   11b24:	bx	lr
   11b28:	movw	r1, #24916	; 0x6154
   11b2c:	movw	ip, #24920	; 0x6158
   11b30:	movt	r1, #2
   11b34:	movt	ip, #2
   11b38:	ldr	r2, [r1]
   11b3c:	ldr	r3, [ip]
   11b40:	cmp	r2, #0
   11b44:	addne	r1, r3, #20
   11b48:	str	r0, [r1]
   11b4c:	str	r0, [ip]
   11b50:	mov	r0, #0
   11b54:	bx	lr
   11b58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b5c:	add	fp, sp, #24
   11b60:	ldr	r1, [r0, #16]
   11b64:	mov	r4, r0
   11b68:	mov	r0, #0
   11b6c:	cmp	r1, #0
   11b70:	beq	11c6c <__assert_fail@plt+0xcb4>
   11b74:	movw	r6, #24924	; 0x615c
   11b78:	movt	r6, #2
   11b7c:	ldr	r7, [r6]
   11b80:	cmp	r7, #0
   11b84:	beq	11c1c <__assert_fail@plt+0xc64>
   11b88:	mov	r8, r4
   11b8c:	ldr	r1, [r8, #24]!
   11b90:	cmp	r1, #0
   11b94:	beq	11c6c <__assert_fail@plt+0xcb4>
   11b98:	ldr	r2, [r1]
   11b9c:	cmp	r2, r7
   11ba0:	beq	11bc4 <__assert_fail@plt+0xc0c>
   11ba4:	mov	r2, r1
   11ba8:	ldr	r1, [r1, #4]
   11bac:	cmp	r1, #0
   11bb0:	beq	11c6c <__assert_fail@plt+0xcb4>
   11bb4:	ldr	r3, [r1]
   11bb8:	cmp	r3, r7
   11bbc:	bne	11ba4 <__assert_fail@plt+0xbec>
   11bc0:	add	r8, r2, #4
   11bc4:	ldr	r1, [r4, #20]
   11bc8:	cmp	r1, #0
   11bcc:	beq	11c18 <__assert_fail@plt+0xc60>
   11bd0:	movw	r5, #22639	; 0x586f
   11bd4:	mov	r9, #0
   11bd8:	movt	r5, #1
   11bdc:	ldr	r3, [r7]
   11be0:	ldr	r7, [r7, #20]
   11be4:	mov	r0, #0
   11be8:	mov	r1, #0
   11bec:	mov	r2, r5
   11bf0:	bl	10e5c <error@plt>
   11bf4:	ldr	r0, [r6]
   11bf8:	cmp	r0, r4
   11bfc:	beq	11c24 <__assert_fail@plt+0xc6c>
   11c00:	cmp	r7, #0
   11c04:	str	r9, [r0, #20]
   11c08:	str	r7, [r6]
   11c0c:	bne	11bdc <__assert_fail@plt+0xc24>
   11c10:	mov	r4, r7
   11c14:	b	11c40 <__assert_fail@plt+0xc88>
   11c18:	str	r7, [r4, #20]
   11c1c:	str	r4, [r6]
   11c20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c24:	ldr	r0, [r8]
   11c28:	ldr	r1, [r0]
   11c2c:	ldr	r2, [r1, #16]
   11c30:	sub	r2, r2, #1
   11c34:	str	r2, [r1, #16]
   11c38:	ldr	r0, [r0, #4]
   11c3c:	str	r0, [r8]
   11c40:	mov	r0, #1
   11c44:	cmp	r4, #0
   11c48:	beq	11c6c <__assert_fail@plt+0xcb4>
   11c4c:	mov	r1, #0
   11c50:	ldr	r2, [r4, #20]
   11c54:	str	r1, [r4, #20]
   11c58:	cmp	r2, #0
   11c5c:	mov	r4, r2
   11c60:	bne	11c50 <__assert_fail@plt+0xc98>
   11c64:	mov	r1, #0
   11c68:	str	r1, [r6]
   11c6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c70:	push	{r4, r5, r6, sl, fp, lr}
   11c74:	add	fp, sp, #16
   11c78:	mov	r4, r0
   11c7c:	ldr	r0, [r0, #4]
   11c80:	cmp	r0, #0
   11c84:	beq	11ca4 <__assert_fail@plt+0xcec>
   11c88:	mov	r5, r1
   11c8c:	bl	11c70 <__assert_fail@plt+0xcb8>
   11c90:	mov	r1, r5
   11c94:	mov	r5, #1
   11c98:	cmp	r0, #0
   11c9c:	beq	11cb0 <__assert_fail@plt+0xcf8>
   11ca0:	b	11ce4 <__assert_fail@plt+0xd2c>
   11ca4:	ldr	r0, [r4, #8]
   11ca8:	cmp	r0, #0
   11cac:	beq	11cec <__assert_fail@plt+0xd34>
   11cb0:	mov	r0, r4
   11cb4:	mov	r6, r1
   11cb8:	blx	r1
   11cbc:	mov	r5, #1
   11cc0:	cmp	r0, #0
   11cc4:	bne	11ce4 <__assert_fail@plt+0xd2c>
   11cc8:	ldr	r0, [r4, #8]
   11ccc:	cmp	r0, #0
   11cd0:	beq	11cf8 <__assert_fail@plt+0xd40>
   11cd4:	mov	r1, r6
   11cd8:	bl	11c70 <__assert_fail@plt+0xcb8>
   11cdc:	cmp	r0, #0
   11ce0:	moveq	r5, #0
   11ce4:	mov	r0, r5
   11ce8:	pop	{r4, r5, r6, sl, fp, pc}
   11cec:	mov	r0, r4
   11cf0:	pop	{r4, r5, r6, sl, fp, lr}
   11cf4:	bx	r1
   11cf8:	mov	r5, #0
   11cfc:	mov	r0, r5
   11d00:	pop	{r4, r5, r6, sl, fp, pc}
   11d04:	movw	r1, #24928	; 0x6160
   11d08:	movt	r1, #2
   11d0c:	str	r0, [r1]
   11d10:	bx	lr
   11d14:	movw	r1, #24932	; 0x6164
   11d18:	movt	r1, #2
   11d1c:	strb	r0, [r1]
   11d20:	bx	lr
   11d24:	push	{r4, r5, r6, sl, fp, lr}
   11d28:	add	fp, sp, #16
   11d2c:	sub	sp, sp, #8
   11d30:	movw	r0, #24900	; 0x6144
   11d34:	movt	r0, #2
   11d38:	ldr	r0, [r0]
   11d3c:	bl	1512c <__assert_fail@plt+0x4174>
   11d40:	cmp	r0, #0
   11d44:	beq	11d6c <__assert_fail@plt+0xdb4>
   11d48:	movw	r0, #24932	; 0x6164
   11d4c:	movt	r0, #2
   11d50:	ldrb	r0, [r0]
   11d54:	cmp	r0, #0
   11d58:	beq	11d8c <__assert_fail@plt+0xdd4>
   11d5c:	bl	10ef8 <__errno_location@plt>
   11d60:	ldr	r0, [r0]
   11d64:	cmp	r0, #32
   11d68:	bne	11d8c <__assert_fail@plt+0xdd4>
   11d6c:	movw	r0, #24888	; 0x6138
   11d70:	movt	r0, #2
   11d74:	ldr	r0, [r0]
   11d78:	bl	1512c <__assert_fail@plt+0x4174>
   11d7c:	cmp	r0, #0
   11d80:	subeq	sp, fp, #16
   11d84:	popeq	{r4, r5, r6, sl, fp, pc}
   11d88:	b	11dfc <__assert_fail@plt+0xe44>
   11d8c:	movw	r1, #22623	; 0x585f
   11d90:	mov	r0, #0
   11d94:	mov	r2, #5
   11d98:	movt	r1, #1
   11d9c:	bl	10de4 <dcgettext@plt>
   11da0:	mov	r4, r0
   11da4:	movw	r0, #24928	; 0x6160
   11da8:	movt	r0, #2
   11dac:	ldr	r6, [r0]
   11db0:	bl	10ef8 <__errno_location@plt>
   11db4:	ldr	r5, [r0]
   11db8:	cmp	r6, #0
   11dbc:	bne	11dd8 <__assert_fail@plt+0xe20>
   11dc0:	movw	r2, #22639	; 0x586f
   11dc4:	mov	r0, #0
   11dc8:	mov	r1, r5
   11dcc:	mov	r3, r4
   11dd0:	movt	r2, #1
   11dd4:	b	11df8 <__assert_fail@plt+0xe40>
   11dd8:	mov	r0, r6
   11ddc:	bl	13c74 <__assert_fail@plt+0x2cbc>
   11de0:	movw	r2, #22635	; 0x586b
   11de4:	mov	r3, r0
   11de8:	str	r4, [sp]
   11dec:	mov	r0, #0
   11df0:	mov	r1, r5
   11df4:	movt	r2, #1
   11df8:	bl	10e5c <error@plt>
   11dfc:	movw	r0, #24804	; 0x60e4
   11e00:	movt	r0, #2
   11e04:	ldr	r0, [r0]
   11e08:	bl	10dc0 <_exit@plt>
   11e0c:	b	10d9c <posix_fadvise64@plt>
   11e10:	cmp	r0, #0
   11e14:	bxeq	lr
   11e18:	push	{r4, sl, fp, lr}
   11e1c:	add	fp, sp, #8
   11e20:	sub	sp, sp, #16
   11e24:	mov	r4, r1
   11e28:	bl	10f28 <fileno@plt>
   11e2c:	mov	r1, #0
   11e30:	mov	r2, #0
   11e34:	mov	r3, #0
   11e38:	str	r1, [sp]
   11e3c:	stmib	sp, {r1, r4}
   11e40:	bl	10d9c <posix_fadvise64@plt>
   11e44:	sub	sp, fp, #8
   11e48:	pop	{r4, sl, fp, pc}
   11e4c:	push	{r4, r5, r6, sl, fp, lr}
   11e50:	add	fp, sp, #16
   11e54:	sub	sp, sp, #8
   11e58:	mov	r4, r0
   11e5c:	bl	10f28 <fileno@plt>
   11e60:	cmn	r0, #1
   11e64:	ble	11ed8 <__assert_fail@plt+0xf20>
   11e68:	mov	r0, r4
   11e6c:	bl	10e98 <__freading@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11ea0 <__assert_fail@plt+0xee8>
   11e78:	mov	r0, r4
   11e7c:	bl	10f28 <fileno@plt>
   11e80:	mov	r1, #1
   11e84:	mov	r2, #0
   11e88:	mov	r3, #0
   11e8c:	str	r1, [sp]
   11e90:	bl	10e2c <lseek64@plt>
   11e94:	and	r0, r0, r1
   11e98:	cmn	r0, #1
   11e9c:	beq	11ed8 <__assert_fail@plt+0xf20>
   11ea0:	mov	r0, r4
   11ea4:	bl	11ee8 <__assert_fail@plt+0xf30>
   11ea8:	cmp	r0, #0
   11eac:	beq	11ed8 <__assert_fail@plt+0xf20>
   11eb0:	bl	10ef8 <__errno_location@plt>
   11eb4:	ldr	r6, [r0]
   11eb8:	mov	r5, r0
   11ebc:	mov	r0, r4
   11ec0:	bl	10f40 <fclose@plt>
   11ec4:	cmp	r6, #0
   11ec8:	strne	r6, [r5]
   11ecc:	mvnne	r0, #0
   11ed0:	sub	sp, fp, #16
   11ed4:	pop	{r4, r5, r6, sl, fp, pc}
   11ed8:	mov	r0, r4
   11edc:	sub	sp, fp, #16
   11ee0:	pop	{r4, r5, r6, sl, fp, lr}
   11ee4:	b	10f40 <fclose@plt>
   11ee8:	push	{r4, sl, fp, lr}
   11eec:	add	fp, sp, #8
   11ef0:	sub	sp, sp, #8
   11ef4:	mov	r4, r0
   11ef8:	cmp	r0, #0
   11efc:	beq	11f34 <__assert_fail@plt+0xf7c>
   11f00:	mov	r0, r4
   11f04:	bl	10e98 <__freading@plt>
   11f08:	cmp	r0, #0
   11f0c:	beq	11f34 <__assert_fail@plt+0xf7c>
   11f10:	ldrb	r0, [r4, #1]
   11f14:	tst	r0, #1
   11f18:	beq	11f34 <__assert_fail@plt+0xf7c>
   11f1c:	mov	r0, #1
   11f20:	mov	r2, #0
   11f24:	mov	r3, #0
   11f28:	str	r0, [sp]
   11f2c:	mov	r0, r4
   11f30:	bl	1218c <__assert_fail@plt+0x11d4>
   11f34:	mov	r0, r4
   11f38:	sub	sp, fp, #8
   11f3c:	pop	{r4, sl, fp, lr}
   11f40:	b	10da8 <fflush@plt>
   11f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f48:	add	fp, sp, #28
   11f4c:	sub	sp, sp, #4
   11f50:	mov	r5, r0
   11f54:	mov	r0, r2
   11f58:	mov	r4, r2
   11f5c:	mov	r9, r1
   11f60:	bl	10f28 <fileno@plt>
   11f64:	mov	r7, #0
   11f68:	cmp	r0, #0
   11f6c:	beq	11fac <__assert_fail@plt+0xff4>
   11f70:	cmp	r0, #1
   11f74:	beq	11fb8 <__assert_fail@plt+0x1000>
   11f78:	cmp	r0, #2
   11f7c:	beq	11f94 <__assert_fail@plt+0xfdc>
   11f80:	mov	r0, #2
   11f84:	mov	r1, #2
   11f88:	bl	10df0 <dup2@plt>
   11f8c:	subs	r7, r0, #2
   11f90:	movwne	r7, #1
   11f94:	mov	r0, #1
   11f98:	mov	r1, #1
   11f9c:	bl	10df0 <dup2@plt>
   11fa0:	subs	r6, r0, #1
   11fa4:	movwne	r6, #1
   11fa8:	b	11fbc <__assert_fail@plt+0x1004>
   11fac:	mov	r6, #0
   11fb0:	mov	r8, #0
   11fb4:	b	12084 <__assert_fail@plt+0x10cc>
   11fb8:	mov	r6, #0
   11fbc:	mov	r0, #0
   11fc0:	mov	r1, #0
   11fc4:	mov	sl, #0
   11fc8:	bl	10df0 <dup2@plt>
   11fcc:	cmp	r0, #0
   11fd0:	mov	r8, #0
   11fd4:	beq	12014 <__assert_fail@plt+0x105c>
   11fd8:	movw	r0, #22642	; 0x5872
   11fdc:	mov	r1, #0
   11fe0:	movt	r0, #1
   11fe4:	bl	10e68 <open64@plt>
   11fe8:	cmp	r0, #0
   11fec:	beq	12010 <__assert_fail@plt+0x1058>
   11ff0:	cmn	r0, #1
   11ff4:	ble	12110 <__assert_fail@plt+0x1158>
   11ff8:	bl	10fac <close@plt>
   11ffc:	bl	10ef8 <__errno_location@plt>
   12000:	mov	r4, r0
   12004:	mov	r0, #9
   12008:	str	r0, [r4]
   1200c:	b	12118 <__assert_fail@plt+0x1160>
   12010:	mov	r8, #1
   12014:	cmp	r6, #0
   12018:	beq	12038 <__assert_fail@plt+0x1080>
   1201c:	movw	r0, #22642	; 0x5872
   12020:	mov	r1, #0
   12024:	movt	r0, #1
   12028:	bl	10e68 <open64@plt>
   1202c:	mov	sl, #1
   12030:	cmp	r0, #1
   12034:	bne	120f0 <__assert_fail@plt+0x1138>
   12038:	cmp	r7, #0
   1203c:	beq	1207c <__assert_fail@plt+0x10c4>
   12040:	movw	r0, #22642	; 0x5872
   12044:	mov	r1, #0
   12048:	movt	r0, #1
   1204c:	bl	10e68 <open64@plt>
   12050:	mov	r7, #1
   12054:	cmp	r0, #2
   12058:	beq	12080 <__assert_fail@plt+0x10c8>
   1205c:	cmn	r0, #1
   12060:	ble	12168 <__assert_fail@plt+0x11b0>
   12064:	bl	10fac <close@plt>
   12068:	bl	10ef8 <__errno_location@plt>
   1206c:	mov	r4, r0
   12070:	mov	r0, #9
   12074:	str	r0, [r4]
   12078:	b	12170 <__assert_fail@plt+0x11b8>
   1207c:	mov	r7, #0
   12080:	mov	r6, sl
   12084:	mov	r0, r5
   12088:	mov	r1, r9
   1208c:	mov	r2, r4
   12090:	bl	10eb0 <freopen64@plt>
   12094:	mov	r5, r0
   12098:	bl	10ef8 <__errno_location@plt>
   1209c:	ldr	r9, [r0]
   120a0:	mov	r4, r0
   120a4:	cmp	r7, #0
   120a8:	beq	120b4 <__assert_fail@plt+0x10fc>
   120ac:	mov	r0, #2
   120b0:	bl	10fac <close@plt>
   120b4:	cmp	r6, #0
   120b8:	beq	120c4 <__assert_fail@plt+0x110c>
   120bc:	mov	r0, #1
   120c0:	bl	10fac <close@plt>
   120c4:	cmp	r8, #0
   120c8:	beq	120d4 <__assert_fail@plt+0x111c>
   120cc:	mov	r0, #0
   120d0:	bl	10fac <close@plt>
   120d4:	cmp	r5, #0
   120d8:	bne	120e4 <__assert_fail@plt+0x112c>
   120dc:	mov	r5, #0
   120e0:	str	r9, [r4]
   120e4:	mov	r0, r5
   120e8:	sub	sp, fp, #28
   120ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f0:	cmn	r0, #1
   120f4:	ble	12130 <__assert_fail@plt+0x1178>
   120f8:	bl	10fac <close@plt>
   120fc:	bl	10ef8 <__errno_location@plt>
   12100:	mov	r4, r0
   12104:	mov	r0, #9
   12108:	str	r0, [r4]
   1210c:	b	12138 <__assert_fail@plt+0x1180>
   12110:	bl	10ef8 <__errno_location@plt>
   12114:	mov	r4, r0
   12118:	ldr	r9, [r4]
   1211c:	mov	r8, #1
   12120:	mov	r5, #0
   12124:	cmp	r7, #0
   12128:	bne	120ac <__assert_fail@plt+0x10f4>
   1212c:	b	120b4 <__assert_fail@plt+0x10fc>
   12130:	bl	10ef8 <__errno_location@plt>
   12134:	mov	r4, r0
   12138:	ldr	r9, [r4]
   1213c:	mov	r5, #0
   12140:	cmp	r7, #0
   12144:	beq	120bc <__assert_fail@plt+0x1104>
   12148:	mov	r0, #2
   1214c:	bl	10fac <close@plt>
   12150:	mov	r0, #1
   12154:	bl	10fac <close@plt>
   12158:	mov	r5, #0
   1215c:	cmp	r8, #0
   12160:	bne	120cc <__assert_fail@plt+0x1114>
   12164:	b	120dc <__assert_fail@plt+0x1124>
   12168:	bl	10ef8 <__errno_location@plt>
   1216c:	mov	r4, r0
   12170:	ldr	r9, [r4]
   12174:	mov	r0, #2
   12178:	bl	10fac <close@plt>
   1217c:	mov	r5, #0
   12180:	cmp	sl, #0
   12184:	bne	120bc <__assert_fail@plt+0x1104>
   12188:	b	120c4 <__assert_fail@plt+0x110c>
   1218c:	push	{r4, r5, r6, r7, fp, lr}
   12190:	add	fp, sp, #16
   12194:	sub	sp, sp, #8
   12198:	mov	r4, r0
   1219c:	ldr	r0, [r0, #4]
   121a0:	mov	r5, r3
   121a4:	mov	r6, r2
   121a8:	ldr	r1, [r4, #8]
   121ac:	cmp	r1, r0
   121b0:	bne	121cc <__assert_fail@plt+0x1214>
   121b4:	ldrd	r0, [r4, #16]
   121b8:	cmp	r1, r0
   121bc:	bne	121cc <__assert_fail@plt+0x1214>
   121c0:	ldr	r0, [r4, #36]	; 0x24
   121c4:	cmp	r0, #0
   121c8:	beq	121e4 <__assert_fail@plt+0x122c>
   121cc:	mov	r0, r4
   121d0:	mov	r2, r6
   121d4:	mov	r3, r5
   121d8:	sub	sp, fp, #16
   121dc:	pop	{r4, r5, r6, r7, fp, lr}
   121e0:	b	10f4c <fseeko64@plt>
   121e4:	ldr	r7, [fp, #8]
   121e8:	mov	r0, r4
   121ec:	bl	10f28 <fileno@plt>
   121f0:	mov	r2, r6
   121f4:	mov	r3, r5
   121f8:	str	r7, [sp]
   121fc:	bl	10e2c <lseek64@plt>
   12200:	and	r2, r0, r1
   12204:	cmn	r2, #1
   12208:	beq	12228 <__assert_fail@plt+0x1270>
   1220c:	strd	r0, [r4, #80]	; 0x50
   12210:	ldr	r0, [r4]
   12214:	bic	r0, r0, #16
   12218:	str	r0, [r4]
   1221c:	mov	r0, #0
   12220:	sub	sp, fp, #16
   12224:	pop	{r4, r5, r6, r7, fp, pc}
   12228:	mvn	r0, #0
   1222c:	sub	sp, fp, #16
   12230:	pop	{r4, r5, r6, r7, fp, pc}
   12234:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12238:	add	fp, sp, #24
   1223c:	sub	sp, sp, #8
   12240:	movw	r6, #24904	; 0x6148
   12244:	mov	r4, #0
   12248:	cmp	r0, #2
   1224c:	movt	r6, #2
   12250:	ldr	r7, [r6]
   12254:	str	r4, [r6]
   12258:	bne	122cc <__assert_fail@plt+0x1314>
   1225c:	mov	r8, r3
   12260:	movw	r3, #22668	; 0x588c
   12264:	mov	r5, r2
   12268:	movw	r2, #22652	; 0x587c
   1226c:	mov	r0, #2
   12270:	str	r4, [sp]
   12274:	movt	r2, #1
   12278:	movt	r3, #1
   1227c:	bl	10ebc <getopt_long@plt>
   12280:	cmp	r0, #104	; 0x68
   12284:	beq	122c0 <__assert_fail@plt+0x1308>
   12288:	cmp	r0, #118	; 0x76
   1228c:	bne	122cc <__assert_fail@plt+0x1314>
   12290:	movw	r0, #24900	; 0x6144
   12294:	ldr	r3, [fp, #8]
   12298:	add	r1, fp, #16
   1229c:	mov	r2, r8
   122a0:	movt	r0, #2
   122a4:	str	r1, [sp, #4]
   122a8:	str	r1, [sp]
   122ac:	mov	r1, r5
   122b0:	ldr	r0, [r0]
   122b4:	bl	1478c <__assert_fail@plt+0x37d4>
   122b8:	mov	r0, #0
   122bc:	bl	10ed4 <exit@plt>
   122c0:	ldr	r1, [fp, #12]
   122c4:	mov	r0, #0
   122c8:	blx	r1
   122cc:	movw	r0, #24880	; 0x6130
   122d0:	str	r7, [r6]
   122d4:	movt	r0, #2
   122d8:	str	r4, [r0]
   122dc:	sub	sp, fp, #24
   122e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   122e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   122e8:	add	fp, sp, #24
   122ec:	sub	sp, sp, #8
   122f0:	mov	r8, r3
   122f4:	ldr	r3, [fp, #12]
   122f8:	movw	r7, #24904	; 0x6148
   122fc:	movw	r5, #22255	; 0x56ef
   12300:	mov	r9, r2
   12304:	mov	r2, #1
   12308:	mov	r6, #0
   1230c:	movt	r7, #2
   12310:	movt	r5, #1
   12314:	str	r6, [sp]
   12318:	ldr	r4, [r7]
   1231c:	str	r2, [r7]
   12320:	movw	r2, #22652	; 0x587c
   12324:	cmp	r3, #0
   12328:	movw	r3, #22668	; 0x588c
   1232c:	movt	r2, #1
   12330:	movt	r3, #1
   12334:	movne	r2, r5
   12338:	bl	10ebc <getopt_long@plt>
   1233c:	cmn	r0, #1
   12340:	beq	1236c <__assert_fail@plt+0x13b4>
   12344:	cmp	r0, #104	; 0x68
   12348:	beq	12360 <__assert_fail@plt+0x13a8>
   1234c:	cmp	r0, #118	; 0x76
   12350:	beq	12378 <__assert_fail@plt+0x13c0>
   12354:	movw	r0, #24804	; 0x60e4
   12358:	movt	r0, #2
   1235c:	ldr	r6, [r0]
   12360:	ldr	r1, [fp, #16]
   12364:	mov	r0, r6
   12368:	blx	r1
   1236c:	str	r4, [r7]
   12370:	sub	sp, fp, #24
   12374:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12378:	movw	r0, #24900	; 0x6144
   1237c:	ldr	r3, [fp, #8]
   12380:	add	r1, fp, #20
   12384:	mov	r2, r8
   12388:	movt	r0, #2
   1238c:	str	r1, [sp, #4]
   12390:	str	r1, [sp]
   12394:	mov	r1, r9
   12398:	ldr	r0, [r0]
   1239c:	bl	1478c <__assert_fail@plt+0x37d4>
   123a0:	mov	r0, #0
   123a4:	bl	10ed4 <exit@plt>
   123a8:	push	{r4, r5, fp, lr}
   123ac:	add	fp, sp, #8
   123b0:	cmp	r0, #0
   123b4:	beq	12448 <__assert_fail@plt+0x1490>
   123b8:	mov	r1, #47	; 0x2f
   123bc:	mov	r4, r0
   123c0:	bl	10f70 <strrchr@plt>
   123c4:	cmp	r0, #0
   123c8:	mov	r5, r4
   123cc:	addne	r5, r0, #1
   123d0:	sub	r0, r5, r4
   123d4:	cmp	r0, #7
   123d8:	blt	1242c <__assert_fail@plt+0x1474>
   123dc:	movw	r1, #22772	; 0x58f4
   123e0:	sub	r0, r5, #7
   123e4:	mov	r2, #7
   123e8:	movt	r1, #1
   123ec:	bl	10f94 <strncmp@plt>
   123f0:	cmp	r0, #0
   123f4:	bne	1242c <__assert_fail@plt+0x1474>
   123f8:	movw	r1, #22780	; 0x58fc
   123fc:	mov	r0, r5
   12400:	mov	r2, #3
   12404:	movt	r1, #1
   12408:	bl	10f94 <strncmp@plt>
   1240c:	cmp	r0, #0
   12410:	beq	1241c <__assert_fail@plt+0x1464>
   12414:	mov	r4, r5
   12418:	b	1242c <__assert_fail@plt+0x1474>
   1241c:	movw	r0, #24872	; 0x6128
   12420:	add	r4, r5, #3
   12424:	movt	r0, #2
   12428:	str	r4, [r0]
   1242c:	movw	r0, #24876	; 0x612c
   12430:	movt	r0, #2
   12434:	str	r4, [r0]
   12438:	movw	r0, #24936	; 0x6168
   1243c:	movt	r0, #2
   12440:	str	r4, [r0]
   12444:	pop	{r4, r5, fp, pc}
   12448:	movw	r0, #24888	; 0x6138
   1244c:	mov	r1, #55	; 0x37
   12450:	mov	r2, #1
   12454:	movt	r0, #2
   12458:	ldr	r3, [r0]
   1245c:	movw	r0, #22716	; 0x58bc
   12460:	movt	r0, #1
   12464:	bl	10e20 <fwrite@plt>
   12468:	bl	10fa0 <abort@plt>
   1246c:	push	{r4, r5, r6, sl, fp, lr}
   12470:	add	fp, sp, #16
   12474:	mov	r4, r0
   12478:	movw	r0, #24944	; 0x6170
   1247c:	movt	r0, #2
   12480:	cmp	r4, #0
   12484:	moveq	r4, r0
   12488:	bl	10ef8 <__errno_location@plt>
   1248c:	ldr	r6, [r0]
   12490:	mov	r5, r0
   12494:	mov	r0, r4
   12498:	mov	r1, #48	; 0x30
   1249c:	bl	14f34 <__assert_fail@plt+0x3f7c>
   124a0:	str	r6, [r5]
   124a4:	pop	{r4, r5, r6, sl, fp, pc}
   124a8:	movw	r1, #24944	; 0x6170
   124ac:	cmp	r0, #0
   124b0:	movt	r1, #2
   124b4:	movne	r1, r0
   124b8:	ldr	r0, [r1]
   124bc:	bx	lr
   124c0:	movw	r2, #24944	; 0x6170
   124c4:	cmp	r0, #0
   124c8:	movt	r2, #2
   124cc:	movne	r2, r0
   124d0:	str	r1, [r2]
   124d4:	bx	lr
   124d8:	movw	r3, #24944	; 0x6170
   124dc:	cmp	r0, #0
   124e0:	and	r2, r2, #1
   124e4:	movt	r3, #2
   124e8:	movne	r3, r0
   124ec:	ubfx	r0, r1, #5, #3
   124f0:	and	r1, r1, #31
   124f4:	add	ip, r3, r0, lsl #2
   124f8:	mov	r0, #1
   124fc:	ldr	r3, [ip, #8]
   12500:	and	r0, r0, r3, lsr r1
   12504:	eor	r2, r0, r2
   12508:	eor	r1, r3, r2, lsl r1
   1250c:	str	r1, [ip, #8]
   12510:	bx	lr
   12514:	movw	r2, #24944	; 0x6170
   12518:	cmp	r0, #0
   1251c:	movt	r2, #2
   12520:	movne	r2, r0
   12524:	ldr	r0, [r2, #4]
   12528:	str	r1, [r2, #4]
   1252c:	bx	lr
   12530:	push	{fp, lr}
   12534:	mov	fp, sp
   12538:	movw	r3, #24944	; 0x6170
   1253c:	cmp	r0, #0
   12540:	movt	r3, #2
   12544:	movne	r3, r0
   12548:	cmp	r1, #0
   1254c:	mov	r0, #10
   12550:	cmpne	r2, #0
   12554:	str	r0, [r3]
   12558:	bne	12560 <__assert_fail@plt+0x15a8>
   1255c:	bl	10fa0 <abort@plt>
   12560:	str	r1, [r3, #40]	; 0x28
   12564:	str	r2, [r3, #44]	; 0x2c
   12568:	pop	{fp, pc}
   1256c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12570:	add	fp, sp, #28
   12574:	sub	sp, sp, #20
   12578:	mov	r7, r0
   1257c:	ldr	r0, [fp, #8]
   12580:	movw	r5, #24944	; 0x6170
   12584:	mov	r8, r3
   12588:	mov	r9, r2
   1258c:	mov	sl, r1
   12590:	movt	r5, #2
   12594:	cmp	r0, #0
   12598:	movne	r5, r0
   1259c:	bl	10ef8 <__errno_location@plt>
   125a0:	ldr	r2, [r5, #40]	; 0x28
   125a4:	ldr	r3, [r5, #44]	; 0x2c
   125a8:	mov	r4, r0
   125ac:	ldm	r5, {r0, r1}
   125b0:	add	r5, r5, #8
   125b4:	ldr	r6, [r4]
   125b8:	stm	sp, {r0, r1, r5}
   125bc:	mov	r0, r7
   125c0:	mov	r1, sl
   125c4:	str	r2, [sp, #12]
   125c8:	str	r3, [sp, #16]
   125cc:	mov	r2, r9
   125d0:	mov	r3, r8
   125d4:	bl	125e4 <__assert_fail@plt+0x162c>
   125d8:	str	r6, [r4]
   125dc:	sub	sp, fp, #28
   125e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e8:	add	fp, sp, #28
   125ec:	sub	sp, sp, #156	; 0x9c
   125f0:	mov	r5, r0
   125f4:	add	r0, r2, #1
   125f8:	mov	r6, r1
   125fc:	mov	sl, r3
   12600:	str	r2, [fp, #-80]	; 0xffffffb0
   12604:	str	r0, [sp, #72]	; 0x48
   12608:	ldr	r0, [fp, #12]
   1260c:	and	r1, r0, #1
   12610:	str	r1, [sp, #36]	; 0x24
   12614:	and	r1, r0, #4
   12618:	str	r1, [sp, #32]
   1261c:	ubfx	r9, r0, #1, #1
   12620:	bl	10e38 <__ctype_get_mb_cur_max@plt>
   12624:	str	r0, [sp, #40]	; 0x28
   12628:	ldr	r0, [fp, #24]
   1262c:	ldr	r7, [fp, #8]
   12630:	mov	r1, #0
   12634:	str	r5, [fp, #-84]	; 0xffffffac
   12638:	str	r1, [fp, #-56]	; 0xffffffc8
   1263c:	mov	r1, #0
   12640:	str	r1, [sp, #60]	; 0x3c
   12644:	mov	r1, #1
   12648:	str	r1, [fp, #-48]	; 0xffffffd0
   1264c:	str	r0, [sp, #80]	; 0x50
   12650:	ldr	r0, [fp, #20]
   12654:	str	r0, [sp, #76]	; 0x4c
   12658:	mov	r0, #0
   1265c:	str	r0, [sp, #56]	; 0x38
   12660:	mov	r0, #0
   12664:	str	r0, [fp, #-88]	; 0xffffffa8
   12668:	mov	r0, #0
   1266c:	str	r0, [fp, #-72]	; 0xffffffb8
   12670:	mov	r0, #0
   12674:	cmp	r7, #10
   12678:	bhi	1360c <__assert_fail@plt+0x2654>
   1267c:	add	r1, pc, #24
   12680:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12684:	mov	r4, r6
   12688:	mov	r8, #0
   1268c:	mov	r2, #1
   12690:	mov	r3, #0
   12694:	mov	lr, sl
   12698:	ldr	pc, [r1, r7, lsl #2]
   1269c:	andeq	r2, r1, r0, ror #14
   126a0:			; <UNDEFINED> instruction: 0x000127b4
   126a4:	andeq	r2, r1, r4, ror r7
   126a8:	andeq	r2, r1, r8, asr r7
   126ac:	andeq	r2, r1, r8, lsr #15
   126b0:	ldrdeq	r2, [r1], -ip
   126b4:	andeq	r2, r1, r4, lsl #15
   126b8:	andeq	r2, r1, r0, ror #16
   126bc:	andeq	r2, r1, r8, asr #13
   126c0:	andeq	r2, r1, r8, asr #13
   126c4:	strdeq	r2, [r1], -r0
   126c8:	movw	r0, #22862	; 0x594e
   126cc:	mov	r1, r7
   126d0:	movt	r0, #1
   126d4:	bl	14014 <__assert_fail@plt+0x305c>
   126d8:	str	r0, [sp, #76]	; 0x4c
   126dc:	movw	r0, #22864	; 0x5950
   126e0:	mov	r1, r7
   126e4:	movt	r0, #1
   126e8:	bl	14014 <__assert_fail@plt+0x305c>
   126ec:	str	r0, [sp, #80]	; 0x50
   126f0:	mov	r8, #0
   126f4:	tst	r9, #1
   126f8:	bne	12730 <__assert_fail@plt+0x1778>
   126fc:	ldr	r0, [sp, #76]	; 0x4c
   12700:	ldrb	r0, [r0]
   12704:	cmp	r0, #0
   12708:	beq	12730 <__assert_fail@plt+0x1778>
   1270c:	ldr	r1, [sp, #76]	; 0x4c
   12710:	mov	r8, #0
   12714:	add	r1, r1, #1
   12718:	cmp	r8, r4
   1271c:	strbcc	r0, [r5, r8]
   12720:	ldrb	r0, [r1, r8]
   12724:	add	r8, r8, #1
   12728:	cmp	r0, #0
   1272c:	bne	12718 <__assert_fail@plt+0x1760>
   12730:	ldr	r6, [sp, #80]	; 0x50
   12734:	mov	r0, r6
   12738:	bl	10eec <strlen@plt>
   1273c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12740:	str	r0, [fp, #-72]	; 0xffffffb8
   12744:	str	r6, [fp, #-88]	; 0xffffffa8
   12748:	mov	r2, #1
   1274c:	mov	r3, r9
   12750:	mov	lr, sl
   12754:	b	12860 <__assert_fail@plt+0x18a8>
   12758:	mov	r0, #1
   1275c:	b	127b4 <__assert_fail@plt+0x17fc>
   12760:	mov	r7, #0
   12764:	mov	r8, #0
   12768:	mov	r2, r0
   1276c:	mov	r3, #0
   12770:	b	12860 <__assert_fail@plt+0x18a8>
   12774:	tst	r9, #1
   12778:	bne	127b4 <__assert_fail@plt+0x17fc>
   1277c:	mov	r2, r0
   12780:	b	1280c <__assert_fail@plt+0x1854>
   12784:	mov	r0, #1
   12788:	mov	r8, #0
   1278c:	mov	r7, #5
   12790:	mov	r2, #1
   12794:	str	r0, [fp, #-72]	; 0xffffffb8
   12798:	movw	r0, #22860	; 0x594c
   1279c:	movt	r0, #1
   127a0:	str	r0, [fp, #-88]	; 0xffffffa8
   127a4:	b	127d4 <__assert_fail@plt+0x181c>
   127a8:	mov	r2, #1
   127ac:	tst	r9, #1
   127b0:	beq	1280c <__assert_fail@plt+0x1854>
   127b4:	mov	r1, #1
   127b8:	mov	r8, #0
   127bc:	mov	r7, #2
   127c0:	mov	r2, r0
   127c4:	str	r1, [fp, #-72]	; 0xffffffb8
   127c8:	movw	r1, #22864	; 0x5950
   127cc:	movt	r1, #1
   127d0:	str	r1, [fp, #-88]	; 0xffffffa8
   127d4:	mov	r3, #1
   127d8:	b	12860 <__assert_fail@plt+0x18a8>
   127dc:	tst	r9, #1
   127e0:	beq	12830 <__assert_fail@plt+0x1878>
   127e4:	mov	r0, #1
   127e8:	mov	r8, #0
   127ec:	mov	r2, #1
   127f0:	mov	r3, #1
   127f4:	mov	r7, #5
   127f8:	str	r0, [fp, #-72]	; 0xffffffb8
   127fc:	movw	r0, #22860	; 0x594c
   12800:	movt	r0, #1
   12804:	str	r0, [fp, #-88]	; 0xffffffa8
   12808:	b	12860 <__assert_fail@plt+0x18a8>
   1280c:	cmp	r4, #0
   12810:	mov	r8, #1
   12814:	mov	r3, #0
   12818:	mov	r7, #2
   1281c:	movne	r0, #39	; 0x27
   12820:	strbne	r0, [r5]
   12824:	movw	r0, #22864	; 0x5950
   12828:	movt	r0, #1
   1282c:	b	12854 <__assert_fail@plt+0x189c>
   12830:	cmp	r4, #0
   12834:	mov	r8, #1
   12838:	mov	r2, #1
   1283c:	mov	r7, #5
   12840:	mov	r3, #0
   12844:	movne	r0, #34	; 0x22
   12848:	strbne	r0, [r5]
   1284c:	movw	r0, #22860	; 0x594c
   12850:	movt	r0, #1
   12854:	str	r0, [fp, #-88]	; 0xffffffa8
   12858:	mov	r0, #1
   1285c:	str	r0, [fp, #-72]	; 0xffffffb8
   12860:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12864:	eor	r6, r3, #1
   12868:	str	r7, [fp, #-68]	; 0xffffffbc
   1286c:	str	r3, [fp, #-76]	; 0xffffffb4
   12870:	str	r2, [sp, #84]	; 0x54
   12874:	str	r6, [sp, #92]	; 0x5c
   12878:	cmp	r0, #0
   1287c:	movwne	r0, #1
   12880:	and	r1, r0, r3
   12884:	and	r1, r2, r1
   12888:	str	r1, [sp, #48]	; 0x30
   1288c:	sub	r1, r7, #2
   12890:	clz	r1, r1
   12894:	lsr	r1, r1, #5
   12898:	and	r1, r1, r3
   1289c:	str	r1, [sp, #64]	; 0x40
   128a0:	subs	r1, r7, #2
   128a4:	mov	r7, #0
   128a8:	movwne	r1, #1
   128ac:	orr	r6, r1, r6
   128b0:	and	r1, r1, r2
   128b4:	and	r0, r0, r1
   128b8:	str	r6, [sp, #68]	; 0x44
   128bc:	str	r0, [fp, #-60]	; 0xffffffc4
   128c0:	orr	r0, r1, r3
   128c4:	ldr	r1, [fp, #16]
   128c8:	eor	r0, r0, #1
   128cc:	clz	r1, r1
   128d0:	lsr	r1, r1, #5
   128d4:	orr	r0, r1, r0
   128d8:	str	r0, [fp, #-64]	; 0xffffffc0
   128dc:	eor	r0, r2, #1
   128e0:	str	r0, [sp, #52]	; 0x34
   128e4:	cmn	lr, #1
   128e8:	beq	128f8 <__assert_fail@plt+0x1940>
   128ec:	cmp	r7, lr
   128f0:	bne	12904 <__assert_fail@plt+0x194c>
   128f4:	b	1344c <__assert_fail@plt+0x2494>
   128f8:	ldrb	r0, [ip, r7]
   128fc:	cmp	r0, #0
   12900:	beq	13454 <__assert_fail@plt+0x249c>
   12904:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12908:	mov	sl, #0
   1290c:	cmp	r0, #0
   12910:	beq	12948 <__assert_fail@plt+0x1990>
   12914:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12918:	add	r5, r7, r0
   1291c:	cmp	r0, #2
   12920:	bcc	1293c <__assert_fail@plt+0x1984>
   12924:	cmn	lr, #1
   12928:	bne	1293c <__assert_fail@plt+0x1984>
   1292c:	mov	r0, ip
   12930:	bl	10eec <strlen@plt>
   12934:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12938:	mov	lr, r0
   1293c:	cmp	r5, lr
   12940:	bls	12950 <__assert_fail@plt+0x1998>
   12944:	ldr	r5, [fp, #-84]	; 0xffffffac
   12948:	mov	r0, #0
   1294c:	b	1299c <__assert_fail@plt+0x19e4>
   12950:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12954:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12958:	add	r0, ip, r7
   1295c:	mov	r6, r4
   12960:	mov	r4, lr
   12964:	bl	10ee0 <bcmp@plt>
   12968:	ldr	r2, [sp, #92]	; 0x5c
   1296c:	cmp	r0, #0
   12970:	ldr	r5, [fp, #-84]	; 0xffffffac
   12974:	mov	r1, r0
   12978:	movwne	r1, #1
   1297c:	orr	r1, r1, r2
   12980:	tst	r1, #1
   12984:	beq	134dc <__assert_fail@plt+0x2524>
   12988:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1298c:	clz	r0, r0
   12990:	mov	lr, r4
   12994:	mov	r4, r6
   12998:	lsr	r0, r0, #5
   1299c:	str	r0, [fp, #-52]	; 0xffffffcc
   129a0:	ldrb	r6, [ip, r7]
   129a4:	cmp	r6, #126	; 0x7e
   129a8:	bhi	12ed8 <__assert_fail@plt+0x1f20>
   129ac:	add	r3, pc, #16
   129b0:	mov	r9, #1
   129b4:	mov	r2, #110	; 0x6e
   129b8:	mov	r0, #97	; 0x61
   129bc:	mov	r1, #0
   129c0:	ldr	pc, [r3, r6, lsl #2]
   129c4:	andeq	r2, r1, r8, lsr sp
   129c8:	ldrdeq	r2, [r1], -r8
   129cc:	ldrdeq	r2, [r1], -r8
   129d0:	ldrdeq	r2, [r1], -r8
   129d4:	ldrdeq	r2, [r1], -r8
   129d8:	ldrdeq	r2, [r1], -r8
   129dc:	ldrdeq	r2, [r1], -r8
   129e0:			; <UNDEFINED> instruction: 0x00012fb4
   129e4:	andeq	r2, r1, r8, lsl sp
   129e8:	andeq	r2, r1, r0, lsl sp
   129ec:	andeq	r2, r1, r4, lsr #26
   129f0:	andeq	r2, r1, r0, asr #28
   129f4:	andeq	r2, r1, r8, lsl #26
   129f8:	andeq	r2, r1, r0, lsr #26
   129fc:	ldrdeq	r2, [r1], -r8
   12a00:	ldrdeq	r2, [r1], -r8
   12a04:	ldrdeq	r2, [r1], -r8
   12a08:	ldrdeq	r2, [r1], -r8
   12a0c:	ldrdeq	r2, [r1], -r8
   12a10:	ldrdeq	r2, [r1], -r8
   12a14:	ldrdeq	r2, [r1], -r8
   12a18:	ldrdeq	r2, [r1], -r8
   12a1c:	ldrdeq	r2, [r1], -r8
   12a20:	ldrdeq	r2, [r1], -r8
   12a24:	ldrdeq	r2, [r1], -r8
   12a28:	ldrdeq	r2, [r1], -r8
   12a2c:	ldrdeq	r2, [r1], -r8
   12a30:	ldrdeq	r2, [r1], -r8
   12a34:	ldrdeq	r2, [r1], -r8
   12a38:	ldrdeq	r2, [r1], -r8
   12a3c:	ldrdeq	r2, [r1], -r8
   12a40:	ldrdeq	r2, [r1], -r8
   12a44:			; <UNDEFINED> instruction: 0x00012cbc
   12a48:	andeq	r2, r1, r0, asr #25
   12a4c:	andeq	r2, r1, r0, asr #25
   12a50:	andeq	r2, r1, r8, lsr #25
   12a54:	andeq	r2, r1, r0, asr #25
   12a58:	andeq	r2, r1, r0, asr #23
   12a5c:	andeq	r2, r1, r0, asr #25
   12a60:	andeq	r2, r1, r8, asr #28
   12a64:	andeq	r2, r1, r0, asr #25
   12a68:	andeq	r2, r1, r0, asr #25
   12a6c:	andeq	r2, r1, r0, asr #25
   12a70:	andeq	r2, r1, r0, asr #23
   12a74:	andeq	r2, r1, r0, asr #23
   12a78:	andeq	r2, r1, r0, asr #23
   12a7c:	andeq	r2, r1, r0, asr #23
   12a80:	andeq	r2, r1, r0, asr #23
   12a84:	andeq	r2, r1, r0, asr #23
   12a88:	andeq	r2, r1, r0, asr #23
   12a8c:	andeq	r2, r1, r0, asr #23
   12a90:	andeq	r2, r1, r0, asr #23
   12a94:	andeq	r2, r1, r0, asr #23
   12a98:	andeq	r2, r1, r0, asr #23
   12a9c:	andeq	r2, r1, r0, asr #23
   12aa0:	andeq	r2, r1, r0, asr #23
   12aa4:	andeq	r2, r1, r0, asr #23
   12aa8:	andeq	r2, r1, r0, asr #23
   12aac:	andeq	r2, r1, r0, asr #23
   12ab0:	andeq	r2, r1, r0, asr #25
   12ab4:	andeq	r2, r1, r0, asr #25
   12ab8:	andeq	r2, r1, r0, asr #25
   12abc:	andeq	r2, r1, r0, asr #25
   12ac0:	andeq	r2, r1, r0, lsl lr
   12ac4:	ldrdeq	r2, [r1], -r8
   12ac8:	andeq	r2, r1, r0, asr #23
   12acc:	andeq	r2, r1, r0, asr #23
   12ad0:	andeq	r2, r1, r0, asr #23
   12ad4:	andeq	r2, r1, r0, asr #23
   12ad8:	andeq	r2, r1, r0, asr #23
   12adc:	andeq	r2, r1, r0, asr #23
   12ae0:	andeq	r2, r1, r0, asr #23
   12ae4:	andeq	r2, r1, r0, asr #23
   12ae8:	andeq	r2, r1, r0, asr #23
   12aec:	andeq	r2, r1, r0, asr #23
   12af0:	andeq	r2, r1, r0, asr #23
   12af4:	andeq	r2, r1, r0, asr #23
   12af8:	andeq	r2, r1, r0, asr #23
   12afc:	andeq	r2, r1, r0, asr #23
   12b00:	andeq	r2, r1, r0, asr #23
   12b04:	andeq	r2, r1, r0, asr #23
   12b08:	andeq	r2, r1, r0, asr #23
   12b0c:	andeq	r2, r1, r0, asr #23
   12b10:	andeq	r2, r1, r0, asr #23
   12b14:	andeq	r2, r1, r0, asr #23
   12b18:	andeq	r2, r1, r0, asr #23
   12b1c:	andeq	r2, r1, r0, asr #23
   12b20:	andeq	r2, r1, r0, asr #23
   12b24:	andeq	r2, r1, r0, asr #23
   12b28:	andeq	r2, r1, r0, asr #23
   12b2c:	andeq	r2, r1, r0, asr #23
   12b30:	andeq	r2, r1, r0, asr #25
   12b34:	andeq	r2, r1, r8, ror #25
   12b38:	andeq	r2, r1, r0, asr #23
   12b3c:	andeq	r2, r1, r0, asr #25
   12b40:	andeq	r2, r1, r0, asr #23
   12b44:	andeq	r2, r1, r0, asr #25
   12b48:	andeq	r2, r1, r0, asr #23
   12b4c:	andeq	r2, r1, r0, asr #23
   12b50:	andeq	r2, r1, r0, asr #23
   12b54:	andeq	r2, r1, r0, asr #23
   12b58:	andeq	r2, r1, r0, asr #23
   12b5c:	andeq	r2, r1, r0, asr #23
   12b60:	andeq	r2, r1, r0, asr #23
   12b64:	andeq	r2, r1, r0, asr #23
   12b68:	andeq	r2, r1, r0, asr #23
   12b6c:	andeq	r2, r1, r0, asr #23
   12b70:	andeq	r2, r1, r0, asr #23
   12b74:	andeq	r2, r1, r0, asr #23
   12b78:	andeq	r2, r1, r0, asr #23
   12b7c:	andeq	r2, r1, r0, asr #23
   12b80:	andeq	r2, r1, r0, asr #23
   12b84:	andeq	r2, r1, r0, asr #23
   12b88:	andeq	r2, r1, r0, asr #23
   12b8c:	andeq	r2, r1, r0, asr #23
   12b90:	andeq	r2, r1, r0, asr #23
   12b94:	andeq	r2, r1, r0, asr #23
   12b98:	andeq	r2, r1, r0, asr #23
   12b9c:	andeq	r2, r1, r0, asr #23
   12ba0:	andeq	r2, r1, r0, asr #23
   12ba4:	andeq	r2, r1, r0, asr #23
   12ba8:	andeq	r2, r1, r0, asr #23
   12bac:	andeq	r2, r1, r0, asr #23
   12bb0:	andeq	r2, r1, ip, ror ip
   12bb4:	andeq	r2, r1, r0, asr #25
   12bb8:	andeq	r2, r1, ip, ror ip
   12bbc:	andeq	r2, r1, r8, lsr #25
   12bc0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bc4:	tst	r0, #1
   12bc8:	bne	12bf4 <__assert_fail@plt+0x1c3c>
   12bcc:	ldr	r1, [fp, #16]
   12bd0:	ubfx	r0, r6, #5, #3
   12bd4:	mov	r2, #1
   12bd8:	ldr	r0, [r1, r0, lsl #2]
   12bdc:	and	r1, r6, #31
   12be0:	tst	r0, r2, lsl r1
   12be4:	beq	12bf4 <__assert_fail@plt+0x1c3c>
   12be8:	mov	r0, r6
   12bec:	mov	r1, r9
   12bf0:	b	12c08 <__assert_fail@plt+0x1c50>
   12bf4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12bf8:	mov	r1, r9
   12bfc:	cmp	r0, #0
   12c00:	mov	r0, r6
   12c04:	beq	12f48 <__assert_fail@plt+0x1f90>
   12c08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c0c:	tst	r2, #1
   12c10:	bne	13518 <__assert_fail@plt+0x2560>
   12c14:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c1c:	subs	r2, r2, #2
   12c20:	movwne	r2, #1
   12c24:	orr	r2, r2, r3
   12c28:	tst	r2, #1
   12c2c:	bne	12c68 <__assert_fail@plt+0x1cb0>
   12c30:	cmp	r8, r4
   12c34:	movcc	r2, #39	; 0x27
   12c38:	strbcc	r2, [r5, r8]
   12c3c:	add	r2, r8, #1
   12c40:	cmp	r2, r4
   12c44:	movcc	r3, #36	; 0x24
   12c48:	strbcc	r3, [r5, r2]
   12c4c:	add	r2, r8, #2
   12c50:	add	r8, r8, #3
   12c54:	cmp	r2, r4
   12c58:	movcc	r3, #39	; 0x27
   12c5c:	strbcc	r3, [r5, r2]
   12c60:	mov	r2, #1
   12c64:	str	r2, [fp, #-56]	; 0xffffffc8
   12c68:	cmp	r8, r4
   12c6c:	movcc	r2, #92	; 0x5c
   12c70:	strbcc	r2, [r5, r8]
   12c74:	add	r8, r8, #1
   12c78:	b	12f8c <__assert_fail@plt+0x1fd4>
   12c7c:	cmp	lr, #1
   12c80:	beq	12ca8 <__assert_fail@plt+0x1cf0>
   12c84:	mov	r9, #0
   12c88:	cmn	lr, #1
   12c8c:	bne	12cb4 <__assert_fail@plt+0x1cfc>
   12c90:	ldrb	r0, [ip, #1]
   12c94:	cmp	r0, #0
   12c98:	beq	12ca8 <__assert_fail@plt+0x1cf0>
   12c9c:	mvn	lr, #0
   12ca0:	mov	sl, #0
   12ca4:	b	12bc0 <__assert_fail@plt+0x1c08>
   12ca8:	mov	r9, #0
   12cac:	cmp	r7, #0
   12cb0:	beq	12cbc <__assert_fail@plt+0x1d04>
   12cb4:	mov	sl, #0
   12cb8:	b	12bc0 <__assert_fail@plt+0x1c08>
   12cbc:	mov	r1, #1
   12cc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12cc4:	cmp	r0, #2
   12cc8:	bne	12ce0 <__assert_fail@plt+0x1d28>
   12ccc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cd0:	mov	r9, r1
   12cd4:	tst	r0, #1
   12cd8:	beq	12bc0 <__assert_fail@plt+0x1c08>
   12cdc:	b	13518 <__assert_fail@plt+0x2560>
   12ce0:	mov	r9, r1
   12ce4:	b	12bc0 <__assert_fail@plt+0x1c08>
   12ce8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12cec:	cmp	r0, #2
   12cf0:	bne	12f2c <__assert_fail@plt+0x1f74>
   12cf4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cf8:	tst	r0, #1
   12cfc:	bne	13518 <__assert_fail@plt+0x2560>
   12d00:	mov	sl, #0
   12d04:	b	12f40 <__assert_fail@plt+0x1f88>
   12d08:	mov	r0, #102	; 0x66
   12d0c:	b	12fb4 <__assert_fail@plt+0x1ffc>
   12d10:	mov	r2, #116	; 0x74
   12d14:	b	12d24 <__assert_fail@plt+0x1d6c>
   12d18:	mov	r0, #98	; 0x62
   12d1c:	b	12fb4 <__assert_fail@plt+0x1ffc>
   12d20:	mov	r2, #114	; 0x72
   12d24:	ldr	r0, [sp, #68]	; 0x44
   12d28:	tst	r0, #1
   12d2c:	mov	r0, r2
   12d30:	bne	12fb4 <__assert_fail@plt+0x1ffc>
   12d34:	b	13518 <__assert_fail@plt+0x2560>
   12d38:	ldr	r0, [sp, #84]	; 0x54
   12d3c:	tst	r0, #1
   12d40:	beq	12fd0 <__assert_fail@plt+0x2018>
   12d44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d48:	tst	r0, #1
   12d4c:	bne	13604 <__assert_fail@plt+0x264c>
   12d50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d54:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12d58:	subs	r0, r0, #2
   12d5c:	movwne	r0, #1
   12d60:	orr	r0, r0, r1
   12d64:	tst	r0, #1
   12d68:	bne	12da4 <__assert_fail@plt+0x1dec>
   12d6c:	cmp	r8, r4
   12d70:	movcc	r0, #39	; 0x27
   12d74:	strbcc	r0, [r5, r8]
   12d78:	add	r0, r8, #1
   12d7c:	cmp	r0, r4
   12d80:	movcc	r1, #36	; 0x24
   12d84:	strbcc	r1, [r5, r0]
   12d88:	add	r0, r8, #2
   12d8c:	add	r8, r8, #3
   12d90:	cmp	r0, r4
   12d94:	movcc	r1, #39	; 0x27
   12d98:	strbcc	r1, [r5, r0]
   12d9c:	mov	r0, #1
   12da0:	str	r0, [fp, #-56]	; 0xffffffc8
   12da4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12da8:	cmp	r8, r4
   12dac:	mov	r9, #0
   12db0:	mov	sl, #1
   12db4:	mov	r6, #48	; 0x30
   12db8:	movcc	r0, #92	; 0x5c
   12dbc:	strbcc	r0, [r5, r8]
   12dc0:	add	r0, r8, #1
   12dc4:	cmp	r1, #2
   12dc8:	beq	13198 <__assert_fail@plt+0x21e0>
   12dcc:	add	r1, r7, #1
   12dd0:	cmp	r1, lr
   12dd4:	bcs	13198 <__assert_fail@plt+0x21e0>
   12dd8:	ldrb	r1, [ip, r1]
   12ddc:	sub	r1, r1, #48	; 0x30
   12de0:	uxtb	r1, r1
   12de4:	cmp	r1, #9
   12de8:	bhi	13198 <__assert_fail@plt+0x21e0>
   12dec:	cmp	r0, r4
   12df0:	movcc	r1, #48	; 0x30
   12df4:	strbcc	r1, [r5, r0]
   12df8:	add	r0, r8, #2
   12dfc:	add	r8, r8, #3
   12e00:	cmp	r0, r4
   12e04:	movcc	r1, #48	; 0x30
   12e08:	strbcc	r1, [r5, r0]
   12e0c:	b	12bc0 <__assert_fail@plt+0x1c08>
   12e10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e14:	mov	sl, #0
   12e18:	mov	r6, #63	; 0x3f
   12e1c:	cmp	r0, #5
   12e20:	beq	131a0 <__assert_fail@plt+0x21e8>
   12e24:	cmp	r0, #2
   12e28:	bne	13248 <__assert_fail@plt+0x2290>
   12e2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e30:	mov	r9, #0
   12e34:	tst	r0, #1
   12e38:	beq	12bc0 <__assert_fail@plt+0x1c08>
   12e3c:	b	13518 <__assert_fail@plt+0x2560>
   12e40:	mov	r0, #118	; 0x76
   12e44:	b	12fb4 <__assert_fail@plt+0x1ffc>
   12e48:	mov	r0, #1
   12e4c:	mov	r6, #39	; 0x27
   12e50:	str	r0, [sp, #60]	; 0x3c
   12e54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e58:	cmp	r0, #2
   12e5c:	bne	12fec <__assert_fail@plt+0x2034>
   12e60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e64:	tst	r0, #1
   12e68:	bne	13518 <__assert_fail@plt+0x2560>
   12e6c:	ldr	r2, [sp, #56]	; 0x38
   12e70:	clz	r1, r4
   12e74:	mov	sl, #0
   12e78:	mov	r9, #1
   12e7c:	lsr	r1, r1, #5
   12e80:	cmp	r2, #0
   12e84:	mov	r0, r2
   12e88:	movwne	r0, #1
   12e8c:	orrs	r0, r0, r1
   12e90:	moveq	r2, r4
   12e94:	moveq	r4, r0
   12e98:	cmp	r8, r4
   12e9c:	str	r2, [sp, #56]	; 0x38
   12ea0:	movcc	r0, #39	; 0x27
   12ea4:	strbcc	r0, [r5, r8]
   12ea8:	add	r0, r8, #1
   12eac:	cmp	r0, r4
   12eb0:	movcc	r1, #92	; 0x5c
   12eb4:	strbcc	r1, [r5, r0]
   12eb8:	add	r0, r8, #2
   12ebc:	add	r8, r8, #3
   12ec0:	cmp	r0, r4
   12ec4:	movcc	r1, #39	; 0x27
   12ec8:	strbcc	r1, [r5, r0]
   12ecc:	mov	r0, #0
   12ed0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ed4:	b	12bc0 <__assert_fail@plt+0x1c08>
   12ed8:	ldr	r0, [sp, #40]	; 0x28
   12edc:	str	r4, [sp, #88]	; 0x58
   12ee0:	cmp	r0, #1
   12ee4:	bne	12ff4 <__assert_fail@plt+0x203c>
   12ee8:	str	lr, [sp, #28]
   12eec:	bl	10ec8 <__ctype_b_loc@plt>
   12ef0:	ldr	r0, [r0]
   12ef4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ef8:	mov	r2, #1
   12efc:	add	r0, r0, r6, lsl #1
   12f00:	ldrb	r0, [r0, #1]
   12f04:	ubfx	r9, r0, #6, #1
   12f08:	ldr	r0, [sp, #52]	; 0x34
   12f0c:	cmp	r2, #1
   12f10:	orr	r0, r9, r0
   12f14:	bhi	13250 <__assert_fail@plt+0x2298>
   12f18:	tst	r0, #1
   12f1c:	beq	13250 <__assert_fail@plt+0x2298>
   12f20:	ldr	lr, [sp, #28]
   12f24:	ldr	r4, [sp, #88]	; 0x58
   12f28:	b	12bc0 <__assert_fail@plt+0x1c08>
   12f2c:	ldr	r1, [sp, #48]	; 0x30
   12f30:	mov	sl, #0
   12f34:	mov	r0, #92	; 0x5c
   12f38:	cmp	r1, #0
   12f3c:	beq	12fb4 <__assert_fail@plt+0x1ffc>
   12f40:	mov	r6, #92	; 0x5c
   12f44:	mov	r9, #0
   12f48:	cmp	sl, #0
   12f4c:	bne	12f84 <__assert_fail@plt+0x1fcc>
   12f50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f54:	tst	r0, #1
   12f58:	beq	12f84 <__assert_fail@plt+0x1fcc>
   12f5c:	cmp	r8, r4
   12f60:	movcc	r0, #39	; 0x27
   12f64:	strbcc	r0, [r5, r8]
   12f68:	add	r0, r8, #1
   12f6c:	add	r8, r8, #2
   12f70:	cmp	r0, r4
   12f74:	movcc	r1, #39	; 0x27
   12f78:	strbcc	r1, [r5, r0]
   12f7c:	mov	r0, #0
   12f80:	str	r0, [fp, #-56]	; 0xffffffc8
   12f84:	mov	r1, r9
   12f88:	mov	r0, r6
   12f8c:	cmp	r8, r4
   12f90:	strbcc	r0, [r5, r8]
   12f94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f98:	add	r8, r8, #1
   12f9c:	and	r0, r0, r1
   12fa0:	str	r0, [fp, #-48]	; 0xffffffd0
   12fa4:	add	r7, r7, #1
   12fa8:	cmn	lr, #1
   12fac:	bne	128ec <__assert_fail@plt+0x1934>
   12fb0:	b	128f8 <__assert_fail@plt+0x1940>
   12fb4:	ldr	r1, [sp, #84]	; 0x54
   12fb8:	mov	sl, #0
   12fbc:	mov	r9, #0
   12fc0:	tst	r1, #1
   12fc4:	mov	r1, #0
   12fc8:	beq	12bc0 <__assert_fail@plt+0x1c08>
   12fcc:	b	12c08 <__assert_fail@plt+0x1c50>
   12fd0:	ldr	r0, [sp, #36]	; 0x24
   12fd4:	mov	r6, #0
   12fd8:	mov	sl, #0
   12fdc:	mov	r9, #0
   12fe0:	cmp	r0, #0
   12fe4:	beq	12bc0 <__assert_fail@plt+0x1c08>
   12fe8:	b	12fa4 <__assert_fail@plt+0x1fec>
   12fec:	mov	r9, #1
   12ff0:	b	12bc0 <__assert_fail@plt+0x1c08>
   12ff4:	mov	r0, #0
   12ff8:	cmn	lr, #1
   12ffc:	sub	r4, fp, #40	; 0x28
   13000:	str	r0, [fp, #-36]	; 0xffffffdc
   13004:	str	r0, [fp, #-40]	; 0xffffffd8
   13008:	bne	1301c <__assert_fail@plt+0x2064>
   1300c:	mov	r0, ip
   13010:	bl	10eec <strlen@plt>
   13014:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13018:	mov	lr, r0
   1301c:	ldr	r0, [sp, #72]	; 0x48
   13020:	mov	r9, #1
   13024:	mov	r2, #0
   13028:	str	lr, [sp, #28]
   1302c:	add	r0, r0, r7
   13030:	str	r0, [sp, #20]
   13034:	b	13078 <__assert_fail@plt+0x20c0>
   13038:	ldr	r5, [sp, #44]	; 0x2c
   1303c:	add	r5, r0, r5
   13040:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13044:	bl	10e14 <iswprint@plt>
   13048:	cmp	r0, #0
   1304c:	sub	r4, fp, #40	; 0x28
   13050:	movwne	r0, #1
   13054:	and	r9, r9, r0
   13058:	mov	r0, r4
   1305c:	bl	10dd8 <mbsinit@plt>
   13060:	mov	r2, r5
   13064:	ldr	lr, [sp, #28]
   13068:	ldr	r5, [fp, #-84]	; 0xffffffac
   1306c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13070:	cmp	r0, #0
   13074:	bne	12f08 <__assert_fail@plt+0x1f50>
   13078:	add	r0, r2, r7
   1307c:	str	r2, [sp, #44]	; 0x2c
   13080:	mov	r3, r4
   13084:	add	r1, ip, r0
   13088:	str	r0, [sp, #24]
   1308c:	sub	r2, lr, r0
   13090:	sub	r0, fp, #44	; 0x2c
   13094:	bl	15210 <__assert_fail@plt+0x4258>
   13098:	cmp	r0, #0
   1309c:	beq	13440 <__assert_fail@plt+0x2488>
   130a0:	cmn	r0, #1
   130a4:	beq	133fc <__assert_fail@plt+0x2444>
   130a8:	ldr	lr, [sp, #28]
   130ac:	cmn	r0, #2
   130b0:	beq	13404 <__assert_fail@plt+0x244c>
   130b4:	ldr	r2, [sp, #64]	; 0x40
   130b8:	ldr	r4, [sp, #88]	; 0x58
   130bc:	ldr	ip, [sp, #84]	; 0x54
   130c0:	cmp	r0, #2
   130c4:	mov	r1, #0
   130c8:	movwcc	r1, #1
   130cc:	eor	r2, r2, #1
   130d0:	orrs	r1, r2, r1
   130d4:	bne	13038 <__assert_fail@plt+0x2080>
   130d8:	ldr	r1, [sp, #44]	; 0x2c
   130dc:	ldr	r2, [sp, #20]
   130e0:	add	r1, r2, r1
   130e4:	sub	r2, r0, #1
   130e8:	b	130f8 <__assert_fail@plt+0x2140>
   130ec:	add	r1, r1, #1
   130f0:	subs	r2, r2, #1
   130f4:	beq	13038 <__assert_fail@plt+0x2080>
   130f8:	ldrb	r3, [r1]
   130fc:	sub	r3, r3, #91	; 0x5b
   13100:	cmp	r3, #33	; 0x21
   13104:	bhi	130ec <__assert_fail@plt+0x2134>
   13108:	add	r5, pc, #0
   1310c:	ldr	pc, [r5, r3, lsl #2]
   13110:	strdeq	r3, [r1], -r4
   13114:	strdeq	r3, [r1], -r4
   13118:	andeq	r3, r1, ip, ror #1
   1311c:	strdeq	r3, [r1], -r4
   13120:	andeq	r3, r1, ip, ror #1
   13124:	strdeq	r3, [r1], -r4
   13128:	andeq	r3, r1, ip, ror #1
   1312c:	andeq	r3, r1, ip, ror #1
   13130:	andeq	r3, r1, ip, ror #1
   13134:	andeq	r3, r1, ip, ror #1
   13138:	andeq	r3, r1, ip, ror #1
   1313c:	andeq	r3, r1, ip, ror #1
   13140:	andeq	r3, r1, ip, ror #1
   13144:	andeq	r3, r1, ip, ror #1
   13148:	andeq	r3, r1, ip, ror #1
   1314c:	andeq	r3, r1, ip, ror #1
   13150:	andeq	r3, r1, ip, ror #1
   13154:	andeq	r3, r1, ip, ror #1
   13158:	andeq	r3, r1, ip, ror #1
   1315c:	andeq	r3, r1, ip, ror #1
   13160:	andeq	r3, r1, ip, ror #1
   13164:	andeq	r3, r1, ip, ror #1
   13168:	andeq	r3, r1, ip, ror #1
   1316c:	andeq	r3, r1, ip, ror #1
   13170:	andeq	r3, r1, ip, ror #1
   13174:	andeq	r3, r1, ip, ror #1
   13178:	andeq	r3, r1, ip, ror #1
   1317c:	andeq	r3, r1, ip, ror #1
   13180:	andeq	r3, r1, ip, ror #1
   13184:	andeq	r3, r1, ip, ror #1
   13188:	andeq	r3, r1, ip, ror #1
   1318c:	andeq	r3, r1, ip, ror #1
   13190:	andeq	r3, r1, ip, ror #1
   13194:	strdeq	r3, [r1], -r4
   13198:	mov	r8, r0
   1319c:	b	12bc0 <__assert_fail@plt+0x1c08>
   131a0:	ldr	r0, [sp, #32]
   131a4:	cmp	r0, #0
   131a8:	beq	13248 <__assert_fail@plt+0x2290>
   131ac:	add	r0, r7, #2
   131b0:	cmp	r0, lr
   131b4:	bcs	13248 <__assert_fail@plt+0x2290>
   131b8:	add	r1, r7, ip
   131bc:	ldrb	r1, [r1, #1]
   131c0:	cmp	r1, #63	; 0x3f
   131c4:	bne	13248 <__assert_fail@plt+0x2290>
   131c8:	ldrb	r9, [ip, r0]
   131cc:	sub	r2, r9, #33	; 0x21
   131d0:	cmp	r2, #29
   131d4:	bhi	13248 <__assert_fail@plt+0x2290>
   131d8:	movw	r1, #20929	; 0x51c1
   131dc:	mov	r3, #1
   131e0:	movt	r1, #14336	; 0x3800
   131e4:	tst	r1, r3, lsl r2
   131e8:	beq	13248 <__assert_fail@plt+0x2290>
   131ec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   131f0:	tst	r1, #1
   131f4:	bne	13518 <__assert_fail@plt+0x2560>
   131f8:	cmp	r8, r4
   131fc:	add	r2, r8, #1
   13200:	mov	r6, r9
   13204:	mov	r7, r0
   13208:	mov	r9, #0
   1320c:	movcc	r1, #63	; 0x3f
   13210:	strbcc	r1, [r5, r8]
   13214:	cmp	r2, r4
   13218:	movcc	r1, #34	; 0x22
   1321c:	strbcc	r1, [r5, r2]
   13220:	add	r2, r8, #2
   13224:	cmp	r2, r4
   13228:	movcc	r1, #34	; 0x22
   1322c:	strbcc	r1, [r5, r2]
   13230:	add	r2, r8, #3
   13234:	add	r8, r8, #4
   13238:	cmp	r2, r4
   1323c:	movcc	r1, #63	; 0x3f
   13240:	strbcc	r1, [r5, r2]
   13244:	b	12bc0 <__assert_fail@plt+0x1c08>
   13248:	mov	r9, #0
   1324c:	b	12bc0 <__assert_fail@plt+0x1c08>
   13250:	ldr	lr, [sp, #28]
   13254:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13258:	add	r1, r2, r7
   1325c:	mov	r2, #0
   13260:	str	r1, [sp, #44]	; 0x2c
   13264:	tst	r0, #1
   13268:	bne	13384 <__assert_fail@plt+0x23cc>
   1326c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13270:	tst	r1, #1
   13274:	bne	13514 <__assert_fail@plt+0x255c>
   13278:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1327c:	subs	r2, r1, #2
   13280:	movwne	r2, #1
   13284:	orr	r2, r2, r4
   13288:	tst	r2, #1
   1328c:	bne	132d0 <__assert_fail@plt+0x2318>
   13290:	ldr	r1, [sp, #88]	; 0x58
   13294:	add	r2, r8, #1
   13298:	mov	r4, #1
   1329c:	cmp	r8, r1
   132a0:	movcc	r1, #39	; 0x27
   132a4:	strbcc	r1, [r5, r8]
   132a8:	ldr	r1, [sp, #88]	; 0x58
   132ac:	cmp	r2, r1
   132b0:	movcc	r1, #36	; 0x24
   132b4:	strbcc	r1, [r5, r2]
   132b8:	ldr	r1, [sp, #88]	; 0x58
   132bc:	add	r2, r8, #2
   132c0:	add	r8, r8, #3
   132c4:	cmp	r2, r1
   132c8:	movcc	r1, #39	; 0x27
   132cc:	strbcc	r1, [r5, r2]
   132d0:	ldr	r1, [sp, #88]	; 0x58
   132d4:	add	r2, r8, #1
   132d8:	cmp	r8, r1
   132dc:	movcc	r1, #92	; 0x5c
   132e0:	strbcc	r1, [r5, r8]
   132e4:	ldr	r1, [sp, #88]	; 0x58
   132e8:	cmp	r2, r1
   132ec:	bcs	13300 <__assert_fail@plt+0x2348>
   132f0:	uxtb	r3, r6
   132f4:	mov	r1, #48	; 0x30
   132f8:	orr	r3, r1, r3, lsr #6
   132fc:	strb	r3, [r5, r2]
   13300:	ldr	r1, [sp, #88]	; 0x58
   13304:	add	r2, r8, #2
   13308:	add	r8, r8, #3
   1330c:	cmp	r2, r1
   13310:	lsrcc	r3, r6, #3
   13314:	movcc	r1, #6
   13318:	bficc	r3, r1, #3, #29
   1331c:	mov	r1, #6
   13320:	bfi	r6, r1, #3, #29
   13324:	strbcc	r3, [r5, r2]
   13328:	mov	r2, #1
   1332c:	b	133ac <__assert_fail@plt+0x23f4>
   13330:	ldr	r1, [sp, #88]	; 0x58
   13334:	ldr	r5, [fp, #-84]	; 0xffffffac
   13338:	ldr	r4, [sp, #88]	; 0x58
   1333c:	cmp	r8, r1
   13340:	movcc	r1, #39	; 0x27
   13344:	strbcc	r1, [r5, r8]
   13348:	add	r1, r8, #1
   1334c:	add	r8, r8, #2
   13350:	cmp	r1, r4
   13354:	movcc	r4, #39	; 0x27
   13358:	strbcc	r4, [r5, r1]
   1335c:	mov	r4, #0
   13360:	ldr	r1, [sp, #88]	; 0x58
   13364:	cmp	r8, r1
   13368:	ldr	r1, [sp, #72]	; 0x48
   1336c:	strbcc	r6, [r5, r8]
   13370:	add	r8, r8, #1
   13374:	ldrb	r6, [r1, r7]
   13378:	mov	r7, r3
   1337c:	tst	r0, #1
   13380:	beq	1326c <__assert_fail@plt+0x22b4>
   13384:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13388:	tst	r1, #1
   1338c:	beq	133a4 <__assert_fail@plt+0x23ec>
   13390:	ldr	r1, [sp, #88]	; 0x58
   13394:	cmp	r8, r1
   13398:	movcc	r1, #92	; 0x5c
   1339c:	strbcc	r1, [r5, r8]
   133a0:	add	r8, r8, #1
   133a4:	mov	r1, #0
   133a8:	str	r1, [fp, #-52]	; 0xffffffcc
   133ac:	ldr	r1, [sp, #44]	; 0x2c
   133b0:	add	r3, r7, #1
   133b4:	and	sl, r2, #1
   133b8:	cmp	r1, r3
   133bc:	bls	133e0 <__assert_fail@plt+0x2428>
   133c0:	cmp	sl, #0
   133c4:	mvn	r5, r4
   133c8:	movwne	sl, #1
   133cc:	orr	r5, r5, sl
   133d0:	tst	r5, #1
   133d4:	beq	13330 <__assert_fail@plt+0x2378>
   133d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   133dc:	b	13360 <__assert_fail@plt+0x23a8>
   133e0:	str	r4, [fp, #-56]	; 0xffffffc8
   133e4:	ldr	r4, [sp, #88]	; 0x58
   133e8:	cmp	sl, #0
   133ec:	movwne	sl, #1
   133f0:	cmp	sl, #0
   133f4:	beq	12f50 <__assert_fail@plt+0x1f98>
   133f8:	b	12f84 <__assert_fail@plt+0x1fcc>
   133fc:	mov	r9, #0
   13400:	b	13440 <__assert_fail@plt+0x2488>
   13404:	ldr	r0, [sp, #24]
   13408:	mov	r9, #0
   1340c:	cmp	lr, r0
   13410:	bls	13440 <__assert_fail@plt+0x2488>
   13414:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13418:	ldr	r2, [sp, #44]	; 0x2c
   1341c:	add	r0, ip, r7
   13420:	ldrb	r1, [r0, r2]
   13424:	cmp	r1, #0
   13428:	beq	12f08 <__assert_fail@plt+0x1f50>
   1342c:	add	r2, r2, #1
   13430:	add	r1, r7, r2
   13434:	cmp	r1, lr
   13438:	bcc	13420 <__assert_fail@plt+0x2468>
   1343c:	b	12f08 <__assert_fail@plt+0x1f50>
   13440:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13444:	ldr	r2, [sp, #44]	; 0x2c
   13448:	b	12f08 <__assert_fail@plt+0x1f50>
   1344c:	mov	lr, r7
   13450:	b	13458 <__assert_fail@plt+0x24a0>
   13454:	mvn	lr, #0
   13458:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1345c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13460:	eor	r0, r1, #2
   13464:	orr	r0, r0, r8
   13468:	clz	r0, r0
   1346c:	lsr	r0, r0, #5
   13470:	tst	r2, r0
   13474:	bne	13518 <__assert_fail@plt+0x2560>
   13478:	subs	r0, r1, #2
   1347c:	movwne	r0, #1
   13480:	orr	r0, r2, r0
   13484:	tst	r0, #1
   13488:	ldreq	r0, [sp, #60]	; 0x3c
   1348c:	eoreq	r0, r0, #1
   13490:	tsteq	r0, #1
   13494:	bne	135ac <__assert_fail@plt+0x25f4>
   13498:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1349c:	mov	sl, lr
   134a0:	tst	r0, #1
   134a4:	bne	13578 <__assert_fail@plt+0x25c0>
   134a8:	ldr	r6, [sp, #56]	; 0x38
   134ac:	mov	r9, #0
   134b0:	cmp	r6, #0
   134b4:	beq	135a4 <__assert_fail@plt+0x25ec>
   134b8:	ldr	r0, [sp, #84]	; 0x54
   134bc:	mov	r1, #0
   134c0:	mov	r7, #2
   134c4:	cmp	r4, #0
   134c8:	str	r1, [fp, #-48]	; 0xffffffd0
   134cc:	mov	r1, #0
   134d0:	str	r1, [fp, #-76]	; 0xffffffb4
   134d4:	beq	12674 <__assert_fail@plt+0x16bc>
   134d8:	b	135ac <__assert_fail@plt+0x25f4>
   134dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   134e0:	ldr	r1, [fp, #12]
   134e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   134e8:	mov	lr, r4
   134ec:	mov	r4, r6
   134f0:	b	13538 <__assert_fail@plt+0x2580>
   134f4:	tst	ip, #1
   134f8:	ldr	r5, [fp, #-84]	; 0xffffffac
   134fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13500:	ldr	r1, [fp, #12]
   13504:	mov	r0, #2
   13508:	movwne	r0, #4
   1350c:	mov	r2, r0
   13510:	b	13538 <__assert_fail@plt+0x2580>
   13514:	ldr	r4, [sp, #88]	; 0x58
   13518:	ldr	r1, [sp, #84]	; 0x54
   1351c:	mov	r0, #2
   13520:	tst	r1, #1
   13524:	movwne	r0, #4
   13528:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1352c:	ldr	r1, [fp, #12]
   13530:	cmp	r2, #2
   13534:	moveq	r2, r0
   13538:	mov	r0, #0
   1353c:	bic	r1, r1, #2
   13540:	str	r2, [sp]
   13544:	mov	r2, ip
   13548:	mov	r3, lr
   1354c:	str	r0, [sp, #8]
   13550:	ldr	r0, [sp, #76]	; 0x4c
   13554:	str	r1, [sp, #4]
   13558:	mov	r1, r4
   1355c:	str	r0, [sp, #12]
   13560:	ldr	r0, [sp, #80]	; 0x50
   13564:	str	r0, [sp, #16]
   13568:	mov	r0, r5
   1356c:	bl	125e4 <__assert_fail@plt+0x162c>
   13570:	mov	r8, r0
   13574:	b	135f8 <__assert_fail@plt+0x2640>
   13578:	mov	r0, #5
   1357c:	ldr	r1, [sp, #56]	; 0x38
   13580:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13584:	mov	r3, sl
   13588:	str	r0, [sp]
   1358c:	ldr	r0, [fp, #12]
   13590:	str	r0, [sp, #4]
   13594:	ldr	r0, [fp, #16]
   13598:	str	r0, [sp, #8]
   1359c:	ldr	r0, [sp, #76]	; 0x4c
   135a0:	b	1355c <__assert_fail@plt+0x25a4>
   135a4:	mov	r0, #0
   135a8:	str	r0, [fp, #-76]	; 0xffffffb4
   135ac:	ldr	r1, [fp, #-88]	; 0xffffffa8
   135b0:	cmp	r1, #0
   135b4:	beq	135ec <__assert_fail@plt+0x2634>
   135b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   135bc:	tst	r0, #1
   135c0:	bne	135ec <__assert_fail@plt+0x2634>
   135c4:	ldrb	r0, [r1]
   135c8:	cmp	r0, #0
   135cc:	beq	135ec <__assert_fail@plt+0x2634>
   135d0:	add	r1, r1, #1
   135d4:	cmp	r8, r4
   135d8:	strbcc	r0, [r5, r8]
   135dc:	add	r8, r8, #1
   135e0:	ldrb	r0, [r1], #1
   135e4:	cmp	r0, #0
   135e8:	bne	135d4 <__assert_fail@plt+0x261c>
   135ec:	cmp	r8, r4
   135f0:	movcc	r0, #0
   135f4:	strbcc	r0, [r5, r8]
   135f8:	mov	r0, r8
   135fc:	sub	sp, fp, #28
   13600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13604:	mov	r0, #4
   13608:	b	13528 <__assert_fail@plt+0x2570>
   1360c:	bl	10fa0 <abort@plt>
   13610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13614:	add	fp, sp, #28
   13618:	sub	sp, sp, #28
   1361c:	movw	r5, #24944	; 0x6170
   13620:	cmp	r2, #0
   13624:	mov	r4, r1
   13628:	mov	r7, r0
   1362c:	str	r0, [sp, #20]
   13630:	movt	r5, #2
   13634:	movne	r5, r2
   13638:	bl	10ef8 <__errno_location@plt>
   1363c:	mov	sl, r0
   13640:	ldr	r2, [r5, #40]	; 0x28
   13644:	ldr	r3, [r5, #44]	; 0x2c
   13648:	ldm	r5, {r0, r1}
   1364c:	orr	r8, r1, #1
   13650:	add	r9, r5, #8
   13654:	mov	r1, #0
   13658:	ldr	r6, [sl]
   1365c:	stm	sp, {r0, r8, r9}
   13660:	mov	r0, #0
   13664:	str	r2, [sp, #12]
   13668:	str	r3, [sp, #16]
   1366c:	mov	r2, r7
   13670:	mov	r3, r4
   13674:	str	r6, [sp, #24]
   13678:	mov	r6, r4
   1367c:	bl	125e4 <__assert_fail@plt+0x162c>
   13680:	add	r7, r0, #1
   13684:	mov	r0, r7
   13688:	bl	14b04 <__assert_fail@plt+0x3b4c>
   1368c:	mov	r4, r0
   13690:	ldr	r0, [r5]
   13694:	ldr	r2, [r5, #44]	; 0x2c
   13698:	ldr	r1, [r5, #40]	; 0x28
   1369c:	mov	r3, r6
   136a0:	stm	sp, {r0, r8, r9}
   136a4:	str	r2, [sp, #16]
   136a8:	ldr	r2, [sp, #20]
   136ac:	str	r1, [sp, #12]
   136b0:	mov	r0, r4
   136b4:	mov	r1, r7
   136b8:	bl	125e4 <__assert_fail@plt+0x162c>
   136bc:	ldr	r0, [sp, #24]
   136c0:	str	r0, [sl]
   136c4:	mov	r0, r4
   136c8:	sub	sp, fp, #28
   136cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d4:	add	fp, sp, #28
   136d8:	sub	sp, sp, #36	; 0x24
   136dc:	movw	r8, #24944	; 0x6170
   136e0:	cmp	r3, #0
   136e4:	mov	r4, r2
   136e8:	str	r2, [sp, #24]
   136ec:	mov	r5, r1
   136f0:	mov	r6, r0
   136f4:	str	r0, [sp, #20]
   136f8:	movt	r8, #2
   136fc:	movne	r8, r3
   13700:	bl	10ef8 <__errno_location@plt>
   13704:	str	r0, [sp, #28]
   13708:	ldr	r1, [r8, #40]	; 0x28
   1370c:	ldr	r2, [r8, #44]	; 0x2c
   13710:	ldr	r7, [r0]
   13714:	cmp	r4, #0
   13718:	add	sl, r8, #8
   1371c:	mov	r0, #0
   13720:	ldm	r8, {r3, r9}
   13724:	orreq	r9, r9, #1
   13728:	stm	sp, {r3, r9, sl}
   1372c:	str	r1, [sp, #12]
   13730:	str	r2, [sp, #16]
   13734:	mov	r1, #0
   13738:	mov	r2, r6
   1373c:	mov	r3, r5
   13740:	str	r7, [sp, #32]
   13744:	mov	r7, r5
   13748:	bl	125e4 <__assert_fail@plt+0x162c>
   1374c:	add	r4, r0, #1
   13750:	mov	r5, r0
   13754:	mov	r0, r4
   13758:	bl	14b04 <__assert_fail@plt+0x3b4c>
   1375c:	mov	r6, r0
   13760:	ldr	r0, [r8]
   13764:	ldr	r2, [r8, #44]	; 0x2c
   13768:	ldr	r1, [r8, #40]	; 0x28
   1376c:	mov	r3, r7
   13770:	stm	sp, {r0, r9, sl}
   13774:	str	r2, [sp, #16]
   13778:	ldr	r2, [sp, #20]
   1377c:	str	r1, [sp, #12]
   13780:	mov	r0, r6
   13784:	mov	r1, r4
   13788:	bl	125e4 <__assert_fail@plt+0x162c>
   1378c:	ldr	r0, [sp, #24]
   13790:	ldr	r1, [sp, #32]
   13794:	ldr	r2, [sp, #28]
   13798:	cmp	r0, #0
   1379c:	str	r1, [r2]
   137a0:	strne	r5, [r0]
   137a4:	mov	r0, r6
   137a8:	sub	sp, fp, #28
   137ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137b4:	add	fp, sp, #24
   137b8:	movw	r5, #24812	; 0x60ec
   137bc:	movw	r8, #24808	; 0x60e8
   137c0:	movt	r5, #2
   137c4:	movt	r8, #2
   137c8:	ldr	r0, [r5]
   137cc:	ldr	r4, [r8]
   137d0:	cmp	r0, #2
   137d4:	blt	13800 <__assert_fail@plt+0x2848>
   137d8:	add	r7, r4, #12
   137dc:	mov	r6, #0
   137e0:	ldr	r0, [r7, r6, lsl #3]
   137e4:	bl	151b0 <__assert_fail@plt+0x41f8>
   137e8:	ldr	r1, [r5]
   137ec:	add	r2, r6, #2
   137f0:	add	r0, r6, #1
   137f4:	mov	r6, r0
   137f8:	cmp	r2, r1
   137fc:	blt	137e0 <__assert_fail@plt+0x2828>
   13800:	ldr	r0, [r4, #4]
   13804:	movw	r9, #24992	; 0x61a0
   13808:	movw	r7, #24816	; 0x60f0
   1380c:	movt	r9, #2
   13810:	movt	r7, #2
   13814:	cmp	r0, r9
   13818:	beq	13828 <__assert_fail@plt+0x2870>
   1381c:	bl	151b0 <__assert_fail@plt+0x41f8>
   13820:	mov	r0, #256	; 0x100
   13824:	stm	r7, {r0, r9}
   13828:	cmp	r4, r7
   1382c:	beq	1383c <__assert_fail@plt+0x2884>
   13830:	mov	r0, r4
   13834:	bl	151b0 <__assert_fail@plt+0x41f8>
   13838:	str	r7, [r8]
   1383c:	mov	r0, #1
   13840:	str	r0, [r5]
   13844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13848:	movw	r3, #24944	; 0x6170
   1384c:	mvn	r2, #0
   13850:	movt	r3, #2
   13854:	b	13858 <__assert_fail@plt+0x28a0>
   13858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1385c:	add	fp, sp, #28
   13860:	sub	sp, sp, #44	; 0x2c
   13864:	mov	r7, r3
   13868:	str	r2, [sp, #36]	; 0x24
   1386c:	str	r1, [sp, #32]
   13870:	mov	r5, r0
   13874:	bl	10ef8 <__errno_location@plt>
   13878:	cmp	r5, #0
   1387c:	bmi	139ec <__assert_fail@plt+0x2a34>
   13880:	cmn	r5, #-2147483647	; 0x80000001
   13884:	beq	139ec <__assert_fail@plt+0x2a34>
   13888:	movw	r8, #24812	; 0x60ec
   1388c:	movw	r4, #24808	; 0x60e8
   13890:	str	r0, [sp, #28]
   13894:	ldr	r0, [r0]
   13898:	movt	r8, #2
   1389c:	movt	r4, #2
   138a0:	ldr	r1, [r8]
   138a4:	ldr	r6, [r4]
   138a8:	str	r0, [sp, #24]
   138ac:	cmp	r1, r5
   138b0:	ble	138bc <__assert_fail@plt+0x2904>
   138b4:	mov	sl, r6
   138b8:	b	13928 <__assert_fail@plt+0x2970>
   138bc:	movw	r9, #24816	; 0x60f0
   138c0:	mov	r0, #8
   138c4:	str	r1, [fp, #-32]	; 0xffffffe0
   138c8:	sub	r1, r5, r1
   138cc:	mvn	r3, #-2147483648	; 0x80000000
   138d0:	movt	r9, #2
   138d4:	str	r0, [sp]
   138d8:	add	r2, r1, #1
   138dc:	sub	r1, fp, #32
   138e0:	subs	r0, r6, r9
   138e4:	movne	r0, r6
   138e8:	bl	14d04 <__assert_fail@plt+0x3d4c>
   138ec:	mov	sl, r0
   138f0:	cmp	r6, r9
   138f4:	str	r0, [r4]
   138f8:	bne	13904 <__assert_fail@plt+0x294c>
   138fc:	ldrd	r0, [r9]
   13900:	stm	sl, {r0, r1}
   13904:	ldr	r1, [r8]
   13908:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1390c:	add	r0, sl, r1, lsl #3
   13910:	sub	r1, r2, r1
   13914:	lsl	r2, r1, #3
   13918:	mov	r1, #0
   1391c:	bl	10f10 <memset@plt>
   13920:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13924:	str	r0, [r8]
   13928:	mov	r9, sl
   1392c:	ldm	r7, {r0, r1}
   13930:	orr	r8, r1, #1
   13934:	add	r1, r7, #8
   13938:	ldr	r2, [r7, #40]	; 0x28
   1393c:	ldr	r3, [r7, #44]	; 0x2c
   13940:	ldr	r6, [r9, r5, lsl #3]!
   13944:	str	r1, [sp, #20]
   13948:	ldr	r4, [r9, #4]!
   1394c:	stm	sp, {r0, r8}
   13950:	add	r0, sp, #8
   13954:	stm	r0, {r1, r2, r3}
   13958:	ldr	r2, [sp, #32]
   1395c:	ldr	r3, [sp, #36]	; 0x24
   13960:	mov	r1, r6
   13964:	mov	r0, r4
   13968:	bl	125e4 <__assert_fail@plt+0x162c>
   1396c:	cmp	r6, r0
   13970:	bhi	139d4 <__assert_fail@plt+0x2a1c>
   13974:	add	r6, r0, #1
   13978:	movw	r0, #24992	; 0x61a0
   1397c:	movt	r0, #2
   13980:	str	r6, [sl, r5, lsl #3]
   13984:	cmp	r4, r0
   13988:	beq	13994 <__assert_fail@plt+0x29dc>
   1398c:	mov	r0, r4
   13990:	bl	151b0 <__assert_fail@plt+0x41f8>
   13994:	mov	r0, r6
   13998:	bl	14b04 <__assert_fail@plt+0x3b4c>
   1399c:	str	r0, [r9]
   139a0:	mov	r4, r0
   139a4:	add	r3, sp, #8
   139a8:	ldr	r0, [r7]
   139ac:	ldr	r1, [r7, #40]	; 0x28
   139b0:	ldr	r2, [r7, #44]	; 0x2c
   139b4:	stm	sp, {r0, r8}
   139b8:	ldr	r0, [sp, #20]
   139bc:	stm	r3, {r0, r1, r2}
   139c0:	ldr	r2, [sp, #32]
   139c4:	ldr	r3, [sp, #36]	; 0x24
   139c8:	mov	r0, r4
   139cc:	mov	r1, r6
   139d0:	bl	125e4 <__assert_fail@plt+0x162c>
   139d4:	ldr	r0, [sp, #28]
   139d8:	ldr	r1, [sp, #24]
   139dc:	str	r1, [r0]
   139e0:	mov	r0, r4
   139e4:	sub	sp, fp, #28
   139e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139ec:	bl	10fa0 <abort@plt>
   139f0:	movw	r3, #24944	; 0x6170
   139f4:	movt	r3, #2
   139f8:	b	13858 <__assert_fail@plt+0x28a0>
   139fc:	movw	r3, #24944	; 0x6170
   13a00:	mov	r1, r0
   13a04:	mov	r0, #0
   13a08:	mvn	r2, #0
   13a0c:	movt	r3, #2
   13a10:	b	13858 <__assert_fail@plt+0x28a0>
   13a14:	movw	r3, #24944	; 0x6170
   13a18:	mov	r2, r1
   13a1c:	mov	r1, r0
   13a20:	mov	r0, #0
   13a24:	movt	r3, #2
   13a28:	b	13858 <__assert_fail@plt+0x28a0>
   13a2c:	push	{fp, lr}
   13a30:	mov	fp, sp
   13a34:	sub	sp, sp, #48	; 0x30
   13a38:	vmov.i32	q8, #0	; 0x00000000
   13a3c:	mov	ip, #32
   13a40:	mov	r3, sp
   13a44:	mov	lr, r2
   13a48:	cmp	r1, #10
   13a4c:	add	r2, r3, #16
   13a50:	vst1.64	{d16-d17}, [r3], ip
   13a54:	vst1.64	{d16-d17}, [r2]
   13a58:	vst1.64	{d16-d17}, [r3]
   13a5c:	beq	13a7c <__assert_fail@plt+0x2ac4>
   13a60:	str	r1, [sp]
   13a64:	mov	r3, sp
   13a68:	mov	r1, lr
   13a6c:	mvn	r2, #0
   13a70:	bl	13858 <__assert_fail@plt+0x28a0>
   13a74:	mov	sp, fp
   13a78:	pop	{fp, pc}
   13a7c:	bl	10fa0 <abort@plt>
   13a80:	push	{r4, sl, fp, lr}
   13a84:	add	fp, sp, #8
   13a88:	sub	sp, sp, #48	; 0x30
   13a8c:	vmov.i32	q8, #0	; 0x00000000
   13a90:	mov	ip, r3
   13a94:	mov	r3, sp
   13a98:	mov	lr, #32
   13a9c:	cmp	r1, #10
   13aa0:	add	r4, r3, #16
   13aa4:	vst1.64	{d16-d17}, [r3], lr
   13aa8:	vst1.64	{d16-d17}, [r4]
   13aac:	vst1.64	{d16-d17}, [r3]
   13ab0:	beq	13ad0 <__assert_fail@plt+0x2b18>
   13ab4:	str	r1, [sp]
   13ab8:	mov	r1, r2
   13abc:	mov	r3, sp
   13ac0:	mov	r2, ip
   13ac4:	bl	13858 <__assert_fail@plt+0x28a0>
   13ac8:	sub	sp, fp, #8
   13acc:	pop	{r4, sl, fp, pc}
   13ad0:	bl	10fa0 <abort@plt>
   13ad4:	push	{fp, lr}
   13ad8:	mov	fp, sp
   13adc:	sub	sp, sp, #48	; 0x30
   13ae0:	vmov.i32	q8, #0	; 0x00000000
   13ae4:	mov	r3, sp
   13ae8:	mov	ip, #32
   13aec:	cmp	r0, #10
   13af0:	add	r2, r3, #16
   13af4:	vst1.64	{d16-d17}, [r3], ip
   13af8:	vst1.64	{d16-d17}, [r2]
   13afc:	vst1.64	{d16-d17}, [r3]
   13b00:	beq	13b20 <__assert_fail@plt+0x2b68>
   13b04:	str	r0, [sp]
   13b08:	mov	r3, sp
   13b0c:	mov	r0, #0
   13b10:	mvn	r2, #0
   13b14:	bl	13858 <__assert_fail@plt+0x28a0>
   13b18:	mov	sp, fp
   13b1c:	pop	{fp, pc}
   13b20:	bl	10fa0 <abort@plt>
   13b24:	push	{fp, lr}
   13b28:	mov	fp, sp
   13b2c:	sub	sp, sp, #48	; 0x30
   13b30:	vmov.i32	q8, #0	; 0x00000000
   13b34:	mov	r3, sp
   13b38:	mov	ip, #32
   13b3c:	cmp	r0, #10
   13b40:	add	lr, r3, #16
   13b44:	vst1.64	{d16-d17}, [r3], ip
   13b48:	vst1.64	{d16-d17}, [lr]
   13b4c:	vst1.64	{d16-d17}, [r3]
   13b50:	beq	13b6c <__assert_fail@plt+0x2bb4>
   13b54:	str	r0, [sp]
   13b58:	mov	r3, sp
   13b5c:	mov	r0, #0
   13b60:	bl	13858 <__assert_fail@plt+0x28a0>
   13b64:	mov	sp, fp
   13b68:	pop	{fp, pc}
   13b6c:	bl	10fa0 <abort@plt>
   13b70:	push	{r4, sl, fp, lr}
   13b74:	add	fp, sp, #8
   13b78:	sub	sp, sp, #48	; 0x30
   13b7c:	mov	lr, r0
   13b80:	movw	r0, #24944	; 0x6170
   13b84:	mov	ip, r1
   13b88:	mov	r1, #32
   13b8c:	mov	r4, #1
   13b90:	movt	r0, #2
   13b94:	add	r3, r0, #16
   13b98:	vld1.64	{d16-d17}, [r0], r1
   13b9c:	vld1.64	{d20-d21}, [r0]
   13ba0:	vld1.64	{d18-d19}, [r3]
   13ba4:	mov	r3, sp
   13ba8:	add	r0, r3, #32
   13bac:	add	r1, r3, #16
   13bb0:	vst1.64	{d20-d21}, [r0]
   13bb4:	mov	r0, #28
   13bb8:	vst1.64	{d18-d19}, [r1]
   13bbc:	mov	r1, r3
   13bc0:	and	r0, r0, r2, lsr #3
   13bc4:	and	r2, r2, #31
   13bc8:	vst1.64	{d16-d17}, [r1], r0
   13bcc:	ldr	r0, [r1, #8]
   13bd0:	bic	r4, r4, r0, lsr r2
   13bd4:	eor	r0, r0, r4, lsl r2
   13bd8:	mov	r2, ip
   13bdc:	str	r0, [r1, #8]
   13be0:	mov	r0, #0
   13be4:	mov	r1, lr
   13be8:	bl	13858 <__assert_fail@plt+0x28a0>
   13bec:	sub	sp, fp, #8
   13bf0:	pop	{r4, sl, fp, pc}
   13bf4:	push	{fp, lr}
   13bf8:	mov	fp, sp
   13bfc:	sub	sp, sp, #48	; 0x30
   13c00:	mov	ip, r0
   13c04:	movw	r0, #24944	; 0x6170
   13c08:	mov	r2, #32
   13c0c:	movt	r0, #2
   13c10:	add	r3, r0, #16
   13c14:	vld1.64	{d16-d17}, [r0], r2
   13c18:	vld1.64	{d20-d21}, [r0]
   13c1c:	vld1.64	{d18-d19}, [r3]
   13c20:	mov	r3, sp
   13c24:	add	r0, r3, #32
   13c28:	add	r2, r3, #16
   13c2c:	vst1.64	{d20-d21}, [r0]
   13c30:	mov	r0, #28
   13c34:	vst1.64	{d18-d19}, [r2]
   13c38:	mov	r2, r3
   13c3c:	and	r0, r0, r1, lsr #3
   13c40:	and	r1, r1, #31
   13c44:	vst1.64	{d16-d17}, [r2], r0
   13c48:	mov	r0, #1
   13c4c:	ldr	lr, [r2, #8]
   13c50:	bic	r0, r0, lr, lsr r1
   13c54:	eor	r0, lr, r0, lsl r1
   13c58:	mov	r1, ip
   13c5c:	str	r0, [r2, #8]
   13c60:	mov	r0, #0
   13c64:	mvn	r2, #0
   13c68:	bl	13858 <__assert_fail@plt+0x28a0>
   13c6c:	mov	sp, fp
   13c70:	pop	{fp, pc}
   13c74:	push	{fp, lr}
   13c78:	mov	fp, sp
   13c7c:	sub	sp, sp, #48	; 0x30
   13c80:	mov	r1, r0
   13c84:	movw	r0, #24944	; 0x6170
   13c88:	mov	r3, #32
   13c8c:	movt	r0, #2
   13c90:	add	r2, r0, #16
   13c94:	vld1.64	{d16-d17}, [r0], r3
   13c98:	mov	r3, sp
   13c9c:	vld1.64	{d18-d19}, [r2]
   13ca0:	vld1.64	{d20-d21}, [r0]
   13ca4:	add	r2, r3, #16
   13ca8:	add	r0, r3, #32
   13cac:	vst1.64	{d18-d19}, [r2]
   13cb0:	vst1.64	{d20-d21}, [r0]
   13cb4:	mov	r0, #12
   13cb8:	mov	r2, r3
   13cbc:	vst1.64	{d16-d17}, [r2], r0
   13cc0:	ldr	r0, [r2]
   13cc4:	orr	r0, r0, #67108864	; 0x4000000
   13cc8:	str	r0, [r2]
   13ccc:	mov	r0, #0
   13cd0:	mvn	r2, #0
   13cd4:	bl	13858 <__assert_fail@plt+0x28a0>
   13cd8:	mov	sp, fp
   13cdc:	pop	{fp, pc}
   13ce0:	push	{fp, lr}
   13ce4:	mov	fp, sp
   13ce8:	sub	sp, sp, #48	; 0x30
   13cec:	mov	ip, r1
   13cf0:	mov	r1, r0
   13cf4:	movw	r0, #24944	; 0x6170
   13cf8:	mov	r2, #32
   13cfc:	movt	r0, #2
   13d00:	add	r3, r0, #16
   13d04:	vld1.64	{d16-d17}, [r0], r2
   13d08:	vld1.64	{d18-d19}, [r3]
   13d0c:	vld1.64	{d20-d21}, [r0]
   13d10:	mov	r3, sp
   13d14:	add	r2, r3, #16
   13d18:	add	r0, r3, #32
   13d1c:	vst1.64	{d18-d19}, [r2]
   13d20:	vst1.64	{d20-d21}, [r0]
   13d24:	mov	r0, #12
   13d28:	mov	r2, r3
   13d2c:	vst1.64	{d16-d17}, [r2], r0
   13d30:	ldr	r0, [r2]
   13d34:	orr	r0, r0, #67108864	; 0x4000000
   13d38:	str	r0, [r2]
   13d3c:	mov	r0, #0
   13d40:	mov	r2, ip
   13d44:	bl	13858 <__assert_fail@plt+0x28a0>
   13d48:	mov	sp, fp
   13d4c:	pop	{fp, pc}
   13d50:	push	{r4, sl, fp, lr}
   13d54:	add	fp, sp, #8
   13d58:	sub	sp, sp, #96	; 0x60
   13d5c:	vmov.i32	q8, #0	; 0x00000000
   13d60:	mov	ip, r2
   13d64:	mov	r2, sp
   13d68:	mov	r4, #28
   13d6c:	cmp	r1, #10
   13d70:	mov	r3, r2
   13d74:	add	lr, r2, #16
   13d78:	vst1.64	{d16-d17}, [r3], r4
   13d7c:	vst1.64	{d16-d17}, [lr]
   13d80:	vst1.32	{d16-d17}, [r3]
   13d84:	beq	13dd4 <__assert_fail@plt+0x2e1c>
   13d88:	vld1.64	{d16-d17}, [r2], r4
   13d8c:	vld1.64	{d18-d19}, [lr]
   13d90:	add	r3, sp, #48	; 0x30
   13d94:	vld1.32	{d20-d21}, [r2]
   13d98:	add	r2, r3, #20
   13d9c:	add	r4, r3, #4
   13da0:	vst1.32	{d18-d19}, [r2]
   13da4:	add	r2, r3, #32
   13da8:	vst1.32	{d16-d17}, [r4]
   13dac:	vst1.32	{d20-d21}, [r2]
   13db0:	str	r1, [sp, #48]	; 0x30
   13db4:	mvn	r2, #0
   13db8:	ldr	r1, [sp, #60]	; 0x3c
   13dbc:	orr	r1, r1, #67108864	; 0x4000000
   13dc0:	str	r1, [sp, #60]	; 0x3c
   13dc4:	mov	r1, ip
   13dc8:	bl	13858 <__assert_fail@plt+0x28a0>
   13dcc:	sub	sp, fp, #8
   13dd0:	pop	{r4, sl, fp, pc}
   13dd4:	bl	10fa0 <abort@plt>
   13dd8:	push	{r4, r5, r6, sl, fp, lr}
   13ddc:	add	fp, sp, #16
   13de0:	sub	sp, sp, #48	; 0x30
   13de4:	mov	ip, r3
   13de8:	movw	r3, #24944	; 0x6170
   13dec:	mov	r6, #32
   13df0:	cmp	r1, #0
   13df4:	mov	r4, sp
   13df8:	movt	r3, #2
   13dfc:	cmpne	r2, #0
   13e00:	add	r5, r4, #16
   13e04:	add	lr, r3, #16
   13e08:	vld1.64	{d16-d17}, [r3], r6
   13e0c:	vld1.64	{d18-d19}, [lr]
   13e10:	vld1.64	{d20-d21}, [r3]
   13e14:	mov	r3, #10
   13e18:	vst1.64	{d16-d17}, [r4], r6
   13e1c:	vst1.64	{d18-d19}, [r5]
   13e20:	vst1.64	{d20-d21}, [r4]
   13e24:	str	r3, [sp]
   13e28:	bne	13e30 <__assert_fail@plt+0x2e78>
   13e2c:	bl	10fa0 <abort@plt>
   13e30:	str	r2, [sp, #44]	; 0x2c
   13e34:	str	r1, [sp, #40]	; 0x28
   13e38:	mov	r3, sp
   13e3c:	mov	r1, ip
   13e40:	mvn	r2, #0
   13e44:	bl	13858 <__assert_fail@plt+0x28a0>
   13e48:	sub	sp, fp, #16
   13e4c:	pop	{r4, r5, r6, sl, fp, pc}
   13e50:	push	{r4, r5, r6, sl, fp, lr}
   13e54:	add	fp, sp, #16
   13e58:	sub	sp, sp, #48	; 0x30
   13e5c:	mov	lr, r3
   13e60:	movw	r3, #24944	; 0x6170
   13e64:	mov	r6, #32
   13e68:	cmp	r1, #0
   13e6c:	mov	r4, sp
   13e70:	movt	r3, #2
   13e74:	cmpne	r2, #0
   13e78:	add	r5, r4, #16
   13e7c:	add	ip, r3, #16
   13e80:	vld1.64	{d16-d17}, [r3], r6
   13e84:	vld1.64	{d18-d19}, [ip]
   13e88:	vld1.64	{d20-d21}, [r3]
   13e8c:	mov	r3, #10
   13e90:	vst1.64	{d16-d17}, [r4], r6
   13e94:	vst1.64	{d18-d19}, [r5]
   13e98:	vst1.64	{d20-d21}, [r4]
   13e9c:	str	r3, [sp]
   13ea0:	bne	13ea8 <__assert_fail@plt+0x2ef0>
   13ea4:	bl	10fa0 <abort@plt>
   13ea8:	ldr	ip, [fp, #8]
   13eac:	str	r2, [sp, #44]	; 0x2c
   13eb0:	str	r1, [sp, #40]	; 0x28
   13eb4:	mov	r3, sp
   13eb8:	mov	r1, lr
   13ebc:	mov	r2, ip
   13ec0:	bl	13858 <__assert_fail@plt+0x28a0>
   13ec4:	sub	sp, fp, #16
   13ec8:	pop	{r4, r5, r6, sl, fp, pc}
   13ecc:	push	{r4, sl, fp, lr}
   13ed0:	add	fp, sp, #8
   13ed4:	sub	sp, sp, #48	; 0x30
   13ed8:	movw	r3, #24944	; 0x6170
   13edc:	mov	lr, #32
   13ee0:	mov	ip, r2
   13ee4:	cmp	r0, #0
   13ee8:	movt	r3, #2
   13eec:	cmpne	r1, #0
   13ef0:	add	r2, r3, #16
   13ef4:	vld1.64	{d16-d17}, [r3], lr
   13ef8:	vld1.64	{d20-d21}, [r3]
   13efc:	vld1.64	{d18-d19}, [r2]
   13f00:	mov	r2, sp
   13f04:	add	r4, r2, #16
   13f08:	vst1.64	{d16-d17}, [r2], lr
   13f0c:	vst1.64	{d20-d21}, [r2]
   13f10:	mov	r2, #10
   13f14:	vst1.64	{d18-d19}, [r4]
   13f18:	str	r2, [sp]
   13f1c:	bne	13f24 <__assert_fail@plt+0x2f6c>
   13f20:	bl	10fa0 <abort@plt>
   13f24:	str	r1, [sp, #44]	; 0x2c
   13f28:	str	r0, [sp, #40]	; 0x28
   13f2c:	mov	r3, sp
   13f30:	mov	r0, #0
   13f34:	mov	r1, ip
   13f38:	mvn	r2, #0
   13f3c:	bl	13858 <__assert_fail@plt+0x28a0>
   13f40:	sub	sp, fp, #8
   13f44:	pop	{r4, sl, fp, pc}
   13f48:	push	{r4, r5, fp, lr}
   13f4c:	add	fp, sp, #8
   13f50:	sub	sp, sp, #48	; 0x30
   13f54:	mov	ip, r3
   13f58:	movw	r3, #24944	; 0x6170
   13f5c:	mov	r4, #32
   13f60:	mov	lr, r2
   13f64:	cmp	r0, #0
   13f68:	movt	r3, #2
   13f6c:	cmpne	r1, #0
   13f70:	add	r2, r3, #16
   13f74:	vld1.64	{d16-d17}, [r3], r4
   13f78:	vld1.64	{d20-d21}, [r3]
   13f7c:	vld1.64	{d18-d19}, [r2]
   13f80:	mov	r2, sp
   13f84:	add	r5, r2, #16
   13f88:	vst1.64	{d16-d17}, [r2], r4
   13f8c:	vst1.64	{d20-d21}, [r2]
   13f90:	mov	r2, #10
   13f94:	vst1.64	{d18-d19}, [r5]
   13f98:	str	r2, [sp]
   13f9c:	bne	13fa4 <__assert_fail@plt+0x2fec>
   13fa0:	bl	10fa0 <abort@plt>
   13fa4:	str	r1, [sp, #44]	; 0x2c
   13fa8:	str	r0, [sp, #40]	; 0x28
   13fac:	mov	r3, sp
   13fb0:	mov	r0, #0
   13fb4:	mov	r1, lr
   13fb8:	mov	r2, ip
   13fbc:	bl	13858 <__assert_fail@plt+0x28a0>
   13fc0:	sub	sp, fp, #8
   13fc4:	pop	{r4, r5, fp, pc}
   13fc8:	movw	r3, #24824	; 0x60f8
   13fcc:	movt	r3, #2
   13fd0:	b	13858 <__assert_fail@plt+0x28a0>
   13fd4:	movw	r3, #24824	; 0x60f8
   13fd8:	mov	r2, r1
   13fdc:	mov	r1, r0
   13fe0:	mov	r0, #0
   13fe4:	movt	r3, #2
   13fe8:	b	13858 <__assert_fail@plt+0x28a0>
   13fec:	movw	r3, #24824	; 0x60f8
   13ff0:	mvn	r2, #0
   13ff4:	movt	r3, #2
   13ff8:	b	13858 <__assert_fail@plt+0x28a0>
   13ffc:	movw	r3, #24824	; 0x60f8
   14000:	mov	r1, r0
   14004:	mov	r0, #0
   14008:	mvn	r2, #0
   1400c:	movt	r3, #2
   14010:	b	13858 <__assert_fail@plt+0x28a0>
   14014:	push	{r4, r5, fp, lr}
   14018:	add	fp, sp, #8
   1401c:	mov	r5, r0
   14020:	mov	r4, r1
   14024:	mov	r0, #0
   14028:	mov	r2, #5
   1402c:	mov	r1, r5
   14030:	bl	10de4 <dcgettext@plt>
   14034:	cmp	r0, r5
   14038:	popne	{r4, r5, fp, pc}
   1403c:	bl	151d8 <__assert_fail@plt+0x4220>
   14040:	ldrb	r1, [r0]
   14044:	and	r1, r1, #223	; 0xdf
   14048:	cmp	r1, #71	; 0x47
   1404c:	beq	140b4 <__assert_fail@plt+0x30fc>
   14050:	cmp	r1, #85	; 0x55
   14054:	bne	1410c <__assert_fail@plt+0x3154>
   14058:	ldrb	r1, [r0, #1]
   1405c:	and	r1, r1, #223	; 0xdf
   14060:	cmp	r1, #84	; 0x54
   14064:	bne	1410c <__assert_fail@plt+0x3154>
   14068:	ldrb	r1, [r0, #2]
   1406c:	and	r1, r1, #223	; 0xdf
   14070:	cmp	r1, #70	; 0x46
   14074:	bne	1410c <__assert_fail@plt+0x3154>
   14078:	ldrb	r1, [r0, #3]
   1407c:	cmp	r1, #45	; 0x2d
   14080:	bne	1410c <__assert_fail@plt+0x3154>
   14084:	ldrb	r1, [r0, #4]
   14088:	cmp	r1, #56	; 0x38
   1408c:	bne	1410c <__assert_fail@plt+0x3154>
   14090:	ldrb	r0, [r0, #5]
   14094:	cmp	r0, #0
   14098:	bne	1410c <__assert_fail@plt+0x3154>
   1409c:	ldrb	r1, [r5]
   140a0:	movw	r2, #22866	; 0x5952
   140a4:	movw	r0, #22870	; 0x5956
   140a8:	movt	r2, #1
   140ac:	movt	r0, #1
   140b0:	b	1413c <__assert_fail@plt+0x3184>
   140b4:	ldrb	r1, [r0, #1]
   140b8:	and	r1, r1, #223	; 0xdf
   140bc:	cmp	r1, #66	; 0x42
   140c0:	bne	1410c <__assert_fail@plt+0x3154>
   140c4:	ldrb	r1, [r0, #2]
   140c8:	cmp	r1, #49	; 0x31
   140cc:	bne	1410c <__assert_fail@plt+0x3154>
   140d0:	ldrb	r1, [r0, #3]
   140d4:	cmp	r1, #56	; 0x38
   140d8:	bne	1410c <__assert_fail@plt+0x3154>
   140dc:	ldrb	r1, [r0, #4]
   140e0:	cmp	r1, #48	; 0x30
   140e4:	bne	1410c <__assert_fail@plt+0x3154>
   140e8:	ldrb	r1, [r0, #5]
   140ec:	cmp	r1, #51	; 0x33
   140f0:	bne	1410c <__assert_fail@plt+0x3154>
   140f4:	ldrb	r1, [r0, #6]
   140f8:	cmp	r1, #48	; 0x30
   140fc:	bne	1410c <__assert_fail@plt+0x3154>
   14100:	ldrb	r0, [r0, #7]
   14104:	cmp	r0, #0
   14108:	beq	14128 <__assert_fail@plt+0x3170>
   1410c:	movw	r1, #22860	; 0x594c
   14110:	movw	r0, #22864	; 0x5950
   14114:	cmp	r4, #9
   14118:	movt	r1, #1
   1411c:	movt	r0, #1
   14120:	moveq	r0, r1
   14124:	pop	{r4, r5, fp, pc}
   14128:	ldrb	r1, [r5]
   1412c:	movw	r2, #22874	; 0x595a
   14130:	movw	r0, #22878	; 0x595e
   14134:	movt	r2, #1
   14138:	movt	r0, #1
   1413c:	cmp	r1, #96	; 0x60
   14140:	moveq	r0, r2
   14144:	pop	{r4, r5, fp, pc}
   14148:	mov	r1, #0
   1414c:	str	r1, [r0]
   14150:	str	r1, [r0, #4]
   14154:	bx	lr
   14158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1415c:	add	fp, sp, #28
   14160:	sub	sp, sp, #52	; 0x34
   14164:	vmov.i32	q8, #0	; 0x00000000
   14168:	add	sl, sp, #16
   1416c:	mov	r5, r0
   14170:	mov	r8, r3
   14174:	cmp	r2, #0
   14178:	mov	r0, sl
   1417c:	vst1.64	{d16-d17}, [r0]!
   14180:	vst1.64	{d16-d17}, [r0]
   14184:	beq	141ac <__assert_fail@plt+0x31f4>
   14188:	mov	r0, #1
   1418c:	ldrb	r3, [r1], #1
   14190:	subs	r2, r2, #1
   14194:	ubfx	r7, r3, #5, #3
   14198:	and	r3, r3, #31
   1419c:	ldr	r6, [sl, r7, lsl #2]
   141a0:	orr	r3, r6, r0, lsl r3
   141a4:	str	r3, [sl, r7, lsl #2]
   141a8:	bne	1418c <__assert_fail@plt+0x31d4>
   141ac:	ldmib	r5, {r0, r1}
   141b0:	cmp	r0, r1
   141b4:	bcs	14218 <__assert_fail@plt+0x3260>
   141b8:	add	r1, r0, #1
   141bc:	str	r1, [r5, #4]
   141c0:	ldrb	r6, [r0]
   141c4:	mov	r4, #1
   141c8:	lsr	r0, r6, #5
   141cc:	and	r1, r6, #31
   141d0:	ldr	r0, [sl, r0, lsl #2]
   141d4:	tst	r0, r4, lsl r1
   141d8:	beq	1422c <__assert_fail@plt+0x3274>
   141dc:	ldmib	r5, {r0, r1}
   141e0:	cmp	r0, r1
   141e4:	bcs	14200 <__assert_fail@plt+0x3248>
   141e8:	add	r1, r0, #1
   141ec:	str	r1, [r5, #4]
   141f0:	ldrb	r6, [r0]
   141f4:	cmn	r6, #1
   141f8:	bgt	141c8 <__assert_fail@plt+0x3210>
   141fc:	b	1422c <__assert_fail@plt+0x3274>
   14200:	mov	r0, r5
   14204:	bl	10f58 <__uflow@plt>
   14208:	mov	r6, r0
   1420c:	cmn	r6, #1
   14210:	bgt	141c8 <__assert_fail@plt+0x3210>
   14214:	b	1422c <__assert_fail@plt+0x3274>
   14218:	mov	r0, r5
   1421c:	bl	10f58 <__uflow@plt>
   14220:	mov	r6, r0
   14224:	cmp	r0, #0
   14228:	bpl	141c4 <__assert_fail@plt+0x320c>
   1422c:	ldm	r8, {r0, r7}
   14230:	cmp	r6, #0
   14234:	str	r0, [sp, #12]
   14238:	bmi	142e4 <__assert_fail@plt+0x332c>
   1423c:	str	r8, [sp, #8]
   14240:	mov	r9, #0
   14244:	mov	r8, #1
   14248:	mov	r4, #0
   1424c:	cmp	r4, r0
   14250:	bne	14270 <__assert_fail@plt+0x32b8>
   14254:	mov	r0, r7
   14258:	add	r1, sp, #12
   1425c:	mov	r2, #1
   14260:	mvn	r3, #0
   14264:	str	r8, [sp]
   14268:	bl	14d04 <__assert_fail@plt+0x3d4c>
   1426c:	mov	r7, r0
   14270:	tst	r9, #1
   14274:	lsreq	r0, r6, #5
   14278:	andeq	r1, r6, #31
   1427c:	ldreq	r0, [sl, r0, lsl #2]
   14280:	tsteq	r0, r8, lsl r1
   14284:	bne	142cc <__assert_fail@plt+0x3314>
   14288:	strb	r6, [r7, r4]
   1428c:	ldmib	r5, {r0, r1}
   14290:	cmp	r0, r1
   14294:	bcs	142bc <__assert_fail@plt+0x3304>
   14298:	add	r1, r0, #1
   1429c:	str	r1, [r5, #4]
   142a0:	ldrb	r6, [r0]
   142a4:	ldr	r0, [sp, #12]
   142a8:	add	r4, r4, #1
   142ac:	lsr	r9, r6, #31
   142b0:	cmp	r4, r0
   142b4:	beq	14254 <__assert_fail@plt+0x329c>
   142b8:	b	14270 <__assert_fail@plt+0x32b8>
   142bc:	mov	r0, r5
   142c0:	bl	10f58 <__uflow@plt>
   142c4:	mov	r6, r0
   142c8:	b	142a4 <__assert_fail@plt+0x32ec>
   142cc:	mov	r0, #0
   142d0:	ldr	r1, [sp, #8]
   142d4:	strb	r0, [r7, r4]
   142d8:	ldr	r0, [sp, #12]
   142dc:	stm	r1, {r0, r7}
   142e0:	b	142e8 <__assert_fail@plt+0x3330>
   142e4:	mvn	r4, #0
   142e8:	mov	r0, r4
   142ec:	sub	sp, fp, #28
   142f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f8:	add	fp, sp, #28
   142fc:	sub	sp, sp, #28
   14300:	cmp	r1, #0
   14304:	add	r4, r1, #1
   14308:	mov	r7, r0
   1430c:	mov	r1, #4
   14310:	str	r3, [sp, #12]
   14314:	str	r2, [sp, #8]
   14318:	movweq	r4, #64	; 0x40
   1431c:	mov	r0, r4
   14320:	str	r4, [sp, #16]
   14324:	bl	14ba4 <__assert_fail@plt+0x3bec>
   14328:	mov	r6, r0
   1432c:	mov	r0, r4
   14330:	mov	r1, #4
   14334:	bl	14ba4 <__assert_fail@plt+0x3bec>
   14338:	mov	r4, #0
   1433c:	mov	r5, r0
   14340:	str	r4, [sp, #24]
   14344:	str	r4, [sp, #20]
   14348:	ldr	r1, [sp, #8]
   1434c:	ldr	r2, [sp, #12]
   14350:	mov	r0, r7
   14354:	add	r3, sp, #20
   14358:	bl	14158 <__assert_fail@plt+0x31a0>
   1435c:	mov	sl, r0
   14360:	ldr	r0, [sp, #16]
   14364:	cmp	r4, r0
   14368:	blt	143a0 <__assert_fail@plt+0x33e8>
   1436c:	mov	r0, #4
   14370:	add	r1, sp, #16
   14374:	mov	r2, #1
   14378:	mvn	r3, #0
   1437c:	str	r0, [sp]
   14380:	mov	r0, r6
   14384:	bl	14d04 <__assert_fail@plt+0x3d4c>
   14388:	ldr	r1, [sp, #16]
   1438c:	mov	r6, r0
   14390:	mov	r0, r5
   14394:	mov	r2, #4
   14398:	bl	14a98 <__assert_fail@plt+0x3ae0>
   1439c:	mov	r5, r0
   143a0:	cmn	sl, #1
   143a4:	beq	143d8 <__assert_fail@plt+0x3420>
   143a8:	add	r8, sl, #1
   143ac:	mov	r1, #1
   143b0:	mov	r0, r8
   143b4:	bl	14ba4 <__assert_fail@plt+0x3bec>
   143b8:	str	sl, [r5, r4, lsl #2]
   143bc:	mov	r2, r8
   143c0:	mov	r9, r0
   143c4:	ldr	r1, [sp, #24]
   143c8:	bl	10dcc <memcpy@plt>
   143cc:	str	r9, [r6, r4, lsl #2]
   143d0:	add	r4, r4, #1
   143d4:	b	14348 <__assert_fail@plt+0x3390>
   143d8:	mov	r0, #0
   143dc:	str	r0, [r6, r4, lsl #2]
   143e0:	str	r0, [r5, r4, lsl #2]
   143e4:	ldr	r0, [sp, #24]
   143e8:	bl	151b0 <__assert_fail@plt+0x41f8>
   143ec:	ldr	r0, [fp, #8]
   143f0:	str	r6, [r0]
   143f4:	ldr	r0, [fp, #12]
   143f8:	cmp	r0, #0
   143fc:	beq	14408 <__assert_fail@plt+0x3450>
   14400:	str	r5, [r0]
   14404:	b	14410 <__assert_fail@plt+0x3458>
   14408:	mov	r0, r5
   1440c:	bl	151b0 <__assert_fail@plt+0x41f8>
   14410:	mov	r0, r4
   14414:	sub	sp, fp, #28
   14418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1441c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14420:	add	fp, sp, #24
   14424:	sub	sp, sp, #32
   14428:	ldr	r6, [fp, #12]
   1442c:	ldr	r7, [fp, #8]
   14430:	mov	r4, r2
   14434:	mov	r8, r0
   14438:	cmp	r1, #0
   1443c:	beq	14464 <__assert_fail@plt+0x34ac>
   14440:	movw	r2, #22968	; 0x59b8
   14444:	mov	r5, r1
   14448:	str	r3, [sp, #4]
   1444c:	str	r4, [sp]
   14450:	mov	r0, r8
   14454:	mov	r1, #1
   14458:	movt	r2, #1
   1445c:	mov	r3, r5
   14460:	b	1447c <__assert_fail@plt+0x34c4>
   14464:	movw	r2, #22980	; 0x59c4
   14468:	str	r3, [sp]
   1446c:	mov	r0, r8
   14470:	mov	r1, #1
   14474:	mov	r3, r4
   14478:	movt	r2, #1
   1447c:	bl	10f34 <__fprintf_chk@plt>
   14480:	movw	r1, #22987	; 0x59cb
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	movt	r1, #1
   14490:	bl	10de4 <dcgettext@plt>
   14494:	movw	r2, #23705	; 0x5c99
   14498:	mov	r3, r0
   1449c:	movw	r0, #2022	; 0x7e6
   144a0:	mov	r1, #1
   144a4:	movt	r2, #1
   144a8:	str	r0, [sp]
   144ac:	mov	r0, r8
   144b0:	bl	10f34 <__fprintf_chk@plt>
   144b4:	movw	r4, #22254	; 0x56ee
   144b8:	mov	r1, r8
   144bc:	movt	r4, #1
   144c0:	mov	r0, r4
   144c4:	bl	10d84 <fputs_unlocked@plt>
   144c8:	movw	r1, #22991	; 0x59cf
   144cc:	mov	r0, #0
   144d0:	mov	r2, #5
   144d4:	movt	r1, #1
   144d8:	bl	10de4 <dcgettext@plt>
   144dc:	movw	r3, #23162	; 0x5a7a
   144e0:	mov	r2, r0
   144e4:	mov	r0, r8
   144e8:	mov	r1, #1
   144ec:	movt	r3, #1
   144f0:	bl	10f34 <__fprintf_chk@plt>
   144f4:	mov	r0, r4
   144f8:	mov	r1, r8
   144fc:	bl	10d84 <fputs_unlocked@plt>
   14500:	cmp	r6, #9
   14504:	bhi	14540 <__assert_fail@plt+0x3588>
   14508:	add	r0, pc, #0
   1450c:	ldr	pc, [r0, r6, lsl #2]
   14510:	andeq	r4, r1, r8, lsr r5
   14514:	andeq	r4, r1, ip, asr #10
   14518:	andeq	r4, r1, ip, ror r5
   1451c:	andeq	r4, r1, r4, lsr #11
   14520:	andeq	r4, r1, ip, asr #11
   14524:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14528:	andeq	r4, r1, ip, lsl r6
   1452c:	andeq	r4, r1, r4, asr r6
   14530:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14534:	muleq	r1, ip, r6
   14538:	sub	sp, fp, #24
   1453c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14540:	movw	r1, #23515	; 0x5bdb
   14544:	movt	r1, #1
   14548:	b	146a4 <__assert_fail@plt+0x36ec>
   1454c:	movw	r1, #23196	; 0x5a9c
   14550:	mov	r0, #0
   14554:	mov	r2, #5
   14558:	movt	r1, #1
   1455c:	bl	10de4 <dcgettext@plt>
   14560:	ldr	r3, [r7]
   14564:	mov	r2, r0
   14568:	mov	r0, r8
   1456c:	mov	r1, #1
   14570:	sub	sp, fp, #24
   14574:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14578:	b	10f34 <__fprintf_chk@plt>
   1457c:	movw	r1, #23212	; 0x5aac
   14580:	mov	r0, #0
   14584:	mov	r2, #5
   14588:	movt	r1, #1
   1458c:	bl	10de4 <dcgettext@plt>
   14590:	mov	r2, r0
   14594:	ldr	r3, [r7]
   14598:	ldr	r0, [r7, #4]
   1459c:	str	r0, [sp]
   145a0:	b	14690 <__assert_fail@plt+0x36d8>
   145a4:	movw	r1, #23235	; 0x5ac3
   145a8:	mov	r0, #0
   145ac:	mov	r2, #5
   145b0:	movt	r1, #1
   145b4:	bl	10de4 <dcgettext@plt>
   145b8:	mov	r2, r0
   145bc:	ldr	r3, [r7]
   145c0:	ldmib	r7, {r0, r1}
   145c4:	stm	sp, {r0, r1}
   145c8:	b	14690 <__assert_fail@plt+0x36d8>
   145cc:	movw	r1, #23263	; 0x5adf
   145d0:	mov	r0, #0
   145d4:	mov	r2, #5
   145d8:	movt	r1, #1
   145dc:	bl	10de4 <dcgettext@plt>
   145e0:	ldr	r3, [r7]
   145e4:	mov	r2, r0
   145e8:	ldmib	r7, {r0, r1, r7}
   145ec:	stm	sp, {r0, r1, r7}
   145f0:	b	14690 <__assert_fail@plt+0x36d8>
   145f4:	movw	r1, #23295	; 0x5aff
   145f8:	mov	r0, #0
   145fc:	mov	r2, #5
   14600:	movt	r1, #1
   14604:	bl	10de4 <dcgettext@plt>
   14608:	ldr	r3, [r7]
   1460c:	mov	r2, r0
   14610:	ldmib	r7, {r0, r1, r6, r7}
   14614:	stm	sp, {r0, r1, r6, r7}
   14618:	b	14690 <__assert_fail@plt+0x36d8>
   1461c:	movw	r1, #23331	; 0x5b23
   14620:	mov	r0, #0
   14624:	mov	r2, #5
   14628:	movt	r1, #1
   1462c:	bl	10de4 <dcgettext@plt>
   14630:	mov	r2, r0
   14634:	ldr	r3, [r7]
   14638:	ldmib	r7, {r0, r1, r6}
   1463c:	ldr	r5, [r7, #16]
   14640:	ldr	r7, [r7, #20]
   14644:	stm	sp, {r0, r1, r6}
   14648:	str	r5, [sp, #12]
   1464c:	str	r7, [sp, #16]
   14650:	b	14690 <__assert_fail@plt+0x36d8>
   14654:	movw	r1, #23371	; 0x5b4b
   14658:	mov	r0, #0
   1465c:	mov	r2, #5
   14660:	movt	r1, #1
   14664:	bl	10de4 <dcgettext@plt>
   14668:	mov	r2, r0
   1466c:	ldr	r3, [r7]
   14670:	ldmib	r7, {r0, r1, r6}
   14674:	ldr	r5, [r7, #16]
   14678:	ldr	r4, [r7, #20]
   1467c:	ldr	r7, [r7, #24]
   14680:	stm	sp, {r0, r1, r6}
   14684:	str	r5, [sp, #12]
   14688:	str	r4, [sp, #16]
   1468c:	str	r7, [sp, #20]
   14690:	mov	r0, r8
   14694:	mov	r1, #1
   14698:	b	14744 <__assert_fail@plt+0x378c>
   1469c:	movw	r1, #23463	; 0x5ba7
   146a0:	movt	r1, #1
   146a4:	mov	r0, #0
   146a8:	mov	r2, #5
   146ac:	bl	10de4 <dcgettext@plt>
   146b0:	mov	ip, r0
   146b4:	ldr	r3, [r7]
   146b8:	ldr	r0, [r7, #4]
   146bc:	ldr	r1, [r7, #8]
   146c0:	ldr	r6, [r7, #12]
   146c4:	ldr	r5, [r7, #16]
   146c8:	ldr	r4, [r7, #20]
   146cc:	ldr	r2, [r7, #24]
   146d0:	ldr	lr, [r7, #28]
   146d4:	ldr	r7, [r7, #32]
   146d8:	stm	sp, {r0, r1, r6}
   146dc:	str	r5, [sp, #12]
   146e0:	str	r4, [sp, #16]
   146e4:	str	r2, [sp, #20]
   146e8:	str	lr, [sp, #24]
   146ec:	str	r7, [sp, #28]
   146f0:	b	14738 <__assert_fail@plt+0x3780>
   146f4:	movw	r1, #23415	; 0x5b77
   146f8:	mov	r0, #0
   146fc:	mov	r2, #5
   14700:	movt	r1, #1
   14704:	bl	10de4 <dcgettext@plt>
   14708:	mov	ip, r0
   1470c:	ldr	r3, [r7]
   14710:	ldmib	r7, {r0, r1, r6}
   14714:	ldr	r5, [r7, #16]
   14718:	ldr	r4, [r7, #20]
   1471c:	ldr	r2, [r7, #24]
   14720:	ldr	r7, [r7, #28]
   14724:	stm	sp, {r0, r1, r6}
   14728:	str	r5, [sp, #12]
   1472c:	str	r4, [sp, #16]
   14730:	str	r2, [sp, #20]
   14734:	str	r7, [sp, #24]
   14738:	mov	r0, r8
   1473c:	mov	r1, #1
   14740:	mov	r2, ip
   14744:	bl	10f34 <__fprintf_chk@plt>
   14748:	sub	sp, fp, #24
   1474c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14750:	push	{r4, sl, fp, lr}
   14754:	add	fp, sp, #8
   14758:	sub	sp, sp, #8
   1475c:	ldr	ip, [fp, #8]
   14760:	mov	lr, #0
   14764:	ldr	r4, [ip, lr, lsl #2]
   14768:	add	lr, lr, #1
   1476c:	cmp	r4, #0
   14770:	bne	14764 <__assert_fail@plt+0x37ac>
   14774:	sub	r4, lr, #1
   14778:	str	ip, [sp]
   1477c:	str	r4, [sp, #4]
   14780:	bl	1441c <__assert_fail@plt+0x3464>
   14784:	sub	sp, fp, #8
   14788:	pop	{r4, sl, fp, pc}
   1478c:	push	{fp, lr}
   14790:	mov	fp, sp
   14794:	sub	sp, sp, #48	; 0x30
   14798:	ldr	ip, [fp, #8]
   1479c:	ldr	lr, [ip]
   147a0:	cmp	lr, #0
   147a4:	str	lr, [sp, #8]
   147a8:	beq	14844 <__assert_fail@plt+0x388c>
   147ac:	ldr	lr, [ip, #4]
   147b0:	cmp	lr, #0
   147b4:	str	lr, [sp, #12]
   147b8:	beq	1484c <__assert_fail@plt+0x3894>
   147bc:	ldr	lr, [ip, #8]
   147c0:	cmp	lr, #0
   147c4:	str	lr, [sp, #16]
   147c8:	beq	14854 <__assert_fail@plt+0x389c>
   147cc:	ldr	lr, [ip, #12]
   147d0:	cmp	lr, #0
   147d4:	str	lr, [sp, #20]
   147d8:	beq	1485c <__assert_fail@plt+0x38a4>
   147dc:	ldr	lr, [ip, #16]
   147e0:	cmp	lr, #0
   147e4:	str	lr, [sp, #24]
   147e8:	beq	14864 <__assert_fail@plt+0x38ac>
   147ec:	ldr	lr, [ip, #20]
   147f0:	cmp	lr, #0
   147f4:	str	lr, [sp, #28]
   147f8:	beq	1486c <__assert_fail@plt+0x38b4>
   147fc:	ldr	lr, [ip, #24]
   14800:	cmp	lr, #0
   14804:	str	lr, [sp, #32]
   14808:	beq	14874 <__assert_fail@plt+0x38bc>
   1480c:	ldr	lr, [ip, #28]
   14810:	cmp	lr, #0
   14814:	str	lr, [sp, #36]	; 0x24
   14818:	beq	1487c <__assert_fail@plt+0x38c4>
   1481c:	ldr	lr, [ip, #32]
   14820:	cmp	lr, #0
   14824:	str	lr, [sp, #40]	; 0x28
   14828:	beq	14884 <__assert_fail@plt+0x38cc>
   1482c:	ldr	lr, [ip, #36]	; 0x24
   14830:	mov	ip, #10
   14834:	cmp	lr, #0
   14838:	str	lr, [sp, #44]	; 0x2c
   1483c:	movweq	ip, #9
   14840:	b	14888 <__assert_fail@plt+0x38d0>
   14844:	mov	ip, #0
   14848:	b	14888 <__assert_fail@plt+0x38d0>
   1484c:	mov	ip, #1
   14850:	b	14888 <__assert_fail@plt+0x38d0>
   14854:	mov	ip, #2
   14858:	b	14888 <__assert_fail@plt+0x38d0>
   1485c:	mov	ip, #3
   14860:	b	14888 <__assert_fail@plt+0x38d0>
   14864:	mov	ip, #4
   14868:	b	14888 <__assert_fail@plt+0x38d0>
   1486c:	mov	ip, #5
   14870:	b	14888 <__assert_fail@plt+0x38d0>
   14874:	mov	ip, #6
   14878:	b	14888 <__assert_fail@plt+0x38d0>
   1487c:	mov	ip, #7
   14880:	b	14888 <__assert_fail@plt+0x38d0>
   14884:	mov	ip, #8
   14888:	add	lr, sp, #8
   1488c:	str	ip, [sp, #4]
   14890:	str	lr, [sp]
   14894:	bl	1441c <__assert_fail@plt+0x3464>
   14898:	mov	sp, fp
   1489c:	pop	{fp, pc}
   148a0:	push	{fp, lr}
   148a4:	mov	fp, sp
   148a8:	sub	sp, sp, #56	; 0x38
   148ac:	add	ip, fp, #8
   148b0:	str	ip, [sp, #12]
   148b4:	ldr	lr, [fp, #8]
   148b8:	cmp	lr, #0
   148bc:	str	lr, [sp, #16]
   148c0:	beq	1495c <__assert_fail@plt+0x39a4>
   148c4:	ldr	lr, [ip, #4]
   148c8:	cmp	lr, #0
   148cc:	str	lr, [sp, #20]
   148d0:	beq	14964 <__assert_fail@plt+0x39ac>
   148d4:	ldr	lr, [ip, #8]
   148d8:	cmp	lr, #0
   148dc:	str	lr, [sp, #24]
   148e0:	beq	1496c <__assert_fail@plt+0x39b4>
   148e4:	ldr	lr, [ip, #12]
   148e8:	cmp	lr, #0
   148ec:	str	lr, [sp, #28]
   148f0:	beq	14974 <__assert_fail@plt+0x39bc>
   148f4:	ldr	lr, [ip, #16]
   148f8:	cmp	lr, #0
   148fc:	str	lr, [sp, #32]
   14900:	beq	1497c <__assert_fail@plt+0x39c4>
   14904:	ldr	lr, [ip, #20]
   14908:	cmp	lr, #0
   1490c:	str	lr, [sp, #36]	; 0x24
   14910:	beq	14984 <__assert_fail@plt+0x39cc>
   14914:	ldr	lr, [ip, #24]
   14918:	cmp	lr, #0
   1491c:	str	lr, [sp, #40]	; 0x28
   14920:	beq	1498c <__assert_fail@plt+0x39d4>
   14924:	ldr	lr, [ip, #28]
   14928:	cmp	lr, #0
   1492c:	str	lr, [sp, #44]	; 0x2c
   14930:	beq	14994 <__assert_fail@plt+0x39dc>
   14934:	ldr	lr, [ip, #32]
   14938:	cmp	lr, #0
   1493c:	str	lr, [sp, #48]	; 0x30
   14940:	beq	1499c <__assert_fail@plt+0x39e4>
   14944:	ldr	lr, [ip, #36]	; 0x24
   14948:	mov	ip, #10
   1494c:	cmp	lr, #0
   14950:	str	lr, [sp, #52]	; 0x34
   14954:	movweq	ip, #9
   14958:	b	149a0 <__assert_fail@plt+0x39e8>
   1495c:	mov	ip, #0
   14960:	b	149a0 <__assert_fail@plt+0x39e8>
   14964:	mov	ip, #1
   14968:	b	149a0 <__assert_fail@plt+0x39e8>
   1496c:	mov	ip, #2
   14970:	b	149a0 <__assert_fail@plt+0x39e8>
   14974:	mov	ip, #3
   14978:	b	149a0 <__assert_fail@plt+0x39e8>
   1497c:	mov	ip, #4
   14980:	b	149a0 <__assert_fail@plt+0x39e8>
   14984:	mov	ip, #5
   14988:	b	149a0 <__assert_fail@plt+0x39e8>
   1498c:	mov	ip, #6
   14990:	b	149a0 <__assert_fail@plt+0x39e8>
   14994:	mov	ip, #7
   14998:	b	149a0 <__assert_fail@plt+0x39e8>
   1499c:	mov	ip, #8
   149a0:	add	lr, sp, #16
   149a4:	str	ip, [sp, #4]
   149a8:	str	lr, [sp]
   149ac:	bl	1441c <__assert_fail@plt+0x3464>
   149b0:	mov	sp, fp
   149b4:	pop	{fp, pc}
   149b8:	push	{fp, lr}
   149bc:	mov	fp, sp
   149c0:	movw	r0, #24900	; 0x6144
   149c4:	movt	r0, #2
   149c8:	ldr	r1, [r0]
   149cc:	movw	r0, #22254	; 0x56ee
   149d0:	movt	r0, #1
   149d4:	bl	10d84 <fputs_unlocked@plt>
   149d8:	movw	r1, #23575	; 0x5c17
   149dc:	mov	r0, #0
   149e0:	mov	r2, #5
   149e4:	movt	r1, #1
   149e8:	bl	10de4 <dcgettext@plt>
   149ec:	movw	r2, #23595	; 0x5c2b
   149f0:	mov	r1, r0
   149f4:	mov	r0, #1
   149f8:	movt	r2, #1
   149fc:	bl	10f1c <__printf_chk@plt>
   14a00:	movw	r1, #23617	; 0x5c41
   14a04:	mov	r0, #0
   14a08:	mov	r2, #5
   14a0c:	movt	r1, #1
   14a10:	bl	10de4 <dcgettext@plt>
   14a14:	movw	r2, #21840	; 0x5550
   14a18:	movw	r3, #22059	; 0x562b
   14a1c:	mov	r1, r0
   14a20:	mov	r0, #1
   14a24:	movt	r2, #1
   14a28:	movt	r3, #1
   14a2c:	bl	10f1c <__printf_chk@plt>
   14a30:	movw	r1, #23637	; 0x5c55
   14a34:	mov	r0, #0
   14a38:	mov	r2, #5
   14a3c:	movt	r1, #1
   14a40:	bl	10de4 <dcgettext@plt>
   14a44:	movw	r2, #23676	; 0x5c7c
   14a48:	mov	r1, r0
   14a4c:	mov	r0, #1
   14a50:	movt	r2, #1
   14a54:	pop	{fp, lr}
   14a58:	b	10f1c <__printf_chk@plt>
   14a5c:	push	{r4, r5, r6, sl, fp, lr}
   14a60:	add	fp, sp, #16
   14a64:	mov	r4, r2
   14a68:	mov	r5, r1
   14a6c:	mov	r6, r0
   14a70:	bl	15274 <__assert_fail@plt+0x42bc>
   14a74:	cmp	r0, #0
   14a78:	popne	{r4, r5, r6, sl, fp, pc}
   14a7c:	cmp	r6, #0
   14a80:	beq	14a94 <__assert_fail@plt+0x3adc>
   14a84:	cmp	r5, #0
   14a88:	cmpne	r4, #0
   14a8c:	bne	14a94 <__assert_fail@plt+0x3adc>
   14a90:	pop	{r4, r5, r6, sl, fp, pc}
   14a94:	bl	15010 <__assert_fail@plt+0x4058>
   14a98:	push	{r4, r5, r6, sl, fp, lr}
   14a9c:	add	fp, sp, #16
   14aa0:	mov	r4, r2
   14aa4:	mov	r5, r1
   14aa8:	mov	r6, r0
   14aac:	bl	15274 <__assert_fail@plt+0x42bc>
   14ab0:	cmp	r0, #0
   14ab4:	popne	{r4, r5, r6, sl, fp, pc}
   14ab8:	cmp	r6, #0
   14abc:	beq	14ad0 <__assert_fail@plt+0x3b18>
   14ac0:	cmp	r5, #0
   14ac4:	cmpne	r4, #0
   14ac8:	bne	14ad0 <__assert_fail@plt+0x3b18>
   14acc:	pop	{r4, r5, r6, sl, fp, pc}
   14ad0:	bl	15010 <__assert_fail@plt+0x4058>
   14ad4:	push	{fp, lr}
   14ad8:	mov	fp, sp
   14adc:	bl	150a8 <__assert_fail@plt+0x40f0>
   14ae0:	cmp	r0, #0
   14ae4:	popne	{fp, pc}
   14ae8:	bl	15010 <__assert_fail@plt+0x4058>
   14aec:	push	{fp, lr}
   14af0:	mov	fp, sp
   14af4:	bl	150a8 <__assert_fail@plt+0x40f0>
   14af8:	cmp	r0, #0
   14afc:	popne	{fp, pc}
   14b00:	bl	15010 <__assert_fail@plt+0x4058>
   14b04:	push	{fp, lr}
   14b08:	mov	fp, sp
   14b0c:	bl	150a8 <__assert_fail@plt+0x40f0>
   14b10:	cmp	r0, #0
   14b14:	popne	{fp, pc}
   14b18:	bl	15010 <__assert_fail@plt+0x4058>
   14b1c:	push	{r4, r5, fp, lr}
   14b20:	add	fp, sp, #8
   14b24:	mov	r4, r1
   14b28:	mov	r5, r0
   14b2c:	bl	150d8 <__assert_fail@plt+0x4120>
   14b30:	cmp	r0, #0
   14b34:	popne	{r4, r5, fp, pc}
   14b38:	cmp	r5, #0
   14b3c:	beq	14b4c <__assert_fail@plt+0x3b94>
   14b40:	cmp	r4, #0
   14b44:	bne	14b4c <__assert_fail@plt+0x3b94>
   14b48:	pop	{r4, r5, fp, pc}
   14b4c:	bl	15010 <__assert_fail@plt+0x4058>
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	cmp	r1, #0
   14b5c:	orreq	r1, r1, #1
   14b60:	bl	150d8 <__assert_fail@plt+0x4120>
   14b64:	cmp	r0, #0
   14b68:	popne	{fp, pc}
   14b6c:	bl	15010 <__assert_fail@plt+0x4058>
   14b70:	push	{fp, lr}
   14b74:	mov	fp, sp
   14b78:	clz	r3, r2
   14b7c:	lsr	ip, r3, #5
   14b80:	clz	r3, r1
   14b84:	lsr	r3, r3, #5
   14b88:	orrs	r3, r3, ip
   14b8c:	movwne	r1, #1
   14b90:	movwne	r2, #1
   14b94:	bl	15274 <__assert_fail@plt+0x42bc>
   14b98:	cmp	r0, #0
   14b9c:	popne	{fp, pc}
   14ba0:	bl	15010 <__assert_fail@plt+0x4058>
   14ba4:	push	{fp, lr}
   14ba8:	mov	fp, sp
   14bac:	mov	r2, r1
   14bb0:	mov	r1, r0
   14bb4:	mov	r0, #0
   14bb8:	bl	15274 <__assert_fail@plt+0x42bc>
   14bbc:	cmp	r0, #0
   14bc0:	popne	{fp, pc}
   14bc4:	bl	15010 <__assert_fail@plt+0x4058>
   14bc8:	push	{fp, lr}
   14bcc:	mov	fp, sp
   14bd0:	mov	r2, r1
   14bd4:	mov	r1, r0
   14bd8:	clz	r0, r2
   14bdc:	clz	r3, r1
   14be0:	lsr	r0, r0, #5
   14be4:	lsr	r3, r3, #5
   14be8:	orrs	r0, r3, r0
   14bec:	mov	r0, #0
   14bf0:	movwne	r1, #1
   14bf4:	movwne	r2, #1
   14bf8:	bl	15274 <__assert_fail@plt+0x42bc>
   14bfc:	cmp	r0, #0
   14c00:	popne	{fp, pc}
   14c04:	bl	15010 <__assert_fail@plt+0x4058>
   14c08:	push	{r4, r5, r6, sl, fp, lr}
   14c0c:	add	fp, sp, #16
   14c10:	ldr	r5, [r1]
   14c14:	mov	r4, r1
   14c18:	mov	r6, r0
   14c1c:	cmp	r0, #0
   14c20:	beq	14c38 <__assert_fail@plt+0x3c80>
   14c24:	mov	r0, #1
   14c28:	add	r0, r0, r5, lsr #1
   14c2c:	adds	r5, r5, r0
   14c30:	bcc	14c40 <__assert_fail@plt+0x3c88>
   14c34:	b	14c7c <__assert_fail@plt+0x3cc4>
   14c38:	cmp	r5, #0
   14c3c:	movweq	r5, #64	; 0x40
   14c40:	mov	r0, r6
   14c44:	mov	r1, r5
   14c48:	mov	r2, #1
   14c4c:	bl	15274 <__assert_fail@plt+0x42bc>
   14c50:	cmp	r5, #0
   14c54:	mov	r1, r5
   14c58:	movwne	r1, #1
   14c5c:	cmp	r0, #0
   14c60:	bne	14c74 <__assert_fail@plt+0x3cbc>
   14c64:	clz	r2, r6
   14c68:	lsr	r2, r2, #5
   14c6c:	orrs	r1, r2, r1
   14c70:	bne	14c7c <__assert_fail@plt+0x3cc4>
   14c74:	str	r5, [r4]
   14c78:	pop	{r4, r5, r6, sl, fp, pc}
   14c7c:	bl	15010 <__assert_fail@plt+0x4058>
   14c80:	push	{r4, r5, r6, r7, fp, lr}
   14c84:	add	fp, sp, #16
   14c88:	ldr	r5, [r1]
   14c8c:	mov	r6, r2
   14c90:	mov	r4, r1
   14c94:	mov	r7, r0
   14c98:	cmp	r0, #0
   14c9c:	beq	14cb4 <__assert_fail@plt+0x3cfc>
   14ca0:	mov	r0, #1
   14ca4:	add	r0, r0, r5, lsr #1
   14ca8:	adds	r5, r5, r0
   14cac:	bcc	14ccc <__assert_fail@plt+0x3d14>
   14cb0:	b	14d00 <__assert_fail@plt+0x3d48>
   14cb4:	cmp	r5, #0
   14cb8:	bne	14ccc <__assert_fail@plt+0x3d14>
   14cbc:	mov	r0, #64	; 0x40
   14cc0:	cmp	r6, #64	; 0x40
   14cc4:	udiv	r5, r0, r6
   14cc8:	addhi	r5, r5, #1
   14ccc:	mov	r0, r7
   14cd0:	mov	r1, r5
   14cd4:	mov	r2, r6
   14cd8:	bl	15274 <__assert_fail@plt+0x42bc>
   14cdc:	cmp	r0, #0
   14ce0:	bne	14cf8 <__assert_fail@plt+0x3d40>
   14ce4:	cmp	r7, #0
   14ce8:	beq	14d00 <__assert_fail@plt+0x3d48>
   14cec:	cmp	r6, #0
   14cf0:	cmpne	r5, #0
   14cf4:	bne	14d00 <__assert_fail@plt+0x3d48>
   14cf8:	str	r5, [r4]
   14cfc:	pop	{r4, r5, r6, r7, fp, pc}
   14d00:	bl	15010 <__assert_fail@plt+0x4058>
   14d04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d08:	add	fp, sp, #24
   14d0c:	mov	r8, r1
   14d10:	ldr	r1, [r1]
   14d14:	mov	r5, r0
   14d18:	add	r0, r1, r1, asr #1
   14d1c:	cmp	r0, r1
   14d20:	mvnvs	r0, #-2147483648	; 0x80000000
   14d24:	cmp	r0, r3
   14d28:	mov	r7, r0
   14d2c:	movgt	r7, r3
   14d30:	cmn	r3, #1
   14d34:	movle	r7, r0
   14d38:	ldr	r0, [fp, #8]
   14d3c:	cmn	r0, #1
   14d40:	ble	14d68 <__assert_fail@plt+0x3db0>
   14d44:	cmp	r0, #0
   14d48:	beq	14dbc <__assert_fail@plt+0x3e04>
   14d4c:	cmn	r7, #1
   14d50:	ble	14d90 <__assert_fail@plt+0x3dd8>
   14d54:	mvn	r4, #-2147483648	; 0x80000000
   14d58:	udiv	r6, r4, r0
   14d5c:	cmp	r6, r7
   14d60:	bge	14dbc <__assert_fail@plt+0x3e04>
   14d64:	b	14dcc <__assert_fail@plt+0x3e14>
   14d68:	cmn	r7, #1
   14d6c:	ble	14dac <__assert_fail@plt+0x3df4>
   14d70:	cmn	r0, #1
   14d74:	beq	14dbc <__assert_fail@plt+0x3e04>
   14d78:	mov	r6, #-2147483648	; 0x80000000
   14d7c:	mvn	r4, #-2147483648	; 0x80000000
   14d80:	sdiv	r6, r6, r0
   14d84:	cmp	r6, r7
   14d88:	bge	14dbc <__assert_fail@plt+0x3e04>
   14d8c:	b	14dcc <__assert_fail@plt+0x3e14>
   14d90:	beq	14dbc <__assert_fail@plt+0x3e04>
   14d94:	mov	r6, #-2147483648	; 0x80000000
   14d98:	mvn	r4, #-2147483648	; 0x80000000
   14d9c:	sdiv	r6, r6, r7
   14da0:	cmp	r6, r0
   14da4:	bge	14dbc <__assert_fail@plt+0x3e04>
   14da8:	b	14dcc <__assert_fail@plt+0x3e14>
   14dac:	mvn	r4, #-2147483648	; 0x80000000
   14db0:	sdiv	r6, r4, r0
   14db4:	cmp	r7, r6
   14db8:	blt	14dcc <__assert_fail@plt+0x3e14>
   14dbc:	mul	r6, r7, r0
   14dc0:	mov	r4, #64	; 0x40
   14dc4:	cmp	r6, #63	; 0x3f
   14dc8:	bgt	14dd4 <__assert_fail@plt+0x3e1c>
   14dcc:	sdiv	r7, r4, r0
   14dd0:	mul	r6, r7, r0
   14dd4:	cmp	r5, #0
   14dd8:	moveq	r4, #0
   14ddc:	streq	r4, [r8]
   14de0:	sub	r4, r7, r1
   14de4:	cmp	r4, r2
   14de8:	bge	14e94 <__assert_fail@plt+0x3edc>
   14dec:	add	r7, r1, r2
   14df0:	mov	r6, #0
   14df4:	mov	r2, #0
   14df8:	cmp	r7, r3
   14dfc:	movwgt	r6, #1
   14e00:	cmn	r3, #1
   14e04:	movwgt	r2, #1
   14e08:	cmp	r7, r1
   14e0c:	bvs	14ec8 <__assert_fail@plt+0x3f10>
   14e10:	ands	r1, r2, r6
   14e14:	bne	14ec8 <__assert_fail@plt+0x3f10>
   14e18:	cmn	r0, #1
   14e1c:	ble	14e44 <__assert_fail@plt+0x3e8c>
   14e20:	cmp	r0, #0
   14e24:	beq	14e90 <__assert_fail@plt+0x3ed8>
   14e28:	cmn	r7, #1
   14e2c:	ble	14e68 <__assert_fail@plt+0x3eb0>
   14e30:	mvn	r1, #-2147483648	; 0x80000000
   14e34:	udiv	r1, r1, r0
   14e38:	cmp	r1, r7
   14e3c:	bge	14e90 <__assert_fail@plt+0x3ed8>
   14e40:	b	14ec8 <__assert_fail@plt+0x3f10>
   14e44:	cmn	r7, #1
   14e48:	ble	14e80 <__assert_fail@plt+0x3ec8>
   14e4c:	cmn	r0, #1
   14e50:	beq	14e90 <__assert_fail@plt+0x3ed8>
   14e54:	mov	r1, #-2147483648	; 0x80000000
   14e58:	sdiv	r1, r1, r0
   14e5c:	cmp	r1, r7
   14e60:	bge	14e90 <__assert_fail@plt+0x3ed8>
   14e64:	b	14ec8 <__assert_fail@plt+0x3f10>
   14e68:	beq	14e90 <__assert_fail@plt+0x3ed8>
   14e6c:	mov	r1, #-2147483648	; 0x80000000
   14e70:	sdiv	r1, r1, r7
   14e74:	cmp	r1, r0
   14e78:	bge	14e90 <__assert_fail@plt+0x3ed8>
   14e7c:	b	14ec8 <__assert_fail@plt+0x3f10>
   14e80:	mvn	r1, #-2147483648	; 0x80000000
   14e84:	sdiv	r1, r1, r0
   14e88:	cmp	r7, r1
   14e8c:	blt	14ec8 <__assert_fail@plt+0x3f10>
   14e90:	mul	r6, r7, r0
   14e94:	mov	r0, r5
   14e98:	mov	r1, r6
   14e9c:	bl	150d8 <__assert_fail@plt+0x4120>
   14ea0:	cmp	r6, #0
   14ea4:	movwne	r6, #1
   14ea8:	cmp	r0, #0
   14eac:	bne	14ec0 <__assert_fail@plt+0x3f08>
   14eb0:	clz	r1, r5
   14eb4:	lsr	r1, r1, #5
   14eb8:	orrs	r1, r1, r6
   14ebc:	bne	14ec8 <__assert_fail@plt+0x3f10>
   14ec0:	str	r7, [r8]
   14ec4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ec8:	bl	15010 <__assert_fail@plt+0x4058>
   14ecc:	push	{fp, lr}
   14ed0:	mov	fp, sp
   14ed4:	mov	r1, #1
   14ed8:	bl	15054 <__assert_fail@plt+0x409c>
   14edc:	cmp	r0, #0
   14ee0:	popne	{fp, pc}
   14ee4:	bl	15010 <__assert_fail@plt+0x4058>
   14ee8:	push	{fp, lr}
   14eec:	mov	fp, sp
   14ef0:	bl	15054 <__assert_fail@plt+0x409c>
   14ef4:	cmp	r0, #0
   14ef8:	popne	{fp, pc}
   14efc:	bl	15010 <__assert_fail@plt+0x4058>
   14f00:	push	{fp, lr}
   14f04:	mov	fp, sp
   14f08:	mov	r1, #1
   14f0c:	bl	15054 <__assert_fail@plt+0x409c>
   14f10:	cmp	r0, #0
   14f14:	popne	{fp, pc}
   14f18:	bl	15010 <__assert_fail@plt+0x4058>
   14f1c:	push	{fp, lr}
   14f20:	mov	fp, sp
   14f24:	bl	15054 <__assert_fail@plt+0x409c>
   14f28:	cmp	r0, #0
   14f2c:	popne	{fp, pc}
   14f30:	bl	15010 <__assert_fail@plt+0x4058>
   14f34:	push	{r4, r5, fp, lr}
   14f38:	add	fp, sp, #8
   14f3c:	mov	r5, r0
   14f40:	mov	r0, r1
   14f44:	mov	r4, r1
   14f48:	bl	150a8 <__assert_fail@plt+0x40f0>
   14f4c:	cmp	r0, #0
   14f50:	beq	14f64 <__assert_fail@plt+0x3fac>
   14f54:	mov	r1, r5
   14f58:	mov	r2, r4
   14f5c:	pop	{r4, r5, fp, lr}
   14f60:	b	10dcc <memcpy@plt>
   14f64:	bl	15010 <__assert_fail@plt+0x4058>
   14f68:	push	{r4, r5, fp, lr}
   14f6c:	add	fp, sp, #8
   14f70:	mov	r5, r0
   14f74:	mov	r0, r1
   14f78:	mov	r4, r1
   14f7c:	bl	150a8 <__assert_fail@plt+0x40f0>
   14f80:	cmp	r0, #0
   14f84:	beq	14f98 <__assert_fail@plt+0x3fe0>
   14f88:	mov	r1, r5
   14f8c:	mov	r2, r4
   14f90:	pop	{r4, r5, fp, lr}
   14f94:	b	10dcc <memcpy@plt>
   14f98:	bl	15010 <__assert_fail@plt+0x4058>
   14f9c:	push	{r4, r5, fp, lr}
   14fa0:	add	fp, sp, #8
   14fa4:	mov	r5, r0
   14fa8:	add	r0, r1, #1
   14fac:	mov	r4, r1
   14fb0:	bl	150a8 <__assert_fail@plt+0x40f0>
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fd4 <__assert_fail@plt+0x401c>
   14fbc:	mov	r1, #0
   14fc0:	mov	r2, r4
   14fc4:	strb	r1, [r0, r4]
   14fc8:	mov	r1, r5
   14fcc:	pop	{r4, r5, fp, lr}
   14fd0:	b	10dcc <memcpy@plt>
   14fd4:	bl	15010 <__assert_fail@plt+0x4058>
   14fd8:	push	{r4, r5, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	mov	r4, r0
   14fe4:	bl	10eec <strlen@plt>
   14fe8:	add	r5, r0, #1
   14fec:	mov	r0, r5
   14ff0:	bl	150a8 <__assert_fail@plt+0x40f0>
   14ff4:	cmp	r0, #0
   14ff8:	beq	1500c <__assert_fail@plt+0x4054>
   14ffc:	mov	r1, r4
   15000:	mov	r2, r5
   15004:	pop	{r4, r5, fp, lr}
   15008:	b	10dcc <memcpy@plt>
   1500c:	bl	15010 <__assert_fail@plt+0x4058>
   15010:	push	{fp, lr}
   15014:	mov	fp, sp
   15018:	movw	r0, #24804	; 0x60e4
   1501c:	movw	r1, #23752	; 0x5cc8
   15020:	mov	r2, #5
   15024:	movt	r0, #2
   15028:	movt	r1, #1
   1502c:	ldr	r4, [r0]
   15030:	mov	r0, #0
   15034:	bl	10de4 <dcgettext@plt>
   15038:	movw	r2, #22639	; 0x586f
   1503c:	mov	r3, r0
   15040:	mov	r0, r4
   15044:	mov	r1, #0
   15048:	movt	r2, #1
   1504c:	bl	10e5c <error@plt>
   15050:	bl	10fa0 <abort@plt>
   15054:	clz	r2, r1
   15058:	clz	r3, r0
   1505c:	lsr	r2, r2, #5
   15060:	lsr	r3, r3, #5
   15064:	orrs	r2, r3, r2
   15068:	movwne	r1, #1
   1506c:	movwne	r0, #1
   15070:	cmp	r1, #0
   15074:	beq	150a4 <__assert_fail@plt+0x40ec>
   15078:	mvn	r2, #-2147483648	; 0x80000000
   1507c:	udiv	r2, r2, r1
   15080:	cmp	r2, r0
   15084:	bcs	150a4 <__assert_fail@plt+0x40ec>
   15088:	push	{fp, lr}
   1508c:	mov	fp, sp
   15090:	bl	10ef8 <__errno_location@plt>
   15094:	mov	r1, #12
   15098:	str	r1, [r0]
   1509c:	mov	r0, #0
   150a0:	pop	{fp, pc}
   150a4:	b	10d78 <calloc@plt>
   150a8:	cmp	r0, #0
   150ac:	movweq	r0, #1
   150b0:	cmn	r0, #1
   150b4:	ble	150bc <__assert_fail@plt+0x4104>
   150b8:	b	10e80 <malloc@plt>
   150bc:	push	{fp, lr}
   150c0:	mov	fp, sp
   150c4:	bl	10ef8 <__errno_location@plt>
   150c8:	mov	r1, #12
   150cc:	str	r1, [r0]
   150d0:	mov	r0, #0
   150d4:	pop	{fp, pc}
   150d8:	push	{fp, lr}
   150dc:	mov	fp, sp
   150e0:	cmp	r0, #0
   150e4:	beq	15100 <__assert_fail@plt+0x4148>
   150e8:	cmp	r1, #0
   150ec:	beq	1510c <__assert_fail@plt+0x4154>
   150f0:	cmn	r1, #1
   150f4:	ble	15118 <__assert_fail@plt+0x4160>
   150f8:	pop	{fp, lr}
   150fc:	b	10dfc <realloc@plt>
   15100:	mov	r0, r1
   15104:	pop	{fp, lr}
   15108:	b	150a8 <__assert_fail@plt+0x40f0>
   1510c:	bl	151b0 <__assert_fail@plt+0x41f8>
   15110:	mov	r0, #0
   15114:	pop	{fp, pc}
   15118:	bl	10ef8 <__errno_location@plt>
   1511c:	mov	r1, #12
   15120:	str	r1, [r0]
   15124:	mov	r0, #0
   15128:	pop	{fp, pc}
   1512c:	push	{r4, r5, r6, sl, fp, lr}
   15130:	add	fp, sp, #16
   15134:	mov	r4, r0
   15138:	bl	10e44 <__fpending@plt>
   1513c:	ldr	r6, [r4]
   15140:	mov	r5, r0
   15144:	mov	r0, r4
   15148:	bl	11e4c <__assert_fail@plt+0xe94>
   1514c:	tst	r6, #32
   15150:	bne	15188 <__assert_fail@plt+0x41d0>
   15154:	cmp	r0, #0
   15158:	mov	r4, r0
   1515c:	mvnne	r4, #0
   15160:	cmp	r5, #0
   15164:	bne	15194 <__assert_fail@plt+0x41dc>
   15168:	cmp	r0, #0
   1516c:	beq	15194 <__assert_fail@plt+0x41dc>
   15170:	bl	10ef8 <__errno_location@plt>
   15174:	ldr	r0, [r0]
   15178:	subs	r4, r0, #9
   1517c:	mvnne	r4, #0
   15180:	mov	r0, r4
   15184:	pop	{r4, r5, r6, sl, fp, pc}
   15188:	mvn	r4, #0
   1518c:	cmp	r0, #0
   15190:	beq	1519c <__assert_fail@plt+0x41e4>
   15194:	mov	r0, r4
   15198:	pop	{r4, r5, r6, sl, fp, pc}
   1519c:	bl	10ef8 <__errno_location@plt>
   151a0:	mov	r1, #0
   151a4:	str	r1, [r0]
   151a8:	mov	r0, r4
   151ac:	pop	{r4, r5, r6, sl, fp, pc}
   151b0:	push	{r4, r5, r6, sl, fp, lr}
   151b4:	add	fp, sp, #16
   151b8:	mov	r4, r0
   151bc:	bl	10ef8 <__errno_location@plt>
   151c0:	ldr	r6, [r0]
   151c4:	mov	r5, r0
   151c8:	mov	r0, r4
   151cc:	bl	10db4 <free@plt>
   151d0:	str	r6, [r5]
   151d4:	pop	{r4, r5, r6, sl, fp, pc}
   151d8:	push	{fp, lr}
   151dc:	mov	fp, sp
   151e0:	mov	r0, #14
   151e4:	bl	10f7c <nl_langinfo@plt>
   151e8:	movw	r1, #22255	; 0x56ef
   151ec:	cmp	r0, #0
   151f0:	movt	r1, #1
   151f4:	movne	r1, r0
   151f8:	movw	r0, #23769	; 0x5cd9
   151fc:	ldrb	r2, [r1]
   15200:	movt	r0, #1
   15204:	cmp	r2, #0
   15208:	movne	r0, r1
   1520c:	pop	{fp, pc}
   15210:	push	{r4, r5, r6, r7, fp, lr}
   15214:	add	fp, sp, #16
   15218:	sub	sp, sp, #8
   1521c:	cmp	r0, #0
   15220:	add	r5, sp, #4
   15224:	mov	r7, r2
   15228:	mov	r4, r1
   1522c:	movne	r5, r0
   15230:	mov	r0, r5
   15234:	bl	10e50 <mbrtowc@plt>
   15238:	mov	r6, r0
   1523c:	cmp	r7, #0
   15240:	beq	15268 <__assert_fail@plt+0x42b0>
   15244:	cmn	r6, #2
   15248:	bcc	15268 <__assert_fail@plt+0x42b0>
   1524c:	mov	r0, #0
   15250:	bl	152b0 <__assert_fail@plt+0x42f8>
   15254:	cmp	r0, #0
   15258:	bne	15268 <__assert_fail@plt+0x42b0>
   1525c:	ldrb	r0, [r4]
   15260:	mov	r6, #1
   15264:	str	r0, [r5]
   15268:	mov	r0, r6
   1526c:	sub	sp, fp, #16
   15270:	pop	{r4, r5, r6, r7, fp, pc}
   15274:	cmp	r2, #0
   15278:	beq	152a8 <__assert_fail@plt+0x42f0>
   1527c:	mvn	r3, #0
   15280:	udiv	r3, r3, r2
   15284:	cmp	r3, r1
   15288:	bcs	152a8 <__assert_fail@plt+0x42f0>
   1528c:	push	{fp, lr}
   15290:	mov	fp, sp
   15294:	bl	10ef8 <__errno_location@plt>
   15298:	mov	r1, #12
   1529c:	str	r1, [r0]
   152a0:	mov	r0, #0
   152a4:	pop	{fp, pc}
   152a8:	mul	r1, r2, r1
   152ac:	b	150d8 <__assert_fail@plt+0x4120>
   152b0:	push	{r4, sl, fp, lr}
   152b4:	add	fp, sp, #8
   152b8:	sub	sp, sp, #264	; 0x108
   152bc:	add	r1, sp, #7
   152c0:	movw	r2, #257	; 0x101
   152c4:	bl	1531c <__assert_fail@plt+0x4364>
   152c8:	mov	r4, #0
   152cc:	cmp	r0, #0
   152d0:	bne	15310 <__assert_fail@plt+0x4358>
   152d4:	movw	r1, #23775	; 0x5cdf
   152d8:	add	r0, sp, #7
   152dc:	mov	r2, #2
   152e0:	movt	r1, #1
   152e4:	bl	10ee0 <bcmp@plt>
   152e8:	cmp	r0, #0
   152ec:	beq	15310 <__assert_fail@plt+0x4358>
   152f0:	movw	r1, #23777	; 0x5ce1
   152f4:	add	r0, sp, #7
   152f8:	mov	r2, #6
   152fc:	movt	r1, #1
   15300:	bl	10ee0 <bcmp@plt>
   15304:	cmp	r0, #0
   15308:	mov	r4, r0
   1530c:	movwne	r4, #1
   15310:	mov	r0, r4
   15314:	sub	sp, fp, #8
   15318:	pop	{r4, sl, fp, pc}
   1531c:	push	{r4, r5, r6, r7, fp, lr}
   15320:	add	fp, sp, #16
   15324:	mov	r4, r1
   15328:	mov	r1, #0
   1532c:	mov	r6, r2
   15330:	bl	10f64 <setlocale@plt>
   15334:	cmp	r0, #0
   15338:	beq	15368 <__assert_fail@plt+0x43b0>
   1533c:	mov	r7, r0
   15340:	bl	10eec <strlen@plt>
   15344:	cmp	r0, r6
   15348:	bcs	15384 <__assert_fail@plt+0x43cc>
   1534c:	add	r2, r0, #1
   15350:	mov	r0, r4
   15354:	mov	r1, r7
   15358:	bl	10dcc <memcpy@plt>
   1535c:	mov	r5, #0
   15360:	mov	r0, r5
   15364:	pop	{r4, r5, r6, r7, fp, pc}
   15368:	mov	r5, #22
   1536c:	cmp	r6, #0
   15370:	beq	153ac <__assert_fail@plt+0x43f4>
   15374:	mov	r0, #0
   15378:	strb	r0, [r4]
   1537c:	mov	r0, r5
   15380:	pop	{r4, r5, r6, r7, fp, pc}
   15384:	mov	r5, #34	; 0x22
   15388:	cmp	r6, #0
   1538c:	beq	153ac <__assert_fail@plt+0x43f4>
   15390:	sub	r6, r6, #1
   15394:	mov	r0, r4
   15398:	mov	r1, r7
   1539c:	mov	r2, r6
   153a0:	bl	10dcc <memcpy@plt>
   153a4:	mov	r0, #0
   153a8:	strb	r0, [r4, r6]
   153ac:	mov	r0, r5
   153b0:	pop	{r4, r5, r6, r7, fp, pc}
   153b4:	mov	r1, #0
   153b8:	b	10f64 <setlocale@plt>
   153bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153c0:	mov	r7, r0
   153c4:	ldr	r6, [pc, #72]	; 15414 <__assert_fail@plt+0x445c>
   153c8:	ldr	r5, [pc, #72]	; 15418 <__assert_fail@plt+0x4460>
   153cc:	add	r6, pc, r6
   153d0:	add	r5, pc, r5
   153d4:	sub	r6, r6, r5
   153d8:	mov	r8, r1
   153dc:	mov	r9, r2
   153e0:	bl	10d58 <calloc@plt-0x20>
   153e4:	asrs	r6, r6, #2
   153e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   153ec:	mov	r4, #0
   153f0:	add	r4, r4, #1
   153f4:	ldr	r3, [r5], #4
   153f8:	mov	r2, r9
   153fc:	mov	r1, r8
   15400:	mov	r0, r7
   15404:	blx	r3
   15408:	cmp	r6, r4
   1540c:	bne	153f0 <__assert_fail@plt+0x4438>
   15410:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15414:	andeq	r0, r1, r8, lsr fp
   15418:	andeq	r0, r1, r0, lsr fp
   1541c:	bx	lr
   15420:	ldr	r3, [pc, #12]	; 15434 <__assert_fail@plt+0x447c>
   15424:	mov	r1, #0
   15428:	add	r3, pc, r3
   1542c:	ldr	r2, [r3]
   15430:	b	10f04 <__cxa_atexit@plt>
   15434:	andeq	r0, r1, ip, lsr #25

Disassembly of section .fini:

00015438 <.fini>:
   15438:	push	{r3, lr}
   1543c:	pop	{r3, pc}
