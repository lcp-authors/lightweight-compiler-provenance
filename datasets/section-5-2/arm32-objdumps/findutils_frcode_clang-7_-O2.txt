
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	10f0c <__assert_fail@plt+0x48>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <calloc@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <calloc@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r4, r1, r0, asr r3

00010cb4 <calloc@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #20, 20	; 0x14000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <strcmp@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #20, 20	; 0x14000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <strtol@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #20, 20	; 0x14000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <printf@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #20, 20	; 0x14000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <fflush@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #20, 20	; 0x14000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <free@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #20, 20	; 0x14000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <ferror@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #20, 20	; 0x14000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <_exit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #20, 20	; 0x14000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <memcpy@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #20, 20	; 0x14000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <mbsinit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #20, 20	; 0x14000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <memcmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #20, 20	; 0x14000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #20, 20	; 0x14000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #20, 20	; 0x14000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <iswprint@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #20, 20	; 0x14000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <fwrite@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #20, 20	; 0x14000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <lseek64@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #20, 20	; 0x14000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <__ctype_get_mb_cur_max@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #20, 20	; 0x14000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <__fpending@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #20, 20	; 0x14000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <mbrtowc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #20, 20	; 0x14000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <error@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #20, 20	; 0x14000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <malloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__libc_start_main@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dbc <__freading@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc8 <__gmon_start__@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #664]!	; 0x298

00010dd4 <getopt_long@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #656]!	; 0x290

00010de0 <__ctype_b_loc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #20, 20	; 0x14000
   10de8:	ldr	pc, [ip, #648]!	; 0x288

00010dec <exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #20, 20	; 0x14000
   10df4:	ldr	pc, [ip, #640]!	; 0x280

00010df8 <strlen@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #20, 20	; 0x14000
   10e00:	ldr	pc, [ip, #632]!	; 0x278

00010e04 <fprintf@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #20, 20	; 0x14000
   10e0c:	ldr	pc, [ip, #624]!	; 0x270

00010e10 <__errno_location@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #20, 20	; 0x14000
   10e18:	ldr	pc, [ip, #616]!	; 0x268

00010e1c <__cxa_atexit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #20, 20	; 0x14000
   10e24:	ldr	pc, [ip, #608]!	; 0x260

00010e28 <memset@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #20, 20	; 0x14000
   10e30:	ldr	pc, [ip, #600]!	; 0x258

00010e34 <fileno@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #20, 20	; 0x14000
   10e3c:	ldr	pc, [ip, #592]!	; 0x250

00010e40 <fclose@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #20, 20	; 0x14000
   10e48:	ldr	pc, [ip, #584]!	; 0x248

00010e4c <fseeko64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #20, 20	; 0x14000
   10e54:	ldr	pc, [ip, #576]!	; 0x240

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #20, 20	; 0x14000
   10e60:	ldr	pc, [ip, #568]!	; 0x238

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #20, 20	; 0x14000
   10e6c:	ldr	pc, [ip, #560]!	; 0x230

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #552]!	; 0x228

00010e7c <fputc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #544]!	; 0x220

00010e88 <putc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #536]!	; 0x218

00010e94 <getdelim@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #528]!	; 0x210

00010ea0 <fputs@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #520]!	; 0x208

00010eac <strncmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #512]!	; 0x200

00010eb8 <abort@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #496]!	; 0x1f0

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	mov	fp, #0
   10ed4:	mov	lr, #0
   10ed8:	pop	{r1}		; (ldr r1, [sp], #4)
   10edc:	mov	r2, sp
   10ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee8:	ldr	ip, [pc, #16]	; 10f00 <__assert_fail@plt+0x3c>
   10eec:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef0:	ldr	r0, [pc, #12]	; 10f04 <__assert_fail@plt+0x40>
   10ef4:	ldr	r3, [pc, #12]	; 10f08 <__assert_fail@plt+0x44>
   10ef8:	bl	10db0 <__libc_start_main@plt>
   10efc:	bl	10eb8 <abort@plt>
   10f00:	muleq	r1, r8, r6
   10f04:	andeq	r0, r1, r0, asr #31
   10f08:	andeq	r4, r1, r8, lsr r6
   10f0c:	ldr	r3, [pc, #20]	; 10f28 <__assert_fail@plt+0x64>
   10f10:	ldr	r2, [pc, #20]	; 10f2c <__assert_fail@plt+0x68>
   10f14:	add	r3, pc, r3
   10f18:	ldr	r2, [r3, r2]
   10f1c:	cmp	r2, #0
   10f20:	bxeq	lr
   10f24:	b	10dc8 <__gmon_start__@plt>
   10f28:	andeq	r4, r1, r4, ror #1
   10f2c:	andeq	r0, r0, r0, asr #1
   10f30:	ldr	r0, [pc, #24]	; 10f50 <__assert_fail@plt+0x8c>
   10f34:	ldr	r3, [pc, #24]	; 10f54 <__assert_fail@plt+0x90>
   10f38:	cmp	r3, r0
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0x94>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r5, r2, r8, lsl r1
   10f54:	andeq	r5, r2, r8, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xc4>
   10f60:	ldr	r1, [pc, #36]	; 10f8c <__assert_fail@plt+0xc8>
   10f64:	sub	r1, r1, r0
   10f68:	asr	r1, r1, #2
   10f6c:	add	r1, r1, r1, lsr #31
   10f70:	asrs	r1, r1, #1
   10f74:	bxeq	lr
   10f78:	ldr	r3, [pc, #16]	; 10f90 <__assert_fail@plt+0xcc>
   10f7c:	cmp	r3, #0
   10f80:	bxeq	lr
   10f84:	bx	r3
   10f88:	andeq	r5, r2, r8, lsl r1
   10f8c:	andeq	r5, r2, r8, lsl r1
   10f90:	andeq	r0, r0, r0
   10f94:	push	{r4, lr}
   10f98:	ldr	r4, [pc, #24]	; 10fb8 <__assert_fail@plt+0xf4>
   10f9c:	ldrb	r3, [r4]
   10fa0:	cmp	r3, #0
   10fa4:	popne	{r4, pc}
   10fa8:	bl	10f30 <__assert_fail@plt+0x6c>
   10fac:	mov	r3, #1
   10fb0:	strb	r3, [r4]
   10fb4:	pop	{r4, pc}
   10fb8:	andeq	r5, r2, ip, lsr r1
   10fbc:	b	10f5c <__assert_fail@plt+0x98>
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	add	fp, sp, #28
   10fc8:	sub	sp, sp, #28
   10fcc:	mov	sl, r0
   10fd0:	ldr	r0, [r1]
   10fd4:	mov	r9, r1
   10fd8:	cmp	r0, #0
   10fdc:	movweq	r0, #18112	; 0x46c0
   10fe0:	movteq	r0, #1
   10fe4:	bl	11838 <__assert_fail@plt+0x974>
   10fe8:	movw	r0, #5968	; 0x1750
   10fec:	movt	r0, #1
   10ff0:	bl	1469c <__assert_fail@plt+0x37d8>
   10ff4:	cmp	r0, #0
   10ff8:	bne	114d4 <__assert_fail@plt+0x610>
   10ffc:	movw	r0, #1026	; 0x402
   11000:	str	r0, [sp, #16]
   11004:	movw	r0, #1026	; 0x402
   11008:	bl	13c30 <__assert_fail@plt+0x2d6c>
   1100c:	str	r0, [sp, #20]
   11010:	movw	r0, #1026	; 0x402
   11014:	bl	13c30 <__assert_fail@plt+0x2d6c>
   11018:	mov	r1, #0
   1101c:	movw	r2, #18154	; 0x46ea
   11020:	movw	r3, #18640	; 0x48d0
   11024:	mov	r5, r0
   11028:	mov	r4, #10
   1102c:	mov	r8, #0
   11030:	strb	r1, [r0]
   11034:	mov	r0, #0
   11038:	movt	r2, #1
   1103c:	movt	r3, #1
   11040:	str	r0, [sp, #8]
   11044:	b	11064 <__assert_fail@plt+0x1a0>
   11048:	movw	r3, #18640	; 0x48d0
   1104c:	mov	r2, sl
   11050:	mov	r4, #0
   11054:	mov	sl, r7
   11058:	mov	r9, r6
   1105c:	mov	r1, #0
   11060:	movt	r3, #1
   11064:	str	r1, [sp]
   11068:	mov	r0, sl
   1106c:	mov	r1, r9
   11070:	mov	r7, sl
   11074:	mov	r6, r9
   11078:	mov	sl, r2
   1107c:	bl	10dd4 <getopt_long@plt>
   11080:	cmp	r0, #82	; 0x52
   11084:	ble	110ec <__assert_fail@plt+0x228>
   11088:	movw	r9, #20792	; 0x5138
   1108c:	cmp	r0, #83	; 0x53
   11090:	movt	r9, #2
   11094:	bne	1117c <__assert_fail@plt+0x2b8>
   11098:	str	r6, [sp, #4]
   1109c:	ldr	r6, [r9]
   110a0:	bl	10e10 <__errno_location@plt>
   110a4:	mov	r1, #0
   110a8:	mov	r8, r0
   110ac:	mov	r2, #10
   110b0:	str	r1, [r0]
   110b4:	mov	r0, r6
   110b8:	add	r1, sp, #24
   110bc:	bl	10ccc <strtol@plt>
   110c0:	cmp	r0, #0
   110c4:	beq	11100 <__assert_fail@plt+0x23c>
   110c8:	mov	r3, r0
   110cc:	add	r0, r0, #-2147483647	; 0x80000001
   110d0:	mov	r2, r7
   110d4:	cmp	r0, #1
   110d8:	bhi	11118 <__assert_fail@plt+0x254>
   110dc:	ldr	r0, [r8]
   110e0:	cmp	r0, #0
   110e4:	beq	11118 <__assert_fail@plt+0x254>
   110e8:	b	11410 <__assert_fail@plt+0x54c>
   110ec:	cmn	r0, #1
   110f0:	beq	11194 <__assert_fail@plt+0x2d0>
   110f4:	cmp	r0, #48	; 0x30
   110f8:	beq	11048 <__assert_fail@plt+0x184>
   110fc:	b	1148c <__assert_fail@plt+0x5c8>
   11100:	mov	r3, r0
   11104:	ldr	r0, [r9]
   11108:	ldr	r1, [sp, #24]
   1110c:	mov	r2, r7
   11110:	cmp	r1, r0
   11114:	beq	1142c <__assert_fail@plt+0x568>
   11118:	ldr	r7, [sp, #24]
   1111c:	ldrb	r0, [r7]
   11120:	cmp	r0, #0
   11124:	bne	11450 <__assert_fail@plt+0x58c>
   11128:	ldr	r9, [sp, #4]
   1112c:	mov	r7, r2
   11130:	str	r3, [sp, #8]
   11134:	cmp	r3, #2
   11138:	movw	r3, #18640	; 0x48d0
   1113c:	mov	r2, sl
   11140:	mov	r8, #1
   11144:	mov	r1, #0
   11148:	mov	sl, r7
   1114c:	movt	r3, #1
   11150:	bcc	11064 <__assert_fail@plt+0x1a0>
   11154:	movw	r1, #18160	; 0x46f0
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10d38 <dcgettext@plt>
   11168:	ldr	r3, [sp, #8]
   1116c:	mov	r2, r0
   11170:	mov	r0, #1
   11174:	mov	r1, #0
   11178:	bl	10d98 <error@plt>
   1117c:	cmp	r0, #118	; 0x76
   11180:	bne	1147c <__assert_fail@plt+0x5b8>
   11184:	movw	r0, #18112	; 0x46c0
   11188:	movt	r0, #1
   1118c:	bl	11614 <__assert_fail@plt+0x750>
   11190:	b	11400 <__assert_fail@plt+0x53c>
   11194:	movw	r0, #20768	; 0x5120
   11198:	movt	r0, #2
   1119c:	ldr	r0, [r0]
   111a0:	cmp	r0, r7
   111a4:	bne	11500 <__assert_fail@plt+0x63c>
   111a8:	cmp	r8, #0
   111ac:	beq	111e0 <__assert_fail@plt+0x31c>
   111b0:	ldr	r1, [sp, #8]
   111b4:	movw	r6, #20788	; 0x5134
   111b8:	mov	r0, #49	; 0x31
   111bc:	movt	r6, #2
   111c0:	cmp	r1, #0
   111c4:	ldr	r1, [r6]
   111c8:	movweq	r0, #48	; 0x30
   111cc:	bl	10e7c <fputc@plt>
   111d0:	ldr	r1, [r6]
   111d4:	mov	r0, #0
   111d8:	bl	10e7c <fputc@plt>
   111dc:	b	11208 <__assert_fail@plt+0x344>
   111e0:	movw	r0, #20788	; 0x5134
   111e4:	mov	r1, #1
   111e8:	mov	r2, #10
   111ec:	movt	r0, #2
   111f0:	ldr	r3, [r0]
   111f4:	movw	r0, #18704	; 0x4910
   111f8:	movt	r0, #1
   111fc:	bl	10d5c <fwrite@plt>
   11200:	cmp	r0, #10
   11204:	bne	1152c <__assert_fail@plt+0x668>
   11208:	movw	r0, #20784	; 0x5130
   1120c:	add	r1, sp, #16
   11210:	mov	r2, r4
   11214:	movt	r0, #2
   11218:	ldr	r3, [r0]
   1121c:	add	r0, sp, #20
   11220:	bl	10e94 <getdelim@plt>
   11224:	mov	r1, r0
   11228:	ldr	r0, [sp, #20]
   1122c:	cmp	r1, #1
   11230:	blt	113f0 <__assert_fail@plt+0x52c>
   11234:	movw	r9, #1026	; 0x402
   11238:	mov	r7, #0
   1123c:	str	r4, [sp, #12]
   11240:	sub	r1, r1, #1
   11244:	ldrb	r2, [r0, r1]
   11248:	cmp	r4, r2
   1124c:	bne	1125c <__assert_fail@plt+0x398>
   11250:	mov	r2, #0
   11254:	strb	r2, [r0, r1]
   11258:	b	11280 <__assert_fail@plt+0x3bc>
   1125c:	movw	r1, #18260	; 0x4754
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10d38 <dcgettext@plt>
   11270:	mov	r2, r0
   11274:	mov	r0, #0
   11278:	mov	r1, #0
   1127c:	bl	10d98 <error@plt>
   11280:	ldrb	r2, [r5]
   11284:	mov	r1, r5
   11288:	cmp	r2, #0
   1128c:	beq	112e0 <__assert_fail@plt+0x41c>
   11290:	ldr	r0, [sp, #20]
   11294:	ldrb	r1, [r0]
   11298:	cmp	r2, r1
   1129c:	mov	r1, r5
   112a0:	bne	112e0 <__assert_fail@plt+0x41c>
   112a4:	mov	r1, #1
   112a8:	cmn	r1, #-2147483647	; 0x80000001
   112ac:	beq	112d8 <__assert_fail@plt+0x414>
   112b0:	ldrb	r3, [r5, r1]
   112b4:	add	r2, r1, #1
   112b8:	cmp	r3, #0
   112bc:	beq	112d0 <__assert_fail@plt+0x40c>
   112c0:	ldrb	r1, [r0, r1]
   112c4:	cmp	r3, r1
   112c8:	mov	r1, r2
   112cc:	beq	112a8 <__assert_fail@plt+0x3e4>
   112d0:	add	r0, r5, r2
   112d4:	b	112dc <__assert_fail@plt+0x418>
   112d8:	add	r0, r5, r1
   112dc:	sub	r1, r0, #1
   112e0:	sub	sl, r1, r5
   112e4:	mov	r1, #0
   112e8:	movw	r4, #20788	; 0x5134
   112ec:	sub	r6, sl, r7
   112f0:	movt	r4, #2
   112f4:	add	r0, r6, #32768	; 0x8000
   112f8:	cmp	r1, r0, lsr #16
   112fc:	rsbne	r6, r7, #0
   11300:	movwne	sl, #0
   11304:	cmp	r8, #0
   11308:	bne	11370 <__assert_fail@plt+0x4ac>
   1130c:	ldr	r1, [r4]
   11310:	add	r0, r6, #127	; 0x7f
   11314:	cmp	r0, #255	; 0xff
   11318:	bcc	11360 <__assert_fail@plt+0x49c>
   1131c:	mov	r0, #128	; 0x80
   11320:	bl	10e88 <putc@plt>
   11324:	cmn	r0, #1
   11328:	beq	1140c <__assert_fail@plt+0x548>
   1132c:	cmp	r6, #32768	; 0x8000
   11330:	bge	11494 <__assert_fail@plt+0x5d0>
   11334:	cmn	r6, #32768	; 0x8000
   11338:	blt	114b4 <__assert_fail@plt+0x5f0>
   1133c:	ldr	r7, [r4]
   11340:	asr	r0, r6, #8
   11344:	mov	r1, r7
   11348:	bl	10e88 <putc@plt>
   1134c:	cmn	r0, #1
   11350:	beq	1140c <__assert_fail@plt+0x548>
   11354:	mov	r0, r6
   11358:	mov	r1, r7
   1135c:	b	11364 <__assert_fail@plt+0x4a0>
   11360:	mov	r0, r6
   11364:	bl	10e88 <putc@plt>
   11368:	cmn	r0, #1
   1136c:	beq	1140c <__assert_fail@plt+0x548>
   11370:	ldr	r0, [sp, #20]
   11374:	ldr	r1, [r4]
   11378:	add	r0, r0, sl
   1137c:	bl	10ea0 <fputs@plt>
   11380:	cmn	r0, #1
   11384:	beq	1140c <__assert_fail@plt+0x548>
   11388:	ldr	r1, [r4]
   1138c:	mov	r0, #0
   11390:	bl	10e88 <putc@plt>
   11394:	cmn	r0, #1
   11398:	beq	1140c <__assert_fail@plt+0x548>
   1139c:	movw	r0, #20784	; 0x5130
   113a0:	ldr	r4, [sp, #12]
   113a4:	ldr	r6, [sp, #20]
   113a8:	ldr	r7, [sp, #16]
   113ac:	add	r1, sp, #16
   113b0:	str	r5, [sp, #20]
   113b4:	str	r9, [sp, #16]
   113b8:	movt	r0, #2
   113bc:	ldr	r3, [r0]
   113c0:	add	r0, sp, #20
   113c4:	mov	r2, r4
   113c8:	bl	10e94 <getdelim@plt>
   113cc:	mov	r1, r0
   113d0:	ldr	r0, [sp, #20]
   113d4:	mov	r9, r7
   113d8:	mov	r8, #0
   113dc:	mov	r5, r6
   113e0:	mov	r7, sl
   113e4:	cmp	r1, #0
   113e8:	bgt	11240 <__assert_fail@plt+0x37c>
   113ec:	b	113f4 <__assert_fail@plt+0x530>
   113f0:	mov	r6, r5
   113f4:	bl	14284 <__assert_fail@plt+0x33c0>
   113f8:	mov	r0, r6
   113fc:	bl	14284 <__assert_fail@plt+0x33c0>
   11400:	mov	r0, #0
   11404:	sub	sp, fp, #28
   11408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1140c:	bl	115e0 <__assert_fail@plt+0x71c>
   11410:	movw	r1, #18382	; 0x47ce
   11414:	mov	r0, #0
   11418:	mov	r2, #5
   1141c:	movt	r1, #1
   11420:	bl	10d38 <dcgettext@plt>
   11424:	mov	r2, r0
   11428:	b	1146c <__assert_fail@plt+0x5a8>
   1142c:	movw	r1, #18323	; 0x4793
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	movt	r1, #1
   1143c:	bl	10d38 <dcgettext@plt>
   11440:	mov	r2, r0
   11444:	mov	r0, #1
   11448:	mov	r1, #0
   1144c:	bl	10d98 <error@plt>
   11450:	movw	r1, #18434	; 0x4802
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	movt	r1, #1
   11460:	bl	10d38 <dcgettext@plt>
   11464:	mov	r2, r0
   11468:	str	r7, [sp]
   1146c:	mov	r0, #1
   11470:	mov	r1, #0
   11474:	mov	r3, r6
   11478:	bl	10d98 <error@plt>
   1147c:	cmp	r0, #104	; 0x68
   11480:	bne	1148c <__assert_fail@plt+0x5c8>
   11484:	mov	r0, #0
   11488:	bl	11540 <__assert_fail@plt+0x67c>
   1148c:	mov	r0, #1
   11490:	bl	11540 <__assert_fail@plt+0x67c>
   11494:	movw	r0, #18575	; 0x488f
   11498:	movw	r1, #18589	; 0x489d
   1149c:	movw	r3, #18598	; 0x48a6
   114a0:	mov	r2, #104	; 0x68
   114a4:	movt	r0, #1
   114a8:	movt	r1, #1
   114ac:	movt	r3, #1
   114b0:	bl	10ec4 <__assert_fail@plt>
   114b4:	movw	r0, #18625	; 0x48c1
   114b8:	movw	r1, #18589	; 0x489d
   114bc:	movw	r3, #18598	; 0x48a6
   114c0:	mov	r2, #105	; 0x69
   114c4:	movt	r0, #1
   114c8:	movt	r1, #1
   114cc:	movt	r3, #1
   114d0:	bl	10ec4 <__assert_fail@plt>
   114d4:	bl	10e10 <__errno_location@plt>
   114d8:	ldr	r4, [r0]
   114dc:	movw	r1, #18119	; 0x46c7
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	mov	r2, #5
   114ec:	bl	10d38 <dcgettext@plt>
   114f0:	mov	r2, r0
   114f4:	mov	r0, #1
   114f8:	mov	r1, r4
   114fc:	bl	10d98 <error@plt>
   11500:	movw	r1, #18203	; 0x471b
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	10d38 <dcgettext@plt>
   11514:	mov	r2, r0
   11518:	mov	r0, #0
   1151c:	mov	r1, #0
   11520:	bl	10d98 <error@plt>
   11524:	mov	r0, #1
   11528:	bl	11540 <__assert_fail@plt+0x67c>
   1152c:	bl	10e10 <__errno_location@plt>
   11530:	ldr	r4, [r0]
   11534:	movw	r1, #18225	; 0x4731
   11538:	movt	r1, #1
   1153c:	b	114e4 <__assert_fail@plt+0x620>
   11540:	push	{fp, lr}
   11544:	mov	fp, sp
   11548:	cmp	r0, #0
   1154c:	bne	1159c <__assert_fail@plt+0x6d8>
   11550:	movw	r5, #20788	; 0x5134
   11554:	movw	r1, #18517	; 0x4855
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	movt	r5, #2
   11564:	movt	r1, #1
   11568:	ldr	r4, [r5]
   1156c:	bl	10d38 <dcgettext@plt>
   11570:	movw	r6, #20808	; 0x5148
   11574:	mov	r1, r0
   11578:	mov	r0, r4
   1157c:	movt	r6, #2
   11580:	ldr	r2, [r6]
   11584:	bl	10e04 <fprintf@plt>
   11588:	ldr	r0, [r5]
   1158c:	ldr	r1, [r6]
   11590:	bl	116c4 <__assert_fail@plt+0x800>
   11594:	mov	r0, #0
   11598:	bl	10dec <exit@plt>
   1159c:	mov	r4, r0
   115a0:	movw	r0, #20776	; 0x5128
   115a4:	movw	r1, #18478	; 0x482e
   115a8:	mov	r2, #5
   115ac:	movt	r0, #2
   115b0:	movt	r1, #1
   115b4:	ldr	r5, [r0]
   115b8:	mov	r0, #0
   115bc:	bl	10d38 <dcgettext@plt>
   115c0:	mov	r1, r0
   115c4:	movw	r0, #20808	; 0x5148
   115c8:	movt	r0, #2
   115cc:	ldr	r2, [r0]
   115d0:	mov	r0, r5
   115d4:	bl	10e04 <fprintf@plt>
   115d8:	mov	r0, r4
   115dc:	bl	10dec <exit@plt>
   115e0:	push	{fp, lr}
   115e4:	mov	fp, sp
   115e8:	bl	10e10 <__errno_location@plt>
   115ec:	ldr	r4, [r0]
   115f0:	movw	r1, #18563	; 0x4883
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	movt	r1, #1
   11600:	bl	10d38 <dcgettext@plt>
   11604:	mov	r2, r0
   11608:	mov	r0, #1
   1160c:	mov	r1, r4
   11610:	bl	10d98 <error@plt>
   11614:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11618:	add	fp, sp, #24
   1161c:	sub	sp, sp, #16
   11620:	mov	r8, r0
   11624:	movw	r0, #20776	; 0x5128
   11628:	movt	r0, #2
   1162c:	ldr	r0, [r0]
   11630:	bl	14228 <__assert_fail@plt+0x3364>
   11634:	movw	r0, #20788	; 0x5134
   11638:	movw	r1, #18742	; 0x4936
   1163c:	mov	r2, #5
   11640:	mov	r9, #0
   11644:	movt	r0, #2
   11648:	movt	r1, #1
   1164c:	ldr	r6, [r0]
   11650:	movw	r0, #20688	; 0x50d0
   11654:	movt	r0, #2
   11658:	ldr	r5, [r0]
   1165c:	mov	r0, #0
   11660:	bl	10d38 <dcgettext@plt>
   11664:	movw	r1, #18757	; 0x4945
   11668:	mov	r7, r0
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	10d38 <dcgettext@plt>
   1167c:	movw	r1, #18772	; 0x4954
   11680:	mov	r4, r0
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	10d38 <dcgettext@plt>
   11694:	movw	r2, #18728	; 0x4928
   11698:	str	r0, [sp, #8]
   1169c:	mov	r0, r6
   116a0:	mov	r1, r8
   116a4:	mov	r3, r5
   116a8:	str	r7, [sp]
   116ac:	str	r4, [sp, #4]
   116b0:	str	r9, [sp, #12]
   116b4:	movt	r2, #1
   116b8:	bl	13a18 <__assert_fail@plt+0x2b54>
   116bc:	sub	sp, fp, #24
   116c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   116c4:	push	{r4, r5, fp, lr}
   116c8:	add	fp, sp, #8
   116cc:	sub	sp, sp, #16
   116d0:	mov	r4, r1
   116d4:	movw	r1, #18785	; 0x4961
   116d8:	mov	r5, r0
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	movt	r1, #1
   116e8:	bl	10d38 <dcgettext@plt>
   116ec:	movw	r2, #19030	; 0x4a56
   116f0:	movw	r3, #18728	; 0x4928
   116f4:	mov	r1, r0
   116f8:	movw	r0, #19077	; 0x4a85
   116fc:	movt	r2, #1
   11700:	movt	r0, #1
   11704:	movt	r3, #1
   11708:	str	r2, [sp, #4]
   1170c:	movw	r2, #18991	; 0x4a2f
   11710:	str	r3, [sp]
   11714:	str	r0, [sp, #8]
   11718:	mov	r0, r5
   1171c:	mov	r3, r4
   11720:	movt	r2, #1
   11724:	bl	10e04 <fprintf@plt>
   11728:	sub	sp, fp, #8
   1172c:	pop	{r4, r5, fp, pc}
   11730:	movw	r1, #20800	; 0x5140
   11734:	movt	r1, #2
   11738:	str	r0, [r1]
   1173c:	bx	lr
   11740:	movw	r1, #20804	; 0x5144
   11744:	movt	r1, #2
   11748:	strb	r0, [r1]
   1174c:	bx	lr
   11750:	push	{r4, r5, r6, sl, fp, lr}
   11754:	add	fp, sp, #16
   11758:	sub	sp, sp, #8
   1175c:	movw	r0, #20788	; 0x5134
   11760:	movt	r0, #2
   11764:	ldr	r0, [r0]
   11768:	bl	14470 <__assert_fail@plt+0x35ac>
   1176c:	cmp	r0, #0
   11770:	beq	11798 <__assert_fail@plt+0x8d4>
   11774:	movw	r0, #20804	; 0x5144
   11778:	movt	r0, #2
   1177c:	ldrb	r0, [r0]
   11780:	cmp	r0, #0
   11784:	beq	117b8 <__assert_fail@plt+0x8f4>
   11788:	bl	10e10 <__errno_location@plt>
   1178c:	ldr	r0, [r0]
   11790:	cmp	r0, #32
   11794:	bne	117b8 <__assert_fail@plt+0x8f4>
   11798:	movw	r0, #20776	; 0x5128
   1179c:	movt	r0, #2
   117a0:	ldr	r0, [r0]
   117a4:	bl	14470 <__assert_fail@plt+0x35ac>
   117a8:	cmp	r0, #0
   117ac:	subeq	sp, fp, #16
   117b0:	popeq	{r4, r5, r6, sl, fp, pc}
   117b4:	b	11828 <__assert_fail@plt+0x964>
   117b8:	movw	r1, #18563	; 0x4883
   117bc:	mov	r0, #0
   117c0:	mov	r2, #5
   117c4:	movt	r1, #1
   117c8:	bl	10d38 <dcgettext@plt>
   117cc:	mov	r4, r0
   117d0:	movw	r0, #20800	; 0x5140
   117d4:	movt	r0, #2
   117d8:	ldr	r6, [r0]
   117dc:	bl	10e10 <__errno_location@plt>
   117e0:	ldr	r5, [r0]
   117e4:	cmp	r6, #0
   117e8:	bne	11804 <__assert_fail@plt+0x940>
   117ec:	movw	r2, #19103	; 0x4a9f
   117f0:	mov	r0, #0
   117f4:	mov	r1, r5
   117f8:	mov	r3, r4
   117fc:	movt	r2, #1
   11800:	b	11824 <__assert_fail@plt+0x960>
   11804:	mov	r0, r6
   11808:	bl	130e4 <__assert_fail@plt+0x2220>
   1180c:	movw	r2, #19099	; 0x4a9b
   11810:	mov	r3, r0
   11814:	str	r4, [sp]
   11818:	mov	r0, #0
   1181c:	mov	r1, r5
   11820:	movt	r2, #1
   11824:	bl	10d98 <error@plt>
   11828:	movw	r0, #20692	; 0x50d4
   1182c:	movt	r0, #2
   11830:	ldr	r0, [r0]
   11834:	bl	10d08 <_exit@plt>
   11838:	push	{r4, r5, fp, lr}
   1183c:	add	fp, sp, #8
   11840:	cmp	r0, #0
   11844:	beq	118d8 <__assert_fail@plt+0xa14>
   11848:	mov	r1, #47	; 0x2f
   1184c:	mov	r4, r0
   11850:	bl	10e64 <strrchr@plt>
   11854:	cmp	r0, #0
   11858:	mov	r5, r4
   1185c:	addne	r5, r0, #1
   11860:	sub	r0, r5, r4
   11864:	cmp	r0, #7
   11868:	blt	118bc <__assert_fail@plt+0x9f8>
   1186c:	movw	r1, #19162	; 0x4ada
   11870:	sub	r0, r5, #7
   11874:	mov	r2, #7
   11878:	movt	r1, #1
   1187c:	bl	10eac <strncmp@plt>
   11880:	cmp	r0, #0
   11884:	bne	118bc <__assert_fail@plt+0x9f8>
   11888:	movw	r1, #19170	; 0x4ae2
   1188c:	mov	r0, r5
   11890:	mov	r2, #3
   11894:	movt	r1, #1
   11898:	bl	10eac <strncmp@plt>
   1189c:	cmp	r0, #0
   118a0:	beq	118ac <__assert_fail@plt+0x9e8>
   118a4:	mov	r4, r5
   118a8:	b	118bc <__assert_fail@plt+0x9f8>
   118ac:	movw	r0, #20760	; 0x5118
   118b0:	add	r4, r5, #3
   118b4:	movt	r0, #2
   118b8:	str	r4, [r0]
   118bc:	movw	r0, #20764	; 0x511c
   118c0:	movt	r0, #2
   118c4:	str	r4, [r0]
   118c8:	movw	r0, #20808	; 0x5148
   118cc:	movt	r0, #2
   118d0:	str	r4, [r0]
   118d4:	pop	{r4, r5, fp, pc}
   118d8:	movw	r0, #20776	; 0x5128
   118dc:	mov	r1, #55	; 0x37
   118e0:	mov	r2, #1
   118e4:	movt	r0, #2
   118e8:	ldr	r3, [r0]
   118ec:	movw	r0, #19106	; 0x4aa2
   118f0:	movt	r0, #1
   118f4:	bl	10d5c <fwrite@plt>
   118f8:	bl	10eb8 <abort@plt>
   118fc:	push	{r4, r5, r6, sl, fp, lr}
   11900:	add	fp, sp, #16
   11904:	mov	r4, r0
   11908:	movw	r0, #20816	; 0x5150
   1190c:	movt	r0, #2
   11910:	cmp	r4, #0
   11914:	moveq	r4, r0
   11918:	bl	10e10 <__errno_location@plt>
   1191c:	ldr	r6, [r0]
   11920:	mov	r5, r0
   11924:	mov	r0, r4
   11928:	mov	r1, #48	; 0x30
   1192c:	bl	14090 <__assert_fail@plt+0x31cc>
   11930:	str	r6, [r5]
   11934:	pop	{r4, r5, r6, sl, fp, pc}
   11938:	movw	r1, #20816	; 0x5150
   1193c:	cmp	r0, #0
   11940:	movt	r1, #2
   11944:	movne	r1, r0
   11948:	ldr	r0, [r1]
   1194c:	bx	lr
   11950:	movw	r2, #20816	; 0x5150
   11954:	cmp	r0, #0
   11958:	movt	r2, #2
   1195c:	movne	r2, r0
   11960:	str	r1, [r2]
   11964:	bx	lr
   11968:	movw	r3, #20816	; 0x5150
   1196c:	cmp	r0, #0
   11970:	movt	r3, #2
   11974:	movne	r3, r0
   11978:	ubfx	r0, r1, #5, #3
   1197c:	and	r1, r1, #31
   11980:	add	r0, r3, r0, lsl #2
   11984:	ldr	r3, [r0, #8]
   11988:	eor	r2, r2, r3, lsr r1
   1198c:	and	r2, r2, #1
   11990:	eor	r2, r3, r2, lsl r1
   11994:	str	r2, [r0, #8]
   11998:	mov	r0, #1
   1199c:	and	r0, r0, r3, lsr r1
   119a0:	bx	lr
   119a4:	movw	r2, #20816	; 0x5150
   119a8:	cmp	r0, #0
   119ac:	movt	r2, #2
   119b0:	movne	r2, r0
   119b4:	ldr	r0, [r2, #4]
   119b8:	str	r1, [r2, #4]
   119bc:	bx	lr
   119c0:	movw	r3, #20816	; 0x5150
   119c4:	cmp	r0, #0
   119c8:	movt	r3, #2
   119cc:	movne	r3, r0
   119d0:	cmp	r1, #0
   119d4:	mov	r0, #10
   119d8:	cmpne	r2, #0
   119dc:	str	r0, [r3]
   119e0:	bne	119f0 <__assert_fail@plt+0xb2c>
   119e4:	push	{fp, lr}
   119e8:	mov	fp, sp
   119ec:	bl	10eb8 <abort@plt>
   119f0:	str	r1, [r3, #40]	; 0x28
   119f4:	str	r2, [r3, #44]	; 0x2c
   119f8:	bx	lr
   119fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a00:	add	fp, sp, #28
   11a04:	sub	sp, sp, #20
   11a08:	mov	r7, r0
   11a0c:	ldr	r0, [fp, #8]
   11a10:	movw	r5, #20816	; 0x5150
   11a14:	mov	r8, r3
   11a18:	mov	r9, r2
   11a1c:	mov	sl, r1
   11a20:	movt	r5, #2
   11a24:	cmp	r0, #0
   11a28:	movne	r5, r0
   11a2c:	bl	10e10 <__errno_location@plt>
   11a30:	mov	r4, r0
   11a34:	ldm	r5, {r0, r1}
   11a38:	ldr	r2, [r5, #40]	; 0x28
   11a3c:	ldr	r3, [r5, #44]	; 0x2c
   11a40:	add	r5, r5, #8
   11a44:	ldr	r6, [r4]
   11a48:	stm	sp, {r0, r1, r5}
   11a4c:	str	r2, [sp, #12]
   11a50:	str	r3, [sp, #16]
   11a54:	mov	r0, r7
   11a58:	mov	r1, sl
   11a5c:	mov	r2, r9
   11a60:	mov	r3, r8
   11a64:	bl	11a74 <__assert_fail@plt+0xbb0>
   11a68:	str	r6, [r4]
   11a6c:	sub	sp, fp, #28
   11a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a78:	add	fp, sp, #28
   11a7c:	sub	sp, sp, #156	; 0x9c
   11a80:	str	r0, [sp, #80]	; 0x50
   11a84:	ldr	r0, [fp, #12]
   11a88:	mov	r6, r1
   11a8c:	mov	r9, r3
   11a90:	str	r2, [fp, #-84]	; 0xffffffac
   11a94:	and	r1, r0, #4
   11a98:	str	r1, [sp, #32]
   11a9c:	and	r1, r0, #1
   11aa0:	str	r1, [sp, #36]	; 0x24
   11aa4:	ubfx	r4, r0, #1, #1
   11aa8:	bl	10d74 <__ctype_get_mb_cur_max@plt>
   11aac:	str	r0, [sp, #40]	; 0x28
   11ab0:	ldr	r0, [fp, #24]
   11ab4:	ldr	r7, [fp, #8]
   11ab8:	mov	r1, #0
   11abc:	mov	r5, #1
   11ac0:	str	r1, [fp, #-56]	; 0xffffffc8
   11ac4:	mov	r1, #0
   11ac8:	str	r1, [sp, #60]	; 0x3c
   11acc:	str	r0, [sp, #76]	; 0x4c
   11ad0:	ldr	r0, [fp, #20]
   11ad4:	str	r0, [sp, #72]	; 0x48
   11ad8:	mov	r0, #0
   11adc:	str	r0, [sp, #56]	; 0x38
   11ae0:	mov	r0, #0
   11ae4:	str	r0, [sp, #92]	; 0x5c
   11ae8:	mov	r0, #0
   11aec:	str	r0, [fp, #-76]	; 0xffffffb4
   11af0:	mov	r0, #0
   11af4:	cmp	r7, #10
   11af8:	bhi	12a78 <__assert_fail@plt+0x1bb4>
   11afc:	add	r1, pc, #28
   11b00:	mov	sl, r6
   11b04:	ldr	r6, [sp, #80]	; 0x50
   11b08:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b0c:	mov	r8, #0
   11b10:	mov	r2, #1
   11b14:	mov	r3, #0
   11b18:	mov	lr, r9
   11b1c:	ldr	pc, [r1, r7, lsl #2]
   11b20:	andeq	r1, r1, r4, lsl #24
   11b24:	andeq	r1, r1, r0, lsr ip
   11b28:	strdeq	r1, [r1], -r4
   11b2c:	andeq	r1, r1, ip, ror #23
   11b30:	andeq	r1, r1, r4, lsr #24
   11b34:	andeq	r1, r1, r8, ror ip
   11b38:	andeq	r1, r1, r4, lsl ip
   11b3c:	ldrdeq	r1, [r1], -r4
   11b40:	andeq	r1, r1, ip, asr #22
   11b44:	andeq	r1, r1, ip, asr #22
   11b48:	andeq	r1, r1, r4, ror fp
   11b4c:	movw	r0, #19252	; 0x4b34
   11b50:	mov	r1, r7
   11b54:	movt	r0, #1
   11b58:	bl	13484 <__assert_fail@plt+0x25c0>
   11b5c:	str	r0, [sp, #72]	; 0x48
   11b60:	movw	r0, #19254	; 0x4b36
   11b64:	mov	r1, r7
   11b68:	movt	r0, #1
   11b6c:	bl	13484 <__assert_fail@plt+0x25c0>
   11b70:	str	r0, [sp, #76]	; 0x4c
   11b74:	str	r5, [fp, #-48]	; 0xffffffd0
   11b78:	mov	r8, #0
   11b7c:	mov	r5, r7
   11b80:	tst	r4, #1
   11b84:	bne	11bbc <__assert_fail@plt+0xcf8>
   11b88:	ldr	r0, [sp, #72]	; 0x48
   11b8c:	ldrb	r0, [r0]
   11b90:	cmp	r0, #0
   11b94:	beq	11bbc <__assert_fail@plt+0xcf8>
   11b98:	ldr	r1, [sp, #72]	; 0x48
   11b9c:	mov	r8, #0
   11ba0:	add	r1, r1, #1
   11ba4:	cmp	r8, sl
   11ba8:	strbcc	r0, [r6, r8]
   11bac:	ldrb	r0, [r1, r8]
   11bb0:	add	r8, r8, #1
   11bb4:	cmp	r0, #0
   11bb8:	bne	11ba4 <__assert_fail@plt+0xce0>
   11bbc:	ldr	r7, [sp, #76]	; 0x4c
   11bc0:	mov	r0, r7
   11bc4:	bl	10df8 <strlen@plt>
   11bc8:	str	r7, [sp, #92]	; 0x5c
   11bcc:	mov	r7, r5
   11bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11bd4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11bd8:	str	r0, [fp, #-76]	; 0xffffffb4
   11bdc:	mov	r2, #1
   11be0:	mov	r3, r4
   11be4:	mov	lr, r9
   11be8:	b	11cd4 <__assert_fail@plt+0xe10>
   11bec:	mov	r0, #1
   11bf0:	b	11c30 <__assert_fail@plt+0xd6c>
   11bf4:	tst	r4, #1
   11bf8:	bne	11c30 <__assert_fail@plt+0xd6c>
   11bfc:	mov	r2, r0
   11c00:	b	11c58 <__assert_fail@plt+0xd94>
   11c04:	mov	r7, #0
   11c08:	mov	r8, #0
   11c0c:	mov	r2, r0
   11c10:	b	11cd0 <__assert_fail@plt+0xe0c>
   11c14:	mov	r0, #1
   11c18:	mov	r8, #0
   11c1c:	mov	r7, #5
   11c20:	b	11c8c <__assert_fail@plt+0xdc8>
   11c24:	mov	r2, #1
   11c28:	tst	r4, #1
   11c2c:	beq	11c58 <__assert_fail@plt+0xd94>
   11c30:	mov	r1, #1
   11c34:	mov	r8, #0
   11c38:	mov	r7, #2
   11c3c:	mov	r2, r0
   11c40:	mov	r3, #1
   11c44:	str	r1, [fp, #-76]	; 0xffffffb4
   11c48:	movw	r1, #19254	; 0x4b36
   11c4c:	movt	r1, #1
   11c50:	str	r1, [sp, #92]	; 0x5c
   11c54:	b	11cd4 <__assert_fail@plt+0xe10>
   11c58:	cmp	sl, #0
   11c5c:	mov	r8, #1
   11c60:	mov	r7, #2
   11c64:	movne	r0, #39	; 0x27
   11c68:	strbne	r0, [r6]
   11c6c:	movw	r0, #19254	; 0x4b36
   11c70:	movt	r0, #1
   11c74:	b	11cc4 <__assert_fail@plt+0xe00>
   11c78:	mov	r7, #5
   11c7c:	tst	r4, #1
   11c80:	beq	11ca8 <__assert_fail@plt+0xde4>
   11c84:	mov	r0, #1
   11c88:	mov	r8, #0
   11c8c:	str	r0, [fp, #-76]	; 0xffffffb4
   11c90:	movw	r0, #19250	; 0x4b32
   11c94:	mov	r2, #1
   11c98:	mov	r3, #1
   11c9c:	movt	r0, #1
   11ca0:	str	r0, [sp, #92]	; 0x5c
   11ca4:	b	11cd4 <__assert_fail@plt+0xe10>
   11ca8:	cmp	sl, #0
   11cac:	mov	r8, #1
   11cb0:	mov	r2, #1
   11cb4:	movne	r0, #34	; 0x22
   11cb8:	strbne	r0, [r6]
   11cbc:	movw	r0, #19250	; 0x4b32
   11cc0:	movt	r0, #1
   11cc4:	str	r0, [sp, #92]	; 0x5c
   11cc8:	mov	r0, #1
   11ccc:	str	r0, [fp, #-76]	; 0xffffffb4
   11cd0:	mov	r3, #0
   11cd4:	ldr	r0, [fp, #16]
   11cd8:	str	r3, [fp, #-72]	; 0xffffffb8
   11cdc:	str	r7, [fp, #-64]	; 0xffffffc0
   11ce0:	str	r2, [sp, #84]	; 0x54
   11ce4:	cmp	r0, #0
   11ce8:	movwne	r0, #1
   11cec:	and	r0, r0, r3
   11cf0:	str	r0, [fp, #-88]	; 0xffffffa8
   11cf4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11cf8:	cmp	r0, #0
   11cfc:	movwne	r0, #1
   11d00:	subs	r4, r7, #2
   11d04:	mov	r7, #0
   11d08:	and	r1, r0, r3
   11d0c:	str	r4, [fp, #-80]	; 0xffffffb0
   11d10:	and	r1, r2, r1
   11d14:	str	r1, [sp, #48]	; 0x30
   11d18:	clz	r1, r4
   11d1c:	lsr	r1, r1, #5
   11d20:	and	r1, r1, r3
   11d24:	eor	r3, r3, #1
   11d28:	str	r1, [sp, #64]	; 0x40
   11d2c:	mov	r1, r4
   11d30:	str	r3, [sp, #88]	; 0x58
   11d34:	movwne	r1, #1
   11d38:	orr	r3, r1, r3
   11d3c:	and	r1, r1, r2
   11d40:	and	r0, r0, r1
   11d44:	str	r3, [sp, #68]	; 0x44
   11d48:	str	r1, [fp, #-68]	; 0xffffffbc
   11d4c:	str	r0, [fp, #-60]	; 0xffffffc4
   11d50:	eor	r0, r2, #1
   11d54:	str	r0, [sp, #52]	; 0x34
   11d58:	cmn	lr, #1
   11d5c:	beq	11d6c <__assert_fail@plt+0xea8>
   11d60:	cmp	r7, lr
   11d64:	bne	11d78 <__assert_fail@plt+0xeb4>
   11d68:	b	128a0 <__assert_fail@plt+0x19dc>
   11d6c:	ldrb	r0, [ip, r7]
   11d70:	cmp	r0, #0
   11d74:	beq	128a8 <__assert_fail@plt+0x19e4>
   11d78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d7c:	mov	r9, #0
   11d80:	str	r5, [fp, #-48]	; 0xffffffd0
   11d84:	cmp	r0, #0
   11d88:	beq	11dbc <__assert_fail@plt+0xef8>
   11d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d90:	add	r4, r7, r0
   11d94:	cmp	r0, #2
   11d98:	bcc	11db4 <__assert_fail@plt+0xef0>
   11d9c:	cmn	lr, #1
   11da0:	bne	11db4 <__assert_fail@plt+0xef0>
   11da4:	mov	r0, ip
   11da8:	bl	10df8 <strlen@plt>
   11dac:	ldr	ip, [fp, #-84]	; 0xffffffac
   11db0:	mov	lr, r0
   11db4:	cmp	r4, lr
   11db8:	bls	11dc4 <__assert_fail@plt+0xf00>
   11dbc:	mov	r0, #0
   11dc0:	b	11e04 <__assert_fail@plt+0xf40>
   11dc4:	ldr	r1, [sp, #92]	; 0x5c
   11dc8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11dcc:	add	r0, ip, r7
   11dd0:	mov	r4, lr
   11dd4:	bl	10d2c <memcmp@plt>
   11dd8:	ldr	r2, [sp, #88]	; 0x58
   11ddc:	cmp	r0, #0
   11de0:	mov	r1, r0
   11de4:	movwne	r1, #1
   11de8:	orr	r1, r1, r2
   11dec:	tst	r1, #1
   11df0:	beq	12938 <__assert_fail@plt+0x1a74>
   11df4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11df8:	clz	r0, r0
   11dfc:	mov	lr, r4
   11e00:	lsr	r0, r0, #5
   11e04:	str	r0, [fp, #-52]	; 0xffffffcc
   11e08:	ldrb	r5, [ip, r7]
   11e0c:	cmp	r5, #126	; 0x7e
   11e10:	bhi	121c8 <__assert_fail@plt+0x1304>
   11e14:	add	r3, pc, #16
   11e18:	mov	r4, #1
   11e1c:	mov	r2, #110	; 0x6e
   11e20:	mov	r0, #97	; 0x61
   11e24:	mov	r1, #0
   11e28:	ldr	pc, [r3, r5, lsl #2]
   11e2c:	andeq	r2, r1, r4, asr #1
   11e30:	andeq	r2, r1, r8, asr #3
   11e34:	andeq	r2, r1, r8, asr #3
   11e38:	andeq	r2, r1, r8, asr #3
   11e3c:	andeq	r2, r1, r8, asr #3
   11e40:	andeq	r2, r1, r8, asr #3
   11e44:	andeq	r2, r1, r8, asr #3
   11e48:	andeq	r2, r1, ip, ror r2
   11e4c:	andeq	r2, r1, r4, lsr #1
   11e50:	muleq	r1, ip, r0
   11e54:	strheq	r2, [r1], -r0
   11e58:	andeq	r2, r1, r0, lsr r1
   11e5c:	muleq	r1, r4, r0
   11e60:	andeq	r2, r1, ip, lsr #1
   11e64:	andeq	r2, r1, r8, asr #3
   11e68:	andeq	r2, r1, r8, asr #3
   11e6c:	andeq	r2, r1, r8, asr #3
   11e70:	andeq	r2, r1, r8, asr #3
   11e74:	andeq	r2, r1, r8, asr #3
   11e78:	andeq	r2, r1, r8, asr #3
   11e7c:	andeq	r2, r1, r8, asr #3
   11e80:	andeq	r2, r1, r8, asr #3
   11e84:	andeq	r2, r1, r8, asr #3
   11e88:	andeq	r2, r1, r8, asr #3
   11e8c:	andeq	r2, r1, r8, asr #3
   11e90:	andeq	r2, r1, r8, asr #3
   11e94:	andeq	r2, r1, r8, asr #3
   11e98:	andeq	r2, r1, r8, asr #3
   11e9c:	andeq	r2, r1, r8, asr #3
   11ea0:	andeq	r2, r1, r8, asr #3
   11ea4:	andeq	r2, r1, r8, asr #3
   11ea8:	andeq	r2, r1, r8, asr #3
   11eac:	andeq	r2, r1, r4, lsr r2
   11eb0:	andeq	r2, r1, r8, lsr r2
   11eb4:	andeq	r2, r1, r8, lsr r2
   11eb8:	andeq	r2, r1, ip, lsr r0
   11ebc:	andeq	r2, r1, r8, lsr r2
   11ec0:	andeq	r2, r1, r8, lsr #32
   11ec4:	andeq	r2, r1, r8, lsr r2
   11ec8:	andeq	r2, r1, r8, lsr r1
   11ecc:	andeq	r2, r1, r8, lsr r2
   11ed0:	andeq	r2, r1, r8, lsr r2
   11ed4:	andeq	r2, r1, r8, lsr r2
   11ed8:	andeq	r2, r1, r8, lsr #32
   11edc:	andeq	r2, r1, r8, lsr #32
   11ee0:	andeq	r2, r1, r8, lsr #32
   11ee4:	andeq	r2, r1, r8, lsr #32
   11ee8:	andeq	r2, r1, r8, lsr #32
   11eec:	andeq	r2, r1, r8, lsr #32
   11ef0:	andeq	r2, r1, r8, lsr #32
   11ef4:	andeq	r2, r1, r8, lsr #32
   11ef8:	andeq	r2, r1, r8, lsr #32
   11efc:	andeq	r2, r1, r8, lsr #32
   11f00:	andeq	r2, r1, r8, lsr #32
   11f04:	andeq	r2, r1, r8, lsr #32
   11f08:	andeq	r2, r1, r8, lsr #32
   11f0c:	andeq	r2, r1, r8, lsr #32
   11f10:	andeq	r2, r1, r8, lsr #32
   11f14:	andeq	r2, r1, r8, lsr #32
   11f18:	andeq	r2, r1, r8, lsr r2
   11f1c:	andeq	r2, r1, r8, lsr r2
   11f20:	andeq	r2, r1, r8, lsr r2
   11f24:	andeq	r2, r1, r8, lsr r2
   11f28:	andeq	r2, r1, r4, lsl #2
   11f2c:	andeq	r2, r1, r8, asr #3
   11f30:	andeq	r2, r1, r8, lsr #32
   11f34:	andeq	r2, r1, r8, lsr #32
   11f38:	andeq	r2, r1, r8, lsr #32
   11f3c:	andeq	r2, r1, r8, lsr #32
   11f40:	andeq	r2, r1, r8, lsr #32
   11f44:	andeq	r2, r1, r8, lsr #32
   11f48:	andeq	r2, r1, r8, lsr #32
   11f4c:	andeq	r2, r1, r8, lsr #32
   11f50:	andeq	r2, r1, r8, lsr #32
   11f54:	andeq	r2, r1, r8, lsr #32
   11f58:	andeq	r2, r1, r8, lsr #32
   11f5c:	andeq	r2, r1, r8, lsr #32
   11f60:	andeq	r2, r1, r8, lsr #32
   11f64:	andeq	r2, r1, r8, lsr #32
   11f68:	andeq	r2, r1, r8, lsr #32
   11f6c:	andeq	r2, r1, r8, lsr #32
   11f70:	andeq	r2, r1, r8, lsr #32
   11f74:	andeq	r2, r1, r8, lsr #32
   11f78:	andeq	r2, r1, r8, lsr #32
   11f7c:	andeq	r2, r1, r8, lsr #32
   11f80:	andeq	r2, r1, r8, lsr #32
   11f84:	andeq	r2, r1, r8, lsr #32
   11f88:	andeq	r2, r1, r8, lsr #32
   11f8c:	andeq	r2, r1, r8, lsr #32
   11f90:	andeq	r2, r1, r8, lsr #32
   11f94:	andeq	r2, r1, r8, lsr #32
   11f98:	andeq	r2, r1, r8, lsr r2
   11f9c:	andeq	r2, r1, r0, ror r0
   11fa0:	andeq	r2, r1, r8, lsr #32
   11fa4:	andeq	r2, r1, r8, lsr r2
   11fa8:	andeq	r2, r1, r8, lsr #32
   11fac:	andeq	r2, r1, r8, lsr r2
   11fb0:	andeq	r2, r1, r8, lsr #32
   11fb4:	andeq	r2, r1, r8, lsr #32
   11fb8:	andeq	r2, r1, r8, lsr #32
   11fbc:	andeq	r2, r1, r8, lsr #32
   11fc0:	andeq	r2, r1, r8, lsr #32
   11fc4:	andeq	r2, r1, r8, lsr #32
   11fc8:	andeq	r2, r1, r8, lsr #32
   11fcc:	andeq	r2, r1, r8, lsr #32
   11fd0:	andeq	r2, r1, r8, lsr #32
   11fd4:	andeq	r2, r1, r8, lsr #32
   11fd8:	andeq	r2, r1, r8, lsr #32
   11fdc:	andeq	r2, r1, r8, lsr #32
   11fe0:	andeq	r2, r1, r8, lsr #32
   11fe4:	andeq	r2, r1, r8, lsr #32
   11fe8:	andeq	r2, r1, r8, lsr #32
   11fec:	andeq	r2, r1, r8, lsr #32
   11ff0:	andeq	r2, r1, r8, lsr #32
   11ff4:	andeq	r2, r1, r8, lsr #32
   11ff8:	andeq	r2, r1, r8, lsr #32
   11ffc:	andeq	r2, r1, r8, lsr #32
   12000:	andeq	r2, r1, r8, lsr #32
   12004:	andeq	r2, r1, r8, lsr #32
   12008:	andeq	r2, r1, r8, lsr #32
   1200c:	andeq	r2, r1, r8, lsr #32
   12010:	andeq	r2, r1, r8, lsr #32
   12014:	andeq	r2, r1, r8, lsr #32
   12018:	andeq	r2, r1, r0, asr r0
   1201c:	andeq	r2, r1, r8, lsr r2
   12020:	andeq	r2, r1, r0, asr r0
   12024:	andeq	r2, r1, ip, lsr r0
   12028:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1202c:	cmp	r0, #0
   12030:	beq	12290 <__assert_fail@plt+0x13cc>
   12034:	ldr	r0, [fp, #16]
   12038:	b	12294 <__assert_fail@plt+0x13d0>
   1203c:	mov	r4, #0
   12040:	cmp	r7, #0
   12044:	beq	12234 <__assert_fail@plt+0x1370>
   12048:	mov	r9, #0
   1204c:	b	12028 <__assert_fail@plt+0x1164>
   12050:	mov	r4, #0
   12054:	cmn	lr, #1
   12058:	beq	12218 <__assert_fail@plt+0x1354>
   1205c:	cmp	r7, #0
   12060:	bne	12048 <__assert_fail@plt+0x1184>
   12064:	cmp	lr, #1
   12068:	beq	12234 <__assert_fail@plt+0x1370>
   1206c:	b	12048 <__assert_fail@plt+0x1184>
   12070:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12074:	cmp	r0, #2
   12078:	bne	12258 <__assert_fail@plt+0x1394>
   1207c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12080:	tst	r0, #1
   12084:	bne	12954 <__assert_fail@plt+0x1a90>
   12088:	mov	r9, #0
   1208c:	mov	r0, #92	; 0x5c
   12090:	b	1226c <__assert_fail@plt+0x13a8>
   12094:	mov	r0, #102	; 0x66
   12098:	b	1227c <__assert_fail@plt+0x13b8>
   1209c:	mov	r2, #116	; 0x74
   120a0:	b	120b0 <__assert_fail@plt+0x11ec>
   120a4:	mov	r0, #98	; 0x62
   120a8:	b	1227c <__assert_fail@plt+0x13b8>
   120ac:	mov	r2, #114	; 0x72
   120b0:	ldr	r0, [sp, #68]	; 0x44
   120b4:	tst	r0, #1
   120b8:	mov	r0, r2
   120bc:	bne	1227c <__assert_fail@plt+0x13b8>
   120c0:	b	12954 <__assert_fail@plt+0x1a90>
   120c4:	ldr	r0, [sp, #84]	; 0x54
   120c8:	tst	r0, #1
   120cc:	beq	1236c <__assert_fail@plt+0x14a8>
   120d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120d4:	tst	r0, #1
   120d8:	bne	12a64 <__assert_fail@plt+0x1ba0>
   120dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   120e4:	cmp	r0, #2
   120e8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120ec:	movwne	r0, #1
   120f0:	orr	r0, r0, r2
   120f4:	tst	r0, #1
   120f8:	beq	1273c <__assert_fail@plt+0x1878>
   120fc:	mov	r0, r8
   12100:	b	12770 <__assert_fail@plt+0x18ac>
   12104:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12108:	mov	r9, #0
   1210c:	mov	r5, #63	; 0x3f
   12110:	cmp	r0, #5
   12114:	beq	12520 <__assert_fail@plt+0x165c>
   12118:	cmp	r0, #2
   1211c:	bne	125c4 <__assert_fail@plt+0x1700>
   12120:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12124:	tst	r0, #1
   12128:	beq	125c8 <__assert_fail@plt+0x1704>
   1212c:	b	12954 <__assert_fail@plt+0x1a90>
   12130:	mov	r0, #118	; 0x76
   12134:	b	1227c <__assert_fail@plt+0x13b8>
   12138:	mov	r0, #1
   1213c:	mov	r5, #39	; 0x27
   12140:	str	r0, [sp, #60]	; 0x3c
   12144:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12148:	cmp	r0, #2
   1214c:	bne	121c0 <__assert_fail@plt+0x12fc>
   12150:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12154:	tst	r0, #1
   12158:	bne	12954 <__assert_fail@plt+0x1a90>
   1215c:	ldr	r2, [sp, #56]	; 0x38
   12160:	clz	r1, sl
   12164:	mov	r9, #0
   12168:	lsr	r1, r1, #5
   1216c:	cmp	r2, #0
   12170:	mov	r0, r2
   12174:	movwne	r0, #1
   12178:	orrs	r0, r0, r1
   1217c:	moveq	r2, sl
   12180:	moveq	sl, r0
   12184:	cmp	r8, sl
   12188:	str	r2, [sp, #56]	; 0x38
   1218c:	movcc	r0, #39	; 0x27
   12190:	strbcc	r0, [r6, r8]
   12194:	add	r0, r8, #1
   12198:	cmp	r0, sl
   1219c:	movcc	r1, #92	; 0x5c
   121a0:	strbcc	r1, [r6, r0]
   121a4:	add	r0, r8, #2
   121a8:	add	r8, r8, #3
   121ac:	cmp	r0, sl
   121b0:	movcc	r1, #39	; 0x27
   121b4:	strbcc	r1, [r6, r0]
   121b8:	mov	r0, #0
   121bc:	str	r0, [fp, #-56]	; 0xffffffc8
   121c0:	mov	r4, #1
   121c4:	b	12028 <__assert_fail@plt+0x1164>
   121c8:	ldr	r0, [sp, #40]	; 0x28
   121cc:	cmp	r0, #1
   121d0:	bne	12398 <__assert_fail@plt+0x14d4>
   121d4:	str	lr, [sp, #28]
   121d8:	bl	10de0 <__ctype_b_loc@plt>
   121dc:	ldr	r0, [r0]
   121e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   121e4:	mov	r1, #1
   121e8:	add	r0, r0, r5, lsl #1
   121ec:	ldrb	r0, [r0, #1]
   121f0:	ubfx	r4, r0, #6, #1
   121f4:	ldr	r0, [sp, #52]	; 0x34
   121f8:	mov	r2, r1
   121fc:	cmp	r1, #1
   12200:	orr	r0, r4, r0
   12204:	bhi	125d0 <__assert_fail@plt+0x170c>
   12208:	tst	r0, #1
   1220c:	beq	125d0 <__assert_fail@plt+0x170c>
   12210:	ldr	lr, [sp, #28]
   12214:	b	12028 <__assert_fail@plt+0x1164>
   12218:	cmp	r7, #0
   1221c:	ldrbeq	r0, [ip, #1]
   12220:	cmpeq	r0, #0
   12224:	beq	12234 <__assert_fail@plt+0x1370>
   12228:	mvn	lr, #0
   1222c:	mov	r9, #0
   12230:	b	12028 <__assert_fail@plt+0x1164>
   12234:	mov	r1, #1
   12238:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1223c:	cmp	r0, #2
   12240:	bne	12250 <__assert_fail@plt+0x138c>
   12244:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12248:	tst	r0, #1
   1224c:	bne	12954 <__assert_fail@plt+0x1a90>
   12250:	mov	r4, r1
   12254:	b	12028 <__assert_fail@plt+0x1164>
   12258:	ldr	r1, [sp, #48]	; 0x30
   1225c:	mov	r9, #0
   12260:	mov	r0, #92	; 0x5c
   12264:	cmp	r1, #0
   12268:	beq	1227c <__assert_fail@plt+0x13b8>
   1226c:	mov	r4, #0
   12270:	cmp	r9, #0
   12274:	beq	12808 <__assert_fail@plt+0x1944>
   12278:	b	12844 <__assert_fail@plt+0x1980>
   1227c:	ldr	r1, [sp, #84]	; 0x54
   12280:	mov	r4, #0
   12284:	mov	r9, #0
   12288:	tst	r1, #1
   1228c:	bne	122cc <__assert_fail@plt+0x1408>
   12290:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12294:	cmp	r0, #0
   12298:	mov	r0, r5
   1229c:	beq	122c0 <__assert_fail@plt+0x13fc>
   122a0:	ldr	r1, [fp, #16]
   122a4:	ubfx	r0, r5, #5, #3
   122a8:	mov	r2, #1
   122ac:	ldr	r0, [r1, r0, lsl #2]
   122b0:	and	r1, r5, #31
   122b4:	tst	r0, r2, lsl r1
   122b8:	mov	r0, r5
   122bc:	bne	122cc <__assert_fail@plt+0x1408>
   122c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   122c4:	cmp	r1, #0
   122c8:	beq	12800 <__assert_fail@plt+0x193c>
   122cc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   122d0:	tst	r1, #1
   122d4:	bne	1292c <__assert_fail@plt+0x1a68>
   122d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   122e0:	cmp	r1, #2
   122e4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122e8:	movwne	r1, #1
   122ec:	orr	r1, r1, r2
   122f0:	tst	r1, #1
   122f4:	beq	12300 <__assert_fail@plt+0x143c>
   122f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122fc:	b	1233c <__assert_fail@plt+0x1478>
   12300:	cmp	r8, sl
   12304:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12308:	movcc	r1, #39	; 0x27
   1230c:	strbcc	r1, [r6, r8]
   12310:	add	r1, r8, #1
   12314:	cmp	r1, sl
   12318:	movcc	r2, #36	; 0x24
   1231c:	strbcc	r2, [r6, r1]
   12320:	add	r1, r8, #2
   12324:	add	r8, r8, #3
   12328:	cmp	r1, sl
   1232c:	movcc	r2, #39	; 0x27
   12330:	strbcc	r2, [r6, r1]
   12334:	mov	r1, #1
   12338:	str	r1, [fp, #-56]	; 0xffffffc8
   1233c:	cmp	r8, sl
   12340:	movcc	r1, #92	; 0x5c
   12344:	strbcc	r1, [r6, r8]
   12348:	add	r8, r8, #1
   1234c:	cmp	r8, sl
   12350:	and	r5, r5, r4
   12354:	add	r7, r7, #1
   12358:	strbcc	r0, [r6, r8]
   1235c:	add	r8, r8, #1
   12360:	cmn	lr, #1
   12364:	bne	11d60 <__assert_fail@plt+0xe9c>
   12368:	b	11d6c <__assert_fail@plt+0xea8>
   1236c:	ldr	r0, [sp, #36]	; 0x24
   12370:	mov	r4, #0
   12374:	mov	r9, #0
   12378:	mov	r5, #0
   1237c:	cmp	r0, #0
   12380:	beq	12290 <__assert_fail@plt+0x13cc>
   12384:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12388:	add	r7, r7, #1
   1238c:	cmn	lr, #1
   12390:	bne	11d60 <__assert_fail@plt+0xe9c>
   12394:	b	11d6c <__assert_fail@plt+0xea8>
   12398:	mov	r0, #0
   1239c:	cmn	lr, #1
   123a0:	str	r0, [fp, #-36]	; 0xffffffdc
   123a4:	str	r0, [fp, #-40]	; 0xffffffd8
   123a8:	bne	123bc <__assert_fail@plt+0x14f8>
   123ac:	mov	r0, ip
   123b0:	bl	10df8 <strlen@plt>
   123b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   123b8:	mov	lr, r0
   123bc:	add	r0, ip, r7
   123c0:	mov	r4, #1
   123c4:	mov	r6, #0
   123c8:	str	lr, [sp, #28]
   123cc:	str	r0, [sp, #24]
   123d0:	sub	r0, fp, #40	; 0x28
   123d4:	mov	r3, r0
   123d8:	str	r6, [sp, #44]	; 0x2c
   123dc:	add	r6, r6, r7
   123e0:	sub	r0, fp, #44	; 0x2c
   123e4:	add	r1, ip, r6
   123e8:	sub	r2, lr, r6
   123ec:	bl	14380 <__assert_fail@plt+0x34bc>
   123f0:	cmp	r0, #0
   123f4:	beq	1288c <__assert_fail@plt+0x19c8>
   123f8:	cmn	r0, #1
   123fc:	beq	1284c <__assert_fail@plt+0x1988>
   12400:	ldr	lr, [sp, #28]
   12404:	cmn	r0, #2
   12408:	beq	12854 <__assert_fail@plt+0x1990>
   1240c:	ldr	r2, [sp, #64]	; 0x40
   12410:	cmp	r0, #2
   12414:	mov	r1, #0
   12418:	movwcc	r1, #1
   1241c:	eor	r2, r2, #1
   12420:	orrs	r1, r2, r1
   12424:	bne	124e4 <__assert_fail@plt+0x1620>
   12428:	ldr	r1, [sp, #44]	; 0x2c
   1242c:	ldr	r2, [sp, #24]
   12430:	add	r1, r2, r1
   12434:	mov	r2, #1
   12438:	ldrb	r3, [r1, r2]
   1243c:	sub	r3, r3, #91	; 0x5b
   12440:	cmp	r3, #33	; 0x21
   12444:	bhi	124d8 <__assert_fail@plt+0x1614>
   12448:	add	r6, pc, #0
   1244c:	ldr	pc, [r6, r3, lsl #2]
   12450:	andeq	r2, r1, ip, asr #18
   12454:	andeq	r2, r1, ip, asr #18
   12458:	ldrdeq	r2, [r1], -r8
   1245c:	andeq	r2, r1, ip, asr #18
   12460:	ldrdeq	r2, [r1], -r8
   12464:	andeq	r2, r1, ip, asr #18
   12468:	ldrdeq	r2, [r1], -r8
   1246c:	ldrdeq	r2, [r1], -r8
   12470:	ldrdeq	r2, [r1], -r8
   12474:	ldrdeq	r2, [r1], -r8
   12478:	ldrdeq	r2, [r1], -r8
   1247c:	ldrdeq	r2, [r1], -r8
   12480:	ldrdeq	r2, [r1], -r8
   12484:	ldrdeq	r2, [r1], -r8
   12488:	ldrdeq	r2, [r1], -r8
   1248c:	ldrdeq	r2, [r1], -r8
   12490:	ldrdeq	r2, [r1], -r8
   12494:	ldrdeq	r2, [r1], -r8
   12498:	ldrdeq	r2, [r1], -r8
   1249c:	ldrdeq	r2, [r1], -r8
   124a0:	ldrdeq	r2, [r1], -r8
   124a4:	ldrdeq	r2, [r1], -r8
   124a8:	ldrdeq	r2, [r1], -r8
   124ac:	ldrdeq	r2, [r1], -r8
   124b0:	ldrdeq	r2, [r1], -r8
   124b4:	ldrdeq	r2, [r1], -r8
   124b8:	ldrdeq	r2, [r1], -r8
   124bc:	ldrdeq	r2, [r1], -r8
   124c0:	ldrdeq	r2, [r1], -r8
   124c4:	ldrdeq	r2, [r1], -r8
   124c8:	ldrdeq	r2, [r1], -r8
   124cc:	ldrdeq	r2, [r1], -r8
   124d0:	ldrdeq	r2, [r1], -r8
   124d4:	andeq	r2, r1, ip, asr #18
   124d8:	add	r2, r2, #1
   124dc:	cmp	r2, r0
   124e0:	bcc	12438 <__assert_fail@plt+0x1574>
   124e4:	ldr	r6, [sp, #44]	; 0x2c
   124e8:	add	r6, r0, r6
   124ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124f0:	bl	10d50 <iswprint@plt>
   124f4:	cmp	r0, #0
   124f8:	movwne	r0, #1
   124fc:	and	r4, r4, r0
   12500:	sub	r0, fp, #40	; 0x28
   12504:	bl	10d20 <mbsinit@plt>
   12508:	ldr	lr, [sp, #28]
   1250c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12510:	sub	r3, fp, #40	; 0x28
   12514:	cmp	r0, #0
   12518:	beq	123d8 <__assert_fail@plt+0x1514>
   1251c:	b	12894 <__assert_fail@plt+0x19d0>
   12520:	ldr	r0, [sp, #32]
   12524:	cmp	r0, #0
   12528:	beq	125c4 <__assert_fail@plt+0x1700>
   1252c:	add	r0, r7, #2
   12530:	cmp	r0, lr
   12534:	bcs	125c4 <__assert_fail@plt+0x1700>
   12538:	add	r1, ip, r7
   1253c:	ldrb	r1, [r1, #1]
   12540:	cmp	r1, #63	; 0x3f
   12544:	bne	125c4 <__assert_fail@plt+0x1700>
   12548:	ldrb	r5, [ip, r0]
   1254c:	sub	r1, r5, #33	; 0x21
   12550:	cmp	r1, #29
   12554:	bhi	125c4 <__assert_fail@plt+0x1700>
   12558:	movw	r3, #20929	; 0x51c1
   1255c:	mov	r2, #1
   12560:	movt	r3, #14336	; 0x3800
   12564:	tst	r3, r2, lsl r1
   12568:	beq	125c4 <__assert_fail@plt+0x1700>
   1256c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12570:	tst	r1, #1
   12574:	bne	12a6c <__assert_fail@plt+0x1ba8>
   12578:	cmp	r8, sl
   1257c:	mov	r7, r0
   12580:	mov	r4, #0
   12584:	movcc	r1, #63	; 0x3f
   12588:	strbcc	r1, [r6, r8]
   1258c:	add	r1, r8, #1
   12590:	cmp	r1, sl
   12594:	movcc	r2, #34	; 0x22
   12598:	strbcc	r2, [r6, r1]
   1259c:	add	r1, r8, #2
   125a0:	cmp	r1, sl
   125a4:	movcc	r2, #34	; 0x22
   125a8:	strbcc	r2, [r6, r1]
   125ac:	add	r1, r8, #3
   125b0:	add	r8, r8, #4
   125b4:	cmp	r1, sl
   125b8:	movcc	r2, #63	; 0x3f
   125bc:	strbcc	r2, [r6, r1]
   125c0:	b	12028 <__assert_fail@plt+0x1164>
   125c4:	mov	r5, #63	; 0x3f
   125c8:	mov	r4, #0
   125cc:	b	12028 <__assert_fail@plt+0x1164>
   125d0:	add	r1, r2, r7
   125d4:	ldr	lr, [sp, #28]
   125d8:	mov	r3, #0
   125dc:	str	r1, [sp, #44]	; 0x2c
   125e0:	add	r1, r7, #1
   125e4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   125e8:	tst	r0, #1
   125ec:	bne	126c0 <__assert_fail@plt+0x17fc>
   125f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   125f4:	tst	r2, #1
   125f8:	bne	129b4 <__assert_fail@plt+0x1af0>
   125fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12600:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12604:	cmp	r7, #2
   12608:	movwne	r3, #1
   1260c:	orr	r3, r3, r2
   12610:	tst	r3, #1
   12614:	bne	12650 <__assert_fail@plt+0x178c>
   12618:	cmp	r8, sl
   1261c:	add	r3, r8, #1
   12620:	movcc	r2, #39	; 0x27
   12624:	strbcc	r2, [r6, r8]
   12628:	cmp	r3, sl
   1262c:	movcc	r2, #36	; 0x24
   12630:	strbcc	r2, [r6, r3]
   12634:	add	r3, r8, #2
   12638:	add	r8, r8, #3
   1263c:	cmp	r3, sl
   12640:	movcc	r2, #39	; 0x27
   12644:	strbcc	r2, [r6, r3]
   12648:	mov	r2, #1
   1264c:	str	r2, [fp, #-56]	; 0xffffffc8
   12650:	cmp	r8, sl
   12654:	movcc	r3, #92	; 0x5c
   12658:	strbcc	r3, [r6, r8]
   1265c:	add	r3, r8, #1
   12660:	cmp	r3, sl
   12664:	andcc	r7, r5, #192	; 0xc0
   12668:	movcc	r2, #48	; 0x30
   1266c:	orrcc	r7, r2, r7, lsr #6
   12670:	strbcc	r7, [r6, r3]
   12674:	add	r3, r8, #2
   12678:	add	r8, r8, #3
   1267c:	cmp	r3, sl
   12680:	lsrcc	r7, r5, #3
   12684:	movcc	r2, #6
   12688:	bficc	r7, r2, #3, #29
   1268c:	mov	r2, #6
   12690:	strbcc	r7, [r6, r3]
   12694:	bfi	r5, r2, #3, #29
   12698:	mov	r3, #1
   1269c:	b	126e4 <__assert_fail@plt+0x1820>
   126a0:	cmp	r8, sl
   126a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   126a8:	strbcc	r5, [r6, r8]
   126ac:	add	r8, r8, #1
   126b0:	ldrb	r5, [ip, r1]
   126b4:	add	r1, r1, #1
   126b8:	tst	r0, #1
   126bc:	beq	125f0 <__assert_fail@plt+0x172c>
   126c0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   126c4:	tst	r2, #1
   126c8:	beq	126dc <__assert_fail@plt+0x1818>
   126cc:	cmp	r8, sl
   126d0:	movcc	r7, #92	; 0x5c
   126d4:	strbcc	r7, [r6, r8]
   126d8:	add	r8, r8, #1
   126dc:	mov	r2, #0
   126e0:	str	r2, [fp, #-52]	; 0xffffffcc
   126e4:	ldr	r2, [sp, #44]	; 0x2c
   126e8:	and	r9, r3, #1
   126ec:	cmp	r2, r1
   126f0:	bls	127f0 <__assert_fail@plt+0x192c>
   126f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126f8:	cmp	r9, #0
   126fc:	movwne	r9, #1
   12700:	mvn	r7, r2
   12704:	orr	r7, r7, r9
   12708:	tst	r7, #1
   1270c:	bne	126a0 <__assert_fail@plt+0x17dc>
   12710:	cmp	r8, sl
   12714:	movcc	r7, #39	; 0x27
   12718:	strbcc	r7, [r6, r8]
   1271c:	add	r7, r8, #1
   12720:	add	r8, r8, #2
   12724:	cmp	r7, sl
   12728:	movcc	r2, #39	; 0x27
   1272c:	strbcc	r2, [r6, r7]
   12730:	mov	r2, #0
   12734:	str	r2, [fp, #-56]	; 0xffffffc8
   12738:	b	126a0 <__assert_fail@plt+0x17dc>
   1273c:	cmp	r8, sl
   12740:	mov	r2, #1
   12744:	movcc	r0, #39	; 0x27
   12748:	strbcc	r0, [r6, r8]
   1274c:	add	r0, r8, #1
   12750:	cmp	r0, sl
   12754:	movcc	r1, #36	; 0x24
   12758:	strbcc	r1, [r6, r0]
   1275c:	add	r0, r8, #2
   12760:	cmp	r0, sl
   12764:	movcc	r1, #39	; 0x27
   12768:	strbcc	r1, [r6, r0]
   1276c:	add	r0, r8, #3
   12770:	cmp	r0, sl
   12774:	add	r8, r0, #1
   12778:	str	r2, [fp, #-56]	; 0xffffffc8
   1277c:	movcc	r1, #92	; 0x5c
   12780:	strbcc	r1, [r6, r0]
   12784:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12788:	cmp	r1, #2
   1278c:	beq	127e0 <__assert_fail@plt+0x191c>
   12790:	add	r1, r7, #1
   12794:	mov	r4, #0
   12798:	mov	r9, #1
   1279c:	mov	r5, #48	; 0x30
   127a0:	cmp	r1, lr
   127a4:	bcs	12028 <__assert_fail@plt+0x1164>
   127a8:	ldrb	r1, [ip, r1]
   127ac:	sub	r1, r1, #48	; 0x30
   127b0:	uxtb	r1, r1
   127b4:	cmp	r1, #9
   127b8:	bhi	12028 <__assert_fail@plt+0x1164>
   127bc:	cmp	r8, sl
   127c0:	movcc	r1, #48	; 0x30
   127c4:	strbcc	r1, [r6, r8]
   127c8:	add	r1, r0, #2
   127cc:	add	r8, r0, #3
   127d0:	cmp	r1, sl
   127d4:	movcc	r2, #48	; 0x30
   127d8:	strbcc	r2, [r6, r1]
   127dc:	b	12028 <__assert_fail@plt+0x1164>
   127e0:	mov	r0, #48	; 0x30
   127e4:	mov	r9, #1
   127e8:	mov	r4, #0
   127ec:	b	122c0 <__assert_fail@plt+0x13fc>
   127f0:	cmp	r9, #0
   127f4:	sub	r7, r1, #1
   127f8:	mov	r0, r5
   127fc:	movwne	r9, #1
   12800:	cmp	r9, #0
   12804:	bne	12844 <__assert_fail@plt+0x1980>
   12808:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1280c:	tst	r1, #1
   12810:	beq	12844 <__assert_fail@plt+0x1980>
   12814:	cmp	r8, sl
   12818:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1281c:	movcc	r1, #39	; 0x27
   12820:	strbcc	r1, [r6, r8]
   12824:	add	r1, r8, #1
   12828:	add	r8, r8, #2
   1282c:	cmp	r1, sl
   12830:	movcc	r2, #39	; 0x27
   12834:	strbcc	r2, [r6, r1]
   12838:	mov	r1, #0
   1283c:	str	r1, [fp, #-56]	; 0xffffffc8
   12840:	b	1234c <__assert_fail@plt+0x1488>
   12844:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12848:	b	1234c <__assert_fail@plt+0x1488>
   1284c:	mov	r4, #0
   12850:	b	1288c <__assert_fail@plt+0x19c8>
   12854:	mov	r4, #0
   12858:	cmp	lr, r6
   1285c:	bls	1288c <__assert_fail@plt+0x19c8>
   12860:	ldr	ip, [fp, #-84]	; 0xffffffac
   12864:	ldr	r6, [sp, #44]	; 0x2c
   12868:	ldr	r0, [sp, #24]
   1286c:	ldrb	r0, [r0, r6]
   12870:	cmp	r0, #0
   12874:	beq	12894 <__assert_fail@plt+0x19d0>
   12878:	add	r6, r6, #1
   1287c:	add	r0, r7, r6
   12880:	cmp	r0, lr
   12884:	bcc	12868 <__assert_fail@plt+0x19a4>
   12888:	b	12894 <__assert_fail@plt+0x19d0>
   1288c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12890:	ldr	r6, [sp, #44]	; 0x2c
   12894:	mov	r1, r6
   12898:	ldr	r6, [sp, #80]	; 0x50
   1289c:	b	121f4 <__assert_fail@plt+0x1330>
   128a0:	mov	lr, r7
   128a4:	b	128ac <__assert_fail@plt+0x19e8>
   128a8:	mvn	lr, #0
   128ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   128b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   128b4:	eor	r0, r7, #2
   128b8:	orr	r0, r0, r8
   128bc:	clz	r0, r0
   128c0:	lsr	r0, r0, #5
   128c4:	tst	r1, r0
   128c8:	bne	12954 <__assert_fail@plt+0x1a90>
   128cc:	mov	r0, r1
   128d0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   128d4:	cmp	r7, #2
   128d8:	movwne	r1, #1
   128dc:	orr	r0, r0, r1
   128e0:	tst	r0, #1
   128e4:	ldreq	r0, [sp, #60]	; 0x3c
   128e8:	eoreq	r0, r0, #1
   128ec:	tsteq	r0, #1
   128f0:	bne	12a00 <__assert_fail@plt+0x1b3c>
   128f4:	mov	r9, lr
   128f8:	tst	r5, #1
   128fc:	bne	129bc <__assert_fail@plt+0x1af8>
   12900:	ldr	r6, [sp, #56]	; 0x38
   12904:	mov	r4, #0
   12908:	cmp	r6, #0
   1290c:	beq	129f8 <__assert_fail@plt+0x1b34>
   12910:	ldr	r0, [sp, #84]	; 0x54
   12914:	mov	r1, #0
   12918:	cmp	sl, #0
   1291c:	mov	r5, #0
   12920:	str	r1, [fp, #-72]	; 0xffffffb8
   12924:	beq	11af4 <__assert_fail@plt+0xc30>
   12928:	b	12a00 <__assert_fail@plt+0x1b3c>
   1292c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12930:	ldr	r2, [sp, #84]	; 0x54
   12934:	b	1295c <__assert_fail@plt+0x1a98>
   12938:	ldr	ip, [fp, #-84]	; 0xffffffac
   1293c:	mov	r2, #1
   12940:	mov	lr, r4
   12944:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12948:	b	1295c <__assert_fail@plt+0x1a98>
   1294c:	ldr	r6, [sp, #80]	; 0x50
   12950:	ldr	ip, [fp, #-84]	; 0xffffffac
   12954:	ldr	r2, [sp, #84]	; 0x54
   12958:	mov	r7, #2
   1295c:	mov	r0, #0
   12960:	ldr	r1, [fp, #12]
   12964:	tst	r2, #1
   12968:	mov	r2, r7
   1296c:	mov	r3, lr
   12970:	str	r0, [sp, #8]
   12974:	ldr	r0, [sp, #72]	; 0x48
   12978:	movwne	r2, #4
   1297c:	cmp	r7, #2
   12980:	movne	r2, r7
   12984:	str	r2, [sp]
   12988:	mov	r2, ip
   1298c:	bic	r1, r1, #2
   12990:	str	r0, [sp, #12]
   12994:	ldr	r0, [sp, #76]	; 0x4c
   12998:	str	r1, [sp, #4]
   1299c:	mov	r1, sl
   129a0:	str	r0, [sp, #16]
   129a4:	mov	r0, r6
   129a8:	bl	11a74 <__assert_fail@plt+0xbb0>
   129ac:	mov	r8, r0
   129b0:	b	12a58 <__assert_fail@plt+0x1b94>
   129b4:	ldr	r2, [sp, #84]	; 0x54
   129b8:	b	1295c <__assert_fail@plt+0x1a98>
   129bc:	mov	r0, #5
   129c0:	ldr	r1, [sp, #56]	; 0x38
   129c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   129c8:	mov	r3, r9
   129cc:	str	r0, [sp]
   129d0:	ldr	r0, [fp, #12]
   129d4:	str	r0, [sp, #4]
   129d8:	ldr	r0, [fp, #16]
   129dc:	str	r0, [sp, #8]
   129e0:	ldr	r0, [sp, #72]	; 0x48
   129e4:	str	r0, [sp, #12]
   129e8:	ldr	r0, [sp, #76]	; 0x4c
   129ec:	str	r0, [sp, #16]
   129f0:	ldr	r0, [sp, #80]	; 0x50
   129f4:	b	129a8 <__assert_fail@plt+0x1ae4>
   129f8:	mov	r0, #0
   129fc:	str	r0, [fp, #-72]	; 0xffffffb8
   12a00:	ldr	r1, [sp, #92]	; 0x5c
   12a04:	cmp	r1, #0
   12a08:	beq	12a48 <__assert_fail@plt+0x1b84>
   12a0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a10:	ldr	r2, [sp, #80]	; 0x50
   12a14:	tst	r0, #1
   12a18:	bne	12a4c <__assert_fail@plt+0x1b88>
   12a1c:	ldrb	r0, [r1]
   12a20:	cmp	r0, #0
   12a24:	beq	12a4c <__assert_fail@plt+0x1b88>
   12a28:	add	r1, r1, #1
   12a2c:	cmp	r8, sl
   12a30:	strbcc	r0, [r2, r8]
   12a34:	add	r8, r8, #1
   12a38:	ldrb	r0, [r1], #1
   12a3c:	cmp	r0, #0
   12a40:	bne	12a2c <__assert_fail@plt+0x1b68>
   12a44:	b	12a4c <__assert_fail@plt+0x1b88>
   12a48:	ldr	r2, [sp, #80]	; 0x50
   12a4c:	cmp	r8, sl
   12a50:	movcc	r0, #0
   12a54:	strbcc	r0, [r2, r8]
   12a58:	mov	r0, r8
   12a5c:	sub	sp, fp, #28
   12a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a64:	mov	r2, #1
   12a68:	b	12944 <__assert_fail@plt+0x1a80>
   12a6c:	ldr	r2, [sp, #84]	; 0x54
   12a70:	mov	r7, #5
   12a74:	b	1295c <__assert_fail@plt+0x1a98>
   12a78:	bl	10eb8 <abort@plt>
   12a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a80:	add	fp, sp, #28
   12a84:	sub	sp, sp, #28
   12a88:	movw	r5, #20816	; 0x5150
   12a8c:	cmp	r2, #0
   12a90:	mov	r4, r1
   12a94:	mov	r7, r0
   12a98:	str	r0, [sp, #20]
   12a9c:	movt	r5, #2
   12aa0:	movne	r5, r2
   12aa4:	bl	10e10 <__errno_location@plt>
   12aa8:	mov	sl, r0
   12aac:	ldm	r5, {r0, r1}
   12ab0:	ldr	r2, [r5, #40]	; 0x28
   12ab4:	ldr	r3, [r5, #44]	; 0x2c
   12ab8:	add	r9, r5, #8
   12abc:	ldr	r6, [sl]
   12ac0:	orr	r8, r1, #1
   12ac4:	mov	r1, #0
   12ac8:	str	r6, [sp, #24]
   12acc:	stm	sp, {r0, r8, r9}
   12ad0:	str	r2, [sp, #12]
   12ad4:	str	r3, [sp, #16]
   12ad8:	mov	r0, #0
   12adc:	mov	r2, r7
   12ae0:	mov	r3, r4
   12ae4:	mov	r6, r4
   12ae8:	bl	11a74 <__assert_fail@plt+0xbb0>
   12aec:	add	r7, r0, #1
   12af0:	mov	r0, r7
   12af4:	bl	13c60 <__assert_fail@plt+0x2d9c>
   12af8:	mov	r4, r0
   12afc:	ldr	r0, [r5]
   12b00:	ldr	r2, [r5, #44]	; 0x2c
   12b04:	ldr	r1, [r5, #40]	; 0x28
   12b08:	mov	r3, r6
   12b0c:	stm	sp, {r0, r8, r9}
   12b10:	str	r2, [sp, #16]
   12b14:	str	r1, [sp, #12]
   12b18:	mov	r0, r4
   12b1c:	mov	r1, r7
   12b20:	ldr	r2, [sp, #20]
   12b24:	bl	11a74 <__assert_fail@plt+0xbb0>
   12b28:	ldr	r0, [sp, #24]
   12b2c:	str	r0, [sl]
   12b30:	mov	r0, r4
   12b34:	sub	sp, fp, #28
   12b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b40:	add	fp, sp, #28
   12b44:	sub	sp, sp, #36	; 0x24
   12b48:	movw	r8, #20816	; 0x5150
   12b4c:	cmp	r3, #0
   12b50:	mov	r4, r2
   12b54:	str	r2, [sp, #24]
   12b58:	mov	r5, r1
   12b5c:	mov	r6, r0
   12b60:	str	r0, [sp, #20]
   12b64:	movt	r8, #2
   12b68:	movne	r8, r3
   12b6c:	bl	10e10 <__errno_location@plt>
   12b70:	str	r0, [sp, #28]
   12b74:	cmp	r4, #0
   12b78:	add	sl, r8, #8
   12b7c:	ldm	r8, {r3, r9}
   12b80:	ldr	r7, [r0]
   12b84:	ldr	r1, [r8, #40]	; 0x28
   12b88:	ldr	r2, [r8, #44]	; 0x2c
   12b8c:	mov	r0, #0
   12b90:	orreq	r9, r9, #1
   12b94:	str	r7, [sp, #32]
   12b98:	mov	r7, r5
   12b9c:	stm	sp, {r3, r9, sl}
   12ba0:	str	r1, [sp, #12]
   12ba4:	str	r2, [sp, #16]
   12ba8:	mov	r1, #0
   12bac:	mov	r2, r6
   12bb0:	mov	r3, r5
   12bb4:	bl	11a74 <__assert_fail@plt+0xbb0>
   12bb8:	add	r4, r0, #1
   12bbc:	mov	r5, r0
   12bc0:	mov	r0, r4
   12bc4:	bl	13c60 <__assert_fail@plt+0x2d9c>
   12bc8:	mov	r6, r0
   12bcc:	ldr	r0, [r8]
   12bd0:	ldr	r2, [r8, #44]	; 0x2c
   12bd4:	ldr	r1, [r8, #40]	; 0x28
   12bd8:	mov	r3, r7
   12bdc:	stm	sp, {r0, r9, sl}
   12be0:	str	r2, [sp, #16]
   12be4:	str	r1, [sp, #12]
   12be8:	mov	r0, r6
   12bec:	mov	r1, r4
   12bf0:	ldr	r2, [sp, #20]
   12bf4:	bl	11a74 <__assert_fail@plt+0xbb0>
   12bf8:	ldr	r0, [sp, #24]
   12bfc:	ldr	r1, [sp, #32]
   12c00:	ldr	r2, [sp, #28]
   12c04:	cmp	r0, #0
   12c08:	str	r1, [r2]
   12c0c:	strne	r5, [r0]
   12c10:	mov	r0, r6
   12c14:	sub	sp, fp, #28
   12c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c20:	add	fp, sp, #24
   12c24:	movw	r5, #20700	; 0x50dc
   12c28:	movw	r8, #20696	; 0x50d8
   12c2c:	movt	r5, #2
   12c30:	movt	r8, #2
   12c34:	ldr	r0, [r5]
   12c38:	ldr	r4, [r8]
   12c3c:	cmp	r0, #2
   12c40:	blt	12c6c <__assert_fail@plt+0x1da8>
   12c44:	add	r7, r4, #12
   12c48:	mov	r6, #0
   12c4c:	ldr	r0, [r7, r6, lsl #3]
   12c50:	bl	14284 <__assert_fail@plt+0x33c0>
   12c54:	ldr	r1, [r5]
   12c58:	add	r2, r6, #2
   12c5c:	add	r0, r6, #1
   12c60:	mov	r6, r0
   12c64:	cmp	r2, r1
   12c68:	blt	12c4c <__assert_fail@plt+0x1d88>
   12c6c:	ldr	r0, [r4, #4]
   12c70:	movw	r7, #20864	; 0x5180
   12c74:	movt	r7, #2
   12c78:	cmp	r0, r7
   12c7c:	beq	12c94 <__assert_fail@plt+0x1dd0>
   12c80:	bl	14284 <__assert_fail@plt+0x33c0>
   12c84:	movw	r0, #20704	; 0x50e0
   12c88:	mov	r6, #256	; 0x100
   12c8c:	movt	r0, #2
   12c90:	strd	r6, [r0]
   12c94:	movw	r6, #20704	; 0x50e0
   12c98:	movt	r6, #2
   12c9c:	cmp	r4, r6
   12ca0:	beq	12cb0 <__assert_fail@plt+0x1dec>
   12ca4:	mov	r0, r4
   12ca8:	bl	14284 <__assert_fail@plt+0x33c0>
   12cac:	str	r6, [r8]
   12cb0:	mov	r0, #1
   12cb4:	str	r0, [r5]
   12cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cbc:	movw	r3, #20816	; 0x5150
   12cc0:	mvn	r2, #0
   12cc4:	movt	r3, #2
   12cc8:	b	12ccc <__assert_fail@plt+0x1e08>
   12ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cd0:	add	fp, sp, #28
   12cd4:	sub	sp, sp, #44	; 0x2c
   12cd8:	mov	r7, r3
   12cdc:	str	r2, [sp, #36]	; 0x24
   12ce0:	str	r1, [sp, #32]
   12ce4:	mov	r5, r0
   12ce8:	bl	10e10 <__errno_location@plt>
   12cec:	cmp	r5, #0
   12cf0:	blt	12e5c <__assert_fail@plt+0x1f98>
   12cf4:	cmn	r5, #-2147483647	; 0x80000001
   12cf8:	beq	12e5c <__assert_fail@plt+0x1f98>
   12cfc:	movw	r8, #20700	; 0x50dc
   12d00:	movw	r4, #20696	; 0x50d8
   12d04:	str	r0, [sp, #28]
   12d08:	ldr	r0, [r0]
   12d0c:	movt	r8, #2
   12d10:	movt	r4, #2
   12d14:	ldr	r1, [r8]
   12d18:	ldr	r6, [r4]
   12d1c:	str	r0, [sp, #24]
   12d20:	cmp	r1, r5
   12d24:	ble	12d30 <__assert_fail@plt+0x1e6c>
   12d28:	mov	sl, r6
   12d2c:	b	12d98 <__assert_fail@plt+0x1ed4>
   12d30:	movw	r9, #20704	; 0x50e0
   12d34:	mov	r0, #8
   12d38:	add	r2, r5, #1
   12d3c:	str	r1, [fp, #-32]	; 0xffffffe0
   12d40:	mvn	r3, #-2147483648	; 0x80000000
   12d44:	movt	r9, #2
   12d48:	str	r0, [sp]
   12d4c:	sub	r2, r2, r1
   12d50:	sub	r1, fp, #32
   12d54:	subs	r0, r6, r9
   12d58:	movne	r0, r6
   12d5c:	bl	13e60 <__assert_fail@plt+0x2f9c>
   12d60:	cmp	r6, r9
   12d64:	mov	sl, r0
   12d68:	str	r0, [r4]
   12d6c:	ldrdeq	r0, [r9]
   12d70:	stmeq	sl, {r0, r1}
   12d74:	ldr	r1, [r8]
   12d78:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d7c:	add	r0, sl, r1, lsl #3
   12d80:	sub	r1, r2, r1
   12d84:	lsl	r2, r1, #3
   12d88:	mov	r1, #0
   12d8c:	bl	10e28 <memset@plt>
   12d90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d94:	str	r0, [r8]
   12d98:	mov	r9, sl
   12d9c:	ldr	r6, [r9, r5, lsl #3]!
   12da0:	ldr	r4, [r9, #4]!
   12da4:	ldm	r7, {r0, r1}
   12da8:	ldr	r2, [r7, #40]	; 0x28
   12dac:	ldr	r3, [r7, #44]	; 0x2c
   12db0:	orr	r8, r1, #1
   12db4:	add	r1, r7, #8
   12db8:	stm	sp, {r0, r8}
   12dbc:	add	r0, sp, #8
   12dc0:	str	r1, [sp, #20]
   12dc4:	stm	r0, {r1, r2, r3}
   12dc8:	mov	r0, r4
   12dcc:	mov	r1, r6
   12dd0:	ldr	r2, [sp, #32]
   12dd4:	ldr	r3, [sp, #36]	; 0x24
   12dd8:	bl	11a74 <__assert_fail@plt+0xbb0>
   12ddc:	cmp	r6, r0
   12de0:	bhi	12e44 <__assert_fail@plt+0x1f80>
   12de4:	add	r6, r0, #1
   12de8:	movw	r0, #20864	; 0x5180
   12dec:	movt	r0, #2
   12df0:	str	r6, [sl, r5, lsl #3]
   12df4:	cmp	r4, r0
   12df8:	beq	12e04 <__assert_fail@plt+0x1f40>
   12dfc:	mov	r0, r4
   12e00:	bl	14284 <__assert_fail@plt+0x33c0>
   12e04:	mov	r0, r6
   12e08:	bl	13c60 <__assert_fail@plt+0x2d9c>
   12e0c:	str	r0, [r9]
   12e10:	mov	r4, r0
   12e14:	add	r3, sp, #8
   12e18:	ldr	r0, [r7]
   12e1c:	ldr	r1, [r7, #40]	; 0x28
   12e20:	ldr	r2, [r7, #44]	; 0x2c
   12e24:	stm	sp, {r0, r8}
   12e28:	ldr	r0, [sp, #20]
   12e2c:	stm	r3, {r0, r1, r2}
   12e30:	mov	r0, r4
   12e34:	mov	r1, r6
   12e38:	ldr	r2, [sp, #32]
   12e3c:	ldr	r3, [sp, #36]	; 0x24
   12e40:	bl	11a74 <__assert_fail@plt+0xbb0>
   12e44:	ldr	r0, [sp, #28]
   12e48:	ldr	r1, [sp, #24]
   12e4c:	str	r1, [r0]
   12e50:	mov	r0, r4
   12e54:	sub	sp, fp, #28
   12e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e5c:	bl	10eb8 <abort@plt>
   12e60:	movw	r3, #20816	; 0x5150
   12e64:	movt	r3, #2
   12e68:	b	12ccc <__assert_fail@plt+0x1e08>
   12e6c:	movw	r3, #20816	; 0x5150
   12e70:	mov	r1, r0
   12e74:	mov	r0, #0
   12e78:	mvn	r2, #0
   12e7c:	movt	r3, #2
   12e80:	b	12ccc <__assert_fail@plt+0x1e08>
   12e84:	movw	r3, #20816	; 0x5150
   12e88:	mov	r2, r1
   12e8c:	mov	r1, r0
   12e90:	mov	r0, #0
   12e94:	movt	r3, #2
   12e98:	b	12ccc <__assert_fail@plt+0x1e08>
   12e9c:	push	{fp, lr}
   12ea0:	mov	fp, sp
   12ea4:	sub	sp, sp, #48	; 0x30
   12ea8:	vmov.i32	q8, #0	; 0x00000000
   12eac:	mov	ip, #32
   12eb0:	mov	r3, sp
   12eb4:	mov	lr, r2
   12eb8:	cmp	r1, #10
   12ebc:	add	r2, r3, #16
   12ec0:	vst1.64	{d16-d17}, [r3], ip
   12ec4:	vst1.64	{d16-d17}, [r3]
   12ec8:	vst1.64	{d16-d17}, [r2]
   12ecc:	beq	12eec <__assert_fail@plt+0x2028>
   12ed0:	str	r1, [sp]
   12ed4:	mov	r3, sp
   12ed8:	mov	r1, lr
   12edc:	mvn	r2, #0
   12ee0:	bl	12ccc <__assert_fail@plt+0x1e08>
   12ee4:	mov	sp, fp
   12ee8:	pop	{fp, pc}
   12eec:	bl	10eb8 <abort@plt>
   12ef0:	push	{r4, sl, fp, lr}
   12ef4:	add	fp, sp, #8
   12ef8:	sub	sp, sp, #48	; 0x30
   12efc:	mov	ip, r3
   12f00:	mov	r3, sp
   12f04:	vmov.i32	q8, #0	; 0x00000000
   12f08:	mov	lr, #32
   12f0c:	cmp	r1, #10
   12f10:	add	r4, r3, #16
   12f14:	vst1.64	{d16-d17}, [r3], lr
   12f18:	vst1.64	{d16-d17}, [r3]
   12f1c:	vst1.64	{d16-d17}, [r4]
   12f20:	beq	12f40 <__assert_fail@plt+0x207c>
   12f24:	str	r1, [sp]
   12f28:	mov	r1, r2
   12f2c:	mov	r3, sp
   12f30:	mov	r2, ip
   12f34:	bl	12ccc <__assert_fail@plt+0x1e08>
   12f38:	sub	sp, fp, #8
   12f3c:	pop	{r4, sl, fp, pc}
   12f40:	bl	10eb8 <abort@plt>
   12f44:	push	{fp, lr}
   12f48:	mov	fp, sp
   12f4c:	sub	sp, sp, #48	; 0x30
   12f50:	mov	r3, sp
   12f54:	vmov.i32	q8, #0	; 0x00000000
   12f58:	mov	ip, #32
   12f5c:	cmp	r0, #10
   12f60:	add	r2, r3, #16
   12f64:	vst1.64	{d16-d17}, [r3], ip
   12f68:	vst1.64	{d16-d17}, [r3]
   12f6c:	vst1.64	{d16-d17}, [r2]
   12f70:	beq	12f90 <__assert_fail@plt+0x20cc>
   12f74:	str	r0, [sp]
   12f78:	mov	r3, sp
   12f7c:	mov	r0, #0
   12f80:	mvn	r2, #0
   12f84:	bl	12ccc <__assert_fail@plt+0x1e08>
   12f88:	mov	sp, fp
   12f8c:	pop	{fp, pc}
   12f90:	bl	10eb8 <abort@plt>
   12f94:	push	{fp, lr}
   12f98:	mov	fp, sp
   12f9c:	sub	sp, sp, #48	; 0x30
   12fa0:	mov	r3, sp
   12fa4:	vmov.i32	q8, #0	; 0x00000000
   12fa8:	mov	ip, #32
   12fac:	cmp	r0, #10
   12fb0:	add	lr, r3, #16
   12fb4:	vst1.64	{d16-d17}, [r3], ip
   12fb8:	vst1.64	{d16-d17}, [r3]
   12fbc:	vst1.64	{d16-d17}, [lr]
   12fc0:	beq	12fdc <__assert_fail@plt+0x2118>
   12fc4:	str	r0, [sp]
   12fc8:	mov	r3, sp
   12fcc:	mov	r0, #0
   12fd0:	bl	12ccc <__assert_fail@plt+0x1e08>
   12fd4:	mov	sp, fp
   12fd8:	pop	{fp, pc}
   12fdc:	bl	10eb8 <abort@plt>
   12fe0:	push	{r4, sl, fp, lr}
   12fe4:	add	fp, sp, #8
   12fe8:	sub	sp, sp, #48	; 0x30
   12fec:	mov	lr, r0
   12ff0:	movw	r0, #20816	; 0x5150
   12ff4:	mov	r3, #32
   12ff8:	mov	ip, r1
   12ffc:	mov	r4, #1
   13000:	movt	r0, #2
   13004:	add	r1, r0, #16
   13008:	vld1.64	{d16-d17}, [r0], r3
   1300c:	mov	r3, sp
   13010:	vld1.64	{d18-d19}, [r1]
   13014:	add	r1, r3, #16
   13018:	vld1.64	{d20-d21}, [r0]
   1301c:	add	r0, r3, #32
   13020:	vst1.64	{d18-d19}, [r1]
   13024:	mov	r1, r3
   13028:	vst1.64	{d20-d21}, [r0]
   1302c:	mov	r0, #28
   13030:	and	r0, r0, r2, lsr #3
   13034:	and	r2, r2, #31
   13038:	vst1.64	{d16-d17}, [r1], r0
   1303c:	ldr	r0, [r1, #8]
   13040:	bic	r4, r4, r0, lsr r2
   13044:	eor	r0, r0, r4, lsl r2
   13048:	mov	r2, ip
   1304c:	str	r0, [r1, #8]
   13050:	mov	r0, #0
   13054:	mov	r1, lr
   13058:	bl	12ccc <__assert_fail@plt+0x1e08>
   1305c:	sub	sp, fp, #8
   13060:	pop	{r4, sl, fp, pc}
   13064:	push	{fp, lr}
   13068:	mov	fp, sp
   1306c:	sub	sp, sp, #48	; 0x30
   13070:	mov	ip, r0
   13074:	movw	r0, #20816	; 0x5150
   13078:	mov	r3, #32
   1307c:	movt	r0, #2
   13080:	add	r2, r0, #16
   13084:	vld1.64	{d16-d17}, [r0], r3
   13088:	mov	r3, sp
   1308c:	vld1.64	{d18-d19}, [r2]
   13090:	add	r2, r3, #16
   13094:	vld1.64	{d20-d21}, [r0]
   13098:	add	r0, r3, #32
   1309c:	vst1.64	{d18-d19}, [r2]
   130a0:	mov	r2, r3
   130a4:	vst1.64	{d20-d21}, [r0]
   130a8:	mov	r0, #28
   130ac:	and	r0, r0, r1, lsr #3
   130b0:	and	r1, r1, #31
   130b4:	vst1.64	{d16-d17}, [r2], r0
   130b8:	mov	r0, #1
   130bc:	ldr	lr, [r2, #8]
   130c0:	bic	r0, r0, lr, lsr r1
   130c4:	eor	r0, lr, r0, lsl r1
   130c8:	mov	r1, ip
   130cc:	str	r0, [r2, #8]
   130d0:	mov	r0, #0
   130d4:	mvn	r2, #0
   130d8:	bl	12ccc <__assert_fail@plt+0x1e08>
   130dc:	mov	sp, fp
   130e0:	pop	{fp, pc}
   130e4:	push	{fp, lr}
   130e8:	mov	fp, sp
   130ec:	sub	sp, sp, #48	; 0x30
   130f0:	movw	r2, #20816	; 0x5150
   130f4:	mov	r3, #32
   130f8:	mov	r1, r0
   130fc:	movt	r2, #2
   13100:	add	r0, r2, #16
   13104:	vld1.64	{d16-d17}, [r2], r3
   13108:	mov	r3, sp
   1310c:	vld1.64	{d18-d19}, [r0]
   13110:	add	r0, r3, #16
   13114:	vld1.64	{d20-d21}, [r2]
   13118:	mov	r2, r3
   1311c:	vst1.64	{d18-d19}, [r0]
   13120:	add	r0, r3, #32
   13124:	vst1.64	{d20-d21}, [r0]
   13128:	mov	r0, #12
   1312c:	vst1.64	{d16-d17}, [r2], r0
   13130:	ldr	r0, [r2]
   13134:	orr	r0, r0, #67108864	; 0x4000000
   13138:	str	r0, [r2]
   1313c:	mov	r0, #0
   13140:	mvn	r2, #0
   13144:	bl	12ccc <__assert_fail@plt+0x1e08>
   13148:	mov	sp, fp
   1314c:	pop	{fp, pc}
   13150:	push	{fp, lr}
   13154:	mov	fp, sp
   13158:	sub	sp, sp, #48	; 0x30
   1315c:	mov	ip, r1
   13160:	mov	r1, r0
   13164:	movw	r0, #20816	; 0x5150
   13168:	mov	r3, #32
   1316c:	movt	r0, #2
   13170:	add	r2, r0, #16
   13174:	vld1.64	{d16-d17}, [r0], r3
   13178:	mov	r3, sp
   1317c:	vld1.64	{d18-d19}, [r2]
   13180:	add	r2, r3, #16
   13184:	vld1.64	{d20-d21}, [r0]
   13188:	add	r0, r3, #32
   1318c:	vst1.64	{d18-d19}, [r2]
   13190:	mov	r2, r3
   13194:	vst1.64	{d20-d21}, [r0]
   13198:	mov	r0, #12
   1319c:	vst1.64	{d16-d17}, [r2], r0
   131a0:	ldr	r0, [r2]
   131a4:	orr	r0, r0, #67108864	; 0x4000000
   131a8:	str	r0, [r2]
   131ac:	mov	r0, #0
   131b0:	mov	r2, ip
   131b4:	bl	12ccc <__assert_fail@plt+0x1e08>
   131b8:	mov	sp, fp
   131bc:	pop	{fp, pc}
   131c0:	push	{r4, sl, fp, lr}
   131c4:	add	fp, sp, #8
   131c8:	sub	sp, sp, #96	; 0x60
   131cc:	mov	ip, r2
   131d0:	mov	r2, sp
   131d4:	vmov.i32	q8, #0	; 0x00000000
   131d8:	mov	r4, #28
   131dc:	cmp	r1, #10
   131e0:	mov	r3, r2
   131e4:	add	lr, r2, #16
   131e8:	vst1.64	{d16-d17}, [r3], r4
   131ec:	vst1.64	{d16-d17}, [lr]
   131f0:	vst1.32	{d16-d17}, [r3]
   131f4:	beq	13244 <__assert_fail@plt+0x2380>
   131f8:	vld1.64	{d16-d17}, [r2], r4
   131fc:	vld1.64	{d18-d19}, [lr]
   13200:	add	r3, sp, #48	; 0x30
   13204:	add	r4, r3, #4
   13208:	vld1.32	{d20-d21}, [r2]
   1320c:	add	r2, r3, #20
   13210:	vst1.32	{d16-d17}, [r4]
   13214:	vst1.32	{d18-d19}, [r2]
   13218:	add	r2, r3, #32
   1321c:	vst1.32	{d20-d21}, [r2]
   13220:	str	r1, [sp, #48]	; 0x30
   13224:	mvn	r2, #0
   13228:	ldr	r1, [sp, #60]	; 0x3c
   1322c:	orr	r1, r1, #67108864	; 0x4000000
   13230:	str	r1, [sp, #60]	; 0x3c
   13234:	mov	r1, ip
   13238:	bl	12ccc <__assert_fail@plt+0x1e08>
   1323c:	sub	sp, fp, #8
   13240:	pop	{r4, sl, fp, pc}
   13244:	bl	10eb8 <abort@plt>
   13248:	push	{r4, r5, fp, lr}
   1324c:	add	fp, sp, #8
   13250:	sub	sp, sp, #48	; 0x30
   13254:	mov	ip, r3
   13258:	movw	r3, #20816	; 0x5150
   1325c:	mov	lr, #32
   13260:	cmp	r1, #0
   13264:	mov	r5, sp
   13268:	movt	r3, #2
   1326c:	cmpne	r2, #0
   13270:	add	r4, r3, #16
   13274:	vld1.64	{d16-d17}, [r3], lr
   13278:	vld1.64	{d18-d19}, [r4]
   1327c:	add	r4, r5, #16
   13280:	vld1.64	{d20-d21}, [r3]
   13284:	vst1.64	{d16-d17}, [r5], lr
   13288:	mov	r3, #10
   1328c:	vst1.64	{d18-d19}, [r4]
   13290:	vst1.64	{d20-d21}, [r5]
   13294:	str	r3, [sp]
   13298:	bne	132a0 <__assert_fail@plt+0x23dc>
   1329c:	bl	10eb8 <abort@plt>
   132a0:	str	r2, [sp, #44]	; 0x2c
   132a4:	str	r1, [sp, #40]	; 0x28
   132a8:	mov	r3, sp
   132ac:	mov	r1, ip
   132b0:	mvn	r2, #0
   132b4:	bl	12ccc <__assert_fail@plt+0x1e08>
   132b8:	sub	sp, fp, #8
   132bc:	pop	{r4, r5, fp, pc}
   132c0:	push	{r4, r5, fp, lr}
   132c4:	add	fp, sp, #8
   132c8:	sub	sp, sp, #48	; 0x30
   132cc:	mov	lr, r3
   132d0:	movw	r3, #20816	; 0x5150
   132d4:	mov	ip, #32
   132d8:	cmp	r1, #0
   132dc:	mov	r5, sp
   132e0:	movt	r3, #2
   132e4:	cmpne	r2, #0
   132e8:	add	r4, r3, #16
   132ec:	vld1.64	{d16-d17}, [r3], ip
   132f0:	vld1.64	{d18-d19}, [r4]
   132f4:	add	r4, r5, #16
   132f8:	vld1.64	{d20-d21}, [r3]
   132fc:	vst1.64	{d16-d17}, [r5], ip
   13300:	mov	r3, #10
   13304:	vst1.64	{d18-d19}, [r4]
   13308:	vst1.64	{d20-d21}, [r5]
   1330c:	str	r3, [sp]
   13310:	bne	13318 <__assert_fail@plt+0x2454>
   13314:	bl	10eb8 <abort@plt>
   13318:	ldr	ip, [fp, #8]
   1331c:	str	r2, [sp, #44]	; 0x2c
   13320:	str	r1, [sp, #40]	; 0x28
   13324:	mov	r3, sp
   13328:	mov	r1, lr
   1332c:	mov	r2, ip
   13330:	bl	12ccc <__assert_fail@plt+0x1e08>
   13334:	sub	sp, fp, #8
   13338:	pop	{r4, r5, fp, pc}
   1333c:	push	{r4, sl, fp, lr}
   13340:	add	fp, sp, #8
   13344:	sub	sp, sp, #48	; 0x30
   13348:	mov	ip, r2
   1334c:	movw	r2, #20816	; 0x5150
   13350:	mov	lr, #32
   13354:	cmp	r0, #0
   13358:	mov	r4, sp
   1335c:	movt	r2, #2
   13360:	cmpne	r1, #0
   13364:	add	r3, r2, #16
   13368:	vld1.64	{d16-d17}, [r2], lr
   1336c:	vld1.64	{d18-d19}, [r3]
   13370:	add	r3, r4, #16
   13374:	vld1.64	{d20-d21}, [r2]
   13378:	vst1.64	{d16-d17}, [r4], lr
   1337c:	mov	r2, #10
   13380:	vst1.64	{d18-d19}, [r3]
   13384:	vst1.64	{d20-d21}, [r4]
   13388:	str	r2, [sp]
   1338c:	bne	13394 <__assert_fail@plt+0x24d0>
   13390:	bl	10eb8 <abort@plt>
   13394:	str	r1, [sp, #44]	; 0x2c
   13398:	str	r0, [sp, #40]	; 0x28
   1339c:	mov	r3, sp
   133a0:	mov	r0, #0
   133a4:	mov	r1, ip
   133a8:	mvn	r2, #0
   133ac:	bl	12ccc <__assert_fail@plt+0x1e08>
   133b0:	sub	sp, fp, #8
   133b4:	pop	{r4, sl, fp, pc}
   133b8:	push	{r4, r5, fp, lr}
   133bc:	add	fp, sp, #8
   133c0:	sub	sp, sp, #48	; 0x30
   133c4:	mov	lr, r2
   133c8:	movw	r2, #20816	; 0x5150
   133cc:	mov	ip, r3
   133d0:	mov	r3, #32
   133d4:	cmp	r0, #0
   133d8:	mov	r5, sp
   133dc:	movt	r2, #2
   133e0:	cmpne	r1, #0
   133e4:	add	r4, r2, #16
   133e8:	vld1.64	{d16-d17}, [r2], r3
   133ec:	vld1.64	{d18-d19}, [r4]
   133f0:	add	r4, r5, #16
   133f4:	vld1.64	{d20-d21}, [r2]
   133f8:	vst1.64	{d16-d17}, [r5], r3
   133fc:	mov	r2, #10
   13400:	vst1.64	{d18-d19}, [r4]
   13404:	vst1.64	{d20-d21}, [r5]
   13408:	str	r2, [sp]
   1340c:	bne	13414 <__assert_fail@plt+0x2550>
   13410:	bl	10eb8 <abort@plt>
   13414:	str	r1, [sp, #44]	; 0x2c
   13418:	str	r0, [sp, #40]	; 0x28
   1341c:	mov	r3, sp
   13420:	mov	r0, #0
   13424:	mov	r1, lr
   13428:	mov	r2, ip
   1342c:	bl	12ccc <__assert_fail@plt+0x1e08>
   13430:	sub	sp, fp, #8
   13434:	pop	{r4, r5, fp, pc}
   13438:	movw	r3, #20712	; 0x50e8
   1343c:	movt	r3, #2
   13440:	b	12ccc <__assert_fail@plt+0x1e08>
   13444:	movw	r3, #20712	; 0x50e8
   13448:	mov	r2, r1
   1344c:	mov	r1, r0
   13450:	mov	r0, #0
   13454:	movt	r3, #2
   13458:	b	12ccc <__assert_fail@plt+0x1e08>
   1345c:	movw	r3, #20712	; 0x50e8
   13460:	mvn	r2, #0
   13464:	movt	r3, #2
   13468:	b	12ccc <__assert_fail@plt+0x1e08>
   1346c:	movw	r3, #20712	; 0x50e8
   13470:	mov	r1, r0
   13474:	mov	r0, #0
   13478:	mvn	r2, #0
   1347c:	movt	r3, #2
   13480:	b	12ccc <__assert_fail@plt+0x1e08>
   13484:	push	{r4, r5, fp, lr}
   13488:	add	fp, sp, #8
   1348c:	mov	r5, r0
   13490:	mov	r4, r1
   13494:	mov	r0, #0
   13498:	mov	r2, #5
   1349c:	mov	r1, r5
   134a0:	bl	10d38 <dcgettext@plt>
   134a4:	cmp	r0, r5
   134a8:	popne	{r4, r5, fp, pc}
   134ac:	bl	1455c <__assert_fail@plt+0x3698>
   134b0:	ldrb	r1, [r0]
   134b4:	and	r1, r1, #223	; 0xdf
   134b8:	cmp	r1, #71	; 0x47
   134bc:	beq	13524 <__assert_fail@plt+0x2660>
   134c0:	cmp	r1, #85	; 0x55
   134c4:	bne	13548 <__assert_fail@plt+0x2684>
   134c8:	ldrb	r1, [r0, #1]
   134cc:	and	r1, r1, #223	; 0xdf
   134d0:	cmp	r1, #84	; 0x54
   134d4:	bne	13548 <__assert_fail@plt+0x2684>
   134d8:	ldrb	r1, [r0, #2]
   134dc:	and	r1, r1, #223	; 0xdf
   134e0:	cmp	r1, #70	; 0x46
   134e4:	ldrbeq	r1, [r0, #3]
   134e8:	cmpeq	r1, #45	; 0x2d
   134ec:	bne	13548 <__assert_fail@plt+0x2684>
   134f0:	ldrb	r1, [r0, #4]
   134f4:	cmp	r1, #56	; 0x38
   134f8:	ldrbeq	r0, [r0, #5]
   134fc:	cmpeq	r0, #0
   13500:	bne	13548 <__assert_fail@plt+0x2684>
   13504:	ldrb	r1, [r5]
   13508:	movw	r2, #19256	; 0x4b38
   1350c:	movw	r0, #19260	; 0x4b3c
   13510:	movt	r2, #1
   13514:	movt	r0, #1
   13518:	cmp	r1, #96	; 0x60
   1351c:	moveq	r0, r2
   13520:	pop	{r4, r5, fp, pc}
   13524:	ldrb	r1, [r0, #1]
   13528:	and	r1, r1, #223	; 0xdf
   1352c:	cmp	r1, #66	; 0x42
   13530:	bne	13548 <__assert_fail@plt+0x2684>
   13534:	ldrb	r1, [r0, #2]
   13538:	cmp	r1, #49	; 0x31
   1353c:	ldrbeq	r1, [r0, #3]
   13540:	cmpeq	r1, #56	; 0x38
   13544:	beq	13564 <__assert_fail@plt+0x26a0>
   13548:	movw	r1, #19250	; 0x4b32
   1354c:	movw	r0, #19254	; 0x4b36
   13550:	cmp	r4, #9
   13554:	movt	r1, #1
   13558:	movt	r0, #1
   1355c:	moveq	r0, r1
   13560:	pop	{r4, r5, fp, pc}
   13564:	ldrb	r1, [r0, #4]
   13568:	cmp	r1, #48	; 0x30
   1356c:	ldrbeq	r1, [r0, #5]
   13570:	cmpeq	r1, #51	; 0x33
   13574:	bne	13548 <__assert_fail@plt+0x2684>
   13578:	ldrb	r1, [r0, #6]
   1357c:	cmp	r1, #48	; 0x30
   13580:	ldrbeq	r0, [r0, #7]
   13584:	cmpeq	r0, #0
   13588:	bne	13548 <__assert_fail@plt+0x2684>
   1358c:	ldrb	r1, [r5]
   13590:	movw	r2, #19264	; 0x4b40
   13594:	movw	r0, #19268	; 0x4b44
   13598:	movt	r2, #1
   1359c:	movt	r0, #1
   135a0:	b	13518 <__assert_fail@plt+0x2654>
   135a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135a8:	add	fp, sp, #24
   135ac:	sub	sp, sp, #32
   135b0:	ldr	r7, [fp, #12]
   135b4:	ldr	r6, [fp, #8]
   135b8:	mov	r4, r2
   135bc:	mov	r5, r0
   135c0:	cmp	r1, #0
   135c4:	beq	135e4 <__assert_fail@plt+0x2720>
   135c8:	mov	r2, r1
   135cc:	movw	r1, #19356	; 0x4b9c
   135d0:	str	r3, [sp]
   135d4:	mov	r0, r5
   135d8:	mov	r3, r4
   135dc:	movt	r1, #1
   135e0:	b	135f4 <__assert_fail@plt+0x2730>
   135e4:	movw	r1, #19368	; 0x4ba8
   135e8:	mov	r0, r5
   135ec:	mov	r2, r4
   135f0:	movt	r1, #1
   135f4:	bl	10e04 <fprintf@plt>
   135f8:	movw	r1, #19375	; 0x4baf
   135fc:	mov	r0, #0
   13600:	mov	r2, #5
   13604:	movt	r1, #1
   13608:	bl	10d38 <dcgettext@plt>
   1360c:	movw	r1, #20071	; 0x4e67
   13610:	mov	r2, r0
   13614:	mov	r0, r5
   13618:	movw	r3, #2022	; 0x7e6
   1361c:	movt	r1, #1
   13620:	bl	10e04 <fprintf@plt>
   13624:	mov	r0, #10
   13628:	mov	r1, r5
   1362c:	bl	10e7c <fputc@plt>
   13630:	movw	r1, #19379	; 0x4bb3
   13634:	mov	r0, #0
   13638:	mov	r2, #5
   1363c:	movt	r1, #1
   13640:	bl	10d38 <dcgettext@plt>
   13644:	movw	r2, #19550	; 0x4c5e
   13648:	mov	r1, r0
   1364c:	mov	r0, r5
   13650:	movt	r2, #1
   13654:	bl	10e04 <fprintf@plt>
   13658:	mov	r0, #10
   1365c:	mov	r1, r5
   13660:	bl	10e7c <fputc@plt>
   13664:	cmp	r7, #9
   13668:	bhi	136a4 <__assert_fail@plt+0x27e0>
   1366c:	add	r0, pc, #0
   13670:	ldr	pc, [r0, r7, lsl #2]
   13674:	muleq	r1, ip, r6
   13678:			; <UNDEFINED> instruction: 0x000136b0
   1367c:	ldrdeq	r3, [r1], -ip
   13680:	andeq	r3, r1, r8, lsl #14
   13684:	andeq	r3, r1, r0, lsr r7
   13688:	andeq	r3, r1, ip, asr r7
   1368c:	muleq	r1, r0, r7
   13690:	ldrdeq	r3, [r1], -r0
   13694:	andeq	r3, r1, ip, ror #16
   13698:	andeq	r3, r1, r4, lsl r8
   1369c:	sub	sp, fp, #24
   136a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136a4:	movw	r1, #19903	; 0x4dbf
   136a8:	movt	r1, #1
   136ac:	b	1381c <__assert_fail@plt+0x2958>
   136b0:	movw	r1, #19584	; 0x4c80
   136b4:	mov	r0, #0
   136b8:	mov	r2, #5
   136bc:	movt	r1, #1
   136c0:	bl	10d38 <dcgettext@plt>
   136c4:	ldr	r2, [r6]
   136c8:	mov	r1, r0
   136cc:	mov	r0, r5
   136d0:	sub	sp, fp, #24
   136d4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136d8:	b	10e04 <fprintf@plt>
   136dc:	movw	r1, #19600	; 0x4c90
   136e0:	mov	r0, #0
   136e4:	mov	r2, #5
   136e8:	movt	r1, #1
   136ec:	bl	10d38 <dcgettext@plt>
   136f0:	ldm	r6, {r2, r3}
   136f4:	mov	r1, r0
   136f8:	mov	r0, r5
   136fc:	sub	sp, fp, #24
   13700:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13704:	b	10e04 <fprintf@plt>
   13708:	movw	r1, #19623	; 0x4ca7
   1370c:	mov	r0, #0
   13710:	mov	r2, #5
   13714:	movt	r1, #1
   13718:	bl	10d38 <dcgettext@plt>
   1371c:	mov	r1, r0
   13720:	ldm	r6, {r2, r3}
   13724:	ldr	r0, [r6, #8]
   13728:	str	r0, [sp]
   1372c:	b	137c8 <__assert_fail@plt+0x2904>
   13730:	movw	r1, #19651	; 0x4cc3
   13734:	mov	r0, #0
   13738:	mov	r2, #5
   1373c:	movt	r1, #1
   13740:	bl	10d38 <dcgettext@plt>
   13744:	ldm	r6, {r2, r3}
   13748:	mov	r1, r0
   1374c:	ldr	r0, [r6, #8]
   13750:	ldr	r7, [r6, #12]
   13754:	stm	sp, {r0, r7}
   13758:	b	137c8 <__assert_fail@plt+0x2904>
   1375c:	movw	r1, #19683	; 0x4ce3
   13760:	mov	r0, #0
   13764:	mov	r2, #5
   13768:	movt	r1, #1
   1376c:	bl	10d38 <dcgettext@plt>
   13770:	ldm	r6, {r2, r3}
   13774:	mov	r1, r0
   13778:	ldr	r0, [r6, #8]
   1377c:	ldr	r7, [r6, #12]
   13780:	ldr	r6, [r6, #16]
   13784:	stm	sp, {r0, r7}
   13788:	str	r6, [sp, #8]
   1378c:	b	137c8 <__assert_fail@plt+0x2904>
   13790:	movw	r1, #19719	; 0x4d07
   13794:	mov	r0, #0
   13798:	mov	r2, #5
   1379c:	movt	r1, #1
   137a0:	bl	10d38 <dcgettext@plt>
   137a4:	ldm	r6, {r2, r3}
   137a8:	mov	r1, r0
   137ac:	ldr	r0, [r6, #8]
   137b0:	ldr	r7, [r6, #12]
   137b4:	ldr	r4, [r6, #16]
   137b8:	ldr	r6, [r6, #20]
   137bc:	stm	sp, {r0, r7}
   137c0:	str	r4, [sp, #8]
   137c4:	str	r6, [sp, #12]
   137c8:	mov	r0, r5
   137cc:	b	138bc <__assert_fail@plt+0x29f8>
   137d0:	movw	r1, #19759	; 0x4d2f
   137d4:	mov	r0, #0
   137d8:	mov	r2, #5
   137dc:	movt	r1, #1
   137e0:	bl	10d38 <dcgettext@plt>
   137e4:	ldm	r6, {r2, r3}
   137e8:	mov	ip, r0
   137ec:	ldr	r0, [r6, #8]
   137f0:	ldr	r7, [r6, #12]
   137f4:	ldr	r4, [r6, #16]
   137f8:	ldr	r1, [r6, #20]
   137fc:	ldr	r6, [r6, #24]
   13800:	stm	sp, {r0, r7}
   13804:	str	r4, [sp, #8]
   13808:	str	r1, [sp, #12]
   1380c:	str	r6, [sp, #16]
   13810:	b	138b4 <__assert_fail@plt+0x29f0>
   13814:	movw	r1, #19851	; 0x4d8b
   13818:	movt	r1, #1
   1381c:	mov	r0, #0
   13820:	mov	r2, #5
   13824:	bl	10d38 <dcgettext@plt>
   13828:	mov	ip, r0
   1382c:	ldr	r2, [r6]
   13830:	ldr	r3, [r6, #4]
   13834:	ldr	r0, [r6, #8]
   13838:	ldr	r7, [r6, #12]
   1383c:	ldr	r4, [r6, #16]
   13840:	ldr	r1, [r6, #20]
   13844:	ldr	lr, [r6, #24]
   13848:	ldr	r8, [r6, #28]
   1384c:	ldr	r6, [r6, #32]
   13850:	stm	sp, {r0, r7}
   13854:	str	r4, [sp, #8]
   13858:	str	r1, [sp, #12]
   1385c:	str	lr, [sp, #16]
   13860:	str	r8, [sp, #20]
   13864:	str	r6, [sp, #24]
   13868:	b	138b4 <__assert_fail@plt+0x29f0>
   1386c:	movw	r1, #19803	; 0x4d5b
   13870:	mov	r0, #0
   13874:	mov	r2, #5
   13878:	movt	r1, #1
   1387c:	bl	10d38 <dcgettext@plt>
   13880:	ldm	r6, {r2, r3}
   13884:	mov	ip, r0
   13888:	ldr	r0, [r6, #8]
   1388c:	ldr	r7, [r6, #12]
   13890:	ldr	r4, [r6, #16]
   13894:	ldr	r1, [r6, #20]
   13898:	ldr	lr, [r6, #24]
   1389c:	ldr	r6, [r6, #28]
   138a0:	stm	sp, {r0, r7}
   138a4:	str	r4, [sp, #8]
   138a8:	str	r1, [sp, #12]
   138ac:	str	lr, [sp, #16]
   138b0:	str	r6, [sp, #20]
   138b4:	mov	r0, r5
   138b8:	mov	r1, ip
   138bc:	bl	10e04 <fprintf@plt>
   138c0:	sub	sp, fp, #24
   138c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138c8:	push	{r4, sl, fp, lr}
   138cc:	add	fp, sp, #8
   138d0:	sub	sp, sp, #8
   138d4:	ldr	ip, [fp, #8]
   138d8:	mov	lr, #0
   138dc:	ldr	r4, [ip, lr, lsl #2]
   138e0:	add	lr, lr, #1
   138e4:	cmp	r4, #0
   138e8:	bne	138dc <__assert_fail@plt+0x2a18>
   138ec:	sub	r4, lr, #1
   138f0:	str	ip, [sp]
   138f4:	str	r4, [sp, #4]
   138f8:	bl	135a4 <__assert_fail@plt+0x26e0>
   138fc:	sub	sp, fp, #8
   13900:	pop	{r4, sl, fp, pc}
   13904:	push	{fp, lr}
   13908:	mov	fp, sp
   1390c:	sub	sp, sp, #48	; 0x30
   13910:	ldr	ip, [fp, #8]
   13914:	ldr	lr, [ip]
   13918:	cmp	lr, #0
   1391c:	str	lr, [sp, #8]
   13920:	beq	139bc <__assert_fail@plt+0x2af8>
   13924:	ldr	lr, [ip, #4]
   13928:	cmp	lr, #0
   1392c:	str	lr, [sp, #12]
   13930:	beq	139c4 <__assert_fail@plt+0x2b00>
   13934:	ldr	lr, [ip, #8]
   13938:	cmp	lr, #0
   1393c:	str	lr, [sp, #16]
   13940:	beq	139cc <__assert_fail@plt+0x2b08>
   13944:	ldr	lr, [ip, #12]
   13948:	cmp	lr, #0
   1394c:	str	lr, [sp, #20]
   13950:	beq	139d4 <__assert_fail@plt+0x2b10>
   13954:	ldr	lr, [ip, #16]
   13958:	cmp	lr, #0
   1395c:	str	lr, [sp, #24]
   13960:	beq	139dc <__assert_fail@plt+0x2b18>
   13964:	ldr	lr, [ip, #20]
   13968:	cmp	lr, #0
   1396c:	str	lr, [sp, #28]
   13970:	beq	139e4 <__assert_fail@plt+0x2b20>
   13974:	ldr	lr, [ip, #24]
   13978:	cmp	lr, #0
   1397c:	str	lr, [sp, #32]
   13980:	beq	139ec <__assert_fail@plt+0x2b28>
   13984:	ldr	lr, [ip, #28]
   13988:	cmp	lr, #0
   1398c:	str	lr, [sp, #36]	; 0x24
   13990:	beq	139f4 <__assert_fail@plt+0x2b30>
   13994:	ldr	lr, [ip, #32]
   13998:	cmp	lr, #0
   1399c:	str	lr, [sp, #40]	; 0x28
   139a0:	beq	139fc <__assert_fail@plt+0x2b38>
   139a4:	ldr	lr, [ip, #36]	; 0x24
   139a8:	mov	ip, #10
   139ac:	cmp	lr, #0
   139b0:	str	lr, [sp, #44]	; 0x2c
   139b4:	movweq	ip, #9
   139b8:	b	13a00 <__assert_fail@plt+0x2b3c>
   139bc:	mov	ip, #0
   139c0:	b	13a00 <__assert_fail@plt+0x2b3c>
   139c4:	mov	ip, #1
   139c8:	b	13a00 <__assert_fail@plt+0x2b3c>
   139cc:	mov	ip, #2
   139d0:	b	13a00 <__assert_fail@plt+0x2b3c>
   139d4:	mov	ip, #3
   139d8:	b	13a00 <__assert_fail@plt+0x2b3c>
   139dc:	mov	ip, #4
   139e0:	b	13a00 <__assert_fail@plt+0x2b3c>
   139e4:	mov	ip, #5
   139e8:	b	13a00 <__assert_fail@plt+0x2b3c>
   139ec:	mov	ip, #6
   139f0:	b	13a00 <__assert_fail@plt+0x2b3c>
   139f4:	mov	ip, #7
   139f8:	b	13a00 <__assert_fail@plt+0x2b3c>
   139fc:	mov	ip, #8
   13a00:	add	lr, sp, #8
   13a04:	str	ip, [sp, #4]
   13a08:	str	lr, [sp]
   13a0c:	bl	135a4 <__assert_fail@plt+0x26e0>
   13a10:	mov	sp, fp
   13a14:	pop	{fp, pc}
   13a18:	push	{fp, lr}
   13a1c:	mov	fp, sp
   13a20:	sub	sp, sp, #56	; 0x38
   13a24:	add	ip, fp, #8
   13a28:	str	ip, [sp, #12]
   13a2c:	ldr	lr, [fp, #8]
   13a30:	cmp	lr, #0
   13a34:	str	lr, [sp, #16]
   13a38:	beq	13ad4 <__assert_fail@plt+0x2c10>
   13a3c:	ldr	lr, [ip, #4]
   13a40:	cmp	lr, #0
   13a44:	str	lr, [sp, #20]
   13a48:	beq	13adc <__assert_fail@plt+0x2c18>
   13a4c:	ldr	lr, [ip, #8]
   13a50:	cmp	lr, #0
   13a54:	str	lr, [sp, #24]
   13a58:	beq	13ae4 <__assert_fail@plt+0x2c20>
   13a5c:	ldr	lr, [ip, #12]
   13a60:	cmp	lr, #0
   13a64:	str	lr, [sp, #28]
   13a68:	beq	13aec <__assert_fail@plt+0x2c28>
   13a6c:	ldr	lr, [ip, #16]
   13a70:	cmp	lr, #0
   13a74:	str	lr, [sp, #32]
   13a78:	beq	13af4 <__assert_fail@plt+0x2c30>
   13a7c:	ldr	lr, [ip, #20]
   13a80:	cmp	lr, #0
   13a84:	str	lr, [sp, #36]	; 0x24
   13a88:	beq	13afc <__assert_fail@plt+0x2c38>
   13a8c:	ldr	lr, [ip, #24]
   13a90:	cmp	lr, #0
   13a94:	str	lr, [sp, #40]	; 0x28
   13a98:	beq	13b04 <__assert_fail@plt+0x2c40>
   13a9c:	ldr	lr, [ip, #28]
   13aa0:	cmp	lr, #0
   13aa4:	str	lr, [sp, #44]	; 0x2c
   13aa8:	beq	13b0c <__assert_fail@plt+0x2c48>
   13aac:	ldr	lr, [ip, #32]
   13ab0:	cmp	lr, #0
   13ab4:	str	lr, [sp, #48]	; 0x30
   13ab8:	beq	13b14 <__assert_fail@plt+0x2c50>
   13abc:	ldr	lr, [ip, #36]	; 0x24
   13ac0:	mov	ip, #10
   13ac4:	cmp	lr, #0
   13ac8:	str	lr, [sp, #52]	; 0x34
   13acc:	movweq	ip, #9
   13ad0:	b	13b18 <__assert_fail@plt+0x2c54>
   13ad4:	mov	ip, #0
   13ad8:	b	13b18 <__assert_fail@plt+0x2c54>
   13adc:	mov	ip, #1
   13ae0:	b	13b18 <__assert_fail@plt+0x2c54>
   13ae4:	mov	ip, #2
   13ae8:	b	13b18 <__assert_fail@plt+0x2c54>
   13aec:	mov	ip, #3
   13af0:	b	13b18 <__assert_fail@plt+0x2c54>
   13af4:	mov	ip, #4
   13af8:	b	13b18 <__assert_fail@plt+0x2c54>
   13afc:	mov	ip, #5
   13b00:	b	13b18 <__assert_fail@plt+0x2c54>
   13b04:	mov	ip, #6
   13b08:	b	13b18 <__assert_fail@plt+0x2c54>
   13b0c:	mov	ip, #7
   13b10:	b	13b18 <__assert_fail@plt+0x2c54>
   13b14:	mov	ip, #8
   13b18:	add	lr, sp, #16
   13b1c:	str	ip, [sp, #4]
   13b20:	str	lr, [sp]
   13b24:	bl	135a4 <__assert_fail@plt+0x26e0>
   13b28:	mov	sp, fp
   13b2c:	pop	{fp, pc}
   13b30:	push	{fp, lr}
   13b34:	mov	fp, sp
   13b38:	movw	r0, #20788	; 0x5134
   13b3c:	movt	r0, #2
   13b40:	ldr	r1, [r0]
   13b44:	mov	r0, #10
   13b48:	bl	10e7c <fputc@plt>
   13b4c:	movw	r1, #19963	; 0x4dfb
   13b50:	mov	r0, #0
   13b54:	mov	r2, #5
   13b58:	movt	r1, #1
   13b5c:	bl	10d38 <dcgettext@plt>
   13b60:	movw	r1, #19077	; 0x4a85
   13b64:	movt	r1, #1
   13b68:	bl	10cd8 <printf@plt>
   13b6c:	movw	r1, #19983	; 0x4e0f
   13b70:	mov	r0, #0
   13b74:	mov	r2, #5
   13b78:	movt	r1, #1
   13b7c:	bl	10d38 <dcgettext@plt>
   13b80:	movw	r1, #18728	; 0x4928
   13b84:	movw	r2, #18991	; 0x4a2f
   13b88:	movt	r1, #1
   13b8c:	movt	r2, #1
   13b90:	bl	10cd8 <printf@plt>
   13b94:	movw	r1, #20003	; 0x4e23
   13b98:	mov	r0, #0
   13b9c:	mov	r2, #5
   13ba0:	movt	r1, #1
   13ba4:	bl	10d38 <dcgettext@plt>
   13ba8:	movw	r1, #20042	; 0x4e4a
   13bac:	movt	r1, #1
   13bb0:	pop	{fp, lr}
   13bb4:	b	10cd8 <printf@plt>
   13bb8:	push	{r4, r5, r6, sl, fp, lr}
   13bbc:	add	fp, sp, #16
   13bc0:	mov	r4, r2
   13bc4:	mov	r5, r1
   13bc8:	mov	r6, r0
   13bcc:	bl	14434 <__assert_fail@plt+0x3570>
   13bd0:	cmp	r0, #0
   13bd4:	popne	{r4, r5, r6, sl, fp, pc}
   13bd8:	cmp	r6, #0
   13bdc:	beq	13bf0 <__assert_fail@plt+0x2d2c>
   13be0:	cmp	r5, #0
   13be4:	cmpne	r4, #0
   13be8:	bne	13bf0 <__assert_fail@plt+0x2d2c>
   13bec:	pop	{r4, r5, r6, sl, fp, pc}
   13bf0:	bl	14190 <__assert_fail@plt+0x32cc>
   13bf4:	push	{r4, r5, r6, sl, fp, lr}
   13bf8:	add	fp, sp, #16
   13bfc:	mov	r4, r2
   13c00:	mov	r5, r1
   13c04:	mov	r6, r0
   13c08:	bl	14434 <__assert_fail@plt+0x3570>
   13c0c:	cmp	r0, #0
   13c10:	popne	{r4, r5, r6, sl, fp, pc}
   13c14:	cmp	r6, #0
   13c18:	beq	13c2c <__assert_fail@plt+0x2d68>
   13c1c:	cmp	r5, #0
   13c20:	cmpne	r4, #0
   13c24:	bne	13c2c <__assert_fail@plt+0x2d68>
   13c28:	pop	{r4, r5, r6, sl, fp, pc}
   13c2c:	bl	14190 <__assert_fail@plt+0x32cc>
   13c30:	push	{fp, lr}
   13c34:	mov	fp, sp
   13c38:	bl	14350 <__assert_fail@plt+0x348c>
   13c3c:	cmp	r0, #0
   13c40:	popne	{fp, pc}
   13c44:	bl	14190 <__assert_fail@plt+0x32cc>
   13c48:	push	{fp, lr}
   13c4c:	mov	fp, sp
   13c50:	bl	14350 <__assert_fail@plt+0x348c>
   13c54:	cmp	r0, #0
   13c58:	popne	{fp, pc}
   13c5c:	bl	14190 <__assert_fail@plt+0x32cc>
   13c60:	push	{fp, lr}
   13c64:	mov	fp, sp
   13c68:	bl	14350 <__assert_fail@plt+0x348c>
   13c6c:	cmp	r0, #0
   13c70:	popne	{fp, pc}
   13c74:	bl	14190 <__assert_fail@plt+0x32cc>
   13c78:	push	{r4, r5, fp, lr}
   13c7c:	add	fp, sp, #8
   13c80:	mov	r4, r1
   13c84:	mov	r5, r0
   13c88:	bl	143e0 <__assert_fail@plt+0x351c>
   13c8c:	cmp	r0, #0
   13c90:	popne	{r4, r5, fp, pc}
   13c94:	cmp	r5, #0
   13c98:	beq	13ca8 <__assert_fail@plt+0x2de4>
   13c9c:	cmp	r4, #0
   13ca0:	bne	13ca8 <__assert_fail@plt+0x2de4>
   13ca4:	pop	{r4, r5, fp, pc}
   13ca8:	bl	14190 <__assert_fail@plt+0x32cc>
   13cac:	push	{fp, lr}
   13cb0:	mov	fp, sp
   13cb4:	cmp	r1, #0
   13cb8:	orreq	r1, r1, #1
   13cbc:	bl	143e0 <__assert_fail@plt+0x351c>
   13cc0:	cmp	r0, #0
   13cc4:	popne	{fp, pc}
   13cc8:	bl	14190 <__assert_fail@plt+0x32cc>
   13ccc:	push	{fp, lr}
   13cd0:	mov	fp, sp
   13cd4:	clz	r3, r2
   13cd8:	lsr	ip, r3, #5
   13cdc:	clz	r3, r1
   13ce0:	lsr	r3, r3, #5
   13ce4:	orrs	r3, r3, ip
   13ce8:	movwne	r1, #1
   13cec:	movwne	r2, #1
   13cf0:	bl	14434 <__assert_fail@plt+0x3570>
   13cf4:	cmp	r0, #0
   13cf8:	popne	{fp, pc}
   13cfc:	bl	14190 <__assert_fail@plt+0x32cc>
   13d00:	push	{fp, lr}
   13d04:	mov	fp, sp
   13d08:	mov	r2, r1
   13d0c:	mov	r1, r0
   13d10:	mov	r0, #0
   13d14:	bl	14434 <__assert_fail@plt+0x3570>
   13d18:	cmp	r0, #0
   13d1c:	popne	{fp, pc}
   13d20:	bl	14190 <__assert_fail@plt+0x32cc>
   13d24:	push	{fp, lr}
   13d28:	mov	fp, sp
   13d2c:	mov	r2, r1
   13d30:	mov	r1, r0
   13d34:	clz	r0, r2
   13d38:	clz	r3, r1
   13d3c:	lsr	r0, r0, #5
   13d40:	lsr	r3, r3, #5
   13d44:	orrs	r0, r3, r0
   13d48:	movwne	r1, #1
   13d4c:	movwne	r2, #1
   13d50:	mov	r0, #0
   13d54:	bl	14434 <__assert_fail@plt+0x3570>
   13d58:	cmp	r0, #0
   13d5c:	popne	{fp, pc}
   13d60:	bl	14190 <__assert_fail@plt+0x32cc>
   13d64:	push	{r4, r5, r6, sl, fp, lr}
   13d68:	add	fp, sp, #16
   13d6c:	ldr	r5, [r1]
   13d70:	mov	r4, r1
   13d74:	mov	r6, r0
   13d78:	cmp	r0, #0
   13d7c:	beq	13d94 <__assert_fail@plt+0x2ed0>
   13d80:	mov	r0, #1
   13d84:	add	r0, r0, r5, lsr #1
   13d88:	adds	r5, r5, r0
   13d8c:	bcc	13d9c <__assert_fail@plt+0x2ed8>
   13d90:	b	13dd8 <__assert_fail@plt+0x2f14>
   13d94:	cmp	r5, #0
   13d98:	movweq	r5, #64	; 0x40
   13d9c:	mov	r0, r6
   13da0:	mov	r1, r5
   13da4:	mov	r2, #1
   13da8:	bl	14434 <__assert_fail@plt+0x3570>
   13dac:	cmp	r5, #0
   13db0:	mov	r1, r5
   13db4:	movwne	r1, #1
   13db8:	cmp	r0, #0
   13dbc:	bne	13dd0 <__assert_fail@plt+0x2f0c>
   13dc0:	clz	r2, r6
   13dc4:	lsr	r2, r2, #5
   13dc8:	orrs	r1, r2, r1
   13dcc:	bne	13dd8 <__assert_fail@plt+0x2f14>
   13dd0:	str	r5, [r4]
   13dd4:	pop	{r4, r5, r6, sl, fp, pc}
   13dd8:	bl	14190 <__assert_fail@plt+0x32cc>
   13ddc:	push	{r4, r5, r6, r7, fp, lr}
   13de0:	add	fp, sp, #16
   13de4:	ldr	r5, [r1]
   13de8:	mov	r6, r2
   13dec:	mov	r4, r1
   13df0:	mov	r7, r0
   13df4:	cmp	r0, #0
   13df8:	beq	13e10 <__assert_fail@plt+0x2f4c>
   13dfc:	mov	r0, #1
   13e00:	add	r0, r0, r5, lsr #1
   13e04:	adds	r5, r5, r0
   13e08:	bcc	13e28 <__assert_fail@plt+0x2f64>
   13e0c:	b	13e5c <__assert_fail@plt+0x2f98>
   13e10:	cmp	r5, #0
   13e14:	bne	13e28 <__assert_fail@plt+0x2f64>
   13e18:	mov	r0, #64	; 0x40
   13e1c:	cmp	r6, #64	; 0x40
   13e20:	udiv	r5, r0, r6
   13e24:	addhi	r5, r5, #1
   13e28:	mov	r0, r7
   13e2c:	mov	r1, r5
   13e30:	mov	r2, r6
   13e34:	bl	14434 <__assert_fail@plt+0x3570>
   13e38:	cmp	r0, #0
   13e3c:	bne	13e54 <__assert_fail@plt+0x2f90>
   13e40:	cmp	r7, #0
   13e44:	beq	13e5c <__assert_fail@plt+0x2f98>
   13e48:	cmp	r6, #0
   13e4c:	cmpne	r5, #0
   13e50:	bne	13e5c <__assert_fail@plt+0x2f98>
   13e54:	str	r5, [r4]
   13e58:	pop	{r4, r5, r6, r7, fp, pc}
   13e5c:	bl	14190 <__assert_fail@plt+0x32cc>
   13e60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e64:	add	fp, sp, #24
   13e68:	mov	r8, r1
   13e6c:	ldr	r1, [r1]
   13e70:	mov	r5, r0
   13e74:	add	r0, r1, r1, asr #1
   13e78:	cmp	r0, r1
   13e7c:	mvnvs	r0, #-2147483648	; 0x80000000
   13e80:	cmp	r0, r3
   13e84:	mov	r7, r0
   13e88:	movgt	r7, r3
   13e8c:	cmn	r3, #1
   13e90:	movle	r7, r0
   13e94:	ldr	r0, [fp, #8]
   13e98:	cmn	r0, #1
   13e9c:	ble	13ec4 <__assert_fail@plt+0x3000>
   13ea0:	cmp	r0, #0
   13ea4:	beq	13f18 <__assert_fail@plt+0x3054>
   13ea8:	cmn	r7, #1
   13eac:	ble	13eec <__assert_fail@plt+0x3028>
   13eb0:	mvn	r4, #-2147483648	; 0x80000000
   13eb4:	udiv	r6, r4, r0
   13eb8:	cmp	r6, r7
   13ebc:	bge	13f18 <__assert_fail@plt+0x3054>
   13ec0:	b	13f28 <__assert_fail@plt+0x3064>
   13ec4:	cmn	r7, #1
   13ec8:	ble	13f08 <__assert_fail@plt+0x3044>
   13ecc:	cmn	r0, #1
   13ed0:	beq	13f18 <__assert_fail@plt+0x3054>
   13ed4:	mov	r6, #-2147483648	; 0x80000000
   13ed8:	mvn	r4, #-2147483648	; 0x80000000
   13edc:	sdiv	r6, r6, r0
   13ee0:	cmp	r6, r7
   13ee4:	bge	13f18 <__assert_fail@plt+0x3054>
   13ee8:	b	13f28 <__assert_fail@plt+0x3064>
   13eec:	beq	13f18 <__assert_fail@plt+0x3054>
   13ef0:	mov	r6, #-2147483648	; 0x80000000
   13ef4:	mvn	r4, #-2147483648	; 0x80000000
   13ef8:	sdiv	r6, r6, r7
   13efc:	cmp	r6, r0
   13f00:	bge	13f18 <__assert_fail@plt+0x3054>
   13f04:	b	13f28 <__assert_fail@plt+0x3064>
   13f08:	mvn	r4, #-2147483648	; 0x80000000
   13f0c:	sdiv	r6, r4, r0
   13f10:	cmp	r7, r6
   13f14:	blt	13f28 <__assert_fail@plt+0x3064>
   13f18:	mul	r6, r7, r0
   13f1c:	mov	r4, #64	; 0x40
   13f20:	cmp	r6, #63	; 0x3f
   13f24:	bgt	13f30 <__assert_fail@plt+0x306c>
   13f28:	sdiv	r7, r4, r0
   13f2c:	mul	r6, r7, r0
   13f30:	cmp	r5, #0
   13f34:	moveq	r4, #0
   13f38:	streq	r4, [r8]
   13f3c:	sub	r4, r7, r1
   13f40:	cmp	r4, r2
   13f44:	bge	13ff0 <__assert_fail@plt+0x312c>
   13f48:	add	r7, r1, r2
   13f4c:	mov	r6, #0
   13f50:	mov	r2, #0
   13f54:	cmp	r7, r3
   13f58:	movwgt	r6, #1
   13f5c:	cmn	r3, #1
   13f60:	movwgt	r2, #1
   13f64:	cmp	r7, r1
   13f68:	bvs	14024 <__assert_fail@plt+0x3160>
   13f6c:	ands	r1, r2, r6
   13f70:	bne	14024 <__assert_fail@plt+0x3160>
   13f74:	cmn	r0, #1
   13f78:	ble	13fa0 <__assert_fail@plt+0x30dc>
   13f7c:	cmp	r0, #0
   13f80:	beq	13fec <__assert_fail@plt+0x3128>
   13f84:	cmn	r7, #1
   13f88:	ble	13fc4 <__assert_fail@plt+0x3100>
   13f8c:	mvn	r1, #-2147483648	; 0x80000000
   13f90:	udiv	r1, r1, r0
   13f94:	cmp	r1, r7
   13f98:	bge	13fec <__assert_fail@plt+0x3128>
   13f9c:	b	14024 <__assert_fail@plt+0x3160>
   13fa0:	cmn	r7, #1
   13fa4:	ble	13fdc <__assert_fail@plt+0x3118>
   13fa8:	cmn	r0, #1
   13fac:	beq	13fec <__assert_fail@plt+0x3128>
   13fb0:	mov	r1, #-2147483648	; 0x80000000
   13fb4:	sdiv	r1, r1, r0
   13fb8:	cmp	r1, r7
   13fbc:	bge	13fec <__assert_fail@plt+0x3128>
   13fc0:	b	14024 <__assert_fail@plt+0x3160>
   13fc4:	beq	13fec <__assert_fail@plt+0x3128>
   13fc8:	mov	r1, #-2147483648	; 0x80000000
   13fcc:	sdiv	r1, r1, r7
   13fd0:	cmp	r1, r0
   13fd4:	bge	13fec <__assert_fail@plt+0x3128>
   13fd8:	b	14024 <__assert_fail@plt+0x3160>
   13fdc:	mvn	r1, #-2147483648	; 0x80000000
   13fe0:	sdiv	r1, r1, r0
   13fe4:	cmp	r7, r1
   13fe8:	blt	14024 <__assert_fail@plt+0x3160>
   13fec:	mul	r6, r7, r0
   13ff0:	mov	r0, r5
   13ff4:	mov	r1, r6
   13ff8:	bl	143e0 <__assert_fail@plt+0x351c>
   13ffc:	cmp	r6, #0
   14000:	movwne	r6, #1
   14004:	cmp	r0, #0
   14008:	bne	1401c <__assert_fail@plt+0x3158>
   1400c:	clz	r1, r5
   14010:	lsr	r1, r1, #5
   14014:	orrs	r1, r1, r6
   14018:	bne	14024 <__assert_fail@plt+0x3160>
   1401c:	str	r7, [r8]
   14020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14024:	bl	14190 <__assert_fail@plt+0x32cc>
   14028:	push	{fp, lr}
   1402c:	mov	fp, sp
   14030:	mov	r1, #1
   14034:	bl	141d4 <__assert_fail@plt+0x3310>
   14038:	cmp	r0, #0
   1403c:	popne	{fp, pc}
   14040:	bl	14190 <__assert_fail@plt+0x32cc>
   14044:	push	{fp, lr}
   14048:	mov	fp, sp
   1404c:	bl	141d4 <__assert_fail@plt+0x3310>
   14050:	cmp	r0, #0
   14054:	popne	{fp, pc}
   14058:	bl	14190 <__assert_fail@plt+0x32cc>
   1405c:	push	{fp, lr}
   14060:	mov	fp, sp
   14064:	mov	r1, #1
   14068:	bl	141d4 <__assert_fail@plt+0x3310>
   1406c:	cmp	r0, #0
   14070:	popne	{fp, pc}
   14074:	bl	14190 <__assert_fail@plt+0x32cc>
   14078:	push	{fp, lr}
   1407c:	mov	fp, sp
   14080:	bl	141d4 <__assert_fail@plt+0x3310>
   14084:	cmp	r0, #0
   14088:	popne	{fp, pc}
   1408c:	bl	14190 <__assert_fail@plt+0x32cc>
   14090:	push	{r4, r5, r6, sl, fp, lr}
   14094:	add	fp, sp, #16
   14098:	mov	r5, r0
   1409c:	mov	r0, r1
   140a0:	mov	r4, r1
   140a4:	bl	14350 <__assert_fail@plt+0x348c>
   140a8:	cmp	r0, #0
   140ac:	beq	140c8 <__assert_fail@plt+0x3204>
   140b0:	mov	r1, r5
   140b4:	mov	r2, r4
   140b8:	mov	r6, r0
   140bc:	bl	10d14 <memcpy@plt>
   140c0:	mov	r0, r6
   140c4:	pop	{r4, r5, r6, sl, fp, pc}
   140c8:	bl	14190 <__assert_fail@plt+0x32cc>
   140cc:	push	{r4, r5, r6, sl, fp, lr}
   140d0:	add	fp, sp, #16
   140d4:	mov	r5, r0
   140d8:	mov	r0, r1
   140dc:	mov	r4, r1
   140e0:	bl	14350 <__assert_fail@plt+0x348c>
   140e4:	cmp	r0, #0
   140e8:	beq	14104 <__assert_fail@plt+0x3240>
   140ec:	mov	r1, r5
   140f0:	mov	r2, r4
   140f4:	mov	r6, r0
   140f8:	bl	10d14 <memcpy@plt>
   140fc:	mov	r0, r6
   14100:	pop	{r4, r5, r6, sl, fp, pc}
   14104:	bl	14190 <__assert_fail@plt+0x32cc>
   14108:	push	{r4, r5, r6, sl, fp, lr}
   1410c:	add	fp, sp, #16
   14110:	mov	r5, r0
   14114:	add	r0, r1, #1
   14118:	mov	r4, r1
   1411c:	bl	14350 <__assert_fail@plt+0x348c>
   14120:	cmp	r0, #0
   14124:	beq	1414c <__assert_fail@plt+0x3288>
   14128:	mov	r6, r0
   1412c:	mov	r0, #0
   14130:	mov	r1, r5
   14134:	mov	r2, r4
   14138:	strb	r0, [r6, r4]
   1413c:	mov	r0, r6
   14140:	bl	10d14 <memcpy@plt>
   14144:	mov	r0, r6
   14148:	pop	{r4, r5, r6, sl, fp, pc}
   1414c:	bl	14190 <__assert_fail@plt+0x32cc>
   14150:	push	{r4, r5, r6, sl, fp, lr}
   14154:	add	fp, sp, #16
   14158:	mov	r4, r0
   1415c:	bl	10df8 <strlen@plt>
   14160:	add	r5, r0, #1
   14164:	mov	r0, r5
   14168:	bl	14350 <__assert_fail@plt+0x348c>
   1416c:	cmp	r0, #0
   14170:	beq	1418c <__assert_fail@plt+0x32c8>
   14174:	mov	r1, r4
   14178:	mov	r2, r5
   1417c:	mov	r6, r0
   14180:	bl	10d14 <memcpy@plt>
   14184:	mov	r0, r6
   14188:	pop	{r4, r5, r6, sl, fp, pc}
   1418c:	bl	14190 <__assert_fail@plt+0x32cc>
   14190:	push	{fp, lr}
   14194:	mov	fp, sp
   14198:	movw	r0, #20692	; 0x50d4
   1419c:	movw	r1, #20118	; 0x4e96
   141a0:	mov	r2, #5
   141a4:	movt	r0, #2
   141a8:	movt	r1, #1
   141ac:	ldr	r4, [r0]
   141b0:	mov	r0, #0
   141b4:	bl	10d38 <dcgettext@plt>
   141b8:	movw	r2, #19103	; 0x4a9f
   141bc:	mov	r3, r0
   141c0:	mov	r0, r4
   141c4:	mov	r1, #0
   141c8:	movt	r2, #1
   141cc:	bl	10d98 <error@plt>
   141d0:	bl	10eb8 <abort@plt>
   141d4:	clz	r2, r1
   141d8:	clz	r3, r0
   141dc:	lsr	r2, r2, #5
   141e0:	lsr	r3, r3, #5
   141e4:	orrs	r2, r3, r2
   141e8:	movwne	r1, #1
   141ec:	movwne	r0, #1
   141f0:	cmp	r1, #0
   141f4:	beq	14224 <__assert_fail@plt+0x3360>
   141f8:	mvn	r2, #-2147483648	; 0x80000000
   141fc:	udiv	r2, r2, r1
   14200:	cmp	r2, r0
   14204:	bcs	14224 <__assert_fail@plt+0x3360>
   14208:	push	{fp, lr}
   1420c:	mov	fp, sp
   14210:	bl	10e10 <__errno_location@plt>
   14214:	mov	r1, #12
   14218:	str	r1, [r0]
   1421c:	mov	r0, #0
   14220:	pop	{fp, pc}
   14224:	b	10cb4 <calloc@plt>
   14228:	push	{r4, sl, fp, lr}
   1422c:	add	fp, sp, #8
   14230:	sub	sp, sp, #8
   14234:	mov	r4, r0
   14238:	cmp	r0, #0
   1423c:	beq	14258 <__assert_fail@plt+0x3394>
   14240:	mov	r0, r4
   14244:	bl	10dbc <__freading@plt>
   14248:	cmp	r0, #0
   1424c:	ldrbne	r0, [r4, #1]
   14250:	tstne	r0, #1
   14254:	bne	14268 <__assert_fail@plt+0x33a4>
   14258:	mov	r0, r4
   1425c:	sub	sp, fp, #8
   14260:	pop	{r4, sl, fp, lr}
   14264:	b	10ce4 <fflush@plt>
   14268:	mov	r0, #1
   1426c:	mov	r2, #0
   14270:	mov	r3, #0
   14274:	str	r0, [sp]
   14278:	mov	r0, r4
   1427c:	bl	142ac <__assert_fail@plt+0x33e8>
   14280:	b	14258 <__assert_fail@plt+0x3394>
   14284:	push	{r4, r5, r6, sl, fp, lr}
   14288:	add	fp, sp, #16
   1428c:	mov	r4, r0
   14290:	bl	10e10 <__errno_location@plt>
   14294:	ldr	r6, [r0]
   14298:	mov	r5, r0
   1429c:	mov	r0, r4
   142a0:	bl	10cf0 <free@plt>
   142a4:	str	r6, [r5]
   142a8:	pop	{r4, r5, r6, sl, fp, pc}
   142ac:	push	{r4, r5, r6, r7, fp, lr}
   142b0:	add	fp, sp, #16
   142b4:	sub	sp, sp, #8
   142b8:	mov	r4, r0
   142bc:	ldr	r0, [r0, #4]
   142c0:	mov	r5, r3
   142c4:	mov	r6, r2
   142c8:	ldr	r1, [r4, #8]
   142cc:	cmp	r1, r0
   142d0:	bne	142ec <__assert_fail@plt+0x3428>
   142d4:	ldrd	r0, [r4, #16]
   142d8:	cmp	r1, r0
   142dc:	bne	142ec <__assert_fail@plt+0x3428>
   142e0:	ldr	r0, [r4, #36]	; 0x24
   142e4:	cmp	r0, #0
   142e8:	beq	14304 <__assert_fail@plt+0x3440>
   142ec:	mov	r0, r4
   142f0:	mov	r2, r6
   142f4:	mov	r3, r5
   142f8:	sub	sp, fp, #16
   142fc:	pop	{r4, r5, r6, r7, fp, lr}
   14300:	b	10e4c <fseeko64@plt>
   14304:	ldr	r7, [fp, #8]
   14308:	mov	r0, r4
   1430c:	bl	10e34 <fileno@plt>
   14310:	mov	r2, r6
   14314:	mov	r3, r5
   14318:	str	r7, [sp]
   1431c:	bl	10d68 <lseek64@plt>
   14320:	and	r2, r0, r1
   14324:	cmn	r2, #1
   14328:	mvneq	r0, #0
   1432c:	subeq	sp, fp, #16
   14330:	popeq	{r4, r5, r6, r7, fp, pc}
   14334:	strd	r0, [r4, #80]	; 0x50
   14338:	ldr	r0, [r4]
   1433c:	bic	r0, r0, #16
   14340:	str	r0, [r4]
   14344:	mov	r0, #0
   14348:	sub	sp, fp, #16
   1434c:	pop	{r4, r5, r6, r7, fp, pc}
   14350:	cmp	r0, #0
   14354:	movweq	r0, #1
   14358:	cmn	r0, #1
   1435c:	ble	14364 <__assert_fail@plt+0x34a0>
   14360:	b	10da4 <malloc@plt>
   14364:	push	{fp, lr}
   14368:	mov	fp, sp
   1436c:	bl	10e10 <__errno_location@plt>
   14370:	mov	r1, #12
   14374:	str	r1, [r0]
   14378:	mov	r0, #0
   1437c:	pop	{fp, pc}
   14380:	push	{r4, r5, r6, r7, fp, lr}
   14384:	add	fp, sp, #16
   14388:	sub	sp, sp, #8
   1438c:	add	r5, sp, #4
   14390:	cmp	r0, #0
   14394:	mov	r7, r2
   14398:	mov	r4, r1
   1439c:	movne	r5, r0
   143a0:	mov	r0, r5
   143a4:	bl	10d8c <mbrtowc@plt>
   143a8:	mov	r6, r0
   143ac:	cmp	r7, #0
   143b0:	beq	143d4 <__assert_fail@plt+0x3510>
   143b4:	cmn	r6, #2
   143b8:	bcc	143d4 <__assert_fail@plt+0x3510>
   143bc:	mov	r0, #0
   143c0:	bl	144f8 <__assert_fail@plt+0x3634>
   143c4:	cmp	r0, #0
   143c8:	ldrbeq	r0, [r4]
   143cc:	moveq	r6, #1
   143d0:	streq	r0, [r5]
   143d4:	mov	r0, r6
   143d8:	sub	sp, fp, #16
   143dc:	pop	{r4, r5, r6, r7, fp, pc}
   143e0:	push	{fp, lr}
   143e4:	mov	fp, sp
   143e8:	cmp	r0, #0
   143ec:	beq	14408 <__assert_fail@plt+0x3544>
   143f0:	cmp	r1, #0
   143f4:	beq	14414 <__assert_fail@plt+0x3550>
   143f8:	cmn	r1, #1
   143fc:	ble	14420 <__assert_fail@plt+0x355c>
   14400:	pop	{fp, lr}
   14404:	b	10d44 <realloc@plt>
   14408:	mov	r0, r1
   1440c:	pop	{fp, lr}
   14410:	b	14350 <__assert_fail@plt+0x348c>
   14414:	bl	14284 <__assert_fail@plt+0x33c0>
   14418:	mov	r0, #0
   1441c:	pop	{fp, pc}
   14420:	bl	10e10 <__errno_location@plt>
   14424:	mov	r1, #12
   14428:	str	r1, [r0]
   1442c:	mov	r0, #0
   14430:	pop	{fp, pc}
   14434:	cmp	r2, #0
   14438:	beq	14468 <__assert_fail@plt+0x35a4>
   1443c:	mvn	r3, #0
   14440:	udiv	r3, r3, r2
   14444:	cmp	r3, r1
   14448:	bcs	14468 <__assert_fail@plt+0x35a4>
   1444c:	push	{fp, lr}
   14450:	mov	fp, sp
   14454:	bl	10e10 <__errno_location@plt>
   14458:	mov	r1, #12
   1445c:	str	r1, [r0]
   14460:	mov	r0, #0
   14464:	pop	{fp, pc}
   14468:	mul	r1, r2, r1
   1446c:	b	143e0 <__assert_fail@plt+0x351c>
   14470:	push	{r4, r5, r6, sl, fp, lr}
   14474:	add	fp, sp, #16
   14478:	mov	r4, r0
   1447c:	bl	10d80 <__fpending@plt>
   14480:	mov	r5, r0
   14484:	mov	r0, r4
   14488:	bl	10cfc <ferror@plt>
   1448c:	mov	r6, r0
   14490:	mov	r0, r4
   14494:	bl	10e40 <fclose@plt>
   14498:	cmp	r6, #0
   1449c:	beq	144bc <__assert_fail@plt+0x35f8>
   144a0:	mvn	r4, #0
   144a4:	cmp	r0, #0
   144a8:	bne	144f0 <__assert_fail@plt+0x362c>
   144ac:	bl	10e10 <__errno_location@plt>
   144b0:	mov	r1, #0
   144b4:	str	r1, [r0]
   144b8:	b	144f0 <__assert_fail@plt+0x362c>
   144bc:	cmp	r0, #0
   144c0:	mov	r4, r0
   144c4:	mvnne	r4, #0
   144c8:	cmp	r5, #0
   144cc:	bne	144f0 <__assert_fail@plt+0x362c>
   144d0:	cmp	r0, #0
   144d4:	beq	144f0 <__assert_fail@plt+0x362c>
   144d8:	bl	10e10 <__errno_location@plt>
   144dc:	ldr	r0, [r0]
   144e0:	subs	r4, r0, #9
   144e4:	mvnne	r4, #0
   144e8:	mov	r0, r4
   144ec:	pop	{r4, r5, r6, sl, fp, pc}
   144f0:	mov	r0, r4
   144f4:	pop	{r4, r5, r6, sl, fp, pc}
   144f8:	push	{r4, sl, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	sub	sp, sp, #264	; 0x108
   14504:	add	r1, sp, #7
   14508:	movw	r2, #257	; 0x101
   1450c:	bl	14594 <__assert_fail@plt+0x36d0>
   14510:	mov	r4, #0
   14514:	cmp	r0, #0
   14518:	bne	14550 <__assert_fail@plt+0x368c>
   1451c:	movw	r1, #20135	; 0x4ea7
   14520:	add	r0, sp, #7
   14524:	movt	r1, #1
   14528:	bl	10cc0 <strcmp@plt>
   1452c:	cmp	r0, #0
   14530:	beq	14550 <__assert_fail@plt+0x368c>
   14534:	movw	r1, #20137	; 0x4ea9
   14538:	add	r0, sp, #7
   1453c:	movt	r1, #1
   14540:	bl	10cc0 <strcmp@plt>
   14544:	mov	r4, r0
   14548:	cmp	r0, #0
   1454c:	movwne	r4, #1
   14550:	mov	r0, r4
   14554:	sub	sp, fp, #8
   14558:	pop	{r4, sl, fp, pc}
   1455c:	push	{fp, lr}
   14560:	mov	fp, sp
   14564:	mov	r0, #14
   14568:	bl	10e70 <nl_langinfo@plt>
   1456c:	movw	r1, #18990	; 0x4a2e
   14570:	cmp	r0, #0
   14574:	movt	r1, #1
   14578:	movne	r1, r0
   1457c:	movw	r0, #20143	; 0x4eaf
   14580:	ldrb	r2, [r1]
   14584:	movt	r0, #1
   14588:	cmp	r2, #0
   1458c:	movne	r0, r1
   14590:	pop	{fp, pc}
   14594:	push	{r4, r5, r6, r7, fp, lr}
   14598:	add	fp, sp, #16
   1459c:	mov	r4, r1
   145a0:	mov	r1, #0
   145a4:	mov	r6, r2
   145a8:	bl	10e58 <setlocale@plt>
   145ac:	cmp	r0, #0
   145b0:	beq	145e0 <__assert_fail@plt+0x371c>
   145b4:	mov	r7, r0
   145b8:	bl	10df8 <strlen@plt>
   145bc:	cmp	r0, r6
   145c0:	bcs	14600 <__assert_fail@plt+0x373c>
   145c4:	add	r2, r0, #1
   145c8:	mov	r0, r4
   145cc:	mov	r1, r7
   145d0:	bl	10d14 <memcpy@plt>
   145d4:	mov	r5, #0
   145d8:	mov	r0, r5
   145dc:	pop	{r4, r5, r6, r7, fp, pc}
   145e0:	cmp	r6, #0
   145e4:	mov	r5, #22
   145e8:	movne	r0, #0
   145ec:	strbne	r0, [r4]
   145f0:	movne	r0, r5
   145f4:	popne	{r4, r5, r6, r7, fp, pc}
   145f8:	mov	r0, r5
   145fc:	pop	{r4, r5, r6, r7, fp, pc}
   14600:	mov	r5, #34	; 0x22
   14604:	cmp	r6, #0
   14608:	beq	14628 <__assert_fail@plt+0x3764>
   1460c:	sub	r6, r6, #1
   14610:	mov	r0, r4
   14614:	mov	r1, r7
   14618:	mov	r2, r6
   1461c:	bl	10d14 <memcpy@plt>
   14620:	mov	r0, #0
   14624:	strb	r0, [r4, r6]
   14628:	mov	r0, r5
   1462c:	pop	{r4, r5, r6, r7, fp, pc}
   14630:	mov	r1, #0
   14634:	b	10e58 <setlocale@plt>
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1463c:	mov	r7, r0
   14640:	ldr	r6, [pc, #72]	; 14690 <__assert_fail@plt+0x37cc>
   14644:	ldr	r5, [pc, #72]	; 14694 <__assert_fail@plt+0x37d0>
   14648:	add	r6, pc, r6
   1464c:	add	r5, pc, r5
   14650:	sub	r6, r6, r5
   14654:	mov	r8, r1
   14658:	mov	r9, r2
   1465c:	bl	10c94 <calloc@plt-0x20>
   14660:	asrs	r6, r6, #2
   14664:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14668:	mov	r4, #0
   1466c:	add	r4, r4, #1
   14670:	ldr	r3, [r5], #4
   14674:	mov	r2, r9
   14678:	mov	r1, r8
   1467c:	mov	r0, r7
   14680:	blx	r3
   14684:	cmp	r6, r4
   14688:	bne	1466c <__assert_fail@plt+0x37a8>
   1468c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14690:			; <UNDEFINED> instruction: 0x000108bc
   14694:			; <UNDEFINED> instruction: 0x000108b4
   14698:	bx	lr
   1469c:	ldr	r3, [pc, #12]	; 146b0 <__assert_fail@plt+0x37ec>
   146a0:	mov	r1, #0
   146a4:	add	r3, pc, r3
   146a8:	ldr	r2, [r3]
   146ac:	b	10e1c <__cxa_atexit@plt>
   146b0:	andeq	r0, r1, r0, lsr #20

Disassembly of section .fini:

000146b4 <.fini>:
   146b4:	push	{r3, lr}
   146b8:	pop	{r3, pc}
