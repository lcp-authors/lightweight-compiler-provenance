
../repos/prog2/1.5:     file format elf32-littlearm


Disassembly of section .init:

000105c4 <.init>:
   105c4:	push	{r3, lr}
   105c8:	bl	10758 <_start@@Base+0x3c>
   105cc:	pop	{r3, pc}

Disassembly of section .plt:

000105d0 <strcmp@plt-0x14>:
   105d0:	push	{lr}		; (str lr, [sp, #-4]!)
   105d4:	ldr	lr, [pc, #4]	; 105e0 <strcmp@plt-0x4>
   105d8:	add	lr, pc, lr
   105dc:	ldr	pc, [lr, #8]!
   105e0:	andeq	r0, r1, r0, lsr #20

000105e4 <strcmp@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2592]!	; 0xa20

000105f0 <fopen@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2584]!	; 0xa18

000105fc <__libc_start_main@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2576]!	; 0xa10

00010608 <__gmon_start__@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2568]!	; 0xa08

00010614 <strlen@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2560]!	; 0xa00

00010620 <fgetc@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2552]!	; 0x9f8

0001062c <fseek@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2544]!	; 0x9f0

00010638 <abort@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2536]!	; 0x9e8

Disassembly of section .text:

00010644 <main@@Base>:
   10644:	push	{r4, r5, r6, r7, r8, lr}
   10648:	mov	r5, #0
   1064c:	ldr	r6, [pc, #184]	; 1070c <main@@Base+0xc8>
   10650:	ldr	r7, [pc, #184]	; 10710 <main@@Base+0xcc>
   10654:	ldr	r1, [pc, #184]	; 10714 <main@@Base+0xd0>
   10658:	ldr	r0, [pc, #184]	; 10718 <main@@Base+0xd4>
   1065c:	bl	105f0 <fopen@plt>
   10660:	mov	r4, r0
   10664:	mov	r0, r4
   10668:	bl	10620 <fgetc@plt>
   1066c:	uxtb	r0, r0
   10670:	cmp	r0, #10
   10674:	beq	10664 <main@@Base+0x20>
   10678:	cmp	r0, #115	; 0x73
   1067c:	moveq	r1, r4
   10680:	moveq	r0, r7
   10684:	beq	10698 <main@@Base+0x54>
   10688:	cmp	r0, #112	; 0x70
   1068c:	bne	106a0 <main@@Base+0x5c>
   10690:	mov	r1, r4
   10694:	mov	r0, r6
   10698:	bl	1080c <IsIOFunction@@Base>
   1069c:	b	10664 <main@@Base+0x20>
   106a0:	cmp	r0, #47	; 0x2f
   106a4:	bne	106e0 <main@@Base+0x9c>
   106a8:	mov	r0, r4
   106ac:	bl	10620 <fgetc@plt>
   106b0:	eor	r3, r5, #1
   106b4:	cmp	r0, #42	; 0x2a
   106b8:	movne	r0, #0
   106bc:	andeq	r0, r3, #1
   106c0:	cmp	r0, #0
   106c4:	movne	r5, #1
   106c8:	bne	10664 <main@@Base+0x20>
   106cc:	mov	r2, #1
   106d0:	mvn	r1, #0
   106d4:	mov	r0, r4
   106d8:	bl	1062c <fseek@plt>
   106dc:	b	10664 <main@@Base+0x20>
   106e0:	cmp	r0, #42	; 0x2a
   106e4:	bne	10664 <main@@Base+0x20>
   106e8:	mov	r0, r4
   106ec:	bl	10620 <fgetc@plt>
   106f0:	cmp	r0, #47	; 0x2f
   106f4:	movne	r0, #0
   106f8:	andeq	r0, r5, #1
   106fc:	cmp	r0, #0
   10700:	movne	r5, #0
   10704:	beq	106cc <main@@Base+0x88>
   10708:	b	10664 <main@@Base+0x20>
   1070c:	andeq	r0, r1, r6, lsr #18
   10710:	andeq	r0, r1, r0, lsr #18
   10714:	andeq	r0, r1, ip, lsl #18
   10718:	andeq	r0, r1, lr, lsl #18

0001071c <_start@@Base>:
   1071c:	mov	fp, #0
   10720:	mov	lr, #0
   10724:	pop	{r1}		; (ldr r1, [sp], #4)
   10728:	mov	r2, sp
   1072c:	push	{r2}		; (str r2, [sp, #-4]!)
   10730:	push	{r0}		; (str r0, [sp, #-4]!)
   10734:	ldr	ip, [pc, #16]	; 1074c <_start@@Base+0x30>
   10738:	push	{ip}		; (str ip, [sp, #-4]!)
   1073c:	ldr	r0, [pc, #12]	; 10750 <_start@@Base+0x34>
   10740:	ldr	r3, [pc, #12]	; 10754 <_start@@Base+0x38>
   10744:	bl	105fc <__libc_start_main@plt>
   10748:	bl	10638 <abort@plt>
   1074c:	strdeq	r0, [r1], -ip
   10750:	andeq	r0, r1, r4, asr #12
   10754:	muleq	r1, ip, r8
   10758:	ldr	r3, [pc, #20]	; 10774 <_start@@Base+0x58>
   1075c:	ldr	r2, [pc, #20]	; 10778 <_start@@Base+0x5c>
   10760:	add	r3, pc, r3
   10764:	ldr	r2, [r3, r2]
   10768:	cmp	r2, #0
   1076c:	bxeq	lr
   10770:	b	10608 <__gmon_start__@plt>
   10774:	muleq	r1, r8, r8
   10778:	andeq	r0, r0, ip, lsr #32
   1077c:	ldr	r0, [pc, #24]	; 1079c <_start@@Base+0x80>
   10780:	ldr	r3, [pc, #24]	; 107a0 <_start@@Base+0x84>
   10784:	cmp	r3, r0
   10788:	bxeq	lr
   1078c:	ldr	r3, [pc, #16]	; 107a4 <_start@@Base+0x88>
   10790:	cmp	r3, #0
   10794:	bxeq	lr
   10798:	bx	r3
   1079c:	andeq	r1, r2, r8, lsr r0
   107a0:	andeq	r1, r2, r8, lsr r0
   107a4:	andeq	r0, r0, r0
   107a8:	ldr	r0, [pc, #36]	; 107d4 <_start@@Base+0xb8>
   107ac:	ldr	r1, [pc, #36]	; 107d8 <_start@@Base+0xbc>
   107b0:	sub	r1, r1, r0
   107b4:	asr	r1, r1, #2
   107b8:	add	r1, r1, r1, lsr #31
   107bc:	asrs	r1, r1, #1
   107c0:	bxeq	lr
   107c4:	ldr	r3, [pc, #16]	; 107dc <_start@@Base+0xc0>
   107c8:	cmp	r3, #0
   107cc:	bxeq	lr
   107d0:	bx	r3
   107d4:	andeq	r1, r2, r8, lsr r0
   107d8:	andeq	r1, r2, r8, lsr r0
   107dc:	andeq	r0, r0, r0
   107e0:	push	{r4, lr}
   107e4:	ldr	r4, [pc, #24]	; 10804 <_start@@Base+0xe8>
   107e8:	ldrb	r3, [r4]
   107ec:	cmp	r3, #0
   107f0:	popne	{r4, pc}
   107f4:	bl	1077c <_start@@Base+0x60>
   107f8:	mov	r3, #1
   107fc:	strb	r3, [r4]
   10800:	pop	{r4, pc}
   10804:	andeq	r1, r2, r8, lsr r0
   10808:	b	107a8 <_start@@Base+0x8c>

0001080c <IsIOFunction@@Base>:
   1080c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10810:	mov	r5, r1
   10814:	mov	r7, r0
   10818:	mov	r2, #1
   1081c:	mvn	r1, #0
   10820:	mov	r0, r5
   10824:	mov	r4, #0
   10828:	bl	1062c <fseek@plt>
   1082c:	mov	r0, r7
   10830:	bl	10614 <strlen@plt>
   10834:	mov	r6, r0
   10838:	str	r4, [sp]
   1083c:	strh	r4, [sp, #4]
   10840:	strb	r4, [sp, #6]
   10844:	cmp	r4, r6
   10848:	blt	10888 <IsIOFunction@@Base+0x7c>
   1084c:	add	r3, sp, #8
   10850:	mov	r2, #0
   10854:	add	r3, r3, r6
   10858:	mov	r0, r5
   1085c:	strb	r2, [r3, #-8]
   10860:	mov	r2, #1
   10864:	sub	r1, r2, r6
   10868:	bl	1062c <fseek@plt>
   1086c:	mov	r1, sp
   10870:	mov	r0, r7
   10874:	bl	105e4 <strcmp@plt>
   10878:	clz	r0, r0
   1087c:	lsr	r0, r0, #5
   10880:	add	sp, sp, #12
   10884:	pop	{r4, r5, r6, r7, pc}
   10888:	mov	r0, r5
   1088c:	bl	10620 <fgetc@plt>
   10890:	strb	r0, [sp, r4]
   10894:	add	r4, r4, #1
   10898:	b	10844 <IsIOFunction@@Base+0x38>

0001089c <__libc_csu_init@@Base>:
   1089c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108a0:	mov	r7, r0
   108a4:	ldr	r6, [pc, #72]	; 108f4 <__libc_csu_init@@Base+0x58>
   108a8:	ldr	r5, [pc, #72]	; 108f8 <__libc_csu_init@@Base+0x5c>
   108ac:	add	r6, pc, r6
   108b0:	add	r5, pc, r5
   108b4:	sub	r6, r6, r5
   108b8:	mov	r8, r1
   108bc:	mov	r9, r2
   108c0:	bl	105c4 <strcmp@plt-0x20>
   108c4:	asrs	r6, r6, #2
   108c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108cc:	mov	r4, #0
   108d0:	add	r4, r4, #1
   108d4:	ldr	r3, [r5], #4
   108d8:	mov	r2, r9
   108dc:	mov	r1, r8
   108e0:	mov	r0, r7
   108e4:	blx	r3
   108e8:	cmp	r6, r4
   108ec:	bne	108d0 <__libc_csu_init@@Base+0x34>
   108f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108f4:	andeq	r0, r1, r0, ror #12
   108f8:	andeq	r0, r1, r8, asr r6

000108fc <__libc_csu_fini@@Base>:
   108fc:	bx	lr

Disassembly of section .fini:

00010900 <.fini>:
   10900:	push	{r3, lr}
   10904:	pop	{r3, pc}
