
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f8c <.init>:
   11f8c:	push	{r3, lr}
   11f90:	bl	120e4 <_start@@Base+0x3c>
   11f94:	pop	{r3, pc}

Disassembly of section .plt:

00011f98 <strcmp@plt-0x14>:
   11f98:	push	{lr}		; (str lr, [sp, #-4]!)
   11f9c:	ldr	lr, [pc, #4]	; 11fa8 <strcmp@plt-0x4>
   11fa0:	add	lr, pc, lr
   11fa4:	ldr	pc, [lr, #8]!
   11fa8:	andeq	sl, r1, r8, asr r0

00011fac <strcmp@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #106496	; 0x1a000
   11fb4:	ldr	pc, [ip, #88]!	; 0x58

00011fb8 <printf@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #106496	; 0x1a000
   11fc0:	ldr	pc, [ip, #80]!	; 0x50

00011fc4 <fopen@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #106496	; 0x1a000
   11fcc:	ldr	pc, [ip, #72]!	; 0x48

00011fd0 <free@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #106496	; 0x1a000
   11fd8:	ldr	pc, [ip, #64]!	; 0x40

00011fdc <memcpy@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #106496	; 0x1a000
   11fe4:	ldr	pc, [ip, #56]!	; 0x38

00011fe8 <memcmp@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #106496	; 0x1a000
   11ff0:	ldr	pc, [ip, #48]!	; 0x30

00011ff4 <realloc@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #106496	; 0x1a000
   11ffc:	ldr	pc, [ip, #40]!	; 0x28

00012000 <fwrite@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #106496	; 0x1a000
   12008:	ldr	pc, [ip, #32]!

0001200c <gettimeofday@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #106496	; 0x1a000
   12014:	ldr	pc, [ip, #24]!

00012018 <puts@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #106496	; 0x1a000
   12020:	ldr	pc, [ip, #16]!

00012024 <malloc@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #106496	; 0x1a000
   1202c:	ldr	pc, [ip, #8]!

00012030 <__libc_start_main@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #106496	; 0x1a000
   12038:	ldr	pc, [ip, #0]!

0001203c <__gmon_start__@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #102400	; 0x19000
   12044:	ldr	pc, [ip, #4088]!	; 0xff8

00012048 <strlen@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #102400	; 0x19000
   12050:	ldr	pc, [ip, #4080]!	; 0xff0

00012054 <posix_memalign@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #102400	; 0x19000
   1205c:	ldr	pc, [ip, #4072]!	; 0xfe8

00012060 <memset@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #102400	; 0x19000
   12068:	ldr	pc, [ip, #4064]!	; 0xfe0

0001206c <strncpy@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #102400	; 0x19000
   12074:	ldr	pc, [ip, #4056]!	; 0xfd8

00012078 <memchr@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #102400	; 0x19000
   12080:	ldr	pc, [ip, #4048]!	; 0xfd0

00012084 <fclose@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #102400	; 0x19000
   1208c:	ldr	pc, [ip, #4040]!	; 0xfc8

00012090 <abort@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #102400	; 0x19000
   12098:	ldr	pc, [ip, #4032]!	; 0xfc0

0001209c <__assert_fail@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #102400	; 0x19000
   120a4:	ldr	pc, [ip, #4024]!	; 0xfb8

Disassembly of section .text:

000120a8 <_start@@Base>:
   120a8:	mov	fp, #0
   120ac:	mov	lr, #0
   120b0:	pop	{r1}		; (ldr r1, [sp], #4)
   120b4:	mov	r2, sp
   120b8:	push	{r2}		; (str r2, [sp, #-4]!)
   120bc:	push	{r0}		; (str r0, [sp, #-4]!)
   120c0:	ldr	ip, [pc, #16]	; 120d8 <_start@@Base+0x30>
   120c4:	push	{ip}		; (str ip, [sp, #-4]!)
   120c8:	ldr	r0, [pc, #12]	; 120dc <_start@@Base+0x34>
   120cc:	ldr	r3, [pc, #12]	; 120e0 <_start@@Base+0x38>
   120d0:	bl	12030 <__libc_start_main@plt>
   120d4:	bl	12090 <abort@plt>
   120d8:	andeq	sl, r1, r8, asr r7
   120dc:	andeq	r3, r1, r8, lsr #11
   120e0:	strdeq	sl, [r1], -r8
   120e4:	ldr	r3, [pc, #20]	; 12100 <_start@@Base+0x58>
   120e8:	ldr	r2, [pc, #20]	; 12104 <_start@@Base+0x5c>
   120ec:	add	r3, pc, r3
   120f0:	ldr	r2, [r3, r2]
   120f4:	cmp	r2, #0
   120f8:	bxeq	lr
   120fc:	b	1203c <__gmon_start__@plt>
   12100:	andeq	r9, r1, ip, lsl #30
   12104:	andeq	r0, r0, r4, rrx
   12108:	ldr	r3, [pc, #28]	; 1212c <_start@@Base+0x84>
   1210c:	ldr	r0, [pc, #28]	; 12130 <_start@@Base+0x88>
   12110:	sub	r3, r3, r0
   12114:	cmp	r3, #6
   12118:	bxls	lr
   1211c:	ldr	r3, [pc, #16]	; 12134 <_start@@Base+0x8c>
   12120:	cmp	r3, #0
   12124:	bxeq	lr
   12128:	bx	r3
   1212c:	andeq	ip, r2, r3, lsl #1
   12130:	andeq	ip, r2, r0, lsl #1
   12134:	andeq	r0, r0, r0
   12138:	ldr	r1, [pc, #36]	; 12164 <_start@@Base+0xbc>
   1213c:	ldr	r0, [pc, #36]	; 12168 <_start@@Base+0xc0>
   12140:	sub	r1, r1, r0
   12144:	asr	r1, r1, #2
   12148:	add	r1, r1, r1, lsr #31
   1214c:	asrs	r1, r1, #1
   12150:	bxeq	lr
   12154:	ldr	r3, [pc, #16]	; 1216c <_start@@Base+0xc4>
   12158:	cmp	r3, #0
   1215c:	bxeq	lr
   12160:	bx	r3
   12164:	andeq	ip, r2, r0, lsl #1
   12168:	andeq	ip, r2, r0, lsl #1
   1216c:	andeq	r0, r0, r0
   12170:	push	{r4, lr}
   12174:	ldr	r4, [pc, #24]	; 12194 <_start@@Base+0xec>
   12178:	ldrb	r3, [r4]
   1217c:	cmp	r3, #0
   12180:	popne	{r4, pc}
   12184:	bl	12108 <_start@@Base+0x60>
   12188:	mov	r3, #1
   1218c:	strb	r3, [r4]
   12190:	pop	{r4, pc}
   12194:	andeq	ip, r2, r0, lsl #1
   12198:	ldr	r0, [pc, #40]	; 121c8 <_start@@Base+0x120>
   1219c:	ldr	r3, [r0]
   121a0:	cmp	r3, #0
   121a4:	bne	121ac <_start@@Base+0x104>
   121a8:	b	12138 <_start@@Base+0x90>
   121ac:	ldr	r3, [pc, #24]	; 121cc <_start@@Base+0x124>
   121b0:	cmp	r3, #0
   121b4:	beq	121a8 <_start@@Base+0x100>
   121b8:	push	{r4, lr}
   121bc:	blx	r3
   121c0:	pop	{r4, lr}
   121c4:	b	12138 <_start@@Base+0x90>
   121c8:	andeq	fp, r2, r4, lsl pc
   121cc:	andeq	r0, r0, r0
   121d0:	push	{fp}		; (str fp, [sp, #-4]!)
   121d4:	add	fp, sp, #0
   121d8:	sub	sp, sp, #12
   121dc:	str	r0, [fp, #-8]
   121e0:	ldr	r3, [fp, #-8]
   121e4:	mov	r0, r3
   121e8:	add	sp, fp, #0
   121ec:	pop	{fp}		; (ldr fp, [sp], #4)
   121f0:	bx	lr
   121f4:	push	{fp, lr}
   121f8:	add	fp, sp, #4
   121fc:	sub	sp, sp, #8
   12200:	str	r0, [fp, #-8]
   12204:	ldr	r3, [fp, #-8]
   12208:	ldr	r3, [r3]
   1220c:	mov	r0, r3
   12210:	bl	121d0 <_start@@Base+0x128>
   12214:	mov	r3, r0
   12218:	mov	r0, r3
   1221c:	sub	sp, fp, #4
   12220:	pop	{fp, pc}
   12224:	push	{fp}		; (str fp, [sp, #-4]!)
   12228:	add	fp, sp, #0
   1222c:	sub	sp, sp, #12
   12230:	str	r0, [fp, #-8]
   12234:	ldr	r3, [fp, #-8]
   12238:	mov	r0, r3
   1223c:	add	sp, fp, #0
   12240:	pop	{fp}		; (ldr fp, [sp], #4)
   12244:	bx	lr
   12248:	push	{fp, lr}
   1224c:	add	fp, sp, #4
   12250:	sub	sp, sp, #8
   12254:	str	r0, [fp, #-8]
   12258:	ldr	r3, [fp, #-8]
   1225c:	ldr	r3, [r3]
   12260:	mov	r0, r3
   12264:	bl	12224 <_start@@Base+0x17c>
   12268:	mov	r3, r0
   1226c:	mov	r0, r3
   12270:	sub	sp, fp, #4
   12274:	pop	{fp, pc}
   12278:	push	{fp}		; (str fp, [sp, #-4]!)
   1227c:	add	fp, sp, #0
   12280:	sub	sp, sp, #12
   12284:	mov	r3, r0
   12288:	strh	r3, [fp, #-6]
   1228c:	ldrh	r3, [fp, #-6]
   12290:	mov	r0, r3
   12294:	add	sp, fp, #0
   12298:	pop	{fp}		; (ldr fp, [sp], #4)
   1229c:	bx	lr
   122a0:	push	{fp, lr}
   122a4:	add	fp, sp, #4
   122a8:	sub	sp, sp, #8
   122ac:	str	r0, [fp, #-8]
   122b0:	ldr	r3, [fp, #-8]
   122b4:	ldrh	r3, [r3]
   122b8:	mov	r0, r3
   122bc:	bl	12278 <_start@@Base+0x1d0>
   122c0:	mov	r3, r0
   122c4:	mov	r0, r3
   122c8:	sub	sp, fp, #4
   122cc:	pop	{fp, pc}
   122d0:	push	{fp}		; (str fp, [sp, #-4]!)
   122d4:	add	fp, sp, #0
   122d8:	sub	sp, sp, #12
   122dc:	str	r0, [fp, #-8]
   122e0:	ldr	r3, [fp, #-8]
   122e4:	mov	r0, r3
   122e8:	add	sp, fp, #0
   122ec:	pop	{fp}		; (ldr fp, [sp], #4)
   122f0:	bx	lr
   122f4:	push	{fp}		; (str fp, [sp, #-4]!)
   122f8:	add	fp, sp, #0
   122fc:	sub	sp, sp, #12
   12300:	str	r0, [fp, #-8]
   12304:	ldr	r3, [fp, #-8]
   12308:	mov	r0, r3
   1230c:	add	sp, fp, #0
   12310:	pop	{fp}		; (ldr fp, [sp], #4)
   12314:	bx	lr
   12318:	push	{fp, lr}
   1231c:	add	fp, sp, #4
   12320:	sub	sp, sp, #8
   12324:	str	r0, [fp, #-8]
   12328:	ldr	r3, [fp, #-8]
   1232c:	ldr	r3, [r3]
   12330:	mov	r0, r3
   12334:	bl	122d0 <_start@@Base+0x228>
   12338:	mov	r3, r0
   1233c:	mov	r0, r3
   12340:	sub	sp, fp, #4
   12344:	pop	{fp, pc}
   12348:	push	{fp, lr}
   1234c:	add	fp, sp, #4
   12350:	sub	sp, sp, #8
   12354:	str	r0, [fp, #-8]
   12358:	ldr	r3, [fp, #-8]
   1235c:	cmp	r3, #0
   12360:	beq	1237c <_start@@Base+0x2d4>
   12364:	ldr	r3, [fp, #-8]
   12368:	sub	r3, r3, #4
   1236c:	mov	r0, r3
   12370:	bl	121f4 <_start@@Base+0x14c>
   12374:	mov	r3, r0
   12378:	b	12380 <_start@@Base+0x2d8>
   1237c:	mov	r3, #0
   12380:	mov	r0, r3
   12384:	sub	sp, fp, #4
   12388:	pop	{fp, pc}
   1238c:	push	{fp, lr}
   12390:	add	fp, sp, #4
   12394:	sub	sp, sp, #8
   12398:	str	r0, [fp, #-8]
   1239c:	ldr	r3, [fp, #-8]
   123a0:	cmp	r3, #0
   123a4:	beq	123c0 <_start@@Base+0x318>
   123a8:	ldr	r3, [fp, #-8]
   123ac:	sub	r3, r3, #4
   123b0:	mov	r0, r3
   123b4:	bl	121f4 <_start@@Base+0x14c>
   123b8:	mov	r3, r0
   123bc:	b	123c4 <_start@@Base+0x31c>
   123c0:	mov	r3, #0
   123c4:	mov	r0, r3
   123c8:	sub	sp, fp, #4
   123cc:	pop	{fp, pc}
   123d0:	push	{fp, lr}
   123d4:	add	fp, sp, #4
   123d8:	sub	sp, sp, #8
   123dc:	str	r0, [fp, #-8]
   123e0:	ldr	r0, [fp, #-8]
   123e4:	bl	12348 <_start@@Base+0x2a0>
   123e8:	mov	r3, r0
   123ec:	mov	r0, r3
   123f0:	sub	sp, fp, #4
   123f4:	pop	{fp, pc}
   123f8:	push	{fp, lr}
   123fc:	add	fp, sp, #4
   12400:	sub	sp, sp, #16
   12404:	str	r0, [fp, #-16]
   12408:	str	r1, [fp, #-20]	; 0xffffffec
   1240c:	mov	r3, #0
   12410:	str	r3, [fp, #-12]
   12414:	ldr	r3, [fp, #-20]	; 0xffffffec
   12418:	cmp	r3, #0
   1241c:	bne	12428 <_start@@Base+0x380>
   12420:	mov	r3, #1
   12424:	b	1248c <_start@@Base+0x3e4>
   12428:	sub	r3, fp, #12
   1242c:	mov	r2, #4
   12430:	ldr	r1, [fp, #-20]	; 0xffffffec
   12434:	mov	r0, r3
   12438:	bl	1206c <strncpy@plt>
   1243c:	ldr	r3, [fp, #-12]
   12440:	mov	r0, r3
   12444:	bl	122f4 <_start@@Base+0x24c>
   12448:	mov	r3, r0
   1244c:	str	r3, [fp, #-12]
   12450:	ldr	r3, [fp, #-16]
   12454:	add	r3, r3, #4
   12458:	mov	r0, r3
   1245c:	bl	12318 <_start@@Base+0x270>
   12460:	str	r0, [fp, #-8]
   12464:	ldr	r3, [fp, #-12]
   12468:	cmp	r3, #0
   1246c:	beq	12480 <_start@@Base+0x3d8>
   12470:	ldr	r3, [fp, #-12]
   12474:	ldr	r2, [fp, #-8]
   12478:	cmp	r2, r3
   1247c:	bne	12488 <_start@@Base+0x3e0>
   12480:	mov	r3, #1
   12484:	b	1248c <_start@@Base+0x3e4>
   12488:	mov	r3, #0
   1248c:	mov	r0, r3
   12490:	sub	sp, fp, #4
   12494:	pop	{fp, pc}
   12498:	push	{fp, lr}
   1249c:	add	fp, sp, #4
   124a0:	sub	sp, sp, #8
   124a4:	str	r0, [fp, #-8]
   124a8:	ldr	r3, [fp, #-8]
   124ac:	cmp	r3, #0
   124b0:	beq	124cc <_start@@Base+0x424>
   124b4:	ldr	r3, [fp, #-8]
   124b8:	sub	r3, r3, #4
   124bc:	mov	r0, r3
   124c0:	bl	121f4 <_start@@Base+0x14c>
   124c4:	mov	r3, r0
   124c8:	b	124d0 <_start@@Base+0x428>
   124cc:	mov	r3, #0
   124d0:	mov	r0, r3
   124d4:	sub	sp, fp, #4
   124d8:	pop	{fp, pc}
   124dc:	push	{fp, lr}
   124e0:	add	fp, sp, #4
   124e4:	sub	sp, sp, #16
   124e8:	str	r0, [fp, #-16]
   124ec:	str	r1, [fp, #-20]	; 0xffffffec
   124f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   124f4:	lsl	r3, r3, #2
   124f8:	ldr	r2, [fp, #-16]
   124fc:	add	r3, r2, r3
   12500:	str	r3, [fp, #-8]
   12504:	ldr	r0, [fp, #-16]
   12508:	bl	12348 <_start@@Base+0x2a0>
   1250c:	mov	r2, r0
   12510:	ldr	r3, [fp, #-20]	; 0xffffffec
   12514:	cmp	r2, r3
   12518:	bhi	1253c <_start@@Base+0x494>
   1251c:	ldr	r3, [pc, #56]	; 1255c <_start@@Base+0x4b4>
   12520:	add	r3, pc, r3
   12524:	ldr	r2, [pc, #52]	; 12560 <_start@@Base+0x4b8>
   12528:	ldr	r1, [pc, #52]	; 12564 <_start@@Base+0x4bc>
   1252c:	add	r1, pc, r1
   12530:	ldr	r0, [pc, #48]	; 12568 <_start@@Base+0x4c0>
   12534:	add	r0, pc, r0
   12538:	bl	1209c <__assert_fail@plt>
   1253c:	ldr	r0, [fp, #-8]
   12540:	bl	121f4 <_start@@Base+0x14c>
   12544:	mov	r2, r0
   12548:	ldr	r3, [fp, #-8]
   1254c:	add	r3, r3, r2
   12550:	mov	r0, r3
   12554:	sub	sp, fp, #4
   12558:	pop	{fp, pc}
   1255c:	andeq	r8, r0, r8, asr #15
   12560:			; <UNDEFINED> instruction: 0x000002b5
   12564:	andeq	r8, r0, r8, lsr r2
   12568:	andeq	r8, r0, r8, lsr #5
   1256c:	push	{fp, lr}
   12570:	add	fp, sp, #4
   12574:	sub	sp, sp, #16
   12578:	str	r0, [fp, #-16]
   1257c:	ldr	r3, [pc, #80]	; 125d4 <_start@@Base+0x52c>
   12580:	add	r3, pc, r3
   12584:	str	r3, [fp, #-8]
   12588:	ldr	r3, [fp, #-16]
   1258c:	cmp	r3, #0
   12590:	beq	125c4 <_start@@Base+0x51c>
   12594:	ldr	r1, [fp, #-8]
   12598:	ldr	r0, [fp, #-16]
   1259c:	bl	123f8 <_start@@Base+0x350>
   125a0:	mov	r3, r0
   125a4:	cmp	r3, #0
   125a8:	beq	125c4 <_start@@Base+0x51c>
   125ac:	ldr	r0, [fp, #-16]
   125b0:	bl	121f4 <_start@@Base+0x14c>
   125b4:	mov	r2, r0
   125b8:	ldr	r3, [fp, #-16]
   125bc:	add	r3, r3, r2
   125c0:	b	125c8 <_start@@Base+0x520>
   125c4:	mov	r3, #0
   125c8:	mov	r0, r3
   125cc:	sub	sp, fp, #4
   125d0:	pop	{fp, pc}
   125d4:	muleq	r0, r4, r2
   125d8:	push	{fp, lr}
   125dc:	add	fp, sp, #4
   125e0:	sub	sp, sp, #24
   125e4:	str	r0, [fp, #-24]	; 0xffffffe8
   125e8:	mov	r3, #0
   125ec:	strh	r3, [fp, #-6]
   125f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125f4:	cmp	r3, #0
   125f8:	bne	1261c <_start@@Base+0x574>
   125fc:	ldr	r3, [pc, #232]	; 126ec <_start@@Base+0x644>
   12600:	add	r3, pc, r3
   12604:	ldr	r2, [pc, #228]	; 126f0 <_start@@Base+0x648>
   12608:	ldr	r1, [pc, #228]	; 126f4 <_start@@Base+0x64c>
   1260c:	add	r1, pc, r1
   12610:	ldr	r0, [pc, #224]	; 126f8 <_start@@Base+0x650>
   12614:	add	r0, pc, r0
   12618:	bl	1209c <__assert_fail@plt>
   1261c:	mov	r3, #3
   12620:	strh	r3, [fp, #-8]
   12624:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12628:	bl	12248 <_start@@Base+0x1a0>
   1262c:	mov	r3, r0
   12630:	rsb	r3, r3, #0
   12634:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12638:	add	r3, r2, r3
   1263c:	str	r3, [fp, #-12]
   12640:	ldr	r0, [fp, #-12]
   12644:	bl	122a0 <_start@@Base+0x1f8>
   12648:	mov	r3, r0
   1264c:	mov	r2, r3
   12650:	ldrh	r3, [fp, #-8]
   12654:	add	r3, r3, #3
   12658:	lsl	r3, r3, #1
   1265c:	cmp	r2, r3
   12660:	bcc	12688 <_start@@Base+0x5e0>
   12664:	ldrh	r3, [fp, #-8]
   12668:	add	r3, r3, #2
   1266c:	lsl	r3, r3, #1
   12670:	ldr	r2, [fp, #-12]
   12674:	add	r3, r2, r3
   12678:	mov	r0, r3
   1267c:	bl	122a0 <_start@@Base+0x1f8>
   12680:	mov	r3, r0
   12684:	strh	r3, [fp, #-6]
   12688:	ldrh	r3, [fp, #-6]
   1268c:	cmp	r3, #0
   12690:	beq	126c0 <_start@@Base+0x618>
   12694:	ldrh	r3, [fp, #-6]
   12698:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1269c:	add	r3, r2, r3
   126a0:	str	r3, [fp, #-16]
   126a4:	ldr	r0, [fp, #-16]
   126a8:	bl	121f4 <_start@@Base+0x14c>
   126ac:	mov	r3, r0
   126b0:	add	r3, r3, #4
   126b4:	ldr	r2, [fp, #-16]
   126b8:	add	r3, r2, r3
   126bc:	b	126e0 <_start@@Base+0x638>
   126c0:	ldr	r3, [pc, #52]	; 126fc <_start@@Base+0x654>
   126c4:	add	r3, pc, r3
   126c8:	ldr	r2, [pc, #32]	; 126f0 <_start@@Base+0x648>
   126cc:	ldr	r1, [pc, #44]	; 12700 <_start@@Base+0x658>
   126d0:	add	r1, pc, r1
   126d4:	ldr	r0, [pc, #40]	; 12704 <_start@@Base+0x65c>
   126d8:	add	r0, pc, r0
   126dc:	bl	1209c <__assert_fail@plt>
   126e0:	mov	r0, r3
   126e4:	sub	sp, fp, #4
   126e8:	pop	{fp, pc}
   126ec:	andeq	r8, r0, r4, ror r6
   126f0:			; <UNDEFINED> instruction: 0x000002bb
   126f4:	andeq	r8, r0, r8, asr r1
   126f8:	andeq	r8, r0, r8, lsl #4
   126fc:			; <UNDEFINED> instruction: 0x000085b0
   12700:	muleq	r0, r4, r0
   12704:	andeq	r8, r0, ip, ror #2
   12708:	push	{fp, lr}
   1270c:	add	fp, sp, #4
   12710:	sub	sp, sp, #24
   12714:	str	r0, [fp, #-24]	; 0xffffffe8
   12718:	mov	r3, #0
   1271c:	strh	r3, [fp, #-6]
   12720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12724:	cmp	r3, #0
   12728:	bne	1274c <_start@@Base+0x6a4>
   1272c:	ldr	r3, [pc, #204]	; 12800 <_start@@Base+0x758>
   12730:	add	r3, pc, r3
   12734:	ldr	r2, [pc, #200]	; 12804 <_start@@Base+0x75c>
   12738:	ldr	r1, [pc, #200]	; 12808 <_start@@Base+0x760>
   1273c:	add	r1, pc, r1
   12740:	ldr	r0, [pc, #196]	; 1280c <_start@@Base+0x764>
   12744:	add	r0, pc, r0
   12748:	bl	1209c <__assert_fail@plt>
   1274c:	mov	r3, #5
   12750:	strh	r3, [fp, #-8]
   12754:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12758:	bl	12248 <_start@@Base+0x1a0>
   1275c:	mov	r3, r0
   12760:	rsb	r3, r3, #0
   12764:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12768:	add	r3, r2, r3
   1276c:	str	r3, [fp, #-12]
   12770:	ldr	r0, [fp, #-12]
   12774:	bl	122a0 <_start@@Base+0x1f8>
   12778:	mov	r3, r0
   1277c:	mov	r2, r3
   12780:	ldrh	r3, [fp, #-8]
   12784:	add	r3, r3, #3
   12788:	lsl	r3, r3, #1
   1278c:	cmp	r2, r3
   12790:	bcc	127b8 <_start@@Base+0x710>
   12794:	ldrh	r3, [fp, #-8]
   12798:	add	r3, r3, #2
   1279c:	lsl	r3, r3, #1
   127a0:	ldr	r2, [fp, #-12]
   127a4:	add	r3, r2, r3
   127a8:	mov	r0, r3
   127ac:	bl	122a0 <_start@@Base+0x1f8>
   127b0:	mov	r3, r0
   127b4:	strh	r3, [fp, #-6]
   127b8:	ldrh	r3, [fp, #-6]
   127bc:	cmp	r3, #0
   127c0:	beq	127f0 <_start@@Base+0x748>
   127c4:	ldrh	r3, [fp, #-6]
   127c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127cc:	add	r3, r2, r3
   127d0:	str	r3, [fp, #-16]
   127d4:	ldr	r0, [fp, #-16]
   127d8:	bl	121f4 <_start@@Base+0x14c>
   127dc:	mov	r3, r0
   127e0:	add	r3, r3, #4
   127e4:	ldr	r2, [fp, #-16]
   127e8:	add	r3, r2, r3
   127ec:	b	127f4 <_start@@Base+0x74c>
   127f0:	mov	r3, #0
   127f4:	mov	r0, r3
   127f8:	sub	sp, fp, #4
   127fc:	pop	{fp, pc}
   12800:	andeq	r8, r0, r0, ror #10
   12804:	andeq	r0, r0, r2, asr #5
   12808:	andeq	r8, r0, r8, lsr #32
   1280c:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   12810:	push	{fp, lr}
   12814:	add	fp, sp, #4
   12818:	sub	sp, sp, #24
   1281c:	str	r0, [fp, #-24]	; 0xffffffe8
   12820:	mov	r3, #0
   12824:	strh	r3, [fp, #-6]
   12828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1282c:	cmp	r3, #0
   12830:	bne	12854 <_start@@Base+0x7ac>
   12834:	ldr	r3, [pc, #204]	; 12908 <_start@@Base+0x860>
   12838:	add	r3, pc, r3
   1283c:	ldr	r2, [pc, #200]	; 1290c <_start@@Base+0x864>
   12840:	ldr	r1, [pc, #200]	; 12910 <_start@@Base+0x868>
   12844:	add	r1, pc, r1
   12848:	ldr	r0, [pc, #196]	; 12914 <_start@@Base+0x86c>
   1284c:	add	r0, pc, r0
   12850:	bl	1209c <__assert_fail@plt>
   12854:	mov	r3, #11
   12858:	strh	r3, [fp, #-8]
   1285c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12860:	bl	12248 <_start@@Base+0x1a0>
   12864:	mov	r3, r0
   12868:	rsb	r3, r3, #0
   1286c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12870:	add	r3, r2, r3
   12874:	str	r3, [fp, #-12]
   12878:	ldr	r0, [fp, #-12]
   1287c:	bl	122a0 <_start@@Base+0x1f8>
   12880:	mov	r3, r0
   12884:	mov	r2, r3
   12888:	ldrh	r3, [fp, #-8]
   1288c:	add	r3, r3, #3
   12890:	lsl	r3, r3, #1
   12894:	cmp	r2, r3
   12898:	bcc	128c0 <_start@@Base+0x818>
   1289c:	ldrh	r3, [fp, #-8]
   128a0:	add	r3, r3, #2
   128a4:	lsl	r3, r3, #1
   128a8:	ldr	r2, [fp, #-12]
   128ac:	add	r3, r2, r3
   128b0:	mov	r0, r3
   128b4:	bl	122a0 <_start@@Base+0x1f8>
   128b8:	mov	r3, r0
   128bc:	strh	r3, [fp, #-6]
   128c0:	ldrh	r3, [fp, #-6]
   128c4:	cmp	r3, #0
   128c8:	beq	128f8 <_start@@Base+0x850>
   128cc:	ldrh	r3, [fp, #-6]
   128d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   128d4:	add	r3, r2, r3
   128d8:	str	r3, [fp, #-16]
   128dc:	ldr	r0, [fp, #-16]
   128e0:	bl	121f4 <_start@@Base+0x14c>
   128e4:	mov	r3, r0
   128e8:	add	r3, r3, #4
   128ec:	ldr	r2, [fp, #-16]
   128f0:	add	r3, r2, r3
   128f4:	b	128fc <_start@@Base+0x854>
   128f8:	mov	r3, #0
   128fc:	mov	r0, r3
   12900:	sub	sp, fp, #4
   12904:	pop	{fp, pc}
   12908:	andeq	r8, r0, r4, lsl #9
   1290c:	andeq	r0, r0, r7, asr #5
   12910:	andeq	r7, r0, r0, lsr #30
   12914:	ldrdeq	r7, [r0], -r0
   12918:	push	{fp, lr}
   1291c:	add	fp, sp, #4
   12920:	sub	sp, sp, #8
   12924:	str	r0, [fp, #-8]
   12928:	mvn	r3, #0
   1292c:	mov	r2, #1
   12930:	mov	r1, #1
   12934:	ldr	r0, [fp, #-8]
   12938:	bl	168ec <flatcc_builder_start_vector@@Base>
   1293c:	mov	r3, r0
   12940:	mov	r0, r3
   12944:	sub	sp, fp, #4
   12948:	pop	{fp, pc}
   1294c:	push	{fp, lr}
   12950:	add	fp, sp, #4
   12954:	sub	sp, sp, #8
   12958:	str	r0, [fp, #-8]
   1295c:	ldr	r0, [fp, #-8]
   12960:	bl	17b44 <flatcc_builder_end_vector@@Base>
   12964:	mov	r3, r0
   12968:	mov	r0, r3
   1296c:	sub	sp, fp, #4
   12970:	pop	{fp, pc}
   12974:	push	{fp, lr}
   12978:	add	fp, sp, #4
   1297c:	sub	sp, sp, #16
   12980:	str	r0, [fp, #-8]
   12984:	str	r1, [fp, #-12]
   12988:	str	r2, [fp, #-16]
   1298c:	ldr	r2, [fp, #-16]
   12990:	ldr	r1, [fp, #-12]
   12994:	ldr	r0, [fp, #-8]
   12998:	bl	16184 <flatcc_builder_append_vector@@Base>
   1299c:	mov	r3, r0
   129a0:	mov	r0, r3
   129a4:	sub	sp, fp, #4
   129a8:	pop	{fp, pc}
   129ac:	push	{fp, lr}
   129b0:	add	fp, sp, #4
   129b4:	sub	sp, sp, #16
   129b8:	str	r0, [fp, #-8]
   129bc:	str	r1, [fp, #-12]
   129c0:	str	r2, [fp, #-16]
   129c4:	ldr	r2, [fp, #-16]
   129c8:	ldr	r1, [fp, #-12]
   129cc:	ldr	r0, [fp, #-8]
   129d0:	bl	164ac <flatcc_builder_append_string@@Base>
   129d4:	mov	r3, r0
   129d8:	mov	r0, r3
   129dc:	sub	sp, fp, #4
   129e0:	pop	{fp, pc}
   129e4:	push	{fp, lr}
   129e8:	add	fp, sp, #4
   129ec:	sub	sp, sp, #8
   129f0:	str	r0, [fp, #-8]
   129f4:	str	r1, [fp, #-12]
   129f8:	mov	r3, #0
   129fc:	mov	r2, #0
   12a00:	ldr	r1, [fp, #-12]
   12a04:	ldr	r0, [fp, #-8]
   12a08:	bl	15b40 <flatcc_builder_start_buffer@@Base>
   12a0c:	mov	r3, r0
   12a10:	mov	r0, r3
   12a14:	sub	sp, fp, #4
   12a18:	pop	{fp, pc}
   12a1c:	push	{fp, lr}
   12a20:	add	fp, sp, #4
   12a24:	sub	sp, sp, #8
   12a28:	str	r0, [fp, #-8]
   12a2c:	str	r1, [fp, #-12]
   12a30:	ldr	r1, [fp, #-12]
   12a34:	ldr	r0, [fp, #-8]
   12a38:	bl	15c98 <flatcc_builder_end_buffer@@Base>
   12a3c:	mov	r3, r0
   12a40:	mov	r0, r3
   12a44:	sub	sp, fp, #4
   12a48:	pop	{fp, pc}
   12a4c:	push	{fp, lr}
   12a50:	add	fp, sp, #4
   12a54:	sub	sp, sp, #8
   12a58:	str	r0, [fp, #-8]
   12a5c:	mov	r1, #36	; 0x24
   12a60:	ldr	r0, [fp, #-8]
   12a64:	bl	16b84 <flatcc_builder_start_table@@Base>
   12a68:	mov	r3, r0
   12a6c:	mov	r0, r3
   12a70:	sub	sp, fp, #4
   12a74:	pop	{fp, pc}
   12a78:	push	{fp, lr}
   12a7c:	add	fp, sp, #4
   12a80:	sub	sp, sp, #8
   12a84:	str	r0, [fp, #-8]
   12a88:	mov	r2, #1
   12a8c:	ldr	r3, [pc, #80]	; 12ae4 <_start@@Base+0xa3c>
   12a90:	add	r3, pc, r3
   12a94:	mov	r1, r3
   12a98:	ldr	r0, [fp, #-8]
   12a9c:	bl	175fc <flatcc_builder_check_required@@Base>
   12aa0:	mov	r3, r0
   12aa4:	cmp	r3, #0
   12aa8:	bne	12acc <_start@@Base+0xa24>
   12aac:	ldr	r3, [pc, #52]	; 12ae8 <_start@@Base+0xa40>
   12ab0:	add	r3, pc, r3
   12ab4:	mov	r2, #235	; 0xeb
   12ab8:	ldr	r1, [pc, #44]	; 12aec <_start@@Base+0xa44>
   12abc:	add	r1, pc, r1
   12ac0:	ldr	r0, [pc, #40]	; 12af0 <_start@@Base+0xa48>
   12ac4:	add	r0, pc, r0
   12ac8:	bl	1209c <__assert_fail@plt>
   12acc:	ldr	r0, [fp, #-8]
   12ad0:	bl	176e8 <flatcc_builder_end_table@@Base>
   12ad4:	mov	r3, r0
   12ad8:	mov	r0, r3
   12adc:	sub	sp, fp, #4
   12ae0:	pop	{fp, pc}
   12ae4:	andeq	r7, r0, ip, lsl #28
   12ae8:	andeq	r8, r0, r4, ror r1
   12aec:	andeq	r7, r0, r4, ror #27
   12af0:	andeq	r7, r0, r4, asr lr
   12af4:	push	{fp, lr}
   12af8:	add	fp, sp, #4
   12afc:	sub	sp, sp, #8
   12b00:	str	r0, [fp, #-8]
   12b04:	ldr	r0, [fp, #-8]
   12b08:	bl	16998 <flatcc_builder_start_offset_vector@@Base>
   12b0c:	mov	r3, r0
   12b10:	mov	r0, r3
   12b14:	sub	sp, fp, #4
   12b18:	pop	{fp, pc}
   12b1c:	push	{fp, lr}
   12b20:	add	fp, sp, #4
   12b24:	sub	sp, sp, #8
   12b28:	str	r0, [fp, #-8]
   12b2c:	ldr	r0, [fp, #-8]
   12b30:	bl	17fec <flatcc_builder_end_offset_vector@@Base>
   12b34:	mov	r3, r0
   12b38:	mov	r0, r3
   12b3c:	sub	sp, fp, #4
   12b40:	pop	{fp, pc}
   12b44:	push	{fp, lr}
   12b48:	add	fp, sp, #4
   12b4c:	sub	sp, sp, #8
   12b50:	str	r0, [fp, #-8]
   12b54:	str	r1, [fp, #-12]
   12b58:	ldr	r3, [fp, #-12]
   12b5c:	cmp	r3, #0
   12b60:	beq	12b78 <_start@@Base+0xad0>
   12b64:	ldr	r1, [fp, #-12]
   12b68:	ldr	r0, [fp, #-8]
   12b6c:	bl	162a0 <flatcc_builder_offset_vector_push@@Base>
   12b70:	mov	r3, r0
   12b74:	b	12b7c <_start@@Base+0xad4>
   12b78:	mov	r3, #0
   12b7c:	mov	r0, r3
   12b80:	sub	sp, fp, #4
   12b84:	pop	{fp, pc}
   12b88:	push	{fp, lr}
   12b8c:	add	fp, sp, #4
   12b90:	sub	sp, sp, #16
   12b94:	str	r0, [fp, #-16]
   12b98:	str	r1, [fp, #-20]	; 0xffffffec
   12b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ba0:	cmp	r3, #0
   12ba4:	beq	12bd8 <_start@@Base+0xb30>
   12ba8:	mov	r1, #3
   12bac:	ldr	r0, [fp, #-16]
   12bb0:	bl	192d4 <flatcc_builder_table_add_offset@@Base>
   12bb4:	str	r0, [fp, #-8]
   12bb8:	ldr	r3, [fp, #-8]
   12bbc:	cmp	r3, #0
   12bc0:	beq	12bd8 <_start@@Base+0xb30>
   12bc4:	ldr	r3, [fp, #-8]
   12bc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12bcc:	str	r2, [r3]
   12bd0:	mov	r3, #0
   12bd4:	b	12bdc <_start@@Base+0xb34>
   12bd8:	mvn	r3, #0
   12bdc:	mov	r0, r3
   12be0:	sub	sp, fp, #4
   12be4:	pop	{fp, pc}
   12be8:	push	{fp, lr}
   12bec:	add	fp, sp, #4
   12bf0:	sub	sp, sp, #8
   12bf4:	str	r0, [fp, #-8]
   12bf8:	ldr	r0, [fp, #-8]
   12bfc:	bl	16a9c <flatcc_builder_start_string@@Base>
   12c00:	mov	r3, r0
   12c04:	mov	r0, r3
   12c08:	sub	sp, fp, #4
   12c0c:	pop	{fp, pc}
   12c10:	push	{fp, lr}
   12c14:	add	fp, sp, #4
   12c18:	sub	sp, sp, #8
   12c1c:	str	r0, [fp, #-8]
   12c20:	ldr	r0, [fp, #-8]
   12c24:	bl	18f38 <flatcc_builder_end_string@@Base>
   12c28:	mov	r3, r0
   12c2c:	mov	r1, r3
   12c30:	ldr	r0, [fp, #-8]
   12c34:	bl	12b88 <_start@@Base+0xae0>
   12c38:	mov	r3, r0
   12c3c:	mov	r0, r3
   12c40:	sub	sp, fp, #4
   12c44:	pop	{fp, pc}
   12c48:	push	{fp, lr}
   12c4c:	add	fp, sp, #4
   12c50:	sub	sp, sp, #8
   12c54:	str	r0, [fp, #-8]
   12c58:	str	r1, [fp, #-12]
   12c5c:	ldr	r1, [fp, #-12]
   12c60:	ldr	r0, [fp, #-8]
   12c64:	bl	18eb0 <flatcc_builder_create_string_str@@Base>
   12c68:	mov	r3, r0
   12c6c:	mov	r1, r3
   12c70:	ldr	r0, [fp, #-8]
   12c74:	bl	12b88 <_start@@Base+0xae0>
   12c78:	mov	r3, r0
   12c7c:	mov	r0, r3
   12c80:	sub	sp, fp, #4
   12c84:	pop	{fp, pc}
   12c88:	push	{fp, lr}
   12c8c:	add	fp, sp, #4
   12c90:	sub	sp, sp, #16
   12c94:	str	r0, [fp, #-16]
   12c98:	str	r1, [fp, #-20]	; 0xffffffec
   12c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ca0:	cmp	r3, #0
   12ca4:	beq	12cd8 <_start@@Base+0xc30>
   12ca8:	mov	r1, #5
   12cac:	ldr	r0, [fp, #-16]
   12cb0:	bl	192d4 <flatcc_builder_table_add_offset@@Base>
   12cb4:	str	r0, [fp, #-8]
   12cb8:	ldr	r3, [fp, #-8]
   12cbc:	cmp	r3, #0
   12cc0:	beq	12cd8 <_start@@Base+0xc30>
   12cc4:	ldr	r3, [fp, #-8]
   12cc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ccc:	str	r2, [r3]
   12cd0:	mov	r3, #0
   12cd4:	b	12cdc <_start@@Base+0xc34>
   12cd8:	mvn	r3, #0
   12cdc:	mov	r0, r3
   12ce0:	sub	sp, fp, #4
   12ce4:	pop	{fp, pc}
   12ce8:	push	{fp, lr}
   12cec:	add	fp, sp, #4
   12cf0:	sub	sp, sp, #8
   12cf4:	str	r0, [fp, #-8]
   12cf8:	ldr	r0, [fp, #-8]
   12cfc:	bl	12918 <_start@@Base+0x870>
   12d00:	mov	r3, r0
   12d04:	mov	r0, r3
   12d08:	sub	sp, fp, #4
   12d0c:	pop	{fp, pc}
   12d10:	push	{fp, lr}
   12d14:	add	fp, sp, #4
   12d18:	sub	sp, sp, #8
   12d1c:	str	r0, [fp, #-8]
   12d20:	ldr	r0, [fp, #-8]
   12d24:	bl	1294c <_start@@Base+0x8a4>
   12d28:	mov	r3, r0
   12d2c:	mov	r1, r3
   12d30:	ldr	r0, [fp, #-8]
   12d34:	bl	12c88 <_start@@Base+0xbe0>
   12d38:	mov	r3, r0
   12d3c:	mov	r0, r3
   12d40:	sub	sp, fp, #4
   12d44:	pop	{fp, pc}
   12d48:	push	{fp, lr}
   12d4c:	add	fp, sp, #4
   12d50:	sub	sp, sp, #16
   12d54:	str	r0, [fp, #-16]
   12d58:	str	r1, [fp, #-20]	; 0xffffffec
   12d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d60:	cmp	r3, #0
   12d64:	beq	12d98 <_start@@Base+0xcf0>
   12d68:	mov	r1, #11
   12d6c:	ldr	r0, [fp, #-16]
   12d70:	bl	192d4 <flatcc_builder_table_add_offset@@Base>
   12d74:	str	r0, [fp, #-8]
   12d78:	ldr	r3, [fp, #-8]
   12d7c:	cmp	r3, #0
   12d80:	beq	12d98 <_start@@Base+0xcf0>
   12d84:	ldr	r3, [fp, #-8]
   12d88:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d8c:	str	r2, [r3]
   12d90:	mov	r3, #0
   12d94:	b	12d9c <_start@@Base+0xcf4>
   12d98:	mvn	r3, #0
   12d9c:	mov	r0, r3
   12da0:	sub	sp, fp, #4
   12da4:	pop	{fp, pc}
   12da8:	push	{fp, lr}
   12dac:	add	fp, sp, #4
   12db0:	sub	sp, sp, #8
   12db4:	str	r0, [fp, #-8]
   12db8:	ldr	r3, [pc, #56]	; 12df8 <_start@@Base+0xd50>
   12dbc:	add	r3, pc, r3
   12dc0:	mov	r1, r3
   12dc4:	ldr	r0, [fp, #-8]
   12dc8:	bl	129e4 <_start@@Base+0x93c>
   12dcc:	mov	r3, r0
   12dd0:	cmp	r3, #0
   12dd4:	bne	12de8 <_start@@Base+0xd40>
   12dd8:	ldr	r0, [fp, #-8]
   12ddc:	bl	12a4c <_start@@Base+0x9a4>
   12de0:	mov	r3, r0
   12de4:	b	12dec <_start@@Base+0xd44>
   12de8:	mvn	r3, #0
   12dec:	mov	r0, r3
   12df0:	sub	sp, fp, #4
   12df4:	pop	{fp, pc}
   12df8:	andeq	r7, r0, r8, asr sl
   12dfc:	push	{fp, lr}
   12e00:	add	fp, sp, #4
   12e04:	sub	sp, sp, #8
   12e08:	str	r0, [fp, #-8]
   12e0c:	ldr	r0, [fp, #-8]
   12e10:	bl	12a78 <_start@@Base+0x9d0>
   12e14:	mov	r3, r0
   12e18:	mov	r1, r3
   12e1c:	ldr	r0, [fp, #-8]
   12e20:	bl	12a1c <_start@@Base+0x974>
   12e24:	mov	r3, r0
   12e28:	mov	r0, r3
   12e2c:	sub	sp, fp, #4
   12e30:	pop	{fp, pc}
   12e34:	push	{fp, lr}
   12e38:	add	fp, sp, #4
   12e3c:	sub	sp, sp, #8
   12e40:	sub	r3, fp, #12
   12e44:	mov	r1, #0
   12e48:	mov	r0, r3
   12e4c:	bl	1200c <gettimeofday@plt>
   12e50:	ldr	r3, [pc, #128]	; 12ed8 <_start@@Base+0xe30>
   12e54:	add	r3, pc, r3
   12e58:	ldr	r3, [r3]
   12e5c:	cmp	r3, #0
   12e60:	bne	12e7c <_start@@Base+0xdd4>
   12e64:	ldr	r3, [pc, #112]	; 12edc <_start@@Base+0xe34>
   12e68:	add	r3, pc, r3
   12e6c:	mov	r2, r3
   12e70:	sub	r3, fp, #12
   12e74:	ldm	r3, {r0, r1}
   12e78:	stm	r2, {r0, r1}
   12e7c:	ldr	r2, [fp, #-12]
   12e80:	ldr	r3, [pc, #88]	; 12ee0 <_start@@Base+0xe38>
   12e84:	add	r3, pc, r3
   12e88:	ldr	r3, [r3]
   12e8c:	sub	r3, r2, r3
   12e90:	vmov	s15, r3
   12e94:	vcvt.f64.s32	d6, s15
   12e98:	ldr	r2, [fp, #-8]
   12e9c:	ldr	r3, [pc, #64]	; 12ee4 <_start@@Base+0xe3c>
   12ea0:	add	r3, pc, r3
   12ea4:	ldr	r3, [r3, #4]
   12ea8:	sub	r3, r2, r3
   12eac:	vmov	s15, r3
   12eb0:	vcvt.f64.s32	d5, s15
   12eb4:	vldr	d4, [pc, #20]	; 12ed0 <_start@@Base+0xe28>
   12eb8:	vdiv.f64	d7, d5, d4
   12ebc:	vadd.f64	d7, d6, d7
   12ec0:	vmov.f64	d0, d7
   12ec4:	sub	sp, fp, #4
   12ec8:	pop	{fp, pc}
   12ecc:	nop			; (mov r0, r0)
   12ed0:	andeq	r0, r0, r0
   12ed4:	smlawbmi	lr, r0, r4, r8
   12ed8:	andeq	r9, r1, r0, lsl r6
   12edc:	strdeq	r9, [r1], -ip
   12ee0:	andeq	r9, r1, r0, ror #11
   12ee4:	andeq	r9, r1, r4, asr #11
   12ee8:	push	{fp, lr}
   12eec:	add	fp, sp, #4
   12ef0:	sub	sp, sp, #48	; 0x30
   12ef4:	str	r0, [fp, #-24]	; 0xffffffe8
   12ef8:	vstr	d0, [fp, #-36]	; 0xffffffdc
   12efc:	vstr	d1, [fp, #-44]	; 0xffffffd4
   12f00:	str	r1, [fp, #-28]	; 0xffffffe4
   12f04:	str	r2, [fp, #-48]	; 0xffffffd0
   12f08:	str	r3, [fp, #-52]	; 0xffffffcc
   12f0c:	vldr	d6, [fp, #-44]	; 0xffffffd4
   12f10:	vldr	d7, [fp, #-36]	; 0xffffffdc
   12f14:	vsub.f64	d7, d6, d7
   12f18:	vstr	d7, [fp, #-12]
   12f1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12f20:	ldr	r3, [pc, #496]	; 13118 <_start@@Base+0x1070>
   12f24:	add	r3, pc, r3
   12f28:	mov	r0, r3
   12f2c:	bl	11fb8 <printf@plt>
   12f30:	ldrd	r2, [fp, #-12]
   12f34:	ldr	r1, [pc, #480]	; 1311c <_start@@Base+0x1074>
   12f38:	add	r1, pc, r1
   12f3c:	mov	r0, r1
   12f40:	bl	11fb8 <printf@plt>
   12f44:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12f48:	ldr	r3, [pc, #464]	; 13120 <_start@@Base+0x1078>
   12f4c:	add	r3, pc, r3
   12f50:	mov	r0, r3
   12f54:	bl	11fb8 <printf@plt>
   12f58:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12f5c:	ldr	r3, [pc, #448]	; 13124 <_start@@Base+0x107c>
   12f60:	add	r3, pc, r3
   12f64:	mov	r0, r3
   12f68:	bl	11fb8 <printf@plt>
   12f6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f70:	vmov	s15, r3
   12f74:	vcvt.f64.s32	d6, s15
   12f78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12f7c:	vmov	s15, r3
   12f80:	vcvt.f64.u32	d7, s15
   12f84:	vmul.f64	d7, d6, d7
   12f88:	vldr	d5, [pc, #360]	; 130f8 <_start@@Base+0x1050>
   12f8c:	vdiv.f64	d6, d7, d5
   12f90:	vldr	d7, [fp, #-12]
   12f94:	vdiv.f64	d5, d6, d7
   12f98:	vmov	r2, r3, d5
   12f9c:	ldr	r1, [pc, #388]	; 13128 <_start@@Base+0x1080>
   12fa0:	add	r1, pc, r1
   12fa4:	mov	r0, r1
   12fa8:	bl	11fb8 <printf@plt>
   12fac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12fb0:	vmov	s15, r3
   12fb4:	vcvt.f64.s32	d6, s15
   12fb8:	vldr	d7, [fp, #-12]
   12fbc:	vdiv.f64	d5, d6, d7
   12fc0:	vmov	r2, r3, d5
   12fc4:	ldr	r1, [pc, #352]	; 1312c <_start@@Base+0x1084>
   12fc8:	add	r1, pc, r1
   12fcc:	mov	r0, r1
   12fd0:	bl	11fb8 <printf@plt>
   12fd4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12fd8:	cmp	r3, #0
   12fdc:	beq	1300c <_start@@Base+0xf64>
   12fe0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12fe4:	cmp	r3, #1
   12fe8:	beq	1300c <_start@@Base+0xf64>
   12fec:	vldr	d6, [pc, #268]	; 13100 <_start@@Base+0x1058>
   12ff0:	vldr	d7, [fp, #-12]
   12ff4:	vdiv.f64	d5, d6, d7
   12ff8:	vmov	r2, r3, d5
   12ffc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13000:	ldr	r0, [pc, #296]	; 13130 <_start@@Base+0x1088>
   13004:	add	r0, pc, r0
   13008:	bl	11fb8 <printf@plt>
   1300c:	vldr	d7, [fp, #-12]
   13010:	vldr	d6, [pc, #240]	; 13108 <_start@@Base+0x1060>
   13014:	vmul.f64	d5, d7, d6
   13018:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1301c:	vmov	s15, r3
   13020:	vcvt.f64.s32	d6, s15
   13024:	vdiv.f64	d7, d5, d6
   13028:	vstr	d7, [fp, #-20]	; 0xffffffec
   1302c:	vldr	d7, [fp, #-20]	; 0xffffffec
   13030:	vldr	d6, [pc, #216]	; 13110 <_start@@Base+0x1068>
   13034:	vcmpe.f64	d7, d6
   13038:	vmrs	APSR_nzcv, fpscr
   1303c:	bpl	13058 <_start@@Base+0xfb0>
   13040:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13044:	ldr	r1, [pc, #232]	; 13134 <_start@@Base+0x108c>
   13048:	add	r1, pc, r1
   1304c:	mov	r0, r1
   13050:	bl	11fb8 <printf@plt>
   13054:	b	130e8 <_start@@Base+0x1040>
   13058:	vldr	d7, [fp, #-20]	; 0xffffffec
   1305c:	vldr	d6, [pc, #148]	; 130f8 <_start@@Base+0x1050>
   13060:	vcmpe.f64	d7, d6
   13064:	vmrs	APSR_nzcv, fpscr
   13068:	bpl	13090 <_start@@Base+0xfe8>
   1306c:	vldr	d7, [fp, #-20]	; 0xffffffec
   13070:	vldr	d6, [pc, #152]	; 13110 <_start@@Base+0x1068>
   13074:	vdiv.f64	d5, d7, d6
   13078:	vmov	r2, r3, d5
   1307c:	ldr	r1, [pc, #180]	; 13138 <_start@@Base+0x1090>
   13080:	add	r1, pc, r1
   13084:	mov	r0, r1
   13088:	bl	11fb8 <printf@plt>
   1308c:	b	130e8 <_start@@Base+0x1040>
   13090:	vldr	d7, [fp, #-20]	; 0xffffffec
   13094:	vldr	d6, [pc, #108]	; 13108 <_start@@Base+0x1060>
   13098:	vcmpe.f64	d7, d6
   1309c:	vmrs	APSR_nzcv, fpscr
   130a0:	bpl	130c8 <_start@@Base+0x1020>
   130a4:	vldr	d7, [fp, #-20]	; 0xffffffec
   130a8:	vldr	d6, [pc, #72]	; 130f8 <_start@@Base+0x1050>
   130ac:	vdiv.f64	d5, d7, d6
   130b0:	vmov	r2, r3, d5
   130b4:	ldr	r1, [pc, #128]	; 1313c <_start@@Base+0x1094>
   130b8:	add	r1, pc, r1
   130bc:	mov	r0, r1
   130c0:	bl	11fb8 <printf@plt>
   130c4:	b	130e8 <_start@@Base+0x1040>
   130c8:	vldr	d7, [fp, #-20]	; 0xffffffec
   130cc:	vldr	d6, [pc, #52]	; 13108 <_start@@Base+0x1060>
   130d0:	vdiv.f64	d5, d7, d6
   130d4:	vmov	r2, r3, d5
   130d8:	ldr	r1, [pc, #96]	; 13140 <_start@@Base+0x1098>
   130dc:	add	r1, pc, r1
   130e0:	mov	r0, r1
   130e4:	bl	11fb8 <printf@plt>
   130e8:	mov	r3, #0
   130ec:	mov	r0, r3
   130f0:	sub	sp, fp, #4
   130f4:	pop	{fp, pc}
   130f8:	andeq	r0, r0, r0
   130fc:	smlawbmi	lr, r0, r4, r8
   13100:	andeq	r0, r0, r0
   13104:	svccc	0x00f00000	; IMB
   13108:	andeq	r0, r0, r0
   1310c:	bicmi	ip, sp, r5, ror #26
   13110:	andeq	r0, r0, r0
   13114:	addmi	r4, pc, r0
   13118:	andeq	r7, r0, r4, lsr #21
   1311c:	andeq	r7, r0, r0, lsr #21
   13120:	andeq	r7, r0, r4, lsr #21
   13124:	andeq	r7, r0, r0, lsr #21
   13128:	andeq	r7, r0, r4, ror sl
   1312c:	andeq	r7, r0, r4, ror #20
   13130:	andeq	r7, r0, ip, asr #20
   13134:	andeq	r7, r0, ip, lsr #20
   13138:	andeq	r7, r0, ip, lsl #20
   1313c:	andeq	r7, r0, ip, ror #19
   13140:	andeq	r7, r0, r0, ror #19
   13144:	push	{fp, lr}
   13148:	add	fp, sp, #4
   1314c:	sub	sp, sp, #16
   13150:	str	r0, [fp, #-16]
   13154:	ldr	r0, [fp, #-16]
   13158:	bl	12a4c <_start@@Base+0x9a4>
   1315c:	ldr	r0, [fp, #-16]
   13160:	bl	12be8 <_start@@Base+0xb40>
   13164:	mov	r3, #0
   13168:	str	r3, [fp, #-8]
   1316c:	b	13194 <_start@@Base+0x10ec>
   13170:	mov	r2, #7
   13174:	ldr	r3, [pc, #144]	; 1320c <_start@@Base+0x1164>
   13178:	add	r3, pc, r3
   1317c:	mov	r1, r3
   13180:	ldr	r0, [fp, #-16]
   13184:	bl	129ac <_start@@Base+0x904>
   13188:	ldr	r3, [fp, #-8]
   1318c:	add	r3, r3, #1
   13190:	str	r3, [fp, #-8]
   13194:	ldr	r3, [fp, #-8]
   13198:	cmp	r3, #99	; 0x63
   1319c:	bls	13170 <_start@@Base+0x10c8>
   131a0:	ldr	r0, [fp, #-16]
   131a4:	bl	12c10 <_start@@Base+0xb68>
   131a8:	ldr	r0, [fp, #-16]
   131ac:	bl	12ce8 <_start@@Base+0xc40>
   131b0:	mov	r3, #0
   131b4:	str	r3, [fp, #-8]
   131b8:	b	131e0 <_start@@Base+0x1138>
   131bc:	mov	r2, #1000	; 0x3e8
   131c0:	ldr	r3, [pc, #72]	; 13210 <_start@@Base+0x1168>
   131c4:	add	r3, pc, r3
   131c8:	mov	r1, r3
   131cc:	ldr	r0, [fp, #-16]
   131d0:	bl	12974 <_start@@Base+0x8cc>
   131d4:	ldr	r3, [fp, #-8]
   131d8:	add	r3, r3, #1
   131dc:	str	r3, [fp, #-8]
   131e0:	ldr	r3, [fp, #-8]
   131e4:	cmp	r3, #99	; 0x63
   131e8:	bls	131bc <_start@@Base+0x1114>
   131ec:	ldr	r0, [fp, #-16]
   131f0:	bl	12d10 <_start@@Base+0xc68>
   131f4:	ldr	r0, [fp, #-16]
   131f8:	bl	12a78 <_start@@Base+0x9d0>
   131fc:	mov	r3, r0
   13200:	mov	r0, r3
   13204:	sub	sp, fp, #4
   13208:	pop	{fp, pc}
   1320c:	andeq	r7, r0, ip, asr r9
   13210:			; <UNDEFINED> instruction: 0x00018eb8
   13214:	push	{fp, lr}
   13218:	add	fp, sp, #4
   1321c:	sub	sp, sp, #16
   13220:	str	r0, [fp, #-16]
   13224:	ldr	r0, [fp, #-16]
   13228:	bl	12af4 <_start@@Base+0xa4c>
   1322c:	mov	r3, #0
   13230:	str	r3, [fp, #-8]
   13234:	b	13288 <_start@@Base+0x11e0>
   13238:	ldr	r0, [fp, #-16]
   1323c:	bl	13144 <_start@@Base+0x109c>
   13240:	str	r0, [fp, #-12]
   13244:	ldr	r3, [fp, #-12]
   13248:	cmp	r3, #0
   1324c:	bne	13270 <_start@@Base+0x11c8>
   13250:	ldr	r3, [pc, #84]	; 132ac <_start@@Base+0x1204>
   13254:	add	r3, pc, r3
   13258:	mov	r2, #42	; 0x2a
   1325c:	ldr	r1, [pc, #76]	; 132b0 <_start@@Base+0x1208>
   13260:	add	r1, pc, r1
   13264:	ldr	r0, [pc, #72]	; 132b4 <_start@@Base+0x120c>
   13268:	add	r0, pc, r0
   1326c:	bl	1209c <__assert_fail@plt>
   13270:	ldr	r1, [fp, #-12]
   13274:	ldr	r0, [fp, #-16]
   13278:	bl	12b44 <_start@@Base+0xa9c>
   1327c:	ldr	r3, [fp, #-8]
   13280:	add	r3, r3, #1
   13284:	str	r3, [fp, #-8]
   13288:	ldr	r3, [fp, #-8]
   1328c:	cmp	r3, #1000	; 0x3e8
   13290:	bcc	13238 <_start@@Base+0x1190>
   13294:	ldr	r0, [fp, #-16]
   13298:	bl	12b1c <_start@@Base+0xa74>
   1329c:	mov	r3, r0
   132a0:	mov	r0, r3
   132a4:	sub	sp, fp, #4
   132a8:	pop	{fp, pc}
   132ac:	andeq	r7, r0, ip, ror #19
   132b0:	andeq	r7, r0, ip, ror r8
   132b4:	ldrdeq	r7, [r0], -r8
   132b8:	push	{fp, lr}
   132bc:	add	fp, sp, #4
   132c0:	sub	sp, sp, #16
   132c4:	str	r0, [fp, #-16]
   132c8:	ldr	r0, [fp, #-16]
   132cc:	bl	148a4 <flatcc_builder_reset@@Base>
   132d0:	ldr	r0, [fp, #-16]
   132d4:	bl	12da8 <_start@@Base+0xd00>
   132d8:	ldr	r3, [pc, #104]	; 13348 <_start@@Base+0x12a0>
   132dc:	add	r3, pc, r3
   132e0:	mov	r1, r3
   132e4:	ldr	r0, [fp, #-16]
   132e8:	bl	12c48 <_start@@Base+0xba0>
   132ec:	ldr	r0, [fp, #-16]
   132f0:	bl	13214 <_start@@Base+0x116c>
   132f4:	str	r0, [fp, #-8]
   132f8:	ldr	r3, [fp, #-8]
   132fc:	cmp	r3, #0
   13300:	bne	13324 <_start@@Base+0x127c>
   13304:	ldr	r3, [pc, #64]	; 1334c <_start@@Base+0x12a4>
   13308:	add	r3, pc, r3
   1330c:	mov	r2, #56	; 0x38
   13310:	ldr	r1, [pc, #56]	; 13350 <_start@@Base+0x12a8>
   13314:	add	r1, pc, r1
   13318:	ldr	r0, [pc, #52]	; 13354 <_start@@Base+0x12ac>
   1331c:	add	r0, pc, r0
   13320:	bl	1209c <__assert_fail@plt>
   13324:	ldr	r1, [fp, #-8]
   13328:	ldr	r0, [fp, #-16]
   1332c:	bl	12d48 <_start@@Base+0xca0>
   13330:	ldr	r0, [fp, #-16]
   13334:	bl	12dfc <_start@@Base+0xd54>
   13338:	mov	r3, #0
   1333c:	mov	r0, r3
   13340:	sub	sp, fp, #4
   13344:	pop	{fp, pc}
   13348:	andeq	r7, r0, r8, ror #16
   1334c:	andeq	r7, r0, r8, asr #18
   13350:	andeq	r7, r0, r8, asr #15
   13354:	andeq	r7, r0, r8, lsr r8
   13358:	push	{fp, lr}
   1335c:	add	fp, sp, #4
   13360:	sub	sp, sp, #24
   13364:	str	r0, [fp, #-24]	; 0xffffffe8
   13368:	str	r1, [fp, #-28]	; 0xffffffe4
   1336c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13370:	bl	125d8 <_start@@Base+0x530>
   13374:	str	r0, [fp, #-12]
   13378:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1337c:	bl	12708 <_start@@Base+0x660>
   13380:	str	r0, [fp, #-16]
   13384:	ldr	r0, [fp, #-12]
   13388:	bl	1238c <_start@@Base+0x2e4>
   1338c:	mov	r3, r0
   13390:	cmp	r3, #700	; 0x2bc
   13394:	beq	133b8 <_start@@Base+0x1310>
   13398:	ldr	r3, [pc, #448]	; 13560 <_start@@Base+0x14b8>
   1339c:	add	r3, pc, r3
   133a0:	mov	r2, #74	; 0x4a
   133a4:	ldr	r1, [pc, #440]	; 13564 <_start@@Base+0x14bc>
   133a8:	add	r1, pc, r1
   133ac:	ldr	r0, [pc, #436]	; 13568 <_start@@Base+0x14c0>
   133b0:	add	r0, pc, r0
   133b4:	bl	1209c <__assert_fail@plt>
   133b8:	ldr	r0, [fp, #-16]
   133bc:	bl	123d0 <_start@@Base+0x328>
   133c0:	mov	r2, r0
   133c4:	ldr	r3, [pc, #416]	; 1356c <_start@@Base+0x14c4>
   133c8:	cmp	r2, r3
   133cc:	beq	133f0 <_start@@Base+0x1348>
   133d0:	ldr	r3, [pc, #408]	; 13570 <_start@@Base+0x14c8>
   133d4:	add	r3, pc, r3
   133d8:	mov	r2, #78	; 0x4e
   133dc:	ldr	r1, [pc, #400]	; 13574 <_start@@Base+0x14cc>
   133e0:	add	r1, pc, r1
   133e4:	ldr	r0, [pc, #396]	; 13578 <_start@@Base+0x14d0>
   133e8:	add	r0, pc, r0
   133ec:	bl	1209c <__assert_fail@plt>
   133f0:	mov	r3, #0
   133f4:	str	r3, [fp, #-8]
   133f8:	b	134cc <_start@@Base+0x1424>
   133fc:	ldr	r2, [fp, #-8]
   13400:	mov	r3, r2
   13404:	lsl	r3, r3, #3
   13408:	sub	r3, r3, r2
   1340c:	ldr	r2, [fp, #-12]
   13410:	add	r3, r2, r3
   13414:	mov	r2, #7
   13418:	ldr	r1, [pc, #348]	; 1357c <_start@@Base+0x14d4>
   1341c:	add	r1, pc, r1
   13420:	mov	r0, r3
   13424:	bl	11fe8 <memcmp@plt>
   13428:	mov	r3, r0
   1342c:	cmp	r3, #0
   13430:	beq	134c0 <_start@@Base+0x1418>
   13434:	ldr	r3, [fp, #-12]
   13438:	cmp	r3, #0
   1343c:	beq	13448 <_start@@Base+0x13a0>
   13440:	ldr	r3, [fp, #-12]
   13444:	b	13450 <_start@@Base+0x13a8>
   13448:	ldr	r3, [pc, #304]	; 13580 <_start@@Base+0x14d8>
   1344c:	add	r3, pc, r3
   13450:	mov	r2, r3
   13454:	ldr	r1, [fp, #-8]
   13458:	ldr	r3, [pc, #292]	; 13584 <_start@@Base+0x14dc>
   1345c:	add	r3, pc, r3
   13460:	mov	r0, r3
   13464:	bl	11fb8 <printf@plt>
   13468:	ldr	r2, [fp, #-8]
   1346c:	mov	r3, r2
   13470:	lsl	r3, r3, #3
   13474:	sub	r3, r3, r2
   13478:	ldr	r2, [fp, #-12]
   1347c:	add	r3, r2, r3
   13480:	mov	r2, r3
   13484:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13488:	sub	r3, r2, r3
   1348c:	mov	r1, r3
   13490:	ldr	r3, [pc, #240]	; 13588 <_start@@Base+0x14e0>
   13494:	add	r3, pc, r3
   13498:	mov	r0, r3
   1349c:	bl	11fb8 <printf@plt>
   134a0:	ldr	r3, [pc, #228]	; 1358c <_start@@Base+0x14e4>
   134a4:	add	r3, pc, r3
   134a8:	mov	r2, #85	; 0x55
   134ac:	ldr	r1, [pc, #220]	; 13590 <_start@@Base+0x14e8>
   134b0:	add	r1, pc, r1
   134b4:	ldr	r0, [pc, #216]	; 13594 <_start@@Base+0x14ec>
   134b8:	add	r0, pc, r0
   134bc:	bl	1209c <__assert_fail@plt>
   134c0:	ldr	r3, [fp, #-8]
   134c4:	add	r3, r3, #1
   134c8:	str	r3, [fp, #-8]
   134cc:	ldr	r3, [fp, #-8]
   134d0:	cmp	r3, #99	; 0x63
   134d4:	bls	133fc <_start@@Base+0x1354>
   134d8:	mov	r3, #0
   134dc:	str	r3, [fp, #-8]
   134e0:	b	13544 <_start@@Base+0x149c>
   134e4:	ldr	r3, [fp, #-8]
   134e8:	mov	r2, #1000	; 0x3e8
   134ec:	mul	r3, r2, r3
   134f0:	ldr	r2, [fp, #-16]
   134f4:	add	r3, r2, r3
   134f8:	mov	r2, #1000	; 0x3e8
   134fc:	ldr	r1, [pc, #148]	; 13598 <_start@@Base+0x14f0>
   13500:	add	r1, pc, r1
   13504:	mov	r0, r3
   13508:	bl	11fe8 <memcmp@plt>
   1350c:	mov	r3, r0
   13510:	cmp	r3, #0
   13514:	beq	13538 <_start@@Base+0x1490>
   13518:	ldr	r3, [pc, #124]	; 1359c <_start@@Base+0x14f4>
   1351c:	add	r3, pc, r3
   13520:	mov	r2, #91	; 0x5b
   13524:	ldr	r1, [pc, #116]	; 135a0 <_start@@Base+0x14f8>
   13528:	add	r1, pc, r1
   1352c:	ldr	r0, [pc, #112]	; 135a4 <_start@@Base+0x14fc>
   13530:	add	r0, pc, r0
   13534:	bl	1209c <__assert_fail@plt>
   13538:	ldr	r3, [fp, #-8]
   1353c:	add	r3, r3, #1
   13540:	str	r3, [fp, #-8]
   13544:	ldr	r3, [fp, #-8]
   13548:	cmp	r3, #99	; 0x63
   1354c:	bls	134e4 <_start@@Base+0x143c>
   13550:	mov	r3, #0
   13554:	mov	r0, r3
   13558:	sub	sp, fp, #4
   1355c:	pop	{fp, pc}
   13560:	andeq	r7, r0, r8, asr #17
   13564:	andeq	r7, r0, r4, lsr r7
   13568:	andeq	r7, r0, r8, lsr #15
   1356c:	andeq	r8, r1, r0, lsr #13
   13570:	muleq	r0, r0, r8
   13574:	strdeq	r7, [r0], -ip
   13578:	andeq	r7, r0, r0, ror r7
   1357c:			; <UNDEFINED> instruction: 0x000076b8
   13580:	andeq	r7, r0, r0, lsl r7
   13584:	andeq	r7, r0, r8, lsl #14
   13588:	strdeq	r7, [r0], -r0
   1358c:	andeq	r7, r0, r0, asr #15
   13590:	andeq	r7, r0, ip, lsr #12
   13594:	andeq	r7, r0, r0, lsr #13
   13598:	andeq	r8, r1, ip, ror fp
   1359c:	andeq	r7, r0, r8, asr #14
   135a0:			; <UNDEFINED> instruction: 0x000075b4
   135a4:	andeq	r7, r0, r8, lsr #12

000135a8 <main@@Base>:
   135a8:	push	{fp, lr}
   135ac:	add	fp, sp, #4
   135b0:	sub	sp, sp, #304	; 0x130
   135b4:	str	r0, [fp, #-304]	; 0xfffffed0
   135b8:	str	r1, [fp, #-308]	; 0xfffffecc
   135bc:	mov	r3, #10
   135c0:	str	r3, [fp, #-20]	; 0xffffffec
   135c4:	mov	r3, #0
   135c8:	str	r3, [fp, #-12]
   135cc:	sub	r3, fp, #296	; 0x128
   135d0:	str	r3, [fp, #-24]	; 0xffffffe8
   135d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135d8:	bl	14620 <flatcc_builder_init@@Base>
   135dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135e0:	bl	132b8 <_start@@Base+0x1210>
   135e4:	sub	r3, fp, #64	; 0x40
   135e8:	mov	r1, r3
   135ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135f0:	bl	19888 <flatcc_builder_finalize_buffer@@Base>
   135f4:	str	r0, [fp, #-28]	; 0xffffffe4
   135f8:	ldr	r3, [pc, #704]	; 138c0 <main@@Base+0x318>
   135fc:	add	r3, pc, r3
   13600:	mov	r1, r3
   13604:	ldr	r3, [pc, #696]	; 138c4 <main@@Base+0x31c>
   13608:	add	r3, pc, r3
   1360c:	mov	r0, r3
   13610:	bl	11fc4 <fopen@plt>
   13614:	str	r0, [fp, #-32]	; 0xffffffe0
   13618:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1361c:	cmp	r3, #0
   13620:	bne	13630 <main@@Base+0x88>
   13624:	mvn	r3, #0
   13628:	str	r3, [fp, #-12]
   1362c:	b	13884 <main@@Base+0x2dc>
   13630:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13634:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13638:	mov	r1, #1
   1363c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13640:	bl	12000 <fwrite@plt>
   13644:	mov	r2, r0
   13648:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1364c:	cmp	r2, r3
   13650:	movne	r3, #1
   13654:	moveq	r3, #0
   13658:	uxtb	r3, r3
   1365c:	mov	r2, r3
   13660:	ldr	r3, [fp, #-12]
   13664:	orr	r3, r3, r2
   13668:	str	r3, [fp, #-12]
   1366c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13670:	bl	12084 <fclose@plt>
   13674:	ldr	r3, [fp, #-12]
   13678:	cmp	r3, #0
   1367c:	bne	13878 <main@@Base+0x2d0>
   13680:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13684:	mov	r1, r3
   13688:	ldr	r3, [pc, #568]	; 138c8 <main@@Base+0x320>
   1368c:	add	r3, pc, r3
   13690:	mov	r0, r3
   13694:	bl	11fb8 <printf@plt>
   13698:	ldr	r3, [pc, #556]	; 138cc <main@@Base+0x324>
   1369c:	add	r3, pc, r3
   136a0:	mov	r0, r3
   136a4:	bl	12018 <puts@plt>
   136a8:	bl	12e34 <_start@@Base+0xd8c>
   136ac:	vstr	d0, [fp, #-44]	; 0xffffffd4
   136b0:	mov	r3, #0
   136b4:	str	r3, [fp, #-8]
   136b8:	b	1383c <main@@Base+0x294>
   136bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136c0:	bl	132b8 <_start@@Base+0x1210>
   136c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   136c8:	mov	r2, r3
   136cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   136d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136d4:	bl	197f0 <flatcc_builder_copy_buffer@@Base>
   136d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   136dc:	bl	1256c <_start@@Base+0x4c4>
   136e0:	str	r0, [fp, #-48]	; 0xffffffd0
   136e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   136e8:	bl	125d8 <_start@@Base+0x530>
   136ec:	mov	r2, r0
   136f0:	ldr	r3, [pc, #472]	; 138d0 <main@@Base+0x328>
   136f4:	add	r3, pc, r3
   136f8:	mov	r1, r3
   136fc:	mov	r0, r2
   13700:	bl	11fac <strcmp@plt>
   13704:	mov	r2, r0
   13708:	ldr	r3, [fp, #-12]
   1370c:	orr	r3, r3, r2
   13710:	str	r3, [fp, #-12]
   13714:	ldr	r3, [fp, #-12]
   13718:	cmp	r3, #0
   1371c:	beq	13740 <main@@Base+0x198>
   13720:	ldr	r3, [pc, #428]	; 138d4 <main@@Base+0x32c>
   13724:	add	r3, pc, r3
   13728:	mov	r2, #139	; 0x8b
   1372c:	ldr	r1, [pc, #420]	; 138d8 <main@@Base+0x330>
   13730:	add	r1, pc, r1
   13734:	ldr	r0, [pc, #416]	; 138dc <main@@Base+0x334>
   13738:	add	r0, pc, r0
   1373c:	bl	1209c <__assert_fail@plt>
   13740:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13744:	bl	12810 <_start@@Base+0x768>
   13748:	str	r0, [fp, #-52]	; 0xffffffcc
   1374c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13750:	bl	12498 <_start@@Base+0x3f0>
   13754:	mov	r3, r0
   13758:	cmp	r3, #1000	; 0x3e8
   1375c:	movne	r3, #1
   13760:	moveq	r3, #0
   13764:	uxtb	r3, r3
   13768:	mov	r2, r3
   1376c:	ldr	r3, [fp, #-12]
   13770:	orr	r3, r3, r2
   13774:	str	r3, [fp, #-12]
   13778:	ldr	r3, [fp, #-12]
   1377c:	cmp	r3, #0
   13780:	beq	137a4 <main@@Base+0x1fc>
   13784:	ldr	r3, [pc, #340]	; 138e0 <main@@Base+0x338>
   13788:	add	r3, pc, r3
   1378c:	mov	r2, #143	; 0x8f
   13790:	ldr	r1, [pc, #332]	; 138e4 <main@@Base+0x33c>
   13794:	add	r1, pc, r1
   13798:	ldr	r0, [pc, #328]	; 138e8 <main@@Base+0x340>
   1379c:	add	r0, pc, r0
   137a0:	bl	1209c <__assert_fail@plt>
   137a4:	mov	r3, #0
   137a8:	str	r3, [fp, #-16]
   137ac:	b	13818 <main@@Base+0x270>
   137b0:	ldr	r3, [fp, #-16]
   137b4:	mov	r1, r3
   137b8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   137bc:	bl	124dc <_start@@Base+0x434>
   137c0:	mov	r3, r0
   137c4:	mov	r1, r3
   137c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   137cc:	bl	13358 <_start@@Base+0x12b0>
   137d0:	mov	r2, r0
   137d4:	ldr	r3, [fp, #-12]
   137d8:	orr	r3, r3, r2
   137dc:	str	r3, [fp, #-12]
   137e0:	ldr	r3, [fp, #-12]
   137e4:	cmp	r3, #0
   137e8:	beq	1380c <main@@Base+0x264>
   137ec:	ldr	r3, [pc, #248]	; 138ec <main@@Base+0x344>
   137f0:	add	r3, pc, r3
   137f4:	mov	r2, #147	; 0x93
   137f8:	ldr	r1, [pc, #240]	; 138f0 <main@@Base+0x348>
   137fc:	add	r1, pc, r1
   13800:	ldr	r0, [pc, #236]	; 138f4 <main@@Base+0x34c>
   13804:	add	r0, pc, r0
   13808:	bl	1209c <__assert_fail@plt>
   1380c:	ldr	r3, [fp, #-16]
   13810:	add	r3, r3, #1
   13814:	str	r3, [fp, #-16]
   13818:	ldr	r3, [fp, #-16]
   1381c:	cmp	r3, #1000	; 0x3e8
   13820:	blt	137b0 <main@@Base+0x208>
   13824:	ldr	r3, [fp, #-12]
   13828:	cmp	r3, #0
   1382c:	bne	13880 <main@@Base+0x2d8>
   13830:	ldr	r3, [fp, #-8]
   13834:	add	r3, r3, #1
   13838:	str	r3, [fp, #-8]
   1383c:	ldr	r2, [fp, #-8]
   13840:	ldr	r3, [fp, #-20]	; 0xffffffec
   13844:	cmp	r2, r3
   13848:	blt	136bc <main@@Base+0x114>
   1384c:	bl	12e34 <_start@@Base+0xd8c>
   13850:	vstr	d0, [fp, #-60]	; 0xffffffc4
   13854:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13858:	mov	r3, #0
   1385c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13860:	vldr	d1, [fp, #-60]	; 0xffffffc4
   13864:	vldr	d0, [fp, #-44]	; 0xffffffd4
   13868:	ldr	r0, [pc, #136]	; 138f8 <main@@Base+0x350>
   1386c:	add	r0, pc, r0
   13870:	bl	12ee8 <_start@@Base+0xe40>
   13874:	b	13884 <main@@Base+0x2dc>
   13878:	nop			; (mov r0, r0)
   1387c:	b	13884 <main@@Base+0x2dc>
   13880:	nop			; (mov r0, r0)
   13884:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13888:	bl	148d4 <flatcc_builder_clear@@Base>
   1388c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13890:	bl	11fd0 <free@plt>
   13894:	ldr	r3, [fp, #-12]
   13898:	cmp	r3, #0
   1389c:	beq	138b0 <main@@Base+0x308>
   138a0:	ldr	r3, [pc, #84]	; 138fc <main@@Base+0x354>
   138a4:	add	r3, pc, r3
   138a8:	mov	r0, r3
   138ac:	bl	12018 <puts@plt>
   138b0:	ldr	r3, [fp, #-12]
   138b4:	mov	r0, r3
   138b8:	sub	sp, fp, #4
   138bc:	pop	{fp, pc}
   138c0:	muleq	r0, r8, r5
   138c4:	muleq	r0, r0, r5
   138c8:	andeq	r7, r0, r4, lsr #10
   138cc:	andeq	r7, r0, r8, lsr #10
   138d0:	andeq	r7, r0, r0, asr r4
   138d4:	muleq	r0, r0, r5
   138d8:	andeq	r7, r0, ip, lsr #7
   138dc:	andeq	r7, r0, r0, lsr #9
   138e0:	andeq	r7, r0, ip, lsr #10
   138e4:	andeq	r7, r0, r8, asr #6
   138e8:	andeq	r7, r0, ip, lsr r4
   138ec:	andeq	r7, r0, r4, asr #9
   138f0:	andeq	r7, r0, r0, ror #5
   138f4:	ldrdeq	r7, [r0], -r4
   138f8:	andeq	r7, r0, r8, ror r3
   138fc:	andeq	r7, r0, ip, ror #6
   13900:	push	{fp, lr}
   13904:	add	fp, sp, #4
   13908:	sub	sp, sp, #16
   1390c:	str	r0, [fp, #-16]
   13910:	str	r1, [fp, #-20]	; 0xffffffec
   13914:	mov	r3, #0
   13918:	str	r3, [fp, #-12]
   1391c:	ldr	r3, [fp, #-16]
   13920:	cmp	r3, #3
   13924:	bhi	13930 <main@@Base+0x388>
   13928:	mov	r3, #4
   1392c:	str	r3, [fp, #-16]
   13930:	sub	r3, fp, #12
   13934:	ldr	r2, [fp, #-20]	; 0xffffffec
   13938:	ldr	r1, [fp, #-16]
   1393c:	mov	r0, r3
   13940:	bl	12054 <posix_memalign@plt>
   13944:	str	r0, [fp, #-8]
   13948:	ldr	r3, [fp, #-8]
   1394c:	cmp	r3, #0
   13950:	beq	13974 <main@@Base+0x3cc>
   13954:	ldr	r3, [fp, #-12]
   13958:	cmp	r3, #0
   1395c:	beq	13974 <main@@Base+0x3cc>
   13960:	ldr	r3, [fp, #-12]
   13964:	mov	r0, r3
   13968:	bl	11fd0 <free@plt>
   1396c:	mov	r3, #0
   13970:	str	r3, [fp, #-12]
   13974:	ldr	r3, [fp, #-12]
   13978:	mov	r0, r3
   1397c:	sub	sp, fp, #4
   13980:	pop	{fp, pc}
   13984:	push	{fp}		; (str fp, [sp, #-4]!)
   13988:	add	fp, sp, #0
   1398c:	sub	sp, sp, #12
   13990:	str	r0, [fp, #-8]
   13994:	ldr	r3, [fp, #-8]
   13998:	mov	r0, r3
   1399c:	add	sp, fp, #0
   139a0:	pop	{fp}		; (ldr fp, [sp], #4)
   139a4:	bx	lr
   139a8:	push	{fp}		; (str fp, [sp, #-4]!)
   139ac:	add	fp, sp, #0
   139b0:	sub	sp, sp, #12
   139b4:	mov	r3, r0
   139b8:	strb	r3, [fp, #-5]
   139bc:	ldrb	r3, [fp, #-5]
   139c0:	mov	r0, r3
   139c4:	add	sp, fp, #0
   139c8:	pop	{fp}		; (ldr fp, [sp], #4)
   139cc:	bx	lr
   139d0:	push	{fp}		; (str fp, [sp, #-4]!)
   139d4:	add	fp, sp, #0
   139d8:	sub	sp, sp, #12
   139dc:	str	r0, [fp, #-8]
   139e0:	ldr	r3, [fp, #-8]
   139e4:	mov	r0, r3
   139e8:	add	sp, fp, #0
   139ec:	pop	{fp}		; (ldr fp, [sp], #4)
   139f0:	bx	lr
   139f4:	push	{fp}		; (str fp, [sp, #-4]!)
   139f8:	add	fp, sp, #0
   139fc:	sub	sp, sp, #12
   13a00:	str	r0, [fp, #-8]
   13a04:	str	r1, [fp, #-12]
   13a08:	ldr	r3, [fp, #-8]
   13a0c:	ldr	r2, [r3]
   13a10:	ldr	r3, [fp, #-8]
   13a14:	ldr	r3, [r3, #4]
   13a18:	cmp	r2, r3
   13a1c:	bne	13a48 <main@@Base+0x4a0>
   13a20:	ldr	r3, [fp, #-12]
   13a24:	cmp	r3, #0
   13a28:	beq	13a3c <main@@Base+0x494>
   13a2c:	ldr	r3, [fp, #-8]
   13a30:	ldr	r2, [r3, #24]
   13a34:	ldr	r3, [fp, #-12]
   13a38:	str	r2, [r3]
   13a3c:	ldr	r3, [fp, #-8]
   13a40:	ldr	r3, [r3, #8]
   13a44:	b	13a64 <main@@Base+0x4bc>
   13a48:	ldr	r3, [fp, #-12]
   13a4c:	cmp	r3, #0
   13a50:	beq	13a60 <main@@Base+0x4b8>
   13a54:	ldr	r3, [fp, #-12]
   13a58:	mov	r2, #0
   13a5c:	str	r2, [r3]
   13a60:	mov	r3, #0
   13a64:	mov	r0, r3
   13a68:	add	sp, fp, #0
   13a6c:	pop	{fp}		; (ldr fp, [sp], #4)
   13a70:	bx	lr
   13a74:	push	{fp, lr}
   13a78:	add	fp, sp, #4
   13a7c:	sub	sp, sp, #16
   13a80:	str	r0, [fp, #-16]
   13a84:	str	r1, [fp, #-20]	; 0xffffffec
   13a88:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a8c:	mov	r1, #0
   13a90:	ldr	r0, [fp, #-16]
   13a94:	bl	12078 <memchr@plt>
   13a98:	str	r0, [fp, #-8]
   13a9c:	ldr	r3, [fp, #-8]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13ab8 <main@@Base+0x510>
   13aa8:	ldr	r2, [fp, #-8]
   13aac:	ldr	r3, [fp, #-16]
   13ab0:	sub	r3, r2, r3
   13ab4:	b	13abc <main@@Base+0x514>
   13ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13abc:	mov	r0, r3
   13ac0:	sub	sp, fp, #4
   13ac4:	pop	{fp, pc}

00013ac8 <flatcc_builder_default_alloc@@Base>:
   13ac8:	push	{fp, lr}
   13acc:	add	fp, sp, #4
   13ad0:	sub	sp, sp, #24
   13ad4:	str	r0, [fp, #-16]
   13ad8:	str	r1, [fp, #-20]	; 0xffffffec
   13adc:	str	r2, [fp, #-24]	; 0xffffffe8
   13ae0:	str	r3, [fp, #-28]	; 0xffffffe4
   13ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ae8:	cmp	r3, #0
   13aec:	bne	13b30 <flatcc_builder_default_alloc@@Base+0x68>
   13af0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13af4:	ldr	r3, [r3]
   13af8:	cmp	r3, #0
   13afc:	beq	13b28 <flatcc_builder_default_alloc@@Base+0x60>
   13b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b04:	ldr	r3, [r3]
   13b08:	mov	r0, r3
   13b0c:	bl	11fd0 <free@plt>
   13b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b14:	mov	r2, #0
   13b18:	str	r2, [r3]
   13b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b20:	mov	r2, #0
   13b24:	str	r2, [r3, #4]
   13b28:	mov	r3, #0
   13b2c:	b	13c84 <flatcc_builder_default_alloc@@Base+0x1bc>
   13b30:	ldr	r3, [fp, #4]
   13b34:	sub	r3, r3, #1
   13b38:	cmp	r3, #6
   13b3c:	addls	pc, pc, r3, lsl #2
   13b40:	b	13b90 <flatcc_builder_default_alloc@@Base+0xc8>
   13b44:	b	13b60 <flatcc_builder_default_alloc@@Base+0x98>
   13b48:	b	13b90 <flatcc_builder_default_alloc@@Base+0xc8>
   13b4c:	b	13b90 <flatcc_builder_default_alloc@@Base+0xc8>
   13b50:	b	13b78 <flatcc_builder_default_alloc@@Base+0xb0>
   13b54:	b	13b6c <flatcc_builder_default_alloc@@Base+0xa4>
   13b58:	b	13b90 <flatcc_builder_default_alloc@@Base+0xc8>
   13b5c:	b	13b84 <flatcc_builder_default_alloc@@Base+0xbc>
   13b60:	mov	r3, #256	; 0x100
   13b64:	str	r3, [fp, #-8]
   13b68:	b	13b9c <flatcc_builder_default_alloc@@Base+0xd4>
   13b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b70:	str	r3, [fp, #-8]
   13b74:	b	13b9c <flatcc_builder_default_alloc@@Base+0xd4>
   13b78:	mov	r3, #288	; 0x120
   13b7c:	str	r3, [fp, #-8]
   13b80:	b	13b9c <flatcc_builder_default_alloc@@Base+0xd4>
   13b84:	mov	r3, #64	; 0x40
   13b88:	str	r3, [fp, #-8]
   13b8c:	b	13b9c <flatcc_builder_default_alloc@@Base+0xd4>
   13b90:	mov	r3, #32
   13b94:	str	r3, [fp, #-8]
   13b98:	nop			; (mov r0, r0)
   13b9c:	b	13bac <flatcc_builder_default_alloc@@Base+0xe4>
   13ba0:	ldr	r3, [fp, #-8]
   13ba4:	lsl	r3, r3, #1
   13ba8:	str	r3, [fp, #-8]
   13bac:	ldr	r2, [fp, #-8]
   13bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bb4:	cmp	r2, r3
   13bb8:	bcc	13ba0 <flatcc_builder_default_alloc@@Base+0xd8>
   13bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bc0:	ldr	r2, [r3, #4]
   13bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bc8:	cmp	r2, r3
   13bcc:	bcc	13bf0 <flatcc_builder_default_alloc@@Base+0x128>
   13bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bd4:	ldr	r3, [r3, #4]
   13bd8:	lsr	r2, r3, #1
   13bdc:	ldr	r3, [fp, #-8]
   13be0:	cmp	r2, r3
   13be4:	bcc	13bf0 <flatcc_builder_default_alloc@@Base+0x128>
   13be8:	mov	r3, #0
   13bec:	b	13c84 <flatcc_builder_default_alloc@@Base+0x1bc>
   13bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bf4:	ldr	r3, [r3]
   13bf8:	ldr	r1, [fp, #-8]
   13bfc:	mov	r0, r3
   13c00:	bl	11ff4 <realloc@plt>
   13c04:	str	r0, [fp, #-12]
   13c08:	ldr	r3, [fp, #-12]
   13c0c:	cmp	r3, #0
   13c10:	bne	13c1c <flatcc_builder_default_alloc@@Base+0x154>
   13c14:	mvn	r3, #0
   13c18:	b	13c84 <flatcc_builder_default_alloc@@Base+0x1bc>
   13c1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c20:	cmp	r3, #0
   13c24:	beq	13c68 <flatcc_builder_default_alloc@@Base+0x1a0>
   13c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c2c:	ldr	r2, [r3, #4]
   13c30:	ldr	r3, [fp, #-8]
   13c34:	cmp	r2, r3
   13c38:	bcs	13c68 <flatcc_builder_default_alloc@@Base+0x1a0>
   13c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c40:	ldr	r3, [r3, #4]
   13c44:	ldr	r2, [fp, #-12]
   13c48:	add	r0, r2, r3
   13c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c50:	ldr	r3, [r3, #4]
   13c54:	ldr	r2, [fp, #-8]
   13c58:	sub	r3, r2, r3
   13c5c:	mov	r2, r3
   13c60:	mov	r1, #0
   13c64:	bl	12060 <memset@plt>
   13c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c6c:	ldr	r2, [fp, #-12]
   13c70:	str	r2, [r3]
   13c74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c78:	ldr	r2, [fp, #-8]
   13c7c:	str	r2, [r3, #4]
   13c80:	mov	r3, #0
   13c84:	mov	r0, r3
   13c88:	sub	sp, fp, #4
   13c8c:	pop	{fp, pc}
   13c90:	push	{fp}		; (str fp, [sp, #-4]!)
   13c94:	add	fp, sp, #0
   13c98:	sub	sp, sp, #20
   13c9c:	str	r0, [fp, #-16]
   13ca0:	str	r1, [fp, #-20]	; 0xffffffec
   13ca4:	ldr	r3, [fp, #-16]
   13ca8:	add	r3, r3, #52	; 0x34
   13cac:	add	r3, r3, #8
   13cb0:	str	r3, [fp, #-8]
   13cb4:	ldr	r3, [fp, #-16]
   13cb8:	ldr	r2, [r3, #60]	; 0x3c
   13cbc:	ldr	r3, [fp, #-16]
   13cc0:	ldr	r3, [r3, #28]
   13cc4:	add	r2, r2, r3
   13cc8:	ldr	r3, [fp, #-16]
   13ccc:	str	r2, [r3, #16]
   13cd0:	ldr	r3, [fp, #-8]
   13cd4:	ldr	r2, [r3, #4]
   13cd8:	ldr	r3, [fp, #-16]
   13cdc:	ldr	r3, [r3, #28]
   13ce0:	sub	r2, r2, r3
   13ce4:	ldr	r3, [fp, #-16]
   13ce8:	str	r2, [r3, #24]
   13cec:	ldr	r3, [fp, #-16]
   13cf0:	ldr	r2, [r3, #24]
   13cf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cf8:	cmp	r2, r3
   13cfc:	bls	13d0c <flatcc_builder_default_alloc@@Base+0x244>
   13d00:	ldr	r3, [fp, #-16]
   13d04:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d08:	str	r2, [r3, #24]
   13d0c:	ldr	r3, [fp, #-16]
   13d10:	ldr	r3, [r3, #32]
   13d14:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d18:	str	r2, [r3, #4]
   13d1c:	nop			; (mov r0, r0)
   13d20:	add	sp, fp, #0
   13d24:	pop	{fp}		; (ldr fp, [sp], #4)
   13d28:	bx	lr
   13d2c:	push	{r4, fp, lr}
   13d30:	add	fp, sp, #8
   13d34:	sub	sp, sp, #36	; 0x24
   13d38:	str	r0, [fp, #-24]	; 0xffffffe8
   13d3c:	str	r1, [fp, #-28]	; 0xffffffe4
   13d40:	str	r2, [fp, #-32]	; 0xffffffe0
   13d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d48:	add	r3, r3, #52	; 0x34
   13d4c:	add	r3, r3, #8
   13d50:	str	r3, [fp, #-16]
   13d54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d58:	ldr	r4, [r3, #48]	; 0x30
   13d5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d60:	ldr	r0, [r3, #40]	; 0x28
   13d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d68:	ldr	r2, [r3, #28]
   13d6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d70:	add	r2, r2, r3
   13d74:	mov	r3, #1
   13d78:	str	r3, [sp]
   13d7c:	mov	r3, #1
   13d80:	ldr	r1, [fp, #-16]
   13d84:	blx	r4
   13d88:	mov	r3, r0
   13d8c:	cmp	r3, #0
   13d90:	beq	13d9c <flatcc_builder_default_alloc@@Base+0x2d4>
   13d94:	mvn	r3, #0
   13d98:	b	13dac <flatcc_builder_default_alloc@@Base+0x2e4>
   13d9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13da0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13da4:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   13da8:	mov	r3, #0
   13dac:	mov	r0, r3
   13db0:	sub	sp, fp, #8
   13db4:	pop	{r4, fp, pc}
   13db8:	push	{fp, lr}
   13dbc:	add	fp, sp, #4
   13dc0:	sub	sp, sp, #16
   13dc4:	str	r0, [fp, #-16]
   13dc8:	str	r1, [fp, #-20]	; 0xffffffec
   13dcc:	ldr	r3, [fp, #-16]
   13dd0:	ldr	r3, [r3, #20]
   13dd4:	str	r3, [fp, #-8]
   13dd8:	ldr	r3, [fp, #-16]
   13ddc:	ldr	r2, [r3, #20]
   13de0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13de4:	add	r2, r2, r3
   13de8:	ldr	r3, [fp, #-16]
   13dec:	str	r2, [r3, #20]
   13df0:	ldr	r3, [fp, #-16]
   13df4:	ldr	r2, [r3, #20]
   13df8:	ldr	r3, [fp, #-16]
   13dfc:	ldr	r3, [r3, #24]
   13e00:	cmp	r2, r3
   13e04:	bcc	13e38 <flatcc_builder_default_alloc@@Base+0x370>
   13e08:	ldr	r3, [fp, #-16]
   13e0c:	ldr	r3, [r3, #20]
   13e10:	add	r3, r3, #1
   13e14:	mvn	r2, #3
   13e18:	mov	r1, r3
   13e1c:	ldr	r0, [fp, #-16]
   13e20:	bl	13d2c <flatcc_builder_default_alloc@@Base+0x264>
   13e24:	mov	r3, r0
   13e28:	cmp	r3, #0
   13e2c:	beq	13e38 <flatcc_builder_default_alloc@@Base+0x370>
   13e30:	mov	r3, #0
   13e34:	b	13e48 <flatcc_builder_default_alloc@@Base+0x380>
   13e38:	ldr	r3, [fp, #-16]
   13e3c:	ldr	r2, [r3, #16]
   13e40:	ldr	r3, [fp, #-8]
   13e44:	add	r3, r2, r3
   13e48:	mov	r0, r3
   13e4c:	sub	sp, fp, #4
   13e50:	pop	{fp, pc}
   13e54:	push	{fp, lr}
   13e58:	add	fp, sp, #4
   13e5c:	sub	sp, sp, #8
   13e60:	str	r0, [fp, #-8]
   13e64:	str	r1, [fp, #-12]
   13e68:	ldr	r3, [fp, #-8]
   13e6c:	ldr	r2, [r3, #20]
   13e70:	ldr	r3, [fp, #-12]
   13e74:	sub	r2, r2, r3
   13e78:	ldr	r3, [fp, #-8]
   13e7c:	str	r2, [r3, #20]
   13e80:	ldr	r3, [fp, #-8]
   13e84:	ldr	r2, [r3, #16]
   13e88:	ldr	r3, [fp, #-8]
   13e8c:	ldr	r3, [r3, #20]
   13e90:	add	r3, r2, r3
   13e94:	ldr	r2, [fp, #-12]
   13e98:	mov	r1, #0
   13e9c:	mov	r0, r3
   13ea0:	bl	12060 <memset@plt>
   13ea4:	nop			; (mov r0, r0)
   13ea8:	sub	sp, fp, #4
   13eac:	pop	{fp, pc}
   13eb0:	push	{fp, lr}
   13eb4:	add	fp, sp, #4
   13eb8:	sub	sp, sp, #24
   13ebc:	str	r0, [fp, #-16]
   13ec0:	str	r1, [fp, #-20]	; 0xffffffec
   13ec4:	str	r2, [fp, #-24]	; 0xffffffe8
   13ec8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13ecc:	ldr	r0, [fp, #-16]
   13ed0:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   13ed4:	str	r0, [fp, #-8]
   13ed8:	ldr	r3, [fp, #-8]
   13edc:	cmp	r3, #0
   13ee0:	bne	13eec <flatcc_builder_default_alloc@@Base+0x424>
   13ee4:	mov	r3, #0
   13ee8:	b	13f00 <flatcc_builder_default_alloc@@Base+0x438>
   13eec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13ef0:	ldr	r1, [fp, #-20]	; 0xffffffec
   13ef4:	ldr	r0, [fp, #-8]
   13ef8:	bl	11fdc <memcpy@plt>
   13efc:	ldr	r3, [fp, #-8]
   13f00:	mov	r0, r3
   13f04:	sub	sp, fp, #4
   13f08:	pop	{fp, pc}
   13f0c:	push	{fp, lr}
   13f10:	add	fp, sp, #4
   13f14:	sub	sp, sp, #24
   13f18:	str	r0, [fp, #-16]
   13f1c:	str	r1, [fp, #-20]	; 0xffffffec
   13f20:	strh	r2, [fp, #-22]	; 0xffffffea
   13f24:	strh	r3, [fp, #-24]	; 0xffffffe8
   13f28:	ldr	r3, [fp, #-16]
   13f2c:	ldr	r2, [r3, #20]
   13f30:	ldrh	r3, [fp, #-22]	; 0xffffffea
   13f34:	add	r3, r2, r3
   13f38:	sub	r3, r3, #1
   13f3c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   13f40:	rsb	r2, r2, #0
   13f44:	and	r3, r3, r2
   13f48:	str	r3, [fp, #-8]
   13f4c:	ldr	r2, [fp, #-8]
   13f50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f54:	add	r2, r2, r3
   13f58:	ldr	r3, [fp, #-16]
   13f5c:	str	r2, [r3, #20]
   13f60:	ldr	r3, [fp, #-16]
   13f64:	ldr	r2, [r3, #20]
   13f68:	ldr	r3, [fp, #-16]
   13f6c:	ldr	r3, [r3, #24]
   13f70:	cmp	r2, r3
   13f74:	bcc	13fa8 <flatcc_builder_default_alloc@@Base+0x4e0>
   13f78:	ldr	r3, [fp, #-16]
   13f7c:	ldr	r3, [r3, #20]
   13f80:	add	r3, r3, #1
   13f84:	ldr	r2, [pc, #136]	; 14014 <flatcc_builder_default_alloc@@Base+0x54c>
   13f88:	mov	r1, r3
   13f8c:	ldr	r0, [fp, #-16]
   13f90:	bl	13d2c <flatcc_builder_default_alloc@@Base+0x264>
   13f94:	mov	r3, r0
   13f98:	cmp	r3, #0
   13f9c:	beq	13fa8 <flatcc_builder_default_alloc@@Base+0x4e0>
   13fa0:	mov	r3, #0
   13fa4:	b	14008 <flatcc_builder_default_alloc@@Base+0x540>
   13fa8:	ldr	r3, [fp, #-16]
   13fac:	ldr	r2, [r3, #4]
   13fb0:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   13fb4:	lsl	r3, r3, #1
   13fb8:	add	r3, r2, r3
   13fbc:	ldr	r2, [fp, #-8]
   13fc0:	uxth	r2, r2
   13fc4:	add	r2, r2, #4
   13fc8:	uxth	r2, r2
   13fcc:	strh	r2, [r3]
   13fd0:	ldr	r3, [fp, #-16]
   13fd4:	ldrh	r3, [r3, #8]
   13fd8:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   13fdc:	cmp	r2, r3
   13fe0:	bcc	13ff8 <flatcc_builder_default_alloc@@Base+0x530>
   13fe4:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   13fe8:	add	r3, r3, #1
   13fec:	uxth	r2, r3
   13ff0:	ldr	r3, [fp, #-16]
   13ff4:	strh	r2, [r3, #8]
   13ff8:	ldr	r3, [fp, #-16]
   13ffc:	ldr	r2, [r3, #16]
   14000:	ldr	r3, [fp, #-8]
   14004:	add	r3, r2, r3
   14008:	mov	r0, r3
   1400c:	sub	sp, fp, #4
   14010:	pop	{fp, pc}
   14014:	strdeq	pc, [r0], -ip
   14018:	push	{fp, lr}
   1401c:	add	fp, sp, #4
   14020:	sub	sp, sp, #16
   14024:	str	r0, [fp, #-16]
   14028:	mov	r3, r1
   1402c:	strh	r3, [fp, #-18]	; 0xffffffee
   14030:	ldr	r3, [fp, #-16]
   14034:	ldr	r3, [r3, #20]
   14038:	add	r3, r3, #3
   1403c:	bic	r3, r3, #3
   14040:	str	r3, [fp, #-8]
   14044:	ldr	r3, [fp, #-8]
   14048:	add	r2, r3, #4
   1404c:	ldr	r3, [fp, #-16]
   14050:	str	r2, [r3, #20]
   14054:	ldr	r3, [fp, #-16]
   14058:	ldr	r2, [r3, #20]
   1405c:	ldr	r3, [fp, #-16]
   14060:	ldr	r3, [r3, #24]
   14064:	cmp	r2, r3
   14068:	bls	14098 <flatcc_builder_default_alloc@@Base+0x5d0>
   1406c:	ldr	r3, [fp, #-16]
   14070:	ldr	r3, [r3, #20]
   14074:	ldr	r2, [pc, #168]	; 14124 <flatcc_builder_default_alloc@@Base+0x65c>
   14078:	mov	r1, r3
   1407c:	ldr	r0, [fp, #-16]
   14080:	bl	13d2c <flatcc_builder_default_alloc@@Base+0x264>
   14084:	mov	r3, r0
   14088:	cmp	r3, #0
   1408c:	beq	14098 <flatcc_builder_default_alloc@@Base+0x5d0>
   14090:	mov	r3, #0
   14094:	b	14118 <flatcc_builder_default_alloc@@Base+0x650>
   14098:	ldr	r3, [fp, #-16]
   1409c:	ldr	r2, [r3, #4]
   140a0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   140a4:	lsl	r3, r3, #1
   140a8:	add	r3, r2, r3
   140ac:	ldr	r2, [fp, #-8]
   140b0:	uxth	r2, r2
   140b4:	add	r2, r2, #4
   140b8:	uxth	r2, r2
   140bc:	strh	r2, [r3]
   140c0:	ldr	r3, [fp, #-16]
   140c4:	ldrh	r3, [r3, #8]
   140c8:	ldrh	r2, [fp, #-18]	; 0xffffffee
   140cc:	cmp	r2, r3
   140d0:	bcc	140e8 <flatcc_builder_default_alloc@@Base+0x620>
   140d4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   140d8:	add	r3, r3, #1
   140dc:	uxth	r2, r3
   140e0:	ldr	r3, [fp, #-16]
   140e4:	strh	r2, [r3, #8]
   140e8:	ldr	r3, [fp, #-16]
   140ec:	ldr	r3, [r3]
   140f0:	add	r1, r3, #2
   140f4:	ldr	r2, [fp, #-16]
   140f8:	str	r1, [r2]
   140fc:	ldr	r2, [fp, #-8]
   14100:	uxth	r2, r2
   14104:	strh	r2, [r3]
   14108:	ldr	r3, [fp, #-16]
   1410c:	ldr	r2, [r3, #16]
   14110:	ldr	r3, [fp, #-8]
   14114:	add	r3, r2, r3
   14118:	mov	r0, r3
   1411c:	sub	sp, fp, #4
   14120:	pop	{fp, pc}
   14124:	strdeq	pc, [r0], -ip
   14128:	push	{r4, fp, lr}
   1412c:	add	fp, sp, #8
   14130:	sub	sp, sp, #36	; 0x24
   14134:	str	r0, [fp, #-24]	; 0xffffffe8
   14138:	str	r1, [fp, #-28]	; 0xffffffe4
   1413c:	str	r2, [fp, #-32]	; 0xffffffe0
   14140:	str	r3, [fp, #-36]	; 0xffffffdc
   14144:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14148:	add	r2, r3, #52	; 0x34
   1414c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14150:	lsl	r3, r3, #3
   14154:	add	r3, r2, r3
   14158:	str	r3, [fp, #-16]
   1415c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14160:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14164:	add	r2, r2, r3
   14168:	ldr	r3, [fp, #-16]
   1416c:	ldr	r3, [r3, #4]
   14170:	cmp	r2, r3
   14174:	bls	141d4 <flatcc_builder_default_alloc@@Base+0x70c>
   14178:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1417c:	ldr	r4, [r3, #48]	; 0x30
   14180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14184:	ldr	r0, [r3, #40]	; 0x28
   14188:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1418c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14190:	add	r2, r2, r3
   14194:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14198:	str	r3, [sp]
   1419c:	ldr	r3, [fp, #4]
   141a0:	ldr	r1, [fp, #-16]
   141a4:	blx	r4
   141a8:	mov	r3, r0
   141ac:	cmp	r3, #0
   141b0:	beq	141d4 <flatcc_builder_default_alloc@@Base+0x70c>
   141b4:	ldr	r3, [pc, #56]	; 141f4 <flatcc_builder_default_alloc@@Base+0x72c>
   141b8:	add	r3, pc, r3
   141bc:	mov	r2, #308	; 0x134
   141c0:	ldr	r1, [pc, #48]	; 141f8 <flatcc_builder_default_alloc@@Base+0x730>
   141c4:	add	r1, pc, r1
   141c8:	ldr	r0, [pc, #44]	; 141fc <flatcc_builder_default_alloc@@Base+0x734>
   141cc:	add	r0, pc, r0
   141d0:	bl	1209c <__assert_fail@plt>
   141d4:	ldr	r3, [fp, #-16]
   141d8:	ldr	r3, [r3]
   141dc:	mov	r2, r3
   141e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   141e4:	add	r3, r2, r3
   141e8:	mov	r0, r3
   141ec:	sub	sp, fp, #8
   141f0:	pop	{r4, fp, pc}
   141f4:	andeq	r7, r0, r8, lsl #3
   141f8:	andeq	r6, r0, r8, asr #26
   141fc:	andeq	r6, r0, r0, lsr #27
   14200:	push	{fp, lr}
   14204:	add	fp, sp, #4
   14208:	sub	sp, sp, #24
   1420c:	str	r0, [fp, #-16]
   14210:	str	r1, [fp, #-20]	; 0xffffffec
   14214:	ldr	r3, [fp, #-16]
   14218:	ldr	r3, [r3, #32]
   1421c:	ldr	r2, [r3, #16]
   14220:	ldr	r3, [fp, #-16]
   14224:	ldr	r3, [r3, #32]
   14228:	ldrh	r3, [r3, #28]
   1422c:	lsl	r3, r3, #1
   14230:	add	r3, r2, r3
   14234:	str	r3, [fp, #-8]
   14238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1423c:	add	r3, r3, #2
   14240:	lsl	r3, r3, #1
   14244:	str	r3, [fp, #-12]
   14248:	mov	r3, #1
   1424c:	str	r3, [sp]
   14250:	ldr	r3, [fp, #-12]
   14254:	ldr	r2, [fp, #-8]
   14258:	mov	r1, #0
   1425c:	ldr	r0, [fp, #-16]
   14260:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   14264:	mov	r2, r0
   14268:	ldr	r3, [fp, #-16]
   1426c:	str	r2, [r3, #4]
   14270:	ldr	r3, [fp, #-16]
   14274:	ldr	r3, [r3, #4]
   14278:	cmp	r3, #0
   1427c:	bne	14288 <flatcc_builder_default_alloc@@Base+0x7c0>
   14280:	mvn	r3, #0
   14284:	b	14300 <flatcc_builder_default_alloc@@Base+0x838>
   14288:	ldr	r3, [fp, #-16]
   1428c:	ldr	r3, [r3, #4]
   14290:	add	r2, r3, #4
   14294:	ldr	r3, [fp, #-16]
   14298:	str	r2, [r3, #4]
   1429c:	ldr	r3, [fp, #-16]
   142a0:	ldr	r3, [r3, #32]
   142a4:	ldr	r3, [r3, #20]
   142a8:	str	r3, [fp, #-8]
   142ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   142b0:	lsl	r3, r3, #1
   142b4:	add	r3, r3, #1
   142b8:	str	r3, [fp, #-12]
   142bc:	mov	r3, #0
   142c0:	str	r3, [sp]
   142c4:	ldr	r3, [fp, #-12]
   142c8:	ldr	r2, [fp, #-8]
   142cc:	mov	r1, #3
   142d0:	ldr	r0, [fp, #-16]
   142d4:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   142d8:	mov	r2, r0
   142dc:	ldr	r3, [fp, #-16]
   142e0:	str	r2, [r3]
   142e4:	ldr	r3, [fp, #-16]
   142e8:	ldr	r3, [r3]
   142ec:	cmp	r3, #0
   142f0:	bne	142fc <flatcc_builder_default_alloc@@Base+0x834>
   142f4:	mvn	r3, #0
   142f8:	b	14300 <flatcc_builder_default_alloc@@Base+0x838>
   142fc:	mov	r3, #0
   14300:	mov	r0, r3
   14304:	sub	sp, fp, #4
   14308:	pop	{fp, pc}
   1430c:	push	{r4, fp, lr}
   14310:	add	fp, sp, #8
   14314:	sub	sp, sp, #36	; 0x24
   14318:	str	r0, [fp, #-32]	; 0xffffffe0
   1431c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14320:	add	r3, r3, #52	; 0x34
   14324:	add	r3, r3, #40	; 0x28
   14328:	str	r3, [fp, #-24]	; 0xffffffe8
   1432c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14330:	ldr	r3, [r3, #124]	; 0x7c
   14334:	cmp	r3, #0
   14338:	beq	1435c <flatcc_builder_default_alloc@@Base+0x894>
   1433c:	ldr	r3, [pc, #280]	; 1445c <flatcc_builder_default_alloc@@Base+0x994>
   14340:	add	r3, pc, r3
   14344:	ldr	r2, [pc, #276]	; 14460 <flatcc_builder_default_alloc@@Base+0x998>
   14348:	ldr	r1, [pc, #276]	; 14464 <flatcc_builder_default_alloc@@Base+0x99c>
   1434c:	add	r1, pc, r1
   14350:	ldr	r0, [pc, #272]	; 14468 <flatcc_builder_default_alloc@@Base+0x9a0>
   14354:	add	r0, pc, r0
   14358:	bl	1209c <__assert_fail@plt>
   1435c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14360:	ldr	r2, [r3, #124]	; 0x7c
   14364:	mov	r3, #0
   14368:	str	r3, [sp]
   1436c:	mov	r3, #16
   14370:	mov	r1, #6
   14374:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14378:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   1437c:	mov	r3, r0
   14380:	cmp	r3, #0
   14384:	bne	14390 <flatcc_builder_default_alloc@@Base+0x8c8>
   14388:	mvn	r3, #0
   1438c:	b	14450 <flatcc_builder_default_alloc@@Base+0x988>
   14390:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14394:	mov	r2, #16
   14398:	str	r2, [r3, #124]	; 0x7c
   1439c:	mov	r3, #256	; 0x100
   143a0:	str	r3, [fp, #-16]
   143a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   143a8:	ldr	r4, [r3, #48]	; 0x30
   143ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   143b0:	ldr	r0, [r3, #40]	; 0x28
   143b4:	mov	r3, #5
   143b8:	str	r3, [sp]
   143bc:	mov	r3, #1
   143c0:	ldr	r2, [fp, #-16]
   143c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   143c8:	blx	r4
   143cc:	mov	r3, r0
   143d0:	cmp	r3, #0
   143d4:	beq	143ec <flatcc_builder_default_alloc@@Base+0x924>
   143d8:	mvn	r3, #0
   143dc:	b	14450 <flatcc_builder_default_alloc@@Base+0x988>
   143e0:	ldr	r3, [fp, #-16]
   143e4:	lsl	r3, r3, #1
   143e8:	str	r3, [fp, #-16]
   143ec:	ldr	r3, [fp, #-16]
   143f0:	lsl	r2, r3, #1
   143f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143f8:	ldr	r3, [r3, #4]
   143fc:	cmp	r2, r3
   14400:	bls	143e0 <flatcc_builder_default_alloc@@Base+0x918>
   14404:	ldr	r3, [fp, #-16]
   14408:	lsr	r3, r3, #2
   1440c:	str	r3, [fp, #-16]
   14410:	mov	r3, #0
   14414:	str	r3, [fp, #-20]	; 0xffffffec
   14418:	b	14428 <flatcc_builder_default_alloc@@Base+0x960>
   1441c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14420:	add	r3, r3, #1
   14424:	str	r3, [fp, #-20]	; 0xffffffec
   14428:	mov	r2, #1
   1442c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14430:	lsl	r2, r2, r3
   14434:	ldr	r3, [fp, #-16]
   14438:	cmp	r2, r3
   1443c:	bcc	1441c <flatcc_builder_default_alloc@@Base+0x954>
   14440:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14444:	ldr	r2, [fp, #-20]	; 0xffffffec
   14448:	str	r2, [r3, #116]	; 0x74
   1444c:	mov	r3, #0
   14450:	mov	r0, r3
   14454:	sub	sp, fp, #8
   14458:	pop	{r4, fp, pc}
   1445c:	strdeq	r6, [r0], -r4
   14460:	andeq	r0, r0, r6, asr r1
   14464:	andeq	r6, r0, r0, asr #23
   14468:	andeq	r6, r0, ip, lsl ip
   1446c:	push	{fp, lr}
   14470:	add	fp, sp, #4
   14474:	sub	sp, sp, #16
   14478:	str	r0, [fp, #-16]
   1447c:	str	r1, [fp, #-20]	; 0xffffffec
   14480:	ldr	r3, [fp, #-16]
   14484:	ldr	r3, [r3, #116]	; 0x74
   14488:	cmp	r3, #0
   1448c:	bne	144ac <flatcc_builder_default_alloc@@Base+0x9e4>
   14490:	ldr	r0, [fp, #-16]
   14494:	bl	1430c <flatcc_builder_default_alloc@@Base+0x844>
   14498:	mov	r3, r0
   1449c:	cmp	r3, #0
   144a0:	beq	144ac <flatcc_builder_default_alloc@@Base+0x9e4>
   144a4:	mov	r3, #0
   144a8:	b	144d8 <flatcc_builder_default_alloc@@Base+0xa10>
   144ac:	ldr	r3, [fp, #-16]
   144b0:	ldr	r3, [r3, #92]	; 0x5c
   144b4:	str	r3, [fp, #-8]
   144b8:	ldr	r3, [fp, #-16]
   144bc:	ldr	r3, [r3, #116]	; 0x74
   144c0:	rsb	r3, r3, #32
   144c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   144c8:	lsr	r3, r2, r3
   144cc:	lsl	r3, r3, #2
   144d0:	ldr	r2, [fp, #-8]
   144d4:	add	r3, r2, r3
   144d8:	mov	r0, r3
   144dc:	sub	sp, fp, #4
   144e0:	pop	{fp, pc}

000144e4 <flatcc_builder_flush_vtable_cache@@Base>:
   144e4:	push	{fp, lr}
   144e8:	add	fp, sp, #4
   144ec:	sub	sp, sp, #16
   144f0:	str	r0, [fp, #-16]
   144f4:	ldr	r3, [fp, #-16]
   144f8:	add	r3, r3, #52	; 0x34
   144fc:	add	r3, r3, #40	; 0x28
   14500:	str	r3, [fp, #-8]
   14504:	ldr	r3, [fp, #-16]
   14508:	ldr	r3, [r3, #116]	; 0x74
   1450c:	cmp	r3, #0
   14510:	beq	1454c <flatcc_builder_flush_vtable_cache@@Base+0x68>
   14514:	ldr	r3, [fp, #-8]
   14518:	ldr	r0, [r3]
   1451c:	ldr	r3, [fp, #-8]
   14520:	ldr	r3, [r3, #4]
   14524:	mov	r2, r3
   14528:	mov	r1, #0
   1452c:	bl	12060 <memset@plt>
   14530:	ldr	r3, [fp, #-16]
   14534:	mov	r2, #16
   14538:	str	r2, [r3, #124]	; 0x7c
   1453c:	ldr	r3, [fp, #-16]
   14540:	mov	r2, #0
   14544:	str	r2, [r3, #120]	; 0x78
   14548:	b	14550 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   1454c:	nop			; (mov r0, r0)
   14550:	sub	sp, fp, #4
   14554:	pop	{fp, pc}

00014558 <flatcc_builder_custom_init@@Base>:
   14558:	push	{r4, fp, lr}
   1455c:	add	fp, sp, #8
   14560:	sub	sp, sp, #20
   14564:	str	r0, [fp, #-16]
   14568:	str	r1, [fp, #-20]	; 0xffffffec
   1456c:	str	r2, [fp, #-24]	; 0xffffffe8
   14570:	str	r3, [fp, #-28]	; 0xffffffe4
   14574:	ldr	r4, [pc, #152]	; 14614 <flatcc_builder_custom_init@@Base+0xbc>
   14578:	add	r4, pc, r4
   1457c:	mov	r2, #232	; 0xe8
   14580:	mov	r1, #0
   14584:	ldr	r0, [fp, #-16]
   14588:	bl	12060 <memset@plt>
   1458c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14590:	cmp	r3, #0
   14594:	bne	145bc <flatcc_builder_custom_init@@Base+0x64>
   14598:	ldr	r3, [fp, #-16]
   1459c:	mov	r2, #1
   145a0:	str	r2, [r3, #184]	; 0xb8
   145a4:	ldr	r3, [pc, #108]	; 14618 <flatcc_builder_custom_init@@Base+0xc0>
   145a8:	ldr	r3, [r4, r3]
   145ac:	str	r3, [fp, #-20]	; 0xffffffec
   145b0:	ldr	r3, [fp, #-16]
   145b4:	add	r3, r3, #188	; 0xbc
   145b8:	str	r3, [fp, #-24]	; 0xffffffe8
   145bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   145c0:	cmp	r3, #0
   145c4:	bne	145d4 <flatcc_builder_custom_init@@Base+0x7c>
   145c8:	ldr	r3, [pc, #76]	; 1461c <flatcc_builder_custom_init@@Base+0xc4>
   145cc:	ldr	r3, [r4, r3]
   145d0:	str	r3, [fp, #-28]	; 0xffffffe4
   145d4:	ldr	r3, [fp, #-16]
   145d8:	ldr	r2, [fp, #4]
   145dc:	str	r2, [r3, #40]	; 0x28
   145e0:	ldr	r3, [fp, #-16]
   145e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   145e8:	str	r2, [r3, #48]	; 0x30
   145ec:	ldr	r3, [fp, #-16]
   145f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   145f4:	str	r2, [r3, #36]	; 0x24
   145f8:	ldr	r3, [fp, #-16]
   145fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14600:	str	r2, [r3, #44]	; 0x2c
   14604:	mov	r3, #0
   14608:	mov	r0, r3
   1460c:	sub	sp, fp, #8
   14610:	pop	{r4, fp, pc}
   14614:	andeq	r7, r1, r0, lsl #21
   14618:	andeq	r0, r0, ip, rrx
   1461c:	andeq	r0, r0, r8, rrx

00014620 <flatcc_builder_init@@Base>:
   14620:	push	{fp, lr}
   14624:	add	fp, sp, #4
   14628:	sub	sp, sp, #16
   1462c:	str	r0, [fp, #-8]
   14630:	mov	r3, #0
   14634:	str	r3, [sp]
   14638:	mov	r3, #0
   1463c:	mov	r2, #0
   14640:	mov	r1, #0
   14644:	ldr	r0, [fp, #-8]
   14648:	bl	14558 <flatcc_builder_custom_init@@Base>
   1464c:	mov	r3, r0
   14650:	mov	r0, r3
   14654:	sub	sp, fp, #4
   14658:	pop	{fp, pc}

0001465c <flatcc_builder_custom_reset@@Base>:
   1465c:	push	{r4, fp, lr}
   14660:	add	fp, sp, #8
   14664:	sub	sp, sp, #36	; 0x24
   14668:	str	r0, [fp, #-24]	; 0xffffffe8
   1466c:	str	r1, [fp, #-28]	; 0xffffffe4
   14670:	str	r2, [fp, #-32]	; 0xffffffe0
   14674:	mov	r3, #0
   14678:	str	r3, [fp, #-16]
   1467c:	b	14758 <flatcc_builder_custom_reset@@Base+0xfc>
   14680:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14684:	add	r2, r3, #52	; 0x34
   14688:	ldr	r3, [fp, #-16]
   1468c:	lsl	r3, r3, #3
   14690:	add	r3, r2, r3
   14694:	str	r3, [fp, #-20]	; 0xffffffec
   14698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1469c:	ldr	r3, [r3]
   146a0:	cmp	r3, #0
   146a4:	beq	1471c <flatcc_builder_custom_reset@@Base+0xc0>
   146a8:	ldr	r3, [fp, #-16]
   146ac:	cmp	r3, #5
   146b0:	beq	146fc <flatcc_builder_custom_reset@@Base+0xa0>
   146b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146b8:	cmp	r3, #0
   146bc:	beq	146fc <flatcc_builder_custom_reset@@Base+0xa0>
   146c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146c4:	ldr	r4, [r3, #48]	; 0x30
   146c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146cc:	ldr	r0, [r3, #40]	; 0x28
   146d0:	ldr	r3, [fp, #-16]
   146d4:	str	r3, [sp]
   146d8:	mov	r3, #1
   146dc:	mov	r2, #1
   146e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   146e4:	blx	r4
   146e8:	mov	r3, r0
   146ec:	cmp	r3, #0
   146f0:	beq	146fc <flatcc_builder_custom_reset@@Base+0xa0>
   146f4:	mvn	r3, #0
   146f8:	b	14888 <flatcc_builder_custom_reset@@Base+0x22c>
   146fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14700:	ldr	r0, [r3]
   14704:	ldr	r3, [fp, #-20]	; 0xffffffec
   14708:	ldr	r3, [r3, #4]
   1470c:	mov	r2, r3
   14710:	mov	r1, #0
   14714:	bl	12060 <memset@plt>
   14718:	b	1474c <flatcc_builder_custom_reset@@Base+0xf0>
   1471c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14720:	ldr	r3, [r3, #4]
   14724:	cmp	r3, #0
   14728:	beq	1474c <flatcc_builder_custom_reset@@Base+0xf0>
   1472c:	ldr	r3, [pc, #352]	; 14894 <flatcc_builder_custom_reset@@Base+0x238>
   14730:	add	r3, pc, r3
   14734:	ldr	r2, [pc, #348]	; 14898 <flatcc_builder_custom_reset@@Base+0x23c>
   14738:	ldr	r1, [pc, #348]	; 1489c <flatcc_builder_custom_reset@@Base+0x240>
   1473c:	add	r1, pc, r1
   14740:	ldr	r0, [pc, #344]	; 148a0 <flatcc_builder_custom_reset@@Base+0x244>
   14744:	add	r0, pc, r0
   14748:	bl	1209c <__assert_fail@plt>
   1474c:	ldr	r3, [fp, #-16]
   14750:	add	r3, r3, #1
   14754:	str	r3, [fp, #-16]
   14758:	ldr	r3, [fp, #-16]
   1475c:	cmp	r3, #7
   14760:	ble	14680 <flatcc_builder_custom_reset@@Base+0x24>
   14764:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14768:	mov	r2, #0
   1476c:	str	r2, [r3, #120]	; 0x78
   14770:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14774:	ldr	r3, [r3, #124]	; 0x7c
   14778:	cmp	r3, #0
   1477c:	beq	1478c <flatcc_builder_custom_reset@@Base+0x130>
   14780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14784:	mov	r2, #16
   14788:	str	r2, [r3, #124]	; 0x7c
   1478c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14790:	mov	r2, #0
   14794:	strh	r2, [r3, #128]	; 0x80
   14798:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1479c:	mov	r2, #0
   147a0:	str	r2, [r3, #136]	; 0x88
   147a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147a8:	mov	r2, #0
   147ac:	str	r2, [r3, #140]	; 0x8c
   147b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147b4:	mov	r2, #0
   147b8:	str	r2, [r3, #156]	; 0x9c
   147bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147c0:	mov	r2, #0
   147c4:	str	r2, [r3, #160]	; 0xa0
   147c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147cc:	mov	r2, #0
   147d0:	str	r2, [r3, #20]
   147d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147d8:	mov	r2, #0
   147dc:	str	r2, [r3, #24]
   147e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147e4:	mov	r2, #0
   147e8:	str	r2, [r3, #148]	; 0x94
   147ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147f0:	mov	r2, #0
   147f4:	str	r2, [r3, #152]	; 0x98
   147f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147fc:	ldr	r2, [r3, #60]	; 0x3c
   14800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14804:	str	r2, [r3, #16]
   14808:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1480c:	ldr	r2, [r3, #76]	; 0x4c
   14810:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14814:	str	r2, [r3]
   14818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1481c:	ldr	r2, [r3, #52]	; 0x34
   14820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14824:	str	r2, [r3, #4]
   14828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1482c:	mov	r2, #0
   14830:	str	r2, [r3, #32]
   14834:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14838:	cmp	r3, #0
   1483c:	beq	14864 <flatcc_builder_custom_reset@@Base+0x208>
   14840:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14844:	mov	r2, #0
   14848:	str	r2, [r3, #172]	; 0xac
   1484c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14850:	mov	r2, #0
   14854:	str	r2, [r3, #176]	; 0xb0
   14858:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1485c:	mov	r2, #0
   14860:	str	r2, [r3, #180]	; 0xb4
   14864:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14868:	ldr	r3, [r3, #184]	; 0xb8
   1486c:	cmp	r3, #0
   14870:	beq	14884 <flatcc_builder_custom_reset@@Base+0x228>
   14874:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14878:	add	r3, r3, #188	; 0xbc
   1487c:	mov	r0, r3
   14880:	bl	1a180 <flatcc_emitter_reset@@Base>
   14884:	mov	r3, #0
   14888:	mov	r0, r3
   1488c:	sub	sp, fp, #8
   14890:	pop	{r4, fp, pc}
   14894:	andeq	r6, r0, r0, lsr #24
   14898:			; <UNDEFINED> instruction: 0x000001b2
   1489c:	ldrdeq	r6, [r0], -r0
   148a0:	andeq	r6, r0, ip, lsr r8

000148a4 <flatcc_builder_reset@@Base>:
   148a4:	push	{fp, lr}
   148a8:	add	fp, sp, #4
   148ac:	sub	sp, sp, #8
   148b0:	str	r0, [fp, #-8]
   148b4:	mov	r2, #0
   148b8:	mov	r1, #0
   148bc:	ldr	r0, [fp, #-8]
   148c0:	bl	1465c <flatcc_builder_custom_reset@@Base>
   148c4:	mov	r3, r0
   148c8:	mov	r0, r3
   148cc:	sub	sp, fp, #4
   148d0:	pop	{fp, pc}

000148d4 <flatcc_builder_clear@@Base>:
   148d4:	push	{r4, fp, lr}
   148d8:	add	fp, sp, #8
   148dc:	sub	sp, sp, #28
   148e0:	str	r0, [fp, #-24]	; 0xffffffe8
   148e4:	mov	r3, #0
   148e8:	str	r3, [fp, #-16]
   148ec:	b	1493c <flatcc_builder_clear@@Base+0x68>
   148f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   148f4:	add	r2, r3, #52	; 0x34
   148f8:	ldr	r3, [fp, #-16]
   148fc:	lsl	r3, r3, #3
   14900:	add	r3, r2, r3
   14904:	str	r3, [fp, #-20]	; 0xffffffec
   14908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1490c:	ldr	r4, [r3, #48]	; 0x30
   14910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14914:	ldr	r0, [r3, #40]	; 0x28
   14918:	ldr	r3, [fp, #-16]
   1491c:	str	r3, [sp]
   14920:	mov	r3, #0
   14924:	mov	r2, #0
   14928:	ldr	r1, [fp, #-20]	; 0xffffffec
   1492c:	blx	r4
   14930:	ldr	r3, [fp, #-16]
   14934:	add	r3, r3, #1
   14938:	str	r3, [fp, #-16]
   1493c:	ldr	r3, [fp, #-16]
   14940:	cmp	r3, #7
   14944:	ble	148f0 <flatcc_builder_clear@@Base+0x1c>
   14948:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1494c:	ldr	r3, [r3, #184]	; 0xb8
   14950:	cmp	r3, #0
   14954:	beq	14968 <flatcc_builder_clear@@Base+0x94>
   14958:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1495c:	add	r3, r3, #188	; 0xbc
   14960:	mov	r0, r3
   14964:	bl	1a30c <flatcc_emitter_clear@@Base>
   14968:	mov	r2, #232	; 0xe8
   1496c:	mov	r1, #0
   14970:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14974:	bl	12060 <memset@plt>
   14978:	nop			; (mov r0, r0)
   1497c:	sub	sp, fp, #8
   14980:	pop	{r4, fp, pc}
   14984:	push	{fp}		; (str fp, [sp, #-4]!)
   14988:	add	fp, sp, #0
   1498c:	sub	sp, sp, #12
   14990:	str	r0, [fp, #-8]
   14994:	mov	r3, r1
   14998:	strh	r3, [fp, #-10]
   1499c:	ldr	r3, [fp, #-8]
   149a0:	ldrh	r3, [r3, #128]	; 0x80
   149a4:	ldrh	r2, [fp, #-10]
   149a8:	cmp	r2, r3
   149ac:	bls	149bc <flatcc_builder_clear@@Base+0xe8>
   149b0:	ldr	r3, [fp, #-8]
   149b4:	ldrh	r2, [fp, #-10]
   149b8:	strh	r2, [r3, #128]	; 0x80
   149bc:	nop			; (mov r0, r0)
   149c0:	add	sp, fp, #0
   149c4:	pop	{fp}		; (ldr fp, [sp], #4)
   149c8:	bx	lr
   149cc:	push	{fp}		; (str fp, [sp, #-4]!)
   149d0:	add	fp, sp, #0
   149d4:	sub	sp, sp, #12
   149d8:	str	r0, [fp, #-8]
   149dc:	mov	r3, r1
   149e0:	strh	r3, [fp, #-10]
   149e4:	ldr	r3, [fp, #-8]
   149e8:	ldrh	r3, [r3]
   149ec:	ldrh	r2, [fp, #-10]
   149f0:	cmp	r2, r3
   149f4:	bls	14a04 <flatcc_builder_clear@@Base+0x130>
   149f8:	ldr	r3, [fp, #-8]
   149fc:	ldrh	r2, [fp, #-10]
   14a00:	strh	r2, [r3]
   14a04:	nop			; (mov r0, r0)
   14a08:	add	sp, fp, #0
   14a0c:	pop	{fp}		; (ldr fp, [sp], #4)
   14a10:	bx	lr

00014a14 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14a14:	push	{fp, lr}
   14a18:	add	fp, sp, #4
   14a1c:	sub	sp, sp, #24
   14a20:	str	r0, [fp, #-16]
   14a24:	str	r1, [fp, #-20]	; 0xffffffec
   14a28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a2c:	add	r3, r3, #3
   14a30:	bic	r3, r3, #3
   14a34:	add	r3, r3, #4
   14a38:	str	r3, [fp, #-20]	; 0xffffffec
   14a3c:	ldr	r3, [fp, #-16]
   14a40:	ldr	r2, [r3, #228]	; 0xe4
   14a44:	mov	r3, #0
   14a48:	str	r3, [sp]
   14a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a50:	mov	r1, #7
   14a54:	ldr	r0, [fp, #-16]
   14a58:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   14a5c:	str	r0, [fp, #-8]
   14a60:	ldr	r3, [fp, #-8]
   14a64:	cmp	r3, #0
   14a68:	bne	14a74 <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   14a6c:	mov	r3, #0
   14a70:	b	14acc <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   14a74:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a78:	mov	r1, #0
   14a7c:	ldr	r0, [fp, #-8]
   14a80:	bl	12060 <memset@plt>
   14a84:	ldr	r3, [fp, #-8]
   14a88:	add	r2, r3, #4
   14a8c:	str	r2, [fp, #-8]
   14a90:	ldr	r2, [fp, #-16]
   14a94:	ldr	r2, [r2, #224]	; 0xe0
   14a98:	str	r2, [r3]
   14a9c:	ldr	r3, [fp, #-16]
   14aa0:	ldr	r3, [r3, #228]	; 0xe4
   14aa4:	add	r2, r3, #4
   14aa8:	ldr	r3, [fp, #-16]
   14aac:	str	r2, [r3, #224]	; 0xe0
   14ab0:	ldr	r3, [fp, #-16]
   14ab4:	ldr	r2, [r3, #228]	; 0xe4
   14ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14abc:	add	r2, r2, r3
   14ac0:	ldr	r3, [fp, #-16]
   14ac4:	str	r2, [r3, #228]	; 0xe4
   14ac8:	ldr	r3, [fp, #-8]
   14acc:	mov	r0, r3
   14ad0:	sub	sp, fp, #4
   14ad4:	pop	{fp, pc}

00014ad8 <flatcc_builder_enter_user_frame@@Base>:
   14ad8:	push	{fp, lr}
   14adc:	add	fp, sp, #4
   14ae0:	sub	sp, sp, #24
   14ae4:	str	r0, [fp, #-16]
   14ae8:	str	r1, [fp, #-20]	; 0xffffffec
   14aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14af0:	add	r3, r3, #3
   14af4:	bic	r3, r3, #3
   14af8:	add	r3, r3, #4
   14afc:	str	r3, [fp, #-20]	; 0xffffffec
   14b00:	ldr	r3, [fp, #-16]
   14b04:	ldr	r2, [r3, #228]	; 0xe4
   14b08:	mov	r3, #0
   14b0c:	str	r3, [sp]
   14b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b14:	mov	r1, #7
   14b18:	ldr	r0, [fp, #-16]
   14b1c:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   14b20:	str	r0, [fp, #-8]
   14b24:	ldr	r3, [fp, #-8]
   14b28:	cmp	r3, #0
   14b2c:	bne	14b38 <flatcc_builder_enter_user_frame@@Base+0x60>
   14b30:	mov	r3, #0
   14b34:	b	14b94 <flatcc_builder_enter_user_frame@@Base+0xbc>
   14b38:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b3c:	mov	r1, #0
   14b40:	ldr	r0, [fp, #-8]
   14b44:	bl	12060 <memset@plt>
   14b48:	ldr	r3, [fp, #-8]
   14b4c:	add	r2, r3, #4
   14b50:	str	r2, [fp, #-8]
   14b54:	ldr	r2, [fp, #-16]
   14b58:	ldr	r2, [r2, #224]	; 0xe0
   14b5c:	str	r2, [r3]
   14b60:	ldr	r3, [fp, #-16]
   14b64:	ldr	r3, [r3, #228]	; 0xe4
   14b68:	add	r2, r3, #4
   14b6c:	ldr	r3, [fp, #-16]
   14b70:	str	r2, [r3, #224]	; 0xe0
   14b74:	ldr	r3, [fp, #-16]
   14b78:	ldr	r2, [r3, #228]	; 0xe4
   14b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b80:	add	r2, r2, r3
   14b84:	ldr	r3, [fp, #-16]
   14b88:	str	r2, [r3, #228]	; 0xe4
   14b8c:	ldr	r3, [fp, #-16]
   14b90:	ldr	r3, [r3, #224]	; 0xe0
   14b94:	mov	r0, r3
   14b98:	sub	sp, fp, #4
   14b9c:	pop	{fp, pc}

00014ba0 <flatcc_builder_exit_user_frame@@Base>:
   14ba0:	push	{fp, lr}
   14ba4:	add	fp, sp, #4
   14ba8:	sub	sp, sp, #16
   14bac:	str	r0, [fp, #-16]
   14bb0:	ldr	r3, [fp, #-16]
   14bb4:	ldr	r3, [r3, #224]	; 0xe0
   14bb8:	cmp	r3, #0
   14bbc:	bne	14be0 <flatcc_builder_exit_user_frame@@Base+0x40>
   14bc0:	ldr	r3, [pc, #104]	; 14c30 <flatcc_builder_exit_user_frame@@Base+0x90>
   14bc4:	add	r3, pc, r3
   14bc8:	ldr	r2, [pc, #100]	; 14c34 <flatcc_builder_exit_user_frame@@Base+0x94>
   14bcc:	ldr	r1, [pc, #100]	; 14c38 <flatcc_builder_exit_user_frame@@Base+0x98>
   14bd0:	add	r1, pc, r1
   14bd4:	ldr	r0, [pc, #96]	; 14c3c <flatcc_builder_exit_user_frame@@Base+0x9c>
   14bd8:	add	r0, pc, r0
   14bdc:	bl	1209c <__assert_fail@plt>
   14be0:	ldr	r3, [fp, #-16]
   14be4:	ldr	r2, [r3, #108]	; 0x6c
   14be8:	ldr	r3, [fp, #-16]
   14bec:	ldr	r3, [r3, #224]	; 0xe0
   14bf0:	add	r3, r2, r3
   14bf4:	str	r3, [fp, #-8]
   14bf8:	ldr	r3, [fp, #-16]
   14bfc:	ldr	r3, [r3, #224]	; 0xe0
   14c00:	sub	r2, r3, #4
   14c04:	ldr	r3, [fp, #-16]
   14c08:	str	r2, [r3, #228]	; 0xe4
   14c0c:	ldr	r3, [fp, #-8]
   14c10:	ldr	r2, [r3, #-4]
   14c14:	ldr	r3, [fp, #-16]
   14c18:	str	r2, [r3, #224]	; 0xe0
   14c1c:	ldr	r3, [fp, #-16]
   14c20:	ldr	r3, [r3, #224]	; 0xe0
   14c24:	mov	r0, r3
   14c28:	sub	sp, fp, #4
   14c2c:	pop	{fp, pc}
   14c30:	andeq	r6, r0, r8, lsr #15
   14c34:	andeq	r0, r0, lr, lsl r2
   14c38:	andeq	r6, r0, ip, lsr r3
   14c3c:			; <UNDEFINED> instruction: 0x000063bc

00014c40 <flatcc_builder_exit_user_frame_at@@Base>:
   14c40:	push	{fp, lr}
   14c44:	add	fp, sp, #4
   14c48:	sub	sp, sp, #8
   14c4c:	str	r0, [fp, #-8]
   14c50:	str	r1, [fp, #-12]
   14c54:	ldr	r3, [fp, #-8]
   14c58:	ldr	r2, [r3, #224]	; 0xe0
   14c5c:	ldr	r3, [fp, #-12]
   14c60:	cmp	r2, r3
   14c64:	bcs	14c88 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14c68:	ldr	r3, [pc, #60]	; 14cac <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   14c6c:	add	r3, pc, r3
   14c70:	ldr	r2, [pc, #56]	; 14cb0 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   14c74:	ldr	r1, [pc, #56]	; 14cb4 <flatcc_builder_exit_user_frame_at@@Base+0x74>
   14c78:	add	r1, pc, r1
   14c7c:	ldr	r0, [pc, #52]	; 14cb8 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   14c80:	add	r0, pc, r0
   14c84:	bl	1209c <__assert_fail@plt>
   14c88:	ldr	r3, [fp, #-8]
   14c8c:	ldr	r2, [fp, #-12]
   14c90:	str	r2, [r3, #224]	; 0xe0
   14c94:	ldr	r0, [fp, #-8]
   14c98:	bl	14ba0 <flatcc_builder_exit_user_frame@@Base>
   14c9c:	mov	r3, r0
   14ca0:	mov	r0, r3
   14ca4:	sub	sp, fp, #4
   14ca8:	pop	{fp, pc}
   14cac:	andeq	r6, r0, r0, lsr #14
   14cb0:	andeq	r0, r0, r7, lsr #4
   14cb4:	muleq	r0, r4, r2
   14cb8:	andeq	r6, r0, r0, lsr r3

00014cbc <flatcc_builder_get_current_user_frame@@Base>:
   14cbc:	push	{fp}		; (str fp, [sp, #-4]!)
   14cc0:	add	fp, sp, #0
   14cc4:	sub	sp, sp, #12
   14cc8:	str	r0, [fp, #-8]
   14ccc:	ldr	r3, [fp, #-8]
   14cd0:	ldr	r3, [r3, #224]	; 0xe0
   14cd4:	mov	r0, r3
   14cd8:	add	sp, fp, #0
   14cdc:	pop	{fp}		; (ldr fp, [sp], #4)
   14ce0:	bx	lr

00014ce4 <flatcc_builder_get_user_frame_ptr@@Base>:
   14ce4:	push	{fp}		; (str fp, [sp, #-4]!)
   14ce8:	add	fp, sp, #0
   14cec:	sub	sp, sp, #12
   14cf0:	str	r0, [fp, #-8]
   14cf4:	str	r1, [fp, #-12]
   14cf8:	ldr	r3, [fp, #-8]
   14cfc:	ldr	r2, [r3, #108]	; 0x6c
   14d00:	ldr	r3, [fp, #-12]
   14d04:	add	r3, r2, r3
   14d08:	mov	r0, r3
   14d0c:	add	sp, fp, #0
   14d10:	pop	{fp}		; (ldr fp, [sp], #4)
   14d14:	bx	lr
   14d18:	push	{fp, lr}
   14d1c:	add	fp, sp, #4
   14d20:	sub	sp, sp, #16
   14d24:	str	r0, [fp, #-8]
   14d28:	mov	r3, r1
   14d2c:	strh	r3, [fp, #-10]
   14d30:	ldr	r3, [fp, #-8]
   14d34:	ldr	r3, [r3, #156]	; 0x9c
   14d38:	add	r2, r3, #1
   14d3c:	ldr	r3, [fp, #-8]
   14d40:	str	r2, [r3, #156]	; 0x9c
   14d44:	ldr	r3, [fp, #-8]
   14d48:	ldr	r2, [r3, #156]	; 0x9c
   14d4c:	ldr	r3, [fp, #-8]
   14d50:	ldr	r3, [r3, #160]	; 0xa0
   14d54:	cmp	r2, r3
   14d58:	ble	14e48 <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   14d5c:	ldr	r3, [fp, #-8]
   14d60:	ldr	r3, [r3, #176]	; 0xb0
   14d64:	cmp	r3, #0
   14d68:	ble	14d8c <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   14d6c:	ldr	r3, [fp, #-8]
   14d70:	ldr	r2, [r3, #156]	; 0x9c
   14d74:	ldr	r3, [fp, #-8]
   14d78:	ldr	r3, [r3, #176]	; 0xb0
   14d7c:	cmp	r2, r3
   14d80:	ble	14d8c <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   14d84:	mvn	r3, #0
   14d88:	b	14ee8 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   14d8c:	ldr	r3, [fp, #-8]
   14d90:	ldr	r3, [r3, #156]	; 0x9c
   14d94:	sub	r3, r3, #1
   14d98:	mov	r2, r3
   14d9c:	mov	r3, r2
   14da0:	lsl	r3, r3, #3
   14da4:	add	r3, r3, r2
   14da8:	lsl	r3, r3, #2
   14dac:	mov	r2, r3
   14db0:	mov	r3, #0
   14db4:	str	r3, [sp]
   14db8:	mov	r3, #36	; 0x24
   14dbc:	mov	r1, #4
   14dc0:	ldr	r0, [fp, #-8]
   14dc4:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   14dc8:	mov	r2, r0
   14dcc:	ldr	r3, [fp, #-8]
   14dd0:	str	r2, [r3, #32]
   14dd4:	ldr	r3, [fp, #-8]
   14dd8:	ldr	r3, [r3, #32]
   14ddc:	cmp	r3, #0
   14de0:	bne	14dec <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   14de4:	mvn	r3, #0
   14de8:	b	14ee8 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   14dec:	ldr	r3, [fp, #-8]
   14df0:	ldr	r3, [r3, #88]	; 0x58
   14df4:	ldr	r2, [pc, #248]	; 14ef4 <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   14df8:	umull	r2, r3, r2, r3
   14dfc:	lsr	r3, r3, #3
   14e00:	mov	r2, r3
   14e04:	ldr	r3, [fp, #-8]
   14e08:	str	r2, [r3, #160]	; 0xa0
   14e0c:	ldr	r3, [fp, #-8]
   14e10:	ldr	r3, [r3, #176]	; 0xb0
   14e14:	cmp	r3, #0
   14e18:	ble	14e5c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   14e1c:	ldr	r3, [fp, #-8]
   14e20:	ldr	r2, [r3, #176]	; 0xb0
   14e24:	ldr	r3, [fp, #-8]
   14e28:	ldr	r3, [r3, #160]	; 0xa0
   14e2c:	cmp	r2, r3
   14e30:	bge	14e5c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   14e34:	ldr	r3, [fp, #-8]
   14e38:	ldr	r2, [r3, #176]	; 0xb0
   14e3c:	ldr	r3, [fp, #-8]
   14e40:	str	r2, [r3, #160]	; 0xa0
   14e44:	b	14e5c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   14e48:	ldr	r3, [fp, #-8]
   14e4c:	ldr	r3, [r3, #32]
   14e50:	add	r2, r3, #36	; 0x24
   14e54:	ldr	r3, [fp, #-8]
   14e58:	str	r2, [r3, #32]
   14e5c:	ldr	r3, [fp, #-8]
   14e60:	ldr	r3, [r3, #32]
   14e64:	ldr	r2, [fp, #-8]
   14e68:	ldr	r2, [r2, #20]
   14e6c:	str	r2, [r3, #8]
   14e70:	ldr	r3, [fp, #-8]
   14e74:	ldr	r3, [r3, #32]
   14e78:	ldr	r2, [fp, #-8]
   14e7c:	ldrh	r2, [r2, #130]	; 0x82
   14e80:	strh	r2, [r3, #12]
   14e84:	ldr	r3, [fp, #-8]
   14e88:	ldrh	r2, [fp, #-10]
   14e8c:	strh	r2, [r3, #130]	; 0x82
   14e90:	ldr	r3, [fp, #-8]
   14e94:	ldr	r3, [r3, #32]
   14e98:	ldr	r2, [fp, #-8]
   14e9c:	ldr	r2, [r2, #28]
   14ea0:	str	r2, [r3]
   14ea4:	ldr	r3, [fp, #-8]
   14ea8:	ldr	r3, [r3, #32]
   14eac:	mvn	r2, #3
   14eb0:	str	r2, [r3, #4]
   14eb4:	ldr	r3, [fp, #-8]
   14eb8:	ldr	r2, [r3, #28]
   14ebc:	ldr	r3, [fp, #-8]
   14ec0:	ldr	r3, [r3, #20]
   14ec4:	add	r3, r2, r3
   14ec8:	add	r3, r3, #7
   14ecc:	bic	r2, r3, #7
   14ed0:	ldr	r3, [fp, #-8]
   14ed4:	str	r2, [r3, #28]
   14ed8:	ldr	r3, [fp, #-8]
   14edc:	mov	r2, #0
   14ee0:	str	r2, [r3, #20]
   14ee4:	mov	r3, #0
   14ee8:	mov	r0, r3
   14eec:	sub	sp, fp, #4
   14ef0:	pop	{fp, pc}
   14ef4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   14ef8:	push	{fp, lr}
   14efc:	add	fp, sp, #4
   14f00:	sub	sp, sp, #8
   14f04:	str	r0, [fp, #-8]
   14f08:	ldr	r3, [fp, #-8]
   14f0c:	ldr	r0, [r3, #16]
   14f10:	ldr	r3, [fp, #-8]
   14f14:	ldr	r3, [r3, #20]
   14f18:	mov	r2, r3
   14f1c:	mov	r1, #0
   14f20:	bl	12060 <memset@plt>
   14f24:	ldr	r3, [fp, #-8]
   14f28:	ldr	r3, [r3, #32]
   14f2c:	ldr	r2, [r3, #8]
   14f30:	ldr	r3, [fp, #-8]
   14f34:	str	r2, [r3, #20]
   14f38:	ldr	r3, [fp, #-8]
   14f3c:	ldr	r3, [r3, #32]
   14f40:	ldr	r2, [r3]
   14f44:	ldr	r3, [fp, #-8]
   14f48:	str	r2, [r3, #28]
   14f4c:	ldr	r3, [fp, #-8]
   14f50:	ldr	r3, [r3, #32]
   14f54:	ldr	r3, [r3, #4]
   14f58:	mov	r1, r3
   14f5c:	ldr	r0, [fp, #-8]
   14f60:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   14f64:	ldr	r3, [fp, #-8]
   14f68:	ldrh	r3, [r3, #130]	; 0x82
   14f6c:	mov	r1, r3
   14f70:	ldr	r0, [fp, #-8]
   14f74:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   14f78:	ldr	r3, [fp, #-8]
   14f7c:	ldr	r3, [r3, #32]
   14f80:	ldrh	r2, [r3, #12]
   14f84:	ldr	r3, [fp, #-8]
   14f88:	strh	r2, [r3, #130]	; 0x82
   14f8c:	ldr	r3, [fp, #-8]
   14f90:	ldr	r3, [r3, #32]
   14f94:	sub	r2, r3, #36	; 0x24
   14f98:	ldr	r3, [fp, #-8]
   14f9c:	str	r2, [r3, #32]
   14fa0:	ldr	r3, [fp, #-8]
   14fa4:	ldr	r3, [r3, #156]	; 0x9c
   14fa8:	sub	r2, r3, #1
   14fac:	ldr	r3, [fp, #-8]
   14fb0:	str	r2, [r3, #156]	; 0x9c
   14fb4:	nop			; (mov r0, r0)
   14fb8:	sub	sp, fp, #4
   14fbc:	pop	{fp, pc}
   14fc0:	push	{fp}		; (str fp, [sp, #-4]!)
   14fc4:	add	fp, sp, #0
   14fc8:	sub	sp, sp, #20
   14fcc:	str	r0, [fp, #-8]
   14fd0:	str	r1, [fp, #-12]
   14fd4:	mov	r3, r2
   14fd8:	strh	r3, [fp, #-14]
   14fdc:	ldr	r3, [fp, #-8]
   14fe0:	ldr	r3, [r3, #136]	; 0x88
   14fe4:	mov	r2, r3
   14fe8:	ldr	r3, [fp, #-12]
   14fec:	sub	r3, r2, r3
   14ff0:	ldrh	r2, [fp, #-14]
   14ff4:	sub	r2, r2, #1
   14ff8:	and	r3, r3, r2
   14ffc:	mov	r0, r3
   15000:	add	sp, fp, #0
   15004:	pop	{fp}		; (ldr fp, [sp], #4)
   15008:	bx	lr
   1500c:	push	{fp}		; (str fp, [sp, #-4]!)
   15010:	add	fp, sp, #0
   15014:	sub	sp, sp, #12
   15018:	str	r0, [fp, #-8]
   1501c:	mov	r3, r1
   15020:	strh	r3, [fp, #-10]
   15024:	ldr	r3, [fp, #-8]
   15028:	ldr	r2, [r3, #140]	; 0x8c
   1502c:	ldrh	r3, [fp, #-10]
   15030:	sub	r3, r3, #1
   15034:	and	r3, r3, r2
   15038:	mov	r0, r3
   1503c:	add	sp, fp, #0
   15040:	pop	{fp}		; (ldr fp, [sp], #4)
   15044:	bx	lr
   15048:	push	{r4, fp, lr}
   1504c:	add	fp, sp, #8
   15050:	sub	sp, sp, #28
   15054:	str	r0, [fp, #-24]	; 0xffffffe8
   15058:	str	r1, [fp, #-28]	; 0xffffffe4
   1505c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15060:	ldr	r3, [r3, #136]	; 0x88
   15064:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15068:	ldr	r2, [r2]
   1506c:	sub	r3, r3, r2
   15070:	str	r3, [fp, #-16]
   15074:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15078:	ldr	r2, [r3, #136]	; 0x88
   1507c:	ldr	r3, [fp, #-16]
   15080:	cmp	r2, r3
   15084:	bgt	150a8 <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   15088:	ldr	r3, [pc, #152]	; 15128 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   1508c:	add	r3, pc, r3
   15090:	ldr	r2, [pc, #148]	; 1512c <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   15094:	ldr	r1, [pc, #148]	; 15130 <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   15098:	add	r1, pc, r1
   1509c:	ldr	r0, [pc, #144]	; 15134 <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   150a0:	add	r0, pc, r0
   150a4:	bl	1209c <__assert_fail@plt>
   150a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150ac:	ldr	r4, [r3, #44]	; 0x2c
   150b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150b4:	ldr	r0, [r3, #36]	; 0x24
   150b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150bc:	add	r1, r3, #8
   150c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150c4:	ldr	r2, [r3, #4]
   150c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150cc:	ldr	r3, [r3]
   150d0:	str	r3, [sp]
   150d4:	ldr	r3, [fp, #-16]
   150d8:	blx	r4
   150dc:	mov	r3, r0
   150e0:	cmp	r3, #0
   150e4:	beq	15108 <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   150e8:	ldr	r3, [pc, #72]	; 15138 <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   150ec:	add	r3, pc, r3
   150f0:	ldr	r2, [pc, #68]	; 1513c <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   150f4:	ldr	r1, [pc, #68]	; 15140 <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   150f8:	add	r1, pc, r1
   150fc:	ldr	r0, [pc, #64]	; 15144 <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   15100:	add	r0, pc, r0
   15104:	bl	1209c <__assert_fail@plt>
   15108:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1510c:	ldr	r2, [fp, #-16]
   15110:	str	r2, [r3, #136]	; 0x88
   15114:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15118:	ldr	r3, [r3, #136]	; 0x88
   1511c:	mov	r0, r3
   15120:	sub	sp, fp, #8
   15124:	pop	{r4, fp, pc}
   15128:	andeq	r6, r0, r0, asr #6
   1512c:	andeq	r0, r0, r7, lsl #5
   15130:	andeq	r5, r0, r4, ror lr
   15134:	andeq	r5, r0, ip, asr #29
   15138:	andeq	r6, r0, r0, ror #5
   1513c:	andeq	r0, r0, fp, lsl #5
   15140:	andeq	r5, r0, r4, lsl lr
   15144:	andeq	r5, r0, ip, ror #28
   15148:	push	{r4, fp, lr}
   1514c:	add	fp, sp, #8
   15150:	sub	sp, sp, #28
   15154:	str	r0, [fp, #-24]	; 0xffffffe8
   15158:	str	r1, [fp, #-28]	; 0xffffffe4
   1515c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15160:	ldr	r3, [r3, #140]	; 0x8c
   15164:	str	r3, [fp, #-16]
   15168:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1516c:	ldr	r3, [r3]
   15170:	mov	r2, r3
   15174:	ldr	r3, [fp, #-16]
   15178:	add	r2, r2, r3
   1517c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15180:	str	r2, [r3, #140]	; 0x8c
   15184:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15188:	ldr	r2, [r3, #140]	; 0x8c
   1518c:	ldr	r3, [fp, #-16]
   15190:	cmp	r2, r3
   15194:	bge	151b8 <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   15198:	ldr	r3, [pc, #140]	; 1522c <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   1519c:	add	r3, pc, r3
   151a0:	ldr	r2, [pc, #136]	; 15230 <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   151a4:	ldr	r1, [pc, #136]	; 15234 <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   151a8:	add	r1, pc, r1
   151ac:	ldr	r0, [pc, #132]	; 15238 <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   151b0:	add	r0, pc, r0
   151b4:	bl	1209c <__assert_fail@plt>
   151b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151bc:	ldr	r4, [r3, #44]	; 0x2c
   151c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151c4:	ldr	r0, [r3, #36]	; 0x24
   151c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151cc:	add	r1, r3, #8
   151d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151d4:	ldr	r2, [r3, #4]
   151d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151dc:	ldr	r3, [r3]
   151e0:	str	r3, [sp]
   151e4:	ldr	r3, [fp, #-16]
   151e8:	blx	r4
   151ec:	mov	r3, r0
   151f0:	cmp	r3, #0
   151f4:	beq	15218 <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   151f8:	ldr	r3, [pc, #60]	; 1523c <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   151fc:	add	r3, pc, r3
   15200:	ldr	r2, [pc, #56]	; 15240 <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   15204:	ldr	r1, [pc, #56]	; 15244 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   15208:	add	r1, pc, r1
   1520c:	ldr	r0, [pc, #52]	; 15248 <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   15210:	add	r0, pc, r0
   15214:	bl	1209c <__assert_fail@plt>
   15218:	ldr	r3, [fp, #-16]
   1521c:	add	r3, r3, #1
   15220:	mov	r0, r3
   15224:	sub	sp, fp, #8
   15228:	pop	{r4, fp, pc}
   1522c:	andeq	r6, r0, r4, lsr #4
   15230:	andeq	r0, r0, r1, lsr #5
   15234:	andeq	r5, r0, r4, ror #26
   15238:			; <UNDEFINED> instruction: 0x00005dbc
   1523c:	andeq	r6, r0, r4, asr #3
   15240:	andeq	r0, r0, r5, lsr #5
   15244:	andeq	r5, r0, r4, lsl #26
   15248:	andeq	r5, r0, ip, asr sp
   1524c:	push	{r4, fp, lr}
   15250:	add	fp, sp, #8
   15254:	sub	sp, sp, #100	; 0x64
   15258:	str	r0, [fp, #-96]	; 0xffffffa0
   1525c:	str	r1, [fp, #-100]	; 0xffffff9c
   15260:	str	r3, [fp, #-108]	; 0xffffff94
   15264:	strh	r2, [fp, #-102]	; 0xffffff9a
   15268:	ldr	r4, [pc, #320]	; 153b0 <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   1526c:	add	r4, pc, r4
   15270:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15274:	cmp	r3, #0
   15278:	bne	152a0 <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   1527c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15280:	ldrh	r3, [r3, #132]	; 0x84
   15284:	cmp	r3, #0
   15288:	beq	15298 <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   1528c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15290:	ldrh	r3, [r3, #132]	; 0x84
   15294:	b	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   15298:	mov	r3, #1
   1529c:	b	152a4 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   152a0:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   152a4:	strh	r3, [fp, #-102]	; 0xffffff9a
   152a8:	mov	r1, #4
   152ac:	ldr	r0, [fp, #-100]	; 0xffffff9c
   152b0:	bl	149cc <flatcc_builder_clear@@Base+0xf8>
   152b4:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   152b8:	mov	r1, r3
   152bc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   152c0:	bl	149cc <flatcc_builder_clear@@Base+0xf8>
   152c4:	ldr	r3, [fp, #-108]	; 0xffffff94
   152c8:	cmp	r3, #0
   152cc:	bne	153a0 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   152d0:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   152d4:	mov	r1, r3
   152d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   152dc:	bl	1500c <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   152e0:	str	r0, [fp, #-16]
   152e4:	ldr	r3, [fp, #-16]
   152e8:	cmp	r3, #0
   152ec:	beq	153a0 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   152f0:	mov	r3, #0
   152f4:	str	r3, [fp, #-88]	; 0xffffffa8
   152f8:	mov	r3, #0
   152fc:	str	r3, [fp, #-84]	; 0xffffffac
   15300:	ldr	r3, [fp, #-16]
   15304:	cmp	r3, #0
   15308:	beq	15364 <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   1530c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15310:	ldr	r3, [fp, #-16]
   15314:	add	r3, r2, r3
   15318:	str	r3, [fp, #-88]	; 0xffffffa8
   1531c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15320:	add	r3, r3, #1
   15324:	lsl	r3, r3, #3
   15328:	sub	r2, fp, #12
   1532c:	add	r3, r2, r3
   15330:	ldr	r2, [pc, #124]	; 153b4 <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   15334:	ldr	r2, [r4, r2]
   15338:	str	r2, [r3, #-76]	; 0xffffffb4
   1533c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15340:	add	r3, r3, #1
   15344:	lsl	r3, r3, #3
   15348:	sub	r2, fp, #12
   1534c:	add	r3, r2, r3
   15350:	ldr	r2, [fp, #-16]
   15354:	str	r2, [r3, #-72]	; 0xffffffb8
   15358:	ldr	r3, [fp, #-84]	; 0xffffffac
   1535c:	add	r3, r3, #1
   15360:	str	r3, [fp, #-84]	; 0xffffffac
   15364:	sub	r3, fp, #88	; 0x58
   15368:	mov	r1, r3
   1536c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15370:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   15374:	mov	r3, r0
   15378:	cmp	r3, #0
   1537c:	bne	153a0 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   15380:	ldr	r3, [pc, #48]	; 153b8 <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   15384:	add	r3, pc, r3
   15388:	ldr	r2, [pc, #44]	; 153bc <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   1538c:	ldr	r1, [pc, #44]	; 153c0 <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   15390:	add	r1, pc, r1
   15394:	ldr	r0, [pc, #40]	; 153c4 <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   15398:	add	r0, pc, r0
   1539c:	bl	1209c <__assert_fail@plt>
   153a0:	mov	r3, #0
   153a4:	mov	r0, r3
   153a8:	sub	sp, fp, #8
   153ac:	pop	{r4, fp, pc}
   153b0:	andeq	r6, r1, ip, lsl #27
   153b4:	andeq	r0, r0, r0, rrx
   153b8:	andeq	r6, r0, ip, lsr #32
   153bc:			; <UNDEFINED> instruction: 0x000002be
   153c0:	andeq	r5, r0, ip, ror fp
   153c4:	ldrdeq	r5, [r0], -r4

000153c8 <flatcc_builder_embed_buffer@@Base>:
   153c8:	push	{r4, fp, lr}
   153cc:	add	fp, sp, #8
   153d0:	sub	sp, sp, #108	; 0x6c
   153d4:	str	r0, [fp, #-104]	; 0xffffff98
   153d8:	str	r2, [fp, #-112]	; 0xffffff90
   153dc:	str	r3, [fp, #-116]	; 0xffffff8c
   153e0:	strh	r1, [fp, #-106]	; 0xffffff96
   153e4:	ldr	r4, [pc, #492]	; 155d8 <flatcc_builder_embed_buffer@@Base+0x210>
   153e8:	add	r4, pc, r4
   153ec:	ldr	r3, [fp, #8]
   153f0:	and	r3, r3, #2
   153f4:	str	r3, [fp, #-16]
   153f8:	ldr	r3, [fp, #-104]	; 0xffffff98
   153fc:	ldr	r3, [r3, #152]	; 0x98
   15400:	cmp	r3, #0
   15404:	movne	r3, #1
   15408:	moveq	r3, #0
   1540c:	uxtb	r3, r3
   15410:	ldrh	r2, [fp, #-106]	; 0xffffff96
   15414:	add	r1, fp, #4
   15418:	ldr	r0, [fp, #-104]	; 0xffffff98
   1541c:	bl	1524c <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   15420:	mov	r3, r0
   15424:	cmp	r3, #0
   15428:	beq	15434 <flatcc_builder_embed_buffer@@Base+0x6c>
   1542c:	mov	r3, #0
   15430:	b	155cc <flatcc_builder_embed_buffer@@Base+0x204>
   15434:	ldr	r3, [fp, #-16]
   15438:	cmp	r3, #0
   1543c:	beq	15448 <flatcc_builder_embed_buffer@@Base+0x80>
   15440:	mov	r2, #4
   15444:	b	1544c <flatcc_builder_embed_buffer@@Base+0x84>
   15448:	mov	r2, #0
   1544c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15450:	add	r3, r2, r3
   15454:	ldrh	r2, [fp, #4]
   15458:	mov	r1, r3
   1545c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15460:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15464:	str	r0, [fp, #-20]	; 0xffffffec
   15468:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1546c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15470:	add	r3, r2, r3
   15474:	mov	r0, r3
   15478:	bl	13984 <main@@Base+0x3dc>
   1547c:	mov	r3, r0
   15480:	str	r3, [fp, #-24]	; 0xffffffe8
   15484:	mov	r3, #0
   15488:	str	r3, [fp, #-96]	; 0xffffffa0
   1548c:	mov	r3, #0
   15490:	str	r3, [fp, #-92]	; 0xffffffa4
   15494:	ldr	r3, [fp, #-104]	; 0xffffff98
   15498:	ldr	r3, [r3, #152]	; 0x98
   1549c:	cmp	r3, #0
   154a0:	beq	154f4 <flatcc_builder_embed_buffer@@Base+0x12c>
   154a4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   154a8:	add	r3, r3, #4
   154ac:	str	r3, [fp, #-96]	; 0xffffffa0
   154b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154b4:	add	r3, r3, #1
   154b8:	lsl	r3, r3, #3
   154bc:	sub	r2, fp, #12
   154c0:	add	r3, r2, r3
   154c4:	sub	r2, fp, #24
   154c8:	str	r2, [r3, #-84]	; 0xffffffac
   154cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154d0:	add	r3, r3, #1
   154d4:	lsl	r3, r3, #3
   154d8:	sub	r2, fp, #12
   154dc:	add	r3, r2, r3
   154e0:	mov	r2, #4
   154e4:	str	r2, [r3, #-80]	; 0xffffffb0
   154e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154ec:	add	r3, r3, #1
   154f0:	str	r3, [fp, #-92]	; 0xffffffa4
   154f4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   154f8:	cmp	r3, #0
   154fc:	beq	15554 <flatcc_builder_embed_buffer@@Base+0x18c>
   15500:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15504:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15508:	add	r3, r2, r3
   1550c:	str	r3, [fp, #-96]	; 0xffffffa0
   15510:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15514:	add	r3, r3, #1
   15518:	lsl	r3, r3, #3
   1551c:	sub	r2, fp, #12
   15520:	add	r3, r2, r3
   15524:	ldr	r2, [fp, #-112]	; 0xffffff90
   15528:	str	r2, [r3, #-84]	; 0xffffffac
   1552c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15530:	add	r3, r3, #1
   15534:	lsl	r3, r3, #3
   15538:	sub	r2, fp, #12
   1553c:	add	r3, r2, r3
   15540:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15544:	str	r2, [r3, #-80]	; 0xffffffb0
   15548:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1554c:	add	r3, r3, #1
   15550:	str	r3, [fp, #-92]	; 0xffffffa4
   15554:	ldr	r3, [fp, #-20]	; 0xffffffec
   15558:	cmp	r3, #0
   1555c:	beq	155b8 <flatcc_builder_embed_buffer@@Base+0x1f0>
   15560:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15564:	ldr	r3, [fp, #-20]	; 0xffffffec
   15568:	add	r3, r2, r3
   1556c:	str	r3, [fp, #-96]	; 0xffffffa0
   15570:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15574:	add	r3, r3, #1
   15578:	lsl	r3, r3, #3
   1557c:	sub	r2, fp, #12
   15580:	add	r3, r2, r3
   15584:	ldr	r2, [pc, #80]	; 155dc <flatcc_builder_embed_buffer@@Base+0x214>
   15588:	ldr	r2, [r4, r2]
   1558c:	str	r2, [r3, #-84]	; 0xffffffac
   15590:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15594:	add	r3, r3, #1
   15598:	lsl	r3, r3, #3
   1559c:	sub	r2, fp, #12
   155a0:	add	r3, r2, r3
   155a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   155a8:	str	r2, [r3, #-80]	; 0xffffffb0
   155ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155b0:	add	r3, r3, #1
   155b4:	str	r3, [fp, #-92]	; 0xffffffa4
   155b8:	sub	r3, fp, #96	; 0x60
   155bc:	mov	r1, r3
   155c0:	ldr	r0, [fp, #-104]	; 0xffffff98
   155c4:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   155c8:	mov	r3, r0
   155cc:	mov	r0, r3
   155d0:	sub	sp, fp, #8
   155d4:	pop	{r4, fp, pc}
   155d8:	andeq	r6, r1, r0, lsl ip
   155dc:	andeq	r0, r0, r0, rrx

000155e0 <flatcc_builder_create_buffer@@Base>:
   155e0:	push	{r4, fp, lr}
   155e4:	add	fp, sp, #8
   155e8:	sub	sp, sp, #132	; 0x84
   155ec:	str	r0, [fp, #-128]	; 0xffffff80
   155f0:	str	r1, [fp, #-132]	; 0xffffff7c
   155f4:	str	r3, [fp, #-140]	; 0xffffff74
   155f8:	strh	r2, [fp, #-134]	; 0xffffff7a
   155fc:	ldr	r4, [pc, #932]	; 159a8 <flatcc_builder_create_buffer@@Base+0x3c8>
   15600:	add	r4, pc, r4
   15604:	mov	r3, #0
   15608:	str	r3, [fp, #-16]
   1560c:	mov	r3, #0
   15610:	str	r3, [fp, #-120]	; 0xffffff88
   15614:	ldr	r3, [fp, #8]
   15618:	and	r3, r3, #1
   1561c:	cmp	r3, #0
   15620:	movne	r3, #1
   15624:	moveq	r3, #0
   15628:	uxtb	r3, r3
   1562c:	str	r3, [fp, #-20]	; 0xffffffec
   15630:	ldr	r3, [fp, #8]
   15634:	and	r3, r3, #2
   15638:	cmp	r3, #0
   1563c:	movne	r3, #1
   15640:	moveq	r3, #0
   15644:	uxtb	r3, r3
   15648:	str	r3, [fp, #-24]	; 0xffffffe8
   1564c:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   15650:	ldr	r3, [fp, #-20]	; 0xffffffec
   15654:	add	r1, fp, #4
   15658:	ldr	r0, [fp, #-128]	; 0xffffff80
   1565c:	bl	1524c <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   15660:	mov	r3, r0
   15664:	cmp	r3, #0
   15668:	beq	15674 <flatcc_builder_create_buffer@@Base+0x94>
   1566c:	mov	r3, #0
   15670:	b	1599c <flatcc_builder_create_buffer@@Base+0x3bc>
   15674:	ldrh	r3, [fp, #4]
   15678:	mov	r1, r3
   1567c:	ldr	r0, [fp, #-128]	; 0xffffff80
   15680:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   15684:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15688:	cmp	r3, #0
   1568c:	beq	156c4 <flatcc_builder_create_buffer@@Base+0xe4>
   15690:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15694:	ldr	r3, [r3]
   15698:	str	r3, [fp, #-120]	; 0xffffff88
   1569c:	ldr	r3, [fp, #-120]	; 0xffffff88
   156a0:	mov	r0, r3
   156a4:	bl	139d0 <main@@Base+0x428>
   156a8:	mov	r3, r0
   156ac:	str	r3, [fp, #-120]	; 0xffffff88
   156b0:	ldr	r3, [fp, #-120]	; 0xffffff88
   156b4:	mov	r0, r3
   156b8:	bl	13984 <main@@Base+0x3dc>
   156bc:	mov	r3, r0
   156c0:	str	r3, [fp, #-120]	; 0xffffff88
   156c4:	ldr	r3, [fp, #-120]	; 0xffffff88
   156c8:	cmp	r3, #0
   156cc:	beq	156d8 <flatcc_builder_create_buffer@@Base+0xf8>
   156d0:	mov	r3, #4
   156d4:	b	156dc <flatcc_builder_create_buffer@@Base+0xfc>
   156d8:	mov	r3, #0
   156dc:	str	r3, [fp, #-16]
   156e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156e4:	cmp	r3, #0
   156e8:	beq	156f4 <flatcc_builder_create_buffer@@Base+0x114>
   156ec:	mov	r2, #4
   156f0:	b	156f8 <flatcc_builder_create_buffer@@Base+0x118>
   156f4:	mov	r2, #0
   156f8:	ldr	r3, [fp, #-16]
   156fc:	add	r3, r2, r3
   15700:	add	r3, r3, #4
   15704:	ldrh	r2, [fp, #4]
   15708:	mov	r1, r3
   1570c:	ldr	r0, [fp, #-128]	; 0xffffff80
   15710:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15714:	str	r0, [fp, #-28]	; 0xffffffe4
   15718:	mov	r3, #0
   1571c:	str	r3, [fp, #-116]	; 0xffffff8c
   15720:	mov	r3, #0
   15724:	str	r3, [fp, #-112]	; 0xffffff90
   15728:	ldr	r3, [fp, #-20]	; 0xffffffec
   1572c:	cmp	r3, #0
   15730:	bne	15740 <flatcc_builder_create_buffer@@Base+0x160>
   15734:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15738:	cmp	r3, #0
   1573c:	beq	15790 <flatcc_builder_create_buffer@@Base+0x1b0>
   15740:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15744:	add	r3, r3, #4
   15748:	str	r3, [fp, #-116]	; 0xffffff8c
   1574c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15750:	add	r3, r3, #1
   15754:	lsl	r3, r3, #3
   15758:	sub	r2, fp, #12
   1575c:	add	r3, r2, r3
   15760:	sub	r2, fp, #44	; 0x2c
   15764:	str	r2, [r3, #-104]	; 0xffffff98
   15768:	ldr	r3, [fp, #-112]	; 0xffffff90
   1576c:	add	r3, r3, #1
   15770:	lsl	r3, r3, #3
   15774:	sub	r2, fp, #12
   15778:	add	r3, r2, r3
   1577c:	mov	r2, #4
   15780:	str	r2, [r3, #-100]	; 0xffffff9c
   15784:	ldr	r3, [fp, #-112]	; 0xffffff90
   15788:	add	r3, r3, #1
   1578c:	str	r3, [fp, #-112]	; 0xffffff90
   15790:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15794:	add	r3, r3, #4
   15798:	str	r3, [fp, #-116]	; 0xffffff8c
   1579c:	ldr	r3, [fp, #-112]	; 0xffffff90
   157a0:	add	r3, r3, #1
   157a4:	lsl	r3, r3, #3
   157a8:	sub	r2, fp, #12
   157ac:	add	r3, r2, r3
   157b0:	sub	r2, fp, #40	; 0x28
   157b4:	str	r2, [r3, #-104]	; 0xffffff98
   157b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   157bc:	add	r3, r3, #1
   157c0:	lsl	r3, r3, #3
   157c4:	sub	r2, fp, #12
   157c8:	add	r3, r2, r3
   157cc:	mov	r2, #4
   157d0:	str	r2, [r3, #-100]	; 0xffffff9c
   157d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   157d8:	add	r3, r3, #1
   157dc:	str	r3, [fp, #-112]	; 0xffffff90
   157e0:	ldr	r3, [fp, #-16]
   157e4:	cmp	r3, #0
   157e8:	beq	15840 <flatcc_builder_create_buffer@@Base+0x260>
   157ec:	ldr	r2, [fp, #-116]	; 0xffffff8c
   157f0:	ldr	r3, [fp, #-16]
   157f4:	add	r3, r2, r3
   157f8:	str	r3, [fp, #-116]	; 0xffffff8c
   157fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   15800:	add	r3, r3, #1
   15804:	lsl	r3, r3, #3
   15808:	sub	r2, fp, #12
   1580c:	add	r3, r2, r3
   15810:	sub	r2, fp, #120	; 0x78
   15814:	str	r2, [r3, #-104]	; 0xffffff98
   15818:	ldr	r3, [fp, #-112]	; 0xffffff90
   1581c:	add	r3, r3, #1
   15820:	lsl	r3, r3, #3
   15824:	sub	r2, fp, #12
   15828:	add	r3, r2, r3
   1582c:	ldr	r2, [fp, #-16]
   15830:	str	r2, [r3, #-100]	; 0xffffff9c
   15834:	ldr	r3, [fp, #-112]	; 0xffffff90
   15838:	add	r3, r3, #1
   1583c:	str	r3, [fp, #-112]	; 0xffffff90
   15840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15844:	cmp	r3, #0
   15848:	beq	158a4 <flatcc_builder_create_buffer@@Base+0x2c4>
   1584c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15850:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15854:	add	r3, r2, r3
   15858:	str	r3, [fp, #-116]	; 0xffffff8c
   1585c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15860:	add	r3, r3, #1
   15864:	lsl	r3, r3, #3
   15868:	sub	r2, fp, #12
   1586c:	add	r3, r2, r3
   15870:	ldr	r2, [pc, #308]	; 159ac <flatcc_builder_create_buffer@@Base+0x3cc>
   15874:	ldr	r2, [r4, r2]
   15878:	str	r2, [r3, #-104]	; 0xffffff98
   1587c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15880:	add	r3, r3, #1
   15884:	lsl	r3, r3, #3
   15888:	sub	r2, fp, #12
   1588c:	add	r3, r2, r3
   15890:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15894:	str	r2, [r3, #-100]	; 0xffffff9c
   15898:	ldr	r3, [fp, #-112]	; 0xffffff90
   1589c:	add	r3, r3, #1
   158a0:	str	r3, [fp, #-112]	; 0xffffff90
   158a4:	ldr	r3, [fp, #-128]	; 0xffffff80
   158a8:	ldr	r3, [r3, #136]	; 0x88
   158ac:	mov	r2, r3
   158b0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   158b4:	sub	r2, r2, r3
   158b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   158bc:	cmp	r3, #0
   158c0:	bne	158d0 <flatcc_builder_create_buffer@@Base+0x2f0>
   158c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158c8:	cmp	r3, #0
   158cc:	beq	158d8 <flatcc_builder_create_buffer@@Base+0x2f8>
   158d0:	mov	r3, #4
   158d4:	b	158dc <flatcc_builder_create_buffer@@Base+0x2fc>
   158d8:	mov	r3, #0
   158dc:	add	r3, r2, r3
   158e0:	str	r3, [fp, #-32]	; 0xffffffe0
   158e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   158e8:	cmp	r3, #0
   158ec:	beq	15918 <flatcc_builder_create_buffer@@Base+0x338>
   158f0:	ldr	r3, [fp, #-128]	; 0xffffff80
   158f4:	ldr	r3, [r3, #144]	; 0x90
   158f8:	mov	r2, r3
   158fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15900:	sub	r3, r2, r3
   15904:	mov	r0, r3
   15908:	bl	13984 <main@@Base+0x3dc>
   1590c:	mov	r3, r0
   15910:	str	r3, [fp, #-44]	; 0xffffffd4
   15914:	b	1593c <flatcc_builder_create_buffer@@Base+0x35c>
   15918:	ldr	r3, [fp, #-128]	; 0xffffff80
   1591c:	ldr	r3, [r3, #140]	; 0x8c
   15920:	mov	r2, r3
   15924:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15928:	sub	r3, r2, r3
   1592c:	mov	r0, r3
   15930:	bl	13984 <main@@Base+0x3dc>
   15934:	mov	r3, r0
   15938:	str	r3, [fp, #-44]	; 0xffffffd4
   1593c:	ldr	r2, [fp, #-140]	; 0xffffff74
   15940:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15944:	sub	r3, r2, r3
   15948:	mov	r0, r3
   1594c:	bl	13984 <main@@Base+0x3dc>
   15950:	mov	r3, r0
   15954:	str	r3, [fp, #-40]	; 0xffffffd8
   15958:	sub	r3, fp, #116	; 0x74
   1595c:	mov	r1, r3
   15960:	ldr	r0, [fp, #-128]	; 0xffffff80
   15964:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15968:	str	r0, [fp, #-36]	; 0xffffffdc
   1596c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15970:	cmp	r3, #0
   15974:	bne	15998 <flatcc_builder_create_buffer@@Base+0x3b8>
   15978:	ldr	r3, [pc, #48]	; 159b0 <flatcc_builder_create_buffer@@Base+0x3d0>
   1597c:	add	r3, pc, r3
   15980:	mov	r2, #772	; 0x304
   15984:	ldr	r1, [pc, #40]	; 159b4 <flatcc_builder_create_buffer@@Base+0x3d4>
   15988:	add	r1, pc, r1
   1598c:	ldr	r0, [pc, #36]	; 159b8 <flatcc_builder_create_buffer@@Base+0x3d8>
   15990:	add	r0, pc, r0
   15994:	bl	1209c <__assert_fail@plt>
   15998:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1599c:	mov	r0, r3
   159a0:	sub	sp, fp, #8
   159a4:	pop	{r4, fp, pc}
   159a8:	strdeq	r6, [r1], -r8
   159ac:	andeq	r0, r0, r0, rrx
   159b0:	andeq	r5, r0, ip, asr sl
   159b4:	andeq	r5, r0, r4, lsl #11
   159b8:	ldrdeq	r5, [r0], -ip

000159bc <flatcc_builder_create_struct@@Base>:
   159bc:	push	{r4, fp, lr}
   159c0:	add	fp, sp, #8
   159c4:	sub	sp, sp, #100	; 0x64
   159c8:	str	r0, [fp, #-96]	; 0xffffffa0
   159cc:	str	r1, [fp, #-100]	; 0xffffff9c
   159d0:	str	r2, [fp, #-104]	; 0xffffff98
   159d4:	strh	r3, [fp, #-106]	; 0xffffff96
   159d8:	ldr	r4, [pc, #328]	; 15b28 <flatcc_builder_create_struct@@Base+0x16c>
   159dc:	add	r4, pc, r4
   159e0:	ldrh	r3, [fp, #-106]	; 0xffffff96
   159e4:	cmp	r3, #0
   159e8:	bne	15a0c <flatcc_builder_create_struct@@Base+0x50>
   159ec:	ldr	r3, [pc, #312]	; 15b2c <flatcc_builder_create_struct@@Base+0x170>
   159f0:	add	r3, pc, r3
   159f4:	ldr	r2, [pc, #308]	; 15b30 <flatcc_builder_create_struct@@Base+0x174>
   159f8:	ldr	r1, [pc, #308]	; 15b34 <flatcc_builder_create_struct@@Base+0x178>
   159fc:	add	r1, pc, r1
   15a00:	ldr	r0, [pc, #304]	; 15b38 <flatcc_builder_create_struct@@Base+0x17c>
   15a04:	add	r0, pc, r0
   15a08:	bl	1209c <__assert_fail@plt>
   15a0c:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15a10:	mov	r1, r3
   15a14:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15a18:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   15a1c:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15a20:	mov	r2, r3
   15a24:	ldr	r1, [fp, #-104]	; 0xffffff98
   15a28:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15a2c:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15a30:	str	r0, [fp, #-16]
   15a34:	mov	r3, #0
   15a38:	str	r3, [fp, #-88]	; 0xffffffa8
   15a3c:	mov	r3, #0
   15a40:	str	r3, [fp, #-84]	; 0xffffffac
   15a44:	ldr	r3, [fp, #-104]	; 0xffffff98
   15a48:	cmp	r3, #0
   15a4c:	beq	15aa4 <flatcc_builder_create_struct@@Base+0xe8>
   15a50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15a54:	ldr	r3, [fp, #-104]	; 0xffffff98
   15a58:	add	r3, r2, r3
   15a5c:	str	r3, [fp, #-88]	; 0xffffffa8
   15a60:	ldr	r3, [fp, #-84]	; 0xffffffac
   15a64:	add	r3, r3, #1
   15a68:	lsl	r3, r3, #3
   15a6c:	sub	r2, fp, #12
   15a70:	add	r3, r2, r3
   15a74:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15a78:	str	r2, [r3, #-76]	; 0xffffffb4
   15a7c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15a80:	add	r3, r3, #1
   15a84:	lsl	r3, r3, #3
   15a88:	sub	r2, fp, #12
   15a8c:	add	r3, r2, r3
   15a90:	ldr	r2, [fp, #-104]	; 0xffffff98
   15a94:	str	r2, [r3, #-72]	; 0xffffffb8
   15a98:	ldr	r3, [fp, #-84]	; 0xffffffac
   15a9c:	add	r3, r3, #1
   15aa0:	str	r3, [fp, #-84]	; 0xffffffac
   15aa4:	ldr	r3, [fp, #-16]
   15aa8:	cmp	r3, #0
   15aac:	beq	15b08 <flatcc_builder_create_struct@@Base+0x14c>
   15ab0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ab4:	ldr	r3, [fp, #-16]
   15ab8:	add	r3, r2, r3
   15abc:	str	r3, [fp, #-88]	; 0xffffffa8
   15ac0:	ldr	r3, [fp, #-84]	; 0xffffffac
   15ac4:	add	r3, r3, #1
   15ac8:	lsl	r3, r3, #3
   15acc:	sub	r2, fp, #12
   15ad0:	add	r3, r2, r3
   15ad4:	ldr	r2, [pc, #96]	; 15b3c <flatcc_builder_create_struct@@Base+0x180>
   15ad8:	ldr	r2, [r4, r2]
   15adc:	str	r2, [r3, #-76]	; 0xffffffb4
   15ae0:	ldr	r3, [fp, #-84]	; 0xffffffac
   15ae4:	add	r3, r3, #1
   15ae8:	lsl	r3, r3, #3
   15aec:	sub	r2, fp, #12
   15af0:	add	r3, r2, r3
   15af4:	ldr	r2, [fp, #-16]
   15af8:	str	r2, [r3, #-72]	; 0xffffffb8
   15afc:	ldr	r3, [fp, #-84]	; 0xffffffac
   15b00:	add	r3, r3, #1
   15b04:	str	r3, [fp, #-84]	; 0xffffffac
   15b08:	sub	r3, fp, #88	; 0x58
   15b0c:	mov	r1, r3
   15b10:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15b14:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15b18:	mov	r3, r0
   15b1c:	mov	r0, r3
   15b20:	sub	sp, fp, #8
   15b24:	pop	{r4, fp, pc}
   15b28:	andeq	r6, r1, ip, lsl r6
   15b2c:	andeq	r5, r0, r8, lsl #20
   15b30:	andeq	r0, r0, pc, lsl #6
   15b34:	andeq	r5, r0, r0, lsl r5
   15b38:	andeq	r5, r0, ip, asr #11
   15b3c:	andeq	r0, r0, r0, rrx

00015b40 <flatcc_builder_start_buffer@@Base>:
   15b40:	push	{r4, fp, lr}
   15b44:	add	fp, sp, #8
   15b48:	sub	sp, sp, #20
   15b4c:	str	r0, [fp, #-16]
   15b50:	str	r1, [fp, #-20]	; 0xffffffec
   15b54:	str	r3, [fp, #-28]	; 0xffffffe4
   15b58:	strh	r2, [fp, #-22]	; 0xffffffea
   15b5c:	ldr	r4, [pc, #300]	; 15c90 <flatcc_builder_start_buffer@@Base+0x150>
   15b60:	add	r4, pc, r4
   15b64:	ldr	r3, [fp, #-16]
   15b68:	ldrh	r3, [r3, #128]	; 0x80
   15b6c:	mov	r1, r3
   15b70:	ldr	r0, [fp, #-16]
   15b74:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15b78:	mov	r3, r0
   15b7c:	cmp	r3, #0
   15b80:	beq	15b8c <flatcc_builder_start_buffer@@Base+0x4c>
   15b84:	mvn	r3, #0
   15b88:	b	15c84 <flatcc_builder_start_buffer@@Base+0x144>
   15b8c:	ldr	r3, [fp, #-16]
   15b90:	mov	r2, #1
   15b94:	strh	r2, [r3, #128]	; 0x80
   15b98:	ldr	r3, [fp, #-16]
   15b9c:	ldr	r3, [r3, #32]
   15ba0:	ldr	r2, [fp, #-16]
   15ba4:	ldrh	r2, [r2, #132]	; 0x84
   15ba8:	strh	r2, [r3, #34]	; 0x22
   15bac:	ldr	r3, [fp, #-16]
   15bb0:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15bb4:	strh	r2, [r3, #132]	; 0x84
   15bb8:	ldr	r3, [fp, #-16]
   15bbc:	ldr	r3, [r3, #32]
   15bc0:	ldr	r2, [fp, #-16]
   15bc4:	ldrh	r2, [r2, #164]	; 0xa4
   15bc8:	strh	r2, [r3, #32]
   15bcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bd0:	uxth	r2, r3
   15bd4:	ldr	r3, [fp, #-16]
   15bd8:	strh	r2, [r3, #164]	; 0xa4
   15bdc:	ldr	r3, [fp, #-16]
   15be0:	ldr	r3, [r3, #32]
   15be4:	ldr	r2, [fp, #-16]
   15be8:	ldr	r2, [r2, #144]	; 0x90
   15bec:	str	r2, [r3, #20]
   15bf0:	ldr	r3, [fp, #-16]
   15bf4:	ldr	r3, [r3, #32]
   15bf8:	ldr	r2, [fp, #-16]
   15bfc:	ldr	r2, [r2, #152]	; 0x98
   15c00:	str	r2, [r3, #28]
   15c04:	ldr	r3, [fp, #-16]
   15c08:	ldr	r2, [r3, #136]	; 0x88
   15c0c:	ldr	r3, [fp, #-16]
   15c10:	str	r2, [r3, #144]	; 0x90
   15c14:	ldr	r3, [fp, #-16]
   15c18:	ldr	r3, [r3, #148]	; 0x94
   15c1c:	add	r1, r3, #1
   15c20:	ldr	r2, [fp, #-16]
   15c24:	str	r1, [r2, #148]	; 0x94
   15c28:	ldr	r2, [fp, #-16]
   15c2c:	str	r3, [r2, #152]	; 0x98
   15c30:	ldr	r3, [fp, #-16]
   15c34:	ldr	r3, [r3, #32]
   15c38:	ldr	r2, [fp, #-16]
   15c3c:	ldr	r2, [r2, #168]	; 0xa8
   15c40:	str	r2, [r3, #16]
   15c44:	ldr	r3, [fp, #-16]
   15c48:	add	r2, r3, #168	; 0xa8
   15c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c50:	cmp	r3, #0
   15c54:	beq	15c60 <flatcc_builder_start_buffer@@Base+0x120>
   15c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c5c:	b	15c68 <flatcc_builder_start_buffer@@Base+0x128>
   15c60:	ldr	r3, [pc, #44]	; 15c94 <flatcc_builder_start_buffer@@Base+0x154>
   15c64:	ldr	r3, [r4, r3]
   15c68:	ldr	r3, [r3]
   15c6c:	str	r3, [r2]
   15c70:	ldr	r3, [fp, #-16]
   15c74:	ldr	r3, [r3, #32]
   15c78:	mov	r2, #1
   15c7c:	strh	r2, [r3, #14]
   15c80:	mov	r3, #0
   15c84:	mov	r0, r3
   15c88:	sub	sp, fp, #8
   15c8c:	pop	{r4, fp, pc}
   15c90:	muleq	r1, r8, r4
   15c94:	andeq	r0, r0, r0, rrx

00015c98 <flatcc_builder_end_buffer@@Base>:
   15c98:	push	{fp, lr}
   15c9c:	add	fp, sp, #4
   15ca0:	sub	sp, sp, #24
   15ca4:	str	r0, [fp, #-16]
   15ca8:	str	r1, [fp, #-20]	; 0xffffffec
   15cac:	ldr	r3, [fp, #-16]
   15cb0:	ldrh	r3, [r3, #164]	; 0xa4
   15cb4:	and	r3, r3, #2
   15cb8:	str	r3, [fp, #-8]
   15cbc:	ldr	r3, [fp, #-16]
   15cc0:	ldr	r3, [r3, #152]	; 0x98
   15cc4:	cmp	r3, #0
   15cc8:	movne	r3, #1
   15ccc:	moveq	r3, #0
   15cd0:	uxtb	r3, r3
   15cd4:	mov	r2, r3
   15cd8:	ldr	r3, [fp, #-8]
   15cdc:	orr	r3, r3, r2
   15ce0:	str	r3, [fp, #-8]
   15ce4:	ldr	r3, [fp, #-16]
   15ce8:	ldr	r3, [r3, #32]
   15cec:	ldrh	r3, [r3, #14]
   15cf0:	cmp	r3, #1
   15cf4:	beq	15d18 <flatcc_builder_end_buffer@@Base+0x80>
   15cf8:	ldr	r3, [pc, #224]	; 15de0 <flatcc_builder_end_buffer@@Base+0x148>
   15cfc:	add	r3, pc, r3
   15d00:	ldr	r2, [pc, #220]	; 15de4 <flatcc_builder_end_buffer@@Base+0x14c>
   15d04:	ldr	r1, [pc, #220]	; 15de8 <flatcc_builder_end_buffer@@Base+0x150>
   15d08:	add	r1, pc, r1
   15d0c:	ldr	r0, [pc, #216]	; 15dec <flatcc_builder_end_buffer@@Base+0x154>
   15d10:	add	r0, pc, r0
   15d14:	bl	1209c <__assert_fail@plt>
   15d18:	ldr	r3, [fp, #-16]
   15d1c:	ldrh	r3, [r3, #132]	; 0x84
   15d20:	mov	r1, r3
   15d24:	ldr	r0, [fp, #-16]
   15d28:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   15d2c:	ldr	r3, [fp, #-16]
   15d30:	add	r1, r3, #168	; 0xa8
   15d34:	ldr	r3, [fp, #-16]
   15d38:	ldrh	r0, [r3, #132]	; 0x84
   15d3c:	ldr	r3, [fp, #-16]
   15d40:	ldrh	r3, [r3, #128]	; 0x80
   15d44:	ldr	r2, [fp, #-8]
   15d48:	str	r2, [sp, #4]
   15d4c:	str	r3, [sp]
   15d50:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d54:	mov	r2, r0
   15d58:	ldr	r0, [fp, #-16]
   15d5c:	bl	155e0 <flatcc_builder_create_buffer@@Base>
   15d60:	str	r0, [fp, #-12]
   15d64:	ldr	r3, [fp, #-12]
   15d68:	cmp	r3, #0
   15d6c:	bne	15d78 <flatcc_builder_end_buffer@@Base+0xe0>
   15d70:	mov	r3, #0
   15d74:	b	15dd4 <flatcc_builder_end_buffer@@Base+0x13c>
   15d78:	ldr	r3, [fp, #-16]
   15d7c:	ldr	r3, [r3, #32]
   15d80:	ldr	r2, [r3, #20]
   15d84:	ldr	r3, [fp, #-16]
   15d88:	str	r2, [r3, #144]	; 0x90
   15d8c:	ldr	r3, [fp, #-16]
   15d90:	ldr	r3, [r3, #32]
   15d94:	ldr	r2, [r3, #28]
   15d98:	ldr	r3, [fp, #-16]
   15d9c:	str	r2, [r3, #152]	; 0x98
   15da0:	ldr	r3, [fp, #-16]
   15da4:	ldr	r3, [r3, #32]
   15da8:	ldr	r2, [r3, #16]
   15dac:	ldr	r3, [fp, #-16]
   15db0:	str	r2, [r3, #168]	; 0xa8
   15db4:	ldr	r3, [fp, #-16]
   15db8:	ldr	r3, [r3, #32]
   15dbc:	ldrh	r2, [r3, #32]
   15dc0:	ldr	r3, [fp, #-16]
   15dc4:	strh	r2, [r3, #164]	; 0xa4
   15dc8:	ldr	r0, [fp, #-16]
   15dcc:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   15dd0:	ldr	r3, [fp, #-12]
   15dd4:	mov	r0, r3
   15dd8:	sub	sp, fp, #4
   15ddc:	pop	{fp, pc}
   15de0:	andeq	r5, r0, ip, lsl r7
   15de4:	andeq	r0, r0, r6, asr #6
   15de8:	andeq	r5, r0, r4, lsl #4
   15dec:	andeq	r5, r0, ip, asr #5

00015df0 <flatcc_builder_start_struct@@Base>:
   15df0:	push	{fp, lr}
   15df4:	add	fp, sp, #4
   15df8:	sub	sp, sp, #16
   15dfc:	str	r0, [fp, #-8]
   15e00:	str	r1, [fp, #-12]
   15e04:	mov	r3, r2
   15e08:	strh	r3, [fp, #-14]
   15e0c:	ldrh	r3, [fp, #-14]
   15e10:	mov	r1, r3
   15e14:	ldr	r0, [fp, #-8]
   15e18:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15e1c:	mov	r3, r0
   15e20:	cmp	r3, #0
   15e24:	beq	15e30 <flatcc_builder_start_struct@@Base+0x40>
   15e28:	mov	r3, #0
   15e2c:	b	15e5c <flatcc_builder_start_struct@@Base+0x6c>
   15e30:	ldr	r3, [fp, #-8]
   15e34:	ldr	r3, [r3, #32]
   15e38:	mov	r2, #2
   15e3c:	strh	r2, [r3, #14]
   15e40:	mvn	r1, #3
   15e44:	ldr	r0, [fp, #-8]
   15e48:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   15e4c:	ldr	r1, [fp, #-12]
   15e50:	ldr	r0, [fp, #-8]
   15e54:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   15e58:	mov	r3, r0
   15e5c:	mov	r0, r3
   15e60:	sub	sp, fp, #4
   15e64:	pop	{fp, pc}

00015e68 <flatcc_builder_struct_edit@@Base>:
   15e68:	push	{fp}		; (str fp, [sp, #-4]!)
   15e6c:	add	fp, sp, #0
   15e70:	sub	sp, sp, #12
   15e74:	str	r0, [fp, #-8]
   15e78:	ldr	r3, [fp, #-8]
   15e7c:	ldr	r3, [r3, #16]
   15e80:	mov	r0, r3
   15e84:	add	sp, fp, #0
   15e88:	pop	{fp}		; (ldr fp, [sp], #4)
   15e8c:	bx	lr

00015e90 <flatcc_builder_end_struct@@Base>:
   15e90:	push	{fp, lr}
   15e94:	add	fp, sp, #4
   15e98:	sub	sp, sp, #16
   15e9c:	str	r0, [fp, #-16]
   15ea0:	ldr	r3, [fp, #-16]
   15ea4:	ldr	r3, [r3, #32]
   15ea8:	ldrh	r3, [r3, #14]
   15eac:	cmp	r3, #2
   15eb0:	beq	15ed4 <flatcc_builder_end_struct@@Base+0x44>
   15eb4:	ldr	r3, [pc, #104]	; 15f24 <flatcc_builder_end_struct@@Base+0x94>
   15eb8:	add	r3, pc, r3
   15ebc:	mov	r2, #872	; 0x368
   15ec0:	ldr	r1, [pc, #96]	; 15f28 <flatcc_builder_end_struct@@Base+0x98>
   15ec4:	add	r1, pc, r1
   15ec8:	ldr	r0, [pc, #92]	; 15f2c <flatcc_builder_end_struct@@Base+0x9c>
   15ecc:	add	r0, pc, r0
   15ed0:	bl	1209c <__assert_fail@plt>
   15ed4:	ldr	r3, [fp, #-16]
   15ed8:	ldr	r1, [r3, #16]
   15edc:	ldr	r3, [fp, #-16]
   15ee0:	ldr	r2, [r3, #20]
   15ee4:	ldr	r3, [fp, #-16]
   15ee8:	ldrh	r3, [r3, #130]	; 0x82
   15eec:	ldr	r0, [fp, #-16]
   15ef0:	bl	159bc <flatcc_builder_create_struct@@Base>
   15ef4:	str	r0, [fp, #-8]
   15ef8:	ldr	r3, [fp, #-8]
   15efc:	cmp	r3, #0
   15f00:	bne	15f0c <flatcc_builder_end_struct@@Base+0x7c>
   15f04:	mov	r3, #0
   15f08:	b	15f18 <flatcc_builder_end_struct@@Base+0x88>
   15f0c:	ldr	r0, [fp, #-16]
   15f10:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   15f14:	ldr	r3, [fp, #-8]
   15f18:	mov	r0, r3
   15f1c:	sub	sp, fp, #4
   15f20:	pop	{fp, pc}
   15f24:	andeq	r5, r0, ip, ror r5
   15f28:	andeq	r5, r0, r8, asr #32
   15f2c:	andeq	r5, r0, ip, lsr r1
   15f30:	push	{fp, lr}
   15f34:	add	fp, sp, #4
   15f38:	sub	sp, sp, #24
   15f3c:	str	r0, [fp, #-16]
   15f40:	str	r1, [fp, #-20]	; 0xffffffec
   15f44:	str	r2, [fp, #-24]	; 0xffffffe8
   15f48:	ldr	r3, [fp, #-16]
   15f4c:	ldr	r3, [r3, #32]
   15f50:	ldr	r3, [r3, #20]
   15f54:	str	r3, [fp, #-8]
   15f58:	ldr	r2, [fp, #-8]
   15f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f60:	add	r3, r2, r3
   15f64:	str	r3, [fp, #-12]
   15f68:	ldr	r2, [fp, #-8]
   15f6c:	ldr	r3, [fp, #-12]
   15f70:	cmp	r2, r3
   15f74:	bhi	15f88 <flatcc_builder_end_struct@@Base+0xf8>
   15f78:	ldr	r2, [fp, #-12]
   15f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f80:	cmp	r2, r3
   15f84:	bls	15fd0 <flatcc_builder_end_struct@@Base+0x140>
   15f88:	ldr	r2, [fp, #-8]
   15f8c:	ldr	r3, [fp, #-12]
   15f90:	cmp	r2, r3
   15f94:	bhi	15fa8 <flatcc_builder_end_struct@@Base+0x118>
   15f98:	ldr	r2, [fp, #-12]
   15f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fa0:	cmp	r2, r3
   15fa4:	bls	15fc8 <flatcc_builder_end_struct@@Base+0x138>
   15fa8:	ldr	r3, [pc, #64]	; 15ff0 <flatcc_builder_end_struct@@Base+0x160>
   15fac:	add	r3, pc, r3
   15fb0:	mov	r2, #892	; 0x37c
   15fb4:	ldr	r1, [pc, #56]	; 15ff4 <flatcc_builder_end_struct@@Base+0x164>
   15fb8:	add	r1, pc, r1
   15fbc:	ldr	r0, [pc, #52]	; 15ff8 <flatcc_builder_end_struct@@Base+0x168>
   15fc0:	add	r0, pc, r0
   15fc4:	bl	1209c <__assert_fail@plt>
   15fc8:	mvn	r3, #0
   15fcc:	b	15fe4 <flatcc_builder_end_struct@@Base+0x154>
   15fd0:	ldr	r3, [fp, #-16]
   15fd4:	ldr	r3, [r3, #32]
   15fd8:	ldr	r2, [fp, #-12]
   15fdc:	str	r2, [r3, #20]
   15fe0:	mov	r3, #0
   15fe4:	mov	r0, r3
   15fe8:	sub	sp, fp, #4
   15fec:	pop	{fp, pc}
   15ff0:	andeq	r5, r0, r4, lsr #9
   15ff4:	andeq	r4, r0, r4, asr pc
   15ff8:	andeq	r5, r0, r4, ror r0

00015ffc <flatcc_builder_extend_vector@@Base>:
   15ffc:	push	{fp, lr}
   16000:	add	fp, sp, #4
   16004:	sub	sp, sp, #8
   16008:	str	r0, [fp, #-8]
   1600c:	str	r1, [fp, #-12]
   16010:	ldr	r3, [fp, #-8]
   16014:	ldr	r3, [r3, #32]
   16018:	ldr	r3, [r3, #24]
   1601c:	mov	r2, r3
   16020:	ldr	r1, [fp, #-12]
   16024:	ldr	r0, [fp, #-8]
   16028:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   1602c:	mov	r3, r0
   16030:	cmp	r3, #0
   16034:	beq	16040 <flatcc_builder_extend_vector@@Base+0x44>
   16038:	mov	r3, #0
   1603c:	b	16064 <flatcc_builder_extend_vector@@Base+0x68>
   16040:	ldr	r3, [fp, #-8]
   16044:	ldr	r3, [r3, #32]
   16048:	ldr	r3, [r3, #16]
   1604c:	ldr	r2, [fp, #-12]
   16050:	mul	r3, r2, r3
   16054:	mov	r1, r3
   16058:	ldr	r0, [fp, #-8]
   1605c:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   16060:	mov	r3, r0
   16064:	mov	r0, r3
   16068:	sub	sp, fp, #4
   1606c:	pop	{fp, pc}

00016070 <flatcc_builder_vector_push@@Base>:
   16070:	push	{fp, lr}
   16074:	add	fp, sp, #4
   16078:	sub	sp, sp, #8
   1607c:	str	r0, [fp, #-8]
   16080:	str	r1, [fp, #-12]
   16084:	ldr	r3, [fp, #-8]
   16088:	ldr	r3, [r3, #32]
   1608c:	ldrh	r3, [r3, #14]
   16090:	cmp	r3, #4
   16094:	beq	160b8 <flatcc_builder_vector_push@@Base+0x48>
   16098:	ldr	r3, [pc, #200]	; 16168 <flatcc_builder_vector_push@@Base+0xf8>
   1609c:	add	r3, pc, r3
   160a0:	ldr	r2, [pc, #196]	; 1616c <flatcc_builder_vector_push@@Base+0xfc>
   160a4:	ldr	r1, [pc, #196]	; 16170 <flatcc_builder_vector_push@@Base+0x100>
   160a8:	add	r1, pc, r1
   160ac:	ldr	r0, [pc, #192]	; 16174 <flatcc_builder_vector_push@@Base+0x104>
   160b0:	add	r0, pc, r0
   160b4:	bl	1209c <__assert_fail@plt>
   160b8:	ldr	r3, [fp, #-8]
   160bc:	ldr	r3, [r3, #32]
   160c0:	ldr	r2, [r3, #20]
   160c4:	ldr	r3, [fp, #-8]
   160c8:	ldr	r3, [r3, #32]
   160cc:	ldr	r3, [r3, #24]
   160d0:	cmp	r2, r3
   160d4:	bls	16120 <flatcc_builder_vector_push@@Base+0xb0>
   160d8:	ldr	r3, [fp, #-8]
   160dc:	ldr	r3, [r3, #32]
   160e0:	ldr	r2, [r3, #20]
   160e4:	ldr	r3, [fp, #-8]
   160e8:	ldr	r3, [r3, #32]
   160ec:	ldr	r3, [r3, #24]
   160f0:	cmp	r2, r3
   160f4:	bls	16118 <flatcc_builder_vector_push@@Base+0xa8>
   160f8:	ldr	r3, [pc, #120]	; 16178 <flatcc_builder_vector_push@@Base+0x108>
   160fc:	add	r3, pc, r3
   16100:	mov	r2, #908	; 0x38c
   16104:	ldr	r1, [pc, #112]	; 1617c <flatcc_builder_vector_push@@Base+0x10c>
   16108:	add	r1, pc, r1
   1610c:	ldr	r0, [pc, #108]	; 16180 <flatcc_builder_vector_push@@Base+0x110>
   16110:	add	r0, pc, r0
   16114:	bl	1209c <__assert_fail@plt>
   16118:	mov	r3, #0
   1611c:	b	1615c <flatcc_builder_vector_push@@Base+0xec>
   16120:	ldr	r3, [fp, #-8]
   16124:	ldr	r3, [r3, #32]
   16128:	ldr	r2, [fp, #-8]
   1612c:	ldr	r2, [r2, #32]
   16130:	ldr	r2, [r2, #20]
   16134:	add	r2, r2, #1
   16138:	str	r2, [r3, #20]
   1613c:	ldr	r3, [fp, #-8]
   16140:	ldr	r3, [r3, #32]
   16144:	ldr	r3, [r3, #16]
   16148:	mov	r2, r3
   1614c:	ldr	r1, [fp, #-12]
   16150:	ldr	r0, [fp, #-8]
   16154:	bl	13eb0 <flatcc_builder_default_alloc@@Base+0x3e8>
   16158:	mov	r3, r0
   1615c:	mov	r0, r3
   16160:	sub	sp, fp, #4
   16164:	pop	{fp, pc}
   16168:	andeq	r5, r0, r8, asr #7
   1616c:	andeq	r0, r0, fp, lsl #7
   16170:	andeq	r4, r0, r4, ror #28
   16174:	andeq	r4, r0, r0, lsr #31
   16178:	andeq	r5, r0, r8, ror #6
   1617c:	andeq	r4, r0, r4, lsl #28
   16180:	andeq	r4, r0, ip, ror #30

00016184 <flatcc_builder_append_vector@@Base>:
   16184:	push	{fp, lr}
   16188:	add	fp, sp, #4
   1618c:	sub	sp, sp, #16
   16190:	str	r0, [fp, #-8]
   16194:	str	r1, [fp, #-12]
   16198:	str	r2, [fp, #-16]
   1619c:	ldr	r3, [fp, #-8]
   161a0:	ldr	r3, [r3, #32]
   161a4:	ldrh	r3, [r3, #14]
   161a8:	cmp	r3, #4
   161ac:	beq	161d0 <flatcc_builder_append_vector@@Base+0x4c>
   161b0:	ldr	r3, [pc, #124]	; 16234 <flatcc_builder_append_vector@@Base+0xb0>
   161b4:	add	r3, pc, r3
   161b8:	ldr	r2, [pc, #120]	; 16238 <flatcc_builder_append_vector@@Base+0xb4>
   161bc:	ldr	r1, [pc, #120]	; 1623c <flatcc_builder_append_vector@@Base+0xb8>
   161c0:	add	r1, pc, r1
   161c4:	ldr	r0, [pc, #116]	; 16240 <flatcc_builder_append_vector@@Base+0xbc>
   161c8:	add	r0, pc, r0
   161cc:	bl	1209c <__assert_fail@plt>
   161d0:	ldr	r3, [fp, #-8]
   161d4:	ldr	r3, [r3, #32]
   161d8:	ldr	r3, [r3, #24]
   161dc:	mov	r2, r3
   161e0:	ldr	r1, [fp, #-16]
   161e4:	ldr	r0, [fp, #-8]
   161e8:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   161ec:	mov	r3, r0
   161f0:	cmp	r3, #0
   161f4:	beq	16200 <flatcc_builder_append_vector@@Base+0x7c>
   161f8:	mov	r3, #0
   161fc:	b	16228 <flatcc_builder_append_vector@@Base+0xa4>
   16200:	ldr	r3, [fp, #-8]
   16204:	ldr	r3, [r3, #32]
   16208:	ldr	r3, [r3, #16]
   1620c:	ldr	r2, [fp, #-16]
   16210:	mul	r3, r2, r3
   16214:	mov	r2, r3
   16218:	ldr	r1, [fp, #-12]
   1621c:	ldr	r0, [fp, #-8]
   16220:	bl	13eb0 <flatcc_builder_default_alloc@@Base+0x3e8>
   16224:	mov	r3, r0
   16228:	mov	r0, r3
   1622c:	sub	sp, fp, #4
   16230:	pop	{fp, pc}
   16234:	andeq	r5, r0, ip, asr #5
   16238:	muleq	r0, r3, r3
   1623c:	andeq	r4, r0, ip, asr #26
   16240:	andeq	r4, r0, r8, lsl #29

00016244 <flatcc_builder_extend_offset_vector@@Base>:
   16244:	push	{fp, lr}
   16248:	add	fp, sp, #4
   1624c:	sub	sp, sp, #8
   16250:	str	r0, [fp, #-8]
   16254:	str	r1, [fp, #-12]
   16258:	mvn	r2, #-1073741824	; 0xc0000000
   1625c:	ldr	r1, [fp, #-12]
   16260:	ldr	r0, [fp, #-8]
   16264:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   16268:	mov	r3, r0
   1626c:	cmp	r3, #0
   16270:	beq	1627c <flatcc_builder_extend_offset_vector@@Base+0x38>
   16274:	mov	r3, #0
   16278:	b	16294 <flatcc_builder_extend_offset_vector@@Base+0x50>
   1627c:	ldr	r3, [fp, #-12]
   16280:	lsl	r3, r3, #2
   16284:	mov	r1, r3
   16288:	ldr	r0, [fp, #-8]
   1628c:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   16290:	mov	r3, r0
   16294:	mov	r0, r3
   16298:	sub	sp, fp, #4
   1629c:	pop	{fp, pc}

000162a0 <flatcc_builder_offset_vector_push@@Base>:
   162a0:	push	{fp, lr}
   162a4:	add	fp, sp, #4
   162a8:	sub	sp, sp, #16
   162ac:	str	r0, [fp, #-16]
   162b0:	str	r1, [fp, #-20]	; 0xffffffec
   162b4:	ldr	r3, [fp, #-16]
   162b8:	ldr	r3, [r3, #32]
   162bc:	ldrh	r3, [r3, #14]
   162c0:	cmp	r3, #5
   162c4:	beq	162e8 <flatcc_builder_offset_vector_push@@Base+0x48>
   162c8:	ldr	r3, [pc, #144]	; 16360 <flatcc_builder_offset_vector_push@@Base+0xc0>
   162cc:	add	r3, pc, r3
   162d0:	ldr	r2, [pc, #140]	; 16364 <flatcc_builder_offset_vector_push@@Base+0xc4>
   162d4:	ldr	r1, [pc, #140]	; 16368 <flatcc_builder_offset_vector_push@@Base+0xc8>
   162d8:	add	r1, pc, r1
   162dc:	ldr	r0, [pc, #136]	; 1636c <flatcc_builder_offset_vector_push@@Base+0xcc>
   162e0:	add	r0, pc, r0
   162e4:	bl	1209c <__assert_fail@plt>
   162e8:	ldr	r3, [fp, #-16]
   162ec:	ldr	r3, [r3, #32]
   162f0:	ldr	r3, [r3, #20]
   162f4:	cmn	r3, #-1073741823	; 0xc0000001
   162f8:	bne	16304 <flatcc_builder_offset_vector_push@@Base+0x64>
   162fc:	mov	r3, #0
   16300:	b	16354 <flatcc_builder_offset_vector_push@@Base+0xb4>
   16304:	ldr	r3, [fp, #-16]
   16308:	ldr	r3, [r3, #32]
   1630c:	ldr	r2, [fp, #-16]
   16310:	ldr	r2, [r2, #32]
   16314:	ldr	r2, [r2, #20]
   16318:	add	r2, r2, #1
   1631c:	str	r2, [r3, #20]
   16320:	mov	r1, #4
   16324:	ldr	r0, [fp, #-16]
   16328:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   1632c:	str	r0, [fp, #-8]
   16330:	ldr	r3, [fp, #-8]
   16334:	cmp	r3, #0
   16338:	bne	16344 <flatcc_builder_offset_vector_push@@Base+0xa4>
   1633c:	mov	r3, #0
   16340:	b	16354 <flatcc_builder_offset_vector_push@@Base+0xb4>
   16344:	ldr	r3, [fp, #-8]
   16348:	ldr	r2, [fp, #-20]	; 0xffffffec
   1634c:	str	r2, [r3]
   16350:	ldr	r3, [fp, #-8]
   16354:	mov	r0, r3
   16358:	sub	sp, fp, #4
   1635c:	pop	{fp, pc}
   16360:	ldrdeq	r5, [r0], -r4
   16364:	andeq	r0, r0, r6, lsr #7
   16368:	andeq	r4, r0, r4, lsr ip
   1636c:	ldrdeq	r4, [r0], -ip

00016370 <flatcc_builder_append_offset_vector@@Base>:
   16370:	push	{fp, lr}
   16374:	add	fp, sp, #4
   16378:	sub	sp, sp, #16
   1637c:	str	r0, [fp, #-8]
   16380:	str	r1, [fp, #-12]
   16384:	str	r2, [fp, #-16]
   16388:	ldr	r3, [fp, #-8]
   1638c:	ldr	r3, [r3, #32]
   16390:	ldrh	r3, [r3, #14]
   16394:	cmp	r3, #5
   16398:	beq	163bc <flatcc_builder_append_offset_vector@@Base+0x4c>
   1639c:	ldr	r3, [pc, #100]	; 16408 <flatcc_builder_append_offset_vector@@Base+0x98>
   163a0:	add	r3, pc, r3
   163a4:	mov	r2, #948	; 0x3b4
   163a8:	ldr	r1, [pc, #92]	; 1640c <flatcc_builder_append_offset_vector@@Base+0x9c>
   163ac:	add	r1, pc, r1
   163b0:	ldr	r0, [pc, #88]	; 16410 <flatcc_builder_append_offset_vector@@Base+0xa0>
   163b4:	add	r0, pc, r0
   163b8:	bl	1209c <__assert_fail@plt>
   163bc:	mvn	r2, #-1073741824	; 0xc0000000
   163c0:	ldr	r1, [fp, #-16]
   163c4:	ldr	r0, [fp, #-8]
   163c8:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   163cc:	mov	r3, r0
   163d0:	cmp	r3, #0
   163d4:	beq	163e0 <flatcc_builder_append_offset_vector@@Base+0x70>
   163d8:	mov	r3, #0
   163dc:	b	163fc <flatcc_builder_append_offset_vector@@Base+0x8c>
   163e0:	ldr	r3, [fp, #-16]
   163e4:	lsl	r3, r3, #2
   163e8:	mov	r2, r3
   163ec:	ldr	r1, [fp, #-12]
   163f0:	ldr	r0, [fp, #-8]
   163f4:	bl	13eb0 <flatcc_builder_default_alloc@@Base+0x3e8>
   163f8:	mov	r3, r0
   163fc:	mov	r0, r3
   16400:	sub	sp, fp, #4
   16404:	pop	{fp, pc}
   16408:	andeq	r5, r0, r4, lsr #2
   1640c:	andeq	r4, r0, r0, ror #22
   16410:	andeq	r4, r0, r8, lsl #26

00016414 <flatcc_builder_extend_string@@Base>:
   16414:	push	{fp, lr}
   16418:	add	fp, sp, #4
   1641c:	sub	sp, sp, #8
   16420:	str	r0, [fp, #-8]
   16424:	str	r1, [fp, #-12]
   16428:	ldr	r3, [fp, #-8]
   1642c:	ldr	r3, [r3, #32]
   16430:	ldrh	r3, [r3, #14]
   16434:	cmp	r3, #6
   16438:	beq	1645c <flatcc_builder_extend_string@@Base+0x48>
   1643c:	ldr	r3, [pc, #88]	; 1649c <flatcc_builder_extend_string@@Base+0x88>
   16440:	add	r3, pc, r3
   16444:	ldr	r2, [pc, #84]	; 164a0 <flatcc_builder_extend_string@@Base+0x8c>
   16448:	ldr	r1, [pc, #84]	; 164a4 <flatcc_builder_extend_string@@Base+0x90>
   1644c:	add	r1, pc, r1
   16450:	ldr	r0, [pc, #80]	; 164a8 <flatcc_builder_extend_string@@Base+0x94>
   16454:	add	r0, pc, r0
   16458:	bl	1209c <__assert_fail@plt>
   1645c:	mvn	r2, #0
   16460:	ldr	r1, [fp, #-12]
   16464:	ldr	r0, [fp, #-8]
   16468:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   1646c:	mov	r3, r0
   16470:	cmp	r3, #0
   16474:	beq	16480 <flatcc_builder_extend_string@@Base+0x6c>
   16478:	mov	r3, #0
   1647c:	b	16490 <flatcc_builder_extend_string@@Base+0x7c>
   16480:	ldr	r1, [fp, #-12]
   16484:	ldr	r0, [fp, #-8]
   16488:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   1648c:	mov	r3, r0
   16490:	mov	r0, r3
   16494:	sub	sp, fp, #4
   16498:	pop	{fp, pc}
   1649c:	andeq	r5, r0, r8, lsr #1
   164a0:			; <UNDEFINED> instruction: 0x000003bd
   164a4:	andeq	r4, r0, r0, asr #21
   164a8:	muleq	r0, ip, ip

000164ac <flatcc_builder_append_string@@Base>:
   164ac:	push	{fp, lr}
   164b0:	add	fp, sp, #4
   164b4:	sub	sp, sp, #16
   164b8:	str	r0, [fp, #-8]
   164bc:	str	r1, [fp, #-12]
   164c0:	str	r2, [fp, #-16]
   164c4:	ldr	r3, [fp, #-8]
   164c8:	ldr	r3, [r3, #32]
   164cc:	ldrh	r3, [r3, #14]
   164d0:	cmp	r3, #6
   164d4:	beq	164f8 <flatcc_builder_append_string@@Base+0x4c>
   164d8:	ldr	r3, [pc, #92]	; 1653c <flatcc_builder_append_string@@Base+0x90>
   164dc:	add	r3, pc, r3
   164e0:	ldr	r2, [pc, #88]	; 16540 <flatcc_builder_append_string@@Base+0x94>
   164e4:	ldr	r1, [pc, #88]	; 16544 <flatcc_builder_append_string@@Base+0x98>
   164e8:	add	r1, pc, r1
   164ec:	ldr	r0, [pc, #84]	; 16548 <flatcc_builder_append_string@@Base+0x9c>
   164f0:	add	r0, pc, r0
   164f4:	bl	1209c <__assert_fail@plt>
   164f8:	mvn	r2, #0
   164fc:	ldr	r1, [fp, #-16]
   16500:	ldr	r0, [fp, #-8]
   16504:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   16508:	mov	r3, r0
   1650c:	cmp	r3, #0
   16510:	beq	1651c <flatcc_builder_append_string@@Base+0x70>
   16514:	mov	r3, #0
   16518:	b	16530 <flatcc_builder_append_string@@Base+0x84>
   1651c:	ldr	r2, [fp, #-16]
   16520:	ldr	r1, [fp, #-12]
   16524:	ldr	r0, [fp, #-8]
   16528:	bl	13eb0 <flatcc_builder_default_alloc@@Base+0x3e8>
   1652c:	mov	r3, r0
   16530:	mov	r0, r3
   16534:	sub	sp, fp, #4
   16538:	pop	{fp, pc}
   1653c:	andeq	r5, r0, ip, lsr #32
   16540:	andeq	r0, r0, r6, asr #7
   16544:	andeq	r4, r0, r4, lsr #20
   16548:	andeq	r4, r0, r0, lsl #24

0001654c <flatcc_builder_append_string_str@@Base>:
   1654c:	push	{fp, lr}
   16550:	add	fp, sp, #4
   16554:	sub	sp, sp, #8
   16558:	str	r0, [fp, #-8]
   1655c:	str	r1, [fp, #-12]
   16560:	ldr	r0, [fp, #-12]
   16564:	bl	12048 <strlen@plt>
   16568:	mov	r3, r0
   1656c:	mov	r2, r3
   16570:	ldr	r1, [fp, #-12]
   16574:	ldr	r0, [fp, #-8]
   16578:	bl	164ac <flatcc_builder_append_string@@Base>
   1657c:	mov	r3, r0
   16580:	mov	r0, r3
   16584:	sub	sp, fp, #4
   16588:	pop	{fp, pc}

0001658c <flatcc_builder_append_string_strn@@Base>:
   1658c:	push	{fp, lr}
   16590:	add	fp, sp, #4
   16594:	sub	sp, sp, #16
   16598:	str	r0, [fp, #-8]
   1659c:	str	r1, [fp, #-12]
   165a0:	str	r2, [fp, #-16]
   165a4:	ldr	r1, [fp, #-16]
   165a8:	ldr	r0, [fp, #-12]
   165ac:	bl	13a74 <main@@Base+0x4cc>
   165b0:	mov	r3, r0
   165b4:	mov	r2, r3
   165b8:	ldr	r1, [fp, #-12]
   165bc:	ldr	r0, [fp, #-8]
   165c0:	bl	164ac <flatcc_builder_append_string@@Base>
   165c4:	mov	r3, r0
   165c8:	mov	r0, r3
   165cc:	sub	sp, fp, #4
   165d0:	pop	{fp, pc}

000165d4 <flatcc_builder_truncate_vector@@Base>:
   165d4:	push	{fp, lr}
   165d8:	add	fp, sp, #4
   165dc:	sub	sp, sp, #8
   165e0:	str	r0, [fp, #-8]
   165e4:	str	r1, [fp, #-12]
   165e8:	ldr	r3, [fp, #-8]
   165ec:	ldr	r3, [r3, #32]
   165f0:	ldrh	r3, [r3, #14]
   165f4:	cmp	r3, #4
   165f8:	beq	1661c <flatcc_builder_truncate_vector@@Base+0x48>
   165fc:	ldr	r3, [pc, #192]	; 166c4 <flatcc_builder_truncate_vector@@Base+0xf0>
   16600:	add	r3, pc, r3
   16604:	ldr	r2, [pc, #188]	; 166c8 <flatcc_builder_truncate_vector@@Base+0xf4>
   16608:	ldr	r1, [pc, #188]	; 166cc <flatcc_builder_truncate_vector@@Base+0xf8>
   1660c:	add	r1, pc, r1
   16610:	ldr	r0, [pc, #184]	; 166d0 <flatcc_builder_truncate_vector@@Base+0xfc>
   16614:	add	r0, pc, r0
   16618:	bl	1209c <__assert_fail@plt>
   1661c:	ldr	r3, [fp, #-8]
   16620:	ldr	r3, [r3, #32]
   16624:	ldr	r2, [r3, #20]
   16628:	ldr	r3, [fp, #-12]
   1662c:	cmp	r2, r3
   16630:	bcs	16674 <flatcc_builder_truncate_vector@@Base+0xa0>
   16634:	ldr	r3, [fp, #-8]
   16638:	ldr	r3, [r3, #32]
   1663c:	ldr	r2, [r3, #20]
   16640:	ldr	r3, [fp, #-12]
   16644:	cmp	r2, r3
   16648:	bcs	1666c <flatcc_builder_truncate_vector@@Base+0x98>
   1664c:	ldr	r3, [pc, #128]	; 166d4 <flatcc_builder_truncate_vector@@Base+0x100>
   16650:	add	r3, pc, r3
   16654:	ldr	r2, [pc, #124]	; 166d8 <flatcc_builder_truncate_vector@@Base+0x104>
   16658:	ldr	r1, [pc, #124]	; 166dc <flatcc_builder_truncate_vector@@Base+0x108>
   1665c:	add	r1, pc, r1
   16660:	ldr	r0, [pc, #120]	; 166e0 <flatcc_builder_truncate_vector@@Base+0x10c>
   16664:	add	r0, pc, r0
   16668:	bl	1209c <__assert_fail@plt>
   1666c:	mvn	r3, #0
   16670:	b	166b8 <flatcc_builder_truncate_vector@@Base+0xe4>
   16674:	ldr	r3, [fp, #-8]
   16678:	ldr	r3, [r3, #32]
   1667c:	ldr	r2, [fp, #-8]
   16680:	ldr	r2, [r2, #32]
   16684:	ldr	r1, [r2, #20]
   16688:	ldr	r2, [fp, #-12]
   1668c:	sub	r2, r1, r2
   16690:	str	r2, [r3, #20]
   16694:	ldr	r3, [fp, #-8]
   16698:	ldr	r3, [r3, #32]
   1669c:	ldr	r3, [r3, #16]
   166a0:	ldr	r2, [fp, #-12]
   166a4:	mul	r3, r2, r3
   166a8:	mov	r1, r3
   166ac:	ldr	r0, [fp, #-8]
   166b0:	bl	13e54 <flatcc_builder_default_alloc@@Base+0x38c>
   166b4:	mov	r3, #0
   166b8:	mov	r0, r3
   166bc:	sub	sp, fp, #4
   166c0:	pop	{fp, pc}
   166c4:	andeq	r4, r0, r8, lsr #30
   166c8:	ldrdeq	r0, [r0], -r9
   166cc:	andeq	r4, r0, r0, lsl #18
   166d0:	andeq	r4, r0, ip, lsr sl
   166d4:	ldrdeq	r4, [r0], -r8
   166d8:	ldrdeq	r0, [r0], -sl
   166dc:			; <UNDEFINED> instruction: 0x000048b0
   166e0:			; <UNDEFINED> instruction: 0x00004ab8

000166e4 <flatcc_builder_truncate_offset_vector@@Base>:
   166e4:	push	{fp, lr}
   166e8:	add	fp, sp, #4
   166ec:	sub	sp, sp, #8
   166f0:	str	r0, [fp, #-8]
   166f4:	str	r1, [fp, #-12]
   166f8:	ldr	r3, [fp, #-8]
   166fc:	ldr	r3, [r3, #32]
   16700:	ldrh	r3, [r3, #14]
   16704:	cmp	r3, #5
   16708:	beq	1672c <flatcc_builder_truncate_offset_vector@@Base+0x48>
   1670c:	ldr	r3, [pc, #192]	; 167d4 <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   16710:	add	r3, pc, r3
   16714:	ldr	r2, [pc, #188]	; 167d8 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16718:	ldr	r1, [pc, #188]	; 167dc <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   1671c:	add	r1, pc, r1
   16720:	ldr	r0, [pc, #184]	; 167e0 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16724:	add	r0, pc, r0
   16728:	bl	1209c <__assert_fail@plt>
   1672c:	ldr	r3, [fp, #-8]
   16730:	ldr	r3, [r3, #32]
   16734:	ldr	r2, [r3, #20]
   16738:	ldr	r3, [fp, #-12]
   1673c:	cmp	r2, r3
   16740:	bcs	16784 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16744:	ldr	r3, [fp, #-8]
   16748:	ldr	r3, [r3, #32]
   1674c:	ldr	r2, [r3, #20]
   16750:	ldr	r3, [fp, #-12]
   16754:	cmp	r2, r3
   16758:	bcs	1677c <flatcc_builder_truncate_offset_vector@@Base+0x98>
   1675c:	ldr	r3, [pc, #128]	; 167e4 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16760:	add	r3, pc, r3
   16764:	ldr	r2, [pc, #124]	; 167e8 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16768:	ldr	r1, [pc, #124]	; 167ec <flatcc_builder_truncate_offset_vector@@Base+0x108>
   1676c:	add	r1, pc, r1
   16770:	ldr	r0, [pc, #120]	; 167f0 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   16774:	add	r0, pc, r0
   16778:	bl	1209c <__assert_fail@plt>
   1677c:	mvn	r3, #0
   16780:	b	167c8 <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   16784:	ldr	r3, [fp, #-8]
   16788:	ldr	r3, [r3, #32]
   1678c:	ldr	r2, [fp, #-8]
   16790:	ldr	r2, [r2, #32]
   16794:	ldr	r1, [r2, #20]
   16798:	ldr	r2, [fp, #-12]
   1679c:	sub	r2, r1, r2
   167a0:	str	r2, [r3, #20]
   167a4:	ldr	r3, [fp, #-8]
   167a8:	ldr	r3, [r3, #32]
   167ac:	ldr	r3, [r3, #16]
   167b0:	ldr	r2, [fp, #-12]
   167b4:	mul	r3, r2, r3
   167b8:	mov	r1, r3
   167bc:	ldr	r0, [fp, #-8]
   167c0:	bl	13e54 <flatcc_builder_default_alloc@@Base+0x38c>
   167c4:	mov	r3, #0
   167c8:	mov	r0, r3
   167cc:	sub	sp, fp, #4
   167d0:	pop	{fp, pc}
   167d4:	andeq	r4, r0, r8, lsr lr
   167d8:	andeq	r0, r0, r2, ror #7
   167dc:	strdeq	r4, [r0], -r0
   167e0:	muleq	r0, r8, r9
   167e4:	andeq	r4, r0, r8, ror #27
   167e8:	andeq	r0, r0, r3, ror #7
   167ec:	andeq	r4, r0, r0, lsr #15
   167f0:	andeq	r4, r0, ip, asr #19

000167f4 <flatcc_builder_truncate_string@@Base>:
   167f4:	push	{fp, lr}
   167f8:	add	fp, sp, #4
   167fc:	sub	sp, sp, #8
   16800:	str	r0, [fp, #-8]
   16804:	str	r1, [fp, #-12]
   16808:	ldr	r3, [fp, #-8]
   1680c:	ldr	r3, [r3, #32]
   16810:	ldrh	r3, [r3, #14]
   16814:	cmp	r3, #6
   16818:	beq	1683c <flatcc_builder_truncate_string@@Base+0x48>
   1681c:	ldr	r3, [pc, #172]	; 168d0 <flatcc_builder_truncate_string@@Base+0xdc>
   16820:	add	r3, pc, r3
   16824:	ldr	r2, [pc, #168]	; 168d4 <flatcc_builder_truncate_string@@Base+0xe0>
   16828:	ldr	r1, [pc, #168]	; 168d8 <flatcc_builder_truncate_string@@Base+0xe4>
   1682c:	add	r1, pc, r1
   16830:	ldr	r0, [pc, #164]	; 168dc <flatcc_builder_truncate_string@@Base+0xe8>
   16834:	add	r0, pc, r0
   16838:	bl	1209c <__assert_fail@plt>
   1683c:	ldr	r3, [fp, #-8]
   16840:	ldr	r3, [r3, #32]
   16844:	ldr	r2, [r3, #20]
   16848:	ldr	r3, [fp, #-12]
   1684c:	cmp	r2, r3
   16850:	bcs	16894 <flatcc_builder_truncate_string@@Base+0xa0>
   16854:	ldr	r3, [fp, #-8]
   16858:	ldr	r3, [r3, #32]
   1685c:	ldr	r2, [r3, #20]
   16860:	ldr	r3, [fp, #-12]
   16864:	cmp	r2, r3
   16868:	bcs	1688c <flatcc_builder_truncate_string@@Base+0x98>
   1686c:	ldr	r3, [pc, #108]	; 168e0 <flatcc_builder_truncate_string@@Base+0xec>
   16870:	add	r3, pc, r3
   16874:	mov	r2, #1004	; 0x3ec
   16878:	ldr	r1, [pc, #100]	; 168e4 <flatcc_builder_truncate_string@@Base+0xf0>
   1687c:	add	r1, pc, r1
   16880:	ldr	r0, [pc, #96]	; 168e8 <flatcc_builder_truncate_string@@Base+0xf4>
   16884:	add	r0, pc, r0
   16888:	bl	1209c <__assert_fail@plt>
   1688c:	mvn	r3, #0
   16890:	b	168c4 <flatcc_builder_truncate_string@@Base+0xd0>
   16894:	ldr	r3, [fp, #-8]
   16898:	ldr	r3, [r3, #32]
   1689c:	ldr	r2, [fp, #-8]
   168a0:	ldr	r2, [r2, #32]
   168a4:	ldr	r1, [r2, #20]
   168a8:	ldr	r2, [fp, #-12]
   168ac:	sub	r2, r1, r2
   168b0:	str	r2, [r3, #20]
   168b4:	ldr	r1, [fp, #-12]
   168b8:	ldr	r0, [fp, #-8]
   168bc:	bl	13e54 <flatcc_builder_default_alloc@@Base+0x38c>
   168c0:	mov	r3, #0
   168c4:	mov	r0, r3
   168c8:	sub	sp, fp, #4
   168cc:	pop	{fp, pc}
   168d0:	andeq	r4, r0, r0, asr sp
   168d4:	andeq	r0, r0, fp, ror #7
   168d8:	andeq	r4, r0, r0, ror #13
   168dc:			; <UNDEFINED> instruction: 0x000048bc
   168e0:	andeq	r4, r0, r0, lsl #26
   168e4:	muleq	r0, r0, r6
   168e8:	strdeq	r4, [r0], -r8

000168ec <flatcc_builder_start_vector@@Base>:
   168ec:	push	{fp, lr}
   168f0:	add	fp, sp, #4
   168f4:	sub	sp, sp, #16
   168f8:	str	r0, [fp, #-8]
   168fc:	str	r1, [fp, #-12]
   16900:	str	r3, [fp, #-20]	; 0xffffffec
   16904:	strh	r2, [fp, #-14]
   16908:	sub	r3, fp, #14
   1690c:	mov	r1, #4
   16910:	mov	r0, r3
   16914:	bl	149cc <flatcc_builder_clear@@Base+0xf8>
   16918:	ldrh	r3, [fp, #-14]
   1691c:	mov	r1, r3
   16920:	ldr	r0, [fp, #-8]
   16924:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16928:	mov	r3, r0
   1692c:	cmp	r3, #0
   16930:	beq	1693c <flatcc_builder_start_vector@@Base+0x50>
   16934:	mvn	r3, #0
   16938:	b	1698c <flatcc_builder_start_vector@@Base+0xa0>
   1693c:	ldr	r3, [fp, #-8]
   16940:	ldr	r3, [r3, #32]
   16944:	ldr	r2, [fp, #-12]
   16948:	str	r2, [r3, #16]
   1694c:	ldr	r3, [fp, #-8]
   16950:	ldr	r3, [r3, #32]
   16954:	mov	r2, #0
   16958:	str	r2, [r3, #20]
   1695c:	ldr	r3, [fp, #-8]
   16960:	ldr	r3, [r3, #32]
   16964:	ldr	r2, [fp, #-20]	; 0xffffffec
   16968:	str	r2, [r3, #24]
   1696c:	ldr	r3, [fp, #-8]
   16970:	ldr	r3, [r3, #32]
   16974:	mov	r2, #4
   16978:	strh	r2, [r3, #14]
   1697c:	mvn	r1, #3
   16980:	ldr	r0, [fp, #-8]
   16984:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   16988:	mov	r3, #0
   1698c:	mov	r0, r3
   16990:	sub	sp, fp, #4
   16994:	pop	{fp, pc}

00016998 <flatcc_builder_start_offset_vector@@Base>:
   16998:	push	{fp, lr}
   1699c:	add	fp, sp, #4
   169a0:	sub	sp, sp, #8
   169a4:	str	r0, [fp, #-8]
   169a8:	mov	r1, #4
   169ac:	ldr	r0, [fp, #-8]
   169b0:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   169b4:	mov	r3, r0
   169b8:	cmp	r3, #0
   169bc:	beq	169c8 <flatcc_builder_start_offset_vector@@Base+0x30>
   169c0:	mvn	r3, #0
   169c4:	b	16a08 <flatcc_builder_start_offset_vector@@Base+0x70>
   169c8:	ldr	r3, [fp, #-8]
   169cc:	ldr	r3, [r3, #32]
   169d0:	mov	r2, #4
   169d4:	str	r2, [r3, #16]
   169d8:	ldr	r3, [fp, #-8]
   169dc:	ldr	r3, [r3, #32]
   169e0:	mov	r2, #0
   169e4:	str	r2, [r3, #20]
   169e8:	ldr	r3, [fp, #-8]
   169ec:	ldr	r3, [r3, #32]
   169f0:	mov	r2, #5
   169f4:	strh	r2, [r3, #14]
   169f8:	mvn	r1, #3
   169fc:	ldr	r0, [fp, #-8]
   16a00:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   16a04:	mov	r3, #0
   16a08:	mov	r0, r3
   16a0c:	sub	sp, fp, #4
   16a10:	pop	{fp, pc}

00016a14 <flatcc_builder_create_offset_vector@@Base>:
   16a14:	push	{fp, lr}
   16a18:	add	fp, sp, #4
   16a1c:	sub	sp, sp, #24
   16a20:	str	r0, [fp, #-16]
   16a24:	str	r1, [fp, #-20]	; 0xffffffec
   16a28:	str	r2, [fp, #-24]	; 0xffffffe8
   16a2c:	ldr	r0, [fp, #-16]
   16a30:	bl	16998 <flatcc_builder_start_offset_vector@@Base>
   16a34:	mov	r3, r0
   16a38:	cmp	r3, #0
   16a3c:	beq	16a48 <flatcc_builder_create_offset_vector@@Base+0x34>
   16a40:	mov	r3, #0
   16a44:	b	16a90 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16a48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16a4c:	ldr	r0, [fp, #-16]
   16a50:	bl	16244 <flatcc_builder_extend_offset_vector@@Base>
   16a54:	str	r0, [fp, #-8]
   16a58:	ldr	r3, [fp, #-8]
   16a5c:	cmp	r3, #0
   16a60:	bne	16a6c <flatcc_builder_create_offset_vector@@Base+0x58>
   16a64:	mov	r3, #0
   16a68:	b	16a90 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16a6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a70:	lsl	r3, r3, #2
   16a74:	mov	r2, r3
   16a78:	ldr	r1, [fp, #-20]	; 0xffffffec
   16a7c:	ldr	r0, [fp, #-8]
   16a80:	bl	11fdc <memcpy@plt>
   16a84:	ldr	r0, [fp, #-16]
   16a88:	bl	17fec <flatcc_builder_end_offset_vector@@Base>
   16a8c:	mov	r3, r0
   16a90:	mov	r0, r3
   16a94:	sub	sp, fp, #4
   16a98:	pop	{fp, pc}

00016a9c <flatcc_builder_start_string@@Base>:
   16a9c:	push	{fp, lr}
   16aa0:	add	fp, sp, #4
   16aa4:	sub	sp, sp, #8
   16aa8:	str	r0, [fp, #-8]
   16aac:	mov	r1, #1
   16ab0:	ldr	r0, [fp, #-8]
   16ab4:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16ab8:	mov	r3, r0
   16abc:	cmp	r3, #0
   16ac0:	beq	16acc <flatcc_builder_start_string@@Base+0x30>
   16ac4:	mvn	r3, #0
   16ac8:	b	16b0c <flatcc_builder_start_string@@Base+0x70>
   16acc:	ldr	r3, [fp, #-8]
   16ad0:	ldr	r3, [r3, #32]
   16ad4:	mov	r2, #1
   16ad8:	str	r2, [r3, #16]
   16adc:	ldr	r3, [fp, #-8]
   16ae0:	ldr	r3, [r3, #32]
   16ae4:	mov	r2, #0
   16ae8:	str	r2, [r3, #20]
   16aec:	ldr	r3, [fp, #-8]
   16af0:	ldr	r3, [r3, #32]
   16af4:	mov	r2, #6
   16af8:	strh	r2, [r3, #14]
   16afc:	mvn	r1, #3
   16b00:	ldr	r0, [fp, #-8]
   16b04:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   16b08:	mov	r3, #0
   16b0c:	mov	r0, r3
   16b10:	sub	sp, fp, #4
   16b14:	pop	{fp, pc}

00016b18 <flatcc_builder_reserve_table@@Base>:
   16b18:	push	{fp, lr}
   16b1c:	add	fp, sp, #4
   16b20:	sub	sp, sp, #8
   16b24:	str	r0, [fp, #-8]
   16b28:	str	r1, [fp, #-12]
   16b2c:	ldr	r3, [fp, #-12]
   16b30:	cmp	r3, #0
   16b34:	bge	16b58 <flatcc_builder_reserve_table@@Base+0x40>
   16b38:	ldr	r3, [pc, #52]	; 16b74 <flatcc_builder_reserve_table@@Base+0x5c>
   16b3c:	add	r3, pc, r3
   16b40:	ldr	r2, [pc, #48]	; 16b78 <flatcc_builder_reserve_table@@Base+0x60>
   16b44:	ldr	r1, [pc, #48]	; 16b7c <flatcc_builder_reserve_table@@Base+0x64>
   16b48:	add	r1, pc, r1
   16b4c:	ldr	r0, [pc, #44]	; 16b80 <flatcc_builder_reserve_table@@Base+0x68>
   16b50:	add	r0, pc, r0
   16b54:	bl	1209c <__assert_fail@plt>
   16b58:	ldr	r1, [fp, #-12]
   16b5c:	ldr	r0, [fp, #-8]
   16b60:	bl	14200 <flatcc_builder_default_alloc@@Base+0x738>
   16b64:	mov	r3, r0
   16b68:	mov	r0, r3
   16b6c:	sub	sp, fp, #4
   16b70:	pop	{fp, pc}
   16b74:	andeq	r4, r0, r4, asr sl
   16b78:	andeq	r0, r0, r9, lsr #8
   16b7c:	andeq	r4, r0, r4, asr #7
   16b80:	andeq	r4, r0, r0, asr r6

00016b84 <flatcc_builder_start_table@@Base>:
   16b84:	push	{fp, lr}
   16b88:	add	fp, sp, #4
   16b8c:	sub	sp, sp, #8
   16b90:	str	r0, [fp, #-8]
   16b94:	str	r1, [fp, #-12]
   16b98:	mov	r1, #4
   16b9c:	ldr	r0, [fp, #-8]
   16ba0:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16ba4:	mov	r3, r0
   16ba8:	cmp	r3, #0
   16bac:	beq	16bb8 <flatcc_builder_start_table@@Base+0x34>
   16bb0:	mvn	r3, #0
   16bb4:	b	16c8c <flatcc_builder_start_table@@Base+0x108>
   16bb8:	ldr	r3, [fp, #-8]
   16bbc:	ldr	r3, [r3, #32]
   16bc0:	ldr	r2, [fp, #-8]
   16bc4:	ldr	r2, [r2, #4]
   16bc8:	mov	r1, r2
   16bcc:	ldr	r2, [fp, #-8]
   16bd0:	ldr	r2, [r2, #52]	; 0x34
   16bd4:	sub	r2, r1, r2
   16bd8:	str	r2, [r3, #16]
   16bdc:	ldr	r3, [fp, #-8]
   16be0:	ldr	r3, [r3, #32]
   16be4:	ldr	r2, [fp, #-8]
   16be8:	ldr	r2, [r2]
   16bec:	mov	r1, r2
   16bf0:	ldr	r2, [fp, #-8]
   16bf4:	ldr	r2, [r2, #76]	; 0x4c
   16bf8:	sub	r2, r1, r2
   16bfc:	str	r2, [r3, #20]
   16c00:	ldr	r3, [fp, #-8]
   16c04:	ldr	r3, [r3, #32]
   16c08:	ldr	r2, [fp, #-8]
   16c0c:	ldr	r2, [r2, #12]
   16c10:	str	r2, [r3, #24]
   16c14:	ldr	r3, [fp, #-8]
   16c18:	ldr	r3, [r3, #32]
   16c1c:	ldr	r2, [fp, #-8]
   16c20:	ldrh	r2, [r2, #8]
   16c24:	strh	r2, [r3, #28]
   16c28:	ldr	r3, [fp, #-8]
   16c2c:	mov	r2, #0
   16c30:	str	r2, [r3, #12]
   16c34:	ldr	r3, [fp, #-8]
   16c38:	ldr	r2, [pc, #88]	; 16c98 <flatcc_builder_start_table@@Base+0x114>
   16c3c:	str	r2, [r3, #12]
   16c40:	ldr	r3, [fp, #-8]
   16c44:	mov	r2, #0
   16c48:	strh	r2, [r3, #8]
   16c4c:	ldr	r3, [fp, #-8]
   16c50:	ldr	r3, [r3, #32]
   16c54:	mov	r2, #3
   16c58:	strh	r2, [r3, #14]
   16c5c:	ldr	r1, [fp, #-12]
   16c60:	ldr	r0, [fp, #-8]
   16c64:	bl	14200 <flatcc_builder_default_alloc@@Base+0x738>
   16c68:	mov	r3, r0
   16c6c:	cmp	r3, #0
   16c70:	beq	16c7c <flatcc_builder_start_table@@Base+0xf8>
   16c74:	mvn	r3, #0
   16c78:	b	16c8c <flatcc_builder_start_table@@Base+0x108>
   16c7c:	ldr	r1, [pc, #24]	; 16c9c <flatcc_builder_start_table@@Base+0x118>
   16c80:	ldr	r0, [fp, #-8]
   16c84:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   16c88:	mov	r3, #0
   16c8c:	mov	r0, r3
   16c90:	sub	sp, fp, #4
   16c94:	pop	{fp, pc}
   16c98:	svccs	0x00693b52
   16c9c:	strdeq	pc, [r0], -ip

00016ca0 <flatcc_builder_create_vtable@@Base>:
   16ca0:	push	{fp, lr}
   16ca4:	add	fp, sp, #4
   16ca8:	sub	sp, sp, #96	; 0x60
   16cac:	str	r0, [fp, #-88]	; 0xffffffa8
   16cb0:	str	r1, [fp, #-92]	; 0xffffffa4
   16cb4:	mov	r3, r2
   16cb8:	strh	r3, [fp, #-94]	; 0xffffffa2
   16cbc:	mov	r3, #0
   16cc0:	str	r3, [fp, #-80]	; 0xffffffb0
   16cc4:	mov	r3, #0
   16cc8:	str	r3, [fp, #-76]	; 0xffffffb4
   16ccc:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   16cd0:	cmp	r3, #0
   16cd4:	beq	16d2c <flatcc_builder_create_vtable@@Base+0x8c>
   16cd8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16cdc:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   16ce0:	add	r3, r2, r3
   16ce4:	str	r3, [fp, #-80]	; 0xffffffb0
   16ce8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16cec:	add	r3, r3, #1
   16cf0:	lsl	r3, r3, #3
   16cf4:	sub	r2, fp, #4
   16cf8:	add	r3, r2, r3
   16cfc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16d00:	str	r2, [r3, #-76]	; 0xffffffb4
   16d04:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16d08:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   16d0c:	add	r3, r3, #1
   16d10:	lsl	r3, r3, #3
   16d14:	sub	r1, fp, #4
   16d18:	add	r3, r1, r3
   16d1c:	str	r2, [r3, #-72]	; 0xffffffb8
   16d20:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16d24:	add	r3, r3, #1
   16d28:	str	r3, [fp, #-76]	; 0xffffffb4
   16d2c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16d30:	ldr	r3, [r3, #152]	; 0x98
   16d34:	cmp	r3, #0
   16d38:	bne	16d74 <flatcc_builder_create_vtable@@Base+0xd4>
   16d3c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16d40:	ldr	r3, [r3, #180]	; 0xb4
   16d44:	cmp	r3, #0
   16d48:	bne	16d74 <flatcc_builder_create_vtable@@Base+0xd4>
   16d4c:	sub	r3, fp, #80	; 0x50
   16d50:	mov	r1, r3
   16d54:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16d58:	bl	15148 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   16d5c:	str	r0, [fp, #-8]
   16d60:	ldr	r3, [fp, #-8]
   16d64:	cmp	r3, #0
   16d68:	bne	16da8 <flatcc_builder_create_vtable@@Base+0x108>
   16d6c:	mov	r3, #0
   16d70:	b	16dac <flatcc_builder_create_vtable@@Base+0x10c>
   16d74:	sub	r3, fp, #80	; 0x50
   16d78:	mov	r1, r3
   16d7c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16d80:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   16d84:	str	r0, [fp, #-8]
   16d88:	ldr	r3, [fp, #-8]
   16d8c:	cmp	r3, #0
   16d90:	bne	16d9c <flatcc_builder_create_vtable@@Base+0xfc>
   16d94:	mov	r3, #0
   16d98:	b	16dac <flatcc_builder_create_vtable@@Base+0x10c>
   16d9c:	ldr	r3, [fp, #-8]
   16da0:	add	r3, r3, #1
   16da4:	str	r3, [fp, #-8]
   16da8:	ldr	r3, [fp, #-8]
   16dac:	mov	r0, r3
   16db0:	sub	sp, fp, #4
   16db4:	pop	{fp, pc}

00016db8 <flatcc_builder_create_cached_vtable@@Base>:
   16db8:	push	{fp, lr}
   16dbc:	add	fp, sp, #4
   16dc0:	sub	sp, sp, #48	; 0x30
   16dc4:	str	r0, [fp, #-32]	; 0xffffffe0
   16dc8:	str	r1, [fp, #-36]	; 0xffffffdc
   16dcc:	str	r3, [fp, #-44]	; 0xffffffd4
   16dd0:	strh	r2, [fp, #-38]	; 0xffffffda
   16dd4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16dd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16ddc:	bl	1446c <flatcc_builder_default_alloc@@Base+0x9a4>
   16de0:	str	r0, [fp, #-20]	; 0xffffffec
   16de4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16de8:	cmp	r3, #0
   16dec:	bne	16df8 <flatcc_builder_create_cached_vtable@@Base+0x40>
   16df0:	mov	r3, #0
   16df4:	b	170bc <flatcc_builder_create_cached_vtable@@Base+0x304>
   16df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16dfc:	str	r3, [fp, #-12]
   16e00:	ldr	r3, [fp, #-12]
   16e04:	ldr	r3, [r3]
   16e08:	str	r3, [fp, #-16]
   16e0c:	mov	r3, #0
   16e10:	str	r3, [fp, #-8]
   16e14:	b	16f18 <flatcc_builder_create_cached_vtable@@Base+0x160>
   16e18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e1c:	ldr	r2, [r3, #100]	; 0x64
   16e20:	ldr	r3, [fp, #-16]
   16e24:	add	r3, r2, r3
   16e28:	str	r3, [fp, #-24]	; 0xffffffe8
   16e2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e30:	ldr	r2, [r3, #68]	; 0x44
   16e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e38:	ldr	r3, [r3, #8]
   16e3c:	add	r3, r2, r3
   16e40:	str	r3, [fp, #-28]	; 0xffffffe4
   16e44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e48:	ldrh	r3, [r3]
   16e4c:	ldrh	r2, [fp, #-38]	; 0xffffffda
   16e50:	cmp	r2, r3
   16e54:	bne	16e78 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   16e58:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16e5c:	mov	r2, r3
   16e60:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16e64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16e68:	bl	11fe8 <memcmp@plt>
   16e6c:	mov	r3, r0
   16e70:	cmp	r3, #0
   16e74:	beq	16e94 <flatcc_builder_create_cached_vtable@@Base+0xdc>
   16e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e7c:	add	r3, r3, #12
   16e80:	str	r3, [fp, #-12]
   16e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e88:	ldr	r3, [r3, #12]
   16e8c:	str	r3, [fp, #-16]
   16e90:	b	16f18 <flatcc_builder_create_cached_vtable@@Base+0x160>
   16e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e98:	ldr	r2, [r3, #4]
   16e9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ea0:	ldr	r3, [r3, #152]	; 0x98
   16ea4:	cmp	r2, r3
   16ea8:	beq	16ed0 <flatcc_builder_create_cached_vtable@@Base+0x118>
   16eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eb0:	str	r3, [fp, #-8]
   16eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eb8:	add	r3, r3, #12
   16ebc:	str	r3, [fp, #-12]
   16ec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ec4:	ldr	r3, [r3, #12]
   16ec8:	str	r3, [fp, #-16]
   16ecc:	b	16f18 <flatcc_builder_create_cached_vtable@@Base+0x160>
   16ed0:	ldr	r2, [fp, #-12]
   16ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ed8:	cmp	r2, r3
   16edc:	beq	16f0c <flatcc_builder_create_cached_vtable@@Base+0x154>
   16ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ee4:	ldr	r2, [r3, #12]
   16ee8:	ldr	r3, [fp, #-12]
   16eec:	str	r2, [r3]
   16ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ef4:	ldr	r2, [r3]
   16ef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16efc:	str	r2, [r3, #12]
   16f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f04:	ldr	r2, [fp, #-16]
   16f08:	str	r2, [r3]
   16f0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f10:	ldr	r3, [r3]
   16f14:	b	170bc <flatcc_builder_create_cached_vtable@@Base+0x304>
   16f18:	ldr	r3, [fp, #-16]
   16f1c:	cmp	r3, #0
   16f20:	bne	16e18 <flatcc_builder_create_cached_vtable@@Base+0x60>
   16f24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f28:	ldr	r2, [r3, #124]	; 0x7c
   16f2c:	mov	r3, #0
   16f30:	str	r3, [sp]
   16f34:	mov	r3, #16
   16f38:	mov	r1, #6
   16f3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16f40:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   16f44:	str	r0, [fp, #-24]	; 0xffffffe8
   16f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f4c:	cmp	r3, #0
   16f50:	bne	16f5c <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   16f54:	mov	r3, #0
   16f58:	b	170bc <flatcc_builder_create_cached_vtable@@Base+0x304>
   16f5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f60:	ldr	r3, [r3, #124]	; 0x7c
   16f64:	str	r3, [fp, #-16]
   16f68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f6c:	ldr	r3, [r3, #124]	; 0x7c
   16f70:	add	r2, r3, #16
   16f74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f78:	str	r2, [r3, #124]	; 0x7c
   16f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f80:	ldr	r2, [r3, #152]	; 0x98
   16f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f88:	str	r2, [r3, #4]
   16f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f90:	ldr	r2, [r3]
   16f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f98:	str	r2, [r3, #12]
   16f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fa0:	ldr	r2, [fp, #-16]
   16fa4:	str	r2, [r3]
   16fa8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16fac:	mov	r2, r3
   16fb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16fb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16fb8:	bl	16ca0 <flatcc_builder_create_vtable@@Base>
   16fbc:	mov	r2, r0
   16fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fc4:	str	r2, [r3]
   16fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fcc:	ldr	r3, [r3]
   16fd0:	cmp	r3, #0
   16fd4:	bne	16fe0 <flatcc_builder_create_cached_vtable@@Base+0x228>
   16fd8:	mov	r3, #0
   16fdc:	b	170bc <flatcc_builder_create_cached_vtable@@Base+0x304>
   16fe0:	ldr	r3, [fp, #-8]
   16fe4:	cmp	r3, #0
   16fe8:	beq	17000 <flatcc_builder_create_cached_vtable@@Base+0x248>
   16fec:	ldr	r3, [fp, #-8]
   16ff0:	ldr	r2, [r3, #8]
   16ff4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ff8:	str	r2, [r3, #8]
   16ffc:	b	170b4 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   17000:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17004:	ldr	r3, [r3, #172]	; 0xac
   17008:	cmp	r3, #0
   1700c:	beq	1703c <flatcc_builder_create_cached_vtable@@Base+0x284>
   17010:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17014:	ldr	r2, [r3, #172]	; 0xac
   17018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1701c:	ldr	r1, [r3, #120]	; 0x78
   17020:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17024:	add	r3, r1, r3
   17028:	cmp	r2, r3
   1702c:	bcs	1703c <flatcc_builder_create_cached_vtable@@Base+0x284>
   17030:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17034:	bl	144e4 <flatcc_builder_flush_vtable_cache@@Base>
   17038:	b	170b4 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   1703c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17040:	ldr	r2, [r3, #120]	; 0x78
   17044:	ldrh	r1, [fp, #-38]	; 0xffffffda
   17048:	mov	r3, #0
   1704c:	str	r3, [sp]
   17050:	mov	r3, r1
   17054:	mov	r1, #2
   17058:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1705c:	bl	14128 <flatcc_builder_default_alloc@@Base+0x660>
   17060:	str	r0, [fp, #-28]	; 0xffffffe4
   17064:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17068:	cmp	r3, #0
   1706c:	bne	17078 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   17070:	mvn	r3, #0
   17074:	b	170bc <flatcc_builder_create_cached_vtable@@Base+0x304>
   17078:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1707c:	ldr	r2, [r3, #120]	; 0x78
   17080:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17084:	str	r2, [r3, #8]
   17088:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1708c:	ldr	r2, [r3, #120]	; 0x78
   17090:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17094:	add	r2, r2, r3
   17098:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1709c:	str	r2, [r3, #120]	; 0x78
   170a0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   170a4:	mov	r2, r3
   170a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   170ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   170b0:	bl	11fdc <memcpy@plt>
   170b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170b8:	ldr	r3, [r3]
   170bc:	mov	r0, r3
   170c0:	sub	sp, fp, #4
   170c4:	pop	{fp, pc}

000170c8 <flatcc_builder_create_table@@Base>:
   170c8:	push	{r4, fp, lr}
   170cc:	add	fp, sp, #8
   170d0:	sub	sp, sp, #124	; 0x7c
   170d4:	str	r0, [fp, #-120]	; 0xffffff88
   170d8:	str	r1, [fp, #-124]	; 0xffffff84
   170dc:	str	r2, [fp, #-128]	; 0xffffff80
   170e0:	strh	r3, [fp, #-130]	; 0xffffff7e
   170e4:	ldr	r4, [pc, #728]	; 173c4 <flatcc_builder_create_table@@Base+0x2fc>
   170e8:	add	r4, pc, r4
   170ec:	ldr	r3, [fp, #8]
   170f0:	cmp	r3, #0
   170f4:	bge	17118 <flatcc_builder_create_table@@Base+0x50>
   170f8:	ldr	r3, [pc, #712]	; 173c8 <flatcc_builder_create_table@@Base+0x300>
   170fc:	add	r3, pc, r3
   17100:	ldr	r2, [pc, #708]	; 173cc <flatcc_builder_create_table@@Base+0x304>
   17104:	ldr	r1, [pc, #708]	; 173d0 <flatcc_builder_create_table@@Base+0x308>
   17108:	add	r1, pc, r1
   1710c:	ldr	r0, [pc, #704]	; 173d4 <flatcc_builder_create_table@@Base+0x30c>
   17110:	add	r0, pc, r0
   17114:	bl	1209c <__assert_fail@plt>
   17118:	ldr	r3, [fp, #12]
   1711c:	and	r3, r3, #1
   17120:	cmp	r3, #0
   17124:	bne	17148 <flatcc_builder_create_table@@Base+0x80>
   17128:	ldr	r3, [pc, #680]	; 173d8 <flatcc_builder_create_table@@Base+0x310>
   1712c:	add	r3, pc, r3
   17130:	ldr	r2, [pc, #676]	; 173dc <flatcc_builder_create_table@@Base+0x314>
   17134:	ldr	r1, [pc, #676]	; 173e0 <flatcc_builder_create_table@@Base+0x318>
   17138:	add	r1, pc, r1
   1713c:	ldr	r0, [pc, #672]	; 173e4 <flatcc_builder_create_table@@Base+0x31c>
   17140:	add	r0, pc, r0
   17144:	bl	1209c <__assert_fail@plt>
   17148:	sub	r3, fp, #130	; 0x82
   1714c:	mov	r1, #4
   17150:	mov	r0, r3
   17154:	bl	149cc <flatcc_builder_clear@@Base+0xf8>
   17158:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   1715c:	mov	r1, r3
   17160:	ldr	r0, [fp, #-120]	; 0xffffff88
   17164:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   17168:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   1716c:	mov	r2, r3
   17170:	ldr	r1, [fp, #-128]	; 0xffffff80
   17174:	ldr	r0, [fp, #-120]	; 0xffffff88
   17178:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1717c:	str	r0, [fp, #-20]	; 0xffffffec
   17180:	ldr	r3, [fp, #-120]	; 0xffffff88
   17184:	ldr	r3, [r3, #136]	; 0x88
   17188:	mov	r1, r3
   1718c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17190:	ldr	r3, [fp, #-128]	; 0xffffff80
   17194:	add	r3, r2, r3
   17198:	sub	r3, r1, r3
   1719c:	sub	r3, r3, #4
   171a0:	str	r3, [fp, #-24]	; 0xffffffe8
   171a4:	ldr	r3, [fp, #12]
   171a8:	sub	r3, r3, #1
   171ac:	str	r3, [fp, #-28]	; 0xffffffe4
   171b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171b8:	sub	r3, r2, r3
   171bc:	str	r3, [fp, #-32]	; 0xffffffe0
   171c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171c8:	sub	r2, r2, r3
   171cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171d0:	cmp	r2, r3
   171d4:	beq	171e0 <flatcc_builder_create_table@@Base+0x118>
   171d8:	mvn	r3, #0
   171dc:	b	173b8 <flatcc_builder_create_table@@Base+0x2f0>
   171e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   171e4:	bl	13984 <main@@Base+0x3dc>
   171e8:	mov	r3, r0
   171ec:	str	r3, [fp, #-44]	; 0xffffffd4
   171f0:	mov	r3, #0
   171f4:	str	r3, [fp, #-16]
   171f8:	b	17270 <flatcc_builder_create_table@@Base+0x1a8>
   171fc:	ldr	r3, [fp, #-16]
   17200:	lsl	r3, r3, #1
   17204:	ldr	r2, [fp, #4]
   17208:	add	r3, r2, r3
   1720c:	ldrh	r3, [r3]
   17210:	mov	r2, r3
   17214:	ldr	r3, [fp, #-124]	; 0xffffff84
   17218:	add	r3, r2, r3
   1721c:	str	r3, [fp, #-36]	; 0xffffffdc
   17220:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17224:	ldr	r2, [r3]
   17228:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1722c:	sub	r3, r2, r3
   17230:	ldr	r2, [fp, #-16]
   17234:	lsl	r2, r2, #1
   17238:	ldr	r1, [fp, #4]
   1723c:	add	r2, r1, r2
   17240:	ldrh	r2, [r2]
   17244:	sub	r3, r3, r2
   17248:	sub	r3, r3, #4
   1724c:	str	r3, [fp, #-40]	; 0xffffffd8
   17250:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17254:	bl	13984 <main@@Base+0x3dc>
   17258:	mov	r2, r0
   1725c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17260:	str	r2, [r3]
   17264:	ldr	r3, [fp, #-16]
   17268:	add	r3, r3, #1
   1726c:	str	r3, [fp, #-16]
   17270:	ldr	r2, [fp, #-16]
   17274:	ldr	r3, [fp, #8]
   17278:	cmp	r2, r3
   1727c:	blt	171fc <flatcc_builder_create_table@@Base+0x134>
   17280:	mov	r3, #0
   17284:	str	r3, [fp, #-116]	; 0xffffff8c
   17288:	mov	r3, #0
   1728c:	str	r3, [fp, #-112]	; 0xffffff90
   17290:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17294:	add	r3, r3, #4
   17298:	str	r3, [fp, #-116]	; 0xffffff8c
   1729c:	ldr	r3, [fp, #-112]	; 0xffffff90
   172a0:	add	r3, r3, #1
   172a4:	lsl	r3, r3, #3
   172a8:	sub	r2, fp, #12
   172ac:	add	r3, r2, r3
   172b0:	sub	r2, fp, #44	; 0x2c
   172b4:	str	r2, [r3, #-104]	; 0xffffff98
   172b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   172bc:	add	r3, r3, #1
   172c0:	lsl	r3, r3, #3
   172c4:	sub	r2, fp, #12
   172c8:	add	r3, r2, r3
   172cc:	mov	r2, #4
   172d0:	str	r2, [r3, #-100]	; 0xffffff9c
   172d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   172d8:	add	r3, r3, #1
   172dc:	str	r3, [fp, #-112]	; 0xffffff90
   172e0:	ldr	r3, [fp, #-128]	; 0xffffff80
   172e4:	cmp	r3, #0
   172e8:	beq	17340 <flatcc_builder_create_table@@Base+0x278>
   172ec:	ldr	r2, [fp, #-116]	; 0xffffff8c
   172f0:	ldr	r3, [fp, #-128]	; 0xffffff80
   172f4:	add	r3, r2, r3
   172f8:	str	r3, [fp, #-116]	; 0xffffff8c
   172fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   17300:	add	r3, r3, #1
   17304:	lsl	r3, r3, #3
   17308:	sub	r2, fp, #12
   1730c:	add	r3, r2, r3
   17310:	ldr	r2, [fp, #-124]	; 0xffffff84
   17314:	str	r2, [r3, #-104]	; 0xffffff98
   17318:	ldr	r3, [fp, #-112]	; 0xffffff90
   1731c:	add	r3, r3, #1
   17320:	lsl	r3, r3, #3
   17324:	sub	r2, fp, #12
   17328:	add	r3, r2, r3
   1732c:	ldr	r2, [fp, #-128]	; 0xffffff80
   17330:	str	r2, [r3, #-100]	; 0xffffff9c
   17334:	ldr	r3, [fp, #-112]	; 0xffffff90
   17338:	add	r3, r3, #1
   1733c:	str	r3, [fp, #-112]	; 0xffffff90
   17340:	ldr	r3, [fp, #-20]	; 0xffffffec
   17344:	cmp	r3, #0
   17348:	beq	173a4 <flatcc_builder_create_table@@Base+0x2dc>
   1734c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17350:	ldr	r3, [fp, #-20]	; 0xffffffec
   17354:	add	r3, r2, r3
   17358:	str	r3, [fp, #-116]	; 0xffffff8c
   1735c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17360:	add	r3, r3, #1
   17364:	lsl	r3, r3, #3
   17368:	sub	r2, fp, #12
   1736c:	add	r3, r2, r3
   17370:	ldr	r2, [pc, #112]	; 173e8 <flatcc_builder_create_table@@Base+0x320>
   17374:	ldr	r2, [r4, r2]
   17378:	str	r2, [r3, #-104]	; 0xffffff98
   1737c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17380:	add	r3, r3, #1
   17384:	lsl	r3, r3, #3
   17388:	sub	r2, fp, #12
   1738c:	add	r3, r2, r3
   17390:	ldr	r2, [fp, #-20]	; 0xffffffec
   17394:	str	r2, [r3, #-100]	; 0xffffff9c
   17398:	ldr	r3, [fp, #-112]	; 0xffffff90
   1739c:	add	r3, r3, #1
   173a0:	str	r3, [fp, #-112]	; 0xffffff90
   173a4:	sub	r3, fp, #116	; 0x74
   173a8:	mov	r1, r3
   173ac:	ldr	r0, [fp, #-120]	; 0xffffff88
   173b0:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   173b4:	mov	r3, r0
   173b8:	mov	r0, r3
   173bc:	sub	sp, fp, #8
   173c0:	pop	{r4, fp, pc}
   173c4:	andeq	r4, r1, r0, lsl pc
   173c8:			; <UNDEFINED> instruction: 0x000044b4
   173cc:	ldrdeq	r0, [r0], -r5
   173d0:	andeq	r3, r0, r4, lsl #28
   173d4:	muleq	r0, ip, r0
   173d8:	andeq	r4, r0, r4, lsl #9
   173dc:	ldrdeq	r0, [r0], -fp
   173e0:	ldrdeq	r3, [r0], -r4
   173e4:	andeq	r4, r0, r0, lsl #1
   173e8:	andeq	r0, r0, r0, rrx

000173ec <flatcc_builder_check_required_field@@Base>:
   173ec:	push	{fp, lr}
   173f0:	add	fp, sp, #4
   173f4:	sub	sp, sp, #8
   173f8:	str	r0, [fp, #-8]
   173fc:	mov	r3, r1
   17400:	strh	r3, [fp, #-10]
   17404:	ldr	r3, [fp, #-8]
   17408:	ldr	r3, [r3, #32]
   1740c:	ldrh	r3, [r3, #14]
   17410:	cmp	r3, #3
   17414:	beq	17438 <flatcc_builder_check_required_field@@Base+0x4c>
   17418:	ldr	r3, [pc, #100]	; 17484 <flatcc_builder_check_required_field@@Base+0x98>
   1741c:	add	r3, pc, r3
   17420:	ldr	r2, [pc, #96]	; 17488 <flatcc_builder_check_required_field@@Base+0x9c>
   17424:	ldr	r1, [pc, #96]	; 1748c <flatcc_builder_check_required_field@@Base+0xa0>
   17428:	add	r1, pc, r1
   1742c:	ldr	r0, [pc, #92]	; 17490 <flatcc_builder_check_required_field@@Base+0xa4>
   17430:	add	r0, pc, r0
   17434:	bl	1209c <__assert_fail@plt>
   17438:	ldr	r3, [fp, #-8]
   1743c:	ldrh	r3, [r3, #8]
   17440:	ldrh	r2, [fp, #-10]
   17444:	cmp	r2, r3
   17448:	bcs	17474 <flatcc_builder_check_required_field@@Base+0x88>
   1744c:	ldr	r3, [fp, #-8]
   17450:	ldr	r2, [r3, #4]
   17454:	ldrh	r3, [fp, #-10]
   17458:	lsl	r3, r3, #1
   1745c:	add	r3, r2, r3
   17460:	ldrh	r3, [r3]
   17464:	cmp	r3, #0
   17468:	beq	17474 <flatcc_builder_check_required_field@@Base+0x88>
   1746c:	mov	r3, #1
   17470:	b	17478 <flatcc_builder_check_required_field@@Base+0x8c>
   17474:	mov	r3, #0
   17478:	mov	r0, r3
   1747c:	sub	sp, fp, #4
   17480:	pop	{fp, pc}
   17484:			; <UNDEFINED> instruction: 0x000041b0
   17488:	strdeq	r0, [r0], -r8
   1748c:	andeq	r3, r0, r4, ror #21
   17490:	muleq	r0, ip, sp

00017494 <flatcc_builder_check_union_field@@Base>:
   17494:	push	{fp, lr}
   17498:	add	fp, sp, #4
   1749c:	sub	sp, sp, #8
   174a0:	str	r0, [fp, #-8]
   174a4:	mov	r3, r1
   174a8:	strh	r3, [fp, #-10]
   174ac:	ldr	r3, [fp, #-8]
   174b0:	ldr	r3, [r3, #32]
   174b4:	ldrh	r3, [r3, #14]
   174b8:	cmp	r3, #3
   174bc:	beq	174e0 <flatcc_builder_check_union_field@@Base+0x4c>
   174c0:	ldr	r3, [pc, #292]	; 175ec <flatcc_builder_check_union_field@@Base+0x158>
   174c4:	add	r3, pc, r3
   174c8:	ldr	r2, [pc, #288]	; 175f0 <flatcc_builder_check_union_field@@Base+0x15c>
   174cc:	ldr	r1, [pc, #288]	; 175f4 <flatcc_builder_check_union_field@@Base+0x160>
   174d0:	add	r1, pc, r1
   174d4:	ldr	r0, [pc, #284]	; 175f8 <flatcc_builder_check_union_field@@Base+0x164>
   174d8:	add	r0, pc, r0
   174dc:	bl	1209c <__assert_fail@plt>
   174e0:	ldrh	r3, [fp, #-10]
   174e4:	cmp	r3, #0
   174e8:	beq	17500 <flatcc_builder_check_union_field@@Base+0x6c>
   174ec:	ldr	r3, [fp, #-8]
   174f0:	ldrh	r3, [r3, #8]
   174f4:	ldrh	r2, [fp, #-10]
   174f8:	cmp	r2, r3
   174fc:	bcc	17508 <flatcc_builder_check_union_field@@Base+0x74>
   17500:	mov	r3, #0
   17504:	b	175e0 <flatcc_builder_check_union_field@@Base+0x14c>
   17508:	ldr	r3, [fp, #-8]
   1750c:	ldr	r2, [r3, #4]
   17510:	ldrh	r3, [fp, #-10]
   17514:	sub	r3, r3, #-2147483647	; 0x80000001
   17518:	lsl	r3, r3, #1
   1751c:	add	r3, r2, r3
   17520:	ldrh	r3, [r3]
   17524:	cmp	r3, #0
   17528:	bne	17558 <flatcc_builder_check_union_field@@Base+0xc4>
   1752c:	ldr	r3, [fp, #-8]
   17530:	ldr	r2, [r3, #4]
   17534:	ldrh	r3, [fp, #-10]
   17538:	lsl	r3, r3, #1
   1753c:	add	r3, r2, r3
   17540:	ldrh	r3, [r3]
   17544:	cmp	r3, #0
   17548:	moveq	r3, #1
   1754c:	movne	r3, #0
   17550:	uxtb	r3, r3
   17554:	b	175e0 <flatcc_builder_check_union_field@@Base+0x14c>
   17558:	ldr	r3, [fp, #-8]
   1755c:	ldr	r3, [r3, #16]
   17560:	ldr	r2, [fp, #-8]
   17564:	ldr	r1, [r2, #4]
   17568:	ldrh	r2, [fp, #-10]
   1756c:	sub	r2, r2, #-2147483647	; 0x80000001
   17570:	lsl	r2, r2, #1
   17574:	add	r2, r1, r2
   17578:	ldrh	r2, [r2]
   1757c:	add	r3, r3, r2
   17580:	ldrb	r3, [r3]
   17584:	cmp	r3, #0
   17588:	beq	175b8 <flatcc_builder_check_union_field@@Base+0x124>
   1758c:	ldr	r3, [fp, #-8]
   17590:	ldr	r2, [r3, #4]
   17594:	ldrh	r3, [fp, #-10]
   17598:	lsl	r3, r3, #1
   1759c:	add	r3, r2, r3
   175a0:	ldrh	r3, [r3]
   175a4:	cmp	r3, #0
   175a8:	movne	r3, #1
   175ac:	moveq	r3, #0
   175b0:	uxtb	r3, r3
   175b4:	b	175e0 <flatcc_builder_check_union_field@@Base+0x14c>
   175b8:	ldr	r3, [fp, #-8]
   175bc:	ldr	r2, [r3, #4]
   175c0:	ldrh	r3, [fp, #-10]
   175c4:	lsl	r3, r3, #1
   175c8:	add	r3, r2, r3
   175cc:	ldrh	r3, [r3]
   175d0:	cmp	r3, #0
   175d4:	moveq	r3, #1
   175d8:	movne	r3, #0
   175dc:	uxtb	r3, r3
   175e0:	mov	r0, r3
   175e4:	sub	sp, fp, #4
   175e8:	pop	{fp, pc}
   175ec:	andeq	r4, r0, ip, lsr #2
   175f0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   175f4:	andeq	r3, r0, ip, lsr sl
   175f8:	strdeq	r3, [r0], -r4

000175fc <flatcc_builder_check_required@@Base>:
   175fc:	push	{fp, lr}
   17600:	add	fp, sp, #4
   17604:	sub	sp, sp, #24
   17608:	str	r0, [fp, #-16]
   1760c:	str	r1, [fp, #-20]	; 0xffffffec
   17610:	str	r2, [fp, #-24]	; 0xffffffe8
   17614:	ldr	r3, [fp, #-16]
   17618:	ldr	r3, [r3, #32]
   1761c:	ldrh	r3, [r3, #14]
   17620:	cmp	r3, #3
   17624:	beq	17648 <flatcc_builder_check_required@@Base+0x4c>
   17628:	ldr	r3, [pc, #168]	; 176d8 <flatcc_builder_check_required@@Base+0xdc>
   1762c:	add	r3, pc, r3
   17630:	ldr	r2, [pc, #164]	; 176dc <flatcc_builder_check_required@@Base+0xe0>
   17634:	ldr	r1, [pc, #164]	; 176e0 <flatcc_builder_check_required@@Base+0xe4>
   17638:	add	r1, pc, r1
   1763c:	ldr	r0, [pc, #160]	; 176e4 <flatcc_builder_check_required@@Base+0xe8>
   17640:	add	r0, pc, r0
   17644:	bl	1209c <__assert_fail@plt>
   17648:	ldr	r3, [fp, #-16]
   1764c:	ldrh	r3, [r3, #8]
   17650:	mov	r2, r3
   17654:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17658:	cmp	r2, r3
   1765c:	bge	17668 <flatcc_builder_check_required@@Base+0x6c>
   17660:	mov	r3, #0
   17664:	b	176cc <flatcc_builder_check_required@@Base+0xd0>
   17668:	mov	r3, #0
   1766c:	str	r3, [fp, #-8]
   17670:	b	176b8 <flatcc_builder_check_required@@Base+0xbc>
   17674:	ldr	r3, [fp, #-16]
   17678:	ldr	r2, [r3, #4]
   1767c:	ldr	r3, [fp, #-8]
   17680:	lsl	r3, r3, #1
   17684:	ldr	r1, [fp, #-20]	; 0xffffffec
   17688:	add	r3, r1, r3
   1768c:	ldrh	r3, [r3]
   17690:	lsl	r3, r3, #1
   17694:	add	r3, r2, r3
   17698:	ldrh	r3, [r3]
   1769c:	cmp	r3, #0
   176a0:	bne	176ac <flatcc_builder_check_required@@Base+0xb0>
   176a4:	mov	r3, #0
   176a8:	b	176cc <flatcc_builder_check_required@@Base+0xd0>
   176ac:	ldr	r3, [fp, #-8]
   176b0:	add	r3, r3, #1
   176b4:	str	r3, [fp, #-8]
   176b8:	ldr	r2, [fp, #-8]
   176bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176c0:	cmp	r2, r3
   176c4:	blt	17674 <flatcc_builder_check_required@@Base+0x78>
   176c8:	mov	r3, #1
   176cc:	mov	r0, r3
   176d0:	sub	sp, fp, #4
   176d4:	pop	{fp, pc}
   176d8:	andeq	r3, r0, r8, ror #31
   176dc:	andeq	r0, r0, r1, lsl r5
   176e0:	ldrdeq	r3, [r0], -r4
   176e4:	andeq	r3, r0, ip, lsl #23

000176e8 <flatcc_builder_end_table@@Base>:
   176e8:	push	{fp, lr}
   176ec:	add	fp, sp, #4
   176f0:	sub	sp, sp, #48	; 0x30
   176f4:	str	r0, [fp, #-32]	; 0xffffffe0
   176f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   176fc:	ldr	r3, [r3, #32]
   17700:	ldrh	r3, [r3, #14]
   17704:	cmp	r3, #3
   17708:	beq	1772c <flatcc_builder_end_table@@Base+0x44>
   1770c:	ldr	r3, [pc, #508]	; 17910 <flatcc_builder_end_table@@Base+0x228>
   17710:	add	r3, pc, r3
   17714:	ldr	r2, [pc, #504]	; 17914 <flatcc_builder_end_table@@Base+0x22c>
   17718:	ldr	r1, [pc, #504]	; 17918 <flatcc_builder_end_table@@Base+0x230>
   1771c:	add	r1, pc, r1
   17720:	ldr	r0, [pc, #500]	; 1791c <flatcc_builder_end_table@@Base+0x234>
   17724:	add	r0, pc, r0
   17728:	bl	1209c <__assert_fail@plt>
   1772c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17730:	ldr	r3, [r3, #4]
   17734:	sub	r3, r3, #4
   17738:	str	r3, [fp, #-8]
   1773c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17740:	ldrh	r3, [r3, #8]
   17744:	add	r3, r3, #2
   17748:	uxth	r3, r3
   1774c:	lsl	r3, r3, #1
   17750:	strh	r3, [fp, #-10]
   17754:	ldr	r3, [fp, #-8]
   17758:	ldrh	r2, [fp, #-10]
   1775c:	strh	r2, [r3]
   17760:	ldr	r3, [fp, #-8]
   17764:	add	r3, r3, #2
   17768:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1776c:	ldr	r2, [r2, #20]
   17770:	uxth	r2, r2
   17774:	add	r2, r2, #4
   17778:	uxth	r2, r2
   1777c:	strh	r2, [r3]
   17780:	ldr	r3, [fp, #-8]
   17784:	ldrh	r3, [r3]
   17788:	mov	r2, r3
   1778c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17790:	ldr	r3, [r3, #12]
   17794:	eor	r3, r3, r2
   17798:	ldr	r2, [pc, #384]	; 17920 <flatcc_builder_end_table@@Base+0x238>
   1779c:	mul	r3, r2, r3
   177a0:	ldr	r2, [fp, #-8]
   177a4:	add	r2, r2, #2
   177a8:	ldrh	r2, [r2]
   177ac:	eor	r3, r3, r2
   177b0:	ldr	r2, [pc, #360]	; 17920 <flatcc_builder_end_table@@Base+0x238>
   177b4:	mul	r2, r2, r3
   177b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177bc:	str	r2, [r3, #12]
   177c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177c4:	ldr	r3, [r3, #12]
   177c8:	ldrh	r2, [fp, #-10]
   177cc:	ldr	r1, [fp, #-8]
   177d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177d4:	bl	16db8 <flatcc_builder_create_cached_vtable@@Base>
   177d8:	str	r0, [fp, #-16]
   177dc:	ldr	r3, [fp, #-16]
   177e0:	cmp	r3, #0
   177e4:	bne	177f0 <flatcc_builder_end_table@@Base+0x108>
   177e8:	mov	r3, #0
   177ec:	b	17904 <flatcc_builder_end_table@@Base+0x21c>
   177f0:	ldrh	r3, [fp, #-10]
   177f4:	mov	r2, r3
   177f8:	mov	r1, #0
   177fc:	ldr	r0, [fp, #-8]
   17800:	bl	12060 <memset@plt>
   17804:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17808:	ldr	r2, [r3, #76]	; 0x4c
   1780c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17810:	ldr	r3, [r3, #32]
   17814:	ldr	r3, [r3, #20]
   17818:	add	r3, r2, r3
   1781c:	str	r3, [fp, #-20]	; 0xffffffec
   17820:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17824:	ldr	r3, [r3]
   17828:	mov	r2, r3
   1782c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17830:	sub	r3, r2, r3
   17834:	asr	r3, r3, #1
   17838:	str	r3, [fp, #-24]	; 0xffffffe8
   1783c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17840:	ldr	r1, [r3, #16]
   17844:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17848:	ldr	r2, [r3, #20]
   1784c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17850:	ldrh	r0, [r3, #130]	; 0x82
   17854:	ldr	r3, [fp, #-16]
   17858:	str	r3, [sp, #8]
   1785c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17860:	str	r3, [sp, #4]
   17864:	ldr	r3, [fp, #-20]	; 0xffffffec
   17868:	str	r3, [sp]
   1786c:	mov	r3, r0
   17870:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17874:	bl	170c8 <flatcc_builder_create_table@@Base>
   17878:	str	r0, [fp, #-28]	; 0xffffffe4
   1787c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17880:	cmp	r3, #0
   17884:	bne	17890 <flatcc_builder_end_table@@Base+0x1a8>
   17888:	mov	r3, #0
   1788c:	b	17904 <flatcc_builder_end_table@@Base+0x21c>
   17890:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17894:	ldr	r3, [r3, #32]
   17898:	ldr	r2, [r3, #24]
   1789c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178a0:	str	r2, [r3, #12]
   178a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178a8:	ldr	r3, [r3, #32]
   178ac:	ldrh	r2, [r3, #28]
   178b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178b4:	strh	r2, [r3, #8]
   178b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178bc:	ldr	r2, [r3, #52]	; 0x34
   178c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178c4:	ldr	r3, [r3, #32]
   178c8:	ldr	r3, [r3, #16]
   178cc:	add	r2, r2, r3
   178d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178d4:	str	r2, [r3, #4]
   178d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178dc:	ldr	r2, [r3, #76]	; 0x4c
   178e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178e4:	ldr	r3, [r3, #32]
   178e8:	ldr	r3, [r3, #20]
   178ec:	add	r2, r2, r3
   178f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178f4:	str	r2, [r3]
   178f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178fc:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17900:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17904:	mov	r0, r3
   17908:	sub	sp, fp, #4
   1790c:	pop	{fp, pc}
   17910:	andeq	r3, r0, r4, lsr #30
   17914:	andeq	r0, r0, r5, lsr #10
   17918:	strdeq	r3, [r0], -r0
   1791c:	andeq	r3, r0, r8, lsr #21
   17920:			; <UNDEFINED> instruction: 0x9e3779b1

00017924 <flatcc_builder_create_vector@@Base>:
   17924:	push	{r4, fp, lr}
   17928:	add	fp, sp, #8
   1792c:	sub	sp, sp, #108	; 0x6c
   17930:	str	r0, [fp, #-104]	; 0xffffff98
   17934:	str	r1, [fp, #-108]	; 0xffffff94
   17938:	str	r2, [fp, #-112]	; 0xffffff90
   1793c:	str	r3, [fp, #-116]	; 0xffffff8c
   17940:	ldr	r4, [pc, #484]	; 17b2c <flatcc_builder_create_vector@@Base+0x208>
   17944:	add	r4, pc, r4
   17948:	ldr	r2, [fp, #-112]	; 0xffffff90
   1794c:	ldr	r3, [fp, #8]
   17950:	cmp	r2, r3
   17954:	bls	17990 <flatcc_builder_create_vector@@Base+0x6c>
   17958:	ldr	r2, [fp, #-112]	; 0xffffff90
   1795c:	ldr	r3, [fp, #8]
   17960:	cmp	r2, r3
   17964:	bls	17988 <flatcc_builder_create_vector@@Base+0x64>
   17968:	ldr	r3, [pc, #448]	; 17b30 <flatcc_builder_create_vector@@Base+0x20c>
   1796c:	add	r3, pc, r3
   17970:	ldr	r2, [pc, #444]	; 17b34 <flatcc_builder_create_vector@@Base+0x210>
   17974:	ldr	r1, [pc, #444]	; 17b38 <flatcc_builder_create_vector@@Base+0x214>
   17978:	add	r1, pc, r1
   1797c:	ldr	r0, [pc, #440]	; 17b3c <flatcc_builder_create_vector@@Base+0x218>
   17980:	add	r0, pc, r0
   17984:	bl	1209c <__assert_fail@plt>
   17988:	mov	r3, #0
   1798c:	b	17b20 <flatcc_builder_create_vector@@Base+0x1fc>
   17990:	mov	r1, #4
   17994:	add	r3, fp, #4
   17998:	mov	r0, r3
   1799c:	bl	149cc <flatcc_builder_clear@@Base+0xf8>
   179a0:	ldrh	r3, [fp, #4]
   179a4:	mov	r1, r3
   179a8:	ldr	r0, [fp, #-104]	; 0xffffff98
   179ac:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   179b0:	ldr	r3, [fp, #-112]	; 0xffffff90
   179b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   179b8:	mul	r3, r2, r3
   179bc:	str	r3, [fp, #-16]
   179c0:	ldr	r0, [fp, #-112]	; 0xffffff90
   179c4:	bl	13984 <main@@Base+0x3dc>
   179c8:	mov	r3, r0
   179cc:	str	r3, [fp, #-24]	; 0xffffffe8
   179d0:	ldrh	r3, [fp, #4]
   179d4:	mov	r2, r3
   179d8:	ldr	r1, [fp, #-16]
   179dc:	ldr	r0, [fp, #-104]	; 0xffffff98
   179e0:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   179e4:	str	r0, [fp, #-20]	; 0xffffffec
   179e8:	mov	r3, #0
   179ec:	str	r3, [fp, #-96]	; 0xffffffa0
   179f0:	mov	r3, #0
   179f4:	str	r3, [fp, #-92]	; 0xffffffa4
   179f8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   179fc:	add	r3, r3, #4
   17a00:	str	r3, [fp, #-96]	; 0xffffffa0
   17a04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a08:	add	r3, r3, #1
   17a0c:	lsl	r3, r3, #3
   17a10:	sub	r2, fp, #12
   17a14:	add	r3, r2, r3
   17a18:	sub	r2, fp, #24
   17a1c:	str	r2, [r3, #-84]	; 0xffffffac
   17a20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a24:	add	r3, r3, #1
   17a28:	lsl	r3, r3, #3
   17a2c:	sub	r2, fp, #12
   17a30:	add	r3, r2, r3
   17a34:	mov	r2, #4
   17a38:	str	r2, [r3, #-80]	; 0xffffffb0
   17a3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a40:	add	r3, r3, #1
   17a44:	str	r3, [fp, #-92]	; 0xffffffa4
   17a48:	ldr	r3, [fp, #-16]
   17a4c:	cmp	r3, #0
   17a50:	beq	17aa8 <flatcc_builder_create_vector@@Base+0x184>
   17a54:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17a58:	ldr	r3, [fp, #-16]
   17a5c:	add	r3, r2, r3
   17a60:	str	r3, [fp, #-96]	; 0xffffffa0
   17a64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a68:	add	r3, r3, #1
   17a6c:	lsl	r3, r3, #3
   17a70:	sub	r2, fp, #12
   17a74:	add	r3, r2, r3
   17a78:	ldr	r2, [fp, #-108]	; 0xffffff94
   17a7c:	str	r2, [r3, #-84]	; 0xffffffac
   17a80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a84:	add	r3, r3, #1
   17a88:	lsl	r3, r3, #3
   17a8c:	sub	r2, fp, #12
   17a90:	add	r3, r2, r3
   17a94:	ldr	r2, [fp, #-16]
   17a98:	str	r2, [r3, #-80]	; 0xffffffb0
   17a9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17aa0:	add	r3, r3, #1
   17aa4:	str	r3, [fp, #-92]	; 0xffffffa4
   17aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17aac:	cmp	r3, #0
   17ab0:	beq	17b0c <flatcc_builder_create_vector@@Base+0x1e8>
   17ab4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17abc:	add	r3, r2, r3
   17ac0:	str	r3, [fp, #-96]	; 0xffffffa0
   17ac4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ac8:	add	r3, r3, #1
   17acc:	lsl	r3, r3, #3
   17ad0:	sub	r2, fp, #12
   17ad4:	add	r3, r2, r3
   17ad8:	ldr	r2, [pc, #96]	; 17b40 <flatcc_builder_create_vector@@Base+0x21c>
   17adc:	ldr	r2, [r4, r2]
   17ae0:	str	r2, [r3, #-84]	; 0xffffffac
   17ae4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ae8:	add	r3, r3, #1
   17aec:	lsl	r3, r3, #3
   17af0:	sub	r2, fp, #12
   17af4:	add	r3, r2, r3
   17af8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17afc:	str	r2, [r3, #-80]	; 0xffffffb0
   17b00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17b04:	add	r3, r3, #1
   17b08:	str	r3, [fp, #-92]	; 0xffffffa4
   17b0c:	sub	r3, fp, #96	; 0x60
   17b10:	mov	r1, r3
   17b14:	ldr	r0, [fp, #-104]	; 0xffffff98
   17b18:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17b1c:	mov	r3, r0
   17b20:	mov	r0, r3
   17b24:	sub	sp, fp, #8
   17b28:	pop	{r4, fp, pc}
   17b2c:			; <UNDEFINED> instruction: 0x000146b4
   17b30:	andeq	r3, r0, r4, ror #25
   17b34:	andeq	r0, r0, r5, asr r5
   17b38:	muleq	r0, r4, r5
   17b3c:	andeq	r3, r0, r8, ror r8
   17b40:	andeq	r0, r0, r0, rrx

00017b44 <flatcc_builder_end_vector@@Base>:
   17b44:	push	{fp, lr}
   17b48:	add	fp, sp, #4
   17b4c:	sub	sp, sp, #24
   17b50:	str	r0, [fp, #-16]
   17b54:	ldr	r3, [fp, #-16]
   17b58:	ldr	r3, [r3, #32]
   17b5c:	ldrh	r3, [r3, #14]
   17b60:	cmp	r3, #4
   17b64:	beq	17b88 <flatcc_builder_end_vector@@Base+0x44>
   17b68:	ldr	r3, [pc, #148]	; 17c04 <flatcc_builder_end_vector@@Base+0xc0>
   17b6c:	add	r3, pc, r3
   17b70:	ldr	r2, [pc, #144]	; 17c08 <flatcc_builder_end_vector@@Base+0xc4>
   17b74:	ldr	r1, [pc, #144]	; 17c0c <flatcc_builder_end_vector@@Base+0xc8>
   17b78:	add	r1, pc, r1
   17b7c:	ldr	r0, [pc, #140]	; 17c10 <flatcc_builder_end_vector@@Base+0xcc>
   17b80:	add	r0, pc, r0
   17b84:	bl	1209c <__assert_fail@plt>
   17b88:	ldr	r3, [fp, #-16]
   17b8c:	ldr	r1, [r3, #16]
   17b90:	ldr	r3, [fp, #-16]
   17b94:	ldr	r3, [r3, #32]
   17b98:	ldr	r0, [r3, #20]
   17b9c:	ldr	r3, [fp, #-16]
   17ba0:	ldr	r3, [r3, #32]
   17ba4:	ldr	ip, [r3, #16]
   17ba8:	ldr	r3, [fp, #-16]
   17bac:	ldrh	r3, [r3, #130]	; 0x82
   17bb0:	ldr	r2, [fp, #-16]
   17bb4:	ldr	r2, [r2, #32]
   17bb8:	ldr	r2, [r2, #24]
   17bbc:	str	r2, [sp, #4]
   17bc0:	str	r3, [sp]
   17bc4:	mov	r3, ip
   17bc8:	mov	r2, r0
   17bcc:	ldr	r0, [fp, #-16]
   17bd0:	bl	17924 <flatcc_builder_create_vector@@Base>
   17bd4:	str	r0, [fp, #-8]
   17bd8:	ldr	r3, [fp, #-8]
   17bdc:	cmp	r3, #0
   17be0:	bne	17bec <flatcc_builder_end_vector@@Base+0xa8>
   17be4:	mov	r3, #0
   17be8:	b	17bf8 <flatcc_builder_end_vector@@Base+0xb4>
   17bec:	ldr	r0, [fp, #-16]
   17bf0:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17bf4:	ldr	r3, [fp, #-8]
   17bf8:	mov	r0, r3
   17bfc:	sub	sp, fp, #4
   17c00:	pop	{fp, pc}
   17c04:	andeq	r3, r0, r4, lsl #22
   17c08:	andeq	r0, r0, r8, ror r5
   17c0c:	muleq	r0, r4, r3
   17c10:	ldrdeq	r3, [r0], -r0

00017c14 <flatcc_builder_vector_count@@Base>:
   17c14:	push	{fp}		; (str fp, [sp, #-4]!)
   17c18:	add	fp, sp, #0
   17c1c:	sub	sp, sp, #12
   17c20:	str	r0, [fp, #-8]
   17c24:	ldr	r3, [fp, #-8]
   17c28:	ldr	r3, [r3, #32]
   17c2c:	ldr	r3, [r3, #20]
   17c30:	mov	r0, r3
   17c34:	add	sp, fp, #0
   17c38:	pop	{fp}		; (ldr fp, [sp], #4)
   17c3c:	bx	lr

00017c40 <flatcc_builder_vector_edit@@Base>:
   17c40:	push	{fp}		; (str fp, [sp, #-4]!)
   17c44:	add	fp, sp, #0
   17c48:	sub	sp, sp, #12
   17c4c:	str	r0, [fp, #-8]
   17c50:	ldr	r3, [fp, #-8]
   17c54:	ldr	r3, [r3, #16]
   17c58:	mov	r0, r3
   17c5c:	add	sp, fp, #0
   17c60:	pop	{fp}		; (ldr fp, [sp], #4)
   17c64:	bx	lr
   17c68:	push	{r4, fp, lr}
   17c6c:	add	fp, sp, #8
   17c70:	sub	sp, sp, #116	; 0x74
   17c74:	str	r0, [fp, #-112]	; 0xffffff90
   17c78:	str	r1, [fp, #-116]	; 0xffffff8c
   17c7c:	str	r2, [fp, #-120]	; 0xffffff88
   17c80:	str	r3, [fp, #-124]	; 0xffffff84
   17c84:	ldr	r4, [pc, #748]	; 17f78 <flatcc_builder_vector_edit@@Base+0x338>
   17c88:	add	r4, pc, r4
   17c8c:	ldr	r3, [fp, #-120]	; 0xffffff88
   17c90:	cmn	r3, #-1073741823	; 0xc0000001
   17c94:	bls	17ca0 <flatcc_builder_vector_edit@@Base+0x60>
   17c98:	mov	r3, #0
   17c9c:	b	17f6c <flatcc_builder_vector_edit@@Base+0x32c>
   17ca0:	mov	r1, #4
   17ca4:	ldr	r0, [fp, #-112]	; 0xffffff90
   17ca8:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   17cac:	ldr	r3, [fp, #-120]	; 0xffffff88
   17cb0:	lsl	r3, r3, #2
   17cb4:	str	r3, [fp, #-20]	; 0xffffffec
   17cb8:	ldr	r0, [fp, #-120]	; 0xffffff88
   17cbc:	bl	13984 <main@@Base+0x3dc>
   17cc0:	mov	r3, r0
   17cc4:	str	r3, [fp, #-36]	; 0xffffffdc
   17cc8:	mov	r2, #4
   17ccc:	ldr	r1, [fp, #-20]	; 0xffffffec
   17cd0:	ldr	r0, [fp, #-112]	; 0xffffff90
   17cd4:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   17cd8:	str	r0, [fp, #-24]	; 0xffffffe8
   17cdc:	mov	r3, #0
   17ce0:	str	r3, [fp, #-108]	; 0xffffff94
   17ce4:	mov	r3, #0
   17ce8:	str	r3, [fp, #-104]	; 0xffffff98
   17cec:	ldr	r3, [fp, #-108]	; 0xffffff94
   17cf0:	add	r3, r3, #4
   17cf4:	str	r3, [fp, #-108]	; 0xffffff94
   17cf8:	ldr	r3, [fp, #-104]	; 0xffffff98
   17cfc:	add	r3, r3, #1
   17d00:	lsl	r3, r3, #3
   17d04:	sub	r2, fp, #12
   17d08:	add	r3, r2, r3
   17d0c:	sub	r2, fp, #36	; 0x24
   17d10:	str	r2, [r3, #-96]	; 0xffffffa0
   17d14:	ldr	r3, [fp, #-104]	; 0xffffff98
   17d18:	add	r3, r3, #1
   17d1c:	lsl	r3, r3, #3
   17d20:	sub	r2, fp, #12
   17d24:	add	r3, r2, r3
   17d28:	mov	r2, #4
   17d2c:	str	r2, [r3, #-92]	; 0xffffffa4
   17d30:	ldr	r3, [fp, #-104]	; 0xffffff98
   17d34:	add	r3, r3, #1
   17d38:	str	r3, [fp, #-104]	; 0xffffff98
   17d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d40:	cmp	r3, #0
   17d44:	beq	17d9c <flatcc_builder_vector_edit@@Base+0x15c>
   17d48:	ldr	r2, [fp, #-108]	; 0xffffff94
   17d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d50:	add	r3, r2, r3
   17d54:	str	r3, [fp, #-108]	; 0xffffff94
   17d58:	ldr	r3, [fp, #-104]	; 0xffffff98
   17d5c:	add	r3, r3, #1
   17d60:	lsl	r3, r3, #3
   17d64:	sub	r2, fp, #12
   17d68:	add	r3, r2, r3
   17d6c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17d70:	str	r2, [r3, #-96]	; 0xffffffa0
   17d74:	ldr	r3, [fp, #-104]	; 0xffffff98
   17d78:	add	r3, r3, #1
   17d7c:	lsl	r3, r3, #3
   17d80:	sub	r2, fp, #12
   17d84:	add	r3, r2, r3
   17d88:	ldr	r2, [fp, #-20]	; 0xffffffec
   17d8c:	str	r2, [r3, #-92]	; 0xffffffa4
   17d90:	ldr	r3, [fp, #-104]	; 0xffffff98
   17d94:	add	r3, r3, #1
   17d98:	str	r3, [fp, #-104]	; 0xffffff98
   17d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17da0:	cmp	r3, #0
   17da4:	beq	17e00 <flatcc_builder_vector_edit@@Base+0x1c0>
   17da8:	ldr	r2, [fp, #-108]	; 0xffffff94
   17dac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17db0:	add	r3, r2, r3
   17db4:	str	r3, [fp, #-108]	; 0xffffff94
   17db8:	ldr	r3, [fp, #-104]	; 0xffffff98
   17dbc:	add	r3, r3, #1
   17dc0:	lsl	r3, r3, #3
   17dc4:	sub	r2, fp, #12
   17dc8:	add	r3, r2, r3
   17dcc:	ldr	r2, [pc, #424]	; 17f7c <flatcc_builder_vector_edit@@Base+0x33c>
   17dd0:	ldr	r2, [r4, r2]
   17dd4:	str	r2, [r3, #-96]	; 0xffffffa0
   17dd8:	ldr	r3, [fp, #-104]	; 0xffffff98
   17ddc:	add	r3, r3, #1
   17de0:	lsl	r3, r3, #3
   17de4:	sub	r2, fp, #12
   17de8:	add	r3, r2, r3
   17dec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17df0:	str	r2, [r3, #-92]	; 0xffffffa4
   17df4:	ldr	r3, [fp, #-104]	; 0xffffff98
   17df8:	add	r3, r3, #1
   17dfc:	str	r3, [fp, #-104]	; 0xffffff98
   17e00:	ldr	r3, [fp, #-112]	; 0xffffff90
   17e04:	ldr	r3, [r3, #136]	; 0x88
   17e08:	mov	r2, r3
   17e0c:	ldr	r3, [fp, #-108]	; 0xffffff94
   17e10:	sub	r3, r2, r3
   17e14:	str	r3, [fp, #-28]	; 0xffffffe4
   17e18:	mov	r3, #0
   17e1c:	str	r3, [fp, #-16]
   17e20:	b	17f48 <flatcc_builder_vector_edit@@Base+0x308>
   17e24:	ldr	r3, [fp, #-16]
   17e28:	lsl	r3, r3, #2
   17e2c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17e30:	add	r3, r2, r3
   17e34:	ldr	r3, [r3]
   17e38:	cmp	r3, #0
   17e3c:	beq	17ed8 <flatcc_builder_vector_edit@@Base+0x298>
   17e40:	ldr	r3, [fp, #-16]
   17e44:	lsl	r3, r3, #2
   17e48:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17e4c:	add	r3, r2, r3
   17e50:	ldr	r3, [r3]
   17e54:	mov	r2, r3
   17e58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e5c:	sub	r2, r2, r3
   17e60:	ldr	r3, [fp, #-16]
   17e64:	lsl	r3, r3, #2
   17e68:	sub	r3, r2, r3
   17e6c:	sub	r3, r3, #4
   17e70:	str	r3, [fp, #-32]	; 0xffffffe0
   17e74:	ldr	r3, [fp, #-16]
   17e78:	lsl	r3, r3, #2
   17e7c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17e80:	add	r4, r2, r3
   17e84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e88:	bl	13984 <main@@Base+0x3dc>
   17e8c:	mov	r3, r0
   17e90:	str	r3, [r4]
   17e94:	ldr	r3, [fp, #-124]	; 0xffffff84
   17e98:	cmp	r3, #0
   17e9c:	beq	17f3c <flatcc_builder_vector_edit@@Base+0x2fc>
   17ea0:	ldr	r2, [fp, #-124]	; 0xffffff84
   17ea4:	ldr	r3, [fp, #-16]
   17ea8:	add	r3, r2, r3
   17eac:	ldrb	r3, [r3]
   17eb0:	cmp	r3, #0
   17eb4:	bne	17f3c <flatcc_builder_vector_edit@@Base+0x2fc>
   17eb8:	ldr	r3, [pc, #192]	; 17f80 <flatcc_builder_vector_edit@@Base+0x340>
   17ebc:	add	r3, pc, r3
   17ec0:	ldr	r2, [pc, #188]	; 17f84 <flatcc_builder_vector_edit@@Base+0x344>
   17ec4:	ldr	r1, [pc, #188]	; 17f88 <flatcc_builder_vector_edit@@Base+0x348>
   17ec8:	add	r1, pc, r1
   17ecc:	ldr	r0, [pc, #184]	; 17f8c <flatcc_builder_vector_edit@@Base+0x34c>
   17ed0:	add	r0, pc, r0
   17ed4:	bl	1209c <__assert_fail@plt>
   17ed8:	ldr	r3, [fp, #-124]	; 0xffffff84
   17edc:	cmp	r3, #0
   17ee0:	beq	17f1c <flatcc_builder_vector_edit@@Base+0x2dc>
   17ee4:	ldr	r2, [fp, #-124]	; 0xffffff84
   17ee8:	ldr	r3, [fp, #-16]
   17eec:	add	r3, r2, r3
   17ef0:	ldrb	r3, [r3]
   17ef4:	cmp	r3, #0
   17ef8:	beq	17f3c <flatcc_builder_vector_edit@@Base+0x2fc>
   17efc:	ldr	r3, [pc, #140]	; 17f90 <flatcc_builder_vector_edit@@Base+0x350>
   17f00:	add	r3, pc, r3
   17f04:	ldr	r2, [pc, #136]	; 17f94 <flatcc_builder_vector_edit@@Base+0x354>
   17f08:	ldr	r1, [pc, #136]	; 17f98 <flatcc_builder_vector_edit@@Base+0x358>
   17f0c:	add	r1, pc, r1
   17f10:	ldr	r0, [pc, #132]	; 17f9c <flatcc_builder_vector_edit@@Base+0x35c>
   17f14:	add	r0, pc, r0
   17f18:	bl	1209c <__assert_fail@plt>
   17f1c:	ldr	r3, [pc, #124]	; 17fa0 <flatcc_builder_vector_edit@@Base+0x360>
   17f20:	add	r3, pc, r3
   17f24:	ldr	r2, [pc, #120]	; 17fa4 <flatcc_builder_vector_edit@@Base+0x364>
   17f28:	ldr	r1, [pc, #120]	; 17fa8 <flatcc_builder_vector_edit@@Base+0x368>
   17f2c:	add	r1, pc, r1
   17f30:	ldr	r0, [pc, #116]	; 17fac <flatcc_builder_vector_edit@@Base+0x36c>
   17f34:	add	r0, pc, r0
   17f38:	bl	1209c <__assert_fail@plt>
   17f3c:	ldr	r3, [fp, #-16]
   17f40:	add	r3, r3, #1
   17f44:	str	r3, [fp, #-16]
   17f48:	ldr	r2, [fp, #-16]
   17f4c:	ldr	r3, [fp, #-120]	; 0xffffff88
   17f50:	cmp	r2, r3
   17f54:	bcc	17e24 <flatcc_builder_vector_edit@@Base+0x1e4>
   17f58:	sub	r3, fp, #108	; 0x6c
   17f5c:	mov	r1, r3
   17f60:	ldr	r0, [fp, #-112]	; 0xffffff90
   17f64:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17f68:	mov	r3, r0
   17f6c:	mov	r0, r3
   17f70:	sub	sp, fp, #8
   17f74:	pop	{r4, fp, pc}
   17f78:	andeq	r4, r1, r0, ror r3
   17f7c:	andeq	r0, r0, r0, rrx
   17f80:	ldrdeq	r3, [r0], -r0
   17f84:			; <UNDEFINED> instruction: 0x000005b1
   17f88:	andeq	r3, r0, r4, asr #32
   17f8c:	andeq	r3, r0, ip, lsr r3
   17f90:	andeq	r3, r0, ip, lsl #15
   17f94:			; <UNDEFINED> instruction: 0x000005b5
   17f98:	andeq	r3, r0, r0
   17f9c:	andeq	r3, r0, r8, lsl #6
   17fa0:	andeq	r3, r0, ip, ror #14
   17fa4:			; <UNDEFINED> instruction: 0x000005b7
   17fa8:	andeq	r2, r0, r0, ror #31
   17fac:	andeq	r3, r0, r8, lsr r0

00017fb0 <flatcc_builder_create_offset_vector_direct@@Base>:
   17fb0:	push	{fp, lr}
   17fb4:	add	fp, sp, #4
   17fb8:	sub	sp, sp, #16
   17fbc:	str	r0, [fp, #-8]
   17fc0:	str	r1, [fp, #-12]
   17fc4:	str	r2, [fp, #-16]
   17fc8:	mov	r3, #0
   17fcc:	ldr	r2, [fp, #-16]
   17fd0:	ldr	r1, [fp, #-12]
   17fd4:	ldr	r0, [fp, #-8]
   17fd8:	bl	17c68 <flatcc_builder_vector_edit@@Base+0x28>
   17fdc:	mov	r3, r0
   17fe0:	mov	r0, r3
   17fe4:	sub	sp, fp, #4
   17fe8:	pop	{fp, pc}

00017fec <flatcc_builder_end_offset_vector@@Base>:
   17fec:	push	{fp, lr}
   17ff0:	add	fp, sp, #4
   17ff4:	sub	sp, sp, #16
   17ff8:	str	r0, [fp, #-16]
   17ffc:	ldr	r3, [fp, #-16]
   18000:	ldr	r3, [r3, #32]
   18004:	ldrh	r3, [r3, #14]
   18008:	cmp	r3, #5
   1800c:	beq	18030 <flatcc_builder_end_offset_vector@@Base+0x44>
   18010:	ldr	r3, [pc, #104]	; 18080 <flatcc_builder_end_offset_vector@@Base+0x94>
   18014:	add	r3, pc, r3
   18018:	ldr	r2, [pc, #100]	; 18084 <flatcc_builder_end_offset_vector@@Base+0x98>
   1801c:	ldr	r1, [pc, #100]	; 18088 <flatcc_builder_end_offset_vector@@Base+0x9c>
   18020:	add	r1, pc, r1
   18024:	ldr	r0, [pc, #96]	; 1808c <flatcc_builder_end_offset_vector@@Base+0xa0>
   18028:	add	r0, pc, r0
   1802c:	bl	1209c <__assert_fail@plt>
   18030:	ldr	r3, [fp, #-16]
   18034:	ldr	r1, [r3, #16]
   18038:	ldr	r3, [fp, #-16]
   1803c:	ldr	r3, [r3, #32]
   18040:	ldr	r3, [r3, #20]
   18044:	mov	r2, r3
   18048:	ldr	r0, [fp, #-16]
   1804c:	bl	17fb0 <flatcc_builder_create_offset_vector_direct@@Base>
   18050:	str	r0, [fp, #-8]
   18054:	ldr	r3, [fp, #-8]
   18058:	cmp	r3, #0
   1805c:	bne	18068 <flatcc_builder_end_offset_vector@@Base+0x7c>
   18060:	mov	r3, #0
   18064:	b	18074 <flatcc_builder_end_offset_vector@@Base+0x88>
   18068:	ldr	r0, [fp, #-16]
   1806c:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18070:	ldr	r3, [fp, #-8]
   18074:	mov	r0, r3
   18078:	sub	sp, fp, #4
   1807c:	pop	{fp, pc}
   18080:	muleq	r0, r8, r6
   18084:	andeq	r0, r0, r8, asr #11
   18088:	andeq	r2, r0, ip, ror #29
   1808c:	muleq	r0, r4, r0

00018090 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   18090:	push	{fp, lr}
   18094:	add	fp, sp, #4
   18098:	sub	sp, sp, #16
   1809c:	str	r0, [fp, #-16]
   180a0:	str	r1, [fp, #-20]	; 0xffffffec
   180a4:	ldr	r3, [fp, #-16]
   180a8:	ldr	r3, [r3, #32]
   180ac:	ldrh	r3, [r3, #14]
   180b0:	cmp	r3, #5
   180b4:	beq	180d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   180b8:	ldr	r3, [pc, #104]	; 18128 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   180bc:	add	r3, pc, r3
   180c0:	ldr	r2, [pc, #100]	; 1812c <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   180c4:	ldr	r1, [pc, #100]	; 18130 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   180c8:	add	r1, pc, r1
   180cc:	ldr	r0, [pc, #96]	; 18134 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   180d0:	add	r0, pc, r0
   180d4:	bl	1209c <__assert_fail@plt>
   180d8:	ldr	r3, [fp, #-16]
   180dc:	ldr	r1, [r3, #16]
   180e0:	ldr	r3, [fp, #-16]
   180e4:	ldr	r3, [r3, #32]
   180e8:	ldr	r2, [r3, #20]
   180ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   180f0:	ldr	r0, [fp, #-16]
   180f4:	bl	17c68 <flatcc_builder_vector_edit@@Base+0x28>
   180f8:	str	r0, [fp, #-8]
   180fc:	ldr	r3, [fp, #-8]
   18100:	cmp	r3, #0
   18104:	bne	18110 <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   18108:	mov	r3, #0
   1810c:	b	1811c <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   18110:	ldr	r0, [fp, #-16]
   18114:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18118:	ldr	r3, [fp, #-8]
   1811c:	mov	r0, r3
   18120:	sub	sp, fp, #4
   18124:	pop	{fp, pc}
   18128:	andeq	r3, r0, r4, lsl r6
   1812c:	ldrdeq	r0, [r0], -r5
   18130:	andeq	r2, r0, r4, asr #28
   18134:	andeq	r2, r0, ip, ror #31

00018138 <flatcc_builder_offset_vector_edit@@Base>:
   18138:	push	{fp}		; (str fp, [sp, #-4]!)
   1813c:	add	fp, sp, #0
   18140:	sub	sp, sp, #12
   18144:	str	r0, [fp, #-8]
   18148:	ldr	r3, [fp, #-8]
   1814c:	ldr	r3, [r3, #16]
   18150:	mov	r0, r3
   18154:	add	sp, fp, #0
   18158:	pop	{fp}		; (ldr fp, [sp], #4)
   1815c:	bx	lr

00018160 <flatcc_builder_offset_vector_count@@Base>:
   18160:	push	{fp}		; (str fp, [sp, #-4]!)
   18164:	add	fp, sp, #0
   18168:	sub	sp, sp, #12
   1816c:	str	r0, [fp, #-8]
   18170:	ldr	r3, [fp, #-8]
   18174:	ldr	r3, [r3, #32]
   18178:	ldr	r3, [r3, #20]
   1817c:	mov	r0, r3
   18180:	add	sp, fp, #0
   18184:	pop	{fp}		; (ldr fp, [sp], #4)
   18188:	bx	lr

0001818c <flatcc_builder_table_add_union@@Base>:
   1818c:	push	{fp, lr}
   18190:	add	fp, sp, #4
   18194:	sub	sp, sp, #24
   18198:	str	r0, [fp, #-16]
   1819c:	str	r1, [fp, #-20]	; 0xffffffec
   181a0:	sub	r1, fp, #28
   181a4:	stm	r1, {r2, r3}
   181a8:	ldr	r3, [fp, #-16]
   181ac:	ldr	r3, [r3, #32]
   181b0:	ldrh	r3, [r3, #14]
   181b4:	cmp	r3, #3
   181b8:	beq	181dc <flatcc_builder_table_add_union@@Base+0x50>
   181bc:	ldr	r3, [pc, #352]	; 18324 <flatcc_builder_table_add_union@@Base+0x198>
   181c0:	add	r3, pc, r3
   181c4:	ldr	r2, [pc, #348]	; 18328 <flatcc_builder_table_add_union@@Base+0x19c>
   181c8:	ldr	r1, [pc, #348]	; 1832c <flatcc_builder_table_add_union@@Base+0x1a0>
   181cc:	add	r1, pc, r1
   181d0:	ldr	r0, [pc, #344]	; 18330 <flatcc_builder_table_add_union@@Base+0x1a4>
   181d4:	add	r0, pc, r0
   181d8:	bl	1209c <__assert_fail@plt>
   181dc:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   181e0:	cmp	r3, #0
   181e4:	bne	18234 <flatcc_builder_table_add_union@@Base+0xa8>
   181e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   181ec:	cmp	r3, #0
   181f0:	beq	18234 <flatcc_builder_table_add_union@@Base+0xa8>
   181f4:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   181f8:	cmp	r3, #0
   181fc:	bne	1822c <flatcc_builder_table_add_union@@Base+0xa0>
   18200:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18204:	cmp	r3, #0
   18208:	beq	1822c <flatcc_builder_table_add_union@@Base+0xa0>
   1820c:	ldr	r3, [pc, #288]	; 18334 <flatcc_builder_table_add_union@@Base+0x1a8>
   18210:	add	r3, pc, r3
   18214:	ldr	r2, [pc, #284]	; 18338 <flatcc_builder_table_add_union@@Base+0x1ac>
   18218:	ldr	r1, [pc, #284]	; 1833c <flatcc_builder_table_add_union@@Base+0x1b0>
   1821c:	add	r1, pc, r1
   18220:	ldr	r0, [pc, #280]	; 18340 <flatcc_builder_table_add_union@@Base+0x1b4>
   18224:	add	r0, pc, r0
   18228:	bl	1209c <__assert_fail@plt>
   1822c:	mvn	r3, #0
   18230:	b	18318 <flatcc_builder_table_add_union@@Base+0x18c>
   18234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18238:	cmp	r3, #0
   1823c:	beq	1829c <flatcc_builder_table_add_union@@Base+0x110>
   18240:	ldr	r1, [fp, #-20]	; 0xffffffec
   18244:	ldr	r0, [fp, #-16]
   18248:	bl	192d4 <flatcc_builder_table_add_offset@@Base>
   1824c:	str	r0, [fp, #-8]
   18250:	ldr	r3, [fp, #-8]
   18254:	cmp	r3, #0
   18258:	bne	18290 <flatcc_builder_table_add_union@@Base+0x104>
   1825c:	ldr	r3, [fp, #-8]
   18260:	cmp	r3, #0
   18264:	bne	18288 <flatcc_builder_table_add_union@@Base+0xfc>
   18268:	ldr	r3, [pc, #212]	; 18344 <flatcc_builder_table_add_union@@Base+0x1b8>
   1826c:	add	r3, pc, r3
   18270:	ldr	r2, [pc, #208]	; 18348 <flatcc_builder_table_add_union@@Base+0x1bc>
   18274:	ldr	r1, [pc, #208]	; 1834c <flatcc_builder_table_add_union@@Base+0x1c0>
   18278:	add	r1, pc, r1
   1827c:	ldr	r0, [pc, #204]	; 18350 <flatcc_builder_table_add_union@@Base+0x1c4>
   18280:	add	r0, pc, r0
   18284:	bl	1209c <__assert_fail@plt>
   18288:	mvn	r3, #0
   1828c:	b	18318 <flatcc_builder_table_add_union@@Base+0x18c>
   18290:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18294:	ldr	r3, [fp, #-8]
   18298:	str	r2, [r3]
   1829c:	ldr	r3, [fp, #-20]	; 0xffffffec
   182a0:	sub	r1, r3, #1
   182a4:	mov	r3, #1
   182a8:	mov	r2, #1
   182ac:	ldr	r0, [fp, #-16]
   182b0:	bl	19078 <flatcc_builder_table_add@@Base>
   182b4:	str	r0, [fp, #-12]
   182b8:	ldr	r3, [fp, #-12]
   182bc:	cmp	r3, #0
   182c0:	bne	182f8 <flatcc_builder_table_add_union@@Base+0x16c>
   182c4:	ldr	r3, [fp, #-12]
   182c8:	cmp	r3, #0
   182cc:	bne	182f0 <flatcc_builder_table_add_union@@Base+0x164>
   182d0:	ldr	r3, [pc, #124]	; 18354 <flatcc_builder_table_add_union@@Base+0x1c8>
   182d4:	add	r3, pc, r3
   182d8:	ldr	r2, [pc, #120]	; 18358 <flatcc_builder_table_add_union@@Base+0x1cc>
   182dc:	ldr	r1, [pc, #120]	; 1835c <flatcc_builder_table_add_union@@Base+0x1d0>
   182e0:	add	r1, pc, r1
   182e4:	ldr	r0, [pc, #116]	; 18360 <flatcc_builder_table_add_union@@Base+0x1d4>
   182e8:	add	r0, pc, r0
   182ec:	bl	1209c <__assert_fail@plt>
   182f0:	mvn	r3, #0
   182f4:	b	18318 <flatcc_builder_table_add_union@@Base+0x18c>
   182f8:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   182fc:	mov	r0, r3
   18300:	bl	139a8 <main@@Base+0x400>
   18304:	mov	r3, r0
   18308:	mov	r2, r3
   1830c:	ldr	r3, [fp, #-12]
   18310:	strb	r2, [r3]
   18314:	mov	r3, #0
   18318:	mov	r0, r3
   1831c:	sub	sp, fp, #4
   18320:	pop	{fp, pc}
   18324:	andeq	r3, r0, ip, lsr r5
   18328:	andeq	r0, r0, lr, ror #11
   1832c:	andeq	r2, r0, r0, asr #26
   18330:	strdeq	r2, [r0], -r8
   18334:	andeq	r3, r0, ip, ror #9
   18338:	andeq	r0, r0, pc, ror #11
   1833c:	strdeq	r2, [r0], -r0
   18340:	andeq	r3, r0, r8
   18344:	muleq	r0, r0, r4
   18348:	strdeq	r0, [r0], -r2
   1834c:	muleq	r0, r4, ip
   18350:	ldrdeq	r2, [r0], -r0
   18354:	andeq	r3, r0, r8, lsr #8
   18358:	strdeq	r0, [r0], -r6
   1835c:	andeq	r2, r0, ip, lsr #24
   18360:	andeq	r2, r0, r4, ror pc

00018364 <flatcc_builder_table_add_union_vector@@Base>:
   18364:	push	{fp, lr}
   18368:	add	fp, sp, #4
   1836c:	sub	sp, sp, #24
   18370:	str	r0, [fp, #-16]
   18374:	str	r1, [fp, #-20]	; 0xffffffec
   18378:	sub	r1, fp, #28
   1837c:	stm	r1, {r2, r3}
   18380:	ldr	r3, [fp, #-16]
   18384:	ldr	r3, [r3, #32]
   18388:	ldrh	r3, [r3, #14]
   1838c:	cmp	r3, #3
   18390:	beq	183b4 <flatcc_builder_table_add_union_vector@@Base+0x50>
   18394:	ldr	r3, [pc, #396]	; 18528 <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   18398:	add	r3, pc, r3
   1839c:	mov	r2, #1536	; 0x600
   183a0:	ldr	r1, [pc, #388]	; 1852c <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   183a4:	add	r1, pc, r1
   183a8:	ldr	r0, [pc, #384]	; 18530 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   183ac:	add	r0, pc, r0
   183b0:	bl	1209c <__assert_fail@plt>
   183b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183b8:	cmp	r3, #0
   183bc:	moveq	r3, #1
   183c0:	movne	r3, #0
   183c4:	uxtb	r2, r3
   183c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183cc:	cmp	r3, #0
   183d0:	moveq	r3, #1
   183d4:	movne	r3, #0
   183d8:	uxtb	r3, r3
   183dc:	eor	r3, r3, r2
   183e0:	uxtb	r3, r3
   183e4:	cmp	r3, #0
   183e8:	beq	1844c <flatcc_builder_table_add_union_vector@@Base+0xe8>
   183ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183f0:	cmp	r3, #0
   183f4:	movne	r3, #1
   183f8:	moveq	r3, #0
   183fc:	uxtb	r2, r3
   18400:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18404:	cmp	r3, #0
   18408:	moveq	r3, #1
   1840c:	movne	r3, #0
   18410:	uxtb	r3, r3
   18414:	eor	r3, r3, r2
   18418:	uxtb	r3, r3
   1841c:	cmp	r3, #0
   18420:	bne	18444 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   18424:	ldr	r3, [pc, #264]	; 18534 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   18428:	add	r3, pc, r3
   1842c:	ldr	r2, [pc, #260]	; 18538 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18430:	ldr	r1, [pc, #260]	; 1853c <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   18434:	add	r1, pc, r1
   18438:	ldr	r0, [pc, #256]	; 18540 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   1843c:	add	r0, pc, r0
   18440:	bl	1209c <__assert_fail@plt>
   18444:	mvn	r3, #0
   18448:	b	1851c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1844c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18450:	cmp	r3, #0
   18454:	beq	18518 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1845c:	sub	r3, r3, #1
   18460:	mov	r1, r3
   18464:	ldr	r0, [fp, #-16]
   18468:	bl	192d4 <flatcc_builder_table_add_offset@@Base>
   1846c:	str	r0, [fp, #-8]
   18470:	ldr	r3, [fp, #-8]
   18474:	cmp	r3, #0
   18478:	bne	184b0 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   1847c:	ldr	r3, [fp, #-8]
   18480:	cmp	r3, #0
   18484:	bne	184a8 <flatcc_builder_table_add_union_vector@@Base+0x144>
   18488:	ldr	r3, [pc, #180]	; 18544 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   1848c:	add	r3, pc, r3
   18490:	ldr	r2, [pc, #176]	; 18548 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18494:	ldr	r1, [pc, #176]	; 1854c <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18498:	add	r1, pc, r1
   1849c:	ldr	r0, [pc, #172]	; 18550 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   184a0:	add	r0, pc, r0
   184a4:	bl	1209c <__assert_fail@plt>
   184a8:	mvn	r3, #0
   184ac:	b	1851c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   184b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   184b4:	ldr	r3, [fp, #-8]
   184b8:	str	r2, [r3]
   184bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   184c0:	ldr	r0, [fp, #-16]
   184c4:	bl	192d4 <flatcc_builder_table_add_offset@@Base>
   184c8:	str	r0, [fp, #-8]
   184cc:	ldr	r3, [fp, #-8]
   184d0:	cmp	r3, #0
   184d4:	bne	1850c <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   184d8:	ldr	r3, [fp, #-8]
   184dc:	cmp	r3, #0
   184e0:	bne	18504 <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   184e4:	ldr	r3, [pc, #104]	; 18554 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   184e8:	add	r3, pc, r3
   184ec:	ldr	r2, [pc, #100]	; 18558 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   184f0:	ldr	r1, [pc, #100]	; 1855c <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   184f4:	add	r1, pc, r1
   184f8:	ldr	r0, [pc, #96]	; 18560 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   184fc:	add	r0, pc, r0
   18500:	bl	1209c <__assert_fail@plt>
   18504:	mvn	r3, #0
   18508:	b	1851c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1850c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18510:	ldr	r3, [fp, #-8]
   18514:	str	r2, [r3]
   18518:	mov	r3, #0
   1851c:	mov	r0, r3
   18520:	sub	sp, fp, #4
   18524:	pop	{fp, pc}
   18528:	andeq	r3, r0, r4, lsl #7
   1852c:	andeq	r2, r0, r8, ror #22
   18530:	andeq	r2, r0, r0, lsr #28
   18534:	strdeq	r3, [r0], -r4
   18538:	andeq	r0, r0, r1, lsl #12
   1853c:	ldrdeq	r2, [r0], -r8
   18540:	andeq	r2, r0, ip, lsr #28
   18544:	muleq	r0, r0, r2
   18548:	andeq	r0, r0, r4, lsl #12
   1854c:	andeq	r2, r0, r4, ror sl
   18550:			; <UNDEFINED> instruction: 0x00002db0
   18554:	andeq	r3, r0, r4, lsr r2
   18558:	andeq	r0, r0, r8, lsl #12
   1855c:	andeq	r2, r0, r8, lsl sl
   18560:	andeq	r2, r0, r4, asr sp

00018564 <flatcc_builder_create_union_vector@@Base>:
   18564:	push	{fp, lr}
   18568:	add	fp, sp, #4
   1856c:	sub	sp, sp, #48	; 0x30
   18570:	str	r0, [fp, #-32]	; 0xffffffe0
   18574:	str	r1, [fp, #-36]	; 0xffffffdc
   18578:	str	r2, [fp, #-40]	; 0xffffffd8
   1857c:	str	r3, [fp, #-44]	; 0xffffffd4
   18580:	mov	r3, #0
   18584:	str	r3, [fp, #-24]	; 0xffffffe8
   18588:	mov	r3, #0
   1858c:	str	r3, [fp, #-20]	; 0xffffffec
   18590:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18594:	bl	16998 <flatcc_builder_start_offset_vector@@Base>
   18598:	mov	r3, r0
   1859c:	cmp	r3, #0
   185a0:	beq	185bc <flatcc_builder_create_union_vector@@Base+0x58>
   185a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   185a8:	mov	r2, r3
   185ac:	sub	r3, fp, #24
   185b0:	ldm	r3, {r0, r1}
   185b4:	stm	r2, {r0, r1}
   185b8:	b	186d8 <flatcc_builder_create_union_vector@@Base+0x174>
   185bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   185c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   185c4:	bl	16244 <flatcc_builder_extend_offset_vector@@Base>
   185c8:	mov	r3, r0
   185cc:	cmp	r3, #0
   185d0:	bne	185ec <flatcc_builder_create_union_vector@@Base+0x88>
   185d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   185d8:	mov	r2, r3
   185dc:	sub	r3, fp, #24
   185e0:	ldm	r3, {r0, r1}
   185e4:	stm	r2, {r0, r1}
   185e8:	b	186d8 <flatcc_builder_create_union_vector@@Base+0x174>
   185ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   185f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   185f4:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   185f8:	str	r0, [fp, #-12]
   185fc:	ldr	r3, [fp, #-12]
   18600:	cmp	r3, #0
   18604:	bne	18620 <flatcc_builder_create_union_vector@@Base+0xbc>
   18608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1860c:	mov	r2, r3
   18610:	sub	r3, fp, #24
   18614:	ldm	r3, {r0, r1}
   18618:	stm	r2, {r0, r1}
   1861c:	b	186d8 <flatcc_builder_create_union_vector@@Base+0x174>
   18620:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18624:	bl	18138 <flatcc_builder_offset_vector_edit@@Base>
   18628:	str	r0, [fp, #-16]
   1862c:	mov	r3, #0
   18630:	str	r3, [fp, #-8]
   18634:	b	18690 <flatcc_builder_create_union_vector@@Base+0x12c>
   18638:	ldr	r2, [fp, #-12]
   1863c:	ldr	r3, [fp, #-8]
   18640:	add	r3, r2, r3
   18644:	ldr	r2, [fp, #-8]
   18648:	lsl	r2, r2, #3
   1864c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18650:	add	r2, r1, r2
   18654:	ldrb	r2, [r2]
   18658:	strb	r2, [r3]
   1865c:	ldr	r3, [fp, #-8]
   18660:	lsl	r3, r3, #2
   18664:	ldr	r2, [fp, #-16]
   18668:	add	r3, r2, r3
   1866c:	ldr	r2, [fp, #-8]
   18670:	lsl	r2, r2, #3
   18674:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18678:	add	r2, r1, r2
   1867c:	ldr	r2, [r2, #4]
   18680:	str	r2, [r3]
   18684:	ldr	r3, [fp, #-8]
   18688:	add	r3, r3, #1
   1868c:	str	r3, [fp, #-8]
   18690:	ldr	r2, [fp, #-8]
   18694:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18698:	cmp	r2, r3
   1869c:	bcc	18638 <flatcc_builder_create_union_vector@@Base+0xd4>
   186a0:	sub	r0, fp, #24
   186a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   186a8:	str	r3, [sp]
   186ac:	ldr	r3, [fp, #-16]
   186b0:	ldr	r2, [fp, #-12]
   186b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   186b8:	bl	186e4 <flatcc_builder_create_union_vector_direct@@Base>
   186bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   186c0:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   186c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186c8:	mov	r2, r3
   186cc:	sub	r3, fp, #24
   186d0:	ldm	r3, {r0, r1}
   186d4:	stm	r2, {r0, r1}
   186d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   186dc:	sub	sp, fp, #4
   186e0:	pop	{fp, pc}

000186e4 <flatcc_builder_create_union_vector_direct@@Base>:
   186e4:	push	{fp, lr}
   186e8:	add	fp, sp, #4
   186ec:	sub	sp, sp, #32
   186f0:	str	r0, [fp, #-16]
   186f4:	str	r1, [fp, #-20]	; 0xffffffec
   186f8:	str	r2, [fp, #-24]	; 0xffffffe8
   186fc:	str	r3, [fp, #-28]	; 0xffffffe4
   18700:	mov	r3, #0
   18704:	str	r3, [fp, #-12]
   18708:	mov	r3, #0
   1870c:	str	r3, [fp, #-8]
   18710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18714:	ldr	r2, [fp, #4]
   18718:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1871c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18720:	bl	17c68 <flatcc_builder_vector_edit@@Base+0x28>
   18724:	mov	r3, r0
   18728:	str	r3, [fp, #-8]
   1872c:	ldr	r3, [fp, #-8]
   18730:	cmp	r3, #0
   18734:	bne	18750 <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   18738:	ldr	r3, [fp, #-16]
   1873c:	mov	r2, r3
   18740:	sub	r3, fp, #12
   18744:	ldm	r3, {r0, r1}
   18748:	stm	r2, {r0, r1}
   1874c:	b	187b4 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18750:	mvn	r3, #0
   18754:	str	r3, [sp, #4]
   18758:	mov	r3, #1
   1875c:	str	r3, [sp]
   18760:	mov	r3, #1
   18764:	ldr	r2, [fp, #4]
   18768:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1876c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18770:	bl	17924 <flatcc_builder_create_vector@@Base>
   18774:	mov	r3, r0
   18778:	str	r3, [fp, #-12]
   1877c:	ldr	r3, [fp, #-12]
   18780:	cmp	r3, #0
   18784:	bne	187a0 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   18788:	ldr	r3, [fp, #-16]
   1878c:	mov	r2, r3
   18790:	sub	r3, fp, #12
   18794:	ldm	r3, {r0, r1}
   18798:	stm	r2, {r0, r1}
   1879c:	b	187b4 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   187a0:	ldr	r3, [fp, #-16]
   187a4:	mov	r2, r3
   187a8:	sub	r3, fp, #12
   187ac:	ldm	r3, {r0, r1}
   187b0:	stm	r2, {r0, r1}
   187b4:	ldr	r0, [fp, #-16]
   187b8:	sub	sp, fp, #4
   187bc:	pop	{fp, pc}

000187c0 <flatcc_builder_start_union_vector@@Base>:
   187c0:	push	{fp, lr}
   187c4:	add	fp, sp, #4
   187c8:	sub	sp, sp, #8
   187cc:	str	r0, [fp, #-8]
   187d0:	mov	r1, #4
   187d4:	ldr	r0, [fp, #-8]
   187d8:	bl	14d18 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   187dc:	mov	r3, r0
   187e0:	cmp	r3, #0
   187e4:	beq	187f0 <flatcc_builder_start_union_vector@@Base+0x30>
   187e8:	mvn	r3, #0
   187ec:	b	18830 <flatcc_builder_start_union_vector@@Base+0x70>
   187f0:	ldr	r3, [fp, #-8]
   187f4:	ldr	r3, [r3, #32]
   187f8:	mov	r2, #8
   187fc:	str	r2, [r3, #16]
   18800:	ldr	r3, [fp, #-8]
   18804:	ldr	r3, [r3, #32]
   18808:	mov	r2, #0
   1880c:	str	r2, [r3, #20]
   18810:	ldr	r3, [fp, #-8]
   18814:	ldr	r3, [r3, #32]
   18818:	mov	r2, #7
   1881c:	strh	r2, [r3, #14]
   18820:	mvn	r1, #3
   18824:	ldr	r0, [fp, #-8]
   18828:	bl	13c90 <flatcc_builder_default_alloc@@Base+0x1c8>
   1882c:	mov	r3, #0
   18830:	mov	r0, r3
   18834:	sub	sp, fp, #4
   18838:	pop	{fp, pc}

0001883c <flatcc_builder_end_union_vector@@Base>:
   1883c:	push	{fp, lr}
   18840:	add	fp, sp, #4
   18844:	sub	sp, sp, #48	; 0x30
   18848:	str	r0, [fp, #-40]	; 0xffffffd8
   1884c:	str	r1, [fp, #-44]	; 0xffffffd4
   18850:	mov	r3, #0
   18854:	str	r3, [fp, #-32]	; 0xffffffe0
   18858:	mov	r3, #0
   1885c:	str	r3, [fp, #-28]	; 0xffffffe4
   18860:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18864:	ldr	r3, [r3, #32]
   18868:	ldrh	r3, [r3, #14]
   1886c:	cmp	r3, #7
   18870:	beq	18894 <flatcc_builder_end_union_vector@@Base+0x58>
   18874:	ldr	r3, [pc, #320]	; 189bc <flatcc_builder_end_union_vector@@Base+0x180>
   18878:	add	r3, pc, r3
   1887c:	ldr	r2, [pc, #316]	; 189c0 <flatcc_builder_end_union_vector@@Base+0x184>
   18880:	ldr	r1, [pc, #316]	; 189c4 <flatcc_builder_end_union_vector@@Base+0x188>
   18884:	add	r1, pc, r1
   18888:	ldr	r0, [pc, #312]	; 189c8 <flatcc_builder_end_union_vector@@Base+0x18c>
   1888c:	add	r0, pc, r0
   18890:	bl	1209c <__assert_fail@plt>
   18894:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18898:	bl	189f4 <flatcc_builder_union_vector_count@@Base>
   1889c:	str	r0, [fp, #-12]
   188a0:	ldr	r2, [fp, #-12]
   188a4:	mov	r3, r2
   188a8:	lsl	r3, r3, #2
   188ac:	add	r3, r3, r2
   188b0:	mov	r1, r3
   188b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   188b8:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   188bc:	str	r0, [fp, #-16]
   188c0:	ldr	r3, [fp, #-16]
   188c4:	cmp	r3, #0
   188c8:	bne	188e4 <flatcc_builder_end_union_vector@@Base+0xa8>
   188cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   188d0:	mov	r2, r3
   188d4:	sub	r3, fp, #32
   188d8:	ldm	r3, {r0, r1}
   188dc:	stm	r2, {r0, r1}
   188e0:	b	189b0 <flatcc_builder_end_union_vector@@Base+0x174>
   188e4:	ldr	r3, [fp, #-12]
   188e8:	lsl	r3, r3, #2
   188ec:	ldr	r2, [fp, #-16]
   188f0:	add	r3, r2, r3
   188f4:	str	r3, [fp, #-20]	; 0xffffffec
   188f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   188fc:	bl	189cc <flatcc_builder_union_vector_edit@@Base>
   18900:	str	r0, [fp, #-24]	; 0xffffffe8
   18904:	mov	r3, #0
   18908:	str	r3, [fp, #-8]
   1890c:	b	18968 <flatcc_builder_end_union_vector@@Base+0x12c>
   18910:	ldr	r2, [fp, #-20]	; 0xffffffec
   18914:	ldr	r3, [fp, #-8]
   18918:	add	r3, r2, r3
   1891c:	ldr	r2, [fp, #-8]
   18920:	lsl	r2, r2, #3
   18924:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18928:	add	r2, r1, r2
   1892c:	ldrb	r2, [r2]
   18930:	strb	r2, [r3]
   18934:	ldr	r3, [fp, #-8]
   18938:	lsl	r3, r3, #2
   1893c:	ldr	r2, [fp, #-16]
   18940:	add	r3, r2, r3
   18944:	ldr	r2, [fp, #-8]
   18948:	lsl	r2, r2, #3
   1894c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18950:	add	r2, r1, r2
   18954:	ldr	r2, [r2, #4]
   18958:	str	r2, [r3]
   1895c:	ldr	r3, [fp, #-8]
   18960:	add	r3, r3, #1
   18964:	str	r3, [fp, #-8]
   18968:	ldr	r2, [fp, #-8]
   1896c:	ldr	r3, [fp, #-12]
   18970:	cmp	r2, r3
   18974:	bcc	18910 <flatcc_builder_end_union_vector@@Base+0xd4>
   18978:	sub	r0, fp, #32
   1897c:	ldr	r3, [fp, #-12]
   18980:	str	r3, [sp]
   18984:	ldr	r3, [fp, #-16]
   18988:	ldr	r2, [fp, #-20]	; 0xffffffec
   1898c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18990:	bl	186e4 <flatcc_builder_create_union_vector_direct@@Base>
   18994:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18998:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1899c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   189a0:	mov	r2, r3
   189a4:	sub	r3, fp, #32
   189a8:	ldm	r3, {r0, r1}
   189ac:	stm	r2, {r0, r1}
   189b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   189b4:	sub	sp, fp, #4
   189b8:	pop	{fp, pc}
   189bc:	andeq	r2, r0, ip, asr #29
   189c0:	andeq	r0, r0, r1, asr r6
   189c4:	andeq	r2, r0, r8, lsl #13
   189c8:	andeq	r2, r0, r4, lsl #20

000189cc <flatcc_builder_union_vector_edit@@Base>:
   189cc:	push	{fp}		; (str fp, [sp, #-4]!)
   189d0:	add	fp, sp, #0
   189d4:	sub	sp, sp, #12
   189d8:	str	r0, [fp, #-8]
   189dc:	ldr	r3, [fp, #-8]
   189e0:	ldr	r3, [r3, #16]
   189e4:	mov	r0, r3
   189e8:	add	sp, fp, #0
   189ec:	pop	{fp}		; (ldr fp, [sp], #4)
   189f0:	bx	lr

000189f4 <flatcc_builder_union_vector_count@@Base>:
   189f4:	push	{fp}		; (str fp, [sp, #-4]!)
   189f8:	add	fp, sp, #0
   189fc:	sub	sp, sp, #12
   18a00:	str	r0, [fp, #-8]
   18a04:	ldr	r3, [fp, #-8]
   18a08:	ldr	r3, [r3, #32]
   18a0c:	ldr	r3, [r3, #20]
   18a10:	mov	r0, r3
   18a14:	add	sp, fp, #0
   18a18:	pop	{fp}		; (ldr fp, [sp], #4)
   18a1c:	bx	lr

00018a20 <flatcc_builder_extend_union_vector@@Base>:
   18a20:	push	{fp, lr}
   18a24:	add	fp, sp, #4
   18a28:	sub	sp, sp, #8
   18a2c:	str	r0, [fp, #-8]
   18a30:	str	r1, [fp, #-12]
   18a34:	mvn	r2, #-536870912	; 0xe0000000
   18a38:	ldr	r1, [fp, #-12]
   18a3c:	ldr	r0, [fp, #-8]
   18a40:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   18a44:	mov	r3, r0
   18a48:	cmp	r3, #0
   18a4c:	beq	18a58 <flatcc_builder_extend_union_vector@@Base+0x38>
   18a50:	mov	r3, #0
   18a54:	b	18a70 <flatcc_builder_extend_union_vector@@Base+0x50>
   18a58:	ldr	r3, [fp, #-12]
   18a5c:	lsl	r3, r3, #3
   18a60:	mov	r1, r3
   18a64:	ldr	r0, [fp, #-8]
   18a68:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   18a6c:	mov	r3, r0
   18a70:	mov	r0, r3
   18a74:	sub	sp, fp, #4
   18a78:	pop	{fp, pc}

00018a7c <flatcc_builder_truncate_union_vector@@Base>:
   18a7c:	push	{fp, lr}
   18a80:	add	fp, sp, #4
   18a84:	sub	sp, sp, #8
   18a88:	str	r0, [fp, #-8]
   18a8c:	str	r1, [fp, #-12]
   18a90:	ldr	r3, [fp, #-8]
   18a94:	ldr	r3, [r3, #32]
   18a98:	ldrh	r3, [r3, #14]
   18a9c:	cmp	r3, #7
   18aa0:	beq	18ac4 <flatcc_builder_truncate_union_vector@@Base+0x48>
   18aa4:	ldr	r3, [pc, #192]	; 18b6c <flatcc_builder_truncate_union_vector@@Base+0xf0>
   18aa8:	add	r3, pc, r3
   18aac:	ldr	r2, [pc, #188]	; 18b70 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18ab0:	ldr	r1, [pc, #188]	; 18b74 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18ab4:	add	r1, pc, r1
   18ab8:	ldr	r0, [pc, #184]	; 18b78 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18abc:	add	r0, pc, r0
   18ac0:	bl	1209c <__assert_fail@plt>
   18ac4:	ldr	r3, [fp, #-8]
   18ac8:	ldr	r3, [r3, #32]
   18acc:	ldr	r2, [r3, #20]
   18ad0:	ldr	r3, [fp, #-12]
   18ad4:	cmp	r2, r3
   18ad8:	bcs	18b1c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18adc:	ldr	r3, [fp, #-8]
   18ae0:	ldr	r3, [r3, #32]
   18ae4:	ldr	r2, [r3, #20]
   18ae8:	ldr	r3, [fp, #-12]
   18aec:	cmp	r2, r3
   18af0:	bcs	18b14 <flatcc_builder_truncate_union_vector@@Base+0x98>
   18af4:	ldr	r3, [pc, #128]	; 18b7c <flatcc_builder_truncate_union_vector@@Base+0x100>
   18af8:	add	r3, pc, r3
   18afc:	ldr	r2, [pc, #124]	; 18b80 <flatcc_builder_truncate_union_vector@@Base+0x104>
   18b00:	ldr	r1, [pc, #124]	; 18b84 <flatcc_builder_truncate_union_vector@@Base+0x108>
   18b04:	add	r1, pc, r1
   18b08:	ldr	r0, [pc, #120]	; 18b88 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   18b0c:	add	r0, pc, r0
   18b10:	bl	1209c <__assert_fail@plt>
   18b14:	mvn	r3, #0
   18b18:	b	18b60 <flatcc_builder_truncate_union_vector@@Base+0xe4>
   18b1c:	ldr	r3, [fp, #-8]
   18b20:	ldr	r3, [r3, #32]
   18b24:	ldr	r2, [fp, #-8]
   18b28:	ldr	r2, [r2, #32]
   18b2c:	ldr	r1, [r2, #20]
   18b30:	ldr	r2, [fp, #-12]
   18b34:	sub	r2, r1, r2
   18b38:	str	r2, [r3, #20]
   18b3c:	ldr	r3, [fp, #-8]
   18b40:	ldr	r3, [r3, #32]
   18b44:	ldr	r3, [r3, #16]
   18b48:	ldr	r2, [fp, #-12]
   18b4c:	mul	r3, r2, r3
   18b50:	mov	r1, r3
   18b54:	ldr	r0, [fp, #-8]
   18b58:	bl	13e54 <flatcc_builder_default_alloc@@Base+0x38c>
   18b5c:	mov	r3, #0
   18b60:	mov	r0, r3
   18b64:	sub	sp, fp, #4
   18b68:	pop	{fp, pc}
   18b6c:			; <UNDEFINED> instruction: 0x00002cbc
   18b70:	andeq	r0, r0, r1, lsl #13
   18b74:	andeq	r2, r0, r8, asr r4
   18b78:	ldrdeq	r2, [r0], -r4
   18b7c:	andeq	r2, r0, ip, ror #24
   18b80:	andeq	r0, r0, r2, lsl #13
   18b84:	andeq	r2, r0, r8, lsl #8
   18b88:	andeq	r2, r0, r4, lsr r6

00018b8c <flatcc_builder_union_vector_push@@Base>:
   18b8c:	push	{fp, lr}
   18b90:	add	fp, sp, #4
   18b94:	sub	sp, sp, #24
   18b98:	str	r0, [fp, #-16]
   18b9c:	sub	r3, fp, #24
   18ba0:	stm	r3, {r1, r2}
   18ba4:	ldr	r3, [fp, #-16]
   18ba8:	ldr	r3, [r3, #32]
   18bac:	ldrh	r3, [r3, #14]
   18bb0:	cmp	r3, #7
   18bb4:	beq	18bd8 <flatcc_builder_union_vector_push@@Base+0x4c>
   18bb8:	ldr	r3, [pc, #152]	; 18c58 <flatcc_builder_union_vector_push@@Base+0xcc>
   18bbc:	add	r3, pc, r3
   18bc0:	ldr	r2, [pc, #148]	; 18c5c <flatcc_builder_union_vector_push@@Base+0xd0>
   18bc4:	ldr	r1, [pc, #148]	; 18c60 <flatcc_builder_union_vector_push@@Base+0xd4>
   18bc8:	add	r1, pc, r1
   18bcc:	ldr	r0, [pc, #144]	; 18c64 <flatcc_builder_union_vector_push@@Base+0xd8>
   18bd0:	add	r0, pc, r0
   18bd4:	bl	1209c <__assert_fail@plt>
   18bd8:	ldr	r3, [fp, #-16]
   18bdc:	ldr	r3, [r3, #32]
   18be0:	ldr	r3, [r3, #20]
   18be4:	cmn	r3, #-536870911	; 0xe0000001
   18be8:	bne	18bf4 <flatcc_builder_union_vector_push@@Base+0x68>
   18bec:	mov	r3, #0
   18bf0:	b	18c4c <flatcc_builder_union_vector_push@@Base+0xc0>
   18bf4:	ldr	r3, [fp, #-16]
   18bf8:	ldr	r3, [r3, #32]
   18bfc:	ldr	r2, [fp, #-16]
   18c00:	ldr	r2, [r2, #32]
   18c04:	ldr	r2, [r2, #20]
   18c08:	add	r2, r2, #1
   18c0c:	str	r2, [r3, #20]
   18c10:	mov	r1, #8
   18c14:	ldr	r0, [fp, #-16]
   18c18:	bl	13db8 <flatcc_builder_default_alloc@@Base+0x2f0>
   18c1c:	str	r0, [fp, #-8]
   18c20:	ldr	r3, [fp, #-8]
   18c24:	cmp	r3, #0
   18c28:	bne	18c34 <flatcc_builder_union_vector_push@@Base+0xa8>
   18c2c:	mov	r3, #0
   18c30:	b	18c4c <flatcc_builder_union_vector_push@@Base+0xc0>
   18c34:	ldr	r3, [fp, #-8]
   18c38:	mov	r2, r3
   18c3c:	sub	r3, fp, #24
   18c40:	ldm	r3, {r0, r1}
   18c44:	stm	r2, {r0, r1}
   18c48:	ldr	r3, [fp, #-8]
   18c4c:	mov	r0, r3
   18c50:	sub	sp, fp, #4
   18c54:	pop	{fp, pc}
   18c58:	ldrdeq	r2, [r0], -r0
   18c5c:	andeq	r0, r0, sp, lsl #13
   18c60:	andeq	r2, r0, r4, asr #6
   18c64:	andeq	r2, r0, r0, asr #13

00018c68 <flatcc_builder_append_union_vector@@Base>:
   18c68:	push	{fp, lr}
   18c6c:	add	fp, sp, #4
   18c70:	sub	sp, sp, #16
   18c74:	str	r0, [fp, #-8]
   18c78:	str	r1, [fp, #-12]
   18c7c:	str	r2, [fp, #-16]
   18c80:	ldr	r3, [fp, #-8]
   18c84:	ldr	r3, [r3, #32]
   18c88:	ldrh	r3, [r3, #14]
   18c8c:	cmp	r3, #7
   18c90:	beq	18cb4 <flatcc_builder_append_union_vector@@Base+0x4c>
   18c94:	ldr	r3, [pc, #100]	; 18d00 <flatcc_builder_append_union_vector@@Base+0x98>
   18c98:	add	r3, pc, r3
   18c9c:	ldr	r2, [pc, #96]	; 18d04 <flatcc_builder_append_union_vector@@Base+0x9c>
   18ca0:	ldr	r1, [pc, #96]	; 18d08 <flatcc_builder_append_union_vector@@Base+0xa0>
   18ca4:	add	r1, pc, r1
   18ca8:	ldr	r0, [pc, #92]	; 18d0c <flatcc_builder_append_union_vector@@Base+0xa4>
   18cac:	add	r0, pc, r0
   18cb0:	bl	1209c <__assert_fail@plt>
   18cb4:	mvn	r2, #-536870912	; 0xe0000000
   18cb8:	ldr	r1, [fp, #-16]
   18cbc:	ldr	r0, [fp, #-8]
   18cc0:	bl	15f30 <flatcc_builder_end_struct@@Base+0xa0>
   18cc4:	mov	r3, r0
   18cc8:	cmp	r3, #0
   18ccc:	beq	18cd8 <flatcc_builder_append_union_vector@@Base+0x70>
   18cd0:	mov	r3, #0
   18cd4:	b	18cf4 <flatcc_builder_append_union_vector@@Base+0x8c>
   18cd8:	ldr	r3, [fp, #-16]
   18cdc:	lsl	r3, r3, #3
   18ce0:	mov	r2, r3
   18ce4:	ldr	r1, [fp, #-12]
   18ce8:	ldr	r0, [fp, #-8]
   18cec:	bl	13eb0 <flatcc_builder_default_alloc@@Base+0x3e8>
   18cf0:	mov	r3, r0
   18cf4:	mov	r0, r3
   18cf8:	sub	sp, fp, #4
   18cfc:	pop	{fp, pc}
   18d00:	andeq	r2, r0, r8, lsl fp
   18d04:	muleq	r0, ip, r6
   18d08:	andeq	r2, r0, r8, ror #4
   18d0c:	andeq	r2, r0, r4, ror #11

00018d10 <flatcc_builder_create_string@@Base>:
   18d10:	push	{r4, fp, lr}
   18d14:	add	fp, sp, #8
   18d18:	sub	sp, sp, #100	; 0x64
   18d1c:	str	r0, [fp, #-96]	; 0xffffffa0
   18d20:	str	r1, [fp, #-100]	; 0xffffff9c
   18d24:	str	r2, [fp, #-104]	; 0xffffff98
   18d28:	ldr	r4, [pc, #376]	; 18ea8 <flatcc_builder_create_string@@Base+0x198>
   18d2c:	add	r4, pc, r4
   18d30:	ldr	r0, [fp, #-104]	; 0xffffff98
   18d34:	bl	13984 <main@@Base+0x3dc>
   18d38:	mov	r3, r0
   18d3c:	str	r3, [fp, #-20]	; 0xffffffec
   18d40:	ldr	r3, [fp, #-104]	; 0xffffff98
   18d44:	add	r3, r3, #1
   18d48:	mov	r2, #4
   18d4c:	mov	r1, r3
   18d50:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18d54:	bl	14fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   18d58:	mov	r3, r0
   18d5c:	add	r3, r3, #1
   18d60:	str	r3, [fp, #-16]
   18d64:	mov	r3, #0
   18d68:	str	r3, [fp, #-92]	; 0xffffffa4
   18d6c:	mov	r3, #0
   18d70:	str	r3, [fp, #-88]	; 0xffffffa8
   18d74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18d78:	add	r3, r3, #4
   18d7c:	str	r3, [fp, #-92]	; 0xffffffa4
   18d80:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18d84:	add	r3, r3, #1
   18d88:	lsl	r3, r3, #3
   18d8c:	sub	r2, fp, #12
   18d90:	add	r3, r2, r3
   18d94:	sub	r2, fp, #20
   18d98:	str	r2, [r3, #-80]	; 0xffffffb0
   18d9c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18da0:	add	r3, r3, #1
   18da4:	lsl	r3, r3, #3
   18da8:	sub	r2, fp, #12
   18dac:	add	r3, r2, r3
   18db0:	mov	r2, #4
   18db4:	str	r2, [r3, #-76]	; 0xffffffb4
   18db8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18dbc:	add	r3, r3, #1
   18dc0:	str	r3, [fp, #-88]	; 0xffffffa8
   18dc4:	ldr	r3, [fp, #-104]	; 0xffffff98
   18dc8:	cmp	r3, #0
   18dcc:	beq	18e24 <flatcc_builder_create_string@@Base+0x114>
   18dd0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18dd4:	ldr	r3, [fp, #-104]	; 0xffffff98
   18dd8:	add	r3, r2, r3
   18ddc:	str	r3, [fp, #-92]	; 0xffffffa4
   18de0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18de4:	add	r3, r3, #1
   18de8:	lsl	r3, r3, #3
   18dec:	sub	r2, fp, #12
   18df0:	add	r3, r2, r3
   18df4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18df8:	str	r2, [r3, #-80]	; 0xffffffb0
   18dfc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18e00:	add	r3, r3, #1
   18e04:	lsl	r3, r3, #3
   18e08:	sub	r2, fp, #12
   18e0c:	add	r3, r2, r3
   18e10:	ldr	r2, [fp, #-104]	; 0xffffff98
   18e14:	str	r2, [r3, #-76]	; 0xffffffb4
   18e18:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18e1c:	add	r3, r3, #1
   18e20:	str	r3, [fp, #-88]	; 0xffffffa8
   18e24:	ldr	r3, [fp, #-16]
   18e28:	cmp	r3, #0
   18e2c:	beq	18e88 <flatcc_builder_create_string@@Base+0x178>
   18e30:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18e34:	ldr	r3, [fp, #-16]
   18e38:	add	r3, r2, r3
   18e3c:	str	r3, [fp, #-92]	; 0xffffffa4
   18e40:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18e44:	add	r3, r3, #1
   18e48:	lsl	r3, r3, #3
   18e4c:	sub	r2, fp, #12
   18e50:	add	r3, r2, r3
   18e54:	ldr	r2, [pc, #80]	; 18eac <flatcc_builder_create_string@@Base+0x19c>
   18e58:	ldr	r2, [r4, r2]
   18e5c:	str	r2, [r3, #-80]	; 0xffffffb0
   18e60:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18e64:	add	r3, r3, #1
   18e68:	lsl	r3, r3, #3
   18e6c:	sub	r2, fp, #12
   18e70:	add	r3, r2, r3
   18e74:	ldr	r2, [fp, #-16]
   18e78:	str	r2, [r3, #-76]	; 0xffffffb4
   18e7c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18e80:	add	r3, r3, #1
   18e84:	str	r3, [fp, #-88]	; 0xffffffa8
   18e88:	sub	r3, fp, #92	; 0x5c
   18e8c:	mov	r1, r3
   18e90:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18e94:	bl	15048 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   18e98:	mov	r3, r0
   18e9c:	mov	r0, r3
   18ea0:	sub	sp, fp, #8
   18ea4:	pop	{r4, fp, pc}
   18ea8:	andeq	r3, r1, ip, asr #5
   18eac:	andeq	r0, r0, r0, rrx

00018eb0 <flatcc_builder_create_string_str@@Base>:
   18eb0:	push	{fp, lr}
   18eb4:	add	fp, sp, #4
   18eb8:	sub	sp, sp, #8
   18ebc:	str	r0, [fp, #-8]
   18ec0:	str	r1, [fp, #-12]
   18ec4:	ldr	r0, [fp, #-12]
   18ec8:	bl	12048 <strlen@plt>
   18ecc:	mov	r3, r0
   18ed0:	mov	r2, r3
   18ed4:	ldr	r1, [fp, #-12]
   18ed8:	ldr	r0, [fp, #-8]
   18edc:	bl	18d10 <flatcc_builder_create_string@@Base>
   18ee0:	mov	r3, r0
   18ee4:	mov	r0, r3
   18ee8:	sub	sp, fp, #4
   18eec:	pop	{fp, pc}

00018ef0 <flatcc_builder_create_string_strn@@Base>:
   18ef0:	push	{fp, lr}
   18ef4:	add	fp, sp, #4
   18ef8:	sub	sp, sp, #16
   18efc:	str	r0, [fp, #-8]
   18f00:	str	r1, [fp, #-12]
   18f04:	str	r2, [fp, #-16]
   18f08:	ldr	r1, [fp, #-16]
   18f0c:	ldr	r0, [fp, #-12]
   18f10:	bl	13a74 <main@@Base+0x4cc>
   18f14:	mov	r3, r0
   18f18:	mov	r2, r3
   18f1c:	ldr	r1, [fp, #-12]
   18f20:	ldr	r0, [fp, #-8]
   18f24:	bl	18d10 <flatcc_builder_create_string@@Base>
   18f28:	mov	r3, r0
   18f2c:	mov	r0, r3
   18f30:	sub	sp, fp, #4
   18f34:	pop	{fp, pc}

00018f38 <flatcc_builder_end_string@@Base>:
   18f38:	push	{fp, lr}
   18f3c:	add	fp, sp, #4
   18f40:	sub	sp, sp, #16
   18f44:	str	r0, [fp, #-16]
   18f48:	ldr	r3, [fp, #-16]
   18f4c:	ldr	r3, [r3, #32]
   18f50:	ldrh	r3, [r3, #14]
   18f54:	cmp	r3, #6
   18f58:	beq	18f7c <flatcc_builder_end_string@@Base+0x44>
   18f5c:	ldr	r3, [pc, #160]	; 19004 <flatcc_builder_end_string@@Base+0xcc>
   18f60:	add	r3, pc, r3
   18f64:	ldr	r2, [pc, #156]	; 19008 <flatcc_builder_end_string@@Base+0xd0>
   18f68:	ldr	r1, [pc, #156]	; 1900c <flatcc_builder_end_string@@Base+0xd4>
   18f6c:	add	r1, pc, r1
   18f70:	ldr	r0, [pc, #152]	; 19010 <flatcc_builder_end_string@@Base+0xd8>
   18f74:	add	r0, pc, r0
   18f78:	bl	1209c <__assert_fail@plt>
   18f7c:	ldr	r3, [fp, #-16]
   18f80:	ldr	r3, [r3, #32]
   18f84:	ldr	r2, [r3, #20]
   18f88:	ldr	r3, [fp, #-16]
   18f8c:	ldr	r3, [r3, #20]
   18f90:	cmp	r2, r3
   18f94:	beq	18fb8 <flatcc_builder_end_string@@Base+0x80>
   18f98:	ldr	r3, [pc, #116]	; 19014 <flatcc_builder_end_string@@Base+0xdc>
   18f9c:	add	r3, pc, r3
   18fa0:	ldr	r2, [pc, #112]	; 19018 <flatcc_builder_end_string@@Base+0xe0>
   18fa4:	ldr	r1, [pc, #112]	; 1901c <flatcc_builder_end_string@@Base+0xe4>
   18fa8:	add	r1, pc, r1
   18fac:	ldr	r0, [pc, #108]	; 19020 <flatcc_builder_end_string@@Base+0xe8>
   18fb0:	add	r0, pc, r0
   18fb4:	bl	1209c <__assert_fail@plt>
   18fb8:	ldr	r3, [fp, #-16]
   18fbc:	ldr	r1, [r3, #16]
   18fc0:	ldr	r3, [fp, #-16]
   18fc4:	ldr	r3, [r3, #20]
   18fc8:	mov	r2, r3
   18fcc:	ldr	r0, [fp, #-16]
   18fd0:	bl	18d10 <flatcc_builder_create_string@@Base>
   18fd4:	str	r0, [fp, #-8]
   18fd8:	ldr	r3, [fp, #-8]
   18fdc:	cmp	r3, #0
   18fe0:	bne	18fec <flatcc_builder_end_string@@Base+0xb4>
   18fe4:	mov	r3, #0
   18fe8:	b	18ff8 <flatcc_builder_end_string@@Base+0xc0>
   18fec:	ldr	r0, [fp, #-16]
   18ff0:	bl	14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18ff4:	ldr	r3, [fp, #-8]
   18ff8:	mov	r0, r3
   18ffc:	sub	sp, fp, #4
   19000:	pop	{fp, pc}
   19004:	andeq	r2, r0, r4, ror r8
   19008:	andeq	r0, r0, r4, asr #13
   1900c:	andeq	r1, r0, r0, lsr #31
   19010:	andeq	r2, r0, ip, ror r1
   19014:	andeq	r2, r0, r8, lsr r8
   19018:	andeq	r0, r0, r5, asr #13
   1901c:	andeq	r1, r0, r4, ror #30
   19020:	andeq	r2, r0, r4, lsl r3

00019024 <flatcc_builder_string_edit@@Base>:
   19024:	push	{fp}		; (str fp, [sp, #-4]!)
   19028:	add	fp, sp, #0
   1902c:	sub	sp, sp, #12
   19030:	str	r0, [fp, #-8]
   19034:	ldr	r3, [fp, #-8]
   19038:	ldr	r3, [r3, #16]
   1903c:	mov	r0, r3
   19040:	add	sp, fp, #0
   19044:	pop	{fp}		; (ldr fp, [sp], #4)
   19048:	bx	lr

0001904c <flatcc_builder_string_len@@Base>:
   1904c:	push	{fp}		; (str fp, [sp, #-4]!)
   19050:	add	fp, sp, #0
   19054:	sub	sp, sp, #12
   19058:	str	r0, [fp, #-8]
   1905c:	ldr	r3, [fp, #-8]
   19060:	ldr	r3, [r3, #32]
   19064:	ldr	r3, [r3, #20]
   19068:	mov	r0, r3
   1906c:	add	sp, fp, #0
   19070:	pop	{fp}		; (ldr fp, [sp], #4)
   19074:	bx	lr

00019078 <flatcc_builder_table_add@@Base>:
   19078:	push	{fp, lr}
   1907c:	add	fp, sp, #4
   19080:	sub	sp, sp, #16
   19084:	str	r0, [fp, #-8]
   19088:	str	r1, [fp, #-12]
   1908c:	str	r2, [fp, #-16]
   19090:	strh	r3, [fp, #-18]	; 0xffffffee
   19094:	ldr	r3, [fp, #-8]
   19098:	ldr	r3, [r3, #32]
   1909c:	ldrh	r3, [r3, #14]
   190a0:	cmp	r3, #3
   190a4:	beq	190c8 <flatcc_builder_table_add@@Base+0x50>
   190a8:	ldr	r3, [pc, #268]	; 191bc <flatcc_builder_table_add@@Base+0x144>
   190ac:	add	r3, pc, r3
   190b0:	ldr	r2, [pc, #264]	; 191c0 <flatcc_builder_table_add@@Base+0x148>
   190b4:	ldr	r1, [pc, #264]	; 191c4 <flatcc_builder_table_add@@Base+0x14c>
   190b8:	add	r1, pc, r1
   190bc:	ldr	r0, [pc, #260]	; 191c8 <flatcc_builder_table_add@@Base+0x150>
   190c0:	add	r0, pc, r0
   190c4:	bl	1209c <__assert_fail@plt>
   190c8:	ldr	r3, [fp, #-12]
   190cc:	cmp	r3, #0
   190d0:	blt	190e4 <flatcc_builder_table_add@@Base+0x6c>
   190d4:	ldr	r3, [fp, #-12]
   190d8:	ldr	r2, [pc, #236]	; 191cc <flatcc_builder_table_add@@Base+0x154>
   190dc:	cmp	r3, r2
   190e0:	ble	19104 <flatcc_builder_table_add@@Base+0x8c>
   190e4:	ldr	r3, [pc, #228]	; 191d0 <flatcc_builder_table_add@@Base+0x158>
   190e8:	add	r3, pc, r3
   190ec:	ldr	r2, [pc, #224]	; 191d4 <flatcc_builder_table_add@@Base+0x15c>
   190f0:	ldr	r1, [pc, #224]	; 191d8 <flatcc_builder_table_add@@Base+0x160>
   190f4:	add	r1, pc, r1
   190f8:	ldr	r0, [pc, #220]	; 191dc <flatcc_builder_table_add@@Base+0x164>
   190fc:	add	r0, pc, r0
   19100:	bl	1209c <__assert_fail@plt>
   19104:	ldr	r3, [fp, #-8]
   19108:	ldrh	r3, [r3, #130]	; 0x82
   1910c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19110:	cmp	r2, r3
   19114:	bls	19124 <flatcc_builder_table_add@@Base+0xac>
   19118:	ldr	r3, [fp, #-8]
   1911c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19120:	strh	r2, [r3, #130]	; 0x82
   19124:	ldr	r3, [fp, #-8]
   19128:	ldr	r2, [r3, #4]
   1912c:	ldr	r3, [fp, #-12]
   19130:	lsl	r3, r3, #1
   19134:	add	r3, r2, r3
   19138:	ldrh	r3, [r3]
   1913c:	cmp	r3, #0
   19140:	beq	19164 <flatcc_builder_table_add@@Base+0xec>
   19144:	ldr	r3, [pc, #148]	; 191e0 <flatcc_builder_table_add@@Base+0x168>
   19148:	add	r3, pc, r3
   1914c:	ldr	r2, [pc, #144]	; 191e4 <flatcc_builder_table_add@@Base+0x16c>
   19150:	ldr	r1, [pc, #144]	; 191e8 <flatcc_builder_table_add@@Base+0x170>
   19154:	add	r1, pc, r1
   19158:	ldr	r0, [pc, #140]	; 191ec <flatcc_builder_table_add@@Base+0x174>
   1915c:	add	r0, pc, r0
   19160:	bl	1209c <__assert_fail@plt>
   19164:	ldr	r3, [fp, #-8]
   19168:	ldr	r2, [r3, #12]
   1916c:	ldr	r3, [fp, #-12]
   19170:	eor	r3, r3, r2
   19174:	ldr	r2, [pc, #116]	; 191f0 <flatcc_builder_table_add@@Base+0x178>
   19178:	mul	r2, r2, r3
   1917c:	ldr	r3, [fp, #-16]
   19180:	eor	r3, r3, r2
   19184:	ldr	r2, [pc, #100]	; 191f0 <flatcc_builder_table_add@@Base+0x178>
   19188:	mul	r2, r2, r3
   1918c:	ldr	r3, [fp, #-8]
   19190:	str	r2, [r3, #12]
   19194:	ldr	r3, [fp, #-12]
   19198:	uxth	r3, r3
   1919c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   191a0:	ldr	r1, [fp, #-16]
   191a4:	ldr	r0, [fp, #-8]
   191a8:	bl	13f0c <flatcc_builder_default_alloc@@Base+0x444>
   191ac:	mov	r3, r0
   191b0:	mov	r0, r3
   191b4:	sub	sp, fp, #4
   191b8:	pop	{fp, pc}
   191bc:	andeq	r2, r0, r4, asr #14
   191c0:	andeq	r0, r0, sp, ror #13
   191c4:	andeq	r1, r0, r4, asr lr
   191c8:	andeq	r2, r0, ip, lsl #2
   191cc:	strdeq	r7, [r0], -ip
   191d0:	andeq	r2, r0, r8, lsl #14
   191d4:	andeq	r0, r0, lr, ror #13
   191d8:	andeq	r1, r0, r8, lsl lr
   191dc:	andeq	r2, r0, ip, ror #3
   191e0:	andeq	r2, r0, r8, lsr #13
   191e4:	strdeq	r0, [r0], -r8
   191e8:			; <UNDEFINED> instruction: 0x00001db8
   191ec:	andeq	r1, r0, r0, lsl lr
   191f0:			; <UNDEFINED> instruction: 0x9e3779b1

000191f4 <flatcc_builder_table_edit@@Base>:
   191f4:	push	{fp, lr}
   191f8:	add	fp, sp, #4
   191fc:	sub	sp, sp, #8
   19200:	str	r0, [fp, #-8]
   19204:	str	r1, [fp, #-12]
   19208:	ldr	r3, [fp, #-8]
   1920c:	ldr	r3, [r3, #32]
   19210:	ldrh	r3, [r3, #14]
   19214:	cmp	r3, #3
   19218:	beq	1923c <flatcc_builder_table_edit@@Base+0x48>
   1921c:	ldr	r3, [pc, #64]	; 19264 <flatcc_builder_table_edit@@Base+0x70>
   19220:	add	r3, pc, r3
   19224:	ldr	r2, [pc, #60]	; 19268 <flatcc_builder_table_edit@@Base+0x74>
   19228:	ldr	r1, [pc, #60]	; 1926c <flatcc_builder_table_edit@@Base+0x78>
   1922c:	add	r1, pc, r1
   19230:	ldr	r0, [pc, #56]	; 19270 <flatcc_builder_table_edit@@Base+0x7c>
   19234:	add	r0, pc, r0
   19238:	bl	1209c <__assert_fail@plt>
   1923c:	ldr	r3, [fp, #-8]
   19240:	ldr	r2, [r3, #16]
   19244:	ldr	r3, [fp, #-8]
   19248:	ldr	r1, [r3, #20]
   1924c:	ldr	r3, [fp, #-12]
   19250:	sub	r3, r1, r3
   19254:	add	r3, r2, r3
   19258:	mov	r0, r3
   1925c:	sub	sp, fp, #4
   19260:	pop	{fp, pc}
   19264:	andeq	r2, r0, ip, ror #11
   19268:	andeq	r0, r0, r2, lsl #14
   1926c:	andeq	r1, r0, r0, ror #25
   19270:	muleq	r0, r8, pc	; <UNPREDICTABLE>

00019274 <flatcc_builder_table_add_copy@@Base>:
   19274:	push	{fp, lr}
   19278:	add	fp, sp, #4
   1927c:	sub	sp, sp, #24
   19280:	str	r0, [fp, #-16]
   19284:	str	r1, [fp, #-20]	; 0xffffffec
   19288:	str	r2, [fp, #-24]	; 0xffffffe8
   1928c:	str	r3, [fp, #-28]	; 0xffffffe4
   19290:	ldrh	r3, [fp, #4]
   19294:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19298:	ldr	r1, [fp, #-20]	; 0xffffffec
   1929c:	ldr	r0, [fp, #-16]
   192a0:	bl	19078 <flatcc_builder_table_add@@Base>
   192a4:	str	r0, [fp, #-8]
   192a8:	ldr	r3, [fp, #-8]
   192ac:	cmp	r3, #0
   192b0:	beq	192c4 <flatcc_builder_table_add_copy@@Base+0x50>
   192b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   192b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   192bc:	ldr	r0, [fp, #-8]
   192c0:	bl	11fdc <memcpy@plt>
   192c4:	ldr	r3, [fp, #-8]
   192c8:	mov	r0, r3
   192cc:	sub	sp, fp, #4
   192d0:	pop	{fp, pc}

000192d4 <flatcc_builder_table_add_offset@@Base>:
   192d4:	push	{fp, lr}
   192d8:	add	fp, sp, #4
   192dc:	sub	sp, sp, #8
   192e0:	str	r0, [fp, #-8]
   192e4:	str	r1, [fp, #-12]
   192e8:	ldr	r3, [fp, #-8]
   192ec:	ldr	r3, [r3, #32]
   192f0:	ldrh	r3, [r3, #14]
   192f4:	cmp	r3, #3
   192f8:	beq	1931c <flatcc_builder_table_add_offset@@Base+0x48>
   192fc:	ldr	r3, [pc, #228]	; 193e8 <flatcc_builder_table_add_offset@@Base+0x114>
   19300:	add	r3, pc, r3
   19304:	ldr	r2, [pc, #224]	; 193ec <flatcc_builder_table_add_offset@@Base+0x118>
   19308:	ldr	r1, [pc, #224]	; 193f0 <flatcc_builder_table_add_offset@@Base+0x11c>
   1930c:	add	r1, pc, r1
   19310:	ldr	r0, [pc, #220]	; 193f4 <flatcc_builder_table_add_offset@@Base+0x120>
   19314:	add	r0, pc, r0
   19318:	bl	1209c <__assert_fail@plt>
   1931c:	ldr	r3, [fp, #-12]
   19320:	cmp	r3, #0
   19324:	blt	19338 <flatcc_builder_table_add_offset@@Base+0x64>
   19328:	ldr	r3, [fp, #-12]
   1932c:	ldr	r2, [pc, #196]	; 193f8 <flatcc_builder_table_add_offset@@Base+0x124>
   19330:	cmp	r3, r2
   19334:	ble	19358 <flatcc_builder_table_add_offset@@Base+0x84>
   19338:	ldr	r3, [pc, #188]	; 193fc <flatcc_builder_table_add_offset@@Base+0x128>
   1933c:	add	r3, pc, r3
   19340:	ldr	r2, [pc, #184]	; 19400 <flatcc_builder_table_add_offset@@Base+0x12c>
   19344:	ldr	r1, [pc, #184]	; 19404 <flatcc_builder_table_add_offset@@Base+0x130>
   19348:	add	r1, pc, r1
   1934c:	ldr	r0, [pc, #180]	; 19408 <flatcc_builder_table_add_offset@@Base+0x134>
   19350:	add	r0, pc, r0
   19354:	bl	1209c <__assert_fail@plt>
   19358:	ldr	r3, [fp, #-8]
   1935c:	ldr	r2, [r3, #4]
   19360:	ldr	r3, [fp, #-12]
   19364:	lsl	r3, r3, #1
   19368:	add	r3, r2, r3
   1936c:	ldrh	r3, [r3]
   19370:	cmp	r3, #0
   19374:	beq	19398 <flatcc_builder_table_add_offset@@Base+0xc4>
   19378:	ldr	r3, [pc, #140]	; 1940c <flatcc_builder_table_add_offset@@Base+0x138>
   1937c:	add	r3, pc, r3
   19380:	ldr	r2, [pc, #136]	; 19410 <flatcc_builder_table_add_offset@@Base+0x13c>
   19384:	ldr	r1, [pc, #136]	; 19414 <flatcc_builder_table_add_offset@@Base+0x140>
   19388:	add	r1, pc, r1
   1938c:	ldr	r0, [pc, #132]	; 19418 <flatcc_builder_table_add_offset@@Base+0x144>
   19390:	add	r0, pc, r0
   19394:	bl	1209c <__assert_fail@plt>
   19398:	ldr	r3, [fp, #-8]
   1939c:	ldr	r2, [r3, #12]
   193a0:	ldr	r3, [fp, #-12]
   193a4:	eor	r3, r3, r2
   193a8:	ldr	r2, [pc, #108]	; 1941c <flatcc_builder_table_add_offset@@Base+0x148>
   193ac:	mul	r3, r2, r3
   193b0:	eor	r3, r3, #4
   193b4:	ldr	r2, [pc, #96]	; 1941c <flatcc_builder_table_add_offset@@Base+0x148>
   193b8:	mul	r2, r2, r3
   193bc:	ldr	r3, [fp, #-8]
   193c0:	str	r2, [r3, #12]
   193c4:	ldr	r3, [fp, #-12]
   193c8:	uxth	r3, r3
   193cc:	mov	r1, r3
   193d0:	ldr	r0, [fp, #-8]
   193d4:	bl	14018 <flatcc_builder_default_alloc@@Base+0x550>
   193d8:	mov	r3, r0
   193dc:	mov	r0, r3
   193e0:	sub	sp, fp, #4
   193e4:	pop	{fp, pc}
   193e8:	andeq	r2, r0, r8, lsr #10
   193ec:	andeq	r0, r0, r3, lsl r7
   193f0:	andeq	r1, r0, r0, lsl #24
   193f4:			; <UNDEFINED> instruction: 0x00001eb8
   193f8:	strdeq	r7, [r0], -ip
   193fc:	andeq	r2, r0, ip, ror #9
   19400:	andeq	r0, r0, r4, lsl r7
   19404:	andeq	r1, r0, r4, asr #23
   19408:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   1940c:	andeq	r2, r0, ip, lsr #9
   19410:	andeq	r0, r0, fp, lsl r7
   19414:	andeq	r1, r0, r4, lsl #23
   19418:	ldrdeq	r1, [r0], -ip
   1941c:			; <UNDEFINED> instruction: 0x9e3779b1

00019420 <flatcc_builder_push_buffer_alignment@@Base>:
   19420:	push	{fp}		; (str fp, [sp, #-4]!)
   19424:	add	fp, sp, #0
   19428:	sub	sp, sp, #20
   1942c:	str	r0, [fp, #-16]
   19430:	ldr	r3, [fp, #-16]
   19434:	ldrh	r3, [r3, #128]	; 0x80
   19438:	strh	r3, [fp, #-6]
   1943c:	ldr	r3, [fp, #-16]
   19440:	mov	r2, #4
   19444:	strh	r2, [r3, #128]	; 0x80
   19448:	ldrh	r3, [fp, #-6]
   1944c:	mov	r0, r3
   19450:	add	sp, fp, #0
   19454:	pop	{fp}		; (ldr fp, [sp], #4)
   19458:	bx	lr

0001945c <flatcc_builder_pop_buffer_alignment@@Base>:
   1945c:	push	{fp, lr}
   19460:	add	fp, sp, #4
   19464:	sub	sp, sp, #8
   19468:	str	r0, [fp, #-8]
   1946c:	mov	r3, r1
   19470:	strh	r3, [fp, #-10]
   19474:	ldrh	r3, [fp, #-10]
   19478:	mov	r1, r3
   1947c:	ldr	r0, [fp, #-8]
   19480:	bl	14984 <flatcc_builder_clear@@Base+0xb0>
   19484:	nop			; (mov r0, r0)
   19488:	sub	sp, fp, #4
   1948c:	pop	{fp, pc}

00019490 <flatcc_builder_get_buffer_alignment@@Base>:
   19490:	push	{fp}		; (str fp, [sp, #-4]!)
   19494:	add	fp, sp, #0
   19498:	sub	sp, sp, #12
   1949c:	str	r0, [fp, #-8]
   194a0:	ldr	r3, [fp, #-8]
   194a4:	ldrh	r3, [r3, #128]	; 0x80
   194a8:	mov	r0, r3
   194ac:	add	sp, fp, #0
   194b0:	pop	{fp}		; (ldr fp, [sp], #4)
   194b4:	bx	lr

000194b8 <flatcc_builder_set_vtable_clustering@@Base>:
   194b8:	push	{fp}		; (str fp, [sp, #-4]!)
   194bc:	add	fp, sp, #0
   194c0:	sub	sp, sp, #12
   194c4:	str	r0, [fp, #-8]
   194c8:	str	r1, [fp, #-12]
   194cc:	ldr	r3, [fp, #-12]
   194d0:	cmp	r3, #0
   194d4:	moveq	r3, #1
   194d8:	movne	r3, #0
   194dc:	uxtb	r3, r3
   194e0:	mov	r2, r3
   194e4:	ldr	r3, [fp, #-8]
   194e8:	str	r2, [r3, #180]	; 0xb4
   194ec:	nop			; (mov r0, r0)
   194f0:	add	sp, fp, #0
   194f4:	pop	{fp}		; (ldr fp, [sp], #4)
   194f8:	bx	lr

000194fc <flatcc_builder_set_block_align@@Base>:
   194fc:	push	{fp}		; (str fp, [sp, #-4]!)
   19500:	add	fp, sp, #0
   19504:	sub	sp, sp, #12
   19508:	str	r0, [fp, #-8]
   1950c:	mov	r3, r1
   19510:	strh	r3, [fp, #-10]
   19514:	ldr	r3, [fp, #-8]
   19518:	ldrh	r2, [fp, #-10]
   1951c:	strh	r2, [r3, #132]	; 0x84
   19520:	nop			; (mov r0, r0)
   19524:	add	sp, fp, #0
   19528:	pop	{fp}		; (ldr fp, [sp], #4)
   1952c:	bx	lr

00019530 <flatcc_builder_get_level@@Base>:
   19530:	push	{fp}		; (str fp, [sp, #-4]!)
   19534:	add	fp, sp, #0
   19538:	sub	sp, sp, #12
   1953c:	str	r0, [fp, #-8]
   19540:	ldr	r3, [fp, #-8]
   19544:	ldr	r3, [r3, #156]	; 0x9c
   19548:	mov	r0, r3
   1954c:	add	sp, fp, #0
   19550:	pop	{fp}		; (ldr fp, [sp], #4)
   19554:	bx	lr

00019558 <flatcc_builder_set_max_level@@Base>:
   19558:	push	{fp}		; (str fp, [sp, #-4]!)
   1955c:	add	fp, sp, #0
   19560:	sub	sp, sp, #12
   19564:	str	r0, [fp, #-8]
   19568:	str	r1, [fp, #-12]
   1956c:	ldr	r3, [fp, #-8]
   19570:	ldr	r2, [fp, #-12]
   19574:	str	r2, [r3, #176]	; 0xb0
   19578:	ldr	r3, [fp, #-8]
   1957c:	ldr	r2, [r3, #160]	; 0xa0
   19580:	ldr	r3, [fp, #-8]
   19584:	ldr	r3, [r3, #176]	; 0xb0
   19588:	cmp	r2, r3
   1958c:	bge	195a0 <flatcc_builder_set_max_level@@Base+0x48>
   19590:	ldr	r3, [fp, #-8]
   19594:	ldr	r2, [r3, #176]	; 0xb0
   19598:	ldr	r3, [fp, #-8]
   1959c:	str	r2, [r3, #160]	; 0xa0
   195a0:	nop			; (mov r0, r0)
   195a4:	add	sp, fp, #0
   195a8:	pop	{fp}		; (ldr fp, [sp], #4)
   195ac:	bx	lr

000195b0 <flatcc_builder_get_buffer_size@@Base>:
   195b0:	push	{fp}		; (str fp, [sp, #-4]!)
   195b4:	add	fp, sp, #0
   195b8:	sub	sp, sp, #12
   195bc:	str	r0, [fp, #-8]
   195c0:	ldr	r3, [fp, #-8]
   195c4:	ldr	r2, [r3, #140]	; 0x8c
   195c8:	ldr	r3, [fp, #-8]
   195cc:	ldr	r3, [r3, #136]	; 0x88
   195d0:	sub	r3, r2, r3
   195d4:	mov	r0, r3
   195d8:	add	sp, fp, #0
   195dc:	pop	{fp}		; (ldr fp, [sp], #4)
   195e0:	bx	lr

000195e4 <flatcc_builder_get_buffer_start@@Base>:
   195e4:	push	{fp}		; (str fp, [sp, #-4]!)
   195e8:	add	fp, sp, #0
   195ec:	sub	sp, sp, #12
   195f0:	str	r0, [fp, #-8]
   195f4:	ldr	r3, [fp, #-8]
   195f8:	ldr	r3, [r3, #136]	; 0x88
   195fc:	mov	r0, r3
   19600:	add	sp, fp, #0
   19604:	pop	{fp}		; (ldr fp, [sp], #4)
   19608:	bx	lr

0001960c <flatcc_builder_get_buffer_end@@Base>:
   1960c:	push	{fp}		; (str fp, [sp, #-4]!)
   19610:	add	fp, sp, #0
   19614:	sub	sp, sp, #12
   19618:	str	r0, [fp, #-8]
   1961c:	ldr	r3, [fp, #-8]
   19620:	ldr	r3, [r3, #140]	; 0x8c
   19624:	mov	r0, r3
   19628:	add	sp, fp, #0
   1962c:	pop	{fp}		; (ldr fp, [sp], #4)
   19630:	bx	lr

00019634 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19634:	push	{fp}		; (str fp, [sp, #-4]!)
   19638:	add	fp, sp, #0
   1963c:	sub	sp, sp, #12
   19640:	str	r0, [fp, #-8]
   19644:	str	r1, [fp, #-12]
   19648:	ldr	r3, [fp, #-8]
   1964c:	ldr	r2, [fp, #-12]
   19650:	str	r2, [r3, #172]	; 0xac
   19654:	nop			; (mov r0, r0)
   19658:	add	sp, fp, #0
   1965c:	pop	{fp}		; (ldr fp, [sp], #4)
   19660:	bx	lr

00019664 <flatcc_builder_set_identifier@@Base>:
   19664:	push	{fp}		; (str fp, [sp, #-4]!)
   19668:	add	fp, sp, #0
   1966c:	sub	sp, sp, #12
   19670:	str	r0, [fp, #-8]
   19674:	str	r1, [fp, #-12]
   19678:	ldr	r1, [pc, #60]	; 196bc <flatcc_builder_set_identifier@@Base+0x58>
   1967c:	add	r1, pc, r1
   19680:	ldr	r3, [fp, #-8]
   19684:	add	r2, r3, #168	; 0xa8
   19688:	ldr	r3, [fp, #-12]
   1968c:	cmp	r3, #0
   19690:	beq	1969c <flatcc_builder_set_identifier@@Base+0x38>
   19694:	ldr	r3, [fp, #-12]
   19698:	b	196a4 <flatcc_builder_set_identifier@@Base+0x40>
   1969c:	ldr	r3, [pc, #28]	; 196c0 <flatcc_builder_set_identifier@@Base+0x5c>
   196a0:	ldr	r3, [r1, r3]
   196a4:	ldr	r3, [r3]
   196a8:	str	r3, [r2]
   196ac:	nop			; (mov r0, r0)
   196b0:	add	sp, fp, #0
   196b4:	pop	{fp}		; (ldr fp, [sp], #4)
   196b8:	bx	lr
   196bc:	andeq	r2, r1, ip, ror r9
   196c0:	andeq	r0, r0, r0, rrx

000196c4 <flatcc_builder_get_type@@Base>:
   196c4:	push	{fp}		; (str fp, [sp, #-4]!)
   196c8:	add	fp, sp, #0
   196cc:	sub	sp, sp, #12
   196d0:	str	r0, [fp, #-8]
   196d4:	ldr	r3, [fp, #-8]
   196d8:	ldr	r3, [r3, #32]
   196dc:	cmp	r3, #0
   196e0:	beq	196f4 <flatcc_builder_get_type@@Base+0x30>
   196e4:	ldr	r3, [fp, #-8]
   196e8:	ldr	r3, [r3, #32]
   196ec:	ldrh	r3, [r3, #14]
   196f0:	b	196f8 <flatcc_builder_get_type@@Base+0x34>
   196f4:	mov	r3, #0
   196f8:	mov	r0, r3
   196fc:	add	sp, fp, #0
   19700:	pop	{fp}		; (ldr fp, [sp], #4)
   19704:	bx	lr

00019708 <flatcc_builder_get_type_at@@Base>:
   19708:	push	{fp}		; (str fp, [sp, #-4]!)
   1970c:	add	fp, sp, #0
   19710:	sub	sp, sp, #12
   19714:	str	r0, [fp, #-8]
   19718:	str	r1, [fp, #-12]
   1971c:	ldr	r3, [fp, #-12]
   19720:	cmp	r3, #0
   19724:	ble	1973c <flatcc_builder_get_type_at@@Base+0x34>
   19728:	ldr	r3, [fp, #-8]
   1972c:	ldr	r2, [r3, #156]	; 0x9c
   19730:	ldr	r3, [fp, #-12]
   19734:	cmp	r2, r3
   19738:	bge	19744 <flatcc_builder_get_type_at@@Base+0x3c>
   1973c:	mov	r3, #0
   19740:	b	19778 <flatcc_builder_get_type_at@@Base+0x70>
   19744:	ldr	r3, [fp, #-8]
   19748:	ldr	r2, [r3, #32]
   1974c:	ldr	r3, [fp, #-8]
   19750:	ldr	r3, [r3, #156]	; 0x9c
   19754:	ldr	r1, [fp, #-12]
   19758:	sub	r3, r1, r3
   1975c:	mov	r1, r3
   19760:	mov	r3, r1
   19764:	lsl	r3, r3, #3
   19768:	add	r3, r3, r1
   1976c:	lsl	r3, r3, #2
   19770:	add	r3, r2, r3
   19774:	ldrh	r3, [r3, #14]
   19778:	mov	r0, r3
   1977c:	add	sp, fp, #0
   19780:	pop	{fp}		; (ldr fp, [sp], #4)
   19784:	bx	lr

00019788 <flatcc_builder_get_direct_buffer@@Base>:
   19788:	push	{fp, lr}
   1978c:	add	fp, sp, #4
   19790:	sub	sp, sp, #8
   19794:	str	r0, [fp, #-8]
   19798:	str	r1, [fp, #-12]
   1979c:	ldr	r3, [fp, #-8]
   197a0:	ldr	r3, [r3, #184]	; 0xb8
   197a4:	cmp	r3, #0
   197a8:	beq	197c8 <flatcc_builder_get_direct_buffer@@Base+0x40>
   197ac:	ldr	r3, [fp, #-8]
   197b0:	add	r3, r3, #188	; 0xbc
   197b4:	ldr	r1, [fp, #-12]
   197b8:	mov	r0, r3
   197bc:	bl	139f4 <main@@Base+0x44c>
   197c0:	mov	r3, r0
   197c4:	b	197e4 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   197c8:	ldr	r3, [fp, #-12]
   197cc:	cmp	r3, #0
   197d0:	beq	197e0 <flatcc_builder_get_direct_buffer@@Base+0x58>
   197d4:	ldr	r3, [fp, #-12]
   197d8:	mov	r2, #0
   197dc:	str	r2, [r3]
   197e0:	mov	r3, #0
   197e4:	mov	r0, r3
   197e8:	sub	sp, fp, #4
   197ec:	pop	{fp, pc}

000197f0 <flatcc_builder_copy_buffer@@Base>:
   197f0:	push	{fp, lr}
   197f4:	add	fp, sp, #4
   197f8:	sub	sp, sp, #16
   197fc:	str	r0, [fp, #-8]
   19800:	str	r1, [fp, #-12]
   19804:	str	r2, [fp, #-16]
   19808:	ldr	r3, [fp, #-8]
   1980c:	ldr	r3, [r3, #184]	; 0xb8
   19810:	cmp	r3, #0
   19814:	bne	19820 <flatcc_builder_copy_buffer@@Base+0x30>
   19818:	mov	r3, #0
   1981c:	b	1986c <flatcc_builder_copy_buffer@@Base+0x7c>
   19820:	ldr	r3, [fp, #-8]
   19824:	add	r3, r3, #188	; 0xbc
   19828:	ldr	r2, [fp, #-16]
   1982c:	ldr	r1, [fp, #-12]
   19830:	mov	r0, r3
   19834:	bl	1a5b8 <flatcc_emitter_copy_buffer@@Base>
   19838:	str	r0, [fp, #-12]
   1983c:	ldr	r3, [fp, #-12]
   19840:	cmp	r3, #0
   19844:	bne	19868 <flatcc_builder_copy_buffer@@Base+0x78>
   19848:	ldr	r3, [pc, #40]	; 19878 <flatcc_builder_copy_buffer@@Base+0x88>
   1984c:	add	r3, pc, r3
   19850:	ldr	r2, [pc, #36]	; 1987c <flatcc_builder_copy_buffer@@Base+0x8c>
   19854:	ldr	r1, [pc, #36]	; 19880 <flatcc_builder_copy_buffer@@Base+0x90>
   19858:	add	r1, pc, r1
   1985c:	ldr	r0, [pc, #32]	; 19884 <flatcc_builder_copy_buffer@@Base+0x94>
   19860:	add	r0, pc, r0
   19864:	bl	1209c <__assert_fail@plt>
   19868:	ldr	r3, [fp, #-12]
   1986c:	mov	r0, r3
   19870:	sub	sp, fp, #4
   19874:	pop	{fp, pc}
   19878:	strdeq	r1, [r0], -ip
   1987c:	andeq	r0, r0, r6, lsl #15
   19880:			; <UNDEFINED> instruction: 0x000016b4
   19884:	andeq	r1, r0, ip, asr #21

00019888 <flatcc_builder_finalize_buffer@@Base>:
   19888:	push	{fp, lr}
   1988c:	add	fp, sp, #4
   19890:	sub	sp, sp, #16
   19894:	str	r0, [fp, #-16]
   19898:	str	r1, [fp, #-20]	; 0xffffffec
   1989c:	ldr	r0, [fp, #-16]
   198a0:	bl	195b0 <flatcc_builder_get_buffer_size@@Base>
   198a4:	str	r0, [fp, #-8]
   198a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   198ac:	cmp	r3, #0
   198b0:	beq	198c0 <flatcc_builder_finalize_buffer@@Base+0x38>
   198b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   198b8:	ldr	r2, [fp, #-8]
   198bc:	str	r2, [r3]
   198c0:	ldr	r0, [fp, #-8]
   198c4:	bl	12024 <malloc@plt>
   198c8:	mov	r3, r0
   198cc:	str	r3, [fp, #-12]
   198d0:	ldr	r3, [fp, #-12]
   198d4:	cmp	r3, #0
   198d8:	bne	198fc <flatcc_builder_finalize_buffer@@Base+0x74>
   198dc:	ldr	r3, [pc, #136]	; 1996c <flatcc_builder_finalize_buffer@@Base+0xe4>
   198e0:	add	r3, pc, r3
   198e4:	ldr	r2, [pc, #132]	; 19970 <flatcc_builder_finalize_buffer@@Base+0xe8>
   198e8:	ldr	r1, [pc, #132]	; 19974 <flatcc_builder_finalize_buffer@@Base+0xec>
   198ec:	add	r1, pc, r1
   198f0:	ldr	r0, [pc, #128]	; 19978 <flatcc_builder_finalize_buffer@@Base+0xf0>
   198f4:	add	r0, pc, r0
   198f8:	bl	1209c <__assert_fail@plt>
   198fc:	ldr	r2, [fp, #-8]
   19900:	ldr	r1, [fp, #-12]
   19904:	ldr	r0, [fp, #-16]
   19908:	bl	197f0 <flatcc_builder_copy_buffer@@Base>
   1990c:	mov	r3, r0
   19910:	cmp	r3, #0
   19914:	bne	19938 <flatcc_builder_finalize_buffer@@Base+0xb0>
   19918:	ldr	r3, [pc, #92]	; 1997c <flatcc_builder_finalize_buffer@@Base+0xf4>
   1991c:	add	r3, pc, r3
   19920:	ldr	r2, [pc, #88]	; 19980 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19924:	ldr	r1, [pc, #88]	; 19984 <flatcc_builder_finalize_buffer@@Base+0xfc>
   19928:	add	r1, pc, r1
   1992c:	ldr	r0, [pc, #84]	; 19988 <flatcc_builder_finalize_buffer@@Base+0x100>
   19930:	add	r0, pc, r0
   19934:	bl	1209c <__assert_fail@plt>
   19938:	ldr	r3, [fp, #-12]
   1993c:	cmp	r3, #0
   19940:	bne	1995c <flatcc_builder_finalize_buffer@@Base+0xd4>
   19944:	ldr	r3, [fp, #-20]	; 0xffffffec
   19948:	cmp	r3, #0
   1994c:	beq	1995c <flatcc_builder_finalize_buffer@@Base+0xd4>
   19950:	ldr	r3, [fp, #-20]	; 0xffffffec
   19954:	mov	r2, #0
   19958:	str	r2, [r3]
   1995c:	ldr	r3, [fp, #-12]
   19960:	mov	r0, r3
   19964:	sub	sp, fp, #4
   19968:	pop	{fp, pc}
   1996c:	andeq	r1, r0, r4, lsl #31
   19970:	muleq	r0, r8, r7
   19974:	andeq	r1, r0, r0, lsr #12
   19978:	andeq	r1, r0, r8, ror r6
   1997c:	andeq	r1, r0, r8, asr #30
   19980:	muleq	r0, ip, r7
   19984:	andeq	r1, r0, r4, ror #11
   19988:	andeq	r1, r0, ip, lsr r6

0001998c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1998c:	push	{fp, lr}
   19990:	add	fp, sp, #4
   19994:	sub	sp, sp, #24
   19998:	str	r0, [fp, #-24]	; 0xffffffe8
   1999c:	str	r1, [fp, #-28]	; 0xffffffe4
   199a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   199a4:	bl	195b0 <flatcc_builder_get_buffer_size@@Base>
   199a8:	str	r0, [fp, #-12]
   199ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   199b0:	cmp	r3, #0
   199b4:	beq	199c4 <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   199b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   199bc:	ldr	r2, [fp, #-12]
   199c0:	str	r2, [r3]
   199c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   199c8:	bl	19490 <flatcc_builder_get_buffer_alignment@@Base>
   199cc:	mov	r3, r0
   199d0:	str	r3, [fp, #-16]
   199d4:	ldr	r2, [fp, #-12]
   199d8:	ldr	r3, [fp, #-16]
   199dc:	add	r3, r2, r3
   199e0:	sub	r2, r3, #1
   199e4:	ldr	r3, [fp, #-16]
   199e8:	rsb	r3, r3, #0
   199ec:	and	r3, r3, r2
   199f0:	str	r3, [fp, #-12]
   199f4:	ldr	r1, [fp, #-12]
   199f8:	ldr	r0, [fp, #-16]
   199fc:	bl	13900 <main@@Base+0x358>
   19a00:	str	r0, [fp, #-8]
   19a04:	ldr	r3, [fp, #-8]
   19a08:	cmp	r3, #0
   19a0c:	beq	19a40 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   19a10:	ldr	r2, [fp, #-12]
   19a14:	ldr	r1, [fp, #-8]
   19a18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19a1c:	bl	197f0 <flatcc_builder_copy_buffer@@Base>
   19a20:	mov	r3, r0
   19a24:	cmp	r3, #0
   19a28:	bne	19a44 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19a2c:	ldr	r0, [fp, #-8]
   19a30:	bl	11fd0 <free@plt>
   19a34:	mov	r3, #0
   19a38:	str	r3, [fp, #-8]
   19a3c:	b	19a44 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19a40:	nop			; (mov r0, r0)
   19a44:	ldr	r3, [fp, #-8]
   19a48:	cmp	r3, #0
   19a4c:	bne	19a68 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19a50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a54:	cmp	r3, #0
   19a58:	beq	19a68 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19a5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a60:	mov	r2, #0
   19a64:	str	r2, [r3]
   19a68:	ldr	r3, [fp, #-8]
   19a6c:	mov	r0, r3
   19a70:	sub	sp, fp, #4
   19a74:	pop	{fp, pc}

00019a78 <flatcc_builder_aligned_alloc@@Base>:
   19a78:	push	{fp, lr}
   19a7c:	add	fp, sp, #4
   19a80:	sub	sp, sp, #8
   19a84:	str	r0, [fp, #-8]
   19a88:	str	r1, [fp, #-12]
   19a8c:	ldr	r1, [fp, #-12]
   19a90:	ldr	r0, [fp, #-8]
   19a94:	bl	13900 <main@@Base+0x358>
   19a98:	mov	r3, r0
   19a9c:	mov	r0, r3
   19aa0:	sub	sp, fp, #4
   19aa4:	pop	{fp, pc}

00019aa8 <flatcc_builder_aligned_free@@Base>:
   19aa8:	push	{fp, lr}
   19aac:	add	fp, sp, #4
   19ab0:	sub	sp, sp, #8
   19ab4:	str	r0, [fp, #-8]
   19ab8:	ldr	r0, [fp, #-8]
   19abc:	bl	11fd0 <free@plt>
   19ac0:	nop			; (mov r0, r0)
   19ac4:	sub	sp, fp, #4
   19ac8:	pop	{fp, pc}

00019acc <flatcc_builder_get_emit_context@@Base>:
   19acc:	push	{fp}		; (str fp, [sp, #-4]!)
   19ad0:	add	fp, sp, #0
   19ad4:	sub	sp, sp, #12
   19ad8:	str	r0, [fp, #-8]
   19adc:	ldr	r3, [fp, #-8]
   19ae0:	ldr	r3, [r3, #36]	; 0x24
   19ae4:	mov	r0, r3
   19ae8:	add	sp, fp, #0
   19aec:	pop	{fp}		; (ldr fp, [sp], #4)
   19af0:	bx	lr
   19af4:	push	{fp, lr}
   19af8:	add	fp, sp, #4
   19afc:	sub	sp, sp, #16
   19b00:	str	r0, [fp, #-16]
   19b04:	mov	r3, #0
   19b08:	str	r3, [fp, #-8]
   19b0c:	ldr	r3, [fp, #-16]
   19b10:	ldr	r3, [r3]
   19b14:	cmp	r3, #0
   19b18:	beq	19b70 <flatcc_builder_get_emit_context@@Base+0xa4>
   19b1c:	ldr	r3, [fp, #-16]
   19b20:	ldr	r3, [r3]
   19b24:	ldr	r2, [r3, #2948]	; 0xb84
   19b28:	ldr	r3, [fp, #-16]
   19b2c:	ldr	r3, [r3, #4]
   19b30:	cmp	r2, r3
   19b34:	beq	19b70 <flatcc_builder_get_emit_context@@Base+0xa4>
   19b38:	ldr	r3, [fp, #-16]
   19b3c:	ldr	r3, [r3]
   19b40:	ldr	r3, [r3, #2948]	; 0xb84
   19b44:	ldr	r2, [fp, #-16]
   19b48:	ldr	r2, [r2]
   19b4c:	ldr	r2, [r2, #2952]	; 0xb88
   19b50:	sub	r2, r2, #2944	; 0xb80
   19b54:	str	r2, [r3, #2952]	; 0xb88
   19b58:	ldr	r3, [fp, #-16]
   19b5c:	ldr	r3, [r3]
   19b60:	ldr	r2, [r3, #2948]	; 0xb84
   19b64:	ldr	r3, [fp, #-16]
   19b68:	str	r2, [r3]
   19b6c:	b	19c98 <flatcc_builder_get_emit_context@@Base+0x1cc>
   19b70:	ldr	r0, [pc, #368]	; 19ce8 <flatcc_builder_get_emit_context@@Base+0x21c>
   19b74:	bl	12024 <malloc@plt>
   19b78:	mov	r3, r0
   19b7c:	str	r3, [fp, #-8]
   19b80:	ldr	r3, [fp, #-8]
   19b84:	cmp	r3, #0
   19b88:	bne	19b94 <flatcc_builder_get_emit_context@@Base+0xc8>
   19b8c:	mvn	r3, #0
   19b90:	b	19cdc <flatcc_builder_get_emit_context@@Base+0x210>
   19b94:	ldr	r3, [fp, #-16]
   19b98:	ldr	r3, [r3, #28]
   19b9c:	add	r2, r3, #2944	; 0xb80
   19ba0:	ldr	r3, [fp, #-16]
   19ba4:	str	r2, [r3, #28]
   19ba8:	ldr	r3, [fp, #-16]
   19bac:	ldr	r3, [r3]
   19bb0:	cmp	r3, #0
   19bb4:	beq	19c08 <flatcc_builder_get_emit_context@@Base+0x13c>
   19bb8:	ldr	r3, [fp, #-16]
   19bbc:	ldr	r2, [r3, #4]
   19bc0:	ldr	r3, [fp, #-8]
   19bc4:	str	r2, [r3, #2948]	; 0xb84
   19bc8:	ldr	r3, [fp, #-16]
   19bcc:	ldr	r2, [r3]
   19bd0:	ldr	r3, [fp, #-8]
   19bd4:	str	r2, [r3, #2944]	; 0xb80
   19bd8:	ldr	r3, [fp, #-16]
   19bdc:	ldr	r3, [r3]
   19be0:	ldr	r2, [fp, #-8]
   19be4:	str	r2, [r3, #2948]	; 0xb84
   19be8:	ldr	r3, [fp, #-16]
   19bec:	ldr	r3, [r3, #4]
   19bf0:	ldr	r2, [fp, #-8]
   19bf4:	str	r2, [r3, #2944]	; 0xb80
   19bf8:	ldr	r3, [fp, #-16]
   19bfc:	ldr	r2, [fp, #-8]
   19c00:	str	r2, [r3]
   19c04:	b	19c98 <flatcc_builder_get_emit_context@@Base+0x1cc>
   19c08:	ldr	r3, [fp, #-16]
   19c0c:	ldr	r2, [fp, #-8]
   19c10:	str	r2, [r3]
   19c14:	ldr	r3, [fp, #-16]
   19c18:	ldr	r2, [fp, #-8]
   19c1c:	str	r2, [r3, #4]
   19c20:	ldr	r3, [fp, #-8]
   19c24:	ldr	r2, [fp, #-8]
   19c28:	str	r2, [r3, #2944]	; 0xb80
   19c2c:	ldr	r3, [fp, #-8]
   19c30:	ldr	r2, [fp, #-8]
   19c34:	str	r2, [r3, #2948]	; 0xb84
   19c38:	ldr	r3, [fp, #-16]
   19c3c:	ldr	r3, [r3]
   19c40:	add	r2, r3, #1472	; 0x5c0
   19c44:	ldr	r3, [fp, #-16]
   19c48:	str	r2, [r3, #8]
   19c4c:	ldr	r3, [fp, #-16]
   19c50:	ldr	r2, [r3, #8]
   19c54:	ldr	r3, [fp, #-16]
   19c58:	str	r2, [r3, #16]
   19c5c:	ldr	r3, [fp, #-16]
   19c60:	mov	r2, #1472	; 0x5c0
   19c64:	str	r2, [r3, #12]
   19c68:	ldr	r3, [fp, #-16]
   19c6c:	ldr	r3, [r3, #12]
   19c70:	rsb	r2, r3, #2944	; 0xb80
   19c74:	ldr	r3, [fp, #-16]
   19c78:	str	r2, [r3, #20]
   19c7c:	ldr	r3, [fp, #-16]
   19c80:	ldr	r3, [r3, #12]
   19c84:	rsb	r2, r3, #0
   19c88:	ldr	r3, [fp, #-8]
   19c8c:	str	r2, [r3, #2952]	; 0xb88
   19c90:	mov	r3, #0
   19c94:	b	19cdc <flatcc_builder_get_emit_context@@Base+0x210>
   19c98:	ldr	r3, [fp, #-16]
   19c9c:	ldr	r3, [r3]
   19ca0:	add	r2, r3, #2944	; 0xb80
   19ca4:	ldr	r3, [fp, #-16]
   19ca8:	str	r2, [r3, #8]
   19cac:	ldr	r3, [fp, #-16]
   19cb0:	mov	r2, #2944	; 0xb80
   19cb4:	str	r2, [r3, #12]
   19cb8:	ldr	r3, [fp, #-16]
   19cbc:	ldr	r3, [r3]
   19cc0:	ldr	r2, [fp, #-16]
   19cc4:	ldr	r2, [r2]
   19cc8:	ldr	r2, [r2, #2944]	; 0xb80
   19ccc:	ldr	r2, [r2, #2952]	; 0xb88
   19cd0:	sub	r2, r2, #2944	; 0xb80
   19cd4:	str	r2, [r3, #2952]	; 0xb88
   19cd8:	mov	r3, #0
   19cdc:	mov	r0, r3
   19ce0:	sub	sp, fp, #4
   19ce4:	pop	{fp, pc}
   19ce8:	andeq	r0, r0, ip, lsl #23
   19cec:	push	{fp, lr}
   19cf0:	add	fp, sp, #4
   19cf4:	sub	sp, sp, #16
   19cf8:	str	r0, [fp, #-16]
   19cfc:	mov	r3, #0
   19d00:	str	r3, [fp, #-8]
   19d04:	ldr	r3, [fp, #-16]
   19d08:	ldr	r3, [r3, #4]
   19d0c:	cmp	r3, #0
   19d10:	beq	19d48 <flatcc_builder_get_emit_context@@Base+0x27c>
   19d14:	ldr	r3, [fp, #-16]
   19d18:	ldr	r3, [r3, #4]
   19d1c:	ldr	r2, [r3, #2944]	; 0xb80
   19d20:	ldr	r3, [fp, #-16]
   19d24:	ldr	r3, [r3]
   19d28:	cmp	r2, r3
   19d2c:	beq	19d48 <flatcc_builder_get_emit_context@@Base+0x27c>
   19d30:	ldr	r3, [fp, #-16]
   19d34:	ldr	r3, [r3, #4]
   19d38:	ldr	r2, [r3, #2944]	; 0xb80
   19d3c:	ldr	r3, [fp, #-16]
   19d40:	str	r2, [r3, #4]
   19d44:	b	19e70 <flatcc_builder_get_emit_context@@Base+0x3a4>
   19d48:	ldr	r0, [pc, #368]	; 19ec0 <flatcc_builder_get_emit_context@@Base+0x3f4>
   19d4c:	bl	12024 <malloc@plt>
   19d50:	mov	r3, r0
   19d54:	str	r3, [fp, #-8]
   19d58:	ldr	r3, [fp, #-8]
   19d5c:	cmp	r3, #0
   19d60:	bne	19d6c <flatcc_builder_get_emit_context@@Base+0x2a0>
   19d64:	mvn	r3, #0
   19d68:	b	19eb4 <flatcc_builder_get_emit_context@@Base+0x3e8>
   19d6c:	ldr	r3, [fp, #-16]
   19d70:	ldr	r3, [r3, #28]
   19d74:	add	r2, r3, #2944	; 0xb80
   19d78:	ldr	r3, [fp, #-16]
   19d7c:	str	r2, [r3, #28]
   19d80:	ldr	r3, [fp, #-16]
   19d84:	ldr	r3, [r3, #4]
   19d88:	cmp	r3, #0
   19d8c:	beq	19de0 <flatcc_builder_get_emit_context@@Base+0x314>
   19d90:	ldr	r3, [fp, #-16]
   19d94:	ldr	r2, [r3, #4]
   19d98:	ldr	r3, [fp, #-8]
   19d9c:	str	r2, [r3, #2948]	; 0xb84
   19da0:	ldr	r3, [fp, #-16]
   19da4:	ldr	r2, [r3]
   19da8:	ldr	r3, [fp, #-8]
   19dac:	str	r2, [r3, #2944]	; 0xb80
   19db0:	ldr	r3, [fp, #-16]
   19db4:	ldr	r3, [r3]
   19db8:	ldr	r2, [fp, #-8]
   19dbc:	str	r2, [r3, #2948]	; 0xb84
   19dc0:	ldr	r3, [fp, #-16]
   19dc4:	ldr	r3, [r3, #4]
   19dc8:	ldr	r2, [fp, #-8]
   19dcc:	str	r2, [r3, #2944]	; 0xb80
   19dd0:	ldr	r3, [fp, #-16]
   19dd4:	ldr	r2, [fp, #-8]
   19dd8:	str	r2, [r3, #4]
   19ddc:	b	19e70 <flatcc_builder_get_emit_context@@Base+0x3a4>
   19de0:	ldr	r3, [fp, #-16]
   19de4:	ldr	r2, [fp, #-8]
   19de8:	str	r2, [r3]
   19dec:	ldr	r3, [fp, #-16]
   19df0:	ldr	r2, [fp, #-8]
   19df4:	str	r2, [r3, #4]
   19df8:	ldr	r3, [fp, #-8]
   19dfc:	ldr	r2, [fp, #-8]
   19e00:	str	r2, [r3, #2944]	; 0xb80
   19e04:	ldr	r3, [fp, #-8]
   19e08:	ldr	r2, [fp, #-8]
   19e0c:	str	r2, [r3, #2948]	; 0xb84
   19e10:	ldr	r3, [fp, #-16]
   19e14:	ldr	r3, [r3]
   19e18:	add	r2, r3, #1472	; 0x5c0
   19e1c:	ldr	r3, [fp, #-16]
   19e20:	str	r2, [r3, #8]
   19e24:	ldr	r3, [fp, #-16]
   19e28:	ldr	r2, [r3, #8]
   19e2c:	ldr	r3, [fp, #-16]
   19e30:	str	r2, [r3, #16]
   19e34:	ldr	r3, [fp, #-16]
   19e38:	mov	r2, #1472	; 0x5c0
   19e3c:	str	r2, [r3, #12]
   19e40:	ldr	r3, [fp, #-16]
   19e44:	ldr	r3, [r3, #12]
   19e48:	rsb	r2, r3, #2944	; 0xb80
   19e4c:	ldr	r3, [fp, #-16]
   19e50:	str	r2, [r3, #20]
   19e54:	ldr	r3, [fp, #-16]
   19e58:	ldr	r3, [r3, #12]
   19e5c:	rsb	r2, r3, #0
   19e60:	ldr	r3, [fp, #-8]
   19e64:	str	r2, [r3, #2952]	; 0xb88
   19e68:	mov	r3, #0
   19e6c:	b	19eb4 <flatcc_builder_get_emit_context@@Base+0x3e8>
   19e70:	ldr	r3, [fp, #-16]
   19e74:	ldr	r3, [r3, #4]
   19e78:	mov	r2, r3
   19e7c:	ldr	r3, [fp, #-16]
   19e80:	str	r2, [r3, #16]
   19e84:	ldr	r3, [fp, #-16]
   19e88:	mov	r2, #2944	; 0xb80
   19e8c:	str	r2, [r3, #20]
   19e90:	ldr	r3, [fp, #-16]
   19e94:	ldr	r3, [r3, #4]
   19e98:	ldr	r2, [fp, #-16]
   19e9c:	ldr	r2, [r2, #4]
   19ea0:	ldr	r2, [r2, #2948]	; 0xb84
   19ea4:	ldr	r2, [r2, #2952]	; 0xb88
   19ea8:	add	r2, r2, #2944	; 0xb80
   19eac:	str	r2, [r3, #2952]	; 0xb88
   19eb0:	mov	r3, #0
   19eb4:	mov	r0, r3
   19eb8:	sub	sp, fp, #4
   19ebc:	pop	{fp, pc}
   19ec0:	andeq	r0, r0, ip, lsl #23
   19ec4:	push	{fp, lr}
   19ec8:	add	fp, sp, #4
   19ecc:	sub	sp, sp, #24
   19ed0:	str	r0, [fp, #-16]
   19ed4:	str	r1, [fp, #-20]	; 0xffffffec
   19ed8:	str	r2, [fp, #-24]	; 0xffffffe8
   19edc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ee4:	add	r3, r2, r3
   19ee8:	str	r3, [fp, #-20]	; 0xffffffec
   19eec:	b	19fb0 <flatcc_builder_get_emit_context@@Base+0x4e4>
   19ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ef4:	str	r3, [fp, #-8]
   19ef8:	ldr	r3, [fp, #-16]
   19efc:	ldr	r2, [r3, #12]
   19f00:	ldr	r3, [fp, #-8]
   19f04:	cmp	r2, r3
   19f08:	bcs	19f40 <flatcc_builder_get_emit_context@@Base+0x474>
   19f0c:	ldr	r3, [fp, #-16]
   19f10:	ldr	r3, [r3, #12]
   19f14:	str	r3, [fp, #-8]
   19f18:	ldr	r3, [fp, #-8]
   19f1c:	cmp	r3, #0
   19f20:	bne	19f40 <flatcc_builder_get_emit_context@@Base+0x474>
   19f24:	ldr	r0, [fp, #-16]
   19f28:	bl	19af4 <flatcc_builder_get_emit_context@@Base+0x28>
   19f2c:	mov	r3, r0
   19f30:	cmp	r3, #0
   19f34:	beq	19fb0 <flatcc_builder_get_emit_context@@Base+0x4e4>
   19f38:	mvn	r3, #0
   19f3c:	b	19fc0 <flatcc_builder_get_emit_context@@Base+0x4f4>
   19f40:	ldr	r3, [fp, #-16]
   19f44:	ldr	r2, [r3, #8]
   19f48:	ldr	r3, [fp, #-8]
   19f4c:	rsb	r3, r3, #0
   19f50:	add	r2, r2, r3
   19f54:	ldr	r3, [fp, #-16]
   19f58:	str	r2, [r3, #8]
   19f5c:	ldr	r3, [fp, #-16]
   19f60:	ldr	r2, [r3, #12]
   19f64:	ldr	r3, [fp, #-8]
   19f68:	sub	r2, r2, r3
   19f6c:	ldr	r3, [fp, #-16]
   19f70:	str	r2, [r3, #12]
   19f74:	ldr	r3, [fp, #-8]
   19f78:	rsb	r3, r3, #0
   19f7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f80:	add	r3, r2, r3
   19f84:	str	r3, [fp, #-20]	; 0xffffffec
   19f88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19f8c:	ldr	r3, [fp, #-8]
   19f90:	sub	r3, r2, r3
   19f94:	str	r3, [fp, #-24]	; 0xffffffe8
   19f98:	ldr	r3, [fp, #-16]
   19f9c:	ldr	r3, [r3, #8]
   19fa0:	ldr	r2, [fp, #-8]
   19fa4:	ldr	r1, [fp, #-20]	; 0xffffffec
   19fa8:	mov	r0, r3
   19fac:	bl	11fdc <memcpy@plt>
   19fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fb4:	cmp	r3, #0
   19fb8:	bne	19ef0 <flatcc_builder_get_emit_context@@Base+0x424>
   19fbc:	mov	r3, #0
   19fc0:	mov	r0, r3
   19fc4:	sub	sp, fp, #4
   19fc8:	pop	{fp, pc}
   19fcc:	push	{fp, lr}
   19fd0:	add	fp, sp, #4
   19fd4:	sub	sp, sp, #24
   19fd8:	str	r0, [fp, #-16]
   19fdc:	str	r1, [fp, #-20]	; 0xffffffec
   19fe0:	str	r2, [fp, #-24]	; 0xffffffe8
   19fe4:	b	1a0a0 <flatcc_builder_get_emit_context@@Base+0x5d4>
   19fe8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fec:	str	r3, [fp, #-8]
   19ff0:	ldr	r3, [fp, #-16]
   19ff4:	ldr	r2, [r3, #20]
   19ff8:	ldr	r3, [fp, #-8]
   19ffc:	cmp	r2, r3
   1a000:	bcs	1a038 <flatcc_builder_get_emit_context@@Base+0x56c>
   1a004:	ldr	r3, [fp, #-16]
   1a008:	ldr	r3, [r3, #20]
   1a00c:	str	r3, [fp, #-8]
   1a010:	ldr	r3, [fp, #-8]
   1a014:	cmp	r3, #0
   1a018:	bne	1a038 <flatcc_builder_get_emit_context@@Base+0x56c>
   1a01c:	ldr	r0, [fp, #-16]
   1a020:	bl	19cec <flatcc_builder_get_emit_context@@Base+0x220>
   1a024:	mov	r3, r0
   1a028:	cmp	r3, #0
   1a02c:	beq	1a0a0 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1a030:	mvn	r3, #0
   1a034:	b	1a0b0 <flatcc_builder_get_emit_context@@Base+0x5e4>
   1a038:	ldr	r3, [fp, #-16]
   1a03c:	ldr	r3, [r3, #16]
   1a040:	ldr	r2, [fp, #-8]
   1a044:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a048:	mov	r0, r3
   1a04c:	bl	11fdc <memcpy@plt>
   1a050:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a054:	ldr	r3, [fp, #-8]
   1a058:	sub	r3, r2, r3
   1a05c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a060:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a064:	ldr	r3, [fp, #-8]
   1a068:	add	r3, r2, r3
   1a06c:	str	r3, [fp, #-20]	; 0xffffffec
   1a070:	ldr	r3, [fp, #-16]
   1a074:	ldr	r2, [r3, #16]
   1a078:	ldr	r3, [fp, #-8]
   1a07c:	add	r2, r2, r3
   1a080:	ldr	r3, [fp, #-16]
   1a084:	str	r2, [r3, #16]
   1a088:	ldr	r3, [fp, #-16]
   1a08c:	ldr	r2, [r3, #20]
   1a090:	ldr	r3, [fp, #-8]
   1a094:	sub	r2, r2, r3
   1a098:	ldr	r3, [fp, #-16]
   1a09c:	str	r2, [r3, #20]
   1a0a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a0a4:	cmp	r3, #0
   1a0a8:	bne	19fe8 <flatcc_builder_get_emit_context@@Base+0x51c>
   1a0ac:	mov	r3, #0
   1a0b0:	mov	r0, r3
   1a0b4:	sub	sp, fp, #4
   1a0b8:	pop	{fp, pc}

0001a0bc <flatcc_emitter_recycle_page@@Base>:
   1a0bc:	push	{fp}		; (str fp, [sp, #-4]!)
   1a0c0:	add	fp, sp, #0
   1a0c4:	sub	sp, sp, #12
   1a0c8:	str	r0, [fp, #-8]
   1a0cc:	str	r1, [fp, #-12]
   1a0d0:	ldr	r3, [fp, #-8]
   1a0d4:	ldr	r2, [r3]
   1a0d8:	ldr	r3, [fp, #-12]
   1a0dc:	cmp	r2, r3
   1a0e0:	beq	1a0f8 <flatcc_emitter_recycle_page@@Base+0x3c>
   1a0e4:	ldr	r3, [fp, #-8]
   1a0e8:	ldr	r2, [r3, #4]
   1a0ec:	ldr	r3, [fp, #-12]
   1a0f0:	cmp	r2, r3
   1a0f4:	bne	1a100 <flatcc_emitter_recycle_page@@Base+0x44>
   1a0f8:	mvn	r3, #0
   1a0fc:	b	1a170 <flatcc_emitter_recycle_page@@Base+0xb4>
   1a100:	ldr	r3, [fp, #-12]
   1a104:	ldr	r3, [r3, #2944]	; 0xb80
   1a108:	ldr	r2, [fp, #-12]
   1a10c:	ldr	r2, [r2, #2948]	; 0xb84
   1a110:	str	r2, [r3, #2948]	; 0xb84
   1a114:	ldr	r3, [fp, #-12]
   1a118:	ldr	r3, [r3, #2948]	; 0xb84
   1a11c:	ldr	r2, [fp, #-12]
   1a120:	ldr	r2, [r2, #2944]	; 0xb80
   1a124:	str	r2, [r3, #2944]	; 0xb80
   1a128:	ldr	r3, [fp, #-8]
   1a12c:	ldr	r3, [r3]
   1a130:	ldr	r2, [r3, #2948]	; 0xb84
   1a134:	ldr	r3, [fp, #-12]
   1a138:	str	r2, [r3, #2948]	; 0xb84
   1a13c:	ldr	r3, [fp, #-8]
   1a140:	ldr	r2, [r3]
   1a144:	ldr	r3, [fp, #-12]
   1a148:	str	r2, [r3, #2944]	; 0xb80
   1a14c:	ldr	r3, [fp, #-12]
   1a150:	ldr	r3, [r3, #2948]	; 0xb84
   1a154:	ldr	r2, [fp, #-12]
   1a158:	str	r2, [r3, #2944]	; 0xb80
   1a15c:	ldr	r3, [fp, #-12]
   1a160:	ldr	r3, [r3, #2944]	; 0xb80
   1a164:	ldr	r2, [fp, #-12]
   1a168:	str	r2, [r3, #2948]	; 0xb84
   1a16c:	mov	r3, #0
   1a170:	mov	r0, r3
   1a174:	add	sp, fp, #0
   1a178:	pop	{fp}		; (ldr fp, [sp], #4)
   1a17c:	bx	lr

0001a180 <flatcc_emitter_reset@@Base>:
   1a180:	push	{fp, lr}
   1a184:	add	fp, sp, #4
   1a188:	sub	sp, sp, #16
   1a18c:	str	r0, [fp, #-16]
   1a190:	ldr	r3, [fp, #-16]
   1a194:	ldr	r3, [r3]
   1a198:	str	r3, [fp, #-8]
   1a19c:	ldr	r3, [fp, #-16]
   1a1a0:	ldr	r3, [r3]
   1a1a4:	cmp	r3, #0
   1a1a8:	beq	1a300 <flatcc_emitter_reset@@Base+0x180>
   1a1ac:	ldr	r3, [fp, #-16]
   1a1b0:	ldr	r2, [r3]
   1a1b4:	ldr	r3, [fp, #-16]
   1a1b8:	str	r2, [r3, #4]
   1a1bc:	ldr	r3, [fp, #-16]
   1a1c0:	ldr	r3, [r3]
   1a1c4:	add	r2, r3, #1472	; 0x5c0
   1a1c8:	ldr	r3, [fp, #-16]
   1a1cc:	str	r2, [r3, #8]
   1a1d0:	ldr	r3, [fp, #-16]
   1a1d4:	ldr	r2, [r3, #8]
   1a1d8:	ldr	r3, [fp, #-16]
   1a1dc:	str	r2, [r3, #16]
   1a1e0:	ldr	r3, [fp, #-16]
   1a1e4:	mov	r2, #1472	; 0x5c0
   1a1e8:	str	r2, [r3, #12]
   1a1ec:	ldr	r3, [fp, #-16]
   1a1f0:	mov	r2, #1472	; 0x5c0
   1a1f4:	str	r2, [r3, #20]
   1a1f8:	ldr	r3, [fp, #-16]
   1a1fc:	ldr	r3, [r3]
   1a200:	ldr	r2, [fp, #-16]
   1a204:	ldr	r2, [r2, #12]
   1a208:	rsb	r2, r2, #0
   1a20c:	str	r2, [r3, #2952]	; 0xb88
   1a210:	ldr	r3, [fp, #-16]
   1a214:	ldr	r3, [r3, #32]
   1a218:	cmp	r3, #0
   1a21c:	bne	1a230 <flatcc_emitter_reset@@Base+0xb0>
   1a220:	ldr	r3, [fp, #-16]
   1a224:	ldr	r2, [r3, #24]
   1a228:	ldr	r3, [fp, #-16]
   1a22c:	str	r2, [r3, #32]
   1a230:	ldr	r3, [fp, #-16]
   1a234:	ldr	r2, [r3, #32]
   1a238:	mov	r3, r2
   1a23c:	lsl	r3, r3, #1
   1a240:	add	r3, r3, r2
   1a244:	lsr	r2, r3, #2
   1a248:	ldr	r3, [fp, #-16]
   1a24c:	ldr	r3, [r3, #24]
   1a250:	lsr	r3, r3, #2
   1a254:	add	r2, r2, r3
   1a258:	ldr	r3, [fp, #-16]
   1a25c:	str	r2, [r3, #32]
   1a260:	ldr	r3, [fp, #-16]
   1a264:	mov	r2, #0
   1a268:	str	r2, [r3, #24]
   1a26c:	b	1a2c4 <flatcc_emitter_reset@@Base+0x144>
   1a270:	ldr	r3, [fp, #-16]
   1a274:	ldr	r3, [r3, #4]
   1a278:	ldr	r3, [r3, #2944]	; 0xb80
   1a27c:	str	r3, [fp, #-8]
   1a280:	ldr	r3, [fp, #-16]
   1a284:	ldr	r3, [r3, #4]
   1a288:	ldr	r2, [fp, #-8]
   1a28c:	ldr	r2, [r2, #2944]	; 0xb80
   1a290:	str	r2, [r3, #2944]	; 0xb80
   1a294:	ldr	r3, [fp, #-8]
   1a298:	ldr	r3, [r3, #2944]	; 0xb80
   1a29c:	ldr	r2, [fp, #-16]
   1a2a0:	ldr	r2, [r2, #4]
   1a2a4:	str	r2, [r3, #2948]	; 0xb84
   1a2a8:	ldr	r0, [fp, #-8]
   1a2ac:	bl	11fd0 <free@plt>
   1a2b0:	ldr	r3, [fp, #-16]
   1a2b4:	ldr	r3, [r3, #28]
   1a2b8:	sub	r2, r3, #2944	; 0xb80
   1a2bc:	ldr	r3, [fp, #-16]
   1a2c0:	str	r2, [r3, #28]
   1a2c4:	ldr	r3, [fp, #-16]
   1a2c8:	ldr	r3, [r3, #32]
   1a2cc:	lsl	r2, r3, #1
   1a2d0:	ldr	r3, [fp, #-16]
   1a2d4:	ldr	r3, [r3, #28]
   1a2d8:	cmp	r2, r3
   1a2dc:	bcs	1a304 <flatcc_emitter_reset@@Base+0x184>
   1a2e0:	ldr	r3, [fp, #-16]
   1a2e4:	ldr	r3, [r3, #4]
   1a2e8:	ldr	r2, [r3, #2944]	; 0xb80
   1a2ec:	ldr	r3, [fp, #-16]
   1a2f0:	ldr	r3, [r3]
   1a2f4:	cmp	r2, r3
   1a2f8:	bne	1a270 <flatcc_emitter_reset@@Base+0xf0>
   1a2fc:	b	1a304 <flatcc_emitter_reset@@Base+0x184>
   1a300:	nop			; (mov r0, r0)
   1a304:	sub	sp, fp, #4
   1a308:	pop	{fp, pc}

0001a30c <flatcc_emitter_clear@@Base>:
   1a30c:	push	{fp, lr}
   1a310:	add	fp, sp, #4
   1a314:	sub	sp, sp, #16
   1a318:	str	r0, [fp, #-16]
   1a31c:	ldr	r3, [fp, #-16]
   1a320:	ldr	r3, [r3]
   1a324:	str	r3, [fp, #-8]
   1a328:	ldr	r3, [fp, #-8]
   1a32c:	cmp	r3, #0
   1a330:	beq	1a390 <flatcc_emitter_clear@@Base+0x84>
   1a334:	ldr	r3, [fp, #-8]
   1a338:	ldr	r3, [r3, #2948]	; 0xb84
   1a33c:	mov	r2, #0
   1a340:	str	r2, [r3, #2944]	; 0xb80
   1a344:	b	1a364 <flatcc_emitter_clear@@Base+0x58>
   1a348:	ldr	r3, [fp, #-8]
   1a34c:	ldr	r3, [r3, #2944]	; 0xb80
   1a350:	str	r3, [fp, #-8]
   1a354:	ldr	r3, [fp, #-8]
   1a358:	ldr	r3, [r3, #2948]	; 0xb84
   1a35c:	mov	r0, r3
   1a360:	bl	11fd0 <free@plt>
   1a364:	ldr	r3, [fp, #-8]
   1a368:	ldr	r3, [r3, #2944]	; 0xb80
   1a36c:	cmp	r3, #0
   1a370:	bne	1a348 <flatcc_emitter_clear@@Base+0x3c>
   1a374:	ldr	r0, [fp, #-8]
   1a378:	bl	11fd0 <free@plt>
   1a37c:	mov	r2, #36	; 0x24
   1a380:	mov	r1, #0
   1a384:	ldr	r0, [fp, #-16]
   1a388:	bl	12060 <memset@plt>
   1a38c:	b	1a394 <flatcc_emitter_clear@@Base+0x88>
   1a390:	nop			; (mov r0, r0)
   1a394:	sub	sp, fp, #4
   1a398:	pop	{fp, pc}

0001a39c <flatcc_emitter@@Base>:
   1a39c:	push	{fp, lr}
   1a3a0:	add	fp, sp, #4
   1a3a4:	sub	sp, sp, #24
   1a3a8:	str	r0, [fp, #-16]
   1a3ac:	str	r1, [fp, #-20]	; 0xffffffec
   1a3b0:	str	r2, [fp, #-24]	; 0xffffffe8
   1a3b4:	str	r3, [fp, #-28]	; 0xffffffe4
   1a3b8:	ldr	r3, [fp, #-16]
   1a3bc:	str	r3, [fp, #-12]
   1a3c0:	ldr	r3, [fp, #-12]
   1a3c4:	ldr	r2, [r3, #24]
   1a3c8:	ldr	r3, [fp, #4]
   1a3cc:	add	r2, r2, r3
   1a3d0:	ldr	r3, [fp, #-12]
   1a3d4:	str	r2, [r3, #24]
   1a3d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a3dc:	cmp	r3, #0
   1a3e0:	bge	1a4a8 <flatcc_emitter@@Base+0x10c>
   1a3e4:	ldr	r3, [fp, #-12]
   1a3e8:	ldr	r2, [r3, #12]
   1a3ec:	ldr	r3, [fp, #4]
   1a3f0:	cmp	r2, r3
   1a3f4:	bcc	1a43c <flatcc_emitter@@Base+0xa0>
   1a3f8:	ldr	r3, [fp, #-12]
   1a3fc:	ldr	r2, [r3, #8]
   1a400:	ldr	r3, [fp, #4]
   1a404:	rsb	r3, r3, #0
   1a408:	add	r2, r2, r3
   1a40c:	ldr	r3, [fp, #-12]
   1a410:	str	r2, [r3, #8]
   1a414:	ldr	r3, [fp, #-12]
   1a418:	ldr	r2, [r3, #12]
   1a41c:	ldr	r3, [fp, #4]
   1a420:	sub	r2, r2, r3
   1a424:	ldr	r3, [fp, #-12]
   1a428:	str	r2, [r3, #12]
   1a42c:	ldr	r3, [fp, #-12]
   1a430:	ldr	r3, [r3, #8]
   1a434:	str	r3, [fp, #-8]
   1a438:	b	1a554 <flatcc_emitter@@Base+0x1b8>
   1a43c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a440:	lsl	r3, r3, #3
   1a444:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a448:	add	r3, r2, r3
   1a44c:	str	r3, [fp, #-20]	; 0xffffffec
   1a450:	b	1a490 <flatcc_emitter@@Base+0xf4>
   1a454:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a458:	sub	r3, r3, #8
   1a45c:	str	r3, [fp, #-20]	; 0xffffffec
   1a460:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a464:	ldr	r1, [r3]
   1a468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a46c:	ldr	r3, [r3, #4]
   1a470:	mov	r2, r3
   1a474:	ldr	r0, [fp, #-12]
   1a478:	bl	19ec4 <flatcc_builder_get_emit_context@@Base+0x3f8>
   1a47c:	mov	r3, r0
   1a480:	cmp	r3, #0
   1a484:	beq	1a490 <flatcc_emitter@@Base+0xf4>
   1a488:	mvn	r3, #0
   1a48c:	b	1a5ac <flatcc_emitter@@Base+0x210>
   1a490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a494:	sub	r2, r3, #1
   1a498:	str	r2, [fp, #-24]	; 0xffffffe8
   1a49c:	cmp	r3, #0
   1a4a0:	bne	1a454 <flatcc_emitter@@Base+0xb8>
   1a4a4:	b	1a54c <flatcc_emitter@@Base+0x1b0>
   1a4a8:	ldr	r3, [fp, #-12]
   1a4ac:	ldr	r2, [r3, #20]
   1a4b0:	ldr	r3, [fp, #4]
   1a4b4:	cmp	r2, r3
   1a4b8:	bcc	1a538 <flatcc_emitter@@Base+0x19c>
   1a4bc:	ldr	r3, [fp, #-12]
   1a4c0:	ldr	r3, [r3, #16]
   1a4c4:	str	r3, [fp, #-8]
   1a4c8:	ldr	r3, [fp, #-12]
   1a4cc:	ldr	r2, [r3, #16]
   1a4d0:	ldr	r3, [fp, #4]
   1a4d4:	add	r2, r2, r3
   1a4d8:	ldr	r3, [fp, #-12]
   1a4dc:	str	r2, [r3, #16]
   1a4e0:	ldr	r3, [fp, #-12]
   1a4e4:	ldr	r2, [r3, #20]
   1a4e8:	ldr	r3, [fp, #4]
   1a4ec:	sub	r2, r2, r3
   1a4f0:	ldr	r3, [fp, #-12]
   1a4f4:	str	r2, [r3, #20]
   1a4f8:	b	1a554 <flatcc_emitter@@Base+0x1b8>
   1a4fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a500:	ldr	r1, [r3]
   1a504:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a508:	ldr	r3, [r3, #4]
   1a50c:	mov	r2, r3
   1a510:	ldr	r0, [fp, #-12]
   1a514:	bl	19fcc <flatcc_builder_get_emit_context@@Base+0x500>
   1a518:	mov	r3, r0
   1a51c:	cmp	r3, #0
   1a520:	beq	1a52c <flatcc_emitter@@Base+0x190>
   1a524:	mvn	r3, #0
   1a528:	b	1a5ac <flatcc_emitter@@Base+0x210>
   1a52c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a530:	add	r3, r3, #8
   1a534:	str	r3, [fp, #-20]	; 0xffffffec
   1a538:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a53c:	sub	r2, r3, #1
   1a540:	str	r2, [fp, #-24]	; 0xffffffe8
   1a544:	cmp	r3, #0
   1a548:	bne	1a4fc <flatcc_emitter@@Base+0x160>
   1a54c:	mov	r3, #0
   1a550:	b	1a5ac <flatcc_emitter@@Base+0x210>
   1a554:	b	1a594 <flatcc_emitter@@Base+0x1f8>
   1a558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a55c:	ldr	r1, [r3]
   1a560:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a564:	ldr	r3, [r3, #4]
   1a568:	mov	r2, r3
   1a56c:	ldr	r0, [fp, #-8]
   1a570:	bl	11fdc <memcpy@plt>
   1a574:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a578:	ldr	r3, [r3, #4]
   1a57c:	ldr	r2, [fp, #-8]
   1a580:	add	r3, r2, r3
   1a584:	str	r3, [fp, #-8]
   1a588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a58c:	add	r3, r3, #8
   1a590:	str	r3, [fp, #-20]	; 0xffffffec
   1a594:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a598:	sub	r2, r3, #1
   1a59c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a5a0:	cmp	r3, #0
   1a5a4:	bne	1a558 <flatcc_emitter@@Base+0x1bc>
   1a5a8:	mov	r3, #0
   1a5ac:	mov	r0, r3
   1a5b0:	sub	sp, fp, #4
   1a5b4:	pop	{fp, pc}

0001a5b8 <flatcc_emitter_copy_buffer@@Base>:
   1a5b8:	push	{fp, lr}
   1a5bc:	add	fp, sp, #4
   1a5c0:	sub	sp, sp, #24
   1a5c4:	str	r0, [fp, #-16]
   1a5c8:	str	r1, [fp, #-20]	; 0xffffffec
   1a5cc:	str	r2, [fp, #-24]	; 0xffffffe8
   1a5d0:	ldr	r3, [fp, #-16]
   1a5d4:	ldr	r2, [r3, #24]
   1a5d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a5dc:	cmp	r2, r3
   1a5e0:	bls	1a5ec <flatcc_emitter_copy_buffer@@Base+0x34>
   1a5e4:	mov	r3, #0
   1a5e8:	b	1a6ec <flatcc_emitter_copy_buffer@@Base+0x134>
   1a5ec:	ldr	r3, [fp, #-16]
   1a5f0:	ldr	r3, [r3]
   1a5f4:	cmp	r3, #0
   1a5f8:	bne	1a604 <flatcc_emitter_copy_buffer@@Base+0x4c>
   1a5fc:	mov	r3, #0
   1a600:	b	1a6ec <flatcc_emitter_copy_buffer@@Base+0x134>
   1a604:	ldr	r3, [fp, #-16]
   1a608:	ldr	r2, [r3]
   1a60c:	ldr	r3, [fp, #-16]
   1a610:	ldr	r3, [r3, #4]
   1a614:	cmp	r2, r3
   1a618:	bne	1a640 <flatcc_emitter_copy_buffer@@Base+0x88>
   1a61c:	ldr	r3, [fp, #-16]
   1a620:	ldr	r1, [r3, #8]
   1a624:	ldr	r3, [fp, #-16]
   1a628:	ldr	r3, [r3, #24]
   1a62c:	mov	r2, r3
   1a630:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a634:	bl	11fdc <memcpy@plt>
   1a638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a63c:	b	1a6ec <flatcc_emitter_copy_buffer@@Base+0x134>
   1a640:	ldr	r3, [fp, #-16]
   1a644:	ldr	r3, [r3, #12]
   1a648:	rsb	r3, r3, #2944	; 0xb80
   1a64c:	str	r3, [fp, #-12]
   1a650:	ldr	r3, [fp, #-16]
   1a654:	ldr	r3, [r3, #8]
   1a658:	ldr	r2, [fp, #-12]
   1a65c:	mov	r1, r3
   1a660:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a664:	bl	11fdc <memcpy@plt>
   1a668:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a66c:	ldr	r3, [fp, #-12]
   1a670:	add	r3, r2, r3
   1a674:	str	r3, [fp, #-20]	; 0xffffffec
   1a678:	ldr	r3, [fp, #-16]
   1a67c:	ldr	r3, [r3]
   1a680:	ldr	r3, [r3, #2944]	; 0xb80
   1a684:	str	r3, [fp, #-8]
   1a688:	b	1a6b8 <flatcc_emitter_copy_buffer@@Base+0x100>
   1a68c:	ldr	r3, [fp, #-8]
   1a690:	mov	r2, #2944	; 0xb80
   1a694:	mov	r1, r3
   1a698:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a69c:	bl	11fdc <memcpy@plt>
   1a6a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6a4:	add	r3, r3, #2944	; 0xb80
   1a6a8:	str	r3, [fp, #-20]	; 0xffffffec
   1a6ac:	ldr	r3, [fp, #-8]
   1a6b0:	ldr	r3, [r3, #2944]	; 0xb80
   1a6b4:	str	r3, [fp, #-8]
   1a6b8:	ldr	r3, [fp, #-16]
   1a6bc:	ldr	r2, [r3, #4]
   1a6c0:	ldr	r3, [fp, #-8]
   1a6c4:	cmp	r2, r3
   1a6c8:	bne	1a68c <flatcc_emitter_copy_buffer@@Base+0xd4>
   1a6cc:	ldr	r1, [fp, #-8]
   1a6d0:	ldr	r3, [fp, #-16]
   1a6d4:	ldr	r3, [r3, #20]
   1a6d8:	rsb	r3, r3, #2944	; 0xb80
   1a6dc:	mov	r2, r3
   1a6e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a6e4:	bl	11fdc <memcpy@plt>
   1a6e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6ec:	mov	r0, r3
   1a6f0:	sub	sp, fp, #4
   1a6f4:	pop	{fp, pc}

0001a6f8 <__libc_csu_init@@Base>:
   1a6f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a6fc:	mov	r7, r0
   1a700:	ldr	r6, [pc, #72]	; 1a750 <__libc_csu_init@@Base+0x58>
   1a704:	ldr	r5, [pc, #72]	; 1a754 <__libc_csu_init@@Base+0x5c>
   1a708:	add	r6, pc, r6
   1a70c:	add	r5, pc, r5
   1a710:	sub	r6, r6, r5
   1a714:	mov	r8, r1
   1a718:	mov	r9, r2
   1a71c:	bl	11f8c <strcmp@plt-0x20>
   1a720:	asrs	r6, r6, #2
   1a724:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a728:	mov	r4, #0
   1a72c:	add	r4, r4, #1
   1a730:	ldr	r3, [r5], #4
   1a734:	mov	r2, r9
   1a738:	mov	r1, r8
   1a73c:	mov	r0, r7
   1a740:	blx	r3
   1a744:	cmp	r6, r4
   1a748:	bne	1a72c <__libc_csu_init@@Base+0x34>
   1a74c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a750:	andeq	r1, r1, r0, lsl #16
   1a754:	strdeq	r1, [r1], -r8

0001a758 <__libc_csu_fini@@Base>:
   1a758:	bx	lr

Disassembly of section .fini:

0001a75c <.fini>:
   1a75c:	push	{r3, lr}
   1a760:	pop	{r3, pc}
