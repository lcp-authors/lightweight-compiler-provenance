
../repos/coreutils/src/mknod:     file format elf32-littlearm


Disassembly of section .init:

00011468 <.init>:
   11468:	push	{r3, lr}
   1146c:	bl	11914 <__assert_fail@plt+0x48>
   11470:	pop	{r3, pc}

Disassembly of section .plt:

00011474 <fstatfs64@plt-0x14>:
   11474:	push	{lr}		; (str lr, [sp, #-4]!)
   11478:	ldr	lr, [pc, #4]	; 11484 <fstatfs64@plt-0x4>
   1147c:	add	lr, pc, lr
   11480:	ldr	pc, [lr, #8]!
   11484:	andeq	sl, r1, ip, ror fp

00011488 <fstatfs64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #2940]!	; 0xb7c

00011494 <selabel_lookup@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #2932]!	; 0xb74

000114a0 <calloc@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114ac <fputs_unlocked@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #2916]!	; 0xb64

000114b8 <raise@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114c4 <is_selinux_enabled@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #2900]!	; 0xb54

000114d0 <strcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114dc <context_type_get@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #2884]!	; 0xb44

000114e8 <fflush@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114f4 <lsetfilecon@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #2868]!	; 0xb34

00011500 <memmove@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #106496	; 0x1a000
   11508:	ldr	pc, [ip, #2860]!	; 0xb2c

0001150c <free@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #106496	; 0x1a000
   11514:	ldr	pc, [ip, #2852]!	; 0xb24

00011518 <faccessat@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #106496	; 0x1a000
   11520:	ldr	pc, [ip, #2844]!	; 0xb1c

00011524 <_exit@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #106496	; 0x1a000
   1152c:	ldr	pc, [ip, #2836]!	; 0xb14

00011530 <memcpy@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #106496	; 0x1a000
   11538:	ldr	pc, [ip, #2828]!	; 0xb0c

0001153c <__strtoull_internal@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #106496	; 0x1a000
   11544:	ldr	pc, [ip, #2820]!	; 0xb04

00011548 <mbsinit@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #106496	; 0x1a000
   11550:	ldr	pc, [ip, #2812]!	; 0xafc

00011554 <context_new@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #106496	; 0x1a000
   1155c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011560 <memcmp@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #106496	; 0x1a000
   11568:	ldr	pc, [ip, #2796]!	; 0xaec

0001156c <fputc_unlocked@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #106496	; 0x1a000
   11574:	ldr	pc, [ip, #2788]!	; 0xae4

00011578 <dcgettext@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #106496	; 0x1a000
   11580:	ldr	pc, [ip, #2780]!	; 0xadc

00011584 <context_type_set@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #106496	; 0x1a000
   1158c:	ldr	pc, [ip, #2772]!	; 0xad4

00011590 <realloc@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #106496	; 0x1a000
   11598:	ldr	pc, [ip, #2764]!	; 0xacc

0001159c <fgetfilecon@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #106496	; 0x1a000
   115a4:	ldr	pc, [ip, #2756]!	; 0xac4

000115a8 <textdomain@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #106496	; 0x1a000
   115b0:	ldr	pc, [ip, #2748]!	; 0xabc

000115b4 <rawmemchr@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #106496	; 0x1a000
   115bc:	ldr	pc, [ip, #2740]!	; 0xab4

000115c0 <__fxstatat64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #106496	; 0x1a000
   115c8:	ldr	pc, [ip, #2732]!	; 0xaac

000115cc <iswprint@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #106496	; 0x1a000
   115d4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115d8 <__fxstat64@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #106496	; 0x1a000
   115e0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115e4 <readlink@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #106496	; 0x1a000
   115ec:	ldr	pc, [ip, #2708]!	; 0xa94

000115f0 <fwrite@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #106496	; 0x1a000
   115f8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115fc <lseek64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #106496	; 0x1a000
   11604:	ldr	pc, [ip, #2692]!	; 0xa84

00011608 <__ctype_get_mb_cur_max@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #106496	; 0x1a000
   11610:	ldr	pc, [ip, #2684]!	; 0xa7c

00011614 <getcon@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #106496	; 0x1a000
   1161c:	ldr	pc, [ip, #2676]!	; 0xa74

00011620 <__fpending@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #106496	; 0x1a000
   11628:	ldr	pc, [ip, #2668]!	; 0xa6c

0001162c <mbrtowc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #106496	; 0x1a000
   11634:	ldr	pc, [ip, #2660]!	; 0xa64

00011638 <error@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #106496	; 0x1a000
   11640:	ldr	pc, [ip, #2652]!	; 0xa5c

00011644 <open64@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #106496	; 0x1a000
   1164c:	ldr	pc, [ip, #2644]!	; 0xa54

00011650 <lgetfilecon@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #106496	; 0x1a000
   11658:	ldr	pc, [ip, #2636]!	; 0xa4c

0001165c <malloc@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #106496	; 0x1a000
   11664:	ldr	pc, [ip, #2628]!	; 0xa44

00011668 <__libc_start_main@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #106496	; 0x1a000
   11670:	ldr	pc, [ip, #2620]!	; 0xa3c

00011674 <__freading@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #106496	; 0x1a000
   1167c:	ldr	pc, [ip, #2612]!	; 0xa34

00011680 <__gmon_start__@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #106496	; 0x1a000
   11688:	ldr	pc, [ip, #2604]!	; 0xa2c

0001168c <context_free@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #106496	; 0x1a000
   11694:	ldr	pc, [ip, #2596]!	; 0xa24

00011698 <mempcpy@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #106496	; 0x1a000
   116a0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116a4 <getopt_long@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #106496	; 0x1a000
   116ac:	ldr	pc, [ip, #2580]!	; 0xa14

000116b0 <__ctype_b_loc@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #106496	; 0x1a000
   116b8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116bc <getcwd@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #106496	; 0x1a000
   116c4:	ldr	pc, [ip, #2564]!	; 0xa04

000116c8 <exit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #106496	; 0x1a000
   116d0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116d4 <getfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #106496	; 0x1a000
   116dc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116e0 <strlen@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #106496	; 0x1a000
   116e8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116ec <selabel_open@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #106496	; 0x1a000
   116f4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116f8 <strchr@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #106496	; 0x1a000
   11700:	ldr	pc, [ip, #2524]!	; 0x9dc

00011704 <openat64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #106496	; 0x1a000
   1170c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011710 <setfscreatecon@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #106496	; 0x1a000
   11718:	ldr	pc, [ip, #2508]!	; 0x9cc

0001171c <__errno_location@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #106496	; 0x1a000
   11724:	ldr	pc, [ip, #2500]!	; 0x9c4

00011728 <__sprintf_chk@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #106496	; 0x1a000
   11730:	ldr	pc, [ip, #2492]!	; 0x9bc

00011734 <__cxa_atexit@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #106496	; 0x1a000
   1173c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011740 <memset@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #106496	; 0x1a000
   11748:	ldr	pc, [ip, #2476]!	; 0x9ac

0001174c <__printf_chk@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #106496	; 0x1a000
   11754:	ldr	pc, [ip, #2468]!	; 0x9a4

00011758 <fileno@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #106496	; 0x1a000
   11760:	ldr	pc, [ip, #2460]!	; 0x99c

00011764 <__fprintf_chk@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #106496	; 0x1a000
   1176c:	ldr	pc, [ip, #2452]!	; 0x994

00011770 <fclose@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #106496	; 0x1a000
   11778:	ldr	pc, [ip, #2444]!	; 0x98c

0001177c <fseeko64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #106496	; 0x1a000
   11784:	ldr	pc, [ip, #2436]!	; 0x984

00011788 <fcntl64@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #106496	; 0x1a000
   11790:	ldr	pc, [ip, #2428]!	; 0x97c

00011794 <setlocale@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #106496	; 0x1a000
   1179c:	ldr	pc, [ip, #2420]!	; 0x974

000117a0 <fsetfilecon@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #106496	; 0x1a000
   117a8:	ldr	pc, [ip, #2412]!	; 0x96c

000117ac <strrchr@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #106496	; 0x1a000
   117b4:	ldr	pc, [ip, #2404]!	; 0x964

000117b8 <nl_langinfo@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #106496	; 0x1a000
   117c0:	ldr	pc, [ip, #2396]!	; 0x95c

000117c4 <readdir64@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #106496	; 0x1a000
   117cc:	ldr	pc, [ip, #2388]!	; 0x954

000117d0 <fdopendir@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #106496	; 0x1a000
   117d8:	ldr	pc, [ip, #2380]!	; 0x94c

000117dc <security_compute_create@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #106496	; 0x1a000
   117e4:	ldr	pc, [ip, #2372]!	; 0x944

000117e8 <dirfd@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #106496	; 0x1a000
   117f0:	ldr	pc, [ip, #2364]!	; 0x93c

000117f4 <fchdir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #106496	; 0x1a000
   117fc:	ldr	pc, [ip, #2356]!	; 0x934

00011800 <qsort@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #106496	; 0x1a000
   11808:	ldr	pc, [ip, #2348]!	; 0x92c

0001180c <freecon@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #106496	; 0x1a000
   11814:	ldr	pc, [ip, #2340]!	; 0x924

00011818 <bindtextdomain@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #106496	; 0x1a000
   11820:	ldr	pc, [ip, #2332]!	; 0x91c

00011824 <getfscreatecon@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #106496	; 0x1a000
   1182c:	ldr	pc, [ip, #2324]!	; 0x914

00011830 <umask@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #106496	; 0x1a000
   11838:	ldr	pc, [ip, #2316]!	; 0x90c

0001183c <context_str@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #106496	; 0x1a000
   11844:	ldr	pc, [ip, #2308]!	; 0x904

00011848 <chmod@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #106496	; 0x1a000
   11850:	ldr	pc, [ip, #2300]!	; 0x8fc

00011854 <__xstat64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #106496	; 0x1a000
   1185c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011860 <__xmknod@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #106496	; 0x1a000
   11868:	ldr	pc, [ip, #2284]!	; 0x8ec

0001186c <strncmp@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #106496	; 0x1a000
   11874:	ldr	pc, [ip, #2276]!	; 0x8e4

00011878 <abort@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #106496	; 0x1a000
   11880:	ldr	pc, [ip, #2268]!	; 0x8dc

00011884 <close@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #106496	; 0x1a000
   1188c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011890 <__lxstat64@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #106496	; 0x1a000
   11898:	ldr	pc, [ip, #2252]!	; 0x8cc

0001189c <mkfifo@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #106496	; 0x1a000
   118a4:	ldr	pc, [ip, #2244]!	; 0x8c4

000118a8 <mode_to_security_class@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #106496	; 0x1a000
   118b0:	ldr	pc, [ip, #2236]!	; 0x8bc

000118b4 <closedir@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #106496	; 0x1a000
   118bc:	ldr	pc, [ip, #2228]!	; 0x8b4

000118c0 <strspn@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #106496	; 0x1a000
   118c8:	ldr	pc, [ip, #2220]!	; 0x8ac

000118cc <__assert_fail@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #106496	; 0x1a000
   118d4:	ldr	pc, [ip, #2212]!	; 0x8a4

Disassembly of section .text:

000118d8 <lchmod@@Base-0x5120>:
   118d8:	mov	fp, #0
   118dc:	mov	lr, #0
   118e0:	pop	{r1}		; (ldr r1, [sp], #4)
   118e4:	mov	r2, sp
   118e8:	push	{r2}		; (str r2, [sp, #-4]!)
   118ec:	push	{r0}		; (str r0, [sp, #-4]!)
   118f0:	ldr	ip, [pc, #16]	; 11908 <__assert_fail@plt+0x3c>
   118f4:	push	{ip}		; (str ip, [sp, #-4]!)
   118f8:	ldr	r0, [pc, #12]	; 1190c <__assert_fail@plt+0x40>
   118fc:	ldr	r3, [pc, #12]	; 11910 <__assert_fail@plt+0x44>
   11900:	bl	11668 <__libc_start_main@plt>
   11904:	bl	11878 <abort@plt>
   11908:	andeq	sl, r1, r8, ror #30
   1190c:			; <UNDEFINED> instruction: 0x00011dbc
   11910:	andeq	sl, r1, r8, lsl #30
   11914:	ldr	r3, [pc, #20]	; 11930 <__assert_fail@plt+0x64>
   11918:	ldr	r2, [pc, #20]	; 11934 <__assert_fail@plt+0x68>
   1191c:	add	r3, pc, r3
   11920:	ldr	r2, [r3, r2]
   11924:	cmp	r2, #0
   11928:	bxeq	lr
   1192c:	b	11680 <__gmon_start__@plt>
   11930:	ldrdeq	sl, [r1], -ip
   11934:	andeq	r0, r0, ip, ror r1
   11938:	ldr	r3, [pc, #28]	; 1195c <__assert_fail@plt+0x90>
   1193c:	ldr	r0, [pc, #28]	; 11960 <__assert_fail@plt+0x94>
   11940:	sub	r3, r3, r0
   11944:	cmp	r3, #6
   11948:	bxls	lr
   1194c:	ldr	r3, [pc, #16]	; 11964 <__assert_fail@plt+0x98>
   11950:	cmp	r3, #0
   11954:	bxeq	lr
   11958:	bx	r3
   1195c:	ldrdeq	ip, [r2], -r3
   11960:	ldrdeq	ip, [r2], -r0
   11964:	andeq	r0, r0, r0
   11968:	ldr	r1, [pc, #36]	; 11994 <__assert_fail@plt+0xc8>
   1196c:	ldr	r0, [pc, #36]	; 11998 <__assert_fail@plt+0xcc>
   11970:	sub	r1, r1, r0
   11974:	asr	r1, r1, #2
   11978:	add	r1, r1, r1, lsr #31
   1197c:	asrs	r1, r1, #1
   11980:	bxeq	lr
   11984:	ldr	r3, [pc, #16]	; 1199c <__assert_fail@plt+0xd0>
   11988:	cmp	r3, #0
   1198c:	bxeq	lr
   11990:	bx	r3
   11994:	ldrdeq	ip, [r2], -r0
   11998:	ldrdeq	ip, [r2], -r0
   1199c:	andeq	r0, r0, r0
   119a0:	push	{r4, lr}
   119a4:	ldr	r4, [pc, #24]	; 119c4 <__assert_fail@plt+0xf8>
   119a8:	ldrb	r3, [r4]
   119ac:	cmp	r3, #0
   119b0:	popne	{r4, pc}
   119b4:	bl	11938 <__assert_fail@plt+0x6c>
   119b8:	mov	r3, #1
   119bc:	strb	r3, [r4]
   119c0:	pop	{r4, pc}
   119c4:	andeq	ip, r2, ip, ror #3
   119c8:	ldr	r0, [pc, #40]	; 119f8 <__assert_fail@plt+0x12c>
   119cc:	ldr	r3, [r0]
   119d0:	cmp	r3, #0
   119d4:	bne	119dc <__assert_fail@plt+0x110>
   119d8:	b	11968 <__assert_fail@plt+0x9c>
   119dc:	ldr	r3, [pc, #24]	; 119fc <__assert_fail@plt+0x130>
   119e0:	cmp	r3, #0
   119e4:	beq	119d8 <__assert_fail@plt+0x10c>
   119e8:	push	{r4, lr}
   119ec:	blx	r3
   119f0:	pop	{r4, lr}
   119f4:	b	11968 <__assert_fail@plt+0x9c>
   119f8:	andeq	fp, r2, ip, lsl #30
   119fc:	andeq	r0, r0, r0
   11a00:	push	{lr}		; (str lr, [sp, #-4]!)
   11a04:	sub	sp, sp, #60	; 0x3c
   11a08:	subs	r6, r0, #0
   11a0c:	beq	11a48 <__assert_fail@plt+0x17c>
   11a10:	ldr	r3, [pc, #832]	; 11d58 <__assert_fail@plt+0x48c>
   11a14:	ldr	r4, [r3]
   11a18:	mov	r2, #5
   11a1c:	ldr	r1, [pc, #824]	; 11d5c <__assert_fail@plt+0x490>
   11a20:	mov	r0, #0
   11a24:	bl	11578 <dcgettext@plt>
   11a28:	ldr	r3, [pc, #816]	; 11d60 <__assert_fail@plt+0x494>
   11a2c:	ldr	r3, [r3]
   11a30:	mov	r2, r0
   11a34:	mov	r1, #1
   11a38:	mov	r0, r4
   11a3c:	bl	11764 <__fprintf_chk@plt>
   11a40:	mov	r0, r6
   11a44:	bl	116c8 <exit@plt>
   11a48:	mov	r2, #5
   11a4c:	ldr	r1, [pc, #784]	; 11d64 <__assert_fail@plt+0x498>
   11a50:	mov	r0, #0
   11a54:	bl	11578 <dcgettext@plt>
   11a58:	ldr	r3, [pc, #768]	; 11d60 <__assert_fail@plt+0x494>
   11a5c:	ldr	r2, [r3]
   11a60:	mov	r1, r0
   11a64:	mov	r0, #1
   11a68:	bl	1174c <__printf_chk@plt>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #752]	; 11d68 <__assert_fail@plt+0x49c>
   11a74:	mov	r0, #0
   11a78:	bl	11578 <dcgettext@plt>
   11a7c:	ldr	r4, [pc, #744]	; 11d6c <__assert_fail@plt+0x4a0>
   11a80:	ldr	r1, [r4]
   11a84:	bl	114ac <fputs_unlocked@plt>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #732]	; 11d70 <__assert_fail@plt+0x4a4>
   11a90:	mov	r0, #0
   11a94:	bl	11578 <dcgettext@plt>
   11a98:	ldr	r1, [r4]
   11a9c:	bl	114ac <fputs_unlocked@plt>
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #712]	; 11d74 <__assert_fail@plt+0x4a8>
   11aa8:	mov	r0, #0
   11aac:	bl	11578 <dcgettext@plt>
   11ab0:	ldr	r1, [r4]
   11ab4:	bl	114ac <fputs_unlocked@plt>
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #692]	; 11d78 <__assert_fail@plt+0x4ac>
   11ac0:	mov	r0, #0
   11ac4:	bl	11578 <dcgettext@plt>
   11ac8:	ldr	r1, [r4]
   11acc:	bl	114ac <fputs_unlocked@plt>
   11ad0:	mov	r2, #5
   11ad4:	ldr	r1, [pc, #672]	; 11d7c <__assert_fail@plt+0x4b0>
   11ad8:	mov	r0, #0
   11adc:	bl	11578 <dcgettext@plt>
   11ae0:	ldr	r1, [r4]
   11ae4:	bl	114ac <fputs_unlocked@plt>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #652]	; 11d80 <__assert_fail@plt+0x4b4>
   11af0:	mov	r0, #0
   11af4:	bl	11578 <dcgettext@plt>
   11af8:	ldr	r1, [r4]
   11afc:	bl	114ac <fputs_unlocked@plt>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #632]	; 11d84 <__assert_fail@plt+0x4b8>
   11b08:	mov	r0, #0
   11b0c:	bl	11578 <dcgettext@plt>
   11b10:	ldr	r1, [r4]
   11b14:	bl	114ac <fputs_unlocked@plt>
   11b18:	mov	r2, #5
   11b1c:	ldr	r1, [pc, #612]	; 11d88 <__assert_fail@plt+0x4bc>
   11b20:	mov	r0, #0
   11b24:	bl	11578 <dcgettext@plt>
   11b28:	ldr	r1, [r4]
   11b2c:	bl	114ac <fputs_unlocked@plt>
   11b30:	mov	r2, #5
   11b34:	ldr	r1, [pc, #592]	; 11d8c <__assert_fail@plt+0x4c0>
   11b38:	mov	r0, #0
   11b3c:	bl	11578 <dcgettext@plt>
   11b40:	ldr	r2, [pc, #584]	; 11d90 <__assert_fail@plt+0x4c4>
   11b44:	mov	r1, r0
   11b48:	mov	r0, #1
   11b4c:	bl	1174c <__printf_chk@plt>
   11b50:	mov	ip, sp
   11b54:	ldr	lr, [pc, #568]	; 11d94 <__assert_fail@plt+0x4c8>
   11b58:	ldm	lr!, {r0, r1, r2, r3}
   11b5c:	stmia	ip!, {r0, r1, r2, r3}
   11b60:	ldm	lr!, {r0, r1, r2, r3}
   11b64:	stmia	ip!, {r0, r1, r2, r3}
   11b68:	ldm	lr!, {r0, r1, r2, r3}
   11b6c:	stmia	ip!, {r0, r1, r2, r3}
   11b70:	ldm	lr, {r0, r1}
   11b74:	stm	ip, {r0, r1}
   11b78:	ldr	r1, [sp]
   11b7c:	cmp	r1, #0
   11b80:	moveq	r4, sp
   11b84:	beq	11bac <__assert_fail@plt+0x2e0>
   11b88:	mov	r4, sp
   11b8c:	ldr	r5, [pc, #508]	; 11d90 <__assert_fail@plt+0x4c4>
   11b90:	mov	r0, r5
   11b94:	bl	114d0 <strcmp@plt>
   11b98:	cmp	r0, #0
   11b9c:	beq	11bac <__assert_fail@plt+0x2e0>
   11ba0:	ldr	r1, [r4, #8]!
   11ba4:	cmp	r1, #0
   11ba8:	bne	11b90 <__assert_fail@plt+0x2c4>
   11bac:	ldr	r4, [r4, #4]
   11bb0:	cmp	r4, #0
   11bb4:	beq	11cc8 <__assert_fail@plt+0x3fc>
   11bb8:	mov	r2, #5
   11bbc:	ldr	r1, [pc, #468]	; 11d98 <__assert_fail@plt+0x4cc>
   11bc0:	mov	r0, #0
   11bc4:	bl	11578 <dcgettext@plt>
   11bc8:	ldr	r3, [pc, #460]	; 11d9c <__assert_fail@plt+0x4d0>
   11bcc:	ldr	r2, [pc, #460]	; 11da0 <__assert_fail@plt+0x4d4>
   11bd0:	mov	r1, r0
   11bd4:	mov	r0, #1
   11bd8:	bl	1174c <__printf_chk@plt>
   11bdc:	mov	r1, #0
   11be0:	mov	r0, #5
   11be4:	bl	11794 <setlocale@plt>
   11be8:	cmp	r0, #0
   11bec:	beq	11c04 <__assert_fail@plt+0x338>
   11bf0:	mov	r2, #3
   11bf4:	ldr	r1, [pc, #424]	; 11da4 <__assert_fail@plt+0x4d8>
   11bf8:	bl	1186c <strncmp@plt>
   11bfc:	cmp	r0, #0
   11c00:	bne	11c64 <__assert_fail@plt+0x398>
   11c04:	mov	r2, #5
   11c08:	ldr	r1, [pc, #408]	; 11da8 <__assert_fail@plt+0x4dc>
   11c0c:	mov	r0, #0
   11c10:	bl	11578 <dcgettext@plt>
   11c14:	ldr	r5, [pc, #372]	; 11d90 <__assert_fail@plt+0x4c4>
   11c18:	mov	r3, r5
   11c1c:	ldr	r2, [pc, #376]	; 11d9c <__assert_fail@plt+0x4d0>
   11c20:	mov	r1, r0
   11c24:	mov	r0, #1
   11c28:	bl	1174c <__printf_chk@plt>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #372]	; 11dac <__assert_fail@plt+0x4e0>
   11c34:	mov	r0, #0
   11c38:	bl	11578 <dcgettext@plt>
   11c3c:	mov	r1, r0
   11c40:	ldr	r2, [pc, #360]	; 11db0 <__assert_fail@plt+0x4e4>
   11c44:	ldr	r3, [pc, #360]	; 11db4 <__assert_fail@plt+0x4e8>
   11c48:	cmp	r4, r5
   11c4c:	movne	r3, r2
   11c50:	mov	r2, r4
   11c54:	mov	r0, #1
   11c58:	bl	1174c <__printf_chk@plt>
   11c5c:	b	11a40 <__assert_fail@plt+0x174>
   11c60:	ldr	r4, [pc, #296]	; 11d90 <__assert_fail@plt+0x4c4>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #328]	; 11db8 <__assert_fail@plt+0x4ec>
   11c6c:	mov	r0, #0
   11c70:	bl	11578 <dcgettext@plt>
   11c74:	ldr	r3, [pc, #240]	; 11d6c <__assert_fail@plt+0x4a0>
   11c78:	ldr	r1, [r3]
   11c7c:	bl	114ac <fputs_unlocked@plt>
   11c80:	b	11c04 <__assert_fail@plt+0x338>
   11c84:	mov	r2, #5
   11c88:	ldr	r1, [pc, #280]	; 11da8 <__assert_fail@plt+0x4dc>
   11c8c:	mov	r0, #0
   11c90:	bl	11578 <dcgettext@plt>
   11c94:	ldr	r4, [pc, #244]	; 11d90 <__assert_fail@plt+0x4c4>
   11c98:	mov	r3, r4
   11c9c:	ldr	r2, [pc, #248]	; 11d9c <__assert_fail@plt+0x4d0>
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	bl	1174c <__printf_chk@plt>
   11cac:	mov	r2, #5
   11cb0:	ldr	r1, [pc, #244]	; 11dac <__assert_fail@plt+0x4e0>
   11cb4:	mov	r0, #0
   11cb8:	bl	11578 <dcgettext@plt>
   11cbc:	mov	r1, r0
   11cc0:	ldr	r3, [pc, #236]	; 11db4 <__assert_fail@plt+0x4e8>
   11cc4:	b	11c50 <__assert_fail@plt+0x384>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #196]	; 11d98 <__assert_fail@plt+0x4cc>
   11cd0:	mov	r0, #0
   11cd4:	bl	11578 <dcgettext@plt>
   11cd8:	ldr	r3, [pc, #188]	; 11d9c <__assert_fail@plt+0x4d0>
   11cdc:	ldr	r2, [pc, #188]	; 11da0 <__assert_fail@plt+0x4d4>
   11ce0:	mov	r1, r0
   11ce4:	mov	r0, #1
   11ce8:	bl	1174c <__printf_chk@plt>
   11cec:	mov	r1, #0
   11cf0:	mov	r0, #5
   11cf4:	bl	11794 <setlocale@plt>
   11cf8:	cmp	r0, #0
   11cfc:	beq	11c84 <__assert_fail@plt+0x3b8>
   11d00:	mov	r2, #3
   11d04:	ldr	r1, [pc, #152]	; 11da4 <__assert_fail@plt+0x4d8>
   11d08:	bl	1186c <strncmp@plt>
   11d0c:	cmp	r0, #0
   11d10:	bne	11c60 <__assert_fail@plt+0x394>
   11d14:	mov	r2, #5
   11d18:	ldr	r1, [pc, #136]	; 11da8 <__assert_fail@plt+0x4dc>
   11d1c:	mov	r0, #0
   11d20:	bl	11578 <dcgettext@plt>
   11d24:	ldr	r4, [pc, #100]	; 11d90 <__assert_fail@plt+0x4c4>
   11d28:	mov	r3, r4
   11d2c:	ldr	r2, [pc, #104]	; 11d9c <__assert_fail@plt+0x4d0>
   11d30:	mov	r1, r0
   11d34:	mov	r0, #1
   11d38:	bl	1174c <__printf_chk@plt>
   11d3c:	mov	r2, #5
   11d40:	ldr	r1, [pc, #100]	; 11dac <__assert_fail@plt+0x4e0>
   11d44:	mov	r0, #0
   11d48:	bl	11578 <dcgettext@plt>
   11d4c:	mov	r1, r0
   11d50:	ldr	r3, [pc, #92]	; 11db4 <__assert_fail@plt+0x4e8>
   11d54:	b	11c50 <__assert_fail@plt+0x384>
   11d58:	andeq	ip, r2, r0, ror #3
   11d5c:	andeq	fp, r1, r0, lsr #32
   11d60:	strdeq	ip, [r2], -r8
   11d64:	andeq	fp, r1, r8, asr #32
   11d68:	andeq	fp, r1, r8, ror r0
   11d6c:	andeq	ip, r2, r4, ror #3
   11d70:	andeq	fp, r1, ip, lsr #1
   11d74:	strdeq	fp, [r1], -r8
   11d78:	andeq	fp, r1, r4, asr #2
   11d7c:	andeq	fp, r1, r4, lsl r2
   11d80:	andeq	fp, r1, r4, asr #4
   11d84:	andeq	fp, r1, ip, ror r2
   11d88:	andeq	fp, r1, r4, lsl #7
   11d8c:	andeq	fp, r1, r4, lsl #8
   11d90:	andeq	fp, r1, r8, lsl r0
   11d94:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11d98:	andeq	fp, r1, r4, asr #9
   11d9c:	ldrdeq	fp, [r1], -ip
   11da0:	andeq	fp, r1, r4, lsl #10
   11da4:	andeq	fp, r1, r4, lsl r5
   11da8:	andeq	fp, r1, r0, ror #10
   11dac:	andeq	fp, r1, ip, ror r5
   11db0:	strdeq	fp, [r1], -ip
   11db4:	strdeq	fp, [r1], -r8
   11db8:	andeq	fp, r1, r8, lsl r5
   11dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc0:	sub	sp, sp, #52	; 0x34
   11dc4:	str	r0, [sp, #8]
   11dc8:	mov	r4, r1
   11dcc:	ldr	r0, [r1]
   11dd0:	bl	170dc <lchmod@@Base+0x6e4>
   11dd4:	ldr	r1, [pc, #2012]	; 125b8 <__assert_fail@plt+0xcec>
   11dd8:	mov	r0, #6
   11ddc:	bl	11794 <setlocale@plt>
   11de0:	ldr	r5, [pc, #2004]	; 125bc <__assert_fail@plt+0xcf0>
   11de4:	ldr	r1, [pc, #2004]	; 125c0 <__assert_fail@plt+0xcf4>
   11de8:	mov	r0, r5
   11dec:	bl	11818 <bindtextdomain@plt>
   11df0:	mov	r0, r5
   11df4:	bl	115a8 <textdomain@plt>
   11df8:	ldr	r0, [pc, #1988]	; 125c4 <__assert_fail@plt+0xcf8>
   11dfc:	bl	1af6c <lchmod@@Base+0x4574>
   11e00:	mov	r5, #0
   11e04:	str	r5, [sp, #16]
   11e08:	str	r5, [sp, #12]
   11e0c:	ldr	r9, [pc, #1972]	; 125c8 <__assert_fail@plt+0xcfc>
   11e10:	ldr	r8, [pc, #1972]	; 125cc <__assert_fail@plt+0xd00>
   11e14:	mov	r6, r5
   11e18:	ldr	sl, [pc, #1968]	; 125d0 <__assert_fail@plt+0xd04>
   11e1c:	ldr	fp, [pc, #1968]	; 125d4 <__assert_fail@plt+0xd08>
   11e20:	ldr	r7, [pc, #1968]	; 125d8 <__assert_fail@plt+0xd0c>
   11e24:	str	r6, [sp]
   11e28:	mov	r3, r9
   11e2c:	mov	r2, r8
   11e30:	mov	r1, r4
   11e34:	ldr	r0, [sp, #8]
   11e38:	bl	116a4 <getopt_long@plt>
   11e3c:	cmn	r0, #1
   11e40:	beq	11f4c <__assert_fail@plt+0x680>
   11e44:	cmn	r0, #2
   11e48:	beq	11f3c <__assert_fail@plt+0x670>
   11e4c:	ble	11e6c <__assert_fail@plt+0x5a0>
   11e50:	cmp	r0, #90	; 0x5a
   11e54:	beq	11ea8 <__assert_fail@plt+0x5dc>
   11e58:	cmp	r0, #109	; 0x6d
   11e5c:	bne	11f44 <__assert_fail@plt+0x678>
   11e60:	ldr	r3, [sl]
   11e64:	str	r3, [sp, #12]
   11e68:	b	11e24 <__assert_fail@plt+0x558>
   11e6c:	cmn	r0, #3
   11e70:	bne	11f44 <__assert_fail@plt+0x678>
   11e74:	mov	r4, #0
   11e78:	str	r4, [sp, #4]
   11e7c:	ldr	r3, [pc, #1880]	; 125dc <__assert_fail@plt+0xd10>
   11e80:	str	r3, [sp]
   11e84:	ldr	r3, [pc, #1876]	; 125e0 <__assert_fail@plt+0xd14>
   11e88:	ldr	r3, [r3]
   11e8c:	ldr	r2, [pc, #1872]	; 125e4 <__assert_fail@plt+0xd18>
   11e90:	ldr	r1, [pc, #1872]	; 125e8 <__assert_fail@plt+0xd1c>
   11e94:	ldr	r0, [pc, #1872]	; 125ec <__assert_fail@plt+0xd20>
   11e98:	ldr	r0, [r0]
   11e9c:	bl	19348 <lchmod@@Base+0x2950>
   11ea0:	mov	r0, r4
   11ea4:	bl	116c8 <exit@plt>
   11ea8:	bl	114c4 <is_selinux_enabled@plt>
   11eac:	cmp	r0, #0
   11eb0:	ble	11f0c <__assert_fail@plt+0x640>
   11eb4:	ldr	r3, [sl]
   11eb8:	cmp	r3, #0
   11ebc:	strne	r3, [sp, #16]
   11ec0:	bne	11e24 <__assert_fail@plt+0x558>
   11ec4:	mov	r2, r6
   11ec8:	mov	r1, r6
   11ecc:	mov	r0, r6
   11ed0:	bl	116ec <selabel_open@plt>
   11ed4:	subs	r5, r0, #0
   11ed8:	bne	11e24 <__assert_fail@plt+0x558>
   11edc:	bl	1171c <__errno_location@plt>
   11ee0:	ldr	r3, [r0]
   11ee4:	str	r3, [sp, #20]
   11ee8:	mov	r2, #5
   11eec:	mov	r1, r7
   11ef0:	mov	r0, r6
   11ef4:	bl	11578 <dcgettext@plt>
   11ef8:	mov	r2, r0
   11efc:	ldr	r1, [sp, #20]
   11f00:	mov	r0, r6
   11f04:	bl	11638 <error@plt>
   11f08:	b	11e24 <__assert_fail@plt+0x558>
   11f0c:	ldr	r3, [sl]
   11f10:	cmp	r3, #0
   11f14:	beq	11e24 <__assert_fail@plt+0x558>
   11f18:	mov	r2, #5
   11f1c:	mov	r1, fp
   11f20:	mov	r0, r6
   11f24:	bl	11578 <dcgettext@plt>
   11f28:	mov	r2, r0
   11f2c:	mov	r1, r6
   11f30:	mov	r0, r6
   11f34:	bl	11638 <error@plt>
   11f38:	b	11e24 <__assert_fail@plt+0x558>
   11f3c:	mov	r0, #0
   11f40:	bl	11a00 <__assert_fail@plt+0x134>
   11f44:	mov	r0, #1
   11f48:	bl	11a00 <__assert_fail@plt+0x134>
   11f4c:	ldr	r3, [sp, #12]
   11f50:	cmp	r3, #0
   11f54:	beq	120c8 <__assert_fail@plt+0x7fc>
   11f58:	mov	r0, r3
   11f5c:	bl	16b04 <lchmod@@Base+0x10c>
   11f60:	subs	r6, r0, #0
   11f64:	beq	1208c <__assert_fail@plt+0x7c0>
   11f68:	mov	r0, #0
   11f6c:	bl	11830 <umask@plt>
   11f70:	mov	r8, r0
   11f74:	bl	11830 <umask@plt>
   11f78:	mov	r1, #0
   11f7c:	str	r1, [sp]
   11f80:	mov	r3, r6
   11f84:	mov	r2, r8
   11f88:	ldr	r0, [pc, #1632]	; 125f0 <__assert_fail@plt+0xd24>
   11f8c:	bl	16f14 <lchmod@@Base+0x51c>
   11f90:	mov	r8, r0
   11f94:	mov	r0, r6
   11f98:	bl	136c8 <__assert_fail@plt+0x1dfc>
   11f9c:	bic	r3, r8, #508	; 0x1fc
   11fa0:	bic	r3, r3, #3
   11fa4:	cmp	r3, #0
   11fa8:	bne	120a8 <__assert_fail@plt+0x7dc>
   11fac:	ldr	r3, [pc, #1600]	; 125f4 <__assert_fail@plt+0xd28>
   11fb0:	ldr	r3, [r3]
   11fb4:	ldr	r1, [sp, #8]
   11fb8:	cmp	r1, r3
   11fbc:	ble	12500 <__assert_fail@plt+0xc34>
   11fc0:	add	r2, r3, #1
   11fc4:	cmp	r1, r2
   11fc8:	movle	r6, #4
   11fcc:	ble	11fe4 <__assert_fail@plt+0x718>
   11fd0:	ldr	r2, [r4, r2, lsl #2]
   11fd4:	ldrb	r6, [r2]
   11fd8:	cmp	r6, #112	; 0x70
   11fdc:	movne	r6, #4
   11fe0:	moveq	r6, #2
   11fe4:	ldr	r2, [sp, #8]
   11fe8:	sub	r3, r2, r3
   11fec:	cmp	r6, r3
   11ff0:	bhi	120f8 <__assert_fail@plt+0x82c>
   11ff4:	cmp	r6, r3
   11ff8:	bcs	12518 <__assert_fail@plt+0xc4c>
   11ffc:	mov	r2, #5
   12000:	ldr	r1, [pc, #1520]	; 125f8 <__assert_fail@plt+0xd2c>
   12004:	mov	r0, #0
   12008:	bl	11578 <dcgettext@plt>
   1200c:	mov	r5, r0
   12010:	ldr	r3, [pc, #1500]	; 125f4 <__assert_fail@plt+0xd28>
   12014:	ldr	r3, [r3]
   12018:	add	r3, r6, r3
   1201c:	ldr	r0, [r4, r3, lsl #2]
   12020:	bl	18c2c <lchmod@@Base+0x2234>
   12024:	mov	r3, r0
   12028:	mov	r2, r5
   1202c:	mov	r1, #0
   12030:	mov	r0, r1
   12034:	bl	11638 <error@plt>
   12038:	cmp	r6, #2
   1203c:	bne	12084 <__assert_fail@plt+0x7b8>
   12040:	ldr	r3, [pc, #1452]	; 125f4 <__assert_fail@plt+0xd28>
   12044:	ldr	r3, [r3]
   12048:	ldr	r2, [sp, #8]
   1204c:	sub	r7, r2, r3
   12050:	cmp	r7, #4
   12054:	bne	12084 <__assert_fail@plt+0x7b8>
   12058:	ldr	r3, [pc, #1436]	; 125fc <__assert_fail@plt+0xd30>
   1205c:	ldr	r4, [r3]
   12060:	mov	r2, #5
   12064:	ldr	r1, [pc, #1428]	; 12600 <__assert_fail@plt+0xd34>
   12068:	mov	r0, #0
   1206c:	bl	11578 <dcgettext@plt>
   12070:	mov	r3, r0
   12074:	ldr	r2, [pc, #1416]	; 12604 <__assert_fail@plt+0xd38>
   12078:	mov	r1, #1
   1207c:	mov	r0, r4
   12080:	bl	11764 <__fprintf_chk@plt>
   12084:	mov	r0, #1
   12088:	bl	11a00 <__assert_fail@plt+0x134>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #1392]	; 12608 <__assert_fail@plt+0xd3c>
   12094:	bl	11578 <dcgettext@plt>
   12098:	mov	r2, r0
   1209c:	mov	r1, #0
   120a0:	mov	r0, #1
   120a4:	bl	11638 <error@plt>
   120a8:	mov	r2, #5
   120ac:	ldr	r1, [pc, #1368]	; 1260c <__assert_fail@plt+0xd40>
   120b0:	mov	r0, #0
   120b4:	bl	11578 <dcgettext@plt>
   120b8:	mov	r2, r0
   120bc:	mov	r1, #0
   120c0:	mov	r0, #1
   120c4:	bl	11638 <error@plt>
   120c8:	ldr	r8, [pc, #1312]	; 125f0 <__assert_fail@plt+0xd24>
   120cc:	b	11fac <__assert_fail@plt+0x6e0>
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #1332]	; 12610 <__assert_fail@plt+0xd44>
   120d8:	mov	r0, #0
   120dc:	bl	11578 <dcgettext@plt>
   120e0:	mov	r2, r0
   120e4:	mov	r1, #0
   120e8:	mov	r0, r1
   120ec:	bl	11638 <error@plt>
   120f0:	mov	r0, #1
   120f4:	bl	11a00 <__assert_fail@plt+0x134>
   120f8:	mov	r2, #5
   120fc:	ldr	r1, [pc, #1296]	; 12614 <__assert_fail@plt+0xd48>
   12100:	mov	r0, #0
   12104:	bl	11578 <dcgettext@plt>
   12108:	mov	r5, r0
   1210c:	ldr	r3, [sp, #8]
   12110:	sub	r3, r3, #-1073741823	; 0xc0000001
   12114:	ldr	r0, [r4, r3, lsl #2]
   12118:	bl	18c2c <lchmod@@Base+0x2234>
   1211c:	mov	r3, r0
   12120:	mov	r2, r5
   12124:	mov	r1, #0
   12128:	mov	r0, r1
   1212c:	bl	11638 <error@plt>
   12130:	cmp	r6, #4
   12134:	bne	120f0 <__assert_fail@plt+0x824>
   12138:	ldr	r3, [pc, #1204]	; 125f4 <__assert_fail@plt+0xd28>
   1213c:	ldr	r3, [r3]
   12140:	ldr	r2, [sp, #8]
   12144:	sub	r7, r2, r3
   12148:	cmp	r7, #2
   1214c:	bne	120f0 <__assert_fail@plt+0x824>
   12150:	ldr	r3, [pc, #1188]	; 125fc <__assert_fail@plt+0xd30>
   12154:	ldr	r4, [r3]
   12158:	mov	r2, #5
   1215c:	ldr	r1, [pc, #1204]	; 12618 <__assert_fail@plt+0xd4c>
   12160:	mov	r0, #0
   12164:	bl	11578 <dcgettext@plt>
   12168:	mov	r3, r0
   1216c:	ldr	r2, [pc, #1168]	; 12604 <__assert_fail@plt+0xd38>
   12170:	mov	r1, #1
   12174:	mov	r0, r4
   12178:	bl	11764 <__fprintf_chk@plt>
   1217c:	b	120f0 <__assert_fail@plt+0x824>
   12180:	bl	1171c <__errno_location@plt>
   12184:	ldr	r4, [r0]
   12188:	mov	r2, #5
   1218c:	ldr	r1, [pc, #1160]	; 1261c <__assert_fail@plt+0xd50>
   12190:	mov	r0, #0
   12194:	bl	11578 <dcgettext@plt>
   12198:	mov	r5, r0
   1219c:	ldr	r0, [sp, #16]
   121a0:	bl	18c2c <lchmod@@Base+0x2234>
   121a4:	mov	r3, r0
   121a8:	mov	r2, r5
   121ac:	mov	r1, r4
   121b0:	mov	r0, #1
   121b4:	bl	11638 <error@plt>
   121b8:	cmp	r3, #98	; 0x62
   121bc:	moveq	r9, #24576	; 0x6000
   121c0:	bne	12478 <__assert_fail@plt+0xbac>
   121c4:	add	r2, r4, r2
   121c8:	ldr	r3, [r2, #4]
   121cc:	mov	r0, r3
   121d0:	str	r3, [sp, #16]
   121d4:	ldr	r3, [r2, #8]
   121d8:	str	r3, [sp, #8]
   121dc:	ldr	r3, [pc, #980]	; 125b8 <__assert_fail@plt+0xcec>
   121e0:	str	r3, [sp]
   121e4:	add	r3, sp, #24
   121e8:	mov	r2, #0
   121ec:	mov	r1, r2
   121f0:	bl	19b60 <lchmod@@Base+0x3168>
   121f4:	cmp	r0, #0
   121f8:	bne	1234c <__assert_fail@plt+0xa80>
   121fc:	ldrd	r2, [sp, #24]
   12200:	mov	r1, #0
   12204:	cmp	r1, r3
   12208:	cmpeq	r2, r2
   1220c:	bne	1234c <__assert_fail@plt+0xa80>
   12210:	ldr	r3, [pc, #928]	; 125b8 <__assert_fail@plt+0xcec>
   12214:	str	r3, [sp]
   12218:	add	r3, sp, #32
   1221c:	mov	r2, #0
   12220:	mov	r1, r2
   12224:	ldr	r0, [sp, #8]
   12228:	bl	19b60 <lchmod@@Base+0x3168>
   1222c:	cmp	r0, #0
   12230:	bne	1237c <__assert_fail@plt+0xab0>
   12234:	ldrd	sl, [sp, #32]
   12238:	mov	r3, #0
   1223c:	cmp	r3, fp
   12240:	cmpeq	sl, sl
   12244:	bne	1237c <__assert_fail@plt+0xab0>
   12248:	ldr	ip, [sp, #24]
   1224c:	ldr	r1, [sp, #28]
   12250:	lsl	r3, r1, #8
   12254:	orr	r3, r3, ip, lsr #24
   12258:	lsl	r2, ip, #8
   1225c:	ldr	r0, [pc, #956]	; 12620 <__assert_fail@plt+0xd54>
   12260:	mov	r1, #0
   12264:	and	r2, r2, r0
   12268:	and	r3, r3, r1
   1226c:	mov	r0, #0
   12270:	mov	r6, #0
   12274:	ldr	r7, [pc, #936]	; 12624 <__assert_fail@plt+0xd58>
   12278:	and	r6, r6, r0
   1227c:	and	r7, r7, ip
   12280:	orr	r6, r6, r2
   12284:	orr	r7, r7, r3
   12288:	uxtb	r2, sl
   1228c:	mov	r3, #0
   12290:	orr	r6, r6, r2
   12294:	orr	r7, r7, r3
   12298:	lsl	r3, fp, #12
   1229c:	orr	r3, r3, sl, lsr #20
   122a0:	lsl	r2, sl, #12
   122a4:	add	r1, pc, #772	; 0x304
   122a8:	ldrd	r0, [r1]
   122ac:	and	r2, r2, r0
   122b0:	and	r3, r3, r1
   122b4:	orr	r6, r6, r2
   122b8:	orr	r7, r7, r3
   122bc:	mvn	r2, #0
   122c0:	mvn	r3, #0
   122c4:	cmp	r7, r3
   122c8:	cmpeq	r6, r2
   122cc:	beq	123ac <__assert_fail@plt+0xae0>
   122d0:	cmp	r5, #0
   122d4:	beq	122f0 <__assert_fail@plt+0xa24>
   122d8:	ldr	r3, [pc, #788]	; 125f4 <__assert_fail@plt+0xd28>
   122dc:	ldr	r3, [r3]
   122e0:	mov	r2, r9
   122e4:	ldr	r1, [r4, r3, lsl #2]
   122e8:	mov	r0, r5
   122ec:	bl	1292c <__assert_fail@plt+0x1060>
   122f0:	ldr	r3, [pc, #764]	; 125f4 <__assert_fail@plt+0xd28>
   122f4:	ldr	r3, [r3]
   122f8:	ldr	r1, [r4, r3, lsl #2]
   122fc:	add	r3, sp, #48	; 0x30
   12300:	strd	r6, [r3, #-8]!
   12304:	orr	r2, r8, r9
   12308:	mov	r0, #1
   1230c:	bl	11860 <__xmknod@plt>
   12310:	cmp	r0, #0
   12314:	bne	123d8 <__assert_fail@plt+0xb0c>
   12318:	ldr	r3, [sp, #12]
   1231c:	cmp	r3, #0
   12320:	beq	12340 <__assert_fail@plt+0xa74>
   12324:	ldr	r3, [pc, #712]	; 125f4 <__assert_fail@plt+0xd28>
   12328:	ldr	r3, [r3]
   1232c:	mov	r1, r8
   12330:	ldr	r0, [r4, r3, lsl #2]
   12334:	bl	169f8 <lchmod@@Base>
   12338:	cmp	r0, #0
   1233c:	bne	124bc <__assert_fail@plt+0xbf0>
   12340:	mov	r0, #0
   12344:	add	sp, sp, #52	; 0x34
   12348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1234c:	mov	r2, #5
   12350:	ldr	r1, [pc, #720]	; 12628 <__assert_fail@plt+0xd5c>
   12354:	mov	r0, #0
   12358:	bl	11578 <dcgettext@plt>
   1235c:	mov	r4, r0
   12360:	ldr	r0, [sp, #16]
   12364:	bl	18c2c <lchmod@@Base+0x2234>
   12368:	mov	r3, r0
   1236c:	mov	r2, r4
   12370:	mov	r1, #0
   12374:	mov	r0, #1
   12378:	bl	11638 <error@plt>
   1237c:	mov	r2, #5
   12380:	ldr	r1, [pc, #676]	; 1262c <__assert_fail@plt+0xd60>
   12384:	mov	r0, #0
   12388:	bl	11578 <dcgettext@plt>
   1238c:	mov	r4, r0
   12390:	ldr	r0, [sp, #8]
   12394:	bl	18c2c <lchmod@@Base+0x2234>
   12398:	mov	r3, r0
   1239c:	mov	r2, r4
   123a0:	mov	r1, #0
   123a4:	mov	r0, #1
   123a8:	bl	11638 <error@plt>
   123ac:	mov	r2, #5
   123b0:	ldr	r1, [pc, #632]	; 12630 <__assert_fail@plt+0xd64>
   123b4:	mov	r0, #0
   123b8:	bl	11578 <dcgettext@plt>
   123bc:	ldr	r3, [sp, #8]
   123c0:	str	r3, [sp]
   123c4:	ldr	r3, [sp, #16]
   123c8:	mov	r2, r0
   123cc:	mov	r1, #0
   123d0:	mov	r0, #1
   123d4:	bl	11638 <error@plt>
   123d8:	bl	1171c <__errno_location@plt>
   123dc:	ldr	r5, [r0]
   123e0:	ldr	r3, [pc, #524]	; 125f4 <__assert_fail@plt+0xd28>
   123e4:	ldr	r3, [r3]
   123e8:	ldr	r2, [r4, r3, lsl #2]
   123ec:	mov	r1, #3
   123f0:	mov	r0, #0
   123f4:	bl	18ac4 <lchmod@@Base+0x20cc>
   123f8:	mov	r3, r0
   123fc:	ldr	r2, [pc, #560]	; 12634 <__assert_fail@plt+0xd68>
   12400:	mov	r1, r5
   12404:	mov	r0, #1
   12408:	bl	11638 <error@plt>
   1240c:	cmp	r5, #0
   12410:	beq	12428 <__assert_fail@plt+0xb5c>
   12414:	add	r3, r4, r2
   12418:	mov	r2, #4096	; 0x1000
   1241c:	ldr	r1, [r3, #-4]
   12420:	mov	r0, r5
   12424:	bl	1292c <__assert_fail@plt+0x1060>
   12428:	ldr	r3, [pc, #452]	; 125f4 <__assert_fail@plt+0xd28>
   1242c:	ldr	r3, [r3]
   12430:	mov	r1, r8
   12434:	ldr	r0, [r4, r3, lsl #2]
   12438:	bl	1189c <mkfifo@plt>
   1243c:	cmp	r0, #0
   12440:	beq	12318 <__assert_fail@plt+0xa4c>
   12444:	bl	1171c <__errno_location@plt>
   12448:	ldr	r5, [r0]
   1244c:	ldr	r3, [pc, #416]	; 125f4 <__assert_fail@plt+0xd28>
   12450:	ldr	r3, [r3]
   12454:	ldr	r2, [r4, r3, lsl #2]
   12458:	mov	r1, #3
   1245c:	mov	r0, #0
   12460:	bl	18ac4 <lchmod@@Base+0x20cc>
   12464:	mov	r3, r0
   12468:	ldr	r2, [pc, #452]	; 12634 <__assert_fail@plt+0xd68>
   1246c:	mov	r1, r5
   12470:	mov	r0, #1
   12474:	bl	11638 <error@plt>
   12478:	mov	r2, #5
   1247c:	ldr	r1, [pc, #436]	; 12638 <__assert_fail@plt+0xd6c>
   12480:	mov	r0, #0
   12484:	bl	11578 <dcgettext@plt>
   12488:	mov	r5, r0
   1248c:	ldr	r3, [pc, #352]	; 125f4 <__assert_fail@plt+0xd28>
   12490:	ldr	r3, [r3]
   12494:	add	r3, r3, #1
   12498:	ldr	r0, [r4, r3, lsl #2]
   1249c:	bl	18c2c <lchmod@@Base+0x2234>
   124a0:	mov	r3, r0
   124a4:	mov	r2, r5
   124a8:	mov	r1, #0
   124ac:	mov	r0, r1
   124b0:	bl	11638 <error@plt>
   124b4:	mov	r0, #1
   124b8:	bl	11a00 <__assert_fail@plt+0x134>
   124bc:	bl	1171c <__errno_location@plt>
   124c0:	ldr	r5, [r0]
   124c4:	mov	r2, #5
   124c8:	ldr	r1, [pc, #364]	; 1263c <__assert_fail@plt+0xd70>
   124cc:	mov	r0, #0
   124d0:	bl	11578 <dcgettext@plt>
   124d4:	mov	r6, r0
   124d8:	ldr	r3, [pc, #276]	; 125f4 <__assert_fail@plt+0xd28>
   124dc:	ldr	r3, [r3]
   124e0:	ldr	r1, [r4, r3, lsl #2]
   124e4:	mov	r0, #4
   124e8:	bl	189f8 <lchmod@@Base+0x2000>
   124ec:	mov	r3, r0
   124f0:	mov	r2, r6
   124f4:	mov	r1, r5
   124f8:	mov	r0, #1
   124fc:	bl	11638 <error@plt>
   12500:	ldr	r2, [sp, #8]
   12504:	sub	r3, r2, r3
   12508:	cmp	r3, #1
   1250c:	bls	120d0 <__assert_fail@plt+0x804>
   12510:	cmp	r3, #2
   12514:	bhi	12570 <__assert_fail@plt+0xca4>
   12518:	ldr	r3, [sp, #16]
   1251c:	cmp	r3, #0
   12520:	beq	12534 <__assert_fail@plt+0xc68>
   12524:	mov	r0, r3
   12528:	bl	11710 <setfscreatecon@plt>
   1252c:	cmp	r0, #0
   12530:	blt	12180 <__assert_fail@plt+0x8b4>
   12534:	ldr	r3, [pc, #184]	; 125f4 <__assert_fail@plt+0xd28>
   12538:	ldr	r3, [r3]
   1253c:	add	r3, r3, #1
   12540:	lsl	r2, r3, #2
   12544:	ldr	r3, [r4, r3, lsl #2]
   12548:	ldrb	r3, [r3]
   1254c:	cmp	r3, #99	; 0x63
   12550:	beq	12568 <__assert_fail@plt+0xc9c>
   12554:	bls	121b8 <__assert_fail@plt+0x8ec>
   12558:	cmp	r3, #112	; 0x70
   1255c:	beq	1240c <__assert_fail@plt+0xb40>
   12560:	cmp	r3, #117	; 0x75
   12564:	bne	12478 <__assert_fail@plt+0xbac>
   12568:	mov	r9, #8192	; 0x2000
   1256c:	b	121c4 <__assert_fail@plt+0x8f8>
   12570:	mov	r2, #5
   12574:	ldr	r1, [pc, #124]	; 125f8 <__assert_fail@plt+0xd2c>
   12578:	mov	r0, #0
   1257c:	bl	11578 <dcgettext@plt>
   12580:	mov	r5, r0
   12584:	ldr	r3, [pc, #104]	; 125f4 <__assert_fail@plt+0xd28>
   12588:	ldr	r3, [r3]
   1258c:	add	r3, r3, #2
   12590:	ldr	r0, [r4, r3, lsl #2]
   12594:	bl	18c2c <lchmod@@Base+0x2234>
   12598:	mov	r3, r0
   1259c:	mov	r2, r5
   125a0:	mov	r1, #0
   125a4:	mov	r0, r1
   125a8:	bl	11638 <error@plt>
   125ac:	b	12040 <__assert_fail@plt+0x774>
   125b0:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   125b4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   125b8:	strdeq	fp, [r1], -ip
   125bc:	andeq	fp, r1, r8, lsl #10
   125c0:			; <UNDEFINED> instruction: 0x0001b5b0
   125c4:	andeq	r3, r1, r0, asr #8
   125c8:	andeq	sl, r1, r8, asr #31
   125cc:	andeq	fp, r1, r0, asr #12
   125d0:	andeq	ip, r2, r8, ror #3
   125d4:	andeq	fp, r1, r4, ror #11
   125d8:	andeq	fp, r1, r8, asr #11
   125dc:	andeq	fp, r1, r0, lsr r6
   125e0:	andeq	ip, r2, r8, lsl #3
   125e4:	andeq	fp, r1, r4, lsl #10
   125e8:	andeq	fp, r1, r8, lsl r0
   125ec:	andeq	ip, r2, r4, ror #3
   125f0:			; <UNDEFINED> instruction: 0x000001b6
   125f4:	ldrdeq	ip, [r2], -r8
   125f8:	andeq	fp, r1, r4, ror #13
   125fc:	andeq	ip, r2, r0, ror #3
   12600:	strdeq	fp, [r1], -r8
   12604:	andeq	fp, r1, r8, asr sl
   12608:	andeq	fp, r1, r4, asr #12
   1260c:	andeq	fp, r1, r4, asr r6
   12610:	andeq	fp, r1, r0, lsl #13
   12614:	muleq	r1, r0, r6
   12618:	andeq	fp, r1, ip, lsr #13
   1261c:	andeq	fp, r1, ip, lsr #14
   12620:	andeq	pc, pc, r0, lsl #30
   12624:			; <UNDEFINED> instruction: 0xfffff000
   12628:	andeq	fp, r1, r0, ror #14
   1262c:	andeq	fp, r1, r0, lsl #15
   12630:	andeq	fp, r1, r0, lsr #15
   12634:	muleq	r1, r0, r8
   12638:			; <UNDEFINED> instruction: 0x0001b7b8
   1263c:	ldrdeq	fp, [r1], -r0
   12640:	push	{r4, r5, r6, r7, r8, r9, lr}
   12644:	sub	sp, sp, #116	; 0x74
   12648:	mov	r5, r1
   1264c:	mov	r3, #0
   12650:	str	r3, [sp, #4]
   12654:	str	r3, [sp]
   12658:	subs	r6, r0, #0
   1265c:	beq	12730 <__assert_fail@plt+0xe64>
   12660:	mov	r1, #32768	; 0x8000
   12664:	mov	r0, r5
   12668:	bl	11644 <open64@plt>
   1266c:	mov	r4, r0
   12670:	cmn	r0, #1
   12674:	beq	12788 <__assert_fail@plt+0xebc>
   12678:	add	r2, sp, #8
   1267c:	mov	r1, r0
   12680:	mov	r0, #3
   12684:	bl	115d8 <__fxstat64@plt>
   12688:	cmp	r0, #0
   1268c:	blt	128f0 <__assert_fail@plt+0x1024>
   12690:	ldr	r3, [sp, #24]
   12694:	mov	r2, r5
   12698:	add	r1, sp, #4
   1269c:	mov	r0, r6
   126a0:	bl	11494 <selabel_lookup@plt>
   126a4:	cmp	r0, #0
   126a8:	blt	127d8 <__assert_fail@plt+0xf0c>
   126ac:	ldr	r0, [sp, #4]
   126b0:	bl	11554 <context_new@plt>
   126b4:	subs	r8, r0, #0
   126b8:	beq	128b0 <__assert_fail@plt+0xfe4>
   126bc:	cmn	r4, #1
   126c0:	beq	12858 <__assert_fail@plt+0xf8c>
   126c4:	mov	r1, sp
   126c8:	mov	r0, r4
   126cc:	bl	18e38 <lchmod@@Base+0x2440>
   126d0:	cmp	r0, #0
   126d4:	blt	1290c <__assert_fail@plt+0x1040>
   126d8:	ldr	r0, [sp]
   126dc:	bl	11554 <context_new@plt>
   126e0:	subs	r6, r0, #0
   126e4:	beq	128d4 <__assert_fail@plt+0x1008>
   126e8:	mov	r0, r8
   126ec:	bl	114dc <context_type_get@plt>
   126f0:	subs	r1, r0, #0
   126f4:	beq	12918 <__assert_fail@plt+0x104c>
   126f8:	mov	r0, r6
   126fc:	bl	11584 <context_type_set@plt>
   12700:	cmp	r0, #0
   12704:	bne	127f0 <__assert_fail@plt+0xf24>
   12708:	mov	r0, r6
   1270c:	bl	1183c <context_str@plt>
   12710:	subs	r1, r0, #0
   12714:	beq	127f0 <__assert_fail@plt+0xf24>
   12718:	cmn	r4, #1
   1271c:	beq	128a0 <__assert_fail@plt+0xfd4>
   12720:	mov	r0, r4
   12724:	bl	117a0 <fsetfilecon@plt>
   12728:	mov	r7, r0
   1272c:	b	128fc <__assert_fail@plt+0x1030>
   12730:	mov	r0, sp
   12734:	bl	11824 <getfscreatecon@plt>
   12738:	cmp	r0, #0
   1273c:	blt	128b8 <__assert_fail@plt+0xfec>
   12740:	ldr	r1, [sp]
   12744:	cmp	r1, #0
   12748:	beq	12774 <__assert_fail@plt+0xea8>
   1274c:	mov	r0, r5
   12750:	bl	114f4 <lsetfilecon@plt>
   12754:	mov	r7, r0
   12758:	bl	1171c <__errno_location@plt>
   1275c:	mov	r4, r0
   12760:	ldr	r5, [r0]
   12764:	ldr	r0, [sp]
   12768:	bl	1180c <freecon@plt>
   1276c:	str	r5, [r4]
   12770:	b	12838 <__assert_fail@plt+0xf6c>
   12774:	bl	1171c <__errno_location@plt>
   12778:	mov	r3, #61	; 0x3d
   1277c:	str	r3, [r0]
   12780:	mvn	r7, #0
   12784:	b	12838 <__assert_fail@plt+0xf6c>
   12788:	bl	1171c <__errno_location@plt>
   1278c:	ldr	r3, [r0]
   12790:	cmp	r3, #40	; 0x28
   12794:	movne	r6, #0
   12798:	movne	r8, r6
   1279c:	beq	127b4 <__assert_fail@plt+0xee8>
   127a0:	bl	1171c <__errno_location@plt>
   127a4:	mov	r5, r0
   127a8:	ldr	r9, [r0]
   127ac:	mov	r7, r4
   127b0:	b	12814 <__assert_fail@plt+0xf48>
   127b4:	add	r2, sp, #8
   127b8:	mov	r1, r5
   127bc:	mov	r0, #3
   127c0:	bl	11890 <__lxstat64@plt>
   127c4:	cmp	r0, #0
   127c8:	bge	12690 <__assert_fail@plt+0xdc4>
   127cc:	mov	r6, #0
   127d0:	mov	r8, r6
   127d4:	b	127a0 <__assert_fail@plt+0xed4>
   127d8:	bl	1171c <__errno_location@plt>
   127dc:	ldr	r3, [r0]
   127e0:	cmp	r3, #2
   127e4:	movne	r6, #0
   127e8:	movne	r8, r6
   127ec:	beq	12844 <__assert_fail@plt+0xf78>
   127f0:	bl	1171c <__errno_location@plt>
   127f4:	mov	r5, r0
   127f8:	ldr	r9, [r0]
   127fc:	cmn	r4, #1
   12800:	moveq	r7, r4
   12804:	beq	12814 <__assert_fail@plt+0xf48>
   12808:	mvn	r7, #0
   1280c:	mov	r0, r4
   12810:	bl	11884 <close@plt>
   12814:	mov	r0, r8
   12818:	bl	1168c <context_free@plt>
   1281c:	mov	r0, r6
   12820:	bl	1168c <context_free@plt>
   12824:	ldr	r0, [sp, #4]
   12828:	bl	1180c <freecon@plt>
   1282c:	ldr	r0, [sp]
   12830:	bl	1180c <freecon@plt>
   12834:	str	r9, [r5]
   12838:	mov	r0, r7
   1283c:	add	sp, sp, #116	; 0x74
   12840:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12844:	mov	r3, #61	; 0x3d
   12848:	str	r3, [r0]
   1284c:	mov	r6, #0
   12850:	mov	r8, r6
   12854:	b	127f0 <__assert_fail@plt+0xf24>
   12858:	mov	r1, sp
   1285c:	mov	r0, r5
   12860:	bl	18e20 <lchmod@@Base+0x2428>
   12864:	cmp	r0, #0
   12868:	blt	128e8 <__assert_fail@plt+0x101c>
   1286c:	ldr	r0, [sp]
   12870:	bl	11554 <context_new@plt>
   12874:	subs	r6, r0, #0
   12878:	beq	128c0 <__assert_fail@plt+0xff4>
   1287c:	mov	r0, r8
   12880:	bl	114dc <context_type_get@plt>
   12884:	subs	r1, r0, #0
   12888:	bne	126f8 <__assert_fail@plt+0xe2c>
   1288c:	bl	1171c <__errno_location@plt>
   12890:	mov	r5, r0
   12894:	ldr	r9, [r0]
   12898:	mov	r7, r4
   1289c:	b	12814 <__assert_fail@plt+0xf48>
   128a0:	mov	r0, r5
   128a4:	bl	114f4 <lsetfilecon@plt>
   128a8:	mov	r4, r0
   128ac:	b	127a0 <__assert_fail@plt+0xed4>
   128b0:	mov	r6, r8
   128b4:	b	127f0 <__assert_fail@plt+0xf24>
   128b8:	mvn	r7, #0
   128bc:	b	12838 <__assert_fail@plt+0xf6c>
   128c0:	bl	1171c <__errno_location@plt>
   128c4:	mov	r5, r0
   128c8:	ldr	r9, [r0]
   128cc:	mov	r7, r4
   128d0:	b	12814 <__assert_fail@plt+0xf48>
   128d4:	bl	1171c <__errno_location@plt>
   128d8:	mov	r5, r0
   128dc:	ldr	r9, [r0]
   128e0:	mvn	r7, #0
   128e4:	b	1280c <__assert_fail@plt+0xf40>
   128e8:	mov	r6, #0
   128ec:	b	127a0 <__assert_fail@plt+0xed4>
   128f0:	mov	r6, #0
   128f4:	mov	r8, r6
   128f8:	mvn	r7, #0
   128fc:	bl	1171c <__errno_location@plt>
   12900:	mov	r5, r0
   12904:	ldr	r9, [r0]
   12908:	b	1280c <__assert_fail@plt+0xf40>
   1290c:	mov	r6, #0
   12910:	mvn	r7, #0
   12914:	b	128fc <__assert_fail@plt+0x1030>
   12918:	bl	1171c <__errno_location@plt>
   1291c:	mov	r5, r0
   12920:	ldr	r9, [r0]
   12924:	mvn	r7, #0
   12928:	b	1280c <__assert_fail@plt+0xf40>
   1292c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12930:	sub	sp, sp, #20
   12934:	mov	r7, r0
   12938:	mov	r4, r1
   1293c:	mov	r5, r2
   12940:	mov	r3, #0
   12944:	str	r3, [sp, #12]
   12948:	str	r3, [sp, #8]
   1294c:	ldrb	r3, [r1]
   12950:	cmp	r3, #47	; 0x2f
   12954:	beq	12abc <__assert_fail@plt+0x11f0>
   12958:	mov	r1, #2
   1295c:	mov	r0, r4
   12960:	bl	12c88 <__assert_fail@plt+0x13bc>
   12964:	subs	r6, r0, #0
   12968:	beq	12af8 <__assert_fail@plt+0x122c>
   1296c:	mov	r4, r6
   12970:	mov	r3, r5
   12974:	mov	r2, r4
   12978:	add	r1, sp, #12
   1297c:	mov	r0, r7
   12980:	bl	11494 <selabel_lookup@plt>
   12984:	cmp	r0, #0
   12988:	blt	12ac4 <__assert_fail@plt+0x11f8>
   1298c:	mov	r3, #0
   12990:	str	r3, [sp]
   12994:	str	r3, [sp, #4]
   12998:	mov	r0, r4
   1299c:	bl	13534 <__assert_fail@plt+0x1c68>
   129a0:	subs	r4, r0, #0
   129a4:	beq	12b44 <__assert_fail@plt+0x1278>
   129a8:	mov	r0, sp
   129ac:	bl	11614 <getcon@plt>
   129b0:	cmp	r0, #0
   129b4:	blt	12b44 <__assert_fail@plt+0x1278>
   129b8:	add	r1, sp, #4
   129bc:	mov	r0, r4
   129c0:	bl	18e08 <lchmod@@Base+0x2410>
   129c4:	cmp	r0, #0
   129c8:	blt	12b44 <__assert_fail@plt+0x1278>
   129cc:	mov	r0, r5
   129d0:	bl	118a8 <mode_to_security_class@plt>
   129d4:	subs	r2, r0, #0
   129d8:	beq	12b44 <__assert_fail@plt+0x1278>
   129dc:	add	r3, sp, #8
   129e0:	ldr	r1, [sp, #4]
   129e4:	ldr	r0, [sp]
   129e8:	bl	117dc <security_compute_create@plt>
   129ec:	mov	r7, r0
   129f0:	bl	1171c <__errno_location@plt>
   129f4:	mov	r5, r0
   129f8:	ldr	r8, [r0]
   129fc:	mov	r0, r4
   12a00:	bl	136c8 <__assert_fail@plt+0x1dfc>
   12a04:	ldr	r0, [sp]
   12a08:	bl	1180c <freecon@plt>
   12a0c:	ldr	r0, [sp, #4]
   12a10:	bl	1180c <freecon@plt>
   12a14:	str	r8, [r5]
   12a18:	cmp	r7, #0
   12a1c:	blt	12b08 <__assert_fail@plt+0x123c>
   12a20:	ldr	r0, [sp, #12]
   12a24:	bl	11554 <context_new@plt>
   12a28:	subs	r7, r0, #0
   12a2c:	beq	12b18 <__assert_fail@plt+0x124c>
   12a30:	ldr	r0, [sp, #8]
   12a34:	bl	11554 <context_new@plt>
   12a38:	subs	r4, r0, #0
   12a3c:	beq	12b24 <__assert_fail@plt+0x1258>
   12a40:	mov	r0, r7
   12a44:	bl	114dc <context_type_get@plt>
   12a48:	subs	r1, r0, #0
   12a4c:	beq	12b2c <__assert_fail@plt+0x1260>
   12a50:	mov	r0, r4
   12a54:	bl	11584 <context_type_set@plt>
   12a58:	cmp	r0, #0
   12a5c:	bne	12b34 <__assert_fail@plt+0x1268>
   12a60:	mov	r0, r4
   12a64:	bl	1183c <context_str@plt>
   12a68:	cmp	r0, #0
   12a6c:	beq	12b3c <__assert_fail@plt+0x1270>
   12a70:	bl	11710 <setfscreatecon@plt>
   12a74:	mov	r8, r0
   12a78:	bl	1171c <__errno_location@plt>
   12a7c:	mov	r5, r0
   12a80:	ldr	r9, [r0]
   12a84:	mov	r0, r7
   12a88:	bl	1168c <context_free@plt>
   12a8c:	mov	r0, r4
   12a90:	bl	1168c <context_free@plt>
   12a94:	ldr	r0, [sp, #12]
   12a98:	bl	1180c <freecon@plt>
   12a9c:	ldr	r0, [sp, #8]
   12aa0:	bl	1180c <freecon@plt>
   12aa4:	mov	r0, r6
   12aa8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   12aac:	str	r9, [r5]
   12ab0:	mov	r0, r8
   12ab4:	add	sp, sp, #20
   12ab8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12abc:	mov	r6, #0
   12ac0:	b	12970 <__assert_fail@plt+0x10a4>
   12ac4:	bl	1171c <__errno_location@plt>
   12ac8:	ldr	r3, [r0]
   12acc:	cmp	r3, #2
   12ad0:	movne	r4, #0
   12ad4:	movne	r7, r4
   12ad8:	mvnne	r8, #0
   12adc:	bne	12a78 <__assert_fail@plt+0x11ac>
   12ae0:	mov	r3, #61	; 0x3d
   12ae4:	str	r3, [r0]
   12ae8:	mov	r4, #0
   12aec:	mov	r7, r4
   12af0:	mvn	r8, #0
   12af4:	b	12a78 <__assert_fail@plt+0x11ac>
   12af8:	mov	r4, #0
   12afc:	mov	r7, r4
   12b00:	mvn	r8, #0
   12b04:	b	12a78 <__assert_fail@plt+0x11ac>
   12b08:	mov	r4, #0
   12b0c:	mov	r7, r4
   12b10:	mvn	r8, #0
   12b14:	b	12a78 <__assert_fail@plt+0x11ac>
   12b18:	mov	r4, r7
   12b1c:	mvn	r8, #0
   12b20:	b	12a78 <__assert_fail@plt+0x11ac>
   12b24:	mvn	r8, #0
   12b28:	b	12a78 <__assert_fail@plt+0x11ac>
   12b2c:	mvn	r8, #0
   12b30:	b	12a78 <__assert_fail@plt+0x11ac>
   12b34:	mvn	r8, #0
   12b38:	b	12a78 <__assert_fail@plt+0x11ac>
   12b3c:	mvn	r8, #0
   12b40:	b	12a78 <__assert_fail@plt+0x11ac>
   12b44:	bl	1171c <__errno_location@plt>
   12b48:	mov	r5, r0
   12b4c:	ldr	r7, [r0]
   12b50:	mov	r0, r4
   12b54:	bl	136c8 <__assert_fail@plt+0x1dfc>
   12b58:	ldr	r0, [sp]
   12b5c:	bl	1180c <freecon@plt>
   12b60:	ldr	r0, [sp, #4]
   12b64:	bl	1180c <freecon@plt>
   12b68:	str	r7, [r5]
   12b6c:	mov	r4, #0
   12b70:	mov	r7, r4
   12b74:	mvn	r8, #0
   12b78:	b	12a78 <__assert_fail@plt+0x11ac>
   12b7c:	push	{r4, r5, r6, r7, lr}
   12b80:	sub	sp, sp, #12
   12b84:	mov	r6, r0
   12b88:	mov	r0, r1
   12b8c:	mov	r4, r2
   12b90:	ldrb	r3, [r1]
   12b94:	cmp	r3, #47	; 0x2f
   12b98:	beq	12bb4 <__assert_fail@plt+0x12e8>
   12b9c:	mov	r1, #2
   12ba0:	bl	12c88 <__assert_fail@plt+0x13bc>
   12ba4:	subs	r7, r0, #0
   12ba8:	beq	12c80 <__assert_fail@plt+0x13b4>
   12bac:	mov	r0, r7
   12bb0:	b	12bb8 <__assert_fail@plt+0x12ec>
   12bb4:	mov	r7, #0
   12bb8:	cmp	r4, #0
   12bbc:	beq	12c10 <__assert_fail@plt+0x1344>
   12bc0:	str	r0, [sp]
   12bc4:	mov	r5, #0
   12bc8:	str	r5, [sp, #4]
   12bcc:	mov	r2, r5
   12bd0:	mov	r1, #16
   12bd4:	mov	r0, sp
   12bd8:	bl	199f8 <lchmod@@Base+0x3000>
   12bdc:	mov	r4, r0
   12be0:	mov	r0, r4
   12be4:	bl	15104 <__assert_fail@plt+0x3838>
   12be8:	cmp	r0, #0
   12bec:	beq	12c40 <__assert_fail@plt+0x1374>
   12bf0:	ldr	r1, [r4, #24]
   12bf4:	mov	r0, r6
   12bf8:	bl	12640 <__assert_fail@plt+0xd74>
   12bfc:	cmp	r0, #0
   12c00:	bge	12be0 <__assert_fail@plt+0x1314>
   12c04:	bl	1171c <__errno_location@plt>
   12c08:	ldr	r5, [r0]
   12c0c:	b	12be0 <__assert_fail@plt+0x1314>
   12c10:	mov	r1, r0
   12c14:	mov	r0, r6
   12c18:	bl	12640 <__assert_fail@plt+0xd74>
   12c1c:	adds	r5, r0, #1
   12c20:	movne	r5, #1
   12c24:	bl	1171c <__errno_location@plt>
   12c28:	mov	r4, r0
   12c2c:	ldr	r6, [r0]
   12c30:	mov	r0, r7
   12c34:	bl	136c8 <__assert_fail@plt+0x1dfc>
   12c38:	str	r6, [r4]
   12c3c:	b	12c74 <__assert_fail@plt+0x13a8>
   12c40:	bl	1171c <__errno_location@plt>
   12c44:	mov	r6, r0
   12c48:	ldr	r3, [r0]
   12c4c:	cmp	r3, #0
   12c50:	movne	r5, r3
   12c54:	mov	r0, r4
   12c58:	bl	14fa0 <__assert_fail@plt+0x36d4>
   12c5c:	cmp	r0, #0
   12c60:	ldrne	r5, [r6]
   12c64:	mov	r0, r7
   12c68:	bl	136c8 <__assert_fail@plt+0x1dfc>
   12c6c:	clz	r5, r5
   12c70:	lsr	r5, r5, #5
   12c74:	mov	r0, r5
   12c78:	add	sp, sp, #12
   12c7c:	pop	{r4, r5, r6, r7, pc}
   12c80:	mov	r5, #0
   12c84:	b	12c74 <__assert_fail@plt+0x13a8>
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	sub	sp, sp, #3232	; 0xca0
   12c90:	sub	sp, sp, #12
   12c94:	and	fp, r1, #3
   12c98:	sub	r3, fp, #1
   12c9c:	tst	r3, fp
   12ca0:	bne	12d44 <__assert_fail@plt+0x1478>
   12ca4:	mov	r4, r0
   12ca8:	mov	r6, r1
   12cac:	cmp	r0, #0
   12cb0:	beq	12d58 <__assert_fail@plt+0x148c>
   12cb4:	ldrb	r1, [r0]
   12cb8:	cmp	r1, #0
   12cbc:	beq	12d6c <__assert_fail@plt+0x14a0>
   12cc0:	add	r3, sp, #152	; 0x98
   12cc4:	str	r3, [sp, #144]	; 0x90
   12cc8:	mov	r3, #1024	; 0x400
   12ccc:	str	r3, [sp, #148]	; 0x94
   12cd0:	add	r2, sp, #1184	; 0x4a0
   12cd4:	str	r2, [sp, #1176]	; 0x498
   12cd8:	str	r3, [sp, #1180]	; 0x49c
   12cdc:	add	r2, sp, #2208	; 0x8a0
   12ce0:	add	r2, r2, #8
   12ce4:	str	r2, [sp, #2208]	; 0x8a0
   12ce8:	str	r3, [sp, #2212]	; 0x8a4
   12cec:	cmp	r1, #47	; 0x2f
   12cf0:	beq	12d98 <__assert_fail@plt+0x14cc>
   12cf4:	add	r5, sp, #2208	; 0x8a0
   12cf8:	add	r5, r5, #8
   12cfc:	sub	r7, r5, #8
   12d00:	ldr	r1, [sp, #2212]	; 0x8a4
   12d04:	mov	r0, r5
   12d08:	bl	116bc <getcwd@plt>
   12d0c:	cmp	r0, #0
   12d10:	bne	12d84 <__assert_fail@plt+0x14b8>
   12d14:	bl	1171c <__errno_location@plt>
   12d18:	ldr	r3, [r0]
   12d1c:	cmp	r3, #12
   12d20:	beq	12d80 <__assert_fail@plt+0x14b4>
   12d24:	cmp	r3, #34	; 0x22
   12d28:	bne	13380 <__assert_fail@plt+0x1ab4>
   12d2c:	mov	r0, r7
   12d30:	bl	18c88 <lchmod@@Base+0x2290>
   12d34:	cmp	r0, #0
   12d38:	beq	12d80 <__assert_fail@plt+0x14b4>
   12d3c:	ldr	r5, [sp, #2208]	; 0x8a0
   12d40:	b	12d00 <__assert_fail@plt+0x1434>
   12d44:	bl	1171c <__errno_location@plt>
   12d48:	mov	r3, #22
   12d4c:	str	r3, [r0]
   12d50:	mov	r0, #0
   12d54:	b	133e0 <__assert_fail@plt+0x1b14>
   12d58:	bl	1171c <__errno_location@plt>
   12d5c:	mov	r3, #22
   12d60:	str	r3, [r0]
   12d64:	mov	r0, #0
   12d68:	b	133e0 <__assert_fail@plt+0x1b14>
   12d6c:	bl	1171c <__errno_location@plt>
   12d70:	mov	r3, #2
   12d74:	str	r3, [r0]
   12d78:	mov	r0, #0
   12d7c:	b	133e0 <__assert_fail@plt+0x1b14>
   12d80:	bl	199b8 <lchmod@@Base+0x2fc0>
   12d84:	mov	r1, #0
   12d88:	mov	r0, r5
   12d8c:	bl	115b4 <rawmemchr@plt>
   12d90:	mov	r1, r0
   12d94:	b	12db0 <__assert_fail@plt+0x14e4>
   12d98:	add	r1, sp, #3232	; 0xca0
   12d9c:	add	r1, r1, #8
   12da0:	mov	r3, #47	; 0x2f
   12da4:	strb	r3, [r1, #-1024]!	; 0xfffffc00
   12da8:	mov	r5, r1
   12dac:	add	r1, r1, #1
   12db0:	and	r3, r6, #4
   12db4:	str	r3, [sp, #12]
   12db8:	mov	r3, #0
   12dbc:	str	r3, [sp, #28]
   12dc0:	str	r3, [sp, #20]
   12dc4:	str	r3, [sp, #24]
   12dc8:	ldrb	r2, [r4]
   12dcc:	cmp	r2, #0
   12dd0:	beq	1330c <__assert_fail@plt+0x1a40>
   12dd4:	cmp	r2, #47	; 0x2f
   12dd8:	bne	12df8 <__assert_fail@plt+0x152c>
   12ddc:	ldrb	r2, [r4, #1]!
   12de0:	cmp	r2, #47	; 0x2f
   12de4:	beq	12ddc <__assert_fail@plt+0x1510>
   12de8:	mov	r3, r2
   12dec:	cmp	r2, #47	; 0x2f
   12df0:	cmpne	r2, #0
   12df4:	beq	12f08 <__assert_fail@plt+0x163c>
   12df8:	mov	r6, r4
   12dfc:	ldrb	r3, [r6, #1]!
   12e00:	cmp	r3, #0
   12e04:	cmpne	r3, #47	; 0x2f
   12e08:	bne	12dfc <__assert_fail@plt+0x1530>
   12e0c:	str	r6, [sp, #16]
   12e10:	subs	r8, r6, r4
   12e14:	beq	1330c <__assert_fail@plt+0x1a40>
   12e18:	cmp	r2, #46	; 0x2e
   12e1c:	movne	r3, #0
   12e20:	moveq	r3, #1
   12e24:	cmp	r8, #1
   12e28:	cmpeq	r2, #46	; 0x2e
   12e2c:	beq	13304 <__assert_fail@plt+0x1a38>
   12e30:	cmp	r8, #2
   12e34:	movne	r3, #0
   12e38:	andeq	r3, r3, #1
   12e3c:	cmp	r3, #0
   12e40:	bne	12f10 <__assert_fail@plt+0x1644>
   12e44:	ldrb	r3, [r1, #-1]
   12e48:	cmp	r3, #47	; 0x2f
   12e4c:	addne	r0, r1, #1
   12e50:	movne	r3, #47	; 0x2f
   12e54:	strbne	r3, [r1]
   12e58:	moveq	r0, r1
   12e5c:	mov	r2, r0
   12e60:	add	r9, r8, #2
   12e64:	ldr	r3, [sp, #2212]	; 0x8a4
   12e68:	add	r3, r5, r3
   12e6c:	sub	r3, r3, r0
   12e70:	cmp	r3, r9
   12e74:	bcs	12ea8 <__assert_fail@plt+0x15dc>
   12e78:	sub	r7, r2, r5
   12e7c:	add	r0, sp, #2208	; 0x8a0
   12e80:	bl	18cf8 <lchmod@@Base+0x2300>
   12e84:	cmp	r0, #0
   12e88:	beq	12f68 <__assert_fail@plt+0x169c>
   12e8c:	ldr	r5, [sp, #2208]	; 0x8a0
   12e90:	add	r0, r5, r7
   12e94:	mov	r2, r0
   12e98:	ldr	r3, [sp, #2212]	; 0x8a4
   12e9c:	sub	r3, r3, r7
   12ea0:	cmp	r3, r9
   12ea4:	bcc	12e78 <__assert_fail@plt+0x15ac>
   12ea8:	mov	r2, r8
   12eac:	mov	r1, r4
   12eb0:	bl	11698 <mempcpy@plt>
   12eb4:	str	r0, [sp, #32]
   12eb8:	mov	r3, #0
   12ebc:	strb	r3, [r0]
   12ec0:	ldr	r3, [sp, #12]
   12ec4:	cmp	r3, #0
   12ec8:	bne	13188 <__assert_fail@plt+0x18bc>
   12ecc:	ldr	sl, [sp, #1176]	; 0x498
   12ed0:	ldr	r7, [sp, #1180]	; 0x49c
   12ed4:	sub	r7, r7, #1
   12ed8:	mov	r2, r7
   12edc:	mov	r1, sl
   12ee0:	mov	r0, r5
   12ee4:	bl	115e4 <readlink@plt>
   12ee8:	cmp	r7, r0
   12eec:	bgt	12f6c <__assert_fail@plt+0x16a0>
   12ef0:	add	r0, sp, #1168	; 0x490
   12ef4:	add	r0, r0, #8
   12ef8:	bl	18c88 <lchmod@@Base+0x2290>
   12efc:	cmp	r0, #0
   12f00:	bne	12ecc <__assert_fail@plt+0x1600>
   12f04:	bl	199b8 <lchmod@@Base+0x2fc0>
   12f08:	mov	r6, r4
   12f0c:	b	12e0c <__assert_fail@plt+0x1540>
   12f10:	ldrb	r3, [r4, #1]
   12f14:	cmp	r3, #46	; 0x2e
   12f18:	bne	12e44 <__assert_fail@plt+0x1578>
   12f1c:	add	r3, r5, #1
   12f20:	cmp	r1, r3
   12f24:	bls	13304 <__assert_fail@plt+0x1a38>
   12f28:	sub	r3, r1, #1
   12f2c:	cmp	r5, r3
   12f30:	bcs	132b4 <__assert_fail@plt+0x19e8>
   12f34:	ldrb	r2, [r1, #-2]
   12f38:	cmp	r2, #47	; 0x2f
   12f3c:	moveq	r1, r3
   12f40:	beq	13304 <__assert_fail@plt+0x1a38>
   12f44:	sub	r3, r1, #2
   12f48:	mov	r2, r5
   12f4c:	mov	r1, r3
   12f50:	cmp	r2, r3
   12f54:	beq	13304 <__assert_fail@plt+0x1a38>
   12f58:	ldrb	r0, [r3, #-1]!
   12f5c:	cmp	r0, #47	; 0x2f
   12f60:	bne	12f4c <__assert_fail@plt+0x1680>
   12f64:	b	13304 <__assert_fail@plt+0x1a38>
   12f68:	bl	199b8 <lchmod@@Base+0x2fc0>
   12f6c:	mov	r9, r0
   12f70:	cmp	r0, #0
   12f74:	blt	13188 <__assert_fail@plt+0x18bc>
   12f78:	ldr	r3, [sp, #24]
   12f7c:	cmp	r3, #19
   12f80:	addle	r3, r3, #1
   12f84:	strle	r3, [sp, #24]
   12f88:	ble	1305c <__assert_fail@plt+0x1790>
   12f8c:	ldrb	r3, [r4]
   12f90:	cmp	r3, #0
   12f94:	beq	1305c <__assert_fail@plt+0x1790>
   12f98:	rsb	r8, r8, #0
   12f9c:	mov	r3, #0
   12fa0:	ldr	r7, [sp, #32]
   12fa4:	strb	r3, [r7, r8]
   12fa8:	ldrb	r1, [r5]
   12fac:	add	r2, sp, #40	; 0x28
   12fb0:	ldr	r3, [pc, #1108]	; 1340c <__assert_fail@plt+0x1b40>
   12fb4:	cmp	r1, #0
   12fb8:	movne	r3, r5
   12fbc:	mov	r1, r3
   12fc0:	mov	r0, #3
   12fc4:	bl	11854 <__xstat64@plt>
   12fc8:	cmp	r0, #0
   12fcc:	bne	13010 <__assert_fail@plt+0x1744>
   12fd0:	ldrb	r3, [r4]
   12fd4:	strb	r3, [r7, r8]
   12fd8:	ldr	r3, [sp, #28]
   12fdc:	cmp	r3, #0
   12fe0:	beq	13020 <__assert_fail@plt+0x1754>
   12fe4:	add	r2, sp, #40	; 0x28
   12fe8:	mov	r1, r4
   12fec:	ldr	r0, [sp, #28]
   12ff0:	bl	13684 <__assert_fail@plt+0x1db8>
   12ff4:	cmp	r0, #0
   12ff8:	beq	1304c <__assert_fail@plt+0x1780>
   12ffc:	cmp	fp, #2
   13000:	beq	13160 <__assert_fail@plt+0x1894>
   13004:	bl	1171c <__errno_location@plt>
   13008:	mov	r3, #40	; 0x28
   1300c:	str	r3, [r0]
   13010:	mov	r6, r5
   13014:	ldr	r5, [sp, #32]
   13018:	mov	r4, #1
   1301c:	b	1336c <__assert_fail@plt+0x1aa0>
   13020:	ldr	r3, [pc, #1000]	; 13410 <__assert_fail@plt+0x1b44>
   13024:	str	r3, [sp]
   13028:	ldr	r3, [pc, #996]	; 13414 <__assert_fail@plt+0x1b48>
   1302c:	ldr	r2, [pc, #996]	; 13418 <__assert_fail@plt+0x1b4c>
   13030:	mov	r1, #0
   13034:	mov	r0, #7
   13038:	bl	161f8 <__assert_fail@plt+0x492c>
   1303c:	subs	r3, r0, #0
   13040:	str	r3, [sp, #28]
   13044:	bne	12fe4 <__assert_fail@plt+0x1718>
   13048:	bl	199b8 <lchmod@@Base+0x2fc0>
   1304c:	add	r2, sp, #40	; 0x28
   13050:	mov	r1, r4
   13054:	ldr	r0, [sp, #28]
   13058:	bl	1361c <__assert_fail@plt+0x1d50>
   1305c:	mov	r3, #0
   13060:	strb	r3, [sl, r9]
   13064:	ldr	r8, [sp, #144]	; 0x90
   13068:	ldr	r3, [sp, #20]
   1306c:	cmp	r3, #0
   13070:	ldrne	r3, [sp, #16]
   13074:	subne	r3, r3, r8
   13078:	moveq	r3, #0
   1307c:	str	r3, [sp, #36]	; 0x24
   13080:	mov	r0, r6
   13084:	bl	116e0 <strlen@plt>
   13088:	mov	r7, r0
   1308c:	adds	r4, r9, r0
   13090:	bcs	13168 <__assert_fail@plt+0x189c>
   13094:	ldr	r3, [sp, #148]	; 0x94
   13098:	cmp	r3, r4
   1309c:	addls	r3, sp, #152	; 0x98
   130a0:	addls	r3, sp, #144	; 0x90
   130a4:	strls	r3, [sp, #16]
   130a8:	bhi	130cc <__assert_fail@plt+0x1800>
   130ac:	ldr	r0, [sp, #16]
   130b0:	bl	18cf8 <lchmod@@Base+0x2300>
   130b4:	cmp	r0, #0
   130b8:	beq	1316c <__assert_fail@plt+0x18a0>
   130bc:	ldr	r3, [sp, #148]	; 0x94
   130c0:	cmp	r4, r3
   130c4:	bcs	130ac <__assert_fail@plt+0x17e0>
   130c8:	ldr	r8, [sp, #144]	; 0x90
   130cc:	ldr	r3, [sp, #20]
   130d0:	cmp	r3, #0
   130d4:	ldrne	r3, [sp, #36]	; 0x24
   130d8:	addne	r6, r8, r3
   130dc:	add	r2, r7, #1
   130e0:	mov	r1, r6
   130e4:	add	r0, r8, r9
   130e8:	bl	11500 <memmove@plt>
   130ec:	mov	r2, r9
   130f0:	mov	r1, sl
   130f4:	mov	r0, r8
   130f8:	bl	11530 <memcpy@plt>
   130fc:	ldrb	r3, [sl]
   13100:	cmp	r3, #47	; 0x2f
   13104:	beq	13170 <__assert_fail@plt+0x18a4>
   13108:	add	r3, r5, #1
   1310c:	ldr	r2, [sp, #32]
   13110:	cmp	r2, r3
   13114:	bls	132bc <__assert_fail@plt+0x19f0>
   13118:	sub	r1, r2, #1
   1311c:	cmp	r1, r5
   13120:	bls	132d0 <__assert_fail@plt+0x1a04>
   13124:	ldrb	r3, [r2, #-2]
   13128:	cmp	r3, #47	; 0x2f
   1312c:	beq	132e0 <__assert_fail@plt+0x1a14>
   13130:	sub	r3, r2, #2
   13134:	mov	ip, r5
   13138:	mov	r1, r3
   1313c:	cmp	r3, ip
   13140:	beq	132f0 <__assert_fail@plt+0x1a24>
   13144:	ldrb	r2, [r3, #-1]!
   13148:	cmp	r2, #47	; 0x2f
   1314c:	bne	13138 <__assert_fail@plt+0x186c>
   13150:	mov	r6, r0
   13154:	mov	r3, #1
   13158:	str	r3, [sp, #20]
   1315c:	b	13304 <__assert_fail@plt+0x1a38>
   13160:	ldr	r1, [sp, #32]
   13164:	b	13304 <__assert_fail@plt+0x1a38>
   13168:	bl	199b8 <lchmod@@Base+0x2fc0>
   1316c:	bl	199b8 <lchmod@@Base+0x2fc0>
   13170:	add	r1, r5, #1
   13174:	strb	r3, [r5]
   13178:	mov	r6, r0
   1317c:	mov	r3, #1
   13180:	str	r3, [sp, #20]
   13184:	b	13304 <__assert_fail@plt+0x1a38>
   13188:	cmp	fp, #2
   1318c:	ldreq	r1, [sp, #32]
   13190:	beq	13304 <__assert_fail@plt+0x1a38>
   13194:	mov	r3, r6
   13198:	ldrb	r2, [r3]
   1319c:	cmp	r2, #47	; 0x2f
   131a0:	beq	13204 <__assert_fail@plt+0x1938>
   131a4:	ldr	r3, [sp, #12]
   131a8:	cmp	r3, #0
   131ac:	bne	1327c <__assert_fail@plt+0x19b0>
   131b0:	bl	1171c <__errno_location@plt>
   131b4:	ldr	r4, [r0]
   131b8:	subs	r4, r4, #22
   131bc:	movne	r4, #1
   131c0:	cmp	r4, #0
   131c4:	beq	13300 <__assert_fail@plt+0x1a34>
   131c8:	cmp	fp, #1
   131cc:	bne	1333c <__assert_fail@plt+0x1a70>
   131d0:	bl	1171c <__errno_location@plt>
   131d4:	ldr	r3, [r0]
   131d8:	cmp	r3, #2
   131dc:	bne	13348 <__assert_fail@plt+0x1a7c>
   131e0:	ldr	r1, [pc, #564]	; 1341c <__assert_fail@plt+0x1b50>
   131e4:	mov	r0, r6
   131e8:	bl	118c0 <strspn@plt>
   131ec:	ldrb	r3, [r6, r0]
   131f0:	cmp	r3, #0
   131f4:	bne	13354 <__assert_fail@plt+0x1a88>
   131f8:	ldr	r1, [sp, #32]
   131fc:	b	13304 <__assert_fail@plt+0x1a38>
   13200:	mov	r3, r1
   13204:	add	r1, r3, #1
   13208:	ldrb	r2, [r3, #1]
   1320c:	cmp	r2, #47	; 0x2f
   13210:	beq	13200 <__assert_fail@plt+0x1934>
   13214:	add	r3, r3, #2
   13218:	cmp	r2, #0
   1321c:	beq	1324c <__assert_fail@plt+0x1980>
   13220:	cmp	r2, #46	; 0x2e
   13224:	bne	131a4 <__assert_fail@plt+0x18d8>
   13228:	ldrb	r2, [r1, #1]
   1322c:	cmp	r2, #0
   13230:	beq	1324c <__assert_fail@plt+0x1980>
   13234:	cmp	r2, #46	; 0x2e
   13238:	bne	13198 <__assert_fail@plt+0x18cc>
   1323c:	ldrb	r2, [r1, #2]
   13240:	cmp	r2, #47	; 0x2f
   13244:	cmpne	r2, #0
   13248:	bne	13198 <__assert_fail@plt+0x18cc>
   1324c:	ldr	r3, [pc, #456]	; 1341c <__assert_fail@plt+0x1b50>
   13250:	ldrh	r3, [r3]
   13254:	ldr	r2, [sp, #32]
   13258:	strh	r3, [r2]
   1325c:	mov	r3, #512	; 0x200
   13260:	mov	r2, #0
   13264:	mov	r1, r5
   13268:	mvn	r0, #99	; 0x63
   1326c:	bl	11518 <faccessat@plt>
   13270:	adds	r4, r0, #0
   13274:	movne	r4, #1
   13278:	b	131c0 <__assert_fail@plt+0x18f4>
   1327c:	ldrb	r3, [r6]
   13280:	cmp	r3, #0
   13284:	movne	r0, #0
   13288:	beq	13294 <__assert_fail@plt+0x19c8>
   1328c:	mov	r4, r0
   13290:	b	131c0 <__assert_fail@plt+0x18f4>
   13294:	mov	r3, #512	; 0x200
   13298:	mov	r2, #0
   1329c:	mov	r1, r5
   132a0:	mvn	r0, #99	; 0x63
   132a4:	bl	11518 <faccessat@plt>
   132a8:	adds	r0, r0, #0
   132ac:	movne	r0, #1
   132b0:	b	1328c <__assert_fail@plt+0x19c0>
   132b4:	mov	r1, r3
   132b8:	b	13304 <__assert_fail@plt+0x1a38>
   132bc:	mov	r6, r0
   132c0:	ldr	r1, [sp, #32]
   132c4:	mov	r3, #1
   132c8:	str	r3, [sp, #20]
   132cc:	b	13304 <__assert_fail@plt+0x1a38>
   132d0:	mov	r6, r0
   132d4:	mov	r3, #1
   132d8:	str	r3, [sp, #20]
   132dc:	b	13304 <__assert_fail@plt+0x1a38>
   132e0:	mov	r6, r0
   132e4:	mov	r3, #1
   132e8:	str	r3, [sp, #20]
   132ec:	b	13304 <__assert_fail@plt+0x1a38>
   132f0:	mov	r6, r0
   132f4:	mov	r3, #1
   132f8:	str	r3, [sp, #20]
   132fc:	b	13304 <__assert_fail@plt+0x1a38>
   13300:	ldr	r1, [sp, #32]
   13304:	mov	r4, r6
   13308:	b	12dc8 <__assert_fail@plt+0x14fc>
   1330c:	add	r3, r5, #1
   13310:	cmp	r1, r3
   13314:	bls	13360 <__assert_fail@plt+0x1a94>
   13318:	ldrb	r3, [r1, #-1]
   1331c:	cmp	r3, #47	; 0x2f
   13320:	moveq	r6, r5
   13324:	subeq	r5, r1, #1
   13328:	moveq	r4, #0
   1332c:	movne	r6, r5
   13330:	movne	r5, r1
   13334:	movne	r4, #0
   13338:	b	1336c <__assert_fail@plt+0x1aa0>
   1333c:	mov	r6, r5
   13340:	ldr	r5, [sp, #32]
   13344:	b	1336c <__assert_fail@plt+0x1aa0>
   13348:	mov	r6, r5
   1334c:	ldr	r5, [sp, #32]
   13350:	b	1336c <__assert_fail@plt+0x1aa0>
   13354:	mov	r6, r5
   13358:	ldr	r5, [sp, #32]
   1335c:	b	1336c <__assert_fail@plt+0x1aa0>
   13360:	mov	r6, r5
   13364:	mov	r5, r1
   13368:	mov	r4, #0
   1336c:	ldr	r0, [sp, #28]
   13370:	cmp	r0, #0
   13374:	beq	13388 <__assert_fail@plt+0x1abc>
   13378:	bl	16388 <__assert_fail@plt+0x4abc>
   1337c:	b	13388 <__assert_fail@plt+0x1abc>
   13380:	mov	r6, r5
   13384:	mov	r4, #1
   13388:	ldr	r0, [sp, #144]	; 0x90
   1338c:	add	r3, sp, #152	; 0x98
   13390:	cmp	r0, r3
   13394:	beq	1339c <__assert_fail@plt+0x1ad0>
   13398:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1339c:	add	r3, sp, #3232	; 0xca0
   133a0:	add	r3, r3, #8
   133a4:	ldr	r0, [r3, #-2064]!	; 0xfffff7f0
   133a8:	add	r3, r3, #8
   133ac:	cmp	r0, r3
   133b0:	beq	133b8 <__assert_fail@plt+0x1aec>
   133b4:	bl	136c8 <__assert_fail@plt+0x1dfc>
   133b8:	cmp	r4, #0
   133bc:	beq	133ec <__assert_fail@plt+0x1b20>
   133c0:	ldr	r0, [sp, #2208]	; 0x8a0
   133c4:	add	r3, sp, #2208	; 0x8a0
   133c8:	add	r3, r3, #8
   133cc:	cmp	r0, r3
   133d0:	moveq	r0, #0
   133d4:	beq	133e0 <__assert_fail@plt+0x1b14>
   133d8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   133dc:	mov	r0, #0
   133e0:	add	sp, sp, #3232	; 0xca0
   133e4:	add	sp, sp, #12
   133e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ec:	mov	r3, #0
   133f0:	strb	r3, [r5], #1
   133f4:	sub	r1, r5, r6
   133f8:	add	r0, sp, #2208	; 0x8a0
   133fc:	bl	18c40 <lchmod@@Base+0x2248>
   13400:	cmp	r0, #0
   13404:	bne	133e0 <__assert_fail@plt+0x1b14>
   13408:	bl	199b8 <lchmod@@Base+0x2fc0>
   1340c:	andeq	fp, r1, r0, ror #13
   13410:	andeq	r6, r1, ip, lsl r9
   13414:	andeq	r6, r1, r8, asr #17
   13418:	muleq	r1, r0, r8
   1341c:	andeq	fp, r1, ip, ror r8
   13420:	ldr	r3, [pc, #4]	; 1342c <__assert_fail@plt+0x1b60>
   13424:	str	r0, [r3]
   13428:	bx	lr
   1342c:	strdeq	ip, [r2], -r0
   13430:	ldr	r3, [pc, #4]	; 1343c <__assert_fail@plt+0x1b70>
   13434:	strb	r0, [r3, #4]
   13438:	bx	lr
   1343c:	strdeq	ip, [r2], -r0
   13440:	push	{r4, r5, r6, lr}
   13444:	sub	sp, sp, #8
   13448:	ldr	r3, [pc, #200]	; 13518 <__assert_fail@plt+0x1c4c>
   1344c:	ldr	r0, [r3]
   13450:	bl	1a170 <lchmod@@Base+0x3778>
   13454:	cmp	r0, #0
   13458:	beq	1347c <__assert_fail@plt+0x1bb0>
   1345c:	ldr	r3, [pc, #184]	; 1351c <__assert_fail@plt+0x1c50>
   13460:	ldrb	r3, [r3, #4]
   13464:	cmp	r3, #0
   13468:	beq	13498 <__assert_fail@plt+0x1bcc>
   1346c:	bl	1171c <__errno_location@plt>
   13470:	ldr	r3, [r0]
   13474:	cmp	r3, #32
   13478:	bne	13498 <__assert_fail@plt+0x1bcc>
   1347c:	ldr	r3, [pc, #156]	; 13520 <__assert_fail@plt+0x1c54>
   13480:	ldr	r0, [r3]
   13484:	bl	1a170 <lchmod@@Base+0x3778>
   13488:	cmp	r0, #0
   1348c:	bne	1350c <__assert_fail@plt+0x1c40>
   13490:	add	sp, sp, #8
   13494:	pop	{r4, r5, r6, pc}
   13498:	mov	r2, #5
   1349c:	ldr	r1, [pc, #128]	; 13524 <__assert_fail@plt+0x1c58>
   134a0:	mov	r0, #0
   134a4:	bl	11578 <dcgettext@plt>
   134a8:	mov	r4, r0
   134ac:	ldr	r3, [pc, #104]	; 1351c <__assert_fail@plt+0x1c50>
   134b0:	ldr	r5, [r3]
   134b4:	cmp	r5, #0
   134b8:	beq	134f0 <__assert_fail@plt+0x1c24>
   134bc:	bl	1171c <__errno_location@plt>
   134c0:	ldr	r6, [r0]
   134c4:	mov	r0, r5
   134c8:	bl	18aa4 <lchmod@@Base+0x20ac>
   134cc:	str	r4, [sp]
   134d0:	mov	r3, r0
   134d4:	ldr	r2, [pc, #76]	; 13528 <__assert_fail@plt+0x1c5c>
   134d8:	mov	r1, r6
   134dc:	mov	r0, #0
   134e0:	bl	11638 <error@plt>
   134e4:	ldr	r3, [pc, #64]	; 1352c <__assert_fail@plt+0x1c60>
   134e8:	ldr	r0, [r3]
   134ec:	bl	11524 <_exit@plt>
   134f0:	bl	1171c <__errno_location@plt>
   134f4:	mov	r3, r4
   134f8:	ldr	r2, [pc, #48]	; 13530 <__assert_fail@plt+0x1c64>
   134fc:	ldr	r1, [r0]
   13500:	mov	r0, #0
   13504:	bl	11638 <error@plt>
   13508:	b	134e4 <__assert_fail@plt+0x1c18>
   1350c:	ldr	r3, [pc, #24]	; 1352c <__assert_fail@plt+0x1c60>
   13510:	ldr	r0, [r3]
   13514:	bl	11524 <_exit@plt>
   13518:	andeq	ip, r2, r4, ror #3
   1351c:	strdeq	ip, [r2], -r0
   13520:	andeq	ip, r2, r0, ror #3
   13524:	andeq	fp, r1, r0, lsl #17
   13528:	andeq	fp, r1, ip, lsl #17
   1352c:	andeq	ip, r2, ip, lsl #3
   13530:	muleq	r1, r0, r8
   13534:	push	{r4, lr}
   13538:	bl	135c0 <__assert_fail@plt+0x1cf4>
   1353c:	cmp	r0, #0
   13540:	popne	{r4, pc}
   13544:	bl	199b8 <lchmod@@Base+0x2fc0>
   13548:	push	{r4, r5, r6, lr}
   1354c:	mov	r5, r0
   13550:	ldrb	r4, [r0]
   13554:	cmp	r4, #47	; 0x2f
   13558:	movne	r4, #0
   1355c:	moveq	r4, #1
   13560:	bl	1a0b0 <lchmod@@Base+0x36b8>
   13564:	sub	r0, r0, r5
   13568:	cmp	r0, r4
   1356c:	bls	135a4 <__assert_fail@plt+0x1cd8>
   13570:	sub	r3, r0, #1
   13574:	add	r2, r5, r3
   13578:	ldrb	r1, [r5, r3]
   1357c:	cmp	r1, #47	; 0x2f
   13580:	bne	135ac <__assert_fail@plt+0x1ce0>
   13584:	cmp	r4, r3
   13588:	beq	135b8 <__assert_fail@plt+0x1cec>
   1358c:	sub	r0, r3, #1
   13590:	ldrb	r1, [r2, #-1]!
   13594:	cmp	r1, #47	; 0x2f
   13598:	bne	135b4 <__assert_fail@plt+0x1ce8>
   1359c:	mov	r3, r0
   135a0:	b	13584 <__assert_fail@plt+0x1cb8>
   135a4:	mov	r4, r0
   135a8:	b	135b8 <__assert_fail@plt+0x1cec>
   135ac:	mov	r4, r0
   135b0:	b	135b8 <__assert_fail@plt+0x1cec>
   135b4:	mov	r4, r3
   135b8:	mov	r0, r4
   135bc:	pop	{r4, r5, r6, pc}
   135c0:	push	{r4, r5, r6, r7, r8, lr}
   135c4:	mov	r7, r0
   135c8:	bl	13548 <__assert_fail@plt+0x1c7c>
   135cc:	mov	r4, r0
   135d0:	add	r6, r0, #1
   135d4:	cmp	r0, #0
   135d8:	movne	r0, r6
   135dc:	addeq	r0, r6, #1
   135e0:	bl	1a030 <lchmod@@Base+0x3638>
   135e4:	subs	r5, r0, #0
   135e8:	beq	13614 <__assert_fail@plt+0x1d48>
   135ec:	mov	r2, r4
   135f0:	mov	r1, r7
   135f4:	mov	r0, r5
   135f8:	bl	11530 <memcpy@plt>
   135fc:	cmp	r4, #0
   13600:	moveq	r3, #46	; 0x2e
   13604:	strbeq	r3, [r5, r4]
   13608:	moveq	r4, r6
   1360c:	mov	r3, #0
   13610:	strb	r3, [r5, r4]
   13614:	mov	r0, r5
   13618:	pop	{r4, r5, r6, r7, r8, pc}
   1361c:	push	{r4, r5, r6, r7, r8, lr}
   13620:	subs	r7, r0, #0
   13624:	popeq	{r4, r5, r6, r7, r8, pc}
   13628:	mov	r5, r2
   1362c:	mov	r6, r1
   13630:	mov	r0, #24
   13634:	bl	19414 <lchmod@@Base+0x2a1c>
   13638:	mov	r4, r0
   1363c:	mov	r0, r6
   13640:	bl	1999c <lchmod@@Base+0x2fa4>
   13644:	str	r0, [r4]
   13648:	ldrd	r2, [r5, #96]	; 0x60
   1364c:	strd	r2, [r4, #8]
   13650:	ldrd	r2, [r5]
   13654:	strd	r2, [r4, #16]
   13658:	mov	r1, r4
   1365c:	mov	r0, r7
   13660:	bl	16744 <__assert_fail@plt+0x4e78>
   13664:	cmp	r0, #0
   13668:	beq	13680 <__assert_fail@plt+0x1db4>
   1366c:	cmp	r4, r0
   13670:	popeq	{r4, r5, r6, r7, r8, pc}
   13674:	mov	r0, r4
   13678:	bl	1691c <__assert_fail@plt+0x5050>
   1367c:	pop	{r4, r5, r6, r7, r8, pc}
   13680:	bl	199b8 <lchmod@@Base+0x2fc0>
   13684:	cmp	r0, #0
   13688:	beq	136c0 <__assert_fail@plt+0x1df4>
   1368c:	push	{r4, r5, lr}
   13690:	sub	sp, sp, #28
   13694:	str	r1, [sp]
   13698:	ldrd	r4, [r2, #96]	; 0x60
   1369c:	strd	r4, [sp, #8]
   136a0:	ldrd	r2, [r2]
   136a4:	strd	r2, [sp, #16]
   136a8:	mov	r1, sp
   136ac:	bl	15f40 <__assert_fail@plt+0x4674>
   136b0:	adds	r0, r0, #0
   136b4:	movne	r0, #1
   136b8:	add	sp, sp, #28
   136bc:	pop	{r4, r5, pc}
   136c0:	mov	r0, #0
   136c4:	bx	lr
   136c8:	push	{r4, r5, lr}
   136cc:	sub	sp, sp, #12
   136d0:	mov	r5, r0
   136d4:	bl	1171c <__errno_location@plt>
   136d8:	mov	r4, r0
   136dc:	ldr	r3, [r0]
   136e0:	str	r3, [sp]
   136e4:	str	r3, [sp, #4]
   136e8:	mov	r3, #0
   136ec:	str	r3, [r0]
   136f0:	mov	r0, r5
   136f4:	bl	1150c <free@plt>
   136f8:	ldr	r3, [r4]
   136fc:	cmp	r3, #0
   13700:	moveq	r3, #4
   13704:	movne	r3, #0
   13708:	add	r2, sp, #8
   1370c:	add	r3, r2, r3
   13710:	ldr	r3, [r3, #-8]
   13714:	str	r3, [r4]
   13718:	add	sp, sp, #12
   1371c:	pop	{r4, r5, pc}
   13720:	push	{r4, r5}
   13724:	ldrd	r4, [r0, #8]
   13728:	ldrd	r2, [r1, #8]
   1372c:	cmp	r5, r3
   13730:	cmpeq	r4, r2
   13734:	movne	r0, #0
   13738:	beq	13744 <__assert_fail@plt+0x1e78>
   1373c:	pop	{r4, r5}
   13740:	bx	lr
   13744:	ldrd	r4, [r0]
   13748:	ldrd	r2, [r1]
   1374c:	cmp	r5, r3
   13750:	cmpeq	r4, r2
   13754:	moveq	r0, #1
   13758:	movne	r0, #0
   1375c:	b	1373c <__assert_fail@plt+0x1e70>
   13760:	push	{r4, lr}
   13764:	mov	r2, r1
   13768:	mov	r3, #0
   1376c:	ldrd	r0, [r0, #8]
   13770:	bl	1ad94 <lchmod@@Base+0x439c>
   13774:	mov	r0, r2
   13778:	pop	{r4, pc}
   1377c:	push	{r4, lr}
   13780:	mov	r2, r1
   13784:	mov	r3, #0
   13788:	ldrd	r0, [r0]
   1378c:	bl	1ad94 <lchmod@@Base+0x439c>
   13790:	mov	r0, r2
   13794:	pop	{r4, pc}
   13798:	push	{r4, r5}
   1379c:	ldrd	r4, [r0]
   137a0:	ldrd	r2, [r1]
   137a4:	cmp	r5, r3
   137a8:	cmpeq	r4, r2
   137ac:	moveq	r0, #1
   137b0:	movne	r0, #0
   137b4:	pop	{r4, r5}
   137b8:	bx	lr
   137bc:	push	{r4, r5}
   137c0:	ldr	r3, [r0]
   137c4:	ldrd	r4, [r3, #160]	; 0xa0
   137c8:	ldr	r3, [r1]
   137cc:	ldrd	r2, [r3, #160]	; 0xa0
   137d0:	cmp	r5, r3
   137d4:	cmpeq	r4, r2
   137d8:	movhi	r0, #1
   137dc:	movls	r0, #0
   137e0:	movcc	r3, #1
   137e4:	movcs	r3, #0
   137e8:	sub	r0, r0, r3
   137ec:	pop	{r4, r5}
   137f0:	bx	lr
   137f4:	push	{r4, r5, r6, lr}
   137f8:	mov	r4, r0
   137fc:	ldr	r3, [r0, #36]	; 0x24
   13800:	add	r1, r1, #256	; 0x100
   13804:	adds	r1, r1, r3
   13808:	bcs	1382c <__assert_fail@plt+0x1f60>
   1380c:	str	r1, [r0, #36]	; 0x24
   13810:	ldr	r0, [r0, #24]
   13814:	bl	1a060 <lchmod@@Base+0x3668>
   13818:	cmp	r0, #0
   1381c:	beq	13850 <__assert_fail@plt+0x1f84>
   13820:	str	r0, [r4, #24]
   13824:	mov	r0, #1
   13828:	pop	{r4, r5, r6, pc}
   1382c:	ldr	r0, [r0, #24]
   13830:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13834:	mov	r5, #0
   13838:	str	r5, [r4, #24]
   1383c:	bl	1171c <__errno_location@plt>
   13840:	mov	r3, #36	; 0x24
   13844:	str	r3, [r0]
   13848:	mov	r0, r5
   1384c:	pop	{r4, r5, r6, pc}
   13850:	ldr	r0, [r4, #24]
   13854:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13858:	mov	r0, #0
   1385c:	str	r0, [r4, #24]
   13860:	pop	{r4, r5, r6, pc}
   13864:	push	{r4, r5, r6, lr}
   13868:	sub	sp, sp, #8
   1386c:	mov	r4, r1
   13870:	add	r5, r1, #64	; 0x40
   13874:	ldr	r3, [r1, #48]	; 0x30
   13878:	cmp	r3, #0
   1387c:	bne	1388c <__assert_fail@plt+0x1fc0>
   13880:	ldr	r3, [r0, #48]	; 0x30
   13884:	tst	r3, #1
   13888:	bne	1389c <__assert_fail@plt+0x1fd0>
   1388c:	ldr	r3, [r0, #48]	; 0x30
   13890:	lsl	r3, r3, #30
   13894:	orrs	r3, r2, r3, lsr #31
   13898:	beq	13914 <__assert_fail@plt+0x2048>
   1389c:	mov	r2, r5
   138a0:	ldr	r1, [r4, #24]
   138a4:	mov	r0, #3
   138a8:	bl	11854 <__xstat64@plt>
   138ac:	cmp	r0, #0
   138b0:	beq	13948 <__assert_fail@plt+0x207c>
   138b4:	bl	1171c <__errno_location@plt>
   138b8:	mov	r6, r0
   138bc:	ldr	r3, [r0]
   138c0:	cmp	r3, #2
   138c4:	beq	138ec <__assert_fail@plt+0x2020>
   138c8:	ldr	r3, [r6]
   138cc:	str	r3, [r4, #32]
   138d0:	mov	r2, #104	; 0x68
   138d4:	mov	r1, #0
   138d8:	mov	r0, r5
   138dc:	bl	11740 <memset@plt>
   138e0:	mov	r0, #10
   138e4:	add	sp, sp, #8
   138e8:	pop	{r4, r5, r6, pc}
   138ec:	mov	r2, r5
   138f0:	ldr	r1, [r4, #24]
   138f4:	mov	r0, #3
   138f8:	bl	11890 <__lxstat64@plt>
   138fc:	cmp	r0, #0
   13900:	bne	138c8 <__assert_fail@plt+0x1ffc>
   13904:	mov	r3, #0
   13908:	str	r3, [r6]
   1390c:	mov	r0, #13
   13910:	b	138e4 <__assert_fail@plt+0x2018>
   13914:	ldr	r1, [r0, #32]
   13918:	mov	r3, #256	; 0x100
   1391c:	str	r3, [sp]
   13920:	mov	r3, r5
   13924:	ldr	r2, [r4, #24]
   13928:	mov	r0, #3
   1392c:	bl	115c0 <__fxstatat64@plt>
   13930:	cmp	r0, #0
   13934:	beq	13948 <__assert_fail@plt+0x207c>
   13938:	bl	1171c <__errno_location@plt>
   1393c:	ldr	r3, [r0]
   13940:	str	r3, [r4, #32]
   13944:	b	138d0 <__assert_fail@plt+0x2004>
   13948:	ldr	r0, [r4, #80]	; 0x50
   1394c:	and	r0, r0, #61440	; 0xf000
   13950:	cmp	r0, #16384	; 0x4000
   13954:	beq	13974 <__assert_fail@plt+0x20a8>
   13958:	cmp	r0, #40960	; 0xa000
   1395c:	moveq	r0, #12
   13960:	beq	138e4 <__assert_fail@plt+0x2018>
   13964:	cmp	r0, #32768	; 0x8000
   13968:	moveq	r0, #8
   1396c:	movne	r0, #3
   13970:	b	138e4 <__assert_fail@plt+0x2018>
   13974:	ldrb	r3, [r4, #168]	; 0xa8
   13978:	cmp	r3, #46	; 0x2e
   1397c:	movne	r0, #1
   13980:	bne	138e4 <__assert_fail@plt+0x2018>
   13984:	ldrb	r3, [r4, #169]	; 0xa9
   13988:	cmp	r3, #0
   1398c:	beq	139a8 <__assert_fail@plt+0x20dc>
   13990:	ldr	r3, [r4, #168]	; 0xa8
   13994:	bic	r3, r3, #-16777216	; 0xff000000
   13998:	bic	r3, r3, #255	; 0xff
   1399c:	cmp	r3, #11776	; 0x2e00
   139a0:	movne	r0, #1
   139a4:	bne	138e4 <__assert_fail@plt+0x2018>
   139a8:	ldr	r0, [r4, #48]	; 0x30
   139ac:	cmp	r0, #0
   139b0:	moveq	r0, #1
   139b4:	movne	r0, #5
   139b8:	b	138e4 <__assert_fail@plt+0x2018>
   139bc:	push	{r4, r5, r6, r7, r8, lr}
   139c0:	mov	r6, r0
   139c4:	mov	r4, r1
   139c8:	mov	r5, r2
   139cc:	ldr	r7, [r0, #44]	; 0x2c
   139d0:	ldr	r3, [r0, #40]	; 0x28
   139d4:	cmp	r3, r2
   139d8:	bcs	13a04 <__assert_fail@plt+0x2138>
   139dc:	add	r1, r2, #40	; 0x28
   139e0:	str	r1, [r0, #40]	; 0x28
   139e4:	cmn	r1, #-1073741823	; 0xc0000001
   139e8:	bhi	13a74 <__assert_fail@plt+0x21a8>
   139ec:	lsl	r1, r1, #2
   139f0:	ldr	r0, [r0, #8]
   139f4:	bl	1a060 <lchmod@@Base+0x3668>
   139f8:	cmp	r0, #0
   139fc:	strne	r0, [r6, #8]
   13a00:	beq	13a74 <__assert_fail@plt+0x21a8>
   13a04:	ldr	r3, [r6, #8]
   13a08:	cmp	r4, #0
   13a0c:	beq	13a20 <__assert_fail@plt+0x2154>
   13a10:	str	r4, [r3], #4
   13a14:	ldr	r4, [r4, #8]
   13a18:	cmp	r4, #0
   13a1c:	bne	13a10 <__assert_fail@plt+0x2144>
   13a20:	mov	r3, r7
   13a24:	mov	r2, #4
   13a28:	mov	r1, r5
   13a2c:	ldr	r0, [r6, #8]
   13a30:	bl	11800 <qsort@plt>
   13a34:	ldr	lr, [r6, #8]
   13a38:	ldr	r0, [lr]
   13a3c:	subs	r3, r5, #1
   13a40:	beq	13a64 <__assert_fail@plt+0x2198>
   13a44:	mov	r2, lr
   13a48:	ldr	r1, [r2]
   13a4c:	ldr	ip, [r2, #4]!
   13a50:	str	ip, [r1, #8]
   13a54:	subs	r3, r3, #1
   13a58:	bne	13a48 <__assert_fail@plt+0x217c>
   13a5c:	sub	r5, r5, #-1073741823	; 0xc0000001
   13a60:	add	lr, lr, r5, lsl #2
   13a64:	ldr	r3, [lr]
   13a68:	mov	r2, #0
   13a6c:	str	r2, [r3, #8]
   13a70:	pop	{r4, r5, r6, r7, r8, pc}
   13a74:	ldr	r0, [r6, #8]
   13a78:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13a7c:	mov	r3, #0
   13a80:	str	r3, [r6, #8]
   13a84:	str	r3, [r6, #40]	; 0x28
   13a88:	mov	r0, r4
   13a8c:	pop	{r4, r5, r6, r7, r8, pc}
   13a90:	push	{r4, r5, r6, r7, r8, lr}
   13a94:	mov	r6, r0
   13a98:	mov	r7, r1
   13a9c:	mov	r5, r2
   13aa0:	add	r0, r2, #176	; 0xb0
   13aa4:	bic	r0, r0, #7
   13aa8:	bl	1a030 <lchmod@@Base+0x3638>
   13aac:	subs	r4, r0, #0
   13ab0:	beq	13afc <__assert_fail@plt+0x2230>
   13ab4:	mov	r2, r5
   13ab8:	mov	r1, r7
   13abc:	add	r0, r4, #168	; 0xa8
   13ac0:	bl	11530 <memcpy@plt>
   13ac4:	add	r2, r4, r5
   13ac8:	mov	r3, #0
   13acc:	strb	r3, [r2, #168]	; 0xa8
   13ad0:	str	r5, [r4, #52]	; 0x34
   13ad4:	str	r6, [r4, #44]	; 0x2c
   13ad8:	ldr	r2, [r6, #24]
   13adc:	str	r2, [r4, #28]
   13ae0:	str	r3, [r4, #32]
   13ae4:	str	r3, [r4, #12]
   13ae8:	strh	r3, [r4, #58]	; 0x3a
   13aec:	mov	r2, #3
   13af0:	strh	r2, [r4, #60]	; 0x3c
   13af4:	str	r3, [r4, #16]
   13af8:	str	r3, [r4, #20]
   13afc:	mov	r0, r4
   13b00:	pop	{r4, r5, r6, r7, r8, pc}
   13b04:	push	{r4, lr}
   13b08:	sub	sp, sp, #8
   13b0c:	mov	r4, r0
   13b10:	ldr	r2, [r0, #48]	; 0x30
   13b14:	ldr	r3, [pc, #92]	; 13b78 <__assert_fail@plt+0x22ac>
   13b18:	and	r3, r3, r2
   13b1c:	cmp	r3, #0
   13b20:	beq	13b54 <__assert_fail@plt+0x2288>
   13b24:	ldr	r3, [pc, #80]	; 13b7c <__assert_fail@plt+0x22b0>
   13b28:	str	r3, [sp]
   13b2c:	ldr	r3, [pc, #76]	; 13b80 <__assert_fail@plt+0x22b4>
   13b30:	ldr	r2, [pc, #76]	; 13b84 <__assert_fail@plt+0x22b8>
   13b34:	mov	r1, #0
   13b38:	mov	r0, #31
   13b3c:	bl	161f8 <__assert_fail@plt+0x492c>
   13b40:	str	r0, [r4, #56]	; 0x38
   13b44:	adds	r0, r0, #0
   13b48:	movne	r0, #1
   13b4c:	add	sp, sp, #8
   13b50:	pop	{r4, pc}
   13b54:	mov	r0, #32
   13b58:	bl	1a030 <lchmod@@Base+0x3638>
   13b5c:	str	r0, [r4, #56]	; 0x38
   13b60:	cmp	r0, #0
   13b64:	moveq	r0, #0
   13b68:	beq	13b4c <__assert_fail@plt+0x2280>
   13b6c:	bl	1a1e8 <lchmod@@Base+0x37f0>
   13b70:	mov	r0, #1
   13b74:	b	13b4c <__assert_fail@plt+0x2280>
   13b78:	andeq	r0, r0, r2, lsl #2
   13b7c:	andeq	r3, r1, r8, asr #13
   13b80:	andeq	r3, r1, r0, lsr #14
   13b84:	andeq	r3, r1, r0, ror #14
   13b88:	push	{r4, lr}
   13b8c:	mov	ip, r1
   13b90:	ldr	r3, [r0, #48]	; 0x30
   13b94:	and	lr, r3, #16
   13b98:	ldr	r2, [pc, #48]	; 13bd0 <__assert_fail@plt+0x2304>
   13b9c:	ldr	r1, [pc, #48]	; 13bd4 <__assert_fail@plt+0x2308>
   13ba0:	cmp	lr, #0
   13ba4:	moveq	r1, r2
   13ba8:	tst	r3, #512	; 0x200
   13bac:	bne	13bbc <__assert_fail@plt+0x22f0>
   13bb0:	mov	r0, ip
   13bb4:	bl	1a5d0 <lchmod@@Base+0x3bd8>
   13bb8:	pop	{r4, pc}
   13bbc:	mov	r2, r1
   13bc0:	mov	r1, ip
   13bc4:	ldr	r0, [r0, #32]
   13bc8:	bl	17044 <lchmod@@Base+0x64c>
   13bcc:	pop	{r4, pc}
   13bd0:	andeq	r4, r8, r0, lsl #18
   13bd4:	andeq	ip, r8, r0, lsl #18
   13bd8:	push	{r4, r5, r6, lr}
   13bdc:	subs	r4, r0, #0
   13be0:	bne	13bfc <__assert_fail@plt+0x2330>
   13be4:	pop	{r4, r5, r6, pc}
   13be8:	mov	r0, r4
   13bec:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13bf0:	mov	r4, r5
   13bf4:	cmp	r5, #0
   13bf8:	beq	13c14 <__assert_fail@plt+0x2348>
   13bfc:	ldr	r5, [r4, #8]
   13c00:	ldr	r0, [r4, #12]
   13c04:	cmp	r0, #0
   13c08:	beq	13be8 <__assert_fail@plt+0x231c>
   13c0c:	bl	118b4 <closedir@plt>
   13c10:	b	13be8 <__assert_fail@plt+0x231c>
   13c14:	pop	{r4, r5, r6, pc}
   13c18:	push	{r4, lr}
   13c1c:	ldr	r2, [r0, #48]	; 0x30
   13c20:	ldr	r3, [pc, #40]	; 13c50 <__assert_fail@plt+0x2384>
   13c24:	and	r3, r3, r2
   13c28:	cmp	r3, #0
   13c2c:	beq	13c44 <__assert_fail@plt+0x2378>
   13c30:	ldr	r0, [r0, #56]	; 0x38
   13c34:	cmp	r0, #0
   13c38:	popeq	{r4, pc}
   13c3c:	bl	16388 <__assert_fail@plt+0x4abc>
   13c40:	pop	{r4, pc}
   13c44:	ldr	r0, [r0, #56]	; 0x38
   13c48:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13c4c:	pop	{r4, pc}
   13c50:	andeq	r0, r0, r2, lsl #2
   13c54:	push	{r4, lr}
   13c58:	mov	r4, r0
   13c5c:	mov	r0, r4
   13c60:	bl	16964 <__assert_fail@plt+0x5098>
   13c64:	cmp	r0, #0
   13c68:	bne	13c84 <__assert_fail@plt+0x23b8>
   13c6c:	mov	r0, r4
   13c70:	bl	169b0 <__assert_fail@plt+0x50e4>
   13c74:	cmp	r0, #0
   13c78:	blt	13c5c <__assert_fail@plt+0x2390>
   13c7c:	bl	11884 <close@plt>
   13c80:	b	13c5c <__assert_fail@plt+0x2390>
   13c84:	pop	{r4, pc}
   13c88:	push	{r4, r5, r6, r7, lr}
   13c8c:	sub	sp, sp, #116	; 0x74
   13c90:	ldr	r4, [r0, #44]	; 0x2c
   13c94:	ldr	r3, [r4, #48]	; 0x30
   13c98:	tst	r3, #512	; 0x200
   13c9c:	beq	13d7c <__assert_fail@plt+0x24b0>
   13ca0:	mov	r7, r1
   13ca4:	mov	r5, r0
   13ca8:	ldr	r6, [r4, #52]	; 0x34
   13cac:	cmp	r6, #0
   13cb0:	beq	13cd8 <__assert_fail@plt+0x240c>
   13cb4:	ldrd	r2, [r5, #64]	; 0x40
   13cb8:	add	r1, sp, #112	; 0x70
   13cbc:	strd	r2, [r1, #-104]!	; 0xffffff98
   13cc0:	mov	r0, r6
   13cc4:	bl	15f40 <__assert_fail@plt+0x4674>
   13cc8:	cmp	r0, #0
   13ccc:	beq	13d04 <__assert_fail@plt+0x2438>
   13cd0:	ldr	r0, [r0, #8]
   13cd4:	b	13d80 <__assert_fail@plt+0x24b4>
   13cd8:	ldr	r3, [pc, #184]	; 13d98 <__assert_fail@plt+0x24cc>
   13cdc:	str	r3, [sp]
   13ce0:	ldr	r3, [pc, #180]	; 13d9c <__assert_fail@plt+0x24d0>
   13ce4:	ldr	r2, [pc, #180]	; 13da0 <__assert_fail@plt+0x24d4>
   13ce8:	mov	r1, #0
   13cec:	mov	r0, #13
   13cf0:	bl	161f8 <__assert_fail@plt+0x492c>
   13cf4:	mov	r6, r0
   13cf8:	str	r0, [r4, #52]	; 0x34
   13cfc:	cmp	r0, #0
   13d00:	bne	13cb4 <__assert_fail@plt+0x23e8>
   13d04:	cmp	r7, #0
   13d08:	blt	13d88 <__assert_fail@plt+0x24bc>
   13d0c:	add	r1, sp, #24
   13d10:	mov	r0, r7
   13d14:	bl	11488 <fstatfs64@plt>
   13d18:	cmp	r0, #0
   13d1c:	bne	13d90 <__assert_fail@plt+0x24c4>
   13d20:	cmp	r6, #0
   13d24:	beq	13d64 <__assert_fail@plt+0x2498>
   13d28:	mov	r0, #16
   13d2c:	bl	1a030 <lchmod@@Base+0x3638>
   13d30:	subs	r4, r0, #0
   13d34:	beq	13d64 <__assert_fail@plt+0x2498>
   13d38:	ldrd	r2, [r5, #64]	; 0x40
   13d3c:	strd	r2, [r4]
   13d40:	ldr	r3, [sp, #24]
   13d44:	str	r3, [r4, #8]
   13d48:	mov	r1, r4
   13d4c:	mov	r0, r6
   13d50:	bl	16744 <__assert_fail@plt+0x4e78>
   13d54:	cmp	r0, #0
   13d58:	beq	13d70 <__assert_fail@plt+0x24a4>
   13d5c:	cmp	r4, r0
   13d60:	bne	13d6c <__assert_fail@plt+0x24a0>
   13d64:	ldr	r0, [sp, #24]
   13d68:	b	13d80 <__assert_fail@plt+0x24b4>
   13d6c:	bl	11878 <abort@plt>
   13d70:	mov	r0, r4
   13d74:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13d78:	b	13d64 <__assert_fail@plt+0x2498>
   13d7c:	mov	r0, #0
   13d80:	add	sp, sp, #116	; 0x74
   13d84:	pop	{r4, r5, r6, r7, pc}
   13d88:	mov	r0, #0
   13d8c:	b	13d80 <__assert_fail@plt+0x24b4>
   13d90:	mov	r0, #0
   13d94:	b	13d80 <__assert_fail@plt+0x24b4>
   13d98:	andeq	r3, r1, r8, asr #13
   13d9c:	muleq	r1, r8, r7
   13da0:	andeq	r3, r1, ip, ror r7
   13da4:	push	{r4, r5, r6, lr}
   13da8:	mov	r5, r0
   13dac:	mov	r4, r1
   13db0:	ldr	r2, [r0, #48]	; 0x30
   13db4:	ldr	r3, [pc, #176]	; 13e6c <__assert_fail@plt+0x25a0>
   13db8:	and	r3, r3, r2
   13dbc:	cmp	r3, #0
   13dc0:	beq	13e28 <__assert_fail@plt+0x255c>
   13dc4:	mov	r0, #24
   13dc8:	bl	1a030 <lchmod@@Base+0x3638>
   13dcc:	subs	r6, r0, #0
   13dd0:	beq	13e4c <__assert_fail@plt+0x2580>
   13dd4:	ldrd	r2, [r4, #64]	; 0x40
   13dd8:	strd	r2, [r6]
   13ddc:	ldrd	r2, [r4, #160]	; 0xa0
   13de0:	strd	r2, [r6, #8]
   13de4:	str	r4, [r6, #16]
   13de8:	mov	r1, r6
   13dec:	ldr	r0, [r5, #56]	; 0x38
   13df0:	bl	16744 <__assert_fail@plt+0x4e78>
   13df4:	mov	r5, r0
   13df8:	cmp	r6, r0
   13dfc:	beq	13e54 <__assert_fail@plt+0x2588>
   13e00:	mov	r0, r6
   13e04:	bl	136c8 <__assert_fail@plt+0x1dfc>
   13e08:	cmp	r5, #0
   13e0c:	beq	13e5c <__assert_fail@plt+0x2590>
   13e10:	ldr	r3, [r5, #16]
   13e14:	str	r3, [r4]
   13e18:	mov	r3, #2
   13e1c:	strh	r3, [r4, #56]	; 0x38
   13e20:	mov	r0, #1
   13e24:	pop	{r4, r5, r6, pc}
   13e28:	add	r1, r1, #64	; 0x40
   13e2c:	ldr	r0, [r0, #56]	; 0x38
   13e30:	bl	1a204 <lchmod@@Base+0x380c>
   13e34:	cmp	r0, #0
   13e38:	beq	13e64 <__assert_fail@plt+0x2598>
   13e3c:	str	r4, [r4]
   13e40:	mov	r3, #2
   13e44:	strh	r3, [r4, #56]	; 0x38
   13e48:	pop	{r4, r5, r6, pc}
   13e4c:	mov	r0, #0
   13e50:	pop	{r4, r5, r6, pc}
   13e54:	mov	r0, #1
   13e58:	pop	{r4, r5, r6, pc}
   13e5c:	mov	r0, #0
   13e60:	pop	{r4, r5, r6, pc}
   13e64:	mov	r0, #1
   13e68:	pop	{r4, r5, r6, pc}
   13e6c:	andeq	r0, r0, r2, lsl #2
   13e70:	push	{r4, r5, r6, lr}
   13e74:	mov	r5, r1
   13e78:	ldr	r1, [r0, #32]
   13e7c:	cmp	r1, r5
   13e80:	movne	r3, #0
   13e84:	moveq	r3, #1
   13e88:	cmn	r1, #100	; 0x64
   13e8c:	moveq	r3, #0
   13e90:	cmp	r3, #0
   13e94:	bne	13ed4 <__assert_fail@plt+0x2608>
   13e98:	mov	r4, r0
   13e9c:	cmp	r2, #0
   13ea0:	bne	13ed8 <__assert_fail@plt+0x260c>
   13ea4:	ldr	r3, [r0, #48]	; 0x30
   13ea8:	lsr	r3, r3, #2
   13eac:	eor	r3, r3, #1
   13eb0:	cmp	r1, #0
   13eb4:	movlt	r3, #0
   13eb8:	andge	r3, r3, #1
   13ebc:	cmp	r3, #0
   13ec0:	beq	13ecc <__assert_fail@plt+0x2600>
   13ec4:	mov	r0, r1
   13ec8:	bl	11884 <close@plt>
   13ecc:	str	r5, [r4, #32]
   13ed0:	pop	{r4, r5, r6, pc}
   13ed4:	bl	11878 <abort@plt>
   13ed8:	add	r0, r0, #60	; 0x3c
   13edc:	bl	1696c <__assert_fail@plt+0x50a0>
   13ee0:	cmp	r0, #0
   13ee4:	blt	13ecc <__assert_fail@plt+0x2600>
   13ee8:	bl	11884 <close@plt>
   13eec:	b	13ecc <__assert_fail@plt+0x2600>
   13ef0:	push	{r4, r5, r6, lr}
   13ef4:	mov	r4, r0
   13ef8:	ldr	r3, [r0, #48]	; 0x30
   13efc:	ands	r5, r3, #4
   13f00:	movne	r5, #0
   13f04:	bne	13f20 <__assert_fail@plt+0x2654>
   13f08:	tst	r3, #512	; 0x200
   13f0c:	bne	13f30 <__assert_fail@plt+0x2664>
   13f10:	ldr	r0, [r0, #28]
   13f14:	bl	117f4 <fchdir@plt>
   13f18:	adds	r5, r0, #0
   13f1c:	movne	r5, #1
   13f20:	add	r0, r4, #60	; 0x3c
   13f24:	bl	13c54 <__assert_fail@plt+0x2388>
   13f28:	mov	r0, r5
   13f2c:	pop	{r4, r5, r6, pc}
   13f30:	mov	r2, #1
   13f34:	mvn	r1, #99	; 0x63
   13f38:	bl	13e70 <__assert_fail@plt+0x25a4>
   13f3c:	b	13f20 <__assert_fail@plt+0x2654>
   13f40:	push	{r4, r5, r6, r7, r8, r9, lr}
   13f44:	sub	sp, sp, #108	; 0x6c
   13f48:	mov	r4, r0
   13f4c:	mov	r6, r1
   13f50:	mov	r5, r2
   13f54:	subs	r9, r3, #0
   13f58:	beq	140f4 <__assert_fail@plt+0x2828>
   13f5c:	ldr	r1, [pc, #448]	; 14124 <__assert_fail@plt+0x2858>
   13f60:	mov	r0, r9
   13f64:	bl	114d0 <strcmp@plt>
   13f68:	cmp	r0, #0
   13f6c:	bne	140f4 <__assert_fail@plt+0x2828>
   13f70:	ldr	r3, [r4, #48]	; 0x30
   13f74:	tst	r3, #4
   13f78:	bne	14100 <__assert_fail@plt+0x2834>
   13f7c:	cmp	r5, #0
   13f80:	bge	14090 <__assert_fail@plt+0x27c4>
   13f84:	tst	r3, #512	; 0x200
   13f88:	beq	13fa0 <__assert_fail@plt+0x26d4>
   13f8c:	add	r7, r4, #60	; 0x3c
   13f90:	mov	r0, r7
   13f94:	bl	16964 <__assert_fail@plt+0x5098>
   13f98:	cmp	r0, #0
   13f9c:	beq	13fc0 <__assert_fail@plt+0x26f4>
   13fa0:	mov	r7, #1
   13fa4:	mov	r1, r9
   13fa8:	mov	r0, r4
   13fac:	bl	13b88 <__assert_fail@plt+0x22bc>
   13fb0:	subs	r8, r0, #0
   13fb4:	bge	14010 <__assert_fail@plt+0x2744>
   13fb8:	mvn	r4, #0
   13fbc:	b	1407c <__assert_fail@plt+0x27b0>
   13fc0:	mov	r0, r7
   13fc4:	bl	169b0 <__assert_fail@plt+0x50e4>
   13fc8:	subs	r8, r0, #0
   13fcc:	blt	13fa0 <__assert_fail@plt+0x26d4>
   13fd0:	ldr	r3, [r4, #48]	; 0x30
   13fd4:	tst	r3, #2
   13fd8:	bne	1409c <__assert_fail@plt+0x27d0>
   13fdc:	mov	r5, r8
   13fe0:	mov	r7, #1
   13fe4:	ldr	r3, [r4, #48]	; 0x30
   13fe8:	tst	r3, #512	; 0x200
   13fec:	bne	140c0 <__assert_fail@plt+0x27f4>
   13ff0:	mov	r0, r8
   13ff4:	bl	117f4 <fchdir@plt>
   13ff8:	mov	r4, r0
   13ffc:	b	14074 <__assert_fail@plt+0x27a8>
   14000:	cmp	r5, #0
   14004:	movge	r8, r5
   14008:	movge	r7, #0
   1400c:	blt	14088 <__assert_fail@plt+0x27bc>
   14010:	ldr	r3, [r4, #48]	; 0x30
   14014:	tst	r3, #2
   14018:	bne	14038 <__assert_fail@plt+0x276c>
   1401c:	cmp	r9, #0
   14020:	beq	13fe4 <__assert_fail@plt+0x2718>
   14024:	ldr	r1, [pc, #248]	; 14124 <__assert_fail@plt+0x2858>
   14028:	mov	r0, r9
   1402c:	bl	114d0 <strcmp@plt>
   14030:	cmp	r0, #0
   14034:	bne	13fe4 <__assert_fail@plt+0x2718>
   14038:	mov	r2, sp
   1403c:	mov	r1, r8
   14040:	mov	r0, #3
   14044:	bl	115d8 <__fxstat64@plt>
   14048:	cmp	r0, #0
   1404c:	bne	14070 <__assert_fail@plt+0x27a4>
   14050:	ldrd	r0, [r6, #64]	; 0x40
   14054:	ldrd	r2, [sp]
   14058:	cmp	r1, r3
   1405c:	cmpeq	r0, r2
   14060:	beq	140a8 <__assert_fail@plt+0x27dc>
   14064:	bl	1171c <__errno_location@plt>
   14068:	mov	r3, #2
   1406c:	str	r3, [r0]
   14070:	mvn	r4, #0
   14074:	cmp	r5, #0
   14078:	blt	140d8 <__assert_fail@plt+0x280c>
   1407c:	mov	r0, r4
   14080:	add	sp, sp, #108	; 0x6c
   14084:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14088:	mov	r7, #0
   1408c:	b	13fa4 <__assert_fail@plt+0x26d8>
   14090:	mov	r8, r5
   14094:	mov	r7, #1
   14098:	b	14010 <__assert_fail@plt+0x2744>
   1409c:	mov	r5, r8
   140a0:	mov	r7, #1
   140a4:	b	14038 <__assert_fail@plt+0x276c>
   140a8:	ldrd	r0, [r6, #160]	; 0xa0
   140ac:	ldrd	r2, [sp, #96]	; 0x60
   140b0:	cmp	r1, r3
   140b4:	cmpeq	r0, r2
   140b8:	bne	14064 <__assert_fail@plt+0x2798>
   140bc:	b	13fe4 <__assert_fail@plt+0x2718>
   140c0:	eor	r2, r7, #1
   140c4:	mov	r1, r8
   140c8:	mov	r0, r4
   140cc:	bl	13e70 <__assert_fail@plt+0x25a4>
   140d0:	mov	r4, #0
   140d4:	b	1407c <__assert_fail@plt+0x27b0>
   140d8:	bl	1171c <__errno_location@plt>
   140dc:	mov	r5, r0
   140e0:	ldr	r6, [r0]
   140e4:	mov	r0, r8
   140e8:	bl	11884 <close@plt>
   140ec:	str	r6, [r5]
   140f0:	b	1407c <__assert_fail@plt+0x27b0>
   140f4:	ldr	r3, [r4, #48]	; 0x30
   140f8:	tst	r3, #4
   140fc:	beq	14000 <__assert_fail@plt+0x2734>
   14100:	mvn	r2, r5
   14104:	lsr	r2, r2, #31
   14108:	ands	r3, r2, r3, lsr #9
   1410c:	moveq	r4, #0
   14110:	beq	1407c <__assert_fail@plt+0x27b0>
   14114:	mov	r0, r5
   14118:	bl	11884 <close@plt>
   1411c:	mov	r4, #0
   14120:	b	1407c <__assert_fail@plt+0x27b0>
   14124:	muleq	r1, r4, r8
   14128:	push	{r4, r5, lr}
   1412c:	sub	sp, sp, #28
   14130:	ldr	r2, [r0, #48]	; 0x30
   14134:	ldr	r3, [pc, #172]	; 141e8 <__assert_fail@plt+0x291c>
   14138:	and	r3, r3, r2
   1413c:	cmp	r3, #0
   14140:	bne	14188 <__assert_fail@plt+0x28bc>
   14144:	ldr	ip, [r1, #4]
   14148:	cmp	ip, #0
   1414c:	beq	14180 <__assert_fail@plt+0x28b4>
   14150:	ldr	r3, [ip, #48]	; 0x30
   14154:	cmp	r3, #0
   14158:	blt	14180 <__assert_fail@plt+0x28b4>
   1415c:	ldr	lr, [r0, #56]	; 0x38
   14160:	ldrd	r2, [lr, #16]
   14164:	orrs	r3, r2, r3
   14168:	beq	141b8 <__assert_fail@plt+0x28ec>
   1416c:	ldrd	r4, [lr]
   14170:	ldrd	r2, [r1, #160]	; 0xa0
   14174:	cmp	r5, r3
   14178:	cmpeq	r4, r2
   1417c:	beq	141bc <__assert_fail@plt+0x28f0>
   14180:	add	sp, sp, #28
   14184:	pop	{r4, r5, pc}
   14188:	ldrd	r2, [r1, #64]	; 0x40
   1418c:	strd	r2, [sp]
   14190:	ldrd	r2, [r1, #160]	; 0xa0
   14194:	strd	r2, [sp, #8]
   14198:	mov	r1, sp
   1419c:	ldr	r0, [r0, #56]	; 0x38
   141a0:	bl	1677c <__assert_fail@plt+0x4eb0>
   141a4:	cmp	r0, #0
   141a8:	beq	141b4 <__assert_fail@plt+0x28e8>
   141ac:	bl	136c8 <__assert_fail@plt+0x1dfc>
   141b0:	b	14180 <__assert_fail@plt+0x28b4>
   141b4:	bl	11878 <abort@plt>
   141b8:	bl	11878 <abort@plt>
   141bc:	ldrd	r2, [lr, #8]
   141c0:	ldrd	r4, [r1, #64]	; 0x40
   141c4:	cmp	r3, r5
   141c8:	cmpeq	r2, r4
   141cc:	bne	14180 <__assert_fail@plt+0x28b4>
   141d0:	ldrd	r2, [ip, #64]	; 0x40
   141d4:	strd	r2, [lr, #8]
   141d8:	ldr	r3, [r0, #56]	; 0x38
   141dc:	ldrd	r0, [ip, #160]	; 0xa0
   141e0:	strd	r0, [r3]
   141e4:	b	14180 <__assert_fail@plt+0x28b4>
   141e8:	andeq	r0, r0, r2, lsl #2
   141ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f0:	sub	sp, sp, #68	; 0x44
   141f4:	mov	r5, r0
   141f8:	str	r1, [sp, #40]	; 0x28
   141fc:	ldr	r9, [r0]
   14200:	ldr	r3, [r9, #12]
   14204:	str	r3, [sp, #44]	; 0x2c
   14208:	cmp	r3, #0
   1420c:	beq	1430c <__assert_fail@plt+0x2a40>
   14210:	mov	r0, r3
   14214:	bl	117e8 <dirfd@plt>
   14218:	str	r0, [sp, #60]	; 0x3c
   1421c:	cmp	r0, #0
   14220:	blt	142c8 <__assert_fail@plt+0x29fc>
   14224:	ldr	r3, [r5, #44]	; 0x2c
   14228:	cmp	r3, #0
   1422c:	ldr	r3, [pc, #2472]	; 14bdc <__assert_fail@plt+0x3310>
   14230:	mvnne	r3, #0
   14234:	str	r3, [sp, #24]
   14238:	mov	r3, #1
   1423c:	str	r3, [sp, #52]	; 0x34
   14240:	ldr	r3, [r9, #40]	; 0x28
   14244:	mov	r1, r3
   14248:	sub	r3, r3, #1
   1424c:	ldr	r2, [r9, #28]
   14250:	ldrb	r2, [r2, r3]
   14254:	cmp	r2, #47	; 0x2f
   14258:	moveq	r1, r3
   1425c:	str	r1, [sp, #32]
   14260:	ldr	r3, [r5, #48]	; 0x30
   14264:	tst	r3, #4
   14268:	ldrne	r3, [r5, #24]
   1426c:	addne	r2, r3, r1
   14270:	addne	r2, r2, #1
   14274:	strne	r2, [sp, #28]
   14278:	movne	r2, #47	; 0x2f
   1427c:	strbne	r2, [r3, r1]
   14280:	moveq	r3, #0
   14284:	streq	r3, [sp, #28]
   14288:	ldr	r3, [sp, #32]
   1428c:	add	r3, r3, #1
   14290:	str	r3, [sp, #12]
   14294:	ldr	fp, [r5, #36]	; 0x24
   14298:	sub	fp, fp, r3
   1429c:	ldr	r3, [r9, #48]	; 0x30
   142a0:	add	r3, r3, #1
   142a4:	str	r3, [sp, #20]
   142a8:	mov	r3, #0
   142ac:	str	r3, [sp, #48]	; 0x30
   142b0:	str	r3, [sp, #36]	; 0x24
   142b4:	str	r3, [sp, #4]
   142b8:	mov	r8, r3
   142bc:	str	r3, [sp, #8]
   142c0:	mov	sl, r3
   142c4:	b	1483c <__assert_fail@plt+0x2f70>
   142c8:	ldr	r0, [r9, #12]
   142cc:	bl	118b4 <closedir@plt>
   142d0:	mov	r3, #0
   142d4:	str	r3, [r9, #12]
   142d8:	ldr	r3, [sp, #40]	; 0x28
   142dc:	cmp	r3, #3
   142e0:	movne	r3, #0
   142e4:	strne	r3, [sp, #8]
   142e8:	bne	146ac <__assert_fail@plt+0x2de0>
   142ec:	mov	r3, #4
   142f0:	strh	r3, [r9, #56]	; 0x38
   142f4:	bl	1171c <__errno_location@plt>
   142f8:	ldr	r3, [r0]
   142fc:	str	r3, [r9, #32]
   14300:	mov	r3, #0
   14304:	str	r3, [sp, #8]
   14308:	b	146ac <__assert_fail@plt+0x2de0>
   1430c:	ldr	r3, [r0, #48]	; 0x30
   14310:	and	r2, r3, #516	; 0x204
   14314:	cmp	r2, #512	; 0x200
   14318:	ldreq	r0, [r0, #32]
   1431c:	mvnne	r0, #99	; 0x63
   14320:	ldr	r1, [r9, #24]
   14324:	ands	r2, r3, #16
   14328:	beq	14348 <__assert_fail@plt+0x2a7c>
   1432c:	tst	r3, #1
   14330:	moveq	r2, #32768	; 0x8000
   14334:	beq	14348 <__assert_fail@plt+0x2a7c>
   14338:	ldr	r2, [r9, #48]	; 0x30
   1433c:	cmp	r2, #0
   14340:	movne	r2, #32768	; 0x8000
   14344:	moveq	r2, #0
   14348:	add	r3, sp, #60	; 0x3c
   1434c:	bl	17080 <lchmod@@Base+0x688>
   14350:	str	r0, [r9, #12]
   14354:	cmp	r0, #0
   14358:	beq	1444c <__assert_fail@plt+0x2b80>
   1435c:	ldrh	r3, [r9, #56]	; 0x38
   14360:	cmp	r3, #11
   14364:	beq	14480 <__assert_fail@plt+0x2bb4>
   14368:	ldr	r3, [r5, #48]	; 0x30
   1436c:	tst	r3, #256	; 0x100
   14370:	bne	14498 <__assert_fail@plt+0x2bcc>
   14374:	ldr	r3, [r5, #44]	; 0x2c
   14378:	cmp	r3, #0
   1437c:	ldr	r3, [pc, #2136]	; 14bdc <__assert_fail@plt+0x3310>
   14380:	mvnne	r3, #0
   14384:	str	r3, [sp, #24]
   14388:	ldr	r3, [sp, #40]	; 0x28
   1438c:	cmp	r3, #2
   14390:	beq	14588 <__assert_fail@plt+0x2cbc>
   14394:	ldr	r3, [r5, #48]	; 0x30
   14398:	and	r3, r3, #56	; 0x38
   1439c:	cmp	r3, #24
   143a0:	beq	144e0 <__assert_fail@plt+0x2c14>
   143a4:	ldr	r3, [sp, #40]	; 0x28
   143a8:	cmp	r3, #3
   143ac:	movne	r6, #0
   143b0:	moveq	r6, #1
   143b4:	mov	r4, #1
   143b8:	ldr	r3, [r5, #48]	; 0x30
   143bc:	tst	r3, #512	; 0x200
   143c0:	bne	14570 <__assert_fail@plt+0x2ca4>
   143c4:	ldr	r2, [sp, #60]	; 0x3c
   143c8:	cmp	r2, #0
   143cc:	blt	143f0 <__assert_fail@plt+0x2b24>
   143d0:	mov	r3, #0
   143d4:	mov	r1, r9
   143d8:	mov	r0, r5
   143dc:	bl	13f40 <__assert_fail@plt+0x2674>
   143e0:	cmp	r0, #0
   143e4:	moveq	r3, #1
   143e8:	streq	r3, [sp, #52]	; 0x34
   143ec:	beq	14240 <__assert_fail@plt+0x2974>
   143f0:	tst	r4, r6
   143f4:	beq	14404 <__assert_fail@plt+0x2b38>
   143f8:	bl	1171c <__errno_location@plt>
   143fc:	ldr	r3, [r0]
   14400:	str	r3, [r9, #32]
   14404:	ldrh	r3, [r9, #58]	; 0x3a
   14408:	orr	r3, r3, #1
   1440c:	strh	r3, [r9, #58]	; 0x3a
   14410:	ldr	r0, [r9, #12]
   14414:	bl	118b4 <closedir@plt>
   14418:	mov	r3, #0
   1441c:	str	r3, [r9, #12]
   14420:	ldr	r3, [r5, #48]	; 0x30
   14424:	tst	r3, #512	; 0x200
   14428:	beq	1443c <__assert_fail@plt+0x2b70>
   1442c:	ldr	r0, [sp, #60]	; 0x3c
   14430:	cmp	r0, #0
   14434:	blt	1443c <__assert_fail@plt+0x2b70>
   14438:	bl	11884 <close@plt>
   1443c:	mov	r3, #0
   14440:	str	r3, [r9, #12]
   14444:	str	r3, [sp, #52]	; 0x34
   14448:	b	14240 <__assert_fail@plt+0x2974>
   1444c:	ldr	r3, [sp, #40]	; 0x28
   14450:	cmp	r3, #3
   14454:	movne	r3, #0
   14458:	strne	r3, [sp, #8]
   1445c:	bne	146ac <__assert_fail@plt+0x2de0>
   14460:	mov	r3, #4
   14464:	strh	r3, [r9, #56]	; 0x38
   14468:	bl	1171c <__errno_location@plt>
   1446c:	ldr	r3, [r0]
   14470:	str	r3, [r9, #32]
   14474:	mov	r3, #0
   14478:	str	r3, [sp, #8]
   1447c:	b	146ac <__assert_fail@plt+0x2de0>
   14480:	mov	r2, #0
   14484:	mov	r1, r9
   14488:	mov	r0, r5
   1448c:	bl	13864 <__assert_fail@plt+0x1f98>
   14490:	strh	r0, [r9, #56]	; 0x38
   14494:	b	14374 <__assert_fail@plt+0x2aa8>
   14498:	mov	r1, r9
   1449c:	mov	r0, r5
   144a0:	bl	14128 <__assert_fail@plt+0x285c>
   144a4:	mov	r2, #0
   144a8:	mov	r1, r9
   144ac:	mov	r0, r5
   144b0:	bl	13864 <__assert_fail@plt+0x1f98>
   144b4:	mov	r1, r9
   144b8:	mov	r0, r5
   144bc:	bl	13da4 <__assert_fail@plt+0x24d8>
   144c0:	cmp	r0, #0
   144c4:	bne	14374 <__assert_fail@plt+0x2aa8>
   144c8:	bl	1171c <__errno_location@plt>
   144cc:	mov	r3, #12
   144d0:	str	r3, [r0]
   144d4:	mov	r3, #0
   144d8:	str	r3, [sp, #8]
   144dc:	b	146ac <__assert_fail@plt+0x2de0>
   144e0:	ldr	r3, [r9, #84]	; 0x54
   144e4:	cmp	r3, #2
   144e8:	bne	143a4 <__assert_fail@plt+0x2ad8>
   144ec:	ldr	r1, [sp, #60]	; 0x3c
   144f0:	mov	r0, r9
   144f4:	bl	13c88 <__assert_fail@plt+0x23bc>
   144f8:	ldr	r3, [pc, #1760]	; 14be0 <__assert_fail@plt+0x3314>
   144fc:	cmp	r0, r3
   14500:	beq	14558 <__assert_fail@plt+0x2c8c>
   14504:	bgt	14540 <__assert_fail@plt+0x2c74>
   14508:	ldr	r3, [pc, #1748]	; 14be4 <__assert_fail@plt+0x3318>
   1450c:	cmp	r0, r3
   14510:	beq	14558 <__assert_fail@plt+0x2c8c>
   14514:	cmp	r0, #0
   14518:	beq	14558 <__assert_fail@plt+0x2c8c>
   1451c:	ldr	r3, [sp, #40]	; 0x28
   14520:	cmp	r3, #3
   14524:	moveq	r6, #1
   14528:	movne	r6, #0
   1452c:	movne	r3, #0
   14530:	strne	r3, [sp, #52]	; 0x34
   14534:	bne	14240 <__assert_fail@plt+0x2974>
   14538:	mov	r4, #0
   1453c:	b	143b8 <__assert_fail@plt+0x2aec>
   14540:	ldr	r3, [pc, #1696]	; 14be8 <__assert_fail@plt+0x331c>
   14544:	cmp	r0, r3
   14548:	beq	14558 <__assert_fail@plt+0x2c8c>
   1454c:	ldr	r3, [pc, #1688]	; 14bec <__assert_fail@plt+0x3320>
   14550:	cmp	r0, r3
   14554:	bne	1451c <__assert_fail@plt+0x2c50>
   14558:	ldr	r3, [sp, #40]	; 0x28
   1455c:	cmp	r3, #3
   14560:	movne	r6, #0
   14564:	moveq	r6, #1
   14568:	mov	r4, #1
   1456c:	b	143b8 <__assert_fail@plt+0x2aec>
   14570:	mov	r2, #3
   14574:	ldr	r1, [pc, #1652]	; 14bf0 <__assert_fail@plt+0x3324>
   14578:	ldr	r0, [sp, #60]	; 0x3c
   1457c:	bl	1a378 <lchmod@@Base+0x3980>
   14580:	str	r0, [sp, #60]	; 0x3c
   14584:	b	143c4 <__assert_fail@plt+0x2af8>
   14588:	mov	r3, #0
   1458c:	str	r3, [sp, #52]	; 0x34
   14590:	b	14240 <__assert_fail@plt+0x2974>
   14594:	ldr	r3, [sp, #16]
   14598:	ldr	r3, [r3]
   1459c:	cmp	r3, #0
   145a0:	beq	145cc <__assert_fail@plt+0x2d00>
   145a4:	str	r3, [r9, #32]
   145a8:	ldr	r3, [sp, #44]	; 0x2c
   145ac:	cmp	r8, #0
   145b0:	cmpeq	r3, #0
   145b4:	movne	r3, #1
   145b8:	moveq	r3, #0
   145bc:	cmp	r3, #0
   145c0:	movne	r3, #7
   145c4:	moveq	r3, #4
   145c8:	strh	r3, [r9, #56]	; 0x38
   145cc:	ldr	r0, [r9, #12]
   145d0:	cmp	r0, #0
   145d4:	beq	145e4 <__assert_fail@plt+0x2d18>
   145d8:	bl	118b4 <closedir@plt>
   145dc:	mov	r3, #0
   145e0:	str	r3, [r9, #12]
   145e4:	ldr	r3, [sp, #36]	; 0x24
   145e8:	cmp	r3, #0
   145ec:	bne	14a2c <__assert_fail@plt+0x3160>
   145f0:	ldr	r3, [r5, #48]	; 0x30
   145f4:	tst	r3, #4
   145f8:	beq	14624 <__assert_fail@plt+0x2d58>
   145fc:	ldr	r3, [r5, #36]	; 0x24
   14600:	ldr	r2, [sp, #12]
   14604:	cmp	r8, #0
   14608:	cmpne	r3, r2
   1460c:	ldreq	r3, [sp, #28]
   14610:	subeq	r3, r3, #1
   14614:	streq	r3, [sp, #28]
   14618:	mov	r3, #0
   1461c:	ldr	r2, [sp, #28]
   14620:	strb	r3, [r2]
   14624:	ldr	r3, [sp, #52]	; 0x34
   14628:	ldr	r2, [sp, #44]	; 0x2c
   1462c:	cmp	r2, #0
   14630:	movne	r3, #0
   14634:	andeq	r3, r3, #1
   14638:	cmp	r3, #0
   1463c:	beq	14674 <__assert_fail@plt+0x2da8>
   14640:	ldr	r3, [sp, #40]	; 0x28
   14644:	cmp	r8, #0
   14648:	cmpne	r3, #1
   1464c:	bne	14674 <__assert_fail@plt+0x2da8>
   14650:	ldr	r3, [r9, #48]	; 0x30
   14654:	cmp	r3, #0
   14658:	bne	14aac <__assert_fail@plt+0x31e0>
   1465c:	mov	r0, r5
   14660:	bl	13ef0 <__assert_fail@plt+0x2624>
   14664:	adds	r0, r0, #0
   14668:	movne	r0, #1
   1466c:	cmp	r0, #0
   14670:	bne	14acc <__assert_fail@plt+0x3200>
   14674:	cmp	r8, #0
   14678:	beq	14af4 <__assert_fail@plt+0x3228>
   1467c:	ldr	r3, [sp, #48]	; 0x30
   14680:	cmp	r3, #0
   14684:	bne	14b2c <__assert_fail@plt+0x3260>
   14688:	ldr	r3, [r5, #44]	; 0x2c
   1468c:	cmp	r3, #0
   14690:	cmpne	r8, #1
   14694:	bls	146ac <__assert_fail@plt+0x2de0>
   14698:	mov	r2, r8
   1469c:	ldr	r1, [sp, #8]
   146a0:	mov	r0, r5
   146a4:	bl	139bc <__assert_fail@plt+0x20f0>
   146a8:	str	r0, [sp, #8]
   146ac:	ldr	r0, [sp, #8]
   146b0:	add	sp, sp, #68	; 0x44
   146b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b8:	ldrb	r3, [r7, #20]
   146bc:	cmp	r3, #0
   146c0:	beq	14a24 <__assert_fail@plt+0x3158>
   146c4:	ldrh	r3, [r7, #20]
   146c8:	cmp	r3, #46	; 0x2e
   146cc:	bne	1487c <__assert_fail@plt+0x2fb0>
   146d0:	ldr	r4, [sp, #4]
   146d4:	b	14838 <__assert_fail@plt+0x2f6c>
   146d8:	ldr	fp, [r5, #24]
   146dc:	ldr	r3, [sp, #32]
   146e0:	add	r1, r3, #2
   146e4:	add	r1, r1, r6
   146e8:	mov	r0, r5
   146ec:	bl	137f4 <__assert_fail@plt+0x1f28>
   146f0:	cmp	r0, #0
   146f4:	beq	1472c <__assert_fail@plt+0x2e60>
   146f8:	ldr	r3, [r5, #24]
   146fc:	cmp	fp, r3
   14700:	beq	14774 <__assert_fail@plt+0x2ea8>
   14704:	ldr	r2, [r5, #48]	; 0x30
   14708:	tst	r2, #4
   1470c:	ldrne	r2, [sp, #12]
   14710:	addne	r3, r3, r2
   14714:	strne	r3, [sp, #28]
   14718:	ldr	fp, [r5, #36]	; 0x24
   1471c:	ldr	r3, [sp, #12]
   14720:	sub	fp, fp, r3
   14724:	str	r0, [sp, #36]	; 0x24
   14728:	b	148ac <__assert_fail@plt+0x2fe0>
   1472c:	ldr	r7, [sp, #16]
   14730:	ldr	r6, [r7]
   14734:	mov	r0, r4
   14738:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1473c:	ldr	r0, [sp, #8]
   14740:	bl	13bd8 <__assert_fail@plt+0x230c>
   14744:	ldr	r0, [r9, #12]
   14748:	bl	118b4 <closedir@plt>
   1474c:	mov	r2, #0
   14750:	str	r2, [r9, #12]
   14754:	mov	r3, #7
   14758:	strh	r3, [r9, #56]	; 0x38
   1475c:	ldr	r3, [r5, #48]	; 0x30
   14760:	orr	r3, r3, #8192	; 0x2000
   14764:	str	r3, [r5, #48]	; 0x30
   14768:	str	r6, [r7]
   1476c:	str	r2, [sp, #8]
   14770:	b	146ac <__assert_fail@plt+0x2de0>
   14774:	ldr	r0, [sp, #36]	; 0x24
   14778:	b	14718 <__assert_fail@plt+0x2e4c>
   1477c:	mov	r0, r4
   14780:	bl	136c8 <__assert_fail@plt+0x1dfc>
   14784:	ldr	r0, [sp, #8]
   14788:	bl	13bd8 <__assert_fail@plt+0x230c>
   1478c:	ldr	r0, [r9, #12]
   14790:	bl	118b4 <closedir@plt>
   14794:	mov	r2, #0
   14798:	str	r2, [r9, #12]
   1479c:	mov	r3, #7
   147a0:	strh	r3, [r9, #56]	; 0x38
   147a4:	ldr	r3, [r5, #48]	; 0x30
   147a8:	orr	r3, r3, #8192	; 0x2000
   147ac:	str	r3, [r5, #48]	; 0x30
   147b0:	mov	r3, #36	; 0x24
   147b4:	ldr	r1, [sp, #16]
   147b8:	str	r3, [r1]
   147bc:	str	r2, [sp, #8]
   147c0:	b	146ac <__assert_fail@plt+0x2de0>
   147c4:	ldr	r3, [r4, #28]
   147c8:	str	r3, [r4, #24]
   147cc:	ldr	r2, [r4, #52]	; 0x34
   147d0:	add	r2, r2, #1
   147d4:	add	r1, r4, #168	; 0xa8
   147d8:	ldr	r0, [sp, #28]
   147dc:	bl	11500 <memmove@plt>
   147e0:	b	148e8 <__assert_fail@plt+0x301c>
   147e4:	mov	r3, sl
   147e8:	mov	r2, #16384	; 0x4000
   147ec:	str	r2, [r4, #80]	; 0x50
   147f0:	cmp	r3, #0
   147f4:	movne	r2, #1
   147f8:	moveq	r2, #2
   147fc:	mov	r3, #0
   14800:	strd	r2, [r4, #112]	; 0x70
   14804:	str	sl, [r4, #8]
   14808:	ldr	r3, [sp, #8]
   1480c:	cmp	r3, #0
   14810:	ldrne	r3, [sp, #4]
   14814:	strne	r4, [r3, #8]
   14818:	streq	r4, [sp, #8]
   1481c:	ldr	r3, [pc, #976]	; 14bf4 <__assert_fail@plt+0x3328>
   14820:	cmp	r8, r3
   14824:	beq	149d8 <__assert_fail@plt+0x310c>
   14828:	add	r8, r8, #1
   1482c:	ldr	r3, [sp, #24]
   14830:	cmp	r8, r3
   14834:	bcs	145e4 <__assert_fail@plt+0x2d18>
   14838:	str	r4, [sp, #4]
   1483c:	ldr	r3, [r9, #12]
   14840:	cmp	r3, #0
   14844:	beq	145e4 <__assert_fail@plt+0x2d18>
   14848:	bl	1171c <__errno_location@plt>
   1484c:	str	r0, [sp, #16]
   14850:	str	sl, [r0]
   14854:	ldr	r0, [r9, #12]
   14858:	bl	117c4 <readdir64@plt>
   1485c:	subs	r7, r0, #0
   14860:	beq	14594 <__assert_fail@plt+0x2cc8>
   14864:	ldr	r3, [r5, #48]	; 0x30
   14868:	tst	r3, #32
   1486c:	bne	1487c <__assert_fail@plt+0x2fb0>
   14870:	ldrb	r3, [r7, #19]
   14874:	cmp	r3, #46	; 0x2e
   14878:	beq	146b8 <__assert_fail@plt+0x2dec>
   1487c:	add	r4, r7, #19
   14880:	mov	r0, r4
   14884:	bl	116e0 <strlen@plt>
   14888:	mov	r6, r0
   1488c:	mov	r2, r0
   14890:	mov	r1, r4
   14894:	mov	r0, r5
   14898:	bl	13a90 <__assert_fail@plt+0x21c4>
   1489c:	subs	r4, r0, #0
   148a0:	beq	1472c <__assert_fail@plt+0x2e60>
   148a4:	cmp	fp, r6
   148a8:	bls	146d8 <__assert_fail@plt+0x2e0c>
   148ac:	ldr	r3, [sp, #12]
   148b0:	adds	r6, r3, r6
   148b4:	bcs	1477c <__assert_fail@plt+0x2eb0>
   148b8:	ldr	r3, [sp, #20]
   148bc:	str	r3, [r4, #48]	; 0x30
   148c0:	ldr	r3, [r5]
   148c4:	str	r3, [r4, #4]
   148c8:	str	r6, [r4, #40]	; 0x28
   148cc:	ldrd	r2, [r7]
   148d0:	strd	r2, [r4, #160]	; 0xa0
   148d4:	ldr	r3, [r5, #48]	; 0x30
   148d8:	tst	r3, #4
   148dc:	addeq	r3, r4, #168	; 0xa8
   148e0:	streq	r3, [r4, #24]
   148e4:	bne	147c4 <__assert_fail@plt+0x2ef8>
   148e8:	ldr	r3, [r5, #44]	; 0x2c
   148ec:	cmp	r3, #0
   148f0:	beq	14900 <__assert_fail@plt+0x3034>
   148f4:	ldr	r3, [r5, #48]	; 0x30
   148f8:	tst	r3, #1024	; 0x400
   148fc:	beq	149c0 <__assert_fail@plt+0x30f4>
   14900:	ldr	r3, [r5, #48]	; 0x30
   14904:	tst	r3, #8
   14908:	beq	14b90 <__assert_fail@plt+0x32c4>
   1490c:	ldrb	r2, [r7, #18]
   14910:	tst	r2, #251	; 0xfb
   14914:	beq	14b90 <__assert_fail@plt+0x32c4>
   14918:	lsr	r3, r3, #4
   1491c:	and	r3, r3, #1
   14920:	cmp	r2, #10
   14924:	orrne	r3, r3, #1
   14928:	cmp	r3, #0
   1492c:	beq	14b90 <__assert_fail@plt+0x32c4>
   14930:	mov	r2, #11
   14934:	strh	r2, [r4, #56]	; 0x38
   14938:	ldrb	r2, [r7, #18]
   1493c:	sub	r2, r2, #1
   14940:	cmp	r2, #11
   14944:	ldrls	pc, [pc, r2, lsl #2]
   14948:	b	149b0 <__assert_fail@plt+0x30e4>
   1494c:	andeq	r4, r1, r0, lsl #19
   14950:			; <UNDEFINED> instruction: 0x000149b8
   14954:			; <UNDEFINED> instruction: 0x000149b0
   14958:	andeq	r4, r1, r8, ror #15
   1495c:			; <UNDEFINED> instruction: 0x000149b0
   14960:	andeq	r4, r1, r4, asr fp
   14964:			; <UNDEFINED> instruction: 0x000149b0
   14968:	muleq	r1, r8, r9
   1496c:			; <UNDEFINED> instruction: 0x000149b0
   14970:	andeq	r4, r1, ip, lsl #19
   14974:			; <UNDEFINED> instruction: 0x000149b0
   14978:	andeq	r4, r1, r4, lsr #19
   1497c:	mov	r3, sl
   14980:	mov	r2, #4096	; 0x1000
   14984:	b	147ec <__assert_fail@plt+0x2f20>
   14988:	mov	r3, sl
   1498c:	mov	r2, #40960	; 0xa000
   14990:	b	147ec <__assert_fail@plt+0x2f20>
   14994:	mov	r3, sl
   14998:	mov	r2, #32768	; 0x8000
   1499c:	b	147ec <__assert_fail@plt+0x2f20>
   149a0:	mov	r3, sl
   149a4:	mov	r2, #49152	; 0xc000
   149a8:	b	147ec <__assert_fail@plt+0x2f20>
   149ac:	mov	r3, sl
   149b0:	mov	r2, sl
   149b4:	b	147ec <__assert_fail@plt+0x2f20>
   149b8:	mov	r2, #8192	; 0x2000
   149bc:	b	147ec <__assert_fail@plt+0x2f20>
   149c0:	mov	r2, sl
   149c4:	mov	r1, r4
   149c8:	mov	r0, r5
   149cc:	bl	13864 <__assert_fail@plt+0x1f98>
   149d0:	strh	r0, [r4, #56]	; 0x38
   149d4:	b	14804 <__assert_fail@plt+0x2f38>
   149d8:	ldr	r3, [r5, #44]	; 0x2c
   149dc:	cmp	r3, #0
   149e0:	bne	14828 <__assert_fail@plt+0x2f5c>
   149e4:	ldr	r1, [sp, #60]	; 0x3c
   149e8:	mov	r0, r9
   149ec:	bl	13c88 <__assert_fail@plt+0x23bc>
   149f0:	ldr	r3, [pc, #488]	; 14be0 <__assert_fail@plt+0x3314>
   149f4:	cmp	r0, r3
   149f8:	beq	14a1c <__assert_fail@plt+0x3150>
   149fc:	ldr	r3, [pc, #500]	; 14bf8 <__assert_fail@plt+0x332c>
   14a00:	cmp	r0, r3
   14a04:	beq	14a1c <__assert_fail@plt+0x3150>
   14a08:	ldr	r3, [pc, #468]	; 14be4 <__assert_fail@plt+0x3318>
   14a0c:	cmp	r0, r3
   14a10:	movne	r3, #1
   14a14:	strne	r3, [sp, #48]	; 0x30
   14a18:	bne	14828 <__assert_fail@plt+0x2f5c>
   14a1c:	str	sl, [sp, #48]	; 0x30
   14a20:	b	14828 <__assert_fail@plt+0x2f5c>
   14a24:	ldr	r4, [sp, #4]
   14a28:	b	14838 <__assert_fail@plt+0x2f6c>
   14a2c:	ldr	r0, [r5, #24]
   14a30:	ldr	r1, [r5, #4]
   14a34:	cmp	r1, #0
   14a38:	beq	14a68 <__assert_fail@plt+0x319c>
   14a3c:	ldr	r3, [r1, #24]
   14a40:	add	r2, r1, #168	; 0xa8
   14a44:	cmp	r3, r2
   14a48:	ldrne	r2, [r1, #28]
   14a4c:	subne	r3, r3, r2
   14a50:	addne	r3, r0, r3
   14a54:	strne	r3, [r1, #24]
   14a58:	str	r0, [r1, #28]
   14a5c:	ldr	r1, [r1, #8]
   14a60:	cmp	r1, #0
   14a64:	bne	14a3c <__assert_fail@plt+0x3170>
   14a68:	ldr	r3, [sp, #8]
   14a6c:	ldr	r2, [r3, #48]	; 0x30
   14a70:	cmp	r2, #0
   14a74:	blt	145f0 <__assert_fail@plt+0x2d24>
   14a78:	ldr	r2, [r3, #24]
   14a7c:	add	r1, r3, #168	; 0xa8
   14a80:	cmp	r2, r1
   14a84:	ldrne	r1, [r3, #28]
   14a88:	subne	r2, r2, r1
   14a8c:	addne	r2, r0, r2
   14a90:	strne	r2, [r3, #24]
   14a94:	str	r0, [r3, #28]
   14a98:	ldr	r2, [r3, #8]
   14a9c:	cmp	r2, #0
   14aa0:	ldreq	r2, [r3, #4]
   14aa4:	mov	r3, r2
   14aa8:	b	14a6c <__assert_fail@plt+0x31a0>
   14aac:	ldr	r3, [pc, #328]	; 14bfc <__assert_fail@plt+0x3330>
   14ab0:	mvn	r2, #0
   14ab4:	ldr	r1, [r9, #4]
   14ab8:	mov	r0, r5
   14abc:	bl	13f40 <__assert_fail@plt+0x2674>
   14ac0:	adds	r0, r0, #0
   14ac4:	movne	r0, #1
   14ac8:	b	1466c <__assert_fail@plt+0x2da0>
   14acc:	mov	r3, #7
   14ad0:	strh	r3, [r9, #56]	; 0x38
   14ad4:	ldr	r3, [r5, #48]	; 0x30
   14ad8:	orr	r3, r3, #8192	; 0x2000
   14adc:	str	r3, [r5, #48]	; 0x30
   14ae0:	ldr	r0, [sp, #8]
   14ae4:	bl	13bd8 <__assert_fail@plt+0x230c>
   14ae8:	mov	r3, #0
   14aec:	str	r3, [sp, #8]
   14af0:	b	146ac <__assert_fail@plt+0x2de0>
   14af4:	ldr	r3, [sp, #40]	; 0x28
   14af8:	cmp	r3, #3
   14afc:	beq	14b14 <__assert_fail@plt+0x3248>
   14b00:	ldr	r0, [sp, #8]
   14b04:	bl	13bd8 <__assert_fail@plt+0x230c>
   14b08:	mov	r3, #0
   14b0c:	str	r3, [sp, #8]
   14b10:	b	146ac <__assert_fail@plt+0x2de0>
   14b14:	ldrh	r3, [r9, #56]	; 0x38
   14b18:	cmp	r3, #4
   14b1c:	cmpne	r3, #7
   14b20:	movne	r3, #6
   14b24:	strhne	r3, [r9, #56]	; 0x38
   14b28:	b	14b00 <__assert_fail@plt+0x3234>
   14b2c:	ldr	r3, [pc, #204]	; 14c00 <__assert_fail@plt+0x3334>
   14b30:	str	r3, [r5, #44]	; 0x2c
   14b34:	mov	r2, r8
   14b38:	ldr	r1, [sp, #8]
   14b3c:	mov	r0, r5
   14b40:	bl	139bc <__assert_fail@plt+0x20f0>
   14b44:	str	r0, [sp, #8]
   14b48:	mov	r3, #0
   14b4c:	str	r3, [r5, #44]	; 0x2c
   14b50:	b	146ac <__assert_fail@plt+0x2de0>
   14b54:	mov	r3, #24576	; 0x6000
   14b58:	str	r3, [r4, #80]	; 0x50
   14b5c:	mov	r2, #1
   14b60:	mov	r3, #0
   14b64:	b	14800 <__assert_fail@plt+0x2f34>
   14b68:	mov	r3, #24576	; 0x6000
   14b6c:	str	r3, [r4, #80]	; 0x50
   14b70:	mov	r2, #2
   14b74:	mov	r3, #0
   14b78:	b	14800 <__assert_fail@plt+0x2f34>
   14b7c:	mov	r3, #8192	; 0x2000
   14b80:	str	r3, [r4, #80]	; 0x50
   14b84:	mov	r2, #2
   14b88:	mov	r3, #0
   14b8c:	b	14800 <__assert_fail@plt+0x2f34>
   14b90:	mov	r3, #11
   14b94:	strh	r3, [r4, #56]	; 0x38
   14b98:	ldrb	r3, [r7, #18]
   14b9c:	sub	r3, r3, #1
   14ba0:	cmp	r3, #11
   14ba4:	ldrls	pc, [pc, r3, lsl #2]
   14ba8:	b	149ac <__assert_fail@plt+0x30e0>
   14bac:	andeq	r4, r1, ip, ror r9
   14bb0:	andeq	r4, r1, ip, ror fp
   14bb4:	andeq	r4, r1, ip, lsr #19
   14bb8:	andeq	r4, r1, r4, ror #15
   14bbc:	andeq	r4, r1, ip, lsr #19
   14bc0:	andeq	r4, r1, r8, ror #22
   14bc4:	andeq	r4, r1, ip, lsr #19
   14bc8:	muleq	r1, r4, r9
   14bcc:	andeq	r4, r1, ip, lsr #19
   14bd0:	andeq	r4, r1, r8, lsl #19
   14bd4:	andeq	r4, r1, ip, lsr #19
   14bd8:	andeq	r4, r1, r0, lsr #19
   14bdc:	andeq	r8, r1, r0, lsr #13
   14be0:	andeq	r6, r0, r9, ror #18
   14be4:			; <UNDEFINED> instruction: 0xff534d42
   14be8:	andeq	r9, r0, r0, lsr #31
   14bec:	movtpl	r4, #24911	; 0x614f
   14bf0:	andeq	r0, r0, r6, lsl #8
   14bf4:	andeq	r2, r0, r0, lsl r7
   14bf8:			; <UNDEFINED> instruction: 0x01021994
   14bfc:	muleq	r1, r4, r8
   14c00:			; <UNDEFINED> instruction: 0x000137bc
   14c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c08:	sub	sp, sp, #20
   14c0c:	bic	r3, r1, #4080	; 0xff0
   14c10:	bics	r3, r3, #15
   14c14:	bne	14d34 <__assert_fail@plt+0x3468>
   14c18:	mov	r7, r0
   14c1c:	mov	r9, r1
   14c20:	mov	fp, r2
   14c24:	and	r3, r1, #516	; 0x204
   14c28:	cmp	r3, #516	; 0x204
   14c2c:	beq	14d48 <__assert_fail@plt+0x347c>
   14c30:	tst	r1, #18
   14c34:	beq	14d5c <__assert_fail@plt+0x3490>
   14c38:	mov	r1, #96	; 0x60
   14c3c:	mov	r0, #1
   14c40:	bl	19fe0 <lchmod@@Base+0x35e8>
   14c44:	subs	r6, r0, #0
   14c48:	beq	14f78 <__assert_fail@plt+0x36ac>
   14c4c:	str	fp, [r6, #44]	; 0x2c
   14c50:	tst	r9, #2
   14c54:	streq	r9, [r6, #48]	; 0x30
   14c58:	bicne	r3, r9, #512	; 0x200
   14c5c:	orrne	r3, r3, #4
   14c60:	strne	r3, [r6, #48]	; 0x30
   14c64:	mvn	r3, #99	; 0x63
   14c68:	str	r3, [r6, #32]
   14c6c:	ldr	r0, [r7]
   14c70:	cmp	r0, #0
   14c74:	beq	14d70 <__assert_fail@plt+0x34a4>
   14c78:	mov	r5, r7
   14c7c:	mov	r4, #0
   14c80:	bl	116e0 <strlen@plt>
   14c84:	cmp	r4, r0
   14c88:	movcc	r4, r0
   14c8c:	ldr	r0, [r5, #4]!
   14c90:	cmp	r0, #0
   14c94:	bne	14c80 <__assert_fail@plt+0x33b4>
   14c98:	add	r1, r4, #1
   14c9c:	cmp	r1, #4096	; 0x1000
   14ca0:	movcc	r1, #4096	; 0x1000
   14ca4:	mov	r0, r6
   14ca8:	bl	137f4 <__assert_fail@plt+0x1f28>
   14cac:	subs	sl, r0, #0
   14cb0:	beq	14f6c <__assert_fail@plt+0x36a0>
   14cb4:	ldr	r3, [r7]
   14cb8:	cmp	r3, #0
   14cbc:	beq	14f84 <__assert_fail@plt+0x36b8>
   14cc0:	mov	r2, #0
   14cc4:	ldr	r1, [pc, #716]	; 14f98 <__assert_fail@plt+0x36cc>
   14cc8:	mov	r0, r6
   14ccc:	bl	13a90 <__assert_fail@plt+0x21c4>
   14cd0:	subs	r3, r0, #0
   14cd4:	mov	r2, r3
   14cd8:	str	r3, [sp, #8]
   14cdc:	beq	14f64 <__assert_fail@plt+0x3698>
   14ce0:	mvn	r3, #0
   14ce4:	str	r3, [r2, #48]	; 0x30
   14ce8:	cmp	fp, #0
   14cec:	beq	14cfc <__assert_fail@plt+0x3430>
   14cf0:	ldr	sl, [r6, #48]	; 0x30
   14cf4:	lsr	sl, sl, #10
   14cf8:	and	sl, sl, #1
   14cfc:	ldr	r4, [r7]
   14d00:	cmp	r4, #0
   14d04:	beq	14f14 <__assert_fail@plt+0x3648>
   14d08:	mov	r3, #0
   14d0c:	mov	r5, r3
   14d10:	str	r3, [sp, #12]
   14d14:	mov	r8, r3
   14d18:	lsr	r9, r9, #11
   14d1c:	eor	r9, r9, #1
   14d20:	and	r3, r9, #1
   14d24:	mov	r9, r5
   14d28:	str	r6, [sp, #4]
   14d2c:	mov	r6, r3
   14d30:	b	14de8 <__assert_fail@plt+0x351c>
   14d34:	bl	1171c <__errno_location@plt>
   14d38:	mov	r3, #22
   14d3c:	str	r3, [r0]
   14d40:	mov	r6, #0
   14d44:	b	14f78 <__assert_fail@plt+0x36ac>
   14d48:	bl	1171c <__errno_location@plt>
   14d4c:	mov	r3, #22
   14d50:	str	r3, [r0]
   14d54:	mov	r6, #0
   14d58:	b	14f78 <__assert_fail@plt+0x36ac>
   14d5c:	bl	1171c <__errno_location@plt>
   14d60:	mov	r3, #22
   14d64:	str	r3, [r0]
   14d68:	mov	r6, #0
   14d6c:	b	14f78 <__assert_fail@plt+0x36ac>
   14d70:	mov	r4, #0
   14d74:	b	14c98 <__assert_fail@plt+0x33cc>
   14d78:	mov	r1, r4
   14d7c:	ldr	r0, [sp, #4]
   14d80:	bl	13a90 <__assert_fail@plt+0x21c4>
   14d84:	subs	r4, r0, #0
   14d88:	beq	14f50 <__assert_fail@plt+0x3684>
   14d8c:	str	r9, [r4, #48]	; 0x30
   14d90:	ldr	r3, [sp, #8]
   14d94:	str	r3, [r4, #4]
   14d98:	add	r3, r4, #168	; 0xa8
   14d9c:	str	r3, [r4, #24]
   14da0:	cmp	r5, #0
   14da4:	moveq	r3, #0
   14da8:	andne	r3, sl, #1
   14dac:	cmp	r3, #0
   14db0:	beq	14e50 <__assert_fail@plt+0x3584>
   14db4:	mov	r3, #11
   14db8:	strh	r3, [r4, #56]	; 0x38
   14dbc:	mov	r2, #2
   14dc0:	mov	r3, #0
   14dc4:	strd	r2, [r4, #112]	; 0x70
   14dc8:	cmp	fp, #0
   14dcc:	beq	14e68 <__assert_fail@plt+0x359c>
   14dd0:	str	r5, [r4, #8]
   14dd4:	mov	r5, r4
   14dd8:	add	r8, r8, #1
   14ddc:	ldr	r4, [r7, #4]!
   14de0:	cmp	r4, #0
   14de4:	beq	14e88 <__assert_fail@plt+0x35bc>
   14de8:	mov	r0, r4
   14dec:	bl	116e0 <strlen@plt>
   14df0:	mov	r2, r0
   14df4:	cmp	r0, #2
   14df8:	movls	r3, #0
   14dfc:	andhi	r3, r6, #1
   14e00:	cmp	r3, #0
   14e04:	beq	14d78 <__assert_fail@plt+0x34ac>
   14e08:	add	r3, r4, r0
   14e0c:	ldrb	r3, [r3, #-1]
   14e10:	cmp	r3, #47	; 0x2f
   14e14:	bne	14d78 <__assert_fail@plt+0x34ac>
   14e18:	cmp	r0, #1
   14e1c:	bls	14d78 <__assert_fail@plt+0x34ac>
   14e20:	sub	r1, r0, #2
   14e24:	add	r3, r4, r1
   14e28:	ldrb	r1, [r4, r1]
   14e2c:	cmp	r1, #47	; 0x2f
   14e30:	bne	14d78 <__assert_fail@plt+0x34ac>
   14e34:	sub	r2, r2, #1
   14e38:	cmp	r2, #1
   14e3c:	beq	14d78 <__assert_fail@plt+0x34ac>
   14e40:	ldrb	r1, [r3, #-1]!
   14e44:	cmp	r1, #47	; 0x2f
   14e48:	beq	14e34 <__assert_fail@plt+0x3568>
   14e4c:	b	14d78 <__assert_fail@plt+0x34ac>
   14e50:	mov	r2, r9
   14e54:	mov	r1, r4
   14e58:	ldr	r0, [sp, #4]
   14e5c:	bl	13864 <__assert_fail@plt+0x1f98>
   14e60:	strh	r0, [r4, #56]	; 0x38
   14e64:	b	14dc8 <__assert_fail@plt+0x34fc>
   14e68:	str	r9, [r4, #8]
   14e6c:	cmp	r5, #0
   14e70:	ldrne	r3, [sp, #12]
   14e74:	strne	r4, [r3, #8]
   14e78:	strne	r4, [sp, #12]
   14e7c:	streq	r4, [sp, #12]
   14e80:	moveq	r5, r4
   14e84:	b	14dd8 <__assert_fail@plt+0x350c>
   14e88:	ldr	r6, [sp, #4]
   14e8c:	cmp	fp, #0
   14e90:	cmpne	r8, #1
   14e94:	bhi	14efc <__assert_fail@plt+0x3630>
   14e98:	mov	r2, #0
   14e9c:	ldr	r1, [pc, #244]	; 14f98 <__assert_fail@plt+0x36cc>
   14ea0:	mov	r0, r6
   14ea4:	bl	13a90 <__assert_fail@plt+0x21c4>
   14ea8:	str	r0, [r6]
   14eac:	cmp	r0, #0
   14eb0:	beq	14f54 <__assert_fail@plt+0x3688>
   14eb4:	str	r5, [r0, #8]
   14eb8:	ldr	r3, [r6]
   14ebc:	mov	r2, #9
   14ec0:	strh	r2, [r3, #56]	; 0x38
   14ec4:	ldr	r3, [r6]
   14ec8:	mov	r2, #1
   14ecc:	str	r2, [r3, #48]	; 0x30
   14ed0:	mov	r0, r6
   14ed4:	bl	13b04 <__assert_fail@plt+0x2238>
   14ed8:	cmp	r0, #0
   14edc:	beq	14f54 <__assert_fail@plt+0x3688>
   14ee0:	ldr	r3, [r6, #48]	; 0x30
   14ee4:	tst	r3, #516	; 0x204
   14ee8:	beq	14f2c <__assert_fail@plt+0x3660>
   14eec:	mvn	r1, #0
   14ef0:	add	r0, r6, #60	; 0x3c
   14ef4:	bl	16938 <__assert_fail@plt+0x506c>
   14ef8:	b	14f78 <__assert_fail@plt+0x36ac>
   14efc:	mov	r2, r8
   14f00:	mov	r1, r5
   14f04:	mov	r0, r6
   14f08:	bl	139bc <__assert_fail@plt+0x20f0>
   14f0c:	mov	r5, r0
   14f10:	b	14e98 <__assert_fail@plt+0x35cc>
   14f14:	mov	r5, #0
   14f18:	b	14e98 <__assert_fail@plt+0x35cc>
   14f1c:	mov	r3, #0
   14f20:	str	r3, [sp, #8]
   14f24:	mov	r5, r3
   14f28:	b	14e98 <__assert_fail@plt+0x35cc>
   14f2c:	ldr	r1, [pc, #104]	; 14f9c <__assert_fail@plt+0x36d0>
   14f30:	mov	r0, r6
   14f34:	bl	13b88 <__assert_fail@plt+0x22bc>
   14f38:	str	r0, [r6, #28]
   14f3c:	cmp	r0, #0
   14f40:	ldrlt	r3, [r6, #48]	; 0x30
   14f44:	orrlt	r3, r3, #4
   14f48:	strlt	r3, [r6, #48]	; 0x30
   14f4c:	b	14eec <__assert_fail@plt+0x3620>
   14f50:	ldr	r6, [sp, #4]
   14f54:	mov	r0, r5
   14f58:	bl	13bd8 <__assert_fail@plt+0x230c>
   14f5c:	ldr	r0, [sp, #8]
   14f60:	bl	136c8 <__assert_fail@plt+0x1dfc>
   14f64:	ldr	r0, [r6, #24]
   14f68:	bl	136c8 <__assert_fail@plt+0x1dfc>
   14f6c:	mov	r0, r6
   14f70:	bl	136c8 <__assert_fail@plt+0x1dfc>
   14f74:	mov	r6, #0
   14f78:	mov	r0, r6
   14f7c:	add	sp, sp, #20
   14f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f84:	cmp	fp, #0
   14f88:	beq	14f1c <__assert_fail@plt+0x3650>
   14f8c:	mov	r3, #0
   14f90:	str	r3, [sp, #8]
   14f94:	b	14cf0 <__assert_fail@plt+0x3424>
   14f98:	strdeq	fp, [r1], -ip
   14f9c:	andeq	fp, r1, r0, ror #13
   14fa0:	push	{r4, r5, r6, lr}
   14fa4:	mov	r5, r0
   14fa8:	ldr	r0, [r0]
   14fac:	cmp	r0, #0
   14fb0:	beq	14fe8 <__assert_fail@plt+0x371c>
   14fb4:	ldr	r3, [r0, #48]	; 0x30
   14fb8:	cmp	r3, #0
   14fbc:	blt	1504c <__assert_fail@plt+0x3780>
   14fc0:	ldr	r4, [r0, #8]
   14fc4:	cmp	r4, #0
   14fc8:	ldreq	r4, [r0, #4]
   14fcc:	bl	136c8 <__assert_fail@plt+0x1dfc>
   14fd0:	mov	r0, r4
   14fd4:	ldr	r3, [r4, #48]	; 0x30
   14fd8:	cmp	r3, #0
   14fdc:	bge	14fc0 <__assert_fail@plt+0x36f4>
   14fe0:	mov	r0, r4
   14fe4:	bl	136c8 <__assert_fail@plt+0x1dfc>
   14fe8:	ldr	r0, [r5, #4]
   14fec:	cmp	r0, #0
   14ff0:	beq	14ff8 <__assert_fail@plt+0x372c>
   14ff4:	bl	13bd8 <__assert_fail@plt+0x230c>
   14ff8:	ldr	r0, [r5, #8]
   14ffc:	bl	136c8 <__assert_fail@plt+0x1dfc>
   15000:	ldr	r0, [r5, #24]
   15004:	bl	136c8 <__assert_fail@plt+0x1dfc>
   15008:	ldr	r3, [r5, #48]	; 0x30
   1500c:	tst	r3, #512	; 0x200
   15010:	beq	15054 <__assert_fail@plt+0x3788>
   15014:	ldr	r0, [r5, #32]
   15018:	cmp	r0, #0
   1501c:	blt	1505c <__assert_fail@plt+0x3790>
   15020:	bl	11884 <close@plt>
   15024:	cmp	r0, #0
   15028:	beq	1505c <__assert_fail@plt+0x3790>
   1502c:	bl	1171c <__errno_location@plt>
   15030:	ldr	r4, [r0]
   15034:	add	r0, r5, #60	; 0x3c
   15038:	bl	13c54 <__assert_fail@plt+0x2388>
   1503c:	ldr	r0, [r5, #52]	; 0x34
   15040:	cmp	r0, #0
   15044:	bne	15074 <__assert_fail@plt+0x37a8>
   15048:	b	15078 <__assert_fail@plt+0x37ac>
   1504c:	mov	r4, r0
   15050:	b	14fe0 <__assert_fail@plt+0x3714>
   15054:	tst	r3, #4
   15058:	beq	15098 <__assert_fail@plt+0x37cc>
   1505c:	add	r0, r5, #60	; 0x3c
   15060:	bl	13c54 <__assert_fail@plt+0x2388>
   15064:	ldr	r0, [r5, #52]	; 0x34
   15068:	cmp	r0, #0
   1506c:	movne	r4, #0
   15070:	beq	150ec <__assert_fail@plt+0x3820>
   15074:	bl	16388 <__assert_fail@plt+0x4abc>
   15078:	mov	r0, r5
   1507c:	bl	13c18 <__assert_fail@plt+0x234c>
   15080:	mov	r0, r5
   15084:	bl	136c8 <__assert_fail@plt+0x1dfc>
   15088:	cmp	r4, #0
   1508c:	bne	150dc <__assert_fail@plt+0x3810>
   15090:	mov	r0, r4
   15094:	pop	{r4, r5, r6, pc}
   15098:	ldr	r0, [r5, #28]
   1509c:	bl	117f4 <fchdir@plt>
   150a0:	subs	r4, r0, #0
   150a4:	beq	150b0 <__assert_fail@plt+0x37e4>
   150a8:	bl	1171c <__errno_location@plt>
   150ac:	ldr	r4, [r0]
   150b0:	ldr	r0, [r5, #28]
   150b4:	bl	11884 <close@plt>
   150b8:	clz	r3, r4
   150bc:	lsr	r3, r3, #5
   150c0:	cmp	r0, #0
   150c4:	moveq	r3, #0
   150c8:	cmp	r3, #0
   150cc:	beq	15034 <__assert_fail@plt+0x3768>
   150d0:	bl	1171c <__errno_location@plt>
   150d4:	ldr	r4, [r0]
   150d8:	b	15034 <__assert_fail@plt+0x3768>
   150dc:	bl	1171c <__errno_location@plt>
   150e0:	str	r4, [r0]
   150e4:	mvn	r4, #0
   150e8:	b	15090 <__assert_fail@plt+0x37c4>
   150ec:	mov	r0, r5
   150f0:	bl	13c18 <__assert_fail@plt+0x234c>
   150f4:	mov	r0, r5
   150f8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   150fc:	mov	r4, #0
   15100:	b	15090 <__assert_fail@plt+0x37c4>
   15104:	push	{r4, r5, r6, r7, r8, lr}
   15108:	ldr	r5, [r0]
   1510c:	cmp	r5, #0
   15110:	beq	15754 <__assert_fail@plt+0x3e88>
   15114:	ldr	r3, [r0, #48]	; 0x30
   15118:	tst	r3, #8192	; 0x2000
   1511c:	bne	1575c <__assert_fail@plt+0x3e90>
   15120:	mov	r8, r0
   15124:	ldrh	r3, [r5, #60]	; 0x3c
   15128:	mov	r2, #3
   1512c:	strh	r2, [r5, #60]	; 0x3c
   15130:	cmp	r3, #1
   15134:	beq	151b4 <__assert_fail@plt+0x38e8>
   15138:	cmp	r3, #2
   1513c:	beq	151cc <__assert_fail@plt+0x3900>
   15140:	ldrh	r2, [r5, #56]	; 0x38
   15144:	cmp	r2, #1
   15148:	bne	153c0 <__assert_fail@plt+0x3af4>
   1514c:	cmp	r3, #4
   15150:	beq	15174 <__assert_fail@plt+0x38a8>
   15154:	ldr	r1, [r8, #48]	; 0x30
   15158:	tst	r1, #64	; 0x40
   1515c:	beq	1526c <__assert_fail@plt+0x39a0>
   15160:	ldrd	r6, [r5, #64]	; 0x40
   15164:	ldrd	r2, [r8, #16]
   15168:	cmp	r7, r3
   1516c:	cmpeq	r6, r2
   15170:	beq	1526c <__assert_fail@plt+0x39a0>
   15174:	ldrh	r3, [r5, #58]	; 0x3a
   15178:	tst	r3, #2
   1517c:	bne	15260 <__assert_fail@plt+0x3994>
   15180:	ldr	r0, [r8, #4]
   15184:	cmp	r0, #0
   15188:	beq	15198 <__assert_fail@plt+0x38cc>
   1518c:	bl	13bd8 <__assert_fail@plt+0x230c>
   15190:	mov	r3, #0
   15194:	str	r3, [r8, #4]
   15198:	mov	r3, #6
   1519c:	strh	r3, [r5, #56]	; 0x38
   151a0:	mov	r1, r5
   151a4:	mov	r0, r8
   151a8:	bl	14128 <__assert_fail@plt+0x285c>
   151ac:	mov	r4, r5
   151b0:	b	1549c <__assert_fail@plt+0x3bd0>
   151b4:	mov	r2, #0
   151b8:	mov	r1, r5
   151bc:	bl	13864 <__assert_fail@plt+0x1f98>
   151c0:	strh	r0, [r5, #56]	; 0x38
   151c4:	mov	r4, r5
   151c8:	b	1549c <__assert_fail@plt+0x3bd0>
   151cc:	ldrh	r2, [r5, #56]	; 0x38
   151d0:	sub	r3, r2, #12
   151d4:	uxth	r3, r3
   151d8:	cmp	r3, #1
   151dc:	bls	151ec <__assert_fail@plt+0x3920>
   151e0:	cmp	r2, #1
   151e4:	bne	153c0 <__assert_fail@plt+0x3af4>
   151e8:	b	15154 <__assert_fail@plt+0x3888>
   151ec:	mov	r2, #1
   151f0:	mov	r1, r5
   151f4:	bl	13864 <__assert_fail@plt+0x1f98>
   151f8:	strh	r0, [r5, #56]	; 0x38
   151fc:	cmp	r0, #1
   15200:	movne	r4, r5
   15204:	bne	1559c <__assert_fail@plt+0x3cd0>
   15208:	ldr	r3, [r8, #48]	; 0x30
   1520c:	tst	r3, #4
   15210:	movne	r4, r5
   15214:	bne	1559c <__assert_fail@plt+0x3cd0>
   15218:	ldr	r1, [pc, #1356]	; 1576c <__assert_fail@plt+0x3ea0>
   1521c:	mov	r0, r8
   15220:	bl	13b88 <__assert_fail@plt+0x22bc>
   15224:	str	r0, [r5, #36]	; 0x24
   15228:	cmp	r0, #0
   1522c:	blt	15244 <__assert_fail@plt+0x3978>
   15230:	ldrh	r3, [r5, #58]	; 0x3a
   15234:	orr	r3, r3, #2
   15238:	strh	r3, [r5, #58]	; 0x3a
   1523c:	mov	r4, r5
   15240:	b	1559c <__assert_fail@plt+0x3cd0>
   15244:	bl	1171c <__errno_location@plt>
   15248:	ldr	r3, [r0]
   1524c:	str	r3, [r5, #32]
   15250:	mov	r3, #7
   15254:	strh	r3, [r5, #56]	; 0x38
   15258:	mov	r4, r5
   1525c:	b	1559c <__assert_fail@plt+0x3cd0>
   15260:	ldr	r0, [r5, #36]	; 0x24
   15264:	bl	11884 <close@plt>
   15268:	b	15180 <__assert_fail@plt+0x38b4>
   1526c:	ldr	r0, [r8, #4]
   15270:	cmp	r0, #0
   15274:	beq	152c0 <__assert_fail@plt+0x39f4>
   15278:	tst	r1, #4096	; 0x1000
   1527c:	bne	152ac <__assert_fail@plt+0x39e0>
   15280:	ldr	r3, [r5, #24]
   15284:	mvn	r2, #0
   15288:	mov	r1, r5
   1528c:	mov	r0, r8
   15290:	bl	13f40 <__assert_fail@plt+0x2674>
   15294:	cmp	r0, #0
   15298:	bne	15314 <__assert_fail@plt+0x3a48>
   1529c:	ldr	r4, [r8, #4]
   152a0:	mov	r3, #0
   152a4:	str	r3, [r8, #4]
   152a8:	b	1555c <__assert_fail@plt+0x3c90>
   152ac:	bic	r1, r1, #4096	; 0x1000
   152b0:	str	r1, [r8, #48]	; 0x30
   152b4:	bl	13bd8 <__assert_fail@plt+0x230c>
   152b8:	mov	r3, #0
   152bc:	str	r3, [r8, #4]
   152c0:	mov	r1, #3
   152c4:	mov	r0, r8
   152c8:	bl	141ec <__assert_fail@plt+0x2920>
   152cc:	str	r0, [r8, #4]
   152d0:	cmp	r0, #0
   152d4:	bne	1529c <__assert_fail@plt+0x39d0>
   152d8:	ldr	r3, [r8, #48]	; 0x30
   152dc:	tst	r3, #8192	; 0x2000
   152e0:	bne	15764 <__assert_fail@plt+0x3e98>
   152e4:	ldr	r3, [r5, #32]
   152e8:	cmp	r3, #0
   152ec:	beq	15300 <__assert_fail@plt+0x3a34>
   152f0:	ldrh	r3, [r5, #56]	; 0x38
   152f4:	cmp	r3, #4
   152f8:	movne	r3, #7
   152fc:	strhne	r3, [r5, #56]	; 0x38
   15300:	mov	r1, r5
   15304:	mov	r0, r8
   15308:	bl	14128 <__assert_fail@plt+0x285c>
   1530c:	mov	r4, r5
   15310:	b	1549c <__assert_fail@plt+0x3bd0>
   15314:	bl	1171c <__errno_location@plt>
   15318:	ldr	r3, [r0]
   1531c:	str	r3, [r5, #32]
   15320:	ldrh	r3, [r5, #58]	; 0x3a
   15324:	orr	r3, r3, #1
   15328:	strh	r3, [r5, #58]	; 0x3a
   1532c:	ldr	r3, [r8, #4]
   15330:	cmp	r3, #0
   15334:	beq	1529c <__assert_fail@plt+0x39d0>
   15338:	ldr	r2, [r3, #4]
   1533c:	ldr	r2, [r2, #24]
   15340:	str	r2, [r3, #24]
   15344:	ldr	r3, [r3, #8]
   15348:	cmp	r3, #0
   1534c:	bne	15338 <__assert_fail@plt+0x3a6c>
   15350:	b	1529c <__assert_fail@plt+0x39d0>
   15354:	str	r3, [r8]
   15358:	ldr	r2, [r8, #24]
   1535c:	ldr	r3, [r3, #40]	; 0x28
   15360:	mov	r1, #0
   15364:	strb	r1, [r2, r3]
   15368:	mov	r1, #3
   1536c:	mov	r0, r8
   15370:	bl	141ec <__assert_fail@plt+0x2920>
   15374:	subs	r4, r0, #0
   15378:	beq	15388 <__assert_fail@plt+0x3abc>
   1537c:	mov	r0, r5
   15380:	bl	136c8 <__assert_fail@plt+0x1dfc>
   15384:	b	1555c <__assert_fail@plt+0x3c90>
   15388:	ldr	r3, [r8, #48]	; 0x30
   1538c:	tst	r3, #8192	; 0x2000
   15390:	beq	153dc <__assert_fail@plt+0x3b10>
   15394:	b	1549c <__assert_fail@plt+0x3bd0>
   15398:	str	r4, [r8]
   1539c:	mov	r0, r5
   153a0:	bl	136c8 <__assert_fail@plt+0x1dfc>
   153a4:	ldr	r3, [r4, #48]	; 0x30
   153a8:	cmp	r3, #0
   153ac:	beq	154a4 <__assert_fail@plt+0x3bd8>
   153b0:	ldrh	r3, [r4, #60]	; 0x3c
   153b4:	mov	r5, r4
   153b8:	cmp	r3, #4
   153bc:	bne	15554 <__assert_fail@plt+0x3c88>
   153c0:	ldr	r4, [r5, #8]
   153c4:	cmp	r4, #0
   153c8:	bne	15398 <__assert_fail@plt+0x3acc>
   153cc:	ldr	r3, [r5, #4]
   153d0:	ldr	r2, [r3, #12]
   153d4:	cmp	r2, #0
   153d8:	bne	15354 <__assert_fail@plt+0x3a88>
   153dc:	ldr	r4, [r5, #4]
   153e0:	str	r4, [r8]
   153e4:	mov	r0, r5
   153e8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   153ec:	ldr	r3, [r4, #48]	; 0x30
   153f0:	cmn	r3, #1
   153f4:	beq	1569c <__assert_fail@plt+0x3dd0>
   153f8:	ldrh	r3, [r4, #56]	; 0x38
   153fc:	cmp	r3, #11
   15400:	beq	156b8 <__assert_fail@plt+0x3dec>
   15404:	ldr	r2, [r8, #24]
   15408:	ldr	r3, [r4, #40]	; 0x28
   1540c:	mov	r1, #0
   15410:	strb	r1, [r2, r3]
   15414:	ldr	r3, [r4, #48]	; 0x30
   15418:	cmp	r3, r1
   1541c:	beq	156bc <__assert_fail@plt+0x3df0>
   15420:	ldrh	r3, [r4, #58]	; 0x3a
   15424:	tst	r3, #2
   15428:	beq	15714 <__assert_fail@plt+0x3e48>
   1542c:	ldr	r3, [r8, #48]	; 0x30
   15430:	tst	r3, #4
   15434:	bne	15450 <__assert_fail@plt+0x3b84>
   15438:	tst	r3, #512	; 0x200
   1543c:	beq	156e8 <__assert_fail@plt+0x3e1c>
   15440:	mov	r2, #1
   15444:	ldr	r1, [r4, #36]	; 0x24
   15448:	mov	r0, r8
   1544c:	bl	13e70 <__assert_fail@plt+0x25a4>
   15450:	ldr	r0, [r4, #36]	; 0x24
   15454:	bl	11884 <close@plt>
   15458:	ldrh	r3, [r4, #56]	; 0x38
   1545c:	cmp	r3, #2
   15460:	beq	1548c <__assert_fail@plt+0x3bc0>
   15464:	ldr	r3, [r4, #32]
   15468:	cmp	r3, #0
   1546c:	movne	r3, #7
   15470:	strhne	r3, [r4, #56]	; 0x38
   15474:	bne	1548c <__assert_fail@plt+0x3bc0>
   15478:	mov	r3, #6
   1547c:	strh	r3, [r4, #56]	; 0x38
   15480:	mov	r1, r4
   15484:	mov	r0, r8
   15488:	bl	14128 <__assert_fail@plt+0x285c>
   1548c:	ldr	r3, [r8, #48]	; 0x30
   15490:	and	r3, r3, #8192	; 0x2000
   15494:	cmp	r3, #0
   15498:	movne	r4, #0
   1549c:	mov	r0, r4
   154a0:	pop	{r4, r5, r6, r7, r8, pc}
   154a4:	mov	r0, r8
   154a8:	bl	13ef0 <__assert_fail@plt+0x2624>
   154ac:	cmp	r0, #0
   154b0:	bne	15530 <__assert_fail@plt+0x3c64>
   154b4:	mov	r0, r8
   154b8:	bl	13c18 <__assert_fail@plt+0x234c>
   154bc:	ldr	r2, [r4, #52]	; 0x34
   154c0:	str	r2, [r4, #40]	; 0x28
   154c4:	add	r6, r4, #168	; 0xa8
   154c8:	add	r2, r2, #1
   154cc:	mov	r1, r6
   154d0:	ldr	r0, [r8, #24]
   154d4:	bl	11500 <memmove@plt>
   154d8:	mov	r1, #47	; 0x2f
   154dc:	mov	r0, r6
   154e0:	bl	117ac <strrchr@plt>
   154e4:	cmp	r0, #0
   154e8:	beq	15518 <__assert_fail@plt+0x3c4c>
   154ec:	cmp	r6, r0
   154f0:	beq	15544 <__assert_fail@plt+0x3c78>
   154f4:	add	r5, r0, #1
   154f8:	mov	r0, r5
   154fc:	bl	116e0 <strlen@plt>
   15500:	mov	r7, r0
   15504:	add	r2, r0, #1
   15508:	mov	r1, r5
   1550c:	mov	r0, r6
   15510:	bl	11500 <memmove@plt>
   15514:	str	r7, [r4, #52]	; 0x34
   15518:	ldr	r3, [r8, #24]
   1551c:	str	r3, [r4, #28]
   15520:	str	r3, [r4, #24]
   15524:	mov	r0, r8
   15528:	bl	13b04 <__assert_fail@plt+0x2238>
   1552c:	b	1559c <__assert_fail@plt+0x3cd0>
   15530:	ldr	r3, [r8, #48]	; 0x30
   15534:	orr	r3, r3, #8192	; 0x2000
   15538:	str	r3, [r8, #48]	; 0x30
   1553c:	mov	r4, #0
   15540:	b	1549c <__assert_fail@plt+0x3bd0>
   15544:	ldrb	r3, [r4, #169]	; 0xa9
   15548:	cmp	r3, #0
   1554c:	bne	154f4 <__assert_fail@plt+0x3c28>
   15550:	b	15518 <__assert_fail@plt+0x3c4c>
   15554:	cmp	r3, #2
   15558:	beq	155f0 <__assert_fail@plt+0x3d24>
   1555c:	ldr	r2, [r8, #24]
   15560:	ldr	r0, [r4, #4]
   15564:	ldr	r1, [r0, #40]	; 0x28
   15568:	sub	r3, r1, #1
   1556c:	ldr	r0, [r0, #28]
   15570:	ldrb	r0, [r0, r3]
   15574:	cmp	r0, #47	; 0x2f
   15578:	movne	r3, r1
   1557c:	add	r0, r2, r3
   15580:	mov	r1, #47	; 0x2f
   15584:	strb	r1, [r2, r3]
   15588:	ldr	r2, [r4, #52]	; 0x34
   1558c:	add	r2, r2, #1
   15590:	add	r1, r4, #168	; 0xa8
   15594:	add	r0, r0, #1
   15598:	bl	11500 <memmove@plt>
   1559c:	str	r4, [r8]
   155a0:	ldrh	r3, [r4, #56]	; 0x38
   155a4:	cmp	r3, #11
   155a8:	beq	15664 <__assert_fail@plt+0x3d98>
   155ac:	ldrh	r3, [r4, #56]	; 0x38
   155b0:	cmp	r3, #1
   155b4:	bne	1549c <__assert_fail@plt+0x3bd0>
   155b8:	ldr	r3, [r4, #48]	; 0x30
   155bc:	cmp	r3, #0
   155c0:	ldrdeq	r2, [r4, #64]	; 0x40
   155c4:	strdeq	r2, [r8, #16]
   155c8:	mov	r1, r4
   155cc:	mov	r0, r8
   155d0:	bl	13da4 <__assert_fail@plt+0x24d8>
   155d4:	cmp	r0, #0
   155d8:	bne	1549c <__assert_fail@plt+0x3bd0>
   155dc:	bl	1171c <__errno_location@plt>
   155e0:	mov	r3, #12
   155e4:	str	r3, [r0]
   155e8:	mov	r4, #0
   155ec:	b	1549c <__assert_fail@plt+0x3bd0>
   155f0:	mov	r2, #1
   155f4:	mov	r1, r4
   155f8:	mov	r0, r8
   155fc:	bl	13864 <__assert_fail@plt+0x1f98>
   15600:	strh	r0, [r4, #56]	; 0x38
   15604:	cmp	r0, #1
   15608:	beq	15618 <__assert_fail@plt+0x3d4c>
   1560c:	mov	r3, #3
   15610:	strh	r3, [r4, #60]	; 0x3c
   15614:	b	1555c <__assert_fail@plt+0x3c90>
   15618:	ldr	r3, [r8, #48]	; 0x30
   1561c:	tst	r3, #4
   15620:	bne	1560c <__assert_fail@plt+0x3d40>
   15624:	ldr	r1, [pc, #320]	; 1576c <__assert_fail@plt+0x3ea0>
   15628:	mov	r0, r8
   1562c:	bl	13b88 <__assert_fail@plt+0x22bc>
   15630:	str	r0, [r4, #36]	; 0x24
   15634:	cmp	r0, #0
   15638:	bge	15654 <__assert_fail@plt+0x3d88>
   1563c:	bl	1171c <__errno_location@plt>
   15640:	ldr	r3, [r0]
   15644:	str	r3, [r4, #32]
   15648:	mov	r3, #7
   1564c:	strh	r3, [r4, #56]	; 0x38
   15650:	b	1560c <__assert_fail@plt+0x3d40>
   15654:	ldrh	r3, [r4, #58]	; 0x3a
   15658:	orr	r3, r3, #2
   1565c:	strh	r3, [r4, #58]	; 0x3a
   15660:	b	1560c <__assert_fail@plt+0x3d40>
   15664:	ldrd	r2, [r4, #112]	; 0x70
   15668:	cmp	r3, #0
   1566c:	cmpeq	r2, #2
   15670:	beq	15684 <__assert_fail@plt+0x3db8>
   15674:	cmp	r3, #0
   15678:	cmpeq	r2, #1
   1567c:	beq	1549c <__assert_fail@plt+0x3bd0>
   15680:	bl	11878 <abort@plt>
   15684:	mov	r2, #0
   15688:	mov	r1, r4
   1568c:	mov	r0, r8
   15690:	bl	13864 <__assert_fail@plt+0x1f98>
   15694:	strh	r0, [r4, #56]	; 0x38
   15698:	b	155ac <__assert_fail@plt+0x3ce0>
   1569c:	mov	r0, r4
   156a0:	bl	136c8 <__assert_fail@plt+0x1dfc>
   156a4:	bl	1171c <__errno_location@plt>
   156a8:	mov	r4, #0
   156ac:	str	r4, [r0]
   156b0:	str	r4, [r8]
   156b4:	b	1549c <__assert_fail@plt+0x3bd0>
   156b8:	bl	11878 <abort@plt>
   156bc:	mov	r0, r8
   156c0:	bl	13ef0 <__assert_fail@plt+0x2624>
   156c4:	cmp	r0, #0
   156c8:	beq	15458 <__assert_fail@plt+0x3b8c>
   156cc:	bl	1171c <__errno_location@plt>
   156d0:	ldr	r3, [r0]
   156d4:	str	r3, [r4, #32]
   156d8:	ldr	r3, [r8, #48]	; 0x30
   156dc:	orr	r3, r3, #8192	; 0x2000
   156e0:	str	r3, [r8, #48]	; 0x30
   156e4:	b	15458 <__assert_fail@plt+0x3b8c>
   156e8:	ldr	r0, [r4, #36]	; 0x24
   156ec:	bl	117f4 <fchdir@plt>
   156f0:	cmp	r0, #0
   156f4:	beq	15450 <__assert_fail@plt+0x3b84>
   156f8:	bl	1171c <__errno_location@plt>
   156fc:	ldr	r3, [r0]
   15700:	str	r3, [r4, #32]
   15704:	ldr	r3, [r8, #48]	; 0x30
   15708:	orr	r3, r3, #8192	; 0x2000
   1570c:	str	r3, [r8, #48]	; 0x30
   15710:	b	15450 <__assert_fail@plt+0x3b84>
   15714:	tst	r3, #1
   15718:	bne	15458 <__assert_fail@plt+0x3b8c>
   1571c:	ldr	r3, [pc, #76]	; 15770 <__assert_fail@plt+0x3ea4>
   15720:	mvn	r2, #0
   15724:	ldr	r1, [r4, #4]
   15728:	mov	r0, r8
   1572c:	bl	13f40 <__assert_fail@plt+0x2674>
   15730:	cmp	r0, #0
   15734:	beq	15458 <__assert_fail@plt+0x3b8c>
   15738:	bl	1171c <__errno_location@plt>
   1573c:	ldr	r3, [r0]
   15740:	str	r3, [r4, #32]
   15744:	ldr	r3, [r8, #48]	; 0x30
   15748:	orr	r3, r3, #8192	; 0x2000
   1574c:	str	r3, [r8, #48]	; 0x30
   15750:	b	15458 <__assert_fail@plt+0x3b8c>
   15754:	mov	r4, #0
   15758:	b	1549c <__assert_fail@plt+0x3bd0>
   1575c:	mov	r4, #0
   15760:	b	1549c <__assert_fail@plt+0x3bd0>
   15764:	mov	r4, #0
   15768:	b	1549c <__assert_fail@plt+0x3bd0>
   1576c:	andeq	fp, r1, r0, ror #13
   15770:	muleq	r1, r4, r8
   15774:	cmp	r2, #4
   15778:	bhi	15788 <__assert_fail@plt+0x3ebc>
   1577c:	strh	r2, [r1, #60]	; 0x3c
   15780:	mov	r0, #0
   15784:	bx	lr
   15788:	push	{r4, lr}
   1578c:	bl	1171c <__errno_location@plt>
   15790:	mov	r3, #22
   15794:	str	r3, [r0]
   15798:	mov	r0, #1
   1579c:	pop	{r4, pc}
   157a0:	push	{r4, r5, r6, r7, r8, lr}
   157a4:	bics	r3, r1, #4096	; 0x1000
   157a8:	bne	1584c <__assert_fail@plt+0x3f80>
   157ac:	mov	r4, r0
   157b0:	mov	r6, r1
   157b4:	ldr	r5, [r0]
   157b8:	bl	1171c <__errno_location@plt>
   157bc:	mov	r7, r0
   157c0:	mov	r3, #0
   157c4:	str	r3, [r0]
   157c8:	ldr	r3, [r4, #48]	; 0x30
   157cc:	tst	r3, #8192	; 0x2000
   157d0:	bne	158f0 <__assert_fail@plt+0x4024>
   157d4:	ldrh	r3, [r5, #56]	; 0x38
   157d8:	cmp	r3, #9
   157dc:	beq	15860 <__assert_fail@plt+0x3f94>
   157e0:	cmp	r3, #1
   157e4:	bne	158f8 <__assert_fail@plt+0x402c>
   157e8:	ldr	r0, [r4, #4]
   157ec:	cmp	r0, #0
   157f0:	beq	157f8 <__assert_fail@plt+0x3f2c>
   157f4:	bl	13bd8 <__assert_fail@plt+0x230c>
   157f8:	cmp	r6, #4096	; 0x1000
   157fc:	ldreq	r3, [r4, #48]	; 0x30
   15800:	orreq	r3, r3, #4096	; 0x1000
   15804:	streq	r3, [r4, #48]	; 0x30
   15808:	moveq	r6, #2
   1580c:	movne	r6, #1
   15810:	ldr	r3, [r5, #48]	; 0x30
   15814:	cmp	r3, #0
   15818:	bne	15838 <__assert_fail@plt+0x3f6c>
   1581c:	ldr	r3, [r5, #24]
   15820:	ldrb	r3, [r3]
   15824:	cmp	r3, #47	; 0x2f
   15828:	beq	15838 <__assert_fail@plt+0x3f6c>
   1582c:	ldr	r3, [r4, #48]	; 0x30
   15830:	tst	r3, #4
   15834:	beq	15868 <__assert_fail@plt+0x3f9c>
   15838:	mov	r1, r6
   1583c:	mov	r0, r4
   15840:	bl	141ec <__assert_fail@plt+0x2920>
   15844:	str	r0, [r4, #4]
   15848:	pop	{r4, r5, r6, r7, r8, pc}
   1584c:	bl	1171c <__errno_location@plt>
   15850:	mov	r3, #22
   15854:	str	r3, [r0]
   15858:	mov	r0, #0
   1585c:	pop	{r4, r5, r6, r7, r8, pc}
   15860:	ldr	r0, [r5, #8]
   15864:	pop	{r4, r5, r6, r7, r8, pc}
   15868:	ldr	r1, [pc, #144]	; 15900 <__assert_fail@plt+0x4034>
   1586c:	mov	r0, r4
   15870:	bl	13b88 <__assert_fail@plt+0x22bc>
   15874:	subs	r5, r0, #0
   15878:	blt	158b0 <__assert_fail@plt+0x3fe4>
   1587c:	mov	r1, r6
   15880:	mov	r0, r4
   15884:	bl	141ec <__assert_fail@plt+0x2920>
   15888:	str	r0, [r4, #4]
   1588c:	ldr	r3, [r4, #48]	; 0x30
   15890:	tst	r3, #512	; 0x200
   15894:	beq	158bc <__assert_fail@plt+0x3ff0>
   15898:	mov	r2, #1
   1589c:	mov	r1, r5
   158a0:	mov	r0, r4
   158a4:	bl	13e70 <__assert_fail@plt+0x25a4>
   158a8:	ldr	r0, [r4, #4]
   158ac:	pop	{r4, r5, r6, r7, r8, pc}
   158b0:	mov	r0, #0
   158b4:	str	r0, [r4, #4]
   158b8:	pop	{r4, r5, r6, r7, r8, pc}
   158bc:	mov	r0, r5
   158c0:	bl	117f4 <fchdir@plt>
   158c4:	cmp	r0, #0
   158c8:	bne	158d8 <__assert_fail@plt+0x400c>
   158cc:	mov	r0, r5
   158d0:	bl	11884 <close@plt>
   158d4:	b	158a8 <__assert_fail@plt+0x3fdc>
   158d8:	ldr	r4, [r7]
   158dc:	mov	r0, r5
   158e0:	bl	11884 <close@plt>
   158e4:	str	r4, [r7]
   158e8:	mov	r0, #0
   158ec:	pop	{r4, r5, r6, r7, r8, pc}
   158f0:	mov	r0, #0
   158f4:	pop	{r4, r5, r6, r7, r8, pc}
   158f8:	mov	r0, #0
   158fc:	pop	{r4, r5, r6, r7, r8, pc}
   15900:	andeq	fp, r1, r0, ror #13
   15904:	andeq	r0, r0, r0
   15908:	push	{r4, lr}
   1590c:	ror	r0, r0, #3
   15910:	bl	1ab34 <lchmod@@Base+0x413c>
   15914:	mov	r0, r1
   15918:	pop	{r4, pc}
   1591c:	cmp	r1, r0
   15920:	movne	r0, #0
   15924:	moveq	r0, #1
   15928:	bx	lr
   1592c:	ldr	r3, [r0, #20]
   15930:	ldr	r2, [pc, #176]	; 159e8 <__assert_fail@plt+0x411c>
   15934:	cmp	r3, r2
   15938:	beq	159d0 <__assert_fail@plt+0x4104>
   1593c:	vldr	s15, [r3, #8]
   15940:	vldr	s14, [pc, #144]	; 159d8 <__assert_fail@plt+0x410c>
   15944:	vcmpe.f32	s15, s14
   15948:	vmrs	APSR_nzcv, fpscr
   1594c:	ble	159ac <__assert_fail@plt+0x40e0>
   15950:	vldr	s14, [pc, #132]	; 159dc <__assert_fail@plt+0x4110>
   15954:	vcmpe.f32	s15, s14
   15958:	vmrs	APSR_nzcv, fpscr
   1595c:	bpl	159ac <__assert_fail@plt+0x40e0>
   15960:	vldr	s13, [r3, #12]
   15964:	vldr	s14, [pc, #116]	; 159e0 <__assert_fail@plt+0x4114>
   15968:	vcmpe.f32	s13, s14
   1596c:	vmrs	APSR_nzcv, fpscr
   15970:	ble	159ac <__assert_fail@plt+0x40e0>
   15974:	vldr	s14, [r3]
   15978:	vcmpe.f32	s14, #0.0
   1597c:	vmrs	APSR_nzcv, fpscr
   15980:	blt	159ac <__assert_fail@plt+0x40e0>
   15984:	vldr	s13, [pc, #76]	; 159d8 <__assert_fail@plt+0x410c>
   15988:	vadd.f32	s14, s14, s13
   1598c:	vldr	s13, [r3, #4]
   15990:	vcmpe.f32	s14, s13
   15994:	vmrs	APSR_nzcv, fpscr
   15998:	bpl	159ac <__assert_fail@plt+0x40e0>
   1599c:	vldr	s12, [pc, #64]	; 159e4 <__assert_fail@plt+0x4118>
   159a0:	vcmpe.f32	s13, s12
   159a4:	vmrs	APSR_nzcv, fpscr
   159a8:	bls	159bc <__assert_fail@plt+0x40f0>
   159ac:	ldr	r3, [pc, #52]	; 159e8 <__assert_fail@plt+0x411c>
   159b0:	str	r3, [r0, #20]
   159b4:	mov	r0, #0
   159b8:	bx	lr
   159bc:	vcmpe.f32	s15, s14
   159c0:	vmrs	APSR_nzcv, fpscr
   159c4:	ble	159ac <__assert_fail@plt+0x40e0>
   159c8:	mov	r0, #1
   159cc:	bx	lr
   159d0:	mov	r0, #1
   159d4:	bx	lr
   159d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   159dc:	svccc	0x00666666
   159e0:	svccc	0x008ccccd
   159e4:	svccc	0x00800000
   159e8:	muleq	r1, r8, r8
   159ec:	push	{r4, lr}
   159f0:	mov	r4, r0
   159f4:	mov	r0, r1
   159f8:	ldr	r3, [r4, #24]
   159fc:	ldr	r1, [r4, #8]
   15a00:	blx	r3
   15a04:	ldr	r3, [r4, #8]
   15a08:	cmp	r0, r3
   15a0c:	bcs	15a1c <__assert_fail@plt+0x4150>
   15a10:	ldr	r3, [r4]
   15a14:	add	r0, r3, r0, lsl #3
   15a18:	pop	{r4, pc}
   15a1c:	bl	11878 <abort@plt>
   15a20:	push	{r4, r5, r6, r7, r8, lr}
   15a24:	ldrb	r3, [r1, #16]
   15a28:	cmp	r3, #0
   15a2c:	bne	15a5c <__assert_fail@plt+0x4190>
   15a30:	vmov	s15, r0
   15a34:	vcvt.f32.u32	s13, s15
   15a38:	vldr	s14, [r1, #8]
   15a3c:	vdiv.f32	s15, s13, s14
   15a40:	vldr	s14, [pc, #204]	; 15b14 <__assert_fail@plt+0x4248>
   15a44:	vcmpe.f32	s15, s14
   15a48:	vmrs	APSR_nzcv, fpscr
   15a4c:	movge	r7, #0
   15a50:	bge	15a94 <__assert_fail@plt+0x41c8>
   15a54:	vcvt.u32.f32	s15, s15
   15a58:	vmov	r0, s15
   15a5c:	cmp	r0, #10
   15a60:	movcc	r0, #10
   15a64:	orr	r7, r0, #1
   15a68:	cmn	r7, #1
   15a6c:	ldrne	r8, [pc, #164]	; 15b18 <__assert_fail@plt+0x424c>
   15a70:	bne	15ac0 <__assert_fail@plt+0x41f4>
   15a74:	lsr	r3, r7, #30
   15a78:	lsl	r2, r7, #2
   15a7c:	adds	r3, r3, #0
   15a80:	movne	r3, #1
   15a84:	cmp	r2, #0
   15a88:	movlt	r3, #1
   15a8c:	cmp	r3, #0
   15a90:	movne	r7, #0
   15a94:	mov	r0, r7
   15a98:	pop	{r4, r5, r6, r7, r8, pc}
   15a9c:	mov	r4, #3
   15aa0:	mov	r1, r4
   15aa4:	mov	r0, r7
   15aa8:	bl	1ab34 <lchmod@@Base+0x413c>
   15aac:	cmp	r1, #0
   15ab0:	bne	15a74 <__assert_fail@plt+0x41a8>
   15ab4:	add	r7, r7, #2
   15ab8:	cmn	r7, #1
   15abc:	beq	15a74 <__assert_fail@plt+0x41a8>
   15ac0:	cmp	r7, #9
   15ac4:	bls	15a9c <__assert_fail@plt+0x41d0>
   15ac8:	umull	r2, r3, r8, r7
   15acc:	lsr	r3, r3, #1
   15ad0:	add	r3, r3, r3, lsl #1
   15ad4:	cmp	r7, r3
   15ad8:	beq	15ab4 <__assert_fail@plt+0x41e8>
   15adc:	mov	r6, #16
   15ae0:	mov	r5, #9
   15ae4:	mov	r4, #3
   15ae8:	add	r5, r5, r6
   15aec:	add	r4, r4, #2
   15af0:	cmp	r5, r7
   15af4:	bcs	15aa0 <__assert_fail@plt+0x41d4>
   15af8:	add	r6, r6, #8
   15afc:	mov	r1, r4
   15b00:	mov	r0, r7
   15b04:	bl	1ab34 <lchmod@@Base+0x413c>
   15b08:	cmp	r1, #0
   15b0c:	bne	15ae8 <__assert_fail@plt+0x421c>
   15b10:	b	15ab4 <__assert_fail@plt+0x41e8>
   15b14:	svcmi	0x00800000
   15b18:	bge	feac05cc <optarg@@GLIBC_2.4+0xfea943e4>
   15b1c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b20:	ldr	r7, [r1]
   15b24:	ldr	r3, [r1, #4]
   15b28:	cmp	r7, r3
   15b2c:	bcs	15c60 <__assert_fail@plt+0x4394>
   15b30:	mov	fp, r2
   15b34:	mov	sl, r1
   15b38:	mov	r6, r0
   15b3c:	add	r7, r7, #8
   15b40:	mov	r9, #0
   15b44:	b	15bac <__assert_fail@plt+0x42e0>
   15b48:	str	r5, [r0]
   15b4c:	ldr	r2, [r6, #12]
   15b50:	add	r2, r2, #1
   15b54:	str	r2, [r6, #12]
   15b58:	str	r9, [r4]
   15b5c:	ldr	r2, [r6, #36]	; 0x24
   15b60:	str	r2, [r4, #4]
   15b64:	str	r4, [r6, #36]	; 0x24
   15b68:	b	15bf4 <__assert_fail@plt+0x4328>
   15b6c:	mov	r0, #8
   15b70:	bl	1a030 <lchmod@@Base+0x3638>
   15b74:	cmp	r0, #0
   15b78:	beq	15c68 <__assert_fail@plt+0x439c>
   15b7c:	str	r4, [r0]
   15b80:	ldr	r3, [r5, #4]
   15b84:	str	r3, [r0, #4]
   15b88:	str	r0, [r5, #4]
   15b8c:	str	r9, [r8, #-8]
   15b90:	ldr	r3, [sl, #12]
   15b94:	sub	r3, r3, #1
   15b98:	str	r3, [sl, #12]
   15b9c:	add	r7, r7, #8
   15ba0:	ldr	r3, [sl, #4]
   15ba4:	cmp	r3, r8
   15ba8:	bls	15c58 <__assert_fail@plt+0x438c>
   15bac:	mov	r8, r7
   15bb0:	ldr	r3, [r7, #-8]
   15bb4:	cmp	r3, #0
   15bb8:	beq	15b9c <__assert_fail@plt+0x42d0>
   15bbc:	ldr	r4, [r7, #-4]
   15bc0:	cmp	r4, #0
   15bc4:	beq	15c00 <__assert_fail@plt+0x4334>
   15bc8:	ldr	r5, [r4]
   15bcc:	mov	r1, r5
   15bd0:	mov	r0, r6
   15bd4:	bl	159ec <__assert_fail@plt+0x4120>
   15bd8:	ldr	r3, [r4, #4]
   15bdc:	ldr	r2, [r0]
   15be0:	cmp	r2, #0
   15be4:	beq	15b48 <__assert_fail@plt+0x427c>
   15be8:	ldr	r2, [r0, #4]
   15bec:	str	r2, [r4, #4]
   15bf0:	str	r4, [r0, #4]
   15bf4:	mov	r4, r3
   15bf8:	cmp	r3, #0
   15bfc:	bne	15bc8 <__assert_fail@plt+0x42fc>
   15c00:	ldr	r4, [r8, #-8]
   15c04:	str	r9, [r8, #-4]
   15c08:	cmp	fp, #0
   15c0c:	bne	15b9c <__assert_fail@plt+0x42d0>
   15c10:	mov	r1, r4
   15c14:	mov	r0, r6
   15c18:	bl	159ec <__assert_fail@plt+0x4120>
   15c1c:	mov	r5, r0
   15c20:	ldr	r3, [r0]
   15c24:	cmp	r3, #0
   15c28:	beq	15c44 <__assert_fail@plt+0x4378>
   15c2c:	ldr	r0, [r6, #36]	; 0x24
   15c30:	cmp	r0, #0
   15c34:	beq	15b6c <__assert_fail@plt+0x42a0>
   15c38:	ldr	r3, [r0, #4]
   15c3c:	str	r3, [r6, #36]	; 0x24
   15c40:	b	15b7c <__assert_fail@plt+0x42b0>
   15c44:	str	r4, [r0]
   15c48:	ldr	r3, [r6, #12]
   15c4c:	add	r3, r3, #1
   15c50:	str	r3, [r6, #12]
   15c54:	b	15b8c <__assert_fail@plt+0x42c0>
   15c58:	mov	r0, #1
   15c5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c60:	mov	r0, #1
   15c64:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c68:	mov	r0, fp
   15c6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c70:	push	{r4, r5, r6, r7, r8, lr}
   15c74:	mov	r6, r0
   15c78:	mov	r5, r1
   15c7c:	mov	r8, r2
   15c80:	mov	r7, r3
   15c84:	bl	159ec <__assert_fail@plt+0x4120>
   15c88:	str	r0, [r8]
   15c8c:	ldr	r3, [r0]
   15c90:	cmp	r3, #0
   15c94:	beq	15d6c <__assert_fail@plt+0x44a0>
   15c98:	mov	r4, r0
   15c9c:	cmp	r5, r3
   15ca0:	beq	15d34 <__assert_fail@plt+0x4468>
   15ca4:	ldr	r2, [r6, #28]
   15ca8:	mov	r1, r3
   15cac:	mov	r0, r5
   15cb0:	blx	r2
   15cb4:	cmp	r0, #0
   15cb8:	bne	15d34 <__assert_fail@plt+0x4468>
   15cbc:	ldr	r3, [r4, #4]
   15cc0:	cmp	r3, #0
   15cc4:	beq	15d74 <__assert_fail@plt+0x44a8>
   15cc8:	ldr	r1, [r3]
   15ccc:	cmp	r5, r1
   15cd0:	beq	15d04 <__assert_fail@plt+0x4438>
   15cd4:	ldr	r3, [r6, #28]
   15cd8:	mov	r0, r5
   15cdc:	blx	r3
   15ce0:	cmp	r0, #0
   15ce4:	bne	15d04 <__assert_fail@plt+0x4438>
   15ce8:	ldr	r4, [r4, #4]
   15cec:	ldr	r3, [r4, #4]
   15cf0:	cmp	r3, #0
   15cf4:	beq	15d6c <__assert_fail@plt+0x44a0>
   15cf8:	ldr	r1, [r3]
   15cfc:	cmp	r5, r1
   15d00:	bne	15cd4 <__assert_fail@plt+0x4408>
   15d04:	ldr	r2, [r4, #4]
   15d08:	ldr	r3, [r2]
   15d0c:	cmp	r7, #0
   15d10:	beq	15d6c <__assert_fail@plt+0x44a0>
   15d14:	ldr	r1, [r2, #4]
   15d18:	str	r1, [r4, #4]
   15d1c:	mov	r1, #0
   15d20:	str	r1, [r2]
   15d24:	ldr	r1, [r6, #36]	; 0x24
   15d28:	str	r1, [r2, #4]
   15d2c:	str	r2, [r6, #36]	; 0x24
   15d30:	b	15d6c <__assert_fail@plt+0x44a0>
   15d34:	ldr	r3, [r4]
   15d38:	cmp	r7, #0
   15d3c:	beq	15d6c <__assert_fail@plt+0x44a0>
   15d40:	ldr	r2, [r4, #4]
   15d44:	cmp	r2, #0
   15d48:	ldmne	r2, {r0, r1}
   15d4c:	stmne	r4, {r0, r1}
   15d50:	movne	r1, #0
   15d54:	strne	r1, [r2]
   15d58:	ldrne	r1, [r6, #36]	; 0x24
   15d5c:	strne	r1, [r2, #4]
   15d60:	strne	r2, [r6, #36]	; 0x24
   15d64:	moveq	r2, #0
   15d68:	streq	r2, [r4]
   15d6c:	mov	r0, r3
   15d70:	pop	{r4, r5, r6, r7, r8, pc}
   15d74:	mov	r3, #0
   15d78:	b	15d6c <__assert_fail@plt+0x44a0>
   15d7c:	ldr	r0, [r0, #8]
   15d80:	bx	lr
   15d84:	ldr	r0, [r0, #12]
   15d88:	bx	lr
   15d8c:	ldr	r0, [r0, #16]
   15d90:	bx	lr
   15d94:	ldr	r1, [r0]
   15d98:	ldr	ip, [r0, #4]
   15d9c:	cmp	r1, ip
   15da0:	bcs	15df8 <__assert_fail@plt+0x452c>
   15da4:	mov	r0, #0
   15da8:	b	15dc4 <__assert_fail@plt+0x44f8>
   15dac:	mov	r2, #1
   15db0:	cmp	r0, r2
   15db4:	movcc	r0, r2
   15db8:	add	r1, r1, #8
   15dbc:	cmp	r1, ip
   15dc0:	bcs	15df4 <__assert_fail@plt+0x4528>
   15dc4:	ldr	r3, [r1]
   15dc8:	cmp	r3, #0
   15dcc:	beq	15db8 <__assert_fail@plt+0x44ec>
   15dd0:	ldr	r3, [r1, #4]
   15dd4:	cmp	r3, #0
   15dd8:	beq	15dac <__assert_fail@plt+0x44e0>
   15ddc:	mov	r2, #1
   15de0:	add	r2, r2, #1
   15de4:	ldr	r3, [r3, #4]
   15de8:	cmp	r3, #0
   15dec:	bne	15de0 <__assert_fail@plt+0x4514>
   15df0:	b	15db0 <__assert_fail@plt+0x44e4>
   15df4:	bx	lr
   15df8:	mov	r0, #0
   15dfc:	bx	lr
   15e00:	push	{lr}		; (str lr, [sp, #-4]!)
   15e04:	ldr	r1, [r0]
   15e08:	ldr	lr, [r0, #4]
   15e0c:	cmp	r1, lr
   15e10:	bcs	15e60 <__assert_fail@plt+0x4594>
   15e14:	mov	r2, #0
   15e18:	mov	ip, r2
   15e1c:	b	15e2c <__assert_fail@plt+0x4560>
   15e20:	add	r1, r1, #8
   15e24:	cmp	r1, lr
   15e28:	bcs	15e68 <__assert_fail@plt+0x459c>
   15e2c:	ldr	r3, [r1]
   15e30:	cmp	r3, #0
   15e34:	beq	15e20 <__assert_fail@plt+0x4554>
   15e38:	add	ip, ip, #1
   15e3c:	add	r2, r2, #1
   15e40:	ldr	r3, [r1, #4]
   15e44:	cmp	r3, #0
   15e48:	beq	15e20 <__assert_fail@plt+0x4554>
   15e4c:	add	r2, r2, #1
   15e50:	ldr	r3, [r3, #4]
   15e54:	cmp	r3, #0
   15e58:	bne	15e4c <__assert_fail@plt+0x4580>
   15e5c:	b	15e20 <__assert_fail@plt+0x4554>
   15e60:	mov	r2, #0
   15e64:	mov	ip, r2
   15e68:	ldr	r3, [r0, #12]
   15e6c:	cmp	r3, ip
   15e70:	beq	15e7c <__assert_fail@plt+0x45b0>
   15e74:	mov	r0, #0
   15e78:	pop	{pc}		; (ldr pc, [sp], #4)
   15e7c:	ldr	r0, [r0, #16]
   15e80:	cmp	r0, r2
   15e84:	movne	r0, #0
   15e88:	moveq	r0, #1
   15e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e90:	push	{r4, r5, r6, r7, r8, lr}
   15e94:	sub	sp, sp, #8
   15e98:	mov	r6, r0
   15e9c:	mov	r4, r1
   15ea0:	ldr	r5, [r0, #8]
   15ea4:	ldr	r7, [r0, #12]
   15ea8:	bl	15d94 <__assert_fail@plt+0x44c8>
   15eac:	mov	r8, r0
   15eb0:	ldr	r3, [r6, #16]
   15eb4:	ldr	r2, [pc, #116]	; 15f30 <__assert_fail@plt+0x4664>
   15eb8:	mov	r1, #1
   15ebc:	mov	r0, r4
   15ec0:	bl	11764 <__fprintf_chk@plt>
   15ec4:	mov	r3, r5
   15ec8:	ldr	r2, [pc, #100]	; 15f34 <__assert_fail@plt+0x4668>
   15ecc:	mov	r1, #1
   15ed0:	mov	r0, r4
   15ed4:	bl	11764 <__fprintf_chk@plt>
   15ed8:	vmov	s15, r7
   15edc:	vcvt.f64.u32	d6, s15
   15ee0:	vldr	d7, [pc, #64]	; 15f28 <__assert_fail@plt+0x465c>
   15ee4:	vmul.f64	d6, d6, d7
   15ee8:	vmov	s15, r5
   15eec:	vcvt.f64.u32	d7, s15
   15ef0:	vdiv.f64	d5, d6, d7
   15ef4:	vstr	d5, [sp]
   15ef8:	mov	r3, r7
   15efc:	ldr	r2, [pc, #52]	; 15f38 <__assert_fail@plt+0x466c>
   15f00:	mov	r1, #1
   15f04:	mov	r0, r4
   15f08:	bl	11764 <__fprintf_chk@plt>
   15f0c:	mov	r3, r8
   15f10:	ldr	r2, [pc, #36]	; 15f3c <__assert_fail@plt+0x4670>
   15f14:	mov	r1, #1
   15f18:	mov	r0, r4
   15f1c:	bl	11764 <__fprintf_chk@plt>
   15f20:	add	sp, sp, #8
   15f24:	pop	{r4, r5, r6, r7, r8, pc}
   15f28:	andeq	r0, r0, r0
   15f2c:	subsmi	r0, r9, r0
   15f30:	andeq	fp, r1, ip, lsr #17
   15f34:	andeq	fp, r1, r4, asr #17
   15f38:	ldrdeq	fp, [r1], -ip
   15f3c:	andeq	fp, r1, r0, lsl #18
   15f40:	push	{r4, r5, r6, lr}
   15f44:	mov	r6, r0
   15f48:	mov	r5, r1
   15f4c:	bl	159ec <__assert_fail@plt+0x4120>
   15f50:	ldr	r1, [r0]
   15f54:	cmp	r1, #0
   15f58:	beq	15fac <__assert_fail@plt+0x46e0>
   15f5c:	mov	r4, r0
   15f60:	cmp	r0, #0
   15f64:	beq	15fb4 <__assert_fail@plt+0x46e8>
   15f68:	cmp	r5, r1
   15f6c:	beq	15f9c <__assert_fail@plt+0x46d0>
   15f70:	ldr	r3, [r6, #28]
   15f74:	mov	r0, r5
   15f78:	blx	r3
   15f7c:	cmp	r0, #0
   15f80:	bne	15f9c <__assert_fail@plt+0x46d0>
   15f84:	ldr	r4, [r4, #4]
   15f88:	cmp	r4, #0
   15f8c:	beq	15fa4 <__assert_fail@plt+0x46d8>
   15f90:	ldr	r1, [r4]
   15f94:	cmp	r5, r1
   15f98:	bne	15f70 <__assert_fail@plt+0x46a4>
   15f9c:	ldr	r0, [r4]
   15fa0:	pop	{r4, r5, r6, pc}
   15fa4:	mov	r0, #0
   15fa8:	pop	{r4, r5, r6, pc}
   15fac:	mov	r0, #0
   15fb0:	pop	{r4, r5, r6, pc}
   15fb4:	mov	r0, #0
   15fb8:	pop	{r4, r5, r6, pc}
   15fbc:	ldr	r3, [r0, #16]
   15fc0:	cmp	r3, #0
   15fc4:	beq	16008 <__assert_fail@plt+0x473c>
   15fc8:	ldr	r3, [r0]
   15fcc:	ldr	r2, [r0, #4]
   15fd0:	cmp	r3, r2
   15fd4:	bcs	16000 <__assert_fail@plt+0x4734>
   15fd8:	ldr	r0, [r3]
   15fdc:	cmp	r0, #0
   15fe0:	bne	15ffc <__assert_fail@plt+0x4730>
   15fe4:	add	r3, r3, #8
   15fe8:	cmp	r3, r2
   15fec:	bcs	16000 <__assert_fail@plt+0x4734>
   15ff0:	ldr	r0, [r3]
   15ff4:	cmp	r0, #0
   15ff8:	beq	15fe4 <__assert_fail@plt+0x4718>
   15ffc:	bx	lr
   16000:	push	{r4, lr}
   16004:	bl	11878 <abort@plt>
   16008:	mov	r0, #0
   1600c:	b	15ffc <__assert_fail@plt+0x4730>
   16010:	push	{r4, r5, r6, lr}
   16014:	mov	r5, r0
   16018:	mov	r4, r1
   1601c:	bl	159ec <__assert_fail@plt+0x4120>
   16020:	mov	r2, r0
   16024:	mov	r3, r0
   16028:	ldr	r1, [r3]
   1602c:	cmp	r4, r1
   16030:	beq	16044 <__assert_fail@plt+0x4778>
   16034:	ldr	r3, [r3, #4]
   16038:	cmp	r3, #0
   1603c:	bne	16028 <__assert_fail@plt+0x475c>
   16040:	b	16050 <__assert_fail@plt+0x4784>
   16044:	ldr	r3, [r3, #4]
   16048:	cmp	r3, #0
   1604c:	bne	16070 <__assert_fail@plt+0x47a4>
   16050:	ldr	r3, [r5, #4]
   16054:	add	r2, r2, #8
   16058:	cmp	r2, r3
   1605c:	bcs	16078 <__assert_fail@plt+0x47ac>
   16060:	ldr	r0, [r2]
   16064:	cmp	r0, #0
   16068:	beq	16054 <__assert_fail@plt+0x4788>
   1606c:	pop	{r4, r5, r6, pc}
   16070:	ldr	r0, [r3]
   16074:	pop	{r4, r5, r6, pc}
   16078:	mov	r0, #0
   1607c:	pop	{r4, r5, r6, pc}
   16080:	push	{r4, r5, lr}
   16084:	ldr	r4, [r0]
   16088:	ldr	r3, [r0, #4]
   1608c:	cmp	r4, r3
   16090:	bcs	160fc <__assert_fail@plt+0x4830>
   16094:	mov	r5, r0
   16098:	mov	r0, #0
   1609c:	b	160b0 <__assert_fail@plt+0x47e4>
   160a0:	add	r4, r4, #8
   160a4:	ldr	r3, [r5, #4]
   160a8:	cmp	r3, r4
   160ac:	bls	160f8 <__assert_fail@plt+0x482c>
   160b0:	ldr	r3, [r4]
   160b4:	cmp	r3, #0
   160b8:	beq	160a0 <__assert_fail@plt+0x47d4>
   160bc:	cmp	r4, #0
   160c0:	beq	160a0 <__assert_fail@plt+0x47d4>
   160c4:	cmp	r2, r0
   160c8:	popls	{r4, r5, pc}
   160cc:	add	ip, r1, r0, lsl #2
   160d0:	mov	r3, r4
   160d4:	add	r0, r0, #1
   160d8:	ldr	lr, [r3]
   160dc:	str	lr, [ip], #4
   160e0:	ldr	r3, [r3, #4]
   160e4:	cmp	r3, #0
   160e8:	beq	160a0 <__assert_fail@plt+0x47d4>
   160ec:	cmp	r2, r0
   160f0:	bne	160d4 <__assert_fail@plt+0x4808>
   160f4:	pop	{r4, r5, pc}
   160f8:	pop	{r4, r5, pc}
   160fc:	mov	r0, #0
   16100:	pop	{r4, r5, pc}
   16104:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16108:	ldr	r8, [r0]
   1610c:	ldr	r3, [r0, #4]
   16110:	cmp	r8, r3
   16114:	bcs	1617c <__assert_fail@plt+0x48b0>
   16118:	mov	r7, r2
   1611c:	mov	r6, r1
   16120:	mov	r9, r0
   16124:	mov	r5, #0
   16128:	b	1613c <__assert_fail@plt+0x4870>
   1612c:	add	r8, r8, #8
   16130:	ldr	r3, [r9, #4]
   16134:	cmp	r3, r8
   16138:	bls	16180 <__assert_fail@plt+0x48b4>
   1613c:	ldr	r3, [r8]
   16140:	cmp	r3, #0
   16144:	beq	1612c <__assert_fail@plt+0x4860>
   16148:	cmp	r8, #0
   1614c:	beq	1612c <__assert_fail@plt+0x4860>
   16150:	mov	r4, r8
   16154:	mov	r1, r7
   16158:	ldr	r0, [r4]
   1615c:	blx	r6
   16160:	cmp	r0, #0
   16164:	beq	16180 <__assert_fail@plt+0x48b4>
   16168:	add	r5, r5, #1
   1616c:	ldr	r4, [r4, #4]
   16170:	cmp	r4, #0
   16174:	bne	16154 <__assert_fail@plt+0x4888>
   16178:	b	1612c <__assert_fail@plt+0x4860>
   1617c:	mov	r5, #0
   16180:	mov	r0, r5
   16184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16188:	ldrb	r3, [r0]
   1618c:	cmp	r3, #0
   16190:	beq	161c8 <__assert_fail@plt+0x48fc>
   16194:	push	{r4, r5, r6, lr}
   16198:	mov	r4, r0
   1619c:	mov	r5, r1
   161a0:	mov	r1, #0
   161a4:	rsb	r0, r1, r1, lsl #5
   161a8:	mov	r1, r5
   161ac:	add	r0, r0, r3
   161b0:	bl	1ab34 <lchmod@@Base+0x413c>
   161b4:	ldrb	r3, [r4, #1]!
   161b8:	cmp	r3, #0
   161bc:	bne	161a4 <__assert_fail@plt+0x48d8>
   161c0:	mov	r0, r1
   161c4:	pop	{r4, r5, r6, pc}
   161c8:	mov	r1, #0
   161cc:	mov	r0, r1
   161d0:	bx	lr
   161d4:	push	{lr}		; (str lr, [sp, #-4]!)
   161d8:	mov	ip, r0
   161dc:	ldr	lr, [pc, #16]	; 161f4 <__assert_fail@plt+0x4928>
   161e0:	ldm	lr!, {r0, r1, r2, r3}
   161e4:	stmia	ip!, {r0, r1, r2, r3}
   161e8:	ldr	r3, [lr]
   161ec:	str	r3, [ip]
   161f0:	pop	{pc}		; (ldr pc, [sp], #4)
   161f4:	muleq	r1, r8, r8
   161f8:	push	{r4, r5, r6, r7, r8, lr}
   161fc:	mov	r8, r0
   16200:	mov	r5, r1
   16204:	subs	r7, r2, #0
   16208:	ldr	r2, [pc, #180]	; 162c4 <__assert_fail@plt+0x49f8>
   1620c:	cmp	r7, #0
   16210:	moveq	r7, r2
   16214:	subs	r6, r3, #0
   16218:	ldr	r3, [pc, #168]	; 162c8 <__assert_fail@plt+0x49fc>
   1621c:	cmp	r6, #0
   16220:	moveq	r6, r3
   16224:	mov	r0, #40	; 0x28
   16228:	bl	1a030 <lchmod@@Base+0x3638>
   1622c:	subs	r4, r0, #0
   16230:	beq	162ac <__assert_fail@plt+0x49e0>
   16234:	ldr	r3, [pc, #144]	; 162cc <__assert_fail@plt+0x4a00>
   16238:	cmp	r5, #0
   1623c:	moveq	r5, r3
   16240:	str	r5, [r4, #20]
   16244:	mov	r0, r4
   16248:	bl	1592c <__assert_fail@plt+0x4060>
   1624c:	cmp	r0, #0
   16250:	beq	162b4 <__assert_fail@plt+0x49e8>
   16254:	mov	r1, r5
   16258:	mov	r0, r8
   1625c:	bl	15a20 <__assert_fail@plt+0x4154>
   16260:	str	r0, [r4, #8]
   16264:	cmp	r0, #0
   16268:	beq	162b4 <__assert_fail@plt+0x49e8>
   1626c:	mov	r1, #8
   16270:	bl	19fe0 <lchmod@@Base+0x35e8>
   16274:	str	r0, [r4]
   16278:	cmp	r0, #0
   1627c:	beq	162b4 <__assert_fail@plt+0x49e8>
   16280:	ldr	r3, [r4, #8]
   16284:	add	r0, r0, r3, lsl #3
   16288:	str	r0, [r4, #4]
   1628c:	mov	r3, #0
   16290:	str	r3, [r4, #12]
   16294:	str	r3, [r4, #16]
   16298:	str	r7, [r4, #24]
   1629c:	str	r6, [r4, #28]
   162a0:	ldr	r2, [sp, #24]
   162a4:	str	r2, [r4, #32]
   162a8:	str	r3, [r4, #36]	; 0x24
   162ac:	mov	r0, r4
   162b0:	pop	{r4, r5, r6, r7, r8, pc}
   162b4:	mov	r0, r4
   162b8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   162bc:	mov	r4, #0
   162c0:	b	162ac <__assert_fail@plt+0x49e0>
   162c4:	andeq	r5, r1, r8, lsl #18
   162c8:	andeq	r5, r1, ip, lsl r9
   162cc:	muleq	r1, r8, r8
   162d0:	push	{r4, r5, r6, r7, r8, lr}
   162d4:	mov	r5, r0
   162d8:	ldr	r7, [r0]
   162dc:	ldr	r3, [r0, #4]
   162e0:	cmp	r7, r3
   162e4:	bcs	16378 <__assert_fail@plt+0x4aac>
   162e8:	add	r7, r7, #8
   162ec:	mov	r6, #0
   162f0:	b	16358 <__assert_fail@plt+0x4a8c>
   162f4:	str	r6, [r4]
   162f8:	ldr	r3, [r4, #4]
   162fc:	ldr	r2, [r5, #36]	; 0x24
   16300:	str	r2, [r4, #4]
   16304:	str	r4, [r5, #36]	; 0x24
   16308:	mov	r4, r3
   1630c:	cmp	r3, #0
   16310:	beq	1632c <__assert_fail@plt+0x4a60>
   16314:	ldr	r3, [r5, #32]
   16318:	cmp	r3, #0
   1631c:	beq	162f4 <__assert_fail@plt+0x4a28>
   16320:	ldr	r0, [r4]
   16324:	blx	r3
   16328:	b	162f4 <__assert_fail@plt+0x4a28>
   1632c:	ldr	r3, [r5, #32]
   16330:	cmp	r3, #0
   16334:	beq	16340 <__assert_fail@plt+0x4a74>
   16338:	ldr	r0, [r8, #-8]
   1633c:	blx	r3
   16340:	str	r6, [r8, #-8]
   16344:	str	r6, [r8, #-4]
   16348:	add	r7, r7, #8
   1634c:	ldr	r3, [r5, #4]
   16350:	cmp	r3, r8
   16354:	bls	16378 <__assert_fail@plt+0x4aac>
   16358:	mov	r8, r7
   1635c:	ldr	r3, [r7, #-8]
   16360:	cmp	r3, #0
   16364:	beq	16348 <__assert_fail@plt+0x4a7c>
   16368:	ldr	r4, [r7, #-4]
   1636c:	cmp	r4, #0
   16370:	bne	16314 <__assert_fail@plt+0x4a48>
   16374:	b	1632c <__assert_fail@plt+0x4a60>
   16378:	mov	r3, #0
   1637c:	str	r3, [r5, #12]
   16380:	str	r3, [r5, #16]
   16384:	pop	{r4, r5, r6, r7, r8, pc}
   16388:	push	{r4, r5, r6, lr}
   1638c:	mov	r5, r0
   16390:	ldr	r3, [r0, #32]
   16394:	cmp	r3, #0
   16398:	beq	16400 <__assert_fail@plt+0x4b34>
   1639c:	ldr	r3, [r0, #16]
   163a0:	cmp	r3, #0
   163a4:	beq	16400 <__assert_fail@plt+0x4b34>
   163a8:	ldr	r6, [r0]
   163ac:	ldr	r3, [r0, #4]
   163b0:	cmp	r6, r3
   163b4:	bcc	163cc <__assert_fail@plt+0x4b00>
   163b8:	b	16440 <__assert_fail@plt+0x4b74>
   163bc:	add	r6, r6, #8
   163c0:	ldr	r3, [r5, #4]
   163c4:	cmp	r3, r6
   163c8:	bls	16400 <__assert_fail@plt+0x4b34>
   163cc:	ldr	r3, [r6]
   163d0:	cmp	r3, #0
   163d4:	beq	163bc <__assert_fail@plt+0x4af0>
   163d8:	cmp	r6, #0
   163dc:	beq	163bc <__assert_fail@plt+0x4af0>
   163e0:	mov	r4, r6
   163e4:	ldr	r3, [r5, #32]
   163e8:	ldr	r0, [r4]
   163ec:	blx	r3
   163f0:	ldr	r4, [r4, #4]
   163f4:	cmp	r4, #0
   163f8:	bne	163e4 <__assert_fail@plt+0x4b18>
   163fc:	b	163bc <__assert_fail@plt+0x4af0>
   16400:	ldr	r6, [r5]
   16404:	ldr	r3, [r5, #4]
   16408:	cmp	r6, r3
   1640c:	bcs	16440 <__assert_fail@plt+0x4b74>
   16410:	ldr	r0, [r6, #4]
   16414:	cmp	r0, #0
   16418:	beq	16430 <__assert_fail@plt+0x4b64>
   1641c:	ldr	r4, [r0, #4]
   16420:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16424:	mov	r0, r4
   16428:	cmp	r4, #0
   1642c:	bne	1641c <__assert_fail@plt+0x4b50>
   16430:	add	r6, r6, #8
   16434:	ldr	r3, [r5, #4]
   16438:	cmp	r3, r6
   1643c:	bhi	16410 <__assert_fail@plt+0x4b44>
   16440:	ldr	r0, [r5, #36]	; 0x24
   16444:	cmp	r0, #0
   16448:	beq	16460 <__assert_fail@plt+0x4b94>
   1644c:	ldr	r4, [r0, #4]
   16450:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16454:	mov	r0, r4
   16458:	cmp	r4, #0
   1645c:	bne	1644c <__assert_fail@plt+0x4b80>
   16460:	ldr	r0, [r5]
   16464:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16468:	mov	r0, r5
   1646c:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16470:	pop	{r4, r5, r6, pc}
   16474:	push	{r4, r5, lr}
   16478:	sub	sp, sp, #44	; 0x2c
   1647c:	mov	r4, r0
   16480:	mov	r0, r1
   16484:	ldr	r1, [r4, #20]
   16488:	bl	15a20 <__assert_fail@plt+0x4154>
   1648c:	subs	r5, r0, #0
   16490:	beq	16588 <__assert_fail@plt+0x4cbc>
   16494:	ldr	r3, [r4, #8]
   16498:	cmp	r5, r3
   1649c:	beq	16598 <__assert_fail@plt+0x4ccc>
   164a0:	mov	r1, #8
   164a4:	mov	r0, r5
   164a8:	bl	19fe0 <lchmod@@Base+0x35e8>
   164ac:	str	r0, [sp]
   164b0:	cmp	r0, #0
   164b4:	beq	165a0 <__assert_fail@plt+0x4cd4>
   164b8:	str	r5, [sp, #8]
   164bc:	add	r0, r0, r5, lsl #3
   164c0:	str	r0, [sp, #4]
   164c4:	mov	r2, #0
   164c8:	str	r2, [sp, #12]
   164cc:	str	r2, [sp, #16]
   164d0:	ldr	r3, [r4, #20]
   164d4:	str	r3, [sp, #20]
   164d8:	ldr	r3, [r4, #24]
   164dc:	str	r3, [sp, #24]
   164e0:	ldr	r3, [r4, #28]
   164e4:	str	r3, [sp, #28]
   164e8:	ldr	r3, [r4, #32]
   164ec:	str	r3, [sp, #32]
   164f0:	ldr	r3, [r4, #36]	; 0x24
   164f4:	str	r3, [sp, #36]	; 0x24
   164f8:	mov	r1, r4
   164fc:	mov	r0, sp
   16500:	bl	15b1c <__assert_fail@plt+0x4250>
   16504:	subs	r5, r0, #0
   16508:	bne	16550 <__assert_fail@plt+0x4c84>
   1650c:	ldr	r3, [sp, #36]	; 0x24
   16510:	str	r3, [r4, #36]	; 0x24
   16514:	mov	r2, #1
   16518:	mov	r1, sp
   1651c:	mov	r0, r4
   16520:	bl	15b1c <__assert_fail@plt+0x4250>
   16524:	cmp	r0, #0
   16528:	beq	16584 <__assert_fail@plt+0x4cb8>
   1652c:	mov	r2, #0
   16530:	mov	r1, sp
   16534:	mov	r0, r4
   16538:	bl	15b1c <__assert_fail@plt+0x4250>
   1653c:	cmp	r0, #0
   16540:	beq	16584 <__assert_fail@plt+0x4cb8>
   16544:	ldr	r0, [sp]
   16548:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1654c:	b	1658c <__assert_fail@plt+0x4cc0>
   16550:	ldr	r0, [r4]
   16554:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16558:	ldr	r3, [sp]
   1655c:	str	r3, [r4]
   16560:	ldr	r3, [sp, #4]
   16564:	str	r3, [r4, #4]
   16568:	ldr	r3, [sp, #8]
   1656c:	str	r3, [r4, #8]
   16570:	ldr	r3, [sp, #12]
   16574:	str	r3, [r4, #12]
   16578:	ldr	r3, [sp, #36]	; 0x24
   1657c:	str	r3, [r4, #36]	; 0x24
   16580:	b	1658c <__assert_fail@plt+0x4cc0>
   16584:	bl	11878 <abort@plt>
   16588:	mov	r5, #0
   1658c:	mov	r0, r5
   16590:	add	sp, sp, #44	; 0x2c
   16594:	pop	{r4, r5, pc}
   16598:	mov	r5, #1
   1659c:	b	1658c <__assert_fail@plt+0x4cc0>
   165a0:	mov	r5, #0
   165a4:	b	1658c <__assert_fail@plt+0x4cc0>
   165a8:	push	{r4, r5, r6, lr}
   165ac:	sub	sp, sp, #8
   165b0:	subs	r6, r1, #0
   165b4:	beq	165f0 <__assert_fail@plt+0x4d24>
   165b8:	mov	r4, r0
   165bc:	mov	r5, r2
   165c0:	mov	r3, #0
   165c4:	add	r2, sp, #4
   165c8:	mov	r1, r6
   165cc:	bl	15c70 <__assert_fail@plt+0x43a4>
   165d0:	cmp	r0, #0
   165d4:	beq	165f4 <__assert_fail@plt+0x4d28>
   165d8:	cmp	r5, #0
   165dc:	moveq	r0, #0
   165e0:	strne	r0, [r5]
   165e4:	movne	r0, #0
   165e8:	add	sp, sp, #8
   165ec:	pop	{r4, r5, r6, pc}
   165f0:	bl	11878 <abort@plt>
   165f4:	vldr	s15, [r4, #12]
   165f8:	vcvt.f32.u32	s14, s15
   165fc:	ldr	r3, [r4, #20]
   16600:	vldr	s15, [r4, #8]
   16604:	vcvt.f32.u32	s15, s15
   16608:	vldr	s13, [r3, #8]
   1660c:	vmul.f32	s15, s15, s13
   16610:	vcmpe.f32	s14, s15
   16614:	vmrs	APSR_nzcv, fpscr
   16618:	bgt	16668 <__assert_fail@plt+0x4d9c>
   1661c:	ldr	r3, [sp, #4]
   16620:	ldr	r2, [r3]
   16624:	cmp	r2, #0
   16628:	beq	1670c <__assert_fail@plt+0x4e40>
   1662c:	ldr	r0, [r4, #36]	; 0x24
   16630:	cmp	r0, #0
   16634:	beq	166f4 <__assert_fail@plt+0x4e28>
   16638:	ldr	r3, [r0, #4]
   1663c:	str	r3, [r4, #36]	; 0x24
   16640:	str	r6, [r0]
   16644:	ldr	r3, [sp, #4]
   16648:	ldr	r2, [r3, #4]
   1664c:	str	r2, [r0, #4]
   16650:	str	r0, [r3, #4]
   16654:	ldr	r3, [r4, #16]
   16658:	add	r3, r3, #1
   1665c:	str	r3, [r4, #16]
   16660:	mov	r0, #1
   16664:	b	165e8 <__assert_fail@plt+0x4d1c>
   16668:	mov	r0, r4
   1666c:	bl	1592c <__assert_fail@plt+0x4060>
   16670:	ldr	r3, [r4, #20]
   16674:	vldr	s13, [r3, #8]
   16678:	vldr	s15, [r4, #8]
   1667c:	vcvt.f32.u32	s15, s15
   16680:	vldr	s14, [r4, #12]
   16684:	vcvt.f32.u32	s14, s14
   16688:	vmul.f32	s12, s13, s15
   1668c:	vcmpe.f32	s14, s12
   16690:	vmrs	APSR_nzcv, fpscr
   16694:	ble	1661c <__assert_fail@plt+0x4d50>
   16698:	ldrb	r2, [r3, #16]
   1669c:	cmp	r2, #0
   166a0:	vldr	s14, [r3, #12]
   166a4:	vmul.f32	s15, s15, s14
   166a8:	vmuleq.f32	s15, s15, s13
   166ac:	vldr	s14, [pc, #140]	; 16740 <__assert_fail@plt+0x4e74>
   166b0:	vcmpe.f32	s15, s14
   166b4:	vmrs	APSR_nzcv, fpscr
   166b8:	bge	16730 <__assert_fail@plt+0x4e64>
   166bc:	vcvt.u32.f32	s15, s15
   166c0:	vmov	r1, s15
   166c4:	mov	r0, r4
   166c8:	bl	16474 <__assert_fail@plt+0x4ba8>
   166cc:	cmp	r0, #0
   166d0:	beq	16738 <__assert_fail@plt+0x4e6c>
   166d4:	mov	r3, #0
   166d8:	add	r2, sp, #4
   166dc:	mov	r1, r6
   166e0:	mov	r0, r4
   166e4:	bl	15c70 <__assert_fail@plt+0x43a4>
   166e8:	cmp	r0, #0
   166ec:	beq	1661c <__assert_fail@plt+0x4d50>
   166f0:	bl	11878 <abort@plt>
   166f4:	mov	r0, #8
   166f8:	bl	1a030 <lchmod@@Base+0x3638>
   166fc:	cmp	r0, #0
   16700:	bne	16640 <__assert_fail@plt+0x4d74>
   16704:	mvn	r0, #0
   16708:	b	165e8 <__assert_fail@plt+0x4d1c>
   1670c:	str	r6, [r3]
   16710:	ldr	r3, [r4, #16]
   16714:	add	r3, r3, #1
   16718:	str	r3, [r4, #16]
   1671c:	ldr	r3, [r4, #12]
   16720:	add	r3, r3, #1
   16724:	str	r3, [r4, #12]
   16728:	mov	r0, #1
   1672c:	b	165e8 <__assert_fail@plt+0x4d1c>
   16730:	mvn	r0, #0
   16734:	b	165e8 <__assert_fail@plt+0x4d1c>
   16738:	mvn	r0, #0
   1673c:	b	165e8 <__assert_fail@plt+0x4d1c>
   16740:	svcmi	0x00800000
   16744:	push	{r4, lr}
   16748:	sub	sp, sp, #8
   1674c:	mov	r4, r1
   16750:	add	r2, sp, #4
   16754:	bl	165a8 <__assert_fail@plt+0x4cdc>
   16758:	cmn	r0, #1
   1675c:	beq	16774 <__assert_fail@plt+0x4ea8>
   16760:	cmp	r0, #0
   16764:	movne	r0, r4
   16768:	ldreq	r0, [sp, #4]
   1676c:	add	sp, sp, #8
   16770:	pop	{r4, pc}
   16774:	mov	r0, #0
   16778:	b	1676c <__assert_fail@plt+0x4ea0>
   1677c:	push	{r4, r5, r6, lr}
   16780:	sub	sp, sp, #8
   16784:	mov	r4, r0
   16788:	mov	r3, #1
   1678c:	add	r2, sp, #4
   16790:	bl	15c70 <__assert_fail@plt+0x43a4>
   16794:	subs	r5, r0, #0
   16798:	beq	167b8 <__assert_fail@plt+0x4eec>
   1679c:	ldr	r3, [r4, #16]
   167a0:	sub	r3, r3, #1
   167a4:	str	r3, [r4, #16]
   167a8:	ldr	r3, [sp, #4]
   167ac:	ldr	r3, [r3]
   167b0:	cmp	r3, #0
   167b4:	beq	167c4 <__assert_fail@plt+0x4ef8>
   167b8:	mov	r0, r5
   167bc:	add	sp, sp, #8
   167c0:	pop	{r4, r5, r6, pc}
   167c4:	ldr	r3, [r4, #12]
   167c8:	sub	r3, r3, #1
   167cc:	str	r3, [r4, #12]
   167d0:	vmov	s15, r3
   167d4:	vcvt.f32.u32	s15, s15
   167d8:	ldr	r3, [r4, #20]
   167dc:	vldr	s14, [r4, #8]
   167e0:	vcvt.f32.u32	s14, s14
   167e4:	vldr	s13, [r3]
   167e8:	vmul.f32	s14, s14, s13
   167ec:	vcmpe.f32	s15, s14
   167f0:	vmrs	APSR_nzcv, fpscr
   167f4:	bpl	167b8 <__assert_fail@plt+0x4eec>
   167f8:	mov	r0, r4
   167fc:	bl	1592c <__assert_fail@plt+0x4060>
   16800:	ldr	r3, [r4, #20]
   16804:	vldr	s15, [r4, #8]
   16808:	vcvt.f32.u32	s15, s15
   1680c:	vldr	s14, [r4, #12]
   16810:	vcvt.f32.u32	s13, s14
   16814:	vldr	s14, [r3]
   16818:	vmul.f32	s14, s15, s14
   1681c:	vcmpe.f32	s13, s14
   16820:	vmrs	APSR_nzcv, fpscr
   16824:	bpl	167b8 <__assert_fail@plt+0x4eec>
   16828:	ldrb	r2, [r3, #16]
   1682c:	cmp	r2, #0
   16830:	vldr	s14, [r3, #4]
   16834:	vmuleq.f32	s15, s15, s14
   16838:	vldreq	s14, [r3, #8]
   1683c:	vmul.f32	s15, s15, s14
   16840:	vcvt.u32.f32	s15, s15
   16844:	vmov	r1, s15
   16848:	mov	r0, r4
   1684c:	bl	16474 <__assert_fail@plt+0x4ba8>
   16850:	cmp	r0, #0
   16854:	bne	167b8 <__assert_fail@plt+0x4eec>
   16858:	ldr	r0, [r4, #36]	; 0x24
   1685c:	cmp	r0, #0
   16860:	beq	16878 <__assert_fail@plt+0x4fac>
   16864:	ldr	r6, [r0, #4]
   16868:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1686c:	mov	r0, r6
   16870:	cmp	r6, #0
   16874:	bne	16864 <__assert_fail@plt+0x4f98>
   16878:	mov	r3, #0
   1687c:	str	r3, [r4, #36]	; 0x24
   16880:	b	167b8 <__assert_fail@plt+0x4eec>
   16884:	push	{r4, lr}
   16888:	bl	1677c <__assert_fail@plt+0x4eb0>
   1688c:	pop	{r4, pc}
   16890:	push	{r4, r5, r6, lr}
   16894:	mov	r4, r0
   16898:	mov	r6, r1
   1689c:	ldr	r0, [r0]
   168a0:	bl	1a718 <lchmod@@Base+0x3d20>
   168a4:	ldrd	r4, [r4, #8]
   168a8:	mov	r2, r6
   168ac:	mov	r3, #0
   168b0:	eor	r4, r4, r0
   168b4:	mov	r0, r4
   168b8:	mov	r1, r5
   168bc:	bl	1ad94 <lchmod@@Base+0x439c>
   168c0:	mov	r0, r2
   168c4:	pop	{r4, r5, r6, pc}
   168c8:	push	{r4, r5, r6, lr}
   168cc:	ldrd	r4, [r0, #8]
   168d0:	ldrd	r2, [r1, #8]
   168d4:	cmp	r5, r3
   168d8:	cmpeq	r4, r2
   168dc:	beq	168e8 <__assert_fail@plt+0x501c>
   168e0:	mov	r0, #0
   168e4:	pop	{r4, r5, r6, pc}
   168e8:	ldrd	r4, [r0, #16]
   168ec:	ldrd	r2, [r1, #16]
   168f0:	cmp	r5, r3
   168f4:	cmpeq	r4, r2
   168f8:	beq	16904 <__assert_fail@plt+0x5038>
   168fc:	mov	r0, #0
   16900:	pop	{r4, r5, r6, pc}
   16904:	ldr	r1, [r1]
   16908:	ldr	r0, [r0]
   1690c:	bl	114d0 <strcmp@plt>
   16910:	clz	r0, r0
   16914:	lsr	r0, r0, #5
   16918:	pop	{r4, r5, r6, pc}
   1691c:	push	{r4, lr}
   16920:	mov	r4, r0
   16924:	ldr	r0, [r0]
   16928:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1692c:	mov	r0, r4
   16930:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16934:	pop	{r4, pc}
   16938:	mov	r3, #1
   1693c:	strb	r3, [r0, #28]
   16940:	mov	r3, #0
   16944:	str	r3, [r0, #20]
   16948:	str	r3, [r0, #24]
   1694c:	str	r1, [r0]
   16950:	str	r1, [r0, #4]
   16954:	str	r1, [r0, #8]
   16958:	str	r1, [r0, #12]
   1695c:	str	r1, [r0, #16]
   16960:	bx	lr
   16964:	ldrb	r0, [r0, #28]
   16968:	bx	lr
   1696c:	mov	r2, r0
   16970:	ldrb	ip, [r0, #28]
   16974:	eor	ip, ip, #1
   16978:	ldr	r3, [r0, #20]
   1697c:	add	r3, ip, r3
   16980:	and	r3, r3, #3
   16984:	ldr	r0, [r0, r3, lsl #2]
   16988:	str	r1, [r2, r3, lsl #2]
   1698c:	str	r3, [r2, #20]
   16990:	ldr	r1, [r2, #24]
   16994:	cmp	r3, r1
   16998:	addeq	r3, ip, r3
   1699c:	andeq	r3, r3, #3
   169a0:	streq	r3, [r2, #24]
   169a4:	mov	r3, #0
   169a8:	strb	r3, [r2, #28]
   169ac:	bx	lr
   169b0:	ldrb	r3, [r0, #28]
   169b4:	cmp	r3, #0
   169b8:	bne	169f0 <__assert_fail@plt+0x5124>
   169bc:	mov	r2, r0
   169c0:	ldr	r3, [r0, #20]
   169c4:	ldr	r0, [r0, r3, lsl #2]
   169c8:	ldr	r1, [r2, #16]
   169cc:	str	r1, [r2, r3, lsl #2]
   169d0:	ldr	r1, [r2, #24]
   169d4:	cmp	r3, r1
   169d8:	moveq	r3, #1
   169dc:	strbeq	r3, [r2, #28]
   169e0:	addne	r3, r3, #3
   169e4:	andne	r3, r3, #3
   169e8:	strne	r3, [r2, #20]
   169ec:	bx	lr
   169f0:	push	{r4, lr}
   169f4:	bl	11878 <abort@plt>

000169f8 <lchmod@@Base>:
   169f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   169fc:	sub	sp, sp, #148	; 0x94
   16a00:	mov	r9, r0
   16a04:	mov	r6, r1
   16a08:	mov	r1, #2654208	; 0x288000
   16a0c:	bl	11644 <open64@plt>
   16a10:	subs	r4, r0, #0
   16a14:	movlt	r5, r4
   16a18:	blt	16aa0 <lchmod@@Base+0xa8>
   16a1c:	mov	r3, #4096	; 0x1000
   16a20:	str	r3, [sp]
   16a24:	add	r3, sp, #40	; 0x28
   16a28:	ldr	r2, [pc, #204]	; 16afc <lchmod@@Base+0x104>
   16a2c:	mov	r1, r4
   16a30:	mov	r0, #3
   16a34:	bl	115c0 <__fxstatat64@plt>
   16a38:	cmp	r0, #0
   16a3c:	bne	16aac <lchmod@@Base+0xb4>
   16a40:	ldr	r3, [sp, #56]	; 0x38
   16a44:	and	r3, r3, #61440	; 0xf000
   16a48:	cmp	r3, #40960	; 0xa000
   16a4c:	beq	16acc <lchmod@@Base+0xd4>
   16a50:	str	r4, [sp]
   16a54:	ldr	r3, [pc, #164]	; 16b00 <lchmod@@Base+0x108>
   16a58:	mov	r2, #26
   16a5c:	mov	r1, #1
   16a60:	add	r0, sp, #12
   16a64:	bl	11728 <__sprintf_chk@plt>
   16a68:	mov	r1, r6
   16a6c:	add	r0, sp, #12
   16a70:	bl	11848 <chmod@plt>
   16a74:	mov	r5, r0
   16a78:	bl	1171c <__errno_location@plt>
   16a7c:	mov	r7, r0
   16a80:	ldr	r8, [r0]
   16a84:	mov	r0, r4
   16a88:	bl	11884 <close@plt>
   16a8c:	cmp	r5, #0
   16a90:	beq	16aa0 <lchmod@@Base+0xa8>
   16a94:	cmp	r8, #2
   16a98:	strne	r8, [r7]
   16a9c:	beq	16ae8 <lchmod@@Base+0xf0>
   16aa0:	mov	r0, r5
   16aa4:	add	sp, sp, #148	; 0x94
   16aa8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16aac:	bl	1171c <__errno_location@plt>
   16ab0:	mov	r5, r0
   16ab4:	ldr	r6, [r0]
   16ab8:	mov	r0, r4
   16abc:	bl	11884 <close@plt>
   16ac0:	str	r6, [r5]
   16ac4:	mvn	r5, #0
   16ac8:	b	16aa0 <lchmod@@Base+0xa8>
   16acc:	mov	r0, r4
   16ad0:	bl	11884 <close@plt>
   16ad4:	bl	1171c <__errno_location@plt>
   16ad8:	mov	r3, #95	; 0x5f
   16adc:	str	r3, [r0]
   16ae0:	mvn	r5, #0
   16ae4:	b	16aa0 <lchmod@@Base+0xa8>
   16ae8:	mov	r1, r6
   16aec:	mov	r0, r9
   16af0:	bl	11848 <chmod@plt>
   16af4:	mov	r5, r0
   16af8:	b	16aa0 <lchmod@@Base+0xa8>
   16afc:	strdeq	fp, [r1], -ip
   16b00:	andeq	fp, r1, r8, lsl r9
   16b04:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b08:	mov	r4, r0
   16b0c:	ldrb	r3, [r0]
   16b10:	sub	r2, r3, #48	; 0x30
   16b14:	uxtb	r2, r2
   16b18:	cmp	r2, #7
   16b1c:	bls	16bb4 <lchmod@@Base+0x1bc>
   16b20:	cmp	r3, #0
   16b24:	moveq	r0, #1
   16b28:	beq	16b58 <lchmod@@Base+0x160>
   16b2c:	mov	r1, r4
   16b30:	mov	r0, #1
   16b34:	and	r2, r3, #239	; 0xef
   16b38:	cmp	r3, #43	; 0x2b
   16b3c:	cmpne	r2, #45	; 0x2d
   16b40:	moveq	r3, #1
   16b44:	movne	r3, #0
   16b48:	add	r0, r0, r3
   16b4c:	ldrb	r3, [r1, #1]!
   16b50:	cmp	r3, #0
   16b54:	bne	16b34 <lchmod@@Base+0x13c>
   16b58:	mov	r1, #16
   16b5c:	bl	1950c <lchmod@@Base+0x2b14>
   16b60:	mov	ip, #0
   16b64:	mov	r8, #3
   16b68:	mov	sl, #1
   16b6c:	mov	fp, #2
   16b70:	ldr	r5, [pc, #820]	; 16eac <lchmod@@Base+0x4b4>
   16b74:	mov	r1, #0
   16b78:	mov	r3, r4
   16b7c:	add	r4, r4, #1
   16b80:	ldrb	r2, [r3]
   16b84:	cmp	r2, #97	; 0x61
   16b88:	beq	16c84 <lchmod@@Base+0x28c>
   16b8c:	bls	16c40 <lchmod@@Base+0x248>
   16b90:	cmp	r2, #111	; 0x6f
   16b94:	beq	16c78 <lchmod@@Base+0x280>
   16b98:	cmp	r2, #117	; 0x75
   16b9c:	beq	16c64 <lchmod@@Base+0x26c>
   16ba0:	cmp	r2, #103	; 0x67
   16ba4:	beq	16c6c <lchmod@@Base+0x274>
   16ba8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   16bac:	mov	r0, #0
   16bb0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bb4:	mov	r3, r0
   16bb8:	mov	r5, #0
   16bbc:	ldr	r0, [pc, #744]	; 16eac <lchmod@@Base+0x4b4>
   16bc0:	lsl	r5, r5, #3
   16bc4:	sub	r5, r5, #48	; 0x30
   16bc8:	ldrb	r2, [r3], #1
   16bcc:	add	r5, r2, r5
   16bd0:	cmp	r5, r0
   16bd4:	bhi	16e9c <lchmod@@Base+0x4a4>
   16bd8:	ldrb	r1, [r3]
   16bdc:	sub	r2, r1, #48	; 0x30
   16be0:	uxtb	r2, r2
   16be4:	cmp	r2, #7
   16be8:	bls	16bc0 <lchmod@@Base+0x1c8>
   16bec:	cmp	r1, #0
   16bf0:	bne	16ea4 <lchmod@@Base+0x4ac>
   16bf4:	sub	r3, r3, r4
   16bf8:	cmp	r3, #4
   16bfc:	andle	r4, r5, #3072	; 0xc00
   16c00:	mvnle	r4, r4, lsr #10
   16c04:	mvnle	r4, r4, lsl #10
   16c08:	ldrgt	r4, [pc, #668]	; 16eac <lchmod@@Base+0x4b4>
   16c0c:	mov	r0, #32
   16c10:	bl	19414 <lchmod@@Base+0x2a1c>
   16c14:	mov	r3, #61	; 0x3d
   16c18:	strb	r3, [r0]
   16c1c:	mov	r3, #1
   16c20:	strb	r3, [r0, #1]
   16c24:	ldr	r3, [pc, #640]	; 16eac <lchmod@@Base+0x4b4>
   16c28:	str	r3, [r0, #4]
   16c2c:	str	r5, [r0, #8]
   16c30:	str	r4, [r0, #12]
   16c34:	mov	r3, #0
   16c38:	strb	r3, [r0, #17]
   16c3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c40:	cmp	r2, #45	; 0x2d
   16c44:	beq	16c58 <lchmod@@Base+0x260>
   16c48:	cmp	r2, #61	; 0x3d
   16c4c:	beq	16c58 <lchmod@@Base+0x260>
   16c50:	cmp	r2, #43	; 0x2b
   16c54:	bne	16ba8 <lchmod@@Base+0x1b0>
   16c58:	add	r6, ip, #1
   16c5c:	add	ip, r0, ip, lsl #4
   16c60:	b	16d48 <lchmod@@Base+0x350>
   16c64:	orr	r1, r1, #2496	; 0x9c0
   16c68:	b	16b78 <lchmod@@Base+0x180>
   16c6c:	orr	r1, r1, #1072	; 0x430
   16c70:	orr	r1, r1, #8
   16c74:	b	16b78 <lchmod@@Base+0x180>
   16c78:	orr	r1, r1, #516	; 0x204
   16c7c:	orr	r1, r1, #3
   16c80:	b	16b78 <lchmod@@Base+0x180>
   16c84:	ldr	r1, [pc, #544]	; 16eac <lchmod@@Base+0x4b4>
   16c88:	b	16b78 <lchmod@@Base+0x180>
   16c8c:	sub	lr, lr, #48	; 0x30
   16c90:	cmp	lr, #7
   16c94:	movls	r3, #0
   16c98:	bhi	16d78 <lchmod@@Base+0x380>
   16c9c:	lsl	r3, r3, #3
   16ca0:	sub	r3, r3, #48	; 0x30
   16ca4:	ldrb	lr, [r2], #1
   16ca8:	add	r3, lr, r3
   16cac:	cmp	r3, r5
   16cb0:	bhi	16ba8 <lchmod@@Base+0x1b0>
   16cb4:	ldrb	r7, [r2]
   16cb8:	sub	lr, r7, #48	; 0x30
   16cbc:	uxtb	lr, lr
   16cc0:	cmp	lr, #7
   16cc4:	bls	16c9c <lchmod@@Base+0x2a4>
   16cc8:	cmp	r1, #0
   16ccc:	bne	16ba8 <lchmod@@Base+0x1b0>
   16cd0:	cmp	r7, #0
   16cd4:	cmpne	r7, #44	; 0x2c
   16cd8:	bne	16ba8 <lchmod@@Base+0x1b0>
   16cdc:	mov	lr, ip
   16ce0:	strb	r4, [ip]
   16ce4:	strb	sl, [ip, #1]
   16ce8:	str	r5, [ip, #4]
   16cec:	str	r3, [ip, #8]
   16cf0:	mov	r3, r2
   16cf4:	mov	r1, r5
   16cf8:	mov	r7, r5
   16cfc:	b	16d24 <lchmod@@Base+0x32c>
   16d00:	add	r3, r3, #2
   16d04:	mov	r7, #56	; 0x38
   16d08:	mov	lr, ip
   16d0c:	strb	r4, [ip]
   16d10:	strb	r8, [ip, #1]
   16d14:	str	r1, [ip, #4]
   16d18:	str	r7, [ip, #8]
   16d1c:	cmp	r1, #0
   16d20:	andne	r7, r7, r1
   16d24:	str	r7, [lr, #12]
   16d28:	ldrb	r2, [r3]
   16d2c:	add	r4, r6, #1
   16d30:	add	ip, ip, #16
   16d34:	and	lr, r2, #239	; 0xef
   16d38:	cmp	r2, #43	; 0x2b
   16d3c:	cmpne	lr, #45	; 0x2d
   16d40:	bne	16e74 <lchmod@@Base+0x47c>
   16d44:	mov	r6, r4
   16d48:	add	r2, r3, #1
   16d4c:	ldrb	r4, [r3]
   16d50:	ldrb	lr, [r3, #1]
   16d54:	cmp	lr, #103	; 0x67
   16d58:	beq	16d00 <lchmod@@Base+0x308>
   16d5c:	bls	16c8c <lchmod@@Base+0x294>
   16d60:	cmp	lr, #111	; 0x6f
   16d64:	beq	16d84 <lchmod@@Base+0x38c>
   16d68:	cmp	lr, #117	; 0x75
   16d6c:	addeq	r3, r3, #2
   16d70:	moveq	r7, #448	; 0x1c0
   16d74:	beq	16d08 <lchmod@@Base+0x310>
   16d78:	mov	r9, sl
   16d7c:	mov	r7, #0
   16d80:	b	16dbc <lchmod@@Base+0x3c4>
   16d84:	add	r3, r3, #2
   16d88:	mov	r7, #7
   16d8c:	b	16d08 <lchmod@@Base+0x310>
   16d90:	orr	r7, r7, #292	; 0x124
   16d94:	b	16dbc <lchmod@@Base+0x3c4>
   16d98:	orr	r7, r7, #146	; 0x92
   16d9c:	b	16dbc <lchmod@@Base+0x3c4>
   16da0:	orr	r7, r7, #73	; 0x49
   16da4:	b	16dbc <lchmod@@Base+0x3c4>
   16da8:	orr	r7, r7, #3072	; 0xc00
   16dac:	b	16dbc <lchmod@@Base+0x3c4>
   16db0:	orr	r7, r7, #512	; 0x200
   16db4:	b	16dbc <lchmod@@Base+0x3c4>
   16db8:	mov	r9, fp
   16dbc:	mov	r3, r2
   16dc0:	add	r2, r2, #1
   16dc4:	ldrb	lr, [r3]
   16dc8:	sub	lr, lr, #88	; 0x58
   16dcc:	cmp	lr, #32
   16dd0:	ldrls	pc, [pc, lr, lsl #2]
   16dd4:	b	16e5c <lchmod@@Base+0x464>
   16dd8:			; <UNDEFINED> instruction: 0x00016db8
   16ddc:	andeq	r6, r1, ip, asr lr
   16de0:	andeq	r6, r1, ip, asr lr
   16de4:	andeq	r6, r1, ip, asr lr
   16de8:	andeq	r6, r1, ip, asr lr
   16dec:	andeq	r6, r1, ip, asr lr
   16df0:	andeq	r6, r1, ip, asr lr
   16df4:	andeq	r6, r1, ip, asr lr
   16df8:	andeq	r6, r1, ip, asr lr
   16dfc:	andeq	r6, r1, ip, asr lr
   16e00:	andeq	r6, r1, ip, asr lr
   16e04:	andeq	r6, r1, ip, asr lr
   16e08:	andeq	r6, r1, ip, asr lr
   16e0c:	andeq	r6, r1, ip, asr lr
   16e10:	andeq	r6, r1, ip, asr lr
   16e14:	andeq	r6, r1, ip, asr lr
   16e18:	andeq	r6, r1, ip, asr lr
   16e1c:	andeq	r6, r1, ip, asr lr
   16e20:	andeq	r6, r1, ip, asr lr
   16e24:	andeq	r6, r1, ip, asr lr
   16e28:	andeq	r6, r1, ip, asr lr
   16e2c:	andeq	r6, r1, ip, asr lr
   16e30:	andeq	r6, r1, ip, asr lr
   16e34:	andeq	r6, r1, ip, asr lr
   16e38:	andeq	r6, r1, ip, asr lr
   16e3c:	andeq	r6, r1, ip, asr lr
   16e40:	muleq	r1, r0, sp
   16e44:	andeq	r6, r1, r8, lsr #27
   16e48:			; <UNDEFINED> instruction: 0x00016db0
   16e4c:	andeq	r6, r1, ip, asr lr
   16e50:	andeq	r6, r1, ip, asr lr
   16e54:	muleq	r1, r8, sp
   16e58:	andeq	r6, r1, r0, lsr #27
   16e5c:	mov	lr, ip
   16e60:	strb	r4, [ip]
   16e64:	strb	r9, [ip, #1]
   16e68:	str	r1, [ip, #4]
   16e6c:	str	r7, [ip, #8]
   16e70:	b	16d1c <lchmod@@Base+0x324>
   16e74:	cmp	r2, #44	; 0x2c
   16e78:	addeq	r4, r3, #1
   16e7c:	moveq	ip, r6
   16e80:	beq	16b74 <lchmod@@Base+0x17c>
   16e84:	cmp	r2, #0
   16e88:	bne	16ba8 <lchmod@@Base+0x1b0>
   16e8c:	add	r6, r0, r6, lsl #4
   16e90:	mov	r3, #0
   16e94:	strb	r3, [r6, #1]
   16e98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e9c:	mov	r0, #0
   16ea0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea4:	mov	r0, #0
   16ea8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eac:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16eb0:	push	{r4, lr}
   16eb4:	sub	sp, sp, #104	; 0x68
   16eb8:	mov	r2, sp
   16ebc:	mov	r1, r0
   16ec0:	mov	r0, #3
   16ec4:	bl	11854 <__xstat64@plt>
   16ec8:	cmp	r0, #0
   16ecc:	movne	r0, #0
   16ed0:	bne	16f08 <lchmod@@Base+0x510>
   16ed4:	ldr	r4, [sp, #16]
   16ed8:	mov	r0, #32
   16edc:	bl	19414 <lchmod@@Base+0x2a1c>
   16ee0:	mov	r3, #61	; 0x3d
   16ee4:	strb	r3, [r0]
   16ee8:	mov	r3, #1
   16eec:	strb	r3, [r0, #1]
   16ef0:	ldr	r3, [pc, #24]	; 16f10 <lchmod@@Base+0x518>
   16ef4:	str	r3, [r0, #4]
   16ef8:	str	r4, [r0, #8]
   16efc:	str	r3, [r0, #12]
   16f00:	mov	r3, #0
   16f04:	strb	r3, [r0, #17]
   16f08:	add	sp, sp, #104	; 0x68
   16f0c:	pop	{r4, pc}
   16f10:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16f14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f18:	ldr	r6, [sp, #32]
   16f1c:	lsl	r0, r0, #20
   16f20:	lsr	r0, r0, #20
   16f24:	ldrb	r9, [r3, #1]
   16f28:	cmp	r9, #0
   16f2c:	beq	17034 <lchmod@@Base+0x63c>
   16f30:	cmp	r1, #0
   16f34:	movne	r7, #3072	; 0xc00
   16f38:	moveq	r7, #0
   16f3c:	add	r3, r3, #16
   16f40:	mov	r5, #0
   16f44:	mvn	r2, r2
   16f48:	b	16f8c <lchmod@@Base+0x594>
   16f4c:	and	r9, r0, #73	; 0x49
   16f50:	orrs	r9, r9, r1
   16f54:	orrne	ip, ip, #73	; 0x49
   16f58:	b	16ff0 <lchmod@@Base+0x5f8>
   16f5c:	cmp	lr, #0
   16f60:	mvnne	lr, lr
   16f64:	orr	lr, lr, r4
   16f68:	mvn	r4, lr
   16f6c:	lsl	r4, r4, #20
   16f70:	orr	r5, r5, r4, lsr #20
   16f74:	and	lr, lr, r0
   16f78:	orr	r0, ip, lr
   16f7c:	add	r3, r3, #16
   16f80:	ldrb	r9, [r3, #-15]
   16f84:	cmp	r9, #0
   16f88:	beq	17038 <lchmod@@Base+0x640>
   16f8c:	mov	r8, r3
   16f90:	ldr	lr, [r3, #-12]
   16f94:	ldr	r4, [r3, #-4]
   16f98:	bic	r4, r7, r4
   16f9c:	ldr	ip, [r3, #-8]
   16fa0:	cmp	r9, #2
   16fa4:	beq	16f4c <lchmod@@Base+0x554>
   16fa8:	cmp	r9, #3
   16fac:	bne	16ff0 <lchmod@@Base+0x5f8>
   16fb0:	and	ip, ip, r0
   16fb4:	and	r9, ip, #292	; 0x124
   16fb8:	cmp	r9, #0
   16fbc:	movne	r9, #292	; 0x124
   16fc0:	moveq	r9, #0
   16fc4:	and	sl, ip, #146	; 0x92
   16fc8:	cmp	sl, #0
   16fcc:	movne	sl, #146	; 0x92
   16fd0:	moveq	sl, #0
   16fd4:	orr	sl, r9, sl
   16fd8:	and	r9, ip, #73	; 0x49
   16fdc:	cmp	r9, #0
   16fe0:	movne	r9, #73	; 0x49
   16fe4:	moveq	r9, #0
   16fe8:	orr	r9, r9, sl
   16fec:	orr	ip, r9, ip
   16ff0:	cmp	lr, #0
   16ff4:	movne	r9, lr
   16ff8:	moveq	r9, r2
   16ffc:	bic	ip, ip, r4
   17000:	and	ip, ip, r9
   17004:	ldrb	r8, [r8, #-16]
   17008:	cmp	r8, #45	; 0x2d
   1700c:	beq	17028 <lchmod@@Base+0x630>
   17010:	cmp	r8, #61	; 0x3d
   17014:	beq	16f5c <lchmod@@Base+0x564>
   17018:	cmp	r8, #43	; 0x2b
   1701c:	orreq	r5, r5, ip
   17020:	orreq	r0, r0, ip
   17024:	b	16f7c <lchmod@@Base+0x584>
   17028:	orr	r5, r5, ip
   1702c:	bic	r0, r0, ip
   17030:	b	16f7c <lchmod@@Base+0x584>
   17034:	mov	r5, #0
   17038:	cmp	r6, #0
   1703c:	strne	r5, [r6]
   17040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17044:	push	{r2, r3}
   17048:	push	{lr}		; (str lr, [sp, #-4]!)
   1704c:	sub	sp, sp, #12
   17050:	ldr	r2, [sp, #16]
   17054:	tst	r2, #64	; 0x40
   17058:	addne	r3, sp, #24
   1705c:	strne	r3, [sp, #4]
   17060:	ldrne	r3, [sp, #20]
   17064:	moveq	r3, #0
   17068:	bl	11704 <openat64@plt>
   1706c:	bl	18e50 <lchmod@@Base+0x2458>
   17070:	add	sp, sp, #12
   17074:	pop	{lr}		; (ldr lr, [sp], #4)
   17078:	add	sp, sp, #8
   1707c:	bx	lr
   17080:	push	{r4, r5, r6, r7, r8, lr}
   17084:	mov	r6, r3
   17088:	orr	r2, r2, #540672	; 0x84000
   1708c:	orr	r2, r2, #2304	; 0x900
   17090:	bl	17044 <lchmod@@Base+0x64c>
   17094:	subs	r4, r0, #0
   17098:	blt	170d4 <lchmod@@Base+0x6dc>
   1709c:	mov	r0, r4
   170a0:	bl	117d0 <fdopendir@plt>
   170a4:	subs	r5, r0, #0
   170a8:	beq	170b8 <lchmod@@Base+0x6c0>
   170ac:	str	r4, [r6]
   170b0:	mov	r0, r5
   170b4:	pop	{r4, r5, r6, r7, r8, pc}
   170b8:	bl	1171c <__errno_location@plt>
   170bc:	mov	r6, r0
   170c0:	ldr	r7, [r0]
   170c4:	mov	r0, r4
   170c8:	bl	11884 <close@plt>
   170cc:	str	r7, [r6]
   170d0:	b	170b0 <lchmod@@Base+0x6b8>
   170d4:	mov	r5, #0
   170d8:	b	170b0 <lchmod@@Base+0x6b8>
   170dc:	push	{r4, r5, r6, lr}
   170e0:	subs	r4, r0, #0
   170e4:	beq	1715c <lchmod@@Base+0x764>
   170e8:	mov	r1, #47	; 0x2f
   170ec:	mov	r0, r4
   170f0:	bl	117ac <strrchr@plt>
   170f4:	cmp	r0, #0
   170f8:	addne	r5, r0, #1
   170fc:	moveq	r5, r4
   17100:	sub	r3, r5, r4
   17104:	cmp	r3, #6
   17108:	ble	17148 <lchmod@@Base+0x750>
   1710c:	mov	r2, #7
   17110:	ldr	r1, [pc, #96]	; 17178 <lchmod@@Base+0x780>
   17114:	sub	r0, r5, #7
   17118:	bl	1186c <strncmp@plt>
   1711c:	cmp	r0, #0
   17120:	bne	17148 <lchmod@@Base+0x750>
   17124:	mov	r2, #3
   17128:	ldr	r1, [pc, #76]	; 1717c <lchmod@@Base+0x784>
   1712c:	mov	r0, r5
   17130:	bl	1186c <strncmp@plt>
   17134:	cmp	r0, #0
   17138:	addeq	r4, r5, #3
   1713c:	ldreq	r3, [pc, #60]	; 17180 <lchmod@@Base+0x788>
   17140:	streq	r4, [r3]
   17144:	movne	r4, r5
   17148:	ldr	r3, [pc, #52]	; 17184 <lchmod@@Base+0x78c>
   1714c:	str	r4, [r3]
   17150:	ldr	r3, [pc, #48]	; 17188 <lchmod@@Base+0x790>
   17154:	str	r4, [r3]
   17158:	pop	{r4, r5, r6, pc}
   1715c:	ldr	r3, [pc, #40]	; 1718c <lchmod@@Base+0x794>
   17160:	ldr	r3, [r3]
   17164:	mov	r2, #55	; 0x37
   17168:	mov	r1, #1
   1716c:	ldr	r0, [pc, #28]	; 17190 <lchmod@@Base+0x798>
   17170:	bl	115f0 <fwrite@plt>
   17174:	bl	11878 <abort@plt>
   17178:	andeq	fp, r1, r4, ror #18
   1717c:	andeq	fp, r1, ip, ror #18
   17180:	ldrdeq	ip, [r2], -r0
   17184:	strdeq	ip, [r2], -r8
   17188:	ldrdeq	ip, [r2], -r4
   1718c:	andeq	ip, r2, r0, ror #3
   17190:	andeq	fp, r1, ip, lsr #18
   17194:	push	{r4, r5, r6, lr}
   17198:	mov	r5, r0
   1719c:	mov	r4, r1
   171a0:	mov	r2, #48	; 0x30
   171a4:	mov	r1, #0
   171a8:	bl	11740 <memset@plt>
   171ac:	cmp	r4, #10
   171b0:	beq	171c0 <lchmod@@Base+0x7c8>
   171b4:	str	r4, [r5]
   171b8:	mov	r0, r5
   171bc:	pop	{r4, r5, r6, pc}
   171c0:	bl	11878 <abort@plt>
   171c4:	push	{r4, r5, r6, lr}
   171c8:	mov	r4, r0
   171cc:	mov	r5, r1
   171d0:	mov	r2, #5
   171d4:	mov	r1, r0
   171d8:	mov	r0, #0
   171dc:	bl	11578 <dcgettext@plt>
   171e0:	cmp	r4, r0
   171e4:	popne	{r4, r5, r6, pc}
   171e8:	bl	1a754 <lchmod@@Base+0x3d5c>
   171ec:	ldrb	r3, [r0]
   171f0:	bic	r3, r3, #32
   171f4:	cmp	r3, #85	; 0x55
   171f8:	beq	17274 <lchmod@@Base+0x87c>
   171fc:	cmp	r3, #71	; 0x47
   17200:	bne	172d0 <lchmod@@Base+0x8d8>
   17204:	ldrb	r3, [r0, #1]
   17208:	bic	r3, r3, #32
   1720c:	cmp	r3, #66	; 0x42
   17210:	bne	172d0 <lchmod@@Base+0x8d8>
   17214:	ldrb	r3, [r0, #2]
   17218:	cmp	r3, #49	; 0x31
   1721c:	bne	172d0 <lchmod@@Base+0x8d8>
   17220:	ldrb	r3, [r0, #3]
   17224:	cmp	r3, #56	; 0x38
   17228:	bne	172d0 <lchmod@@Base+0x8d8>
   1722c:	ldrb	r3, [r0, #4]
   17230:	cmp	r3, #48	; 0x30
   17234:	bne	172d0 <lchmod@@Base+0x8d8>
   17238:	ldrb	r3, [r0, #5]
   1723c:	cmp	r3, #51	; 0x33
   17240:	bne	172d0 <lchmod@@Base+0x8d8>
   17244:	ldrb	r3, [r0, #6]
   17248:	cmp	r3, #48	; 0x30
   1724c:	bne	172d0 <lchmod@@Base+0x8d8>
   17250:	ldrb	r3, [r0, #7]
   17254:	cmp	r3, #0
   17258:	bne	172d0 <lchmod@@Base+0x8d8>
   1725c:	ldrb	r2, [r4]
   17260:	ldr	r3, [pc, #124]	; 172e4 <lchmod@@Base+0x8ec>
   17264:	ldr	r0, [pc, #124]	; 172e8 <lchmod@@Base+0x8f0>
   17268:	cmp	r2, #96	; 0x60
   1726c:	movne	r0, r3
   17270:	pop	{r4, r5, r6, pc}
   17274:	ldrb	r3, [r0, #1]
   17278:	bic	r3, r3, #32
   1727c:	cmp	r3, #84	; 0x54
   17280:	bne	172d0 <lchmod@@Base+0x8d8>
   17284:	ldrb	r3, [r0, #2]
   17288:	bic	r3, r3, #32
   1728c:	cmp	r3, #70	; 0x46
   17290:	bne	172d0 <lchmod@@Base+0x8d8>
   17294:	ldrb	r3, [r0, #3]
   17298:	cmp	r3, #45	; 0x2d
   1729c:	bne	172d0 <lchmod@@Base+0x8d8>
   172a0:	ldrb	r3, [r0, #4]
   172a4:	cmp	r3, #56	; 0x38
   172a8:	bne	172d0 <lchmod@@Base+0x8d8>
   172ac:	ldrb	r3, [r0, #5]
   172b0:	cmp	r3, #0
   172b4:	bne	172d0 <lchmod@@Base+0x8d8>
   172b8:	ldrb	r2, [r4]
   172bc:	ldr	r3, [pc, #40]	; 172ec <lchmod@@Base+0x8f4>
   172c0:	ldr	r0, [pc, #40]	; 172f0 <lchmod@@Base+0x8f8>
   172c4:	cmp	r2, #96	; 0x60
   172c8:	movne	r0, r3
   172cc:	pop	{r4, r5, r6, pc}
   172d0:	ldr	r3, [pc, #28]	; 172f4 <lchmod@@Base+0x8fc>
   172d4:	ldr	r0, [pc, #28]	; 172f8 <lchmod@@Base+0x900>
   172d8:	cmp	r5, #9
   172dc:	movne	r0, r3
   172e0:	pop	{r4, r5, r6, pc}
   172e4:	andeq	fp, r1, r8, asr #19
   172e8:	ldrdeq	fp, [r1], -r4
   172ec:	andeq	fp, r1, r4, asr #19
   172f0:	ldrdeq	fp, [r1], -r8
   172f4:	andeq	fp, r1, ip, asr #19
   172f8:	ldrdeq	fp, [r1], -r0
   172fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17300:	sub	sp, sp, #116	; 0x74
   17304:	str	r0, [sp, #36]	; 0x24
   17308:	mov	sl, r1
   1730c:	str	r2, [sp, #52]	; 0x34
   17310:	str	r3, [sp, #28]
   17314:	ldr	r8, [sp, #152]	; 0x98
   17318:	bl	11608 <__ctype_get_mb_cur_max@plt>
   1731c:	str	r0, [sp, #84]	; 0x54
   17320:	ldr	r3, [sp, #156]	; 0x9c
   17324:	lsr	r3, r3, #1
   17328:	and	r3, r3, #1
   1732c:	str	r3, [sp, #32]
   17330:	mov	r3, #1
   17334:	str	r3, [sp, #40]	; 0x28
   17338:	mov	r3, #0
   1733c:	str	r3, [sp, #80]	; 0x50
   17340:	str	r3, [sp, #44]	; 0x2c
   17344:	str	r3, [sp, #48]	; 0x30
   17348:	str	r3, [sp, #60]	; 0x3c
   1734c:	str	r3, [sp, #72]	; 0x48
   17350:	str	r3, [sp, #76]	; 0x4c
   17354:	mov	r7, sl
   17358:	mov	sl, r8
   1735c:	cmp	sl, #10
   17360:	ldrls	pc, [pc, sl, lsl #2]
   17364:	b	1751c <lchmod@@Base+0xb24>
   17368:	andeq	r7, r1, ip, asr #7
   1736c:	muleq	r1, ip, r3
   17370:	strdeq	r7, [r1], -r8
   17374:	muleq	r1, r4, r3
   17378:	andeq	r7, r1, ip, lsr #9
   1737c:	ldrdeq	r7, [r1], -ip
   17380:	andeq	r8, r1, r8, asr #8
   17384:	andeq	r7, r1, r0, lsr #10
   17388:	andeq	r7, r1, r8, lsl r4
   1738c:	andeq	r7, r1, r8, lsl r4
   17390:	andeq	r7, r1, r8, lsl r4
   17394:	mov	r3, #1
   17398:	str	r3, [sp, #48]	; 0x30
   1739c:	mov	r3, #1
   173a0:	str	r3, [sp, #32]
   173a4:	str	r3, [sp, #60]	; 0x3c
   173a8:	ldr	r3, [pc, #4068]	; 18394 <lchmod@@Base+0x199c>
   173ac:	str	r3, [sp, #72]	; 0x48
   173b0:	mov	fp, #0
   173b4:	mov	sl, #2
   173b8:	mov	r6, #0
   173bc:	ldr	r3, [sp, #48]	; 0x30
   173c0:	eor	r3, r3, #1
   173c4:	str	r3, [sp, #68]	; 0x44
   173c8:	b	17cb0 <lchmod@@Base+0x12b8>
   173cc:	mov	r3, #0
   173d0:	str	r3, [sp, #32]
   173d4:	mov	fp, r3
   173d8:	b	173b8 <lchmod@@Base+0x9c0>
   173dc:	ldr	r3, [sp, #32]
   173e0:	cmp	r3, #0
   173e4:	bne	17538 <lchmod@@Base+0xb40>
   173e8:	cmp	r7, #0
   173ec:	beq	17558 <lchmod@@Base+0xb60>
   173f0:	ldr	r3, [sp, #36]	; 0x24
   173f4:	mov	r2, #34	; 0x22
   173f8:	strb	r2, [r3]
   173fc:	mov	r3, #1
   17400:	str	r3, [sp, #48]	; 0x30
   17404:	str	r3, [sp, #60]	; 0x3c
   17408:	ldr	r3, [pc, #3980]	; 1839c <lchmod@@Base+0x19a4>
   1740c:	str	r3, [sp, #72]	; 0x48
   17410:	mov	fp, #1
   17414:	b	173b8 <lchmod@@Base+0x9c0>
   17418:	cmp	sl, #10
   1741c:	beq	17440 <lchmod@@Base+0xa48>
   17420:	mov	r1, sl
   17424:	ldr	r0, [pc, #3948]	; 18398 <lchmod@@Base+0x19a0>
   17428:	bl	171c4 <lchmod@@Base+0x7cc>
   1742c:	str	r0, [sp, #164]	; 0xa4
   17430:	mov	r1, sl
   17434:	ldr	r0, [pc, #3928]	; 18394 <lchmod@@Base+0x199c>
   17438:	bl	171c4 <lchmod@@Base+0x7cc>
   1743c:	str	r0, [sp, #168]	; 0xa8
   17440:	ldr	r3, [sp, #32]
   17444:	cmp	r3, #0
   17448:	movne	fp, #0
   1744c:	bne	17484 <lchmod@@Base+0xa8c>
   17450:	ldr	r3, [sp, #164]	; 0xa4
   17454:	ldrb	r3, [r3]
   17458:	cmp	r3, #0
   1745c:	beq	174a4 <lchmod@@Base+0xaac>
   17460:	ldr	r2, [sp, #164]	; 0xa4
   17464:	mov	fp, #0
   17468:	ldr	r1, [sp, #36]	; 0x24
   1746c:	cmp	r7, fp
   17470:	strbhi	r3, [r1, fp]
   17474:	add	fp, fp, #1
   17478:	ldrb	r3, [r2, #1]!
   1747c:	cmp	r3, #0
   17480:	bne	1746c <lchmod@@Base+0xa74>
   17484:	ldr	r0, [sp, #168]	; 0xa8
   17488:	bl	116e0 <strlen@plt>
   1748c:	str	r0, [sp, #60]	; 0x3c
   17490:	ldr	r3, [sp, #168]	; 0xa8
   17494:	str	r3, [sp, #72]	; 0x48
   17498:	mov	r3, #1
   1749c:	str	r3, [sp, #48]	; 0x30
   174a0:	b	173b8 <lchmod@@Base+0x9c0>
   174a4:	mov	fp, #0
   174a8:	b	17484 <lchmod@@Base+0xa8c>
   174ac:	ldr	r3, [sp, #32]
   174b0:	cmp	r3, #0
   174b4:	bne	17574 <lchmod@@Base+0xb7c>
   174b8:	mov	r3, #1
   174bc:	str	r3, [sp, #48]	; 0x30
   174c0:	cmp	r7, #0
   174c4:	beq	17590 <lchmod@@Base+0xb98>
   174c8:	ldr	r3, [sp, #36]	; 0x24
   174cc:	mov	r2, #39	; 0x27
   174d0:	strb	r2, [r3]
   174d4:	mov	r3, #0
   174d8:	str	r3, [sp, #32]
   174dc:	mov	r3, #1
   174e0:	str	r3, [sp, #60]	; 0x3c
   174e4:	ldr	r3, [pc, #3752]	; 18394 <lchmod@@Base+0x199c>
   174e8:	str	r3, [sp, #72]	; 0x48
   174ec:	mov	fp, #1
   174f0:	mov	sl, #2
   174f4:	b	173b8 <lchmod@@Base+0x9c0>
   174f8:	ldr	r3, [sp, #32]
   174fc:	cmp	r3, #0
   17500:	beq	174c0 <lchmod@@Base+0xac8>
   17504:	mov	r3, #1
   17508:	str	r3, [sp, #60]	; 0x3c
   1750c:	ldr	r3, [pc, #3712]	; 18394 <lchmod@@Base+0x199c>
   17510:	str	r3, [sp, #72]	; 0x48
   17514:	mov	fp, #0
   17518:	b	173b8 <lchmod@@Base+0x9c0>
   1751c:	bl	11878 <abort@plt>
   17520:	mov	r3, #0
   17524:	str	r3, [sp, #32]
   17528:	mov	r3, #1
   1752c:	str	r3, [sp, #48]	; 0x30
   17530:	mov	fp, #0
   17534:	b	173b8 <lchmod@@Base+0x9c0>
   17538:	ldr	r3, [sp, #32]
   1753c:	str	r3, [sp, #48]	; 0x30
   17540:	mov	r3, #1
   17544:	str	r3, [sp, #60]	; 0x3c
   17548:	ldr	r3, [pc, #3660]	; 1839c <lchmod@@Base+0x19a4>
   1754c:	str	r3, [sp, #72]	; 0x48
   17550:	mov	fp, #0
   17554:	b	173b8 <lchmod@@Base+0x9c0>
   17558:	mov	r3, #1
   1755c:	str	r3, [sp, #48]	; 0x30
   17560:	str	r3, [sp, #60]	; 0x3c
   17564:	ldr	r3, [pc, #3632]	; 1839c <lchmod@@Base+0x19a4>
   17568:	str	r3, [sp, #72]	; 0x48
   1756c:	mov	fp, #1
   17570:	b	173b8 <lchmod@@Base+0x9c0>
   17574:	mov	r3, #1
   17578:	str	r3, [sp, #60]	; 0x3c
   1757c:	ldr	r3, [pc, #3600]	; 18394 <lchmod@@Base+0x199c>
   17580:	str	r3, [sp, #72]	; 0x48
   17584:	mov	fp, #0
   17588:	mov	sl, #2
   1758c:	b	173b8 <lchmod@@Base+0x9c0>
   17590:	mov	r3, #0
   17594:	str	r3, [sp, #32]
   17598:	mov	r3, #1
   1759c:	str	r3, [sp, #60]	; 0x3c
   175a0:	ldr	r3, [pc, #3564]	; 18394 <lchmod@@Base+0x199c>
   175a4:	str	r3, [sp, #72]	; 0x48
   175a8:	mov	fp, #1
   175ac:	mov	sl, #2
   175b0:	b	173b8 <lchmod@@Base+0x9c0>
   175b4:	mov	r3, #0
   175b8:	str	r3, [sp, #56]	; 0x38
   175bc:	ldr	r3, [sp, #52]	; 0x34
   175c0:	add	r2, r3, r6
   175c4:	str	r2, [sp, #64]	; 0x40
   175c8:	ldrb	r4, [r3, r6]
   175cc:	cmp	r4, #126	; 0x7e
   175d0:	ldrls	pc, [pc, r4, lsl #2]
   175d4:	b	17e10 <lchmod@@Base+0x1418>
   175d8:	strdeq	r7, [r1], -r0
   175dc:	andeq	r7, r1, r0, lsl lr
   175e0:	andeq	r7, r1, r0, lsl lr
   175e4:	andeq	r7, r1, r0, lsl lr
   175e8:	andeq	r7, r1, r0, lsl lr
   175ec:	andeq	r7, r1, r0, lsl lr
   175f0:	andeq	r7, r1, r0, lsl lr
   175f4:	andeq	r7, r1, ip, asr #22
   175f8:	andeq	r7, r1, r8, ror #15
   175fc:	andeq	r7, r1, r4, lsl #22
   17600:	strdeq	r7, [r1], -ip
   17604:	andeq	r7, r1, ip, ror #20
   17608:	andeq	r7, r1, r4, ror #20
   1760c:	andeq	r7, r1, r0, ror #15
   17610:	andeq	r7, r1, r0, lsl lr
   17614:	andeq	r7, r1, r0, lsl lr
   17618:	andeq	r7, r1, r0, lsl lr
   1761c:	andeq	r7, r1, r0, lsl lr
   17620:	andeq	r7, r1, r0, lsl lr
   17624:	andeq	r7, r1, r0, lsl lr
   17628:	andeq	r7, r1, r0, lsl lr
   1762c:	andeq	r7, r1, r0, lsl lr
   17630:	andeq	r7, r1, r0, lsl lr
   17634:	andeq	r7, r1, r0, lsl lr
   17638:	andeq	r7, r1, r0, lsl lr
   1763c:	andeq	r7, r1, r0, lsl lr
   17640:	andeq	r7, r1, r0, lsl lr
   17644:	andeq	r7, r1, r0, lsl lr
   17648:	andeq	r7, r1, r0, lsl lr
   1764c:	andeq	r7, r1, r0, lsl lr
   17650:	andeq	r7, r1, r0, lsl lr
   17654:	andeq	r7, r1, r0, lsl lr
   17658:	andeq	r7, r1, r0, lsr #23
   1765c:	muleq	r1, ip, fp
   17660:	muleq	r1, ip, fp
   17664:	andeq	r7, r1, r4, ror fp
   17668:	muleq	r1, ip, fp
   1766c:	andeq	r8, r1, r4, ror #3
   17670:	muleq	r1, ip, fp
   17674:	andeq	r7, r1, r4, ror sp
   17678:	muleq	r1, ip, fp
   1767c:	muleq	r1, ip, fp
   17680:	muleq	r1, ip, fp
   17684:	andeq	r8, r1, r4, ror #3
   17688:	andeq	r8, r1, r4, ror #3
   1768c:	andeq	r8, r1, r4, ror #3
   17690:	andeq	r8, r1, r4, ror #3
   17694:	andeq	r8, r1, r4, ror #3
   17698:	andeq	r8, r1, r4, ror #3
   1769c:	andeq	r8, r1, r4, ror #3
   176a0:	andeq	r8, r1, r4, ror #3
   176a4:	andeq	r8, r1, r4, ror #3
   176a8:	andeq	r8, r1, r4, ror #3
   176ac:	andeq	r8, r1, r4, ror #3
   176b0:	andeq	r8, r1, r4, ror #3
   176b4:	andeq	r8, r1, r4, ror #3
   176b8:	andeq	r8, r1, r4, ror #3
   176bc:	andeq	r8, r1, r4, ror #3
   176c0:	andeq	r8, r1, r4, ror #3
   176c4:	muleq	r1, ip, fp
   176c8:	muleq	r1, ip, fp
   176cc:	muleq	r1, ip, fp
   176d0:	muleq	r1, ip, fp
   176d4:	strdeq	r7, [r1], -r8
   176d8:	andeq	r7, r1, r0, lsl lr
   176dc:	andeq	r8, r1, r4, ror #3
   176e0:	andeq	r8, r1, r4, ror #3
   176e4:	andeq	r8, r1, r4, ror #3
   176e8:	andeq	r8, r1, r4, ror #3
   176ec:	andeq	r8, r1, r4, ror #3
   176f0:	andeq	r8, r1, r4, ror #3
   176f4:	andeq	r8, r1, r4, ror #3
   176f8:	andeq	r8, r1, r4, ror #3
   176fc:	andeq	r8, r1, r4, ror #3
   17700:	andeq	r8, r1, r4, ror #3
   17704:	andeq	r8, r1, r4, ror #3
   17708:	andeq	r8, r1, r4, ror #3
   1770c:	andeq	r8, r1, r4, ror #3
   17710:	andeq	r8, r1, r4, ror #3
   17714:	andeq	r8, r1, r4, ror #3
   17718:	andeq	r8, r1, r4, ror #3
   1771c:	andeq	r8, r1, r4, ror #3
   17720:	andeq	r8, r1, r4, ror #3
   17724:	andeq	r8, r1, r4, ror #3
   17728:	andeq	r8, r1, r4, ror #3
   1772c:	andeq	r8, r1, r4, ror #3
   17730:	andeq	r8, r1, r4, ror #3
   17734:	andeq	r8, r1, r4, ror #3
   17738:	andeq	r8, r1, r4, ror #3
   1773c:	andeq	r8, r1, r4, ror #3
   17740:	andeq	r8, r1, r4, ror #3
   17744:	muleq	r1, ip, fp
   17748:	andeq	r7, r1, r4, ror sl
   1774c:	andeq	r8, r1, r4, ror #3
   17750:	muleq	r1, ip, fp
   17754:	andeq	r8, r1, r4, ror #3
   17758:	muleq	r1, ip, fp
   1775c:	andeq	r8, r1, r4, ror #3
   17760:	andeq	r8, r1, r4, ror #3
   17764:	andeq	r8, r1, r4, ror #3
   17768:	andeq	r8, r1, r4, ror #3
   1776c:	andeq	r8, r1, r4, ror #3
   17770:	andeq	r8, r1, r4, ror #3
   17774:	andeq	r8, r1, r4, ror #3
   17778:	andeq	r8, r1, r4, ror #3
   1777c:	andeq	r8, r1, r4, ror #3
   17780:	andeq	r8, r1, r4, ror #3
   17784:	andeq	r8, r1, r4, ror #3
   17788:	andeq	r8, r1, r4, ror #3
   1778c:	andeq	r8, r1, r4, ror #3
   17790:	andeq	r8, r1, r4, ror #3
   17794:	andeq	r8, r1, r4, ror #3
   17798:	andeq	r8, r1, r4, ror #3
   1779c:	andeq	r8, r1, r4, ror #3
   177a0:	andeq	r8, r1, r4, ror #3
   177a4:	andeq	r8, r1, r4, ror #3
   177a8:	andeq	r8, r1, r4, ror #3
   177ac:	andeq	r8, r1, r4, ror #3
   177b0:	andeq	r8, r1, r4, ror #3
   177b4:	andeq	r8, r1, r4, ror #3
   177b8:	andeq	r8, r1, r4, ror #3
   177bc:	andeq	r8, r1, r4, ror #3
   177c0:	andeq	r8, r1, r4, ror #3
   177c4:	andeq	r7, r1, r4, asr fp
   177c8:	muleq	r1, ip, fp
   177cc:	andeq	r7, r1, r4, asr fp
   177d0:	andeq	r7, r1, r4, ror fp
   177d4:	mov	r3, #0
   177d8:	str	r3, [sp, #56]	; 0x38
   177dc:	b	175bc <lchmod@@Base+0xbc4>
   177e0:	mov	r3, #114	; 0x72
   177e4:	b	17b08 <lchmod@@Base+0x1110>
   177e8:	mov	r3, #98	; 0x62
   177ec:	b	17b20 <lchmod@@Base+0x1128>
   177f0:	ldr	r3, [sp, #48]	; 0x30
   177f4:	cmp	r3, #0
   177f8:	beq	178e0 <lchmod@@Base+0xee8>
   177fc:	ldr	r3, [sp, #32]
   17800:	cmp	r3, #0
   17804:	bne	18368 <lchmod@@Base+0x1970>
   17808:	ldr	r3, [sp, #44]	; 0x2c
   1780c:	eor	r3, r3, #1
   17810:	cmp	sl, #2
   17814:	movne	r3, #0
   17818:	andeq	r3, r3, #1
   1781c:	cmp	r3, #0
   17820:	moveq	r2, fp
   17824:	beq	17868 <lchmod@@Base+0xe70>
   17828:	cmp	r7, fp
   1782c:	ldrhi	r2, [sp, #36]	; 0x24
   17830:	movhi	r1, #39	; 0x27
   17834:	strbhi	r1, [r2, fp]
   17838:	add	r2, fp, #1
   1783c:	cmp	r7, r2
   17840:	ldrhi	r1, [sp, #36]	; 0x24
   17844:	movhi	r0, #36	; 0x24
   17848:	strbhi	r0, [r1, r2]
   1784c:	add	r2, fp, #2
   17850:	cmp	r7, r2
   17854:	ldrhi	r1, [sp, #36]	; 0x24
   17858:	movhi	r0, #39	; 0x27
   1785c:	strbhi	r0, [r1, r2]
   17860:	add	r2, fp, #3
   17864:	str	r3, [sp, #44]	; 0x2c
   17868:	cmp	r7, r2
   1786c:	ldrhi	r3, [sp, #36]	; 0x24
   17870:	movhi	r1, #92	; 0x5c
   17874:	strbhi	r1, [r3, r2]
   17878:	add	fp, r2, #1
   1787c:	cmp	r5, #0
   17880:	beq	181ec <lchmod@@Base+0x17f4>
   17884:	add	r3, r6, #1
   17888:	ldr	r1, [sp, #28]
   1788c:	cmp	r1, r3
   17890:	bls	181fc <lchmod@@Base+0x1804>
   17894:	ldr	r1, [sp, #52]	; 0x34
   17898:	ldrb	r3, [r1, r3]
   1789c:	sub	r3, r3, #48	; 0x30
   178a0:	uxtb	r3, r3
   178a4:	cmp	r3, #9
   178a8:	bhi	18208 <lchmod@@Base+0x1810>
   178ac:	cmp	r7, fp
   178b0:	movhi	r3, #48	; 0x30
   178b4:	ldrhi	r1, [sp, #36]	; 0x24
   178b8:	strbhi	r3, [r1, fp]
   178bc:	add	r3, r2, #2
   178c0:	cmp	r7, r3
   178c4:	movhi	r1, #48	; 0x30
   178c8:	ldrhi	r0, [sp, #36]	; 0x24
   178cc:	strbhi	r1, [r0, r3]
   178d0:	add	fp, r2, #3
   178d4:	ldr	r8, [sp, #32]
   178d8:	mov	r4, #48	; 0x30
   178dc:	b	17bb8 <lchmod@@Base+0x11c0>
   178e0:	ldr	r3, [sp, #156]	; 0x9c
   178e4:	tst	r3, #1
   178e8:	bne	17cac <lchmod@@Base+0x12b4>
   178ec:	ldr	r5, [sp, #48]	; 0x30
   178f0:	mov	r8, r5
   178f4:	b	17bb8 <lchmod@@Base+0x11c0>
   178f8:	cmp	sl, #2
   178fc:	beq	17914 <lchmod@@Base+0xf1c>
   17900:	cmp	sl, #5
   17904:	beq	1792c <lchmod@@Base+0xf34>
   17908:	mov	r8, #0
   1790c:	mov	r5, r8
   17910:	b	17bb8 <lchmod@@Base+0x11c0>
   17914:	ldr	r3, [sp, #32]
   17918:	cmp	r3, #0
   1791c:	bne	1837c <lchmod@@Base+0x1984>
   17920:	mov	r8, r3
   17924:	mov	r5, r3
   17928:	b	17bb8 <lchmod@@Base+0x11c0>
   1792c:	ldr	r3, [sp, #156]	; 0x9c
   17930:	tst	r3, #4
   17934:	beq	18214 <lchmod@@Base+0x181c>
   17938:	add	r3, r6, #2
   1793c:	ldr	r2, [sp, #28]
   17940:	cmp	r2, r3
   17944:	bls	18220 <lchmod@@Base+0x1828>
   17948:	ldr	r2, [sp, #52]	; 0x34
   1794c:	add	r2, r2, r6
   17950:	ldrb	r2, [r2, #1]
   17954:	cmp	r2, #63	; 0x3f
   17958:	movne	r8, #0
   1795c:	movne	r5, r8
   17960:	bne	17bb8 <lchmod@@Base+0x11c0>
   17964:	ldr	r2, [sp, #52]	; 0x34
   17968:	ldrb	r2, [r2, r3]
   1796c:	sub	r1, r2, #33	; 0x21
   17970:	cmp	r1, #29
   17974:	ldrls	pc, [pc, r1, lsl #2]
   17978:	b	1822c <lchmod@@Base+0x1834>
   1797c:	strdeq	r7, [r1], -r4
   17980:	andeq	r8, r1, ip, lsr #4
   17984:	andeq	r8, r1, ip, lsr #4
   17988:	andeq	r8, r1, ip, lsr #4
   1798c:	andeq	r8, r1, ip, lsr #4
   17990:	andeq	r8, r1, ip, lsr #4
   17994:	strdeq	r7, [r1], -r4
   17998:	strdeq	r7, [r1], -r4
   1799c:	strdeq	r7, [r1], -r4
   179a0:	andeq	r8, r1, ip, lsr #4
   179a4:	andeq	r8, r1, ip, lsr #4
   179a8:	andeq	r8, r1, ip, lsr #4
   179ac:	strdeq	r7, [r1], -r4
   179b0:	andeq	r8, r1, ip, lsr #4
   179b4:	strdeq	r7, [r1], -r4
   179b8:	andeq	r8, r1, ip, lsr #4
   179bc:	andeq	r8, r1, ip, lsr #4
   179c0:	andeq	r8, r1, ip, lsr #4
   179c4:	andeq	r8, r1, ip, lsr #4
   179c8:	andeq	r8, r1, ip, lsr #4
   179cc:	andeq	r8, r1, ip, lsr #4
   179d0:	andeq	r8, r1, ip, lsr #4
   179d4:	andeq	r8, r1, ip, lsr #4
   179d8:	andeq	r8, r1, ip, lsr #4
   179dc:	andeq	r8, r1, ip, lsr #4
   179e0:	andeq	r8, r1, ip, lsr #4
   179e4:	andeq	r8, r1, ip, lsr #4
   179e8:	strdeq	r7, [r1], -r4
   179ec:	strdeq	r7, [r1], -r4
   179f0:	strdeq	r7, [r1], -r4
   179f4:	ldr	r1, [sp, #32]
   179f8:	cmp	r1, #0
   179fc:	bne	1843c <lchmod@@Base+0x1a44>
   17a00:	cmp	r7, fp
   17a04:	movhi	r1, #63	; 0x3f
   17a08:	ldrhi	r0, [sp, #36]	; 0x24
   17a0c:	strbhi	r1, [r0, fp]
   17a10:	add	r1, fp, #1
   17a14:	cmp	r7, r1
   17a18:	ldrhi	r0, [sp, #36]	; 0x24
   17a1c:	movhi	ip, #34	; 0x22
   17a20:	strbhi	ip, [r0, r1]
   17a24:	add	r1, fp, #2
   17a28:	cmp	r7, r1
   17a2c:	ldrhi	r0, [sp, #36]	; 0x24
   17a30:	movhi	ip, #34	; 0x22
   17a34:	strbhi	ip, [r0, r1]
   17a38:	add	r1, fp, #3
   17a3c:	cmp	r7, r1
   17a40:	movhi	r0, #63	; 0x3f
   17a44:	ldrhi	ip, [sp, #36]	; 0x24
   17a48:	strbhi	r0, [ip, r1]
   17a4c:	add	fp, fp, #4
   17a50:	ldr	r5, [sp, #32]
   17a54:	mov	r8, r5
   17a58:	mov	r4, r2
   17a5c:	mov	r6, r3
   17a60:	b	17bb8 <lchmod@@Base+0x11c0>
   17a64:	mov	r3, #102	; 0x66
   17a68:	b	17b20 <lchmod@@Base+0x1128>
   17a6c:	mov	r3, #118	; 0x76
   17a70:	b	17b20 <lchmod@@Base+0x1128>
   17a74:	cmp	sl, #2
   17a78:	beq	17ae4 <lchmod@@Base+0x10ec>
   17a7c:	ldr	r3, [sp, #48]	; 0x30
   17a80:	ldr	r2, [sp, #32]
   17a84:	and	r3, r3, r2
   17a88:	tst	r9, r3
   17a8c:	moveq	r3, r4
   17a90:	beq	17b20 <lchmod@@Base+0x1128>
   17a94:	mov	r8, #0
   17a98:	mov	r5, r8
   17a9c:	eor	r5, r5, #1
   17aa0:	ldr	r3, [sp, #44]	; 0x2c
   17aa4:	and	r5, r5, r3
   17aa8:	tst	r5, #255	; 0xff
   17aac:	beq	17c8c <lchmod@@Base+0x1294>
   17ab0:	cmp	r7, fp
   17ab4:	ldrhi	r3, [sp, #36]	; 0x24
   17ab8:	movhi	r2, #39	; 0x27
   17abc:	strbhi	r2, [r3, fp]
   17ac0:	add	r3, fp, #1
   17ac4:	cmp	r7, r3
   17ac8:	ldrhi	r2, [sp, #36]	; 0x24
   17acc:	movhi	r1, #39	; 0x27
   17ad0:	strbhi	r1, [r2, r3]
   17ad4:	add	fp, fp, #2
   17ad8:	mov	r3, #0
   17adc:	str	r3, [sp, #44]	; 0x2c
   17ae0:	b	17c8c <lchmod@@Base+0x1294>
   17ae4:	ldr	r3, [sp, #32]
   17ae8:	cmp	r3, #0
   17aec:	bne	18388 <lchmod@@Base+0x1990>
   17af0:	mov	r8, r3
   17af4:	mov	r5, r3
   17af8:	b	17a9c <lchmod@@Base+0x10a4>
   17afc:	mov	r3, #110	; 0x6e
   17b00:	b	17b08 <lchmod@@Base+0x1110>
   17b04:	mov	r3, #116	; 0x74
   17b08:	ldr	r2, [sp, #32]
   17b0c:	cmp	sl, #2
   17b10:	movne	r2, #0
   17b14:	andeq	r2, r2, #1
   17b18:	cmp	r2, #0
   17b1c:	bne	17b40 <lchmod@@Base+0x1148>
   17b20:	ldr	r2, [sp, #48]	; 0x30
   17b24:	cmp	r2, #0
   17b28:	moveq	r8, r2
   17b2c:	moveq	r5, r2
   17b30:	beq	17bb8 <lchmod@@Base+0x11c0>
   17b34:	mov	r4, r3
   17b38:	mov	r8, #0
   17b3c:	b	17c10 <lchmod@@Base+0x1218>
   17b40:	mov	r8, sl
   17b44:	mov	sl, r7
   17b48:	b	183b4 <lchmod@@Base+0x19bc>
   17b4c:	mov	r3, #97	; 0x61
   17b50:	b	17b20 <lchmod@@Base+0x1128>
   17b54:	ldr	r3, [sp, #28]
   17b58:	cmn	r3, #1
   17b5c:	beq	17b88 <lchmod@@Base+0x1190>
   17b60:	ldr	r3, [sp, #28]
   17b64:	subs	r3, r3, #1
   17b68:	movne	r3, #1
   17b6c:	cmp	r3, #0
   17b70:	bne	18238 <lchmod@@Base+0x1840>
   17b74:	cmp	r6, #0
   17b78:	beq	17ba0 <lchmod@@Base+0x11a8>
   17b7c:	mov	r8, #0
   17b80:	mov	r5, r8
   17b84:	b	17bb8 <lchmod@@Base+0x11c0>
   17b88:	ldr	r3, [sp, #52]	; 0x34
   17b8c:	ldrb	r3, [r3, #1]
   17b90:	adds	r3, r3, #0
   17b94:	movne	r3, #1
   17b98:	b	17b6c <lchmod@@Base+0x1174>
   17b9c:	mov	r8, #0
   17ba0:	ldr	r5, [sp, #32]
   17ba4:	cmp	sl, #2
   17ba8:	movne	r5, #0
   17bac:	andeq	r5, r5, #1
   17bb0:	cmp	r5, #0
   17bb4:	bne	17d68 <lchmod@@Base+0x1370>
   17bb8:	ldr	r3, [sp, #68]	; 0x44
   17bbc:	cmp	sl, #2
   17bc0:	orreq	r3, r3, #1
   17bc4:	eor	r3, r3, #1
   17bc8:	ldr	r2, [sp, #32]
   17bcc:	orr	r3, r2, r3
   17bd0:	tst	r3, #255	; 0xff
   17bd4:	beq	17c04 <lchmod@@Base+0x120c>
   17bd8:	ldr	r3, [sp, #160]	; 0xa0
   17bdc:	cmp	r3, #0
   17be0:	beq	17c04 <lchmod@@Base+0x120c>
   17be4:	lsr	r2, r4, #5
   17be8:	uxtb	r2, r2
   17bec:	and	r3, r4, #31
   17bf0:	ldr	r1, [sp, #160]	; 0xa0
   17bf4:	ldr	r2, [r1, r2, lsl #2]
   17bf8:	lsr	r3, r2, r3
   17bfc:	tst	r3, #1
   17c00:	bne	17c10 <lchmod@@Base+0x1218>
   17c04:	ldr	r3, [sp, #56]	; 0x38
   17c08:	cmp	r3, #0
   17c0c:	beq	17a9c <lchmod@@Base+0x10a4>
   17c10:	ldr	r3, [sp, #32]
   17c14:	cmp	r3, #0
   17c18:	bne	18424 <lchmod@@Base+0x1a2c>
   17c1c:	ldr	r3, [sp, #44]	; 0x2c
   17c20:	eor	r3, r3, #1
   17c24:	cmp	sl, #2
   17c28:	movne	r3, #0
   17c2c:	andeq	r3, r3, #1
   17c30:	cmp	r3, #0
   17c34:	beq	17c78 <lchmod@@Base+0x1280>
   17c38:	cmp	r7, fp
   17c3c:	ldrhi	r2, [sp, #36]	; 0x24
   17c40:	movhi	r1, #39	; 0x27
   17c44:	strbhi	r1, [r2, fp]
   17c48:	add	r2, fp, #1
   17c4c:	cmp	r7, r2
   17c50:	ldrhi	r1, [sp, #36]	; 0x24
   17c54:	movhi	r0, #36	; 0x24
   17c58:	strbhi	r0, [r1, r2]
   17c5c:	add	r2, fp, #2
   17c60:	cmp	r7, r2
   17c64:	ldrhi	r1, [sp, #36]	; 0x24
   17c68:	movhi	r0, #39	; 0x27
   17c6c:	strbhi	r0, [r1, r2]
   17c70:	add	fp, fp, #3
   17c74:	str	r3, [sp, #44]	; 0x2c
   17c78:	cmp	r7, fp
   17c7c:	ldrhi	r3, [sp, #36]	; 0x24
   17c80:	movhi	r2, #92	; 0x5c
   17c84:	strbhi	r2, [r3, fp]
   17c88:	add	fp, fp, #1
   17c8c:	cmp	fp, r7
   17c90:	ldrcc	r3, [sp, #36]	; 0x24
   17c94:	strbcc	r4, [r3, fp]
   17c98:	add	fp, fp, #1
   17c9c:	ldr	r3, [sp, #40]	; 0x28
   17ca0:	cmp	r8, #0
   17ca4:	moveq	r3, #0
   17ca8:	str	r3, [sp, #40]	; 0x28
   17cac:	add	r6, r6, #1
   17cb0:	ldr	r3, [sp, #28]
   17cb4:	cmn	r3, #1
   17cb8:	beq	18244 <lchmod@@Base+0x184c>
   17cbc:	ldr	r3, [sp, #28]
   17cc0:	subs	r8, r3, r6
   17cc4:	movne	r8, #1
   17cc8:	cmp	r8, #0
   17ccc:	beq	18258 <lchmod@@Base+0x1860>
   17cd0:	ldr	r5, [sp, #48]	; 0x30
   17cd4:	cmp	sl, #2
   17cd8:	moveq	r5, #0
   17cdc:	andne	r5, r5, #1
   17ce0:	ldr	r3, [sp, #60]	; 0x3c
   17ce4:	adds	r9, r3, #0
   17ce8:	movne	r9, #1
   17cec:	ands	r2, r5, r9
   17cf0:	str	r2, [sp, #56]	; 0x38
   17cf4:	beq	175bc <lchmod@@Base+0xbc4>
   17cf8:	add	r4, r6, r3
   17cfc:	ldr	r2, [sp, #28]
   17d00:	cmp	r3, #1
   17d04:	movls	r3, #0
   17d08:	movhi	r3, #1
   17d0c:	cmn	r2, #1
   17d10:	movne	r3, #0
   17d14:	cmp	r3, #0
   17d18:	beq	17d28 <lchmod@@Base+0x1330>
   17d1c:	ldr	r0, [sp, #52]	; 0x34
   17d20:	bl	116e0 <strlen@plt>
   17d24:	str	r0, [sp, #28]
   17d28:	ldr	r3, [sp, #28]
   17d2c:	cmp	r3, r4
   17d30:	bcc	175b4 <lchmod@@Base+0xbbc>
   17d34:	ldr	r2, [sp, #60]	; 0x3c
   17d38:	ldr	r1, [sp, #72]	; 0x48
   17d3c:	ldr	r3, [sp, #52]	; 0x34
   17d40:	add	r0, r3, r6
   17d44:	bl	11560 <memcmp@plt>
   17d48:	cmp	r0, #0
   17d4c:	bne	177d4 <lchmod@@Base+0xddc>
   17d50:	ldr	r3, [sp, #32]
   17d54:	cmp	r3, #0
   17d58:	beq	175bc <lchmod@@Base+0xbc4>
   17d5c:	mov	r8, sl
   17d60:	mov	sl, r7
   17d64:	b	183b4 <lchmod@@Base+0x19bc>
   17d68:	mov	r8, sl
   17d6c:	mov	sl, r7
   17d70:	b	183b4 <lchmod@@Base+0x19bc>
   17d74:	cmp	sl, #2
   17d78:	strne	r8, [sp, #80]	; 0x50
   17d7c:	movne	r5, #0
   17d80:	bne	17bb8 <lchmod@@Base+0x11c0>
   17d84:	ldr	r3, [sp, #32]
   17d88:	cmp	r3, #0
   17d8c:	bne	183a0 <lchmod@@Base+0x19a8>
   17d90:	ldr	r2, [sp, #76]	; 0x4c
   17d94:	adds	r3, r7, #0
   17d98:	movne	r3, #1
   17d9c:	cmp	r2, #0
   17da0:	movne	r3, #0
   17da4:	cmp	r3, #0
   17da8:	movne	r3, #0
   17dac:	bne	17ddc <lchmod@@Base+0x13e4>
   17db0:	cmp	r7, fp
   17db4:	ldrhi	r3, [sp, #36]	; 0x24
   17db8:	movhi	r2, #39	; 0x27
   17dbc:	strbhi	r2, [r3, fp]
   17dc0:	add	r3, fp, #1
   17dc4:	cmp	r7, r3
   17dc8:	ldrhi	r2, [sp, #36]	; 0x24
   17dcc:	movhi	r1, #92	; 0x5c
   17dd0:	strbhi	r1, [r2, r3]
   17dd4:	mov	r3, r7
   17dd8:	ldr	r7, [sp, #76]	; 0x4c
   17ddc:	add	r2, fp, #2
   17de0:	cmp	r2, r3
   17de4:	ldrcc	r1, [sp, #36]	; 0x24
   17de8:	movcc	r0, #39	; 0x27
   17dec:	strbcc	r0, [r1, r2]
   17df0:	add	fp, fp, #3
   17df4:	ldr	r2, [sp, #32]
   17df8:	mov	r5, r2
   17dfc:	str	r8, [sp, #80]	; 0x50
   17e00:	str	r2, [sp, #44]	; 0x2c
   17e04:	str	r7, [sp, #76]	; 0x4c
   17e08:	mov	r7, r3
   17e0c:	b	17bb8 <lchmod@@Base+0x11c0>
   17e10:	ldr	r5, [sp, #84]	; 0x54
   17e14:	cmp	r5, #1
   17e18:	beq	17e48 <lchmod@@Base+0x1450>
   17e1c:	mov	r3, #0
   17e20:	str	r3, [sp, #104]	; 0x68
   17e24:	str	r3, [sp, #108]	; 0x6c
   17e28:	ldr	r3, [sp, #28]
   17e2c:	cmn	r3, #1
   17e30:	beq	17e7c <lchmod@@Base+0x1484>
   17e34:	mov	r3, #0
   17e38:	str	r4, [sp, #88]	; 0x58
   17e3c:	str	fp, [sp, #92]	; 0x5c
   17e40:	mov	fp, r3
   17e44:	b	17fa4 <lchmod@@Base+0x15ac>
   17e48:	bl	116b0 <__ctype_b_loc@plt>
   17e4c:	ldr	r2, [r0]
   17e50:	lsl	r3, r4, #1
   17e54:	ldrh	r8, [r2, r3]
   17e58:	lsr	r8, r8, #14
   17e5c:	and	r8, r8, #1
   17e60:	mov	r2, r5
   17e64:	eor	r5, r8, #1
   17e68:	ldr	r3, [sp, #48]	; 0x30
   17e6c:	and	r5, r5, r3
   17e70:	ands	r5, r5, #255	; 0xff
   17e74:	beq	17bb8 <lchmod@@Base+0x11c0>
   17e78:	b	1803c <lchmod@@Base+0x1644>
   17e7c:	ldr	r0, [sp, #52]	; 0x34
   17e80:	bl	116e0 <strlen@plt>
   17e84:	str	r0, [sp, #28]
   17e88:	b	17e34 <lchmod@@Base+0x143c>
   17e8c:	mov	r2, fp
   17e90:	mov	r1, r4
   17e94:	ldr	r4, [sp, #88]	; 0x58
   17e98:	ldr	fp, [sp, #92]	; 0x5c
   17e9c:	ldr	r0, [sp, #28]
   17ea0:	cmp	r0, r5
   17ea4:	bls	18070 <lchmod@@Base+0x1678>
   17ea8:	ldrb	r3, [r1]
   17eac:	cmp	r3, #0
   17eb0:	beq	18078 <lchmod@@Base+0x1680>
   17eb4:	mov	r3, r1
   17eb8:	add	r2, r2, #1
   17ebc:	add	r1, r6, r2
   17ec0:	cmp	r0, r1
   17ec4:	bls	18080 <lchmod@@Base+0x1688>
   17ec8:	ldrb	r1, [r3, #1]!
   17ecc:	cmp	r1, #0
   17ed0:	bne	17eb8 <lchmod@@Base+0x14c0>
   17ed4:	mov	r8, #0
   17ed8:	b	18034 <lchmod@@Base+0x163c>
   17edc:	cmp	r4, r5
   17ee0:	beq	17f80 <lchmod@@Base+0x1588>
   17ee4:	ldrb	r3, [r4, #1]!
   17ee8:	sub	r3, r3, #91	; 0x5b
   17eec:	cmp	r3, #33	; 0x21
   17ef0:	ldrls	pc, [pc, r3, lsl #2]
   17ef4:	b	17edc <lchmod@@Base+0x14e4>
   17ef8:	andeq	r8, r1, ip, lsr #7
   17efc:	andeq	r8, r1, ip, lsr #7
   17f00:	ldrdeq	r7, [r1], -ip
   17f04:	andeq	r8, r1, ip, lsr #7
   17f08:	ldrdeq	r7, [r1], -ip
   17f0c:	andeq	r8, r1, ip, lsr #7
   17f10:	ldrdeq	r7, [r1], -ip
   17f14:	ldrdeq	r7, [r1], -ip
   17f18:	ldrdeq	r7, [r1], -ip
   17f1c:	ldrdeq	r7, [r1], -ip
   17f20:	ldrdeq	r7, [r1], -ip
   17f24:	ldrdeq	r7, [r1], -ip
   17f28:	ldrdeq	r7, [r1], -ip
   17f2c:	ldrdeq	r7, [r1], -ip
   17f30:	ldrdeq	r7, [r1], -ip
   17f34:	ldrdeq	r7, [r1], -ip
   17f38:	ldrdeq	r7, [r1], -ip
   17f3c:	ldrdeq	r7, [r1], -ip
   17f40:	ldrdeq	r7, [r1], -ip
   17f44:	ldrdeq	r7, [r1], -ip
   17f48:	ldrdeq	r7, [r1], -ip
   17f4c:	ldrdeq	r7, [r1], -ip
   17f50:	ldrdeq	r7, [r1], -ip
   17f54:	ldrdeq	r7, [r1], -ip
   17f58:	ldrdeq	r7, [r1], -ip
   17f5c:	ldrdeq	r7, [r1], -ip
   17f60:	ldrdeq	r7, [r1], -ip
   17f64:	ldrdeq	r7, [r1], -ip
   17f68:	ldrdeq	r7, [r1], -ip
   17f6c:	ldrdeq	r7, [r1], -ip
   17f70:	ldrdeq	r7, [r1], -ip
   17f74:	ldrdeq	r7, [r1], -ip
   17f78:	ldrdeq	r7, [r1], -ip
   17f7c:	andeq	r8, r1, ip, lsr #7
   17f80:	ldr	r0, [sp, #100]	; 0x64
   17f84:	bl	115cc <iswprint@plt>
   17f88:	cmp	r0, #0
   17f8c:	moveq	r8, #0
   17f90:	add	fp, fp, r9
   17f94:	add	r0, sp, #104	; 0x68
   17f98:	bl	11548 <mbsinit@plt>
   17f9c:	cmp	r0, #0
   17fa0:	bne	18014 <lchmod@@Base+0x161c>
   17fa4:	add	r5, r6, fp
   17fa8:	ldr	r3, [sp, #52]	; 0x34
   17fac:	add	r4, r3, r5
   17fb0:	add	r3, sp, #104	; 0x68
   17fb4:	ldr	r2, [sp, #28]
   17fb8:	sub	r2, r2, r5
   17fbc:	mov	r1, r4
   17fc0:	add	r0, sp, #100	; 0x64
   17fc4:	bl	1a788 <lchmod@@Base+0x3d90>
   17fc8:	subs	r9, r0, #0
   17fcc:	beq	18088 <lchmod@@Base+0x1690>
   17fd0:	cmn	r9, #1
   17fd4:	beq	18024 <lchmod@@Base+0x162c>
   17fd8:	cmn	r9, #2
   17fdc:	beq	17e8c <lchmod@@Base+0x1494>
   17fe0:	ldr	r3, [sp, #32]
   17fe4:	cmp	sl, #2
   17fe8:	movne	r3, #0
   17fec:	andeq	r3, r3, #1
   17ff0:	cmp	r3, #0
   17ff4:	beq	17f80 <lchmod@@Base+0x1588>
   17ff8:	cmp	r9, #1
   17ffc:	bls	17f80 <lchmod@@Base+0x1588>
   18000:	sub	r3, r9, #1
   18004:	add	r5, r3, r5
   18008:	ldr	r3, [sp, #52]	; 0x34
   1800c:	add	r5, r3, r5
   18010:	b	17ee4 <lchmod@@Base+0x14ec>
   18014:	ldr	r4, [sp, #88]	; 0x58
   18018:	mov	r2, fp
   1801c:	ldr	fp, [sp, #92]	; 0x5c
   18020:	b	18034 <lchmod@@Base+0x163c>
   18024:	ldr	r4, [sp, #88]	; 0x58
   18028:	mov	r2, fp
   1802c:	ldr	fp, [sp, #92]	; 0x5c
   18030:	mov	r8, #0
   18034:	cmp	r2, #1
   18038:	bls	17e64 <lchmod@@Base+0x146c>
   1803c:	add	r1, r6, r2
   18040:	ldr	ip, [sp, #64]	; 0x40
   18044:	mov	r5, #0
   18048:	eor	r3, r8, #1
   1804c:	ldr	r2, [sp, #48]	; 0x30
   18050:	and	r3, r3, r2
   18054:	uxtb	r3, r3
   18058:	ldr	r9, [sp, #32]
   1805c:	ldr	lr, [sp, #44]	; 0x2c
   18060:	ldr	r2, [sp, #56]	; 0x38
   18064:	str	r8, [sp, #56]	; 0x38
   18068:	ldr	r0, [sp, #36]	; 0x24
   1806c:	b	18108 <lchmod@@Base+0x1710>
   18070:	mov	r8, #0
   18074:	b	18034 <lchmod@@Base+0x163c>
   18078:	mov	r8, #0
   1807c:	b	18034 <lchmod@@Base+0x163c>
   18080:	mov	r8, #0
   18084:	b	18034 <lchmod@@Base+0x163c>
   18088:	ldr	r4, [sp, #88]	; 0x58
   1808c:	mov	r2, fp
   18090:	ldr	fp, [sp, #92]	; 0x5c
   18094:	b	18034 <lchmod@@Base+0x163c>
   18098:	cmp	r2, #0
   1809c:	beq	180b0 <lchmod@@Base+0x16b8>
   180a0:	cmp	r7, fp
   180a4:	movhi	r2, #92	; 0x5c
   180a8:	strbhi	r2, [r0, fp]
   180ac:	add	fp, fp, #1
   180b0:	add	r8, r6, #1
   180b4:	cmp	r1, r8
   180b8:	bls	181c0 <lchmod@@Base+0x17c8>
   180bc:	eor	r2, r5, #1
   180c0:	and	r2, r2, lr
   180c4:	ands	r2, r2, #255	; 0xff
   180c8:	beq	181dc <lchmod@@Base+0x17e4>
   180cc:	cmp	r7, fp
   180d0:	movhi	r2, #39	; 0x27
   180d4:	strbhi	r2, [r0, fp]
   180d8:	add	r2, fp, #1
   180dc:	cmp	r7, r2
   180e0:	movhi	lr, #39	; 0x27
   180e4:	strbhi	lr, [r0, r2]
   180e8:	add	fp, fp, #2
   180ec:	mov	r6, r8
   180f0:	mov	r2, r3
   180f4:	mov	lr, r3
   180f8:	cmp	r7, fp
   180fc:	strbhi	r4, [r0, fp]
   18100:	add	fp, fp, #1
   18104:	ldrb	r4, [ip, #1]!
   18108:	cmp	r3, #0
   1810c:	beq	18098 <lchmod@@Base+0x16a0>
   18110:	cmp	r9, #0
   18114:	bne	18418 <lchmod@@Base+0x1a20>
   18118:	eor	r5, lr, #1
   1811c:	cmp	sl, #2
   18120:	movne	r5, #0
   18124:	andeq	r5, r5, #1
   18128:	cmp	r5, #0
   1812c:	beq	18164 <lchmod@@Base+0x176c>
   18130:	cmp	r7, fp
   18134:	movhi	lr, #39	; 0x27
   18138:	strbhi	lr, [r0, fp]
   1813c:	add	lr, fp, #1
   18140:	cmp	r7, lr
   18144:	movhi	r8, #36	; 0x24
   18148:	strbhi	r8, [r0, lr]
   1814c:	add	lr, fp, #2
   18150:	cmp	r7, lr
   18154:	movhi	r8, #39	; 0x27
   18158:	strbhi	r8, [r0, lr]
   1815c:	add	fp, fp, #3
   18160:	mov	lr, r5
   18164:	cmp	r7, fp
   18168:	movhi	r5, #92	; 0x5c
   1816c:	strbhi	r5, [r0, fp]
   18170:	add	r5, fp, #1
   18174:	cmp	r7, r5
   18178:	lsrhi	r8, r4, #6
   1817c:	addhi	r8, r8, #48	; 0x30
   18180:	strbhi	r8, [r0, r5]
   18184:	add	r8, fp, #2
   18188:	cmp	r7, r8
   1818c:	lsrhi	r5, r4, #3
   18190:	andhi	r5, r5, #7
   18194:	addhi	r5, r5, #48	; 0x30
   18198:	strbhi	r5, [r0, r8]
   1819c:	add	fp, fp, #3
   181a0:	and	r4, r4, #7
   181a4:	add	r4, r4, #48	; 0x30
   181a8:	add	r5, r6, #1
   181ac:	cmp	r1, r5
   181b0:	bls	181cc <lchmod@@Base+0x17d4>
   181b4:	mov	r6, r5
   181b8:	mov	r5, r3
   181bc:	b	180f8 <lchmod@@Base+0x1700>
   181c0:	str	lr, [sp, #44]	; 0x2c
   181c4:	ldr	r8, [sp, #56]	; 0x38
   181c8:	b	17a9c <lchmod@@Base+0x10a4>
   181cc:	str	lr, [sp, #44]	; 0x2c
   181d0:	ldr	r8, [sp, #56]	; 0x38
   181d4:	mov	r5, r3
   181d8:	b	17a9c <lchmod@@Base+0x10a4>
   181dc:	mov	r6, r8
   181e0:	b	180f8 <lchmod@@Base+0x1700>
   181e4:	mov	r5, #0
   181e8:	b	17bb8 <lchmod@@Base+0x11c0>
   181ec:	mov	r8, r5
   181f0:	ldr	r5, [sp, #48]	; 0x30
   181f4:	mov	r4, #48	; 0x30
   181f8:	b	17bb8 <lchmod@@Base+0x11c0>
   181fc:	ldr	r8, [sp, #32]
   18200:	mov	r4, #48	; 0x30
   18204:	b	17bb8 <lchmod@@Base+0x11c0>
   18208:	ldr	r8, [sp, #32]
   1820c:	mov	r4, #48	; 0x30
   18210:	b	17bb8 <lchmod@@Base+0x11c0>
   18214:	mov	r8, #0
   18218:	mov	r5, r8
   1821c:	b	17bb8 <lchmod@@Base+0x11c0>
   18220:	mov	r8, #0
   18224:	mov	r5, r8
   18228:	b	17bb8 <lchmod@@Base+0x11c0>
   1822c:	mov	r8, #0
   18230:	mov	r5, r8
   18234:	b	17bb8 <lchmod@@Base+0x11c0>
   18238:	mov	r8, #0
   1823c:	mov	r5, r8
   18240:	b	17bb8 <lchmod@@Base+0x11c0>
   18244:	ldr	r3, [sp, #52]	; 0x34
   18248:	ldrb	r8, [r3, r6]
   1824c:	adds	r8, r8, #0
   18250:	movne	r8, #1
   18254:	b	17cc8 <lchmod@@Base+0x12d0>
   18258:	cmp	sl, #2
   1825c:	movne	r3, #0
   18260:	moveq	r3, #1
   18264:	ldr	r1, [sp, #32]
   18268:	mov	r2, r1
   1826c:	and	r2, r2, r3
   18270:	cmp	fp, #0
   18274:	movne	r2, #0
   18278:	andeq	r2, r2, #1
   1827c:	cmp	r2, #0
   18280:	bne	18430 <lchmod@@Base+0x1a38>
   18284:	eor	r2, r1, #1
   18288:	and	r3, r3, r2
   1828c:	ldr	r1, [sp, #80]	; 0x50
   18290:	tst	r1, r3
   18294:	beq	1830c <lchmod@@Base+0x1914>
   18298:	ldr	r3, [sp, #40]	; 0x28
   1829c:	cmp	r3, #0
   182a0:	bne	182c8 <lchmod@@Base+0x18d0>
   182a4:	ldr	r1, [sp, #76]	; 0x4c
   182a8:	clz	r3, r7
   182ac:	lsr	r3, r3, #5
   182b0:	cmp	r1, #0
   182b4:	moveq	r3, #0
   182b8:	cmp	r3, #0
   182bc:	beq	1830c <lchmod@@Base+0x1914>
   182c0:	ldr	r7, [sp, #76]	; 0x4c
   182c4:	b	1735c <lchmod@@Base+0x964>
   182c8:	ldr	r3, [sp, #168]	; 0xa8
   182cc:	str	r3, [sp, #16]
   182d0:	ldr	r3, [sp, #164]	; 0xa4
   182d4:	str	r3, [sp, #12]
   182d8:	ldr	r3, [sp, #160]	; 0xa0
   182dc:	str	r3, [sp, #8]
   182e0:	ldr	r3, [sp, #156]	; 0x9c
   182e4:	str	r3, [sp, #4]
   182e8:	mov	r3, #5
   182ec:	str	r3, [sp]
   182f0:	ldr	r3, [sp, #28]
   182f4:	ldr	r2, [sp, #52]	; 0x34
   182f8:	ldr	r1, [sp, #76]	; 0x4c
   182fc:	ldr	r0, [sp, #36]	; 0x24
   18300:	bl	172fc <lchmod@@Base+0x904>
   18304:	mov	fp, r0
   18308:	b	1840c <lchmod@@Base+0x1a14>
   1830c:	mov	sl, r7
   18310:	ldr	r3, [sp, #72]	; 0x48
   18314:	cmp	r3, #0
   18318:	moveq	r2, #0
   1831c:	andne	r2, r2, #1
   18320:	cmp	r2, #0
   18324:	beq	18354 <lchmod@@Base+0x195c>
   18328:	mov	r2, r3
   1832c:	ldrb	r3, [r3]
   18330:	cmp	r3, #0
   18334:	beq	18354 <lchmod@@Base+0x195c>
   18338:	ldr	r1, [sp, #36]	; 0x24
   1833c:	cmp	sl, fp
   18340:	strbhi	r3, [r1, fp]
   18344:	add	fp, fp, #1
   18348:	ldrb	r3, [r2, #1]!
   1834c:	cmp	r3, #0
   18350:	bne	1833c <lchmod@@Base+0x1944>
   18354:	cmp	sl, fp
   18358:	movhi	r3, #0
   1835c:	ldrhi	r2, [sp, #36]	; 0x24
   18360:	strbhi	r3, [r2, fp]
   18364:	b	1840c <lchmod@@Base+0x1a14>
   18368:	mov	r8, sl
   1836c:	mov	sl, r7
   18370:	ldr	r3, [sp, #32]
   18374:	str	r3, [sp, #48]	; 0x30
   18378:	b	183b4 <lchmod@@Base+0x19bc>
   1837c:	mov	r8, sl
   18380:	mov	sl, r7
   18384:	b	183b4 <lchmod@@Base+0x19bc>
   18388:	mov	r8, sl
   1838c:	mov	sl, r7
   18390:	b	183b4 <lchmod@@Base+0x19bc>
   18394:	andeq	fp, r1, ip, asr #19
   18398:	ldrdeq	fp, [r1], -ip
   1839c:	ldrdeq	fp, [r1], -r0
   183a0:	mov	r8, sl
   183a4:	mov	sl, r7
   183a8:	b	183b4 <lchmod@@Base+0x19bc>
   183ac:	mov	r8, sl
   183b0:	mov	sl, r7
   183b4:	ldr	r3, [sp, #48]	; 0x30
   183b8:	cmp	r8, #2
   183bc:	movne	r3, #0
   183c0:	andeq	r3, r3, #1
   183c4:	cmp	r3, #0
   183c8:	movne	r8, #4
   183cc:	ldr	r3, [sp, #168]	; 0xa8
   183d0:	str	r3, [sp, #16]
   183d4:	ldr	r3, [sp, #164]	; 0xa4
   183d8:	str	r3, [sp, #12]
   183dc:	mov	r3, #0
   183e0:	str	r3, [sp, #8]
   183e4:	ldr	r3, [sp, #156]	; 0x9c
   183e8:	bic	r3, r3, #2
   183ec:	str	r3, [sp, #4]
   183f0:	str	r8, [sp]
   183f4:	ldr	r3, [sp, #28]
   183f8:	ldr	r2, [sp, #52]	; 0x34
   183fc:	mov	r1, sl
   18400:	ldr	r0, [sp, #36]	; 0x24
   18404:	bl	172fc <lchmod@@Base+0x904>
   18408:	mov	fp, r0
   1840c:	mov	r0, fp
   18410:	add	sp, sp, #116	; 0x74
   18414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18418:	mov	r8, sl
   1841c:	mov	sl, r7
   18420:	b	183b4 <lchmod@@Base+0x19bc>
   18424:	mov	r8, sl
   18428:	mov	sl, r7
   1842c:	b	183b4 <lchmod@@Base+0x19bc>
   18430:	mov	r8, sl
   18434:	mov	sl, r7
   18438:	b	183b4 <lchmod@@Base+0x19bc>
   1843c:	mov	r8, sl
   18440:	mov	sl, r7
   18444:	b	183cc <lchmod@@Base+0x19d4>
   18448:	mov	r3, #1
   1844c:	str	r3, [sp, #32]
   18450:	str	r3, [sp, #48]	; 0x30
   18454:	str	r3, [sp, #60]	; 0x3c
   18458:	ldr	r3, [pc, #-196]	; 1839c <lchmod@@Base+0x19a4>
   1845c:	str	r3, [sp, #72]	; 0x48
   18460:	mov	fp, #0
   18464:	mov	sl, #5
   18468:	b	173b8 <lchmod@@Base+0x9c0>
   1846c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18470:	sub	sp, sp, #52	; 0x34
   18474:	mov	r5, r0
   18478:	str	r1, [sp, #24]
   1847c:	str	r2, [sp, #28]
   18480:	mov	r4, r3
   18484:	bl	1171c <__errno_location@plt>
   18488:	str	r0, [sp, #32]
   1848c:	ldr	r3, [r0]
   18490:	str	r3, [sp, #36]	; 0x24
   18494:	ldr	r3, [pc, #396]	; 18628 <lchmod@@Base+0x1c30>
   18498:	ldr	r6, [r3]
   1849c:	cmn	r5, #-2147483647	; 0x80000001
   184a0:	movne	r3, #0
   184a4:	moveq	r3, #1
   184a8:	orrs	r3, r3, r5, lsr #31
   184ac:	bne	185ec <lchmod@@Base+0x1bf4>
   184b0:	ldr	r3, [pc, #368]	; 18628 <lchmod@@Base+0x1c30>
   184b4:	ldr	r2, [r3, #4]
   184b8:	cmp	r5, r2
   184bc:	blt	18524 <lchmod@@Base+0x1b2c>
   184c0:	str	r2, [sp, #44]	; 0x2c
   184c4:	add	r3, r3, #8
   184c8:	cmp	r6, r3
   184cc:	beq	185f0 <lchmod@@Base+0x1bf8>
   184d0:	sub	r2, r5, r2
   184d4:	mov	r3, #8
   184d8:	str	r3, [sp]
   184dc:	mvn	r3, #-2147483648	; 0x80000000
   184e0:	add	r2, r2, #1
   184e4:	add	r1, sp, #44	; 0x2c
   184e8:	mov	r0, r6
   184ec:	bl	195c0 <lchmod@@Base+0x2bc8>
   184f0:	mov	r6, r0
   184f4:	ldr	r3, [pc, #300]	; 18628 <lchmod@@Base+0x1c30>
   184f8:	str	r0, [r3]
   184fc:	ldr	r7, [pc, #292]	; 18628 <lchmod@@Base+0x1c30>
   18500:	ldr	r0, [r7, #4]
   18504:	ldr	r2, [sp, #44]	; 0x2c
   18508:	sub	r2, r2, r0
   1850c:	lsl	r2, r2, #3
   18510:	mov	r1, #0
   18514:	add	r0, r6, r0, lsl #3
   18518:	bl	11740 <memset@plt>
   1851c:	ldr	r3, [sp, #44]	; 0x2c
   18520:	str	r3, [r7, #4]
   18524:	add	fp, r6, r5, lsl #3
   18528:	ldr	r8, [r6, r5, lsl #3]
   1852c:	ldr	r7, [fp, #4]
   18530:	ldr	r9, [r4, #4]
   18534:	orr	r9, r9, #1
   18538:	add	sl, r4, #8
   1853c:	ldr	r3, [r4, #44]	; 0x2c
   18540:	str	r3, [sp, #16]
   18544:	ldr	r3, [r4, #40]	; 0x28
   18548:	str	r3, [sp, #12]
   1854c:	str	sl, [sp, #8]
   18550:	str	r9, [sp, #4]
   18554:	ldr	r3, [r4]
   18558:	str	r3, [sp]
   1855c:	ldr	r3, [sp, #28]
   18560:	ldr	r2, [sp, #24]
   18564:	mov	r1, r8
   18568:	mov	r0, r7
   1856c:	bl	172fc <lchmod@@Base+0x904>
   18570:	cmp	r8, r0
   18574:	bhi	185d4 <lchmod@@Base+0x1bdc>
   18578:	add	r8, r0, #1
   1857c:	str	r8, [r6, r5, lsl #3]
   18580:	ldr	r3, [pc, #164]	; 1862c <lchmod@@Base+0x1c34>
   18584:	cmp	r7, r3
   18588:	beq	18594 <lchmod@@Base+0x1b9c>
   1858c:	mov	r0, r7
   18590:	bl	136c8 <__assert_fail@plt+0x1dfc>
   18594:	mov	r0, r8
   18598:	bl	1943c <lchmod@@Base+0x2a44>
   1859c:	mov	r7, r0
   185a0:	str	r0, [fp, #4]
   185a4:	ldr	r3, [r4, #44]	; 0x2c
   185a8:	str	r3, [sp, #16]
   185ac:	ldr	r3, [r4, #40]	; 0x28
   185b0:	str	r3, [sp, #12]
   185b4:	str	sl, [sp, #8]
   185b8:	str	r9, [sp, #4]
   185bc:	ldr	r3, [r4]
   185c0:	str	r3, [sp]
   185c4:	ldr	r3, [sp, #28]
   185c8:	ldr	r2, [sp, #24]
   185cc:	mov	r1, r8
   185d0:	bl	172fc <lchmod@@Base+0x904>
   185d4:	ldr	r3, [sp, #32]
   185d8:	ldr	r2, [sp, #36]	; 0x24
   185dc:	str	r2, [r3]
   185e0:	mov	r0, r7
   185e4:	add	sp, sp, #52	; 0x34
   185e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ec:	bl	11878 <abort@plt>
   185f0:	sub	r2, r5, r2
   185f4:	mov	r3, #8
   185f8:	str	r3, [sp]
   185fc:	mvn	r3, #-2147483648	; 0x80000000
   18600:	add	r2, r2, #1
   18604:	add	r1, sp, #44	; 0x2c
   18608:	mov	r0, #0
   1860c:	bl	195c0 <lchmod@@Base+0x2bc8>
   18610:	mov	r6, r0
   18614:	ldr	r3, [pc, #12]	; 18628 <lchmod@@Base+0x1c30>
   18618:	str	r0, [r3], #8
   1861c:	ldm	r3, {r0, r1}
   18620:	stm	r6, {r0, r1}
   18624:	b	184fc <lchmod@@Base+0x1b04>
   18628:	muleq	r2, r0, r1
   1862c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18630:	push	{r4, r5, r6, lr}
   18634:	mov	r4, r0
   18638:	bl	1171c <__errno_location@plt>
   1863c:	mov	r5, r0
   18640:	ldr	r6, [r0]
   18644:	cmp	r4, #0
   18648:	ldr	r3, [pc, #20]	; 18664 <lchmod@@Base+0x1c6c>
   1864c:	moveq	r4, r3
   18650:	mov	r1, #48	; 0x30
   18654:	mov	r0, r4
   18658:	bl	19928 <lchmod@@Base+0x2f30>
   1865c:	str	r6, [r5]
   18660:	pop	{r4, r5, r6, pc}
   18664:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18668:	subs	r3, r0, #0
   1866c:	ldr	r2, [pc, #8]	; 1867c <lchmod@@Base+0x1c84>
   18670:	moveq	r3, r2
   18674:	ldr	r0, [r3]
   18678:	bx	lr
   1867c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18680:	subs	r3, r0, #0
   18684:	ldr	r2, [pc, #8]	; 18694 <lchmod@@Base+0x1c9c>
   18688:	moveq	r3, r2
   1868c:	str	r1, [r3]
   18690:	bx	lr
   18694:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18698:	push	{lr}		; (str lr, [sp, #-4]!)
   1869c:	subs	r3, r0, #0
   186a0:	ldr	r0, [pc, #44]	; 186d4 <lchmod@@Base+0x1cdc>
   186a4:	moveq	r3, r0
   186a8:	add	r3, r3, #8
   186ac:	lsr	lr, r1, #5
   186b0:	and	r1, r1, #31
   186b4:	ldr	ip, [r3, lr, lsl #2]
   186b8:	lsr	r0, ip, r1
   186bc:	eor	r2, r2, r0
   186c0:	and	r2, r2, #1
   186c4:	eor	r1, ip, r2, lsl r1
   186c8:	str	r1, [r3, lr, lsl #2]
   186cc:	and	r0, r0, #1
   186d0:	pop	{pc}		; (ldr pc, [sp], #4)
   186d4:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   186d8:	subs	r3, r0, #0
   186dc:	ldr	r2, [pc, #12]	; 186f0 <lchmod@@Base+0x1cf8>
   186e0:	moveq	r3, r2
   186e4:	ldr	r0, [r3, #4]
   186e8:	str	r1, [r3, #4]
   186ec:	bx	lr
   186f0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   186f4:	subs	r3, r0, #0
   186f8:	ldr	r0, [pc, #40]	; 18728 <lchmod@@Base+0x1d30>
   186fc:	moveq	r3, r0
   18700:	mov	r0, #10
   18704:	str	r0, [r3]
   18708:	cmp	r2, #0
   1870c:	cmpne	r1, #0
   18710:	beq	18720 <lchmod@@Base+0x1d28>
   18714:	str	r1, [r3, #40]	; 0x28
   18718:	str	r2, [r3, #44]	; 0x2c
   1871c:	bx	lr
   18720:	push	{r4, lr}
   18724:	bl	11878 <abort@plt>
   18728:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1872c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18730:	sub	sp, sp, #24
   18734:	mov	r7, r0
   18738:	mov	r8, r1
   1873c:	mov	r9, r2
   18740:	mov	sl, r3
   18744:	ldr	r4, [sp, #56]	; 0x38
   18748:	cmp	r4, #0
   1874c:	ldr	r3, [pc, #84]	; 187a8 <lchmod@@Base+0x1db0>
   18750:	moveq	r4, r3
   18754:	bl	1171c <__errno_location@plt>
   18758:	mov	r5, r0
   1875c:	ldr	r6, [r0]
   18760:	ldr	r3, [r4, #44]	; 0x2c
   18764:	str	r3, [sp, #16]
   18768:	ldr	r3, [r4, #40]	; 0x28
   1876c:	str	r3, [sp, #12]
   18770:	add	r3, r4, #8
   18774:	str	r3, [sp, #8]
   18778:	ldr	r3, [r4, #4]
   1877c:	str	r3, [sp, #4]
   18780:	ldr	r3, [r4]
   18784:	str	r3, [sp]
   18788:	mov	r3, sl
   1878c:	mov	r2, r9
   18790:	mov	r1, r8
   18794:	mov	r0, r7
   18798:	bl	172fc <lchmod@@Base+0x904>
   1879c:	str	r6, [r5]
   187a0:	add	sp, sp, #24
   187a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   187a8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   187ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b0:	sub	sp, sp, #44	; 0x2c
   187b4:	str	r0, [sp, #28]
   187b8:	str	r1, [sp, #32]
   187bc:	mov	r6, r2
   187c0:	subs	r4, r3, #0
   187c4:	ldr	r3, [pc, #172]	; 18878 <lchmod@@Base+0x1e80>
   187c8:	moveq	r4, r3
   187cc:	bl	1171c <__errno_location@plt>
   187d0:	mov	r7, r0
   187d4:	ldr	fp, [r0]
   187d8:	ldr	r5, [r4, #4]
   187dc:	cmp	r6, #0
   187e0:	orreq	r5, r5, #1
   187e4:	add	r9, r4, #8
   187e8:	ldr	r3, [r4, #44]	; 0x2c
   187ec:	str	r3, [sp, #16]
   187f0:	ldr	r3, [r4, #40]	; 0x28
   187f4:	str	r3, [sp, #12]
   187f8:	str	r9, [sp, #8]
   187fc:	str	r5, [sp, #4]
   18800:	ldr	r3, [r4]
   18804:	str	r3, [sp]
   18808:	ldr	r3, [sp, #32]
   1880c:	ldr	r2, [sp, #28]
   18810:	mov	r1, #0
   18814:	mov	r0, r1
   18818:	bl	172fc <lchmod@@Base+0x904>
   1881c:	mov	sl, r0
   18820:	add	r8, r0, #1
   18824:	mov	r0, r8
   18828:	bl	1943c <lchmod@@Base+0x2a44>
   1882c:	str	r0, [sp, #36]	; 0x24
   18830:	ldr	r3, [r4, #44]	; 0x2c
   18834:	str	r3, [sp, #16]
   18838:	ldr	r3, [r4, #40]	; 0x28
   1883c:	str	r3, [sp, #12]
   18840:	str	r9, [sp, #8]
   18844:	str	r5, [sp, #4]
   18848:	ldr	r3, [r4]
   1884c:	str	r3, [sp]
   18850:	ldr	r3, [sp, #32]
   18854:	ldr	r2, [sp, #28]
   18858:	mov	r1, r8
   1885c:	bl	172fc <lchmod@@Base+0x904>
   18860:	str	fp, [r7]
   18864:	cmp	r6, #0
   18868:	strne	sl, [r6]
   1886c:	ldr	r0, [sp, #36]	; 0x24
   18870:	add	sp, sp, #44	; 0x2c
   18874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18878:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1887c:	push	{r4, lr}
   18880:	mov	r3, r2
   18884:	mov	r2, #0
   18888:	bl	187ac <lchmod@@Base+0x1db4>
   1888c:	pop	{r4, pc}
   18890:	push	{r4, r5, r6, r7, r8, lr}
   18894:	ldr	r3, [pc, #140]	; 18928 <lchmod@@Base+0x1f30>
   18898:	ldr	r7, [r3]
   1889c:	ldr	r3, [r3, #4]
   188a0:	cmp	r3, #1
   188a4:	ble	188d0 <lchmod@@Base+0x1ed8>
   188a8:	mov	r5, r7
   188ac:	mov	r4, #1
   188b0:	ldr	r6, [pc, #112]	; 18928 <lchmod@@Base+0x1f30>
   188b4:	ldr	r0, [r5, #12]
   188b8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   188bc:	add	r4, r4, #1
   188c0:	add	r5, r5, #8
   188c4:	ldr	r3, [r6, #4]
   188c8:	cmp	r3, r4
   188cc:	bgt	188b4 <lchmod@@Base+0x1ebc>
   188d0:	ldr	r0, [r7, #4]
   188d4:	ldr	r3, [pc, #80]	; 1892c <lchmod@@Base+0x1f34>
   188d8:	cmp	r0, r3
   188dc:	beq	188f8 <lchmod@@Base+0x1f00>
   188e0:	bl	136c8 <__assert_fail@plt+0x1dfc>
   188e4:	ldr	r3, [pc, #60]	; 18928 <lchmod@@Base+0x1f30>
   188e8:	mov	r2, #256	; 0x100
   188ec:	str	r2, [r3, #8]
   188f0:	ldr	r2, [pc, #52]	; 1892c <lchmod@@Base+0x1f34>
   188f4:	str	r2, [r3, #12]
   188f8:	ldr	r3, [pc, #48]	; 18930 <lchmod@@Base+0x1f38>
   188fc:	cmp	r7, r3
   18900:	beq	18918 <lchmod@@Base+0x1f20>
   18904:	mov	r0, r7
   18908:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1890c:	ldr	r3, [pc, #20]	; 18928 <lchmod@@Base+0x1f30>
   18910:	add	r2, r3, #8
   18914:	str	r2, [r3]
   18918:	mov	r2, #1
   1891c:	ldr	r3, [pc, #4]	; 18928 <lchmod@@Base+0x1f30>
   18920:	str	r2, [r3, #4]
   18924:	pop	{r4, r5, r6, r7, r8, pc}
   18928:	muleq	r2, r0, r1
   1892c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18930:	muleq	r2, r8, r1
   18934:	push	{r4, lr}
   18938:	ldr	r3, [pc, #8]	; 18948 <lchmod@@Base+0x1f50>
   1893c:	mvn	r2, #0
   18940:	bl	1846c <lchmod@@Base+0x1a74>
   18944:	pop	{r4, pc}
   18948:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1894c:	push	{r4, lr}
   18950:	ldr	r3, [pc, #4]	; 1895c <lchmod@@Base+0x1f64>
   18954:	bl	1846c <lchmod@@Base+0x1a74>
   18958:	pop	{r4, pc}
   1895c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18960:	push	{r4, lr}
   18964:	mov	r1, r0
   18968:	mov	r0, #0
   1896c:	bl	18934 <lchmod@@Base+0x1f3c>
   18970:	pop	{r4, pc}
   18974:	push	{r4, lr}
   18978:	mov	r2, r1
   1897c:	mov	r1, r0
   18980:	mov	r0, #0
   18984:	bl	1894c <lchmod@@Base+0x1f54>
   18988:	pop	{r4, pc}
   1898c:	push	{r4, r5, lr}
   18990:	sub	sp, sp, #52	; 0x34
   18994:	mov	r4, r0
   18998:	mov	r5, r2
   1899c:	mov	r0, sp
   189a0:	bl	17194 <lchmod@@Base+0x79c>
   189a4:	mov	r3, sp
   189a8:	mvn	r2, #0
   189ac:	mov	r1, r5
   189b0:	mov	r0, r4
   189b4:	bl	1846c <lchmod@@Base+0x1a74>
   189b8:	add	sp, sp, #52	; 0x34
   189bc:	pop	{r4, r5, pc}
   189c0:	push	{r4, r5, r6, lr}
   189c4:	sub	sp, sp, #48	; 0x30
   189c8:	mov	r4, r0
   189cc:	mov	r5, r2
   189d0:	mov	r6, r3
   189d4:	mov	r0, sp
   189d8:	bl	17194 <lchmod@@Base+0x79c>
   189dc:	mov	r3, sp
   189e0:	mov	r2, r6
   189e4:	mov	r1, r5
   189e8:	mov	r0, r4
   189ec:	bl	1846c <lchmod@@Base+0x1a74>
   189f0:	add	sp, sp, #48	; 0x30
   189f4:	pop	{r4, r5, r6, pc}
   189f8:	push	{r4, lr}
   189fc:	mov	r2, r1
   18a00:	mov	r1, r0
   18a04:	mov	r0, #0
   18a08:	bl	1898c <lchmod@@Base+0x1f94>
   18a0c:	pop	{r4, pc}
   18a10:	push	{r4, lr}
   18a14:	mov	r3, r2
   18a18:	mov	r2, r1
   18a1c:	mov	r1, r0
   18a20:	mov	r0, #0
   18a24:	bl	189c0 <lchmod@@Base+0x1fc8>
   18a28:	pop	{r4, pc}
   18a2c:	push	{r4, r5, r6, lr}
   18a30:	sub	sp, sp, #48	; 0x30
   18a34:	mov	r4, r0
   18a38:	mov	r5, r1
   18a3c:	mov	r6, r2
   18a40:	mov	ip, sp
   18a44:	ldr	lr, [pc, #64]	; 18a8c <lchmod@@Base+0x2094>
   18a48:	ldm	lr!, {r0, r1, r2, r3}
   18a4c:	stmia	ip!, {r0, r1, r2, r3}
   18a50:	ldm	lr!, {r0, r1, r2, r3}
   18a54:	stmia	ip!, {r0, r1, r2, r3}
   18a58:	ldm	lr, {r0, r1, r2, r3}
   18a5c:	stm	ip, {r0, r1, r2, r3}
   18a60:	mov	r2, #1
   18a64:	mov	r1, r6
   18a68:	mov	r0, sp
   18a6c:	bl	18698 <lchmod@@Base+0x1ca0>
   18a70:	mov	r3, sp
   18a74:	mov	r2, r5
   18a78:	mov	r1, r4
   18a7c:	mov	r0, #0
   18a80:	bl	1846c <lchmod@@Base+0x1a74>
   18a84:	add	sp, sp, #48	; 0x30
   18a88:	pop	{r4, r5, r6, pc}
   18a8c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18a90:	push	{r4, lr}
   18a94:	mov	r2, r1
   18a98:	mvn	r1, #0
   18a9c:	bl	18a2c <lchmod@@Base+0x2034>
   18aa0:	pop	{r4, pc}
   18aa4:	push	{r4, lr}
   18aa8:	mov	r1, #58	; 0x3a
   18aac:	bl	18a90 <lchmod@@Base+0x2098>
   18ab0:	pop	{r4, pc}
   18ab4:	push	{r4, lr}
   18ab8:	mov	r2, #58	; 0x3a
   18abc:	bl	18a2c <lchmod@@Base+0x2034>
   18ac0:	pop	{r4, pc}
   18ac4:	push	{r4, r5, lr}
   18ac8:	sub	sp, sp, #100	; 0x64
   18acc:	mov	r4, r0
   18ad0:	mov	r5, r2
   18ad4:	mov	r0, sp
   18ad8:	bl	17194 <lchmod@@Base+0x79c>
   18adc:	add	lr, sp, #48	; 0x30
   18ae0:	mov	ip, sp
   18ae4:	ldm	ip!, {r0, r1, r2, r3}
   18ae8:	stmia	lr!, {r0, r1, r2, r3}
   18aec:	ldm	ip!, {r0, r1, r2, r3}
   18af0:	stmia	lr!, {r0, r1, r2, r3}
   18af4:	ldm	ip, {r0, r1, r2, r3}
   18af8:	stm	lr, {r0, r1, r2, r3}
   18afc:	mov	r2, #1
   18b00:	mov	r1, #58	; 0x3a
   18b04:	add	r0, sp, #48	; 0x30
   18b08:	bl	18698 <lchmod@@Base+0x1ca0>
   18b0c:	add	r3, sp, #48	; 0x30
   18b10:	mvn	r2, #0
   18b14:	mov	r1, r5
   18b18:	mov	r0, r4
   18b1c:	bl	1846c <lchmod@@Base+0x1a74>
   18b20:	add	sp, sp, #100	; 0x64
   18b24:	pop	{r4, r5, pc}
   18b28:	push	{r4, r5, r6, r7, lr}
   18b2c:	sub	sp, sp, #52	; 0x34
   18b30:	mov	r4, r0
   18b34:	mov	r6, r1
   18b38:	mov	r7, r2
   18b3c:	mov	r5, r3
   18b40:	mov	ip, sp
   18b44:	ldr	lr, [pc, #64]	; 18b8c <lchmod@@Base+0x2194>
   18b48:	ldm	lr!, {r0, r1, r2, r3}
   18b4c:	stmia	ip!, {r0, r1, r2, r3}
   18b50:	ldm	lr!, {r0, r1, r2, r3}
   18b54:	stmia	ip!, {r0, r1, r2, r3}
   18b58:	ldm	lr, {r0, r1, r2, r3}
   18b5c:	stm	ip, {r0, r1, r2, r3}
   18b60:	mov	r2, r7
   18b64:	mov	r1, r6
   18b68:	mov	r0, sp
   18b6c:	bl	186f4 <lchmod@@Base+0x1cfc>
   18b70:	mov	r3, sp
   18b74:	ldr	r2, [sp, #72]	; 0x48
   18b78:	mov	r1, r5
   18b7c:	mov	r0, r4
   18b80:	bl	1846c <lchmod@@Base+0x1a74>
   18b84:	add	sp, sp, #52	; 0x34
   18b88:	pop	{r4, r5, r6, r7, pc}
   18b8c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18b90:	push	{lr}		; (str lr, [sp, #-4]!)
   18b94:	sub	sp, sp, #12
   18b98:	mvn	ip, #0
   18b9c:	str	ip, [sp]
   18ba0:	bl	18b28 <lchmod@@Base+0x2130>
   18ba4:	add	sp, sp, #12
   18ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   18bac:	push	{r4, lr}
   18bb0:	mov	r3, r2
   18bb4:	mov	r2, r1
   18bb8:	mov	r1, r0
   18bbc:	mov	r0, #0
   18bc0:	bl	18b90 <lchmod@@Base+0x2198>
   18bc4:	pop	{r4, pc}
   18bc8:	push	{lr}		; (str lr, [sp, #-4]!)
   18bcc:	sub	sp, sp, #12
   18bd0:	str	r3, [sp]
   18bd4:	mov	r3, r2
   18bd8:	mov	r2, r1
   18bdc:	mov	r1, r0
   18be0:	mov	r0, #0
   18be4:	bl	18b28 <lchmod@@Base+0x2130>
   18be8:	add	sp, sp, #12
   18bec:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf0:	push	{r4, lr}
   18bf4:	ldr	r3, [pc, #4]	; 18c00 <lchmod@@Base+0x2208>
   18bf8:	bl	1846c <lchmod@@Base+0x1a74>
   18bfc:	pop	{r4, pc}
   18c00:	andeq	ip, r2, r0, lsr #3
   18c04:	push	{r4, lr}
   18c08:	mov	r2, r1
   18c0c:	mov	r1, r0
   18c10:	mov	r0, #0
   18c14:	bl	18bf0 <lchmod@@Base+0x21f8>
   18c18:	pop	{r4, pc}
   18c1c:	push	{r4, lr}
   18c20:	mvn	r2, #0
   18c24:	bl	18bf0 <lchmod@@Base+0x21f8>
   18c28:	pop	{r4, pc}
   18c2c:	push	{r4, lr}
   18c30:	mov	r1, r0
   18c34:	mov	r0, #0
   18c38:	bl	18c1c <lchmod@@Base+0x2224>
   18c3c:	pop	{r4, pc}
   18c40:	push	{r4, r5, r6, lr}
   18c44:	mov	r5, r1
   18c48:	ldr	r4, [r0], #8
   18c4c:	cmp	r4, r0
   18c50:	beq	18c68 <lchmod@@Base+0x2270>
   18c54:	mov	r0, r4
   18c58:	bl	1a060 <lchmod@@Base+0x3668>
   18c5c:	cmp	r0, #0
   18c60:	moveq	r0, r4
   18c64:	pop	{r4, r5, r6, pc}
   18c68:	mov	r0, r1
   18c6c:	bl	1a030 <lchmod@@Base+0x3638>
   18c70:	cmp	r0, #0
   18c74:	popeq	{r4, r5, r6, pc}
   18c78:	mov	r2, r5
   18c7c:	mov	r1, r4
   18c80:	bl	11530 <memcpy@plt>
   18c84:	pop	{r4, r5, r6, pc}
   18c88:	push	{r4, r5, r6, lr}
   18c8c:	mov	r4, r0
   18c90:	ldr	r5, [r0, #4]
   18c94:	lsl	r5, r5, #1
   18c98:	mov	r6, r0
   18c9c:	ldr	r0, [r6], #8
   18ca0:	cmp	r0, r6
   18ca4:	beq	18cac <lchmod@@Base+0x22b4>
   18ca8:	bl	136c8 <__assert_fail@plt+0x1dfc>
   18cac:	ldr	r3, [r4, #4]
   18cb0:	cmp	r5, r3
   18cb4:	bcc	18cd8 <lchmod@@Base+0x22e0>
   18cb8:	mov	r0, r5
   18cbc:	bl	1a030 <lchmod@@Base+0x3638>
   18cc0:	cmp	r0, #0
   18cc4:	beq	18ce4 <lchmod@@Base+0x22ec>
   18cc8:	str	r0, [r4]
   18ccc:	str	r5, [r4, #4]
   18cd0:	mov	r0, #1
   18cd4:	pop	{r4, r5, r6, pc}
   18cd8:	bl	1171c <__errno_location@plt>
   18cdc:	mov	r3, #12
   18ce0:	str	r3, [r0]
   18ce4:	str	r6, [r4]
   18ce8:	mov	r3, #1024	; 0x400
   18cec:	str	r3, [r4, #4]
   18cf0:	mov	r0, #0
   18cf4:	pop	{r4, r5, r6, pc}
   18cf8:	push	{r4, r5, r6, r7, r8, lr}
   18cfc:	mov	r4, r0
   18d00:	ldr	r3, [r0, #4]
   18d04:	lsl	r6, r3, #1
   18d08:	mov	r5, r0
   18d0c:	ldr	r0, [r5], #8
   18d10:	cmp	r0, r5
   18d14:	beq	18d40 <lchmod@@Base+0x2348>
   18d18:	cmp	r3, r6
   18d1c:	bhi	18d64 <lchmod@@Base+0x236c>
   18d20:	mov	r1, r6
   18d24:	bl	1a060 <lchmod@@Base+0x3668>
   18d28:	subs	r7, r0, #0
   18d2c:	beq	18d70 <lchmod@@Base+0x2378>
   18d30:	str	r7, [r4]
   18d34:	str	r6, [r4, #4]
   18d38:	mov	r0, #1
   18d3c:	pop	{r4, r5, r6, r7, r8, pc}
   18d40:	mov	r0, r6
   18d44:	bl	1a030 <lchmod@@Base+0x3638>
   18d48:	subs	r7, r0, #0
   18d4c:	beq	18d8c <lchmod@@Base+0x2394>
   18d50:	ldr	r2, [r4, #4]
   18d54:	mov	r1, r5
   18d58:	mov	r0, r7
   18d5c:	bl	11530 <memcpy@plt>
   18d60:	b	18d30 <lchmod@@Base+0x2338>
   18d64:	bl	1171c <__errno_location@plt>
   18d68:	mov	r3, #12
   18d6c:	str	r3, [r0]
   18d70:	ldr	r0, [r4]
   18d74:	bl	136c8 <__assert_fail@plt+0x1dfc>
   18d78:	str	r5, [r4]
   18d7c:	mov	r3, #1024	; 0x400
   18d80:	str	r3, [r4, #4]
   18d84:	mov	r0, #0
   18d88:	pop	{r4, r5, r6, r7, r8, pc}
   18d8c:	mov	r0, #0
   18d90:	pop	{r4, r5, r6, r7, r8, pc}
   18d94:	push	{r4, r5, r6, lr}
   18d98:	subs	r4, r0, #0
   18d9c:	beq	18db4 <lchmod@@Base+0x23bc>
   18da0:	mov	r5, r1
   18da4:	cmp	r4, #10
   18da8:	beq	18dc8 <lchmod@@Base+0x23d0>
   18dac:	mov	r0, r4
   18db0:	pop	{r4, r5, r6, pc}
   18db4:	bl	1171c <__errno_location@plt>
   18db8:	mov	r3, #95	; 0x5f
   18dbc:	str	r3, [r0]
   18dc0:	mvn	r4, #0
   18dc4:	b	18dac <lchmod@@Base+0x23b4>
   18dc8:	ldr	r6, [r1]
   18dcc:	ldr	r1, [pc, #48]	; 18e04 <lchmod@@Base+0x240c>
   18dd0:	mov	r0, r6
   18dd4:	bl	114d0 <strcmp@plt>
   18dd8:	cmp	r0, #0
   18ddc:	bne	18dac <lchmod@@Base+0x23b4>
   18de0:	mov	r0, r6
   18de4:	bl	1180c <freecon@plt>
   18de8:	mov	r3, #0
   18dec:	str	r3, [r5]
   18df0:	bl	1171c <__errno_location@plt>
   18df4:	mov	r3, #61	; 0x3d
   18df8:	str	r3, [r0]
   18dfc:	mvn	r4, #0
   18e00:	b	18dac <lchmod@@Base+0x23b4>
   18e04:	andeq	fp, r1, r4, asr #20
   18e08:	push	{r4, lr}
   18e0c:	mov	r4, r1
   18e10:	bl	116d4 <getfilecon@plt>
   18e14:	mov	r1, r4
   18e18:	bl	18d94 <lchmod@@Base+0x239c>
   18e1c:	pop	{r4, pc}
   18e20:	push	{r4, lr}
   18e24:	mov	r4, r1
   18e28:	bl	11650 <lgetfilecon@plt>
   18e2c:	mov	r1, r4
   18e30:	bl	18d94 <lchmod@@Base+0x239c>
   18e34:	pop	{r4, pc}
   18e38:	push	{r4, lr}
   18e3c:	mov	r4, r1
   18e40:	bl	1159c <fgetfilecon@plt>
   18e44:	mov	r1, r4
   18e48:	bl	18d94 <lchmod@@Base+0x239c>
   18e4c:	pop	{r4, pc}
   18e50:	push	{r4, r5, r6, r7, r8, lr}
   18e54:	mov	r4, r0
   18e58:	cmp	r0, #2
   18e5c:	bls	18e68 <lchmod@@Base+0x2470>
   18e60:	mov	r0, r4
   18e64:	pop	{r4, r5, r6, r7, r8, pc}
   18e68:	bl	1a82c <lchmod@@Base+0x3e34>
   18e6c:	mov	r6, r0
   18e70:	bl	1171c <__errno_location@plt>
   18e74:	mov	r5, r0
   18e78:	ldr	r7, [r0]
   18e7c:	mov	r0, r4
   18e80:	bl	11884 <close@plt>
   18e84:	str	r7, [r5]
   18e88:	mov	r4, r6
   18e8c:	b	18e60 <lchmod@@Base+0x2468>
   18e90:	push	{r4, r5, r6, lr}
   18e94:	sub	sp, sp, #32
   18e98:	mov	r4, r0
   18e9c:	ldr	r5, [sp, #48]	; 0x30
   18ea0:	ldr	r6, [sp, #52]	; 0x34
   18ea4:	cmp	r1, #0
   18ea8:	beq	18f60 <lchmod@@Base+0x2568>
   18eac:	str	r3, [sp, #4]
   18eb0:	str	r2, [sp]
   18eb4:	mov	r3, r1
   18eb8:	ldr	r2, [pc, #940]	; 1926c <lchmod@@Base+0x2874>
   18ebc:	mov	r1, #1
   18ec0:	bl	11764 <__fprintf_chk@plt>
   18ec4:	mov	r2, #5
   18ec8:	ldr	r1, [pc, #928]	; 19270 <lchmod@@Base+0x2878>
   18ecc:	mov	r0, #0
   18ed0:	bl	11578 <dcgettext@plt>
   18ed4:	ldr	r3, [pc, #920]	; 19274 <lchmod@@Base+0x287c>
   18ed8:	str	r3, [sp]
   18edc:	mov	r3, r0
   18ee0:	ldr	r2, [pc, #912]	; 19278 <lchmod@@Base+0x2880>
   18ee4:	mov	r1, #1
   18ee8:	mov	r0, r4
   18eec:	bl	11764 <__fprintf_chk@plt>
   18ef0:	mov	r1, r4
   18ef4:	mov	r0, #10
   18ef8:	bl	1156c <fputc_unlocked@plt>
   18efc:	mov	r2, #5
   18f00:	ldr	r1, [pc, #884]	; 1927c <lchmod@@Base+0x2884>
   18f04:	mov	r0, #0
   18f08:	bl	11578 <dcgettext@plt>
   18f0c:	ldr	r3, [pc, #876]	; 19280 <lchmod@@Base+0x2888>
   18f10:	mov	r2, r0
   18f14:	mov	r1, #1
   18f18:	mov	r0, r4
   18f1c:	bl	11764 <__fprintf_chk@plt>
   18f20:	mov	r1, r4
   18f24:	mov	r0, #10
   18f28:	bl	1156c <fputc_unlocked@plt>
   18f2c:	cmp	r6, #9
   18f30:	ldrls	pc, [pc, r6, lsl #2]
   18f34:	b	19204 <lchmod@@Base+0x280c>
   18f38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f3c:	andeq	r8, r1, r8, ror pc
   18f40:	andeq	r8, r1, r4, lsr #31
   18f44:	ldrdeq	r8, [r1], -r4
   18f48:	andeq	r9, r1, ip
   18f4c:	andeq	r9, r1, ip, asr #32
   18f50:	muleq	r1, r4, r0
   18f54:	andeq	r9, r1, r4, ror #1
   18f58:	andeq	r9, r1, ip, lsr r1
   18f5c:	muleq	r1, ip, r1
   18f60:	str	r3, [sp]
   18f64:	mov	r3, r2
   18f68:	ldr	r2, [pc, #788]	; 19284 <lchmod@@Base+0x288c>
   18f6c:	mov	r1, #1
   18f70:	bl	11764 <__fprintf_chk@plt>
   18f74:	b	18ec4 <lchmod@@Base+0x24cc>
   18f78:	mov	r2, #5
   18f7c:	ldr	r1, [pc, #772]	; 19288 <lchmod@@Base+0x2890>
   18f80:	mov	r0, #0
   18f84:	bl	11578 <dcgettext@plt>
   18f88:	ldr	r3, [r5]
   18f8c:	mov	r2, r0
   18f90:	mov	r1, #1
   18f94:	mov	r0, r4
   18f98:	bl	11764 <__fprintf_chk@plt>
   18f9c:	add	sp, sp, #32
   18fa0:	pop	{r4, r5, r6, pc}
   18fa4:	mov	r2, #5
   18fa8:	ldr	r1, [pc, #732]	; 1928c <lchmod@@Base+0x2894>
   18fac:	mov	r0, #0
   18fb0:	bl	11578 <dcgettext@plt>
   18fb4:	ldr	r3, [r5]
   18fb8:	ldr	r2, [r5, #4]
   18fbc:	str	r2, [sp]
   18fc0:	mov	r2, r0
   18fc4:	mov	r1, #1
   18fc8:	mov	r0, r4
   18fcc:	bl	11764 <__fprintf_chk@plt>
   18fd0:	b	18f9c <lchmod@@Base+0x25a4>
   18fd4:	mov	r2, #5
   18fd8:	ldr	r1, [pc, #688]	; 19290 <lchmod@@Base+0x2898>
   18fdc:	mov	r0, #0
   18fe0:	bl	11578 <dcgettext@plt>
   18fe4:	ldr	r3, [r5]
   18fe8:	ldr	r2, [r5, #8]
   18fec:	str	r2, [sp, #4]
   18ff0:	ldr	r2, [r5, #4]
   18ff4:	str	r2, [sp]
   18ff8:	mov	r2, r0
   18ffc:	mov	r1, #1
   19000:	mov	r0, r4
   19004:	bl	11764 <__fprintf_chk@plt>
   19008:	b	18f9c <lchmod@@Base+0x25a4>
   1900c:	mov	r2, #5
   19010:	ldr	r1, [pc, #636]	; 19294 <lchmod@@Base+0x289c>
   19014:	mov	r0, #0
   19018:	bl	11578 <dcgettext@plt>
   1901c:	ldr	r3, [r5]
   19020:	ldr	r2, [r5, #12]
   19024:	str	r2, [sp, #8]
   19028:	ldr	r2, [r5, #8]
   1902c:	str	r2, [sp, #4]
   19030:	ldr	r2, [r5, #4]
   19034:	str	r2, [sp]
   19038:	mov	r2, r0
   1903c:	mov	r1, #1
   19040:	mov	r0, r4
   19044:	bl	11764 <__fprintf_chk@plt>
   19048:	b	18f9c <lchmod@@Base+0x25a4>
   1904c:	mov	r2, #5
   19050:	ldr	r1, [pc, #576]	; 19298 <lchmod@@Base+0x28a0>
   19054:	mov	r0, #0
   19058:	bl	11578 <dcgettext@plt>
   1905c:	ldr	r3, [r5]
   19060:	ldr	r2, [r5, #16]
   19064:	str	r2, [sp, #12]
   19068:	ldr	r2, [r5, #12]
   1906c:	str	r2, [sp, #8]
   19070:	ldr	r2, [r5, #8]
   19074:	str	r2, [sp, #4]
   19078:	ldr	r2, [r5, #4]
   1907c:	str	r2, [sp]
   19080:	mov	r2, r0
   19084:	mov	r1, #1
   19088:	mov	r0, r4
   1908c:	bl	11764 <__fprintf_chk@plt>
   19090:	b	18f9c <lchmod@@Base+0x25a4>
   19094:	mov	r2, #5
   19098:	ldr	r1, [pc, #508]	; 1929c <lchmod@@Base+0x28a4>
   1909c:	mov	r0, #0
   190a0:	bl	11578 <dcgettext@plt>
   190a4:	ldr	r3, [r5]
   190a8:	ldr	r2, [r5, #20]
   190ac:	str	r2, [sp, #16]
   190b0:	ldr	r2, [r5, #16]
   190b4:	str	r2, [sp, #12]
   190b8:	ldr	r2, [r5, #12]
   190bc:	str	r2, [sp, #8]
   190c0:	ldr	r2, [r5, #8]
   190c4:	str	r2, [sp, #4]
   190c8:	ldr	r2, [r5, #4]
   190cc:	str	r2, [sp]
   190d0:	mov	r2, r0
   190d4:	mov	r1, #1
   190d8:	mov	r0, r4
   190dc:	bl	11764 <__fprintf_chk@plt>
   190e0:	b	18f9c <lchmod@@Base+0x25a4>
   190e4:	mov	r2, #5
   190e8:	ldr	r1, [pc, #432]	; 192a0 <lchmod@@Base+0x28a8>
   190ec:	mov	r0, #0
   190f0:	bl	11578 <dcgettext@plt>
   190f4:	ldr	r3, [r5]
   190f8:	ldr	r2, [r5, #24]
   190fc:	str	r2, [sp, #20]
   19100:	ldr	r2, [r5, #20]
   19104:	str	r2, [sp, #16]
   19108:	ldr	r2, [r5, #16]
   1910c:	str	r2, [sp, #12]
   19110:	ldr	r2, [r5, #12]
   19114:	str	r2, [sp, #8]
   19118:	ldr	r2, [r5, #8]
   1911c:	str	r2, [sp, #4]
   19120:	ldr	r2, [r5, #4]
   19124:	str	r2, [sp]
   19128:	mov	r2, r0
   1912c:	mov	r1, #1
   19130:	mov	r0, r4
   19134:	bl	11764 <__fprintf_chk@plt>
   19138:	b	18f9c <lchmod@@Base+0x25a4>
   1913c:	mov	r2, #5
   19140:	ldr	r1, [pc, #348]	; 192a4 <lchmod@@Base+0x28ac>
   19144:	mov	r0, #0
   19148:	bl	11578 <dcgettext@plt>
   1914c:	ldr	r3, [r5]
   19150:	ldr	r2, [r5, #28]
   19154:	str	r2, [sp, #24]
   19158:	ldr	r2, [r5, #24]
   1915c:	str	r2, [sp, #20]
   19160:	ldr	r2, [r5, #20]
   19164:	str	r2, [sp, #16]
   19168:	ldr	r2, [r5, #16]
   1916c:	str	r2, [sp, #12]
   19170:	ldr	r2, [r5, #12]
   19174:	str	r2, [sp, #8]
   19178:	ldr	r2, [r5, #8]
   1917c:	str	r2, [sp, #4]
   19180:	ldr	r2, [r5, #4]
   19184:	str	r2, [sp]
   19188:	mov	r2, r0
   1918c:	mov	r1, #1
   19190:	mov	r0, r4
   19194:	bl	11764 <__fprintf_chk@plt>
   19198:	b	18f9c <lchmod@@Base+0x25a4>
   1919c:	mov	r2, #5
   191a0:	ldr	r1, [pc, #256]	; 192a8 <lchmod@@Base+0x28b0>
   191a4:	mov	r0, #0
   191a8:	bl	11578 <dcgettext@plt>
   191ac:	ldr	r3, [r5]
   191b0:	ldr	r2, [r5, #32]
   191b4:	str	r2, [sp, #28]
   191b8:	ldr	r2, [r5, #28]
   191bc:	str	r2, [sp, #24]
   191c0:	ldr	r2, [r5, #24]
   191c4:	str	r2, [sp, #20]
   191c8:	ldr	r2, [r5, #20]
   191cc:	str	r2, [sp, #16]
   191d0:	ldr	r2, [r5, #16]
   191d4:	str	r2, [sp, #12]
   191d8:	ldr	r2, [r5, #12]
   191dc:	str	r2, [sp, #8]
   191e0:	ldr	r2, [r5, #8]
   191e4:	str	r2, [sp, #4]
   191e8:	ldr	r2, [r5, #4]
   191ec:	str	r2, [sp]
   191f0:	mov	r2, r0
   191f4:	mov	r1, #1
   191f8:	mov	r0, r4
   191fc:	bl	11764 <__fprintf_chk@plt>
   19200:	b	18f9c <lchmod@@Base+0x25a4>
   19204:	mov	r2, #5
   19208:	ldr	r1, [pc, #156]	; 192ac <lchmod@@Base+0x28b4>
   1920c:	mov	r0, #0
   19210:	bl	11578 <dcgettext@plt>
   19214:	ldr	r3, [r5]
   19218:	ldr	r2, [r5, #32]
   1921c:	str	r2, [sp, #28]
   19220:	ldr	r2, [r5, #28]
   19224:	str	r2, [sp, #24]
   19228:	ldr	r2, [r5, #24]
   1922c:	str	r2, [sp, #20]
   19230:	ldr	r2, [r5, #20]
   19234:	str	r2, [sp, #16]
   19238:	ldr	r2, [r5, #16]
   1923c:	str	r2, [sp, #12]
   19240:	ldr	r2, [r5, #12]
   19244:	str	r2, [sp, #8]
   19248:	ldr	r2, [r5, #8]
   1924c:	str	r2, [sp, #4]
   19250:	ldr	r2, [r5, #4]
   19254:	str	r2, [sp]
   19258:	mov	r2, r0
   1925c:	mov	r1, #1
   19260:	mov	r0, r4
   19264:	bl	11764 <__fprintf_chk@plt>
   19268:	b	18f9c <lchmod@@Base+0x25a4>
   1926c:	andeq	fp, r1, r0, asr sl
   19270:	andeq	fp, r1, r4, ror #20
   19274:	andeq	r0, r0, r6, ror #15
   19278:	andeq	fp, r1, ip, lsr sp
   1927c:	andeq	fp, r1, r8, ror #20
   19280:	andeq	fp, r1, r4, lsl fp
   19284:	andeq	fp, r1, ip, asr sl
   19288:	andeq	fp, r1, r8, lsr fp
   1928c:	andeq	fp, r1, r8, asr #22
   19290:	andeq	fp, r1, r0, ror #22
   19294:	andeq	fp, r1, ip, ror fp
   19298:	muleq	r1, ip, fp
   1929c:	andeq	fp, r1, r0, asr #23
   192a0:	andeq	fp, r1, r8, ror #23
   192a4:	andeq	fp, r1, r4, lsl ip
   192a8:	andeq	fp, r1, r4, asr #24
   192ac:	andeq	fp, r1, r8, ror ip
   192b0:	push	{r4, r5, lr}
   192b4:	sub	sp, sp, #12
   192b8:	ldr	r5, [sp, #24]
   192bc:	ldr	ip, [r5]
   192c0:	cmp	ip, #0
   192c4:	beq	192f4 <lchmod@@Base+0x28fc>
   192c8:	mov	lr, r5
   192cc:	mov	ip, #0
   192d0:	add	ip, ip, #1
   192d4:	ldr	r4, [lr, #4]!
   192d8:	cmp	r4, #0
   192dc:	bne	192d0 <lchmod@@Base+0x28d8>
   192e0:	str	ip, [sp, #4]
   192e4:	str	r5, [sp]
   192e8:	bl	18e90 <lchmod@@Base+0x2498>
   192ec:	add	sp, sp, #12
   192f0:	pop	{r4, r5, pc}
   192f4:	mov	ip, #0
   192f8:	b	192e0 <lchmod@@Base+0x28e8>
   192fc:	push	{r4, r5, lr}
   19300:	sub	sp, sp, #52	; 0x34
   19304:	ldr	r4, [sp, #64]	; 0x40
   19308:	sub	r4, r4, #4
   1930c:	add	r5, sp, #4
   19310:	mov	ip, #0
   19314:	ldr	lr, [r4, #4]!
   19318:	str	lr, [r5, #4]!
   1931c:	cmp	lr, #0
   19320:	beq	19330 <lchmod@@Base+0x2938>
   19324:	add	ip, ip, #1
   19328:	cmp	ip, #10
   1932c:	bne	19314 <lchmod@@Base+0x291c>
   19330:	str	ip, [sp, #4]
   19334:	add	ip, sp, #8
   19338:	str	ip, [sp]
   1933c:	bl	18e90 <lchmod@@Base+0x2498>
   19340:	add	sp, sp, #52	; 0x34
   19344:	pop	{r4, r5, pc}
   19348:	push	{r3}		; (str r3, [sp, #-4]!)
   1934c:	push	{lr}		; (str lr, [sp, #-4]!)
   19350:	sub	sp, sp, #16
   19354:	add	r3, sp, #24
   19358:	str	r3, [sp, #12]
   1935c:	str	r3, [sp]
   19360:	ldr	r3, [sp, #20]
   19364:	bl	192fc <lchmod@@Base+0x2904>
   19368:	add	sp, sp, #16
   1936c:	pop	{lr}		; (ldr lr, [sp], #4)
   19370:	add	sp, sp, #4
   19374:	bx	lr
   19378:	push	{r4, lr}
   1937c:	ldr	r3, [pc, #112]	; 193f4 <lchmod@@Base+0x29fc>
   19380:	ldr	r1, [r3]
   19384:	mov	r0, #10
   19388:	bl	1156c <fputc_unlocked@plt>
   1938c:	mov	r2, #5
   19390:	ldr	r1, [pc, #96]	; 193f8 <lchmod@@Base+0x2a00>
   19394:	mov	r0, #0
   19398:	bl	11578 <dcgettext@plt>
   1939c:	ldr	r2, [pc, #88]	; 193fc <lchmod@@Base+0x2a04>
   193a0:	mov	r1, r0
   193a4:	mov	r0, #1
   193a8:	bl	1174c <__printf_chk@plt>
   193ac:	mov	r2, #5
   193b0:	ldr	r1, [pc, #72]	; 19400 <lchmod@@Base+0x2a08>
   193b4:	mov	r0, #0
   193b8:	bl	11578 <dcgettext@plt>
   193bc:	ldr	r3, [pc, #64]	; 19404 <lchmod@@Base+0x2a0c>
   193c0:	ldr	r2, [pc, #64]	; 19408 <lchmod@@Base+0x2a10>
   193c4:	mov	r1, r0
   193c8:	mov	r0, #1
   193cc:	bl	1174c <__printf_chk@plt>
   193d0:	mov	r2, #5
   193d4:	ldr	r1, [pc, #48]	; 1940c <lchmod@@Base+0x2a14>
   193d8:	mov	r0, #0
   193dc:	bl	11578 <dcgettext@plt>
   193e0:	ldr	r2, [pc, #40]	; 19410 <lchmod@@Base+0x2a18>
   193e4:	mov	r1, r0
   193e8:	mov	r0, #1
   193ec:	bl	1174c <__printf_chk@plt>
   193f0:	pop	{r4, pc}
   193f4:	andeq	ip, r2, r4, ror #3
   193f8:			; <UNDEFINED> instruction: 0x0001bcb4
   193fc:	andeq	fp, r1, r8, asr #25
   19400:	andeq	fp, r1, r0, ror #25
   19404:	ldrdeq	fp, [r1], -ip
   19408:	andeq	fp, r1, r4, lsl #10
   1940c:	strdeq	fp, [r1], -r4
   19410:	andeq	fp, r1, ip, lsl sp
   19414:	push	{r4, lr}
   19418:	bl	1a030 <lchmod@@Base+0x3638>
   1941c:	cmp	r0, #0
   19420:	popne	{r4, pc}
   19424:	bl	199b8 <lchmod@@Base+0x2fc0>
   19428:	push	{r4, lr}
   1942c:	bl	1a030 <lchmod@@Base+0x3638>
   19430:	cmp	r0, #0
   19434:	popne	{r4, pc}
   19438:	bl	199b8 <lchmod@@Base+0x2fc0>
   1943c:	push	{r4, lr}
   19440:	bl	19414 <lchmod@@Base+0x2a1c>
   19444:	pop	{r4, pc}
   19448:	push	{r4, r5, r6, lr}
   1944c:	mov	r5, r0
   19450:	mov	r4, r1
   19454:	bl	1a060 <lchmod@@Base+0x3668>
   19458:	cmp	r0, #0
   1945c:	popne	{r4, r5, r6, pc}
   19460:	adds	r4, r4, #0
   19464:	movne	r4, #1
   19468:	cmp	r5, #0
   1946c:	orreq	r4, r4, #1
   19470:	cmp	r4, #0
   19474:	popeq	{r4, r5, r6, pc}
   19478:	bl	199b8 <lchmod@@Base+0x2fc0>
   1947c:	push	{r4, lr}
   19480:	cmp	r1, #0
   19484:	orreq	r1, r1, #1
   19488:	bl	1a060 <lchmod@@Base+0x3668>
   1948c:	cmp	r0, #0
   19490:	popne	{r4, pc}
   19494:	bl	199b8 <lchmod@@Base+0x2fc0>
   19498:	push	{r4, r5, r6, lr}
   1949c:	mov	r6, r0
   194a0:	mov	r5, r1
   194a4:	mov	r4, r2
   194a8:	bl	1a7e0 <lchmod@@Base+0x3de8>
   194ac:	cmp	r0, #0
   194b0:	popne	{r4, r5, r6, pc}
   194b4:	cmp	r6, #0
   194b8:	beq	194c8 <lchmod@@Base+0x2ad0>
   194bc:	cmp	r5, #0
   194c0:	cmpne	r4, #0
   194c4:	popeq	{r4, r5, r6, pc}
   194c8:	bl	199b8 <lchmod@@Base+0x2fc0>
   194cc:	push	{r4, lr}
   194d0:	bl	19498 <lchmod@@Base+0x2aa0>
   194d4:	pop	{r4, pc}
   194d8:	push	{r4, lr}
   194dc:	mov	ip, r1
   194e0:	mov	r3, r2
   194e4:	cmp	r2, #0
   194e8:	cmpne	r1, #0
   194ec:	moveq	r3, #1
   194f0:	moveq	ip, r3
   194f4:	mov	r2, r3
   194f8:	mov	r1, ip
   194fc:	bl	1a7e0 <lchmod@@Base+0x3de8>
   19500:	cmp	r0, #0
   19504:	popne	{r4, pc}
   19508:	bl	199b8 <lchmod@@Base+0x2fc0>
   1950c:	push	{r4, lr}
   19510:	mov	r2, r1
   19514:	mov	r1, r0
   19518:	mov	r0, #0
   1951c:	bl	19498 <lchmod@@Base+0x2aa0>
   19520:	pop	{r4, pc}
   19524:	push	{r4, lr}
   19528:	mov	r2, r1
   1952c:	mov	r1, r0
   19530:	mov	r0, #0
   19534:	bl	194d8 <lchmod@@Base+0x2ae0>
   19538:	pop	{r4, pc}
   1953c:	push	{r4, r5, r6, r7, r8, lr}
   19540:	mov	r5, r1
   19544:	mov	r6, r2
   19548:	ldr	r4, [r1]
   1954c:	subs	r7, r0, #0
   19550:	beq	1956c <lchmod@@Base+0x2b74>
   19554:	lsr	r2, r4, #1
   19558:	add	r3, r2, #1
   1955c:	mvn	r3, r3
   19560:	cmp	r4, r3
   19564:	bls	19590 <lchmod@@Base+0x2b98>
   19568:	bl	199b8 <lchmod@@Base+0x2fc0>
   1956c:	cmp	r4, #0
   19570:	bne	19598 <lchmod@@Base+0x2ba0>
   19574:	mov	r1, r2
   19578:	mov	r0, #64	; 0x40
   1957c:	bl	1a948 <lchmod@@Base+0x3f50>
   19580:	cmp	r0, #0
   19584:	movne	r4, r0
   19588:	addeq	r4, r0, #1
   1958c:	b	19598 <lchmod@@Base+0x2ba0>
   19590:	add	r4, r4, #1
   19594:	add	r4, r4, r2
   19598:	mov	r2, r6
   1959c:	mov	r1, r4
   195a0:	mov	r0, r7
   195a4:	bl	19498 <lchmod@@Base+0x2aa0>
   195a8:	str	r4, [r5]
   195ac:	pop	{r4, r5, r6, r7, r8, pc}
   195b0:	push	{r4, lr}
   195b4:	mov	r2, #1
   195b8:	bl	1953c <lchmod@@Base+0x2b44>
   195bc:	pop	{r4, pc}
   195c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c4:	sub	sp, sp, #12
   195c8:	mov	fp, r0
   195cc:	mov	sl, r1
   195d0:	mov	r9, r2
   195d4:	mov	r7, r3
   195d8:	ldr	r6, [sp, #48]	; 0x30
   195dc:	ldr	r5, [r1]
   195e0:	asrs	r4, r5, #1
   195e4:	bmi	19740 <lchmod@@Base+0x2d48>
   195e8:	cmp	r5, #0
   195ec:	blt	19754 <lchmod@@Base+0x2d5c>
   195f0:	mvn	r3, #-2147483648	; 0x80000000
   195f4:	sub	r3, r3, r4
   195f8:	cmp	r5, r3
   195fc:	movle	r3, #0
   19600:	movgt	r3, #1
   19604:	cmp	r3, #0
   19608:	addeq	r4, r4, r5
   1960c:	mvnne	r4, #-2147483648	; 0x80000000
   19610:	mvn	r8, r7
   19614:	lsr	r8, r8, #31
   19618:	cmp	r7, r4
   1961c:	movge	r3, #0
   19620:	andlt	r3, r8, #1
   19624:	cmp	r3, #0
   19628:	movne	r4, r7
   1962c:	cmp	r6, #0
   19630:	blt	19768 <lchmod@@Base+0x2d70>
   19634:	cmp	r6, #0
   19638:	beq	19814 <lchmod@@Base+0x2e1c>
   1963c:	cmp	r4, #0
   19640:	blt	197c4 <lchmod@@Base+0x2dcc>
   19644:	mov	r1, r6
   19648:	mvn	r0, #-2147483648	; 0x80000000
   1964c:	bl	1ab54 <lchmod@@Base+0x415c>
   19650:	cmp	r0, r4
   19654:	movge	r0, #0
   19658:	movlt	r0, #1
   1965c:	cmp	r0, #0
   19660:	mvnne	r3, #-2147483648	; 0x80000000
   19664:	strne	r3, [sp, #4]
   19668:	beq	197fc <lchmod@@Base+0x2e04>
   1966c:	mov	r1, r6
   19670:	ldr	r0, [sp, #4]
   19674:	bl	1ab54 <lchmod@@Base+0x415c>
   19678:	mov	r4, r0
   1967c:	mov	r1, r6
   19680:	ldr	r0, [sp, #4]
   19684:	bl	1ad74 <lchmod@@Base+0x437c>
   19688:	ldr	r3, [sp, #4]
   1968c:	sub	r1, r3, r1
   19690:	cmp	fp, #0
   19694:	moveq	r3, #0
   19698:	streq	r3, [sl]
   1969c:	sub	r3, r4, r5
   196a0:	cmp	r3, r9
   196a4:	bge	1972c <lchmod@@Base+0x2d34>
   196a8:	cmp	r9, #0
   196ac:	blt	19820 <lchmod@@Base+0x2e28>
   196b0:	cmp	r5, #0
   196b4:	blt	19834 <lchmod@@Base+0x2e3c>
   196b8:	mvn	r3, #-2147483648	; 0x80000000
   196bc:	sub	r3, r3, r9
   196c0:	cmp	r5, r3
   196c4:	movle	r3, #0
   196c8:	movgt	r3, #1
   196cc:	cmp	r3, #0
   196d0:	bne	198dc <lchmod@@Base+0x2ee4>
   196d4:	add	r5, r5, r9
   196d8:	mov	r4, r5
   196dc:	cmp	r7, r5
   196e0:	movge	r7, #0
   196e4:	andlt	r7, r8, #1
   196e8:	cmp	r7, #0
   196ec:	bne	198dc <lchmod@@Base+0x2ee4>
   196f0:	cmp	r6, #0
   196f4:	blt	19848 <lchmod@@Base+0x2e50>
   196f8:	cmp	r6, #0
   196fc:	beq	19728 <lchmod@@Base+0x2d30>
   19700:	cmp	r5, #0
   19704:	blt	198a4 <lchmod@@Base+0x2eac>
   19708:	mov	r1, r6
   1970c:	mvn	r0, #-2147483648	; 0x80000000
   19710:	bl	1ab54 <lchmod@@Base+0x415c>
   19714:	cmp	r5, r0
   19718:	movle	r0, #0
   1971c:	movgt	r0, #1
   19720:	cmp	r0, #0
   19724:	bne	198dc <lchmod@@Base+0x2ee4>
   19728:	mul	r1, r5, r6
   1972c:	mov	r0, fp
   19730:	bl	19448 <lchmod@@Base+0x2a50>
   19734:	str	r4, [sl]
   19738:	add	sp, sp, #12
   1973c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19740:	rsb	r3, r4, #-2147483648	; 0x80000000
   19744:	cmp	r5, r3
   19748:	movge	r3, #0
   1974c:	movlt	r3, #1
   19750:	b	19604 <lchmod@@Base+0x2c0c>
   19754:	rsb	r3, r5, #-2147483648	; 0x80000000
   19758:	cmp	r4, r3
   1975c:	movge	r3, #0
   19760:	movlt	r3, #1
   19764:	b	19604 <lchmod@@Base+0x2c0c>
   19768:	cmp	r4, #0
   1976c:	blt	19794 <lchmod@@Base+0x2d9c>
   19770:	cmn	r6, #1
   19774:	beq	197b0 <lchmod@@Base+0x2db8>
   19778:	mov	r1, r6
   1977c:	mov	r0, #-2147483648	; 0x80000000
   19780:	bl	1ab54 <lchmod@@Base+0x415c>
   19784:	cmp	r0, r4
   19788:	movge	r0, #0
   1978c:	movlt	r0, #1
   19790:	b	1965c <lchmod@@Base+0x2c64>
   19794:	mov	r1, r6
   19798:	mvn	r0, #-2147483648	; 0x80000000
   1979c:	bl	1ab54 <lchmod@@Base+0x415c>
   197a0:	cmp	r0, r4
   197a4:	movle	r0, #0
   197a8:	movgt	r0, #1
   197ac:	b	1965c <lchmod@@Base+0x2c64>
   197b0:	add	r0, r4, #-2147483648	; 0x80000000
   197b4:	cmp	r0, #0
   197b8:	movle	r0, #0
   197bc:	movgt	r0, #1
   197c0:	b	1965c <lchmod@@Base+0x2c64>
   197c4:	cmn	r4, #1
   197c8:	beq	197e8 <lchmod@@Base+0x2df0>
   197cc:	mov	r1, r4
   197d0:	mov	r0, #-2147483648	; 0x80000000
   197d4:	bl	1ab54 <lchmod@@Base+0x415c>
   197d8:	cmp	r6, r0
   197dc:	movle	r0, #0
   197e0:	movgt	r0, #1
   197e4:	b	1965c <lchmod@@Base+0x2c64>
   197e8:	add	r0, r6, #-2147483648	; 0x80000000
   197ec:	cmp	r0, #0
   197f0:	movle	r0, #0
   197f4:	movgt	r0, #1
   197f8:	b	1965c <lchmod@@Base+0x2c64>
   197fc:	mul	r1, r6, r4
   19800:	cmp	r1, #63	; 0x3f
   19804:	movle	r3, #64	; 0x40
   19808:	strle	r3, [sp, #4]
   1980c:	bgt	19690 <lchmod@@Base+0x2c98>
   19810:	b	1966c <lchmod@@Base+0x2c74>
   19814:	mov	r3, #64	; 0x40
   19818:	str	r3, [sp, #4]
   1981c:	b	1966c <lchmod@@Base+0x2c74>
   19820:	rsb	r3, r9, #-2147483648	; 0x80000000
   19824:	cmp	r5, r3
   19828:	movge	r3, #0
   1982c:	movlt	r3, #1
   19830:	b	196cc <lchmod@@Base+0x2cd4>
   19834:	rsb	r3, r5, #-2147483648	; 0x80000000
   19838:	cmp	r9, r3
   1983c:	movge	r3, #0
   19840:	movlt	r3, #1
   19844:	b	196cc <lchmod@@Base+0x2cd4>
   19848:	cmp	r5, #0
   1984c:	blt	19874 <lchmod@@Base+0x2e7c>
   19850:	cmn	r6, #1
   19854:	beq	19890 <lchmod@@Base+0x2e98>
   19858:	mov	r1, r6
   1985c:	mov	r0, #-2147483648	; 0x80000000
   19860:	bl	1ab54 <lchmod@@Base+0x415c>
   19864:	cmp	r5, r0
   19868:	movle	r0, #0
   1986c:	movgt	r0, #1
   19870:	b	19720 <lchmod@@Base+0x2d28>
   19874:	mov	r1, r6
   19878:	mvn	r0, #-2147483648	; 0x80000000
   1987c:	bl	1ab54 <lchmod@@Base+0x415c>
   19880:	cmp	r5, r0
   19884:	movge	r0, #0
   19888:	movlt	r0, #1
   1988c:	b	19720 <lchmod@@Base+0x2d28>
   19890:	add	r0, r5, #-2147483648	; 0x80000000
   19894:	cmp	r0, #0
   19898:	movle	r0, #0
   1989c:	movgt	r0, #1
   198a0:	b	19720 <lchmod@@Base+0x2d28>
   198a4:	cmn	r5, #1
   198a8:	beq	198c8 <lchmod@@Base+0x2ed0>
   198ac:	mov	r1, r5
   198b0:	mov	r0, #-2147483648	; 0x80000000
   198b4:	bl	1ab54 <lchmod@@Base+0x415c>
   198b8:	cmp	r6, r0
   198bc:	movle	r0, #0
   198c0:	movgt	r0, #1
   198c4:	b	19720 <lchmod@@Base+0x2d28>
   198c8:	add	r0, r6, #-2147483648	; 0x80000000
   198cc:	cmp	r0, #0
   198d0:	movle	r0, #0
   198d4:	movgt	r0, #1
   198d8:	b	19720 <lchmod@@Base+0x2d28>
   198dc:	bl	199b8 <lchmod@@Base+0x2fc0>
   198e0:	push	{r4, lr}
   198e4:	bl	19fe0 <lchmod@@Base+0x35e8>
   198e8:	cmp	r0, #0
   198ec:	popne	{r4, pc}
   198f0:	bl	199b8 <lchmod@@Base+0x2fc0>
   198f4:	push	{r4, lr}
   198f8:	mov	r1, #1
   198fc:	bl	198e0 <lchmod@@Base+0x2ee8>
   19900:	pop	{r4, pc}
   19904:	push	{r4, lr}
   19908:	bl	19fe0 <lchmod@@Base+0x35e8>
   1990c:	cmp	r0, #0
   19910:	popne	{r4, pc}
   19914:	bl	199b8 <lchmod@@Base+0x2fc0>
   19918:	push	{r4, lr}
   1991c:	mov	r1, #1
   19920:	bl	19904 <lchmod@@Base+0x2f0c>
   19924:	pop	{r4, pc}
   19928:	push	{r4, r5, r6, lr}
   1992c:	mov	r5, r0
   19930:	mov	r4, r1
   19934:	mov	r0, r1
   19938:	bl	19414 <lchmod@@Base+0x2a1c>
   1993c:	mov	r2, r4
   19940:	mov	r1, r5
   19944:	bl	11530 <memcpy@plt>
   19948:	pop	{r4, r5, r6, pc}
   1994c:	push	{r4, r5, r6, lr}
   19950:	mov	r5, r0
   19954:	mov	r4, r1
   19958:	mov	r0, r1
   1995c:	bl	19428 <lchmod@@Base+0x2a30>
   19960:	mov	r2, r4
   19964:	mov	r1, r5
   19968:	bl	11530 <memcpy@plt>
   1996c:	pop	{r4, r5, r6, pc}
   19970:	push	{r4, r5, r6, lr}
   19974:	mov	r5, r0
   19978:	mov	r4, r1
   1997c:	add	r0, r1, #1
   19980:	bl	19428 <lchmod@@Base+0x2a30>
   19984:	mov	r2, #0
   19988:	strb	r2, [r0, r4]
   1998c:	mov	r2, r4
   19990:	mov	r1, r5
   19994:	bl	11530 <memcpy@plt>
   19998:	pop	{r4, r5, r6, pc}
   1999c:	push	{r4, lr}
   199a0:	mov	r4, r0
   199a4:	bl	116e0 <strlen@plt>
   199a8:	add	r1, r0, #1
   199ac:	mov	r0, r4
   199b0:	bl	19928 <lchmod@@Base+0x2f30>
   199b4:	pop	{r4, pc}
   199b8:	push	{r4, lr}
   199bc:	ldr	r3, [pc, #40]	; 199ec <lchmod@@Base+0x2ff4>
   199c0:	ldr	r4, [r3]
   199c4:	mov	r2, #5
   199c8:	ldr	r1, [pc, #32]	; 199f0 <lchmod@@Base+0x2ff8>
   199cc:	mov	r0, #0
   199d0:	bl	11578 <dcgettext@plt>
   199d4:	mov	r3, r0
   199d8:	ldr	r2, [pc, #20]	; 199f4 <lchmod@@Base+0x2ffc>
   199dc:	mov	r1, #0
   199e0:	mov	r0, r4
   199e4:	bl	11638 <error@plt>
   199e8:	bl	11878 <abort@plt>
   199ec:	andeq	ip, r2, ip, lsl #3
   199f0:	andeq	fp, r1, ip, ror #26
   199f4:	muleq	r1, r0, r8
   199f8:	push	{r4, lr}
   199fc:	orr	r1, r1, #512	; 0x200
   19a00:	bl	14c04 <__assert_fail@plt+0x3338>
   19a04:	cmp	r0, #0
   19a08:	popne	{r4, pc}
   19a0c:	bl	1171c <__errno_location@plt>
   19a10:	ldr	r3, [r0]
   19a14:	cmp	r3, #22
   19a18:	beq	19a20 <lchmod@@Base+0x3028>
   19a1c:	bl	199b8 <lchmod@@Base+0x2fc0>
   19a20:	ldr	r3, [pc, #12]	; 19a34 <lchmod@@Base+0x303c>
   19a24:	mov	r2, #41	; 0x29
   19a28:	ldr	r1, [pc, #8]	; 19a38 <lchmod@@Base+0x3040>
   19a2c:	ldr	r0, [pc, #8]	; 19a3c <lchmod@@Base+0x3044>
   19a30:	bl	118cc <__assert_fail@plt>
   19a34:	andeq	fp, r1, r0, lsl #27
   19a38:	andeq	fp, r1, ip, lsl #27
   19a3c:	muleq	r1, r8, sp
   19a40:	ldr	r3, [r0, #48]	; 0x30
   19a44:	and	r3, r3, #17
   19a48:	cmp	r3, #16
   19a4c:	beq	19a70 <lchmod@@Base+0x3078>
   19a50:	cmp	r3, #17
   19a54:	beq	19a60 <lchmod@@Base+0x3068>
   19a58:	mov	r0, #0
   19a5c:	bx	lr
   19a60:	ldr	r0, [r1, #48]	; 0x30
   19a64:	adds	r0, r0, #0
   19a68:	movne	r0, #1
   19a6c:	bx	lr
   19a70:	mov	r0, #1
   19a74:	bx	lr
   19a78:	push	{r4, r5, r6, lr}
   19a7c:	mov	r5, r0
   19a80:	subs	r4, r1, #0
   19a84:	blt	19ad8 <lchmod@@Base+0x30e0>
   19a88:	cmp	r4, #0
   19a8c:	moveq	r3, #0
   19a90:	beq	19abc <lchmod@@Base+0x30c4>
   19a94:	mov	r2, r4
   19a98:	asr	r3, r4, #31
   19a9c:	mvn	r0, #0
   19aa0:	mvn	r1, #0
   19aa4:	bl	1ad94 <lchmod@@Base+0x439c>
   19aa8:	ldrd	r2, [r5]
   19aac:	cmp	r1, r3
   19ab0:	cmpeq	r0, r2
   19ab4:	movcc	r3, #1
   19ab8:	movcs	r3, #0
   19abc:	cmp	r3, #0
   19ac0:	beq	19af8 <lchmod@@Base+0x3100>
   19ac4:	mvn	r2, #0
   19ac8:	mvn	r3, #0
   19acc:	strd	r2, [r5]
   19ad0:	mov	r0, #1
   19ad4:	pop	{r4, r5, r6, pc}
   19ad8:	mov	r1, r4
   19adc:	mov	r0, #0
   19ae0:	bl	1ab54 <lchmod@@Base+0x415c>
   19ae4:	ldrd	r2, [r5]
   19ae8:	orrs	r3, r2, r3
   19aec:	movne	r3, #1
   19af0:	moveq	r3, #0
   19af4:	b	19abc <lchmod@@Base+0x30c4>
   19af8:	asr	r3, r4, #31
   19afc:	ldr	r1, [r5, #4]
   19b00:	ldr	r2, [r5]
   19b04:	mul	r3, r3, r2
   19b08:	mla	r1, r4, r1, r3
   19b0c:	umull	r2, r3, r2, r4
   19b10:	add	r3, r1, r3
   19b14:	strd	r2, [r5]
   19b18:	mov	r0, #0
   19b1c:	pop	{r4, r5, r6, pc}
   19b20:	push	{r4, r5, r6, r7, r8, lr}
   19b24:	subs	r4, r2, #0
   19b28:	beq	19b58 <lchmod@@Base+0x3160>
   19b2c:	mov	r7, r1
   19b30:	mov	r6, r0
   19b34:	mov	r5, #0
   19b38:	mov	r1, r7
   19b3c:	mov	r0, r6
   19b40:	bl	19a78 <lchmod@@Base+0x3080>
   19b44:	orr	r5, r5, r0
   19b48:	subs	r4, r4, #1
   19b4c:	bne	19b38 <lchmod@@Base+0x3140>
   19b50:	mov	r0, r5
   19b54:	pop	{r4, r5, r6, r7, r8, pc}
   19b58:	mov	r5, #0
   19b5c:	b	19b50 <lchmod@@Base+0x3158>
   19b60:	push	{r4, r5, r6, r7, r8, r9, lr}
   19b64:	sub	sp, sp, #20
   19b68:	cmp	r2, #36	; 0x24
   19b6c:	bhi	19bac <lchmod@@Base+0x31b4>
   19b70:	mov	r5, r0
   19b74:	mov	r6, r1
   19b78:	mov	r7, r2
   19b7c:	mov	r9, r3
   19b80:	cmp	r1, #0
   19b84:	addeq	r6, sp, #12
   19b88:	bl	1171c <__errno_location@plt>
   19b8c:	mov	r8, r0
   19b90:	mov	r3, #0
   19b94:	str	r3, [r0]
   19b98:	ldrb	r4, [r5]
   19b9c:	bl	116b0 <__ctype_b_loc@plt>
   19ba0:	ldr	r1, [r0]
   19ba4:	mov	r2, r5
   19ba8:	b	19bc4 <lchmod@@Base+0x31cc>
   19bac:	ldr	r3, [pc, #1056]	; 19fd4 <lchmod@@Base+0x35dc>
   19bb0:	mov	r2, #85	; 0x55
   19bb4:	ldr	r1, [pc, #1052]	; 19fd8 <lchmod@@Base+0x35e0>
   19bb8:	ldr	r0, [pc, #1052]	; 19fdc <lchmod@@Base+0x35e4>
   19bbc:	bl	118cc <__assert_fail@plt>
   19bc0:	ldrb	r4, [r2, #1]!
   19bc4:	lsl	r3, r4, #1
   19bc8:	ldrh	r3, [r1, r3]
   19bcc:	tst	r3, #8192	; 0x2000
   19bd0:	bne	19bc0 <lchmod@@Base+0x31c8>
   19bd4:	cmp	r4, #45	; 0x2d
   19bd8:	moveq	r4, #4
   19bdc:	bne	19bec <lchmod@@Base+0x31f4>
   19be0:	mov	r0, r4
   19be4:	add	sp, sp, #20
   19be8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19bec:	mov	r3, #0
   19bf0:	mov	r2, r7
   19bf4:	mov	r1, r6
   19bf8:	mov	r0, r5
   19bfc:	bl	1153c <__strtoull_internal@plt>
   19c00:	strd	r0, [sp]
   19c04:	ldr	r7, [r6]
   19c08:	cmp	r5, r7
   19c0c:	beq	19c30 <lchmod@@Base+0x3238>
   19c10:	ldr	r3, [r8]
   19c14:	cmp	r3, #0
   19c18:	beq	19c78 <lchmod@@Base+0x3280>
   19c1c:	cmp	r3, #34	; 0x22
   19c20:	moveq	r4, #1
   19c24:	beq	19c7c <lchmod@@Base+0x3284>
   19c28:	mov	r4, #4
   19c2c:	b	19be0 <lchmod@@Base+0x31e8>
   19c30:	ldr	r3, [sp, #48]	; 0x30
   19c34:	cmp	r3, #0
   19c38:	moveq	r4, #4
   19c3c:	beq	19be0 <lchmod@@Base+0x31e8>
   19c40:	ldrb	r1, [r7]
   19c44:	cmp	r1, #0
   19c48:	moveq	r4, #4
   19c4c:	beq	19be0 <lchmod@@Base+0x31e8>
   19c50:	mov	r0, r3
   19c54:	bl	116f8 <strchr@plt>
   19c58:	cmp	r0, #0
   19c5c:	moveq	r4, #4
   19c60:	beq	19be0 <lchmod@@Base+0x31e8>
   19c64:	mov	r2, #1
   19c68:	mov	r3, #0
   19c6c:	strd	r2, [sp]
   19c70:	mov	r4, #0
   19c74:	b	19c88 <lchmod@@Base+0x3290>
   19c78:	mov	r4, #0
   19c7c:	ldr	r3, [sp, #48]	; 0x30
   19c80:	cmp	r3, #0
   19c84:	beq	19d78 <lchmod@@Base+0x3380>
   19c88:	ldrb	r5, [r7]
   19c8c:	cmp	r5, #0
   19c90:	beq	19f10 <lchmod@@Base+0x3518>
   19c94:	mov	r1, r5
   19c98:	ldr	r0, [sp, #48]	; 0x30
   19c9c:	bl	116f8 <strchr@plt>
   19ca0:	cmp	r0, #0
   19ca4:	beq	19d80 <lchmod@@Base+0x3388>
   19ca8:	sub	r3, r5, #69	; 0x45
   19cac:	cmp	r3, #47	; 0x2f
   19cb0:	ldrls	pc, [pc, r3, lsl #2]
   19cb4:	b	19dec <lchmod@@Base+0x33f4>
   19cb8:	muleq	r1, r0, sp
   19cbc:	andeq	r9, r1, ip, ror #27
   19cc0:	muleq	r1, r0, sp
   19cc4:	andeq	r9, r1, ip, ror #27
   19cc8:	andeq	r9, r1, ip, ror #27
   19ccc:	andeq	r9, r1, ip, ror #27
   19cd0:	muleq	r1, r0, sp
   19cd4:	andeq	r9, r1, ip, ror #27
   19cd8:	muleq	r1, r0, sp
   19cdc:	andeq	r9, r1, ip, ror #27
   19ce0:	andeq	r9, r1, ip, ror #27
   19ce4:	muleq	r1, r0, sp
   19ce8:	andeq	r9, r1, ip, ror #27
   19cec:	andeq	r9, r1, ip, ror #27
   19cf0:	andeq	r9, r1, ip, ror #27
   19cf4:	muleq	r1, r0, sp
   19cf8:	andeq	r9, r1, ip, ror #27
   19cfc:	andeq	r9, r1, ip, ror #27
   19d00:	andeq	r9, r1, ip, ror #27
   19d04:	andeq	r9, r1, ip, ror #27
   19d08:	muleq	r1, r0, sp
   19d0c:	muleq	r1, r0, sp
   19d10:	andeq	r9, r1, ip, ror #27
   19d14:	andeq	r9, r1, ip, ror #27
   19d18:	andeq	r9, r1, ip, ror #27
   19d1c:	andeq	r9, r1, ip, ror #27
   19d20:	andeq	r9, r1, ip, ror #27
   19d24:	andeq	r9, r1, ip, ror #27
   19d28:	andeq	r9, r1, ip, ror #27
   19d2c:	andeq	r9, r1, ip, ror #27
   19d30:	andeq	r9, r1, ip, ror #27
   19d34:	andeq	r9, r1, ip, ror #27
   19d38:	andeq	r9, r1, ip, ror #27
   19d3c:	andeq	r9, r1, ip, ror #27
   19d40:	muleq	r1, r0, sp
   19d44:	andeq	r9, r1, ip, ror #27
   19d48:	andeq	r9, r1, ip, ror #27
   19d4c:	andeq	r9, r1, ip, ror #27
   19d50:	muleq	r1, r0, sp
   19d54:	andeq	r9, r1, ip, ror #27
   19d58:	muleq	r1, r0, sp
   19d5c:	andeq	r9, r1, ip, ror #27
   19d60:	andeq	r9, r1, ip, ror #27
   19d64:	andeq	r9, r1, ip, ror #27
   19d68:	andeq	r9, r1, ip, ror #27
   19d6c:	andeq	r9, r1, ip, ror #27
   19d70:	andeq	r9, r1, ip, ror #27
   19d74:	muleq	r1, r0, sp
   19d78:	strd	r0, [r9]
   19d7c:	b	19be0 <lchmod@@Base+0x31e8>
   19d80:	ldrd	r2, [sp]
   19d84:	strd	r2, [r9]
   19d88:	orr	r4, r4, #2
   19d8c:	b	19be0 <lchmod@@Base+0x31e8>
   19d90:	mov	r1, #48	; 0x30
   19d94:	ldr	r0, [sp, #48]	; 0x30
   19d98:	bl	116f8 <strchr@plt>
   19d9c:	cmp	r0, #0
   19da0:	beq	19edc <lchmod@@Base+0x34e4>
   19da4:	ldrb	r3, [r7, #1]
   19da8:	cmp	r3, #68	; 0x44
   19dac:	beq	19dc8 <lchmod@@Base+0x33d0>
   19db0:	cmp	r3, #105	; 0x69
   19db4:	beq	19dd4 <lchmod@@Base+0x33dc>
   19db8:	cmp	r3, #66	; 0x42
   19dbc:	movne	r7, #1
   19dc0:	movne	r1, #1024	; 0x400
   19dc4:	bne	19df4 <lchmod@@Base+0x33fc>
   19dc8:	mov	r7, #2
   19dcc:	mov	r1, #1000	; 0x3e8
   19dd0:	b	19df4 <lchmod@@Base+0x33fc>
   19dd4:	ldrb	r7, [r7, #2]
   19dd8:	cmp	r7, #66	; 0x42
   19ddc:	movne	r7, #1
   19de0:	moveq	r7, #3
   19de4:	mov	r1, #1024	; 0x400
   19de8:	b	19df4 <lchmod@@Base+0x33fc>
   19dec:	mov	r7, #1
   19df0:	mov	r1, #1024	; 0x400
   19df4:	sub	r5, r5, #66	; 0x42
   19df8:	cmp	r5, #53	; 0x35
   19dfc:	ldrls	pc, [pc, r5, lsl #2]
   19e00:	b	19fbc <lchmod@@Base+0x35c4>
   19e04:	andeq	r9, r1, ip, lsl pc
   19e08:			; <UNDEFINED> instruction: 0x00019fbc
   19e0c:			; <UNDEFINED> instruction: 0x00019fbc
   19e10:	andeq	r9, r1, ip, lsr #30
   19e14:			; <UNDEFINED> instruction: 0x00019fbc
   19e18:	andeq	r9, r1, ip, lsr pc
   19e1c:			; <UNDEFINED> instruction: 0x00019fbc
   19e20:			; <UNDEFINED> instruction: 0x00019fbc
   19e24:			; <UNDEFINED> instruction: 0x00019fbc
   19e28:	andeq	r9, r1, ip, asr #30
   19e2c:			; <UNDEFINED> instruction: 0x00019fbc
   19e30:	andeq	r9, r1, ip, asr pc
   19e34:			; <UNDEFINED> instruction: 0x00019fbc
   19e38:			; <UNDEFINED> instruction: 0x00019fbc
   19e3c:	andeq	r9, r1, ip, ror #30
   19e40:			; <UNDEFINED> instruction: 0x00019fbc
   19e44:			; <UNDEFINED> instruction: 0x00019fbc
   19e48:			; <UNDEFINED> instruction: 0x00019fbc
   19e4c:	andeq	r9, r1, ip, ror pc
   19e50:			; <UNDEFINED> instruction: 0x00019fbc
   19e54:			; <UNDEFINED> instruction: 0x00019fbc
   19e58:			; <UNDEFINED> instruction: 0x00019fbc
   19e5c:			; <UNDEFINED> instruction: 0x00019fbc
   19e60:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19e64:	andeq	r9, r1, ip, lsr #31
   19e68:			; <UNDEFINED> instruction: 0x00019fbc
   19e6c:			; <UNDEFINED> instruction: 0x00019fbc
   19e70:			; <UNDEFINED> instruction: 0x00019fbc
   19e74:			; <UNDEFINED> instruction: 0x00019fbc
   19e78:			; <UNDEFINED> instruction: 0x00019fbc
   19e7c:			; <UNDEFINED> instruction: 0x00019fbc
   19e80:			; <UNDEFINED> instruction: 0x00019fbc
   19e84:	andeq	r9, r1, r8, ror #29
   19e88:	andeq	r9, r1, ip, asr #31
   19e8c:			; <UNDEFINED> instruction: 0x00019fbc
   19e90:			; <UNDEFINED> instruction: 0x00019fbc
   19e94:			; <UNDEFINED> instruction: 0x00019fbc
   19e98:	andeq	r9, r1, ip, lsr pc
   19e9c:			; <UNDEFINED> instruction: 0x00019fbc
   19ea0:			; <UNDEFINED> instruction: 0x00019fbc
   19ea4:			; <UNDEFINED> instruction: 0x00019fbc
   19ea8:	andeq	r9, r1, ip, asr #30
   19eac:			; <UNDEFINED> instruction: 0x00019fbc
   19eb0:	andeq	r9, r1, ip, asr pc
   19eb4:			; <UNDEFINED> instruction: 0x00019fbc
   19eb8:			; <UNDEFINED> instruction: 0x00019fbc
   19ebc:			; <UNDEFINED> instruction: 0x00019fbc
   19ec0:			; <UNDEFINED> instruction: 0x00019fbc
   19ec4:			; <UNDEFINED> instruction: 0x00019fbc
   19ec8:			; <UNDEFINED> instruction: 0x00019fbc
   19ecc:	andeq	r9, r1, ip, ror pc
   19ed0:			; <UNDEFINED> instruction: 0x00019fbc
   19ed4:			; <UNDEFINED> instruction: 0x00019fbc
   19ed8:	andeq	r9, r1, ip, lsl #31
   19edc:	mov	r7, #1
   19ee0:	mov	r1, #1024	; 0x400
   19ee4:	b	19df4 <lchmod@@Base+0x33fc>
   19ee8:	mov	r1, #512	; 0x200
   19eec:	mov	r0, sp
   19ef0:	bl	19a78 <lchmod@@Base+0x3080>
   19ef4:	orr	r4, r4, r0
   19ef8:	ldr	r3, [r6]
   19efc:	add	r2, r3, r7
   19f00:	str	r2, [r6]
   19f04:	ldrb	r3, [r3, r7]
   19f08:	cmp	r3, #0
   19f0c:	orrne	r4, r4, #2
   19f10:	ldrd	r2, [sp]
   19f14:	strd	r2, [r9]
   19f18:	b	19be0 <lchmod@@Base+0x31e8>
   19f1c:	mov	r1, #1024	; 0x400
   19f20:	mov	r0, sp
   19f24:	bl	19a78 <lchmod@@Base+0x3080>
   19f28:	b	19ef4 <lchmod@@Base+0x34fc>
   19f2c:	mov	r2, #6
   19f30:	mov	r0, sp
   19f34:	bl	19b20 <lchmod@@Base+0x3128>
   19f38:	b	19ef4 <lchmod@@Base+0x34fc>
   19f3c:	mov	r2, #3
   19f40:	mov	r0, sp
   19f44:	bl	19b20 <lchmod@@Base+0x3128>
   19f48:	b	19ef4 <lchmod@@Base+0x34fc>
   19f4c:	mov	r2, #1
   19f50:	mov	r0, sp
   19f54:	bl	19b20 <lchmod@@Base+0x3128>
   19f58:	b	19ef4 <lchmod@@Base+0x34fc>
   19f5c:	mov	r2, #2
   19f60:	mov	r0, sp
   19f64:	bl	19b20 <lchmod@@Base+0x3128>
   19f68:	b	19ef4 <lchmod@@Base+0x34fc>
   19f6c:	mov	r2, #5
   19f70:	mov	r0, sp
   19f74:	bl	19b20 <lchmod@@Base+0x3128>
   19f78:	b	19ef4 <lchmod@@Base+0x34fc>
   19f7c:	mov	r2, #4
   19f80:	mov	r0, sp
   19f84:	bl	19b20 <lchmod@@Base+0x3128>
   19f88:	b	19ef4 <lchmod@@Base+0x34fc>
   19f8c:	mov	r1, #2
   19f90:	mov	r0, sp
   19f94:	bl	19a78 <lchmod@@Base+0x3080>
   19f98:	b	19ef4 <lchmod@@Base+0x34fc>
   19f9c:	mov	r2, #8
   19fa0:	mov	r0, sp
   19fa4:	bl	19b20 <lchmod@@Base+0x3128>
   19fa8:	b	19ef4 <lchmod@@Base+0x34fc>
   19fac:	mov	r2, #7
   19fb0:	mov	r0, sp
   19fb4:	bl	19b20 <lchmod@@Base+0x3128>
   19fb8:	b	19ef4 <lchmod@@Base+0x34fc>
   19fbc:	ldrd	r2, [sp]
   19fc0:	strd	r2, [r9]
   19fc4:	orr	r4, r4, #2
   19fc8:	b	19be0 <lchmod@@Base+0x31e8>
   19fcc:	mov	r0, #0
   19fd0:	b	19ef4 <lchmod@@Base+0x34fc>
   19fd4:	andeq	fp, r1, r8, lsr #27
   19fd8:			; <UNDEFINED> instruction: 0x0001bdb4
   19fdc:	andeq	fp, r1, r4, asr #27
   19fe0:	push	{r4, lr}
   19fe4:	mov	r2, r0
   19fe8:	mov	r3, r1
   19fec:	cmp	r1, #0
   19ff0:	cmpne	r0, #0
   19ff4:	moveq	r3, #1
   19ff8:	moveq	r2, r3
   19ffc:	umull	r0, r1, r2, r3
   1a000:	cmp	r0, #0
   1a004:	cmpge	r1, #0
   1a008:	bne	1a01c <lchmod@@Base+0x3624>
   1a00c:	mov	r1, r3
   1a010:	mov	r0, r2
   1a014:	bl	114a0 <calloc@plt>
   1a018:	pop	{r4, pc}
   1a01c:	bl	1171c <__errno_location@plt>
   1a020:	mov	r3, #12
   1a024:	str	r3, [r0]
   1a028:	mov	r0, #0
   1a02c:	pop	{r4, pc}
   1a030:	push	{r4, lr}
   1a034:	cmp	r0, #0
   1a038:	moveq	r0, #1
   1a03c:	cmp	r0, #0
   1a040:	blt	1a04c <lchmod@@Base+0x3654>
   1a044:	bl	1165c <malloc@plt>
   1a048:	pop	{r4, pc}
   1a04c:	bl	1171c <__errno_location@plt>
   1a050:	mov	r3, #12
   1a054:	str	r3, [r0]
   1a058:	mov	r0, #0
   1a05c:	pop	{r4, pc}
   1a060:	push	{r4, lr}
   1a064:	cmp	r0, #0
   1a068:	beq	1a084 <lchmod@@Base+0x368c>
   1a06c:	cmp	r1, #0
   1a070:	beq	1a090 <lchmod@@Base+0x3698>
   1a074:	cmp	r1, #0
   1a078:	blt	1a09c <lchmod@@Base+0x36a4>
   1a07c:	bl	11590 <realloc@plt>
   1a080:	pop	{r4, pc}
   1a084:	mov	r0, r1
   1a088:	bl	1a030 <lchmod@@Base+0x3638>
   1a08c:	pop	{r4, pc}
   1a090:	bl	136c8 <__assert_fail@plt+0x1dfc>
   1a094:	mov	r0, #0
   1a098:	pop	{r4, pc}
   1a09c:	bl	1171c <__errno_location@plt>
   1a0a0:	mov	r3, #12
   1a0a4:	str	r3, [r0]
   1a0a8:	mov	r0, #0
   1a0ac:	pop	{r4, pc}
   1a0b0:	ldrb	r3, [r0]
   1a0b4:	cmp	r3, #47	; 0x2f
   1a0b8:	bne	1a0c8 <lchmod@@Base+0x36d0>
   1a0bc:	ldrb	r3, [r0, #1]!
   1a0c0:	cmp	r3, #47	; 0x2f
   1a0c4:	beq	1a0bc <lchmod@@Base+0x36c4>
   1a0c8:	ldrb	r2, [r0]
   1a0cc:	cmp	r2, #0
   1a0d0:	bxeq	lr
   1a0d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a0d8:	mov	r1, r0
   1a0dc:	mov	r3, #0
   1a0e0:	mov	lr, #1
   1a0e4:	mov	ip, r3
   1a0e8:	b	1a0f8 <lchmod@@Base+0x3700>
   1a0ec:	ldrb	r2, [r1, #1]!
   1a0f0:	cmp	r2, #0
   1a0f4:	beq	1a114 <lchmod@@Base+0x371c>
   1a0f8:	cmp	r2, #47	; 0x2f
   1a0fc:	moveq	r3, lr
   1a100:	beq	1a0ec <lchmod@@Base+0x36f4>
   1a104:	cmp	r3, #0
   1a108:	movne	r0, r1
   1a10c:	movne	r3, ip
   1a110:	b	1a0ec <lchmod@@Base+0x36f4>
   1a114:	pop	{pc}		; (ldr pc, [sp], #4)
   1a118:	push	{r4, lr}
   1a11c:	mov	r4, r0
   1a120:	bl	116e0 <strlen@plt>
   1a124:	cmp	r0, #1
   1a128:	popls	{r4, pc}
   1a12c:	sub	r3, r0, #1
   1a130:	add	r2, r4, r3
   1a134:	ldrb	r1, [r4, r3]
   1a138:	cmp	r1, #47	; 0x2f
   1a13c:	popne	{r4, pc}
   1a140:	cmp	r3, #1
   1a144:	beq	1a168 <lchmod@@Base+0x3770>
   1a148:	sub	r0, r3, #1
   1a14c:	ldrb	r1, [r2, #-1]!
   1a150:	cmp	r1, #47	; 0x2f
   1a154:	beq	1a160 <lchmod@@Base+0x3768>
   1a158:	mov	r0, r3
   1a15c:	pop	{r4, pc}
   1a160:	mov	r3, r0
   1a164:	b	1a140 <lchmod@@Base+0x3748>
   1a168:	mov	r0, #1
   1a16c:	pop	{r4, pc}
   1a170:	push	{r4, r5, r6, lr}
   1a174:	mov	r5, r0
   1a178:	bl	11620 <__fpending@plt>
   1a17c:	mov	r6, r0
   1a180:	ldr	r4, [r5]
   1a184:	and	r4, r4, #32
   1a188:	mov	r0, r5
   1a18c:	bl	1a2d0 <lchmod@@Base+0x38d8>
   1a190:	cmp	r4, #0
   1a194:	bne	1a1bc <lchmod@@Base+0x37c4>
   1a198:	cmp	r0, #0
   1a19c:	popeq	{r4, r5, r6, pc}
   1a1a0:	cmp	r6, #0
   1a1a4:	bne	1a1d8 <lchmod@@Base+0x37e0>
   1a1a8:	bl	1171c <__errno_location@plt>
   1a1ac:	ldr	r0, [r0]
   1a1b0:	subs	r0, r0, #9
   1a1b4:	mvnne	r0, #0
   1a1b8:	pop	{r4, r5, r6, pc}
   1a1bc:	cmp	r0, #0
   1a1c0:	bne	1a1e0 <lchmod@@Base+0x37e8>
   1a1c4:	bl	1171c <__errno_location@plt>
   1a1c8:	mov	r3, #0
   1a1cc:	str	r3, [r0]
   1a1d0:	mvn	r0, #0
   1a1d4:	pop	{r4, r5, r6, pc}
   1a1d8:	mvn	r0, #0
   1a1dc:	pop	{r4, r5, r6, pc}
   1a1e0:	mvn	r0, #0
   1a1e4:	pop	{r4, r5, r6, pc}
   1a1e8:	mov	r2, #0
   1a1ec:	mov	r3, #0
   1a1f0:	strd	r2, [r0, #16]
   1a1f4:	ldr	r3, [pc, #4]	; 1a200 <lchmod@@Base+0x3808>
   1a1f8:	str	r3, [r0, #24]
   1a1fc:	bx	lr
   1a200:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1a204:	push	{r4, r5, r6, r7, r8, lr}
   1a208:	ldr	r2, [r0, #24]
   1a20c:	ldr	r3, [pc, #172]	; 1a2c0 <lchmod@@Base+0x38c8>
   1a210:	cmp	r2, r3
   1a214:	bne	1a25c <lchmod@@Base+0x3864>
   1a218:	ldrd	r6, [r0, #16]
   1a21c:	orrs	r3, r6, r7
   1a220:	beq	1a29c <lchmod@@Base+0x38a4>
   1a224:	ldrd	r4, [r1, #96]	; 0x60
   1a228:	ldrd	r2, [r0]
   1a22c:	cmp	r5, r3
   1a230:	cmpeq	r4, r2
   1a234:	beq	1a270 <lchmod@@Base+0x3878>
   1a238:	adds	r2, r6, #1
   1a23c:	adc	r3, r7, #0
   1a240:	strd	r2, [r0, #16]
   1a244:	and	r6, r6, r2
   1a248:	and	r7, r7, r3
   1a24c:	orrs	ip, r6, r7
   1a250:	beq	1a28c <lchmod@@Base+0x3894>
   1a254:	mov	r0, #0
   1a258:	pop	{r4, r5, r6, r7, r8, pc}
   1a25c:	ldr	r3, [pc, #96]	; 1a2c4 <lchmod@@Base+0x38cc>
   1a260:	mov	r2, #60	; 0x3c
   1a264:	ldr	r1, [pc, #92]	; 1a2c8 <lchmod@@Base+0x38d0>
   1a268:	ldr	r0, [pc, #92]	; 1a2cc <lchmod@@Base+0x38d4>
   1a26c:	bl	118cc <__assert_fail@plt>
   1a270:	ldrd	r4, [r1]
   1a274:	ldrd	r2, [r0, #8]
   1a278:	cmp	r5, r3
   1a27c:	cmpeq	r4, r2
   1a280:	bne	1a238 <lchmod@@Base+0x3840>
   1a284:	mov	r0, #1
   1a288:	pop	{r4, r5, r6, r7, r8, pc}
   1a28c:	orrs	r3, r2, r3
   1a290:	bne	1a2a8 <lchmod@@Base+0x38b0>
   1a294:	mov	r0, #1
   1a298:	pop	{r4, r5, r6, r7, r8, pc}
   1a29c:	mov	r2, #1
   1a2a0:	mov	r3, #0
   1a2a4:	strd	r2, [r0, #16]
   1a2a8:	ldrd	r2, [r1]
   1a2ac:	strd	r2, [r0, #8]
   1a2b0:	ldrd	r2, [r1, #96]	; 0x60
   1a2b4:	strd	r2, [r0]
   1a2b8:	mov	r0, #0
   1a2bc:	pop	{r4, r5, r6, r7, r8, pc}
   1a2c0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1a2c4:	andeq	fp, r1, ip, ror #27
   1a2c8:	strdeq	fp, [r1], -r8
   1a2cc:	andeq	fp, r1, ip, lsl #28
   1a2d0:	push	{r4, r5, r6, lr}
   1a2d4:	sub	sp, sp, #8
   1a2d8:	mov	r4, r0
   1a2dc:	bl	11758 <fileno@plt>
   1a2e0:	cmp	r0, #0
   1a2e4:	blt	1a35c <lchmod@@Base+0x3964>
   1a2e8:	mov	r0, r4
   1a2ec:	bl	11674 <__freading@plt>
   1a2f0:	cmp	r0, #0
   1a2f4:	beq	1a328 <lchmod@@Base+0x3930>
   1a2f8:	mov	r0, r4
   1a2fc:	bl	11758 <fileno@plt>
   1a300:	mov	r3, #1
   1a304:	str	r3, [sp]
   1a308:	mov	r2, #0
   1a30c:	mov	r3, #0
   1a310:	bl	115fc <lseek64@plt>
   1a314:	mvn	r2, #0
   1a318:	mvn	r3, #0
   1a31c:	cmp	r1, r3
   1a320:	cmpeq	r0, r2
   1a324:	beq	1a368 <lchmod@@Base+0x3970>
   1a328:	mov	r0, r4
   1a32c:	bl	1a60c <lchmod@@Base+0x3c14>
   1a330:	cmp	r0, #0
   1a334:	beq	1a368 <lchmod@@Base+0x3970>
   1a338:	bl	1171c <__errno_location@plt>
   1a33c:	mov	r5, r0
   1a340:	ldr	r6, [r0]
   1a344:	mov	r0, r4
   1a348:	bl	11770 <fclose@plt>
   1a34c:	cmp	r6, #0
   1a350:	strne	r6, [r5]
   1a354:	mvnne	r0, #0
   1a358:	b	1a370 <lchmod@@Base+0x3978>
   1a35c:	mov	r0, r4
   1a360:	bl	11770 <fclose@plt>
   1a364:	b	1a370 <lchmod@@Base+0x3978>
   1a368:	mov	r0, r4
   1a36c:	bl	11770 <fclose@plt>
   1a370:	add	sp, sp, #8
   1a374:	pop	{r4, r5, r6, pc}
   1a378:	push	{r1, r2, r3}
   1a37c:	push	{r4, r5, r6, lr}
   1a380:	sub	sp, sp, #12
   1a384:	mov	r5, r0
   1a388:	ldr	r1, [sp, #28]
   1a38c:	add	r3, sp, #32
   1a390:	str	r3, [sp, #4]
   1a394:	cmp	r1, #0
   1a398:	beq	1a3e0 <lchmod@@Base+0x39e8>
   1a39c:	ldr	r3, [pc, #540]	; 1a5c0 <lchmod@@Base+0x3bc8>
   1a3a0:	cmp	r1, r3
   1a3a4:	beq	1a410 <lchmod@@Base+0x3a18>
   1a3a8:	cmp	r1, #11
   1a3ac:	beq	1a5b0 <lchmod@@Base+0x3bb8>
   1a3b0:	bgt	1a53c <lchmod@@Base+0x3b44>
   1a3b4:	cmp	r1, #3
   1a3b8:	beq	1a5b0 <lchmod@@Base+0x3bb8>
   1a3bc:	ble	1a4fc <lchmod@@Base+0x3b04>
   1a3c0:	cmp	r1, #8
   1a3c4:	beq	1a51c <lchmod@@Base+0x3b24>
   1a3c8:	ble	1a514 <lchmod@@Base+0x3b1c>
   1a3cc:	cmp	r1, #9
   1a3d0:	beq	1a5b0 <lchmod@@Base+0x3bb8>
   1a3d4:	cmp	r1, #10
   1a3d8:	bne	1a574 <lchmod@@Base+0x3b7c>
   1a3dc:	b	1a51c <lchmod@@Base+0x3b24>
   1a3e0:	ldr	r3, [sp, #4]
   1a3e4:	add	r2, r3, #4
   1a3e8:	str	r2, [sp, #4]
   1a3ec:	ldr	r2, [r3]
   1a3f0:	mov	r1, #0
   1a3f4:	bl	11788 <fcntl64@plt>
   1a3f8:	mov	r4, r0
   1a3fc:	mov	r0, r4
   1a400:	add	sp, sp, #12
   1a404:	pop	{r4, r5, r6, lr}
   1a408:	add	sp, sp, #12
   1a40c:	bx	lr
   1a410:	ldr	r3, [sp, #4]
   1a414:	add	r2, r3, #4
   1a418:	str	r2, [sp, #4]
   1a41c:	ldr	r6, [r3]
   1a420:	ldr	r3, [pc, #412]	; 1a5c4 <lchmod@@Base+0x3bcc>
   1a424:	ldr	r3, [r3]
   1a428:	cmp	r3, #0
   1a42c:	blt	1a48c <lchmod@@Base+0x3a94>
   1a430:	mov	r2, r6
   1a434:	ldr	r1, [pc, #388]	; 1a5c0 <lchmod@@Base+0x3bc8>
   1a438:	bl	11788 <fcntl64@plt>
   1a43c:	subs	r4, r0, #0
   1a440:	blt	1a454 <lchmod@@Base+0x3a5c>
   1a444:	mov	r2, #1
   1a448:	ldr	r3, [pc, #372]	; 1a5c4 <lchmod@@Base+0x3bcc>
   1a44c:	str	r2, [r3]
   1a450:	b	1a3fc <lchmod@@Base+0x3a04>
   1a454:	bl	1171c <__errno_location@plt>
   1a458:	ldr	r3, [r0]
   1a45c:	cmp	r3, #22
   1a460:	bne	1a444 <lchmod@@Base+0x3a4c>
   1a464:	mov	r2, r6
   1a468:	mov	r1, #0
   1a46c:	mov	r0, r5
   1a470:	bl	11788 <fcntl64@plt>
   1a474:	subs	r4, r0, #0
   1a478:	blt	1a3fc <lchmod@@Base+0x3a04>
   1a47c:	mvn	r2, #0
   1a480:	ldr	r3, [pc, #316]	; 1a5c4 <lchmod@@Base+0x3bcc>
   1a484:	str	r2, [r3]
   1a488:	b	1a4b0 <lchmod@@Base+0x3ab8>
   1a48c:	mov	r2, r6
   1a490:	mov	r1, #0
   1a494:	bl	11788 <fcntl64@plt>
   1a498:	subs	r4, r0, #0
   1a49c:	blt	1a3fc <lchmod@@Base+0x3a04>
   1a4a0:	ldr	r3, [pc, #284]	; 1a5c4 <lchmod@@Base+0x3bcc>
   1a4a4:	ldr	r3, [r3]
   1a4a8:	cmn	r3, #1
   1a4ac:	bne	1a3fc <lchmod@@Base+0x3a04>
   1a4b0:	mov	r1, #1
   1a4b4:	mov	r0, r4
   1a4b8:	bl	11788 <fcntl64@plt>
   1a4bc:	subs	r2, r0, #0
   1a4c0:	blt	1a4dc <lchmod@@Base+0x3ae4>
   1a4c4:	orr	r2, r2, #1
   1a4c8:	mov	r1, #2
   1a4cc:	mov	r0, r4
   1a4d0:	bl	11788 <fcntl64@plt>
   1a4d4:	cmn	r0, #1
   1a4d8:	bne	1a3fc <lchmod@@Base+0x3a04>
   1a4dc:	bl	1171c <__errno_location@plt>
   1a4e0:	mov	r5, r0
   1a4e4:	ldr	r6, [r0]
   1a4e8:	mov	r0, r4
   1a4ec:	bl	11884 <close@plt>
   1a4f0:	str	r6, [r5]
   1a4f4:	mvn	r4, #0
   1a4f8:	b	1a3fc <lchmod@@Base+0x3a04>
   1a4fc:	cmp	r1, #1
   1a500:	beq	1a5b0 <lchmod@@Base+0x3bb8>
   1a504:	bgt	1a51c <lchmod@@Base+0x3b24>
   1a508:	cmp	r1, #0
   1a50c:	bne	1a574 <lchmod@@Base+0x3b7c>
   1a510:	b	1a51c <lchmod@@Base+0x3b24>
   1a514:	cmp	r1, #4
   1a518:	bne	1a574 <lchmod@@Base+0x3b7c>
   1a51c:	ldr	r3, [sp, #4]
   1a520:	add	r2, r3, #4
   1a524:	str	r2, [sp, #4]
   1a528:	ldr	r2, [r3]
   1a52c:	mov	r0, r5
   1a530:	bl	11788 <fcntl64@plt>
   1a534:	mov	r4, r0
   1a538:	b	1a3fc <lchmod@@Base+0x3a04>
   1a53c:	ldr	r3, [pc, #132]	; 1a5c8 <lchmod@@Base+0x3bd0>
   1a540:	cmp	r1, r3
   1a544:	bgt	1a594 <lchmod@@Base+0x3b9c>
   1a548:	sub	r3, r3, #1
   1a54c:	cmp	r1, r3
   1a550:	bge	1a51c <lchmod@@Base+0x3b24>
   1a554:	sub	r3, r3, #5
   1a558:	cmp	r1, r3
   1a55c:	beq	1a5b0 <lchmod@@Base+0x3bb8>
   1a560:	add	r3, r3, #1
   1a564:	cmp	r1, r3
   1a568:	beq	1a51c <lchmod@@Base+0x3b24>
   1a56c:	cmp	r1, #1024	; 0x400
   1a570:	beq	1a51c <lchmod@@Base+0x3b24>
   1a574:	ldr	r3, [sp, #4]
   1a578:	add	r2, r3, #4
   1a57c:	str	r2, [sp, #4]
   1a580:	ldr	r2, [r3]
   1a584:	mov	r0, r5
   1a588:	bl	11788 <fcntl64@plt>
   1a58c:	mov	r4, r0
   1a590:	b	1a3fc <lchmod@@Base+0x3a04>
   1a594:	ldr	r3, [pc, #48]	; 1a5cc <lchmod@@Base+0x3bd4>
   1a598:	cmp	r1, r3
   1a59c:	beq	1a51c <lchmod@@Base+0x3b24>
   1a5a0:	blt	1a5b0 <lchmod@@Base+0x3bb8>
   1a5a4:	add	r3, r3, #1
   1a5a8:	cmp	r1, r3
   1a5ac:	bne	1a574 <lchmod@@Base+0x3b7c>
   1a5b0:	mov	r0, r5
   1a5b4:	bl	11788 <fcntl64@plt>
   1a5b8:	mov	r4, r0
   1a5bc:	b	1a3fc <lchmod@@Base+0x3a04>
   1a5c0:	andeq	r0, r0, r6, lsl #8
   1a5c4:	andeq	ip, r2, ip, lsr #6
   1a5c8:	andeq	r0, r0, r7, lsl #8
   1a5cc:	andeq	r0, r0, r9, lsl #8
   1a5d0:	push	{r1, r2, r3}
   1a5d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a5d8:	sub	sp, sp, #8
   1a5dc:	ldr	r1, [sp, #12]
   1a5e0:	tst	r1, #64	; 0x40
   1a5e4:	addne	r3, sp, #20
   1a5e8:	strne	r3, [sp, #4]
   1a5ec:	ldrne	r2, [sp, #16]
   1a5f0:	moveq	r2, #0
   1a5f4:	bl	11644 <open64@plt>
   1a5f8:	bl	18e50 <lchmod@@Base+0x2458>
   1a5fc:	add	sp, sp, #8
   1a600:	pop	{lr}		; (ldr lr, [sp], #4)
   1a604:	add	sp, sp, #12
   1a608:	bx	lr
   1a60c:	push	{r4, lr}
   1a610:	sub	sp, sp, #8
   1a614:	subs	r4, r0, #0
   1a618:	beq	1a62c <lchmod@@Base+0x3c34>
   1a61c:	mov	r0, r4
   1a620:	bl	11674 <__freading@plt>
   1a624:	cmp	r0, #0
   1a628:	bne	1a63c <lchmod@@Base+0x3c44>
   1a62c:	mov	r0, r4
   1a630:	bl	114e8 <fflush@plt>
   1a634:	add	sp, sp, #8
   1a638:	pop	{r4, pc}
   1a63c:	ldr	r3, [r4]
   1a640:	tst	r3, #256	; 0x100
   1a644:	bne	1a654 <lchmod@@Base+0x3c5c>
   1a648:	mov	r0, r4
   1a64c:	bl	114e8 <fflush@plt>
   1a650:	b	1a634 <lchmod@@Base+0x3c3c>
   1a654:	mov	r3, #1
   1a658:	str	r3, [sp]
   1a65c:	mov	r2, #0
   1a660:	mov	r3, #0
   1a664:	mov	r0, r4
   1a668:	bl	1a670 <lchmod@@Base+0x3c78>
   1a66c:	b	1a648 <lchmod@@Base+0x3c50>
   1a670:	push	{r4, r5, r6, r7, lr}
   1a674:	sub	sp, sp, #12
   1a678:	mov	r4, r0
   1a67c:	mov	r6, r2
   1a680:	mov	r7, r3
   1a684:	ldr	r5, [sp, #32]
   1a688:	ldr	r2, [r0, #8]
   1a68c:	ldr	r3, [r0, #4]
   1a690:	cmp	r2, r3
   1a694:	beq	1a6b4 <lchmod@@Base+0x3cbc>
   1a698:	str	r5, [sp]
   1a69c:	mov	r2, r6
   1a6a0:	mov	r3, r7
   1a6a4:	mov	r0, r4
   1a6a8:	bl	1177c <fseeko64@plt>
   1a6ac:	add	sp, sp, #12
   1a6b0:	pop	{r4, r5, r6, r7, pc}
   1a6b4:	ldr	r2, [r0, #20]
   1a6b8:	ldr	r3, [r0, #16]
   1a6bc:	cmp	r2, r3
   1a6c0:	bne	1a698 <lchmod@@Base+0x3ca0>
   1a6c4:	ldr	r3, [r0, #36]	; 0x24
   1a6c8:	cmp	r3, #0
   1a6cc:	bne	1a698 <lchmod@@Base+0x3ca0>
   1a6d0:	bl	11758 <fileno@plt>
   1a6d4:	str	r5, [sp]
   1a6d8:	mov	r2, r6
   1a6dc:	mov	r3, r7
   1a6e0:	bl	115fc <lseek64@plt>
   1a6e4:	mvn	r2, #0
   1a6e8:	mvn	r3, #0
   1a6ec:	cmp	r1, r3
   1a6f0:	cmpeq	r0, r2
   1a6f4:	beq	1a710 <lchmod@@Base+0x3d18>
   1a6f8:	ldr	r3, [r4]
   1a6fc:	bic	r3, r3, #16
   1a700:	str	r3, [r4]
   1a704:	strd	r0, [r4, #80]	; 0x50
   1a708:	mov	r0, #0
   1a70c:	b	1a6ac <lchmod@@Base+0x3cb4>
   1a710:	mvn	r0, #0
   1a714:	b	1a6ac <lchmod@@Base+0x3cb4>
   1a718:	push	{r4, lr}
   1a71c:	ldrb	r3, [r0]
   1a720:	cmp	r3, #0
   1a724:	beq	1a74c <lchmod@@Base+0x3d54>
   1a728:	mov	r2, r0
   1a72c:	mov	r0, #0
   1a730:	add	r0, r3, r0, ror #23
   1a734:	ldrb	r3, [r2, #1]!
   1a738:	cmp	r3, #0
   1a73c:	bne	1a730 <lchmod@@Base+0x3d38>
   1a740:	bl	1ab34 <lchmod@@Base+0x413c>
   1a744:	mov	r0, r1
   1a748:	pop	{r4, pc}
   1a74c:	mov	r0, #0
   1a750:	b	1a740 <lchmod@@Base+0x3d48>
   1a754:	push	{r4, lr}
   1a758:	mov	r0, #14
   1a75c:	bl	117b8 <nl_langinfo@plt>
   1a760:	cmp	r0, #0
   1a764:	beq	1a77c <lchmod@@Base+0x3d84>
   1a768:	ldrb	r2, [r0]
   1a76c:	ldr	r3, [pc, #16]	; 1a784 <lchmod@@Base+0x3d8c>
   1a770:	cmp	r2, #0
   1a774:	moveq	r0, r3
   1a778:	pop	{r4, pc}
   1a77c:	ldr	r0, [pc]	; 1a784 <lchmod@@Base+0x3d8c>
   1a780:	pop	{r4, pc}
   1a784:	andeq	fp, r1, r4, lsr #28
   1a788:	push	{r4, r5, r6, r7, lr}
   1a78c:	sub	sp, sp, #12
   1a790:	mov	r7, r1
   1a794:	mov	r5, r2
   1a798:	subs	r6, r0, #0
   1a79c:	addeq	r6, sp, #4
   1a7a0:	mov	r0, r6
   1a7a4:	bl	1162c <mbrtowc@plt>
   1a7a8:	mov	r4, r0
   1a7ac:	cmp	r5, #0
   1a7b0:	cmnne	r0, #3
   1a7b4:	bhi	1a7c4 <lchmod@@Base+0x3dcc>
   1a7b8:	mov	r0, r4
   1a7bc:	add	sp, sp, #12
   1a7c0:	pop	{r4, r5, r6, r7, pc}
   1a7c4:	mov	r0, #0
   1a7c8:	bl	1a840 <lchmod@@Base+0x3e48>
   1a7cc:	cmp	r0, #0
   1a7d0:	ldrbeq	r3, [r7]
   1a7d4:	streq	r3, [r6]
   1a7d8:	moveq	r4, #1
   1a7dc:	b	1a7b8 <lchmod@@Base+0x3dc0>
   1a7e0:	push	{r4, r5, r6, lr}
   1a7e4:	mov	r6, r0
   1a7e8:	mov	r5, r1
   1a7ec:	subs	r4, r2, #0
   1a7f0:	beq	1a81c <lchmod@@Base+0x3e24>
   1a7f4:	mov	r1, r4
   1a7f8:	mvn	r0, #0
   1a7fc:	bl	1a948 <lchmod@@Base+0x3f50>
   1a800:	cmp	r0, r5
   1a804:	bcs	1a81c <lchmod@@Base+0x3e24>
   1a808:	bl	1171c <__errno_location@plt>
   1a80c:	mov	r3, #12
   1a810:	str	r3, [r0]
   1a814:	mov	r0, #0
   1a818:	pop	{r4, r5, r6, pc}
   1a81c:	mul	r1, r5, r4
   1a820:	mov	r0, r6
   1a824:	bl	1a060 <lchmod@@Base+0x3668>
   1a828:	pop	{r4, r5, r6, pc}
   1a82c:	push	{r4, lr}
   1a830:	mov	r2, #3
   1a834:	mov	r1, #0
   1a838:	bl	1a378 <lchmod@@Base+0x3980>
   1a83c:	pop	{r4, pc}
   1a840:	push	{lr}		; (str lr, [sp, #-4]!)
   1a844:	sub	sp, sp, #268	; 0x10c
   1a848:	ldr	r2, [pc, #68]	; 1a894 <lchmod@@Base+0x3e9c>
   1a84c:	add	r1, sp, #4
   1a850:	bl	1a8a0 <lchmod@@Base+0x3ea8>
   1a854:	cmp	r0, #0
   1a858:	movne	r0, #0
   1a85c:	bne	1a88c <lchmod@@Base+0x3e94>
   1a860:	ldr	r1, [pc, #48]	; 1a898 <lchmod@@Base+0x3ea0>
   1a864:	add	r0, sp, #4
   1a868:	bl	114d0 <strcmp@plt>
   1a86c:	cmp	r0, #0
   1a870:	moveq	r0, #0
   1a874:	beq	1a88c <lchmod@@Base+0x3e94>
   1a878:	ldr	r1, [pc, #28]	; 1a89c <lchmod@@Base+0x3ea4>
   1a87c:	add	r0, sp, #4
   1a880:	bl	114d0 <strcmp@plt>
   1a884:	adds	r0, r0, #0
   1a888:	movne	r0, #1
   1a88c:	add	sp, sp, #268	; 0x10c
   1a890:	pop	{pc}		; (ldr pc, [sp], #4)
   1a894:	andeq	r0, r0, r1, lsl #2
   1a898:	andeq	fp, r1, ip, lsr #28
   1a89c:	andeq	fp, r1, r0, lsr lr
   1a8a0:	push	{r4, r5, r6, lr}
   1a8a4:	mov	r6, r1
   1a8a8:	mov	r4, r2
   1a8ac:	mov	r1, #0
   1a8b0:	bl	11794 <setlocale@plt>
   1a8b4:	subs	r5, r0, #0
   1a8b8:	beq	1a8dc <lchmod@@Base+0x3ee4>
   1a8bc:	mov	r0, r5
   1a8c0:	bl	116e0 <strlen@plt>
   1a8c4:	cmp	r4, r0
   1a8c8:	bhi	1a8f4 <lchmod@@Base+0x3efc>
   1a8cc:	cmp	r4, #0
   1a8d0:	bne	1a90c <lchmod@@Base+0x3f14>
   1a8d4:	mov	r0, #34	; 0x22
   1a8d8:	pop	{r4, r5, r6, pc}
   1a8dc:	cmp	r4, #0
   1a8e0:	beq	1a930 <lchmod@@Base+0x3f38>
   1a8e4:	mov	r3, #0
   1a8e8:	strb	r3, [r6]
   1a8ec:	mov	r0, #22
   1a8f0:	pop	{r4, r5, r6, pc}
   1a8f4:	add	r2, r0, #1
   1a8f8:	mov	r1, r5
   1a8fc:	mov	r0, r6
   1a900:	bl	11530 <memcpy@plt>
   1a904:	mov	r0, #0
   1a908:	pop	{r4, r5, r6, pc}
   1a90c:	sub	r4, r4, #1
   1a910:	mov	r2, r4
   1a914:	mov	r1, r5
   1a918:	mov	r0, r6
   1a91c:	bl	11530 <memcpy@plt>
   1a920:	mov	r3, #0
   1a924:	strb	r3, [r6, r4]
   1a928:	mov	r0, #34	; 0x22
   1a92c:	pop	{r4, r5, r6, pc}
   1a930:	mov	r0, #22
   1a934:	pop	{r4, r5, r6, pc}
   1a938:	push	{r4, lr}
   1a93c:	mov	r1, #0
   1a940:	bl	11794 <setlocale@plt>
   1a944:	pop	{r4, pc}
   1a948:	subs	r2, r1, #1
   1a94c:	bxeq	lr
   1a950:	bcc	1ab28 <lchmod@@Base+0x4130>
   1a954:	cmp	r0, r1
   1a958:	bls	1ab0c <lchmod@@Base+0x4114>
   1a95c:	tst	r1, r2
   1a960:	beq	1ab18 <lchmod@@Base+0x4120>
   1a964:	clz	r3, r0
   1a968:	clz	r2, r1
   1a96c:	sub	r3, r2, r3
   1a970:	rsbs	r3, r3, #31
   1a974:	addne	r3, r3, r3, lsl #1
   1a978:	mov	r2, #0
   1a97c:	addne	pc, pc, r3, lsl #2
   1a980:	nop			; (mov r0, r0)
   1a984:	cmp	r0, r1, lsl #31
   1a988:	adc	r2, r2, r2
   1a98c:	subcs	r0, r0, r1, lsl #31
   1a990:	cmp	r0, r1, lsl #30
   1a994:	adc	r2, r2, r2
   1a998:	subcs	r0, r0, r1, lsl #30
   1a99c:	cmp	r0, r1, lsl #29
   1a9a0:	adc	r2, r2, r2
   1a9a4:	subcs	r0, r0, r1, lsl #29
   1a9a8:	cmp	r0, r1, lsl #28
   1a9ac:	adc	r2, r2, r2
   1a9b0:	subcs	r0, r0, r1, lsl #28
   1a9b4:	cmp	r0, r1, lsl #27
   1a9b8:	adc	r2, r2, r2
   1a9bc:	subcs	r0, r0, r1, lsl #27
   1a9c0:	cmp	r0, r1, lsl #26
   1a9c4:	adc	r2, r2, r2
   1a9c8:	subcs	r0, r0, r1, lsl #26
   1a9cc:	cmp	r0, r1, lsl #25
   1a9d0:	adc	r2, r2, r2
   1a9d4:	subcs	r0, r0, r1, lsl #25
   1a9d8:	cmp	r0, r1, lsl #24
   1a9dc:	adc	r2, r2, r2
   1a9e0:	subcs	r0, r0, r1, lsl #24
   1a9e4:	cmp	r0, r1, lsl #23
   1a9e8:	adc	r2, r2, r2
   1a9ec:	subcs	r0, r0, r1, lsl #23
   1a9f0:	cmp	r0, r1, lsl #22
   1a9f4:	adc	r2, r2, r2
   1a9f8:	subcs	r0, r0, r1, lsl #22
   1a9fc:	cmp	r0, r1, lsl #21
   1aa00:	adc	r2, r2, r2
   1aa04:	subcs	r0, r0, r1, lsl #21
   1aa08:	cmp	r0, r1, lsl #20
   1aa0c:	adc	r2, r2, r2
   1aa10:	subcs	r0, r0, r1, lsl #20
   1aa14:	cmp	r0, r1, lsl #19
   1aa18:	adc	r2, r2, r2
   1aa1c:	subcs	r0, r0, r1, lsl #19
   1aa20:	cmp	r0, r1, lsl #18
   1aa24:	adc	r2, r2, r2
   1aa28:	subcs	r0, r0, r1, lsl #18
   1aa2c:	cmp	r0, r1, lsl #17
   1aa30:	adc	r2, r2, r2
   1aa34:	subcs	r0, r0, r1, lsl #17
   1aa38:	cmp	r0, r1, lsl #16
   1aa3c:	adc	r2, r2, r2
   1aa40:	subcs	r0, r0, r1, lsl #16
   1aa44:	cmp	r0, r1, lsl #15
   1aa48:	adc	r2, r2, r2
   1aa4c:	subcs	r0, r0, r1, lsl #15
   1aa50:	cmp	r0, r1, lsl #14
   1aa54:	adc	r2, r2, r2
   1aa58:	subcs	r0, r0, r1, lsl #14
   1aa5c:	cmp	r0, r1, lsl #13
   1aa60:	adc	r2, r2, r2
   1aa64:	subcs	r0, r0, r1, lsl #13
   1aa68:	cmp	r0, r1, lsl #12
   1aa6c:	adc	r2, r2, r2
   1aa70:	subcs	r0, r0, r1, lsl #12
   1aa74:	cmp	r0, r1, lsl #11
   1aa78:	adc	r2, r2, r2
   1aa7c:	subcs	r0, r0, r1, lsl #11
   1aa80:	cmp	r0, r1, lsl #10
   1aa84:	adc	r2, r2, r2
   1aa88:	subcs	r0, r0, r1, lsl #10
   1aa8c:	cmp	r0, r1, lsl #9
   1aa90:	adc	r2, r2, r2
   1aa94:	subcs	r0, r0, r1, lsl #9
   1aa98:	cmp	r0, r1, lsl #8
   1aa9c:	adc	r2, r2, r2
   1aaa0:	subcs	r0, r0, r1, lsl #8
   1aaa4:	cmp	r0, r1, lsl #7
   1aaa8:	adc	r2, r2, r2
   1aaac:	subcs	r0, r0, r1, lsl #7
   1aab0:	cmp	r0, r1, lsl #6
   1aab4:	adc	r2, r2, r2
   1aab8:	subcs	r0, r0, r1, lsl #6
   1aabc:	cmp	r0, r1, lsl #5
   1aac0:	adc	r2, r2, r2
   1aac4:	subcs	r0, r0, r1, lsl #5
   1aac8:	cmp	r0, r1, lsl #4
   1aacc:	adc	r2, r2, r2
   1aad0:	subcs	r0, r0, r1, lsl #4
   1aad4:	cmp	r0, r1, lsl #3
   1aad8:	adc	r2, r2, r2
   1aadc:	subcs	r0, r0, r1, lsl #3
   1aae0:	cmp	r0, r1, lsl #2
   1aae4:	adc	r2, r2, r2
   1aae8:	subcs	r0, r0, r1, lsl #2
   1aaec:	cmp	r0, r1, lsl #1
   1aaf0:	adc	r2, r2, r2
   1aaf4:	subcs	r0, r0, r1, lsl #1
   1aaf8:	cmp	r0, r1
   1aafc:	adc	r2, r2, r2
   1ab00:	subcs	r0, r0, r1
   1ab04:	mov	r0, r2
   1ab08:	bx	lr
   1ab0c:	moveq	r0, #1
   1ab10:	movne	r0, #0
   1ab14:	bx	lr
   1ab18:	clz	r2, r1
   1ab1c:	rsb	r2, r2, #31
   1ab20:	lsr	r0, r0, r2
   1ab24:	bx	lr
   1ab28:	cmp	r0, #0
   1ab2c:	mvnne	r0, #0
   1ab30:	b	1add0 <lchmod@@Base+0x43d8>
   1ab34:	cmp	r1, #0
   1ab38:	beq	1ab28 <lchmod@@Base+0x4130>
   1ab3c:	push	{r0, r1, lr}
   1ab40:	bl	1a948 <lchmod@@Base+0x3f50>
   1ab44:	pop	{r1, r2, lr}
   1ab48:	mul	r3, r2, r0
   1ab4c:	sub	r1, r1, r3
   1ab50:	bx	lr
   1ab54:	cmp	r1, #0
   1ab58:	beq	1ad64 <lchmod@@Base+0x436c>
   1ab5c:	eor	ip, r0, r1
   1ab60:	rsbmi	r1, r1, #0
   1ab64:	subs	r2, r1, #1
   1ab68:	beq	1ad30 <lchmod@@Base+0x4338>
   1ab6c:	movs	r3, r0
   1ab70:	rsbmi	r3, r0, #0
   1ab74:	cmp	r3, r1
   1ab78:	bls	1ad3c <lchmod@@Base+0x4344>
   1ab7c:	tst	r1, r2
   1ab80:	beq	1ad4c <lchmod@@Base+0x4354>
   1ab84:	clz	r2, r3
   1ab88:	clz	r0, r1
   1ab8c:	sub	r2, r0, r2
   1ab90:	rsbs	r2, r2, #31
   1ab94:	addne	r2, r2, r2, lsl #1
   1ab98:	mov	r0, #0
   1ab9c:	addne	pc, pc, r2, lsl #2
   1aba0:	nop			; (mov r0, r0)
   1aba4:	cmp	r3, r1, lsl #31
   1aba8:	adc	r0, r0, r0
   1abac:	subcs	r3, r3, r1, lsl #31
   1abb0:	cmp	r3, r1, lsl #30
   1abb4:	adc	r0, r0, r0
   1abb8:	subcs	r3, r3, r1, lsl #30
   1abbc:	cmp	r3, r1, lsl #29
   1abc0:	adc	r0, r0, r0
   1abc4:	subcs	r3, r3, r1, lsl #29
   1abc8:	cmp	r3, r1, lsl #28
   1abcc:	adc	r0, r0, r0
   1abd0:	subcs	r3, r3, r1, lsl #28
   1abd4:	cmp	r3, r1, lsl #27
   1abd8:	adc	r0, r0, r0
   1abdc:	subcs	r3, r3, r1, lsl #27
   1abe0:	cmp	r3, r1, lsl #26
   1abe4:	adc	r0, r0, r0
   1abe8:	subcs	r3, r3, r1, lsl #26
   1abec:	cmp	r3, r1, lsl #25
   1abf0:	adc	r0, r0, r0
   1abf4:	subcs	r3, r3, r1, lsl #25
   1abf8:	cmp	r3, r1, lsl #24
   1abfc:	adc	r0, r0, r0
   1ac00:	subcs	r3, r3, r1, lsl #24
   1ac04:	cmp	r3, r1, lsl #23
   1ac08:	adc	r0, r0, r0
   1ac0c:	subcs	r3, r3, r1, lsl #23
   1ac10:	cmp	r3, r1, lsl #22
   1ac14:	adc	r0, r0, r0
   1ac18:	subcs	r3, r3, r1, lsl #22
   1ac1c:	cmp	r3, r1, lsl #21
   1ac20:	adc	r0, r0, r0
   1ac24:	subcs	r3, r3, r1, lsl #21
   1ac28:	cmp	r3, r1, lsl #20
   1ac2c:	adc	r0, r0, r0
   1ac30:	subcs	r3, r3, r1, lsl #20
   1ac34:	cmp	r3, r1, lsl #19
   1ac38:	adc	r0, r0, r0
   1ac3c:	subcs	r3, r3, r1, lsl #19
   1ac40:	cmp	r3, r1, lsl #18
   1ac44:	adc	r0, r0, r0
   1ac48:	subcs	r3, r3, r1, lsl #18
   1ac4c:	cmp	r3, r1, lsl #17
   1ac50:	adc	r0, r0, r0
   1ac54:	subcs	r3, r3, r1, lsl #17
   1ac58:	cmp	r3, r1, lsl #16
   1ac5c:	adc	r0, r0, r0
   1ac60:	subcs	r3, r3, r1, lsl #16
   1ac64:	cmp	r3, r1, lsl #15
   1ac68:	adc	r0, r0, r0
   1ac6c:	subcs	r3, r3, r1, lsl #15
   1ac70:	cmp	r3, r1, lsl #14
   1ac74:	adc	r0, r0, r0
   1ac78:	subcs	r3, r3, r1, lsl #14
   1ac7c:	cmp	r3, r1, lsl #13
   1ac80:	adc	r0, r0, r0
   1ac84:	subcs	r3, r3, r1, lsl #13
   1ac88:	cmp	r3, r1, lsl #12
   1ac8c:	adc	r0, r0, r0
   1ac90:	subcs	r3, r3, r1, lsl #12
   1ac94:	cmp	r3, r1, lsl #11
   1ac98:	adc	r0, r0, r0
   1ac9c:	subcs	r3, r3, r1, lsl #11
   1aca0:	cmp	r3, r1, lsl #10
   1aca4:	adc	r0, r0, r0
   1aca8:	subcs	r3, r3, r1, lsl #10
   1acac:	cmp	r3, r1, lsl #9
   1acb0:	adc	r0, r0, r0
   1acb4:	subcs	r3, r3, r1, lsl #9
   1acb8:	cmp	r3, r1, lsl #8
   1acbc:	adc	r0, r0, r0
   1acc0:	subcs	r3, r3, r1, lsl #8
   1acc4:	cmp	r3, r1, lsl #7
   1acc8:	adc	r0, r0, r0
   1accc:	subcs	r3, r3, r1, lsl #7
   1acd0:	cmp	r3, r1, lsl #6
   1acd4:	adc	r0, r0, r0
   1acd8:	subcs	r3, r3, r1, lsl #6
   1acdc:	cmp	r3, r1, lsl #5
   1ace0:	adc	r0, r0, r0
   1ace4:	subcs	r3, r3, r1, lsl #5
   1ace8:	cmp	r3, r1, lsl #4
   1acec:	adc	r0, r0, r0
   1acf0:	subcs	r3, r3, r1, lsl #4
   1acf4:	cmp	r3, r1, lsl #3
   1acf8:	adc	r0, r0, r0
   1acfc:	subcs	r3, r3, r1, lsl #3
   1ad00:	cmp	r3, r1, lsl #2
   1ad04:	adc	r0, r0, r0
   1ad08:	subcs	r3, r3, r1, lsl #2
   1ad0c:	cmp	r3, r1, lsl #1
   1ad10:	adc	r0, r0, r0
   1ad14:	subcs	r3, r3, r1, lsl #1
   1ad18:	cmp	r3, r1
   1ad1c:	adc	r0, r0, r0
   1ad20:	subcs	r3, r3, r1
   1ad24:	cmp	ip, #0
   1ad28:	rsbmi	r0, r0, #0
   1ad2c:	bx	lr
   1ad30:	teq	ip, r0
   1ad34:	rsbmi	r0, r0, #0
   1ad38:	bx	lr
   1ad3c:	movcc	r0, #0
   1ad40:	asreq	r0, ip, #31
   1ad44:	orreq	r0, r0, #1
   1ad48:	bx	lr
   1ad4c:	clz	r2, r1
   1ad50:	rsb	r2, r2, #31
   1ad54:	cmp	ip, #0
   1ad58:	lsr	r0, r3, r2
   1ad5c:	rsbmi	r0, r0, #0
   1ad60:	bx	lr
   1ad64:	cmp	r0, #0
   1ad68:	mvngt	r0, #-2147483648	; 0x80000000
   1ad6c:	movlt	r0, #-2147483648	; 0x80000000
   1ad70:	b	1add0 <lchmod@@Base+0x43d8>
   1ad74:	cmp	r1, #0
   1ad78:	beq	1ad64 <lchmod@@Base+0x436c>
   1ad7c:	push	{r0, r1, lr}
   1ad80:	bl	1ab5c <lchmod@@Base+0x4164>
   1ad84:	pop	{r1, r2, lr}
   1ad88:	mul	r3, r2, r0
   1ad8c:	sub	r1, r1, r3
   1ad90:	bx	lr
   1ad94:	cmp	r3, #0
   1ad98:	cmpeq	r2, #0
   1ad9c:	bne	1adb4 <lchmod@@Base+0x43bc>
   1ada0:	cmp	r1, #0
   1ada4:	cmpeq	r0, #0
   1ada8:	mvnne	r1, #0
   1adac:	mvnne	r0, #0
   1adb0:	b	1add0 <lchmod@@Base+0x43d8>
   1adb4:	sub	sp, sp, #8
   1adb8:	push	{sp, lr}
   1adbc:	bl	1ade0 <lchmod@@Base+0x43e8>
   1adc0:	ldr	lr, [sp, #4]
   1adc4:	add	sp, sp, #8
   1adc8:	pop	{r2, r3}
   1adcc:	bx	lr
   1add0:	push	{r1, lr}
   1add4:	mov	r0, #8
   1add8:	bl	114b8 <raise@plt>
   1addc:	pop	{r1, pc}
   1ade0:	cmp	r1, r3
   1ade4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ade8:	cmpeq	r0, r2
   1adec:	mov	r4, r0
   1adf0:	mov	r5, r1
   1adf4:	ldr	r9, [sp, #28]
   1adf8:	movcc	r0, #0
   1adfc:	movcc	r1, #0
   1ae00:	bcc	1aef8 <lchmod@@Base+0x4500>
   1ae04:	cmp	r3, #0
   1ae08:	clzeq	ip, r2
   1ae0c:	clzne	ip, r3
   1ae10:	addeq	ip, ip, #32
   1ae14:	cmp	r5, #0
   1ae18:	clzeq	r1, r4
   1ae1c:	addeq	r1, r1, #32
   1ae20:	clzne	r1, r5
   1ae24:	sub	ip, ip, r1
   1ae28:	sub	lr, ip, #32
   1ae2c:	lsl	r7, r3, ip
   1ae30:	rsb	r8, ip, #32
   1ae34:	orr	r7, r7, r2, lsl lr
   1ae38:	orr	r7, r7, r2, lsr r8
   1ae3c:	lsl	r6, r2, ip
   1ae40:	cmp	r5, r7
   1ae44:	cmpeq	r4, r6
   1ae48:	movcc	r0, #0
   1ae4c:	movcc	r1, #0
   1ae50:	bcc	1ae6c <lchmod@@Base+0x4474>
   1ae54:	mov	r3, #1
   1ae58:	subs	r4, r4, r6
   1ae5c:	lsl	r1, r3, lr
   1ae60:	lsl	r0, r3, ip
   1ae64:	orr	r1, r1, r3, lsr r8
   1ae68:	sbc	r5, r5, r7
   1ae6c:	cmp	ip, #0
   1ae70:	beq	1aef8 <lchmod@@Base+0x4500>
   1ae74:	lsrs	r3, r7, #1
   1ae78:	rrx	r2, r6
   1ae7c:	mov	r6, ip
   1ae80:	b	1aea4 <lchmod@@Base+0x44ac>
   1ae84:	subs	r4, r4, r2
   1ae88:	sbc	r5, r5, r3
   1ae8c:	adds	r4, r4, r4
   1ae90:	adc	r5, r5, r5
   1ae94:	adds	r4, r4, #1
   1ae98:	adc	r5, r5, #0
   1ae9c:	subs	r6, r6, #1
   1aea0:	beq	1aec0 <lchmod@@Base+0x44c8>
   1aea4:	cmp	r5, r3
   1aea8:	cmpeq	r4, r2
   1aeac:	bcs	1ae84 <lchmod@@Base+0x448c>
   1aeb0:	adds	r4, r4, r4
   1aeb4:	adc	r5, r5, r5
   1aeb8:	subs	r6, r6, #1
   1aebc:	bne	1aea4 <lchmod@@Base+0x44ac>
   1aec0:	lsr	r6, r4, ip
   1aec4:	lsr	r7, r5, ip
   1aec8:	orr	r6, r6, r5, lsl r8
   1aecc:	adds	r2, r0, r4
   1aed0:	orr	r6, r6, r5, lsr lr
   1aed4:	adc	r3, r1, r5
   1aed8:	lsl	r1, r7, ip
   1aedc:	orr	r1, r1, r6, lsl lr
   1aee0:	lsl	r0, r6, ip
   1aee4:	orr	r1, r1, r6, lsr r8
   1aee8:	subs	r0, r2, r0
   1aeec:	mov	r4, r6
   1aef0:	mov	r5, r7
   1aef4:	sbc	r1, r3, r1
   1aef8:	cmp	r9, #0
   1aefc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1af00:	strd	r4, [r9]
   1af04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1af08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af0c:	mov	r7, r0
   1af10:	ldr	r6, [pc, #72]	; 1af60 <lchmod@@Base+0x4568>
   1af14:	ldr	r5, [pc, #72]	; 1af64 <lchmod@@Base+0x456c>
   1af18:	add	r6, pc, r6
   1af1c:	add	r5, pc, r5
   1af20:	sub	r6, r6, r5
   1af24:	mov	r8, r1
   1af28:	mov	r9, r2
   1af2c:	bl	11468 <fstatfs64@plt-0x20>
   1af30:	asrs	r6, r6, #2
   1af34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af38:	mov	r4, #0
   1af3c:	add	r4, r4, #1
   1af40:	ldr	r3, [r5], #4
   1af44:	mov	r2, r9
   1af48:	mov	r1, r8
   1af4c:	mov	r0, r7
   1af50:	blx	r3
   1af54:	cmp	r6, r4
   1af58:	bne	1af3c <lchmod@@Base+0x4544>
   1af5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af60:	andeq	r0, r1, r8, ror #31
   1af64:	andeq	r0, r1, r0, ror #31
   1af68:	bx	lr
   1af6c:	ldr	r3, [pc, #12]	; 1af80 <lchmod@@Base+0x4588>
   1af70:	mov	r1, #0
   1af74:	add	r3, pc, r3
   1af78:	ldr	r2, [r3]
   1af7c:	b	11734 <__cxa_atexit@plt>
   1af80:	andeq	r1, r1, r8, lsl #4

Disassembly of section .fini:

0001af84 <.fini>:
   1af84:	push	{r3, lr}
   1af88:	pop	{r3, pc}
