
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #94208	; 0x17000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #94208	; 0x17000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #94208	; 0x17000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <memcmp@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #94208	; 0x17000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <realloc@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #94208	; 0x17000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <puts@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #94208	; 0x17000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <malloc@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #94208	; 0x17000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__libc_start_main@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #94208	; 0x17000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <__gmon_start__@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #94208	; 0x17000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #94208	; 0x17000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #94208	; 0x17000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #94208	; 0x17000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #94208	; 0x17000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #94208	; 0x17000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #94208	; 0x17000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123c4 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	andeq	r7, r1, ip, lsr r7
   12458:	andeq	r3, r1, r8, ror r2
   1245c:	ldrdeq	r7, [r1], -ip
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123d0 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, r8, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	sl, r2, r4, asr r0
   124a8:	andeq	sl, r2, r4, asr r0
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	sl, r2, r4, asr r0
   124e0:	andeq	sl, r2, r4, asr r0
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	sl, r2, r4, asr r0
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	add	fp, sp, #28
   1251c:	sub	sp, sp, #20
   12520:	mov	r9, r1
   12524:	movw	r1, #30548	; 0x7754
   12528:	mov	r4, r0
   1252c:	movt	r1, #1
   12530:	bl	16bd0 <flatcc_builder_create_string_str@@Base>
   12534:	movw	r1, #30554	; 0x775a
   12538:	mov	r5, r0
   1253c:	mov	r0, r4
   12540:	movt	r1, #1
   12544:	bl	16bd0 <flatcc_builder_create_string_str@@Base>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, #2
   12554:	bl	14f58 <flatcc_builder_start_table@@Base>
   12558:	mov	r8, #0
   1255c:	cmp	r5, #0
   12560:	mov	r7, #0
   12564:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   12568:	cmp	r0, #0
   1256c:	mov	r7, #0
   12570:	bne	125dc <create_monster_bottom_up@@Base+0xc8>
   12574:	mov	r0, r4
   12578:	mov	r1, #0
   1257c:	mov	r7, #0
   12580:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   1258c:	str	r5, [r0]
   12590:	mov	r0, r4
   12594:	mov	r1, #1
   12598:	mov	r2, #2
   1259c:	mov	r3, #2
   125a0:	bl	16228 <flatcc_builder_table_add@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   125ac:	mov	r1, #3
   125b0:	mov	r2, #0
   125b4:	strh	r1, [r0]
   125b8:	movw	r1, #31458	; 0x7ae2
   125bc:	mov	r0, r4
   125c0:	movt	r1, #1
   125c4:	bl	15858 <flatcc_builder_check_required@@Base>
   125c8:	cmp	r0, #0
   125cc:	beq	129f8 <create_monster_bottom_up@@Base+0x4e4>
   125d0:	mov	r0, r4
   125d4:	bl	158e8 <flatcc_builder_end_table@@Base>
   125d8:	mov	r7, r0
   125dc:	mov	r0, r4
   125e0:	mov	r1, #2
   125e4:	bl	14f58 <flatcc_builder_start_table@@Base>
   125e8:	cmp	r6, #0
   125ec:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   125f0:	cmp	r0, #0
   125f4:	bne	12660 <create_monster_bottom_up@@Base+0x14c>
   125f8:	mov	r0, r4
   125fc:	mov	r1, #0
   12600:	mov	r8, #0
   12604:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12610:	str	r6, [r0]
   12614:	mov	r0, r4
   12618:	mov	r1, #1
   1261c:	mov	r2, #2
   12620:	mov	r3, #2
   12624:	bl	16228 <flatcc_builder_table_add@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12630:	mov	r1, #5
   12634:	mov	r2, #0
   12638:	strh	r1, [r0]
   1263c:	movw	r1, #31458	; 0x7ae2
   12640:	mov	r0, r4
   12644:	movt	r1, #1
   12648:	bl	15858 <flatcc_builder_check_required@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	129f8 <create_monster_bottom_up@@Base+0x4e4>
   12654:	mov	r0, r4
   12658:	bl	158e8 <flatcc_builder_end_table@@Base>
   1265c:	mov	r8, r0
   12660:	movw	r1, #30558	; 0x775e
   12664:	mov	r0, r4
   12668:	movt	r1, #1
   1266c:	bl	16bd0 <flatcc_builder_create_string_str@@Base>
   12670:	mov	r6, r0
   12674:	movw	r0, #31448	; 0x7ad8
   12678:	mov	r1, #1
   1267c:	mov	r2, #10
   12680:	mov	r3, #1
   12684:	movt	r0, #1
   12688:	str	r1, [sp]
   1268c:	add	r1, sp, #8
   12690:	vldr	d16, [r0]
   12694:	movw	r0, #2312	; 0x908
   12698:	strh	r0, [sp, #16]
   1269c:	mvn	r0, #0
   126a0:	str	r0, [sp, #4]
   126a4:	mov	r0, r4
   126a8:	vstr	d16, [sp, #8]
   126ac:	bl	15aa0 <flatcc_builder_create_vector@@Base>
   126b0:	mov	sl, r0
   126b4:	mov	r0, r4
   126b8:	bl	14c18 <flatcc_builder_start_offset_vector@@Base>
   126bc:	cmp	r7, #0
   126c0:	beq	126d0 <create_monster_bottom_up@@Base+0x1bc>
   126c4:	mov	r0, r4
   126c8:	mov	r1, r7
   126cc:	bl	1465c <flatcc_builder_offset_vector_push@@Base>
   126d0:	cmp	r8, #0
   126d4:	beq	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d8:	mov	r0, r4
   126dc:	mov	r1, r8
   126e0:	bl	1465c <flatcc_builder_offset_vector_push@@Base>
   126e4:	mov	r0, r4
   126e8:	bl	14ce4 <flatcc_builder_end_offset_vector@@Base>
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #0
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	13edc <flatcc_builder_start_buffer@@Base>
   12704:	cmp	r9, #0
   12708:	beq	12860 <create_monster_bottom_up@@Base+0x34c>
   1270c:	cmp	r0, #0
   12710:	bne	12720 <create_monster_bottom_up@@Base+0x20c>
   12714:	mov	r0, r4
   12718:	mov	r1, #10
   1271c:	bl	14f58 <flatcc_builder_start_table@@Base>
   12720:	mov	r0, r4
   12724:	mov	r1, #0
   12728:	mov	r2, #12
   1272c:	mov	r3, #4
   12730:	bl	16228 <flatcc_builder_table_add@@Base>
   12734:	cmp	r0, #0
   12738:	beq	12754 <create_monster_bottom_up@@Base+0x240>
   1273c:	movw	r3, #0
   12740:	mov	r2, #1065353216	; 0x3f800000
   12744:	mov	r1, #1073741824	; 0x40000000
   12748:	movt	r3, #16448	; 0x4040
   1274c:	str	r2, [r0]
   12750:	stmib	r0, {r1, r3}
   12754:	mov	r0, r4
   12758:	mov	r1, #2
   1275c:	mov	r2, #2
   12760:	mov	r3, #2
   12764:	bl	16228 <flatcc_builder_table_add@@Base>
   12768:	cmp	r0, #0
   1276c:	movne	r1, #300	; 0x12c
   12770:	strhne	r1, [r0]
   12774:	cmp	r6, #0
   12778:	beq	12790 <create_monster_bottom_up@@Base+0x27c>
   1277c:	mov	r0, r4
   12780:	mov	r1, #3
   12784:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12788:	cmp	r0, #0
   1278c:	strne	r6, [r0]
   12790:	cmp	sl, #0
   12794:	beq	127ac <create_monster_bottom_up@@Base+0x298>
   12798:	mov	r0, r4
   1279c:	mov	r1, #5
   127a0:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   127a4:	cmp	r0, #0
   127a8:	strne	sl, [r0]
   127ac:	mov	r0, r4
   127b0:	mov	r1, #6
   127b4:	mov	r2, #1
   127b8:	mov	r3, #1
   127bc:	bl	16228 <flatcc_builder_table_add@@Base>
   127c0:	cmp	r0, #0
   127c4:	movne	r1, #0
   127c8:	strbne	r1, [r0]
   127cc:	cmp	r5, #0
   127d0:	beq	127e8 <create_monster_bottom_up@@Base+0x2d4>
   127d4:	mov	r0, r4
   127d8:	mov	r1, #7
   127dc:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   127e0:	cmp	r0, #0
   127e4:	strne	r5, [r0]
   127e8:	cmp	r8, #0
   127ec:	beq	1282c <create_monster_bottom_up@@Base+0x318>
   127f0:	mov	r0, r4
   127f4:	mov	r1, #8
   127f8:	mov	r2, #1
   127fc:	mov	r3, #1
   12800:	bl	16228 <flatcc_builder_table_add@@Base>
   12804:	cmp	r0, #0
   12808:	beq	1282c <create_monster_bottom_up@@Base+0x318>
   1280c:	mov	r5, r0
   12810:	mov	r0, r4
   12814:	mov	r1, #9
   12818:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   1281c:	cmp	r0, #0
   12820:	movne	r1, #1
   12824:	strbne	r1, [r5]
   12828:	strne	r8, [r0]
   1282c:	movw	r1, #31460	; 0x7ae4
   12830:	mov	r0, r4
   12834:	mov	r2, #0
   12838:	movt	r1, #1
   1283c:	bl	15858 <flatcc_builder_check_required@@Base>
   12840:	cmp	r0, #0
   12844:	beq	129d8 <create_monster_bottom_up@@Base+0x4c4>
   12848:	mov	r0, r4
   1284c:	bl	158e8 <flatcc_builder_end_table@@Base>
   12850:	mov	r1, r0
   12854:	mov	r0, r4
   12858:	bl	140cc <flatcc_builder_end_buffer@@Base>
   1285c:	b	12868 <create_monster_bottom_up@@Base+0x354>
   12860:	cmp	r0, #0
   12864:	beq	12874 <create_monster_bottom_up@@Base+0x360>
   12868:	mov	r0, #0
   1286c:	sub	sp, fp, #28
   12870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12874:	mov	r0, r4
   12878:	mov	r1, #10
   1287c:	bl	14f58 <flatcc_builder_start_table@@Base>
   12880:	mov	r9, #0
   12884:	cmp	r0, #0
   12888:	beq	12898 <create_monster_bottom_up@@Base+0x384>
   1288c:	mov	r0, r4
   12890:	mov	r1, r9
   12894:	b	12858 <create_monster_bottom_up@@Base+0x344>
   12898:	mov	r0, r4
   1289c:	mov	r1, #0
   128a0:	mov	r2, #12
   128a4:	mov	r3, #4
   128a8:	mov	r9, #0
   128ac:	bl	16228 <flatcc_builder_table_add@@Base>
   128b0:	cmp	r0, #0
   128b4:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   128b8:	movw	r3, #0
   128bc:	mov	r2, #1065353216	; 0x3f800000
   128c0:	cmp	r6, #0
   128c4:	mov	r1, #1073741824	; 0x40000000
   128c8:	movt	r3, #16448	; 0x4040
   128cc:	str	r2, [r0]
   128d0:	stmib	r0, {r1, r3}
   128d4:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   128d8:	mov	r0, r4
   128dc:	mov	r1, #3
   128e0:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   128e4:	cmp	r0, #0
   128e8:	strne	r6, [r0]
   128ec:	cmpne	sl, #0
   128f0:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   128f4:	mov	r0, r4
   128f8:	mov	r1, #5
   128fc:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12900:	cmp	r0, #0
   12904:	strne	sl, [r0]
   12908:	cmpne	r5, #0
   1290c:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12910:	mov	r0, r4
   12914:	mov	r1, #7
   12918:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   1291c:	cmp	r0, #0
   12920:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12924:	str	r5, [r0]
   12928:	mov	r0, r4
   1292c:	mov	r1, #9
   12930:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12934:	cmp	r0, #0
   12938:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   1293c:	str	r8, [r0]
   12940:	mov	r0, r4
   12944:	mov	r1, #2
   12948:	mov	r2, #2
   1294c:	mov	r3, #2
   12950:	bl	16228 <flatcc_builder_table_add@@Base>
   12954:	cmp	r0, #0
   12958:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   1295c:	mov	r1, #300	; 0x12c
   12960:	mov	r2, #1
   12964:	mov	r3, #1
   12968:	strh	r1, [r0]
   1296c:	mov	r0, r4
   12970:	mov	r1, #6
   12974:	bl	16228 <flatcc_builder_table_add@@Base>
   12978:	cmp	r0, #0
   1297c:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12980:	mov	r9, #0
   12984:	mov	r1, #8
   12988:	mov	r2, #1
   1298c:	mov	r3, #1
   12990:	mov	r5, #1
   12994:	strb	r9, [r0]
   12998:	mov	r0, r4
   1299c:	bl	16228 <flatcc_builder_table_add@@Base>
   129a0:	cmp	r0, #0
   129a4:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   129a8:	movw	r1, #31460	; 0x7ae4
   129ac:	strb	r5, [r0]
   129b0:	mov	r0, r4
   129b4:	mov	r2, #0
   129b8:	movt	r1, #1
   129bc:	bl	15858 <flatcc_builder_check_required@@Base>
   129c0:	cmp	r0, #0
   129c4:	beq	129d8 <create_monster_bottom_up@@Base+0x4c4>
   129c8:	mov	r0, r4
   129cc:	bl	158e8 <flatcc_builder_end_table@@Base>
   129d0:	mov	r9, r0
   129d4:	b	1288c <create_monster_bottom_up@@Base+0x378>
   129d8:	movw	r0, #31004	; 0x791c
   129dc:	movw	r1, #30835	; 0x7873
   129e0:	movw	r3, #31163	; 0x79bb
   129e4:	mov	r2, #50	; 0x32
   129e8:	movt	r0, #1
   129ec:	movt	r1, #1
   129f0:	movt	r3, #1
   129f4:	bl	12418 <__assert_fail@plt>
   129f8:	movw	r0, #30679	; 0x77d7
   129fc:	movw	r1, #30835	; 0x7873
   12a00:	movw	r3, #30927	; 0x78cf
   12a04:	mov	r2, #52	; 0x34
   12a08:	movt	r0, #1
   12a0c:	movt	r1, #1
   12a10:	movt	r3, #1
   12a14:	bl	12418 <__assert_fail@plt>

00012a18 <create_monster_top_down@@Base>:
   12a18:	push	{r4, r5, r6, sl, fp, lr}
   12a1c:	add	fp, sp, #16
   12a20:	sub	sp, sp, #24
   12a24:	mov	r4, r0
   12a28:	movw	r0, #31448	; 0x7ad8
   12a2c:	mov	r1, #0
   12a30:	mov	r2, #0
   12a34:	mov	r3, #0
   12a38:	movt	r0, #1
   12a3c:	vldr	d16, [r0]
   12a40:	movw	r0, #2312	; 0x908
   12a44:	strh	r0, [sp, #16]
   12a48:	mov	r0, r4
   12a4c:	vstr	d16, [sp, #8]
   12a50:	bl	13edc <flatcc_builder_start_buffer@@Base>
   12a54:	cmp	r0, #0
   12a58:	bne	12a68 <create_monster_top_down@@Base+0x50>
   12a5c:	mov	r0, r4
   12a60:	mov	r1, #10
   12a64:	bl	14f58 <flatcc_builder_start_table@@Base>
   12a68:	mov	r0, r4
   12a6c:	mov	r1, #0
   12a70:	mov	r2, #12
   12a74:	mov	r3, #4
   12a78:	bl	16228 <flatcc_builder_table_add@@Base>
   12a7c:	cmp	r0, #0
   12a80:	beq	12a9c <create_monster_top_down@@Base+0x84>
   12a84:	movw	r3, #0
   12a88:	mov	r2, #1065353216	; 0x3f800000
   12a8c:	mov	r1, #1073741824	; 0x40000000
   12a90:	movt	r3, #16448	; 0x4040
   12a94:	str	r2, [r0]
   12a98:	stmib	r0, {r1, r3}
   12a9c:	mov	r0, r4
   12aa0:	mov	r1, #2
   12aa4:	mov	r2, #2
   12aa8:	mov	r3, #2
   12aac:	bl	16228 <flatcc_builder_table_add@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	movne	r1, #300	; 0x12c
   12ab8:	strhne	r1, [r0]
   12abc:	movw	r1, #30558	; 0x775e
   12ac0:	mov	r0, r4
   12ac4:	movt	r1, #1
   12ac8:	bl	16bd0 <flatcc_builder_create_string_str@@Base>
   12acc:	cmp	r0, #0
   12ad0:	beq	12aec <create_monster_top_down@@Base+0xd4>
   12ad4:	mov	r5, r0
   12ad8:	mov	r0, r4
   12adc:	mov	r1, #3
   12ae0:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12ae4:	cmp	r0, #0
   12ae8:	strne	r5, [r0]
   12aec:	mvn	r0, #0
   12af0:	mov	r1, #1
   12af4:	mov	r2, #10
   12af8:	mov	r3, #1
   12afc:	str	r1, [sp]
   12b00:	str	r0, [sp, #4]
   12b04:	add	r1, sp, #8
   12b08:	mov	r0, r4
   12b0c:	bl	15aa0 <flatcc_builder_create_vector@@Base>
   12b10:	cmp	r0, #0
   12b14:	beq	12b30 <create_monster_top_down@@Base+0x118>
   12b18:	mov	r5, r0
   12b1c:	mov	r0, r4
   12b20:	mov	r1, #5
   12b24:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12b28:	cmp	r0, #0
   12b2c:	strne	r5, [r0]
   12b30:	mov	r0, r4
   12b34:	mov	r1, #6
   12b38:	mov	r2, #1
   12b3c:	mov	r3, #1
   12b40:	bl	16228 <flatcc_builder_table_add@@Base>
   12b44:	cmp	r0, #0
   12b48:	movne	r1, #0
   12b4c:	strbne	r1, [r0]
   12b50:	mov	r0, r4
   12b54:	bl	14c18 <flatcc_builder_start_offset_vector@@Base>
   12b58:	movw	r1, #30548	; 0x7754
   12b5c:	mov	r0, r4
   12b60:	movt	r1, #1
   12b64:	bl	16bd0 <flatcc_builder_create_string_str@@Base>
   12b68:	mov	r1, r0
   12b6c:	mov	r0, r4
   12b70:	mov	r2, #3
   12b74:	bl	12c64 <create_monster_top_down@@Base+0x24c>
   12b78:	movw	r1, #30554	; 0x775a
   12b7c:	mov	r0, r4
   12b80:	movt	r1, #1
   12b84:	bl	16bd0 <flatcc_builder_create_string_str@@Base>
   12b88:	mov	r1, r0
   12b8c:	mov	r0, r4
   12b90:	mov	r2, #5
   12b94:	bl	12c64 <create_monster_top_down@@Base+0x24c>
   12b98:	ldr	r6, [r0]
   12b9c:	mov	r0, r4
   12ba0:	bl	14ce4 <flatcc_builder_end_offset_vector@@Base>
   12ba4:	cmp	r0, #0
   12ba8:	beq	12bc4 <create_monster_top_down@@Base+0x1ac>
   12bac:	mov	r5, r0
   12bb0:	mov	r0, r4
   12bb4:	mov	r1, #7
   12bb8:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	strne	r5, [r0]
   12bc4:	cmp	r6, #0
   12bc8:	beq	12c08 <create_monster_top_down@@Base+0x1f0>
   12bcc:	mov	r0, r4
   12bd0:	mov	r1, #8
   12bd4:	mov	r2, #1
   12bd8:	mov	r3, #1
   12bdc:	bl	16228 <flatcc_builder_table_add@@Base>
   12be0:	cmp	r0, #0
   12be4:	beq	12c08 <create_monster_top_down@@Base+0x1f0>
   12be8:	mov	r5, r0
   12bec:	mov	r0, r4
   12bf0:	mov	r1, #9
   12bf4:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12bf8:	cmp	r0, #0
   12bfc:	movne	r1, #1
   12c00:	strbne	r1, [r5]
   12c04:	strne	r6, [r0]
   12c08:	movw	r1, #31460	; 0x7ae4
   12c0c:	mov	r0, r4
   12c10:	mov	r2, #0
   12c14:	movt	r1, #1
   12c18:	bl	15858 <flatcc_builder_check_required@@Base>
   12c1c:	cmp	r0, #0
   12c20:	beq	12c44 <create_monster_top_down@@Base+0x22c>
   12c24:	mov	r0, r4
   12c28:	bl	158e8 <flatcc_builder_end_table@@Base>
   12c2c:	mov	r1, r0
   12c30:	mov	r0, r4
   12c34:	bl	140cc <flatcc_builder_end_buffer@@Base>
   12c38:	mov	r0, #0
   12c3c:	sub	sp, fp, #16
   12c40:	pop	{r4, r5, r6, sl, fp, pc}
   12c44:	movw	r0, #31004	; 0x791c
   12c48:	movw	r1, #30835	; 0x7873
   12c4c:	movw	r3, #31163	; 0x79bb
   12c50:	mov	r2, #50	; 0x32
   12c54:	movt	r0, #1
   12c58:	movt	r1, #1
   12c5c:	movt	r3, #1
   12c60:	bl	12418 <__assert_fail@plt>
   12c64:	push	{r4, r5, r6, sl, fp, lr}
   12c68:	add	fp, sp, #16
   12c6c:	mov	r6, r1
   12c70:	mov	r1, #2
   12c74:	mov	r5, r2
   12c78:	mov	r4, r0
   12c7c:	bl	14f58 <flatcc_builder_start_table@@Base>
   12c80:	cmp	r6, #0
   12c84:	beq	12d0c <create_monster_top_down@@Base+0x2f4>
   12c88:	cmp	r0, #0
   12c8c:	bne	12d0c <create_monster_top_down@@Base+0x2f4>
   12c90:	mov	r0, r4
   12c94:	mov	r1, #0
   12c98:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   12c9c:	cmp	r0, #0
   12ca0:	beq	12d0c <create_monster_top_down@@Base+0x2f4>
   12ca4:	cmp	r5, #0
   12ca8:	str	r6, [r0]
   12cac:	beq	12cd0 <create_monster_top_down@@Base+0x2b8>
   12cb0:	mov	r0, r4
   12cb4:	mov	r1, #1
   12cb8:	mov	r2, #2
   12cbc:	mov	r3, #2
   12cc0:	bl	16228 <flatcc_builder_table_add@@Base>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12d0c <create_monster_top_down@@Base+0x2f4>
   12ccc:	strh	r5, [r0]
   12cd0:	movw	r1, #31458	; 0x7ae2
   12cd4:	mov	r0, r4
   12cd8:	mov	r2, #0
   12cdc:	movt	r1, #1
   12ce0:	bl	15858 <flatcc_builder_check_required@@Base>
   12ce4:	cmp	r0, #0
   12ce8:	beq	12d14 <create_monster_top_down@@Base+0x2fc>
   12cec:	mov	r0, r4
   12cf0:	bl	158e8 <flatcc_builder_end_table@@Base>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d0c <create_monster_top_down@@Base+0x2f4>
   12cfc:	mov	r1, r0
   12d00:	mov	r0, r4
   12d04:	pop	{r4, r5, r6, sl, fp, lr}
   12d08:	b	1465c <flatcc_builder_offset_vector_push@@Base>
   12d0c:	mov	r0, #0
   12d10:	pop	{r4, r5, r6, sl, fp, pc}
   12d14:	movw	r0, #30679	; 0x77d7
   12d18:	movw	r1, #30835	; 0x7873
   12d1c:	movw	r3, #30927	; 0x78cf
   12d20:	mov	r2, #52	; 0x34
   12d24:	movt	r0, #1
   12d28:	movt	r1, #1
   12d2c:	movt	r3, #1
   12d30:	bl	12418 <__assert_fail@plt>

00012d34 <access_monster_buffer@@Base>:
   12d34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d38:	add	fp, sp, #24
   12d3c:	cmp	r0, #0
   12d40:	beq	130b8 <access_monster_buffer@@Base+0x384>
   12d44:	mov	r4, r0
   12d48:	ldr	r0, [r0]
   12d4c:	ldr	r0, [r4, r0]!
   12d50:	mov	r5, r4
   12d54:	ldrh	r8, [r5, -r0]!
   12d58:	cmp	r8, #9
   12d5c:	bls	12d78 <access_monster_buffer@@Base+0x44>
   12d60:	ldrh	r0, [r5, #8]
   12d64:	cmp	r0, #0
   12d68:	beq	12d88 <access_monster_buffer@@Base+0x54>
   12d6c:	add	r0, r4, r0
   12d70:	ldrh	r1, [r0]
   12d74:	b	12d8c <access_monster_buffer@@Base+0x58>
   12d78:	mov	r1, #100	; 0x64
   12d7c:	cmp	r8, #8
   12d80:	bcs	12d8c <access_monster_buffer@@Base+0x58>
   12d84:	b	13058 <access_monster_buffer@@Base+0x324>
   12d88:	mov	r1, #100	; 0x64
   12d8c:	ldrh	r7, [r5, #6]
   12d90:	mov	r6, #0
   12d94:	cmp	r7, #0
   12d98:	addne	r0, r4, r7
   12d9c:	ldrhne	r2, [r0]
   12da0:	mov	r0, #0
   12da4:	moveq	r2, #150	; 0x96
   12da8:	cmp	r8, #12
   12dac:	bcc	12dd8 <access_monster_buffer@@Base+0xa4>
   12db0:	ldrh	r0, [r5, #10]
   12db4:	cmp	r0, #0
   12db8:	beq	12dd0 <access_monster_buffer@@Base+0x9c>
   12dbc:	mov	r3, r4
   12dc0:	ldr	r0, [r3, r0]!
   12dc4:	ldr	r6, [r3, r0]!
   12dc8:	add	r0, r3, #4
   12dcc:	b	12dd8 <access_monster_buffer@@Base+0xa4>
   12dd0:	mov	r0, #0
   12dd4:	mov	r6, #0
   12dd8:	cmp	r1, #300	; 0x12c
   12ddc:	bne	13058 <access_monster_buffer@@Base+0x324>
   12de0:	cmp	r2, #150	; 0x96
   12de4:	bne	130d8 <access_monster_buffer@@Base+0x3a4>
   12de8:	movw	r1, #30558	; 0x775e
   12dec:	movt	r1, #1
   12df0:	bl	12370 <strcmp@plt>
   12df4:	cmp	r0, #0
   12df8:	bne	130f8 <access_monster_buffer@@Base+0x3c4>
   12dfc:	cmp	r6, #3
   12e00:	bne	13118 <access_monster_buffer@@Base+0x3e4>
   12e04:	cmp	r8, #10
   12e08:	bcc	13038 <access_monster_buffer@@Base+0x304>
   12e0c:	ldrh	r0, [r5, #8]
   12e10:	cmp	r0, #0
   12e14:	beq	13038 <access_monster_buffer@@Base+0x304>
   12e18:	cmp	r7, #0
   12e1c:	bne	13138 <access_monster_buffer@@Base+0x404>
   12e20:	ldrh	r0, [r5, #4]
   12e24:	cmp	r0, #0
   12e28:	addsne	r0, r4, r0
   12e2c:	bne	12e50 <access_monster_buffer@@Base+0x11c>
   12e30:	movw	r0, #36584	; 0x8ee8
   12e34:	movw	r1, #30562	; 0x7762
   12e38:	movw	r3, #30636	; 0x77ac
   12e3c:	mov	r2, #232	; 0xe8
   12e40:	movt	r0, #1
   12e44:	movt	r1, #1
   12e48:	movt	r3, #1
   12e4c:	bl	12418 <__assert_fail@plt>
   12e50:	vldr	s0, [r0]
   12e54:	vmov.f32	s2, #112	; 0x3f800000  1.0
   12e58:	vcmp.f32	s0, s2
   12e5c:	vmrs	APSR_nzcv, fpscr
   12e60:	bne	13178 <access_monster_buffer@@Base+0x444>
   12e64:	vldr	s0, [r0, #4]
   12e68:	vmov.f32	s2, #0	; 0x40000000  2.0
   12e6c:	vcmp.f32	s0, s2
   12e70:	vmrs	APSR_nzcv, fpscr
   12e74:	bne	13198 <access_monster_buffer@@Base+0x464>
   12e78:	vldr	s0, [r0, #8]
   12e7c:	vmov.f32	s2, #8	; 0x40400000  3.0
   12e80:	vcmp.f32	s0, s2
   12e84:	vmrs	APSR_nzcv, fpscr
   12e88:	bne	131b8 <access_monster_buffer@@Base+0x484>
   12e8c:	cmp	r8, #16
   12e90:	bcc	13158 <access_monster_buffer@@Base+0x424>
   12e94:	ldrh	r1, [r5, #14]
   12e98:	cmp	r1, #0
   12e9c:	beq	13158 <access_monster_buffer@@Base+0x424>
   12ea0:	mov	r0, r4
   12ea4:	ldr	r1, [r0, r1]!
   12ea8:	ldr	r1, [r0, r1]!
   12eac:	cmp	r1, #10
   12eb0:	bne	131d8 <access_monster_buffer@@Base+0x4a4>
   12eb4:	add	r0, r0, #4
   12eb8:	ldrb	r0, [r0, #2]
   12ebc:	cmp	r0, #2
   12ec0:	bne	131f8 <access_monster_buffer@@Base+0x4c4>
   12ec4:	cmp	r8, #20
   12ec8:	bcc	13078 <access_monster_buffer@@Base+0x344>
   12ecc:	ldrh	r1, [r5, #18]
   12ed0:	cmp	r1, #0
   12ed4:	beq	13078 <access_monster_buffer@@Base+0x344>
   12ed8:	mov	r0, r4
   12edc:	ldr	r1, [r0, r1]!
   12ee0:	ldr	r1, [r0, r1]!
   12ee4:	cmp	r1, #2
   12ee8:	bne	13078 <access_monster_buffer@@Base+0x344>
   12eec:	add	r1, r0, #4
   12ef0:	ldr	r0, [r1, #4]!
   12ef4:	ldr	r0, [r1, r0]!
   12ef8:	mov	r2, r1
   12efc:	ldrh	r3, [r2, -r0]!
   12f00:	cmp	r3, #6
   12f04:	bcc	13098 <access_monster_buffer@@Base+0x364>
   12f08:	ldrh	r6, [r2, #4]
   12f0c:	mov	r0, #0
   12f10:	mov	r7, #0
   12f14:	cmp	r6, #0
   12f18:	movne	r0, r1
   12f1c:	ldrne	r6, [r0, r6]!
   12f20:	addne	r0, r0, r6
   12f24:	addne	r0, r0, #4
   12f28:	cmp	r3, #8
   12f2c:	bcc	12f40 <access_monster_buffer@@Base+0x20c>
   12f30:	ldrh	r2, [r2, #6]
   12f34:	cmp	r2, #0
   12f38:	addne	r1, r1, r2
   12f3c:	ldrhne	r7, [r1]
   12f40:	cmp	r0, #0
   12f44:	beq	13098 <access_monster_buffer@@Base+0x364>
   12f48:	movw	r1, #30554	; 0x775a
   12f4c:	movt	r1, #1
   12f50:	bl	12370 <strcmp@plt>
   12f54:	cmp	r0, #0
   12f58:	bne	13098 <access_monster_buffer@@Base+0x364>
   12f5c:	cmp	r7, #5
   12f60:	bne	13218 <access_monster_buffer@@Base+0x4e4>
   12f64:	cmp	r8, #22
   12f68:	bcc	13030 <access_monster_buffer@@Base+0x2fc>
   12f6c:	ldrh	r0, [r5, #20]
   12f70:	cmp	r0, #0
   12f74:	beq	13030 <access_monster_buffer@@Base+0x2fc>
   12f78:	ldrb	r0, [r4, r0]
   12f7c:	cmp	r0, #1
   12f80:	bne	13030 <access_monster_buffer@@Base+0x2fc>
   12f84:	cmp	r8, #24
   12f88:	bcc	12fa0 <access_monster_buffer@@Base+0x26c>
   12f8c:	ldrh	r0, [r5, #22]
   12f90:	cmp	r0, #0
   12f94:	ldrne	r0, [r4, r0]!
   12f98:	addsne	r1, r4, r0
   12f9c:	bne	12fc0 <access_monster_buffer@@Base+0x28c>
   12fa0:	movw	r0, #31242	; 0x7a0a
   12fa4:	movw	r1, #31280	; 0x7a30
   12fa8:	movw	r3, #31371	; 0x7a8b
   12fac:	mov	r2, #148	; 0x94
   12fb0:	movt	r0, #1
   12fb4:	movt	r1, #1
   12fb8:	movt	r3, #1
   12fbc:	bl	12418 <__assert_fail@plt>
   12fc0:	ldr	r0, [r1]
   12fc4:	mov	r2, r1
   12fc8:	mov	r4, #0
   12fcc:	ldrh	r3, [r2, -r0]!
   12fd0:	mov	r0, #0
   12fd4:	cmp	r3, #6
   12fd8:	bcc	13014 <access_monster_buffer@@Base+0x2e0>
   12fdc:	ldrh	r7, [r2, #4]
   12fe0:	mov	r0, #0
   12fe4:	mov	r4, #0
   12fe8:	cmp	r7, #0
   12fec:	movne	r0, r1
   12ff0:	ldrne	r7, [r0, r7]!
   12ff4:	addne	r0, r0, r7
   12ff8:	addne	r0, r0, #4
   12ffc:	cmp	r3, #8
   13000:	bcc	13014 <access_monster_buffer@@Base+0x2e0>
   13004:	ldrh	r2, [r2, #6]
   13008:	cmp	r2, #0
   1300c:	addne	r1, r1, r2
   13010:	ldrhne	r4, [r1]
   13014:	movw	r1, #30554	; 0x775a
   13018:	movt	r1, #1
   1301c:	bl	12370 <strcmp@plt>
   13020:	cmp	r0, #0
   13024:	bne	13238 <access_monster_buffer@@Base+0x504>
   13028:	cmp	r4, #5
   1302c:	bne	13258 <access_monster_buffer@@Base+0x524>
   13030:	mov	r0, #0
   13034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13038:	movw	r0, #36584	; 0x8ee8
   1303c:	movw	r1, #30562	; 0x7762
   13040:	movw	r3, #30636	; 0x77ac
   13044:	mov	r2, #227	; 0xe3
   13048:	movt	r0, #1
   1304c:	movt	r1, #1
   13050:	movt	r3, #1
   13054:	bl	12418 <__assert_fail@plt>
   13058:	movw	r0, #36584	; 0x8ee8
   1305c:	movw	r1, #30562	; 0x7762
   13060:	movw	r3, #30636	; 0x77ac
   13064:	mov	r2, #219	; 0xdb
   13068:	movt	r0, #1
   1306c:	movt	r1, #1
   13070:	movt	r3, #1
   13074:	bl	12418 <__assert_fail@plt>
   13078:	movw	r0, #36584	; 0x8ee8
   1307c:	movw	r1, #30562	; 0x7762
   13080:	movw	r3, #30636	; 0x77ac
   13084:	movw	r2, #271	; 0x10f
   13088:	movt	r0, #1
   1308c:	movt	r1, #1
   13090:	movt	r3, #1
   13094:	bl	12418 <__assert_fail@plt>
   13098:	movw	r0, #36584	; 0x8ee8
   1309c:	movw	r1, #30562	; 0x7762
   130a0:	movw	r3, #30636	; 0x77ac
   130a4:	movw	r2, #275	; 0x113
   130a8:	movt	r0, #1
   130ac:	movt	r1, #1
   130b0:	movt	r3, #1
   130b4:	bl	12418 <__assert_fail@plt>
   130b8:	movw	r0, #36584	; 0x8ee8
   130bc:	movw	r1, #30562	; 0x7762
   130c0:	movw	r3, #30636	; 0x77ac
   130c4:	mov	r2, #211	; 0xd3
   130c8:	movt	r0, #1
   130cc:	movt	r1, #1
   130d0:	movt	r3, #1
   130d4:	bl	12418 <__assert_fail@plt>
   130d8:	movw	r0, #36584	; 0x8ee8
   130dc:	movw	r1, #30562	; 0x7762
   130e0:	movw	r3, #30636	; 0x77ac
   130e4:	mov	r2, #221	; 0xdd
   130e8:	movt	r0, #1
   130ec:	movt	r1, #1
   130f0:	movt	r3, #1
   130f4:	bl	12418 <__assert_fail@plt>
   130f8:	movw	r0, #36584	; 0x8ee8
   130fc:	movw	r1, #30562	; 0x7762
   13100:	movw	r3, #30636	; 0x77ac
   13104:	mov	r2, #222	; 0xde
   13108:	movt	r0, #1
   1310c:	movt	r1, #1
   13110:	movt	r3, #1
   13114:	bl	12418 <__assert_fail@plt>
   13118:	movw	r0, #36584	; 0x8ee8
   1311c:	movw	r1, #30562	; 0x7762
   13120:	movw	r3, #30636	; 0x77ac
   13124:	mov	r2, #223	; 0xdf
   13128:	movt	r0, #1
   1312c:	movt	r1, #1
   13130:	movt	r3, #1
   13134:	bl	12418 <__assert_fail@plt>
   13138:	movw	r0, #36584	; 0x8ee8
   1313c:	movw	r1, #30562	; 0x7762
   13140:	movw	r3, #30636	; 0x77ac
   13144:	mov	r2, #228	; 0xe4
   13148:	movt	r0, #1
   1314c:	movt	r1, #1
   13150:	movt	r3, #1
   13154:	bl	12418 <__assert_fail@plt>
   13158:	movw	r0, #36584	; 0x8ee8
   1315c:	movw	r1, #30562	; 0x7762
   13160:	movw	r3, #30636	; 0x77ac
   13164:	movw	r2, #261	; 0x105
   13168:	movt	r0, #1
   1316c:	movt	r1, #1
   13170:	movt	r3, #1
   13174:	bl	12418 <__assert_fail@plt>
   13178:	movw	r0, #36584	; 0x8ee8
   1317c:	movw	r1, #30562	; 0x7762
   13180:	movw	r3, #30636	; 0x77ac
   13184:	mov	r2, #240	; 0xf0
   13188:	movt	r0, #1
   1318c:	movt	r1, #1
   13190:	movt	r3, #1
   13194:	bl	12418 <__assert_fail@plt>
   13198:	movw	r0, #36584	; 0x8ee8
   1319c:	movw	r1, #30562	; 0x7762
   131a0:	movw	r3, #30636	; 0x77ac
   131a4:	mov	r2, #241	; 0xf1
   131a8:	movt	r0, #1
   131ac:	movt	r1, #1
   131b0:	movt	r3, #1
   131b4:	bl	12418 <__assert_fail@plt>
   131b8:	movw	r0, #36584	; 0x8ee8
   131bc:	movw	r1, #30562	; 0x7762
   131c0:	movw	r3, #30636	; 0x77ac
   131c4:	mov	r2, #242	; 0xf2
   131c8:	movt	r0, #1
   131cc:	movt	r1, #1
   131d0:	movt	r3, #1
   131d4:	bl	12418 <__assert_fail@plt>
   131d8:	movw	r0, #36584	; 0x8ee8
   131dc:	movw	r1, #30562	; 0x7762
   131e0:	movw	r3, #30636	; 0x77ac
   131e4:	movw	r2, #263	; 0x107
   131e8:	movt	r0, #1
   131ec:	movt	r1, #1
   131f0:	movt	r3, #1
   131f4:	bl	12418 <__assert_fail@plt>
   131f8:	movw	r0, #36584	; 0x8ee8
   131fc:	movw	r1, #30562	; 0x7762
   13200:	movw	r3, #30636	; 0x77ac
   13204:	movw	r2, #267	; 0x10b
   13208:	movt	r0, #1
   1320c:	movt	r1, #1
   13210:	movt	r3, #1
   13214:	bl	12418 <__assert_fail@plt>
   13218:	movw	r0, #36584	; 0x8ee8
   1321c:	movw	r1, #30562	; 0x7762
   13220:	movw	r3, #30636	; 0x77ac
   13224:	mov	r2, #276	; 0x114
   13228:	movt	r0, #1
   1322c:	movt	r1, #1
   13230:	movt	r3, #1
   13234:	bl	12418 <__assert_fail@plt>
   13238:	movw	r0, #36584	; 0x8ee8
   1323c:	movw	r1, #30562	; 0x7762
   13240:	movw	r3, #30636	; 0x77ac
   13244:	movw	r2, #286	; 0x11e
   13248:	movt	r0, #1
   1324c:	movt	r1, #1
   13250:	movt	r3, #1
   13254:	bl	12418 <__assert_fail@plt>
   13258:	movw	r0, #36584	; 0x8ee8
   1325c:	movw	r1, #30562	; 0x7762
   13260:	movw	r3, #30636	; 0x77ac
   13264:	movw	r2, #287	; 0x11f
   13268:	movt	r0, #1
   1326c:	movt	r1, #1
   13270:	movt	r3, #1
   13274:	bl	12418 <__assert_fail@plt>

00013278 <main@@Base>:
   13278:	push	{r4, r5, r6, sl, fp, lr}
   1327c:	add	fp, sp, #16
   13280:	sub	sp, sp, #240	; 0xf0
   13284:	add	r4, sp, #8
   13288:	mov	r0, r4
   1328c:	bl	134e0 <flatcc_builder_init@@Base>
   13290:	mov	r0, r4
   13294:	mov	r1, #0
   13298:	bl	12514 <create_monster_bottom_up@@Base>
   1329c:	add	r5, sp, #4
   132a0:	mov	r0, r4
   132a4:	mov	r1, r5
   132a8:	bl	16fdc <flatcc_builder_finalize_aligned_buffer@@Base>
   132ac:	bl	170dc <flatcc_builder_aligned_free@@Base>
   132b0:	mov	r0, r4
   132b4:	bl	13670 <flatcc_builder_reset@@Base>
   132b8:	mov	r0, r4
   132bc:	mov	r1, #1
   132c0:	bl	12514 <create_monster_bottom_up@@Base>
   132c4:	mov	r0, r4
   132c8:	mov	r1, r5
   132cc:	bl	16fdc <flatcc_builder_finalize_aligned_buffer@@Base>
   132d0:	mov	r6, r0
   132d4:	bl	12d34 <access_monster_buffer@@Base>
   132d8:	mov	r0, r6
   132dc:	bl	170dc <flatcc_builder_aligned_free@@Base>
   132e0:	mov	r0, r4
   132e4:	bl	13670 <flatcc_builder_reset@@Base>
   132e8:	mov	r0, r4
   132ec:	bl	12a18 <create_monster_top_down@@Base>
   132f0:	mov	r0, r4
   132f4:	mov	r1, r5
   132f8:	bl	16f4c <flatcc_builder_finalize_buffer@@Base>
   132fc:	mov	r5, r0
   13300:	bl	12d34 <access_monster_buffer@@Base>
   13304:	mov	r0, r5
   13308:	bl	1237c <free@plt>
   1330c:	mov	r0, r4
   13310:	bl	1367c <flatcc_builder_clear@@Base>
   13314:	movw	r0, #31472	; 0x7af0
   13318:	movt	r0, #1
   1331c:	bl	123ac <puts@plt>
   13320:	mov	r0, #0
   13324:	sub	sp, fp, #16
   13328:	pop	{r4, r5, r6, sl, fp, pc}

0001332c <flatcc_builder_default_alloc@@Base>:
   1332c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13330:	add	fp, sp, #24
   13334:	mov	r4, r1
   13338:	cmp	r2, #0
   1333c:	beq	13384 <flatcc_builder_default_alloc@@Base+0x58>
   13340:	ldr	r0, [fp, #8]
   13344:	mov	r8, r3
   13348:	sub	r1, r0, #1
   1334c:	cmp	r1, #6
   13350:	bhi	133ac <flatcc_builder_default_alloc@@Base+0x80>
   13354:	add	r3, pc, #4
   13358:	mov	r0, #256	; 0x100
   1335c:	ldr	pc, [r3, r1, lsl #2]
   13360:	andeq	r3, r1, r0, asr #7
   13364:	andeq	r3, r1, ip, lsr #7
   13368:	andeq	r3, r1, ip, lsr #7
   1336c:	andeq	r3, r1, ip, ror r3
   13370:			; <UNDEFINED> instruction: 0x000133b4
   13374:	andeq	r3, r1, ip, lsr #7
   13378:			; <UNDEFINED> instruction: 0x000133bc
   1337c:	mov	r0, #288	; 0x120
   13380:	b	133c0 <flatcc_builder_default_alloc@@Base+0x94>
   13384:	ldr	r0, [r4]
   13388:	cmp	r0, #0
   1338c:	beq	133a4 <flatcc_builder_default_alloc@@Base+0x78>
   13390:	bl	1237c <free@plt>
   13394:	mov	r6, #0
   13398:	str	r6, [r4]
   1339c:	str	r6, [r4, #4]
   133a0:	b	1341c <flatcc_builder_default_alloc@@Base+0xf0>
   133a4:	mov	r6, #0
   133a8:	b	1341c <flatcc_builder_default_alloc@@Base+0xf0>
   133ac:	mov	r0, #32
   133b0:	b	133c0 <flatcc_builder_default_alloc@@Base+0x94>
   133b4:	mov	r0, r2
   133b8:	b	133c0 <flatcc_builder_default_alloc@@Base+0x94>
   133bc:	mov	r0, #64	; 0x40
   133c0:	mov	r7, r0
   133c4:	lsl	r0, r0, #1
   133c8:	cmp	r7, r2
   133cc:	bcc	133c0 <flatcc_builder_default_alloc@@Base+0x94>
   133d0:	ldr	r0, [r4, #4]
   133d4:	mov	r6, #0
   133d8:	cmp	r0, r2
   133dc:	lsrcs	r0, r0, #1
   133e0:	cmpcs	r0, r7
   133e4:	bcs	1341c <flatcc_builder_default_alloc@@Base+0xf0>
   133e8:	ldr	r0, [r4]
   133ec:	mov	r1, r7
   133f0:	bl	123a0 <realloc@plt>
   133f4:	cmp	r0, #0
   133f8:	beq	13418 <flatcc_builder_default_alloc@@Base+0xec>
   133fc:	cmp	r8, #0
   13400:	mov	r5, r0
   13404:	ldrne	r1, [r4, #4]
   13408:	cmpne	r7, r1
   1340c:	bhi	13424 <flatcc_builder_default_alloc@@Base+0xf8>
   13410:	stm	r4, {r5, r7}
   13414:	b	1341c <flatcc_builder_default_alloc@@Base+0xf0>
   13418:	mvn	r6, #0
   1341c:	mov	r0, r6
   13420:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13424:	add	r0, r5, r1
   13428:	sub	r2, r7, r1
   1342c:	mov	r1, #0
   13430:	bl	123f4 <memset@plt>
   13434:	b	13410 <flatcc_builder_default_alloc@@Base+0xe4>

00013438 <flatcc_builder_flush_vtable_cache@@Base>:
   13438:	push	{r4, r5, fp, lr}
   1343c:	add	fp, sp, #8
   13440:	mov	r4, r0
   13444:	ldr	r0, [r0, #116]	; 0x74
   13448:	cmp	r0, #0
   1344c:	popeq	{r4, r5, fp, pc}
   13450:	ldr	r0, [r4, #92]	; 0x5c
   13454:	ldr	r2, [r4, #96]	; 0x60
   13458:	mov	r1, #0
   1345c:	mov	r5, #0
   13460:	bl	123f4 <memset@plt>
   13464:	mov	r0, #16
   13468:	str	r5, [r4, #120]	; 0x78
   1346c:	str	r0, [r4, #124]	; 0x7c
   13470:	pop	{r4, r5, fp, pc}

00013474 <flatcc_builder_custom_init@@Base>:
   13474:	push	{r4, r5, r6, r7, fp, lr}
   13478:	add	fp, sp, #16
   1347c:	mov	r6, r2
   13480:	mov	r7, r1
   13484:	mov	r1, #0
   13488:	mov	r2, #232	; 0xe8
   1348c:	mov	r5, r3
   13490:	mov	r4, r0
   13494:	bl	123f4 <memset@plt>
   13498:	ldr	r0, [fp, #8]
   1349c:	cmp	r7, #0
   134a0:	bne	134b8 <flatcc_builder_custom_init@@Base+0x44>
   134a4:	movw	r7, #29420	; 0x72ec
   134a8:	mov	r1, #1
   134ac:	add	r6, r4, #188	; 0xbc
   134b0:	movt	r7, #1
   134b4:	str	r1, [r4, #184]	; 0xb8
   134b8:	movw	r1, #13100	; 0x332c
   134bc:	cmp	r5, #0
   134c0:	str	r6, [r4, #36]	; 0x24
   134c4:	str	r0, [r4, #40]	; 0x28
   134c8:	mov	r0, #0
   134cc:	str	r7, [r4, #44]	; 0x2c
   134d0:	movt	r1, #1
   134d4:	movne	r1, r5
   134d8:	str	r1, [r4, #48]	; 0x30
   134dc:	pop	{r4, r5, r6, r7, fp, pc}

000134e0 <flatcc_builder_init@@Base>:
   134e0:	push	{r4, r5, fp, lr}
   134e4:	add	fp, sp, #8
   134e8:	mov	r1, #0
   134ec:	mov	r2, #232	; 0xe8
   134f0:	mov	r4, r0
   134f4:	mov	r5, #0
   134f8:	bl	123f4 <memset@plt>
   134fc:	mov	r0, #1
   13500:	movw	r2, #29420	; 0x72ec
   13504:	add	r1, r4, #188	; 0xbc
   13508:	str	r0, [r4, #184]	; 0xb8
   1350c:	movw	r0, #13100	; 0x332c
   13510:	movt	r2, #1
   13514:	str	r1, [r4, #36]	; 0x24
   13518:	str	r5, [r4, #40]	; 0x28
   1351c:	movt	r0, #1
   13520:	str	r2, [r4, #44]	; 0x2c
   13524:	str	r0, [r4, #48]	; 0x30
   13528:	mov	r0, #0
   1352c:	pop	{r4, r5, fp, pc}

00013530 <flatcc_builder_custom_reset@@Base>:
   13530:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13534:	add	fp, sp, #24
   13538:	sub	sp, sp, #8
   1353c:	mov	r9, r2
   13540:	mov	r8, r1
   13544:	mov	r4, r0
   13548:	add	r7, r0, #52	; 0x34
   1354c:	mov	r5, #0
   13550:	ldr	r0, [r7]
   13554:	cmp	r0, #0
   13558:	beq	135a0 <flatcc_builder_custom_reset@@Base+0x70>
   1355c:	cmp	r9, #0
   13560:	cmpne	r5, #5
   13564:	beq	13590 <flatcc_builder_custom_reset@@Base+0x60>
   13568:	ldr	r0, [r4, #40]	; 0x28
   1356c:	ldr	r6, [r4, #48]	; 0x30
   13570:	mov	r1, r7
   13574:	mov	r2, #1
   13578:	mov	r3, #1
   1357c:	str	r5, [sp]
   13580:	blx	r6
   13584:	cmp	r0, #0
   13588:	bne	13640 <flatcc_builder_custom_reset@@Base+0x110>
   1358c:	ldr	r0, [r7]
   13590:	ldr	r2, [r7, #4]
   13594:	mov	r1, #0
   13598:	bl	123f4 <memset@plt>
   1359c:	b	135ac <flatcc_builder_custom_reset@@Base+0x7c>
   135a0:	ldr	r0, [r7, #4]
   135a4:	cmp	r0, #0
   135a8:	bne	13650 <flatcc_builder_custom_reset@@Base+0x120>
   135ac:	add	r5, r5, #1
   135b0:	add	r7, r7, #8
   135b4:	cmp	r5, #8
   135b8:	bcc	13550 <flatcc_builder_custom_reset@@Base+0x20>
   135bc:	mov	r0, #0
   135c0:	vmov.i32	q8, #0	; 0x00000000
   135c4:	mov	r5, #0
   135c8:	str	r0, [r4, #120]	; 0x78
   135cc:	ldr	r1, [r4, #124]	; 0x7c
   135d0:	cmp	r1, #0
   135d4:	movne	r1, #16
   135d8:	strne	r1, [r4, #124]	; 0x7c
   135dc:	add	r1, r4, #148	; 0x94
   135e0:	strh	r0, [r4, #128]	; 0x80
   135e4:	str	r0, [r4, #136]	; 0x88
   135e8:	str	r0, [r4, #140]	; 0x8c
   135ec:	str	r0, [r4, #32]
   135f0:	cmp	r8, #0
   135f4:	vst1.32	{d16-d17}, [r1]
   135f8:	ldr	r2, [r4, #60]	; 0x3c
   135fc:	ldr	r1, [r4, #52]	; 0x34
   13600:	ldr	r3, [r4, #76]	; 0x4c
   13604:	str	r2, [r4, #16]
   13608:	str	r0, [r4, #20]
   1360c:	str	r0, [r4, #24]
   13610:	movne	r0, #0
   13614:	str	r3, [r4]
   13618:	str	r1, [r4, #4]
   1361c:	strne	r0, [r4, #172]	; 0xac
   13620:	strne	r0, [r4, #176]	; 0xb0
   13624:	strne	r0, [r4, #180]	; 0xb4
   13628:	ldr	r0, [r4, #184]	; 0xb8
   1362c:	cmp	r0, #0
   13630:	beq	13644 <flatcc_builder_custom_reset@@Base+0x114>
   13634:	add	r0, r4, #188	; 0xbc
   13638:	bl	171bc <flatcc_emitter_reset@@Base>
   1363c:	b	13644 <flatcc_builder_custom_reset@@Base+0x114>
   13640:	mvn	r5, #0
   13644:	mov	r0, r5
   13648:	sub	sp, fp, #24
   1364c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13650:	movw	r0, #32048	; 0x7d30
   13654:	movw	r1, #32066	; 0x7d42
   13658:	movw	r3, #32136	; 0x7d88
   1365c:	movw	r2, #434	; 0x1b2
   13660:	movt	r0, #1
   13664:	movt	r1, #1
   13668:	movt	r3, #1
   1366c:	bl	12418 <__assert_fail@plt>

00013670 <flatcc_builder_reset@@Base>:
   13670:	mov	r1, #0
   13674:	mov	r2, #0
   13678:	b	13530 <flatcc_builder_custom_reset@@Base>

0001367c <flatcc_builder_clear@@Base>:
   1367c:	push	{r4, r5, r6, r7, fp, lr}
   13680:	add	fp, sp, #16
   13684:	sub	sp, sp, #8
   13688:	mov	r7, r0
   1368c:	add	r5, r0, #52	; 0x34
   13690:	mov	r6, #0
   13694:	ldr	r0, [r7, #40]	; 0x28
   13698:	ldr	r4, [r7, #48]	; 0x30
   1369c:	mov	r1, r5
   136a0:	mov	r2, #0
   136a4:	mov	r3, #0
   136a8:	str	r6, [sp]
   136ac:	blx	r4
   136b0:	add	r6, r6, #1
   136b4:	add	r5, r5, #8
   136b8:	cmp	r6, #8
   136bc:	bne	13694 <flatcc_builder_clear@@Base+0x18>
   136c0:	ldr	r0, [r7, #184]	; 0xb8
   136c4:	cmp	r0, #0
   136c8:	beq	136d4 <flatcc_builder_clear@@Base+0x58>
   136cc:	add	r0, r7, #188	; 0xbc
   136d0:	bl	17288 <flatcc_emitter_clear@@Base>
   136d4:	mov	r0, r7
   136d8:	mov	r1, #0
   136dc:	mov	r2, #232	; 0xe8
   136e0:	sub	sp, fp, #16
   136e4:	pop	{r4, r5, r6, r7, fp, lr}
   136e8:	b	123f4 <memset@plt>

000136ec <flatcc_builder_enter_user_frame_ptr@@Base>:
   136ec:	push	{r4, r5, r6, r7, fp, lr}
   136f0:	add	fp, sp, #16
   136f4:	sub	sp, sp, #8
   136f8:	mov	r4, r0
   136fc:	ldr	r0, [r0, #112]	; 0x70
   13700:	add	r1, r1, #7
   13704:	ldr	r7, [r4, #228]	; 0xe4
   13708:	bic	r5, r1, #3
   1370c:	add	r6, r4, #108	; 0x6c
   13710:	add	r2, r7, r5
   13714:	cmp	r2, r0
   13718:	bls	13740 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1371c:	ldr	r0, [r4, #40]	; 0x28
   13720:	ldr	ip, [r4, #48]	; 0x30
   13724:	mov	r1, #7
   13728:	mov	r3, #0
   1372c:	str	r1, [sp]
   13730:	mov	r1, r6
   13734:	blx	ip
   13738:	cmp	r0, #0
   1373c:	bne	1378c <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13740:	ldr	r0, [r6]
   13744:	adds	r6, r0, r7
   13748:	beq	1377c <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   1374c:	mov	r0, r6
   13750:	mov	r1, #0
   13754:	mov	r2, r5
   13758:	bl	123f4 <memset@plt>
   1375c:	ldr	r0, [r4, #224]	; 0xe0
   13760:	str	r0, [r6], #4
   13764:	ldr	r0, [r4, #228]	; 0xe4
   13768:	add	r1, r0, #4
   1376c:	add	r0, r0, r5
   13770:	str	r1, [r4, #224]	; 0xe0
   13774:	str	r0, [r4, #228]	; 0xe4
   13778:	b	13780 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   1377c:	mov	r6, #0
   13780:	mov	r0, r6
   13784:	sub	sp, fp, #16
   13788:	pop	{r4, r5, r6, r7, fp, pc}
   1378c:	movw	r0, #36584	; 0x8ee8
   13790:	movw	r1, #32066	; 0x7d42
   13794:	movw	r3, #36130	; 0x8d22
   13798:	mov	r2, #308	; 0x134
   1379c:	movt	r0, #1
   137a0:	movt	r1, #1
   137a4:	movt	r3, #1
   137a8:	bl	12418 <__assert_fail@plt>

000137ac <flatcc_builder_enter_user_frame@@Base>:
   137ac:	push	{r4, r5, r6, r7, fp, lr}
   137b0:	add	fp, sp, #16
   137b4:	sub	sp, sp, #8
   137b8:	mov	r4, r0
   137bc:	ldr	r0, [r0, #112]	; 0x70
   137c0:	add	r1, r1, #7
   137c4:	ldr	r7, [r4, #228]	; 0xe4
   137c8:	bic	r5, r1, #3
   137cc:	add	r6, r4, #108	; 0x6c
   137d0:	add	r2, r7, r5
   137d4:	cmp	r2, r0
   137d8:	bls	13800 <flatcc_builder_enter_user_frame@@Base+0x54>
   137dc:	ldr	r0, [r4, #40]	; 0x28
   137e0:	ldr	ip, [r4, #48]	; 0x30
   137e4:	mov	r1, #7
   137e8:	mov	r3, #0
   137ec:	str	r1, [sp]
   137f0:	mov	r1, r6
   137f4:	blx	ip
   137f8:	cmp	r0, #0
   137fc:	bne	13848 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13800:	ldr	r0, [r6]
   13804:	adds	r6, r0, r7
   13808:	beq	1383c <flatcc_builder_enter_user_frame@@Base+0x90>
   1380c:	mov	r0, r6
   13810:	mov	r1, #0
   13814:	mov	r2, r5
   13818:	bl	123f4 <memset@plt>
   1381c:	ldr	r0, [r4, #224]	; 0xe0
   13820:	str	r0, [r6]
   13824:	ldr	r1, [r4, #228]	; 0xe4
   13828:	add	r0, r1, #4
   1382c:	add	r1, r1, r5
   13830:	str	r0, [r4, #224]	; 0xe0
   13834:	str	r1, [r4, #228]	; 0xe4
   13838:	b	13840 <flatcc_builder_enter_user_frame@@Base+0x94>
   1383c:	mov	r0, #0
   13840:	sub	sp, fp, #16
   13844:	pop	{r4, r5, r6, r7, fp, pc}
   13848:	movw	r0, #36584	; 0x8ee8
   1384c:	movw	r1, #32066	; 0x7d42
   13850:	movw	r3, #36130	; 0x8d22
   13854:	mov	r2, #308	; 0x134
   13858:	movt	r0, #1
   1385c:	movt	r1, #1
   13860:	movt	r3, #1
   13864:	bl	12418 <__assert_fail@plt>

00013868 <flatcc_builder_exit_user_frame@@Base>:
   13868:	ldr	r1, [r0, #224]	; 0xe0
   1386c:	cmp	r1, #0
   13870:	subne	r2, r1, #4
   13874:	strne	r2, [r0, #228]	; 0xe4
   13878:	ldrne	r2, [r0, #108]	; 0x6c
   1387c:	addne	r1, r2, r1
   13880:	ldrne	r1, [r1, #-4]
   13884:	strne	r1, [r0, #224]	; 0xe0
   13888:	movne	r0, r1
   1388c:	bxne	lr
   13890:	push	{fp, lr}
   13894:	mov	fp, sp
   13898:	movw	r0, #32198	; 0x7dc6
   1389c:	movw	r1, #32066	; 0x7d42
   138a0:	movw	r3, #32223	; 0x7ddf
   138a4:	movw	r2, #542	; 0x21e
   138a8:	movt	r0, #1
   138ac:	movt	r1, #1
   138b0:	movt	r3, #1
   138b4:	bl	12418 <__assert_fail@plt>

000138b8 <flatcc_builder_exit_user_frame_at@@Base>:
   138b8:	ldr	r2, [r0, #224]	; 0xe0
   138bc:	cmp	r2, r1
   138c0:	bcc	138cc <flatcc_builder_exit_user_frame_at@@Base+0x14>
   138c4:	str	r1, [r0, #224]	; 0xe0
   138c8:	b	13868 <flatcc_builder_exit_user_frame@@Base>
   138cc:	push	{fp, lr}
   138d0:	mov	fp, sp
   138d4:	movw	r0, #32281	; 0x7e19
   138d8:	movw	r1, #32066	; 0x7d42
   138dc:	movw	r3, #32312	; 0x7e38
   138e0:	movw	r2, #551	; 0x227
   138e4:	movt	r0, #1
   138e8:	movt	r1, #1
   138ec:	movt	r3, #1
   138f0:	bl	12418 <__assert_fail@plt>

000138f4 <flatcc_builder_get_current_user_frame@@Base>:
   138f4:	ldr	r0, [r0, #224]	; 0xe0
   138f8:	bx	lr

000138fc <flatcc_builder_get_user_frame_ptr@@Base>:
   138fc:	ldr	r0, [r0, #108]	; 0x6c
   13900:	add	r0, r0, r1
   13904:	bx	lr

00013908 <flatcc_builder_embed_buffer@@Base>:
   13908:	push	{r4, r5, r6, r7, fp, lr}
   1390c:	add	fp, sp, #16
   13910:	sub	sp, sp, #88	; 0x58
   13914:	mov	r4, r0
   13918:	ldr	r0, [fp, #8]
   1391c:	mov	r5, r3
   13920:	mov	r7, r2
   13924:	mov	r2, r1
   13928:	sub	r1, fp, #18
   1392c:	strh	r0, [fp, #-18]	; 0xffffffee
   13930:	mov	r0, r4
   13934:	ldr	r3, [r4, #152]	; 0x98
   13938:	cmp	r3, #0
   1393c:	movwne	r3, #1
   13940:	bl	13a78 <flatcc_builder_embed_buffer@@Base+0x170>
   13944:	ldr	r1, [fp, #12]
   13948:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1394c:	ldr	r0, [r4, #136]	; 0x88
   13950:	mov	r2, #0
   13954:	str	r2, [sp, #8]
   13958:	str	r2, [sp, #12]
   1395c:	and	r1, r1, #2
   13960:	sub	r3, r3, #1
   13964:	add	r1, r5, r1, lsl #1
   13968:	sub	r1, r0, r1
   1396c:	and	r3, r1, r3
   13970:	add	r1, r3, r5
   13974:	str	r1, [fp, #-24]	; 0xffffffe8
   13978:	ldr	r1, [r4, #152]	; 0x98
   1397c:	cmp	r1, #0
   13980:	mov	r1, #0
   13984:	beq	139a4 <flatcc_builder_embed_buffer@@Base+0x9c>
   13988:	sub	r1, fp, #24
   1398c:	mov	r2, #1
   13990:	str	r1, [sp, #16]
   13994:	mov	r1, #4
   13998:	str	r1, [sp, #8]
   1399c:	str	r1, [sp, #20]
   139a0:	str	r2, [sp, #12]
   139a4:	cmp	r5, #0
   139a8:	beq	139cc <flatcc_builder_embed_buffer@@Base+0xc4>
   139ac:	add	r6, sp, #8
   139b0:	add	r1, r1, r5
   139b4:	add	r6, r6, r2, lsl #3
   139b8:	add	r2, r2, #1
   139bc:	str	r1, [sp, #8]
   139c0:	str	r7, [r6, #8]
   139c4:	str	r5, [r6, #12]
   139c8:	str	r2, [sp, #12]
   139cc:	cmp	r3, #0
   139d0:	beq	139fc <flatcc_builder_embed_buffer@@Base+0xf4>
   139d4:	add	r7, sp, #8
   139d8:	movw	r6, #31536	; 0x7b30
   139dc:	add	r1, r1, r3
   139e0:	add	r7, r7, r2, lsl #3
   139e4:	add	r2, r2, #1
   139e8:	movt	r6, #1
   139ec:	str	r1, [sp, #8]
   139f0:	str	r6, [r7, #8]
   139f4:	str	r3, [r7, #12]
   139f8:	str	r2, [sp, #12]
   139fc:	cmp	r1, #0
   13a00:	ble	13a58 <flatcc_builder_embed_buffer@@Base+0x150>
   13a04:	sub	r5, r0, r1
   13a08:	ldr	r0, [r4, #36]	; 0x24
   13a0c:	ldr	r7, [r4, #44]	; 0x2c
   13a10:	str	r1, [sp]
   13a14:	add	r1, sp, #8
   13a18:	add	r1, r1, #8
   13a1c:	mov	r3, r5
   13a20:	blx	r7
   13a24:	cmp	r0, #0
   13a28:	streq	r5, [r4, #136]	; 0x88
   13a2c:	moveq	r0, r5
   13a30:	subeq	sp, fp, #16
   13a34:	popeq	{r4, r5, r6, r7, fp, pc}
   13a38:	movw	r0, #36584	; 0x8ee8
   13a3c:	movw	r1, #32066	; 0x7d42
   13a40:	movw	r3, #36263	; 0x8da7
   13a44:	movw	r2, #651	; 0x28b
   13a48:	movt	r0, #1
   13a4c:	movt	r1, #1
   13a50:	movt	r3, #1
   13a54:	bl	12418 <__assert_fail@plt>
   13a58:	movw	r0, #36584	; 0x8ee8
   13a5c:	movw	r1, #32066	; 0x7d42
   13a60:	movw	r3, #36263	; 0x8da7
   13a64:	movw	r2, #647	; 0x287
   13a68:	movt	r0, #1
   13a6c:	movt	r1, #1
   13a70:	movt	r3, #1
   13a74:	bl	12418 <__assert_fail@plt>
   13a78:	push	{r4, sl, fp, lr}
   13a7c:	add	fp, sp, #8
   13a80:	sub	sp, sp, #80	; 0x50
   13a84:	cmp	r2, #0
   13a88:	bne	13a98 <flatcc_builder_embed_buffer@@Base+0x190>
   13a8c:	ldrh	r2, [r0, #132]	; 0x84
   13a90:	cmp	r2, #0
   13a94:	movweq	r2, #1
   13a98:	ldrh	r4, [r1]
   13a9c:	cmp	r4, #4
   13aa0:	movwcc	r4, #4
   13aa4:	cmpcs	r4, r2
   13aa8:	bcs	13ab8 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13aac:	cmp	r4, r2
   13ab0:	movcc	r4, r2
   13ab4:	strh	r4, [r1]
   13ab8:	cmp	r3, #0
   13abc:	bne	13b30 <flatcc_builder_embed_buffer@@Base+0x228>
   13ac0:	ldr	r4, [r0, #140]	; 0x8c
   13ac4:	sub	r1, r2, #1
   13ac8:	ands	r1, r4, r1
   13acc:	beq	13b30 <flatcc_builder_embed_buffer@@Base+0x228>
   13ad0:	movw	r2, #31536	; 0x7b30
   13ad4:	cmn	r1, #1
   13ad8:	movt	r2, #1
   13adc:	str	r2, [sp, #16]
   13ae0:	mov	r2, #1
   13ae4:	str	r1, [sp, #8]
   13ae8:	str	r1, [sp, #20]
   13aec:	str	r2, [sp, #12]
   13af0:	add	r2, r1, r4
   13af4:	str	r2, [r0, #140]	; 0x8c
   13af8:	ble	13b38 <flatcc_builder_embed_buffer@@Base+0x230>
   13afc:	ldr	r2, [r0, #36]	; 0x24
   13b00:	ldr	ip, [r0, #44]	; 0x2c
   13b04:	add	r0, sp, #8
   13b08:	str	r1, [sp]
   13b0c:	mov	r3, r4
   13b10:	add	r1, r0, #8
   13b14:	mov	r0, r2
   13b18:	mov	r2, #1
   13b1c:	blx	ip
   13b20:	cmp	r0, #0
   13b24:	bne	13b58 <flatcc_builder_embed_buffer@@Base+0x250>
   13b28:	cmn	r4, #1
   13b2c:	beq	13b78 <flatcc_builder_embed_buffer@@Base+0x270>
   13b30:	sub	sp, fp, #8
   13b34:	pop	{r4, sl, fp, pc}
   13b38:	movw	r0, #36584	; 0x8ee8
   13b3c:	movw	r1, #32066	; 0x7d42
   13b40:	movw	r3, #36451	; 0x8e63
   13b44:	movw	r2, #673	; 0x2a1
   13b48:	movt	r0, #1
   13b4c:	movt	r1, #1
   13b50:	movt	r3, #1
   13b54:	bl	12418 <__assert_fail@plt>
   13b58:	movw	r0, #36584	; 0x8ee8
   13b5c:	movw	r1, #32066	; 0x7d42
   13b60:	movw	r3, #36451	; 0x8e63
   13b64:	movw	r2, #677	; 0x2a5
   13b68:	movt	r0, #1
   13b6c:	movt	r1, #1
   13b70:	movt	r3, #1
   13b74:	bl	12418 <__assert_fail@plt>
   13b78:	movw	r0, #36584	; 0x8ee8
   13b7c:	movw	r1, #32066	; 0x7d42
   13b80:	movw	r3, #36197	; 0x8d65
   13b84:	movw	r2, #702	; 0x2be
   13b88:	movt	r0, #1
   13b8c:	movt	r1, #1
   13b90:	movt	r3, #1
   13b94:	bl	12418 <__assert_fail@plt>

00013b98 <flatcc_builder_create_buffer@@Base>:
   13b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b9c:	add	fp, sp, #28
   13ba0:	sub	sp, sp, #100	; 0x64
   13ba4:	ldr	r8, [fp, #12]
   13ba8:	mov	r4, r0
   13bac:	ldr	r0, [fp, #8]
   13bb0:	mov	r7, r1
   13bb4:	mov	r5, #0
   13bb8:	mov	r9, r3
   13bbc:	sub	r1, fp, #30
   13bc0:	str	r5, [sp, #12]
   13bc4:	and	r6, r8, #1
   13bc8:	strh	r0, [fp, #-30]	; 0xffffffe2
   13bcc:	mov	r0, r4
   13bd0:	mov	r3, r6
   13bd4:	bl	13a78 <flatcc_builder_embed_buffer@@Base+0x170>
   13bd8:	ldrh	r0, [r4, #128]	; 0x80
   13bdc:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13be0:	cmp	r0, r1
   13be4:	strhcc	r1, [r4, #128]	; 0x80
   13be8:	cmp	r7, #0
   13bec:	stmib	sp, {r6, r9}
   13bf0:	beq	13c0c <flatcc_builder_create_buffer@@Base+0x74>
   13bf4:	ldr	r5, [r7]
   13bf8:	cmp	r5, #0
   13bfc:	str	r5, [sp, #12]
   13c00:	movwne	r5, #1
   13c04:	lsl	r7, r5, #2
   13c08:	b	13c10 <flatcc_builder_create_buffer@@Base+0x78>
   13c0c:	mov	r7, #0
   13c10:	ldr	r9, [r4, #136]	; 0x88
   13c14:	mov	sl, #4
   13c18:	mvn	r6, #3
   13c1c:	mov	r3, #0
   13c20:	ands	ip, r8, #3
   13c24:	and	r2, sl, r8, lsl #1
   13c28:	str	r3, [sp, #20]
   13c2c:	str	r3, [sp, #16]
   13c30:	sub	r2, r6, r2
   13c34:	sub	r6, r1, #1
   13c38:	mov	r1, #4
   13c3c:	add	r2, r2, r9
   13c40:	sub	r2, r2, r7
   13c44:	beq	13c68 <flatcc_builder_create_buffer@@Base+0xd0>
   13c48:	sub	r1, fp, #40	; 0x28
   13c4c:	mov	r3, #1
   13c50:	str	r1, [sp, #24]
   13c54:	mov	r1, #4
   13c58:	str	r1, [sp, #16]
   13c5c:	str	r1, [sp, #28]
   13c60:	mov	r1, #8
   13c64:	str	r3, [sp, #20]
   13c68:	add	lr, sp, #16
   13c6c:	and	r6, r2, r6
   13c70:	sub	r0, fp, #36	; 0x24
   13c74:	str	r1, [sp, #16]
   13c78:	cmp	r5, #0
   13c7c:	add	r2, lr, r3, lsl #3
   13c80:	str	r0, [r2, #8]
   13c84:	str	sl, [r2, #12]
   13c88:	add	r2, r3, #1
   13c8c:	str	r2, [sp, #20]
   13c90:	beq	13cb4 <flatcc_builder_create_buffer@@Base+0x11c>
   13c94:	add	r1, r1, r7
   13c98:	add	r0, lr, r2, lsl #3
   13c9c:	add	r2, sp, #12
   13ca0:	str	r1, [sp, #16]
   13ca4:	str	r2, [r0, #8]
   13ca8:	orr	r2, r3, #2
   13cac:	str	r7, [r0, #12]
   13cb0:	str	r2, [sp, #20]
   13cb4:	cmp	r6, #0
   13cb8:	beq	13ce0 <flatcc_builder_create_buffer@@Base+0x148>
   13cbc:	movw	r3, #31536	; 0x7b30
   13cc0:	add	r1, r1, r6
   13cc4:	add	r0, lr, r2, lsl #3
   13cc8:	add	r2, r2, #1
   13ccc:	movt	r3, #1
   13cd0:	str	r1, [sp, #16]
   13cd4:	str	r3, [r0, #8]
   13cd8:	str	r6, [r0, #12]
   13cdc:	str	r2, [sp, #20]
   13ce0:	ldr	r5, [sp, #4]
   13ce4:	sub	r7, r9, r1
   13ce8:	cmp	ip, #0
   13cec:	mov	r6, #144	; 0x90
   13cf0:	ldr	r3, [sp, #8]
   13cf4:	mov	r0, r7
   13cf8:	addne	r0, r0, #4
   13cfc:	cmp	r5, #0
   13d00:	sub	r3, r3, r0
   13d04:	movweq	r6, #140	; 0x8c
   13d08:	cmp	r1, #0
   13d0c:	ldr	r6, [r4, r6]
   13d10:	str	r3, [fp, #-36]	; 0xffffffdc
   13d14:	sub	r0, r6, r0
   13d18:	str	r0, [fp, #-40]	; 0xffffffd8
   13d1c:	ble	13d74 <flatcc_builder_create_buffer@@Base+0x1dc>
   13d20:	ldr	r0, [r4, #36]	; 0x24
   13d24:	ldr	r6, [r4, #44]	; 0x2c
   13d28:	str	r1, [sp]
   13d2c:	add	r1, lr, #8
   13d30:	mov	r3, r7
   13d34:	blx	r6
   13d38:	cmp	r0, #0
   13d3c:	bne	13d94 <flatcc_builder_create_buffer@@Base+0x1fc>
   13d40:	cmp	r7, #0
   13d44:	str	r7, [r4, #136]	; 0x88
   13d48:	movne	r0, r7
   13d4c:	subne	sp, fp, #28
   13d50:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d54:	movw	r0, #36584	; 0x8ee8
   13d58:	movw	r1, #32066	; 0x7d42
   13d5c:	movw	r3, #32381	; 0x7e7d
   13d60:	mov	r2, #772	; 0x304
   13d64:	movt	r0, #1
   13d68:	movt	r1, #1
   13d6c:	movt	r3, #1
   13d70:	bl	12418 <__assert_fail@plt>
   13d74:	movw	r0, #36584	; 0x8ee8
   13d78:	movw	r1, #32066	; 0x7d42
   13d7c:	movw	r3, #36263	; 0x8da7
   13d80:	movw	r2, #647	; 0x287
   13d84:	movt	r0, #1
   13d88:	movt	r1, #1
   13d8c:	movt	r3, #1
   13d90:	bl	12418 <__assert_fail@plt>
   13d94:	movw	r0, #36584	; 0x8ee8
   13d98:	movw	r1, #32066	; 0x7d42
   13d9c:	movw	r3, #36263	; 0x8da7
   13da0:	movw	r2, #651	; 0x28b
   13da4:	movt	r0, #1
   13da8:	movt	r1, #1
   13dac:	movt	r3, #1
   13db0:	bl	12418 <__assert_fail@plt>

00013db4 <flatcc_builder_create_struct@@Base>:
   13db4:	push	{r4, r5, r6, sl, fp, lr}
   13db8:	add	fp, sp, #16
   13dbc:	sub	sp, sp, #80	; 0x50
   13dc0:	cmp	r3, #0
   13dc4:	beq	13e9c <flatcc_builder_create_struct@@Base+0xe8>
   13dc8:	mov	r5, r0
   13dcc:	ldrh	r0, [r0, #128]	; 0x80
   13dd0:	mov	r4, #0
   13dd4:	cmp	r0, r3
   13dd8:	strhcc	r3, [r5, #128]	; 0x80
   13ddc:	sub	r3, r3, #1
   13de0:	cmp	r2, #0
   13de4:	ldr	r0, [r5, #136]	; 0x88
   13de8:	str	r4, [sp, #12]
   13dec:	str	r4, [sp, #8]
   13df0:	movne	r4, #1
   13df4:	strne	r1, [sp, #16]
   13df8:	strne	r2, [sp, #8]
   13dfc:	strne	r2, [sp, #20]
   13e00:	strne	r4, [sp, #12]
   13e04:	sub	r6, r0, r2
   13e08:	and	r3, r6, r3
   13e0c:	cmp	r3, #0
   13e10:	beq	13e3c <flatcc_builder_create_struct@@Base+0x88>
   13e14:	add	r1, sp, #8
   13e18:	movw	r6, #31536	; 0x7b30
   13e1c:	add	r2, r3, r2
   13e20:	add	r1, r1, r4, lsl #3
   13e24:	add	r4, r4, #1
   13e28:	movt	r6, #1
   13e2c:	str	r2, [sp, #8]
   13e30:	str	r6, [r1, #8]
   13e34:	str	r3, [r1, #12]
   13e38:	str	r4, [sp, #12]
   13e3c:	cmp	r2, #0
   13e40:	ble	13ebc <flatcc_builder_create_struct@@Base+0x108>
   13e44:	sub	r6, r0, r2
   13e48:	ldr	r0, [r5, #36]	; 0x24
   13e4c:	ldr	ip, [r5, #44]	; 0x2c
   13e50:	add	r1, sp, #8
   13e54:	str	r2, [sp]
   13e58:	mov	r2, r4
   13e5c:	add	r1, r1, #8
   13e60:	mov	r3, r6
   13e64:	blx	ip
   13e68:	cmp	r0, #0
   13e6c:	streq	r6, [r5, #136]	; 0x88
   13e70:	moveq	r0, r6
   13e74:	subeq	sp, fp, #16
   13e78:	popeq	{r4, r5, r6, sl, fp, pc}
   13e7c:	movw	r0, #36584	; 0x8ee8
   13e80:	movw	r1, #32066	; 0x7d42
   13e84:	movw	r3, #36263	; 0x8da7
   13e88:	movw	r2, #651	; 0x28b
   13e8c:	movt	r0, #1
   13e90:	movt	r1, #1
   13e94:	movt	r3, #1
   13e98:	bl	12418 <__assert_fail@plt>
   13e9c:	movw	r0, #32512	; 0x7f00
   13ea0:	movw	r1, #32066	; 0x7d42
   13ea4:	movw	r3, #32523	; 0x7f0b
   13ea8:	movw	r2, #783	; 0x30f
   13eac:	movt	r0, #1
   13eb0:	movt	r1, #1
   13eb4:	movt	r3, #1
   13eb8:	bl	12418 <__assert_fail@plt>
   13ebc:	movw	r0, #36584	; 0x8ee8
   13ec0:	movw	r1, #32066	; 0x7d42
   13ec4:	movw	r3, #36263	; 0x8da7
   13ec8:	movw	r2, #647	; 0x287
   13ecc:	movt	r0, #1
   13ed0:	movt	r1, #1
   13ed4:	movt	r3, #1
   13ed8:	bl	12418 <__assert_fail@plt>

00013edc <flatcc_builder_start_buffer@@Base>:
   13edc:	push	{r4, r5, r6, r7, fp, lr}
   13ee0:	add	fp, sp, #16
   13ee4:	mov	r5, r1
   13ee8:	ldrh	r1, [r0, #128]	; 0x80
   13eec:	mov	r6, r3
   13ef0:	mov	r7, r2
   13ef4:	mov	r4, r0
   13ef8:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   13efc:	mov	r1, r0
   13f00:	mvn	r0, #0
   13f04:	cmp	r1, #0
   13f08:	popne	{r4, r5, r6, r7, fp, pc}
   13f0c:	mov	r0, #1
   13f10:	cmp	r5, #0
   13f14:	strh	r0, [r4, #128]	; 0x80
   13f18:	ldrh	r1, [r4, #132]	; 0x84
   13f1c:	ldr	r2, [r4, #32]
   13f20:	strh	r1, [r2, #34]	; 0x22
   13f24:	strh	r7, [r4, #132]	; 0x84
   13f28:	ldrh	r1, [r4, #164]	; 0xa4
   13f2c:	ldr	r2, [r4, #32]
   13f30:	strh	r1, [r2, #32]
   13f34:	strh	r6, [r4, #164]	; 0xa4
   13f38:	ldr	r1, [r4, #32]
   13f3c:	ldr	r2, [r4, #144]	; 0x90
   13f40:	str	r2, [r1, #20]
   13f44:	ldr	r1, [r4, #32]
   13f48:	ldr	r2, [r4, #152]	; 0x98
   13f4c:	str	r2, [r1, #28]
   13f50:	ldr	r3, [r4, #148]	; 0x94
   13f54:	ldr	r1, [r4, #32]
   13f58:	ldr	r2, [r4, #136]	; 0x88
   13f5c:	ldr	r7, [r4, #168]	; 0xa8
   13f60:	add	r6, r3, #1
   13f64:	str	r2, [r4, #144]	; 0x90
   13f68:	str	r6, [r4, #148]	; 0x94
   13f6c:	str	r3, [r4, #152]	; 0x98
   13f70:	str	r7, [r1, #16]
   13f74:	movw	r1, #31536	; 0x7b30
   13f78:	movt	r1, #1
   13f7c:	movne	r1, r5
   13f80:	ldr	r1, [r1]
   13f84:	str	r1, [r4, #168]	; 0xa8
   13f88:	ldr	r1, [r4, #32]
   13f8c:	strh	r0, [r1, #14]
   13f90:	mov	r0, #0
   13f94:	pop	{r4, r5, r6, r7, fp, pc}
   13f98:	push	{r4, r5, r6, r7, fp, lr}
   13f9c:	add	fp, sp, #16
   13fa0:	sub	sp, sp, #8
   13fa4:	mov	r5, r1
   13fa8:	ldr	r1, [r0, #156]	; 0x9c
   13fac:	ldr	r2, [r0, #160]	; 0xa0
   13fb0:	mov	r4, r0
   13fb4:	add	r0, r1, #1
   13fb8:	cmp	r1, r2
   13fbc:	str	r0, [r4, #156]	; 0x9c
   13fc0:	bge	13fd4 <flatcc_builder_start_buffer@@Base+0xf8>
   13fc4:	ldr	r0, [r4, #32]
   13fc8:	add	r0, r0, #36	; 0x24
   13fcc:	str	r0, [r4, #32]
   13fd0:	b	14068 <flatcc_builder_start_buffer@@Base+0x18c>
   13fd4:	ldr	r2, [r4, #176]	; 0xb0
   13fd8:	mvn	r6, #0
   13fdc:	cmp	r2, #1
   13fe0:	cmpge	r1, r2
   13fe4:	bge	140a0 <flatcc_builder_start_buffer@@Base+0x1c4>
   13fe8:	add	r7, r0, r0, lsl #3
   13fec:	ldr	r0, [r4, #88]	; 0x58
   13ff0:	lsl	r2, r7, #2
   13ff4:	cmp	r2, r0
   13ff8:	bls	14020 <flatcc_builder_start_buffer@@Base+0x144>
   13ffc:	ldr	r0, [r4, #40]	; 0x28
   14000:	ldr	ip, [r4, #48]	; 0x30
   14004:	mov	r3, #4
   14008:	add	r1, r4, #84	; 0x54
   1400c:	str	r3, [sp]
   14010:	mov	r3, #0
   14014:	blx	ip
   14018:	cmp	r0, #0
   1401c:	bne	140ac <flatcc_builder_start_buffer@@Base+0x1d0>
   14020:	ldr	r1, [r4, #84]	; 0x54
   14024:	mvn	r0, #35	; 0x23
   14028:	add	r0, r0, r7, lsl #2
   1402c:	adds	r0, r0, r1
   14030:	str	r0, [r4, #32]
   14034:	beq	140a0 <flatcc_builder_start_buffer@@Base+0x1c4>
   14038:	ldr	r1, [r4, #88]	; 0x58
   1403c:	movw	r3, #36409	; 0x8e39
   14040:	ldr	r2, [r4, #176]	; 0xb0
   14044:	movt	r3, #14563	; 0x38e3
   14048:	umull	r1, r3, r1, r3
   1404c:	lsr	r1, r3, #3
   14050:	cmp	r2, r3, lsr #3
   14054:	mov	r3, r1
   14058:	movlt	r3, r2
   1405c:	cmp	r2, #0
   14060:	movle	r3, r1
   14064:	str	r3, [r4, #160]	; 0xa0
   14068:	ldr	r1, [r4, #20]
   1406c:	mvn	r3, #3
   14070:	mov	r6, #0
   14074:	str	r1, [r0, #8]
   14078:	ldrh	r2, [r4, #130]	; 0x82
   1407c:	strh	r2, [r0, #12]
   14080:	strh	r5, [r4, #130]	; 0x82
   14084:	ldr	r2, [r4, #28]
   14088:	stm	r0, {r2, r3}
   1408c:	add	r0, r1, r2
   14090:	str	r6, [r4, #20]
   14094:	add	r0, r0, #7
   14098:	bic	r0, r0, #7
   1409c:	str	r0, [r4, #28]
   140a0:	mov	r0, r6
   140a4:	sub	sp, fp, #16
   140a8:	pop	{r4, r5, r6, r7, fp, pc}
   140ac:	movw	r0, #36584	; 0x8ee8
   140b0:	movw	r1, #32066	; 0x7d42
   140b4:	movw	r3, #36130	; 0x8d22
   140b8:	mov	r2, #308	; 0x134
   140bc:	movt	r0, #1
   140c0:	movt	r1, #1
   140c4:	movt	r3, #1
   140c8:	bl	12418 <__assert_fail@plt>

000140cc <flatcc_builder_end_buffer@@Base>:
   140cc:	push	{r4, r5, r6, sl, fp, lr}
   140d0:	add	fp, sp, #16
   140d4:	sub	sp, sp, #8
   140d8:	mov	r4, r0
   140dc:	ldr	r0, [r0, #32]
   140e0:	ldrh	r0, [r0, #14]
   140e4:	cmp	r0, #1
   140e8:	bne	141dc <flatcc_builder_end_buffer@@Base+0x110>
   140ec:	mov	r3, r1
   140f0:	ldr	r1, [r4, #152]	; 0x98
   140f4:	ldrh	r0, [r4, #164]	; 0xa4
   140f8:	ldrh	r2, [r4, #132]	; 0x84
   140fc:	cmp	r1, #0
   14100:	ldrh	r1, [r4, #128]	; 0x80
   14104:	and	r0, r0, #2
   14108:	orrne	r0, r0, #1
   1410c:	cmp	r1, r2
   14110:	movcc	r1, r2
   14114:	strhcc	r2, [r4, #128]	; 0x80
   14118:	str	r0, [sp, #4]
   1411c:	mov	r0, r4
   14120:	str	r1, [sp]
   14124:	add	r1, r4, #168	; 0xa8
   14128:	bl	13b98 <flatcc_builder_create_buffer@@Base>
   1412c:	mov	r6, r0
   14130:	cmp	r0, #0
   14134:	beq	141d0 <flatcc_builder_end_buffer@@Base+0x104>
   14138:	ldr	r1, [r4, #32]
   1413c:	ldr	r0, [r4, #16]
   14140:	ldr	r2, [r4, #20]
   14144:	ldr	r3, [r1, #20]
   14148:	str	r3, [r4, #144]	; 0x90
   1414c:	ldr	r3, [r1, #28]
   14150:	str	r3, [r4, #152]	; 0x98
   14154:	ldr	r3, [r1, #16]
   14158:	str	r3, [r4, #168]	; 0xa8
   1415c:	ldrh	r1, [r1, #32]
   14160:	strh	r1, [r4, #164]	; 0xa4
   14164:	mov	r1, #0
   14168:	bl	123f4 <memset@plt>
   1416c:	ldr	r0, [r4, #32]
   14170:	ldr	r1, [r4, #60]	; 0x3c
   14174:	ldr	r2, [r4, #64]	; 0x40
   14178:	ldr	r3, [r0, #8]
   1417c:	str	r3, [r4, #20]
   14180:	ldr	r3, [r0]
   14184:	str	r3, [r4, #28]
   14188:	add	r1, r1, r3
   1418c:	ldr	r5, [r0, #4]
   14190:	str	r1, [r4, #16]
   14194:	sub	r1, r2, r3
   14198:	cmp	r1, r5
   1419c:	movhi	r1, r5
   141a0:	str	r1, [r4, #24]
   141a4:	ldrh	r1, [r4, #130]	; 0x82
   141a8:	ldrh	r2, [r4, #128]	; 0x80
   141ac:	cmp	r2, r1
   141b0:	strhcc	r1, [r4, #128]	; 0x80
   141b4:	ldrh	r1, [r0, #12]
   141b8:	sub	r0, r0, #36	; 0x24
   141bc:	str	r0, [r4, #32]
   141c0:	strh	r1, [r4, #130]	; 0x82
   141c4:	ldr	r0, [r4, #156]	; 0x9c
   141c8:	sub	r0, r0, #1
   141cc:	str	r0, [r4, #156]	; 0x9c
   141d0:	mov	r0, r6
   141d4:	sub	sp, fp, #16
   141d8:	pop	{r4, r5, r6, sl, fp, pc}
   141dc:	movw	r0, #32625	; 0x7f71
   141e0:	movw	r1, #32066	; 0x7d42
   141e4:	movw	r3, #32669	; 0x7f9d
   141e8:	movw	r2, #838	; 0x346
   141ec:	movt	r0, #1
   141f0:	movt	r1, #1
   141f4:	movt	r3, #1
   141f8:	bl	12418 <__assert_fail@plt>

000141fc <flatcc_builder_start_struct@@Base>:
   141fc:	push	{r4, r5, r6, r7, fp, lr}
   14200:	add	fp, sp, #16
   14204:	mov	r6, r1
   14208:	mov	r1, r2
   1420c:	mov	r4, r0
   14210:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   14214:	mov	r5, #0
   14218:	cmp	r0, #0
   1421c:	bne	1428c <flatcc_builder_start_struct@@Base+0x90>
   14220:	ldr	r1, [r4, #32]
   14224:	mov	r0, #2
   14228:	strh	r0, [r1, #14]
   1422c:	ldr	r2, [r4, #28]
   14230:	ldr	r0, [r4, #60]	; 0x3c
   14234:	ldr	r3, [r4, #64]	; 0x40
   14238:	add	r0, r0, r2
   1423c:	sub	r2, r3, r2
   14240:	mvn	r3, #3
   14244:	cmn	r2, #4
   14248:	str	r0, [r4, #16]
   1424c:	movcs	r2, r3
   14250:	str	r2, [r4, #24]
   14254:	str	r3, [r1, #4]
   14258:	ldr	r7, [r4, #20]
   1425c:	add	r1, r7, r6
   14260:	cmp	r1, r2
   14264:	str	r1, [r4, #20]
   14268:	bcc	14288 <flatcc_builder_start_struct@@Base+0x8c>
   1426c:	add	r1, r1, #1
   14270:	mov	r0, r4
   14274:	mvn	r2, #3
   14278:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   1427c:	cmp	r0, #0
   14280:	bne	1428c <flatcc_builder_start_struct@@Base+0x90>
   14284:	ldr	r0, [r4, #16]
   14288:	add	r5, r0, r7
   1428c:	mov	r0, r5
   14290:	pop	{r4, r5, r6, r7, fp, pc}

00014294 <flatcc_builder_struct_edit@@Base>:
   14294:	ldr	r0, [r0, #16]
   14298:	bx	lr

0001429c <flatcc_builder_end_struct@@Base>:
   1429c:	push	{r4, r5, fp, lr}
   142a0:	add	fp, sp, #8
   142a4:	mov	r4, r0
   142a8:	ldr	r0, [r0, #32]
   142ac:	ldrh	r0, [r0, #14]
   142b0:	cmp	r0, #2
   142b4:	bne	14354 <flatcc_builder_end_struct@@Base+0xb8>
   142b8:	ldrh	r3, [r4, #130]	; 0x82
   142bc:	ldr	r1, [r4, #16]
   142c0:	ldr	r2, [r4, #20]
   142c4:	mov	r0, r4
   142c8:	bl	13db4 <flatcc_builder_create_struct@@Base>
   142cc:	mov	r5, r0
   142d0:	cmp	r0, #0
   142d4:	beq	1434c <flatcc_builder_end_struct@@Base+0xb0>
   142d8:	ldr	r0, [r4, #16]
   142dc:	ldr	r2, [r4, #20]
   142e0:	mov	r1, #0
   142e4:	bl	123f4 <memset@plt>
   142e8:	ldr	r0, [r4, #32]
   142ec:	ldr	r1, [r4, #60]	; 0x3c
   142f0:	ldr	ip, [r4, #64]	; 0x40
   142f4:	ldr	r3, [r0, #8]
   142f8:	str	r3, [r4, #20]
   142fc:	ldr	r3, [r0]
   14300:	str	r3, [r4, #28]
   14304:	add	r1, r1, r3
   14308:	ldr	r2, [r0, #4]
   1430c:	str	r1, [r4, #16]
   14310:	sub	r1, ip, r3
   14314:	cmp	r1, r2
   14318:	movhi	r1, r2
   1431c:	str	r1, [r4, #24]
   14320:	ldrh	r1, [r4, #130]	; 0x82
   14324:	ldrh	r2, [r4, #128]	; 0x80
   14328:	cmp	r2, r1
   1432c:	strhcc	r1, [r4, #128]	; 0x80
   14330:	ldrh	r1, [r0, #12]
   14334:	sub	r0, r0, #36	; 0x24
   14338:	str	r0, [r4, #32]
   1433c:	strh	r1, [r4, #130]	; 0x82
   14340:	ldr	r0, [r4, #156]	; 0x9c
   14344:	sub	r0, r0, #1
   14348:	str	r0, [r4, #156]	; 0x9c
   1434c:	mov	r0, r5
   14350:	pop	{r4, r5, fp, pc}
   14354:	movw	r0, #32758	; 0x7ff6
   14358:	movw	r1, #32066	; 0x7d42
   1435c:	movw	r3, #32802	; 0x8022
   14360:	mov	r2, #872	; 0x368
   14364:	movt	r0, #1
   14368:	movt	r1, #1
   1436c:	movt	r3, #1
   14370:	bl	12418 <__assert_fail@plt>

00014374 <flatcc_builder_extend_vector@@Base>:
   14374:	push	{r4, r5, fp, lr}
   14378:	add	fp, sp, #8
   1437c:	mov	r4, r0
   14380:	ldr	r0, [r0, #32]
   14384:	ldr	r2, [r0, #20]
   14388:	adds	r2, r2, r1
   1438c:	bcs	143ec <flatcc_builder_extend_vector@@Base+0x78>
   14390:	ldr	r3, [r0, #24]
   14394:	cmp	r2, r3
   14398:	bhi	143ec <flatcc_builder_extend_vector@@Base+0x78>
   1439c:	str	r2, [r0, #20]
   143a0:	ldr	r0, [r4, #32]
   143a4:	ldr	r5, [r4, #20]
   143a8:	ldr	r2, [r4, #24]
   143ac:	ldr	r0, [r0, #16]
   143b0:	mla	r0, r0, r1, r5
   143b4:	cmp	r0, r2
   143b8:	str	r0, [r4, #20]
   143bc:	bcc	143e0 <flatcc_builder_extend_vector@@Base+0x6c>
   143c0:	add	r1, r0, #1
   143c4:	mov	r0, r4
   143c8:	mvn	r2, #3
   143cc:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   143d0:	mov	r1, r0
   143d4:	mov	r0, #0
   143d8:	cmp	r1, #0
   143dc:	popne	{r4, r5, fp, pc}
   143e0:	ldr	r0, [r4, #16]
   143e4:	add	r0, r0, r5
   143e8:	pop	{r4, r5, fp, pc}
   143ec:	movw	r0, #36337	; 0x8df1
   143f0:	movw	r1, #32066	; 0x7d42
   143f4:	movw	r3, #36364	; 0x8e0c
   143f8:	mov	r2, #892	; 0x37c
   143fc:	movt	r0, #1
   14400:	movt	r1, #1
   14404:	movt	r3, #1
   14408:	bl	12418 <__assert_fail@plt>

0001440c <flatcc_builder_vector_push@@Base>:
   1440c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14410:	add	fp, sp, #24
   14414:	mov	r5, r0
   14418:	ldr	r0, [r0, #32]
   1441c:	mov	r8, r1
   14420:	ldrh	r1, [r0, #14]
   14424:	cmp	r1, #4
   14428:	bne	144ac <flatcc_builder_vector_push@@Base+0xa0>
   1442c:	ldr	r1, [r0, #20]
   14430:	ldr	r2, [r0, #24]
   14434:	cmp	r1, r2
   14438:	bhi	144cc <flatcc_builder_vector_push@@Base+0xc0>
   1443c:	add	r1, r1, #1
   14440:	str	r1, [r0, #20]
   14444:	ldr	r0, [r5, #32]
   14448:	ldr	r4, [r5, #20]
   1444c:	ldr	r1, [r5, #24]
   14450:	ldr	r6, [r0, #16]
   14454:	add	r0, r4, r6
   14458:	cmp	r0, r1
   1445c:	str	r0, [r5, #20]
   14460:	bcc	14480 <flatcc_builder_vector_push@@Base+0x74>
   14464:	add	r1, r0, #1
   14468:	mov	r0, r5
   1446c:	mvn	r2, #3
   14470:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   14474:	mov	r7, #0
   14478:	cmp	r0, #0
   1447c:	bne	144a4 <flatcc_builder_vector_push@@Base+0x98>
   14480:	ldr	r0, [r5, #16]
   14484:	adds	r7, r0, r4
   14488:	beq	144a0 <flatcc_builder_vector_push@@Base+0x94>
   1448c:	mov	r0, r7
   14490:	mov	r1, r8
   14494:	mov	r2, r6
   14498:	bl	12388 <memcpy@plt>
   1449c:	b	144a4 <flatcc_builder_vector_push@@Base+0x98>
   144a0:	mov	r7, #0
   144a4:	mov	r0, r7
   144a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144ac:	movw	r0, #32869	; 0x8065
   144b0:	movw	r1, #32066	; 0x7d42
   144b4:	movw	r3, #32913	; 0x8091
   144b8:	movw	r2, #907	; 0x38b
   144bc:	movt	r0, #1
   144c0:	movt	r1, #1
   144c4:	movt	r3, #1
   144c8:	bl	12418 <__assert_fail@plt>
   144cc:	movw	r0, #32980	; 0x80d4
   144d0:	movw	r1, #32066	; 0x7d42
   144d4:	movw	r3, #32913	; 0x8091
   144d8:	mov	r2, #908	; 0x38c
   144dc:	movt	r0, #1
   144e0:	movt	r1, #1
   144e4:	movt	r3, #1
   144e8:	bl	12418 <__assert_fail@plt>

000144ec <flatcc_builder_append_vector@@Base>:
   144ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   144f0:	add	fp, sp, #24
   144f4:	mov	r6, r0
   144f8:	ldr	r0, [r0, #32]
   144fc:	mov	r8, r1
   14500:	ldrh	r1, [r0, #14]
   14504:	cmp	r1, #4
   14508:	bne	145b4 <flatcc_builder_append_vector@@Base+0xc8>
   1450c:	ldr	r1, [r0, #20]
   14510:	mov	r9, r2
   14514:	adds	r1, r1, r2
   14518:	bcs	14594 <flatcc_builder_append_vector@@Base+0xa8>
   1451c:	ldr	r2, [r0, #24]
   14520:	cmp	r1, r2
   14524:	bhi	14594 <flatcc_builder_append_vector@@Base+0xa8>
   14528:	str	r1, [r0, #20]
   1452c:	ldr	r0, [r6, #32]
   14530:	ldr	r4, [r6, #20]
   14534:	ldr	r1, [r6, #24]
   14538:	ldr	r5, [r0, #16]
   1453c:	mla	r0, r5, r9, r4
   14540:	cmp	r0, r1
   14544:	str	r0, [r6, #20]
   14548:	bcc	14568 <flatcc_builder_append_vector@@Base+0x7c>
   1454c:	add	r1, r0, #1
   14550:	mov	r0, r6
   14554:	mvn	r2, #3
   14558:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   1455c:	mov	r7, #0
   14560:	cmp	r0, #0
   14564:	bne	1458c <flatcc_builder_append_vector@@Base+0xa0>
   14568:	ldr	r0, [r6, #16]
   1456c:	adds	r7, r0, r4
   14570:	beq	14588 <flatcc_builder_append_vector@@Base+0x9c>
   14574:	mul	r2, r5, r9
   14578:	mov	r0, r7
   1457c:	mov	r1, r8
   14580:	bl	12388 <memcpy@plt>
   14584:	b	1458c <flatcc_builder_append_vector@@Base+0xa0>
   14588:	mov	r7, #0
   1458c:	mov	r0, r7
   14590:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14594:	movw	r0, #36337	; 0x8df1
   14598:	movw	r1, #32066	; 0x7d42
   1459c:	movw	r3, #36364	; 0x8e0c
   145a0:	mov	r2, #892	; 0x37c
   145a4:	movt	r0, #1
   145a8:	movt	r1, #1
   145ac:	movt	r3, #1
   145b0:	bl	12418 <__assert_fail@plt>
   145b4:	movw	r0, #32869	; 0x8065
   145b8:	movw	r1, #32066	; 0x7d42
   145bc:	movw	r3, #33041	; 0x8111
   145c0:	movw	r2, #915	; 0x393
   145c4:	movt	r0, #1
   145c8:	movt	r1, #1
   145cc:	movt	r3, #1
   145d0:	bl	12418 <__assert_fail@plt>

000145d4 <flatcc_builder_extend_offset_vector@@Base>:
   145d4:	push	{r4, r5, fp, lr}
   145d8:	add	fp, sp, #8
   145dc:	mov	r4, r0
   145e0:	ldr	r0, [r0, #32]
   145e4:	ldr	r2, [r0, #20]
   145e8:	adds	r2, r2, r1
   145ec:	cmpcc	r2, #1073741824	; 0x40000000
   145f0:	bcc	14614 <flatcc_builder_extend_offset_vector@@Base+0x40>
   145f4:	movw	r0, #36337	; 0x8df1
   145f8:	movw	r1, #32066	; 0x7d42
   145fc:	movw	r3, #36364	; 0x8e0c
   14600:	mov	r2, #892	; 0x37c
   14604:	movt	r0, #1
   14608:	movt	r1, #1
   1460c:	movt	r3, #1
   14610:	bl	12418 <__assert_fail@plt>
   14614:	str	r2, [r0, #20]
   14618:	ldr	r5, [r4, #20]
   1461c:	ldr	r2, [r4, #24]
   14620:	add	r0, r5, r1, lsl #2
   14624:	cmp	r0, r2
   14628:	str	r0, [r4, #20]
   1462c:	bcc	14650 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   14630:	add	r1, r0, #1
   14634:	mov	r0, r4
   14638:	mvn	r2, #3
   1463c:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   14640:	mov	r1, r0
   14644:	mov	r0, #0
   14648:	cmp	r1, #0
   1464c:	popne	{r4, r5, fp, pc}
   14650:	ldr	r0, [r4, #16]
   14654:	add	r0, r0, r5
   14658:	pop	{r4, r5, fp, pc}

0001465c <flatcc_builder_offset_vector_push@@Base>:
   1465c:	push	{r4, r5, r6, r7, fp, lr}
   14660:	add	fp, sp, #16
   14664:	mov	r6, r0
   14668:	ldr	r0, [r0, #32]
   1466c:	mov	r4, r1
   14670:	ldrh	r1, [r0, #14]
   14674:	cmp	r1, #5
   14678:	bne	146dc <flatcc_builder_offset_vector_push@@Base+0x80>
   1467c:	ldr	r1, [r0, #20]
   14680:	mov	r5, #0
   14684:	cmn	r1, #-1073741823	; 0xc0000001
   14688:	beq	146d4 <flatcc_builder_offset_vector_push@@Base+0x78>
   1468c:	add	r1, r1, #1
   14690:	str	r1, [r0, #20]
   14694:	ldr	r7, [r6, #20]
   14698:	ldr	r0, [r6, #24]
   1469c:	add	r1, r7, #4
   146a0:	cmp	r1, r0
   146a4:	str	r1, [r6, #20]
   146a8:	bcc	146c4 <flatcc_builder_offset_vector_push@@Base+0x68>
   146ac:	add	r1, r7, #5
   146b0:	mov	r0, r6
   146b4:	mvn	r2, #3
   146b8:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   146bc:	cmp	r0, #0
   146c0:	bne	146d4 <flatcc_builder_offset_vector_push@@Base+0x78>
   146c4:	ldr	r0, [r6, #16]
   146c8:	adds	r0, r0, r7
   146cc:	movne	r5, r0
   146d0:	strne	r4, [r0]
   146d4:	mov	r0, r5
   146d8:	pop	{r4, r5, r6, r7, fp, pc}
   146dc:	movw	r0, #33118	; 0x815e
   146e0:	movw	r1, #32066	; 0x7d42
   146e4:	movw	r3, #33169	; 0x8191
   146e8:	movw	r2, #934	; 0x3a6
   146ec:	movt	r0, #1
   146f0:	movt	r1, #1
   146f4:	movt	r3, #1
   146f8:	bl	12418 <__assert_fail@plt>

000146fc <flatcc_builder_append_offset_vector@@Base>:
   146fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14700:	add	fp, sp, #24
   14704:	mov	r6, r0
   14708:	ldr	r0, [r0, #32]
   1470c:	mov	r8, r1
   14710:	ldrh	r1, [r0, #14]
   14714:	cmp	r1, #5
   14718:	bne	147b4 <flatcc_builder_append_offset_vector@@Base+0xb8>
   1471c:	ldr	r1, [r0, #20]
   14720:	mov	r5, r2
   14724:	adds	r1, r1, r2
   14728:	cmpcc	r1, #1073741824	; 0x40000000
   1472c:	bcc	14750 <flatcc_builder_append_offset_vector@@Base+0x54>
   14730:	movw	r0, #36337	; 0x8df1
   14734:	movw	r1, #32066	; 0x7d42
   14738:	movw	r3, #36364	; 0x8e0c
   1473c:	mov	r2, #892	; 0x37c
   14740:	movt	r0, #1
   14744:	movt	r1, #1
   14748:	movt	r3, #1
   1474c:	bl	12418 <__assert_fail@plt>
   14750:	str	r1, [r0, #20]
   14754:	ldr	r4, [r6, #20]
   14758:	ldr	r1, [r6, #24]
   1475c:	add	r0, r4, r5, lsl #2
   14760:	cmp	r0, r1
   14764:	str	r0, [r6, #20]
   14768:	bcc	14788 <flatcc_builder_append_offset_vector@@Base+0x8c>
   1476c:	add	r1, r0, #1
   14770:	mov	r0, r6
   14774:	mvn	r2, #3
   14778:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   1477c:	mov	r7, #0
   14780:	cmp	r0, #0
   14784:	bne	147ac <flatcc_builder_append_offset_vector@@Base+0xb0>
   14788:	ldr	r0, [r6, #16]
   1478c:	adds	r7, r0, r4
   14790:	beq	147a8 <flatcc_builder_append_offset_vector@@Base+0xac>
   14794:	lsl	r2, r5, #2
   14798:	mov	r0, r7
   1479c:	mov	r1, r8
   147a0:	bl	12388 <memcpy@plt>
   147a4:	b	147ac <flatcc_builder_append_offset_vector@@Base+0xb0>
   147a8:	mov	r7, #0
   147ac:	mov	r0, r7
   147b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147b4:	movw	r0, #33118	; 0x815e
   147b8:	movw	r1, #32066	; 0x7d42
   147bc:	movw	r3, #33267	; 0x81f3
   147c0:	mov	r2, #948	; 0x3b4
   147c4:	movt	r0, #1
   147c8:	movt	r1, #1
   147cc:	movt	r3, #1
   147d0:	bl	12418 <__assert_fail@plt>

000147d4 <flatcc_builder_extend_string@@Base>:
   147d4:	push	{r4, r5, fp, lr}
   147d8:	add	fp, sp, #8
   147dc:	mov	r4, r0
   147e0:	ldr	r0, [r0, #32]
   147e4:	ldrh	r2, [r0, #14]
   147e8:	cmp	r2, #6
   147ec:	bne	14844 <flatcc_builder_extend_string@@Base+0x70>
   147f0:	ldr	r2, [r0, #20]
   147f4:	adds	r2, r2, r1
   147f8:	bcs	14864 <flatcc_builder_extend_string@@Base+0x90>
   147fc:	str	r2, [r0, #20]
   14800:	ldr	r5, [r4, #20]
   14804:	ldr	r2, [r4, #24]
   14808:	add	r0, r5, r1
   1480c:	cmp	r0, r2
   14810:	str	r0, [r4, #20]
   14814:	bcc	14838 <flatcc_builder_extend_string@@Base+0x64>
   14818:	add	r1, r0, #1
   1481c:	mov	r0, r4
   14820:	mvn	r2, #3
   14824:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   14828:	mov	r1, r0
   1482c:	mov	r0, #0
   14830:	cmp	r1, #0
   14834:	popne	{r4, r5, fp, pc}
   14838:	ldr	r0, [r4, #16]
   1483c:	add	r0, r0, r5
   14840:	pop	{r4, r5, fp, pc}
   14844:	movw	r0, #33383	; 0x8267
   14848:	movw	r1, #32066	; 0x7d42
   1484c:	movw	r3, #33427	; 0x8293
   14850:	movw	r2, #957	; 0x3bd
   14854:	movt	r0, #1
   14858:	movt	r1, #1
   1485c:	movt	r3, #1
   14860:	bl	12418 <__assert_fail@plt>
   14864:	movw	r0, #36337	; 0x8df1
   14868:	movw	r1, #32066	; 0x7d42
   1486c:	movw	r3, #36364	; 0x8e0c
   14870:	mov	r2, #892	; 0x37c
   14874:	movt	r0, #1
   14878:	movt	r1, #1
   1487c:	movt	r3, #1
   14880:	bl	12418 <__assert_fail@plt>

00014884 <flatcc_builder_append_string@@Base>:
   14884:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14888:	add	fp, sp, #24
   1488c:	mov	r6, r0
   14890:	ldr	r0, [r0, #32]
   14894:	mov	r8, r1
   14898:	ldrh	r1, [r0, #14]
   1489c:	cmp	r1, #6
   148a0:	bne	14918 <flatcc_builder_append_string@@Base+0x94>
   148a4:	ldr	r1, [r0, #20]
   148a8:	mov	r4, r2
   148ac:	adds	r1, r1, r2
   148b0:	bcs	14938 <flatcc_builder_append_string@@Base+0xb4>
   148b4:	str	r1, [r0, #20]
   148b8:	ldr	r5, [r6, #20]
   148bc:	ldr	r1, [r6, #24]
   148c0:	add	r0, r5, r4
   148c4:	cmp	r0, r1
   148c8:	str	r0, [r6, #20]
   148cc:	bcc	148ec <flatcc_builder_append_string@@Base+0x68>
   148d0:	add	r1, r0, #1
   148d4:	mov	r0, r6
   148d8:	mvn	r2, #3
   148dc:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   148e0:	mov	r7, #0
   148e4:	cmp	r0, #0
   148e8:	bne	14910 <flatcc_builder_append_string@@Base+0x8c>
   148ec:	ldr	r0, [r6, #16]
   148f0:	adds	r7, r0, r5
   148f4:	beq	1490c <flatcc_builder_append_string@@Base+0x88>
   148f8:	mov	r0, r7
   148fc:	mov	r1, r8
   14900:	mov	r2, r4
   14904:	bl	12388 <memcpy@plt>
   14908:	b	14910 <flatcc_builder_append_string@@Base+0x8c>
   1490c:	mov	r7, #0
   14910:	mov	r0, r7
   14914:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14918:	movw	r0, #33383	; 0x8267
   1491c:	movw	r1, #32066	; 0x7d42
   14920:	movw	r3, #33490	; 0x82d2
   14924:	movw	r2, #966	; 0x3c6
   14928:	movt	r0, #1
   1492c:	movt	r1, #1
   14930:	movt	r3, #1
   14934:	bl	12418 <__assert_fail@plt>
   14938:	movw	r0, #36337	; 0x8df1
   1493c:	movw	r1, #32066	; 0x7d42
   14940:	movw	r3, #36364	; 0x8e0c
   14944:	mov	r2, #892	; 0x37c
   14948:	movt	r0, #1
   1494c:	movt	r1, #1
   14950:	movt	r3, #1
   14954:	bl	12418 <__assert_fail@plt>

00014958 <flatcc_builder_append_string_str@@Base>:
   14958:	push	{r4, r5, fp, lr}
   1495c:	add	fp, sp, #8
   14960:	mov	r5, r0
   14964:	mov	r0, r1
   14968:	mov	r4, r1
   1496c:	bl	123dc <strlen@plt>
   14970:	mov	r2, r0
   14974:	mov	r0, r5
   14978:	mov	r1, r4
   1497c:	pop	{r4, r5, fp, lr}
   14980:	b	14884 <flatcc_builder_append_string@@Base>

00014984 <flatcc_builder_append_string_strn@@Base>:
   14984:	push	{r4, r5, r6, sl, fp, lr}
   14988:	add	fp, sp, #16
   1498c:	mov	r6, r0
   14990:	mov	r5, r1
   14994:	mov	r0, r1
   14998:	mov	r1, #0
   1499c:	mov	r4, r2
   149a0:	bl	12400 <memchr@plt>
   149a4:	cmp	r0, #0
   149a8:	mov	r1, r5
   149ac:	subne	r4, r0, r5
   149b0:	mov	r0, r6
   149b4:	mov	r2, r4
   149b8:	pop	{r4, r5, r6, sl, fp, lr}
   149bc:	b	14884 <flatcc_builder_append_string@@Base>

000149c0 <flatcc_builder_truncate_vector@@Base>:
   149c0:	push	{fp, lr}
   149c4:	mov	fp, sp
   149c8:	ldr	r2, [r0, #32]
   149cc:	ldrh	r3, [r2, #14]
   149d0:	cmp	r3, #4
   149d4:	bne	14a1c <flatcc_builder_truncate_vector@@Base+0x5c>
   149d8:	ldr	r3, [r2, #20]
   149dc:	cmp	r3, r1
   149e0:	bcc	14a3c <flatcc_builder_truncate_vector@@Base+0x7c>
   149e4:	sub	r3, r3, r1
   149e8:	str	r3, [r2, #20]
   149ec:	ldr	r2, [r0, #32]
   149f0:	ldr	r3, [r0, #20]
   149f4:	ldr	ip, [r0, #16]
   149f8:	ldr	r2, [r2, #16]
   149fc:	mls	r3, r2, r1, r3
   14a00:	mul	r2, r2, r1
   14a04:	mov	r1, #0
   14a08:	str	r3, [r0, #20]
   14a0c:	add	r0, ip, r3
   14a10:	bl	123f4 <memset@plt>
   14a14:	mov	r0, #0
   14a18:	pop	{fp, pc}
   14a1c:	movw	r0, #32869	; 0x8065
   14a20:	movw	r1, #32066	; 0x7d42
   14a24:	movw	r3, #33567	; 0x831f
   14a28:	movw	r2, #985	; 0x3d9
   14a2c:	movt	r0, #1
   14a30:	movt	r1, #1
   14a34:	movt	r3, #1
   14a38:	bl	12418 <__assert_fail@plt>
   14a3c:	movw	r0, #33630	; 0x835e
   14a40:	movw	r1, #32066	; 0x7d42
   14a44:	movw	r3, #33567	; 0x831f
   14a48:	movw	r2, #986	; 0x3da
   14a4c:	movt	r0, #1
   14a50:	movt	r1, #1
   14a54:	movt	r3, #1
   14a58:	bl	12418 <__assert_fail@plt>

00014a5c <flatcc_builder_truncate_offset_vector@@Base>:
   14a5c:	push	{fp, lr}
   14a60:	mov	fp, sp
   14a64:	ldr	r2, [r0, #32]
   14a68:	ldrh	r3, [r2, #14]
   14a6c:	cmp	r3, #5
   14a70:	bne	14ab8 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14a74:	ldr	r3, [r2, #20]
   14a78:	cmp	r3, r1
   14a7c:	bcc	14ad8 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14a80:	sub	r3, r3, r1
   14a84:	str	r3, [r2, #20]
   14a88:	ldr	r2, [r0, #32]
   14a8c:	ldr	r3, [r0, #20]
   14a90:	ldr	ip, [r0, #16]
   14a94:	ldr	r2, [r2, #16]
   14a98:	mls	r3, r2, r1, r3
   14a9c:	mul	r2, r2, r1
   14aa0:	mov	r1, #0
   14aa4:	str	r3, [r0, #20]
   14aa8:	add	r0, ip, r3
   14aac:	bl	123f4 <memset@plt>
   14ab0:	mov	r0, #0
   14ab4:	pop	{fp, pc}
   14ab8:	movw	r0, #33118	; 0x815e
   14abc:	movw	r1, #32066	; 0x7d42
   14ac0:	movw	r3, #33666	; 0x8382
   14ac4:	movw	r2, #994	; 0x3e2
   14ac8:	movt	r0, #1
   14acc:	movt	r1, #1
   14ad0:	movt	r3, #1
   14ad4:	bl	12418 <__assert_fail@plt>
   14ad8:	movw	r0, #33736	; 0x83c8
   14adc:	movw	r1, #32066	; 0x7d42
   14ae0:	movw	r3, #33666	; 0x8382
   14ae4:	movw	r2, #995	; 0x3e3
   14ae8:	movt	r0, #1
   14aec:	movt	r1, #1
   14af0:	movt	r3, #1
   14af4:	bl	12418 <__assert_fail@plt>

00014af8 <flatcc_builder_truncate_string@@Base>:
   14af8:	push	{fp, lr}
   14afc:	mov	fp, sp
   14b00:	mov	r2, r1
   14b04:	ldr	r1, [r0, #32]
   14b08:	ldrh	r3, [r1, #14]
   14b0c:	cmp	r3, #6
   14b10:	bne	14b4c <flatcc_builder_truncate_string@@Base+0x54>
   14b14:	ldr	r3, [r1, #20]
   14b18:	cmp	r3, r2
   14b1c:	bcc	14b6c <flatcc_builder_truncate_string@@Base+0x74>
   14b20:	sub	r3, r3, r2
   14b24:	str	r3, [r1, #20]
   14b28:	ldr	r3, [r0, #20]
   14b2c:	ldr	r1, [r0, #16]
   14b30:	sub	r3, r3, r2
   14b34:	str	r3, [r0, #20]
   14b38:	add	r0, r1, r3
   14b3c:	mov	r1, #0
   14b40:	bl	123f4 <memset@plt>
   14b44:	mov	r0, #0
   14b48:	pop	{fp, pc}
   14b4c:	movw	r0, #33383	; 0x8267
   14b50:	movw	r1, #32066	; 0x7d42
   14b54:	movw	r3, #33795	; 0x8403
   14b58:	movw	r2, #1003	; 0x3eb
   14b5c:	movt	r0, #1
   14b60:	movt	r1, #1
   14b64:	movt	r3, #1
   14b68:	bl	12418 <__assert_fail@plt>
   14b6c:	movw	r0, #33858	; 0x8442
   14b70:	movw	r1, #32066	; 0x7d42
   14b74:	movw	r3, #33795	; 0x8403
   14b78:	mov	r2, #1004	; 0x3ec
   14b7c:	movt	r0, #1
   14b80:	movt	r1, #1
   14b84:	movt	r3, #1
   14b88:	bl	12418 <__assert_fail@plt>

00014b8c <flatcc_builder_start_vector@@Base>:
   14b8c:	push	{r4, r5, r6, r7, fp, lr}
   14b90:	add	fp, sp, #16
   14b94:	mov	r7, #4
   14b98:	cmp	r2, #4
   14b9c:	mov	r6, r1
   14ba0:	mov	r5, r3
   14ba4:	mov	r4, r0
   14ba8:	movls	r2, r7
   14bac:	mov	r1, r2
   14bb0:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   14bb4:	mov	r1, r0
   14bb8:	mvn	r0, #0
   14bbc:	cmp	r1, #0
   14bc0:	popne	{r4, r5, r6, r7, fp, pc}
   14bc4:	ldr	r0, [r4, #32]
   14bc8:	str	r6, [r0, #16]
   14bcc:	mov	r0, #0
   14bd0:	ldr	r1, [r4, #32]
   14bd4:	str	r0, [r1, #20]
   14bd8:	ldr	r1, [r4, #32]
   14bdc:	str	r5, [r1, #24]
   14be0:	ldr	r1, [r4, #32]
   14be4:	strh	r7, [r1, #14]
   14be8:	ldr	r2, [r4, #28]
   14bec:	ldr	r3, [r4, #60]	; 0x3c
   14bf0:	ldr	r7, [r4, #64]	; 0x40
   14bf4:	add	r3, r3, r2
   14bf8:	sub	r2, r7, r2
   14bfc:	str	r3, [r4, #16]
   14c00:	mvn	r3, #3
   14c04:	cmn	r2, #4
   14c08:	movcs	r2, r3
   14c0c:	str	r2, [r4, #24]
   14c10:	str	r3, [r1, #4]
   14c14:	pop	{r4, r5, r6, r7, fp, pc}

00014c18 <flatcc_builder_start_offset_vector@@Base>:
   14c18:	push	{r4, r5, fp, lr}
   14c1c:	add	fp, sp, #8
   14c20:	mov	r1, #4
   14c24:	mov	r4, r0
   14c28:	mov	r5, #4
   14c2c:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   14c30:	mov	r1, r0
   14c34:	mvn	r0, #0
   14c38:	cmp	r1, #0
   14c3c:	popne	{r4, r5, fp, pc}
   14c40:	ldr	r0, [r4, #32]
   14c44:	mov	r2, #5
   14c48:	str	r5, [r0, #16]
   14c4c:	mov	r0, #0
   14c50:	ldr	r1, [r4, #32]
   14c54:	str	r0, [r1, #20]
   14c58:	ldr	r1, [r4, #32]
   14c5c:	strh	r2, [r1, #14]
   14c60:	ldr	r2, [r4, #28]
   14c64:	ldr	r3, [r4, #60]	; 0x3c
   14c68:	ldr	r5, [r4, #64]	; 0x40
   14c6c:	add	r3, r3, r2
   14c70:	sub	r2, r5, r2
   14c74:	str	r3, [r4, #16]
   14c78:	mvn	r3, #3
   14c7c:	cmn	r2, #4
   14c80:	movcs	r2, r3
   14c84:	str	r2, [r4, #24]
   14c88:	str	r3, [r1, #4]
   14c8c:	pop	{r4, r5, fp, pc}

00014c90 <flatcc_builder_create_offset_vector@@Base>:
   14c90:	push	{r4, r5, r6, sl, fp, lr}
   14c94:	add	fp, sp, #16
   14c98:	mov	r6, r2
   14c9c:	mov	r5, r1
   14ca0:	mov	r4, r0
   14ca4:	bl	14c18 <flatcc_builder_start_offset_vector@@Base>
   14ca8:	cmp	r0, #0
   14cac:	beq	14cb8 <flatcc_builder_create_offset_vector@@Base+0x28>
   14cb0:	mov	r0, #0
   14cb4:	pop	{r4, r5, r6, sl, fp, pc}
   14cb8:	mov	r0, r4
   14cbc:	mov	r1, r6
   14cc0:	bl	145d4 <flatcc_builder_extend_offset_vector@@Base>
   14cc4:	cmp	r0, #0
   14cc8:	beq	14cb0 <flatcc_builder_create_offset_vector@@Base+0x20>
   14ccc:	lsl	r2, r6, #2
   14cd0:	mov	r1, r5
   14cd4:	bl	12388 <memcpy@plt>
   14cd8:	mov	r0, r4
   14cdc:	pop	{r4, r5, r6, sl, fp, lr}
   14ce0:	b	14ce4 <flatcc_builder_end_offset_vector@@Base>

00014ce4 <flatcc_builder_end_offset_vector@@Base>:
   14ce4:	push	{r4, r5, fp, lr}
   14ce8:	add	fp, sp, #8
   14cec:	mov	r4, r0
   14cf0:	ldr	r0, [r0, #32]
   14cf4:	ldrh	r1, [r0, #14]
   14cf8:	cmp	r1, #5
   14cfc:	bne	14d9c <flatcc_builder_end_offset_vector@@Base+0xb8>
   14d00:	ldr	r2, [r0, #20]
   14d04:	ldr	r1, [r4, #16]
   14d08:	mov	r0, r4
   14d0c:	mov	r3, #0
   14d10:	bl	15d04 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14d14:	mov	r5, r0
   14d18:	cmp	r0, #0
   14d1c:	beq	14d94 <flatcc_builder_end_offset_vector@@Base+0xb0>
   14d20:	ldr	r0, [r4, #16]
   14d24:	ldr	r2, [r4, #20]
   14d28:	mov	r1, #0
   14d2c:	bl	123f4 <memset@plt>
   14d30:	ldr	r0, [r4, #32]
   14d34:	ldr	r1, [r4, #60]	; 0x3c
   14d38:	ldr	ip, [r4, #64]	; 0x40
   14d3c:	ldr	r3, [r0, #8]
   14d40:	str	r3, [r4, #20]
   14d44:	ldr	r3, [r0]
   14d48:	str	r3, [r4, #28]
   14d4c:	add	r1, r1, r3
   14d50:	ldr	r2, [r0, #4]
   14d54:	str	r1, [r4, #16]
   14d58:	sub	r1, ip, r3
   14d5c:	cmp	r1, r2
   14d60:	movhi	r1, r2
   14d64:	str	r1, [r4, #24]
   14d68:	ldrh	r1, [r4, #130]	; 0x82
   14d6c:	ldrh	r2, [r4, #128]	; 0x80
   14d70:	cmp	r2, r1
   14d74:	strhcc	r1, [r4, #128]	; 0x80
   14d78:	ldrh	r1, [r0, #12]
   14d7c:	sub	r0, r0, #36	; 0x24
   14d80:	str	r0, [r4, #32]
   14d84:	strh	r1, [r4, #130]	; 0x82
   14d88:	ldr	r0, [r4, #156]	; 0x9c
   14d8c:	sub	r0, r0, #1
   14d90:	str	r0, [r4, #156]	; 0x9c
   14d94:	mov	r0, r5
   14d98:	pop	{r4, r5, fp, pc}
   14d9c:	movw	r0, #33118	; 0x815e
   14da0:	movw	r1, #32066	; 0x7d42
   14da4:	movw	r3, #34701	; 0x878d
   14da8:	movw	r2, #1480	; 0x5c8
   14dac:	movt	r0, #1
   14db0:	movt	r1, #1
   14db4:	movt	r3, #1
   14db8:	bl	12418 <__assert_fail@plt>

00014dbc <flatcc_builder_start_string@@Base>:
   14dbc:	push	{r4, r5, fp, lr}
   14dc0:	add	fp, sp, #8
   14dc4:	mov	r1, #1
   14dc8:	mov	r4, r0
   14dcc:	mov	r5, #1
   14dd0:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   14dd4:	mov	r1, r0
   14dd8:	mvn	r0, #0
   14ddc:	cmp	r1, #0
   14de0:	popne	{r4, r5, fp, pc}
   14de4:	ldr	r0, [r4, #32]
   14de8:	mov	r2, #6
   14dec:	str	r5, [r0, #16]
   14df0:	mov	r0, #0
   14df4:	ldr	r1, [r4, #32]
   14df8:	str	r0, [r1, #20]
   14dfc:	ldr	r1, [r4, #32]
   14e00:	strh	r2, [r1, #14]
   14e04:	ldr	r2, [r4, #28]
   14e08:	ldr	r3, [r4, #60]	; 0x3c
   14e0c:	ldr	r5, [r4, #64]	; 0x40
   14e10:	add	r3, r3, r2
   14e14:	sub	r2, r5, r2
   14e18:	str	r3, [r4, #16]
   14e1c:	mvn	r3, #3
   14e20:	cmn	r2, #4
   14e24:	movcs	r2, r3
   14e28:	str	r2, [r4, #24]
   14e2c:	str	r3, [r1, #4]
   14e30:	pop	{r4, r5, fp, pc}

00014e34 <flatcc_builder_reserve_table@@Base>:
   14e34:	push	{r4, r5, r6, sl, fp, lr}
   14e38:	add	fp, sp, #16
   14e3c:	sub	sp, sp, #8
   14e40:	cmn	r1, #1
   14e44:	ble	14f18 <flatcc_builder_reserve_table@@Base+0xe4>
   14e48:	mov	r4, r0
   14e4c:	ldr	r0, [r0, #32]
   14e50:	mov	r5, r1
   14e54:	ldr	r1, [r4, #56]	; 0x38
   14e58:	ldrh	r2, [r0, #28]
   14e5c:	ldr	r0, [r0, #16]
   14e60:	add	r6, r0, r2, lsl #1
   14e64:	add	r0, r6, r5, lsl #1
   14e68:	add	r2, r0, #4
   14e6c:	cmp	r2, r1
   14e70:	bls	14e98 <flatcc_builder_reserve_table@@Base+0x64>
   14e74:	ldr	r0, [r4, #40]	; 0x28
   14e78:	ldr	ip, [r4, #48]	; 0x30
   14e7c:	mov	r3, #0
   14e80:	add	r1, r4, #52	; 0x34
   14e84:	str	r3, [sp]
   14e88:	mov	r3, #1
   14e8c:	blx	ip
   14e90:	cmp	r0, #0
   14e94:	bne	14f38 <flatcc_builder_reserve_table@@Base+0x104>
   14e98:	ldr	r0, [r4, #52]	; 0x34
   14e9c:	adds	r0, r0, r6
   14ea0:	str	r0, [r4, #4]
   14ea4:	beq	14f0c <flatcc_builder_reserve_table@@Base+0xd8>
   14ea8:	add	r0, r0, #4
   14eac:	lsl	r1, r5, #1
   14eb0:	str	r0, [r4, #4]
   14eb4:	ldr	r0, [r4, #32]
   14eb8:	ldr	r3, [r4, #80]	; 0x50
   14ebc:	ldr	r5, [r0, #20]
   14ec0:	orr	r0, r1, #1
   14ec4:	add	r2, r5, r0
   14ec8:	cmp	r2, r3
   14ecc:	bls	14ef4 <flatcc_builder_reserve_table@@Base+0xc0>
   14ed0:	ldr	r0, [r4, #40]	; 0x28
   14ed4:	ldr	r6, [r4, #48]	; 0x30
   14ed8:	mov	r3, #3
   14edc:	add	r1, r4, #76	; 0x4c
   14ee0:	str	r3, [sp]
   14ee4:	mov	r3, #0
   14ee8:	blx	r6
   14eec:	cmp	r0, #0
   14ef0:	bne	14f38 <flatcc_builder_reserve_table@@Base+0x104>
   14ef4:	ldr	r0, [r4, #76]	; 0x4c
   14ef8:	adds	r0, r0, r5
   14efc:	str	r0, [r4]
   14f00:	mov	r0, #0
   14f04:	mvneq	r0, #0
   14f08:	b	14f10 <flatcc_builder_reserve_table@@Base+0xdc>
   14f0c:	mvn	r0, #0
   14f10:	sub	sp, fp, #16
   14f14:	pop	{r4, r5, r6, sl, fp, pc}
   14f18:	movw	r0, #33957	; 0x84a5
   14f1c:	movw	r1, #32066	; 0x7d42
   14f20:	movw	r3, #33892	; 0x8464
   14f24:	movw	r2, #1065	; 0x429
   14f28:	movt	r0, #1
   14f2c:	movt	r1, #1
   14f30:	movt	r3, #1
   14f34:	bl	12418 <__assert_fail@plt>
   14f38:	movw	r0, #36584	; 0x8ee8
   14f3c:	movw	r1, #32066	; 0x7d42
   14f40:	movw	r3, #36130	; 0x8d22
   14f44:	mov	r2, #308	; 0x134
   14f48:	movt	r0, #1
   14f4c:	movt	r1, #1
   14f50:	movt	r3, #1
   14f54:	bl	12418 <__assert_fail@plt>

00014f58 <flatcc_builder_start_table@@Base>:
   14f58:	push	{r4, r5, r6, r7, fp, lr}
   14f5c:	add	fp, sp, #16
   14f60:	sub	sp, sp, #8
   14f64:	mov	r6, r1
   14f68:	mov	r1, #4
   14f6c:	mov	r4, r0
   14f70:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   14f74:	mvn	r5, #0
   14f78:	cmp	r0, #0
   14f7c:	beq	14f8c <flatcc_builder_start_table@@Base+0x34>
   14f80:	mov	r0, r5
   14f84:	sub	sp, fp, #16
   14f88:	pop	{r4, r5, r6, r7, fp, pc}
   14f8c:	mov	r1, r4
   14f90:	ldr	r2, [r4, #4]
   14f94:	ldr	r3, [r4, #32]
   14f98:	ldr	r0, [r1, #52]!	; 0x34
   14f9c:	sub	r0, r2, r0
   14fa0:	str	r0, [r3, #16]
   14fa4:	ldr	r0, [r4]
   14fa8:	ldr	r3, [r4, #76]	; 0x4c
   14fac:	ldr	r2, [r4, #32]
   14fb0:	sub	r0, r0, r3
   14fb4:	mov	r3, #0
   14fb8:	str	r0, [r2, #20]
   14fbc:	ldr	r0, [r4, #12]
   14fc0:	ldr	r2, [r4, #32]
   14fc4:	str	r0, [r2, #24]
   14fc8:	ldr	r0, [r4, #32]
   14fcc:	ldrh	r2, [r4, #8]
   14fd0:	strh	r2, [r0, #28]
   14fd4:	movw	r0, #15186	; 0x3b52
   14fd8:	strh	r3, [r4, #8]
   14fdc:	mov	r2, #3
   14fe0:	movt	r0, #12137	; 0x2f69
   14fe4:	str	r0, [r4, #12]
   14fe8:	ldr	r0, [r4, #32]
   14fec:	strh	r2, [r0, #14]
   14ff0:	ldrh	r2, [r0, #28]
   14ff4:	ldr	r0, [r0, #16]
   14ff8:	add	r7, r0, r2, lsl #1
   14ffc:	add	r0, r7, r6, lsl #1
   15000:	add	r2, r0, #4
   15004:	ldr	r0, [r4, #56]	; 0x38
   15008:	cmp	r2, r0
   1500c:	bls	1502c <flatcc_builder_start_table@@Base+0xd4>
   15010:	ldr	r0, [r4, #40]	; 0x28
   15014:	ldr	ip, [r4, #48]	; 0x30
   15018:	str	r3, [sp]
   1501c:	mov	r3, #1
   15020:	blx	ip
   15024:	cmp	r0, #0
   15028:	bne	150d0 <flatcc_builder_start_table@@Base+0x178>
   1502c:	ldr	r0, [r4, #52]	; 0x34
   15030:	adds	r0, r0, r7
   15034:	str	r0, [r4, #4]
   15038:	beq	14f80 <flatcc_builder_start_table@@Base+0x28>
   1503c:	add	r0, r0, #4
   15040:	lsl	r1, r6, #1
   15044:	str	r0, [r4, #4]
   15048:	ldr	r0, [r4, #32]
   1504c:	ldr	r3, [r4, #80]	; 0x50
   15050:	ldr	r6, [r0, #20]
   15054:	orr	r0, r1, #1
   15058:	add	r2, r6, r0
   1505c:	cmp	r2, r3
   15060:	bls	15088 <flatcc_builder_start_table@@Base+0x130>
   15064:	ldr	r0, [r4, #40]	; 0x28
   15068:	ldr	r7, [r4, #48]	; 0x30
   1506c:	mov	r3, #3
   15070:	add	r1, r4, #76	; 0x4c
   15074:	str	r3, [sp]
   15078:	mov	r3, #0
   1507c:	blx	r7
   15080:	cmp	r0, #0
   15084:	bne	150d0 <flatcc_builder_start_table@@Base+0x178>
   15088:	ldr	r0, [r4, #76]	; 0x4c
   1508c:	adds	r0, r0, r6
   15090:	str	r0, [r4]
   15094:	beq	14f80 <flatcc_builder_start_table@@Base+0x28>
   15098:	ldr	r0, [r4, #28]
   1509c:	ldr	r2, [r4, #60]	; 0x3c
   150a0:	ldr	r3, [r4, #64]	; 0x40
   150a4:	ldr	r1, [r4, #32]
   150a8:	mov	r5, #0
   150ac:	add	r2, r2, r0
   150b0:	sub	r0, r3, r0
   150b4:	str	r2, [r4, #16]
   150b8:	movw	r2, #65532	; 0xfffc
   150bc:	cmp	r0, r2
   150c0:	movcs	r0, r2
   150c4:	str	r0, [r4, #24]
   150c8:	str	r2, [r1, #4]
   150cc:	b	14f80 <flatcc_builder_start_table@@Base+0x28>
   150d0:	movw	r0, #36584	; 0x8ee8
   150d4:	movw	r1, #32066	; 0x7d42
   150d8:	movw	r3, #36130	; 0x8d22
   150dc:	mov	r2, #308	; 0x134
   150e0:	movt	r0, #1
   150e4:	movt	r1, #1
   150e8:	movt	r3, #1
   150ec:	bl	12418 <__assert_fail@plt>

000150f0 <flatcc_builder_create_vtable@@Base>:
   150f0:	push	{r4, r5, fp, lr}
   150f4:	add	fp, sp, #8
   150f8:	sub	sp, sp, #80	; 0x50
   150fc:	mov	r3, r2
   15100:	mov	r2, #0
   15104:	mov	r4, r0
   15108:	cmp	r3, #0
   1510c:	str	r2, [sp, #12]
   15110:	str	r2, [sp, #8]
   15114:	movne	r2, #1
   15118:	strne	r1, [sp, #16]
   1511c:	strne	r3, [sp, #8]
   15120:	strne	r3, [sp, #20]
   15124:	strne	r2, [sp, #12]
   15128:	ldr	r0, [r4, #152]	; 0x98
   1512c:	cmp	r0, #0
   15130:	bne	15140 <flatcc_builder_create_vtable@@Base+0x50>
   15134:	ldr	r0, [r4, #180]	; 0xb4
   15138:	cmp	r0, #0
   1513c:	beq	15190 <flatcc_builder_create_vtable@@Base+0xa0>
   15140:	cmp	r3, #0
   15144:	beq	151d0 <flatcc_builder_create_vtable@@Base+0xe0>
   15148:	ldr	r0, [r4, #136]	; 0x88
   1514c:	ldr	ip, [r4, #44]	; 0x2c
   15150:	add	r1, sp, #8
   15154:	add	r1, r1, #8
   15158:	sub	r5, r0, r3
   1515c:	ldr	r0, [r4, #36]	; 0x24
   15160:	str	r3, [sp]
   15164:	mov	r3, r5
   15168:	blx	ip
   1516c:	cmp	r0, #0
   15170:	bne	151f0 <flatcc_builder_create_vtable@@Base+0x100>
   15174:	cmp	r5, #0
   15178:	str	r5, [r4, #136]	; 0x88
   1517c:	beq	15188 <flatcc_builder_create_vtable@@Base+0x98>
   15180:	add	r0, r5, #1
   15184:	b	151c8 <flatcc_builder_create_vtable@@Base+0xd8>
   15188:	mov	r0, #0
   1518c:	b	151c8 <flatcc_builder_create_vtable@@Base+0xd8>
   15190:	ldr	r5, [r4, #140]	; 0x8c
   15194:	ldr	r0, [r4, #36]	; 0x24
   15198:	ldr	ip, [r4, #44]	; 0x2c
   1519c:	add	r1, r5, r3
   151a0:	str	r1, [r4, #140]	; 0x8c
   151a4:	add	r1, sp, #8
   151a8:	str	r3, [sp]
   151ac:	mov	r3, r5
   151b0:	add	r1, r1, #8
   151b4:	blx	ip
   151b8:	cmp	r0, #0
   151bc:	bne	15210 <flatcc_builder_create_vtable@@Base+0x120>
   151c0:	adds	r0, r5, #1
   151c4:	moveq	r0, #0
   151c8:	sub	sp, fp, #8
   151cc:	pop	{r4, r5, fp, pc}
   151d0:	movw	r0, #36584	; 0x8ee8
   151d4:	movw	r1, #32066	; 0x7d42
   151d8:	movw	r3, #36263	; 0x8da7
   151dc:	movw	r2, #647	; 0x287
   151e0:	movt	r0, #1
   151e4:	movt	r1, #1
   151e8:	movt	r3, #1
   151ec:	bl	12418 <__assert_fail@plt>
   151f0:	movw	r0, #36584	; 0x8ee8
   151f4:	movw	r1, #32066	; 0x7d42
   151f8:	movw	r3, #36263	; 0x8da7
   151fc:	movw	r2, #651	; 0x28b
   15200:	movt	r0, #1
   15204:	movt	r1, #1
   15208:	movt	r3, #1
   1520c:	bl	12418 <__assert_fail@plt>
   15210:	movw	r0, #36584	; 0x8ee8
   15214:	movw	r1, #32066	; 0x7d42
   15218:	movw	r3, #36451	; 0x8e63
   1521c:	movw	r2, #677	; 0x2a5
   15220:	movt	r0, #1
   15224:	movt	r1, #1
   15228:	movt	r3, #1
   1522c:	bl	12418 <__assert_fail@plt>

00015230 <flatcc_builder_create_cached_vtable@@Base>:
   15230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15234:	add	fp, sp, #28
   15238:	sub	sp, sp, #20
   1523c:	mov	sl, r0
   15240:	ldr	r0, [r0, #116]	; 0x74
   15244:	mov	r8, r3
   15248:	mov	r5, r2
   1524c:	str	r1, [sp, #16]
   15250:	cmp	r0, #0
   15254:	beq	152f8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15258:	ldr	r1, [sl, #92]	; 0x5c
   1525c:	rsb	r0, r0, #32
   15260:	lsr	r0, r8, r0
   15264:	add	r6, r1, r0, lsl #2
   15268:	cmp	r6, #0
   1526c:	beq	153bc <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15270:	ldr	r7, [r6]
   15274:	str	r6, [sp, #12]
   15278:	cmp	r7, #0
   1527c:	beq	153c4 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15280:	ldr	r4, [sl, #68]	; 0x44
   15284:	ldr	r8, [sl, #100]	; 0x64
   15288:	mov	r0, #0
   1528c:	str	r0, [sp, #8]
   15290:	add	r9, r8, r7
   15294:	mov	r1, r4
   15298:	ldr	r0, [r9, #8]
   1529c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   152a0:	cmp	r0, r5
   152a4:	bne	152bc <flatcc_builder_create_cached_vtable@@Base+0x8c>
   152a8:	ldr	r0, [sp, #16]
   152ac:	mov	r2, r5
   152b0:	bl	12394 <memcmp@plt>
   152b4:	cmp	r0, #0
   152b8:	beq	152d0 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   152bc:	ldr	r7, [r9, #12]!
   152c0:	cmp	r7, #0
   152c4:	mov	r6, r9
   152c8:	bne	15290 <flatcc_builder_create_cached_vtable@@Base+0x60>
   152cc:	b	153b4 <flatcc_builder_create_cached_vtable@@Base+0x184>
   152d0:	ldr	r0, [sl, #152]	; 0x98
   152d4:	ldr	r1, [r9, #4]
   152d8:	cmp	r1, r0
   152dc:	beq	15528 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   152e0:	mov	r6, r9
   152e4:	mov	r0, r9
   152e8:	ldr	r7, [r6, #12]!
   152ec:	cmp	r7, #0
   152f0:	bne	1528c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   152f4:	b	153c8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   152f8:	ldr	r0, [sl, #124]	; 0x7c
   152fc:	cmp	r0, #0
   15300:	bne	15574 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15304:	ldr	r0, [sl, #104]	; 0x68
   15308:	add	r7, sl, #100	; 0x64
   1530c:	cmp	r0, #15
   15310:	bhi	1533c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15314:	ldr	r0, [sl, #40]	; 0x28
   15318:	ldr	r6, [sl, #48]	; 0x30
   1531c:	mov	r1, #6
   15320:	mov	r2, #16
   15324:	mov	r3, #0
   15328:	str	r1, [sp]
   1532c:	mov	r1, r7
   15330:	blx	r6
   15334:	cmp	r0, #0
   15338:	bne	15554 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1533c:	ldr	r0, [r7]
   15340:	mov	r7, #0
   15344:	cmp	r0, #0
   15348:	beq	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1534c:	mov	r0, #16
   15350:	mov	r2, #5
   15354:	add	r1, sl, #92	; 0x5c
   15358:	mov	r3, #1
   1535c:	mov	r4, #256	; 0x100
   15360:	str	r0, [sl, #124]	; 0x7c
   15364:	ldr	r0, [sl, #40]	; 0x28
   15368:	ldr	r6, [sl, #48]	; 0x30
   1536c:	str	r2, [sp]
   15370:	mov	r2, #256	; 0x100
   15374:	blx	r6
   15378:	cmp	r0, #0
   1537c:	bne	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15380:	ldr	r0, [sl, #96]	; 0x60
   15384:	mov	r1, r4
   15388:	lsl	r4, r4, #1
   1538c:	cmp	r0, r1, lsl #1
   15390:	bcs	15384 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15394:	lsr	r1, r1, #2
   15398:	mvn	r0, #0
   1539c:	mov	r2, #1
   153a0:	add	r0, r0, #1
   153a4:	cmp	r1, r2, lsl r0
   153a8:	bhi	153a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   153ac:	str	r0, [sl, #116]	; 0x74
   153b0:	b	15258 <flatcc_builder_create_cached_vtable@@Base+0x28>
   153b4:	ldr	r9, [sp, #8]
   153b8:	b	153c8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   153bc:	mov	r7, #0
   153c0:	b	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   153c4:	mov	r9, #0
   153c8:	ldr	r4, [sl, #124]	; 0x7c
   153cc:	ldr	r0, [sl, #104]	; 0x68
   153d0:	add	r7, sl, #100	; 0x64
   153d4:	add	r2, r4, #16
   153d8:	cmp	r2, r0
   153dc:	bls	15404 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   153e0:	ldr	r0, [sl, #40]	; 0x28
   153e4:	ldr	r6, [sl, #48]	; 0x30
   153e8:	mov	r1, #6
   153ec:	mov	r3, #0
   153f0:	str	r1, [sp]
   153f4:	mov	r1, r7
   153f8:	blx	r6
   153fc:	cmp	r0, #0
   15400:	bne	15554 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15404:	ldr	r0, [r7]
   15408:	mov	r7, #0
   1540c:	adds	r4, r0, r4
   15410:	beq	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15414:	ldr	r0, [sl, #124]	; 0x7c
   15418:	ldr	r1, [sl, #152]	; 0x98
   1541c:	add	r2, r0, #16
   15420:	str	r2, [sl, #124]	; 0x7c
   15424:	ldr	r2, [sp, #12]
   15428:	str	r1, [r4, #4]
   1542c:	ldr	r1, [r2]
   15430:	str	r1, [r4, #12]
   15434:	ldr	r1, [sp, #16]
   15438:	str	r0, [r2]
   1543c:	mov	r0, sl
   15440:	mov	r2, r5
   15444:	bl	150f0 <flatcc_builder_create_vtable@@Base>
   15448:	cmp	r0, #0
   1544c:	str	r0, [r4]
   15450:	beq	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15454:	cmp	r9, #0
   15458:	beq	15474 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1545c:	ldr	r0, [r9, #8]
   15460:	str	r0, [r4, #8]
   15464:	ldr	r7, [r4]
   15468:	mov	r0, r7
   1546c:	sub	sp, fp, #28
   15470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15474:	ldr	r6, [sl, #120]	; 0x78
   15478:	ldr	r0, [sl, #172]	; 0xac
   1547c:	add	r2, r6, r5
   15480:	cmp	r0, #0
   15484:	beq	154c0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15488:	cmp	r0, r2
   1548c:	bcs	154c0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15490:	ldr	r0, [sl, #116]	; 0x74
   15494:	cmp	r0, #0
   15498:	beq	15464 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1549c:	ldr	r0, [sl, #92]	; 0x5c
   154a0:	ldr	r2, [sl, #96]	; 0x60
   154a4:	mov	r1, #0
   154a8:	mov	r5, #0
   154ac:	bl	123f4 <memset@plt>
   154b0:	mov	r0, #16
   154b4:	str	r5, [sl, #120]	; 0x78
   154b8:	str	r0, [sl, #124]	; 0x7c
   154bc:	b	15464 <flatcc_builder_create_cached_vtable@@Base+0x234>
   154c0:	ldr	r0, [sl, #72]	; 0x48
   154c4:	add	r7, sl, #68	; 0x44
   154c8:	cmp	r2, r0
   154cc:	bls	154f4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   154d0:	ldr	r0, [sl, #40]	; 0x28
   154d4:	ldr	ip, [sl, #48]	; 0x30
   154d8:	mov	r1, #2
   154dc:	mov	r3, #0
   154e0:	str	r1, [sp]
   154e4:	mov	r1, r7
   154e8:	blx	ip
   154ec:	cmp	r0, #0
   154f0:	bne	15554 <flatcc_builder_create_cached_vtable@@Base+0x324>
   154f4:	ldr	r0, [r7]
   154f8:	adds	r0, r0, r6
   154fc:	beq	15520 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15500:	ldr	r1, [sl, #120]	; 0x78
   15504:	mov	r2, r5
   15508:	str	r1, [r4, #8]
   1550c:	add	r1, r1, r5
   15510:	str	r1, [sl, #120]	; 0x78
   15514:	ldr	r1, [sp, #16]
   15518:	bl	12388 <memcpy@plt>
   1551c:	b	15464 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15520:	mvn	r7, #0
   15524:	b	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15528:	ldr	r0, [sp, #12]
   1552c:	cmp	r6, r0
   15530:	beq	1554c <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15534:	mov	r1, r0
   15538:	ldr	r0, [r9, #12]
   1553c:	str	r0, [r6]
   15540:	ldr	r0, [r1]
   15544:	str	r0, [r9, #12]
   15548:	str	r7, [r1]
   1554c:	ldr	r7, [r9]
   15550:	b	15468 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15554:	movw	r0, #36584	; 0x8ee8
   15558:	movw	r1, #32066	; 0x7d42
   1555c:	movw	r3, #36130	; 0x8d22
   15560:	mov	r2, #308	; 0x134
   15564:	movt	r0, #1
   15568:	movt	r1, #1
   1556c:	movt	r3, #1
   15570:	bl	12418 <__assert_fail@plt>
   15574:	movw	r0, #36524	; 0x8eac
   15578:	movw	r1, #32066	; 0x7d42
   1557c:	movw	r3, #36539	; 0x8ebb
   15580:	movw	r2, #342	; 0x156
   15584:	movt	r0, #1
   15588:	movt	r1, #1
   1558c:	movt	r3, #1
   15590:	bl	12418 <__assert_fail@plt>

00015594 <flatcc_builder_create_table@@Base>:
   15594:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15598:	add	fp, sp, #24
   1559c:	sub	sp, sp, #80	; 0x50
   155a0:	ldr	r5, [fp, #12]
   155a4:	cmn	r5, #1
   155a8:	ble	156fc <flatcc_builder_create_table@@Base+0x168>
   155ac:	ldr	ip, [fp, #16]
   155b0:	tst	ip, #1
   155b4:	beq	1571c <flatcc_builder_create_table@@Base+0x188>
   155b8:	mov	r8, r0
   155bc:	ldrh	r0, [r0, #128]	; 0x80
   155c0:	cmp	r3, #4
   155c4:	movls	r3, #4
   155c8:	cmp	r0, r3
   155cc:	strhcc	r3, [r8, #128]	; 0x80
   155d0:	sub	r3, r3, #1
   155d4:	cmp	r5, #1
   155d8:	ldr	r4, [r8, #136]	; 0x88
   155dc:	sub	r0, r4, r2
   155e0:	and	r0, r0, r3
   155e4:	add	r3, ip, r0
   155e8:	mvn	ip, #3
   155ec:	sub	r6, ip, r2
   155f0:	add	r4, r6, r4
   155f4:	add	r6, r4, #1
   155f8:	sub	r3, r6, r3
   155fc:	str	r3, [fp, #-28]	; 0xffffffe4
   15600:	blt	1562c <flatcc_builder_create_table@@Base+0x98>
   15604:	ldr	r3, [fp, #8]
   15608:	sub	r6, r4, r0
   1560c:	sub	r4, ip, r6
   15610:	ldrh	r6, [r3], #2
   15614:	subs	r5, r5, #1
   15618:	ldr	r7, [r6, r1]
   1561c:	add	r7, r4, r7
   15620:	sub	r7, r7, r6
   15624:	str	r7, [r6, r1]
   15628:	bne	15610 <flatcc_builder_create_table@@Base+0x7c>
   1562c:	sub	r3, fp, #28
   15630:	mov	r4, #4
   15634:	cmp	r2, #0
   15638:	str	r3, [sp, #12]
   1563c:	mov	r3, #1
   15640:	str	r4, [sp, #4]
   15644:	str	r4, [sp, #16]
   15648:	str	r3, [sp, #8]
   1564c:	beq	15668 <flatcc_builder_create_table@@Base+0xd4>
   15650:	mov	r3, #2
   15654:	add	r4, r2, #4
   15658:	str	r1, [sp, #20]
   1565c:	str	r2, [sp, #24]
   15660:	str	r3, [sp, #8]
   15664:	str	r4, [sp, #4]
   15668:	cmp	r0, #0
   1566c:	beq	15698 <flatcc_builder_create_table@@Base+0x104>
   15670:	add	r1, sp, #4
   15674:	movw	r2, #31536	; 0x7b30
   15678:	add	r4, r4, r0
   1567c:	add	r1, r1, r3, lsl #3
   15680:	add	r3, r3, #1
   15684:	movt	r2, #1
   15688:	str	r4, [sp, #4]
   1568c:	str	r2, [r1, #8]
   15690:	str	r0, [r1, #12]
   15694:	str	r3, [sp, #8]
   15698:	cmp	r4, #0
   1569c:	ble	1573c <flatcc_builder_create_table@@Base+0x1a8>
   156a0:	ldr	r0, [r8, #136]	; 0x88
   156a4:	ldr	r7, [r8, #44]	; 0x2c
   156a8:	add	r1, sp, #4
   156ac:	mov	r2, r3
   156b0:	add	r1, r1, #8
   156b4:	sub	r5, r0, r4
   156b8:	ldr	r0, [r8, #36]	; 0x24
   156bc:	str	r4, [sp]
   156c0:	mov	r3, r5
   156c4:	blx	r7
   156c8:	cmp	r0, #0
   156cc:	streq	r5, [r8, #136]	; 0x88
   156d0:	moveq	r0, r5
   156d4:	subeq	sp, fp, #24
   156d8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   156dc:	movw	r0, #36584	; 0x8ee8
   156e0:	movw	r1, #32066	; 0x7d42
   156e4:	movw	r3, #36263	; 0x8da7
   156e8:	movw	r2, #651	; 0x28b
   156ec:	movt	r0, #1
   156f0:	movt	r1, #1
   156f4:	movt	r3, #1
   156f8:	bl	12418 <__assert_fail@plt>
   156fc:	movw	r0, #33950	; 0x849e
   15700:	movw	r1, #32066	; 0x7d42
   15704:	movw	r3, #33968	; 0x84b0
   15708:	movw	r2, #1237	; 0x4d5
   1570c:	movt	r0, #1
   15710:	movt	r1, #1
   15714:	movt	r3, #1
   15718:	bl	12418 <__assert_fail@plt>
   1571c:	movw	r0, #34124	; 0x854c
   15720:	movw	r1, #32066	; 0x7d42
   15724:	movw	r3, #33968	; 0x84b0
   15728:	movw	r2, #1243	; 0x4db
   1572c:	movt	r0, #1
   15730:	movt	r1, #1
   15734:	movt	r3, #1
   15738:	bl	12418 <__assert_fail@plt>
   1573c:	movw	r0, #36584	; 0x8ee8
   15740:	movw	r1, #32066	; 0x7d42
   15744:	movw	r3, #36263	; 0x8da7
   15748:	movw	r2, #647	; 0x287
   1574c:	movt	r0, #1
   15750:	movt	r1, #1
   15754:	movt	r3, #1
   15758:	bl	12418 <__assert_fail@plt>

0001575c <flatcc_builder_check_required_field@@Base>:
   1575c:	ldr	r2, [r0, #32]
   15760:	ldrh	r2, [r2, #14]
   15764:	cmp	r2, #3
   15768:	bne	15798 <flatcc_builder_check_required_field@@Base+0x3c>
   1576c:	ldrh	r3, [r0, #8]
   15770:	mov	r2, #0
   15774:	cmp	r3, r1
   15778:	bls	15790 <flatcc_builder_check_required_field@@Base+0x34>
   1577c:	ldr	r0, [r0, #4]
   15780:	add	r0, r0, r1, lsl #1
   15784:	ldrh	r2, [r0]
   15788:	cmp	r2, #0
   1578c:	movwne	r2, #1
   15790:	mov	r0, r2
   15794:	bx	lr
   15798:	push	{fp, lr}
   1579c:	mov	fp, sp
   157a0:	movw	r0, #34135	; 0x8557
   157a4:	movw	r1, #32066	; 0x7d42
   157a8:	movw	r3, #34178	; 0x8582
   157ac:	movw	r2, #1272	; 0x4f8
   157b0:	movt	r0, #1
   157b4:	movt	r1, #1
   157b8:	movt	r3, #1
   157bc:	bl	12418 <__assert_fail@plt>

000157c0 <flatcc_builder_check_union_field@@Base>:
   157c0:	mov	r2, r0
   157c4:	ldr	r0, [r0, #32]
   157c8:	ldrh	r0, [r0, #14]
   157cc:	cmp	r0, #3
   157d0:	bne	15830 <flatcc_builder_check_union_field@@Base+0x70>
   157d4:	cmp	r1, #0
   157d8:	mov	r0, #0
   157dc:	ldrhne	r3, [r2, #8]
   157e0:	cmpne	r3, r1
   157e4:	bhi	157ec <flatcc_builder_check_union_field@@Base+0x2c>
   157e8:	bx	lr
   157ec:	ldr	r0, [r2, #4]
   157f0:	add	r0, r0, r1, lsl #1
   157f4:	ldrh	r1, [r0, #-2]
   157f8:	cmp	r1, #0
   157fc:	beq	15820 <flatcc_builder_check_union_field@@Base+0x60>
   15800:	ldr	r2, [r2, #16]
   15804:	ldrh	r0, [r0]
   15808:	ldrb	r1, [r2, r1]
   1580c:	cmp	r1, #0
   15810:	beq	15824 <flatcc_builder_check_union_field@@Base+0x64>
   15814:	cmp	r0, #0
   15818:	movwne	r0, #1
   1581c:	bx	lr
   15820:	ldrh	r0, [r0]
   15824:	clz	r0, r0
   15828:	lsr	r0, r0, #5
   1582c:	bx	lr
   15830:	push	{fp, lr}
   15834:	mov	fp, sp
   15838:	movw	r0, #34135	; 0x8557
   1583c:	movw	r1, #32066	; 0x7d42
   15840:	movw	r3, #34261	; 0x85d5
   15844:	movw	r2, #1279	; 0x4ff
   15848:	movt	r0, #1
   1584c:	movt	r1, #1
   15850:	movt	r3, #1
   15854:	bl	12418 <__assert_fail@plt>

00015858 <flatcc_builder_check_required@@Base>:
   15858:	push	{fp, lr}
   1585c:	mov	fp, sp
   15860:	mov	r3, r0
   15864:	ldr	r0, [r0, #32]
   15868:	ldrh	r0, [r0, #14]
   1586c:	cmp	r0, #3
   15870:	bne	158c8 <flatcc_builder_check_required@@Base+0x70>
   15874:	ldrh	ip, [r3, #8]
   15878:	mov	r0, #0
   1587c:	cmp	ip, r2
   15880:	movge	r0, #1
   15884:	cmpge	r2, #1
   15888:	bge	15890 <flatcc_builder_check_required@@Base+0x38>
   1588c:	pop	{fp, pc}
   15890:	ldr	ip, [r3, #4]
   15894:	mov	lr, #0
   15898:	b	158ac <flatcc_builder_check_required@@Base+0x54>
   1589c:	add	lr, lr, #1
   158a0:	add	r1, r1, #2
   158a4:	cmp	lr, r2
   158a8:	popge	{fp, pc}
   158ac:	ldrh	r3, [r1]
   158b0:	add	r3, ip, r3, lsl #1
   158b4:	ldrh	r3, [r3]
   158b8:	cmp	r3, #0
   158bc:	bne	1589c <flatcc_builder_check_required@@Base+0x44>
   158c0:	mov	r0, #0
   158c4:	pop	{fp, pc}
   158c8:	movw	r0, #34135	; 0x8557
   158cc:	movw	r1, #32066	; 0x7d42
   158d0:	movw	r3, #34341	; 0x8625
   158d4:	movw	r2, #1297	; 0x511
   158d8:	movt	r0, #1
   158dc:	movt	r1, #1
   158e0:	movt	r3, #1
   158e4:	bl	12418 <__assert_fail@plt>

000158e8 <flatcc_builder_end_table@@Base>:
   158e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158ec:	add	fp, sp, #24
   158f0:	sub	sp, sp, #16
   158f4:	mov	r4, r0
   158f8:	ldr	r0, [r0, #32]
   158fc:	ldrh	r0, [r0, #14]
   15900:	cmp	r0, #3
   15904:	bne	15a80 <flatcc_builder_end_table@@Base+0x198>
   15908:	ldrh	r0, [r4, #8]
   1590c:	ldr	r5, [r4, #4]
   15910:	mov	r1, #4
   15914:	movw	r2, #31153	; 0x79b1
   15918:	movt	r2, #40503	; 0x9e37
   1591c:	add	r0, r1, r0, lsl #1
   15920:	strh	r0, [r5, #-4]!
   15924:	ldrh	r1, [r4, #20]
   15928:	uxth	r6, r0
   1592c:	add	r1, r1, #4
   15930:	strh	r1, [r5, #2]
   15934:	uxth	r1, r1
   15938:	ldr	r0, [r4, #12]
   1593c:	eor	r0, r0, r6
   15940:	mul	r0, r0, r2
   15944:	eor	r0, r0, r1
   15948:	mov	r1, r5
   1594c:	mul	r3, r0, r2
   15950:	mov	r0, r4
   15954:	mov	r2, r6
   15958:	str	r3, [r4, #12]
   1595c:	bl	15230 <flatcc_builder_create_cached_vtable@@Base>
   15960:	cmp	r0, #0
   15964:	beq	15a70 <flatcc_builder_end_table@@Base+0x188>
   15968:	mov	r7, r0
   1596c:	mov	r0, r5
   15970:	mov	r1, #0
   15974:	mov	r2, r6
   15978:	mov	r8, #0
   1597c:	bl	123f4 <memset@plt>
   15980:	ldr	r5, [r4, #32]
   15984:	ldr	r0, [r4, #76]	; 0x4c
   15988:	ldr	r6, [r4]
   1598c:	ldrh	r3, [r4, #130]	; 0x82
   15990:	ldr	r1, [r4, #16]
   15994:	ldr	r2, [r4, #20]
   15998:	ldr	r5, [r5, #20]
   1599c:	add	r0, r0, r5
   159a0:	sub	r6, r6, r0
   159a4:	asr	r6, r6, #1
   159a8:	stm	sp, {r0, r6, r7}
   159ac:	mov	r0, r4
   159b0:	bl	15594 <flatcc_builder_create_table@@Base>
   159b4:	cmp	r0, #0
   159b8:	beq	15a74 <flatcc_builder_end_table@@Base+0x18c>
   159bc:	ldr	r1, [r4, #32]
   159c0:	mov	r5, r0
   159c4:	ldr	r0, [r4, #16]
   159c8:	ldr	r2, [r4, #20]
   159cc:	ldr	r3, [r4, #52]	; 0x34
   159d0:	ldr	r7, [r1, #24]
   159d4:	str	r7, [r4, #12]
   159d8:	ldrh	r7, [r1, #28]
   159dc:	strh	r7, [r4, #8]
   159e0:	ldr	r7, [r1, #16]
   159e4:	add	r3, r3, r7
   159e8:	str	r3, [r4, #4]
   159ec:	ldr	r3, [r4, #76]	; 0x4c
   159f0:	ldr	r1, [r1, #20]
   159f4:	add	r1, r3, r1
   159f8:	str	r1, [r4]
   159fc:	mov	r1, #0
   15a00:	bl	123f4 <memset@plt>
   15a04:	ldr	r0, [r4, #32]
   15a08:	ldr	r1, [r4, #60]	; 0x3c
   15a0c:	ldr	r2, [r4, #64]	; 0x40
   15a10:	mov	r8, r5
   15a14:	ldr	r3, [r0, #8]
   15a18:	str	r3, [r4, #20]
   15a1c:	ldr	r3, [r0]
   15a20:	str	r3, [r4, #28]
   15a24:	add	r1, r1, r3
   15a28:	ldr	r7, [r0, #4]
   15a2c:	str	r1, [r4, #16]
   15a30:	sub	r1, r2, r3
   15a34:	cmp	r1, r7
   15a38:	movhi	r1, r7
   15a3c:	str	r1, [r4, #24]
   15a40:	ldrh	r1, [r4, #130]	; 0x82
   15a44:	ldrh	r2, [r4, #128]	; 0x80
   15a48:	cmp	r2, r1
   15a4c:	strhcc	r1, [r4, #128]	; 0x80
   15a50:	ldrh	r1, [r0, #12]
   15a54:	sub	r0, r0, #36	; 0x24
   15a58:	str	r0, [r4, #32]
   15a5c:	strh	r1, [r4, #130]	; 0x82
   15a60:	ldr	r0, [r4, #156]	; 0x9c
   15a64:	sub	r0, r0, #1
   15a68:	str	r0, [r4, #156]	; 0x9c
   15a6c:	b	15a74 <flatcc_builder_end_table@@Base+0x18c>
   15a70:	mov	r8, #0
   15a74:	mov	r0, r8
   15a78:	sub	sp, fp, #24
   15a7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a80:	movw	r0, #34135	; 0x8557
   15a84:	movw	r1, #32066	; 0x7d42
   15a88:	movw	r3, #34431	; 0x867f
   15a8c:	movw	r2, #1317	; 0x525
   15a90:	movt	r0, #1
   15a94:	movt	r1, #1
   15a98:	movt	r3, #1
   15a9c:	bl	12418 <__assert_fail@plt>

00015aa0 <flatcc_builder_create_vector@@Base>:
   15aa0:	push	{r4, r5, r6, r7, fp, lr}
   15aa4:	add	fp, sp, #16
   15aa8:	sub	sp, sp, #80	; 0x50
   15aac:	mov	r7, r0
   15ab0:	ldr	r0, [fp, #12]
   15ab4:	cmp	r2, r0
   15ab8:	bhi	15bb8 <flatcc_builder_create_vector@@Base+0x118>
   15abc:	ldr	r0, [fp, #8]
   15ac0:	mov	r4, r2
   15ac4:	ldrh	r2, [r7, #128]	; 0x80
   15ac8:	mov	r5, #4
   15acc:	cmp	r0, #4
   15ad0:	movls	r0, r5
   15ad4:	cmp	r2, r0
   15ad8:	sub	r2, fp, #20
   15adc:	strhcc	r0, [r7, #128]	; 0x80
   15ae0:	str	r4, [fp, #-20]	; 0xffffffec
   15ae4:	sub	r0, r0, #1
   15ae8:	ldr	ip, [r7, #136]	; 0x88
   15aec:	str	r2, [sp, #12]
   15af0:	mov	r2, #1
   15af4:	str	r5, [sp, #4]
   15af8:	str	r5, [sp, #16]
   15afc:	str	r2, [sp, #8]
   15b00:	mls	r6, r3, r4, ip
   15b04:	mul	r3, r3, r4
   15b08:	and	r0, r6, r0
   15b0c:	cmp	r3, #0
   15b10:	beq	15b2c <flatcc_builder_create_vector@@Base+0x8c>
   15b14:	mov	r2, #2
   15b18:	add	r5, r3, #4
   15b1c:	str	r1, [sp, #20]
   15b20:	str	r3, [sp, #24]
   15b24:	str	r2, [sp, #8]
   15b28:	str	r5, [sp, #4]
   15b2c:	cmp	r0, #0
   15b30:	beq	15b5c <flatcc_builder_create_vector@@Base+0xbc>
   15b34:	add	r1, sp, #4
   15b38:	movw	r3, #31536	; 0x7b30
   15b3c:	add	r5, r5, r0
   15b40:	add	r1, r1, r2, lsl #3
   15b44:	add	r2, r2, #1
   15b48:	movt	r3, #1
   15b4c:	str	r5, [sp, #4]
   15b50:	str	r3, [r1, #8]
   15b54:	str	r0, [r1, #12]
   15b58:	str	r2, [sp, #8]
   15b5c:	cmp	r5, #0
   15b60:	ble	15bd8 <flatcc_builder_create_vector@@Base+0x138>
   15b64:	ldr	r0, [r7, #36]	; 0x24
   15b68:	ldr	r6, [r7, #44]	; 0x2c
   15b6c:	add	r1, sp, #4
   15b70:	sub	r4, ip, r5
   15b74:	str	r5, [sp]
   15b78:	add	r1, r1, #8
   15b7c:	mov	r3, r4
   15b80:	blx	r6
   15b84:	cmp	r0, #0
   15b88:	streq	r4, [r7, #136]	; 0x88
   15b8c:	moveq	r0, r4
   15b90:	subeq	sp, fp, #16
   15b94:	popeq	{r4, r5, r6, r7, fp, pc}
   15b98:	movw	r0, #36584	; 0x8ee8
   15b9c:	movw	r1, #32066	; 0x7d42
   15ba0:	movw	r3, #36263	; 0x8da7
   15ba4:	movw	r2, #651	; 0x28b
   15ba8:	movt	r0, #1
   15bac:	movt	r1, #1
   15bb0:	movt	r3, #1
   15bb4:	bl	12418 <__assert_fail@plt>
   15bb8:	movw	r0, #34497	; 0x86c1
   15bbc:	movw	r1, #32066	; 0x7d42
   15bc0:	movw	r3, #34516	; 0x86d4
   15bc4:	movw	r2, #1365	; 0x555
   15bc8:	movt	r0, #1
   15bcc:	movt	r1, #1
   15bd0:	movt	r3, #1
   15bd4:	bl	12418 <__assert_fail@plt>
   15bd8:	movw	r0, #36584	; 0x8ee8
   15bdc:	movw	r1, #32066	; 0x7d42
   15be0:	movw	r3, #36263	; 0x8da7
   15be4:	movw	r2, #647	; 0x287
   15be8:	movt	r0, #1
   15bec:	movt	r1, #1
   15bf0:	movt	r3, #1
   15bf4:	bl	12418 <__assert_fail@plt>

00015bf8 <flatcc_builder_end_vector@@Base>:
   15bf8:	push	{r4, r5, fp, lr}
   15bfc:	add	fp, sp, #8
   15c00:	sub	sp, sp, #8
   15c04:	mov	r4, r0
   15c08:	ldr	r0, [r0, #32]
   15c0c:	ldrh	r1, [r0, #14]
   15c10:	cmp	r1, #4
   15c14:	bne	15cc8 <flatcc_builder_end_vector@@Base+0xd0>
   15c18:	ldr	r3, [r0, #16]
   15c1c:	ldr	r2, [r0, #20]
   15c20:	ldr	r0, [r0, #24]
   15c24:	ldr	r1, [r4, #16]
   15c28:	ldrh	r5, [r4, #130]	; 0x82
   15c2c:	str	r0, [sp, #4]
   15c30:	mov	r0, r4
   15c34:	str	r5, [sp]
   15c38:	bl	15aa0 <flatcc_builder_create_vector@@Base>
   15c3c:	mov	r5, r0
   15c40:	cmp	r0, #0
   15c44:	beq	15cbc <flatcc_builder_end_vector@@Base+0xc4>
   15c48:	ldr	r0, [r4, #16]
   15c4c:	ldr	r2, [r4, #20]
   15c50:	mov	r1, #0
   15c54:	bl	123f4 <memset@plt>
   15c58:	ldr	r0, [r4, #32]
   15c5c:	ldr	r1, [r4, #60]	; 0x3c
   15c60:	ldr	ip, [r4, #64]	; 0x40
   15c64:	ldr	r3, [r0, #8]
   15c68:	str	r3, [r4, #20]
   15c6c:	ldr	r3, [r0]
   15c70:	str	r3, [r4, #28]
   15c74:	add	r1, r1, r3
   15c78:	ldr	r2, [r0, #4]
   15c7c:	str	r1, [r4, #16]
   15c80:	sub	r1, ip, r3
   15c84:	cmp	r1, r2
   15c88:	movhi	r1, r2
   15c8c:	str	r1, [r4, #24]
   15c90:	ldrh	r1, [r4, #130]	; 0x82
   15c94:	ldrh	r2, [r4, #128]	; 0x80
   15c98:	cmp	r2, r1
   15c9c:	strhcc	r1, [r4, #128]	; 0x80
   15ca0:	ldrh	r1, [r0, #12]
   15ca4:	sub	r0, r0, #36	; 0x24
   15ca8:	str	r0, [r4, #32]
   15cac:	strh	r1, [r4, #130]	; 0x82
   15cb0:	ldr	r0, [r4, #156]	; 0x9c
   15cb4:	sub	r0, r0, #1
   15cb8:	str	r0, [r4, #156]	; 0x9c
   15cbc:	mov	r0, r5
   15cc0:	sub	sp, fp, #8
   15cc4:	pop	{r4, r5, fp, pc}
   15cc8:	movw	r0, #32869	; 0x8065
   15ccc:	movw	r1, #32066	; 0x7d42
   15cd0:	movw	r3, #34634	; 0x874a
   15cd4:	movw	r2, #1400	; 0x578
   15cd8:	movt	r0, #1
   15cdc:	movt	r1, #1
   15ce0:	movt	r3, #1
   15ce4:	bl	12418 <__assert_fail@plt>

00015ce8 <flatcc_builder_vector_count@@Base>:
   15ce8:	ldr	r0, [r0, #32]
   15cec:	ldr	r0, [r0, #20]
   15cf0:	bx	lr

00015cf4 <flatcc_builder_vector_edit@@Base>:
   15cf4:	ldr	r0, [r0, #16]
   15cf8:	bx	lr

00015cfc <flatcc_builder_create_offset_vector_direct@@Base>:
   15cfc:	mov	r3, #0
   15d00:	b	15d04 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15d04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d08:	add	fp, sp, #24
   15d0c:	sub	sp, sp, #80	; 0x50
   15d10:	mov	r6, #0
   15d14:	cmn	r2, #-1073741823	; 0xc0000001
   15d18:	bhi	15e54 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15d1c:	mov	r8, r0
   15d20:	ldrh	r0, [r0, #128]	; 0x80
   15d24:	sub	r7, fp, #28
   15d28:	mov	r5, #4
   15d2c:	mov	r4, #1
   15d30:	cmp	r0, #3
   15d34:	movls	r0, #4
   15d38:	strhls	r0, [r8, #128]	; 0x80
   15d3c:	str	r2, [fp, #-28]	; 0xffffffe4
   15d40:	ldr	ip, [r8, #136]	; 0x88
   15d44:	str	r7, [sp, #12]
   15d48:	mov	r7, #0
   15d4c:	str	r5, [sp, #4]
   15d50:	str	r5, [sp, #16]
   15d54:	str	r4, [sp, #8]
   15d58:	cmp	r7, r2, lsl #2
   15d5c:	and	r6, ip, #3
   15d60:	beq	15d80 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   15d64:	lsl	r7, r2, #2
   15d68:	mov	r4, #2
   15d6c:	str	r1, [sp, #20]
   15d70:	add	r5, r7, #4
   15d74:	str	r7, [sp, #24]
   15d78:	str	r4, [sp, #8]
   15d7c:	str	r5, [sp, #4]
   15d80:	cmp	r6, #0
   15d84:	beq	15db0 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   15d88:	add	r7, sp, #4
   15d8c:	movw	r0, #31536	; 0x7b30
   15d90:	add	r5, r5, r6
   15d94:	add	r7, r7, r4, lsl #3
   15d98:	add	r4, r4, #1
   15d9c:	movt	r0, #1
   15da0:	str	r5, [sp, #4]
   15da4:	str	r0, [r7, #8]
   15da8:	str	r6, [r7, #12]
   15dac:	str	r4, [sp, #8]
   15db0:	cmp	r2, #0
   15db4:	beq	15e1c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15db8:	mvn	r0, #3
   15dbc:	mov	r6, #0
   15dc0:	sub	r0, r0, ip
   15dc4:	add	r0, r0, r5
   15dc8:	ldr	r7, [r1, r6, lsl #2]
   15dcc:	cmp	r7, #0
   15dd0:	beq	15df4 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   15dd4:	add	r7, r0, r7
   15dd8:	cmp	r3, #0
   15ddc:	str	r7, [r1, r6, lsl #2]
   15de0:	beq	15e08 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15de4:	ldrb	r7, [r3, r6]
   15de8:	cmp	r7, #0
   15dec:	bne	15e08 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15df0:	b	15e60 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15df4:	cmp	r3, #0
   15df8:	beq	15ea0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   15dfc:	ldrb	r7, [r3, r6]
   15e00:	cmp	r7, #0
   15e04:	bne	15e80 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   15e08:	add	r6, r6, #1
   15e0c:	sub	r0, r0, #4
   15e10:	cmp	r6, r2
   15e14:	bcc	15dc8 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   15e18:	ldr	ip, [r8, #136]	; 0x88
   15e1c:	cmp	r5, #0
   15e20:	ble	15ec0 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   15e24:	ldr	r0, [r8, #36]	; 0x24
   15e28:	ldr	r7, [r8, #44]	; 0x2c
   15e2c:	add	r1, sp, #4
   15e30:	sub	r6, ip, r5
   15e34:	mov	r2, r4
   15e38:	str	r5, [sp]
   15e3c:	add	r1, r1, #8
   15e40:	mov	r3, r6
   15e44:	blx	r7
   15e48:	cmp	r0, #0
   15e4c:	bne	15ee0 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   15e50:	str	r6, [r8, #136]	; 0x88
   15e54:	mov	r0, r6
   15e58:	sub	sp, fp, #24
   15e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e60:	movw	r0, #36572	; 0x8edc
   15e64:	movw	r1, #32066	; 0x7d42
   15e68:	movw	r3, #36586	; 0x8eea
   15e6c:	movw	r2, #1457	; 0x5b1
   15e70:	movt	r0, #1
   15e74:	movt	r1, #1
   15e78:	movt	r3, #1
   15e7c:	bl	12418 <__assert_fail@plt>
   15e80:	movw	r0, #36717	; 0x8f6d
   15e84:	movw	r1, #32066	; 0x7d42
   15e88:	movw	r3, #36586	; 0x8eea
   15e8c:	movw	r2, #1461	; 0x5b5
   15e90:	movt	r0, #1
   15e94:	movt	r1, #1
   15e98:	movt	r3, #1
   15e9c:	bl	12418 <__assert_fail@plt>
   15ea0:	movw	r0, #36584	; 0x8ee8
   15ea4:	movw	r1, #32066	; 0x7d42
   15ea8:	movw	r3, #36586	; 0x8eea
   15eac:	movw	r2, #1463	; 0x5b7
   15eb0:	movt	r0, #1
   15eb4:	movt	r1, #1
   15eb8:	movt	r3, #1
   15ebc:	bl	12418 <__assert_fail@plt>
   15ec0:	movw	r0, #36584	; 0x8ee8
   15ec4:	movw	r1, #32066	; 0x7d42
   15ec8:	movw	r3, #36263	; 0x8da7
   15ecc:	movw	r2, #647	; 0x287
   15ed0:	movt	r0, #1
   15ed4:	movt	r1, #1
   15ed8:	movt	r3, #1
   15edc:	bl	12418 <__assert_fail@plt>
   15ee0:	movw	r0, #36584	; 0x8ee8
   15ee4:	movw	r1, #32066	; 0x7d42
   15ee8:	movw	r3, #36263	; 0x8da7
   15eec:	movw	r2, #651	; 0x28b
   15ef0:	movt	r0, #1
   15ef4:	movt	r1, #1
   15ef8:	movt	r3, #1
   15efc:	bl	12418 <__assert_fail@plt>

00015f00 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15f00:	push	{r4, r5, fp, lr}
   15f04:	add	fp, sp, #8
   15f08:	mov	r4, r0
   15f0c:	ldr	r0, [r0, #32]
   15f10:	mov	r3, r1
   15f14:	ldrh	r1, [r0, #14]
   15f18:	cmp	r1, #5
   15f1c:	bne	15fb8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15f20:	ldr	r2, [r0, #20]
   15f24:	ldr	r1, [r4, #16]
   15f28:	mov	r0, r4
   15f2c:	bl	15d04 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15f30:	mov	r5, r0
   15f34:	cmp	r0, #0
   15f38:	beq	15fb0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   15f3c:	ldr	r0, [r4, #16]
   15f40:	ldr	r2, [r4, #20]
   15f44:	mov	r1, #0
   15f48:	bl	123f4 <memset@plt>
   15f4c:	ldr	r0, [r4, #32]
   15f50:	ldr	r1, [r4, #60]	; 0x3c
   15f54:	ldr	ip, [r4, #64]	; 0x40
   15f58:	ldr	r3, [r0, #8]
   15f5c:	str	r3, [r4, #20]
   15f60:	ldr	r3, [r0]
   15f64:	str	r3, [r4, #28]
   15f68:	add	r1, r1, r3
   15f6c:	ldr	r2, [r0, #4]
   15f70:	str	r1, [r4, #16]
   15f74:	sub	r1, ip, r3
   15f78:	cmp	r1, r2
   15f7c:	movhi	r1, r2
   15f80:	str	r1, [r4, #24]
   15f84:	ldrh	r1, [r4, #130]	; 0x82
   15f88:	ldrh	r2, [r4, #128]	; 0x80
   15f8c:	cmp	r2, r1
   15f90:	strhcc	r1, [r4, #128]	; 0x80
   15f94:	ldrh	r1, [r0, #12]
   15f98:	sub	r0, r0, #36	; 0x24
   15f9c:	str	r0, [r4, #32]
   15fa0:	strh	r1, [r4, #130]	; 0x82
   15fa4:	ldr	r0, [r4, #156]	; 0x9c
   15fa8:	sub	r0, r0, #1
   15fac:	str	r0, [r4, #156]	; 0x9c
   15fb0:	mov	r0, r5
   15fb4:	pop	{r4, r5, fp, pc}
   15fb8:	movw	r0, #33118	; 0x815e
   15fbc:	movw	r1, #32066	; 0x7d42
   15fc0:	movw	r3, #34775	; 0x87d7
   15fc4:	movw	r2, #1493	; 0x5d5
   15fc8:	movt	r0, #1
   15fcc:	movt	r1, #1
   15fd0:	movt	r3, #1
   15fd4:	bl	12418 <__assert_fail@plt>

00015fd8 <flatcc_builder_offset_vector_edit@@Base>:
   15fd8:	ldr	r0, [r0, #16]
   15fdc:	bx	lr

00015fe0 <flatcc_builder_offset_vector_count@@Base>:
   15fe0:	ldr	r0, [r0, #32]
   15fe4:	ldr	r0, [r0, #20]
   15fe8:	bx	lr

00015fec <flatcc_builder_table_add_union@@Base>:
   15fec:	push	{r4, r5, r6, r7, fp, lr}
   15ff0:	add	fp, sp, #16
   15ff4:	mov	r5, r0
   15ff8:	ldr	r0, [r0, #32]
   15ffc:	ldrh	r0, [r0, #14]
   16000:	cmp	r0, #3
   16004:	bne	1608c <flatcc_builder_table_add_union@@Base+0xa0>
   16008:	mov	r7, r3
   1600c:	mov	r4, r2
   16010:	mov	r6, r1
   16014:	cmp	r3, #0
   16018:	beq	16028 <flatcc_builder_table_add_union@@Base+0x3c>
   1601c:	uxtb	r0, r4
   16020:	cmp	r0, #0
   16024:	beq	160ac <flatcc_builder_table_add_union@@Base+0xc0>
   16028:	cmp	r7, #0
   1602c:	beq	16048 <flatcc_builder_table_add_union@@Base+0x5c>
   16030:	mov	r0, r5
   16034:	mov	r1, r6
   16038:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   1603c:	cmp	r0, #0
   16040:	beq	160cc <flatcc_builder_table_add_union@@Base+0xe0>
   16044:	str	r7, [r0]
   16048:	sub	r1, r6, #1
   1604c:	mov	r0, r5
   16050:	mov	r2, #1
   16054:	mov	r3, #1
   16058:	bl	16228 <flatcc_builder_table_add@@Base>
   1605c:	cmp	r0, #0
   16060:	strbne	r4, [r0]
   16064:	movne	r0, #0
   16068:	popne	{r4, r5, r6, r7, fp, pc}
   1606c:	movw	r0, #35021	; 0x88cd
   16070:	movw	r1, #32066	; 0x7d42
   16074:	movw	r3, #34889	; 0x8849
   16078:	movw	r2, #1526	; 0x5f6
   1607c:	movt	r0, #1
   16080:	movt	r1, #1
   16084:	movt	r3, #1
   16088:	bl	12418 <__assert_fail@plt>
   1608c:	movw	r0, #34135	; 0x8557
   16090:	movw	r1, #32066	; 0x7d42
   16094:	movw	r3, #34889	; 0x8849
   16098:	movw	r2, #1518	; 0x5ee
   1609c:	movt	r0, #1
   160a0:	movt	r1, #1
   160a4:	movt	r3, #1
   160a8:	bl	12418 <__assert_fail@plt>
   160ac:	movw	r0, #34977	; 0x88a1
   160b0:	movw	r1, #32066	; 0x7d42
   160b4:	movw	r3, #34889	; 0x8849
   160b8:	movw	r2, #1519	; 0x5ef
   160bc:	movt	r0, #1
   160c0:	movt	r1, #1
   160c4:	movt	r3, #1
   160c8:	bl	12418 <__assert_fail@plt>
   160cc:	movw	r0, #35011	; 0x88c3
   160d0:	movw	r1, #32066	; 0x7d42
   160d4:	movw	r3, #34889	; 0x8849
   160d8:	movw	r2, #1522	; 0x5f2
   160dc:	movt	r0, #1
   160e0:	movt	r1, #1
   160e4:	movt	r3, #1
   160e8:	bl	12418 <__assert_fail@plt>

000160ec <flatcc_builder_table_add_offset@@Base>:
   160ec:	push	{r4, r5, r6, r7, fp, lr}
   160f0:	add	fp, sp, #16
   160f4:	mov	r4, r0
   160f8:	ldr	r0, [r0, #32]
   160fc:	ldrh	r0, [r0, #14]
   16100:	cmp	r0, #3
   16104:	bne	161c8 <flatcc_builder_table_add_offset@@Base+0xdc>
   16108:	movw	r0, #32765	; 0x7ffd
   1610c:	mov	r5, r1
   16110:	cmp	r1, r0
   16114:	bcs	161e8 <flatcc_builder_table_add_offset@@Base+0xfc>
   16118:	ldr	r0, [r4, #4]
   1611c:	add	r1, r0, r5, lsl #1
   16120:	ldrh	r1, [r1]
   16124:	cmp	r1, #0
   16128:	bne	16208 <flatcc_builder_table_add_offset@@Base+0x11c>
   1612c:	ldr	r2, [r4, #20]
   16130:	ldr	r1, [r4, #12]
   16134:	ldr	r3, [r4, #24]
   16138:	add	r2, r2, #3
   1613c:	eor	r1, r1, r5
   16140:	bic	r7, r2, #3
   16144:	movw	r2, #31153	; 0x79b1
   16148:	movt	r2, #40503	; 0x9e37
   1614c:	add	r6, r7, #4
   16150:	mul	r1, r1, r2
   16154:	cmp	r6, r3
   16158:	str	r6, [r4, #20]
   1615c:	eor	r1, r1, #4
   16160:	mul	r1, r1, r2
   16164:	str	r1, [r4, #12]
   16168:	bls	16190 <flatcc_builder_table_add_offset@@Base+0xa4>
   1616c:	mov	r0, r4
   16170:	mov	r1, r6
   16174:	movw	r2, #65532	; 0xfffc
   16178:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   1617c:	mov	r1, r0
   16180:	mov	r0, #0
   16184:	cmp	r1, #0
   16188:	popne	{r4, r5, r6, r7, fp, pc}
   1618c:	ldr	r0, [r4, #4]
   16190:	uxth	r1, r5
   16194:	add	r0, r0, r1, lsl #1
   16198:	strh	r6, [r0]
   1619c:	ldrh	r0, [r4, #8]
   161a0:	cmp	r0, r1
   161a4:	addls	r0, r5, #1
   161a8:	strhls	r0, [r4, #8]
   161ac:	ldr	r0, [r4]
   161b0:	add	r1, r0, #2
   161b4:	str	r1, [r4]
   161b8:	strh	r7, [r0]
   161bc:	ldr	r0, [r4, #16]
   161c0:	add	r0, r0, r7
   161c4:	pop	{r4, r5, r6, r7, fp, pc}
   161c8:	movw	r0, #34135	; 0x8557
   161cc:	movw	r1, #32066	; 0x7d42
   161d0:	movw	r3, #35915	; 0x8c4b
   161d4:	movw	r2, #1811	; 0x713
   161d8:	movt	r0, #1
   161dc:	movt	r1, #1
   161e0:	movt	r3, #1
   161e4:	bl	12418 <__assert_fail@plt>
   161e8:	movw	r0, #35787	; 0x8bcb
   161ec:	movw	r1, #32066	; 0x7d42
   161f0:	movw	r3, #35915	; 0x8c4b
   161f4:	movw	r2, #1812	; 0x714
   161f8:	movt	r0, #1
   161fc:	movt	r1, #1
   16200:	movt	r3, #1
   16204:	bl	12418 <__assert_fail@plt>
   16208:	movw	r0, #36584	; 0x8ee8
   1620c:	movw	r1, #32066	; 0x7d42
   16210:	movw	r3, #35915	; 0x8c4b
   16214:	movw	r2, #1819	; 0x71b
   16218:	movt	r0, #1
   1621c:	movt	r1, #1
   16220:	movt	r3, #1
   16224:	bl	12418 <__assert_fail@plt>

00016228 <flatcc_builder_table_add@@Base>:
   16228:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1622c:	add	fp, sp, #24
   16230:	mov	r4, r0
   16234:	ldr	r0, [r0, #32]
   16238:	ldrh	r0, [r0, #14]
   1623c:	cmp	r0, #3
   16240:	bne	1630c <flatcc_builder_table_add@@Base+0xe4>
   16244:	movw	r0, #32765	; 0x7ffd
   16248:	mov	r8, r1
   1624c:	cmp	r1, r0
   16250:	bcs	1632c <flatcc_builder_table_add@@Base+0x104>
   16254:	ldrh	r0, [r4, #130]	; 0x82
   16258:	cmp	r0, r3
   1625c:	strhcc	r3, [r4, #130]	; 0x82
   16260:	ldr	r0, [r4, #4]
   16264:	add	r1, r0, r8, lsl #1
   16268:	ldrh	r1, [r1]
   1626c:	cmp	r1, #0
   16270:	bne	1634c <flatcc_builder_table_add@@Base+0x124>
   16274:	ldr	r1, [r4, #12]
   16278:	movw	r7, #31153	; 0x79b1
   1627c:	ldr	r6, [r4, #20]
   16280:	ldr	r5, [r4, #24]
   16284:	movt	r7, #40503	; 0x9e37
   16288:	eor	r1, r1, r8
   1628c:	mul	r1, r1, r7
   16290:	eor	r1, r1, r2
   16294:	mul	r1, r1, r7
   16298:	str	r1, [r4, #12]
   1629c:	add	r1, r3, r6
   162a0:	rsb	r3, r3, #0
   162a4:	sub	r1, r1, #1
   162a8:	and	r6, r1, r3
   162ac:	add	r1, r6, r2
   162b0:	cmp	r1, r5
   162b4:	str	r1, [r4, #20]
   162b8:	bcc	162e0 <flatcc_builder_table_add@@Base+0xb8>
   162bc:	add	r1, r1, #1
   162c0:	mov	r0, r4
   162c4:	movw	r2, #65532	; 0xfffc
   162c8:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   162cc:	mov	r1, r0
   162d0:	mov	r0, #0
   162d4:	cmp	r1, #0
   162d8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   162dc:	ldr	r0, [r4, #4]
   162e0:	uxth	r1, r8
   162e4:	add	r2, r6, #4
   162e8:	add	r0, r0, r1, lsl #1
   162ec:	strh	r2, [r0]
   162f0:	ldrh	r0, [r4, #8]
   162f4:	cmp	r0, r1
   162f8:	addls	r0, r8, #1
   162fc:	strhls	r0, [r4, #8]
   16300:	ldr	r0, [r4, #16]
   16304:	add	r0, r0, r6
   16308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1630c:	movw	r0, #34135	; 0x8557
   16310:	movw	r1, #32066	; 0x7d42
   16314:	movw	r3, #35713	; 0x8b81
   16318:	movw	r2, #1773	; 0x6ed
   1631c:	movt	r0, #1
   16320:	movt	r1, #1
   16324:	movt	r3, #1
   16328:	bl	12418 <__assert_fail@plt>
   1632c:	movw	r0, #35787	; 0x8bcb
   16330:	movw	r1, #32066	; 0x7d42
   16334:	movw	r3, #35713	; 0x8b81
   16338:	movw	r2, #1774	; 0x6ee
   1633c:	movt	r0, #1
   16340:	movt	r1, #1
   16344:	movt	r3, #1
   16348:	bl	12418 <__assert_fail@plt>
   1634c:	movw	r0, #36584	; 0x8ee8
   16350:	movw	r1, #32066	; 0x7d42
   16354:	movw	r3, #35713	; 0x8b81
   16358:	movw	r2, #1784	; 0x6f8
   1635c:	movt	r0, #1
   16360:	movt	r1, #1
   16364:	movt	r3, #1
   16368:	bl	12418 <__assert_fail@plt>

0001636c <flatcc_builder_table_add_union_vector@@Base>:
   1636c:	push	{r4, r5, r6, r7, fp, lr}
   16370:	add	fp, sp, #16
   16374:	mov	r6, r0
   16378:	ldr	r0, [r0, #32]
   1637c:	ldrh	r0, [r0, #14]
   16380:	cmp	r0, #3
   16384:	bne	163ec <flatcc_builder_table_add_union_vector@@Base+0x80>
   16388:	clz	r0, r3
   1638c:	mov	r5, r1
   16390:	clz	r1, r2
   16394:	mov	r4, r3
   16398:	mov	r7, r2
   1639c:	lsr	r0, r0, #5
   163a0:	lsr	r1, r1, #5
   163a4:	cmp	r1, r0
   163a8:	bne	1640c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   163ac:	cmp	r7, #0
   163b0:	beq	163e4 <flatcc_builder_table_add_union_vector@@Base+0x78>
   163b4:	sub	r1, r5, #1
   163b8:	mov	r0, r6
   163bc:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   163c0:	cmp	r0, #0
   163c4:	beq	1642c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   163c8:	str	r7, [r0]
   163cc:	mov	r0, r6
   163d0:	mov	r1, r5
   163d4:	bl	160ec <flatcc_builder_table_add_offset@@Base>
   163d8:	cmp	r0, #0
   163dc:	beq	1644c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   163e0:	str	r4, [r0]
   163e4:	mov	r0, #0
   163e8:	pop	{r4, r5, r6, r7, fp, pc}
   163ec:	movw	r0, #34135	; 0x8557
   163f0:	movw	r1, #32066	; 0x7d42
   163f4:	movw	r3, #35033	; 0x88d9
   163f8:	mov	r2, #1536	; 0x600
   163fc:	movt	r0, #1
   16400:	movt	r1, #1
   16404:	movt	r3, #1
   16408:	bl	12418 <__assert_fail@plt>
   1640c:	movw	r0, #35132	; 0x893c
   16410:	movw	r1, #32066	; 0x7d42
   16414:	movw	r3, #35033	; 0x88d9
   16418:	movw	r2, #1537	; 0x601
   1641c:	movt	r0, #1
   16420:	movt	r1, #1
   16424:	movt	r3, #1
   16428:	bl	12418 <__assert_fail@plt>
   1642c:	movw	r0, #35011	; 0x88c3
   16430:	movw	r1, #32066	; 0x7d42
   16434:	movw	r3, #35033	; 0x88d9
   16438:	movw	r2, #1540	; 0x604
   1643c:	movt	r0, #1
   16440:	movt	r1, #1
   16444:	movt	r3, #1
   16448:	bl	12418 <__assert_fail@plt>
   1644c:	movw	r0, #35011	; 0x88c3
   16450:	movw	r1, #32066	; 0x7d42
   16454:	movw	r3, #35033	; 0x88d9
   16458:	movw	r2, #1544	; 0x608
   1645c:	movt	r0, #1
   16460:	movt	r1, #1
   16464:	movt	r3, #1
   16468:	bl	12418 <__assert_fail@plt>

0001646c <flatcc_builder_create_union_vector@@Base>:
   1646c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16470:	add	fp, sp, #28
   16474:	sub	sp, sp, #20
   16478:	mov	sl, r0
   1647c:	mov	r0, #0
   16480:	mov	r9, r3
   16484:	mov	r7, r2
   16488:	mov	r4, r1
   1648c:	str	r0, [sl]
   16490:	str	r0, [sl, #4]
   16494:	mov	r0, r1
   16498:	bl	14c18 <flatcc_builder_start_offset_vector@@Base>
   1649c:	cmp	r0, #0
   164a0:	beq	164ac <flatcc_builder_create_union_vector@@Base+0x40>
   164a4:	sub	sp, fp, #28
   164a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ac:	mov	r0, r4
   164b0:	mov	r1, r9
   164b4:	bl	145d4 <flatcc_builder_extend_offset_vector@@Base>
   164b8:	cmp	r0, #0
   164bc:	beq	164a4 <flatcc_builder_create_union_vector@@Base+0x38>
   164c0:	ldr	r8, [r4, #20]
   164c4:	ldr	r1, [r4, #24]
   164c8:	add	r0, r8, r9
   164cc:	cmp	r0, r1
   164d0:	str	r0, [r4, #20]
   164d4:	bcc	164f0 <flatcc_builder_create_union_vector@@Base+0x84>
   164d8:	add	r1, r0, #1
   164dc:	mov	r0, r4
   164e0:	mvn	r2, #3
   164e4:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   164e8:	cmp	r0, #0
   164ec:	bne	164a4 <flatcc_builder_create_union_vector@@Base+0x38>
   164f0:	ldr	r3, [r4, #16]
   164f4:	adds	r2, r3, r8
   164f8:	beq	164a4 <flatcc_builder_create_union_vector@@Base+0x38>
   164fc:	cmp	r9, #0
   16500:	beq	16530 <flatcc_builder_create_union_vector@@Base+0xc4>
   16504:	add	r0, r7, #4
   16508:	mov	r1, r9
   1650c:	mov	r7, r3
   16510:	mov	r6, r2
   16514:	ldrb	r5, [r0, #-4]
   16518:	subs	r1, r1, #1
   1651c:	strb	r5, [r6], #1
   16520:	ldr	r5, [r0]
   16524:	add	r0, r0, #8
   16528:	str	r5, [r7], #4
   1652c:	bne	16514 <flatcc_builder_create_union_vector@@Base+0xa8>
   16530:	add	r0, sp, #8
   16534:	mov	r1, r4
   16538:	str	r9, [sp]
   1653c:	bl	165c4 <flatcc_builder_create_union_vector_direct@@Base>
   16540:	ldr	r0, [sp, #8]
   16544:	ldr	r1, [sp, #12]
   16548:	stm	sl, {r0, r1}
   1654c:	mov	r1, #0
   16550:	ldr	r0, [r4, #16]
   16554:	ldr	r2, [r4, #20]
   16558:	bl	123f4 <memset@plt>
   1655c:	ldr	r0, [r4, #32]
   16560:	ldr	r1, [r4, #60]	; 0x3c
   16564:	ldr	r2, [r4, #64]	; 0x40
   16568:	ldr	r3, [r0, #8]
   1656c:	str	r3, [r4, #20]
   16570:	ldr	r3, [r0]
   16574:	str	r3, [r4, #28]
   16578:	add	r1, r1, r3
   1657c:	ldr	r7, [r0, #4]
   16580:	str	r1, [r4, #16]
   16584:	sub	r1, r2, r3
   16588:	cmp	r1, r7
   1658c:	movhi	r1, r7
   16590:	str	r1, [r4, #24]
   16594:	ldrh	r1, [r4, #130]	; 0x82
   16598:	ldrh	r2, [r4, #128]	; 0x80
   1659c:	cmp	r2, r1
   165a0:	strhcc	r1, [r4, #128]	; 0x80
   165a4:	ldrh	r1, [r0, #12]
   165a8:	sub	r0, r0, #36	; 0x24
   165ac:	str	r0, [r4, #32]
   165b0:	strh	r1, [r4, #130]	; 0x82
   165b4:	ldr	r0, [r4, #156]	; 0x9c
   165b8:	sub	r0, r0, #1
   165bc:	str	r0, [r4, #156]	; 0x9c
   165c0:	b	164a4 <flatcc_builder_create_union_vector@@Base+0x38>

000165c4 <flatcc_builder_create_union_vector_direct@@Base>:
   165c4:	push	{r4, r5, r6, r7, fp, lr}
   165c8:	add	fp, sp, #16
   165cc:	sub	sp, sp, #8
   165d0:	ldr	r7, [fp, #8]
   165d4:	mov	r5, r2
   165d8:	mov	r4, r0
   165dc:	mov	r0, #0
   165e0:	mov	r6, r1
   165e4:	str	r0, [r4]
   165e8:	str	r0, [r4, #4]
   165ec:	mov	r0, r1
   165f0:	mov	r1, r3
   165f4:	mov	r3, r5
   165f8:	mov	r2, r7
   165fc:	bl	15d04 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16600:	cmp	r0, #0
   16604:	str	r0, [r4, #4]
   16608:	beq	16634 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   1660c:	mvn	r0, #0
   16610:	mov	r1, #1
   16614:	mov	r2, r7
   16618:	mov	r3, #1
   1661c:	str	r1, [sp]
   16620:	str	r0, [sp, #4]
   16624:	mov	r0, r6
   16628:	mov	r1, r5
   1662c:	bl	15aa0 <flatcc_builder_create_vector@@Base>
   16630:	str	r0, [r4]
   16634:	sub	sp, fp, #16
   16638:	pop	{r4, r5, r6, r7, fp, pc}

0001663c <flatcc_builder_start_union_vector@@Base>:
   1663c:	push	{r4, sl, fp, lr}
   16640:	add	fp, sp, #8
   16644:	mov	r1, #4
   16648:	mov	r4, r0
   1664c:	bl	13f98 <flatcc_builder_start_buffer@@Base+0xbc>
   16650:	mov	r1, r0
   16654:	mvn	r0, #0
   16658:	cmp	r1, #0
   1665c:	popne	{r4, sl, fp, pc}
   16660:	ldr	r0, [r4, #32]
   16664:	mov	r1, #8
   16668:	mov	r2, #7
   1666c:	str	r1, [r0, #16]
   16670:	mov	r0, #0
   16674:	ldr	r1, [r4, #32]
   16678:	str	r0, [r1, #20]
   1667c:	ldr	r1, [r4, #32]
   16680:	strh	r2, [r1, #14]
   16684:	ldr	r2, [r4, #28]
   16688:	ldr	r3, [r4, #60]	; 0x3c
   1668c:	ldr	ip, [r4, #64]	; 0x40
   16690:	add	r3, r3, r2
   16694:	sub	r2, ip, r2
   16698:	str	r3, [r4, #16]
   1669c:	mvn	r3, #3
   166a0:	cmn	r2, #4
   166a4:	movcs	r2, r3
   166a8:	str	r2, [r4, #24]
   166ac:	str	r3, [r1, #4]
   166b0:	pop	{r4, sl, fp, pc}

000166b4 <flatcc_builder_end_union_vector@@Base>:
   166b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   166b8:	add	fp, sp, #24
   166bc:	sub	sp, sp, #16
   166c0:	mov	r8, r0
   166c4:	mov	r0, #0
   166c8:	mov	r4, r1
   166cc:	str	r0, [r8]
   166d0:	str	r0, [r8, #4]
   166d4:	ldr	r0, [r1, #32]
   166d8:	ldrh	r1, [r0, #14]
   166dc:	cmp	r1, #7
   166e0:	bne	167f8 <flatcc_builder_end_union_vector@@Base+0x144>
   166e4:	ldr	r9, [r0, #20]
   166e8:	ldr	r7, [r4, #20]
   166ec:	ldr	r1, [r4, #24]
   166f0:	add	r0, r9, r9, lsl #2
   166f4:	add	r0, r7, r0
   166f8:	cmp	r0, r1
   166fc:	str	r0, [r4, #20]
   16700:	bcc	1671c <flatcc_builder_end_union_vector@@Base+0x68>
   16704:	add	r1, r0, #1
   16708:	mov	r0, r4
   1670c:	mvn	r2, #3
   16710:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   16714:	cmp	r0, #0
   16718:	bne	167f0 <flatcc_builder_end_union_vector@@Base+0x13c>
   1671c:	ldr	r0, [r4, #16]
   16720:	adds	r3, r0, r7
   16724:	beq	167f0 <flatcc_builder_end_union_vector@@Base+0x13c>
   16728:	add	r2, r3, r9, lsl #2
   1672c:	cmp	r9, #0
   16730:	beq	16760 <flatcc_builder_end_union_vector@@Base+0xac>
   16734:	add	r0, r0, #4
   16738:	mov	r1, r9
   1673c:	mov	r7, r3
   16740:	mov	r5, r2
   16744:	ldrb	r6, [r0, #-4]
   16748:	subs	r1, r1, #1
   1674c:	strb	r6, [r5], #1
   16750:	ldr	r6, [r0]
   16754:	add	r0, r0, #8
   16758:	str	r6, [r7], #4
   1675c:	bne	16744 <flatcc_builder_end_union_vector@@Base+0x90>
   16760:	add	r0, sp, #8
   16764:	mov	r1, r4
   16768:	str	r9, [sp]
   1676c:	bl	165c4 <flatcc_builder_create_union_vector_direct@@Base>
   16770:	ldr	r0, [sp, #8]
   16774:	ldr	r1, [sp, #12]
   16778:	stm	r8, {r0, r1}
   1677c:	mov	r1, #0
   16780:	ldr	r0, [r4, #16]
   16784:	ldr	r2, [r4, #20]
   16788:	bl	123f4 <memset@plt>
   1678c:	ldr	r0, [r4, #32]
   16790:	ldr	r1, [r4, #60]	; 0x3c
   16794:	ldr	r2, [r4, #64]	; 0x40
   16798:	ldr	r3, [r0, #8]
   1679c:	str	r3, [r4, #20]
   167a0:	ldr	r3, [r0]
   167a4:	str	r3, [r4, #28]
   167a8:	add	r1, r1, r3
   167ac:	ldr	r7, [r0, #4]
   167b0:	str	r1, [r4, #16]
   167b4:	sub	r1, r2, r3
   167b8:	cmp	r1, r7
   167bc:	movhi	r1, r7
   167c0:	str	r1, [r4, #24]
   167c4:	ldrh	r1, [r4, #130]	; 0x82
   167c8:	ldrh	r2, [r4, #128]	; 0x80
   167cc:	cmp	r2, r1
   167d0:	strhcc	r1, [r4, #128]	; 0x80
   167d4:	ldrh	r1, [r0, #12]
   167d8:	sub	r0, r0, #36	; 0x24
   167dc:	str	r0, [r4, #32]
   167e0:	strh	r1, [r4, #130]	; 0x82
   167e4:	ldr	r0, [r4, #156]	; 0x9c
   167e8:	sub	r0, r0, #1
   167ec:	str	r0, [r4, #156]	; 0x9c
   167f0:	sub	sp, fp, #24
   167f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167f8:	movw	r0, #35172	; 0x8964
   167fc:	movw	r1, #32066	; 0x7d42
   16800:	movw	r3, #35222	; 0x8996
   16804:	movw	r2, #1617	; 0x651
   16808:	movt	r0, #1
   1680c:	movt	r1, #1
   16810:	movt	r3, #1
   16814:	bl	12418 <__assert_fail@plt>

00016818 <flatcc_builder_union_vector_count@@Base>:
   16818:	ldr	r0, [r0, #32]
   1681c:	ldr	r0, [r0, #20]
   16820:	bx	lr

00016824 <flatcc_builder_union_vector_edit@@Base>:
   16824:	ldr	r0, [r0, #16]
   16828:	bx	lr

0001682c <flatcc_builder_extend_union_vector@@Base>:
   1682c:	push	{r4, r5, fp, lr}
   16830:	add	fp, sp, #8
   16834:	mov	r4, r0
   16838:	ldr	r0, [r0, #32]
   1683c:	ldr	r2, [r0, #20]
   16840:	adds	r2, r2, r1
   16844:	cmpcc	r2, #536870912	; 0x20000000
   16848:	bcc	1686c <flatcc_builder_extend_union_vector@@Base+0x40>
   1684c:	movw	r0, #36337	; 0x8df1
   16850:	movw	r1, #32066	; 0x7d42
   16854:	movw	r3, #36364	; 0x8e0c
   16858:	mov	r2, #892	; 0x37c
   1685c:	movt	r0, #1
   16860:	movt	r1, #1
   16864:	movt	r3, #1
   16868:	bl	12418 <__assert_fail@plt>
   1686c:	str	r2, [r0, #20]
   16870:	ldr	r5, [r4, #20]
   16874:	ldr	r2, [r4, #24]
   16878:	add	r0, r5, r1, lsl #3
   1687c:	cmp	r0, r2
   16880:	str	r0, [r4, #20]
   16884:	bcc	168a8 <flatcc_builder_extend_union_vector@@Base+0x7c>
   16888:	add	r1, r0, #1
   1688c:	mov	r0, r4
   16890:	mvn	r2, #3
   16894:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   16898:	mov	r1, r0
   1689c:	mov	r0, #0
   168a0:	cmp	r1, #0
   168a4:	popne	{r4, r5, fp, pc}
   168a8:	ldr	r0, [r4, #16]
   168ac:	add	r0, r0, r5
   168b0:	pop	{r4, r5, fp, pc}

000168b4 <flatcc_builder_truncate_union_vector@@Base>:
   168b4:	push	{fp, lr}
   168b8:	mov	fp, sp
   168bc:	ldr	r2, [r0, #32]
   168c0:	ldrh	r3, [r2, #14]
   168c4:	cmp	r3, #7
   168c8:	bne	16910 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   168cc:	ldr	r3, [r2, #20]
   168d0:	cmp	r3, r1
   168d4:	bcc	16930 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   168d8:	sub	r3, r3, r1
   168dc:	str	r3, [r2, #20]
   168e0:	ldr	r2, [r0, #32]
   168e4:	ldr	r3, [r0, #20]
   168e8:	ldr	ip, [r0, #16]
   168ec:	ldr	r2, [r2, #16]
   168f0:	mls	r3, r2, r1, r3
   168f4:	mul	r2, r2, r1
   168f8:	mov	r1, #0
   168fc:	str	r3, [r0, #20]
   16900:	add	r0, ip, r3
   16904:	bl	123f4 <memset@plt>
   16908:	mov	r0, #0
   1690c:	pop	{fp, pc}
   16910:	movw	r0, #35172	; 0x8964
   16914:	movw	r1, #32066	; 0x7d42
   16918:	movw	r3, #35305	; 0x89e9
   1691c:	movw	r2, #1665	; 0x681
   16920:	movt	r0, #1
   16924:	movt	r1, #1
   16928:	movt	r3, #1
   1692c:	bl	12418 <__assert_fail@plt>
   16930:	movw	r0, #33736	; 0x83c8
   16934:	movw	r1, #32066	; 0x7d42
   16938:	movw	r3, #35305	; 0x89e9
   1693c:	movw	r2, #1666	; 0x682
   16940:	movt	r0, #1
   16944:	movt	r1, #1
   16948:	movt	r3, #1
   1694c:	bl	12418 <__assert_fail@plt>

00016950 <flatcc_builder_union_vector_push@@Base>:
   16950:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16954:	add	fp, sp, #24
   16958:	mov	r7, r0
   1695c:	ldr	r0, [r0, #32]
   16960:	mov	r5, r1
   16964:	ldrh	r1, [r0, #14]
   16968:	cmp	r1, #7
   1696c:	bne	169d4 <flatcc_builder_union_vector_push@@Base+0x84>
   16970:	ldr	r1, [r0, #20]
   16974:	mov	r6, #0
   16978:	cmn	r1, #-536870911	; 0xe0000001
   1697c:	beq	169cc <flatcc_builder_union_vector_push@@Base+0x7c>
   16980:	add	r1, r1, #1
   16984:	mov	r8, r2
   16988:	str	r1, [r0, #20]
   1698c:	ldr	r4, [r7, #20]
   16990:	ldr	r0, [r7, #24]
   16994:	add	r1, r4, #8
   16998:	cmp	r1, r0
   1699c:	str	r1, [r7, #20]
   169a0:	bcc	169bc <flatcc_builder_union_vector_push@@Base+0x6c>
   169a4:	add	r1, r4, #9
   169a8:	mov	r0, r7
   169ac:	mvn	r2, #3
   169b0:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   169b4:	cmp	r0, #0
   169b8:	bne	169cc <flatcc_builder_union_vector_push@@Base+0x7c>
   169bc:	ldr	r0, [r7, #16]
   169c0:	adds	r0, r0, r4
   169c4:	movne	r6, r0
   169c8:	stmne	r0, {r5, r8}
   169cc:	mov	r0, r6
   169d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169d4:	movw	r0, #35172	; 0x8964
   169d8:	movw	r1, #32066	; 0x7d42
   169dc:	movw	r3, #35374	; 0x8a2e
   169e0:	movw	r2, #1677	; 0x68d
   169e4:	movt	r0, #1
   169e8:	movt	r1, #1
   169ec:	movt	r3, #1
   169f0:	bl	12418 <__assert_fail@plt>

000169f4 <flatcc_builder_append_union_vector@@Base>:
   169f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169f8:	add	fp, sp, #24
   169fc:	mov	r6, r0
   16a00:	ldr	r0, [r0, #32]
   16a04:	mov	r8, r1
   16a08:	ldrh	r1, [r0, #14]
   16a0c:	cmp	r1, #7
   16a10:	bne	16aac <flatcc_builder_append_union_vector@@Base+0xb8>
   16a14:	ldr	r1, [r0, #20]
   16a18:	mov	r5, r2
   16a1c:	adds	r1, r1, r2
   16a20:	cmpcc	r1, #536870912	; 0x20000000
   16a24:	bcc	16a48 <flatcc_builder_append_union_vector@@Base+0x54>
   16a28:	movw	r0, #36337	; 0x8df1
   16a2c:	movw	r1, #32066	; 0x7d42
   16a30:	movw	r3, #36364	; 0x8e0c
   16a34:	mov	r2, #892	; 0x37c
   16a38:	movt	r0, #1
   16a3c:	movt	r1, #1
   16a40:	movt	r3, #1
   16a44:	bl	12418 <__assert_fail@plt>
   16a48:	str	r1, [r0, #20]
   16a4c:	ldr	r4, [r6, #20]
   16a50:	ldr	r1, [r6, #24]
   16a54:	add	r0, r4, r5, lsl #3
   16a58:	cmp	r0, r1
   16a5c:	str	r0, [r6, #20]
   16a60:	bcc	16a80 <flatcc_builder_append_union_vector@@Base+0x8c>
   16a64:	add	r1, r0, #1
   16a68:	mov	r0, r6
   16a6c:	mvn	r2, #3
   16a70:	bl	170e8 <flatcc_builder_get_emit_context@@Base+0x8>
   16a74:	mov	r7, #0
   16a78:	cmp	r0, #0
   16a7c:	bne	16aa4 <flatcc_builder_append_union_vector@@Base+0xb0>
   16a80:	ldr	r0, [r6, #16]
   16a84:	adds	r7, r0, r4
   16a88:	beq	16aa0 <flatcc_builder_append_union_vector@@Base+0xac>
   16a8c:	lsl	r2, r5, #3
   16a90:	mov	r0, r7
   16a94:	mov	r1, r8
   16a98:	bl	12388 <memcpy@plt>
   16a9c:	b	16aa4 <flatcc_builder_append_union_vector@@Base+0xb0>
   16aa0:	mov	r7, #0
   16aa4:	mov	r0, r7
   16aa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16aac:	movw	r0, #35172	; 0x8964
   16ab0:	movw	r1, #32066	; 0x7d42
   16ab4:	movw	r3, #35483	; 0x8a9b
   16ab8:	movw	r2, #1692	; 0x69c
   16abc:	movt	r0, #1
   16ac0:	movt	r1, #1
   16ac4:	movt	r3, #1
   16ac8:	bl	12418 <__assert_fail@plt>

00016acc <flatcc_builder_create_string@@Base>:
   16acc:	push	{r4, r5, r6, sl, fp, lr}
   16ad0:	add	fp, sp, #16
   16ad4:	sub	sp, sp, #80	; 0x50
   16ad8:	str	r2, [fp, #-20]	; 0xffffffec
   16adc:	mvn	r5, r2
   16ae0:	mov	r6, r0
   16ae4:	mov	r3, #1
   16ae8:	cmp	r2, #0
   16aec:	ldr	ip, [r0, #136]	; 0x88
   16af0:	sub	r0, fp, #20
   16af4:	str	r0, [sp, #12]
   16af8:	mov	r0, #4
   16afc:	str	r0, [sp, #4]
   16b00:	str	r0, [sp, #16]
   16b04:	str	r3, [sp, #8]
   16b08:	add	r5, ip, r5
   16b0c:	and	r5, r5, #3
   16b10:	add	r5, r5, #1
   16b14:	beq	16b30 <flatcc_builder_create_string@@Base+0x64>
   16b18:	mov	r3, #2
   16b1c:	add	r0, r2, #4
   16b20:	str	r1, [sp, #20]
   16b24:	str	r2, [sp, #24]
   16b28:	str	r3, [sp, #8]
   16b2c:	str	r0, [sp, #4]
   16b30:	movw	r2, #31536	; 0x7b30
   16b34:	add	lr, sp, #4
   16b38:	add	r1, r0, r5
   16b3c:	add	r0, lr, r3, lsl #3
   16b40:	movt	r2, #1
   16b44:	str	r1, [sp, #4]
   16b48:	cmp	r1, #0
   16b4c:	str	r2, [r0, #8]
   16b50:	add	r2, r3, #1
   16b54:	str	r5, [r0, #12]
   16b58:	str	r2, [sp, #8]
   16b5c:	ble	16bb0 <flatcc_builder_create_string@@Base+0xe4>
   16b60:	ldr	r0, [r6, #36]	; 0x24
   16b64:	ldr	r4, [r6, #44]	; 0x2c
   16b68:	sub	r5, ip, r1
   16b6c:	str	r1, [sp]
   16b70:	add	r1, lr, #8
   16b74:	mov	r3, r5
   16b78:	blx	r4
   16b7c:	cmp	r0, #0
   16b80:	streq	r5, [r6, #136]	; 0x88
   16b84:	moveq	r0, r5
   16b88:	subeq	sp, fp, #16
   16b8c:	popeq	{r4, r5, r6, sl, fp, pc}
   16b90:	movw	r0, #36584	; 0x8ee8
   16b94:	movw	r1, #32066	; 0x7d42
   16b98:	movw	r3, #36263	; 0x8da7
   16b9c:	movw	r2, #651	; 0x28b
   16ba0:	movt	r0, #1
   16ba4:	movt	r1, #1
   16ba8:	movt	r3, #1
   16bac:	bl	12418 <__assert_fail@plt>
   16bb0:	movw	r0, #36584	; 0x8ee8
   16bb4:	movw	r1, #32066	; 0x7d42
   16bb8:	movw	r3, #36263	; 0x8da7
   16bbc:	movw	r2, #647	; 0x287
   16bc0:	movt	r0, #1
   16bc4:	movt	r1, #1
   16bc8:	movt	r3, #1
   16bcc:	bl	12418 <__assert_fail@plt>

00016bd0 <flatcc_builder_create_string_str@@Base>:
   16bd0:	push	{r4, r5, fp, lr}
   16bd4:	add	fp, sp, #8
   16bd8:	mov	r5, r0
   16bdc:	mov	r0, r1
   16be0:	mov	r4, r1
   16be4:	bl	123dc <strlen@plt>
   16be8:	mov	r2, r0
   16bec:	mov	r0, r5
   16bf0:	mov	r1, r4
   16bf4:	pop	{r4, r5, fp, lr}
   16bf8:	b	16acc <flatcc_builder_create_string@@Base>

00016bfc <flatcc_builder_create_string_strn@@Base>:
   16bfc:	push	{r4, r5, r6, sl, fp, lr}
   16c00:	add	fp, sp, #16
   16c04:	mov	r6, r0
   16c08:	mov	r5, r1
   16c0c:	mov	r0, r1
   16c10:	mov	r1, #0
   16c14:	mov	r4, r2
   16c18:	bl	12400 <memchr@plt>
   16c1c:	cmp	r0, #0
   16c20:	mov	r1, r5
   16c24:	subne	r4, r0, r5
   16c28:	mov	r0, r6
   16c2c:	mov	r2, r4
   16c30:	pop	{r4, r5, r6, sl, fp, lr}
   16c34:	b	16acc <flatcc_builder_create_string@@Base>

00016c38 <flatcc_builder_end_string@@Base>:
   16c38:	push	{r4, r5, fp, lr}
   16c3c:	add	fp, sp, #8
   16c40:	mov	r4, r0
   16c44:	ldr	r0, [r0, #32]
   16c48:	ldrh	r1, [r0, #14]
   16c4c:	cmp	r1, #6
   16c50:	bne	16cf8 <flatcc_builder_end_string@@Base+0xc0>
   16c54:	ldr	r2, [r0, #20]
   16c58:	ldr	r0, [r4, #20]
   16c5c:	cmp	r2, r0
   16c60:	bne	16d18 <flatcc_builder_end_string@@Base+0xe0>
   16c64:	ldr	r1, [r4, #16]
   16c68:	mov	r0, r4
   16c6c:	bl	16acc <flatcc_builder_create_string@@Base>
   16c70:	mov	r5, r0
   16c74:	cmp	r0, #0
   16c78:	beq	16cf0 <flatcc_builder_end_string@@Base+0xb8>
   16c7c:	ldr	r0, [r4, #16]
   16c80:	ldr	r2, [r4, #20]
   16c84:	mov	r1, #0
   16c88:	bl	123f4 <memset@plt>
   16c8c:	ldr	r0, [r4, #32]
   16c90:	ldr	r1, [r4, #60]	; 0x3c
   16c94:	ldr	ip, [r4, #64]	; 0x40
   16c98:	ldr	r3, [r0, #8]
   16c9c:	str	r3, [r4, #20]
   16ca0:	ldr	r3, [r0]
   16ca4:	str	r3, [r4, #28]
   16ca8:	add	r1, r1, r3
   16cac:	ldr	r2, [r0, #4]
   16cb0:	str	r1, [r4, #16]
   16cb4:	sub	r1, ip, r3
   16cb8:	cmp	r1, r2
   16cbc:	movhi	r1, r2
   16cc0:	str	r1, [r4, #24]
   16cc4:	ldrh	r1, [r4, #130]	; 0x82
   16cc8:	ldrh	r2, [r4, #128]	; 0x80
   16ccc:	cmp	r2, r1
   16cd0:	strhcc	r1, [r4, #128]	; 0x80
   16cd4:	ldrh	r1, [r0, #12]
   16cd8:	sub	r0, r0, #36	; 0x24
   16cdc:	str	r0, [r4, #32]
   16ce0:	strh	r1, [r4, #130]	; 0x82
   16ce4:	ldr	r0, [r4, #156]	; 0x9c
   16ce8:	sub	r0, r0, #1
   16cec:	str	r0, [r4, #156]	; 0x9c
   16cf0:	mov	r0, r5
   16cf4:	pop	{r4, r5, fp, pc}
   16cf8:	movw	r0, #33383	; 0x8267
   16cfc:	movw	r1, #32066	; 0x7d42
   16d00:	movw	r3, #35610	; 0x8b1a
   16d04:	movw	r2, #1732	; 0x6c4
   16d08:	movt	r0, #1
   16d0c:	movt	r1, #1
   16d10:	movt	r3, #1
   16d14:	bl	12418 <__assert_fail@plt>
   16d18:	movw	r0, #35677	; 0x8b5d
   16d1c:	movw	r1, #32066	; 0x7d42
   16d20:	movw	r3, #35610	; 0x8b1a
   16d24:	movw	r2, #1733	; 0x6c5
   16d28:	movt	r0, #1
   16d2c:	movt	r1, #1
   16d30:	movt	r3, #1
   16d34:	bl	12418 <__assert_fail@plt>

00016d38 <flatcc_builder_string_edit@@Base>:
   16d38:	ldr	r0, [r0, #16]
   16d3c:	bx	lr

00016d40 <flatcc_builder_string_len@@Base>:
   16d40:	ldr	r0, [r0, #32]
   16d44:	ldr	r0, [r0, #20]
   16d48:	bx	lr

00016d4c <flatcc_builder_table_edit@@Base>:
   16d4c:	ldr	r2, [r0, #32]
   16d50:	ldrh	r2, [r2, #14]
   16d54:	cmp	r2, #3
   16d58:	ldreq	r2, [r0, #16]
   16d5c:	ldreq	r0, [r0, #20]
   16d60:	addeq	r0, r2, r0
   16d64:	subeq	r0, r0, r1
   16d68:	bxeq	lr
   16d6c:	push	{fp, lr}
   16d70:	mov	fp, sp
   16d74:	movw	r0, #34135	; 0x8557
   16d78:	movw	r1, #32066	; 0x7d42
   16d7c:	movw	r3, #35855	; 0x8c0f
   16d80:	movw	r2, #1794	; 0x702
   16d84:	movt	r0, #1
   16d88:	movt	r1, #1
   16d8c:	movt	r3, #1
   16d90:	bl	12418 <__assert_fail@plt>

00016d94 <flatcc_builder_table_add_copy@@Base>:
   16d94:	push	{r4, r5, r6, sl, fp, lr}
   16d98:	add	fp, sp, #16
   16d9c:	mov	r4, r3
   16da0:	ldr	r3, [fp, #8]
   16da4:	mov	r5, r2
   16da8:	mov	r2, r4
   16dac:	bl	16228 <flatcc_builder_table_add@@Base>
   16db0:	mov	r6, r0
   16db4:	cmp	r0, #0
   16db8:	beq	16dcc <flatcc_builder_table_add_copy@@Base+0x38>
   16dbc:	mov	r0, r6
   16dc0:	mov	r1, r5
   16dc4:	mov	r2, r4
   16dc8:	bl	12388 <memcpy@plt>
   16dcc:	mov	r0, r6
   16dd0:	pop	{r4, r5, r6, sl, fp, pc}

00016dd4 <flatcc_builder_push_buffer_alignment@@Base>:
   16dd4:	ldrh	r1, [r0, #128]	; 0x80
   16dd8:	mov	r2, #4
   16ddc:	strh	r2, [r0, #128]	; 0x80
   16de0:	mov	r0, r1
   16de4:	bx	lr

00016de8 <flatcc_builder_pop_buffer_alignment@@Base>:
   16de8:	ldrh	r2, [r0, #128]	; 0x80
   16dec:	cmp	r2, r1
   16df0:	strhcc	r1, [r0, #128]	; 0x80
   16df4:	bx	lr

00016df8 <flatcc_builder_get_buffer_alignment@@Base>:
   16df8:	ldrh	r0, [r0, #128]	; 0x80
   16dfc:	bx	lr

00016e00 <flatcc_builder_set_vtable_clustering@@Base>:
   16e00:	clz	r1, r1
   16e04:	lsr	r1, r1, #5
   16e08:	str	r1, [r0, #180]	; 0xb4
   16e0c:	bx	lr

00016e10 <flatcc_builder_set_block_align@@Base>:
   16e10:	strh	r1, [r0, #132]	; 0x84
   16e14:	bx	lr

00016e18 <flatcc_builder_get_level@@Base>:
   16e18:	ldr	r0, [r0, #156]	; 0x9c
   16e1c:	bx	lr

00016e20 <flatcc_builder_set_max_level@@Base>:
   16e20:	str	r1, [r0, #176]	; 0xb0
   16e24:	ldr	r2, [r0, #160]	; 0xa0
   16e28:	cmp	r2, r1
   16e2c:	strlt	r1, [r0, #160]	; 0xa0
   16e30:	bx	lr

00016e34 <flatcc_builder_get_buffer_size@@Base>:
   16e34:	ldr	r1, [r0, #136]	; 0x88
   16e38:	ldr	r0, [r0, #140]	; 0x8c
   16e3c:	sub	r0, r0, r1
   16e40:	bx	lr

00016e44 <flatcc_builder_get_buffer_start@@Base>:
   16e44:	ldr	r0, [r0, #136]	; 0x88
   16e48:	bx	lr

00016e4c <flatcc_builder_get_buffer_end@@Base>:
   16e4c:	ldr	r0, [r0, #140]	; 0x8c
   16e50:	bx	lr

00016e54 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16e54:	str	r1, [r0, #172]	; 0xac
   16e58:	bx	lr

00016e5c <flatcc_builder_set_identifier@@Base>:
   16e5c:	movw	r2, #31536	; 0x7b30
   16e60:	cmp	r1, #0
   16e64:	movt	r2, #1
   16e68:	movne	r2, r1
   16e6c:	ldr	r1, [r2]
   16e70:	str	r1, [r0, #168]	; 0xa8
   16e74:	bx	lr

00016e78 <flatcc_builder_get_type@@Base>:
   16e78:	ldr	r0, [r0, #32]
   16e7c:	cmp	r0, #0
   16e80:	ldrhne	r0, [r0, #14]
   16e84:	moveq	r0, #0
   16e88:	bx	lr

00016e8c <flatcc_builder_get_type_at@@Base>:
   16e8c:	mov	r2, r0
   16e90:	cmp	r1, #1
   16e94:	mov	r0, #0
   16e98:	ldrge	r3, [r2, #156]	; 0x9c
   16e9c:	cmpge	r3, r1
   16ea0:	bge	16ea8 <flatcc_builder_get_type_at@@Base+0x1c>
   16ea4:	bx	lr
   16ea8:	sub	r0, r1, r3
   16eac:	ldr	r1, [r2, #32]
   16eb0:	add	r0, r0, r0, lsl #3
   16eb4:	add	r0, r1, r0, lsl #2
   16eb8:	ldrh	r0, [r0, #14]
   16ebc:	bx	lr

00016ec0 <flatcc_builder_get_direct_buffer@@Base>:
   16ec0:	ldr	r2, [r0, #184]	; 0xb8
   16ec4:	cmp	r2, #0
   16ec8:	beq	16edc <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16ecc:	ldr	r2, [r0, #188]	; 0xbc
   16ed0:	ldr	r3, [r0, #192]	; 0xc0
   16ed4:	cmp	r2, r3
   16ed8:	beq	16eec <flatcc_builder_get_direct_buffer@@Base+0x2c>
   16edc:	mov	r0, #0
   16ee0:	cmp	r1, #0
   16ee4:	strne	r0, [r1]
   16ee8:	bx	lr
   16eec:	cmp	r1, #0
   16ef0:	ldrne	r2, [r0, #212]	; 0xd4
   16ef4:	strne	r2, [r1]
   16ef8:	ldr	r0, [r0, #196]	; 0xc4
   16efc:	bx	lr

00016f00 <flatcc_builder_copy_buffer@@Base>:
   16f00:	push	{fp, lr}
   16f04:	mov	fp, sp
   16f08:	ldr	r3, [r0, #184]	; 0xb8
   16f0c:	cmp	r3, #0
   16f10:	beq	16f44 <flatcc_builder_copy_buffer@@Base+0x44>
   16f14:	add	r0, r0, #188	; 0xbc
   16f18:	bl	17620 <flatcc_emitter_copy_buffer@@Base>
   16f1c:	cmp	r0, #0
   16f20:	popne	{fp, pc}
   16f24:	movw	r0, #32662	; 0x7f96
   16f28:	movw	r1, #32066	; 0x7d42
   16f2c:	movw	r3, #35994	; 0x8c9a
   16f30:	movw	r2, #1926	; 0x786
   16f34:	movt	r0, #1
   16f38:	movt	r1, #1
   16f3c:	movt	r3, #1
   16f40:	bl	12418 <__assert_fail@plt>
   16f44:	mov	r0, #0
   16f48:	pop	{fp, pc}

00016f4c <flatcc_builder_finalize_buffer@@Base>:
   16f4c:	push	{r4, r5, r6, sl, fp, lr}
   16f50:	add	fp, sp, #16
   16f54:	mov	r4, r0
   16f58:	ldr	r0, [r0, #136]	; 0x88
   16f5c:	cmp	r1, #0
   16f60:	ldr	r2, [r4, #140]	; 0x8c
   16f64:	sub	r5, r2, r0
   16f68:	mov	r0, r5
   16f6c:	strne	r5, [r1]
   16f70:	bl	123b8 <malloc@plt>
   16f74:	cmp	r0, #0
   16f78:	beq	16fbc <flatcc_builder_finalize_buffer@@Base+0x70>
   16f7c:	mov	r6, r0
   16f80:	mov	r0, r4
   16f84:	mov	r2, r5
   16f88:	mov	r1, r6
   16f8c:	bl	16f00 <flatcc_builder_copy_buffer@@Base>
   16f90:	cmp	r0, #0
   16f94:	movne	r0, r6
   16f98:	popne	{r4, r5, r6, sl, fp, pc}
   16f9c:	movw	r0, #36584	; 0x8ee8
   16fa0:	movw	r1, #32066	; 0x7d42
   16fa4:	movw	r3, #36063	; 0x8cdf
   16fa8:	movw	r2, #1948	; 0x79c
   16fac:	movt	r0, #1
   16fb0:	movt	r1, #1
   16fb4:	movt	r3, #1
   16fb8:	bl	12418 <__assert_fail@plt>
   16fbc:	movw	r0, #36584	; 0x8ee8
   16fc0:	movw	r1, #32066	; 0x7d42
   16fc4:	movw	r3, #36063	; 0x8cdf
   16fc8:	movw	r2, #1944	; 0x798
   16fcc:	movt	r0, #1
   16fd0:	movt	r1, #1
   16fd4:	movt	r3, #1
   16fd8:	bl	12418 <__assert_fail@plt>

00016fdc <flatcc_builder_finalize_aligned_buffer@@Base>:
   16fdc:	push	{r4, r5, r6, r7, fp, lr}
   16fe0:	add	fp, sp, #16
   16fe4:	sub	sp, sp, #8
   16fe8:	mov	r5, r0
   16fec:	mov	r4, r1
   16ff0:	ldr	r0, [r0, #136]	; 0x88
   16ff4:	ldr	r1, [r5, #140]	; 0x8c
   16ff8:	cmp	r4, #0
   16ffc:	sub	r0, r1, r0
   17000:	mov	r1, #0
   17004:	strne	r0, [r4]
   17008:	ldrh	r2, [r5, #128]	; 0x80
   1700c:	str	r1, [sp, #4]
   17010:	add	r0, r0, r2
   17014:	cmp	r2, #4
   17018:	mov	r1, r2
   1701c:	rsb	r2, r2, #0
   17020:	sub	r0, r0, #1
   17024:	movls	r1, #4
   17028:	and	r7, r0, r2
   1702c:	add	r0, sp, #4
   17030:	mov	r2, r7
   17034:	bl	123e8 <posix_memalign@plt>
   17038:	ldr	r6, [sp, #4]
   1703c:	cmp	r0, #0
   17040:	cmpne	r6, #0
   17044:	bne	17068 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   17048:	cmp	r6, #0
   1704c:	beq	17070 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   17050:	mov	r0, r5
   17054:	mov	r1, r6
   17058:	mov	r2, r7
   1705c:	bl	16f00 <flatcc_builder_copy_buffer@@Base>
   17060:	cmp	r0, #0
   17064:	bne	1707c <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   17068:	mov	r0, r6
   1706c:	bl	1237c <free@plt>
   17070:	mov	r6, #0
   17074:	cmp	r4, #0
   17078:	strne	r6, [r4]
   1707c:	mov	r0, r6
   17080:	sub	sp, fp, #16
   17084:	pop	{r4, r5, r6, r7, fp, pc}

00017088 <flatcc_builder_aligned_alloc@@Base>:
   17088:	push	{fp, lr}
   1708c:	mov	fp, sp
   17090:	sub	sp, sp, #8
   17094:	mov	r2, r1
   17098:	mov	r1, r0
   1709c:	mov	r0, #0
   170a0:	cmp	r1, #4
   170a4:	str	r0, [sp, #4]
   170a8:	add	r0, sp, #4
   170ac:	movls	r1, #4
   170b0:	bl	123e8 <posix_memalign@plt>
   170b4:	mov	r1, r0
   170b8:	ldr	r0, [sp, #4]
   170bc:	cmp	r1, #0
   170c0:	cmpne	r0, #0
   170c4:	beq	170d4 <flatcc_builder_aligned_alloc@@Base+0x4c>
   170c8:	bl	1237c <free@plt>
   170cc:	mov	r0, #0
   170d0:	str	r0, [sp, #4]
   170d4:	mov	sp, fp
   170d8:	pop	{fp, pc}

000170dc <flatcc_builder_aligned_free@@Base>:
   170dc:	b	1237c <free@plt>

000170e0 <flatcc_builder_get_emit_context@@Base>:
   170e0:	ldr	r0, [r0, #36]	; 0x24
   170e4:	bx	lr
   170e8:	push	{r4, r5, r6, sl, fp, lr}
   170ec:	add	fp, sp, #16
   170f0:	sub	sp, sp, #8
   170f4:	mov	r6, r2
   170f8:	ldr	r2, [r0, #28]
   170fc:	mov	r5, r0
   17100:	ldr	r0, [r0, #40]	; 0x28
   17104:	mov	r3, #1
   17108:	ldr	r4, [r5, #48]	; 0x30
   1710c:	str	r3, [sp]
   17110:	mov	r3, #1
   17114:	add	r2, r2, r1
   17118:	add	r1, r5, #60	; 0x3c
   1711c:	blx	r4
   17120:	mov	r1, r0
   17124:	mvn	r0, #0
   17128:	cmp	r1, #0
   1712c:	bne	17160 <flatcc_builder_get_emit_context@@Base+0x80>
   17130:	ldr	r0, [r5, #28]
   17134:	ldr	r2, [r5, #60]	; 0x3c
   17138:	ldr	r3, [r5, #64]	; 0x40
   1713c:	ldr	r1, [r5, #32]
   17140:	add	r2, r2, r0
   17144:	sub	r0, r3, r0
   17148:	cmp	r0, r6
   1714c:	str	r2, [r5, #16]
   17150:	movhi	r0, r6
   17154:	str	r0, [r5, #24]
   17158:	mov	r0, #0
   1715c:	str	r6, [r1, #4]
   17160:	sub	sp, fp, #16
   17164:	pop	{r4, r5, r6, sl, fp, pc}

00017168 <flatcc_emitter_recycle_page@@Base>:
   17168:	ldr	r3, [r0]
   1716c:	mov	r2, r0
   17170:	mvn	r0, #0
   17174:	cmp	r3, r1
   17178:	ldrne	r2, [r2, #4]
   1717c:	cmpne	r2, r1
   17180:	bne	17188 <flatcc_emitter_recycle_page@@Base+0x20>
   17184:	bx	lr
   17188:	ldr	r0, [r1, #2944]	; 0xb80
   1718c:	ldr	r2, [r1, #2948]	; 0xb84
   17190:	str	r2, [r0, #2948]	; 0xb84
   17194:	ldr	r2, [r1, #2948]	; 0xb84
   17198:	str	r0, [r2, #2944]	; 0xb80
   1719c:	ldr	r0, [r3, #2948]	; 0xb84
   171a0:	str	r3, [r1, #2944]	; 0xb80
   171a4:	str	r0, [r1, #2948]	; 0xb84
   171a8:	str	r1, [r0, #2944]	; 0xb80
   171ac:	ldr	r0, [r1, #2944]	; 0xb80
   171b0:	str	r1, [r0, #2948]	; 0xb84
   171b4:	mov	r0, #0
   171b8:	bx	lr

000171bc <flatcc_emitter_reset@@Base>:
   171bc:	push	{r4, sl, fp, lr}
   171c0:	add	fp, sp, #8
   171c4:	ldr	r1, [r0]
   171c8:	cmp	r1, #0
   171cc:	beq	17284 <flatcc_emitter_reset@@Base+0xc8>
   171d0:	mov	r4, r0
   171d4:	add	r2, r1, #1472	; 0x5c0
   171d8:	mov	r0, #1472	; 0x5c0
   171dc:	mov	r3, #0
   171e0:	stmib	r4, {r1, r2}
   171e4:	str	r0, [r4, #12]
   171e8:	str	r2, [r4, #16]
   171ec:	str	r0, [r4, #20]
   171f0:	movw	r0, #64064	; 0xfa40
   171f4:	movt	r0, #65535	; 0xffff
   171f8:	str	r0, [r1, #2952]	; 0xb88
   171fc:	ldr	r2, [r4, #32]
   17200:	ldr	r0, [r4, #24]
   17204:	cmp	r2, #0
   17208:	moveq	r2, r0
   1720c:	streq	r0, [r4, #32]
   17210:	str	r3, [r4, #24]
   17214:	add	r2, r2, r2, lsl #1
   17218:	lsr	r2, r2, #2
   1721c:	add	r0, r2, r0, lsr #2
   17220:	str	r0, [r4, #32]
   17224:	ldr	r2, [r4, #28]
   17228:	cmp	r2, r0, lsl #1
   1722c:	bls	17284 <flatcc_emitter_reset@@Base+0xc8>
   17230:	mov	r2, r1
   17234:	ldr	r0, [r2, #2944]!	; 0xb80
   17238:	cmp	r0, r1
   1723c:	beq	17284 <flatcc_emitter_reset@@Base+0xc8>
   17240:	ldr	r3, [r0, #2944]	; 0xb80
   17244:	str	r3, [r2]
   17248:	ldr	r2, [r0, #2944]	; 0xb80
   1724c:	str	r1, [r2, #2948]	; 0xb84
   17250:	bl	1237c <free@plt>
   17254:	ldr	r0, [r4, #28]
   17258:	ldr	r1, [r4, #32]
   1725c:	sub	r0, r0, #2944	; 0xb80
   17260:	cmp	r0, r1, lsl #1
   17264:	str	r0, [r4, #28]
   17268:	popls	{r4, sl, fp, pc}
   1726c:	ldr	r1, [r4, #4]
   17270:	ldr	r3, [r4]
   17274:	mov	r2, r1
   17278:	ldr	r0, [r2, #2944]!	; 0xb80
   1727c:	cmp	r0, r3
   17280:	bne	17240 <flatcc_emitter_reset@@Base+0x84>
   17284:	pop	{r4, sl, fp, pc}

00017288 <flatcc_emitter_clear@@Base>:
   17288:	push	{r4, r5, r6, sl, fp, lr}
   1728c:	add	fp, sp, #16
   17290:	ldr	r5, [r0]
   17294:	cmp	r5, #0
   17298:	popeq	{r4, r5, r6, sl, fp, pc}
   1729c:	mov	r4, r0
   172a0:	ldr	r0, [r5, #2948]	; 0xb84
   172a4:	mov	r6, #0
   172a8:	str	r6, [r0, #2944]	; 0xb80
   172ac:	b	172bc <flatcc_emitter_clear@@Base+0x34>
   172b0:	mov	r5, r0
   172b4:	ldr	r0, [r0, #2948]	; 0xb84
   172b8:	bl	1237c <free@plt>
   172bc:	ldr	r0, [r5, #2944]	; 0xb80
   172c0:	cmp	r0, #0
   172c4:	bne	172b0 <flatcc_emitter_clear@@Base+0x28>
   172c8:	mov	r0, r5
   172cc:	bl	1237c <free@plt>
   172d0:	vmov.i32	q8, #0	; 0x00000000
   172d4:	add	r0, r4, #16
   172d8:	vst1.32	{d16-d17}, [r0]
   172dc:	mov	r0, #32
   172e0:	vst1.32	{d16-d17}, [r4], r0
   172e4:	str	r6, [r4]
   172e8:	pop	{r4, r5, r6, sl, fp, pc}

000172ec <flatcc_emitter@@Base>:
   172ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172f0:	add	fp, sp, #28
   172f4:	sub	sp, sp, #4
   172f8:	mov	r6, r0
   172fc:	mov	r7, r1
   17300:	ldr	r0, [r0, #24]
   17304:	ldr	r1, [fp, #8]
   17308:	mov	r4, r2
   1730c:	cmn	r3, #1
   17310:	mov	r9, r6
   17314:	add	r0, r0, r1
   17318:	str	r0, [r6, #24]
   1731c:	ble	17454 <flatcc_emitter@@Base+0x168>
   17320:	ldr	r0, [r9, #20]!
   17324:	cmp	r0, r1
   17328:	bcs	175bc <flatcc_emitter@@Base+0x2d0>
   1732c:	mov	r8, #0
   17330:	cmp	r4, #0
   17334:	beq	17614 <flatcc_emitter@@Base+0x328>
   17338:	movw	sl, #64064	; 0xfa40
   1733c:	movt	sl, #65535	; 0xffff
   17340:	ldr	r8, [r7, #4]
   17344:	cmp	r8, #0
   17348:	beq	17444 <flatcc_emitter@@Base+0x158>
   1734c:	ldr	r9, [r7]
   17350:	cmp	r8, r0
   17354:	mov	r5, r8
   17358:	bls	17410 <flatcc_emitter@@Base+0x124>
   1735c:	mov	r5, r0
   17360:	cmp	r5, #0
   17364:	bne	17410 <flatcc_emitter@@Base+0x124>
   17368:	ldr	r5, [r6, #4]
   1736c:	cmp	r5, #0
   17370:	beq	17384 <flatcc_emitter@@Base+0x98>
   17374:	ldr	r0, [r5, #2944]	; 0xb80
   17378:	ldr	r1, [r6]
   1737c:	cmp	r0, r1
   17380:	bne	173bc <flatcc_emitter@@Base+0xd0>
   17384:	movw	r0, #2956	; 0xb8c
   17388:	bl	123b8 <malloc@plt>
   1738c:	cmp	r0, #0
   17390:	beq	175cc <flatcc_emitter@@Base+0x2e0>
   17394:	ldr	r1, [r6, #28]
   17398:	cmp	r5, #0
   1739c:	add	r1, r1, #2944	; 0xb80
   173a0:	str	r1, [r6, #28]
   173a4:	beq	173e0 <flatcc_emitter@@Base+0xf4>
   173a8:	ldr	r1, [r6]
   173ac:	str	r1, [r0, #2944]	; 0xb80
   173b0:	str	r5, [r0, #2948]	; 0xb84
   173b4:	str	r0, [r1, #2948]	; 0xb84
   173b8:	str	r0, [r5, #2944]	; 0xb80
   173bc:	mov	r5, #2944	; 0xb80
   173c0:	str	r0, [r6, #4]
   173c4:	str	r0, [r6, #16]
   173c8:	str	r5, [r6, #20]
   173cc:	ldr	r1, [r0, #2948]	; 0xb84
   173d0:	ldr	r1, [r1, #2952]	; 0xb88
   173d4:	add	r1, r1, #2944	; 0xb80
   173d8:	str	r1, [r0, #2952]	; 0xb88
   173dc:	b	17404 <flatcc_emitter@@Base+0x118>
   173e0:	mov	r5, #1472	; 0x5c0
   173e4:	add	r1, r0, #1472	; 0x5c0
   173e8:	str	r0, [r6]
   173ec:	stmib	r6, {r0, r1, r5}
   173f0:	str	r1, [r6, #16]
   173f4:	str	r5, [r6, #20]
   173f8:	str	r0, [r0, #2944]	; 0xb80
   173fc:	str	r0, [r0, #2948]	; 0xb84
   17400:	str	sl, [r0, #2952]	; 0xb88
   17404:	cmp	r8, r5
   17408:	bhi	17360 <flatcc_emitter@@Base+0x74>
   1740c:	mov	r5, r8
   17410:	ldr	r0, [r6, #16]
   17414:	mov	r1, r9
   17418:	mov	r2, r5
   1741c:	bl	12388 <memcpy@plt>
   17420:	ldr	r0, [r6, #16]
   17424:	ldr	r1, [r6, #20]
   17428:	add	r9, r9, r5
   1742c:	subs	r8, r8, r5
   17430:	add	r2, r0, r5
   17434:	sub	r0, r1, r5
   17438:	str	r2, [r6, #16]
   1743c:	str	r0, [r6, #20]
   17440:	bne	17350 <flatcc_emitter@@Base+0x64>
   17444:	subs	r4, r4, #1
   17448:	add	r7, r7, #8
   1744c:	bne	17340 <flatcc_emitter@@Base+0x54>
   17450:	b	175b4 <flatcc_emitter@@Base+0x2c8>
   17454:	ldr	r0, [r9, #12]!
   17458:	cmp	r0, r1
   1745c:	bcs	175d4 <flatcc_emitter@@Base+0x2e8>
   17460:	mov	r8, #0
   17464:	cmp	r4, #0
   17468:	beq	17614 <flatcc_emitter@@Base+0x328>
   1746c:	add	r0, r7, r4, lsl #3
   17470:	movw	sl, #2952	; 0xb88
   17474:	ldr	r8, [r0, #-4]
   17478:	sub	r1, r0, #8
   1747c:	str	r1, [sp]
   17480:	cmp	r8, #0
   17484:	beq	175a8 <flatcc_emitter@@Base+0x2bc>
   17488:	ldr	r0, [sp]
   1748c:	ldr	r0, [r0]
   17490:	add	r7, r0, r8
   17494:	ldr	r1, [r9]
   17498:	b	17560 <flatcc_emitter@@Base+0x274>
   1749c:	ldr	r5, [r6]
   174a0:	cmp	r5, #0
   174a4:	beq	174cc <flatcc_emitter@@Base+0x1e0>
   174a8:	ldr	r0, [r5, #2948]	; 0xb84
   174ac:	ldr	r1, [r6, #4]
   174b0:	cmp	r0, r1
   174b4:	beq	174cc <flatcc_emitter@@Base+0x1e0>
   174b8:	ldr	r1, [r5, #2952]	; 0xb88
   174bc:	mov	r2, r0
   174c0:	sub	r1, r1, #2944	; 0xb80
   174c4:	str	r1, [r2, #2952]!	; 0xb88
   174c8:	b	17508 <flatcc_emitter@@Base+0x21c>
   174cc:	movw	r0, #2956	; 0xb8c
   174d0:	bl	123b8 <malloc@plt>
   174d4:	cmp	r0, #0
   174d8:	beq	175cc <flatcc_emitter@@Base+0x2e0>
   174dc:	ldr	r1, [r6, #28]
   174e0:	cmp	r5, #0
   174e4:	add	r1, r1, #2944	; 0xb80
   174e8:	str	r1, [r6, #28]
   174ec:	beq	17530 <flatcc_emitter@@Base+0x244>
   174f0:	ldr	r1, [r6, #4]
   174f4:	add	r2, r0, sl
   174f8:	str	r5, [r0, #2944]	; 0xb80
   174fc:	str	r1, [r0, #2948]	; 0xb84
   17500:	str	r0, [r5, #2948]	; 0xb84
   17504:	str	r0, [r1, #2944]	; 0xb80
   17508:	str	r0, [r6]
   1750c:	add	r3, r0, #2944	; 0xb80
   17510:	mov	r1, #2944	; 0xb80
   17514:	str	r3, [r6, #8]
   17518:	str	r1, [r6, #12]
   1751c:	ldr	r0, [r0, #2944]	; 0xb80
   17520:	ldr	r0, [r0, #2952]	; 0xb88
   17524:	sub	r0, r0, #2944	; 0xb80
   17528:	str	r0, [r2]
   1752c:	b	17560 <flatcc_emitter@@Base+0x274>
   17530:	add	r2, r0, #1472	; 0x5c0
   17534:	mov	r1, #1472	; 0x5c0
   17538:	str	r0, [r6]
   1753c:	stmib	r6, {r0, r2}
   17540:	str	r1, [r6, #12]
   17544:	str	r2, [r6, #16]
   17548:	movw	r2, #64064	; 0xfa40
   1754c:	str	r1, [r6, #20]
   17550:	str	r0, [r0, #2944]	; 0xb80
   17554:	str	r0, [r0, #2948]	; 0xb84
   17558:	movt	r2, #65535	; 0xffff
   1755c:	str	r2, [r0, #2952]	; 0xb88
   17560:	cmp	r8, r1
   17564:	bls	17578 <flatcc_emitter@@Base+0x28c>
   17568:	cmp	r1, #0
   1756c:	mov	r5, r1
   17570:	beq	1749c <flatcc_emitter@@Base+0x1b0>
   17574:	b	1757c <flatcc_emitter@@Base+0x290>
   17578:	mov	r5, r8
   1757c:	sub	r0, r1, r5
   17580:	sub	r7, r7, r5
   17584:	mov	r2, r5
   17588:	str	r0, [r6, #12]
   1758c:	mov	r1, r7
   17590:	ldr	r0, [r6, #8]
   17594:	sub	r0, r0, r5
   17598:	str	r0, [r6, #8]
   1759c:	bl	12388 <memcpy@plt>
   175a0:	subs	r8, r8, r5
   175a4:	bne	17494 <flatcc_emitter@@Base+0x1a8>
   175a8:	ldr	r0, [sp]
   175ac:	subs	r4, r4, #1
   175b0:	bne	17474 <flatcc_emitter@@Base+0x188>
   175b4:	mov	r8, #0
   175b8:	b	17614 <flatcc_emitter@@Base+0x328>
   175bc:	ldr	r5, [r6, #16]
   175c0:	add	r2, r5, r1
   175c4:	str	r2, [r6, #16]
   175c8:	b	175e0 <flatcc_emitter@@Base+0x2f4>
   175cc:	mvn	r8, #0
   175d0:	b	17614 <flatcc_emitter@@Base+0x328>
   175d4:	ldr	r2, [r6, #8]
   175d8:	sub	r5, r2, r1
   175dc:	str	r5, [r6, #8]
   175e0:	sub	r0, r0, r1
   175e4:	mov	r8, #0
   175e8:	cmp	r4, #0
   175ec:	str	r0, [r9]
   175f0:	beq	17614 <flatcc_emitter@@Base+0x328>
   175f4:	ldm	r7, {r1, r2}
   175f8:	mov	r0, r5
   175fc:	bl	12388 <memcpy@plt>
   17600:	ldr	r0, [r7, #4]
   17604:	add	r7, r7, #8
   17608:	subs	r4, r4, #1
   1760c:	add	r5, r5, r0
   17610:	bne	175f4 <flatcc_emitter@@Base+0x308>
   17614:	mov	r0, r8
   17618:	sub	sp, fp, #28
   1761c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017620 <flatcc_emitter_copy_buffer@@Base>:
   17620:	push	{r4, r5, r6, sl, fp, lr}
   17624:	add	fp, sp, #16
   17628:	mov	r3, r2
   1762c:	ldr	r2, [r0, #24]
   17630:	mov	r5, #0
   17634:	cmp	r2, r3
   17638:	bhi	176d4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   1763c:	mov	r4, r0
   17640:	ldr	r0, [r0]
   17644:	cmp	r0, #0
   17648:	beq	176d4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   1764c:	mov	r6, r1
   17650:	ldr	r1, [r4, #4]
   17654:	cmp	r0, r1
   17658:	beq	176c4 <flatcc_emitter_copy_buffer@@Base+0xa4>
   1765c:	ldr	r0, [r4, #12]
   17660:	ldr	r1, [r4, #8]
   17664:	rsb	r5, r0, #2944	; 0xb80
   17668:	mov	r0, r6
   1766c:	mov	r2, r5
   17670:	bl	12388 <memcpy@plt>
   17674:	ldm	r4, {r0, r1}
   17678:	add	r5, r6, r5
   1767c:	ldr	r6, [r0, #2944]	; 0xb80
   17680:	cmp	r6, r1
   17684:	beq	176ac <flatcc_emitter_copy_buffer@@Base+0x8c>
   17688:	mov	r0, r5
   1768c:	mov	r1, r6
   17690:	mov	r2, #2944	; 0xb80
   17694:	bl	12388 <memcpy@plt>
   17698:	ldr	r6, [r6, #2944]	; 0xb80
   1769c:	ldr	r0, [r4, #4]
   176a0:	add	r5, r5, #2944	; 0xb80
   176a4:	cmp	r6, r0
   176a8:	bne	17688 <flatcc_emitter_copy_buffer@@Base+0x68>
   176ac:	ldr	r0, [r4, #20]
   176b0:	mov	r1, r6
   176b4:	rsb	r2, r0, #2944	; 0xb80
   176b8:	mov	r0, r5
   176bc:	bl	12388 <memcpy@plt>
   176c0:	b	176d4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   176c4:	ldr	r1, [r4, #8]
   176c8:	mov	r0, r6
   176cc:	bl	12388 <memcpy@plt>
   176d0:	mov	r5, r6
   176d4:	mov	r0, r5
   176d8:	pop	{r4, r5, r6, sl, fp, pc}

000176dc <__libc_csu_init@@Base>:
   176dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   176e0:	mov	r7, r0
   176e4:	ldr	r6, [pc, #72]	; 17734 <__libc_csu_init@@Base+0x58>
   176e8:	ldr	r5, [pc, #72]	; 17738 <__libc_csu_init@@Base+0x5c>
   176ec:	add	r6, pc, r6
   176f0:	add	r5, pc, r5
   176f4:	sub	r6, r6, r5
   176f8:	mov	r8, r1
   176fc:	mov	r9, r2
   17700:	bl	12350 <strcmp@plt-0x20>
   17704:	asrs	r6, r6, #2
   17708:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1770c:	mov	r4, #0
   17710:	add	r4, r4, #1
   17714:	ldr	r3, [r5], #4
   17718:	mov	r2, r9
   1771c:	mov	r1, r8
   17720:	mov	r0, r7
   17724:	blx	r3
   17728:	cmp	r6, r4
   1772c:	bne	17710 <__libc_csu_init@@Base+0x34>
   17730:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17734:	andeq	r2, r1, r8, lsl r8
   17738:	andeq	r2, r1, r0, lsl r8

0001773c <__libc_csu_fini@@Base>:
   1773c:	bx	lr

Disassembly of section .fini:

00017740 <.fini>:
   17740:	push	{r3, lr}
   17744:	pop	{r3, pc}
