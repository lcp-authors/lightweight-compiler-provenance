
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011388 <.init>:
   11388:	push	{r3, lr}
   1138c:	bl	11798 <__assert_fail@plt+0x48>
   11390:	pop	{r3, pc}

Disassembly of section .plt:

00011394 <fdopen@plt-0x14>:
   11394:	push	{lr}		; (str lr, [sp, #-4]!)
   11398:	ldr	lr, [pc, #4]	; 113a4 <fdopen@plt-0x4>
   1139c:	add	lr, pc, lr
   113a0:	ldr	pc, [lr, #8]!
   113a4:	andeq	r8, r1, ip, asr ip

000113a8 <fdopen@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #24, 20	; 0x18000
   113b0:	ldr	pc, [ip, #3164]!	; 0xc5c

000113b4 <calloc@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #24, 20	; 0x18000
   113bc:	ldr	pc, [ip, #3156]!	; 0xc54

000113c0 <fputs_unlocked@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #24, 20	; 0x18000
   113c8:	ldr	pc, [ip, #3148]!	; 0xc4c

000113cc <raise@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #24, 20	; 0x18000
   113d4:	ldr	pc, [ip, #3140]!	; 0xc44

000113d8 <strcmp@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #24, 20	; 0x18000
   113e0:	ldr	pc, [ip, #3132]!	; 0xc3c

000113e4 <strtol@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #24, 20	; 0x18000
   113ec:	ldr	pc, [ip, #3124]!	; 0xc34

000113f0 <read@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #24, 20	; 0x18000
   113f8:	ldr	pc, [ip, #3116]!	; 0xc2c

000113fc <fflush@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #24, 20	; 0x18000
   11404:	ldr	pc, [ip, #3108]!	; 0xc24

00011408 <sigprocmask@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #24, 20	; 0x18000
   11410:	ldr	pc, [ip, #3100]!	; 0xc1c

00011414 <memmove@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #24, 20	; 0x18000
   1141c:	ldr	pc, [ip, #3092]!	; 0xc14

00011420 <free@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #24, 20	; 0x18000
   11428:	ldr	pc, [ip, #3084]!	; 0xc0c

0001142c <_exit@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #24, 20	; 0x18000
   11434:	ldr	pc, [ip, #3076]!	; 0xc04

00011438 <memcpy@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #24, 20	; 0x18000
   11440:	ldr	pc, [ip, #3068]!	; 0xbfc

00011444 <mbsinit@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #24, 20	; 0x18000
   1144c:	ldr	pc, [ip, #3060]!	; 0xbf4

00011450 <ftruncate64@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #24, 20	; 0x18000
   11458:	ldr	pc, [ip, #3052]!	; 0xbec

0001145c <fwrite_unlocked@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #24, 20	; 0x18000
   11464:	ldr	pc, [ip, #3044]!	; 0xbe4

00011468 <memcmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #24, 20	; 0x18000
   11470:	ldr	pc, [ip, #3036]!	; 0xbdc

00011474 <dcgettext@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #24, 20	; 0x18000
   1147c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011480 <dup2@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #24, 20	; 0x18000
   11488:	ldr	pc, [ip, #3020]!	; 0xbcc

0001148c <realloc@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #24, 20	; 0x18000
   11494:	ldr	pc, [ip, #3012]!	; 0xbc4

00011498 <textdomain@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #24, 20	; 0x18000
   114a0:	ldr	pc, [ip, #3004]!	; 0xbbc

000114a4 <rawmemchr@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #24, 20	; 0x18000
   114ac:	ldr	pc, [ip, #2996]!	; 0xbb4

000114b0 <iswprint@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #24, 20	; 0x18000
   114b8:	ldr	pc, [ip, #2988]!	; 0xbac

000114bc <__fxstat64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #24, 20	; 0x18000
   114c4:	ldr	pc, [ip, #2980]!	; 0xba4

000114c8 <sigaction@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #24, 20	; 0x18000
   114d0:	ldr	pc, [ip, #2972]!	; 0xb9c

000114d4 <lseek64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #24, 20	; 0x18000
   114dc:	ldr	pc, [ip, #2964]!	; 0xb94

000114e0 <waitpid@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #24, 20	; 0x18000
   114e8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114ec <__ctype_get_mb_cur_max@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #24, 20	; 0x18000
   114f4:	ldr	pc, [ip, #2948]!	; 0xb84

000114f8 <strcpy@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #24, 20	; 0x18000
   11500:	ldr	pc, [ip, #2940]!	; 0xb7c

00011504 <__fpending@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #24, 20	; 0x18000
   1150c:	ldr	pc, [ip, #2932]!	; 0xb74

00011510 <ferror_unlocked@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #24, 20	; 0x18000
   11518:	ldr	pc, [ip, #2924]!	; 0xb6c

0001151c <mbrtowc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #24, 20	; 0x18000
   11524:	ldr	pc, [ip, #2916]!	; 0xb64

00011528 <error@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #24, 20	; 0x18000
   11530:	ldr	pc, [ip, #2908]!	; 0xb5c

00011534 <open64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #24, 20	; 0x18000
   1153c:	ldr	pc, [ip, #2900]!	; 0xb54

00011540 <getenv@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #24, 20	; 0x18000
   11548:	ldr	pc, [ip, #2892]!	; 0xb4c

0001154c <malloc@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #24, 20	; 0x18000
   11554:	ldr	pc, [ip, #2884]!	; 0xb44

00011558 <sigaddset@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #24, 20	; 0x18000
   11560:	ldr	pc, [ip, #2876]!	; 0xb3c

00011564 <__libc_start_main@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #24, 20	; 0x18000
   1156c:	ldr	pc, [ip, #2868]!	; 0xb34

00011570 <__freading@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #24, 20	; 0x18000
   11578:	ldr	pc, [ip, #2860]!	; 0xb2c

0001157c <__gmon_start__@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #24, 20	; 0x18000
   11584:	ldr	pc, [ip, #2852]!	; 0xb24

00011588 <getopt_long@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #24, 20	; 0x18000
   11590:	ldr	pc, [ip, #2844]!	; 0xb1c

00011594 <__ctype_b_loc@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #24, 20	; 0x18000
   1159c:	ldr	pc, [ip, #2836]!	; 0xb14

000115a0 <exit@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #24, 20	; 0x18000
   115a8:	ldr	pc, [ip, #2828]!	; 0xb0c

000115ac <strlen@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #24, 20	; 0x18000
   115b4:	ldr	pc, [ip, #2820]!	; 0xb04

000115b8 <__libc_current_sigrtmax@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #24, 20	; 0x18000
   115c0:	ldr	pc, [ip, #2812]!	; 0xafc

000115c4 <strchr@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #24, 20	; 0x18000
   115cc:	ldr	pc, [ip, #2804]!	; 0xaf4

000115d0 <setenv@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #24, 20	; 0x18000
   115d8:	ldr	pc, [ip, #2796]!	; 0xaec

000115dc <memrchr@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #24, 20	; 0x18000
   115e4:	ldr	pc, [ip, #2788]!	; 0xae4

000115e8 <getpagesize@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #24, 20	; 0x18000
   115f0:	ldr	pc, [ip, #2780]!	; 0xadc

000115f4 <__errno_location@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #24, 20	; 0x18000
   115fc:	ldr	pc, [ip, #2772]!	; 0xad4

00011600 <__sprintf_chk@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #24, 20	; 0x18000
   11608:	ldr	pc, [ip, #2764]!	; 0xacc

0001160c <__cxa_atexit@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #24, 20	; 0x18000
   11614:	ldr	pc, [ip, #2756]!	; 0xac4

00011618 <memset@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #24, 20	; 0x18000
   11620:	ldr	pc, [ip, #2748]!	; 0xabc

00011624 <__printf_chk@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #24, 20	; 0x18000
   1162c:	ldr	pc, [ip, #2740]!	; 0xab4

00011630 <write@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #24, 20	; 0x18000
   11638:	ldr	pc, [ip, #2732]!	; 0xaac

0001163c <fileno@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #24, 20	; 0x18000
   11644:	ldr	pc, [ip, #2724]!	; 0xaa4

00011648 <strtoumax@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #24, 20	; 0x18000
   11650:	ldr	pc, [ip, #2716]!	; 0xa9c

00011654 <__fprintf_chk@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #24, 20	; 0x18000
   1165c:	ldr	pc, [ip, #2708]!	; 0xa94

00011660 <memchr@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #24, 20	; 0x18000
   11668:	ldr	pc, [ip, #2700]!	; 0xa8c

0001166c <fclose@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #24, 20	; 0x18000
   11674:	ldr	pc, [ip, #2692]!	; 0xa84

00011678 <pipe@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #24, 20	; 0x18000
   11680:	ldr	pc, [ip, #2684]!	; 0xa7c

00011684 <fseeko64@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #24, 20	; 0x18000
   1168c:	ldr	pc, [ip, #2676]!	; 0xa74

00011690 <fcntl64@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #24, 20	; 0x18000
   11698:	ldr	pc, [ip, #2668]!	; 0xa6c

0001169c <setlocale@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #24, 20	; 0x18000
   116a4:	ldr	pc, [ip, #2660]!	; 0xa64

000116a8 <sigemptyset@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #24, 20	; 0x18000
   116b0:	ldr	pc, [ip, #2652]!	; 0xa5c

000116b4 <fork@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #24, 20	; 0x18000
   116bc:	ldr	pc, [ip, #2644]!	; 0xa54

000116c0 <execl@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #24, 20	; 0x18000
   116c8:	ldr	pc, [ip, #2636]!	; 0xa4c

000116cc <strrchr@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #24, 20	; 0x18000
   116d4:	ldr	pc, [ip, #2628]!	; 0xa44

000116d8 <nl_langinfo@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #24, 20	; 0x18000
   116e0:	ldr	pc, [ip, #2620]!	; 0xa3c

000116e4 <clearerr_unlocked@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #24, 20	; 0x18000
   116ec:	ldr	pc, [ip, #2612]!	; 0xa34

000116f0 <bindtextdomain@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #24, 20	; 0x18000
   116f8:	ldr	pc, [ip, #2604]!	; 0xa2c

000116fc <aligned_alloc@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #24, 20	; 0x18000
   11704:	ldr	pc, [ip, #2596]!	; 0xa24

00011708 <__libc_current_sigrtmin@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #24, 20	; 0x18000
   11710:	ldr	pc, [ip, #2588]!	; 0xa1c

00011714 <fputs@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #24, 20	; 0x18000
   1171c:	ldr	pc, [ip, #2580]!	; 0xa14

00011720 <strncmp@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #24, 20	; 0x18000
   11728:	ldr	pc, [ip, #2572]!	; 0xa0c

0001172c <abort@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #24, 20	; 0x18000
   11734:	ldr	pc, [ip, #2564]!	; 0xa04

00011738 <close@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #24, 20	; 0x18000
   11740:	ldr	pc, [ip, #2556]!	; 0x9fc

00011744 <strspn@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #24, 20	; 0x18000
   1174c:	ldr	pc, [ip, #2548]!	; 0x9f4

00011750 <__assert_fail@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #24, 20	; 0x18000
   11758:	ldr	pc, [ip, #2540]!	; 0x9ec

Disassembly of section .text:

0001175c <.text>:
   1175c:	mov	fp, #0
   11760:	mov	lr, #0
   11764:	pop	{r1}		; (ldr r1, [sp], #4)
   11768:	mov	r2, sp
   1176c:	push	{r2}		; (str r2, [sp, #-4]!)
   11770:	push	{r0}		; (str r0, [sp, #-4]!)
   11774:	ldr	ip, [pc, #16]	; 1178c <__assert_fail@plt+0x3c>
   11778:	push	{ip}		; (str ip, [sp, #-4]!)
   1177c:	ldr	r0, [pc, #12]	; 11790 <__assert_fail@plt+0x40>
   11780:	ldr	r3, [pc, #12]	; 11794 <__assert_fail@plt+0x44>
   11784:	bl	11564 <__libc_start_main@plt>
   11788:	bl	1172c <abort@plt>
   1178c:	muleq	r1, r0, r6
   11790:	andeq	r1, r1, r8, lsr #22
   11794:	andeq	r8, r1, r0, lsr r6
   11798:	ldr	r3, [pc, #20]	; 117b4 <__assert_fail@plt+0x64>
   1179c:	ldr	r2, [pc, #20]	; 117b8 <__assert_fail@plt+0x68>
   117a0:	add	r3, pc, r3
   117a4:	ldr	r2, [r3, r2]
   117a8:	cmp	r2, #0
   117ac:	bxeq	lr
   117b0:	b	1157c <__gmon_start__@plt>
   117b4:	andeq	r8, r1, r8, asr r8
   117b8:	andeq	r0, r0, r8, asr #2
   117bc:	ldr	r0, [pc, #24]	; 117dc <__assert_fail@plt+0x8c>
   117c0:	ldr	r3, [pc, #24]	; 117e0 <__assert_fail@plt+0x90>
   117c4:	cmp	r3, r0
   117c8:	bxeq	lr
   117cc:	ldr	r3, [pc, #16]	; 117e4 <__assert_fail@plt+0x94>
   117d0:	cmp	r3, #0
   117d4:	bxeq	lr
   117d8:	bx	r3
   117dc:	andeq	sl, r2, r4, asr r3
   117e0:	andeq	sl, r2, r4, asr r3
   117e4:	andeq	r0, r0, r0
   117e8:	ldr	r0, [pc, #36]	; 11814 <__assert_fail@plt+0xc4>
   117ec:	ldr	r1, [pc, #36]	; 11818 <__assert_fail@plt+0xc8>
   117f0:	sub	r1, r1, r0
   117f4:	asr	r1, r1, #2
   117f8:	add	r1, r1, r1, lsr #31
   117fc:	asrs	r1, r1, #1
   11800:	bxeq	lr
   11804:	ldr	r3, [pc, #16]	; 1181c <__assert_fail@plt+0xcc>
   11808:	cmp	r3, #0
   1180c:	bxeq	lr
   11810:	bx	r3
   11814:	andeq	sl, r2, r4, asr r3
   11818:	andeq	sl, r2, r4, asr r3
   1181c:	andeq	r0, r0, r0
   11820:	push	{r4, lr}
   11824:	ldr	r4, [pc, #24]	; 11844 <__assert_fail@plt+0xf4>
   11828:	ldrb	r3, [r4]
   1182c:	cmp	r3, #0
   11830:	popne	{r4, pc}
   11834:	bl	117bc <__assert_fail@plt+0x6c>
   11838:	mov	r3, #1
   1183c:	strb	r3, [r4]
   11840:	pop	{r4, pc}
   11844:	andeq	sl, r2, r4, ror r3
   11848:	b	117e8 <__assert_fail@plt+0x98>
   1184c:	push	{fp, lr}
   11850:	mov	fp, sp
   11854:	sub	sp, sp, #56	; 0x38
   11858:	mov	r8, r0
   1185c:	cmp	r0, #0
   11860:	bne	11ae8 <__assert_fail@plt+0x398>
   11864:	movw	r1, #34547	; 0x86f3
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	11474 <dcgettext@plt>
   11878:	mov	r1, r0
   1187c:	movw	r0, #42300	; 0xa53c
   11880:	movt	r0, #2
   11884:	ldr	r2, [r0]
   11888:	mov	r0, #1
   1188c:	bl	11624 <__printf_chk@plt>
   11890:	movw	r1, #34586	; 0x871a
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	11474 <dcgettext@plt>
   118a4:	movw	r9, #41836	; 0xa36c
   118a8:	movt	r9, #2
   118ac:	ldr	r1, [r9]
   118b0:	bl	113c0 <fputs_unlocked@plt>
   118b4:	movw	r1, #37103	; 0x90ef
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	11474 <dcgettext@plt>
   118c8:	ldr	r1, [r9]
   118cc:	bl	113c0 <fputs_unlocked@plt>
   118d0:	movw	r1, #37159	; 0x9127
   118d4:	mov	r0, #0
   118d8:	mov	r2, #5
   118dc:	movt	r1, #1
   118e0:	bl	11474 <dcgettext@plt>
   118e4:	ldr	r1, [r9]
   118e8:	bl	113c0 <fputs_unlocked@plt>
   118ec:	ldr	r5, [r9]
   118f0:	movw	r1, #34692	; 0x8784
   118f4:	mov	r0, #0
   118f8:	mov	r2, #5
   118fc:	movt	r1, #1
   11900:	bl	11474 <dcgettext@plt>
   11904:	mov	r2, r0
   11908:	mov	r0, r5
   1190c:	mov	r1, #1
   11910:	mov	r3, #2
   11914:	bl	11654 <__fprintf_chk@plt>
   11918:	movw	r1, #35782	; 0x8bc6
   1191c:	mov	r0, #0
   11920:	mov	r2, #5
   11924:	movt	r1, #1
   11928:	bl	11474 <dcgettext@plt>
   1192c:	ldr	r1, [r9]
   11930:	bl	113c0 <fputs_unlocked@plt>
   11934:	movw	r1, #35895	; 0x8c37
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	movt	r1, #1
   11944:	bl	11474 <dcgettext@plt>
   11948:	ldr	r1, [r9]
   1194c:	bl	113c0 <fputs_unlocked@plt>
   11950:	movw	r1, #35940	; 0x8c64
   11954:	mov	r0, #0
   11958:	mov	r2, #5
   1195c:	movt	r1, #1
   11960:	bl	11474 <dcgettext@plt>
   11964:	ldr	r1, [r9]
   11968:	bl	113c0 <fputs_unlocked@plt>
   1196c:	movw	r1, #37234	; 0x9172
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	movt	r1, #1
   1197c:	bl	11474 <dcgettext@plt>
   11980:	ldr	r1, [r9]
   11984:	bl	113c0 <fputs_unlocked@plt>
   11988:	movw	r1, #35994	; 0x8c9a
   1198c:	mov	r0, #0
   11990:	mov	r2, #5
   11994:	movt	r1, #1
   11998:	bl	11474 <dcgettext@plt>
   1199c:	ldr	r1, [r9]
   119a0:	bl	113c0 <fputs_unlocked@plt>
   119a4:	movw	r0, #39064	; 0x9898
   119a8:	mov	r6, sp
   119ac:	movt	r0, #1
   119b0:	mov	r1, r6
   119b4:	ldm	r0!, {r2, r3, r4, r5}
   119b8:	stmia	r1!, {r2, r3, r4, r5}
   119bc:	ldm	r0!, {r2, r3, r4, r5, r7}
   119c0:	stmia	r1!, {r2, r3, r4, r5, r7}
   119c4:	ldm	r0, {r2, r3, r4, r5, r7}
   119c8:	stm	r1, {r2, r3, r4, r5, r7}
   119cc:	movw	r1, #37446	; 0x9246
   119d0:	movw	r5, #36334	; 0x8dee
   119d4:	movt	r1, #1
   119d8:	movt	r5, #1
   119dc:	mov	r0, r5
   119e0:	bl	113d8 <strcmp@plt>
   119e4:	cmp	r0, #0
   119e8:	ldrne	r1, [r6, #8]!
   119ec:	cmpne	r1, #0
   119f0:	bne	119dc <__assert_fail@plt+0x28c>
   119f4:	ldr	r6, [r6, #4]
   119f8:	movw	r1, #37541	; 0x92a5
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	11474 <dcgettext@plt>
   11a0c:	movw	r2, #36851	; 0x8ff3
   11a10:	movw	r3, #37564	; 0x92bc
   11a14:	mov	r1, r0
   11a18:	mov	r0, #1
   11a1c:	movt	r2, #1
   11a20:	movt	r3, #1
   11a24:	bl	11624 <__printf_chk@plt>
   11a28:	cmp	r6, #0
   11a2c:	mov	r0, #5
   11a30:	mov	r1, #0
   11a34:	moveq	r6, r5
   11a38:	bl	1169c <setlocale@plt>
   11a3c:	cmp	r0, #0
   11a40:	beq	11a78 <__assert_fail@plt+0x328>
   11a44:	movw	r1, #37604	; 0x92e4
   11a48:	mov	r2, #3
   11a4c:	movt	r1, #1
   11a50:	bl	11720 <strncmp@plt>
   11a54:	cmp	r0, #0
   11a58:	beq	11a78 <__assert_fail@plt+0x328>
   11a5c:	movw	r1, #37608	; 0x92e8
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	movt	r1, #1
   11a6c:	bl	11474 <dcgettext@plt>
   11a70:	ldr	r1, [r9]
   11a74:	bl	113c0 <fputs_unlocked@plt>
   11a78:	movw	r1, #37679	; 0x932f
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	movt	r1, #1
   11a88:	bl	11474 <dcgettext@plt>
   11a8c:	movw	r2, #37564	; 0x92bc
   11a90:	mov	r1, r0
   11a94:	mov	r0, #1
   11a98:	mov	r3, r5
   11a9c:	movt	r2, #1
   11aa0:	bl	11624 <__printf_chk@plt>
   11aa4:	movw	r1, #37706	; 0x934a
   11aa8:	mov	r0, #0
   11aac:	mov	r2, #5
   11ab0:	movt	r1, #1
   11ab4:	bl	11474 <dcgettext@plt>
   11ab8:	movw	r3, #35781	; 0x8bc5
   11abc:	mov	r1, r0
   11ac0:	movw	r0, #37474	; 0x9262
   11ac4:	cmp	r6, r5
   11ac8:	mov	r2, r6
   11acc:	movt	r0, #1
   11ad0:	movt	r3, #1
   11ad4:	moveq	r3, r0
   11ad8:	mov	r0, #1
   11adc:	bl	11624 <__printf_chk@plt>
   11ae0:	mov	r0, r8
   11ae4:	bl	115a0 <exit@plt>
   11ae8:	movw	r0, #41832	; 0xa368
   11aec:	movw	r1, #34508	; 0x86cc
   11af0:	mov	r2, #5
   11af4:	movt	r0, #2
   11af8:	movt	r1, #1
   11afc:	ldr	r5, [r0]
   11b00:	mov	r0, #0
   11b04:	bl	11474 <dcgettext@plt>
   11b08:	mov	r2, r0
   11b0c:	movw	r0, #42300	; 0xa53c
   11b10:	mov	r1, #1
   11b14:	movt	r0, #2
   11b18:	ldr	r3, [r0]
   11b1c:	mov	r0, r5
   11b20:	bl	11654 <__fprintf_chk@plt>
   11b24:	b	11ae0 <__assert_fail@plt+0x390>
   11b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b2c:	add	fp, sp, #28
   11b30:	sub	sp, sp, #252	; 0xfc
   11b34:	mov	r4, r1
   11b38:	str	r0, [sp, #92]	; 0x5c
   11b3c:	bl	115e8 <getpagesize@plt>
   11b40:	str	r0, [sp, #76]	; 0x4c
   11b44:	ldr	r0, [r4]
   11b48:	str	r4, [sp, #88]	; 0x58
   11b4c:	bl	14ffc <__assert_fail@plt+0x38ac>
   11b50:	movw	r1, #35781	; 0x8bc5
   11b54:	mov	r0, #6
   11b58:	movt	r1, #1
   11b5c:	bl	1169c <setlocale@plt>
   11b60:	movw	r4, #36855	; 0x8ff7
   11b64:	movw	r1, #36340	; 0x8df4
   11b68:	movt	r4, #1
   11b6c:	movt	r1, #1
   11b70:	mov	r0, r4
   11b74:	bl	116f0 <bindtextdomain@plt>
   11b78:	mov	r0, r4
   11b7c:	bl	11498 <textdomain@plt>
   11b80:	movw	r0, #19412	; 0x4bd4
   11b84:	movt	r0, #1
   11b88:	bl	18694 <__assert_fail@plt+0x6f44>
   11b8c:	movw	r1, #41848	; 0xa378
   11b90:	movw	r0, #39201	; 0x9921
   11b94:	mov	r9, #0
   11b98:	mov	sl, #0
   11b9c:	movt	r1, #2
   11ba0:	movt	r0, #1
   11ba4:	str	r0, [r1]
   11ba8:	movw	r1, #41852	; 0xa37c
   11bac:	movw	r0, #36780	; 0x8fac
   11bb0:	movt	r1, #2
   11bb4:	movt	r0, #1
   11bb8:	str	r0, [r1]
   11bbc:	mov	r0, #0
   11bc0:	str	r0, [sp, #64]	; 0x40
   11bc4:	mov	r0, #0
   11bc8:	str	r0, [sp, #68]	; 0x44
   11bcc:	mov	r0, #0
   11bd0:	str	r0, [sp, #100]	; 0x64
   11bd4:	mov	r0, #0
   11bd8:	str	r0, [sp, #80]	; 0x50
   11bdc:	mov	r0, #0
   11be0:	b	11cb4 <__assert_fail@plt+0x564>
   11be4:	movw	r0, #41840	; 0xa370
   11be8:	movw	r1, #36495	; 0x8e8f
   11bec:	mov	r2, #5
   11bf0:	movt	r0, #2
   11bf4:	movt	r1, #1
   11bf8:	ldr	r4, [r0]
   11bfc:	mov	r0, #0
   11c00:	bl	11474 <dcgettext@plt>
   11c04:	movw	r2, #38776	; 0x9778
   11c08:	mvn	r1, #0
   11c0c:	str	r0, [sp, #12]
   11c10:	mov	r0, r4
   11c14:	mov	r3, #0
   11c18:	movt	r2, #1
   11c1c:	str	r1, [sp]
   11c20:	mov	r1, #0
   11c24:	str	r2, [sp, #8]
   11c28:	mov	r2, #1
   11c2c:	str	r1, [sp, #4]
   11c30:	str	r1, [sp, #16]
   11c34:	bl	178f8 <__assert_fail@plt+0x61a8>
   11c38:	mov	r9, r0
   11c3c:	mov	sl, r1
   11c40:	mov	r0, #2
   11c44:	b	11cb4 <__assert_fail@plt+0x564>
   11c48:	ldr	r0, [sp, #84]	; 0x54
   11c4c:	cmp	r0, #0
   11c50:	bne	122ec <__assert_fail@plt+0xb9c>
   11c54:	movw	r0, #41840	; 0xa370
   11c58:	movw	r1, #36519	; 0x8ea7
   11c5c:	mov	r2, #5
   11c60:	movt	r0, #2
   11c64:	movt	r1, #1
   11c68:	ldr	r4, [r0]
   11c6c:	mov	r0, #0
   11c70:	bl	11474 <dcgettext@plt>
   11c74:	mvn	r1, #0
   11c78:	str	r0, [sp, #12]
   11c7c:	mov	r0, #0
   11c80:	mov	r2, #1
   11c84:	mov	r3, #0
   11c88:	str	r1, [sp]
   11c8c:	str	r1, [sp, #4]
   11c90:	movw	r1, #35781	; 0x8bc5
   11c94:	str	r0, [sp, #16]
   11c98:	mov	r0, r4
   11c9c:	movt	r1, #1
   11ca0:	str	r1, [sp, #8]
   11ca4:	bl	178f8 <__assert_fail@plt+0x61a8>
   11ca8:	mov	r9, r0
   11cac:	mov	sl, r1
   11cb0:	mov	r0, #3
   11cb4:	str	r0, [sp, #84]	; 0x54
   11cb8:	b	1223c <__assert_fail@plt+0xaec>
   11cbc:	cmp	r1, #0
   11cc0:	beq	11d8c <__assert_fail@plt+0x63c>
   11cc4:	orr	r1, r1, #4
   11cc8:	mov	r5, r9
   11ccc:	mov	r8, sl
   11cd0:	cmp	r1, #4
   11cd4:	beq	11d9c <__assert_fail@plt+0x64c>
   11cd8:	b	122ec <__assert_fail@plt+0xb9c>
   11cdc:	sub	r0, r4, #97	; 0x61
   11ce0:	cmp	r0, #13
   11ce4:	bhi	12084 <__assert_fail@plt+0x934>
   11ce8:	add	r1, pc, #0
   11cec:	ldr	pc, [r1, r0, lsl #2]
   11cf0:	andeq	r1, r1, r8, lsr #26
   11cf4:	andeq	r1, r1, r4, lsl #31
   11cf8:	andeq	r3, r1, r8, lsr #19
   11cfc:	andeq	r1, r1, ip, lsr #28
   11d00:	andeq	r1, r1, r0, ror pc
   11d04:	andeq	r3, r1, r8, lsr #19
   11d08:	andeq	r3, r1, r8, lsr #19
   11d0c:	andeq	r3, r1, r8, lsr #19
   11d10:	andeq	r3, r1, r8, lsr #19
   11d14:	andeq	r3, r1, r8, lsr #19
   11d18:	andeq	r3, r1, r8, lsr #19
   11d1c:	andeq	r1, r1, r8, asr #24
   11d20:	andeq	r3, r1, r8, lsr #19
   11d24:	andeq	r1, r1, r0, ror #31
   11d28:	movw	r0, #41840	; 0xa370
   11d2c:	movw	r1, #36391	; 0x8e27
   11d30:	mov	r2, #5
   11d34:	movt	r0, #2
   11d38:	movt	r1, #1
   11d3c:	ldr	r4, [r0]
   11d40:	mov	r0, #0
   11d44:	bl	11474 <dcgettext@plt>
   11d48:	mvn	r1, #-1073741824	; 0xc0000000
   11d4c:	mov	r2, #0
   11d50:	str	r0, [sp, #12]
   11d54:	mov	r0, r4
   11d58:	mov	r3, #0
   11d5c:	str	r1, [sp]
   11d60:	movw	r1, #35781	; 0x8bc5
   11d64:	str	r2, [sp, #4]
   11d68:	str	r2, [sp, #16]
   11d6c:	mov	r2, #0
   11d70:	movt	r1, #1
   11d74:	str	r1, [sp, #8]
   11d78:	bl	178f8 <__assert_fail@plt+0x61a8>
   11d7c:	movw	r1, #41856	; 0xa380
   11d80:	movt	r1, #2
   11d84:	str	r0, [r1]
   11d88:	b	1223c <__assert_fail@plt+0xaec>
   11d8c:	mov	r1, #4
   11d90:	mov	r5, #0
   11d94:	mov	r8, #0
   11d98:	str	r1, [sp, #84]	; 0x54
   11d9c:	ldr	r1, [sp, #100]	; 0x64
   11da0:	cmp	r1, #0
   11da4:	cmpne	r1, r6
   11da8:	bne	11e00 <__assert_fail@plt+0x6b0>
   11dac:	movw	r0, #39321	; 0x9999
   11db0:	movt	r0, #39321	; 0x9999
   11db4:	subs	r0, r0, r5
   11db8:	movw	r0, #39321	; 0x9999
   11dbc:	movt	r0, #6553	; 0x1999
   11dc0:	sbcs	r0, r0, r8
   11dc4:	bcc	138a8 <__assert_fail@plt+0x2158>
   11dc8:	mov	r0, #10
   11dcc:	add	r2, r8, r8, lsl #2
   11dd0:	str	r6, [sp, #100]	; 0x64
   11dd4:	umull	r0, r1, r5, r0
   11dd8:	add	r1, r1, r2, lsl #1
   11ddc:	sub	r2, r4, #48	; 0x30
   11de0:	adds	r0, r0, r2
   11de4:	adc	r1, r1, r2, asr #31
   11de8:	mov	r9, r0
   11dec:	subs	r0, r0, r5
   11df0:	mov	sl, r1
   11df4:	sbcs	r0, r1, r8
   11df8:	bcs	1223c <__assert_fail@plt+0xaec>
   11dfc:	b	138a8 <__assert_fail@plt+0x2158>
   11e00:	asr	sl, r0, #31
   11e04:	mov	r9, r0
   11e08:	str	r6, [sp, #100]	; 0x64
   11e0c:	b	1223c <__assert_fail@plt+0xaec>
   11e10:	cmp	r4, #117	; 0x75
   11e14:	bne	11e24 <__assert_fail@plt+0x6d4>
   11e18:	movw	r0, #41864	; 0xa388
   11e1c:	movt	r0, #2
   11e20:	b	11f78 <__assert_fail@plt+0x828>
   11e24:	cmp	r4, #120	; 0x78
   11e28:	bne	139a8 <__assert_fail@plt+0x2258>
   11e2c:	movw	r7, #36720	; 0x8f70
   11e30:	movw	r0, #36709	; 0x8f65
   11e34:	cmp	r4, #100	; 0x64
   11e38:	movt	r7, #1
   11e3c:	movt	r0, #1
   11e40:	moveq	r7, r0
   11e44:	movw	r0, #41308	; 0xa15c
   11e48:	movt	r0, #2
   11e4c:	str	r7, [r0]
   11e50:	movw	r0, #41840	; 0xa370
   11e54:	movt	r0, #2
   11e58:	ldr	r5, [r0]
   11e5c:	cmp	r5, #0
   11e60:	beq	1223c <__assert_fail@plt+0xaec>
   11e64:	mov	r0, r5
   11e68:	bl	115ac <strlen@plt>
   11e6c:	mov	r6, r0
   11e70:	mov	r0, r5
   11e74:	mov	r1, r7
   11e78:	bl	11744 <strspn@plt>
   11e7c:	cmp	r6, r0
   11e80:	bne	138e8 <__assert_fail@plt+0x2198>
   11e84:	ldrb	r0, [r5]
   11e88:	cmp	r0, #48	; 0x30
   11e8c:	bne	11ebc <__assert_fail@plt+0x76c>
   11e90:	movw	r2, #41840	; 0xa370
   11e94:	add	r0, r5, #1
   11e98:	movt	r2, #2
   11e9c:	ldrb	r1, [r0]
   11ea0:	cmp	r1, #0
   11ea4:	beq	11eb8 <__assert_fail@plt+0x768>
   11ea8:	str	r0, [r2]
   11eac:	ldrb	r1, [r0], #1
   11eb0:	cmp	r1, #48	; 0x30
   11eb4:	beq	11e9c <__assert_fail@plt+0x74c>
   11eb8:	sub	r5, r0, #1
   11ebc:	movw	r0, #41868	; 0xa38c
   11ec0:	movt	r0, #2
   11ec4:	str	r5, [r0]
   11ec8:	b	1223c <__assert_fail@plt+0xaec>
   11ecc:	movw	r0, #41840	; 0xa370
   11ed0:	movw	r1, #36829	; 0x8fdd
   11ed4:	mov	r2, #5
   11ed8:	movt	r0, #2
   11edc:	movt	r1, #1
   11ee0:	ldr	r4, [r0]
   11ee4:	mov	r0, #0
   11ee8:	bl	11474 <dcgettext@plt>
   11eec:	movw	r2, #38776	; 0x9778
   11ef0:	mvn	r1, #-2147483647	; 0x80000001
   11ef4:	str	r0, [sp, #12]
   11ef8:	mov	r0, r4
   11efc:	mov	r3, #0
   11f00:	movt	r2, #1
   11f04:	str	r1, [sp]
   11f08:	mov	r1, #0
   11f0c:	str	r2, [sp, #8]
   11f10:	mov	r2, #1
   11f14:	str	r1, [sp, #4]
   11f18:	str	r1, [sp, #16]
   11f1c:	bl	178f8 <__assert_fail@plt+0x61a8>
   11f20:	str	r0, [sp, #80]	; 0x50
   11f24:	b	1223c <__assert_fail@plt+0xaec>
   11f28:	movw	r0, #41840	; 0xa370
   11f2c:	movt	r0, #2
   11f30:	ldr	r4, [r0]
   11f34:	mov	r0, r4
   11f38:	bl	14b34 <__assert_fail@plt+0x33e4>
   11f3c:	cmp	r0, r4
   11f40:	bne	1396c <__assert_fail@plt+0x221c>
   11f44:	movw	r0, #41860	; 0xa384
   11f48:	movt	r0, #2
   11f4c:	str	r4, [r0]
   11f50:	b	1223c <__assert_fail@plt+0xaec>
   11f54:	movw	r0, #41840	; 0xa370
   11f58:	movw	r1, #41876	; 0xa394
   11f5c:	movt	r0, #2
   11f60:	movt	r1, #2
   11f64:	ldr	r0, [r0]
   11f68:	str	r0, [r1]
   11f6c:	b	1223c <__assert_fail@plt+0xaec>
   11f70:	movw	r0, #41872	; 0xa390
   11f74:	movt	r0, #2
   11f78:	mov	r1, #1
   11f7c:	strb	r1, [r0]
   11f80:	b	1223c <__assert_fail@plt+0xaec>
   11f84:	ldr	r0, [sp, #84]	; 0x54
   11f88:	cmp	r0, #0
   11f8c:	bne	122ec <__assert_fail@plt+0xb9c>
   11f90:	movw	r0, #41840	; 0xa370
   11f94:	movw	r1, #36495	; 0x8e8f
   11f98:	mov	r2, #5
   11f9c:	movt	r0, #2
   11fa0:	movt	r1, #1
   11fa4:	ldr	r4, [r0]
   11fa8:	mov	r0, #0
   11fac:	bl	11474 <dcgettext@plt>
   11fb0:	mvn	r1, #0
   11fb4:	str	r0, [sp, #12]
   11fb8:	mov	r0, #0
   11fbc:	str	r1, [sp]
   11fc0:	mvn	r1, #-2147483648	; 0x80000000
   11fc4:	str	r0, [sp, #16]
   11fc8:	mov	r0, #1
   11fcc:	str	r1, [sp, #4]
   11fd0:	movw	r1, #38776	; 0x9778
   11fd4:	str	r0, [sp, #84]	; 0x54
   11fd8:	movt	r1, #1
   11fdc:	b	12220 <__assert_fail@plt+0xad0>
   11fe0:	ldr	r0, [sp, #84]	; 0x54
   11fe4:	cmp	r0, #0
   11fe8:	bne	122ec <__assert_fail@plt+0xb9c>
   11fec:	bl	11594 <__ctype_b_loc@plt>
   11ff0:	movw	r2, #41840	; 0xa370
   11ff4:	ldr	r1, [r0]
   11ff8:	movt	r2, #2
   11ffc:	ldr	r4, [r2]
   12000:	ldrb	r2, [r4]
   12004:	add	r1, r1, r2, lsl #1
   12008:	ldrb	r1, [r1, #1]
   1200c:	tst	r1, #32
   12010:	beq	12040 <__assert_fail@plt+0x8f0>
   12014:	movw	r7, #41840	; 0xa370
   12018:	add	r1, r4, #1
   1201c:	movt	r7, #2
   12020:	str	r1, [r7]
   12024:	ldrb	r2, [r1], #1
   12028:	ldr	r3, [r0]
   1202c:	add	r2, r3, r2, lsl #1
   12030:	ldrb	r2, [r2, #1]
   12034:	tst	r2, #32
   12038:	bne	12020 <__assert_fail@plt+0x8d0>
   1203c:	sub	r4, r1, #1
   12040:	movw	r1, #36543	; 0x8ebf
   12044:	mov	r0, r4
   12048:	mov	r2, #2
   1204c:	movt	r1, #1
   12050:	bl	11720 <strncmp@plt>
   12054:	cmp	r0, #0
   12058:	beq	120f4 <__assert_fail@plt+0x9a4>
   1205c:	movw	r1, #36546	; 0x8ec2
   12060:	mov	r0, r4
   12064:	mov	r2, #2
   12068:	movt	r1, #1
   1206c:	bl	11720 <strncmp@plt>
   12070:	cmp	r0, #0
   12074:	beq	120fc <__assert_fail@plt+0x9ac>
   12078:	mov	r0, #5
   1207c:	str	r0, [sp, #84]	; 0x54
   12080:	b	12114 <__assert_fail@plt+0x9c4>
   12084:	cmp	r4, #116	; 0x74
   12088:	bne	139a8 <__assert_fail@plt+0x2258>
   1208c:	movw	r4, #41840	; 0xa370
   12090:	movt	r4, #2
   12094:	ldr	r0, [r4]
   12098:	ldrb	r1, [r0]
   1209c:	cmp	r1, #0
   120a0:	beq	13904 <__assert_fail@plt+0x21b4>
   120a4:	ldrb	r2, [r0, #1]
   120a8:	cmp	r2, #0
   120ac:	beq	120c8 <__assert_fail@plt+0x978>
   120b0:	movw	r1, #36597	; 0x8ef5
   120b4:	movt	r1, #1
   120b8:	bl	113d8 <strcmp@plt>
   120bc:	mov	r1, #0
   120c0:	cmp	r0, #0
   120c4:	bne	13910 <__assert_fail@plt+0x21c0>
   120c8:	movw	r0, #41304	; 0xa158
   120cc:	movt	r0, #2
   120d0:	ldr	r0, [r0]
   120d4:	cmp	r0, #0
   120d8:	blt	120e4 <__assert_fail@plt+0x994>
   120dc:	cmp	r0, r1
   120e0:	bne	13948 <__assert_fail@plt+0x21f8>
   120e4:	movw	r0, #41304	; 0xa158
   120e8:	movt	r0, #2
   120ec:	str	r1, [r0]
   120f0:	b	1223c <__assert_fail@plt+0xaec>
   120f4:	mov	r0, #7
   120f8:	b	12100 <__assert_fail@plt+0x9b0>
   120fc:	mov	r0, #6
   12100:	str	r0, [sp, #84]	; 0x54
   12104:	movw	r0, #41840	; 0xa370
   12108:	add	r4, r4, #2
   1210c:	movt	r0, #2
   12110:	str	r4, [r0]
   12114:	mov	r0, r4
   12118:	mov	r1, #47	; 0x2f
   1211c:	bl	115c4 <strchr@plt>
   12120:	cmp	r0, #0
   12124:	beq	121ec <__assert_fail@plt+0xa9c>
   12128:	movw	r1, #36549	; 0x8ec5
   1212c:	mov	r5, r0
   12130:	mov	r0, #0
   12134:	mov	r2, #5
   12138:	movt	r1, #1
   1213c:	bl	11474 <dcgettext@plt>
   12140:	mvn	r1, #0
   12144:	str	r0, [sp, #12]
   12148:	mov	r0, #0
   1214c:	mov	r2, #1
   12150:	mov	r3, #0
   12154:	str	r1, [sp]
   12158:	str	r1, [sp, #4]
   1215c:	movw	r1, #35781	; 0x8bc5
   12160:	str	r0, [sp, #16]
   12164:	add	r0, r5, #1
   12168:	movt	r1, #1
   1216c:	str	r1, [sp, #8]
   12170:	bl	178f8 <__assert_fail@plt+0x61a8>
   12174:	mov	r9, r0
   12178:	movw	r0, #41840	; 0xa370
   1217c:	mov	sl, r1
   12180:	movt	r0, #2
   12184:	ldr	r0, [r0]
   12188:	cmp	r0, r5
   1218c:	beq	1223c <__assert_fail@plt+0xaec>
   12190:	movw	r0, #41840	; 0xa370
   12194:	mov	r6, #0
   12198:	movw	r1, #37899	; 0x940b
   1219c:	mov	r2, #5
   121a0:	strb	r6, [r5]
   121a4:	movt	r0, #2
   121a8:	movt	r1, #1
   121ac:	ldr	r4, [r0]
   121b0:	mov	r0, #0
   121b4:	bl	11474 <dcgettext@plt>
   121b8:	movw	r1, #35781	; 0x8bc5
   121bc:	stm	sp, {r9, sl}
   121c0:	str	r0, [sp, #12]
   121c4:	mov	r0, r4
   121c8:	mov	r2, #1
   121cc:	mov	r3, #0
   121d0:	str	r6, [sp, #16]
   121d4:	movt	r1, #1
   121d8:	str	r1, [sp, #8]
   121dc:	bl	178f8 <__assert_fail@plt+0x61a8>
   121e0:	str	r0, [sp, #64]	; 0x40
   121e4:	str	r1, [sp, #68]	; 0x44
   121e8:	b	1223c <__assert_fail@plt+0xaec>
   121ec:	movw	r1, #36549	; 0x8ec5
   121f0:	mov	r0, #0
   121f4:	mov	r2, #5
   121f8:	movt	r1, #1
   121fc:	bl	11474 <dcgettext@plt>
   12200:	mvn	r1, #0
   12204:	str	r0, [sp, #12]
   12208:	mov	r0, #0
   1220c:	str	r1, [sp]
   12210:	str	r1, [sp, #4]
   12214:	movw	r1, #35781	; 0x8bc5
   12218:	str	r0, [sp, #16]
   1221c:	movt	r1, #1
   12220:	str	r1, [sp, #8]
   12224:	mov	r0, r4
   12228:	mov	r2, #1
   1222c:	mov	r3, #0
   12230:	bl	178f8 <__assert_fail@plt+0x61a8>
   12234:	mov	r9, r0
   12238:	mov	sl, r1
   1223c:	movw	r0, #41824	; 0xa360
   12240:	ldr	r1, [sp, #88]	; 0x58
   12244:	movw	r2, #36364	; 0x8e0c
   12248:	movw	r3, #38792	; 0x9788
   1224c:	movt	r0, #2
   12250:	movt	r2, #1
   12254:	movt	r3, #1
   12258:	ldr	r6, [r0]
   1225c:	mov	r0, #0
   12260:	str	r0, [sp]
   12264:	ldr	r0, [sp, #92]	; 0x5c
   12268:	bl	11588 <getopt_long@plt>
   1226c:	cmp	r6, #0
   12270:	mov	r4, r0
   12274:	movweq	r6, #1
   12278:	cmp	r0, #96	; 0x60
   1227c:	ble	122c0 <__assert_fail@plt+0xb70>
   12280:	cmp	r4, #116	; 0x74
   12284:	ble	11cdc <__assert_fail@plt+0x58c>
   12288:	sub	r0, r4, #256	; 0x100
   1228c:	cmp	r0, #3
   12290:	bhi	11e10 <__assert_fail@plt+0x6c0>
   12294:	add	r1, pc, #0
   12298:	ldr	pc, [r1, r0, lsl #2]
   1229c:	andeq	r2, r1, ip, lsr #5
   122a0:	andeq	r1, r1, r4, asr pc
   122a4:	andeq	r1, r1, ip, asr #29
   122a8:	andeq	r1, r1, r8, lsr #30
   122ac:	movw	r1, #41880	; 0xa398
   122b0:	mov	r0, #1
   122b4:	movt	r1, #2
   122b8:	strb	r0, [r1]
   122bc:	b	1223c <__assert_fail@plt+0xaec>
   122c0:	cmp	r4, #47	; 0x2f
   122c4:	ble	12314 <__assert_fail@plt+0xbc4>
   122c8:	ldr	r1, [sp, #84]	; 0x54
   122cc:	sub	r0, r4, #48	; 0x30
   122d0:	cmp	r0, #10
   122d4:	bcc	11cbc <__assert_fail@plt+0x56c>
   122d8:	cmp	r4, #67	; 0x43
   122dc:	bne	139a8 <__assert_fail@plt+0x2258>
   122e0:	ldr	r0, [sp, #84]	; 0x54
   122e4:	cmp	r0, #0
   122e8:	beq	11be4 <__assert_fail@plt+0x494>
   122ec:	movw	r1, #36461	; 0x8e6d
   122f0:	movt	r1, #1
   122f4:	mov	r0, #0
   122f8:	mov	r2, #5
   122fc:	bl	11474 <dcgettext@plt>
   12300:	mov	r2, r0
   12304:	mov	r0, #0
   12308:	mov	r1, #0
   1230c:	bl	11528 <error@plt>
   12310:	b	139a8 <__assert_fail@plt+0x2258>
   12314:	ldr	r5, [sp, #68]	; 0x44
   12318:	ldr	r1, [sp, #84]	; 0x54
   1231c:	cmn	r4, #1
   12320:	bne	13804 <__assert_fail@plt+0x20b4>
   12324:	ldr	r0, [sp, #64]	; 0x40
   12328:	orrs	r0, r0, r5
   1232c:	str	r0, [sp, #72]	; 0x48
   12330:	beq	12348 <__assert_fail@plt+0xbf8>
   12334:	movw	r0, #41876	; 0xa394
   12338:	movt	r0, #2
   1233c:	ldr	r0, [r0]
   12340:	cmp	r0, #0
   12344:	bne	139c0 <__assert_fail@plt+0x2270>
   12348:	cmp	r1, #0
   1234c:	beq	12398 <__assert_fail@plt+0xc48>
   12350:	orrs	r0, r9, sl
   12354:	bne	123a4 <__assert_fail@plt+0xc54>
   12358:	movw	r1, #36519	; 0x8ea7
   1235c:	mov	r0, #0
   12360:	mov	r2, #5
   12364:	movt	r1, #1
   12368:	bl	11474 <dcgettext@plt>
   1236c:	mov	r4, r0
   12370:	movw	r0, #36598	; 0x8ef6
   12374:	movt	r0, #1
   12378:	bl	16a00 <__assert_fail@plt+0x52b0>
   1237c:	movw	r2, #36957	; 0x905d
   12380:	str	r0, [sp]
   12384:	mov	r0, #0
   12388:	mov	r1, #0
   1238c:	mov	r3, r4
   12390:	movt	r2, #1
   12394:	b	139a4 <__assert_fail@plt+0x2254>
   12398:	mov	sl, #0
   1239c:	mov	r9, #1000	; 0x3e8
   123a0:	mov	r1, #3
   123a4:	movw	r0, #41304	; 0xa158
   123a8:	str	r1, [sp, #84]	; 0x54
   123ac:	movt	r0, #2
   123b0:	ldr	r0, [r0]
   123b4:	cmn	r0, #1
   123b8:	bgt	123d0 <__assert_fail@plt+0xc80>
   123bc:	movw	r1, #41304	; 0xa158
   123c0:	mov	r0, #10
   123c4:	movt	r1, #2
   123c8:	str	r0, [r1]
   123cc:	ldr	r1, [sp, #84]	; 0x54
   123d0:	movw	r0, #41868	; 0xa38c
   123d4:	mov	r6, #0
   123d8:	mov	r7, #0
   123dc:	str	sl, [sp, #96]	; 0x60
   123e0:	movt	r0, #2
   123e4:	ldr	r0, [r0]
   123e8:	cmp	r0, #0
   123ec:	movwne	r1, #42256	; 0xa510
   123f0:	movne	r2, #1
   123f4:	movtne	r1, #2
   123f8:	strbne	r2, [r1]
   123fc:	ldrne	r1, [sp, #84]	; 0x54
   12400:	sub	r8, r1, #5
   12404:	cmp	r8, #2
   12408:	bhi	12514 <__assert_fail@plt+0xdc4>
   1240c:	ldr	r1, [sp, #96]	; 0x60
   12410:	subs	r6, r9, #1
   12414:	sbc	r7, r1, #0
   12418:	cmp	r0, #0
   1241c:	beq	12454 <__assert_fail@plt+0xd04>
   12420:	movw	r1, #35781	; 0x8bc5
   12424:	add	r3, sp, #104	; 0x68
   12428:	mov	r2, #10
   1242c:	mov	r4, #0
   12430:	movt	r1, #1
   12434:	str	r1, [sp]
   12438:	mov	r1, #0
   1243c:	bl	17900 <__assert_fail@plt+0x61b0>
   12440:	cmp	r0, #0
   12444:	beq	12464 <__assert_fail@plt+0xd14>
   12448:	mov	r4, r6
   1244c:	mov	r5, r7
   12450:	b	124ac <__assert_fail@plt+0xd5c>
   12454:	mov	sl, r9
   12458:	mov	r4, r6
   1245c:	mov	r5, r7
   12460:	b	124b0 <__assert_fail@plt+0xd60>
   12464:	ldr	r0, [sp, #104]	; 0x68
   12468:	ldr	r1, [sp, #108]	; 0x6c
   1246c:	ldr	r3, [sp, #96]	; 0x60
   12470:	mvn	r5, r9
   12474:	subs	r2, r0, r9
   12478:	sbcs	r2, r1, r3
   1247c:	mvn	r3, r3
   12480:	mov	r2, #0
   12484:	movwcc	r2, #1
   12488:	subs	r5, r5, r0
   1248c:	sbcs	r3, r3, r1
   12490:	movwcs	r4, #1
   12494:	and	r2, r4, r2
   12498:	adds	r4, r6, r0
   1249c:	adc	r5, r7, r1
   124a0:	cmp	r2, #0
   124a4:	moveq	r5, r7
   124a8:	moveq	r4, r6
   124ac:	mov	sl, r9
   124b0:	movw	r0, #41308	; 0xa15c
   124b4:	movt	r0, #2
   124b8:	ldr	r0, [r0]
   124bc:	bl	115ac <strlen@plt>
   124c0:	mov	r9, r0
   124c4:	mov	r6, #0
   124c8:	mov	r7, #0
   124cc:	mov	r0, r4
   124d0:	mov	r1, r5
   124d4:	mov	r2, r9
   124d8:	mov	r3, #0
   124dc:	bl	184bc <__assert_fail@plt+0x6d6c>
   124e0:	adds	r6, r6, #1
   124e4:	adc	r7, r7, #0
   124e8:	subs	r2, r4, r9
   124ec:	mov	r4, r0
   124f0:	sbcs	r2, r5, #0
   124f4:	mov	r5, r1
   124f8:	bcs	124cc <__assert_fail@plt+0xd7c>
   124fc:	ldr	r5, [sp, #68]	; 0x44
   12500:	movw	r0, #42256	; 0xa510
   12504:	mov	r9, sl
   12508:	mov	r1, #1
   1250c:	movt	r0, #2
   12510:	strb	r1, [r0]
   12514:	movw	r1, #41856	; 0xa380
   12518:	movt	r1, #2
   1251c:	ldr	r4, [r1]
   12520:	cmp	r4, #0
   12524:	beq	12548 <__assert_fail@plt+0xdf8>
   12528:	subs	r0, r4, r6
   1252c:	rscs	r0, r7, #0
   12530:	bcc	13a58 <__assert_fail@plt+0x2308>
   12534:	movw	r0, #42256	; 0xa510
   12538:	mov	r1, #1
   1253c:	movt	r0, #2
   12540:	strb	r1, [r0]
   12544:	b	1255c <__assert_fail@plt+0xe0c>
   12548:	rsbs	r0, r6, #2
   1254c:	rscs	r0, r7, #0
   12550:	movcs	r6, #2
   12554:	mov	r4, r6
   12558:	str	r6, [r1]
   1255c:	movw	r7, #41824	; 0xa360
   12560:	ldr	r0, [sp, #92]	; 0x5c
   12564:	movw	r6, #41848	; 0xa378
   12568:	movt	r7, #2
   1256c:	movt	r6, #2
   12570:	ldr	r1, [r7]
   12574:	cmp	r1, r0
   12578:	bge	12594 <__assert_fail@plt+0xe44>
   1257c:	ldr	r2, [sp, #88]	; 0x58
   12580:	add	r0, r1, #1
   12584:	str	r0, [r7]
   12588:	ldr	r1, [r2, r1, lsl #2]
   1258c:	str	r1, [r6]
   12590:	b	12598 <__assert_fail@plt+0xe48>
   12594:	mov	r0, r1
   12598:	ldr	r1, [sp, #92]	; 0x5c
   1259c:	cmp	r0, r1
   125a0:	bge	125c4 <__assert_fail@plt+0xe74>
   125a4:	ldr	r2, [sp, #88]	; 0x58
   125a8:	add	r1, r0, #1
   125ac:	str	r1, [r7]
   125b0:	ldr	r0, [r2, r0, lsl #2]
   125b4:	movw	r2, #41852	; 0xa37c
   125b8:	movt	r2, #2
   125bc:	str	r0, [r2]
   125c0:	b	125c8 <__assert_fail@plt+0xe78>
   125c4:	mov	r1, r0
   125c8:	ldr	r0, [sp, #92]	; 0x5c
   125cc:	cmp	r1, r0
   125d0:	blt	139cc <__assert_fail@plt+0x227c>
   125d4:	movw	r0, #41868	; 0xa38c
   125d8:	movt	r0, #2
   125dc:	ldr	r0, [r0]
   125e0:	cmp	r0, #0
   125e4:	beq	125f4 <__assert_fail@plt+0xea4>
   125e8:	bl	115ac <strlen@plt>
   125ec:	cmp	r0, r4
   125f0:	bhi	13a78 <__assert_fail@plt+0x2328>
   125f4:	ldr	r4, [r6]
   125f8:	movw	r1, #39201	; 0x9921
   125fc:	movt	r1, #1
   12600:	mov	r0, r4
   12604:	bl	113d8 <strcmp@plt>
   12608:	cmp	r0, #0
   1260c:	beq	1262c <__assert_fail@plt+0xedc>
   12610:	mov	r0, #0
   12614:	mov	r1, r4
   12618:	mov	r2, #0
   1261c:	mov	r3, #0
   12620:	bl	14da0 <__assert_fail@plt+0x3650>
   12624:	cmn	r0, #1
   12628:	ble	13a84 <__assert_fail@plt+0x2334>
   1262c:	movw	r4, #41888	; 0xa3a0
   12630:	mov	r0, #0
   12634:	movt	r4, #2
   12638:	mov	r1, r4
   1263c:	bl	186ac <__assert_fail@plt+0x6f5c>
   12640:	cmp	r0, #0
   12644:	bne	139f4 <__assert_fail@plt+0x22a4>
   12648:	ldr	sl, [sp, #80]	; 0x50
   1264c:	cmp	sl, #0
   12650:	bne	12688 <__assert_fail@plt+0xf38>
   12654:	ldr	r0, [r4, #56]	; 0x38
   12658:	mov	r2, #0
   1265c:	mov	r1, #0
   12660:	cmp	r0, #536870913	; 0x20000001
   12664:	mov	sl, r0
   12668:	movwcc	r2, #1
   1266c:	cmp	r0, #0
   12670:	movwgt	r1, #1
   12674:	ands	r1, r1, r2
   12678:	moveq	sl, #512	; 0x200
   1267c:	moveq	sl, #131072	; 0x20000
   12680:	cmp	r0, #131072	; 0x20000
   12684:	movlt	sl, #131072	; 0x20000
   12688:	ldr	r0, [sp, #76]	; 0x4c
   1268c:	add	r1, sl, #1
   12690:	str	sl, [sp, #80]	; 0x50
   12694:	bl	17314 <__assert_fail@plt+0x5bc4>
   12698:	cmp	r8, #1
   1269c:	str	r0, [sp, #76]	; 0x4c
   126a0:	bhi	1285c <__assert_fail@plt+0x110c>
   126a4:	mov	r0, #1
   126a8:	mov	r2, #0
   126ac:	mov	r3, #0
   126b0:	mov	sl, r4
   126b4:	mov	r7, #0
   126b8:	str	r0, [sp]
   126bc:	mov	r0, #0
   126c0:	bl	114d4 <lseek64@plt>
   126c4:	cmp	r1, #0
   126c8:	blt	13ab4 <__assert_fail@plt+0x2364>
   126cc:	ldr	r2, [sp, #80]	; 0x50
   126d0:	mov	r8, r0
   126d4:	mov	r6, r1
   126d8:	mov	r4, #0
   126dc:	ldr	r0, [sp, #76]	; 0x4c
   126e0:	sub	r2, r2, r7
   126e4:	mov	r5, r7
   126e8:	add	r1, r0, r7
   126ec:	mov	r0, #0
   126f0:	bl	16b38 <__assert_fail@plt+0x53e8>
   126f4:	cmp	r0, #0
   126f8:	beq	12818 <__assert_fail@plt+0x10c8>
   126fc:	cmn	r0, #1
   12700:	beq	13ac8 <__assert_fail@plt+0x2378>
   12704:	ldr	r2, [sp, #80]	; 0x50
   12708:	mov	r7, r5
   1270c:	adds	r7, r5, r0
   12710:	adc	r4, r4, #0
   12714:	subs	r0, r7, r2
   12718:	sbcs	r0, r4, #0
   1271c:	bcc	126dc <__assert_fail@plt+0xf8c>
   12720:	ldrd	r0, [sl, #48]	; 0x30
   12724:	orrs	r2, r0, r1
   12728:	beq	13b9c <__assert_fail@plt+0x244c>
   1272c:	mov	r3, sl
   12730:	adds	r2, r7, r8
   12734:	str	r7, [sp, #32]
   12738:	ldr	r3, [sl, #16]
   1273c:	adc	r5, r4, r6
   12740:	and	r3, r3, #53248	; 0xd000
   12744:	orr	r3, r3, #8192	; 0x2000
   12748:	cmp	r3, #40960	; 0xa000
   1274c:	bne	1275c <__assert_fail@plt+0x100c>
   12750:	subs	r3, r0, r2
   12754:	sbcs	r3, r1, r5
   12758:	bge	127e4 <__assert_fail@plt+0x1094>
   1275c:	mov	r0, #2
   12760:	mov	sl, r2
   12764:	mov	r2, #0
   12768:	mov	r3, #0
   1276c:	str	r0, [sp]
   12770:	mov	r0, #0
   12774:	bl	114d4 <lseek64@plt>
   12778:	cmp	r1, #0
   1277c:	blt	13ac8 <__assert_fail@plt+0x2378>
   12780:	mov	r6, r0
   12784:	mov	r7, r1
   12788:	eor	r0, r0, sl
   1278c:	eor	r1, r1, r5
   12790:	mov	r2, sl
   12794:	orrs	r0, r0, r1
   12798:	mov	r1, r5
   1279c:	mov	r0, sl
   127a0:	beq	127e4 <__assert_fail@plt+0x1094>
   127a4:	mov	r8, #0
   127a8:	mov	r0, #0
   127ac:	mov	r3, r5
   127b0:	str	r8, [sp]
   127b4:	bl	114d4 <lseek64@plt>
   127b8:	cmp	r1, #0
   127bc:	blt	13ac8 <__assert_fail@plt+0x2378>
   127c0:	subs	r0, r6, sl
   127c4:	mov	r2, sl
   127c8:	sbcs	r0, r7, r5
   127cc:	movwlt	r8, #1
   127d0:	cmp	r8, #0
   127d4:	movne	r7, r5
   127d8:	movne	r6, sl
   127dc:	mov	r0, r6
   127e0:	mov	r1, r7
   127e4:	ldr	sl, [sp, #32]
   127e8:	subs	r0, r0, r2
   127ec:	sbc	r1, r1, r5
   127f0:	adds	sl, r0, sl
   127f4:	mvn	r0, #-2147483648	; 0x80000000
   127f8:	adc	r4, r1, r4
   127fc:	mvn	r1, sl
   12800:	eor	r0, r4, r0
   12804:	orrs	r0, r1, r0
   12808:	beq	13b9c <__assert_fail@plt+0x244c>
   1280c:	mov	r5, sl
   12810:	cmn	r4, #1
   12814:	ble	13ac8 <__assert_fail@plt+0x2378>
   12818:	ldr	r6, [sp, #96]	; 0x60
   1281c:	ldr	sl, [sp, #80]	; 0x50
   12820:	cmn	r6, #1
   12824:	ble	13b14 <__assert_fail@plt+0x23c4>
   12828:	subs	r0, r5, sl
   1282c:	mov	r7, r5
   12830:	sbcs	r0, r4, sl, asr #31
   12834:	movlt	sl, r5
   12838:	subs	r1, r9, r5
   1283c:	mov	r0, #0
   12840:	ldr	r5, [sp, #68]	; 0x44
   12844:	sbcs	r1, r6, r4
   12848:	movwcc	r0, #1
   1284c:	cmp	r0, #0
   12850:	moveq	r4, r6
   12854:	moveq	r7, r9
   12858:	b	1286c <__assert_fail@plt+0x111c>
   1285c:	ldr	r6, [sp, #96]	; 0x60
   12860:	mvn	r4, #-2147483648	; 0x80000000
   12864:	mvn	r7, #0
   12868:	mvn	sl, #0
   1286c:	movw	r0, #41876	; 0xa394
   12870:	movt	r0, #2
   12874:	ldr	r0, [r0]
   12878:	cmp	r0, #0
   1287c:	beq	128d0 <__assert_fail@plt+0x1180>
   12880:	movw	r0, #41992	; 0xa408
   12884:	movt	r0, #2
   12888:	bl	116a8 <sigemptyset@plt>
   1288c:	add	r2, sp, #104	; 0x68
   12890:	mov	r0, #13
   12894:	mov	r1, #0
   12898:	bl	114c8 <sigaction@plt>
   1289c:	ldr	r0, [sp, #104]	; 0x68
   128a0:	cmp	r0, #1
   128a4:	beq	128b8 <__assert_fail@plt+0x1168>
   128a8:	movw	r0, #41992	; 0xa408
   128ac:	mov	r1, #13
   128b0:	movt	r0, #2
   128b4:	bl	11558 <sigaddset@plt>
   128b8:	movw	r1, #41992	; 0xa408
   128bc:	movw	r2, #42120	; 0xa488
   128c0:	mov	r0, #0
   128c4:	movt	r1, #2
   128c8:	movt	r2, #2
   128cc:	bl	11408 <sigprocmask@plt>
   128d0:	ldr	r0, [sp, #84]	; 0x54
   128d4:	sub	r0, r0, #1
   128d8:	cmp	r0, #6
   128dc:	bhi	13a04 <__assert_fail@plt+0x22b4>
   128e0:	add	r1, pc, #0
   128e4:	ldr	pc, [r1, r0, lsl #2]
   128e8:	andeq	r2, r1, r0, ror #19
   128ec:	andeq	r2, r1, r0, lsl #20
   128f0:	andeq	r2, r1, r4, lsl #18
   128f4:	andeq	r2, r1, r4, lsl #18
   128f8:	andeq	r2, r1, r0, ror #28
   128fc:	andeq	r2, r1, r4, lsl #27
   12900:	andeq	r2, r1, ip, asr #28
   12904:	str	r9, [sp, #100]	; 0x64
   12908:	mov	r4, #0
   1290c:	mov	r9, #1
   12910:	mov	r7, #0
   12914:	ldr	sl, [sp, #76]	; 0x4c
   12918:	ldr	r2, [sp, #80]	; 0x50
   1291c:	mov	r0, #0
   12920:	mov	r1, sl
   12924:	bl	16b38 <__assert_fail@plt+0x53e8>
   12928:	cmn	r0, #1
   1292c:	beq	13870 <__assert_fail@plt+0x2120>
   12930:	mov	r1, r0
   12934:	movw	r0, #41304	; 0xa158
   12938:	mov	r8, sl
   1293c:	movt	r0, #2
   12940:	str	r1, [sp, #92]	; 0x5c
   12944:	ldr	r6, [r0]
   12948:	mov	r0, sl
   1294c:	strb	r6, [r8, r1]!
   12950:	b	129a4 <__assert_fail@plt+0x1254>
   12954:	add	r5, r0, #1
   12958:	ldr	r0, [sp, #100]	; 0x64
   1295c:	adds	r4, r4, #1
   12960:	adc	r7, r7, #0
   12964:	subs	r0, r4, r0
   12968:	ldr	r0, [sp, #96]	; 0x60
   1296c:	sbcs	r0, r7, r0
   12970:	bcc	129a0 <__assert_fail@plt+0x1250>
   12974:	sub	r2, r5, sl
   12978:	and	r0, r9, #1
   1297c:	mov	r1, sl
   12980:	bl	140a4 <__assert_fail@plt+0x2954>
   12984:	movw	r0, #41304	; 0xa158
   12988:	mov	r4, #0
   1298c:	mov	r9, #1
   12990:	mov	sl, r5
   12994:	mov	r7, #0
   12998:	movt	r0, #2
   1299c:	ldr	r6, [r0]
   129a0:	mov	r0, r5
   129a4:	mov	r1, r6
   129a8:	bl	114a4 <rawmemchr@plt>
   129ac:	cmp	r0, r8
   129b0:	bne	12954 <__assert_fail@plt+0x1204>
   129b4:	cmp	r8, sl
   129b8:	beq	129d0 <__assert_fail@plt+0x1280>
   129bc:	sub	r2, r8, sl
   129c0:	and	r0, r9, #1
   129c4:	mov	r1, sl
   129c8:	bl	140a4 <__assert_fail@plt+0x2954>
   129cc:	mov	r9, #0
   129d0:	ldr	r0, [sp, #92]	; 0x5c
   129d4:	cmp	r0, #0
   129d8:	bne	12914 <__assert_fail@plt+0x11c4>
   129dc:	b	137bc <__assert_fail@plt+0x206c>
   129e0:	mov	r0, #0
   129e4:	mov	r1, r6
   129e8:	str	r0, [sp, #8]
   129ec:	str	r0, [sp, #12]
   129f0:	mvn	r0, #0
   129f4:	str	r0, [sp]
   129f8:	mov	r0, r9
   129fc:	b	1328c <__assert_fail@plt+0x1b3c>
   12a00:	ldr	r2, [sp, #80]	; 0x50
   12a04:	mov	sl, #0
   12a08:	mov	r7, #0
   12a0c:	mvn	r0, r2
   12a10:	str	r0, [sp, #44]	; 0x2c
   12a14:	mov	r0, #0
   12a18:	str	r0, [sp, #56]	; 0x38
   12a1c:	mov	r0, #0
   12a20:	str	r0, [sp, #60]	; 0x3c
   12a24:	mov	r0, #0
   12a28:	str	r0, [sp, #52]	; 0x34
   12a2c:	mov	r0, #0
   12a30:	str	r0, [sp, #92]	; 0x5c
   12a34:	ldr	r4, [sp, #76]	; 0x4c
   12a38:	mov	r0, #0
   12a3c:	mov	r1, r4
   12a40:	bl	16b38 <__assert_fail@plt+0x53e8>
   12a44:	cmp	r0, #0
   12a48:	beq	12d50 <__assert_fail@plt+0x1600>
   12a4c:	cmn	r0, #1
   12a50:	mov	r5, r0
   12a54:	str	r4, [sp, #88]	; 0x58
   12a58:	str	r0, [sp, #40]	; 0x28
   12a5c:	str	r9, [sp, #100]	; 0x64
   12a60:	beq	13870 <__assert_fail@plt+0x2120>
   12a64:	ldr	r0, [sp, #92]	; 0x5c
   12a68:	ldr	r3, [sp, #88]	; 0x58
   12a6c:	str	r5, [sp, #68]	; 0x44
   12a70:	subs	r0, r9, r0
   12a74:	sbc	r1, r6, r7
   12a78:	mov	r6, sl
   12a7c:	subs	sl, r0, sl
   12a80:	sbc	r1, r1, #0
   12a84:	subs	r0, r5, sl
   12a88:	mov	r2, sl
   12a8c:	mov	r9, sl
   12a90:	rscs	r0, r1, #0
   12a94:	str	r1, [sp, #64]	; 0x40
   12a98:	add	r1, r3, sl
   12a9c:	mov	r0, #0
   12aa0:	sub	r1, r1, #1
   12aa4:	movwcc	r0, #1
   12aa8:	cmp	r0, #0
   12aac:	movw	r0, #41304	; 0xa158
   12ab0:	movwne	r1, #0
   12ab4:	movt	r0, #2
   12ab8:	movne	r2, r5
   12abc:	movwne	r9, #0
   12ac0:	str	r1, [sp, #72]	; 0x48
   12ac4:	ldr	r1, [r0]
   12ac8:	mov	r0, r3
   12acc:	bl	115dc <memrchr@plt>
   12ad0:	mov	r4, r0
   12ad4:	cmp	r6, #0
   12ad8:	str	r6, [sp, #84]	; 0x54
   12adc:	beq	12b48 <__assert_fail@plt+0x13f8>
   12ae0:	ldr	r0, [sp, #92]	; 0x5c
   12ae4:	orrs	r0, r0, r7
   12ae8:	beq	12af4 <__assert_fail@plt+0x13a4>
   12aec:	cmp	r4, #0
   12af0:	beq	12bcc <__assert_fail@plt+0x147c>
   12af4:	ldr	r8, [sp, #52]	; 0x34
   12af8:	ldr	r5, [sp, #84]	; 0x54
   12afc:	clz	r0, r0
   12b00:	lsr	r0, r0, #5
   12b04:	mov	r1, r8
   12b08:	mov	r2, r5
   12b0c:	bl	140a4 <__assert_fail@plt+0x2954>
   12b10:	ldr	r0, [sp, #92]	; 0x5c
   12b14:	ldr	r6, [sp, #80]	; 0x50
   12b18:	adds	r0, r0, r5
   12b1c:	adc	r7, r7, #0
   12b20:	cmp	r5, r6
   12b24:	str	r0, [sp, #92]	; 0x5c
   12b28:	str	r7, [sp, #48]	; 0x30
   12b2c:	bls	12b40 <__assert_fail@plt+0x13f0>
   12b30:	mov	r0, r8
   12b34:	mov	r1, r6
   12b38:	bl	173b4 <__assert_fail@plt+0x5c64>
   12b3c:	str	r0, [sp, #52]	; 0x34
   12b40:	str	r6, [sp, #56]	; 0x38
   12b44:	b	12b4c <__assert_fail@plt+0x13fc>
   12b48:	str	r7, [sp, #48]	; 0x30
   12b4c:	cmp	r4, #0
   12b50:	beq	12bc0 <__assert_fail@plt+0x1470>
   12b54:	ldr	r1, [sp, #88]	; 0x58
   12b58:	ldr	r7, [sp, #92]	; 0x5c
   12b5c:	ldr	r8, [sp, #48]	; 0x30
   12b60:	sub	r0, r4, r1
   12b64:	add	r5, r0, #1
   12b68:	orr	r0, r7, r8
   12b6c:	clz	r0, r0
   12b70:	mov	r2, r5
   12b74:	lsr	r0, r0, #5
   12b78:	bl	140a4 <__assert_fail@plt+0x2954>
   12b7c:	ldr	r1, [sp, #68]	; 0x44
   12b80:	ldr	r2, [sp, #64]	; 0x40
   12b84:	subs	r0, r1, sl
   12b88:	sub	r6, r1, r5
   12b8c:	rscs	r0, r2, #0
   12b90:	add	r0, r4, #1
   12b94:	ldr	r4, [sp, #72]	; 0x48
   12b98:	subcs	r9, r9, r5
   12b9c:	adds	r7, r7, r5
   12ba0:	str	r7, [sp, #92]	; 0x5c
   12ba4:	mov	r7, r8
   12ba8:	str	r0, [sp, #88]	; 0x58
   12bac:	mov	r0, #0
   12bb0:	adc	r7, r8, #0
   12bb4:	str	r0, [sp, #84]	; 0x54
   12bb8:	mov	r8, #1
   12bbc:	b	12c48 <__assert_fail@plt+0x14f8>
   12bc0:	ldr	r7, [sp, #48]	; 0x30
   12bc4:	mov	r0, #0
   12bc8:	str	r0, [sp, #84]	; 0x54
   12bcc:	ldr	r0, [sp, #60]	; 0x3c
   12bd0:	ldr	r4, [sp, #72]	; 0x48
   12bd4:	ldr	r1, [sp, #68]	; 0x44
   12bd8:	mov	r8, #1
   12bdc:	tst	r0, #1
   12be0:	beq	12bec <__assert_fail@plt+0x149c>
   12be4:	mov	r6, r1
   12be8:	b	12c44 <__assert_fail@plt+0x14f4>
   12bec:	ldr	r5, [sp, #92]	; 0x5c
   12bf0:	ldr	r6, [sp, #88]	; 0x58
   12bf4:	cmp	r4, #0
   12bf8:	mov	r4, r1
   12bfc:	movne	r4, r9
   12c00:	mov	r2, r4
   12c04:	orr	r0, r5, r7
   12c08:	mov	r1, r6
   12c0c:	clz	r0, r0
   12c10:	lsr	r0, r0, #5
   12c14:	bl	140a4 <__assert_fail@plt+0x2954>
   12c18:	ldr	r1, [sp, #68]	; 0x44
   12c1c:	add	r6, r6, r4
   12c20:	adds	r5, r5, r4
   12c24:	mov	r8, #0
   12c28:	str	r6, [sp, #88]	; 0x58
   12c2c:	adc	r7, r7, #0
   12c30:	str	r5, [sp, #92]	; 0x5c
   12c34:	sub	r6, r1, r4
   12c38:	ldr	r4, [sp, #72]	; 0x48
   12c3c:	cmp	r4, #0
   12c40:	movwne	r9, #0
   12c44:	ldr	r2, [sp, #64]	; 0x40
   12c48:	subs	r0, r1, sl
   12c4c:	mov	r1, r6
   12c50:	mov	r3, r4
   12c54:	rscs	r0, r2, #0
   12c58:	mov	r2, r9
   12c5c:	mov	r0, #0
   12c60:	movwcc	r0, #1
   12c64:	cmp	r6, #0
   12c68:	movwne	r1, #1
   12c6c:	cmp	r9, #0
   12c70:	movwne	r2, #1
   12c74:	cmp	r4, #0
   12c78:	movwne	r3, #1
   12c7c:	tst	r3, r2
   12c80:	andseq	r0, r0, r1
   12c84:	beq	12cd0 <__assert_fail@plt+0x1580>
   12c88:	ldr	sl, [sp, #84]	; 0x54
   12c8c:	ldr	r0, [sp, #56]	; 0x38
   12c90:	cmp	r4, #0
   12c94:	moveq	r9, r6
   12c98:	sub	r0, r0, sl
   12c9c:	cmp	r0, r9
   12ca0:	bcs	12cdc <__assert_fail@plt+0x158c>
   12ca4:	ldr	r0, [sp, #44]	; 0x2c
   12ca8:	ldr	r1, [sp, #56]	; 0x38
   12cac:	cmp	r1, r0
   12cb0:	bhi	139b0 <__assert_fail@plt+0x2260>
   12cb4:	ldr	r0, [sp, #80]	; 0x50
   12cb8:	ldr	r1, [sp, #56]	; 0x38
   12cbc:	add	r1, r1, r0
   12cc0:	ldr	r0, [sp, #52]	; 0x34
   12cc4:	str	r1, [sp, #56]	; 0x38
   12cc8:	bl	173b4 <__assert_fail@plt+0x5c64>
   12ccc:	b	12ce0 <__assert_fail@plt+0x1590>
   12cd0:	ldr	sl, [sp, #84]	; 0x54
   12cd4:	mov	r5, r6
   12cd8:	b	12d0c <__assert_fail@plt+0x15bc>
   12cdc:	ldr	r0, [sp, #52]	; 0x34
   12ce0:	ldr	r4, [sp, #88]	; 0x58
   12ce4:	str	r0, [sp, #52]	; 0x34
   12ce8:	add	r0, r0, sl
   12cec:	mov	r2, r9
   12cf0:	mov	r1, r4
   12cf4:	bl	11438 <memcpy@plt>
   12cf8:	add	r4, r4, r9
   12cfc:	sub	r5, r6, r9
   12d00:	add	sl, r9, sl
   12d04:	str	r4, [sp, #88]	; 0x58
   12d08:	ldr	r4, [sp, #72]	; 0x48
   12d0c:	ldr	r0, [sp, #92]	; 0x5c
   12d10:	cmp	r4, #0
   12d14:	ldr	r9, [sp, #100]	; 0x64
   12d18:	ldr	r6, [sp, #96]	; 0x60
   12d1c:	movwne	r7, #0
   12d20:	movwne	r0, #0
   12d24:	cmp	r5, #0
   12d28:	str	r0, [sp, #92]	; 0x5c
   12d2c:	clz	r0, r4
   12d30:	lsr	r0, r0, #5
   12d34:	and	r0, r8, r0
   12d38:	str	r0, [sp, #60]	; 0x3c
   12d3c:	bne	12a64 <__assert_fail@plt+0x1314>
   12d40:	ldr	r0, [sp, #40]	; 0x28
   12d44:	ldr	r2, [sp, #80]	; 0x50
   12d48:	cmp	r0, #0
   12d4c:	bne	12a34 <__assert_fail@plt+0x12e4>
   12d50:	ldr	r6, [sp, #52]	; 0x34
   12d54:	cmp	sl, #0
   12d58:	beq	12d78 <__assert_fail@plt+0x1628>
   12d5c:	ldr	r0, [sp, #92]	; 0x5c
   12d60:	mov	r1, r6
   12d64:	mov	r2, sl
   12d68:	orr	r0, r0, r7
   12d6c:	clz	r0, r0
   12d70:	lsr	r0, r0, #5
   12d74:	bl	140a4 <__assert_fail@plt+0x2954>
   12d78:	mov	r0, r6
   12d7c:	bl	14e64 <__assert_fail@plt+0x3714>
   12d80:	b	137bc <__assert_fail@plt+0x206c>
   12d84:	ldr	r2, [sp, #64]	; 0x40
   12d88:	subs	r0, r9, #1
   12d8c:	sbc	r1, r6, #0
   12d90:	subs	r2, r9, r2
   12d94:	sbcs	r2, r6, r5
   12d98:	bcc	13b5c <__assert_fail@plt+0x240c>
   12d9c:	subs	r0, r0, r7
   12da0:	sbcs	r0, r1, r4
   12da4:	bcs	13b5c <__assert_fail@plt+0x240c>
   12da8:	mov	r0, r7
   12dac:	mov	r1, r4
   12db0:	mov	r2, r9
   12db4:	mov	r3, r6
   12db8:	str	r7, [sp, #32]
   12dbc:	str	r4, [sp, #24]
   12dc0:	str	r9, [sp, #100]	; 0x64
   12dc4:	bl	184bc <__assert_fail@plt+0x6d6c>
   12dc8:	ldr	r3, [sp, #64]	; 0x40
   12dcc:	subs	r9, r0, #1
   12dd0:	mov	r8, #0
   12dd4:	str	r0, [sp, #56]	; 0x38
   12dd8:	str	r1, [sp, #52]	; 0x34
   12ddc:	sbc	r7, r1, #0
   12de0:	subs	r2, r3, #2
   12de4:	sbcs	r2, r5, #0
   12de8:	bcc	12f14 <__assert_fail@plt+0x17c4>
   12dec:	subs	r2, r3, #1
   12df0:	sbc	r6, r5, #0
   12df4:	umull	r3, r7, r0, r2
   12df8:	str	r2, [sp, #84]	; 0x54
   12dfc:	mla	r0, r0, r6, r7
   12e00:	subs	r7, r3, #1
   12e04:	str	r6, [sp, #40]	; 0x28
   12e08:	mla	r1, r1, r2, r0
   12e0c:	sbc	r6, r1, #0
   12e10:	subs	r0, r7, sl
   12e14:	sbcs	r0, r6, #0
   12e18:	bge	1335c <__assert_fail@plt+0x1c0c>
   12e1c:	ldr	r5, [sp, #76]	; 0x4c
   12e20:	sub	sl, sl, r7
   12e24:	mov	r2, sl
   12e28:	add	r1, r5, r7
   12e2c:	mov	r0, r5
   12e30:	bl	11414 <memmove@plt>
   12e34:	ldr	r3, [sp, #84]	; 0x54
   12e38:	mov	lr, r6
   12e3c:	mov	ip, r7
   12e40:	mov	r9, r7
   12e44:	mov	r7, r6
   12e48:	b	13398 <__assert_fail@plt+0x1c48>
   12e4c:	ldr	r0, [sp, #72]	; 0x48
   12e50:	cmp	r0, #0
   12e54:	beq	12f30 <__assert_fail@plt+0x17e0>
   12e58:	str	r5, [sp, #68]	; 0x44
   12e5c:	b	12f94 <__assert_fail@plt+0x1844>
   12e60:	ldr	r0, [sp, #72]	; 0x48
   12e64:	cmp	r0, #0
   12e68:	beq	1326c <__assert_fail@plt+0x1b1c>
   12e6c:	ldr	r0, [sp, #64]	; 0x40
   12e70:	subs	r0, r0, #1
   12e74:	sbc	r1, r5, #0
   12e78:	str	r0, [sp, #96]	; 0x60
   12e7c:	subs	r0, r0, r9
   12e80:	mov	r0, r1
   12e84:	str	r1, [sp, #92]	; 0x5c
   12e88:	sbcs	r0, r1, r6
   12e8c:	bcs	13b7c <__assert_fail@plt+0x242c>
   12e90:	subs	r0, r7, r9
   12e94:	sbcs	r0, r4, r6
   12e98:	bcc	13b7c <__assert_fail@plt+0x242c>
   12e9c:	mov	r0, r7
   12ea0:	mov	r1, r4
   12ea4:	mov	r2, r9
   12ea8:	mov	r3, r6
   12eac:	bl	184bc <__assert_fail@plt+0x6d6c>
   12eb0:	ldr	r5, [sp, #64]	; 0x40
   12eb4:	mov	ip, r7
   12eb8:	ldr	r7, [sp, #68]	; 0x44
   12ebc:	umull	r8, r2, r0, r5
   12ec0:	eor	r3, r5, r9
   12ec4:	mla	r2, r0, r7, r2
   12ec8:	eor	r7, r7, r6
   12ecc:	orrs	r3, r3, r7
   12ed0:	ldr	r7, [sp, #92]	; 0x5c
   12ed4:	ldr	r3, [sp, #96]	; 0x60
   12ed8:	mlane	r4, r1, r5, r2
   12edc:	moveq	r8, ip
   12ee0:	mov	r9, r4
   12ee4:	umull	r6, r2, r0, r3
   12ee8:	mla	r0, r0, r7, r2
   12eec:	mla	r7, r1, r3, r0
   12ef0:	subs	r0, r6, sl
   12ef4:	sbcs	r0, r7, #0
   12ef8:	bge	1329c <__assert_fail@plt+0x1b4c>
   12efc:	ldr	r0, [sp, #76]	; 0x4c
   12f00:	sub	r4, sl, r6
   12f04:	mov	r2, r4
   12f08:	add	r1, r0, r6
   12f0c:	bl	11414 <memmove@plt>
   12f10:	b	1334c <__assert_fail@plt+0x1bfc>
   12f14:	ldr	r5, [sp, #76]	; 0x4c
   12f18:	mov	r0, #0
   12f1c:	mov	r3, #1
   12f20:	mov	ip, #0
   12f24:	mov	lr, #0
   12f28:	str	r0, [sp, #40]	; 0x28
   12f2c:	b	13398 <__assert_fail@plt+0x1c48>
   12f30:	cmp	r6, #0
   12f34:	bne	139b0 <__assert_fail@plt+0x2260>
   12f38:	mov	r0, r9
   12f3c:	mov	r1, #16
   12f40:	bl	1743c <__assert_fail@plt+0x5cec>
   12f44:	ldr	r6, [sp, #96]	; 0x60
   12f48:	movw	r8, #42252	; 0xa50c
   12f4c:	mov	sl, r0
   12f50:	mov	r4, #0
   12f54:	mvn	r5, #0
   12f58:	mov	r7, #0
   12f5c:	movt	r8, #2
   12f60:	bl	141b8 <__assert_fail@plt+0x2a68>
   12f64:	ldr	r0, [r8]
   12f68:	bl	1777c <__assert_fail@plt+0x602c>
   12f6c:	mov	r1, sl
   12f70:	str	r0, [r1, r7, lsl #4]!
   12f74:	add	r7, r7, #1
   12f78:	subs	r0, r7, r9
   12f7c:	str	r5, [r1, #4]
   12f80:	str	r4, [r1, #8]
   12f84:	str	r4, [r1, #12]
   12f88:	rscs	r0, r6, #0
   12f8c:	bcc	12f60 <__assert_fail@plt+0x1810>
   12f90:	str	sl, [sp, #52]	; 0x34
   12f94:	mov	r0, #1
   12f98:	mov	sl, #0
   12f9c:	str	r9, [sp, #100]	; 0x64
   12fa0:	str	r0, [sp, #92]	; 0x5c
   12fa4:	mov	r0, #0
   12fa8:	str	r0, [sp, #88]	; 0x58
   12fac:	mov	r0, #0
   12fb0:	str	r0, [sp, #60]	; 0x3c
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [sp, #56]	; 0x38
   12fbc:	mov	r0, #0
   12fc0:	str	r0, [sp, #44]	; 0x2c
   12fc4:	b	13234 <__assert_fail@plt+0x1ae4>
   12fc8:	cmn	r0, #1
   12fcc:	beq	13870 <__assert_fail@plt+0x2120>
   12fd0:	ldr	r8, [sp, #76]	; 0x4c
   12fd4:	add	r5, r8, r0
   12fd8:	str	r5, [sp, #84]	; 0x54
   12fdc:	movw	r0, #41304	; 0xa158
   12fe0:	sub	r2, r5, r8
   12fe4:	mov	r4, r8
   12fe8:	movt	r0, #2
   12fec:	ldr	r1, [r0]
   12ff0:	mov	r0, r8
   12ff4:	bl	11660 <memchr@plt>
   12ff8:	cmp	r0, #0
   12ffc:	mov	r8, r5
   13000:	mov	r7, r0
   13004:	addne	r8, r0, #1
   13008:	ldr	r0, [sp, #72]	; 0x48
   1300c:	sub	r9, r8, r4
   13010:	cmp	r0, #0
   13014:	beq	13068 <__assert_fail@plt+0x1918>
   13018:	ldr	r0, [sp, #64]	; 0x40
   1301c:	ldr	r1, [sp, #92]	; 0x5c
   13020:	ldr	r2, [sp, #68]	; 0x44
   13024:	eor	r0, r1, r0
   13028:	ldr	r1, [sp, #88]	; 0x58
   1302c:	eor	r1, r1, r2
   13030:	orrs	r0, r0, r1
   13034:	bne	131e0 <__assert_fail@plt+0x1a90>
   13038:	movw	r0, #41864	; 0xa388
   1303c:	movt	r0, #2
   13040:	ldrb	r0, [r0]
   13044:	cmp	r0, #1
   13048:	bne	131bc <__assert_fail@plt+0x1a6c>
   1304c:	mov	r0, #1
   13050:	mov	r1, r4
   13054:	mov	r2, r9
   13058:	bl	14f30 <__assert_fail@plt+0x37e0>
   1305c:	cmp	r0, r9
   13060:	beq	131e0 <__assert_fail@plt+0x1a90>
   13064:	b	13a18 <__assert_fail@plt+0x22c8>
   13068:	ldr	r5, [sp, #52]	; 0x34
   1306c:	ldr	r2, [sp, #100]	; 0x64
   13070:	mov	r1, sl
   13074:	mov	r0, r5
   13078:	bl	149c0 <__assert_fail@plt+0x3270>
   1307c:	mov	r6, r0
   13080:	movw	r0, #41864	; 0xa388
   13084:	movt	r0, #2
   13088:	ldrb	r0, [r0]
   1308c:	cmp	r0, #1
   13090:	bne	130b4 <__assert_fail@plt+0x1964>
   13094:	add	r0, r5, sl, lsl #4
   13098:	mov	r1, r4
   1309c:	mov	r2, r9
   130a0:	ldr	r0, [r0, #4]
   130a4:	bl	14f30 <__assert_fail@plt+0x37e0>
   130a8:	cmp	r0, r9
   130ac:	bne	130d4 <__assert_fail@plt+0x1984>
   130b0:	b	130f8 <__assert_fail@plt+0x19a8>
   130b4:	add	r0, r5, sl, lsl #4
   130b8:	mov	r1, r9
   130bc:	mov	r2, #1
   130c0:	ldr	r3, [r0, #8]
   130c4:	mov	r0, r4
   130c8:	bl	1145c <fwrite_unlocked@plt>
   130cc:	cmp	r0, #1
   130d0:	beq	130f8 <__assert_fail@plt+0x19a8>
   130d4:	bl	115f4 <__errno_location@plt>
   130d8:	ldr	r4, [r0]
   130dc:	cmp	r4, #32
   130e0:	bne	139b4 <__assert_fail@plt+0x2264>
   130e4:	movw	r0, #41876	; 0xa394
   130e8:	movt	r0, #2
   130ec:	ldr	r0, [r0]
   130f0:	cmp	r0, #0
   130f4:	beq	139b4 <__assert_fail@plt+0x2264>
   130f8:	ldr	r4, [sp, #60]	; 0x3c
   130fc:	orr	r4, r4, r6
   13100:	bl	115f4 <__errno_location@plt>
   13104:	mov	r1, r0
   13108:	ldr	r0, [r0]
   1310c:	str	r4, [sp, #60]	; 0x3c
   13110:	subs	r6, r0, #32
   13114:	movw	r0, #41876	; 0xa394
   13118:	movt	r0, #2
   1311c:	movwne	r6, #1
   13120:	tst	r4, #1
   13124:	ldr	r5, [r0]
   13128:	beq	13164 <__assert_fail@plt+0x1a14>
   1312c:	ldr	r0, [sp, #52]	; 0x34
   13130:	mov	r9, sl
   13134:	str	r1, [sp, #48]	; 0x30
   13138:	add	sl, r0, sl, lsl #4
   1313c:	mov	r4, sl
   13140:	ldr	r0, [r4, #8]!
   13144:	bl	14cbc <__assert_fail@plt+0x356c>
   13148:	cmp	r0, #0
   1314c:	bne	13a38 <__assert_fail@plt+0x22e8>
   13150:	mov	r0, #0
   13154:	str	r0, [r4]
   13158:	mvn	r0, #1
   1315c:	str	r0, [sl, #4]
   13160:	mov	sl, r9
   13164:	ldr	r2, [sp, #56]	; 0x38
   13168:	clz	r0, r5
   1316c:	ldr	r5, [sp, #84]	; 0x54
   13170:	cmp	r7, #0
   13174:	lsr	r0, r0, #5
   13178:	orr	r0, r6, r0
   1317c:	orr	r2, r2, r0
   13180:	beq	13224 <__assert_fail@plt+0x1ad4>
   13184:	ldr	r1, [sp, #100]	; 0x64
   13188:	ldr	r6, [sp, #96]	; 0x60
   1318c:	add	sl, sl, #1
   13190:	eor	r0, r1, sl
   13194:	orrs	r0, r0, r6
   13198:	bne	13228 <__assert_fail@plt+0x1ad8>
   1319c:	tst	r2, #1
   131a0:	beq	13740 <__assert_fail@plt+0x1ff0>
   131a4:	mov	r0, #1
   131a8:	mov	sl, #0
   131ac:	str	r0, [sp, #44]	; 0x2c
   131b0:	mov	r0, #0
   131b4:	str	r0, [sp, #56]	; 0x38
   131b8:	b	1322c <__assert_fail@plt+0x1adc>
   131bc:	movw	r0, #41836	; 0xa36c
   131c0:	mov	r1, r9
   131c4:	mov	r2, #1
   131c8:	movt	r0, #2
   131cc:	ldr	r3, [r0]
   131d0:	mov	r0, r4
   131d4:	bl	1145c <fwrite_unlocked@plt>
   131d8:	cmp	r0, #1
   131dc:	bne	13a08 <__assert_fail@plt+0x22b8>
   131e0:	cmp	r7, #0
   131e4:	beq	1321c <__assert_fail@plt+0x1acc>
   131e8:	ldr	r3, [sp, #88]	; 0x58
   131ec:	ldr	r0, [sp, #100]	; 0x64
   131f0:	ldr	r2, [sp, #92]	; 0x5c
   131f4:	eor	r0, r2, r0
   131f8:	eor	r1, r3, r6
   131fc:	adds	r2, r2, #1
   13200:	orr	r0, r0, r1
   13204:	adc	r3, r3, #0
   13208:	cmp	r0, #0
   1320c:	moveq	r3, r0
   13210:	movweq	r2, #1
   13214:	str	r3, [sp, #88]	; 0x58
   13218:	str	r2, [sp, #92]	; 0x5c
   1321c:	ldr	r5, [sp, #84]	; 0x54
   13220:	b	1322c <__assert_fail@plt+0x1adc>
   13224:	ldr	r6, [sp, #96]	; 0x60
   13228:	str	r2, [sp, #56]	; 0x38
   1322c:	cmp	r8, r5
   13230:	bne	12fdc <__assert_fail@plt+0x188c>
   13234:	ldr	r1, [sp, #76]	; 0x4c
   13238:	ldr	r2, [sp, #80]	; 0x50
   1323c:	mov	r0, #0
   13240:	bl	16b38 <__assert_fail@plt+0x53e8>
   13244:	cmp	r0, #0
   13248:	bne	12fc8 <__assert_fail@plt+0x1878>
   1324c:	ldr	r0, [sp, #72]	; 0x48
   13250:	cmp	r0, #0
   13254:	bne	137bc <__assert_fail@plt+0x206c>
   13258:	ldr	r0, [sp, #44]	; 0x2c
   1325c:	ldr	r1, [sp, #100]	; 0x64
   13260:	tst	r0, #1
   13264:	movne	sl, r1
   13268:	b	13744 <__assert_fail@plt+0x1ff4>
   1326c:	mov	r0, r7
   13270:	mov	r1, r4
   13274:	mov	r2, r9
   13278:	mov	r3, r6
   1327c:	bl	184bc <__assert_fail@plt+0x6d6c>
   13280:	str	r9, [sp, #8]
   13284:	str	r6, [sp, #12]
   13288:	str	sl, [sp]
   1328c:	ldr	r2, [sp, #76]	; 0x4c
   13290:	ldr	r3, [sp, #80]	; 0x50
   13294:	bl	13bac <__assert_fail@plt+0x245c>
   13298:	b	137bc <__assert_fail@plt+0x206c>
   1329c:	mov	r0, #1
   132a0:	subs	r2, r6, sl
   132a4:	str	r0, [sp]
   132a8:	sbc	r3, r7, #0
   132ac:	mov	r0, #0
   132b0:	bl	114d4 <lseek64@plt>
   132b4:	mvn	r4, #0
   132b8:	cmn	r1, #1
   132bc:	bgt	1334c <__assert_fail@plt+0x1bfc>
   132c0:	b	13870 <__assert_fail@plt+0x2120>
   132c4:	cmn	r4, #1
   132c8:	bne	132e8 <__assert_fail@plt+0x1b98>
   132cc:	ldr	r1, [sp, #76]	; 0x4c
   132d0:	ldr	r2, [sp, #80]	; 0x50
   132d4:	mov	r0, #0
   132d8:	bl	16b38 <__assert_fail@plt+0x53e8>
   132dc:	mov	r4, r0
   132e0:	cmn	r0, #1
   132e4:	beq	13870 <__assert_fail@plt+0x2120>
   132e8:	cmp	r4, #0
   132ec:	beq	137bc <__assert_fail@plt+0x206c>
   132f0:	subs	r5, r8, r6
   132f4:	sbc	r0, r9, r7
   132f8:	subs	r1, r4, r5
   132fc:	ldr	r1, [sp, #76]	; 0x4c
   13300:	rscs	r0, r0, #0
   13304:	movlt	r5, r4
   13308:	mov	r0, #1
   1330c:	mov	r2, r5
   13310:	bl	14f30 <__assert_fail@plt+0x37e0>
   13314:	cmp	r0, r5
   13318:	beq	13340 <__assert_fail@plt+0x1bf0>
   1331c:	bl	115f4 <__errno_location@plt>
   13320:	ldr	r4, [r0]
   13324:	cmp	r4, #32
   13328:	bne	13a4c <__assert_fail@plt+0x22fc>
   1332c:	movw	r0, #41876	; 0xa394
   13330:	movt	r0, #2
   13334:	ldr	r0, [r0]
   13338:	cmp	r0, #0
   1333c:	beq	13a4c <__assert_fail@plt+0x22fc>
   13340:	adds	r6, r6, r5
   13344:	mvn	r4, #0
   13348:	adc	r7, r7, #0
   1334c:	subs	r0, r6, r8
   13350:	sbcs	r0, r7, r9
   13354:	blt	132c4 <__assert_fail@plt+0x1b74>
   13358:	b	137bc <__assert_fail@plt+0x206c>
   1335c:	mov	r0, #1
   13360:	subs	r2, r7, sl
   13364:	str	r0, [sp]
   13368:	sbc	r3, r6, #0
   1336c:	mov	r0, #0
   13370:	bl	114d4 <lseek64@plt>
   13374:	ldr	r5, [sp, #76]	; 0x4c
   13378:	ldr	r3, [sp, #84]	; 0x54
   1337c:	mov	lr, r6
   13380:	mov	ip, r7
   13384:	mov	r9, r7
   13388:	mvn	sl, #0
   1338c:	cmn	r1, #1
   13390:	mov	r7, r6
   13394:	ble	13870 <__assert_fail@plt+0x2120>
   13398:	ldr	r2, [sp, #32]
   1339c:	ldr	r1, [sp, #24]
   133a0:	subs	r0, ip, r2
   133a4:	sbcs	r0, lr, r1
   133a8:	bge	136f0 <__assert_fail@plt+0x1fa0>
   133ac:	subs	r0, r2, #1
   133b0:	mov	r8, #0
   133b4:	mov	r4, #1
   133b8:	mov	r2, #0
   133bc:	str	r0, [sp, #92]	; 0x5c
   133c0:	sbc	r0, r1, #0
   133c4:	str	r0, [sp, #88]	; 0x58
   133c8:	cmn	sl, #1
   133cc:	bne	1341c <__assert_fail@plt+0x1ccc>
   133d0:	str	r2, [sp, #84]	; 0x54
   133d4:	ldr	r2, [sp, #80]	; 0x50
   133d8:	mov	r0, #0
   133dc:	mov	r1, r5
   133e0:	str	r4, [sp, #48]	; 0x30
   133e4:	mov	sl, r8
   133e8:	mov	r6, r3
   133ec:	mov	r4, ip
   133f0:	mov	r8, lr
   133f4:	bl	16b38 <__assert_fail@plt+0x53e8>
   133f8:	mov	ip, r4
   133fc:	ldr	r2, [sp, #84]	; 0x54
   13400:	ldr	r4, [sp, #48]	; 0x30
   13404:	mov	lr, r8
   13408:	mov	r8, sl
   1340c:	mov	r3, r6
   13410:	mov	sl, r0
   13414:	cmn	r0, #1
   13418:	beq	13870 <__assert_fail@plt+0x2120>
   1341c:	cmp	sl, #0
   13420:	beq	136f4 <__assert_fail@plt+0x1fa4>
   13424:	ldr	r0, [sp, #32]
   13428:	str	r3, [sp, #84]	; 0x54
   1342c:	subs	r3, r0, ip
   13430:	ldr	r0, [sp, #24]
   13434:	sbc	r0, r0, lr
   13438:	subs	r1, sl, r3
   1343c:	rscs	r0, r0, #0
   13440:	movlt	r3, sl
   13444:	cmp	r3, #0
   13448:	beq	136b8 <__assert_fail@plt+0x1f68>
   1344c:	mov	r0, #0
   13450:	add	r8, r5, r3
   13454:	mov	sl, r5
   13458:	str	r0, [sp, #20]
   1345c:	subs	r0, r9, ip
   13460:	str	r4, [sp, #28]
   13464:	mov	r4, ip
   13468:	mov	r6, lr
   1346c:	str	r3, [sp, #36]	; 0x24
   13470:	sbc	r1, r7, lr
   13474:	rsbs	r2, r0, #0
   13478:	rscs	r2, r1, #0
   1347c:	mov	r2, #0
   13480:	movwlt	r2, #1
   13484:	cmp	r2, #0
   13488:	moveq	r1, r2
   1348c:	movne	r2, r0
   13490:	subs	r0, r3, r2
   13494:	rscs	r0, r1, #0
   13498:	movw	r1, #41304	; 0xa158
   1349c:	movt	r1, #2
   134a0:	movlt	r2, r3
   134a4:	ldr	r1, [r1]
   134a8:	add	r0, sl, r2
   134ac:	sub	r2, r3, r2
   134b0:	bl	11660 <memchr@plt>
   134b4:	cmp	r0, #0
   134b8:	mov	r1, r8
   134bc:	ldr	r3, [sp, #84]	; 0x54
   134c0:	ldr	r2, [sp, #40]	; 0x28
   134c4:	addne	r1, r0, #1
   134c8:	movwne	r0, #1
   134cc:	sub	r5, r1, sl
   134d0:	str	r1, [sp, #60]	; 0x3c
   134d4:	ldr	r1, [sp, #68]	; 0x44
   134d8:	str	r0, [sp, #48]	; 0x30
   134dc:	ldr	r0, [sp, #64]	; 0x40
   134e0:	str	r5, [sp, #44]	; 0x2c
   134e4:	eor	r0, r3, r0
   134e8:	eor	r1, r2, r1
   134ec:	orrs	r0, r0, r1
   134f0:	bne	13518 <__assert_fail@plt+0x1dc8>
   134f4:	mov	r0, #1
   134f8:	mov	r1, sl
   134fc:	mov	r2, r5
   13500:	bl	14f30 <__assert_fail@plt+0x37e0>
   13504:	ldr	r5, [sp, #44]	; 0x2c
   13508:	ldr	r3, [sp, #84]	; 0x54
   1350c:	cmp	r0, r5
   13510:	beq	13540 <__assert_fail@plt+0x1df0>
   13514:	b	13a18 <__assert_fail@plt+0x22c8>
   13518:	ldr	r0, [sp, #72]	; 0x48
   1351c:	cmp	r0, #0
   13520:	bne	13540 <__assert_fail@plt+0x1df0>
   13524:	ldr	r0, [sp, #28]
   13528:	mov	r1, sl
   1352c:	mov	r2, r5
   13530:	and	r0, r0, #1
   13534:	bl	140a4 <__assert_fail@plt+0x2954>
   13538:	ldr	r5, [sp, #44]	; 0x2c
   1353c:	ldr	r3, [sp, #84]	; 0x54
   13540:	mov	ip, r4
   13544:	mov	lr, r6
   13548:	adds	ip, r4, r5
   1354c:	ldr	r4, [sp, #48]	; 0x30
   13550:	adc	lr, r6, #0
   13554:	subs	r0, r9, ip
   13558:	sbcs	r0, r7, lr
   1355c:	mov	r0, #0
   13560:	movwge	r0, #1
   13564:	eor	r1, r4, #1
   13568:	tst	r0, r1
   1356c:	bne	13684 <__assert_fail@plt+0x1f34>
   13570:	mov	r5, r4
   13574:	ldr	r2, [sp, #56]	; 0x38
   13578:	ldr	r4, [sp, #52]	; 0x34
   1357c:	ldr	r6, [sp, #40]	; 0x28
   13580:	ldr	sl, [sp, #60]	; 0x3c
   13584:	cmp	sl, r8
   13588:	tsteq	r5, #1
   1358c:	beq	1368c <__assert_fail@plt+0x1f3c>
   13590:	ldr	r0, [sp, #72]	; 0x48
   13594:	adds	r3, r3, #1
   13598:	adc	r6, r6, #0
   1359c:	cmp	r0, #0
   135a0:	beq	135b8 <__assert_fail@plt+0x1e68>
   135a4:	ldr	r0, [sp, #64]	; 0x40
   135a8:	subs	r0, r0, r3
   135ac:	ldr	r0, [sp, #68]	; 0x44
   135b0:	sbcs	r0, r0, r6
   135b4:	bcc	137bc <__assert_fail@plt+0x206c>
   135b8:	ldr	r0, [sp, #100]	; 0x64
   135bc:	ldr	r1, [sp, #96]	; 0x60
   135c0:	adds	r9, r9, r2
   135c4:	adc	r7, r7, r4
   135c8:	eor	r0, r3, r0
   135cc:	eor	r1, r6, r1
   135d0:	orr	r0, r0, r1
   135d4:	ldr	r1, [sp, #72]	; 0x48
   135d8:	cmp	r0, #0
   135dc:	ldr	r0, [sp, #88]	; 0x58
   135e0:	moveq	r7, r0
   135e4:	ldr	r0, [sp, #92]	; 0x5c
   135e8:	moveq	r9, r0
   135ec:	subs	r0, r9, ip
   135f0:	sbcs	r0, r7, lr
   135f4:	mov	r0, #0
   135f8:	movwlt	r0, #1
   135fc:	cmp	r1, #0
   13600:	and	r0, r5, r0
   13604:	bne	1365c <__assert_fail@plt+0x1f0c>
   13608:	subs	r1, r9, ip
   1360c:	sbcs	r1, r7, lr
   13610:	bge	1365c <__assert_fail@plt+0x1f0c>
   13614:	mov	r0, #1
   13618:	mov	r1, #0
   1361c:	mov	r2, #0
   13620:	str	r7, [sp, #84]	; 0x54
   13624:	mov	r7, r8
   13628:	mov	sl, r3
   1362c:	mov	r4, ip
   13630:	mov	r8, lr
   13634:	bl	140a4 <__assert_fail@plt+0x2954>
   13638:	mov	lr, r8
   1363c:	mov	r8, r7
   13640:	mov	ip, r4
   13644:	mov	r3, sl
   13648:	ldr	r7, [sp, #84]	; 0x54
   1364c:	ldr	sl, [sp, #60]	; 0x3c
   13650:	ldr	r4, [sp, #52]	; 0x34
   13654:	ldr	r2, [sp, #56]	; 0x38
   13658:	mov	r0, r5
   1365c:	subs	r1, r9, ip
   13660:	mov	r5, r0
   13664:	sbcs	r1, r7, lr
   13668:	blt	13584 <__assert_fail@plt+0x1e34>
   1366c:	tst	r0, #1
   13670:	mov	r5, r0
   13674:	bne	13584 <__assert_fail@plt+0x1e34>
   13678:	str	r6, [sp, #40]	; 0x28
   1367c:	str	r3, [sp, #84]	; 0x54
   13680:	b	1369c <__assert_fail@plt+0x1f4c>
   13684:	ldr	sl, [sp, #60]	; 0x3c
   13688:	b	136a0 <__assert_fail@plt+0x1f50>
   1368c:	mov	r0, #1
   13690:	str	r6, [sp, #40]	; 0x28
   13694:	str	r3, [sp, #84]	; 0x54
   13698:	str	r0, [sp, #20]
   1369c:	ldr	r4, [sp, #48]	; 0x30
   136a0:	ldr	r3, [sp, #36]	; 0x24
   136a4:	ldr	r0, [sp, #44]	; 0x2c
   136a8:	cmp	sl, r8
   136ac:	sub	r3, r3, r0
   136b0:	bne	1345c <__assert_fail@plt+0x1d0c>
   136b4:	b	136c0 <__assert_fail@plt+0x1f70>
   136b8:	mov	r0, #0
   136bc:	str	r0, [sp, #20]
   136c0:	ldr	r0, [sp, #20]
   136c4:	ldr	r5, [sp, #76]	; 0x4c
   136c8:	ldr	r3, [sp, #84]	; 0x54
   136cc:	mvn	sl, #0
   136d0:	mov	r2, #0
   136d4:	and	r8, r0, #1
   136d8:	ldr	r0, [sp, #32]
   136dc:	subs	r0, ip, r0
   136e0:	ldr	r0, [sp, #24]
   136e4:	sbcs	r0, lr, r0
   136e8:	blt	133c8 <__assert_fail@plt+0x1c78>
   136ec:	b	136f4 <__assert_fail@plt+0x1fa4>
   136f0:	mov	r2, #0
   136f4:	ldr	r0, [sp, #40]	; 0x28
   136f8:	adds	r4, r3, r8
   136fc:	adc	r5, r0, r2
   13700:	ldr	r0, [sp, #72]	; 0x48
   13704:	cmp	r0, #0
   13708:	beq	13728 <__assert_fail@plt+0x1fd8>
   1370c:	b	137bc <__assert_fail@plt+0x206c>
   13710:	mov	r0, #1
   13714:	mov	r1, #0
   13718:	mov	r2, #0
   1371c:	bl	140a4 <__assert_fail@plt+0x2954>
   13720:	adds	r4, r4, #1
   13724:	adc	r5, r5, #0
   13728:	ldr	r0, [sp, #100]	; 0x64
   1372c:	subs	r0, r0, r4
   13730:	ldr	r0, [sp, #96]	; 0x60
   13734:	sbcs	r0, r0, r5
   13738:	bcs	13710 <__assert_fail@plt+0x1fc0>
   1373c:	b	137bc <__assert_fail@plt+0x206c>
   13740:	mov	sl, r1
   13744:	ldr	r5, [sp, #52]	; 0x34
   13748:	ldr	r7, [sp, #100]	; 0x64
   1374c:	mov	r4, #0
   13750:	mvn	r8, #1
   13754:	cmp	r4, sl
   13758:	bcc	13780 <__assert_fail@plt+0x2030>
   1375c:	movw	r0, #41872	; 0xa390
   13760:	movt	r0, #2
   13764:	ldrb	r0, [r0]
   13768:	cmp	r0, #0
   1376c:	bne	13780 <__assert_fail@plt+0x2030>
   13770:	mov	r0, r5
   13774:	mov	r1, r4
   13778:	mov	r2, r7
   1377c:	bl	149c0 <__assert_fail@plt+0x3270>
   13780:	add	r6, r5, r4, lsl #4
   13784:	ldr	r1, [r6, #4]
   13788:	cmp	r1, #0
   1378c:	blt	137a4 <__assert_fail@plt+0x2054>
   13790:	mov	r2, r5
   13794:	ldr	r3, [r2, r4, lsl #4]!
   13798:	ldr	r0, [r2, #8]
   1379c:	ldr	r2, [r2, #12]
   137a0:	bl	13e20 <__assert_fail@plt+0x26d0>
   137a4:	add	r4, r4, #1
   137a8:	str	r8, [r6, #4]
   137ac:	subs	r0, r4, r7
   137b0:	ldr	r0, [sp, #96]	; 0x60
   137b4:	rscs	r0, r0, #0
   137b8:	bcc	13754 <__assert_fail@plt+0x2004>
   137bc:	mov	r0, #0
   137c0:	bl	11738 <close@plt>
   137c4:	cmp	r0, #0
   137c8:	bne	13870 <__assert_fail@plt+0x2120>
   137cc:	movw	r0, #42252	; 0xa50c
   137d0:	movt	r0, #2
   137d4:	ldr	r3, [r0]
   137d8:	movw	r0, #42248	; 0xa508
   137dc:	movt	r0, #2
   137e0:	ldr	r2, [r0]
   137e4:	movw	r0, #41312	; 0xa160
   137e8:	movt	r0, #2
   137ec:	ldr	r1, [r0]
   137f0:	mov	r0, #0
   137f4:	bl	13e20 <__assert_fail@plt+0x26d0>
   137f8:	mov	r0, #0
   137fc:	sub	sp, fp, #28
   13800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13804:	cmn	r4, #3
   13808:	bne	13860 <__assert_fail@plt+0x2110>
   1380c:	movw	r0, #41316	; 0xa164
   13810:	movw	r2, #36883	; 0x9013
   13814:	mov	r1, #0
   13818:	movw	r7, #36865	; 0x9001
   1381c:	movt	r0, #2
   13820:	movt	r2, #1
   13824:	str	r1, [sp, #8]
   13828:	movw	r1, #36334	; 0x8dee
   1382c:	movt	r7, #1
   13830:	ldr	r3, [r0]
   13834:	movw	r0, #41836	; 0xa36c
   13838:	str	r2, [sp, #4]
   1383c:	movw	r2, #36851	; 0x8ff3
   13840:	movt	r1, #1
   13844:	str	r7, [sp]
   13848:	movt	r0, #2
   1384c:	movt	r2, #1
   13850:	ldr	r0, [r0]
   13854:	bl	1724c <__assert_fail@plt+0x5afc>
   13858:	mov	r0, #0
   1385c:	bl	115a0 <exit@plt>
   13860:	cmn	r4, #2
   13864:	bne	139a8 <__assert_fail@plt+0x2258>
   13868:	mov	r0, #0
   1386c:	bl	1184c <__assert_fail@plt+0xfc>
   13870:	bl	115f4 <__errno_location@plt>
   13874:	ldr	r4, [r0]
   13878:	movw	r0, #41848	; 0xa378
   1387c:	movt	r0, #2
   13880:	ldr	r2, [r0]
   13884:	mov	r0, #0
   13888:	mov	r1, #3
   1388c:	bl	1686c <__assert_fail@plt+0x511c>
   13890:	movw	r2, #38738	; 0x9752
   13894:	mov	r3, r0
   13898:	mov	r0, #1
   1389c:	mov	r1, r4
   138a0:	movt	r2, #1
   138a4:	bl	11528 <error@plt>
   138a8:	movw	r1, #36669	; 0x8f3d
   138ac:	mov	r0, #0
   138b0:	mov	r2, #5
   138b4:	movt	r1, #1
   138b8:	bl	11474 <dcgettext@plt>
   138bc:	mov	r6, r0
   138c0:	add	r2, sp, #104	; 0x68
   138c4:	mov	r0, r5
   138c8:	mov	r1, r8
   138cc:	bl	14fa0 <__assert_fail@plt+0x3850>
   138d0:	mov	r3, r0
   138d4:	mov	r0, #1
   138d8:	mov	r1, #0
   138dc:	mov	r2, r6
   138e0:	str	r4, [sp]
   138e4:	bl	11528 <error@plt>
   138e8:	movw	r0, #36737	; 0x8f81
   138ec:	movw	r1, #36782	; 0x8fae
   138f0:	cmp	r4, #100	; 0x64
   138f4:	movt	r0, #1
   138f8:	movt	r1, #1
   138fc:	moveq	r1, r0
   13900:	b	13974 <__assert_fail@plt+0x2224>
   13904:	movw	r1, #36574	; 0x8ede
   13908:	movt	r1, #1
   1390c:	b	13950 <__assert_fail@plt+0x2200>
   13910:	movw	r1, #36600	; 0x8ef8
   13914:	mov	r0, #0
   13918:	mov	r2, #5
   1391c:	movt	r1, #1
   13920:	bl	11474 <dcgettext@plt>
   13924:	mov	r1, r4
   13928:	mov	r4, r0
   1392c:	ldr	r0, [r1]
   13930:	bl	16a00 <__assert_fail@plt+0x52b0>
   13934:	mov	r3, r0
   13938:	mov	r0, #1
   1393c:	mov	r1, #0
   13940:	mov	r2, r4
   13944:	bl	11528 <error@plt>
   13948:	movw	r1, #36629	; 0x8f15
   1394c:	movt	r1, #1
   13950:	mov	r0, #0
   13954:	mov	r2, #5
   13958:	bl	11474 <dcgettext@plt>
   1395c:	mov	r2, r0
   13960:	mov	r0, #1
   13964:	mov	r1, #0
   13968:	bl	11528 <error@plt>
   1396c:	movw	r1, #36413	; 0x8e3d
   13970:	movt	r1, #1
   13974:	mov	r0, #0
   13978:	mov	r2, #5
   1397c:	bl	11474 <dcgettext@plt>
   13980:	mov	r4, r0
   13984:	movw	r0, #41840	; 0xa370
   13988:	movt	r0, #2
   1398c:	ldr	r0, [r0]
   13990:	bl	16a00 <__assert_fail@plt+0x52b0>
   13994:	mov	r3, r0
   13998:	mov	r0, #0
   1399c:	mov	r1, #0
   139a0:	mov	r2, r4
   139a4:	bl	11528 <error@plt>
   139a8:	mov	r0, #1
   139ac:	bl	1184c <__assert_fail@plt+0xfc>
   139b0:	bl	177bc <__assert_fail@plt+0x606c>
   139b4:	ldr	r0, [sp, #52]	; 0x34
   139b8:	ldr	r2, [r0, sl, lsl #4]
   139bc:	b	13884 <__assert_fail@plt+0x2134>
   139c0:	movw	r1, #36903	; 0x9027
   139c4:	movt	r1, #1
   139c8:	b	122f4 <__assert_fail@plt+0xba4>
   139cc:	movw	r1, #36964	; 0x9064
   139d0:	mov	r0, #0
   139d4:	mov	r2, #5
   139d8:	movt	r1, #1
   139dc:	bl	11474 <dcgettext@plt>
   139e0:	mov	r4, r0
   139e4:	ldr	r0, [r7]
   139e8:	ldr	r1, [sp, #88]	; 0x58
   139ec:	ldr	r0, [r1, r0, lsl #2]
   139f0:	b	13990 <__assert_fail@plt+0x2240>
   139f4:	bl	115f4 <__errno_location@plt>
   139f8:	ldr	r4, [r0]
   139fc:	ldr	r2, [r6]
   13a00:	b	13884 <__assert_fail@plt+0x2134>
   13a04:	bl	1172c <abort@plt>
   13a08:	movw	r0, #41836	; 0xa36c
   13a0c:	movt	r0, #2
   13a10:	ldr	r0, [r0]
   13a14:	bl	116e4 <clearerr_unlocked@plt>
   13a18:	bl	115f4 <__errno_location@plt>
   13a1c:	ldr	r4, [r0]
   13a20:	movw	r1, #38618	; 0x96da
   13a24:	mov	r0, #0
   13a28:	mov	r2, #5
   13a2c:	movt	r1, #1
   13a30:	bl	11474 <dcgettext@plt>
   13a34:	b	13890 <__assert_fail@plt+0x2140>
   13a38:	ldr	r0, [sp, #52]	; 0x34
   13a3c:	ldr	r2, [r0, r9, lsl #4]
   13a40:	ldr	r0, [sp, #48]	; 0x30
   13a44:	ldr	r4, [r0]
   13a48:	b	13884 <__assert_fail@plt+0x2134>
   13a4c:	movw	r2, #39201	; 0x9921
   13a50:	movt	r2, #1
   13a54:	b	13884 <__assert_fail@plt+0x2134>
   13a58:	movw	r1, #37947	; 0x943b
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	movt	r1, #1
   13a68:	bl	11474 <dcgettext@plt>
   13a6c:	mov	r2, r0
   13a70:	stm	sp, {r6, r7}
   13a74:	b	13960 <__assert_fail@plt+0x2210>
   13a78:	movw	r1, #36981	; 0x9075
   13a7c:	movt	r1, #1
   13a80:	b	122f4 <__assert_fail@plt+0xba4>
   13a84:	bl	115f4 <__errno_location@plt>
   13a88:	ldr	r4, [r0]
   13a8c:	movw	r1, #37045	; 0x90b5
   13a90:	mov	r0, #0
   13a94:	mov	r2, #5
   13a98:	movt	r1, #1
   13a9c:	bl	11474 <dcgettext@plt>
   13aa0:	ldr	r1, [r6]
   13aa4:	mov	r5, r0
   13aa8:	mov	r0, #4
   13aac:	bl	166c8 <__assert_fail@plt+0x4f78>
   13ab0:	b	13b00 <__assert_fail@plt+0x23b0>
   13ab4:	bl	115f4 <__errno_location@plt>
   13ab8:	ldr	r1, [r0]
   13abc:	cmp	r1, #29
   13ac0:	moveq	r1, #0
   13ac4:	streq	r1, [r0]
   13ac8:	bl	115f4 <__errno_location@plt>
   13acc:	ldr	r4, [r0]
   13ad0:	movw	r1, #37072	; 0x90d0
   13ad4:	mov	r0, #0
   13ad8:	mov	r2, #5
   13adc:	movt	r1, #1
   13ae0:	bl	11474 <dcgettext@plt>
   13ae4:	mov	r5, r0
   13ae8:	movw	r0, #41848	; 0xa378
   13aec:	mov	r1, #3
   13af0:	movt	r0, #2
   13af4:	ldr	r2, [r0]
   13af8:	mov	r0, #0
   13afc:	bl	1686c <__assert_fail@plt+0x511c>
   13b00:	mov	r3, r0
   13b04:	mov	r0, #1
   13b08:	mov	r1, r4
   13b0c:	mov	r2, r5
   13b10:	bl	11528 <error@plt>
   13b14:	movw	r1, #36549	; 0x8ec5
   13b18:	mov	r0, #0
   13b1c:	mov	r2, #5
   13b20:	movt	r1, #1
   13b24:	bl	11474 <dcgettext@plt>
   13b28:	mov	r4, r0
   13b2c:	add	r2, sp, #104	; 0x68
   13b30:	mov	r0, r9
   13b34:	mov	r1, r6
   13b38:	bl	14fa0 <__assert_fail@plt+0x3850>
   13b3c:	bl	16a00 <__assert_fail@plt+0x52b0>
   13b40:	movw	r2, #36957	; 0x905d
   13b44:	str	r0, [sp]
   13b48:	mov	r0, #1
   13b4c:	mov	r1, #75	; 0x4b
   13b50:	mov	r3, r4
   13b54:	movt	r2, #1
   13b58:	bl	11528 <error@plt>
   13b5c:	movw	r0, #38434	; 0x9622
   13b60:	movw	r1, #37999	; 0x946f
   13b64:	movw	r3, #38542	; 0x968e
   13b68:	movw	r2, #867	; 0x363
   13b6c:	movt	r0, #1
   13b70:	movt	r1, #1
   13b74:	movt	r3, #1
   13b78:	bl	11750 <__assert_fail@plt>
   13b7c:	movw	r0, #38429	; 0x961d
   13b80:	movw	r1, #37999	; 0x946f
   13b84:	movw	r3, #38464	; 0x9640
   13b88:	mov	r2, #996	; 0x3e4
   13b8c:	movt	r0, #1
   13b90:	movt	r1, #1
   13b94:	movt	r3, #1
   13b98:	bl	11750 <__assert_fail@plt>
   13b9c:	bl	115f4 <__errno_location@plt>
   13ba0:	mov	r1, #75	; 0x4b
   13ba4:	str	r1, [r0]
   13ba8:	b	13ac8 <__assert_fail@plt+0x2378>
   13bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bb0:	add	fp, sp, #28
   13bb4:	sub	sp, sp, #36	; 0x24
   13bb8:	str	r2, [sp, #12]
   13bbc:	ldr	r2, [fp, #16]
   13bc0:	mov	r7, r0
   13bc4:	ldr	r0, [fp, #20]
   13bc8:	ldr	r6, [fp, #8]
   13bcc:	str	r3, [sp, #8]
   13bd0:	mov	r8, #0
   13bd4:	mov	r4, #1
   13bd8:	mov	r5, #1
   13bdc:	mov	r3, r1
   13be0:	mov	sl, #0
   13be4:	str	r1, [sp, #32]
   13be8:	str	r7, [sp, #28]
   13bec:	subs	r2, r2, #1
   13bf0:	sbc	r0, r0, #0
   13bf4:	str	r2, [sp, #24]
   13bf8:	str	r0, [sp, #20]
   13bfc:	cmn	r6, #1
   13c00:	beq	13c18 <__assert_fail@plt+0x24c8>
   13c04:	ldr	r0, [sp, #8]
   13c08:	cmp	r6, r0
   13c0c:	mov	r0, #0
   13c10:	movwcc	r0, #1
   13c14:	b	13c90 <__assert_fail@plt+0x2540>
   13c18:	tst	r5, #1
   13c1c:	beq	13c28 <__assert_fail@plt+0x24d8>
   13c20:	mov	r9, r3
   13c24:	b	13c68 <__assert_fail@plt+0x2518>
   13c28:	mov	r0, #1
   13c2c:	mov	r2, r7
   13c30:	mov	r6, r3
   13c34:	str	r0, [sp]
   13c38:	mov	r0, #0
   13c3c:	bl	114d4 <lseek64@plt>
   13c40:	and	r0, r0, r1
   13c44:	add	r1, r0, #1
   13c48:	cmn	r0, #1
   13c4c:	ldr	r0, [sp, #32]
   13c50:	movwne	r1, #1
   13c54:	orr	r4, r4, r1
   13c58:	movne	r6, r0
   13c5c:	ldr	r0, [sp, #28]
   13c60:	mov	r9, r6
   13c64:	movne	r7, r0
   13c68:	ldr	r1, [sp, #12]
   13c6c:	ldr	r2, [sp, #8]
   13c70:	mov	r0, #0
   13c74:	bl	16b38 <__assert_fail@plt+0x53e8>
   13c78:	cmn	r0, #1
   13c7c:	beq	13de8 <__assert_fail@plt+0x2698>
   13c80:	mov	r6, r0
   13c84:	clz	r0, r0
   13c88:	mov	r3, r9
   13c8c:	lsr	r0, r0, #5
   13c90:	str	r0, [sp, #16]
   13c94:	subs	r0, r6, r7
   13c98:	rscs	r0, r3, #0
   13c9c:	bcs	13ca8 <__assert_fail@plt+0x2558>
   13ca0:	ldr	r9, [sp, #12]
   13ca4:	b	13d28 <__assert_fail@plt+0x25d8>
   13ca8:	ldr	r9, [sp, #12]
   13cac:	tst	r4, #1
   13cb0:	bne	13cc0 <__assert_fail@plt+0x2570>
   13cb4:	tst	r5, #1
   13cb8:	mov	r5, #0
   13cbc:	beq	13cd4 <__assert_fail@plt+0x2584>
   13cc0:	and	r0, r4, #1
   13cc4:	mov	r1, r9
   13cc8:	mov	r2, r7
   13ccc:	bl	140a4 <__assert_fail@plt+0x2954>
   13cd0:	mov	r5, r0
   13cd4:	and	r0, r4, #1
   13cd8:	mov	r4, #0
   13cdc:	adds	r8, r8, r0
   13ce0:	ldr	r0, [sp, #24]
   13ce4:	adc	sl, sl, #0
   13ce8:	subs	r0, r0, r8
   13cec:	ldr	r0, [sp, #20]
   13cf0:	sbcs	r0, r0, sl
   13cf4:	movwcs	r4, #1
   13cf8:	cmp	r4, #0
   13cfc:	cmpeq	r5, #0
   13d00:	beq	13dac <__assert_fail@plt+0x265c>
   13d04:	add	r9, r9, r7
   13d08:	sub	r6, r6, r7
   13d0c:	ldr	r7, [sp, #28]
   13d10:	subs	r0, r6, r7
   13d14:	ldr	r0, [sp, #32]
   13d18:	rscs	r0, r0, #0
   13d1c:	bcs	13cac <__assert_fail@plt+0x255c>
   13d20:	ldr	r7, [sp, #28]
   13d24:	ldr	r3, [sp, #32]
   13d28:	cmp	r6, #0
   13d2c:	beq	13d94 <__assert_fail@plt+0x2644>
   13d30:	orr	r0, r4, r5
   13d34:	mov	r5, #0
   13d38:	tst	r0, #1
   13d3c:	beq	13d5c <__assert_fail@plt+0x260c>
   13d40:	and	r0, r4, #1
   13d44:	mov	r1, r9
   13d48:	mov	r2, r6
   13d4c:	mov	r5, r3
   13d50:	bl	140a4 <__assert_fail@plt+0x2954>
   13d54:	mov	r3, r5
   13d58:	mov	r5, r0
   13d5c:	ldr	r9, [fp, #16]
   13d60:	ldr	r1, [fp, #20]
   13d64:	and	r0, r4, #1
   13d68:	adds	r8, r8, r0
   13d6c:	adc	sl, sl, #0
   13d70:	eor	r0, r8, r9
   13d74:	eor	r1, sl, r1
   13d78:	orrs	r0, r0, r1
   13d7c:	cmpeq	r5, #0
   13d80:	beq	13de0 <__assert_fail@plt+0x2690>
   13d84:	subs	r7, r7, r6
   13d88:	mov	r4, #0
   13d8c:	sbc	r3, r3, #0
   13d90:	b	13d98 <__assert_fail@plt+0x2648>
   13d94:	ldr	r9, [fp, #16]
   13d98:	ldr	r0, [sp, #16]
   13d9c:	mvn	r6, #0
   13da0:	cmp	r0, #0
   13da4:	beq	13bfc <__assert_fail@plt+0x24ac>
   13da8:	b	13db0 <__assert_fail@plt+0x2660>
   13dac:	ldr	r9, [fp, #16]
   13db0:	ldr	r4, [fp, #20]
   13db4:	subs	r0, r8, r9
   13db8:	b	13dd8 <__assert_fail@plt+0x2688>
   13dbc:	mov	r0, #1
   13dc0:	mov	r1, #0
   13dc4:	mov	r2, #0
   13dc8:	bl	140a4 <__assert_fail@plt+0x2954>
   13dcc:	adds	r8, r8, #1
   13dd0:	adc	sl, sl, #0
   13dd4:	subs	r0, r8, r9
   13dd8:	sbcs	r0, sl, r4
   13ddc:	bcc	13dbc <__assert_fail@plt+0x266c>
   13de0:	sub	sp, fp, #28
   13de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de8:	bl	115f4 <__errno_location@plt>
   13dec:	ldr	r4, [r0]
   13df0:	movw	r0, #41848	; 0xa378
   13df4:	mov	r1, #3
   13df8:	movt	r0, #2
   13dfc:	ldr	r2, [r0]
   13e00:	mov	r0, #0
   13e04:	bl	1686c <__assert_fail@plt+0x511c>
   13e08:	movw	r2, #38738	; 0x9752
   13e0c:	mov	r3, r0
   13e10:	mov	r0, #1
   13e14:	mov	r1, r4
   13e18:	movt	r2, #1
   13e1c:	bl	11528 <error@plt>
   13e20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e24:	add	fp, sp, #24
   13e28:	sub	sp, sp, #32
   13e2c:	mov	r8, r3
   13e30:	mov	r5, r2
   13e34:	mov	r6, r1
   13e38:	mov	r7, r0
   13e3c:	cmp	r0, #0
   13e40:	beq	13e78 <__assert_fail@plt+0x2728>
   13e44:	mov	r0, r7
   13e48:	bl	14cbc <__assert_fail@plt+0x356c>
   13e4c:	cmp	r0, #0
   13e50:	beq	13e78 <__assert_fail@plt+0x2728>
   13e54:	bl	115f4 <__errno_location@plt>
   13e58:	ldr	r4, [r0]
   13e5c:	cmp	r4, #32
   13e60:	bne	14058 <__assert_fail@plt+0x2908>
   13e64:	movw	r0, #41876	; 0xa394
   13e68:	movt	r0, #2
   13e6c:	ldr	r0, [r0]
   13e70:	cmp	r0, #0
   13e74:	beq	14058 <__assert_fail@plt+0x2908>
   13e78:	cmp	r6, #0
   13e7c:	blt	13ee8 <__assert_fail@plt+0x2798>
   13e80:	cmp	r7, #0
   13e84:	bne	13e98 <__assert_fail@plt+0x2748>
   13e88:	mov	r0, r6
   13e8c:	bl	11738 <close@plt>
   13e90:	cmn	r0, #1
   13e94:	ble	14050 <__assert_fail@plt+0x2900>
   13e98:	movw	r0, #42280	; 0xa528
   13e9c:	movt	r0, #2
   13ea0:	ldr	r1, [r0]
   13ea4:	cmp	r1, #0
   13ea8:	beq	13ee8 <__assert_fail@plt+0x2798>
   13eac:	movw	r2, #42284	; 0xa52c
   13eb0:	mov	r3, #0
   13eb4:	movt	r2, #2
   13eb8:	ldr	r2, [r2]
   13ebc:	ldr	r7, [r2, r3, lsl #2]
   13ec0:	cmp	r7, r6
   13ec4:	beq	13ed8 <__assert_fail@plt+0x2788>
   13ec8:	add	r3, r3, #1
   13ecc:	cmp	r3, r1
   13ed0:	bcc	13ebc <__assert_fail@plt+0x276c>
   13ed4:	b	13ee8 <__assert_fail@plt+0x2798>
   13ed8:	sub	r1, r1, #1
   13edc:	str	r1, [r0]
   13ee0:	ldr	r0, [r2, r1, lsl #2]
   13ee4:	str	r0, [r2, r3, lsl #2]
   13ee8:	cmp	r5, #1
   13eec:	blt	14020 <__assert_fail@plt+0x28d0>
   13ef0:	mov	r0, #0
   13ef4:	add	r1, sp, #28
   13ef8:	mov	r2, #0
   13efc:	str	r0, [sp, #28]
   13f00:	mov	r0, r5
   13f04:	bl	114e0 <waitpid@plt>
   13f08:	cmn	r0, #1
   13f0c:	bne	13f20 <__assert_fail@plt+0x27d0>
   13f10:	bl	115f4 <__errno_location@plt>
   13f14:	ldr	r4, [r0]
   13f18:	cmp	r4, #10
   13f1c:	bne	14080 <__assert_fail@plt+0x2930>
   13f20:	ldr	r0, [sp, #28]
   13f24:	mov	r1, #16777216	; 0x1000000
   13f28:	and	r5, r0, #127	; 0x7f
   13f2c:	add	r1, r1, r5, lsl #24
   13f30:	cmp	r1, #33554432	; 0x2000000
   13f34:	blt	13fbc <__assert_fail@plt+0x286c>
   13f38:	cmp	r5, #13
   13f3c:	beq	14020 <__assert_fail@plt+0x28d0>
   13f40:	add	r6, sp, #9
   13f44:	mov	r0, r5
   13f48:	mov	r1, r6
   13f4c:	bl	16d6c <__assert_fail@plt+0x561c>
   13f50:	cmp	r0, #0
   13f54:	beq	13f74 <__assert_fail@plt+0x2824>
   13f58:	movw	r3, #38658	; 0x9702
   13f5c:	add	r0, sp, #9
   13f60:	mov	r1, #1
   13f64:	mov	r2, #19
   13f68:	str	r5, [sp]
   13f6c:	movt	r3, #1
   13f70:	bl	11600 <__sprintf_chk@plt>
   13f74:	movw	r1, #38661	; 0x9705
   13f78:	mov	r0, #0
   13f7c:	mov	r2, #5
   13f80:	movt	r1, #1
   13f84:	bl	11474 <dcgettext@plt>
   13f88:	mov	r4, r0
   13f8c:	mov	r0, #0
   13f90:	mov	r1, #3
   13f94:	mov	r2, r8
   13f98:	bl	1686c <__assert_fail@plt+0x511c>
   13f9c:	mov	r3, r0
   13fa0:	movw	r0, #41876	; 0xa394
   13fa4:	str	r6, [sp]
   13fa8:	movt	r0, #2
   13fac:	ldr	r0, [r0]
   13fb0:	str	r0, [sp, #4]
   13fb4:	orr	r0, r5, #128	; 0x80
   13fb8:	b	14014 <__assert_fail@plt+0x28c4>
   13fbc:	cmp	r5, #0
   13fc0:	bne	14028 <__assert_fail@plt+0x28d8>
   13fc4:	ubfx	r5, r0, #8, #8
   13fc8:	cmp	r5, #0
   13fcc:	beq	14020 <__assert_fail@plt+0x28d0>
   13fd0:	movw	r1, #38702	; 0x972e
   13fd4:	mov	r0, #0
   13fd8:	mov	r2, #5
   13fdc:	movt	r1, #1
   13fe0:	bl	11474 <dcgettext@plt>
   13fe4:	mov	r4, r0
   13fe8:	mov	r0, #0
   13fec:	mov	r1, #3
   13ff0:	mov	r2, r8
   13ff4:	bl	1686c <__assert_fail@plt+0x511c>
   13ff8:	mov	r3, r0
   13ffc:	movw	r0, #41876	; 0xa394
   14000:	str	r5, [sp]
   14004:	movt	r0, #2
   14008:	ldr	r0, [r0]
   1400c:	str	r0, [sp, #4]
   14010:	mov	r0, r5
   14014:	mov	r1, #0
   14018:	mov	r2, r4
   1401c:	bl	11528 <error@plt>
   14020:	sub	sp, fp, #24
   14024:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14028:	movw	r1, #38741	; 0x9755
   1402c:	mov	r0, #0
   14030:	mov	r2, #5
   14034:	movt	r1, #1
   14038:	bl	11474 <dcgettext@plt>
   1403c:	ldr	r3, [sp, #28]
   14040:	mov	r2, r0
   14044:	mov	r0, #1
   14048:	mov	r1, #0
   1404c:	bl	11528 <error@plt>
   14050:	bl	115f4 <__errno_location@plt>
   14054:	ldr	r4, [r0]
   14058:	mov	r0, #0
   1405c:	mov	r1, #3
   14060:	mov	r2, r8
   14064:	bl	1686c <__assert_fail@plt+0x511c>
   14068:	movw	r2, #38738	; 0x9752
   1406c:	mov	r3, r0
   14070:	mov	r0, #1
   14074:	mov	r1, r4
   14078:	movt	r2, #1
   1407c:	bl	11528 <error@plt>
   14080:	movw	r1, #38632	; 0x96e8
   14084:	mov	r0, #0
   14088:	mov	r2, #5
   1408c:	movt	r1, #1
   14090:	bl	11474 <dcgettext@plt>
   14094:	mov	r2, r0
   14098:	mov	r0, #1
   1409c:	mov	r1, r4
   140a0:	bl	11528 <error@plt>
   140a4:	push	{r4, r5, r6, r7, fp, lr}
   140a8:	add	fp, sp, #16
   140ac:	mov	r4, r2
   140b0:	mov	r5, r1
   140b4:	cmp	r0, #0
   140b8:	beq	14134 <__assert_fail@plt+0x29e4>
   140bc:	cmp	r5, #0
   140c0:	cmpeq	r4, #0
   140c4:	bne	140e0 <__assert_fail@plt+0x2990>
   140c8:	movw	r0, #41872	; 0xa390
   140cc:	movt	r0, #2
   140d0:	ldrb	r1, [r0]
   140d4:	mov	r0, #1
   140d8:	cmp	r1, #0
   140dc:	popne	{r4, r5, r6, r7, fp, pc}
   140e0:	movw	r6, #42252	; 0xa50c
   140e4:	movw	r0, #42248	; 0xa508
   140e8:	movw	r7, #41312	; 0xa160
   140ec:	movt	r6, #2
   140f0:	movt	r0, #2
   140f4:	movt	r7, #2
   140f8:	ldr	r2, [r0]
   140fc:	ldr	r3, [r6]
   14100:	ldr	r1, [r7]
   14104:	mov	r0, #0
   14108:	bl	13e20 <__assert_fail@plt+0x26d0>
   1410c:	bl	141b8 <__assert_fail@plt+0x2a68>
   14110:	ldr	r0, [r6]
   14114:	bl	14504 <__assert_fail@plt+0x2db4>
   14118:	cmn	r0, #1
   1411c:	str	r0, [r7]
   14120:	bgt	14140 <__assert_fail@plt+0x29f0>
   14124:	bl	115f4 <__errno_location@plt>
   14128:	ldr	r4, [r0]
   1412c:	ldr	r2, [r6]
   14130:	b	14194 <__assert_fail@plt+0x2a44>
   14134:	movw	r0, #41312	; 0xa160
   14138:	movt	r0, #2
   1413c:	ldr	r0, [r0]
   14140:	mov	r1, r5
   14144:	mov	r2, r4
   14148:	bl	14f30 <__assert_fail@plt+0x37e0>
   1414c:	mov	r1, r0
   14150:	mov	r0, #1
   14154:	cmp	r1, r4
   14158:	beq	14184 <__assert_fail@plt+0x2a34>
   1415c:	bl	115f4 <__errno_location@plt>
   14160:	ldr	r4, [r0]
   14164:	cmp	r4, #32
   14168:	bne	14188 <__assert_fail@plt+0x2a38>
   1416c:	movw	r0, #41876	; 0xa394
   14170:	movt	r0, #2
   14174:	ldr	r1, [r0]
   14178:	mov	r0, #0
   1417c:	cmp	r1, #0
   14180:	beq	14188 <__assert_fail@plt+0x2a38>
   14184:	pop	{r4, r5, r6, r7, fp, pc}
   14188:	movw	r0, #42252	; 0xa50c
   1418c:	movt	r0, #2
   14190:	ldr	r2, [r0]
   14194:	mov	r0, #0
   14198:	mov	r1, #3
   1419c:	bl	1686c <__assert_fail@plt+0x511c>
   141a0:	movw	r2, #38738	; 0x9752
   141a4:	mov	r3, r0
   141a8:	mov	r0, #1
   141ac:	mov	r1, r4
   141b0:	movt	r2, #1
   141b4:	bl	11528 <error@plt>
   141b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141bc:	add	fp, sp, #28
   141c0:	sub	sp, sp, #4
   141c4:	movw	r9, #42252	; 0xa50c
   141c8:	movt	r9, #2
   141cc:	ldr	sl, [r9]
   141d0:	cmp	sl, #0
   141d4:	beq	142b4 <__assert_fail@plt+0x2b64>
   141d8:	movw	r0, #41856	; 0xa380
   141dc:	movt	r0, #2
   141e0:	ldr	r0, [r0]
   141e4:	cmp	r0, #0
   141e8:	beq	14290 <__assert_fail@plt+0x2b40>
   141ec:	movw	r7, #42256	; 0xa510
   141f0:	movw	r1, #42276	; 0xa524
   141f4:	movw	r2, #41308	; 0xa15c
   141f8:	movw	r3, #42260	; 0xa514
   141fc:	rsb	r4, r0, #1
   14200:	mov	r5, #0
   14204:	movt	r7, #2
   14208:	movt	r1, #2
   1420c:	movt	r2, #2
   14210:	movt	r3, #2
   14214:	ldrb	r7, [r7]
   14218:	ldr	r1, [r1]
   1421c:	ldr	r2, [r2]
   14220:	ldr	r3, [r3]
   14224:	eor	r7, r7, #1
   14228:	mvn	r7, r7
   1422c:	ldr	r6, [r3, -r4, lsl #2]
   14230:	cmp	r4, #0
   14234:	mov	r0, r4
   14238:	movwne	r0, #1
   1423c:	orr	r0, r0, r7
   14240:	tst	r0, #1
   14244:	add	r6, r6, #1
   14248:	str	r6, [r3, -r4, lsl #2]
   1424c:	bne	14264 <__assert_fail@plt+0x2b14>
   14250:	ldr	r0, [r3]
   14254:	add	r0, r2, r0
   14258:	ldrb	r0, [r0, #1]
   1425c:	cmp	r0, #0
   14260:	beq	142b4 <__assert_fail@plt+0x2b64>
   14264:	ldrb	r0, [r2, r6]
   14268:	cmp	r0, #0
   1426c:	strb	r0, [r1, -r4]
   14270:	bne	144d8 <__assert_fail@plt+0x2d88>
   14274:	rsb	r0, r4, #0
   14278:	str	r5, [r3, r0, lsl #2]
   1427c:	ldrb	r0, [r2]
   14280:	strb	r0, [r1, -r4]
   14284:	add	r4, r4, #1
   14288:	cmp	r4, #1
   1428c:	bne	1422c <__assert_fail@plt+0x2adc>
   14290:	movw	r1, #38037	; 0x9495
   14294:	mov	r0, #0
   14298:	mov	r2, #5
   1429c:	movt	r1, #1
   142a0:	bl	11474 <dcgettext@plt>
   142a4:	mov	r2, r0
   142a8:	mov	r0, #1
   142ac:	mov	r1, #0
   142b0:	bl	11528 <error@plt>
   142b4:	movw	r8, #42268	; 0xa51c
   142b8:	movt	r8, #2
   142bc:	ldr	r7, [r8]
   142c0:	cmp	r7, #0
   142c4:	beq	142f4 <__assert_fail@plt+0x2ba4>
   142c8:	movw	r1, #41856	; 0xa380
   142cc:	add	r0, r7, #2
   142d0:	movt	r1, #2
   142d4:	str	r0, [r8]
   142d8:	ldr	r2, [r1]
   142dc:	add	r2, r2, #1
   142e0:	str	r2, [r1]
   142e4:	movw	r1, #42264	; 0xa518
   142e8:	movt	r1, #2
   142ec:	ldr	r5, [r1]
   142f0:	b	14358 <__assert_fail@plt+0x2c08>
   142f4:	movw	r0, #41852	; 0xa37c
   142f8:	movt	r0, #2
   142fc:	ldr	r0, [r0]
   14300:	bl	115ac <strlen@plt>
   14304:	mov	r5, r0
   14308:	movw	r0, #42264	; 0xa518
   1430c:	movt	r0, #2
   14310:	str	r5, [r0]
   14314:	movw	r0, #41860	; 0xa384
   14318:	movt	r0, #2
   1431c:	ldr	r0, [r0]
   14320:	cmp	r0, #0
   14324:	beq	14330 <__assert_fail@plt+0x2be0>
   14328:	bl	115ac <strlen@plt>
   1432c:	b	14334 <__assert_fail@plt+0x2be4>
   14330:	mov	r0, #0
   14334:	movw	r1, #42272	; 0xa520
   14338:	movt	r1, #2
   1433c:	str	r0, [r1]
   14340:	movw	r1, #41856	; 0xa380
   14344:	add	r0, r0, r5
   14348:	movt	r1, #2
   1434c:	ldr	r1, [r1]
   14350:	add	r0, r0, r1
   14354:	str	r0, [r8]
   14358:	add	r1, r0, #1
   1435c:	cmp	r1, r5
   14360:	bcc	144e0 <__assert_fail@plt+0x2d90>
   14364:	mov	r0, sl
   14368:	bl	173b4 <__assert_fail@plt+0x5c64>
   1436c:	mov	r4, r0
   14370:	cmp	r7, #0
   14374:	str	r0, [r9]
   14378:	beq	143b8 <__assert_fail@plt+0x2c68>
   1437c:	movw	r1, #42260	; 0xa514
   14380:	movw	r0, #41308	; 0xa15c
   14384:	movw	r2, #42264	; 0xa518
   14388:	movt	r1, #2
   1438c:	movt	r0, #2
   14390:	movt	r2, #2
   14394:	ldr	r1, [r1]
   14398:	ldr	r0, [r0]
   1439c:	ldr	r3, [r2]
   143a0:	ldr	r1, [r1]
   143a4:	add	r5, r3, #1
   143a8:	ldrb	r1, [r0, r1]
   143ac:	strb	r1, [r4, r3]
   143b0:	str	r5, [r2]
   143b4:	b	143e8 <__assert_fail@plt+0x2c98>
   143b8:	movw	r0, #42264	; 0xa518
   143bc:	movt	r0, #2
   143c0:	ldr	r5, [r0]
   143c4:	movw	r0, #41852	; 0xa37c
   143c8:	movt	r0, #2
   143cc:	ldr	r1, [r0]
   143d0:	mov	r0, r4
   143d4:	mov	r2, r5
   143d8:	bl	11438 <memcpy@plt>
   143dc:	movw	r0, #41308	; 0xa15c
   143e0:	movt	r0, #2
   143e4:	ldr	r0, [r0]
   143e8:	movw	r9, #42276	; 0xa524
   143ec:	movw	sl, #41856	; 0xa380
   143f0:	add	r5, r4, r5
   143f4:	movt	r9, #2
   143f8:	movt	sl, #2
   143fc:	str	r5, [r9]
   14400:	ldr	r6, [sl]
   14404:	ldrb	r1, [r0]
   14408:	mov	r0, r5
   1440c:	mov	r2, r6
   14410:	bl	11618 <memset@plt>
   14414:	movw	r0, #41860	; 0xa384
   14418:	movt	r0, #2
   1441c:	ldr	r1, [r0]
   14420:	cmp	r1, #0
   14424:	beq	1443c <__assert_fail@plt+0x2cec>
   14428:	movw	r2, #42272	; 0xa520
   1442c:	add	r0, r5, r6
   14430:	movt	r2, #2
   14434:	ldr	r2, [r2]
   14438:	bl	11438 <memcpy@plt>
   1443c:	ldr	r0, [r8]
   14440:	mov	r1, #0
   14444:	strb	r1, [r4, r0]
   14448:	movw	r4, #42260	; 0xa514
   1444c:	movt	r4, #2
   14450:	ldr	r0, [r4]
   14454:	bl	14e64 <__assert_fail@plt+0x3714>
   14458:	ldr	r0, [sl]
   1445c:	mov	r1, #4
   14460:	bl	17670 <__assert_fail@plt+0x5f20>
   14464:	mov	r5, r0
   14468:	str	r0, [r4]
   1446c:	movw	r0, #41868	; 0xa38c
   14470:	movt	r0, #2
   14474:	ldr	r6, [r0]
   14478:	cmp	r6, #0
   1447c:	beq	144d8 <__assert_fail@plt+0x2d88>
   14480:	cmp	r7, #0
   14484:	bne	144e4 <__assert_fail@plt+0x2d94>
   14488:	mov	r0, r6
   1448c:	bl	115ac <strlen@plt>
   14490:	mov	r4, r0
   14494:	ldr	r7, [sl]
   14498:	ldr	r0, [r9]
   1449c:	mov	r1, r6
   144a0:	mov	r2, r4
   144a4:	add	r0, r0, r7
   144a8:	sub	r0, r0, r4
   144ac:	bl	11438 <memcpy@plt>
   144b0:	cmp	r4, #0
   144b4:	beq	144d8 <__assert_fail@plt+0x2d88>
   144b8:	add	r0, r5, r7, lsl #2
   144bc:	sub	r1, r6, #1
   144c0:	sub	r0, r0, #4
   144c4:	ldrb	r2, [r1, r4]
   144c8:	subs	r4, r4, #1
   144cc:	sub	r2, r2, #48	; 0x30
   144d0:	str	r2, [r0], #-4
   144d4:	bne	144c4 <__assert_fail@plt+0x2d74>
   144d8:	sub	sp, fp, #28
   144dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e0:	bl	177bc <__assert_fail@plt+0x606c>
   144e4:	movw	r0, #37991	; 0x9467
   144e8:	movw	r1, #37999	; 0x946f
   144ec:	movw	r3, #38011	; 0x947b
   144f0:	movw	r2, #409	; 0x199
   144f4:	movt	r0, #1
   144f8:	movt	r1, #1
   144fc:	movt	r3, #1
   14500:	bl	11750 <__assert_fail@plt>
   14504:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14508:	add	fp, sp, #24
   1450c:	sub	sp, sp, #112	; 0x70
   14510:	movw	r8, #41876	; 0xa394
   14514:	mov	r4, r0
   14518:	movt	r8, #2
   1451c:	ldr	r0, [r8]
   14520:	cmp	r0, #0
   14524:	beq	1464c <__assert_fail@plt+0x2efc>
   14528:	movw	r0, #38160	; 0x9510
   1452c:	movt	r0, #1
   14530:	bl	11540 <getenv@plt>
   14534:	mov	r6, r0
   14538:	movw	r0, #38174	; 0x951e
   1453c:	mov	r1, r4
   14540:	mov	r2, #1
   14544:	movt	r0, #1
   14548:	bl	115d0 <setenv@plt>
   1454c:	movw	r5, #38166	; 0x9516
   14550:	cmp	r6, #0
   14554:	movt	r5, #1
   14558:	movne	r5, r6
   1455c:	cmp	r0, #0
   14560:	bne	148f8 <__assert_fail@plt+0x31a8>
   14564:	movw	r0, #41880	; 0xa398
   14568:	movt	r0, #2
   1456c:	ldrb	r0, [r0]
   14570:	cmp	r0, #1
   14574:	bne	145c0 <__assert_fail@plt+0x2e70>
   14578:	movw	r0, #41836	; 0xa36c
   1457c:	movw	r1, #38219	; 0x954b
   14580:	mov	r2, #5
   14584:	movt	r0, #2
   14588:	movt	r1, #1
   1458c:	ldr	r6, [r0]
   14590:	mov	r0, #0
   14594:	bl	11474 <dcgettext@plt>
   14598:	mov	r7, r0
   1459c:	mov	r0, #0
   145a0:	mov	r1, #3
   145a4:	mov	r2, r4
   145a8:	bl	1686c <__assert_fail@plt+0x511c>
   145ac:	mov	r3, r0
   145b0:	mov	r0, r6
   145b4:	mov	r1, #1
   145b8:	mov	r2, r7
   145bc:	bl	11654 <__fprintf_chk@plt>
   145c0:	add	r0, sp, #8
   145c4:	bl	11678 <pipe@plt>
   145c8:	cmp	r0, #0
   145cc:	bne	1490c <__assert_fail@plt+0x31bc>
   145d0:	bl	116b4 <fork@plt>
   145d4:	cmp	r0, #0
   145d8:	beq	14770 <__assert_fail@plt+0x3020>
   145dc:	mov	r4, r0
   145e0:	cmn	r0, #1
   145e4:	beq	14920 <__assert_fail@plt+0x31d0>
   145e8:	ldr	r0, [sp, #8]
   145ec:	bl	11738 <close@plt>
   145f0:	cmp	r0, #0
   145f4:	bne	14934 <__assert_fail@plt+0x31e4>
   145f8:	movw	r0, #42248	; 0xa508
   145fc:	movt	r0, #2
   14600:	str	r4, [r0]
   14604:	movw	r4, #42280	; 0xa528
   14608:	movw	r0, #42288	; 0xa530
   1460c:	movt	r0, #2
   14610:	movt	r4, #2
   14614:	ldr	r1, [r4]
   14618:	ldr	r0, [r0]
   1461c:	cmp	r1, r0
   14620:	bne	14844 <__assert_fail@plt+0x30f4>
   14624:	movw	r5, #42284	; 0xa52c
   14628:	movw	r1, #42288	; 0xa530
   1462c:	mov	r2, #4
   14630:	movt	r5, #2
   14634:	movt	r1, #2
   14638:	ldr	r0, [r5]
   1463c:	bl	17478 <__assert_fail@plt+0x5d28>
   14640:	ldr	r1, [r4]
   14644:	str	r0, [r5]
   14648:	b	14850 <__assert_fail@plt+0x3100>
   1464c:	movw	r0, #41880	; 0xa398
   14650:	movt	r0, #2
   14654:	ldrb	r0, [r0]
   14658:	cmp	r0, #1
   1465c:	bne	146a4 <__assert_fail@plt+0x2f54>
   14660:	movw	r0, #41836	; 0xa36c
   14664:	movw	r1, #38068	; 0x94b4
   14668:	mov	r2, #5
   1466c:	movt	r0, #2
   14670:	movt	r1, #1
   14674:	ldr	r5, [r0]
   14678:	mov	r0, #0
   1467c:	bl	11474 <dcgettext@plt>
   14680:	mov	r6, r0
   14684:	mov	r0, #4
   14688:	mov	r1, r4
   1468c:	bl	166c8 <__assert_fail@plt+0x4f78>
   14690:	mov	r3, r0
   14694:	mov	r0, r5
   14698:	mov	r1, #1
   1469c:	mov	r2, r6
   146a0:	bl	11654 <__fprintf_chk@plt>
   146a4:	mov	r0, r4
   146a8:	mov	r1, #65	; 0x41
   146ac:	movw	r2, #438	; 0x1b6
   146b0:	bl	14d58 <__assert_fail@plt+0x3608>
   146b4:	mov	r5, r0
   146b8:	cmp	r0, #0
   146bc:	blt	14864 <__assert_fail@plt+0x3114>
   146c0:	add	r1, sp, #8
   146c4:	mov	r0, r5
   146c8:	bl	186ac <__assert_fail@plt+0x6f5c>
   146cc:	cmp	r0, #0
   146d0:	bne	14948 <__assert_fail@plt+0x31f8>
   146d4:	movw	r0, #41888	; 0xa3a0
   146d8:	ldr	r1, [sp, #104]	; 0x68
   146dc:	ldr	r7, [sp, #108]	; 0x6c
   146e0:	movt	r0, #2
   146e4:	ldrd	r2, [r0, #96]	; 0x60
   146e8:	eor	r3, r3, r7
   146ec:	eor	r1, r2, r1
   146f0:	orrs	r1, r1, r3
   146f4:	bne	14714 <__assert_fail@plt+0x2fc4>
   146f8:	ldrd	r0, [r0]
   146fc:	ldr	r2, [sp, #8]
   14700:	ldr	r3, [sp, #12]
   14704:	eor	r1, r1, r3
   14708:	eor	r0, r0, r2
   1470c:	orrs	r0, r0, r1
   14710:	beq	14988 <__assert_fail@plt+0x3238>
   14714:	mov	r0, r5
   14718:	mov	r2, #0
   1471c:	mov	r3, #0
   14720:	bl	11450 <ftruncate64@plt>
   14724:	cmp	r0, #0
   14728:	beq	14864 <__assert_fail@plt+0x3114>
   1472c:	ldr	r0, [sp, #24]
   14730:	and	r0, r0, #61440	; 0xf000
   14734:	cmp	r0, #32768	; 0x8000
   14738:	bne	14864 <__assert_fail@plt+0x3114>
   1473c:	bl	115f4 <__errno_location@plt>
   14740:	ldr	r5, [r0]
   14744:	movw	r1, #38139	; 0x94fb
   14748:	mov	r0, #0
   1474c:	mov	r2, #5
   14750:	movt	r1, #1
   14754:	bl	11474 <dcgettext@plt>
   14758:	mov	r6, r0
   1475c:	mov	r0, #0
   14760:	mov	r1, #3
   14764:	mov	r2, r4
   14768:	bl	1686c <__assert_fail@plt+0x511c>
   1476c:	b	14974 <__assert_fail@plt+0x3224>
   14770:	movw	r4, #42280	; 0xa528
   14774:	movt	r4, #2
   14778:	ldr	r0, [r4]
   1477c:	cmp	r0, #0
   14780:	beq	147b4 <__assert_fail@plt+0x3064>
   14784:	movw	r7, #42284	; 0xa52c
   14788:	mov	r6, #0
   1478c:	movt	r7, #2
   14790:	ldr	r0, [r7]
   14794:	ldr	r0, [r0, r6, lsl #2]
   14798:	bl	11738 <close@plt>
   1479c:	cmp	r0, #0
   147a0:	bne	14870 <__assert_fail@plt+0x3120>
   147a4:	ldr	r0, [r4]
   147a8:	add	r6, r6, #1
   147ac:	cmp	r6, r0
   147b0:	bcc	14790 <__assert_fail@plt+0x3040>
   147b4:	ldr	r0, [sp, #12]
   147b8:	bl	11738 <close@plt>
   147bc:	cmp	r0, #0
   147c0:	bne	14884 <__assert_fail@plt+0x3134>
   147c4:	ldr	r0, [sp, #8]
   147c8:	cmp	r0, #0
   147cc:	bne	148b0 <__assert_fail@plt+0x3160>
   147d0:	movw	r1, #42120	; 0xa488
   147d4:	mov	r0, #2
   147d8:	mov	r2, #0
   147dc:	mov	r4, #0
   147e0:	movt	r1, #2
   147e4:	bl	11408 <sigprocmask@plt>
   147e8:	mov	r0, r5
   147ec:	bl	14b34 <__assert_fail@plt+0x33e4>
   147f0:	ldr	r3, [r8]
   147f4:	movw	r2, #38341	; 0x95c5
   147f8:	mov	r1, r0
   147fc:	mov	r0, r5
   14800:	str	r4, [sp]
   14804:	movt	r2, #1
   14808:	bl	116c0 <execl@plt>
   1480c:	bl	115f4 <__errno_location@plt>
   14810:	ldr	r4, [r0]
   14814:	movw	r1, #38344	; 0x95c8
   14818:	mov	r0, #0
   1481c:	mov	r2, #5
   14820:	movt	r1, #1
   14824:	bl	11474 <dcgettext@plt>
   14828:	mov	r2, r0
   1482c:	ldr	r0, [r8]
   14830:	mov	r1, r4
   14834:	mov	r3, r5
   14838:	str	r0, [sp]
   1483c:	mov	r0, #1
   14840:	bl	11528 <error@plt>
   14844:	movw	r0, #42284	; 0xa52c
   14848:	movt	r0, #2
   1484c:	ldr	r0, [r0]
   14850:	add	r2, r1, #1
   14854:	str	r2, [r4]
   14858:	ldr	r2, [sp, #12]
   1485c:	str	r2, [r0, r1, lsl #2]
   14860:	ldr	r5, [sp, #12]
   14864:	mov	r0, r5
   14868:	sub	sp, fp, #24
   1486c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14870:	bl	115f4 <__errno_location@plt>
   14874:	ldr	r4, [r0]
   14878:	movw	r1, #38265	; 0x9579
   1487c:	movt	r1, #1
   14880:	b	14894 <__assert_fail@plt+0x3144>
   14884:	bl	115f4 <__errno_location@plt>
   14888:	ldr	r4, [r0]
   1488c:	movw	r1, #38284	; 0x958c
   14890:	movt	r1, #1
   14894:	mov	r0, #0
   14898:	mov	r2, #5
   1489c:	bl	11474 <dcgettext@plt>
   148a0:	mov	r2, r0
   148a4:	mov	r0, #1
   148a8:	mov	r1, r4
   148ac:	bl	11528 <error@plt>
   148b0:	mov	r1, #0
   148b4:	bl	11480 <dup2@plt>
   148b8:	cmp	r0, #0
   148bc:	bne	148e4 <__assert_fail@plt+0x3194>
   148c0:	ldr	r0, [sp, #8]
   148c4:	bl	11738 <close@plt>
   148c8:	cmp	r0, #0
   148cc:	beq	147d0 <__assert_fail@plt+0x3080>
   148d0:	bl	115f4 <__errno_location@plt>
   148d4:	ldr	r4, [r0]
   148d8:	movw	r1, #38322	; 0x95b2
   148dc:	movt	r1, #1
   148e0:	b	14894 <__assert_fail@plt+0x3144>
   148e4:	bl	115f4 <__errno_location@plt>
   148e8:	ldr	r4, [r0]
   148ec:	movw	r1, #38304	; 0x95a0
   148f0:	movt	r1, #1
   148f4:	b	14894 <__assert_fail@plt+0x3144>
   148f8:	bl	115f4 <__errno_location@plt>
   148fc:	ldr	r4, [r0]
   14900:	movw	r1, #38179	; 0x9523
   14904:	movt	r1, #1
   14908:	b	14894 <__assert_fail@plt+0x3144>
   1490c:	bl	115f4 <__errno_location@plt>
   14910:	ldr	r4, [r0]
   14914:	movw	r1, #38243	; 0x9563
   14918:	movt	r1, #1
   1491c:	b	14894 <__assert_fail@plt+0x3144>
   14920:	bl	115f4 <__errno_location@plt>
   14924:	ldr	r4, [r0]
   14928:	movw	r1, #38378	; 0x95ea
   1492c:	movt	r1, #1
   14930:	b	14894 <__assert_fail@plt+0x3144>
   14934:	bl	115f4 <__errno_location@plt>
   14938:	ldr	r4, [r0]
   1493c:	movw	r1, #38402	; 0x9602
   14940:	movt	r1, #1
   14944:	b	14894 <__assert_fail@plt+0x3144>
   14948:	bl	115f4 <__errno_location@plt>
   1494c:	ldr	r5, [r0]
   14950:	movw	r1, #38086	; 0x94c6
   14954:	mov	r0, #0
   14958:	mov	r2, #5
   1495c:	movt	r1, #1
   14960:	bl	11474 <dcgettext@plt>
   14964:	mov	r6, r0
   14968:	mov	r0, #4
   1496c:	mov	r1, r4
   14970:	bl	166c8 <__assert_fail@plt+0x4f78>
   14974:	mov	r3, r0
   14978:	mov	r0, #1
   1497c:	mov	r1, r5
   14980:	mov	r2, r6
   14984:	bl	11528 <error@plt>
   14988:	movw	r1, #38104	; 0x94d8
   1498c:	mov	r0, #0
   14990:	mov	r2, #5
   14994:	movt	r1, #1
   14998:	bl	11474 <dcgettext@plt>
   1499c:	mov	r5, r0
   149a0:	mov	r0, #4
   149a4:	mov	r1, r4
   149a8:	bl	166c8 <__assert_fail@plt+0x4f78>
   149ac:	mov	r3, r0
   149b0:	mov	r0, #1
   149b4:	mov	r1, #0
   149b8:	mov	r2, r5
   149bc:	bl	11528 <error@plt>
   149c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c4:	add	fp, sp, #28
   149c8:	sub	sp, sp, #12
   149cc:	mov	r4, r0
   149d0:	add	r0, r0, r1, lsl #4
   149d4:	mov	r5, r1
   149d8:	mov	r9, #0
   149dc:	mov	r7, r0
   149e0:	ldr	r1, [r7, #4]!
   149e4:	cmn	r1, #1
   149e8:	bgt	14adc <__assert_fail@plt+0x338c>
   149ec:	sub	r8, r2, #1
   149f0:	cmp	r5, #0
   149f4:	mov	r9, #0
   149f8:	str	r0, [sp, #4]
   149fc:	str	r7, [sp, #8]
   14a00:	mov	r6, r8
   14a04:	subne	r6, r5, #1
   14a08:	b	14a80 <__assert_fail@plt+0x3330>
   14a0c:	bl	115f4 <__errno_location@plt>
   14a10:	ldr	r1, [r0]
   14a14:	mov	r7, r0
   14a18:	sub	r0, r1, #23
   14a1c:	cmp	r0, #1
   14a20:	bhi	14ae8 <__assert_fail@plt+0x3398>
   14a24:	add	sl, r4, r6, lsl #4
   14a28:	mov	r9, sl
   14a2c:	ldr	r0, [r9, #4]!
   14a30:	cmn	r0, #1
   14a34:	bgt	14a54 <__assert_fail@plt+0x3304>
   14a38:	cmp	r6, #0
   14a3c:	mov	r0, r8
   14a40:	subne	r0, r6, #1
   14a44:	cmp	r0, r5
   14a48:	mov	r6, r0
   14a4c:	bne	14a24 <__assert_fail@plt+0x32d4>
   14a50:	b	14ae8 <__assert_fail@plt+0x3398>
   14a54:	ldr	r0, [sl, #8]!
   14a58:	bl	14cbc <__assert_fail@plt+0x356c>
   14a5c:	cmp	r0, #0
   14a60:	bne	14b14 <__assert_fail@plt+0x33c4>
   14a64:	ldr	r7, [sp, #8]
   14a68:	mov	r0, #0
   14a6c:	str	r0, [sl]
   14a70:	mvn	r0, #1
   14a74:	str	r0, [r9]
   14a78:	mov	r9, #1
   14a7c:	ldr	r1, [r7]
   14a80:	ldr	r0, [r4, r5, lsl #4]
   14a84:	cmn	r1, #1
   14a88:	beq	14a98 <__assert_fail@plt+0x3348>
   14a8c:	movw	r1, #3073	; 0xc01
   14a90:	bl	14d58 <__assert_fail@plt+0x3608>
   14a94:	b	14a9c <__assert_fail@plt+0x334c>
   14a98:	bl	14504 <__assert_fail@plt+0x2db4>
   14a9c:	cmn	r0, #1
   14aa0:	ble	14a0c <__assert_fail@plt+0x32bc>
   14aa4:	movw	r1, #38630	; 0x96e6
   14aa8:	str	r0, [r7]
   14aac:	movt	r1, #1
   14ab0:	bl	113a8 <fdopen@plt>
   14ab4:	ldr	r2, [sp, #4]
   14ab8:	cmp	r0, #0
   14abc:	str	r0, [r2, #8]
   14ac0:	beq	14b24 <__assert_fail@plt+0x33d4>
   14ac4:	movw	r0, #42248	; 0xa508
   14ac8:	movt	r0, #2
   14acc:	ldr	r1, [r0]
   14ad0:	str	r1, [r2, #12]
   14ad4:	mov	r1, #0
   14ad8:	str	r1, [r0]
   14adc:	and	r0, r9, #1
   14ae0:	sub	sp, fp, #28
   14ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae8:	ldr	r2, [r4, r5, lsl #4]
   14aec:	mov	r0, #0
   14af0:	mov	r4, r1
   14af4:	mov	r1, #3
   14af8:	bl	1686c <__assert_fail@plt+0x511c>
   14afc:	movw	r2, #38738	; 0x9752
   14b00:	mov	r3, r0
   14b04:	mov	r0, #1
   14b08:	mov	r1, r4
   14b0c:	movt	r2, #1
   14b10:	bl	11528 <error@plt>
   14b14:	ldr	r2, [r4, r6, lsl #4]
   14b18:	ldr	r4, [r7]
   14b1c:	mov	r0, #0
   14b20:	b	14af4 <__assert_fail@plt+0x33a4>
   14b24:	bl	115f4 <__errno_location@plt>
   14b28:	ldr	r2, [r4, r5, lsl #4]
   14b2c:	ldr	r4, [r0]
   14b30:	b	14b1c <__assert_fail@plt+0x33cc>
   14b34:	sub	r0, r0, #1
   14b38:	ldrb	r3, [r0, #1]!
   14b3c:	cmp	r3, #47	; 0x2f
   14b40:	beq	14b38 <__assert_fail@plt+0x33e8>
   14b44:	mov	r2, #0
   14b48:	mov	r1, r0
   14b4c:	uxtb	r3, r3
   14b50:	cmp	r3, #47	; 0x2f
   14b54:	beq	14b70 <__assert_fail@plt+0x3420>
   14b58:	cmp	r3, #0
   14b5c:	bxeq	lr
   14b60:	tst	r2, #1
   14b64:	mov	r2, #0
   14b68:	movne	r0, r1
   14b6c:	b	14b74 <__assert_fail@plt+0x3424>
   14b70:	mov	r2, #1
   14b74:	ldrb	r3, [r1, #1]!
   14b78:	b	14b4c <__assert_fail@plt+0x33fc>
   14b7c:	push	{r4, sl, fp, lr}
   14b80:	add	fp, sp, #8
   14b84:	mov	r4, r0
   14b88:	bl	115ac <strlen@plt>
   14b8c:	mov	r1, r0
   14b90:	sub	r2, r4, #1
   14b94:	mov	r0, r1
   14b98:	cmp	r1, #2
   14b9c:	popcc	{r4, sl, fp, pc}
   14ba0:	ldrb	r3, [r2, r0]
   14ba4:	sub	r1, r0, #1
   14ba8:	cmp	r3, #47	; 0x2f
   14bac:	beq	14b94 <__assert_fail@plt+0x3444>
   14bb0:	pop	{r4, sl, fp, pc}
   14bb4:	movw	r1, #42292	; 0xa534
   14bb8:	movt	r1, #2
   14bbc:	str	r0, [r1]
   14bc0:	bx	lr
   14bc4:	movw	r1, #42296	; 0xa538
   14bc8:	movt	r1, #2
   14bcc:	strb	r0, [r1]
   14bd0:	bx	lr
   14bd4:	push	{r4, r5, r6, sl, fp, lr}
   14bd8:	add	fp, sp, #16
   14bdc:	sub	sp, sp, #8
   14be0:	movw	r0, #41836	; 0xa36c
   14be4:	movt	r0, #2
   14be8:	ldr	r0, [r0]
   14bec:	bl	1808c <__assert_fail@plt+0x693c>
   14bf0:	cmp	r0, #0
   14bf4:	beq	14c1c <__assert_fail@plt+0x34cc>
   14bf8:	movw	r0, #42296	; 0xa538
   14bfc:	movt	r0, #2
   14c00:	ldrb	r0, [r0]
   14c04:	cmp	r0, #0
   14c08:	beq	14c3c <__assert_fail@plt+0x34ec>
   14c0c:	bl	115f4 <__errno_location@plt>
   14c10:	ldr	r0, [r0]
   14c14:	cmp	r0, #32
   14c18:	bne	14c3c <__assert_fail@plt+0x34ec>
   14c1c:	movw	r0, #41832	; 0xa368
   14c20:	movt	r0, #2
   14c24:	ldr	r0, [r0]
   14c28:	bl	1808c <__assert_fail@plt+0x693c>
   14c2c:	cmp	r0, #0
   14c30:	subeq	sp, fp, #16
   14c34:	popeq	{r4, r5, r6, sl, fp, pc}
   14c38:	b	14cac <__assert_fail@plt+0x355c>
   14c3c:	movw	r1, #38618	; 0x96da
   14c40:	mov	r0, #0
   14c44:	mov	r2, #5
   14c48:	movt	r1, #1
   14c4c:	bl	11474 <dcgettext@plt>
   14c50:	mov	r4, r0
   14c54:	movw	r0, #42292	; 0xa534
   14c58:	movt	r0, #2
   14c5c:	ldr	r6, [r0]
   14c60:	bl	115f4 <__errno_location@plt>
   14c64:	ldr	r5, [r0]
   14c68:	cmp	r6, #0
   14c6c:	bne	14c88 <__assert_fail@plt+0x3538>
   14c70:	movw	r2, #38738	; 0x9752
   14c74:	mov	r0, #0
   14c78:	mov	r1, r5
   14c7c:	mov	r3, r4
   14c80:	movt	r2, #1
   14c84:	b	14ca8 <__assert_fail@plt+0x3558>
   14c88:	mov	r0, r6
   14c8c:	bl	167c0 <__assert_fail@plt+0x5070>
   14c90:	movw	r2, #36957	; 0x905d
   14c94:	mov	r3, r0
   14c98:	str	r4, [sp]
   14c9c:	mov	r0, #0
   14ca0:	mov	r1, r5
   14ca4:	movt	r2, #1
   14ca8:	bl	11528 <error@plt>
   14cac:	movw	r0, #41320	; 0xa168
   14cb0:	movt	r0, #2
   14cb4:	ldr	r0, [r0]
   14cb8:	bl	1142c <_exit@plt>
   14cbc:	push	{r4, r5, r6, sl, fp, lr}
   14cc0:	add	fp, sp, #16
   14cc4:	sub	sp, sp, #8
   14cc8:	mov	r4, r0
   14ccc:	bl	1163c <fileno@plt>
   14cd0:	cmn	r0, #1
   14cd4:	ble	14d48 <__assert_fail@plt+0x35f8>
   14cd8:	mov	r0, r4
   14cdc:	bl	11570 <__freading@plt>
   14ce0:	cmp	r0, #0
   14ce4:	beq	14d10 <__assert_fail@plt+0x35c0>
   14ce8:	mov	r0, r4
   14cec:	bl	1163c <fileno@plt>
   14cf0:	mov	r1, #1
   14cf4:	mov	r2, #0
   14cf8:	mov	r3, #0
   14cfc:	str	r1, [sp]
   14d00:	bl	114d4 <lseek64@plt>
   14d04:	and	r0, r0, r1
   14d08:	cmn	r0, #1
   14d0c:	beq	14d48 <__assert_fail@plt+0x35f8>
   14d10:	mov	r0, r4
   14d14:	bl	14e08 <__assert_fail@plt+0x36b8>
   14d18:	cmp	r0, #0
   14d1c:	beq	14d48 <__assert_fail@plt+0x35f8>
   14d20:	bl	115f4 <__errno_location@plt>
   14d24:	ldr	r6, [r0]
   14d28:	mov	r5, r0
   14d2c:	mov	r0, r4
   14d30:	bl	1166c <fclose@plt>
   14d34:	cmp	r6, #0
   14d38:	strne	r6, [r5]
   14d3c:	mvnne	r0, #0
   14d40:	sub	sp, fp, #16
   14d44:	pop	{r4, r5, r6, sl, fp, pc}
   14d48:	mov	r0, r4
   14d4c:	sub	sp, fp, #16
   14d50:	pop	{r4, r5, r6, sl, fp, lr}
   14d54:	b	1166c <fclose@plt>
   14d58:	sub	sp, sp, #8
   14d5c:	push	{fp, lr}
   14d60:	mov	fp, sp
   14d64:	sub	sp, sp, #8
   14d68:	str	r2, [fp, #8]
   14d6c:	mov	r2, #0
   14d70:	tst	r1, #64	; 0x40
   14d74:	str	r3, [fp, #12]
   14d78:	addne	r2, fp, #8
   14d7c:	orrne	r2, r2, #4
   14d80:	strne	r2, [sp, #4]
   14d84:	ldrne	r2, [fp, #8]
   14d88:	bl	11534 <open64@plt>
   14d8c:	bl	16e54 <__assert_fail@plt+0x5704>
   14d90:	mov	sp, fp
   14d94:	pop	{fp, lr}
   14d98:	add	sp, sp, #8
   14d9c:	bx	lr
   14da0:	push	{r4, r5, r6, r7, fp, lr}
   14da4:	add	fp, sp, #16
   14da8:	mov	r5, r0
   14dac:	mov	r0, r1
   14db0:	mov	r1, r2
   14db4:	mov	r2, r3
   14db8:	bl	11534 <open64@plt>
   14dbc:	mov	r4, r0
   14dc0:	cmp	r0, r5
   14dc4:	beq	14e00 <__assert_fail@plt+0x36b0>
   14dc8:	cmp	r4, #0
   14dcc:	blt	14e00 <__assert_fail@plt+0x36b0>
   14dd0:	mov	r0, r4
   14dd4:	mov	r1, r5
   14dd8:	bl	11480 <dup2@plt>
   14ddc:	mov	r5, r0
   14de0:	bl	115f4 <__errno_location@plt>
   14de4:	ldr	r7, [r0]
   14de8:	mov	r6, r0
   14dec:	mov	r0, r4
   14df0:	bl	11738 <close@plt>
   14df4:	mov	r0, r5
   14df8:	str	r7, [r6]
   14dfc:	pop	{r4, r5, r6, r7, fp, pc}
   14e00:	mov	r0, r4
   14e04:	pop	{r4, r5, r6, r7, fp, pc}
   14e08:	push	{r4, sl, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	sub	sp, sp, #8
   14e14:	mov	r4, r0
   14e18:	cmp	r0, #0
   14e1c:	beq	14e38 <__assert_fail@plt+0x36e8>
   14e20:	mov	r0, r4
   14e24:	bl	11570 <__freading@plt>
   14e28:	cmp	r0, #0
   14e2c:	ldrbne	r0, [r4, #1]
   14e30:	tstne	r0, #1
   14e34:	bne	14e48 <__assert_fail@plt+0x36f8>
   14e38:	mov	r0, r4
   14e3c:	sub	sp, fp, #8
   14e40:	pop	{r4, sl, fp, lr}
   14e44:	b	113fc <fflush@plt>
   14e48:	mov	r0, #1
   14e4c:	mov	r2, #0
   14e50:	mov	r3, #0
   14e54:	str	r0, [sp]
   14e58:	mov	r0, r4
   14e5c:	bl	14e8c <__assert_fail@plt+0x373c>
   14e60:	b	14e38 <__assert_fail@plt+0x36e8>
   14e64:	push	{r4, r5, r6, sl, fp, lr}
   14e68:	add	fp, sp, #16
   14e6c:	mov	r4, r0
   14e70:	bl	115f4 <__errno_location@plt>
   14e74:	ldr	r6, [r0]
   14e78:	mov	r5, r0
   14e7c:	mov	r0, r4
   14e80:	bl	11420 <free@plt>
   14e84:	str	r6, [r5]
   14e88:	pop	{r4, r5, r6, sl, fp, pc}
   14e8c:	push	{r4, r5, r6, r7, fp, lr}
   14e90:	add	fp, sp, #16
   14e94:	sub	sp, sp, #8
   14e98:	mov	r4, r0
   14e9c:	ldr	r0, [r0, #4]
   14ea0:	mov	r5, r3
   14ea4:	mov	r6, r2
   14ea8:	ldr	r1, [r4, #8]
   14eac:	cmp	r1, r0
   14eb0:	bne	14ecc <__assert_fail@plt+0x377c>
   14eb4:	ldrd	r0, [r4, #16]
   14eb8:	cmp	r1, r0
   14ebc:	bne	14ecc <__assert_fail@plt+0x377c>
   14ec0:	ldr	r0, [r4, #36]	; 0x24
   14ec4:	cmp	r0, #0
   14ec8:	beq	14ee4 <__assert_fail@plt+0x3794>
   14ecc:	mov	r0, r4
   14ed0:	mov	r2, r6
   14ed4:	mov	r3, r5
   14ed8:	sub	sp, fp, #16
   14edc:	pop	{r4, r5, r6, r7, fp, lr}
   14ee0:	b	11684 <fseeko64@plt>
   14ee4:	ldr	r7, [fp, #8]
   14ee8:	mov	r0, r4
   14eec:	bl	1163c <fileno@plt>
   14ef0:	mov	r2, r6
   14ef4:	mov	r3, r5
   14ef8:	str	r7, [sp]
   14efc:	bl	114d4 <lseek64@plt>
   14f00:	and	r2, r0, r1
   14f04:	cmn	r2, #1
   14f08:	beq	14f24 <__assert_fail@plt+0x37d4>
   14f0c:	strd	r0, [r4, #80]	; 0x50
   14f10:	ldr	r0, [r4]
   14f14:	bic	r0, r0, #16
   14f18:	str	r0, [r4]
   14f1c:	mov	r0, #0
   14f20:	b	14f28 <__assert_fail@plt+0x37d8>
   14f24:	mvn	r0, #0
   14f28:	sub	sp, fp, #16
   14f2c:	pop	{r4, r5, r6, r7, fp, pc}
   14f30:	push	{r4, r5, r6, r7, fp, lr}
   14f34:	add	fp, sp, #16
   14f38:	cmp	r2, #0
   14f3c:	beq	14f84 <__assert_fail@plt+0x3834>
   14f40:	mov	r5, r2
   14f44:	mov	r6, r1
   14f48:	mov	r7, r0
   14f4c:	mov	r4, #0
   14f50:	mov	r0, r7
   14f54:	mov	r1, r6
   14f58:	mov	r2, r5
   14f5c:	bl	16b9c <__assert_fail@plt+0x544c>
   14f60:	cmn	r0, #1
   14f64:	beq	14f98 <__assert_fail@plt+0x3848>
   14f68:	cmp	r0, #0
   14f6c:	beq	14f8c <__assert_fail@plt+0x383c>
   14f70:	subs	r5, r5, r0
   14f74:	add	r6, r6, r0
   14f78:	add	r4, r0, r4
   14f7c:	bne	14f50 <__assert_fail@plt+0x3800>
   14f80:	b	14f98 <__assert_fail@plt+0x3848>
   14f84:	mov	r4, #0
   14f88:	b	14f98 <__assert_fail@plt+0x3848>
   14f8c:	bl	115f4 <__errno_location@plt>
   14f90:	mov	r1, #28
   14f94:	str	r1, [r0]
   14f98:	mov	r0, r4
   14f9c:	pop	{r4, r5, r6, r7, fp, pc}
   14fa0:	push	{r4, r5, r6, sl, fp, lr}
   14fa4:	add	fp, sp, #16
   14fa8:	mov	r5, r0
   14fac:	mov	r0, #0
   14fb0:	mov	r4, r1
   14fb4:	add	r6, r2, #19
   14fb8:	strb	r0, [r2, #20]
   14fbc:	mov	r0, r5
   14fc0:	mov	r1, r4
   14fc4:	mov	r2, #10
   14fc8:	mov	r3, #0
   14fcc:	bl	184bc <__assert_fail@plt+0x6d6c>
   14fd0:	add	r2, r0, r0, lsl #2
   14fd4:	sub	r2, r5, r2, lsl #1
   14fd8:	orr	r2, r2, #48	; 0x30
   14fdc:	strb	r2, [r6], #-1
   14fe0:	rsbs	r2, r5, #9
   14fe4:	mov	r5, r0
   14fe8:	rscs	r2, r4, #0
   14fec:	mov	r4, r1
   14ff0:	bcc	14fbc <__assert_fail@plt+0x386c>
   14ff4:	add	r0, r6, #1
   14ff8:	pop	{r4, r5, r6, sl, fp, pc}
   14ffc:	push	{r4, r5, fp, lr}
   15000:	add	fp, sp, #8
   15004:	cmp	r0, #0
   15008:	beq	1509c <__assert_fail@plt+0x394c>
   1500c:	mov	r1, #47	; 0x2f
   15010:	mov	r4, r0
   15014:	bl	116cc <strrchr@plt>
   15018:	cmp	r0, #0
   1501c:	mov	r5, r4
   15020:	addne	r5, r0, #1
   15024:	sub	r0, r5, r4
   15028:	cmp	r0, #7
   1502c:	blt	15080 <__assert_fail@plt+0x3930>
   15030:	movw	r1, #39191	; 0x9917
   15034:	sub	r0, r5, #7
   15038:	mov	r2, #7
   1503c:	movt	r1, #1
   15040:	bl	11720 <strncmp@plt>
   15044:	cmp	r0, #0
   15048:	bne	15080 <__assert_fail@plt+0x3930>
   1504c:	movw	r1, #39199	; 0x991f
   15050:	mov	r0, r5
   15054:	mov	r2, #3
   15058:	movt	r1, #1
   1505c:	bl	11720 <strncmp@plt>
   15060:	cmp	r0, #0
   15064:	beq	15070 <__assert_fail@plt+0x3920>
   15068:	mov	r4, r5
   1506c:	b	15080 <__assert_fail@plt+0x3930>
   15070:	movw	r0, #41816	; 0xa358
   15074:	add	r4, r5, #3
   15078:	movt	r0, #2
   1507c:	str	r4, [r0]
   15080:	movw	r0, #41820	; 0xa35c
   15084:	movt	r0, #2
   15088:	str	r4, [r0]
   1508c:	movw	r0, #42300	; 0xa53c
   15090:	movt	r0, #2
   15094:	str	r4, [r0]
   15098:	pop	{r4, r5, fp, pc}
   1509c:	movw	r0, #41832	; 0xa368
   150a0:	movt	r0, #2
   150a4:	ldr	r1, [r0]
   150a8:	movw	r0, #39135	; 0x98df
   150ac:	movt	r0, #1
   150b0:	bl	11714 <fputs@plt>
   150b4:	bl	1172c <abort@plt>
   150b8:	push	{r4, r5, r6, sl, fp, lr}
   150bc:	add	fp, sp, #16
   150c0:	mov	r4, r0
   150c4:	movw	r0, #42304	; 0xa540
   150c8:	movt	r0, #2
   150cc:	cmp	r4, #0
   150d0:	moveq	r4, r0
   150d4:	bl	115f4 <__errno_location@plt>
   150d8:	ldr	r6, [r0]
   150dc:	mov	r5, r0
   150e0:	mov	r0, r4
   150e4:	mov	r1, #48	; 0x30
   150e8:	bl	176bc <__assert_fail@plt+0x5f6c>
   150ec:	str	r6, [r5]
   150f0:	pop	{r4, r5, r6, sl, fp, pc}
   150f4:	movw	r1, #42304	; 0xa540
   150f8:	cmp	r0, #0
   150fc:	movt	r1, #2
   15100:	movne	r1, r0
   15104:	ldr	r0, [r1]
   15108:	bx	lr
   1510c:	movw	r2, #42304	; 0xa540
   15110:	cmp	r0, #0
   15114:	movt	r2, #2
   15118:	movne	r2, r0
   1511c:	str	r1, [r2]
   15120:	bx	lr
   15124:	movw	r3, #42304	; 0xa540
   15128:	cmp	r0, #0
   1512c:	movt	r3, #2
   15130:	movne	r3, r0
   15134:	ubfx	r0, r1, #5, #3
   15138:	and	r1, r1, #31
   1513c:	add	r0, r3, r0, lsl #2
   15140:	ldr	r3, [r0, #8]
   15144:	eor	r2, r2, r3, lsr r1
   15148:	and	r2, r2, #1
   1514c:	eor	r2, r3, r2, lsl r1
   15150:	str	r2, [r0, #8]
   15154:	mov	r0, #1
   15158:	and	r0, r0, r3, lsr r1
   1515c:	bx	lr
   15160:	movw	r2, #42304	; 0xa540
   15164:	cmp	r0, #0
   15168:	movt	r2, #2
   1516c:	movne	r2, r0
   15170:	ldr	r0, [r2, #4]
   15174:	str	r1, [r2, #4]
   15178:	bx	lr
   1517c:	movw	r3, #42304	; 0xa540
   15180:	cmp	r0, #0
   15184:	movt	r3, #2
   15188:	movne	r3, r0
   1518c:	cmp	r1, #0
   15190:	mov	r0, #10
   15194:	cmpne	r2, #0
   15198:	str	r0, [r3]
   1519c:	bne	151ac <__assert_fail@plt+0x3a5c>
   151a0:	push	{fp, lr}
   151a4:	mov	fp, sp
   151a8:	bl	1172c <abort@plt>
   151ac:	str	r1, [r3, #40]	; 0x28
   151b0:	str	r2, [r3, #44]	; 0x2c
   151b4:	bx	lr
   151b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151bc:	add	fp, sp, #28
   151c0:	sub	sp, sp, #20
   151c4:	mov	r7, r0
   151c8:	ldr	r0, [fp, #8]
   151cc:	movw	r5, #42304	; 0xa540
   151d0:	mov	r8, r3
   151d4:	mov	r9, r2
   151d8:	mov	sl, r1
   151dc:	movt	r5, #2
   151e0:	cmp	r0, #0
   151e4:	movne	r5, r0
   151e8:	bl	115f4 <__errno_location@plt>
   151ec:	mov	r4, r0
   151f0:	ldm	r5, {r0, r1}
   151f4:	ldr	r2, [r5, #40]	; 0x28
   151f8:	ldr	r3, [r5, #44]	; 0x2c
   151fc:	add	r5, r5, #8
   15200:	ldr	r6, [r4]
   15204:	stm	sp, {r0, r1, r5}
   15208:	str	r2, [sp, #12]
   1520c:	str	r3, [sp, #16]
   15210:	mov	r0, r7
   15214:	mov	r1, sl
   15218:	mov	r2, r9
   1521c:	mov	r3, r8
   15220:	bl	15230 <__assert_fail@plt+0x3ae0>
   15224:	str	r6, [r4]
   15228:	sub	sp, fp, #28
   1522c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15234:	add	fp, sp, #28
   15238:	sub	sp, sp, #156	; 0x9c
   1523c:	str	r0, [fp, #-56]	; 0xffffffc8
   15240:	ldr	r0, [fp, #12]
   15244:	mov	r4, r1
   15248:	str	r3, [sp, #80]	; 0x50
   1524c:	str	r2, [fp, #-84]	; 0xffffffac
   15250:	and	r1, r0, #4
   15254:	str	r1, [sp, #24]
   15258:	and	r1, r0, #1
   1525c:	str	r1, [sp, #28]
   15260:	ubfx	r7, r0, #1, #1
   15264:	bl	114ec <__ctype_get_mb_cur_max@plt>
   15268:	str	r0, [sp, #32]
   1526c:	ldr	r0, [fp, #24]
   15270:	ldr	r9, [fp, #8]
   15274:	mov	r2, #0
   15278:	mov	r1, #0
   1527c:	mov	r5, #0
   15280:	str	r2, [sp, #52]	; 0x34
   15284:	mov	r2, #1
   15288:	str	r0, [sp, #72]	; 0x48
   1528c:	ldr	r0, [fp, #20]
   15290:	str	r0, [sp, #64]	; 0x40
   15294:	mov	r0, #0
   15298:	str	r0, [sp, #92]	; 0x5c
   1529c:	mov	r0, #0
   152a0:	str	r0, [fp, #-76]	; 0xffffffb4
   152a4:	mov	r0, #0
   152a8:	cmp	r9, #10
   152ac:	str	r1, [sp, #68]	; 0x44
   152b0:	bhi	162b0 <__assert_fail@plt+0x4b60>
   152b4:	add	r1, pc, #28
   152b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   152bc:	ldr	lr, [sp, #80]	; 0x50
   152c0:	mov	r6, r4
   152c4:	mov	r8, #0
   152c8:	mov	r3, #1
   152cc:	mov	sl, #0
   152d0:	mov	r4, r2
   152d4:	ldr	pc, [r1, r9, lsl #2]
   152d8:	andeq	r5, r1, r8, lsr #7
   152dc:	andeq	r5, r1, r4, ror #7
   152e0:			; <UNDEFINED> instruction: 0x000153b8
   152e4:	andeq	r5, r1, r0, lsr #7
   152e8:	ldrdeq	r5, [r1], -r8
   152ec:	andeq	r5, r1, r0, lsr r4
   152f0:	andeq	r5, r1, r8, asr #7
   152f4:	muleq	r1, r0, r4
   152f8:	andeq	r5, r1, r4, lsl #6
   152fc:	andeq	r5, r1, r4, lsl #6
   15300:	andeq	r5, r1, ip, lsr #6
   15304:	movw	r0, #39279	; 0x996f
   15308:	mov	r1, r9
   1530c:	movt	r0, #1
   15310:	bl	16a18 <__assert_fail@plt+0x52c8>
   15314:	str	r0, [sp, #64]	; 0x40
   15318:	movw	r0, #39281	; 0x9971
   1531c:	mov	r1, r9
   15320:	movt	r0, #1
   15324:	bl	16a18 <__assert_fail@plt+0x52c8>
   15328:	str	r0, [sp, #72]	; 0x48
   1532c:	mov	r8, #0
   15330:	mov	sl, r7
   15334:	tst	r7, #1
   15338:	str	r5, [fp, #-48]	; 0xffffffd0
   1533c:	bne	15378 <__assert_fail@plt+0x3c28>
   15340:	ldr	r0, [sp, #64]	; 0x40
   15344:	ldrb	r0, [r0]
   15348:	cmp	r0, #0
   1534c:	beq	15378 <__assert_fail@plt+0x3c28>
   15350:	ldr	r1, [sp, #64]	; 0x40
   15354:	mov	r8, #0
   15358:	add	r1, r1, #1
   1535c:	cmp	r8, r6
   15360:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15364:	strbcc	r0, [r2, r8]
   15368:	ldrb	r0, [r1, r8]
   1536c:	add	r8, r8, #1
   15370:	cmp	r0, #0
   15374:	bne	1535c <__assert_fail@plt+0x3c0c>
   15378:	ldr	r7, [sp, #72]	; 0x48
   1537c:	mov	r0, r7
   15380:	bl	115ac <strlen@plt>
   15384:	ldr	ip, [fp, #-84]	; 0xffffffac
   15388:	ldr	lr, [sp, #80]	; 0x50
   1538c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15390:	str	r0, [fp, #-76]	; 0xffffffb4
   15394:	str	r7, [sp, #92]	; 0x5c
   15398:	mov	r3, #1
   1539c:	b	15490 <__assert_fail@plt+0x3d40>
   153a0:	mov	r0, #1
   153a4:	b	153e4 <__assert_fail@plt+0x3c94>
   153a8:	mov	r9, #0
   153ac:	mov	r8, #0
   153b0:	mov	r3, r0
   153b4:	b	1548c <__assert_fail@plt+0x3d3c>
   153b8:	tst	r7, #1
   153bc:	bne	153e4 <__assert_fail@plt+0x3c94>
   153c0:	mov	r3, r0
   153c4:	b	1540c <__assert_fail@plt+0x3cbc>
   153c8:	mov	r0, #1
   153cc:	mov	r8, #0
   153d0:	mov	r9, #5
   153d4:	b	15444 <__assert_fail@plt+0x3cf4>
   153d8:	mov	r3, #1
   153dc:	tst	r7, #1
   153e0:	beq	1540c <__assert_fail@plt+0x3cbc>
   153e4:	mov	r1, #1
   153e8:	mov	r8, #0
   153ec:	mov	r9, #2
   153f0:	mov	r3, r0
   153f4:	mov	sl, #1
   153f8:	str	r1, [fp, #-76]	; 0xffffffb4
   153fc:	movw	r1, #39281	; 0x9971
   15400:	movt	r1, #1
   15404:	str	r1, [sp, #92]	; 0x5c
   15408:	b	15490 <__assert_fail@plt+0x3d40>
   1540c:	cmp	r6, #0
   15410:	mov	r8, #1
   15414:	mov	r9, #2
   15418:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   1541c:	movne	r0, #39	; 0x27
   15420:	strbne	r0, [r1]
   15424:	movw	r0, #39281	; 0x9971
   15428:	movt	r0, #1
   1542c:	b	15480 <__assert_fail@plt+0x3d30>
   15430:	mov	r9, #5
   15434:	tst	r7, #1
   15438:	beq	15460 <__assert_fail@plt+0x3d10>
   1543c:	mov	r0, #1
   15440:	mov	r8, #0
   15444:	str	r0, [fp, #-76]	; 0xffffffb4
   15448:	movw	r0, #38376	; 0x95e8
   1544c:	mov	r3, #1
   15450:	mov	sl, #1
   15454:	movt	r0, #1
   15458:	str	r0, [sp, #92]	; 0x5c
   1545c:	b	15490 <__assert_fail@plt+0x3d40>
   15460:	cmp	r6, #0
   15464:	mov	r8, #1
   15468:	mov	r3, #1
   1546c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   15470:	movne	r0, #34	; 0x22
   15474:	strbne	r0, [r1]
   15478:	movw	r0, #38376	; 0x95e8
   1547c:	movt	r0, #1
   15480:	str	r0, [sp, #92]	; 0x5c
   15484:	mov	r0, #1
   15488:	str	r0, [fp, #-76]	; 0xffffffb4
   1548c:	mov	sl, #0
   15490:	ldr	r0, [fp, #16]
   15494:	mov	r7, #0
   15498:	str	r9, [fp, #-64]	; 0xffffffc0
   1549c:	str	sl, [fp, #-72]	; 0xffffffb8
   154a0:	str	r3, [sp, #84]	; 0x54
   154a4:	cmp	r0, #0
   154a8:	movwne	r0, #1
   154ac:	and	r0, r0, sl
   154b0:	str	r0, [fp, #-88]	; 0xffffffa8
   154b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   154b8:	cmp	r0, #0
   154bc:	movwne	r0, #1
   154c0:	subs	r2, r9, #2
   154c4:	and	r1, r0, sl
   154c8:	str	r2, [fp, #-80]	; 0xffffffb0
   154cc:	and	r1, r3, r1
   154d0:	str	r1, [sp, #44]	; 0x2c
   154d4:	clz	r1, r2
   154d8:	lsr	r1, r1, #5
   154dc:	and	r1, r1, sl
   154e0:	str	r1, [sp, #56]	; 0x38
   154e4:	mov	r1, r2
   154e8:	eor	r2, sl, #1
   154ec:	movwne	r1, #1
   154f0:	str	r2, [sp, #88]	; 0x58
   154f4:	orr	r2, r1, r2
   154f8:	and	r1, r1, r3
   154fc:	and	r0, r0, r1
   15500:	str	r2, [sp, #60]	; 0x3c
   15504:	str	r1, [fp, #-68]	; 0xffffffbc
   15508:	str	r0, [fp, #-60]	; 0xffffffc4
   1550c:	eor	r0, r3, #1
   15510:	str	r0, [sp, #48]	; 0x30
   15514:	cmn	lr, #1
   15518:	beq	15528 <__assert_fail@plt+0x3dd8>
   1551c:	cmp	r7, lr
   15520:	bne	15534 <__assert_fail@plt+0x3de4>
   15524:	b	160e0 <__assert_fail@plt+0x4990>
   15528:	ldrb	r0, [ip, r7]
   1552c:	cmp	r0, #0
   15530:	beq	160e8 <__assert_fail@plt+0x4998>
   15534:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15538:	mov	r9, #0
   1553c:	str	r5, [fp, #-48]	; 0xffffffd0
   15540:	str	r6, [fp, #-52]	; 0xffffffcc
   15544:	cmp	r0, #0
   15548:	beq	15588 <__assert_fail@plt+0x3e38>
   1554c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15550:	mov	r5, r4
   15554:	add	r4, r7, r0
   15558:	cmp	r0, #2
   1555c:	bcc	15578 <__assert_fail@plt+0x3e28>
   15560:	cmn	lr, #1
   15564:	bne	15578 <__assert_fail@plt+0x3e28>
   15568:	mov	r0, ip
   1556c:	bl	115ac <strlen@plt>
   15570:	ldr	ip, [fp, #-84]	; 0xffffffac
   15574:	mov	lr, r0
   15578:	cmp	r4, lr
   1557c:	bls	15590 <__assert_fail@plt+0x3e40>
   15580:	mov	r6, #0
   15584:	b	155d0 <__assert_fail@plt+0x3e80>
   15588:	mov	r6, #0
   1558c:	b	155d4 <__assert_fail@plt+0x3e84>
   15590:	ldr	r1, [sp, #92]	; 0x5c
   15594:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15598:	add	r0, ip, r7
   1559c:	mov	r4, lr
   155a0:	bl	11468 <memcmp@plt>
   155a4:	ldr	r2, [sp, #88]	; 0x58
   155a8:	cmp	r0, #0
   155ac:	mov	r1, r0
   155b0:	movwne	r1, #1
   155b4:	orr	r1, r1, r2
   155b8:	tst	r1, #1
   155bc:	beq	1617c <__assert_fail@plt+0x4a2c>
   155c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   155c4:	clz	r0, r0
   155c8:	mov	lr, r4
   155cc:	lsr	r6, r0, #5
   155d0:	mov	r4, r5
   155d4:	ldrb	r5, [ip, r7]
   155d8:	cmp	r5, #126	; 0x7e
   155dc:	bhi	159a4 <__assert_fail@plt+0x4254>
   155e0:	add	r3, pc, #16
   155e4:	mov	sl, #1
   155e8:	mov	r2, #110	; 0x6e
   155ec:	mov	r0, #97	; 0x61
   155f0:	mov	r1, #0
   155f4:	ldr	pc, [r3, r5, lsl #2]
   155f8:	andeq	r5, r1, r8, lsl #17
   155fc:	andeq	r5, r1, r4, lsr #19
   15600:	andeq	r5, r1, r4, lsr #19
   15604:	andeq	r5, r1, r4, lsr #19
   15608:	andeq	r5, r1, r4, lsr #19
   1560c:	andeq	r5, r1, r4, lsr #19
   15610:	andeq	r5, r1, r4, lsr #19
   15614:	andeq	r5, r1, r8, asr #20
   15618:	andeq	r5, r1, r8, ror #16
   1561c:	andeq	r5, r1, r0, ror #16
   15620:	andeq	r5, r1, r4, ror r8
   15624:	strdeq	r5, [r1], -r8
   15628:	andeq	r5, r1, r8, asr r8
   1562c:	andeq	r5, r1, r0, ror r8
   15630:	andeq	r5, r1, r4, lsr #19
   15634:	andeq	r5, r1, r4, lsr #19
   15638:	andeq	r5, r1, r4, lsr #19
   1563c:	andeq	r5, r1, r4, lsr #19
   15640:	andeq	r5, r1, r4, lsr #19
   15644:	andeq	r5, r1, r4, lsr #19
   15648:	andeq	r5, r1, r4, lsr #19
   1564c:	andeq	r5, r1, r4, lsr #19
   15650:	andeq	r5, r1, r4, lsr #19
   15654:	andeq	r5, r1, r4, lsr #19
   15658:	andeq	r5, r1, r4, lsr #19
   1565c:	andeq	r5, r1, r4, lsr #19
   15660:	andeq	r5, r1, r4, lsr #19
   15664:	andeq	r5, r1, r4, lsr #19
   15668:	andeq	r5, r1, r4, lsr #19
   1566c:	andeq	r5, r1, r4, lsr #19
   15670:	andeq	r5, r1, r4, lsr #19
   15674:	andeq	r5, r1, r4, lsr #19
   15678:	andeq	r5, r1, r8, lsl #20
   1567c:	andeq	r5, r1, ip, lsl #20
   15680:	andeq	r5, r1, ip, lsl #20
   15684:	andeq	r5, r1, r8, lsl #16
   15688:	andeq	r5, r1, ip, lsl #20
   1568c:	strdeq	r5, [r1], -r4
   15690:	andeq	r5, r1, ip, lsl #20
   15694:	andeq	r5, r1, r0, lsl #18
   15698:	andeq	r5, r1, ip, lsl #20
   1569c:	andeq	r5, r1, ip, lsl #20
   156a0:	andeq	r5, r1, ip, lsl #20
   156a4:	strdeq	r5, [r1], -r4
   156a8:	strdeq	r5, [r1], -r4
   156ac:	strdeq	r5, [r1], -r4
   156b0:	strdeq	r5, [r1], -r4
   156b4:	strdeq	r5, [r1], -r4
   156b8:	strdeq	r5, [r1], -r4
   156bc:	strdeq	r5, [r1], -r4
   156c0:	strdeq	r5, [r1], -r4
   156c4:	strdeq	r5, [r1], -r4
   156c8:	strdeq	r5, [r1], -r4
   156cc:	strdeq	r5, [r1], -r4
   156d0:	strdeq	r5, [r1], -r4
   156d4:	strdeq	r5, [r1], -r4
   156d8:	strdeq	r5, [r1], -r4
   156dc:	strdeq	r5, [r1], -r4
   156e0:	strdeq	r5, [r1], -r4
   156e4:	andeq	r5, r1, ip, lsl #20
   156e8:	andeq	r5, r1, ip, lsl #20
   156ec:	andeq	r5, r1, ip, lsl #20
   156f0:	andeq	r5, r1, ip, lsl #20
   156f4:	andeq	r5, r1, ip, asr #17
   156f8:	andeq	r5, r1, r4, lsr #19
   156fc:	strdeq	r5, [r1], -r4
   15700:	strdeq	r5, [r1], -r4
   15704:	strdeq	r5, [r1], -r4
   15708:	strdeq	r5, [r1], -r4
   1570c:	strdeq	r5, [r1], -r4
   15710:	strdeq	r5, [r1], -r4
   15714:	strdeq	r5, [r1], -r4
   15718:	strdeq	r5, [r1], -r4
   1571c:	strdeq	r5, [r1], -r4
   15720:	strdeq	r5, [r1], -r4
   15724:	strdeq	r5, [r1], -r4
   15728:	strdeq	r5, [r1], -r4
   1572c:	strdeq	r5, [r1], -r4
   15730:	strdeq	r5, [r1], -r4
   15734:	strdeq	r5, [r1], -r4
   15738:	strdeq	r5, [r1], -r4
   1573c:	strdeq	r5, [r1], -r4
   15740:	strdeq	r5, [r1], -r4
   15744:	strdeq	r5, [r1], -r4
   15748:	strdeq	r5, [r1], -r4
   1574c:	strdeq	r5, [r1], -r4
   15750:	strdeq	r5, [r1], -r4
   15754:	strdeq	r5, [r1], -r4
   15758:	strdeq	r5, [r1], -r4
   1575c:	strdeq	r5, [r1], -r4
   15760:	strdeq	r5, [r1], -r4
   15764:	andeq	r5, r1, ip, lsl #20
   15768:	andeq	r5, r1, r4, lsr r8
   1576c:	strdeq	r5, [r1], -r4
   15770:	andeq	r5, r1, ip, lsl #20
   15774:	strdeq	r5, [r1], -r4
   15778:	andeq	r5, r1, ip, lsl #20
   1577c:	strdeq	r5, [r1], -r4
   15780:	strdeq	r5, [r1], -r4
   15784:	strdeq	r5, [r1], -r4
   15788:	strdeq	r5, [r1], -r4
   1578c:	strdeq	r5, [r1], -r4
   15790:	strdeq	r5, [r1], -r4
   15794:	strdeq	r5, [r1], -r4
   15798:	strdeq	r5, [r1], -r4
   1579c:	strdeq	r5, [r1], -r4
   157a0:	strdeq	r5, [r1], -r4
   157a4:	strdeq	r5, [r1], -r4
   157a8:	strdeq	r5, [r1], -r4
   157ac:	strdeq	r5, [r1], -r4
   157b0:	strdeq	r5, [r1], -r4
   157b4:	strdeq	r5, [r1], -r4
   157b8:	strdeq	r5, [r1], -r4
   157bc:	strdeq	r5, [r1], -r4
   157c0:	strdeq	r5, [r1], -r4
   157c4:	strdeq	r5, [r1], -r4
   157c8:	strdeq	r5, [r1], -r4
   157cc:	strdeq	r5, [r1], -r4
   157d0:	strdeq	r5, [r1], -r4
   157d4:	strdeq	r5, [r1], -r4
   157d8:	strdeq	r5, [r1], -r4
   157dc:	strdeq	r5, [r1], -r4
   157e0:	strdeq	r5, [r1], -r4
   157e4:	andeq	r5, r1, r8, lsl r8
   157e8:	andeq	r5, r1, ip, lsl #20
   157ec:	andeq	r5, r1, r8, lsl r8
   157f0:	andeq	r5, r1, r8, lsl #16
   157f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   157f8:	cmp	r0, #0
   157fc:	beq	15a5c <__assert_fail@plt+0x430c>
   15800:	ldr	r0, [fp, #16]
   15804:	b	15a60 <__assert_fail@plt+0x4310>
   15808:	mov	sl, #0
   1580c:	cmp	r7, #0
   15810:	bne	15c78 <__assert_fail@plt+0x4528>
   15814:	b	15a08 <__assert_fail@plt+0x42b8>
   15818:	mov	sl, #0
   1581c:	cmn	lr, #1
   15820:	beq	159f4 <__assert_fail@plt+0x42a4>
   15824:	cmp	r7, #0
   15828:	cmpeq	lr, #1
   1582c:	bne	15c78 <__assert_fail@plt+0x4528>
   15830:	b	15a08 <__assert_fail@plt+0x42b8>
   15834:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15838:	cmp	r0, #2
   1583c:	bne	15a2c <__assert_fail@plt+0x42dc>
   15840:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15844:	tst	r0, #1
   15848:	bne	16198 <__assert_fail@plt+0x4a48>
   1584c:	mov	r9, #0
   15850:	mov	r0, #92	; 0x5c
   15854:	b	15a40 <__assert_fail@plt+0x42f0>
   15858:	mov	r0, #102	; 0x66
   1585c:	b	15a48 <__assert_fail@plt+0x42f8>
   15860:	mov	r2, #116	; 0x74
   15864:	b	15874 <__assert_fail@plt+0x4124>
   15868:	mov	r0, #98	; 0x62
   1586c:	b	15a48 <__assert_fail@plt+0x42f8>
   15870:	mov	r2, #114	; 0x72
   15874:	ldr	r0, [sp, #60]	; 0x3c
   15878:	tst	r0, #1
   1587c:	mov	r0, r2
   15880:	bne	15a48 <__assert_fail@plt+0x42f8>
   15884:	b	16198 <__assert_fail@plt+0x4a48>
   15888:	ldr	r0, [sp, #84]	; 0x54
   1588c:	tst	r0, #1
   15890:	beq	15b34 <__assert_fail@plt+0x43e4>
   15894:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15898:	tst	r0, #1
   1589c:	bne	162a0 <__assert_fail@plt+0x4b50>
   158a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   158a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   158a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   158ac:	cmp	r0, #2
   158b0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   158b4:	movwne	r0, #1
   158b8:	orr	r0, r0, r3
   158bc:	tst	r0, #1
   158c0:	beq	15fb4 <__assert_fail@plt+0x4864>
   158c4:	mov	r0, r8
   158c8:	b	15ff4 <__assert_fail@plt+0x48a4>
   158cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   158d0:	mov	r9, #0
   158d4:	mov	r5, #63	; 0x3f
   158d8:	cmp	r0, #5
   158dc:	beq	15c80 <__assert_fail@plt+0x4530>
   158e0:	cmp	r0, #2
   158e4:	bne	15d40 <__assert_fail@plt+0x45f0>
   158e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   158ec:	tst	r0, #1
   158f0:	beq	15d44 <__assert_fail@plt+0x45f4>
   158f4:	b	16198 <__assert_fail@plt+0x4a48>
   158f8:	mov	r0, #118	; 0x76
   158fc:	b	15a48 <__assert_fail@plt+0x42f8>
   15900:	mov	r0, #1
   15904:	mov	r5, #39	; 0x27
   15908:	str	r0, [sp, #52]	; 0x34
   1590c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15910:	cmp	r0, #2
   15914:	bne	1599c <__assert_fail@plt+0x424c>
   15918:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1591c:	tst	r0, #1
   15920:	bne	16198 <__assert_fail@plt+0x4a48>
   15924:	ldr	r3, [sp, #68]	; 0x44
   15928:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1592c:	mov	r9, #0
   15930:	clz	r1, r2
   15934:	cmp	r3, #0
   15938:	mov	r0, r3
   1593c:	movwne	r0, #1
   15940:	lsr	r1, r1, #5
   15944:	orrs	r0, r0, r1
   15948:	moveq	r3, r2
   1594c:	moveq	r2, r0
   15950:	cmp	r8, r2
   15954:	str	r3, [sp, #68]	; 0x44
   15958:	str	r2, [fp, #-52]	; 0xffffffcc
   1595c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   15960:	movcc	r0, #39	; 0x27
   15964:	strbcc	r0, [r1, r8]
   15968:	add	r0, r8, #1
   1596c:	cmp	r0, r2
   15970:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15974:	movcc	r1, #92	; 0x5c
   15978:	strbcc	r1, [r3, r0]
   1597c:	add	r0, r8, #2
   15980:	add	r8, r8, #3
   15984:	cmp	r0, r2
   15988:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1598c:	movcc	r1, #39	; 0x27
   15990:	strbcc	r1, [r2, r0]
   15994:	mov	r0, #0
   15998:	str	r0, [fp, #-48]	; 0xffffffd0
   1599c:	mov	sl, #1
   159a0:	b	157f4 <__assert_fail@plt+0x40a4>
   159a4:	ldr	r0, [sp, #32]
   159a8:	cmp	r0, #1
   159ac:	bne	15b58 <__assert_fail@plt+0x4408>
   159b0:	str	lr, [sp, #80]	; 0x50
   159b4:	bl	11594 <__ctype_b_loc@plt>
   159b8:	ldr	r0, [r0]
   159bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   159c0:	mov	r1, #1
   159c4:	add	r0, r0, r5, lsl #1
   159c8:	ldrb	r0, [r0, #1]
   159cc:	ubfx	sl, r0, #6, #1
   159d0:	ldr	r0, [sp, #48]	; 0x30
   159d4:	mov	r2, r1
   159d8:	cmp	r1, #1
   159dc:	orr	r0, sl, r0
   159e0:	bhi	15d4c <__assert_fail@plt+0x45fc>
   159e4:	tst	r0, #1
   159e8:	beq	15d4c <__assert_fail@plt+0x45fc>
   159ec:	ldr	lr, [sp, #80]	; 0x50
   159f0:	b	157f4 <__assert_fail@plt+0x40a4>
   159f4:	cmp	r7, #0
   159f8:	bne	15c74 <__assert_fail@plt+0x4524>
   159fc:	ldrb	r0, [ip, #1]
   15a00:	cmp	r0, #0
   15a04:	bne	15c74 <__assert_fail@plt+0x4524>
   15a08:	mov	r1, #1
   15a0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15a10:	cmp	r0, #2
   15a14:	bne	15a24 <__assert_fail@plt+0x42d4>
   15a18:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15a1c:	tst	r0, #1
   15a20:	bne	16198 <__assert_fail@plt+0x4a48>
   15a24:	mov	sl, r1
   15a28:	b	157f4 <__assert_fail@plt+0x40a4>
   15a2c:	ldr	r1, [sp, #44]	; 0x2c
   15a30:	mov	r9, #0
   15a34:	mov	r0, #92	; 0x5c
   15a38:	cmp	r1, #0
   15a3c:	beq	15a48 <__assert_fail@plt+0x42f8>
   15a40:	mov	sl, #0
   15a44:	b	15f60 <__assert_fail@plt+0x4810>
   15a48:	ldr	r1, [sp, #84]	; 0x54
   15a4c:	mov	sl, #0
   15a50:	mov	r9, #0
   15a54:	tst	r1, #1
   15a58:	bne	15a94 <__assert_fail@plt+0x4344>
   15a5c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15a60:	cmp	r0, #0
   15a64:	mov	r0, r5
   15a68:	beq	15a8c <__assert_fail@plt+0x433c>
   15a6c:	ldr	r1, [fp, #16]
   15a70:	ubfx	r0, r5, #5, #3
   15a74:	mov	r2, #1
   15a78:	ldr	r0, [r1, r0, lsl #2]
   15a7c:	and	r1, r5, #31
   15a80:	tst	r0, r2, lsl r1
   15a84:	mov	r0, r5
   15a88:	bne	15a94 <__assert_fail@plt+0x4344>
   15a8c:	cmp	r6, #0
   15a90:	beq	15f60 <__assert_fail@plt+0x4810>
   15a94:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15a98:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15a9c:	tst	r1, #1
   15aa0:	bne	16174 <__assert_fail@plt+0x4a24>
   15aa4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15aa8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15aac:	cmp	r1, #2
   15ab0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15ab4:	movwne	r1, #1
   15ab8:	orr	r1, r1, r5
   15abc:	tst	r1, #1
   15ac0:	bne	15b04 <__assert_fail@plt+0x43b4>
   15ac4:	cmp	r8, r6
   15ac8:	mov	r5, #1
   15acc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15ad0:	movcc	r1, #39	; 0x27
   15ad4:	strbcc	r1, [r2, r8]
   15ad8:	add	r1, r8, #1
   15adc:	cmp	r1, r6
   15ae0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15ae4:	movcc	r2, #36	; 0x24
   15ae8:	strbcc	r2, [r3, r1]
   15aec:	add	r1, r8, #2
   15af0:	add	r8, r8, #3
   15af4:	cmp	r1, r6
   15af8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15afc:	movcc	r2, #39	; 0x27
   15b00:	strbcc	r2, [r3, r1]
   15b04:	cmp	r8, r6
   15b08:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15b0c:	movcc	r1, #92	; 0x5c
   15b10:	strbcc	r1, [r2, r8]
   15b14:	add	r8, r8, #1
   15b18:	cmp	r8, r6
   15b1c:	and	r4, r4, sl
   15b20:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   15b24:	strbcc	r0, [r1, r8]
   15b28:	add	r8, r8, #1
   15b2c:	add	r7, r7, #1
   15b30:	b	15514 <__assert_fail@plt+0x3dc4>
   15b34:	ldr	r0, [sp, #28]
   15b38:	mov	sl, #0
   15b3c:	mov	r9, #0
   15b40:	mov	r5, #0
   15b44:	cmp	r0, #0
   15b48:	beq	15a5c <__assert_fail@plt+0x430c>
   15b4c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15b50:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15b54:	b	15b2c <__assert_fail@plt+0x43dc>
   15b58:	mov	r0, #0
   15b5c:	cmn	lr, #1
   15b60:	str	r6, [sp, #76]	; 0x4c
   15b64:	str	r4, [sp, #20]
   15b68:	str	r0, [fp, #-36]	; 0xffffffdc
   15b6c:	str	r0, [fp, #-40]	; 0xffffffd8
   15b70:	bne	15b84 <__assert_fail@plt+0x4434>
   15b74:	mov	r0, ip
   15b78:	bl	115ac <strlen@plt>
   15b7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b80:	mov	lr, r0
   15b84:	add	r0, ip, r7
   15b88:	mov	sl, #1
   15b8c:	mov	r6, #0
   15b90:	sub	r4, fp, #40	; 0x28
   15b94:	str	lr, [sp, #80]	; 0x50
   15b98:	str	r0, [sp, #36]	; 0x24
   15b9c:	str	r6, [sp, #40]	; 0x28
   15ba0:	add	r6, r6, r7
   15ba4:	sub	r0, fp, #44	; 0x2c
   15ba8:	mov	r3, r4
   15bac:	add	r1, ip, r6
   15bb0:	sub	r2, lr, r6
   15bb4:	bl	18144 <__assert_fail@plt+0x69f4>
   15bb8:	cmp	r0, #0
   15bbc:	beq	160c8 <__assert_fail@plt+0x4978>
   15bc0:	cmn	r0, #1
   15bc4:	beq	16088 <__assert_fail@plt+0x4938>
   15bc8:	ldr	lr, [sp, #80]	; 0x50
   15bcc:	cmn	r0, #2
   15bd0:	beq	16090 <__assert_fail@plt+0x4940>
   15bd4:	ldr	r2, [sp, #56]	; 0x38
   15bd8:	cmp	r0, #2
   15bdc:	mov	r1, #0
   15be0:	movwcc	r1, #1
   15be4:	eor	r2, r2, #1
   15be8:	orrs	r1, r2, r1
   15bec:	bne	15c38 <__assert_fail@plt+0x44e8>
   15bf0:	ldr	r1, [sp, #40]	; 0x28
   15bf4:	ldr	r2, [sp, #36]	; 0x24
   15bf8:	add	ip, r2, r1
   15bfc:	mov	r2, #1
   15c00:	ldrb	r3, [ip, r2]
   15c04:	sub	r6, r3, #94	; 0x5e
   15c08:	cmp	r6, #30
   15c0c:	bhi	15c20 <__assert_fail@plt+0x44d0>
   15c10:	mov	r4, #1
   15c14:	mov	r1, #1073741829	; 0x40000005
   15c18:	tst	r1, r4, lsl r6
   15c1c:	bne	16194 <__assert_fail@plt+0x4a44>
   15c20:	sub	r3, r3, #91	; 0x5b
   15c24:	cmp	r3, #2
   15c28:	bcc	16194 <__assert_fail@plt+0x4a44>
   15c2c:	add	r2, r2, #1
   15c30:	cmp	r2, r0
   15c34:	bcc	15c00 <__assert_fail@plt+0x44b0>
   15c38:	ldr	r6, [sp, #40]	; 0x28
   15c3c:	add	r6, r0, r6
   15c40:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15c44:	bl	114b0 <iswprint@plt>
   15c48:	cmp	r0, #0
   15c4c:	sub	r4, fp, #40	; 0x28
   15c50:	movwne	r0, #1
   15c54:	and	sl, sl, r0
   15c58:	mov	r0, r4
   15c5c:	bl	11444 <mbsinit@plt>
   15c60:	ldr	lr, [sp, #80]	; 0x50
   15c64:	ldr	ip, [fp, #-84]	; 0xffffffac
   15c68:	cmp	r0, #0
   15c6c:	beq	15b9c <__assert_fail@plt+0x444c>
   15c70:	b	160d0 <__assert_fail@plt+0x4980>
   15c74:	mvn	lr, #0
   15c78:	mov	r9, #0
   15c7c:	b	157f4 <__assert_fail@plt+0x40a4>
   15c80:	ldr	r0, [sp, #24]
   15c84:	cmp	r0, #0
   15c88:	beq	15d40 <__assert_fail@plt+0x45f0>
   15c8c:	add	r0, r7, #2
   15c90:	cmp	r0, lr
   15c94:	bcs	15d40 <__assert_fail@plt+0x45f0>
   15c98:	add	r1, ip, r7
   15c9c:	ldrb	r1, [r1, #1]
   15ca0:	cmp	r1, #63	; 0x3f
   15ca4:	bne	15d40 <__assert_fail@plt+0x45f0>
   15ca8:	ldrb	r5, [ip, r0]
   15cac:	sub	r1, r5, #33	; 0x21
   15cb0:	cmp	r1, #29
   15cb4:	bhi	15d40 <__assert_fail@plt+0x45f0>
   15cb8:	movw	r3, #20929	; 0x51c1
   15cbc:	mov	r2, #1
   15cc0:	movt	r3, #14336	; 0x3800
   15cc4:	tst	r3, r2, lsl r1
   15cc8:	beq	15d40 <__assert_fail@plt+0x45f0>
   15ccc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15cd0:	tst	r1, #1
   15cd4:	bne	162a8 <__assert_fail@plt+0x4b58>
   15cd8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15cdc:	mov	r7, r0
   15ce0:	cmp	r8, r1
   15ce4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15ce8:	movcc	r1, #63	; 0x3f
   15cec:	strbcc	r1, [r2, r8]
   15cf0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15cf4:	add	r1, r8, #1
   15cf8:	cmp	r1, r2
   15cfc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15d00:	movcc	r2, #34	; 0x22
   15d04:	strbcc	r2, [r3, r1]
   15d08:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15d0c:	add	r1, r8, #2
   15d10:	cmp	r1, r2
   15d14:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15d18:	movcc	r2, #34	; 0x22
   15d1c:	strbcc	r2, [r3, r1]
   15d20:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15d24:	add	r1, r8, #3
   15d28:	add	r8, r8, #4
   15d2c:	cmp	r1, r2
   15d30:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15d34:	movcc	r2, #63	; 0x3f
   15d38:	strbcc	r2, [r3, r1]
   15d3c:	b	15d44 <__assert_fail@plt+0x45f4>
   15d40:	mov	r5, #63	; 0x3f
   15d44:	mov	sl, #0
   15d48:	b	157f4 <__assert_fail@plt+0x40a4>
   15d4c:	str	r0, [sp, #40]	; 0x28
   15d50:	add	r0, r2, r7
   15d54:	str	r6, [sp, #76]	; 0x4c
   15d58:	add	r1, r7, #1
   15d5c:	ldr	lr, [sp, #80]	; 0x50
   15d60:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15d64:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15d68:	mov	r3, #0
   15d6c:	str	r0, [sp, #36]	; 0x24
   15d70:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15d74:	b	15e08 <__assert_fail@plt+0x46b8>
   15d78:	str	r0, [sp, #76]	; 0x4c
   15d7c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15d80:	cmp	r9, #0
   15d84:	movwne	r9, #1
   15d88:	mvn	r7, r0
   15d8c:	orr	r7, r7, r9
   15d90:	tst	r7, #1
   15d94:	bne	15de4 <__assert_fail@plt+0x4694>
   15d98:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15d9c:	cmp	r8, r6
   15da0:	bcs	15db8 <__assert_fail@plt+0x4668>
   15da4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   15da8:	mov	r2, r4
   15dac:	mov	r4, #39	; 0x27
   15db0:	strb	r4, [r7, r8]
   15db4:	mov	r4, r2
   15db8:	add	r7, r8, #1
   15dbc:	cmp	r7, r6
   15dc0:	bcs	15dd8 <__assert_fail@plt+0x4688>
   15dc4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15dc8:	mov	r2, r4
   15dcc:	mov	r4, #39	; 0x27
   15dd0:	strb	r4, [r0, r7]
   15dd4:	mov	r4, r2
   15dd8:	add	r8, r8, #2
   15ddc:	mov	r0, #0
   15de0:	b	15dec <__assert_fail@plt+0x469c>
   15de4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15de8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15dec:	cmp	r8, r6
   15df0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15df4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15df8:	strbcc	r5, [r2, r8]
   15dfc:	add	r8, r8, #1
   15e00:	ldrb	r5, [ip, r1]
   15e04:	add	r1, r1, #1
   15e08:	ldr	r2, [sp, #40]	; 0x28
   15e0c:	tst	r2, #1
   15e10:	beq	15e4c <__assert_fail@plt+0x46fc>
   15e14:	ldr	r2, [sp, #76]	; 0x4c
   15e18:	str	r0, [fp, #-48]	; 0xffffffd0
   15e1c:	tst	r2, #1
   15e20:	beq	15e44 <__assert_fail@plt+0x46f4>
   15e24:	cmp	r8, r6
   15e28:	bcs	15e40 <__assert_fail@plt+0x46f0>
   15e2c:	ldr	r6, [fp, #-56]	; 0xffffffc8
   15e30:	mov	r2, r4
   15e34:	mov	r4, #92	; 0x5c
   15e38:	strb	r4, [r6, r8]
   15e3c:	mov	r4, r2
   15e40:	add	r8, r8, #1
   15e44:	mov	r0, #0
   15e48:	b	15f40 <__assert_fail@plt+0x47f0>
   15e4c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15e50:	tst	r2, #1
   15e54:	bne	161a0 <__assert_fail@plt+0x4a50>
   15e58:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15e5c:	cmp	r7, #2
   15e60:	movwne	r3, #1
   15e64:	orr	r3, r3, r0
   15e68:	tst	r3, #1
   15e6c:	bne	15ec8 <__assert_fail@plt+0x4778>
   15e70:	cmp	r8, r6
   15e74:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15e78:	movcc	r3, #39	; 0x27
   15e7c:	strbcc	r3, [r2, r8]
   15e80:	add	r3, r8, #1
   15e84:	cmp	r3, r6
   15e88:	bcs	15ea0 <__assert_fail@plt+0x4750>
   15e8c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15e90:	mov	r7, r4
   15e94:	mov	r4, #36	; 0x24
   15e98:	strb	r4, [r2, r3]
   15e9c:	mov	r4, r7
   15ea0:	add	r3, r8, #2
   15ea4:	cmp	r3, r6
   15ea8:	bcs	15ec0 <__assert_fail@plt+0x4770>
   15eac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15eb0:	mov	r7, r4
   15eb4:	mov	r4, #39	; 0x27
   15eb8:	strb	r4, [r2, r3]
   15ebc:	mov	r4, r7
   15ec0:	add	r8, r8, #3
   15ec4:	mov	r0, #1
   15ec8:	cmp	r8, r6
   15ecc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15ed0:	movcc	r3, #92	; 0x5c
   15ed4:	strbcc	r3, [r2, r8]
   15ed8:	add	r3, r8, #1
   15edc:	cmp	r3, r6
   15ee0:	bcs	15f00 <__assert_fail@plt+0x47b0>
   15ee4:	mov	r2, r4
   15ee8:	and	r7, r5, #192	; 0xc0
   15eec:	mov	r4, #48	; 0x30
   15ef0:	orr	r7, r4, r7, lsr #6
   15ef4:	mov	r4, r2
   15ef8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15efc:	strb	r7, [r2, r3]
   15f00:	add	r3, r8, #2
   15f04:	cmp	r3, r6
   15f08:	bcs	15f28 <__assert_fail@plt+0x47d8>
   15f0c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15f10:	mov	r6, r4
   15f14:	lsr	r7, r5, #3
   15f18:	mov	r4, #6
   15f1c:	bfi	r7, r4, #3, #29
   15f20:	mov	r4, r6
   15f24:	strb	r7, [r2, r3]
   15f28:	str	r0, [fp, #-48]	; 0xffffffd0
   15f2c:	ldr	r0, [sp, #76]	; 0x4c
   15f30:	mov	r3, #6
   15f34:	add	r8, r8, #3
   15f38:	bfi	r5, r3, #3, #29
   15f3c:	mov	r3, #1
   15f40:	ldr	r2, [sp, #36]	; 0x24
   15f44:	and	r9, r3, #1
   15f48:	cmp	r2, r1
   15f4c:	bhi	15d78 <__assert_fail@plt+0x4628>
   15f50:	cmp	r9, #0
   15f54:	sub	r7, r1, #1
   15f58:	mov	r0, r5
   15f5c:	movwne	r9, #1
   15f60:	cmp	r9, #0
   15f64:	bne	15fa8 <__assert_fail@plt+0x4858>
   15f68:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15f6c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15f70:	tst	r5, #1
   15f74:	beq	15b18 <__assert_fail@plt+0x43c8>
   15f78:	cmp	r8, r6
   15f7c:	mov	r5, #0
   15f80:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15f84:	movcc	r1, #39	; 0x27
   15f88:	strbcc	r1, [r2, r8]
   15f8c:	add	r1, r8, #1
   15f90:	add	r8, r8, #2
   15f94:	cmp	r1, r6
   15f98:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15f9c:	movcc	r2, #39	; 0x27
   15fa0:	strbcc	r2, [r3, r1]
   15fa4:	b	15b18 <__assert_fail@plt+0x43c8>
   15fa8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   15fac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15fb0:	b	15b18 <__assert_fail@plt+0x43c8>
   15fb4:	cmp	r8, r1
   15fb8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   15fbc:	movcc	r0, #39	; 0x27
   15fc0:	strbcc	r0, [r2, r8]
   15fc4:	add	r0, r8, #1
   15fc8:	cmp	r0, r1
   15fcc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15fd0:	movcc	r2, #36	; 0x24
   15fd4:	strbcc	r2, [r3, r0]
   15fd8:	add	r0, r8, #2
   15fdc:	cmp	r0, r1
   15fe0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   15fe4:	movcc	r2, #39	; 0x27
   15fe8:	strbcc	r2, [r3, r0]
   15fec:	add	r0, r8, #3
   15ff0:	mov	r3, #1
   15ff4:	cmp	r0, r1
   15ff8:	add	r8, r0, #1
   15ffc:	str	r3, [fp, #-48]	; 0xffffffd0
   16000:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16004:	movcc	r1, #92	; 0x5c
   16008:	strbcc	r1, [r2, r0]
   1600c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16010:	cmp	r1, #2
   16014:	beq	16078 <__assert_fail@plt+0x4928>
   16018:	add	r1, r7, #1
   1601c:	mov	sl, #0
   16020:	mov	r9, #1
   16024:	mov	r5, #48	; 0x30
   16028:	cmp	r1, lr
   1602c:	bcs	157f4 <__assert_fail@plt+0x40a4>
   16030:	ldrb	r1, [ip, r1]
   16034:	sub	r1, r1, #48	; 0x30
   16038:	uxtb	r1, r1
   1603c:	cmp	r1, #9
   16040:	bhi	157f4 <__assert_fail@plt+0x40a4>
   16044:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16048:	cmp	r8, r1
   1604c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16050:	movcc	r1, #48	; 0x30
   16054:	strbcc	r1, [r2, r8]
   16058:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1605c:	add	r1, r0, #2
   16060:	add	r8, r0, #3
   16064:	cmp	r1, r2
   16068:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1606c:	movcc	r2, #48	; 0x30
   16070:	strbcc	r2, [r3, r1]
   16074:	b	157f4 <__assert_fail@plt+0x40a4>
   16078:	mov	r0, #48	; 0x30
   1607c:	mov	r9, #1
   16080:	mov	sl, #0
   16084:	b	15a8c <__assert_fail@plt+0x433c>
   16088:	mov	sl, #0
   1608c:	b	160c8 <__assert_fail@plt+0x4978>
   16090:	mov	sl, #0
   16094:	cmp	lr, r6
   16098:	bls	160c8 <__assert_fail@plt+0x4978>
   1609c:	ldr	ip, [fp, #-84]	; 0xffffffac
   160a0:	ldr	r6, [sp, #40]	; 0x28
   160a4:	ldr	r0, [sp, #36]	; 0x24
   160a8:	ldrb	r0, [r0, r6]
   160ac:	cmp	r0, #0
   160b0:	beq	160d0 <__assert_fail@plt+0x4980>
   160b4:	add	r6, r6, #1
   160b8:	add	r0, r7, r6
   160bc:	cmp	r0, lr
   160c0:	bcc	160a4 <__assert_fail@plt+0x4954>
   160c4:	b	160d0 <__assert_fail@plt+0x4980>
   160c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   160cc:	ldr	r6, [sp, #40]	; 0x28
   160d0:	mov	r1, r6
   160d4:	ldr	r4, [sp, #20]
   160d8:	ldr	r6, [sp, #76]	; 0x4c
   160dc:	b	159d0 <__assert_fail@plt+0x4280>
   160e0:	mov	lr, r7
   160e4:	b	160ec <__assert_fail@plt+0x499c>
   160e8:	mvn	lr, #0
   160ec:	ldr	r9, [fp, #-64]	; 0xffffffc0
   160f0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   160f4:	eor	r0, r9, #2
   160f8:	orr	r0, r0, r8
   160fc:	clz	r0, r0
   16100:	lsr	r0, r0, #5
   16104:	tst	r1, r0
   16108:	bne	16204 <__assert_fail@plt+0x4ab4>
   1610c:	mov	r0, r1
   16110:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16114:	cmp	r9, #2
   16118:	movwne	r1, #1
   1611c:	orr	r0, r0, r1
   16120:	tst	r0, #1
   16124:	bne	16244 <__assert_fail@plt+0x4af4>
   16128:	ldr	r0, [sp, #52]	; 0x34
   1612c:	ldr	r1, [sp, #68]	; 0x44
   16130:	str	lr, [sp, #80]	; 0x50
   16134:	eor	r0, r0, #1
   16138:	tst	r0, #1
   1613c:	bne	16244 <__assert_fail@plt+0x4af4>
   16140:	tst	r4, #1
   16144:	bne	1620c <__assert_fail@plt+0x4abc>
   16148:	mov	r7, #0
   1614c:	cmp	r1, #0
   16150:	beq	1623c <__assert_fail@plt+0x4aec>
   16154:	ldr	r0, [sp, #84]	; 0x54
   16158:	mov	r3, #0
   1615c:	cmp	r6, #0
   16160:	mov	r2, #0
   16164:	mov	r4, r1
   16168:	str	r3, [fp, #-72]	; 0xffffffb8
   1616c:	beq	152a8 <__assert_fail@plt+0x3b58>
   16170:	b	16244 <__assert_fail@plt+0x4af4>
   16174:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16178:	b	161a0 <__assert_fail@plt+0x4a50>
   1617c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16180:	mov	r2, #1
   16184:	mov	lr, r4
   16188:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1618c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16190:	b	161a4 <__assert_fail@plt+0x4a54>
   16194:	ldr	ip, [fp, #-84]	; 0xffffffac
   16198:	mov	r7, #2
   1619c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   161a0:	ldr	r2, [sp, #84]	; 0x54
   161a4:	mov	r0, #0
   161a8:	ldr	r1, [fp, #12]
   161ac:	tst	r2, #1
   161b0:	mov	r2, r7
   161b4:	mov	r3, lr
   161b8:	str	r0, [sp, #8]
   161bc:	ldr	r0, [sp, #64]	; 0x40
   161c0:	movwne	r2, #4
   161c4:	cmp	r7, #2
   161c8:	movne	r2, r7
   161cc:	str	r2, [sp]
   161d0:	mov	r2, ip
   161d4:	bic	r1, r1, #2
   161d8:	str	r0, [sp, #12]
   161dc:	ldr	r0, [sp, #72]	; 0x48
   161e0:	str	r1, [sp, #4]
   161e4:	mov	r1, r6
   161e8:	str	r0, [sp, #16]
   161ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   161f0:	bl	15230 <__assert_fail@plt+0x3ae0>
   161f4:	mov	r8, r0
   161f8:	mov	r0, r8
   161fc:	sub	sp, fp, #28
   16200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16204:	mov	r7, #2
   16208:	b	161a0 <__assert_fail@plt+0x4a50>
   1620c:	mov	r0, #5
   16210:	ldr	r2, [fp, #-84]	; 0xffffffac
   16214:	ldr	r3, [sp, #80]	; 0x50
   16218:	str	r0, [sp]
   1621c:	ldr	r0, [fp, #12]
   16220:	str	r0, [sp, #4]
   16224:	ldr	r0, [fp, #16]
   16228:	str	r0, [sp, #8]
   1622c:	ldr	r0, [sp, #64]	; 0x40
   16230:	str	r0, [sp, #12]
   16234:	ldr	r0, [sp, #72]	; 0x48
   16238:	b	161e8 <__assert_fail@plt+0x4a98>
   1623c:	mov	r0, #0
   16240:	str	r0, [fp, #-72]	; 0xffffffb8
   16244:	ldr	r1, [sp, #92]	; 0x5c
   16248:	cmp	r1, #0
   1624c:	beq	1628c <__assert_fail@plt+0x4b3c>
   16250:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16254:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16258:	tst	r0, #1
   1625c:	bne	16290 <__assert_fail@plt+0x4b40>
   16260:	ldrb	r0, [r1]
   16264:	cmp	r0, #0
   16268:	beq	16290 <__assert_fail@plt+0x4b40>
   1626c:	add	r1, r1, #1
   16270:	cmp	r8, r6
   16274:	strbcc	r0, [r2, r8]
   16278:	add	r8, r8, #1
   1627c:	ldrb	r0, [r1], #1
   16280:	cmp	r0, #0
   16284:	bne	16270 <__assert_fail@plt+0x4b20>
   16288:	b	16290 <__assert_fail@plt+0x4b40>
   1628c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16290:	cmp	r8, r6
   16294:	movcc	r0, #0
   16298:	strbcc	r0, [r2, r8]
   1629c:	b	161f8 <__assert_fail@plt+0x4aa8>
   162a0:	mov	r2, #1
   162a4:	b	16188 <__assert_fail@plt+0x4a38>
   162a8:	mov	r7, #5
   162ac:	b	1619c <__assert_fail@plt+0x4a4c>
   162b0:	bl	1172c <abort@plt>
   162b4:	mov	r3, r2
   162b8:	mov	r2, #0
   162bc:	b	162c0 <__assert_fail@plt+0x4b70>
   162c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162c4:	add	fp, sp, #28
   162c8:	sub	sp, sp, #36	; 0x24
   162cc:	movw	r8, #42304	; 0xa540
   162d0:	cmp	r3, #0
   162d4:	mov	r4, r2
   162d8:	str	r2, [sp, #24]
   162dc:	mov	r5, r1
   162e0:	mov	r6, r0
   162e4:	str	r0, [sp, #20]
   162e8:	movt	r8, #2
   162ec:	movne	r8, r3
   162f0:	bl	115f4 <__errno_location@plt>
   162f4:	str	r0, [sp, #28]
   162f8:	cmp	r4, #0
   162fc:	add	sl, r8, #8
   16300:	ldm	r8, {r3, r9}
   16304:	ldr	r7, [r0]
   16308:	ldr	r1, [r8, #40]	; 0x28
   1630c:	ldr	r2, [r8, #44]	; 0x2c
   16310:	mov	r0, #0
   16314:	orreq	r9, r9, #1
   16318:	str	r7, [sp, #32]
   1631c:	mov	r7, r5
   16320:	stm	sp, {r3, r9, sl}
   16324:	str	r1, [sp, #12]
   16328:	str	r2, [sp, #16]
   1632c:	mov	r1, #0
   16330:	mov	r2, r6
   16334:	mov	r3, r5
   16338:	bl	15230 <__assert_fail@plt+0x3ae0>
   1633c:	add	r4, r0, #1
   16340:	mov	r5, r0
   16344:	mov	r0, r4
   16348:	bl	1739c <__assert_fail@plt+0x5c4c>
   1634c:	mov	r6, r0
   16350:	ldr	r0, [r8]
   16354:	ldr	r2, [r8, #44]	; 0x2c
   16358:	ldr	r1, [r8, #40]	; 0x28
   1635c:	mov	r3, r7
   16360:	stm	sp, {r0, r9, sl}
   16364:	str	r2, [sp, #16]
   16368:	str	r1, [sp, #12]
   1636c:	mov	r0, r6
   16370:	mov	r1, r4
   16374:	ldr	r2, [sp, #20]
   16378:	bl	15230 <__assert_fail@plt+0x3ae0>
   1637c:	ldr	r0, [sp, #24]
   16380:	ldr	r1, [sp, #32]
   16384:	ldr	r2, [sp, #28]
   16388:	cmp	r0, #0
   1638c:	str	r1, [r2]
   16390:	strne	r5, [r0]
   16394:	mov	r0, r6
   16398:	sub	sp, fp, #28
   1639c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163a4:	add	fp, sp, #24
   163a8:	movw	r5, #41332	; 0xa174
   163ac:	movw	r8, #41328	; 0xa170
   163b0:	movt	r5, #2
   163b4:	movt	r8, #2
   163b8:	ldr	r0, [r5]
   163bc:	ldr	r4, [r8]
   163c0:	cmp	r0, #2
   163c4:	blt	163f0 <__assert_fail@plt+0x4ca0>
   163c8:	add	r7, r4, #12
   163cc:	mov	r6, #0
   163d0:	ldr	r0, [r7, r6, lsl #3]
   163d4:	bl	14e64 <__assert_fail@plt+0x3714>
   163d8:	ldr	r1, [r5]
   163dc:	add	r2, r6, #2
   163e0:	add	r0, r6, #1
   163e4:	mov	r6, r0
   163e8:	cmp	r2, r1
   163ec:	blt	163d0 <__assert_fail@plt+0x4c80>
   163f0:	ldr	r0, [r4, #4]
   163f4:	movw	r7, #42352	; 0xa570
   163f8:	movt	r7, #2
   163fc:	cmp	r0, r7
   16400:	beq	16418 <__assert_fail@plt+0x4cc8>
   16404:	bl	14e64 <__assert_fail@plt+0x3714>
   16408:	movw	r0, #41336	; 0xa178
   1640c:	mov	r6, #256	; 0x100
   16410:	movt	r0, #2
   16414:	strd	r6, [r0]
   16418:	movw	r6, #41336	; 0xa178
   1641c:	movt	r6, #2
   16420:	cmp	r4, r6
   16424:	beq	16434 <__assert_fail@plt+0x4ce4>
   16428:	mov	r0, r4
   1642c:	bl	14e64 <__assert_fail@plt+0x3714>
   16430:	str	r6, [r8]
   16434:	mov	r0, #1
   16438:	str	r0, [r5]
   1643c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16440:	movw	r3, #42304	; 0xa540
   16444:	mvn	r2, #0
   16448:	movt	r3, #2
   1644c:	b	16450 <__assert_fail@plt+0x4d00>
   16450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16454:	add	fp, sp, #28
   16458:	sub	sp, sp, #44	; 0x2c
   1645c:	mov	r7, r3
   16460:	str	r2, [sp, #36]	; 0x24
   16464:	str	r1, [sp, #32]
   16468:	mov	r5, r0
   1646c:	bl	115f4 <__errno_location@plt>
   16470:	cmp	r5, #0
   16474:	blt	165e0 <__assert_fail@plt+0x4e90>
   16478:	cmn	r5, #-2147483647	; 0x80000001
   1647c:	beq	165e0 <__assert_fail@plt+0x4e90>
   16480:	movw	r8, #41332	; 0xa174
   16484:	movw	r4, #41328	; 0xa170
   16488:	str	r0, [sp, #28]
   1648c:	ldr	r0, [r0]
   16490:	movt	r8, #2
   16494:	movt	r4, #2
   16498:	ldr	r1, [r8]
   1649c:	ldr	r6, [r4]
   164a0:	str	r0, [sp, #24]
   164a4:	cmp	r1, r5
   164a8:	ble	164b4 <__assert_fail@plt+0x4d64>
   164ac:	mov	sl, r6
   164b0:	b	1651c <__assert_fail@plt+0x4dcc>
   164b4:	movw	r9, #41336	; 0xa178
   164b8:	mov	r0, #8
   164bc:	add	r2, r5, #1
   164c0:	str	r1, [fp, #-32]	; 0xffffffe0
   164c4:	mvn	r3, #-2147483648	; 0x80000000
   164c8:	movt	r9, #2
   164cc:	str	r0, [sp]
   164d0:	sub	r2, r2, r1
   164d4:	sub	r1, fp, #32
   164d8:	subs	r0, r6, r9
   164dc:	movne	r0, r6
   164e0:	bl	174cc <__assert_fail@plt+0x5d7c>
   164e4:	cmp	r6, r9
   164e8:	mov	sl, r0
   164ec:	str	r0, [r4]
   164f0:	ldrdeq	r0, [r9]
   164f4:	stmeq	sl, {r0, r1}
   164f8:	ldr	r1, [r8]
   164fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16500:	add	r0, sl, r1, lsl #3
   16504:	sub	r1, r2, r1
   16508:	lsl	r2, r1, #3
   1650c:	mov	r1, #0
   16510:	bl	11618 <memset@plt>
   16514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16518:	str	r0, [r8]
   1651c:	mov	r9, sl
   16520:	ldr	r6, [r9, r5, lsl #3]!
   16524:	ldr	r4, [r9, #4]!
   16528:	ldm	r7, {r0, r1}
   1652c:	ldr	r2, [r7, #40]	; 0x28
   16530:	ldr	r3, [r7, #44]	; 0x2c
   16534:	orr	r8, r1, #1
   16538:	add	r1, r7, #8
   1653c:	stm	sp, {r0, r8}
   16540:	add	r0, sp, #8
   16544:	str	r1, [sp, #20]
   16548:	stm	r0, {r1, r2, r3}
   1654c:	mov	r0, r4
   16550:	mov	r1, r6
   16554:	ldr	r2, [sp, #32]
   16558:	ldr	r3, [sp, #36]	; 0x24
   1655c:	bl	15230 <__assert_fail@plt+0x3ae0>
   16560:	cmp	r6, r0
   16564:	bhi	165c8 <__assert_fail@plt+0x4e78>
   16568:	add	r6, r0, #1
   1656c:	movw	r0, #42352	; 0xa570
   16570:	movt	r0, #2
   16574:	str	r6, [sl, r5, lsl #3]
   16578:	cmp	r4, r0
   1657c:	beq	16588 <__assert_fail@plt+0x4e38>
   16580:	mov	r0, r4
   16584:	bl	14e64 <__assert_fail@plt+0x3714>
   16588:	mov	r0, r6
   1658c:	bl	1739c <__assert_fail@plt+0x5c4c>
   16590:	str	r0, [r9]
   16594:	mov	r4, r0
   16598:	add	r3, sp, #8
   1659c:	ldr	r0, [r7]
   165a0:	ldr	r1, [r7, #40]	; 0x28
   165a4:	ldr	r2, [r7, #44]	; 0x2c
   165a8:	stm	sp, {r0, r8}
   165ac:	ldr	r0, [sp, #20]
   165b0:	stm	r3, {r0, r1, r2}
   165b4:	mov	r0, r4
   165b8:	mov	r1, r6
   165bc:	ldr	r2, [sp, #32]
   165c0:	ldr	r3, [sp, #36]	; 0x24
   165c4:	bl	15230 <__assert_fail@plt+0x3ae0>
   165c8:	ldr	r0, [sp, #28]
   165cc:	ldr	r1, [sp, #24]
   165d0:	str	r1, [r0]
   165d4:	mov	r0, r4
   165d8:	sub	sp, fp, #28
   165dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165e0:	bl	1172c <abort@plt>
   165e4:	movw	r3, #42304	; 0xa540
   165e8:	movt	r3, #2
   165ec:	b	16450 <__assert_fail@plt+0x4d00>
   165f0:	movw	r3, #42304	; 0xa540
   165f4:	mov	r1, r0
   165f8:	mov	r0, #0
   165fc:	mvn	r2, #0
   16600:	movt	r3, #2
   16604:	b	16450 <__assert_fail@plt+0x4d00>
   16608:	movw	r3, #42304	; 0xa540
   1660c:	mov	r2, r1
   16610:	mov	r1, r0
   16614:	mov	r0, #0
   16618:	movt	r3, #2
   1661c:	b	16450 <__assert_fail@plt+0x4d00>
   16620:	push	{fp, lr}
   16624:	mov	fp, sp
   16628:	sub	sp, sp, #48	; 0x30
   1662c:	vmov.i32	q8, #0	; 0x00000000
   16630:	mov	ip, #32
   16634:	mov	r3, sp
   16638:	mov	lr, r2
   1663c:	cmp	r1, #10
   16640:	add	r2, r3, #16
   16644:	vst1.64	{d16-d17}, [r3], ip
   16648:	vst1.64	{d16-d17}, [r3]
   1664c:	vst1.64	{d16-d17}, [r2]
   16650:	beq	16670 <__assert_fail@plt+0x4f20>
   16654:	str	r1, [sp]
   16658:	mov	r3, sp
   1665c:	mov	r1, lr
   16660:	mvn	r2, #0
   16664:	bl	16450 <__assert_fail@plt+0x4d00>
   16668:	mov	sp, fp
   1666c:	pop	{fp, pc}
   16670:	bl	1172c <abort@plt>
   16674:	push	{r4, sl, fp, lr}
   16678:	add	fp, sp, #8
   1667c:	sub	sp, sp, #48	; 0x30
   16680:	mov	ip, r3
   16684:	mov	r3, sp
   16688:	vmov.i32	q8, #0	; 0x00000000
   1668c:	mov	lr, #32
   16690:	cmp	r1, #10
   16694:	add	r4, r3, #16
   16698:	vst1.64	{d16-d17}, [r3], lr
   1669c:	vst1.64	{d16-d17}, [r3]
   166a0:	vst1.64	{d16-d17}, [r4]
   166a4:	beq	166c4 <__assert_fail@plt+0x4f74>
   166a8:	str	r1, [sp]
   166ac:	mov	r1, r2
   166b0:	mov	r3, sp
   166b4:	mov	r2, ip
   166b8:	bl	16450 <__assert_fail@plt+0x4d00>
   166bc:	sub	sp, fp, #8
   166c0:	pop	{r4, sl, fp, pc}
   166c4:	bl	1172c <abort@plt>
   166c8:	mov	r2, r1
   166cc:	mov	r1, r0
   166d0:	mov	r0, #0
   166d4:	b	16620 <__assert_fail@plt+0x4ed0>
   166d8:	mov	r3, r2
   166dc:	mov	r2, r1
   166e0:	mov	r1, r0
   166e4:	mov	r0, #0
   166e8:	b	16674 <__assert_fail@plt+0x4f24>
   166ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   166f0:	add	fp, sp, #24
   166f4:	sub	sp, sp, #48	; 0x30
   166f8:	movw	r8, #42304	; 0xa540
   166fc:	mov	lr, r0
   16700:	mov	r3, sp
   16704:	mov	ip, r1
   16708:	movt	r8, #2
   1670c:	mov	r1, r3
   16710:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   16714:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   16718:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   1671c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   16720:	ubfx	r0, r2, #5, #3
   16724:	and	r2, r2, #31
   16728:	mov	r4, #1
   1672c:	add	r0, r3, r0, lsl #2
   16730:	ldr	r1, [r0, #8]
   16734:	bic	r4, r4, r1, lsr r2
   16738:	eor	r1, r1, r4, lsl r2
   1673c:	mov	r2, ip
   16740:	str	r1, [r0, #8]
   16744:	mov	r0, #0
   16748:	mov	r1, lr
   1674c:	bl	16450 <__assert_fail@plt+0x4d00>
   16750:	sub	sp, fp, #24
   16754:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16758:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1675c:	add	fp, sp, #24
   16760:	sub	sp, sp, #48	; 0x30
   16764:	movw	lr, #42304	; 0xa540
   16768:	mov	ip, r0
   1676c:	mov	r3, sp
   16770:	movt	lr, #2
   16774:	mov	r2, r3
   16778:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1677c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   16780:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   16784:	stm	r2, {r0, r4, r5, r6, r7, r8}
   16788:	ubfx	r0, r1, #5, #3
   1678c:	and	r1, r1, #31
   16790:	mov	r7, #1
   16794:	add	r0, r3, r0, lsl #2
   16798:	ldr	r2, [r0, #8]
   1679c:	bic	r7, r7, r2, lsr r1
   167a0:	eor	r1, r2, r7, lsl r1
   167a4:	mvn	r2, #0
   167a8:	str	r1, [r0, #8]
   167ac:	mov	r0, #0
   167b0:	mov	r1, ip
   167b4:	bl	16450 <__assert_fail@plt+0x4d00>
   167b8:	sub	sp, fp, #24
   167bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167c0:	push	{r4, r5, r6, r7, fp, lr}
   167c4:	add	fp, sp, #16
   167c8:	sub	sp, sp, #48	; 0x30
   167cc:	movw	lr, #42304	; 0xa540
   167d0:	mov	ip, r0
   167d4:	mov	r3, sp
   167d8:	movt	lr, #2
   167dc:	mov	r2, r3
   167e0:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   167e4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   167e8:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   167ec:	stm	r2, {r0, r1, r4, r5, r6, r7}
   167f0:	mov	r1, ip
   167f4:	mvn	r2, #0
   167f8:	ldr	r0, [sp, #12]
   167fc:	orr	r0, r0, #67108864	; 0x4000000
   16800:	str	r0, [sp, #12]
   16804:	mov	r0, #0
   16808:	bl	16450 <__assert_fail@plt+0x4d00>
   1680c:	sub	sp, fp, #16
   16810:	pop	{r4, r5, r6, r7, fp, pc}
   16814:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16818:	add	fp, sp, #24
   1681c:	sub	sp, sp, #48	; 0x30
   16820:	movw	r8, #42304	; 0xa540
   16824:	mov	ip, r1
   16828:	mov	lr, r0
   1682c:	mov	r3, sp
   16830:	movt	r8, #2
   16834:	mov	r2, r3
   16838:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1683c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   16840:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   16844:	stm	r2, {r0, r1, r4, r5, r6, r7}
   16848:	mov	r1, lr
   1684c:	mov	r2, ip
   16850:	ldr	r0, [sp, #12]
   16854:	orr	r0, r0, #67108864	; 0x4000000
   16858:	str	r0, [sp, #12]
   1685c:	mov	r0, #0
   16860:	bl	16450 <__assert_fail@plt+0x4d00>
   16864:	sub	sp, fp, #24
   16868:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1686c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16870:	add	fp, sp, #24
   16874:	sub	sp, sp, #96	; 0x60
   16878:	mov	lr, sp
   1687c:	vmov.i32	q8, #0	; 0x00000000
   16880:	mov	ip, r2
   16884:	cmp	r1, #10
   16888:	add	r3, lr, #16
   1688c:	mov	r2, lr
   16890:	vst1.64	{d16-d17}, [r3]
   16894:	mov	r3, #28
   16898:	vst1.64	{d16-d17}, [r2], r3
   1689c:	vst1.32	{d16-d17}, [r2]
   168a0:	beq	168e0 <__assert_fail@plt+0x5190>
   168a4:	str	r1, [sp, #48]	; 0x30
   168a8:	add	r3, sp, #48	; 0x30
   168ac:	ldm	lr!, {r2, r4, r5, r6, r7}
   168b0:	add	r1, r3, #4
   168b4:	stmia	r1!, {r2, r4, r5, r6, r7}
   168b8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   168bc:	stm	r1, {r2, r4, r5, r6, r7, r8}
   168c0:	mvn	r2, #0
   168c4:	ldr	r1, [sp, #60]	; 0x3c
   168c8:	orr	r1, r1, #67108864	; 0x4000000
   168cc:	str	r1, [sp, #60]	; 0x3c
   168d0:	mov	r1, ip
   168d4:	bl	16450 <__assert_fail@plt+0x4d00>
   168d8:	sub	sp, fp, #24
   168dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168e0:	bl	1172c <abort@plt>
   168e4:	push	{fp, lr}
   168e8:	mov	fp, sp
   168ec:	sub	sp, sp, #8
   168f0:	mvn	ip, #0
   168f4:	str	ip, [sp]
   168f8:	bl	16904 <__assert_fail@plt+0x51b4>
   168fc:	mov	sp, fp
   16900:	pop	{fp, pc}
   16904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16908:	add	fp, sp, #24
   1690c:	sub	sp, sp, #48	; 0x30
   16910:	movw	ip, #42304	; 0xa540
   16914:	mov	lr, r3
   16918:	mov	r3, sp
   1691c:	cmp	r1, #0
   16920:	movt	ip, #2
   16924:	cmpne	r2, #0
   16928:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   1692c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   16930:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   16934:	stm	r3, {r4, r5, r6, r7, r8, r9}
   16938:	mov	r3, #10
   1693c:	str	r3, [sp]
   16940:	bne	16948 <__assert_fail@plt+0x51f8>
   16944:	bl	1172c <abort@plt>
   16948:	ldr	ip, [fp, #8]
   1694c:	str	r2, [sp, #44]	; 0x2c
   16950:	str	r1, [sp, #40]	; 0x28
   16954:	mov	r3, sp
   16958:	mov	r1, lr
   1695c:	mov	r2, ip
   16960:	bl	16450 <__assert_fail@plt+0x4d00>
   16964:	sub	sp, fp, #24
   16968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1696c:	push	{fp, lr}
   16970:	mov	fp, sp
   16974:	sub	sp, sp, #8
   16978:	mov	r3, r2
   1697c:	mov	r2, r1
   16980:	mov	r1, r0
   16984:	mvn	r0, #0
   16988:	str	r0, [sp]
   1698c:	mov	r0, #0
   16990:	bl	16904 <__assert_fail@plt+0x51b4>
   16994:	mov	sp, fp
   16998:	pop	{fp, pc}
   1699c:	push	{fp, lr}
   169a0:	mov	fp, sp
   169a4:	sub	sp, sp, #8
   169a8:	mov	ip, r2
   169ac:	mov	r2, r1
   169b0:	mov	r1, r0
   169b4:	str	r3, [sp]
   169b8:	mov	r0, #0
   169bc:	mov	r3, ip
   169c0:	bl	16904 <__assert_fail@plt+0x51b4>
   169c4:	mov	sp, fp
   169c8:	pop	{fp, pc}
   169cc:	movw	r3, #41344	; 0xa180
   169d0:	movt	r3, #2
   169d4:	b	16450 <__assert_fail@plt+0x4d00>
   169d8:	movw	r3, #41344	; 0xa180
   169dc:	mov	r2, r1
   169e0:	mov	r1, r0
   169e4:	mov	r0, #0
   169e8:	movt	r3, #2
   169ec:	b	16450 <__assert_fail@plt+0x4d00>
   169f0:	movw	r3, #41344	; 0xa180
   169f4:	mvn	r2, #0
   169f8:	movt	r3, #2
   169fc:	b	16450 <__assert_fail@plt+0x4d00>
   16a00:	movw	r3, #41344	; 0xa180
   16a04:	mov	r1, r0
   16a08:	mov	r0, #0
   16a0c:	mvn	r2, #0
   16a10:	movt	r3, #2
   16a14:	b	16450 <__assert_fail@plt+0x4d00>
   16a18:	push	{r4, r5, fp, lr}
   16a1c:	add	fp, sp, #8
   16a20:	mov	r5, r0
   16a24:	mov	r4, r1
   16a28:	mov	r0, #0
   16a2c:	mov	r2, #5
   16a30:	mov	r1, r5
   16a34:	bl	11474 <dcgettext@plt>
   16a38:	cmp	r0, r5
   16a3c:	popne	{r4, r5, fp, pc}
   16a40:	bl	1810c <__assert_fail@plt+0x69bc>
   16a44:	ldrb	r1, [r0]
   16a48:	and	r1, r1, #223	; 0xdf
   16a4c:	cmp	r1, #71	; 0x47
   16a50:	beq	16ab8 <__assert_fail@plt+0x5368>
   16a54:	cmp	r1, #85	; 0x55
   16a58:	bne	16adc <__assert_fail@plt+0x538c>
   16a5c:	ldrb	r1, [r0, #1]
   16a60:	and	r1, r1, #223	; 0xdf
   16a64:	cmp	r1, #84	; 0x54
   16a68:	bne	16adc <__assert_fail@plt+0x538c>
   16a6c:	ldrb	r1, [r0, #2]
   16a70:	and	r1, r1, #223	; 0xdf
   16a74:	cmp	r1, #70	; 0x46
   16a78:	ldrbeq	r1, [r0, #3]
   16a7c:	cmpeq	r1, #45	; 0x2d
   16a80:	bne	16adc <__assert_fail@plt+0x538c>
   16a84:	ldrb	r1, [r0, #4]
   16a88:	cmp	r1, #56	; 0x38
   16a8c:	ldrbeq	r0, [r0, #5]
   16a90:	cmpeq	r0, #0
   16a94:	bne	16adc <__assert_fail@plt+0x538c>
   16a98:	ldrb	r1, [r5]
   16a9c:	movw	r2, #39283	; 0x9973
   16aa0:	movw	r0, #39287	; 0x9977
   16aa4:	movt	r2, #1
   16aa8:	movt	r0, #1
   16aac:	cmp	r1, #96	; 0x60
   16ab0:	moveq	r0, r2
   16ab4:	pop	{r4, r5, fp, pc}
   16ab8:	ldrb	r1, [r0, #1]
   16abc:	and	r1, r1, #223	; 0xdf
   16ac0:	cmp	r1, #66	; 0x42
   16ac4:	bne	16adc <__assert_fail@plt+0x538c>
   16ac8:	ldrb	r1, [r0, #2]
   16acc:	cmp	r1, #49	; 0x31
   16ad0:	ldrbeq	r1, [r0, #3]
   16ad4:	cmpeq	r1, #56	; 0x38
   16ad8:	beq	16af8 <__assert_fail@plt+0x53a8>
   16adc:	movw	r1, #38376	; 0x95e8
   16ae0:	movw	r0, #39281	; 0x9971
   16ae4:	cmp	r4, #9
   16ae8:	movt	r1, #1
   16aec:	movt	r0, #1
   16af0:	moveq	r0, r1
   16af4:	pop	{r4, r5, fp, pc}
   16af8:	ldrb	r1, [r0, #4]
   16afc:	cmp	r1, #48	; 0x30
   16b00:	ldrbeq	r1, [r0, #5]
   16b04:	cmpeq	r1, #51	; 0x33
   16b08:	bne	16adc <__assert_fail@plt+0x538c>
   16b0c:	ldrb	r1, [r0, #6]
   16b10:	cmp	r1, #48	; 0x30
   16b14:	ldrbeq	r0, [r0, #7]
   16b18:	cmpeq	r0, #0
   16b1c:	bne	16adc <__assert_fail@plt+0x538c>
   16b20:	ldrb	r1, [r5]
   16b24:	movw	r2, #39291	; 0x997b
   16b28:	movw	r0, #39295	; 0x997f
   16b2c:	movt	r2, #1
   16b30:	movt	r0, #1
   16b34:	b	16aac <__assert_fail@plt+0x535c>
   16b38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b3c:	add	fp, sp, #24
   16b40:	movw	r8, #0
   16b44:	mov	r6, r2
   16b48:	mov	r4, r1
   16b4c:	mov	r5, r0
   16b50:	movt	r8, #32752	; 0x7ff0
   16b54:	mov	r0, r5
   16b58:	mov	r1, r4
   16b5c:	mov	r2, r6
   16b60:	bl	113f0 <read@plt>
   16b64:	mov	r7, r0
   16b68:	cmn	r0, #1
   16b6c:	bgt	16b94 <__assert_fail@plt+0x5444>
   16b70:	bl	115f4 <__errno_location@plt>
   16b74:	ldr	r0, [r0]
   16b78:	cmp	r0, #4
   16b7c:	beq	16b54 <__assert_fail@plt+0x5404>
   16b80:	cmp	r6, r8
   16b84:	bls	16b94 <__assert_fail@plt+0x5444>
   16b88:	cmp	r0, #22
   16b8c:	mov	r6, r8
   16b90:	beq	16b54 <__assert_fail@plt+0x5404>
   16b94:	mov	r0, r7
   16b98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ba0:	add	fp, sp, #24
   16ba4:	movw	r8, #0
   16ba8:	mov	r6, r2
   16bac:	mov	r4, r1
   16bb0:	mov	r5, r0
   16bb4:	movt	r8, #32752	; 0x7ff0
   16bb8:	mov	r0, r5
   16bbc:	mov	r1, r4
   16bc0:	mov	r2, r6
   16bc4:	bl	11630 <write@plt>
   16bc8:	mov	r7, r0
   16bcc:	cmn	r0, #1
   16bd0:	bgt	16bf8 <__assert_fail@plt+0x54a8>
   16bd4:	bl	115f4 <__errno_location@plt>
   16bd8:	ldr	r0, [r0]
   16bdc:	cmp	r0, #4
   16be0:	beq	16bb8 <__assert_fail@plt+0x5468>
   16be4:	cmp	r6, r8
   16be8:	bls	16bf8 <__assert_fail@plt+0x54a8>
   16bec:	cmp	r0, #22
   16bf0:	mov	r6, r8
   16bf4:	beq	16bb8 <__assert_fail@plt+0x5468>
   16bf8:	mov	r0, r7
   16bfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c00:	push	{r4, r5, r6, r7, fp, lr}
   16c04:	add	fp, sp, #16
   16c08:	sub	sp, sp, #8
   16c0c:	mov	r5, r0
   16c10:	ldrb	r0, [r0]
   16c14:	mov	r4, r1
   16c18:	sub	r0, r0, #48	; 0x30
   16c1c:	cmp	r0, #10
   16c20:	bcs	16c50 <__assert_fail@plt+0x5500>
   16c24:	add	r1, sp, #4
   16c28:	mov	r0, r5
   16c2c:	mov	r2, #10
   16c30:	bl	113e4 <strtol@plt>
   16c34:	cmp	r0, #64	; 0x40
   16c38:	bgt	16d58 <__assert_fail@plt+0x5608>
   16c3c:	ldr	r1, [sp, #4]
   16c40:	ldrb	r1, [r1]
   16c44:	cmp	r1, #0
   16c48:	mvnne	r0, #0
   16c4c:	b	16d5c <__assert_fail@plt+0x560c>
   16c50:	movw	r0, #41392	; 0xa1b0
   16c54:	mov	r7, #0
   16c58:	movt	r0, #2
   16c5c:	add	r6, r0, #4
   16c60:	mov	r0, r6
   16c64:	mov	r1, r5
   16c68:	bl	113d8 <strcmp@plt>
   16c6c:	cmp	r0, #0
   16c70:	beq	16d14 <__assert_fail@plt+0x55c4>
   16c74:	add	r7, r7, #1
   16c78:	add	r6, r6, #12
   16c7c:	cmp	r7, #35	; 0x23
   16c80:	bcc	16c60 <__assert_fail@plt+0x5510>
   16c84:	bl	11708 <__libc_current_sigrtmin@plt>
   16c88:	mov	r6, r0
   16c8c:	bl	115b8 <__libc_current_sigrtmax@plt>
   16c90:	mov	r7, r0
   16c94:	cmp	r6, #1
   16c98:	blt	16cb8 <__assert_fail@plt+0x5568>
   16c9c:	movw	r1, #39384	; 0x99d8
   16ca0:	mov	r0, r5
   16ca4:	mov	r2, #5
   16ca8:	movt	r1, #1
   16cac:	bl	11720 <strncmp@plt>
   16cb0:	cmp	r0, #0
   16cb4:	beq	16d1c <__assert_fail@plt+0x55cc>
   16cb8:	cmp	r7, #1
   16cbc:	blt	16d58 <__assert_fail@plt+0x5608>
   16cc0:	movw	r1, #39390	; 0x99de
   16cc4:	mov	r0, r5
   16cc8:	mov	r2, #5
   16ccc:	movt	r1, #1
   16cd0:	bl	11720 <strncmp@plt>
   16cd4:	cmp	r0, #0
   16cd8:	bne	16d58 <__assert_fail@plt+0x5608>
   16cdc:	add	r0, r5, #5
   16ce0:	mov	r1, sp
   16ce4:	mov	r2, #10
   16ce8:	bl	113e4 <strtol@plt>
   16cec:	ldr	r1, [sp]
   16cf0:	ldrb	r1, [r1]
   16cf4:	cmp	r1, #0
   16cf8:	bne	16d58 <__assert_fail@plt+0x5608>
   16cfc:	sub	r1, r6, r7
   16d00:	cmp	r1, r0
   16d04:	cmple	r0, #0
   16d08:	bgt	16d58 <__assert_fail@plt+0x5608>
   16d0c:	add	r0, r0, r7
   16d10:	b	16d5c <__assert_fail@plt+0x560c>
   16d14:	ldr	r0, [r6, #-4]
   16d18:	b	16d5c <__assert_fail@plt+0x560c>
   16d1c:	add	r0, r5, #5
   16d20:	mov	r1, sp
   16d24:	mov	r2, #10
   16d28:	bl	113e4 <strtol@plt>
   16d2c:	sub	r1, r7, r6
   16d30:	cmp	r0, r1
   16d34:	bgt	16d58 <__assert_fail@plt+0x5608>
   16d38:	cmp	r0, #0
   16d3c:	blt	16d58 <__assert_fail@plt+0x5608>
   16d40:	ldr	r1, [sp]
   16d44:	ldrb	r1, [r1]
   16d48:	cmp	r1, #0
   16d4c:	bne	16d58 <__assert_fail@plt+0x5608>
   16d50:	add	r0, r0, r6
   16d54:	b	16d5c <__assert_fail@plt+0x560c>
   16d58:	mvn	r0, #0
   16d5c:	str	r0, [r4]
   16d60:	asr	r0, r0, #31
   16d64:	sub	sp, fp, #16
   16d68:	pop	{r4, r5, r6, r7, fp, pc}
   16d6c:	push	{r4, r5, r6, r7, fp, lr}
   16d70:	add	fp, sp, #16
   16d74:	sub	sp, sp, #8
   16d78:	mov	r5, r0
   16d7c:	movw	r0, #41392	; 0xa1b0
   16d80:	mov	r4, r1
   16d84:	movt	r0, #2
   16d88:	add	r1, r0, #4
   16d8c:	mov	r0, #0
   16d90:	ldr	r2, [r1, #-4]
   16d94:	cmp	r2, r5
   16d98:	beq	16dfc <__assert_fail@plt+0x56ac>
   16d9c:	add	r0, r0, #1
   16da0:	add	r1, r1, #12
   16da4:	cmp	r0, #35	; 0x23
   16da8:	bcc	16d90 <__assert_fail@plt+0x5640>
   16dac:	bl	11708 <__libc_current_sigrtmin@plt>
   16db0:	mov	r7, r0
   16db4:	mvn	r6, #0
   16db8:	bl	115b8 <__libc_current_sigrtmax@plt>
   16dbc:	cmp	r7, r5
   16dc0:	bgt	16e48 <__assert_fail@plt+0x56f8>
   16dc4:	cmp	r0, r5
   16dc8:	blt	16e48 <__assert_fail@plt+0x56f8>
   16dcc:	sub	r1, r0, r7
   16dd0:	add	r1, r1, r1, lsr #31
   16dd4:	add	r1, r7, r1, asr #1
   16dd8:	cmp	r1, r5
   16ddc:	bge	16e0c <__assert_fail@plt+0x56bc>
   16de0:	mov	r1, #88	; 0x58
   16de4:	mov	r7, r0
   16de8:	strh	r1, [r4, #4]
   16dec:	movw	r1, #21586	; 0x5452
   16df0:	movt	r1, #16717	; 0x414d
   16df4:	str	r1, [r4]
   16df8:	b	16e20 <__assert_fail@plt+0x56d0>
   16dfc:	mov	r0, r4
   16e00:	bl	114f8 <strcpy@plt>
   16e04:	mov	r6, #0
   16e08:	b	16e48 <__assert_fail@plt+0x56f8>
   16e0c:	mov	r0, #78	; 0x4e
   16e10:	strh	r0, [r4, #4]
   16e14:	movw	r0, #21586	; 0x5452
   16e18:	movt	r0, #18765	; 0x494d
   16e1c:	str	r0, [r4]
   16e20:	subs	r0, r5, r7
   16e24:	mov	r6, #0
   16e28:	beq	16e48 <__assert_fail@plt+0x56f8>
   16e2c:	movw	r3, #39396	; 0x99e4
   16e30:	str	r0, [sp]
   16e34:	add	r0, r4, #5
   16e38:	mov	r1, #1
   16e3c:	mvn	r2, #0
   16e40:	movt	r3, #1
   16e44:	bl	11600 <__sprintf_chk@plt>
   16e48:	mov	r0, r6
   16e4c:	sub	sp, fp, #16
   16e50:	pop	{r4, r5, r6, r7, fp, pc}
   16e54:	push	{r4, r5, r6, r7, fp, lr}
   16e58:	add	fp, sp, #16
   16e5c:	mov	r4, r0
   16e60:	cmp	r0, #2
   16e64:	movhi	r0, r4
   16e68:	pophi	{r4, r5, r6, r7, fp, pc}
   16e6c:	mov	r0, r4
   16e70:	bl	181e0 <__assert_fail@plt+0x6a90>
   16e74:	mov	r5, r0
   16e78:	bl	115f4 <__errno_location@plt>
   16e7c:	ldr	r7, [r0]
   16e80:	mov	r6, r0
   16e84:	mov	r0, r4
   16e88:	bl	11738 <close@plt>
   16e8c:	mov	r0, r5
   16e90:	str	r7, [r6]
   16e94:	pop	{r4, r5, r6, r7, fp, pc}
   16e98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e9c:	add	fp, sp, #24
   16ea0:	sub	sp, sp, #32
   16ea4:	ldr	r6, [fp, #12]
   16ea8:	ldr	r7, [fp, #8]
   16eac:	mov	r4, r2
   16eb0:	mov	r8, r0
   16eb4:	cmp	r1, #0
   16eb8:	beq	16ee0 <__assert_fail@plt+0x5790>
   16ebc:	movw	r2, #39400	; 0x99e8
   16ec0:	mov	r5, r1
   16ec4:	str	r3, [sp, #4]
   16ec8:	str	r4, [sp]
   16ecc:	mov	r0, r8
   16ed0:	mov	r1, #1
   16ed4:	movt	r2, #1
   16ed8:	mov	r3, r5
   16edc:	b	16ef8 <__assert_fail@plt+0x57a8>
   16ee0:	movw	r2, #39412	; 0x99f4
   16ee4:	str	r3, [sp]
   16ee8:	mov	r0, r8
   16eec:	mov	r1, #1
   16ef0:	mov	r3, r4
   16ef4:	movt	r2, #1
   16ef8:	bl	11654 <__fprintf_chk@plt>
   16efc:	movw	r1, #39419	; 0x99fb
   16f00:	mov	r0, #0
   16f04:	mov	r2, #5
   16f08:	movt	r1, #1
   16f0c:	bl	11474 <dcgettext@plt>
   16f10:	movw	r2, #40137	; 0x9cc9
   16f14:	mov	r3, r0
   16f18:	movw	r0, #2022	; 0x7e6
   16f1c:	mov	r1, #1
   16f20:	str	r0, [sp]
   16f24:	movt	r2, #1
   16f28:	mov	r0, r8
   16f2c:	bl	11654 <__fprintf_chk@plt>
   16f30:	movw	r4, #35780	; 0x8bc4
   16f34:	mov	r1, r8
   16f38:	movt	r4, #1
   16f3c:	mov	r0, r4
   16f40:	bl	113c0 <fputs_unlocked@plt>
   16f44:	movw	r1, #39423	; 0x99ff
   16f48:	mov	r0, #0
   16f4c:	mov	r2, #5
   16f50:	movt	r1, #1
   16f54:	bl	11474 <dcgettext@plt>
   16f58:	movw	r3, #39594	; 0x9aaa
   16f5c:	mov	r2, r0
   16f60:	mov	r0, r8
   16f64:	mov	r1, #1
   16f68:	movt	r3, #1
   16f6c:	bl	11654 <__fprintf_chk@plt>
   16f70:	mov	r0, r4
   16f74:	mov	r1, r8
   16f78:	bl	113c0 <fputs_unlocked@plt>
   16f7c:	cmp	r6, #9
   16f80:	bhi	16fe4 <__assert_fail@plt+0x5894>
   16f84:	add	r0, pc, #0
   16f88:	ldr	pc, [r0, r6, lsl #2]
   16f8c:			; <UNDEFINED> instruction: 0x000171bc
   16f90:			; <UNDEFINED> instruction: 0x00016fb4
   16f94:	strdeq	r6, [r1], -r0
   16f98:	andeq	r7, r1, r8, lsl r0
   16f9c:	andeq	r7, r1, r0, asr #32
   16fa0:	andeq	r7, r1, r8, rrx
   16fa4:	muleq	r1, r0, r0
   16fa8:	andeq	r7, r1, r8, asr #1
   16fac:	andeq	r7, r1, r8, ror #2
   16fb0:	andeq	r7, r1, r0, lsl r1
   16fb4:	movw	r1, #39628	; 0x9acc
   16fb8:	mov	r0, #0
   16fbc:	mov	r2, #5
   16fc0:	movt	r1, #1
   16fc4:	bl	11474 <dcgettext@plt>
   16fc8:	ldr	r3, [r7]
   16fcc:	mov	r2, r0
   16fd0:	mov	r0, r8
   16fd4:	mov	r1, #1
   16fd8:	sub	sp, fp, #24
   16fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fe0:	b	11654 <__fprintf_chk@plt>
   16fe4:	movw	r1, #39947	; 0x9c0b
   16fe8:	movt	r1, #1
   16fec:	b	17118 <__assert_fail@plt+0x59c8>
   16ff0:	movw	r1, #39644	; 0x9adc
   16ff4:	mov	r0, #0
   16ff8:	mov	r2, #5
   16ffc:	movt	r1, #1
   17000:	bl	11474 <dcgettext@plt>
   17004:	mov	r2, r0
   17008:	ldr	r3, [r7]
   1700c:	ldr	r0, [r7, #4]
   17010:	str	r0, [sp]
   17014:	b	17104 <__assert_fail@plt+0x59b4>
   17018:	movw	r1, #39667	; 0x9af3
   1701c:	mov	r0, #0
   17020:	mov	r2, #5
   17024:	movt	r1, #1
   17028:	bl	11474 <dcgettext@plt>
   1702c:	ldr	r3, [r7]
   17030:	mov	r2, r0
   17034:	ldmib	r7, {r0, r1}
   17038:	stm	sp, {r0, r1}
   1703c:	b	17104 <__assert_fail@plt+0x59b4>
   17040:	movw	r1, #39695	; 0x9b0f
   17044:	mov	r0, #0
   17048:	mov	r2, #5
   1704c:	movt	r1, #1
   17050:	bl	11474 <dcgettext@plt>
   17054:	ldr	r3, [r7]
   17058:	mov	r2, r0
   1705c:	ldmib	r7, {r0, r1, r7}
   17060:	stm	sp, {r0, r1, r7}
   17064:	b	17104 <__assert_fail@plt+0x59b4>
   17068:	movw	r1, #39727	; 0x9b2f
   1706c:	mov	r0, #0
   17070:	mov	r2, #5
   17074:	movt	r1, #1
   17078:	bl	11474 <dcgettext@plt>
   1707c:	ldr	r3, [r7]
   17080:	mov	r2, r0
   17084:	ldmib	r7, {r0, r1, r6, r7}
   17088:	stm	sp, {r0, r1, r6, r7}
   1708c:	b	17104 <__assert_fail@plt+0x59b4>
   17090:	movw	r1, #39763	; 0x9b53
   17094:	mov	r0, #0
   17098:	mov	r2, #5
   1709c:	movt	r1, #1
   170a0:	bl	11474 <dcgettext@plt>
   170a4:	ldr	r3, [r7]
   170a8:	mov	r2, r0
   170ac:	ldmib	r7, {r0, r1, r6}
   170b0:	ldr	r5, [r7, #16]
   170b4:	ldr	r7, [r7, #20]
   170b8:	stm	sp, {r0, r1, r6}
   170bc:	str	r5, [sp, #12]
   170c0:	str	r7, [sp, #16]
   170c4:	b	17104 <__assert_fail@plt+0x59b4>
   170c8:	movw	r1, #39803	; 0x9b7b
   170cc:	mov	r0, #0
   170d0:	mov	r2, #5
   170d4:	movt	r1, #1
   170d8:	bl	11474 <dcgettext@plt>
   170dc:	ldr	r3, [r7]
   170e0:	mov	r2, r0
   170e4:	ldmib	r7, {r0, r1, r6}
   170e8:	ldr	r5, [r7, #16]
   170ec:	ldr	r4, [r7, #20]
   170f0:	ldr	r7, [r7, #24]
   170f4:	stm	sp, {r0, r1, r6}
   170f8:	str	r5, [sp, #12]
   170fc:	str	r4, [sp, #16]
   17100:	str	r7, [sp, #20]
   17104:	mov	r0, r8
   17108:	mov	r1, #1
   1710c:	b	171b8 <__assert_fail@plt+0x5a68>
   17110:	movw	r1, #39895	; 0x9bd7
   17114:	movt	r1, #1
   17118:	mov	r0, #0
   1711c:	mov	r2, #5
   17120:	bl	11474 <dcgettext@plt>
   17124:	mov	ip, r0
   17128:	ldr	r3, [r7]
   1712c:	ldr	r0, [r7, #4]
   17130:	ldr	r1, [r7, #8]
   17134:	ldr	r6, [r7, #12]
   17138:	ldr	r5, [r7, #16]
   1713c:	ldr	r4, [r7, #20]
   17140:	ldr	r2, [r7, #24]
   17144:	ldr	lr, [r7, #28]
   17148:	ldr	r7, [r7, #32]
   1714c:	stm	sp, {r0, r1, r6}
   17150:	str	r5, [sp, #12]
   17154:	str	r4, [sp, #16]
   17158:	str	r2, [sp, #20]
   1715c:	str	lr, [sp, #24]
   17160:	str	r7, [sp, #28]
   17164:	b	171ac <__assert_fail@plt+0x5a5c>
   17168:	movw	r1, #39847	; 0x9ba7
   1716c:	mov	r0, #0
   17170:	mov	r2, #5
   17174:	movt	r1, #1
   17178:	bl	11474 <dcgettext@plt>
   1717c:	mov	ip, r0
   17180:	ldr	r3, [r7]
   17184:	ldmib	r7, {r0, r1, r6}
   17188:	ldr	r5, [r7, #16]
   1718c:	ldr	r4, [r7, #20]
   17190:	ldr	r2, [r7, #24]
   17194:	ldr	r7, [r7, #28]
   17198:	stm	sp, {r0, r1, r6}
   1719c:	str	r5, [sp, #12]
   171a0:	str	r4, [sp, #16]
   171a4:	str	r2, [sp, #20]
   171a8:	str	r7, [sp, #24]
   171ac:	mov	r0, r8
   171b0:	mov	r1, #1
   171b4:	mov	r2, ip
   171b8:	bl	11654 <__fprintf_chk@plt>
   171bc:	sub	sp, fp, #24
   171c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171c4:	push	{r4, sl, fp, lr}
   171c8:	add	fp, sp, #8
   171cc:	sub	sp, sp, #8
   171d0:	ldr	ip, [fp, #8]
   171d4:	mov	lr, #0
   171d8:	ldr	r4, [ip, lr, lsl #2]
   171dc:	add	lr, lr, #1
   171e0:	cmp	r4, #0
   171e4:	bne	171d8 <__assert_fail@plt+0x5a88>
   171e8:	sub	r4, lr, #1
   171ec:	str	ip, [sp]
   171f0:	str	r4, [sp, #4]
   171f4:	bl	16e98 <__assert_fail@plt+0x5748>
   171f8:	sub	sp, fp, #8
   171fc:	pop	{r4, sl, fp, pc}
   17200:	push	{r4, r5, fp, lr}
   17204:	add	fp, sp, #8
   17208:	sub	sp, sp, #48	; 0x30
   1720c:	ldr	r4, [fp, #8]
   17210:	mov	ip, #0
   17214:	add	lr, sp, #8
   17218:	ldr	r5, [r4]
   1721c:	cmp	r5, #0
   17220:	str	r5, [lr, ip, lsl #2]
   17224:	beq	17238 <__assert_fail@plt+0x5ae8>
   17228:	add	ip, ip, #1
   1722c:	add	r4, r4, #4
   17230:	cmp	ip, #10
   17234:	bcc	17218 <__assert_fail@plt+0x5ac8>
   17238:	str	lr, [sp]
   1723c:	str	ip, [sp, #4]
   17240:	bl	16e98 <__assert_fail@plt+0x5748>
   17244:	sub	sp, fp, #8
   17248:	pop	{r4, r5, fp, pc}
   1724c:	push	{fp, lr}
   17250:	mov	fp, sp
   17254:	sub	sp, sp, #8
   17258:	add	ip, fp, #8
   1725c:	str	ip, [sp, #4]
   17260:	str	ip, [sp]
   17264:	bl	17200 <__assert_fail@plt+0x5ab0>
   17268:	mov	sp, fp
   1726c:	pop	{fp, pc}
   17270:	push	{fp, lr}
   17274:	mov	fp, sp
   17278:	movw	r0, #41836	; 0xa36c
   1727c:	movt	r0, #2
   17280:	ldr	r1, [r0]
   17284:	movw	r0, #35780	; 0x8bc4
   17288:	movt	r0, #1
   1728c:	bl	113c0 <fputs_unlocked@plt>
   17290:	movw	r1, #40007	; 0x9c47
   17294:	mov	r0, #0
   17298:	mov	r2, #5
   1729c:	movt	r1, #1
   172a0:	bl	11474 <dcgettext@plt>
   172a4:	movw	r2, #40027	; 0x9c5b
   172a8:	mov	r1, r0
   172ac:	mov	r0, #1
   172b0:	movt	r2, #1
   172b4:	bl	11624 <__printf_chk@plt>
   172b8:	movw	r1, #40049	; 0x9c71
   172bc:	mov	r0, #0
   172c0:	mov	r2, #5
   172c4:	movt	r1, #1
   172c8:	bl	11474 <dcgettext@plt>
   172cc:	movw	r2, #36851	; 0x8ff3
   172d0:	movw	r3, #37564	; 0x92bc
   172d4:	mov	r1, r0
   172d8:	mov	r0, #1
   172dc:	movt	r2, #1
   172e0:	movt	r3, #1
   172e4:	bl	11624 <__printf_chk@plt>
   172e8:	movw	r1, #40069	; 0x9c85
   172ec:	mov	r0, #0
   172f0:	mov	r2, #5
   172f4:	movt	r1, #1
   172f8:	bl	11474 <dcgettext@plt>
   172fc:	movw	r2, #40108	; 0x9cac
   17300:	mov	r1, r0
   17304:	mov	r0, #1
   17308:	movt	r2, #1
   1730c:	pop	{fp, lr}
   17310:	b	11624 <__printf_chk@plt>
   17314:	push	{fp, lr}
   17318:	mov	fp, sp
   1731c:	bl	116fc <aligned_alloc@plt>
   17320:	cmp	r0, #0
   17324:	popne	{fp, pc}
   17328:	bl	177bc <__assert_fail@plt+0x606c>
   1732c:	b	17330 <__assert_fail@plt+0x5be0>
   17330:	push	{r4, r5, r6, sl, fp, lr}
   17334:	add	fp, sp, #16
   17338:	mov	r4, r2
   1733c:	mov	r5, r1
   17340:	mov	r6, r0
   17344:	bl	181a4 <__assert_fail@plt+0x6a54>
   17348:	cmp	r0, #0
   1734c:	popne	{r4, r5, r6, sl, fp, pc}
   17350:	cmp	r6, #0
   17354:	beq	17368 <__assert_fail@plt+0x5c18>
   17358:	cmp	r5, #0
   1735c:	cmpne	r4, #0
   17360:	bne	17368 <__assert_fail@plt+0x5c18>
   17364:	pop	{r4, r5, r6, sl, fp, pc}
   17368:	bl	177bc <__assert_fail@plt+0x606c>
   1736c:	push	{fp, lr}
   17370:	mov	fp, sp
   17374:	bl	1800c <__assert_fail@plt+0x68bc>
   17378:	cmp	r0, #0
   1737c:	popne	{fp, pc}
   17380:	bl	177bc <__assert_fail@plt+0x606c>
   17384:	push	{fp, lr}
   17388:	mov	fp, sp
   1738c:	bl	1800c <__assert_fail@plt+0x68bc>
   17390:	cmp	r0, #0
   17394:	popne	{fp, pc}
   17398:	bl	177bc <__assert_fail@plt+0x606c>
   1739c:	push	{fp, lr}
   173a0:	mov	fp, sp
   173a4:	bl	1800c <__assert_fail@plt+0x68bc>
   173a8:	cmp	r0, #0
   173ac:	popne	{fp, pc}
   173b0:	bl	177bc <__assert_fail@plt+0x606c>
   173b4:	push	{r4, r5, fp, lr}
   173b8:	add	fp, sp, #8
   173bc:	mov	r4, r1
   173c0:	mov	r5, r0
   173c4:	bl	1803c <__assert_fail@plt+0x68ec>
   173c8:	cmp	r0, #0
   173cc:	popne	{r4, r5, fp, pc}
   173d0:	cmp	r5, #0
   173d4:	beq	173e4 <__assert_fail@plt+0x5c94>
   173d8:	cmp	r4, #0
   173dc:	bne	173e4 <__assert_fail@plt+0x5c94>
   173e0:	pop	{r4, r5, fp, pc}
   173e4:	bl	177bc <__assert_fail@plt+0x606c>
   173e8:	push	{fp, lr}
   173ec:	mov	fp, sp
   173f0:	cmp	r1, #0
   173f4:	orreq	r1, r1, #1
   173f8:	bl	1803c <__assert_fail@plt+0x68ec>
   173fc:	cmp	r0, #0
   17400:	popne	{fp, pc}
   17404:	bl	177bc <__assert_fail@plt+0x606c>
   17408:	push	{fp, lr}
   1740c:	mov	fp, sp
   17410:	clz	r3, r2
   17414:	lsr	ip, r3, #5
   17418:	clz	r3, r1
   1741c:	lsr	r3, r3, #5
   17420:	orrs	r3, r3, ip
   17424:	movwne	r1, #1
   17428:	movwne	r2, #1
   1742c:	bl	181a4 <__assert_fail@plt+0x6a54>
   17430:	cmp	r0, #0
   17434:	popne	{fp, pc}
   17438:	bl	177bc <__assert_fail@plt+0x606c>
   1743c:	push	{fp, lr}
   17440:	mov	fp, sp
   17444:	mov	r2, r1
   17448:	mov	r1, r0
   1744c:	mov	r0, #0
   17450:	bl	181a4 <__assert_fail@plt+0x6a54>
   17454:	cmp	r0, #0
   17458:	popne	{fp, pc}
   1745c:	bl	177bc <__assert_fail@plt+0x606c>
   17460:	mov	r2, r1
   17464:	mov	r1, r0
   17468:	mov	r0, #0
   1746c:	b	17408 <__assert_fail@plt+0x5cb8>
   17470:	mov	r2, #1
   17474:	b	17478 <__assert_fail@plt+0x5d28>
   17478:	push	{r4, r5, fp, lr}
   1747c:	add	fp, sp, #8
   17480:	ldr	r5, [r1]
   17484:	mov	r4, r1
   17488:	cmp	r0, #0
   1748c:	beq	174a4 <__assert_fail@plt+0x5d54>
   17490:	mov	r1, #1
   17494:	add	r1, r1, r5, lsr #1
   17498:	adds	r5, r5, r1
   1749c:	bcc	174bc <__assert_fail@plt+0x5d6c>
   174a0:	bl	177bc <__assert_fail@plt+0x606c>
   174a4:	cmp	r5, #0
   174a8:	bne	174bc <__assert_fail@plt+0x5d6c>
   174ac:	mov	r1, #64	; 0x40
   174b0:	cmp	r2, #64	; 0x40
   174b4:	udiv	r5, r1, r2
   174b8:	addhi	r5, r5, #1
   174bc:	mov	r1, r5
   174c0:	bl	17330 <__assert_fail@plt+0x5be0>
   174c4:	str	r5, [r4]
   174c8:	pop	{r4, r5, fp, pc}
   174cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174d0:	add	fp, sp, #24
   174d4:	ldr	r6, [r1]
   174d8:	mov	r8, r1
   174dc:	ldr	r4, [fp, #8]
   174e0:	add	r1, r6, r6, asr #1
   174e4:	cmp	r1, r6
   174e8:	mvnvs	r1, #-2147483648	; 0x80000000
   174ec:	cmp	r1, r3
   174f0:	mov	r5, r1
   174f4:	movgt	r5, r3
   174f8:	cmn	r3, #1
   174fc:	movle	r5, r1
   17500:	cmn	r4, #1
   17504:	ble	17524 <__assert_fail@plt+0x5dd4>
   17508:	cmp	r4, #0
   1750c:	beq	17578 <__assert_fail@plt+0x5e28>
   17510:	cmn	r5, #1
   17514:	ble	1754c <__assert_fail@plt+0x5dfc>
   17518:	mvn	r7, #-2147483648	; 0x80000000
   1751c:	udiv	r1, r7, r4
   17520:	b	17540 <__assert_fail@plt+0x5df0>
   17524:	cmn	r5, #1
   17528:	ble	17568 <__assert_fail@plt+0x5e18>
   1752c:	cmn	r4, #1
   17530:	beq	17578 <__assert_fail@plt+0x5e28>
   17534:	mov	r1, #-2147483648	; 0x80000000
   17538:	mvn	r7, #-2147483648	; 0x80000000
   1753c:	sdiv	r1, r1, r4
   17540:	cmp	r1, r5
   17544:	bge	17578 <__assert_fail@plt+0x5e28>
   17548:	b	17588 <__assert_fail@plt+0x5e38>
   1754c:	beq	17578 <__assert_fail@plt+0x5e28>
   17550:	mov	r1, #-2147483648	; 0x80000000
   17554:	mvn	r7, #-2147483648	; 0x80000000
   17558:	sdiv	r1, r1, r5
   1755c:	cmp	r1, r4
   17560:	bge	17578 <__assert_fail@plt+0x5e28>
   17564:	b	17588 <__assert_fail@plt+0x5e38>
   17568:	mvn	r7, #-2147483648	; 0x80000000
   1756c:	sdiv	r1, r7, r4
   17570:	cmp	r5, r1
   17574:	blt	17588 <__assert_fail@plt+0x5e38>
   17578:	mul	r1, r5, r4
   1757c:	mov	r7, #64	; 0x40
   17580:	cmp	r1, #63	; 0x3f
   17584:	bgt	17590 <__assert_fail@plt+0x5e40>
   17588:	sdiv	r5, r7, r4
   1758c:	mul	r1, r5, r4
   17590:	cmp	r0, #0
   17594:	moveq	r7, #0
   17598:	streq	r7, [r8]
   1759c:	sub	r7, r5, r6
   175a0:	cmp	r7, r2
   175a4:	bge	17648 <__assert_fail@plt+0x5ef8>
   175a8:	add	r5, r6, r2
   175ac:	mov	r2, #0
   175b0:	mov	r1, #0
   175b4:	cmp	r5, r3
   175b8:	movwgt	r2, #1
   175bc:	cmn	r3, #1
   175c0:	movwgt	r1, #1
   175c4:	cmp	r5, r6
   175c8:	bvs	17630 <__assert_fail@plt+0x5ee0>
   175cc:	ands	r1, r1, r2
   175d0:	bne	17630 <__assert_fail@plt+0x5ee0>
   175d4:	cmn	r4, #1
   175d8:	ble	175f8 <__assert_fail@plt+0x5ea8>
   175dc:	cmp	r4, #0
   175e0:	beq	17644 <__assert_fail@plt+0x5ef4>
   175e4:	cmn	r5, #1
   175e8:	ble	1761c <__assert_fail@plt+0x5ecc>
   175ec:	mvn	r1, #-2147483648	; 0x80000000
   175f0:	udiv	r1, r1, r4
   175f4:	b	17610 <__assert_fail@plt+0x5ec0>
   175f8:	cmn	r5, #1
   175fc:	ble	17634 <__assert_fail@plt+0x5ee4>
   17600:	cmn	r4, #1
   17604:	beq	17644 <__assert_fail@plt+0x5ef4>
   17608:	mov	r1, #-2147483648	; 0x80000000
   1760c:	sdiv	r1, r1, r4
   17610:	cmp	r1, r5
   17614:	bge	17644 <__assert_fail@plt+0x5ef4>
   17618:	b	17630 <__assert_fail@plt+0x5ee0>
   1761c:	beq	17644 <__assert_fail@plt+0x5ef4>
   17620:	mov	r1, #-2147483648	; 0x80000000
   17624:	sdiv	r1, r1, r5
   17628:	cmp	r1, r4
   1762c:	bge	17644 <__assert_fail@plt+0x5ef4>
   17630:	bl	177bc <__assert_fail@plt+0x606c>
   17634:	mvn	r1, #-2147483648	; 0x80000000
   17638:	sdiv	r1, r1, r4
   1763c:	cmp	r5, r1
   17640:	blt	17630 <__assert_fail@plt+0x5ee0>
   17644:	mul	r1, r5, r4
   17648:	bl	173b4 <__assert_fail@plt+0x5c64>
   1764c:	str	r5, [r8]
   17650:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17654:	push	{fp, lr}
   17658:	mov	fp, sp
   1765c:	mov	r1, #1
   17660:	bl	17fb8 <__assert_fail@plt+0x6868>
   17664:	cmp	r0, #0
   17668:	popne	{fp, pc}
   1766c:	bl	177bc <__assert_fail@plt+0x606c>
   17670:	push	{fp, lr}
   17674:	mov	fp, sp
   17678:	bl	17fb8 <__assert_fail@plt+0x6868>
   1767c:	cmp	r0, #0
   17680:	popne	{fp, pc}
   17684:	bl	177bc <__assert_fail@plt+0x606c>
   17688:	push	{fp, lr}
   1768c:	mov	fp, sp
   17690:	mov	r1, #1
   17694:	bl	17fb8 <__assert_fail@plt+0x6868>
   17698:	cmp	r0, #0
   1769c:	popne	{fp, pc}
   176a0:	bl	177bc <__assert_fail@plt+0x606c>
   176a4:	push	{fp, lr}
   176a8:	mov	fp, sp
   176ac:	bl	17fb8 <__assert_fail@plt+0x6868>
   176b0:	cmp	r0, #0
   176b4:	popne	{fp, pc}
   176b8:	bl	177bc <__assert_fail@plt+0x606c>
   176bc:	push	{r4, r5, r6, sl, fp, lr}
   176c0:	add	fp, sp, #16
   176c4:	mov	r5, r0
   176c8:	mov	r0, r1
   176cc:	mov	r4, r1
   176d0:	bl	1800c <__assert_fail@plt+0x68bc>
   176d4:	cmp	r0, #0
   176d8:	beq	176f4 <__assert_fail@plt+0x5fa4>
   176dc:	mov	r1, r5
   176e0:	mov	r2, r4
   176e4:	mov	r6, r0
   176e8:	bl	11438 <memcpy@plt>
   176ec:	mov	r0, r6
   176f0:	pop	{r4, r5, r6, sl, fp, pc}
   176f4:	bl	177bc <__assert_fail@plt+0x606c>
   176f8:	push	{r4, r5, r6, sl, fp, lr}
   176fc:	add	fp, sp, #16
   17700:	mov	r5, r0
   17704:	mov	r0, r1
   17708:	mov	r4, r1
   1770c:	bl	1800c <__assert_fail@plt+0x68bc>
   17710:	cmp	r0, #0
   17714:	beq	17730 <__assert_fail@plt+0x5fe0>
   17718:	mov	r1, r5
   1771c:	mov	r2, r4
   17720:	mov	r6, r0
   17724:	bl	11438 <memcpy@plt>
   17728:	mov	r0, r6
   1772c:	pop	{r4, r5, r6, sl, fp, pc}
   17730:	bl	177bc <__assert_fail@plt+0x606c>
   17734:	push	{r4, r5, r6, sl, fp, lr}
   17738:	add	fp, sp, #16
   1773c:	mov	r5, r0
   17740:	add	r0, r1, #1
   17744:	mov	r4, r1
   17748:	bl	1800c <__assert_fail@plt+0x68bc>
   1774c:	cmp	r0, #0
   17750:	beq	17778 <__assert_fail@plt+0x6028>
   17754:	mov	r6, r0
   17758:	mov	r0, #0
   1775c:	mov	r1, r5
   17760:	mov	r2, r4
   17764:	strb	r0, [r6, r4]
   17768:	mov	r0, r6
   1776c:	bl	11438 <memcpy@plt>
   17770:	mov	r0, r6
   17774:	pop	{r4, r5, r6, sl, fp, pc}
   17778:	bl	177bc <__assert_fail@plt+0x606c>
   1777c:	push	{r4, r5, r6, sl, fp, lr}
   17780:	add	fp, sp, #16
   17784:	mov	r4, r0
   17788:	bl	115ac <strlen@plt>
   1778c:	add	r5, r0, #1
   17790:	mov	r0, r5
   17794:	bl	1800c <__assert_fail@plt+0x68bc>
   17798:	cmp	r0, #0
   1779c:	beq	177b8 <__assert_fail@plt+0x6068>
   177a0:	mov	r1, r4
   177a4:	mov	r2, r5
   177a8:	mov	r6, r0
   177ac:	bl	11438 <memcpy@plt>
   177b0:	mov	r0, r6
   177b4:	pop	{r4, r5, r6, sl, fp, pc}
   177b8:	bl	177bc <__assert_fail@plt+0x606c>
   177bc:	push	{fp, lr}
   177c0:	mov	fp, sp
   177c4:	movw	r0, #41320	; 0xa168
   177c8:	movw	r1, #40184	; 0x9cf8
   177cc:	mov	r2, #5
   177d0:	movt	r0, #2
   177d4:	movt	r1, #1
   177d8:	ldr	r4, [r0]
   177dc:	mov	r0, #0
   177e0:	bl	11474 <dcgettext@plt>
   177e4:	movw	r2, #38738	; 0x9752
   177e8:	mov	r3, r0
   177ec:	mov	r0, r4
   177f0:	mov	r1, #0
   177f4:	movt	r2, #1
   177f8:	bl	11528 <error@plt>
   177fc:	bl	1172c <abort@plt>
   17800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17804:	add	fp, sp, #24
   17808:	sub	sp, sp, #16
   1780c:	mov	r8, r0
   17810:	ldr	r0, [fp, #16]
   17814:	mov	r5, r3
   17818:	mov	r6, r2
   1781c:	mov	r2, r1
   17820:	add	r3, sp, #8
   17824:	mov	r1, #0
   17828:	str	r0, [sp]
   1782c:	mov	r0, r8
   17830:	bl	17900 <__assert_fail@plt+0x61b0>
   17834:	cmp	r0, #0
   17838:	bne	178cc <__assert_fail@plt+0x617c>
   1783c:	ldr	r4, [sp, #8]
   17840:	ldr	r7, [sp, #12]
   17844:	subs	r0, r4, r6
   17848:	sbcs	r0, r7, r5
   1784c:	bcc	17870 <__assert_fail@plt+0x6120>
   17850:	ldr	r1, [fp, #8]
   17854:	ldr	r0, [fp, #12]
   17858:	subs	r1, r1, r4
   1785c:	sbcs	r0, r0, r7
   17860:	movcs	r0, r4
   17864:	movcs	r1, r7
   17868:	subcs	sp, fp, #24
   1786c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   17870:	bl	115f4 <__errno_location@plt>
   17874:	subs	r1, r4, #1073741824	; 0x40000000
   17878:	sbcs	r1, r7, #0
   1787c:	bcc	17888 <__assert_fail@plt+0x6138>
   17880:	mov	r1, #75	; 0x4b
   17884:	b	1788c <__assert_fail@plt+0x613c>
   17888:	mov	r1, #34	; 0x22
   1788c:	str	r1, [r0]
   17890:	ldr	r6, [r0]
   17894:	ldr	r4, [fp, #24]
   17898:	ldr	r5, [fp, #20]
   1789c:	mov	r0, r8
   178a0:	bl	16a00 <__assert_fail@plt+0x52b0>
   178a4:	subs	r1, r6, #22
   178a8:	movw	r2, #36957	; 0x905d
   178ac:	str	r0, [sp]
   178b0:	mov	r3, r5
   178b4:	movne	r1, r6
   178b8:	cmp	r4, #0
   178bc:	movt	r2, #1
   178c0:	movweq	r4, #1
   178c4:	mov	r0, r4
   178c8:	bl	11528 <error@plt>
   178cc:	cmp	r0, #1
   178d0:	beq	178e8 <__assert_fail@plt+0x6198>
   178d4:	cmp	r0, #3
   178d8:	bne	178f0 <__assert_fail@plt+0x61a0>
   178dc:	bl	115f4 <__errno_location@plt>
   178e0:	mov	r1, #0
   178e4:	b	1788c <__assert_fail@plt+0x613c>
   178e8:	bl	115f4 <__errno_location@plt>
   178ec:	b	17880 <__assert_fail@plt+0x6130>
   178f0:	bl	115f4 <__errno_location@plt>
   178f4:	b	17890 <__assert_fail@plt+0x6140>
   178f8:	mov	r1, #10
   178fc:	b	17800 <__assert_fail@plt+0x60b0>
   17900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17904:	add	fp, sp, #28
   17908:	sub	sp, sp, #20
   1790c:	cmp	r2, #37	; 0x25
   17910:	bcs	17f98 <__assert_fail@plt+0x6848>
   17914:	mov	r8, r3
   17918:	mov	r5, r2
   1791c:	mov	r6, r1
   17920:	mov	r4, r0
   17924:	bl	115f4 <__errno_location@plt>
   17928:	mov	r7, r0
   1792c:	mov	r0, #0
   17930:	str	r0, [r7]
   17934:	bl	11594 <__ctype_b_loc@plt>
   17938:	ldr	r1, [r0]
   1793c:	mov	r2, r4
   17940:	ldrb	r0, [r2], #1
   17944:	add	r3, r1, r0, lsl #1
   17948:	ldrb	r3, [r3, #1]
   1794c:	tst	r3, #32
   17950:	bne	17940 <__assert_fail@plt+0x61f0>
   17954:	add	sl, sp, #16
   17958:	cmp	r6, #0
   1795c:	movne	sl, r6
   17960:	mov	r6, #4
   17964:	cmp	r0, #45	; 0x2d
   17968:	beq	17f8c <__assert_fail@plt+0x683c>
   1796c:	mov	r0, r4
   17970:	mov	r1, sl
   17974:	mov	r2, r5
   17978:	str	r8, [sp, #12]
   1797c:	bl	11648 <strtoumax@plt>
   17980:	ldr	r5, [sl]
   17984:	cmp	r5, r4
   17988:	beq	179b0 <__assert_fail@plt+0x6260>
   1798c:	mov	r8, r0
   17990:	ldr	r0, [r7]
   17994:	mov	r9, r1
   17998:	cmp	r0, #0
   1799c:	beq	179e0 <__assert_fail@plt+0x6290>
   179a0:	cmp	r0, #34	; 0x22
   179a4:	bne	17f8c <__assert_fail@plt+0x683c>
   179a8:	mov	r6, #1
   179ac:	b	179e4 <__assert_fail@plt+0x6294>
   179b0:	ldr	r0, [fp, #8]
   179b4:	cmp	r0, #0
   179b8:	ldrbne	r1, [r4]
   179bc:	cmpne	r1, #0
   179c0:	beq	17f8c <__assert_fail@plt+0x683c>
   179c4:	bl	115c4 <strchr@plt>
   179c8:	cmp	r0, #0
   179cc:	beq	17f8c <__assert_fail@plt+0x683c>
   179d0:	mov	r6, #0
   179d4:	mov	r8, #1
   179d8:	mov	r9, #0
   179dc:	b	179f0 <__assert_fail@plt+0x62a0>
   179e0:	mov	r6, r0
   179e4:	ldr	r0, [fp, #8]
   179e8:	cmp	r0, #0
   179ec:	beq	17f84 <__assert_fail@plt+0x6834>
   179f0:	ldrb	r7, [r5]
   179f4:	cmp	r7, #0
   179f8:	beq	17f84 <__assert_fail@plt+0x6834>
   179fc:	ldr	r0, [fp, #8]
   17a00:	mov	r1, r7
   17a04:	bl	115c4 <strchr@plt>
   17a08:	cmp	r0, #0
   17a0c:	beq	17b14 <__assert_fail@plt+0x63c4>
   17a10:	sub	r0, r7, #69	; 0x45
   17a14:	mov	r1, #1
   17a18:	mov	r3, #0
   17a1c:	mov	r4, #1024	; 0x400
   17a20:	cmp	r0, #21
   17a24:	str	r1, [sp, #8]
   17a28:	bhi	17a40 <__assert_fail@plt+0x62f0>
   17a2c:	movw	r2, #35141	; 0x8945
   17a30:	mov	r1, #1
   17a34:	movt	r2, #48	; 0x30
   17a38:	tst	r2, r1, lsl r0
   17a3c:	bne	17a5c <__assert_fail@plt+0x630c>
   17a40:	sub	r0, r7, #103	; 0x67
   17a44:	cmp	r0, #13
   17a48:	bhi	17a90 <__assert_fail@plt+0x6340>
   17a4c:	mov	r1, #1
   17a50:	movw	r2, #8273	; 0x2051
   17a54:	tst	r2, r1, lsl r0
   17a58:	beq	17a90 <__assert_fail@plt+0x6340>
   17a5c:	ldr	r0, [fp, #8]
   17a60:	mov	r1, #48	; 0x30
   17a64:	bl	115c4 <strchr@plt>
   17a68:	cmp	r0, #0
   17a6c:	beq	17a8c <__assert_fail@plt+0x633c>
   17a70:	ldrb	r0, [r5, #1]
   17a74:	cmp	r0, #66	; 0x42
   17a78:	cmpne	r0, #68	; 0x44
   17a7c:	bne	17ba4 <__assert_fail@plt+0x6454>
   17a80:	mov	r4, #1000	; 0x3e8
   17a84:	mov	r0, #2
   17a88:	str	r0, [sp, #8]
   17a8c:	mov	r3, #0
   17a90:	cmp	r7, #89	; 0x59
   17a94:	stm	sp, {r5, r6}
   17a98:	bgt	17b20 <__assert_fail@plt+0x63d0>
   17a9c:	sub	r0, r7, #66	; 0x42
   17aa0:	cmp	r0, #14
   17aa4:	bhi	17bc8 <__assert_fail@plt+0x6478>
   17aa8:	add	r1, pc, #0
   17aac:	ldr	pc, [r1, r0, lsl #2]
   17ab0:	andeq	r7, r1, ip, ror #21
   17ab4:	andeq	r7, r1, r8, ror lr
   17ab8:	andeq	r7, r1, r8, ror lr
   17abc:	andeq	r7, r1, ip, lsl #29
   17ac0:	andeq	r7, r1, r8, ror lr
   17ac4:	andeq	r7, r1, ip, ror ip
   17ac8:	andeq	r7, r1, r8, ror lr
   17acc:	andeq	r7, r1, r8, ror lr
   17ad0:	andeq	r7, r1, r8, ror lr
   17ad4:	andeq	r7, r1, r8, ror #25
   17ad8:	andeq	r7, r1, r8, ror lr
   17adc:	andeq	r7, r1, ip, lsr #26
   17ae0:	andeq	r7, r1, r8, ror lr
   17ae4:	andeq	r7, r1, r8, ror lr
   17ae8:	strdeq	r7, [r1], -r8
   17aec:	mov	r1, #0
   17af0:	lsl	r3, r9, #10
   17af4:	lsl	r0, r8, #10
   17af8:	lsr	r2, r9, #22
   17afc:	cmp	r1, r9, lsr #22
   17b00:	orr	r3, r3, r8, lsr #22
   17b04:	mvnne	r0, #0
   17b08:	movwne	r2, #1
   17b0c:	cmp	r1, r9, lsr #22
   17b10:	b	17b94 <__assert_fail@plt+0x6444>
   17b14:	ldr	r0, [sp, #12]
   17b18:	orr	r6, r6, #2
   17b1c:	b	17f88 <__assert_fail@plt+0x6838>
   17b20:	cmp	r7, #115	; 0x73
   17b24:	bgt	17c44 <__assert_fail@plt+0x64f4>
   17b28:	sub	r0, r7, #98	; 0x62
   17b2c:	cmp	r0, #11
   17b30:	bhi	17e04 <__assert_fail@plt+0x66b4>
   17b34:	add	r1, pc, #4
   17b38:	mov	r2, #0
   17b3c:	ldr	pc, [r1, r0, lsl #2]
   17b40:	andeq	r7, r1, r0, ror fp
   17b44:	andeq	r7, r1, r0, ror #30
   17b48:	andeq	r7, r1, r8, ror lr
   17b4c:	andeq	r7, r1, r8, ror lr
   17b50:	andeq	r7, r1, r8, ror lr
   17b54:	andeq	r7, r1, ip, ror ip
   17b58:	andeq	r7, r1, r8, ror lr
   17b5c:	andeq	r7, r1, r8, ror lr
   17b60:	andeq	r7, r1, r8, ror lr
   17b64:	andeq	r7, r1, r8, ror #25
   17b68:	andeq	r7, r1, r8, ror lr
   17b6c:	andeq	r7, r1, ip, lsr #26
   17b70:	mov	r1, #0
   17b74:	lsl	r3, r9, #9
   17b78:	lsl	r0, r8, #9
   17b7c:	lsr	r2, r9, #23
   17b80:	cmp	r1, r9, lsr #23
   17b84:	orr	r3, r3, r8, lsr #23
   17b88:	mvnne	r0, #0
   17b8c:	movwne	r2, #1
   17b90:	cmp	r1, r9, lsr #23
   17b94:	mvnne	r3, #0
   17b98:	mov	r8, r0
   17b9c:	mov	r9, r3
   17ba0:	b	17f60 <__assert_fail@plt+0x6810>
   17ba4:	cmp	r0, #105	; 0x69
   17ba8:	mov	r3, #0
   17bac:	bne	17a90 <__assert_fail@plt+0x6340>
   17bb0:	ldrb	r0, [r5, #2]
   17bb4:	mov	r1, #1
   17bb8:	cmp	r0, #66	; 0x42
   17bbc:	movweq	r1, #3
   17bc0:	str	r1, [sp, #8]
   17bc4:	b	17a90 <__assert_fail@plt+0x6340>
   17bc8:	cmp	r7, #84	; 0x54
   17bcc:	beq	17d98 <__assert_fail@plt+0x6648>
   17bd0:	cmp	r7, #89	; 0x59
   17bd4:	bne	17e78 <__assert_fail@plt+0x6728>
   17bd8:	mvn	r0, #0
   17bdc:	mvn	r1, #0
   17be0:	mov	r2, r4
   17be4:	mov	r5, r3
   17be8:	bl	184bc <__assert_fail@plt+0x6d6c>
   17bec:	mov	ip, r5
   17bf0:	mvn	lr, #0
   17bf4:	mov	r2, #0
   17bf8:	mvn	r3, #7
   17bfc:	mov	r5, r8
   17c00:	mov	r7, r9
   17c04:	umull	r8, r6, r5, r4
   17c08:	mvn	r9, #0
   17c0c:	mla	r6, r5, ip, r6
   17c10:	subs	r5, r0, r5
   17c14:	sbcs	r5, r1, r7
   17c18:	mov	r5, #0
   17c1c:	movwcc	r5, #1
   17c20:	cmp	r5, #0
   17c24:	mlaeq	r9, r7, r4, r6
   17c28:	movne	r8, lr
   17c2c:	orrne	r2, r2, #1
   17c30:	adds	r3, r3, #1
   17c34:	mov	r5, r8
   17c38:	mov	r7, r9
   17c3c:	bne	17c04 <__assert_fail@plt+0x64b4>
   17c40:	b	17f60 <__assert_fail@plt+0x6810>
   17c44:	cmp	r7, #116	; 0x74
   17c48:	beq	17d98 <__assert_fail@plt+0x6648>
   17c4c:	cmp	r7, #119	; 0x77
   17c50:	bne	17e78 <__assert_fail@plt+0x6728>
   17c54:	lsl	r1, r9, #1
   17c58:	lsl	r0, r8, #1
   17c5c:	cmp	r9, #0
   17c60:	lsr	r2, r9, #31
   17c64:	orr	r1, r1, r8, lsr #31
   17c68:	mvnlt	r0, #0
   17c6c:	mvnlt	r1, #0
   17c70:	mov	r8, r0
   17c74:	mov	r9, r1
   17c78:	b	17f60 <__assert_fail@plt+0x6810>
   17c7c:	mvn	r0, #0
   17c80:	mvn	r1, #0
   17c84:	mov	r2, r4
   17c88:	mov	r5, r3
   17c8c:	bl	184bc <__assert_fail@plt+0x6d6c>
   17c90:	mov	ip, r5
   17c94:	mvn	lr, #0
   17c98:	mov	r2, #0
   17c9c:	mvn	r3, #2
   17ca0:	mov	r6, r8
   17ca4:	mov	r5, r9
   17ca8:	umull	r8, r7, r6, r4
   17cac:	mvn	r9, #0
   17cb0:	mla	r7, r6, ip, r7
   17cb4:	subs	r6, r0, r6
   17cb8:	sbcs	r6, r1, r5
   17cbc:	mov	r6, #0
   17cc0:	movwcc	r6, #1
   17cc4:	cmp	r6, #0
   17cc8:	mlaeq	r9, r5, r4, r7
   17ccc:	movne	r8, lr
   17cd0:	orrne	r2, r2, #1
   17cd4:	adds	r3, r3, #1
   17cd8:	mov	r6, r8
   17cdc:	mov	r5, r9
   17ce0:	bne	17ca8 <__assert_fail@plt+0x6558>
   17ce4:	b	17f60 <__assert_fail@plt+0x6810>
   17ce8:	mvn	r0, #0
   17cec:	mvn	r1, #0
   17cf0:	mov	r2, r4
   17cf4:	mov	r5, r3
   17cf8:	bl	184bc <__assert_fail@plt+0x6d6c>
   17cfc:	subs	r0, r0, r8
   17d00:	mov	r2, #0
   17d04:	sbcs	r0, r1, r9
   17d08:	movwcc	r2, #1
   17d0c:	umull	r0, r1, r8, r4
   17d10:	mla	r1, r8, r5, r1
   17d14:	cmp	r2, #0
   17d18:	mla	r9, r9, r4, r1
   17d1c:	mvnne	r0, #0
   17d20:	mvnne	r9, #0
   17d24:	mov	r8, r0
   17d28:	b	17f60 <__assert_fail@plt+0x6810>
   17d2c:	mvn	r0, #0
   17d30:	mvn	r1, #0
   17d34:	mov	r2, r4
   17d38:	mov	r5, r3
   17d3c:	bl	184bc <__assert_fail@plt+0x6d6c>
   17d40:	mov	ip, r5
   17d44:	mvn	lr, #0
   17d48:	mov	r2, #0
   17d4c:	mvn	r3, #1
   17d50:	mov	r6, r8
   17d54:	mov	r5, r9
   17d58:	umull	r8, r7, r6, r4
   17d5c:	mvn	r9, #0
   17d60:	mla	r7, r6, ip, r7
   17d64:	subs	r6, r0, r6
   17d68:	sbcs	r6, r1, r5
   17d6c:	mov	r6, #0
   17d70:	movwcc	r6, #1
   17d74:	cmp	r6, #0
   17d78:	mlaeq	r9, r5, r4, r7
   17d7c:	movne	r8, lr
   17d80:	orrne	r2, r2, #1
   17d84:	adds	r3, r3, #1
   17d88:	mov	r6, r8
   17d8c:	mov	r5, r9
   17d90:	bne	17d58 <__assert_fail@plt+0x6608>
   17d94:	b	17f60 <__assert_fail@plt+0x6810>
   17d98:	mvn	r0, #0
   17d9c:	mvn	r1, #0
   17da0:	mov	r2, r4
   17da4:	mov	r5, r3
   17da8:	bl	184bc <__assert_fail@plt+0x6d6c>
   17dac:	mov	ip, r5
   17db0:	mvn	lr, #0
   17db4:	mov	r2, #0
   17db8:	mvn	r3, #3
   17dbc:	mov	r6, r8
   17dc0:	mov	r5, r9
   17dc4:	umull	r8, r7, r6, r4
   17dc8:	mvn	r9, #0
   17dcc:	mla	r7, r6, ip, r7
   17dd0:	subs	r6, r0, r6
   17dd4:	sbcs	r6, r1, r5
   17dd8:	mov	r6, #0
   17ddc:	movwcc	r6, #1
   17de0:	cmp	r6, #0
   17de4:	mlaeq	r9, r5, r4, r7
   17de8:	movne	r8, lr
   17dec:	orrne	r2, r2, #1
   17df0:	adds	r3, r3, #1
   17df4:	mov	r6, r8
   17df8:	mov	r5, r9
   17dfc:	bne	17dc4 <__assert_fail@plt+0x6674>
   17e00:	b	17f60 <__assert_fail@plt+0x6810>
   17e04:	cmp	r7, #90	; 0x5a
   17e08:	bne	17e78 <__assert_fail@plt+0x6728>
   17e0c:	mvn	r0, #0
   17e10:	mvn	r1, #0
   17e14:	mov	r2, r4
   17e18:	mov	r5, r3
   17e1c:	bl	184bc <__assert_fail@plt+0x6d6c>
   17e20:	mov	ip, r5
   17e24:	mvn	lr, #0
   17e28:	mov	r2, #0
   17e2c:	mvn	r3, #6
   17e30:	mov	r5, r8
   17e34:	mov	r7, r9
   17e38:	umull	r8, r6, r5, r4
   17e3c:	mvn	r9, #0
   17e40:	mla	r6, r5, ip, r6
   17e44:	subs	r5, r0, r5
   17e48:	sbcs	r5, r1, r7
   17e4c:	mov	r5, #0
   17e50:	movwcc	r5, #1
   17e54:	cmp	r5, #0
   17e58:	mlaeq	r9, r7, r4, r6
   17e5c:	movne	r8, lr
   17e60:	orrne	r2, r2, #1
   17e64:	adds	r3, r3, #1
   17e68:	mov	r5, r8
   17e6c:	mov	r7, r9
   17e70:	bne	17e38 <__assert_fail@plt+0x66e8>
   17e74:	b	17f60 <__assert_fail@plt+0x6810>
   17e78:	ldr	r0, [sp, #12]
   17e7c:	strd	r8, [r0]
   17e80:	ldr	r6, [sp, #4]
   17e84:	orr	r6, r6, #2
   17e88:	b	17f8c <__assert_fail@plt+0x683c>
   17e8c:	mvn	r0, #0
   17e90:	mvn	r1, #0
   17e94:	mov	r2, r4
   17e98:	mov	r5, r3
   17e9c:	bl	184bc <__assert_fail@plt+0x6d6c>
   17ea0:	mov	ip, r5
   17ea4:	mvn	lr, #0
   17ea8:	mov	r2, #0
   17eac:	mvn	r3, #5
   17eb0:	mov	r5, r8
   17eb4:	mov	r7, r9
   17eb8:	umull	r8, r6, r5, r4
   17ebc:	mvn	r9, #0
   17ec0:	mla	r6, r5, ip, r6
   17ec4:	subs	r5, r0, r5
   17ec8:	sbcs	r5, r1, r7
   17ecc:	mov	r5, #0
   17ed0:	movwcc	r5, #1
   17ed4:	cmp	r5, #0
   17ed8:	mlaeq	r9, r7, r4, r6
   17edc:	movne	r8, lr
   17ee0:	orrne	r2, r2, #1
   17ee4:	adds	r3, r3, #1
   17ee8:	mov	r5, r8
   17eec:	mov	r7, r9
   17ef0:	bne	17eb8 <__assert_fail@plt+0x6768>
   17ef4:	b	17f60 <__assert_fail@plt+0x6810>
   17ef8:	mvn	r0, #0
   17efc:	mvn	r1, #0
   17f00:	mov	r2, r4
   17f04:	mov	r5, r3
   17f08:	bl	184bc <__assert_fail@plt+0x6d6c>
   17f0c:	mov	ip, r5
   17f10:	mvn	lr, #0
   17f14:	mov	r2, #0
   17f18:	mvn	r3, #4
   17f1c:	mov	r5, r8
   17f20:	mov	r7, r9
   17f24:	umull	r8, r6, r5, r4
   17f28:	mvn	r9, #0
   17f2c:	mla	r6, r5, ip, r6
   17f30:	subs	r5, r0, r5
   17f34:	sbcs	r5, r1, r7
   17f38:	mov	r5, #0
   17f3c:	movwcc	r5, #1
   17f40:	cmp	r5, #0
   17f44:	mlaeq	r9, r7, r4, r6
   17f48:	movne	r8, lr
   17f4c:	orrne	r2, r2, #1
   17f50:	adds	r3, r3, #1
   17f54:	mov	r5, r8
   17f58:	mov	r7, r9
   17f5c:	bne	17f24 <__assert_fail@plt+0x67d4>
   17f60:	ldr	r1, [sp]
   17f64:	ldr	r3, [sp, #8]
   17f68:	ldr	r6, [sp, #4]
   17f6c:	add	r0, r1, r3
   17f70:	orr	r6, r2, r6
   17f74:	str	r0, [sl]
   17f78:	ldrb	r0, [r1, r3]
   17f7c:	cmp	r0, #0
   17f80:	orrne	r6, r6, #2
   17f84:	ldr	r0, [sp, #12]
   17f88:	strd	r8, [r0]
   17f8c:	mov	r0, r6
   17f90:	sub	sp, fp, #28
   17f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f98:	movw	r0, #40201	; 0x9d09
   17f9c:	movw	r1, #40239	; 0x9d2f
   17fa0:	movw	r3, #40255	; 0x9d3f
   17fa4:	mov	r2, #85	; 0x55
   17fa8:	movt	r0, #1
   17fac:	movt	r1, #1
   17fb0:	movt	r3, #1
   17fb4:	bl	11750 <__assert_fail@plt>
   17fb8:	clz	r2, r1
   17fbc:	clz	r3, r0
   17fc0:	lsr	r2, r2, #5
   17fc4:	lsr	r3, r3, #5
   17fc8:	orrs	r2, r3, r2
   17fcc:	movwne	r1, #1
   17fd0:	movwne	r0, #1
   17fd4:	cmp	r1, #0
   17fd8:	beq	18008 <__assert_fail@plt+0x68b8>
   17fdc:	mvn	r2, #-2147483648	; 0x80000000
   17fe0:	udiv	r2, r2, r1
   17fe4:	cmp	r2, r0
   17fe8:	bcs	18008 <__assert_fail@plt+0x68b8>
   17fec:	push	{fp, lr}
   17ff0:	mov	fp, sp
   17ff4:	bl	115f4 <__errno_location@plt>
   17ff8:	mov	r1, #12
   17ffc:	str	r1, [r0]
   18000:	mov	r0, #0
   18004:	pop	{fp, pc}
   18008:	b	113b4 <calloc@plt>
   1800c:	cmp	r0, #0
   18010:	movweq	r0, #1
   18014:	cmn	r0, #1
   18018:	ble	18020 <__assert_fail@plt+0x68d0>
   1801c:	b	1154c <malloc@plt>
   18020:	push	{fp, lr}
   18024:	mov	fp, sp
   18028:	bl	115f4 <__errno_location@plt>
   1802c:	mov	r1, #12
   18030:	str	r1, [r0]
   18034:	mov	r0, #0
   18038:	pop	{fp, pc}
   1803c:	push	{fp, lr}
   18040:	mov	fp, sp
   18044:	cmp	r0, #0
   18048:	beq	18064 <__assert_fail@plt+0x6914>
   1804c:	cmp	r1, #0
   18050:	beq	18070 <__assert_fail@plt+0x6920>
   18054:	cmn	r1, #1
   18058:	ble	18078 <__assert_fail@plt+0x6928>
   1805c:	pop	{fp, lr}
   18060:	b	1148c <realloc@plt>
   18064:	mov	r0, r1
   18068:	pop	{fp, lr}
   1806c:	b	1800c <__assert_fail@plt+0x68bc>
   18070:	bl	14e64 <__assert_fail@plt+0x3714>
   18074:	b	18084 <__assert_fail@plt+0x6934>
   18078:	bl	115f4 <__errno_location@plt>
   1807c:	mov	r1, #12
   18080:	str	r1, [r0]
   18084:	mov	r0, #0
   18088:	pop	{fp, pc}
   1808c:	push	{r4, r5, r6, sl, fp, lr}
   18090:	add	fp, sp, #16
   18094:	mov	r4, r0
   18098:	bl	11504 <__fpending@plt>
   1809c:	mov	r5, r0
   180a0:	mov	r0, r4
   180a4:	bl	11510 <ferror_unlocked@plt>
   180a8:	mov	r6, r0
   180ac:	mov	r0, r4
   180b0:	bl	14cbc <__assert_fail@plt+0x356c>
   180b4:	cmp	r6, #0
   180b8:	beq	180d8 <__assert_fail@plt+0x6988>
   180bc:	mvn	r4, #0
   180c0:	cmp	r0, #0
   180c4:	bne	18104 <__assert_fail@plt+0x69b4>
   180c8:	bl	115f4 <__errno_location@plt>
   180cc:	mov	r1, #0
   180d0:	str	r1, [r0]
   180d4:	b	18104 <__assert_fail@plt+0x69b4>
   180d8:	cmp	r0, #0
   180dc:	mov	r4, r0
   180e0:	mvnne	r4, #0
   180e4:	cmp	r5, #0
   180e8:	bne	18104 <__assert_fail@plt+0x69b4>
   180ec:	cmp	r0, #0
   180f0:	beq	18104 <__assert_fail@plt+0x69b4>
   180f4:	bl	115f4 <__errno_location@plt>
   180f8:	ldr	r0, [r0]
   180fc:	subs	r4, r0, #9
   18100:	mvnne	r4, #0
   18104:	mov	r0, r4
   18108:	pop	{r4, r5, r6, sl, fp, pc}
   1810c:	push	{fp, lr}
   18110:	mov	fp, sp
   18114:	mov	r0, #14
   18118:	bl	116d8 <nl_langinfo@plt>
   1811c:	movw	r1, #35781	; 0x8bc5
   18120:	cmp	r0, #0
   18124:	movt	r1, #1
   18128:	movne	r1, r0
   1812c:	movw	r0, #40334	; 0x9d8e
   18130:	ldrb	r2, [r1]
   18134:	movt	r0, #1
   18138:	cmp	r2, #0
   1813c:	movne	r0, r1
   18140:	pop	{fp, pc}
   18144:	push	{r4, r5, r6, r7, fp, lr}
   18148:	add	fp, sp, #16
   1814c:	sub	sp, sp, #8
   18150:	add	r5, sp, #4
   18154:	cmp	r0, #0
   18158:	mov	r7, r2
   1815c:	mov	r4, r1
   18160:	movne	r5, r0
   18164:	mov	r0, r5
   18168:	bl	1151c <mbrtowc@plt>
   1816c:	mov	r6, r0
   18170:	cmp	r7, #0
   18174:	beq	18198 <__assert_fail@plt+0x6a48>
   18178:	cmn	r6, #2
   1817c:	bcc	18198 <__assert_fail@plt+0x6a48>
   18180:	mov	r0, #0
   18184:	bl	183c4 <__assert_fail@plt+0x6c74>
   18188:	cmp	r0, #0
   1818c:	ldrbeq	r0, [r4]
   18190:	moveq	r6, #1
   18194:	streq	r0, [r5]
   18198:	mov	r0, r6
   1819c:	sub	sp, fp, #16
   181a0:	pop	{r4, r5, r6, r7, fp, pc}
   181a4:	cmp	r2, #0
   181a8:	beq	181d8 <__assert_fail@plt+0x6a88>
   181ac:	mvn	r3, #0
   181b0:	udiv	r3, r3, r2
   181b4:	cmp	r3, r1
   181b8:	bcs	181d8 <__assert_fail@plt+0x6a88>
   181bc:	push	{fp, lr}
   181c0:	mov	fp, sp
   181c4:	bl	115f4 <__errno_location@plt>
   181c8:	mov	r1, #12
   181cc:	str	r1, [r0]
   181d0:	mov	r0, #0
   181d4:	pop	{fp, pc}
   181d8:	mul	r1, r2, r1
   181dc:	b	1803c <__assert_fail@plt+0x68ec>
   181e0:	mov	r1, #0
   181e4:	mov	r2, #3
   181e8:	b	181ec <__assert_fail@plt+0x6a9c>
   181ec:	sub	sp, sp, #8
   181f0:	push	{r4, r5, r6, r7, fp, lr}
   181f4:	add	fp, sp, #16
   181f8:	sub	sp, sp, #8
   181fc:	mov	r5, r0
   18200:	add	r0, fp, #8
   18204:	cmp	r1, #11
   18208:	str	r3, [fp, #12]
   1820c:	str	r2, [fp, #8]
   18210:	str	r0, [sp, #4]
   18214:	bhi	18250 <__assert_fail@plt+0x6b00>
   18218:	mov	r0, #1
   1821c:	movw	r2, #1300	; 0x514
   18220:	tst	r2, r0, lsl r1
   18224:	bne	18308 <__assert_fail@plt+0x6bb8>
   18228:	movw	r2, #2570	; 0xa0a
   1822c:	tst	r2, r0, lsl r1
   18230:	bne	18278 <__assert_fail@plt+0x6b28>
   18234:	cmp	r1, #0
   18238:	bne	18250 <__assert_fail@plt+0x6b00>
   1823c:	ldr	r0, [sp, #4]
   18240:	add	r1, r0, #4
   18244:	str	r1, [sp, #4]
   18248:	mov	r1, #0
   1824c:	b	18314 <__assert_fail@plt+0x6bc4>
   18250:	sub	r0, r1, #1024	; 0x400
   18254:	cmp	r0, #10
   18258:	bhi	18308 <__assert_fail@plt+0x6bb8>
   1825c:	mov	r2, #1
   18260:	movw	r3, #645	; 0x285
   18264:	tst	r3, r2, lsl r0
   18268:	bne	18308 <__assert_fail@plt+0x6bb8>
   1826c:	movw	r3, #1282	; 0x502
   18270:	tst	r3, r2, lsl r0
   18274:	beq	18284 <__assert_fail@plt+0x6b34>
   18278:	mov	r0, r5
   1827c:	bl	11690 <fcntl64@plt>
   18280:	b	18320 <__assert_fail@plt+0x6bd0>
   18284:	cmp	r0, #6
   18288:	bne	18308 <__assert_fail@plt+0x6bb8>
   1828c:	ldr	r0, [sp, #4]
   18290:	movw	r7, #42608	; 0xa670
   18294:	movt	r7, #2
   18298:	add	r1, r0, #4
   1829c:	str	r1, [sp, #4]
   182a0:	ldr	r6, [r0]
   182a4:	ldr	r0, [r7]
   182a8:	cmp	r0, #0
   182ac:	blt	18344 <__assert_fail@plt+0x6bf4>
   182b0:	mov	r0, r5
   182b4:	movw	r1, #1030	; 0x406
   182b8:	mov	r2, r6
   182bc:	bl	11690 <fcntl64@plt>
   182c0:	mov	r4, r0
   182c4:	cmn	r0, #1
   182c8:	bgt	18338 <__assert_fail@plt+0x6be8>
   182cc:	bl	115f4 <__errno_location@plt>
   182d0:	ldr	r0, [r0]
   182d4:	cmp	r0, #22
   182d8:	bne	18338 <__assert_fail@plt+0x6be8>
   182dc:	mov	r0, r5
   182e0:	mov	r1, #0
   182e4:	mov	r2, r6
   182e8:	bl	11690 <fcntl64@plt>
   182ec:	mov	r4, r0
   182f0:	cmp	r0, #0
   182f4:	blt	18324 <__assert_fail@plt+0x6bd4>
   182f8:	mvn	r0, #0
   182fc:	str	r0, [r7]
   18300:	mov	r0, #1
   18304:	b	18368 <__assert_fail@plt+0x6c18>
   18308:	ldr	r0, [sp, #4]
   1830c:	add	r2, r0, #4
   18310:	str	r2, [sp, #4]
   18314:	ldr	r2, [r0]
   18318:	mov	r0, r5
   1831c:	bl	11690 <fcntl64@plt>
   18320:	mov	r4, r0
   18324:	mov	r0, r4
   18328:	sub	sp, fp, #16
   1832c:	pop	{r4, r5, r6, r7, fp, lr}
   18330:	add	sp, sp, #8
   18334:	bx	lr
   18338:	mov	r0, #1
   1833c:	str	r0, [r7]
   18340:	b	18324 <__assert_fail@plt+0x6bd4>
   18344:	mov	r0, r5
   18348:	mov	r1, #0
   1834c:	mov	r2, r6
   18350:	bl	11690 <fcntl64@plt>
   18354:	mov	r4, r0
   18358:	ldr	r0, [r7]
   1835c:	add	r0, r0, #1
   18360:	clz	r0, r0
   18364:	lsr	r0, r0, #5
   18368:	cmp	r0, #0
   1836c:	beq	18324 <__assert_fail@plt+0x6bd4>
   18370:	cmp	r4, #0
   18374:	blt	18324 <__assert_fail@plt+0x6bd4>
   18378:	mov	r0, r4
   1837c:	mov	r1, #1
   18380:	bl	11690 <fcntl64@plt>
   18384:	cmp	r0, #0
   18388:	blt	183a4 <__assert_fail@plt+0x6c54>
   1838c:	orr	r2, r0, #1
   18390:	mov	r0, r4
   18394:	mov	r1, #2
   18398:	bl	11690 <fcntl64@plt>
   1839c:	cmn	r0, #1
   183a0:	bne	18324 <__assert_fail@plt+0x6bd4>
   183a4:	bl	115f4 <__errno_location@plt>
   183a8:	ldr	r6, [r0]
   183ac:	mov	r5, r0
   183b0:	mov	r0, r4
   183b4:	bl	11738 <close@plt>
   183b8:	str	r6, [r5]
   183bc:	mvn	r4, #0
   183c0:	b	18324 <__assert_fail@plt+0x6bd4>
   183c4:	push	{r4, sl, fp, lr}
   183c8:	add	fp, sp, #8
   183cc:	sub	sp, sp, #264	; 0x108
   183d0:	add	r1, sp, #7
   183d4:	movw	r2, #257	; 0x101
   183d8:	bl	18428 <__assert_fail@plt+0x6cd8>
   183dc:	mov	r4, #0
   183e0:	cmp	r0, #0
   183e4:	bne	1841c <__assert_fail@plt+0x6ccc>
   183e8:	movw	r1, #40340	; 0x9d94
   183ec:	add	r0, sp, #7
   183f0:	movt	r1, #1
   183f4:	bl	113d8 <strcmp@plt>
   183f8:	cmp	r0, #0
   183fc:	beq	1841c <__assert_fail@plt+0x6ccc>
   18400:	movw	r1, #40342	; 0x9d96
   18404:	add	r0, sp, #7
   18408:	movt	r1, #1
   1840c:	bl	113d8 <strcmp@plt>
   18410:	mov	r4, r0
   18414:	cmp	r0, #0
   18418:	movwne	r4, #1
   1841c:	mov	r0, r4
   18420:	sub	sp, fp, #8
   18424:	pop	{r4, sl, fp, pc}
   18428:	push	{r4, r5, r6, r7, fp, lr}
   1842c:	add	fp, sp, #16
   18430:	mov	r4, r1
   18434:	mov	r1, #0
   18438:	mov	r6, r2
   1843c:	bl	1169c <setlocale@plt>
   18440:	cmp	r0, #0
   18444:	beq	18470 <__assert_fail@plt+0x6d20>
   18448:	mov	r7, r0
   1844c:	bl	115ac <strlen@plt>
   18450:	cmp	r0, r6
   18454:	bcs	18484 <__assert_fail@plt+0x6d34>
   18458:	add	r2, r0, #1
   1845c:	mov	r0, r4
   18460:	mov	r1, r7
   18464:	bl	11438 <memcpy@plt>
   18468:	mov	r5, #0
   1846c:	b	184ac <__assert_fail@plt+0x6d5c>
   18470:	cmp	r6, #0
   18474:	mov	r5, #22
   18478:	movne	r0, #0
   1847c:	strbne	r0, [r4]
   18480:	b	184ac <__assert_fail@plt+0x6d5c>
   18484:	mov	r5, #34	; 0x22
   18488:	cmp	r6, #0
   1848c:	beq	184ac <__assert_fail@plt+0x6d5c>
   18490:	sub	r6, r6, #1
   18494:	mov	r0, r4
   18498:	mov	r1, r7
   1849c:	mov	r2, r6
   184a0:	bl	11438 <memcpy@plt>
   184a4:	mov	r0, #0
   184a8:	strb	r0, [r4, r6]
   184ac:	mov	r0, r5
   184b0:	pop	{r4, r5, r6, r7, fp, pc}
   184b4:	mov	r1, #0
   184b8:	b	1169c <setlocale@plt>
   184bc:	cmp	r3, #0
   184c0:	cmpeq	r2, #0
   184c4:	bne	184dc <__assert_fail@plt+0x6d8c>
   184c8:	cmp	r1, #0
   184cc:	cmpeq	r0, #0
   184d0:	mvnne	r1, #0
   184d4:	mvnne	r0, #0
   184d8:	b	184f8 <__assert_fail@plt+0x6da8>
   184dc:	sub	sp, sp, #8
   184e0:	push	{sp, lr}
   184e4:	bl	18508 <__assert_fail@plt+0x6db8>
   184e8:	ldr	lr, [sp, #4]
   184ec:	add	sp, sp, #8
   184f0:	pop	{r2, r3}
   184f4:	bx	lr
   184f8:	push	{r1, lr}
   184fc:	mov	r0, #8
   18500:	bl	113cc <raise@plt>
   18504:	pop	{r1, pc}
   18508:	cmp	r1, r3
   1850c:	cmpeq	r0, r2
   18510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18514:	mov	r4, r0
   18518:	movcc	r0, #0
   1851c:	mov	r5, r1
   18520:	ldr	lr, [sp, #36]	; 0x24
   18524:	movcc	r1, r0
   18528:	bcc	18624 <__assert_fail@plt+0x6ed4>
   1852c:	cmp	r3, #0
   18530:	clzeq	ip, r2
   18534:	clzne	ip, r3
   18538:	addeq	ip, ip, #32
   1853c:	cmp	r5, #0
   18540:	clzeq	r1, r4
   18544:	addeq	r1, r1, #32
   18548:	clzne	r1, r5
   1854c:	sub	ip, ip, r1
   18550:	sub	sl, ip, #32
   18554:	lsl	r9, r3, ip
   18558:	rsb	fp, ip, #32
   1855c:	orr	r9, r9, r2, lsl sl
   18560:	orr	r9, r9, r2, lsr fp
   18564:	lsl	r8, r2, ip
   18568:	cmp	r5, r9
   1856c:	cmpeq	r4, r8
   18570:	movcc	r0, #0
   18574:	movcc	r1, r0
   18578:	bcc	18594 <__assert_fail@plt+0x6e44>
   1857c:	mov	r0, #1
   18580:	subs	r4, r4, r8
   18584:	lsl	r1, r0, sl
   18588:	orr	r1, r1, r0, lsr fp
   1858c:	lsl	r0, r0, ip
   18590:	sbc	r5, r5, r9
   18594:	cmp	ip, #0
   18598:	beq	18624 <__assert_fail@plt+0x6ed4>
   1859c:	lsr	r6, r8, #1
   185a0:	orr	r6, r6, r9, lsl #31
   185a4:	lsr	r7, r9, #1
   185a8:	mov	r2, ip
   185ac:	b	185d0 <__assert_fail@plt+0x6e80>
   185b0:	subs	r3, r4, r6
   185b4:	sbc	r8, r5, r7
   185b8:	adds	r3, r3, r3
   185bc:	adc	r8, r8, r8
   185c0:	adds	r4, r3, #1
   185c4:	adc	r5, r8, #0
   185c8:	subs	r2, r2, #1
   185cc:	beq	185ec <__assert_fail@plt+0x6e9c>
   185d0:	cmp	r5, r7
   185d4:	cmpeq	r4, r6
   185d8:	bcs	185b0 <__assert_fail@plt+0x6e60>
   185dc:	adds	r4, r4, r4
   185e0:	adc	r5, r5, r5
   185e4:	subs	r2, r2, #1
   185e8:	bne	185d0 <__assert_fail@plt+0x6e80>
   185ec:	lsr	r3, r4, ip
   185f0:	orr	r3, r3, r5, lsl fp
   185f4:	lsr	r2, r5, ip
   185f8:	orr	r3, r3, r5, lsr sl
   185fc:	adds	r0, r0, r4
   18600:	mov	r4, r3
   18604:	lsl	r3, r2, ip
   18608:	orr	r3, r3, r4, lsl sl
   1860c:	lsl	ip, r4, ip
   18610:	orr	r3, r3, r4, lsr fp
   18614:	adc	r1, r1, r5
   18618:	subs	r0, r0, ip
   1861c:	mov	r5, r2
   18620:	sbc	r1, r1, r3
   18624:	cmp	lr, #0
   18628:	strdne	r4, [lr]
   1862c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18630:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18634:	mov	r7, r0
   18638:	ldr	r6, [pc, #72]	; 18688 <__assert_fail@plt+0x6f38>
   1863c:	ldr	r5, [pc, #72]	; 1868c <__assert_fail@plt+0x6f3c>
   18640:	add	r6, pc, r6
   18644:	add	r5, pc, r5
   18648:	sub	r6, r6, r5
   1864c:	mov	r8, r1
   18650:	mov	r9, r2
   18654:	bl	11388 <fdopen@plt-0x20>
   18658:	asrs	r6, r6, #2
   1865c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18660:	mov	r4, #0
   18664:	add	r4, r4, #1
   18668:	ldr	r3, [r5], #4
   1866c:	mov	r2, r9
   18670:	mov	r1, r8
   18674:	mov	r0, r7
   18678:	blx	r3
   1867c:	cmp	r6, r4
   18680:	bne	18664 <__assert_fail@plt+0x6f14>
   18684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18688:	andeq	r1, r1, r4, asr #17
   1868c:			; <UNDEFINED> instruction: 0x000118bc
   18690:	bx	lr
   18694:	ldr	r3, [pc, #12]	; 186a8 <__assert_fail@plt+0x6f58>
   18698:	mov	r1, #0
   1869c:	add	r3, pc, r3
   186a0:	ldr	r2, [r3]
   186a4:	b	1160c <__cxa_atexit@plt>
   186a8:			; <UNDEFINED> instruction: 0x00011ab0
   186ac:	mov	r2, r1
   186b0:	mov	r1, r0
   186b4:	mov	r0, #3
   186b8:	b	114bc <__fxstat64@plt>

Disassembly of section .fini:

000186bc <.fini>:
   186bc:	push	{r3, lr}
   186c0:	pop	{r3, pc}
