
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010ea8 <.init>:
   10ea8:	push	{r3, lr}
   10eac:	bl	11214 <__assert_fail@plt+0x4c>
   10eb0:	pop	{r3, pc}

Disassembly of section .plt:

00010eb4 <fstatfs64@plt-0x14>:
   10eb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb8:	ldr	lr, [pc, #4]	; 10ec4 <fstatfs64@plt-0x4>
   10ebc:	add	lr, pc, lr
   10ec0:	ldr	pc, [lr, #8]!
   10ec4:	andeq	pc, r1, ip, lsr r1	; <UNPREDICTABLE>

00010ec8 <fstatfs64@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #126976	; 0x1f000
   10ed0:	ldr	pc, [ip, #316]!	; 0x13c

00010ed4 <calloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #126976	; 0x1f000
   10edc:	ldr	pc, [ip, #308]!	; 0x134

00010ee0 <fputs_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #126976	; 0x1f000
   10ee8:	ldr	pc, [ip, #300]!	; 0x12c

00010eec <raise@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #126976	; 0x1f000
   10ef4:	ldr	pc, [ip, #292]!	; 0x124

00010ef8 <strcmp@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #126976	; 0x1f000
   10f00:	ldr	pc, [ip, #284]!	; 0x11c

00010f04 <printf@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #126976	; 0x1f000
   10f0c:	ldr	pc, [ip, #276]!	; 0x114

00010f10 <fflush@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #126976	; 0x1f000
   10f18:	ldr	pc, [ip, #268]!	; 0x10c

00010f1c <memmove@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #126976	; 0x1f000
   10f24:	ldr	pc, [ip, #260]!	; 0x104

00010f28 <free@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #126976	; 0x1f000
   10f30:	ldr	pc, [ip, #252]!	; 0xfc

00010f34 <_exit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #126976	; 0x1f000
   10f3c:	ldr	pc, [ip, #244]!	; 0xf4

00010f40 <memcpy@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #126976	; 0x1f000
   10f48:	ldr	pc, [ip, #236]!	; 0xec

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #126976	; 0x1f000
   10f54:	ldr	pc, [ip, #228]!	; 0xe4

00010f58 <memcmp@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #126976	; 0x1f000
   10f60:	ldr	pc, [ip, #220]!	; 0xdc

00010f64 <fputc_unlocked@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #126976	; 0x1f000
   10f6c:	ldr	pc, [ip, #212]!	; 0xd4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #126976	; 0x1f000
   10f78:	ldr	pc, [ip, #204]!	; 0xcc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #126976	; 0x1f000
   10f84:	ldr	pc, [ip, #196]!	; 0xc4

00010f88 <__fxstatat64@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #126976	; 0x1f000
   10f90:	ldr	pc, [ip, #188]!	; 0xbc

00010f94 <iswprint@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #126976	; 0x1f000
   10f9c:	ldr	pc, [ip, #180]!	; 0xb4

00010fa0 <__fxstat64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #126976	; 0x1f000
   10fa8:	ldr	pc, [ip, #172]!	; 0xac

00010fac <fwrite@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #126976	; 0x1f000
   10fb4:	ldr	pc, [ip, #164]!	; 0xa4

00010fb8 <lseek64@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #126976	; 0x1f000
   10fc0:	ldr	pc, [ip, #156]!	; 0x9c

00010fc4 <__ctype_get_mb_cur_max@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #126976	; 0x1f000
   10fcc:	ldr	pc, [ip, #148]!	; 0x94

00010fd0 <__fpending@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #126976	; 0x1f000
   10fd8:	ldr	pc, [ip, #140]!	; 0x8c

00010fdc <ferror_unlocked@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #126976	; 0x1f000
   10fe4:	ldr	pc, [ip, #132]!	; 0x84

00010fe8 <mbrtowc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #126976	; 0x1f000
   10ff0:	ldr	pc, [ip, #124]!	; 0x7c

00010ff4 <error@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #126976	; 0x1f000
   10ffc:	ldr	pc, [ip, #116]!	; 0x74

00011000 <open64@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #126976	; 0x1f000
   11008:	ldr	pc, [ip, #108]!	; 0x6c

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #126976	; 0x1f000
   11014:	ldr	pc, [ip, #100]!	; 0x64

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #126976	; 0x1f000
   11020:	ldr	pc, [ip, #92]!	; 0x5c

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #126976	; 0x1f000
   1102c:	ldr	pc, [ip, #84]!	; 0x54

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #126976	; 0x1f000
   11038:	ldr	pc, [ip, #76]!	; 0x4c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #126976	; 0x1f000
   11044:	ldr	pc, [ip, #68]!	; 0x44

00011048 <__ctype_b_loc@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #126976	; 0x1f000
   11050:	ldr	pc, [ip, #60]!	; 0x3c

00011054 <exit@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #126976	; 0x1f000
   1105c:	ldr	pc, [ip, #52]!	; 0x34

00011060 <gettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #126976	; 0x1f000
   11068:	ldr	pc, [ip, #44]!	; 0x2c

0001106c <strlen@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #126976	; 0x1f000
   11074:	ldr	pc, [ip, #36]!	; 0x24

00011078 <openat64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #126976	; 0x1f000
   11080:	ldr	pc, [ip, #28]!

00011084 <fprintf@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #126976	; 0x1f000
   1108c:	ldr	pc, [ip, #20]!

00011090 <fchmodat@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #126976	; 0x1f000
   11098:	ldr	pc, [ip, #12]!

0001109c <__errno_location@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #126976	; 0x1f000
   110a4:	ldr	pc, [ip, #4]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #122880	; 0x1e000
   110b0:	ldr	pc, [ip, #4092]!	; 0xffc

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #4084]!	; 0xff4

000110c0 <fileno@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #4076]!	; 0xfec

000110cc <fclose@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #4068]!	; 0xfe4

000110d8 <fseeko64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #122880	; 0x1e000
   110e0:	ldr	pc, [ip, #4060]!	; 0xfdc

000110e4 <fcntl64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #122880	; 0x1e000
   110ec:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f0 <setlocale@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #122880	; 0x1e000
   110f8:	ldr	pc, [ip, #4044]!	; 0xfcc

000110fc <strrchr@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #122880	; 0x1e000
   11104:	ldr	pc, [ip, #4036]!	; 0xfc4

00011108 <nl_langinfo@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #122880	; 0x1e000
   11110:	ldr	pc, [ip, #4028]!	; 0xfbc

00011114 <sprintf@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #122880	; 0x1e000
   1111c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011120 <readdir64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #122880	; 0x1e000
   11128:	ldr	pc, [ip, #4012]!	; 0xfac

0001112c <fdopendir@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #122880	; 0x1e000
   11134:	ldr	pc, [ip, #4004]!	; 0xfa4

00011138 <dirfd@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #122880	; 0x1e000
   11140:	ldr	pc, [ip, #3996]!	; 0xf9c

00011144 <fchdir@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #122880	; 0x1e000
   1114c:	ldr	pc, [ip, #3988]!	; 0xf94

00011150 <qsort@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #122880	; 0x1e000
   11158:	ldr	pc, [ip, #3980]!	; 0xf8c

0001115c <bindtextdomain@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #122880	; 0x1e000
   11164:	ldr	pc, [ip, #3972]!	; 0xf84

00011168 <umask@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #122880	; 0x1e000
   11170:	ldr	pc, [ip, #3964]!	; 0xf7c

00011174 <chmod@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #122880	; 0x1e000
   1117c:	ldr	pc, [ip, #3956]!	; 0xf74

00011180 <__xstat64@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #122880	; 0x1e000
   11188:	ldr	pc, [ip, #3948]!	; 0xf6c

0001118c <strncmp@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #122880	; 0x1e000
   11194:	ldr	pc, [ip, #3940]!	; 0xf64

00011198 <abort@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #122880	; 0x1e000
   111a0:	ldr	pc, [ip, #3932]!	; 0xf5c

000111a4 <close@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #122880	; 0x1e000
   111ac:	ldr	pc, [ip, #3924]!	; 0xf54

000111b0 <__lxstat64@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #122880	; 0x1e000
   111b8:	ldr	pc, [ip, #3916]!	; 0xf4c

000111bc <closedir@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #122880	; 0x1e000
   111c4:	ldr	pc, [ip, #3908]!	; 0xf44

000111c8 <__assert_fail@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #122880	; 0x1e000
   111d0:	ldr	pc, [ip, #3900]!	; 0xf3c

Disassembly of section .text:

000111d8 <.text>:
   111d8:	mov	fp, #0
   111dc:	mov	lr, #0
   111e0:	pop	{r1}		; (ldr r1, [sp], #4)
   111e4:	mov	r2, sp
   111e8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ec:	push	{r0}		; (str r0, [sp, #-4]!)
   111f0:	ldr	ip, [pc, #16]	; 11208 <__assert_fail@plt+0x40>
   111f4:	push	{ip}		; (str ip, [sp, #-4]!)
   111f8:	ldr	r0, [pc, #12]	; 1120c <__assert_fail@plt+0x44>
   111fc:	ldr	r3, [pc, #12]	; 11210 <__assert_fail@plt+0x48>
   11200:	bl	11018 <__libc_start_main@plt>
   11204:	bl	11198 <abort@plt>
   11208:	andeq	lr, r1, r0, ror #14
   1120c:	andeq	r2, r1, ip, asr r1
   11210:	andeq	lr, r1, r0, lsl #14
   11214:	ldr	r3, [pc, #20]	; 11230 <__assert_fail@plt+0x68>
   11218:	ldr	r2, [pc, #20]	; 11234 <__assert_fail@plt+0x6c>
   1121c:	add	r3, pc, r3
   11220:	ldr	r2, [r3, r2]
   11224:	cmp	r2, #0
   11228:	bxeq	lr
   1122c:	b	11030 <__gmon_start__@plt>
   11230:	ldrdeq	lr, [r1], -ip
   11234:	andeq	r0, r0, r0, lsl r1
   11238:	ldr	r0, [pc, #24]	; 11258 <__assert_fail@plt+0x90>
   1123c:	ldr	r3, [pc, #24]	; 1125c <__assert_fail@plt+0x94>
   11240:	cmp	r3, r0
   11244:	bxeq	lr
   11248:	ldr	r3, [pc, #16]	; 11260 <__assert_fail@plt+0x98>
   1124c:	cmp	r3, #0
   11250:	bxeq	lr
   11254:	bx	r3
   11258:	andeq	r0, r3, r8, ror #2
   1125c:	andeq	r0, r3, r8, ror #2
   11260:	andeq	r0, r0, r0
   11264:	ldr	r0, [pc, #36]	; 11290 <__assert_fail@plt+0xc8>
   11268:	ldr	r1, [pc, #36]	; 11294 <__assert_fail@plt+0xcc>
   1126c:	sub	r1, r1, r0
   11270:	asr	r1, r1, #2
   11274:	add	r1, r1, r1, lsr #31
   11278:	asrs	r1, r1, #1
   1127c:	bxeq	lr
   11280:	ldr	r3, [pc, #16]	; 11298 <__assert_fail@plt+0xd0>
   11284:	cmp	r3, #0
   11288:	bxeq	lr
   1128c:	bx	r3
   11290:	andeq	r0, r3, r8, ror #2
   11294:	andeq	r0, r3, r8, ror #2
   11298:	andeq	r0, r0, r0
   1129c:	push	{r4, lr}
   112a0:	ldr	r4, [pc, #24]	; 112c0 <__assert_fail@plt+0xf8>
   112a4:	ldrb	r3, [r4]
   112a8:	cmp	r3, #0
   112ac:	popne	{r4, pc}
   112b0:	bl	11238 <__assert_fail@plt+0x70>
   112b4:	mov	r3, #1
   112b8:	strb	r3, [r4]
   112bc:	pop	{r4, pc}
   112c0:	andeq	r0, r3, r4, lsl #3
   112c4:	b	11264 <__assert_fail@plt+0x9c>
   112c8:	str	fp, [sp, #-8]!
   112cc:	str	lr, [sp, #4]
   112d0:	add	fp, sp, #4
   112d4:	sub	sp, sp, #80	; 0x50
   112d8:	str	r0, [fp, #-80]	; 0xffffffb0
   112dc:	movw	r2, #59732	; 0xe954
   112e0:	movt	r2, #1
   112e4:	sub	r3, fp, #72	; 0x48
   112e8:	ldrd	r0, [r2]
   112ec:	strd	r0, [r3]
   112f0:	ldrd	r0, [r2, #8]
   112f4:	strd	r0, [r3, #8]
   112f8:	ldrd	r0, [r2, #16]
   112fc:	strd	r0, [r3, #16]
   11300:	ldrd	r0, [r2, #24]
   11304:	strd	r0, [r3, #24]
   11308:	ldrd	r0, [r2, #32]
   1130c:	strd	r0, [r3, #32]
   11310:	ldrd	r0, [r2, #40]	; 0x28
   11314:	strd	r0, [r3, #40]	; 0x28
   11318:	ldrd	r0, [r2, #48]	; 0x30
   1131c:	strd	r0, [r3, #48]	; 0x30
   11320:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11324:	str	r3, [fp, #-8]
   11328:	sub	r3, fp, #72	; 0x48
   1132c:	str	r3, [fp, #-12]
   11330:	b	11340 <__assert_fail@plt+0x178>
   11334:	ldr	r3, [fp, #-12]
   11338:	add	r3, r3, #8
   1133c:	str	r3, [fp, #-12]
   11340:	ldr	r3, [fp, #-12]
   11344:	ldr	r3, [r3]
   11348:	cmp	r3, #0
   1134c:	beq	11370 <__assert_fail@plt+0x1a8>
   11350:	ldr	r3, [fp, #-12]
   11354:	ldr	r3, [r3]
   11358:	mov	r1, r3
   1135c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11360:	bl	10ef8 <strcmp@plt>
   11364:	mov	r3, r0
   11368:	cmp	r3, #0
   1136c:	bne	11334 <__assert_fail@plt+0x16c>
   11370:	ldr	r3, [fp, #-12]
   11374:	ldr	r3, [r3, #4]
   11378:	cmp	r3, #0
   1137c:	beq	1138c <__assert_fail@plt+0x1c4>
   11380:	ldr	r3, [fp, #-12]
   11384:	ldr	r3, [r3, #4]
   11388:	str	r3, [fp, #-8]
   1138c:	movw	r0, #59360	; 0xe7e0
   11390:	movt	r0, #1
   11394:	bl	11060 <gettext@plt>
   11398:	mov	r3, r0
   1139c:	movw	r2, #59384	; 0xe7f8
   113a0:	movt	r2, #1
   113a4:	movw	r1, #59424	; 0xe820
   113a8:	movt	r1, #1
   113ac:	mov	r0, r3
   113b0:	bl	10f04 <printf@plt>
   113b4:	mov	r1, #0
   113b8:	mov	r0, #5
   113bc:	bl	110f0 <setlocale@plt>
   113c0:	str	r0, [fp, #-16]
   113c4:	ldr	r3, [fp, #-16]
   113c8:	cmp	r3, #0
   113cc:	beq	11418 <__assert_fail@plt+0x250>
   113d0:	mov	r2, #3
   113d4:	movw	r1, #59440	; 0xe830
   113d8:	movt	r1, #1
   113dc:	ldr	r0, [fp, #-16]
   113e0:	bl	1118c <strncmp@plt>
   113e4:	mov	r3, r0
   113e8:	cmp	r3, #0
   113ec:	beq	11418 <__assert_fail@plt+0x250>
   113f0:	movw	r0, #59444	; 0xe834
   113f4:	movt	r0, #1
   113f8:	bl	11060 <gettext@plt>
   113fc:	mov	r2, r0
   11400:	movw	r3, #380	; 0x17c
   11404:	movt	r3, #3
   11408:	ldr	r3, [r3]
   1140c:	mov	r1, r3
   11410:	mov	r0, r2
   11414:	bl	10ee0 <fputs_unlocked@plt>
   11418:	movw	r0, #59516	; 0xe87c
   1141c:	movt	r0, #1
   11420:	bl	11060 <gettext@plt>
   11424:	mov	r3, r0
   11428:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1142c:	movw	r1, #59384	; 0xe7f8
   11430:	movt	r1, #1
   11434:	mov	r0, r3
   11438:	bl	10f04 <printf@plt>
   1143c:	movw	r0, #59544	; 0xe898
   11440:	movt	r0, #1
   11444:	bl	11060 <gettext@plt>
   11448:	ldr	r2, [fp, #-8]
   1144c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11450:	cmp	r2, r3
   11454:	bne	11464 <__assert_fail@plt+0x29c>
   11458:	movw	r3, #59596	; 0xe8cc
   1145c:	movt	r3, #1
   11460:	b	1146c <__assert_fail@plt+0x2a4>
   11464:	movw	r3, #59608	; 0xe8d8
   11468:	movt	r3, #1
   1146c:	mov	r2, r3
   11470:	ldr	r1, [fp, #-8]
   11474:	bl	10f04 <printf@plt>
   11478:	nop	{0}
   1147c:	sub	sp, fp, #4
   11480:	ldr	fp, [sp]
   11484:	add	sp, sp, #4
   11488:	pop	{pc}		; (ldr pc, [sp], #4)
   1148c:	strd	r4, [sp, #-16]!
   11490:	str	fp, [sp, #8]
   11494:	str	lr, [sp, #12]
   11498:	add	fp, sp, #12
   1149c:	sub	sp, sp, #120	; 0x78
   114a0:	str	r0, [fp, #-120]	; 0xffffff88
   114a4:	str	r1, [fp, #-124]	; 0xffffff84
   114a8:	str	r2, [fp, #-128]	; 0xffffff80
   114ac:	str	r3, [fp, #-132]	; 0xffffff7c
   114b0:	ldr	r3, [fp, #4]
   114b4:	and	r3, r3, #3584	; 0xe00
   114b8:	cmp	r3, #0
   114bc:	beq	11548 <__assert_fail@plt+0x380>
   114c0:	sub	r2, fp, #116	; 0x74
   114c4:	mov	r3, #0
   114c8:	ldr	r1, [fp, #-124]	; 0xffffff84
   114cc:	ldr	r0, [fp, #-120]	; 0xffffff88
   114d0:	bl	1e7ac <__assert_fail@plt+0xd5e4>
   114d4:	mov	r3, r0
   114d8:	cmp	r3, #0
   114dc:	beq	11540 <__assert_fail@plt+0x378>
   114e0:	movw	r3, #401	; 0x191
   114e4:	movt	r3, #3
   114e8:	ldrb	r3, [r3]
   114ec:	eor	r3, r3, #1
   114f0:	uxtb	r3, r3
   114f4:	cmp	r3, #0
   114f8:	beq	11538 <__assert_fail@plt+0x370>
   114fc:	bl	1109c <__errno_location@plt>
   11500:	mov	r3, r0
   11504:	ldr	r4, [r3]
   11508:	movw	r0, #60072	; 0xeaa8
   1150c:	movt	r0, #1
   11510:	bl	11060 <gettext@plt>
   11514:	mov	r5, r0
   11518:	ldr	r1, [fp, #-128]	; 0xffffff80
   1151c:	mov	r0, #4
   11520:	bl	1b1e8 <__assert_fail@plt+0xa020>
   11524:	mov	r3, r0
   11528:	mov	r2, r5
   1152c:	mov	r1, r4
   11530:	mov	r0, #0
   11534:	bl	10ff4 <error@plt>
   11538:	mov	r3, #0
   1153c:	b	11568 <__assert_fail@plt+0x3a0>
   11540:	ldr	r3, [fp, #-100]	; 0xffffff9c
   11544:	str	r3, [fp, #4]
   11548:	ldr	r2, [fp, #-132]	; 0xffffff7c
   1154c:	ldr	r3, [fp, #4]
   11550:	eor	r3, r3, r2
   11554:	ubfx	r3, r3, #0, #12
   11558:	cmp	r3, #0
   1155c:	movne	r3, #1
   11560:	moveq	r3, #0
   11564:	uxtb	r3, r3
   11568:	mov	r0, r3
   1156c:	sub	sp, fp, #12
   11570:	ldrd	r4, [sp]
   11574:	ldr	fp, [sp, #8]
   11578:	add	sp, sp, #12
   1157c:	pop	{pc}		; (ldr pc, [sp], #4)
   11580:	str	fp, [sp, #-8]!
   11584:	str	lr, [sp, #4]
   11588:	add	fp, sp, #4
   1158c:	sub	sp, sp, #56	; 0x38
   11590:	str	r0, [fp, #-48]	; 0xffffffd0
   11594:	str	r1, [fp, #-52]	; 0xffffffcc
   11598:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1159c:	mov	r0, #4
   115a0:	bl	1b1e8 <__assert_fail@plt+0xa020>
   115a4:	str	r0, [fp, #-12]
   115a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   115ac:	ldr	r3, [r3]
   115b0:	cmp	r3, #0
   115b4:	beq	115e0 <__assert_fail@plt+0x418>
   115b8:	cmp	r3, #2
   115bc:	bne	11600 <__assert_fail@plt+0x438>
   115c0:	movw	r0, #60104	; 0xeac8
   115c4:	movt	r0, #1
   115c8:	bl	11060 <gettext@plt>
   115cc:	mov	r3, r0
   115d0:	ldr	r1, [fp, #-12]
   115d4:	mov	r0, r3
   115d8:	bl	10f04 <printf@plt>
   115dc:	b	11710 <__assert_fail@plt+0x548>
   115e0:	movw	r0, #60160	; 0xeb00
   115e4:	movt	r0, #1
   115e8:	bl	11060 <gettext@plt>
   115ec:	mov	r3, r0
   115f0:	ldr	r1, [fp, #-12]
   115f4:	mov	r0, r3
   115f8:	bl	10f04 <printf@plt>
   115fc:	b	11710 <__assert_fail@plt+0x548>
   11600:	nop	{0}
   11604:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11608:	ldr	r3, [r3, #4]
   1160c:	ubfx	r3, r3, #0, #12
   11610:	str	r3, [fp, #-16]
   11614:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11618:	ldr	r3, [r3, #8]
   1161c:	ubfx	r3, r3, #0, #12
   11620:	str	r3, [fp, #-20]	; 0xffffffec
   11624:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11628:	ldr	r3, [r3, #8]
   1162c:	sub	r2, fp, #32
   11630:	mov	r1, r2
   11634:	mov	r0, r3
   11638:	bl	12d84 <__assert_fail@plt+0x1bbc>
   1163c:	mov	r3, #0
   11640:	strb	r3, [fp, #-22]	; 0xffffffea
   11644:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11648:	ldr	r3, [r3, #4]
   1164c:	sub	r2, fp, #44	; 0x2c
   11650:	mov	r1, r2
   11654:	mov	r0, r3
   11658:	bl	12d84 <__assert_fail@plt+0x1bbc>
   1165c:	mov	r3, #0
   11660:	strb	r3, [fp, #-34]	; 0xffffffde
   11664:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11668:	ldr	r3, [r3]
   1166c:	cmp	r3, #3
   11670:	beq	116b0 <__assert_fail@plt+0x4e8>
   11674:	cmp	r3, #4
   11678:	beq	11688 <__assert_fail@plt+0x4c0>
   1167c:	cmp	r3, #1
   11680:	beq	1169c <__assert_fail@plt+0x4d4>
   11684:	b	116dc <__assert_fail@plt+0x514>
   11688:	movw	r0, #60188	; 0xeb1c
   1168c:	movt	r0, #1
   11690:	bl	11060 <gettext@plt>
   11694:	str	r0, [fp, #-8]
   11698:	b	116e0 <__assert_fail@plt+0x518>
   1169c:	movw	r0, #60240	; 0xeb50
   116a0:	movt	r0, #1
   116a4:	bl	11060 <gettext@plt>
   116a8:	str	r0, [fp, #-8]
   116ac:	b	116e0 <__assert_fail@plt+0x518>
   116b0:	movw	r0, #60300	; 0xeb8c
   116b4:	movt	r0, #1
   116b8:	bl	11060 <gettext@plt>
   116bc:	str	r0, [fp, #-8]
   116c0:	sub	r3, fp, #32
   116c4:	add	r3, r3, #1
   116c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   116cc:	ldr	r1, [fp, #-12]
   116d0:	ldr	r0, [fp, #-8]
   116d4:	bl	10f04 <printf@plt>
   116d8:	b	11710 <__assert_fail@plt+0x548>
   116dc:	bl	11198 <abort@plt>
   116e0:	sub	r3, fp, #44	; 0x2c
   116e4:	add	r2, r3, #1
   116e8:	sub	r3, fp, #32
   116ec:	add	r3, r3, #1
   116f0:	str	r3, [sp, #4]
   116f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   116f8:	str	r3, [sp]
   116fc:	mov	r3, r2
   11700:	ldr	r2, [fp, #-16]
   11704:	ldr	r1, [fp, #-12]
   11708:	ldr	r0, [fp, #-8]
   1170c:	bl	10f04 <printf@plt>
   11710:	sub	sp, fp, #4
   11714:	ldr	fp, [sp]
   11718:	add	sp, sp, #4
   1171c:	pop	{pc}		; (ldr pc, [sp], #4)
   11720:	strd	r4, [sp, #-16]!
   11724:	str	fp, [sp, #8]
   11728:	str	lr, [sp, #12]
   1172c:	add	fp, sp, #12
   11730:	sub	sp, sp, #72	; 0x48
   11734:	str	r0, [fp, #-72]	; 0xffffffb8
   11738:	str	r1, [fp, #-76]	; 0xffffffb4
   1173c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11740:	ldr	r3, [r3, #28]
   11744:	str	r3, [fp, #-16]
   11748:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1174c:	ldr	r3, [r3, #24]
   11750:	str	r3, [fp, #-20]	; 0xffffffec
   11754:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11758:	add	r3, r3, #64	; 0x40
   1175c:	str	r3, [fp, #-24]	; 0xffffffe8
   11760:	sub	r1, fp, #44	; 0x2c
   11764:	mov	r2, #0
   11768:	mov	r3, #0
   1176c:	strd	r2, [r1]
   11770:	mov	r3, r2
   11774:	str	r3, [r1, #8]
   11778:	mov	r3, #0
   1177c:	str	r3, [fp, #-44]	; 0xffffffd4
   11780:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11784:	ldrh	r3, [r3, #56]	; 0x38
   11788:	sub	r3, r3, #2
   1178c:	cmp	r3, #11
   11790:	ldrls	pc, [pc, r3, lsl #2]
   11794:	b	119b8 <__assert_fail@plt+0x7f0>
   11798:	andeq	r1, r1, r4, ror #18
   1179c:			; <UNDEFINED> instruction: 0x000119b8
   117a0:			; <UNDEFINED> instruction: 0x000118bc
   117a4:			; <UNDEFINED> instruction: 0x000119b8
   117a8:	andeq	r1, r1, r8, asr #15
   117ac:	andeq	r1, r1, ip, ror #16
   117b0:			; <UNDEFINED> instruction: 0x000119b8
   117b4:			; <UNDEFINED> instruction: 0x000119b8
   117b8:	ldrdeq	r1, [r1], -r0
   117bc:			; <UNDEFINED> instruction: 0x000119b8
   117c0:			; <UNDEFINED> instruction: 0x000119b8
   117c4:	andeq	r1, r1, r4, lsl r9
   117c8:	mov	r3, #1
   117cc:	b	11e0c <__assert_fail@plt+0xc44>
   117d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   117d4:	ldr	r3, [r3, #48]	; 0x30
   117d8:	cmp	r3, #0
   117dc:	bne	11814 <__assert_fail@plt+0x64c>
   117e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   117e4:	ldr	r3, [r3, #16]
   117e8:	cmp	r3, #0
   117ec:	bne	11814 <__assert_fail@plt+0x64c>
   117f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   117f4:	mov	r2, #1
   117f8:	str	r2, [r3, #16]
   117fc:	mov	r2, #1
   11800:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11804:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11808:	bl	14a68 <__assert_fail@plt+0x38a0>
   1180c:	mov	r3, #1
   11810:	b	11e0c <__assert_fail@plt+0xc44>
   11814:	movw	r3, #401	; 0x191
   11818:	movt	r3, #3
   1181c:	ldrb	r3, [r3]
   11820:	eor	r3, r3, #1
   11824:	uxtb	r3, r3
   11828:	cmp	r3, #0
   1182c:	beq	119c4 <__assert_fail@plt+0x7fc>
   11830:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11834:	ldr	r4, [r3, #32]
   11838:	movw	r0, #60336	; 0xebb0
   1183c:	movt	r0, #1
   11840:	bl	11060 <gettext@plt>
   11844:	mov	r5, r0
   11848:	ldr	r1, [fp, #-16]
   1184c:	mov	r0, #4
   11850:	bl	1b1e8 <__assert_fail@plt+0xa020>
   11854:	mov	r3, r0
   11858:	mov	r2, r5
   1185c:	mov	r1, r4
   11860:	mov	r0, #0
   11864:	bl	10ff4 <error@plt>
   11868:	b	119c4 <__assert_fail@plt+0x7fc>
   1186c:	movw	r3, #401	; 0x191
   11870:	movt	r3, #3
   11874:	ldrb	r3, [r3]
   11878:	eor	r3, r3, #1
   1187c:	uxtb	r3, r3
   11880:	cmp	r3, #0
   11884:	beq	119cc <__assert_fail@plt+0x804>
   11888:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1188c:	ldr	r4, [r3, #32]
   11890:	ldr	r2, [fp, #-16]
   11894:	mov	r1, #3
   11898:	mov	r0, #0
   1189c:	bl	1b3cc <__assert_fail@plt+0xa204>
   118a0:	mov	r3, r0
   118a4:	movw	r2, #60356	; 0xebc4
   118a8:	movt	r2, #1
   118ac:	mov	r1, r4
   118b0:	mov	r0, #0
   118b4:	bl	10ff4 <error@plt>
   118b8:	b	119cc <__assert_fail@plt+0x804>
   118bc:	movw	r3, #401	; 0x191
   118c0:	movt	r3, #3
   118c4:	ldrb	r3, [r3]
   118c8:	eor	r3, r3, #1
   118cc:	uxtb	r3, r3
   118d0:	cmp	r3, #0
   118d4:	beq	119d4 <__assert_fail@plt+0x80c>
   118d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   118dc:	ldr	r4, [r3, #32]
   118e0:	movw	r0, #60360	; 0xebc8
   118e4:	movt	r0, #1
   118e8:	bl	11060 <gettext@plt>
   118ec:	mov	r5, r0
   118f0:	ldr	r1, [fp, #-16]
   118f4:	mov	r0, #4
   118f8:	bl	1b1e8 <__assert_fail@plt+0xa020>
   118fc:	mov	r3, r0
   11900:	mov	r2, r5
   11904:	mov	r1, r4
   11908:	mov	r0, #0
   1190c:	bl	10ff4 <error@plt>
   11910:	b	119d4 <__assert_fail@plt+0x80c>
   11914:	movw	r3, #401	; 0x191
   11918:	movt	r3, #3
   1191c:	ldrb	r3, [r3]
   11920:	eor	r3, r3, #1
   11924:	uxtb	r3, r3
   11928:	cmp	r3, #0
   1192c:	beq	119dc <__assert_fail@plt+0x814>
   11930:	movw	r0, #60388	; 0xebe4
   11934:	movt	r0, #1
   11938:	bl	11060 <gettext@plt>
   1193c:	mov	r4, r0
   11940:	ldr	r1, [fp, #-16]
   11944:	mov	r0, #4
   11948:	bl	1b1e8 <__assert_fail@plt+0xa020>
   1194c:	mov	r3, r0
   11950:	mov	r2, r4
   11954:	mov	r1, #0
   11958:	mov	r0, #0
   1195c:	bl	10ff4 <error@plt>
   11960:	b	119dc <__assert_fail@plt+0x814>
   11964:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11968:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1196c:	bl	1c988 <__assert_fail@plt+0xb7c0>
   11970:	mov	r3, r0
   11974:	cmp	r3, #0
   11978:	beq	119b8 <__assert_fail@plt+0x7f0>
   1197c:	movw	r0, #60428	; 0xec0c
   11980:	movt	r0, #1
   11984:	bl	11060 <gettext@plt>
   11988:	mov	r4, r0
   1198c:	ldr	r2, [fp, #-16]
   11990:	mov	r1, #3
   11994:	mov	r0, #0
   11998:	bl	1b3cc <__assert_fail@plt+0xa204>
   1199c:	mov	r3, r0
   119a0:	mov	r2, r4
   119a4:	mov	r1, #0
   119a8:	mov	r0, #0
   119ac:	bl	10ff4 <error@plt>
   119b0:	mov	r3, #0
   119b4:	b	11e0c <__assert_fail@plt+0xc44>
   119b8:	mov	r3, #2
   119bc:	str	r3, [fp, #-44]	; 0xffffffd4
   119c0:	b	119e0 <__assert_fail@plt+0x818>
   119c4:	nop	{0}
   119c8:	b	119e0 <__assert_fail@plt+0x818>
   119cc:	nop	{0}
   119d0:	b	119e0 <__assert_fail@plt+0x818>
   119d4:	nop	{0}
   119d8:	b	119e0 <__assert_fail@plt+0x818>
   119dc:	nop	{0}
   119e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119e4:	cmp	r3, #2
   119e8:	bne	11b30 <__assert_fail@plt+0x968>
   119ec:	movw	r3, #404	; 0x194
   119f0:	movt	r3, #3
   119f4:	ldr	r3, [r3]
   119f8:	cmp	r3, #0
   119fc:	beq	11b30 <__assert_fail@plt+0x968>
   11a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a04:	ldrd	r0, [r3, #96]	; 0x60
   11a08:	movw	r3, #404	; 0x194
   11a0c:	movt	r3, #3
   11a10:	ldr	r3, [r3]
   11a14:	ldrd	r2, [r3]
   11a18:	cmp	r1, r3
   11a1c:	cmpeq	r0, r2
   11a20:	bne	11b30 <__assert_fail@plt+0x968>
   11a24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a28:	ldrd	r0, [r3]
   11a2c:	movw	r3, #404	; 0x194
   11a30:	movt	r3, #3
   11a34:	ldr	r3, [r3]
   11a38:	ldrd	r2, [r3, #8]
   11a3c:	cmp	r1, r3
   11a40:	cmpeq	r0, r2
   11a44:	bne	11b30 <__assert_fail@plt+0x968>
   11a48:	movw	r1, #60616	; 0xecc8
   11a4c:	movt	r1, #1
   11a50:	ldr	r0, [fp, #-16]
   11a54:	bl	10ef8 <strcmp@plt>
   11a58:	mov	r3, r0
   11a5c:	cmp	r3, #0
   11a60:	bne	11a98 <__assert_fail@plt+0x8d0>
   11a64:	movw	r0, #60620	; 0xeccc
   11a68:	movt	r0, #1
   11a6c:	bl	11060 <gettext@plt>
   11a70:	mov	r4, r0
   11a74:	ldr	r1, [fp, #-16]
   11a78:	mov	r0, #4
   11a7c:	bl	1b1e8 <__assert_fail@plt+0xa020>
   11a80:	mov	r3, r0
   11a84:	mov	r2, r4
   11a88:	mov	r1, #0
   11a8c:	mov	r0, #0
   11a90:	bl	10ff4 <error@plt>
   11a94:	b	11aec <__assert_fail@plt+0x924>
   11a98:	movw	r0, #60668	; 0xecfc
   11a9c:	movt	r0, #1
   11aa0:	bl	11060 <gettext@plt>
   11aa4:	mov	r4, r0
   11aa8:	ldr	r2, [fp, #-16]
   11aac:	mov	r1, #4
   11ab0:	mov	r0, #0
   11ab4:	bl	1b134 <__assert_fail@plt+0x9f6c>
   11ab8:	mov	r5, r0
   11abc:	movw	r2, #60616	; 0xecc8
   11ac0:	movt	r2, #1
   11ac4:	mov	r1, #4
   11ac8:	mov	r0, #1
   11acc:	bl	1b134 <__assert_fail@plt+0x9f6c>
   11ad0:	mov	r3, r0
   11ad4:	str	r3, [sp]
   11ad8:	mov	r3, r5
   11adc:	mov	r2, r4
   11ae0:	mov	r1, #0
   11ae4:	mov	r0, #0
   11ae8:	bl	10ff4 <error@plt>
   11aec:	movw	r0, #60728	; 0xed38
   11af0:	movt	r0, #1
   11af4:	bl	11060 <gettext@plt>
   11af8:	mov	r3, r0
   11afc:	mov	r2, r3
   11b00:	mov	r1, #0
   11b04:	mov	r0, #0
   11b08:	bl	10ff4 <error@plt>
   11b0c:	mov	r2, #4
   11b10:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11b14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11b18:	bl	14a68 <__assert_fail@plt+0x38a0>
   11b1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11b20:	bl	142bc <__assert_fail@plt+0x30f4>
   11b24:	str	r0, [fp, #-28]	; 0xffffffe4
   11b28:	mov	r3, #0
   11b2c:	b	11e0c <__assert_fail@plt+0xc44>
   11b30:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11b34:	cmp	r3, #2
   11b38:	bne	11c38 <__assert_fail@plt+0xa70>
   11b3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b40:	ldr	r3, [r3, #16]
   11b44:	and	r3, r3, #61440	; 0xf000
   11b48:	cmp	r3, #40960	; 0xa000
   11b4c:	beq	11c38 <__assert_fail@plt+0xa70>
   11b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b54:	ldr	r3, [r3, #16]
   11b58:	str	r3, [fp, #-40]	; 0xffffffd8
   11b5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b60:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11b64:	and	r3, r3, #61440	; 0xf000
   11b68:	cmp	r3, #16384	; 0x4000
   11b6c:	moveq	r3, #1
   11b70:	movne	r3, #0
   11b74:	uxtb	r1, r3
   11b78:	movw	r3, #396	; 0x18c
   11b7c:	movt	r3, #3
   11b80:	ldr	r2, [r3]
   11b84:	movw	r3, #392	; 0x188
   11b88:	movt	r3, #3
   11b8c:	ldr	ip, [r3]
   11b90:	mov	r3, #0
   11b94:	str	r3, [sp]
   11b98:	mov	r3, ip
   11b9c:	bl	1898c <__assert_fail@plt+0x77c4>
   11ba0:	mov	r3, r0
   11ba4:	str	r3, [fp, #-36]	; 0xffffffdc
   11ba8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11bac:	ldr	r3, [r3, #32]
   11bb0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11bb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   11bb8:	mov	r0, r3
   11bbc:	bl	128a0 <__assert_fail@plt+0x16d8>
   11bc0:	mov	r3, r0
   11bc4:	cmp	r3, #0
   11bc8:	bne	11bd8 <__assert_fail@plt+0xa10>
   11bcc:	mov	r3, #4
   11bd0:	str	r3, [fp, #-44]	; 0xffffffd4
   11bd4:	b	11c38 <__assert_fail@plt+0xa70>
   11bd8:	movw	r3, #401	; 0x191
   11bdc:	movt	r3, #3
   11be0:	ldrb	r3, [r3]
   11be4:	eor	r3, r3, #1
   11be8:	uxtb	r3, r3
   11bec:	cmp	r3, #0
   11bf0:	beq	11c30 <__assert_fail@plt+0xa68>
   11bf4:	bl	1109c <__errno_location@plt>
   11bf8:	mov	r3, r0
   11bfc:	ldr	r4, [r3]
   11c00:	movw	r0, #60780	; 0xed6c
   11c04:	movt	r0, #1
   11c08:	bl	11060 <gettext@plt>
   11c0c:	mov	r5, r0
   11c10:	ldr	r1, [fp, #-16]
   11c14:	mov	r0, #4
   11c18:	bl	1b1e8 <__assert_fail@plt+0xa020>
   11c1c:	mov	r3, r0
   11c20:	mov	r2, r5
   11c24:	mov	r1, r4
   11c28:	mov	r0, #0
   11c2c:	bl	10ff4 <error@plt>
   11c30:	mov	r3, #1
   11c34:	str	r3, [fp, #-44]	; 0xffffffd4
   11c38:	movw	r3, #284	; 0x11c
   11c3c:	movt	r3, #3
   11c40:	ldr	r3, [r3]
   11c44:	cmp	r3, #2
   11c48:	beq	11cc8 <__assert_fail@plt+0xb00>
   11c4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c50:	cmp	r3, #4
   11c54:	bne	11c98 <__assert_fail@plt+0xad0>
   11c58:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11c5c:	ldr	r0, [r3, #32]
   11c60:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11c64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c68:	str	r3, [sp]
   11c6c:	mov	r3, r2
   11c70:	ldr	r2, [fp, #-16]
   11c74:	ldr	r1, [fp, #-20]	; 0xffffffec
   11c78:	bl	1148c <__assert_fail@plt+0x2c4>
   11c7c:	mov	r3, r0
   11c80:	eor	r3, r3, #1
   11c84:	uxtb	r3, r3
   11c88:	cmp	r3, #0
   11c8c:	beq	11c98 <__assert_fail@plt+0xad0>
   11c90:	mov	r3, #3
   11c94:	str	r3, [fp, #-44]	; 0xffffffd4
   11c98:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c9c:	cmp	r3, #4
   11ca0:	beq	11cb8 <__assert_fail@plt+0xaf0>
   11ca4:	movw	r3, #284	; 0x11c
   11ca8:	movt	r3, #3
   11cac:	ldr	r3, [r3]
   11cb0:	cmp	r3, #0
   11cb4:	bne	11cc8 <__assert_fail@plt+0xb00>
   11cb8:	sub	r3, fp, #44	; 0x2c
   11cbc:	mov	r1, r3
   11cc0:	ldr	r0, [fp, #-16]
   11cc4:	bl	11580 <__assert_fail@plt+0x3b8>
   11cc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ccc:	cmp	r3, #2
   11cd0:	bls	11dcc <__assert_fail@plt+0xc04>
   11cd4:	movw	r3, #402	; 0x192
   11cd8:	movt	r3, #3
   11cdc:	ldrb	r3, [r3]
   11ce0:	cmp	r3, #0
   11ce4:	beq	11dcc <__assert_fail@plt+0xc04>
   11ce8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11cec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11cf0:	and	r3, r3, #61440	; 0xf000
   11cf4:	cmp	r3, #16384	; 0x4000
   11cf8:	moveq	r3, #1
   11cfc:	movne	r3, #0
   11d00:	uxtb	r1, r3
   11d04:	movw	r3, #392	; 0x188
   11d08:	movt	r3, #3
   11d0c:	ldr	r2, [r3]
   11d10:	mov	r3, #0
   11d14:	str	r3, [sp]
   11d18:	mov	r3, r2
   11d1c:	mov	r2, #0
   11d20:	bl	1898c <__assert_fail@plt+0x77c4>
   11d24:	str	r0, [fp, #-32]	; 0xffffffe0
   11d28:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11d2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11d30:	mvn	r3, r3
   11d34:	and	r3, r3, r2
   11d38:	cmp	r3, #0
   11d3c:	beq	11dcc <__assert_fail@plt+0xc04>
   11d40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d44:	sub	r2, fp, #56	; 0x38
   11d48:	mov	r1, r2
   11d4c:	mov	r0, r3
   11d50:	bl	12d84 <__assert_fail@plt+0x1bbc>
   11d54:	sub	r3, fp, #68	; 0x44
   11d58:	mov	r1, r3
   11d5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11d60:	bl	12d84 <__assert_fail@plt+0x1bbc>
   11d64:	mov	r3, #0
   11d68:	strb	r3, [fp, #-58]	; 0xffffffc6
   11d6c:	ldrb	r3, [fp, #-58]	; 0xffffffc6
   11d70:	strb	r3, [fp, #-46]	; 0xffffffd2
   11d74:	movw	r0, #60808	; 0xed88
   11d78:	movt	r0, #1
   11d7c:	bl	11060 <gettext@plt>
   11d80:	mov	r4, r0
   11d84:	ldr	r2, [fp, #-16]
   11d88:	mov	r1, #3
   11d8c:	mov	r0, #0
   11d90:	bl	1b3cc <__assert_fail@plt+0xa204>
   11d94:	mov	r1, r0
   11d98:	sub	r3, fp, #56	; 0x38
   11d9c:	add	r3, r3, #1
   11da0:	sub	r2, fp, #68	; 0x44
   11da4:	add	r2, r2, #1
   11da8:	str	r2, [sp, #4]
   11dac:	str	r3, [sp]
   11db0:	mov	r3, r1
   11db4:	mov	r2, r4
   11db8:	mov	r1, #0
   11dbc:	mov	r0, #0
   11dc0:	bl	10ff4 <error@plt>
   11dc4:	mov	r3, #1
   11dc8:	str	r3, [fp, #-44]	; 0xffffffd4
   11dcc:	movw	r3, #400	; 0x190
   11dd0:	movt	r3, #3
   11dd4:	ldrb	r3, [r3]
   11dd8:	eor	r3, r3, #1
   11ddc:	uxtb	r3, r3
   11de0:	cmp	r3, #0
   11de4:	beq	11df8 <__assert_fail@plt+0xc30>
   11de8:	mov	r2, #4
   11dec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11df0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11df4:	bl	14a68 <__assert_fail@plt+0x38a0>
   11df8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11dfc:	cmp	r3, #1
   11e00:	movhi	r3, #1
   11e04:	movls	r3, #0
   11e08:	uxtb	r3, r3
   11e0c:	mov	r0, r3
   11e10:	sub	sp, fp, #12
   11e14:	ldrd	r4, [sp]
   11e18:	ldr	fp, [sp, #8]
   11e1c:	add	sp, sp, #12
   11e20:	pop	{pc}		; (ldr pc, [sp], #4)
   11e24:	str	r4, [sp, #-12]!
   11e28:	str	fp, [sp, #4]
   11e2c:	str	lr, [sp, #8]
   11e30:	add	fp, sp, #8
   11e34:	sub	sp, sp, #28
   11e38:	str	r0, [fp, #-32]	; 0xffffffe0
   11e3c:	str	r1, [fp, #-36]	; 0xffffffdc
   11e40:	mov	r3, #1
   11e44:	strb	r3, [fp, #-13]
   11e48:	mov	r2, #0
   11e4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11e50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e54:	bl	1c8f4 <__assert_fail@plt+0xb72c>
   11e58:	mov	r3, r0
   11e5c:	str	r3, [fp, #-20]	; 0xffffffec
   11e60:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e64:	bl	142bc <__assert_fail@plt+0x30f4>
   11e68:	str	r0, [fp, #-24]	; 0xffffffe8
   11e6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e70:	cmp	r3, #0
   11e74:	bne	11ee0 <__assert_fail@plt+0xd18>
   11e78:	bl	1109c <__errno_location@plt>
   11e7c:	mov	r3, r0
   11e80:	ldr	r3, [r3]
   11e84:	cmp	r3, #0
   11e88:	beq	11f10 <__assert_fail@plt+0xd48>
   11e8c:	movw	r3, #401	; 0x191
   11e90:	movt	r3, #3
   11e94:	ldrb	r3, [r3]
   11e98:	eor	r3, r3, #1
   11e9c:	uxtb	r3, r3
   11ea0:	cmp	r3, #0
   11ea4:	beq	11ed4 <__assert_fail@plt+0xd0c>
   11ea8:	bl	1109c <__errno_location@plt>
   11eac:	mov	r3, r0
   11eb0:	ldr	r4, [r3]
   11eb4:	movw	r0, #60844	; 0xedac
   11eb8:	movt	r0, #1
   11ebc:	bl	11060 <gettext@plt>
   11ec0:	mov	r3, r0
   11ec4:	mov	r2, r3
   11ec8:	mov	r1, r4
   11ecc:	mov	r0, #0
   11ed0:	bl	10ff4 <error@plt>
   11ed4:	mov	r3, #0
   11ed8:	strb	r3, [fp, #-13]
   11edc:	b	11f10 <__assert_fail@plt+0xd48>
   11ee0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11ee4:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ee8:	bl	11720 <__assert_fail@plt+0x558>
   11eec:	mov	r3, r0
   11ef0:	mov	r2, r3
   11ef4:	ldrb	r3, [fp, #-13]
   11ef8:	and	r3, r3, r2
   11efc:	cmp	r3, #0
   11f00:	movne	r3, #1
   11f04:	moveq	r3, #0
   11f08:	strb	r3, [fp, #-13]
   11f0c:	b	11e60 <__assert_fail@plt+0xc98>
   11f10:	nop	{0}
   11f14:	ldr	r0, [fp, #-20]	; 0xffffffec
   11f18:	bl	13d58 <__assert_fail@plt+0x2b90>
   11f1c:	mov	r3, r0
   11f20:	cmp	r3, #0
   11f24:	beq	11f5c <__assert_fail@plt+0xd94>
   11f28:	bl	1109c <__errno_location@plt>
   11f2c:	mov	r3, r0
   11f30:	ldr	r4, [r3]
   11f34:	movw	r0, #60860	; 0xedbc
   11f38:	movt	r0, #1
   11f3c:	bl	11060 <gettext@plt>
   11f40:	mov	r3, r0
   11f44:	mov	r2, r3
   11f48:	mov	r1, r4
   11f4c:	mov	r0, #0
   11f50:	bl	10ff4 <error@plt>
   11f54:	mov	r3, #0
   11f58:	strb	r3, [fp, #-13]
   11f5c:	ldrb	r3, [fp, #-13]
   11f60:	mov	r0, r3
   11f64:	sub	sp, fp, #8
   11f68:	ldr	r4, [sp]
   11f6c:	ldr	fp, [sp, #4]
   11f70:	add	sp, sp, #8
   11f74:	pop	{pc}		; (ldr pc, [sp], #4)
   11f78:	str	r4, [sp, #-12]!
   11f7c:	str	fp, [sp, #4]
   11f80:	str	lr, [sp, #8]
   11f84:	add	fp, sp, #8
   11f88:	sub	sp, sp, #12
   11f8c:	str	r0, [fp, #-16]
   11f90:	ldr	r3, [fp, #-16]
   11f94:	cmp	r3, #0
   11f98:	beq	11fd4 <__assert_fail@plt+0xe0c>
   11f9c:	movw	r3, #376	; 0x178
   11fa0:	movt	r3, #3
   11fa4:	ldr	r4, [r3]
   11fa8:	movw	r0, #60880	; 0xedd0
   11fac:	movt	r0, #1
   11fb0:	bl	11060 <gettext@plt>
   11fb4:	mov	r1, r0
   11fb8:	movw	r3, #432	; 0x1b0
   11fbc:	movt	r3, #3
   11fc0:	ldr	r3, [r3]
   11fc4:	mov	r2, r3
   11fc8:	mov	r0, r4
   11fcc:	bl	11084 <fprintf@plt>
   11fd0:	b	12154 <__assert_fail@plt+0xf8c>
   11fd4:	movw	r0, #60920	; 0xedf8
   11fd8:	movt	r0, #1
   11fdc:	bl	11060 <gettext@plt>
   11fe0:	movw	r3, #432	; 0x1b0
   11fe4:	movt	r3, #3
   11fe8:	ldr	r1, [r3]
   11fec:	movw	r3, #432	; 0x1b0
   11ff0:	movt	r3, #3
   11ff4:	ldr	r2, [r3]
   11ff8:	movw	r3, #432	; 0x1b0
   11ffc:	movt	r3, #3
   12000:	ldr	r3, [r3]
   12004:	bl	10f04 <printf@plt>
   12008:	movw	r0, #61056	; 0xee80
   1200c:	movt	r0, #1
   12010:	bl	11060 <gettext@plt>
   12014:	mov	r2, r0
   12018:	movw	r3, #380	; 0x17c
   1201c:	movt	r3, #3
   12020:	ldr	r3, [r3]
   12024:	mov	r1, r3
   12028:	mov	r0, r2
   1202c:	bl	10ee0 <fputs_unlocked@plt>
   12030:	movw	r0, #61164	; 0xeeec
   12034:	movt	r0, #1
   12038:	bl	11060 <gettext@plt>
   1203c:	mov	r2, r0
   12040:	movw	r3, #380	; 0x17c
   12044:	movt	r3, #3
   12048:	ldr	r3, [r3]
   1204c:	mov	r1, r3
   12050:	mov	r0, r2
   12054:	bl	10ee0 <fputs_unlocked@plt>
   12058:	movw	r0, #61368	; 0xefb8
   1205c:	movt	r0, #1
   12060:	bl	11060 <gettext@plt>
   12064:	mov	r2, r0
   12068:	movw	r3, #380	; 0x17c
   1206c:	movt	r3, #3
   12070:	ldr	r3, [r3]
   12074:	mov	r1, r3
   12078:	mov	r0, r2
   1207c:	bl	10ee0 <fputs_unlocked@plt>
   12080:	movw	r0, #61496	; 0xf038
   12084:	movt	r0, #1
   12088:	bl	11060 <gettext@plt>
   1208c:	mov	r2, r0
   12090:	movw	r3, #380	; 0x17c
   12094:	movt	r3, #3
   12098:	ldr	r3, [r3]
   1209c:	mov	r1, r3
   120a0:	mov	r0, r2
   120a4:	bl	10ee0 <fputs_unlocked@plt>
   120a8:	movw	r0, #61564	; 0xf07c
   120ac:	movt	r0, #1
   120b0:	bl	11060 <gettext@plt>
   120b4:	mov	r2, r0
   120b8:	movw	r3, #380	; 0x17c
   120bc:	movt	r3, #3
   120c0:	ldr	r3, [r3]
   120c4:	mov	r1, r3
   120c8:	mov	r0, r2
   120cc:	bl	10ee0 <fputs_unlocked@plt>
   120d0:	movw	r0, #61632	; 0xf0c0
   120d4:	movt	r0, #1
   120d8:	bl	11060 <gettext@plt>
   120dc:	mov	r2, r0
   120e0:	movw	r3, #380	; 0x17c
   120e4:	movt	r3, #3
   120e8:	ldr	r3, [r3]
   120ec:	mov	r1, r3
   120f0:	mov	r0, r2
   120f4:	bl	10ee0 <fputs_unlocked@plt>
   120f8:	movw	r0, #61680	; 0xf0f0
   120fc:	movt	r0, #1
   12100:	bl	11060 <gettext@plt>
   12104:	mov	r2, r0
   12108:	movw	r3, #380	; 0x17c
   1210c:	movt	r3, #3
   12110:	ldr	r3, [r3]
   12114:	mov	r1, r3
   12118:	mov	r0, r2
   1211c:	bl	10ee0 <fputs_unlocked@plt>
   12120:	movw	r0, #61736	; 0xf128
   12124:	movt	r0, #1
   12128:	bl	11060 <gettext@plt>
   1212c:	mov	r2, r0
   12130:	movw	r3, #380	; 0x17c
   12134:	movt	r3, #3
   12138:	ldr	r3, [r3]
   1213c:	mov	r1, r3
   12140:	mov	r0, r2
   12144:	bl	10ee0 <fputs_unlocked@plt>
   12148:	movw	r0, #61812	; 0xf174
   1214c:	movt	r0, #1
   12150:	bl	112c8 <__assert_fail@plt+0x100>
   12154:	ldr	r0, [fp, #-16]
   12158:	bl	11054 <exit@plt>
   1215c:	strd	r4, [sp, #-16]!
   12160:	str	fp, [sp, #8]
   12164:	str	lr, [sp, #12]
   12168:	add	fp, sp, #12
   1216c:	sub	sp, sp, #72	; 0x48
   12170:	str	r0, [fp, #-64]	; 0xffffffc0
   12174:	str	r1, [fp, #-68]	; 0xffffffbc
   12178:	mov	r3, #0
   1217c:	str	r3, [fp, #-16]
   12180:	mov	r3, #0
   12184:	str	r3, [fp, #-20]	; 0xffffffec
   12188:	mov	r3, #0
   1218c:	str	r3, [fp, #-56]	; 0xffffffc8
   12190:	mov	r3, #0
   12194:	strb	r3, [fp, #-21]	; 0xffffffeb
   12198:	mov	r3, #0
   1219c:	str	r3, [fp, #-28]	; 0xffffffe4
   121a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   121a4:	ldr	r3, [r3]
   121a8:	mov	r0, r3
   121ac:	bl	18d68 <__assert_fail@plt+0x7ba0>
   121b0:	movw	r1, #59608	; 0xe8d8
   121b4:	movt	r1, #1
   121b8:	mov	r0, #6
   121bc:	bl	110f0 <setlocale@plt>
   121c0:	movw	r1, #61820	; 0xf17c
   121c4:	movt	r1, #1
   121c8:	movw	r0, #59632	; 0xe8f0
   121cc:	movt	r0, #1
   121d0:	bl	1115c <bindtextdomain@plt>
   121d4:	movw	r0, #59632	; 0xe8f0
   121d8:	movt	r0, #1
   121dc:	bl	10f7c <textdomain@plt>
   121e0:	movw	r0, #10644	; 0x2994
   121e4:	movt	r0, #1
   121e8:	bl	1e764 <__assert_fail@plt+0xd59c>
   121ec:	movw	r3, #402	; 0x192
   121f0:	movt	r3, #3
   121f4:	mov	r2, #0
   121f8:	strb	r2, [r3]
   121fc:	movw	r3, #402	; 0x192
   12200:	movt	r3, #3
   12204:	ldrb	r2, [r3]
   12208:	movw	r3, #401	; 0x191
   1220c:	movt	r3, #3
   12210:	strb	r2, [r3]
   12214:	movw	r3, #401	; 0x191
   12218:	movt	r3, #3
   1221c:	ldrb	r2, [r3]
   12220:	movw	r3, #400	; 0x190
   12224:	movt	r3, #3
   12228:	strb	r2, [r3]
   1222c:	b	12550 <__assert_fail@plt+0x1388>
   12230:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12234:	cmp	r3, #99	; 0x63
   12238:	beq	124ac <__assert_fail@plt+0x12e4>
   1223c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12240:	cmp	r3, #99	; 0x63
   12244:	bgt	122e0 <__assert_fail@plt+0x1118>
   12248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1224c:	cmp	r3, #55	; 0x37
   12250:	bgt	1229c <__assert_fail@plt+0x10d4>
   12254:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12258:	cmp	r3, #48	; 0x30
   1225c:	bge	12388 <__assert_fail@plt+0x11c0>
   12260:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12264:	cmn	r3, #2
   12268:	beq	124e8 <__assert_fail@plt+0x1320>
   1226c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12270:	cmn	r3, #2
   12274:	bgt	12288 <__assert_fail@plt+0x10c0>
   12278:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1227c:	cmn	r3, #3
   12280:	beq	124f0 <__assert_fail@plt+0x1328>
   12284:	b	12548 <__assert_fail@plt+0x1380>
   12288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1228c:	sub	r3, r3, #43	; 0x2b
   12290:	cmp	r3, #1
   12294:	bhi	12548 <__assert_fail@plt+0x1380>
   12298:	b	12388 <__assert_fail@plt+0x11c0>
   1229c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122a0:	cmp	r3, #82	; 0x52
   122a4:	beq	12498 <__assert_fail@plt+0x12d0>
   122a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122ac:	cmp	r3, #82	; 0x52
   122b0:	bgt	122c4 <__assert_fail@plt+0x10fc>
   122b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122b8:	cmp	r3, #61	; 0x3d
   122bc:	beq	12388 <__assert_fail@plt+0x11c0>
   122c0:	b	12548 <__assert_fail@plt+0x1380>
   122c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122c8:	cmp	r3, #88	; 0x58
   122cc:	beq	12388 <__assert_fail@plt+0x11c0>
   122d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122d4:	cmp	r3, #97	; 0x61
   122d8:	beq	12388 <__assert_fail@plt+0x11c0>
   122dc:	b	12548 <__assert_fail@plt+0x1380>
   122e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122e4:	cmp	r3, #118	; 0x76
   122e8:	beq	124d4 <__assert_fail@plt+0x130c>
   122ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122f0:	cmp	r3, #118	; 0x76
   122f4:	bgt	1233c <__assert_fail@plt+0x1174>
   122f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122fc:	cmp	r3, #111	; 0x6f
   12300:	beq	12388 <__assert_fail@plt+0x11c0>
   12304:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12308:	cmp	r3, #111	; 0x6f
   1230c:	bgt	1232c <__assert_fail@plt+0x1164>
   12310:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12314:	cmp	r3, #102	; 0x66
   12318:	beq	124c0 <__assert_fail@plt+0x12f8>
   1231c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12320:	cmp	r3, #103	; 0x67
   12324:	beq	12388 <__assert_fail@plt+0x11c0>
   12328:	b	12548 <__assert_fail@plt+0x1380>
   1232c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12330:	cmp	r3, #114	; 0x72
   12334:	blt	12548 <__assert_fail@plt+0x1380>
   12338:	b	12388 <__assert_fail@plt+0x11c0>
   1233c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12340:	cmp	r3, #256	; 0x100
   12344:	beq	1246c <__assert_fail@plt+0x12a4>
   12348:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1234c:	cmp	r3, #256	; 0x100
   12350:	bgt	12364 <__assert_fail@plt+0x119c>
   12354:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12358:	cmp	r3, #120	; 0x78
   1235c:	bgt	12548 <__assert_fail@plt+0x1380>
   12360:	b	12388 <__assert_fail@plt+0x11c0>
   12364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12368:	movw	r2, #257	; 0x101
   1236c:	cmp	r3, r2
   12370:	beq	12478 <__assert_fail@plt+0x12b0>
   12374:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12378:	movw	r2, #258	; 0x102
   1237c:	cmp	r3, r2
   12380:	beq	12484 <__assert_fail@plt+0x12bc>
   12384:	b	12548 <__assert_fail@plt+0x1380>
   12388:	movw	r3, #368	; 0x170
   1238c:	movt	r3, #3
   12390:	ldr	r3, [r3]
   12394:	sub	r3, r3, #-1073741823	; 0xc0000001
   12398:	lsl	r3, r3, #2
   1239c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   123a0:	add	r3, r2, r3
   123a4:	ldr	r3, [r3]
   123a8:	str	r3, [fp, #-36]	; 0xffffffdc
   123ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   123b0:	bl	1106c <strlen@plt>
   123b4:	str	r0, [fp, #-40]	; 0xffffffd8
   123b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   123bc:	cmp	r3, #0
   123c0:	movne	r3, #1
   123c4:	moveq	r3, #0
   123c8:	uxtb	r3, r3
   123cc:	mov	r2, r3
   123d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   123d4:	add	r3, r3, r2
   123d8:	str	r3, [fp, #-44]	; 0xffffffd4
   123dc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   123e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   123e4:	add	r3, r2, r3
   123e8:	str	r3, [fp, #-48]	; 0xffffffd0
   123ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   123f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   123f4:	cmp	r2, r3
   123f8:	bcc	1241c <__assert_fail@plt+0x1254>
   123fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12400:	add	r3, r3, #1
   12404:	str	r3, [fp, #-56]	; 0xffffffc8
   12408:	sub	r3, fp, #56	; 0x38
   1240c:	mov	r1, r3
   12410:	ldr	r0, [fp, #-16]
   12414:	bl	1c2ec <__assert_fail@plt+0xb124>
   12418:	str	r0, [fp, #-16]
   1241c:	ldr	r2, [fp, #-16]
   12420:	ldr	r3, [fp, #-20]	; 0xffffffec
   12424:	add	r3, r2, r3
   12428:	mov	r2, #44	; 0x2c
   1242c:	strb	r2, [r3]
   12430:	ldr	r2, [fp, #-16]
   12434:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12438:	add	r0, r2, r3
   1243c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12440:	add	r3, r3, #1
   12444:	mov	r2, r3
   12448:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1244c:	bl	10f40 <memcpy@plt>
   12450:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12454:	str	r3, [fp, #-20]	; 0xffffffec
   12458:	movw	r3, #402	; 0x192
   1245c:	movt	r3, #3
   12460:	mov	r2, #1
   12464:	strb	r2, [r3]
   12468:	b	12550 <__assert_fail@plt+0x1388>
   1246c:	mov	r3, #0
   12470:	strb	r3, [fp, #-21]	; 0xffffffeb
   12474:	b	12550 <__assert_fail@plt+0x1388>
   12478:	mov	r3, #1
   1247c:	strb	r3, [fp, #-21]	; 0xffffffeb
   12480:	b	12550 <__assert_fail@plt+0x1388>
   12484:	movw	r3, #384	; 0x180
   12488:	movt	r3, #3
   1248c:	ldr	r3, [r3]
   12490:	str	r3, [fp, #-28]	; 0xffffffe4
   12494:	b	12550 <__assert_fail@plt+0x1388>
   12498:	movw	r3, #400	; 0x190
   1249c:	movt	r3, #3
   124a0:	mov	r2, #1
   124a4:	strb	r2, [r3]
   124a8:	b	12550 <__assert_fail@plt+0x1388>
   124ac:	movw	r3, #284	; 0x11c
   124b0:	movt	r3, #3
   124b4:	mov	r2, #1
   124b8:	str	r2, [r3]
   124bc:	b	12550 <__assert_fail@plt+0x1388>
   124c0:	movw	r3, #401	; 0x191
   124c4:	movt	r3, #3
   124c8:	mov	r2, #1
   124cc:	strb	r2, [r3]
   124d0:	b	12550 <__assert_fail@plt+0x1388>
   124d4:	movw	r3, #284	; 0x11c
   124d8:	movt	r3, #3
   124dc:	mov	r2, #0
   124e0:	str	r2, [r3]
   124e4:	b	12550 <__assert_fail@plt+0x1388>
   124e8:	mov	r0, #0
   124ec:	bl	11f78 <__assert_fail@plt+0xdb0>
   124f0:	movw	r3, #380	; 0x17c
   124f4:	movt	r3, #3
   124f8:	ldr	r0, [r3]
   124fc:	movw	r3, #288	; 0x120
   12500:	movt	r3, #3
   12504:	ldr	r2, [r3]
   12508:	mov	r3, #0
   1250c:	str	r3, [sp, #8]
   12510:	movw	r3, #61844	; 0xf194
   12514:	movt	r3, #1
   12518:	str	r3, [sp, #4]
   1251c:	movw	r3, #61860	; 0xf1a4
   12520:	movt	r3, #1
   12524:	str	r3, [sp]
   12528:	mov	r3, r2
   1252c:	movw	r2, #59424	; 0xe820
   12530:	movt	r2, #1
   12534:	movw	r1, #61812	; 0xf174
   12538:	movt	r1, #1
   1253c:	bl	1bebc <__assert_fail@plt+0xacf4>
   12540:	mov	r0, #0
   12544:	bl	11054 <exit@plt>
   12548:	mov	r0, #1
   1254c:	bl	11f78 <__assert_fail@plt+0xdb0>
   12550:	mov	r3, #0
   12554:	str	r3, [sp]
   12558:	movw	r3, #59896	; 0xe9f8
   1255c:	movt	r3, #1
   12560:	movw	r2, #61876	; 0xf1b4
   12564:	movt	r2, #1
   12568:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1256c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12570:	bl	1103c <getopt_long@plt>
   12574:	str	r0, [fp, #-32]	; 0xffffffe0
   12578:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1257c:	cmn	r3, #1
   12580:	bne	12230 <__assert_fail@plt+0x1068>
   12584:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12588:	cmp	r3, #0
   1258c:	beq	125c4 <__assert_fail@plt+0x13fc>
   12590:	ldr	r3, [fp, #-16]
   12594:	cmp	r3, #0
   12598:	beq	12604 <__assert_fail@plt+0x143c>
   1259c:	movw	r0, #61944	; 0xf1f8
   125a0:	movt	r0, #1
   125a4:	bl	11060 <gettext@plt>
   125a8:	mov	r3, r0
   125ac:	mov	r2, r3
   125b0:	mov	r1, #0
   125b4:	mov	r0, #0
   125b8:	bl	10ff4 <error@plt>
   125bc:	mov	r0, #1
   125c0:	bl	11f78 <__assert_fail@plt+0xdb0>
   125c4:	ldr	r3, [fp, #-16]
   125c8:	cmp	r3, #0
   125cc:	bne	12604 <__assert_fail@plt+0x143c>
   125d0:	movw	r3, #368	; 0x170
   125d4:	movt	r3, #3
   125d8:	ldr	r2, [r3]
   125dc:	add	r1, r2, #1
   125e0:	movw	r3, #368	; 0x170
   125e4:	movt	r3, #3
   125e8:	str	r1, [r3]
   125ec:	mov	r3, r2
   125f0:	lsl	r3, r3, #2
   125f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   125f8:	add	r3, r2, r3
   125fc:	ldr	r3, [r3]
   12600:	str	r3, [fp, #-16]
   12604:	movw	r3, #368	; 0x170
   12608:	movt	r3, #3
   1260c:	ldr	r3, [r3]
   12610:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12614:	cmp	r2, r3
   12618:	bgt	126c4 <__assert_fail@plt+0x14fc>
   1261c:	ldr	r3, [fp, #-16]
   12620:	cmp	r3, #0
   12624:	beq	12654 <__assert_fail@plt+0x148c>
   12628:	movw	r3, #368	; 0x170
   1262c:	movt	r3, #3
   12630:	ldr	r3, [r3]
   12634:	sub	r3, r3, #-1073741823	; 0xc0000001
   12638:	lsl	r3, r3, #2
   1263c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12640:	add	r3, r2, r3
   12644:	ldr	r3, [r3]
   12648:	ldr	r2, [fp, #-16]
   1264c:	cmp	r2, r3
   12650:	beq	12678 <__assert_fail@plt+0x14b0>
   12654:	movw	r0, #61988	; 0xf224
   12658:	movt	r0, #1
   1265c:	bl	11060 <gettext@plt>
   12660:	mov	r3, r0
   12664:	mov	r2, r3
   12668:	mov	r1, #0
   1266c:	mov	r0, #0
   12670:	bl	10ff4 <error@plt>
   12674:	b	126bc <__assert_fail@plt+0x14f4>
   12678:	movw	r0, #62004	; 0xf234
   1267c:	movt	r0, #1
   12680:	bl	11060 <gettext@plt>
   12684:	mov	r4, r0
   12688:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1268c:	sub	r3, r3, #-1073741823	; 0xc0000001
   12690:	lsl	r3, r3, #2
   12694:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12698:	add	r3, r2, r3
   1269c:	ldr	r3, [r3]
   126a0:	mov	r0, r3
   126a4:	bl	1b6c8 <__assert_fail@plt+0xa500>
   126a8:	mov	r3, r0
   126ac:	mov	r2, r4
   126b0:	mov	r1, #0
   126b4:	mov	r0, #0
   126b8:	bl	10ff4 <error@plt>
   126bc:	mov	r0, #1
   126c0:	bl	11f78 <__assert_fail@plt+0xdb0>
   126c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126c8:	cmp	r3, #0
   126cc:	beq	1273c <__assert_fail@plt+0x1574>
   126d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   126d4:	bl	1892c <__assert_fail@plt+0x7764>
   126d8:	mov	r3, r0
   126dc:	mov	r2, r3
   126e0:	movw	r3, #392	; 0x188
   126e4:	movt	r3, #3
   126e8:	str	r2, [r3]
   126ec:	movw	r3, #392	; 0x188
   126f0:	movt	r3, #3
   126f4:	ldr	r3, [r3]
   126f8:	cmp	r3, #0
   126fc:	bne	127b8 <__assert_fail@plt+0x15f0>
   12700:	bl	1109c <__errno_location@plt>
   12704:	mov	r3, r0
   12708:	ldr	r4, [r3]
   1270c:	movw	r0, #62032	; 0xf250
   12710:	movt	r0, #1
   12714:	bl	11060 <gettext@plt>
   12718:	mov	r5, r0
   1271c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12720:	mov	r0, #4
   12724:	bl	1b1e8 <__assert_fail@plt+0xa020>
   12728:	mov	r3, r0
   1272c:	mov	r2, r5
   12730:	mov	r1, r4
   12734:	mov	r0, #1
   12738:	bl	10ff4 <error@plt>
   1273c:	ldr	r0, [fp, #-16]
   12740:	bl	18324 <__assert_fail@plt+0x715c>
   12744:	mov	r3, r0
   12748:	mov	r2, r3
   1274c:	movw	r3, #392	; 0x188
   12750:	movt	r3, #3
   12754:	str	r2, [r3]
   12758:	movw	r3, #392	; 0x188
   1275c:	movt	r3, #3
   12760:	ldr	r3, [r3]
   12764:	cmp	r3, #0
   12768:	bne	127a0 <__assert_fail@plt+0x15d8>
   1276c:	movw	r0, #62064	; 0xf270
   12770:	movt	r0, #1
   12774:	bl	11060 <gettext@plt>
   12778:	mov	r4, r0
   1277c:	ldr	r0, [fp, #-16]
   12780:	bl	1b6c8 <__assert_fail@plt+0xa500>
   12784:	mov	r3, r0
   12788:	mov	r2, r4
   1278c:	mov	r1, #0
   12790:	mov	r0, #0
   12794:	bl	10ff4 <error@plt>
   12798:	mov	r0, #1
   1279c:	bl	11f78 <__assert_fail@plt+0xdb0>
   127a0:	mov	r0, #0
   127a4:	bl	11168 <umask@plt>
   127a8:	mov	r2, r0
   127ac:	movw	r3, #396	; 0x18c
   127b0:	movt	r3, #3
   127b4:	str	r2, [r3]
   127b8:	movw	r3, #400	; 0x190
   127bc:	movt	r3, #3
   127c0:	ldrb	r3, [r3]
   127c4:	cmp	r3, #0
   127c8:	beq	12848 <__assert_fail@plt+0x1680>
   127cc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   127d0:	cmp	r3, #0
   127d4:	beq	12848 <__assert_fail@plt+0x1680>
   127d8:	movw	r0, #408	; 0x198
   127dc:	movt	r0, #3
   127e0:	bl	1b700 <__assert_fail@plt+0xa538>
   127e4:	mov	r2, r0
   127e8:	movw	r3, #404	; 0x194
   127ec:	movt	r3, #3
   127f0:	str	r2, [r3]
   127f4:	movw	r3, #404	; 0x194
   127f8:	movt	r3, #3
   127fc:	ldr	r3, [r3]
   12800:	cmp	r3, #0
   12804:	bne	1285c <__assert_fail@plt+0x1694>
   12808:	bl	1109c <__errno_location@plt>
   1280c:	mov	r3, r0
   12810:	ldr	r4, [r3]
   12814:	movw	r0, #62032	; 0xf250
   12818:	movt	r0, #1
   1281c:	bl	11060 <gettext@plt>
   12820:	mov	r5, r0
   12824:	movw	r1, #60616	; 0xecc8
   12828:	movt	r1, #1
   1282c:	mov	r0, #4
   12830:	bl	1b1e8 <__assert_fail@plt+0xa020>
   12834:	mov	r3, r0
   12838:	mov	r2, r5
   1283c:	mov	r1, r4
   12840:	mov	r0, #1
   12844:	bl	10ff4 <error@plt>
   12848:	movw	r3, #404	; 0x194
   1284c:	movt	r3, #3
   12850:	mov	r2, #0
   12854:	str	r2, [r3]
   12858:	b	12860 <__assert_fail@plt+0x1698>
   1285c:	nop	{0}
   12860:	movw	r3, #368	; 0x170
   12864:	movt	r3, #3
   12868:	ldr	r3, [r3]
   1286c:	lsl	r3, r3, #2
   12870:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12874:	add	r3, r2, r3
   12878:	movw	r1, #1041	; 0x411
   1287c:	mov	r0, r3
   12880:	bl	11e24 <__assert_fail@plt+0xc5c>
   12884:	mov	r3, r0
   12888:	strb	r3, [fp, #-49]	; 0xffffffcf
   1288c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12890:	eor	r3, r3, #1
   12894:	uxtb	r3, r3
   12898:	mov	r0, r3
   1289c:	bl	11054 <exit@plt>
   128a0:	str	fp, [sp, #-8]!
   128a4:	str	lr, [sp, #4]
   128a8:	add	fp, sp, #4
   128ac:	sub	sp, sp, #16
   128b0:	str	r0, [fp, #-8]
   128b4:	str	r1, [fp, #-12]
   128b8:	str	r2, [fp, #-16]
   128bc:	mov	r3, #0
   128c0:	ldr	r2, [fp, #-16]
   128c4:	ldr	r1, [fp, #-12]
   128c8:	ldr	r0, [fp, #-8]
   128cc:	bl	12b30 <__assert_fail@plt+0x1968>
   128d0:	mov	r3, r0
   128d4:	mov	r0, r3
   128d8:	sub	sp, fp, #4
   128dc:	ldr	fp, [sp]
   128e0:	add	sp, sp, #4
   128e4:	pop	{pc}		; (ldr pc, [sp], #4)
   128e8:	str	fp, [sp, #-8]!
   128ec:	str	lr, [sp, #4]
   128f0:	add	fp, sp, #4
   128f4:	sub	sp, sp, #16
   128f8:	str	r0, [fp, #-8]
   128fc:	str	r1, [fp, #-12]
   12900:	str	r2, [fp, #-16]
   12904:	mov	r3, #256	; 0x100
   12908:	ldr	r2, [fp, #-16]
   1290c:	ldr	r1, [fp, #-12]
   12910:	ldr	r0, [fp, #-8]
   12914:	bl	12b30 <__assert_fail@plt+0x1968>
   12918:	mov	r3, r0
   1291c:	mov	r0, r3
   12920:	sub	sp, fp, #4
   12924:	ldr	fp, [sp]
   12928:	add	sp, sp, #4
   1292c:	pop	{pc}		; (ldr pc, [sp], #4)
   12930:	push	{fp}		; (str fp, [sp, #-4]!)
   12934:	add	fp, sp, #0
   12938:	sub	sp, sp, #12
   1293c:	str	r0, [fp, #-8]
   12940:	movw	r3, #424	; 0x1a8
   12944:	movt	r3, #3
   12948:	ldr	r2, [fp, #-8]
   1294c:	str	r2, [r3]
   12950:	nop	{0}
   12954:	add	sp, fp, #0
   12958:	pop	{fp}		; (ldr fp, [sp], #4)
   1295c:	bx	lr
   12960:	push	{fp}		; (str fp, [sp, #-4]!)
   12964:	add	fp, sp, #0
   12968:	sub	sp, sp, #12
   1296c:	mov	r3, r0
   12970:	strb	r3, [fp, #-5]
   12974:	movw	r3, #428	; 0x1ac
   12978:	movt	r3, #3
   1297c:	ldrb	r2, [fp, #-5]
   12980:	strb	r2, [r3]
   12984:	nop	{0}
   12988:	add	sp, fp, #0
   1298c:	pop	{fp}		; (ldr fp, [sp], #4)
   12990:	bx	lr
   12994:	str	r4, [sp, #-12]!
   12998:	str	fp, [sp, #4]
   1299c:	str	lr, [sp, #8]
   129a0:	add	fp, sp, #8
   129a4:	sub	sp, sp, #20
   129a8:	movw	r3, #380	; 0x17c
   129ac:	movt	r3, #3
   129b0:	ldr	r3, [r3]
   129b4:	mov	r0, r3
   129b8:	bl	1d03c <__assert_fail@plt+0xbe74>
   129bc:	mov	r3, r0
   129c0:	cmp	r3, #0
   129c4:	beq	12a98 <__assert_fail@plt+0x18d0>
   129c8:	movw	r3, #428	; 0x1ac
   129cc:	movt	r3, #3
   129d0:	ldrb	r3, [r3]
   129d4:	eor	r3, r3, #1
   129d8:	uxtb	r3, r3
   129dc:	cmp	r3, #0
   129e0:	bne	129f8 <__assert_fail@plt+0x1830>
   129e4:	bl	1109c <__errno_location@plt>
   129e8:	mov	r3, r0
   129ec:	ldr	r3, [r3]
   129f0:	cmp	r3, #32
   129f4:	beq	12a98 <__assert_fail@plt+0x18d0>
   129f8:	movw	r0, #62100	; 0xf294
   129fc:	movt	r0, #1
   12a00:	bl	11060 <gettext@plt>
   12a04:	str	r0, [fp, #-16]
   12a08:	movw	r3, #424	; 0x1a8
   12a0c:	movt	r3, #3
   12a10:	ldr	r3, [r3]
   12a14:	cmp	r3, #0
   12a18:	beq	12a64 <__assert_fail@plt+0x189c>
   12a1c:	bl	1109c <__errno_location@plt>
   12a20:	mov	r3, r0
   12a24:	ldr	r4, [r3]
   12a28:	movw	r3, #424	; 0x1a8
   12a2c:	movt	r3, #3
   12a30:	ldr	r3, [r3]
   12a34:	mov	r0, r3
   12a38:	bl	1b354 <__assert_fail@plt+0xa18c>
   12a3c:	mov	r2, r0
   12a40:	ldr	r3, [fp, #-16]
   12a44:	str	r3, [sp]
   12a48:	mov	r3, r2
   12a4c:	movw	r2, #62112	; 0xf2a0
   12a50:	movt	r2, #1
   12a54:	mov	r1, r4
   12a58:	mov	r0, #0
   12a5c:	bl	10ff4 <error@plt>
   12a60:	b	12a84 <__assert_fail@plt+0x18bc>
   12a64:	bl	1109c <__errno_location@plt>
   12a68:	mov	r3, r0
   12a6c:	ldr	r1, [r3]
   12a70:	ldr	r3, [fp, #-16]
   12a74:	movw	r2, #62120	; 0xf2a8
   12a78:	movt	r2, #1
   12a7c:	mov	r0, #0
   12a80:	bl	10ff4 <error@plt>
   12a84:	movw	r3, #292	; 0x124
   12a88:	movt	r3, #3
   12a8c:	ldr	r3, [r3]
   12a90:	mov	r0, r3
   12a94:	bl	10f34 <_exit@plt>
   12a98:	movw	r3, #376	; 0x178
   12a9c:	movt	r3, #3
   12aa0:	ldr	r3, [r3]
   12aa4:	mov	r0, r3
   12aa8:	bl	1d03c <__assert_fail@plt+0xbe74>
   12aac:	mov	r3, r0
   12ab0:	cmp	r3, #0
   12ab4:	beq	12acc <__assert_fail@plt+0x1904>
   12ab8:	movw	r3, #292	; 0x124
   12abc:	movt	r3, #3
   12ac0:	ldr	r3, [r3]
   12ac4:	mov	r0, r3
   12ac8:	bl	10f34 <_exit@plt>
   12acc:	nop	{0}
   12ad0:	sub	sp, fp, #8
   12ad4:	ldr	r4, [sp]
   12ad8:	ldr	fp, [sp, #4]
   12adc:	add	sp, sp, #8
   12ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae4:	str	fp, [sp, #-8]!
   12ae8:	str	lr, [sp, #4]
   12aec:	add	fp, sp, #4
   12af0:	sub	sp, sp, #16
   12af4:	str	r0, [fp, #-8]
   12af8:	str	r1, [fp, #-12]
   12afc:	str	r2, [fp, #-16]
   12b00:	str	r3, [fp, #-20]	; 0xffffffec
   12b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b08:	ldr	r2, [fp, #-16]
   12b0c:	ldr	r1, [fp, #-12]
   12b10:	ldr	r0, [fp, #-8]
   12b14:	bl	11090 <fchmodat@plt>
   12b18:	mov	r3, r0
   12b1c:	mov	r0, r3
   12b20:	sub	sp, fp, #4
   12b24:	ldr	fp, [sp]
   12b28:	add	sp, sp, #4
   12b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b30:	str	fp, [sp, #-8]!
   12b34:	str	lr, [sp, #4]
   12b38:	add	fp, sp, #4
   12b3c:	sub	sp, sp, #168	; 0xa8
   12b40:	str	r0, [fp, #-160]	; 0xffffff60
   12b44:	str	r1, [fp, #-164]	; 0xffffff5c
   12b48:	str	r2, [fp, #-168]	; 0xffffff58
   12b4c:	str	r3, [fp, #-172]	; 0xffffff54
   12b50:	ldr	r3, [fp, #-172]	; 0xffffff54
   12b54:	cmp	r3, #256	; 0x100
   12b58:	bne	12c8c <__assert_fail@plt+0x1ac4>
   12b5c:	mov	r2, #2654208	; 0x288000
   12b60:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12b64:	ldr	r0, [fp, #-160]	; 0xffffff60
   12b68:	bl	11078 <openat64@plt>
   12b6c:	str	r0, [fp, #-8]
   12b70:	ldr	r3, [fp, #-8]
   12b74:	cmp	r3, #0
   12b78:	bge	12b84 <__assert_fail@plt+0x19bc>
   12b7c:	ldr	r3, [fp, #-8]
   12b80:	b	12ca4 <__assert_fail@plt+0x1adc>
   12b84:	sub	r2, fp, #156	; 0x9c
   12b88:	mov	r3, #4096	; 0x1000
   12b8c:	movw	r1, #62124	; 0xf2ac
   12b90:	movt	r1, #1
   12b94:	ldr	r0, [fp, #-8]
   12b98:	bl	1e7ac <__assert_fail@plt+0xd5e4>
   12b9c:	mov	r3, r0
   12ba0:	cmp	r3, #0
   12ba4:	beq	12bd8 <__assert_fail@plt+0x1a10>
   12ba8:	bl	1109c <__errno_location@plt>
   12bac:	mov	r3, r0
   12bb0:	ldr	r3, [r3]
   12bb4:	str	r3, [fp, #-12]
   12bb8:	ldr	r0, [fp, #-8]
   12bbc:	bl	111a4 <close@plt>
   12bc0:	bl	1109c <__errno_location@plt>
   12bc4:	mov	r2, r0
   12bc8:	ldr	r3, [fp, #-12]
   12bcc:	str	r3, [r2]
   12bd0:	mvn	r3, #0
   12bd4:	b	12ca4 <__assert_fail@plt+0x1adc>
   12bd8:	ldr	r3, [fp, #-140]	; 0xffffff74
   12bdc:	and	r3, r3, #61440	; 0xf000
   12be0:	cmp	r3, #40960	; 0xa000
   12be4:	bne	12c08 <__assert_fail@plt+0x1a40>
   12be8:	ldr	r0, [fp, #-8]
   12bec:	bl	111a4 <close@plt>
   12bf0:	bl	1109c <__errno_location@plt>
   12bf4:	mov	r2, r0
   12bf8:	mov	r3, #95	; 0x5f
   12bfc:	str	r3, [r2]
   12c00:	mvn	r3, #0
   12c04:	b	12ca4 <__assert_fail@plt+0x1adc>
   12c08:	sub	r3, fp, #48	; 0x30
   12c0c:	ldr	r2, [fp, #-8]
   12c10:	movw	r1, #62128	; 0xf2b0
   12c14:	movt	r1, #1
   12c18:	mov	r0, r3
   12c1c:	bl	11114 <sprintf@plt>
   12c20:	sub	r3, fp, #48	; 0x30
   12c24:	ldr	r1, [fp, #-168]	; 0xffffff58
   12c28:	mov	r0, r3
   12c2c:	bl	11174 <chmod@plt>
   12c30:	str	r0, [fp, #-16]
   12c34:	bl	1109c <__errno_location@plt>
   12c38:	mov	r3, r0
   12c3c:	ldr	r3, [r3]
   12c40:	str	r3, [fp, #-20]	; 0xffffffec
   12c44:	ldr	r0, [fp, #-8]
   12c48:	bl	111a4 <close@plt>
   12c4c:	ldr	r3, [fp, #-16]
   12c50:	cmp	r3, #0
   12c54:	bne	12c60 <__assert_fail@plt+0x1a98>
   12c58:	ldr	r3, [fp, #-16]
   12c5c:	b	12ca4 <__assert_fail@plt+0x1adc>
   12c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c64:	cmp	r3, #2
   12c68:	beq	12c84 <__assert_fail@plt+0x1abc>
   12c6c:	bl	1109c <__errno_location@plt>
   12c70:	mov	r2, r0
   12c74:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c78:	str	r3, [r2]
   12c7c:	ldr	r3, [fp, #-16]
   12c80:	b	12ca4 <__assert_fail@plt+0x1adc>
   12c84:	mov	r3, #0
   12c88:	str	r3, [fp, #-172]	; 0xffffff54
   12c8c:	ldr	r3, [fp, #-172]	; 0xffffff54
   12c90:	ldr	r2, [fp, #-168]	; 0xffffff58
   12c94:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12c98:	ldr	r0, [fp, #-160]	; 0xffffff60
   12c9c:	bl	12ae4 <__assert_fail@plt+0x191c>
   12ca0:	mov	r3, r0
   12ca4:	mov	r0, r3
   12ca8:	sub	sp, fp, #4
   12cac:	ldr	fp, [sp]
   12cb0:	add	sp, sp, #4
   12cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cb8:	push	{fp}		; (str fp, [sp, #-4]!)
   12cbc:	add	fp, sp, #0
   12cc0:	sub	sp, sp, #12
   12cc4:	str	r0, [fp, #-8]
   12cc8:	ldr	r3, [fp, #-8]
   12ccc:	and	r3, r3, #61440	; 0xf000
   12cd0:	cmp	r3, #32768	; 0x8000
   12cd4:	bne	12ce0 <__assert_fail@plt+0x1b18>
   12cd8:	mov	r3, #45	; 0x2d
   12cdc:	b	12d74 <__assert_fail@plt+0x1bac>
   12ce0:	ldr	r3, [fp, #-8]
   12ce4:	and	r3, r3, #61440	; 0xf000
   12ce8:	cmp	r3, #16384	; 0x4000
   12cec:	bne	12cf8 <__assert_fail@plt+0x1b30>
   12cf0:	mov	r3, #100	; 0x64
   12cf4:	b	12d74 <__assert_fail@plt+0x1bac>
   12cf8:	ldr	r3, [fp, #-8]
   12cfc:	and	r3, r3, #61440	; 0xf000
   12d00:	cmp	r3, #24576	; 0x6000
   12d04:	bne	12d10 <__assert_fail@plt+0x1b48>
   12d08:	mov	r3, #98	; 0x62
   12d0c:	b	12d74 <__assert_fail@plt+0x1bac>
   12d10:	ldr	r3, [fp, #-8]
   12d14:	and	r3, r3, #61440	; 0xf000
   12d18:	cmp	r3, #8192	; 0x2000
   12d1c:	bne	12d28 <__assert_fail@plt+0x1b60>
   12d20:	mov	r3, #99	; 0x63
   12d24:	b	12d74 <__assert_fail@plt+0x1bac>
   12d28:	ldr	r3, [fp, #-8]
   12d2c:	and	r3, r3, #61440	; 0xf000
   12d30:	cmp	r3, #40960	; 0xa000
   12d34:	bne	12d40 <__assert_fail@plt+0x1b78>
   12d38:	mov	r3, #108	; 0x6c
   12d3c:	b	12d74 <__assert_fail@plt+0x1bac>
   12d40:	ldr	r3, [fp, #-8]
   12d44:	and	r3, r3, #61440	; 0xf000
   12d48:	cmp	r3, #4096	; 0x1000
   12d4c:	bne	12d58 <__assert_fail@plt+0x1b90>
   12d50:	mov	r3, #112	; 0x70
   12d54:	b	12d74 <__assert_fail@plt+0x1bac>
   12d58:	ldr	r3, [fp, #-8]
   12d5c:	and	r3, r3, #61440	; 0xf000
   12d60:	cmp	r3, #49152	; 0xc000
   12d64:	bne	12d70 <__assert_fail@plt+0x1ba8>
   12d68:	mov	r3, #115	; 0x73
   12d6c:	b	12d74 <__assert_fail@plt+0x1bac>
   12d70:	mov	r3, #63	; 0x3f
   12d74:	mov	r0, r3
   12d78:	add	sp, fp, #0
   12d7c:	pop	{fp}		; (ldr fp, [sp], #4)
   12d80:	bx	lr
   12d84:	str	fp, [sp, #-8]!
   12d88:	str	lr, [sp, #4]
   12d8c:	add	fp, sp, #4
   12d90:	sub	sp, sp, #8
   12d94:	str	r0, [fp, #-8]
   12d98:	str	r1, [fp, #-12]
   12d9c:	ldr	r0, [fp, #-8]
   12da0:	bl	12cb8 <__assert_fail@plt+0x1af0>
   12da4:	mov	r3, r0
   12da8:	mov	r2, r3
   12dac:	ldr	r3, [fp, #-12]
   12db0:	strb	r2, [r3]
   12db4:	ldr	r3, [fp, #-8]
   12db8:	and	r3, r3, #256	; 0x100
   12dbc:	cmp	r3, #0
   12dc0:	beq	12dcc <__assert_fail@plt+0x1c04>
   12dc4:	mov	r2, #114	; 0x72
   12dc8:	b	12dd0 <__assert_fail@plt+0x1c08>
   12dcc:	mov	r2, #45	; 0x2d
   12dd0:	ldr	r3, [fp, #-12]
   12dd4:	add	r3, r3, #1
   12dd8:	strb	r2, [r3]
   12ddc:	ldr	r3, [fp, #-8]
   12de0:	and	r3, r3, #128	; 0x80
   12de4:	cmp	r3, #0
   12de8:	beq	12df4 <__assert_fail@plt+0x1c2c>
   12dec:	mov	r2, #119	; 0x77
   12df0:	b	12df8 <__assert_fail@plt+0x1c30>
   12df4:	mov	r2, #45	; 0x2d
   12df8:	ldr	r3, [fp, #-12]
   12dfc:	add	r3, r3, #2
   12e00:	strb	r2, [r3]
   12e04:	ldr	r3, [fp, #-8]
   12e08:	and	r3, r3, #2048	; 0x800
   12e0c:	cmp	r3, #0
   12e10:	beq	12e34 <__assert_fail@plt+0x1c6c>
   12e14:	ldr	r3, [fp, #-8]
   12e18:	and	r3, r3, #64	; 0x40
   12e1c:	cmp	r3, #0
   12e20:	beq	12e2c <__assert_fail@plt+0x1c64>
   12e24:	mov	r3, #115	; 0x73
   12e28:	b	12e50 <__assert_fail@plt+0x1c88>
   12e2c:	mov	r3, #83	; 0x53
   12e30:	b	12e50 <__assert_fail@plt+0x1c88>
   12e34:	ldr	r3, [fp, #-8]
   12e38:	and	r3, r3, #64	; 0x40
   12e3c:	cmp	r3, #0
   12e40:	beq	12e4c <__assert_fail@plt+0x1c84>
   12e44:	mov	r3, #120	; 0x78
   12e48:	b	12e50 <__assert_fail@plt+0x1c88>
   12e4c:	mov	r3, #45	; 0x2d
   12e50:	ldr	r2, [fp, #-12]
   12e54:	add	r2, r2, #3
   12e58:	strb	r3, [r2]
   12e5c:	ldr	r3, [fp, #-8]
   12e60:	and	r3, r3, #32
   12e64:	cmp	r3, #0
   12e68:	beq	12e74 <__assert_fail@plt+0x1cac>
   12e6c:	mov	r2, #114	; 0x72
   12e70:	b	12e78 <__assert_fail@plt+0x1cb0>
   12e74:	mov	r2, #45	; 0x2d
   12e78:	ldr	r3, [fp, #-12]
   12e7c:	add	r3, r3, #4
   12e80:	strb	r2, [r3]
   12e84:	ldr	r3, [fp, #-8]
   12e88:	and	r3, r3, #16
   12e8c:	cmp	r3, #0
   12e90:	beq	12e9c <__assert_fail@plt+0x1cd4>
   12e94:	mov	r2, #119	; 0x77
   12e98:	b	12ea0 <__assert_fail@plt+0x1cd8>
   12e9c:	mov	r2, #45	; 0x2d
   12ea0:	ldr	r3, [fp, #-12]
   12ea4:	add	r3, r3, #5
   12ea8:	strb	r2, [r3]
   12eac:	ldr	r3, [fp, #-8]
   12eb0:	and	r3, r3, #1024	; 0x400
   12eb4:	cmp	r3, #0
   12eb8:	beq	12edc <__assert_fail@plt+0x1d14>
   12ebc:	ldr	r3, [fp, #-8]
   12ec0:	and	r3, r3, #8
   12ec4:	cmp	r3, #0
   12ec8:	beq	12ed4 <__assert_fail@plt+0x1d0c>
   12ecc:	mov	r3, #115	; 0x73
   12ed0:	b	12ef8 <__assert_fail@plt+0x1d30>
   12ed4:	mov	r3, #83	; 0x53
   12ed8:	b	12ef8 <__assert_fail@plt+0x1d30>
   12edc:	ldr	r3, [fp, #-8]
   12ee0:	and	r3, r3, #8
   12ee4:	cmp	r3, #0
   12ee8:	beq	12ef4 <__assert_fail@plt+0x1d2c>
   12eec:	mov	r3, #120	; 0x78
   12ef0:	b	12ef8 <__assert_fail@plt+0x1d30>
   12ef4:	mov	r3, #45	; 0x2d
   12ef8:	ldr	r2, [fp, #-12]
   12efc:	add	r2, r2, #6
   12f00:	strb	r3, [r2]
   12f04:	ldr	r3, [fp, #-8]
   12f08:	and	r3, r3, #4
   12f0c:	cmp	r3, #0
   12f10:	beq	12f1c <__assert_fail@plt+0x1d54>
   12f14:	mov	r2, #114	; 0x72
   12f18:	b	12f20 <__assert_fail@plt+0x1d58>
   12f1c:	mov	r2, #45	; 0x2d
   12f20:	ldr	r3, [fp, #-12]
   12f24:	add	r3, r3, #7
   12f28:	strb	r2, [r3]
   12f2c:	ldr	r3, [fp, #-8]
   12f30:	and	r3, r3, #2
   12f34:	cmp	r3, #0
   12f38:	beq	12f44 <__assert_fail@plt+0x1d7c>
   12f3c:	mov	r2, #119	; 0x77
   12f40:	b	12f48 <__assert_fail@plt+0x1d80>
   12f44:	mov	r2, #45	; 0x2d
   12f48:	ldr	r3, [fp, #-12]
   12f4c:	add	r3, r3, #8
   12f50:	strb	r2, [r3]
   12f54:	ldr	r3, [fp, #-8]
   12f58:	and	r3, r3, #512	; 0x200
   12f5c:	cmp	r3, #0
   12f60:	beq	12f84 <__assert_fail@plt+0x1dbc>
   12f64:	ldr	r3, [fp, #-8]
   12f68:	and	r3, r3, #1
   12f6c:	cmp	r3, #0
   12f70:	beq	12f7c <__assert_fail@plt+0x1db4>
   12f74:	mov	r3, #116	; 0x74
   12f78:	b	12fa0 <__assert_fail@plt+0x1dd8>
   12f7c:	mov	r3, #84	; 0x54
   12f80:	b	12fa0 <__assert_fail@plt+0x1dd8>
   12f84:	ldr	r3, [fp, #-8]
   12f88:	and	r3, r3, #1
   12f8c:	cmp	r3, #0
   12f90:	beq	12f9c <__assert_fail@plt+0x1dd4>
   12f94:	mov	r3, #120	; 0x78
   12f98:	b	12fa0 <__assert_fail@plt+0x1dd8>
   12f9c:	mov	r3, #45	; 0x2d
   12fa0:	ldr	r2, [fp, #-12]
   12fa4:	add	r2, r2, #9
   12fa8:	strb	r3, [r2]
   12fac:	ldr	r3, [fp, #-12]
   12fb0:	add	r3, r3, #10
   12fb4:	mov	r2, #32
   12fb8:	strb	r2, [r3]
   12fbc:	ldr	r3, [fp, #-12]
   12fc0:	add	r3, r3, #11
   12fc4:	mov	r2, #0
   12fc8:	strb	r2, [r3]
   12fcc:	nop	{0}
   12fd0:	sub	sp, fp, #4
   12fd4:	ldr	fp, [sp]
   12fd8:	add	sp, sp, #4
   12fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe0:	str	fp, [sp, #-8]!
   12fe4:	str	lr, [sp, #4]
   12fe8:	add	fp, sp, #4
   12fec:	sub	sp, sp, #8
   12ff0:	str	r0, [fp, #-8]
   12ff4:	str	r1, [fp, #-12]
   12ff8:	ldr	r3, [fp, #-8]
   12ffc:	ldr	r3, [r3, #16]
   13000:	ldr	r1, [fp, #-12]
   13004:	mov	r0, r3
   13008:	bl	12d84 <__assert_fail@plt+0x1bbc>
   1300c:	nop	{0}
   13010:	sub	sp, fp, #4
   13014:	ldr	fp, [sp]
   13018:	add	sp, sp, #4
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	push	{fp}		; (str fp, [sp, #-4]!)
   13024:	add	fp, sp, #0
   13028:	sub	sp, sp, #20
   1302c:	str	r0, [fp, #-16]
   13030:	str	r1, [fp, #-20]	; 0xffffffec
   13034:	ldr	r3, [fp, #-16]
   13038:	str	r3, [fp, #-8]
   1303c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13040:	str	r3, [fp, #-12]
   13044:	ldr	r3, [fp, #-8]
   13048:	ldrd	r0, [r3, #8]
   1304c:	ldr	r3, [fp, #-12]
   13050:	ldrd	r2, [r3, #8]
   13054:	cmp	r1, r3
   13058:	cmpeq	r0, r2
   1305c:	bne	13084 <__assert_fail@plt+0x1ebc>
   13060:	ldr	r3, [fp, #-8]
   13064:	ldrd	r0, [r3]
   13068:	ldr	r3, [fp, #-12]
   1306c:	ldrd	r2, [r3]
   13070:	cmp	r1, r3
   13074:	cmpeq	r0, r2
   13078:	bne	13084 <__assert_fail@plt+0x1ebc>
   1307c:	mov	r3, #1
   13080:	b	13088 <__assert_fail@plt+0x1ec0>
   13084:	mov	r3, #0
   13088:	and	r3, r3, #1
   1308c:	uxtb	r3, r3
   13090:	mov	r0, r3
   13094:	add	sp, fp, #0
   13098:	pop	{fp}		; (ldr fp, [sp], #4)
   1309c:	bx	lr
   130a0:	str	fp, [sp, #-8]!
   130a4:	str	lr, [sp, #4]
   130a8:	add	fp, sp, #4
   130ac:	sub	sp, sp, #16
   130b0:	str	r0, [fp, #-16]
   130b4:	str	r1, [fp, #-20]	; 0xffffffec
   130b8:	ldr	r3, [fp, #-16]
   130bc:	str	r3, [fp, #-8]
   130c0:	ldr	r3, [fp, #-8]
   130c4:	ldrd	r0, [r3, #8]
   130c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130cc:	mov	r2, r3
   130d0:	mov	r3, #0
   130d4:	bl	1e58c <__assert_fail@plt+0xd3c4>
   130d8:	mov	r3, r2
   130dc:	mov	r0, r3
   130e0:	sub	sp, fp, #4
   130e4:	ldr	fp, [sp]
   130e8:	add	sp, sp, #4
   130ec:	pop	{pc}		; (ldr pc, [sp], #4)
   130f0:	str	fp, [sp, #-8]!
   130f4:	str	lr, [sp, #4]
   130f8:	add	fp, sp, #4
   130fc:	sub	sp, sp, #16
   13100:	str	r0, [fp, #-8]
   13104:	ldr	r3, [fp, #-8]
   13108:	ldr	r2, [r3, #48]	; 0x30
   1310c:	movw	r3, #258	; 0x102
   13110:	and	r3, r3, r2
   13114:	cmp	r3, #0
   13118:	beq	1316c <__assert_fail@plt+0x1fa4>
   1311c:	movw	r3, #55576	; 0xd918
   13120:	movt	r3, #1
   13124:	str	r3, [sp]
   13128:	movw	r3, #12320	; 0x3020
   1312c:	movt	r3, #1
   13130:	movw	r2, #12448	; 0x30a0
   13134:	movt	r2, #1
   13138:	mov	r1, #0
   1313c:	mov	r0, #31
   13140:	bl	17014 <__assert_fail@plt+0x5e4c>
   13144:	mov	r3, r0
   13148:	mov	r2, r3
   1314c:	ldr	r3, [fp, #-8]
   13150:	str	r2, [r3, #56]	; 0x38
   13154:	ldr	r3, [fp, #-8]
   13158:	ldr	r3, [r3, #56]	; 0x38
   1315c:	cmp	r3, #0
   13160:	bne	131ac <__assert_fail@plt+0x1fe4>
   13164:	mov	r3, #0
   13168:	b	131b0 <__assert_fail@plt+0x1fe8>
   1316c:	mov	r0, #32
   13170:	bl	1caf0 <__assert_fail@plt+0xb928>
   13174:	mov	r3, r0
   13178:	mov	r2, r3
   1317c:	ldr	r3, [fp, #-8]
   13180:	str	r2, [r3, #56]	; 0x38
   13184:	ldr	r3, [fp, #-8]
   13188:	ldr	r3, [r3, #56]	; 0x38
   1318c:	cmp	r3, #0
   13190:	bne	1319c <__assert_fail@plt+0x1fd4>
   13194:	mov	r3, #0
   13198:	b	131b0 <__assert_fail@plt+0x1fe8>
   1319c:	ldr	r3, [fp, #-8]
   131a0:	ldr	r3, [r3, #56]	; 0x38
   131a4:	mov	r0, r3
   131a8:	bl	1d178 <__assert_fail@plt+0xbfb0>
   131ac:	mov	r3, #1
   131b0:	mov	r0, r3
   131b4:	sub	sp, fp, #4
   131b8:	ldr	fp, [sp]
   131bc:	add	sp, sp, #4
   131c0:	pop	{pc}		; (ldr pc, [sp], #4)
   131c4:	str	fp, [sp, #-8]!
   131c8:	str	lr, [sp, #4]
   131cc:	add	fp, sp, #4
   131d0:	sub	sp, sp, #24
   131d4:	str	r0, [fp, #-24]	; 0xffffffe8
   131d8:	str	r1, [fp, #-28]	; 0xffffffe4
   131dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   131e0:	ldr	r2, [r3, #48]	; 0x30
   131e4:	movw	r3, #258	; 0x102
   131e8:	and	r3, r3, r2
   131ec:	cmp	r3, #0
   131f0:	beq	132b4 <__assert_fail@plt+0x20ec>
   131f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131f8:	add	r3, r3, #64	; 0x40
   131fc:	str	r3, [fp, #-8]
   13200:	mov	r0, #24
   13204:	bl	1caf0 <__assert_fail@plt+0xb928>
   13208:	mov	r3, r0
   1320c:	str	r3, [fp, #-12]
   13210:	ldr	r3, [fp, #-12]
   13214:	cmp	r3, #0
   13218:	bne	13224 <__assert_fail@plt+0x205c>
   1321c:	mov	r3, #0
   13220:	b	132f8 <__assert_fail@plt+0x2130>
   13224:	ldr	r3, [fp, #-8]
   13228:	ldrd	r2, [r3]
   1322c:	ldr	r1, [fp, #-12]
   13230:	strd	r2, [r1]
   13234:	ldr	r3, [fp, #-8]
   13238:	ldrd	r2, [r3, #96]	; 0x60
   1323c:	ldr	r1, [fp, #-12]
   13240:	strd	r2, [r1, #8]
   13244:	ldr	r3, [fp, #-12]
   13248:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1324c:	str	r2, [r3, #16]
   13250:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13254:	ldr	r3, [r3, #56]	; 0x38
   13258:	ldr	r1, [fp, #-12]
   1325c:	mov	r0, r3
   13260:	bl	17dc0 <__assert_fail@plt+0x6bf8>
   13264:	str	r0, [fp, #-16]
   13268:	ldr	r2, [fp, #-16]
   1326c:	ldr	r3, [fp, #-12]
   13270:	cmp	r2, r3
   13274:	beq	132f4 <__assert_fail@plt+0x212c>
   13278:	ldr	r0, [fp, #-12]
   1327c:	bl	1d918 <__assert_fail@plt+0xc750>
   13280:	ldr	r3, [fp, #-16]
   13284:	cmp	r3, #0
   13288:	bne	13294 <__assert_fail@plt+0x20cc>
   1328c:	mov	r3, #0
   13290:	b	132f8 <__assert_fail@plt+0x2130>
   13294:	ldr	r3, [fp, #-16]
   13298:	ldr	r2, [r3, #16]
   1329c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132a0:	str	r2, [r3]
   132a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132a8:	mov	r2, #2
   132ac:	strh	r2, [r3, #56]	; 0x38
   132b0:	b	132f4 <__assert_fail@plt+0x212c>
   132b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   132b8:	ldr	r2, [r3, #56]	; 0x38
   132bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132c0:	add	r3, r3, #64	; 0x40
   132c4:	mov	r1, r3
   132c8:	mov	r0, r2
   132cc:	bl	1d1b8 <__assert_fail@plt+0xbff0>
   132d0:	mov	r3, r0
   132d4:	cmp	r3, #0
   132d8:	beq	132f4 <__assert_fail@plt+0x212c>
   132dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   132e4:	str	r2, [r3]
   132e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132ec:	mov	r2, #2
   132f0:	strh	r2, [r3, #56]	; 0x38
   132f4:	mov	r3, #1
   132f8:	mov	r0, r3
   132fc:	sub	sp, fp, #4
   13300:	ldr	fp, [sp]
   13304:	add	sp, sp, #4
   13308:	pop	{pc}		; (ldr pc, [sp], #4)
   1330c:	str	fp, [sp, #-8]!
   13310:	str	lr, [sp, #4]
   13314:	add	fp, sp, #4
   13318:	sub	sp, sp, #48	; 0x30
   1331c:	str	r0, [fp, #-48]	; 0xffffffd0
   13320:	str	r1, [fp, #-52]	; 0xffffffcc
   13324:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13328:	add	r3, r3, #64	; 0x40
   1332c:	str	r3, [fp, #-8]
   13330:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13334:	ldr	r2, [r3, #48]	; 0x30
   13338:	movw	r3, #258	; 0x102
   1333c:	and	r3, r3, r2
   13340:	cmp	r3, #0
   13344:	beq	13398 <__assert_fail@plt+0x21d0>
   13348:	ldr	r3, [fp, #-8]
   1334c:	ldrd	r2, [r3]
   13350:	strd	r2, [fp, #-44]	; 0xffffffd4
   13354:	ldr	r3, [fp, #-8]
   13358:	ldrd	r2, [r3, #96]	; 0x60
   1335c:	strd	r2, [fp, #-36]	; 0xffffffdc
   13360:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13364:	ldr	r3, [r3, #56]	; 0x38
   13368:	sub	r2, fp, #44	; 0x2c
   1336c:	mov	r1, r2
   13370:	mov	r0, r3
   13374:	bl	17e30 <__assert_fail@plt+0x6c68>
   13378:	str	r0, [fp, #-12]
   1337c:	ldr	r3, [fp, #-12]
   13380:	cmp	r3, #0
   13384:	bne	1338c <__assert_fail@plt+0x21c4>
   13388:	bl	11198 <abort@plt>
   1338c:	ldr	r0, [fp, #-12]
   13390:	bl	1d918 <__assert_fail@plt+0xc750>
   13394:	b	13440 <__assert_fail@plt+0x2278>
   13398:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1339c:	ldr	r3, [r3, #4]
   133a0:	str	r3, [fp, #-16]
   133a4:	ldr	r3, [fp, #-16]
   133a8:	cmp	r3, #0
   133ac:	beq	13440 <__assert_fail@plt+0x2278>
   133b0:	ldr	r3, [fp, #-16]
   133b4:	ldr	r3, [r3, #48]	; 0x30
   133b8:	cmp	r3, #0
   133bc:	blt	13440 <__assert_fail@plt+0x2278>
   133c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   133c4:	ldr	r3, [r3, #56]	; 0x38
   133c8:	ldrd	r2, [r3, #16]
   133cc:	orrs	r3, r2, r3
   133d0:	bne	133d8 <__assert_fail@plt+0x2210>
   133d4:	bl	11198 <abort@plt>
   133d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   133dc:	ldr	r3, [r3, #56]	; 0x38
   133e0:	ldrd	r0, [r3]
   133e4:	ldr	r3, [fp, #-8]
   133e8:	ldrd	r2, [r3, #96]	; 0x60
   133ec:	cmp	r1, r3
   133f0:	cmpeq	r0, r2
   133f4:	bne	13440 <__assert_fail@plt+0x2278>
   133f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   133fc:	ldr	r3, [r3, #56]	; 0x38
   13400:	ldrd	r0, [r3, #8]
   13404:	ldr	r3, [fp, #-8]
   13408:	ldrd	r2, [r3]
   1340c:	cmp	r1, r3
   13410:	cmpeq	r0, r2
   13414:	bne	13440 <__assert_fail@plt+0x2278>
   13418:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1341c:	ldr	r1, [r3, #56]	; 0x38
   13420:	ldr	r3, [fp, #-16]
   13424:	ldrd	r2, [r3, #64]	; 0x40
   13428:	strd	r2, [r1, #8]
   1342c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13430:	ldr	r1, [r3, #56]	; 0x38
   13434:	ldr	r3, [fp, #-16]
   13438:	ldrd	r2, [r3, #160]	; 0xa0
   1343c:	strd	r2, [r1]
   13440:	nop	{0}
   13444:	sub	sp, fp, #4
   13448:	ldr	fp, [sp]
   1344c:	add	sp, sp, #4
   13450:	pop	{pc}		; (ldr pc, [sp], #4)
   13454:	str	fp, [sp, #-8]!
   13458:	str	lr, [sp, #4]
   1345c:	add	fp, sp, #4
   13460:	sub	sp, sp, #8
   13464:	str	r0, [fp, #-8]
   13468:	ldr	r3, [fp, #-8]
   1346c:	ldr	r2, [r3, #48]	; 0x30
   13470:	movw	r3, #258	; 0x102
   13474:	and	r3, r3, r2
   13478:	cmp	r3, #0
   1347c:	beq	134a4 <__assert_fail@plt+0x22dc>
   13480:	ldr	r3, [fp, #-8]
   13484:	ldr	r3, [r3, #56]	; 0x38
   13488:	cmp	r3, #0
   1348c:	beq	134b4 <__assert_fail@plt+0x22ec>
   13490:	ldr	r3, [fp, #-8]
   13494:	ldr	r3, [r3, #56]	; 0x38
   13498:	mov	r0, r3
   1349c:	bl	17308 <__assert_fail@plt+0x6140>
   134a0:	b	134b4 <__assert_fail@plt+0x22ec>
   134a4:	ldr	r3, [fp, #-8]
   134a8:	ldr	r3, [r3, #56]	; 0x38
   134ac:	mov	r0, r3
   134b0:	bl	1d918 <__assert_fail@plt+0xc750>
   134b4:	nop	{0}
   134b8:	sub	sp, fp, #4
   134bc:	ldr	fp, [sp]
   134c0:	add	sp, sp, #4
   134c4:	pop	{pc}		; (ldr pc, [sp], #4)
   134c8:	str	fp, [sp, #-8]!
   134cc:	str	lr, [sp, #4]
   134d0:	add	fp, sp, #4
   134d4:	sub	sp, sp, #16
   134d8:	str	r0, [fp, #-16]
   134dc:	b	13500 <__assert_fail@plt+0x2338>
   134e0:	ldr	r0, [fp, #-16]
   134e4:	bl	181c4 <__assert_fail@plt+0x6ffc>
   134e8:	str	r0, [fp, #-8]
   134ec:	ldr	r3, [fp, #-8]
   134f0:	cmp	r3, #0
   134f4:	blt	13500 <__assert_fail@plt+0x2338>
   134f8:	ldr	r0, [fp, #-8]
   134fc:	bl	111a4 <close@plt>
   13500:	ldr	r0, [fp, #-16]
   13504:	bl	180dc <__assert_fail@plt+0x6f14>
   13508:	mov	r3, r0
   1350c:	eor	r3, r3, #1
   13510:	uxtb	r3, r3
   13514:	cmp	r3, #0
   13518:	bne	134e0 <__assert_fail@plt+0x2318>
   1351c:	nop	{0}
   13520:	sub	sp, fp, #4
   13524:	ldr	fp, [sp]
   13528:	add	sp, sp, #4
   1352c:	pop	{pc}		; (ldr pc, [sp], #4)
   13530:	str	fp, [sp, #-8]!
   13534:	str	lr, [sp, #4]
   13538:	add	fp, sp, #4
   1353c:	sub	sp, sp, #8
   13540:	str	r0, [fp, #-8]
   13544:	mov	r3, r1
   13548:	strb	r3, [fp, #-9]
   1354c:	ldr	r3, [fp, #-8]
   13550:	ldrh	r3, [r3, #56]	; 0x38
   13554:	cmp	r3, #11
   13558:	beq	13560 <__assert_fail@plt+0x2398>
   1355c:	bl	11198 <abort@plt>
   13560:	ldrb	r3, [fp, #-9]
   13564:	cmp	r3, #0
   13568:	beq	13578 <__assert_fail@plt+0x23b0>
   1356c:	mov	r2, #2
   13570:	mov	r3, #0
   13574:	b	13580 <__assert_fail@plt+0x23b8>
   13578:	mov	r2, #1
   1357c:	mov	r3, #0
   13580:	ldr	r1, [fp, #-8]
   13584:	strd	r2, [r1, #112]	; 0x70
   13588:	nop	{0}
   1358c:	sub	sp, fp, #4
   13590:	ldr	fp, [sp]
   13594:	add	sp, sp, #4
   13598:	pop	{pc}		; (ldr pc, [sp], #4)
   1359c:	str	fp, [sp, #-8]!
   135a0:	str	lr, [sp, #4]
   135a4:	add	fp, sp, #4
   135a8:	sub	sp, sp, #24
   135ac:	str	r0, [fp, #-16]
   135b0:	str	r1, [fp, #-20]	; 0xffffffec
   135b4:	mov	r3, r2
   135b8:	strb	r3, [fp, #-21]	; 0xffffffeb
   135bc:	ldr	r3, [fp, #-16]
   135c0:	ldr	r3, [r3, #32]
   135c4:	str	r3, [fp, #-8]
   135c8:	ldr	r2, [fp, #-8]
   135cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   135d0:	cmp	r2, r3
   135d4:	bne	135e8 <__assert_fail@plt+0x2420>
   135d8:	ldr	r3, [fp, #-8]
   135dc:	cmn	r3, #100	; 0x64
   135e0:	beq	135e8 <__assert_fail@plt+0x2420>
   135e4:	bl	11198 <abort@plt>
   135e8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   135ec:	cmp	r3, #0
   135f0:	beq	13624 <__assert_fail@plt+0x245c>
   135f4:	ldr	r3, [fp, #-16]
   135f8:	add	r3, r3, #60	; 0x3c
   135fc:	ldr	r1, [fp, #-8]
   13600:	mov	r0, r3
   13604:	bl	18104 <__assert_fail@plt+0x6f3c>
   13608:	str	r0, [fp, #-12]
   1360c:	ldr	r3, [fp, #-12]
   13610:	cmp	r3, #0
   13614:	blt	1364c <__assert_fail@plt+0x2484>
   13618:	ldr	r0, [fp, #-12]
   1361c:	bl	111a4 <close@plt>
   13620:	b	1364c <__assert_fail@plt+0x2484>
   13624:	ldr	r3, [fp, #-16]
   13628:	ldr	r3, [r3, #48]	; 0x30
   1362c:	and	r3, r3, #4
   13630:	cmp	r3, #0
   13634:	bne	1364c <__assert_fail@plt+0x2484>
   13638:	ldr	r3, [fp, #-8]
   1363c:	cmp	r3, #0
   13640:	blt	1364c <__assert_fail@plt+0x2484>
   13644:	ldr	r0, [fp, #-8]
   13648:	bl	111a4 <close@plt>
   1364c:	ldr	r3, [fp, #-16]
   13650:	ldr	r2, [fp, #-20]	; 0xffffffec
   13654:	str	r2, [r3, #32]
   13658:	nop	{0}
   1365c:	sub	sp, fp, #4
   13660:	ldr	fp, [sp]
   13664:	add	sp, sp, #4
   13668:	pop	{pc}		; (ldr pc, [sp], #4)
   1366c:	str	fp, [sp, #-8]!
   13670:	str	lr, [sp, #4]
   13674:	add	fp, sp, #4
   13678:	sub	sp, sp, #16
   1367c:	str	r0, [fp, #-16]
   13680:	ldr	r3, [fp, #-16]
   13684:	ldr	r3, [r3, #48]	; 0x30
   13688:	and	r3, r3, #4
   1368c:	cmp	r3, #0
   13690:	bne	13720 <__assert_fail@plt+0x2558>
   13694:	ldr	r3, [fp, #-16]
   13698:	ldr	r3, [r3, #48]	; 0x30
   1369c:	and	r3, r3, #512	; 0x200
   136a0:	cmp	r3, #0
   136a4:	beq	136e0 <__assert_fail@plt+0x2518>
   136a8:	ldr	r3, [fp, #-16]
   136ac:	ldr	r3, [r3, #48]	; 0x30
   136b0:	and	r3, r3, #512	; 0x200
   136b4:	cmp	r3, #0
   136b8:	bne	136c8 <__assert_fail@plt+0x2500>
   136bc:	ldr	r3, [fp, #-16]
   136c0:	ldr	r3, [r3, #28]
   136c4:	b	136cc <__assert_fail@plt+0x2504>
   136c8:	mvn	r3, #99	; 0x63
   136cc:	mov	r2, #1
   136d0:	mov	r1, r3
   136d4:	ldr	r0, [fp, #-16]
   136d8:	bl	1359c <__assert_fail@plt+0x23d4>
   136dc:	b	13720 <__assert_fail@plt+0x2558>
   136e0:	ldr	r3, [fp, #-16]
   136e4:	ldr	r3, [r3, #48]	; 0x30
   136e8:	and	r3, r3, #512	; 0x200
   136ec:	cmp	r3, #0
   136f0:	bne	13700 <__assert_fail@plt+0x2538>
   136f4:	ldr	r3, [fp, #-16]
   136f8:	ldr	r3, [r3, #28]
   136fc:	b	13704 <__assert_fail@plt+0x253c>
   13700:	mvn	r3, #99	; 0x63
   13704:	mov	r0, r3
   13708:	bl	11144 <fchdir@plt>
   1370c:	mov	r3, r0
   13710:	cmp	r3, #0
   13714:	beq	13720 <__assert_fail@plt+0x2558>
   13718:	mov	r3, #1
   1371c:	b	13724 <__assert_fail@plt+0x255c>
   13720:	mov	r3, #0
   13724:	str	r3, [fp, #-8]
   13728:	ldr	r3, [fp, #-16]
   1372c:	add	r3, r3, #60	; 0x3c
   13730:	mov	r0, r3
   13734:	bl	134c8 <__assert_fail@plt+0x2300>
   13738:	ldr	r3, [fp, #-8]
   1373c:	mov	r0, r3
   13740:	sub	sp, fp, #4
   13744:	ldr	fp, [sp]
   13748:	add	sp, sp, #4
   1374c:	pop	{pc}		; (ldr pc, [sp], #4)
   13750:	str	fp, [sp, #-8]!
   13754:	str	lr, [sp, #4]
   13758:	add	fp, sp, #4
   1375c:	sub	sp, sp, #16
   13760:	str	r0, [fp, #-16]
   13764:	str	r1, [fp, #-20]	; 0xffffffec
   13768:	ldr	r3, [fp, #-16]
   1376c:	ldr	r3, [r3, #48]	; 0x30
   13770:	lsl	r3, r3, #11
   13774:	and	r3, r3, #32768	; 0x8000
   13778:	orr	r3, r3, #540672	; 0x84000
   1377c:	orr	r3, r3, #2304	; 0x900
   13780:	str	r3, [fp, #-8]
   13784:	ldr	r3, [fp, #-16]
   13788:	ldr	r3, [r3, #48]	; 0x30
   1378c:	and	r3, r3, #512	; 0x200
   13790:	cmp	r3, #0
   13794:	beq	137b8 <__assert_fail@plt+0x25f0>
   13798:	ldr	r3, [fp, #-16]
   1379c:	ldr	r3, [r3, #32]
   137a0:	ldr	r2, [fp, #-8]
   137a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   137a8:	mov	r0, r3
   137ac:	bl	18c18 <__assert_fail@plt+0x7a50>
   137b0:	mov	r3, r0
   137b4:	b	137c8 <__assert_fail@plt+0x2600>
   137b8:	ldr	r1, [fp, #-8]
   137bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   137c0:	bl	1d7d0 <__assert_fail@plt+0xc608>
   137c4:	mov	r3, r0
   137c8:	str	r3, [fp, #-12]
   137cc:	ldr	r3, [fp, #-12]
   137d0:	mov	r0, r3
   137d4:	sub	sp, fp, #4
   137d8:	ldr	fp, [sp]
   137dc:	add	sp, sp, #4
   137e0:	pop	{pc}		; (ldr pc, [sp], #4)
   137e4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   137e8:	strd	r6, [sp, #8]
   137ec:	str	r8, [sp, #16]
   137f0:	str	fp, [sp, #20]
   137f4:	str	lr, [sp, #24]
   137f8:	add	fp, sp, #24
   137fc:	sub	sp, sp, #36	; 0x24
   13800:	str	r0, [fp, #-56]	; 0xffffffc8
   13804:	mov	r7, r1
   13808:	str	r2, [fp, #-60]	; 0xffffffc4
   1380c:	mov	r3, #0
   13810:	str	r3, [fp, #-32]	; 0xffffffe0
   13814:	mov	r3, #0
   13818:	str	r3, [fp, #-36]	; 0xffffffdc
   1381c:	bic	r3, r7, #4080	; 0xff0
   13820:	bic	r3, r3, #15
   13824:	cmp	r3, #0
   13828:	beq	13844 <__assert_fail@plt+0x267c>
   1382c:	bl	1109c <__errno_location@plt>
   13830:	mov	r2, r0
   13834:	mov	r3, #22
   13838:	str	r3, [r2]
   1383c:	mov	r3, #0
   13840:	b	13c64 <__assert_fail@plt+0x2a9c>
   13844:	and	r3, r7, #4
   13848:	cmp	r3, #0
   1384c:	beq	13874 <__assert_fail@plt+0x26ac>
   13850:	and	r3, r7, #512	; 0x200
   13854:	cmp	r3, #0
   13858:	beq	13874 <__assert_fail@plt+0x26ac>
   1385c:	bl	1109c <__errno_location@plt>
   13860:	mov	r2, r0
   13864:	mov	r3, #22
   13868:	str	r3, [r2]
   1386c:	mov	r3, #0
   13870:	b	13c64 <__assert_fail@plt+0x2a9c>
   13874:	and	r3, r7, #18
   13878:	cmp	r3, #0
   1387c:	bne	13898 <__assert_fail@plt+0x26d0>
   13880:	bl	1109c <__errno_location@plt>
   13884:	mov	r2, r0
   13888:	mov	r3, #22
   1388c:	str	r3, [r2]
   13890:	mov	r3, #0
   13894:	b	13c64 <__assert_fail@plt+0x2a9c>
   13898:	mov	r1, #96	; 0x60
   1389c:	mov	r0, #1
   138a0:	bl	1ca20 <__assert_fail@plt+0xb858>
   138a4:	mov	r3, r0
   138a8:	mov	r4, r3
   138ac:	cmp	r4, #0
   138b0:	bne	138bc <__assert_fail@plt+0x26f4>
   138b4:	mov	r3, #0
   138b8:	b	13c64 <__assert_fail@plt+0x2a9c>
   138bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   138c0:	str	r3, [r4, #44]	; 0x2c
   138c4:	str	r7, [r4, #48]	; 0x30
   138c8:	ldr	r3, [r4, #48]	; 0x30
   138cc:	and	r3, r3, #2
   138d0:	cmp	r3, #0
   138d4:	beq	138f0 <__assert_fail@plt+0x2728>
   138d8:	ldr	r3, [r4, #48]	; 0x30
   138dc:	orr	r3, r3, #4
   138e0:	str	r3, [r4, #48]	; 0x30
   138e4:	ldr	r3, [r4, #48]	; 0x30
   138e8:	bic	r3, r3, #512	; 0x200
   138ec:	str	r3, [r4, #48]	; 0x30
   138f0:	mvn	r3, #99	; 0x63
   138f4:	str	r3, [r4, #32]
   138f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   138fc:	bl	160b4 <__assert_fail@plt+0x4eec>
   13900:	str	r0, [fp, #-44]	; 0xffffffd4
   13904:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13908:	cmp	r3, #4096	; 0x1000
   1390c:	movcs	r3, r3
   13910:	movcc	r3, #4096	; 0x1000
   13914:	mov	r1, r3
   13918:	mov	r0, r4
   1391c:	bl	15e88 <__assert_fail@plt+0x4cc0>
   13920:	mov	r3, r0
   13924:	eor	r3, r3, #1
   13928:	uxtb	r3, r3
   1392c:	cmp	r3, #0
   13930:	bne	13c54 <__assert_fail@plt+0x2a8c>
   13934:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13938:	ldr	r3, [r3]
   1393c:	cmp	r3, #0
   13940:	beq	13974 <__assert_fail@plt+0x27ac>
   13944:	mov	r2, #0
   13948:	movw	r1, #62148	; 0xf2c4
   1394c:	movt	r1, #1
   13950:	mov	r0, r4
   13954:	bl	15d58 <__assert_fail@plt+0x4b90>
   13958:	str	r0, [fp, #-32]	; 0xffffffe0
   1395c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13960:	cmp	r3, #0
   13964:	beq	13c40 <__assert_fail@plt+0x2a78>
   13968:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1396c:	mvn	r2, #0
   13970:	str	r2, [r3, #48]	; 0x30
   13974:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13978:	cmp	r3, #0
   1397c:	beq	13990 <__assert_fail@plt+0x27c8>
   13980:	ldr	r3, [r4, #48]	; 0x30
   13984:	and	r3, r3, #1024	; 0x400
   13988:	cmp	r3, #0
   1398c:	beq	13998 <__assert_fail@plt+0x27d0>
   13990:	mov	r3, #1
   13994:	b	1399c <__assert_fail@plt+0x27d4>
   13998:	mov	r3, #0
   1399c:	strb	r3, [fp, #-45]	; 0xffffffd3
   139a0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   139a4:	and	r3, r3, #1
   139a8:	strb	r3, [fp, #-45]	; 0xffffffd3
   139ac:	mov	r6, #0
   139b0:	mov	r8, #0
   139b4:	b	13b14 <__assert_fail@plt+0x294c>
   139b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139bc:	ldr	r3, [r3]
   139c0:	mov	r0, r3
   139c4:	bl	1106c <strlen@plt>
   139c8:	str	r0, [fp, #-40]	; 0xffffffd8
   139cc:	and	r3, r7, #2048	; 0x800
   139d0:	cmp	r3, #0
   139d4:	bne	13a44 <__assert_fail@plt+0x287c>
   139d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139dc:	ldr	r3, [r3]
   139e0:	str	r3, [fp, #-52]	; 0xffffffcc
   139e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139e8:	cmp	r3, #2
   139ec:	bls	13a44 <__assert_fail@plt+0x287c>
   139f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139f4:	sub	r3, r3, #1
   139f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   139fc:	add	r3, r2, r3
   13a00:	ldrb	r3, [r3]
   13a04:	cmp	r3, #47	; 0x2f
   13a08:	bne	13a44 <__assert_fail@plt+0x287c>
   13a0c:	b	13a1c <__assert_fail@plt+0x2854>
   13a10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a14:	sub	r3, r3, #1
   13a18:	str	r3, [fp, #-40]	; 0xffffffd8
   13a1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a20:	cmp	r3, #1
   13a24:	bls	13a44 <__assert_fail@plt+0x287c>
   13a28:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a2c:	sub	r3, r3, #2
   13a30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a34:	add	r3, r2, r3
   13a38:	ldrb	r3, [r3]
   13a3c:	cmp	r3, #47	; 0x2f
   13a40:	beq	13a10 <__assert_fail@plt+0x2848>
   13a44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a48:	ldr	r3, [r3]
   13a4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13a50:	mov	r1, r3
   13a54:	mov	r0, r4
   13a58:	bl	15d58 <__assert_fail@plt+0x4b90>
   13a5c:	mov	r5, r0
   13a60:	cmp	r5, #0
   13a64:	beq	13c18 <__assert_fail@plt+0x2a50>
   13a68:	mov	r3, #0
   13a6c:	str	r3, [r5, #48]	; 0x30
   13a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13a74:	str	r3, [r5, #4]
   13a78:	add	r3, r5, #168	; 0xa8
   13a7c:	str	r3, [r5, #24]
   13a80:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13a84:	cmp	r3, #0
   13a88:	beq	13aac <__assert_fail@plt+0x28e4>
   13a8c:	cmp	r6, #0
   13a90:	beq	13aac <__assert_fail@plt+0x28e4>
   13a94:	mov	r3, #11
   13a98:	strh	r3, [r5, #56]	; 0x38
   13a9c:	mov	r1, #1
   13aa0:	mov	r0, r5
   13aa4:	bl	13530 <__assert_fail@plt+0x2368>
   13aa8:	b	13ac4 <__assert_fail@plt+0x28fc>
   13aac:	mov	r2, #0
   13ab0:	mov	r1, r5
   13ab4:	mov	r0, r4
   13ab8:	bl	159a4 <__assert_fail@plt+0x47dc>
   13abc:	mov	r3, r0
   13ac0:	strh	r3, [r5, #56]	; 0x38
   13ac4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ac8:	cmp	r3, #0
   13acc:	beq	13adc <__assert_fail@plt+0x2914>
   13ad0:	str	r6, [r5, #8]
   13ad4:	mov	r6, r5
   13ad8:	b	13b04 <__assert_fail@plt+0x293c>
   13adc:	mov	r3, #0
   13ae0:	str	r3, [r5, #8]
   13ae4:	cmp	r6, #0
   13ae8:	bne	13af8 <__assert_fail@plt+0x2930>
   13aec:	mov	r6, r5
   13af0:	str	r6, [fp, #-36]	; 0xffffffdc
   13af4:	b	13b04 <__assert_fail@plt+0x293c>
   13af8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13afc:	str	r5, [r3, #8]
   13b00:	str	r5, [fp, #-36]	; 0xffffffdc
   13b04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b08:	add	r3, r3, #4
   13b0c:	str	r3, [fp, #-56]	; 0xffffffc8
   13b10:	add	r8, r8, #1
   13b14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b18:	ldr	r3, [r3]
   13b1c:	cmp	r3, #0
   13b20:	bne	139b8 <__assert_fail@plt+0x27f0>
   13b24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13b28:	cmp	r3, #0
   13b2c:	beq	13b4c <__assert_fail@plt+0x2984>
   13b30:	cmp	r8, #1
   13b34:	bls	13b4c <__assert_fail@plt+0x2984>
   13b38:	mov	r2, r8
   13b3c:	mov	r1, r6
   13b40:	mov	r0, r4
   13b44:	bl	15bf4 <__assert_fail@plt+0x4a2c>
   13b48:	mov	r6, r0
   13b4c:	mov	r2, #0
   13b50:	movw	r1, #62148	; 0xf2c4
   13b54:	movt	r1, #1
   13b58:	mov	r0, r4
   13b5c:	bl	15d58 <__assert_fail@plt+0x4b90>
   13b60:	mov	r3, r0
   13b64:	str	r3, [r4]
   13b68:	ldr	r3, [r4]
   13b6c:	cmp	r3, #0
   13b70:	beq	13c20 <__assert_fail@plt+0x2a58>
   13b74:	ldr	r3, [r4]
   13b78:	str	r6, [r3, #8]
   13b7c:	ldr	r3, [r4]
   13b80:	mov	r2, #9
   13b84:	strh	r2, [r3, #56]	; 0x38
   13b88:	ldr	r3, [r4]
   13b8c:	mov	r2, #1
   13b90:	str	r2, [r3, #48]	; 0x30
   13b94:	mov	r0, r4
   13b98:	bl	130f0 <__assert_fail@plt+0x1f28>
   13b9c:	mov	r3, r0
   13ba0:	eor	r3, r3, #1
   13ba4:	uxtb	r3, r3
   13ba8:	cmp	r3, #0
   13bac:	bne	13c28 <__assert_fail@plt+0x2a60>
   13bb0:	ldr	r3, [r4, #48]	; 0x30
   13bb4:	and	r3, r3, #4
   13bb8:	cmp	r3, #0
   13bbc:	bne	13c00 <__assert_fail@plt+0x2a38>
   13bc0:	ldr	r3, [r4, #48]	; 0x30
   13bc4:	and	r3, r3, #512	; 0x200
   13bc8:	cmp	r3, #0
   13bcc:	bne	13c00 <__assert_fail@plt+0x2a38>
   13bd0:	movw	r1, #62152	; 0xf2c8
   13bd4:	movt	r1, #1
   13bd8:	mov	r0, r4
   13bdc:	bl	13750 <__assert_fail@plt+0x2588>
   13be0:	mov	r3, r0
   13be4:	str	r3, [r4, #28]
   13be8:	ldr	r3, [r4, #28]
   13bec:	cmp	r3, #0
   13bf0:	bge	13c00 <__assert_fail@plt+0x2a38>
   13bf4:	ldr	r3, [r4, #48]	; 0x30
   13bf8:	orr	r3, r3, #4
   13bfc:	str	r3, [r4, #48]	; 0x30
   13c00:	add	r3, r4, #60	; 0x3c
   13c04:	mvn	r1, #0
   13c08:	mov	r0, r3
   13c0c:	bl	18054 <__assert_fail@plt+0x6e8c>
   13c10:	mov	r3, r4
   13c14:	b	13c64 <__assert_fail@plt+0x2a9c>
   13c18:	nop	{0}
   13c1c:	b	13c2c <__assert_fail@plt+0x2a64>
   13c20:	nop	{0}
   13c24:	b	13c2c <__assert_fail@plt+0x2a64>
   13c28:	nop	{0}
   13c2c:	mov	r0, r6
   13c30:	bl	15e28 <__assert_fail@plt+0x4c60>
   13c34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c38:	bl	1d918 <__assert_fail@plt+0xc750>
   13c3c:	b	13c44 <__assert_fail@plt+0x2a7c>
   13c40:	nop	{0}
   13c44:	ldr	r3, [r4, #24]
   13c48:	mov	r0, r3
   13c4c:	bl	1d918 <__assert_fail@plt+0xc750>
   13c50:	b	13c58 <__assert_fail@plt+0x2a90>
   13c54:	nop	{0}
   13c58:	mov	r0, r4
   13c5c:	bl	1d918 <__assert_fail@plt+0xc750>
   13c60:	mov	r3, #0
   13c64:	mov	r0, r3
   13c68:	sub	sp, fp, #24
   13c6c:	ldrd	r4, [sp]
   13c70:	ldrd	r6, [sp, #8]
   13c74:	ldr	r8, [sp, #16]
   13c78:	ldr	fp, [sp, #20]
   13c7c:	add	sp, sp, #24
   13c80:	pop	{pc}		; (ldr pc, [sp], #4)
   13c84:	strd	r4, [sp, #-20]!	; 0xffffffec
   13c88:	str	r6, [sp, #8]
   13c8c:	str	fp, [sp, #12]
   13c90:	str	lr, [sp, #16]
   13c94:	add	fp, sp, #16
   13c98:	sub	sp, sp, #12
   13c9c:	str	r0, [fp, #-24]	; 0xffffffe8
   13ca0:	mov	r4, r1
   13ca4:	ldr	r3, [r4, #52]	; 0x34
   13ca8:	str	r3, [r4, #40]	; 0x28
   13cac:	ldr	r6, [r4, #40]	; 0x28
   13cb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cb4:	ldr	r3, [r3, #24]
   13cb8:	add	r1, r4, #168	; 0xa8
   13cbc:	add	r2, r6, #1
   13cc0:	mov	r0, r3
   13cc4:	bl	10f1c <memmove@plt>
   13cc8:	add	r3, r4, #168	; 0xa8
   13ccc:	mov	r1, #47	; 0x2f
   13cd0:	mov	r0, r3
   13cd4:	bl	110fc <strrchr@plt>
   13cd8:	mov	r5, r0
   13cdc:	cmp	r5, #0
   13ce0:	beq	13d28 <__assert_fail@plt+0x2b60>
   13ce4:	add	r3, r4, #168	; 0xa8
   13ce8:	cmp	r5, r3
   13cec:	bne	13d00 <__assert_fail@plt+0x2b38>
   13cf0:	add	r3, r5, #1
   13cf4:	ldrb	r3, [r3]
   13cf8:	cmp	r3, #0
   13cfc:	beq	13d28 <__assert_fail@plt+0x2b60>
   13d00:	add	r5, r5, #1
   13d04:	mov	r0, r5
   13d08:	bl	1106c <strlen@plt>
   13d0c:	mov	r6, r0
   13d10:	add	r3, r4, #168	; 0xa8
   13d14:	add	r2, r6, #1
   13d18:	mov	r1, r5
   13d1c:	mov	r0, r3
   13d20:	bl	10f1c <memmove@plt>
   13d24:	str	r6, [r4, #52]	; 0x34
   13d28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d2c:	ldr	r3, [r3, #24]
   13d30:	str	r3, [r4, #28]
   13d34:	ldr	r3, [r4, #28]
   13d38:	str	r3, [r4, #24]
   13d3c:	nop	{0}
   13d40:	sub	sp, fp, #16
   13d44:	ldrd	r4, [sp]
   13d48:	ldr	r6, [sp, #8]
   13d4c:	ldr	fp, [sp, #12]
   13d50:	add	sp, sp, #16
   13d54:	pop	{pc}		; (ldr pc, [sp], #4)
   13d58:	strd	r4, [sp, #-16]!
   13d5c:	str	fp, [sp, #8]
   13d60:	str	lr, [sp, #12]
   13d64:	add	fp, sp, #12
   13d68:	sub	sp, sp, #16
   13d6c:	str	r0, [fp, #-24]	; 0xffffffe8
   13d70:	mov	r3, #0
   13d74:	str	r3, [fp, #-16]
   13d78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d7c:	ldr	r3, [r3]
   13d80:	cmp	r3, #0
   13d84:	beq	13dd0 <__assert_fail@plt+0x2c08>
   13d88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d8c:	ldr	r4, [r3]
   13d90:	b	13dbc <__assert_fail@plt+0x2bf4>
   13d94:	mov	r5, r4
   13d98:	ldr	r3, [r4, #8]
   13d9c:	cmp	r3, #0
   13da0:	beq	13dac <__assert_fail@plt+0x2be4>
   13da4:	ldr	r3, [r4, #8]
   13da8:	b	13db0 <__assert_fail@plt+0x2be8>
   13dac:	ldr	r3, [r4, #4]
   13db0:	mov	r4, r3
   13db4:	mov	r0, r5
   13db8:	bl	1d918 <__assert_fail@plt+0xc750>
   13dbc:	ldr	r3, [r4, #48]	; 0x30
   13dc0:	cmp	r3, #0
   13dc4:	bge	13d94 <__assert_fail@plt+0x2bcc>
   13dc8:	mov	r0, r4
   13dcc:	bl	1d918 <__assert_fail@plt+0xc750>
   13dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13dd4:	ldr	r3, [r3, #4]
   13dd8:	cmp	r3, #0
   13ddc:	beq	13df0 <__assert_fail@plt+0x2c28>
   13de0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13de4:	ldr	r3, [r3, #4]
   13de8:	mov	r0, r3
   13dec:	bl	15e28 <__assert_fail@plt+0x4c60>
   13df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13df4:	ldr	r3, [r3, #8]
   13df8:	mov	r0, r3
   13dfc:	bl	1d918 <__assert_fail@plt+0xc750>
   13e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e04:	ldr	r3, [r3, #24]
   13e08:	mov	r0, r3
   13e0c:	bl	1d918 <__assert_fail@plt+0xc750>
   13e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e14:	ldr	r3, [r3, #48]	; 0x30
   13e18:	and	r3, r3, #512	; 0x200
   13e1c:	cmp	r3, #0
   13e20:	beq	13e64 <__assert_fail@plt+0x2c9c>
   13e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e28:	ldr	r3, [r3, #32]
   13e2c:	cmp	r3, #0
   13e30:	blt	13edc <__assert_fail@plt+0x2d14>
   13e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e38:	ldr	r3, [r3, #32]
   13e3c:	mov	r0, r3
   13e40:	bl	111a4 <close@plt>
   13e44:	mov	r3, r0
   13e48:	cmp	r3, #0
   13e4c:	beq	13edc <__assert_fail@plt+0x2d14>
   13e50:	bl	1109c <__errno_location@plt>
   13e54:	mov	r3, r0
   13e58:	ldr	r3, [r3]
   13e5c:	str	r3, [fp, #-16]
   13e60:	b	13edc <__assert_fail@plt+0x2d14>
   13e64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e68:	ldr	r3, [r3, #48]	; 0x30
   13e6c:	and	r3, r3, #4
   13e70:	cmp	r3, #0
   13e74:	bne	13edc <__assert_fail@plt+0x2d14>
   13e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e7c:	ldr	r3, [r3, #28]
   13e80:	mov	r0, r3
   13e84:	bl	11144 <fchdir@plt>
   13e88:	mov	r3, r0
   13e8c:	cmp	r3, #0
   13e90:	beq	13ea4 <__assert_fail@plt+0x2cdc>
   13e94:	bl	1109c <__errno_location@plt>
   13e98:	mov	r3, r0
   13e9c:	ldr	r3, [r3]
   13ea0:	str	r3, [fp, #-16]
   13ea4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ea8:	ldr	r3, [r3, #28]
   13eac:	mov	r0, r3
   13eb0:	bl	111a4 <close@plt>
   13eb4:	mov	r3, r0
   13eb8:	cmp	r3, #0
   13ebc:	beq	13edc <__assert_fail@plt+0x2d14>
   13ec0:	ldr	r3, [fp, #-16]
   13ec4:	cmp	r3, #0
   13ec8:	bne	13edc <__assert_fail@plt+0x2d14>
   13ecc:	bl	1109c <__errno_location@plt>
   13ed0:	mov	r3, r0
   13ed4:	ldr	r3, [r3]
   13ed8:	str	r3, [fp, #-16]
   13edc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ee0:	add	r3, r3, #60	; 0x3c
   13ee4:	mov	r0, r3
   13ee8:	bl	134c8 <__assert_fail@plt+0x2300>
   13eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ef0:	ldr	r3, [r3, #52]	; 0x34
   13ef4:	cmp	r3, #0
   13ef8:	beq	13f0c <__assert_fail@plt+0x2d44>
   13efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f00:	ldr	r3, [r3, #52]	; 0x34
   13f04:	mov	r0, r3
   13f08:	bl	17308 <__assert_fail@plt+0x6140>
   13f0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f10:	bl	13454 <__assert_fail@plt+0x228c>
   13f14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f18:	bl	1d918 <__assert_fail@plt+0xc750>
   13f1c:	ldr	r3, [fp, #-16]
   13f20:	cmp	r3, #0
   13f24:	beq	13f40 <__assert_fail@plt+0x2d78>
   13f28:	bl	1109c <__errno_location@plt>
   13f2c:	mov	r2, r0
   13f30:	ldr	r3, [fp, #-16]
   13f34:	str	r3, [r2]
   13f38:	mvn	r3, #0
   13f3c:	b	13f44 <__assert_fail@plt+0x2d7c>
   13f40:	mov	r3, #0
   13f44:	mov	r0, r3
   13f48:	sub	sp, fp, #12
   13f4c:	ldrd	r4, [sp]
   13f50:	ldr	fp, [sp, #8]
   13f54:	add	sp, sp, #12
   13f58:	pop	{pc}		; (ldr pc, [sp], #4)
   13f5c:	str	fp, [sp, #-8]!
   13f60:	str	lr, [sp, #4]
   13f64:	add	fp, sp, #4
   13f68:	sub	sp, sp, #24
   13f6c:	str	r0, [fp, #-24]	; 0xffffffe8
   13f70:	str	r1, [fp, #-28]	; 0xffffffe4
   13f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f78:	str	r3, [fp, #-8]
   13f7c:	ldr	r3, [fp, #-8]
   13f80:	ldrd	r2, [r3]
   13f84:	strd	r2, [fp, #-20]	; 0xffffffec
   13f88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f8c:	mov	r2, r3
   13f90:	mov	r3, #0
   13f94:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13f98:	bl	1e58c <__assert_fail@plt+0xd3c4>
   13f9c:	mov	r3, r2
   13fa0:	mov	r0, r3
   13fa4:	sub	sp, fp, #4
   13fa8:	ldr	fp, [sp]
   13fac:	add	sp, sp, #4
   13fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb4:	push	{fp}		; (str fp, [sp, #-4]!)
   13fb8:	add	fp, sp, #0
   13fbc:	sub	sp, sp, #20
   13fc0:	str	r0, [fp, #-16]
   13fc4:	str	r1, [fp, #-20]	; 0xffffffec
   13fc8:	ldr	r3, [fp, #-16]
   13fcc:	str	r3, [fp, #-8]
   13fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fd4:	str	r3, [fp, #-12]
   13fd8:	ldr	r3, [fp, #-8]
   13fdc:	ldrd	r0, [r3]
   13fe0:	ldr	r3, [fp, #-12]
   13fe4:	ldrd	r2, [r3]
   13fe8:	cmp	r1, r3
   13fec:	cmpeq	r0, r2
   13ff0:	moveq	r3, #1
   13ff4:	movne	r3, #0
   13ff8:	uxtb	r3, r3
   13ffc:	mov	r0, r3
   14000:	add	sp, fp, #0
   14004:	pop	{fp}		; (ldr fp, [sp], #4)
   14008:	bx	lr
   1400c:	str	fp, [sp, #-8]!
   14010:	str	lr, [sp, #4]
   14014:	add	fp, sp, #4
   14018:	sub	sp, sp, #136	; 0x88
   1401c:	str	r0, [fp, #-128]	; 0xffffff80
   14020:	str	r1, [fp, #-132]	; 0xffffff7c
   14024:	ldr	r3, [fp, #-128]	; 0xffffff80
   14028:	ldr	r3, [r3, #44]	; 0x2c
   1402c:	str	r3, [fp, #-12]
   14030:	ldr	r3, [fp, #-12]
   14034:	ldr	r3, [r3, #52]	; 0x34
   14038:	str	r3, [fp, #-8]
   1403c:	ldr	r3, [fp, #-12]
   14040:	ldr	r3, [r3, #48]	; 0x30
   14044:	and	r3, r3, #512	; 0x200
   14048:	cmp	r3, #0
   1404c:	bne	14058 <__assert_fail@plt+0x2e90>
   14050:	mov	r3, #0
   14054:	b	1419c <__assert_fail@plt+0x2fd4>
   14058:	ldr	r3, [fp, #-8]
   1405c:	cmp	r3, #0
   14060:	bne	140a8 <__assert_fail@plt+0x2ee0>
   14064:	movw	r3, #55576	; 0xd918
   14068:	movt	r3, #1
   1406c:	str	r3, [sp]
   14070:	movw	r3, #16308	; 0x3fb4
   14074:	movt	r3, #1
   14078:	movw	r2, #16220	; 0x3f5c
   1407c:	movt	r2, #1
   14080:	mov	r1, #0
   14084:	mov	r0, #13
   14088:	bl	17014 <__assert_fail@plt+0x5e4c>
   1408c:	mov	r3, r0
   14090:	mov	r2, r3
   14094:	ldr	r3, [fp, #-12]
   14098:	str	r2, [r3, #52]	; 0x34
   1409c:	ldr	r3, [fp, #-12]
   140a0:	ldr	r3, [r3, #52]	; 0x34
   140a4:	str	r3, [fp, #-8]
   140a8:	ldr	r3, [fp, #-8]
   140ac:	cmp	r3, #0
   140b0:	beq	140ec <__assert_fail@plt+0x2f24>
   140b4:	ldr	r3, [fp, #-128]	; 0xffffff80
   140b8:	ldrd	r2, [r3, #64]	; 0x40
   140bc:	strd	r2, [fp, #-124]	; 0xffffff84
   140c0:	sub	r3, fp, #124	; 0x7c
   140c4:	mov	r1, r3
   140c8:	ldr	r0, [fp, #-8]
   140cc:	bl	16770 <__assert_fail@plt+0x55a8>
   140d0:	str	r0, [fp, #-16]
   140d4:	ldr	r3, [fp, #-16]
   140d8:	cmp	r3, #0
   140dc:	beq	140ec <__assert_fail@plt+0x2f24>
   140e0:	ldr	r3, [fp, #-16]
   140e4:	ldr	r3, [r3, #8]
   140e8:	b	1419c <__assert_fail@plt+0x2fd4>
   140ec:	ldr	r3, [fp, #-132]	; 0xffffff7c
   140f0:	cmp	r3, #0
   140f4:	blt	14114 <__assert_fail@plt+0x2f4c>
   140f8:	sub	r3, fp, #108	; 0x6c
   140fc:	mov	r1, r3
   14100:	ldr	r0, [fp, #-132]	; 0xffffff7c
   14104:	bl	10ec8 <fstatfs64@plt>
   14108:	mov	r3, r0
   1410c:	cmp	r3, #0
   14110:	beq	1411c <__assert_fail@plt+0x2f54>
   14114:	mov	r3, #0
   14118:	b	1419c <__assert_fail@plt+0x2fd4>
   1411c:	ldr	r3, [fp, #-8]
   14120:	cmp	r3, #0
   14124:	beq	14198 <__assert_fail@plt+0x2fd0>
   14128:	mov	r0, #16
   1412c:	bl	1caf0 <__assert_fail@plt+0xb928>
   14130:	mov	r3, r0
   14134:	str	r3, [fp, #-20]	; 0xffffffec
   14138:	ldr	r3, [fp, #-20]	; 0xffffffec
   1413c:	cmp	r3, #0
   14140:	beq	14198 <__assert_fail@plt+0x2fd0>
   14144:	ldr	r3, [fp, #-128]	; 0xffffff80
   14148:	ldrd	r2, [r3, #64]	; 0x40
   1414c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14150:	strd	r2, [r1]
   14154:	ldr	r2, [fp, #-108]	; 0xffffff94
   14158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1415c:	str	r2, [r3, #8]
   14160:	ldr	r1, [fp, #-20]	; 0xffffffec
   14164:	ldr	r0, [fp, #-8]
   14168:	bl	17dc0 <__assert_fail@plt+0x6bf8>
   1416c:	str	r0, [fp, #-16]
   14170:	ldr	r3, [fp, #-16]
   14174:	cmp	r3, #0
   14178:	beq	14190 <__assert_fail@plt+0x2fc8>
   1417c:	ldr	r2, [fp, #-16]
   14180:	ldr	r3, [fp, #-20]	; 0xffffffec
   14184:	cmp	r2, r3
   14188:	beq	14198 <__assert_fail@plt+0x2fd0>
   1418c:	bl	11198 <abort@plt>
   14190:	ldr	r0, [fp, #-20]	; 0xffffffec
   14194:	bl	1d918 <__assert_fail@plt+0xc750>
   14198:	ldr	r3, [fp, #-108]	; 0xffffff94
   1419c:	mov	r0, r3
   141a0:	sub	sp, fp, #4
   141a4:	ldr	fp, [sp]
   141a8:	add	sp, sp, #4
   141ac:	pop	{pc}		; (ldr pc, [sp], #4)
   141b0:	str	fp, [sp, #-8]!
   141b4:	str	lr, [sp, #4]
   141b8:	add	fp, sp, #4
   141bc:	sub	sp, sp, #8
   141c0:	str	r0, [fp, #-8]
   141c4:	str	r1, [fp, #-12]
   141c8:	ldr	r1, [fp, #-12]
   141cc:	ldr	r0, [fp, #-8]
   141d0:	bl	1400c <__assert_fail@plt+0x2e44>
   141d4:	mov	r2, r0
   141d8:	movw	r3, #26985	; 0x6969
   141dc:	cmp	r2, r3
   141e0:	beq	14204 <__assert_fail@plt+0x303c>
   141e4:	movw	r3, #6548	; 0x1994
   141e8:	movt	r3, #258	; 0x102
   141ec:	cmp	r2, r3
   141f0:	beq	14204 <__assert_fail@plt+0x303c>
   141f4:	movw	r3, #19778	; 0x4d42
   141f8:	movt	r3, #65363	; 0xff53
   141fc:	cmp	r2, r3
   14200:	bne	1420c <__assert_fail@plt+0x3044>
   14204:	mov	r3, #0
   14208:	b	14210 <__assert_fail@plt+0x3048>
   1420c:	mov	r3, #1
   14210:	mov	r0, r3
   14214:	sub	sp, fp, #4
   14218:	ldr	fp, [sp]
   1421c:	add	sp, sp, #4
   14220:	pop	{pc}		; (ldr pc, [sp], #4)
   14224:	str	fp, [sp, #-8]!
   14228:	str	lr, [sp, #4]
   1422c:	add	fp, sp, #4
   14230:	sub	sp, sp, #8
   14234:	str	r0, [fp, #-8]
   14238:	str	r1, [fp, #-12]
   1423c:	ldr	r1, [fp, #-12]
   14240:	ldr	r0, [fp, #-8]
   14244:	bl	1400c <__assert_fail@plt+0x2e44>
   14248:	mov	r3, r0
   1424c:	movw	r2, #26985	; 0x6969
   14250:	cmp	r3, r2
   14254:	beq	1429c <__assert_fail@plt+0x30d4>
   14258:	movw	r2, #26985	; 0x6969
   1425c:	cmp	r3, r2
   14260:	bgt	14280 <__assert_fail@plt+0x30b8>
   14264:	movw	r2, #19778	; 0x4d42
   14268:	movt	r2, #65363	; 0xff53
   1426c:	cmp	r3, r2
   14270:	beq	1429c <__assert_fail@plt+0x30d4>
   14274:	cmp	r3, #0
   14278:	beq	1429c <__assert_fail@plt+0x30d4>
   1427c:	b	142a4 <__assert_fail@plt+0x30dc>
   14280:	movw	r2, #40864	; 0x9fa0
   14284:	cmp	r3, r2
   14288:	beq	1429c <__assert_fail@plt+0x30d4>
   1428c:	movw	r2, #16719	; 0x414f
   14290:	movt	r2, #21318	; 0x5346
   14294:	cmp	r3, r2
   14298:	bne	142a4 <__assert_fail@plt+0x30dc>
   1429c:	mov	r3, #0
   142a0:	b	142a8 <__assert_fail@plt+0x30e0>
   142a4:	mov	r3, #1
   142a8:	mov	r0, r3
   142ac:	sub	sp, fp, #4
   142b0:	ldr	fp, [sp]
   142b4:	add	sp, sp, #4
   142b8:	pop	{pc}		; (ldr pc, [sp], #4)
   142bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   142c0:	strd	r6, [sp, #8]
   142c4:	str	fp, [sp, #16]
   142c8:	str	lr, [sp, #20]
   142cc:	add	fp, sp, #20
   142d0:	mov	r5, r0
   142d4:	ldr	r3, [r5]
   142d8:	cmp	r3, #0
   142dc:	beq	142f0 <__assert_fail@plt+0x3128>
   142e0:	ldr	r3, [r5, #48]	; 0x30
   142e4:	and	r3, r3, #8192	; 0x2000
   142e8:	cmp	r3, #0
   142ec:	beq	142f8 <__assert_fail@plt+0x3130>
   142f0:	mov	r3, #0
   142f4:	b	14a4c <__assert_fail@plt+0x3884>
   142f8:	ldr	r4, [r5]
   142fc:	ldrh	r6, [r4, #60]	; 0x3c
   14300:	mov	r3, #3
   14304:	strh	r3, [r4, #60]	; 0x3c
   14308:	cmp	r6, #1
   1430c:	bne	14330 <__assert_fail@plt+0x3168>
   14310:	mov	r2, #0
   14314:	mov	r1, r4
   14318:	mov	r0, r5
   1431c:	bl	159a4 <__assert_fail@plt+0x47dc>
   14320:	mov	r3, r0
   14324:	strh	r3, [r4, #56]	; 0x38
   14328:	mov	r3, r4
   1432c:	b	14a4c <__assert_fail@plt+0x3884>
   14330:	cmp	r6, #2
   14334:	bne	143d8 <__assert_fail@plt+0x3210>
   14338:	ldrh	r3, [r4, #56]	; 0x38
   1433c:	cmp	r3, #12
   14340:	beq	14350 <__assert_fail@plt+0x3188>
   14344:	ldrh	r3, [r4, #56]	; 0x38
   14348:	cmp	r3, #13
   1434c:	bne	143d8 <__assert_fail@plt+0x3210>
   14350:	mov	r2, #1
   14354:	mov	r1, r4
   14358:	mov	r0, r5
   1435c:	bl	159a4 <__assert_fail@plt+0x47dc>
   14360:	mov	r3, r0
   14364:	strh	r3, [r4, #56]	; 0x38
   14368:	ldrh	r3, [r4, #56]	; 0x38
   1436c:	cmp	r3, #1
   14370:	bne	14798 <__assert_fail@plt+0x35d0>
   14374:	ldr	r3, [r5, #48]	; 0x30
   14378:	and	r3, r3, #4
   1437c:	cmp	r3, #0
   14380:	bne	14798 <__assert_fail@plt+0x35d0>
   14384:	movw	r1, #62152	; 0xf2c8
   14388:	movt	r1, #1
   1438c:	mov	r0, r5
   14390:	bl	13750 <__assert_fail@plt+0x2588>
   14394:	mov	r3, r0
   14398:	str	r3, [r4, #36]	; 0x24
   1439c:	ldr	r3, [r4, #36]	; 0x24
   143a0:	cmp	r3, #0
   143a4:	bge	143c4 <__assert_fail@plt+0x31fc>
   143a8:	bl	1109c <__errno_location@plt>
   143ac:	mov	r3, r0
   143b0:	ldr	r3, [r3]
   143b4:	str	r3, [r4, #32]
   143b8:	mov	r3, #7
   143bc:	strh	r3, [r4, #56]	; 0x38
   143c0:	b	14798 <__assert_fail@plt+0x35d0>
   143c4:	ldrh	r3, [r4, #58]	; 0x3a
   143c8:	orr	r3, r3, #2
   143cc:	uxth	r3, r3
   143d0:	strh	r3, [r4, #58]	; 0x3a
   143d4:	b	14798 <__assert_fail@plt+0x35d0>
   143d8:	ldrh	r3, [r4, #56]	; 0x38
   143dc:	cmp	r3, #1
   143e0:	bne	14590 <__assert_fail@plt+0x33c8>
   143e4:	cmp	r6, #4
   143e8:	beq	14410 <__assert_fail@plt+0x3248>
   143ec:	ldr	r3, [r5, #48]	; 0x30
   143f0:	and	r3, r3, #64	; 0x40
   143f4:	cmp	r3, #0
   143f8:	beq	14468 <__assert_fail@plt+0x32a0>
   143fc:	ldrd	r0, [r4, #64]	; 0x40
   14400:	ldrd	r2, [r5, #16]
   14404:	cmp	r1, r3
   14408:	cmpeq	r0, r2
   1440c:	beq	14468 <__assert_fail@plt+0x32a0>
   14410:	ldrh	r3, [r4, #58]	; 0x3a
   14414:	and	r3, r3, #2
   14418:	cmp	r3, #0
   1441c:	beq	1442c <__assert_fail@plt+0x3264>
   14420:	ldr	r3, [r4, #36]	; 0x24
   14424:	mov	r0, r3
   14428:	bl	111a4 <close@plt>
   1442c:	ldr	r3, [r5, #4]
   14430:	cmp	r3, #0
   14434:	beq	1444c <__assert_fail@plt+0x3284>
   14438:	ldr	r3, [r5, #4]
   1443c:	mov	r0, r3
   14440:	bl	15e28 <__assert_fail@plt+0x4c60>
   14444:	mov	r3, #0
   14448:	str	r3, [r5, #4]
   1444c:	mov	r3, #6
   14450:	strh	r3, [r4, #56]	; 0x38
   14454:	mov	r1, r4
   14458:	mov	r0, r5
   1445c:	bl	1330c <__assert_fail@plt+0x2144>
   14460:	mov	r3, r4
   14464:	b	14a4c <__assert_fail@plt+0x3884>
   14468:	ldr	r3, [r5, #4]
   1446c:	cmp	r3, #0
   14470:	beq	144a4 <__assert_fail@plt+0x32dc>
   14474:	ldr	r3, [r5, #48]	; 0x30
   14478:	and	r3, r3, #4096	; 0x1000
   1447c:	cmp	r3, #0
   14480:	beq	144a4 <__assert_fail@plt+0x32dc>
   14484:	ldr	r3, [r5, #48]	; 0x30
   14488:	bic	r3, r3, #4096	; 0x1000
   1448c:	str	r3, [r5, #48]	; 0x30
   14490:	ldr	r3, [r5, #4]
   14494:	mov	r0, r3
   14498:	bl	15e28 <__assert_fail@plt+0x4c60>
   1449c:	mov	r3, #0
   144a0:	str	r3, [r5, #4]
   144a4:	ldr	r3, [r5, #4]
   144a8:	cmp	r3, #0
   144ac:	beq	14514 <__assert_fail@plt+0x334c>
   144b0:	ldr	r3, [r4, #24]
   144b4:	mvn	r2, #0
   144b8:	mov	r1, r4
   144bc:	mov	r0, r5
   144c0:	bl	16138 <__assert_fail@plt+0x4f70>
   144c4:	mov	r3, r0
   144c8:	cmp	r3, #0
   144cc:	beq	14580 <__assert_fail@plt+0x33b8>
   144d0:	bl	1109c <__errno_location@plt>
   144d4:	mov	r3, r0
   144d8:	ldr	r3, [r3]
   144dc:	str	r3, [r4, #32]
   144e0:	ldrh	r3, [r4, #58]	; 0x3a
   144e4:	orr	r3, r3, #1
   144e8:	uxth	r3, r3
   144ec:	strh	r3, [r4, #58]	; 0x3a
   144f0:	ldr	r4, [r5, #4]
   144f4:	b	14508 <__assert_fail@plt+0x3340>
   144f8:	ldr	r3, [r4, #4]
   144fc:	ldr	r3, [r3, #24]
   14500:	str	r3, [r4, #24]
   14504:	ldr	r4, [r4, #8]
   14508:	cmp	r4, #0
   1450c:	bne	144f8 <__assert_fail@plt+0x3330>
   14510:	b	14580 <__assert_fail@plt+0x33b8>
   14514:	mov	r1, #3
   14518:	mov	r0, r5
   1451c:	bl	14e50 <__assert_fail@plt+0x3c88>
   14520:	mov	r3, r0
   14524:	str	r3, [r5, #4]
   14528:	ldr	r3, [r5, #4]
   1452c:	cmp	r3, #0
   14530:	bne	14580 <__assert_fail@plt+0x33b8>
   14534:	ldr	r3, [r5, #48]	; 0x30
   14538:	and	r3, r3, #8192	; 0x2000
   1453c:	cmp	r3, #0
   14540:	beq	1454c <__assert_fail@plt+0x3384>
   14544:	mov	r3, #0
   14548:	b	14a4c <__assert_fail@plt+0x3884>
   1454c:	ldr	r3, [r4, #32]
   14550:	cmp	r3, #0
   14554:	beq	1456c <__assert_fail@plt+0x33a4>
   14558:	ldrh	r3, [r4, #56]	; 0x38
   1455c:	cmp	r3, #4
   14560:	beq	1456c <__assert_fail@plt+0x33a4>
   14564:	mov	r3, #7
   14568:	strh	r3, [r4, #56]	; 0x38
   1456c:	mov	r1, r4
   14570:	mov	r0, r5
   14574:	bl	1330c <__assert_fail@plt+0x2144>
   14578:	mov	r3, r4
   1457c:	b	14a4c <__assert_fail@plt+0x3884>
   14580:	ldr	r4, [r5, #4]
   14584:	mov	r3, #0
   14588:	str	r3, [r5, #4]
   1458c:	b	14728 <__assert_fail@plt+0x3560>
   14590:	nop	{0}
   14594:	mov	r6, r4
   14598:	ldr	r3, [r4, #8]
   1459c:	cmp	r3, #0
   145a0:	bne	1460c <__assert_fail@plt+0x3444>
   145a4:	ldr	r3, [r4, #4]
   145a8:	ldr	r3, [r3, #12]
   145ac:	cmp	r3, #0
   145b0:	beq	1460c <__assert_fail@plt+0x3444>
   145b4:	ldr	r4, [r6, #4]
   145b8:	str	r4, [r5]
   145bc:	ldr	r2, [r5, #24]
   145c0:	ldr	r3, [r4, #40]	; 0x28
   145c4:	add	r3, r2, r3
   145c8:	mov	r2, #0
   145cc:	strb	r2, [r3]
   145d0:	mov	r1, #3
   145d4:	mov	r0, r5
   145d8:	bl	14e50 <__assert_fail@plt+0x3c88>
   145dc:	mov	r4, r0
   145e0:	cmp	r4, #0
   145e4:	bne	14600 <__assert_fail@plt+0x3438>
   145e8:	ldr	r3, [r5, #48]	; 0x30
   145ec:	and	r3, r3, #8192	; 0x2000
   145f0:	cmp	r3, #0
   145f4:	beq	1484c <__assert_fail@plt+0x3684>
   145f8:	mov	r3, #0
   145fc:	b	14a4c <__assert_fail@plt+0x3884>
   14600:	mov	r0, r6
   14604:	bl	1d918 <__assert_fail@plt+0xc750>
   14608:	b	14728 <__assert_fail@plt+0x3560>
   1460c:	ldr	r4, [r4, #8]
   14610:	cmp	r4, #0
   14614:	beq	14854 <__assert_fail@plt+0x368c>
   14618:	str	r4, [r5]
   1461c:	mov	r0, r6
   14620:	bl	1d918 <__assert_fail@plt+0xc750>
   14624:	ldr	r3, [r4, #48]	; 0x30
   14628:	cmp	r3, #0
   1462c:	bne	14678 <__assert_fail@plt+0x34b0>
   14630:	mov	r0, r5
   14634:	bl	1366c <__assert_fail@plt+0x24a4>
   14638:	mov	r3, r0
   1463c:	cmp	r3, #0
   14640:	beq	14658 <__assert_fail@plt+0x3490>
   14644:	ldr	r3, [r5, #48]	; 0x30
   14648:	orr	r3, r3, #8192	; 0x2000
   1464c:	str	r3, [r5, #48]	; 0x30
   14650:	mov	r3, #0
   14654:	b	14a4c <__assert_fail@plt+0x3884>
   14658:	mov	r0, r5
   1465c:	bl	13454 <__assert_fail@plt+0x228c>
   14660:	mov	r1, r4
   14664:	mov	r0, r5
   14668:	bl	13c84 <__assert_fail@plt+0x2abc>
   1466c:	mov	r0, r5
   14670:	bl	130f0 <__assert_fail@plt+0x1f28>
   14674:	b	1479c <__assert_fail@plt+0x35d4>
   14678:	ldrh	r3, [r4, #60]	; 0x3c
   1467c:	cmp	r3, #4
   14680:	bne	14688 <__assert_fail@plt+0x34c0>
   14684:	b	14594 <__assert_fail@plt+0x33cc>
   14688:	ldrh	r3, [r4, #60]	; 0x3c
   1468c:	cmp	r3, #2
   14690:	bne	14724 <__assert_fail@plt+0x355c>
   14694:	mov	r2, #1
   14698:	mov	r1, r4
   1469c:	mov	r0, r5
   146a0:	bl	159a4 <__assert_fail@plt+0x47dc>
   146a4:	mov	r3, r0
   146a8:	strh	r3, [r4, #56]	; 0x38
   146ac:	ldrh	r3, [r4, #56]	; 0x38
   146b0:	cmp	r3, #1
   146b4:	bne	14718 <__assert_fail@plt+0x3550>
   146b8:	ldr	r3, [r5, #48]	; 0x30
   146bc:	and	r3, r3, #4
   146c0:	cmp	r3, #0
   146c4:	bne	14718 <__assert_fail@plt+0x3550>
   146c8:	movw	r1, #62152	; 0xf2c8
   146cc:	movt	r1, #1
   146d0:	mov	r0, r5
   146d4:	bl	13750 <__assert_fail@plt+0x2588>
   146d8:	mov	r3, r0
   146dc:	str	r3, [r4, #36]	; 0x24
   146e0:	ldr	r3, [r4, #36]	; 0x24
   146e4:	cmp	r3, #0
   146e8:	bge	14708 <__assert_fail@plt+0x3540>
   146ec:	bl	1109c <__errno_location@plt>
   146f0:	mov	r3, r0
   146f4:	ldr	r3, [r3]
   146f8:	str	r3, [r4, #32]
   146fc:	mov	r3, #7
   14700:	strh	r3, [r4, #56]	; 0x38
   14704:	b	14718 <__assert_fail@plt+0x3550>
   14708:	ldrh	r3, [r4, #58]	; 0x3a
   1470c:	orr	r3, r3, #2
   14710:	uxth	r3, r3
   14714:	strh	r3, [r4, #58]	; 0x3a
   14718:	mov	r3, #3
   1471c:	strh	r3, [r4, #60]	; 0x3c
   14720:	b	14728 <__assert_fail@plt+0x3560>
   14724:	nop	{0}
   14728:	ldr	r2, [r5, #24]
   1472c:	ldr	r3, [r4, #4]
   14730:	ldr	r1, [r3, #28]
   14734:	ldr	r3, [r4, #4]
   14738:	ldr	r3, [r3, #40]	; 0x28
   1473c:	sub	r3, r3, #1
   14740:	add	r3, r1, r3
   14744:	ldrb	r3, [r3]
   14748:	cmp	r3, #47	; 0x2f
   1474c:	bne	14760 <__assert_fail@plt+0x3598>
   14750:	ldr	r3, [r4, #4]
   14754:	ldr	r3, [r3, #40]	; 0x28
   14758:	sub	r3, r3, #1
   1475c:	b	14768 <__assert_fail@plt+0x35a0>
   14760:	ldr	r3, [r4, #4]
   14764:	ldr	r3, [r3, #40]	; 0x28
   14768:	add	r6, r2, r3
   1476c:	mov	r3, r6
   14770:	add	r6, r3, #1
   14774:	mov	r2, #47	; 0x2f
   14778:	strb	r2, [r3]
   1477c:	add	r1, r4, #168	; 0xa8
   14780:	ldr	r3, [r4, #52]	; 0x34
   14784:	add	r3, r3, #1
   14788:	mov	r2, r3
   1478c:	mov	r0, r6
   14790:	bl	10f1c <memmove@plt>
   14794:	b	1479c <__assert_fail@plt+0x35d4>
   14798:	nop	{0}
   1479c:	str	r4, [r5]
   147a0:	ldrh	r3, [r4, #56]	; 0x38
   147a4:	cmp	r3, #11
   147a8:	bne	147ec <__assert_fail@plt+0x3624>
   147ac:	ldrd	r2, [r4, #112]	; 0x70
   147b0:	cmp	r3, #0
   147b4:	cmpeq	r2, #2
   147b8:	bne	147d8 <__assert_fail@plt+0x3610>
   147bc:	mov	r2, #0
   147c0:	mov	r1, r4
   147c4:	mov	r0, r5
   147c8:	bl	159a4 <__assert_fail@plt+0x47dc>
   147cc:	mov	r3, r0
   147d0:	strh	r3, [r4, #56]	; 0x38
   147d4:	b	147ec <__assert_fail@plt+0x3624>
   147d8:	ldrd	r2, [r4, #112]	; 0x70
   147dc:	cmp	r3, #0
   147e0:	cmpeq	r2, #1
   147e4:	beq	147ec <__assert_fail@plt+0x3624>
   147e8:	bl	11198 <abort@plt>
   147ec:	ldrh	r3, [r4, #56]	; 0x38
   147f0:	cmp	r3, #1
   147f4:	bne	14844 <__assert_fail@plt+0x367c>
   147f8:	ldr	r3, [r4, #48]	; 0x30
   147fc:	cmp	r3, #0
   14800:	bne	1480c <__assert_fail@plt+0x3644>
   14804:	ldrd	r2, [r4, #64]	; 0x40
   14808:	strd	r2, [r5, #16]
   1480c:	mov	r1, r4
   14810:	mov	r0, r5
   14814:	bl	131c4 <__assert_fail@plt+0x1ffc>
   14818:	mov	r3, r0
   1481c:	eor	r3, r3, #1
   14820:	uxtb	r3, r3
   14824:	cmp	r3, #0
   14828:	beq	14844 <__assert_fail@plt+0x367c>
   1482c:	bl	1109c <__errno_location@plt>
   14830:	mov	r2, r0
   14834:	mov	r3, #12
   14838:	str	r3, [r2]
   1483c:	mov	r3, #0
   14840:	b	14a4c <__assert_fail@plt+0x3884>
   14844:	mov	r3, r4
   14848:	b	14a4c <__assert_fail@plt+0x3884>
   1484c:	nop	{0}
   14850:	b	14858 <__assert_fail@plt+0x3690>
   14854:	nop	{0}
   14858:	ldr	r4, [r6, #4]
   1485c:	str	r4, [r5]
   14860:	mov	r0, r6
   14864:	bl	1d918 <__assert_fail@plt+0xc750>
   14868:	ldr	r3, [r4, #48]	; 0x30
   1486c:	cmn	r3, #1
   14870:	bne	1489c <__assert_fail@plt+0x36d4>
   14874:	mov	r0, r4
   14878:	bl	1d918 <__assert_fail@plt+0xc750>
   1487c:	bl	1109c <__errno_location@plt>
   14880:	mov	r2, r0
   14884:	mov	r3, #0
   14888:	str	r3, [r2]
   1488c:	mov	r3, #0
   14890:	str	r3, [r5]
   14894:	mov	r3, #0
   14898:	b	14a4c <__assert_fail@plt+0x3884>
   1489c:	ldrh	r3, [r4, #56]	; 0x38
   148a0:	cmp	r3, #11
   148a4:	bne	148ac <__assert_fail@plt+0x36e4>
   148a8:	bl	11198 <abort@plt>
   148ac:	ldr	r2, [r5, #24]
   148b0:	ldr	r3, [r4, #40]	; 0x28
   148b4:	add	r3, r2, r3
   148b8:	mov	r2, #0
   148bc:	strb	r2, [r3]
   148c0:	ldr	r3, [r4, #48]	; 0x30
   148c4:	cmp	r3, #0
   148c8:	bne	14900 <__assert_fail@plt+0x3738>
   148cc:	mov	r0, r5
   148d0:	bl	1366c <__assert_fail@plt+0x24a4>
   148d4:	mov	r3, r0
   148d8:	cmp	r3, #0
   148dc:	beq	149f0 <__assert_fail@plt+0x3828>
   148e0:	bl	1109c <__errno_location@plt>
   148e4:	mov	r3, r0
   148e8:	ldr	r3, [r3]
   148ec:	str	r3, [r4, #32]
   148f0:	ldr	r3, [r5, #48]	; 0x30
   148f4:	orr	r3, r3, #8192	; 0x2000
   148f8:	str	r3, [r5, #48]	; 0x30
   148fc:	b	149f0 <__assert_fail@plt+0x3828>
   14900:	ldrh	r3, [r4, #58]	; 0x3a
   14904:	and	r3, r3, #2
   14908:	cmp	r3, #0
   1490c:	beq	149a0 <__assert_fail@plt+0x37d8>
   14910:	ldr	r3, [r5, #48]	; 0x30
   14914:	and	r3, r3, #4
   14918:	cmp	r3, #0
   1491c:	bne	14990 <__assert_fail@plt+0x37c8>
   14920:	ldr	r3, [r5, #48]	; 0x30
   14924:	and	r3, r3, #512	; 0x200
   14928:	cmp	r3, #0
   1492c:	beq	1494c <__assert_fail@plt+0x3784>
   14930:	ldr	r3, [r4, #36]	; 0x24
   14934:	mov	r2, #1
   14938:	mov	r1, r3
   1493c:	mov	r0, r5
   14940:	bl	1359c <__assert_fail@plt+0x23d4>
   14944:	mov	r3, #0
   14948:	b	1496c <__assert_fail@plt+0x37a4>
   1494c:	ldr	r3, [r4, #36]	; 0x24
   14950:	mov	r0, r3
   14954:	bl	11144 <fchdir@plt>
   14958:	mov	r3, r0
   1495c:	cmp	r3, #0
   14960:	movne	r3, #1
   14964:	moveq	r3, #0
   14968:	uxtb	r3, r3
   1496c:	cmp	r3, #0
   14970:	beq	14990 <__assert_fail@plt+0x37c8>
   14974:	bl	1109c <__errno_location@plt>
   14978:	mov	r3, r0
   1497c:	ldr	r3, [r3]
   14980:	str	r3, [r4, #32]
   14984:	ldr	r3, [r5, #48]	; 0x30
   14988:	orr	r3, r3, #8192	; 0x2000
   1498c:	str	r3, [r5, #48]	; 0x30
   14990:	ldr	r3, [r4, #36]	; 0x24
   14994:	mov	r0, r3
   14998:	bl	111a4 <close@plt>
   1499c:	b	149f0 <__assert_fail@plt+0x3828>
   149a0:	ldrh	r3, [r4, #58]	; 0x3a
   149a4:	and	r3, r3, #1
   149a8:	cmp	r3, #0
   149ac:	bne	149f0 <__assert_fail@plt+0x3828>
   149b0:	ldr	r1, [r4, #4]
   149b4:	movw	r3, #62156	; 0xf2cc
   149b8:	movt	r3, #1
   149bc:	mvn	r2, #0
   149c0:	mov	r0, r5
   149c4:	bl	16138 <__assert_fail@plt+0x4f70>
   149c8:	mov	r3, r0
   149cc:	cmp	r3, #0
   149d0:	beq	149f0 <__assert_fail@plt+0x3828>
   149d4:	bl	1109c <__errno_location@plt>
   149d8:	mov	r3, r0
   149dc:	ldr	r3, [r3]
   149e0:	str	r3, [r4, #32]
   149e4:	ldr	r3, [r5, #48]	; 0x30
   149e8:	orr	r3, r3, #8192	; 0x2000
   149ec:	str	r3, [r5, #48]	; 0x30
   149f0:	ldrh	r3, [r4, #56]	; 0x38
   149f4:	cmp	r3, #2
   149f8:	beq	14a30 <__assert_fail@plt+0x3868>
   149fc:	ldr	r3, [r4, #32]
   14a00:	cmp	r3, #0
   14a04:	beq	14a10 <__assert_fail@plt+0x3848>
   14a08:	mov	r3, #7
   14a0c:	b	14a14 <__assert_fail@plt+0x384c>
   14a10:	mov	r3, #6
   14a14:	strh	r3, [r4, #56]	; 0x38
   14a18:	ldr	r3, [r4, #32]
   14a1c:	cmp	r3, #0
   14a20:	bne	14a30 <__assert_fail@plt+0x3868>
   14a24:	mov	r1, r4
   14a28:	mov	r0, r5
   14a2c:	bl	1330c <__assert_fail@plt+0x2144>
   14a30:	ldr	r3, [r5, #48]	; 0x30
   14a34:	and	r3, r3, #8192	; 0x2000
   14a38:	cmp	r3, #0
   14a3c:	bne	14a48 <__assert_fail@plt+0x3880>
   14a40:	mov	r3, r4
   14a44:	b	14a4c <__assert_fail@plt+0x3884>
   14a48:	mov	r3, #0
   14a4c:	mov	r0, r3
   14a50:	sub	sp, fp, #20
   14a54:	ldrd	r4, [sp]
   14a58:	ldrd	r6, [sp, #8]
   14a5c:	ldr	fp, [sp, #16]
   14a60:	add	sp, sp, #20
   14a64:	pop	{pc}		; (ldr pc, [sp], #4)
   14a68:	str	fp, [sp, #-8]!
   14a6c:	str	lr, [sp, #4]
   14a70:	add	fp, sp, #4
   14a74:	sub	sp, sp, #16
   14a78:	str	r0, [fp, #-8]
   14a7c:	str	r1, [fp, #-12]
   14a80:	str	r2, [fp, #-16]
   14a84:	ldr	r3, [fp, #-16]
   14a88:	cmp	r3, #0
   14a8c:	beq	14ad8 <__assert_fail@plt+0x3910>
   14a90:	ldr	r3, [fp, #-16]
   14a94:	cmp	r3, #1
   14a98:	beq	14ad8 <__assert_fail@plt+0x3910>
   14a9c:	ldr	r3, [fp, #-16]
   14aa0:	cmp	r3, #2
   14aa4:	beq	14ad8 <__assert_fail@plt+0x3910>
   14aa8:	ldr	r3, [fp, #-16]
   14aac:	cmp	r3, #3
   14ab0:	beq	14ad8 <__assert_fail@plt+0x3910>
   14ab4:	ldr	r3, [fp, #-16]
   14ab8:	cmp	r3, #4
   14abc:	beq	14ad8 <__assert_fail@plt+0x3910>
   14ac0:	bl	1109c <__errno_location@plt>
   14ac4:	mov	r2, r0
   14ac8:	mov	r3, #22
   14acc:	str	r3, [r2]
   14ad0:	mov	r3, #1
   14ad4:	b	14aec <__assert_fail@plt+0x3924>
   14ad8:	ldr	r3, [fp, #-16]
   14adc:	uxth	r2, r3
   14ae0:	ldr	r3, [fp, #-12]
   14ae4:	strh	r2, [r3, #60]	; 0x3c
   14ae8:	mov	r3, #0
   14aec:	mov	r0, r3
   14af0:	sub	sp, fp, #4
   14af4:	ldr	fp, [sp]
   14af8:	add	sp, sp, #4
   14afc:	pop	{pc}		; (ldr pc, [sp], #4)
   14b00:	strd	r4, [sp, #-16]!
   14b04:	str	fp, [sp, #8]
   14b08:	str	lr, [sp, #12]
   14b0c:	add	fp, sp, #12
   14b10:	sub	sp, sp, #16
   14b14:	mov	r4, r0
   14b18:	str	r1, [fp, #-24]	; 0xffffffe8
   14b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b20:	cmp	r3, #0
   14b24:	beq	14b4c <__assert_fail@plt+0x3984>
   14b28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b2c:	cmp	r3, #4096	; 0x1000
   14b30:	beq	14b4c <__assert_fail@plt+0x3984>
   14b34:	bl	1109c <__errno_location@plt>
   14b38:	mov	r2, r0
   14b3c:	mov	r3, #22
   14b40:	str	r3, [r2]
   14b44:	mov	r3, #0
   14b48:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14b4c:	ldr	r5, [r4]
   14b50:	bl	1109c <__errno_location@plt>
   14b54:	mov	r2, r0
   14b58:	mov	r3, #0
   14b5c:	str	r3, [r2]
   14b60:	ldr	r3, [r4, #48]	; 0x30
   14b64:	and	r3, r3, #8192	; 0x2000
   14b68:	cmp	r3, #0
   14b6c:	beq	14b78 <__assert_fail@plt+0x39b0>
   14b70:	mov	r3, #0
   14b74:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14b78:	ldrh	r3, [r5, #56]	; 0x38
   14b7c:	cmp	r3, #9
   14b80:	bne	14b8c <__assert_fail@plt+0x39c4>
   14b84:	ldr	r3, [r5, #8]
   14b88:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14b8c:	ldrh	r3, [r5, #56]	; 0x38
   14b90:	cmp	r3, #1
   14b94:	beq	14ba0 <__assert_fail@plt+0x39d8>
   14b98:	mov	r3, #0
   14b9c:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14ba0:	ldr	r3, [r4, #4]
   14ba4:	cmp	r3, #0
   14ba8:	beq	14bb8 <__assert_fail@plt+0x39f0>
   14bac:	ldr	r3, [r4, #4]
   14bb0:	mov	r0, r3
   14bb4:	bl	15e28 <__assert_fail@plt+0x4c60>
   14bb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bbc:	cmp	r3, #4096	; 0x1000
   14bc0:	bne	14bdc <__assert_fail@plt+0x3a14>
   14bc4:	ldr	r3, [r4, #48]	; 0x30
   14bc8:	orr	r3, r3, #4096	; 0x1000
   14bcc:	str	r3, [r4, #48]	; 0x30
   14bd0:	mov	r3, #2
   14bd4:	str	r3, [fp, #-24]	; 0xffffffe8
   14bd8:	b	14be4 <__assert_fail@plt+0x3a1c>
   14bdc:	mov	r3, #1
   14be0:	str	r3, [fp, #-24]	; 0xffffffe8
   14be4:	ldr	r3, [r5, #48]	; 0x30
   14be8:	cmp	r3, #0
   14bec:	bne	14c10 <__assert_fail@plt+0x3a48>
   14bf0:	ldr	r3, [r5, #24]
   14bf4:	ldrb	r3, [r3]
   14bf8:	cmp	r3, #47	; 0x2f
   14bfc:	beq	14c10 <__assert_fail@plt+0x3a48>
   14c00:	ldr	r3, [r4, #48]	; 0x30
   14c04:	and	r3, r3, #4
   14c08:	cmp	r3, #0
   14c0c:	beq	14c2c <__assert_fail@plt+0x3a64>
   14c10:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14c14:	mov	r0, r4
   14c18:	bl	14e50 <__assert_fail@plt+0x3c88>
   14c1c:	mov	r3, r0
   14c20:	str	r3, [r4, #4]
   14c24:	ldr	r3, [r4, #4]
   14c28:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14c2c:	movw	r1, #62152	; 0xf2c8
   14c30:	movt	r1, #1
   14c34:	mov	r0, r4
   14c38:	bl	13750 <__assert_fail@plt+0x2588>
   14c3c:	str	r0, [fp, #-16]
   14c40:	ldr	r3, [fp, #-16]
   14c44:	cmp	r3, #0
   14c48:	bge	14c5c <__assert_fail@plt+0x3a94>
   14c4c:	mov	r3, #0
   14c50:	str	r3, [r4, #4]
   14c54:	mov	r3, #0
   14c58:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14c5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14c60:	mov	r0, r4
   14c64:	bl	14e50 <__assert_fail@plt+0x3c88>
   14c68:	mov	r3, r0
   14c6c:	str	r3, [r4, #4]
   14c70:	ldr	r3, [r4, #48]	; 0x30
   14c74:	and	r3, r3, #512	; 0x200
   14c78:	cmp	r3, #0
   14c7c:	beq	14c94 <__assert_fail@plt+0x3acc>
   14c80:	mov	r2, #1
   14c84:	ldr	r1, [fp, #-16]
   14c88:	mov	r0, r4
   14c8c:	bl	1359c <__assert_fail@plt+0x23d4>
   14c90:	b	14ce0 <__assert_fail@plt+0x3b18>
   14c94:	ldr	r0, [fp, #-16]
   14c98:	bl	11144 <fchdir@plt>
   14c9c:	mov	r3, r0
   14ca0:	cmp	r3, #0
   14ca4:	beq	14cd8 <__assert_fail@plt+0x3b10>
   14ca8:	bl	1109c <__errno_location@plt>
   14cac:	mov	r3, r0
   14cb0:	ldr	r3, [r3]
   14cb4:	str	r3, [fp, #-20]	; 0xffffffec
   14cb8:	ldr	r0, [fp, #-16]
   14cbc:	bl	111a4 <close@plt>
   14cc0:	bl	1109c <__errno_location@plt>
   14cc4:	mov	r2, r0
   14cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ccc:	str	r3, [r2]
   14cd0:	mov	r3, #0
   14cd4:	b	14ce4 <__assert_fail@plt+0x3b1c>
   14cd8:	ldr	r0, [fp, #-16]
   14cdc:	bl	111a4 <close@plt>
   14ce0:	ldr	r3, [r4, #4]
   14ce4:	mov	r0, r3
   14ce8:	sub	sp, fp, #12
   14cec:	ldrd	r4, [sp]
   14cf0:	ldr	fp, [sp, #8]
   14cf4:	add	sp, sp, #12
   14cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cfc:	push	{fp}		; (str fp, [sp, #-4]!)
   14d00:	add	fp, sp, #0
   14d04:	sub	sp, sp, #12
   14d08:	str	r0, [fp, #-8]
   14d0c:	str	r1, [fp, #-12]
   14d10:	ldr	r3, [fp, #-8]
   14d14:	ldr	r3, [r3]
   14d18:	ldrd	r0, [r3, #160]	; 0xa0
   14d1c:	ldr	r3, [fp, #-12]
   14d20:	ldr	r3, [r3]
   14d24:	ldrd	r2, [r3, #160]	; 0xa0
   14d28:	cmp	r1, r3
   14d2c:	cmpeq	r0, r2
   14d30:	movhi	r3, #1
   14d34:	movls	r3, #0
   14d38:	uxtb	r3, r3
   14d3c:	mov	ip, r3
   14d40:	ldr	r3, [fp, #-8]
   14d44:	ldr	r3, [r3]
   14d48:	ldrd	r0, [r3, #160]	; 0xa0
   14d4c:	ldr	r3, [fp, #-12]
   14d50:	ldr	r3, [r3]
   14d54:	ldrd	r2, [r3, #160]	; 0xa0
   14d58:	cmp	r1, r3
   14d5c:	cmpeq	r0, r2
   14d60:	movcc	r3, #1
   14d64:	movcs	r3, #0
   14d68:	uxtb	r3, r3
   14d6c:	sub	r3, ip, r3
   14d70:	mov	r0, r3
   14d74:	add	sp, fp, #0
   14d78:	pop	{fp}		; (ldr fp, [sp], #4)
   14d7c:	bx	lr
   14d80:	push	{fp}		; (str fp, [sp, #-4]!)
   14d84:	add	fp, sp, #0
   14d88:	sub	sp, sp, #20
   14d8c:	str	r0, [fp, #-16]
   14d90:	str	r1, [fp, #-20]	; 0xffffffec
   14d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d98:	sub	r3, r3, #1
   14d9c:	cmp	r3, #11
   14da0:	ldrls	pc, [pc, r3, lsl #2]
   14da4:	b	14e2c <__assert_fail@plt+0x3c64>
   14da8:	strdeq	r4, [r1], -ip
   14dac:	andeq	r4, r1, r4, ror #27
   14db0:	andeq	r4, r1, ip, lsr #28
   14db4:	strdeq	r4, [r1], -r0
   14db8:	andeq	r4, r1, ip, lsr #28
   14dbc:	ldrdeq	r4, [r1], -r8
   14dc0:	andeq	r4, r1, ip, lsr #28
   14dc4:	andeq	r4, r1, r4, lsl lr
   14dc8:	andeq	r4, r1, ip, lsr #28
   14dcc:	andeq	r4, r1, r8, lsl #28
   14dd0:	andeq	r4, r1, ip, lsr #28
   14dd4:	andeq	r4, r1, r0, lsr #28
   14dd8:	mov	r3, #24576	; 0x6000
   14ddc:	str	r3, [fp, #-8]
   14de0:	b	14e34 <__assert_fail@plt+0x3c6c>
   14de4:	mov	r3, #8192	; 0x2000
   14de8:	str	r3, [fp, #-8]
   14dec:	b	14e34 <__assert_fail@plt+0x3c6c>
   14df0:	mov	r3, #16384	; 0x4000
   14df4:	str	r3, [fp, #-8]
   14df8:	b	14e34 <__assert_fail@plt+0x3c6c>
   14dfc:	mov	r3, #4096	; 0x1000
   14e00:	str	r3, [fp, #-8]
   14e04:	b	14e34 <__assert_fail@plt+0x3c6c>
   14e08:	mov	r3, #40960	; 0xa000
   14e0c:	str	r3, [fp, #-8]
   14e10:	b	14e34 <__assert_fail@plt+0x3c6c>
   14e14:	mov	r3, #32768	; 0x8000
   14e18:	str	r3, [fp, #-8]
   14e1c:	b	14e34 <__assert_fail@plt+0x3c6c>
   14e20:	mov	r3, #49152	; 0xc000
   14e24:	str	r3, [fp, #-8]
   14e28:	b	14e34 <__assert_fail@plt+0x3c6c>
   14e2c:	mov	r3, #0
   14e30:	str	r3, [fp, #-8]
   14e34:	ldr	r3, [fp, #-16]
   14e38:	ldr	r2, [fp, #-8]
   14e3c:	str	r2, [r3, #16]
   14e40:	nop	{0}
   14e44:	add	sp, fp, #0
   14e48:	pop	{fp}		; (ldr fp, [sp], #4)
   14e4c:	bx	lr
   14e50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e54:	strd	r6, [sp, #8]
   14e58:	str	fp, [sp, #16]
   14e5c:	str	lr, [sp, #20]
   14e60:	add	fp, sp, #20
   14e64:	sub	sp, sp, #80	; 0x50
   14e68:	mov	r4, r0
   14e6c:	str	r1, [fp, #-96]	; 0xffffffa0
   14e70:	ldr	r3, [r4]
   14e74:	str	r3, [fp, #-44]	; 0xffffffd4
   14e78:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e7c:	ldr	r3, [r3, #12]
   14e80:	cmp	r3, #0
   14e84:	movne	r3, #1
   14e88:	moveq	r3, #0
   14e8c:	strb	r3, [fp, #-45]	; 0xffffffd3
   14e90:	mov	r3, #0
   14e94:	strb	r3, [fp, #-37]	; 0xffffffdb
   14e98:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   14e9c:	cmp	r3, #0
   14ea0:	beq	14f1c <__assert_fail@plt+0x3d54>
   14ea4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ea8:	ldr	r3, [r3, #12]
   14eac:	str	r3, [fp, #-52]	; 0xffffffcc
   14eb0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14eb4:	bl	11138 <dirfd@plt>
   14eb8:	mov	r3, r0
   14ebc:	str	r3, [fp, #-92]	; 0xffffffa4
   14ec0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ec4:	cmp	r3, #0
   14ec8:	bge	15080 <__assert_fail@plt+0x3eb8>
   14ecc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ed0:	ldr	r3, [r3, #12]
   14ed4:	mov	r0, r3
   14ed8:	bl	111bc <closedir@plt>
   14edc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ee0:	mov	r2, #0
   14ee4:	str	r2, [r3, #12]
   14ee8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14eec:	cmp	r3, #3
   14ef0:	bne	14f14 <__assert_fail@plt+0x3d4c>
   14ef4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ef8:	mov	r2, #4
   14efc:	strh	r2, [r3, #56]	; 0x38
   14f00:	bl	1109c <__errno_location@plt>
   14f04:	mov	r3, r0
   14f08:	ldr	r2, [r3]
   14f0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f10:	str	r2, [r3, #32]
   14f14:	mov	r3, #0
   14f18:	b	15988 <__assert_fail@plt+0x47c0>
   14f1c:	ldr	r3, [r4, #48]	; 0x30
   14f20:	and	r3, r3, #4
   14f24:	cmp	r3, #0
   14f28:	bne	14f44 <__assert_fail@plt+0x3d7c>
   14f2c:	ldr	r3, [r4, #48]	; 0x30
   14f30:	and	r3, r3, #512	; 0x200
   14f34:	cmp	r3, #0
   14f38:	beq	14f44 <__assert_fail@plt+0x3d7c>
   14f3c:	ldr	r0, [r4, #32]
   14f40:	b	14f48 <__assert_fail@plt+0x3d80>
   14f44:	mvn	r0, #99	; 0x63
   14f48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f4c:	ldr	r1, [r3, #24]
   14f50:	ldr	r3, [r4, #48]	; 0x30
   14f54:	and	r3, r3, #16
   14f58:	cmp	r3, #0
   14f5c:	beq	14f88 <__assert_fail@plt+0x3dc0>
   14f60:	ldr	r3, [r4, #48]	; 0x30
   14f64:	and	r3, r3, #1
   14f68:	cmp	r3, #0
   14f6c:	beq	14f80 <__assert_fail@plt+0x3db8>
   14f70:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f74:	ldr	r3, [r3, #48]	; 0x30
   14f78:	cmp	r3, #0
   14f7c:	beq	14f88 <__assert_fail@plt+0x3dc0>
   14f80:	mov	r2, #32768	; 0x8000
   14f84:	b	14f8c <__assert_fail@plt+0x3dc4>
   14f88:	mov	r2, #0
   14f8c:	sub	r3, fp, #92	; 0x5c
   14f90:	bl	18ca8 <__assert_fail@plt+0x7ae0>
   14f94:	mov	r3, r0
   14f98:	mov	r2, r3
   14f9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fa0:	str	r2, [r3, #12]
   14fa4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fa8:	ldr	r3, [r3, #12]
   14fac:	cmp	r3, #0
   14fb0:	bne	14fe8 <__assert_fail@plt+0x3e20>
   14fb4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14fb8:	cmp	r3, #3
   14fbc:	bne	14fe0 <__assert_fail@plt+0x3e18>
   14fc0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fc4:	mov	r2, #4
   14fc8:	strh	r2, [r3, #56]	; 0x38
   14fcc:	bl	1109c <__errno_location@plt>
   14fd0:	mov	r3, r0
   14fd4:	ldr	r2, [r3]
   14fd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fdc:	str	r2, [r3, #32]
   14fe0:	mov	r3, #0
   14fe4:	b	15988 <__assert_fail@plt+0x47c0>
   14fe8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fec:	ldrh	r3, [r3, #56]	; 0x38
   14ff0:	cmp	r3, #11
   14ff4:	bne	1501c <__assert_fail@plt+0x3e54>
   14ff8:	mov	r2, #0
   14ffc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15000:	mov	r0, r4
   15004:	bl	159a4 <__assert_fail@plt+0x47dc>
   15008:	mov	r3, r0
   1500c:	mov	r2, r3
   15010:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15014:	strh	r2, [r3, #56]	; 0x38
   15018:	b	15080 <__assert_fail@plt+0x3eb8>
   1501c:	ldr	r3, [r4, #48]	; 0x30
   15020:	and	r3, r3, #256	; 0x100
   15024:	cmp	r3, #0
   15028:	beq	15080 <__assert_fail@plt+0x3eb8>
   1502c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15030:	mov	r0, r4
   15034:	bl	1330c <__assert_fail@plt+0x2144>
   15038:	mov	r2, #0
   1503c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15040:	mov	r0, r4
   15044:	bl	159a4 <__assert_fail@plt+0x47dc>
   15048:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1504c:	mov	r0, r4
   15050:	bl	131c4 <__assert_fail@plt+0x1ffc>
   15054:	mov	r3, r0
   15058:	eor	r3, r3, #1
   1505c:	uxtb	r3, r3
   15060:	cmp	r3, #0
   15064:	beq	15080 <__assert_fail@plt+0x3eb8>
   15068:	bl	1109c <__errno_location@plt>
   1506c:	mov	r2, r0
   15070:	mov	r3, #12
   15074:	str	r3, [r2]
   15078:	mov	r3, #0
   1507c:	b	15988 <__assert_fail@plt+0x47c0>
   15080:	ldr	r3, [r4, #44]	; 0x2c
   15084:	cmp	r3, #0
   15088:	beq	15094 <__assert_fail@plt+0x3ecc>
   1508c:	mvn	r3, #0
   15090:	b	1509c <__assert_fail@plt+0x3ed4>
   15094:	movw	r3, #34464	; 0x86a0
   15098:	movt	r3, #1
   1509c:	str	r3, [fp, #-56]	; 0xffffffc8
   150a0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   150a4:	cmp	r3, #0
   150a8:	beq	150b8 <__assert_fail@plt+0x3ef0>
   150ac:	mov	r3, #1
   150b0:	strb	r3, [fp, #-25]	; 0xffffffe7
   150b4:	b	15254 <__assert_fail@plt+0x408c>
   150b8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   150bc:	cmp	r3, #2
   150c0:	beq	15128 <__assert_fail@plt+0x3f60>
   150c4:	ldr	r3, [r4, #48]	; 0x30
   150c8:	and	r3, r3, #8
   150cc:	cmp	r3, #0
   150d0:	beq	15120 <__assert_fail@plt+0x3f58>
   150d4:	ldr	r3, [r4, #48]	; 0x30
   150d8:	and	r3, r3, #16
   150dc:	cmp	r3, #0
   150e0:	beq	15120 <__assert_fail@plt+0x3f58>
   150e4:	ldr	r3, [r4, #48]	; 0x30
   150e8:	and	r3, r3, #32
   150ec:	cmp	r3, #0
   150f0:	bne	15120 <__assert_fail@plt+0x3f58>
   150f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150f8:	ldr	r3, [r3, #84]	; 0x54
   150fc:	cmp	r3, #2
   15100:	bne	15120 <__assert_fail@plt+0x3f58>
   15104:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15108:	mov	r1, r3
   1510c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15110:	bl	14224 <__assert_fail@plt+0x305c>
   15114:	mov	r3, r0
   15118:	cmp	r3, #0
   1511c:	bne	15128 <__assert_fail@plt+0x3f60>
   15120:	mov	r3, #1
   15124:	b	1512c <__assert_fail@plt+0x3f64>
   15128:	mov	r3, #0
   1512c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15130:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15134:	and	r3, r3, #1
   15138:	strb	r3, [fp, #-25]	; 0xffffffe7
   1513c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15140:	cmp	r3, #0
   15144:	bne	15154 <__assert_fail@plt+0x3f8c>
   15148:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1514c:	cmp	r3, #3
   15150:	bne	15254 <__assert_fail@plt+0x408c>
   15154:	ldr	r3, [r4, #48]	; 0x30
   15158:	and	r3, r3, #512	; 0x200
   1515c:	cmp	r3, #0
   15160:	beq	15180 <__assert_fail@plt+0x3fb8>
   15164:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15168:	mov	r2, #3
   1516c:	movw	r1, #1030	; 0x406
   15170:	mov	r0, r3
   15174:	bl	1d3ec <__assert_fail@plt+0xc224>
   15178:	mov	r3, r0
   1517c:	str	r3, [fp, #-92]	; 0xffffffa4
   15180:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15184:	cmp	r3, #0
   15188:	blt	151ac <__assert_fail@plt+0x3fe4>
   1518c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   15190:	mov	r3, #0
   15194:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15198:	mov	r0, r4
   1519c:	bl	16138 <__assert_fail@plt+0x4f70>
   151a0:	mov	r3, r0
   151a4:	cmp	r3, #0
   151a8:	beq	1524c <__assert_fail@plt+0x4084>
   151ac:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   151b0:	cmp	r3, #0
   151b4:	beq	151d8 <__assert_fail@plt+0x4010>
   151b8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   151bc:	cmp	r3, #3
   151c0:	bne	151d8 <__assert_fail@plt+0x4010>
   151c4:	bl	1109c <__errno_location@plt>
   151c8:	mov	r3, r0
   151cc:	ldr	r2, [r3]
   151d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151d4:	str	r2, [r3, #32]
   151d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151dc:	ldrh	r3, [r3, #58]	; 0x3a
   151e0:	orr	r3, r3, #1
   151e4:	uxth	r2, r3
   151e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151ec:	strh	r2, [r3, #58]	; 0x3a
   151f0:	mov	r3, #0
   151f4:	strb	r3, [fp, #-25]	; 0xffffffe7
   151f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151fc:	ldr	r3, [r3, #12]
   15200:	mov	r0, r3
   15204:	bl	111bc <closedir@plt>
   15208:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1520c:	mov	r2, #0
   15210:	str	r2, [r3, #12]
   15214:	ldr	r3, [r4, #48]	; 0x30
   15218:	and	r3, r3, #512	; 0x200
   1521c:	cmp	r3, #0
   15220:	beq	1523c <__assert_fail@plt+0x4074>
   15224:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15228:	cmp	r3, #0
   1522c:	blt	1523c <__assert_fail@plt+0x4074>
   15230:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15234:	mov	r0, r3
   15238:	bl	111a4 <close@plt>
   1523c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15240:	mov	r2, #0
   15244:	str	r2, [r3, #12]
   15248:	b	15254 <__assert_fail@plt+0x408c>
   1524c:	mov	r3, #1
   15250:	strb	r3, [fp, #-25]	; 0xffffffe7
   15254:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15258:	ldr	r2, [r3, #28]
   1525c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15260:	ldr	r3, [r3, #40]	; 0x28
   15264:	sub	r3, r3, #1
   15268:	add	r3, r2, r3
   1526c:	ldrb	r3, [r3]
   15270:	cmp	r3, #47	; 0x2f
   15274:	bne	15288 <__assert_fail@plt+0x40c0>
   15278:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1527c:	ldr	r3, [r3, #40]	; 0x28
   15280:	sub	r3, r3, #1
   15284:	b	15290 <__assert_fail@plt+0x40c8>
   15288:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1528c:	ldr	r3, [r3, #40]	; 0x28
   15290:	str	r3, [fp, #-60]	; 0xffffffc4
   15294:	ldr	r3, [r4, #48]	; 0x30
   15298:	and	r3, r3, #4
   1529c:	cmp	r3, #0
   152a0:	beq	152cc <__assert_fail@plt+0x4104>
   152a4:	ldr	r2, [r4, #24]
   152a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   152ac:	add	r3, r2, r3
   152b0:	str	r3, [fp, #-36]	; 0xffffffdc
   152b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   152b8:	add	r2, r3, #1
   152bc:	str	r2, [fp, #-36]	; 0xffffffdc
   152c0:	mov	r2, #47	; 0x2f
   152c4:	strb	r2, [r3]
   152c8:	b	152d4 <__assert_fail@plt+0x410c>
   152cc:	mov	r3, #0
   152d0:	str	r3, [fp, #-36]	; 0xffffffdc
   152d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   152d8:	add	r3, r3, #1
   152dc:	str	r3, [fp, #-60]	; 0xffffffc4
   152e0:	ldr	r2, [r4, #36]	; 0x24
   152e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   152e8:	sub	r3, r2, r3
   152ec:	str	r3, [fp, #-32]	; 0xffffffe0
   152f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152f4:	ldr	r3, [r3, #48]	; 0x30
   152f8:	add	r3, r3, #1
   152fc:	str	r3, [fp, #-64]	; 0xffffffc0
   15300:	mov	r3, #0
   15304:	strb	r3, [fp, #-26]	; 0xffffffe6
   15308:	mov	r7, #0
   1530c:	mov	r3, #0
   15310:	str	r3, [fp, #-24]	; 0xffffffe8
   15314:	mov	r6, #0
   15318:	b	15768 <__assert_fail@plt+0x45a0>
   1531c:	bl	1109c <__errno_location@plt>
   15320:	mov	r2, r0
   15324:	mov	r3, #0
   15328:	str	r3, [r2]
   1532c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15330:	ldr	r3, [r3, #12]
   15334:	mov	r0, r3
   15338:	bl	11120 <readdir64@plt>
   1533c:	str	r0, [fp, #-68]	; 0xffffffbc
   15340:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15344:	cmp	r3, #0
   15348:	bne	153a0 <__assert_fail@plt+0x41d8>
   1534c:	bl	1109c <__errno_location@plt>
   15350:	mov	r3, r0
   15354:	ldr	r3, [r3]
   15358:	cmp	r3, #0
   1535c:	beq	1577c <__assert_fail@plt+0x45b4>
   15360:	bl	1109c <__errno_location@plt>
   15364:	mov	r3, r0
   15368:	ldr	r2, [r3]
   1536c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15370:	str	r2, [r3, #32]
   15374:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15378:	cmp	r3, #0
   1537c:	bne	15388 <__assert_fail@plt+0x41c0>
   15380:	cmp	r6, #0
   15384:	beq	15390 <__assert_fail@plt+0x41c8>
   15388:	mov	r2, #7
   1538c:	b	15394 <__assert_fail@plt+0x41cc>
   15390:	mov	r2, #4
   15394:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15398:	strh	r2, [r3, #56]	; 0x38
   1539c:	b	1577c <__assert_fail@plt+0x45b4>
   153a0:	ldr	r3, [r4, #48]	; 0x30
   153a4:	and	r3, r3, #32
   153a8:	cmp	r3, #0
   153ac:	bne	153f4 <__assert_fail@plt+0x422c>
   153b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153b4:	ldrb	r3, [r3, #19]
   153b8:	cmp	r3, #46	; 0x2e
   153bc:	bne	153f4 <__assert_fail@plt+0x422c>
   153c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153c4:	ldrb	r3, [r3, #20]
   153c8:	cmp	r3, #0
   153cc:	beq	15768 <__assert_fail@plt+0x45a0>
   153d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153d4:	ldrb	r3, [r3, #20]
   153d8:	cmp	r3, #46	; 0x2e
   153dc:	bne	153f4 <__assert_fail@plt+0x422c>
   153e0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153e4:	ldrb	r3, [r3, #21]
   153e8:	cmp	r3, #0
   153ec:	bne	153f4 <__assert_fail@plt+0x422c>
   153f0:	b	15768 <__assert_fail@plt+0x45a0>
   153f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153f8:	add	r3, r3, #19
   153fc:	mov	r0, r3
   15400:	bl	1106c <strlen@plt>
   15404:	str	r0, [fp, #-72]	; 0xffffffb8
   15408:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1540c:	add	r3, r3, #19
   15410:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15414:	mov	r1, r3
   15418:	mov	r0, r4
   1541c:	bl	15d58 <__assert_fail@plt+0x4b90>
   15420:	mov	r5, r0
   15424:	cmp	r5, #0
   15428:	beq	15478 <__assert_fail@plt+0x42b0>
   1542c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15430:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15434:	cmp	r2, r3
   15438:	bcc	15530 <__assert_fail@plt+0x4368>
   1543c:	ldr	r3, [r4, #24]
   15440:	str	r3, [fp, #-76]	; 0xffffffb4
   15444:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15448:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1544c:	add	r3, r2, r3
   15450:	add	r3, r3, #1
   15454:	mov	r1, r3
   15458:	mov	r0, r4
   1545c:	bl	15e88 <__assert_fail@plt+0x4cc0>
   15460:	mov	r3, r0
   15464:	eor	r3, r3, #1
   15468:	uxtb	r3, r3
   1546c:	cmp	r3, #0
   15470:	beq	154e8 <__assert_fail@plt+0x4320>
   15474:	b	1547c <__assert_fail@plt+0x42b4>
   15478:	nop	{0}
   1547c:	bl	1109c <__errno_location@plt>
   15480:	mov	r3, r0
   15484:	ldr	r3, [r3]
   15488:	str	r3, [fp, #-88]	; 0xffffffa8
   1548c:	mov	r0, r5
   15490:	bl	1d918 <__assert_fail@plt+0xc750>
   15494:	mov	r0, r7
   15498:	bl	15e28 <__assert_fail@plt+0x4c60>
   1549c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154a0:	ldr	r3, [r3, #12]
   154a4:	mov	r0, r3
   154a8:	bl	111bc <closedir@plt>
   154ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154b0:	mov	r2, #0
   154b4:	str	r2, [r3, #12]
   154b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154bc:	mov	r2, #7
   154c0:	strh	r2, [r3, #56]	; 0x38
   154c4:	ldr	r3, [r4, #48]	; 0x30
   154c8:	orr	r3, r3, #8192	; 0x2000
   154cc:	str	r3, [r4, #48]	; 0x30
   154d0:	bl	1109c <__errno_location@plt>
   154d4:	mov	r2, r0
   154d8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   154dc:	str	r3, [r2]
   154e0:	mov	r3, #0
   154e4:	b	15988 <__assert_fail@plt+0x47c0>
   154e8:	ldr	r3, [r4, #24]
   154ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   154f0:	cmp	r2, r3
   154f4:	beq	15520 <__assert_fail@plt+0x4358>
   154f8:	mov	r3, #1
   154fc:	strb	r3, [fp, #-26]	; 0xffffffe6
   15500:	ldr	r3, [r4, #48]	; 0x30
   15504:	and	r3, r3, #4
   15508:	cmp	r3, #0
   1550c:	beq	15520 <__assert_fail@plt+0x4358>
   15510:	ldr	r2, [r4, #24]
   15514:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15518:	add	r3, r2, r3
   1551c:	str	r3, [fp, #-36]	; 0xffffffdc
   15520:	ldr	r2, [r4, #36]	; 0x24
   15524:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15528:	sub	r3, r2, r3
   1552c:	str	r3, [fp, #-32]	; 0xffffffe0
   15530:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15534:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15538:	add	r3, r2, r3
   1553c:	str	r3, [fp, #-80]	; 0xffffffb0
   15540:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15544:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15548:	cmp	r2, r3
   1554c:	bcs	155ac <__assert_fail@plt+0x43e4>
   15550:	mov	r0, r5
   15554:	bl	1d918 <__assert_fail@plt+0xc750>
   15558:	mov	r0, r7
   1555c:	bl	15e28 <__assert_fail@plt+0x4c60>
   15560:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15564:	ldr	r3, [r3, #12]
   15568:	mov	r0, r3
   1556c:	bl	111bc <closedir@plt>
   15570:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15574:	mov	r2, #0
   15578:	str	r2, [r3, #12]
   1557c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15580:	mov	r2, #7
   15584:	strh	r2, [r3, #56]	; 0x38
   15588:	ldr	r3, [r4, #48]	; 0x30
   1558c:	orr	r3, r3, #8192	; 0x2000
   15590:	str	r3, [r4, #48]	; 0x30
   15594:	bl	1109c <__errno_location@plt>
   15598:	mov	r2, r0
   1559c:	mov	r3, #36	; 0x24
   155a0:	str	r3, [r2]
   155a4:	mov	r3, #0
   155a8:	b	15988 <__assert_fail@plt+0x47c0>
   155ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   155b0:	str	r3, [r5, #48]	; 0x30
   155b4:	ldr	r3, [r4]
   155b8:	str	r3, [r5, #4]
   155bc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   155c0:	str	r3, [r5, #40]	; 0x28
   155c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   155c8:	ldrd	r2, [r3]
   155cc:	strd	r2, [r5, #160]	; 0xa0
   155d0:	ldr	r3, [r4, #48]	; 0x30
   155d4:	and	r3, r3, #4
   155d8:	cmp	r3, #0
   155dc:	beq	15604 <__assert_fail@plt+0x443c>
   155e0:	ldr	r3, [r5, #28]
   155e4:	str	r3, [r5, #24]
   155e8:	add	r1, r5, #168	; 0xa8
   155ec:	ldr	r3, [r5, #52]	; 0x34
   155f0:	add	r3, r3, #1
   155f4:	mov	r2, r3
   155f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   155fc:	bl	10f1c <memmove@plt>
   15600:	b	1560c <__assert_fail@plt+0x4444>
   15604:	add	r3, r5, #168	; 0xa8
   15608:	str	r3, [r5, #24]
   1560c:	ldr	r3, [r4, #44]	; 0x2c
   15610:	cmp	r3, #0
   15614:	beq	15628 <__assert_fail@plt+0x4460>
   15618:	ldr	r3, [r4, #48]	; 0x30
   1561c:	and	r3, r3, #1024	; 0x400
   15620:	cmp	r3, #0
   15624:	beq	156e8 <__assert_fail@plt+0x4520>
   15628:	ldr	r3, [r4, #48]	; 0x30
   1562c:	and	r3, r3, #8
   15630:	cmp	r3, #0
   15634:	beq	15680 <__assert_fail@plt+0x44b8>
   15638:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1563c:	ldrb	r3, [r3, #18]
   15640:	cmp	r3, #0
   15644:	beq	15680 <__assert_fail@plt+0x44b8>
   15648:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1564c:	ldrb	r3, [r3, #18]
   15650:	cmp	r3, #4
   15654:	beq	15680 <__assert_fail@plt+0x44b8>
   15658:	ldr	r3, [r4, #48]	; 0x30
   1565c:	and	r3, r3, #16
   15660:	cmp	r3, #0
   15664:	bne	15678 <__assert_fail@plt+0x44b0>
   15668:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1566c:	ldrb	r3, [r3, #18]
   15670:	cmp	r3, #10
   15674:	beq	15680 <__assert_fail@plt+0x44b8>
   15678:	mov	r3, #1
   1567c:	b	15684 <__assert_fail@plt+0x44bc>
   15680:	mov	r3, #0
   15684:	strb	r3, [fp, #-81]	; 0xffffffaf
   15688:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   1568c:	and	r3, r3, #1
   15690:	strb	r3, [fp, #-81]	; 0xffffffaf
   15694:	mov	r3, #11
   15698:	strh	r3, [r5, #56]	; 0x38
   1569c:	add	r2, r5, #64	; 0x40
   156a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   156a4:	ldrb	r3, [r3, #18]
   156a8:	mov	r1, r3
   156ac:	mov	r0, r2
   156b0:	bl	14d80 <__assert_fail@plt+0x3bb8>
   156b4:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   156b8:	cmp	r3, #0
   156bc:	movne	r3, #1
   156c0:	moveq	r3, #0
   156c4:	uxtb	r3, r3
   156c8:	eor	r3, r3, #1
   156cc:	uxtb	r3, r3
   156d0:	and	r3, r3, #1
   156d4:	uxtb	r3, r3
   156d8:	mov	r1, r3
   156dc:	mov	r0, r5
   156e0:	bl	13530 <__assert_fail@plt+0x2368>
   156e4:	b	15700 <__assert_fail@plt+0x4538>
   156e8:	mov	r2, #0
   156ec:	mov	r1, r5
   156f0:	mov	r0, r4
   156f4:	bl	159a4 <__assert_fail@plt+0x47dc>
   156f8:	mov	r3, r0
   156fc:	strh	r3, [r5, #56]	; 0x38
   15700:	mov	r3, #0
   15704:	str	r3, [r5, #8]
   15708:	cmp	r7, #0
   1570c:	bne	1571c <__assert_fail@plt+0x4554>
   15710:	str	r5, [fp, #-24]	; 0xffffffe8
   15714:	ldr	r7, [fp, #-24]	; 0xffffffe8
   15718:	b	15728 <__assert_fail@plt+0x4560>
   1571c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15720:	str	r5, [r3, #8]
   15724:	str	r5, [fp, #-24]	; 0xffffffe8
   15728:	movw	r3, #10000	; 0x2710
   1572c:	cmp	r6, r3
   15730:	bne	15758 <__assert_fail@plt+0x4590>
   15734:	ldr	r3, [r4, #44]	; 0x2c
   15738:	cmp	r3, #0
   1573c:	bne	15758 <__assert_fail@plt+0x4590>
   15740:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15744:	mov	r1, r3
   15748:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1574c:	bl	141b0 <__assert_fail@plt+0x2fe8>
   15750:	mov	r3, r0
   15754:	strb	r3, [fp, #-37]	; 0xffffffdb
   15758:	add	r6, r6, #1
   1575c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15760:	cmp	r3, r6
   15764:	bls	157b0 <__assert_fail@plt+0x45e8>
   15768:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1576c:	ldr	r3, [r3, #12]
   15770:	cmp	r3, #0
   15774:	bne	1531c <__assert_fail@plt+0x4154>
   15778:	b	15780 <__assert_fail@plt+0x45b8>
   1577c:	nop	{0}
   15780:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15784:	ldr	r3, [r3, #12]
   15788:	cmp	r3, #0
   1578c:	beq	157b8 <__assert_fail@plt+0x45f0>
   15790:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15794:	ldr	r3, [r3, #12]
   15798:	mov	r0, r3
   1579c:	bl	111bc <closedir@plt>
   157a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157a4:	mov	r2, #0
   157a8:	str	r2, [r3, #12]
   157ac:	b	157bc <__assert_fail@plt+0x45f4>
   157b0:	nop	{0}
   157b4:	b	157bc <__assert_fail@plt+0x45f4>
   157b8:	nop	{0}
   157bc:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   157c0:	cmp	r3, #0
   157c4:	beq	157d4 <__assert_fail@plt+0x460c>
   157c8:	mov	r1, r7
   157cc:	mov	r0, r4
   157d0:	bl	15f80 <__assert_fail@plt+0x4db8>
   157d4:	ldr	r3, [r4, #48]	; 0x30
   157d8:	and	r3, r3, #4
   157dc:	cmp	r3, #0
   157e0:	beq	15814 <__assert_fail@plt+0x464c>
   157e4:	ldr	r3, [r4, #36]	; 0x24
   157e8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   157ec:	cmp	r2, r3
   157f0:	beq	157fc <__assert_fail@plt+0x4634>
   157f4:	cmp	r6, #0
   157f8:	bne	15808 <__assert_fail@plt+0x4640>
   157fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15800:	sub	r3, r3, #1
   15804:	str	r3, [fp, #-36]	; 0xffffffdc
   15808:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1580c:	mov	r2, #0
   15810:	strb	r2, [r3]
   15814:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15818:	eor	r3, r3, #1
   1581c:	uxtb	r3, r3
   15820:	cmp	r3, #0
   15824:	beq	158d8 <__assert_fail@plt+0x4710>
   15828:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1582c:	cmp	r3, #0
   15830:	beq	158d8 <__assert_fail@plt+0x4710>
   15834:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15838:	cmp	r3, #1
   1583c:	beq	15848 <__assert_fail@plt+0x4680>
   15840:	cmp	r6, #0
   15844:	bne	158d8 <__assert_fail@plt+0x4710>
   15848:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1584c:	ldr	r3, [r3, #48]	; 0x30
   15850:	cmp	r3, #0
   15854:	bne	15878 <__assert_fail@plt+0x46b0>
   15858:	mov	r0, r4
   1585c:	bl	1366c <__assert_fail@plt+0x24a4>
   15860:	mov	r3, r0
   15864:	cmp	r3, #0
   15868:	movne	r3, #1
   1586c:	moveq	r3, #0
   15870:	uxtb	r3, r3
   15874:	b	158a8 <__assert_fail@plt+0x46e0>
   15878:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1587c:	ldr	r1, [r3, #4]
   15880:	movw	r3, #62156	; 0xf2cc
   15884:	movt	r3, #1
   15888:	mvn	r2, #0
   1588c:	mov	r0, r4
   15890:	bl	16138 <__assert_fail@plt+0x4f70>
   15894:	mov	r3, r0
   15898:	cmp	r3, #0
   1589c:	movne	r3, #1
   158a0:	moveq	r3, #0
   158a4:	uxtb	r3, r3
   158a8:	cmp	r3, #0
   158ac:	beq	158d8 <__assert_fail@plt+0x4710>
   158b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158b4:	mov	r2, #7
   158b8:	strh	r2, [r3, #56]	; 0x38
   158bc:	ldr	r3, [r4, #48]	; 0x30
   158c0:	orr	r3, r3, #8192	; 0x2000
   158c4:	str	r3, [r4, #48]	; 0x30
   158c8:	mov	r0, r7
   158cc:	bl	15e28 <__assert_fail@plt+0x4c60>
   158d0:	mov	r3, #0
   158d4:	b	15988 <__assert_fail@plt+0x47c0>
   158d8:	cmp	r6, #0
   158dc:	bne	15928 <__assert_fail@plt+0x4760>
   158e0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   158e4:	cmp	r3, #3
   158e8:	bne	15918 <__assert_fail@plt+0x4750>
   158ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158f0:	ldrh	r3, [r3, #56]	; 0x38
   158f4:	cmp	r3, #4
   158f8:	beq	15918 <__assert_fail@plt+0x4750>
   158fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15900:	ldrh	r3, [r3, #56]	; 0x38
   15904:	cmp	r3, #7
   15908:	beq	15918 <__assert_fail@plt+0x4750>
   1590c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15910:	mov	r2, #6
   15914:	strh	r2, [r3, #56]	; 0x38
   15918:	mov	r0, r7
   1591c:	bl	15e28 <__assert_fail@plt+0x4c60>
   15920:	mov	r3, #0
   15924:	b	15988 <__assert_fail@plt+0x47c0>
   15928:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1592c:	cmp	r3, #0
   15930:	beq	1595c <__assert_fail@plt+0x4794>
   15934:	movw	r3, #19708	; 0x4cfc
   15938:	movt	r3, #1
   1593c:	str	r3, [r4, #44]	; 0x2c
   15940:	mov	r2, r6
   15944:	mov	r1, r7
   15948:	mov	r0, r4
   1594c:	bl	15bf4 <__assert_fail@plt+0x4a2c>
   15950:	mov	r7, r0
   15954:	mov	r3, #0
   15958:	str	r3, [r4, #44]	; 0x2c
   1595c:	ldr	r3, [r4, #44]	; 0x2c
   15960:	cmp	r3, #0
   15964:	beq	15984 <__assert_fail@plt+0x47bc>
   15968:	cmp	r6, #1
   1596c:	bls	15984 <__assert_fail@plt+0x47bc>
   15970:	mov	r2, r6
   15974:	mov	r1, r7
   15978:	mov	r0, r4
   1597c:	bl	15bf4 <__assert_fail@plt+0x4a2c>
   15980:	mov	r7, r0
   15984:	mov	r3, r7
   15988:	mov	r0, r3
   1598c:	sub	sp, fp, #20
   15990:	ldrd	r4, [sp]
   15994:	ldrd	r6, [sp, #8]
   15998:	ldr	fp, [sp, #16]
   1599c:	add	sp, sp, #20
   159a0:	pop	{pc}		; (ldr pc, [sp], #4)
   159a4:	str	r4, [sp, #-12]!
   159a8:	str	fp, [sp, #4]
   159ac:	str	lr, [sp, #8]
   159b0:	add	fp, sp, #8
   159b4:	sub	sp, sp, #20
   159b8:	str	r0, [fp, #-24]	; 0xffffffe8
   159bc:	mov	r4, r1
   159c0:	mov	r3, r2
   159c4:	strb	r3, [fp, #-25]	; 0xffffffe7
   159c8:	add	r3, r4, #64	; 0x40
   159cc:	str	r3, [fp, #-16]
   159d0:	ldr	r3, [r4, #48]	; 0x30
   159d4:	cmp	r3, #0
   159d8:	bne	159f8 <__assert_fail@plt+0x4830>
   159dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159e0:	ldr	r3, [r3, #48]	; 0x30
   159e4:	and	r3, r3, #1
   159e8:	cmp	r3, #0
   159ec:	beq	159f8 <__assert_fail@plt+0x4830>
   159f0:	mov	r3, #1
   159f4:	strb	r3, [fp, #-25]	; 0xffffffe7
   159f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159fc:	ldr	r3, [r3, #48]	; 0x30
   15a00:	and	r3, r3, #2
   15a04:	cmp	r3, #0
   15a08:	bne	15a18 <__assert_fail@plt+0x4850>
   15a0c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15a10:	cmp	r3, #0
   15a14:	beq	15a90 <__assert_fail@plt+0x48c8>
   15a18:	ldr	r3, [r4, #24]
   15a1c:	ldr	r1, [fp, #-16]
   15a20:	mov	r0, r3
   15a24:	bl	1e77c <__assert_fail@plt+0xd5b4>
   15a28:	mov	r3, r0
   15a2c:	cmp	r3, #0
   15a30:	beq	15adc <__assert_fail@plt+0x4914>
   15a34:	bl	1109c <__errno_location@plt>
   15a38:	mov	r3, r0
   15a3c:	ldr	r3, [r3]
   15a40:	cmp	r3, #2
   15a44:	bne	15a7c <__assert_fail@plt+0x48b4>
   15a48:	ldr	r3, [r4, #24]
   15a4c:	ldr	r1, [fp, #-16]
   15a50:	mov	r0, r3
   15a54:	bl	1e79c <__assert_fail@plt+0xd5d4>
   15a58:	mov	r3, r0
   15a5c:	cmp	r3, #0
   15a60:	bne	15a7c <__assert_fail@plt+0x48b4>
   15a64:	bl	1109c <__errno_location@plt>
   15a68:	mov	r2, r0
   15a6c:	mov	r3, #0
   15a70:	str	r3, [r2]
   15a74:	mov	r3, #13
   15a78:	b	15b80 <__assert_fail@plt+0x49b8>
   15a7c:	bl	1109c <__errno_location@plt>
   15a80:	mov	r3, r0
   15a84:	ldr	r3, [r3]
   15a88:	str	r3, [r4, #32]
   15a8c:	b	15ac4 <__assert_fail@plt+0x48fc>
   15a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a94:	ldr	r0, [r3, #32]
   15a98:	ldr	r1, [r4, #24]
   15a9c:	mov	r3, #256	; 0x100
   15aa0:	ldr	r2, [fp, #-16]
   15aa4:	bl	1e7ac <__assert_fail@plt+0xd5e4>
   15aa8:	mov	r3, r0
   15aac:	cmp	r3, #0
   15ab0:	beq	15adc <__assert_fail@plt+0x4914>
   15ab4:	bl	1109c <__errno_location@plt>
   15ab8:	mov	r3, r0
   15abc:	ldr	r3, [r3]
   15ac0:	str	r3, [r4, #32]
   15ac4:	mov	r2, #104	; 0x68
   15ac8:	mov	r1, #0
   15acc:	ldr	r0, [fp, #-16]
   15ad0:	bl	110b4 <memset@plt>
   15ad4:	mov	r3, #10
   15ad8:	b	15b80 <__assert_fail@plt+0x49b8>
   15adc:	ldr	r3, [fp, #-16]
   15ae0:	ldr	r3, [r3, #16]
   15ae4:	and	r3, r3, #61440	; 0xf000
   15ae8:	cmp	r3, #16384	; 0x4000
   15aec:	bne	15b44 <__assert_fail@plt+0x497c>
   15af0:	ldrb	r3, [r4, #168]	; 0xa8
   15af4:	cmp	r3, #46	; 0x2e
   15af8:	bne	15b3c <__assert_fail@plt+0x4974>
   15afc:	ldrb	r3, [r4, #169]	; 0xa9
   15b00:	cmp	r3, #0
   15b04:	beq	15b20 <__assert_fail@plt+0x4958>
   15b08:	ldrb	r3, [r4, #169]	; 0xa9
   15b0c:	cmp	r3, #46	; 0x2e
   15b10:	bne	15b3c <__assert_fail@plt+0x4974>
   15b14:	ldrb	r3, [r4, #170]	; 0xaa
   15b18:	cmp	r3, #0
   15b1c:	bne	15b3c <__assert_fail@plt+0x4974>
   15b20:	ldr	r3, [r4, #48]	; 0x30
   15b24:	cmp	r3, #0
   15b28:	bne	15b34 <__assert_fail@plt+0x496c>
   15b2c:	mov	r3, #1
   15b30:	b	15b80 <__assert_fail@plt+0x49b8>
   15b34:	mov	r3, #5
   15b38:	b	15b80 <__assert_fail@plt+0x49b8>
   15b3c:	mov	r3, #1
   15b40:	b	15b80 <__assert_fail@plt+0x49b8>
   15b44:	ldr	r3, [fp, #-16]
   15b48:	ldr	r3, [r3, #16]
   15b4c:	and	r3, r3, #61440	; 0xf000
   15b50:	cmp	r3, #40960	; 0xa000
   15b54:	bne	15b60 <__assert_fail@plt+0x4998>
   15b58:	mov	r3, #12
   15b5c:	b	15b80 <__assert_fail@plt+0x49b8>
   15b60:	ldr	r3, [fp, #-16]
   15b64:	ldr	r3, [r3, #16]
   15b68:	and	r3, r3, #61440	; 0xf000
   15b6c:	cmp	r3, #32768	; 0x8000
   15b70:	bne	15b7c <__assert_fail@plt+0x49b4>
   15b74:	mov	r3, #8
   15b78:	b	15b80 <__assert_fail@plt+0x49b8>
   15b7c:	mov	r3, #3
   15b80:	mov	r0, r3
   15b84:	sub	sp, fp, #8
   15b88:	ldr	r4, [sp]
   15b8c:	ldr	fp, [sp, #4]
   15b90:	add	sp, sp, #8
   15b94:	pop	{pc}		; (ldr pc, [sp], #4)
   15b98:	str	fp, [sp, #-8]!
   15b9c:	str	lr, [sp, #4]
   15ba0:	add	fp, sp, #4
   15ba4:	sub	sp, sp, #16
   15ba8:	str	r0, [fp, #-16]
   15bac:	str	r1, [fp, #-20]	; 0xffffffec
   15bb0:	ldr	r3, [fp, #-16]
   15bb4:	str	r3, [fp, #-8]
   15bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bbc:	str	r3, [fp, #-12]
   15bc0:	ldr	r3, [fp, #-8]
   15bc4:	ldr	r3, [r3]
   15bc8:	ldr	r3, [r3, #44]	; 0x2c
   15bcc:	ldr	r3, [r3, #44]	; 0x2c
   15bd0:	ldr	r1, [fp, #-12]
   15bd4:	ldr	r0, [fp, #-8]
   15bd8:	blx	r3
   15bdc:	mov	r3, r0
   15be0:	mov	r0, r3
   15be4:	sub	sp, fp, #4
   15be8:	ldr	fp, [sp]
   15bec:	add	sp, sp, #4
   15bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf4:	strd	r4, [sp, #-20]!	; 0xffffffec
   15bf8:	str	r6, [sp, #8]
   15bfc:	str	fp, [sp, #12]
   15c00:	str	lr, [sp, #16]
   15c04:	add	fp, sp, #16
   15c08:	sub	sp, sp, #28
   15c0c:	str	r0, [fp, #-40]	; 0xffffffd8
   15c10:	str	r1, [fp, #-44]	; 0xffffffd4
   15c14:	mov	r5, r2
   15c18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c1c:	ldr	r3, [r3, #44]	; 0x2c
   15c20:	str	r3, [fp, #-24]	; 0xffffffe8
   15c24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c28:	ldr	r3, [r3, #40]	; 0x28
   15c2c:	cmp	r5, r3
   15c30:	bls	15cbc <__assert_fail@plt+0x4af4>
   15c34:	add	r2, r5, #40	; 0x28
   15c38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c3c:	str	r2, [r3, #40]	; 0x28
   15c40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c44:	ldr	r3, [r3, #40]	; 0x28
   15c48:	cmn	r3, #-1073741823	; 0xc0000001
   15c4c:	bhi	15c80 <__assert_fail@plt+0x4ab8>
   15c50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c54:	ldr	r2, [r3, #8]
   15c58:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c5c:	ldr	r3, [r3, #40]	; 0x28
   15c60:	lsl	r3, r3, #2
   15c64:	mov	r1, r3
   15c68:	mov	r0, r2
   15c6c:	bl	1cb80 <__assert_fail@plt+0xb9b8>
   15c70:	str	r0, [fp, #-28]	; 0xffffffe4
   15c74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c78:	cmp	r3, #0
   15c7c:	bne	15cb0 <__assert_fail@plt+0x4ae8>
   15c80:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c84:	ldr	r3, [r3, #8]
   15c88:	mov	r0, r3
   15c8c:	bl	1d918 <__assert_fail@plt+0xc750>
   15c90:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c94:	mov	r2, #0
   15c98:	str	r2, [r3, #8]
   15c9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ca0:	mov	r2, #0
   15ca4:	str	r2, [r3, #40]	; 0x28
   15ca8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15cac:	b	15d3c <__assert_fail@plt+0x4b74>
   15cb0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15cb4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15cb8:	str	r2, [r3, #8]
   15cbc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15cc0:	ldr	r4, [r3, #8]
   15cc4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   15cc8:	b	15cdc <__assert_fail@plt+0x4b14>
   15ccc:	mov	r3, r4
   15cd0:	add	r4, r3, #4
   15cd4:	str	r6, [r3]
   15cd8:	ldr	r6, [r6, #8]
   15cdc:	cmp	r6, #0
   15ce0:	bne	15ccc <__assert_fail@plt+0x4b04>
   15ce4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ce8:	ldr	r0, [r3, #8]
   15cec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cf0:	mov	r2, #4
   15cf4:	mov	r1, r5
   15cf8:	bl	11150 <qsort@plt>
   15cfc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15d00:	ldr	r4, [r3, #8]
   15d04:	ldr	r3, [r4]
   15d08:	str	r3, [fp, #-44]	; 0xffffffd4
   15d0c:	b	15d20 <__assert_fail@plt+0x4b58>
   15d10:	ldr	r3, [r4]
   15d14:	ldr	r2, [r4, #4]
   15d18:	str	r2, [r3, #8]
   15d1c:	add	r4, r4, #4
   15d20:	sub	r5, r5, #1
   15d24:	cmp	r5, #0
   15d28:	bne	15d10 <__assert_fail@plt+0x4b48>
   15d2c:	ldr	r3, [r4]
   15d30:	mov	r2, #0
   15d34:	str	r2, [r3, #8]
   15d38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d3c:	mov	r0, r3
   15d40:	sub	sp, fp, #16
   15d44:	ldrd	r4, [sp]
   15d48:	ldr	r6, [sp, #8]
   15d4c:	ldr	fp, [sp, #12]
   15d50:	add	sp, sp, #16
   15d54:	pop	{pc}		; (ldr pc, [sp], #4)
   15d58:	strd	r4, [sp, #-16]!
   15d5c:	str	fp, [sp, #8]
   15d60:	str	lr, [sp, #12]
   15d64:	add	fp, sp, #12
   15d68:	sub	sp, sp, #16
   15d6c:	str	r0, [fp, #-24]	; 0xffffffe8
   15d70:	str	r1, [fp, #-28]	; 0xffffffe4
   15d74:	mov	r5, r2
   15d78:	add	r3, r5, #176	; 0xb0
   15d7c:	bic	r3, r3, #7
   15d80:	str	r3, [fp, #-16]
   15d84:	ldr	r0, [fp, #-16]
   15d88:	bl	1caf0 <__assert_fail@plt+0xb928>
   15d8c:	mov	r3, r0
   15d90:	mov	r4, r3
   15d94:	cmp	r4, #0
   15d98:	bne	15da4 <__assert_fail@plt+0x4bdc>
   15d9c:	mov	r3, #0
   15da0:	b	15e10 <__assert_fail@plt+0x4c48>
   15da4:	add	r3, r4, #168	; 0xa8
   15da8:	mov	r2, r5
   15dac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15db0:	mov	r0, r3
   15db4:	bl	10f40 <memcpy@plt>
   15db8:	add	r3, r4, r5
   15dbc:	mov	r2, #0
   15dc0:	strb	r2, [r3, #168]	; 0xa8
   15dc4:	str	r5, [r4, #52]	; 0x34
   15dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dcc:	str	r3, [r4, #44]	; 0x2c
   15dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dd4:	ldr	r3, [r3, #24]
   15dd8:	str	r3, [r4, #28]
   15ddc:	mov	r3, #0
   15de0:	str	r3, [r4, #32]
   15de4:	mov	r3, #0
   15de8:	str	r3, [r4, #12]
   15dec:	mov	r3, #0
   15df0:	strh	r3, [r4, #58]	; 0x3a
   15df4:	mov	r3, #3
   15df8:	strh	r3, [r4, #60]	; 0x3c
   15dfc:	mov	r3, #0
   15e00:	str	r3, [r4, #16]
   15e04:	mov	r3, #0
   15e08:	str	r3, [r4, #20]
   15e0c:	mov	r3, r4
   15e10:	mov	r0, r3
   15e14:	sub	sp, fp, #12
   15e18:	ldrd	r4, [sp]
   15e1c:	ldr	fp, [sp, #8]
   15e20:	add	sp, sp, #12
   15e24:	pop	{pc}		; (ldr pc, [sp], #4)
   15e28:	strd	r4, [sp, #-16]!
   15e2c:	str	fp, [sp, #8]
   15e30:	str	lr, [sp, #12]
   15e34:	add	fp, sp, #12
   15e38:	mov	r5, r0
   15e3c:	b	15e64 <__assert_fail@plt+0x4c9c>
   15e40:	ldr	r5, [r5, #8]
   15e44:	ldr	r3, [r4, #12]
   15e48:	cmp	r3, #0
   15e4c:	beq	15e5c <__assert_fail@plt+0x4c94>
   15e50:	ldr	r3, [r4, #12]
   15e54:	mov	r0, r3
   15e58:	bl	111bc <closedir@plt>
   15e5c:	mov	r0, r4
   15e60:	bl	1d918 <__assert_fail@plt+0xc750>
   15e64:	mov	r4, r5
   15e68:	cmp	r4, #0
   15e6c:	bne	15e40 <__assert_fail@plt+0x4c78>
   15e70:	nop	{0}
   15e74:	sub	sp, fp, #12
   15e78:	ldrd	r4, [sp]
   15e7c:	ldr	fp, [sp, #8]
   15e80:	add	sp, sp, #12
   15e84:	pop	{pc}		; (ldr pc, [sp], #4)
   15e88:	str	fp, [sp, #-8]!
   15e8c:	str	lr, [sp, #4]
   15e90:	add	fp, sp, #4
   15e94:	sub	sp, sp, #16
   15e98:	str	r0, [fp, #-16]
   15e9c:	str	r1, [fp, #-20]	; 0xffffffec
   15ea0:	ldr	r3, [fp, #-16]
   15ea4:	ldr	r2, [r3, #36]	; 0x24
   15ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15eac:	add	r3, r2, r3
   15eb0:	add	r3, r3, #256	; 0x100
   15eb4:	str	r3, [fp, #-8]
   15eb8:	ldr	r3, [fp, #-16]
   15ebc:	ldr	r3, [r3, #36]	; 0x24
   15ec0:	ldr	r2, [fp, #-8]
   15ec4:	cmp	r2, r3
   15ec8:	bcs	15f00 <__assert_fail@plt+0x4d38>
   15ecc:	ldr	r3, [fp, #-16]
   15ed0:	ldr	r3, [r3, #24]
   15ed4:	mov	r0, r3
   15ed8:	bl	1d918 <__assert_fail@plt+0xc750>
   15edc:	ldr	r3, [fp, #-16]
   15ee0:	mov	r2, #0
   15ee4:	str	r2, [r3, #24]
   15ee8:	bl	1109c <__errno_location@plt>
   15eec:	mov	r2, r0
   15ef0:	mov	r3, #36	; 0x24
   15ef4:	str	r3, [r2]
   15ef8:	mov	r3, #0
   15efc:	b	15f6c <__assert_fail@plt+0x4da4>
   15f00:	ldr	r3, [fp, #-16]
   15f04:	ldr	r2, [fp, #-8]
   15f08:	str	r2, [r3, #36]	; 0x24
   15f0c:	ldr	r3, [fp, #-16]
   15f10:	ldr	r2, [r3, #24]
   15f14:	ldr	r3, [fp, #-16]
   15f18:	ldr	r3, [r3, #36]	; 0x24
   15f1c:	mov	r1, r3
   15f20:	mov	r0, r2
   15f24:	bl	1cb80 <__assert_fail@plt+0xb9b8>
   15f28:	str	r0, [fp, #-12]
   15f2c:	ldr	r3, [fp, #-12]
   15f30:	cmp	r3, #0
   15f34:	bne	15f5c <__assert_fail@plt+0x4d94>
   15f38:	ldr	r3, [fp, #-16]
   15f3c:	ldr	r3, [r3, #24]
   15f40:	mov	r0, r3
   15f44:	bl	1d918 <__assert_fail@plt+0xc750>
   15f48:	ldr	r3, [fp, #-16]
   15f4c:	mov	r2, #0
   15f50:	str	r2, [r3, #24]
   15f54:	mov	r3, #0
   15f58:	b	15f6c <__assert_fail@plt+0x4da4>
   15f5c:	ldr	r3, [fp, #-16]
   15f60:	ldr	r2, [fp, #-12]
   15f64:	str	r2, [r3, #24]
   15f68:	mov	r3, #1
   15f6c:	mov	r0, r3
   15f70:	sub	sp, fp, #4
   15f74:	ldr	fp, [sp]
   15f78:	add	sp, sp, #4
   15f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f80:	push	{fp}		; (str fp, [sp, #-4]!)
   15f84:	add	fp, sp, #0
   15f88:	sub	sp, sp, #20
   15f8c:	str	r0, [fp, #-16]
   15f90:	str	r1, [fp, #-20]	; 0xffffffec
   15f94:	ldr	r3, [fp, #-16]
   15f98:	ldr	r3, [r3, #24]
   15f9c:	str	r3, [fp, #-12]
   15fa0:	ldr	r3, [fp, #-16]
   15fa4:	ldr	r3, [r3, #4]
   15fa8:	str	r3, [fp, #-8]
   15fac:	b	16008 <__assert_fail@plt+0x4e40>
   15fb0:	ldr	r3, [fp, #-8]
   15fb4:	ldr	r2, [r3, #24]
   15fb8:	ldr	r3, [fp, #-8]
   15fbc:	add	r3, r3, #168	; 0xa8
   15fc0:	cmp	r2, r3
   15fc4:	beq	15ff0 <__assert_fail@plt+0x4e28>
   15fc8:	ldr	r3, [fp, #-8]
   15fcc:	ldr	r2, [r3, #24]
   15fd0:	ldr	r3, [fp, #-8]
   15fd4:	ldr	r3, [r3, #28]
   15fd8:	sub	r3, r2, r3
   15fdc:	mov	r2, r3
   15fe0:	ldr	r3, [fp, #-12]
   15fe4:	add	r2, r3, r2
   15fe8:	ldr	r3, [fp, #-8]
   15fec:	str	r2, [r3, #24]
   15ff0:	ldr	r3, [fp, #-8]
   15ff4:	ldr	r2, [fp, #-12]
   15ff8:	str	r2, [r3, #28]
   15ffc:	ldr	r3, [fp, #-8]
   16000:	ldr	r3, [r3, #8]
   16004:	str	r3, [fp, #-8]
   16008:	ldr	r3, [fp, #-8]
   1600c:	cmp	r3, #0
   16010:	bne	15fb0 <__assert_fail@plt+0x4de8>
   16014:	ldr	r3, [fp, #-20]	; 0xffffffec
   16018:	str	r3, [fp, #-8]
   1601c:	b	16094 <__assert_fail@plt+0x4ecc>
   16020:	ldr	r3, [fp, #-8]
   16024:	ldr	r2, [r3, #24]
   16028:	ldr	r3, [fp, #-8]
   1602c:	add	r3, r3, #168	; 0xa8
   16030:	cmp	r2, r3
   16034:	beq	16060 <__assert_fail@plt+0x4e98>
   16038:	ldr	r3, [fp, #-8]
   1603c:	ldr	r2, [r3, #24]
   16040:	ldr	r3, [fp, #-8]
   16044:	ldr	r3, [r3, #28]
   16048:	sub	r3, r2, r3
   1604c:	mov	r2, r3
   16050:	ldr	r3, [fp, #-12]
   16054:	add	r2, r3, r2
   16058:	ldr	r3, [fp, #-8]
   1605c:	str	r2, [r3, #24]
   16060:	ldr	r3, [fp, #-8]
   16064:	ldr	r2, [fp, #-12]
   16068:	str	r2, [r3, #28]
   1606c:	ldr	r3, [fp, #-8]
   16070:	ldr	r3, [r3, #8]
   16074:	cmp	r3, #0
   16078:	beq	16088 <__assert_fail@plt+0x4ec0>
   1607c:	ldr	r3, [fp, #-8]
   16080:	ldr	r3, [r3, #8]
   16084:	b	16090 <__assert_fail@plt+0x4ec8>
   16088:	ldr	r3, [fp, #-8]
   1608c:	ldr	r3, [r3, #4]
   16090:	str	r3, [fp, #-8]
   16094:	ldr	r3, [fp, #-8]
   16098:	ldr	r3, [r3, #48]	; 0x30
   1609c:	cmp	r3, #0
   160a0:	bge	16020 <__assert_fail@plt+0x4e58>
   160a4:	nop	{0}
   160a8:	add	sp, fp, #0
   160ac:	pop	{fp}		; (ldr fp, [sp], #4)
   160b0:	bx	lr
   160b4:	str	fp, [sp, #-8]!
   160b8:	str	lr, [sp, #4]
   160bc:	add	fp, sp, #4
   160c0:	sub	sp, sp, #16
   160c4:	str	r0, [fp, #-16]
   160c8:	mov	r3, #0
   160cc:	str	r3, [fp, #-8]
   160d0:	b	1610c <__assert_fail@plt+0x4f44>
   160d4:	ldr	r3, [fp, #-16]
   160d8:	ldr	r3, [r3]
   160dc:	mov	r0, r3
   160e0:	bl	1106c <strlen@plt>
   160e4:	str	r0, [fp, #-12]
   160e8:	ldr	r2, [fp, #-12]
   160ec:	ldr	r3, [fp, #-8]
   160f0:	cmp	r2, r3
   160f4:	bls	16100 <__assert_fail@plt+0x4f38>
   160f8:	ldr	r3, [fp, #-12]
   160fc:	str	r3, [fp, #-8]
   16100:	ldr	r3, [fp, #-16]
   16104:	add	r3, r3, #4
   16108:	str	r3, [fp, #-16]
   1610c:	ldr	r3, [fp, #-16]
   16110:	ldr	r3, [r3]
   16114:	cmp	r3, #0
   16118:	bne	160d4 <__assert_fail@plt+0x4f0c>
   1611c:	ldr	r3, [fp, #-8]
   16120:	add	r3, r3, #1
   16124:	mov	r0, r3
   16128:	sub	sp, fp, #4
   1612c:	ldr	fp, [sp]
   16130:	add	sp, sp, #4
   16134:	pop	{pc}		; (ldr pc, [sp], #4)
   16138:	str	fp, [sp, #-8]!
   1613c:	str	lr, [sp, #4]
   16140:	add	fp, sp, #4
   16144:	sub	sp, sp, #144	; 0x90
   16148:	str	r0, [fp, #-136]	; 0xffffff78
   1614c:	str	r1, [fp, #-140]	; 0xffffff74
   16150:	str	r2, [fp, #-144]	; 0xffffff70
   16154:	str	r3, [fp, #-148]	; 0xffffff6c
   16158:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1615c:	cmp	r3, #0
   16160:	beq	16188 <__assert_fail@plt+0x4fc0>
   16164:	movw	r1, #62156	; 0xf2cc
   16168:	movt	r1, #1
   1616c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16170:	bl	10ef8 <strcmp@plt>
   16174:	mov	r3, r0
   16178:	cmp	r3, #0
   1617c:	bne	16188 <__assert_fail@plt+0x4fc0>
   16180:	mov	r3, #1
   16184:	b	1618c <__assert_fail@plt+0x4fc4>
   16188:	mov	r3, #0
   1618c:	strb	r3, [fp, #-13]
   16190:	ldrb	r3, [fp, #-13]
   16194:	and	r3, r3, #1
   16198:	strb	r3, [fp, #-13]
   1619c:	ldr	r3, [fp, #-136]	; 0xffffff78
   161a0:	ldr	r3, [r3, #48]	; 0x30
   161a4:	and	r3, r3, #4
   161a8:	cmp	r3, #0
   161ac:	beq	161e0 <__assert_fail@plt+0x5018>
   161b0:	ldr	r3, [fp, #-136]	; 0xffffff78
   161b4:	ldr	r3, [r3, #48]	; 0x30
   161b8:	and	r3, r3, #512	; 0x200
   161bc:	cmp	r3, #0
   161c0:	beq	161d8 <__assert_fail@plt+0x5010>
   161c4:	ldr	r3, [fp, #-144]	; 0xffffff70
   161c8:	cmp	r3, #0
   161cc:	blt	161d8 <__assert_fail@plt+0x5010>
   161d0:	ldr	r0, [fp, #-144]	; 0xffffff70
   161d4:	bl	111a4 <close@plt>
   161d8:	mov	r3, #0
   161dc:	b	163e0 <__assert_fail@plt+0x5218>
   161e0:	ldr	r3, [fp, #-144]	; 0xffffff70
   161e4:	cmp	r3, #0
   161e8:	bge	16260 <__assert_fail@plt+0x5098>
   161ec:	ldrb	r3, [fp, #-13]
   161f0:	cmp	r3, #0
   161f4:	beq	16260 <__assert_fail@plt+0x5098>
   161f8:	ldr	r3, [fp, #-136]	; 0xffffff78
   161fc:	ldr	r3, [r3, #48]	; 0x30
   16200:	and	r3, r3, #512	; 0x200
   16204:	cmp	r3, #0
   16208:	beq	16260 <__assert_fail@plt+0x5098>
   1620c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16210:	add	r3, r3, #60	; 0x3c
   16214:	mov	r0, r3
   16218:	bl	180dc <__assert_fail@plt+0x6f14>
   1621c:	mov	r3, r0
   16220:	eor	r3, r3, #1
   16224:	uxtb	r3, r3
   16228:	cmp	r3, #0
   1622c:	beq	16260 <__assert_fail@plt+0x5098>
   16230:	ldr	r3, [fp, #-136]	; 0xffffff78
   16234:	add	r3, r3, #60	; 0x3c
   16238:	mov	r0, r3
   1623c:	bl	181c4 <__assert_fail@plt+0x6ffc>
   16240:	str	r0, [fp, #-20]	; 0xffffffec
   16244:	ldr	r3, [fp, #-20]	; 0xffffffec
   16248:	cmp	r3, #0
   1624c:	blt	16260 <__assert_fail@plt+0x5098>
   16250:	ldr	r3, [fp, #-20]	; 0xffffffec
   16254:	str	r3, [fp, #-144]	; 0xffffff70
   16258:	mov	r3, #0
   1625c:	str	r3, [fp, #-148]	; 0xffffff6c
   16260:	ldr	r3, [fp, #-144]	; 0xffffff70
   16264:	str	r3, [fp, #-12]
   16268:	ldr	r3, [fp, #-144]	; 0xffffff70
   1626c:	cmp	r3, #0
   16270:	bge	16298 <__assert_fail@plt+0x50d0>
   16274:	ldr	r1, [fp, #-148]	; 0xffffff6c
   16278:	ldr	r0, [fp, #-136]	; 0xffffff78
   1627c:	bl	13750 <__assert_fail@plt+0x2588>
   16280:	str	r0, [fp, #-12]
   16284:	ldr	r3, [fp, #-12]
   16288:	cmp	r3, #0
   1628c:	bge	16298 <__assert_fail@plt+0x50d0>
   16290:	mvn	r3, #0
   16294:	b	163e0 <__assert_fail@plt+0x5218>
   16298:	ldr	r3, [fp, #-136]	; 0xffffff78
   1629c:	ldr	r3, [r3, #48]	; 0x30
   162a0:	and	r3, r3, #2
   162a4:	cmp	r3, #0
   162a8:	bne	162d4 <__assert_fail@plt+0x510c>
   162ac:	ldr	r3, [fp, #-148]	; 0xffffff6c
   162b0:	cmp	r3, #0
   162b4:	beq	1634c <__assert_fail@plt+0x5184>
   162b8:	movw	r1, #62156	; 0xf2cc
   162bc:	movt	r1, #1
   162c0:	ldr	r0, [fp, #-148]	; 0xffffff6c
   162c4:	bl	10ef8 <strcmp@plt>
   162c8:	mov	r3, r0
   162cc:	cmp	r3, #0
   162d0:	bne	1634c <__assert_fail@plt+0x5184>
   162d4:	sub	r3, fp, #132	; 0x84
   162d8:	mov	r1, r3
   162dc:	ldr	r0, [fp, #-12]
   162e0:	bl	1e78c <__assert_fail@plt+0xd5c4>
   162e4:	mov	r3, r0
   162e8:	cmp	r3, #0
   162ec:	beq	162fc <__assert_fail@plt+0x5134>
   162f0:	mvn	r3, #0
   162f4:	str	r3, [fp, #-8]
   162f8:	b	163a8 <__assert_fail@plt+0x51e0>
   162fc:	ldr	r3, [fp, #-140]	; 0xffffff74
   16300:	ldrd	r0, [r3, #64]	; 0x40
   16304:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   16308:	cmp	r1, r3
   1630c:	cmpeq	r0, r2
   16310:	bne	1632c <__assert_fail@plt+0x5164>
   16314:	ldr	r3, [fp, #-140]	; 0xffffff74
   16318:	ldrd	r0, [r3, #160]	; 0xa0
   1631c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16320:	cmp	r1, r3
   16324:	cmpeq	r0, r2
   16328:	beq	1634c <__assert_fail@plt+0x5184>
   1632c:	bl	1109c <__errno_location@plt>
   16330:	mov	r2, r0
   16334:	mov	r3, #2
   16338:	str	r3, [r2]
   1633c:	mvn	r3, #0
   16340:	str	r3, [fp, #-8]
   16344:	nop	{0}
   16348:	b	163a8 <__assert_fail@plt+0x51e0>
   1634c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16350:	ldr	r3, [r3, #48]	; 0x30
   16354:	and	r3, r3, #512	; 0x200
   16358:	cmp	r3, #0
   1635c:	beq	1639c <__assert_fail@plt+0x51d4>
   16360:	ldrb	r3, [fp, #-13]
   16364:	cmp	r3, #0
   16368:	movne	r3, #1
   1636c:	moveq	r3, #0
   16370:	uxtb	r3, r3
   16374:	eor	r3, r3, #1
   16378:	uxtb	r3, r3
   1637c:	and	r3, r3, #1
   16380:	uxtb	r3, r3
   16384:	mov	r2, r3
   16388:	ldr	r1, [fp, #-12]
   1638c:	ldr	r0, [fp, #-136]	; 0xffffff78
   16390:	bl	1359c <__assert_fail@plt+0x23d4>
   16394:	mov	r3, #0
   16398:	b	163e0 <__assert_fail@plt+0x5218>
   1639c:	ldr	r0, [fp, #-12]
   163a0:	bl	11144 <fchdir@plt>
   163a4:	str	r0, [fp, #-8]
   163a8:	ldr	r3, [fp, #-144]	; 0xffffff70
   163ac:	cmp	r3, #0
   163b0:	bge	163dc <__assert_fail@plt+0x5214>
   163b4:	bl	1109c <__errno_location@plt>
   163b8:	mov	r3, r0
   163bc:	ldr	r3, [r3]
   163c0:	str	r3, [fp, #-24]	; 0xffffffe8
   163c4:	ldr	r0, [fp, #-12]
   163c8:	bl	111a4 <close@plt>
   163cc:	bl	1109c <__errno_location@plt>
   163d0:	mov	r2, r0
   163d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163d8:	str	r3, [r2]
   163dc:	ldr	r3, [fp, #-8]
   163e0:	mov	r0, r3
   163e4:	sub	sp, fp, #4
   163e8:	ldr	fp, [sp]
   163ec:	add	sp, sp, #4
   163f0:	pop	{pc}		; (ldr pc, [sp], #4)
   163f4:	andeq	r0, r0, r0
   163f8:	push	{fp}		; (str fp, [sp, #-4]!)
   163fc:	add	fp, sp, #0
   16400:	sub	sp, sp, #12
   16404:	str	r0, [fp, #-8]
   16408:	ldr	r3, [fp, #-8]
   1640c:	ldr	r3, [r3, #8]
   16410:	mov	r0, r3
   16414:	add	sp, fp, #0
   16418:	pop	{fp}		; (ldr fp, [sp], #4)
   1641c:	bx	lr
   16420:	push	{fp}		; (str fp, [sp, #-4]!)
   16424:	add	fp, sp, #0
   16428:	sub	sp, sp, #12
   1642c:	str	r0, [fp, #-8]
   16430:	ldr	r3, [fp, #-8]
   16434:	ldr	r3, [r3, #12]
   16438:	mov	r0, r3
   1643c:	add	sp, fp, #0
   16440:	pop	{fp}		; (ldr fp, [sp], #4)
   16444:	bx	lr
   16448:	push	{fp}		; (str fp, [sp, #-4]!)
   1644c:	add	fp, sp, #0
   16450:	sub	sp, sp, #12
   16454:	str	r0, [fp, #-8]
   16458:	ldr	r3, [fp, #-8]
   1645c:	ldr	r3, [r3, #16]
   16460:	mov	r0, r3
   16464:	add	sp, fp, #0
   16468:	pop	{fp}		; (ldr fp, [sp], #4)
   1646c:	bx	lr
   16470:	push	{fp}		; (str fp, [sp, #-4]!)
   16474:	add	fp, sp, #0
   16478:	sub	sp, sp, #28
   1647c:	str	r0, [fp, #-24]	; 0xffffffe8
   16480:	mov	r3, #0
   16484:	str	r3, [fp, #-12]
   16488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1648c:	ldr	r3, [r3]
   16490:	str	r3, [fp, #-8]
   16494:	b	16504 <__assert_fail@plt+0x533c>
   16498:	ldr	r3, [fp, #-8]
   1649c:	ldr	r3, [r3]
   164a0:	cmp	r3, #0
   164a4:	beq	164f8 <__assert_fail@plt+0x5330>
   164a8:	ldr	r3, [fp, #-8]
   164ac:	str	r3, [fp, #-16]
   164b0:	mov	r3, #1
   164b4:	str	r3, [fp, #-20]	; 0xffffffec
   164b8:	b	164c8 <__assert_fail@plt+0x5300>
   164bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   164c0:	add	r3, r3, #1
   164c4:	str	r3, [fp, #-20]	; 0xffffffec
   164c8:	ldr	r3, [fp, #-16]
   164cc:	ldr	r3, [r3, #4]
   164d0:	str	r3, [fp, #-16]
   164d4:	ldr	r3, [fp, #-16]
   164d8:	cmp	r3, #0
   164dc:	bne	164bc <__assert_fail@plt+0x52f4>
   164e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   164e4:	ldr	r3, [fp, #-12]
   164e8:	cmp	r2, r3
   164ec:	bls	164f8 <__assert_fail@plt+0x5330>
   164f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164f4:	str	r3, [fp, #-12]
   164f8:	ldr	r3, [fp, #-8]
   164fc:	add	r3, r3, #8
   16500:	str	r3, [fp, #-8]
   16504:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16508:	ldr	r3, [r3, #4]
   1650c:	ldr	r2, [fp, #-8]
   16510:	cmp	r2, r3
   16514:	bcc	16498 <__assert_fail@plt+0x52d0>
   16518:	ldr	r3, [fp, #-12]
   1651c:	mov	r0, r3
   16520:	add	sp, fp, #0
   16524:	pop	{fp}		; (ldr fp, [sp], #4)
   16528:	bx	lr
   1652c:	push	{fp}		; (str fp, [sp, #-4]!)
   16530:	add	fp, sp, #0
   16534:	sub	sp, sp, #28
   16538:	str	r0, [fp, #-24]	; 0xffffffe8
   1653c:	mov	r3, #0
   16540:	str	r3, [fp, #-12]
   16544:	mov	r3, #0
   16548:	str	r3, [fp, #-16]
   1654c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16550:	ldr	r3, [r3]
   16554:	str	r3, [fp, #-8]
   16558:	b	165c0 <__assert_fail@plt+0x53f8>
   1655c:	ldr	r3, [fp, #-8]
   16560:	ldr	r3, [r3]
   16564:	cmp	r3, #0
   16568:	beq	165b4 <__assert_fail@plt+0x53ec>
   1656c:	ldr	r3, [fp, #-8]
   16570:	str	r3, [fp, #-20]	; 0xffffffec
   16574:	ldr	r3, [fp, #-12]
   16578:	add	r3, r3, #1
   1657c:	str	r3, [fp, #-12]
   16580:	ldr	r3, [fp, #-16]
   16584:	add	r3, r3, #1
   16588:	str	r3, [fp, #-16]
   1658c:	b	1659c <__assert_fail@plt+0x53d4>
   16590:	ldr	r3, [fp, #-16]
   16594:	add	r3, r3, #1
   16598:	str	r3, [fp, #-16]
   1659c:	ldr	r3, [fp, #-20]	; 0xffffffec
   165a0:	ldr	r3, [r3, #4]
   165a4:	str	r3, [fp, #-20]	; 0xffffffec
   165a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   165ac:	cmp	r3, #0
   165b0:	bne	16590 <__assert_fail@plt+0x53c8>
   165b4:	ldr	r3, [fp, #-8]
   165b8:	add	r3, r3, #8
   165bc:	str	r3, [fp, #-8]
   165c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165c4:	ldr	r3, [r3, #4]
   165c8:	ldr	r2, [fp, #-8]
   165cc:	cmp	r2, r3
   165d0:	bcc	1655c <__assert_fail@plt+0x5394>
   165d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165d8:	ldr	r3, [r3, #12]
   165dc:	ldr	r2, [fp, #-12]
   165e0:	cmp	r2, r3
   165e4:	bne	16604 <__assert_fail@plt+0x543c>
   165e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165ec:	ldr	r3, [r3, #16]
   165f0:	ldr	r2, [fp, #-16]
   165f4:	cmp	r2, r3
   165f8:	bne	16604 <__assert_fail@plt+0x543c>
   165fc:	mov	r3, #1
   16600:	b	16608 <__assert_fail@plt+0x5440>
   16604:	mov	r3, #0
   16608:	mov	r0, r3
   1660c:	add	sp, fp, #0
   16610:	pop	{fp}		; (ldr fp, [sp], #4)
   16614:	bx	lr
   16618:	str	fp, [sp, #-8]!
   1661c:	str	lr, [sp, #4]
   16620:	add	fp, sp, #4
   16624:	sub	sp, sp, #32
   16628:	str	r0, [fp, #-24]	; 0xffffffe8
   1662c:	str	r1, [fp, #-28]	; 0xffffffe4
   16630:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16634:	bl	16448 <__assert_fail@plt+0x5280>
   16638:	str	r0, [fp, #-8]
   1663c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16640:	bl	163f8 <__assert_fail@plt+0x5230>
   16644:	str	r0, [fp, #-12]
   16648:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1664c:	bl	16420 <__assert_fail@plt+0x5258>
   16650:	str	r0, [fp, #-16]
   16654:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16658:	bl	16470 <__assert_fail@plt+0x52a8>
   1665c:	str	r0, [fp, #-20]	; 0xffffffec
   16660:	ldr	r2, [fp, #-8]
   16664:	movw	r1, #62180	; 0xf2e4
   16668:	movt	r1, #1
   1666c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16670:	bl	11084 <fprintf@plt>
   16674:	ldr	r2, [fp, #-12]
   16678:	movw	r1, #62204	; 0xf2fc
   1667c:	movt	r1, #1
   16680:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16684:	bl	11084 <fprintf@plt>
   16688:	ldr	r3, [fp, #-16]
   1668c:	vmov	s15, r3
   16690:	vcvt.f64.u32	d7, s15
   16694:	vldr	d6, [pc, #84]	; 166f0 <__assert_fail@plt+0x5528>
   16698:	vmul.f64	d5, d7, d6
   1669c:	ldr	r3, [fp, #-12]
   166a0:	vmov	s15, r3
   166a4:	vcvt.f64.u32	d6, s15
   166a8:	vdiv.f64	d7, d5, d6
   166ac:	vstr	d7, [sp]
   166b0:	ldr	r2, [fp, #-16]
   166b4:	movw	r1, #62228	; 0xf314
   166b8:	movt	r1, #1
   166bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   166c0:	bl	11084 <fprintf@plt>
   166c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   166c8:	movw	r1, #62264	; 0xf338
   166cc:	movt	r1, #1
   166d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   166d4:	bl	11084 <fprintf@plt>
   166d8:	nop	{0}
   166dc:	sub	sp, fp, #4
   166e0:	ldr	fp, [sp]
   166e4:	add	sp, sp, #4
   166e8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ec:	nop	{0}
   166f0:	andeq	r0, r0, r0
   166f4:	subsmi	r0, r9, r0
   166f8:	str	fp, [sp, #-8]!
   166fc:	str	lr, [sp, #4]
   16700:	add	fp, sp, #4
   16704:	sub	sp, sp, #16
   16708:	str	r0, [fp, #-16]
   1670c:	str	r1, [fp, #-20]	; 0xffffffec
   16710:	ldr	r3, [fp, #-16]
   16714:	ldr	r3, [r3, #24]
   16718:	ldr	r2, [fp, #-16]
   1671c:	ldr	r2, [r2, #8]
   16720:	mov	r1, r2
   16724:	ldr	r0, [fp, #-20]	; 0xffffffec
   16728:	blx	r3
   1672c:	str	r0, [fp, #-8]
   16730:	ldr	r3, [fp, #-16]
   16734:	ldr	r3, [r3, #8]
   16738:	ldr	r2, [fp, #-8]
   1673c:	cmp	r2, r3
   16740:	bcc	16748 <__assert_fail@plt+0x5580>
   16744:	bl	11198 <abort@plt>
   16748:	ldr	r3, [fp, #-16]
   1674c:	ldr	r2, [r3]
   16750:	ldr	r3, [fp, #-8]
   16754:	lsl	r3, r3, #3
   16758:	add	r3, r2, r3
   1675c:	mov	r0, r3
   16760:	sub	sp, fp, #4
   16764:	ldr	fp, [sp]
   16768:	add	sp, sp, #4
   1676c:	pop	{pc}		; (ldr pc, [sp], #4)
   16770:	str	fp, [sp, #-8]!
   16774:	str	lr, [sp, #4]
   16778:	add	fp, sp, #4
   1677c:	sub	sp, sp, #16
   16780:	str	r0, [fp, #-16]
   16784:	str	r1, [fp, #-20]	; 0xffffffec
   16788:	ldr	r1, [fp, #-20]	; 0xffffffec
   1678c:	ldr	r0, [fp, #-16]
   16790:	bl	166f8 <__assert_fail@plt+0x5530>
   16794:	str	r0, [fp, #-12]
   16798:	ldr	r3, [fp, #-12]
   1679c:	ldr	r3, [r3]
   167a0:	cmp	r3, #0
   167a4:	bne	167b0 <__assert_fail@plt+0x55e8>
   167a8:	mov	r3, #0
   167ac:	b	16820 <__assert_fail@plt+0x5658>
   167b0:	ldr	r3, [fp, #-12]
   167b4:	str	r3, [fp, #-8]
   167b8:	b	16810 <__assert_fail@plt+0x5648>
   167bc:	ldr	r3, [fp, #-8]
   167c0:	ldr	r3, [r3]
   167c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   167c8:	cmp	r2, r3
   167cc:	beq	167f8 <__assert_fail@plt+0x5630>
   167d0:	ldr	r3, [fp, #-16]
   167d4:	ldr	r3, [r3, #28]
   167d8:	ldr	r2, [fp, #-8]
   167dc:	ldr	r2, [r2]
   167e0:	mov	r1, r2
   167e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   167e8:	blx	r3
   167ec:	mov	r3, r0
   167f0:	cmp	r3, #0
   167f4:	beq	16804 <__assert_fail@plt+0x563c>
   167f8:	ldr	r3, [fp, #-8]
   167fc:	ldr	r3, [r3]
   16800:	b	16820 <__assert_fail@plt+0x5658>
   16804:	ldr	r3, [fp, #-8]
   16808:	ldr	r3, [r3, #4]
   1680c:	str	r3, [fp, #-8]
   16810:	ldr	r3, [fp, #-8]
   16814:	cmp	r3, #0
   16818:	bne	167bc <__assert_fail@plt+0x55f4>
   1681c:	mov	r3, #0
   16820:	mov	r0, r3
   16824:	sub	sp, fp, #4
   16828:	ldr	fp, [sp]
   1682c:	add	sp, sp, #4
   16830:	pop	{pc}		; (ldr pc, [sp], #4)
   16834:	str	fp, [sp, #-8]!
   16838:	str	lr, [sp, #4]
   1683c:	add	fp, sp, #4
   16840:	sub	sp, sp, #16
   16844:	str	r0, [fp, #-16]
   16848:	ldr	r3, [fp, #-16]
   1684c:	ldr	r3, [r3, #16]
   16850:	cmp	r3, #0
   16854:	bne	16860 <__assert_fail@plt+0x5698>
   16858:	mov	r3, #0
   1685c:	b	168b0 <__assert_fail@plt+0x56e8>
   16860:	ldr	r3, [fp, #-16]
   16864:	ldr	r3, [r3]
   16868:	str	r3, [fp, #-8]
   1686c:	ldr	r3, [fp, #-16]
   16870:	ldr	r3, [r3, #4]
   16874:	ldr	r2, [fp, #-8]
   16878:	cmp	r2, r3
   1687c:	bcc	16884 <__assert_fail@plt+0x56bc>
   16880:	bl	11198 <abort@plt>
   16884:	ldr	r3, [fp, #-8]
   16888:	ldr	r3, [r3]
   1688c:	cmp	r3, #0
   16890:	beq	168a0 <__assert_fail@plt+0x56d8>
   16894:	ldr	r3, [fp, #-8]
   16898:	ldr	r3, [r3]
   1689c:	b	168b0 <__assert_fail@plt+0x56e8>
   168a0:	ldr	r3, [fp, #-8]
   168a4:	add	r3, r3, #8
   168a8:	str	r3, [fp, #-8]
   168ac:	b	1686c <__assert_fail@plt+0x56a4>
   168b0:	mov	r0, r3
   168b4:	sub	sp, fp, #4
   168b8:	ldr	fp, [sp]
   168bc:	add	sp, sp, #4
   168c0:	pop	{pc}		; (ldr pc, [sp], #4)
   168c4:	str	fp, [sp, #-8]!
   168c8:	str	lr, [sp, #4]
   168cc:	add	fp, sp, #4
   168d0:	sub	sp, sp, #16
   168d4:	str	r0, [fp, #-16]
   168d8:	str	r1, [fp, #-20]	; 0xffffffec
   168dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   168e0:	ldr	r0, [fp, #-16]
   168e4:	bl	166f8 <__assert_fail@plt+0x5530>
   168e8:	str	r0, [fp, #-8]
   168ec:	ldr	r3, [fp, #-8]
   168f0:	str	r3, [fp, #-12]
   168f4:	ldr	r3, [fp, #-12]
   168f8:	ldr	r3, [r3]
   168fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   16900:	cmp	r2, r3
   16904:	bne	16928 <__assert_fail@plt+0x5760>
   16908:	ldr	r3, [fp, #-12]
   1690c:	ldr	r3, [r3, #4]
   16910:	cmp	r3, #0
   16914:	beq	16928 <__assert_fail@plt+0x5760>
   16918:	ldr	r3, [fp, #-12]
   1691c:	ldr	r3, [r3, #4]
   16920:	ldr	r3, [r3]
   16924:	b	16984 <__assert_fail@plt+0x57bc>
   16928:	ldr	r3, [fp, #-12]
   1692c:	ldr	r3, [r3, #4]
   16930:	str	r3, [fp, #-12]
   16934:	ldr	r3, [fp, #-12]
   16938:	cmp	r3, #0
   1693c:	bne	168f4 <__assert_fail@plt+0x572c>
   16940:	b	16960 <__assert_fail@plt+0x5798>
   16944:	ldr	r3, [fp, #-8]
   16948:	ldr	r3, [r3]
   1694c:	cmp	r3, #0
   16950:	beq	16960 <__assert_fail@plt+0x5798>
   16954:	ldr	r3, [fp, #-8]
   16958:	ldr	r3, [r3]
   1695c:	b	16984 <__assert_fail@plt+0x57bc>
   16960:	ldr	r3, [fp, #-8]
   16964:	add	r3, r3, #8
   16968:	str	r3, [fp, #-8]
   1696c:	ldr	r3, [fp, #-16]
   16970:	ldr	r3, [r3, #4]
   16974:	ldr	r2, [fp, #-8]
   16978:	cmp	r2, r3
   1697c:	bcc	16944 <__assert_fail@plt+0x577c>
   16980:	mov	r3, #0
   16984:	mov	r0, r3
   16988:	sub	sp, fp, #4
   1698c:	ldr	fp, [sp]
   16990:	add	sp, sp, #4
   16994:	pop	{pc}		; (ldr pc, [sp], #4)
   16998:	push	{fp}		; (str fp, [sp, #-4]!)
   1699c:	add	fp, sp, #0
   169a0:	sub	sp, sp, #36	; 0x24
   169a4:	str	r0, [fp, #-24]	; 0xffffffe8
   169a8:	str	r1, [fp, #-28]	; 0xffffffe4
   169ac:	str	r2, [fp, #-32]	; 0xffffffe0
   169b0:	mov	r3, #0
   169b4:	str	r3, [fp, #-8]
   169b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169bc:	ldr	r3, [r3]
   169c0:	str	r3, [fp, #-12]
   169c4:	b	16a44 <__assert_fail@plt+0x587c>
   169c8:	ldr	r3, [fp, #-12]
   169cc:	ldr	r3, [r3]
   169d0:	cmp	r3, #0
   169d4:	beq	16a38 <__assert_fail@plt+0x5870>
   169d8:	ldr	r3, [fp, #-12]
   169dc:	str	r3, [fp, #-16]
   169e0:	b	16a2c <__assert_fail@plt+0x5864>
   169e4:	ldr	r2, [fp, #-8]
   169e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   169ec:	cmp	r2, r3
   169f0:	bcc	169fc <__assert_fail@plt+0x5834>
   169f4:	ldr	r3, [fp, #-8]
   169f8:	b	16a5c <__assert_fail@plt+0x5894>
   169fc:	ldr	r3, [fp, #-8]
   16a00:	add	r2, r3, #1
   16a04:	str	r2, [fp, #-8]
   16a08:	lsl	r3, r3, #2
   16a0c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16a10:	add	r3, r2, r3
   16a14:	ldr	r2, [fp, #-16]
   16a18:	ldr	r2, [r2]
   16a1c:	str	r2, [r3]
   16a20:	ldr	r3, [fp, #-16]
   16a24:	ldr	r3, [r3, #4]
   16a28:	str	r3, [fp, #-16]
   16a2c:	ldr	r3, [fp, #-16]
   16a30:	cmp	r3, #0
   16a34:	bne	169e4 <__assert_fail@plt+0x581c>
   16a38:	ldr	r3, [fp, #-12]
   16a3c:	add	r3, r3, #8
   16a40:	str	r3, [fp, #-12]
   16a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a48:	ldr	r3, [r3, #4]
   16a4c:	ldr	r2, [fp, #-12]
   16a50:	cmp	r2, r3
   16a54:	bcc	169c8 <__assert_fail@plt+0x5800>
   16a58:	ldr	r3, [fp, #-8]
   16a5c:	mov	r0, r3
   16a60:	add	sp, fp, #0
   16a64:	pop	{fp}		; (ldr fp, [sp], #4)
   16a68:	bx	lr
   16a6c:	str	fp, [sp, #-8]!
   16a70:	str	lr, [sp, #4]
   16a74:	add	fp, sp, #4
   16a78:	sub	sp, sp, #32
   16a7c:	str	r0, [fp, #-24]	; 0xffffffe8
   16a80:	str	r1, [fp, #-28]	; 0xffffffe4
   16a84:	str	r2, [fp, #-32]	; 0xffffffe0
   16a88:	mov	r3, #0
   16a8c:	str	r3, [fp, #-8]
   16a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a94:	ldr	r3, [r3]
   16a98:	str	r3, [fp, #-12]
   16a9c:	b	16b20 <__assert_fail@plt+0x5958>
   16aa0:	ldr	r3, [fp, #-12]
   16aa4:	ldr	r3, [r3]
   16aa8:	cmp	r3, #0
   16aac:	beq	16b14 <__assert_fail@plt+0x594c>
   16ab0:	ldr	r3, [fp, #-12]
   16ab4:	str	r3, [fp, #-16]
   16ab8:	b	16b08 <__assert_fail@plt+0x5940>
   16abc:	ldr	r3, [fp, #-16]
   16ac0:	ldr	r2, [r3]
   16ac4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ac8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16acc:	mov	r0, r2
   16ad0:	blx	r3
   16ad4:	mov	r3, r0
   16ad8:	eor	r3, r3, #1
   16adc:	uxtb	r3, r3
   16ae0:	cmp	r3, #0
   16ae4:	beq	16af0 <__assert_fail@plt+0x5928>
   16ae8:	ldr	r3, [fp, #-8]
   16aec:	b	16b38 <__assert_fail@plt+0x5970>
   16af0:	ldr	r3, [fp, #-8]
   16af4:	add	r3, r3, #1
   16af8:	str	r3, [fp, #-8]
   16afc:	ldr	r3, [fp, #-16]
   16b00:	ldr	r3, [r3, #4]
   16b04:	str	r3, [fp, #-16]
   16b08:	ldr	r3, [fp, #-16]
   16b0c:	cmp	r3, #0
   16b10:	bne	16abc <__assert_fail@plt+0x58f4>
   16b14:	ldr	r3, [fp, #-12]
   16b18:	add	r3, r3, #8
   16b1c:	str	r3, [fp, #-12]
   16b20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b24:	ldr	r3, [r3, #4]
   16b28:	ldr	r2, [fp, #-12]
   16b2c:	cmp	r2, r3
   16b30:	bcc	16aa0 <__assert_fail@plt+0x58d8>
   16b34:	ldr	r3, [fp, #-8]
   16b38:	mov	r0, r3
   16b3c:	sub	sp, fp, #4
   16b40:	ldr	fp, [sp]
   16b44:	add	sp, sp, #4
   16b48:	pop	{pc}		; (ldr pc, [sp], #4)
   16b4c:	push	{fp}		; (str fp, [sp, #-4]!)
   16b50:	add	fp, sp, #0
   16b54:	sub	sp, sp, #20
   16b58:	str	r0, [fp, #-16]
   16b5c:	str	r1, [fp, #-20]	; 0xffffffec
   16b60:	mov	r3, #0
   16b64:	str	r3, [fp, #-8]
   16b68:	b	16ba8 <__assert_fail@plt+0x59e0>
   16b6c:	ldr	r2, [fp, #-8]
   16b70:	mov	r3, r2
   16b74:	lsl	r3, r3, #5
   16b78:	sub	r2, r3, r2
   16b7c:	ldrb	r3, [fp, #-9]
   16b80:	add	r3, r2, r3
   16b84:	ldr	r2, [fp, #-20]	; 0xffffffec
   16b88:	udiv	r2, r3, r2
   16b8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16b90:	mul	r2, r1, r2
   16b94:	sub	r3, r3, r2
   16b98:	str	r3, [fp, #-8]
   16b9c:	ldr	r3, [fp, #-16]
   16ba0:	add	r3, r3, #1
   16ba4:	str	r3, [fp, #-16]
   16ba8:	ldr	r3, [fp, #-16]
   16bac:	ldrb	r3, [r3]
   16bb0:	strb	r3, [fp, #-9]
   16bb4:	ldrb	r3, [fp, #-9]
   16bb8:	cmp	r3, #0
   16bbc:	bne	16b6c <__assert_fail@plt+0x59a4>
   16bc0:	ldr	r3, [fp, #-8]
   16bc4:	mov	r0, r3
   16bc8:	add	sp, fp, #0
   16bcc:	pop	{fp}		; (ldr fp, [sp], #4)
   16bd0:	bx	lr
   16bd4:	push	{fp}		; (str fp, [sp, #-4]!)
   16bd8:	add	fp, sp, #0
   16bdc:	sub	sp, sp, #20
   16be0:	str	r0, [fp, #-16]
   16be4:	mov	r3, #3
   16be8:	str	r3, [fp, #-8]
   16bec:	ldr	r3, [fp, #-8]
   16bf0:	ldr	r2, [fp, #-8]
   16bf4:	mul	r3, r2, r3
   16bf8:	str	r3, [fp, #-12]
   16bfc:	b	16c2c <__assert_fail@plt+0x5a64>
   16c00:	ldr	r3, [fp, #-8]
   16c04:	add	r3, r3, #1
   16c08:	str	r3, [fp, #-8]
   16c0c:	ldr	r3, [fp, #-8]
   16c10:	lsl	r3, r3, #2
   16c14:	ldr	r2, [fp, #-12]
   16c18:	add	r3, r2, r3
   16c1c:	str	r3, [fp, #-12]
   16c20:	ldr	r3, [fp, #-8]
   16c24:	add	r3, r3, #1
   16c28:	str	r3, [fp, #-8]
   16c2c:	ldr	r2, [fp, #-12]
   16c30:	ldr	r3, [fp, #-16]
   16c34:	cmp	r2, r3
   16c38:	bcs	16c5c <__assert_fail@plt+0x5a94>
   16c3c:	ldr	r3, [fp, #-16]
   16c40:	ldr	r2, [fp, #-8]
   16c44:	udiv	r2, r3, r2
   16c48:	ldr	r1, [fp, #-8]
   16c4c:	mul	r2, r1, r2
   16c50:	sub	r3, r3, r2
   16c54:	cmp	r3, #0
   16c58:	bne	16c00 <__assert_fail@plt+0x5a38>
   16c5c:	ldr	r3, [fp, #-16]
   16c60:	ldr	r2, [fp, #-8]
   16c64:	udiv	r2, r3, r2
   16c68:	ldr	r1, [fp, #-8]
   16c6c:	mul	r2, r1, r2
   16c70:	sub	r3, r3, r2
   16c74:	cmp	r3, #0
   16c78:	movne	r3, #1
   16c7c:	moveq	r3, #0
   16c80:	uxtb	r3, r3
   16c84:	mov	r0, r3
   16c88:	add	sp, fp, #0
   16c8c:	pop	{fp}		; (ldr fp, [sp], #4)
   16c90:	bx	lr
   16c94:	str	fp, [sp, #-8]!
   16c98:	str	lr, [sp, #4]
   16c9c:	add	fp, sp, #4
   16ca0:	sub	sp, sp, #8
   16ca4:	str	r0, [fp, #-8]
   16ca8:	ldr	r3, [fp, #-8]
   16cac:	cmp	r3, #9
   16cb0:	bhi	16cbc <__assert_fail@plt+0x5af4>
   16cb4:	mov	r3, #10
   16cb8:	str	r3, [fp, #-8]
   16cbc:	ldr	r3, [fp, #-8]
   16cc0:	orr	r3, r3, #1
   16cc4:	str	r3, [fp, #-8]
   16cc8:	b	16cd8 <__assert_fail@plt+0x5b10>
   16ccc:	ldr	r3, [fp, #-8]
   16cd0:	add	r3, r3, #2
   16cd4:	str	r3, [fp, #-8]
   16cd8:	ldr	r3, [fp, #-8]
   16cdc:	cmn	r3, #1
   16ce0:	beq	16d00 <__assert_fail@plt+0x5b38>
   16ce4:	ldr	r0, [fp, #-8]
   16ce8:	bl	16bd4 <__assert_fail@plt+0x5a0c>
   16cec:	mov	r3, r0
   16cf0:	eor	r3, r3, #1
   16cf4:	uxtb	r3, r3
   16cf8:	cmp	r3, #0
   16cfc:	bne	16ccc <__assert_fail@plt+0x5b04>
   16d00:	ldr	r3, [fp, #-8]
   16d04:	mov	r0, r3
   16d08:	sub	sp, fp, #4
   16d0c:	ldr	fp, [sp]
   16d10:	add	sp, sp, #4
   16d14:	pop	{pc}		; (ldr pc, [sp], #4)
   16d18:	push	{fp}		; (str fp, [sp, #-4]!)
   16d1c:	add	fp, sp, #0
   16d20:	sub	sp, sp, #12
   16d24:	str	r0, [fp, #-8]
   16d28:	ldr	r3, [fp, #-8]
   16d2c:	movw	r2, #62160	; 0xf2d0
   16d30:	movt	r2, #1
   16d34:	ldrd	r0, [r2]
   16d38:	strd	r0, [r3]
   16d3c:	ldrd	r0, [r2, #8]
   16d40:	strd	r0, [r3, #8]
   16d44:	ldr	r2, [r2, #16]
   16d48:	str	r2, [r3, #16]
   16d4c:	nop	{0}
   16d50:	add	sp, fp, #0
   16d54:	pop	{fp}		; (ldr fp, [sp], #4)
   16d58:	bx	lr
   16d5c:	str	fp, [sp, #-8]!
   16d60:	str	lr, [sp, #4]
   16d64:	add	fp, sp, #4
   16d68:	sub	sp, sp, #16
   16d6c:	str	r0, [fp, #-16]
   16d70:	str	r1, [fp, #-20]	; 0xffffffec
   16d74:	ldr	r3, [fp, #-16]
   16d78:	mov	r1, #3
   16d7c:	mov	r0, r3
   16d80:	bl	1ce10 <__assert_fail@plt+0xbc48>
   16d84:	str	r0, [fp, #-8]
   16d88:	ldr	r3, [fp, #-8]
   16d8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d90:	udiv	r2, r3, r2
   16d94:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d98:	mul	r2, r1, r2
   16d9c:	sub	r3, r3, r2
   16da0:	mov	r0, r3
   16da4:	sub	sp, fp, #4
   16da8:	ldr	fp, [sp]
   16dac:	add	sp, sp, #4
   16db0:	pop	{pc}		; (ldr pc, [sp], #4)
   16db4:	push	{fp}		; (str fp, [sp, #-4]!)
   16db8:	add	fp, sp, #0
   16dbc:	sub	sp, sp, #12
   16dc0:	str	r0, [fp, #-8]
   16dc4:	str	r1, [fp, #-12]
   16dc8:	ldr	r2, [fp, #-8]
   16dcc:	ldr	r3, [fp, #-12]
   16dd0:	cmp	r2, r3
   16dd4:	moveq	r3, #1
   16dd8:	movne	r3, #0
   16ddc:	uxtb	r3, r3
   16de0:	mov	r0, r3
   16de4:	add	sp, fp, #0
   16de8:	pop	{fp}		; (ldr fp, [sp], #4)
   16dec:	bx	lr
   16df0:	push	{fp}		; (str fp, [sp, #-4]!)
   16df4:	add	fp, sp, #0
   16df8:	sub	sp, sp, #20
   16dfc:	str	r0, [fp, #-16]
   16e00:	ldr	r3, [fp, #-16]
   16e04:	ldr	r3, [r3, #20]
   16e08:	str	r3, [fp, #-8]
   16e0c:	ldr	r2, [fp, #-8]
   16e10:	movw	r3, #62160	; 0xf2d0
   16e14:	movt	r3, #1
   16e18:	cmp	r2, r3
   16e1c:	bne	16e28 <__assert_fail@plt+0x5c60>
   16e20:	mov	r3, #1
   16e24:	b	16f1c <__assert_fail@plt+0x5d54>
   16e28:	movw	r3, #52429	; 0xcccd
   16e2c:	movt	r3, #15820	; 0x3dcc
   16e30:	str	r3, [fp, #-12]
   16e34:	ldr	r3, [fp, #-8]
   16e38:	vldr	s15, [r3, #8]
   16e3c:	vldr	s14, [fp, #-12]
   16e40:	vcmpe.f32	s14, s15
   16e44:	vmrs	APSR_nzcv, fpscr
   16e48:	bpl	16f08 <__assert_fail@plt+0x5d40>
   16e4c:	ldr	r3, [fp, #-8]
   16e50:	vldr	s14, [r3, #8]
   16e54:	vldr	s13, [pc, #208]	; 16f2c <__assert_fail@plt+0x5d64>
   16e58:	vldr	s15, [fp, #-12]
   16e5c:	vsub.f32	s15, s13, s15
   16e60:	vcmpe.f32	s14, s15
   16e64:	vmrs	APSR_nzcv, fpscr
   16e68:	bpl	16f08 <__assert_fail@plt+0x5d40>
   16e6c:	vldr	s15, [fp, #-12]
   16e70:	vldr	s14, [pc, #180]	; 16f2c <__assert_fail@plt+0x5d64>
   16e74:	vadd.f32	s14, s15, s14
   16e78:	ldr	r3, [fp, #-8]
   16e7c:	vldr	s15, [r3, #12]
   16e80:	vcmpe.f32	s14, s15
   16e84:	vmrs	APSR_nzcv, fpscr
   16e88:	bpl	16f08 <__assert_fail@plt+0x5d40>
   16e8c:	ldr	r3, [fp, #-8]
   16e90:	vldr	s15, [r3]
   16e94:	vcmpe.f32	s15, #0.0
   16e98:	vmrs	APSR_nzcv, fpscr
   16e9c:	blt	16f08 <__assert_fail@plt+0x5d40>
   16ea0:	ldr	r3, [fp, #-8]
   16ea4:	vldr	s14, [r3]
   16ea8:	vldr	s15, [fp, #-12]
   16eac:	vadd.f32	s14, s14, s15
   16eb0:	ldr	r3, [fp, #-8]
   16eb4:	vldr	s15, [r3, #4]
   16eb8:	vcmpe.f32	s14, s15
   16ebc:	vmrs	APSR_nzcv, fpscr
   16ec0:	bpl	16f08 <__assert_fail@plt+0x5d40>
   16ec4:	ldr	r3, [fp, #-8]
   16ec8:	vldr	s15, [r3, #4]
   16ecc:	vldr	s14, [pc, #88]	; 16f2c <__assert_fail@plt+0x5d64>
   16ed0:	vcmpe.f32	s15, s14
   16ed4:	vmrs	APSR_nzcv, fpscr
   16ed8:	bhi	16f08 <__assert_fail@plt+0x5d40>
   16edc:	ldr	r3, [fp, #-8]
   16ee0:	vldr	s14, [r3]
   16ee4:	vldr	s15, [fp, #-12]
   16ee8:	vadd.f32	s14, s14, s15
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	vldr	s15, [r3, #8]
   16ef4:	vcmpe.f32	s14, s15
   16ef8:	vmrs	APSR_nzcv, fpscr
   16efc:	bpl	16f08 <__assert_fail@plt+0x5d40>
   16f00:	mov	r3, #1
   16f04:	b	16f1c <__assert_fail@plt+0x5d54>
   16f08:	ldr	r2, [fp, #-16]
   16f0c:	movw	r3, #62160	; 0xf2d0
   16f10:	movt	r3, #1
   16f14:	str	r3, [r2, #20]
   16f18:	mov	r3, #0
   16f1c:	mov	r0, r3
   16f20:	add	sp, fp, #0
   16f24:	pop	{fp}		; (ldr fp, [sp], #4)
   16f28:	bx	lr
   16f2c:	svccc	0x00800000
   16f30:	str	fp, [sp, #-8]!
   16f34:	str	lr, [sp, #4]
   16f38:	add	fp, sp, #4
   16f3c:	sub	sp, sp, #16
   16f40:	str	r0, [fp, #-16]
   16f44:	str	r1, [fp, #-20]	; 0xffffffec
   16f48:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f4c:	ldrb	r3, [r3, #16]
   16f50:	eor	r3, r3, #1
   16f54:	uxtb	r3, r3
   16f58:	cmp	r3, #0
   16f5c:	beq	16fa8 <__assert_fail@plt+0x5de0>
   16f60:	ldr	r3, [fp, #-16]
   16f64:	vmov	s15, r3
   16f68:	vcvt.f32.u32	s13, s15
   16f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f70:	vldr	s14, [r3, #8]
   16f74:	vdiv.f32	s15, s13, s14
   16f78:	vstr	s15, [fp, #-8]
   16f7c:	vldr	s15, [fp, #-8]
   16f80:	vldr	s14, [pc, #136]	; 17010 <__assert_fail@plt+0x5e48>
   16f84:	vcmpe.f32	s15, s14
   16f88:	vmrs	APSR_nzcv, fpscr
   16f8c:	blt	16f98 <__assert_fail@plt+0x5dd0>
   16f90:	mov	r3, #0
   16f94:	b	16ffc <__assert_fail@plt+0x5e34>
   16f98:	vldr	s15, [fp, #-8]
   16f9c:	vcvt.u32.f32	s15, s15
   16fa0:	vmov	r3, s15
   16fa4:	str	r3, [fp, #-16]
   16fa8:	ldr	r0, [fp, #-16]
   16fac:	bl	16c94 <__assert_fail@plt+0x5acc>
   16fb0:	str	r0, [fp, #-16]
   16fb4:	mov	r3, #0
   16fb8:	ldr	r2, [fp, #-16]
   16fbc:	lsl	r2, r2, #2
   16fc0:	ldr	r1, [fp, #-16]
   16fc4:	lsr	r1, r1, #30
   16fc8:	cmp	r1, #0
   16fcc:	beq	16fd4 <__assert_fail@plt+0x5e0c>
   16fd0:	mov	r3, #1
   16fd4:	cmp	r2, #0
   16fd8:	bge	16fe0 <__assert_fail@plt+0x5e18>
   16fdc:	mov	r3, #1
   16fe0:	and	r3, r3, #1
   16fe4:	uxtb	r3, r3
   16fe8:	cmp	r3, #0
   16fec:	beq	16ff8 <__assert_fail@plt+0x5e30>
   16ff0:	mov	r3, #0
   16ff4:	b	16ffc <__assert_fail@plt+0x5e34>
   16ff8:	ldr	r3, [fp, #-16]
   16ffc:	mov	r0, r3
   17000:	sub	sp, fp, #4
   17004:	ldr	fp, [sp]
   17008:	add	sp, sp, #4
   1700c:	pop	{pc}		; (ldr pc, [sp], #4)
   17010:	svcmi	0x00800000
   17014:	str	fp, [sp, #-8]!
   17018:	str	lr, [sp, #4]
   1701c:	add	fp, sp, #4
   17020:	sub	sp, sp, #24
   17024:	str	r0, [fp, #-16]
   17028:	str	r1, [fp, #-20]	; 0xffffffec
   1702c:	str	r2, [fp, #-24]	; 0xffffffe8
   17030:	str	r3, [fp, #-28]	; 0xffffffe4
   17034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17038:	cmp	r3, #0
   1703c:	bne	1704c <__assert_fail@plt+0x5e84>
   17040:	movw	r3, #27996	; 0x6d5c
   17044:	movt	r3, #1
   17048:	str	r3, [fp, #-24]	; 0xffffffe8
   1704c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17050:	cmp	r3, #0
   17054:	bne	17064 <__assert_fail@plt+0x5e9c>
   17058:	movw	r3, #28084	; 0x6db4
   1705c:	movt	r3, #1
   17060:	str	r3, [fp, #-28]	; 0xffffffe4
   17064:	mov	r0, #40	; 0x28
   17068:	bl	1caf0 <__assert_fail@plt+0xb928>
   1706c:	mov	r3, r0
   17070:	str	r3, [fp, #-8]
   17074:	ldr	r3, [fp, #-8]
   17078:	cmp	r3, #0
   1707c:	bne	17088 <__assert_fail@plt+0x5ec0>
   17080:	mov	r3, #0
   17084:	b	171b4 <__assert_fail@plt+0x5fec>
   17088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1708c:	cmp	r3, #0
   17090:	bne	170a0 <__assert_fail@plt+0x5ed8>
   17094:	movw	r3, #62160	; 0xf2d0
   17098:	movt	r3, #1
   1709c:	str	r3, [fp, #-20]	; 0xffffffec
   170a0:	ldr	r3, [fp, #-8]
   170a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   170a8:	str	r2, [r3, #20]
   170ac:	ldr	r0, [fp, #-8]
   170b0:	bl	16df0 <__assert_fail@plt+0x5c28>
   170b4:	mov	r3, r0
   170b8:	eor	r3, r3, #1
   170bc:	uxtb	r3, r3
   170c0:	cmp	r3, #0
   170c4:	bne	17194 <__assert_fail@plt+0x5fcc>
   170c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   170cc:	ldr	r0, [fp, #-16]
   170d0:	bl	16f30 <__assert_fail@plt+0x5d68>
   170d4:	mov	r2, r0
   170d8:	ldr	r3, [fp, #-8]
   170dc:	str	r2, [r3, #8]
   170e0:	ldr	r3, [fp, #-8]
   170e4:	ldr	r3, [r3, #8]
   170e8:	cmp	r3, #0
   170ec:	beq	1719c <__assert_fail@plt+0x5fd4>
   170f0:	ldr	r3, [fp, #-8]
   170f4:	ldr	r3, [r3, #8]
   170f8:	mov	r1, #8
   170fc:	mov	r0, r3
   17100:	bl	1ca20 <__assert_fail@plt+0xb858>
   17104:	mov	r3, r0
   17108:	mov	r2, r3
   1710c:	ldr	r3, [fp, #-8]
   17110:	str	r2, [r3]
   17114:	ldr	r3, [fp, #-8]
   17118:	ldr	r3, [r3]
   1711c:	cmp	r3, #0
   17120:	beq	171a4 <__assert_fail@plt+0x5fdc>
   17124:	ldr	r3, [fp, #-8]
   17128:	ldr	r2, [r3]
   1712c:	ldr	r3, [fp, #-8]
   17130:	ldr	r3, [r3, #8]
   17134:	lsl	r3, r3, #3
   17138:	add	r2, r2, r3
   1713c:	ldr	r3, [fp, #-8]
   17140:	str	r2, [r3, #4]
   17144:	ldr	r3, [fp, #-8]
   17148:	mov	r2, #0
   1714c:	str	r2, [r3, #12]
   17150:	ldr	r3, [fp, #-8]
   17154:	mov	r2, #0
   17158:	str	r2, [r3, #16]
   1715c:	ldr	r3, [fp, #-8]
   17160:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17164:	str	r2, [r3, #24]
   17168:	ldr	r3, [fp, #-8]
   1716c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17170:	str	r2, [r3, #28]
   17174:	ldr	r3, [fp, #-8]
   17178:	ldr	r2, [fp, #4]
   1717c:	str	r2, [r3, #32]
   17180:	ldr	r3, [fp, #-8]
   17184:	mov	r2, #0
   17188:	str	r2, [r3, #36]	; 0x24
   1718c:	ldr	r3, [fp, #-8]
   17190:	b	171b4 <__assert_fail@plt+0x5fec>
   17194:	nop	{0}
   17198:	b	171a8 <__assert_fail@plt+0x5fe0>
   1719c:	nop	{0}
   171a0:	b	171a8 <__assert_fail@plt+0x5fe0>
   171a4:	nop	{0}
   171a8:	ldr	r0, [fp, #-8]
   171ac:	bl	1d918 <__assert_fail@plt+0xc750>
   171b0:	mov	r3, #0
   171b4:	mov	r0, r3
   171b8:	sub	sp, fp, #4
   171bc:	ldr	fp, [sp]
   171c0:	add	sp, sp, #4
   171c4:	pop	{pc}		; (ldr pc, [sp], #4)
   171c8:	str	fp, [sp, #-8]!
   171cc:	str	lr, [sp, #4]
   171d0:	add	fp, sp, #4
   171d4:	sub	sp, sp, #24
   171d8:	str	r0, [fp, #-24]	; 0xffffffe8
   171dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171e0:	ldr	r3, [r3]
   171e4:	str	r3, [fp, #-8]
   171e8:	b	172c8 <__assert_fail@plt+0x6100>
   171ec:	ldr	r3, [fp, #-8]
   171f0:	ldr	r3, [r3]
   171f4:	cmp	r3, #0
   171f8:	beq	172bc <__assert_fail@plt+0x60f4>
   171fc:	ldr	r3, [fp, #-8]
   17200:	ldr	r3, [r3, #4]
   17204:	str	r3, [fp, #-12]
   17208:	b	17270 <__assert_fail@plt+0x60a8>
   1720c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17210:	ldr	r3, [r3, #32]
   17214:	cmp	r3, #0
   17218:	beq	17234 <__assert_fail@plt+0x606c>
   1721c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17220:	ldr	r3, [r3, #32]
   17224:	ldr	r2, [fp, #-12]
   17228:	ldr	r2, [r2]
   1722c:	mov	r0, r2
   17230:	blx	r3
   17234:	ldr	r3, [fp, #-12]
   17238:	mov	r2, #0
   1723c:	str	r2, [r3]
   17240:	ldr	r3, [fp, #-12]
   17244:	ldr	r3, [r3, #4]
   17248:	str	r3, [fp, #-16]
   1724c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17250:	ldr	r2, [r3, #36]	; 0x24
   17254:	ldr	r3, [fp, #-12]
   17258:	str	r2, [r3, #4]
   1725c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17260:	ldr	r2, [fp, #-12]
   17264:	str	r2, [r3, #36]	; 0x24
   17268:	ldr	r3, [fp, #-16]
   1726c:	str	r3, [fp, #-12]
   17270:	ldr	r3, [fp, #-12]
   17274:	cmp	r3, #0
   17278:	bne	1720c <__assert_fail@plt+0x6044>
   1727c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17280:	ldr	r3, [r3, #32]
   17284:	cmp	r3, #0
   17288:	beq	172a4 <__assert_fail@plt+0x60dc>
   1728c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17290:	ldr	r3, [r3, #32]
   17294:	ldr	r2, [fp, #-8]
   17298:	ldr	r2, [r2]
   1729c:	mov	r0, r2
   172a0:	blx	r3
   172a4:	ldr	r3, [fp, #-8]
   172a8:	mov	r2, #0
   172ac:	str	r2, [r3]
   172b0:	ldr	r3, [fp, #-8]
   172b4:	mov	r2, #0
   172b8:	str	r2, [r3, #4]
   172bc:	ldr	r3, [fp, #-8]
   172c0:	add	r3, r3, #8
   172c4:	str	r3, [fp, #-8]
   172c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172cc:	ldr	r3, [r3, #4]
   172d0:	ldr	r2, [fp, #-8]
   172d4:	cmp	r2, r3
   172d8:	bcc	171ec <__assert_fail@plt+0x6024>
   172dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172e0:	mov	r2, #0
   172e4:	str	r2, [r3, #12]
   172e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172ec:	mov	r2, #0
   172f0:	str	r2, [r3, #16]
   172f4:	nop	{0}
   172f8:	sub	sp, fp, #4
   172fc:	ldr	fp, [sp]
   17300:	add	sp, sp, #4
   17304:	pop	{pc}		; (ldr pc, [sp], #4)
   17308:	str	fp, [sp, #-8]!
   1730c:	str	lr, [sp, #4]
   17310:	add	fp, sp, #4
   17314:	sub	sp, sp, #24
   17318:	str	r0, [fp, #-24]	; 0xffffffe8
   1731c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17320:	ldr	r3, [r3, #32]
   17324:	cmp	r3, #0
   17328:	beq	173b8 <__assert_fail@plt+0x61f0>
   1732c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17330:	ldr	r3, [r3, #16]
   17334:	cmp	r3, #0
   17338:	beq	173b8 <__assert_fail@plt+0x61f0>
   1733c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17340:	ldr	r3, [r3]
   17344:	str	r3, [fp, #-8]
   17348:	b	173a4 <__assert_fail@plt+0x61dc>
   1734c:	ldr	r3, [fp, #-8]
   17350:	ldr	r3, [r3]
   17354:	cmp	r3, #0
   17358:	beq	17398 <__assert_fail@plt+0x61d0>
   1735c:	ldr	r3, [fp, #-8]
   17360:	str	r3, [fp, #-12]
   17364:	b	1738c <__assert_fail@plt+0x61c4>
   17368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1736c:	ldr	r3, [r3, #32]
   17370:	ldr	r2, [fp, #-12]
   17374:	ldr	r2, [r2]
   17378:	mov	r0, r2
   1737c:	blx	r3
   17380:	ldr	r3, [fp, #-12]
   17384:	ldr	r3, [r3, #4]
   17388:	str	r3, [fp, #-12]
   1738c:	ldr	r3, [fp, #-12]
   17390:	cmp	r3, #0
   17394:	bne	17368 <__assert_fail@plt+0x61a0>
   17398:	ldr	r3, [fp, #-8]
   1739c:	add	r3, r3, #8
   173a0:	str	r3, [fp, #-8]
   173a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173a8:	ldr	r3, [r3, #4]
   173ac:	ldr	r2, [fp, #-8]
   173b0:	cmp	r2, r3
   173b4:	bcc	1734c <__assert_fail@plt+0x6184>
   173b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173bc:	ldr	r3, [r3]
   173c0:	str	r3, [fp, #-8]
   173c4:	b	1740c <__assert_fail@plt+0x6244>
   173c8:	ldr	r3, [fp, #-8]
   173cc:	ldr	r3, [r3, #4]
   173d0:	str	r3, [fp, #-12]
   173d4:	b	173f4 <__assert_fail@plt+0x622c>
   173d8:	ldr	r3, [fp, #-12]
   173dc:	ldr	r3, [r3, #4]
   173e0:	str	r3, [fp, #-16]
   173e4:	ldr	r0, [fp, #-12]
   173e8:	bl	1d918 <__assert_fail@plt+0xc750>
   173ec:	ldr	r3, [fp, #-16]
   173f0:	str	r3, [fp, #-12]
   173f4:	ldr	r3, [fp, #-12]
   173f8:	cmp	r3, #0
   173fc:	bne	173d8 <__assert_fail@plt+0x6210>
   17400:	ldr	r3, [fp, #-8]
   17404:	add	r3, r3, #8
   17408:	str	r3, [fp, #-8]
   1740c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17410:	ldr	r3, [r3, #4]
   17414:	ldr	r2, [fp, #-8]
   17418:	cmp	r2, r3
   1741c:	bcc	173c8 <__assert_fail@plt+0x6200>
   17420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17424:	ldr	r3, [r3, #36]	; 0x24
   17428:	str	r3, [fp, #-12]
   1742c:	b	1744c <__assert_fail@plt+0x6284>
   17430:	ldr	r3, [fp, #-12]
   17434:	ldr	r3, [r3, #4]
   17438:	str	r3, [fp, #-16]
   1743c:	ldr	r0, [fp, #-12]
   17440:	bl	1d918 <__assert_fail@plt+0xc750>
   17444:	ldr	r3, [fp, #-16]
   17448:	str	r3, [fp, #-12]
   1744c:	ldr	r3, [fp, #-12]
   17450:	cmp	r3, #0
   17454:	bne	17430 <__assert_fail@plt+0x6268>
   17458:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1745c:	ldr	r3, [r3]
   17460:	mov	r0, r3
   17464:	bl	1d918 <__assert_fail@plt+0xc750>
   17468:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1746c:	bl	1d918 <__assert_fail@plt+0xc750>
   17470:	nop	{0}
   17474:	sub	sp, fp, #4
   17478:	ldr	fp, [sp]
   1747c:	add	sp, sp, #4
   17480:	pop	{pc}		; (ldr pc, [sp], #4)
   17484:	str	fp, [sp, #-8]!
   17488:	str	lr, [sp, #4]
   1748c:	add	fp, sp, #4
   17490:	sub	sp, sp, #16
   17494:	str	r0, [fp, #-16]
   17498:	ldr	r3, [fp, #-16]
   1749c:	ldr	r3, [r3, #36]	; 0x24
   174a0:	cmp	r3, #0
   174a4:	beq	174c8 <__assert_fail@plt+0x6300>
   174a8:	ldr	r3, [fp, #-16]
   174ac:	ldr	r3, [r3, #36]	; 0x24
   174b0:	str	r3, [fp, #-8]
   174b4:	ldr	r3, [fp, #-8]
   174b8:	ldr	r2, [r3, #4]
   174bc:	ldr	r3, [fp, #-16]
   174c0:	str	r2, [r3, #36]	; 0x24
   174c4:	b	174d8 <__assert_fail@plt+0x6310>
   174c8:	mov	r0, #8
   174cc:	bl	1caf0 <__assert_fail@plt+0xb928>
   174d0:	mov	r3, r0
   174d4:	str	r3, [fp, #-8]
   174d8:	ldr	r3, [fp, #-8]
   174dc:	mov	r0, r3
   174e0:	sub	sp, fp, #4
   174e4:	ldr	fp, [sp]
   174e8:	add	sp, sp, #4
   174ec:	pop	{pc}		; (ldr pc, [sp], #4)
   174f0:	push	{fp}		; (str fp, [sp, #-4]!)
   174f4:	add	fp, sp, #0
   174f8:	sub	sp, sp, #12
   174fc:	str	r0, [fp, #-8]
   17500:	str	r1, [fp, #-12]
   17504:	ldr	r3, [fp, #-12]
   17508:	mov	r2, #0
   1750c:	str	r2, [r3]
   17510:	ldr	r3, [fp, #-8]
   17514:	ldr	r2, [r3, #36]	; 0x24
   17518:	ldr	r3, [fp, #-12]
   1751c:	str	r2, [r3, #4]
   17520:	ldr	r3, [fp, #-8]
   17524:	ldr	r2, [fp, #-12]
   17528:	str	r2, [r3, #36]	; 0x24
   1752c:	nop	{0}
   17530:	add	sp, fp, #0
   17534:	pop	{fp}		; (ldr fp, [sp], #4)
   17538:	bx	lr
   1753c:	str	fp, [sp, #-8]!
   17540:	str	lr, [sp, #4]
   17544:	add	fp, sp, #4
   17548:	sub	sp, sp, #40	; 0x28
   1754c:	str	r0, [fp, #-32]	; 0xffffffe0
   17550:	str	r1, [fp, #-36]	; 0xffffffdc
   17554:	str	r2, [fp, #-40]	; 0xffffffd8
   17558:	strb	r3, [fp, #-41]	; 0xffffffd7
   1755c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17560:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17564:	bl	166f8 <__assert_fail@plt+0x5530>
   17568:	str	r0, [fp, #-12]
   1756c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17570:	ldr	r2, [fp, #-12]
   17574:	str	r2, [r3]
   17578:	ldr	r3, [fp, #-12]
   1757c:	ldr	r3, [r3]
   17580:	cmp	r3, #0
   17584:	bne	17590 <__assert_fail@plt+0x63c8>
   17588:	mov	r3, #0
   1758c:	b	176f4 <__assert_fail@plt+0x652c>
   17590:	ldr	r3, [fp, #-12]
   17594:	ldr	r3, [r3]
   17598:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1759c:	cmp	r2, r3
   175a0:	beq	175cc <__assert_fail@plt+0x6404>
   175a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175a8:	ldr	r3, [r3, #28]
   175ac:	ldr	r2, [fp, #-12]
   175b0:	ldr	r2, [r2]
   175b4:	mov	r1, r2
   175b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   175bc:	blx	r3
   175c0:	mov	r3, r0
   175c4:	cmp	r3, #0
   175c8:	beq	17638 <__assert_fail@plt+0x6470>
   175cc:	ldr	r3, [fp, #-12]
   175d0:	ldr	r3, [r3]
   175d4:	str	r3, [fp, #-24]	; 0xffffffe8
   175d8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   175dc:	cmp	r3, #0
   175e0:	beq	17630 <__assert_fail@plt+0x6468>
   175e4:	ldr	r3, [fp, #-12]
   175e8:	ldr	r3, [r3, #4]
   175ec:	cmp	r3, #0
   175f0:	beq	17624 <__assert_fail@plt+0x645c>
   175f4:	ldr	r3, [fp, #-12]
   175f8:	ldr	r3, [r3, #4]
   175fc:	str	r3, [fp, #-28]	; 0xffffffe4
   17600:	ldr	r2, [fp, #-12]
   17604:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17608:	mov	r1, r2
   1760c:	ldrd	r2, [r3]
   17610:	strd	r2, [r1]
   17614:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17618:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1761c:	bl	174f0 <__assert_fail@plt+0x6328>
   17620:	b	17630 <__assert_fail@plt+0x6468>
   17624:	ldr	r3, [fp, #-12]
   17628:	mov	r2, #0
   1762c:	str	r2, [r3]
   17630:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17634:	b	176f4 <__assert_fail@plt+0x652c>
   17638:	ldr	r3, [fp, #-12]
   1763c:	str	r3, [fp, #-8]
   17640:	b	176e0 <__assert_fail@plt+0x6518>
   17644:	ldr	r3, [fp, #-8]
   17648:	ldr	r3, [r3, #4]
   1764c:	ldr	r3, [r3]
   17650:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17654:	cmp	r2, r3
   17658:	beq	17688 <__assert_fail@plt+0x64c0>
   1765c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17660:	ldr	r3, [r3, #28]
   17664:	ldr	r2, [fp, #-8]
   17668:	ldr	r2, [r2, #4]
   1766c:	ldr	r2, [r2]
   17670:	mov	r1, r2
   17674:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17678:	blx	r3
   1767c:	mov	r3, r0
   17680:	cmp	r3, #0
   17684:	beq	176d4 <__assert_fail@plt+0x650c>
   17688:	ldr	r3, [fp, #-8]
   1768c:	ldr	r3, [r3, #4]
   17690:	ldr	r3, [r3]
   17694:	str	r3, [fp, #-16]
   17698:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1769c:	cmp	r3, #0
   176a0:	beq	176cc <__assert_fail@plt+0x6504>
   176a4:	ldr	r3, [fp, #-8]
   176a8:	ldr	r3, [r3, #4]
   176ac:	str	r3, [fp, #-20]	; 0xffffffec
   176b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   176b4:	ldr	r2, [r3, #4]
   176b8:	ldr	r3, [fp, #-8]
   176bc:	str	r2, [r3, #4]
   176c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   176c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   176c8:	bl	174f0 <__assert_fail@plt+0x6328>
   176cc:	ldr	r3, [fp, #-16]
   176d0:	b	176f4 <__assert_fail@plt+0x652c>
   176d4:	ldr	r3, [fp, #-8]
   176d8:	ldr	r3, [r3, #4]
   176dc:	str	r3, [fp, #-8]
   176e0:	ldr	r3, [fp, #-8]
   176e4:	ldr	r3, [r3, #4]
   176e8:	cmp	r3, #0
   176ec:	bne	17644 <__assert_fail@plt+0x647c>
   176f0:	mov	r3, #0
   176f4:	mov	r0, r3
   176f8:	sub	sp, fp, #4
   176fc:	ldr	fp, [sp]
   17700:	add	sp, sp, #4
   17704:	pop	{pc}		; (ldr pc, [sp], #4)
   17708:	str	fp, [sp, #-8]!
   1770c:	str	lr, [sp, #4]
   17710:	add	fp, sp, #4
   17714:	sub	sp, sp, #40	; 0x28
   17718:	str	r0, [fp, #-32]	; 0xffffffe0
   1771c:	str	r1, [fp, #-36]	; 0xffffffdc
   17720:	mov	r3, r2
   17724:	strb	r3, [fp, #-37]	; 0xffffffdb
   17728:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1772c:	ldr	r3, [r3]
   17730:	str	r3, [fp, #-8]
   17734:	b	178d4 <__assert_fail@plt+0x670c>
   17738:	ldr	r3, [fp, #-8]
   1773c:	ldr	r3, [r3]
   17740:	cmp	r3, #0
   17744:	beq	178c8 <__assert_fail@plt+0x6700>
   17748:	ldr	r3, [fp, #-8]
   1774c:	ldr	r3, [r3, #4]
   17750:	str	r3, [fp, #-12]
   17754:	b	177e4 <__assert_fail@plt+0x661c>
   17758:	ldr	r3, [fp, #-12]
   1775c:	ldr	r3, [r3]
   17760:	str	r3, [fp, #-16]
   17764:	ldr	r1, [fp, #-16]
   17768:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1776c:	bl	166f8 <__assert_fail@plt+0x5530>
   17770:	str	r0, [fp, #-20]	; 0xffffffec
   17774:	ldr	r3, [fp, #-12]
   17778:	ldr	r3, [r3, #4]
   1777c:	str	r3, [fp, #-24]	; 0xffffffe8
   17780:	ldr	r3, [fp, #-20]	; 0xffffffec
   17784:	ldr	r3, [r3]
   17788:	cmp	r3, #0
   1778c:	beq	177b0 <__assert_fail@plt+0x65e8>
   17790:	ldr	r3, [fp, #-20]	; 0xffffffec
   17794:	ldr	r2, [r3, #4]
   17798:	ldr	r3, [fp, #-12]
   1779c:	str	r2, [r3, #4]
   177a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   177a4:	ldr	r2, [fp, #-12]
   177a8:	str	r2, [r3, #4]
   177ac:	b	177dc <__assert_fail@plt+0x6614>
   177b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   177b4:	ldr	r2, [fp, #-16]
   177b8:	str	r2, [r3]
   177bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177c0:	ldr	r3, [r3, #12]
   177c4:	add	r2, r3, #1
   177c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177cc:	str	r2, [r3, #12]
   177d0:	ldr	r1, [fp, #-12]
   177d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177d8:	bl	174f0 <__assert_fail@plt+0x6328>
   177dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177e0:	str	r3, [fp, #-12]
   177e4:	ldr	r3, [fp, #-12]
   177e8:	cmp	r3, #0
   177ec:	bne	17758 <__assert_fail@plt+0x6590>
   177f0:	ldr	r3, [fp, #-8]
   177f4:	ldr	r3, [r3]
   177f8:	str	r3, [fp, #-16]
   177fc:	ldr	r3, [fp, #-8]
   17800:	mov	r2, #0
   17804:	str	r2, [r3, #4]
   17808:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1780c:	cmp	r3, #0
   17810:	bne	178c4 <__assert_fail@plt+0x66fc>
   17814:	ldr	r1, [fp, #-16]
   17818:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1781c:	bl	166f8 <__assert_fail@plt+0x5530>
   17820:	str	r0, [fp, #-20]	; 0xffffffec
   17824:	ldr	r3, [fp, #-20]	; 0xffffffec
   17828:	ldr	r3, [r3]
   1782c:	cmp	r3, #0
   17830:	beq	17880 <__assert_fail@plt+0x66b8>
   17834:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17838:	bl	17484 <__assert_fail@plt+0x62bc>
   1783c:	str	r0, [fp, #-28]	; 0xffffffe4
   17840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17844:	cmp	r3, #0
   17848:	bne	17854 <__assert_fail@plt+0x668c>
   1784c:	mov	r3, #0
   17850:	b	178ec <__assert_fail@plt+0x6724>
   17854:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17858:	ldr	r2, [fp, #-16]
   1785c:	str	r2, [r3]
   17860:	ldr	r3, [fp, #-20]	; 0xffffffec
   17864:	ldr	r2, [r3, #4]
   17868:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1786c:	str	r2, [r3, #4]
   17870:	ldr	r3, [fp, #-20]	; 0xffffffec
   17874:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17878:	str	r2, [r3, #4]
   1787c:	b	178a0 <__assert_fail@plt+0x66d8>
   17880:	ldr	r3, [fp, #-20]	; 0xffffffec
   17884:	ldr	r2, [fp, #-16]
   17888:	str	r2, [r3]
   1788c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17890:	ldr	r3, [r3, #12]
   17894:	add	r2, r3, #1
   17898:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1789c:	str	r2, [r3, #12]
   178a0:	ldr	r3, [fp, #-8]
   178a4:	mov	r2, #0
   178a8:	str	r2, [r3]
   178ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   178b0:	ldr	r3, [r3, #12]
   178b4:	sub	r2, r3, #1
   178b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   178bc:	str	r2, [r3, #12]
   178c0:	b	178c8 <__assert_fail@plt+0x6700>
   178c4:	nop	{0}
   178c8:	ldr	r3, [fp, #-8]
   178cc:	add	r3, r3, #8
   178d0:	str	r3, [fp, #-8]
   178d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   178d8:	ldr	r3, [r3, #4]
   178dc:	ldr	r2, [fp, #-8]
   178e0:	cmp	r2, r3
   178e4:	bcc	17738 <__assert_fail@plt+0x6570>
   178e8:	mov	r3, #1
   178ec:	mov	r0, r3
   178f0:	sub	sp, fp, #4
   178f4:	ldr	fp, [sp]
   178f8:	add	sp, sp, #4
   178fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17900:	str	fp, [sp, #-8]!
   17904:	str	lr, [sp, #4]
   17908:	add	fp, sp, #4
   1790c:	sub	sp, sp, #56	; 0x38
   17910:	str	r0, [fp, #-56]	; 0xffffffc8
   17914:	str	r1, [fp, #-60]	; 0xffffffc4
   17918:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1791c:	ldr	r3, [r3, #20]
   17920:	mov	r1, r3
   17924:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17928:	bl	16f30 <__assert_fail@plt+0x5d68>
   1792c:	str	r0, [fp, #-8]
   17930:	ldr	r3, [fp, #-8]
   17934:	cmp	r3, #0
   17938:	bne	17944 <__assert_fail@plt+0x677c>
   1793c:	mov	r3, #0
   17940:	b	17b20 <__assert_fail@plt+0x6958>
   17944:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17948:	ldr	r3, [r3, #8]
   1794c:	ldr	r2, [fp, #-8]
   17950:	cmp	r2, r3
   17954:	bne	17960 <__assert_fail@plt+0x6798>
   17958:	mov	r3, #1
   1795c:	b	17b20 <__assert_fail@plt+0x6958>
   17960:	sub	r3, fp, #52	; 0x34
   17964:	str	r3, [fp, #-12]
   17968:	mov	r1, #8
   1796c:	ldr	r0, [fp, #-8]
   17970:	bl	1ca20 <__assert_fail@plt+0xb858>
   17974:	mov	r3, r0
   17978:	mov	r2, r3
   1797c:	ldr	r3, [fp, #-12]
   17980:	str	r2, [r3]
   17984:	ldr	r3, [fp, #-12]
   17988:	ldr	r3, [r3]
   1798c:	cmp	r3, #0
   17990:	bne	1799c <__assert_fail@plt+0x67d4>
   17994:	mov	r3, #0
   17998:	b	17b20 <__assert_fail@plt+0x6958>
   1799c:	ldr	r3, [fp, #-12]
   179a0:	ldr	r2, [fp, #-8]
   179a4:	str	r2, [r3, #8]
   179a8:	ldr	r3, [fp, #-12]
   179ac:	ldr	r2, [r3]
   179b0:	ldr	r3, [fp, #-8]
   179b4:	lsl	r3, r3, #3
   179b8:	add	r2, r2, r3
   179bc:	ldr	r3, [fp, #-12]
   179c0:	str	r2, [r3, #4]
   179c4:	ldr	r3, [fp, #-12]
   179c8:	mov	r2, #0
   179cc:	str	r2, [r3, #12]
   179d0:	ldr	r3, [fp, #-12]
   179d4:	mov	r2, #0
   179d8:	str	r2, [r3, #16]
   179dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   179e0:	ldr	r2, [r3, #20]
   179e4:	ldr	r3, [fp, #-12]
   179e8:	str	r2, [r3, #20]
   179ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   179f0:	ldr	r2, [r3, #24]
   179f4:	ldr	r3, [fp, #-12]
   179f8:	str	r2, [r3, #24]
   179fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a00:	ldr	r2, [r3, #28]
   17a04:	ldr	r3, [fp, #-12]
   17a08:	str	r2, [r3, #28]
   17a0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a10:	ldr	r2, [r3, #32]
   17a14:	ldr	r3, [fp, #-12]
   17a18:	str	r2, [r3, #32]
   17a1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a20:	ldr	r2, [r3, #36]	; 0x24
   17a24:	ldr	r3, [fp, #-12]
   17a28:	str	r2, [r3, #36]	; 0x24
   17a2c:	mov	r2, #0
   17a30:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17a34:	ldr	r0, [fp, #-12]
   17a38:	bl	17708 <__assert_fail@plt+0x6540>
   17a3c:	mov	r3, r0
   17a40:	cmp	r3, #0
   17a44:	beq	17ab0 <__assert_fail@plt+0x68e8>
   17a48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a4c:	ldr	r3, [r3]
   17a50:	mov	r0, r3
   17a54:	bl	1d918 <__assert_fail@plt+0xc750>
   17a58:	ldr	r3, [fp, #-12]
   17a5c:	ldr	r2, [r3]
   17a60:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a64:	str	r2, [r3]
   17a68:	ldr	r3, [fp, #-12]
   17a6c:	ldr	r2, [r3, #4]
   17a70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a74:	str	r2, [r3, #4]
   17a78:	ldr	r3, [fp, #-12]
   17a7c:	ldr	r2, [r3, #8]
   17a80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a84:	str	r2, [r3, #8]
   17a88:	ldr	r3, [fp, #-12]
   17a8c:	ldr	r2, [r3, #12]
   17a90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a94:	str	r2, [r3, #12]
   17a98:	ldr	r3, [fp, #-12]
   17a9c:	ldr	r2, [r3, #36]	; 0x24
   17aa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17aa4:	str	r2, [r3, #36]	; 0x24
   17aa8:	mov	r3, #1
   17aac:	b	17b20 <__assert_fail@plt+0x6958>
   17ab0:	ldr	r3, [fp, #-12]
   17ab4:	ldr	r2, [r3, #36]	; 0x24
   17ab8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17abc:	str	r2, [r3, #36]	; 0x24
   17ac0:	mov	r2, #1
   17ac4:	ldr	r1, [fp, #-12]
   17ac8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17acc:	bl	17708 <__assert_fail@plt+0x6540>
   17ad0:	mov	r3, r0
   17ad4:	eor	r3, r3, #1
   17ad8:	uxtb	r3, r3
   17adc:	cmp	r3, #0
   17ae0:	bne	17b08 <__assert_fail@plt+0x6940>
   17ae4:	mov	r2, #0
   17ae8:	ldr	r1, [fp, #-12]
   17aec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17af0:	bl	17708 <__assert_fail@plt+0x6540>
   17af4:	mov	r3, r0
   17af8:	eor	r3, r3, #1
   17afc:	uxtb	r3, r3
   17b00:	cmp	r3, #0
   17b04:	beq	17b0c <__assert_fail@plt+0x6944>
   17b08:	bl	11198 <abort@plt>
   17b0c:	ldr	r3, [fp, #-12]
   17b10:	ldr	r3, [r3]
   17b14:	mov	r0, r3
   17b18:	bl	1d918 <__assert_fail@plt+0xc750>
   17b1c:	mov	r3, #0
   17b20:	mov	r0, r3
   17b24:	sub	sp, fp, #4
   17b28:	ldr	fp, [sp]
   17b2c:	add	sp, sp, #4
   17b30:	pop	{pc}		; (ldr pc, [sp], #4)
   17b34:	str	fp, [sp, #-8]!
   17b38:	str	lr, [sp, #4]
   17b3c:	add	fp, sp, #4
   17b40:	sub	sp, sp, #40	; 0x28
   17b44:	str	r0, [fp, #-32]	; 0xffffffe0
   17b48:	str	r1, [fp, #-36]	; 0xffffffdc
   17b4c:	str	r2, [fp, #-40]	; 0xffffffd8
   17b50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17b54:	cmp	r3, #0
   17b58:	bne	17b60 <__assert_fail@plt+0x6998>
   17b5c:	bl	11198 <abort@plt>
   17b60:	sub	r2, fp, #24
   17b64:	mov	r3, #0
   17b68:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17b6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b70:	bl	1753c <__assert_fail@plt+0x6374>
   17b74:	str	r0, [fp, #-8]
   17b78:	ldr	r3, [fp, #-8]
   17b7c:	cmp	r3, #0
   17b80:	beq	17ba4 <__assert_fail@plt+0x69dc>
   17b84:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17b88:	cmp	r3, #0
   17b8c:	beq	17b9c <__assert_fail@plt+0x69d4>
   17b90:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17b94:	ldr	r2, [fp, #-8]
   17b98:	str	r2, [r3]
   17b9c:	mov	r3, #0
   17ba0:	b	17da8 <__assert_fail@plt+0x6be0>
   17ba4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ba8:	ldr	r3, [r3, #12]
   17bac:	vmov	s15, r3
   17bb0:	vcvt.f32.u32	s14, s15
   17bb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bb8:	ldr	r3, [r3, #20]
   17bbc:	vldr	s13, [r3, #8]
   17bc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bc4:	ldr	r3, [r3, #8]
   17bc8:	vmov	s15, r3
   17bcc:	vcvt.f32.u32	s15, s15
   17bd0:	vmul.f32	s15, s13, s15
   17bd4:	vcmpe.f32	s14, s15
   17bd8:	vmrs	APSR_nzcv, fpscr
   17bdc:	ble	17cfc <__assert_fail@plt+0x6b34>
   17be0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17be4:	bl	16df0 <__assert_fail@plt+0x5c28>
   17be8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bec:	ldr	r3, [r3, #12]
   17bf0:	vmov	s15, r3
   17bf4:	vcvt.f32.u32	s14, s15
   17bf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bfc:	ldr	r3, [r3, #20]
   17c00:	vldr	s13, [r3, #8]
   17c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c08:	ldr	r3, [r3, #8]
   17c0c:	vmov	s15, r3
   17c10:	vcvt.f32.u32	s15, s15
   17c14:	vmul.f32	s15, s13, s15
   17c18:	vcmpe.f32	s14, s15
   17c1c:	vmrs	APSR_nzcv, fpscr
   17c20:	ble	17cfc <__assert_fail@plt+0x6b34>
   17c24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c28:	ldr	r3, [r3, #20]
   17c2c:	str	r3, [fp, #-12]
   17c30:	ldr	r3, [fp, #-12]
   17c34:	ldrb	r3, [r3, #16]
   17c38:	cmp	r3, #0
   17c3c:	beq	17c60 <__assert_fail@plt+0x6a98>
   17c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c44:	ldr	r3, [r3, #8]
   17c48:	vmov	s15, r3
   17c4c:	vcvt.f32.u32	s14, s15
   17c50:	ldr	r3, [fp, #-12]
   17c54:	vldr	s15, [r3, #12]
   17c58:	vmul.f32	s15, s14, s15
   17c5c:	b	17c88 <__assert_fail@plt+0x6ac0>
   17c60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c64:	ldr	r3, [r3, #8]
   17c68:	vmov	s15, r3
   17c6c:	vcvt.f32.u32	s14, s15
   17c70:	ldr	r3, [fp, #-12]
   17c74:	vldr	s15, [r3, #12]
   17c78:	vmul.f32	s14, s14, s15
   17c7c:	ldr	r3, [fp, #-12]
   17c80:	vldr	s15, [r3, #8]
   17c84:	vmul.f32	s15, s14, s15
   17c88:	vstr	s15, [fp, #-16]
   17c8c:	vldr	s15, [fp, #-16]
   17c90:	vldr	s14, [pc, #292]	; 17dbc <__assert_fail@plt+0x6bf4>
   17c94:	vcmpe.f32	s15, s14
   17c98:	vmrs	APSR_nzcv, fpscr
   17c9c:	blt	17ca8 <__assert_fail@plt+0x6ae0>
   17ca0:	mvn	r3, #0
   17ca4:	b	17da8 <__assert_fail@plt+0x6be0>
   17ca8:	vldr	s15, [fp, #-16]
   17cac:	vcvt.u32.f32	s15, s15
   17cb0:	vmov	r1, s15
   17cb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17cb8:	bl	17900 <__assert_fail@plt+0x6738>
   17cbc:	mov	r3, r0
   17cc0:	eor	r3, r3, #1
   17cc4:	uxtb	r3, r3
   17cc8:	cmp	r3, #0
   17ccc:	beq	17cd8 <__assert_fail@plt+0x6b10>
   17cd0:	mvn	r3, #0
   17cd4:	b	17da8 <__assert_fail@plt+0x6be0>
   17cd8:	sub	r2, fp, #24
   17cdc:	mov	r3, #0
   17ce0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17ce4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ce8:	bl	1753c <__assert_fail@plt+0x6374>
   17cec:	mov	r3, r0
   17cf0:	cmp	r3, #0
   17cf4:	beq	17cfc <__assert_fail@plt+0x6b34>
   17cf8:	bl	11198 <abort@plt>
   17cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d00:	ldr	r3, [r3]
   17d04:	cmp	r3, #0
   17d08:	beq	17d70 <__assert_fail@plt+0x6ba8>
   17d0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d10:	bl	17484 <__assert_fail@plt+0x62bc>
   17d14:	str	r0, [fp, #-20]	; 0xffffffec
   17d18:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d1c:	cmp	r3, #0
   17d20:	bne	17d2c <__assert_fail@plt+0x6b64>
   17d24:	mvn	r3, #0
   17d28:	b	17da8 <__assert_fail@plt+0x6be0>
   17d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d30:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17d34:	str	r2, [r3]
   17d38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d3c:	ldr	r2, [r3, #4]
   17d40:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d44:	str	r2, [r3, #4]
   17d48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17d50:	str	r2, [r3, #4]
   17d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d58:	ldr	r3, [r3, #16]
   17d5c:	add	r2, r3, #1
   17d60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d64:	str	r2, [r3, #16]
   17d68:	mov	r3, #1
   17d6c:	b	17da8 <__assert_fail@plt+0x6be0>
   17d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d74:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17d78:	str	r2, [r3]
   17d7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d80:	ldr	r3, [r3, #16]
   17d84:	add	r2, r3, #1
   17d88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d8c:	str	r2, [r3, #16]
   17d90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d94:	ldr	r3, [r3, #12]
   17d98:	add	r2, r3, #1
   17d9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17da0:	str	r2, [r3, #12]
   17da4:	mov	r3, #1
   17da8:	mov	r0, r3
   17dac:	sub	sp, fp, #4
   17db0:	ldr	fp, [sp]
   17db4:	add	sp, sp, #4
   17db8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dbc:	svcmi	0x00800000
   17dc0:	str	fp, [sp, #-8]!
   17dc4:	str	lr, [sp, #4]
   17dc8:	add	fp, sp, #4
   17dcc:	sub	sp, sp, #16
   17dd0:	str	r0, [fp, #-16]
   17dd4:	str	r1, [fp, #-20]	; 0xffffffec
   17dd8:	sub	r3, fp, #12
   17ddc:	mov	r2, r3
   17de0:	ldr	r1, [fp, #-20]	; 0xffffffec
   17de4:	ldr	r0, [fp, #-16]
   17de8:	bl	17b34 <__assert_fail@plt+0x696c>
   17dec:	str	r0, [fp, #-8]
   17df0:	ldr	r3, [fp, #-8]
   17df4:	cmn	r3, #1
   17df8:	beq	17e18 <__assert_fail@plt+0x6c50>
   17dfc:	ldr	r3, [fp, #-8]
   17e00:	cmp	r3, #0
   17e04:	bne	17e10 <__assert_fail@plt+0x6c48>
   17e08:	ldr	r3, [fp, #-12]
   17e0c:	b	17e1c <__assert_fail@plt+0x6c54>
   17e10:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e14:	b	17e1c <__assert_fail@plt+0x6c54>
   17e18:	mov	r3, #0
   17e1c:	mov	r0, r3
   17e20:	sub	sp, fp, #4
   17e24:	ldr	fp, [sp]
   17e28:	add	sp, sp, #4
   17e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e30:	str	fp, [sp, #-8]!
   17e34:	str	lr, [sp, #4]
   17e38:	add	fp, sp, #4
   17e3c:	sub	sp, sp, #32
   17e40:	str	r0, [fp, #-32]	; 0xffffffe0
   17e44:	str	r1, [fp, #-36]	; 0xffffffdc
   17e48:	sub	r2, fp, #28
   17e4c:	mov	r3, #1
   17e50:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17e54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e58:	bl	1753c <__assert_fail@plt+0x6374>
   17e5c:	str	r0, [fp, #-12]
   17e60:	ldr	r3, [fp, #-12]
   17e64:	cmp	r3, #0
   17e68:	bne	17e74 <__assert_fail@plt+0x6cac>
   17e6c:	mov	r3, #0
   17e70:	b	18004 <__assert_fail@plt+0x6e3c>
   17e74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e78:	ldr	r3, [r3, #16]
   17e7c:	sub	r2, r3, #1
   17e80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e84:	str	r2, [r3, #16]
   17e88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e8c:	ldr	r3, [r3]
   17e90:	cmp	r3, #0
   17e94:	bne	18000 <__assert_fail@plt+0x6e38>
   17e98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e9c:	ldr	r3, [r3, #12]
   17ea0:	sub	r2, r3, #1
   17ea4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ea8:	str	r2, [r3, #12]
   17eac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17eb0:	ldr	r3, [r3, #12]
   17eb4:	vmov	s15, r3
   17eb8:	vcvt.f32.u32	s14, s15
   17ebc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ec0:	ldr	r3, [r3, #20]
   17ec4:	vldr	s13, [r3]
   17ec8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ecc:	ldr	r3, [r3, #8]
   17ed0:	vmov	s15, r3
   17ed4:	vcvt.f32.u32	s15, s15
   17ed8:	vmul.f32	s15, s13, s15
   17edc:	vcmpe.f32	s14, s15
   17ee0:	vmrs	APSR_nzcv, fpscr
   17ee4:	bpl	18000 <__assert_fail@plt+0x6e38>
   17ee8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17eec:	bl	16df0 <__assert_fail@plt+0x5c28>
   17ef0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ef4:	ldr	r3, [r3, #12]
   17ef8:	vmov	s15, r3
   17efc:	vcvt.f32.u32	s14, s15
   17f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f04:	ldr	r3, [r3, #20]
   17f08:	vldr	s13, [r3]
   17f0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f10:	ldr	r3, [r3, #8]
   17f14:	vmov	s15, r3
   17f18:	vcvt.f32.u32	s15, s15
   17f1c:	vmul.f32	s15, s13, s15
   17f20:	vcmpe.f32	s14, s15
   17f24:	vmrs	APSR_nzcv, fpscr
   17f28:	bpl	18000 <__assert_fail@plt+0x6e38>
   17f2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f30:	ldr	r3, [r3, #20]
   17f34:	str	r3, [fp, #-16]
   17f38:	ldr	r3, [fp, #-16]
   17f3c:	ldrb	r3, [r3, #16]
   17f40:	cmp	r3, #0
   17f44:	beq	17f6c <__assert_fail@plt+0x6da4>
   17f48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f4c:	ldr	r3, [r3, #8]
   17f50:	vmov	s15, r3
   17f54:	vcvt.f32.u32	s14, s15
   17f58:	ldr	r3, [fp, #-16]
   17f5c:	vldr	s15, [r3, #4]
   17f60:	vmul.f32	s15, s14, s15
   17f64:	vcvt.u32.f32	s15, s15
   17f68:	b	17f98 <__assert_fail@plt+0x6dd0>
   17f6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f70:	ldr	r3, [r3, #8]
   17f74:	vmov	s15, r3
   17f78:	vcvt.f32.u32	s14, s15
   17f7c:	ldr	r3, [fp, #-16]
   17f80:	vldr	s15, [r3, #4]
   17f84:	vmul.f32	s14, s14, s15
   17f88:	ldr	r3, [fp, #-16]
   17f8c:	vldr	s15, [r3, #8]
   17f90:	vmul.f32	s15, s14, s15
   17f94:	vcvt.u32.f32	s15, s15
   17f98:	vstr	s15, [fp, #-20]	; 0xffffffec
   17f9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17fa0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17fa4:	bl	17900 <__assert_fail@plt+0x6738>
   17fa8:	mov	r3, r0
   17fac:	eor	r3, r3, #1
   17fb0:	uxtb	r3, r3
   17fb4:	cmp	r3, #0
   17fb8:	beq	18000 <__assert_fail@plt+0x6e38>
   17fbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fc0:	ldr	r3, [r3, #36]	; 0x24
   17fc4:	str	r3, [fp, #-8]
   17fc8:	b	17fe8 <__assert_fail@plt+0x6e20>
   17fcc:	ldr	r3, [fp, #-8]
   17fd0:	ldr	r3, [r3, #4]
   17fd4:	str	r3, [fp, #-24]	; 0xffffffe8
   17fd8:	ldr	r0, [fp, #-8]
   17fdc:	bl	1d918 <__assert_fail@plt+0xc750>
   17fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fe4:	str	r3, [fp, #-8]
   17fe8:	ldr	r3, [fp, #-8]
   17fec:	cmp	r3, #0
   17ff0:	bne	17fcc <__assert_fail@plt+0x6e04>
   17ff4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ff8:	mov	r2, #0
   17ffc:	str	r2, [r3, #36]	; 0x24
   18000:	ldr	r3, [fp, #-12]
   18004:	mov	r0, r3
   18008:	sub	sp, fp, #4
   1800c:	ldr	fp, [sp]
   18010:	add	sp, sp, #4
   18014:	pop	{pc}		; (ldr pc, [sp], #4)
   18018:	str	fp, [sp, #-8]!
   1801c:	str	lr, [sp, #4]
   18020:	add	fp, sp, #4
   18024:	sub	sp, sp, #8
   18028:	str	r0, [fp, #-8]
   1802c:	str	r1, [fp, #-12]
   18030:	ldr	r1, [fp, #-12]
   18034:	ldr	r0, [fp, #-8]
   18038:	bl	17e30 <__assert_fail@plt+0x6c68>
   1803c:	mov	r3, r0
   18040:	mov	r0, r3
   18044:	sub	sp, fp, #4
   18048:	ldr	fp, [sp]
   1804c:	add	sp, sp, #4
   18050:	pop	{pc}		; (ldr pc, [sp], #4)
   18054:	push	{fp}		; (str fp, [sp, #-4]!)
   18058:	add	fp, sp, #0
   1805c:	sub	sp, sp, #20
   18060:	str	r0, [fp, #-16]
   18064:	str	r1, [fp, #-20]	; 0xffffffec
   18068:	ldr	r3, [fp, #-16]
   1806c:	mov	r2, #1
   18070:	strb	r2, [r3, #28]
   18074:	ldr	r3, [fp, #-16]
   18078:	mov	r2, #0
   1807c:	str	r2, [r3, #20]
   18080:	ldr	r3, [fp, #-16]
   18084:	mov	r2, #0
   18088:	str	r2, [r3, #24]
   1808c:	mov	r3, #0
   18090:	str	r3, [fp, #-8]
   18094:	b	180b4 <__assert_fail@plt+0x6eec>
   18098:	ldr	r3, [fp, #-16]
   1809c:	ldr	r2, [fp, #-8]
   180a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   180a4:	str	r1, [r3, r2, lsl #2]
   180a8:	ldr	r3, [fp, #-8]
   180ac:	add	r3, r3, #1
   180b0:	str	r3, [fp, #-8]
   180b4:	ldr	r3, [fp, #-8]
   180b8:	cmp	r3, #3
   180bc:	ble	18098 <__assert_fail@plt+0x6ed0>
   180c0:	ldr	r3, [fp, #-16]
   180c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   180c8:	str	r2, [r3, #16]
   180cc:	nop	{0}
   180d0:	add	sp, fp, #0
   180d4:	pop	{fp}		; (ldr fp, [sp], #4)
   180d8:	bx	lr
   180dc:	push	{fp}		; (str fp, [sp, #-4]!)
   180e0:	add	fp, sp, #0
   180e4:	sub	sp, sp, #12
   180e8:	str	r0, [fp, #-8]
   180ec:	ldr	r3, [fp, #-8]
   180f0:	ldrb	r3, [r3, #28]
   180f4:	mov	r0, r3
   180f8:	add	sp, fp, #0
   180fc:	pop	{fp}		; (ldr fp, [sp], #4)
   18100:	bx	lr
   18104:	push	{fp}		; (str fp, [sp, #-4]!)
   18108:	add	fp, sp, #0
   1810c:	sub	sp, sp, #20
   18110:	str	r0, [fp, #-16]
   18114:	str	r1, [fp, #-20]	; 0xffffffec
   18118:	ldr	r3, [fp, #-16]
   1811c:	ldr	r3, [r3, #20]
   18120:	ldr	r2, [fp, #-16]
   18124:	ldrb	r2, [r2, #28]
   18128:	eor	r2, r2, #1
   1812c:	uxtb	r2, r2
   18130:	add	r3, r3, r2
   18134:	and	r3, r3, #3
   18138:	str	r3, [fp, #-8]
   1813c:	ldr	r3, [fp, #-16]
   18140:	ldr	r2, [fp, #-8]
   18144:	ldr	r3, [r3, r2, lsl #2]
   18148:	str	r3, [fp, #-12]
   1814c:	ldr	r3, [fp, #-16]
   18150:	ldr	r2, [fp, #-8]
   18154:	ldr	r1, [fp, #-20]	; 0xffffffec
   18158:	str	r1, [r3, r2, lsl #2]
   1815c:	ldr	r3, [fp, #-16]
   18160:	ldr	r2, [fp, #-8]
   18164:	str	r2, [r3, #20]
   18168:	ldr	r3, [fp, #-16]
   1816c:	ldr	r3, [r3, #24]
   18170:	ldr	r2, [fp, #-8]
   18174:	cmp	r2, r3
   18178:	bne	181a4 <__assert_fail@plt+0x6fdc>
   1817c:	ldr	r3, [fp, #-16]
   18180:	ldr	r3, [r3, #24]
   18184:	ldr	r2, [fp, #-16]
   18188:	ldrb	r2, [r2, #28]
   1818c:	eor	r2, r2, #1
   18190:	uxtb	r2, r2
   18194:	add	r3, r3, r2
   18198:	and	r2, r3, #3
   1819c:	ldr	r3, [fp, #-16]
   181a0:	str	r2, [r3, #24]
   181a4:	ldr	r3, [fp, #-16]
   181a8:	mov	r2, #0
   181ac:	strb	r2, [r3, #28]
   181b0:	ldr	r3, [fp, #-12]
   181b4:	mov	r0, r3
   181b8:	add	sp, fp, #0
   181bc:	pop	{fp}		; (ldr fp, [sp], #4)
   181c0:	bx	lr
   181c4:	str	fp, [sp, #-8]!
   181c8:	str	lr, [sp, #4]
   181cc:	add	fp, sp, #4
   181d0:	sub	sp, sp, #16
   181d4:	str	r0, [fp, #-16]
   181d8:	ldr	r0, [fp, #-16]
   181dc:	bl	180dc <__assert_fail@plt+0x6f14>
   181e0:	mov	r3, r0
   181e4:	cmp	r3, #0
   181e8:	beq	181f0 <__assert_fail@plt+0x7028>
   181ec:	bl	11198 <abort@plt>
   181f0:	ldr	r3, [fp, #-16]
   181f4:	ldr	r2, [r3, #20]
   181f8:	ldr	r3, [fp, #-16]
   181fc:	ldr	r3, [r3, r2, lsl #2]
   18200:	str	r3, [fp, #-8]
   18204:	ldr	r3, [fp, #-16]
   18208:	ldr	r2, [r3, #20]
   1820c:	ldr	r3, [fp, #-16]
   18210:	ldr	r1, [r3, #16]
   18214:	ldr	r3, [fp, #-16]
   18218:	str	r1, [r3, r2, lsl #2]
   1821c:	ldr	r3, [fp, #-16]
   18220:	ldr	r2, [r3, #20]
   18224:	ldr	r3, [fp, #-16]
   18228:	ldr	r3, [r3, #24]
   1822c:	cmp	r2, r3
   18230:	bne	18244 <__assert_fail@plt+0x707c>
   18234:	ldr	r3, [fp, #-16]
   18238:	mov	r2, #1
   1823c:	strb	r2, [r3, #28]
   18240:	b	1825c <__assert_fail@plt+0x7094>
   18244:	ldr	r3, [fp, #-16]
   18248:	ldr	r3, [r3, #20]
   1824c:	add	r3, r3, #3
   18250:	and	r2, r3, #3
   18254:	ldr	r3, [fp, #-16]
   18258:	str	r2, [r3, #20]
   1825c:	ldr	r3, [fp, #-8]
   18260:	mov	r0, r3
   18264:	sub	sp, fp, #4
   18268:	ldr	fp, [sp]
   1826c:	add	sp, sp, #4
   18270:	pop	{pc}		; (ldr pc, [sp], #4)
   18274:	push	{fp}		; (str fp, [sp, #-4]!)
   18278:	add	fp, sp, #0
   1827c:	sub	sp, sp, #12
   18280:	str	r0, [fp, #-8]
   18284:	ldr	r3, [fp, #-8]
   18288:	mov	r0, r3
   1828c:	add	sp, fp, #0
   18290:	pop	{fp}		; (ldr fp, [sp], #4)
   18294:	bx	lr
   18298:	str	fp, [sp, #-8]!
   1829c:	str	lr, [sp, #4]
   182a0:	add	fp, sp, #4
   182a4:	sub	sp, sp, #16
   182a8:	str	r0, [fp, #-16]
   182ac:	str	r1, [fp, #-20]	; 0xffffffec
   182b0:	mov	r0, #32
   182b4:	bl	1c03c <__assert_fail@plt+0xae74>
   182b8:	mov	r3, r0
   182bc:	str	r3, [fp, #-8]
   182c0:	ldr	r3, [fp, #-8]
   182c4:	mov	r2, #61	; 0x3d
   182c8:	strb	r2, [r3]
   182cc:	ldr	r3, [fp, #-8]
   182d0:	mov	r2, #1
   182d4:	strb	r2, [r3, #1]
   182d8:	ldr	r3, [fp, #-8]
   182dc:	movw	r2, #4095	; 0xfff
   182e0:	str	r2, [r3, #4]
   182e4:	ldr	r3, [fp, #-8]
   182e8:	ldr	r2, [fp, #-16]
   182ec:	str	r2, [r3, #8]
   182f0:	ldr	r3, [fp, #-8]
   182f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   182f8:	str	r2, [r3, #12]
   182fc:	ldr	r3, [fp, #-8]
   18300:	add	r3, r3, #16
   18304:	mov	r2, #0
   18308:	strb	r2, [r3, #1]
   1830c:	ldr	r3, [fp, #-8]
   18310:	mov	r0, r3
   18314:	sub	sp, fp, #4
   18318:	ldr	fp, [sp]
   1831c:	add	sp, sp, #4
   18320:	pop	{pc}		; (ldr pc, [sp], #4)
   18324:	str	fp, [sp, #-8]!
   18328:	str	lr, [sp, #4]
   1832c:	add	fp, sp, #4
   18330:	sub	sp, sp, #64	; 0x40
   18334:	str	r0, [fp, #-64]	; 0xffffffc0
   18338:	mov	r3, #0
   1833c:	str	r3, [fp, #-8]
   18340:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18344:	ldrb	r3, [r3]
   18348:	cmp	r3, #47	; 0x2f
   1834c:	bls	18430 <__assert_fail@plt+0x7268>
   18350:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18354:	ldrb	r3, [r3]
   18358:	cmp	r3, #55	; 0x37
   1835c:	bhi	18430 <__assert_fail@plt+0x7268>
   18360:	mov	r3, #0
   18364:	str	r3, [fp, #-16]
   18368:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1836c:	str	r3, [fp, #-12]
   18370:	ldr	r3, [fp, #-16]
   18374:	lsl	r2, r3, #3
   18378:	ldr	r3, [fp, #-12]
   1837c:	add	r1, r3, #1
   18380:	str	r1, [fp, #-12]
   18384:	ldrb	r3, [r3]
   18388:	add	r3, r2, r3
   1838c:	sub	r3, r3, #48	; 0x30
   18390:	str	r3, [fp, #-16]
   18394:	ldr	r3, [fp, #-16]
   18398:	cmp	r3, #4096	; 0x1000
   1839c:	bcc	183a8 <__assert_fail@plt+0x71e0>
   183a0:	mov	r3, #0
   183a4:	b	18918 <__assert_fail@plt+0x7750>
   183a8:	ldr	r3, [fp, #-12]
   183ac:	ldrb	r3, [r3]
   183b0:	cmp	r3, #47	; 0x2f
   183b4:	bls	183c8 <__assert_fail@plt+0x7200>
   183b8:	ldr	r3, [fp, #-12]
   183bc:	ldrb	r3, [r3]
   183c0:	cmp	r3, #55	; 0x37
   183c4:	bls	18370 <__assert_fail@plt+0x71a8>
   183c8:	ldr	r3, [fp, #-12]
   183cc:	ldrb	r3, [r3]
   183d0:	cmp	r3, #0
   183d4:	beq	183e0 <__assert_fail@plt+0x7218>
   183d8:	mov	r3, #0
   183dc:	b	18918 <__assert_fail@plt+0x7750>
   183e0:	ldr	r0, [fp, #-16]
   183e4:	bl	18274 <__assert_fail@plt+0x70ac>
   183e8:	str	r0, [fp, #-44]	; 0xffffffd4
   183ec:	ldr	r2, [fp, #-12]
   183f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   183f4:	sub	r3, r2, r3
   183f8:	cmp	r3, #4
   183fc:	bgt	18414 <__assert_fail@plt+0x724c>
   18400:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18404:	and	r3, r3, #3072	; 0xc00
   18408:	mvn	r3, r3, lsr #10
   1840c:	mvn	r3, r3, lsl #10
   18410:	b	18418 <__assert_fail@plt+0x7250>
   18414:	movw	r3, #4095	; 0xfff
   18418:	str	r3, [fp, #-48]	; 0xffffffd0
   1841c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18420:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18424:	bl	18298 <__assert_fail@plt+0x70d0>
   18428:	mov	r3, r0
   1842c:	b	18918 <__assert_fail@plt+0x7750>
   18430:	mov	r3, #1
   18434:	str	r3, [fp, #-20]	; 0xffffffec
   18438:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1843c:	str	r3, [fp, #-12]
   18440:	b	1849c <__assert_fail@plt+0x72d4>
   18444:	ldr	r3, [fp, #-12]
   18448:	ldrb	r3, [r3]
   1844c:	cmp	r3, #61	; 0x3d
   18450:	beq	18474 <__assert_fail@plt+0x72ac>
   18454:	ldr	r3, [fp, #-12]
   18458:	ldrb	r3, [r3]
   1845c:	cmp	r3, #43	; 0x2b
   18460:	beq	18474 <__assert_fail@plt+0x72ac>
   18464:	ldr	r3, [fp, #-12]
   18468:	ldrb	r3, [r3]
   1846c:	cmp	r3, #45	; 0x2d
   18470:	bne	1847c <__assert_fail@plt+0x72b4>
   18474:	mov	r3, #1
   18478:	b	18480 <__assert_fail@plt+0x72b8>
   1847c:	mov	r3, #0
   18480:	mov	r2, r3
   18484:	ldr	r3, [fp, #-20]	; 0xffffffec
   18488:	add	r3, r3, r2
   1848c:	str	r3, [fp, #-20]	; 0xffffffec
   18490:	ldr	r3, [fp, #-12]
   18494:	add	r3, r3, #1
   18498:	str	r3, [fp, #-12]
   1849c:	ldr	r3, [fp, #-12]
   184a0:	ldrb	r3, [r3]
   184a4:	cmp	r3, #0
   184a8:	bne	18444 <__assert_fail@plt+0x727c>
   184ac:	mov	r1, #16
   184b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   184b4:	bl	1c26c <__assert_fail@plt+0xb0a4>
   184b8:	mov	r3, r0
   184bc:	str	r3, [fp, #-52]	; 0xffffffcc
   184c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   184c4:	str	r3, [fp, #-12]
   184c8:	mov	r3, #0
   184cc:	str	r3, [fp, #-24]	; 0xffffffe8
   184d0:	ldr	r3, [fp, #-12]
   184d4:	ldrb	r3, [r3]
   184d8:	cmp	r3, #97	; 0x61
   184dc:	beq	18558 <__assert_fail@plt+0x7390>
   184e0:	cmp	r3, #97	; 0x61
   184e4:	bgt	18504 <__assert_fail@plt+0x733c>
   184e8:	cmp	r3, #45	; 0x2d
   184ec:	beq	1857c <__assert_fail@plt+0x73b4>
   184f0:	cmp	r3, #61	; 0x3d
   184f4:	beq	1857c <__assert_fail@plt+0x73b4>
   184f8:	cmp	r3, #43	; 0x2b
   184fc:	beq	1857c <__assert_fail@plt+0x73b4>
   18500:	b	1890c <__assert_fail@plt+0x7744>
   18504:	cmp	r3, #111	; 0x6f
   18508:	beq	18544 <__assert_fail@plt+0x737c>
   1850c:	cmp	r3, #117	; 0x75
   18510:	beq	18520 <__assert_fail@plt+0x7358>
   18514:	cmp	r3, #103	; 0x67
   18518:	beq	18530 <__assert_fail@plt+0x7368>
   1851c:	b	1890c <__assert_fail@plt+0x7744>
   18520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18524:	orr	r3, r3, #2496	; 0x9c0
   18528:	str	r3, [fp, #-24]	; 0xffffffe8
   1852c:	b	18568 <__assert_fail@plt+0x73a0>
   18530:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18534:	orr	r3, r3, #1072	; 0x430
   18538:	orr	r3, r3, #8
   1853c:	str	r3, [fp, #-24]	; 0xffffffe8
   18540:	b	18568 <__assert_fail@plt+0x73a0>
   18544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18548:	orr	r3, r3, #516	; 0x204
   1854c:	orr	r3, r3, #3
   18550:	str	r3, [fp, #-24]	; 0xffffffe8
   18554:	b	18568 <__assert_fail@plt+0x73a0>
   18558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1855c:	mvn	r3, r3, lsr #12
   18560:	mvn	r3, r3, lsl #12
   18564:	str	r3, [fp, #-24]	; 0xffffffe8
   18568:	ldr	r3, [fp, #-12]
   1856c:	add	r3, r3, #1
   18570:	str	r3, [fp, #-12]
   18574:	b	184d0 <__assert_fail@plt+0x7308>
   18578:	nop	{0}
   1857c:	ldr	r3, [fp, #-12]
   18580:	add	r2, r3, #1
   18584:	str	r2, [fp, #-12]
   18588:	ldrb	r3, [r3]
   1858c:	strb	r3, [fp, #-53]	; 0xffffffcb
   18590:	mov	r3, #0
   18594:	str	r3, [fp, #-32]	; 0xffffffe0
   18598:	mov	r3, #3
   1859c:	strb	r3, [fp, #-33]	; 0xffffffdf
   185a0:	ldr	r3, [fp, #-12]
   185a4:	ldrb	r3, [r3]
   185a8:	cmp	r3, #103	; 0x67
   185ac:	beq	186a0 <__assert_fail@plt+0x74d8>
   185b0:	cmp	r3, #103	; 0x67
   185b4:	bgt	185c8 <__assert_fail@plt+0x7400>
   185b8:	sub	r3, r3, #48	; 0x30
   185bc:	cmp	r3, #7
   185c0:	bhi	186d0 <__assert_fail@plt+0x7508>
   185c4:	b	185dc <__assert_fail@plt+0x7414>
   185c8:	cmp	r3, #111	; 0x6f
   185cc:	beq	186b8 <__assert_fail@plt+0x74f0>
   185d0:	cmp	r3, #117	; 0x75
   185d4:	beq	18688 <__assert_fail@plt+0x74c0>
   185d8:	b	186d0 <__assert_fail@plt+0x7508>
   185dc:	mov	r3, #0
   185e0:	str	r3, [fp, #-40]	; 0xffffffd8
   185e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   185e8:	lsl	r2, r3, #3
   185ec:	ldr	r3, [fp, #-12]
   185f0:	add	r1, r3, #1
   185f4:	str	r1, [fp, #-12]
   185f8:	ldrb	r3, [r3]
   185fc:	add	r3, r2, r3
   18600:	sub	r3, r3, #48	; 0x30
   18604:	str	r3, [fp, #-40]	; 0xffffffd8
   18608:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1860c:	cmp	r3, #4096	; 0x1000
   18610:	bcs	188f8 <__assert_fail@plt+0x7730>
   18614:	ldr	r3, [fp, #-12]
   18618:	ldrb	r3, [r3]
   1861c:	cmp	r3, #47	; 0x2f
   18620:	bls	18634 <__assert_fail@plt+0x746c>
   18624:	ldr	r3, [fp, #-12]
   18628:	ldrb	r3, [r3]
   1862c:	cmp	r3, #55	; 0x37
   18630:	bls	185e4 <__assert_fail@plt+0x741c>
   18634:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18638:	cmp	r3, #0
   1863c:	bne	18900 <__assert_fail@plt+0x7738>
   18640:	ldr	r3, [fp, #-12]
   18644:	ldrb	r3, [r3]
   18648:	cmp	r3, #0
   1864c:	beq	18660 <__assert_fail@plt+0x7498>
   18650:	ldr	r3, [fp, #-12]
   18654:	ldrb	r3, [r3]
   18658:	cmp	r3, #44	; 0x2c
   1865c:	bne	18900 <__assert_fail@plt+0x7738>
   18660:	movw	r3, #4095	; 0xfff
   18664:	str	r3, [fp, #-32]	; 0xffffffe0
   18668:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1866c:	str	r3, [fp, #-24]	; 0xffffffe8
   18670:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18674:	bl	18274 <__assert_fail@plt+0x70ac>
   18678:	str	r0, [fp, #-28]	; 0xffffffe4
   1867c:	mov	r3, #1
   18680:	strb	r3, [fp, #-33]	; 0xffffffdf
   18684:	b	187ec <__assert_fail@plt+0x7624>
   18688:	mov	r3, #448	; 0x1c0
   1868c:	str	r3, [fp, #-28]	; 0xffffffe4
   18690:	ldr	r3, [fp, #-12]
   18694:	add	r3, r3, #1
   18698:	str	r3, [fp, #-12]
   1869c:	b	187ec <__assert_fail@plt+0x7624>
   186a0:	mov	r3, #56	; 0x38
   186a4:	str	r3, [fp, #-28]	; 0xffffffe4
   186a8:	ldr	r3, [fp, #-12]
   186ac:	add	r3, r3, #1
   186b0:	str	r3, [fp, #-12]
   186b4:	b	187ec <__assert_fail@plt+0x7624>
   186b8:	mov	r3, #7
   186bc:	str	r3, [fp, #-28]	; 0xffffffe4
   186c0:	ldr	r3, [fp, #-12]
   186c4:	add	r3, r3, #1
   186c8:	str	r3, [fp, #-12]
   186cc:	b	187ec <__assert_fail@plt+0x7624>
   186d0:	mov	r3, #0
   186d4:	str	r3, [fp, #-28]	; 0xffffffe4
   186d8:	mov	r3, #1
   186dc:	strb	r3, [fp, #-33]	; 0xffffffdf
   186e0:	ldr	r3, [fp, #-12]
   186e4:	ldrb	r3, [r3]
   186e8:	sub	r3, r3, #88	; 0x58
   186ec:	cmp	r3, #32
   186f0:	ldrls	pc, [pc, r3, lsl #2]
   186f4:	b	187e8 <__assert_fail@plt+0x7620>
   186f8:	andeq	r8, r1, ip, lsr #15
   186fc:	andeq	r8, r1, r8, ror #15
   18700:	andeq	r8, r1, r8, ror #15
   18704:	andeq	r8, r1, r8, ror #15
   18708:	andeq	r8, r1, r8, ror #15
   1870c:	andeq	r8, r1, r8, ror #15
   18710:	andeq	r8, r1, r8, ror #15
   18714:	andeq	r8, r1, r8, ror #15
   18718:	andeq	r8, r1, r8, ror #15
   1871c:	andeq	r8, r1, r8, ror #15
   18720:	andeq	r8, r1, r8, ror #15
   18724:	andeq	r8, r1, r8, ror #15
   18728:	andeq	r8, r1, r8, ror #15
   1872c:	andeq	r8, r1, r8, ror #15
   18730:	andeq	r8, r1, r8, ror #15
   18734:	andeq	r8, r1, r8, ror #15
   18738:	andeq	r8, r1, r8, ror #15
   1873c:	andeq	r8, r1, r8, ror #15
   18740:	andeq	r8, r1, r8, ror #15
   18744:	andeq	r8, r1, r8, ror #15
   18748:	andeq	r8, r1, r8, ror #15
   1874c:	andeq	r8, r1, r8, ror #15
   18750:	andeq	r8, r1, r8, ror #15
   18754:	andeq	r8, r1, r8, ror #15
   18758:	andeq	r8, r1, r8, ror #15
   1875c:	andeq	r8, r1, r8, ror #15
   18760:	andeq	r8, r1, ip, ror r7
   18764:			; <UNDEFINED> instruction: 0x000187b8
   18768:	andeq	r8, r1, r8, asr #15
   1876c:	andeq	r8, r1, r8, ror #15
   18770:	andeq	r8, r1, r8, ror #15
   18774:	andeq	r8, r1, ip, lsl #15
   18778:	muleq	r1, ip, r7
   1877c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18780:	orr	r3, r3, #292	; 0x124
   18784:	str	r3, [fp, #-28]	; 0xffffffe4
   18788:	b	187d8 <__assert_fail@plt+0x7610>
   1878c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18790:	orr	r3, r3, #146	; 0x92
   18794:	str	r3, [fp, #-28]	; 0xffffffe4
   18798:	b	187d8 <__assert_fail@plt+0x7610>
   1879c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   187a0:	orr	r3, r3, #73	; 0x49
   187a4:	str	r3, [fp, #-28]	; 0xffffffe4
   187a8:	b	187d8 <__assert_fail@plt+0x7610>
   187ac:	mov	r3, #2
   187b0:	strb	r3, [fp, #-33]	; 0xffffffdf
   187b4:	b	187d8 <__assert_fail@plt+0x7610>
   187b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   187bc:	orr	r3, r3, #3072	; 0xc00
   187c0:	str	r3, [fp, #-28]	; 0xffffffe4
   187c4:	b	187d8 <__assert_fail@plt+0x7610>
   187c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   187cc:	orr	r3, r3, #512	; 0x200
   187d0:	str	r3, [fp, #-28]	; 0xffffffe4
   187d4:	nop	{0}
   187d8:	ldr	r3, [fp, #-12]
   187dc:	add	r3, r3, #1
   187e0:	str	r3, [fp, #-12]
   187e4:	b	186e0 <__assert_fail@plt+0x7518>
   187e8:	nop	{0}
   187ec:	ldr	r3, [fp, #-8]
   187f0:	add	r2, r3, #1
   187f4:	str	r2, [fp, #-8]
   187f8:	lsl	r3, r3, #4
   187fc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18800:	add	r3, r2, r3
   18804:	str	r3, [fp, #-60]	; 0xffffffc4
   18808:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1880c:	ldrb	r2, [fp, #-53]	; 0xffffffcb
   18810:	strb	r2, [r3]
   18814:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18818:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   1881c:	strb	r2, [r3, #1]
   18820:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18824:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18828:	str	r2, [r3, #4]
   1882c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18830:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18834:	str	r2, [r3, #8]
   18838:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1883c:	cmp	r3, #0
   18840:	bne	18868 <__assert_fail@plt+0x76a0>
   18844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18848:	cmp	r3, #0
   1884c:	beq	18860 <__assert_fail@plt+0x7698>
   18850:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18854:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18858:	and	r3, r3, r2
   1885c:	b	1886c <__assert_fail@plt+0x76a4>
   18860:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18864:	b	1886c <__assert_fail@plt+0x76a4>
   18868:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1886c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18870:	str	r3, [r2, #12]
   18874:	ldr	r3, [fp, #-12]
   18878:	ldrb	r3, [r3]
   1887c:	cmp	r3, #61	; 0x3d
   18880:	beq	18578 <__assert_fail@plt+0x73b0>
   18884:	ldr	r3, [fp, #-12]
   18888:	ldrb	r3, [r3]
   1888c:	cmp	r3, #43	; 0x2b
   18890:	beq	18578 <__assert_fail@plt+0x73b0>
   18894:	ldr	r3, [fp, #-12]
   18898:	ldrb	r3, [r3]
   1889c:	cmp	r3, #45	; 0x2d
   188a0:	beq	18578 <__assert_fail@plt+0x73b0>
   188a4:	ldr	r3, [fp, #-12]
   188a8:	ldrb	r3, [r3]
   188ac:	cmp	r3, #44	; 0x2c
   188b0:	bne	188c4 <__assert_fail@plt+0x76fc>
   188b4:	ldr	r3, [fp, #-12]
   188b8:	add	r3, r3, #1
   188bc:	str	r3, [fp, #-12]
   188c0:	b	184c8 <__assert_fail@plt+0x7300>
   188c4:	nop	{0}
   188c8:	ldr	r3, [fp, #-12]
   188cc:	ldrb	r3, [r3]
   188d0:	cmp	r3, #0
   188d4:	bne	18908 <__assert_fail@plt+0x7740>
   188d8:	ldr	r3, [fp, #-8]
   188dc:	lsl	r3, r3, #4
   188e0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   188e4:	add	r3, r2, r3
   188e8:	mov	r2, #0
   188ec:	strb	r2, [r3, #1]
   188f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   188f4:	b	18918 <__assert_fail@plt+0x7750>
   188f8:	nop	{0}
   188fc:	b	1890c <__assert_fail@plt+0x7744>
   18900:	nop	{0}
   18904:	b	1890c <__assert_fail@plt+0x7744>
   18908:	nop	{0}
   1890c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18910:	bl	1d918 <__assert_fail@plt+0xc750>
   18914:	mov	r3, #0
   18918:	mov	r0, r3
   1891c:	sub	sp, fp, #4
   18920:	ldr	fp, [sp]
   18924:	add	sp, sp, #4
   18928:	pop	{pc}		; (ldr pc, [sp], #4)
   1892c:	str	fp, [sp, #-8]!
   18930:	str	lr, [sp, #4]
   18934:	add	fp, sp, #4
   18938:	sub	sp, sp, #112	; 0x70
   1893c:	str	r0, [fp, #-112]	; 0xffffff90
   18940:	sub	r3, fp, #108	; 0x6c
   18944:	mov	r1, r3
   18948:	ldr	r0, [fp, #-112]	; 0xffffff90
   1894c:	bl	1e77c <__assert_fail@plt+0xd5b4>
   18950:	mov	r3, r0
   18954:	cmp	r3, #0
   18958:	beq	18964 <__assert_fail@plt+0x779c>
   1895c:	mov	r3, #0
   18960:	b	18978 <__assert_fail@plt+0x77b0>
   18964:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18968:	movw	r1, #4095	; 0xfff
   1896c:	mov	r0, r3
   18970:	bl	18298 <__assert_fail@plt+0x70d0>
   18974:	mov	r3, r0
   18978:	mov	r0, r3
   1897c:	sub	sp, fp, #4
   18980:	ldr	fp, [sp]
   18984:	add	sp, sp, #4
   18988:	pop	{pc}		; (ldr pc, [sp], #4)
   1898c:	push	{fp}		; (str fp, [sp, #-4]!)
   18990:	add	fp, sp, #0
   18994:	sub	sp, sp, #44	; 0x2c
   18998:	str	r0, [fp, #-32]	; 0xffffffe0
   1899c:	str	r2, [fp, #-40]	; 0xffffffd8
   189a0:	str	r3, [fp, #-44]	; 0xffffffd4
   189a4:	mov	r3, r1
   189a8:	strb	r3, [fp, #-33]	; 0xffffffdf
   189ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   189b0:	ubfx	r3, r3, #0, #12
   189b4:	str	r3, [fp, #-8]
   189b8:	mov	r3, #0
   189bc:	str	r3, [fp, #-12]
   189c0:	b	18bdc <__assert_fail@plt+0x7a14>
   189c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   189c8:	ldr	r3, [r3, #4]
   189cc:	str	r3, [fp, #-20]	; 0xffffffec
   189d0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   189d4:	cmp	r3, #0
   189d8:	beq	189e4 <__assert_fail@plt+0x781c>
   189dc:	mov	r2, #3072	; 0xc00
   189e0:	b	189e8 <__assert_fail@plt+0x7820>
   189e4:	mov	r2, #0
   189e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   189ec:	ldr	r3, [r3, #12]
   189f0:	mvn	r3, r3
   189f4:	and	r3, r3, r2
   189f8:	str	r3, [fp, #-24]	; 0xffffffe8
   189fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18a00:	ldr	r3, [r3, #8]
   18a04:	str	r3, [fp, #-16]
   18a08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18a0c:	ldrb	r3, [r3, #1]
   18a10:	cmp	r3, #2
   18a14:	beq	18aa8 <__assert_fail@plt+0x78e0>
   18a18:	cmp	r3, #3
   18a1c:	beq	18a28 <__assert_fail@plt+0x7860>
   18a20:	cmp	r3, #1
   18a24:	b	18ad0 <__assert_fail@plt+0x7908>
   18a28:	ldr	r2, [fp, #-16]
   18a2c:	ldr	r3, [fp, #-8]
   18a30:	and	r3, r3, r2
   18a34:	str	r3, [fp, #-16]
   18a38:	ldr	r3, [fp, #-16]
   18a3c:	and	r3, r3, #292	; 0x124
   18a40:	cmp	r3, #0
   18a44:	beq	18a50 <__assert_fail@plt+0x7888>
   18a48:	mov	r2, #292	; 0x124
   18a4c:	b	18a54 <__assert_fail@plt+0x788c>
   18a50:	mov	r2, #0
   18a54:	ldr	r3, [fp, #-16]
   18a58:	and	r3, r3, #146	; 0x92
   18a5c:	cmp	r3, #0
   18a60:	beq	18a6c <__assert_fail@plt+0x78a4>
   18a64:	mov	r3, #146	; 0x92
   18a68:	b	18a70 <__assert_fail@plt+0x78a8>
   18a6c:	mov	r3, #0
   18a70:	orr	r3, r2, r3
   18a74:	ldr	r2, [fp, #-16]
   18a78:	and	r2, r2, #73	; 0x49
   18a7c:	cmp	r2, #0
   18a80:	beq	18a8c <__assert_fail@plt+0x78c4>
   18a84:	mov	r2, #73	; 0x49
   18a88:	b	18a90 <__assert_fail@plt+0x78c8>
   18a8c:	mov	r2, #0
   18a90:	orr	r3, r2, r3
   18a94:	mov	r2, r3
   18a98:	ldr	r3, [fp, #-16]
   18a9c:	orr	r3, r3, r2
   18aa0:	str	r3, [fp, #-16]
   18aa4:	b	18ad0 <__assert_fail@plt+0x7908>
   18aa8:	ldr	r3, [fp, #-8]
   18aac:	and	r2, r3, #73	; 0x49
   18ab0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18ab4:	orr	r3, r2, r3
   18ab8:	cmp	r3, #0
   18abc:	beq	18acc <__assert_fail@plt+0x7904>
   18ac0:	ldr	r3, [fp, #-16]
   18ac4:	orr	r3, r3, #73	; 0x49
   18ac8:	str	r3, [fp, #-16]
   18acc:	nop	{0}
   18ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ad4:	cmp	r3, #0
   18ad8:	bne	18ae8 <__assert_fail@plt+0x7920>
   18adc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18ae0:	mvn	r3, r3
   18ae4:	b	18aec <__assert_fail@plt+0x7924>
   18ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18aec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18af0:	mvn	r2, r2
   18af4:	and	r3, r3, r2
   18af8:	ldr	r2, [fp, #-16]
   18afc:	and	r3, r3, r2
   18b00:	str	r3, [fp, #-16]
   18b04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18b08:	ldrb	r3, [r3]
   18b0c:	cmp	r3, #45	; 0x2d
   18b10:	beq	18ba8 <__assert_fail@plt+0x79e0>
   18b14:	cmp	r3, #61	; 0x3d
   18b18:	beq	18b28 <__assert_fail@plt+0x7960>
   18b1c:	cmp	r3, #43	; 0x2b
   18b20:	beq	18b84 <__assert_fail@plt+0x79bc>
   18b24:	b	18bd0 <__assert_fail@plt+0x7a08>
   18b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b2c:	cmp	r3, #0
   18b30:	beq	18b40 <__assert_fail@plt+0x7978>
   18b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b38:	mvn	r3, r3
   18b3c:	b	18b44 <__assert_fail@plt+0x797c>
   18b40:	mov	r3, #0
   18b44:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18b48:	orr	r3, r3, r2
   18b4c:	str	r3, [fp, #-28]	; 0xffffffe4
   18b50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b54:	mvn	r3, r3
   18b58:	ubfx	r3, r3, #0, #12
   18b5c:	ldr	r2, [fp, #-12]
   18b60:	orr	r3, r2, r3
   18b64:	str	r3, [fp, #-12]
   18b68:	ldr	r2, [fp, #-8]
   18b6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b70:	and	r3, r3, r2
   18b74:	ldr	r2, [fp, #-16]
   18b78:	orr	r3, r2, r3
   18b7c:	str	r3, [fp, #-8]
   18b80:	b	18bd0 <__assert_fail@plt+0x7a08>
   18b84:	ldr	r2, [fp, #-12]
   18b88:	ldr	r3, [fp, #-16]
   18b8c:	orr	r3, r2, r3
   18b90:	str	r3, [fp, #-12]
   18b94:	ldr	r2, [fp, #-8]
   18b98:	ldr	r3, [fp, #-16]
   18b9c:	orr	r3, r2, r3
   18ba0:	str	r3, [fp, #-8]
   18ba4:	b	18bd0 <__assert_fail@plt+0x7a08>
   18ba8:	ldr	r2, [fp, #-12]
   18bac:	ldr	r3, [fp, #-16]
   18bb0:	orr	r3, r2, r3
   18bb4:	str	r3, [fp, #-12]
   18bb8:	ldr	r3, [fp, #-16]
   18bbc:	mvn	r3, r3
   18bc0:	ldr	r2, [fp, #-8]
   18bc4:	and	r3, r3, r2
   18bc8:	str	r3, [fp, #-8]
   18bcc:	nop	{0}
   18bd0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18bd4:	add	r3, r3, #16
   18bd8:	str	r3, [fp, #-44]	; 0xffffffd4
   18bdc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18be0:	ldrb	r3, [r3, #1]
   18be4:	cmp	r3, #0
   18be8:	bne	189c4 <__assert_fail@plt+0x77fc>
   18bec:	ldr	r3, [fp, #4]
   18bf0:	cmp	r3, #0
   18bf4:	beq	18c04 <__assert_fail@plt+0x7a3c>
   18bf8:	ldr	r3, [fp, #4]
   18bfc:	ldr	r2, [fp, #-12]
   18c00:	str	r2, [r3]
   18c04:	ldr	r3, [fp, #-8]
   18c08:	mov	r0, r3
   18c0c:	add	sp, fp, #0
   18c10:	pop	{fp}		; (ldr fp, [sp], #4)
   18c14:	bx	lr
   18c18:	push	{r2, r3}
   18c1c:	str	fp, [sp, #-8]!
   18c20:	str	lr, [sp, #4]
   18c24:	add	fp, sp, #4
   18c28:	sub	sp, sp, #16
   18c2c:	str	r0, [fp, #-16]
   18c30:	str	r1, [fp, #-20]	; 0xffffffec
   18c34:	mov	r3, #0
   18c38:	str	r3, [fp, #-8]
   18c3c:	ldr	r3, [fp, #4]
   18c40:	and	r3, r3, #64	; 0x40
   18c44:	cmp	r3, #0
   18c48:	beq	18c68 <__assert_fail@plt+0x7aa0>
   18c4c:	add	r3, fp, #8
   18c50:	str	r3, [fp, #-12]
   18c54:	ldr	r3, [fp, #-12]
   18c58:	add	r2, r3, #4
   18c5c:	str	r2, [fp, #-12]
   18c60:	ldr	r3, [r3]
   18c64:	str	r3, [fp, #-8]
   18c68:	ldr	r3, [fp, #-8]
   18c6c:	ldr	r2, [fp, #4]
   18c70:	ldr	r1, [fp, #-20]	; 0xffffffec
   18c74:	ldr	r0, [fp, #-16]
   18c78:	bl	11078 <openat64@plt>
   18c7c:	mov	r3, r0
   18c80:	mov	r0, r3
   18c84:	bl	1b76c <__assert_fail@plt+0xa5a4>
   18c88:	mov	r3, r0
   18c8c:	mov	r0, r3
   18c90:	sub	sp, fp, #4
   18c94:	ldr	fp, [sp]
   18c98:	ldr	lr, [sp, #4]
   18c9c:	add	sp, sp, #8
   18ca0:	add	sp, sp, #8
   18ca4:	bx	lr
   18ca8:	str	fp, [sp, #-8]!
   18cac:	str	lr, [sp, #4]
   18cb0:	add	fp, sp, #4
   18cb4:	sub	sp, sp, #32
   18cb8:	str	r0, [fp, #-24]	; 0xffffffe8
   18cbc:	str	r1, [fp, #-28]	; 0xffffffe4
   18cc0:	str	r2, [fp, #-32]	; 0xffffffe0
   18cc4:	str	r3, [fp, #-36]	; 0xffffffdc
   18cc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ccc:	orr	r3, r3, #540672	; 0x84000
   18cd0:	orr	r3, r3, #2304	; 0x900
   18cd4:	str	r3, [fp, #-8]
   18cd8:	ldr	r2, [fp, #-8]
   18cdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18ce0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18ce4:	bl	18c18 <__assert_fail@plt+0x7a50>
   18ce8:	str	r0, [fp, #-12]
   18cec:	ldr	r3, [fp, #-12]
   18cf0:	cmp	r3, #0
   18cf4:	bge	18d00 <__assert_fail@plt+0x7b38>
   18cf8:	mov	r3, #0
   18cfc:	b	18d54 <__assert_fail@plt+0x7b8c>
   18d00:	ldr	r0, [fp, #-12]
   18d04:	bl	1112c <fdopendir@plt>
   18d08:	str	r0, [fp, #-16]
   18d0c:	ldr	r3, [fp, #-16]
   18d10:	cmp	r3, #0
   18d14:	beq	18d28 <__assert_fail@plt+0x7b60>
   18d18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18d1c:	ldr	r2, [fp, #-12]
   18d20:	str	r2, [r3]
   18d24:	b	18d50 <__assert_fail@plt+0x7b88>
   18d28:	bl	1109c <__errno_location@plt>
   18d2c:	mov	r3, r0
   18d30:	ldr	r3, [r3]
   18d34:	str	r3, [fp, #-20]	; 0xffffffec
   18d38:	ldr	r0, [fp, #-12]
   18d3c:	bl	111a4 <close@plt>
   18d40:	bl	1109c <__errno_location@plt>
   18d44:	mov	r2, r0
   18d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d4c:	str	r3, [r2]
   18d50:	ldr	r3, [fp, #-16]
   18d54:	mov	r0, r3
   18d58:	sub	sp, fp, #4
   18d5c:	ldr	fp, [sp]
   18d60:	add	sp, sp, #4
   18d64:	pop	{pc}		; (ldr pc, [sp], #4)
   18d68:	str	fp, [sp, #-8]!
   18d6c:	str	lr, [sp, #4]
   18d70:	add	fp, sp, #4
   18d74:	sub	sp, sp, #16
   18d78:	str	r0, [fp, #-16]
   18d7c:	ldr	r3, [fp, #-16]
   18d80:	cmp	r3, #0
   18d84:	bne	18dac <__assert_fail@plt+0x7be4>
   18d88:	movw	r3, #376	; 0x178
   18d8c:	movt	r3, #3
   18d90:	ldr	r3, [r3]
   18d94:	mov	r2, #55	; 0x37
   18d98:	mov	r1, #1
   18d9c:	movw	r0, #62288	; 0xf350
   18da0:	movt	r0, #1
   18da4:	bl	10fac <fwrite@plt>
   18da8:	bl	11198 <abort@plt>
   18dac:	mov	r1, #47	; 0x2f
   18db0:	ldr	r0, [fp, #-16]
   18db4:	bl	110fc <strrchr@plt>
   18db8:	str	r0, [fp, #-8]
   18dbc:	ldr	r3, [fp, #-8]
   18dc0:	cmp	r3, #0
   18dc4:	beq	18dd4 <__assert_fail@plt+0x7c0c>
   18dc8:	ldr	r3, [fp, #-8]
   18dcc:	add	r3, r3, #1
   18dd0:	b	18dd8 <__assert_fail@plt+0x7c10>
   18dd4:	ldr	r3, [fp, #-16]
   18dd8:	str	r3, [fp, #-12]
   18ddc:	ldr	r2, [fp, #-12]
   18de0:	ldr	r3, [fp, #-16]
   18de4:	sub	r3, r2, r3
   18de8:	cmp	r3, #6
   18dec:	ble	18e5c <__assert_fail@plt+0x7c94>
   18df0:	ldr	r3, [fp, #-12]
   18df4:	sub	r3, r3, #7
   18df8:	mov	r2, #7
   18dfc:	movw	r1, #62344	; 0xf388
   18e00:	movt	r1, #1
   18e04:	mov	r0, r3
   18e08:	bl	1118c <strncmp@plt>
   18e0c:	mov	r3, r0
   18e10:	cmp	r3, #0
   18e14:	bne	18e5c <__assert_fail@plt+0x7c94>
   18e18:	ldr	r3, [fp, #-12]
   18e1c:	str	r3, [fp, #-16]
   18e20:	mov	r2, #3
   18e24:	movw	r1, #62352	; 0xf390
   18e28:	movt	r1, #1
   18e2c:	ldr	r0, [fp, #-12]
   18e30:	bl	1118c <strncmp@plt>
   18e34:	mov	r3, r0
   18e38:	cmp	r3, #0
   18e3c:	bne	18e5c <__assert_fail@plt+0x7c94>
   18e40:	ldr	r3, [fp, #-12]
   18e44:	add	r3, r3, #3
   18e48:	str	r3, [fp, #-16]
   18e4c:	movw	r3, #360	; 0x168
   18e50:	movt	r3, #3
   18e54:	ldr	r2, [fp, #-16]
   18e58:	str	r2, [r3]
   18e5c:	movw	r3, #432	; 0x1b0
   18e60:	movt	r3, #3
   18e64:	ldr	r2, [fp, #-16]
   18e68:	str	r2, [r3]
   18e6c:	movw	r3, #364	; 0x16c
   18e70:	movt	r3, #3
   18e74:	ldr	r2, [fp, #-16]
   18e78:	str	r2, [r3]
   18e7c:	nop	{0}
   18e80:	sub	sp, fp, #4
   18e84:	ldr	fp, [sp]
   18e88:	add	sp, sp, #4
   18e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e90:	str	fp, [sp, #-8]!
   18e94:	str	lr, [sp, #4]
   18e98:	add	fp, sp, #4
   18e9c:	sub	sp, sp, #16
   18ea0:	str	r0, [fp, #-16]
   18ea4:	bl	1109c <__errno_location@plt>
   18ea8:	mov	r3, r0
   18eac:	ldr	r3, [r3]
   18eb0:	str	r3, [fp, #-8]
   18eb4:	ldr	r3, [fp, #-16]
   18eb8:	cmp	r3, #0
   18ebc:	beq	18ec8 <__assert_fail@plt+0x7d00>
   18ec0:	ldr	r3, [fp, #-16]
   18ec4:	b	18ed0 <__assert_fail@plt+0x7d08>
   18ec8:	movw	r3, #436	; 0x1b4
   18ecc:	movt	r3, #3
   18ed0:	mov	r1, #48	; 0x30
   18ed4:	mov	r0, r3
   18ed8:	bl	1c75c <__assert_fail@plt+0xb594>
   18edc:	mov	r3, r0
   18ee0:	str	r3, [fp, #-12]
   18ee4:	bl	1109c <__errno_location@plt>
   18ee8:	mov	r2, r0
   18eec:	ldr	r3, [fp, #-8]
   18ef0:	str	r3, [r2]
   18ef4:	ldr	r3, [fp, #-12]
   18ef8:	mov	r0, r3
   18efc:	sub	sp, fp, #4
   18f00:	ldr	fp, [sp]
   18f04:	add	sp, sp, #4
   18f08:	pop	{pc}		; (ldr pc, [sp], #4)
   18f0c:	push	{fp}		; (str fp, [sp, #-4]!)
   18f10:	add	fp, sp, #0
   18f14:	sub	sp, sp, #12
   18f18:	str	r0, [fp, #-8]
   18f1c:	ldr	r3, [fp, #-8]
   18f20:	cmp	r3, #0
   18f24:	beq	18f30 <__assert_fail@plt+0x7d68>
   18f28:	ldr	r3, [fp, #-8]
   18f2c:	b	18f38 <__assert_fail@plt+0x7d70>
   18f30:	movw	r3, #436	; 0x1b4
   18f34:	movt	r3, #3
   18f38:	ldr	r3, [r3]
   18f3c:	mov	r0, r3
   18f40:	add	sp, fp, #0
   18f44:	pop	{fp}		; (ldr fp, [sp], #4)
   18f48:	bx	lr
   18f4c:	push	{fp}		; (str fp, [sp, #-4]!)
   18f50:	add	fp, sp, #0
   18f54:	sub	sp, sp, #12
   18f58:	str	r0, [fp, #-8]
   18f5c:	str	r1, [fp, #-12]
   18f60:	ldr	r3, [fp, #-8]
   18f64:	cmp	r3, #0
   18f68:	beq	18f74 <__assert_fail@plt+0x7dac>
   18f6c:	ldr	r3, [fp, #-8]
   18f70:	b	18f7c <__assert_fail@plt+0x7db4>
   18f74:	movw	r3, #436	; 0x1b4
   18f78:	movt	r3, #3
   18f7c:	ldr	r2, [fp, #-12]
   18f80:	str	r2, [r3]
   18f84:	nop	{0}
   18f88:	add	sp, fp, #0
   18f8c:	pop	{fp}		; (ldr fp, [sp], #4)
   18f90:	bx	lr
   18f94:	push	{fp}		; (str fp, [sp, #-4]!)
   18f98:	add	fp, sp, #0
   18f9c:	sub	sp, sp, #36	; 0x24
   18fa0:	str	r0, [fp, #-24]	; 0xffffffe8
   18fa4:	mov	r3, r1
   18fa8:	str	r2, [fp, #-32]	; 0xffffffe0
   18fac:	strb	r3, [fp, #-25]	; 0xffffffe7
   18fb0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   18fb4:	strb	r3, [fp, #-5]
   18fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18fbc:	cmp	r3, #0
   18fc0:	beq	18fcc <__assert_fail@plt+0x7e04>
   18fc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18fc8:	b	18fd4 <__assert_fail@plt+0x7e0c>
   18fcc:	movw	r3, #436	; 0x1b4
   18fd0:	movt	r3, #3
   18fd4:	add	r2, r3, #8
   18fd8:	ldrb	r3, [fp, #-5]
   18fdc:	lsr	r3, r3, #5
   18fe0:	uxtb	r3, r3
   18fe4:	lsl	r3, r3, #2
   18fe8:	add	r3, r2, r3
   18fec:	str	r3, [fp, #-12]
   18ff0:	ldrb	r3, [fp, #-5]
   18ff4:	and	r3, r3, #31
   18ff8:	str	r3, [fp, #-16]
   18ffc:	ldr	r3, [fp, #-12]
   19000:	ldr	r2, [r3]
   19004:	ldr	r3, [fp, #-16]
   19008:	lsr	r3, r2, r3
   1900c:	and	r3, r3, #1
   19010:	str	r3, [fp, #-20]	; 0xffffffec
   19014:	ldr	r3, [fp, #-12]
   19018:	ldr	r3, [r3]
   1901c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19020:	and	r1, r2, #1
   19024:	ldr	r2, [fp, #-20]	; 0xffffffec
   19028:	eor	r1, r1, r2
   1902c:	ldr	r2, [fp, #-16]
   19030:	lsl	r2, r1, r2
   19034:	eor	r2, r2, r3
   19038:	ldr	r3, [fp, #-12]
   1903c:	str	r2, [r3]
   19040:	ldr	r3, [fp, #-20]	; 0xffffffec
   19044:	mov	r0, r3
   19048:	add	sp, fp, #0
   1904c:	pop	{fp}		; (ldr fp, [sp], #4)
   19050:	bx	lr
   19054:	push	{fp}		; (str fp, [sp, #-4]!)
   19058:	add	fp, sp, #0
   1905c:	sub	sp, sp, #20
   19060:	str	r0, [fp, #-16]
   19064:	str	r1, [fp, #-20]	; 0xffffffec
   19068:	ldr	r3, [fp, #-16]
   1906c:	cmp	r3, #0
   19070:	bne	19080 <__assert_fail@plt+0x7eb8>
   19074:	movw	r3, #436	; 0x1b4
   19078:	movt	r3, #3
   1907c:	str	r3, [fp, #-16]
   19080:	ldr	r3, [fp, #-16]
   19084:	ldr	r3, [r3, #4]
   19088:	str	r3, [fp, #-8]
   1908c:	ldr	r3, [fp, #-16]
   19090:	ldr	r2, [fp, #-20]	; 0xffffffec
   19094:	str	r2, [r3, #4]
   19098:	ldr	r3, [fp, #-8]
   1909c:	mov	r0, r3
   190a0:	add	sp, fp, #0
   190a4:	pop	{fp}		; (ldr fp, [sp], #4)
   190a8:	bx	lr
   190ac:	str	fp, [sp, #-8]!
   190b0:	str	lr, [sp, #4]
   190b4:	add	fp, sp, #4
   190b8:	sub	sp, sp, #16
   190bc:	str	r0, [fp, #-8]
   190c0:	str	r1, [fp, #-12]
   190c4:	str	r2, [fp, #-16]
   190c8:	ldr	r3, [fp, #-8]
   190cc:	cmp	r3, #0
   190d0:	bne	190e0 <__assert_fail@plt+0x7f18>
   190d4:	movw	r3, #436	; 0x1b4
   190d8:	movt	r3, #3
   190dc:	str	r3, [fp, #-8]
   190e0:	ldr	r3, [fp, #-8]
   190e4:	mov	r2, #10
   190e8:	str	r2, [r3]
   190ec:	ldr	r3, [fp, #-12]
   190f0:	cmp	r3, #0
   190f4:	beq	19104 <__assert_fail@plt+0x7f3c>
   190f8:	ldr	r3, [fp, #-16]
   190fc:	cmp	r3, #0
   19100:	bne	19108 <__assert_fail@plt+0x7f40>
   19104:	bl	11198 <abort@plt>
   19108:	ldr	r3, [fp, #-8]
   1910c:	ldr	r2, [fp, #-12]
   19110:	str	r2, [r3, #40]	; 0x28
   19114:	ldr	r3, [fp, #-8]
   19118:	ldr	r2, [fp, #-16]
   1911c:	str	r2, [r3, #44]	; 0x2c
   19120:	nop	{0}
   19124:	sub	sp, fp, #4
   19128:	ldr	fp, [sp]
   1912c:	add	sp, sp, #4
   19130:	pop	{pc}		; (ldr pc, [sp], #4)
   19134:	str	fp, [sp, #-8]!
   19138:	str	lr, [sp, #4]
   1913c:	add	fp, sp, #4
   19140:	sub	sp, sp, #56	; 0x38
   19144:	str	r0, [fp, #-56]	; 0xffffffc8
   19148:	str	r1, [fp, #-60]	; 0xffffffc4
   1914c:	sub	r1, fp, #52	; 0x34
   19150:	mov	r2, #0
   19154:	mov	r3, #0
   19158:	strd	r2, [r1]
   1915c:	strd	r2, [r1, #8]
   19160:	strd	r2, [r1, #16]
   19164:	strd	r2, [r1, #24]
   19168:	strd	r2, [r1, #32]
   1916c:	strd	r2, [r1, #40]	; 0x28
   19170:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19174:	cmp	r3, #10
   19178:	bne	19180 <__assert_fail@plt+0x7fb8>
   1917c:	bl	11198 <abort@plt>
   19180:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19184:	str	r3, [fp, #-52]	; 0xffffffcc
   19188:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1918c:	mov	r2, r3
   19190:	sub	r3, fp, #52	; 0x34
   19194:	ldrd	r0, [r3]
   19198:	strd	r0, [r2]
   1919c:	ldrd	r0, [r3, #8]
   191a0:	strd	r0, [r2, #8]
   191a4:	ldrd	r0, [r3, #16]
   191a8:	strd	r0, [r2, #16]
   191ac:	ldrd	r0, [r3, #24]
   191b0:	strd	r0, [r2, #24]
   191b4:	ldrd	r0, [r3, #32]
   191b8:	strd	r0, [r2, #32]
   191bc:	ldrd	r0, [r3, #40]	; 0x28
   191c0:	strd	r0, [r2, #40]	; 0x28
   191c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   191c8:	sub	sp, fp, #4
   191cc:	ldr	fp, [sp]
   191d0:	add	sp, sp, #4
   191d4:	pop	{pc}		; (ldr pc, [sp], #4)
   191d8:	str	fp, [sp, #-8]!
   191dc:	str	lr, [sp, #4]
   191e0:	add	fp, sp, #4
   191e4:	sub	sp, sp, #16
   191e8:	str	r0, [fp, #-16]
   191ec:	str	r1, [fp, #-20]	; 0xffffffec
   191f0:	ldr	r0, [fp, #-16]
   191f4:	bl	11060 <gettext@plt>
   191f8:	str	r0, [fp, #-8]
   191fc:	ldr	r2, [fp, #-8]
   19200:	ldr	r3, [fp, #-16]
   19204:	cmp	r2, r3
   19208:	beq	19214 <__assert_fail@plt+0x804c>
   1920c:	ldr	r3, [fp, #-8]
   19210:	b	192c4 <__assert_fail@plt+0x80fc>
   19214:	bl	1dc28 <__assert_fail@plt+0xca60>
   19218:	str	r0, [fp, #-12]
   1921c:	movw	r1, #62544	; 0xf450
   19220:	movt	r1, #1
   19224:	ldr	r0, [fp, #-12]
   19228:	bl	1cf90 <__assert_fail@plt+0xbdc8>
   1922c:	mov	r3, r0
   19230:	cmp	r3, #0
   19234:	bne	19260 <__assert_fail@plt+0x8098>
   19238:	ldr	r3, [fp, #-16]
   1923c:	ldrb	r3, [r3]
   19240:	cmp	r3, #96	; 0x60
   19244:	bne	19254 <__assert_fail@plt+0x808c>
   19248:	movw	r3, #62552	; 0xf458
   1924c:	movt	r3, #1
   19250:	b	192c4 <__assert_fail@plt+0x80fc>
   19254:	movw	r3, #62556	; 0xf45c
   19258:	movt	r3, #1
   1925c:	b	192c4 <__assert_fail@plt+0x80fc>
   19260:	movw	r1, #62560	; 0xf460
   19264:	movt	r1, #1
   19268:	ldr	r0, [fp, #-12]
   1926c:	bl	1cf90 <__assert_fail@plt+0xbdc8>
   19270:	mov	r3, r0
   19274:	cmp	r3, #0
   19278:	bne	192a4 <__assert_fail@plt+0x80dc>
   1927c:	ldr	r3, [fp, #-16]
   19280:	ldrb	r3, [r3]
   19284:	cmp	r3, #96	; 0x60
   19288:	bne	19298 <__assert_fail@plt+0x80d0>
   1928c:	movw	r3, #62568	; 0xf468
   19290:	movt	r3, #1
   19294:	b	192c4 <__assert_fail@plt+0x80fc>
   19298:	movw	r3, #62572	; 0xf46c
   1929c:	movt	r3, #1
   192a0:	b	192c4 <__assert_fail@plt+0x80fc>
   192a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   192a8:	cmp	r3, #9
   192ac:	bne	192bc <__assert_fail@plt+0x80f4>
   192b0:	movw	r3, #62576	; 0xf470
   192b4:	movt	r3, #1
   192b8:	b	192c4 <__assert_fail@plt+0x80fc>
   192bc:	movw	r3, #62580	; 0xf474
   192c0:	movt	r3, #1
   192c4:	mov	r0, r3
   192c8:	sub	sp, fp, #4
   192cc:	ldr	fp, [sp]
   192d0:	add	sp, sp, #4
   192d4:	pop	{pc}		; (ldr pc, [sp], #4)
   192d8:	str	r4, [sp, #-12]!
   192dc:	str	fp, [sp, #4]
   192e0:	str	lr, [sp, #8]
   192e4:	add	fp, sp, #8
   192e8:	sub	sp, sp, #116	; 0x74
   192ec:	str	r0, [fp, #-88]	; 0xffffffa8
   192f0:	str	r1, [fp, #-92]	; 0xffffffa4
   192f4:	str	r2, [fp, #-96]	; 0xffffffa0
   192f8:	str	r3, [fp, #-100]	; 0xffffff9c
   192fc:	mov	r3, #0
   19300:	str	r3, [fp, #-20]	; 0xffffffec
   19304:	mov	r3, #0
   19308:	str	r3, [fp, #-24]	; 0xffffffe8
   1930c:	mov	r3, #0
   19310:	str	r3, [fp, #-28]	; 0xffffffe4
   19314:	mov	r3, #0
   19318:	str	r3, [fp, #-32]	; 0xffffffe0
   1931c:	mov	r3, #0
   19320:	strb	r3, [fp, #-33]	; 0xffffffdf
   19324:	bl	10fc4 <__ctype_get_mb_cur_max@plt>
   19328:	mov	r3, r0
   1932c:	cmp	r3, #1
   19330:	moveq	r3, #1
   19334:	movne	r3, #0
   19338:	strb	r3, [fp, #-57]	; 0xffffffc7
   1933c:	ldr	r3, [fp, #8]
   19340:	and	r3, r3, #2
   19344:	cmp	r3, #0
   19348:	movne	r3, #1
   1934c:	moveq	r3, #0
   19350:	strb	r3, [fp, #-34]	; 0xffffffde
   19354:	mov	r3, #0
   19358:	strb	r3, [fp, #-35]	; 0xffffffdd
   1935c:	mov	r3, #0
   19360:	strb	r3, [fp, #-36]	; 0xffffffdc
   19364:	mov	r3, #1
   19368:	strb	r3, [fp, #-37]	; 0xffffffdb
   1936c:	ldr	r3, [fp, #4]
   19370:	cmp	r3, #10
   19374:	ldrls	pc, [pc, r3, lsl #2]
   19378:	b	19590 <__assert_fail@plt+0x83c8>
   1937c:	andeq	r9, r1, r4, lsl #11
   19380:	strdeq	r9, [r1], -ip
   19384:	andeq	r9, r1, r0, lsr #10
   19388:	strdeq	r9, [r1], -r4
   1938c:	andeq	r9, r1, r4, lsl #10
   19390:			; <UNDEFINED> instruction: 0x000193b8
   19394:	andeq	r9, r1, r8, lsr #7
   19398:	andeq	r9, r1, ip, lsl r4
   1939c:	andeq	r9, r1, r0, lsr r4
   193a0:	andeq	r9, r1, r0, lsr r4
   193a4:	andeq	r9, r1, r0, lsr r4
   193a8:	mov	r3, #5
   193ac:	str	r3, [fp, #4]
   193b0:	mov	r3, #1
   193b4:	strb	r3, [fp, #-34]	; 0xffffffde
   193b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   193bc:	eor	r3, r3, #1
   193c0:	uxtb	r3, r3
   193c4:	cmp	r3, #0
   193c8:	beq	193fc <__assert_fail@plt+0x8234>
   193cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   193d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   193d4:	cmp	r2, r3
   193d8:	bcs	193f0 <__assert_fail@plt+0x8228>
   193dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   193e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193e4:	add	r3, r2, r3
   193e8:	mov	r2, #34	; 0x22
   193ec:	strb	r2, [r3]
   193f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193f4:	add	r3, r3, #1
   193f8:	str	r3, [fp, #-20]	; 0xffffffec
   193fc:	mov	r3, #1
   19400:	strb	r3, [fp, #-33]	; 0xffffffdf
   19404:	movw	r3, #62576	; 0xf470
   19408:	movt	r3, #1
   1940c:	str	r3, [fp, #-28]	; 0xffffffe4
   19410:	mov	r3, #1
   19414:	str	r3, [fp, #-32]	; 0xffffffe0
   19418:	b	19594 <__assert_fail@plt+0x83cc>
   1941c:	mov	r3, #1
   19420:	strb	r3, [fp, #-33]	; 0xffffffdf
   19424:	mov	r3, #0
   19428:	strb	r3, [fp, #-34]	; 0xffffffde
   1942c:	b	19594 <__assert_fail@plt+0x83cc>
   19430:	ldr	r3, [fp, #4]
   19434:	cmp	r3, #10
   19438:	beq	19464 <__assert_fail@plt+0x829c>
   1943c:	ldr	r1, [fp, #4]
   19440:	movw	r0, #62584	; 0xf478
   19444:	movt	r0, #1
   19448:	bl	191d8 <__assert_fail@plt+0x8010>
   1944c:	str	r0, [fp, #16]
   19450:	ldr	r1, [fp, #4]
   19454:	movw	r0, #62580	; 0xf474
   19458:	movt	r0, #1
   1945c:	bl	191d8 <__assert_fail@plt+0x8010>
   19460:	str	r0, [fp, #20]
   19464:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19468:	eor	r3, r3, #1
   1946c:	uxtb	r3, r3
   19470:	cmp	r3, #0
   19474:	beq	194d4 <__assert_fail@plt+0x830c>
   19478:	ldr	r3, [fp, #16]
   1947c:	str	r3, [fp, #-28]	; 0xffffffe4
   19480:	b	194c4 <__assert_fail@plt+0x82fc>
   19484:	ldr	r2, [fp, #-20]	; 0xffffffec
   19488:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1948c:	cmp	r2, r3
   19490:	bcs	194ac <__assert_fail@plt+0x82e4>
   19494:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1949c:	add	r3, r2, r3
   194a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   194a4:	ldrb	r2, [r2]
   194a8:	strb	r2, [r3]
   194ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   194b0:	add	r3, r3, #1
   194b4:	str	r3, [fp, #-20]	; 0xffffffec
   194b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194bc:	add	r3, r3, #1
   194c0:	str	r3, [fp, #-28]	; 0xffffffe4
   194c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194c8:	ldrb	r3, [r3]
   194cc:	cmp	r3, #0
   194d0:	bne	19484 <__assert_fail@plt+0x82bc>
   194d4:	mov	r3, #1
   194d8:	strb	r3, [fp, #-33]	; 0xffffffdf
   194dc:	ldr	r3, [fp, #20]
   194e0:	str	r3, [fp, #-28]	; 0xffffffe4
   194e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   194e8:	bl	1106c <strlen@plt>
   194ec:	str	r0, [fp, #-32]	; 0xffffffe0
   194f0:	b	19594 <__assert_fail@plt+0x83cc>
   194f4:	mov	r3, #1
   194f8:	strb	r3, [fp, #-33]	; 0xffffffdf
   194fc:	mov	r3, #1
   19500:	strb	r3, [fp, #-34]	; 0xffffffde
   19504:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19508:	eor	r3, r3, #1
   1950c:	uxtb	r3, r3
   19510:	cmp	r3, #0
   19514:	beq	19520 <__assert_fail@plt+0x8358>
   19518:	mov	r3, #1
   1951c:	strb	r3, [fp, #-33]	; 0xffffffdf
   19520:	mov	r3, #2
   19524:	str	r3, [fp, #4]
   19528:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1952c:	eor	r3, r3, #1
   19530:	uxtb	r3, r3
   19534:	cmp	r3, #0
   19538:	beq	1956c <__assert_fail@plt+0x83a4>
   1953c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19540:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19544:	cmp	r2, r3
   19548:	bcs	19560 <__assert_fail@plt+0x8398>
   1954c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19550:	ldr	r3, [fp, #-20]	; 0xffffffec
   19554:	add	r3, r2, r3
   19558:	mov	r2, #39	; 0x27
   1955c:	strb	r2, [r3]
   19560:	ldr	r3, [fp, #-20]	; 0xffffffec
   19564:	add	r3, r3, #1
   19568:	str	r3, [fp, #-20]	; 0xffffffec
   1956c:	movw	r3, #62580	; 0xf474
   19570:	movt	r3, #1
   19574:	str	r3, [fp, #-28]	; 0xffffffe4
   19578:	mov	r3, #1
   1957c:	str	r3, [fp, #-32]	; 0xffffffe0
   19580:	b	19594 <__assert_fail@plt+0x83cc>
   19584:	mov	r3, #0
   19588:	strb	r3, [fp, #-34]	; 0xffffffde
   1958c:	b	19594 <__assert_fail@plt+0x83cc>
   19590:	bl	11198 <abort@plt>
   19594:	mov	r3, #0
   19598:	str	r3, [fp, #-16]
   1959c:	b	1a738 <__assert_fail@plt+0x9570>
   195a0:	mov	r3, #0
   195a4:	strb	r3, [fp, #-40]	; 0xffffffd8
   195a8:	mov	r3, #0
   195ac:	strb	r3, [fp, #-41]	; 0xffffffd7
   195b0:	mov	r3, #0
   195b4:	strb	r3, [fp, #-42]	; 0xffffffd6
   195b8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   195bc:	cmp	r3, #0
   195c0:	beq	1965c <__assert_fail@plt+0x8494>
   195c4:	ldr	r3, [fp, #4]
   195c8:	cmp	r3, #2
   195cc:	beq	1965c <__assert_fail@plt+0x8494>
   195d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195d4:	cmp	r3, #0
   195d8:	beq	1965c <__assert_fail@plt+0x8494>
   195dc:	ldr	r2, [fp, #-16]
   195e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195e4:	add	r4, r2, r3
   195e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   195ec:	cmn	r3, #1
   195f0:	bne	19614 <__assert_fail@plt+0x844c>
   195f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195f8:	cmp	r3, #1
   195fc:	bls	19614 <__assert_fail@plt+0x844c>
   19600:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19604:	bl	1106c <strlen@plt>
   19608:	str	r0, [fp, #-100]	; 0xffffff9c
   1960c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19610:	b	19618 <__assert_fail@plt+0x8450>
   19614:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19618:	cmp	r3, r4
   1961c:	bcc	1965c <__assert_fail@plt+0x8494>
   19620:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19624:	ldr	r3, [fp, #-16]
   19628:	add	r3, r2, r3
   1962c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19630:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19634:	mov	r0, r3
   19638:	bl	10f58 <memcmp@plt>
   1963c:	mov	r3, r0
   19640:	cmp	r3, #0
   19644:	bne	1965c <__assert_fail@plt+0x8494>
   19648:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1964c:	cmp	r3, #0
   19650:	bne	1a8f4 <__assert_fail@plt+0x972c>
   19654:	mov	r3, #1
   19658:	strb	r3, [fp, #-40]	; 0xffffffd8
   1965c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19660:	ldr	r3, [fp, #-16]
   19664:	add	r3, r2, r3
   19668:	ldrb	r3, [r3]
   1966c:	strb	r3, [fp, #-38]	; 0xffffffda
   19670:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19674:	cmp	r3, #126	; 0x7e
   19678:	ldrls	pc, [pc, r3, lsl #2]
   1967c:	b	19eb4 <__assert_fail@plt+0x8cec>
   19680:	andeq	r9, r1, ip, ror r8
   19684:			; <UNDEFINED> instruction: 0x00019eb4
   19688:			; <UNDEFINED> instruction: 0x00019eb4
   1968c:			; <UNDEFINED> instruction: 0x00019eb4
   19690:			; <UNDEFINED> instruction: 0x00019eb4
   19694:			; <UNDEFINED> instruction: 0x00019eb4
   19698:			; <UNDEFINED> instruction: 0x00019eb4
   1969c:	andeq	r9, r1, r0, ror ip
   196a0:	andeq	r9, r1, ip, ror ip
   196a4:	andeq	r9, r1, ip, lsr #25
   196a8:	muleq	r1, r4, ip
   196ac:			; <UNDEFINED> instruction: 0x00019cb8
   196b0:	andeq	r9, r1, r8, lsl #25
   196b4:	andeq	r9, r1, r0, lsr #25
   196b8:			; <UNDEFINED> instruction: 0x00019eb4
   196bc:			; <UNDEFINED> instruction: 0x00019eb4
   196c0:			; <UNDEFINED> instruction: 0x00019eb4
   196c4:			; <UNDEFINED> instruction: 0x00019eb4
   196c8:			; <UNDEFINED> instruction: 0x00019eb4
   196cc:			; <UNDEFINED> instruction: 0x00019eb4
   196d0:			; <UNDEFINED> instruction: 0x00019eb4
   196d4:			; <UNDEFINED> instruction: 0x00019eb4
   196d8:			; <UNDEFINED> instruction: 0x00019eb4
   196dc:			; <UNDEFINED> instruction: 0x00019eb4
   196e0:			; <UNDEFINED> instruction: 0x00019eb4
   196e4:			; <UNDEFINED> instruction: 0x00019eb4
   196e8:			; <UNDEFINED> instruction: 0x00019eb4
   196ec:			; <UNDEFINED> instruction: 0x00019eb4
   196f0:			; <UNDEFINED> instruction: 0x00019eb4
   196f4:			; <UNDEFINED> instruction: 0x00019eb4
   196f8:			; <UNDEFINED> instruction: 0x00019eb4
   196fc:			; <UNDEFINED> instruction: 0x00019eb4
   19700:	muleq	r1, r8, sp
   19704:	andeq	r9, r1, r0, lsr #27
   19708:	andeq	r9, r1, r0, lsr #27
   1970c:	andeq	r9, r1, ip, lsl #27
   19710:	andeq	r9, r1, r0, lsr #27
   19714:	andeq	r9, r1, r8, lsr #29
   19718:	andeq	r9, r1, r0, lsr #27
   1971c:			; <UNDEFINED> instruction: 0x00019dbc
   19720:	andeq	r9, r1, r0, lsr #27
   19724:	andeq	r9, r1, r0, lsr #27
   19728:	andeq	r9, r1, r0, lsr #27
   1972c:	andeq	r9, r1, r8, lsr #29
   19730:	andeq	r9, r1, r8, lsr #29
   19734:	andeq	r9, r1, r8, lsr #29
   19738:	andeq	r9, r1, r8, lsr #29
   1973c:	andeq	r9, r1, r8, lsr #29
   19740:	andeq	r9, r1, r8, lsr #29
   19744:	andeq	r9, r1, r8, lsr #29
   19748:	andeq	r9, r1, r8, lsr #29
   1974c:	andeq	r9, r1, r8, lsr #29
   19750:	andeq	r9, r1, r8, lsr #29
   19754:	andeq	r9, r1, r8, lsr #29
   19758:	andeq	r9, r1, r8, lsr #29
   1975c:	andeq	r9, r1, r8, lsr #29
   19760:	andeq	r9, r1, r8, lsr #29
   19764:	andeq	r9, r1, r8, lsr #29
   19768:	andeq	r9, r1, r8, lsr #29
   1976c:	andeq	r9, r1, r0, lsr #27
   19770:	andeq	r9, r1, r0, lsr #27
   19774:	andeq	r9, r1, r0, lsr #27
   19778:	andeq	r9, r1, r0, lsr #27
   1977c:	andeq	r9, r1, ip, asr sl
   19780:			; <UNDEFINED> instruction: 0x00019eb4
   19784:	andeq	r9, r1, r8, lsr #29
   19788:	andeq	r9, r1, r8, lsr #29
   1978c:	andeq	r9, r1, r8, lsr #29
   19790:	andeq	r9, r1, r8, lsr #29
   19794:	andeq	r9, r1, r8, lsr #29
   19798:	andeq	r9, r1, r8, lsr #29
   1979c:	andeq	r9, r1, r8, lsr #29
   197a0:	andeq	r9, r1, r8, lsr #29
   197a4:	andeq	r9, r1, r8, lsr #29
   197a8:	andeq	r9, r1, r8, lsr #29
   197ac:	andeq	r9, r1, r8, lsr #29
   197b0:	andeq	r9, r1, r8, lsr #29
   197b4:	andeq	r9, r1, r8, lsr #29
   197b8:	andeq	r9, r1, r8, lsr #29
   197bc:	andeq	r9, r1, r8, lsr #29
   197c0:	andeq	r9, r1, r8, lsr #29
   197c4:	andeq	r9, r1, r8, lsr #29
   197c8:	andeq	r9, r1, r8, lsr #29
   197cc:	andeq	r9, r1, r8, lsr #29
   197d0:	andeq	r9, r1, r8, lsr #29
   197d4:	andeq	r9, r1, r8, lsr #29
   197d8:	andeq	r9, r1, r8, lsr #29
   197dc:	andeq	r9, r1, r8, lsr #29
   197e0:	andeq	r9, r1, r8, lsr #29
   197e4:	andeq	r9, r1, r8, lsr #29
   197e8:	andeq	r9, r1, r8, lsr #29
   197ec:	andeq	r9, r1, r0, lsr #27
   197f0:	andeq	r9, r1, r4, asr #25
   197f4:	andeq	r9, r1, r8, lsr #29
   197f8:	andeq	r9, r1, r0, lsr #27
   197fc:	andeq	r9, r1, r8, lsr #29
   19800:	andeq	r9, r1, r0, lsr #27
   19804:	andeq	r9, r1, r8, lsr #29
   19808:	andeq	r9, r1, r8, lsr #29
   1980c:	andeq	r9, r1, r8, lsr #29
   19810:	andeq	r9, r1, r8, lsr #29
   19814:	andeq	r9, r1, r8, lsr #29
   19818:	andeq	r9, r1, r8, lsr #29
   1981c:	andeq	r9, r1, r8, lsr #29
   19820:	andeq	r9, r1, r8, lsr #29
   19824:	andeq	r9, r1, r8, lsr #29
   19828:	andeq	r9, r1, r8, lsr #29
   1982c:	andeq	r9, r1, r8, lsr #29
   19830:	andeq	r9, r1, r8, lsr #29
   19834:	andeq	r9, r1, r8, lsr #29
   19838:	andeq	r9, r1, r8, lsr #29
   1983c:	andeq	r9, r1, r8, lsr #29
   19840:	andeq	r9, r1, r8, lsr #29
   19844:	andeq	r9, r1, r8, lsr #29
   19848:	andeq	r9, r1, r8, lsr #29
   1984c:	andeq	r9, r1, r8, lsr #29
   19850:	andeq	r9, r1, r8, lsr #29
   19854:	andeq	r9, r1, r8, lsr #29
   19858:	andeq	r9, r1, r8, lsr #29
   1985c:	andeq	r9, r1, r8, lsr #29
   19860:	andeq	r9, r1, r8, lsr #29
   19864:	andeq	r9, r1, r8, lsr #29
   19868:	andeq	r9, r1, r8, lsr #29
   1986c:	andeq	r9, r1, r4, asr #26
   19870:	andeq	r9, r1, r0, lsr #27
   19874:	andeq	r9, r1, r4, asr #26
   19878:	andeq	r9, r1, ip, lsl #27
   1987c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19880:	cmp	r3, #0
   19884:	beq	19a48 <__assert_fail@plt+0x8880>
   19888:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1988c:	cmp	r3, #0
   19890:	bne	1a8fc <__assert_fail@plt+0x9734>
   19894:	mov	r3, #1
   19898:	strb	r3, [fp, #-41]	; 0xffffffd7
   1989c:	ldr	r3, [fp, #4]
   198a0:	cmp	r3, #2
   198a4:	bne	19954 <__assert_fail@plt+0x878c>
   198a8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   198ac:	eor	r3, r3, #1
   198b0:	uxtb	r3, r3
   198b4:	cmp	r3, #0
   198b8:	beq	19954 <__assert_fail@plt+0x878c>
   198bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   198c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198c4:	cmp	r2, r3
   198c8:	bcs	198e0 <__assert_fail@plt+0x8718>
   198cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   198d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   198d4:	add	r3, r2, r3
   198d8:	mov	r2, #39	; 0x27
   198dc:	strb	r2, [r3]
   198e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   198e4:	add	r3, r3, #1
   198e8:	str	r3, [fp, #-20]	; 0xffffffec
   198ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   198f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198f4:	cmp	r2, r3
   198f8:	bcs	19910 <__assert_fail@plt+0x8748>
   198fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19900:	ldr	r3, [fp, #-20]	; 0xffffffec
   19904:	add	r3, r2, r3
   19908:	mov	r2, #36	; 0x24
   1990c:	strb	r2, [r3]
   19910:	ldr	r3, [fp, #-20]	; 0xffffffec
   19914:	add	r3, r3, #1
   19918:	str	r3, [fp, #-20]	; 0xffffffec
   1991c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19920:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19924:	cmp	r2, r3
   19928:	bcs	19940 <__assert_fail@plt+0x8778>
   1992c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19930:	ldr	r3, [fp, #-20]	; 0xffffffec
   19934:	add	r3, r2, r3
   19938:	mov	r2, #39	; 0x27
   1993c:	strb	r2, [r3]
   19940:	ldr	r3, [fp, #-20]	; 0xffffffec
   19944:	add	r3, r3, #1
   19948:	str	r3, [fp, #-20]	; 0xffffffec
   1994c:	mov	r3, #1
   19950:	strb	r3, [fp, #-35]	; 0xffffffdd
   19954:	ldr	r2, [fp, #-20]	; 0xffffffec
   19958:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1995c:	cmp	r2, r3
   19960:	bcs	19978 <__assert_fail@plt+0x87b0>
   19964:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19968:	ldr	r3, [fp, #-20]	; 0xffffffec
   1996c:	add	r3, r2, r3
   19970:	mov	r2, #92	; 0x5c
   19974:	strb	r2, [r3]
   19978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1997c:	add	r3, r3, #1
   19980:	str	r3, [fp, #-20]	; 0xffffffec
   19984:	ldr	r3, [fp, #4]
   19988:	cmp	r3, #2
   1998c:	beq	19a3c <__assert_fail@plt+0x8874>
   19990:	ldr	r3, [fp, #-16]
   19994:	add	r3, r3, #1
   19998:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1999c:	cmp	r2, r3
   199a0:	bls	19a3c <__assert_fail@plt+0x8874>
   199a4:	ldr	r3, [fp, #-16]
   199a8:	add	r3, r3, #1
   199ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   199b0:	add	r3, r2, r3
   199b4:	ldrb	r3, [r3]
   199b8:	cmp	r3, #47	; 0x2f
   199bc:	bls	19a3c <__assert_fail@plt+0x8874>
   199c0:	ldr	r3, [fp, #-16]
   199c4:	add	r3, r3, #1
   199c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   199cc:	add	r3, r2, r3
   199d0:	ldrb	r3, [r3]
   199d4:	cmp	r3, #57	; 0x39
   199d8:	bhi	19a3c <__assert_fail@plt+0x8874>
   199dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   199e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   199e4:	cmp	r2, r3
   199e8:	bcs	19a00 <__assert_fail@plt+0x8838>
   199ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   199f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   199f4:	add	r3, r2, r3
   199f8:	mov	r2, #48	; 0x30
   199fc:	strb	r2, [r3]
   19a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a04:	add	r3, r3, #1
   19a08:	str	r3, [fp, #-20]	; 0xffffffec
   19a0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a14:	cmp	r2, r3
   19a18:	bcs	19a30 <__assert_fail@plt+0x8868>
   19a1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a24:	add	r3, r2, r3
   19a28:	mov	r2, #48	; 0x30
   19a2c:	strb	r2, [r3]
   19a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a34:	add	r3, r3, #1
   19a38:	str	r3, [fp, #-20]	; 0xffffffec
   19a3c:	mov	r3, #48	; 0x30
   19a40:	strb	r3, [fp, #-38]	; 0xffffffda
   19a44:	b	1a484 <__assert_fail@plt+0x92bc>
   19a48:	ldr	r3, [fp, #8]
   19a4c:	and	r3, r3, #1
   19a50:	cmp	r3, #0
   19a54:	beq	1a484 <__assert_fail@plt+0x92bc>
   19a58:	b	1a72c <__assert_fail@plt+0x9564>
   19a5c:	ldr	r3, [fp, #4]
   19a60:	cmp	r3, #2
   19a64:	beq	19a78 <__assert_fail@plt+0x88b0>
   19a68:	ldr	r3, [fp, #4]
   19a6c:	cmp	r3, #5
   19a70:	beq	19a88 <__assert_fail@plt+0x88c0>
   19a74:	b	19c6c <__assert_fail@plt+0x8aa4>
   19a78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19a7c:	cmp	r3, #0
   19a80:	beq	19c60 <__assert_fail@plt+0x8a98>
   19a84:	b	1a930 <__assert_fail@plt+0x9768>
   19a88:	ldr	r3, [fp, #8]
   19a8c:	and	r3, r3, #4
   19a90:	cmp	r3, #0
   19a94:	beq	19c68 <__assert_fail@plt+0x8aa0>
   19a98:	ldr	r3, [fp, #-16]
   19a9c:	add	r3, r3, #2
   19aa0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19aa4:	cmp	r2, r3
   19aa8:	bls	19c68 <__assert_fail@plt+0x8aa0>
   19aac:	ldr	r3, [fp, #-16]
   19ab0:	add	r3, r3, #1
   19ab4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19ab8:	add	r3, r2, r3
   19abc:	ldrb	r3, [r3]
   19ac0:	cmp	r3, #63	; 0x3f
   19ac4:	bne	19c68 <__assert_fail@plt+0x8aa0>
   19ac8:	ldr	r3, [fp, #-16]
   19acc:	add	r3, r3, #2
   19ad0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19ad4:	add	r3, r2, r3
   19ad8:	ldrb	r3, [r3]
   19adc:	sub	r3, r3, #33	; 0x21
   19ae0:	cmp	r3, #29
   19ae4:	ldrls	pc, [pc, r3, lsl #2]
   19ae8:	b	19c58 <__assert_fail@plt+0x8a90>
   19aec:	andeq	r9, r1, r4, ror #22
   19af0:	andeq	r9, r1, r8, asr ip
   19af4:	andeq	r9, r1, r8, asr ip
   19af8:	andeq	r9, r1, r8, asr ip
   19afc:	andeq	r9, r1, r8, asr ip
   19b00:	andeq	r9, r1, r8, asr ip
   19b04:	andeq	r9, r1, r4, ror #22
   19b08:	andeq	r9, r1, r4, ror #22
   19b0c:	andeq	r9, r1, r4, ror #22
   19b10:	andeq	r9, r1, r8, asr ip
   19b14:	andeq	r9, r1, r8, asr ip
   19b18:	andeq	r9, r1, r8, asr ip
   19b1c:	andeq	r9, r1, r4, ror #22
   19b20:	andeq	r9, r1, r8, asr ip
   19b24:	andeq	r9, r1, r4, ror #22
   19b28:	andeq	r9, r1, r8, asr ip
   19b2c:	andeq	r9, r1, r8, asr ip
   19b30:	andeq	r9, r1, r8, asr ip
   19b34:	andeq	r9, r1, r8, asr ip
   19b38:	andeq	r9, r1, r8, asr ip
   19b3c:	andeq	r9, r1, r8, asr ip
   19b40:	andeq	r9, r1, r8, asr ip
   19b44:	andeq	r9, r1, r8, asr ip
   19b48:	andeq	r9, r1, r8, asr ip
   19b4c:	andeq	r9, r1, r8, asr ip
   19b50:	andeq	r9, r1, r8, asr ip
   19b54:	andeq	r9, r1, r8, asr ip
   19b58:	andeq	r9, r1, r4, ror #22
   19b5c:	andeq	r9, r1, r4, ror #22
   19b60:	andeq	r9, r1, r4, ror #22
   19b64:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19b68:	cmp	r3, #0
   19b6c:	bne	1a904 <__assert_fail@plt+0x973c>
   19b70:	ldr	r3, [fp, #-16]
   19b74:	add	r3, r3, #2
   19b78:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19b7c:	add	r3, r2, r3
   19b80:	ldrb	r3, [r3]
   19b84:	strb	r3, [fp, #-38]	; 0xffffffda
   19b88:	ldr	r3, [fp, #-16]
   19b8c:	add	r3, r3, #2
   19b90:	str	r3, [fp, #-16]
   19b94:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b9c:	cmp	r2, r3
   19ba0:	bcs	19bb8 <__assert_fail@plt+0x89f0>
   19ba4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bac:	add	r3, r2, r3
   19bb0:	mov	r2, #63	; 0x3f
   19bb4:	strb	r2, [r3]
   19bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bbc:	add	r3, r3, #1
   19bc0:	str	r3, [fp, #-20]	; 0xffffffec
   19bc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19bc8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19bcc:	cmp	r2, r3
   19bd0:	bcs	19be8 <__assert_fail@plt+0x8a20>
   19bd4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19bd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bdc:	add	r3, r2, r3
   19be0:	mov	r2, #34	; 0x22
   19be4:	strb	r2, [r3]
   19be8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bec:	add	r3, r3, #1
   19bf0:	str	r3, [fp, #-20]	; 0xffffffec
   19bf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19bf8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19bfc:	cmp	r2, r3
   19c00:	bcs	19c18 <__assert_fail@plt+0x8a50>
   19c04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c0c:	add	r3, r2, r3
   19c10:	mov	r2, #34	; 0x22
   19c14:	strb	r2, [r3]
   19c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c1c:	add	r3, r3, #1
   19c20:	str	r3, [fp, #-20]	; 0xffffffec
   19c24:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19c2c:	cmp	r2, r3
   19c30:	bcs	19c48 <__assert_fail@plt+0x8a80>
   19c34:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c3c:	add	r3, r2, r3
   19c40:	mov	r2, #63	; 0x3f
   19c44:	strb	r2, [r3]
   19c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c4c:	add	r3, r3, #1
   19c50:	str	r3, [fp, #-20]	; 0xffffffec
   19c54:	b	19c5c <__assert_fail@plt+0x8a94>
   19c58:	nop	{0}
   19c5c:	b	19c68 <__assert_fail@plt+0x8aa0>
   19c60:	nop	{0}
   19c64:	b	1a4b8 <__assert_fail@plt+0x92f0>
   19c68:	nop	{0}
   19c6c:	b	1a4b8 <__assert_fail@plt+0x92f0>
   19c70:	mov	r3, #97	; 0x61
   19c74:	strb	r3, [fp, #-39]	; 0xffffffd9
   19c78:	b	19d2c <__assert_fail@plt+0x8b64>
   19c7c:	mov	r3, #98	; 0x62
   19c80:	strb	r3, [fp, #-39]	; 0xffffffd9
   19c84:	b	19d2c <__assert_fail@plt+0x8b64>
   19c88:	mov	r3, #102	; 0x66
   19c8c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19c90:	b	19d2c <__assert_fail@plt+0x8b64>
   19c94:	mov	r3, #110	; 0x6e
   19c98:	strb	r3, [fp, #-39]	; 0xffffffd9
   19c9c:	b	19d10 <__assert_fail@plt+0x8b48>
   19ca0:	mov	r3, #114	; 0x72
   19ca4:	strb	r3, [fp, #-39]	; 0xffffffd9
   19ca8:	b	19d10 <__assert_fail@plt+0x8b48>
   19cac:	mov	r3, #116	; 0x74
   19cb0:	strb	r3, [fp, #-39]	; 0xffffffd9
   19cb4:	b	19d10 <__assert_fail@plt+0x8b48>
   19cb8:	mov	r3, #118	; 0x76
   19cbc:	strb	r3, [fp, #-39]	; 0xffffffd9
   19cc0:	b	19d2c <__assert_fail@plt+0x8b64>
   19cc4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19cc8:	strb	r3, [fp, #-39]	; 0xffffffd9
   19ccc:	ldr	r3, [fp, #4]
   19cd0:	cmp	r3, #2
   19cd4:	bne	19ce8 <__assert_fail@plt+0x8b20>
   19cd8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19cdc:	cmp	r3, #0
   19ce0:	beq	1a644 <__assert_fail@plt+0x947c>
   19ce4:	b	1a930 <__assert_fail@plt+0x9768>
   19ce8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19cec:	cmp	r3, #0
   19cf0:	beq	19d0c <__assert_fail@plt+0x8b44>
   19cf4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19cf8:	cmp	r3, #0
   19cfc:	beq	19d0c <__assert_fail@plt+0x8b44>
   19d00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d04:	cmp	r3, #0
   19d08:	bne	1a64c <__assert_fail@plt+0x9484>
   19d0c:	nop	{0}
   19d10:	ldr	r3, [fp, #4]
   19d14:	cmp	r3, #2
   19d18:	bne	19d28 <__assert_fail@plt+0x8b60>
   19d1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19d20:	cmp	r3, #0
   19d24:	bne	1a90c <__assert_fail@plt+0x9744>
   19d28:	nop	{0}
   19d2c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19d30:	cmp	r3, #0
   19d34:	beq	1a48c <__assert_fail@plt+0x92c4>
   19d38:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   19d3c:	strb	r3, [fp, #-38]	; 0xffffffda
   19d40:	b	1a544 <__assert_fail@plt+0x937c>
   19d44:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19d48:	cmn	r3, #1
   19d4c:	bne	19d70 <__assert_fail@plt+0x8ba8>
   19d50:	ldr	r3, [fp, #-96]	; 0xffffffa0
   19d54:	add	r3, r3, #1
   19d58:	ldrb	r3, [r3]
   19d5c:	cmp	r3, #0
   19d60:	movne	r3, #1
   19d64:	moveq	r3, #0
   19d68:	uxtb	r3, r3
   19d6c:	b	19d84 <__assert_fail@plt+0x8bbc>
   19d70:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19d74:	cmp	r3, #1
   19d78:	movne	r3, #1
   19d7c:	moveq	r3, #0
   19d80:	uxtb	r3, r3
   19d84:	cmp	r3, #0
   19d88:	bne	1a494 <__assert_fail@plt+0x92cc>
   19d8c:	ldr	r3, [fp, #-16]
   19d90:	cmp	r3, #0
   19d94:	bne	1a49c <__assert_fail@plt+0x92d4>
   19d98:	mov	r3, #1
   19d9c:	strb	r3, [fp, #-42]	; 0xffffffd6
   19da0:	ldr	r3, [fp, #4]
   19da4:	cmp	r3, #2
   19da8:	bne	1a4a4 <__assert_fail@plt+0x92dc>
   19dac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19db0:	cmp	r3, #0
   19db4:	beq	1a4a4 <__assert_fail@plt+0x92dc>
   19db8:	b	1a930 <__assert_fail@plt+0x9768>
   19dbc:	mov	r3, #1
   19dc0:	strb	r3, [fp, #-36]	; 0xffffffdc
   19dc4:	mov	r3, #1
   19dc8:	strb	r3, [fp, #-42]	; 0xffffffd6
   19dcc:	ldr	r3, [fp, #4]
   19dd0:	cmp	r3, #2
   19dd4:	bne	1a4ac <__assert_fail@plt+0x92e4>
   19dd8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19ddc:	cmp	r3, #0
   19de0:	bne	1a914 <__assert_fail@plt+0x974c>
   19de4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19de8:	cmp	r3, #0
   19dec:	beq	19e0c <__assert_fail@plt+0x8c44>
   19df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19df4:	cmp	r3, #0
   19df8:	bne	19e0c <__assert_fail@plt+0x8c44>
   19dfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e00:	str	r3, [fp, #-24]	; 0xffffffe8
   19e04:	mov	r3, #0
   19e08:	str	r3, [fp, #-92]	; 0xffffffa4
   19e0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e14:	cmp	r2, r3
   19e18:	bcs	19e30 <__assert_fail@plt+0x8c68>
   19e1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e24:	add	r3, r2, r3
   19e28:	mov	r2, #39	; 0x27
   19e2c:	strb	r2, [r3]
   19e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e34:	add	r3, r3, #1
   19e38:	str	r3, [fp, #-20]	; 0xffffffec
   19e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e44:	cmp	r2, r3
   19e48:	bcs	19e60 <__assert_fail@plt+0x8c98>
   19e4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e54:	add	r3, r2, r3
   19e58:	mov	r2, #92	; 0x5c
   19e5c:	strb	r2, [r3]
   19e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e64:	add	r3, r3, #1
   19e68:	str	r3, [fp, #-20]	; 0xffffffec
   19e6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e74:	cmp	r2, r3
   19e78:	bcs	19e90 <__assert_fail@plt+0x8cc8>
   19e7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e80:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e84:	add	r3, r2, r3
   19e88:	mov	r2, #39	; 0x27
   19e8c:	strb	r2, [r3]
   19e90:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e94:	add	r3, r3, #1
   19e98:	str	r3, [fp, #-20]	; 0xffffffec
   19e9c:	mov	r3, #0
   19ea0:	strb	r3, [fp, #-35]	; 0xffffffdd
   19ea4:	b	1a4ac <__assert_fail@plt+0x92e4>
   19ea8:	mov	r3, #1
   19eac:	strb	r3, [fp, #-42]	; 0xffffffd6
   19eb0:	b	1a4b8 <__assert_fail@plt+0x92f0>
   19eb4:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   19eb8:	cmp	r3, #0
   19ebc:	beq	19efc <__assert_fail@plt+0x8d34>
   19ec0:	mov	r3, #1
   19ec4:	str	r3, [fp, #-48]	; 0xffffffd0
   19ec8:	bl	11048 <__ctype_b_loc@plt>
   19ecc:	mov	r3, r0
   19ed0:	ldr	r2, [r3]
   19ed4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19ed8:	lsl	r3, r3, #1
   19edc:	add	r3, r2, r3
   19ee0:	ldrh	r3, [r3]
   19ee4:	and	r3, r3, #16384	; 0x4000
   19ee8:	cmp	r3, #0
   19eec:	movne	r3, #1
   19ef0:	moveq	r3, #0
   19ef4:	strb	r3, [fp, #-49]	; 0xffffffcf
   19ef8:	b	1a148 <__assert_fail@plt+0x8f80>
   19efc:	sub	r3, fp, #76	; 0x4c
   19f00:	mov	r2, #8
   19f04:	mov	r1, #0
   19f08:	mov	r0, r3
   19f0c:	bl	110b4 <memset@plt>
   19f10:	mov	r3, #0
   19f14:	str	r3, [fp, #-48]	; 0xffffffd0
   19f18:	mov	r3, #1
   19f1c:	strb	r3, [fp, #-49]	; 0xffffffcf
   19f20:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19f24:	cmn	r3, #1
   19f28:	bne	19f38 <__assert_fail@plt+0x8d70>
   19f2c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19f30:	bl	1106c <strlen@plt>
   19f34:	str	r0, [fp, #-100]	; 0xffffff9c
   19f38:	ldr	r2, [fp, #-16]
   19f3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19f40:	add	r3, r2, r3
   19f44:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19f48:	add	r1, r2, r3
   19f4c:	ldr	r2, [fp, #-16]
   19f50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19f54:	add	r3, r2, r3
   19f58:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19f5c:	sub	r2, r2, r3
   19f60:	sub	r3, fp, #76	; 0x4c
   19f64:	sub	r0, fp, #80	; 0x50
   19f68:	bl	1dc90 <__assert_fail@plt+0xcac8>
   19f6c:	str	r0, [fp, #-64]	; 0xffffffc0
   19f70:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19f74:	cmp	r3, #0
   19f78:	beq	1a13c <__assert_fail@plt+0x8f74>
   19f7c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19f80:	cmn	r3, #1
   19f84:	bne	19f94 <__assert_fail@plt+0x8dcc>
   19f88:	mov	r3, #0
   19f8c:	strb	r3, [fp, #-49]	; 0xffffffcf
   19f90:	b	1a148 <__assert_fail@plt+0x8f80>
   19f94:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19f98:	cmn	r3, #2
   19f9c:	bne	19ff4 <__assert_fail@plt+0x8e2c>
   19fa0:	mov	r3, #0
   19fa4:	strb	r3, [fp, #-49]	; 0xffffffcf
   19fa8:	b	19fb8 <__assert_fail@plt+0x8df0>
   19fac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19fb0:	add	r3, r3, #1
   19fb4:	str	r3, [fp, #-48]	; 0xffffffd0
   19fb8:	ldr	r2, [fp, #-16]
   19fbc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19fc0:	add	r3, r2, r3
   19fc4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19fc8:	cmp	r2, r3
   19fcc:	bls	1a144 <__assert_fail@plt+0x8f7c>
   19fd0:	ldr	r2, [fp, #-16]
   19fd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19fd8:	add	r3, r2, r3
   19fdc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19fe0:	add	r3, r2, r3
   19fe4:	ldrb	r3, [r3]
   19fe8:	cmp	r3, #0
   19fec:	bne	19fac <__assert_fail@plt+0x8de4>
   19ff0:	b	1a144 <__assert_fail@plt+0x8f7c>
   19ff4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19ff8:	cmp	r3, #0
   19ffc:	beq	1a0f0 <__assert_fail@plt+0x8f28>
   1a000:	ldr	r3, [fp, #4]
   1a004:	cmp	r3, #2
   1a008:	bne	1a0f0 <__assert_fail@plt+0x8f28>
   1a00c:	mov	r3, #1
   1a010:	str	r3, [fp, #-56]	; 0xffffffc8
   1a014:	b	1a0e0 <__assert_fail@plt+0x8f18>
   1a018:	ldr	r2, [fp, #-16]
   1a01c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a020:	add	r2, r2, r3
   1a024:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a028:	add	r3, r2, r3
   1a02c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a030:	add	r3, r2, r3
   1a034:	ldrb	r3, [r3]
   1a038:	sub	r3, r3, #91	; 0x5b
   1a03c:	cmp	r3, #33	; 0x21
   1a040:	ldrls	pc, [pc, r3, lsl #2]
   1a044:	b	1a0d0 <__assert_fail@plt+0x8f08>
   1a048:	andeq	sl, r1, r0, lsr r9
   1a04c:	andeq	sl, r1, r0, lsr r9
   1a050:	ldrdeq	sl, [r1], -r0
   1a054:	andeq	sl, r1, r0, lsr r9
   1a058:	ldrdeq	sl, [r1], -r0
   1a05c:	andeq	sl, r1, r0, lsr r9
   1a060:	ldrdeq	sl, [r1], -r0
   1a064:	ldrdeq	sl, [r1], -r0
   1a068:	ldrdeq	sl, [r1], -r0
   1a06c:	ldrdeq	sl, [r1], -r0
   1a070:	ldrdeq	sl, [r1], -r0
   1a074:	ldrdeq	sl, [r1], -r0
   1a078:	ldrdeq	sl, [r1], -r0
   1a07c:	ldrdeq	sl, [r1], -r0
   1a080:	ldrdeq	sl, [r1], -r0
   1a084:	ldrdeq	sl, [r1], -r0
   1a088:	ldrdeq	sl, [r1], -r0
   1a08c:	ldrdeq	sl, [r1], -r0
   1a090:	ldrdeq	sl, [r1], -r0
   1a094:	ldrdeq	sl, [r1], -r0
   1a098:	ldrdeq	sl, [r1], -r0
   1a09c:	ldrdeq	sl, [r1], -r0
   1a0a0:	ldrdeq	sl, [r1], -r0
   1a0a4:	ldrdeq	sl, [r1], -r0
   1a0a8:	ldrdeq	sl, [r1], -r0
   1a0ac:	ldrdeq	sl, [r1], -r0
   1a0b0:	ldrdeq	sl, [r1], -r0
   1a0b4:	ldrdeq	sl, [r1], -r0
   1a0b8:	ldrdeq	sl, [r1], -r0
   1a0bc:	ldrdeq	sl, [r1], -r0
   1a0c0:	ldrdeq	sl, [r1], -r0
   1a0c4:	ldrdeq	sl, [r1], -r0
   1a0c8:	ldrdeq	sl, [r1], -r0
   1a0cc:	andeq	sl, r1, r0, lsr r9
   1a0d0:	nop	{0}
   1a0d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a0d8:	add	r3, r3, #1
   1a0dc:	str	r3, [fp, #-56]	; 0xffffffc8
   1a0e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a0e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a0e8:	cmp	r2, r3
   1a0ec:	bcc	1a018 <__assert_fail@plt+0x8e50>
   1a0f0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a0f4:	mov	r0, r3
   1a0f8:	bl	10f94 <iswprint@plt>
   1a0fc:	mov	r3, r0
   1a100:	cmp	r3, #0
   1a104:	bne	1a110 <__assert_fail@plt+0x8f48>
   1a108:	mov	r3, #0
   1a10c:	strb	r3, [fp, #-49]	; 0xffffffcf
   1a110:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a114:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a118:	add	r3, r2, r3
   1a11c:	str	r3, [fp, #-48]	; 0xffffffd0
   1a120:	sub	r3, fp, #76	; 0x4c
   1a124:	mov	r0, r3
   1a128:	bl	10f4c <mbsinit@plt>
   1a12c:	mov	r3, r0
   1a130:	cmp	r3, #0
   1a134:	beq	19f38 <__assert_fail@plt+0x8d70>
   1a138:	b	1a148 <__assert_fail@plt+0x8f80>
   1a13c:	nop	{0}
   1a140:	b	1a148 <__assert_fail@plt+0x8f80>
   1a144:	nop	{0}
   1a148:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1a14c:	strb	r3, [fp, #-42]	; 0xffffffd6
   1a150:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a154:	cmp	r3, #1
   1a158:	bhi	1a17c <__assert_fail@plt+0x8fb4>
   1a15c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a160:	cmp	r3, #0
   1a164:	beq	1a4b4 <__assert_fail@plt+0x92ec>
   1a168:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1a16c:	eor	r3, r3, #1
   1a170:	uxtb	r3, r3
   1a174:	cmp	r3, #0
   1a178:	beq	1a4b4 <__assert_fail@plt+0x92ec>
   1a17c:	ldr	r2, [fp, #-16]
   1a180:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a184:	add	r3, r2, r3
   1a188:	str	r3, [fp, #-68]	; 0xffffffbc
   1a18c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a190:	cmp	r3, #0
   1a194:	beq	1a348 <__assert_fail@plt+0x9180>
   1a198:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1a19c:	eor	r3, r3, #1
   1a1a0:	uxtb	r3, r3
   1a1a4:	cmp	r3, #0
   1a1a8:	beq	1a348 <__assert_fail@plt+0x9180>
   1a1ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a1b0:	cmp	r3, #0
   1a1b4:	bne	1a91c <__assert_fail@plt+0x9754>
   1a1b8:	mov	r3, #1
   1a1bc:	strb	r3, [fp, #-41]	; 0xffffffd7
   1a1c0:	ldr	r3, [fp, #4]
   1a1c4:	cmp	r3, #2
   1a1c8:	bne	1a278 <__assert_fail@plt+0x90b0>
   1a1cc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a1d0:	eor	r3, r3, #1
   1a1d4:	uxtb	r3, r3
   1a1d8:	cmp	r3, #0
   1a1dc:	beq	1a278 <__assert_fail@plt+0x90b0>
   1a1e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a1e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a1e8:	cmp	r2, r3
   1a1ec:	bcs	1a204 <__assert_fail@plt+0x903c>
   1a1f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a1f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1f8:	add	r3, r2, r3
   1a1fc:	mov	r2, #39	; 0x27
   1a200:	strb	r2, [r3]
   1a204:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a208:	add	r3, r3, #1
   1a20c:	str	r3, [fp, #-20]	; 0xffffffec
   1a210:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a214:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a218:	cmp	r2, r3
   1a21c:	bcs	1a234 <__assert_fail@plt+0x906c>
   1a220:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a224:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a228:	add	r3, r2, r3
   1a22c:	mov	r2, #36	; 0x24
   1a230:	strb	r2, [r3]
   1a234:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a238:	add	r3, r3, #1
   1a23c:	str	r3, [fp, #-20]	; 0xffffffec
   1a240:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a244:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a248:	cmp	r2, r3
   1a24c:	bcs	1a264 <__assert_fail@plt+0x909c>
   1a250:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a254:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a258:	add	r3, r2, r3
   1a25c:	mov	r2, #39	; 0x27
   1a260:	strb	r2, [r3]
   1a264:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a268:	add	r3, r3, #1
   1a26c:	str	r3, [fp, #-20]	; 0xffffffec
   1a270:	mov	r3, #1
   1a274:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a278:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a27c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a280:	cmp	r2, r3
   1a284:	bcs	1a29c <__assert_fail@plt+0x90d4>
   1a288:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a28c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a290:	add	r3, r2, r3
   1a294:	mov	r2, #92	; 0x5c
   1a298:	strb	r2, [r3]
   1a29c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2a0:	add	r3, r3, #1
   1a2a4:	str	r3, [fp, #-20]	; 0xffffffec
   1a2a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a2b0:	cmp	r2, r3
   1a2b4:	bcs	1a2dc <__assert_fail@plt+0x9114>
   1a2b8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a2bc:	lsr	r3, r3, #6
   1a2c0:	uxtb	r2, r3
   1a2c4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a2c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2cc:	add	r3, r1, r3
   1a2d0:	add	r2, r2, #48	; 0x30
   1a2d4:	uxtb	r2, r2
   1a2d8:	strb	r2, [r3]
   1a2dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2e0:	add	r3, r3, #1
   1a2e4:	str	r3, [fp, #-20]	; 0xffffffec
   1a2e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a2f0:	cmp	r2, r3
   1a2f4:	bcs	1a324 <__assert_fail@plt+0x915c>
   1a2f8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a2fc:	lsr	r3, r3, #3
   1a300:	uxtb	r3, r3
   1a304:	and	r3, r3, #7
   1a308:	uxtb	r2, r3
   1a30c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a310:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a314:	add	r3, r1, r3
   1a318:	add	r2, r2, #48	; 0x30
   1a31c:	uxtb	r2, r2
   1a320:	strb	r2, [r3]
   1a324:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a328:	add	r3, r3, #1
   1a32c:	str	r3, [fp, #-20]	; 0xffffffec
   1a330:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a334:	and	r3, r3, #7
   1a338:	uxtb	r3, r3
   1a33c:	add	r3, r3, #48	; 0x30
   1a340:	strb	r3, [fp, #-38]	; 0xffffffda
   1a344:	b	1a38c <__assert_fail@plt+0x91c4>
   1a348:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1a34c:	cmp	r3, #0
   1a350:	beq	1a38c <__assert_fail@plt+0x91c4>
   1a354:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a358:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a35c:	cmp	r2, r3
   1a360:	bcs	1a378 <__assert_fail@plt+0x91b0>
   1a364:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a36c:	add	r3, r2, r3
   1a370:	mov	r2, #92	; 0x5c
   1a374:	strb	r2, [r3]
   1a378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a37c:	add	r3, r3, #1
   1a380:	str	r3, [fp, #-20]	; 0xffffffec
   1a384:	mov	r3, #0
   1a388:	strb	r3, [fp, #-40]	; 0xffffffd8
   1a38c:	ldr	r3, [fp, #-16]
   1a390:	add	r3, r3, #1
   1a394:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a398:	cmp	r2, r3
   1a39c:	bls	1a47c <__assert_fail@plt+0x92b4>
   1a3a0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a3a4:	cmp	r3, #0
   1a3a8:	beq	1a428 <__assert_fail@plt+0x9260>
   1a3ac:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1a3b0:	eor	r3, r3, #1
   1a3b4:	uxtb	r3, r3
   1a3b8:	cmp	r3, #0
   1a3bc:	beq	1a428 <__assert_fail@plt+0x9260>
   1a3c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a3c8:	cmp	r2, r3
   1a3cc:	bcs	1a3e4 <__assert_fail@plt+0x921c>
   1a3d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a3d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3d8:	add	r3, r2, r3
   1a3dc:	mov	r2, #39	; 0x27
   1a3e0:	strb	r2, [r3]
   1a3e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3e8:	add	r3, r3, #1
   1a3ec:	str	r3, [fp, #-20]	; 0xffffffec
   1a3f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a3f8:	cmp	r2, r3
   1a3fc:	bcs	1a414 <__assert_fail@plt+0x924c>
   1a400:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a404:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a408:	add	r3, r2, r3
   1a40c:	mov	r2, #39	; 0x27
   1a410:	strb	r2, [r3]
   1a414:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a418:	add	r3, r3, #1
   1a41c:	str	r3, [fp, #-20]	; 0xffffffec
   1a420:	mov	r3, #0
   1a424:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a428:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a42c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a430:	cmp	r2, r3
   1a434:	bcs	1a44c <__assert_fail@plt+0x9284>
   1a438:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a43c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a440:	add	r3, r2, r3
   1a444:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1a448:	strb	r2, [r3]
   1a44c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a450:	add	r3, r3, #1
   1a454:	str	r3, [fp, #-20]	; 0xffffffec
   1a458:	ldr	r3, [fp, #-16]
   1a45c:	add	r3, r3, #1
   1a460:	str	r3, [fp, #-16]
   1a464:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a468:	ldr	r3, [fp, #-16]
   1a46c:	add	r3, r2, r3
   1a470:	ldrb	r3, [r3]
   1a474:	strb	r3, [fp, #-38]	; 0xffffffda
   1a478:	b	1a18c <__assert_fail@plt+0x8fc4>
   1a47c:	nop	{0}
   1a480:	b	1a658 <__assert_fail@plt+0x9490>
   1a484:	nop	{0}
   1a488:	b	1a4b8 <__assert_fail@plt+0x92f0>
   1a48c:	nop	{0}
   1a490:	b	1a4b8 <__assert_fail@plt+0x92f0>
   1a494:	nop	{0}
   1a498:	b	1a4b8 <__assert_fail@plt+0x92f0>
   1a49c:	nop	{0}
   1a4a0:	b	1a4b8 <__assert_fail@plt+0x92f0>
   1a4a4:	nop	{0}
   1a4a8:	b	1a4b8 <__assert_fail@plt+0x92f0>
   1a4ac:	nop	{0}
   1a4b0:	b	1a4b8 <__assert_fail@plt+0x92f0>
   1a4b4:	nop	{0}
   1a4b8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a4bc:	eor	r3, r3, #1
   1a4c0:	uxtb	r3, r3
   1a4c4:	cmp	r3, #0
   1a4c8:	bne	1a4d8 <__assert_fail@plt+0x9310>
   1a4cc:	ldr	r3, [fp, #4]
   1a4d0:	cmp	r3, #2
   1a4d4:	bne	1a4ec <__assert_fail@plt+0x9324>
   1a4d8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a4dc:	eor	r3, r3, #1
   1a4e0:	uxtb	r3, r3
   1a4e4:	cmp	r3, #0
   1a4e8:	bne	1a52c <__assert_fail@plt+0x9364>
   1a4ec:	ldr	r3, [fp, #12]
   1a4f0:	cmp	r3, #0
   1a4f4:	beq	1a52c <__assert_fail@plt+0x9364>
   1a4f8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a4fc:	lsr	r3, r3, #5
   1a500:	uxtb	r3, r3
   1a504:	lsl	r3, r3, #2
   1a508:	ldr	r2, [fp, #12]
   1a50c:	add	r3, r2, r3
   1a510:	ldr	r2, [r3]
   1a514:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a518:	and	r3, r3, #31
   1a51c:	lsr	r3, r2, r3
   1a520:	and	r3, r3, #1
   1a524:	cmp	r3, #0
   1a528:	bne	1a540 <__assert_fail@plt+0x9378>
   1a52c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1a530:	eor	r3, r3, #1
   1a534:	uxtb	r3, r3
   1a538:	cmp	r3, #0
   1a53c:	bne	1a654 <__assert_fail@plt+0x948c>
   1a540:	nop	{0}
   1a544:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a548:	cmp	r3, #0
   1a54c:	bne	1a924 <__assert_fail@plt+0x975c>
   1a550:	mov	r3, #1
   1a554:	strb	r3, [fp, #-41]	; 0xffffffd7
   1a558:	ldr	r3, [fp, #4]
   1a55c:	cmp	r3, #2
   1a560:	bne	1a610 <__assert_fail@plt+0x9448>
   1a564:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a568:	eor	r3, r3, #1
   1a56c:	uxtb	r3, r3
   1a570:	cmp	r3, #0
   1a574:	beq	1a610 <__assert_fail@plt+0x9448>
   1a578:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a57c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a580:	cmp	r2, r3
   1a584:	bcs	1a59c <__assert_fail@plt+0x93d4>
   1a588:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a58c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a590:	add	r3, r2, r3
   1a594:	mov	r2, #39	; 0x27
   1a598:	strb	r2, [r3]
   1a59c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5a0:	add	r3, r3, #1
   1a5a4:	str	r3, [fp, #-20]	; 0xffffffec
   1a5a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a5ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a5b0:	cmp	r2, r3
   1a5b4:	bcs	1a5cc <__assert_fail@plt+0x9404>
   1a5b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a5bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5c0:	add	r3, r2, r3
   1a5c4:	mov	r2, #36	; 0x24
   1a5c8:	strb	r2, [r3]
   1a5cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5d0:	add	r3, r3, #1
   1a5d4:	str	r3, [fp, #-20]	; 0xffffffec
   1a5d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a5dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a5e0:	cmp	r2, r3
   1a5e4:	bcs	1a5fc <__assert_fail@plt+0x9434>
   1a5e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a5ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5f0:	add	r3, r2, r3
   1a5f4:	mov	r2, #39	; 0x27
   1a5f8:	strb	r2, [r3]
   1a5fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a600:	add	r3, r3, #1
   1a604:	str	r3, [fp, #-20]	; 0xffffffec
   1a608:	mov	r3, #1
   1a60c:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a610:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a614:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a618:	cmp	r2, r3
   1a61c:	bcs	1a634 <__assert_fail@plt+0x946c>
   1a620:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a624:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a628:	add	r3, r2, r3
   1a62c:	mov	r2, #92	; 0x5c
   1a630:	strb	r2, [r3]
   1a634:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a638:	add	r3, r3, #1
   1a63c:	str	r3, [fp, #-20]	; 0xffffffec
   1a640:	b	1a658 <__assert_fail@plt+0x9490>
   1a644:	nop	{0}
   1a648:	b	1a658 <__assert_fail@plt+0x9490>
   1a64c:	nop	{0}
   1a650:	b	1a658 <__assert_fail@plt+0x9490>
   1a654:	nop	{0}
   1a658:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a65c:	cmp	r3, #0
   1a660:	beq	1a6e0 <__assert_fail@plt+0x9518>
   1a664:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1a668:	eor	r3, r3, #1
   1a66c:	uxtb	r3, r3
   1a670:	cmp	r3, #0
   1a674:	beq	1a6e0 <__assert_fail@plt+0x9518>
   1a678:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a67c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a680:	cmp	r2, r3
   1a684:	bcs	1a69c <__assert_fail@plt+0x94d4>
   1a688:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a68c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a690:	add	r3, r2, r3
   1a694:	mov	r2, #39	; 0x27
   1a698:	strb	r2, [r3]
   1a69c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6a0:	add	r3, r3, #1
   1a6a4:	str	r3, [fp, #-20]	; 0xffffffec
   1a6a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a6ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a6b0:	cmp	r2, r3
   1a6b4:	bcs	1a6cc <__assert_fail@plt+0x9504>
   1a6b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a6bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6c0:	add	r3, r2, r3
   1a6c4:	mov	r2, #39	; 0x27
   1a6c8:	strb	r2, [r3]
   1a6cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6d0:	add	r3, r3, #1
   1a6d4:	str	r3, [fp, #-20]	; 0xffffffec
   1a6d8:	mov	r3, #0
   1a6dc:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a6e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a6e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a6e8:	cmp	r2, r3
   1a6ec:	bcs	1a704 <__assert_fail@plt+0x953c>
   1a6f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a6f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6f8:	add	r3, r2, r3
   1a6fc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1a700:	strb	r2, [r3]
   1a704:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a708:	add	r3, r3, #1
   1a70c:	str	r3, [fp, #-20]	; 0xffffffec
   1a710:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1a714:	eor	r3, r3, #1
   1a718:	uxtb	r3, r3
   1a71c:	cmp	r3, #0
   1a720:	beq	1a72c <__assert_fail@plt+0x9564>
   1a724:	mov	r3, #0
   1a728:	strb	r3, [fp, #-37]	; 0xffffffdb
   1a72c:	ldr	r3, [fp, #-16]
   1a730:	add	r3, r3, #1
   1a734:	str	r3, [fp, #-16]
   1a738:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a73c:	cmn	r3, #1
   1a740:	bne	1a768 <__assert_fail@plt+0x95a0>
   1a744:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a748:	ldr	r3, [fp, #-16]
   1a74c:	add	r3, r2, r3
   1a750:	ldrb	r3, [r3]
   1a754:	cmp	r3, #0
   1a758:	movne	r3, #1
   1a75c:	moveq	r3, #0
   1a760:	uxtb	r3, r3
   1a764:	b	1a780 <__assert_fail@plt+0x95b8>
   1a768:	ldr	r2, [fp, #-16]
   1a76c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a770:	cmp	r2, r3
   1a774:	movne	r3, #1
   1a778:	moveq	r3, #0
   1a77c:	uxtb	r3, r3
   1a780:	cmp	r3, #0
   1a784:	bne	195a0 <__assert_fail@plt+0x83d8>
   1a788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a78c:	cmp	r3, #0
   1a790:	bne	1a7ac <__assert_fail@plt+0x95e4>
   1a794:	ldr	r3, [fp, #4]
   1a798:	cmp	r3, #2
   1a79c:	bne	1a7ac <__assert_fail@plt+0x95e4>
   1a7a0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a7a4:	cmp	r3, #0
   1a7a8:	bne	1a92c <__assert_fail@plt+0x9764>
   1a7ac:	ldr	r3, [fp, #4]
   1a7b0:	cmp	r3, #2
   1a7b4:	bne	1a854 <__assert_fail@plt+0x968c>
   1a7b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a7bc:	eor	r3, r3, #1
   1a7c0:	uxtb	r3, r3
   1a7c4:	cmp	r3, #0
   1a7c8:	beq	1a854 <__assert_fail@plt+0x968c>
   1a7cc:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1a7d0:	cmp	r3, #0
   1a7d4:	beq	1a854 <__assert_fail@plt+0x968c>
   1a7d8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1a7dc:	cmp	r3, #0
   1a7e0:	beq	1a828 <__assert_fail@plt+0x9660>
   1a7e4:	ldr	r3, [fp, #20]
   1a7e8:	str	r3, [sp, #16]
   1a7ec:	ldr	r3, [fp, #16]
   1a7f0:	str	r3, [sp, #12]
   1a7f4:	ldr	r3, [fp, #12]
   1a7f8:	str	r3, [sp, #8]
   1a7fc:	ldr	r3, [fp, #8]
   1a800:	str	r3, [sp, #4]
   1a804:	mov	r3, #5
   1a808:	str	r3, [sp]
   1a80c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a810:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a814:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a818:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a81c:	bl	192d8 <__assert_fail@plt+0x8110>
   1a820:	mov	r3, r0
   1a824:	b	1a994 <__assert_fail@plt+0x97cc>
   1a828:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a82c:	cmp	r3, #0
   1a830:	bne	1a854 <__assert_fail@plt+0x968c>
   1a834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a838:	cmp	r3, #0
   1a83c:	beq	1a854 <__assert_fail@plt+0x968c>
   1a840:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a844:	str	r3, [fp, #-92]	; 0xffffffa4
   1a848:	mov	r3, #0
   1a84c:	str	r3, [fp, #-20]	; 0xffffffec
   1a850:	b	1936c <__assert_fail@plt+0x81a4>
   1a854:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a858:	cmp	r3, #0
   1a85c:	beq	1a8c8 <__assert_fail@plt+0x9700>
   1a860:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a864:	eor	r3, r3, #1
   1a868:	uxtb	r3, r3
   1a86c:	cmp	r3, #0
   1a870:	beq	1a8c8 <__assert_fail@plt+0x9700>
   1a874:	b	1a8b8 <__assert_fail@plt+0x96f0>
   1a878:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a87c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a880:	cmp	r2, r3
   1a884:	bcs	1a8a0 <__assert_fail@plt+0x96d8>
   1a888:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a88c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a890:	add	r3, r2, r3
   1a894:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a898:	ldrb	r2, [r2]
   1a89c:	strb	r2, [r3]
   1a8a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8a4:	add	r3, r3, #1
   1a8a8:	str	r3, [fp, #-20]	; 0xffffffec
   1a8ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a8b0:	add	r3, r3, #1
   1a8b4:	str	r3, [fp, #-28]	; 0xffffffe4
   1a8b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a8bc:	ldrb	r3, [r3]
   1a8c0:	cmp	r3, #0
   1a8c4:	bne	1a878 <__assert_fail@plt+0x96b0>
   1a8c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a8cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a8d0:	cmp	r2, r3
   1a8d4:	bcs	1a8ec <__assert_fail@plt+0x9724>
   1a8d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a8dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8e0:	add	r3, r2, r3
   1a8e4:	mov	r2, #0
   1a8e8:	strb	r2, [r3]
   1a8ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8f0:	b	1a994 <__assert_fail@plt+0x97cc>
   1a8f4:	nop	{0}
   1a8f8:	b	1a930 <__assert_fail@plt+0x9768>
   1a8fc:	nop	{0}
   1a900:	b	1a930 <__assert_fail@plt+0x9768>
   1a904:	nop	{0}
   1a908:	b	1a930 <__assert_fail@plt+0x9768>
   1a90c:	nop	{0}
   1a910:	b	1a930 <__assert_fail@plt+0x9768>
   1a914:	nop	{0}
   1a918:	b	1a930 <__assert_fail@plt+0x9768>
   1a91c:	nop	{0}
   1a920:	b	1a930 <__assert_fail@plt+0x9768>
   1a924:	nop	{0}
   1a928:	b	1a930 <__assert_fail@plt+0x9768>
   1a92c:	nop	{0}
   1a930:	ldr	r3, [fp, #4]
   1a934:	cmp	r3, #2
   1a938:	bne	1a950 <__assert_fail@plt+0x9788>
   1a93c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a940:	cmp	r3, #0
   1a944:	beq	1a950 <__assert_fail@plt+0x9788>
   1a948:	mov	r3, #4
   1a94c:	str	r3, [fp, #4]
   1a950:	ldr	r3, [fp, #8]
   1a954:	bic	r3, r3, #2
   1a958:	ldr	r2, [fp, #20]
   1a95c:	str	r2, [sp, #16]
   1a960:	ldr	r2, [fp, #16]
   1a964:	str	r2, [sp, #12]
   1a968:	mov	r2, #0
   1a96c:	str	r2, [sp, #8]
   1a970:	str	r3, [sp, #4]
   1a974:	ldr	r3, [fp, #4]
   1a978:	str	r3, [sp]
   1a97c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a980:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a984:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1a988:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a98c:	bl	192d8 <__assert_fail@plt+0x8110>
   1a990:	mov	r3, r0
   1a994:	mov	r0, r3
   1a998:	sub	sp, fp, #8
   1a99c:	ldr	r4, [sp]
   1a9a0:	ldr	fp, [sp, #4]
   1a9a4:	add	sp, sp, #8
   1a9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9ac:	str	fp, [sp, #-8]!
   1a9b0:	str	lr, [sp, #4]
   1a9b4:	add	fp, sp, #4
   1a9b8:	sub	sp, sp, #56	; 0x38
   1a9bc:	str	r0, [fp, #-24]	; 0xffffffe8
   1a9c0:	str	r1, [fp, #-28]	; 0xffffffe4
   1a9c4:	str	r2, [fp, #-32]	; 0xffffffe0
   1a9c8:	str	r3, [fp, #-36]	; 0xffffffdc
   1a9cc:	ldr	r3, [fp, #4]
   1a9d0:	cmp	r3, #0
   1a9d4:	beq	1a9e0 <__assert_fail@plt+0x9818>
   1a9d8:	ldr	r3, [fp, #4]
   1a9dc:	b	1a9e8 <__assert_fail@plt+0x9820>
   1a9e0:	movw	r3, #436	; 0x1b4
   1a9e4:	movt	r3, #3
   1a9e8:	str	r3, [fp, #-8]
   1a9ec:	bl	1109c <__errno_location@plt>
   1a9f0:	mov	r3, r0
   1a9f4:	ldr	r3, [r3]
   1a9f8:	str	r3, [fp, #-12]
   1a9fc:	ldr	r3, [fp, #-8]
   1aa00:	ldr	r3, [r3]
   1aa04:	ldr	r2, [fp, #-8]
   1aa08:	ldr	r2, [r2, #4]
   1aa0c:	ldr	r1, [fp, #-8]
   1aa10:	add	r1, r1, #8
   1aa14:	ldr	r0, [fp, #-8]
   1aa18:	ldr	r0, [r0, #40]	; 0x28
   1aa1c:	ldr	ip, [fp, #-8]
   1aa20:	ldr	ip, [ip, #44]	; 0x2c
   1aa24:	str	ip, [sp, #16]
   1aa28:	str	r0, [sp, #12]
   1aa2c:	str	r1, [sp, #8]
   1aa30:	str	r2, [sp, #4]
   1aa34:	str	r3, [sp]
   1aa38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1aa3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1aa40:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1aa44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1aa48:	bl	192d8 <__assert_fail@plt+0x8110>
   1aa4c:	str	r0, [fp, #-16]
   1aa50:	bl	1109c <__errno_location@plt>
   1aa54:	mov	r2, r0
   1aa58:	ldr	r3, [fp, #-12]
   1aa5c:	str	r3, [r2]
   1aa60:	ldr	r3, [fp, #-16]
   1aa64:	mov	r0, r3
   1aa68:	sub	sp, fp, #4
   1aa6c:	ldr	fp, [sp]
   1aa70:	add	sp, sp, #4
   1aa74:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa78:	str	fp, [sp, #-8]!
   1aa7c:	str	lr, [sp, #4]
   1aa80:	add	fp, sp, #4
   1aa84:	sub	sp, sp, #16
   1aa88:	str	r0, [fp, #-8]
   1aa8c:	str	r1, [fp, #-12]
   1aa90:	str	r2, [fp, #-16]
   1aa94:	ldr	r3, [fp, #-16]
   1aa98:	mov	r2, #0
   1aa9c:	ldr	r1, [fp, #-12]
   1aaa0:	ldr	r0, [fp, #-8]
   1aaa4:	bl	1aac0 <__assert_fail@plt+0x98f8>
   1aaa8:	mov	r3, r0
   1aaac:	mov	r0, r3
   1aab0:	sub	sp, fp, #4
   1aab4:	ldr	fp, [sp]
   1aab8:	add	sp, sp, #4
   1aabc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aac0:	str	fp, [sp, #-8]!
   1aac4:	str	lr, [sp, #4]
   1aac8:	add	fp, sp, #4
   1aacc:	sub	sp, sp, #64	; 0x40
   1aad0:	str	r0, [fp, #-32]	; 0xffffffe0
   1aad4:	str	r1, [fp, #-36]	; 0xffffffdc
   1aad8:	str	r2, [fp, #-40]	; 0xffffffd8
   1aadc:	str	r3, [fp, #-44]	; 0xffffffd4
   1aae0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1aae4:	cmp	r3, #0
   1aae8:	beq	1aaf4 <__assert_fail@plt+0x992c>
   1aaec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1aaf0:	b	1aafc <__assert_fail@plt+0x9934>
   1aaf4:	movw	r3, #436	; 0x1b4
   1aaf8:	movt	r3, #3
   1aafc:	str	r3, [fp, #-8]
   1ab00:	bl	1109c <__errno_location@plt>
   1ab04:	mov	r3, r0
   1ab08:	ldr	r3, [r3]
   1ab0c:	str	r3, [fp, #-12]
   1ab10:	ldr	r3, [fp, #-8]
   1ab14:	ldr	r3, [r3, #4]
   1ab18:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ab1c:	cmp	r2, #0
   1ab20:	moveq	r2, #1
   1ab24:	movne	r2, #0
   1ab28:	uxtb	r2, r2
   1ab2c:	orr	r3, r3, r2
   1ab30:	str	r3, [fp, #-16]
   1ab34:	ldr	r3, [fp, #-8]
   1ab38:	ldr	r3, [r3]
   1ab3c:	ldr	r2, [fp, #-8]
   1ab40:	add	r2, r2, #8
   1ab44:	ldr	r1, [fp, #-8]
   1ab48:	ldr	r1, [r1, #40]	; 0x28
   1ab4c:	ldr	r0, [fp, #-8]
   1ab50:	ldr	r0, [r0, #44]	; 0x2c
   1ab54:	str	r0, [sp, #16]
   1ab58:	str	r1, [sp, #12]
   1ab5c:	str	r2, [sp, #8]
   1ab60:	ldr	r2, [fp, #-16]
   1ab64:	str	r2, [sp, #4]
   1ab68:	str	r3, [sp]
   1ab6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ab70:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ab74:	mov	r1, #0
   1ab78:	mov	r0, #0
   1ab7c:	bl	192d8 <__assert_fail@plt+0x8110>
   1ab80:	mov	r3, r0
   1ab84:	add	r3, r3, #1
   1ab88:	str	r3, [fp, #-20]	; 0xffffffec
   1ab8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ab90:	bl	1c0bc <__assert_fail@plt+0xaef4>
   1ab94:	mov	r3, r0
   1ab98:	str	r3, [fp, #-24]	; 0xffffffe8
   1ab9c:	ldr	r3, [fp, #-8]
   1aba0:	ldr	r3, [r3]
   1aba4:	ldr	r2, [fp, #-8]
   1aba8:	add	r2, r2, #8
   1abac:	ldr	r1, [fp, #-8]
   1abb0:	ldr	r1, [r1, #40]	; 0x28
   1abb4:	ldr	r0, [fp, #-8]
   1abb8:	ldr	r0, [r0, #44]	; 0x2c
   1abbc:	str	r0, [sp, #16]
   1abc0:	str	r1, [sp, #12]
   1abc4:	str	r2, [sp, #8]
   1abc8:	ldr	r2, [fp, #-16]
   1abcc:	str	r2, [sp, #4]
   1abd0:	str	r3, [sp]
   1abd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1abd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1abdc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1abe0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1abe4:	bl	192d8 <__assert_fail@plt+0x8110>
   1abe8:	bl	1109c <__errno_location@plt>
   1abec:	mov	r2, r0
   1abf0:	ldr	r3, [fp, #-12]
   1abf4:	str	r3, [r2]
   1abf8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1abfc:	cmp	r3, #0
   1ac00:	beq	1ac14 <__assert_fail@plt+0x9a4c>
   1ac04:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac08:	sub	r2, r3, #1
   1ac0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1ac10:	str	r2, [r3]
   1ac14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac18:	mov	r0, r3
   1ac1c:	sub	sp, fp, #4
   1ac20:	ldr	fp, [sp]
   1ac24:	add	sp, sp, #4
   1ac28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac2c:	str	fp, [sp, #-8]!
   1ac30:	str	lr, [sp, #4]
   1ac34:	add	fp, sp, #4
   1ac38:	sub	sp, sp, #8
   1ac3c:	movw	r3, #308	; 0x134
   1ac40:	movt	r3, #3
   1ac44:	ldr	r3, [r3]
   1ac48:	str	r3, [fp, #-12]
   1ac4c:	mov	r3, #1
   1ac50:	str	r3, [fp, #-8]
   1ac54:	b	1ac80 <__assert_fail@plt+0x9ab8>
   1ac58:	ldr	r3, [fp, #-8]
   1ac5c:	lsl	r3, r3, #3
   1ac60:	ldr	r2, [fp, #-12]
   1ac64:	add	r3, r2, r3
   1ac68:	ldr	r3, [r3, #4]
   1ac6c:	mov	r0, r3
   1ac70:	bl	1d918 <__assert_fail@plt+0xc750>
   1ac74:	ldr	r3, [fp, #-8]
   1ac78:	add	r3, r3, #1
   1ac7c:	str	r3, [fp, #-8]
   1ac80:	movw	r3, #296	; 0x128
   1ac84:	movt	r3, #3
   1ac88:	ldr	r3, [r3]
   1ac8c:	ldr	r2, [fp, #-8]
   1ac90:	cmp	r2, r3
   1ac94:	blt	1ac58 <__assert_fail@plt+0x9a90>
   1ac98:	ldr	r3, [fp, #-12]
   1ac9c:	ldr	r2, [r3, #4]
   1aca0:	movw	r3, #484	; 0x1e4
   1aca4:	movt	r3, #3
   1aca8:	cmp	r2, r3
   1acac:	beq	1ace4 <__assert_fail@plt+0x9b1c>
   1acb0:	ldr	r3, [fp, #-12]
   1acb4:	ldr	r3, [r3, #4]
   1acb8:	mov	r0, r3
   1acbc:	bl	1d918 <__assert_fail@plt+0xc750>
   1acc0:	movw	r3, #300	; 0x12c
   1acc4:	movt	r3, #3
   1acc8:	mov	r2, #256	; 0x100
   1accc:	str	r2, [r3]
   1acd0:	movw	r3, #300	; 0x12c
   1acd4:	movt	r3, #3
   1acd8:	movw	r2, #484	; 0x1e4
   1acdc:	movt	r2, #3
   1ace0:	str	r2, [r3, #4]
   1ace4:	ldr	r2, [fp, #-12]
   1ace8:	movw	r3, #300	; 0x12c
   1acec:	movt	r3, #3
   1acf0:	cmp	r2, r3
   1acf4:	beq	1ad14 <__assert_fail@plt+0x9b4c>
   1acf8:	ldr	r0, [fp, #-12]
   1acfc:	bl	1d918 <__assert_fail@plt+0xc750>
   1ad00:	movw	r3, #308	; 0x134
   1ad04:	movt	r3, #3
   1ad08:	movw	r2, #300	; 0x12c
   1ad0c:	movt	r2, #3
   1ad10:	str	r2, [r3]
   1ad14:	movw	r3, #296	; 0x128
   1ad18:	movt	r3, #3
   1ad1c:	mov	r2, #1
   1ad20:	str	r2, [r3]
   1ad24:	nop	{0}
   1ad28:	sub	sp, fp, #4
   1ad2c:	ldr	fp, [sp]
   1ad30:	add	sp, sp, #4
   1ad34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad38:	str	fp, [sp, #-8]!
   1ad3c:	str	lr, [sp, #4]
   1ad40:	add	fp, sp, #4
   1ad44:	sub	sp, sp, #80	; 0x50
   1ad48:	str	r0, [fp, #-48]	; 0xffffffd0
   1ad4c:	str	r1, [fp, #-52]	; 0xffffffcc
   1ad50:	str	r2, [fp, #-56]	; 0xffffffc8
   1ad54:	str	r3, [fp, #-60]	; 0xffffffc4
   1ad58:	bl	1109c <__errno_location@plt>
   1ad5c:	mov	r3, r0
   1ad60:	ldr	r3, [r3]
   1ad64:	str	r3, [fp, #-16]
   1ad68:	movw	r3, #308	; 0x134
   1ad6c:	movt	r3, #3
   1ad70:	ldr	r3, [r3]
   1ad74:	str	r3, [fp, #-8]
   1ad78:	mvn	r3, #-2147483648	; 0x80000000
   1ad7c:	str	r3, [fp, #-20]	; 0xffffffec
   1ad80:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ad84:	cmp	r3, #0
   1ad88:	blt	1ad9c <__assert_fail@plt+0x9bd4>
   1ad8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ad90:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad94:	cmp	r2, r3
   1ad98:	blt	1ada0 <__assert_fail@plt+0x9bd8>
   1ad9c:	bl	11198 <abort@plt>
   1ada0:	movw	r3, #296	; 0x128
   1ada4:	movt	r3, #3
   1ada8:	ldr	r3, [r3]
   1adac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1adb0:	cmp	r2, r3
   1adb4:	blt	1aeac <__assert_fail@plt+0x9ce4>
   1adb8:	ldr	r2, [fp, #-8]
   1adbc:	movw	r3, #300	; 0x12c
   1adc0:	movt	r3, #3
   1adc4:	cmp	r2, r3
   1adc8:	moveq	r3, #1
   1adcc:	movne	r3, #0
   1add0:	strb	r3, [fp, #-21]	; 0xffffffeb
   1add4:	movw	r3, #296	; 0x128
   1add8:	movt	r3, #3
   1addc:	ldr	r3, [r3]
   1ade0:	str	r3, [fp, #-40]	; 0xffffffd8
   1ade4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1ade8:	cmp	r3, #0
   1adec:	beq	1adf8 <__assert_fail@plt+0x9c30>
   1adf0:	mov	r0, #0
   1adf4:	b	1adfc <__assert_fail@plt+0x9c34>
   1adf8:	ldr	r0, [fp, #-8]
   1adfc:	movw	r3, #296	; 0x128
   1ae00:	movt	r3, #3
   1ae04:	ldr	r3, [r3]
   1ae08:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ae0c:	sub	r3, r2, r3
   1ae10:	add	r2, r3, #1
   1ae14:	sub	r1, fp, #40	; 0x28
   1ae18:	mov	r3, #8
   1ae1c:	str	r3, [sp]
   1ae20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae24:	bl	1c41c <__assert_fail@plt+0xb254>
   1ae28:	str	r0, [fp, #-8]
   1ae2c:	movw	r3, #308	; 0x134
   1ae30:	movt	r3, #3
   1ae34:	ldr	r2, [fp, #-8]
   1ae38:	str	r2, [r3]
   1ae3c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1ae40:	cmp	r3, #0
   1ae44:	beq	1ae60 <__assert_fail@plt+0x9c98>
   1ae48:	ldr	r2, [fp, #-8]
   1ae4c:	movw	r3, #300	; 0x12c
   1ae50:	movt	r3, #3
   1ae54:	mov	r1, r2
   1ae58:	ldrd	r2, [r3]
   1ae5c:	strd	r2, [r1]
   1ae60:	movw	r3, #296	; 0x128
   1ae64:	movt	r3, #3
   1ae68:	ldr	r3, [r3]
   1ae6c:	lsl	r3, r3, #3
   1ae70:	ldr	r2, [fp, #-8]
   1ae74:	add	r0, r2, r3
   1ae78:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ae7c:	movw	r3, #296	; 0x128
   1ae80:	movt	r3, #3
   1ae84:	ldr	r3, [r3]
   1ae88:	sub	r3, r2, r3
   1ae8c:	lsl	r3, r3, #3
   1ae90:	mov	r2, r3
   1ae94:	mov	r1, #0
   1ae98:	bl	110b4 <memset@plt>
   1ae9c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1aea0:	movw	r3, #296	; 0x128
   1aea4:	movt	r3, #3
   1aea8:	str	r2, [r3]
   1aeac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1aeb0:	lsl	r3, r3, #3
   1aeb4:	ldr	r2, [fp, #-8]
   1aeb8:	add	r3, r2, r3
   1aebc:	ldr	r3, [r3]
   1aec0:	str	r3, [fp, #-28]	; 0xffffffe4
   1aec4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1aec8:	lsl	r3, r3, #3
   1aecc:	ldr	r2, [fp, #-8]
   1aed0:	add	r3, r2, r3
   1aed4:	ldr	r3, [r3, #4]
   1aed8:	str	r3, [fp, #-12]
   1aedc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1aee0:	ldr	r3, [r3, #4]
   1aee4:	orr	r3, r3, #1
   1aee8:	str	r3, [fp, #-32]	; 0xffffffe0
   1aeec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1aef0:	ldr	r3, [r3]
   1aef4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1aef8:	add	r2, r2, #8
   1aefc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1af00:	ldr	r1, [r1, #40]	; 0x28
   1af04:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1af08:	ldr	r0, [r0, #44]	; 0x2c
   1af0c:	str	r0, [sp, #16]
   1af10:	str	r1, [sp, #12]
   1af14:	str	r2, [sp, #8]
   1af18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1af1c:	str	r2, [sp, #4]
   1af20:	str	r3, [sp]
   1af24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1af28:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1af2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1af30:	ldr	r0, [fp, #-12]
   1af34:	bl	192d8 <__assert_fail@plt+0x8110>
   1af38:	str	r0, [fp, #-36]	; 0xffffffdc
   1af3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1af40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1af44:	cmp	r2, r3
   1af48:	bhi	1b000 <__assert_fail@plt+0x9e38>
   1af4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1af50:	add	r3, r3, #1
   1af54:	str	r3, [fp, #-28]	; 0xffffffe4
   1af58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1af5c:	lsl	r3, r3, #3
   1af60:	ldr	r2, [fp, #-8]
   1af64:	add	r3, r2, r3
   1af68:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1af6c:	str	r2, [r3]
   1af70:	ldr	r2, [fp, #-12]
   1af74:	movw	r3, #484	; 0x1e4
   1af78:	movt	r3, #3
   1af7c:	cmp	r2, r3
   1af80:	beq	1af8c <__assert_fail@plt+0x9dc4>
   1af84:	ldr	r0, [fp, #-12]
   1af88:	bl	1d918 <__assert_fail@plt+0xc750>
   1af8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1af90:	bl	1c0bc <__assert_fail@plt+0xaef4>
   1af94:	mov	r3, r0
   1af98:	str	r3, [fp, #-12]
   1af9c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1afa0:	lsl	r3, r3, #3
   1afa4:	ldr	r2, [fp, #-8]
   1afa8:	add	r3, r2, r3
   1afac:	ldr	r2, [fp, #-12]
   1afb0:	str	r2, [r3, #4]
   1afb4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1afb8:	ldr	r3, [r3]
   1afbc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1afc0:	add	r2, r2, #8
   1afc4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1afc8:	ldr	r1, [r1, #40]	; 0x28
   1afcc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1afd0:	ldr	r0, [r0, #44]	; 0x2c
   1afd4:	str	r0, [sp, #16]
   1afd8:	str	r1, [sp, #12]
   1afdc:	str	r2, [sp, #8]
   1afe0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1afe4:	str	r2, [sp, #4]
   1afe8:	str	r3, [sp]
   1afec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1aff0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1aff4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1aff8:	ldr	r0, [fp, #-12]
   1affc:	bl	192d8 <__assert_fail@plt+0x8110>
   1b000:	bl	1109c <__errno_location@plt>
   1b004:	mov	r2, r0
   1b008:	ldr	r3, [fp, #-16]
   1b00c:	str	r3, [r2]
   1b010:	ldr	r3, [fp, #-12]
   1b014:	mov	r0, r3
   1b018:	sub	sp, fp, #4
   1b01c:	ldr	fp, [sp]
   1b020:	add	sp, sp, #4
   1b024:	pop	{pc}		; (ldr pc, [sp], #4)
   1b028:	str	fp, [sp, #-8]!
   1b02c:	str	lr, [sp, #4]
   1b030:	add	fp, sp, #4
   1b034:	sub	sp, sp, #8
   1b038:	str	r0, [fp, #-8]
   1b03c:	str	r1, [fp, #-12]
   1b040:	movw	r3, #436	; 0x1b4
   1b044:	movt	r3, #3
   1b048:	mvn	r2, #0
   1b04c:	ldr	r1, [fp, #-12]
   1b050:	ldr	r0, [fp, #-8]
   1b054:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b058:	mov	r3, r0
   1b05c:	mov	r0, r3
   1b060:	sub	sp, fp, #4
   1b064:	ldr	fp, [sp]
   1b068:	add	sp, sp, #4
   1b06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b070:	str	fp, [sp, #-8]!
   1b074:	str	lr, [sp, #4]
   1b078:	add	fp, sp, #4
   1b07c:	sub	sp, sp, #16
   1b080:	str	r0, [fp, #-8]
   1b084:	str	r1, [fp, #-12]
   1b088:	str	r2, [fp, #-16]
   1b08c:	movw	r3, #436	; 0x1b4
   1b090:	movt	r3, #3
   1b094:	ldr	r2, [fp, #-16]
   1b098:	ldr	r1, [fp, #-12]
   1b09c:	ldr	r0, [fp, #-8]
   1b0a0:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b0a4:	mov	r3, r0
   1b0a8:	mov	r0, r3
   1b0ac:	sub	sp, fp, #4
   1b0b0:	ldr	fp, [sp]
   1b0b4:	add	sp, sp, #4
   1b0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0bc:	str	fp, [sp, #-8]!
   1b0c0:	str	lr, [sp, #4]
   1b0c4:	add	fp, sp, #4
   1b0c8:	sub	sp, sp, #8
   1b0cc:	str	r0, [fp, #-8]
   1b0d0:	ldr	r1, [fp, #-8]
   1b0d4:	mov	r0, #0
   1b0d8:	bl	1b028 <__assert_fail@plt+0x9e60>
   1b0dc:	mov	r3, r0
   1b0e0:	mov	r0, r3
   1b0e4:	sub	sp, fp, #4
   1b0e8:	ldr	fp, [sp]
   1b0ec:	add	sp, sp, #4
   1b0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0f4:	str	fp, [sp, #-8]!
   1b0f8:	str	lr, [sp, #4]
   1b0fc:	add	fp, sp, #4
   1b100:	sub	sp, sp, #8
   1b104:	str	r0, [fp, #-8]
   1b108:	str	r1, [fp, #-12]
   1b10c:	ldr	r2, [fp, #-12]
   1b110:	ldr	r1, [fp, #-8]
   1b114:	mov	r0, #0
   1b118:	bl	1b070 <__assert_fail@plt+0x9ea8>
   1b11c:	mov	r3, r0
   1b120:	mov	r0, r3
   1b124:	sub	sp, fp, #4
   1b128:	ldr	fp, [sp]
   1b12c:	add	sp, sp, #4
   1b130:	pop	{pc}		; (ldr pc, [sp], #4)
   1b134:	str	fp, [sp, #-8]!
   1b138:	str	lr, [sp, #4]
   1b13c:	add	fp, sp, #4
   1b140:	sub	sp, sp, #64	; 0x40
   1b144:	str	r0, [fp, #-56]	; 0xffffffc8
   1b148:	str	r1, [fp, #-60]	; 0xffffffc4
   1b14c:	str	r2, [fp, #-64]	; 0xffffffc0
   1b150:	sub	r3, fp, #52	; 0x34
   1b154:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b158:	mov	r0, r3
   1b15c:	bl	19134 <__assert_fail@plt+0x7f6c>
   1b160:	sub	r3, fp, #52	; 0x34
   1b164:	mvn	r2, #0
   1b168:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b16c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b170:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b174:	mov	r3, r0
   1b178:	mov	r0, r3
   1b17c:	sub	sp, fp, #4
   1b180:	ldr	fp, [sp]
   1b184:	add	sp, sp, #4
   1b188:	pop	{pc}		; (ldr pc, [sp], #4)
   1b18c:	str	fp, [sp, #-8]!
   1b190:	str	lr, [sp, #4]
   1b194:	add	fp, sp, #4
   1b198:	sub	sp, sp, #64	; 0x40
   1b19c:	str	r0, [fp, #-56]	; 0xffffffc8
   1b1a0:	str	r1, [fp, #-60]	; 0xffffffc4
   1b1a4:	str	r2, [fp, #-64]	; 0xffffffc0
   1b1a8:	str	r3, [fp, #-68]	; 0xffffffbc
   1b1ac:	sub	r3, fp, #52	; 0x34
   1b1b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b1b4:	mov	r0, r3
   1b1b8:	bl	19134 <__assert_fail@plt+0x7f6c>
   1b1bc:	sub	r3, fp, #52	; 0x34
   1b1c0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b1c4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b1c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b1cc:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b1d0:	mov	r3, r0
   1b1d4:	mov	r0, r3
   1b1d8:	sub	sp, fp, #4
   1b1dc:	ldr	fp, [sp]
   1b1e0:	add	sp, sp, #4
   1b1e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1e8:	str	fp, [sp, #-8]!
   1b1ec:	str	lr, [sp, #4]
   1b1f0:	add	fp, sp, #4
   1b1f4:	sub	sp, sp, #8
   1b1f8:	str	r0, [fp, #-8]
   1b1fc:	str	r1, [fp, #-12]
   1b200:	ldr	r2, [fp, #-12]
   1b204:	ldr	r1, [fp, #-8]
   1b208:	mov	r0, #0
   1b20c:	bl	1b134 <__assert_fail@plt+0x9f6c>
   1b210:	mov	r3, r0
   1b214:	mov	r0, r3
   1b218:	sub	sp, fp, #4
   1b21c:	ldr	fp, [sp]
   1b220:	add	sp, sp, #4
   1b224:	pop	{pc}		; (ldr pc, [sp], #4)
   1b228:	str	fp, [sp, #-8]!
   1b22c:	str	lr, [sp, #4]
   1b230:	add	fp, sp, #4
   1b234:	sub	sp, sp, #16
   1b238:	str	r0, [fp, #-8]
   1b23c:	str	r1, [fp, #-12]
   1b240:	str	r2, [fp, #-16]
   1b244:	ldr	r3, [fp, #-16]
   1b248:	ldr	r2, [fp, #-12]
   1b24c:	ldr	r1, [fp, #-8]
   1b250:	mov	r0, #0
   1b254:	bl	1b18c <__assert_fail@plt+0x9fc4>
   1b258:	mov	r3, r0
   1b25c:	mov	r0, r3
   1b260:	sub	sp, fp, #4
   1b264:	ldr	fp, [sp]
   1b268:	add	sp, sp, #4
   1b26c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b270:	str	fp, [sp, #-8]!
   1b274:	str	lr, [sp, #4]
   1b278:	add	fp, sp, #4
   1b27c:	sub	sp, sp, #64	; 0x40
   1b280:	str	r0, [fp, #-56]	; 0xffffffc8
   1b284:	str	r1, [fp, #-60]	; 0xffffffc4
   1b288:	mov	r3, r2
   1b28c:	strb	r3, [fp, #-61]	; 0xffffffc3
   1b290:	movw	r2, #436	; 0x1b4
   1b294:	movt	r2, #3
   1b298:	sub	r3, fp, #52	; 0x34
   1b29c:	ldrd	r0, [r2]
   1b2a0:	strd	r0, [r3]
   1b2a4:	ldrd	r0, [r2, #8]
   1b2a8:	strd	r0, [r3, #8]
   1b2ac:	ldrd	r0, [r2, #16]
   1b2b0:	strd	r0, [r3, #16]
   1b2b4:	ldrd	r0, [r2, #24]
   1b2b8:	strd	r0, [r3, #24]
   1b2bc:	ldrd	r0, [r2, #32]
   1b2c0:	strd	r0, [r3, #32]
   1b2c4:	ldrd	r0, [r2, #40]	; 0x28
   1b2c8:	strd	r0, [r3, #40]	; 0x28
   1b2cc:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1b2d0:	sub	r3, fp, #52	; 0x34
   1b2d4:	mov	r2, #1
   1b2d8:	mov	r0, r3
   1b2dc:	bl	18f94 <__assert_fail@plt+0x7dcc>
   1b2e0:	sub	r3, fp, #52	; 0x34
   1b2e4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1b2e8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1b2ec:	mov	r0, #0
   1b2f0:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b2f4:	mov	r3, r0
   1b2f8:	mov	r0, r3
   1b2fc:	sub	sp, fp, #4
   1b300:	ldr	fp, [sp]
   1b304:	add	sp, sp, #4
   1b308:	pop	{pc}		; (ldr pc, [sp], #4)
   1b30c:	str	fp, [sp, #-8]!
   1b310:	str	lr, [sp, #4]
   1b314:	add	fp, sp, #4
   1b318:	sub	sp, sp, #8
   1b31c:	str	r0, [fp, #-8]
   1b320:	mov	r3, r1
   1b324:	strb	r3, [fp, #-9]
   1b328:	ldrb	r3, [fp, #-9]
   1b32c:	mov	r2, r3
   1b330:	mvn	r1, #0
   1b334:	ldr	r0, [fp, #-8]
   1b338:	bl	1b270 <__assert_fail@plt+0xa0a8>
   1b33c:	mov	r3, r0
   1b340:	mov	r0, r3
   1b344:	sub	sp, fp, #4
   1b348:	ldr	fp, [sp]
   1b34c:	add	sp, sp, #4
   1b350:	pop	{pc}		; (ldr pc, [sp], #4)
   1b354:	str	fp, [sp, #-8]!
   1b358:	str	lr, [sp, #4]
   1b35c:	add	fp, sp, #4
   1b360:	sub	sp, sp, #8
   1b364:	str	r0, [fp, #-8]
   1b368:	mov	r1, #58	; 0x3a
   1b36c:	ldr	r0, [fp, #-8]
   1b370:	bl	1b30c <__assert_fail@plt+0xa144>
   1b374:	mov	r3, r0
   1b378:	mov	r0, r3
   1b37c:	sub	sp, fp, #4
   1b380:	ldr	fp, [sp]
   1b384:	add	sp, sp, #4
   1b388:	pop	{pc}		; (ldr pc, [sp], #4)
   1b38c:	str	fp, [sp, #-8]!
   1b390:	str	lr, [sp, #4]
   1b394:	add	fp, sp, #4
   1b398:	sub	sp, sp, #8
   1b39c:	str	r0, [fp, #-8]
   1b3a0:	str	r1, [fp, #-12]
   1b3a4:	mov	r2, #58	; 0x3a
   1b3a8:	ldr	r1, [fp, #-12]
   1b3ac:	ldr	r0, [fp, #-8]
   1b3b0:	bl	1b270 <__assert_fail@plt+0xa0a8>
   1b3b4:	mov	r3, r0
   1b3b8:	mov	r0, r3
   1b3bc:	sub	sp, fp, #4
   1b3c0:	ldr	fp, [sp]
   1b3c4:	add	sp, sp, #4
   1b3c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3cc:	str	fp, [sp, #-8]!
   1b3d0:	str	lr, [sp, #4]
   1b3d4:	add	fp, sp, #4
   1b3d8:	sub	sp, sp, #112	; 0x70
   1b3dc:	str	r0, [fp, #-56]	; 0xffffffc8
   1b3e0:	str	r1, [fp, #-60]	; 0xffffffc4
   1b3e4:	str	r2, [fp, #-64]	; 0xffffffc0
   1b3e8:	sub	r3, fp, #116	; 0x74
   1b3ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b3f0:	mov	r0, r3
   1b3f4:	bl	19134 <__assert_fail@plt+0x7f6c>
   1b3f8:	sub	r3, fp, #52	; 0x34
   1b3fc:	sub	r2, fp, #116	; 0x74
   1b400:	ldrd	r0, [r2]
   1b404:	strd	r0, [r3]
   1b408:	ldrd	r0, [r2, #8]
   1b40c:	strd	r0, [r3, #8]
   1b410:	ldrd	r0, [r2, #16]
   1b414:	strd	r0, [r3, #16]
   1b418:	ldrd	r0, [r2, #24]
   1b41c:	strd	r0, [r3, #24]
   1b420:	ldrd	r0, [r2, #32]
   1b424:	strd	r0, [r3, #32]
   1b428:	ldrd	r0, [r2, #40]	; 0x28
   1b42c:	strd	r0, [r3, #40]	; 0x28
   1b430:	sub	r3, fp, #52	; 0x34
   1b434:	mov	r2, #1
   1b438:	mov	r1, #58	; 0x3a
   1b43c:	mov	r0, r3
   1b440:	bl	18f94 <__assert_fail@plt+0x7dcc>
   1b444:	sub	r3, fp, #52	; 0x34
   1b448:	mvn	r2, #0
   1b44c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b450:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b454:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b458:	mov	r3, r0
   1b45c:	mov	r0, r3
   1b460:	sub	sp, fp, #4
   1b464:	ldr	fp, [sp]
   1b468:	add	sp, sp, #4
   1b46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b470:	str	fp, [sp, #-8]!
   1b474:	str	lr, [sp, #4]
   1b478:	add	fp, sp, #4
   1b47c:	sub	sp, sp, #24
   1b480:	str	r0, [fp, #-8]
   1b484:	str	r1, [fp, #-12]
   1b488:	str	r2, [fp, #-16]
   1b48c:	str	r3, [fp, #-20]	; 0xffffffec
   1b490:	mvn	r3, #0
   1b494:	str	r3, [sp]
   1b498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b49c:	ldr	r2, [fp, #-16]
   1b4a0:	ldr	r1, [fp, #-12]
   1b4a4:	ldr	r0, [fp, #-8]
   1b4a8:	bl	1b4c4 <__assert_fail@plt+0xa2fc>
   1b4ac:	mov	r3, r0
   1b4b0:	mov	r0, r3
   1b4b4:	sub	sp, fp, #4
   1b4b8:	ldr	fp, [sp]
   1b4bc:	add	sp, sp, #4
   1b4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4c4:	str	fp, [sp, #-8]!
   1b4c8:	str	lr, [sp, #4]
   1b4cc:	add	fp, sp, #4
   1b4d0:	sub	sp, sp, #64	; 0x40
   1b4d4:	str	r0, [fp, #-56]	; 0xffffffc8
   1b4d8:	str	r1, [fp, #-60]	; 0xffffffc4
   1b4dc:	str	r2, [fp, #-64]	; 0xffffffc0
   1b4e0:	str	r3, [fp, #-68]	; 0xffffffbc
   1b4e4:	movw	r2, #436	; 0x1b4
   1b4e8:	movt	r2, #3
   1b4ec:	sub	r3, fp, #52	; 0x34
   1b4f0:	ldrd	r0, [r2]
   1b4f4:	strd	r0, [r3]
   1b4f8:	ldrd	r0, [r2, #8]
   1b4fc:	strd	r0, [r3, #8]
   1b500:	ldrd	r0, [r2, #16]
   1b504:	strd	r0, [r3, #16]
   1b508:	ldrd	r0, [r2, #24]
   1b50c:	strd	r0, [r3, #24]
   1b510:	ldrd	r0, [r2, #32]
   1b514:	strd	r0, [r3, #32]
   1b518:	ldrd	r0, [r2, #40]	; 0x28
   1b51c:	strd	r0, [r3, #40]	; 0x28
   1b520:	sub	r3, fp, #52	; 0x34
   1b524:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b528:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b52c:	mov	r0, r3
   1b530:	bl	190ac <__assert_fail@plt+0x7ee4>
   1b534:	sub	r3, fp, #52	; 0x34
   1b538:	ldr	r2, [fp, #4]
   1b53c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b540:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b544:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b548:	mov	r3, r0
   1b54c:	mov	r0, r3
   1b550:	sub	sp, fp, #4
   1b554:	ldr	fp, [sp]
   1b558:	add	sp, sp, #4
   1b55c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b560:	str	fp, [sp, #-8]!
   1b564:	str	lr, [sp, #4]
   1b568:	add	fp, sp, #4
   1b56c:	sub	sp, sp, #16
   1b570:	str	r0, [fp, #-8]
   1b574:	str	r1, [fp, #-12]
   1b578:	str	r2, [fp, #-16]
   1b57c:	ldr	r3, [fp, #-16]
   1b580:	ldr	r2, [fp, #-12]
   1b584:	ldr	r1, [fp, #-8]
   1b588:	mov	r0, #0
   1b58c:	bl	1b470 <__assert_fail@plt+0xa2a8>
   1b590:	mov	r3, r0
   1b594:	mov	r0, r3
   1b598:	sub	sp, fp, #4
   1b59c:	ldr	fp, [sp]
   1b5a0:	add	sp, sp, #4
   1b5a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5a8:	str	fp, [sp, #-8]!
   1b5ac:	str	lr, [sp, #4]
   1b5b0:	add	fp, sp, #4
   1b5b4:	sub	sp, sp, #24
   1b5b8:	str	r0, [fp, #-8]
   1b5bc:	str	r1, [fp, #-12]
   1b5c0:	str	r2, [fp, #-16]
   1b5c4:	str	r3, [fp, #-20]	; 0xffffffec
   1b5c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b5cc:	str	r3, [sp]
   1b5d0:	ldr	r3, [fp, #-16]
   1b5d4:	ldr	r2, [fp, #-12]
   1b5d8:	ldr	r1, [fp, #-8]
   1b5dc:	mov	r0, #0
   1b5e0:	bl	1b4c4 <__assert_fail@plt+0xa2fc>
   1b5e4:	mov	r3, r0
   1b5e8:	mov	r0, r3
   1b5ec:	sub	sp, fp, #4
   1b5f0:	ldr	fp, [sp]
   1b5f4:	add	sp, sp, #4
   1b5f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5fc:	str	fp, [sp, #-8]!
   1b600:	str	lr, [sp, #4]
   1b604:	add	fp, sp, #4
   1b608:	sub	sp, sp, #16
   1b60c:	str	r0, [fp, #-8]
   1b610:	str	r1, [fp, #-12]
   1b614:	str	r2, [fp, #-16]
   1b618:	movw	r3, #312	; 0x138
   1b61c:	movt	r3, #3
   1b620:	ldr	r2, [fp, #-16]
   1b624:	ldr	r1, [fp, #-12]
   1b628:	ldr	r0, [fp, #-8]
   1b62c:	bl	1ad38 <__assert_fail@plt+0x9b70>
   1b630:	mov	r3, r0
   1b634:	mov	r0, r3
   1b638:	sub	sp, fp, #4
   1b63c:	ldr	fp, [sp]
   1b640:	add	sp, sp, #4
   1b644:	pop	{pc}		; (ldr pc, [sp], #4)
   1b648:	str	fp, [sp, #-8]!
   1b64c:	str	lr, [sp, #4]
   1b650:	add	fp, sp, #4
   1b654:	sub	sp, sp, #8
   1b658:	str	r0, [fp, #-8]
   1b65c:	str	r1, [fp, #-12]
   1b660:	ldr	r2, [fp, #-12]
   1b664:	ldr	r1, [fp, #-8]
   1b668:	mov	r0, #0
   1b66c:	bl	1b5fc <__assert_fail@plt+0xa434>
   1b670:	mov	r3, r0
   1b674:	mov	r0, r3
   1b678:	sub	sp, fp, #4
   1b67c:	ldr	fp, [sp]
   1b680:	add	sp, sp, #4
   1b684:	pop	{pc}		; (ldr pc, [sp], #4)
   1b688:	str	fp, [sp, #-8]!
   1b68c:	str	lr, [sp, #4]
   1b690:	add	fp, sp, #4
   1b694:	sub	sp, sp, #8
   1b698:	str	r0, [fp, #-8]
   1b69c:	str	r1, [fp, #-12]
   1b6a0:	mvn	r2, #0
   1b6a4:	ldr	r1, [fp, #-12]
   1b6a8:	ldr	r0, [fp, #-8]
   1b6ac:	bl	1b5fc <__assert_fail@plt+0xa434>
   1b6b0:	mov	r3, r0
   1b6b4:	mov	r0, r3
   1b6b8:	sub	sp, fp, #4
   1b6bc:	ldr	fp, [sp]
   1b6c0:	add	sp, sp, #4
   1b6c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6c8:	str	fp, [sp, #-8]!
   1b6cc:	str	lr, [sp, #4]
   1b6d0:	add	fp, sp, #4
   1b6d4:	sub	sp, sp, #8
   1b6d8:	str	r0, [fp, #-8]
   1b6dc:	ldr	r1, [fp, #-8]
   1b6e0:	mov	r0, #0
   1b6e4:	bl	1b688 <__assert_fail@plt+0xa4c0>
   1b6e8:	mov	r3, r0
   1b6ec:	mov	r0, r3
   1b6f0:	sub	sp, fp, #4
   1b6f4:	ldr	fp, [sp]
   1b6f8:	add	sp, sp, #4
   1b6fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b700:	str	fp, [sp, #-8]!
   1b704:	str	lr, [sp, #4]
   1b708:	add	fp, sp, #4
   1b70c:	sub	sp, sp, #112	; 0x70
   1b710:	str	r0, [fp, #-112]	; 0xffffff90
   1b714:	sub	r3, fp, #108	; 0x6c
   1b718:	mov	r1, r3
   1b71c:	movw	r0, #62588	; 0xf47c
   1b720:	movt	r0, #1
   1b724:	bl	1e79c <__assert_fail@plt+0xd5d4>
   1b728:	mov	r3, r0
   1b72c:	cmp	r3, #0
   1b730:	beq	1b73c <__assert_fail@plt+0xa574>
   1b734:	mov	r3, #0
   1b738:	b	1b758 <__assert_fail@plt+0xa590>
   1b73c:	ldrd	r2, [fp, #-12]
   1b740:	ldr	r1, [fp, #-112]	; 0xffffff90
   1b744:	strd	r2, [r1]
   1b748:	ldrd	r2, [fp, #-108]	; 0xffffff94
   1b74c:	ldr	r1, [fp, #-112]	; 0xffffff90
   1b750:	strd	r2, [r1, #8]
   1b754:	ldr	r3, [fp, #-112]	; 0xffffff90
   1b758:	mov	r0, r3
   1b75c:	sub	sp, fp, #4
   1b760:	ldr	fp, [sp]
   1b764:	add	sp, sp, #4
   1b768:	pop	{pc}		; (ldr pc, [sp], #4)
   1b76c:	str	fp, [sp, #-8]!
   1b770:	str	lr, [sp, #4]
   1b774:	add	fp, sp, #4
   1b778:	sub	sp, sp, #16
   1b77c:	str	r0, [fp, #-16]
   1b780:	ldr	r3, [fp, #-16]
   1b784:	cmp	r3, #0
   1b788:	blt	1b7d4 <__assert_fail@plt+0xa60c>
   1b78c:	ldr	r3, [fp, #-16]
   1b790:	cmp	r3, #2
   1b794:	bgt	1b7d4 <__assert_fail@plt+0xa60c>
   1b798:	ldr	r0, [fp, #-16]
   1b79c:	bl	1ddec <__assert_fail@plt+0xcc24>
   1b7a0:	str	r0, [fp, #-8]
   1b7a4:	bl	1109c <__errno_location@plt>
   1b7a8:	mov	r3, r0
   1b7ac:	ldr	r3, [r3]
   1b7b0:	str	r3, [fp, #-12]
   1b7b4:	ldr	r0, [fp, #-16]
   1b7b8:	bl	111a4 <close@plt>
   1b7bc:	bl	1109c <__errno_location@plt>
   1b7c0:	mov	r2, r0
   1b7c4:	ldr	r3, [fp, #-12]
   1b7c8:	str	r3, [r2]
   1b7cc:	ldr	r3, [fp, #-8]
   1b7d0:	str	r3, [fp, #-16]
   1b7d4:	ldr	r3, [fp, #-16]
   1b7d8:	mov	r0, r3
   1b7dc:	sub	sp, fp, #4
   1b7e0:	ldr	fp, [sp]
   1b7e4:	add	sp, sp, #4
   1b7e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b7f0:	strd	r6, [sp, #8]
   1b7f4:	str	fp, [sp, #16]
   1b7f8:	str	lr, [sp, #20]
   1b7fc:	add	fp, sp, #20
   1b800:	sub	sp, sp, #48	; 0x30
   1b804:	str	r0, [fp, #-24]	; 0xffffffe8
   1b808:	str	r1, [fp, #-28]	; 0xffffffe4
   1b80c:	str	r2, [fp, #-32]	; 0xffffffe0
   1b810:	str	r3, [fp, #-36]	; 0xffffffdc
   1b814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b818:	cmp	r3, #0
   1b81c:	beq	1b844 <__assert_fail@plt+0xa67c>
   1b820:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b824:	str	r3, [sp]
   1b828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b82c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b830:	movw	r1, #62592	; 0xf480
   1b834:	movt	r1, #1
   1b838:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b83c:	bl	11084 <fprintf@plt>
   1b840:	b	1b85c <__assert_fail@plt+0xa694>
   1b844:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b848:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b84c:	movw	r1, #62604	; 0xf48c
   1b850:	movt	r1, #1
   1b854:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b858:	bl	11084 <fprintf@plt>
   1b85c:	movw	r0, #62612	; 0xf494
   1b860:	movt	r0, #1
   1b864:	bl	11060 <gettext@plt>
   1b868:	mov	r2, r0
   1b86c:	movw	r3, #2022	; 0x7e6
   1b870:	movw	r1, #63396	; 0xf7a4
   1b874:	movt	r1, #1
   1b878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b87c:	bl	11084 <fprintf@plt>
   1b880:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b884:	mov	r0, #10
   1b888:	bl	10f64 <fputc_unlocked@plt>
   1b88c:	movw	r0, #62616	; 0xf498
   1b890:	movt	r0, #1
   1b894:	bl	11060 <gettext@plt>
   1b898:	mov	r3, r0
   1b89c:	movw	r2, #62788	; 0xf544
   1b8a0:	movt	r2, #1
   1b8a4:	mov	r1, r3
   1b8a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b8ac:	bl	11084 <fprintf@plt>
   1b8b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b8b4:	mov	r0, #10
   1b8b8:	bl	10f64 <fputc_unlocked@plt>
   1b8bc:	ldr	r3, [fp, #8]
   1b8c0:	cmp	r3, #9
   1b8c4:	ldrls	pc, [pc, r3, lsl #2]
   1b8c8:	b	1bca8 <__assert_fail@plt+0xaae0>
   1b8cc:	andeq	fp, r1, r4, asr sp
   1b8d0:	strdeq	fp, [r1], -r4
   1b8d4:	andeq	fp, r1, ip, lsl r9
   1b8d8:	andeq	fp, r1, ip, asr #18
   1b8dc:	muleq	r1, r0, r9
   1b8e0:	andeq	fp, r1, ip, ror #19
   1b8e4:	andeq	fp, r1, r8, asr sl
   1b8e8:	ldrdeq	fp, [r1], -r4
   1b8ec:	andeq	fp, r1, r0, ror #22
   1b8f0:	strdeq	fp, [r1], -ip
   1b8f4:	movw	r0, #62824	; 0xf568
   1b8f8:	movt	r0, #1
   1b8fc:	bl	11060 <gettext@plt>
   1b900:	mov	r1, r0
   1b904:	ldr	r3, [fp, #4]
   1b908:	ldr	r3, [r3]
   1b90c:	mov	r2, r3
   1b910:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b914:	bl	11084 <fprintf@plt>
   1b918:	b	1bd58 <__assert_fail@plt+0xab90>
   1b91c:	movw	r0, #62840	; 0xf578
   1b920:	movt	r0, #1
   1b924:	bl	11060 <gettext@plt>
   1b928:	mov	r1, r0
   1b92c:	ldr	r3, [fp, #4]
   1b930:	ldr	r2, [r3]
   1b934:	ldr	r3, [fp, #4]
   1b938:	add	r3, r3, #4
   1b93c:	ldr	r3, [r3]
   1b940:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b944:	bl	11084 <fprintf@plt>
   1b948:	b	1bd58 <__assert_fail@plt+0xab90>
   1b94c:	movw	r0, #62864	; 0xf590
   1b950:	movt	r0, #1
   1b954:	bl	11060 <gettext@plt>
   1b958:	ldr	r3, [fp, #4]
   1b95c:	ldr	r2, [r3]
   1b960:	ldr	r3, [fp, #4]
   1b964:	add	r3, r3, #4
   1b968:	ldr	r1, [r3]
   1b96c:	ldr	r3, [fp, #4]
   1b970:	add	r3, r3, #8
   1b974:	ldr	r3, [r3]
   1b978:	str	r3, [sp]
   1b97c:	mov	r3, r1
   1b980:	mov	r1, r0
   1b984:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b988:	bl	11084 <fprintf@plt>
   1b98c:	b	1bd58 <__assert_fail@plt+0xab90>
   1b990:	movw	r0, #62892	; 0xf5ac
   1b994:	movt	r0, #1
   1b998:	bl	11060 <gettext@plt>
   1b99c:	mov	ip, r0
   1b9a0:	ldr	r3, [fp, #4]
   1b9a4:	ldr	r1, [r3]
   1b9a8:	ldr	r3, [fp, #4]
   1b9ac:	add	r3, r3, #4
   1b9b0:	ldr	r0, [r3]
   1b9b4:	ldr	r3, [fp, #4]
   1b9b8:	add	r3, r3, #8
   1b9bc:	ldr	r3, [r3]
   1b9c0:	ldr	r2, [fp, #4]
   1b9c4:	add	r2, r2, #12
   1b9c8:	ldr	r2, [r2]
   1b9cc:	str	r2, [sp, #4]
   1b9d0:	str	r3, [sp]
   1b9d4:	mov	r3, r0
   1b9d8:	mov	r2, r1
   1b9dc:	mov	r1, ip
   1b9e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b9e4:	bl	11084 <fprintf@plt>
   1b9e8:	b	1bd58 <__assert_fail@plt+0xab90>
   1b9ec:	movw	r0, #62924	; 0xf5cc
   1b9f0:	movt	r0, #1
   1b9f4:	bl	11060 <gettext@plt>
   1b9f8:	mov	lr, r0
   1b9fc:	ldr	r3, [fp, #4]
   1ba00:	ldr	r0, [r3]
   1ba04:	ldr	r3, [fp, #4]
   1ba08:	add	r3, r3, #4
   1ba0c:	ldr	ip, [r3]
   1ba10:	ldr	r3, [fp, #4]
   1ba14:	add	r3, r3, #8
   1ba18:	ldr	r3, [r3]
   1ba1c:	ldr	r2, [fp, #4]
   1ba20:	add	r2, r2, #12
   1ba24:	ldr	r2, [r2]
   1ba28:	ldr	r1, [fp, #4]
   1ba2c:	add	r1, r1, #16
   1ba30:	ldr	r1, [r1]
   1ba34:	str	r1, [sp, #8]
   1ba38:	str	r2, [sp, #4]
   1ba3c:	str	r3, [sp]
   1ba40:	mov	r3, ip
   1ba44:	mov	r2, r0
   1ba48:	mov	r1, lr
   1ba4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ba50:	bl	11084 <fprintf@plt>
   1ba54:	b	1bd58 <__assert_fail@plt+0xab90>
   1ba58:	movw	r0, #62960	; 0xf5f0
   1ba5c:	movt	r0, #1
   1ba60:	bl	11060 <gettext@plt>
   1ba64:	mov	r4, r0
   1ba68:	ldr	r3, [fp, #4]
   1ba6c:	ldr	ip, [r3]
   1ba70:	ldr	r3, [fp, #4]
   1ba74:	add	r3, r3, #4
   1ba78:	ldr	lr, [r3]
   1ba7c:	ldr	r3, [fp, #4]
   1ba80:	add	r3, r3, #8
   1ba84:	ldr	r3, [r3]
   1ba88:	ldr	r2, [fp, #4]
   1ba8c:	add	r2, r2, #12
   1ba90:	ldr	r2, [r2]
   1ba94:	ldr	r1, [fp, #4]
   1ba98:	add	r1, r1, #16
   1ba9c:	ldr	r1, [r1]
   1baa0:	ldr	r0, [fp, #4]
   1baa4:	add	r0, r0, #20
   1baa8:	ldr	r0, [r0]
   1baac:	str	r0, [sp, #12]
   1bab0:	str	r1, [sp, #8]
   1bab4:	str	r2, [sp, #4]
   1bab8:	str	r3, [sp]
   1babc:	mov	r3, lr
   1bac0:	mov	r2, ip
   1bac4:	mov	r1, r4
   1bac8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bacc:	bl	11084 <fprintf@plt>
   1bad0:	b	1bd58 <__assert_fail@plt+0xab90>
   1bad4:	movw	r0, #63000	; 0xf618
   1bad8:	movt	r0, #1
   1badc:	bl	11060 <gettext@plt>
   1bae0:	mov	r5, r0
   1bae4:	ldr	r3, [fp, #4]
   1bae8:	ldr	lr, [r3]
   1baec:	ldr	r3, [fp, #4]
   1baf0:	add	r3, r3, #4
   1baf4:	ldr	r4, [r3]
   1baf8:	ldr	r3, [fp, #4]
   1bafc:	add	r3, r3, #8
   1bb00:	ldr	r3, [r3]
   1bb04:	ldr	r2, [fp, #4]
   1bb08:	add	r2, r2, #12
   1bb0c:	ldr	r2, [r2]
   1bb10:	ldr	r1, [fp, #4]
   1bb14:	add	r1, r1, #16
   1bb18:	ldr	r1, [r1]
   1bb1c:	ldr	r0, [fp, #4]
   1bb20:	add	r0, r0, #20
   1bb24:	ldr	r0, [r0]
   1bb28:	ldr	ip, [fp, #4]
   1bb2c:	add	ip, ip, #24
   1bb30:	ldr	ip, [ip]
   1bb34:	str	ip, [sp, #16]
   1bb38:	str	r0, [sp, #12]
   1bb3c:	str	r1, [sp, #8]
   1bb40:	str	r2, [sp, #4]
   1bb44:	str	r3, [sp]
   1bb48:	mov	r3, r4
   1bb4c:	mov	r2, lr
   1bb50:	mov	r1, r5
   1bb54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb58:	bl	11084 <fprintf@plt>
   1bb5c:	b	1bd58 <__assert_fail@plt+0xab90>
   1bb60:	movw	r0, #63044	; 0xf644
   1bb64:	movt	r0, #1
   1bb68:	bl	11060 <gettext@plt>
   1bb6c:	mov	r6, r0
   1bb70:	ldr	r3, [fp, #4]
   1bb74:	ldr	r4, [r3]
   1bb78:	ldr	r3, [fp, #4]
   1bb7c:	add	r3, r3, #4
   1bb80:	ldr	r5, [r3]
   1bb84:	ldr	r3, [fp, #4]
   1bb88:	add	r3, r3, #8
   1bb8c:	ldr	r3, [r3]
   1bb90:	ldr	r2, [fp, #4]
   1bb94:	add	r2, r2, #12
   1bb98:	ldr	r2, [r2]
   1bb9c:	ldr	r1, [fp, #4]
   1bba0:	add	r1, r1, #16
   1bba4:	ldr	r1, [r1]
   1bba8:	ldr	r0, [fp, #4]
   1bbac:	add	r0, r0, #20
   1bbb0:	ldr	r0, [r0]
   1bbb4:	ldr	ip, [fp, #4]
   1bbb8:	add	ip, ip, #24
   1bbbc:	ldr	ip, [ip]
   1bbc0:	ldr	lr, [fp, #4]
   1bbc4:	add	lr, lr, #28
   1bbc8:	ldr	lr, [lr]
   1bbcc:	str	lr, [sp, #20]
   1bbd0:	str	ip, [sp, #16]
   1bbd4:	str	r0, [sp, #12]
   1bbd8:	str	r1, [sp, #8]
   1bbdc:	str	r2, [sp, #4]
   1bbe0:	str	r3, [sp]
   1bbe4:	mov	r3, r5
   1bbe8:	mov	r2, r4
   1bbec:	mov	r1, r6
   1bbf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbf4:	bl	11084 <fprintf@plt>
   1bbf8:	b	1bd58 <__assert_fail@plt+0xab90>
   1bbfc:	movw	r0, #63092	; 0xf674
   1bc00:	movt	r0, #1
   1bc04:	bl	11060 <gettext@plt>
   1bc08:	mov	r7, r0
   1bc0c:	ldr	r3, [fp, #4]
   1bc10:	ldr	r5, [r3]
   1bc14:	ldr	r3, [fp, #4]
   1bc18:	add	r3, r3, #4
   1bc1c:	ldr	r6, [r3]
   1bc20:	ldr	r3, [fp, #4]
   1bc24:	add	r3, r3, #8
   1bc28:	ldr	r3, [r3]
   1bc2c:	ldr	r2, [fp, #4]
   1bc30:	add	r2, r2, #12
   1bc34:	ldr	r2, [r2]
   1bc38:	ldr	r1, [fp, #4]
   1bc3c:	add	r1, r1, #16
   1bc40:	ldr	r1, [r1]
   1bc44:	ldr	r0, [fp, #4]
   1bc48:	add	r0, r0, #20
   1bc4c:	ldr	r0, [r0]
   1bc50:	ldr	ip, [fp, #4]
   1bc54:	add	ip, ip, #24
   1bc58:	ldr	ip, [ip]
   1bc5c:	ldr	lr, [fp, #4]
   1bc60:	add	lr, lr, #28
   1bc64:	ldr	lr, [lr]
   1bc68:	ldr	r4, [fp, #4]
   1bc6c:	add	r4, r4, #32
   1bc70:	ldr	r4, [r4]
   1bc74:	str	r4, [sp, #24]
   1bc78:	str	lr, [sp, #20]
   1bc7c:	str	ip, [sp, #16]
   1bc80:	str	r0, [sp, #12]
   1bc84:	str	r1, [sp, #8]
   1bc88:	str	r2, [sp, #4]
   1bc8c:	str	r3, [sp]
   1bc90:	mov	r3, r6
   1bc94:	mov	r2, r5
   1bc98:	mov	r1, r7
   1bc9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bca0:	bl	11084 <fprintf@plt>
   1bca4:	b	1bd58 <__assert_fail@plt+0xab90>
   1bca8:	movw	r0, #63144	; 0xf6a8
   1bcac:	movt	r0, #1
   1bcb0:	bl	11060 <gettext@plt>
   1bcb4:	mov	r7, r0
   1bcb8:	ldr	r3, [fp, #4]
   1bcbc:	ldr	r5, [r3]
   1bcc0:	ldr	r3, [fp, #4]
   1bcc4:	add	r3, r3, #4
   1bcc8:	ldr	r6, [r3]
   1bccc:	ldr	r3, [fp, #4]
   1bcd0:	add	r3, r3, #8
   1bcd4:	ldr	r3, [r3]
   1bcd8:	ldr	r2, [fp, #4]
   1bcdc:	add	r2, r2, #12
   1bce0:	ldr	r2, [r2]
   1bce4:	ldr	r1, [fp, #4]
   1bce8:	add	r1, r1, #16
   1bcec:	ldr	r1, [r1]
   1bcf0:	ldr	r0, [fp, #4]
   1bcf4:	add	r0, r0, #20
   1bcf8:	ldr	r0, [r0]
   1bcfc:	ldr	ip, [fp, #4]
   1bd00:	add	ip, ip, #24
   1bd04:	ldr	ip, [ip]
   1bd08:	ldr	lr, [fp, #4]
   1bd0c:	add	lr, lr, #28
   1bd10:	ldr	lr, [lr]
   1bd14:	ldr	r4, [fp, #4]
   1bd18:	add	r4, r4, #32
   1bd1c:	ldr	r4, [r4]
   1bd20:	str	r4, [sp, #24]
   1bd24:	str	lr, [sp, #20]
   1bd28:	str	ip, [sp, #16]
   1bd2c:	str	r0, [sp, #12]
   1bd30:	str	r1, [sp, #8]
   1bd34:	str	r2, [sp, #4]
   1bd38:	str	r3, [sp]
   1bd3c:	mov	r3, r6
   1bd40:	mov	r2, r5
   1bd44:	mov	r1, r7
   1bd48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bd4c:	bl	11084 <fprintf@plt>
   1bd50:	b	1bd58 <__assert_fail@plt+0xab90>
   1bd54:	nop	{0}
   1bd58:	nop	{0}
   1bd5c:	sub	sp, fp, #20
   1bd60:	ldrd	r4, [sp]
   1bd64:	ldrd	r6, [sp, #8]
   1bd68:	ldr	fp, [sp, #16]
   1bd6c:	add	sp, sp, #20
   1bd70:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd74:	str	fp, [sp, #-8]!
   1bd78:	str	lr, [sp, #4]
   1bd7c:	add	fp, sp, #4
   1bd80:	sub	sp, sp, #32
   1bd84:	str	r0, [fp, #-16]
   1bd88:	str	r1, [fp, #-20]	; 0xffffffec
   1bd8c:	str	r2, [fp, #-24]	; 0xffffffe8
   1bd90:	str	r3, [fp, #-28]	; 0xffffffe4
   1bd94:	mov	r3, #0
   1bd98:	str	r3, [fp, #-8]
   1bd9c:	b	1bdac <__assert_fail@plt+0xabe4>
   1bda0:	ldr	r3, [fp, #-8]
   1bda4:	add	r3, r3, #1
   1bda8:	str	r3, [fp, #-8]
   1bdac:	ldr	r3, [fp, #-8]
   1bdb0:	lsl	r3, r3, #2
   1bdb4:	ldr	r2, [fp, #4]
   1bdb8:	add	r3, r2, r3
   1bdbc:	ldr	r3, [r3]
   1bdc0:	cmp	r3, #0
   1bdc4:	bne	1bda0 <__assert_fail@plt+0xabd8>
   1bdc8:	ldr	r3, [fp, #-8]
   1bdcc:	str	r3, [sp, #4]
   1bdd0:	ldr	r3, [fp, #4]
   1bdd4:	str	r3, [sp]
   1bdd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bddc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bde0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bde4:	ldr	r0, [fp, #-16]
   1bde8:	bl	1b7ec <__assert_fail@plt+0xa624>
   1bdec:	nop	{0}
   1bdf0:	sub	sp, fp, #4
   1bdf4:	ldr	fp, [sp]
   1bdf8:	add	sp, sp, #4
   1bdfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1be00:	str	fp, [sp, #-8]!
   1be04:	str	lr, [sp, #4]
   1be08:	add	fp, sp, #4
   1be0c:	sub	sp, sp, #72	; 0x48
   1be10:	str	r0, [fp, #-56]	; 0xffffffc8
   1be14:	str	r1, [fp, #-60]	; 0xffffffc4
   1be18:	str	r2, [fp, #-64]	; 0xffffffc0
   1be1c:	str	r3, [fp, #-68]	; 0xffffffbc
   1be20:	mov	r3, #0
   1be24:	str	r3, [fp, #-8]
   1be28:	b	1be38 <__assert_fail@plt+0xac70>
   1be2c:	ldr	r3, [fp, #-8]
   1be30:	add	r3, r3, #1
   1be34:	str	r3, [fp, #-8]
   1be38:	ldr	r3, [fp, #-8]
   1be3c:	cmp	r3, #9
   1be40:	bhi	1be84 <__assert_fail@plt+0xacbc>
   1be44:	ldr	r3, [fp, #4]
   1be48:	add	r2, r3, #4
   1be4c:	str	r2, [fp, #4]
   1be50:	ldr	r2, [r3]
   1be54:	ldr	r3, [fp, #-8]
   1be58:	lsl	r3, r3, #2
   1be5c:	sub	r1, fp, #4
   1be60:	add	r3, r1, r3
   1be64:	str	r2, [r3, #-44]	; 0xffffffd4
   1be68:	ldr	r3, [fp, #-8]
   1be6c:	lsl	r3, r3, #2
   1be70:	sub	r2, fp, #4
   1be74:	add	r3, r2, r3
   1be78:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1be7c:	cmp	r3, #0
   1be80:	bne	1be2c <__assert_fail@plt+0xac64>
   1be84:	ldr	r3, [fp, #-8]
   1be88:	str	r3, [sp, #4]
   1be8c:	sub	r3, fp, #48	; 0x30
   1be90:	str	r3, [sp]
   1be94:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1be98:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1be9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1bea0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1bea4:	bl	1b7ec <__assert_fail@plt+0xa624>
   1bea8:	nop	{0}
   1beac:	sub	sp, fp, #4
   1beb0:	ldr	fp, [sp]
   1beb4:	add	sp, sp, #4
   1beb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bebc:	push	{r3}		; (str r3, [sp, #-4]!)
   1bec0:	str	fp, [sp, #-8]!
   1bec4:	str	lr, [sp, #4]
   1bec8:	add	fp, sp, #4
   1becc:	sub	sp, sp, #36	; 0x24
   1bed0:	str	r0, [fp, #-20]	; 0xffffffec
   1bed4:	str	r1, [fp, #-24]	; 0xffffffe8
   1bed8:	str	r2, [fp, #-28]	; 0xffffffe4
   1bedc:	add	r3, fp, #8
   1bee0:	str	r3, [fp, #-12]
   1bee4:	ldr	r3, [fp, #-12]
   1bee8:	str	r3, [sp]
   1beec:	ldr	r3, [fp, #4]
   1bef0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bef4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bef8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1befc:	bl	1be00 <__assert_fail@plt+0xac38>
   1bf00:	nop	{0}
   1bf04:	sub	sp, fp, #4
   1bf08:	ldr	fp, [sp]
   1bf0c:	ldr	lr, [sp, #4]
   1bf10:	add	sp, sp, #8
   1bf14:	add	sp, sp, #4
   1bf18:	bx	lr
   1bf1c:	str	fp, [sp, #-8]!
   1bf20:	str	lr, [sp, #4]
   1bf24:	add	fp, sp, #4
   1bf28:	movw	r3, #380	; 0x17c
   1bf2c:	movt	r3, #3
   1bf30:	ldr	r3, [r3]
   1bf34:	mov	r1, r3
   1bf38:	mov	r0, #10
   1bf3c:	bl	10f64 <fputc_unlocked@plt>
   1bf40:	movw	r0, #63204	; 0xf6e4
   1bf44:	movt	r0, #1
   1bf48:	bl	11060 <gettext@plt>
   1bf4c:	mov	r3, r0
   1bf50:	movw	r1, #63224	; 0xf6f8
   1bf54:	movt	r1, #1
   1bf58:	mov	r0, r3
   1bf5c:	bl	10f04 <printf@plt>
   1bf60:	movw	r0, #63248	; 0xf710
   1bf64:	movt	r0, #1
   1bf68:	bl	11060 <gettext@plt>
   1bf6c:	mov	r3, r0
   1bf70:	movw	r2, #63268	; 0xf724
   1bf74:	movt	r2, #1
   1bf78:	movw	r1, #63308	; 0xf74c
   1bf7c:	movt	r1, #1
   1bf80:	mov	r0, r3
   1bf84:	bl	10f04 <printf@plt>
   1bf88:	movw	r0, #63324	; 0xf75c
   1bf8c:	movt	r0, #1
   1bf90:	bl	11060 <gettext@plt>
   1bf94:	mov	r3, r0
   1bf98:	movw	r1, #63364	; 0xf784
   1bf9c:	movt	r1, #1
   1bfa0:	mov	r0, r3
   1bfa4:	bl	10f04 <printf@plt>
   1bfa8:	nop	{0}
   1bfac:	sub	sp, fp, #4
   1bfb0:	ldr	fp, [sp]
   1bfb4:	add	sp, sp, #4
   1bfb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfbc:	str	fp, [sp, #-8]!
   1bfc0:	str	lr, [sp, #4]
   1bfc4:	add	fp, sp, #4
   1bfc8:	sub	sp, sp, #16
   1bfcc:	str	r0, [fp, #-8]
   1bfd0:	str	r1, [fp, #-12]
   1bfd4:	str	r2, [fp, #-16]
   1bfd8:	ldr	r2, [fp, #-16]
   1bfdc:	ldr	r1, [fp, #-12]
   1bfe0:	ldr	r0, [fp, #-8]
   1bfe4:	bl	1c1a0 <__assert_fail@plt+0xafd8>
   1bfe8:	mov	r3, r0
   1bfec:	mov	r0, r3
   1bff0:	sub	sp, fp, #4
   1bff4:	ldr	fp, [sp]
   1bff8:	add	sp, sp, #4
   1bffc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c000:	str	fp, [sp, #-8]!
   1c004:	str	lr, [sp, #4]
   1c008:	add	fp, sp, #4
   1c00c:	sub	sp, sp, #8
   1c010:	str	r0, [fp, #-8]
   1c014:	ldr	r3, [fp, #-8]
   1c018:	cmp	r3, #0
   1c01c:	bne	1c024 <__assert_fail@plt+0xae5c>
   1c020:	bl	1c8b0 <__assert_fail@plt+0xb6e8>
   1c024:	ldr	r3, [fp, #-8]
   1c028:	mov	r0, r3
   1c02c:	sub	sp, fp, #4
   1c030:	ldr	fp, [sp]
   1c034:	add	sp, sp, #4
   1c038:	pop	{pc}		; (ldr pc, [sp], #4)
   1c03c:	str	fp, [sp, #-8]!
   1c040:	str	lr, [sp, #4]
   1c044:	add	fp, sp, #4
   1c048:	sub	sp, sp, #8
   1c04c:	str	r0, [fp, #-8]
   1c050:	ldr	r0, [fp, #-8]
   1c054:	bl	1caf0 <__assert_fail@plt+0xb928>
   1c058:	mov	r3, r0
   1c05c:	mov	r0, r3
   1c060:	bl	1c000 <__assert_fail@plt+0xae38>
   1c064:	mov	r3, r0
   1c068:	mov	r0, r3
   1c06c:	sub	sp, fp, #4
   1c070:	ldr	fp, [sp]
   1c074:	add	sp, sp, #4
   1c078:	pop	{pc}		; (ldr pc, [sp], #4)
   1c07c:	str	fp, [sp, #-8]!
   1c080:	str	lr, [sp, #4]
   1c084:	add	fp, sp, #4
   1c088:	sub	sp, sp, #8
   1c08c:	str	r0, [fp, #-8]
   1c090:	ldr	r0, [fp, #-8]
   1c094:	bl	1dae0 <__assert_fail@plt+0xc918>
   1c098:	mov	r3, r0
   1c09c:	mov	r0, r3
   1c0a0:	bl	1c000 <__assert_fail@plt+0xae38>
   1c0a4:	mov	r3, r0
   1c0a8:	mov	r0, r3
   1c0ac:	sub	sp, fp, #4
   1c0b0:	ldr	fp, [sp]
   1c0b4:	add	sp, sp, #4
   1c0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0bc:	str	fp, [sp, #-8]!
   1c0c0:	str	lr, [sp, #4]
   1c0c4:	add	fp, sp, #4
   1c0c8:	sub	sp, sp, #8
   1c0cc:	str	r0, [fp, #-8]
   1c0d0:	ldr	r0, [fp, #-8]
   1c0d4:	bl	1c03c <__assert_fail@plt+0xae74>
   1c0d8:	mov	r3, r0
   1c0dc:	mov	r0, r3
   1c0e0:	sub	sp, fp, #4
   1c0e4:	ldr	fp, [sp]
   1c0e8:	add	sp, sp, #4
   1c0ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0f0:	str	fp, [sp, #-8]!
   1c0f4:	str	lr, [sp, #4]
   1c0f8:	add	fp, sp, #4
   1c0fc:	sub	sp, sp, #16
   1c100:	str	r0, [fp, #-16]
   1c104:	str	r1, [fp, #-20]	; 0xffffffec
   1c108:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c10c:	ldr	r0, [fp, #-16]
   1c110:	bl	1cb80 <__assert_fail@plt+0xb9b8>
   1c114:	str	r0, [fp, #-8]
   1c118:	ldr	r3, [fp, #-8]
   1c11c:	cmp	r3, #0
   1c120:	bne	1c140 <__assert_fail@plt+0xaf78>
   1c124:	ldr	r3, [fp, #-16]
   1c128:	cmp	r3, #0
   1c12c:	beq	1c13c <__assert_fail@plt+0xaf74>
   1c130:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c134:	cmp	r3, #0
   1c138:	beq	1c140 <__assert_fail@plt+0xaf78>
   1c13c:	bl	1c8b0 <__assert_fail@plt+0xb6e8>
   1c140:	ldr	r3, [fp, #-8]
   1c144:	mov	r0, r3
   1c148:	sub	sp, fp, #4
   1c14c:	ldr	fp, [sp]
   1c150:	add	sp, sp, #4
   1c154:	pop	{pc}		; (ldr pc, [sp], #4)
   1c158:	str	fp, [sp, #-8]!
   1c15c:	str	lr, [sp, #4]
   1c160:	add	fp, sp, #4
   1c164:	sub	sp, sp, #8
   1c168:	str	r0, [fp, #-8]
   1c16c:	str	r1, [fp, #-12]
   1c170:	ldr	r1, [fp, #-12]
   1c174:	ldr	r0, [fp, #-8]
   1c178:	bl	1db18 <__assert_fail@plt+0xc950>
   1c17c:	mov	r3, r0
   1c180:	mov	r0, r3
   1c184:	bl	1c000 <__assert_fail@plt+0xae38>
   1c188:	mov	r3, r0
   1c18c:	mov	r0, r3
   1c190:	sub	sp, fp, #4
   1c194:	ldr	fp, [sp]
   1c198:	add	sp, sp, #4
   1c19c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1a0:	str	fp, [sp, #-8]!
   1c1a4:	str	lr, [sp, #4]
   1c1a8:	add	fp, sp, #4
   1c1ac:	sub	sp, sp, #24
   1c1b0:	str	r0, [fp, #-16]
   1c1b4:	str	r1, [fp, #-20]	; 0xffffffec
   1c1b8:	str	r2, [fp, #-24]	; 0xffffffe8
   1c1bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c1c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c1c4:	ldr	r0, [fp, #-16]
   1c1c8:	bl	1dd48 <__assert_fail@plt+0xcb80>
   1c1cc:	str	r0, [fp, #-8]
   1c1d0:	ldr	r3, [fp, #-8]
   1c1d4:	cmp	r3, #0
   1c1d8:	bne	1c204 <__assert_fail@plt+0xb03c>
   1c1dc:	ldr	r3, [fp, #-16]
   1c1e0:	cmp	r3, #0
   1c1e4:	beq	1c200 <__assert_fail@plt+0xb038>
   1c1e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c1ec:	cmp	r3, #0
   1c1f0:	beq	1c204 <__assert_fail@plt+0xb03c>
   1c1f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c1f8:	cmp	r3, #0
   1c1fc:	beq	1c204 <__assert_fail@plt+0xb03c>
   1c200:	bl	1c8b0 <__assert_fail@plt+0xb6e8>
   1c204:	ldr	r3, [fp, #-8]
   1c208:	mov	r0, r3
   1c20c:	sub	sp, fp, #4
   1c210:	ldr	fp, [sp]
   1c214:	add	sp, sp, #4
   1c218:	pop	{pc}		; (ldr pc, [sp], #4)
   1c21c:	str	fp, [sp, #-8]!
   1c220:	str	lr, [sp, #4]
   1c224:	add	fp, sp, #4
   1c228:	sub	sp, sp, #16
   1c22c:	str	r0, [fp, #-8]
   1c230:	str	r1, [fp, #-12]
   1c234:	str	r2, [fp, #-16]
   1c238:	ldr	r2, [fp, #-16]
   1c23c:	ldr	r1, [fp, #-12]
   1c240:	ldr	r0, [fp, #-8]
   1c244:	bl	1dbb8 <__assert_fail@plt+0xc9f0>
   1c248:	mov	r3, r0
   1c24c:	mov	r0, r3
   1c250:	bl	1c000 <__assert_fail@plt+0xae38>
   1c254:	mov	r3, r0
   1c258:	mov	r0, r3
   1c25c:	sub	sp, fp, #4
   1c260:	ldr	fp, [sp]
   1c264:	add	sp, sp, #4
   1c268:	pop	{pc}		; (ldr pc, [sp], #4)
   1c26c:	str	fp, [sp, #-8]!
   1c270:	str	lr, [sp, #4]
   1c274:	add	fp, sp, #4
   1c278:	sub	sp, sp, #8
   1c27c:	str	r0, [fp, #-8]
   1c280:	str	r1, [fp, #-12]
   1c284:	ldr	r2, [fp, #-12]
   1c288:	ldr	r1, [fp, #-8]
   1c28c:	mov	r0, #0
   1c290:	bl	1c1a0 <__assert_fail@plt+0xafd8>
   1c294:	mov	r3, r0
   1c298:	mov	r0, r3
   1c29c:	sub	sp, fp, #4
   1c2a0:	ldr	fp, [sp]
   1c2a4:	add	sp, sp, #4
   1c2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2ac:	str	fp, [sp, #-8]!
   1c2b0:	str	lr, [sp, #4]
   1c2b4:	add	fp, sp, #4
   1c2b8:	sub	sp, sp, #8
   1c2bc:	str	r0, [fp, #-8]
   1c2c0:	str	r1, [fp, #-12]
   1c2c4:	ldr	r2, [fp, #-12]
   1c2c8:	ldr	r1, [fp, #-8]
   1c2cc:	mov	r0, #0
   1c2d0:	bl	1c21c <__assert_fail@plt+0xb054>
   1c2d4:	mov	r3, r0
   1c2d8:	mov	r0, r3
   1c2dc:	sub	sp, fp, #4
   1c2e0:	ldr	fp, [sp]
   1c2e4:	add	sp, sp, #4
   1c2e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2ec:	str	fp, [sp, #-8]!
   1c2f0:	str	lr, [sp, #4]
   1c2f4:	add	fp, sp, #4
   1c2f8:	sub	sp, sp, #8
   1c2fc:	str	r0, [fp, #-8]
   1c300:	str	r1, [fp, #-12]
   1c304:	mov	r2, #1
   1c308:	ldr	r1, [fp, #-12]
   1c30c:	ldr	r0, [fp, #-8]
   1c310:	bl	1c32c <__assert_fail@plt+0xb164>
   1c314:	mov	r3, r0
   1c318:	mov	r0, r3
   1c31c:	sub	sp, fp, #4
   1c320:	ldr	fp, [sp]
   1c324:	add	sp, sp, #4
   1c328:	pop	{pc}		; (ldr pc, [sp], #4)
   1c32c:	str	fp, [sp, #-8]!
   1c330:	str	lr, [sp, #4]
   1c334:	add	fp, sp, #4
   1c338:	sub	sp, sp, #24
   1c33c:	str	r0, [fp, #-16]
   1c340:	str	r1, [fp, #-20]	; 0xffffffec
   1c344:	str	r2, [fp, #-24]	; 0xffffffe8
   1c348:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c34c:	ldr	r3, [r3]
   1c350:	str	r3, [fp, #-8]
   1c354:	ldr	r3, [fp, #-16]
   1c358:	cmp	r3, #0
   1c35c:	bne	1c3a4 <__assert_fail@plt+0xb1dc>
   1c360:	ldr	r3, [fp, #-8]
   1c364:	cmp	r3, #0
   1c368:	bne	1c3e0 <__assert_fail@plt+0xb218>
   1c36c:	mov	r2, #64	; 0x40
   1c370:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c374:	udiv	r3, r2, r3
   1c378:	str	r3, [fp, #-8]
   1c37c:	ldr	r3, [fp, #-8]
   1c380:	cmp	r3, #0
   1c384:	moveq	r3, #1
   1c388:	movne	r3, #0
   1c38c:	uxtb	r3, r3
   1c390:	mov	r2, r3
   1c394:	ldr	r3, [fp, #-8]
   1c398:	add	r3, r2, r3
   1c39c:	str	r3, [fp, #-8]
   1c3a0:	b	1c3e0 <__assert_fail@plt+0xb218>
   1c3a4:	ldr	r2, [fp, #-8]
   1c3a8:	ldr	r3, [fp, #-8]
   1c3ac:	lsr	r3, r3, #1
   1c3b0:	add	r3, r3, #1
   1c3b4:	mov	r1, #0
   1c3b8:	adds	r3, r2, r3
   1c3bc:	bcc	1c3c4 <__assert_fail@plt+0xb1fc>
   1c3c0:	mov	r1, #1
   1c3c4:	str	r3, [fp, #-8]
   1c3c8:	mov	r3, r1
   1c3cc:	and	r3, r3, #1
   1c3d0:	uxtb	r3, r3
   1c3d4:	cmp	r3, #0
   1c3d8:	beq	1c3e0 <__assert_fail@plt+0xb218>
   1c3dc:	bl	1c8b0 <__assert_fail@plt+0xb6e8>
   1c3e0:	ldr	r3, [fp, #-8]
   1c3e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c3e8:	mov	r1, r3
   1c3ec:	ldr	r0, [fp, #-16]
   1c3f0:	bl	1c1a0 <__assert_fail@plt+0xafd8>
   1c3f4:	str	r0, [fp, #-16]
   1c3f8:	ldr	r2, [fp, #-8]
   1c3fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c400:	str	r2, [r3]
   1c404:	ldr	r3, [fp, #-16]
   1c408:	mov	r0, r3
   1c40c:	sub	sp, fp, #4
   1c410:	ldr	fp, [sp]
   1c414:	add	sp, sp, #4
   1c418:	pop	{pc}		; (ldr pc, [sp], #4)
   1c41c:	str	fp, [sp, #-8]!
   1c420:	str	lr, [sp, #4]
   1c424:	add	fp, sp, #4
   1c428:	sub	sp, sp, #32
   1c42c:	str	r0, [fp, #-24]	; 0xffffffe8
   1c430:	str	r1, [fp, #-28]	; 0xffffffe4
   1c434:	str	r2, [fp, #-32]	; 0xffffffe0
   1c438:	str	r3, [fp, #-36]	; 0xffffffdc
   1c43c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c440:	ldr	r3, [r3]
   1c444:	str	r3, [fp, #-8]
   1c448:	ldr	r3, [fp, #-8]
   1c44c:	asr	r3, r3, #1
   1c450:	mov	r1, #0
   1c454:	ldr	r2, [fp, #-8]
   1c458:	adds	r3, r2, r3
   1c45c:	bvc	1c464 <__assert_fail@plt+0xb29c>
   1c460:	mov	r1, #1
   1c464:	str	r3, [fp, #-16]
   1c468:	mov	r3, r1
   1c46c:	and	r3, r3, #1
   1c470:	uxtb	r3, r3
   1c474:	cmp	r3, #0
   1c478:	beq	1c484 <__assert_fail@plt+0xb2bc>
   1c47c:	mvn	r3, #-2147483648	; 0x80000000
   1c480:	str	r3, [fp, #-16]
   1c484:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c488:	cmp	r3, #0
   1c48c:	blt	1c4a8 <__assert_fail@plt+0xb2e0>
   1c490:	ldr	r3, [fp, #-16]
   1c494:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c498:	cmp	r2, r3
   1c49c:	bge	1c4a8 <__assert_fail@plt+0xb2e0>
   1c4a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c4a4:	str	r3, [fp, #-16]
   1c4a8:	ldr	r2, [fp, #-16]
   1c4ac:	mov	lr, #0
   1c4b0:	ldr	r3, [fp, #4]
   1c4b4:	smull	r2, r3, r2, r3
   1c4b8:	mov	r0, #0
   1c4bc:	mov	r1, #0
   1c4c0:	mov	r0, r3
   1c4c4:	asr	r1, r3, #31
   1c4c8:	asr	ip, r2, #31
   1c4cc:	cmp	ip, r0
   1c4d0:	beq	1c4d8 <__assert_fail@plt+0xb310>
   1c4d4:	mov	lr, #1
   1c4d8:	mov	r3, r2
   1c4dc:	str	r3, [fp, #-20]	; 0xffffffec
   1c4e0:	mov	r3, lr
   1c4e4:	and	r3, r3, #1
   1c4e8:	uxtb	r3, r3
   1c4ec:	cmp	r3, #0
   1c4f0:	beq	1c4fc <__assert_fail@plt+0xb334>
   1c4f4:	mvn	r3, #-2147483648	; 0x80000000
   1c4f8:	b	1c514 <__assert_fail@plt+0xb34c>
   1c4fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c500:	cmp	r3, #63	; 0x3f
   1c504:	bgt	1c510 <__assert_fail@plt+0xb348>
   1c508:	mov	r3, #64	; 0x40
   1c50c:	b	1c514 <__assert_fail@plt+0xb34c>
   1c510:	mov	r3, #0
   1c514:	str	r3, [fp, #-12]
   1c518:	ldr	r3, [fp, #-12]
   1c51c:	cmp	r3, #0
   1c520:	beq	1c558 <__assert_fail@plt+0xb390>
   1c524:	ldr	r2, [fp, #-12]
   1c528:	ldr	r3, [fp, #4]
   1c52c:	sdiv	r3, r2, r3
   1c530:	str	r3, [fp, #-16]
   1c534:	ldr	r3, [fp, #-12]
   1c538:	ldr	r2, [fp, #4]
   1c53c:	sdiv	r2, r3, r2
   1c540:	ldr	r1, [fp, #4]
   1c544:	mul	r2, r1, r2
   1c548:	sub	r3, r3, r2
   1c54c:	ldr	r2, [fp, #-12]
   1c550:	sub	r3, r2, r3
   1c554:	str	r3, [fp, #-20]	; 0xffffffec
   1c558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c55c:	cmp	r3, #0
   1c560:	bne	1c570 <__assert_fail@plt+0xb3a8>
   1c564:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c568:	mov	r2, #0
   1c56c:	str	r2, [r3]
   1c570:	ldr	r2, [fp, #-16]
   1c574:	ldr	r3, [fp, #-8]
   1c578:	sub	r3, r2, r3
   1c57c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c580:	cmp	r2, r3
   1c584:	ble	1c624 <__assert_fail@plt+0xb45c>
   1c588:	mov	r1, #0
   1c58c:	ldr	r2, [fp, #-8]
   1c590:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c594:	adds	r3, r2, r3
   1c598:	bvc	1c5a0 <__assert_fail@plt+0xb3d8>
   1c59c:	mov	r1, #1
   1c5a0:	str	r3, [fp, #-16]
   1c5a4:	mov	r3, r1
   1c5a8:	and	r3, r3, #1
   1c5ac:	uxtb	r3, r3
   1c5b0:	cmp	r3, #0
   1c5b4:	bne	1c620 <__assert_fail@plt+0xb458>
   1c5b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c5bc:	cmp	r3, #0
   1c5c0:	blt	1c5d4 <__assert_fail@plt+0xb40c>
   1c5c4:	ldr	r3, [fp, #-16]
   1c5c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c5cc:	cmp	r2, r3
   1c5d0:	blt	1c620 <__assert_fail@plt+0xb458>
   1c5d4:	ldr	r2, [fp, #-16]
   1c5d8:	mov	lr, #0
   1c5dc:	ldr	r3, [fp, #4]
   1c5e0:	smull	r2, r3, r2, r3
   1c5e4:	mov	r0, #0
   1c5e8:	mov	r1, #0
   1c5ec:	mov	r0, r3
   1c5f0:	asr	r1, r3, #31
   1c5f4:	asr	ip, r2, #31
   1c5f8:	cmp	ip, r0
   1c5fc:	beq	1c604 <__assert_fail@plt+0xb43c>
   1c600:	mov	lr, #1
   1c604:	mov	r3, r2
   1c608:	str	r3, [fp, #-20]	; 0xffffffec
   1c60c:	mov	r3, lr
   1c610:	and	r3, r3, #1
   1c614:	uxtb	r3, r3
   1c618:	cmp	r3, #0
   1c61c:	beq	1c624 <__assert_fail@plt+0xb45c>
   1c620:	bl	1c8b0 <__assert_fail@plt+0xb6e8>
   1c624:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c628:	mov	r1, r3
   1c62c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c630:	bl	1c0f0 <__assert_fail@plt+0xaf28>
   1c634:	str	r0, [fp, #-24]	; 0xffffffe8
   1c638:	ldr	r2, [fp, #-16]
   1c63c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c640:	str	r2, [r3]
   1c644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c648:	mov	r0, r3
   1c64c:	sub	sp, fp, #4
   1c650:	ldr	fp, [sp]
   1c654:	add	sp, sp, #4
   1c658:	pop	{pc}		; (ldr pc, [sp], #4)
   1c65c:	str	fp, [sp, #-8]!
   1c660:	str	lr, [sp, #4]
   1c664:	add	fp, sp, #4
   1c668:	sub	sp, sp, #8
   1c66c:	str	r0, [fp, #-8]
   1c670:	mov	r1, #1
   1c674:	ldr	r0, [fp, #-8]
   1c678:	bl	1c6cc <__assert_fail@plt+0xb504>
   1c67c:	mov	r3, r0
   1c680:	mov	r0, r3
   1c684:	sub	sp, fp, #4
   1c688:	ldr	fp, [sp]
   1c68c:	add	sp, sp, #4
   1c690:	pop	{pc}		; (ldr pc, [sp], #4)
   1c694:	str	fp, [sp, #-8]!
   1c698:	str	lr, [sp, #4]
   1c69c:	add	fp, sp, #4
   1c6a0:	sub	sp, sp, #8
   1c6a4:	str	r0, [fp, #-8]
   1c6a8:	mov	r1, #1
   1c6ac:	ldr	r0, [fp, #-8]
   1c6b0:	bl	1c714 <__assert_fail@plt+0xb54c>
   1c6b4:	mov	r3, r0
   1c6b8:	mov	r0, r3
   1c6bc:	sub	sp, fp, #4
   1c6c0:	ldr	fp, [sp]
   1c6c4:	add	sp, sp, #4
   1c6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6cc:	str	fp, [sp, #-8]!
   1c6d0:	str	lr, [sp, #4]
   1c6d4:	add	fp, sp, #4
   1c6d8:	sub	sp, sp, #8
   1c6dc:	str	r0, [fp, #-8]
   1c6e0:	str	r1, [fp, #-12]
   1c6e4:	ldr	r1, [fp, #-12]
   1c6e8:	ldr	r0, [fp, #-8]
   1c6ec:	bl	1ca20 <__assert_fail@plt+0xb858>
   1c6f0:	mov	r3, r0
   1c6f4:	mov	r0, r3
   1c6f8:	bl	1c000 <__assert_fail@plt+0xae38>
   1c6fc:	mov	r3, r0
   1c700:	mov	r0, r3
   1c704:	sub	sp, fp, #4
   1c708:	ldr	fp, [sp]
   1c70c:	add	sp, sp, #4
   1c710:	pop	{pc}		; (ldr pc, [sp], #4)
   1c714:	str	fp, [sp, #-8]!
   1c718:	str	lr, [sp, #4]
   1c71c:	add	fp, sp, #4
   1c720:	sub	sp, sp, #8
   1c724:	str	r0, [fp, #-8]
   1c728:	str	r1, [fp, #-12]
   1c72c:	ldr	r1, [fp, #-12]
   1c730:	ldr	r0, [fp, #-8]
   1c734:	bl	1db74 <__assert_fail@plt+0xc9ac>
   1c738:	mov	r3, r0
   1c73c:	mov	r0, r3
   1c740:	bl	1c000 <__assert_fail@plt+0xae38>
   1c744:	mov	r3, r0
   1c748:	mov	r0, r3
   1c74c:	sub	sp, fp, #4
   1c750:	ldr	fp, [sp]
   1c754:	add	sp, sp, #4
   1c758:	pop	{pc}		; (ldr pc, [sp], #4)
   1c75c:	str	fp, [sp, #-8]!
   1c760:	str	lr, [sp, #4]
   1c764:	add	fp, sp, #4
   1c768:	sub	sp, sp, #8
   1c76c:	str	r0, [fp, #-8]
   1c770:	str	r1, [fp, #-12]
   1c774:	ldr	r0, [fp, #-12]
   1c778:	bl	1c03c <__assert_fail@plt+0xae74>
   1c77c:	mov	r3, r0
   1c780:	ldr	r2, [fp, #-12]
   1c784:	ldr	r1, [fp, #-8]
   1c788:	mov	r0, r3
   1c78c:	bl	10f40 <memcpy@plt>
   1c790:	mov	r3, r0
   1c794:	mov	r0, r3
   1c798:	sub	sp, fp, #4
   1c79c:	ldr	fp, [sp]
   1c7a0:	add	sp, sp, #4
   1c7a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7a8:	str	fp, [sp, #-8]!
   1c7ac:	str	lr, [sp, #4]
   1c7b0:	add	fp, sp, #4
   1c7b4:	sub	sp, sp, #8
   1c7b8:	str	r0, [fp, #-8]
   1c7bc:	str	r1, [fp, #-12]
   1c7c0:	ldr	r0, [fp, #-12]
   1c7c4:	bl	1c07c <__assert_fail@plt+0xaeb4>
   1c7c8:	mov	r3, r0
   1c7cc:	mov	r0, r3
   1c7d0:	ldr	r3, [fp, #-12]
   1c7d4:	mov	r2, r3
   1c7d8:	ldr	r1, [fp, #-8]
   1c7dc:	bl	10f40 <memcpy@plt>
   1c7e0:	mov	r3, r0
   1c7e4:	mov	r0, r3
   1c7e8:	sub	sp, fp, #4
   1c7ec:	ldr	fp, [sp]
   1c7f0:	add	sp, sp, #4
   1c7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7f8:	str	fp, [sp, #-8]!
   1c7fc:	str	lr, [sp, #4]
   1c800:	add	fp, sp, #4
   1c804:	sub	sp, sp, #16
   1c808:	str	r0, [fp, #-16]
   1c80c:	str	r1, [fp, #-20]	; 0xffffffec
   1c810:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c814:	add	r3, r3, #1
   1c818:	mov	r0, r3
   1c81c:	bl	1c07c <__assert_fail@plt+0xaeb4>
   1c820:	mov	r3, r0
   1c824:	str	r3, [fp, #-8]
   1c828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c82c:	ldr	r2, [fp, #-8]
   1c830:	add	r3, r2, r3
   1c834:	mov	r2, #0
   1c838:	strb	r2, [r3]
   1c83c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c840:	mov	r2, r3
   1c844:	ldr	r1, [fp, #-16]
   1c848:	ldr	r0, [fp, #-8]
   1c84c:	bl	10f40 <memcpy@plt>
   1c850:	mov	r3, r0
   1c854:	mov	r0, r3
   1c858:	sub	sp, fp, #4
   1c85c:	ldr	fp, [sp]
   1c860:	add	sp, sp, #4
   1c864:	pop	{pc}		; (ldr pc, [sp], #4)
   1c868:	str	fp, [sp, #-8]!
   1c86c:	str	lr, [sp, #4]
   1c870:	add	fp, sp, #4
   1c874:	sub	sp, sp, #8
   1c878:	str	r0, [fp, #-8]
   1c87c:	ldr	r0, [fp, #-8]
   1c880:	bl	1106c <strlen@plt>
   1c884:	mov	r3, r0
   1c888:	add	r3, r3, #1
   1c88c:	mov	r1, r3
   1c890:	ldr	r0, [fp, #-8]
   1c894:	bl	1c75c <__assert_fail@plt+0xb594>
   1c898:	mov	r3, r0
   1c89c:	mov	r0, r3
   1c8a0:	sub	sp, fp, #4
   1c8a4:	ldr	fp, [sp]
   1c8a8:	add	sp, sp, #4
   1c8ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8b0:	strd	r4, [sp, #-16]!
   1c8b4:	str	fp, [sp, #8]
   1c8b8:	str	lr, [sp, #12]
   1c8bc:	add	fp, sp, #12
   1c8c0:	movw	r3, #292	; 0x124
   1c8c4:	movt	r3, #3
   1c8c8:	ldr	r4, [r3]
   1c8cc:	movw	r0, #63444	; 0xf7d4
   1c8d0:	movt	r0, #1
   1c8d4:	bl	11060 <gettext@plt>
   1c8d8:	mov	r3, r0
   1c8dc:	movw	r2, #63464	; 0xf7e8
   1c8e0:	movt	r2, #1
   1c8e4:	mov	r1, #0
   1c8e8:	mov	r0, r4
   1c8ec:	bl	10ff4 <error@plt>
   1c8f0:	bl	11198 <abort@plt>
   1c8f4:	str	fp, [sp, #-8]!
   1c8f8:	str	lr, [sp, #4]
   1c8fc:	add	fp, sp, #4
   1c900:	sub	sp, sp, #24
   1c904:	str	r0, [fp, #-16]
   1c908:	str	r1, [fp, #-20]	; 0xffffffec
   1c90c:	str	r2, [fp, #-24]	; 0xffffffe8
   1c910:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c914:	orr	r3, r3, #512	; 0x200
   1c918:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c91c:	mov	r1, r3
   1c920:	ldr	r0, [fp, #-16]
   1c924:	bl	137e4 <__assert_fail@plt+0x261c>
   1c928:	str	r0, [fp, #-8]
   1c92c:	ldr	r3, [fp, #-8]
   1c930:	cmp	r3, #0
   1c934:	bne	1c970 <__assert_fail@plt+0xb7a8>
   1c938:	bl	1109c <__errno_location@plt>
   1c93c:	mov	r3, r0
   1c940:	ldr	r3, [r3]
   1c944:	cmp	r3, #22
   1c948:	bne	1c96c <__assert_fail@plt+0xb7a4>
   1c94c:	movw	r3, #63496	; 0xf808
   1c950:	movt	r3, #1
   1c954:	mov	r2, #41	; 0x29
   1c958:	movw	r1, #63468	; 0xf7ec
   1c95c:	movt	r1, #1
   1c960:	movw	r0, #63480	; 0xf7f8
   1c964:	movt	r0, #1
   1c968:	bl	111c8 <__assert_fail@plt>
   1c96c:	bl	1c8b0 <__assert_fail@plt+0xb6e8>
   1c970:	ldr	r3, [fp, #-8]
   1c974:	mov	r0, r3
   1c978:	sub	sp, fp, #4
   1c97c:	ldr	fp, [sp]
   1c980:	add	sp, sp, #4
   1c984:	pop	{pc}		; (ldr pc, [sp], #4)
   1c988:	push	{fp}		; (str fp, [sp, #-4]!)
   1c98c:	add	fp, sp, #0
   1c990:	sub	sp, sp, #12
   1c994:	str	r0, [fp, #-8]
   1c998:	str	r1, [fp, #-12]
   1c99c:	ldr	r3, [fp, #-8]
   1c9a0:	ldr	r3, [r3, #48]	; 0x30
   1c9a4:	and	r3, r3, #16
   1c9a8:	cmp	r3, #0
   1c9ac:	beq	1c9c4 <__assert_fail@plt+0xb7fc>
   1c9b0:	ldr	r3, [fp, #-8]
   1c9b4:	ldr	r3, [r3, #48]	; 0x30
   1c9b8:	and	r3, r3, #1
   1c9bc:	cmp	r3, #0
   1c9c0:	beq	1c9fc <__assert_fail@plt+0xb834>
   1c9c4:	ldr	r3, [fp, #-8]
   1c9c8:	ldr	r3, [r3, #48]	; 0x30
   1c9cc:	and	r3, r3, #16
   1c9d0:	cmp	r3, #0
   1c9d4:	beq	1ca04 <__assert_fail@plt+0xb83c>
   1c9d8:	ldr	r3, [fp, #-8]
   1c9dc:	ldr	r3, [r3, #48]	; 0x30
   1c9e0:	and	r3, r3, #1
   1c9e4:	cmp	r3, #0
   1c9e8:	beq	1ca04 <__assert_fail@plt+0xb83c>
   1c9ec:	ldr	r3, [fp, #-12]
   1c9f0:	ldr	r3, [r3, #48]	; 0x30
   1c9f4:	cmp	r3, #0
   1c9f8:	beq	1ca04 <__assert_fail@plt+0xb83c>
   1c9fc:	mov	r3, #1
   1ca00:	b	1ca08 <__assert_fail@plt+0xb840>
   1ca04:	mov	r3, #0
   1ca08:	and	r3, r3, #1
   1ca0c:	uxtb	r3, r3
   1ca10:	mov	r0, r3
   1ca14:	add	sp, fp, #0
   1ca18:	pop	{fp}		; (ldr fp, [sp], #4)
   1ca1c:	bx	lr
   1ca20:	str	fp, [sp, #-8]!
   1ca24:	str	lr, [sp, #4]
   1ca28:	add	fp, sp, #4
   1ca2c:	sub	sp, sp, #16
   1ca30:	str	r0, [fp, #-16]
   1ca34:	str	r1, [fp, #-20]	; 0xffffffec
   1ca38:	ldr	r3, [fp, #-16]
   1ca3c:	cmp	r3, #0
   1ca40:	beq	1ca50 <__assert_fail@plt+0xb888>
   1ca44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca48:	cmp	r3, #0
   1ca4c:	bne	1ca60 <__assert_fail@plt+0xb898>
   1ca50:	mov	r3, #1
   1ca54:	str	r3, [fp, #-20]	; 0xffffffec
   1ca58:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca5c:	str	r3, [fp, #-16]
   1ca60:	mov	ip, #0
   1ca64:	ldr	r2, [fp, #-16]
   1ca68:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca6c:	umull	r0, r1, r2, r3
   1ca70:	mov	r2, #0
   1ca74:	mov	r3, #0
   1ca78:	mov	r2, r1
   1ca7c:	mov	r3, #0
   1ca80:	cmp	r2, #0
   1ca84:	beq	1ca8c <__assert_fail@plt+0xb8c4>
   1ca88:	mov	ip, #1
   1ca8c:	cmp	r0, #0
   1ca90:	bge	1ca98 <__assert_fail@plt+0xb8d0>
   1ca94:	mov	ip, #1
   1ca98:	mov	r3, ip
   1ca9c:	and	r3, r3, #1
   1caa0:	uxtb	r3, r3
   1caa4:	cmp	r3, #0
   1caa8:	beq	1cac4 <__assert_fail@plt+0xb8fc>
   1caac:	bl	1109c <__errno_location@plt>
   1cab0:	mov	r2, r0
   1cab4:	mov	r3, #12
   1cab8:	str	r3, [r2]
   1cabc:	mov	r3, #0
   1cac0:	b	1cadc <__assert_fail@plt+0xb914>
   1cac4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cac8:	ldr	r0, [fp, #-16]
   1cacc:	bl	10ed4 <calloc@plt>
   1cad0:	mov	r3, r0
   1cad4:	str	r3, [fp, #-8]
   1cad8:	ldr	r3, [fp, #-8]
   1cadc:	mov	r0, r3
   1cae0:	sub	sp, fp, #4
   1cae4:	ldr	fp, [sp]
   1cae8:	add	sp, sp, #4
   1caec:	pop	{pc}		; (ldr pc, [sp], #4)
   1caf0:	str	fp, [sp, #-8]!
   1caf4:	str	lr, [sp, #4]
   1caf8:	add	fp, sp, #4
   1cafc:	sub	sp, sp, #16
   1cb00:	str	r0, [fp, #-16]
   1cb04:	ldr	r3, [fp, #-16]
   1cb08:	cmp	r3, #0
   1cb0c:	bne	1cb18 <__assert_fail@plt+0xb950>
   1cb10:	mov	r3, #1
   1cb14:	str	r3, [fp, #-16]
   1cb18:	mov	r2, #0
   1cb1c:	ldr	r3, [fp, #-16]
   1cb20:	cmp	r3, #0
   1cb24:	bge	1cb2c <__assert_fail@plt+0xb964>
   1cb28:	mov	r2, #1
   1cb2c:	mov	r3, r2
   1cb30:	and	r3, r3, #1
   1cb34:	uxtb	r3, r3
   1cb38:	cmp	r3, #0
   1cb3c:	beq	1cb58 <__assert_fail@plt+0xb990>
   1cb40:	bl	1109c <__errno_location@plt>
   1cb44:	mov	r2, r0
   1cb48:	mov	r3, #12
   1cb4c:	str	r3, [r2]
   1cb50:	mov	r3, #0
   1cb54:	b	1cb6c <__assert_fail@plt+0xb9a4>
   1cb58:	ldr	r0, [fp, #-16]
   1cb5c:	bl	1100c <malloc@plt>
   1cb60:	mov	r3, r0
   1cb64:	str	r3, [fp, #-8]
   1cb68:	ldr	r3, [fp, #-8]
   1cb6c:	mov	r0, r3
   1cb70:	sub	sp, fp, #4
   1cb74:	ldr	fp, [sp]
   1cb78:	add	sp, sp, #4
   1cb7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb80:	str	fp, [sp, #-8]!
   1cb84:	str	lr, [sp, #4]
   1cb88:	add	fp, sp, #4
   1cb8c:	sub	sp, sp, #16
   1cb90:	str	r0, [fp, #-16]
   1cb94:	str	r1, [fp, #-20]	; 0xffffffec
   1cb98:	ldr	r3, [fp, #-16]
   1cb9c:	cmp	r3, #0
   1cba0:	bne	1cbb4 <__assert_fail@plt+0xb9ec>
   1cba4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1cba8:	bl	1caf0 <__assert_fail@plt+0xb928>
   1cbac:	mov	r3, r0
   1cbb0:	b	1cc24 <__assert_fail@plt+0xba5c>
   1cbb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cbb8:	cmp	r3, #0
   1cbbc:	bne	1cbd0 <__assert_fail@plt+0xba08>
   1cbc0:	ldr	r0, [fp, #-16]
   1cbc4:	bl	1d918 <__assert_fail@plt+0xc750>
   1cbc8:	mov	r3, #0
   1cbcc:	b	1cc24 <__assert_fail@plt+0xba5c>
   1cbd0:	mov	r2, #0
   1cbd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cbd8:	cmp	r3, #0
   1cbdc:	bge	1cbe4 <__assert_fail@plt+0xba1c>
   1cbe0:	mov	r2, #1
   1cbe4:	mov	r3, r2
   1cbe8:	and	r3, r3, #1
   1cbec:	uxtb	r3, r3
   1cbf0:	cmp	r3, #0
   1cbf4:	beq	1cc10 <__assert_fail@plt+0xba48>
   1cbf8:	bl	1109c <__errno_location@plt>
   1cbfc:	mov	r2, r0
   1cc00:	mov	r3, #12
   1cc04:	str	r3, [r2]
   1cc08:	mov	r3, #0
   1cc0c:	b	1cc24 <__assert_fail@plt+0xba5c>
   1cc10:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cc14:	ldr	r0, [fp, #-16]
   1cc18:	bl	10f70 <realloc@plt>
   1cc1c:	str	r0, [fp, #-8]
   1cc20:	ldr	r3, [fp, #-8]
   1cc24:	mov	r0, r3
   1cc28:	sub	sp, fp, #4
   1cc2c:	ldr	fp, [sp]
   1cc30:	add	sp, sp, #4
   1cc34:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc38:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1cc3c:	strd	r6, [sp, #8]
   1cc40:	strd	r8, [sp, #16]
   1cc44:	str	fp, [sp, #24]
   1cc48:	add	fp, sp, #24
   1cc4c:	sub	sp, sp, #20
   1cc50:	strd	r0, [fp, #-36]	; 0xffffffdc
   1cc54:	str	r2, [fp, #-40]	; 0xffffffd8
   1cc58:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1cc5c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1cc60:	sub	ip, r1, #32
   1cc64:	rsb	r0, r1, #32
   1cc68:	lsl	r7, r3, r1
   1cc6c:	orr	r7, r7, r2, lsl ip
   1cc70:	orr	r7, r7, r2, lsr r0
   1cc74:	lsl	r6, r2, r1
   1cc78:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1cc7c:	rsb	r1, r1, #0
   1cc80:	and	r1, r1, #63	; 0x3f
   1cc84:	rsb	ip, r1, #32
   1cc88:	sub	r0, r1, #32
   1cc8c:	lsr	r4, r2, r1
   1cc90:	orr	r4, r4, r3, lsl ip
   1cc94:	orr	r4, r4, r3, lsr r0
   1cc98:	lsr	r5, r3, r1
   1cc9c:	orr	r8, r6, r4
   1cca0:	orr	r9, r7, r5
   1cca4:	mov	r4, r8
   1cca8:	mov	r5, r9
   1ccac:	mov	r2, r4
   1ccb0:	mov	r3, r5
   1ccb4:	mov	r0, r2
   1ccb8:	mov	r1, r3
   1ccbc:	sub	sp, fp, #24
   1ccc0:	ldrd	r4, [sp]
   1ccc4:	ldrd	r6, [sp, #8]
   1ccc8:	ldrd	r8, [sp, #16]
   1cccc:	ldr	fp, [sp, #24]
   1ccd0:	add	sp, sp, #28
   1ccd4:	bx	lr
   1ccd8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ccdc:	strd	r6, [sp, #8]
   1cce0:	strd	r8, [sp, #16]
   1cce4:	str	fp, [sp, #24]
   1cce8:	add	fp, sp, #24
   1ccec:	sub	sp, sp, #20
   1ccf0:	strd	r0, [fp, #-36]	; 0xffffffdc
   1ccf4:	str	r2, [fp, #-40]	; 0xffffffd8
   1ccf8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1ccfc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1cd00:	rsb	ip, r1, #32
   1cd04:	sub	r0, r1, #32
   1cd08:	lsr	r6, r2, r1
   1cd0c:	orr	r6, r6, r3, lsl ip
   1cd10:	orr	r6, r6, r3, lsr r0
   1cd14:	lsr	r7, r3, r1
   1cd18:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1cd1c:	rsb	r1, r1, #0
   1cd20:	and	r1, r1, #63	; 0x3f
   1cd24:	sub	ip, r1, #32
   1cd28:	rsb	r0, r1, #32
   1cd2c:	lsl	r5, r3, r1
   1cd30:	orr	r5, r5, r2, lsl ip
   1cd34:	orr	r5, r5, r2, lsr r0
   1cd38:	lsl	r4, r2, r1
   1cd3c:	orr	r8, r6, r4
   1cd40:	orr	r9, r7, r5
   1cd44:	mov	r4, r8
   1cd48:	mov	r5, r9
   1cd4c:	mov	r2, r4
   1cd50:	mov	r3, r5
   1cd54:	mov	r0, r2
   1cd58:	mov	r1, r3
   1cd5c:	sub	sp, fp, #24
   1cd60:	ldrd	r4, [sp]
   1cd64:	ldrd	r6, [sp, #8]
   1cd68:	ldrd	r8, [sp, #16]
   1cd6c:	ldr	fp, [sp, #24]
   1cd70:	add	sp, sp, #28
   1cd74:	bx	lr
   1cd78:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd7c:	add	fp, sp, #0
   1cd80:	sub	sp, sp, #12
   1cd84:	str	r0, [fp, #-8]
   1cd88:	str	r1, [fp, #-12]
   1cd8c:	ldr	r2, [fp, #-8]
   1cd90:	ldr	r3, [fp, #-12]
   1cd94:	rsb	r3, r3, #32
   1cd98:	ror	r3, r2, r3
   1cd9c:	mov	r0, r3
   1cda0:	add	sp, fp, #0
   1cda4:	pop	{fp}		; (ldr fp, [sp], #4)
   1cda8:	bx	lr
   1cdac:	push	{fp}		; (str fp, [sp, #-4]!)
   1cdb0:	add	fp, sp, #0
   1cdb4:	sub	sp, sp, #12
   1cdb8:	str	r0, [fp, #-8]
   1cdbc:	str	r1, [fp, #-12]
   1cdc0:	ldr	r2, [fp, #-8]
   1cdc4:	ldr	r3, [fp, #-12]
   1cdc8:	ror	r3, r2, r3
   1cdcc:	mov	r0, r3
   1cdd0:	add	sp, fp, #0
   1cdd4:	pop	{fp}		; (ldr fp, [sp], #4)
   1cdd8:	bx	lr
   1cddc:	push	{fp}		; (str fp, [sp, #-4]!)
   1cde0:	add	fp, sp, #0
   1cde4:	sub	sp, sp, #12
   1cde8:	str	r0, [fp, #-8]
   1cdec:	str	r1, [fp, #-12]
   1cdf0:	ldr	r2, [fp, #-8]
   1cdf4:	ldr	r3, [fp, #-12]
   1cdf8:	rsb	r3, r3, #32
   1cdfc:	ror	r3, r2, r3
   1ce00:	mov	r0, r3
   1ce04:	add	sp, fp, #0
   1ce08:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce0c:	bx	lr
   1ce10:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce14:	add	fp, sp, #0
   1ce18:	sub	sp, sp, #12
   1ce1c:	str	r0, [fp, #-8]
   1ce20:	str	r1, [fp, #-12]
   1ce24:	ldr	r2, [fp, #-8]
   1ce28:	ldr	r3, [fp, #-12]
   1ce2c:	ror	r3, r2, r3
   1ce30:	mov	r0, r3
   1ce34:	add	sp, fp, #0
   1ce38:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce3c:	bx	lr
   1ce40:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce44:	add	fp, sp, #0
   1ce48:	sub	sp, sp, #12
   1ce4c:	mov	r3, r0
   1ce50:	str	r1, [fp, #-12]
   1ce54:	strh	r3, [fp, #-6]
   1ce58:	ldrh	r2, [fp, #-6]
   1ce5c:	ldr	r3, [fp, #-12]
   1ce60:	lsl	r3, r2, r3
   1ce64:	uxth	r2, r3
   1ce68:	ldrh	r1, [fp, #-6]
   1ce6c:	ldr	r3, [fp, #-12]
   1ce70:	rsb	r3, r3, #16
   1ce74:	lsr	r3, r1, r3
   1ce78:	uxth	r3, r3
   1ce7c:	orr	r3, r2, r3
   1ce80:	uxth	r3, r3
   1ce84:	mov	r0, r3
   1ce88:	add	sp, fp, #0
   1ce8c:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce90:	bx	lr
   1ce94:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce98:	add	fp, sp, #0
   1ce9c:	sub	sp, sp, #12
   1cea0:	mov	r3, r0
   1cea4:	str	r1, [fp, #-12]
   1cea8:	strh	r3, [fp, #-6]
   1ceac:	ldrh	r2, [fp, #-6]
   1ceb0:	ldr	r3, [fp, #-12]
   1ceb4:	lsr	r3, r2, r3
   1ceb8:	uxth	r2, r3
   1cebc:	ldrh	r1, [fp, #-6]
   1cec0:	ldr	r3, [fp, #-12]
   1cec4:	rsb	r3, r3, #16
   1cec8:	lsl	r3, r1, r3
   1cecc:	uxth	r3, r3
   1ced0:	orr	r3, r2, r3
   1ced4:	uxth	r3, r3
   1ced8:	mov	r0, r3
   1cedc:	add	sp, fp, #0
   1cee0:	pop	{fp}		; (ldr fp, [sp], #4)
   1cee4:	bx	lr
   1cee8:	push	{fp}		; (str fp, [sp, #-4]!)
   1ceec:	add	fp, sp, #0
   1cef0:	sub	sp, sp, #12
   1cef4:	mov	r3, r0
   1cef8:	str	r1, [fp, #-12]
   1cefc:	strb	r3, [fp, #-5]
   1cf00:	ldrb	r2, [fp, #-5]
   1cf04:	ldr	r3, [fp, #-12]
   1cf08:	lsl	r3, r2, r3
   1cf0c:	uxtb	r2, r3
   1cf10:	ldrb	r1, [fp, #-5]
   1cf14:	ldr	r3, [fp, #-12]
   1cf18:	rsb	r3, r3, #8
   1cf1c:	lsr	r3, r1, r3
   1cf20:	uxtb	r3, r3
   1cf24:	orr	r3, r2, r3
   1cf28:	uxtb	r3, r3
   1cf2c:	mov	r0, r3
   1cf30:	add	sp, fp, #0
   1cf34:	pop	{fp}		; (ldr fp, [sp], #4)
   1cf38:	bx	lr
   1cf3c:	push	{fp}		; (str fp, [sp, #-4]!)
   1cf40:	add	fp, sp, #0
   1cf44:	sub	sp, sp, #12
   1cf48:	mov	r3, r0
   1cf4c:	str	r1, [fp, #-12]
   1cf50:	strb	r3, [fp, #-5]
   1cf54:	ldrb	r2, [fp, #-5]
   1cf58:	ldr	r3, [fp, #-12]
   1cf5c:	lsr	r3, r2, r3
   1cf60:	uxtb	r2, r3
   1cf64:	ldrb	r1, [fp, #-5]
   1cf68:	ldr	r3, [fp, #-12]
   1cf6c:	rsb	r3, r3, #8
   1cf70:	lsl	r3, r1, r3
   1cf74:	uxtb	r3, r3
   1cf78:	orr	r3, r2, r3
   1cf7c:	uxtb	r3, r3
   1cf80:	mov	r0, r3
   1cf84:	add	sp, fp, #0
   1cf88:	pop	{fp}		; (ldr fp, [sp], #4)
   1cf8c:	bx	lr
   1cf90:	strd	r4, [sp, #-16]!
   1cf94:	str	fp, [sp, #8]
   1cf98:	str	lr, [sp, #12]
   1cf9c:	add	fp, sp, #12
   1cfa0:	sub	sp, sp, #16
   1cfa4:	str	r0, [fp, #-24]	; 0xffffffe8
   1cfa8:	str	r1, [fp, #-28]	; 0xffffffe4
   1cfac:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1cfb0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1cfb4:	cmp	r5, r4
   1cfb8:	bne	1cfc4 <__assert_fail@plt+0xbdfc>
   1cfbc:	mov	r3, #0
   1cfc0:	b	1d024 <__assert_fail@plt+0xbe5c>
   1cfc4:	ldrb	r3, [r5]
   1cfc8:	mov	r0, r3
   1cfcc:	bl	1e2d0 <__assert_fail@plt+0xd108>
   1cfd0:	mov	r3, r0
   1cfd4:	strb	r3, [fp, #-13]
   1cfd8:	ldrb	r3, [r4]
   1cfdc:	mov	r0, r3
   1cfe0:	bl	1e2d0 <__assert_fail@plt+0xd108>
   1cfe4:	mov	r3, r0
   1cfe8:	strb	r3, [fp, #-14]
   1cfec:	ldrb	r3, [fp, #-13]
   1cff0:	cmp	r3, #0
   1cff4:	beq	1d014 <__assert_fail@plt+0xbe4c>
   1cff8:	add	r5, r5, #1
   1cffc:	add	r4, r4, #1
   1d000:	ldrb	r2, [fp, #-13]
   1d004:	ldrb	r3, [fp, #-14]
   1d008:	cmp	r2, r3
   1d00c:	beq	1cfc4 <__assert_fail@plt+0xbdfc>
   1d010:	b	1d018 <__assert_fail@plt+0xbe50>
   1d014:	nop	{0}
   1d018:	ldrb	r2, [fp, #-13]
   1d01c:	ldrb	r3, [fp, #-14]
   1d020:	sub	r3, r2, r3
   1d024:	mov	r0, r3
   1d028:	sub	sp, fp, #12
   1d02c:	ldrd	r4, [sp]
   1d030:	ldr	fp, [sp, #8]
   1d034:	add	sp, sp, #12
   1d038:	pop	{pc}		; (ldr pc, [sp], #4)
   1d03c:	str	fp, [sp, #-8]!
   1d040:	str	lr, [sp, #4]
   1d044:	add	fp, sp, #4
   1d048:	sub	sp, sp, #16
   1d04c:	str	r0, [fp, #-16]
   1d050:	ldr	r0, [fp, #-16]
   1d054:	bl	10fd0 <__fpending@plt>
   1d058:	mov	r3, r0
   1d05c:	cmp	r3, #0
   1d060:	movne	r3, #1
   1d064:	moveq	r3, #0
   1d068:	strb	r3, [fp, #-5]
   1d06c:	ldr	r0, [fp, #-16]
   1d070:	bl	10fdc <ferror_unlocked@plt>
   1d074:	mov	r3, r0
   1d078:	cmp	r3, #0
   1d07c:	movne	r3, #1
   1d080:	moveq	r3, #0
   1d084:	strb	r3, [fp, #-6]
   1d088:	ldr	r0, [fp, #-16]
   1d08c:	bl	1d2e8 <__assert_fail@plt+0xc120>
   1d090:	mov	r3, r0
   1d094:	cmp	r3, #0
   1d098:	movne	r3, #1
   1d09c:	moveq	r3, #0
   1d0a0:	strb	r3, [fp, #-7]
   1d0a4:	ldrb	r3, [fp, #-6]
   1d0a8:	cmp	r3, #0
   1d0ac:	bne	1d0dc <__assert_fail@plt+0xbf14>
   1d0b0:	ldrb	r3, [fp, #-7]
   1d0b4:	cmp	r3, #0
   1d0b8:	beq	1d108 <__assert_fail@plt+0xbf40>
   1d0bc:	ldrb	r3, [fp, #-5]
   1d0c0:	cmp	r3, #0
   1d0c4:	bne	1d0dc <__assert_fail@plt+0xbf14>
   1d0c8:	bl	1109c <__errno_location@plt>
   1d0cc:	mov	r3, r0
   1d0d0:	ldr	r3, [r3]
   1d0d4:	cmp	r3, #9
   1d0d8:	beq	1d108 <__assert_fail@plt+0xbf40>
   1d0dc:	ldrb	r3, [fp, #-7]
   1d0e0:	eor	r3, r3, #1
   1d0e4:	uxtb	r3, r3
   1d0e8:	cmp	r3, #0
   1d0ec:	beq	1d100 <__assert_fail@plt+0xbf38>
   1d0f0:	bl	1109c <__errno_location@plt>
   1d0f4:	mov	r2, r0
   1d0f8:	mov	r3, #0
   1d0fc:	str	r3, [r2]
   1d100:	mvn	r3, #0
   1d104:	b	1d10c <__assert_fail@plt+0xbf44>
   1d108:	mov	r3, #0
   1d10c:	mov	r0, r3
   1d110:	sub	sp, fp, #4
   1d114:	ldr	fp, [sp]
   1d118:	add	sp, sp, #4
   1d11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d120:	strd	r4, [sp, #-12]!
   1d124:	str	fp, [sp, #8]
   1d128:	add	fp, sp, #8
   1d12c:	sub	sp, sp, #12
   1d130:	strd	r0, [fp, #-20]	; 0xffffffec
   1d134:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1d138:	subs	r4, r0, #1
   1d13c:	sbc	r5, r1, #0
   1d140:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1d144:	and	r2, r4, r0
   1d148:	and	r3, r5, r1
   1d14c:	orr	r3, r2, r3
   1d150:	cmp	r3, #0
   1d154:	moveq	r3, #1
   1d158:	movne	r3, #0
   1d15c:	uxtb	r3, r3
   1d160:	mov	r0, r3
   1d164:	sub	sp, fp, #8
   1d168:	ldrd	r4, [sp]
   1d16c:	ldr	fp, [sp, #8]
   1d170:	add	sp, sp, #12
   1d174:	bx	lr
   1d178:	push	{fp}		; (str fp, [sp, #-4]!)
   1d17c:	add	fp, sp, #0
   1d180:	sub	sp, sp, #12
   1d184:	str	r0, [fp, #-8]
   1d188:	ldr	r1, [fp, #-8]
   1d18c:	mov	r2, #0
   1d190:	mov	r3, #0
   1d194:	strd	r2, [r1, #16]
   1d198:	ldr	r2, [fp, #-8]
   1d19c:	movw	r3, #62998	; 0xf616
   1d1a0:	movt	r3, #149	; 0x95
   1d1a4:	str	r3, [r2, #24]
   1d1a8:	nop	{0}
   1d1ac:	add	sp, fp, #0
   1d1b0:	pop	{fp}		; (ldr fp, [sp], #4)
   1d1b4:	bx	lr
   1d1b8:	strd	r4, [sp, #-16]!
   1d1bc:	str	fp, [sp, #8]
   1d1c0:	str	lr, [sp, #12]
   1d1c4:	add	fp, sp, #12
   1d1c8:	sub	sp, sp, #8
   1d1cc:	str	r0, [fp, #-16]
   1d1d0:	str	r1, [fp, #-20]	; 0xffffffec
   1d1d4:	ldr	r3, [fp, #-16]
   1d1d8:	ldr	r2, [r3, #24]
   1d1dc:	movw	r3, #62998	; 0xf616
   1d1e0:	movt	r3, #149	; 0x95
   1d1e4:	cmp	r2, r3
   1d1e8:	beq	1d20c <__assert_fail@plt+0xc044>
   1d1ec:	movw	r3, #63552	; 0xf840
   1d1f0:	movt	r3, #1
   1d1f4:	mov	r2, #60	; 0x3c
   1d1f8:	movw	r1, #63508	; 0xf814
   1d1fc:	movt	r1, #1
   1d200:	movw	r0, #63528	; 0xf828
   1d204:	movt	r0, #1
   1d208:	bl	111c8 <__assert_fail@plt>
   1d20c:	ldr	r3, [fp, #-16]
   1d210:	ldrd	r2, [r3, #16]
   1d214:	orrs	r3, r2, r3
   1d218:	beq	1d25c <__assert_fail@plt+0xc094>
   1d21c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d220:	ldrd	r0, [r3, #96]	; 0x60
   1d224:	ldr	r3, [fp, #-16]
   1d228:	ldrd	r2, [r3]
   1d22c:	cmp	r1, r3
   1d230:	cmpeq	r0, r2
   1d234:	bne	1d25c <__assert_fail@plt+0xc094>
   1d238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d23c:	ldrd	r0, [r3]
   1d240:	ldr	r3, [fp, #-16]
   1d244:	ldrd	r2, [r3, #8]
   1d248:	cmp	r1, r3
   1d24c:	cmpeq	r0, r2
   1d250:	bne	1d25c <__assert_fail@plt+0xc094>
   1d254:	mov	r3, #1
   1d258:	b	1d2d0 <__assert_fail@plt+0xc108>
   1d25c:	ldr	r3, [fp, #-16]
   1d260:	ldrd	r2, [r3, #16]
   1d264:	adds	r4, r2, #1
   1d268:	adc	r5, r3, #0
   1d26c:	ldr	r3, [fp, #-16]
   1d270:	strd	r4, [r3, #16]
   1d274:	ldr	r3, [fp, #-16]
   1d278:	ldrd	r2, [r3, #16]
   1d27c:	mov	r0, r2
   1d280:	mov	r1, r3
   1d284:	bl	1d120 <__assert_fail@plt+0xbf58>
   1d288:	mov	r3, r0
   1d28c:	cmp	r3, #0
   1d290:	beq	1d2cc <__assert_fail@plt+0xc104>
   1d294:	ldr	r3, [fp, #-16]
   1d298:	ldrd	r2, [r3, #16]
   1d29c:	orrs	r3, r2, r3
   1d2a0:	bne	1d2ac <__assert_fail@plt+0xc0e4>
   1d2a4:	mov	r3, #1
   1d2a8:	b	1d2d0 <__assert_fail@plt+0xc108>
   1d2ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d2b0:	ldrd	r2, [r3]
   1d2b4:	ldr	r1, [fp, #-16]
   1d2b8:	strd	r2, [r1, #8]
   1d2bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d2c0:	ldrd	r2, [r3, #96]	; 0x60
   1d2c4:	ldr	r1, [fp, #-16]
   1d2c8:	strd	r2, [r1]
   1d2cc:	mov	r3, #0
   1d2d0:	mov	r0, r3
   1d2d4:	sub	sp, fp, #12
   1d2d8:	ldrd	r4, [sp]
   1d2dc:	ldr	fp, [sp, #8]
   1d2e0:	add	sp, sp, #12
   1d2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2e8:	str	fp, [sp, #-8]!
   1d2ec:	str	lr, [sp, #4]
   1d2f0:	add	fp, sp, #4
   1d2f4:	sub	sp, sp, #32
   1d2f8:	str	r0, [fp, #-24]	; 0xffffffe8
   1d2fc:	mov	r3, #0
   1d300:	str	r3, [fp, #-8]
   1d304:	mov	r3, #0
   1d308:	str	r3, [fp, #-12]
   1d30c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d310:	bl	110c0 <fileno@plt>
   1d314:	str	r0, [fp, #-16]
   1d318:	ldr	r3, [fp, #-16]
   1d31c:	cmp	r3, #0
   1d320:	bge	1d334 <__assert_fail@plt+0xc16c>
   1d324:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d328:	bl	110cc <fclose@plt>
   1d32c:	mov	r3, r0
   1d330:	b	1d3d8 <__assert_fail@plt+0xc210>
   1d334:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d338:	bl	11024 <__freading@plt>
   1d33c:	mov	r3, r0
   1d340:	cmp	r3, #0
   1d344:	beq	1d380 <__assert_fail@plt+0xc1b8>
   1d348:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d34c:	bl	110c0 <fileno@plt>
   1d350:	mov	r1, r0
   1d354:	mov	r3, #1
   1d358:	str	r3, [sp]
   1d35c:	mov	r2, #0
   1d360:	mov	r3, #0
   1d364:	mov	r0, r1
   1d368:	bl	10fb8 <lseek64@plt>
   1d36c:	mvn	r2, #0
   1d370:	mvn	r3, #0
   1d374:	cmp	r1, r3
   1d378:	cmpeq	r0, r2
   1d37c:	beq	1d3a4 <__assert_fail@plt+0xc1dc>
   1d380:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d384:	bl	1d8ac <__assert_fail@plt+0xc6e4>
   1d388:	mov	r3, r0
   1d38c:	cmp	r3, #0
   1d390:	beq	1d3a4 <__assert_fail@plt+0xc1dc>
   1d394:	bl	1109c <__errno_location@plt>
   1d398:	mov	r3, r0
   1d39c:	ldr	r3, [r3]
   1d3a0:	str	r3, [fp, #-8]
   1d3a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d3a8:	bl	110cc <fclose@plt>
   1d3ac:	str	r0, [fp, #-12]
   1d3b0:	ldr	r3, [fp, #-8]
   1d3b4:	cmp	r3, #0
   1d3b8:	beq	1d3d4 <__assert_fail@plt+0xc20c>
   1d3bc:	bl	1109c <__errno_location@plt>
   1d3c0:	mov	r2, r0
   1d3c4:	ldr	r3, [fp, #-8]
   1d3c8:	str	r3, [r2]
   1d3cc:	mvn	r3, #0
   1d3d0:	str	r3, [fp, #-12]
   1d3d4:	ldr	r3, [fp, #-12]
   1d3d8:	mov	r0, r3
   1d3dc:	sub	sp, fp, #4
   1d3e0:	ldr	fp, [sp]
   1d3e4:	add	sp, sp, #4
   1d3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3ec:	push	{r1, r2, r3}
   1d3f0:	str	fp, [sp, #-8]!
   1d3f4:	str	lr, [sp, #4]
   1d3f8:	add	fp, sp, #4
   1d3fc:	sub	sp, sp, #36	; 0x24
   1d400:	str	r0, [fp, #-36]	; 0xffffffdc
   1d404:	mvn	r3, #0
   1d408:	str	r3, [fp, #-12]
   1d40c:	add	r3, fp, #8
   1d410:	str	r3, [fp, #-32]	; 0xffffffe0
   1d414:	ldr	r3, [fp, #4]
   1d418:	cmp	r3, #0
   1d41c:	beq	1d434 <__assert_fail@plt+0xc26c>
   1d420:	ldr	r3, [fp, #4]
   1d424:	movw	r2, #1030	; 0x406
   1d428:	cmp	r3, r2
   1d42c:	beq	1d45c <__assert_fail@plt+0xc294>
   1d430:	b	1d484 <__assert_fail@plt+0xc2bc>
   1d434:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d438:	add	r2, r3, #4
   1d43c:	str	r2, [fp, #-32]	; 0xffffffe0
   1d440:	ldr	r3, [r3]
   1d444:	str	r3, [fp, #-16]
   1d448:	ldr	r1, [fp, #-16]
   1d44c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d450:	bl	1d630 <__assert_fail@plt+0xc468>
   1d454:	str	r0, [fp, #-12]
   1d458:	b	1d610 <__assert_fail@plt+0xc448>
   1d45c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d460:	add	r2, r3, #4
   1d464:	str	r2, [fp, #-32]	; 0xffffffe0
   1d468:	ldr	r3, [r3]
   1d46c:	str	r3, [fp, #-20]	; 0xffffffec
   1d470:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d474:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d478:	bl	1d674 <__assert_fail@plt+0xc4ac>
   1d47c:	str	r0, [fp, #-12]
   1d480:	b	1d610 <__assert_fail@plt+0xc448>
   1d484:	ldr	r3, [fp, #4]
   1d488:	cmp	r3, #11
   1d48c:	beq	1d5a0 <__assert_fail@plt+0xc3d8>
   1d490:	ldr	r3, [fp, #4]
   1d494:	cmp	r3, #11
   1d498:	bgt	1d520 <__assert_fail@plt+0xc358>
   1d49c:	ldr	r3, [fp, #4]
   1d4a0:	cmp	r3, #3
   1d4a4:	beq	1d5a0 <__assert_fail@plt+0xc3d8>
   1d4a8:	ldr	r3, [fp, #4]
   1d4ac:	cmp	r3, #3
   1d4b0:	bgt	1d4dc <__assert_fail@plt+0xc314>
   1d4b4:	ldr	r3, [fp, #4]
   1d4b8:	cmp	r3, #1
   1d4bc:	beq	1d5a0 <__assert_fail@plt+0xc3d8>
   1d4c0:	ldr	r3, [fp, #4]
   1d4c4:	cmp	r3, #1
   1d4c8:	bgt	1d5b4 <__assert_fail@plt+0xc3ec>
   1d4cc:	ldr	r3, [fp, #4]
   1d4d0:	cmp	r3, #0
   1d4d4:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d4d8:	b	1d5e0 <__assert_fail@plt+0xc418>
   1d4dc:	ldr	r3, [fp, #4]
   1d4e0:	cmp	r3, #8
   1d4e4:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d4e8:	ldr	r3, [fp, #4]
   1d4ec:	cmp	r3, #8
   1d4f0:	bgt	1d504 <__assert_fail@plt+0xc33c>
   1d4f4:	ldr	r3, [fp, #4]
   1d4f8:	cmp	r3, #4
   1d4fc:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d500:	b	1d5e0 <__assert_fail@plt+0xc418>
   1d504:	ldr	r3, [fp, #4]
   1d508:	cmp	r3, #9
   1d50c:	beq	1d5a0 <__assert_fail@plt+0xc3d8>
   1d510:	ldr	r3, [fp, #4]
   1d514:	cmp	r3, #10
   1d518:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d51c:	b	1d5e0 <__assert_fail@plt+0xc418>
   1d520:	ldr	r3, [fp, #4]
   1d524:	movw	r2, #1031	; 0x407
   1d528:	cmp	r3, r2
   1d52c:	bgt	1d570 <__assert_fail@plt+0xc3a8>
   1d530:	ldr	r3, [fp, #4]
   1d534:	movw	r2, #1030	; 0x406
   1d538:	cmp	r3, r2
   1d53c:	bge	1d5b4 <__assert_fail@plt+0xc3ec>
   1d540:	ldr	r3, [fp, #4]
   1d544:	movw	r2, #1025	; 0x401
   1d548:	cmp	r3, r2
   1d54c:	beq	1d5a0 <__assert_fail@plt+0xc3d8>
   1d550:	ldr	r3, [fp, #4]
   1d554:	movw	r2, #1026	; 0x402
   1d558:	cmp	r3, r2
   1d55c:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d560:	ldr	r3, [fp, #4]
   1d564:	cmp	r3, #1024	; 0x400
   1d568:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d56c:	b	1d5e0 <__assert_fail@plt+0xc418>
   1d570:	ldr	r3, [fp, #4]
   1d574:	movw	r2, #1033	; 0x409
   1d578:	cmp	r3, r2
   1d57c:	beq	1d5b4 <__assert_fail@plt+0xc3ec>
   1d580:	ldr	r3, [fp, #4]
   1d584:	movw	r2, #1033	; 0x409
   1d588:	cmp	r3, r2
   1d58c:	blt	1d5a0 <__assert_fail@plt+0xc3d8>
   1d590:	ldr	r3, [fp, #4]
   1d594:	movw	r2, #1034	; 0x40a
   1d598:	cmp	r3, r2
   1d59c:	bne	1d5e0 <__assert_fail@plt+0xc418>
   1d5a0:	ldr	r1, [fp, #4]
   1d5a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d5a8:	bl	110e4 <fcntl64@plt>
   1d5ac:	str	r0, [fp, #-12]
   1d5b0:	b	1d60c <__assert_fail@plt+0xc444>
   1d5b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d5b8:	add	r2, r3, #4
   1d5bc:	str	r2, [fp, #-32]	; 0xffffffe0
   1d5c0:	ldr	r3, [r3]
   1d5c4:	str	r3, [fp, #-24]	; 0xffffffe8
   1d5c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d5cc:	ldr	r1, [fp, #4]
   1d5d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d5d4:	bl	110e4 <fcntl64@plt>
   1d5d8:	str	r0, [fp, #-12]
   1d5dc:	b	1d60c <__assert_fail@plt+0xc444>
   1d5e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d5e4:	add	r2, r3, #4
   1d5e8:	str	r2, [fp, #-32]	; 0xffffffe0
   1d5ec:	ldr	r3, [r3]
   1d5f0:	str	r3, [fp, #-28]	; 0xffffffe4
   1d5f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d5f8:	ldr	r1, [fp, #4]
   1d5fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d600:	bl	110e4 <fcntl64@plt>
   1d604:	str	r0, [fp, #-12]
   1d608:	nop	{0}
   1d60c:	nop	{0}
   1d610:	ldr	r3, [fp, #-12]
   1d614:	mov	r0, r3
   1d618:	sub	sp, fp, #4
   1d61c:	ldr	fp, [sp]
   1d620:	ldr	lr, [sp, #4]
   1d624:	add	sp, sp, #8
   1d628:	add	sp, sp, #12
   1d62c:	bx	lr
   1d630:	str	fp, [sp, #-8]!
   1d634:	str	lr, [sp, #4]
   1d638:	add	fp, sp, #4
   1d63c:	sub	sp, sp, #16
   1d640:	str	r0, [fp, #-16]
   1d644:	str	r1, [fp, #-20]	; 0xffffffec
   1d648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d64c:	mov	r1, #0
   1d650:	ldr	r0, [fp, #-16]
   1d654:	bl	110e4 <fcntl64@plt>
   1d658:	str	r0, [fp, #-8]
   1d65c:	ldr	r3, [fp, #-8]
   1d660:	mov	r0, r3
   1d664:	sub	sp, fp, #4
   1d668:	ldr	fp, [sp]
   1d66c:	add	sp, sp, #4
   1d670:	pop	{pc}		; (ldr pc, [sp], #4)
   1d674:	str	fp, [sp, #-8]!
   1d678:	str	lr, [sp, #4]
   1d67c:	add	fp, sp, #4
   1d680:	sub	sp, sp, #24
   1d684:	str	r0, [fp, #-24]	; 0xffffffe8
   1d688:	str	r1, [fp, #-28]	; 0xffffffe4
   1d68c:	movw	r3, #740	; 0x2e4
   1d690:	movt	r3, #3
   1d694:	ldr	r3, [r3]
   1d698:	cmp	r3, #0
   1d69c:	blt	1d718 <__assert_fail@plt+0xc550>
   1d6a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d6a4:	movw	r1, #1030	; 0x406
   1d6a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d6ac:	bl	110e4 <fcntl64@plt>
   1d6b0:	str	r0, [fp, #-8]
   1d6b4:	ldr	r3, [fp, #-8]
   1d6b8:	cmp	r3, #0
   1d6bc:	bge	1d6d4 <__assert_fail@plt+0xc50c>
   1d6c0:	bl	1109c <__errno_location@plt>
   1d6c4:	mov	r3, r0
   1d6c8:	ldr	r3, [r3]
   1d6cc:	cmp	r3, #22
   1d6d0:	beq	1d6e8 <__assert_fail@plt+0xc520>
   1d6d4:	movw	r3, #740	; 0x2e4
   1d6d8:	movt	r3, #3
   1d6dc:	mov	r2, #1
   1d6e0:	str	r2, [r3]
   1d6e4:	b	1d728 <__assert_fail@plt+0xc560>
   1d6e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d6ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d6f0:	bl	1d630 <__assert_fail@plt+0xc468>
   1d6f4:	str	r0, [fp, #-8]
   1d6f8:	ldr	r3, [fp, #-8]
   1d6fc:	cmp	r3, #0
   1d700:	blt	1d728 <__assert_fail@plt+0xc560>
   1d704:	movw	r3, #740	; 0x2e4
   1d708:	movt	r3, #3
   1d70c:	mvn	r2, #0
   1d710:	str	r2, [r3]
   1d714:	b	1d728 <__assert_fail@plt+0xc560>
   1d718:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d71c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d720:	bl	1d630 <__assert_fail@plt+0xc468>
   1d724:	str	r0, [fp, #-8]
   1d728:	ldr	r3, [fp, #-8]
   1d72c:	cmp	r3, #0
   1d730:	blt	1d7b8 <__assert_fail@plt+0xc5f0>
   1d734:	movw	r3, #740	; 0x2e4
   1d738:	movt	r3, #3
   1d73c:	ldr	r3, [r3]
   1d740:	cmn	r3, #1
   1d744:	bne	1d7b8 <__assert_fail@plt+0xc5f0>
   1d748:	mov	r1, #1
   1d74c:	ldr	r0, [fp, #-8]
   1d750:	bl	110e4 <fcntl64@plt>
   1d754:	str	r0, [fp, #-12]
   1d758:	ldr	r3, [fp, #-12]
   1d75c:	cmp	r3, #0
   1d760:	blt	1d788 <__assert_fail@plt+0xc5c0>
   1d764:	ldr	r3, [fp, #-12]
   1d768:	orr	r3, r3, #1
   1d76c:	mov	r2, r3
   1d770:	mov	r1, #2
   1d774:	ldr	r0, [fp, #-8]
   1d778:	bl	110e4 <fcntl64@plt>
   1d77c:	mov	r3, r0
   1d780:	cmn	r3, #1
   1d784:	bne	1d7b8 <__assert_fail@plt+0xc5f0>
   1d788:	bl	1109c <__errno_location@plt>
   1d78c:	mov	r3, r0
   1d790:	ldr	r3, [r3]
   1d794:	str	r3, [fp, #-16]
   1d798:	ldr	r0, [fp, #-8]
   1d79c:	bl	111a4 <close@plt>
   1d7a0:	bl	1109c <__errno_location@plt>
   1d7a4:	mov	r2, r0
   1d7a8:	ldr	r3, [fp, #-16]
   1d7ac:	str	r3, [r2]
   1d7b0:	mvn	r3, #0
   1d7b4:	str	r3, [fp, #-8]
   1d7b8:	ldr	r3, [fp, #-8]
   1d7bc:	mov	r0, r3
   1d7c0:	sub	sp, fp, #4
   1d7c4:	ldr	fp, [sp]
   1d7c8:	add	sp, sp, #4
   1d7cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7d0:	push	{r1, r2, r3}
   1d7d4:	str	fp, [sp, #-8]!
   1d7d8:	str	lr, [sp, #4]
   1d7dc:	add	fp, sp, #4
   1d7e0:	sub	sp, sp, #20
   1d7e4:	str	r0, [fp, #-20]	; 0xffffffec
   1d7e8:	mov	r3, #0
   1d7ec:	str	r3, [fp, #-12]
   1d7f0:	ldr	r3, [fp, #4]
   1d7f4:	and	r3, r3, #64	; 0x40
   1d7f8:	cmp	r3, #0
   1d7fc:	beq	1d81c <__assert_fail@plt+0xc654>
   1d800:	add	r3, fp, #8
   1d804:	str	r3, [fp, #-16]
   1d808:	ldr	r3, [fp, #-16]
   1d80c:	add	r2, r3, #4
   1d810:	str	r2, [fp, #-16]
   1d814:	ldr	r3, [r3]
   1d818:	str	r3, [fp, #-12]
   1d81c:	ldr	r2, [fp, #-12]
   1d820:	ldr	r1, [fp, #4]
   1d824:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d828:	bl	11000 <open64@plt>
   1d82c:	mov	r3, r0
   1d830:	mov	r0, r3
   1d834:	bl	1b76c <__assert_fail@plt+0xa5a4>
   1d838:	mov	r3, r0
   1d83c:	mov	r0, r3
   1d840:	sub	sp, fp, #4
   1d844:	ldr	fp, [sp]
   1d848:	ldr	lr, [sp, #4]
   1d84c:	add	sp, sp, #8
   1d850:	add	sp, sp, #12
   1d854:	bx	lr
   1d858:	str	fp, [sp, #-8]!
   1d85c:	str	lr, [sp, #4]
   1d860:	add	fp, sp, #4
   1d864:	sub	sp, sp, #16
   1d868:	str	r0, [fp, #-8]
   1d86c:	ldr	r3, [fp, #-8]
   1d870:	ldr	r3, [r3]
   1d874:	and	r3, r3, #256	; 0x100
   1d878:	cmp	r3, #0
   1d87c:	beq	1d898 <__assert_fail@plt+0xc6d0>
   1d880:	mov	r3, #1
   1d884:	str	r3, [sp]
   1d888:	mov	r2, #0
   1d88c:	mov	r3, #0
   1d890:	ldr	r0, [fp, #-8]
   1d894:	bl	1d9bc <__assert_fail@plt+0xc7f4>
   1d898:	nop	{0}
   1d89c:	sub	sp, fp, #4
   1d8a0:	ldr	fp, [sp]
   1d8a4:	add	sp, sp, #4
   1d8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8ac:	str	fp, [sp, #-8]!
   1d8b0:	str	lr, [sp, #4]
   1d8b4:	add	fp, sp, #4
   1d8b8:	sub	sp, sp, #8
   1d8bc:	str	r0, [fp, #-8]
   1d8c0:	ldr	r3, [fp, #-8]
   1d8c4:	cmp	r3, #0
   1d8c8:	beq	1d8e0 <__assert_fail@plt+0xc718>
   1d8cc:	ldr	r0, [fp, #-8]
   1d8d0:	bl	11024 <__freading@plt>
   1d8d4:	mov	r3, r0
   1d8d8:	cmp	r3, #0
   1d8dc:	bne	1d8f0 <__assert_fail@plt+0xc728>
   1d8e0:	ldr	r0, [fp, #-8]
   1d8e4:	bl	10f10 <fflush@plt>
   1d8e8:	mov	r3, r0
   1d8ec:	b	1d904 <__assert_fail@plt+0xc73c>
   1d8f0:	ldr	r0, [fp, #-8]
   1d8f4:	bl	1d858 <__assert_fail@plt+0xc690>
   1d8f8:	ldr	r0, [fp, #-8]
   1d8fc:	bl	10f10 <fflush@plt>
   1d900:	mov	r3, r0
   1d904:	mov	r0, r3
   1d908:	sub	sp, fp, #4
   1d90c:	ldr	fp, [sp]
   1d910:	add	sp, sp, #4
   1d914:	pop	{pc}		; (ldr pc, [sp], #4)
   1d918:	str	r4, [sp, #-12]!
   1d91c:	str	fp, [sp, #4]
   1d920:	str	lr, [sp, #8]
   1d924:	add	fp, sp, #8
   1d928:	sub	sp, sp, #20
   1d92c:	str	r0, [fp, #-24]	; 0xffffffe8
   1d930:	bl	1109c <__errno_location@plt>
   1d934:	mov	r3, r0
   1d938:	ldr	r3, [r3]
   1d93c:	str	r3, [fp, #-20]	; 0xffffffec
   1d940:	bl	1109c <__errno_location@plt>
   1d944:	mov	r3, r0
   1d948:	ldr	r3, [r3]
   1d94c:	str	r3, [fp, #-16]
   1d950:	bl	1109c <__errno_location@plt>
   1d954:	mov	r2, r0
   1d958:	mov	r3, #0
   1d95c:	str	r3, [r2]
   1d960:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d964:	bl	10f28 <free@plt>
   1d968:	bl	1109c <__errno_location@plt>
   1d96c:	mov	r3, r0
   1d970:	ldr	r3, [r3]
   1d974:	cmp	r3, #0
   1d978:	moveq	r3, #1
   1d97c:	movne	r3, #0
   1d980:	uxtb	r3, r3
   1d984:	mov	r4, r3
   1d988:	bl	1109c <__errno_location@plt>
   1d98c:	mov	r2, r0
   1d990:	lsl	r3, r4, #2
   1d994:	sub	r1, fp, #12
   1d998:	add	r3, r1, r3
   1d99c:	ldr	r3, [r3, #-8]
   1d9a0:	str	r3, [r2]
   1d9a4:	nop	{0}
   1d9a8:	sub	sp, fp, #8
   1d9ac:	ldr	r4, [sp]
   1d9b0:	ldr	fp, [sp, #4]
   1d9b4:	add	sp, sp, #8
   1d9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9bc:	str	fp, [sp, #-8]!
   1d9c0:	str	lr, [sp, #4]
   1d9c4:	add	fp, sp, #4
   1d9c8:	sub	sp, sp, #32
   1d9cc:	str	r0, [fp, #-16]
   1d9d0:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d9d4:	ldr	r3, [fp, #-16]
   1d9d8:	ldr	r2, [r3, #8]
   1d9dc:	ldr	r3, [fp, #-16]
   1d9e0:	ldr	r3, [r3, #4]
   1d9e4:	cmp	r2, r3
   1d9e8:	bne	1da80 <__assert_fail@plt+0xc8b8>
   1d9ec:	ldr	r3, [fp, #-16]
   1d9f0:	ldr	r2, [r3, #20]
   1d9f4:	ldr	r3, [fp, #-16]
   1d9f8:	ldr	r3, [r3, #16]
   1d9fc:	cmp	r2, r3
   1da00:	bne	1da80 <__assert_fail@plt+0xc8b8>
   1da04:	ldr	r3, [fp, #-16]
   1da08:	ldr	r3, [r3, #36]	; 0x24
   1da0c:	cmp	r3, #0
   1da10:	bne	1da80 <__assert_fail@plt+0xc8b8>
   1da14:	ldr	r0, [fp, #-16]
   1da18:	bl	110c0 <fileno@plt>
   1da1c:	mov	r1, r0
   1da20:	ldr	r3, [fp, #4]
   1da24:	str	r3, [sp]
   1da28:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1da2c:	mov	r0, r1
   1da30:	bl	10fb8 <lseek64@plt>
   1da34:	strd	r0, [fp, #-12]
   1da38:	ldrd	r2, [fp, #-12]
   1da3c:	mvn	r0, #0
   1da40:	mvn	r1, #0
   1da44:	cmp	r3, r1
   1da48:	cmpeq	r2, r0
   1da4c:	bne	1da58 <__assert_fail@plt+0xc890>
   1da50:	mvn	r3, #0
   1da54:	b	1da98 <__assert_fail@plt+0xc8d0>
   1da58:	ldr	r3, [fp, #-16]
   1da5c:	ldr	r3, [r3]
   1da60:	bic	r2, r3, #16
   1da64:	ldr	r3, [fp, #-16]
   1da68:	str	r2, [r3]
   1da6c:	ldr	r1, [fp, #-16]
   1da70:	ldrd	r2, [fp, #-12]
   1da74:	strd	r2, [r1, #80]	; 0x50
   1da78:	mov	r3, #0
   1da7c:	b	1da98 <__assert_fail@plt+0xc8d0>
   1da80:	ldr	r3, [fp, #4]
   1da84:	str	r3, [sp]
   1da88:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1da8c:	ldr	r0, [fp, #-16]
   1da90:	bl	110d8 <fseeko64@plt>
   1da94:	mov	r3, r0
   1da98:	mov	r0, r3
   1da9c:	sub	sp, fp, #4
   1daa0:	ldr	fp, [sp]
   1daa4:	add	sp, sp, #4
   1daa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1daac:	str	fp, [sp, #-8]!
   1dab0:	str	lr, [sp, #4]
   1dab4:	add	fp, sp, #4
   1dab8:	bl	1109c <__errno_location@plt>
   1dabc:	mov	r2, r0
   1dac0:	mov	r3, #12
   1dac4:	str	r3, [r2]
   1dac8:	mov	r3, #0
   1dacc:	mov	r0, r3
   1dad0:	sub	sp, fp, #4
   1dad4:	ldr	fp, [sp]
   1dad8:	add	sp, sp, #4
   1dadc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dae0:	str	fp, [sp, #-8]!
   1dae4:	str	lr, [sp, #4]
   1dae8:	add	fp, sp, #4
   1daec:	sub	sp, sp, #8
   1daf0:	str	r0, [fp, #-8]
   1daf4:	ldr	r3, [fp, #-8]
   1daf8:	mov	r0, r3
   1dafc:	bl	1caf0 <__assert_fail@plt+0xb928>
   1db00:	mov	r3, r0
   1db04:	mov	r0, r3
   1db08:	sub	sp, fp, #4
   1db0c:	ldr	fp, [sp]
   1db10:	add	sp, sp, #4
   1db14:	pop	{pc}		; (ldr pc, [sp], #4)
   1db18:	str	fp, [sp, #-8]!
   1db1c:	str	lr, [sp, #4]
   1db20:	add	fp, sp, #4
   1db24:	sub	sp, sp, #8
   1db28:	str	r0, [fp, #-8]
   1db2c:	str	r1, [fp, #-12]
   1db30:	ldr	r3, [fp, #-12]
   1db34:	cmp	r3, #0
   1db38:	moveq	r3, #1
   1db3c:	movne	r3, #0
   1db40:	uxtb	r3, r3
   1db44:	mov	r2, r3
   1db48:	ldr	r3, [fp, #-12]
   1db4c:	orr	r3, r2, r3
   1db50:	mov	r1, r3
   1db54:	ldr	r0, [fp, #-8]
   1db58:	bl	1cb80 <__assert_fail@plt+0xb9b8>
   1db5c:	mov	r3, r0
   1db60:	mov	r0, r3
   1db64:	sub	sp, fp, #4
   1db68:	ldr	fp, [sp]
   1db6c:	add	sp, sp, #4
   1db70:	pop	{pc}		; (ldr pc, [sp], #4)
   1db74:	str	fp, [sp, #-8]!
   1db78:	str	lr, [sp, #4]
   1db7c:	add	fp, sp, #4
   1db80:	sub	sp, sp, #8
   1db84:	str	r0, [fp, #-8]
   1db88:	str	r1, [fp, #-12]
   1db8c:	ldr	r3, [fp, #-8]
   1db90:	ldr	r2, [fp, #-12]
   1db94:	mov	r1, r2
   1db98:	mov	r0, r3
   1db9c:	bl	1ca20 <__assert_fail@plt+0xb858>
   1dba0:	mov	r3, r0
   1dba4:	mov	r0, r3
   1dba8:	sub	sp, fp, #4
   1dbac:	ldr	fp, [sp]
   1dbb0:	add	sp, sp, #4
   1dbb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbb8:	str	fp, [sp, #-8]!
   1dbbc:	str	lr, [sp, #4]
   1dbc0:	add	fp, sp, #4
   1dbc4:	sub	sp, sp, #16
   1dbc8:	str	r0, [fp, #-8]
   1dbcc:	str	r1, [fp, #-12]
   1dbd0:	str	r2, [fp, #-16]
   1dbd4:	ldr	r3, [fp, #-12]
   1dbd8:	cmp	r3, #0
   1dbdc:	beq	1dbec <__assert_fail@plt+0xca24>
   1dbe0:	ldr	r3, [fp, #-16]
   1dbe4:	cmp	r3, #0
   1dbe8:	bne	1dbfc <__assert_fail@plt+0xca34>
   1dbec:	mov	r3, #1
   1dbf0:	str	r3, [fp, #-16]
   1dbf4:	ldr	r3, [fp, #-16]
   1dbf8:	str	r3, [fp, #-12]
   1dbfc:	ldr	r3, [fp, #-12]
   1dc00:	ldr	r2, [fp, #-16]
   1dc04:	mov	r1, r3
   1dc08:	ldr	r0, [fp, #-8]
   1dc0c:	bl	1dd48 <__assert_fail@plt+0xcb80>
   1dc10:	mov	r3, r0
   1dc14:	mov	r0, r3
   1dc18:	sub	sp, fp, #4
   1dc1c:	ldr	fp, [sp]
   1dc20:	add	sp, sp, #4
   1dc24:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc28:	str	fp, [sp, #-8]!
   1dc2c:	str	lr, [sp, #4]
   1dc30:	add	fp, sp, #4
   1dc34:	sub	sp, sp, #8
   1dc38:	mov	r0, #14
   1dc3c:	bl	11108 <nl_langinfo@plt>
   1dc40:	str	r0, [fp, #-8]
   1dc44:	ldr	r3, [fp, #-8]
   1dc48:	cmp	r3, #0
   1dc4c:	bne	1dc5c <__assert_fail@plt+0xca94>
   1dc50:	movw	r3, #63564	; 0xf84c
   1dc54:	movt	r3, #1
   1dc58:	str	r3, [fp, #-8]
   1dc5c:	ldr	r3, [fp, #-8]
   1dc60:	ldrb	r3, [r3]
   1dc64:	cmp	r3, #0
   1dc68:	bne	1dc78 <__assert_fail@plt+0xcab0>
   1dc6c:	movw	r3, #63568	; 0xf850
   1dc70:	movt	r3, #1
   1dc74:	str	r3, [fp, #-8]
   1dc78:	ldr	r3, [fp, #-8]
   1dc7c:	mov	r0, r3
   1dc80:	sub	sp, fp, #4
   1dc84:	ldr	fp, [sp]
   1dc88:	add	sp, sp, #4
   1dc8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc90:	str	fp, [sp, #-8]!
   1dc94:	str	lr, [sp, #4]
   1dc98:	add	fp, sp, #4
   1dc9c:	sub	sp, sp, #32
   1dca0:	str	r0, [fp, #-24]	; 0xffffffe8
   1dca4:	str	r1, [fp, #-28]	; 0xffffffe4
   1dca8:	str	r2, [fp, #-32]	; 0xffffffe0
   1dcac:	str	r3, [fp, #-36]	; 0xffffffdc
   1dcb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dcb4:	cmp	r3, #0
   1dcb8:	bne	1dcc4 <__assert_fail@plt+0xcafc>
   1dcbc:	sub	r3, fp, #16
   1dcc0:	str	r3, [fp, #-24]	; 0xffffffe8
   1dcc4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1dcc8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1dccc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dcd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dcd4:	bl	10fe8 <mbrtowc@plt>
   1dcd8:	str	r0, [fp, #-8]
   1dcdc:	ldr	r3, [fp, #-8]
   1dce0:	cmn	r3, #3
   1dce4:	bls	1dd30 <__assert_fail@plt+0xcb68>
   1dce8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1dcec:	cmp	r3, #0
   1dcf0:	beq	1dd30 <__assert_fail@plt+0xcb68>
   1dcf4:	mov	r0, #0
   1dcf8:	bl	1e350 <__assert_fail@plt+0xd188>
   1dcfc:	mov	r3, r0
   1dd00:	eor	r3, r3, #1
   1dd04:	uxtb	r3, r3
   1dd08:	cmp	r3, #0
   1dd0c:	beq	1dd30 <__assert_fail@plt+0xcb68>
   1dd10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1dd14:	ldrb	r3, [r3]
   1dd18:	strb	r3, [fp, #-9]
   1dd1c:	ldrb	r2, [fp, #-9]
   1dd20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dd24:	str	r2, [r3]
   1dd28:	mov	r3, #1
   1dd2c:	b	1dd34 <__assert_fail@plt+0xcb6c>
   1dd30:	ldr	r3, [fp, #-8]
   1dd34:	mov	r0, r3
   1dd38:	sub	sp, fp, #4
   1dd3c:	ldr	fp, [sp]
   1dd40:	add	sp, sp, #4
   1dd44:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd48:	str	fp, [sp, #-8]!
   1dd4c:	str	lr, [sp, #4]
   1dd50:	add	fp, sp, #4
   1dd54:	sub	sp, sp, #24
   1dd58:	str	r0, [fp, #-16]
   1dd5c:	str	r1, [fp, #-20]	; 0xffffffec
   1dd60:	str	r2, [fp, #-24]	; 0xffffffe8
   1dd64:	mov	ip, #0
   1dd68:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dd6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dd70:	umull	r0, r1, r2, r3
   1dd74:	mov	r2, #0
   1dd78:	mov	r3, #0
   1dd7c:	mov	r2, r1
   1dd80:	mov	r3, #0
   1dd84:	cmp	r2, #0
   1dd88:	beq	1dd90 <__assert_fail@plt+0xcbc8>
   1dd8c:	mov	ip, #1
   1dd90:	mov	r3, r0
   1dd94:	str	r3, [fp, #-8]
   1dd98:	mov	r3, ip
   1dd9c:	and	r3, r3, #1
   1dda0:	uxtb	r3, r3
   1dda4:	cmp	r3, #0
   1dda8:	beq	1ddc4 <__assert_fail@plt+0xcbfc>
   1ddac:	bl	1109c <__errno_location@plt>
   1ddb0:	mov	r2, r0
   1ddb4:	mov	r3, #12
   1ddb8:	str	r3, [r2]
   1ddbc:	mov	r3, #0
   1ddc0:	b	1ddd8 <__assert_fail@plt+0xcc10>
   1ddc4:	ldr	r3, [fp, #-8]
   1ddc8:	mov	r1, r3
   1ddcc:	ldr	r0, [fp, #-16]
   1ddd0:	bl	1cb80 <__assert_fail@plt+0xb9b8>
   1ddd4:	mov	r3, r0
   1ddd8:	mov	r0, r3
   1dddc:	sub	sp, fp, #4
   1dde0:	ldr	fp, [sp]
   1dde4:	add	sp, sp, #4
   1dde8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ddec:	str	fp, [sp, #-8]!
   1ddf0:	str	lr, [sp, #4]
   1ddf4:	add	fp, sp, #4
   1ddf8:	sub	sp, sp, #8
   1ddfc:	str	r0, [fp, #-8]
   1de00:	mov	r2, #3
   1de04:	mov	r1, #0
   1de08:	ldr	r0, [fp, #-8]
   1de0c:	bl	1d3ec <__assert_fail@plt+0xc224>
   1de10:	mov	r3, r0
   1de14:	mov	r0, r3
   1de18:	sub	sp, fp, #4
   1de1c:	ldr	fp, [sp]
   1de20:	add	sp, sp, #4
   1de24:	pop	{pc}		; (ldr pc, [sp], #4)
   1de28:	push	{fp}		; (str fp, [sp, #-4]!)
   1de2c:	add	fp, sp, #0
   1de30:	sub	sp, sp, #12
   1de34:	str	r0, [fp, #-8]
   1de38:	ldr	r3, [fp, #-8]
   1de3c:	cmp	r3, #90	; 0x5a
   1de40:	bgt	1de64 <__assert_fail@plt+0xcc9c>
   1de44:	ldr	r3, [fp, #-8]
   1de48:	cmp	r3, #65	; 0x41
   1de4c:	bge	1de74 <__assert_fail@plt+0xccac>
   1de50:	ldr	r3, [fp, #-8]
   1de54:	sub	r3, r3, #48	; 0x30
   1de58:	cmp	r3, #9
   1de5c:	bhi	1de7c <__assert_fail@plt+0xccb4>
   1de60:	b	1de74 <__assert_fail@plt+0xccac>
   1de64:	ldr	r3, [fp, #-8]
   1de68:	sub	r3, r3, #97	; 0x61
   1de6c:	cmp	r3, #25
   1de70:	bhi	1de7c <__assert_fail@plt+0xccb4>
   1de74:	mov	r3, #1
   1de78:	b	1de80 <__assert_fail@plt+0xccb8>
   1de7c:	mov	r3, #0
   1de80:	mov	r0, r3
   1de84:	add	sp, fp, #0
   1de88:	pop	{fp}		; (ldr fp, [sp], #4)
   1de8c:	bx	lr
   1de90:	push	{fp}		; (str fp, [sp, #-4]!)
   1de94:	add	fp, sp, #0
   1de98:	sub	sp, sp, #12
   1de9c:	str	r0, [fp, #-8]
   1dea0:	ldr	r3, [fp, #-8]
   1dea4:	cmp	r3, #65	; 0x41
   1dea8:	blt	1ded0 <__assert_fail@plt+0xcd08>
   1deac:	ldr	r3, [fp, #-8]
   1deb0:	cmp	r3, #90	; 0x5a
   1deb4:	ble	1dec8 <__assert_fail@plt+0xcd00>
   1deb8:	ldr	r3, [fp, #-8]
   1debc:	sub	r3, r3, #97	; 0x61
   1dec0:	cmp	r3, #25
   1dec4:	bhi	1ded0 <__assert_fail@plt+0xcd08>
   1dec8:	mov	r3, #1
   1decc:	b	1ded4 <__assert_fail@plt+0xcd0c>
   1ded0:	mov	r3, #0
   1ded4:	mov	r0, r3
   1ded8:	add	sp, fp, #0
   1dedc:	pop	{fp}		; (ldr fp, [sp], #4)
   1dee0:	bx	lr
   1dee4:	push	{fp}		; (str fp, [sp, #-4]!)
   1dee8:	add	fp, sp, #0
   1deec:	sub	sp, sp, #12
   1def0:	str	r0, [fp, #-8]
   1def4:	ldr	r3, [fp, #-8]
   1def8:	cmp	r3, #127	; 0x7f
   1defc:	bhi	1df08 <__assert_fail@plt+0xcd40>
   1df00:	mov	r3, #1
   1df04:	b	1df0c <__assert_fail@plt+0xcd44>
   1df08:	mov	r3, #0
   1df0c:	mov	r0, r3
   1df10:	add	sp, fp, #0
   1df14:	pop	{fp}		; (ldr fp, [sp], #4)
   1df18:	bx	lr
   1df1c:	push	{fp}		; (str fp, [sp, #-4]!)
   1df20:	add	fp, sp, #0
   1df24:	sub	sp, sp, #12
   1df28:	str	r0, [fp, #-8]
   1df2c:	ldr	r3, [fp, #-8]
   1df30:	cmp	r3, #32
   1df34:	beq	1df44 <__assert_fail@plt+0xcd7c>
   1df38:	ldr	r3, [fp, #-8]
   1df3c:	cmp	r3, #9
   1df40:	bne	1df4c <__assert_fail@plt+0xcd84>
   1df44:	mov	r3, #1
   1df48:	b	1df50 <__assert_fail@plt+0xcd88>
   1df4c:	mov	r3, #0
   1df50:	and	r3, r3, #1
   1df54:	uxtb	r3, r3
   1df58:	mov	r0, r3
   1df5c:	add	sp, fp, #0
   1df60:	pop	{fp}		; (ldr fp, [sp], #4)
   1df64:	bx	lr
   1df68:	push	{fp}		; (str fp, [sp, #-4]!)
   1df6c:	add	fp, sp, #0
   1df70:	sub	sp, sp, #12
   1df74:	str	r0, [fp, #-8]
   1df78:	ldr	r3, [fp, #-8]
   1df7c:	cmp	r3, #0
   1df80:	blt	1dfa4 <__assert_fail@plt+0xcddc>
   1df84:	ldr	r3, [fp, #-8]
   1df88:	cmp	r3, #31
   1df8c:	ble	1df9c <__assert_fail@plt+0xcdd4>
   1df90:	ldr	r3, [fp, #-8]
   1df94:	cmp	r3, #127	; 0x7f
   1df98:	bne	1dfa4 <__assert_fail@plt+0xcddc>
   1df9c:	mov	r3, #1
   1dfa0:	b	1dfa8 <__assert_fail@plt+0xcde0>
   1dfa4:	mov	r3, #0
   1dfa8:	mov	r0, r3
   1dfac:	add	sp, fp, #0
   1dfb0:	pop	{fp}		; (ldr fp, [sp], #4)
   1dfb4:	bx	lr
   1dfb8:	push	{fp}		; (str fp, [sp, #-4]!)
   1dfbc:	add	fp, sp, #0
   1dfc0:	sub	sp, sp, #12
   1dfc4:	str	r0, [fp, #-8]
   1dfc8:	ldr	r3, [fp, #-8]
   1dfcc:	sub	r3, r3, #48	; 0x30
   1dfd0:	cmp	r3, #9
   1dfd4:	bhi	1dfe0 <__assert_fail@plt+0xce18>
   1dfd8:	mov	r3, #1
   1dfdc:	b	1dfe4 <__assert_fail@plt+0xce1c>
   1dfe0:	mov	r3, #0
   1dfe4:	mov	r0, r3
   1dfe8:	add	sp, fp, #0
   1dfec:	pop	{fp}		; (ldr fp, [sp], #4)
   1dff0:	bx	lr
   1dff4:	push	{fp}		; (str fp, [sp, #-4]!)
   1dff8:	add	fp, sp, #0
   1dffc:	sub	sp, sp, #12
   1e000:	str	r0, [fp, #-8]
   1e004:	ldr	r3, [fp, #-8]
   1e008:	sub	r3, r3, #33	; 0x21
   1e00c:	cmp	r3, #93	; 0x5d
   1e010:	bhi	1e01c <__assert_fail@plt+0xce54>
   1e014:	mov	r3, #1
   1e018:	b	1e020 <__assert_fail@plt+0xce58>
   1e01c:	mov	r3, #0
   1e020:	mov	r0, r3
   1e024:	add	sp, fp, #0
   1e028:	pop	{fp}		; (ldr fp, [sp], #4)
   1e02c:	bx	lr
   1e030:	push	{fp}		; (str fp, [sp, #-4]!)
   1e034:	add	fp, sp, #0
   1e038:	sub	sp, sp, #12
   1e03c:	str	r0, [fp, #-8]
   1e040:	ldr	r3, [fp, #-8]
   1e044:	sub	r3, r3, #97	; 0x61
   1e048:	cmp	r3, #25
   1e04c:	bhi	1e058 <__assert_fail@plt+0xce90>
   1e050:	mov	r3, #1
   1e054:	b	1e05c <__assert_fail@plt+0xce94>
   1e058:	mov	r3, #0
   1e05c:	mov	r0, r3
   1e060:	add	sp, fp, #0
   1e064:	pop	{fp}		; (ldr fp, [sp], #4)
   1e068:	bx	lr
   1e06c:	push	{fp}		; (str fp, [sp, #-4]!)
   1e070:	add	fp, sp, #0
   1e074:	sub	sp, sp, #12
   1e078:	str	r0, [fp, #-8]
   1e07c:	ldr	r3, [fp, #-8]
   1e080:	sub	r3, r3, #32
   1e084:	cmp	r3, #94	; 0x5e
   1e088:	bhi	1e094 <__assert_fail@plt+0xcecc>
   1e08c:	mov	r3, #1
   1e090:	b	1e098 <__assert_fail@plt+0xced0>
   1e094:	mov	r3, #0
   1e098:	mov	r0, r3
   1e09c:	add	sp, fp, #0
   1e0a0:	pop	{fp}		; (ldr fp, [sp], #4)
   1e0a4:	bx	lr
   1e0a8:	push	{fp}		; (str fp, [sp, #-4]!)
   1e0ac:	add	fp, sp, #0
   1e0b0:	sub	sp, sp, #12
   1e0b4:	str	r0, [fp, #-8]
   1e0b8:	ldr	r3, [fp, #-8]
   1e0bc:	cmp	r3, #64	; 0x40
   1e0c0:	bgt	1e0e4 <__assert_fail@plt+0xcf1c>
   1e0c4:	ldr	r3, [fp, #-8]
   1e0c8:	cmp	r3, #58	; 0x3a
   1e0cc:	bge	1e10c <__assert_fail@plt+0xcf44>
   1e0d0:	ldr	r3, [fp, #-8]
   1e0d4:	sub	r3, r3, #33	; 0x21
   1e0d8:	cmp	r3, #14
   1e0dc:	bhi	1e114 <__assert_fail@plt+0xcf4c>
   1e0e0:	b	1e10c <__assert_fail@plt+0xcf44>
   1e0e4:	ldr	r3, [fp, #-8]
   1e0e8:	cmp	r3, #91	; 0x5b
   1e0ec:	blt	1e114 <__assert_fail@plt+0xcf4c>
   1e0f0:	ldr	r3, [fp, #-8]
   1e0f4:	cmp	r3, #96	; 0x60
   1e0f8:	ble	1e10c <__assert_fail@plt+0xcf44>
   1e0fc:	ldr	r3, [fp, #-8]
   1e100:	sub	r3, r3, #123	; 0x7b
   1e104:	cmp	r3, #3
   1e108:	bhi	1e114 <__assert_fail@plt+0xcf4c>
   1e10c:	mov	r3, #1
   1e110:	b	1e118 <__assert_fail@plt+0xcf50>
   1e114:	mov	r3, #0
   1e118:	mov	r0, r3
   1e11c:	add	sp, fp, #0
   1e120:	pop	{fp}		; (ldr fp, [sp], #4)
   1e124:	bx	lr
   1e128:	push	{fp}		; (str fp, [sp, #-4]!)
   1e12c:	add	fp, sp, #0
   1e130:	sub	sp, sp, #12
   1e134:	str	r0, [fp, #-8]
   1e138:	ldr	r3, [fp, #-8]
   1e13c:	cmp	r3, #9
   1e140:	blt	1e164 <__assert_fail@plt+0xcf9c>
   1e144:	ldr	r3, [fp, #-8]
   1e148:	cmp	r3, #13
   1e14c:	ble	1e15c <__assert_fail@plt+0xcf94>
   1e150:	ldr	r3, [fp, #-8]
   1e154:	cmp	r3, #32
   1e158:	bne	1e164 <__assert_fail@plt+0xcf9c>
   1e15c:	mov	r3, #1
   1e160:	b	1e168 <__assert_fail@plt+0xcfa0>
   1e164:	mov	r3, #0
   1e168:	mov	r0, r3
   1e16c:	add	sp, fp, #0
   1e170:	pop	{fp}		; (ldr fp, [sp], #4)
   1e174:	bx	lr
   1e178:	push	{fp}		; (str fp, [sp, #-4]!)
   1e17c:	add	fp, sp, #0
   1e180:	sub	sp, sp, #12
   1e184:	str	r0, [fp, #-8]
   1e188:	ldr	r3, [fp, #-8]
   1e18c:	sub	r3, r3, #65	; 0x41
   1e190:	cmp	r3, #25
   1e194:	bhi	1e1a0 <__assert_fail@plt+0xcfd8>
   1e198:	mov	r3, #1
   1e19c:	b	1e1a4 <__assert_fail@plt+0xcfdc>
   1e1a0:	mov	r3, #0
   1e1a4:	mov	r0, r3
   1e1a8:	add	sp, fp, #0
   1e1ac:	pop	{fp}		; (ldr fp, [sp], #4)
   1e1b0:	bx	lr
   1e1b4:	push	{fp}		; (str fp, [sp, #-4]!)
   1e1b8:	add	fp, sp, #0
   1e1bc:	sub	sp, sp, #12
   1e1c0:	str	r0, [fp, #-8]
   1e1c4:	ldr	r3, [fp, #-8]
   1e1c8:	sub	r3, r3, #48	; 0x30
   1e1cc:	cmp	r3, #54	; 0x36
   1e1d0:	ldrls	pc, [pc, r3, lsl #2]
   1e1d4:	b	1e2bc <__assert_fail@plt+0xd0f4>
   1e1d8:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1dc:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1e0:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1e4:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1e8:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1ec:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1f0:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1f4:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1f8:			; <UNDEFINED> instruction: 0x0001e2b4
   1e1fc:			; <UNDEFINED> instruction: 0x0001e2b4
   1e200:			; <UNDEFINED> instruction: 0x0001e2bc
   1e204:			; <UNDEFINED> instruction: 0x0001e2bc
   1e208:			; <UNDEFINED> instruction: 0x0001e2bc
   1e20c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e210:			; <UNDEFINED> instruction: 0x0001e2bc
   1e214:			; <UNDEFINED> instruction: 0x0001e2bc
   1e218:			; <UNDEFINED> instruction: 0x0001e2bc
   1e21c:			; <UNDEFINED> instruction: 0x0001e2b4
   1e220:			; <UNDEFINED> instruction: 0x0001e2b4
   1e224:			; <UNDEFINED> instruction: 0x0001e2b4
   1e228:			; <UNDEFINED> instruction: 0x0001e2b4
   1e22c:			; <UNDEFINED> instruction: 0x0001e2b4
   1e230:			; <UNDEFINED> instruction: 0x0001e2b4
   1e234:			; <UNDEFINED> instruction: 0x0001e2bc
   1e238:			; <UNDEFINED> instruction: 0x0001e2bc
   1e23c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e240:			; <UNDEFINED> instruction: 0x0001e2bc
   1e244:			; <UNDEFINED> instruction: 0x0001e2bc
   1e248:			; <UNDEFINED> instruction: 0x0001e2bc
   1e24c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e250:			; <UNDEFINED> instruction: 0x0001e2bc
   1e254:			; <UNDEFINED> instruction: 0x0001e2bc
   1e258:			; <UNDEFINED> instruction: 0x0001e2bc
   1e25c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e260:			; <UNDEFINED> instruction: 0x0001e2bc
   1e264:			; <UNDEFINED> instruction: 0x0001e2bc
   1e268:			; <UNDEFINED> instruction: 0x0001e2bc
   1e26c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e270:			; <UNDEFINED> instruction: 0x0001e2bc
   1e274:			; <UNDEFINED> instruction: 0x0001e2bc
   1e278:			; <UNDEFINED> instruction: 0x0001e2bc
   1e27c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e280:			; <UNDEFINED> instruction: 0x0001e2bc
   1e284:			; <UNDEFINED> instruction: 0x0001e2bc
   1e288:			; <UNDEFINED> instruction: 0x0001e2bc
   1e28c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e290:			; <UNDEFINED> instruction: 0x0001e2bc
   1e294:			; <UNDEFINED> instruction: 0x0001e2bc
   1e298:			; <UNDEFINED> instruction: 0x0001e2bc
   1e29c:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2a0:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2a4:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2a8:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2ac:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2b0:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2b4:	mov	r3, #1
   1e2b8:	b	1e2c0 <__assert_fail@plt+0xd0f8>
   1e2bc:	mov	r3, #0
   1e2c0:	mov	r0, r3
   1e2c4:	add	sp, fp, #0
   1e2c8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e2cc:	bx	lr
   1e2d0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e2d4:	add	fp, sp, #0
   1e2d8:	sub	sp, sp, #12
   1e2dc:	str	r0, [fp, #-8]
   1e2e0:	ldr	r3, [fp, #-8]
   1e2e4:	sub	r3, r3, #65	; 0x41
   1e2e8:	cmp	r3, #25
   1e2ec:	bhi	1e2fc <__assert_fail@plt+0xd134>
   1e2f0:	ldr	r3, [fp, #-8]
   1e2f4:	add	r3, r3, #32
   1e2f8:	b	1e300 <__assert_fail@plt+0xd138>
   1e2fc:	ldr	r3, [fp, #-8]
   1e300:	mov	r0, r3
   1e304:	add	sp, fp, #0
   1e308:	pop	{fp}		; (ldr fp, [sp], #4)
   1e30c:	bx	lr
   1e310:	push	{fp}		; (str fp, [sp, #-4]!)
   1e314:	add	fp, sp, #0
   1e318:	sub	sp, sp, #12
   1e31c:	str	r0, [fp, #-8]
   1e320:	ldr	r3, [fp, #-8]
   1e324:	sub	r3, r3, #97	; 0x61
   1e328:	cmp	r3, #25
   1e32c:	bhi	1e33c <__assert_fail@plt+0xd174>
   1e330:	ldr	r3, [fp, #-8]
   1e334:	sub	r3, r3, #32
   1e338:	b	1e340 <__assert_fail@plt+0xd178>
   1e33c:	ldr	r3, [fp, #-8]
   1e340:	mov	r0, r3
   1e344:	add	sp, fp, #0
   1e348:	pop	{fp}		; (ldr fp, [sp], #4)
   1e34c:	bx	lr
   1e350:	str	fp, [sp, #-8]!
   1e354:	str	lr, [sp, #4]
   1e358:	add	fp, sp, #4
   1e35c:	sub	sp, sp, #272	; 0x110
   1e360:	str	r0, [fp, #-272]	; 0xfffffef0
   1e364:	sub	r3, fp, #264	; 0x108
   1e368:	movw	r2, #257	; 0x101
   1e36c:	mov	r1, r3
   1e370:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1e374:	bl	1e514 <__assert_fail@plt+0xd34c>
   1e378:	mov	r3, r0
   1e37c:	cmp	r3, #0
   1e380:	beq	1e38c <__assert_fail@plt+0xd1c4>
   1e384:	mov	r3, #0
   1e388:	b	1e3e0 <__assert_fail@plt+0xd218>
   1e38c:	sub	r3, fp, #264	; 0x108
   1e390:	movw	r1, #63576	; 0xf858
   1e394:	movt	r1, #1
   1e398:	mov	r0, r3
   1e39c:	bl	10ef8 <strcmp@plt>
   1e3a0:	mov	r3, r0
   1e3a4:	cmp	r3, #0
   1e3a8:	beq	1e3d4 <__assert_fail@plt+0xd20c>
   1e3ac:	sub	r3, fp, #264	; 0x108
   1e3b0:	movw	r1, #63580	; 0xf85c
   1e3b4:	movt	r1, #1
   1e3b8:	mov	r0, r3
   1e3bc:	bl	10ef8 <strcmp@plt>
   1e3c0:	mov	r3, r0
   1e3c4:	cmp	r3, #0
   1e3c8:	beq	1e3d4 <__assert_fail@plt+0xd20c>
   1e3cc:	mov	r3, #1
   1e3d0:	b	1e3d8 <__assert_fail@plt+0xd210>
   1e3d4:	mov	r3, #0
   1e3d8:	and	r3, r3, #1
   1e3dc:	uxtb	r3, r3
   1e3e0:	mov	r0, r3
   1e3e4:	sub	sp, fp, #4
   1e3e8:	ldr	fp, [sp]
   1e3ec:	add	sp, sp, #4
   1e3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3f4:	str	fp, [sp, #-8]!
   1e3f8:	str	lr, [sp, #4]
   1e3fc:	add	fp, sp, #4
   1e400:	sub	sp, sp, #16
   1e404:	str	r0, [fp, #-16]
   1e408:	mov	r1, #0
   1e40c:	ldr	r0, [fp, #-16]
   1e410:	bl	110f0 <setlocale@plt>
   1e414:	str	r0, [fp, #-8]
   1e418:	ldr	r3, [fp, #-8]
   1e41c:	mov	r0, r3
   1e420:	sub	sp, fp, #4
   1e424:	ldr	fp, [sp]
   1e428:	add	sp, sp, #4
   1e42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e430:	str	fp, [sp, #-8]!
   1e434:	str	lr, [sp, #4]
   1e438:	add	fp, sp, #4
   1e43c:	sub	sp, sp, #24
   1e440:	str	r0, [fp, #-16]
   1e444:	str	r1, [fp, #-20]	; 0xffffffec
   1e448:	str	r2, [fp, #-24]	; 0xffffffe8
   1e44c:	ldr	r0, [fp, #-16]
   1e450:	bl	1e3f4 <__assert_fail@plt+0xd22c>
   1e454:	str	r0, [fp, #-8]
   1e458:	ldr	r3, [fp, #-8]
   1e45c:	cmp	r3, #0
   1e460:	bne	1e484 <__assert_fail@plt+0xd2bc>
   1e464:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e468:	cmp	r3, #0
   1e46c:	beq	1e47c <__assert_fail@plt+0xd2b4>
   1e470:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e474:	mov	r2, #0
   1e478:	strb	r2, [r3]
   1e47c:	mov	r3, #22
   1e480:	b	1e500 <__assert_fail@plt+0xd338>
   1e484:	ldr	r0, [fp, #-8]
   1e488:	bl	1106c <strlen@plt>
   1e48c:	str	r0, [fp, #-12]
   1e490:	ldr	r2, [fp, #-12]
   1e494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e498:	cmp	r2, r3
   1e49c:	bcs	1e4c0 <__assert_fail@plt+0xd2f8>
   1e4a0:	ldr	r3, [fp, #-12]
   1e4a4:	add	r3, r3, #1
   1e4a8:	mov	r2, r3
   1e4ac:	ldr	r1, [fp, #-8]
   1e4b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e4b4:	bl	10f40 <memcpy@plt>
   1e4b8:	mov	r3, #0
   1e4bc:	b	1e500 <__assert_fail@plt+0xd338>
   1e4c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e4c4:	cmp	r3, #0
   1e4c8:	beq	1e4fc <__assert_fail@plt+0xd334>
   1e4cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e4d0:	sub	r3, r3, #1
   1e4d4:	mov	r2, r3
   1e4d8:	ldr	r1, [fp, #-8]
   1e4dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e4e0:	bl	10f40 <memcpy@plt>
   1e4e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e4e8:	sub	r3, r3, #1
   1e4ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e4f0:	add	r3, r2, r3
   1e4f4:	mov	r2, #0
   1e4f8:	strb	r2, [r3]
   1e4fc:	mov	r3, #34	; 0x22
   1e500:	mov	r0, r3
   1e504:	sub	sp, fp, #4
   1e508:	ldr	fp, [sp]
   1e50c:	add	sp, sp, #4
   1e510:	pop	{pc}		; (ldr pc, [sp], #4)
   1e514:	str	fp, [sp, #-8]!
   1e518:	str	lr, [sp, #4]
   1e51c:	add	fp, sp, #4
   1e520:	sub	sp, sp, #16
   1e524:	str	r0, [fp, #-8]
   1e528:	str	r1, [fp, #-12]
   1e52c:	str	r2, [fp, #-16]
   1e530:	ldr	r2, [fp, #-16]
   1e534:	ldr	r1, [fp, #-12]
   1e538:	ldr	r0, [fp, #-8]
   1e53c:	bl	1e430 <__assert_fail@plt+0xd268>
   1e540:	mov	r3, r0
   1e544:	mov	r0, r3
   1e548:	sub	sp, fp, #4
   1e54c:	ldr	fp, [sp]
   1e550:	add	sp, sp, #4
   1e554:	pop	{pc}		; (ldr pc, [sp], #4)
   1e558:	str	fp, [sp, #-8]!
   1e55c:	str	lr, [sp, #4]
   1e560:	add	fp, sp, #4
   1e564:	sub	sp, sp, #8
   1e568:	str	r0, [fp, #-8]
   1e56c:	ldr	r0, [fp, #-8]
   1e570:	bl	1e3f4 <__assert_fail@plt+0xd22c>
   1e574:	mov	r3, r0
   1e578:	mov	r0, r3
   1e57c:	sub	sp, fp, #4
   1e580:	ldr	fp, [sp]
   1e584:	add	sp, sp, #4
   1e588:	pop	{pc}		; (ldr pc, [sp], #4)
   1e58c:	cmp	r3, #0
   1e590:	cmpeq	r2, #0
   1e594:	bne	1e5ac <__assert_fail@plt+0xd3e4>
   1e598:	cmp	r1, #0
   1e59c:	cmpeq	r0, #0
   1e5a0:	mvnne	r1, #0
   1e5a4:	mvnne	r0, #0
   1e5a8:	b	1e5c8 <__assert_fail@plt+0xd400>
   1e5ac:	sub	sp, sp, #8
   1e5b0:	push	{sp, lr}
   1e5b4:	bl	1e5d8 <__assert_fail@plt+0xd410>
   1e5b8:	ldr	lr, [sp, #4]
   1e5bc:	add	sp, sp, #8
   1e5c0:	pop	{r2, r3}
   1e5c4:	bx	lr
   1e5c8:	push	{r1, lr}
   1e5cc:	mov	r0, #8
   1e5d0:	bl	10eec <raise@plt>
   1e5d4:	pop	{r1, pc}
   1e5d8:	cmp	r1, r3
   1e5dc:	cmpeq	r0, r2
   1e5e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5e4:	mov	r4, r0
   1e5e8:	movcc	r0, #0
   1e5ec:	mov	r5, r1
   1e5f0:	ldr	lr, [sp, #36]	; 0x24
   1e5f4:	movcc	r1, r0
   1e5f8:	bcc	1e6f4 <__assert_fail@plt+0xd52c>
   1e5fc:	cmp	r3, #0
   1e600:	clzeq	ip, r2
   1e604:	clzne	ip, r3
   1e608:	addeq	ip, ip, #32
   1e60c:	cmp	r5, #0
   1e610:	clzeq	r1, r4
   1e614:	addeq	r1, r1, #32
   1e618:	clzne	r1, r5
   1e61c:	sub	ip, ip, r1
   1e620:	sub	sl, ip, #32
   1e624:	lsl	r9, r3, ip
   1e628:	rsb	fp, ip, #32
   1e62c:	orr	r9, r9, r2, lsl sl
   1e630:	orr	r9, r9, r2, lsr fp
   1e634:	lsl	r8, r2, ip
   1e638:	cmp	r5, r9
   1e63c:	cmpeq	r4, r8
   1e640:	movcc	r0, #0
   1e644:	movcc	r1, r0
   1e648:	bcc	1e664 <__assert_fail@plt+0xd49c>
   1e64c:	mov	r0, #1
   1e650:	subs	r4, r4, r8
   1e654:	lsl	r1, r0, sl
   1e658:	orr	r1, r1, r0, lsr fp
   1e65c:	lsl	r0, r0, ip
   1e660:	sbc	r5, r5, r9
   1e664:	cmp	ip, #0
   1e668:	beq	1e6f4 <__assert_fail@plt+0xd52c>
   1e66c:	lsr	r6, r8, #1
   1e670:	orr	r6, r6, r9, lsl #31
   1e674:	lsr	r7, r9, #1
   1e678:	mov	r2, ip
   1e67c:	b	1e6a0 <__assert_fail@plt+0xd4d8>
   1e680:	subs	r3, r4, r6
   1e684:	sbc	r8, r5, r7
   1e688:	adds	r3, r3, r3
   1e68c:	adc	r8, r8, r8
   1e690:	adds	r4, r3, #1
   1e694:	adc	r5, r8, #0
   1e698:	subs	r2, r2, #1
   1e69c:	beq	1e6bc <__assert_fail@plt+0xd4f4>
   1e6a0:	cmp	r5, r7
   1e6a4:	cmpeq	r4, r6
   1e6a8:	bcs	1e680 <__assert_fail@plt+0xd4b8>
   1e6ac:	adds	r4, r4, r4
   1e6b0:	adc	r5, r5, r5
   1e6b4:	subs	r2, r2, #1
   1e6b8:	bne	1e6a0 <__assert_fail@plt+0xd4d8>
   1e6bc:	lsr	r3, r4, ip
   1e6c0:	orr	r3, r3, r5, lsl fp
   1e6c4:	lsr	r2, r5, ip
   1e6c8:	orr	r3, r3, r5, lsr sl
   1e6cc:	adds	r0, r0, r4
   1e6d0:	mov	r4, r3
   1e6d4:	lsl	r3, r2, ip
   1e6d8:	orr	r3, r3, r4, lsl sl
   1e6dc:	lsl	ip, r4, ip
   1e6e0:	orr	r3, r3, r4, lsr fp
   1e6e4:	adc	r1, r1, r5
   1e6e8:	subs	r0, r0, ip
   1e6ec:	mov	r5, r2
   1e6f0:	sbc	r1, r1, r3
   1e6f4:	cmp	lr, #0
   1e6f8:	strdne	r4, [lr]
   1e6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e704:	mov	r7, r0
   1e708:	ldr	r6, [pc, #72]	; 1e758 <__assert_fail@plt+0xd590>
   1e70c:	ldr	r5, [pc, #72]	; 1e75c <__assert_fail@plt+0xd594>
   1e710:	add	r6, pc, r6
   1e714:	add	r5, pc, r5
   1e718:	sub	r6, r6, r5
   1e71c:	mov	r8, r1
   1e720:	mov	r9, r2
   1e724:	bl	10ea8 <fstatfs64@plt-0x20>
   1e728:	asrs	r6, r6, #2
   1e72c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e730:	mov	r4, #0
   1e734:	add	r4, r4, #1
   1e738:	ldr	r3, [r5], #4
   1e73c:	mov	r2, r9
   1e740:	mov	r1, r8
   1e744:	mov	r0, r7
   1e748:	blx	r3
   1e74c:	cmp	r6, r4
   1e750:	bne	1e734 <__assert_fail@plt+0xd56c>
   1e754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e758:	strdeq	r1, [r1], -ip
   1e75c:	strdeq	r1, [r1], -r4
   1e760:	bx	lr
   1e764:	ldr	r3, [pc, #12]	; 1e778 <__assert_fail@plt+0xd5b0>
   1e768:	mov	r1, #0
   1e76c:	add	r3, pc, r3
   1e770:	ldr	r2, [r3]
   1e774:	b	110a8 <__cxa_atexit@plt>
   1e778:	andeq	r1, r1, r4, lsr #19
   1e77c:	mov	r2, r1
   1e780:	mov	r1, r0
   1e784:	mov	r0, #3
   1e788:	b	11180 <__xstat64@plt>
   1e78c:	mov	r2, r1
   1e790:	mov	r1, r0
   1e794:	mov	r0, #3
   1e798:	b	10fa0 <__fxstat64@plt>
   1e79c:	mov	r2, r1
   1e7a0:	mov	r1, r0
   1e7a4:	mov	r0, #3
   1e7a8:	b	111b0 <__lxstat64@plt>
   1e7ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1e7b0:	sub	sp, sp, #12
   1e7b4:	str	r3, [sp]
   1e7b8:	mov	r3, r2
   1e7bc:	mov	r2, r1
   1e7c0:	mov	r1, r0
   1e7c4:	mov	r0, #3
   1e7c8:	bl	10f88 <__fxstatat64@plt>
   1e7cc:	add	sp, sp, #12
   1e7d0:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001e7d4 <.fini>:
   1e7d4:	push	{r3, lr}
   1e7d8:	pop	{r3, pc}
