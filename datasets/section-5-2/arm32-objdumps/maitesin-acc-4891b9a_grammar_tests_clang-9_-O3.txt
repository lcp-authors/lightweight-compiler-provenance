
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e1c <.init>:
   11e1c:	push	{r3, lr}
   11e20:	bl	1207c <_start@@Base+0x3c>
   11e24:	pop	{r3, pc}

Disassembly of section .plt:

00011e28 <fdopen@plt-0x14>:
   11e28:	push	{lr}		; (str lr, [sp, #-4]!)
   11e2c:	ldr	lr, [pc, #4]	; 11e38 <fdopen@plt-0x4>
   11e30:	add	lr, pc, lr
   11e34:	ldr	pc, [lr, #8]!
   11e38:	andeq	sl, r1, r8, asr #3

00011e3c <fdopen@plt>:
   11e3c:	add	ip, pc, #0, 12
   11e40:	add	ip, ip, #106496	; 0x1a000
   11e44:	ldr	pc, [ip, #456]!	; 0x1c8

00011e48 <setbuf@plt>:
   11e48:	add	ip, pc, #0, 12
   11e4c:	add	ip, ip, #106496	; 0x1a000
   11e50:	ldr	pc, [ip, #448]!	; 0x1c0

00011e54 <strtol@plt>:
   11e54:	add	ip, pc, #0, 12
   11e58:	add	ip, ip, #106496	; 0x1a000
   11e5c:	ldr	pc, [ip, #440]!	; 0x1b8

00011e60 <printf@plt>:
   11e60:	add	ip, pc, #0, 12
   11e64:	add	ip, ip, #106496	; 0x1a000
   11e68:	ldr	pc, [ip, #432]!	; 0x1b0

00011e6c <fflush@plt>:
   11e6c:	add	ip, pc, #0, 12
   11e70:	add	ip, ip, #106496	; 0x1a000
   11e74:	ldr	pc, [ip, #424]!	; 0x1a8

00011e78 <free@plt>:
   11e78:	add	ip, pc, #0, 12
   11e7c:	add	ip, ip, #106496	; 0x1a000
   11e80:	ldr	pc, [ip, #416]!	; 0x1a0

00011e84 <memcpy@plt>:
   11e84:	add	ip, pc, #0, 12
   11e88:	add	ip, ip, #106496	; 0x1a000
   11e8c:	ldr	pc, [ip, #408]!	; 0x198

00011e90 <mmap64@plt>:
   11e90:	add	ip, pc, #0, 12
   11e94:	add	ip, ip, #106496	; 0x1a000
   11e98:	ldr	pc, [ip, #400]!	; 0x190

00011e9c <ftell@plt>:
   11e9c:	add	ip, pc, #0, 12
   11ea0:	add	ip, ip, #106496	; 0x1a000
   11ea4:	ldr	pc, [ip, #392]!	; 0x188

00011ea8 <uname@plt>:
   11ea8:	add	ip, pc, #0, 12
   11eac:	add	ip, ip, #106496	; 0x1a000
   11eb0:	ldr	pc, [ip, #384]!	; 0x180

00011eb4 <strdup@plt>:
   11eb4:	add	ip, pc, #0, 12
   11eb8:	add	ip, ip, #106496	; 0x1a000
   11ebc:	ldr	pc, [ip, #376]!	; 0x178

00011ec0 <realloc@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #106496	; 0x1a000
   11ec8:	ldr	pc, [ip, #368]!	; 0x170

00011ecc <fwrite@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #106496	; 0x1a000
   11ed4:	ldr	pc, [ip, #360]!	; 0x168

00011ed8 <open64@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #106496	; 0x1a000
   11ee0:	ldr	pc, [ip, #352]!	; 0x160

00011ee4 <getenv@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #106496	; 0x1a000
   11eec:	ldr	pc, [ip, #344]!	; 0x158

00011ef0 <puts@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #106496	; 0x1a000
   11ef8:	ldr	pc, [ip, #336]!	; 0x150

00011efc <malloc@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #106496	; 0x1a000
   11f04:	ldr	pc, [ip, #328]!	; 0x148

00011f08 <__libc_start_main@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #106496	; 0x1a000
   11f10:	ldr	pc, [ip, #320]!	; 0x140

00011f14 <strerror@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #106496	; 0x1a000
   11f1c:	ldr	pc, [ip, #312]!	; 0x138

00011f20 <__gmon_start__@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #106496	; 0x1a000
   11f28:	ldr	pc, [ip, #304]!	; 0x130

00011f2c <getpid@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #106496	; 0x1a000
   11f34:	ldr	pc, [ip, #296]!	; 0x128

00011f38 <exit@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #106496	; 0x1a000
   11f40:	ldr	pc, [ip, #288]!	; 0x120

00011f44 <strlen@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #106496	; 0x1a000
   11f4c:	ldr	pc, [ip, #280]!	; 0x118

00011f50 <strchr@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #106496	; 0x1a000
   11f58:	ldr	pc, [ip, #272]!	; 0x110

00011f5c <fprintf@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #106496	; 0x1a000
   11f64:	ldr	pc, [ip, #264]!	; 0x108

00011f68 <__errno_location@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #106496	; 0x1a000
   11f70:	ldr	pc, [ip, #256]!	; 0x100

00011f74 <__cxa_atexit@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #106496	; 0x1a000
   11f7c:	ldr	pc, [ip, #248]!	; 0xf8

00011f80 <mkdir@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #106496	; 0x1a000
   11f88:	ldr	pc, [ip, #240]!	; 0xf0

00011f8c <memset@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #106496	; 0x1a000
   11f94:	ldr	pc, [ip, #232]!	; 0xe8

00011f98 <strncpy@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #106496	; 0x1a000
   11fa0:	ldr	pc, [ip, #224]!	; 0xe0

00011fa4 <prctl@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #106496	; 0x1a000
   11fac:	ldr	pc, [ip, #216]!	; 0xd8

00011fb0 <fileno@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #106496	; 0x1a000
   11fb8:	ldr	pc, [ip, #208]!	; 0xd0

00011fbc <fclose@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #106496	; 0x1a000
   11fc4:	ldr	pc, [ip, #200]!	; 0xc8

00011fc8 <strnlen@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #106496	; 0x1a000
   11fd0:	ldr	pc, [ip, #192]!	; 0xc0

00011fd4 <munmap@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #106496	; 0x1a000
   11fdc:	ldr	pc, [ip, #184]!	; 0xb8

00011fe0 <fcntl64@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #106496	; 0x1a000
   11fe8:	ldr	pc, [ip, #176]!	; 0xb0

00011fec <strrchr@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #106496	; 0x1a000
   11ff4:	ldr	pc, [ip, #168]!	; 0xa8

00011ff8 <msync@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #106496	; 0x1a000
   12000:	ldr	pc, [ip, #160]!	; 0xa0

00012004 <fseek@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #106496	; 0x1a000
   1200c:	ldr	pc, [ip, #152]!	; 0x98

00012010 <strncmp@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #106496	; 0x1a000
   12018:	ldr	pc, [ip, #144]!	; 0x90

0001201c <abort@plt>:
   1201c:	add	ip, pc, #0, 12
   12020:	add	ip, ip, #106496	; 0x1a000
   12024:	ldr	pc, [ip, #136]!	; 0x88

00012028 <__assert_fail@plt>:
   12028:	add	ip, pc, #0, 12
   1202c:	add	ip, ip, #106496	; 0x1a000
   12030:	ldr	pc, [ip, #128]!	; 0x80

Disassembly of section .text:

00012040 <_start@@Base>:
   12040:	mov	fp, #0
   12044:	mov	lr, #0
   12048:	pop	{r1}		; (ldr r1, [sp], #4)
   1204c:	mov	r2, sp
   12050:	push	{r2}		; (str r2, [sp, #-4]!)
   12054:	push	{r0}		; (str r0, [sp, #-4]!)
   12058:	ldr	ip, [pc, #16]	; 12070 <_start@@Base+0x30>
   1205c:	push	{ip}		; (str ip, [sp, #-4]!)
   12060:	ldr	r0, [pc, #12]	; 12074 <_start@@Base+0x34>
   12064:	ldr	r3, [pc, #12]	; 12078 <_start@@Base+0x38>
   12068:	bl	11f08 <__libc_start_main@plt>
   1206c:	bl	1201c <abort@plt>
   12070:	strheq	sl, [r1], -r0
   12074:	andeq	r3, r1, r0, lsr #30
   12078:	andeq	sl, r1, r0, asr r0
   1207c:	ldr	r3, [pc, #20]	; 12098 <_start@@Base+0x58>
   12080:	ldr	r2, [pc, #20]	; 1209c <_start@@Base+0x5c>
   12084:	add	r3, pc, r3
   12088:	ldr	r2, [r3, r2]
   1208c:	cmp	r2, #0
   12090:	bxeq	lr
   12094:	b	11f20 <__gmon_start__@plt>
   12098:	andeq	r9, r1, r4, ror pc
   1209c:	andeq	r0, r0, r4, asr #1
   120a0:	ldr	r0, [pc, #24]	; 120c0 <_start@@Base+0x80>
   120a4:	ldr	r3, [pc, #24]	; 120c4 <_start@@Base+0x84>
   120a8:	cmp	r3, r0
   120ac:	bxeq	lr
   120b0:	ldr	r3, [pc, #16]	; 120c8 <_start@@Base+0x88>
   120b4:	cmp	r3, #0
   120b8:	bxeq	lr
   120bc:	bx	r3
   120c0:	ldrdeq	ip, [r2], -r8
   120c4:	ldrdeq	ip, [r2], -r8
   120c8:	andeq	r0, r0, r0
   120cc:	ldr	r0, [pc, #36]	; 120f8 <_start@@Base+0xb8>
   120d0:	ldr	r1, [pc, #36]	; 120fc <_start@@Base+0xbc>
   120d4:	sub	r1, r1, r0
   120d8:	asr	r1, r1, #2
   120dc:	add	r1, r1, r1, lsr #31
   120e0:	asrs	r1, r1, #1
   120e4:	bxeq	lr
   120e8:	ldr	r3, [pc, #16]	; 12100 <_start@@Base+0xc0>
   120ec:	cmp	r3, #0
   120f0:	bxeq	lr
   120f4:	bx	r3
   120f8:	ldrdeq	ip, [r2], -r8
   120fc:	ldrdeq	ip, [r2], -r8
   12100:	andeq	r0, r0, r0
   12104:	push	{r4, lr}
   12108:	ldr	r4, [pc, #24]	; 12128 <_start@@Base+0xe8>
   1210c:	ldrb	r3, [r4]
   12110:	cmp	r3, #0
   12114:	popne	{r4, pc}
   12118:	bl	120a0 <_start@@Base+0x60>
   1211c:	mov	r3, #1
   12120:	strb	r3, [r4]
   12124:	pop	{r4, pc}
   12128:	andeq	ip, r2, r8, ror #1
   1212c:	b	120cc <_start@@Base+0x8c>

00012130 <next@@Base>:
   12130:	push	{r4, r6, r7, sl, fp, lr}
   12134:	add	fp, sp, #16
   12138:	movw	r4, #49392	; 0xc0f0
   1213c:	movw	r1, #53136	; 0xcf90
   12140:	movt	r4, #2
   12144:	movt	r1, #2
   12148:	ldrd	r2, [r4]
   1214c:	str	r0, [r1]
   12150:	adds	r2, r2, #1
   12154:	adc	r3, r3, #0
   12158:	strd	r2, [r4]
   1215c:	ldr	r2, [r1, #204]	; 0xcc
   12160:	cmp	r2, #49	; 0x31
   12164:	bhi	1218c <next@@Base+0x5c>
   12168:	ldrd	r6, [r4, #8]
   1216c:	add	r2, r1, r2, lsl #2
   12170:	add	r3, r4, #24
   12174:	str	r0, [r2, #4]
   12178:	ldr	r2, [r1, #204]	; 0xcc
   1217c:	adds	r6, r6, #1
   12180:	adc	r7, r7, #0
   12184:	strd	r6, [r4, #8]
   12188:	b	121ac <next@@Base+0x7c>
   1218c:	ldrd	r6, [r4, #16]
   12190:	ldr	r3, [r1, #212]	; 0xd4
   12194:	adds	r6, r6, #1
   12198:	add	r3, r3, #1
   1219c:	str	r3, [r1, #212]	; 0xd4
   121a0:	adc	r7, r7, #0
   121a4:	add	r3, r4, #32
   121a8:	strd	r6, [r4, #16]
   121ac:	ldrd	r6, [r3]
   121b0:	add	r2, r2, #1
   121b4:	str	r2, [r1, #204]	; 0xcc
   121b8:	movw	r2, #53372	; 0xd07c
   121bc:	movt	r2, #2
   121c0:	adds	r6, r6, #1
   121c4:	adc	r7, r7, #0
   121c8:	strd	r6, [r3]
   121cc:	ldr	r3, [r2, #200]	; 0xc8
   121d0:	cmp	r3, #49	; 0x31
   121d4:	bhi	12204 <next@@Base+0xd4>
   121d8:	add	r7, r3, #1
   121dc:	str	r7, [r2, #200]	; 0xc8
   121e0:	ldrd	r6, [r4, #40]	; 0x28
   121e4:	adds	r6, r6, #1
   121e8:	adc	r7, r7, #0
   121ec:	strd	r6, [r4, #40]	; 0x28
   121f0:	movw	r7, #8496	; 0x2130
   121f4:	movt	r7, #1
   121f8:	str	r7, [r2, r3, lsl #2]
   121fc:	add	r2, r4, #56	; 0x38
   12200:	b	12208 <next@@Base+0xd8>
   12204:	add	r2, r4, #48	; 0x30
   12208:	ldrd	r6, [r2]
   1220c:	adds	r6, r6, #1
   12210:	adc	r7, r7, #0
   12214:	strd	r6, [r2]
   12218:	ldr	r2, [r1, #232]	; 0xe8
   1221c:	cmp	r2, #0
   12220:	beq	12260 <next@@Base+0x130>
   12224:	ldrd	r6, [r4, #64]	; 0x40
   12228:	adds	r6, r6, #1
   1222c:	adc	r7, r7, #0
   12230:	strd	r6, [r4, #64]	; 0x40
   12234:	blx	r2
   12238:	add	r2, r4, #80	; 0x50
   1223c:	ldrd	r6, [r2]
   12240:	adds	r6, r6, #1
   12244:	adc	r7, r7, #0
   12248:	strd	r6, [r2]
   1224c:	ldrd	r2, [r4, #144]	; 0x90
   12250:	adds	r2, r2, #1
   12254:	adc	r3, r3, #0
   12258:	strd	r2, [r4, #144]	; 0x90
   1225c:	pop	{r4, r6, r7, sl, fp, pc}
   12260:	ldr	r0, [r4, #72]	; 0x48
   12264:	ldr	r3, [r4, #76]	; 0x4c
   12268:	adds	r0, r0, #1
   1226c:	str	r0, [r4, #72]	; 0x48
   12270:	ldr	r0, [r1, #220]	; 0xdc
   12274:	adc	r3, r3, #0
   12278:	str	r3, [r4, #76]	; 0x4c
   1227c:	cmp	r0, #0
   12280:	beq	122c8 <next@@Base+0x198>
   12284:	ldrd	r2, [r4, #88]	; 0x58
   12288:	adds	r2, r2, #1
   1228c:	adc	r3, r3, #0
   12290:	strd	r2, [r4, #88]	; 0x58
   12294:	ldr	r3, [r1, #224]	; 0xe0
   12298:	ldr	r2, [r1, #228]	; 0xe4
   1229c:	cmp	r3, r0
   122a0:	bge	122ec <next@@Base+0x1bc>
   122a4:	add	r0, r3, #1
   122a8:	str	r0, [r1, #224]	; 0xe0
   122ac:	ldrd	r0, [r4, #104]	; 0x68
   122b0:	adds	r0, r0, #1
   122b4:	adc	r1, r1, #0
   122b8:	strd	r0, [r4, #104]	; 0x68
   122bc:	ldr	r0, [r2, r3, lsl #2]
   122c0:	add	r2, r4, #120	; 0x78
   122c4:	b	1223c <next@@Base+0x10c>
   122c8:	ldr	r0, [r4, #96]	; 0x60
   122cc:	ldr	r3, [r4, #100]	; 0x64
   122d0:	add	r2, r4, #136	; 0x88
   122d4:	adds	r0, r0, #1
   122d8:	str	r0, [r4, #96]	; 0x60
   122dc:	ldr	r0, [r1, #216]	; 0xd8
   122e0:	adc	r3, r3, #0
   122e4:	str	r3, [r4, #100]	; 0x64
   122e8:	b	1223c <next@@Base+0x10c>
   122ec:	ldrd	r6, [r4, #112]	; 0x70
   122f0:	add	r0, r2, r0, lsl #2
   122f4:	add	r2, r4, #128	; 0x80
   122f8:	adds	r6, r6, #1
   122fc:	adc	r7, r7, #0
   12300:	strd	r6, [r4, #112]	; 0x70
   12304:	ldr	r0, [r0, #-4]
   12308:	b	1223c <next@@Base+0x10c>
   1230c:	nop	{0}

00012310 <next_reset@@Base>:
   12310:	push	{r4, sl, fp, lr}
   12314:	add	fp, sp, #8
   12318:	movw	r0, #50336	; 0xc4a0
   1231c:	add	r1, pc, #60	; 0x3c
   12320:	movw	r4, #53136	; 0xcf90
   12324:	mov	r2, #236	; 0xec
   12328:	movt	r0, #2
   1232c:	vld1.64	{d16-d17}, [r1 :128]
   12330:	movt	r4, #2
   12334:	mov	r1, #0
   12338:	vld1.64	{d18-d19}, [r0 :128]
   1233c:	vadd.i64	q8, q9, q8
   12340:	vst1.64	{d16-d17}, [r0 :128]
   12344:	mov	r0, r4
   12348:	bl	11f8c <memset@plt>
   1234c:	mov	r0, #50	; 0x32
   12350:	str	r0, [r4, #208]	; 0xd0
   12354:	pop	{r4, sl, fp, pc}
   12358:	nop	{0}
   1235c:	nop	{0}
   12360:	andeq	r0, r0, r1
   12364:	andeq	r0, r0, r0
   12368:	andeq	r0, r0, r1
   1236c:	andeq	r0, r0, r0

00012370 <push_back@@Base>:
   12370:	push	{r4, r5, r6, r7, fp, lr}
   12374:	add	fp, sp, #16
   12378:	movw	r4, #49552	; 0xc190
   1237c:	movw	ip, #52712	; 0xcde8
   12380:	movt	r4, #2
   12384:	movt	ip, #2
   12388:	ldrd	r2, [r4]
   1238c:	str	r1, [ip, #204]	; 0xcc
   12390:	str	r0, [ip]
   12394:	adds	r2, r2, #1
   12398:	adc	r3, r3, #0
   1239c:	strd	r2, [r4]
   123a0:	ldr	r3, [ip, #408]	; 0x198
   123a4:	cmp	r3, #49	; 0x31
   123a8:	bhi	123e4 <push_back@@Base+0x74>
   123ac:	ldr	r2, [r4, #8]
   123b0:	ldr	r5, [r4, #12]
   123b4:	adds	r2, r2, #1
   123b8:	str	r2, [r4, #8]
   123bc:	add	r2, ip, r3, lsl #2
   123c0:	adc	r5, r5, #0
   123c4:	str	r5, [r4, #12]
   123c8:	str	r0, [r2, #4]
   123cc:	ldr	r2, [ip, #408]	; 0x198
   123d0:	add	r2, ip, r2, lsl #2
   123d4:	str	r1, [r2, #208]	; 0xd0
   123d8:	add	r2, r4, #24
   123dc:	ldr	r3, [ip, #408]	; 0x198
   123e0:	b	12408 <push_back@@Base+0x98>
   123e4:	ldr	r2, [r4, #16]
   123e8:	ldr	r5, [r4, #20]
   123ec:	adds	r6, r2, #1
   123f0:	ldr	r2, [ip, #416]	; 0x1a0
   123f4:	adc	r7, r5, #0
   123f8:	strd	r6, [r4, #16]
   123fc:	add	r2, r2, #1
   12400:	str	r2, [ip, #416]	; 0x1a0
   12404:	add	r2, r4, #32
   12408:	ldrd	r6, [r2]
   1240c:	adds	r6, r6, #1
   12410:	adc	r7, r7, #0
   12414:	strd	r6, [r2]
   12418:	add	r2, r3, #1
   1241c:	str	r2, [ip, #408]	; 0x198
   12420:	movw	r2, #53372	; 0xd07c
   12424:	movt	r2, #2
   12428:	ldr	r3, [r2, #200]	; 0xc8
   1242c:	cmp	r3, #49	; 0x31
   12430:	bhi	12460 <push_back@@Base+0xf0>
   12434:	add	r7, r3, #1
   12438:	str	r7, [r2, #200]	; 0xc8
   1243c:	ldrd	r6, [r4, #40]	; 0x28
   12440:	adds	r6, r6, #1
   12444:	adc	r7, r7, #0
   12448:	strd	r6, [r4, #40]	; 0x28
   1244c:	movw	r7, #9072	; 0x2370
   12450:	movt	r7, #1
   12454:	str	r7, [r2, r3, lsl #2]
   12458:	add	r2, r4, #56	; 0x38
   1245c:	b	12464 <push_back@@Base+0xf4>
   12460:	add	r2, r4, #48	; 0x30
   12464:	ldrd	r6, [r2]
   12468:	adds	r6, r6, #1
   1246c:	adc	r7, r7, #0
   12470:	strd	r6, [r2]
   12474:	ldr	r2, [ip, #420]	; 0x1a4
   12478:	cmp	r2, #0
   1247c:	beq	1249c <push_back@@Base+0x12c>
   12480:	ldrd	r6, [r4, #64]	; 0x40
   12484:	adds	r6, r6, #1
   12488:	adc	r7, r7, #0
   1248c:	strd	r6, [r4, #64]	; 0x40
   12490:	blx	r2
   12494:	add	r0, r4, #80	; 0x50
   12498:	b	124a0 <push_back@@Base+0x130>
   1249c:	add	r0, r4, #72	; 0x48
   124a0:	ldrd	r2, [r0]
   124a4:	adds	r2, r2, #1
   124a8:	adc	r3, r3, #0
   124ac:	strd	r2, [r0]
   124b0:	ldrd	r0, [r4, #88]	; 0x58
   124b4:	adds	r0, r0, #1
   124b8:	adc	r1, r1, #0
   124bc:	strd	r0, [r4, #88]	; 0x58
   124c0:	pop	{r4, r5, r6, r7, fp, pc}
   124c4:	nop	{0}
   124c8:	nop	{0}
   124cc:	nop	{0}

000124d0 <push_back_reset@@Base>:
   124d0:	push	{r4, sl, fp, lr}
   124d4:	add	fp, sp, #8
   124d8:	movw	r0, #50336	; 0xc4a0
   124dc:	add	r1, pc, #60	; 0x3c
   124e0:	movw	r4, #52712	; 0xcde8
   124e4:	mov	r2, #424	; 0x1a8
   124e8:	movt	r0, #2
   124ec:	vld1.64	{d16-d17}, [r1 :128]
   124f0:	movt	r4, #2
   124f4:	mov	r1, #0
   124f8:	add	r0, r0, #16
   124fc:	vld1.64	{d18-d19}, [r0 :128]
   12500:	vadd.i64	q8, q9, q8
   12504:	vst1.64	{d16-d17}, [r0 :128]
   12508:	mov	r0, r4
   1250c:	bl	11f8c <memset@plt>
   12510:	mov	r0, #50	; 0x32
   12514:	str	r0, [r4, #412]	; 0x19c
   12518:	pop	{r4, sl, fp, pc}
   1251c:	nop	{0}
   12520:	andeq	r0, r0, r1
   12524:	andeq	r0, r0, r0
   12528:	andeq	r0, r0, r1
   1252c:	andeq	r0, r0, r0

00012530 <setup@@Base>:
   12530:	push	{r4, r5, r6, sl, fp, lr}
   12534:	add	fp, sp, #16
   12538:	vpush	{d8-d9}
   1253c:	movw	r5, #50336	; 0xc4a0
   12540:	mov	r0, #32
   12544:	movw	r4, #53136	; 0xcf90
   12548:	mov	r2, #236	; 0xec
   1254c:	movt	r5, #2
   12550:	movt	r4, #2
   12554:	mov	r1, r5
   12558:	vld1.64	{d16-d17}, [r1 :128], r0
   1255c:	add	r0, pc, #92	; 0x5c
   12560:	vld1.64	{d8-d9}, [r0 :128]
   12564:	vld1.64	{d18-d19}, [r1 :128]
   12568:	mov	r0, r4
   1256c:	vadd.i64	q9, q9, q4
   12570:	vadd.i64	q8, q8, q4
   12574:	vst1.64	{d18-d19}, [r1 :128]
   12578:	mov	r1, #0
   1257c:	vst1.64	{d16-d17}, [r5 :128]!
   12580:	bl	11f8c <memset@plt>
   12584:	vld1.64	{d16-d17}, [r5 :128]
   12588:	mov	r6, #50	; 0x32
   1258c:	mov	r1, #0
   12590:	mov	r2, #424	; 0x1a8
   12594:	str	r6, [r4, #208]	; 0xd0
   12598:	movw	r4, #52712	; 0xcde8
   1259c:	movt	r4, #2
   125a0:	mov	r0, r4
   125a4:	vadd.i64	q8, q8, q4
   125a8:	vst1.64	{d16-d17}, [r5 :128]
   125ac:	bl	11f8c <memset@plt>
   125b0:	str	r6, [r4, #412]	; 0x19c
   125b4:	vpop	{d8-d9}
   125b8:	pop	{r4, r5, r6, sl, fp, pc}
   125bc:	nop	{0}
   125c0:	andeq	r0, r0, r1
   125c4:	andeq	r0, r0, r0
   125c8:	andeq	r0, r0, r1
   125cc:	andeq	r0, r0, r0

000125d0 <no_int_as_first_stuff@@Base>:
   125d0:	push	{r4, r5, r6, r7, fp, lr}
   125d4:	add	fp, sp, #16
   125d8:	sub	sp, sp, #16
   125dc:	movw	r6, #50336	; 0xc4a0
   125e0:	mov	r4, sp
   125e4:	movt	r6, #2
   125e8:	ldrd	r0, [r6, #64]	; 0x40
   125ec:	adds	r0, r0, #1
   125f0:	adc	r1, r1, #0
   125f4:	strd	r0, [r6, #64]	; 0x40
   125f8:	add	r1, sp, #4
   125fc:	mov	r0, r4
   12600:	bl	15f90 <init_grammar@@Base>
   12604:	mov	r0, #4
   12608:	bl	11efc <malloc@plt>
   1260c:	mov	r5, r0
   12610:	bl	14930 <init_token_opar@@Base>
   12614:	movw	r7, #53136	; 0xcf90
   12618:	mov	r0, r4
   1261c:	movt	r7, #2
   12620:	str	r5, [r7, #216]	; 0xd8
   12624:	bl	16050 <read_function_ast_node@@Base>
   12628:	ldr	r1, [r7, #204]	; 0xcc
   1262c:	cmp	r1, #1
   12630:	bne	12678 <no_int_as_first_stuff@@Base+0xa8>
   12634:	ldrd	r2, [r6, #72]	; 0x48
   12638:	adds	r2, r2, #1
   1263c:	adc	r3, r3, #0
   12640:	cmp	r0, #0
   12644:	strd	r2, [r6, #72]	; 0x48
   12648:	bne	126a8 <no_int_as_first_stuff@@Base+0xd8>
   1264c:	ldrd	r0, [r6, #88]	; 0x58
   12650:	ldrd	r2, [r6, #104]	; 0x68
   12654:	adds	r0, r0, #1
   12658:	adc	r1, r1, #0
   1265c:	adds	r2, r2, #1
   12660:	str	r2, [r6, #104]	; 0x68
   12664:	strd	r0, [r6, #88]	; 0x58
   12668:	adc	r0, r3, #0
   1266c:	str	r0, [r6, #108]	; 0x6c
   12670:	sub	sp, fp, #16
   12674:	pop	{r4, r5, r6, r7, fp, pc}
   12678:	ldrd	r0, [r6, #80]	; 0x50
   1267c:	movw	r3, #41282	; 0xa142
   12680:	mov	r2, #41	; 0x29
   12684:	movt	r3, #1
   12688:	adds	r0, r0, #1
   1268c:	adc	r1, r1, #0
   12690:	strd	r0, [r6, #80]	; 0x50
   12694:	movw	r0, #41188	; 0xa0e4
   12698:	movw	r1, #41214	; 0xa0fe
   1269c:	movt	r0, #1
   126a0:	movt	r1, #1
   126a4:	bl	12028 <__assert_fail@plt>
   126a8:	ldrd	r0, [r6, #96]	; 0x60
   126ac:	movw	r3, #41282	; 0xa142
   126b0:	mov	r2, #42	; 0x2a
   126b4:	movt	r3, #1
   126b8:	adds	r0, r0, #1
   126bc:	adc	r1, r1, #0
   126c0:	strd	r0, [r6, #96]	; 0x60
   126c4:	movw	r0, #41311	; 0xa15f
   126c8:	movw	r1, #41214	; 0xa0fe
   126cc:	movt	r0, #1
   126d0:	movt	r1, #1
   126d4:	bl	12028 <__assert_fail@plt>

000126d8 <int_but_not_followed_by_function@@Base>:
   126d8:	push	{r4, r5, r6, r7, fp, lr}
   126dc:	add	fp, sp, #16
   126e0:	sub	sp, sp, #16
   126e4:	movw	r6, #50448	; 0xc510
   126e8:	mov	r4, sp
   126ec:	movt	r6, #2
   126f0:	ldrd	r0, [r6]
   126f4:	adds	r0, r0, #1
   126f8:	adc	r1, r1, #0
   126fc:	strd	r0, [r6]
   12700:	add	r1, sp, #4
   12704:	mov	r0, r4
   12708:	bl	15f90 <init_grammar@@Base>
   1270c:	mov	r0, #8
   12710:	bl	11efc <malloc@plt>
   12714:	mov	r5, r0
   12718:	mov	r0, #4
   1271c:	bl	11efc <malloc@plt>
   12720:	str	r0, [r5]
   12724:	bl	14870 <init_token_int_type@@Base>
   12728:	mov	r0, #4
   1272c:	bl	11efc <malloc@plt>
   12730:	str	r0, [r5, #4]
   12734:	bl	14930 <init_token_opar@@Base>
   12738:	movw	r7, #53136	; 0xcf90
   1273c:	mov	r0, #2
   12740:	movt	r7, #2
   12744:	str	r0, [r7, #220]	; 0xdc
   12748:	mov	r0, r4
   1274c:	str	r5, [r7, #228]	; 0xe4
   12750:	bl	16050 <read_function_ast_node@@Base>
   12754:	ldr	r1, [r7, #204]	; 0xcc
   12758:	cmp	r1, #2
   1275c:	bne	127a4 <int_but_not_followed_by_function@@Base+0xcc>
   12760:	ldrd	r2, [r6, #8]
   12764:	adds	r2, r2, #1
   12768:	adc	r3, r3, #0
   1276c:	cmp	r0, #0
   12770:	strd	r2, [r6, #8]
   12774:	bne	127d4 <int_but_not_followed_by_function@@Base+0xfc>
   12778:	ldrd	r0, [r6, #24]
   1277c:	ldrd	r2, [r6, #40]	; 0x28
   12780:	adds	r0, r0, #1
   12784:	adc	r1, r1, #0
   12788:	adds	r2, r2, #1
   1278c:	str	r2, [r6, #40]	; 0x28
   12790:	strd	r0, [r6, #24]
   12794:	adc	r0, r3, #0
   12798:	str	r0, [r6, #44]	; 0x2c
   1279c:	sub	sp, fp, #16
   127a0:	pop	{r4, r5, r6, r7, fp, pc}
   127a4:	ldrd	r0, [r6, #16]
   127a8:	movw	r3, #41349	; 0xa185
   127ac:	mov	r2, #67	; 0x43
   127b0:	movt	r3, #1
   127b4:	adds	r0, r0, #1
   127b8:	adc	r1, r1, #0
   127bc:	strd	r0, [r6, #16]
   127c0:	movw	r0, #41323	; 0xa16b
   127c4:	movw	r1, #41214	; 0xa0fe
   127c8:	movt	r0, #1
   127cc:	movt	r1, #1
   127d0:	bl	12028 <__assert_fail@plt>
   127d4:	ldrd	r0, [r6, #32]
   127d8:	movw	r3, #41349	; 0xa185
   127dc:	mov	r2, #68	; 0x44
   127e0:	movt	r3, #1
   127e4:	adds	r0, r0, #1
   127e8:	adc	r1, r1, #0
   127ec:	strd	r0, [r6, #32]
   127f0:	movw	r0, #41311	; 0xa15f
   127f4:	movw	r1, #41214	; 0xa0fe
   127f8:	movt	r0, #1
   127fc:	movt	r1, #1
   12800:	bl	12028 <__assert_fail@plt>

00012804 <boolean_expression_is_read_properly@@Base>:
   12804:	push	{r4, r5, r6, r7, fp, lr}
   12808:	add	fp, sp, #16
   1280c:	sub	sp, sp, #16
   12810:	movw	r7, #49648	; 0xc1f0
   12814:	movt	r7, #2
   12818:	ldrd	r0, [r7]
   1281c:	adds	r0, r0, #1
   12820:	adc	r1, r1, #0
   12824:	strd	r0, [r7]
   12828:	mov	r0, #3
   1282c:	bl	11efc <malloc@plt>
   12830:	mov	r6, r0
   12834:	mov	r0, #0
   12838:	mov	r4, sp
   1283c:	add	r1, sp, #4
   12840:	strb	r0, [r6, #2]
   12844:	movw	r0, #15649	; 0x3d21
   12848:	strh	r0, [r6]
   1284c:	mov	r0, r4
   12850:	bl	15f90 <init_grammar@@Base>
   12854:	mov	r0, #20
   12858:	bl	11efc <malloc@plt>
   1285c:	mov	r5, r0
   12860:	mov	r0, #8
   12864:	bl	11efc <malloc@plt>
   12868:	mov	r1, #2
   1286c:	str	r0, [r5]
   12870:	bl	148b0 <init_token_int_value@@Base>
   12874:	mov	r0, #8
   12878:	bl	11efc <malloc@plt>
   1287c:	mov	r1, #2
   12880:	str	r0, [r5, #4]
   12884:	bl	148b0 <init_token_int_value@@Base>
   12888:	mov	r0, #8
   1288c:	bl	11efc <malloc@plt>
   12890:	mov	r1, r6
   12894:	str	r0, [r5, #8]
   12898:	bl	14b70 <init_token_boolean_op@@Base>
   1289c:	mov	r0, #8
   128a0:	bl	11efc <malloc@plt>
   128a4:	mov	r1, #1
   128a8:	str	r0, [r5, #12]
   128ac:	bl	148b0 <init_token_int_value@@Base>
   128b0:	mov	r0, #4
   128b4:	bl	11efc <malloc@plt>
   128b8:	str	r0, [r5, #16]
   128bc:	bl	14970 <init_token_cpar@@Base>
   128c0:	movw	r6, #53136	; 0xcf90
   128c4:	mov	r0, #5
   128c8:	movt	r6, #2
   128cc:	str	r0, [r6, #220]	; 0xdc
   128d0:	mov	r0, r4
   128d4:	str	r5, [r6, #228]	; 0xe4
   128d8:	bl	16674 <read_boolean_expression@@Base>
   128dc:	ldr	r1, [r6, #204]	; 0xcc
   128e0:	cmp	r1, #5
   128e4:	bne	12954 <boolean_expression_is_read_properly@@Base+0x150>
   128e8:	movw	r1, #52712	; 0xcde8
   128ec:	ldrd	r2, [r7, #8]
   128f0:	movt	r1, #2
   128f4:	ldr	r1, [r1, #408]	; 0x198
   128f8:	adds	r2, r2, #1
   128fc:	adc	r3, r3, #0
   12900:	strd	r2, [r7, #8]
   12904:	cmp	r1, #1
   12908:	bne	12984 <boolean_expression_is_read_properly@@Base+0x180>
   1290c:	ldrd	r2, [r7, #24]
   12910:	adds	r2, r2, #1
   12914:	adc	r3, r3, #0
   12918:	strd	r2, [r7, #24]
   1291c:	ldr	r0, [r0]
   12920:	cmp	r0, #5
   12924:	bne	129b4 <boolean_expression_is_read_properly@@Base+0x1b0>
   12928:	ldrd	r0, [r7, #40]	; 0x28
   1292c:	ldrd	r2, [r7, #56]	; 0x38
   12930:	adds	r0, r0, #1
   12934:	adc	r1, r1, #0
   12938:	adds	r2, r2, #1
   1293c:	str	r2, [r7, #56]	; 0x38
   12940:	strd	r0, [r7, #40]	; 0x28
   12944:	adc	r0, r3, #0
   12948:	str	r0, [r7, #60]	; 0x3c
   1294c:	sub	sp, fp, #16
   12950:	pop	{r4, r5, r6, r7, fp, pc}
   12954:	ldrd	r0, [r7, #16]
   12958:	movw	r3, #41415	; 0xa1c7
   1295c:	mov	r2, #105	; 0x69
   12960:	movt	r3, #1
   12964:	adds	r0, r0, #1
   12968:	adc	r1, r1, #0
   1296c:	strd	r0, [r7, #16]
   12970:	movw	r0, #41389	; 0xa1ad
   12974:	movw	r1, #41214	; 0xa0fe
   12978:	movt	r0, #1
   1297c:	movt	r1, #1
   12980:	bl	12028 <__assert_fail@plt>
   12984:	ldrd	r0, [r7, #32]
   12988:	movw	r3, #41415	; 0xa1c7
   1298c:	mov	r2, #106	; 0x6a
   12990:	movt	r3, #1
   12994:	adds	r0, r0, #1
   12998:	adc	r1, r1, #0
   1299c:	strd	r0, [r7, #32]
   129a0:	movw	r0, #41458	; 0xa1f2
   129a4:	movw	r1, #41214	; 0xa0fe
   129a8:	movt	r0, #1
   129ac:	movt	r1, #1
   129b0:	bl	12028 <__assert_fail@plt>
   129b4:	ldrd	r0, [r7, #48]	; 0x30
   129b8:	movw	r3, #41415	; 0xa1c7
   129bc:	mov	r2, #107	; 0x6b
   129c0:	movt	r3, #1
   129c4:	adds	r0, r0, #1
   129c8:	adc	r1, r1, #0
   129cc:	strd	r0, [r7, #48]	; 0x30
   129d0:	movw	r0, #41489	; 0xa211
   129d4:	movw	r1, #41214	; 0xa0fe
   129d8:	movt	r0, #1
   129dc:	movt	r1, #1
   129e0:	bl	12028 <__assert_fail@plt>

000129e4 <boolean_expression_complex@@Base>:
   129e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129e8:	add	fp, sp, #24
   129ec:	sub	sp, sp, #16
   129f0:	movw	r9, #50448	; 0xc510
   129f4:	movt	r9, #2
   129f8:	ldrd	r0, [r9, #48]	; 0x30
   129fc:	adds	r0, r0, #1
   12a00:	adc	r1, r1, #0
   12a04:	strd	r0, [r9, #48]	; 0x30
   12a08:	mov	r0, #3
   12a0c:	bl	11efc <malloc@plt>
   12a10:	mov	r4, r0
   12a14:	mov	r0, #3
   12a18:	bl	11efc <malloc@plt>
   12a1c:	mov	r7, r0
   12a20:	mov	r0, #3
   12a24:	bl	11efc <malloc@plt>
   12a28:	mov	r6, r0
   12a2c:	mov	r0, #0
   12a30:	movw	r1, #15676	; 0x3d3c
   12a34:	mov	r8, sp
   12a38:	strb	r0, [r4, #2]
   12a3c:	strh	r1, [r4]
   12a40:	strb	r0, [r7, #2]
   12a44:	movw	r1, #9766	; 0x2626
   12a48:	strb	r0, [r6, #2]
   12a4c:	movw	r0, #15677	; 0x3d3d
   12a50:	strh	r1, [r7]
   12a54:	strh	r0, [r6]
   12a58:	add	r1, sp, #4
   12a5c:	mov	r0, r8
   12a60:	bl	15f90 <init_grammar@@Base>
   12a64:	mov	r0, #40	; 0x28
   12a68:	bl	11efc <malloc@plt>
   12a6c:	mov	r5, r0
   12a70:	mov	r0, #8
   12a74:	bl	11efc <malloc@plt>
   12a78:	mov	r1, #2
   12a7c:	str	r0, [r5]
   12a80:	bl	148b0 <init_token_int_value@@Base>
   12a84:	mov	r0, #8
   12a88:	bl	11efc <malloc@plt>
   12a8c:	mov	r1, #2
   12a90:	str	r0, [r5, #4]
   12a94:	bl	148b0 <init_token_int_value@@Base>
   12a98:	mov	r0, #8
   12a9c:	bl	11efc <malloc@plt>
   12aa0:	mov	r1, r4
   12aa4:	str	r0, [r5, #8]
   12aa8:	bl	14b70 <init_token_boolean_op@@Base>
   12aac:	mov	r0, #8
   12ab0:	bl	11efc <malloc@plt>
   12ab4:	mov	r1, #1
   12ab8:	str	r0, [r5, #12]
   12abc:	bl	148b0 <init_token_int_value@@Base>
   12ac0:	mov	r0, #8
   12ac4:	bl	11efc <malloc@plt>
   12ac8:	mov	r1, r7
   12acc:	str	r0, [r5, #16]
   12ad0:	bl	14b70 <init_token_boolean_op@@Base>
   12ad4:	mov	r0, #8
   12ad8:	bl	11efc <malloc@plt>
   12adc:	mov	r1, #4
   12ae0:	str	r0, [r5, #20]
   12ae4:	bl	148b0 <init_token_int_value@@Base>
   12ae8:	mov	r0, #8
   12aec:	bl	11efc <malloc@plt>
   12af0:	mov	r1, #4
   12af4:	str	r0, [r5, #24]
   12af8:	bl	148b0 <init_token_int_value@@Base>
   12afc:	mov	r0, #8
   12b00:	bl	11efc <malloc@plt>
   12b04:	mov	r1, r6
   12b08:	str	r0, [r5, #28]
   12b0c:	bl	14b70 <init_token_boolean_op@@Base>
   12b10:	mov	r0, #8
   12b14:	bl	11efc <malloc@plt>
   12b18:	mov	r1, #4
   12b1c:	str	r0, [r5, #32]
   12b20:	bl	148b0 <init_token_int_value@@Base>
   12b24:	mov	r0, #4
   12b28:	bl	11efc <malloc@plt>
   12b2c:	str	r0, [r5, #36]	; 0x24
   12b30:	bl	14970 <init_token_cpar@@Base>
   12b34:	movw	r4, #53136	; 0xcf90
   12b38:	mov	r0, #10
   12b3c:	movt	r4, #2
   12b40:	str	r0, [r4, #220]	; 0xdc
   12b44:	mov	r0, r8
   12b48:	str	r5, [r4, #228]	; 0xe4
   12b4c:	bl	16674 <read_boolean_expression@@Base>
   12b50:	ldr	r1, [r4, #204]	; 0xcc
   12b54:	cmp	r1, #10
   12b58:	bne	12ba4 <boolean_expression_complex@@Base+0x1c0>
   12b5c:	ldrd	r2, [r9, #56]	; 0x38
   12b60:	adds	r2, r2, #1
   12b64:	adc	r3, r3, #0
   12b68:	strd	r2, [r9, #56]	; 0x38
   12b6c:	ldr	r0, [r0]
   12b70:	cmp	r0, #5
   12b74:	bne	12bd4 <boolean_expression_complex@@Base+0x1f0>
   12b78:	ldrd	r0, [r9, #72]	; 0x48
   12b7c:	ldrd	r2, [r9, #88]	; 0x58
   12b80:	adds	r0, r0, #1
   12b84:	adc	r1, r1, #0
   12b88:	adds	r2, r2, #1
   12b8c:	str	r2, [r9, #88]	; 0x58
   12b90:	strd	r0, [r9, #72]	; 0x48
   12b94:	adc	r0, r3, #0
   12b98:	str	r0, [r9, #92]	; 0x5c
   12b9c:	sub	sp, fp, #24
   12ba0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ba4:	ldrd	r0, [r9, #64]	; 0x40
   12ba8:	movw	r3, #41548	; 0xa24c
   12bac:	mov	r2, #166	; 0xa6
   12bb0:	movt	r3, #1
   12bb4:	adds	r0, r0, #1
   12bb8:	adc	r1, r1, #0
   12bbc:	strd	r0, [r9, #64]	; 0x40
   12bc0:	movw	r0, #41521	; 0xa231
   12bc4:	movw	r1, #41214	; 0xa0fe
   12bc8:	movt	r0, #1
   12bcc:	movt	r1, #1
   12bd0:	bl	12028 <__assert_fail@plt>
   12bd4:	ldrd	r0, [r9, #80]	; 0x50
   12bd8:	movw	r3, #41548	; 0xa24c
   12bdc:	mov	r2, #167	; 0xa7
   12be0:	movt	r3, #1
   12be4:	adds	r0, r0, #1
   12be8:	adc	r1, r1, #0
   12bec:	strd	r0, [r9, #80]	; 0x50
   12bf0:	movw	r0, #41489	; 0xa211
   12bf4:	movw	r1, #41214	; 0xa0fe
   12bf8:	movt	r0, #1
   12bfc:	movt	r1, #1
   12c00:	bl	12028 <__assert_fail@plt>

00012c04 <boolean_binary_operator_is_read_properly@@Base>:
   12c04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c08:	add	fp, sp, #24
   12c0c:	sub	sp, sp, #16
   12c10:	movw	r7, #49712	; 0xc230
   12c14:	mov	r8, #3
   12c18:	movt	r7, #2
   12c1c:	ldrd	r0, [r7]
   12c20:	adds	r0, r0, #1
   12c24:	adc	r1, r1, #0
   12c28:	strd	r0, [r7]
   12c2c:	mov	r0, #3
   12c30:	bl	11efc <malloc@plt>
   12c34:	mov	r5, r0
   12c38:	mov	r0, #0
   12c3c:	mov	r4, sp
   12c40:	add	r1, sp, #4
   12c44:	strb	r0, [r5, #2]
   12c48:	movw	r0, #15649	; 0x3d21
   12c4c:	strh	r0, [r5]
   12c50:	mov	r0, r4
   12c54:	bl	15f90 <init_grammar@@Base>
   12c58:	mov	r0, #12
   12c5c:	bl	11efc <malloc@plt>
   12c60:	mov	r6, r0
   12c64:	mov	r0, #8
   12c68:	bl	11efc <malloc@plt>
   12c6c:	mov	r1, #2
   12c70:	str	r0, [r6]
   12c74:	bl	148b0 <init_token_int_value@@Base>
   12c78:	mov	r0, #8
   12c7c:	bl	11efc <malloc@plt>
   12c80:	mov	r1, r5
   12c84:	str	r0, [r6, #4]
   12c88:	bl	14b70 <init_token_boolean_op@@Base>
   12c8c:	mov	r0, #8
   12c90:	bl	11efc <malloc@plt>
   12c94:	mov	r1, #1
   12c98:	str	r0, [r6, #8]
   12c9c:	bl	148b0 <init_token_int_value@@Base>
   12ca0:	movw	r5, #53136	; 0xcf90
   12ca4:	mov	r0, r4
   12ca8:	movt	r5, #2
   12cac:	str	r8, [r5, #220]	; 0xdc
   12cb0:	str	r6, [r5, #228]	; 0xe4
   12cb4:	bl	16974 <read_boolean_binary_expression@@Base>
   12cb8:	ldr	r1, [r5, #204]	; 0xcc
   12cbc:	cmp	r1, #3
   12cc0:	bne	12d68 <boolean_binary_operator_is_read_properly@@Base+0x164>
   12cc4:	ldrd	r2, [r7, #8]
   12cc8:	adds	r2, r2, #1
   12ccc:	adc	r3, r3, #0
   12cd0:	strd	r2, [r7, #8]
   12cd4:	ldr	r1, [r0]
   12cd8:	cmp	r1, #5
   12cdc:	bne	12d98 <boolean_binary_operator_is_read_properly@@Base+0x194>
   12ce0:	ldrd	r2, [r7, #24]
   12ce4:	adds	r2, r2, #1
   12ce8:	adc	r3, r3, #0
   12cec:	strd	r2, [r7, #24]
   12cf0:	ldr	r1, [r0, #8]
   12cf4:	ldr	r1, [r1]
   12cf8:	cmp	r1, #1
   12cfc:	bne	12dc8 <boolean_binary_operator_is_read_properly@@Base+0x1c4>
   12d00:	ldrd	r2, [r7, #40]	; 0x28
   12d04:	adds	r2, r2, #1
   12d08:	adc	r3, r3, #0
   12d0c:	strd	r2, [r7, #40]	; 0x28
   12d10:	ldr	r1, [r0, #16]
   12d14:	cmp	r1, #1
   12d18:	bne	12df8 <boolean_binary_operator_is_read_properly@@Base+0x1f4>
   12d1c:	ldrd	r2, [r7, #56]	; 0x38
   12d20:	adds	r2, r2, #1
   12d24:	adc	r3, r3, #0
   12d28:	strd	r2, [r7, #56]	; 0x38
   12d2c:	ldr	r0, [r0, #12]
   12d30:	ldr	r0, [r0]
   12d34:	cmp	r0, #1
   12d38:	bne	12e28 <boolean_binary_operator_is_read_properly@@Base+0x224>
   12d3c:	ldrd	r0, [r7, #72]	; 0x48
   12d40:	ldrd	r2, [r7, #88]	; 0x58
   12d44:	adds	r0, r0, #1
   12d48:	adc	r1, r1, #0
   12d4c:	adds	r2, r2, #1
   12d50:	str	r2, [r7, #88]	; 0x58
   12d54:	strd	r0, [r7, #72]	; 0x48
   12d58:	adc	r0, r3, #0
   12d5c:	str	r0, [r7, #92]	; 0x5c
   12d60:	sub	sp, fp, #24
   12d64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d68:	ldrd	r0, [r7, #16]
   12d6c:	movw	r3, #41608	; 0xa288
   12d70:	mov	r2, #200	; 0xc8
   12d74:	movt	r3, #1
   12d78:	adds	r0, r0, #1
   12d7c:	adc	r1, r1, #0
   12d80:	strd	r0, [r7, #16]
   12d84:	movw	r0, #41582	; 0xa26e
   12d88:	movw	r1, #41214	; 0xa0fe
   12d8c:	movt	r0, #1
   12d90:	movt	r1, #1
   12d94:	bl	12028 <__assert_fail@plt>
   12d98:	ldrd	r0, [r7, #32]
   12d9c:	movw	r3, #41608	; 0xa288
   12da0:	mov	r2, #201	; 0xc9
   12da4:	movt	r3, #1
   12da8:	adds	r0, r0, #1
   12dac:	adc	r1, r1, #0
   12db0:	strd	r0, [r7, #32]
   12db4:	movw	r0, #41489	; 0xa211
   12db8:	movw	r1, #41214	; 0xa0fe
   12dbc:	movt	r0, #1
   12dc0:	movt	r1, #1
   12dc4:	bl	12028 <__assert_fail@plt>
   12dc8:	ldrd	r0, [r7, #48]	; 0x30
   12dcc:	movw	r3, #41608	; 0xa288
   12dd0:	mov	r2, #203	; 0xcb
   12dd4:	movt	r3, #1
   12dd8:	adds	r0, r0, #1
   12ddc:	adc	r1, r1, #0
   12de0:	strd	r0, [r7, #48]	; 0x30
   12de4:	movw	r0, #41656	; 0xa2b8
   12de8:	movw	r1, #41214	; 0xa0fe
   12dec:	movt	r0, #1
   12df0:	movt	r1, #1
   12df4:	bl	12028 <__assert_fail@plt>
   12df8:	ldrd	r0, [r7, #64]	; 0x40
   12dfc:	movw	r3, #41608	; 0xa288
   12e00:	mov	r2, #204	; 0xcc
   12e04:	movt	r3, #1
   12e08:	adds	r0, r0, #1
   12e0c:	adc	r1, r1, #0
   12e10:	strd	r0, [r7, #64]	; 0x40
   12e14:	movw	r0, #41683	; 0xa2d3
   12e18:	movw	r1, #41214	; 0xa0fe
   12e1c:	movt	r0, #1
   12e20:	movt	r1, #1
   12e24:	bl	12028 <__assert_fail@plt>
   12e28:	ldrd	r0, [r7, #80]	; 0x50
   12e2c:	movw	r3, #41608	; 0xa288
   12e30:	mov	r2, #205	; 0xcd
   12e34:	movt	r3, #1
   12e38:	adds	r0, r0, #1
   12e3c:	adc	r1, r1, #0
   12e40:	strd	r0, [r7, #80]	; 0x50
   12e44:	movw	r0, #41708	; 0xa2ec
   12e48:	movw	r1, #41214	; 0xa0fe
   12e4c:	movt	r0, #1
   12e50:	movt	r1, #1
   12e54:	bl	12028 <__assert_fail@plt>

00012e58 <boolean_unary_operator_is_read_properly@@Base>:
   12e58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e5c:	add	fp, sp, #24
   12e60:	sub	sp, sp, #16
   12e64:	movw	r7, #49808	; 0xc290
   12e68:	mov	r8, #2
   12e6c:	movt	r7, #2
   12e70:	ldrd	r0, [r7]
   12e74:	adds	r0, r0, #1
   12e78:	adc	r1, r1, #0
   12e7c:	strd	r0, [r7]
   12e80:	mov	r0, #2
   12e84:	bl	11efc <malloc@plt>
   12e88:	mov	r5, r0
   12e8c:	mov	r0, #33	; 0x21
   12e90:	mov	r4, sp
   12e94:	add	r1, sp, #4
   12e98:	strh	r0, [r5]
   12e9c:	mov	r0, r4
   12ea0:	bl	15f90 <init_grammar@@Base>
   12ea4:	mov	r0, #8
   12ea8:	bl	11efc <malloc@plt>
   12eac:	mov	r6, r0
   12eb0:	mov	r0, #8
   12eb4:	bl	11efc <malloc@plt>
   12eb8:	mov	r1, r5
   12ebc:	str	r0, [r6]
   12ec0:	bl	14b70 <init_token_boolean_op@@Base>
   12ec4:	mov	r0, #8
   12ec8:	bl	11efc <malloc@plt>
   12ecc:	mov	r1, #1
   12ed0:	str	r0, [r6, #4]
   12ed4:	bl	148b0 <init_token_int_value@@Base>
   12ed8:	movw	r5, #53136	; 0xcf90
   12edc:	mov	r0, r4
   12ee0:	movt	r5, #2
   12ee4:	str	r8, [r5, #220]	; 0xdc
   12ee8:	str	r6, [r5, #228]	; 0xe4
   12eec:	bl	16b4c <read_boolean_unary_expression@@Base>
   12ef0:	ldr	r1, [r5, #204]	; 0xcc
   12ef4:	cmp	r1, #2
   12ef8:	bne	12f9c <boolean_unary_operator_is_read_properly@@Base+0x144>
   12efc:	ldrd	r2, [r7, #8]
   12f00:	adds	r2, r2, #1
   12f04:	adc	r3, r3, #0
   12f08:	strd	r2, [r7, #8]
   12f0c:	ldr	r1, [r0]
   12f10:	cmp	r1, #5
   12f14:	bne	12fcc <boolean_unary_operator_is_read_properly@@Base+0x174>
   12f18:	ldrd	r2, [r7, #24]
   12f1c:	adds	r2, r2, #1
   12f20:	adc	r3, r3, #0
   12f24:	strd	r2, [r7, #24]
   12f28:	ldr	r1, [r0, #8]
   12f2c:	ldr	r1, [r1]
   12f30:	cmp	r1, #1
   12f34:	bne	12ffc <boolean_unary_operator_is_read_properly@@Base+0x1a4>
   12f38:	ldrd	r2, [r7, #40]	; 0x28
   12f3c:	adds	r2, r2, #1
   12f40:	adc	r3, r3, #0
   12f44:	strd	r2, [r7, #40]	; 0x28
   12f48:	ldr	r1, [r0, #16]
   12f4c:	cmp	r1, #8
   12f50:	bne	1302c <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12f54:	ldrd	r2, [r7, #56]	; 0x38
   12f58:	adds	r2, r2, #1
   12f5c:	adc	r3, r3, #0
   12f60:	strd	r2, [r7, #56]	; 0x38
   12f64:	ldr	r0, [r0, #12]
   12f68:	cmp	r0, #0
   12f6c:	bne	1305c <boolean_unary_operator_is_read_properly@@Base+0x204>
   12f70:	ldrd	r0, [r7, #72]	; 0x48
   12f74:	ldrd	r2, [r7, #88]	; 0x58
   12f78:	adds	r0, r0, #1
   12f7c:	adc	r1, r1, #0
   12f80:	adds	r2, r2, #1
   12f84:	str	r2, [r7, #88]	; 0x58
   12f88:	strd	r0, [r7, #72]	; 0x48
   12f8c:	adc	r0, r3, #0
   12f90:	str	r0, [r7, #92]	; 0x5c
   12f94:	sub	sp, fp, #24
   12f98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f9c:	ldrd	r0, [r7, #16]
   12fa0:	movw	r3, #41736	; 0xa308
   12fa4:	mov	r2, #235	; 0xeb
   12fa8:	movt	r3, #1
   12fac:	adds	r0, r0, #1
   12fb0:	adc	r1, r1, #0
   12fb4:	strd	r0, [r7, #16]
   12fb8:	movw	r0, #41323	; 0xa16b
   12fbc:	movw	r1, #41214	; 0xa0fe
   12fc0:	movt	r0, #1
   12fc4:	movt	r1, #1
   12fc8:	bl	12028 <__assert_fail@plt>
   12fcc:	ldrd	r0, [r7, #32]
   12fd0:	movw	r3, #41736	; 0xa308
   12fd4:	mov	r2, #236	; 0xec
   12fd8:	movt	r3, #1
   12fdc:	adds	r0, r0, #1
   12fe0:	adc	r1, r1, #0
   12fe4:	strd	r0, [r7, #32]
   12fe8:	movw	r0, #41489	; 0xa211
   12fec:	movw	r1, #41214	; 0xa0fe
   12ff0:	movt	r0, #1
   12ff4:	movt	r1, #1
   12ff8:	bl	12028 <__assert_fail@plt>
   12ffc:	ldrd	r0, [r7, #48]	; 0x30
   13000:	movw	r3, #41736	; 0xa308
   13004:	mov	r2, #238	; 0xee
   13008:	movt	r3, #1
   1300c:	adds	r0, r0, #1
   13010:	adc	r1, r1, #0
   13014:	strd	r0, [r7, #48]	; 0x30
   13018:	movw	r0, #41656	; 0xa2b8
   1301c:	movw	r1, #41214	; 0xa0fe
   13020:	movt	r0, #1
   13024:	movt	r1, #1
   13028:	bl	12028 <__assert_fail@plt>
   1302c:	ldrd	r0, [r7, #64]	; 0x40
   13030:	movw	r3, #41736	; 0xa308
   13034:	mov	r2, #239	; 0xef
   13038:	movt	r3, #1
   1303c:	adds	r0, r0, #1
   13040:	adc	r1, r1, #0
   13044:	strd	r0, [r7, #64]	; 0x40
   13048:	movw	r0, #41783	; 0xa337
   1304c:	movw	r1, #41214	; 0xa0fe
   13050:	movt	r0, #1
   13054:	movt	r1, #1
   13058:	bl	12028 <__assert_fail@plt>
   1305c:	ldrd	r0, [r7, #80]	; 0x50
   13060:	movw	r3, #41736	; 0xa308
   13064:	mov	r2, #240	; 0xf0
   13068:	movt	r3, #1
   1306c:	adds	r0, r0, #1
   13070:	adc	r1, r1, #0
   13074:	strd	r0, [r7, #80]	; 0x50
   13078:	movw	r0, #41803	; 0xa34b
   1307c:	movw	r1, #41214	; 0xa0fe
   13080:	movt	r0, #1
   13084:	movt	r1, #1
   13088:	bl	12028 <__assert_fail@plt>

0001308c <if_statement_only@@Base>:
   1308c:	push	{r4, r5, r6, r7, fp, lr}
   13090:	add	fp, sp, #16
   13094:	sub	sp, sp, #16
   13098:	movw	r7, #49904	; 0xc2f0
   1309c:	mov	r4, sp
   130a0:	movt	r7, #2
   130a4:	ldrd	r0, [r7]
   130a8:	adds	r0, r0, #1
   130ac:	adc	r1, r1, #0
   130b0:	strd	r0, [r7]
   130b4:	add	r1, sp, #4
   130b8:	mov	r0, r4
   130bc:	bl	15f90 <init_grammar@@Base>
   130c0:	mov	r0, #3
   130c4:	bl	11efc <malloc@plt>
   130c8:	mov	r6, r0
   130cc:	mov	r0, #0
   130d0:	strb	r0, [r6, #2]
   130d4:	movw	r0, #15649	; 0x3d21
   130d8:	strh	r0, [r6]
   130dc:	mov	r0, #36	; 0x24
   130e0:	bl	11efc <malloc@plt>
   130e4:	mov	r5, r0
   130e8:	mov	r0, #4
   130ec:	bl	11efc <malloc@plt>
   130f0:	str	r0, [r5]
   130f4:	bl	14930 <init_token_opar@@Base>
   130f8:	mov	r0, #8
   130fc:	bl	11efc <malloc@plt>
   13100:	mov	r1, #1
   13104:	str	r0, [r5, #4]
   13108:	bl	148b0 <init_token_int_value@@Base>
   1310c:	mov	r0, #8
   13110:	bl	11efc <malloc@plt>
   13114:	mov	r1, #1
   13118:	str	r0, [r5, #8]
   1311c:	bl	148b0 <init_token_int_value@@Base>
   13120:	mov	r0, #8
   13124:	bl	11efc <malloc@plt>
   13128:	mov	r1, r6
   1312c:	str	r0, [r5, #12]
   13130:	bl	14b70 <init_token_boolean_op@@Base>
   13134:	mov	r0, #8
   13138:	bl	11efc <malloc@plt>
   1313c:	mov	r1, #1
   13140:	str	r0, [r5, #16]
   13144:	bl	148b0 <init_token_int_value@@Base>
   13148:	mov	r0, #4
   1314c:	bl	11efc <malloc@plt>
   13150:	str	r0, [r5, #20]
   13154:	bl	14970 <init_token_cpar@@Base>
   13158:	mov	r0, #4
   1315c:	bl	11efc <malloc@plt>
   13160:	str	r0, [r5, #24]
   13164:	bl	149b0 <init_token_obra@@Base>
   13168:	mov	r0, #4
   1316c:	bl	11efc <malloc@plt>
   13170:	str	r0, [r5, #28]
   13174:	bl	149f0 <init_token_cbra@@Base>
   13178:	mov	r0, #4
   1317c:	bl	11efc <malloc@plt>
   13180:	str	r0, [r5, #32]
   13184:	bl	14ab0 <init_token_eof@@Base>
   13188:	movw	r6, #53136	; 0xcf90
   1318c:	mov	r0, #9
   13190:	movt	r6, #2
   13194:	str	r0, [r6, #220]	; 0xdc
   13198:	mov	r0, r4
   1319c:	str	r5, [r6, #228]	; 0xe4
   131a0:	bl	16528 <read_if_statement@@Base>
   131a4:	ldr	r1, [r6, #204]	; 0xcc
   131a8:	cmp	r1, #9
   131ac:	bne	13210 <if_statement_only@@Base+0x184>
   131b0:	ldrd	r2, [r7, #8]
   131b4:	adds	r2, r2, #1
   131b8:	adc	r3, r3, #0
   131bc:	cmp	r0, #0
   131c0:	strd	r2, [r7, #8]
   131c4:	beq	13240 <if_statement_only@@Base+0x1b4>
   131c8:	ldrd	r2, [r7, #24]
   131cc:	adds	r2, r2, #1
   131d0:	adc	r3, r3, #0
   131d4:	strd	r2, [r7, #24]
   131d8:	ldr	r0, [r0]
   131dc:	cmp	r0, #4
   131e0:	bne	13270 <if_statement_only@@Base+0x1e4>
   131e4:	ldrd	r0, [r7, #40]	; 0x28
   131e8:	ldrd	r2, [r7, #56]	; 0x38
   131ec:	adds	r0, r0, #1
   131f0:	adc	r1, r1, #0
   131f4:	adds	r2, r2, #1
   131f8:	str	r2, [r7, #56]	; 0x38
   131fc:	strd	r0, [r7, #40]	; 0x28
   13200:	adc	r0, r3, #0
   13204:	str	r0, [r7, #60]	; 0x3c
   13208:	sub	sp, fp, #16
   1320c:	pop	{r4, r5, r6, r7, fp, pc}
   13210:	ldrd	r0, [r7, #16]
   13214:	movw	r3, #41850	; 0xa37a
   13218:	movw	r2, #283	; 0x11b
   1321c:	movt	r3, #1
   13220:	adds	r0, r0, #1
   13224:	adc	r1, r1, #0
   13228:	strd	r0, [r7, #16]
   1322c:	movw	r0, #41824	; 0xa360
   13230:	movw	r1, #41214	; 0xa0fe
   13234:	movt	r0, #1
   13238:	movt	r1, #1
   1323c:	bl	12028 <__assert_fail@plt>
   13240:	ldrd	r0, [r7, #32]
   13244:	movw	r3, #41850	; 0xa37a
   13248:	mov	r2, #284	; 0x11c
   1324c:	movt	r3, #1
   13250:	adds	r0, r0, #1
   13254:	adc	r1, r1, #0
   13258:	strd	r0, [r7, #32]
   1325c:	movw	r0, #41875	; 0xa393
   13260:	movw	r1, #41214	; 0xa0fe
   13264:	movt	r0, #1
   13268:	movt	r1, #1
   1326c:	bl	12028 <__assert_fail@plt>
   13270:	ldrd	r0, [r7, #48]	; 0x30
   13274:	movw	r3, #41850	; 0xa37a
   13278:	movw	r2, #285	; 0x11d
   1327c:	movt	r3, #1
   13280:	adds	r0, r0, #1
   13284:	adc	r1, r1, #0
   13288:	strd	r0, [r7, #48]	; 0x30
   1328c:	movw	r0, #41887	; 0xa39f
   13290:	movw	r1, #41214	; 0xa0fe
   13294:	movt	r0, #1
   13298:	movt	r1, #1
   1329c:	bl	12028 <__assert_fail@plt>

000132a0 <if_else_statements@@Base>:
   132a0:	push	{r4, r5, r6, r7, fp, lr}
   132a4:	add	fp, sp, #16
   132a8:	sub	sp, sp, #16
   132ac:	movw	r7, #49968	; 0xc330
   132b0:	mov	r4, sp
   132b4:	movt	r7, #2
   132b8:	ldrd	r0, [r7]
   132bc:	adds	r0, r0, #1
   132c0:	adc	r1, r1, #0
   132c4:	strd	r0, [r7]
   132c8:	add	r1, sp, #4
   132cc:	mov	r0, r4
   132d0:	bl	15f90 <init_grammar@@Base>
   132d4:	mov	r0, #3
   132d8:	bl	11efc <malloc@plt>
   132dc:	mov	r6, r0
   132e0:	mov	r0, #0
   132e4:	strb	r0, [r6, #2]
   132e8:	movw	r0, #15649	; 0x3d21
   132ec:	strh	r0, [r6]
   132f0:	mov	r0, #44	; 0x2c
   132f4:	bl	11efc <malloc@plt>
   132f8:	mov	r5, r0
   132fc:	mov	r0, #4
   13300:	bl	11efc <malloc@plt>
   13304:	str	r0, [r5]
   13308:	bl	14930 <init_token_opar@@Base>
   1330c:	mov	r0, #8
   13310:	bl	11efc <malloc@plt>
   13314:	mov	r1, #1
   13318:	str	r0, [r5, #4]
   1331c:	bl	148b0 <init_token_int_value@@Base>
   13320:	mov	r0, #8
   13324:	bl	11efc <malloc@plt>
   13328:	mov	r1, #1
   1332c:	str	r0, [r5, #8]
   13330:	bl	148b0 <init_token_int_value@@Base>
   13334:	mov	r0, #8
   13338:	bl	11efc <malloc@plt>
   1333c:	mov	r1, r6
   13340:	str	r0, [r5, #12]
   13344:	bl	14b70 <init_token_boolean_op@@Base>
   13348:	mov	r0, #8
   1334c:	bl	11efc <malloc@plt>
   13350:	mov	r1, #1
   13354:	str	r0, [r5, #16]
   13358:	bl	148b0 <init_token_int_value@@Base>
   1335c:	mov	r0, #4
   13360:	bl	11efc <malloc@plt>
   13364:	str	r0, [r5, #20]
   13368:	bl	14970 <init_token_cpar@@Base>
   1336c:	mov	r0, #4
   13370:	bl	11efc <malloc@plt>
   13374:	str	r0, [r5, #24]
   13378:	bl	149b0 <init_token_obra@@Base>
   1337c:	mov	r0, #4
   13380:	bl	11efc <malloc@plt>
   13384:	str	r0, [r5, #28]
   13388:	bl	149f0 <init_token_cbra@@Base>
   1338c:	mov	r0, #4
   13390:	bl	11efc <malloc@plt>
   13394:	str	r0, [r5, #32]
   13398:	bl	14b30 <init_token_else@@Base>
   1339c:	mov	r0, #4
   133a0:	bl	11efc <malloc@plt>
   133a4:	str	r0, [r5, #36]	; 0x24
   133a8:	bl	149b0 <init_token_obra@@Base>
   133ac:	mov	r0, #4
   133b0:	bl	11efc <malloc@plt>
   133b4:	str	r0, [r5, #40]	; 0x28
   133b8:	bl	149f0 <init_token_cbra@@Base>
   133bc:	movw	r6, #53136	; 0xcf90
   133c0:	mov	r0, #11
   133c4:	movt	r6, #2
   133c8:	str	r0, [r6, #220]	; 0xdc
   133cc:	mov	r0, r4
   133d0:	str	r5, [r6, #228]	; 0xe4
   133d4:	bl	16528 <read_if_statement@@Base>
   133d8:	ldr	r1, [r6, #204]	; 0xcc
   133dc:	cmp	r1, #11
   133e0:	bne	13444 <if_else_statements@@Base+0x1a4>
   133e4:	ldrd	r2, [r7, #8]
   133e8:	adds	r2, r2, #1
   133ec:	adc	r3, r3, #0
   133f0:	cmp	r0, #0
   133f4:	strd	r2, [r7, #8]
   133f8:	beq	13474 <if_else_statements@@Base+0x1d4>
   133fc:	ldrd	r2, [r7, #24]
   13400:	adds	r2, r2, #1
   13404:	adc	r3, r3, #0
   13408:	strd	r2, [r7, #24]
   1340c:	ldr	r0, [r0]
   13410:	cmp	r0, #4
   13414:	bne	134a4 <if_else_statements@@Base+0x204>
   13418:	ldrd	r0, [r7, #40]	; 0x28
   1341c:	ldrd	r2, [r7, #56]	; 0x38
   13420:	adds	r0, r0, #1
   13424:	adc	r1, r1, #0
   13428:	adds	r2, r2, #1
   1342c:	str	r2, [r7, #56]	; 0x38
   13430:	strd	r0, [r7, #40]	; 0x28
   13434:	adc	r0, r3, #0
   13438:	str	r0, [r7, #60]	; 0x3c
   1343c:	sub	sp, fp, #16
   13440:	pop	{r4, r5, r6, r7, fp, pc}
   13444:	ldrd	r0, [r7, #16]
   13448:	movw	r3, #41932	; 0xa3cc
   1344c:	mov	r2, #332	; 0x14c
   13450:	movt	r3, #1
   13454:	adds	r0, r0, #1
   13458:	adc	r1, r1, #0
   1345c:	strd	r0, [r7, #16]
   13460:	movw	r0, #41905	; 0xa3b1
   13464:	movw	r1, #41214	; 0xa0fe
   13468:	movt	r0, #1
   1346c:	movt	r1, #1
   13470:	bl	12028 <__assert_fail@plt>
   13474:	ldrd	r0, [r7, #32]
   13478:	movw	r3, #41932	; 0xa3cc
   1347c:	movw	r2, #333	; 0x14d
   13480:	movt	r3, #1
   13484:	adds	r0, r0, #1
   13488:	adc	r1, r1, #0
   1348c:	strd	r0, [r7, #32]
   13490:	movw	r0, #41875	; 0xa393
   13494:	movw	r1, #41214	; 0xa0fe
   13498:	movt	r0, #1
   1349c:	movt	r1, #1
   134a0:	bl	12028 <__assert_fail@plt>
   134a4:	ldrd	r0, [r7, #48]	; 0x30
   134a8:	movw	r3, #41932	; 0xa3cc
   134ac:	movw	r2, #334	; 0x14e
   134b0:	movt	r3, #1
   134b4:	adds	r0, r0, #1
   134b8:	adc	r1, r1, #0
   134bc:	strd	r0, [r7, #48]	; 0x30
   134c0:	movw	r0, #41887	; 0xa39f
   134c4:	movw	r1, #41214	; 0xa0fe
   134c8:	movt	r0, #1
   134cc:	movt	r1, #1
   134d0:	bl	12028 <__assert_fail@plt>

000134d4 <body_with_two_returns@@Base>:
   134d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134d8:	add	fp, sp, #24
   134dc:	sub	sp, sp, #16
   134e0:	movw	r6, #50032	; 0xc370
   134e4:	mov	r4, sp
   134e8:	movt	r6, #2
   134ec:	ldrd	r0, [r6]
   134f0:	adds	r0, r0, #1
   134f4:	adc	r1, r1, #0
   134f8:	strd	r0, [r6]
   134fc:	add	r1, sp, #4
   13500:	mov	r0, r4
   13504:	bl	15f90 <init_grammar@@Base>
   13508:	mov	r0, #32
   1350c:	bl	11efc <malloc@plt>
   13510:	mov	r5, r0
   13514:	mov	r0, #4
   13518:	bl	11efc <malloc@plt>
   1351c:	str	r0, [r5]
   13520:	bl	149b0 <init_token_obra@@Base>
   13524:	mov	r0, #4
   13528:	bl	11efc <malloc@plt>
   1352c:	str	r0, [r5, #4]
   13530:	bl	14a30 <init_token_return@@Base>
   13534:	mov	r0, #8
   13538:	mov	r8, #8
   1353c:	bl	11efc <malloc@plt>
   13540:	mov	r1, #1
   13544:	str	r0, [r5, #8]
   13548:	bl	148b0 <init_token_int_value@@Base>
   1354c:	mov	r0, #4
   13550:	bl	11efc <malloc@plt>
   13554:	str	r0, [r5, #12]
   13558:	bl	14a70 <init_token_semicolon@@Base>
   1355c:	mov	r0, #4
   13560:	bl	11efc <malloc@plt>
   13564:	str	r0, [r5, #16]
   13568:	bl	14a30 <init_token_return@@Base>
   1356c:	mov	r0, #8
   13570:	bl	11efc <malloc@plt>
   13574:	mov	r1, #1
   13578:	str	r0, [r5, #20]
   1357c:	bl	148b0 <init_token_int_value@@Base>
   13580:	mov	r0, #4
   13584:	bl	11efc <malloc@plt>
   13588:	str	r0, [r5, #24]
   1358c:	bl	14a70 <init_token_semicolon@@Base>
   13590:	mov	r0, #4
   13594:	bl	11efc <malloc@plt>
   13598:	str	r0, [r5, #28]
   1359c:	bl	149f0 <init_token_cbra@@Base>
   135a0:	movw	r7, #53136	; 0xcf90
   135a4:	mov	r0, r4
   135a8:	movt	r7, #2
   135ac:	str	r8, [r7, #220]	; 0xdc
   135b0:	str	r5, [r7, #228]	; 0xe4
   135b4:	bl	161dc <read_body@@Base>
   135b8:	ldr	r1, [r7, #204]	; 0xcc
   135bc:	cmp	r1, #8
   135c0:	bne	13660 <body_with_two_returns@@Base+0x18c>
   135c4:	ldrd	r2, [r6, #8]
   135c8:	adds	r2, r2, #1
   135cc:	adc	r3, r3, #0
   135d0:	cmp	r0, #0
   135d4:	strd	r2, [r6, #8]
   135d8:	beq	13690 <body_with_two_returns@@Base+0x1bc>
   135dc:	ldrd	r2, [r6, #24]
   135e0:	adds	r2, r2, #1
   135e4:	adc	r3, r3, #0
   135e8:	strd	r2, [r6, #24]
   135ec:	ldr	r1, [r0]
   135f0:	cmp	r1, #3
   135f4:	bne	136c0 <body_with_two_returns@@Base+0x1ec>
   135f8:	ldrd	r2, [r6, #40]	; 0x28
   135fc:	adds	r2, r2, #1
   13600:	adc	r3, r3, #0
   13604:	strd	r2, [r6, #40]	; 0x28
   13608:	ldr	r0, [r0, #4]
   1360c:	ldr	r1, [r0]
   13610:	cmp	r1, #3
   13614:	bne	136f0 <body_with_two_returns@@Base+0x21c>
   13618:	ldrd	r2, [r6, #56]	; 0x38
   1361c:	adds	r2, r2, #1
   13620:	adc	r3, r3, #0
   13624:	strd	r2, [r6, #56]	; 0x38
   13628:	ldr	r0, [r0, #4]
   1362c:	cmp	r0, #0
   13630:	bne	13720 <body_with_two_returns@@Base+0x24c>
   13634:	ldrd	r0, [r6, #72]	; 0x48
   13638:	ldrd	r2, [r6, #88]	; 0x58
   1363c:	adds	r0, r0, #1
   13640:	adc	r1, r1, #0
   13644:	adds	r2, r2, #1
   13648:	str	r2, [r6, #88]	; 0x58
   1364c:	strd	r0, [r6, #72]	; 0x48
   13650:	adc	r0, r3, #0
   13654:	str	r0, [r6, #92]	; 0x5c
   13658:	sub	sp, fp, #24
   1365c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13660:	ldrd	r0, [r6, #16]
   13664:	movw	r3, #41984	; 0xa400
   13668:	movw	r2, #371	; 0x173
   1366c:	movt	r3, #1
   13670:	adds	r0, r0, #1
   13674:	adc	r1, r1, #0
   13678:	strd	r0, [r6, #16]
   1367c:	movw	r0, #41958	; 0xa3e6
   13680:	movw	r1, #41214	; 0xa0fe
   13684:	movt	r0, #1
   13688:	movt	r1, #1
   1368c:	bl	12028 <__assert_fail@plt>
   13690:	ldrd	r0, [r6, #32]
   13694:	movw	r3, #41984	; 0xa400
   13698:	mov	r2, #372	; 0x174
   1369c:	movt	r3, #1
   136a0:	adds	r0, r0, #1
   136a4:	adc	r1, r1, #0
   136a8:	strd	r0, [r6, #32]
   136ac:	movw	r0, #41875	; 0xa393
   136b0:	movw	r1, #41214	; 0xa0fe
   136b4:	movt	r0, #1
   136b8:	movt	r1, #1
   136bc:	bl	12028 <__assert_fail@plt>
   136c0:	ldrd	r0, [r6, #48]	; 0x30
   136c4:	movw	r3, #41984	; 0xa400
   136c8:	movw	r2, #373	; 0x175
   136cc:	movt	r3, #1
   136d0:	adds	r0, r0, #1
   136d4:	adc	r1, r1, #0
   136d8:	strd	r0, [r6, #48]	; 0x30
   136dc:	movw	r0, #42013	; 0xa41d
   136e0:	movw	r1, #41214	; 0xa0fe
   136e4:	movt	r0, #1
   136e8:	movt	r1, #1
   136ec:	bl	12028 <__assert_fail@plt>
   136f0:	ldrd	r0, [r6, #64]	; 0x40
   136f4:	movw	r3, #41984	; 0xa400
   136f8:	movw	r2, #374	; 0x176
   136fc:	movt	r3, #1
   13700:	adds	r0, r0, #1
   13704:	adc	r1, r1, #0
   13708:	strd	r0, [r6, #64]	; 0x40
   1370c:	movw	r0, #42035	; 0xa433
   13710:	movw	r1, #41214	; 0xa0fe
   13714:	movt	r0, #1
   13718:	movt	r1, #1
   1371c:	bl	12028 <__assert_fail@plt>
   13720:	ldrd	r0, [r6, #80]	; 0x50
   13724:	movw	r3, #41984	; 0xa400
   13728:	movw	r2, #375	; 0x177
   1372c:	movt	r3, #1
   13730:	adds	r0, r0, #1
   13734:	adc	r1, r1, #0
   13738:	strd	r0, [r6, #80]	; 0x50
   1373c:	movw	r0, #42063	; 0xa44f
   13740:	movw	r1, #41214	; 0xa0fe
   13744:	movt	r0, #1
   13748:	movt	r1, #1
   1374c:	bl	12028 <__assert_fail@plt>

00013750 <body_with_one_return@@Base>:
   13750:	push	{r4, r5, r6, r7, fp, lr}
   13754:	add	fp, sp, #16
   13758:	sub	sp, sp, #16
   1375c:	movw	r6, #50128	; 0xc3d0
   13760:	mov	r4, sp
   13764:	movt	r6, #2
   13768:	ldrd	r0, [r6]
   1376c:	adds	r0, r0, #1
   13770:	adc	r1, r1, #0
   13774:	strd	r0, [r6]
   13778:	add	r1, sp, #4
   1377c:	mov	r0, r4
   13780:	bl	15f90 <init_grammar@@Base>
   13784:	mov	r0, #20
   13788:	bl	11efc <malloc@plt>
   1378c:	mov	r5, r0
   13790:	mov	r0, #4
   13794:	bl	11efc <malloc@plt>
   13798:	str	r0, [r5]
   1379c:	bl	149b0 <init_token_obra@@Base>
   137a0:	mov	r0, #4
   137a4:	bl	11efc <malloc@plt>
   137a8:	str	r0, [r5, #4]
   137ac:	bl	14a30 <init_token_return@@Base>
   137b0:	mov	r0, #8
   137b4:	bl	11efc <malloc@plt>
   137b8:	mov	r1, #1
   137bc:	str	r0, [r5, #8]
   137c0:	bl	148b0 <init_token_int_value@@Base>
   137c4:	mov	r0, #4
   137c8:	bl	11efc <malloc@plt>
   137cc:	str	r0, [r5, #12]
   137d0:	bl	14a70 <init_token_semicolon@@Base>
   137d4:	mov	r0, #4
   137d8:	bl	11efc <malloc@plt>
   137dc:	str	r0, [r5, #16]
   137e0:	bl	149f0 <init_token_cbra@@Base>
   137e4:	movw	r7, #53136	; 0xcf90
   137e8:	mov	r0, #5
   137ec:	movt	r7, #2
   137f0:	str	r0, [r7, #220]	; 0xdc
   137f4:	mov	r0, r4
   137f8:	str	r5, [r7, #228]	; 0xe4
   137fc:	bl	161dc <read_body@@Base>
   13800:	ldr	r1, [r7, #204]	; 0xcc
   13804:	cmp	r1, #5
   13808:	bne	13888 <body_with_one_return@@Base+0x138>
   1380c:	ldrd	r2, [r6, #8]
   13810:	adds	r2, r2, #1
   13814:	adc	r3, r3, #0
   13818:	cmp	r0, #0
   1381c:	strd	r2, [r6, #8]
   13820:	beq	138b8 <body_with_one_return@@Base+0x168>
   13824:	ldrd	r2, [r6, #24]
   13828:	adds	r2, r2, #1
   1382c:	adc	r3, r3, #0
   13830:	strd	r2, [r6, #24]
   13834:	ldr	r1, [r0]
   13838:	cmp	r1, #3
   1383c:	bne	138e8 <body_with_one_return@@Base+0x198>
   13840:	ldrd	r2, [r6, #40]	; 0x28
   13844:	adds	r2, r2, #1
   13848:	adc	r3, r3, #0
   1384c:	strd	r2, [r6, #40]	; 0x28
   13850:	ldr	r0, [r0, #4]
   13854:	cmp	r0, #0
   13858:	bne	13918 <body_with_one_return@@Base+0x1c8>
   1385c:	ldrd	r0, [r6, #56]	; 0x38
   13860:	ldrd	r2, [r6, #72]	; 0x48
   13864:	adds	r0, r0, #1
   13868:	adc	r1, r1, #0
   1386c:	adds	r2, r2, #1
   13870:	str	r2, [r6, #72]	; 0x48
   13874:	strd	r0, [r6, #56]	; 0x38
   13878:	adc	r0, r3, #0
   1387c:	str	r0, [r6, #76]	; 0x4c
   13880:	sub	sp, fp, #16
   13884:	pop	{r4, r5, r6, r7, fp, pc}
   13888:	ldrd	r0, [r6, #16]
   1388c:	movw	r3, #42087	; 0xa467
   13890:	movw	r2, #406	; 0x196
   13894:	movt	r3, #1
   13898:	adds	r0, r0, #1
   1389c:	adc	r1, r1, #0
   138a0:	strd	r0, [r6, #16]
   138a4:	movw	r0, #41389	; 0xa1ad
   138a8:	movw	r1, #41214	; 0xa0fe
   138ac:	movt	r0, #1
   138b0:	movt	r1, #1
   138b4:	bl	12028 <__assert_fail@plt>
   138b8:	ldrd	r0, [r6, #32]
   138bc:	movw	r3, #42087	; 0xa467
   138c0:	movw	r2, #407	; 0x197
   138c4:	movt	r3, #1
   138c8:	adds	r0, r0, #1
   138cc:	adc	r1, r1, #0
   138d0:	strd	r0, [r6, #32]
   138d4:	movw	r0, #41875	; 0xa393
   138d8:	movw	r1, #41214	; 0xa0fe
   138dc:	movt	r0, #1
   138e0:	movt	r1, #1
   138e4:	bl	12028 <__assert_fail@plt>
   138e8:	ldrd	r0, [r6, #48]	; 0x30
   138ec:	movw	r3, #42087	; 0xa467
   138f0:	mov	r2, #408	; 0x198
   138f4:	movt	r3, #1
   138f8:	adds	r0, r0, #1
   138fc:	adc	r1, r1, #0
   13900:	strd	r0, [r6, #48]	; 0x30
   13904:	movw	r0, #42013	; 0xa41d
   13908:	movw	r1, #41214	; 0xa0fe
   1390c:	movt	r0, #1
   13910:	movt	r1, #1
   13914:	bl	12028 <__assert_fail@plt>
   13918:	ldrd	r0, [r6, #64]	; 0x40
   1391c:	movw	r3, #42087	; 0xa467
   13920:	movw	r2, #409	; 0x199
   13924:	movt	r3, #1
   13928:	adds	r0, r0, #1
   1392c:	adc	r1, r1, #0
   13930:	strd	r0, [r6, #64]	; 0x40
   13934:	movw	r0, #42115	; 0xa483
   13938:	movw	r1, #41214	; 0xa0fe
   1393c:	movt	r0, #1
   13940:	movt	r1, #1
   13944:	bl	12028 <__assert_fail@plt>

00013948 <if_statement_inside_if_statement@@Base>:
   13948:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1394c:	add	fp, sp, #24
   13950:	sub	sp, sp, #16
   13954:	movw	r4, #50208	; 0xc420
   13958:	mov	r8, sp
   1395c:	movt	r4, #2
   13960:	ldrd	r0, [r4]
   13964:	adds	r0, r0, #1
   13968:	adc	r1, r1, #0
   1396c:	strd	r0, [r4]
   13970:	add	r1, sp, #4
   13974:	mov	r0, r8
   13978:	bl	15f90 <init_grammar@@Base>
   1397c:	mov	r0, #3
   13980:	bl	11efc <malloc@plt>
   13984:	mov	r7, r0
   13988:	mov	r0, #3
   1398c:	bl	11efc <malloc@plt>
   13990:	mov	r6, r0
   13994:	mov	r0, #0
   13998:	movw	r1, #15649	; 0x3d21
   1399c:	strb	r0, [r7, #2]
   139a0:	strb	r0, [r6, #2]
   139a4:	mov	r0, #76	; 0x4c
   139a8:	strh	r1, [r7]
   139ac:	strh	r1, [r6]
   139b0:	bl	11efc <malloc@plt>
   139b4:	mov	r5, r0
   139b8:	mov	r0, #4
   139bc:	bl	11efc <malloc@plt>
   139c0:	str	r0, [r5]
   139c4:	bl	14930 <init_token_opar@@Base>
   139c8:	mov	r0, #8
   139cc:	bl	11efc <malloc@plt>
   139d0:	mov	r1, #1
   139d4:	str	r0, [r5, #4]
   139d8:	bl	148b0 <init_token_int_value@@Base>
   139dc:	mov	r0, #8
   139e0:	bl	11efc <malloc@plt>
   139e4:	mov	r1, #1
   139e8:	str	r0, [r5, #8]
   139ec:	bl	148b0 <init_token_int_value@@Base>
   139f0:	mov	r0, #8
   139f4:	bl	11efc <malloc@plt>
   139f8:	mov	r1, r7
   139fc:	str	r0, [r5, #12]
   13a00:	bl	14b70 <init_token_boolean_op@@Base>
   13a04:	mov	r0, #8
   13a08:	bl	11efc <malloc@plt>
   13a0c:	mov	r1, #1
   13a10:	str	r0, [r5, #16]
   13a14:	bl	148b0 <init_token_int_value@@Base>
   13a18:	mov	r0, #4
   13a1c:	bl	11efc <malloc@plt>
   13a20:	str	r0, [r5, #20]
   13a24:	bl	14970 <init_token_cpar@@Base>
   13a28:	mov	r0, #4
   13a2c:	bl	11efc <malloc@plt>
   13a30:	str	r0, [r5, #24]
   13a34:	bl	149b0 <init_token_obra@@Base>
   13a38:	mov	r0, #4
   13a3c:	bl	11efc <malloc@plt>
   13a40:	str	r0, [r5, #28]
   13a44:	bl	14af0 <init_token_if@@Base>
   13a48:	mov	r0, #4
   13a4c:	bl	11efc <malloc@plt>
   13a50:	str	r0, [r5, #32]
   13a54:	bl	14930 <init_token_opar@@Base>
   13a58:	mov	r0, #8
   13a5c:	bl	11efc <malloc@plt>
   13a60:	mov	r1, #1
   13a64:	str	r0, [r5, #36]	; 0x24
   13a68:	bl	148b0 <init_token_int_value@@Base>
   13a6c:	mov	r0, #8
   13a70:	bl	11efc <malloc@plt>
   13a74:	mov	r1, #1
   13a78:	str	r0, [r5, #40]	; 0x28
   13a7c:	bl	148b0 <init_token_int_value@@Base>
   13a80:	mov	r0, #8
   13a84:	bl	11efc <malloc@plt>
   13a88:	mov	r1, r6
   13a8c:	str	r0, [r5, #44]	; 0x2c
   13a90:	bl	14b70 <init_token_boolean_op@@Base>
   13a94:	mov	r0, #8
   13a98:	bl	11efc <malloc@plt>
   13a9c:	mov	r1, #1
   13aa0:	str	r0, [r5, #48]	; 0x30
   13aa4:	bl	148b0 <init_token_int_value@@Base>
   13aa8:	mov	r0, #4
   13aac:	bl	11efc <malloc@plt>
   13ab0:	str	r0, [r5, #52]	; 0x34
   13ab4:	bl	14970 <init_token_cpar@@Base>
   13ab8:	mov	r0, #4
   13abc:	bl	11efc <malloc@plt>
   13ac0:	str	r0, [r5, #56]	; 0x38
   13ac4:	bl	149b0 <init_token_obra@@Base>
   13ac8:	mov	r0, #4
   13acc:	bl	11efc <malloc@plt>
   13ad0:	str	r0, [r5, #60]	; 0x3c
   13ad4:	bl	149f0 <init_token_cbra@@Base>
   13ad8:	mov	r0, #4
   13adc:	bl	11efc <malloc@plt>
   13ae0:	str	r0, [r5, #64]	; 0x40
   13ae4:	bl	149f0 <init_token_cbra@@Base>
   13ae8:	mov	r0, #4
   13aec:	bl	11efc <malloc@plt>
   13af0:	str	r0, [r5, #68]	; 0x44
   13af4:	bl	149f0 <init_token_cbra@@Base>
   13af8:	mov	r0, #4
   13afc:	bl	11efc <malloc@plt>
   13b00:	str	r0, [r5, #72]	; 0x48
   13b04:	bl	14ab0 <init_token_eof@@Base>
   13b08:	movw	r6, #53136	; 0xcf90
   13b0c:	mov	r0, #19
   13b10:	movt	r6, #2
   13b14:	str	r0, [r6, #220]	; 0xdc
   13b18:	mov	r0, r8
   13b1c:	str	r5, [r6, #228]	; 0xe4
   13b20:	bl	16528 <read_if_statement@@Base>
   13b24:	ldr	r1, [r6, #204]	; 0xcc
   13b28:	cmp	r1, #19
   13b2c:	bne	13b90 <if_statement_inside_if_statement@@Base+0x248>
   13b30:	ldrd	r2, [r4, #8]
   13b34:	adds	r2, r2, #1
   13b38:	adc	r3, r3, #0
   13b3c:	cmp	r0, #0
   13b40:	strd	r2, [r4, #8]
   13b44:	beq	13bc0 <if_statement_inside_if_statement@@Base+0x278>
   13b48:	ldrd	r2, [r4, #24]
   13b4c:	adds	r2, r2, #1
   13b50:	adc	r3, r3, #0
   13b54:	strd	r2, [r4, #24]
   13b58:	ldr	r0, [r0]
   13b5c:	cmp	r0, #4
   13b60:	bne	13bf0 <if_statement_inside_if_statement@@Base+0x2a8>
   13b64:	ldrd	r0, [r4, #40]	; 0x28
   13b68:	ldrd	r2, [r4, #56]	; 0x38
   13b6c:	adds	r0, r0, #1
   13b70:	adc	r1, r1, #0
   13b74:	adds	r2, r2, #1
   13b78:	str	r2, [r4, #56]	; 0x38
   13b7c:	strd	r0, [r4, #40]	; 0x28
   13b80:	adc	r0, r3, #0
   13b84:	str	r0, [r4, #60]	; 0x3c
   13b88:	sub	sp, fp, #24
   13b8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b90:	ldrd	r0, [r4, #16]
   13b94:	movw	r3, #42160	; 0xa4b0
   13b98:	mov	r2, #480	; 0x1e0
   13b9c:	movt	r3, #1
   13ba0:	adds	r0, r0, #1
   13ba4:	adc	r1, r1, #0
   13ba8:	strd	r0, [r4, #16]
   13bac:	movw	r0, #42133	; 0xa495
   13bb0:	movw	r1, #41214	; 0xa0fe
   13bb4:	movt	r0, #1
   13bb8:	movt	r1, #1
   13bbc:	bl	12028 <__assert_fail@plt>
   13bc0:	ldrd	r0, [r4, #32]
   13bc4:	movw	r3, #42160	; 0xa4b0
   13bc8:	movw	r2, #481	; 0x1e1
   13bcc:	movt	r3, #1
   13bd0:	adds	r0, r0, #1
   13bd4:	adc	r1, r1, #0
   13bd8:	strd	r0, [r4, #32]
   13bdc:	movw	r0, #41875	; 0xa393
   13be0:	movw	r1, #41214	; 0xa0fe
   13be4:	movt	r0, #1
   13be8:	movt	r1, #1
   13bec:	bl	12028 <__assert_fail@plt>
   13bf0:	ldrd	r0, [r4, #48]	; 0x30
   13bf4:	movw	r3, #42160	; 0xa4b0
   13bf8:	movw	r2, #482	; 0x1e2
   13bfc:	movt	r3, #1
   13c00:	adds	r0, r0, #1
   13c04:	adc	r1, r1, #0
   13c08:	strd	r0, [r4, #48]	; 0x30
   13c0c:	movw	r0, #41887	; 0xa39f
   13c10:	movw	r1, #41214	; 0xa0fe
   13c14:	movt	r0, #1
   13c18:	movt	r1, #1
   13c1c:	bl	12028 <__assert_fail@plt>

00013c20 <if_statement_inside_else_statement@@Base>:
   13c20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c24:	add	fp, sp, #24
   13c28:	sub	sp, sp, #16
   13c2c:	movw	r4, #50272	; 0xc460
   13c30:	mov	r8, sp
   13c34:	movt	r4, #2
   13c38:	ldrd	r0, [r4]
   13c3c:	adds	r0, r0, #1
   13c40:	adc	r1, r1, #0
   13c44:	strd	r0, [r4]
   13c48:	add	r1, sp, #4
   13c4c:	mov	r0, r8
   13c50:	bl	15f90 <init_grammar@@Base>
   13c54:	mov	r0, #3
   13c58:	bl	11efc <malloc@plt>
   13c5c:	mov	r7, r0
   13c60:	mov	r0, #3
   13c64:	bl	11efc <malloc@plt>
   13c68:	mov	r6, r0
   13c6c:	mov	r0, #0
   13c70:	movw	r1, #15649	; 0x3d21
   13c74:	strb	r0, [r7, #2]
   13c78:	strb	r0, [r6, #2]
   13c7c:	mov	r0, #84	; 0x54
   13c80:	strh	r1, [r7]
   13c84:	strh	r1, [r6]
   13c88:	bl	11efc <malloc@plt>
   13c8c:	mov	r5, r0
   13c90:	mov	r0, #4
   13c94:	bl	11efc <malloc@plt>
   13c98:	str	r0, [r5]
   13c9c:	bl	14930 <init_token_opar@@Base>
   13ca0:	mov	r0, #8
   13ca4:	bl	11efc <malloc@plt>
   13ca8:	mov	r1, #1
   13cac:	str	r0, [r5, #4]
   13cb0:	bl	148b0 <init_token_int_value@@Base>
   13cb4:	mov	r0, #8
   13cb8:	bl	11efc <malloc@plt>
   13cbc:	mov	r1, #1
   13cc0:	str	r0, [r5, #8]
   13cc4:	bl	148b0 <init_token_int_value@@Base>
   13cc8:	mov	r0, #8
   13ccc:	bl	11efc <malloc@plt>
   13cd0:	mov	r1, r7
   13cd4:	str	r0, [r5, #12]
   13cd8:	bl	14b70 <init_token_boolean_op@@Base>
   13cdc:	mov	r0, #8
   13ce0:	bl	11efc <malloc@plt>
   13ce4:	mov	r1, #1
   13ce8:	str	r0, [r5, #16]
   13cec:	bl	148b0 <init_token_int_value@@Base>
   13cf0:	mov	r0, #4
   13cf4:	bl	11efc <malloc@plt>
   13cf8:	str	r0, [r5, #20]
   13cfc:	bl	14970 <init_token_cpar@@Base>
   13d00:	mov	r0, #4
   13d04:	bl	11efc <malloc@plt>
   13d08:	str	r0, [r5, #24]
   13d0c:	bl	149b0 <init_token_obra@@Base>
   13d10:	mov	r0, #4
   13d14:	bl	11efc <malloc@plt>
   13d18:	str	r0, [r5, #28]
   13d1c:	bl	149f0 <init_token_cbra@@Base>
   13d20:	mov	r0, #4
   13d24:	bl	11efc <malloc@plt>
   13d28:	str	r0, [r5, #32]
   13d2c:	bl	14b30 <init_token_else@@Base>
   13d30:	mov	r0, #4
   13d34:	bl	11efc <malloc@plt>
   13d38:	str	r0, [r5, #36]	; 0x24
   13d3c:	bl	149b0 <init_token_obra@@Base>
   13d40:	mov	r0, #4
   13d44:	bl	11efc <malloc@plt>
   13d48:	str	r0, [r5, #40]	; 0x28
   13d4c:	bl	14af0 <init_token_if@@Base>
   13d50:	mov	r0, #4
   13d54:	bl	11efc <malloc@plt>
   13d58:	str	r0, [r5, #44]	; 0x2c
   13d5c:	bl	14930 <init_token_opar@@Base>
   13d60:	mov	r0, #8
   13d64:	bl	11efc <malloc@plt>
   13d68:	mov	r1, #1
   13d6c:	str	r0, [r5, #48]	; 0x30
   13d70:	bl	148b0 <init_token_int_value@@Base>
   13d74:	mov	r0, #8
   13d78:	bl	11efc <malloc@plt>
   13d7c:	mov	r1, #1
   13d80:	str	r0, [r5, #52]	; 0x34
   13d84:	bl	148b0 <init_token_int_value@@Base>
   13d88:	mov	r0, #8
   13d8c:	bl	11efc <malloc@plt>
   13d90:	mov	r1, r6
   13d94:	str	r0, [r5, #56]	; 0x38
   13d98:	bl	14b70 <init_token_boolean_op@@Base>
   13d9c:	mov	r0, #8
   13da0:	bl	11efc <malloc@plt>
   13da4:	mov	r1, #1
   13da8:	str	r0, [r5, #60]	; 0x3c
   13dac:	bl	148b0 <init_token_int_value@@Base>
   13db0:	mov	r0, #4
   13db4:	bl	11efc <malloc@plt>
   13db8:	str	r0, [r5, #64]	; 0x40
   13dbc:	bl	14970 <init_token_cpar@@Base>
   13dc0:	mov	r0, #4
   13dc4:	bl	11efc <malloc@plt>
   13dc8:	str	r0, [r5, #68]	; 0x44
   13dcc:	bl	149b0 <init_token_obra@@Base>
   13dd0:	mov	r0, #4
   13dd4:	bl	11efc <malloc@plt>
   13dd8:	str	r0, [r5, #72]	; 0x48
   13ddc:	bl	149f0 <init_token_cbra@@Base>
   13de0:	mov	r0, #4
   13de4:	bl	11efc <malloc@plt>
   13de8:	str	r0, [r5, #76]	; 0x4c
   13dec:	bl	149f0 <init_token_cbra@@Base>
   13df0:	mov	r0, #4
   13df4:	bl	11efc <malloc@plt>
   13df8:	str	r0, [r5, #80]	; 0x50
   13dfc:	bl	149f0 <init_token_cbra@@Base>
   13e00:	movw	r6, #53136	; 0xcf90
   13e04:	mov	r0, #21
   13e08:	movt	r6, #2
   13e0c:	str	r0, [r6, #220]	; 0xdc
   13e10:	mov	r0, r8
   13e14:	str	r5, [r6, #228]	; 0xe4
   13e18:	bl	16528 <read_if_statement@@Base>
   13e1c:	ldr	r1, [r6, #204]	; 0xcc
   13e20:	cmp	r1, #21
   13e24:	bne	13e88 <if_statement_inside_else_statement@@Base+0x268>
   13e28:	ldrd	r2, [r4, #8]
   13e2c:	adds	r2, r2, #1
   13e30:	adc	r3, r3, #0
   13e34:	cmp	r0, #0
   13e38:	strd	r2, [r4, #8]
   13e3c:	beq	13eb8 <if_statement_inside_else_statement@@Base+0x298>
   13e40:	ldrd	r2, [r4, #24]
   13e44:	adds	r2, r2, #1
   13e48:	adc	r3, r3, #0
   13e4c:	strd	r2, [r4, #24]
   13e50:	ldr	r0, [r0]
   13e54:	cmp	r0, #4
   13e58:	bne	13ee8 <if_statement_inside_else_statement@@Base+0x2c8>
   13e5c:	ldrd	r0, [r4, #40]	; 0x28
   13e60:	ldrd	r2, [r4, #56]	; 0x38
   13e64:	adds	r0, r0, #1
   13e68:	adc	r1, r1, #0
   13e6c:	adds	r2, r2, #1
   13e70:	str	r2, [r4, #56]	; 0x38
   13e74:	strd	r0, [r4, #40]	; 0x28
   13e78:	adc	r0, r3, #0
   13e7c:	str	r0, [r4, #60]	; 0x3c
   13e80:	sub	sp, fp, #24
   13e84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e88:	ldrd	r0, [r4, #16]
   13e8c:	movw	r3, #42227	; 0xa4f3
   13e90:	movw	r2, #558	; 0x22e
   13e94:	movt	r3, #1
   13e98:	adds	r0, r0, #1
   13e9c:	adc	r1, r1, #0
   13ea0:	strd	r0, [r4, #16]
   13ea4:	movw	r0, #42200	; 0xa4d8
   13ea8:	movw	r1, #41214	; 0xa0fe
   13eac:	movt	r0, #1
   13eb0:	movt	r1, #1
   13eb4:	bl	12028 <__assert_fail@plt>
   13eb8:	ldrd	r0, [r4, #32]
   13ebc:	movw	r3, #42227	; 0xa4f3
   13ec0:	movw	r2, #559	; 0x22f
   13ec4:	movt	r3, #1
   13ec8:	adds	r0, r0, #1
   13ecc:	adc	r1, r1, #0
   13ed0:	strd	r0, [r4, #32]
   13ed4:	movw	r0, #41875	; 0xa393
   13ed8:	movw	r1, #41214	; 0xa0fe
   13edc:	movt	r0, #1
   13ee0:	movt	r1, #1
   13ee4:	bl	12028 <__assert_fail@plt>
   13ee8:	ldrd	r0, [r4, #48]	; 0x30
   13eec:	movw	r3, #42227	; 0xa4f3
   13ef0:	mov	r2, #560	; 0x230
   13ef4:	movt	r3, #1
   13ef8:	adds	r0, r0, #1
   13efc:	adc	r1, r1, #0
   13f00:	strd	r0, [r4, #48]	; 0x30
   13f04:	movw	r0, #41887	; 0xa39f
   13f08:	movw	r1, #41214	; 0xa0fe
   13f0c:	movt	r0, #1
   13f10:	movt	r1, #1
   13f14:	bl	12028 <__assert_fail@plt>
   13f18:	nop	{0}
   13f1c:	nop	{0}

00013f20 <main@@Base>:
   13f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f24:	add	fp, sp, #28
   13f28:	sub	sp, sp, #4
   13f2c:	vpush	{d8-d9}
   13f30:	movw	sl, #50336	; 0xc4a0
   13f34:	add	r1, pc, #980	; 0x3d4
   13f38:	movw	r4, #49380	; 0xc0e4
   13f3c:	movt	sl, #2
   13f40:	vld1.64	{d8-d9}, [r1 :128]
   13f44:	movt	r4, #2
   13f48:	mov	r1, #0
   13f4c:	add	r0, sl, #48	; 0x30
   13f50:	vld1.64	{d16-d17}, [r0 :128]
   13f54:	vadd.i64	q8, q8, q4
   13f58:	vst1.64	{d16-d17}, [r0 :128]
   13f5c:	ldr	r0, [r4]
   13f60:	bl	11e48 <setbuf@plt>
   13f64:	ldr	r3, [r4]
   13f68:	movw	r0, #42870	; 0xa776
   13f6c:	mov	r1, #14
   13f70:	mov	r2, #1
   13f74:	movt	r0, #1
   13f78:	bl	11ecc <fwrite@plt>
   13f7c:	ldr	r3, [r4]
   13f80:	movw	r0, #42269	; 0xa51d
   13f84:	mov	r1, #14
   13f88:	mov	r2, #1
   13f8c:	movt	r0, #1
   13f90:	bl	11ecc <fwrite@plt>
   13f94:	ldr	r3, [r4]
   13f98:	movw	r0, #42284	; 0xa52c
   13f9c:	mov	r1, #15
   13fa0:	mov	r2, #1
   13fa4:	movt	r0, #1
   13fa8:	bl	11ecc <fwrite@plt>
   13fac:	mov	r0, #0
   13fb0:	bl	11e6c <fflush@plt>
   13fb4:	movw	r0, #42300	; 0xa53c
   13fb8:	movw	r1, #42318	; 0xa54e
   13fbc:	movw	r2, #42485	; 0xa5f5
   13fc0:	movt	r0, #1
   13fc4:	movt	r1, #1
   13fc8:	movt	r2, #1
   13fcc:	bl	11e60 <printf@plt>
   13fd0:	mov	r0, #32
   13fd4:	mov	r8, sl
   13fd8:	movw	r5, #53136	; 0xcf90
   13fdc:	mov	r7, sl
   13fe0:	mov	r1, #0
   13fe4:	mov	r2, #236	; 0xec
   13fe8:	vld1.64	{d16-d17}, [r8 :128], r0
   13fec:	movt	r5, #2
   13ff0:	vld1.64	{d18-d19}, [r8 :128]
   13ff4:	mov	r0, r5
   13ff8:	vadd.i64	q8, q8, q4
   13ffc:	vadd.i64	q9, q9, q4
   14000:	vst1.64	{d18-d19}, [r8 :128]
   14004:	vst1.64	{d16-d17}, [r7 :128]!
   14008:	bl	11f8c <memset@plt>
   1400c:	vld1.64	{d16-d17}, [r7 :128]
   14010:	movw	r4, #52712	; 0xcde8
   14014:	mov	r9, #50	; 0x32
   14018:	mov	r1, #0
   1401c:	mov	r2, #424	; 0x1a8
   14020:	movt	r4, #2
   14024:	str	r9, [r5, #208]	; 0xd0
   14028:	mov	r0, r4
   1402c:	vadd.i64	q8, q8, q4
   14030:	vst1.64	{d16-d17}, [r7 :128]
   14034:	bl	11f8c <memset@plt>
   14038:	str	r9, [r4, #412]	; 0x19c
   1403c:	bl	125d0 <no_int_as_first_stuff@@Base>
   14040:	movw	r6, #42837	; 0xa755
   14044:	movt	r6, #1
   14048:	mov	r0, r6
   1404c:	bl	11ef0 <puts@plt>
   14050:	movw	r2, #42507	; 0xa60b
   14054:	movw	r0, #42300	; 0xa53c
   14058:	movw	r1, #42318	; 0xa54e
   1405c:	movt	r2, #1
   14060:	movt	r0, #1
   14064:	movt	r1, #1
   14068:	bl	11e60 <printf@plt>
   1406c:	vld1.64	{d16-d17}, [r8 :128]
   14070:	vld1.64	{d18-d19}, [sl :128]
   14074:	mov	r0, r5
   14078:	mov	r1, #0
   1407c:	mov	r2, #236	; 0xec
   14080:	vadd.i64	q8, q8, q4
   14084:	vadd.i64	q9, q9, q4
   14088:	vst1.64	{d16-d17}, [r8 :128]
   1408c:	vst1.64	{d18-d19}, [sl :128]
   14090:	bl	11f8c <memset@plt>
   14094:	vld1.64	{d16-d17}, [r7 :128]
   14098:	mov	r0, r4
   1409c:	mov	r1, #0
   140a0:	mov	r2, #424	; 0x1a8
   140a4:	str	r9, [r5, #208]	; 0xd0
   140a8:	vadd.i64	q8, q8, q4
   140ac:	vst1.64	{d16-d17}, [r7 :128]
   140b0:	bl	11f8c <memset@plt>
   140b4:	str	r9, [r4, #412]	; 0x19c
   140b8:	bl	126d8 <int_but_not_followed_by_function@@Base>
   140bc:	mov	r0, r6
   140c0:	bl	11ef0 <puts@plt>
   140c4:	movw	r2, #42644	; 0xa694
   140c8:	movw	r0, #42300	; 0xa53c
   140cc:	movw	r1, #42318	; 0xa54e
   140d0:	movt	r2, #1
   140d4:	movt	r0, #1
   140d8:	movt	r1, #1
   140dc:	bl	11e60 <printf@plt>
   140e0:	vld1.64	{d16-d17}, [r8 :128]
   140e4:	vld1.64	{d18-d19}, [sl :128]
   140e8:	mov	r0, r5
   140ec:	mov	r1, #0
   140f0:	mov	r2, #236	; 0xec
   140f4:	vadd.i64	q8, q8, q4
   140f8:	vadd.i64	q9, q9, q4
   140fc:	vst1.64	{d16-d17}, [r8 :128]
   14100:	vst1.64	{d18-d19}, [sl :128]
   14104:	bl	11f8c <memset@plt>
   14108:	vld1.64	{d16-d17}, [r7 :128]
   1410c:	mov	r0, r4
   14110:	mov	r1, #0
   14114:	mov	r2, #424	; 0x1a8
   14118:	str	r9, [r5, #208]	; 0xd0
   1411c:	vadd.i64	q8, q8, q4
   14120:	vst1.64	{d16-d17}, [r7 :128]
   14124:	bl	11f8c <memset@plt>
   14128:	str	r9, [r4, #412]	; 0x19c
   1412c:	bl	12e58 <boolean_unary_operator_is_read_properly@@Base>
   14130:	mov	r0, r6
   14134:	bl	11ef0 <puts@plt>
   14138:	movw	r2, #42603	; 0xa66b
   1413c:	movw	r0, #42300	; 0xa53c
   14140:	movw	r1, #42318	; 0xa54e
   14144:	movt	r2, #1
   14148:	movt	r0, #1
   1414c:	movt	r1, #1
   14150:	bl	11e60 <printf@plt>
   14154:	vld1.64	{d16-d17}, [r8 :128]
   14158:	vld1.64	{d18-d19}, [sl :128]
   1415c:	mov	r0, r5
   14160:	mov	r1, #0
   14164:	mov	r2, #236	; 0xec
   14168:	vadd.i64	q8, q8, q4
   1416c:	vadd.i64	q9, q9, q4
   14170:	vst1.64	{d16-d17}, [r8 :128]
   14174:	vst1.64	{d18-d19}, [sl :128]
   14178:	bl	11f8c <memset@plt>
   1417c:	vld1.64	{d16-d17}, [r7 :128]
   14180:	mov	r0, r4
   14184:	mov	r1, #0
   14188:	mov	r2, #424	; 0x1a8
   1418c:	str	r9, [r5, #208]	; 0xd0
   14190:	vadd.i64	q8, q8, q4
   14194:	vst1.64	{d16-d17}, [r7 :128]
   14198:	bl	11f8c <memset@plt>
   1419c:	str	r9, [r4, #412]	; 0x19c
   141a0:	bl	12c04 <boolean_binary_operator_is_read_properly@@Base>
   141a4:	mov	r0, r6
   141a8:	bl	11ef0 <puts@plt>
   141ac:	movw	r2, #42540	; 0xa62c
   141b0:	movw	r0, #42300	; 0xa53c
   141b4:	movw	r1, #42318	; 0xa54e
   141b8:	movt	r2, #1
   141bc:	movt	r0, #1
   141c0:	movt	r1, #1
   141c4:	bl	11e60 <printf@plt>
   141c8:	vld1.64	{d16-d17}, [r8 :128]
   141cc:	vld1.64	{d18-d19}, [sl :128]
   141d0:	mov	r0, r5
   141d4:	mov	r1, #0
   141d8:	mov	r2, #236	; 0xec
   141dc:	vadd.i64	q8, q8, q4
   141e0:	vadd.i64	q9, q9, q4
   141e4:	vst1.64	{d16-d17}, [r8 :128]
   141e8:	vst1.64	{d18-d19}, [sl :128]
   141ec:	bl	11f8c <memset@plt>
   141f0:	vld1.64	{d16-d17}, [r7 :128]
   141f4:	mov	r0, r4
   141f8:	mov	r1, #0
   141fc:	mov	r2, #424	; 0x1a8
   14200:	str	r9, [r5, #208]	; 0xd0
   14204:	vadd.i64	q8, q8, q4
   14208:	vst1.64	{d16-d17}, [r7 :128]
   1420c:	bl	11f8c <memset@plt>
   14210:	str	r9, [r4, #412]	; 0x19c
   14214:	bl	12804 <boolean_expression_is_read_properly@@Base>
   14218:	mov	r0, r6
   1421c:	bl	11ef0 <puts@plt>
   14220:	movw	r2, #42576	; 0xa650
   14224:	movw	r0, #42300	; 0xa53c
   14228:	movw	r1, #42318	; 0xa54e
   1422c:	movt	r2, #1
   14230:	movt	r0, #1
   14234:	movt	r1, #1
   14238:	bl	11e60 <printf@plt>
   1423c:	vld1.64	{d16-d17}, [r8 :128]
   14240:	vld1.64	{d18-d19}, [sl :128]
   14244:	mov	r0, r5
   14248:	mov	r1, #0
   1424c:	mov	r2, #236	; 0xec
   14250:	vadd.i64	q8, q8, q4
   14254:	vadd.i64	q9, q9, q4
   14258:	vst1.64	{d16-d17}, [r8 :128]
   1425c:	vst1.64	{d18-d19}, [sl :128]
   14260:	bl	11f8c <memset@plt>
   14264:	vld1.64	{d16-d17}, [r7 :128]
   14268:	mov	r0, r4
   1426c:	mov	r1, #0
   14270:	mov	r2, #424	; 0x1a8
   14274:	str	r9, [r5, #208]	; 0xd0
   14278:	vadd.i64	q8, q8, q4
   1427c:	vst1.64	{d16-d17}, [r7 :128]
   14280:	bl	11f8c <memset@plt>
   14284:	str	r9, [r4, #412]	; 0x19c
   14288:	bl	129e4 <boolean_expression_complex@@Base>
   1428c:	mov	r0, r6
   14290:	bl	11ef0 <puts@plt>
   14294:	movw	r2, #42684	; 0xa6bc
   14298:	movw	r0, #42300	; 0xa53c
   1429c:	movw	r1, #42318	; 0xa54e
   142a0:	movt	r2, #1
   142a4:	movt	r0, #1
   142a8:	movt	r1, #1
   142ac:	bl	11e60 <printf@plt>
   142b0:	vld1.64	{d16-d17}, [r8 :128]
   142b4:	vld1.64	{d18-d19}, [sl :128]
   142b8:	mov	r0, r5
   142bc:	mov	r1, #0
   142c0:	mov	r2, #236	; 0xec
   142c4:	vadd.i64	q8, q8, q4
   142c8:	vadd.i64	q9, q9, q4
   142cc:	vst1.64	{d16-d17}, [r8 :128]
   142d0:	vst1.64	{d18-d19}, [sl :128]
   142d4:	bl	11f8c <memset@plt>
   142d8:	vld1.64	{d16-d17}, [r7 :128]
   142dc:	mov	r0, r4
   142e0:	mov	r1, #0
   142e4:	mov	r2, #424	; 0x1a8
   142e8:	str	r9, [r5, #208]	; 0xd0
   142ec:	vadd.i64	q8, q8, q4
   142f0:	vst1.64	{d16-d17}, [r7 :128]
   142f4:	bl	11f8c <memset@plt>
   142f8:	str	r9, [r4, #412]	; 0x19c
   142fc:	bl	1308c <if_statement_only@@Base>
   14300:	mov	r0, r6
   14304:	bl	11ef0 <puts@plt>
   14308:	movw	r2, #42702	; 0xa6ce
   1430c:	b	14320 <main@@Base+0x400>
   14310:	andeq	r0, r0, r1
   14314:	andeq	r0, r0, r0
   14318:	andeq	r0, r0, r1
   1431c:	andeq	r0, r0, r0
   14320:	movw	r0, #42300	; 0xa53c
   14324:	movw	r1, #42318	; 0xa54e
   14328:	movt	r2, #1
   1432c:	movt	r0, #1
   14330:	movt	r1, #1
   14334:	bl	11e60 <printf@plt>
   14338:	vld1.64	{d16-d17}, [r8 :128]
   1433c:	b	14340 <main@@Base+0x420>
   14340:	vld1.64	{d18-d19}, [sl :128]
   14344:	mov	r0, r5
   14348:	mov	r1, #0
   1434c:	mov	r2, #236	; 0xec
   14350:	vadd.i64	q8, q8, q4
   14354:	vadd.i64	q9, q9, q4
   14358:	vst1.64	{d16-d17}, [r8 :128]
   1435c:	vst1.64	{d18-d19}, [sl :128]
   14360:	bl	11f8c <memset@plt>
   14364:	vld1.64	{d16-d17}, [r7 :128]
   14368:	mov	r0, r4
   1436c:	mov	r1, #0
   14370:	mov	r2, #424	; 0x1a8
   14374:	str	r9, [r5, #208]	; 0xd0
   14378:	vadd.i64	q8, q8, q4
   1437c:	vst1.64	{d16-d17}, [r7 :128]
   14380:	bl	11f8c <memset@plt>
   14384:	str	r9, [r4, #412]	; 0x19c
   14388:	bl	132a0 <if_else_statements@@Base>
   1438c:	mov	r0, r6
   14390:	bl	11ef0 <puts@plt>
   14394:	movw	r2, #42764	; 0xa70c
   14398:	movw	r0, #42300	; 0xa53c
   1439c:	movw	r1, #42318	; 0xa54e
   143a0:	movt	r2, #1
   143a4:	movt	r0, #1
   143a8:	movt	r1, #1
   143ac:	bl	11e60 <printf@plt>
   143b0:	vld1.64	{d16-d17}, [r8 :128]
   143b4:	vld1.64	{d18-d19}, [sl :128]
   143b8:	mov	r0, r5
   143bc:	mov	r1, #0
   143c0:	mov	r2, #236	; 0xec
   143c4:	vadd.i64	q8, q8, q4
   143c8:	vadd.i64	q9, q9, q4
   143cc:	vst1.64	{d16-d17}, [r8 :128]
   143d0:	vst1.64	{d18-d19}, [sl :128]
   143d4:	bl	11f8c <memset@plt>
   143d8:	vld1.64	{d16-d17}, [r7 :128]
   143dc:	mov	r0, r4
   143e0:	mov	r1, #0
   143e4:	mov	r2, #424	; 0x1a8
   143e8:	str	r9, [r5, #208]	; 0xd0
   143ec:	vadd.i64	q8, q8, q4
   143f0:	vst1.64	{d16-d17}, [r7 :128]
   143f4:	bl	11f8c <memset@plt>
   143f8:	str	r9, [r4, #412]	; 0x19c
   143fc:	bl	13948 <if_statement_inside_if_statement@@Base>
   14400:	mov	r0, r6
   14404:	bl	11ef0 <puts@plt>
   14408:	movw	r2, #42797	; 0xa72d
   1440c:	movw	r0, #42300	; 0xa53c
   14410:	movw	r1, #42318	; 0xa54e
   14414:	movt	r2, #1
   14418:	movt	r0, #1
   1441c:	movt	r1, #1
   14420:	bl	11e60 <printf@plt>
   14424:	vld1.64	{d16-d17}, [r8 :128]
   14428:	vld1.64	{d18-d19}, [sl :128]
   1442c:	mov	r0, r5
   14430:	mov	r1, #0
   14434:	mov	r2, #236	; 0xec
   14438:	vadd.i64	q8, q8, q4
   1443c:	vadd.i64	q9, q9, q4
   14440:	vst1.64	{d16-d17}, [r8 :128]
   14444:	vst1.64	{d18-d19}, [sl :128]
   14448:	bl	11f8c <memset@plt>
   1444c:	vld1.64	{d16-d17}, [r7 :128]
   14450:	mov	r0, r4
   14454:	mov	r1, #0
   14458:	mov	r2, #424	; 0x1a8
   1445c:	str	r9, [r5, #208]	; 0xd0
   14460:	vadd.i64	q8, q8, q4
   14464:	vst1.64	{d16-d17}, [r7 :128]
   14468:	bl	11f8c <memset@plt>
   1446c:	str	r9, [r4, #412]	; 0x19c
   14470:	bl	13c20 <if_statement_inside_else_statement@@Base>
   14474:	mov	r0, r6
   14478:	bl	11ef0 <puts@plt>
   1447c:	movw	r2, #42743	; 0xa6f7
   14480:	movw	r0, #42300	; 0xa53c
   14484:	movw	r1, #42318	; 0xa54e
   14488:	movt	r2, #1
   1448c:	movt	r0, #1
   14490:	movt	r1, #1
   14494:	bl	11e60 <printf@plt>
   14498:	vld1.64	{d16-d17}, [r8 :128]
   1449c:	vld1.64	{d18-d19}, [sl :128]
   144a0:	mov	r0, r5
   144a4:	mov	r1, #0
   144a8:	mov	r2, #236	; 0xec
   144ac:	vadd.i64	q8, q8, q4
   144b0:	vadd.i64	q9, q9, q4
   144b4:	vst1.64	{d16-d17}, [r8 :128]
   144b8:	vst1.64	{d18-d19}, [sl :128]
   144bc:	bl	11f8c <memset@plt>
   144c0:	vld1.64	{d16-d17}, [r7 :128]
   144c4:	mov	r0, r4
   144c8:	mov	r1, #0
   144cc:	mov	r2, #424	; 0x1a8
   144d0:	str	r9, [r5, #208]	; 0xd0
   144d4:	vadd.i64	q8, q8, q4
   144d8:	vst1.64	{d16-d17}, [r7 :128]
   144dc:	bl	11f8c <memset@plt>
   144e0:	str	r9, [r4, #412]	; 0x19c
   144e4:	bl	13750 <body_with_one_return@@Base>
   144e8:	mov	r0, r6
   144ec:	bl	11ef0 <puts@plt>
   144f0:	movw	r2, #42721	; 0xa6e1
   144f4:	movw	r0, #42300	; 0xa53c
   144f8:	movw	r1, #42318	; 0xa54e
   144fc:	movt	r2, #1
   14500:	movt	r0, #1
   14504:	movt	r1, #1
   14508:	bl	11e60 <printf@plt>
   1450c:	vld1.64	{d16-d17}, [r8 :128]
   14510:	mov	r0, r5
   14514:	mov	r1, #0
   14518:	mov	r2, #236	; 0xec
   1451c:	vadd.i64	q8, q8, q4
   14520:	vst1.64	{d16-d17}, [r8 :128]
   14524:	vld1.64	{d16-d17}, [sl :128]
   14528:	vadd.i64	q8, q8, q4
   1452c:	vst1.64	{d16-d17}, [sl :128]
   14530:	bl	11f8c <memset@plt>
   14534:	vld1.64	{d16-d17}, [r7 :128]
   14538:	mov	r0, r4
   1453c:	mov	r1, #0
   14540:	mov	r2, #424	; 0x1a8
   14544:	str	r9, [r5, #208]	; 0xd0
   14548:	vadd.i64	q8, q8, q4
   1454c:	vst1.64	{d16-d17}, [r7 :128]
   14550:	bl	11f8c <memset@plt>
   14554:	str	r9, [r4, #412]	; 0x19c
   14558:	bl	134d4 <body_with_two_returns@@Base>
   1455c:	mov	r0, r6
   14560:	bl	11ef0 <puts@plt>
   14564:	movw	r0, #42846	; 0xa75e
   14568:	movt	r0, #1
   1456c:	bl	11ef0 <puts@plt>
   14570:	movw	r0, #42861	; 0xa76d
   14574:	movt	r0, #1
   14578:	bl	11ef0 <puts@plt>
   1457c:	movw	r0, #42870	; 0xa776
   14580:	movt	r0, #1
   14584:	bl	11ef0 <puts@plt>
   14588:	mov	r0, #0
   1458c:	vpop	{d8-d9}
   14590:	add	sp, sp, #4
   14594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14598:	push	{r4, r5, r6, lr}
   1459c:	sub	sp, sp, #8
   145a0:	movw	r0, #42330	; 0xa55a
   145a4:	movw	r1, #42432	; 0xa5c0
   145a8:	movw	r2, #18153	; 0x46e9
   145ac:	movt	r0, #1
   145b0:	movt	r1, #1
   145b4:	movt	r2, #26806	; 0x68b6
   145b8:	bl	17098 <read_boolean_unary_expression@@Base+0x54c>
   145bc:	movw	r0, #43264	; 0xa900
   145c0:	movw	r6, #42896	; 0xa790
   145c4:	mov	r5, #0
   145c8:	movt	r0, #1
   145cc:	movt	r6, #1
   145d0:	add	r4, r0, #4
   145d4:	mov	r3, r6
   145d8:	ldr	r0, [r3, r5]!
   145dc:	ldr	r1, [r3, #16]
   145e0:	str	r1, [sp]
   145e4:	ldmib	r3, {r1, r2}
   145e8:	ldrb	r3, [r3, #12]
   145ec:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   145f0:	ldrd	r0, [r4, #-4]
   145f4:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   145f8:	add	r5, r5, #20
   145fc:	add	r4, r4, #8
   14600:	cmp	r5, #360	; 0x168
   14604:	bne	145d4 <main@@Base+0x6b4>
   14608:	bl	187f4 <read_boolean_unary_expression@@Base+0x1ca8>
   1460c:	add	sp, sp, #8
   14610:	pop	{r4, r5, r6, lr}
   14614:	b	19560 <read_boolean_unary_expression@@Base+0x2a14>
   14618:	push	{fp, lr}
   1461c:	bl	14598 <main@@Base+0x678>
   14620:	movw	r0, #49392	; 0xc0f0
   14624:	mov	r1, #0
   14628:	mov	r2, #152	; 0x98
   1462c:	movt	r0, #2
   14630:	bl	11f8c <memset@plt>
   14634:	movw	r1, #49552	; 0xc190
   14638:	movw	lr, #50336	; 0xc4a0
   1463c:	vmov.i32	q8, #0	; 0x00000000
   14640:	movw	r3, #50448	; 0xc510
   14644:	mov	ip, #64	; 0x40
   14648:	movt	r1, #2
   1464c:	movt	lr, #2
   14650:	movt	r3, #2
   14654:	add	r0, r1, #16
   14658:	add	r2, lr, #64	; 0x40
   1465c:	vst1.64	{d16-d17}, [r0 :128]
   14660:	add	r0, r1, #32
   14664:	vst1.64	{d16-d17}, [r2 :128]
   14668:	add	r2, lr, #32
   1466c:	vst1.64	{d16-d17}, [r0 :128]
   14670:	add	r0, r1, #48	; 0x30
   14674:	vst1.64	{d16-d17}, [r2 :128]
   14678:	add	r2, lr, #16
   1467c:	vst1.64	{d16-d17}, [r0 :128]
   14680:	add	r0, r1, #64	; 0x40
   14684:	vst1.64	{d16-d17}, [r2 :128]
   14688:	add	r2, lr, #96	; 0x60
   1468c:	vst1.64	{d16-d17}, [r0 :128]
   14690:	movw	r0, #49648	; 0xc1f0
   14694:	vst1.64	{d16-d17}, [r2 :128]
   14698:	add	r2, r3, #16
   1469c:	movt	r0, #2
   146a0:	vst1.64	{d16-d17}, [r2 :128]
   146a4:	add	r2, r3, #32
   146a8:	vst1.64	{d16-d17}, [r2 :128]
   146ac:	add	r2, r0, #16
   146b0:	vst1.64	{d16-d17}, [r2 :128]
   146b4:	add	r2, r0, #32
   146b8:	vst1.64	{d16-d17}, [r2 :128]
   146bc:	mov	r2, #80	; 0x50
   146c0:	vst1.64	{d16-d17}, [r1 :128], r2
   146c4:	vst1.64	{d16-d17}, [r1 :128]
   146c8:	mov	r1, lr
   146cc:	vst1.64	{d16-d17}, [r1 :128], r2
   146d0:	vst1.64	{d16-d17}, [r1 :128]
   146d4:	mov	r1, #48	; 0x30
   146d8:	vst1.64	{d16-d17}, [r0 :128], r1
   146dc:	vst1.64	{d16-d17}, [r0 :128]
   146e0:	mov	r0, r3
   146e4:	vst1.64	{d16-d17}, [r0 :128], ip
   146e8:	vst1.64	{d16-d17}, [r0 :128]
   146ec:	add	r0, r3, #80	; 0x50
   146f0:	vst1.64	{d16-d17}, [r0 :128]
   146f4:	add	r0, r3, #48	; 0x30
   146f8:	vst1.64	{d16-d17}, [r0 :128]
   146fc:	movw	r0, #49712	; 0xc230
   14700:	movt	r0, #2
   14704:	add	r3, r0, #64	; 0x40
   14708:	vst1.64	{d16-d17}, [r3 :128]
   1470c:	add	r3, r0, #48	; 0x30
   14710:	vst1.64	{d16-d17}, [r3 :128]
   14714:	add	r3, r0, #32
   14718:	vst1.64	{d16-d17}, [r3 :128]
   1471c:	add	r3, r0, #16
   14720:	vst1.64	{d16-d17}, [r0 :128], r2
   14724:	vst1.64	{d16-d17}, [r0 :128]
   14728:	movw	r0, #49808	; 0xc290
   1472c:	vst1.64	{d16-d17}, [r3 :128]
   14730:	movt	r0, #2
   14734:	mov	r3, r0
   14738:	vst1.64	{d16-d17}, [r3 :128], r2
   1473c:	vst1.64	{d16-d17}, [r3 :128]
   14740:	add	r3, r0, #16
   14744:	vst1.64	{d16-d17}, [r3 :128]
   14748:	add	r3, r0, #32
   1474c:	vst1.64	{d16-d17}, [r3 :128]
   14750:	add	r3, r0, #48	; 0x30
   14754:	add	r0, r0, #64	; 0x40
   14758:	vst1.64	{d16-d17}, [r0 :128]
   1475c:	movw	r0, #49904	; 0xc2f0
   14760:	vst1.64	{d16-d17}, [r3 :128]
   14764:	movt	r0, #2
   14768:	add	r3, r0, #16
   1476c:	vst1.64	{d16-d17}, [r3 :128]
   14770:	add	r3, r0, #32
   14774:	vst1.64	{d16-d17}, [r0 :128], r1
   14778:	vst1.64	{d16-d17}, [r0 :128]
   1477c:	movw	r0, #49968	; 0xc330
   14780:	vst1.64	{d16-d17}, [r3 :128]
   14784:	movt	r0, #2
   14788:	mov	r3, r0
   1478c:	vst1.64	{d16-d17}, [r3 :128], r1
   14790:	vst1.64	{d16-d17}, [r3 :128]
   14794:	add	r3, r0, #32
   14798:	add	r0, r0, #16
   1479c:	vst1.64	{d16-d17}, [r0 :128]
   147a0:	movw	r0, #50032	; 0xc370
   147a4:	vst1.64	{d16-d17}, [r3 :128]
   147a8:	movt	r0, #2
   147ac:	add	r3, r0, #16
   147b0:	vst1.64	{d16-d17}, [r3 :128]
   147b4:	add	r3, r0, #32
   147b8:	vst1.64	{d16-d17}, [r3 :128]
   147bc:	add	r3, r0, #48	; 0x30
   147c0:	vst1.64	{d16-d17}, [r3 :128]
   147c4:	add	r3, r0, #64	; 0x40
   147c8:	vst1.64	{d16-d17}, [r0 :128], r2
   147cc:	vst1.64	{d16-d17}, [r0 :128]
   147d0:	movw	r0, #50128	; 0xc3d0
   147d4:	vst1.64	{d16-d17}, [r3 :128]
   147d8:	movt	r0, #2
   147dc:	mov	r2, r0
   147e0:	vst1.64	{d16-d17}, [r2 :128], ip
   147e4:	vst1.64	{d16-d17}, [r2 :128]
   147e8:	add	r2, r0, #16
   147ec:	vst1.64	{d16-d17}, [r2 :128]
   147f0:	add	r2, r0, #32
   147f4:	add	r0, r0, #48	; 0x30
   147f8:	vst1.64	{d16-d17}, [r0 :128]
   147fc:	movw	r0, #50208	; 0xc420
   14800:	vst1.64	{d16-d17}, [r2 :128]
   14804:	movt	r0, #2
   14808:	add	r2, r0, #16
   1480c:	vst1.64	{d16-d17}, [r2 :128]
   14810:	add	r2, r0, #32
   14814:	vst1.64	{d16-d17}, [r0 :128], r1
   14818:	vst1.64	{d16-d17}, [r0 :128]
   1481c:	movw	r0, #50272	; 0xc460
   14820:	vst1.64	{d16-d17}, [r2 :128]
   14824:	movt	r0, #2
   14828:	mov	r2, r0
   1482c:	vst1.64	{d16-d17}, [r2 :128], r1
   14830:	add	r1, r0, #16
   14834:	add	r0, r0, #32
   14838:	vst1.64	{d16-d17}, [r0 :128]
   1483c:	add	r0, lr, #48	; 0x30
   14840:	vst1.64	{d16-d17}, [r2 :128]
   14844:	vst1.64	{d16-d17}, [r1 :128]
   14848:	vst1.64	{d16-d17}, [r0 :128]
   1484c:	pop	{fp, pc}
   14850:	movw	r0, #17816	; 0x4598
   14854:	movw	r1, #17944	; 0x4618
   14858:	movt	r0, #1
   1485c:	movt	r1, #1
   14860:	b	19a14 <__gcov_flush@@Base+0xb8>
	...

00014870 <init_token_int_type@@Base>:
   14870:	movw	r1, #50544	; 0xc570
   14874:	add	r2, pc, #36	; 0x24
   14878:	movt	r1, #2
   1487c:	vld1.64	{d16-d17}, [r2 :128]
   14880:	vld1.64	{d18-d19}, [r1 :128]
   14884:	vadd.i64	q8, q9, q8
   14888:	vst1.64	{d16-d17}, [r1 :128]
   1488c:	mov	r1, #0
   14890:	str	r1, [r0]
   14894:	bx	lr
   14898:	nop	{0}
   1489c:	nop	{0}
   148a0:	andeq	r0, r0, r1
   148a4:	andeq	r0, r0, r0
   148a8:	andeq	r0, r0, r1
   148ac:	andeq	r0, r0, r0

000148b0 <init_token_int_value@@Base>:
   148b0:	movw	r2, #50544	; 0xc570
   148b4:	add	r3, pc, #36	; 0x24
   148b8:	movt	r2, #2
   148bc:	vld1.64	{d16-d17}, [r3 :128]
   148c0:	add	r2, r2, #16
   148c4:	vld1.64	{d18-d19}, [r2 :128]
   148c8:	vadd.i64	q8, q9, q8
   148cc:	vst1.64	{d16-d17}, [r2 :128]
   148d0:	mov	r2, #1
   148d4:	str	r2, [r0]
   148d8:	str	r1, [r0, #4]
   148dc:	bx	lr
   148e0:	andeq	r0, r0, r1
   148e4:	andeq	r0, r0, r0
   148e8:	andeq	r0, r0, r1
   148ec:	andeq	r0, r0, r0

000148f0 <init_token_function@@Base>:
   148f0:	movw	r2, #50544	; 0xc570
   148f4:	add	r3, pc, #36	; 0x24
   148f8:	movt	r2, #2
   148fc:	vld1.64	{d16-d17}, [r3 :128]
   14900:	add	r2, r2, #32
   14904:	vld1.64	{d18-d19}, [r2 :128]
   14908:	vadd.i64	q8, q9, q8
   1490c:	vst1.64	{d16-d17}, [r2 :128]
   14910:	mov	r2, #2
   14914:	str	r2, [r0]
   14918:	str	r1, [r0, #4]
   1491c:	bx	lr
   14920:	andeq	r0, r0, r1
   14924:	andeq	r0, r0, r0
   14928:	andeq	r0, r0, r1
   1492c:	andeq	r0, r0, r0

00014930 <init_token_opar@@Base>:
   14930:	movw	r1, #50544	; 0xc570
   14934:	add	r2, pc, #36	; 0x24
   14938:	movt	r1, #2
   1493c:	vld1.64	{d16-d17}, [r2 :128]
   14940:	add	r1, r1, #48	; 0x30
   14944:	vld1.64	{d18-d19}, [r1 :128]
   14948:	vadd.i64	q8, q9, q8
   1494c:	vst1.64	{d16-d17}, [r1 :128]
   14950:	mov	r1, #3
   14954:	str	r1, [r0]
   14958:	bx	lr
   1495c:	nop	{0}
   14960:	andeq	r0, r0, r1
   14964:	andeq	r0, r0, r0
   14968:	andeq	r0, r0, r1
   1496c:	andeq	r0, r0, r0

00014970 <init_token_cpar@@Base>:
   14970:	movw	r1, #50544	; 0xc570
   14974:	add	r2, pc, #36	; 0x24
   14978:	movt	r1, #2
   1497c:	vld1.64	{d16-d17}, [r2 :128]
   14980:	add	r1, r1, #64	; 0x40
   14984:	vld1.64	{d18-d19}, [r1 :128]
   14988:	vadd.i64	q8, q9, q8
   1498c:	vst1.64	{d16-d17}, [r1 :128]
   14990:	mov	r1, #4
   14994:	str	r1, [r0]
   14998:	bx	lr
   1499c:	nop	{0}
   149a0:	andeq	r0, r0, r1
   149a4:	andeq	r0, r0, r0
   149a8:	andeq	r0, r0, r1
   149ac:	andeq	r0, r0, r0

000149b0 <init_token_obra@@Base>:
   149b0:	movw	r1, #50544	; 0xc570
   149b4:	add	r2, pc, #36	; 0x24
   149b8:	movt	r1, #2
   149bc:	vld1.64	{d16-d17}, [r2 :128]
   149c0:	add	r1, r1, #80	; 0x50
   149c4:	vld1.64	{d18-d19}, [r1 :128]
   149c8:	vadd.i64	q8, q9, q8
   149cc:	vst1.64	{d16-d17}, [r1 :128]
   149d0:	mov	r1, #5
   149d4:	str	r1, [r0]
   149d8:	bx	lr
   149dc:	nop	{0}
   149e0:	andeq	r0, r0, r1
   149e4:	andeq	r0, r0, r0
   149e8:	andeq	r0, r0, r1
   149ec:	andeq	r0, r0, r0

000149f0 <init_token_cbra@@Base>:
   149f0:	movw	r1, #50544	; 0xc570
   149f4:	add	r2, pc, #36	; 0x24
   149f8:	movt	r1, #2
   149fc:	vld1.64	{d16-d17}, [r2 :128]
   14a00:	add	r1, r1, #96	; 0x60
   14a04:	vld1.64	{d18-d19}, [r1 :128]
   14a08:	vadd.i64	q8, q9, q8
   14a0c:	vst1.64	{d16-d17}, [r1 :128]
   14a10:	mov	r1, #6
   14a14:	str	r1, [r0]
   14a18:	bx	lr
   14a1c:	nop	{0}
   14a20:	andeq	r0, r0, r1
   14a24:	andeq	r0, r0, r0
   14a28:	andeq	r0, r0, r1
   14a2c:	andeq	r0, r0, r0

00014a30 <init_token_return@@Base>:
   14a30:	movw	r1, #50656	; 0xc5e0
   14a34:	add	r2, pc, #36	; 0x24
   14a38:	movt	r1, #2
   14a3c:	vld1.64	{d16-d17}, [r2 :128]
   14a40:	vld1.64	{d18-d19}, [r1 :128]
   14a44:	vadd.i64	q8, q9, q8
   14a48:	vst1.64	{d16-d17}, [r1 :128]
   14a4c:	mov	r1, #7
   14a50:	str	r1, [r0]
   14a54:	bx	lr
   14a58:	nop	{0}
   14a5c:	nop	{0}
   14a60:	andeq	r0, r0, r1
   14a64:	andeq	r0, r0, r0
   14a68:	andeq	r0, r0, r1
   14a6c:	andeq	r0, r0, r0

00014a70 <init_token_semicolon@@Base>:
   14a70:	movw	r1, #50656	; 0xc5e0
   14a74:	add	r2, pc, #36	; 0x24
   14a78:	movt	r1, #2
   14a7c:	vld1.64	{d16-d17}, [r2 :128]
   14a80:	add	r1, r1, #16
   14a84:	vld1.64	{d18-d19}, [r1 :128]
   14a88:	vadd.i64	q8, q9, q8
   14a8c:	vst1.64	{d16-d17}, [r1 :128]
   14a90:	mov	r1, #8
   14a94:	str	r1, [r0]
   14a98:	bx	lr
   14a9c:	nop	{0}
   14aa0:	andeq	r0, r0, r1
   14aa4:	andeq	r0, r0, r0
   14aa8:	andeq	r0, r0, r1
   14aac:	andeq	r0, r0, r0

00014ab0 <init_token_eof@@Base>:
   14ab0:	movw	r1, #50656	; 0xc5e0
   14ab4:	add	r2, pc, #36	; 0x24
   14ab8:	movt	r1, #2
   14abc:	vld1.64	{d16-d17}, [r2 :128]
   14ac0:	add	r1, r1, #32
   14ac4:	vld1.64	{d18-d19}, [r1 :128]
   14ac8:	vadd.i64	q8, q9, q8
   14acc:	vst1.64	{d16-d17}, [r1 :128]
   14ad0:	mov	r1, #9
   14ad4:	str	r1, [r0]
   14ad8:	bx	lr
   14adc:	nop	{0}
   14ae0:	andeq	r0, r0, r1
   14ae4:	andeq	r0, r0, r0
   14ae8:	andeq	r0, r0, r1
   14aec:	andeq	r0, r0, r0

00014af0 <init_token_if@@Base>:
   14af0:	movw	r1, #50656	; 0xc5e0
   14af4:	add	r2, pc, #36	; 0x24
   14af8:	movt	r1, #2
   14afc:	vld1.64	{d16-d17}, [r2 :128]
   14b00:	add	r1, r1, #48	; 0x30
   14b04:	vld1.64	{d18-d19}, [r1 :128]
   14b08:	vadd.i64	q8, q9, q8
   14b0c:	vst1.64	{d16-d17}, [r1 :128]
   14b10:	mov	r1, #10
   14b14:	str	r1, [r0]
   14b18:	bx	lr
   14b1c:	nop	{0}
   14b20:	andeq	r0, r0, r1
   14b24:	andeq	r0, r0, r0
   14b28:	andeq	r0, r0, r1
   14b2c:	andeq	r0, r0, r0

00014b30 <init_token_else@@Base>:
   14b30:	movw	r1, #50656	; 0xc5e0
   14b34:	add	r2, pc, #36	; 0x24
   14b38:	movt	r1, #2
   14b3c:	vld1.64	{d16-d17}, [r2 :128]
   14b40:	add	r1, r1, #64	; 0x40
   14b44:	vld1.64	{d18-d19}, [r1 :128]
   14b48:	vadd.i64	q8, q9, q8
   14b4c:	vst1.64	{d16-d17}, [r1 :128]
   14b50:	mov	r1, #11
   14b54:	str	r1, [r0]
   14b58:	bx	lr
   14b5c:	nop	{0}
   14b60:	andeq	r0, r0, r1
   14b64:	andeq	r0, r0, r0
   14b68:	andeq	r0, r0, r1
   14b6c:	andeq	r0, r0, r0

00014b70 <init_token_boolean_op@@Base>:
   14b70:	movw	r2, #50656	; 0xc5e0
   14b74:	add	r3, pc, #36	; 0x24
   14b78:	movt	r2, #2
   14b7c:	vld1.64	{d16-d17}, [r3 :128]
   14b80:	add	r2, r2, #80	; 0x50
   14b84:	vld1.64	{d18-d19}, [r2 :128]
   14b88:	vadd.i64	q8, q9, q8
   14b8c:	vst1.64	{d16-d17}, [r2 :128]
   14b90:	mov	r2, #12
   14b94:	str	r2, [r0]
   14b98:	str	r1, [r0, #4]
   14b9c:	bx	lr
   14ba0:	andeq	r0, r0, r1
   14ba4:	andeq	r0, r0, r0
   14ba8:	andeq	r0, r0, r1
   14bac:	andeq	r0, r0, r0

00014bb0 <free_token_int_type@@Base>:
   14bb0:	movw	r1, #50656	; 0xc5e0
   14bb4:	add	r2, pc, #36	; 0x24
   14bb8:	movt	r1, #2
   14bbc:	vld1.64	{d16-d17}, [r2 :128]
   14bc0:	add	r1, r1, #96	; 0x60
   14bc4:	vld1.64	{d18-d19}, [r1 :128]
   14bc8:	vadd.i64	q8, q9, q8
   14bcc:	vst1.64	{d16-d17}, [r1 :128]
   14bd0:	b	11e78 <free@plt>
   14bd4:	nop	{0}
   14bd8:	nop	{0}
   14bdc:	nop	{0}
   14be0:	andeq	r0, r0, r1
   14be4:	andeq	r0, r0, r0
   14be8:	andeq	r0, r0, r1
   14bec:	andeq	r0, r0, r0

00014bf0 <free_token_int_value@@Base>:
   14bf0:	movw	r1, #50768	; 0xc650
   14bf4:	add	r2, pc, #20
   14bf8:	movt	r1, #2
   14bfc:	vld1.64	{d16-d17}, [r2 :128]
   14c00:	vld1.64	{d18-d19}, [r1 :128]
   14c04:	vadd.i64	q8, q9, q8
   14c08:	vst1.64	{d16-d17}, [r1 :128]
   14c0c:	b	11e78 <free@plt>
   14c10:	andeq	r0, r0, r1
   14c14:	andeq	r0, r0, r0
   14c18:	andeq	r0, r0, r1
   14c1c:	andeq	r0, r0, r0

00014c20 <free_token_function@@Base>:
   14c20:	movw	r1, #50768	; 0xc650
   14c24:	add	r2, pc, #36	; 0x24
   14c28:	movt	r1, #2
   14c2c:	vld1.64	{d16-d17}, [r2 :128]
   14c30:	add	r1, r1, #16
   14c34:	vld1.64	{d18-d19}, [r1 :128]
   14c38:	vadd.i64	q8, q9, q8
   14c3c:	vst1.64	{d16-d17}, [r1 :128]
   14c40:	b	11e78 <free@plt>
   14c44:	nop	{0}
   14c48:	nop	{0}
   14c4c:	nop	{0}
   14c50:	andeq	r0, r0, r1
   14c54:	andeq	r0, r0, r0
   14c58:	andeq	r0, r0, r1
   14c5c:	andeq	r0, r0, r0

00014c60 <free_token_opar@@Base>:
   14c60:	movw	r1, #50768	; 0xc650
   14c64:	add	r2, pc, #36	; 0x24
   14c68:	movt	r1, #2
   14c6c:	vld1.64	{d16-d17}, [r2 :128]
   14c70:	add	r1, r1, #32
   14c74:	vld1.64	{d18-d19}, [r1 :128]
   14c78:	vadd.i64	q8, q9, q8
   14c7c:	vst1.64	{d16-d17}, [r1 :128]
   14c80:	b	11e78 <free@plt>
   14c84:	nop	{0}
   14c88:	nop	{0}
   14c8c:	nop	{0}
   14c90:	andeq	r0, r0, r1
   14c94:	andeq	r0, r0, r0
   14c98:	andeq	r0, r0, r1
   14c9c:	andeq	r0, r0, r0

00014ca0 <free_token_cpar@@Base>:
   14ca0:	movw	r1, #50768	; 0xc650
   14ca4:	add	r2, pc, #36	; 0x24
   14ca8:	movt	r1, #2
   14cac:	vld1.64	{d16-d17}, [r2 :128]
   14cb0:	add	r1, r1, #48	; 0x30
   14cb4:	vld1.64	{d18-d19}, [r1 :128]
   14cb8:	vadd.i64	q8, q9, q8
   14cbc:	vst1.64	{d16-d17}, [r1 :128]
   14cc0:	b	11e78 <free@plt>
   14cc4:	nop	{0}
   14cc8:	nop	{0}
   14ccc:	nop	{0}
   14cd0:	andeq	r0, r0, r1
   14cd4:	andeq	r0, r0, r0
   14cd8:	andeq	r0, r0, r1
   14cdc:	andeq	r0, r0, r0

00014ce0 <free_token_obra@@Base>:
   14ce0:	movw	r1, #50768	; 0xc650
   14ce4:	add	r2, pc, #36	; 0x24
   14ce8:	movt	r1, #2
   14cec:	vld1.64	{d16-d17}, [r2 :128]
   14cf0:	add	r1, r1, #64	; 0x40
   14cf4:	vld1.64	{d18-d19}, [r1 :128]
   14cf8:	vadd.i64	q8, q9, q8
   14cfc:	vst1.64	{d16-d17}, [r1 :128]
   14d00:	b	11e78 <free@plt>
   14d04:	nop	{0}
   14d08:	nop	{0}
   14d0c:	nop	{0}
   14d10:	andeq	r0, r0, r1
   14d14:	andeq	r0, r0, r0
   14d18:	andeq	r0, r0, r1
   14d1c:	andeq	r0, r0, r0

00014d20 <free_token_cbra@@Base>:
   14d20:	movw	r1, #50768	; 0xc650
   14d24:	add	r2, pc, #36	; 0x24
   14d28:	movt	r1, #2
   14d2c:	vld1.64	{d16-d17}, [r2 :128]
   14d30:	add	r1, r1, #80	; 0x50
   14d34:	vld1.64	{d18-d19}, [r1 :128]
   14d38:	vadd.i64	q8, q9, q8
   14d3c:	vst1.64	{d16-d17}, [r1 :128]
   14d40:	b	11e78 <free@plt>
   14d44:	nop	{0}
   14d48:	nop	{0}
   14d4c:	nop	{0}
   14d50:	andeq	r0, r0, r1
   14d54:	andeq	r0, r0, r0
   14d58:	andeq	r0, r0, r1
   14d5c:	andeq	r0, r0, r0

00014d60 <free_token_return@@Base>:
   14d60:	movw	r1, #50768	; 0xc650
   14d64:	add	r2, pc, #36	; 0x24
   14d68:	movt	r1, #2
   14d6c:	vld1.64	{d16-d17}, [r2 :128]
   14d70:	add	r1, r1, #96	; 0x60
   14d74:	vld1.64	{d18-d19}, [r1 :128]
   14d78:	vadd.i64	q8, q9, q8
   14d7c:	vst1.64	{d16-d17}, [r1 :128]
   14d80:	b	11e78 <free@plt>
   14d84:	nop	{0}
   14d88:	nop	{0}
   14d8c:	nop	{0}
   14d90:	andeq	r0, r0, r1
   14d94:	andeq	r0, r0, r0
   14d98:	andeq	r0, r0, r1
   14d9c:	andeq	r0, r0, r0

00014da0 <free_token_semicolon@@Base>:
   14da0:	movw	r1, #50880	; 0xc6c0
   14da4:	add	r2, pc, #20
   14da8:	movt	r1, #2
   14dac:	vld1.64	{d16-d17}, [r2 :128]
   14db0:	vld1.64	{d18-d19}, [r1 :128]
   14db4:	vadd.i64	q8, q9, q8
   14db8:	vst1.64	{d16-d17}, [r1 :128]
   14dbc:	b	11e78 <free@plt>
   14dc0:	andeq	r0, r0, r1
   14dc4:	andeq	r0, r0, r0
   14dc8:	andeq	r0, r0, r1
   14dcc:	andeq	r0, r0, r0

00014dd0 <free_token_eof@@Base>:
   14dd0:	movw	r1, #50880	; 0xc6c0
   14dd4:	add	r2, pc, #36	; 0x24
   14dd8:	movt	r1, #2
   14ddc:	vld1.64	{d16-d17}, [r2 :128]
   14de0:	add	r1, r1, #16
   14de4:	vld1.64	{d18-d19}, [r1 :128]
   14de8:	vadd.i64	q8, q9, q8
   14dec:	vst1.64	{d16-d17}, [r1 :128]
   14df0:	b	11e78 <free@plt>
   14df4:	nop	{0}
   14df8:	nop	{0}
   14dfc:	nop	{0}
   14e00:	andeq	r0, r0, r1
   14e04:	andeq	r0, r0, r0
   14e08:	andeq	r0, r0, r1
   14e0c:	andeq	r0, r0, r0

00014e10 <free_token_if@@Base>:
   14e10:	movw	r1, #50880	; 0xc6c0
   14e14:	add	r2, pc, #36	; 0x24
   14e18:	movt	r1, #2
   14e1c:	vld1.64	{d16-d17}, [r2 :128]
   14e20:	add	r1, r1, #32
   14e24:	vld1.64	{d18-d19}, [r1 :128]
   14e28:	vadd.i64	q8, q9, q8
   14e2c:	vst1.64	{d16-d17}, [r1 :128]
   14e30:	b	11e78 <free@plt>
   14e34:	nop	{0}
   14e38:	nop	{0}
   14e3c:	nop	{0}
   14e40:	andeq	r0, r0, r1
   14e44:	andeq	r0, r0, r0
   14e48:	andeq	r0, r0, r1
   14e4c:	andeq	r0, r0, r0

00014e50 <free_token_else@@Base>:
   14e50:	movw	r1, #50880	; 0xc6c0
   14e54:	add	r2, pc, #36	; 0x24
   14e58:	movt	r1, #2
   14e5c:	vld1.64	{d16-d17}, [r2 :128]
   14e60:	add	r1, r1, #48	; 0x30
   14e64:	vld1.64	{d18-d19}, [r1 :128]
   14e68:	vadd.i64	q8, q9, q8
   14e6c:	vst1.64	{d16-d17}, [r1 :128]
   14e70:	b	11e78 <free@plt>
   14e74:	nop	{0}
   14e78:	nop	{0}
   14e7c:	nop	{0}
   14e80:	andeq	r0, r0, r1
   14e84:	andeq	r0, r0, r0
   14e88:	andeq	r0, r0, r1
   14e8c:	andeq	r0, r0, r0

00014e90 <free_token_boolean_op@@Base>:
   14e90:	push	{r4, r5, fp, lr}
   14e94:	add	fp, sp, #8
   14e98:	movw	r5, #50880	; 0xc6c0
   14e9c:	mov	r4, r0
   14ea0:	movt	r5, #2
   14ea4:	ldrd	r0, [r5, #64]	; 0x40
   14ea8:	adds	r0, r0, #1
   14eac:	adc	r1, r1, #0
   14eb0:	strd	r0, [r5, #64]	; 0x40
   14eb4:	ldr	r0, [r4, #4]
   14eb8:	cmp	r0, #0
   14ebc:	beq	14edc <free_token_boolean_op@@Base+0x4c>
   14ec0:	ldrd	r2, [r5, #72]	; 0x48
   14ec4:	adds	r2, r2, #1
   14ec8:	adc	r3, r3, #0
   14ecc:	strd	r2, [r5, #72]	; 0x48
   14ed0:	bl	11e78 <free@plt>
   14ed4:	add	r0, r5, #88	; 0x58
   14ed8:	b	14ee0 <free_token_boolean_op@@Base+0x50>
   14edc:	add	r0, r5, #80	; 0x50
   14ee0:	ldrd	r2, [r0]
   14ee4:	adds	r2, r2, #1
   14ee8:	adc	r3, r3, #0
   14eec:	strd	r2, [r0]
   14ef0:	ldrd	r0, [r5, #96]	; 0x60
   14ef4:	adds	r0, r0, #1
   14ef8:	adc	r1, r1, #0
   14efc:	strd	r0, [r5, #96]	; 0x60
   14f00:	mov	r0, r4
   14f04:	pop	{r4, r5, fp, lr}
   14f08:	b	11e78 <free@plt>
   14f0c:	push	{r4, r5, r6, lr}
   14f10:	sub	sp, sp, #8
   14f14:	movw	r0, #43408	; 0xa990
   14f18:	movw	r1, #42432	; 0xa5c0
   14f1c:	movw	r2, #23366	; 0x5b46
   14f20:	movt	r0, #1
   14f24:	movt	r1, #1
   14f28:	movt	r2, #47030	; 0xb7b6
   14f2c:	bl	17098 <read_boolean_unary_expression@@Base+0x54c>
   14f30:	movw	r0, #44496	; 0xadd0
   14f34:	movw	r6, #43968	; 0xabc0
   14f38:	mov	r5, #0
   14f3c:	movt	r0, #1
   14f40:	movt	r6, #1
   14f44:	add	r4, r0, #4
   14f48:	mov	r3, r6
   14f4c:	ldr	r0, [r3, r5]!
   14f50:	ldr	r1, [r3, #16]
   14f54:	str	r1, [sp]
   14f58:	ldmib	r3, {r1, r2}
   14f5c:	ldrb	r3, [r3, #12]
   14f60:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   14f64:	ldrd	r0, [r4, #-4]
   14f68:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   14f6c:	add	r5, r5, #20
   14f70:	add	r4, r4, #8
   14f74:	cmp	r5, #520	; 0x208
   14f78:	bne	14f48 <free_token_boolean_op@@Base+0xb8>
   14f7c:	bl	187f4 <read_boolean_unary_expression@@Base+0x1ca8>
   14f80:	add	sp, sp, #8
   14f84:	pop	{r4, r5, r6, lr}
   14f88:	b	19560 <read_boolean_unary_expression@@Base+0x2a14>
   14f8c:	push	{fp, lr}
   14f90:	bl	14f0c <free_token_boolean_op@@Base+0x7c>
   14f94:	movw	r0, #50544	; 0xc570
   14f98:	vmov.i32	q8, #0	; 0x00000000
   14f9c:	movt	r0, #2
   14fa0:	add	r1, r0, #80	; 0x50
   14fa4:	vst1.64	{d16-d17}, [r1 :128]
   14fa8:	add	r1, r0, #64	; 0x40
   14fac:	vst1.64	{d16-d17}, [r1 :128]
   14fb0:	add	r1, r0, #48	; 0x30
   14fb4:	vst1.64	{d16-d17}, [r1 :128]
   14fb8:	add	r1, r0, #32
   14fbc:	vst1.64	{d16-d17}, [r1 :128]
   14fc0:	add	r1, r0, #16
   14fc4:	vst1.64	{d16-d17}, [r1 :128]
   14fc8:	movw	r1, #50656	; 0xc5e0
   14fcc:	movt	r1, #2
   14fd0:	add	r2, r1, #80	; 0x50
   14fd4:	vst1.64	{d16-d17}, [r2 :128]
   14fd8:	add	r2, r1, #64	; 0x40
   14fdc:	vst1.64	{d16-d17}, [r2 :128]
   14fe0:	add	r2, r1, #48	; 0x30
   14fe4:	vst1.64	{d16-d17}, [r2 :128]
   14fe8:	add	r2, r1, #32
   14fec:	vst1.64	{d16-d17}, [r2 :128]
   14ff0:	add	r2, r1, #16
   14ff4:	vst1.64	{d16-d17}, [r2 :128]
   14ff8:	movw	r2, #50768	; 0xc650
   14ffc:	movt	r2, #2
   15000:	add	r3, r2, #80	; 0x50
   15004:	vst1.64	{d16-d17}, [r3 :128]
   15008:	add	r3, r2, #64	; 0x40
   1500c:	vst1.64	{d16-d17}, [r3 :128]
   15010:	add	r3, r2, #48	; 0x30
   15014:	vst1.64	{d16-d17}, [r3 :128]
   15018:	add	r3, r2, #32
   1501c:	vst1.64	{d16-d17}, [r3 :128]
   15020:	add	r3, r2, #16
   15024:	vst1.64	{d16-d17}, [r3 :128]
   15028:	mov	r3, #96	; 0x60
   1502c:	vst1.64	{d16-d17}, [r0 :128], r3
   15030:	vst1.64	{d16-d17}, [r1 :128], r3
   15034:	vst1.64	{d16-d17}, [r2 :128], r3
   15038:	vst1.64	{d16-d17}, [r0 :128]
   1503c:	movw	r0, #50880	; 0xc6c0
   15040:	vst1.64	{d16-d17}, [r1 :128]
   15044:	vst1.64	{d16-d17}, [r2 :128]
   15048:	movt	r0, #2
   1504c:	add	r1, r0, #48	; 0x30
   15050:	mov	r2, r0
   15054:	vst1.64	{d16-d17}, [r1 :128]
   15058:	add	r1, r0, #32
   1505c:	vst1.64	{d16-d17}, [r1 :128]
   15060:	add	r1, r0, #16
   15064:	vst1.64	{d16-d17}, [r1 :128]
   15068:	mov	r1, #80	; 0x50
   1506c:	vst1.64	{d16-d17}, [r2 :128], r1
   15070:	add	r1, r0, #64	; 0x40
   15074:	vst1.64	{d16-d17}, [r1 :128]
   15078:	mov	r1, #0
   1507c:	vst1.64	{d16-d17}, [r2 :128]
   15080:	str	r1, [r0, #96]	; 0x60
   15084:	str	r1, [r0, #100]	; 0x64
   15088:	pop	{fp, pc}
   1508c:	movw	r0, #20236	; 0x4f0c
   15090:	movw	r1, #20364	; 0x4f8c
   15094:	movt	r0, #1
   15098:	movt	r1, #1
   1509c:	b	19a14 <__gcov_flush@@Base+0xb8>

000150a0 <init_ast_base@@Base>:
   150a0:	movw	ip, #51360	; 0xc8a0
   150a4:	add	r3, pc, #36	; 0x24
   150a8:	movt	ip, #2
   150ac:	vld1.64	{d16-d17}, [r3 :128]
   150b0:	vld1.64	{d18-d19}, [ip :128]
   150b4:	vadd.i64	q8, q9, q8
   150b8:	vst1.64	{d16-d17}, [ip :128]
   150bc:	stm	r0, {r1, r2}
   150c0:	bx	lr
   150c4:	nop	{0}
   150c8:	nop	{0}
   150cc:	nop	{0}
   150d0:	andeq	r0, r0, r1
   150d4:	andeq	r0, r0, r0
   150d8:	andeq	r0, r0, r1
   150dc:	andeq	r0, r0, r0

000150e0 <init_ast_base_single@@Base>:
   150e0:	movw	r2, #51360	; 0xc8a0
   150e4:	add	r3, pc, #52	; 0x34
   150e8:	movt	r2, #2
   150ec:	vld1.64	{d16-d17}, [r3 :128]
   150f0:	vld1.64	{d18-d19}, [r2 :128]
   150f4:	vadd.i64	q9, q9, q8
   150f8:	vst1.64	{d18-d19}, [r2 :128]!
   150fc:	vld1.64	{d18-d19}, [r2 :128]
   15100:	vadd.i64	q8, q9, q8
   15104:	vst1.64	{d16-d17}, [r2 :128]
   15108:	mov	r2, #0
   1510c:	stm	r0, {r1, r2}
   15110:	bx	lr
   15114:	nop	{0}
   15118:	nop	{0}
   1511c:	nop	{0}
   15120:	andeq	r0, r0, r1
   15124:	andeq	r0, r0, r0
   15128:	andeq	r0, r0, r1
   1512c:	andeq	r0, r0, r0

00015130 <init_node_id@@Base>:
   15130:	push	{fp, lr}
   15134:	mov	fp, sp
   15138:	movw	r3, #51360	; 0xc8a0
   1513c:	mov	ip, #32
   15140:	movt	r3, #2
   15144:	mov	lr, r3
   15148:	vld1.64	{d16-d17}, [lr :128], ip
   1514c:	add	r2, pc, #60	; 0x3c
   15150:	vld1.64	{d18-d19}, [r2 :128]
   15154:	vld1.64	{d20-d21}, [lr :128]
   15158:	mov	r2, #0
   1515c:	vadd.i64	q10, q10, q9
   15160:	vadd.i64	q8, q8, q9
   15164:	vst1.64	{d20-d21}, [lr :128]
   15168:	vst1.64	{d16-d17}, [r3 :128]!
   1516c:	vld1.64	{d16-d17}, [r3 :128]
   15170:	vadd.i64	q8, q8, q9
   15174:	vst1.64	{d16-d17}, [r3 :128]
   15178:	str	r2, [r0]
   1517c:	str	r2, [r0, #4]
   15180:	str	r1, [r0, #8]
   15184:	pop	{fp, pc}
   15188:	nop	{0}
   1518c:	nop	{0}
   15190:	andeq	r0, r0, r1
   15194:	andeq	r0, r0, r0
   15198:	andeq	r0, r0, r1
   1519c:	andeq	r0, r0, r0

000151a0 <init_node_int@@Base>:
   151a0:	push	{fp, lr}
   151a4:	mov	fp, sp
   151a8:	movw	r3, #51360	; 0xc8a0
   151ac:	mov	ip, #48	; 0x30
   151b0:	movt	r3, #2
   151b4:	mov	lr, r3
   151b8:	vld1.64	{d16-d17}, [lr :128], ip
   151bc:	add	r2, pc, #60	; 0x3c
   151c0:	vld1.64	{d18-d19}, [r2 :128]
   151c4:	vld1.64	{d20-d21}, [lr :128]
   151c8:	mov	r2, #0
   151cc:	vadd.i64	q10, q10, q9
   151d0:	vadd.i64	q8, q8, q9
   151d4:	vst1.64	{d20-d21}, [lr :128]
   151d8:	vst1.64	{d16-d17}, [r3 :128]!
   151dc:	vld1.64	{d16-d17}, [r3 :128]
   151e0:	vadd.i64	q8, q8, q9
   151e4:	vst1.64	{d16-d17}, [r3 :128]
   151e8:	mov	r3, #1
   151ec:	str	r3, [r0]
   151f0:	str	r2, [r0, #4]
   151f4:	str	r1, [r0, #8]
   151f8:	pop	{fp, pc}
   151fc:	nop	{0}
   15200:	andeq	r0, r0, r1
   15204:	andeq	r0, r0, r0
   15208:	andeq	r0, r0, r1
   1520c:	andeq	r0, r0, r0

00015210 <init_node_function@@Base>:
   15210:	push	{r4, sl, fp, lr}
   15214:	add	fp, sp, #8
   15218:	movw	r4, #51360	; 0xc8a0
   1521c:	mov	ip, #64	; 0x40
   15220:	movt	r4, #2
   15224:	mov	lr, r4
   15228:	vld1.64	{d16-d17}, [lr :128], ip
   1522c:	add	r3, pc, #60	; 0x3c
   15230:	vld1.64	{d18-d19}, [r3 :128]
   15234:	vld1.64	{d20-d21}, [lr :128]
   15238:	mov	r3, #0
   1523c:	vadd.i64	q10, q10, q9
   15240:	vadd.i64	q8, q8, q9
   15244:	vst1.64	{d20-d21}, [lr :128]
   15248:	vst1.64	{d16-d17}, [r4 :128]!
   1524c:	vld1.64	{d16-d17}, [r4 :128]
   15250:	vadd.i64	q8, q8, q9
   15254:	vst1.64	{d16-d17}, [r4 :128]
   15258:	mov	r4, #2
   1525c:	str	r4, [r0]
   15260:	str	r3, [r0, #4]
   15264:	str	r1, [r0, #8]
   15268:	str	r2, [r0, #12]
   1526c:	pop	{r4, sl, fp, pc}
   15270:	andeq	r0, r0, r1
   15274:	andeq	r0, r0, r0
   15278:	andeq	r0, r0, r1
   1527c:	andeq	r0, r0, r0

00015280 <init_node_return@@Base>:
   15280:	push	{fp, lr}
   15284:	mov	fp, sp
   15288:	movw	r3, #51360	; 0xc8a0
   1528c:	mov	ip, #80	; 0x50
   15290:	movt	r3, #2
   15294:	mov	lr, r3
   15298:	vld1.64	{d16-d17}, [lr :128], ip
   1529c:	add	r2, pc, #60	; 0x3c
   152a0:	vld1.64	{d18-d19}, [r2 :128]
   152a4:	vld1.64	{d20-d21}, [lr :128]
   152a8:	mov	r2, #0
   152ac:	vadd.i64	q10, q10, q9
   152b0:	vadd.i64	q8, q8, q9
   152b4:	vst1.64	{d20-d21}, [lr :128]
   152b8:	vst1.64	{d16-d17}, [r3 :128]!
   152bc:	vld1.64	{d16-d17}, [r3 :128]
   152c0:	vadd.i64	q8, q8, q9
   152c4:	vst1.64	{d16-d17}, [r3 :128]
   152c8:	mov	r3, #3
   152cc:	str	r3, [r0]
   152d0:	str	r2, [r0, #4]
   152d4:	str	r1, [r0, #8]
   152d8:	pop	{fp, pc}
   152dc:	nop	{0}
   152e0:	andeq	r0, r0, r1
   152e4:	andeq	r0, r0, r0
   152e8:	andeq	r0, r0, r1
   152ec:	andeq	r0, r0, r0

000152f0 <init_node_if@@Base>:
   152f0:	push	{r4, r5, fp, lr}
   152f4:	add	fp, sp, #8
   152f8:	movw	lr, #51360	; 0xc8a0
   152fc:	mov	ip, #96	; 0x60
   15300:	movt	lr, #2
   15304:	mov	r5, lr
   15308:	vld1.64	{d16-d17}, [r5 :128], ip
   1530c:	add	r4, pc, #60	; 0x3c
   15310:	vld1.64	{d18-d19}, [r4 :128]
   15314:	vld1.64	{d20-d21}, [r5 :128]
   15318:	mov	r4, #4
   1531c:	vadd.i64	q10, q10, q9
   15320:	vadd.i64	q8, q8, q9
   15324:	vst1.64	{d20-d21}, [r5 :128]
   15328:	vst1.64	{d16-d17}, [lr :128]!
   1532c:	mov	r5, #0
   15330:	vld1.64	{d16-d17}, [lr :128]
   15334:	vadd.i64	q8, q8, q9
   15338:	vst1.64	{d16-d17}, [lr :128]
   1533c:	stmia	r0!, {r4, r5}
   15340:	stm	r0, {r1, r2, r3}
   15344:	pop	{r4, r5, fp, pc}
   15348:	nop	{0}
   1534c:	nop	{0}
   15350:	andeq	r0, r0, r1
   15354:	andeq	r0, r0, r0
   15358:	andeq	r0, r0, r1
   1535c:	andeq	r0, r0, r0

00015360 <init_node_boolean_operator@@Base>:
   15360:	push	{r4, sl, fp, lr}
   15364:	add	fp, sp, #8
   15368:	movw	ip, #51360	; 0xc8a0
   1536c:	movw	lr, #51472	; 0xc910
   15370:	add	r4, pc, #72	; 0x48
   15374:	movt	ip, #2
   15378:	movt	lr, #2
   1537c:	vld1.64	{d16-d17}, [r4 :128]
   15380:	mov	r4, #5
   15384:	vld1.64	{d20-d21}, [ip :128]
   15388:	vld1.64	{d18-d19}, [lr :128]
   1538c:	vadd.i64	q10, q10, q8
   15390:	vadd.i64	q9, q9, q8
   15394:	vst1.64	{d20-d21}, [ip :128]!
   15398:	vst1.64	{d18-d19}, [lr :128]
   1539c:	vld1.64	{d18-d19}, [ip :128]
   153a0:	vadd.i64	q8, q9, q8
   153a4:	vst1.64	{d16-d17}, [ip :128]
   153a8:	mov	ip, #0
   153ac:	stm	r0, {r4, ip}
   153b0:	str	r2, [r0, #8]
   153b4:	str	r3, [r0, #12]
   153b8:	str	r1, [r0, #16]
   153bc:	pop	{r4, sl, fp, pc}
   153c0:	andeq	r0, r0, r1
   153c4:	andeq	r0, r0, r0
   153c8:	andeq	r0, r0, r1
   153cc:	andeq	r0, r0, r0

000153d0 <free_node@@Base>:
   153d0:	push	{r4, r5, r6, sl, fp, lr}
   153d4:	add	fp, sp, #16
   153d8:	movw	r5, #50992	; 0xc730
   153dc:	mov	r4, r0
   153e0:	movt	r5, #2
   153e4:	ldrd	r0, [r5]
   153e8:	adds	r0, r0, #1
   153ec:	adc	r1, r1, #0
   153f0:	strd	r0, [r5]
   153f4:	ldr	r0, [r4]
   153f8:	cmp	r0, #5
   153fc:	bhi	15778 <free_node@@Base+0x3a8>
   15400:	add	r1, pc, #0
   15404:	ldr	pc, [r1, r0, lsl #2]
   15408:	andeq	r5, r1, r0, lsr #8
   1540c:	andeq	r5, r1, ip, lsl r5
   15410:	andeq	r5, r1, r8, asr #9
   15414:	andeq	r5, r1, r0, ror r5
   15418:	andeq	r5, r1, r4, ror r4
   1541c:	andeq	r5, r1, r4, asr #11
   15420:	movw	r6, #51472	; 0xc910
   15424:	ldrd	r0, [r5, #16]
   15428:	movt	r6, #2
   1542c:	ldrd	r2, [r6, #16]
   15430:	adds	r0, r0, #1
   15434:	str	r0, [r5, #16]
   15438:	adc	r0, r1, #0
   1543c:	str	r0, [r5, #20]
   15440:	adds	r2, r2, #1
   15444:	adc	r3, r3, #0
   15448:	strd	r2, [r6, #16]
   1544c:	ldr	r0, [r4, #4]
   15450:	cmp	r0, #0
   15454:	beq	1565c <free_node@@Base+0x28c>
   15458:	ldrd	r2, [r6, #24]
   1545c:	adds	r2, r2, #1
   15460:	adc	r3, r3, #0
   15464:	strd	r2, [r6, #24]
   15468:	bl	153d0 <free_node@@Base>
   1546c:	add	r0, r6, #40	; 0x28
   15470:	b	15660 <free_node@@Base+0x290>
   15474:	movw	r6, #51680	; 0xc9e0
   15478:	ldrd	r0, [r5, #48]	; 0x30
   1547c:	movt	r6, #2
   15480:	ldrd	r2, [r6]
   15484:	adds	r0, r0, #1
   15488:	str	r0, [r5, #48]	; 0x30
   1548c:	adc	r0, r1, #0
   15490:	str	r0, [r5, #52]	; 0x34
   15494:	adds	r2, r2, #1
   15498:	adc	r3, r3, #0
   1549c:	strd	r2, [r6]
   154a0:	ldr	r0, [r4, #4]
   154a4:	cmp	r0, #0
   154a8:	beq	15618 <free_node@@Base+0x248>
   154ac:	ldrd	r2, [r6, #8]
   154b0:	adds	r2, r2, #1
   154b4:	adc	r3, r3, #0
   154b8:	strd	r2, [r6, #8]
   154bc:	bl	153d0 <free_node@@Base>
   154c0:	add	r0, r6, #24
   154c4:	b	1561c <free_node@@Base+0x24c>
   154c8:	movw	r6, #51584	; 0xc980
   154cc:	ldrd	r0, [r5, #32]
   154d0:	movt	r6, #2
   154d4:	ldrd	r2, [r6]
   154d8:	adds	r0, r0, #1
   154dc:	str	r0, [r5, #32]
   154e0:	adc	r0, r1, #0
   154e4:	str	r0, [r5, #36]	; 0x24
   154e8:	adds	r2, r2, #1
   154ec:	adc	r3, r3, #0
   154f0:	strd	r2, [r6]
   154f4:	ldr	r0, [r4, #4]
   154f8:	cmp	r0, #0
   154fc:	beq	15688 <free_node@@Base+0x2b8>
   15500:	ldrd	r2, [r6, #8]
   15504:	adds	r2, r2, #1
   15508:	adc	r3, r3, #0
   1550c:	strd	r2, [r6, #8]
   15510:	bl	153d0 <free_node@@Base>
   15514:	add	r0, r6, #24
   15518:	b	1568c <free_node@@Base+0x2bc>
   1551c:	movw	r6, #51472	; 0xc910
   15520:	ldrd	r0, [r5, #24]
   15524:	movt	r6, #2
   15528:	ldrd	r2, [r6, #64]	; 0x40
   1552c:	adds	r0, r0, #1
   15530:	str	r0, [r5, #24]
   15534:	adc	r0, r1, #0
   15538:	str	r0, [r5, #28]
   1553c:	adds	r2, r2, #1
   15540:	adc	r3, r3, #0
   15544:	strd	r2, [r6, #64]	; 0x40
   15548:	ldr	r0, [r4, #4]
   1554c:	cmp	r0, #0
   15550:	beq	156bc <free_node@@Base+0x2ec>
   15554:	ldrd	r2, [r6, #72]	; 0x48
   15558:	adds	r2, r2, #1
   1555c:	adc	r3, r3, #0
   15560:	strd	r2, [r6, #72]	; 0x48
   15564:	bl	153d0 <free_node@@Base>
   15568:	add	r0, r6, #88	; 0x58
   1556c:	b	156c0 <free_node@@Base+0x2f0>
   15570:	movw	r6, #51584	; 0xc980
   15574:	ldrd	r0, [r5, #40]	; 0x28
   15578:	movt	r6, #2
   1557c:	ldrd	r2, [r6, #48]	; 0x30
   15580:	adds	r0, r0, #1
   15584:	str	r0, [r5, #40]	; 0x28
   15588:	adc	r0, r1, #0
   1558c:	str	r0, [r5, #44]	; 0x2c
   15590:	adds	r2, r2, #1
   15594:	adc	r3, r3, #0
   15598:	strd	r2, [r6, #48]	; 0x30
   1559c:	ldr	r0, [r4, #4]
   155a0:	cmp	r0, #0
   155a4:	beq	156e8 <free_node@@Base+0x318>
   155a8:	ldrd	r2, [r6, #56]	; 0x38
   155ac:	adds	r2, r2, #1
   155b0:	adc	r3, r3, #0
   155b4:	strd	r2, [r6, #56]	; 0x38
   155b8:	bl	153d0 <free_node@@Base>
   155bc:	add	r0, r6, #72	; 0x48
   155c0:	b	156ec <free_node@@Base+0x31c>
   155c4:	movw	r6, #51680	; 0xc9e0
   155c8:	ldrd	r0, [r5, #56]	; 0x38
   155cc:	movt	r6, #2
   155d0:	ldrd	r2, [r6, #48]	; 0x30
   155d4:	adds	r0, r0, #1
   155d8:	str	r0, [r5, #56]	; 0x38
   155dc:	adc	r0, r1, #0
   155e0:	str	r0, [r5, #60]	; 0x3c
   155e4:	adds	r2, r2, #1
   155e8:	adc	r3, r3, #0
   155ec:	strd	r2, [r6, #48]	; 0x30
   155f0:	ldr	r0, [r4, #4]
   155f4:	cmp	r0, #0
   155f8:	beq	15714 <free_node@@Base+0x344>
   155fc:	ldrd	r2, [r6, #56]	; 0x38
   15600:	adds	r2, r2, #1
   15604:	adc	r3, r3, #0
   15608:	strd	r2, [r6, #56]	; 0x38
   1560c:	bl	153d0 <free_node@@Base>
   15610:	add	r0, r6, #72	; 0x48
   15614:	b	15718 <free_node@@Base+0x348>
   15618:	add	r0, r6, #16
   1561c:	ldrd	r2, [r0]
   15620:	adds	r2, r2, #1
   15624:	adc	r3, r3, #0
   15628:	strd	r2, [r0]
   1562c:	ldrd	r0, [r6, #32]
   15630:	adds	r0, r0, #1
   15634:	adc	r1, r1, #0
   15638:	strd	r0, [r6, #32]
   1563c:	ldr	r0, [r4, #8]
   15640:	bl	153d0 <free_node@@Base>
   15644:	ldr	r0, [r4, #12]
   15648:	bl	153d0 <free_node@@Base>
   1564c:	ldr	r0, [r4, #16]
   15650:	bl	153d0 <free_node@@Base>
   15654:	add	r6, r5, #96	; 0x60
   15658:	b	1574c <free_node@@Base+0x37c>
   1565c:	add	r0, r6, #32
   15660:	ldrd	r2, [r0]
   15664:	adds	r2, r2, #1
   15668:	adc	r3, r3, #0
   1566c:	strd	r2, [r0]
   15670:	ldrd	r0, [r6, #48]	; 0x30
   15674:	adds	r0, r0, #1
   15678:	adc	r1, r1, #0
   1567c:	strd	r0, [r6, #48]	; 0x30
   15680:	add	r6, r5, #64	; 0x40
   15684:	b	1574c <free_node@@Base+0x37c>
   15688:	add	r0, r6, #16
   1568c:	ldrd	r2, [r0]
   15690:	adds	r2, r2, #1
   15694:	adc	r3, r3, #0
   15698:	strd	r2, [r0]
   1569c:	ldrd	r0, [r6, #32]
   156a0:	adds	r0, r0, #1
   156a4:	adc	r1, r1, #0
   156a8:	strd	r0, [r6, #32]
   156ac:	ldr	r0, [r4, #8]
   156b0:	bl	11e78 <free@plt>
   156b4:	add	r6, r5, #80	; 0x50
   156b8:	b	1574c <free_node@@Base+0x37c>
   156bc:	add	r0, r6, #80	; 0x50
   156c0:	ldrd	r2, [r0]
   156c4:	adds	r2, r2, #1
   156c8:	adc	r3, r3, #0
   156cc:	strd	r2, [r0]
   156d0:	ldrd	r0, [r6, #96]	; 0x60
   156d4:	adds	r0, r0, #1
   156d8:	adc	r1, r1, #0
   156dc:	strd	r0, [r6, #96]	; 0x60
   156e0:	add	r6, r5, #72	; 0x48
   156e4:	b	1574c <free_node@@Base+0x37c>
   156e8:	add	r0, r6, #64	; 0x40
   156ec:	ldrd	r2, [r0]
   156f0:	adds	r2, r2, #1
   156f4:	adc	r3, r3, #0
   156f8:	strd	r2, [r0]
   156fc:	ldrd	r0, [r6, #80]	; 0x50
   15700:	adds	r0, r0, #1
   15704:	adc	r1, r1, #0
   15708:	strd	r0, [r6, #80]	; 0x50
   1570c:	add	r6, r5, #88	; 0x58
   15710:	b	1574c <free_node@@Base+0x37c>
   15714:	add	r0, r6, #64	; 0x40
   15718:	ldrd	r2, [r0]
   1571c:	adds	r2, r2, #1
   15720:	adc	r3, r3, #0
   15724:	strd	r2, [r0]
   15728:	ldrd	r0, [r6, #80]	; 0x50
   1572c:	adds	r0, r0, #1
   15730:	adc	r1, r1, #0
   15734:	strd	r0, [r6, #80]	; 0x50
   15738:	ldr	r0, [r4, #8]
   1573c:	bl	153d0 <free_node@@Base>
   15740:	ldr	r0, [r4, #12]
   15744:	bl	153d0 <free_node@@Base>
   15748:	add	r6, r5, #104	; 0x68
   1574c:	mov	r0, r4
   15750:	bl	11e78 <free@plt>
   15754:	ldrd	r0, [r6]
   15758:	adds	r0, r0, #1
   1575c:	adc	r1, r1, #0
   15760:	strd	r0, [r6]
   15764:	ldrd	r0, [r5, #112]	; 0x70
   15768:	adds	r0, r0, #1
   1576c:	adc	r1, r1, #0
   15770:	strd	r0, [r5, #112]	; 0x70
   15774:	pop	{r4, r5, r6, sl, fp, pc}
   15778:	ldrd	r0, [r5, #8]
   1577c:	mov	r2, #1
   15780:	adds	r0, r0, #1
   15784:	adc	r1, r1, #0
   15788:	strd	r0, [r5, #8]
   1578c:	movw	r0, #49376	; 0xc0e0
   15790:	mov	r1, #31
   15794:	movt	r0, #2
   15798:	ldr	r3, [r0]
   1579c:	movw	r0, #44704	; 0xaea0
   157a0:	movt	r0, #1
   157a4:	bl	11ecc <fwrite@plt>
   157a8:	mov	r0, #1
   157ac:	bl	11f38 <exit@plt>

000157b0 <free_node_id@@Base>:
   157b0:	push	{r4, r5, fp, lr}
   157b4:	add	fp, sp, #8
   157b8:	movw	r5, #51472	; 0xc910
   157bc:	mov	r4, r0
   157c0:	movt	r5, #2
   157c4:	ldrd	r0, [r5, #16]
   157c8:	adds	r0, r0, #1
   157cc:	adc	r1, r1, #0
   157d0:	strd	r0, [r5, #16]
   157d4:	ldr	r0, [r4, #4]
   157d8:	cmp	r0, #0
   157dc:	beq	157fc <free_node_id@@Base+0x4c>
   157e0:	ldrd	r2, [r5, #24]
   157e4:	adds	r2, r2, #1
   157e8:	adc	r3, r3, #0
   157ec:	strd	r2, [r5, #24]
   157f0:	bl	153d0 <free_node@@Base>
   157f4:	add	r0, r5, #40	; 0x28
   157f8:	b	15800 <free_node_id@@Base+0x50>
   157fc:	add	r0, r5, #32
   15800:	ldrd	r2, [r0]
   15804:	adds	r2, r2, #1
   15808:	adc	r3, r3, #0
   1580c:	strd	r2, [r0]
   15810:	ldrd	r0, [r5, #48]	; 0x30
   15814:	adds	r0, r0, #1
   15818:	adc	r1, r1, #0
   1581c:	strd	r0, [r5, #48]	; 0x30
   15820:	mov	r0, r4
   15824:	pop	{r4, r5, fp, lr}
   15828:	b	11e78 <free@plt>

0001582c <free_node_int@@Base>:
   1582c:	push	{r4, r5, fp, lr}
   15830:	add	fp, sp, #8
   15834:	movw	r5, #51472	; 0xc910
   15838:	mov	r4, r0
   1583c:	movt	r5, #2
   15840:	ldrd	r0, [r5, #64]	; 0x40
   15844:	adds	r0, r0, #1
   15848:	adc	r1, r1, #0
   1584c:	strd	r0, [r5, #64]	; 0x40
   15850:	ldr	r0, [r4, #4]
   15854:	cmp	r0, #0
   15858:	beq	15878 <free_node_int@@Base+0x4c>
   1585c:	ldrd	r2, [r5, #72]	; 0x48
   15860:	adds	r2, r2, #1
   15864:	adc	r3, r3, #0
   15868:	strd	r2, [r5, #72]	; 0x48
   1586c:	bl	153d0 <free_node@@Base>
   15870:	add	r0, r5, #88	; 0x58
   15874:	b	1587c <free_node_int@@Base+0x50>
   15878:	add	r0, r5, #80	; 0x50
   1587c:	ldrd	r2, [r0]
   15880:	adds	r2, r2, #1
   15884:	adc	r3, r3, #0
   15888:	strd	r2, [r0]
   1588c:	ldrd	r0, [r5, #96]	; 0x60
   15890:	adds	r0, r0, #1
   15894:	adc	r1, r1, #0
   15898:	strd	r0, [r5, #96]	; 0x60
   1589c:	mov	r0, r4
   158a0:	pop	{r4, r5, fp, lr}
   158a4:	b	11e78 <free@plt>

000158a8 <free_node_function@@Base>:
   158a8:	push	{r4, r5, fp, lr}
   158ac:	add	fp, sp, #8
   158b0:	movw	r5, #51584	; 0xc980
   158b4:	mov	r4, r0
   158b8:	movt	r5, #2
   158bc:	ldrd	r0, [r5]
   158c0:	adds	r0, r0, #1
   158c4:	adc	r1, r1, #0
   158c8:	strd	r0, [r5]
   158cc:	ldr	r0, [r4, #4]
   158d0:	cmp	r0, #0
   158d4:	beq	158f4 <free_node_function@@Base+0x4c>
   158d8:	ldrd	r2, [r5, #8]
   158dc:	adds	r2, r2, #1
   158e0:	adc	r3, r3, #0
   158e4:	strd	r2, [r5, #8]
   158e8:	bl	153d0 <free_node@@Base>
   158ec:	add	r0, r5, #24
   158f0:	b	158f8 <free_node_function@@Base+0x50>
   158f4:	add	r0, r5, #16
   158f8:	ldrd	r2, [r0]
   158fc:	adds	r2, r2, #1
   15900:	adc	r3, r3, #0
   15904:	strd	r2, [r0]
   15908:	ldrd	r0, [r5, #32]
   1590c:	adds	r0, r0, #1
   15910:	adc	r1, r1, #0
   15914:	strd	r0, [r5, #32]
   15918:	ldr	r0, [r4, #8]
   1591c:	bl	11e78 <free@plt>
   15920:	mov	r0, r4
   15924:	pop	{r4, r5, fp, lr}
   15928:	b	11e78 <free@plt>

0001592c <free_node_return@@Base>:
   1592c:	push	{r4, r5, fp, lr}
   15930:	add	fp, sp, #8
   15934:	movw	r5, #51584	; 0xc980
   15938:	mov	r4, r0
   1593c:	movt	r5, #2
   15940:	ldrd	r0, [r5, #48]	; 0x30
   15944:	adds	r0, r0, #1
   15948:	adc	r1, r1, #0
   1594c:	strd	r0, [r5, #48]	; 0x30
   15950:	ldr	r0, [r4, #4]
   15954:	cmp	r0, #0
   15958:	beq	15978 <free_node_return@@Base+0x4c>
   1595c:	ldrd	r2, [r5, #56]	; 0x38
   15960:	adds	r2, r2, #1
   15964:	adc	r3, r3, #0
   15968:	strd	r2, [r5, #56]	; 0x38
   1596c:	bl	153d0 <free_node@@Base>
   15970:	add	r0, r5, #72	; 0x48
   15974:	b	1597c <free_node_return@@Base+0x50>
   15978:	add	r0, r5, #64	; 0x40
   1597c:	ldrd	r2, [r0]
   15980:	adds	r2, r2, #1
   15984:	adc	r3, r3, #0
   15988:	strd	r2, [r0]
   1598c:	ldrd	r0, [r5, #80]	; 0x50
   15990:	adds	r0, r0, #1
   15994:	adc	r1, r1, #0
   15998:	strd	r0, [r5, #80]	; 0x50
   1599c:	mov	r0, r4
   159a0:	pop	{r4, r5, fp, lr}
   159a4:	b	11e78 <free@plt>

000159a8 <free_node_if@@Base>:
   159a8:	push	{r4, r5, fp, lr}
   159ac:	add	fp, sp, #8
   159b0:	movw	r5, #51680	; 0xc9e0
   159b4:	mov	r4, r0
   159b8:	movt	r5, #2
   159bc:	ldrd	r0, [r5]
   159c0:	adds	r0, r0, #1
   159c4:	adc	r1, r1, #0
   159c8:	strd	r0, [r5]
   159cc:	ldr	r0, [r4, #4]
   159d0:	cmp	r0, #0
   159d4:	beq	159f4 <free_node_if@@Base+0x4c>
   159d8:	ldrd	r2, [r5, #8]
   159dc:	adds	r2, r2, #1
   159e0:	adc	r3, r3, #0
   159e4:	strd	r2, [r5, #8]
   159e8:	bl	153d0 <free_node@@Base>
   159ec:	add	r0, r5, #24
   159f0:	b	159f8 <free_node_if@@Base+0x50>
   159f4:	add	r0, r5, #16
   159f8:	ldrd	r2, [r0]
   159fc:	adds	r2, r2, #1
   15a00:	adc	r3, r3, #0
   15a04:	strd	r2, [r0]
   15a08:	ldrd	r0, [r5, #32]
   15a0c:	adds	r0, r0, #1
   15a10:	adc	r1, r1, #0
   15a14:	strd	r0, [r5, #32]
   15a18:	ldr	r0, [r4, #8]
   15a1c:	bl	153d0 <free_node@@Base>
   15a20:	ldr	r0, [r4, #12]
   15a24:	bl	153d0 <free_node@@Base>
   15a28:	ldr	r0, [r4, #16]
   15a2c:	bl	153d0 <free_node@@Base>
   15a30:	mov	r0, r4
   15a34:	pop	{r4, r5, fp, lr}
   15a38:	b	11e78 <free@plt>

00015a3c <free_node_boolean_operator@@Base>:
   15a3c:	push	{r4, r5, fp, lr}
   15a40:	add	fp, sp, #8
   15a44:	movw	r5, #51680	; 0xc9e0
   15a48:	mov	r4, r0
   15a4c:	movt	r5, #2
   15a50:	ldrd	r0, [r5, #48]	; 0x30
   15a54:	adds	r0, r0, #1
   15a58:	adc	r1, r1, #0
   15a5c:	strd	r0, [r5, #48]	; 0x30
   15a60:	ldr	r0, [r4, #4]
   15a64:	cmp	r0, #0
   15a68:	beq	15a88 <free_node_boolean_operator@@Base+0x4c>
   15a6c:	ldrd	r2, [r5, #56]	; 0x38
   15a70:	adds	r2, r2, #1
   15a74:	adc	r3, r3, #0
   15a78:	strd	r2, [r5, #56]	; 0x38
   15a7c:	bl	153d0 <free_node@@Base>
   15a80:	add	r0, r5, #72	; 0x48
   15a84:	b	15a8c <free_node_boolean_operator@@Base+0x50>
   15a88:	add	r0, r5, #64	; 0x40
   15a8c:	ldrd	r2, [r0]
   15a90:	adds	r2, r2, #1
   15a94:	adc	r3, r3, #0
   15a98:	strd	r2, [r0]
   15a9c:	ldrd	r0, [r5, #80]	; 0x50
   15aa0:	adds	r0, r0, #1
   15aa4:	adc	r1, r1, #0
   15aa8:	strd	r0, [r5, #80]	; 0x50
   15aac:	ldr	r0, [r4, #8]
   15ab0:	bl	153d0 <free_node@@Base>
   15ab4:	ldr	r0, [r4, #12]
   15ab8:	bl	153d0 <free_node@@Base>
   15abc:	mov	r0, r4
   15ac0:	pop	{r4, r5, fp, lr}
   15ac4:	b	11e78 <free@plt>

00015ac8 <get_boolean_op_value@@Base>:
   15ac8:	push	{r4, r5, r6, sl, fp, lr}
   15acc:	add	fp, sp, #16
   15ad0:	movw	r6, #51120	; 0xc7b0
   15ad4:	mov	r1, #2
   15ad8:	movt	r6, #2
   15adc:	ldrd	r2, [r6]
   15ae0:	adds	r2, r2, #1
   15ae4:	adc	r3, r3, #0
   15ae8:	strd	r2, [r6]
   15aec:	ldr	r4, [r0, #4]
   15af0:	mov	r0, r4
   15af4:	bl	11fc8 <strnlen@plt>
   15af8:	cmp	r0, #2
   15afc:	bne	15c28 <get_boolean_op_value@@Base+0x160>
   15b00:	ldrd	r0, [r6, #8]
   15b04:	mov	r2, #2
   15b08:	adds	r0, r0, #1
   15b0c:	adc	r1, r1, #0
   15b10:	strd	r0, [r6, #8]
   15b14:	movw	r1, #44736	; 0xaec0
   15b18:	mov	r0, r4
   15b1c:	movt	r1, #1
   15b20:	bl	12010 <strncmp@plt>
   15b24:	cmp	r0, #0
   15b28:	beq	15c70 <get_boolean_op_value@@Base+0x1a8>
   15b2c:	ldrd	r0, [r6, #32]
   15b30:	mov	r2, #2
   15b34:	adds	r0, r0, #1
   15b38:	adc	r1, r1, #0
   15b3c:	strd	r0, [r6, #32]
   15b40:	movw	r1, #44739	; 0xaec3
   15b44:	mov	r0, r4
   15b48:	movt	r1, #1
   15b4c:	bl	12010 <strncmp@plt>
   15b50:	cmp	r0, #0
   15b54:	beq	15cc4 <get_boolean_op_value@@Base+0x1fc>
   15b58:	ldrd	r0, [r6, #56]	; 0x38
   15b5c:	mov	r2, #2
   15b60:	mov	r5, #2
   15b64:	adds	r0, r0, #1
   15b68:	adc	r1, r1, #0
   15b6c:	strd	r0, [r6, #56]	; 0x38
   15b70:	movw	r1, #44742	; 0xaec6
   15b74:	mov	r0, r4
   15b78:	movt	r1, #1
   15b7c:	bl	12010 <strncmp@plt>
   15b80:	cmp	r0, #0
   15b84:	beq	15ce0 <get_boolean_op_value@@Base+0x218>
   15b88:	ldrd	r0, [r6, #80]	; 0x50
   15b8c:	mov	r2, #2
   15b90:	adds	r0, r0, #1
   15b94:	adc	r1, r1, #0
   15b98:	strd	r0, [r6, #80]	; 0x50
   15b9c:	movw	r1, #44745	; 0xaec9
   15ba0:	mov	r0, r4
   15ba4:	movt	r1, #1
   15ba8:	bl	12010 <strncmp@plt>
   15bac:	cmp	r0, #0
   15bb0:	beq	15cf8 <get_boolean_op_value@@Base+0x230>
   15bb4:	ldrd	r0, [r6, #104]	; 0x68
   15bb8:	mov	r2, #2
   15bbc:	adds	r0, r0, #1
   15bc0:	adc	r1, r1, #0
   15bc4:	strd	r0, [r6, #104]	; 0x68
   15bc8:	movw	r1, #44748	; 0xaecc
   15bcc:	mov	r0, r4
   15bd0:	movt	r1, #1
   15bd4:	bl	12010 <strncmp@plt>
   15bd8:	cmp	r0, #0
   15bdc:	beq	15d14 <get_boolean_op_value@@Base+0x24c>
   15be0:	ldrd	r0, [r6, #128]	; 0x80
   15be4:	mov	r2, #2
   15be8:	adds	r0, r0, #1
   15bec:	adc	r1, r1, #0
   15bf0:	strd	r0, [r6, #128]	; 0x80
   15bf4:	movw	r1, #44751	; 0xaecf
   15bf8:	mov	r0, r4
   15bfc:	movt	r1, #1
   15c00:	bl	12010 <strncmp@plt>
   15c04:	cmp	r0, #0
   15c08:	bne	15d88 <get_boolean_op_value@@Base+0x2c0>
   15c0c:	ldrd	r0, [r6, #144]	; 0x90
   15c10:	mov	r5, #5
   15c14:	adds	r0, r0, #1
   15c18:	adc	r1, r1, #0
   15c1c:	strd	r0, [r6, #144]	; 0x90
   15c20:	add	r0, r6, #160	; 0xa0
   15c24:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15c28:	ldrd	r0, [r6, #16]
   15c2c:	adds	r0, r0, #1
   15c30:	adc	r1, r1, #0
   15c34:	strd	r0, [r6, #16]
   15c38:	ldrb	r0, [r4]
   15c3c:	cmp	r0, #62	; 0x3e
   15c40:	beq	15ca8 <get_boolean_op_value@@Base+0x1e0>
   15c44:	cmp	r0, #60	; 0x3c
   15c48:	beq	15c8c <get_boolean_op_value@@Base+0x1c4>
   15c4c:	cmp	r0, #33	; 0x21
   15c50:	bne	15d54 <get_boolean_op_value@@Base+0x28c>
   15c54:	ldrd	r0, [r6, #176]	; 0xb0
   15c58:	mov	r5, #8
   15c5c:	adds	r0, r0, #1
   15c60:	adc	r1, r1, #0
   15c64:	strd	r0, [r6, #176]	; 0xb0
   15c68:	add	r0, r6, #200	; 0xc8
   15c6c:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15c70:	ldrd	r0, [r6, #24]
   15c74:	mov	r5, #0
   15c78:	adds	r0, r0, #1
   15c7c:	adc	r1, r1, #0
   15c80:	strd	r0, [r6, #24]
   15c84:	add	r0, r6, #40	; 0x28
   15c88:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15c8c:	ldrd	r0, [r6, #184]	; 0xb8
   15c90:	mov	r5, #6
   15c94:	adds	r0, r0, #1
   15c98:	adc	r1, r1, #0
   15c9c:	strd	r0, [r6, #184]	; 0xb8
   15ca0:	add	r0, r6, #208	; 0xd0
   15ca4:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15ca8:	ldrd	r0, [r6, #192]	; 0xc0
   15cac:	mov	r5, #7
   15cb0:	adds	r0, r0, #1
   15cb4:	adc	r1, r1, #0
   15cb8:	strd	r0, [r6, #192]	; 0xc0
   15cbc:	add	r0, r6, #216	; 0xd8
   15cc0:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15cc4:	ldrd	r0, [r6, #48]	; 0x30
   15cc8:	mov	r5, #1
   15ccc:	adds	r0, r0, #1
   15cd0:	adc	r1, r1, #0
   15cd4:	strd	r0, [r6, #48]	; 0x30
   15cd8:	add	r0, r6, #64	; 0x40
   15cdc:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15ce0:	ldrd	r0, [r6, #72]	; 0x48
   15ce4:	adds	r0, r0, #1
   15ce8:	adc	r1, r1, #0
   15cec:	strd	r0, [r6, #72]	; 0x48
   15cf0:	add	r0, r6, #88	; 0x58
   15cf4:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15cf8:	ldrd	r0, [r6, #96]	; 0x60
   15cfc:	mov	r5, #3
   15d00:	adds	r0, r0, #1
   15d04:	adc	r1, r1, #0
   15d08:	strd	r0, [r6, #96]	; 0x60
   15d0c:	add	r0, r6, #112	; 0x70
   15d10:	b	15d2c <get_boolean_op_value@@Base+0x264>
   15d14:	ldrd	r0, [r6, #120]	; 0x78
   15d18:	mov	r5, #4
   15d1c:	adds	r0, r0, #1
   15d20:	adc	r1, r1, #0
   15d24:	strd	r0, [r6, #120]	; 0x78
   15d28:	add	r0, r6, #136	; 0x88
   15d2c:	ldrd	r2, [r0]
   15d30:	adds	r2, r2, #1
   15d34:	adc	r3, r3, #0
   15d38:	strd	r2, [r0]
   15d3c:	ldrd	r0, [r6, #224]	; 0xe0
   15d40:	adds	r0, r0, #1
   15d44:	adc	r1, r1, #0
   15d48:	strd	r0, [r6, #224]	; 0xe0
   15d4c:	mov	r0, r5
   15d50:	pop	{r4, r5, r6, sl, fp, pc}
   15d54:	ldrd	r0, [r6, #168]	; 0xa8
   15d58:	adds	r0, r0, #1
   15d5c:	adc	r1, r1, #0
   15d60:	strd	r0, [r6, #168]	; 0xa8
   15d64:	movw	r0, #49376	; 0xc0e0
   15d68:	movw	r1, #44754	; 0xaed2
   15d6c:	mov	r2, r4
   15d70:	movt	r0, #2
   15d74:	movt	r1, #1
   15d78:	ldr	r0, [r0]
   15d7c:	bl	11f5c <fprintf@plt>
   15d80:	mov	r0, #1
   15d84:	bl	11f38 <exit@plt>
   15d88:	ldrd	r0, [r6, #152]	; 0x98
   15d8c:	adds	r0, r0, #1
   15d90:	adc	r1, r1, #0
   15d94:	strd	r0, [r6, #152]	; 0x98
   15d98:	b	15d64 <get_boolean_op_value@@Base+0x29c>
   15d9c:	push	{r4, r5, r6, lr}
   15da0:	sub	sp, sp, #8
   15da4:	movw	r0, #44808	; 0xaf08
   15da8:	movw	r1, #42432	; 0xa5c0
   15dac:	movw	r2, #31856	; 0x7c70
   15db0:	movt	r0, #1
   15db4:	movt	r1, #1
   15db8:	movt	r2, #15338	; 0x3bea
   15dbc:	bl	17098 <read_boolean_unary_expression@@Base+0x54c>
   15dc0:	movw	r0, #45488	; 0xb1b0
   15dc4:	movw	r6, #45168	; 0xb070
   15dc8:	mov	r5, #0
   15dcc:	movt	r0, #1
   15dd0:	movt	r6, #1
   15dd4:	add	r4, r0, #4
   15dd8:	mov	r3, r6
   15ddc:	ldr	r0, [r3, r5]!
   15de0:	ldr	r1, [r3, #16]
   15de4:	str	r1, [sp]
   15de8:	ldmib	r3, {r1, r2}
   15dec:	ldrb	r3, [r3, #12]
   15df0:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   15df4:	ldrd	r0, [r4, #-4]
   15df8:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   15dfc:	add	r5, r5, #20
   15e00:	add	r4, r4, #8
   15e04:	cmp	r5, #320	; 0x140
   15e08:	bne	15dd8 <get_boolean_op_value@@Base+0x310>
   15e0c:	bl	187f4 <read_boolean_unary_expression@@Base+0x1ca8>
   15e10:	add	sp, sp, #8
   15e14:	pop	{r4, r5, r6, lr}
   15e18:	b	19560 <read_boolean_unary_expression@@Base+0x2a14>
   15e1c:	push	{fp, lr}
   15e20:	bl	15d9c <get_boolean_op_value@@Base+0x2d4>
   15e24:	movw	r1, #51360	; 0xc8a0
   15e28:	vmov.i32	q8, #0	; 0x00000000
   15e2c:	movw	r2, #50992	; 0xc730
   15e30:	movw	r3, #51472	; 0xc910
   15e34:	mov	ip, #0
   15e38:	movt	r1, #2
   15e3c:	movt	r2, #2
   15e40:	movt	r3, #2
   15e44:	add	r0, r1, #80	; 0x50
   15e48:	str	ip, [r2, #112]	; 0x70
   15e4c:	str	ip, [r3, #48]	; 0x30
   15e50:	str	ip, [r3, #52]	; 0x34
   15e54:	vst1.64	{d16-d17}, [r0 :128]
   15e58:	add	r0, r1, #64	; 0x40
   15e5c:	vst1.64	{d16-d17}, [r0 :128]
   15e60:	add	r0, r1, #48	; 0x30
   15e64:	vst1.64	{d16-d17}, [r0 :128]
   15e68:	add	r0, r1, #32
   15e6c:	vst1.64	{d16-d17}, [r0 :128]
   15e70:	add	r0, r1, #16
   15e74:	vst1.64	{d16-d17}, [r0 :128]
   15e78:	add	r0, r2, #16
   15e7c:	vst1.64	{d16-d17}, [r0 :128]
   15e80:	add	r0, r2, #32
   15e84:	vst1.64	{d16-d17}, [r0 :128]
   15e88:	add	r0, r2, #48	; 0x30
   15e8c:	vst1.64	{d16-d17}, [r0 :128]
   15e90:	add	r0, r2, #64	; 0x40
   15e94:	vst1.64	{d16-d17}, [r0 :128]
   15e98:	add	r0, r2, #80	; 0x50
   15e9c:	vst1.64	{d16-d17}, [r0 :128]
   15ea0:	add	r0, r2, #96	; 0x60
   15ea4:	vst1.64	{d16-d17}, [r0 :128]
   15ea8:	add	r0, r3, #16
   15eac:	vst1.64	{d16-d17}, [r0 :128]
   15eb0:	mov	r0, #96	; 0x60
   15eb4:	vst1.64	{d16-d17}, [r1 :128], r0
   15eb8:	mov	r0, #116	; 0x74
   15ebc:	vst1.64	{d16-d17}, [r2 :128], r0
   15ec0:	vst1.64	{d16-d17}, [r1 :128]
   15ec4:	mov	r0, #32
   15ec8:	mov	r1, r3
   15ecc:	vst1.64	{d16-d17}, [r1 :128], r0
   15ed0:	add	r0, r3, #80	; 0x50
   15ed4:	str	ip, [r2]
   15ed8:	vst1.64	{d16-d17}, [r1 :128]
   15edc:	movw	r1, #51584	; 0xc980
   15ee0:	vst1.64	{d16-d17}, [r0 :128]
   15ee4:	add	r0, r3, #64	; 0x40
   15ee8:	str	ip, [r3, #96]	; 0x60
   15eec:	str	ip, [r3, #100]	; 0x64
   15ef0:	movt	r1, #2
   15ef4:	vst1.64	{d16-d17}, [r0 :128]
   15ef8:	mov	r0, #36	; 0x24
   15efc:	mov	r2, r1
   15f00:	str	ip, [r1, #32]
   15f04:	vst1.64	{d16-d17}, [r2 :128], r0
   15f08:	str	ip, [r2]
   15f0c:	add	r2, r1, #16
   15f10:	vst1.64	{d16-d17}, [r2 :128]
   15f14:	add	r2, r1, #48	; 0x30
   15f18:	str	ip, [r1, #80]	; 0x50
   15f1c:	str	ip, [r1, #84]	; 0x54
   15f20:	vst1.64	{d16-d17}, [r2 :128]
   15f24:	add	r2, r1, #64	; 0x40
   15f28:	movw	r1, #51680	; 0xc9e0
   15f2c:	movt	r1, #2
   15f30:	vst1.64	{d16-d17}, [r2 :128]
   15f34:	mov	r2, r1
   15f38:	str	ip, [r1, #32]
   15f3c:	vst1.64	{d16-d17}, [r2 :128], r0
   15f40:	add	r0, r1, #16
   15f44:	vst1.64	{d16-d17}, [r0 :128]
   15f48:	add	r0, r1, #48	; 0x30
   15f4c:	str	ip, [r2]
   15f50:	str	ip, [r1, #80]	; 0x50
   15f54:	str	ip, [r1, #84]	; 0x54
   15f58:	mov	r2, #232	; 0xe8
   15f5c:	vst1.64	{d16-d17}, [r0 :128]
   15f60:	add	r0, r1, #64	; 0x40
   15f64:	mov	r1, #0
   15f68:	vst1.64	{d16-d17}, [r0 :128]
   15f6c:	movw	r0, #51120	; 0xc7b0
   15f70:	movt	r0, #2
   15f74:	bl	11f8c <memset@plt>
   15f78:	pop	{fp, pc}
   15f7c:	movw	r0, #23964	; 0x5d9c
   15f80:	movw	r1, #24092	; 0x5e1c
   15f84:	movt	r0, #1
   15f88:	movt	r1, #1
   15f8c:	b	19a14 <__gcov_flush@@Base+0xb8>

00015f90 <init_grammar@@Base>:
   15f90:	movw	r2, #52544	; 0xcd40
   15f94:	add	r3, pc, #36	; 0x24
   15f98:	movt	r2, #2
   15f9c:	vld1.64	{d16-d17}, [r3 :128]
   15fa0:	vld1.64	{d18-d19}, [r2 :128]
   15fa4:	vadd.i64	q8, q9, q8
   15fa8:	vst1.64	{d16-d17}, [r2 :128]
   15fac:	str	r1, [r0]
   15fb0:	bx	lr
   15fb4:	nop	{0}
   15fb8:	nop	{0}
   15fbc:	nop	{0}
   15fc0:	andeq	r0, r0, r1
   15fc4:	andeq	r0, r0, r0
   15fc8:	andeq	r0, r0, r1
   15fcc:	andeq	r0, r0, r0

00015fd0 <destroy_grammar@@Base>:
   15fd0:	movw	r0, #52544	; 0xcd40
   15fd4:	add	r1, pc, #36	; 0x24
   15fd8:	movt	r0, #2
   15fdc:	vld1.64	{d16-d17}, [r1 :128]
   15fe0:	add	r0, r0, #16
   15fe4:	vld1.64	{d18-d19}, [r0 :128]
   15fe8:	vadd.i64	q8, q9, q8
   15fec:	vst1.64	{d16-d17}, [r0 :128]
   15ff0:	bx	lr
   15ff4:	nop	{0}
   15ff8:	nop	{0}
   15ffc:	nop	{0}
   16000:	andeq	r0, r0, r1
   16004:	andeq	r0, r0, r0
   16008:	andeq	r0, r0, r1
   1600c:	andeq	r0, r0, r0

00016010 <build_ast@@Base>:
   16010:	movw	r1, #52544	; 0xcd40
   16014:	add	r2, pc, #36	; 0x24
   16018:	movt	r1, #2
   1601c:	vld1.64	{d16-d17}, [r2 :128]
   16020:	add	r1, r1, #32
   16024:	vld1.64	{d18-d19}, [r1 :128]
   16028:	vadd.i64	q8, q9, q8
   1602c:	vst1.64	{d16-d17}, [r1 :128]
   16030:	b	16050 <read_function_ast_node@@Base>
   16034:	nop	{0}
   16038:	nop	{0}
   1603c:	nop	{0}
   16040:	andeq	r0, r0, r1
   16044:	andeq	r0, r0, r0
   16048:	andeq	r0, r0, r1
   1604c:	andeq	r0, r0, r0

00016050 <read_function_ast_node@@Base>:
   16050:	push	{r4, r5, r6, r7, fp, lr}
   16054:	add	fp, sp, #16
   16058:	movw	r7, #51776	; 0xca40
   1605c:	mov	r4, r0
   16060:	movt	r7, #2
   16064:	ldrd	r0, [r7]
   16068:	adds	r0, r0, #1
   1606c:	adc	r1, r1, #0
   16070:	strd	r0, [r7]
   16074:	ldr	r0, [r4]
   16078:	bl	12130 <next@@Base>
   1607c:	ldr	r1, [r0]
   16080:	cmp	r1, #0
   16084:	beq	160a4 <read_function_ast_node@@Base+0x54>
   16088:	ldrd	r0, [r7, #8]
   1608c:	mov	r4, #0
   16090:	adds	r0, r0, #1
   16094:	adc	r1, r1, #0
   16098:	strd	r0, [r7, #8]
   1609c:	add	r0, r7, #24
   160a0:	b	161b4 <read_function_ast_node@@Base+0x164>
   160a4:	ldrd	r2, [r7, #16]
   160a8:	adds	r2, r2, #1
   160ac:	adc	r3, r3, #0
   160b0:	strd	r2, [r7, #16]
   160b4:	bl	14bb0 <free_token_int_type@@Base>
   160b8:	ldr	r0, [r4]
   160bc:	bl	12130 <next@@Base>
   160c0:	mov	r5, r0
   160c4:	ldr	r0, [r0]
   160c8:	cmp	r0, #2
   160cc:	bne	16164 <read_function_ast_node@@Base+0x114>
   160d0:	ldrd	r0, [r7, #40]	; 0x28
   160d4:	adds	r0, r0, #1
   160d8:	adc	r1, r1, #0
   160dc:	strd	r0, [r7, #40]	; 0x28
   160e0:	ldr	r0, [r4]
   160e4:	bl	12130 <next@@Base>
   160e8:	ldr	r1, [r0]
   160ec:	cmp	r1, #3
   160f0:	bne	16180 <read_function_ast_node@@Base+0x130>
   160f4:	ldrd	r2, [r7, #64]	; 0x40
   160f8:	adds	r2, r2, #1
   160fc:	adc	r3, r3, #0
   16100:	strd	r2, [r7, #64]	; 0x40
   16104:	bl	14c60 <free_token_opar@@Base>
   16108:	ldr	r0, [r4]
   1610c:	bl	12130 <next@@Base>
   16110:	ldr	r1, [r0]
   16114:	cmp	r1, #4
   16118:	bne	1619c <read_function_ast_node@@Base+0x14c>
   1611c:	ldrd	r2, [r7, #88]	; 0x58
   16120:	adds	r2, r2, #1
   16124:	adc	r3, r3, #0
   16128:	strd	r2, [r7, #88]	; 0x58
   1612c:	bl	14ca0 <free_token_cpar@@Base>
   16130:	mov	r0, r4
   16134:	bl	161dc <read_body@@Base>
   16138:	mov	r6, r0
   1613c:	mov	r0, #16
   16140:	bl	11efc <malloc@plt>
   16144:	ldr	r1, [r5, #4]
   16148:	mov	r2, r6
   1614c:	mov	r4, r0
   16150:	bl	15210 <init_node_function@@Base>
   16154:	mov	r0, r5
   16158:	bl	14c20 <free_token_function@@Base>
   1615c:	add	r0, r7, #104	; 0x68
   16160:	b	161b4 <read_function_ast_node@@Base+0x164>
   16164:	ldrd	r0, [r7, #32]
   16168:	mov	r4, #0
   1616c:	adds	r0, r0, #1
   16170:	adc	r1, r1, #0
   16174:	strd	r0, [r7, #32]
   16178:	add	r0, r7, #48	; 0x30
   1617c:	b	161b4 <read_function_ast_node@@Base+0x164>
   16180:	ldrd	r0, [r7, #56]	; 0x38
   16184:	mov	r4, #0
   16188:	adds	r0, r0, #1
   1618c:	adc	r1, r1, #0
   16190:	strd	r0, [r7, #56]	; 0x38
   16194:	add	r0, r7, #72	; 0x48
   16198:	b	161b4 <read_function_ast_node@@Base+0x164>
   1619c:	ldrd	r0, [r7, #80]	; 0x50
   161a0:	mov	r4, #0
   161a4:	adds	r0, r0, #1
   161a8:	adc	r1, r1, #0
   161ac:	strd	r0, [r7, #80]	; 0x50
   161b0:	add	r0, r7, #96	; 0x60
   161b4:	ldrd	r2, [r0]
   161b8:	adds	r2, r2, #1
   161bc:	adc	r3, r3, #0
   161c0:	strd	r2, [r0]
   161c4:	ldrd	r0, [r7, #112]	; 0x70
   161c8:	adds	r0, r0, #1
   161cc:	adc	r1, r1, #0
   161d0:	strd	r0, [r7, #112]	; 0x70
   161d4:	mov	r0, r4
   161d8:	pop	{r4, r5, r6, r7, fp, pc}

000161dc <read_body@@Base>:
   161dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161e0:	add	fp, sp, #28
   161e4:	sub	sp, sp, #4
   161e8:	movw	r7, #51904	; 0xcac0
   161ec:	mov	r4, r0
   161f0:	movt	r7, #2
   161f4:	ldrd	r0, [r7]
   161f8:	adds	r0, r0, #1
   161fc:	adc	r1, r1, #0
   16200:	strd	r0, [r7]
   16204:	ldr	r0, [r4]
   16208:	bl	12130 <next@@Base>
   1620c:	ldr	r1, [r0]
   16210:	cmp	r1, #5
   16214:	bne	1638c <read_body@@Base+0x1b0>
   16218:	ldrd	r2, [r7, #16]
   1621c:	adds	r2, r2, #1
   16220:	adc	r3, r3, #0
   16224:	strd	r2, [r7, #16]
   16228:	bl	14ce0 <free_token_obra@@Base>
   1622c:	ldr	r0, [r4]
   16230:	bl	12130 <next@@Base>
   16234:	mov	r1, r0
   16238:	ldr	r0, [r7, #32]
   1623c:	ldr	r3, [r7, #36]	; 0x24
   16240:	mov	sl, #0
   16244:	adds	r0, r0, #1
   16248:	adc	r3, r3, #0
   1624c:	str	r0, [r7, #32]
   16250:	str	r3, [r7, #36]	; 0x24
   16254:	ldr	r0, [r1]
   16258:	cmp	r0, #6
   1625c:	beq	163a8 <read_body@@Base+0x1cc>
   16260:	add	r2, r7, #128	; 0x80
   16264:	mov	r5, #0
   16268:	add	r9, r7, #88	; 0x58
   1626c:	mov	sl, #0
   16270:	str	r2, [sp]
   16274:	b	162d4 <read_body@@Base+0xf8>
   16278:	ldrd	r0, [r7, #112]	; 0x70
   1627c:	mov	sl, r6
   16280:	adds	r0, r0, #1
   16284:	adc	r1, r1, #0
   16288:	strd	r0, [r7, #112]	; 0x70
   1628c:	ldr	r0, [sp]
   16290:	ldrd	r2, [r0]
   16294:	adds	r2, r2, #1
   16298:	adc	r3, r3, #0
   1629c:	strd	r2, [r0]
   162a0:	ldr	r0, [r4]
   162a4:	bl	12130 <next@@Base>
   162a8:	mov	r1, r0
   162ac:	ldr	r0, [r7, #136]	; 0x88
   162b0:	ldr	r3, [r7, #140]	; 0x8c
   162b4:	mov	r5, r6
   162b8:	adds	r0, r0, #1
   162bc:	adc	r3, r3, #0
   162c0:	str	r0, [r7, #136]	; 0x88
   162c4:	str	r3, [r7, #140]	; 0x8c
   162c8:	ldr	r0, [r1]
   162cc:	cmp	r0, #6
   162d0:	beq	163a8 <read_body@@Base+0x1cc>
   162d4:	ldrd	r2, [r7, #40]	; 0x28
   162d8:	adds	r2, r2, #1
   162dc:	adc	r3, r3, #0
   162e0:	cmp	r0, #10
   162e4:	strd	r2, [r7, #40]	; 0x28
   162e8:	beq	16328 <read_body@@Base+0x14c>
   162ec:	cmp	r0, #7
   162f0:	bne	163d0 <read_body@@Base+0x1f4>
   162f4:	ldr	r0, [r7, #64]	; 0x40
   162f8:	ldr	r3, [r7, #68]	; 0x44
   162fc:	adds	r0, r0, #1
   16300:	str	r0, [r7, #64]	; 0x40
   16304:	adc	r3, r3, #0
   16308:	mov	r0, r1
   1630c:	str	r3, [r7, #68]	; 0x44
   16310:	bl	14d60 <free_token_return@@Base>
   16314:	mov	r0, r4
   16318:	add	r8, r7, #80	; 0x50
   1631c:	bl	16420 <read_return_expression@@Base>
   16320:	mov	r6, r0
   16324:	b	16358 <read_body@@Base+0x17c>
   16328:	ldr	r0, [r7, #72]	; 0x48
   1632c:	ldr	r3, [r7, #76]	; 0x4c
   16330:	adds	r0, r0, #1
   16334:	str	r0, [r7, #72]	; 0x48
   16338:	adc	r3, r3, #0
   1633c:	mov	r0, r1
   16340:	str	r3, [r7, #76]	; 0x4c
   16344:	bl	14e10 <free_token_if@@Base>
   16348:	mov	r0, r4
   1634c:	bl	16528 <read_if_statement@@Base>
   16350:	mov	r6, r0
   16354:	mov	r8, r9
   16358:	ldrd	r0, [r8]
   1635c:	adds	r0, r0, #1
   16360:	adc	r1, r1, #0
   16364:	cmp	sl, #0
   16368:	strd	r0, [r8]
   1636c:	beq	16278 <read_body@@Base+0x9c>
   16370:	ldrd	r0, [r7, #104]	; 0x68
   16374:	adds	r0, r0, #1
   16378:	adc	r1, r1, #0
   1637c:	strd	r0, [r7, #104]	; 0x68
   16380:	str	r6, [r5, #4]
   16384:	add	r0, r7, #120	; 0x78
   16388:	b	16290 <read_body@@Base+0xb4>
   1638c:	ldrd	r0, [r7, #8]
   16390:	mov	sl, #0
   16394:	adds	r0, r0, #1
   16398:	adc	r1, r1, #0
   1639c:	strd	r0, [r7, #8]
   163a0:	add	r0, r7, #24
   163a4:	b	163f4 <read_body@@Base+0x218>
   163a8:	ldr	r0, [r7, #48]	; 0x30
   163ac:	ldr	r3, [r7, #52]	; 0x34
   163b0:	adds	r0, r0, #1
   163b4:	str	r0, [r7, #48]	; 0x30
   163b8:	adc	r3, r3, #0
   163bc:	mov	r0, r1
   163c0:	str	r3, [r7, #52]	; 0x34
   163c4:	bl	14d20 <free_token_cbra@@Base>
   163c8:	add	r0, r7, #144	; 0x90
   163cc:	b	163f4 <read_body@@Base+0x218>
   163d0:	ldr	r0, [r7, #56]	; 0x38
   163d4:	ldr	r3, [r7, #60]	; 0x3c
   163d8:	adds	r0, r0, #1
   163dc:	adc	r3, r3, #0
   163e0:	str	r0, [r7, #56]	; 0x38
   163e4:	str	r3, [r7, #60]	; 0x3c
   163e8:	ldr	r0, [r4]
   163ec:	bl	12370 <push_back@@Base>
   163f0:	add	r0, r7, #96	; 0x60
   163f4:	ldrd	r2, [r0]
   163f8:	adds	r2, r2, #1
   163fc:	adc	r3, r3, #0
   16400:	strd	r2, [r0]
   16404:	ldrd	r0, [r7, #152]	; 0x98
   16408:	adds	r0, r0, #1
   1640c:	adc	r1, r1, #0
   16410:	strd	r0, [r7, #152]	; 0x98
   16414:	mov	r0, sl
   16418:	sub	sp, fp, #28
   1641c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016420 <read_return_expression@@Base>:
   16420:	push	{r4, r5, r6, r7, fp, lr}
   16424:	add	fp, sp, #16
   16428:	movw	r7, #52064	; 0xcb60
   1642c:	mov	r5, r0
   16430:	movt	r7, #2
   16434:	ldrd	r0, [r7]
   16438:	adds	r0, r0, #1
   1643c:	adc	r1, r1, #0
   16440:	strd	r0, [r7]
   16444:	ldr	r0, [r5]
   16448:	bl	12130 <next@@Base>
   1644c:	mov	r4, r0
   16450:	ldr	r0, [r0]
   16454:	cmp	r0, #1
   16458:	bne	164cc <read_return_expression@@Base+0xac>
   1645c:	ldrd	r0, [r7, #16]
   16460:	adds	r0, r0, #1
   16464:	adc	r1, r1, #0
   16468:	strd	r0, [r7, #16]
   1646c:	mov	r0, #12
   16470:	bl	11efc <malloc@plt>
   16474:	ldr	r1, [r4, #4]
   16478:	mov	r6, r0
   1647c:	bl	151a0 <init_node_int@@Base>
   16480:	mov	r0, r4
   16484:	bl	14bf0 <free_token_int_value@@Base>
   16488:	mov	r0, #12
   1648c:	bl	11efc <malloc@plt>
   16490:	mov	r1, r6
   16494:	mov	r4, r0
   16498:	bl	15280 <init_node_return@@Base>
   1649c:	ldr	r0, [r5]
   164a0:	bl	12130 <next@@Base>
   164a4:	ldr	r1, [r0]
   164a8:	cmp	r1, #8
   164ac:	bne	164e8 <read_return_expression@@Base+0xc8>
   164b0:	ldrd	r2, [r7, #40]	; 0x28
   164b4:	adds	r2, r2, #1
   164b8:	adc	r3, r3, #0
   164bc:	strd	r2, [r7, #40]	; 0x28
   164c0:	bl	14da0 <free_token_semicolon@@Base>
   164c4:	add	r0, r7, #56	; 0x38
   164c8:	b	16500 <read_return_expression@@Base+0xe0>
   164cc:	ldrd	r0, [r7, #8]
   164d0:	mov	r4, #0
   164d4:	adds	r0, r0, #1
   164d8:	adc	r1, r1, #0
   164dc:	strd	r0, [r7, #8]
   164e0:	add	r0, r7, #24
   164e4:	b	16500 <read_return_expression@@Base+0xe0>
   164e8:	ldrd	r0, [r7, #32]
   164ec:	mov	r4, #0
   164f0:	adds	r0, r0, #1
   164f4:	adc	r1, r1, #0
   164f8:	strd	r0, [r7, #32]
   164fc:	add	r0, r7, #48	; 0x30
   16500:	ldrd	r2, [r0]
   16504:	adds	r2, r2, #1
   16508:	adc	r3, r3, #0
   1650c:	strd	r2, [r0]
   16510:	ldrd	r0, [r7, #64]	; 0x40
   16514:	adds	r0, r0, #1
   16518:	adc	r1, r1, #0
   1651c:	strd	r0, [r7, #64]	; 0x40
   16520:	mov	r0, r4
   16524:	pop	{r4, r5, r6, r7, fp, pc}

00016528 <read_if_statement@@Base>:
   16528:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1652c:	add	fp, sp, #24
   16530:	movw	r4, #52144	; 0xcbb0
   16534:	mov	r5, r0
   16538:	movt	r4, #2
   1653c:	ldrd	r0, [r4]
   16540:	adds	r0, r0, #1
   16544:	adc	r1, r1, #0
   16548:	strd	r0, [r4]
   1654c:	ldr	r0, [r5]
   16550:	bl	12130 <next@@Base>
   16554:	ldr	r1, [r0]
   16558:	cmp	r1, #3
   1655c:	bne	165d8 <read_if_statement@@Base+0xb0>
   16560:	ldrd	r2, [r4, #16]
   16564:	adds	r2, r2, #1
   16568:	adc	r3, r3, #0
   1656c:	strd	r2, [r4, #16]
   16570:	bl	14c60 <free_token_opar@@Base>
   16574:	mov	r0, r5
   16578:	bl	16674 <read_boolean_expression@@Base>
   1657c:	mov	r8, r0
   16580:	mov	r0, r5
   16584:	bl	161dc <read_body@@Base>
   16588:	mov	r9, r0
   1658c:	ldr	r0, [r5]
   16590:	bl	12130 <next@@Base>
   16594:	mov	r1, r0
   16598:	ldr	r0, [r0]
   1659c:	cmp	r0, #11
   165a0:	bne	165f4 <read_if_statement@@Base+0xcc>
   165a4:	ldr	r0, [r4, #32]
   165a8:	ldr	r3, [r4, #36]	; 0x24
   165ac:	adds	r0, r0, #1
   165b0:	str	r0, [r4, #32]
   165b4:	adc	r3, r3, #0
   165b8:	mov	r0, r1
   165bc:	str	r3, [r4, #36]	; 0x24
   165c0:	bl	14e50 <free_token_else@@Base>
   165c4:	mov	r0, r5
   165c8:	add	r6, r4, #48	; 0x30
   165cc:	bl	161dc <read_body@@Base>
   165d0:	mov	r7, r0
   165d4:	b	1661c <read_if_statement@@Base+0xf4>
   165d8:	ldrd	r0, [r4, #8]
   165dc:	mov	r5, #0
   165e0:	adds	r0, r0, #1
   165e4:	adc	r1, r1, #0
   165e8:	strd	r0, [r4, #8]
   165ec:	add	r0, r4, #24
   165f0:	b	1664c <read_if_statement@@Base+0x124>
   165f4:	ldr	r0, [r4, #40]	; 0x28
   165f8:	ldr	r3, [r4, #44]	; 0x2c
   165fc:	adds	r0, r0, #1
   16600:	adc	r3, r3, #0
   16604:	str	r0, [r4, #40]	; 0x28
   16608:	str	r3, [r4, #44]	; 0x2c
   1660c:	ldr	r0, [r5]
   16610:	bl	12370 <push_back@@Base>
   16614:	add	r6, r4, #56	; 0x38
   16618:	mov	r7, #0
   1661c:	ldrd	r0, [r6]
   16620:	adds	r0, r0, #1
   16624:	adc	r1, r1, #0
   16628:	strd	r0, [r6]
   1662c:	mov	r0, #20
   16630:	bl	11efc <malloc@plt>
   16634:	mov	r1, r8
   16638:	mov	r2, r9
   1663c:	mov	r3, r7
   16640:	mov	r5, r0
   16644:	bl	152f0 <init_node_if@@Base>
   16648:	add	r0, r4, #64	; 0x40
   1664c:	ldrd	r2, [r0]
   16650:	adds	r2, r2, #1
   16654:	adc	r3, r3, #0
   16658:	strd	r2, [r0]
   1665c:	ldrd	r0, [r4, #72]	; 0x48
   16660:	adds	r0, r0, #1
   16664:	adc	r1, r1, #0
   16668:	strd	r0, [r4, #72]	; 0x48
   1666c:	mov	r0, r5
   16670:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00016674 <read_boolean_expression@@Base>:
   16674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16678:	add	fp, sp, #28
   1667c:	sub	sp, sp, #4
   16680:	movw	r6, #52224	; 0xcc00
   16684:	mov	r5, r0
   16688:	mov	r4, #0
   1668c:	movt	r6, #2
   16690:	str	r4, [sp]
   16694:	ldrd	r0, [r6]
   16698:	adds	r0, r0, #1
   1669c:	adc	r1, r1, #0
   166a0:	strd	r0, [r6]
   166a4:	ldr	r0, [r5]
   166a8:	bl	12130 <next@@Base>
   166ac:	mov	r1, r0
   166b0:	ldr	r0, [r6, #8]
   166b4:	ldr	r3, [r6, #12]
   166b8:	adds	r0, r0, #1
   166bc:	adc	r3, r3, #0
   166c0:	str	r0, [r6, #8]
   166c4:	str	r3, [r6, #12]
   166c8:	ldr	r0, [r1]
   166cc:	cmp	r0, #4
   166d0:	beq	167ec <read_boolean_expression@@Base+0x178>
   166d4:	mov	r4, #0
   166d8:	mov	r9, #1
   166dc:	add	sl, r6, #72	; 0x48
   166e0:	mov	r8, sp
   166e4:	b	16754 <read_boolean_expression@@Base+0xe0>
   166e8:	ldrd	r0, [r6, #56]	; 0x38
   166ec:	mov	r2, r8
   166f0:	mov	r3, r7
   166f4:	adds	r0, r0, #1
   166f8:	adc	r1, r1, #0
   166fc:	strd	r0, [r6, #56]	; 0x38
   16700:	mov	r0, r5
   16704:	mov	r1, r4
   16708:	bl	16868 <read_single_boolean_expression@@Base>
   1670c:	mov	r4, r0
   16710:	add	r0, r6, #80	; 0x50
   16714:	ldrd	r2, [r0]
   16718:	adds	r2, r2, #1
   1671c:	adc	r3, r3, #0
   16720:	strd	r2, [r0]
   16724:	ldr	r0, [r5]
   16728:	bl	12130 <next@@Base>
   1672c:	mov	r1, r0
   16730:	ldr	r0, [r6, #88]	; 0x58
   16734:	ldr	r3, [r6, #92]	; 0x5c
   16738:	adds	r0, r0, #1
   1673c:	adc	r3, r3, #0
   16740:	str	r0, [r6, #88]	; 0x58
   16744:	str	r3, [r6, #92]	; 0x5c
   16748:	ldr	r0, [r1]
   1674c:	cmp	r0, #4
   16750:	beq	167ec <read_boolean_expression@@Base+0x178>
   16754:	ldrd	r2, [r6, #16]
   16758:	adds	r2, r2, #1
   1675c:	adc	r3, r3, #0
   16760:	cmp	r0, #12
   16764:	strd	r2, [r6, #16]
   16768:	beq	167bc <read_boolean_expression@@Base+0x148>
   1676c:	cmp	r0, #3
   16770:	beq	166e8 <read_boolean_expression@@Base+0x74>
   16774:	cmp	r0, #1
   16778:	bne	16830 <read_boolean_expression@@Base+0x1bc>
   1677c:	ldr	r0, [r6, #40]	; 0x28
   16780:	ldr	r3, [r6, #44]	; 0x2c
   16784:	adds	r0, r0, #1
   16788:	adc	r3, r3, #0
   1678c:	str	r0, [r6, #40]	; 0x28
   16790:	str	r3, [r6, #44]	; 0x2c
   16794:	ldr	r0, [r5]
   16798:	bl	12370 <push_back@@Base>
   1679c:	mov	r0, r5
   167a0:	mov	r1, r4
   167a4:	mov	r2, r8
   167a8:	mov	r3, r7
   167ac:	bl	16868 <read_single_boolean_expression@@Base>
   167b0:	mov	r4, r0
   167b4:	add	r0, r6, #64	; 0x40
   167b8:	b	16714 <read_boolean_expression@@Base+0xa0>
   167bc:	ldr	r0, [r6, #48]	; 0x30
   167c0:	ldr	r3, [r6, #52]	; 0x34
   167c4:	adds	r0, r0, #1
   167c8:	str	r0, [r6, #48]	; 0x30
   167cc:	adc	r3, r3, #0
   167d0:	mov	r0, r1
   167d4:	str	r3, [r6, #52]	; 0x34
   167d8:	bl	15ac8 <get_boolean_op_value@@Base>
   167dc:	mov	r7, r0
   167e0:	mov	r0, sl
   167e4:	str	r9, [sp]
   167e8:	b	16714 <read_boolean_expression@@Base+0xa0>
   167ec:	ldr	r0, [r6, #24]
   167f0:	ldr	r3, [r6, #28]
   167f4:	ldr	r2, [r6, #96]	; 0x60
   167f8:	ldr	r5, [r6, #100]	; 0x64
   167fc:	adds	r0, r0, #1
   16800:	adc	r3, r3, #0
   16804:	adds	r2, r2, #1
   16808:	str	r2, [r6, #96]	; 0x60
   1680c:	str	r0, [r6, #24]
   16810:	adc	r0, r5, #0
   16814:	str	r3, [r6, #28]
   16818:	str	r0, [r6, #100]	; 0x64
   1681c:	mov	r0, r1
   16820:	bl	14ca0 <free_token_cpar@@Base>
   16824:	mov	r0, r4
   16828:	sub	sp, fp, #28
   1682c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16830:	ldrd	r0, [r6, #32]
   16834:	mov	r2, #1
   16838:	adds	r0, r0, #1
   1683c:	adc	r1, r1, #0
   16840:	strd	r0, [r6, #32]
   16844:	movw	r0, #49376	; 0xc0e0
   16848:	mov	r1, #33	; 0x21
   1684c:	movt	r0, #2
   16850:	ldr	r3, [r0]
   16854:	movw	r0, #45616	; 0xb230
   16858:	movt	r0, #1
   1685c:	bl	11ecc <fwrite@plt>
   16860:	mov	r0, #1
   16864:	bl	11f38 <exit@plt>

00016868 <read_single_boolean_expression@@Base>:
   16868:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1686c:	add	fp, sp, #24
   16870:	movw	r5, #52544	; 0xcd40
   16874:	mov	r8, r3
   16878:	mov	r4, r2
   1687c:	movt	r5, #2
   16880:	ldrd	r2, [r5, #48]	; 0x30
   16884:	adds	r2, r2, #1
   16888:	adc	r3, r3, #0
   1688c:	cmp	r1, #0
   16890:	strd	r2, [r5, #48]	; 0x30
   16894:	beq	168f8 <read_single_boolean_expression@@Base+0x90>
   16898:	ldrd	r2, [r5, #64]	; 0x40
   1689c:	adds	r2, r2, #1
   168a0:	adc	r3, r3, #0
   168a4:	strd	r2, [r5, #64]	; 0x40
   168a8:	ldr	r1, [r4]
   168ac:	cmp	r1, #0
   168b0:	beq	1693c <read_single_boolean_expression@@Base+0xd4>
   168b4:	ldrd	r2, [r5, #80]	; 0x50
   168b8:	adds	r2, r2, #1
   168bc:	adc	r3, r3, #0
   168c0:	strd	r2, [r5, #80]	; 0x50
   168c4:	bl	16974 <read_boolean_binary_expression@@Base>
   168c8:	mov	r7, r0
   168cc:	mov	r0, #20
   168d0:	bl	11efc <malloc@plt>
   168d4:	mov	r1, r8
   168d8:	mov	r2, #0
   168dc:	mov	r3, r7
   168e0:	mov	r6, r0
   168e4:	mov	r9, #0
   168e8:	bl	15360 <init_node_boolean_operator@@Base>
   168ec:	str	r9, [r4]
   168f0:	add	r4, r5, #96	; 0x60
   168f4:	b	16914 <read_single_boolean_expression@@Base+0xac>
   168f8:	ldrd	r2, [r5, #56]	; 0x38
   168fc:	add	r4, r5, #72	; 0x48
   16900:	adds	r2, r2, #1
   16904:	adc	r3, r3, #0
   16908:	strd	r2, [r5, #56]	; 0x38
   1690c:	bl	16974 <read_boolean_binary_expression@@Base>
   16910:	mov	r6, r0
   16914:	ldrd	r0, [r4]
   16918:	adds	r0, r0, #1
   1691c:	adc	r1, r1, #0
   16920:	strd	r0, [r4]
   16924:	ldrd	r0, [r5, #104]	; 0x68
   16928:	adds	r0, r0, #1
   1692c:	adc	r1, r1, #0
   16930:	strd	r0, [r5, #104]	; 0x68
   16934:	mov	r0, r6
   16938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1693c:	ldrd	r0, [r5, #88]	; 0x58
   16940:	adds	r0, r0, #1
   16944:	adc	r1, r1, #0
   16948:	strd	r0, [r5, #88]	; 0x58
   1694c:	movw	r0, #49376	; 0xc0e0
   16950:	mov	r1, #4
   16954:	movt	r0, #2
   16958:	ldr	r2, [r1]
   1695c:	movw	r1, #45650	; 0xb252
   16960:	movt	r1, #1
   16964:	ldr	r0, [r0]
   16968:	bl	11f5c <fprintf@plt>
   1696c:	mov	r0, #1
   16970:	bl	11f38 <exit@plt>

00016974 <read_boolean_binary_expression@@Base>:
   16974:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16978:	add	fp, sp, #24
   1697c:	movw	r4, #52336	; 0xcc70
   16980:	mov	r5, r0
   16984:	movt	r4, #2
   16988:	ldrd	r0, [r4]
   1698c:	adds	r0, r0, #1
   16990:	adc	r1, r1, #0
   16994:	strd	r0, [r4]
   16998:	ldr	r0, [r5]
   1699c:	bl	12130 <next@@Base>
   169a0:	mov	r6, r0
   169a4:	ldr	r0, [r0]
   169a8:	cmp	r0, #1
   169ac:	bne	16a80 <read_boolean_binary_expression@@Base+0x10c>
   169b0:	ldrd	r0, [r4, #16]
   169b4:	adds	r0, r0, #1
   169b8:	adc	r1, r1, #0
   169bc:	strd	r0, [r4, #16]
   169c0:	mov	r0, #12
   169c4:	bl	11efc <malloc@plt>
   169c8:	ldr	r1, [r6, #4]
   169cc:	mov	r8, r0
   169d0:	bl	151a0 <init_node_int@@Base>
   169d4:	mov	r0, r6
   169d8:	bl	14bf0 <free_token_int_value@@Base>
   169dc:	ldr	r0, [r5]
   169e0:	bl	12130 <next@@Base>
   169e4:	mov	r7, r0
   169e8:	ldr	r0, [r0]
   169ec:	cmp	r0, #12
   169f0:	bne	16ac8 <read_boolean_binary_expression@@Base+0x154>
   169f4:	ldrd	r0, [r4, #64]	; 0x40
   169f8:	adds	r0, r0, #1
   169fc:	adc	r1, r1, #0
   16a00:	strd	r0, [r4, #64]	; 0x40
   16a04:	mov	r0, r7
   16a08:	bl	15ac8 <get_boolean_op_value@@Base>
   16a0c:	mov	r6, r0
   16a10:	mov	r0, r7
   16a14:	bl	14e90 <free_token_boolean_op@@Base>
   16a18:	ldr	r0, [r5]
   16a1c:	bl	12130 <next@@Base>
   16a20:	mov	r5, r0
   16a24:	ldr	r0, [r0]
   16a28:	cmp	r0, #1
   16a2c:	bne	16b04 <read_boolean_binary_expression@@Base+0x190>
   16a30:	ldrd	r0, [r4, #88]	; 0x58
   16a34:	adds	r0, r0, #1
   16a38:	adc	r1, r1, #0
   16a3c:	strd	r0, [r4, #88]	; 0x58
   16a40:	mov	r0, #12
   16a44:	bl	11efc <malloc@plt>
   16a48:	ldr	r1, [r5, #4]
   16a4c:	mov	r7, r0
   16a50:	bl	151a0 <init_node_int@@Base>
   16a54:	mov	r0, r5
   16a58:	bl	14bf0 <free_token_int_value@@Base>
   16a5c:	mov	r0, #20
   16a60:	bl	11efc <malloc@plt>
   16a64:	mov	r1, r6
   16a68:	mov	r2, r8
   16a6c:	mov	r3, r7
   16a70:	mov	r5, r0
   16a74:	bl	15360 <init_node_boolean_operator@@Base>
   16a78:	add	r6, r4, #104	; 0x68
   16a7c:	b	16b24 <read_boolean_binary_expression@@Base+0x1b0>
   16a80:	ldrd	r2, [r4, #8]
   16a84:	adds	r2, r2, #1
   16a88:	adc	r3, r3, #0
   16a8c:	cmp	r0, #12
   16a90:	strd	r2, [r4, #8]
   16a94:	bne	16ae8 <read_boolean_binary_expression@@Base+0x174>
   16a98:	ldrd	r0, [r4, #24]
   16a9c:	adds	r0, r0, #1
   16aa0:	adc	r1, r1, #0
   16aa4:	strd	r0, [r4, #24]
   16aa8:	mov	r1, r6
   16aac:	ldr	r0, [r5]
   16ab0:	bl	12370 <push_back@@Base>
   16ab4:	mov	r0, r5
   16ab8:	add	r6, r4, #40	; 0x28
   16abc:	bl	16b4c <read_boolean_unary_expression@@Base>
   16ac0:	mov	r5, r0
   16ac4:	b	16b24 <read_boolean_binary_expression@@Base+0x1b0>
   16ac8:	ldrd	r0, [r4, #56]	; 0x38
   16acc:	adds	r0, r0, #1
   16ad0:	adc	r1, r1, #0
   16ad4:	strd	r0, [r4, #56]	; 0x38
   16ad8:	mov	r0, r8
   16adc:	bl	153d0 <free_node@@Base>
   16ae0:	add	r6, r4, #72	; 0x48
   16ae4:	b	16b20 <read_boolean_binary_expression@@Base+0x1ac>
   16ae8:	ldrd	r0, [r4, #32]
   16aec:	add	r6, r4, #48	; 0x30
   16af0:	mov	r5, #0
   16af4:	adds	r0, r0, #1
   16af8:	adc	r1, r1, #0
   16afc:	strd	r0, [r4, #32]
   16b00:	b	16b24 <read_boolean_binary_expression@@Base+0x1b0>
   16b04:	ldrd	r0, [r4, #80]	; 0x50
   16b08:	adds	r0, r0, #1
   16b0c:	adc	r1, r1, #0
   16b10:	strd	r0, [r4, #80]	; 0x50
   16b14:	mov	r0, r8
   16b18:	bl	153d0 <free_node@@Base>
   16b1c:	add	r6, r4, #96	; 0x60
   16b20:	mov	r5, #0
   16b24:	ldrd	r0, [r6]
   16b28:	adds	r0, r0, #1
   16b2c:	adc	r1, r1, #0
   16b30:	strd	r0, [r6]
   16b34:	ldrd	r0, [r4, #112]	; 0x70
   16b38:	adds	r0, r0, #1
   16b3c:	adc	r1, r1, #0
   16b40:	strd	r0, [r4, #112]	; 0x70
   16b44:	mov	r0, r5
   16b48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016b4c <read_boolean_unary_expression@@Base>:
   16b4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b50:	add	fp, sp, #24
   16b54:	movw	r5, #52464	; 0xccf0
   16b58:	mov	r6, r0
   16b5c:	movt	r5, #2
   16b60:	ldrd	r0, [r5]
   16b64:	adds	r0, r0, #1
   16b68:	adc	r1, r1, #0
   16b6c:	strd	r0, [r5]
   16b70:	mov	r0, #20
   16b74:	bl	11efc <malloc@plt>
   16b78:	mov	r4, r0
   16b7c:	ldr	r0, [r6]
   16b80:	bl	12130 <next@@Base>
   16b84:	mov	r7, r0
   16b88:	ldr	r0, [r0]
   16b8c:	cmp	r0, #12
   16b90:	bne	16c18 <read_boolean_unary_expression@@Base+0xcc>
   16b94:	ldrd	r0, [r5, #16]
   16b98:	adds	r0, r0, #1
   16b9c:	adc	r1, r1, #0
   16ba0:	strd	r0, [r5, #16]
   16ba4:	mov	r0, r7
   16ba8:	bl	15ac8 <get_boolean_op_value@@Base>
   16bac:	mov	r8, r0
   16bb0:	mov	r0, r7
   16bb4:	bl	14e90 <free_token_boolean_op@@Base>
   16bb8:	ldr	r0, [r6]
   16bbc:	bl	12130 <next@@Base>
   16bc0:	mov	r6, r0
   16bc4:	ldr	r0, [r0]
   16bc8:	cmp	r0, #1
   16bcc:	bne	16c38 <read_boolean_unary_expression@@Base+0xec>
   16bd0:	ldrd	r0, [r5, #40]	; 0x28
   16bd4:	adds	r0, r0, #1
   16bd8:	adc	r1, r1, #0
   16bdc:	strd	r0, [r5, #40]	; 0x28
   16be0:	mov	r0, #12
   16be4:	bl	11efc <malloc@plt>
   16be8:	ldr	r1, [r6, #4]
   16bec:	mov	r7, r0
   16bf0:	bl	151a0 <init_node_int@@Base>
   16bf4:	mov	r0, r6
   16bf8:	bl	14bf0 <free_token_int_value@@Base>
   16bfc:	mov	r0, r4
   16c00:	mov	r1, r8
   16c04:	mov	r2, r7
   16c08:	mov	r3, #0
   16c0c:	bl	15360 <init_node_boolean_operator@@Base>
   16c10:	add	r0, r5, #56	; 0x38
   16c14:	b	16c58 <read_boolean_unary_expression@@Base+0x10c>
   16c18:	ldrd	r0, [r5, #8]
   16c1c:	adds	r0, r0, #1
   16c20:	adc	r1, r1, #0
   16c24:	strd	r0, [r5, #8]
   16c28:	mov	r0, r4
   16c2c:	bl	15a3c <free_node_boolean_operator@@Base>
   16c30:	add	r0, r5, #24
   16c34:	b	16c54 <read_boolean_unary_expression@@Base+0x108>
   16c38:	ldrd	r0, [r5, #32]
   16c3c:	adds	r0, r0, #1
   16c40:	adc	r1, r1, #0
   16c44:	strd	r0, [r5, #32]
   16c48:	mov	r0, r4
   16c4c:	bl	15a3c <free_node_boolean_operator@@Base>
   16c50:	add	r0, r5, #48	; 0x30
   16c54:	mov	r4, #0
   16c58:	ldrd	r2, [r0]
   16c5c:	adds	r2, r2, #1
   16c60:	adc	r3, r3, #0
   16c64:	strd	r2, [r0]
   16c68:	ldrd	r0, [r5, #64]	; 0x40
   16c6c:	adds	r0, r0, #1
   16c70:	adc	r1, r1, #0
   16c74:	strd	r0, [r5, #64]	; 0x40
   16c78:	mov	r0, r4
   16c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c80:	push	{r4, r5, fp, lr}
   16c84:	sub	sp, sp, #8
   16c88:	movw	r4, #51015	; 0xc747
   16c8c:	movw	r0, #45706	; 0xb28a
   16c90:	movw	r1, #42432	; 0xa5c0
   16c94:	movt	r4, #42604	; 0xa66c
   16c98:	movt	r0, #1
   16c9c:	movt	r1, #1
   16ca0:	mov	r2, r4
   16ca4:	bl	17098 <read_boolean_unary_expression@@Base+0x54c>
   16ca8:	movw	r1, #45798	; 0xb2e6
   16cac:	movw	r2, #61241	; 0xef39
   16cb0:	mov	r0, #0
   16cb4:	mov	r3, #0
   16cb8:	str	r4, [sp]
   16cbc:	movt	r1, #1
   16cc0:	movt	r2, #54721	; 0xd5c1
   16cc4:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16cc8:	movw	r5, #52544	; 0xcd40
   16ccc:	mov	r0, #2
   16cd0:	movt	r5, #2
   16cd4:	mov	r1, r5
   16cd8:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16cdc:	movw	r1, #45811	; 0xb2f3
   16ce0:	movw	r2, #31149	; 0x79ad
   16ce4:	mov	r0, #1
   16ce8:	mov	r3, #0
   16cec:	str	r4, [sp]
   16cf0:	movt	r1, #1
   16cf4:	movt	r2, #32504	; 0x7ef8
   16cf8:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16cfc:	add	r1, r5, #16
   16d00:	mov	r0, #2
   16d04:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16d08:	movw	r1, #45827	; 0xb303
   16d0c:	movw	r2, #62674	; 0xf4d2
   16d10:	mov	r0, #2
   16d14:	mov	r3, #0
   16d18:	str	r4, [sp]
   16d1c:	movt	r1, #1
   16d20:	movt	r2, #51839	; 0xca7f
   16d24:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16d28:	add	r1, r5, #32
   16d2c:	mov	r0, #2
   16d30:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16d34:	movw	r1, #45837	; 0xb30d
   16d38:	movw	r2, #50258	; 0xc452
   16d3c:	mov	r0, #3
   16d40:	mov	r3, #0
   16d44:	str	r4, [sp]
   16d48:	movt	r1, #1
   16d4c:	movt	r2, #14583	; 0x38f7
   16d50:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16d54:	movw	r1, #51776	; 0xca40
   16d58:	mov	r0, #15
   16d5c:	movt	r1, #2
   16d60:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16d64:	movw	r1, #45860	; 0xb324
   16d68:	movw	r2, #65081	; 0xfe39
   16d6c:	mov	r0, #4
   16d70:	mov	r3, #0
   16d74:	str	r4, [sp]
   16d78:	movt	r1, #1
   16d7c:	movt	r2, #65511	; 0xffe7
   16d80:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16d84:	movw	r1, #51904	; 0xcac0
   16d88:	mov	r0, #20
   16d8c:	movt	r1, #2
   16d90:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16d94:	movw	r1, #45870	; 0xb32e
   16d98:	movw	r2, #34025	; 0x84e9
   16d9c:	mov	r0, #5
   16da0:	mov	r3, #0
   16da4:	str	r4, [sp]
   16da8:	movt	r1, #1
   16dac:	movt	r2, #15032	; 0x3ab8
   16db0:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16db4:	movw	r1, #52064	; 0xcb60
   16db8:	mov	r0, #9
   16dbc:	movt	r1, #2
   16dc0:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16dc4:	movw	r1, #45893	; 0xb345
   16dc8:	movw	r2, #37900	; 0x940c
   16dcc:	mov	r0, #6
   16dd0:	mov	r3, #0
   16dd4:	str	r4, [sp]
   16dd8:	movt	r1, #1
   16ddc:	movt	r2, #58778	; 0xe59a
   16de0:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16de4:	movw	r1, #52144	; 0xcbb0
   16de8:	mov	r0, #10
   16dec:	movt	r1, #2
   16df0:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16df4:	movw	r1, #45911	; 0xb357
   16df8:	movw	r2, #17500	; 0x445c
   16dfc:	mov	r0, #7
   16e00:	mov	r3, #0
   16e04:	str	r4, [sp]
   16e08:	movt	r1, #1
   16e0c:	movt	r2, #19607	; 0x4c97
   16e10:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16e14:	movw	r1, #52224	; 0xcc00
   16e18:	mov	r0, #13
   16e1c:	movt	r1, #2
   16e20:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16e24:	movw	r1, #45935	; 0xb36f
   16e28:	movw	r2, #46658	; 0xb642
   16e2c:	mov	r0, #8
   16e30:	mov	r3, #0
   16e34:	str	r4, [sp]
   16e38:	movt	r1, #1
   16e3c:	movt	r2, #19123	; 0x4ab3
   16e40:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16e44:	add	r1, r5, #48	; 0x30
   16e48:	mov	r0, #8
   16e4c:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16e50:	movw	r1, #45966	; 0xb38e
   16e54:	movw	r2, #46373	; 0xb525
   16e58:	mov	r0, #9
   16e5c:	mov	r3, #0
   16e60:	str	r4, [sp]
   16e64:	movt	r1, #1
   16e68:	movt	r2, #5760	; 0x1680
   16e6c:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16e70:	movw	r1, #52336	; 0xcc70
   16e74:	mov	r0, #15
   16e78:	movt	r1, #2
   16e7c:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16e80:	movw	r1, #45997	; 0xb3ad
   16e84:	movw	r2, #43263	; 0xa8ff
   16e88:	mov	r0, #10
   16e8c:	mov	r3, #0
   16e90:	str	r4, [sp]
   16e94:	movt	r1, #1
   16e98:	movt	r2, #55516	; 0xd8dc
   16e9c:	bl	177b8 <read_boolean_unary_expression@@Base+0xc6c>
   16ea0:	movw	r1, #52464	; 0xccf0
   16ea4:	mov	r0, #9
   16ea8:	movt	r1, #2
   16eac:	bl	1806c <read_boolean_unary_expression@@Base+0x1520>
   16eb0:	bl	187f4 <read_boolean_unary_expression@@Base+0x1ca8>
   16eb4:	add	sp, sp, #8
   16eb8:	pop	{r4, r5, fp, lr}
   16ebc:	b	19560 <read_boolean_unary_expression@@Base+0x2a14>
   16ec0:	push	{r4, r5, r6, r7, r8, lr}
   16ec4:	vpush	{d8-d9}
   16ec8:	bl	16c80 <read_boolean_unary_expression@@Base+0x134>
   16ecc:	movw	r5, #52544	; 0xcd40
   16ed0:	vmov.i32	q4, #0	; 0x00000000
   16ed4:	mov	r4, #0
   16ed8:	mov	r8, #116	; 0x74
   16edc:	mov	r6, #64	; 0x40
   16ee0:	mov	r2, #160	; 0xa0
   16ee4:	movt	r5, #2
   16ee8:	add	r0, r5, #32
   16eec:	mov	r7, r5
   16ef0:	vst1.64	{d8-d9}, [r0 :128]
   16ef4:	add	r0, r5, #16
   16ef8:	vst1.64	{d8-d9}, [r0 :128]
   16efc:	movw	r0, #51776	; 0xca40
   16f00:	vst1.64	{d8-d9}, [r7 :128], r6
   16f04:	movt	r0, #2
   16f08:	add	r1, r0, #16
   16f0c:	str	r4, [r0, #112]	; 0x70
   16f10:	vst1.64	{d8-d9}, [r1 :128]
   16f14:	add	r1, r0, #32
   16f18:	vst1.64	{d8-d9}, [r1 :128]
   16f1c:	add	r1, r0, #48	; 0x30
   16f20:	vst1.64	{d8-d9}, [r1 :128]
   16f24:	add	r1, r0, #64	; 0x40
   16f28:	vst1.64	{d8-d9}, [r1 :128]
   16f2c:	add	r1, r0, #80	; 0x50
   16f30:	vst1.64	{d8-d9}, [r1 :128]
   16f34:	add	r1, r0, #96	; 0x60
   16f38:	vst1.64	{d8-d9}, [r0 :128], r8
   16f3c:	str	r4, [r0]
   16f40:	movw	r0, #51904	; 0xcac0
   16f44:	vst1.64	{d8-d9}, [r1 :128]
   16f48:	mov	r1, #0
   16f4c:	movt	r0, #2
   16f50:	bl	11f8c <memset@plt>
   16f54:	movw	r1, #52224	; 0xcc00
   16f58:	mov	r0, #100	; 0x64
   16f5c:	movw	r3, #52144	; 0xcbb0
   16f60:	vst1.64	{d8-d9}, [r7 :128]
   16f64:	movt	r1, #2
   16f68:	movt	r3, #2
   16f6c:	mov	r2, r1
   16f70:	str	r4, [r1, #96]	; 0x60
   16f74:	vst1.64	{d8-d9}, [r2 :128], r0
   16f78:	str	r4, [r2]
   16f7c:	movw	r2, #52064	; 0xcb60
   16f80:	movt	r2, #2
   16f84:	add	r0, r2, #16
   16f88:	str	r4, [r2, #64]	; 0x40
   16f8c:	vst1.64	{d8-d9}, [r0 :128]
   16f90:	add	r0, r2, #32
   16f94:	vst1.64	{d8-d9}, [r0 :128]
   16f98:	add	r0, r2, #48	; 0x30
   16f9c:	vst1.64	{d8-d9}, [r0 :128]
   16fa0:	add	r0, r3, #16
   16fa4:	vst1.64	{d8-d9}, [r0 :128]
   16fa8:	add	r0, r3, #32
   16fac:	vst1.64	{d8-d9}, [r0 :128]
   16fb0:	add	r0, r3, #48	; 0x30
   16fb4:	vst1.64	{d8-d9}, [r3 :128], r6
   16fb8:	vst1.64	{d8-d9}, [r0 :128]
   16fbc:	add	r0, r1, #16
   16fc0:	vst1.64	{d8-d9}, [r3 :128]
   16fc4:	vst1.64	{d8-d9}, [r0 :128]
   16fc8:	add	r0, r1, #32
   16fcc:	vst1.64	{d8-d9}, [r0 :128]
   16fd0:	add	r0, r1, #48	; 0x30
   16fd4:	vst1.64	{d8-d9}, [r0 :128]
   16fd8:	add	r0, r1, #64	; 0x40
   16fdc:	vst1.64	{d8-d9}, [r0 :128]
   16fe0:	add	r0, r1, #80	; 0x50
   16fe4:	add	r1, r5, #48	; 0x30
   16fe8:	vst1.64	{d8-d9}, [r1 :128]
   16fec:	add	r1, r5, #80	; 0x50
   16ff0:	vst1.64	{d8-d9}, [r0 :128]
   16ff4:	mov	r0, #68	; 0x44
   16ff8:	vst1.64	{d8-d9}, [r1 :128]
   16ffc:	add	r1, r5, #96	; 0x60
   17000:	vst1.64	{d8-d9}, [r2 :128], r0
   17004:	vst1.64	{d8-d9}, [r1 :128]
   17008:	movw	r1, #52336	; 0xcc70
   1700c:	str	r4, [r2]
   17010:	movt	r1, #2
   17014:	add	r2, r1, #96	; 0x60
   17018:	str	r4, [r1, #112]	; 0x70
   1701c:	vst1.64	{d8-d9}, [r2 :128]
   17020:	add	r2, r1, #80	; 0x50
   17024:	vst1.64	{d8-d9}, [r2 :128]
   17028:	add	r2, r1, #64	; 0x40
   1702c:	vst1.64	{d8-d9}, [r2 :128]
   17030:	add	r2, r1, #48	; 0x30
   17034:	vst1.64	{d8-d9}, [r2 :128]
   17038:	add	r2, r1, #32
   1703c:	vst1.64	{d8-d9}, [r2 :128]
   17040:	add	r2, r1, #16
   17044:	vst1.64	{d8-d9}, [r1 :128], r8
   17048:	str	r4, [r1]
   1704c:	movw	r1, #52464	; 0xccf0
   17050:	vst1.64	{d8-d9}, [r2 :128]
   17054:	movt	r1, #2
   17058:	add	r2, r1, #48	; 0x30
   1705c:	str	r4, [r1, #64]	; 0x40
   17060:	vst1.64	{d8-d9}, [r2 :128]
   17064:	add	r2, r1, #32
   17068:	vst1.64	{d8-d9}, [r2 :128]
   1706c:	add	r2, r1, #16
   17070:	vst1.64	{d8-d9}, [r1 :128], r0
   17074:	vst1.64	{d8-d9}, [r2 :128]
   17078:	str	r4, [r1]
   1707c:	vpop	{d8-d9}
   17080:	pop	{r4, r5, r6, r7, r8, pc}
   17084:	movw	r0, #27776	; 0x6c80
   17088:	movw	r1, #28352	; 0x6ec0
   1708c:	movt	r0, #1
   17090:	movt	r1, #1
   17094:	b	19a14 <__gcov_flush@@Base+0xb8>
   17098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1709c:	add	fp, sp, #28
   170a0:	sub	sp, sp, #36	; 0x24
   170a4:	mov	r9, r1
   170a8:	mov	r6, r0
   170ac:	add	r0, sp, #28
   170b0:	add	r1, sp, #32
   170b4:	mov	r8, r2
   170b8:	bl	19eac <__gcov_flush@@Base+0x550>
   170bc:	cmp	r0, #0
   170c0:	beq	17104 <read_boolean_unary_expression@@Base+0x5b8>
   170c4:	mov	r4, r0
   170c8:	mov	r0, r6
   170cc:	ldr	r5, [sp, #32]
   170d0:	bl	11f44 <strlen@plt>
   170d4:	add	r0, r5, r0
   170d8:	add	r0, r0, #2
   170dc:	bl	11efc <malloc@plt>
   170e0:	mov	r7, r0
   170e4:	ldr	r0, [sp, #28]
   170e8:	mov	r1, r6
   170ec:	mov	r2, r4
   170f0:	str	r0, [sp]
   170f4:	mov	r0, r7
   170f8:	mov	r3, r5
   170fc:	bl	19f40 <__gcov_flush@@Base+0x5e4>
   17100:	b	17110 <read_boolean_unary_expression@@Base+0x5c4>
   17104:	mov	r0, r6
   17108:	bl	11eb4 <strdup@plt>
   1710c:	mov	r7, r0
   17110:	ldr	r0, [pc, #1492]	; 176ec <read_boolean_unary_expression@@Base+0xba0>
   17114:	ldr	r6, [pc, #1492]	; 176f0 <read_boolean_unary_expression@@Base+0xba4>
   17118:	mov	r1, #2
   1711c:	add	r0, pc, r0
   17120:	add	r6, pc, r6
   17124:	str	r7, [r0]
   17128:	mov	r0, r7
   1712c:	mov	r5, #0
   17130:	strb	r5, [r6]
   17134:	bl	11ed8 <open64@plt>
   17138:	ldr	r4, [pc, #1460]	; 176f4 <read_boolean_unary_expression@@Base+0xba8>
   1713c:	cmn	r0, #1
   17140:	add	r4, pc, r4
   17144:	str	r0, [r4]
   17148:	beq	17158 <read_boolean_unary_expression@@Base+0x60c>
   1714c:	ldr	r6, [pc, #1444]	; 176f8 <read_boolean_unary_expression@@Base+0xbac>
   17150:	add	r6, pc, r6
   17154:	b	171b4 <read_boolean_unary_expression@@Base+0x668>
   17158:	mov	r0, #1
   1715c:	strb	r0, [r6]
   17160:	ldr	r0, [pc, #1488]	; 17738 <read_boolean_unary_expression@@Base+0xbec>
   17164:	mov	r1, #66	; 0x42
   17168:	mov	r2, #420	; 0x1a4
   1716c:	ldr	r0, [pc, r0]
   17170:	bl	11ed8 <open64@plt>
   17174:	ldr	r6, [pc, #1472]	; 1773c <read_boolean_unary_expression@@Base+0xbf0>
   17178:	cmn	r0, #1
   1717c:	str	r0, [r4]
   17180:	add	r6, pc, r6
   17184:	bne	171b4 <read_boolean_unary_expression@@Base+0x668>
   17188:	ldr	r0, [pc, #1456]	; 17740 <read_boolean_unary_expression@@Base+0xbf4>
   1718c:	ldr	r0, [pc, r0]
   17190:	bl	19b24 <__gcov_flush@@Base+0x1c8>
   17194:	ldr	r0, [pc, #1448]	; 17744 <read_boolean_unary_expression@@Base+0xbf8>
   17198:	mov	r1, #66	; 0x42
   1719c:	mov	r2, #420	; 0x1a4
   171a0:	ldr	r0, [pc, r0]
   171a4:	bl	11ed8 <open64@plt>
   171a8:	cmn	r0, #1
   171ac:	str	r0, [r4]
   171b0:	beq	176a4 <read_boolean_unary_expression@@Base+0xb58>
   171b4:	str	r9, [sp, #20]
   171b8:	str	r8, [sp, #24]
   171bc:	bl	19be8 <__gcov_flush@@Base+0x28c>
   171c0:	ldr	r0, [pc, #1332]	; 176fc <read_boolean_unary_expression@@Base+0xbb0>
   171c4:	mov	r1, r6
   171c8:	ldr	r0, [pc, r0]
   171cc:	bl	11e3c <fdopen@plt>
   171d0:	ldr	r7, [pc, #1320]	; 17700 <read_boolean_unary_expression@@Base+0xbb4>
   171d4:	ldr	r9, [pc, #1320]	; 17704 <read_boolean_unary_expression@@Base+0xbb8>
   171d8:	ldr	r1, [pc, #1320]	; 17708 <read_boolean_unary_expression@@Base+0xbbc>
   171dc:	ldr	sl, [pc, #1320]	; 1770c <read_boolean_unary_expression@@Base+0xbc0>
   171e0:	add	r7, pc, r7
   171e4:	add	r9, pc, r9
   171e8:	add	r1, pc, r1
   171ec:	add	sl, pc, sl
   171f0:	str	r5, [r7]
   171f4:	str	r5, [r7, #4]
   171f8:	str	r5, [r9]
   171fc:	str	r5, [r9, #4]
   17200:	str	r0, [r1]
   17204:	str	r5, [sl]
   17208:	ldr	r6, [pc, #1280]	; 17710 <read_boolean_unary_expression@@Base+0xbc4>
   1720c:	mov	r4, #131072	; 0x20000
   17210:	add	r6, pc, r6
   17214:	ldrb	r1, [r6]
   17218:	cmp	r1, #0
   1721c:	beq	17310 <read_boolean_unary_expression@@Base+0x7c4>
   17220:	mov	r0, r4
   17224:	bl	11efc <malloc@plt>
   17228:	mov	r8, r0
   1722c:	strd	r4, [r7]
   17230:	str	r0, [sl]
   17234:	mov	r0, r8
   17238:	mov	r1, #0
   1723c:	mov	r2, #131072	; 0x20000
   17240:	bl	11f8c <memset@plt>
   17244:	ldr	r0, [r9, #4]
   17248:	ldr	r1, [pc, #1284]	; 17754 <read_boolean_unary_expression@@Base+0xc08>
   1724c:	mov	r7, #7
   17250:	orr	r7, r7, #131072	; 0x20000
   17254:	ldr	r1, [pc, r1]
   17258:	ldr	sl, [pc, #1272]	; 17758 <read_boolean_unary_expression@@Base+0xc0c>
   1725c:	adds	r2, r1, #4
   17260:	add	sl, pc, sl
   17264:	adc	r3, r0, #0
   17268:	ldr	r5, [sl, #4]
   1726c:	ldr	r4, [pc, #1256]	; 1775c <read_boolean_unary_expression@@Base+0xc10>
   17270:	ldr	r4, [pc, r4]
   17274:	subs	r2, r4, r2
   17278:	sbcs	r2, r5, r3
   1727c:	bcs	17390 <read_boolean_unary_expression@@Base+0x844>
   17280:	adds	r1, r7, r1
   17284:	adc	r0, r0, #0
   17288:	subs	r1, r1, #4
   1728c:	sbc	r0, r0, #0
   17290:	mvn	r2, #0
   17294:	and	r5, r0, r2
   17298:	mov	r0, #16646144	; 0xfe0000
   1729c:	orr	r0, r0, #-16777216	; 0xff000000
   172a0:	and	r4, r1, r0
   172a4:	mov	r0, r8
   172a8:	mov	r1, r4
   172ac:	bl	11ec0 <realloc@plt>
   172b0:	ldr	r1, [pc, #1068]	; 176e4 <read_boolean_unary_expression@@Base+0xb98>
   172b4:	strd	r4, [sl]
   172b8:	mov	r3, r0
   172bc:	mov	r7, r1
   172c0:	lsr	r2, r1, #24
   172c4:	ldr	r1, [pc, #1176]	; 17764 <read_boolean_unary_expression@@Base+0xc18>
   172c8:	ldrb	r6, [r6]
   172cc:	lsr	r4, r7, #16
   172d0:	add	r1, pc, r1
   172d4:	str	r0, [r1]
   172d8:	ldr	r1, [r9, #4]
   172dc:	ldr	r5, [pc, #1156]	; 17768 <read_boolean_unary_expression@@Base+0xc1c>
   172e0:	ldr	r5, [pc, r5]
   172e4:	strb	r7, [r3, r5]!
   172e8:	strb	r2, [r3, #3]
   172ec:	lsr	r2, r7, #8
   172f0:	strb	r2, [r3, #1]
   172f4:	adds	r2, r5, #4
   172f8:	adc	ip, r1, #0
   172fc:	cmp	r6, #1
   17300:	strb	r4, [r3, #2]
   17304:	stm	r9, {r2, ip}
   17308:	beq	173d4 <read_boolean_unary_expression@@Base+0x888>
   1730c:	b	1758c <read_boolean_unary_expression@@Base+0xa40>
   17310:	mov	r1, #0
   17314:	mov	r2, #2
   17318:	mov	r8, #0
   1731c:	bl	12004 <fseek@plt>
   17320:	ldr	r0, [pc, #1004]	; 17714 <read_boolean_unary_expression@@Base+0xbc8>
   17324:	ldr	r0, [pc, r0]
   17328:	bl	11e9c <ftell@plt>
   1732c:	mov	r2, r0
   17330:	ldr	r0, [pc, #992]	; 17718 <read_boolean_unary_expression@@Base+0xbcc>
   17334:	asr	r3, r2, #31
   17338:	add	r0, pc, r0
   1733c:	cmp	r2, #0
   17340:	strd	r2, [r0]
   17344:	beq	17634 <read_boolean_unary_expression@@Base+0xae8>
   17348:	ldr	r0, [pc, #972]	; 1771c <read_boolean_unary_expression@@Base+0xbd0>
   1734c:	mov	r1, r2
   17350:	mov	r2, #3
   17354:	mov	r3, #1
   17358:	ldr	r0, [pc, r0]
   1735c:	str	r8, [sp, #8]
   17360:	str	r8, [sp, #12]
   17364:	str	r0, [sp]
   17368:	mov	r0, #0
   1736c:	bl	11e90 <mmap64@plt>
   17370:	cmn	r0, #1
   17374:	str	r0, [sl]
   17378:	beq	175fc <read_boolean_unary_expression@@Base+0xab0>
   1737c:	ldrb	r1, [r6]
   17380:	cmp	r1, #0
   17384:	beq	1754c <read_boolean_unary_expression@@Base+0xa00>
   17388:	mov	r8, r0
   1738c:	b	17244 <read_boolean_unary_expression@@Base+0x6f8>
   17390:	ldr	r1, [r9, #4]
   17394:	ldr	r5, [pc, #964]	; 17760 <read_boolean_unary_expression@@Base+0xc14>
   17398:	ldr	r0, [pc, #836]	; 176e4 <read_boolean_unary_expression@@Base+0xb98>
   1739c:	mov	r6, r8
   173a0:	ldr	r5, [pc, r5]
   173a4:	mov	r7, r0
   173a8:	lsr	r2, r7, #16
   173ac:	strb	r7, [r6, r5]!
   173b0:	lsr	r0, r0, #24
   173b4:	lsr	r3, r7, #8
   173b8:	strb	r2, [r6, #2]
   173bc:	adds	r2, r5, #4
   173c0:	strb	r0, [r6, #3]
   173c4:	strb	r3, [r6, #1]
   173c8:	adc	ip, r1, #0
   173cc:	stm	r9, {r2, ip}
   173d0:	mov	r0, r8
   173d4:	ldr	r7, [sl, #4]
   173d8:	ldr	r3, [pc, #908]	; 1776c <read_boolean_unary_expression@@Base+0xc20>
   173dc:	adds	r6, r5, #8
   173e0:	adc	r4, r1, #0
   173e4:	ldr	r3, [pc, r3]
   173e8:	subs	r3, r3, r6
   173ec:	sbcs	r3, r7, r4
   173f0:	bcs	17494 <read_boolean_unary_expression@@Base+0x948>
   173f4:	mov	r2, #7
   173f8:	orr	r2, r2, #131072	; 0x20000
   173fc:	adds	r2, r5, r2
   17400:	adc	r1, r1, #0
   17404:	mvn	r3, #0
   17408:	and	r5, r1, r3
   1740c:	mov	r1, #16646144	; 0xfe0000
   17410:	orr	r1, r1, #-16777216	; 0xff000000
   17414:	and	r4, r2, r1
   17418:	mov	r1, r4
   1741c:	bl	11ec0 <realloc@plt>
   17420:	strd	r4, [sl]
   17424:	ldr	r1, [pc, #840]	; 17774 <read_boolean_unary_expression@@Base+0xc28>
   17428:	mov	r4, r0
   1742c:	mov	lr, r9
   17430:	add	r1, pc, r1
   17434:	str	r0, [r1]
   17438:	ldr	r1, [pc, #824]	; 17778 <read_boolean_unary_expression@@Base+0xc2c>
   1743c:	ldr	r2, [sp, #20]
   17440:	ldr	ip, [r9, #4]
   17444:	add	r1, pc, r1
   17448:	ldrb	r3, [r1]
   1744c:	ldrb	r1, [r2]
   17450:	ldrb	r7, [r2, #1]
   17454:	ldrb	r6, [r2, #2]
   17458:	ldrb	r5, [r2, #3]
   1745c:	ldr	r2, [pc, #792]	; 1777c <read_boolean_unary_expression@@Base+0xc30>
   17460:	ldr	r2, [pc, r2]
   17464:	strb	r1, [r4, r2]!
   17468:	strb	r5, [r4, #3]
   1746c:	ldr	r5, [sp, #24]
   17470:	strb	r6, [r4, #2]
   17474:	adds	r6, r2, #4
   17478:	adc	r1, ip, #0
   1747c:	cmp	r3, #1
   17480:	str	r6, [lr]
   17484:	strb	r7, [r4, #1]
   17488:	str	r1, [lr, #4]
   1748c:	beq	174d4 <read_boolean_unary_expression@@Base+0x988>
   17490:	b	175cc <read_boolean_unary_expression@@Base+0xa80>
   17494:	ldr	r6, [sp, #20]
   17498:	mov	r5, r0
   1749c:	ldrb	r1, [r6]
   174a0:	ldrb	r3, [r6, #1]
   174a4:	ldrb	r7, [r6, #2]
   174a8:	ldrb	r6, [r6, #3]
   174ac:	strb	r1, [r5, r2]!
   174b0:	strb	r6, [r5, #3]
   174b4:	strb	r3, [r5, #1]
   174b8:	adds	r6, r2, #4
   174bc:	mov	r3, r9
   174c0:	adc	r1, ip, #0
   174c4:	strb	r7, [r5, #2]
   174c8:	str	r6, [r3]
   174cc:	str	r1, [r3, #4]
   174d0:	ldr	r5, [sp, #24]
   174d4:	ldr	r7, [sl, #4]
   174d8:	ldr	r4, [pc, #672]	; 17780 <read_boolean_unary_expression@@Base+0xc34>
   174dc:	adds	r3, r2, #8
   174e0:	adc	lr, ip, #0
   174e4:	ldr	r4, [pc, r4]
   174e8:	subs	r3, r4, r3
   174ec:	sbcs	r3, r7, lr
   174f0:	bcs	17544 <read_boolean_unary_expression@@Base+0x9f8>
   174f4:	mov	r1, #7
   174f8:	orr	r1, r1, #131072	; 0x20000
   174fc:	adds	r1, r2, r1
   17500:	adc	r2, ip, #0
   17504:	mvn	r3, #0
   17508:	and	r7, r2, r3
   1750c:	mov	r2, #16646144	; 0xfe0000
   17510:	orr	r2, r2, #-16777216	; 0xff000000
   17514:	and	r4, r1, r2
   17518:	mov	r1, r4
   1751c:	bl	11ec0 <realloc@plt>
   17520:	stm	sl, {r4, r7}
   17524:	ldr	r1, [r9, #4]
   17528:	ldr	r2, [pc, #596]	; 17784 <read_boolean_unary_expression@@Base+0xc38>
   1752c:	mov	lr, r9
   17530:	add	r2, pc, r2
   17534:	str	r0, [r2]
   17538:	ldr	r6, [pc, #584]	; 17788 <read_boolean_unary_expression@@Base+0xc3c>
   1753c:	ldr	r6, [pc, r6]
   17540:	b	175cc <read_boolean_unary_expression@@Base+0xa80>
   17544:	mov	lr, r9
   17548:	b	175cc <read_boolean_unary_expression@@Base+0xa80>
   1754c:	ldr	r6, [r9, #4]
   17550:	ldr	r5, [pc, #536]	; 17770 <read_boolean_unary_expression@@Base+0xc24>
   17554:	ldr	r1, [pc, #392]	; 176e4 <read_boolean_unary_expression@@Base+0xb98>
   17558:	mov	r4, r0
   1755c:	ldr	r5, [pc, r5]
   17560:	mov	r7, r1
   17564:	lsr	r2, r7, #16
   17568:	strb	r7, [r4, r5]!
   1756c:	lsr	r1, r1, #24
   17570:	strb	r2, [r4, #2]
   17574:	adds	r2, r5, #4
   17578:	lsr	r3, r7, #8
   1757c:	adc	ip, r6, #0
   17580:	strb	r1, [r4, #3]
   17584:	strb	r3, [r4, #1]
   17588:	stm	r9, {r2, ip}
   1758c:	ldr	r4, [sp, #20]
   17590:	mov	r5, r0
   17594:	mov	lr, r9
   17598:	ldrb	r1, [r4]
   1759c:	ldrb	r6, [r4, #3]
   175a0:	ldrb	r3, [r4, #1]
   175a4:	ldrb	r7, [r4, #2]
   175a8:	strb	r1, [r5, r2]!
   175ac:	strb	r6, [r5, #3]
   175b0:	adds	r6, r2, #4
   175b4:	adc	r1, ip, #0
   175b8:	strb	r7, [r5, #2]
   175bc:	strb	r3, [r5, #1]
   175c0:	str	r6, [lr]
   175c4:	str	r1, [lr, #4]
   175c8:	ldr	r5, [sp, #24]
   175cc:	lsr	r2, r5, #24
   175d0:	strb	r5, [r0, r6]!
   175d4:	lsr	r3, r5, #16
   175d8:	lsr	r7, r5, #8
   175dc:	strb	r2, [r0, #3]
   175e0:	strb	r3, [r0, #2]
   175e4:	strb	r7, [r0, #1]
   175e8:	adds	r0, r6, #4
   175ec:	adc	r1, r1, #0
   175f0:	strd	r0, [lr]
   175f4:	sub	sp, fp, #28
   175f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175fc:	bl	11f68 <__errno_location@plt>
   17600:	ldr	r1, [pc, #280]	; 17720 <read_boolean_unary_expression@@Base+0xbd4>
   17604:	ldr	r1, [pc, r1]
   17608:	ldr	r0, [r0]
   1760c:	ldr	r4, [r1]
   17610:	ldr	r5, [pc, #268]	; 17724 <read_boolean_unary_expression@@Base+0xbd8>
   17614:	ldr	r5, [pc, r5]
   17618:	bl	11f14 <strerror@plt>
   1761c:	ldr	r1, [pc, #260]	; 17728 <read_boolean_unary_expression@@Base+0xbdc>
   17620:	mov	r3, r0
   17624:	mov	r0, r4
   17628:	add	r1, pc, r1
   1762c:	mov	r2, r5
   17630:	bl	11f5c <fprintf@plt>
   17634:	ldr	r0, [pc, #240]	; 1772c <read_boolean_unary_expression@@Base+0xbe0>
   17638:	str	r8, [sl]
   1763c:	mov	r2, #16646144	; 0xfe0000
   17640:	add	r0, pc, r0
   17644:	orr	r2, r2, #-16777216	; 0xff000000
   17648:	str	r8, [r0]
   1764c:	str	r8, [r0, #4]
   17650:	mov	r0, #1
   17654:	strb	r0, [r6]
   17658:	ldr	r0, [r9, #4]
   1765c:	ldr	r1, [pc, #204]	; 17730 <read_boolean_unary_expression@@Base+0xbe4>
   17660:	mvn	r3, #0
   17664:	eor	r3, r0, r3
   17668:	ldr	r1, [pc, r1]
   1766c:	eor	r2, r1, r2
   17670:	orrs	r2, r2, r3
   17674:	beq	17234 <read_boolean_unary_expression@@Base+0x6e8>
   17678:	ldr	r2, [pc, #104]	; 176e8 <read_boolean_unary_expression@@Base+0xb9c>
   1767c:	ldr	r7, [pc, #176]	; 17734 <read_boolean_unary_expression@@Base+0xbe8>
   17680:	adds	r1, r1, r2
   17684:	mov	r2, #16646144	; 0xfe0000
   17688:	orr	r2, r2, #-16777216	; 0xff000000
   1768c:	and	r4, r1, r2
   17690:	adc	r0, r0, #0
   17694:	mvn	r1, #0
   17698:	and	r5, r0, r1
   1769c:	add	r7, pc, r7
   176a0:	b	17220 <read_boolean_unary_expression@@Base+0x6d4>
   176a4:	bl	11f68 <__errno_location@plt>
   176a8:	ldr	r1, [pc, #152]	; 17748 <read_boolean_unary_expression@@Base+0xbfc>
   176ac:	ldr	r1, [pc, r1]
   176b0:	ldr	r0, [r0]
   176b4:	ldr	r4, [r1]
   176b8:	ldr	r5, [pc, #140]	; 1774c <read_boolean_unary_expression@@Base+0xc00>
   176bc:	ldr	r5, [pc, r5]
   176c0:	bl	11f14 <strerror@plt>
   176c4:	ldr	r1, [pc, #132]	; 17750 <read_boolean_unary_expression@@Base+0xc04>
   176c8:	mov	r3, r0
   176cc:	mov	r0, r4
   176d0:	add	r1, pc, r1
   176d4:	mov	r2, r5
   176d8:	bl	11f5c <fprintf@plt>
   176dc:	sub	sp, fp, #28
   176e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e4:	strbvs	r6, [r3, -r1, ror #8]!
   176e8:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   176ec:	andeq	r5, r1, ip, lsl #25
   176f0:	andeq	r5, r1, ip, lsl #25
   176f4:	andeq	r4, r1, r8, lsl #31
   176f8:	andeq	r4, r0, r3, ror r2
   176fc:	andeq	r4, r1, r0, lsl #30
   17700:	ldrdeq	r5, [r1], -r8
   17704:	ldrdeq	r5, [r1], -ip
   17708:	andeq	r5, r1, r8, asr #23
   1770c:	andeq	r5, r1, r8, asr #23
   17710:	muleq	r1, ip, fp
   17714:	andeq	r5, r1, ip, lsl #21
   17718:	andeq	r5, r1, r0, lsr #21
   1771c:	andeq	r4, r1, r0, ror sp
   17720:			; <UNDEFINED> instruction: 0x00014ab4
   17724:	muleq	r1, r4, r7
   17728:	strdeq	r3, [r0], -sp
   1772c:	andeq	r5, r1, r8, ror r7
   17730:	andeq	r5, r1, r8, asr r7
   17734:	andeq	r5, r1, ip, lsl r7
   17738:	andeq	r5, r1, ip, lsr ip
   1773c:	andeq	r4, r0, r7, asr #4
   17740:	andeq	r5, r1, ip, lsl ip
   17744:	andeq	r5, r1, r8, lsl #24
   17748:	andeq	r4, r1, ip, lsl #20
   1774c:	andeq	r5, r1, ip, ror #13
   17750:	strdeq	r3, [r0], -fp
   17754:	andeq	r5, r1, ip, ror #22
   17758:	andeq	r5, r1, r8, asr fp
   1775c:	andeq	r5, r1, r8, asr #22
   17760:	andeq	r5, r1, r0, lsr #20
   17764:	andeq	r5, r1, r4, ror #21
   17768:	andeq	r5, r1, r0, ror #21
   1776c:	ldrdeq	r5, [r1], -r4
   17770:	andeq	r5, r1, r4, ror #16
   17774:	andeq	r5, r1, r4, lsl #19
   17778:	andeq	r5, r1, r8, ror #18
   1777c:	andeq	r5, r1, r0, ror #18
   17780:	ldrdeq	r5, [r1], -r4
   17784:	andeq	r5, r1, r4, lsl #17
   17788:	andeq	r5, r1, r4, lsl #17
   1778c:	ldr	r0, [r0]
   17790:	cmn	r0, #1
   17794:	beq	177b4 <read_boolean_unary_expression@@Base+0xc68>
   17798:	ldr	r0, [r1, r0, lsl #2]
   1779c:	cmp	r0, #0
   177a0:	bxeq	lr
   177a4:	ldrd	r2, [r0]
   177a8:	adds	r2, r2, #1
   177ac:	adc	r3, r3, #0
   177b0:	strd	r2, [r0]
   177b4:	bx	lr
   177b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177bc:	add	fp, sp, #28
   177c0:	sub	sp, sp, #12
   177c4:	ldr	r7, [pc, #2008]	; 17fa4 <read_boolean_unary_expression@@Base+0x1458>
   177c8:	mov	sl, #2
   177cc:	cmp	r3, #0
   177d0:	movne	sl, #3
   177d4:	ldr	r7, [pc, r7]
   177d8:	cmp	r7, #0
   177dc:	beq	17f9c <read_boolean_unary_expression@@Base+0x1450>
   177e0:	stm	sp, {r0, r2, r3}
   177e4:	ldr	r0, [pc, #1980]	; 17fa8 <read_boolean_unary_expression@@Base+0x145c>
   177e8:	mov	r5, r1
   177ec:	add	r0, pc, r0
   177f0:	ldrb	r0, [r0]
   177f4:	ldr	r8, [pc, #1968]	; 17fac <read_boolean_unary_expression@@Base+0x1460>
   177f8:	cmp	r0, #1
   177fc:	add	r8, pc, r8
   17800:	bne	17884 <read_boolean_unary_expression@@Base+0xd38>
   17804:	ldr	r4, [pc, #1956]	; 17fb0 <read_boolean_unary_expression@@Base+0x1464>
   17808:	ldr	r0, [r8, #4]
   1780c:	ldr	r1, [pc, #1952]	; 17fb4 <read_boolean_unary_expression@@Base+0x1468>
   17810:	add	r4, pc, r4
   17814:	ldr	r1, [pc, r1]
   17818:	ldr	r7, [r4, #4]
   1781c:	ldr	r6, [pc, #1940]	; 17fb8 <read_boolean_unary_expression@@Base+0x146c>
   17820:	adds	r2, r1, #4
   17824:	adc	r3, r0, #0
   17828:	ldr	r6, [pc, r6]
   1782c:	subs	r2, r6, r2
   17830:	sbcs	r2, r7, r3
   17834:	bcs	17884 <read_boolean_unary_expression@@Base+0xd38>
   17838:	mov	r2, #7
   1783c:	orr	r2, r2, #131072	; 0x20000
   17840:	adds	r1, r2, r1
   17844:	adc	r0, r0, #0
   17848:	subs	r1, r1, #4
   1784c:	sbc	r0, r0, #0
   17850:	mvn	r2, #0
   17854:	and	r7, r0, r2
   17858:	mov	r0, #16646144	; 0xfe0000
   1785c:	orr	r0, r0, #-16777216	; 0xff000000
   17860:	ldr	r9, [pc, #1876]	; 17fbc <read_boolean_unary_expression@@Base+0x1470>
   17864:	and	r6, r1, r0
   17868:	ldr	r0, [pc, #1872]	; 17fc0 <read_boolean_unary_expression@@Base+0x1474>
   1786c:	mov	r1, r6
   17870:	add	r9, pc, r9
   17874:	ldr	r0, [pc, r0]
   17878:	bl	11ec0 <realloc@plt>
   1787c:	strd	r6, [r4]
   17880:	str	r0, [r9]
   17884:	ldr	r7, [pc, #1848]	; 17fc4 <read_boolean_unary_expression@@Base+0x1478>
   17888:	mov	r0, #0
   1788c:	mov	r2, #1
   17890:	ldr	r7, [pc, r7]
   17894:	ldr	ip, [pc, #1836]	; 17fc8 <read_boolean_unary_expression@@Base+0x147c>
   17898:	adds	r4, r7, #4
   1789c:	ldr	ip, [pc, ip]
   178a0:	ldr	r6, [r8, #4]
   178a4:	mov	r1, ip
   178a8:	adc	r9, r6, #0
   178ac:	strb	r0, [r1, r7]!
   178b0:	cmp	r5, #0
   178b4:	strb	r2, [r1, #3]
   178b8:	strb	r0, [r1, #2]
   178bc:	strb	r0, [r1, #1]
   178c0:	stm	r8, {r4, r9}
   178c4:	mov	r8, r5
   178c8:	beq	178e4 <read_boolean_unary_expression@@Base+0xd98>
   178cc:	mov	r0, r8
   178d0:	mov	r5, ip
   178d4:	bl	11f44 <strlen@plt>
   178d8:	add	r0, sl, r0, lsr #2
   178dc:	mov	ip, r5
   178e0:	add	sl, r0, #2
   178e4:	ldr	r0, [pc, #1760]	; 17fcc <read_boolean_unary_expression@@Base+0x1480>
   178e8:	add	r0, pc, r0
   178ec:	ldrb	r0, [r0]
   178f0:	cmp	r0, #0
   178f4:	beq	179d0 <read_boolean_unary_expression@@Base+0xe84>
   178f8:	ldr	lr, [pc, #1748]	; 17fd4 <read_boolean_unary_expression@@Base+0x1488>
   178fc:	adds	r0, r7, #8
   17900:	adc	r1, r6, #0
   17904:	add	lr, pc, lr
   17908:	ldr	r2, [lr, #4]
   1790c:	ldr	r3, [pc, #1732]	; 17fd8 <read_boolean_unary_expression@@Base+0x148c>
   17910:	ldr	r3, [pc, r3]
   17914:	subs	r0, r3, r0
   17918:	sbcs	r0, r2, r1
   1791c:	bcs	17a3c <read_boolean_unary_expression@@Base+0xef0>
   17920:	mov	r0, #7
   17924:	orr	r0, r0, #131072	; 0x20000
   17928:	adds	r0, r7, r0
   1792c:	adc	r1, r6, #0
   17930:	mvn	r2, #0
   17934:	and	r5, r1, r2
   17938:	mov	r1, #16646144	; 0xfe0000
   1793c:	orr	r1, r1, #-16777216	; 0xff000000
   17940:	and	r6, r0, r1
   17944:	ldr	r4, [pc, #1684]	; 17fe0 <read_boolean_unary_expression@@Base+0x1494>
   17948:	mov	r0, ip
   1794c:	mov	r1, r6
   17950:	add	r4, pc, r4
   17954:	mov	r7, lr
   17958:	bl	11ec0 <realloc@plt>
   1795c:	mov	lr, r7
   17960:	mov	ip, r0
   17964:	str	r6, [lr]
   17968:	str	r5, [lr, #4]
   1796c:	str	ip, [r4]
   17970:	ldr	r1, [pc, #1644]	; 17fe4 <read_boolean_unary_expression@@Base+0x1498>
   17974:	lsr	r0, sl, #24
   17978:	add	r1, pc, r1
   1797c:	lsr	r3, sl, #16
   17980:	ldrb	r2, [r1]
   17984:	ldr	r1, [pc, #1628]	; 17fe8 <read_boolean_unary_expression@@Base+0x149c>
   17988:	add	r1, pc, r1
   1798c:	mov	r7, r1
   17990:	ldr	r9, [r1, #4]
   17994:	ldr	r4, [pc, #1616]	; 17fec <read_boolean_unary_expression@@Base+0x14a0>
   17998:	mov	r1, ip
   1799c:	ldr	r4, [pc, r4]
   179a0:	strb	sl, [r1, r4]!
   179a4:	strb	r0, [r1, #3]
   179a8:	lsr	r0, sl, #8
   179ac:	strb	r0, [r1, #1]
   179b0:	adds	r0, r4, #4
   179b4:	strb	r3, [r1, #2]
   179b8:	adc	r1, r9, #0
   179bc:	mov	sl, r7
   179c0:	cmp	r2, #1
   179c4:	strd	r0, [sl]
   179c8:	bne	17a04 <read_boolean_unary_expression@@Base+0xeb8>
   179cc:	b	17a70 <read_boolean_unary_expression@@Base+0xf24>
   179d0:	mov	r3, ip
   179d4:	lsr	r0, sl, #24
   179d8:	strb	sl, [r3, r4]!
   179dc:	lsr	r1, sl, #16
   179e0:	lsr	r2, sl, #8
   179e4:	strb	r0, [r3, #3]
   179e8:	strb	r1, [r3, #2]
   179ec:	strb	r2, [r3, #1]
   179f0:	ldr	sl, [pc, #1496]	; 17fd0 <read_boolean_unary_expression@@Base+0x1484>
   179f4:	adds	r0, r7, #8
   179f8:	adc	r1, r6, #0
   179fc:	add	sl, pc, sl
   17a00:	strd	r0, [sl]
   17a04:	ldr	r5, [sp]
   17a08:	mov	r6, ip
   17a0c:	lsr	r2, r5, #24
   17a10:	strb	r5, [r6, r0]!
   17a14:	lsr	r3, r5, #16
   17a18:	lsr	r7, r5, #8
   17a1c:	strb	r2, [r6, #3]
   17a20:	strb	r3, [r6, #2]
   17a24:	strb	r7, [r6, #1]
   17a28:	adds	r2, r0, #4
   17a2c:	adc	r3, r1, #0
   17a30:	ldmib	sp, {r5, r9}
   17a34:	strd	r2, [sl]
   17a38:	b	17be4 <read_boolean_unary_expression@@Base+0x1098>
   17a3c:	mov	r3, ip
   17a40:	lsr	r0, sl, #24
   17a44:	strb	sl, [r3, r4]!
   17a48:	lsr	r1, sl, #16
   17a4c:	lsr	r2, sl, #8
   17a50:	strb	r0, [r3, #3]
   17a54:	strb	r1, [r3, #2]
   17a58:	strb	r2, [r3, #1]
   17a5c:	ldr	sl, [pc, #1400]	; 17fdc <read_boolean_unary_expression@@Base+0x1490>
   17a60:	adds	r0, r7, #8
   17a64:	adc	r1, r6, #0
   17a68:	add	sl, pc, sl
   17a6c:	strd	r0, [sl]
   17a70:	ldr	r7, [lr, #4]
   17a74:	ldr	r6, [pc, #1396]	; 17ff0 <read_boolean_unary_expression@@Base+0x14a4>
   17a78:	adds	r2, r4, #8
   17a7c:	adc	r3, r9, #0
   17a80:	ldr	r6, [pc, r6]
   17a84:	subs	r2, r6, r2
   17a88:	sbcs	r2, r7, r3
   17a8c:	bcs	17b34 <read_boolean_unary_expression@@Base+0xfe8>
   17a90:	mov	r0, #7
   17a94:	orr	r0, r0, #131072	; 0x20000
   17a98:	adds	r0, r4, r0
   17a9c:	adc	r1, r9, #0
   17aa0:	mvn	r2, #0
   17aa4:	and	r5, r1, r2
   17aa8:	mov	r1, #16646144	; 0xfe0000
   17aac:	orr	r1, r1, #-16777216	; 0xff000000
   17ab0:	and	r4, r0, r1
   17ab4:	ldr	r7, [pc, #1336]	; 17ff4 <read_boolean_unary_expression@@Base+0x14a8>
   17ab8:	mov	r0, ip
   17abc:	mov	r1, r4
   17ac0:	add	r7, pc, r7
   17ac4:	mov	r6, lr
   17ac8:	bl	11ec0 <realloc@plt>
   17acc:	mov	lr, r6
   17ad0:	str	r0, [r7]
   17ad4:	strd	r4, [lr]
   17ad8:	mov	ip, r0
   17adc:	ldr	r6, [sp]
   17ae0:	ldr	r0, [pc, #1296]	; 17ff8 <read_boolean_unary_expression@@Base+0x14ac>
   17ae4:	ldr	r1, [sl, #4]
   17ae8:	mov	r3, ip
   17aec:	add	r0, pc, r0
   17af0:	lsr	r2, r6, #24
   17af4:	ldrb	r7, [r0]
   17af8:	ldr	r0, [pc, #1276]	; 17ffc <read_boolean_unary_expression@@Base+0x14b0>
   17afc:	ldr	r0, [pc, r0]
   17b00:	strb	r6, [r3, r0]!
   17b04:	ldmib	sp, {r5, r9}
   17b08:	strb	r2, [r3, #3]
   17b0c:	lsr	r2, r6, #8
   17b10:	lsr	r6, r6, #16
   17b14:	strb	r2, [r3, #1]
   17b18:	adds	r2, r0, #4
   17b1c:	strb	r6, [r3, #2]
   17b20:	adc	r3, r1, #0
   17b24:	cmp	r7, #1
   17b28:	strd	r2, [sl]
   17b2c:	beq	17b68 <read_boolean_unary_expression@@Base+0x101c>
   17b30:	b	17be4 <read_boolean_unary_expression@@Base+0x1098>
   17b34:	ldr	r5, [sp]
   17b38:	mov	r6, ip
   17b3c:	lsr	r2, r5, #24
   17b40:	strb	r5, [r6, r0]!
   17b44:	lsr	r3, r5, #16
   17b48:	lsr	r7, r5, #8
   17b4c:	strb	r2, [r6, #3]
   17b50:	strb	r3, [r6, #2]
   17b54:	strb	r7, [r6, #1]
   17b58:	adds	r2, r0, #4
   17b5c:	adc	r3, r1, #0
   17b60:	ldmib	sp, {r5, r9}
   17b64:	strd	r2, [sl]
   17b68:	str	r8, [sp, #8]
   17b6c:	mov	r8, lr
   17b70:	adds	r7, r0, #8
   17b74:	ldr	r6, [r8, #4]
   17b78:	ldr	r4, [pc, #1152]	; 18000 <read_boolean_unary_expression@@Base+0x14b4>
   17b7c:	adc	lr, r1, #0
   17b80:	ldr	r4, [pc, r4]
   17b84:	subs	r7, r4, r7
   17b88:	sbcs	r7, r6, lr
   17b8c:	bcs	17be0 <read_boolean_unary_expression@@Base+0x1094>
   17b90:	mov	r2, #7
   17b94:	orr	r2, r2, #131072	; 0x20000
   17b98:	adds	r0, r0, r2
   17b9c:	adc	r1, r1, #0
   17ba0:	mvn	r2, #0
   17ba4:	and	r7, r1, r2
   17ba8:	mov	r1, #16646144	; 0xfe0000
   17bac:	orr	r1, r1, #-16777216	; 0xff000000
   17bb0:	and	r6, r0, r1
   17bb4:	ldr	r4, [pc, #1096]	; 18004 <read_boolean_unary_expression@@Base+0x14b8>
   17bb8:	mov	r0, ip
   17bbc:	mov	r1, r6
   17bc0:	add	r4, pc, r4
   17bc4:	bl	11ec0 <realloc@plt>
   17bc8:	strd	r6, [r8]
   17bcc:	str	r0, [r4]
   17bd0:	ldr	r3, [sl, #4]
   17bd4:	ldr	r2, [pc, #1068]	; 18008 <read_boolean_unary_expression@@Base+0x14bc>
   17bd8:	mov	ip, r0
   17bdc:	ldr	r2, [pc, r2]
   17be0:	ldr	r8, [sp, #8]
   17be4:	mov	r6, ip
   17be8:	lsr	r7, r5, #8
   17bec:	strb	r5, [r6, r2]!
   17bf0:	adds	r4, r2, #4
   17bf4:	lsr	r0, r5, #24
   17bf8:	lsr	r1, r5, #16
   17bfc:	strb	r7, [r6, #1]
   17c00:	adc	r7, r3, #0
   17c04:	cmp	r9, #0
   17c08:	strb	r0, [r6, #3]
   17c0c:	strb	r1, [r6, #2]
   17c10:	stm	sl, {r4, r7}
   17c14:	beq	17ce8 <read_boolean_unary_expression@@Base+0x119c>
   17c18:	ldr	r0, [pc, #1004]	; 1800c <read_boolean_unary_expression@@Base+0x14c0>
   17c1c:	ldr	sl, [fp, #8]
   17c20:	add	r0, pc, r0
   17c24:	ldrb	r0, [r0]
   17c28:	cmp	r0, #1
   17c2c:	bne	17cb4 <read_boolean_unary_expression@@Base+0x1168>
   17c30:	ldr	r9, [pc, #984]	; 18010 <read_boolean_unary_expression@@Base+0x14c4>
   17c34:	adds	r0, r2, #8
   17c38:	adc	r1, r3, #0
   17c3c:	add	r9, pc, r9
   17c40:	ldr	r6, [r9, #4]
   17c44:	ldr	r5, [pc, #968]	; 18014 <read_boolean_unary_expression@@Base+0x14c8>
   17c48:	ldr	r5, [pc, r5]
   17c4c:	subs	r0, r5, r0
   17c50:	sbcs	r0, r6, r1
   17c54:	bcs	17cb4 <read_boolean_unary_expression@@Base+0x1168>
   17c58:	mov	r0, #7
   17c5c:	orr	r0, r0, #131072	; 0x20000
   17c60:	adds	r0, r2, r0
   17c64:	adc	r1, r3, #0
   17c68:	mvn	r2, #0
   17c6c:	and	r5, r1, r2
   17c70:	mov	r1, #16646144	; 0xfe0000
   17c74:	orr	r1, r1, #-16777216	; 0xff000000
   17c78:	and	r6, r0, r1
   17c7c:	ldr	r4, [pc, #916]	; 18018 <read_boolean_unary_expression@@Base+0x14cc>
   17c80:	mov	r0, ip
   17c84:	mov	r1, r6
   17c88:	add	r4, pc, r4
   17c8c:	bl	11ec0 <realloc@plt>
   17c90:	str	r6, [r9]
   17c94:	str	r5, [r9, #4]
   17c98:	mov	ip, r0
   17c9c:	ldr	r0, [pc, #888]	; 1801c <read_boolean_unary_expression@@Base+0x14d0>
   17ca0:	str	ip, [r4]
   17ca4:	add	r0, pc, r0
   17ca8:	ldr	r7, [r0, #4]
   17cac:	ldr	r4, [pc, #876]	; 18020 <read_boolean_unary_expression@@Base+0x14d4>
   17cb0:	ldr	r4, [pc, r4]
   17cb4:	mov	r3, ip
   17cb8:	lsr	r0, sl, #24
   17cbc:	strb	sl, [r3, r4]!
   17cc0:	lsr	r1, sl, #16
   17cc4:	lsr	r2, sl, #8
   17cc8:	strb	r0, [r3, #3]
   17ccc:	strb	r1, [r3, #2]
   17cd0:	strb	r2, [r3, #1]
   17cd4:	ldr	sl, [pc, #840]	; 18024 <read_boolean_unary_expression@@Base+0x14d8>
   17cd8:	adds	r4, r4, #4
   17cdc:	adc	r7, r7, #0
   17ce0:	add	sl, pc, sl
   17ce4:	stm	sl, {r4, r7}
   17ce8:	cmp	r8, #0
   17cec:	beq	17f9c <read_boolean_unary_expression@@Base+0x1450>
   17cf0:	mov	r0, r8
   17cf4:	mov	r9, ip
   17cf8:	bl	11f44 <strlen@plt>
   17cfc:	mov	r6, #1
   17d00:	add	r5, r6, r0, lsr #2
   17d04:	ldr	r0, [pc, #796]	; 18028 <read_boolean_unary_expression@@Base+0x14dc>
   17d08:	add	r0, pc, r0
   17d0c:	ldrb	r0, [r0]
   17d10:	cmp	r0, #1
   17d14:	bne	17db8 <read_boolean_unary_expression@@Base+0x126c>
   17d18:	ldr	sl, [pc, #780]	; 1802c <read_boolean_unary_expression@@Base+0x14e0>
   17d1c:	adds	r0, r4, #4
   17d20:	adc	r1, r7, #0
   17d24:	add	sl, pc, sl
   17d28:	ldr	r2, [sl, #4]
   17d2c:	ldr	r3, [pc, #764]	; 18030 <read_boolean_unary_expression@@Base+0x14e4>
   17d30:	ldr	r3, [pc, r3]
   17d34:	subs	r0, r3, r0
   17d38:	sbcs	r0, r2, r1
   17d3c:	bcs	17dcc <read_boolean_unary_expression@@Base+0x1280>
   17d40:	mov	r0, #0
   17d44:	str	r0, [sp, #8]
   17d48:	mov	r0, #7
   17d4c:	orr	r0, r0, #131072	; 0x20000
   17d50:	adds	r0, r0, r4
   17d54:	adc	r1, r7, #0
   17d58:	subs	r0, r0, #4
   17d5c:	sbc	r1, r1, #0
   17d60:	mvn	r2, #0
   17d64:	and	r7, r1, r2
   17d68:	mov	r1, #16646144	; 0xfe0000
   17d6c:	orr	r1, r1, #-16777216	; 0xff000000
   17d70:	and	r4, r0, r1
   17d74:	ldr	r6, [pc, #700]	; 18038 <read_boolean_unary_expression@@Base+0x14ec>
   17d78:	mov	r0, r9
   17d7c:	mov	r1, r4
   17d80:	add	r6, pc, r6
   17d84:	bl	11ec0 <realloc@plt>
   17d88:	stm	sl, {r4, r7}
   17d8c:	str	r0, [r6]
   17d90:	ldr	sl, [pc, #676]	; 1803c <read_boolean_unary_expression@@Base+0x14f0>
   17d94:	mov	r3, r0
   17d98:	add	sl, pc, sl
   17d9c:	ldr	r7, [sl, #4]
   17da0:	ldr	r0, [pc, #664]	; 18040 <read_boolean_unary_expression@@Base+0x14f4>
   17da4:	add	r0, pc, r0
   17da8:	ldrb	r6, [r0]
   17dac:	ldr	r4, [pc, #656]	; 18044 <read_boolean_unary_expression@@Base+0x14f8>
   17db0:	ldr	r4, [pc, r4]
   17db4:	b	17de0 <read_boolean_unary_expression@@Base+0x1294>
   17db8:	mov	r0, #0
   17dbc:	str	r0, [sp, #8]
   17dc0:	mov	r6, #0
   17dc4:	mov	r3, r9
   17dc8:	b	17de0 <read_boolean_unary_expression@@Base+0x1294>
   17dcc:	mov	r0, #0
   17dd0:	str	r0, [sp, #8]
   17dd4:	ldr	sl, [pc, #600]	; 18034 <read_boolean_unary_expression@@Base+0x14e8>
   17dd8:	mov	r3, r9
   17ddc:	add	sl, pc, sl
   17de0:	mov	r9, r3
   17de4:	strb	r5, [r3, r4]!
   17de8:	lsr	r0, r5, #24
   17dec:	adds	r4, r4, #4
   17df0:	lsr	r1, r5, #16
   17df4:	lsr	r2, r5, #8
   17df8:	strb	r0, [r3, #3]
   17dfc:	mov	r0, r8
   17e00:	adc	r5, r7, #0
   17e04:	strb	r1, [r3, #2]
   17e08:	strb	r2, [r3, #1]
   17e0c:	strd	r4, [sl]
   17e10:	bl	11f44 <strlen@plt>
   17e14:	mov	r7, r0
   17e18:	cmp	r6, #0
   17e1c:	beq	17eb8 <read_boolean_unary_expression@@Base+0x136c>
   17e20:	ldr	r6, [pc, #544]	; 18048 <read_boolean_unary_expression@@Base+0x14fc>
   17e24:	adds	r0, r4, r7
   17e28:	adc	r1, r5, #0
   17e2c:	add	r6, pc, r6
   17e30:	ldr	r2, [r6, #4]
   17e34:	ldr	r3, [pc, #528]	; 1804c <read_boolean_unary_expression@@Base+0x1500>
   17e38:	ldr	r3, [pc, r3]
   17e3c:	subs	r3, r3, r0
   17e40:	sbcs	r2, r2, r1
   17e44:	bcs	17eb0 <read_boolean_unary_expression@@Base+0x1364>
   17e48:	mov	r2, #7
   17e4c:	orr	r2, r2, #131072	; 0x20000
   17e50:	adds	r0, r2, r0
   17e54:	adc	r1, r1, #0
   17e58:	subs	r0, r0, #8
   17e5c:	sbc	r1, r1, #0
   17e60:	mvn	r2, #0
   17e64:	and	r5, r1, r2
   17e68:	mov	r1, #16646144	; 0xfe0000
   17e6c:	orr	r1, r1, #-16777216	; 0xff000000
   17e70:	and	r4, r0, r1
   17e74:	mov	r0, r9
   17e78:	mov	r1, r4
   17e7c:	bl	11ec0 <realloc@plt>
   17e80:	strd	r4, [r6]
   17e84:	ldr	r1, [pc, #452]	; 18050 <read_boolean_unary_expression@@Base+0x1504>
   17e88:	ldr	r5, [sl, #4]
   17e8c:	add	r1, pc, r1
   17e90:	str	r0, [r1]
   17e94:	ldr	r1, [pc, #440]	; 18054 <read_boolean_unary_expression@@Base+0x1508>
   17e98:	add	r1, pc, r1
   17e9c:	ldrb	r1, [r1]
   17ea0:	str	r1, [sp, #8]
   17ea4:	ldr	r4, [pc, #428]	; 18058 <read_boolean_unary_expression@@Base+0x150c>
   17ea8:	ldr	r4, [pc, r4]
   17eac:	b	17ebc <read_boolean_unary_expression@@Base+0x1370>
   17eb0:	mov	r0, #1
   17eb4:	str	r0, [sp, #8]
   17eb8:	mov	r0, r9
   17ebc:	mov	r9, r0
   17ec0:	add	r0, r0, r4
   17ec4:	mov	r1, r8
   17ec8:	mov	r2, r7
   17ecc:	bl	11e84 <memcpy@plt>
   17ed0:	adds	r6, r4, r7
   17ed4:	mov	r0, r8
   17ed8:	adc	r5, r5, #0
   17edc:	str	r6, [sl]
   17ee0:	str	r5, [sl, #4]
   17ee4:	bl	11f44 <strlen@plt>
   17ee8:	and	r0, r0, #3
   17eec:	rsb	r4, r0, #4
   17ef0:	ldr	r0, [sp, #8]
   17ef4:	cmp	r0, #0
   17ef8:	beq	17f80 <read_boolean_unary_expression@@Base+0x1434>
   17efc:	ldr	r7, [pc, #344]	; 1805c <read_boolean_unary_expression@@Base+0x1510>
   17f00:	adds	r0, r6, r4
   17f04:	adc	r1, r5, #0
   17f08:	add	r7, pc, r7
   17f0c:	ldr	r2, [r7, #4]
   17f10:	ldr	r3, [pc, #328]	; 18060 <read_boolean_unary_expression@@Base+0x1514>
   17f14:	ldr	r3, [pc, r3]
   17f18:	subs	r3, r3, r0
   17f1c:	sbcs	r2, r2, r1
   17f20:	bcs	17f80 <read_boolean_unary_expression@@Base+0x1434>
   17f24:	mov	r2, #7
   17f28:	orr	r2, r2, #131072	; 0x20000
   17f2c:	adds	r0, r2, r0
   17f30:	adc	r1, r1, #0
   17f34:	subs	r0, r0, #8
   17f38:	sbc	r1, r1, #0
   17f3c:	mvn	r2, #0
   17f40:	and	r5, r1, r2
   17f44:	mov	r1, #16646144	; 0xfe0000
   17f48:	orr	r1, r1, #-16777216	; 0xff000000
   17f4c:	and	r6, r0, r1
   17f50:	ldr	r8, [pc, #268]	; 18064 <read_boolean_unary_expression@@Base+0x1518>
   17f54:	mov	r0, r9
   17f58:	mov	r1, r6
   17f5c:	add	r8, pc, r8
   17f60:	bl	11ec0 <realloc@plt>
   17f64:	str	r6, [r7]
   17f68:	str	r5, [r7, #4]
   17f6c:	str	r0, [r8]
   17f70:	ldr	r5, [sl, #4]
   17f74:	ldr	r6, [pc, #236]	; 18068 <read_boolean_unary_expression@@Base+0x151c>
   17f78:	mov	r9, r0
   17f7c:	ldr	r6, [pc, r6]
   17f80:	add	r0, r9, r6
   17f84:	mov	r1, #0
   17f88:	mov	r2, r4
   17f8c:	bl	11f8c <memset@plt>
   17f90:	adds	r0, r6, r4
   17f94:	adc	r1, r5, #0
   17f98:	strd	r0, [sl]
   17f9c:	sub	sp, fp, #28
   17fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fa4:	ldrdeq	r5, [r1], -ip
   17fa8:	andeq	r5, r1, r0, asr #11
   17fac:	andeq	r5, r1, r4, asr #11
   17fb0:	andeq	r5, r1, r8, lsr #11
   17fb4:	andeq	r5, r1, ip, lsr #11
   17fb8:	muleq	r1, r0, r5
   17fbc:	andeq	r5, r1, r4, asr #10
   17fc0:	andeq	r5, r1, r0, asr #10
   17fc4:	andeq	r5, r1, r0, lsr r5
   17fc8:	andeq	r5, r1, r8, lsl r5
   17fcc:	andeq	r5, r1, r4, asr #9
   17fd0:	andeq	r5, r1, r4, asr #7
   17fd4:			; <UNDEFINED> instruction: 0x000154b4
   17fd8:	andeq	r5, r1, r8, lsr #9
   17fdc:	andeq	r5, r1, r8, asr r3
   17fe0:	andeq	r5, r1, r4, ror #8
   17fe4:	andeq	r5, r1, r4, lsr r4
   17fe8:	andeq	r5, r1, r8, lsr r4
   17fec:	andeq	r5, r1, r4, lsr #8
   17ff0:	andeq	r5, r1, r8, lsr r3
   17ff4:	strdeq	r5, [r1], -r4
   17ff8:	andeq	r5, r1, r0, asr #5
   17ffc:	andeq	r5, r1, r4, asr #5
   18000:	andeq	r5, r1, r8, lsr r2
   18004:	strdeq	r5, [r1], -r4
   18008:	andeq	r5, r1, r4, ror #3
   1800c:	andeq	r5, r1, ip, lsl #3
   18010:	andeq	r5, r1, ip, ror r1
   18014:	andeq	r5, r1, r0, ror r1
   18018:	andeq	r5, r1, ip, lsr #2
   1801c:	andeq	r5, r1, ip, lsl r1
   18020:	andeq	r5, r1, r0, lsl r1
   18024:	andeq	r5, r1, r0, ror #1
   18028:	andeq	r5, r1, r4, lsr #1
   1802c:	muleq	r1, r4, r0
   18030:	andeq	r5, r1, r8, lsl #1
   18034:	andeq	r4, r1, r4, ror #31
   18038:	andeq	r5, r1, r4, lsr r0
   1803c:	andeq	r5, r1, r8, lsr #32
   18040:	andeq	r5, r1, r8
   18044:	andeq	r5, r1, r0, lsl r0
   18048:	andeq	r4, r1, ip, lsl #31
   1804c:	andeq	r4, r1, r0, lsl #31
   18050:	andeq	r4, r1, r8, lsr #30
   18054:	andeq	r4, r1, r4, lsl pc
   18058:	andeq	r4, r1, r8, lsl pc
   1805c:			; <UNDEFINED> instruction: 0x00014eb0
   18060:	andeq	r4, r1, r4, lsr #29
   18064:	andeq	r4, r1, r8, asr lr
   18068:	andeq	r4, r1, r4, asr #28
   1806c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18070:	add	fp, sp, #28
   18074:	sub	sp, sp, #28
   18078:	mov	ip, r0
   1807c:	ldr	r0, [pc, #1740]	; 18750 <read_boolean_unary_expression@@Base+0x1c04>
   18080:	ldr	r0, [pc, r0]
   18084:	cmp	r0, #0
   18088:	beq	181a4 <read_boolean_unary_expression@@Base+0x1658>
   1808c:	ldr	r5, [pc, #1728]	; 18754 <read_boolean_unary_expression@@Base+0x1c08>
   18090:	mov	sl, r1
   18094:	add	r5, pc, r5
   18098:	ldr	r3, [r5, #4]
   1809c:	ldr	r4, [pc, #1716]	; 18758 <read_boolean_unary_expression@@Base+0x1c0c>
   180a0:	ldr	r4, [pc, r4]
   180a4:	ldr	r6, [pc, #1712]	; 1875c <read_boolean_unary_expression@@Base+0x1c10>
   180a8:	add	r6, pc, r6
   180ac:	ldrb	r0, [r6]
   180b0:	cmp	r0, #0
   180b4:	beq	181ac <read_boolean_unary_expression@@Base+0x1660>
   180b8:	ldr	r8, [pc, #1732]	; 18784 <read_boolean_unary_expression@@Base+0x1c38>
   180bc:	mov	r5, #10551296	; 0xa10000
   180c0:	adds	r9, r4, #4
   180c4:	add	r8, pc, r8
   180c8:	adc	r2, r3, #0
   180cc:	ldr	r0, [r8, #4]
   180d0:	ldr	r1, [pc, #1712]	; 18788 <read_boolean_unary_expression@@Base+0x1c3c>
   180d4:	orr	r5, r5, #16777216	; 0x1000000
   180d8:	ldr	r1, [pc, r1]
   180dc:	subs	r1, r1, r9
   180e0:	sbcs	r0, r0, r2
   180e4:	bcs	182b0 <read_boolean_unary_expression@@Base+0x1764>
   180e8:	mov	r0, #3
   180ec:	orr	r0, r0, #131072	; 0x20000
   180f0:	adds	r0, r4, r0
   180f4:	adc	r1, r3, #0
   180f8:	mvn	r2, #0
   180fc:	and	r9, r1, r2
   18100:	mov	r1, #16646144	; 0xfe0000
   18104:	orr	r1, r1, #-16777216	; 0xff000000
   18108:	and	r4, r0, r1
   1810c:	ldr	r0, [pc, #1664]	; 18794 <read_boolean_unary_expression@@Base+0x1c48>
   18110:	mov	r1, r4
   18114:	mov	r7, ip
   18118:	ldr	r0, [pc, r0]
   1811c:	bl	11ec0 <realloc@plt>
   18120:	ldr	ip, [pc, #1648]	; 18798 <read_boolean_unary_expression@@Base+0x1c4c>
   18124:	ldr	lr, [pc, #1648]	; 1879c <read_boolean_unary_expression@@Base+0x1c50>
   18128:	stm	r8, {r4, r9}
   1812c:	ldr	r1, [pc, #1644]	; 187a0 <read_boolean_unary_expression@@Base+0x1c54>
   18130:	add	ip, pc, ip
   18134:	add	lr, pc, lr
   18138:	add	r1, pc, r1
   1813c:	mov	r2, r0
   18140:	str	r2, [r1]
   18144:	mov	r6, ip
   18148:	ldrb	ip, [ip]
   1814c:	ldr	r3, [lr, #4]
   18150:	ldr	r4, [pc, #1612]	; 187a4 <read_boolean_unary_expression@@Base+0x1c58>
   18154:	lsr	r0, r5, #24
   18158:	mov	r1, r8
   1815c:	ldr	r4, [pc, r4]
   18160:	str	r2, [sp, #20]
   18164:	lsl	r8, r7, #1
   18168:	strb	r5, [r2, r4]!
   1816c:	adds	r9, r4, #4
   18170:	strb	r0, [r2, #3]
   18174:	lsr	r0, r5, #16
   18178:	strb	r0, [r2, #2]
   1817c:	lsr	r0, r5, #8
   18180:	strb	r0, [r2, #1]
   18184:	adc	r5, r3, #0
   18188:	mov	r0, #0
   1818c:	cmp	ip, #1
   18190:	str	r3, [sp, #16]
   18194:	str	r9, [lr]
   18198:	str	r5, [lr, #4]
   1819c:	beq	18304 <read_boolean_unary_expression@@Base+0x17b8>
   181a0:	b	18468 <read_boolean_unary_expression@@Base+0x191c>
   181a4:	sub	sp, fp, #28
   181a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ac:	ldr	r0, [pc, #1452]	; 18760 <read_boolean_unary_expression@@Base+0x1c14>
   181b0:	mov	r7, r3
   181b4:	mov	r9, #0
   181b8:	ldr	r0, [pc, r0]
   181bc:	str	r0, [sp, #20]
   181c0:	ldrb	r1, [r0, r4]!
   181c4:	str	r7, [sp, #16]
   181c8:	ldrb	r2, [r0, #1]
   181cc:	ldrb	r3, [r0, #2]
   181d0:	ldrb	r0, [r0, #3]
   181d4:	orr	r1, r1, r2, lsl #8
   181d8:	orr	r1, r1, r3, lsl #16
   181dc:	adds	r2, r4, #4
   181e0:	orr	r3, r1, r0, lsl #24
   181e4:	adc	r7, r7, #0
   181e8:	mov	r1, r5
   181ec:	stm	r5, {r2, r7}
   181f0:	mov	r5, #10551296	; 0xa10000
   181f4:	orr	r5, r5, #16777216	; 0x1000000
   181f8:	cmn	r3, #1
   181fc:	beq	183b0 <read_boolean_unary_expression@@Base+0x1864>
   18200:	cmp	r3, r5
   18204:	bne	183c0 <read_boolean_unary_expression@@Base+0x1874>
   18208:	str	r7, [sp, #8]
   1820c:	ldr	r0, [sp, #20]
   18210:	str	r4, [sp, #4]
   18214:	mov	r8, r5
   18218:	ldr	r3, [r0, r2]
   1821c:	ldr	r0, [sp, #16]
   18220:	adds	r5, r4, #8
   18224:	adc	r9, r0, #0
   18228:	cmn	r3, #1
   1822c:	stm	r1, {r5, r9}
   18230:	beq	183cc <read_boolean_unary_expression@@Base+0x1880>
   18234:	lsr	r0, r3, #1
   18238:	mov	r7, ip
   1823c:	cmp	r0, ip
   18240:	bne	183cc <read_boolean_unary_expression@@Base+0x1880>
   18244:	lsl	r0, r7, #3
   18248:	mov	r4, r2
   1824c:	bl	11efc <malloc@plt>
   18250:	cmp	r7, #0
   18254:	beq	183f4 <read_boolean_unary_expression@@Base+0x18a8>
   18258:	str	r0, [sp, #12]
   1825c:	str	r7, [sp, #24]
   18260:	ldr	r2, [sp, #20]
   18264:	ldr	r3, [r2, r5]!
   18268:	adds	r5, r5, #8
   1826c:	ldr	r2, [r2, #4]
   18270:	str	r3, [r0]
   18274:	adc	r9, r9, #0
   18278:	str	r2, [r0, #4]
   1827c:	add	r0, r0, #8
   18280:	subs	r7, r7, #1
   18284:	bne	18260 <read_boolean_unary_expression@@Base+0x1714>
   18288:	ldr	lr, [pc, #1260]	; 1877c <read_boolean_unary_expression@@Base+0x1c30>
   1828c:	add	lr, pc, lr
   18290:	stm	lr, {r5, r9}
   18294:	ldr	ip, [pc, #1252]	; 18780 <read_boolean_unary_expression@@Base+0x1c34>
   18298:	mov	r1, lr
   1829c:	ldr	r0, [sp, #12]
   182a0:	add	ip, pc, ip
   182a4:	mov	r6, ip
   182a8:	ldr	ip, [sp, #24]
   182ac:	b	18410 <read_boolean_unary_expression@@Base+0x18c4>
   182b0:	str	r3, [sp, #16]
   182b4:	ldr	r3, [pc, #1232]	; 1878c <read_boolean_unary_expression@@Base+0x1c40>
   182b8:	mov	lr, r5
   182bc:	mov	r7, ip
   182c0:	lsr	ip, r5, #16
   182c4:	ldr	r3, [pc, r3]
   182c8:	lsr	r1, r5, #8
   182cc:	str	r3, [sp, #20]
   182d0:	strb	lr, [r3, r4]!
   182d4:	lsr	r0, lr, #24
   182d8:	strb	r1, [r3, #1]
   182dc:	strb	r0, [r3, #3]
   182e0:	strb	ip, [r3, #2]
   182e4:	ldr	lr, [pc, #1188]	; 18790 <read_boolean_unary_expression@@Base+0x1c44>
   182e8:	lsl	r5, r7, #1
   182ec:	add	lr, pc, lr
   182f0:	mov	r1, r8
   182f4:	mov	r8, r5
   182f8:	str	r9, [lr]
   182fc:	str	r2, [lr, #4]
   18300:	mov	r5, r2
   18304:	str	r8, [sp, #24]
   18308:	mov	r8, r1
   1830c:	ldr	r0, [sp, #16]
   18310:	ldr	r2, [r8, #4]
   18314:	ldr	r3, [pc, #1164]	; 187a8 <read_boolean_unary_expression@@Base+0x1c5c>
   18318:	adds	ip, r4, #8
   1831c:	adc	r1, r0, #0
   18320:	mov	r0, #0
   18324:	ldr	r3, [pc, r3]
   18328:	subs	r3, r3, ip
   1832c:	sbcs	r1, r2, r1
   18330:	bcs	183a8 <read_boolean_unary_expression@@Base+0x185c>
   18334:	ldr	r5, [pc, #1136]	; 187ac <read_boolean_unary_expression@@Base+0x1c60>
   18338:	mov	r0, #3
   1833c:	ldr	r1, [sp, #16]
   18340:	orr	r0, r0, #131072	; 0x20000
   18344:	adds	r0, r0, r4
   18348:	adc	r1, r1, #0
   1834c:	adds	r0, r0, #4
   18350:	adc	r1, r1, #0
   18354:	mvn	r2, #0
   18358:	and	r9, r1, r2
   1835c:	mov	r1, #16646144	; 0xfe0000
   18360:	orr	r1, r1, #-16777216	; 0xff000000
   18364:	and	r4, r0, r1
   18368:	ldr	r0, [sp, #20]
   1836c:	mov	r1, r4
   18370:	add	r5, pc, r5
   18374:	bl	11ec0 <realloc@plt>
   18378:	ldr	ip, [pc, #1072]	; 187b0 <read_boolean_unary_expression@@Base+0x1c64>
   1837c:	ldr	lr, [pc, #1072]	; 187b4 <read_boolean_unary_expression@@Base+0x1c68>
   18380:	stm	r8, {r4, r9}
   18384:	add	lr, pc, lr
   18388:	str	r0, [r5]
   1838c:	str	r0, [sp, #20]
   18390:	ldr	r5, [lr, #4]
   18394:	ldr	r9, [pc, #1052]	; 187b8 <read_boolean_unary_expression@@Base+0x1c6c>
   18398:	add	ip, pc, ip
   1839c:	mov	r6, ip
   183a0:	mov	r0, #0
   183a4:	ldr	r9, [pc, r9]
   183a8:	ldr	r8, [sp, #24]
   183ac:	b	18468 <read_boolean_unary_expression@@Base+0x191c>
   183b0:	mov	r3, r2
   183b4:	ldr	r2, [sp, #16]
   183b8:	mov	r0, #0
   183bc:	b	18428 <read_boolean_unary_expression@@Base+0x18dc>
   183c0:	ldr	r1, [pc, #924]	; 18764 <read_boolean_unary_expression@@Base+0x1c18>
   183c4:	add	r1, pc, r1
   183c8:	b	183d4 <read_boolean_unary_expression@@Base+0x1888>
   183cc:	ldr	r1, [pc, #924]	; 18770 <read_boolean_unary_expression@@Base+0x1c24>
   183d0:	add	r1, pc, r1
   183d4:	ldr	r0, [pc, #908]	; 18768 <read_boolean_unary_expression@@Base+0x1c1c>
   183d8:	ldr	r0, [pc, r0]
   183dc:	ldr	r0, [r0]
   183e0:	ldr	r2, [pc, #900]	; 1876c <read_boolean_unary_expression@@Base+0x1c20>
   183e4:	ldr	r2, [pc, r2]
   183e8:	sub	sp, fp, #28
   183ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183f0:	b	11f5c <fprintf@plt>
   183f4:	ldr	lr, [pc, #888]	; 18774 <read_boolean_unary_expression@@Base+0x1c28>
   183f8:	ldr	ip, [pc, #888]	; 18778 <read_boolean_unary_expression@@Base+0x1c2c>
   183fc:	add	lr, pc, lr
   18400:	add	ip, pc, ip
   18404:	mov	r6, ip
   18408:	mov	r1, lr
   1840c:	mov	ip, r7
   18410:	mov	r3, r4
   18414:	ldr	r7, [sp, #8]
   18418:	ldr	r4, [sp, #4]
   1841c:	ldr	r2, [sp, #16]
   18420:	mov	r9, #0
   18424:	mov	r5, r8
   18428:	mov	lr, r1
   1842c:	mov	r1, #1
   18430:	str	r4, [lr]
   18434:	str	r2, [lr, #4]
   18438:	ldr	r2, [sp, #20]
   1843c:	lsl	r8, ip, #1
   18440:	strb	r5, [r2, r4]!
   18444:	mov	r5, r7
   18448:	strb	r1, [r2, #3]
   1844c:	mov	r1, #161	; 0xa1
   18450:	strb	r9, [r2, #1]
   18454:	mov	r9, r3
   18458:	strb	r1, [r2, #2]
   1845c:	str	r9, [lr]
   18460:	str	r7, [lr, #4]
   18464:	mov	r7, ip
   18468:	ldr	r3, [sp, #20]
   1846c:	lsr	r1, r8, #16
   18470:	mov	ip, r3
   18474:	strb	r8, [r3, r9]!
   18478:	lsr	r4, r8, #24
   1847c:	lsr	r2, r8, #8
   18480:	adds	r8, r9, #4
   18484:	strb	r1, [r3, #2]
   18488:	adc	r1, r5, #0
   1848c:	cmp	r7, #0
   18490:	strb	r4, [r3, #3]
   18494:	strb	r2, [r3, #1]
   18498:	str	r8, [lr]
   1849c:	str	r1, [lr, #4]
   184a0:	str	r7, [sp, #24]
   184a4:	beq	18744 <read_boolean_unary_expression@@Base+0x1bf8>
   184a8:	ldr	r7, [pc, #780]	; 187bc <read_boolean_unary_expression@@Base+0x1c70>
   184ac:	mov	r4, lr
   184b0:	mov	r2, r0
   184b4:	add	r7, pc, r7
   184b8:	str	r0, [sp, #12]
   184bc:	b	18558 <read_boolean_unary_expression@@Base+0x1a0c>
   184c0:	mov	r7, ip
   184c4:	lsr	r2, r4, #24
   184c8:	strb	r4, [r7, r8]!
   184cc:	mov	lr, r6
   184d0:	lsr	r9, r4, #16
   184d4:	lsr	r6, r4, #8
   184d8:	strb	r2, [r7, #3]
   184dc:	adds	r2, r8, #4
   184e0:	mov	r4, r0
   184e4:	strb	r9, [r7, #2]
   184e8:	mov	r3, ip
   184ec:	strb	r6, [r7, #1]
   184f0:	adc	r9, r1, #0
   184f4:	stm	r4, {r2, r9}
   184f8:	mov	ip, r3
   184fc:	lsr	r1, r5, #16
   18500:	strb	r5, [r3, r2]!
   18504:	lsr	r0, r5, #24
   18508:	lsr	r7, r5, #8
   1850c:	adds	r8, r2, #4
   18510:	strb	r1, [r3, #2]
   18514:	adc	r1, r9, #0
   18518:	strb	r0, [r3, #3]
   1851c:	strb	r7, [r3, #1]
   18520:	str	r8, [r4]
   18524:	str	r1, [r4, #4]
   18528:	ldr	r0, [sp, #24]
   1852c:	ldr	r2, [sp, #16]
   18530:	mov	r6, lr
   18534:	subs	r0, r0, #1
   18538:	str	r0, [sp, #24]
   1853c:	ldr	sl, [sp, #20]
   18540:	ldr	r0, [sp, #12]
   18544:	ldr	r7, [pc, #676]	; 187f0 <read_boolean_unary_expression@@Base+0x1ca4>
   18548:	add	r2, r2, #8
   1854c:	add	sl, sl, #8
   18550:	add	r7, pc, r7
   18554:	beq	18744 <read_boolean_unary_expression@@Base+0x1bf8>
   18558:	cmp	r0, #0
   1855c:	mov	r0, r4
   18560:	str	r2, [sp, #16]
   18564:	beq	18570 <read_boolean_unary_expression@@Base+0x1a24>
   18568:	ldrd	r2, [r2]
   1856c:	b	18578 <read_boolean_unary_expression@@Base+0x1a2c>
   18570:	mov	r2, #0
   18574:	mov	r3, #0
   18578:	ldrd	r4, [sl]
   1857c:	adds	r4, r4, r2
   18580:	adc	r5, r5, r3
   18584:	strd	r4, [sl]
   18588:	ldrb	r2, [r6]
   1858c:	str	sl, [sp, #20]
   18590:	cmp	r2, #0
   18594:	beq	184c0 <read_boolean_unary_expression@@Base+0x1974>
   18598:	ldr	r3, [r7, #4]
   1859c:	ldr	r6, [pc, #540]	; 187c0 <read_boolean_unary_expression@@Base+0x1c74>
   185a0:	adds	r2, r8, #4
   185a4:	adc	r9, r1, #0
   185a8:	ldr	r6, [pc, r6]
   185ac:	subs	r2, r6, r2
   185b0:	sbcs	r2, r3, r9
   185b4:	bcs	18660 <read_boolean_unary_expression@@Base+0x1b14>
   185b8:	mov	r2, #3
   185bc:	orr	r2, r2, #131072	; 0x20000
   185c0:	adds	r0, r8, r2
   185c4:	adc	r1, r1, #0
   185c8:	mvn	r2, #0
   185cc:	and	r8, r1, r2
   185d0:	mov	r1, #16646144	; 0xfe0000
   185d4:	orr	r1, r1, #-16777216	; 0xff000000
   185d8:	and	r6, r0, r1
   185dc:	mov	r0, ip
   185e0:	mov	r1, r6
   185e4:	bl	11ec0 <realloc@plt>
   185e8:	ldr	ip, [pc, #468]	; 187c4 <read_boolean_unary_expression@@Base+0x1c78>
   185ec:	ldr	lr, [pc, #468]	; 187c8 <read_boolean_unary_expression@@Base+0x1c7c>
   185f0:	stm	r7, {r6, r8}
   185f4:	mov	r3, r0
   185f8:	ldr	r0, [pc, #460]	; 187cc <read_boolean_unary_expression@@Base+0x1c80>
   185fc:	add	lr, pc, lr
   18600:	mov	r9, lr
   18604:	add	r0, pc, r0
   18608:	add	ip, pc, ip
   1860c:	str	r3, [r0]
   18610:	mov	lr, ip
   18614:	ldrb	ip, [ip]
   18618:	ldr	r1, [r9, #4]
   1861c:	ldr	r8, [pc, #428]	; 187d0 <read_boolean_unary_expression@@Base+0x1c84>
   18620:	mov	r7, r3
   18624:	lsr	r2, r4, #24
   18628:	ldr	r8, [pc, r8]
   1862c:	lsr	r6, r4, #16
   18630:	strb	r4, [r7, r8]!
   18634:	strb	r2, [r7, #3]
   18638:	lsr	r2, r4, #8
   1863c:	strb	r2, [r7, #1]
   18640:	adds	r2, r8, #4
   18644:	mov	r4, r9
   18648:	adc	r9, r1, #0
   1864c:	cmp	ip, #1
   18650:	strb	r6, [r7, #2]
   18654:	stm	r4, {r2, r9}
   18658:	bne	184f8 <read_boolean_unary_expression@@Base+0x19ac>
   1865c:	b	18694 <read_boolean_unary_expression@@Base+0x1b48>
   18660:	mov	r6, ip
   18664:	lsr	r2, r4, #24
   18668:	strb	r4, [r6, r8]!
   1866c:	lsr	r9, r4, #16
   18670:	lsr	r7, r4, #8
   18674:	strb	r2, [r6, #3]
   18678:	adds	r2, r8, #4
   1867c:	mov	r4, r0
   18680:	strb	r9, [r6, #2]
   18684:	mov	r3, ip
   18688:	strb	r7, [r6, #1]
   1868c:	adc	r9, r1, #0
   18690:	stm	r4, {r2, r9}
   18694:	ldr	lr, [pc, #312]	; 187d4 <read_boolean_unary_expression@@Base+0x1c88>
   18698:	mov	r0, r4
   1869c:	adds	r7, r8, #8
   186a0:	add	lr, pc, lr
   186a4:	adc	ip, r1, #0
   186a8:	ldr	r4, [lr, #4]
   186ac:	ldr	r6, [pc, #292]	; 187d8 <read_boolean_unary_expression@@Base+0x1c8c>
   186b0:	ldr	r6, [pc, r6]
   186b4:	subs	r7, r6, r7
   186b8:	sbcs	r7, r4, ip
   186bc:	bcs	18734 <read_boolean_unary_expression@@Base+0x1be8>
   186c0:	mov	r2, #3
   186c4:	orr	r2, r2, #131072	; 0x20000
   186c8:	adds	r0, r2, r8
   186cc:	adc	r1, r1, #0
   186d0:	adds	r0, r0, #4
   186d4:	adc	r1, r1, #0
   186d8:	mvn	r2, #0
   186dc:	and	r7, r1, r2
   186e0:	mov	r1, #16646144	; 0xfe0000
   186e4:	orr	r1, r1, #-16777216	; 0xff000000
   186e8:	and	r6, r0, r1
   186ec:	mov	r0, r3
   186f0:	mov	r1, r6
   186f4:	mov	r8, lr
   186f8:	bl	11ec0 <realloc@plt>
   186fc:	ldr	lr, [pc, #220]	; 187e0 <read_boolean_unary_expression@@Base+0x1c94>
   18700:	strd	r6, [r8]
   18704:	mov	r3, r0
   18708:	add	lr, pc, lr
   1870c:	mov	r4, lr
   18710:	ldr	r9, [lr, #4]
   18714:	ldr	r0, [pc, #200]	; 187e4 <read_boolean_unary_expression@@Base+0x1c98>
   18718:	add	r0, pc, r0
   1871c:	str	r3, [r0]
   18720:	ldr	r2, [pc, #192]	; 187e8 <read_boolean_unary_expression@@Base+0x1c9c>
   18724:	ldr	r2, [pc, r2]
   18728:	ldr	lr, [pc, #188]	; 187ec <read_boolean_unary_expression@@Base+0x1ca0>
   1872c:	add	lr, pc, lr
   18730:	b	184f8 <read_boolean_unary_expression@@Base+0x19ac>
   18734:	ldr	lr, [pc, #160]	; 187dc <read_boolean_unary_expression@@Base+0x1c90>
   18738:	mov	r4, r0
   1873c:	add	lr, pc, lr
   18740:	b	184f8 <read_boolean_unary_expression@@Base+0x19ac>
   18744:	sub	sp, fp, #28
   18748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1874c:	b	11e78 <free@plt>
   18750:	andeq	r4, r1, r0, lsr sp
   18754:	andeq	r4, r1, ip, lsr #26
   18758:	andeq	r4, r1, r0, lsr #26
   1875c:	andeq	r4, r1, r4, lsl #26
   18760:	strdeq	r4, [r1], -ip
   18764:	andeq	r3, r0, r7, lsr #32
   18768:	andeq	r3, r1, r0, ror #25
   1876c:	andeq	r4, r1, r4, asr #19
   18770:	andeq	r3, r0, r5, rrx
   18774:	andeq	r4, r1, r4, asr #19
   18778:	andeq	r4, r1, ip, lsr #19
   1877c:	andeq	r4, r1, r4, lsr fp
   18780:	andeq	r4, r1, ip, lsl #22
   18784:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18788:	andeq	r4, r1, r0, ror #25
   1878c:	strdeq	r4, [r1], -r0
   18790:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18794:	muleq	r1, ip, ip
   18798:	andeq	r4, r1, ip, ror ip
   1879c:	andeq	r4, r1, ip, lsl #25
   187a0:	andeq	r4, r1, ip, ror ip
   187a4:	andeq	r4, r1, r4, ror #24
   187a8:	muleq	r1, r4, sl
   187ac:	andeq	r4, r1, r4, asr #20
   187b0:	andeq	r4, r1, r4, lsl sl
   187b4:	andeq	r4, r1, ip, lsr sl
   187b8:	andeq	r4, r1, ip, lsl sl
   187bc:	andeq	r4, r1, r4, lsl #18
   187c0:	andeq	r4, r1, r0, lsl r8
   187c4:	andeq	r4, r1, r4, lsr #15
   187c8:	andeq	r4, r1, r4, asr #15
   187cc:			; <UNDEFINED> instruction: 0x000147b0
   187d0:	muleq	r1, r8, r7
   187d4:	andeq	r4, r1, r8, lsl r7
   187d8:	andeq	r4, r1, r8, lsl #14
   187dc:	andeq	r4, r1, r0, ror r6
   187e0:			; <UNDEFINED> instruction: 0x000146b8
   187e4:	muleq	r1, ip, r6
   187e8:	muleq	r1, ip, r6
   187ec:	andeq	r4, r1, r0, lsl #13
   187f0:	andeq	r4, r1, r8, ror #16
   187f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f8:	add	fp, sp, #28
   187fc:	sub	sp, sp, #4
   18800:	ldr	r0, [pc, #3180]	; 19474 <read_boolean_unary_expression@@Base+0x2928>
   18804:	ldr	r0, [pc, r0]
   18808:	cmp	r0, #0
   1880c:	beq	18e68 <read_boolean_unary_expression@@Base+0x231c>
   18810:	ldr	sl, [pc, #3168]	; 19478 <read_boolean_unary_expression@@Base+0x292c>
   18814:	add	sl, pc, sl
   18818:	ldr	r6, [sl, #4]
   1881c:	ldr	r5, [pc, #3160]	; 1947c <read_boolean_unary_expression@@Base+0x2930>
   18820:	ldr	r5, [pc, r5]
   18824:	ldr	r8, [pc, #3156]	; 19480 <read_boolean_unary_expression@@Base+0x2934>
   18828:	add	r8, pc, r8
   1882c:	ldrb	r0, [r8]
   18830:	cmp	r0, #0
   18834:	beq	188f8 <read_boolean_unary_expression@@Base+0x1dac>
   18838:	ldr	r9, [pc, #3164]	; 1949c <read_boolean_unary_expression@@Base+0x2950>
   1883c:	adds	r2, r5, #4
   18840:	adc	ip, r6, #0
   18844:	add	r9, pc, r9
   18848:	ldr	r0, [r9, #4]
   1884c:	ldr	r3, [pc, #3148]	; 194a0 <read_boolean_unary_expression@@Base+0x2954>
   18850:	ldr	r3, [pc, r3]
   18854:	subs	r3, r3, r2
   18858:	sbcs	r0, r0, ip
   1885c:	bcs	1894c <read_boolean_unary_expression@@Base+0x1e00>
   18860:	mov	r0, #7
   18864:	orr	r0, r0, #131072	; 0x20000
   18868:	adds	r0, r0, r5
   1886c:	adc	r1, r6, #0
   18870:	subs	r0, r0, #4
   18874:	sbc	r1, r1, #0
   18878:	mvn	r2, #0
   1887c:	and	r5, r1, r2
   18880:	mov	r1, #16646144	; 0xfe0000
   18884:	orr	r1, r1, #-16777216	; 0xff000000
   18888:	ldr	r4, [pc, #3096]	; 194a8 <read_boolean_unary_expression@@Base+0x295c>
   1888c:	and	r6, r0, r1
   18890:	ldr	r0, [pc, #3092]	; 194ac <read_boolean_unary_expression@@Base+0x2960>
   18894:	mov	r1, r6
   18898:	add	r4, pc, r4
   1889c:	ldr	r0, [pc, r0]
   188a0:	bl	11ec0 <realloc@plt>
   188a4:	str	r6, [r9]
   188a8:	str	r5, [r9, #4]
   188ac:	str	r0, [r4]
   188b0:	ldrb	r3, [r8]
   188b4:	ldr	r6, [sl, #4]
   188b8:	ldr	r5, [pc, #3056]	; 194b0 <read_boolean_unary_expression@@Base+0x2964>
   188bc:	mov	r2, r0
   188c0:	mov	r1, #0
   188c4:	mov	r7, #161	; 0xa1
   188c8:	ldr	r5, [pc, r5]
   188cc:	strb	r1, [r2, r5]!
   188d0:	strb	r7, [r2, #3]
   188d4:	strb	r1, [r2, #2]
   188d8:	strb	r1, [r2, #1]
   188dc:	adds	r2, r5, #4
   188e0:	adc	ip, r6, #0
   188e4:	mov	r7, #1
   188e8:	cmp	r3, #1
   188ec:	stm	sl, {r2, ip}
   188f0:	beq	18974 <read_boolean_unary_expression@@Base+0x1e28>
   188f4:	b	18b4c <read_boolean_unary_expression@@Base+0x2000>
   188f8:	ldr	r0, [pc, #2948]	; 19484 <read_boolean_unary_expression@@Base+0x2938>
   188fc:	ldr	r0, [pc, r0]
   18900:	mov	r1, r0
   18904:	ldrb	r2, [r1, r5]!
   18908:	ldrb	r3, [r1, #1]
   1890c:	ldrb	r7, [r1, #2]
   18910:	ldrb	r1, [r1, #3]
   18914:	orr	r2, r2, r3, lsl #8
   18918:	orr	r2, r2, r7, lsl #16
   1891c:	orr	r3, r2, r1, lsl #24
   18920:	adds	r2, r5, #4
   18924:	adc	ip, r6, #0
   18928:	cmp	r3, #-1593835520	; 0xa1000000
   1892c:	stm	sl, {r2, ip}
   18930:	beq	18aec <read_boolean_unary_expression@@Base+0x1fa0>
   18934:	mov	r7, #1
   18938:	cmn	r3, #1
   1893c:	beq	18b2c <read_boolean_unary_expression@@Base+0x1fe0>
   18940:	ldr	r1, [pc, #2880]	; 19488 <read_boolean_unary_expression@@Base+0x293c>
   18944:	add	r1, pc, r1
   18948:	b	1922c <read_boolean_unary_expression@@Base+0x26e0>
   1894c:	ldr	r0, [pc, #2896]	; 194a4 <read_boolean_unary_expression@@Base+0x2958>
   18950:	mov	r3, #0
   18954:	mov	r4, #161	; 0xa1
   18958:	ldr	r0, [pc, r0]
   1895c:	mov	r7, r0
   18960:	strb	r3, [r7, r5]!
   18964:	strb	r4, [r7, #3]
   18968:	strb	r3, [r7, #2]
   1896c:	strb	r3, [r7, #1]
   18970:	stm	sl, {r2, ip}
   18974:	ldr	r4, [r9, #4]
   18978:	ldr	r1, [pc, #2868]	; 194b4 <read_boolean_unary_expression@@Base+0x2968>
   1897c:	adds	r3, r5, #8
   18980:	adc	r7, r6, #0
   18984:	ldr	r1, [pc, r1]
   18988:	subs	r1, r1, r3
   1898c:	sbcs	r1, r4, r7
   18990:	bcs	18a1c <read_boolean_unary_expression@@Base+0x1ed0>
   18994:	mov	r1, #7
   18998:	orr	r1, r1, #131072	; 0x20000
   1899c:	adds	r1, r5, r1
   189a0:	adc	r2, r6, #0
   189a4:	mvn	r3, #0
   189a8:	and	r5, r2, r3
   189ac:	mov	r2, #16646144	; 0xfe0000
   189b0:	orr	r2, r2, #-16777216	; 0xff000000
   189b4:	ldr	r4, [pc, #2812]	; 194b8 <read_boolean_unary_expression@@Base+0x296c>
   189b8:	and	r6, r1, r2
   189bc:	mov	r1, r6
   189c0:	add	r4, pc, r4
   189c4:	bl	11ec0 <realloc@plt>
   189c8:	str	r6, [r9]
   189cc:	str	r5, [r9, #4]
   189d0:	str	r0, [r4]
   189d4:	ldrb	r1, [r8]
   189d8:	ldr	ip, [sl, #4]
   189dc:	ldr	r2, [pc, #2776]	; 194bc <read_boolean_unary_expression@@Base+0x2970>
   189e0:	mov	r7, r0
   189e4:	mov	r3, #9
   189e8:	ldr	r2, [pc, r2]
   189ec:	strb	r3, [r7, r2]!
   189f0:	mov	r3, #0
   189f4:	strb	r3, [r7, #3]
   189f8:	strb	r3, [r7, #2]
   189fc:	strb	r3, [r7, #1]
   18a00:	adds	r3, r2, #4
   18a04:	adc	r5, ip, #0
   18a08:	mov	r7, #1
   18a0c:	cmp	r1, #1
   18a10:	stm	sl, {r3, r5}
   18a14:	beq	18a44 <read_boolean_unary_expression@@Base+0x1ef8>
   18a18:	b	18b74 <read_boolean_unary_expression@@Base+0x2028>
   18a1c:	mov	r3, r0
   18a20:	mov	r1, #9
   18a24:	strb	r1, [r3, r2]!
   18a28:	mov	r1, #0
   18a2c:	strb	r1, [r3, #3]
   18a30:	strb	r1, [r3, #2]
   18a34:	strb	r1, [r3, #1]
   18a38:	adds	r3, r2, #4
   18a3c:	adc	r5, ip, #0
   18a40:	stm	sl, {r3, r5}
   18a44:	ldr	r6, [r9, #4]
   18a48:	ldr	r4, [pc, #2672]	; 194c0 <read_boolean_unary_expression@@Base+0x2974>
   18a4c:	adds	r1, r2, #8
   18a50:	adc	r7, ip, #0
   18a54:	ldr	r4, [pc, r4]
   18a58:	subs	r1, r4, r1
   18a5c:	sbcs	r1, r6, r7
   18a60:	bcs	18f38 <read_boolean_unary_expression@@Base+0x23ec>
   18a64:	mov	r1, #7
   18a68:	orr	r1, r1, #131072	; 0x20000
   18a6c:	adds	r1, r2, r1
   18a70:	adc	r2, ip, #0
   18a74:	mvn	r3, #0
   18a78:	and	r5, r2, r3
   18a7c:	mov	r2, #16646144	; 0xfe0000
   18a80:	orr	r2, r2, #-16777216	; 0xff000000
   18a84:	ldr	r4, [pc, #2616]	; 194c4 <read_boolean_unary_expression@@Base+0x2978>
   18a88:	and	r6, r1, r2
   18a8c:	mov	r1, r6
   18a90:	add	r4, pc, r4
   18a94:	bl	11ec0 <realloc@plt>
   18a98:	str	r6, [r9]
   18a9c:	str	r5, [r9, #4]
   18aa0:	str	r0, [r4]
   18aa4:	ldrb	r2, [r8]
   18aa8:	ldr	r5, [sl, #4]
   18aac:	ldr	r3, [pc, #2580]	; 194c8 <read_boolean_unary_expression@@Base+0x297c>
   18ab0:	mov	r7, r0
   18ab4:	mov	r1, #0
   18ab8:	ldr	r3, [pc, r3]
   18abc:	adds	r6, r3, #4
   18ac0:	strb	r1, [r7, r3]!
   18ac4:	str	r6, [sl]
   18ac8:	strb	r1, [r7, #3]
   18acc:	strb	r1, [r7, #2]
   18ad0:	strb	r1, [r7, #1]
   18ad4:	adc	r1, r5, #0
   18ad8:	mov	r7, #1
   18adc:	cmp	r2, #1
   18ae0:	str	r1, [sl, #4]
   18ae4:	bne	18b9c <read_boolean_unary_expression@@Base+0x2050>
   18ae8:	b	18f60 <read_boolean_unary_expression@@Base+0x2414>
   18aec:	ldr	r3, [r0, r2]
   18af0:	adds	r4, r5, #8
   18af4:	adc	r7, r6, #0
   18af8:	cmp	r3, #9
   18afc:	stm	sl, {r4, r7}
   18b00:	bne	19224 <read_boolean_unary_expression@@Base+0x26d8>
   18b04:	ldr	r3, [pc, #2444]	; 19498 <read_boolean_unary_expression@@Base+0x294c>
   18b08:	adds	r4, r5, #20
   18b0c:	adc	r7, r6, #0
   18b10:	add	r3, pc, r3
   18b14:	add	r6, r5, r0
   18b18:	ldrb	r3, [r3]
   18b1c:	ldr	r6, [r6, #16]
   18b20:	stm	sl, {r4, r7}
   18b24:	eor	r3, r3, #1
   18b28:	add	r7, r6, r3
   18b2c:	mov	r6, r0
   18b30:	mov	r3, #0
   18b34:	strb	r3, [r6, r5]!
   18b38:	mov	r5, #161	; 0xa1
   18b3c:	strb	r5, [r6, #3]
   18b40:	strb	r3, [r6, #2]
   18b44:	strb	r3, [r6, #1]
   18b48:	stm	sl, {r2, ip}
   18b4c:	mov	r3, r0
   18b50:	mov	r1, #9
   18b54:	strb	r1, [r3, r2]!
   18b58:	mov	r1, #0
   18b5c:	strb	r1, [r3, #3]
   18b60:	strb	r1, [r3, #2]
   18b64:	strb	r1, [r3, #1]
   18b68:	adds	r3, r2, #4
   18b6c:	adc	r5, ip, #0
   18b70:	stm	sl, {r3, r5}
   18b74:	mov	r2, r0
   18b78:	mov	r1, #0
   18b7c:	strb	r1, [r2, r3]!
   18b80:	adds	r6, r3, #4
   18b84:	strb	r1, [r2, #3]
   18b88:	strb	r1, [r2, #2]
   18b8c:	strb	r1, [r2, #1]
   18b90:	adc	r1, r5, #0
   18b94:	str	r6, [sl]
   18b98:	str	r1, [sl, #4]
   18b9c:	mov	r3, r0
   18ba0:	mov	r2, #0
   18ba4:	strb	r2, [r3, r6]!
   18ba8:	strb	r2, [r3, #3]
   18bac:	strb	r2, [r3, #2]
   18bb0:	strb	r2, [r3, #1]
   18bb4:	adds	r2, r6, #4
   18bb8:	adc	r3, r1, #0
   18bbc:	strd	r2, [sl]
   18bc0:	lsr	r1, r7, #24
   18bc4:	strb	r7, [r0, r2]!
   18bc8:	lsr	r6, r7, #16
   18bcc:	lsr	r5, r7, #8
   18bd0:	strb	r1, [r0, #3]
   18bd4:	strb	r6, [r0, #2]
   18bd8:	strb	r5, [r0, #1]
   18bdc:	ldrb	r0, [r8]
   18be0:	adds	r4, r2, #4
   18be4:	adc	r5, r3, #0
   18be8:	cmp	r0, #0
   18bec:	strd	r4, [sl]
   18bf0:	beq	18ca4 <read_boolean_unary_expression@@Base+0x2158>
   18bf4:	ldr	r9, [pc, #2284]	; 194e8 <read_boolean_unary_expression@@Base+0x299c>
   18bf8:	adds	r0, r2, #8
   18bfc:	adc	r1, r3, #0
   18c00:	add	r9, pc, r9
   18c04:	ldr	r7, [r9, #4]
   18c08:	ldr	r6, [pc, #2268]	; 194ec <read_boolean_unary_expression@@Base+0x29a0>
   18c0c:	ldr	r6, [pc, r6]
   18c10:	subs	r0, r6, r0
   18c14:	sbcs	r0, r7, r1
   18c18:	bcs	18e70 <read_boolean_unary_expression@@Base+0x2324>
   18c1c:	mov	r0, #7
   18c20:	orr	r0, r0, #131072	; 0x20000
   18c24:	adds	r0, r2, r0
   18c28:	adc	r1, r3, #0
   18c2c:	mvn	r2, #0
   18c30:	and	r5, r1, r2
   18c34:	mov	r1, #16646144	; 0xfe0000
   18c38:	orr	r1, r1, #-16777216	; 0xff000000
   18c3c:	ldr	r4, [pc, #2268]	; 19520 <read_boolean_unary_expression@@Base+0x29d4>
   18c40:	and	r6, r0, r1
   18c44:	ldr	r0, [pc, #2264]	; 19524 <read_boolean_unary_expression@@Base+0x29d8>
   18c48:	mov	r1, r6
   18c4c:	add	r4, pc, r4
   18c50:	ldr	r0, [pc, r0]
   18c54:	bl	11ec0 <realloc@plt>
   18c58:	str	r6, [r9]
   18c5c:	str	r5, [r9, #4]
   18c60:	str	r0, [r4]
   18c64:	ldrb	r1, [r8]
   18c68:	ldr	r5, [sl, #4]
   18c6c:	ldr	r4, [pc, #2228]	; 19528 <read_boolean_unary_expression@@Base+0x29dc>
   18c70:	mov	r3, r0
   18c74:	mov	r2, #0
   18c78:	ldr	r4, [pc, r4]
   18c7c:	strb	r2, [r3, r4]!
   18c80:	strb	r2, [r3, #3]
   18c84:	strb	r2, [r3, #2]
   18c88:	strb	r2, [r3, #1]
   18c8c:	adds	r2, r4, #4
   18c90:	adc	r3, r5, #0
   18c94:	cmp	r1, #0
   18c98:	strd	r2, [sl]
   18c9c:	beq	18cd0 <read_boolean_unary_expression@@Base+0x2184>
   18ca0:	b	18e9c <read_boolean_unary_expression@@Base+0x2350>
   18ca4:	ldr	r0, [pc, #2104]	; 194e4 <read_boolean_unary_expression@@Base+0x2998>
   18ca8:	adds	r2, r2, #8
   18cac:	mov	r1, #0
   18cb0:	adc	r3, r3, #0
   18cb4:	ldr	r0, [pc, r0]
   18cb8:	mov	r7, r0
   18cbc:	strb	r1, [r7, r4]!
   18cc0:	strb	r1, [r7, #3]
   18cc4:	strb	r1, [r7, #2]
   18cc8:	strb	r1, [r7, #1]
   18ccc:	strd	r2, [sl]
   18cd0:	mov	r7, r0
   18cd4:	mov	r1, #0
   18cd8:	strb	r1, [r7, r2]!
   18cdc:	strb	r1, [r7, #3]
   18ce0:	strb	r1, [r7, #2]
   18ce4:	strb	r1, [r7, #1]
   18ce8:	adds	r1, r2, #4
   18cec:	adc	r5, r3, #0
   18cf0:	stm	sl, {r1, r5}
   18cf4:	mov	r3, r0
   18cf8:	mov	r2, #0
   18cfc:	strb	r2, [r3, r1]!
   18d00:	strb	r2, [r3, #3]
   18d04:	strb	r2, [r3, #2]
   18d08:	strb	r2, [r3, #1]
   18d0c:	adds	r2, r1, #4
   18d10:	adc	r3, r5, #0
   18d14:	strd	r2, [sl]
   18d18:	mov	r7, r0
   18d1c:	mov	r1, #0
   18d20:	strb	r1, [r7, r2]!
   18d24:	strb	r1, [r7, #3]
   18d28:	strb	r1, [r7, #2]
   18d2c:	strb	r1, [r7, #1]
   18d30:	adds	r1, r2, #4
   18d34:	adc	r5, r3, #0
   18d38:	stm	sl, {r1, r5}
   18d3c:	mov	r3, r0
   18d40:	mov	r2, #0
   18d44:	strb	r2, [r3, r1]!
   18d48:	adds	r4, r1, #4
   18d4c:	strb	r2, [r3, #3]
   18d50:	strb	r2, [r3, #2]
   18d54:	strb	r2, [r3, #1]
   18d58:	adc	r3, r5, #0
   18d5c:	str	r4, [sl]
   18d60:	str	r3, [sl, #4]
   18d64:	mov	r2, r0
   18d68:	mov	r1, #0
   18d6c:	strb	r1, [r2, r4]!
   18d70:	strb	r1, [r2, #3]
   18d74:	strb	r1, [r2, #2]
   18d78:	strb	r1, [r2, #1]
   18d7c:	adds	r2, r4, #4
   18d80:	adc	r1, r3, #0
   18d84:	str	r2, [sl]
   18d88:	str	r1, [sl, #4]
   18d8c:	mov	r3, r0
   18d90:	mov	r4, #0
   18d94:	strb	r4, [r3, r2]!
   18d98:	mov	r7, #163	; 0xa3
   18d9c:	strb	r7, [r3, #3]
   18da0:	strb	r4, [r3, #2]
   18da4:	strb	r4, [r3, #1]
   18da8:	ldrb	r7, [r8]
   18dac:	adds	r6, r2, #4
   18db0:	adc	r3, r1, #0
   18db4:	cmp	r7, #1
   18db8:	str	r6, [sl]
   18dbc:	str	r3, [sl, #4]
   18dc0:	bne	18e34 <read_boolean_unary_expression@@Base+0x22e8>
   18dc4:	ldr	r8, [pc, #1852]	; 19508 <read_boolean_unary_expression@@Base+0x29bc>
   18dc8:	adds	lr, r2, #8
   18dcc:	adc	ip, r1, #0
   18dd0:	add	r8, pc, r8
   18dd4:	ldr	r5, [r8, #4]
   18dd8:	ldr	r7, [pc, #1836]	; 1950c <read_boolean_unary_expression@@Base+0x29c0>
   18ddc:	ldr	r7, [pc, r7]
   18de0:	subs	r7, r7, lr
   18de4:	sbcs	r7, r5, ip
   18de8:	bcs	18e34 <read_boolean_unary_expression@@Base+0x22e8>
   18dec:	mov	r3, #7
   18df0:	orr	r3, r3, #131072	; 0x20000
   18df4:	adds	r2, r2, r3
   18df8:	adc	r1, r1, #0
   18dfc:	mvn	r3, #0
   18e00:	and	r7, r1, r3
   18e04:	mov	r1, #16646144	; 0xfe0000
   18e08:	orr	r1, r1, #-16777216	; 0xff000000
   18e0c:	ldr	r5, [pc, #1788]	; 19510 <read_boolean_unary_expression@@Base+0x29c4>
   18e10:	and	r6, r2, r1
   18e14:	mov	r1, r6
   18e18:	add	r5, pc, r5
   18e1c:	bl	11ec0 <realloc@plt>
   18e20:	strd	r6, [r8]
   18e24:	str	r0, [r5]
   18e28:	ldr	r3, [sl, #4]
   18e2c:	ldr	r6, [pc, #1760]	; 19514 <read_boolean_unary_expression@@Base+0x29c8>
   18e30:	ldr	r6, [pc, r6]
   18e34:	ldr	r0, [pc, #1756]	; 19518 <read_boolean_unary_expression@@Base+0x29cc>
   18e38:	ldr	r1, [pc, #1756]	; 1951c <read_boolean_unary_expression@@Base+0x29d0>
   18e3c:	adds	r2, r6, #4
   18e40:	add	r0, pc, r0
   18e44:	adc	r3, r3, #0
   18e48:	ldr	r1, [pc, r1]
   18e4c:	strb	r4, [r1, r6]!
   18e50:	strb	r4, [r1, #3]
   18e54:	strb	r4, [r1, #2]
   18e58:	strb	r4, [r1, #1]
   18e5c:	mov	r1, #1
   18e60:	strd	r2, [sl]
   18e64:	strb	r1, [r0]
   18e68:	sub	sp, fp, #28
   18e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e70:	ldr	r0, [pc, #1656]	; 194f0 <read_boolean_unary_expression@@Base+0x29a4>
   18e74:	adds	r2, r2, #8
   18e78:	mov	r1, #0
   18e7c:	adc	r3, r3, #0
   18e80:	ldr	r0, [pc, r0]
   18e84:	mov	r7, r0
   18e88:	strb	r1, [r7, r4]!
   18e8c:	strb	r1, [r7, #3]
   18e90:	strb	r1, [r7, #2]
   18e94:	strb	r1, [r7, #1]
   18e98:	strd	r2, [sl]
   18e9c:	ldr	r6, [r9, #4]
   18ea0:	ldr	r1, [pc, #1668]	; 1952c <read_boolean_unary_expression@@Base+0x29e0>
   18ea4:	adds	ip, r4, #8
   18ea8:	adc	r7, r5, #0
   18eac:	ldr	r1, [pc, r1]
   18eb0:	subs	r1, r1, ip
   18eb4:	sbcs	r1, r6, r7
   18eb8:	bcs	19004 <read_boolean_unary_expression@@Base+0x24b8>
   18ebc:	mov	r1, #7
   18ec0:	orr	r1, r1, #131072	; 0x20000
   18ec4:	adds	r1, r4, r1
   18ec8:	adc	r2, r5, #0
   18ecc:	mvn	r3, #0
   18ed0:	and	r5, r2, r3
   18ed4:	mov	r2, #16646144	; 0xfe0000
   18ed8:	orr	r2, r2, #-16777216	; 0xff000000
   18edc:	ldr	r6, [pc, #1612]	; 19530 <read_boolean_unary_expression@@Base+0x29e4>
   18ee0:	and	r4, r1, r2
   18ee4:	mov	r1, r4
   18ee8:	add	r6, pc, r6
   18eec:	bl	11ec0 <realloc@plt>
   18ef0:	str	r0, [r6]
   18ef4:	strd	r4, [r9]
   18ef8:	ldrb	r7, [r8]
   18efc:	ldr	r3, [sl, #4]
   18f00:	ldr	r2, [pc, #1580]	; 19534 <read_boolean_unary_expression@@Base+0x29e8>
   18f04:	mov	r6, r0
   18f08:	mov	r1, #0
   18f0c:	ldr	r2, [pc, r2]
   18f10:	strb	r1, [r6, r2]!
   18f14:	strb	r1, [r6, #3]
   18f18:	strb	r1, [r6, #2]
   18f1c:	strb	r1, [r6, #1]
   18f20:	adds	r1, r2, #4
   18f24:	adc	r5, r3, #0
   18f28:	cmp	r7, #1
   18f2c:	stm	sl, {r1, r5}
   18f30:	bne	18cf4 <read_boolean_unary_expression@@Base+0x21a8>
   18f34:	b	19028 <read_boolean_unary_expression@@Base+0x24dc>
   18f38:	mov	r2, r0
   18f3c:	mov	r1, #0
   18f40:	strb	r1, [r2, r3]!
   18f44:	adds	r6, r3, #4
   18f48:	strb	r1, [r2, #3]
   18f4c:	strb	r1, [r2, #2]
   18f50:	strb	r1, [r2, #1]
   18f54:	adc	r1, r5, #0
   18f58:	str	r6, [sl]
   18f5c:	str	r1, [sl, #4]
   18f60:	ldr	r4, [r9, #4]
   18f64:	ldr	r2, [pc, #1376]	; 194cc <read_boolean_unary_expression@@Base+0x2980>
   18f68:	adds	ip, r3, #8
   18f6c:	adc	r7, r5, #0
   18f70:	ldr	r2, [pc, r2]
   18f74:	subs	r2, r2, ip
   18f78:	sbcs	r2, r4, r7
   18f7c:	bcs	190c8 <read_boolean_unary_expression@@Base+0x257c>
   18f80:	mov	r1, #7
   18f84:	orr	r1, r1, #131072	; 0x20000
   18f88:	adds	r1, r3, r1
   18f8c:	adc	r2, r5, #0
   18f90:	mvn	r3, #0
   18f94:	and	r5, r2, r3
   18f98:	mov	r2, #16646144	; 0xfe0000
   18f9c:	orr	r2, r2, #-16777216	; 0xff000000
   18fa0:	ldr	r4, [pc, #1320]	; 194d0 <read_boolean_unary_expression@@Base+0x2984>
   18fa4:	and	r6, r1, r2
   18fa8:	mov	r1, r6
   18fac:	add	r4, pc, r4
   18fb0:	bl	11ec0 <realloc@plt>
   18fb4:	str	r6, [r9]
   18fb8:	str	r5, [r9, #4]
   18fbc:	str	r0, [r4]
   18fc0:	ldrb	r5, [r8]
   18fc4:	ldr	r1, [sl, #4]
   18fc8:	ldr	r6, [pc, #1284]	; 194d4 <read_boolean_unary_expression@@Base+0x2988>
   18fcc:	mov	r3, r0
   18fd0:	mov	r2, #0
   18fd4:	mov	r7, #1
   18fd8:	ldr	r6, [pc, r6]
   18fdc:	strb	r2, [r3, r6]!
   18fe0:	strb	r2, [r3, #3]
   18fe4:	strb	r2, [r3, #2]
   18fe8:	strb	r2, [r3, #1]
   18fec:	adds	r2, r6, #4
   18ff0:	adc	r3, r1, #0
   18ff4:	cmp	r5, #1
   18ff8:	strd	r2, [sl]
   18ffc:	bne	18bc0 <read_boolean_unary_expression@@Base+0x2074>
   19000:	b	190ec <read_boolean_unary_expression@@Base+0x25a0>
   19004:	mov	r7, r0
   19008:	mov	r1, #0
   1900c:	strb	r1, [r7, r2]!
   19010:	strb	r1, [r7, #3]
   19014:	strb	r1, [r7, #2]
   19018:	strb	r1, [r7, #1]
   1901c:	adds	r1, r2, #4
   19020:	adc	r5, r3, #0
   19024:	stm	sl, {r1, r5}
   19028:	ldr	r4, [r9, #4]
   1902c:	ldr	r6, [pc, #1284]	; 19538 <read_boolean_unary_expression@@Base+0x29ec>
   19030:	adds	r7, r2, #8
   19034:	adc	ip, r3, #0
   19038:	ldr	r6, [pc, r6]
   1903c:	subs	r7, r6, r7
   19040:	sbcs	r7, r4, ip
   19044:	bcs	19160 <read_boolean_unary_expression@@Base+0x2614>
   19048:	mov	r1, #7
   1904c:	orr	r1, r1, #131072	; 0x20000
   19050:	adds	r1, r2, r1
   19054:	adc	r2, r3, #0
   19058:	mvn	r3, #0
   1905c:	and	r5, r2, r3
   19060:	mov	r2, #16646144	; 0xfe0000
   19064:	orr	r2, r2, #-16777216	; 0xff000000
   19068:	ldr	r4, [pc, #1228]	; 1953c <read_boolean_unary_expression@@Base+0x29f0>
   1906c:	and	r6, r1, r2
   19070:	mov	r1, r6
   19074:	add	r4, pc, r4
   19078:	bl	11ec0 <realloc@plt>
   1907c:	str	r6, [r9]
   19080:	str	r5, [r9, #4]
   19084:	str	r0, [r4]
   19088:	ldrb	r7, [r8]
   1908c:	ldr	r5, [sl, #4]
   19090:	ldr	r1, [pc, #1192]	; 19540 <read_boolean_unary_expression@@Base+0x29f4>
   19094:	mov	r3, r0
   19098:	mov	r2, #0
   1909c:	ldr	r1, [pc, r1]
   190a0:	strb	r2, [r3, r1]!
   190a4:	strb	r2, [r3, #3]
   190a8:	strb	r2, [r3, #2]
   190ac:	strb	r2, [r3, #1]
   190b0:	adds	r2, r1, #4
   190b4:	adc	r3, r5, #0
   190b8:	cmp	r7, #1
   190bc:	strd	r2, [sl]
   190c0:	bne	18d18 <read_boolean_unary_expression@@Base+0x21cc>
   190c4:	b	19184 <read_boolean_unary_expression@@Base+0x2638>
   190c8:	mov	r3, r0
   190cc:	mov	r2, #0
   190d0:	strb	r2, [r3, r6]!
   190d4:	strb	r2, [r3, #3]
   190d8:	strb	r2, [r3, #2]
   190dc:	strb	r2, [r3, #1]
   190e0:	adds	r2, r6, #4
   190e4:	adc	r3, r1, #0
   190e8:	strd	r2, [sl]
   190ec:	ldr	r4, [r9, #4]
   190f0:	ldr	r5, [pc, #992]	; 194d8 <read_boolean_unary_expression@@Base+0x298c>
   190f4:	adds	lr, r6, #8
   190f8:	adc	ip, r1, #0
   190fc:	mov	r7, #1
   19100:	ldr	r5, [pc, r5]
   19104:	subs	r5, r5, lr
   19108:	sbcs	r5, r4, ip
   1910c:	bcs	18bc0 <read_boolean_unary_expression@@Base+0x2074>
   19110:	mov	r2, #7
   19114:	orr	r2, r2, #131072	; 0x20000
   19118:	adds	r2, r6, r2
   1911c:	adc	r1, r1, #0
   19120:	mvn	r3, #0
   19124:	and	r5, r1, r3
   19128:	mov	r1, #16646144	; 0xfe0000
   1912c:	orr	r1, r1, #-16777216	; 0xff000000
   19130:	ldr	r4, [pc, #932]	; 194dc <read_boolean_unary_expression@@Base+0x2990>
   19134:	and	r6, r2, r1
   19138:	mov	r1, r6
   1913c:	add	r4, pc, r4
   19140:	bl	11ec0 <realloc@plt>
   19144:	str	r6, [r9]
   19148:	str	r5, [r9, #4]
   1914c:	str	r0, [r4]
   19150:	ldr	r3, [sl, #4]
   19154:	ldr	r2, [pc, #900]	; 194e0 <read_boolean_unary_expression@@Base+0x2994>
   19158:	ldr	r2, [pc, r2]
   1915c:	b	18bc0 <read_boolean_unary_expression@@Base+0x2074>
   19160:	mov	r3, r0
   19164:	mov	r2, #0
   19168:	strb	r2, [r3, r1]!
   1916c:	strb	r2, [r3, #3]
   19170:	strb	r2, [r3, #2]
   19174:	strb	r2, [r3, #1]
   19178:	adds	r2, r1, #4
   1917c:	adc	r3, r5, #0
   19180:	strd	r2, [sl]
   19184:	ldr	r4, [r9, #4]
   19188:	ldr	r6, [pc, #948]	; 19544 <read_boolean_unary_expression@@Base+0x29f8>
   1918c:	adds	r7, r1, #8
   19190:	adc	ip, r5, #0
   19194:	ldr	r6, [pc, r6]
   19198:	subs	r7, r6, r7
   1919c:	sbcs	r7, r4, ip
   191a0:	bcs	1924c <read_boolean_unary_expression@@Base+0x2700>
   191a4:	mov	r2, #7
   191a8:	orr	r2, r2, #131072	; 0x20000
   191ac:	adds	r1, r1, r2
   191b0:	adc	r2, r5, #0
   191b4:	mvn	r3, #0
   191b8:	and	r5, r2, r3
   191bc:	mov	r2, #16646144	; 0xfe0000
   191c0:	orr	r2, r2, #-16777216	; 0xff000000
   191c4:	ldr	r4, [pc, #892]	; 19548 <read_boolean_unary_expression@@Base+0x29fc>
   191c8:	and	r6, r1, r2
   191cc:	mov	r1, r6
   191d0:	add	r4, pc, r4
   191d4:	bl	11ec0 <realloc@plt>
   191d8:	str	r6, [r9]
   191dc:	str	r5, [r9, #4]
   191e0:	str	r0, [r4]
   191e4:	ldrb	r7, [r8]
   191e8:	ldr	r3, [sl, #4]
   191ec:	ldr	r2, [pc, #856]	; 1954c <read_boolean_unary_expression@@Base+0x2a00>
   191f0:	mov	r6, r0
   191f4:	mov	r1, #0
   191f8:	ldr	r2, [pc, r2]
   191fc:	strb	r1, [r6, r2]!
   19200:	strb	r1, [r6, #3]
   19204:	strb	r1, [r6, #2]
   19208:	strb	r1, [r6, #1]
   1920c:	adds	r1, r2, #4
   19210:	adc	r5, r3, #0
   19214:	cmp	r7, #1
   19218:	stm	sl, {r1, r5}
   1921c:	bne	18d3c <read_boolean_unary_expression@@Base+0x21f0>
   19220:	b	19270 <read_boolean_unary_expression@@Base+0x2724>
   19224:	ldr	r1, [pc, #616]	; 19494 <read_boolean_unary_expression@@Base+0x2948>
   19228:	add	r1, pc, r1
   1922c:	ldr	r0, [pc, #600]	; 1948c <read_boolean_unary_expression@@Base+0x2940>
   19230:	ldr	r0, [pc, r0]
   19234:	ldr	r0, [r0]
   19238:	ldr	r2, [pc, #592]	; 19490 <read_boolean_unary_expression@@Base+0x2944>
   1923c:	ldr	r2, [pc, r2]
   19240:	sub	sp, fp, #28
   19244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19248:	b	11f5c <fprintf@plt>
   1924c:	mov	r7, r0
   19250:	mov	r1, #0
   19254:	strb	r1, [r7, r2]!
   19258:	strb	r1, [r7, #3]
   1925c:	strb	r1, [r7, #2]
   19260:	strb	r1, [r7, #1]
   19264:	adds	r1, r2, #4
   19268:	adc	r5, r3, #0
   1926c:	stm	sl, {r1, r5}
   19270:	ldr	r4, [r9, #4]
   19274:	ldr	r6, [pc, #724]	; 19550 <read_boolean_unary_expression@@Base+0x2a04>
   19278:	adds	r7, r2, #8
   1927c:	adc	ip, r3, #0
   19280:	ldr	r6, [pc, r6]
   19284:	subs	r7, r6, r7
   19288:	sbcs	r7, r4, ip
   1928c:	bcs	19314 <read_boolean_unary_expression@@Base+0x27c8>
   19290:	mov	r1, #7
   19294:	orr	r1, r1, #131072	; 0x20000
   19298:	adds	r1, r2, r1
   1929c:	adc	r2, r3, #0
   192a0:	mvn	r3, #0
   192a4:	and	r5, r2, r3
   192a8:	mov	r2, #16646144	; 0xfe0000
   192ac:	orr	r2, r2, #-16777216	; 0xff000000
   192b0:	ldr	r4, [pc, #668]	; 19554 <read_boolean_unary_expression@@Base+0x2a08>
   192b4:	and	r6, r1, r2
   192b8:	mov	r1, r6
   192bc:	add	r4, pc, r4
   192c0:	bl	11ec0 <realloc@plt>
   192c4:	str	r6, [r9]
   192c8:	str	r5, [r9, #4]
   192cc:	str	r0, [r4]
   192d0:	ldrb	r2, [r8]
   192d4:	ldr	r5, [sl, #4]
   192d8:	ldr	r1, [pc, #632]	; 19558 <read_boolean_unary_expression@@Base+0x2a0c>
   192dc:	mov	r7, r0
   192e0:	mov	r3, #0
   192e4:	ldr	r1, [pc, r1]
   192e8:	adds	r4, r1, #4
   192ec:	strb	r3, [r7, r1]!
   192f0:	str	r4, [sl]
   192f4:	strb	r3, [r7, #3]
   192f8:	strb	r3, [r7, #2]
   192fc:	strb	r3, [r7, #1]
   19300:	adc	r3, r5, #0
   19304:	cmp	r2, #1
   19308:	str	r3, [sl, #4]
   1930c:	bne	18d64 <read_boolean_unary_expression@@Base+0x2218>
   19310:	b	1933c <read_boolean_unary_expression@@Base+0x27f0>
   19314:	mov	r3, r0
   19318:	mov	r2, #0
   1931c:	strb	r2, [r3, r1]!
   19320:	adds	r4, r1, #4
   19324:	strb	r2, [r3, #3]
   19328:	strb	r2, [r3, #2]
   1932c:	strb	r2, [r3, #1]
   19330:	adc	r3, r5, #0
   19334:	str	r4, [sl]
   19338:	str	r3, [sl, #4]
   1933c:	ldr	r6, [r9, #4]
   19340:	ldr	r2, [pc, #532]	; 1955c <read_boolean_unary_expression@@Base+0x2a10>
   19344:	adds	ip, r1, #8
   19348:	adc	r7, r5, #0
   1934c:	ldr	r2, [pc, r2]
   19350:	subs	r2, r2, ip
   19354:	sbcs	r2, r6, r7
   19358:	bcs	193e0 <read_boolean_unary_expression@@Base+0x2894>
   1935c:	mov	r2, #7
   19360:	orr	r2, r2, #131072	; 0x20000
   19364:	adds	r1, r1, r2
   19368:	adc	r2, r5, #0
   1936c:	mvn	r3, #0
   19370:	and	r5, r2, r3
   19374:	mov	r2, #16646144	; 0xfe0000
   19378:	orr	r2, r2, #-16777216	; 0xff000000
   1937c:	ldr	r4, [pc, #368]	; 194f4 <read_boolean_unary_expression@@Base+0x29a8>
   19380:	and	r6, r1, r2
   19384:	mov	r1, r6
   19388:	add	r4, pc, r4
   1938c:	bl	11ec0 <realloc@plt>
   19390:	str	r6, [r9]
   19394:	str	r5, [r9, #4]
   19398:	str	r0, [r4]
   1939c:	ldrb	r7, [r8]
   193a0:	ldr	r3, [sl, #4]
   193a4:	ldr	r4, [pc, #332]	; 194f8 <read_boolean_unary_expression@@Base+0x29ac>
   193a8:	mov	r2, r0
   193ac:	mov	r1, #0
   193b0:	ldr	r4, [pc, r4]
   193b4:	strb	r1, [r2, r4]!
   193b8:	strb	r1, [r2, #3]
   193bc:	strb	r1, [r2, #2]
   193c0:	strb	r1, [r2, #1]
   193c4:	adds	r2, r4, #4
   193c8:	adc	r1, r3, #0
   193cc:	cmp	r7, #0
   193d0:	str	r2, [sl]
   193d4:	str	r1, [sl, #4]
   193d8:	beq	18d8c <read_boolean_unary_expression@@Base+0x2240>
   193dc:	b	19408 <read_boolean_unary_expression@@Base+0x28bc>
   193e0:	mov	r2, r0
   193e4:	mov	r1, #0
   193e8:	strb	r1, [r2, r4]!
   193ec:	strb	r1, [r2, #3]
   193f0:	strb	r1, [r2, #2]
   193f4:	strb	r1, [r2, #1]
   193f8:	adds	r2, r4, #4
   193fc:	adc	r1, r3, #0
   19400:	str	r2, [sl]
   19404:	str	r1, [sl, #4]
   19408:	ldr	r5, [r9, #4]
   1940c:	ldr	r6, [pc, #232]	; 194fc <read_boolean_unary_expression@@Base+0x29b0>
   19410:	adds	r7, r4, #8
   19414:	adc	ip, r3, #0
   19418:	ldr	r6, [pc, r6]
   1941c:	subs	r7, r6, r7
   19420:	sbcs	r7, r5, ip
   19424:	bcs	18d8c <read_boolean_unary_expression@@Base+0x2240>
   19428:	mov	r1, #7
   1942c:	orr	r1, r1, #131072	; 0x20000
   19430:	adds	r1, r4, r1
   19434:	adc	r2, r3, #0
   19438:	mvn	r3, #0
   1943c:	and	r7, r2, r3
   19440:	mov	r2, #16646144	; 0xfe0000
   19444:	orr	r2, r2, #-16777216	; 0xff000000
   19448:	ldr	r5, [pc, #176]	; 19500 <read_boolean_unary_expression@@Base+0x29b4>
   1944c:	and	r6, r1, r2
   19450:	mov	r1, r6
   19454:	add	r5, pc, r5
   19458:	bl	11ec0 <realloc@plt>
   1945c:	strd	r6, [r9]
   19460:	str	r0, [r5]
   19464:	ldr	r1, [sl, #4]
   19468:	ldr	r2, [pc, #148]	; 19504 <read_boolean_unary_expression@@Base+0x29b8>
   1946c:	ldr	r2, [pc, r2]
   19470:	b	18d8c <read_boolean_unary_expression@@Base+0x2240>
   19474:	andeq	r4, r1, ip, lsr #11
   19478:	andeq	r4, r1, ip, lsr #11
   1947c:	andeq	r4, r1, r0, lsr #11
   19480:	andeq	r4, r1, r4, lsl #11
   19484:			; <UNDEFINED> instruction: 0x000144b8
   19488:	andeq	r2, r0, r5, asr #22
   1948c:	andeq	r2, r1, r8, lsl #29
   19490:	andeq	r3, r1, ip, ror #22
   19494:	andeq	r2, r0, lr, lsr #5
   19498:			; <UNDEFINED> instruction: 0x000142b8
   1949c:	andeq	r4, r1, r4, ror r5
   194a0:	andeq	r4, r1, r8, ror #10
   194a4:	andeq	r4, r1, ip, asr r4
   194a8:	andeq	r4, r1, ip, lsl r5
   194ac:	andeq	r4, r1, r8, lsl r5
   194b0:	strdeq	r4, [r1], -r8
   194b4:	andeq	r4, r1, r4, lsr r4
   194b8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   194bc:	ldrdeq	r4, [r1], -r8
   194c0:	andeq	r4, r1, r4, ror #6
   194c4:	andeq	r4, r1, r4, lsr #6
   194c8:	andeq	r4, r1, r8, lsl #6
   194cc:	andeq	r3, r1, r8, asr #28
   194d0:	andeq	r3, r1, r8, lsl #28
   194d4:	andeq	r3, r1, r8, ror #27
   194d8:			; <UNDEFINED> instruction: 0x00013cb8
   194dc:	andeq	r3, r1, r8, ror ip
   194e0:	andeq	r3, r1, r8, ror #24
   194e4:	andeq	r4, r1, r0, lsl #2
   194e8:			; <UNDEFINED> instruction: 0x000141b8
   194ec:	andeq	r4, r1, ip, lsr #3
   194f0:	andeq	r3, r1, r4, lsr pc
   194f4:	andeq	r3, r1, ip, lsr #20
   194f8:	andeq	r3, r1, r0, lsl sl
   194fc:	andeq	r3, r1, r0, lsr #19
   19500:	andeq	r3, r1, r0, ror #18
   19504:	andeq	r3, r1, r4, asr r9
   19508:	andeq	r3, r1, r8, ror #31
   1950c:	ldrdeq	r3, [r1], -ip
   19510:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19514:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19518:	andeq	r3, r1, r8, lsl #31
   1951c:	andeq	r3, r1, ip, ror #30
   19520:	andeq	r4, r1, r8, ror #2
   19524:	andeq	r4, r1, r4, ror #2
   19528:	andeq	r4, r1, r8, asr #2
   1952c:	andeq	r3, r1, ip, lsl #30
   19530:	andeq	r3, r1, ip, asr #29
   19534:			; <UNDEFINED> instruction: 0x00013eb4
   19538:	andeq	r3, r1, r0, lsl #27
   1953c:	andeq	r3, r1, r0, asr #26
   19540:	andeq	r3, r1, r4, lsr #26
   19544:	andeq	r3, r1, r4, lsr #24
   19548:	andeq	r3, r1, r4, ror #23
   1954c:	andeq	r3, r1, r8, asr #23
   19550:	andeq	r3, r1, r8, lsr fp
   19554:	strdeq	r3, [r1], -r8
   19558:	ldrdeq	r3, [r1], -ip
   1955c:	andeq	r3, r1, ip, ror #20
   19560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19564:	add	fp, sp, #28
   19568:	sub	sp, sp, #4
   1956c:	ldr	r0, [pc, #496]	; 19764 <read_boolean_unary_expression@@Base+0x2c18>
   19570:	ldr	r0, [pc, r0]
   19574:	cmp	r0, #0
   19578:	beq	1970c <read_boolean_unary_expression@@Base+0x2bc0>
   1957c:	ldr	sl, [pc, #484]	; 19768 <read_boolean_unary_expression@@Base+0x2c1c>
   19580:	mov	r5, #0
   19584:	mov	r1, #0
   19588:	add	sl, pc, sl
   1958c:	ldrb	r0, [sl]
   19590:	ldr	r8, [pc, #468]	; 1976c <read_boolean_unary_expression@@Base+0x2c20>
   19594:	ldr	r4, [pc, #468]	; 19770 <read_boolean_unary_expression@@Base+0x2c24>
   19598:	cmp	r0, #1
   1959c:	add	r8, pc, r8
   195a0:	add	r4, pc, r4
   195a4:	bne	19620 <read_boolean_unary_expression@@Base+0x2ad4>
   195a8:	ldr	r9, [pc, #452]	; 19774 <read_boolean_unary_expression@@Base+0x2c28>
   195ac:	ldr	r0, [r8, #4]
   195b0:	ldr	r2, [pc, #448]	; 19778 <read_boolean_unary_expression@@Base+0x2c2c>
   195b4:	add	r9, pc, r9
   195b8:	mov	ip, r4
   195bc:	mov	r1, #1
   195c0:	ldr	r2, [pc, r2]
   195c4:	ldr	r7, [r9, #4]
   195c8:	ldr	r4, [pc, #428]	; 1977c <read_boolean_unary_expression@@Base+0x2c30>
   195cc:	adds	r3, r2, #8
   195d0:	adc	r6, r0, #0
   195d4:	ldr	r4, [pc, r4]
   195d8:	subs	r3, r4, r3
   195dc:	mov	r4, ip
   195e0:	sbcs	r3, r7, r6
   195e4:	bcs	19620 <read_boolean_unary_expression@@Base+0x2ad4>
   195e8:	mov	r1, #7
   195ec:	orr	r1, r1, #131072	; 0x20000
   195f0:	adds	r1, r2, r1
   195f4:	adc	r7, r0, #0
   195f8:	mov	r0, #16646144	; 0xfe0000
   195fc:	orr	r0, r0, #-16777216	; 0xff000000
   19600:	and	r6, r1, r0
   19604:	ldr	r0, [pc, #372]	; 19780 <read_boolean_unary_expression@@Base+0x2c34>
   19608:	mov	r1, r6
   1960c:	ldr	r0, [pc, r0]
   19610:	bl	11ec0 <realloc@plt>
   19614:	ldrb	r1, [sl]
   19618:	strd	r6, [r9]
   1961c:	str	r0, [r4]
   19620:	ldr	r2, [pc, #348]	; 19784 <read_boolean_unary_expression@@Base+0x2c38>
   19624:	ldr	r2, [pc, r2]
   19628:	ldr	r0, [pc, #344]	; 19788 <read_boolean_unary_expression@@Base+0x2c3c>
   1962c:	ldr	r0, [pc, r0]
   19630:	ldr	r3, [r8, #4]
   19634:	mov	r7, r0
   19638:	strb	r5, [r7, r2]!
   1963c:	adds	r2, r2, #8
   19640:	adc	r3, r3, #0
   19644:	strb	r5, [r7, #5]
   19648:	strb	r5, [r7, #3]
   1964c:	strb	r5, [r7, #2]
   19650:	strb	r5, [r7, #1]
   19654:	strb	r5, [r7, #4]!
   19658:	cmp	r1, #0
   1965c:	strb	r5, [r7, #3]
   19660:	strb	r5, [r7, #2]
   19664:	strd	r2, [r8]
   19668:	beq	19690 <read_boolean_unary_expression@@Base+0x2b44>
   1966c:	ldr	r3, [pc, #280]	; 1978c <read_boolean_unary_expression@@Base+0x2c40>
   19670:	mov	r1, r2
   19674:	mov	r2, #1
   19678:	ldr	r3, [pc, r3]
   1967c:	bl	11ecc <fwrite@plt>
   19680:	ldr	r0, [pc, #264]	; 19790 <read_boolean_unary_expression@@Base+0x2c44>
   19684:	ldr	r0, [pc, r0]
   19688:	bl	11e78 <free@plt>
   1968c:	b	196d4 <read_boolean_unary_expression@@Base+0x2b88>
   19690:	ldr	r1, [pc, #252]	; 19794 <read_boolean_unary_expression@@Base+0x2c48>
   19694:	mov	r2, #4
   19698:	ldr	r1, [pc, r1]
   1969c:	bl	11ff8 <msync@plt>
   196a0:	cmn	r0, #1
   196a4:	beq	19720 <read_boolean_unary_expression@@Base+0x2bd4>
   196a8:	ldr	r1, [pc, #244]	; 197a4 <read_boolean_unary_expression@@Base+0x2c58>
   196ac:	ldr	r1, [pc, r1]
   196b0:	ldr	r0, [pc, #240]	; 197a8 <read_boolean_unary_expression@@Base+0x2c5c>
   196b4:	ldr	r0, [pc, r0]
   196b8:	bl	11fd4 <munmap@plt>
   196bc:	ldr	r0, [pc, #232]	; 197ac <read_boolean_unary_expression@@Base+0x2c60>
   196c0:	mov	r1, #0
   196c4:	str	r1, [r4]
   196c8:	add	r0, pc, r0
   196cc:	str	r1, [r0]
   196d0:	str	r1, [r0, #4]
   196d4:	ldr	r0, [pc, #212]	; 197b0 <read_boolean_unary_expression@@Base+0x2c64>
   196d8:	ldr	r0, [pc, r0]
   196dc:	bl	11e6c <fflush@plt>
   196e0:	ldr	r0, [pc, #204]	; 197b4 <read_boolean_unary_expression@@Base+0x2c68>
   196e4:	ldr	r0, [pc, r0]
   196e8:	bl	19c60 <__gcov_flush@@Base+0x304>
   196ec:	ldr	r0, [pc, #196]	; 197b8 <read_boolean_unary_expression@@Base+0x2c6c>
   196f0:	ldr	r0, [pc, r0]
   196f4:	bl	11fbc <fclose@plt>
   196f8:	ldr	r0, [pc, #188]	; 197bc <read_boolean_unary_expression@@Base+0x2c70>
   196fc:	mov	r1, #0
   19700:	str	r1, [r4]
   19704:	add	r0, pc, r0
   19708:	str	r1, [r0]
   1970c:	ldr	r0, [pc, #172]	; 197c0 <read_boolean_unary_expression@@Base+0x2c74>
   19710:	ldr	r0, [pc, r0]
   19714:	sub	sp, fp, #28
   19718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1971c:	b	11e78 <free@plt>
   19720:	bl	11f68 <__errno_location@plt>
   19724:	ldr	r1, [pc, #108]	; 19798 <read_boolean_unary_expression@@Base+0x2c4c>
   19728:	mov	r6, r4
   1972c:	ldr	r1, [pc, r1]
   19730:	ldr	r0, [r0]
   19734:	ldr	r4, [r1]
   19738:	ldr	r5, [pc, #92]	; 1979c <read_boolean_unary_expression@@Base+0x2c50>
   1973c:	ldr	r5, [pc, r5]
   19740:	bl	11f14 <strerror@plt>
   19744:	ldr	r1, [pc, #84]	; 197a0 <read_boolean_unary_expression@@Base+0x2c54>
   19748:	mov	r3, r0
   1974c:	mov	r0, r4
   19750:	add	r1, pc, r1
   19754:	mov	r2, r5
   19758:	mov	r4, r6
   1975c:	bl	11f5c <fprintf@plt>
   19760:	b	196a8 <read_boolean_unary_expression@@Base+0x2b5c>
   19764:	andeq	r3, r1, r0, asr #16
   19768:	andeq	r3, r1, r4, lsr #16
   1976c:	andeq	r3, r1, r4, lsr #16
   19770:	andeq	r3, r1, r4, lsl r8
   19774:	andeq	r3, r1, r4, lsl #16
   19778:	andeq	r3, r1, r0, lsl #16
   1977c:	andeq	r3, r1, r4, ror #15
   19780:	andeq	r3, r1, r8, lsr #15
   19784:	muleq	r1, ip, r7
   19788:	andeq	r3, r1, r8, lsl #15
   1978c:	andeq	r3, r1, r8, lsr r7
   19790:	andeq	r3, r1, r0, lsr r7
   19794:	andeq	r3, r1, r0, asr #14
   19798:	andeq	r2, r1, ip, lsl #19
   1979c:	andeq	r3, r1, ip, ror #12
   197a0:	strdeq	r1, [r0], -r4
   197a4:	andeq	r3, r1, ip, lsr #14
   197a8:	andeq	r3, r1, r0, lsl #14
   197ac:	andeq	r3, r1, r0, lsl r7
   197b0:	ldrdeq	r3, [r1], -r8
   197b4:	andeq	r2, r1, r4, ror #19
   197b8:	andeq	r3, r1, r0, asr #13
   197bc:	andeq	r3, r1, ip, lsr #13
   197c0:	muleq	r1, r8, r6
   197c4:	push	{r4, sl, fp, lr}
   197c8:	add	fp, sp, #8
   197cc:	mov	r4, r0
   197d0:	mov	r0, #12
   197d4:	bl	11efc <malloc@plt>
   197d8:	ldr	r1, [pc, #60]	; 1981c <read_boolean_unary_expression@@Base+0x2cd0>
   197dc:	mov	r2, #0
   197e0:	add	r1, pc, r1
   197e4:	stm	r0, {r1, r4}
   197e8:	str	r2, [r0, #8]
   197ec:	ldr	r1, [pc, #44]	; 19820 <read_boolean_unary_expression@@Base+0x2cd4>
   197f0:	ldr	r1, [pc, r1]
   197f4:	mov	r2, r1
   197f8:	ldr	r3, [r2], #4
   197fc:	ldr	r4, [r2]
   19800:	cmp	r3, #0
   19804:	mov	r3, r2
   19808:	addne	r3, r4, #8
   1980c:	moveq	r2, r1
   19810:	str	r0, [r3]
   19814:	str	r0, [r2]
   19818:	pop	{r4, sl, fp, pc}
   1981c:	andeq	r3, r1, ip, ror #11
   19820:	andeq	r2, r1, r4, asr #17
   19824:	push	{r4, r5, fp, lr}
   19828:	add	fp, sp, #8
   1982c:	ldr	r0, [pc, #64]	; 19874 <read_boolean_unary_expression@@Base+0x2d28>
   19830:	ldr	r0, [pc, r0]
   19834:	ldr	r4, [r0]
   19838:	cmp	r4, #0
   1983c:	beq	19870 <read_boolean_unary_expression@@Base+0x2d24>
   19840:	ldr	r5, [pc, #48]	; 19878 <read_boolean_unary_expression@@Base+0x2d2c>
   19844:	add	r5, pc, r5
   19848:	b	19858 <read_boolean_unary_expression@@Base+0x2d0c>
   1984c:	ldr	r4, [r4, #8]
   19850:	cmp	r4, #0
   19854:	beq	19870 <read_boolean_unary_expression@@Base+0x2d24>
   19858:	ldr	r0, [r4]
   1985c:	cmp	r0, r5
   19860:	bne	1984c <read_boolean_unary_expression@@Base+0x2d00>
   19864:	ldr	r0, [r4, #4]
   19868:	blx	r0
   1986c:	b	1984c <read_boolean_unary_expression@@Base+0x2d00>
   19870:	pop	{r4, r5, fp, pc}
   19874:	andeq	r2, r1, r4, lsl #17
   19878:	andeq	r3, r1, r8, lsl #11
   1987c:	push	{r4, r5, r6, r7, fp, lr}
   19880:	add	fp, sp, #16
   19884:	ldr	r4, [pc, #104]	; 198f4 <read_boolean_unary_expression@@Base+0x2da8>
   19888:	ldr	r4, [pc, r4]
   1988c:	ldr	r0, [r4]
   19890:	cmp	r0, #0
   19894:	beq	198f0 <read_boolean_unary_expression@@Base+0x2da4>
   19898:	ldr	r5, [pc, #88]	; 198f8 <read_boolean_unary_expression@@Base+0x2dac>
   1989c:	mov	r6, #0
   198a0:	add	r5, pc, r5
   198a4:	b	198d8 <read_boolean_unary_expression@@Base+0x2d8c>
   198a8:	ldr	r1, [r4]
   198ac:	cmp	r0, r1
   198b0:	streq	r7, [r4]
   198b4:	ldr	r1, [r4, #4]
   198b8:	cmp	r0, r1
   198bc:	streq	r6, [r4, #4]
   198c0:	cmp	r6, #0
   198c4:	strne	r7, [r6, #8]
   198c8:	bl	11e78 <free@plt>
   198cc:	mov	r0, r7
   198d0:	cmp	r7, #0
   198d4:	beq	198f0 <read_boolean_unary_expression@@Base+0x2da4>
   198d8:	ldr	r1, [r0]
   198dc:	ldr	r7, [r0, #8]
   198e0:	cmp	r1, r5
   198e4:	beq	198a8 <read_boolean_unary_expression@@Base+0x2d5c>
   198e8:	mov	r6, r0
   198ec:	b	198cc <read_boolean_unary_expression@@Base+0x2d80>
   198f0:	pop	{r4, r5, r6, r7, fp, pc}
   198f4:	andeq	r2, r1, ip, lsr #16
   198f8:	andeq	r3, r1, ip, lsr #10
   198fc:	push	{r4, sl, fp, lr}
   19900:	add	fp, sp, #8
   19904:	mov	r4, r0
   19908:	mov	r0, #12
   1990c:	bl	11efc <malloc@plt>
   19910:	ldr	r1, [pc, #60]	; 19954 <read_boolean_unary_expression@@Base+0x2e08>
   19914:	mov	r2, #0
   19918:	add	r1, pc, r1
   1991c:	stm	r0, {r1, r4}
   19920:	str	r2, [r0, #8]
   19924:	ldr	r1, [pc, #44]	; 19958 <read_boolean_unary_expression@@Base+0x2e0c>
   19928:	ldr	r1, [pc, r1]
   1992c:	mov	r2, r1
   19930:	ldr	r3, [r2], #4
   19934:	ldr	r4, [r2]
   19938:	cmp	r3, #0
   1993c:	mov	r3, r2
   19940:	addne	r3, r4, #8
   19944:	moveq	r2, r1
   19948:	str	r0, [r3]
   1994c:	str	r0, [r2]
   19950:	pop	{r4, sl, fp, pc}
   19954:			; <UNDEFINED> instruction: 0x000134b4
   19958:	andeq	r2, r1, r8, lsl #15

0001995c <__gcov_flush@@Base>:
   1995c:	push	{r4, sl, fp, lr}
   19960:	add	fp, sp, #8
   19964:	ldr	r0, [pc, #36]	; 19990 <__gcov_flush@@Base+0x34>
   19968:	ldr	r0, [pc, r0]
   1996c:	ldr	r4, [r0]
   19970:	cmp	r4, #0
   19974:	beq	1998c <__gcov_flush@@Base+0x30>
   19978:	ldr	r0, [r4, #4]
   1997c:	blx	r0
   19980:	ldr	r4, [r4, #8]
   19984:	cmp	r4, #0
   19988:	bne	19978 <__gcov_flush@@Base+0x1c>
   1998c:	pop	{r4, sl, fp, pc}
   19990:	andeq	r2, r1, r8, asr #14
   19994:	push	{r4, r5, r6, r7, fp, lr}
   19998:	add	fp, sp, #16
   1999c:	ldr	r4, [pc, #104]	; 19a0c <__gcov_flush@@Base+0xb0>
   199a0:	ldr	r4, [pc, r4]
   199a4:	ldr	r0, [r4]
   199a8:	cmp	r0, #0
   199ac:	beq	19a08 <__gcov_flush@@Base+0xac>
   199b0:	ldr	r5, [pc, #88]	; 19a10 <__gcov_flush@@Base+0xb4>
   199b4:	mov	r6, #0
   199b8:	add	r5, pc, r5
   199bc:	b	199f0 <__gcov_flush@@Base+0x94>
   199c0:	ldr	r1, [r4]
   199c4:	cmp	r0, r1
   199c8:	streq	r7, [r4]
   199cc:	ldr	r1, [r4, #4]
   199d0:	cmp	r0, r1
   199d4:	streq	r6, [r4, #4]
   199d8:	cmp	r6, #0
   199dc:	strne	r7, [r6, #8]
   199e0:	bl	11e78 <free@plt>
   199e4:	mov	r0, r7
   199e8:	cmp	r7, #0
   199ec:	beq	19a08 <__gcov_flush@@Base+0xac>
   199f0:	ldr	r1, [r0]
   199f4:	ldr	r7, [r0, #8]
   199f8:	cmp	r1, r5
   199fc:	beq	199c0 <__gcov_flush@@Base+0x64>
   19a00:	mov	r6, r0
   19a04:	b	199e4 <__gcov_flush@@Base+0x88>
   19a08:	pop	{r4, r5, r6, r7, fp, pc}
   19a0c:	andeq	r2, r1, r0, lsl r7
   19a10:	andeq	r3, r1, r4, lsl r4
   19a14:	push	{r4, r5, r6, sl, fp, lr}
   19a18:	add	fp, sp, #16
   19a1c:	ldr	r6, [pc, #228]	; 19b08 <__gcov_flush@@Base+0x1ac>
   19a20:	mov	r4, r1
   19a24:	cmp	r0, #0
   19a28:	add	r6, pc, r6
   19a2c:	beq	19a78 <__gcov_flush@@Base+0x11c>
   19a30:	mov	r5, r0
   19a34:	mov	r0, #12
   19a38:	bl	11efc <malloc@plt>
   19a3c:	mov	r1, #0
   19a40:	str	r6, [r0]
   19a44:	str	r5, [r0, #4]
   19a48:	str	r1, [r0, #8]
   19a4c:	ldr	r1, [pc, #184]	; 19b0c <__gcov_flush@@Base+0x1b0>
   19a50:	ldr	r1, [pc, r1]
   19a54:	mov	r2, r1
   19a58:	ldr	r3, [r2], #4
   19a5c:	ldr	r5, [r2]
   19a60:	cmp	r3, #0
   19a64:	mov	r3, r2
   19a68:	addne	r3, r5, #8
   19a6c:	moveq	r2, r1
   19a70:	str	r0, [r3]
   19a74:	str	r0, [r2]
   19a78:	cmp	r4, #0
   19a7c:	beq	19ac4 <__gcov_flush@@Base+0x168>
   19a80:	mov	r0, #12
   19a84:	bl	11efc <malloc@plt>
   19a88:	mov	r1, #0
   19a8c:	str	r6, [r0]
   19a90:	str	r4, [r0, #4]
   19a94:	str	r1, [r0, #8]
   19a98:	ldr	r1, [pc, #112]	; 19b10 <__gcov_flush@@Base+0x1b4>
   19a9c:	ldr	r1, [pc, r1]
   19aa0:	mov	r2, r1
   19aa4:	ldr	r3, [r2], #4
   19aa8:	ldr	r6, [r2]
   19aac:	cmp	r3, #0
   19ab0:	mov	r3, r2
   19ab4:	addne	r3, r6, #8
   19ab8:	moveq	r2, r1
   19abc:	str	r0, [r3]
   19ac0:	str	r0, [r2]
   19ac4:	ldr	r1, [pc, #72]	; 19b14 <__gcov_flush@@Base+0x1b8>
   19ac8:	add	r1, pc, r1
   19acc:	ldrb	r0, [r1]
   19ad0:	cmp	r0, #0
   19ad4:	popne	{r4, r5, r6, sl, fp, pc}
   19ad8:	ldr	r0, [pc, #56]	; 19b18 <__gcov_flush@@Base+0x1bc>
   19adc:	mov	r2, #1
   19ae0:	strb	r2, [r1]
   19ae4:	add	r0, pc, r0
   19ae8:	bl	1a0b4 <__libc_csu_fini@@Base+0x4>
   19aec:	ldr	r0, [pc, #40]	; 19b1c <__gcov_flush@@Base+0x1c0>
   19af0:	add	r0, pc, r0
   19af4:	bl	1a0b4 <__libc_csu_fini@@Base+0x4>
   19af8:	ldr	r0, [pc, #32]	; 19b20 <__gcov_flush@@Base+0x1c4>
   19afc:	add	r0, pc, r0
   19b00:	pop	{r4, r5, r6, sl, fp, lr}
   19b04:	b	1a0b4 <__libc_csu_fini@@Base+0x4>
   19b08:	andeq	r3, r1, r4, lsr #7
   19b0c:	andeq	r2, r1, r4, ror #12
   19b10:	andeq	r2, r1, r4, lsl r6
   19b14:	andeq	r3, r1, r8, lsl #6
   19b18:			; <UNDEFINED> instruction: 0xfffffea8
   19b1c:			; <UNDEFINED> instruction: 0xfffffd84
   19b20:			; <UNDEFINED> instruction: 0xfffffd20
   19b24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b28:	add	fp, sp, #24
   19b2c:	ldr	r7, [pc, #68]	; 19b78 <__gcov_flush@@Base+0x21c>
   19b30:	mov	r4, r0
   19b34:	mov	r5, #1
   19b38:	mov	r8, #0
   19b3c:	ldr	r7, [pc, r7]
   19b40:	mov	r6, #47	; 0x2f
   19b44:	b	19b60 <__gcov_flush@@Base+0x204>
   19b48:	strb	r8, [r4, r5]
   19b4c:	ldr	r1, [r7]
   19b50:	mov	r0, r4
   19b54:	bl	11f80 <mkdir@plt>
   19b58:	strb	r6, [r4, r5]
   19b5c:	add	r5, r5, #1
   19b60:	ldrb	r0, [r4, r5]
   19b64:	cmp	r0, #47	; 0x2f
   19b68:	beq	19b48 <__gcov_flush@@Base+0x1ec>
   19b6c:	cmp	r0, #0
   19b70:	bne	19b5c <__gcov_flush@@Base+0x200>
   19b74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b78:	andeq	r2, r1, r0, ror r5
   19b7c:	ldr	r0, [pc, #8]	; 19b8c <__gcov_flush@@Base+0x230>
   19b80:	ldr	r0, [pc, r0]
   19b84:	ldr	r0, [r0]
   19b88:	bx	lr
   19b8c:	andeq	r2, r1, ip, lsr #10
   19b90:	ldr	r1, [pc, #8]	; 19ba0 <__gcov_flush@@Base+0x244>
   19b94:	ldr	r1, [pc, r1]
   19b98:	str	r0, [r1]
   19b9c:	bx	lr
   19ba0:	andeq	r2, r1, r8, lsl r5
   19ba4:	push	{r4, r5, r6, sl, fp, lr}
   19ba8:	add	fp, sp, #16
   19bac:	sub	sp, sp, #392	; 0x188
   19bb0:	mov	r6, sp
   19bb4:	mov	r5, r0
   19bb8:	mov	r0, r6
   19bbc:	mov	r4, r1
   19bc0:	bl	11ea8 <uname@plt>
   19bc4:	cmp	r0, #0
   19bc8:	bmi	19be0 <__gcov_flush@@Base+0x284>
   19bcc:	add	r1, r6, #65	; 0x41
   19bd0:	mov	r0, r5
   19bd4:	mov	r2, r4
   19bd8:	bl	11f98 <strncpy@plt>
   19bdc:	mov	r0, #0
   19be0:	sub	sp, fp, #16
   19be4:	pop	{r4, r5, r6, sl, fp, pc}
   19be8:	push	{r4, r5, r6, sl, fp, lr}
   19bec:	add	fp, sp, #16
   19bf0:	sub	sp, sp, #32
   19bf4:	mov	r4, #0
   19bf8:	str	r4, [sp, #8]
   19bfc:	strh	r4, [sp, #2]
   19c00:	mov	r5, r0
   19c04:	str	r4, [sp, #12]
   19c08:	str	r4, [sp, #16]
   19c0c:	str	r4, [sp, #20]
   19c10:	bl	11f2c <getpid@plt>
   19c14:	mov	r6, sp
   19c18:	str	r0, [sp, #24]
   19c1c:	mov	r0, #1
   19c20:	strh	r0, [sp]
   19c24:	mov	r0, r5
   19c28:	mov	r1, #14
   19c2c:	mov	r2, r6
   19c30:	bl	11fe0 <fcntl64@plt>
   19c34:	cmn	r0, #1
   19c38:	bne	19c54 <__gcov_flush@@Base+0x2f8>
   19c3c:	bl	11f68 <__errno_location@plt>
   19c40:	ldr	r0, [r0]
   19c44:	cmp	r0, #4
   19c48:	beq	19c24 <__gcov_flush@@Base+0x2c8>
   19c4c:	cmp	r0, #37	; 0x25
   19c50:	mvneq	r4, #0
   19c54:	mov	r0, r4
   19c58:	sub	sp, fp, #16
   19c5c:	pop	{r4, r5, r6, sl, fp, pc}
   19c60:	push	{r4, r5, r6, sl, fp, lr}
   19c64:	add	fp, sp, #16
   19c68:	sub	sp, sp, #32
   19c6c:	mov	r4, #0
   19c70:	str	r4, [sp, #8]
   19c74:	strh	r4, [sp, #2]
   19c78:	mov	r5, r0
   19c7c:	str	r4, [sp, #12]
   19c80:	str	r4, [sp, #16]
   19c84:	str	r4, [sp, #20]
   19c88:	bl	11f2c <getpid@plt>
   19c8c:	mov	r6, sp
   19c90:	str	r0, [sp, #24]
   19c94:	mov	r0, #2
   19c98:	strh	r0, [sp]
   19c9c:	mov	r0, r5
   19ca0:	mov	r1, #14
   19ca4:	mov	r2, r6
   19ca8:	bl	11fe0 <fcntl64@plt>
   19cac:	cmn	r0, #1
   19cb0:	bne	19ccc <__gcov_flush@@Base+0x370>
   19cb4:	bl	11f68 <__errno_location@plt>
   19cb8:	ldr	r0, [r0]
   19cbc:	cmp	r0, #4
   19cc0:	beq	19c9c <__gcov_flush@@Base+0x340>
   19cc4:	cmp	r0, #37	; 0x25
   19cc8:	mvneq	r4, #0
   19ccc:	mov	r0, r4
   19cd0:	sub	sp, fp, #16
   19cd4:	pop	{r4, r5, r6, sl, fp, pc}
   19cd8:	push	{r4, r5, r6, sl, fp, lr}
   19cdc:	add	fp, sp, #16
   19ce0:	sub	sp, sp, #32
   19ce4:	bl	11fb0 <fileno@plt>
   19ce8:	mov	r4, #0
   19cec:	str	r4, [sp, #8]
   19cf0:	strh	r4, [sp, #2]
   19cf4:	mov	r5, r0
   19cf8:	str	r4, [sp, #12]
   19cfc:	str	r4, [sp, #16]
   19d00:	str	r4, [sp, #20]
   19d04:	bl	11f2c <getpid@plt>
   19d08:	mov	r6, sp
   19d0c:	str	r0, [sp, #24]
   19d10:	mov	r0, #1
   19d14:	strh	r0, [sp]
   19d18:	mov	r0, r5
   19d1c:	mov	r1, #14
   19d20:	mov	r2, r6
   19d24:	bl	11fe0 <fcntl64@plt>
   19d28:	cmn	r0, #1
   19d2c:	bne	19d48 <__gcov_flush@@Base+0x3ec>
   19d30:	bl	11f68 <__errno_location@plt>
   19d34:	ldr	r0, [r0]
   19d38:	cmp	r0, #4
   19d3c:	beq	19d18 <__gcov_flush@@Base+0x3bc>
   19d40:	cmp	r0, #37	; 0x25
   19d44:	mvneq	r4, #0
   19d48:	mov	r0, r4
   19d4c:	sub	sp, fp, #16
   19d50:	pop	{r4, r5, r6, sl, fp, pc}
   19d54:	push	{r4, r5, r6, sl, fp, lr}
   19d58:	add	fp, sp, #16
   19d5c:	sub	sp, sp, #32
   19d60:	bl	11fb0 <fileno@plt>
   19d64:	mov	r4, #0
   19d68:	str	r4, [sp, #8]
   19d6c:	strh	r4, [sp, #2]
   19d70:	mov	r5, r0
   19d74:	str	r4, [sp, #12]
   19d78:	str	r4, [sp, #16]
   19d7c:	str	r4, [sp, #20]
   19d80:	bl	11f2c <getpid@plt>
   19d84:	mov	r6, sp
   19d88:	str	r0, [sp, #24]
   19d8c:	mov	r0, #2
   19d90:	strh	r0, [sp]
   19d94:	mov	r0, r5
   19d98:	mov	r1, #14
   19d9c:	mov	r2, r6
   19da0:	bl	11fe0 <fcntl64@plt>
   19da4:	cmn	r0, #1
   19da8:	bne	19dc4 <__gcov_flush@@Base+0x468>
   19dac:	bl	11f68 <__errno_location@plt>
   19db0:	ldr	r0, [r0]
   19db4:	cmp	r0, #4
   19db8:	beq	19d94 <__gcov_flush@@Base+0x438>
   19dbc:	cmp	r0, #37	; 0x25
   19dc0:	mvneq	r4, #0
   19dc4:	mov	r0, r4
   19dc8:	sub	sp, fp, #16
   19dcc:	pop	{r4, r5, r6, sl, fp, pc}
   19dd0:	push	{r4, r5, fp, lr}
   19dd4:	add	fp, sp, #8
   19dd8:	sub	sp, sp, #32
   19ddc:	mov	r2, #182	; 0xb6
   19de0:	orr	r2, r2, #256	; 0x100
   19de4:	mov	r1, #66	; 0x42
   19de8:	bl	11ed8 <open64@plt>
   19dec:	cmp	r0, #0
   19df0:	bmi	19e6c <__gcov_flush@@Base+0x510>
   19df4:	mov	r4, r0
   19df8:	mov	r0, #0
   19dfc:	str	r0, [sp, #8]
   19e00:	strh	r0, [sp, #2]
   19e04:	str	r0, [sp, #12]
   19e08:	str	r0, [sp, #16]
   19e0c:	str	r0, [sp, #20]
   19e10:	bl	11f2c <getpid@plt>
   19e14:	mov	r5, sp
   19e18:	str	r0, [sp, #24]
   19e1c:	mov	r0, #1
   19e20:	strh	r0, [sp]
   19e24:	mov	r0, r4
   19e28:	mov	r1, #14
   19e2c:	mov	r2, r5
   19e30:	bl	11fe0 <fcntl64@plt>
   19e34:	cmn	r0, #1
   19e38:	bne	19e54 <__gcov_flush@@Base+0x4f8>
   19e3c:	bl	11f68 <__errno_location@plt>
   19e40:	ldr	r0, [r0]
   19e44:	cmp	r0, #4
   19e48:	beq	19e24 <__gcov_flush@@Base+0x4c8>
   19e4c:	cmp	r0, #37	; 0x25
   19e50:	beq	19e78 <__gcov_flush@@Base+0x51c>
   19e54:	ldr	r1, [pc, #76]	; 19ea8 <__gcov_flush@@Base+0x54c>
   19e58:	mov	r0, r4
   19e5c:	add	r1, pc, r1
   19e60:	bl	11e3c <fdopen@plt>
   19e64:	sub	sp, fp, #8
   19e68:	pop	{r4, r5, fp, pc}
   19e6c:	mov	r0, #0
   19e70:	sub	sp, fp, #8
   19e74:	pop	{r4, r5, fp, pc}
   19e78:	ldr	r1, [pc, #28]	; 19e9c <__gcov_flush@@Base+0x540>
   19e7c:	ldr	r2, [pc, #28]	; 19ea0 <__gcov_flush@@Base+0x544>
   19e80:	ldr	r0, [pc, #28]	; 19ea4 <__gcov_flush@@Base+0x548>
   19e84:	add	r1, pc, r1
   19e88:	add	r2, pc, r2
   19e8c:	ldr	r0, [pc, r0]
   19e90:	ldr	r0, [r0]
   19e94:	bl	11f5c <fprintf@plt>
   19e98:	b	19e54 <__gcov_flush@@Base+0x4f8>
   19e9c:	andeq	r1, r0, r1, ror #13
   19ea0:	andeq	r1, r0, r6, lsr #14
   19ea4:	andeq	r2, r1, ip, lsr #4
   19ea8:	andeq	r1, r0, r7, ror #10
   19eac:	push	{r4, r5, r6, sl, fp, lr}
   19eb0:	add	fp, sp, #16
   19eb4:	mov	r6, r0
   19eb8:	ldr	r0, [pc, #120]	; 19f38 <__gcov_flush@@Base+0x5dc>
   19ebc:	mov	r4, r1
   19ec0:	add	r0, pc, r0
   19ec4:	bl	11ee4 <getenv@plt>
   19ec8:	mov	r5, r0
   19ecc:	ldr	r0, [pc, #104]	; 19f3c <__gcov_flush@@Base+0x5e0>
   19ed0:	add	r0, pc, r0
   19ed4:	bl	11ee4 <getenv@plt>
   19ed8:	mov	r1, #0
   19edc:	str	r1, [r4]
   19ee0:	str	r1, [r6]
   19ee4:	cmp	r5, #0
   19ee8:	ldrbne	r2, [r5]
   19eec:	cmpne	r2, #0
   19ef0:	bne	19efc <__gcov_flush@@Base+0x5a0>
   19ef4:	mov	r0, r1
   19ef8:	pop	{r4, r5, r6, sl, fp, pc}
   19efc:	cmp	r0, #0
   19f00:	beq	19f18 <__gcov_flush@@Base+0x5bc>
   19f04:	mov	r1, #0
   19f08:	mov	r2, #10
   19f0c:	bl	11e54 <strtol@plt>
   19f10:	bic	r0, r0, r0, asr #31
   19f14:	b	19f1c <__gcov_flush@@Base+0x5c0>
   19f18:	mov	r0, #0
   19f1c:	str	r0, [r6]
   19f20:	mov	r0, r5
   19f24:	bl	11f44 <strlen@plt>
   19f28:	mov	r1, r5
   19f2c:	str	r0, [r4]
   19f30:	mov	r0, r1
   19f34:	pop	{r4, r5, r6, sl, fp, pc}
   19f38:	andeq	r1, r0, ip, lsl r7
   19f3c:	andeq	r1, r0, r8, lsl r7
   19f40:	push	{r4, r5, r6, r7, fp, lr}
   19f44:	add	fp, sp, #16
   19f48:	mov	r6, r0
   19f4c:	ldr	r0, [fp, #8]
   19f50:	mov	r5, r3
   19f54:	mov	r7, r2
   19f58:	mov	r4, r1
   19f5c:	cmp	r0, #1
   19f60:	blt	19f98 <__gcov_flush@@Base+0x63c>
   19f64:	add	r1, r4, #1
   19f68:	mov	r2, #0
   19f6c:	b	19f84 <__gcov_flush@@Base+0x628>
   19f70:	add	r2, r2, #1
   19f74:	mov	r4, r1
   19f78:	add	r1, r1, #1
   19f7c:	cmp	r2, r0
   19f80:	bge	19f98 <__gcov_flush@@Base+0x63c>
   19f84:	ldrb	r3, [r1]
   19f88:	cmp	r3, #47	; 0x2f
   19f8c:	beq	19f70 <__gcov_flush@@Base+0x614>
   19f90:	cmp	r3, #0
   19f94:	bne	19f78 <__gcov_flush@@Base+0x61c>
   19f98:	mov	r0, r6
   19f9c:	mov	r1, r7
   19fa0:	mov	r2, r5
   19fa4:	bl	11e84 <memcpy@plt>
   19fa8:	add	r0, r5, r7
   19fac:	ldrb	r0, [r0, #-1]
   19fb0:	cmp	r0, #47	; 0x2f
   19fb4:	movne	r0, #47	; 0x2f
   19fb8:	strbne	r0, [r6, r5]
   19fbc:	mov	r0, r4
   19fc0:	addne	r5, r5, #1
   19fc4:	add	r5, r6, r5
   19fc8:	bl	11f44 <strlen@plt>
   19fcc:	add	r2, r0, #1
   19fd0:	mov	r0, r5
   19fd4:	mov	r1, r4
   19fd8:	pop	{r4, r5, r6, r7, fp, lr}
   19fdc:	b	11e84 <memcpy@plt>
   19fe0:	mov	r1, #47	; 0x2f
   19fe4:	b	11f50 <strchr@plt>
   19fe8:	mov	r1, #47	; 0x2f
   19fec:	b	11fec <strrchr@plt>
   19ff0:	push	{fp, lr}
   19ff4:	mov	fp, sp
   19ff8:	sub	sp, sp, #8
   19ffc:	mov	r0, #0
   1a000:	str	r0, [sp, #4]
   1a004:	add	r1, sp, #4
   1a008:	mov	r0, #2
   1a00c:	bl	11fa4 <prctl@plt>
   1a010:	ldr	r1, [sp, #4]
   1a014:	cmp	r0, #0
   1a018:	cmpeq	r1, #9
   1a01c:	bne	1a030 <__gcov_flush@@Base+0x6d4>
   1a020:	mov	r0, #1
   1a024:	mov	r1, #0
   1a028:	bl	11fa4 <prctl@plt>
   1a02c:	ldr	r1, [sp, #4]
   1a030:	sub	r0, r1, #9
   1a034:	clz	r0, r0
   1a038:	lsr	r0, r0, #5
   1a03c:	mov	sp, fp
   1a040:	pop	{fp, pc}
   1a044:	mov	r0, #1
   1a048:	mov	r1, #9
   1a04c:	b	11fa4 <prctl@plt>

0001a050 <__libc_csu_init@@Base>:
   1a050:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a054:	mov	r7, r0
   1a058:	ldr	r6, [pc, #72]	; 1a0a8 <__libc_csu_init@@Base+0x58>
   1a05c:	ldr	r5, [pc, #72]	; 1a0ac <__libc_csu_init@@Base+0x5c>
   1a060:	add	r6, pc, r6
   1a064:	add	r5, pc, r5
   1a068:	sub	r6, r6, r5
   1a06c:	mov	r8, r1
   1a070:	mov	r9, r2
   1a074:	bl	11e1c <fdopen@plt-0x20>
   1a078:	asrs	r6, r6, #2
   1a07c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a080:	mov	r4, #0
   1a084:	add	r4, r4, #1
   1a088:	ldr	r3, [r5], #4
   1a08c:	mov	r2, r9
   1a090:	mov	r1, r8
   1a094:	mov	r0, r7
   1a098:	blx	r3
   1a09c:	cmp	r6, r4
   1a0a0:	bne	1a084 <__libc_csu_init@@Base+0x34>
   1a0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0a8:	muleq	r1, ip, lr
   1a0ac:	andeq	r1, r1, r4, lsl #29

0001a0b0 <__libc_csu_fini@@Base>:
   1a0b0:	bx	lr
   1a0b4:	ldr	r3, [pc, #12]	; 1a0c8 <__libc_csu_fini@@Base+0x18>
   1a0b8:	mov	r1, #0
   1a0bc:	add	r3, pc, r3
   1a0c0:	ldr	r2, [r3]
   1a0c4:	b	11f74 <__cxa_atexit@plt>
   1a0c8:	andeq	r2, r1, r8

Disassembly of section .fini:

0001a0cc <.fini>:
   1a0cc:	push	{r3, lr}
   1a0d0:	pop	{r3, pc}
