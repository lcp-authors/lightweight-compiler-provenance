
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	113cc <__assert_fail@plt+0x48>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <calloc@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <calloc@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	r6, r1, r8, ror #30

0001109c <calloc@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <fputs_unlocked@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <raise@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <fflush@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <utmpxname@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <free@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <gai_strerror@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <_exit@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <memcpy@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <mbsinit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <time@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcmp@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <stpcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <dcgettext@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <strdup@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <setutxent@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <realloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <textdomain@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <iswprint@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <fwrite@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <lseek64@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <__ctype_get_mb_cur_max@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <__fpending@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <mbrtowc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <error@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__asprintf_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <puts@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <malloc@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__libc_start_main@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <strftime@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <__freading@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <localtime@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <__gmon_start__@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getopt_long@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <kill@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__ctype_b_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <ttyname@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #90112	; 0x16000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <strlen@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #90112	; 0x16000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <strchr@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #90112	; 0x16000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__errno_location@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #90112	; 0x16000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <__sprintf_chk@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #90112	; 0x16000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <__cxa_atexit@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #90112	; 0x16000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <memset@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #90112	; 0x16000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strncpy@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #90112	; 0x16000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <__printf_chk@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #90112	; 0x16000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <fileno@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #90112	; 0x16000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__fprintf_chk@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #90112	; 0x16000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <fclose@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #90112	; 0x16000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <fseeko64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #90112	; 0x16000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <endutxent@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #90112	; 0x16000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <setlocale@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #90112	; 0x16000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <strrchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #90112	; 0x16000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <nl_langinfo@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #90112	; 0x16000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <freeaddrinfo@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <getaddrinfo@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <bindtextdomain@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <__xstat64@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <strncmp@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <abort@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <getutxent@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <__assert_fail@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

Disassembly of section .text:

00011390 <.text>:
   11390:	mov	fp, #0
   11394:	mov	lr, #0
   11398:	pop	{r1}		; (ldr r1, [sp], #4)
   1139c:	mov	r2, sp
   113a0:	push	{r2}		; (str r2, [sp, #-4]!)
   113a4:	push	{r0}		; (str r0, [sp, #-4]!)
   113a8:	ldr	ip, [pc, #16]	; 113c0 <__assert_fail@plt+0x3c>
   113ac:	push	{ip}		; (str ip, [sp, #-4]!)
   113b0:	ldr	r0, [pc, #12]	; 113c4 <__assert_fail@plt+0x40>
   113b4:	ldr	r3, [pc, #12]	; 113c8 <__assert_fail@plt+0x44>
   113b8:	bl	111f8 <__libc_start_main@plt>
   113bc:	bl	1136c <abort@plt>
   113c0:	andeq	r6, r1, ip, ror #11
   113c4:	andeq	r1, r1, r0, lsl #15
   113c8:	andeq	r6, r1, ip, lsl #11
   113cc:	ldr	r3, [pc, #20]	; 113e8 <__assert_fail@plt+0x64>
   113d0:	ldr	r2, [pc, #20]	; 113ec <__assert_fail@plt+0x68>
   113d4:	add	r3, pc, r3
   113d8:	ldr	r2, [r3, r2]
   113dc:	cmp	r2, #0
   113e0:	bxeq	lr
   113e4:	b	11228 <__gmon_start__@plt>
   113e8:	andeq	r6, r1, r4, lsr #24
   113ec:	andeq	r0, r0, r8, lsl #2
   113f0:	ldr	r0, [pc, #24]	; 11410 <__assert_fail@plt+0x8c>
   113f4:	ldr	r3, [pc, #24]	; 11414 <__assert_fail@plt+0x90>
   113f8:	cmp	r3, r0
   113fc:	bxeq	lr
   11400:	ldr	r3, [pc, #16]	; 11418 <__assert_fail@plt+0x94>
   11404:	cmp	r3, #0
   11408:	bxeq	lr
   1140c:	bx	r3
   11410:	andeq	r8, r2, r8, ror #2
   11414:	andeq	r8, r2, r8, ror #2
   11418:	andeq	r0, r0, r0
   1141c:	ldr	r0, [pc, #36]	; 11448 <__assert_fail@plt+0xc4>
   11420:	ldr	r1, [pc, #36]	; 1144c <__assert_fail@plt+0xc8>
   11424:	sub	r1, r1, r0
   11428:	asr	r1, r1, #2
   1142c:	add	r1, r1, r1, lsr #31
   11430:	asrs	r1, r1, #1
   11434:	bxeq	lr
   11438:	ldr	r3, [pc, #16]	; 11450 <__assert_fail@plt+0xcc>
   1143c:	cmp	r3, #0
   11440:	bxeq	lr
   11444:	bx	r3
   11448:	andeq	r8, r2, r8, ror #2
   1144c:	andeq	r8, r2, r8, ror #2
   11450:	andeq	r0, r0, r0
   11454:	push	{r4, lr}
   11458:	ldr	r4, [pc, #24]	; 11478 <__assert_fail@plt+0xf4>
   1145c:	ldrb	r3, [r4]
   11460:	cmp	r3, #0
   11464:	popne	{r4, pc}
   11468:	bl	113f0 <__assert_fail@plt+0x6c>
   1146c:	mov	r3, #1
   11470:	strb	r3, [r4]
   11474:	pop	{r4, pc}
   11478:	andeq	r8, r2, r0, lsl #3
   1147c:	b	1141c <__assert_fail@plt+0x98>
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	sub	sp, sp, #56	; 0x38
   1148c:	mov	r4, r0
   11490:	cmp	r0, #0
   11494:	bne	1173c <__assert_fail@plt+0x3b8>
   11498:	movw	r1, #26171	; 0x663b
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	movt	r1, #1
   114a8:	bl	11144 <dcgettext@plt>
   114ac:	mov	r1, r0
   114b0:	movw	r0, #33284	; 0x8204
   114b4:	movt	r0, #2
   114b8:	ldr	r2, [r0]
   114bc:	mov	r0, #1
   114c0:	bl	112c4 <__printf_chk@plt>
   114c4:	movw	r1, #26215	; 0x6667
   114c8:	mov	r0, #0
   114cc:	mov	r2, #5
   114d0:	movt	r1, #1
   114d4:	bl	11144 <dcgettext@plt>
   114d8:	movw	r7, #33148	; 0x817c
   114dc:	movt	r7, #2
   114e0:	ldr	r1, [r7]
   114e4:	bl	110a8 <fputs_unlocked@plt>
   114e8:	movw	r1, #26275	; 0x66a3
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	11144 <dcgettext@plt>
   114fc:	ldr	r1, [r7]
   11500:	bl	110a8 <fputs_unlocked@plt>
   11504:	movw	r1, #26470	; 0x6766
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	movt	r1, #1
   11514:	bl	11144 <dcgettext@plt>
   11518:	ldr	r1, [r7]
   1151c:	bl	110a8 <fputs_unlocked@plt>
   11520:	movw	r1, #26520	; 0x6798
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	11144 <dcgettext@plt>
   11534:	ldr	r1, [r7]
   11538:	bl	110a8 <fputs_unlocked@plt>
   1153c:	movw	r1, #26707	; 0x6853
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	11144 <dcgettext@plt>
   11550:	ldr	r1, [r7]
   11554:	bl	110a8 <fputs_unlocked@plt>
   11558:	movw	r1, #26930	; 0x6932
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #1
   11568:	bl	11144 <dcgettext@plt>
   1156c:	ldr	r1, [r7]
   11570:	bl	110a8 <fputs_unlocked@plt>
   11574:	movw	r1, #27093	; 0x69d5
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	11144 <dcgettext@plt>
   11588:	ldr	r1, [r7]
   1158c:	bl	110a8 <fputs_unlocked@plt>
   11590:	movw	r1, #27138	; 0x6a02
   11594:	mov	r0, #0
   11598:	mov	r2, #5
   1159c:	movt	r1, #1
   115a0:	bl	11144 <dcgettext@plt>
   115a4:	ldr	r1, [r7]
   115a8:	bl	110a8 <fputs_unlocked@plt>
   115ac:	movw	r1, #27192	; 0x6a38
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	movt	r1, #1
   115bc:	bl	11144 <dcgettext@plt>
   115c0:	movw	r2, #27317	; 0x6ab5
   115c4:	movw	r3, #27331	; 0x6ac3
   115c8:	mov	r1, r0
   115cc:	mov	r0, #1
   115d0:	movt	r2, #1
   115d4:	movt	r3, #1
   115d8:	bl	112c4 <__printf_chk@plt>
   115dc:	movw	r0, #28528	; 0x6f70
   115e0:	mov	r2, #48	; 0x30
   115e4:	mov	r6, sp
   115e8:	movw	r5, #27345	; 0x6ad1
   115ec:	movt	r0, #1
   115f0:	movt	r5, #1
   115f4:	add	r1, r0, #32
   115f8:	add	r3, r0, #16
   115fc:	vld1.64	{d18-d19}, [r0], r2
   11600:	vld1.64	{d16-d17}, [r1]
   11604:	vld1.64	{d20-d21}, [r3]
   11608:	add	r1, r6, #32
   1160c:	vldr	d22, [r0]
   11610:	add	r0, r6, #16
   11614:	vst1.64	{d16-d17}, [r1]
   11618:	movw	r1, #27493	; 0x6b65
   1161c:	vst1.64	{d20-d21}, [r0]
   11620:	mov	r0, r6
   11624:	vst1.64	{d18-d19}, [r0], r2
   11628:	movt	r1, #1
   1162c:	vstr	d22, [r0]
   11630:	mov	r0, r5
   11634:	bl	110c0 <strcmp@plt>
   11638:	cmp	r0, #0
   1163c:	ldrne	r1, [r6, #8]!
   11640:	cmpne	r1, #0
   11644:	bne	11630 <__assert_fail@plt+0x2ac>
   11648:	ldr	r6, [r6, #4]
   1164c:	movw	r1, #27588	; 0x6bc4
   11650:	mov	r0, #0
   11654:	mov	r2, #5
   11658:	movt	r1, #1
   1165c:	bl	11144 <dcgettext@plt>
   11660:	movw	r2, #27388	; 0x6afc
   11664:	movw	r3, #27611	; 0x6bdb
   11668:	mov	r1, r0
   1166c:	mov	r0, #1
   11670:	movt	r2, #1
   11674:	movt	r3, #1
   11678:	bl	112c4 <__printf_chk@plt>
   1167c:	cmp	r6, #0
   11680:	mov	r0, #5
   11684:	mov	r1, #0
   11688:	moveq	r6, r5
   1168c:	bl	1130c <setlocale@plt>
   11690:	cmp	r0, #0
   11694:	beq	116cc <__assert_fail@plt+0x348>
   11698:	movw	r1, #27651	; 0x6c03
   1169c:	mov	r2, #3
   116a0:	movt	r1, #1
   116a4:	bl	11360 <strncmp@plt>
   116a8:	cmp	r0, #0
   116ac:	beq	116cc <__assert_fail@plt+0x348>
   116b0:	movw	r1, #27655	; 0x6c07
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	11144 <dcgettext@plt>
   116c4:	ldr	r1, [r7]
   116c8:	bl	110a8 <fputs_unlocked@plt>
   116cc:	movw	r1, #27726	; 0x6c4e
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11144 <dcgettext@plt>
   116e0:	movw	r2, #27611	; 0x6bdb
   116e4:	mov	r1, r0
   116e8:	mov	r0, #1
   116ec:	mov	r3, r5
   116f0:	movt	r2, #1
   116f4:	bl	112c4 <__printf_chk@plt>
   116f8:	movw	r1, #27753	; 0x6c69
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	11144 <dcgettext@plt>
   1170c:	movw	r3, #27803	; 0x6c9b
   11710:	mov	r1, r0
   11714:	movw	r0, #27521	; 0x6b81
   11718:	cmp	r6, r5
   1171c:	mov	r2, r6
   11720:	movt	r0, #1
   11724:	movt	r3, #1
   11728:	moveq	r3, r0
   1172c:	mov	r0, #1
   11730:	bl	112c4 <__printf_chk@plt>
   11734:	mov	r0, r4
   11738:	bl	11258 <exit@plt>
   1173c:	movw	r0, #33144	; 0x8178
   11740:	movw	r1, #26132	; 0x6614
   11744:	mov	r2, #5
   11748:	movt	r0, #2
   1174c:	movt	r1, #1
   11750:	ldr	r5, [r0]
   11754:	mov	r0, #0
   11758:	bl	11144 <dcgettext@plt>
   1175c:	mov	r2, r0
   11760:	movw	r0, #33284	; 0x8204
   11764:	mov	r1, #1
   11768:	movt	r0, #2
   1176c:	ldr	r3, [r0]
   11770:	mov	r0, r5
   11774:	bl	112dc <__fprintf_chk@plt>
   11778:	mov	r0, r4
   1177c:	bl	11258 <exit@plt>
   11780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11784:	add	fp, sp, #28
   11788:	sub	sp, sp, #44	; 0x2c
   1178c:	mov	r5, r0
   11790:	ldr	r0, [r1]
   11794:	mov	r4, r1
   11798:	bl	13064 <__assert_fail@plt+0x1ce0>
   1179c:	movw	r1, #27803	; 0x6c9b
   117a0:	mov	r0, #6
   117a4:	movt	r1, #1
   117a8:	bl	1130c <setlocale@plt>
   117ac:	movw	r6, #27392	; 0x6b00
   117b0:	movw	r1, #27349	; 0x6ad5
   117b4:	movt	r6, #1
   117b8:	movt	r1, #1
   117bc:	mov	r0, r6
   117c0:	bl	11348 <bindtextdomain@plt>
   117c4:	mov	r0, r6
   117c8:	bl	11174 <textdomain@plt>
   117cc:	movw	r0, #11820	; 0x2e2c
   117d0:	movt	r0, #1
   117d4:	bl	165f0 <__assert_fail@plt+0x526c>
   117d8:	movw	r7, #33156	; 0x8184
   117dc:	movw	r9, #28240	; 0x6e50
   117e0:	mov	r6, #1
   117e4:	mov	sl, #1
   117e8:	movt	r7, #2
   117ec:	movt	r9, #1
   117f0:	add	r0, r7, #14
   117f4:	str	r0, [sp, #28]
   117f8:	add	r0, r7, #10
   117fc:	str	r0, [sp, #24]
   11800:	add	r0, r7, #7
   11804:	str	r0, [sp, #36]	; 0x24
   11808:	add	r0, r7, #9
   1180c:	str	r0, [sp, #32]
   11810:	add	r0, r7, #8
   11814:	str	r0, [fp, #-32]	; 0xffffffe0
   11818:	add	r0, r7, #11
   1181c:	str	r0, [sp, #20]
   11820:	add	r0, r7, #3
   11824:	str	r0, [sp, #16]
   11828:	b	11834 <__assert_fail@plt+0x4b0>
   1182c:	mov	sl, r8
   11830:	strb	r6, [r0]
   11834:	movw	r2, #27373	; 0x6aed
   11838:	mov	r8, sl
   1183c:	mov	sl, #0
   11840:	mov	r0, r5
   11844:	mov	r1, r4
   11848:	mov	r3, r9
   1184c:	movt	r2, #1
   11850:	str	sl, [sp]
   11854:	bl	11234 <getopt_long@plt>
   11858:	add	r1, r0, #3
   1185c:	cmp	r1, #122	; 0x7a
   11860:	bhi	11a64 <__assert_fail@plt+0x6e0>
   11864:	add	r2, pc, #4
   11868:	mov	r0, r7
   1186c:	ldr	pc, [r2, r1, lsl #2]
   11870:	andeq	r1, r1, ip, asr #23
   11874:	andeq	r1, r1, r8, lsr #24
   11878:	strdeq	r1, [r1], -r8
   1187c:	andeq	r1, r1, r4, asr #23
   11880:	andeq	r1, r1, r4, asr #23
   11884:	andeq	r1, r1, r4, asr #23
   11888:	andeq	r1, r1, r4, asr #23
   1188c:	andeq	r1, r1, r4, asr #23
   11890:	andeq	r1, r1, r4, asr #23
   11894:	andeq	r1, r1, r4, asr #23
   11898:	andeq	r1, r1, r4, asr #23
   1189c:	andeq	r1, r1, r4, asr #23
   118a0:	andeq	r1, r1, r4, asr #23
   118a4:	andeq	r1, r1, r4, asr #23
   118a8:	andeq	r1, r1, r4, asr #23
   118ac:	andeq	r1, r1, r4, asr #23
   118b0:	andeq	r1, r1, r4, asr #23
   118b4:	andeq	r1, r1, r4, asr #23
   118b8:	andeq	r1, r1, r4, asr #23
   118bc:	andeq	r1, r1, r4, asr #23
   118c0:	andeq	r1, r1, r4, asr #23
   118c4:	andeq	r1, r1, r4, asr #23
   118c8:	andeq	r1, r1, r4, asr #23
   118cc:	andeq	r1, r1, r4, asr #23
   118d0:	andeq	r1, r1, r4, asr #23
   118d4:	andeq	r1, r1, r4, asr #23
   118d8:	andeq	r1, r1, r4, asr #23
   118dc:	andeq	r1, r1, r4, asr #23
   118e0:	andeq	r1, r1, r4, asr #23
   118e4:	andeq	r1, r1, r4, asr #23
   118e8:	andeq	r1, r1, r4, asr #23
   118ec:	andeq	r1, r1, r4, asr #23
   118f0:	andeq	r1, r1, r4, asr #23
   118f4:	andeq	r1, r1, r4, asr #23
   118f8:	andeq	r1, r1, r4, asr #23
   118fc:	andeq	r1, r1, r4, asr #23
   11900:	andeq	r1, r1, r4, asr #23
   11904:	andeq	r1, r1, r4, asr #23
   11908:	andeq	r1, r1, r4, asr #23
   1190c:	andeq	r1, r1, r4, asr #23
   11910:	andeq	r1, r1, r4, asr #23
   11914:	andeq	r1, r1, r4, asr #23
   11918:	andeq	r1, r1, r4, asr #23
   1191c:	andeq	r1, r1, r4, asr #23
   11920:	andeq	r1, r1, r4, asr #23
   11924:	andeq	r1, r1, r4, asr #23
   11928:	andeq	r1, r1, r4, asr #23
   1192c:	andeq	r1, r1, r4, asr #23
   11930:	andeq	r1, r1, r4, asr #23
   11934:	andeq	r1, r1, r4, asr #23
   11938:	andeq	r1, r1, r4, asr #23
   1193c:	andeq	r1, r1, r4, asr #23
   11940:	andeq	r1, r1, r4, asr #23
   11944:	andeq	r1, r1, r4, asr #23
   11948:	andeq	r1, r1, r4, asr #23
   1194c:	andeq	r1, r1, r4, asr #23
   11950:	andeq	r1, r1, r4, asr #23
   11954:	andeq	r1, r1, r4, asr #23
   11958:	andeq	r1, r1, r4, asr #23
   1195c:	andeq	r1, r1, r4, asr #23
   11960:	andeq	r1, r1, r4, asr #23
   11964:	andeq	r1, r1, r4, asr #23
   11968:	andeq	r1, r1, r4, asr #23
   1196c:	andeq	r1, r1, r4, asr #23
   11970:	andeq	r1, r1, r4, asr #23
   11974:	andeq	r1, r1, r4, asr #23
   11978:	andeq	r1, r1, r4, asr #23
   1197c:	andeq	r1, r1, r4, asr #23
   11980:	andeq	r1, r1, r4, asr #23
   11984:	andeq	r1, r1, r4, asr #23
   11988:	andeq	r1, r1, r4, asr #23
   1198c:	andeq	r1, r1, r4, asr #23
   11990:	andeq	r1, r1, r4, asr #23
   11994:	andeq	r1, r1, r4, asr #23
   11998:	andeq	r1, r1, r4, asr #23
   1199c:	muleq	r1, ip, sl
   119a0:	andeq	r1, r1, r4, asr #23
   119a4:	andeq	r1, r1, r4, asr #23
   119a8:	andeq	r1, r1, r4, asr #23
   119ac:	andeq	r1, r1, r4, asr #23
   119b0:	andeq	r1, r1, r4, asr #23
   119b4:	andeq	r1, r1, r4, asr #23
   119b8:	andeq	r1, r1, r4, asr #23
   119bc:	andeq	r1, r1, r4, asr #23
   119c0:	andeq	r1, r1, r4, asr #23
   119c4:	andeq	r1, r1, r4, asr #23
   119c8:	andeq	r1, r1, r4, asr #23
   119cc:	andeq	r1, r1, ip, asr sl
   119d0:	andeq	r1, r1, r4, asr #23
   119d4:	andeq	r1, r1, r4, asr #23
   119d8:	andeq	r1, r1, r4, asr #23
   119dc:	andeq	r1, r1, r4, asr #23
   119e0:	andeq	r1, r1, r4, asr #23
   119e4:	andeq	r1, r1, r4, asr #23
   119e8:	andeq	r1, r1, r4, asr #23
   119ec:	andeq	r1, r1, r4, asr #23
   119f0:	andeq	r1, r1, r4, asr #23
   119f4:	andeq	r1, r1, r4, asr #23
   119f8:	andeq	r1, r1, r4, asr #23
   119fc:	andeq	r1, r1, r4, asr #23
   11a00:			; <UNDEFINED> instruction: 0x00011ab8
   11a04:	ldrdeq	r1, [r1], -r0
   11a08:	andeq	r1, r1, r4, asr #23
   11a0c:	andeq	r1, r1, r8, lsl #21
   11a10:	andeq	r1, r1, r4, asr #23
   11a14:	andeq	r1, r1, r4, asr #23
   11a18:	andeq	r1, r1, r4, asr #23
   11a1c:	andeq	r1, r1, r4, asr #23
   11a20:	andeq	r1, r1, r4, asr #23
   11a24:	andeq	r1, r1, r4, asr #23
   11a28:	andeq	r1, r1, r4, asr #23
   11a2c:	muleq	r1, r4, sl
   11a30:	ldrdeq	r1, [r1], -r8
   11a34:	andeq	r1, r1, r4, asr #23
   11a38:	andeq	r1, r1, r4, asr #23
   11a3c:	andeq	r1, r1, r4, lsr #21
   11a40:	andeq	r1, r1, r4, ror sl
   11a44:			; <UNDEFINED> instruction: 0x00011ab0
   11a48:	strdeq	r1, [r1], -r0
   11a4c:	andeq	r1, r1, ip, ror sl
   11a50:	andeq	r1, r1, r0, ror #21
   11a54:	andeq	r1, r1, r4, asr #23
   11a58:	andeq	r1, r1, ip, asr sl
   11a5c:	ldr	r0, [sp, #36]	; 0x24
   11a60:	b	1182c <__assert_fail@plt+0x4a8>
   11a64:	cmp	r0, #256	; 0x100
   11a68:	bne	11bc4 <__assert_fail@plt+0x840>
   11a6c:	ldr	r0, [sp, #28]
   11a70:	b	1182c <__assert_fail@plt+0x4a8>
   11a74:	add	r0, r7, #12
   11a78:	b	1182c <__assert_fail@plt+0x4a8>
   11a7c:	add	r0, r7, #5
   11a80:	strb	r6, [r0]
   11a84:	b	11834 <__assert_fail@plt+0x4b0>
   11a88:	strb	r6, [r7, #8]
   11a8c:	strb	r6, [r7, #1]
   11a90:	b	11acc <__assert_fail@plt+0x748>
   11a94:	strb	r6, [r7, #2]
   11a98:	b	11ae4 <__assert_fail@plt+0x760>
   11a9c:	ldr	r0, [sp, #24]
   11aa0:	b	1182c <__assert_fail@plt+0x4a8>
   11aa4:	ldr	r0, [sp, #16]
   11aa8:	strb	r6, [r0]
   11aac:	b	11834 <__assert_fail@plt+0x4b0>
   11ab0:	strb	r6, [r7, #4]
   11ab4:	b	11ae4 <__assert_fail@plt+0x760>
   11ab8:	movw	r0, #257	; 0x101
   11abc:	movt	r0, #257	; 0x101
   11ac0:	str	r0, [r7]
   11ac4:	str	r0, [r7, #4]
   11ac8:	strb	r6, [r7, #8]
   11acc:	ldr	r0, [sp, #32]
   11ad0:	strb	r6, [r0]
   11ad4:	b	11834 <__assert_fail@plt+0x4b0>
   11ad8:	ldr	r0, [sp, #20]
   11adc:	b	1182c <__assert_fail@plt+0x4a8>
   11ae0:	strb	r6, [r7, #6]
   11ae4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11ae8:	strb	r6, [r0]
   11aec:	b	11834 <__assert_fail@plt+0x4b0>
   11af0:	add	r0, r7, #13
   11af4:	b	1182c <__assert_fail@plt+0x4a8>
   11af8:	tst	r8, #1
   11afc:	beq	11b14 <__assert_fail@plt+0x790>
   11b00:	movw	r0, #33156	; 0x8184
   11b04:	mov	r1, #1
   11b08:	movt	r0, #2
   11b0c:	strb	r1, [r0, #13]
   11b10:	strb	r1, [r0, #6]
   11b14:	movw	r6, #33156	; 0x8184
   11b18:	movt	r6, #2
   11b1c:	ldrb	r0, [r6, #9]
   11b20:	cmp	r0, #1
   11b24:	moveq	r0, #0
   11b28:	strbeq	r0, [r6, #13]
   11b2c:	mov	r0, #2
   11b30:	bl	12f40 <__assert_fail@plt+0x1bbc>
   11b34:	movw	r1, #27449	; 0x6b39
   11b38:	movw	r2, #27464	; 0x6b48
   11b3c:	movw	r7, #33136	; 0x8170
   11b40:	cmp	r0, #0
   11b44:	mov	r0, #12
   11b48:	movt	r1, #1
   11b4c:	movt	r2, #1
   11b50:	movwne	r0, #16
   11b54:	movt	r7, #2
   11b58:	movne	r2, r1
   11b5c:	str	r2, [r6, #16]
   11b60:	str	r0, [r6, #20]
   11b64:	ldr	r0, [r7]
   11b68:	sub	r1, r5, r0
   11b6c:	add	r2, r1, #1
   11b70:	cmp	r2, #2
   11b74:	bcc	11b90 <__assert_fail@plt+0x80c>
   11b78:	cmp	r1, #1
   11b7c:	beq	11bac <__assert_fail@plt+0x828>
   11b80:	cmp	r1, #2
   11b84:	bne	11c30 <__assert_fail@plt+0x8ac>
   11b88:	mov	r0, #1
   11b8c:	strb	r0, [r6, #11]
   11b90:	movw	r0, #27317	; 0x6ab5
   11b94:	mov	r1, #1
   11b98:	movt	r0, #1
   11b9c:	bl	11c74 <__assert_fail@plt+0x8f0>
   11ba0:	mov	r0, #0
   11ba4:	sub	sp, fp, #28
   11ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bac:	ldr	r0, [r4, r0, lsl #2]
   11bb0:	mov	r1, #0
   11bb4:	bl	11c74 <__assert_fail@plt+0x8f0>
   11bb8:	mov	r0, #0
   11bbc:	sub	sp, fp, #28
   11bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bc4:	mov	r0, #1
   11bc8:	bl	11480 <__assert_fail@plt+0xfc>
   11bcc:	movw	r0, #33056	; 0x8120
   11bd0:	movw	r2, #27435	; 0x6b2b
   11bd4:	movw	r7, #27419	; 0x6b1b
   11bd8:	movw	r6, #27402	; 0x6b0a
   11bdc:	mov	r1, #0
   11be0:	movt	r0, #2
   11be4:	movt	r2, #1
   11be8:	movt	r7, #1
   11bec:	movt	r6, #1
   11bf0:	ldr	r3, [r0]
   11bf4:	movw	r0, #33148	; 0x817c
   11bf8:	movt	r0, #2
   11bfc:	ldr	r0, [r0]
   11c00:	stm	sp, {r6, r7}
   11c04:	str	r2, [sp, #8]
   11c08:	movw	r2, #27388	; 0x6afc
   11c0c:	str	r1, [sp, #12]
   11c10:	movw	r1, #27345	; 0x6ad1
   11c14:	movt	r1, #1
   11c18:	movt	r2, #1
   11c1c:	bl	157d0 <__assert_fail@plt+0x444c>
   11c20:	mov	r0, #0
   11c24:	bl	11258 <exit@plt>
   11c28:	mov	r0, #0
   11c2c:	bl	11480 <__assert_fail@plt+0xfc>
   11c30:	movw	r1, #27476	; 0x6b54
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	movt	r1, #1
   11c40:	bl	11144 <dcgettext@plt>
   11c44:	mov	r5, r0
   11c48:	ldr	r0, [r7]
   11c4c:	add	r0, r4, r0, lsl #2
   11c50:	ldr	r0, [r0, #8]
   11c54:	bl	14fe0 <__assert_fail@plt+0x3c5c>
   11c58:	mov	r3, r0
   11c5c:	mov	r0, #0
   11c60:	mov	r1, #0
   11c64:	mov	r2, r5
   11c68:	bl	111c8 <error@plt>
   11c6c:	mov	r0, #1
   11c70:	bl	11480 <__assert_fail@plt+0xfc>
   11c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c78:	add	fp, sp, #28
   11c7c:	sub	sp, sp, #492	; 0x1ec
   11c80:	mov	r3, r1
   11c84:	add	r1, sp, #60	; 0x3c
   11c88:	add	r2, sp, #56	; 0x38
   11c8c:	mov	r4, r0
   11c90:	bl	15060 <__assert_fail@plt+0x3cdc>
   11c94:	cmp	r0, #0
   11c98:	bne	12a70 <__assert_fail@plt+0x16ec>
   11c9c:	movw	sl, #33156	; 0x8184
   11ca0:	ldr	r4, [sp, #56]	; 0x38
   11ca4:	ldr	r8, [sp, #60]	; 0x3c
   11ca8:	movt	sl, #2
   11cac:	ldrb	r0, [sl, #12]
   11cb0:	cmp	r0, #1
   11cb4:	bne	11d68 <__assert_fail@plt+0x9e4>
   11cb8:	mov	r5, #0
   11cbc:	cmp	r8, #0
   11cc0:	beq	11d34 <__assert_fail@plt+0x9b0>
   11cc4:	movw	r7, #27803	; 0x6c9b
   11cc8:	movw	r9, #27909	; 0x6d05
   11ccc:	movw	sl, #28058	; 0x6d9a
   11cd0:	movt	r7, #1
   11cd4:	movt	r9, #1
   11cd8:	movt	sl, #1
   11cdc:	ldrb	r0, [r4, #44]	; 0x2c
   11ce0:	sub	r8, r8, #1
   11ce4:	cmp	r0, #0
   11ce8:	beq	11d28 <__assert_fail@plt+0x9a4>
   11cec:	ldrh	r0, [r4]
   11cf0:	cmp	r0, #7
   11cf4:	bne	11d28 <__assert_fail@plt+0x9a4>
   11cf8:	mov	r0, r4
   11cfc:	bl	14ff8 <__assert_fail@plt+0x3c74>
   11d00:	mov	r6, r0
   11d04:	mov	r0, #1
   11d08:	mov	r1, r9
   11d0c:	mov	r2, r7
   11d10:	mov	r3, r6
   11d14:	bl	112c4 <__printf_chk@plt>
   11d18:	mov	r0, r6
   11d1c:	bl	12f18 <__assert_fail@plt+0x1b94>
   11d20:	add	r5, r5, #1
   11d24:	mov	r7, sl
   11d28:	add	r4, r4, #384	; 0x180
   11d2c:	cmp	r8, #0
   11d30:	bne	11cdc <__assert_fail@plt+0x958>
   11d34:	movw	r1, #27914	; 0x6d0a
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	movt	r1, #1
   11d44:	bl	11144 <dcgettext@plt>
   11d48:	mov	r1, r0
   11d4c:	mov	r0, #1
   11d50:	mov	r2, r5
   11d54:	bl	112c4 <__printf_chk@plt>
   11d58:	ldr	r0, [sp, #56]	; 0x38
   11d5c:	bl	12f18 <__assert_fail@plt+0x1b94>
   11d60:	sub	sp, fp, #28
   11d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d68:	ldrb	r0, [sl, #10]
   11d6c:	cmp	r0, #1
   11d70:	bne	11e44 <__assert_fail@plt+0xac0>
   11d74:	movw	r1, #27934	; 0x6d1e
   11d78:	mov	r0, #0
   11d7c:	mov	r2, #5
   11d80:	movt	r1, #1
   11d84:	bl	11144 <dcgettext@plt>
   11d88:	movw	r1, #27939	; 0x6d23
   11d8c:	str	r0, [sp, #52]	; 0x34
   11d90:	mov	r0, #0
   11d94:	mov	r2, #5
   11d98:	movt	r1, #1
   11d9c:	bl	11144 <dcgettext@plt>
   11da0:	movw	r1, #27944	; 0x6d28
   11da4:	mov	r9, r0
   11da8:	mov	r0, #0
   11dac:	mov	r2, #5
   11db0:	movt	r1, #1
   11db4:	bl	11144 <dcgettext@plt>
   11db8:	movw	r1, #27949	; 0x6d2d
   11dbc:	mov	sl, r0
   11dc0:	mov	r0, #0
   11dc4:	mov	r2, #5
   11dc8:	movt	r1, #1
   11dcc:	bl	11144 <dcgettext@plt>
   11dd0:	movw	r1, #27954	; 0x6d32
   11dd4:	mov	r5, r0
   11dd8:	mov	r0, #0
   11ddc:	mov	r2, #5
   11de0:	movt	r1, #1
   11de4:	bl	11144 <dcgettext@plt>
   11de8:	movw	r1, #27958	; 0x6d36
   11dec:	mov	r6, r0
   11df0:	mov	r0, #0
   11df4:	mov	r2, #5
   11df8:	movt	r1, #1
   11dfc:	bl	11144 <dcgettext@plt>
   11e00:	movw	r1, #27966	; 0x6d3e
   11e04:	mov	r7, r0
   11e08:	mov	r0, #0
   11e0c:	mov	r2, #5
   11e10:	movt	r1, #1
   11e14:	bl	11144 <dcgettext@plt>
   11e18:	add	r1, sp, #8
   11e1c:	stm	sp, {r9, sl}
   11e20:	movw	sl, #33156	; 0x8184
   11e24:	mov	r2, #32
   11e28:	mvn	r3, #0
   11e2c:	stm	r1, {r5, r6, r7}
   11e30:	str	r0, [sp, #20]
   11e34:	mvn	r0, #0
   11e38:	movt	sl, #2
   11e3c:	ldr	r1, [sp, #52]	; 0x34
   11e40:	bl	12ac0 <__assert_fail@plt+0x173c>
   11e44:	ldrb	r0, [sl, #11]
   11e48:	cmp	r0, #1
   11e4c:	bne	11e7c <__assert_fail@plt+0xaf8>
   11e50:	mov	r0, #0
   11e54:	bl	11264 <ttyname@plt>
   11e58:	cmp	r0, #0
   11e5c:	beq	12a60 <__assert_fail@plt+0x16dc>
   11e60:	movw	r1, #27928	; 0x6d18
   11e64:	mov	r2, #5
   11e68:	mov	r9, r0
   11e6c:	movt	r1, #1
   11e70:	bl	11360 <strncmp@plt>
   11e74:	cmp	r0, #0
   11e78:	addeq	r9, r9, #5
   11e7c:	cmp	r8, #0
   11e80:	beq	12a60 <__assert_fail@plt+0x16dc>
   11e84:	sub	r0, fp, #184	; 0xb8
   11e88:	add	r7, sp, #64	; 0x40
   11e8c:	str	r9, [sp, #40]	; 0x28
   11e90:	orr	r0, r0, #5
   11e94:	str	r0, [sp, #28]
   11e98:	mov	r0, #-2147483648	; 0x80000000
   11e9c:	str	r0, [sp, #52]	; 0x34
   11ea0:	b	11ed8 <__assert_fail@plt+0xb54>
   11ea4:	ldr	r0, [r6, #24]
   11ea8:	ldr	r9, [sp, #40]	; 0x28
   11eac:	ldr	r5, [sp, #32]
   11eb0:	movw	r3, #28049	; 0x6d91
   11eb4:	mov	r1, #1
   11eb8:	mvn	r2, #0
   11ebc:	str	r7, [sp]
   11ec0:	movt	r3, #1
   11ec4:	bl	11294 <__sprintf_chk@plt>
   11ec8:	ldr	r6, [sp, #36]	; 0x24
   11ecc:	cmp	r5, #0
   11ed0:	bne	12878 <__assert_fail@plt+0x14f4>
   11ed4:	b	12880 <__assert_fail@plt+0x14fc>
   11ed8:	ldrb	r0, [sl, #11]
   11edc:	cmp	r0, #1
   11ee0:	bne	11efc <__assert_fail@plt+0xb78>
   11ee4:	add	r1, r4, #8
   11ee8:	mov	r0, r9
   11eec:	mov	r2, #32
   11ef0:	bl	11360 <strncmp@plt>
   11ef4:	cmp	r0, #0
   11ef8:	bne	12a40 <__assert_fail@plt+0x16bc>
   11efc:	ldrb	r0, [sl, #6]
   11f00:	cmp	r0, #1
   11f04:	bne	120f4 <__assert_fail@plt+0xd70>
   11f08:	mov	r6, r4
   11f0c:	ldrb	r0, [r6, #44]!	; 0x2c
   11f10:	cmp	r0, #0
   11f14:	beq	120f4 <__assert_fail@plt+0xd70>
   11f18:	ldrh	r0, [r4]
   11f1c:	cmp	r0, #7
   11f20:	bne	120f4 <__assert_fail@plt+0xd70>
   11f24:	ldr	r0, [r4, #4]
   11f28:	movw	r3, #28028	; 0x6d7c
   11f2c:	mov	r1, #1
   11f30:	mov	r2, #12
   11f34:	movt	r3, #1
   11f38:	str	r0, [sp]
   11f3c:	sub	r0, fp, #196	; 0xc4
   11f40:	bl	11294 <__sprintf_chk@plt>
   11f44:	mov	r0, r4
   11f48:	ldrb	r1, [r0, #8]!
   11f4c:	str	r0, [sp, #48]	; 0x30
   11f50:	cmp	r1, #47	; 0x2f
   11f54:	sub	r0, fp, #184	; 0xb8
   11f58:	beq	11f80 <__assert_fail@plt+0xbfc>
   11f5c:	ldr	r2, [sp, #28]
   11f60:	mov	r0, #47	; 0x2f
   11f64:	cmp	r1, #0
   11f68:	strh	r0, [fp, #-180]	; 0xffffff4c
   11f6c:	movw	r0, #25647	; 0x642f
   11f70:	movt	r0, #30309	; 0x7665
   11f74:	str	r0, [fp, #-184]	; 0xffffff48
   11f78:	mov	r0, r2
   11f7c:	beq	11fbc <__assert_fail@plt+0xc38>
   11f80:	add	r2, r4, #40	; 0x28
   11f84:	mov	r7, #0
   11f88:	strb	r1, [r0, r7]
   11f8c:	add	r1, r4, r7
   11f90:	mov	r3, r7
   11f94:	add	r1, r1, #9
   11f98:	cmp	r1, r2
   11f9c:	bcs	11fb0 <__assert_fail@plt+0xc2c>
   11fa0:	ldrb	r1, [r1]
   11fa4:	add	r7, r3, #1
   11fa8:	cmp	r1, #0
   11fac:	bne	11f88 <__assert_fail@plt+0xc04>
   11fb0:	add	r0, r0, r3
   11fb4:	add	r7, sp, #64	; 0x40
   11fb8:	add	r2, r0, #1
   11fbc:	mov	r0, #0
   11fc0:	sub	r1, fp, #184	; 0xb8
   11fc4:	strb	r0, [r2]
   11fc8:	mov	r0, #3
   11fcc:	sub	r2, fp, #136	; 0x88
   11fd0:	bl	11354 <__xstat64@plt>
   11fd4:	mov	r1, #63	; 0x3f
   11fd8:	cmp	r0, #0
   11fdc:	beq	126e0 <__assert_fail@plt+0x135c>
   11fe0:	movw	r3, #28037	; 0x6d85
   11fe4:	str	r1, [sp, #44]	; 0x2c
   11fe8:	sub	r0, fp, #143	; 0x8f
   11fec:	mov	r1, #1
   11ff0:	mov	r2, #7
   11ff4:	movt	r3, #1
   11ff8:	bl	11294 <__sprintf_chk@plt>
   11ffc:	ldrb	r1, [r4, #76]	; 0x4c
   12000:	cmp	r1, #0
   12004:	beq	128cc <__assert_fail@plt+0x1548>
   12008:	add	r0, r4, #332	; 0x14c
   1200c:	mov	r3, #0
   12010:	strb	r1, [r7, r3]
   12014:	add	r1, r4, r3
   12018:	mov	r2, r3
   1201c:	add	r1, r1, #77	; 0x4d
   12020:	cmp	r1, r0
   12024:	bcs	12038 <__assert_fail@plt+0xcb4>
   12028:	ldrb	r1, [r1]
   1202c:	add	r3, r2, #1
   12030:	cmp	r1, #0
   12034:	bne	12010 <__assert_fail@plt+0xc8c>
   12038:	add	r0, r7, r2
   1203c:	mov	r5, #0
   12040:	mov	r1, #58	; 0x3a
   12044:	strb	r5, [r0, #1]
   12048:	mov	r0, r7
   1204c:	bl	1127c <strchr@plt>
   12050:	cmp	r0, #0
   12054:	mov	r9, #0
   12058:	str	r6, [sp, #36]	; 0x24
   1205c:	movne	r1, #0
   12060:	strbne	r1, [r0], #1
   12064:	movne	r9, r0
   12068:	ldrb	r0, [sp, #64]	; 0x40
   1206c:	cmp	r0, #0
   12070:	beq	1208c <__assert_fail@plt+0xd08>
   12074:	ldrb	r0, [sl, #14]
   12078:	cmp	r0, #1
   1207c:	bne	1208c <__assert_fail@plt+0xd08>
   12080:	mov	r0, r7
   12084:	bl	12cd0 <__assert_fail@plt+0x194c>
   12088:	mov	r5, r0
   1208c:	mov	r0, r7
   12090:	cmp	r5, #0
   12094:	mov	r7, r5
   12098:	str	r5, [sp, #32]
   1209c:	ldr	r5, [sl, #28]
   120a0:	mov	r6, sl
   120a4:	moveq	r7, r0
   120a8:	mov	r0, r7
   120ac:	bl	11270 <strlen@plt>
   120b0:	mov	sl, r0
   120b4:	cmp	r9, #0
   120b8:	beq	127c8 <__assert_fail@plt+0x1444>
   120bc:	mov	r0, r9
   120c0:	bl	11270 <strlen@plt>
   120c4:	add	r0, sl, r0
   120c8:	mov	sl, r6
   120cc:	add	r0, r0, #4
   120d0:	cmp	r5, r0
   120d4:	bcs	12848 <__assert_fail@plt+0x14c4>
   120d8:	str	r0, [r6, #28]
   120dc:	ldr	r0, [r6, #24]
   120e0:	bl	12f18 <__assert_fail@plt+0x1b94>
   120e4:	ldr	r0, [r6, #28]
   120e8:	bl	15a04 <__assert_fail@plt+0x4680>
   120ec:	str	r0, [r6, #24]
   120f0:	b	1284c <__assert_fail@plt+0x14c8>
   120f4:	ldrb	r0, [sl, #4]
   120f8:	cmp	r0, #1
   120fc:	ldrheq	r0, [r4]
   12100:	cmpeq	r0, #1
   12104:	beq	122fc <__assert_fail@plt+0xf78>
   12108:	ldrb	r0, [sl]
   1210c:	cmp	r0, #1
   12110:	ldrheq	r0, [r4]
   12114:	cmpeq	r0, #2
   12118:	beq	12420 <__assert_fail@plt+0x109c>
   1211c:	ldrb	r0, [sl, #5]
   12120:	cmp	r0, #1
   12124:	ldrheq	r0, [r4]
   12128:	cmpeq	r0, #3
   1212c:	beq	12430 <__assert_fail@plt+0x10ac>
   12130:	ldrb	r0, [sl, #3]
   12134:	cmp	r0, #1
   12138:	ldrheq	r0, [r4]
   1213c:	cmpeq	r0, #5
   12140:	beq	124c0 <__assert_fail@plt+0x113c>
   12144:	ldrb	r0, [sl, #2]
   12148:	cmp	r0, #1
   1214c:	ldrheq	r0, [r4]
   12150:	cmpeq	r0, #6
   12154:	beq	12598 <__assert_fail@plt+0x1214>
   12158:	ldrb	r0, [sl, #1]
   1215c:	cmp	r0, #1
   12160:	ldrheq	r0, [r4]
   12164:	cmpeq	r0, #8
   12168:	bne	12a40 <__assert_fail@plt+0x16bc>
   1216c:	movw	r6, #28208	; 0x6e30
   12170:	mov	r0, #0
   12174:	mov	r2, #5
   12178:	mov	r5, #0
   1217c:	movt	r6, #1
   12180:	mov	r1, r6
   12184:	bl	11144 <dcgettext@plt>
   12188:	bl	11270 <strlen@plt>
   1218c:	add	r0, r0, #5
   12190:	bl	15a04 <__assert_fail@plt+0x4680>
   12194:	mov	r9, r0
   12198:	mov	r0, #0
   1219c:	mov	r1, r6
   121a0:	mov	r2, #5
   121a4:	bl	11144 <dcgettext@plt>
   121a8:	mov	r1, r0
   121ac:	mov	r0, r9
   121b0:	bl	11138 <stpcpy@plt>
   121b4:	add	r1, r4, #44	; 0x2c
   121b8:	add	r2, r4, r5
   121bc:	ldrb	r2, [r2, #40]	; 0x28
   121c0:	cmp	r2, #0
   121c4:	beq	121e0 <__assert_fail@plt+0xe5c>
   121c8:	strb	r2, [r0, r5]
   121cc:	add	r5, r5, #1
   121d0:	add	r2, r4, r5
   121d4:	add	r2, r2, #40	; 0x28
   121d8:	cmp	r2, r1
   121dc:	bcc	121b8 <__assert_fail@plt+0xe34>
   121e0:	add	r0, r0, r5
   121e4:	mov	r1, #0
   121e8:	movw	r3, #28028	; 0x6d7c
   121ec:	mov	r2, #12
   121f0:	strb	r1, [r0]
   121f4:	mov	r1, #1
   121f8:	movt	r3, #1
   121fc:	ldr	r0, [r4, #4]
   12200:	str	r0, [sp]
   12204:	sub	r0, fp, #196	; 0xc4
   12208:	bl	11294 <__sprintf_chk@plt>
   1220c:	ldr	r5, [sl, #40]	; 0x28
   12210:	cmp	r5, #0
   12214:	bne	12260 <__assert_fail@plt+0xedc>
   12218:	movw	r1, #28218	; 0x6e3a
   1221c:	mov	r0, #0
   12220:	mov	r2, #5
   12224:	movt	r1, #1
   12228:	bl	11144 <dcgettext@plt>
   1222c:	bl	11270 <strlen@plt>
   12230:	movw	r1, #28224	; 0x6e40
   12234:	mov	r5, r0
   12238:	mov	r0, #0
   1223c:	mov	r2, #5
   12240:	movt	r1, #1
   12244:	bl	11144 <dcgettext@plt>
   12248:	bl	11270 <strlen@plt>
   1224c:	add	r0, r5, r0
   12250:	add	r0, r0, #14
   12254:	bl	15a04 <__assert_fail@plt+0x4680>
   12258:	mov	r5, r0
   1225c:	str	r0, [sl, #40]	; 0x28
   12260:	movw	r1, #28218	; 0x6e3a
   12264:	mov	r0, #0
   12268:	mov	r2, #5
   1226c:	movt	r1, #1
   12270:	bl	11144 <dcgettext@plt>
   12274:	mov	r7, r0
   12278:	mov	r0, #332	; 0x14c
   1227c:	movw	r1, #28224	; 0x6e40
   12280:	mov	r2, #5
   12284:	ldrsh	r6, [r4, r0]
   12288:	mov	r0, #0
   1228c:	movt	r1, #1
   12290:	bl	11144 <dcgettext@plt>
   12294:	movw	r1, #334	; 0x14e
   12298:	movw	r3, #28230	; 0x6e46
   1229c:	mvn	r2, #0
   122a0:	ldrsh	r1, [r4, r1]
   122a4:	str	r0, [sp, #8]
   122a8:	mov	r0, r5
   122ac:	movt	r3, #1
   122b0:	str	r7, [sp]
   122b4:	str	r6, [sp, #4]
   122b8:	str	r1, [sp, #12]
   122bc:	mov	r1, #1
   122c0:	bl	11294 <__sprintf_chk@plt>
   122c4:	ldr	r0, [r4, #340]	; 0x154
   122c8:	add	r7, r4, #8
   122cc:	str	r0, [sp, #64]	; 0x40
   122d0:	add	r0, sp, #64	; 0x40
   122d4:	bl	1121c <localtime@plt>
   122d8:	cmp	r0, #0
   122dc:	beq	129e0 <__assert_fail@plt+0x165c>
   122e0:	ldr	r2, [sl, #16]
   122e4:	add	r5, sl, #50	; 0x32
   122e8:	mov	r3, r0
   122ec:	mov	r1, #33	; 0x21
   122f0:	mov	r0, r5
   122f4:	bl	11204 <strftime@plt>
   122f8:	b	129f4 <__assert_fail@plt+0x1670>
   122fc:	ldr	r7, [r4, #4]
   12300:	ldr	r5, [sl, #32]
   12304:	asr	r0, r7, #31
   12308:	cmp	r5, #0
   1230c:	add	r6, r7, r0, lsr #24
   12310:	bne	1233c <__assert_fail@plt+0xfb8>
   12314:	movw	r1, #28156	; 0x6dfc
   12318:	mov	r0, #0
   1231c:	mov	r2, #5
   12320:	movt	r1, #1
   12324:	bl	11144 <dcgettext@plt>
   12328:	bl	11270 <strlen@plt>
   1232c:	add	r0, r0, #3
   12330:	bl	15a04 <__assert_fail@plt+0x4680>
   12334:	mov	r5, r0
   12338:	str	r0, [sl, #32]
   1233c:	movw	r1, #28156	; 0x6dfc
   12340:	mov	r0, #0
   12344:	mov	r2, #5
   12348:	asr	r6, r6, #8
   1234c:	movt	r1, #1
   12350:	bl	11144 <dcgettext@plt>
   12354:	movw	r3, #28166	; 0x6e06
   12358:	uxtb	r1, r7
   1235c:	mvn	r2, #0
   12360:	stm	sp, {r0, r1}
   12364:	mov	r0, r5
   12368:	mov	r1, #1
   1236c:	movt	r3, #1
   12370:	bl	11294 <__sprintf_chk@plt>
   12374:	ldr	r5, [sl, #36]	; 0x24
   12378:	cmp	r5, #0
   1237c:	bne	123a8 <__assert_fail@plt+0x1024>
   12380:	movw	r1, #28172	; 0x6e0c
   12384:	mov	r0, #0
   12388:	mov	r2, #5
   1238c:	movt	r1, #1
   12390:	bl	11144 <dcgettext@plt>
   12394:	bl	11270 <strlen@plt>
   12398:	add	r0, r0, #2
   1239c:	bl	15a04 <__assert_fail@plt+0x4680>
   123a0:	mov	r5, r0
   123a4:	str	r0, [sl, #36]	; 0x24
   123a8:	movw	r1, #28172	; 0x6e0c
   123ac:	mov	r0, #0
   123b0:	mov	r2, #5
   123b4:	movt	r1, #1
   123b8:	bl	11144 <dcgettext@plt>
   123bc:	uxtb	r6, r6
   123c0:	movw	r3, #28178	; 0x6e12
   123c4:	mvn	r2, #0
   123c8:	cmp	r6, #78	; 0x4e
   123cc:	mov	r1, r6
   123d0:	movt	r3, #1
   123d4:	movweq	r1, #83	; 0x53
   123d8:	stm	sp, {r0, r1}
   123dc:	mov	r0, r5
   123e0:	mov	r1, #1
   123e4:	bl	11294 <__sprintf_chk@plt>
   123e8:	ldr	r0, [r4, #340]	; 0x154
   123ec:	ldr	r7, [sl, #32]
   123f0:	str	r0, [sp, #64]	; 0x40
   123f4:	add	r0, sp, #64	; 0x40
   123f8:	bl	1121c <localtime@plt>
   123fc:	cmp	r0, #0
   12400:	beq	12688 <__assert_fail@plt+0x1304>
   12404:	ldr	r2, [sl, #16]
   12408:	add	r5, sl, #50	; 0x32
   1240c:	mov	r3, r0
   12410:	mov	r1, #33	; 0x21
   12414:	mov	r0, r5
   12418:	bl	11204 <strftime@plt>
   1241c:	b	1269c <__assert_fail@plt+0x1318>
   12420:	movw	r1, #28183	; 0x6e17
   12424:	mov	r0, #0
   12428:	movt	r1, #1
   1242c:	b	1243c <__assert_fail@plt+0x10b8>
   12430:	movw	r1, #28195	; 0x6e23
   12434:	mov	r0, #0
   12438:	movt	r1, #1
   1243c:	mov	r2, #5
   12440:	bl	11144 <dcgettext@plt>
   12444:	mov	r5, r0
   12448:	ldr	r0, [r4, #340]	; 0x154
   1244c:	str	r0, [sp, #64]	; 0x40
   12450:	mov	r0, r7
   12454:	bl	1121c <localtime@plt>
   12458:	cmp	r0, #0
   1245c:	beq	1247c <__assert_fail@plt+0x10f8>
   12460:	ldr	r2, [sl, #16]
   12464:	add	r6, sl, #50	; 0x32
   12468:	mov	r3, r0
   1246c:	mov	r1, #33	; 0x21
   12470:	mov	r0, r6
   12474:	bl	11204 <strftime@plt>
   12478:	b	12490 <__assert_fail@plt+0x110c>
   1247c:	ldr	r0, [sp, #64]	; 0x40
   12480:	add	r2, sl, #50	; 0x32
   12484:	asr	r1, r0, #31
   12488:	bl	12fa4 <__assert_fail@plt+0x1c20>
   1248c:	mov	r6, r0
   12490:	movw	r1, #27803	; 0x6c9b
   12494:	mvn	r0, #0
   12498:	mov	r2, #32
   1249c:	mvn	r3, #0
   124a0:	stm	sp, {r5, r6}
   124a4:	movt	r1, #1
   124a8:	str	r1, [sp, #8]
   124ac:	str	r1, [sp, #12]
   124b0:	str	r1, [sp, #16]
   124b4:	str	r1, [sp, #20]
   124b8:	bl	12ac0 <__assert_fail@plt+0x173c>
   124bc:	b	12a40 <__assert_fail@plt+0x16bc>
   124c0:	movw	r7, #28208	; 0x6e30
   124c4:	mov	r0, #0
   124c8:	mov	r2, #5
   124cc:	mov	r5, #0
   124d0:	movt	r7, #1
   124d4:	mov	r1, r7
   124d8:	bl	11144 <dcgettext@plt>
   124dc:	bl	11270 <strlen@plt>
   124e0:	add	r0, r0, #5
   124e4:	bl	15a04 <__assert_fail@plt+0x4680>
   124e8:	mov	r6, r0
   124ec:	mov	r0, #0
   124f0:	mov	r1, r7
   124f4:	mov	r2, #5
   124f8:	bl	11144 <dcgettext@plt>
   124fc:	mov	r1, r0
   12500:	mov	r0, r6
   12504:	bl	11138 <stpcpy@plt>
   12508:	add	r1, r4, #44	; 0x2c
   1250c:	add	r2, r4, r5
   12510:	ldrb	r2, [r2, #40]	; 0x28
   12514:	cmp	r2, #0
   12518:	beq	12534 <__assert_fail@plt+0x11b0>
   1251c:	strb	r2, [r0, r5]
   12520:	add	r5, r5, #1
   12524:	add	r2, r4, r5
   12528:	add	r2, r2, #40	; 0x28
   1252c:	cmp	r2, r1
   12530:	bcc	1250c <__assert_fail@plt+0x1188>
   12534:	add	r0, r0, r5
   12538:	mov	r1, #0
   1253c:	movw	r3, #28028	; 0x6d7c
   12540:	mov	r2, #12
   12544:	strb	r1, [r0]
   12548:	mov	r1, #1
   1254c:	movt	r3, #1
   12550:	ldr	r0, [r4, #4]
   12554:	str	r0, [sp]
   12558:	sub	r0, fp, #196	; 0xc4
   1255c:	bl	11294 <__sprintf_chk@plt>
   12560:	ldr	r0, [r4, #340]	; 0x154
   12564:	add	r7, r4, #8
   12568:	str	r0, [sp, #64]	; 0x40
   1256c:	add	r0, sp, #64	; 0x40
   12570:	bl	1121c <localtime@plt>
   12574:	cmp	r0, #0
   12578:	beq	127f4 <__assert_fail@plt+0x1470>
   1257c:	ldr	r2, [sl, #16]
   12580:	add	r5, sl, #50	; 0x32
   12584:	mov	r3, r0
   12588:	mov	r1, #33	; 0x21
   1258c:	mov	r0, r5
   12590:	bl	11204 <strftime@plt>
   12594:	b	12808 <__assert_fail@plt+0x1484>
   12598:	movw	r6, #28208	; 0x6e30
   1259c:	mov	r0, #0
   125a0:	mov	r2, #5
   125a4:	mov	r5, #0
   125a8:	movt	r6, #1
   125ac:	mov	r1, r6
   125b0:	bl	11144 <dcgettext@plt>
   125b4:	bl	11270 <strlen@plt>
   125b8:	add	r0, r0, #5
   125bc:	bl	15a04 <__assert_fail@plt+0x4680>
   125c0:	mov	r9, r0
   125c4:	mov	r0, #0
   125c8:	mov	r1, r6
   125cc:	mov	r2, #5
   125d0:	bl	11144 <dcgettext@plt>
   125d4:	mov	r1, r0
   125d8:	mov	r0, r9
   125dc:	bl	11138 <stpcpy@plt>
   125e0:	add	r1, r4, #44	; 0x2c
   125e4:	add	r2, r4, r5
   125e8:	ldrb	r2, [r2, #40]	; 0x28
   125ec:	cmp	r2, #0
   125f0:	beq	1260c <__assert_fail@plt+0x1288>
   125f4:	strb	r2, [r0, r5]
   125f8:	add	r5, r5, #1
   125fc:	add	r2, r4, r5
   12600:	add	r2, r2, #40	; 0x28
   12604:	cmp	r2, r1
   12608:	bcc	125e4 <__assert_fail@plt+0x1260>
   1260c:	add	r0, r0, r5
   12610:	mov	r1, #0
   12614:	movw	r3, #28028	; 0x6d7c
   12618:	mov	r2, #12
   1261c:	strb	r1, [r0]
   12620:	mov	r1, #1
   12624:	movt	r3, #1
   12628:	ldr	r0, [r4, #4]
   1262c:	str	r0, [sp]
   12630:	sub	r0, fp, #196	; 0xc4
   12634:	bl	11294 <__sprintf_chk@plt>
   12638:	movw	r1, #28212	; 0x6e34
   1263c:	mov	r0, #0
   12640:	mov	r2, #5
   12644:	movt	r1, #1
   12648:	bl	11144 <dcgettext@plt>
   1264c:	mov	r6, r0
   12650:	ldr	r0, [r4, #340]	; 0x154
   12654:	add	r5, r4, #8
   12658:	str	r0, [sp, #64]	; 0x40
   1265c:	mov	r0, r7
   12660:	bl	1121c <localtime@plt>
   12664:	cmp	r0, #0
   12668:	beq	128e0 <__assert_fail@plt+0x155c>
   1266c:	ldr	r2, [sl, #16]
   12670:	add	r7, sl, #50	; 0x32
   12674:	mov	r3, r0
   12678:	mov	r1, #33	; 0x21
   1267c:	mov	r0, r7
   12680:	bl	11204 <strftime@plt>
   12684:	b	128f4 <__assert_fail@plt+0x1570>
   12688:	ldr	r0, [sp, #64]	; 0x40
   1268c:	add	r2, sl, #50	; 0x32
   12690:	asr	r1, r0, #31
   12694:	bl	12fa4 <__assert_fail@plt+0x1c20>
   12698:	mov	r5, r0
   1269c:	ldr	r0, [sl, #36]	; 0x24
   126a0:	sub	r1, r6, #32
   126a4:	mov	r2, #32
   126a8:	mvn	r3, #0
   126ac:	str	r7, [sp]
   126b0:	str	r5, [sp, #4]
   126b4:	cmp	r1, #95	; 0x5f
   126b8:	movw	r1, #27803	; 0x6c9b
   126bc:	movt	r1, #1
   126c0:	str	r1, [sp, #8]
   126c4:	str	r1, [sp, #12]
   126c8:	str	r1, [sp, #20]
   126cc:	movcs	r0, r1
   126d0:	str	r0, [sp, #16]
   126d4:	mvn	r0, #0
   126d8:	bl	12ac0 <__assert_fail@plt+0x173c>
   126dc:	b	12a3c <__assert_fail@plt+0x16b8>
   126e0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   126e4:	ldr	r5, [fp, #-64]	; 0xffffffc0
   126e8:	mov	r1, #43	; 0x2b
   126ec:	tst	r0, #16
   126f0:	movweq	r1, #45	; 0x2d
   126f4:	cmp	r5, #0
   126f8:	beq	11fe0 <__assert_fail@plt+0xc5c>
   126fc:	movw	r0, #33052	; 0x811c
   12700:	str	r1, [sp, #44]	; 0x2c
   12704:	movt	r0, #2
   12708:	ldr	r0, [r0]
   1270c:	cmp	r0, #-2147483648	; 0x80000000
   12710:	bne	12720 <__assert_fail@plt+0x139c>
   12714:	movw	r0, #33052	; 0x811c
   12718:	movt	r0, #2
   1271c:	bl	11120 <time@plt>
   12720:	ldr	r0, [sp, #52]	; 0x34
   12724:	cmp	r5, r0
   12728:	ble	12888 <__assert_fail@plt+0x1504>
   1272c:	movw	r0, #33052	; 0x811c
   12730:	movt	r0, #2
   12734:	ldr	r0, [r0]
   12738:	cmp	r0, r5
   1273c:	blt	12888 <__assert_fail@plt+0x1504>
   12740:	movw	r1, #44672	; 0xae80
   12744:	movt	r1, #65534	; 0xfffe
   12748:	add	r1, r0, r1
   1274c:	cmp	r1, r5
   12750:	bge	12888 <__assert_fail@plt+0x1504>
   12754:	sub	r0, r0, r5
   12758:	movw	r5, #28054	; 0x6d96
   1275c:	cmp	r0, #60	; 0x3c
   12760:	movt	r5, #1
   12764:	blt	128a0 <__assert_fail@plt+0x151c>
   12768:	movw	r1, #20864	; 0x5180
   1276c:	movt	r1, #1
   12770:	cmp	r0, r1
   12774:	bge	12aa0 <__assert_fail@plt+0x171c>
   12778:	movw	r1, #46021	; 0xb3c5
   1277c:	movw	r3, #28140	; 0x6dec
   12780:	add	r5, sl, #44	; 0x2c
   12784:	movt	r1, #37282	; 0x91a2
   12788:	movt	r3, #1
   1278c:	umull	r1, r2, r0, r1
   12790:	lsr	r1, r2, #11
   12794:	mov	r2, #3600	; 0xe10
   12798:	mls	r0, r1, r2, r0
   1279c:	movw	r2, #34953	; 0x8889
   127a0:	str	r1, [sp]
   127a4:	mov	r1, #1
   127a8:	movt	r2, #34952	; 0x8888
   127ac:	umull	r0, r2, r0, r2
   127b0:	lsr	r0, r2, #5
   127b4:	mov	r2, #6
   127b8:	str	r0, [sp, #4]
   127bc:	mov	r0, r5
   127c0:	bl	11294 <__sprintf_chk@plt>
   127c4:	b	128a0 <__assert_fail@plt+0x151c>
   127c8:	add	r0, sl, #3
   127cc:	mov	sl, r6
   127d0:	cmp	r5, r0
   127d4:	bcs	11ea4 <__assert_fail@plt+0xb20>
   127d8:	str	r0, [r6, #28]
   127dc:	ldr	r0, [r6, #24]
   127e0:	bl	12f18 <__assert_fail@plt+0x1b94>
   127e4:	ldr	r0, [r6, #28]
   127e8:	bl	15a04 <__assert_fail@plt+0x4680>
   127ec:	str	r0, [r6, #24]
   127f0:	b	11ea8 <__assert_fail@plt+0xb24>
   127f4:	ldr	r0, [sp, #64]	; 0x40
   127f8:	add	r2, sl, #50	; 0x32
   127fc:	asr	r1, r0, #31
   12800:	bl	12fa4 <__assert_fail@plt+0x1c20>
   12804:	mov	r5, r0
   12808:	movw	r1, #27803	; 0x6c9b
   1280c:	sub	r0, fp, #196	; 0xc4
   12810:	mov	r2, #32
   12814:	mov	r3, #32
   12818:	str	r7, [sp]
   1281c:	str	r5, [sp, #4]
   12820:	str	r6, [sp, #16]
   12824:	movt	r1, #1
   12828:	str	r0, [sp, #12]
   1282c:	mvn	r0, #0
   12830:	str	r1, [sp, #8]
   12834:	str	r1, [sp, #20]
   12838:	bl	12ac0 <__assert_fail@plt+0x173c>
   1283c:	mov	r0, r6
   12840:	bl	12f18 <__assert_fail@plt+0x1b94>
   12844:	b	12a3c <__assert_fail@plt+0x16b8>
   12848:	ldr	r0, [r6, #24]
   1284c:	ldr	r5, [sp, #32]
   12850:	movw	r3, #28041	; 0x6d89
   12854:	mov	r1, #1
   12858:	mvn	r2, #0
   1285c:	stm	sp, {r7, r9}
   12860:	movt	r3, #1
   12864:	bl	11294 <__sprintf_chk@plt>
   12868:	ldr	r9, [sp, #40]	; 0x28
   1286c:	ldr	r6, [sp, #36]	; 0x24
   12870:	cmp	r5, #0
   12874:	beq	12880 <__assert_fail@plt+0x14fc>
   12878:	mov	r0, r7
   1287c:	bl	12f18 <__assert_fail@plt+0x1b94>
   12880:	add	r7, sp, #64	; 0x40
   12884:	b	12948 <__assert_fail@plt+0x15c4>
   12888:	movw	r1, #28150	; 0x6df6
   1288c:	mov	r0, #0
   12890:	mov	r2, #5
   12894:	movt	r1, #1
   12898:	bl	11144 <dcgettext@plt>
   1289c:	mov	r5, r0
   128a0:	movw	r3, #28032	; 0x6d80
   128a4:	mov	r0, #6
   128a8:	mov	r1, #1
   128ac:	mov	r2, #7
   128b0:	stm	sp, {r0, r5}
   128b4:	sub	r0, fp, #143	; 0x8f
   128b8:	movt	r3, #1
   128bc:	bl	11294 <__sprintf_chk@plt>
   128c0:	ldrb	r1, [r4, #76]	; 0x4c
   128c4:	cmp	r1, #0
   128c8:	bne	12008 <__assert_fail@plt+0xc84>
   128cc:	ldr	r0, [sl, #28]
   128d0:	cmp	r0, #0
   128d4:	beq	12924 <__assert_fail@plt+0x15a0>
   128d8:	ldr	r0, [sl, #24]
   128dc:	b	12940 <__assert_fail@plt+0x15bc>
   128e0:	ldr	r0, [sp, #64]	; 0x40
   128e4:	add	r2, sl, #50	; 0x32
   128e8:	asr	r1, r0, #31
   128ec:	bl	12fa4 <__assert_fail@plt+0x1c20>
   128f0:	mov	r7, r0
   128f4:	movw	r0, #27803	; 0x6c9b
   128f8:	stm	sp, {r5, r7}
   128fc:	str	r9, [sp, #16]
   12900:	movt	r0, #1
   12904:	mov	r1, r0
   12908:	str	r0, [sp, #8]
   1290c:	sub	r0, fp, #196	; 0xc4
   12910:	str	r0, [sp, #12]
   12914:	str	r1, [sp, #20]
   12918:	mvn	r0, #0
   1291c:	mov	r1, r6
   12920:	b	12a24 <__assert_fail@plt+0x16a0>
   12924:	mov	r0, #1
   12928:	str	r0, [sl, #28]
   1292c:	ldr	r0, [sl, #24]
   12930:	bl	12f18 <__assert_fail@plt+0x1b94>
   12934:	ldr	r0, [sl, #28]
   12938:	bl	15a04 <__assert_fail@plt+0x4680>
   1293c:	str	r0, [sl, #24]
   12940:	mov	r1, #0
   12944:	strb	r1, [r0]
   12948:	ldr	r0, [r4, #340]	; 0x154
   1294c:	str	r0, [sp, #64]	; 0x40
   12950:	mov	r0, r7
   12954:	bl	1121c <localtime@plt>
   12958:	cmp	r0, #0
   1295c:	beq	1297c <__assert_fail@plt+0x15f8>
   12960:	ldr	r2, [sl, #16]
   12964:	add	r5, sl, #50	; 0x32
   12968:	mov	r3, r0
   1296c:	mov	r1, #33	; 0x21
   12970:	mov	r0, r5
   12974:	bl	11204 <strftime@plt>
   12978:	b	12990 <__assert_fail@plt+0x160c>
   1297c:	ldr	r0, [sp, #64]	; 0x40
   12980:	add	r2, sl, #50	; 0x32
   12984:	asr	r1, r0, #31
   12988:	bl	12fa4 <__assert_fail@plt+0x1c20>
   1298c:	mov	r5, r0
   12990:	ldr	r0, [sl, #24]
   12994:	movw	r1, #27803	; 0x6c9b
   12998:	mov	r3, #32
   1299c:	movt	r1, #1
   129a0:	mov	r2, r1
   129a4:	cmp	r0, #0
   129a8:	moveq	r0, r1
   129ac:	ldr	r1, [sp, #48]	; 0x30
   129b0:	stm	sp, {r1, r5}
   129b4:	str	r2, [sp, #20]
   129b8:	sub	r1, fp, #143	; 0x8f
   129bc:	str	r0, [sp, #16]
   129c0:	mov	r0, #32
   129c4:	ldr	r2, [sp, #44]	; 0x2c
   129c8:	str	r1, [sp, #8]
   129cc:	sub	r1, fp, #196	; 0xc4
   129d0:	str	r1, [sp, #12]
   129d4:	mov	r1, r6
   129d8:	bl	12ac0 <__assert_fail@plt+0x173c>
   129dc:	b	12a40 <__assert_fail@plt+0x16bc>
   129e0:	ldr	r0, [sp, #64]	; 0x40
   129e4:	add	r2, sl, #50	; 0x32
   129e8:	asr	r1, r0, #31
   129ec:	bl	12fa4 <__assert_fail@plt+0x1c20>
   129f0:	mov	r5, r0
   129f4:	ldr	r0, [sl, #40]	; 0x28
   129f8:	movw	r2, #27803	; 0x6c9b
   129fc:	sub	r1, fp, #196	; 0xc4
   12a00:	str	r7, [sp]
   12a04:	str	r5, [sp, #4]
   12a08:	str	r9, [sp, #16]
   12a0c:	movt	r2, #1
   12a10:	str	r1, [sp, #12]
   12a14:	mov	r1, r2
   12a18:	str	r2, [sp, #8]
   12a1c:	str	r0, [sp, #20]
   12a20:	mvn	r0, #0
   12a24:	mov	r2, #32
   12a28:	mov	r3, #32
   12a2c:	bl	12ac0 <__assert_fail@plt+0x173c>
   12a30:	mov	r0, r9
   12a34:	bl	12f18 <__assert_fail@plt+0x1b94>
   12a38:	ldr	r9, [sp, #40]	; 0x28
   12a3c:	add	r7, sp, #64	; 0x40
   12a40:	ldrh	r0, [r4]
   12a44:	sub	r8, r8, #1
   12a48:	cmp	r0, #2
   12a4c:	ldreq	r0, [r4, #340]	; 0x154
   12a50:	add	r4, r4, #384	; 0x180
   12a54:	streq	r0, [sp, #52]	; 0x34
   12a58:	cmp	r8, #0
   12a5c:	bne	11ed8 <__assert_fail@plt+0xb54>
   12a60:	ldr	r0, [sp, #56]	; 0x38
   12a64:	bl	12f18 <__assert_fail@plt+0x1b94>
   12a68:	sub	sp, fp, #28
   12a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a70:	bl	11288 <__errno_location@plt>
   12a74:	ldr	r5, [r0]
   12a78:	mov	r0, #0
   12a7c:	mov	r1, #3
   12a80:	mov	r2, r4
   12a84:	bl	14d34 <__assert_fail@plt+0x39b0>
   12a88:	movw	r2, #28615	; 0x6fc7
   12a8c:	mov	r3, r0
   12a90:	mov	r0, #1
   12a94:	mov	r1, r5
   12a98:	movt	r2, #1
   12a9c:	bl	111c8 <error@plt>
   12aa0:	movw	r0, #28060	; 0x6d9c
   12aa4:	movw	r1, #28090	; 0x6dba
   12aa8:	movw	r3, #28100	; 0x6dc4
   12aac:	mov	r2, #205	; 0xcd
   12ab0:	movt	r0, #1
   12ab4:	movt	r1, #1
   12ab8:	movt	r3, #1
   12abc:	bl	11384 <__assert_fail@plt>
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #76	; 0x4c
   12acc:	movw	r5, #33156	; 0x8184
   12ad0:	str	r0, [sp, #44]	; 0x2c
   12ad4:	movw	r0, #33048	; 0x8118
   12ad8:	mov	r6, r1
   12adc:	str	r3, [sp, #40]	; 0x28
   12ae0:	movt	r0, #2
   12ae4:	movt	r5, #2
   12ae8:	strb	r2, [r0, #1]
   12aec:	ldrb	r0, [r5, #8]
   12af0:	cmp	r0, #1
   12af4:	ldrbeq	r0, [r5, #13]
   12af8:	cmpeq	r0, #0
   12afc:	beq	12b48 <__assert_fail@plt+0x17c4>
   12b00:	mov	r0, #0
   12b04:	strb	r0, [fp, #-40]	; 0xffffffd8
   12b08:	ldrb	r0, [r5, #13]
   12b0c:	cmp	r0, #0
   12b10:	bne	12b84 <__assert_fail@plt+0x1800>
   12b14:	ldr	r4, [fp, #20]
   12b18:	mov	r0, r4
   12b1c:	bl	11270 <strlen@plt>
   12b20:	cmp	r0, #11
   12b24:	bhi	12b84 <__assert_fail@plt+0x1800>
   12b28:	movw	r3, #27977	; 0x6d49
   12b2c:	add	r0, sp, #51	; 0x33
   12b30:	mov	r1, #1
   12b34:	mov	r2, #13
   12b38:	str	r4, [sp]
   12b3c:	movt	r3, #1
   12b40:	bl	11294 <__sprintf_chk@plt>
   12b44:	b	12b8c <__assert_fail@plt+0x1808>
   12b48:	ldr	r4, [fp, #16]
   12b4c:	mov	r0, r4
   12b50:	bl	11270 <strlen@plt>
   12b54:	cmp	r0, #6
   12b58:	bhi	12b00 <__assert_fail@plt+0x177c>
   12b5c:	movw	r3, #27971	; 0x6d43
   12b60:	sub	r0, fp, #40	; 0x28
   12b64:	mov	r1, #1
   12b68:	mov	r2, #8
   12b6c:	str	r4, [sp]
   12b70:	movt	r3, #1
   12b74:	bl	11294 <__sprintf_chk@plt>
   12b78:	ldrb	r0, [r5, #13]
   12b7c:	cmp	r0, #0
   12b80:	beq	12b14 <__assert_fail@plt+0x1790>
   12b84:	mov	r0, #0
   12b88:	strb	r0, [sp, #51]	; 0x33
   12b8c:	ldrb	r1, [r5, #9]
   12b90:	ldr	r4, [fp, #28]
   12b94:	mov	r0, #1
   12b98:	cmp	r1, #1
   12b9c:	bne	12bb8 <__assert_fail@plt+0x1834>
   12ba0:	mov	r0, r4
   12ba4:	bl	11270 <strlen@plt>
   12ba8:	mov	r1, r0
   12bac:	add	r0, r0, #2
   12bb0:	cmp	r1, #12
   12bb4:	movwcc	r0, #14
   12bb8:	ldr	sl, [fp, #24]
   12bbc:	ldr	r9, [fp, #12]
   12bc0:	ldr	r8, [fp, #8]
   12bc4:	bl	15a04 <__assert_fail@plt+0x4680>
   12bc8:	mov	r7, r0
   12bcc:	ldrb	r0, [r5, #9]
   12bd0:	cmp	r0, #1
   12bd4:	bne	12bf8 <__assert_fail@plt+0x1874>
   12bd8:	movw	r3, #27983	; 0x6d4f
   12bdc:	mov	r0, r7
   12be0:	mov	r1, #1
   12be4:	mvn	r2, #0
   12be8:	str	r4, [sp]
   12bec:	movt	r3, #1
   12bf0:	bl	11294 <__sprintf_chk@plt>
   12bf4:	b	12c00 <__assert_fail@plt+0x187c>
   12bf8:	mov	r0, #0
   12bfc:	strb	r0, [r7]
   12c00:	ldrb	r0, [r5, #7]
   12c04:	ldr	r1, [r5, #20]
   12c08:	movw	r5, #28023	; 0x6d77
   12c0c:	cmp	r6, #0
   12c10:	str	sl, [sp, #32]
   12c14:	str	r7, [sp, #36]	; 0x24
   12c18:	sub	r3, fp, #40	; 0x28
   12c1c:	add	r2, sp, #51	; 0x33
   12c20:	movt	r5, #1
   12c24:	movne	r5, r6
   12c28:	movw	r6, #27803	; 0x6c9b
   12c2c:	movt	r6, #1
   12c30:	cmp	r0, #0
   12c34:	movw	r0, #33048	; 0x8118
   12c38:	movt	r0, #2
   12c3c:	movne	r6, r0
   12c40:	stm	sp, {r5, r6}
   12c44:	str	r3, [sp, #24]
   12c48:	str	r2, [sp, #28]
   12c4c:	movw	r2, #27990	; 0x6d56
   12c50:	str	r1, [sp, #16]
   12c54:	mov	r1, #1
   12c58:	str	r8, [sp, #12]
   12c5c:	str	r9, [sp, #20]
   12c60:	ldr	r0, [sp, #40]	; 0x28
   12c64:	ldr	r3, [sp, #44]	; 0x2c
   12c68:	movt	r2, #1
   12c6c:	str	r0, [sp, #8]
   12c70:	sub	r0, fp, #32
   12c74:	bl	111d4 <__asprintf_chk@plt>
   12c78:	cmn	r0, #1
   12c7c:	beq	12ccc <__assert_fail@plt+0x1948>
   12c80:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12c84:	mov	r0, r4
   12c88:	bl	11270 <strlen@plt>
   12c8c:	add	r0, r4, r0
   12c90:	add	r0, r0, #1
   12c94:	ldrb	r1, [r0, #-2]
   12c98:	sub	r0, r0, #1
   12c9c:	cmp	r1, #32
   12ca0:	beq	12c94 <__assert_fail@plt+0x1910>
   12ca4:	mov	r1, #0
   12ca8:	strb	r1, [r0]
   12cac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12cb0:	bl	111e0 <puts@plt>
   12cb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12cb8:	bl	12f18 <__assert_fail@plt+0x1b94>
   12cbc:	mov	r0, r7
   12cc0:	bl	12f18 <__assert_fail@plt+0x1b94>
   12cc4:	sub	sp, fp, #28
   12cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ccc:	bl	15f64 <__assert_fail@plt+0x4be0>
   12cd0:	push	{r4, r5, r6, sl, fp, lr}
   12cd4:	add	fp, sp, #16
   12cd8:	sub	sp, sp, #8
   12cdc:	movw	r6, #33240	; 0x81d8
   12ce0:	mov	r5, r0
   12ce4:	mov	r0, #2
   12ce8:	mov	r4, #0
   12cec:	add	r3, sp, #4
   12cf0:	mov	r1, #0
   12cf4:	movt	r6, #2
   12cf8:	str	r4, [sp, #4]
   12cfc:	mov	r2, r6
   12d00:	str	r0, [r2, #4]!
   12d04:	mov	r0, r5
   12d08:	bl	1133c <getaddrinfo@plt>
   12d0c:	cmp	r0, #0
   12d10:	beq	12d24 <__assert_fail@plt+0x19a0>
   12d14:	str	r0, [r6]
   12d18:	mov	r0, r4
   12d1c:	sub	sp, fp, #16
   12d20:	pop	{r4, r5, r6, sl, fp, pc}
   12d24:	ldr	r0, [sp, #4]
   12d28:	ldr	r0, [r0, #24]
   12d2c:	cmp	r0, #0
   12d30:	movne	r5, r0
   12d34:	mov	r0, r5
   12d38:	bl	11150 <strdup@plt>
   12d3c:	cmp	r0, #0
   12d40:	mov	r4, r0
   12d44:	mvneq	r0, #9
   12d48:	streq	r0, [r6]
   12d4c:	ldr	r0, [sp, #4]
   12d50:	bl	11330 <freeaddrinfo@plt>
   12d54:	mov	r0, r4
   12d58:	sub	sp, fp, #16
   12d5c:	pop	{r4, r5, r6, sl, fp, pc}
   12d60:	push	{r4, r5, r6, sl, fp, lr}
   12d64:	add	fp, sp, #16
   12d68:	sub	sp, sp, #8
   12d6c:	movw	r2, #33240	; 0x81d8
   12d70:	mov	r6, r0
   12d74:	mov	r0, #2
   12d78:	mov	r5, r1
   12d7c:	mov	r4, #0
   12d80:	add	r3, sp, #4
   12d84:	mov	r1, #0
   12d88:	movt	r2, #2
   12d8c:	str	r4, [sp, #4]
   12d90:	str	r0, [r2, #4]!
   12d94:	mov	r0, r6
   12d98:	bl	1133c <getaddrinfo@plt>
   12d9c:	cmp	r0, #0
   12da0:	beq	12db8 <__assert_fail@plt+0x1a34>
   12da4:	cmp	r5, #0
   12da8:	strne	r0, [r5]
   12dac:	mov	r0, r4
   12db0:	sub	sp, fp, #16
   12db4:	pop	{r4, r5, r6, sl, fp, pc}
   12db8:	ldr	r0, [sp, #4]
   12dbc:	ldr	r0, [r0, #24]
   12dc0:	cmp	r0, #0
   12dc4:	movne	r6, r0
   12dc8:	mov	r0, r6
   12dcc:	bl	11150 <strdup@plt>
   12dd0:	mov	r4, r0
   12dd4:	cmp	r5, #0
   12dd8:	beq	12de8 <__assert_fail@plt+0x1a64>
   12ddc:	cmp	r4, #0
   12de0:	mvneq	r0, #9
   12de4:	streq	r0, [r5]
   12de8:	ldr	r0, [sp, #4]
   12dec:	bl	11330 <freeaddrinfo@plt>
   12df0:	mov	r0, r4
   12df4:	sub	sp, fp, #16
   12df8:	pop	{r4, r5, r6, sl, fp, pc}
   12dfc:	movw	r0, #33240	; 0x81d8
   12e00:	movt	r0, #2
   12e04:	ldr	r0, [r0]
   12e08:	b	110f0 <gai_strerror@plt>
   12e0c:	movw	r1, #33276	; 0x81fc
   12e10:	movt	r1, #2
   12e14:	str	r0, [r1, #4]
   12e18:	bx	lr
   12e1c:	movw	r1, #33276	; 0x81fc
   12e20:	movt	r1, #2
   12e24:	strb	r0, [r1]
   12e28:	bx	lr
   12e2c:	push	{r4, r5, r6, sl, fp, lr}
   12e30:	add	fp, sp, #16
   12e34:	sub	sp, sp, #8
   12e38:	movw	r0, #33148	; 0x817c
   12e3c:	movt	r0, #2
   12e40:	ldr	r0, [r0]
   12e44:	bl	16080 <__assert_fail@plt+0x4cfc>
   12e48:	cmp	r0, #0
   12e4c:	beq	12e74 <__assert_fail@plt+0x1af0>
   12e50:	movw	r5, #33276	; 0x81fc
   12e54:	movt	r5, #2
   12e58:	ldrb	r0, [r5]
   12e5c:	cmp	r0, #0
   12e60:	beq	12ea0 <__assert_fail@plt+0x1b1c>
   12e64:	bl	11288 <__errno_location@plt>
   12e68:	ldr	r0, [r0]
   12e6c:	cmp	r0, #32
   12e70:	bne	12ea0 <__assert_fail@plt+0x1b1c>
   12e74:	movw	r0, #33144	; 0x8178
   12e78:	movt	r0, #2
   12e7c:	ldr	r0, [r0]
   12e80:	bl	16080 <__assert_fail@plt+0x4cfc>
   12e84:	cmp	r0, #0
   12e88:	subeq	sp, fp, #16
   12e8c:	popeq	{r4, r5, r6, sl, fp, pc}
   12e90:	movw	r0, #33060	; 0x8124
   12e94:	movt	r0, #2
   12e98:	ldr	r0, [r0]
   12e9c:	bl	110fc <_exit@plt>
   12ea0:	movw	r1, #28599	; 0x6fb7
   12ea4:	mov	r0, #0
   12ea8:	mov	r2, #5
   12eac:	movt	r1, #1
   12eb0:	bl	11144 <dcgettext@plt>
   12eb4:	ldr	r6, [r5, #4]
   12eb8:	mov	r4, r0
   12ebc:	bl	11288 <__errno_location@plt>
   12ec0:	ldr	r5, [r0]
   12ec4:	cmp	r6, #0
   12ec8:	bne	12ee4 <__assert_fail@plt+0x1b60>
   12ecc:	movw	r2, #28615	; 0x6fc7
   12ed0:	mov	r0, #0
   12ed4:	mov	r1, r5
   12ed8:	mov	r3, r4
   12edc:	movt	r2, #1
   12ee0:	b	12f04 <__assert_fail@plt+0x1b80>
   12ee4:	mov	r0, r6
   12ee8:	bl	14c58 <__assert_fail@plt+0x38d4>
   12eec:	movw	r2, #28611	; 0x6fc3
   12ef0:	mov	r3, r0
   12ef4:	str	r4, [sp]
   12ef8:	mov	r0, #0
   12efc:	mov	r1, r5
   12f00:	movt	r2, #1
   12f04:	bl	111c8 <error@plt>
   12f08:	movw	r0, #33060	; 0x8124
   12f0c:	movt	r0, #2
   12f10:	ldr	r0, [r0]
   12f14:	bl	110fc <_exit@plt>
   12f18:	push	{r4, r5, r6, sl, fp, lr}
   12f1c:	add	fp, sp, #16
   12f20:	mov	r4, r0
   12f24:	bl	11288 <__errno_location@plt>
   12f28:	ldr	r6, [r0]
   12f2c:	mov	r5, r0
   12f30:	mov	r0, r4
   12f34:	bl	110e4 <free@plt>
   12f38:	str	r6, [r5]
   12f3c:	pop	{r4, r5, r6, sl, fp, pc}
   12f40:	push	{r4, sl, fp, lr}
   12f44:	add	fp, sp, #8
   12f48:	sub	sp, sp, #264	; 0x108
   12f4c:	add	r1, sp, #7
   12f50:	movw	r2, #257	; 0x101
   12f54:	bl	152a0 <__assert_fail@plt+0x3f1c>
   12f58:	mov	r4, #0
   12f5c:	cmp	r0, #0
   12f60:	bne	12f98 <__assert_fail@plt+0x1c14>
   12f64:	movw	r1, #28618	; 0x6fca
   12f68:	add	r0, sp, #7
   12f6c:	movt	r1, #1
   12f70:	bl	110c0 <strcmp@plt>
   12f74:	cmp	r0, #0
   12f78:	beq	12f98 <__assert_fail@plt+0x1c14>
   12f7c:	movw	r1, #28620	; 0x6fcc
   12f80:	add	r0, sp, #7
   12f84:	movt	r1, #1
   12f88:	bl	110c0 <strcmp@plt>
   12f8c:	mov	r4, r0
   12f90:	cmp	r0, #0
   12f94:	movwne	r4, #1
   12f98:	mov	r0, r4
   12f9c:	sub	sp, fp, #8
   12fa0:	pop	{r4, sl, fp, pc}
   12fa4:	push	{r4, r5, r6, sl, fp, lr}
   12fa8:	add	fp, sp, #16
   12fac:	mov	r5, r0
   12fb0:	mov	r0, #0
   12fb4:	mov	r4, r1
   12fb8:	add	r6, r2, #19
   12fbc:	cmp	r1, #0
   12fc0:	strb	r0, [r2, #20]
   12fc4:	blt	13014 <__assert_fail@plt+0x1c90>
   12fc8:	mov	r0, r5
   12fcc:	mov	r1, r4
   12fd0:	mov	r2, #10
   12fd4:	mov	r3, #0
   12fd8:	bl	16380 <__assert_fail@plt+0x4ffc>
   12fdc:	add	r2, r0, r0, lsl #2
   12fe0:	sub	r2, r5, r2, lsl #1
   12fe4:	add	r2, r2, #48	; 0x30
   12fe8:	strb	r2, [r6], #-1
   12fec:	adds	r2, r5, #9
   12ff0:	mov	r5, r0
   12ff4:	adc	r3, r4, #0
   12ff8:	rsbs	r2, r2, #18
   12ffc:	mov	r4, r1
   13000:	rscs	r2, r3, #0
   13004:	bcc	12fc8 <__assert_fail@plt+0x1c44>
   13008:	add	r6, r6, #1
   1300c:	mov	r0, r6
   13010:	pop	{r4, r5, r6, sl, fp, pc}
   13014:	mov	r0, r5
   13018:	mov	r1, r4
   1301c:	mov	r2, #10
   13020:	mov	r3, #0
   13024:	bl	16380 <__assert_fail@plt+0x4ffc>
   13028:	add	r2, r0, r0, lsl #2
   1302c:	rsb	r2, r5, r2, lsl #1
   13030:	add	r2, r2, #48	; 0x30
   13034:	strb	r2, [r6], #-1
   13038:	adds	r2, r5, #9
   1303c:	mov	r5, r0
   13040:	adc	r3, r4, #0
   13044:	rsbs	r2, r2, #18
   13048:	mov	r4, r1
   1304c:	rscs	r2, r3, #0
   13050:	bcc	13014 <__assert_fail@plt+0x1c90>
   13054:	mov	r0, #45	; 0x2d
   13058:	strb	r0, [r6]
   1305c:	mov	r0, r6
   13060:	pop	{r4, r5, r6, sl, fp, pc}
   13064:	push	{r4, r5, fp, lr}
   13068:	add	fp, sp, #8
   1306c:	cmp	r0, #0
   13070:	beq	13104 <__assert_fail@plt+0x1d80>
   13074:	mov	r1, #47	; 0x2f
   13078:	mov	r4, r0
   1307c:	bl	11318 <strrchr@plt>
   13080:	cmp	r0, #0
   13084:	mov	r5, r4
   13088:	addne	r5, r0, #1
   1308c:	sub	r0, r5, r4
   13090:	cmp	r0, #7
   13094:	blt	130e8 <__assert_fail@plt+0x1d64>
   13098:	movw	r1, #28682	; 0x700a
   1309c:	sub	r0, r5, #7
   130a0:	mov	r2, #7
   130a4:	movt	r1, #1
   130a8:	bl	11360 <strncmp@plt>
   130ac:	cmp	r0, #0
   130b0:	bne	130e8 <__assert_fail@plt+0x1d64>
   130b4:	movw	r1, #28690	; 0x7012
   130b8:	mov	r0, r5
   130bc:	mov	r2, #3
   130c0:	movt	r1, #1
   130c4:	bl	11360 <strncmp@plt>
   130c8:	cmp	r0, #0
   130cc:	beq	130d8 <__assert_fail@plt+0x1d54>
   130d0:	mov	r4, r5
   130d4:	b	130e8 <__assert_fail@plt+0x1d64>
   130d8:	movw	r0, #33128	; 0x8168
   130dc:	add	r4, r5, #3
   130e0:	movt	r0, #2
   130e4:	str	r4, [r0]
   130e8:	movw	r0, #33132	; 0x816c
   130ec:	movt	r0, #2
   130f0:	str	r4, [r0]
   130f4:	movw	r0, #33284	; 0x8204
   130f8:	movt	r0, #2
   130fc:	str	r4, [r0]
   13100:	pop	{r4, r5, fp, pc}
   13104:	movw	r0, #33144	; 0x8178
   13108:	mov	r1, #55	; 0x37
   1310c:	mov	r2, #1
   13110:	movt	r0, #2
   13114:	ldr	r3, [r0]
   13118:	movw	r0, #28626	; 0x6fd2
   1311c:	movt	r0, #1
   13120:	bl	1118c <fwrite@plt>
   13124:	bl	1136c <abort@plt>
   13128:	push	{r4, r5, r6, sl, fp, lr}
   1312c:	add	fp, sp, #16
   13130:	mov	r4, r0
   13134:	movw	r0, #33288	; 0x8208
   13138:	movt	r0, #2
   1313c:	cmp	r4, #0
   13140:	moveq	r4, r0
   13144:	bl	11288 <__errno_location@plt>
   13148:	ldr	r6, [r0]
   1314c:	mov	r5, r0
   13150:	mov	r0, r4
   13154:	mov	r1, #48	; 0x30
   13158:	bl	15e64 <__assert_fail@plt+0x4ae0>
   1315c:	str	r6, [r5]
   13160:	pop	{r4, r5, r6, sl, fp, pc}
   13164:	movw	r1, #33288	; 0x8208
   13168:	cmp	r0, #0
   1316c:	movt	r1, #2
   13170:	movne	r1, r0
   13174:	ldr	r0, [r1]
   13178:	bx	lr
   1317c:	movw	r2, #33288	; 0x8208
   13180:	cmp	r0, #0
   13184:	movt	r2, #2
   13188:	movne	r2, r0
   1318c:	str	r1, [r2]
   13190:	bx	lr
   13194:	movw	r3, #33288	; 0x8208
   13198:	cmp	r0, #0
   1319c:	movt	r3, #2
   131a0:	movne	r3, r0
   131a4:	ubfx	r0, r1, #5, #3
   131a8:	and	r1, r1, #31
   131ac:	add	r0, r3, r0, lsl #2
   131b0:	ldr	r3, [r0, #8]
   131b4:	eor	r2, r2, r3, lsr r1
   131b8:	and	r2, r2, #1
   131bc:	eor	r2, r3, r2, lsl r1
   131c0:	str	r2, [r0, #8]
   131c4:	mov	r0, #1
   131c8:	and	r0, r0, r3, lsr r1
   131cc:	bx	lr
   131d0:	movw	r2, #33288	; 0x8208
   131d4:	cmp	r0, #0
   131d8:	movt	r2, #2
   131dc:	movne	r2, r0
   131e0:	ldr	r0, [r2, #4]
   131e4:	str	r1, [r2, #4]
   131e8:	bx	lr
   131ec:	movw	r3, #33288	; 0x8208
   131f0:	cmp	r0, #0
   131f4:	movt	r3, #2
   131f8:	movne	r3, r0
   131fc:	cmp	r1, #0
   13200:	mov	r0, #10
   13204:	cmpne	r2, #0
   13208:	str	r0, [r3]
   1320c:	bne	1321c <__assert_fail@plt+0x1e98>
   13210:	push	{fp, lr}
   13214:	mov	fp, sp
   13218:	bl	1136c <abort@plt>
   1321c:	str	r1, [r3, #40]	; 0x28
   13220:	str	r2, [r3, #44]	; 0x2c
   13224:	bx	lr
   13228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1322c:	add	fp, sp, #28
   13230:	sub	sp, sp, #20
   13234:	mov	r7, r0
   13238:	ldr	r0, [fp, #8]
   1323c:	movw	r5, #33288	; 0x8208
   13240:	mov	r8, r3
   13244:	mov	r9, r2
   13248:	mov	sl, r1
   1324c:	movt	r5, #2
   13250:	cmp	r0, #0
   13254:	movne	r5, r0
   13258:	bl	11288 <__errno_location@plt>
   1325c:	mov	r4, r0
   13260:	ldm	r5, {r0, r1}
   13264:	ldr	r2, [r5, #40]	; 0x28
   13268:	ldr	r3, [r5, #44]	; 0x2c
   1326c:	add	r5, r5, #8
   13270:	ldr	r6, [r4]
   13274:	stm	sp, {r0, r1, r5}
   13278:	str	r2, [sp, #12]
   1327c:	str	r3, [sp, #16]
   13280:	mov	r0, r7
   13284:	mov	r1, sl
   13288:	mov	r2, r9
   1328c:	mov	r3, r8
   13290:	bl	132a0 <__assert_fail@plt+0x1f1c>
   13294:	str	r6, [r4]
   13298:	sub	sp, fp, #28
   1329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a4:	add	fp, sp, #28
   132a8:	sub	sp, sp, #156	; 0x9c
   132ac:	str	r0, [sp, #76]	; 0x4c
   132b0:	ldr	r0, [fp, #12]
   132b4:	mov	r6, r1
   132b8:	str	r3, [sp, #84]	; 0x54
   132bc:	str	r2, [fp, #-84]	; 0xffffffac
   132c0:	and	r1, r0, #4
   132c4:	str	r1, [sp, #24]
   132c8:	and	r1, r0, #1
   132cc:	str	r1, [sp, #28]
   132d0:	ubfx	r8, r0, #1, #1
   132d4:	bl	111a4 <__ctype_get_mb_cur_max@plt>
   132d8:	str	r0, [sp, #32]
   132dc:	ldr	r0, [fp, #24]
   132e0:	ldr	r7, [fp, #8]
   132e4:	mov	r1, #0
   132e8:	mov	r2, #0
   132ec:	mov	r4, #1
   132f0:	str	r1, [sp, #52]	; 0x34
   132f4:	str	r0, [sp, #72]	; 0x48
   132f8:	ldr	r0, [fp, #20]
   132fc:	str	r0, [sp, #68]	; 0x44
   13300:	mov	r0, #0
   13304:	str	r0, [sp, #48]	; 0x30
   13308:	mov	r0, #0
   1330c:	str	r0, [sp, #92]	; 0x5c
   13310:	mov	r0, #0
   13314:	str	r0, [fp, #-76]	; 0xffffffb4
   13318:	mov	r0, #0
   1331c:	cmp	r7, #10
   13320:	bhi	14608 <__assert_fail@plt+0x3284>
   13324:	add	r1, pc, #28
   13328:	mov	sl, r6
   1332c:	ldr	r6, [sp, #76]	; 0x4c
   13330:	ldr	ip, [fp, #-84]	; 0xffffffac
   13334:	ldr	lr, [sp, #84]	; 0x54
   13338:	mov	r9, #0
   1333c:	mov	r3, #1
   13340:	mov	r5, #0
   13344:	ldr	pc, [r1, r7, lsl #2]
   13348:	andeq	r3, r1, r8, lsl r4
   1334c:	andeq	r3, r1, r4, asr r4
   13350:	andeq	r3, r1, r8, lsr #8
   13354:	andeq	r3, r1, r0, lsl r4
   13358:	andeq	r3, r1, r8, asr #8
   1335c:	andeq	r3, r1, ip, ror r4
   13360:	andeq	r3, r1, r8, lsr r4
   13364:	andeq	r3, r1, r8, lsl #13
   13368:	andeq	r3, r1, r4, ror r3
   1336c:	andeq	r3, r1, r4, ror r3
   13370:	andeq	r3, r1, ip, lsl r6
   13374:	mov	r9, r4
   13378:	movw	r4, #28772	; 0x7064
   1337c:	mov	r5, r8
   13380:	mov	r8, r2
   13384:	mov	r0, #0
   13388:	mov	r2, #5
   1338c:	movt	r4, #1
   13390:	mov	r1, r4
   13394:	bl	11144 <dcgettext@plt>
   13398:	cmp	r0, r4
   1339c:	str	r0, [sp, #68]	; 0x44
   133a0:	bne	13530 <__assert_fail@plt+0x21ac>
   133a4:	bl	162ac <__assert_fail@plt+0x4f28>
   133a8:	ldrb	r1, [r0]
   133ac:	and	r1, r1, #223	; 0xdf
   133b0:	cmp	r1, #71	; 0x47
   133b4:	beq	134fc <__assert_fail@plt+0x2178>
   133b8:	cmp	r1, #85	; 0x55
   133bc:	bne	13514 <__assert_fail@plt+0x2190>
   133c0:	ldrb	r1, [r0, #1]
   133c4:	and	r1, r1, #223	; 0xdf
   133c8:	cmp	r1, #84	; 0x54
   133cc:	bne	13514 <__assert_fail@plt+0x2190>
   133d0:	ldrb	r1, [r0, #2]
   133d4:	and	r1, r1, #223	; 0xdf
   133d8:	cmp	r1, #70	; 0x46
   133dc:	bne	13514 <__assert_fail@plt+0x2190>
   133e0:	ldrb	r1, [r0, #3]
   133e4:	cmp	r1, #45	; 0x2d
   133e8:	ldrbeq	r1, [r0, #4]
   133ec:	cmpeq	r1, #56	; 0x38
   133f0:	bne	13514 <__assert_fail@plt+0x2190>
   133f4:	ldrb	r0, [r0, #5]
   133f8:	cmp	r0, #0
   133fc:	movw	r0, #28776	; 0x7068
   13400:	movt	r0, #1
   13404:	str	r0, [sp, #68]	; 0x44
   13408:	bne	13514 <__assert_fail@plt+0x2190>
   1340c:	b	13530 <__assert_fail@plt+0x21ac>
   13410:	mov	r0, #1
   13414:	b	13454 <__assert_fail@plt+0x20d0>
   13418:	mov	r7, #0
   1341c:	mov	r9, #0
   13420:	mov	r3, r0
   13424:	b	134f4 <__assert_fail@plt+0x2170>
   13428:	tst	r8, #1
   1342c:	bne	13454 <__assert_fail@plt+0x20d0>
   13430:	mov	r3, r0
   13434:	b	134ac <__assert_fail@plt+0x2128>
   13438:	mov	r0, #1
   1343c:	mov	r9, #0
   13440:	mov	r7, #5
   13444:	b	13490 <__assert_fail@plt+0x210c>
   13448:	mov	r3, #1
   1344c:	tst	r8, #1
   13450:	beq	134ac <__assert_fail@plt+0x2128>
   13454:	mov	r1, #1
   13458:	mov	r9, #0
   1345c:	mov	r7, #2
   13460:	mov	r3, r0
   13464:	mov	r5, #1
   13468:	str	r1, [fp, #-76]	; 0xffffffb4
   1346c:	movw	r1, #28774	; 0x7066
   13470:	movt	r1, #1
   13474:	str	r1, [sp, #92]	; 0x5c
   13478:	b	13688 <__assert_fail@plt+0x2304>
   1347c:	mov	r7, #5
   13480:	tst	r8, #1
   13484:	beq	134cc <__assert_fail@plt+0x2148>
   13488:	mov	r0, #1
   1348c:	mov	r9, #0
   13490:	str	r0, [fp, #-76]	; 0xffffffb4
   13494:	movw	r0, #28770	; 0x7062
   13498:	mov	r3, #1
   1349c:	mov	r5, #1
   134a0:	movt	r0, #1
   134a4:	str	r0, [sp, #92]	; 0x5c
   134a8:	b	13688 <__assert_fail@plt+0x2304>
   134ac:	cmp	sl, #0
   134b0:	mov	r9, #1
   134b4:	mov	r7, #2
   134b8:	movne	r0, #39	; 0x27
   134bc:	strbne	r0, [r6]
   134c0:	movw	r0, #28774	; 0x7066
   134c4:	movt	r0, #1
   134c8:	b	134e8 <__assert_fail@plt+0x2164>
   134cc:	cmp	sl, #0
   134d0:	mov	r9, #1
   134d4:	mov	r3, #1
   134d8:	movne	r0, #34	; 0x22
   134dc:	strbne	r0, [r6]
   134e0:	movw	r0, #28770	; 0x7062
   134e4:	movt	r0, #1
   134e8:	str	r0, [sp, #92]	; 0x5c
   134ec:	mov	r0, #1
   134f0:	str	r0, [fp, #-76]	; 0xffffffb4
   134f4:	mov	r5, #0
   134f8:	b	13688 <__assert_fail@plt+0x2304>
   134fc:	ldrb	r1, [r0, #1]
   13500:	and	r1, r1, #223	; 0xdf
   13504:	cmp	r1, #66	; 0x42
   13508:	ldrbeq	r1, [r0, #2]
   1350c:	cmpeq	r1, #49	; 0x31
   13510:	beq	14430 <__assert_fail@plt+0x30ac>
   13514:	movw	r0, #28774	; 0x7066
   13518:	movw	r1, #28770	; 0x7062
   1351c:	cmp	r7, #9
   13520:	movt	r0, #1
   13524:	movt	r1, #1
   13528:	moveq	r0, r1
   1352c:	str	r0, [sp, #68]	; 0x44
   13530:	movw	r4, #28774	; 0x7066
   13534:	mov	r0, #0
   13538:	mov	r2, #5
   1353c:	movt	r4, #1
   13540:	mov	r1, r4
   13544:	bl	11144 <dcgettext@plt>
   13548:	cmp	r0, r4
   1354c:	str	r0, [sp, #72]	; 0x48
   13550:	beq	13560 <__assert_fail@plt+0x21dc>
   13554:	mov	r4, r9
   13558:	mov	r2, r8
   1355c:	b	13618 <__assert_fail@plt+0x2294>
   13560:	bl	162ac <__assert_fail@plt+0x4f28>
   13564:	ldrb	r1, [r0]
   13568:	mov	r4, r9
   1356c:	and	r1, r1, #223	; 0xdf
   13570:	cmp	r1, #71	; 0x47
   13574:	beq	135d0 <__assert_fail@plt+0x224c>
   13578:	cmp	r1, #85	; 0x55
   1357c:	mov	r2, r8
   13580:	bne	135f8 <__assert_fail@plt+0x2274>
   13584:	ldrb	r1, [r0, #1]
   13588:	and	r1, r1, #223	; 0xdf
   1358c:	cmp	r1, #84	; 0x54
   13590:	bne	135f8 <__assert_fail@plt+0x2274>
   13594:	ldrb	r1, [r0, #2]
   13598:	and	r1, r1, #223	; 0xdf
   1359c:	cmp	r1, #70	; 0x46
   135a0:	ldrbeq	r1, [r0, #3]
   135a4:	cmpeq	r1, #45	; 0x2d
   135a8:	bne	135f8 <__assert_fail@plt+0x2274>
   135ac:	ldrb	r1, [r0, #4]
   135b0:	cmp	r1, #56	; 0x38
   135b4:	ldrbeq	r0, [r0, #5]
   135b8:	cmpeq	r0, #0
   135bc:	bne	135f8 <__assert_fail@plt+0x2274>
   135c0:	movw	r0, #28780	; 0x706c
   135c4:	movt	r0, #1
   135c8:	str	r0, [sp, #72]	; 0x48
   135cc:	b	13618 <__assert_fail@plt+0x2294>
   135d0:	ldrb	r1, [r0, #1]
   135d4:	mov	r2, r8
   135d8:	and	r1, r1, #223	; 0xdf
   135dc:	cmp	r1, #66	; 0x42
   135e0:	bne	135f8 <__assert_fail@plt+0x2274>
   135e4:	ldrb	r1, [r0, #2]
   135e8:	cmp	r1, #49	; 0x31
   135ec:	ldrbeq	r1, [r0, #3]
   135f0:	cmpeq	r1, #56	; 0x38
   135f4:	beq	14474 <__assert_fail@plt+0x30f0>
   135f8:	movw	r0, #28774	; 0x7066
   135fc:	cmp	r7, #9
   13600:	movt	r0, #1
   13604:	mov	r1, r0
   13608:	movw	r0, #28770	; 0x7062
   1360c:	movt	r0, #1
   13610:	moveq	r1, r0
   13614:	str	r1, [sp, #72]	; 0x48
   13618:	mov	r8, r5
   1361c:	mov	r9, #0
   13620:	tst	r8, #1
   13624:	mov	r5, r8
   13628:	str	r2, [fp, #-48]	; 0xffffffd0
   1362c:	bne	13664 <__assert_fail@plt+0x22e0>
   13630:	ldr	r0, [sp, #68]	; 0x44
   13634:	ldrb	r0, [r0]
   13638:	cmp	r0, #0
   1363c:	beq	13664 <__assert_fail@plt+0x22e0>
   13640:	ldr	r1, [sp, #68]	; 0x44
   13644:	mov	r9, #0
   13648:	add	r1, r1, #1
   1364c:	cmp	r9, sl
   13650:	strbcc	r0, [r6, r9]
   13654:	ldrb	r0, [r1, r9]
   13658:	add	r9, r9, #1
   1365c:	cmp	r0, #0
   13660:	bne	1364c <__assert_fail@plt+0x22c8>
   13664:	ldr	r8, [sp, #72]	; 0x48
   13668:	mov	r0, r8
   1366c:	bl	11270 <strlen@plt>
   13670:	ldr	ip, [fp, #-84]	; 0xffffffac
   13674:	ldr	lr, [sp, #84]	; 0x54
   13678:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1367c:	str	r0, [fp, #-76]	; 0xffffffb4
   13680:	str	r8, [sp, #92]	; 0x5c
   13684:	mov	r3, #1
   13688:	ldr	r0, [fp, #16]
   1368c:	str	r7, [fp, #-64]	; 0xffffffc0
   13690:	str	r5, [fp, #-72]	; 0xffffffb8
   13694:	str	r3, [sp, #80]	; 0x50
   13698:	cmp	r0, #0
   1369c:	movwne	r0, #1
   136a0:	and	r0, r0, r5
   136a4:	str	r0, [fp, #-88]	; 0xffffffa8
   136a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136ac:	cmp	r0, #0
   136b0:	movwne	r0, #1
   136b4:	subs	r7, r7, #2
   136b8:	and	r1, r0, r5
   136bc:	str	r7, [fp, #-80]	; 0xffffffb0
   136c0:	and	r1, r3, r1
   136c4:	str	r1, [sp, #40]	; 0x28
   136c8:	clz	r1, r7
   136cc:	lsr	r1, r1, #5
   136d0:	and	r1, r1, r5
   136d4:	eor	r5, r5, #1
   136d8:	str	r1, [sp, #36]	; 0x24
   136dc:	mov	r1, r7
   136e0:	str	r5, [sp, #88]	; 0x58
   136e4:	mov	r7, #0
   136e8:	movwne	r1, #1
   136ec:	orr	r5, r1, r5
   136f0:	and	r1, r1, r3
   136f4:	and	r0, r0, r1
   136f8:	str	r5, [sp, #60]	; 0x3c
   136fc:	str	r1, [fp, #-68]	; 0xffffffbc
   13700:	str	r0, [fp, #-60]	; 0xffffffc4
   13704:	eor	r0, r3, #1
   13708:	str	r0, [sp, #44]	; 0x2c
   1370c:	cmn	lr, #1
   13710:	beq	13720 <__assert_fail@plt+0x239c>
   13714:	cmp	r7, lr
   13718:	bne	1372c <__assert_fail@plt+0x23a8>
   1371c:	b	143a4 <__assert_fail@plt+0x3020>
   13720:	ldrb	r0, [ip, r7]
   13724:	cmp	r0, #0
   13728:	beq	143ac <__assert_fail@plt+0x3028>
   1372c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13730:	mov	r8, #0
   13734:	str	r4, [fp, #-52]	; 0xffffffcc
   13738:	str	r2, [fp, #-48]	; 0xffffffd0
   1373c:	cmp	r0, #0
   13740:	beq	13774 <__assert_fail@plt+0x23f0>
   13744:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13748:	add	r4, r7, r0
   1374c:	cmp	r0, #2
   13750:	bcc	1376c <__assert_fail@plt+0x23e8>
   13754:	cmn	lr, #1
   13758:	bne	1376c <__assert_fail@plt+0x23e8>
   1375c:	mov	r0, ip
   13760:	bl	11270 <strlen@plt>
   13764:	ldr	ip, [fp, #-84]	; 0xffffffac
   13768:	mov	lr, r0
   1376c:	cmp	r4, lr
   13770:	bls	1378c <__assert_fail@plt+0x2408>
   13774:	mov	r0, #0
   13778:	str	r0, [fp, #-56]	; 0xffffffc8
   1377c:	ldrb	r5, [ip, r7]
   13780:	cmp	r5, #126	; 0x7e
   13784:	bls	137dc <__assert_fail@plt+0x2458>
   13788:	b	13be4 <__assert_fail@plt+0x2860>
   1378c:	ldr	r1, [sp, #92]	; 0x5c
   13790:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13794:	add	r0, ip, r7
   13798:	mov	r4, lr
   1379c:	bl	1112c <memcmp@plt>
   137a0:	ldr	r2, [sp, #88]	; 0x58
   137a4:	cmp	r0, #0
   137a8:	mov	r1, r0
   137ac:	movwne	r1, #1
   137b0:	orr	r1, r1, r2
   137b4:	tst	r1, #1
   137b8:	beq	144b8 <__assert_fail@plt+0x3134>
   137bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   137c0:	clz	r0, r0
   137c4:	mov	lr, r4
   137c8:	lsr	r0, r0, #5
   137cc:	str	r0, [fp, #-56]	; 0xffffffc8
   137d0:	ldrb	r5, [ip, r7]
   137d4:	cmp	r5, #126	; 0x7e
   137d8:	bhi	13be4 <__assert_fail@plt+0x2860>
   137dc:	add	r3, pc, #16
   137e0:	mov	r4, #1
   137e4:	mov	r2, #110	; 0x6e
   137e8:	mov	r0, #97	; 0x61
   137ec:	mov	r1, #0
   137f0:	ldr	pc, [r3, r5, lsl #2]
   137f4:	andeq	r3, r1, r4, asr #21
   137f8:	andeq	r3, r1, r4, ror #23
   137fc:	andeq	r3, r1, r4, ror #23
   13800:	andeq	r3, r1, r4, ror #23
   13804:	andeq	r3, r1, r4, ror #23
   13808:	andeq	r3, r1, r4, ror #23
   1380c:	andeq	r3, r1, r4, ror #23
   13810:	andeq	r3, r1, r0, asr #25
   13814:	andeq	r3, r1, r4, lsr #21
   13818:	andeq	r3, r1, ip, lsl #21
   1381c:			; <UNDEFINED> instruction: 0x00013ab0
   13820:	andeq	r3, r1, r0, asr #22
   13824:	andeq	r3, r1, r4, lsl #21
   13828:	andeq	r3, r1, ip, lsr #21
   1382c:	andeq	r3, r1, r4, ror #23
   13830:	andeq	r3, r1, r4, ror #23
   13834:	andeq	r3, r1, r4, ror #23
   13838:	andeq	r3, r1, r4, ror #23
   1383c:	andeq	r3, r1, r4, ror #23
   13840:	andeq	r3, r1, r4, ror #23
   13844:	andeq	r3, r1, r4, ror #23
   13848:	andeq	r3, r1, r4, ror #23
   1384c:	andeq	r3, r1, r4, ror #23
   13850:	andeq	r3, r1, r4, ror #23
   13854:	andeq	r3, r1, r4, ror #23
   13858:	andeq	r3, r1, r4, ror #23
   1385c:	andeq	r3, r1, r4, ror #23
   13860:	andeq	r3, r1, r4, ror #23
   13864:	andeq	r3, r1, r4, ror #23
   13868:	andeq	r3, r1, r4, ror #23
   1386c:	andeq	r3, r1, r4, ror #23
   13870:	andeq	r3, r1, r4, ror #23
   13874:	andeq	r3, r1, ip, lsr ip
   13878:	andeq	r3, r1, r0, asr #24
   1387c:	andeq	r3, r1, r0, asr #24
   13880:	andeq	r3, r1, r0, lsl sl
   13884:	andeq	r3, r1, r0, asr #24
   13888:	strdeq	r3, [r1], -r0
   1388c:	andeq	r3, r1, r0, asr #24
   13890:	andeq	r3, r1, r8, asr #22
   13894:	andeq	r3, r1, r0, asr #24
   13898:	andeq	r3, r1, r0, asr #24
   1389c:	andeq	r3, r1, r0, asr #24
   138a0:	strdeq	r3, [r1], -r0
   138a4:	strdeq	r3, [r1], -r0
   138a8:	strdeq	r3, [r1], -r0
   138ac:	strdeq	r3, [r1], -r0
   138b0:	strdeq	r3, [r1], -r0
   138b4:	strdeq	r3, [r1], -r0
   138b8:	strdeq	r3, [r1], -r0
   138bc:	strdeq	r3, [r1], -r0
   138c0:	strdeq	r3, [r1], -r0
   138c4:	strdeq	r3, [r1], -r0
   138c8:	strdeq	r3, [r1], -r0
   138cc:	strdeq	r3, [r1], -r0
   138d0:	strdeq	r3, [r1], -r0
   138d4:	strdeq	r3, [r1], -r0
   138d8:	strdeq	r3, [r1], -r0
   138dc:	strdeq	r3, [r1], -r0
   138e0:	andeq	r3, r1, r0, asr #24
   138e4:	andeq	r3, r1, r0, asr #24
   138e8:	andeq	r3, r1, r0, asr #24
   138ec:	andeq	r3, r1, r0, asr #24
   138f0:	andeq	r3, r1, r4, lsl #22
   138f4:	andeq	r3, r1, r4, ror #23
   138f8:	strdeq	r3, [r1], -r0
   138fc:	strdeq	r3, [r1], -r0
   13900:	strdeq	r3, [r1], -r0
   13904:	strdeq	r3, [r1], -r0
   13908:	strdeq	r3, [r1], -r0
   1390c:	strdeq	r3, [r1], -r0
   13910:	strdeq	r3, [r1], -r0
   13914:	strdeq	r3, [r1], -r0
   13918:	strdeq	r3, [r1], -r0
   1391c:	strdeq	r3, [r1], -r0
   13920:	strdeq	r3, [r1], -r0
   13924:	strdeq	r3, [r1], -r0
   13928:	strdeq	r3, [r1], -r0
   1392c:	strdeq	r3, [r1], -r0
   13930:	strdeq	r3, [r1], -r0
   13934:	strdeq	r3, [r1], -r0
   13938:	strdeq	r3, [r1], -r0
   1393c:	strdeq	r3, [r1], -r0
   13940:	strdeq	r3, [r1], -r0
   13944:	strdeq	r3, [r1], -r0
   13948:	strdeq	r3, [r1], -r0
   1394c:	strdeq	r3, [r1], -r0
   13950:	strdeq	r3, [r1], -r0
   13954:	strdeq	r3, [r1], -r0
   13958:	strdeq	r3, [r1], -r0
   1395c:	strdeq	r3, [r1], -r0
   13960:	andeq	r3, r1, r0, asr #24
   13964:	andeq	r3, r1, r0, asr sl
   13968:	strdeq	r3, [r1], -r0
   1396c:	andeq	r3, r1, r0, asr #24
   13970:	strdeq	r3, [r1], -r0
   13974:	andeq	r3, r1, r0, asr #24
   13978:	strdeq	r3, [r1], -r0
   1397c:	strdeq	r3, [r1], -r0
   13980:	strdeq	r3, [r1], -r0
   13984:	strdeq	r3, [r1], -r0
   13988:	strdeq	r3, [r1], -r0
   1398c:	strdeq	r3, [r1], -r0
   13990:	strdeq	r3, [r1], -r0
   13994:	strdeq	r3, [r1], -r0
   13998:	strdeq	r3, [r1], -r0
   1399c:	strdeq	r3, [r1], -r0
   139a0:	strdeq	r3, [r1], -r0
   139a4:	strdeq	r3, [r1], -r0
   139a8:	strdeq	r3, [r1], -r0
   139ac:	strdeq	r3, [r1], -r0
   139b0:	strdeq	r3, [r1], -r0
   139b4:	strdeq	r3, [r1], -r0
   139b8:	strdeq	r3, [r1], -r0
   139bc:	strdeq	r3, [r1], -r0
   139c0:	strdeq	r3, [r1], -r0
   139c4:	strdeq	r3, [r1], -r0
   139c8:	strdeq	r3, [r1], -r0
   139cc:	strdeq	r3, [r1], -r0
   139d0:	strdeq	r3, [r1], -r0
   139d4:	strdeq	r3, [r1], -r0
   139d8:	strdeq	r3, [r1], -r0
   139dc:	strdeq	r3, [r1], -r0
   139e0:	andeq	r3, r1, r0, lsr sl
   139e4:	andeq	r3, r1, r0, asr #24
   139e8:	andeq	r3, r1, r0, lsr sl
   139ec:	andeq	r3, r1, r0, lsl sl
   139f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139f4:	cmp	r0, #0
   139f8:	beq	13cd4 <__assert_fail@plt+0x2950>
   139fc:	ldr	r0, [fp, #16]
   13a00:	cmp	r0, #0
   13a04:	mov	r0, r5
   13a08:	bne	13ce4 <__assert_fail@plt+0x2960>
   13a0c:	b	13d04 <__assert_fail@plt+0x2980>
   13a10:	mov	r4, #0
   13a14:	cmp	r7, #0
   13a18:	beq	13c3c <__assert_fail@plt+0x28b8>
   13a1c:	mov	r8, #0
   13a20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a24:	cmp	r0, #0
   13a28:	bne	139fc <__assert_fail@plt+0x2678>
   13a2c:	b	13cd4 <__assert_fail@plt+0x2950>
   13a30:	mov	r4, #0
   13a34:	cmn	lr, #1
   13a38:	beq	13c14 <__assert_fail@plt+0x2890>
   13a3c:	cmp	r7, #0
   13a40:	bne	13a1c <__assert_fail@plt+0x2698>
   13a44:	cmp	lr, #1
   13a48:	beq	13c3c <__assert_fail@plt+0x28b8>
   13a4c:	b	13a1c <__assert_fail@plt+0x2698>
   13a50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a54:	cmp	r0, #2
   13a58:	bne	13c6c <__assert_fail@plt+0x28e8>
   13a5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a60:	tst	r0, #1
   13a64:	bne	144cc <__assert_fail@plt+0x3148>
   13a68:	mov	r8, #0
   13a6c:	mov	r0, #92	; 0x5c
   13a70:	mov	r4, #0
   13a74:	cmp	r8, #0
   13a78:	beq	13c8c <__assert_fail@plt+0x2908>
   13a7c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a80:	b	13d80 <__assert_fail@plt+0x29fc>
   13a84:	mov	r0, #102	; 0x66
   13a88:	b	13cc0 <__assert_fail@plt+0x293c>
   13a8c:	mov	r2, #116	; 0x74
   13a90:	ldr	r0, [sp, #60]	; 0x3c
   13a94:	tst	r0, #1
   13a98:	mov	r0, r2
   13a9c:	bne	13cc0 <__assert_fail@plt+0x293c>
   13aa0:	b	144cc <__assert_fail@plt+0x3148>
   13aa4:	mov	r0, #98	; 0x62
   13aa8:	b	13cc0 <__assert_fail@plt+0x293c>
   13aac:	mov	r2, #114	; 0x72
   13ab0:	ldr	r0, [sp, #60]	; 0x3c
   13ab4:	tst	r0, #1
   13ab8:	mov	r0, r2
   13abc:	bne	13cc0 <__assert_fail@plt+0x293c>
   13ac0:	b	144cc <__assert_fail@plt+0x3148>
   13ac4:	ldr	r0, [sp, #80]	; 0x50
   13ac8:	tst	r0, #1
   13acc:	beq	13da8 <__assert_fail@plt+0x2a24>
   13ad0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ad4:	tst	r0, #1
   13ad8:	bne	145f4 <__assert_fail@plt+0x3270>
   13adc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ae0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ae4:	cmp	r0, #2
   13ae8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13aec:	movwne	r0, #1
   13af0:	orr	r0, r0, r2
   13af4:	tst	r0, #1
   13af8:	beq	140a0 <__assert_fail@plt+0x2d1c>
   13afc:	mov	r0, r9
   13b00:	b	140d4 <__assert_fail@plt+0x2d50>
   13b04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b08:	mov	r8, #0
   13b0c:	mov	r5, #63	; 0x3f
   13b10:	cmp	r0, #5
   13b14:	beq	13f5c <__assert_fail@plt+0x2bd8>
   13b18:	cmp	r0, #2
   13b1c:	bne	1400c <__assert_fail@plt+0x2c88>
   13b20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b24:	tst	r0, #1
   13b28:	bne	144cc <__assert_fail@plt+0x3148>
   13b2c:	mov	r4, #0
   13b30:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b34:	cmp	r0, #0
   13b38:	bne	139fc <__assert_fail@plt+0x2678>
   13b3c:	b	13cd4 <__assert_fail@plt+0x2950>
   13b40:	mov	r0, #118	; 0x76
   13b44:	b	13cc0 <__assert_fail@plt+0x293c>
   13b48:	mov	r0, #1
   13b4c:	mov	r5, #39	; 0x27
   13b50:	str	r0, [sp, #52]	; 0x34
   13b54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b58:	cmp	r0, #2
   13b5c:	bne	13bd0 <__assert_fail@plt+0x284c>
   13b60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b64:	tst	r0, #1
   13b68:	bne	144cc <__assert_fail@plt+0x3148>
   13b6c:	ldr	r2, [sp, #48]	; 0x30
   13b70:	clz	r1, sl
   13b74:	mov	r8, #0
   13b78:	lsr	r1, r1, #5
   13b7c:	cmp	r2, #0
   13b80:	mov	r0, r2
   13b84:	movwne	r0, #1
   13b88:	orrs	r0, r0, r1
   13b8c:	moveq	r2, sl
   13b90:	moveq	sl, r0
   13b94:	cmp	r9, sl
   13b98:	str	r2, [sp, #48]	; 0x30
   13b9c:	movcc	r0, #39	; 0x27
   13ba0:	strbcc	r0, [r6, r9]
   13ba4:	add	r0, r9, #1
   13ba8:	cmp	r0, sl
   13bac:	movcc	r1, #92	; 0x5c
   13bb0:	strbcc	r1, [r6, r0]
   13bb4:	add	r0, r9, #2
   13bb8:	add	r9, r9, #3
   13bbc:	cmp	r0, sl
   13bc0:	movcc	r1, #39	; 0x27
   13bc4:	strbcc	r1, [r6, r0]
   13bc8:	mov	r0, #0
   13bcc:	str	r0, [fp, #-48]	; 0xffffffd0
   13bd0:	mov	r4, #1
   13bd4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bd8:	cmp	r0, #0
   13bdc:	bne	139fc <__assert_fail@plt+0x2678>
   13be0:	b	13cd4 <__assert_fail@plt+0x2950>
   13be4:	ldr	r0, [sp, #32]
   13be8:	cmp	r0, #1
   13bec:	bne	13dd8 <__assert_fail@plt+0x2a54>
   13bf0:	str	lr, [sp, #84]	; 0x54
   13bf4:	bl	1124c <__ctype_b_loc@plt>
   13bf8:	ldr	r0, [r0]
   13bfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c00:	mov	r1, #1
   13c04:	add	r0, r0, r5, lsl #1
   13c08:	ldrb	r0, [r0, #1]
   13c0c:	ubfx	r4, r0, #6, #1
   13c10:	b	141d0 <__assert_fail@plt+0x2e4c>
   13c14:	cmp	r7, #0
   13c18:	ldrbeq	r0, [ip, #1]
   13c1c:	cmpeq	r0, #0
   13c20:	beq	13c3c <__assert_fail@plt+0x28b8>
   13c24:	mvn	lr, #0
   13c28:	mov	r8, #0
   13c2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c30:	cmp	r0, #0
   13c34:	bne	139fc <__assert_fail@plt+0x2678>
   13c38:	b	13cd4 <__assert_fail@plt+0x2950>
   13c3c:	mov	r1, #1
   13c40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c44:	cmp	r0, #2
   13c48:	bne	13c58 <__assert_fail@plt+0x28d4>
   13c4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c50:	tst	r0, #1
   13c54:	bne	144cc <__assert_fail@plt+0x3148>
   13c58:	mov	r4, r1
   13c5c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c60:	cmp	r0, #0
   13c64:	bne	139fc <__assert_fail@plt+0x2678>
   13c68:	b	13cd4 <__assert_fail@plt+0x2950>
   13c6c:	ldr	r1, [sp, #40]	; 0x28
   13c70:	mov	r8, #0
   13c74:	mov	r0, #92	; 0x5c
   13c78:	cmp	r1, #0
   13c7c:	beq	13cc0 <__assert_fail@plt+0x293c>
   13c80:	mov	r4, #0
   13c84:	cmp	r8, #0
   13c88:	bne	13a7c <__assert_fail@plt+0x26f8>
   13c8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13c90:	tst	r2, #1
   13c94:	beq	13d80 <__assert_fail@plt+0x29fc>
   13c98:	cmp	r9, sl
   13c9c:	movcc	r1, #39	; 0x27
   13ca0:	strbcc	r1, [r6, r9]
   13ca4:	add	r1, r9, #1
   13ca8:	add	r9, r9, #2
   13cac:	cmp	r1, sl
   13cb0:	movcc	r2, #39	; 0x27
   13cb4:	strbcc	r2, [r6, r1]
   13cb8:	mov	r2, #0
   13cbc:	b	13d80 <__assert_fail@plt+0x29fc>
   13cc0:	ldr	r1, [sp, #80]	; 0x50
   13cc4:	mov	r4, #0
   13cc8:	mov	r8, #0
   13ccc:	tst	r1, #1
   13cd0:	bne	13d10 <__assert_fail@plt+0x298c>
   13cd4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13cd8:	cmp	r0, #0
   13cdc:	mov	r0, r5
   13ce0:	beq	13d04 <__assert_fail@plt+0x2980>
   13ce4:	ldr	r1, [fp, #16]
   13ce8:	ubfx	r0, r5, #5, #3
   13cec:	mov	r2, #1
   13cf0:	ldr	r0, [r1, r0, lsl #2]
   13cf4:	and	r1, r5, #31
   13cf8:	tst	r0, r2, lsl r1
   13cfc:	mov	r0, r5
   13d00:	bne	13d10 <__assert_fail@plt+0x298c>
   13d04:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13d08:	cmp	r1, #0
   13d0c:	beq	14168 <__assert_fail@plt+0x2de4>
   13d10:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13d14:	tst	r1, #1
   13d18:	bne	144ac <__assert_fail@plt+0x3128>
   13d1c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d20:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13d24:	cmp	r1, #2
   13d28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13d2c:	movwne	r1, #1
   13d30:	orr	r1, r1, r2
   13d34:	tst	r1, #1
   13d38:	bne	13d70 <__assert_fail@plt+0x29ec>
   13d3c:	cmp	r9, sl
   13d40:	movcc	r1, #39	; 0x27
   13d44:	strbcc	r1, [r6, r9]
   13d48:	add	r1, r9, #1
   13d4c:	cmp	r1, sl
   13d50:	movcc	r2, #36	; 0x24
   13d54:	strbcc	r2, [r6, r1]
   13d58:	add	r1, r9, #2
   13d5c:	add	r9, r9, #3
   13d60:	cmp	r1, sl
   13d64:	movcc	r2, #39	; 0x27
   13d68:	strbcc	r2, [r6, r1]
   13d6c:	mov	r2, #1
   13d70:	cmp	r9, sl
   13d74:	movcc	r1, #92	; 0x5c
   13d78:	strbcc	r1, [r6, r9]
   13d7c:	add	r9, r9, #1
   13d80:	cmp	r9, sl
   13d84:	add	r7, r7, #1
   13d88:	strbcc	r0, [r6, r9]
   13d8c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13d90:	add	r9, r9, #1
   13d94:	and	r0, r0, r4
   13d98:	mov	r4, r0
   13d9c:	cmn	lr, #1
   13da0:	bne	13714 <__assert_fail@plt+0x2390>
   13da4:	b	13720 <__assert_fail@plt+0x239c>
   13da8:	ldr	r0, [sp, #28]
   13dac:	mov	r4, #0
   13db0:	mov	r8, #0
   13db4:	mov	r5, #0
   13db8:	cmp	r0, #0
   13dbc:	beq	13cd4 <__assert_fail@plt+0x2950>
   13dc0:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13dc4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13dc8:	add	r7, r7, #1
   13dcc:	cmn	lr, #1
   13dd0:	bne	13714 <__assert_fail@plt+0x2390>
   13dd4:	b	13720 <__assert_fail@plt+0x239c>
   13dd8:	mov	r0, #0
   13ddc:	cmn	lr, #1
   13de0:	str	r0, [fp, #-36]	; 0xffffffdc
   13de4:	str	r0, [fp, #-40]	; 0xffffffd8
   13de8:	bne	13dfc <__assert_fail@plt+0x2a78>
   13dec:	mov	r0, ip
   13df0:	bl	11270 <strlen@plt>
   13df4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13df8:	mov	lr, r0
   13dfc:	ldr	r0, [sp, #36]	; 0x24
   13e00:	str	sl, [sp, #56]	; 0x38
   13e04:	str	lr, [sp, #84]	; 0x54
   13e08:	cmp	r0, #0
   13e0c:	beq	14024 <__assert_fail@plt+0x2ca0>
   13e10:	add	r0, ip, r7
   13e14:	mov	r4, #1
   13e18:	mov	r6, #0
   13e1c:	sub	sl, fp, #40	; 0x28
   13e20:	str	r0, [sp, #20]
   13e24:	str	r6, [sp, #64]	; 0x40
   13e28:	add	r6, r6, r7
   13e2c:	sub	r0, fp, #44	; 0x2c
   13e30:	mov	r3, sl
   13e34:	add	r1, ip, r6
   13e38:	sub	r2, lr, r6
   13e3c:	bl	162e4 <__assert_fail@plt+0x4f60>
   13e40:	cmn	r0, #2
   13e44:	beq	14180 <__assert_fail@plt+0x2dfc>
   13e48:	ldr	sl, [sp, #56]	; 0x38
   13e4c:	cmn	r0, #1
   13e50:	beq	14174 <__assert_fail@plt+0x2df0>
   13e54:	cmp	r0, #0
   13e58:	beq	14178 <__assert_fail@plt+0x2df4>
   13e5c:	cmp	r0, #2
   13e60:	bcc	13f20 <__assert_fail@plt+0x2b9c>
   13e64:	ldr	r1, [sp, #64]	; 0x40
   13e68:	ldr	r2, [sp, #20]
   13e6c:	add	r1, r2, r1
   13e70:	mov	r2, #1
   13e74:	ldrb	r3, [r1, r2]
   13e78:	sub	r3, r3, #91	; 0x5b
   13e7c:	cmp	r3, #33	; 0x21
   13e80:	bhi	13f14 <__assert_fail@plt+0x2b90>
   13e84:	add	r6, pc, #0
   13e88:	ldr	pc, [r6, r3, lsl #2]
   13e8c:	ldrdeq	r4, [r1], -r8
   13e90:	ldrdeq	r4, [r1], -r8
   13e94:	andeq	r3, r1, r4, lsl pc
   13e98:	ldrdeq	r4, [r1], -r8
   13e9c:	andeq	r3, r1, r4, lsl pc
   13ea0:	ldrdeq	r4, [r1], -r8
   13ea4:	andeq	r3, r1, r4, lsl pc
   13ea8:	andeq	r3, r1, r4, lsl pc
   13eac:	andeq	r3, r1, r4, lsl pc
   13eb0:	andeq	r3, r1, r4, lsl pc
   13eb4:	andeq	r3, r1, r4, lsl pc
   13eb8:	andeq	r3, r1, r4, lsl pc
   13ebc:	andeq	r3, r1, r4, lsl pc
   13ec0:	andeq	r3, r1, r4, lsl pc
   13ec4:	andeq	r3, r1, r4, lsl pc
   13ec8:	andeq	r3, r1, r4, lsl pc
   13ecc:	andeq	r3, r1, r4, lsl pc
   13ed0:	andeq	r3, r1, r4, lsl pc
   13ed4:	andeq	r3, r1, r4, lsl pc
   13ed8:	andeq	r3, r1, r4, lsl pc
   13edc:	andeq	r3, r1, r4, lsl pc
   13ee0:	andeq	r3, r1, r4, lsl pc
   13ee4:	andeq	r3, r1, r4, lsl pc
   13ee8:	andeq	r3, r1, r4, lsl pc
   13eec:	andeq	r3, r1, r4, lsl pc
   13ef0:	andeq	r3, r1, r4, lsl pc
   13ef4:	andeq	r3, r1, r4, lsl pc
   13ef8:	andeq	r3, r1, r4, lsl pc
   13efc:	andeq	r3, r1, r4, lsl pc
   13f00:	andeq	r3, r1, r4, lsl pc
   13f04:	andeq	r3, r1, r4, lsl pc
   13f08:	andeq	r3, r1, r4, lsl pc
   13f0c:	andeq	r3, r1, r4, lsl pc
   13f10:	ldrdeq	r4, [r1], -r8
   13f14:	add	r2, r2, #1
   13f18:	cmp	r2, r0
   13f1c:	bcc	13e74 <__assert_fail@plt+0x2af0>
   13f20:	ldr	r6, [sp, #64]	; 0x40
   13f24:	add	r6, r0, r6
   13f28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f2c:	bl	11180 <iswprint@plt>
   13f30:	cmp	r0, #0
   13f34:	sub	sl, fp, #40	; 0x28
   13f38:	movwne	r0, #1
   13f3c:	and	r4, r4, r0
   13f40:	mov	r0, sl
   13f44:	bl	11114 <mbsinit@plt>
   13f48:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f4c:	ldr	lr, [sp, #84]	; 0x54
   13f50:	cmp	r0, #0
   13f54:	beq	13e24 <__assert_fail@plt+0x2aa0>
   13f58:	b	141c4 <__assert_fail@plt+0x2e40>
   13f5c:	ldr	r0, [sp, #24]
   13f60:	cmp	r0, #0
   13f64:	beq	1400c <__assert_fail@plt+0x2c88>
   13f68:	add	r0, r7, #2
   13f6c:	cmp	r0, lr
   13f70:	bcs	1400c <__assert_fail@plt+0x2c88>
   13f74:	add	r1, ip, r7
   13f78:	ldrb	r1, [r1, #1]
   13f7c:	cmp	r1, #63	; 0x3f
   13f80:	bne	1400c <__assert_fail@plt+0x2c88>
   13f84:	ldrb	r5, [ip, r0]
   13f88:	sub	r1, r5, #33	; 0x21
   13f8c:	cmp	r1, #29
   13f90:	bhi	1400c <__assert_fail@plt+0x2c88>
   13f94:	movw	r3, #20929	; 0x51c1
   13f98:	mov	r2, #1
   13f9c:	movt	r3, #14336	; 0x3800
   13fa0:	tst	r3, r2, lsl r1
   13fa4:	beq	1400c <__assert_fail@plt+0x2c88>
   13fa8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13fac:	tst	r1, #1
   13fb0:	bne	145fc <__assert_fail@plt+0x3278>
   13fb4:	cmp	r9, sl
   13fb8:	mov	r7, r0
   13fbc:	mov	r4, #0
   13fc0:	movcc	r1, #63	; 0x3f
   13fc4:	strbcc	r1, [r6, r9]
   13fc8:	add	r1, r9, #1
   13fcc:	cmp	r1, sl
   13fd0:	movcc	r2, #34	; 0x22
   13fd4:	strbcc	r2, [r6, r1]
   13fd8:	add	r1, r9, #2
   13fdc:	cmp	r1, sl
   13fe0:	movcc	r2, #34	; 0x22
   13fe4:	strbcc	r2, [r6, r1]
   13fe8:	add	r1, r9, #3
   13fec:	add	r9, r9, #4
   13ff0:	cmp	r1, sl
   13ff4:	movcc	r2, #63	; 0x3f
   13ff8:	strbcc	r2, [r6, r1]
   13ffc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14000:	cmp	r0, #0
   14004:	bne	139fc <__assert_fail@plt+0x2678>
   14008:	b	13cd4 <__assert_fail@plt+0x2950>
   1400c:	mov	r5, #63	; 0x3f
   14010:	mov	r4, #0
   14014:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14018:	cmp	r0, #0
   1401c:	bne	139fc <__assert_fail@plt+0x2678>
   14020:	b	13cd4 <__assert_fail@plt+0x2950>
   14024:	mov	r4, #1
   14028:	mov	r6, #0
   1402c:	sub	sl, fp, #40	; 0x28
   14030:	str	r6, [sp, #64]	; 0x40
   14034:	add	r6, r6, r7
   14038:	sub	r0, fp, #44	; 0x2c
   1403c:	mov	r3, sl
   14040:	add	r1, ip, r6
   14044:	sub	r2, lr, r6
   14048:	bl	162e4 <__assert_fail@plt+0x4f60>
   1404c:	cmn	r0, #2
   14050:	beq	14180 <__assert_fail@plt+0x2dfc>
   14054:	cmn	r0, #1
   14058:	beq	14174 <__assert_fail@plt+0x2df0>
   1405c:	ldr	r6, [sp, #64]	; 0x40
   14060:	cmp	r0, #0
   14064:	beq	141c0 <__assert_fail@plt+0x2e3c>
   14068:	add	r6, r0, r6
   1406c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14070:	bl	11180 <iswprint@plt>
   14074:	cmp	r0, #0
   14078:	sub	sl, fp, #40	; 0x28
   1407c:	movwne	r0, #1
   14080:	and	r4, r4, r0
   14084:	mov	r0, sl
   14088:	bl	11114 <mbsinit@plt>
   1408c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14090:	ldr	lr, [sp, #84]	; 0x54
   14094:	cmp	r0, #0
   14098:	beq	14030 <__assert_fail@plt+0x2cac>
   1409c:	b	141c4 <__assert_fail@plt+0x2e40>
   140a0:	cmp	r9, sl
   140a4:	mov	r2, #1
   140a8:	movcc	r0, #39	; 0x27
   140ac:	strbcc	r0, [r6, r9]
   140b0:	add	r0, r9, #1
   140b4:	cmp	r0, sl
   140b8:	movcc	r1, #36	; 0x24
   140bc:	strbcc	r1, [r6, r0]
   140c0:	add	r0, r9, #2
   140c4:	cmp	r0, sl
   140c8:	movcc	r1, #39	; 0x27
   140cc:	strbcc	r1, [r6, r0]
   140d0:	add	r0, r9, #3
   140d4:	cmp	r0, sl
   140d8:	add	r9, r0, #1
   140dc:	str	r2, [fp, #-48]	; 0xffffffd0
   140e0:	movcc	r1, #92	; 0x5c
   140e4:	strbcc	r1, [r6, r0]
   140e8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   140ec:	cmp	r1, #2
   140f0:	beq	14150 <__assert_fail@plt+0x2dcc>
   140f4:	add	r1, r7, #1
   140f8:	mov	r4, #0
   140fc:	mov	r8, #1
   14100:	mov	r5, #48	; 0x30
   14104:	cmp	r1, lr
   14108:	bcs	139f0 <__assert_fail@plt+0x266c>
   1410c:	ldrb	r1, [ip, r1]
   14110:	sub	r1, r1, #48	; 0x30
   14114:	uxtb	r1, r1
   14118:	cmp	r1, #9
   1411c:	bhi	139f0 <__assert_fail@plt+0x266c>
   14120:	cmp	r9, sl
   14124:	movcc	r1, #48	; 0x30
   14128:	strbcc	r1, [r6, r9]
   1412c:	add	r1, r0, #2
   14130:	add	r9, r0, #3
   14134:	cmp	r1, sl
   14138:	movcc	r2, #48	; 0x30
   1413c:	strbcc	r2, [r6, r1]
   14140:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14144:	cmp	r0, #0
   14148:	bne	139fc <__assert_fail@plt+0x2678>
   1414c:	b	13cd4 <__assert_fail@plt+0x2950>
   14150:	mov	r0, #48	; 0x30
   14154:	mov	r8, #1
   14158:	mov	r4, #0
   1415c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14160:	cmp	r1, #0
   14164:	bne	13d10 <__assert_fail@plt+0x298c>
   14168:	cmp	r8, #0
   1416c:	beq	13c8c <__assert_fail@plt+0x2908>
   14170:	b	13a7c <__assert_fail@plt+0x26f8>
   14174:	mov	r4, #0
   14178:	ldr	ip, [fp, #-84]	; 0xffffffac
   1417c:	b	141b8 <__assert_fail@plt+0x2e34>
   14180:	ldr	r1, [sp, #84]	; 0x54
   14184:	ldr	ip, [fp, #-84]	; 0xffffffac
   14188:	mov	r4, #0
   1418c:	cmp	r6, r1
   14190:	bcs	141b8 <__assert_fail@plt+0x2e34>
   14194:	ldrb	r0, [ip, r6]
   14198:	cmp	r0, #0
   1419c:	beq	141b8 <__assert_fail@plt+0x2e34>
   141a0:	ldr	r0, [sp, #64]	; 0x40
   141a4:	add	r0, r0, #1
   141a8:	add	r6, r0, r7
   141ac:	str	r0, [sp, #64]	; 0x40
   141b0:	cmp	r6, r1
   141b4:	bcc	14194 <__assert_fail@plt+0x2e10>
   141b8:	ldr	r6, [sp, #64]	; 0x40
   141bc:	b	141c4 <__assert_fail@plt+0x2e40>
   141c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   141c4:	mov	r1, r6
   141c8:	ldr	r6, [sp, #76]	; 0x4c
   141cc:	ldr	sl, [sp, #56]	; 0x38
   141d0:	ldr	r0, [sp, #44]	; 0x2c
   141d4:	cmp	r1, #1
   141d8:	orr	r2, r4, r0
   141dc:	mov	r0, r1
   141e0:	bhi	14200 <__assert_fail@plt+0x2e7c>
   141e4:	tst	r2, #1
   141e8:	beq	14200 <__assert_fail@plt+0x2e7c>
   141ec:	ldr	lr, [sp, #84]	; 0x54
   141f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141f4:	cmp	r0, #0
   141f8:	bne	139fc <__assert_fail@plt+0x2678>
   141fc:	b	13cd4 <__assert_fail@plt+0x2950>
   14200:	str	r2, [sp, #64]	; 0x40
   14204:	add	r0, r0, r7
   14208:	add	r1, r7, #1
   1420c:	ldr	lr, [sp, #84]	; 0x54
   14210:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14214:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14218:	mov	r3, #0
   1421c:	str	r0, [sp, #56]	; 0x38
   14220:	ldr	r0, [sp, #64]	; 0x40
   14224:	tst	r0, #1
   14228:	bne	14310 <__assert_fail@plt+0x2f8c>
   1422c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14230:	tst	r0, #1
   14234:	bne	144b0 <__assert_fail@plt+0x312c>
   14238:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1423c:	cmp	r7, #2
   14240:	movwne	r3, #1
   14244:	orr	r3, r3, r2
   14248:	tst	r3, #1
   1424c:	bne	14284 <__assert_fail@plt+0x2f00>
   14250:	cmp	r9, sl
   14254:	add	r3, r9, #1
   14258:	movcc	r2, #39	; 0x27
   1425c:	strbcc	r2, [r6, r9]
   14260:	cmp	r3, sl
   14264:	movcc	r2, #36	; 0x24
   14268:	strbcc	r2, [r6, r3]
   1426c:	add	r3, r9, #2
   14270:	add	r9, r9, #3
   14274:	cmp	r3, sl
   14278:	movcc	r2, #39	; 0x27
   1427c:	strbcc	r2, [r6, r3]
   14280:	mov	r2, #1
   14284:	cmp	r9, sl
   14288:	mov	r0, r2
   1428c:	movcc	r3, #92	; 0x5c
   14290:	strbcc	r3, [r6, r9]
   14294:	add	r3, r9, #1
   14298:	cmp	r3, sl
   1429c:	andcc	r7, r5, #192	; 0xc0
   142a0:	movcc	r2, #48	; 0x30
   142a4:	orrcc	r7, r2, r7, lsr #6
   142a8:	strbcc	r7, [r6, r3]
   142ac:	add	r3, r9, #2
   142b0:	add	r9, r9, #3
   142b4:	cmp	r3, sl
   142b8:	lsrcc	r7, r5, #3
   142bc:	movcc	r2, #6
   142c0:	bficc	r7, r2, #3, #29
   142c4:	mov	r2, #6
   142c8:	strbcc	r7, [r6, r3]
   142cc:	bfi	r5, r2, #3, #29
   142d0:	mov	r3, #1
   142d4:	mov	r2, r0
   142d8:	ldr	r0, [sp, #56]	; 0x38
   142dc:	and	r8, r3, #1
   142e0:	cmp	r0, r1
   142e4:	bhi	14344 <__assert_fail@plt+0x2fc0>
   142e8:	b	14384 <__assert_fail@plt+0x3000>
   142ec:	cmp	r9, sl
   142f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   142f4:	strbcc	r5, [r6, r9]
   142f8:	add	r9, r9, #1
   142fc:	ldrb	r5, [ip, r1]
   14300:	add	r1, r1, #1
   14304:	ldr	r0, [sp, #64]	; 0x40
   14308:	tst	r0, #1
   1430c:	beq	1422c <__assert_fail@plt+0x2ea8>
   14310:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14314:	tst	r7, #1
   14318:	beq	1432c <__assert_fail@plt+0x2fa8>
   1431c:	cmp	r9, sl
   14320:	movcc	r7, #92	; 0x5c
   14324:	strbcc	r7, [r6, r9]
   14328:	add	r9, r9, #1
   1432c:	mov	r7, #0
   14330:	str	r7, [fp, #-56]	; 0xffffffc8
   14334:	ldr	r0, [sp, #56]	; 0x38
   14338:	and	r8, r3, #1
   1433c:	cmp	r0, r1
   14340:	bls	14384 <__assert_fail@plt+0x3000>
   14344:	cmp	r8, #0
   14348:	mvn	r7, r2
   1434c:	movwne	r8, #1
   14350:	orr	r7, r7, r8
   14354:	tst	r7, #1
   14358:	bne	142ec <__assert_fail@plt+0x2f68>
   1435c:	cmp	r9, sl
   14360:	movcc	r7, #39	; 0x27
   14364:	strbcc	r7, [r6, r9]
   14368:	add	r7, r9, #1
   1436c:	add	r9, r9, #2
   14370:	cmp	r7, sl
   14374:	movcc	r2, #39	; 0x27
   14378:	strbcc	r2, [r6, r7]
   1437c:	mov	r2, #0
   14380:	b	142ec <__assert_fail@plt+0x2f68>
   14384:	cmp	r8, #0
   14388:	sub	r7, r1, #1
   1438c:	mov	r0, r5
   14390:	str	r2, [fp, #-48]	; 0xffffffd0
   14394:	movwne	r8, #1
   14398:	cmp	r8, #0
   1439c:	beq	13c8c <__assert_fail@plt+0x2908>
   143a0:	b	13a7c <__assert_fail@plt+0x26f8>
   143a4:	mov	lr, r7
   143a8:	b	143b0 <__assert_fail@plt+0x302c>
   143ac:	mvn	lr, #0
   143b0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   143b4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   143b8:	eor	r0, r7, #2
   143bc:	orr	r0, r0, r9
   143c0:	clz	r0, r0
   143c4:	lsr	r0, r0, #5
   143c8:	tst	r1, r0
   143cc:	bne	144cc <__assert_fail@plt+0x3148>
   143d0:	mov	r0, r1
   143d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   143d8:	cmp	r7, #2
   143dc:	movwne	r1, #1
   143e0:	orr	r0, r0, r1
   143e4:	tst	r0, #1
   143e8:	ldreq	r0, [sp, #52]	; 0x34
   143ec:	streq	lr, [sp, #84]	; 0x54
   143f0:	eoreq	r0, r0, #1
   143f4:	tsteq	r0, #1
   143f8:	bne	14590 <__assert_fail@plt+0x320c>
   143fc:	tst	r4, #1
   14400:	bne	1454c <__assert_fail@plt+0x31c8>
   14404:	ldr	r6, [sp, #48]	; 0x30
   14408:	mov	r8, #0
   1440c:	cmp	r6, #0
   14410:	beq	14588 <__assert_fail@plt+0x3204>
   14414:	ldr	r0, [sp, #80]	; 0x50
   14418:	mov	r1, #0
   1441c:	cmp	sl, #0
   14420:	mov	r4, #0
   14424:	str	r1, [fp, #-72]	; 0xffffffb8
   14428:	beq	1331c <__assert_fail@plt+0x1f98>
   1442c:	b	14590 <__assert_fail@plt+0x320c>
   14430:	ldrb	r1, [r0, #3]
   14434:	cmp	r1, #56	; 0x38
   14438:	ldrbeq	r1, [r0, #4]
   1443c:	cmpeq	r1, #48	; 0x30
   14440:	bne	13514 <__assert_fail@plt+0x2190>
   14444:	ldrb	r1, [r0, #5]
   14448:	cmp	r1, #51	; 0x33
   1444c:	ldrbeq	r1, [r0, #6]
   14450:	cmpeq	r1, #48	; 0x30
   14454:	bne	13514 <__assert_fail@plt+0x2190>
   14458:	ldrb	r0, [r0, #7]
   1445c:	cmp	r0, #0
   14460:	movw	r0, #28784	; 0x7070
   14464:	movt	r0, #1
   14468:	str	r0, [sp, #68]	; 0x44
   1446c:	bne	13514 <__assert_fail@plt+0x2190>
   14470:	b	13530 <__assert_fail@plt+0x21ac>
   14474:	ldrb	r1, [r0, #4]
   14478:	cmp	r1, #48	; 0x30
   1447c:	ldrbeq	r1, [r0, #5]
   14480:	cmpeq	r1, #51	; 0x33
   14484:	bne	135f8 <__assert_fail@plt+0x2274>
   14488:	ldrb	r1, [r0, #6]
   1448c:	cmp	r1, #48	; 0x30
   14490:	ldrbeq	r0, [r0, #7]
   14494:	cmpeq	r0, #0
   14498:	bne	135f8 <__assert_fail@plt+0x2274>
   1449c:	movw	r0, #28788	; 0x7074
   144a0:	movt	r0, #1
   144a4:	str	r0, [sp, #72]	; 0x48
   144a8:	b	13618 <__assert_fail@plt+0x2294>
   144ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   144b0:	ldr	r2, [sp, #80]	; 0x50
   144b4:	b	144ec <__assert_fail@plt+0x3168>
   144b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   144bc:	mov	r2, #1
   144c0:	mov	lr, r4
   144c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   144c8:	b	144ec <__assert_fail@plt+0x3168>
   144cc:	ldr	r2, [sp, #80]	; 0x50
   144d0:	mov	r7, #2
   144d4:	b	144ec <__assert_fail@plt+0x3168>
   144d8:	ldr	r6, [sp, #76]	; 0x4c
   144dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   144e0:	ldr	lr, [sp, #84]	; 0x54
   144e4:	ldr	r2, [sp, #80]	; 0x50
   144e8:	mov	r7, #2
   144ec:	mov	r0, #0
   144f0:	ldr	r1, [fp, #12]
   144f4:	tst	r2, #1
   144f8:	mov	r2, r7
   144fc:	mov	r3, lr
   14500:	str	r0, [sp, #8]
   14504:	ldr	r0, [sp, #68]	; 0x44
   14508:	movwne	r2, #4
   1450c:	cmp	r7, #2
   14510:	movne	r2, r7
   14514:	str	r2, [sp]
   14518:	mov	r2, ip
   1451c:	bic	r1, r1, #2
   14520:	str	r0, [sp, #12]
   14524:	ldr	r0, [sp, #72]	; 0x48
   14528:	str	r1, [sp, #4]
   1452c:	mov	r1, sl
   14530:	str	r0, [sp, #16]
   14534:	mov	r0, r6
   14538:	bl	132a0 <__assert_fail@plt+0x1f1c>
   1453c:	mov	r9, r0
   14540:	mov	r0, r9
   14544:	sub	sp, fp, #28
   14548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1454c:	mov	r0, #5
   14550:	ldr	r1, [sp, #48]	; 0x30
   14554:	ldr	r2, [fp, #-84]	; 0xffffffac
   14558:	ldr	r3, [sp, #84]	; 0x54
   1455c:	str	r0, [sp]
   14560:	ldr	r0, [fp, #12]
   14564:	str	r0, [sp, #4]
   14568:	ldr	r0, [fp, #16]
   1456c:	str	r0, [sp, #8]
   14570:	ldr	r0, [sp, #68]	; 0x44
   14574:	str	r0, [sp, #12]
   14578:	ldr	r0, [sp, #72]	; 0x48
   1457c:	str	r0, [sp, #16]
   14580:	ldr	r0, [sp, #76]	; 0x4c
   14584:	b	14538 <__assert_fail@plt+0x31b4>
   14588:	mov	r0, #0
   1458c:	str	r0, [fp, #-72]	; 0xffffffb8
   14590:	ldr	r1, [sp, #92]	; 0x5c
   14594:	cmp	r1, #0
   14598:	beq	145d8 <__assert_fail@plt+0x3254>
   1459c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145a0:	ldr	r2, [sp, #76]	; 0x4c
   145a4:	tst	r0, #1
   145a8:	bne	145dc <__assert_fail@plt+0x3258>
   145ac:	ldrb	r0, [r1]
   145b0:	cmp	r0, #0
   145b4:	beq	145dc <__assert_fail@plt+0x3258>
   145b8:	add	r1, r1, #1
   145bc:	cmp	r9, sl
   145c0:	strbcc	r0, [r2, r9]
   145c4:	add	r9, r9, #1
   145c8:	ldrb	r0, [r1], #1
   145cc:	cmp	r0, #0
   145d0:	bne	145bc <__assert_fail@plt+0x3238>
   145d4:	b	145dc <__assert_fail@plt+0x3258>
   145d8:	ldr	r2, [sp, #76]	; 0x4c
   145dc:	cmp	r9, sl
   145e0:	movcc	r0, #0
   145e4:	strbcc	r0, [r2, r9]
   145e8:	mov	r0, r9
   145ec:	sub	sp, fp, #28
   145f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f4:	mov	r2, #1
   145f8:	b	144c4 <__assert_fail@plt+0x3140>
   145fc:	ldr	r2, [sp, #80]	; 0x50
   14600:	mov	r7, #5
   14604:	b	144ec <__assert_fail@plt+0x3168>
   14608:	bl	1136c <abort@plt>
   1460c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14610:	add	fp, sp, #28
   14614:	sub	sp, sp, #28
   14618:	movw	r5, #33288	; 0x8208
   1461c:	cmp	r2, #0
   14620:	mov	r4, r1
   14624:	mov	r7, r0
   14628:	str	r0, [sp, #20]
   1462c:	movt	r5, #2
   14630:	movne	r5, r2
   14634:	bl	11288 <__errno_location@plt>
   14638:	mov	sl, r0
   1463c:	ldm	r5, {r0, r1}
   14640:	ldr	r2, [r5, #40]	; 0x28
   14644:	ldr	r3, [r5, #44]	; 0x2c
   14648:	add	r9, r5, #8
   1464c:	ldr	r6, [sl]
   14650:	orr	r8, r1, #1
   14654:	mov	r1, #0
   14658:	str	r6, [sp, #24]
   1465c:	stm	sp, {r0, r8, r9}
   14660:	str	r2, [sp, #12]
   14664:	str	r3, [sp, #16]
   14668:	mov	r0, #0
   1466c:	mov	r2, r7
   14670:	mov	r3, r4
   14674:	mov	r6, r4
   14678:	bl	132a0 <__assert_fail@plt+0x1f1c>
   1467c:	add	r7, r0, #1
   14680:	mov	r0, r7
   14684:	bl	15a34 <__assert_fail@plt+0x46b0>
   14688:	mov	r4, r0
   1468c:	ldr	r0, [r5]
   14690:	ldr	r2, [r5, #44]	; 0x2c
   14694:	ldr	r1, [r5, #40]	; 0x28
   14698:	mov	r3, r6
   1469c:	stm	sp, {r0, r8, r9}
   146a0:	str	r2, [sp, #16]
   146a4:	str	r1, [sp, #12]
   146a8:	mov	r0, r4
   146ac:	mov	r1, r7
   146b0:	ldr	r2, [sp, #20]
   146b4:	bl	132a0 <__assert_fail@plt+0x1f1c>
   146b8:	ldr	r0, [sp, #24]
   146bc:	str	r0, [sl]
   146c0:	mov	r0, r4
   146c4:	sub	sp, fp, #28
   146c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d0:	add	fp, sp, #28
   146d4:	sub	sp, sp, #36	; 0x24
   146d8:	movw	r8, #33288	; 0x8208
   146dc:	cmp	r3, #0
   146e0:	mov	r4, r2
   146e4:	str	r2, [sp, #24]
   146e8:	mov	r5, r1
   146ec:	mov	r6, r0
   146f0:	str	r0, [sp, #20]
   146f4:	movt	r8, #2
   146f8:	movne	r8, r3
   146fc:	bl	11288 <__errno_location@plt>
   14700:	str	r0, [sp, #28]
   14704:	cmp	r4, #0
   14708:	add	sl, r8, #8
   1470c:	ldm	r8, {r3, r9}
   14710:	ldr	r7, [r0]
   14714:	ldr	r1, [r8, #40]	; 0x28
   14718:	ldr	r2, [r8, #44]	; 0x2c
   1471c:	mov	r0, #0
   14720:	orreq	r9, r9, #1
   14724:	str	r7, [sp, #32]
   14728:	mov	r7, r5
   1472c:	stm	sp, {r3, r9, sl}
   14730:	str	r1, [sp, #12]
   14734:	str	r2, [sp, #16]
   14738:	mov	r1, #0
   1473c:	mov	r2, r6
   14740:	mov	r3, r5
   14744:	bl	132a0 <__assert_fail@plt+0x1f1c>
   14748:	add	r4, r0, #1
   1474c:	mov	r5, r0
   14750:	mov	r0, r4
   14754:	bl	15a34 <__assert_fail@plt+0x46b0>
   14758:	mov	r6, r0
   1475c:	ldr	r0, [r8]
   14760:	ldr	r2, [r8, #44]	; 0x2c
   14764:	ldr	r1, [r8, #40]	; 0x28
   14768:	mov	r3, r7
   1476c:	stm	sp, {r0, r9, sl}
   14770:	str	r2, [sp, #16]
   14774:	str	r1, [sp, #12]
   14778:	mov	r0, r6
   1477c:	mov	r1, r4
   14780:	ldr	r2, [sp, #20]
   14784:	bl	132a0 <__assert_fail@plt+0x1f1c>
   14788:	ldr	r0, [sp, #24]
   1478c:	ldr	r1, [sp, #32]
   14790:	ldr	r2, [sp, #28]
   14794:	cmp	r0, #0
   14798:	str	r1, [r2]
   1479c:	strne	r5, [r0]
   147a0:	mov	r0, r6
   147a4:	sub	sp, fp, #28
   147a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ac:	push	{r4, r5, r6, r7, fp, lr}
   147b0:	add	fp, sp, #16
   147b4:	movw	r4, #33112	; 0x8158
   147b8:	movt	r4, #2
   147bc:	ldrd	r6, [r4]
   147c0:	cmp	r7, #2
   147c4:	blt	147f0 <__assert_fail@plt+0x346c>
   147c8:	add	r5, r6, #12
   147cc:	mov	r7, #0
   147d0:	ldr	r0, [r5, r7, lsl #3]
   147d4:	bl	12f18 <__assert_fail@plt+0x1b94>
   147d8:	ldr	r1, [r4, #4]
   147dc:	add	r2, r7, #2
   147e0:	add	r0, r7, #1
   147e4:	mov	r7, r0
   147e8:	cmp	r2, r1
   147ec:	blt	147d0 <__assert_fail@plt+0x344c>
   147f0:	ldr	r0, [r6, #4]
   147f4:	movw	r5, #33336	; 0x8238
   147f8:	movt	r5, #2
   147fc:	cmp	r0, r5
   14800:	beq	14814 <__assert_fail@plt+0x3490>
   14804:	bl	12f18 <__assert_fail@plt+0x1b94>
   14808:	mov	r0, #256	; 0x100
   1480c:	str	r0, [r4, #8]
   14810:	str	r5, [r4, #12]
   14814:	add	r5, r4, #8
   14818:	cmp	r6, r5
   1481c:	beq	1482c <__assert_fail@plt+0x34a8>
   14820:	mov	r0, r6
   14824:	bl	12f18 <__assert_fail@plt+0x1b94>
   14828:	str	r5, [r4]
   1482c:	mov	r0, #1
   14830:	str	r0, [r4, #4]
   14834:	pop	{r4, r5, r6, r7, fp, pc}
   14838:	movw	r3, #33288	; 0x8208
   1483c:	mvn	r2, #0
   14840:	movt	r3, #2
   14844:	b	14848 <__assert_fail@plt+0x34c4>
   14848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1484c:	add	fp, sp, #28
   14850:	sub	sp, sp, #44	; 0x2c
   14854:	mov	r7, r3
   14858:	str	r2, [sp, #36]	; 0x24
   1485c:	str	r1, [sp, #32]
   14860:	mov	r5, r0
   14864:	bl	11288 <__errno_location@plt>
   14868:	cmp	r5, #0
   1486c:	blt	149d0 <__assert_fail@plt+0x364c>
   14870:	cmn	r5, #-2147483647	; 0x80000001
   14874:	beq	149d0 <__assert_fail@plt+0x364c>
   14878:	movw	r8, #33112	; 0x8158
   1487c:	mov	r4, r0
   14880:	movt	r8, #2
   14884:	ldr	r6, [r8]
   14888:	ldr	r1, [r8, #4]
   1488c:	ldr	r0, [r0]
   14890:	str	r4, [sp, #28]
   14894:	cmp	r1, r5
   14898:	str	r0, [sp, #24]
   1489c:	ble	148a8 <__assert_fail@plt+0x3524>
   148a0:	mov	sl, r6
   148a4:	b	1490c <__assert_fail@plt+0x3588>
   148a8:	mov	r0, #8
   148ac:	add	r9, r8, #8
   148b0:	add	r2, r5, #1
   148b4:	str	r1, [fp, #-32]	; 0xffffffe0
   148b8:	mvn	r3, #-2147483648	; 0x80000000
   148bc:	str	r0, [sp]
   148c0:	subs	r0, r6, r9
   148c4:	sub	r2, r2, r1
   148c8:	sub	r1, fp, #32
   148cc:	movne	r0, r6
   148d0:	bl	15c34 <__assert_fail@plt+0x48b0>
   148d4:	str	r0, [r8]
   148d8:	cmp	r6, r9
   148dc:	mov	sl, r0
   148e0:	ldrdeq	r0, [r8, #8]
   148e4:	stmeq	sl, {r0, r1}
   148e8:	ldr	r1, [r8, #4]
   148ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   148f0:	add	r0, sl, r1, lsl #3
   148f4:	sub	r1, r2, r1
   148f8:	lsl	r2, r1, #3
   148fc:	mov	r1, #0
   14900:	bl	112ac <memset@plt>
   14904:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14908:	str	r0, [r8, #4]
   1490c:	mov	r9, sl
   14910:	ldr	r6, [r9, r5, lsl #3]!
   14914:	ldr	r4, [r9, #4]!
   14918:	ldm	r7, {r0, r1}
   1491c:	ldr	r2, [r7, #40]	; 0x28
   14920:	ldr	r3, [r7, #44]	; 0x2c
   14924:	orr	r8, r1, #1
   14928:	add	r1, r7, #8
   1492c:	stm	sp, {r0, r8}
   14930:	add	r0, sp, #8
   14934:	str	r1, [sp, #20]
   14938:	stm	r0, {r1, r2, r3}
   1493c:	mov	r0, r4
   14940:	mov	r1, r6
   14944:	ldr	r2, [sp, #32]
   14948:	ldr	r3, [sp, #36]	; 0x24
   1494c:	bl	132a0 <__assert_fail@plt+0x1f1c>
   14950:	cmp	r6, r0
   14954:	bhi	149b8 <__assert_fail@plt+0x3634>
   14958:	add	r6, r0, #1
   1495c:	movw	r0, #33336	; 0x8238
   14960:	movt	r0, #2
   14964:	str	r6, [sl, r5, lsl #3]
   14968:	cmp	r4, r0
   1496c:	beq	14978 <__assert_fail@plt+0x35f4>
   14970:	mov	r0, r4
   14974:	bl	12f18 <__assert_fail@plt+0x1b94>
   14978:	mov	r0, r6
   1497c:	bl	15a34 <__assert_fail@plt+0x46b0>
   14980:	str	r0, [r9]
   14984:	mov	r4, r0
   14988:	add	r3, sp, #8
   1498c:	ldr	r0, [r7]
   14990:	ldr	r1, [r7, #40]	; 0x28
   14994:	ldr	r2, [r7, #44]	; 0x2c
   14998:	stm	sp, {r0, r8}
   1499c:	ldr	r0, [sp, #20]
   149a0:	stm	r3, {r0, r1, r2}
   149a4:	mov	r0, r4
   149a8:	mov	r1, r6
   149ac:	ldr	r2, [sp, #32]
   149b0:	ldr	r3, [sp, #36]	; 0x24
   149b4:	bl	132a0 <__assert_fail@plt+0x1f1c>
   149b8:	ldr	r1, [sp, #24]
   149bc:	ldr	r0, [sp, #28]
   149c0:	str	r1, [r0]
   149c4:	mov	r0, r4
   149c8:	sub	sp, fp, #28
   149cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d0:	bl	1136c <abort@plt>
   149d4:	movw	r3, #33288	; 0x8208
   149d8:	movt	r3, #2
   149dc:	b	14848 <__assert_fail@plt+0x34c4>
   149e0:	movw	r3, #33288	; 0x8208
   149e4:	mov	r1, r0
   149e8:	mov	r0, #0
   149ec:	mvn	r2, #0
   149f0:	movt	r3, #2
   149f4:	b	14848 <__assert_fail@plt+0x34c4>
   149f8:	movw	r3, #33288	; 0x8208
   149fc:	mov	r2, r1
   14a00:	mov	r1, r0
   14a04:	mov	r0, #0
   14a08:	movt	r3, #2
   14a0c:	b	14848 <__assert_fail@plt+0x34c4>
   14a10:	push	{fp, lr}
   14a14:	mov	fp, sp
   14a18:	sub	sp, sp, #48	; 0x30
   14a1c:	vmov.i32	q8, #0	; 0x00000000
   14a20:	mov	ip, #32
   14a24:	mov	r3, sp
   14a28:	mov	lr, r2
   14a2c:	cmp	r1, #10
   14a30:	add	r2, r3, #16
   14a34:	vst1.64	{d16-d17}, [r3], ip
   14a38:	vst1.64	{d16-d17}, [r3]
   14a3c:	vst1.64	{d16-d17}, [r2]
   14a40:	beq	14a60 <__assert_fail@plt+0x36dc>
   14a44:	str	r1, [sp]
   14a48:	mov	r3, sp
   14a4c:	mov	r1, lr
   14a50:	mvn	r2, #0
   14a54:	bl	14848 <__assert_fail@plt+0x34c4>
   14a58:	mov	sp, fp
   14a5c:	pop	{fp, pc}
   14a60:	bl	1136c <abort@plt>
   14a64:	push	{r4, sl, fp, lr}
   14a68:	add	fp, sp, #8
   14a6c:	sub	sp, sp, #48	; 0x30
   14a70:	mov	ip, r3
   14a74:	mov	r3, sp
   14a78:	vmov.i32	q8, #0	; 0x00000000
   14a7c:	mov	lr, #32
   14a80:	cmp	r1, #10
   14a84:	add	r4, r3, #16
   14a88:	vst1.64	{d16-d17}, [r3], lr
   14a8c:	vst1.64	{d16-d17}, [r3]
   14a90:	vst1.64	{d16-d17}, [r4]
   14a94:	beq	14ab4 <__assert_fail@plt+0x3730>
   14a98:	str	r1, [sp]
   14a9c:	mov	r1, r2
   14aa0:	mov	r3, sp
   14aa4:	mov	r2, ip
   14aa8:	bl	14848 <__assert_fail@plt+0x34c4>
   14aac:	sub	sp, fp, #8
   14ab0:	pop	{r4, sl, fp, pc}
   14ab4:	bl	1136c <abort@plt>
   14ab8:	push	{fp, lr}
   14abc:	mov	fp, sp
   14ac0:	sub	sp, sp, #48	; 0x30
   14ac4:	mov	r3, sp
   14ac8:	vmov.i32	q8, #0	; 0x00000000
   14acc:	mov	ip, #32
   14ad0:	cmp	r0, #10
   14ad4:	add	r2, r3, #16
   14ad8:	vst1.64	{d16-d17}, [r3], ip
   14adc:	vst1.64	{d16-d17}, [r3]
   14ae0:	vst1.64	{d16-d17}, [r2]
   14ae4:	beq	14b04 <__assert_fail@plt+0x3780>
   14ae8:	str	r0, [sp]
   14aec:	mov	r3, sp
   14af0:	mov	r0, #0
   14af4:	mvn	r2, #0
   14af8:	bl	14848 <__assert_fail@plt+0x34c4>
   14afc:	mov	sp, fp
   14b00:	pop	{fp, pc}
   14b04:	bl	1136c <abort@plt>
   14b08:	push	{fp, lr}
   14b0c:	mov	fp, sp
   14b10:	sub	sp, sp, #48	; 0x30
   14b14:	mov	r3, sp
   14b18:	vmov.i32	q8, #0	; 0x00000000
   14b1c:	mov	ip, #32
   14b20:	cmp	r0, #10
   14b24:	add	lr, r3, #16
   14b28:	vst1.64	{d16-d17}, [r3], ip
   14b2c:	vst1.64	{d16-d17}, [r3]
   14b30:	vst1.64	{d16-d17}, [lr]
   14b34:	beq	14b50 <__assert_fail@plt+0x37cc>
   14b38:	str	r0, [sp]
   14b3c:	mov	r3, sp
   14b40:	mov	r0, #0
   14b44:	bl	14848 <__assert_fail@plt+0x34c4>
   14b48:	mov	sp, fp
   14b4c:	pop	{fp, pc}
   14b50:	bl	1136c <abort@plt>
   14b54:	push	{r4, sl, fp, lr}
   14b58:	add	fp, sp, #8
   14b5c:	sub	sp, sp, #48	; 0x30
   14b60:	mov	lr, r0
   14b64:	movw	r0, #33288	; 0x8208
   14b68:	mov	r3, #32
   14b6c:	mov	ip, r1
   14b70:	mov	r4, #1
   14b74:	movt	r0, #2
   14b78:	add	r1, r0, #16
   14b7c:	vld1.64	{d16-d17}, [r0], r3
   14b80:	mov	r3, sp
   14b84:	vld1.64	{d18-d19}, [r1]
   14b88:	add	r1, r3, #16
   14b8c:	vld1.64	{d20-d21}, [r0]
   14b90:	add	r0, r3, #32
   14b94:	vst1.64	{d18-d19}, [r1]
   14b98:	mov	r1, r3
   14b9c:	vst1.64	{d20-d21}, [r0]
   14ba0:	mov	r0, #28
   14ba4:	and	r0, r0, r2, lsr #3
   14ba8:	and	r2, r2, #31
   14bac:	vst1.64	{d16-d17}, [r1], r0
   14bb0:	ldr	r0, [r1, #8]
   14bb4:	bic	r4, r4, r0, lsr r2
   14bb8:	eor	r0, r0, r4, lsl r2
   14bbc:	mov	r2, ip
   14bc0:	str	r0, [r1, #8]
   14bc4:	mov	r0, #0
   14bc8:	mov	r1, lr
   14bcc:	bl	14848 <__assert_fail@plt+0x34c4>
   14bd0:	sub	sp, fp, #8
   14bd4:	pop	{r4, sl, fp, pc}
   14bd8:	push	{fp, lr}
   14bdc:	mov	fp, sp
   14be0:	sub	sp, sp, #48	; 0x30
   14be4:	mov	ip, r0
   14be8:	movw	r0, #33288	; 0x8208
   14bec:	mov	r3, #32
   14bf0:	movt	r0, #2
   14bf4:	add	r2, r0, #16
   14bf8:	vld1.64	{d16-d17}, [r0], r3
   14bfc:	mov	r3, sp
   14c00:	vld1.64	{d18-d19}, [r2]
   14c04:	add	r2, r3, #16
   14c08:	vld1.64	{d20-d21}, [r0]
   14c0c:	add	r0, r3, #32
   14c10:	vst1.64	{d18-d19}, [r2]
   14c14:	mov	r2, r3
   14c18:	vst1.64	{d20-d21}, [r0]
   14c1c:	mov	r0, #28
   14c20:	and	r0, r0, r1, lsr #3
   14c24:	and	r1, r1, #31
   14c28:	vst1.64	{d16-d17}, [r2], r0
   14c2c:	mov	r0, #1
   14c30:	ldr	lr, [r2, #8]
   14c34:	bic	r0, r0, lr, lsr r1
   14c38:	eor	r0, lr, r0, lsl r1
   14c3c:	mov	r1, ip
   14c40:	str	r0, [r2, #8]
   14c44:	mov	r0, #0
   14c48:	mvn	r2, #0
   14c4c:	bl	14848 <__assert_fail@plt+0x34c4>
   14c50:	mov	sp, fp
   14c54:	pop	{fp, pc}
   14c58:	push	{fp, lr}
   14c5c:	mov	fp, sp
   14c60:	sub	sp, sp, #48	; 0x30
   14c64:	movw	r2, #33288	; 0x8208
   14c68:	mov	r3, #32
   14c6c:	mov	r1, r0
   14c70:	movt	r2, #2
   14c74:	add	r0, r2, #16
   14c78:	vld1.64	{d16-d17}, [r2], r3
   14c7c:	mov	r3, sp
   14c80:	vld1.64	{d18-d19}, [r0]
   14c84:	add	r0, r3, #16
   14c88:	vld1.64	{d20-d21}, [r2]
   14c8c:	mov	r2, r3
   14c90:	vst1.64	{d18-d19}, [r0]
   14c94:	add	r0, r3, #32
   14c98:	vst1.64	{d20-d21}, [r0]
   14c9c:	mov	r0, #12
   14ca0:	vst1.64	{d16-d17}, [r2], r0
   14ca4:	ldr	r0, [r2]
   14ca8:	orr	r0, r0, #67108864	; 0x4000000
   14cac:	str	r0, [r2]
   14cb0:	mov	r0, #0
   14cb4:	mvn	r2, #0
   14cb8:	bl	14848 <__assert_fail@plt+0x34c4>
   14cbc:	mov	sp, fp
   14cc0:	pop	{fp, pc}
   14cc4:	push	{fp, lr}
   14cc8:	mov	fp, sp
   14ccc:	sub	sp, sp, #48	; 0x30
   14cd0:	mov	ip, r1
   14cd4:	mov	r1, r0
   14cd8:	movw	r0, #33288	; 0x8208
   14cdc:	mov	r3, #32
   14ce0:	movt	r0, #2
   14ce4:	add	r2, r0, #16
   14ce8:	vld1.64	{d16-d17}, [r0], r3
   14cec:	mov	r3, sp
   14cf0:	vld1.64	{d18-d19}, [r2]
   14cf4:	add	r2, r3, #16
   14cf8:	vld1.64	{d20-d21}, [r0]
   14cfc:	add	r0, r3, #32
   14d00:	vst1.64	{d18-d19}, [r2]
   14d04:	mov	r2, r3
   14d08:	vst1.64	{d20-d21}, [r0]
   14d0c:	mov	r0, #12
   14d10:	vst1.64	{d16-d17}, [r2], r0
   14d14:	ldr	r0, [r2]
   14d18:	orr	r0, r0, #67108864	; 0x4000000
   14d1c:	str	r0, [r2]
   14d20:	mov	r0, #0
   14d24:	mov	r2, ip
   14d28:	bl	14848 <__assert_fail@plt+0x34c4>
   14d2c:	mov	sp, fp
   14d30:	pop	{fp, pc}
   14d34:	push	{r4, sl, fp, lr}
   14d38:	add	fp, sp, #8
   14d3c:	sub	sp, sp, #96	; 0x60
   14d40:	mov	ip, r2
   14d44:	mov	r2, sp
   14d48:	vmov.i32	q8, #0	; 0x00000000
   14d4c:	mov	r4, #28
   14d50:	cmp	r1, #10
   14d54:	mov	r3, r2
   14d58:	add	lr, r2, #16
   14d5c:	vst1.64	{d16-d17}, [r3], r4
   14d60:	vst1.64	{d16-d17}, [lr]
   14d64:	vst1.32	{d16-d17}, [r3]
   14d68:	beq	14db8 <__assert_fail@plt+0x3a34>
   14d6c:	vld1.64	{d16-d17}, [r2], r4
   14d70:	vld1.64	{d18-d19}, [lr]
   14d74:	add	r3, sp, #48	; 0x30
   14d78:	add	r4, r3, #4
   14d7c:	vld1.32	{d20-d21}, [r2]
   14d80:	add	r2, r3, #20
   14d84:	vst1.32	{d16-d17}, [r4]
   14d88:	vst1.32	{d18-d19}, [r2]
   14d8c:	add	r2, r3, #32
   14d90:	vst1.32	{d20-d21}, [r2]
   14d94:	str	r1, [sp, #48]	; 0x30
   14d98:	mvn	r2, #0
   14d9c:	ldr	r1, [sp, #60]	; 0x3c
   14da0:	orr	r1, r1, #67108864	; 0x4000000
   14da4:	str	r1, [sp, #60]	; 0x3c
   14da8:	mov	r1, ip
   14dac:	bl	14848 <__assert_fail@plt+0x34c4>
   14db0:	sub	sp, fp, #8
   14db4:	pop	{r4, sl, fp, pc}
   14db8:	bl	1136c <abort@plt>
   14dbc:	push	{r4, r5, fp, lr}
   14dc0:	add	fp, sp, #8
   14dc4:	sub	sp, sp, #48	; 0x30
   14dc8:	mov	ip, r3
   14dcc:	movw	r3, #33288	; 0x8208
   14dd0:	mov	lr, #32
   14dd4:	cmp	r1, #0
   14dd8:	mov	r5, sp
   14ddc:	movt	r3, #2
   14de0:	cmpne	r2, #0
   14de4:	add	r4, r3, #16
   14de8:	vld1.64	{d16-d17}, [r3], lr
   14dec:	vld1.64	{d18-d19}, [r4]
   14df0:	add	r4, r5, #16
   14df4:	vld1.64	{d20-d21}, [r3]
   14df8:	vst1.64	{d16-d17}, [r5], lr
   14dfc:	mov	r3, #10
   14e00:	vst1.64	{d18-d19}, [r4]
   14e04:	vst1.64	{d20-d21}, [r5]
   14e08:	str	r3, [sp]
   14e0c:	bne	14e14 <__assert_fail@plt+0x3a90>
   14e10:	bl	1136c <abort@plt>
   14e14:	str	r2, [sp, #44]	; 0x2c
   14e18:	str	r1, [sp, #40]	; 0x28
   14e1c:	mov	r3, sp
   14e20:	mov	r1, ip
   14e24:	mvn	r2, #0
   14e28:	bl	14848 <__assert_fail@plt+0x34c4>
   14e2c:	sub	sp, fp, #8
   14e30:	pop	{r4, r5, fp, pc}
   14e34:	push	{r4, r5, fp, lr}
   14e38:	add	fp, sp, #8
   14e3c:	sub	sp, sp, #48	; 0x30
   14e40:	mov	lr, r3
   14e44:	movw	r3, #33288	; 0x8208
   14e48:	mov	ip, #32
   14e4c:	cmp	r1, #0
   14e50:	mov	r5, sp
   14e54:	movt	r3, #2
   14e58:	cmpne	r2, #0
   14e5c:	add	r4, r3, #16
   14e60:	vld1.64	{d16-d17}, [r3], ip
   14e64:	vld1.64	{d18-d19}, [r4]
   14e68:	add	r4, r5, #16
   14e6c:	vld1.64	{d20-d21}, [r3]
   14e70:	vst1.64	{d16-d17}, [r5], ip
   14e74:	mov	r3, #10
   14e78:	vst1.64	{d18-d19}, [r4]
   14e7c:	vst1.64	{d20-d21}, [r5]
   14e80:	str	r3, [sp]
   14e84:	bne	14e8c <__assert_fail@plt+0x3b08>
   14e88:	bl	1136c <abort@plt>
   14e8c:	ldr	ip, [fp, #8]
   14e90:	str	r2, [sp, #44]	; 0x2c
   14e94:	str	r1, [sp, #40]	; 0x28
   14e98:	mov	r3, sp
   14e9c:	mov	r1, lr
   14ea0:	mov	r2, ip
   14ea4:	bl	14848 <__assert_fail@plt+0x34c4>
   14ea8:	sub	sp, fp, #8
   14eac:	pop	{r4, r5, fp, pc}
   14eb0:	push	{r4, sl, fp, lr}
   14eb4:	add	fp, sp, #8
   14eb8:	sub	sp, sp, #48	; 0x30
   14ebc:	mov	ip, r2
   14ec0:	movw	r2, #33288	; 0x8208
   14ec4:	mov	lr, #32
   14ec8:	cmp	r0, #0
   14ecc:	mov	r4, sp
   14ed0:	movt	r2, #2
   14ed4:	cmpne	r1, #0
   14ed8:	add	r3, r2, #16
   14edc:	vld1.64	{d16-d17}, [r2], lr
   14ee0:	vld1.64	{d18-d19}, [r3]
   14ee4:	add	r3, r4, #16
   14ee8:	vld1.64	{d20-d21}, [r2]
   14eec:	vst1.64	{d16-d17}, [r4], lr
   14ef0:	mov	r2, #10
   14ef4:	vst1.64	{d18-d19}, [r3]
   14ef8:	vst1.64	{d20-d21}, [r4]
   14efc:	str	r2, [sp]
   14f00:	bne	14f08 <__assert_fail@plt+0x3b84>
   14f04:	bl	1136c <abort@plt>
   14f08:	str	r1, [sp, #44]	; 0x2c
   14f0c:	str	r0, [sp, #40]	; 0x28
   14f10:	mov	r3, sp
   14f14:	mov	r0, #0
   14f18:	mov	r1, ip
   14f1c:	mvn	r2, #0
   14f20:	bl	14848 <__assert_fail@plt+0x34c4>
   14f24:	sub	sp, fp, #8
   14f28:	pop	{r4, sl, fp, pc}
   14f2c:	push	{r4, r5, fp, lr}
   14f30:	add	fp, sp, #8
   14f34:	sub	sp, sp, #48	; 0x30
   14f38:	mov	lr, r2
   14f3c:	movw	r2, #33288	; 0x8208
   14f40:	mov	ip, r3
   14f44:	mov	r3, #32
   14f48:	cmp	r0, #0
   14f4c:	mov	r5, sp
   14f50:	movt	r2, #2
   14f54:	cmpne	r1, #0
   14f58:	add	r4, r2, #16
   14f5c:	vld1.64	{d16-d17}, [r2], r3
   14f60:	vld1.64	{d18-d19}, [r4]
   14f64:	add	r4, r5, #16
   14f68:	vld1.64	{d20-d21}, [r2]
   14f6c:	vst1.64	{d16-d17}, [r5], r3
   14f70:	mov	r2, #10
   14f74:	vst1.64	{d18-d19}, [r4]
   14f78:	vst1.64	{d20-d21}, [r5]
   14f7c:	str	r2, [sp]
   14f80:	bne	14f88 <__assert_fail@plt+0x3c04>
   14f84:	bl	1136c <abort@plt>
   14f88:	str	r1, [sp, #44]	; 0x2c
   14f8c:	str	r0, [sp, #40]	; 0x28
   14f90:	mov	r3, sp
   14f94:	mov	r0, #0
   14f98:	mov	r1, lr
   14f9c:	mov	r2, ip
   14fa0:	bl	14848 <__assert_fail@plt+0x34c4>
   14fa4:	sub	sp, fp, #8
   14fa8:	pop	{r4, r5, fp, pc}
   14fac:	movw	r3, #33064	; 0x8128
   14fb0:	movt	r3, #2
   14fb4:	b	14848 <__assert_fail@plt+0x34c4>
   14fb8:	movw	r3, #33064	; 0x8128
   14fbc:	mov	r2, r1
   14fc0:	mov	r1, r0
   14fc4:	mov	r0, #0
   14fc8:	movt	r3, #2
   14fcc:	b	14848 <__assert_fail@plt+0x34c4>
   14fd0:	movw	r3, #33064	; 0x8128
   14fd4:	mvn	r2, #0
   14fd8:	movt	r3, #2
   14fdc:	b	14848 <__assert_fail@plt+0x34c4>
   14fe0:	movw	r3, #33064	; 0x8128
   14fe4:	mov	r1, r0
   14fe8:	mov	r0, #0
   14fec:	mvn	r2, #0
   14ff0:	movt	r3, #2
   14ff4:	b	14848 <__assert_fail@plt+0x34c4>
   14ff8:	push	{r4, r5, fp, lr}
   14ffc:	add	fp, sp, #8
   15000:	mov	r5, r0
   15004:	mov	r0, #33	; 0x21
   15008:	bl	15a04 <__assert_fail@plt+0x4680>
   1500c:	add	r1, r5, #44	; 0x2c
   15010:	mov	r2, #32
   15014:	mov	r4, r0
   15018:	bl	112b8 <strncpy@plt>
   1501c:	mov	r5, #0
   15020:	mov	r0, r4
   15024:	strb	r5, [r4, #32]
   15028:	bl	11270 <strlen@plt>
   1502c:	cmp	r0, #1
   15030:	blt	15058 <__assert_fail@plt+0x3cd4>
   15034:	add	r1, r4, r0
   15038:	mov	r0, r1
   1503c:	ldrb	r2, [r0, #-1]!
   15040:	cmp	r2, #32
   15044:	bne	15058 <__assert_fail@plt+0x3cd4>
   15048:	strb	r5, [r1, #-1]
   1504c:	cmp	r4, r0
   15050:	mov	r1, r0
   15054:	bcc	1503c <__assert_fail@plt+0x3cb8>
   15058:	mov	r0, r4
   1505c:	pop	{r4, r5, fp, pc}
   15060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15064:	add	fp, sp, #28
   15068:	sub	sp, sp, #12
   1506c:	mov	r6, #0
   15070:	mov	r5, r3
   15074:	str	r2, [sp, #4]
   15078:	mov	sl, r1
   1507c:	str	r6, [sp, #8]
   15080:	bl	110d8 <utmpxname@plt>
   15084:	bl	1115c <setutxent@plt>
   15088:	bl	11378 <getutxent@plt>
   1508c:	cmp	r0, #0
   15090:	beq	15158 <__assert_fail@plt+0x3dd4>
   15094:	mov	r7, r0
   15098:	and	r4, r5, #1
   1509c:	tst	r5, #2
   150a0:	bne	15160 <__assert_fail@plt+0x3ddc>
   150a4:	mov	r5, #0
   150a8:	mov	r9, #384	; 0x180
   150ac:	add	r8, sp, #8
   150b0:	mov	r6, #0
   150b4:	b	150f4 <__assert_fail@plt+0x3d70>
   150b8:	ldrh	r0, [r7]
   150bc:	cmp	r0, #7
   150c0:	bne	15104 <__assert_fail@plt+0x3d80>
   150c4:	ldr	r0, [r7, #4]
   150c8:	cmp	r0, #1
   150cc:	blt	15104 <__assert_fail@plt+0x3d80>
   150d0:	mov	r1, #0
   150d4:	bl	11240 <kill@plt>
   150d8:	cmn	r0, #1
   150dc:	bgt	15104 <__assert_fail@plt+0x3d80>
   150e0:	bl	11288 <__errno_location@plt>
   150e4:	ldr	r0, [r0]
   150e8:	cmp	r0, #3
   150ec:	bne	15104 <__assert_fail@plt+0x3d80>
   150f0:	b	15144 <__assert_fail@plt+0x3dc0>
   150f4:	ldrb	r0, [r7, #44]	; 0x2c
   150f8:	cmp	r0, #0
   150fc:	cmpne	r4, #0
   15100:	bne	150b8 <__assert_fail@plt+0x3d34>
   15104:	ldr	r0, [sp, #8]
   15108:	cmp	r5, r0
   1510c:	bne	1512c <__assert_fail@plt+0x3da8>
   15110:	mov	r0, r6
   15114:	mov	r1, r8
   15118:	mov	r2, #1
   1511c:	mvn	r3, #0
   15120:	str	r9, [sp]
   15124:	bl	15c34 <__assert_fail@plt+0x48b0>
   15128:	mov	r6, r0
   1512c:	add	r0, r5, r5, lsl #1
   15130:	mov	r1, r7
   15134:	mov	r2, #384	; 0x180
   15138:	add	r0, r6, r0, lsl #7
   1513c:	bl	11108 <memcpy@plt>
   15140:	add	r5, r5, #1
   15144:	bl	11378 <getutxent@plt>
   15148:	mov	r7, r0
   1514c:	cmp	r0, #0
   15150:	bne	150f4 <__assert_fail@plt+0x3d70>
   15154:	b	15284 <__assert_fail@plt+0x3f00>
   15158:	mov	r5, #0
   1515c:	b	15284 <__assert_fail@plt+0x3f00>
   15160:	mov	r5, #0
   15164:	cmp	r4, #0
   15168:	bne	151e4 <__assert_fail@plt+0x3e60>
   1516c:	mov	r8, #384	; 0x180
   15170:	add	r4, sp, #8
   15174:	mov	r6, #0
   15178:	ldrb	r0, [r7, #44]	; 0x2c
   1517c:	cmp	r0, #0
   15180:	beq	151d0 <__assert_fail@plt+0x3e4c>
   15184:	ldrh	r0, [r7]
   15188:	cmp	r0, #7
   1518c:	bne	151d0 <__assert_fail@plt+0x3e4c>
   15190:	ldr	r0, [sp, #8]
   15194:	cmp	r5, r0
   15198:	bne	151b8 <__assert_fail@plt+0x3e34>
   1519c:	mov	r0, r6
   151a0:	mov	r1, r4
   151a4:	mov	r2, #1
   151a8:	mvn	r3, #0
   151ac:	str	r8, [sp]
   151b0:	bl	15c34 <__assert_fail@plt+0x48b0>
   151b4:	mov	r6, r0
   151b8:	add	r0, r5, r5, lsl #1
   151bc:	mov	r1, r7
   151c0:	mov	r2, #384	; 0x180
   151c4:	add	r0, r6, r0, lsl #7
   151c8:	bl	11108 <memcpy@plt>
   151cc:	add	r5, r5, #1
   151d0:	bl	11378 <getutxent@plt>
   151d4:	mov	r7, r0
   151d8:	cmp	r0, #0
   151dc:	bne	15178 <__assert_fail@plt+0x3df4>
   151e0:	b	15284 <__assert_fail@plt+0x3f00>
   151e4:	mov	r4, #384	; 0x180
   151e8:	add	r8, sp, #8
   151ec:	mov	r6, #0
   151f0:	ldrb	r0, [r7, #44]	; 0x2c
   151f4:	cmp	r0, #0
   151f8:	beq	15274 <__assert_fail@plt+0x3ef0>
   151fc:	ldrh	r0, [r7]
   15200:	cmp	r0, #7
   15204:	bne	15274 <__assert_fail@plt+0x3ef0>
   15208:	ldr	r0, [r7, #4]
   1520c:	cmp	r0, #1
   15210:	blt	15234 <__assert_fail@plt+0x3eb0>
   15214:	mov	r1, #0
   15218:	bl	11240 <kill@plt>
   1521c:	cmn	r0, #1
   15220:	bgt	15234 <__assert_fail@plt+0x3eb0>
   15224:	bl	11288 <__errno_location@plt>
   15228:	ldr	r0, [r0]
   1522c:	cmp	r0, #3
   15230:	beq	15274 <__assert_fail@plt+0x3ef0>
   15234:	ldr	r0, [sp, #8]
   15238:	cmp	r5, r0
   1523c:	bne	1525c <__assert_fail@plt+0x3ed8>
   15240:	mov	r0, r6
   15244:	mov	r1, r8
   15248:	mov	r2, #1
   1524c:	mvn	r3, #0
   15250:	str	r4, [sp]
   15254:	bl	15c34 <__assert_fail@plt+0x48b0>
   15258:	mov	r6, r0
   1525c:	add	r0, r5, r5, lsl #1
   15260:	mov	r1, r7
   15264:	mov	r2, #384	; 0x180
   15268:	add	r0, r6, r0, lsl #7
   1526c:	bl	11108 <memcpy@plt>
   15270:	add	r5, r5, #1
   15274:	bl	11378 <getutxent@plt>
   15278:	mov	r7, r0
   1527c:	cmp	r0, #0
   15280:	bne	151f0 <__assert_fail@plt+0x3e6c>
   15284:	bl	11300 <endutxent@plt>
   15288:	ldr	r0, [sp, #4]
   1528c:	str	r5, [sl]
   15290:	str	r6, [r0]
   15294:	mov	r0, #0
   15298:	sub	sp, fp, #28
   1529c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152a0:	push	{r4, r5, r6, r7, fp, lr}
   152a4:	add	fp, sp, #16
   152a8:	mov	r4, r1
   152ac:	mov	r1, #0
   152b0:	mov	r6, r2
   152b4:	bl	1130c <setlocale@plt>
   152b8:	cmp	r0, #0
   152bc:	beq	152ec <__assert_fail@plt+0x3f68>
   152c0:	mov	r7, r0
   152c4:	bl	11270 <strlen@plt>
   152c8:	cmp	r0, r6
   152cc:	bcs	1530c <__assert_fail@plt+0x3f88>
   152d0:	add	r2, r0, #1
   152d4:	mov	r0, r4
   152d8:	mov	r1, r7
   152dc:	bl	11108 <memcpy@plt>
   152e0:	mov	r5, #0
   152e4:	mov	r0, r5
   152e8:	pop	{r4, r5, r6, r7, fp, pc}
   152ec:	cmp	r6, #0
   152f0:	mov	r5, #22
   152f4:	movne	r0, #0
   152f8:	strbne	r0, [r4]
   152fc:	movne	r0, r5
   15300:	popne	{r4, r5, r6, r7, fp, pc}
   15304:	mov	r0, r5
   15308:	pop	{r4, r5, r6, r7, fp, pc}
   1530c:	mov	r5, #34	; 0x22
   15310:	cmp	r6, #0
   15314:	beq	15334 <__assert_fail@plt+0x3fb0>
   15318:	sub	r6, r6, #1
   1531c:	mov	r0, r4
   15320:	mov	r1, r7
   15324:	mov	r2, r6
   15328:	bl	11108 <memcpy@plt>
   1532c:	mov	r0, #0
   15330:	strb	r0, [r4, r6]
   15334:	mov	r0, r5
   15338:	pop	{r4, r5, r6, r7, fp, pc}
   1533c:	mov	r1, #0
   15340:	b	1130c <setlocale@plt>
   15344:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15348:	add	fp, sp, #24
   1534c:	sub	sp, sp, #32
   15350:	ldr	r6, [fp, #12]
   15354:	ldr	r7, [fp, #8]
   15358:	mov	r4, r2
   1535c:	mov	r8, r0
   15360:	cmp	r1, #0
   15364:	beq	1538c <__assert_fail@plt+0x4008>
   15368:	movw	r2, #28876	; 0x70cc
   1536c:	mov	r5, r1
   15370:	str	r3, [sp, #4]
   15374:	str	r4, [sp]
   15378:	mov	r0, r8
   1537c:	mov	r1, #1
   15380:	movt	r2, #1
   15384:	mov	r3, r5
   15388:	b	153a4 <__assert_fail@plt+0x4020>
   1538c:	movw	r2, #28888	; 0x70d8
   15390:	str	r3, [sp]
   15394:	mov	r0, r8
   15398:	mov	r1, #1
   1539c:	mov	r3, r4
   153a0:	movt	r2, #1
   153a4:	bl	112dc <__fprintf_chk@plt>
   153a8:	movw	r1, #28895	; 0x70df
   153ac:	mov	r0, #0
   153b0:	mov	r2, #5
   153b4:	movt	r1, #1
   153b8:	bl	11144 <dcgettext@plt>
   153bc:	movw	r2, #29613	; 0x73ad
   153c0:	mov	r3, r0
   153c4:	movw	r0, #2022	; 0x7e6
   153c8:	mov	r1, #1
   153cc:	str	r0, [sp]
   153d0:	movt	r2, #1
   153d4:	mov	r0, r8
   153d8:	bl	112dc <__fprintf_chk@plt>
   153dc:	movw	r4, #27802	; 0x6c9a
   153e0:	mov	r1, r8
   153e4:	movt	r4, #1
   153e8:	mov	r0, r4
   153ec:	bl	110a8 <fputs_unlocked@plt>
   153f0:	movw	r1, #28899	; 0x70e3
   153f4:	mov	r0, #0
   153f8:	mov	r2, #5
   153fc:	movt	r1, #1
   15400:	bl	11144 <dcgettext@plt>
   15404:	movw	r3, #29070	; 0x718e
   15408:	mov	r2, r0
   1540c:	mov	r0, r8
   15410:	mov	r1, #1
   15414:	movt	r3, #1
   15418:	bl	112dc <__fprintf_chk@plt>
   1541c:	mov	r0, r4
   15420:	mov	r1, r8
   15424:	bl	110a8 <fputs_unlocked@plt>
   15428:	cmp	r6, #9
   1542c:	bhi	15468 <__assert_fail@plt+0x40e4>
   15430:	add	r0, pc, #0
   15434:	ldr	pc, [r0, r6, lsl #2]
   15438:	andeq	r5, r1, r0, ror #8
   1543c:	andeq	r5, r1, r4, ror r4
   15440:	andeq	r5, r1, r4, lsr #9
   15444:	andeq	r5, r1, ip, asr #9
   15448:	strdeq	r5, [r1], -r4
   1544c:	andeq	r5, r1, ip, lsl r5
   15450:	andeq	r5, r1, r4, asr #10
   15454:	andeq	r5, r1, ip, ror r5
   15458:	andeq	r5, r1, r4, lsr #12
   1545c:	andeq	r5, r1, ip, asr #11
   15460:	sub	sp, fp, #24
   15464:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15468:	movw	r1, #29423	; 0x72ef
   1546c:	movt	r1, #1
   15470:	b	155d4 <__assert_fail@plt+0x4250>
   15474:	movw	r1, #29104	; 0x71b0
   15478:	mov	r0, #0
   1547c:	mov	r2, #5
   15480:	movt	r1, #1
   15484:	bl	11144 <dcgettext@plt>
   15488:	ldr	r3, [r7]
   1548c:	mov	r2, r0
   15490:	mov	r0, r8
   15494:	mov	r1, #1
   15498:	sub	sp, fp, #24
   1549c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   154a0:	b	112dc <__fprintf_chk@plt>
   154a4:	movw	r1, #29120	; 0x71c0
   154a8:	mov	r0, #0
   154ac:	mov	r2, #5
   154b0:	movt	r1, #1
   154b4:	bl	11144 <dcgettext@plt>
   154b8:	mov	r2, r0
   154bc:	ldr	r3, [r7]
   154c0:	ldr	r0, [r7, #4]
   154c4:	str	r0, [sp]
   154c8:	b	155b8 <__assert_fail@plt+0x4234>
   154cc:	movw	r1, #29143	; 0x71d7
   154d0:	mov	r0, #0
   154d4:	mov	r2, #5
   154d8:	movt	r1, #1
   154dc:	bl	11144 <dcgettext@plt>
   154e0:	ldr	r3, [r7]
   154e4:	mov	r2, r0
   154e8:	ldmib	r7, {r0, r1}
   154ec:	stm	sp, {r0, r1}
   154f0:	b	155b8 <__assert_fail@plt+0x4234>
   154f4:	movw	r1, #29171	; 0x71f3
   154f8:	mov	r0, #0
   154fc:	mov	r2, #5
   15500:	movt	r1, #1
   15504:	bl	11144 <dcgettext@plt>
   15508:	ldr	r3, [r7]
   1550c:	mov	r2, r0
   15510:	ldmib	r7, {r0, r1, r7}
   15514:	stm	sp, {r0, r1, r7}
   15518:	b	155b8 <__assert_fail@plt+0x4234>
   1551c:	movw	r1, #29203	; 0x7213
   15520:	mov	r0, #0
   15524:	mov	r2, #5
   15528:	movt	r1, #1
   1552c:	bl	11144 <dcgettext@plt>
   15530:	ldr	r3, [r7]
   15534:	mov	r2, r0
   15538:	ldmib	r7, {r0, r1, r6, r7}
   1553c:	stm	sp, {r0, r1, r6, r7}
   15540:	b	155b8 <__assert_fail@plt+0x4234>
   15544:	movw	r1, #29239	; 0x7237
   15548:	mov	r0, #0
   1554c:	mov	r2, #5
   15550:	movt	r1, #1
   15554:	bl	11144 <dcgettext@plt>
   15558:	ldr	r3, [r7]
   1555c:	mov	r2, r0
   15560:	ldmib	r7, {r0, r1, r6}
   15564:	ldr	r5, [r7, #16]
   15568:	ldr	r7, [r7, #20]
   1556c:	stm	sp, {r0, r1, r6}
   15570:	str	r5, [sp, #12]
   15574:	str	r7, [sp, #16]
   15578:	b	155b8 <__assert_fail@plt+0x4234>
   1557c:	movw	r1, #29279	; 0x725f
   15580:	mov	r0, #0
   15584:	mov	r2, #5
   15588:	movt	r1, #1
   1558c:	bl	11144 <dcgettext@plt>
   15590:	ldr	r3, [r7]
   15594:	mov	r2, r0
   15598:	ldmib	r7, {r0, r1, r6}
   1559c:	ldr	r5, [r7, #16]
   155a0:	ldr	r4, [r7, #20]
   155a4:	ldr	r7, [r7, #24]
   155a8:	stm	sp, {r0, r1, r6}
   155ac:	str	r5, [sp, #12]
   155b0:	str	r4, [sp, #16]
   155b4:	str	r7, [sp, #20]
   155b8:	mov	r0, r8
   155bc:	mov	r1, #1
   155c0:	bl	112dc <__fprintf_chk@plt>
   155c4:	sub	sp, fp, #24
   155c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155cc:	movw	r1, #29371	; 0x72bb
   155d0:	movt	r1, #1
   155d4:	mov	r0, #0
   155d8:	mov	r2, #5
   155dc:	bl	11144 <dcgettext@plt>
   155e0:	mov	ip, r0
   155e4:	ldr	r3, [r7]
   155e8:	ldr	r0, [r7, #4]
   155ec:	ldr	r1, [r7, #8]
   155f0:	ldr	r6, [r7, #12]
   155f4:	ldr	r5, [r7, #16]
   155f8:	ldr	r4, [r7, #20]
   155fc:	ldr	r2, [r7, #24]
   15600:	ldr	lr, [r7, #28]
   15604:	ldr	r7, [r7, #32]
   15608:	stm	sp, {r0, r1, r6}
   1560c:	str	r5, [sp, #12]
   15610:	str	r4, [sp, #16]
   15614:	str	r2, [sp, #20]
   15618:	str	lr, [sp, #24]
   1561c:	str	r7, [sp, #28]
   15620:	b	15668 <__assert_fail@plt+0x42e4>
   15624:	movw	r1, #29323	; 0x728b
   15628:	mov	r0, #0
   1562c:	mov	r2, #5
   15630:	movt	r1, #1
   15634:	bl	11144 <dcgettext@plt>
   15638:	mov	ip, r0
   1563c:	ldr	r3, [r7]
   15640:	ldmib	r7, {r0, r1, r6}
   15644:	ldr	r5, [r7, #16]
   15648:	ldr	r4, [r7, #20]
   1564c:	ldr	r2, [r7, #24]
   15650:	ldr	r7, [r7, #28]
   15654:	stm	sp, {r0, r1, r6}
   15658:	str	r5, [sp, #12]
   1565c:	str	r4, [sp, #16]
   15660:	str	r2, [sp, #20]
   15664:	str	r7, [sp, #24]
   15668:	mov	r0, r8
   1566c:	mov	r1, #1
   15670:	mov	r2, ip
   15674:	bl	112dc <__fprintf_chk@plt>
   15678:	sub	sp, fp, #24
   1567c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15680:	push	{r4, sl, fp, lr}
   15684:	add	fp, sp, #8
   15688:	sub	sp, sp, #8
   1568c:	ldr	ip, [fp, #8]
   15690:	mov	lr, #0
   15694:	ldr	r4, [ip, lr, lsl #2]
   15698:	add	lr, lr, #1
   1569c:	cmp	r4, #0
   156a0:	bne	15694 <__assert_fail@plt+0x4310>
   156a4:	sub	r4, lr, #1
   156a8:	str	ip, [sp]
   156ac:	str	r4, [sp, #4]
   156b0:	bl	15344 <__assert_fail@plt+0x3fc0>
   156b4:	sub	sp, fp, #8
   156b8:	pop	{r4, sl, fp, pc}
   156bc:	push	{fp, lr}
   156c0:	mov	fp, sp
   156c4:	sub	sp, sp, #48	; 0x30
   156c8:	ldr	ip, [fp, #8]
   156cc:	ldr	lr, [ip]
   156d0:	cmp	lr, #0
   156d4:	str	lr, [sp, #8]
   156d8:	beq	15774 <__assert_fail@plt+0x43f0>
   156dc:	ldr	lr, [ip, #4]
   156e0:	cmp	lr, #0
   156e4:	str	lr, [sp, #12]
   156e8:	beq	1577c <__assert_fail@plt+0x43f8>
   156ec:	ldr	lr, [ip, #8]
   156f0:	cmp	lr, #0
   156f4:	str	lr, [sp, #16]
   156f8:	beq	15784 <__assert_fail@plt+0x4400>
   156fc:	ldr	lr, [ip, #12]
   15700:	cmp	lr, #0
   15704:	str	lr, [sp, #20]
   15708:	beq	1578c <__assert_fail@plt+0x4408>
   1570c:	ldr	lr, [ip, #16]
   15710:	cmp	lr, #0
   15714:	str	lr, [sp, #24]
   15718:	beq	15794 <__assert_fail@plt+0x4410>
   1571c:	ldr	lr, [ip, #20]
   15720:	cmp	lr, #0
   15724:	str	lr, [sp, #28]
   15728:	beq	1579c <__assert_fail@plt+0x4418>
   1572c:	ldr	lr, [ip, #24]
   15730:	cmp	lr, #0
   15734:	str	lr, [sp, #32]
   15738:	beq	157a4 <__assert_fail@plt+0x4420>
   1573c:	ldr	lr, [ip, #28]
   15740:	cmp	lr, #0
   15744:	str	lr, [sp, #36]	; 0x24
   15748:	beq	157ac <__assert_fail@plt+0x4428>
   1574c:	ldr	lr, [ip, #32]
   15750:	cmp	lr, #0
   15754:	str	lr, [sp, #40]	; 0x28
   15758:	beq	157b4 <__assert_fail@plt+0x4430>
   1575c:	ldr	lr, [ip, #36]	; 0x24
   15760:	mov	ip, #10
   15764:	cmp	lr, #0
   15768:	str	lr, [sp, #44]	; 0x2c
   1576c:	movweq	ip, #9
   15770:	b	157b8 <__assert_fail@plt+0x4434>
   15774:	mov	ip, #0
   15778:	b	157b8 <__assert_fail@plt+0x4434>
   1577c:	mov	ip, #1
   15780:	b	157b8 <__assert_fail@plt+0x4434>
   15784:	mov	ip, #2
   15788:	b	157b8 <__assert_fail@plt+0x4434>
   1578c:	mov	ip, #3
   15790:	b	157b8 <__assert_fail@plt+0x4434>
   15794:	mov	ip, #4
   15798:	b	157b8 <__assert_fail@plt+0x4434>
   1579c:	mov	ip, #5
   157a0:	b	157b8 <__assert_fail@plt+0x4434>
   157a4:	mov	ip, #6
   157a8:	b	157b8 <__assert_fail@plt+0x4434>
   157ac:	mov	ip, #7
   157b0:	b	157b8 <__assert_fail@plt+0x4434>
   157b4:	mov	ip, #8
   157b8:	add	lr, sp, #8
   157bc:	str	ip, [sp, #4]
   157c0:	str	lr, [sp]
   157c4:	bl	15344 <__assert_fail@plt+0x3fc0>
   157c8:	mov	sp, fp
   157cc:	pop	{fp, pc}
   157d0:	push	{fp, lr}
   157d4:	mov	fp, sp
   157d8:	sub	sp, sp, #56	; 0x38
   157dc:	add	ip, fp, #8
   157e0:	str	ip, [sp, #12]
   157e4:	ldr	lr, [fp, #8]
   157e8:	cmp	lr, #0
   157ec:	str	lr, [sp, #16]
   157f0:	beq	1588c <__assert_fail@plt+0x4508>
   157f4:	ldr	lr, [ip, #4]
   157f8:	cmp	lr, #0
   157fc:	str	lr, [sp, #20]
   15800:	beq	15894 <__assert_fail@plt+0x4510>
   15804:	ldr	lr, [ip, #8]
   15808:	cmp	lr, #0
   1580c:	str	lr, [sp, #24]
   15810:	beq	1589c <__assert_fail@plt+0x4518>
   15814:	ldr	lr, [ip, #12]
   15818:	cmp	lr, #0
   1581c:	str	lr, [sp, #28]
   15820:	beq	158a4 <__assert_fail@plt+0x4520>
   15824:	ldr	lr, [ip, #16]
   15828:	cmp	lr, #0
   1582c:	str	lr, [sp, #32]
   15830:	beq	158ac <__assert_fail@plt+0x4528>
   15834:	ldr	lr, [ip, #20]
   15838:	cmp	lr, #0
   1583c:	str	lr, [sp, #36]	; 0x24
   15840:	beq	158b4 <__assert_fail@plt+0x4530>
   15844:	ldr	lr, [ip, #24]
   15848:	cmp	lr, #0
   1584c:	str	lr, [sp, #40]	; 0x28
   15850:	beq	158bc <__assert_fail@plt+0x4538>
   15854:	ldr	lr, [ip, #28]
   15858:	cmp	lr, #0
   1585c:	str	lr, [sp, #44]	; 0x2c
   15860:	beq	158c4 <__assert_fail@plt+0x4540>
   15864:	ldr	lr, [ip, #32]
   15868:	cmp	lr, #0
   1586c:	str	lr, [sp, #48]	; 0x30
   15870:	beq	158cc <__assert_fail@plt+0x4548>
   15874:	ldr	lr, [ip, #36]	; 0x24
   15878:	mov	ip, #10
   1587c:	cmp	lr, #0
   15880:	str	lr, [sp, #52]	; 0x34
   15884:	movweq	ip, #9
   15888:	b	158d0 <__assert_fail@plt+0x454c>
   1588c:	mov	ip, #0
   15890:	b	158d0 <__assert_fail@plt+0x454c>
   15894:	mov	ip, #1
   15898:	b	158d0 <__assert_fail@plt+0x454c>
   1589c:	mov	ip, #2
   158a0:	b	158d0 <__assert_fail@plt+0x454c>
   158a4:	mov	ip, #3
   158a8:	b	158d0 <__assert_fail@plt+0x454c>
   158ac:	mov	ip, #4
   158b0:	b	158d0 <__assert_fail@plt+0x454c>
   158b4:	mov	ip, #5
   158b8:	b	158d0 <__assert_fail@plt+0x454c>
   158bc:	mov	ip, #6
   158c0:	b	158d0 <__assert_fail@plt+0x454c>
   158c4:	mov	ip, #7
   158c8:	b	158d0 <__assert_fail@plt+0x454c>
   158cc:	mov	ip, #8
   158d0:	add	lr, sp, #16
   158d4:	str	ip, [sp, #4]
   158d8:	str	lr, [sp]
   158dc:	bl	15344 <__assert_fail@plt+0x3fc0>
   158e0:	mov	sp, fp
   158e4:	pop	{fp, pc}
   158e8:	push	{fp, lr}
   158ec:	mov	fp, sp
   158f0:	movw	r0, #33148	; 0x817c
   158f4:	movt	r0, #2
   158f8:	ldr	r1, [r0]
   158fc:	movw	r0, #27802	; 0x6c9a
   15900:	movt	r0, #1
   15904:	bl	110a8 <fputs_unlocked@plt>
   15908:	movw	r1, #29483	; 0x732b
   1590c:	mov	r0, #0
   15910:	mov	r2, #5
   15914:	movt	r1, #1
   15918:	bl	11144 <dcgettext@plt>
   1591c:	movw	r2, #29503	; 0x733f
   15920:	mov	r1, r0
   15924:	mov	r0, #1
   15928:	movt	r2, #1
   1592c:	bl	112c4 <__printf_chk@plt>
   15930:	movw	r1, #29525	; 0x7355
   15934:	mov	r0, #0
   15938:	mov	r2, #5
   1593c:	movt	r1, #1
   15940:	bl	11144 <dcgettext@plt>
   15944:	movw	r2, #27388	; 0x6afc
   15948:	movw	r3, #27611	; 0x6bdb
   1594c:	mov	r1, r0
   15950:	mov	r0, #1
   15954:	movt	r2, #1
   15958:	movt	r3, #1
   1595c:	bl	112c4 <__printf_chk@plt>
   15960:	movw	r1, #29545	; 0x7369
   15964:	mov	r0, #0
   15968:	mov	r2, #5
   1596c:	movt	r1, #1
   15970:	bl	11144 <dcgettext@plt>
   15974:	movw	r2, #29584	; 0x7390
   15978:	mov	r1, r0
   1597c:	mov	r0, #1
   15980:	movt	r2, #1
   15984:	pop	{fp, lr}
   15988:	b	112c4 <__printf_chk@plt>
   1598c:	push	{r4, r5, r6, sl, fp, lr}
   15990:	add	fp, sp, #16
   15994:	mov	r4, r2
   15998:	mov	r5, r1
   1599c:	mov	r6, r0
   159a0:	bl	16344 <__assert_fail@plt+0x4fc0>
   159a4:	cmp	r0, #0
   159a8:	popne	{r4, r5, r6, sl, fp, pc}
   159ac:	cmp	r6, #0
   159b0:	beq	159c4 <__assert_fail@plt+0x4640>
   159b4:	cmp	r5, #0
   159b8:	cmpne	r4, #0
   159bc:	bne	159c4 <__assert_fail@plt+0x4640>
   159c0:	pop	{r4, r5, r6, sl, fp, pc}
   159c4:	bl	15f64 <__assert_fail@plt+0x4be0>
   159c8:	push	{r4, r5, r6, sl, fp, lr}
   159cc:	add	fp, sp, #16
   159d0:	mov	r4, r2
   159d4:	mov	r5, r1
   159d8:	mov	r6, r0
   159dc:	bl	16344 <__assert_fail@plt+0x4fc0>
   159e0:	cmp	r0, #0
   159e4:	popne	{r4, r5, r6, sl, fp, pc}
   159e8:	cmp	r6, #0
   159ec:	beq	15a00 <__assert_fail@plt+0x467c>
   159f0:	cmp	r5, #0
   159f4:	cmpne	r4, #0
   159f8:	bne	15a00 <__assert_fail@plt+0x467c>
   159fc:	pop	{r4, r5, r6, sl, fp, pc}
   15a00:	bl	15f64 <__assert_fail@plt+0x4be0>
   15a04:	push	{fp, lr}
   15a08:	mov	fp, sp
   15a0c:	bl	15ffc <__assert_fail@plt+0x4c78>
   15a10:	cmp	r0, #0
   15a14:	popne	{fp, pc}
   15a18:	bl	15f64 <__assert_fail@plt+0x4be0>
   15a1c:	push	{fp, lr}
   15a20:	mov	fp, sp
   15a24:	bl	15ffc <__assert_fail@plt+0x4c78>
   15a28:	cmp	r0, #0
   15a2c:	popne	{fp, pc}
   15a30:	bl	15f64 <__assert_fail@plt+0x4be0>
   15a34:	push	{fp, lr}
   15a38:	mov	fp, sp
   15a3c:	bl	15ffc <__assert_fail@plt+0x4c78>
   15a40:	cmp	r0, #0
   15a44:	popne	{fp, pc}
   15a48:	bl	15f64 <__assert_fail@plt+0x4be0>
   15a4c:	push	{r4, r5, fp, lr}
   15a50:	add	fp, sp, #8
   15a54:	mov	r4, r1
   15a58:	mov	r5, r0
   15a5c:	bl	1602c <__assert_fail@plt+0x4ca8>
   15a60:	cmp	r0, #0
   15a64:	popne	{r4, r5, fp, pc}
   15a68:	cmp	r5, #0
   15a6c:	beq	15a7c <__assert_fail@plt+0x46f8>
   15a70:	cmp	r4, #0
   15a74:	bne	15a7c <__assert_fail@plt+0x46f8>
   15a78:	pop	{r4, r5, fp, pc}
   15a7c:	bl	15f64 <__assert_fail@plt+0x4be0>
   15a80:	push	{fp, lr}
   15a84:	mov	fp, sp
   15a88:	cmp	r1, #0
   15a8c:	orreq	r1, r1, #1
   15a90:	bl	1602c <__assert_fail@plt+0x4ca8>
   15a94:	cmp	r0, #0
   15a98:	popne	{fp, pc}
   15a9c:	bl	15f64 <__assert_fail@plt+0x4be0>
   15aa0:	push	{fp, lr}
   15aa4:	mov	fp, sp
   15aa8:	clz	r3, r2
   15aac:	lsr	ip, r3, #5
   15ab0:	clz	r3, r1
   15ab4:	lsr	r3, r3, #5
   15ab8:	orrs	r3, r3, ip
   15abc:	movwne	r1, #1
   15ac0:	movwne	r2, #1
   15ac4:	bl	16344 <__assert_fail@plt+0x4fc0>
   15ac8:	cmp	r0, #0
   15acc:	popne	{fp, pc}
   15ad0:	bl	15f64 <__assert_fail@plt+0x4be0>
   15ad4:	push	{fp, lr}
   15ad8:	mov	fp, sp
   15adc:	mov	r2, r1
   15ae0:	mov	r1, r0
   15ae4:	mov	r0, #0
   15ae8:	bl	16344 <__assert_fail@plt+0x4fc0>
   15aec:	cmp	r0, #0
   15af0:	popne	{fp, pc}
   15af4:	bl	15f64 <__assert_fail@plt+0x4be0>
   15af8:	push	{fp, lr}
   15afc:	mov	fp, sp
   15b00:	mov	r2, r1
   15b04:	mov	r1, r0
   15b08:	clz	r0, r2
   15b0c:	clz	r3, r1
   15b10:	lsr	r0, r0, #5
   15b14:	lsr	r3, r3, #5
   15b18:	orrs	r0, r3, r0
   15b1c:	movwne	r1, #1
   15b20:	movwne	r2, #1
   15b24:	mov	r0, #0
   15b28:	bl	16344 <__assert_fail@plt+0x4fc0>
   15b2c:	cmp	r0, #0
   15b30:	popne	{fp, pc}
   15b34:	bl	15f64 <__assert_fail@plt+0x4be0>
   15b38:	push	{r4, r5, r6, sl, fp, lr}
   15b3c:	add	fp, sp, #16
   15b40:	ldr	r5, [r1]
   15b44:	mov	r4, r1
   15b48:	mov	r6, r0
   15b4c:	cmp	r0, #0
   15b50:	beq	15b68 <__assert_fail@plt+0x47e4>
   15b54:	mov	r0, #1
   15b58:	add	r0, r0, r5, lsr #1
   15b5c:	adds	r5, r5, r0
   15b60:	bcc	15b70 <__assert_fail@plt+0x47ec>
   15b64:	b	15bac <__assert_fail@plt+0x4828>
   15b68:	cmp	r5, #0
   15b6c:	movweq	r5, #64	; 0x40
   15b70:	mov	r0, r6
   15b74:	mov	r1, r5
   15b78:	mov	r2, #1
   15b7c:	bl	16344 <__assert_fail@plt+0x4fc0>
   15b80:	cmp	r5, #0
   15b84:	mov	r1, r5
   15b88:	movwne	r1, #1
   15b8c:	cmp	r0, #0
   15b90:	bne	15ba4 <__assert_fail@plt+0x4820>
   15b94:	clz	r2, r6
   15b98:	lsr	r2, r2, #5
   15b9c:	orrs	r1, r2, r1
   15ba0:	bne	15bac <__assert_fail@plt+0x4828>
   15ba4:	str	r5, [r4]
   15ba8:	pop	{r4, r5, r6, sl, fp, pc}
   15bac:	bl	15f64 <__assert_fail@plt+0x4be0>
   15bb0:	push	{r4, r5, r6, r7, fp, lr}
   15bb4:	add	fp, sp, #16
   15bb8:	ldr	r5, [r1]
   15bbc:	mov	r6, r2
   15bc0:	mov	r4, r1
   15bc4:	mov	r7, r0
   15bc8:	cmp	r0, #0
   15bcc:	beq	15be4 <__assert_fail@plt+0x4860>
   15bd0:	mov	r0, #1
   15bd4:	add	r0, r0, r5, lsr #1
   15bd8:	adds	r5, r5, r0
   15bdc:	bcc	15bfc <__assert_fail@plt+0x4878>
   15be0:	b	15c30 <__assert_fail@plt+0x48ac>
   15be4:	cmp	r5, #0
   15be8:	bne	15bfc <__assert_fail@plt+0x4878>
   15bec:	mov	r0, #64	; 0x40
   15bf0:	cmp	r6, #64	; 0x40
   15bf4:	udiv	r5, r0, r6
   15bf8:	addhi	r5, r5, #1
   15bfc:	mov	r0, r7
   15c00:	mov	r1, r5
   15c04:	mov	r2, r6
   15c08:	bl	16344 <__assert_fail@plt+0x4fc0>
   15c0c:	cmp	r0, #0
   15c10:	bne	15c28 <__assert_fail@plt+0x48a4>
   15c14:	cmp	r7, #0
   15c18:	beq	15c30 <__assert_fail@plt+0x48ac>
   15c1c:	cmp	r6, #0
   15c20:	cmpne	r5, #0
   15c24:	bne	15c30 <__assert_fail@plt+0x48ac>
   15c28:	str	r5, [r4]
   15c2c:	pop	{r4, r5, r6, r7, fp, pc}
   15c30:	bl	15f64 <__assert_fail@plt+0x4be0>
   15c34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c38:	add	fp, sp, #24
   15c3c:	mov	r8, r1
   15c40:	ldr	r1, [r1]
   15c44:	mov	r5, r0
   15c48:	add	r0, r1, r1, asr #1
   15c4c:	cmp	r0, r1
   15c50:	mvnvs	r0, #-2147483648	; 0x80000000
   15c54:	cmp	r0, r3
   15c58:	mov	r7, r0
   15c5c:	movgt	r7, r3
   15c60:	cmn	r3, #1
   15c64:	movle	r7, r0
   15c68:	ldr	r0, [fp, #8]
   15c6c:	cmn	r0, #1
   15c70:	ble	15c98 <__assert_fail@plt+0x4914>
   15c74:	cmp	r0, #0
   15c78:	beq	15cec <__assert_fail@plt+0x4968>
   15c7c:	cmn	r7, #1
   15c80:	ble	15cc0 <__assert_fail@plt+0x493c>
   15c84:	mvn	r4, #-2147483648	; 0x80000000
   15c88:	udiv	r6, r4, r0
   15c8c:	cmp	r6, r7
   15c90:	bge	15cec <__assert_fail@plt+0x4968>
   15c94:	b	15cfc <__assert_fail@plt+0x4978>
   15c98:	cmn	r7, #1
   15c9c:	ble	15cdc <__assert_fail@plt+0x4958>
   15ca0:	cmn	r0, #1
   15ca4:	beq	15cec <__assert_fail@plt+0x4968>
   15ca8:	mov	r6, #-2147483648	; 0x80000000
   15cac:	mvn	r4, #-2147483648	; 0x80000000
   15cb0:	sdiv	r6, r6, r0
   15cb4:	cmp	r6, r7
   15cb8:	bge	15cec <__assert_fail@plt+0x4968>
   15cbc:	b	15cfc <__assert_fail@plt+0x4978>
   15cc0:	beq	15cec <__assert_fail@plt+0x4968>
   15cc4:	mov	r6, #-2147483648	; 0x80000000
   15cc8:	mvn	r4, #-2147483648	; 0x80000000
   15ccc:	sdiv	r6, r6, r7
   15cd0:	cmp	r6, r0
   15cd4:	bge	15cec <__assert_fail@plt+0x4968>
   15cd8:	b	15cfc <__assert_fail@plt+0x4978>
   15cdc:	mvn	r4, #-2147483648	; 0x80000000
   15ce0:	sdiv	r6, r4, r0
   15ce4:	cmp	r7, r6
   15ce8:	blt	15cfc <__assert_fail@plt+0x4978>
   15cec:	mul	r6, r7, r0
   15cf0:	mov	r4, #64	; 0x40
   15cf4:	cmp	r6, #63	; 0x3f
   15cf8:	bgt	15d04 <__assert_fail@plt+0x4980>
   15cfc:	sdiv	r7, r4, r0
   15d00:	mul	r6, r7, r0
   15d04:	cmp	r5, #0
   15d08:	moveq	r4, #0
   15d0c:	streq	r4, [r8]
   15d10:	sub	r4, r7, r1
   15d14:	cmp	r4, r2
   15d18:	bge	15dc4 <__assert_fail@plt+0x4a40>
   15d1c:	add	r7, r1, r2
   15d20:	mov	r6, #0
   15d24:	mov	r2, #0
   15d28:	cmp	r7, r3
   15d2c:	movwgt	r6, #1
   15d30:	cmn	r3, #1
   15d34:	movwgt	r2, #1
   15d38:	cmp	r7, r1
   15d3c:	bvs	15df8 <__assert_fail@plt+0x4a74>
   15d40:	ands	r1, r2, r6
   15d44:	bne	15df8 <__assert_fail@plt+0x4a74>
   15d48:	cmn	r0, #1
   15d4c:	ble	15d74 <__assert_fail@plt+0x49f0>
   15d50:	cmp	r0, #0
   15d54:	beq	15dc0 <__assert_fail@plt+0x4a3c>
   15d58:	cmn	r7, #1
   15d5c:	ble	15d98 <__assert_fail@plt+0x4a14>
   15d60:	mvn	r1, #-2147483648	; 0x80000000
   15d64:	udiv	r1, r1, r0
   15d68:	cmp	r1, r7
   15d6c:	bge	15dc0 <__assert_fail@plt+0x4a3c>
   15d70:	b	15df8 <__assert_fail@plt+0x4a74>
   15d74:	cmn	r7, #1
   15d78:	ble	15db0 <__assert_fail@plt+0x4a2c>
   15d7c:	cmn	r0, #1
   15d80:	beq	15dc0 <__assert_fail@plt+0x4a3c>
   15d84:	mov	r1, #-2147483648	; 0x80000000
   15d88:	sdiv	r1, r1, r0
   15d8c:	cmp	r1, r7
   15d90:	bge	15dc0 <__assert_fail@plt+0x4a3c>
   15d94:	b	15df8 <__assert_fail@plt+0x4a74>
   15d98:	beq	15dc0 <__assert_fail@plt+0x4a3c>
   15d9c:	mov	r1, #-2147483648	; 0x80000000
   15da0:	sdiv	r1, r1, r7
   15da4:	cmp	r1, r0
   15da8:	bge	15dc0 <__assert_fail@plt+0x4a3c>
   15dac:	b	15df8 <__assert_fail@plt+0x4a74>
   15db0:	mvn	r1, #-2147483648	; 0x80000000
   15db4:	sdiv	r1, r1, r0
   15db8:	cmp	r7, r1
   15dbc:	blt	15df8 <__assert_fail@plt+0x4a74>
   15dc0:	mul	r6, r7, r0
   15dc4:	mov	r0, r5
   15dc8:	mov	r1, r6
   15dcc:	bl	1602c <__assert_fail@plt+0x4ca8>
   15dd0:	cmp	r6, #0
   15dd4:	movwne	r6, #1
   15dd8:	cmp	r0, #0
   15ddc:	bne	15df0 <__assert_fail@plt+0x4a6c>
   15de0:	clz	r1, r5
   15de4:	lsr	r1, r1, #5
   15de8:	orrs	r1, r1, r6
   15dec:	bne	15df8 <__assert_fail@plt+0x4a74>
   15df0:	str	r7, [r8]
   15df4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15df8:	bl	15f64 <__assert_fail@plt+0x4be0>
   15dfc:	push	{fp, lr}
   15e00:	mov	fp, sp
   15e04:	mov	r1, #1
   15e08:	bl	15fa8 <__assert_fail@plt+0x4c24>
   15e0c:	cmp	r0, #0
   15e10:	popne	{fp, pc}
   15e14:	bl	15f64 <__assert_fail@plt+0x4be0>
   15e18:	push	{fp, lr}
   15e1c:	mov	fp, sp
   15e20:	bl	15fa8 <__assert_fail@plt+0x4c24>
   15e24:	cmp	r0, #0
   15e28:	popne	{fp, pc}
   15e2c:	bl	15f64 <__assert_fail@plt+0x4be0>
   15e30:	push	{fp, lr}
   15e34:	mov	fp, sp
   15e38:	mov	r1, #1
   15e3c:	bl	15fa8 <__assert_fail@plt+0x4c24>
   15e40:	cmp	r0, #0
   15e44:	popne	{fp, pc}
   15e48:	bl	15f64 <__assert_fail@plt+0x4be0>
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	bl	15fa8 <__assert_fail@plt+0x4c24>
   15e58:	cmp	r0, #0
   15e5c:	popne	{fp, pc}
   15e60:	bl	15f64 <__assert_fail@plt+0x4be0>
   15e64:	push	{r4, r5, r6, sl, fp, lr}
   15e68:	add	fp, sp, #16
   15e6c:	mov	r5, r0
   15e70:	mov	r0, r1
   15e74:	mov	r4, r1
   15e78:	bl	15ffc <__assert_fail@plt+0x4c78>
   15e7c:	cmp	r0, #0
   15e80:	beq	15e9c <__assert_fail@plt+0x4b18>
   15e84:	mov	r1, r5
   15e88:	mov	r2, r4
   15e8c:	mov	r6, r0
   15e90:	bl	11108 <memcpy@plt>
   15e94:	mov	r0, r6
   15e98:	pop	{r4, r5, r6, sl, fp, pc}
   15e9c:	bl	15f64 <__assert_fail@plt+0x4be0>
   15ea0:	push	{r4, r5, r6, sl, fp, lr}
   15ea4:	add	fp, sp, #16
   15ea8:	mov	r5, r0
   15eac:	mov	r0, r1
   15eb0:	mov	r4, r1
   15eb4:	bl	15ffc <__assert_fail@plt+0x4c78>
   15eb8:	cmp	r0, #0
   15ebc:	beq	15ed8 <__assert_fail@plt+0x4b54>
   15ec0:	mov	r1, r5
   15ec4:	mov	r2, r4
   15ec8:	mov	r6, r0
   15ecc:	bl	11108 <memcpy@plt>
   15ed0:	mov	r0, r6
   15ed4:	pop	{r4, r5, r6, sl, fp, pc}
   15ed8:	bl	15f64 <__assert_fail@plt+0x4be0>
   15edc:	push	{r4, r5, r6, sl, fp, lr}
   15ee0:	add	fp, sp, #16
   15ee4:	mov	r5, r0
   15ee8:	add	r0, r1, #1
   15eec:	mov	r4, r1
   15ef0:	bl	15ffc <__assert_fail@plt+0x4c78>
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f20 <__assert_fail@plt+0x4b9c>
   15efc:	mov	r6, r0
   15f00:	mov	r0, #0
   15f04:	mov	r1, r5
   15f08:	mov	r2, r4
   15f0c:	strb	r0, [r6, r4]
   15f10:	mov	r0, r6
   15f14:	bl	11108 <memcpy@plt>
   15f18:	mov	r0, r6
   15f1c:	pop	{r4, r5, r6, sl, fp, pc}
   15f20:	bl	15f64 <__assert_fail@plt+0x4be0>
   15f24:	push	{r4, r5, r6, sl, fp, lr}
   15f28:	add	fp, sp, #16
   15f2c:	mov	r4, r0
   15f30:	bl	11270 <strlen@plt>
   15f34:	add	r5, r0, #1
   15f38:	mov	r0, r5
   15f3c:	bl	15ffc <__assert_fail@plt+0x4c78>
   15f40:	cmp	r0, #0
   15f44:	beq	15f60 <__assert_fail@plt+0x4bdc>
   15f48:	mov	r1, r4
   15f4c:	mov	r2, r5
   15f50:	mov	r6, r0
   15f54:	bl	11108 <memcpy@plt>
   15f58:	mov	r0, r6
   15f5c:	pop	{r4, r5, r6, sl, fp, pc}
   15f60:	bl	15f64 <__assert_fail@plt+0x4be0>
   15f64:	push	{fp, lr}
   15f68:	mov	fp, sp
   15f6c:	movw	r0, #33060	; 0x8124
   15f70:	movw	r1, #29660	; 0x73dc
   15f74:	mov	r2, #5
   15f78:	movt	r0, #2
   15f7c:	movt	r1, #1
   15f80:	ldr	r4, [r0]
   15f84:	mov	r0, #0
   15f88:	bl	11144 <dcgettext@plt>
   15f8c:	movw	r2, #28615	; 0x6fc7
   15f90:	mov	r3, r0
   15f94:	mov	r0, r4
   15f98:	mov	r1, #0
   15f9c:	movt	r2, #1
   15fa0:	bl	111c8 <error@plt>
   15fa4:	bl	1136c <abort@plt>
   15fa8:	clz	r2, r1
   15fac:	clz	r3, r0
   15fb0:	lsr	r2, r2, #5
   15fb4:	lsr	r3, r3, #5
   15fb8:	orrs	r2, r3, r2
   15fbc:	movwne	r1, #1
   15fc0:	movwne	r0, #1
   15fc4:	cmp	r1, #0
   15fc8:	beq	15ff8 <__assert_fail@plt+0x4c74>
   15fcc:	mvn	r2, #-2147483648	; 0x80000000
   15fd0:	udiv	r2, r2, r1
   15fd4:	cmp	r2, r0
   15fd8:	bcs	15ff8 <__assert_fail@plt+0x4c74>
   15fdc:	push	{fp, lr}
   15fe0:	mov	fp, sp
   15fe4:	bl	11288 <__errno_location@plt>
   15fe8:	mov	r1, #12
   15fec:	str	r1, [r0]
   15ff0:	mov	r0, #0
   15ff4:	pop	{fp, pc}
   15ff8:	b	1109c <calloc@plt>
   15ffc:	cmp	r0, #0
   16000:	movweq	r0, #1
   16004:	cmn	r0, #1
   16008:	ble	16010 <__assert_fail@plt+0x4c8c>
   1600c:	b	111ec <malloc@plt>
   16010:	push	{fp, lr}
   16014:	mov	fp, sp
   16018:	bl	11288 <__errno_location@plt>
   1601c:	mov	r1, #12
   16020:	str	r1, [r0]
   16024:	mov	r0, #0
   16028:	pop	{fp, pc}
   1602c:	push	{fp, lr}
   16030:	mov	fp, sp
   16034:	cmp	r0, #0
   16038:	beq	16054 <__assert_fail@plt+0x4cd0>
   1603c:	cmp	r1, #0
   16040:	beq	16060 <__assert_fail@plt+0x4cdc>
   16044:	cmn	r1, #1
   16048:	ble	1606c <__assert_fail@plt+0x4ce8>
   1604c:	pop	{fp, lr}
   16050:	b	11168 <realloc@plt>
   16054:	mov	r0, r1
   16058:	pop	{fp, lr}
   1605c:	b	15ffc <__assert_fail@plt+0x4c78>
   16060:	bl	12f18 <__assert_fail@plt+0x1b94>
   16064:	mov	r0, #0
   16068:	pop	{fp, pc}
   1606c:	bl	11288 <__errno_location@plt>
   16070:	mov	r1, #12
   16074:	str	r1, [r0]
   16078:	mov	r0, #0
   1607c:	pop	{fp, pc}
   16080:	push	{r4, r5, r6, sl, fp, lr}
   16084:	add	fp, sp, #16
   16088:	mov	r4, r0
   1608c:	bl	111b0 <__fpending@plt>
   16090:	ldr	r6, [r4]
   16094:	mov	r5, r0
   16098:	mov	r0, r4
   1609c:	bl	16104 <__assert_fail@plt+0x4d80>
   160a0:	tst	r6, #32
   160a4:	bne	160dc <__assert_fail@plt+0x4d58>
   160a8:	cmp	r0, #0
   160ac:	mov	r4, r0
   160b0:	mvnne	r4, #0
   160b4:	cmp	r5, #0
   160b8:	bne	160e8 <__assert_fail@plt+0x4d64>
   160bc:	cmp	r0, #0
   160c0:	beq	160e8 <__assert_fail@plt+0x4d64>
   160c4:	bl	11288 <__errno_location@plt>
   160c8:	ldr	r0, [r0]
   160cc:	subs	r4, r0, #9
   160d0:	mvnne	r4, #0
   160d4:	mov	r0, r4
   160d8:	pop	{r4, r5, r6, sl, fp, pc}
   160dc:	mvn	r4, #0
   160e0:	cmp	r0, #0
   160e4:	beq	160f0 <__assert_fail@plt+0x4d6c>
   160e8:	mov	r0, r4
   160ec:	pop	{r4, r5, r6, sl, fp, pc}
   160f0:	bl	11288 <__errno_location@plt>
   160f4:	mov	r1, #0
   160f8:	str	r1, [r0]
   160fc:	mov	r0, r4
   16100:	pop	{r4, r5, r6, sl, fp, pc}
   16104:	push	{r4, r5, r6, sl, fp, lr}
   16108:	add	fp, sp, #16
   1610c:	sub	sp, sp, #8
   16110:	mov	r4, r0
   16114:	bl	112d0 <fileno@plt>
   16118:	cmn	r0, #1
   1611c:	ble	16190 <__assert_fail@plt+0x4e0c>
   16120:	mov	r0, r4
   16124:	bl	11210 <__freading@plt>
   16128:	cmp	r0, #0
   1612c:	beq	16158 <__assert_fail@plt+0x4dd4>
   16130:	mov	r0, r4
   16134:	bl	112d0 <fileno@plt>
   16138:	mov	r1, #1
   1613c:	mov	r2, #0
   16140:	mov	r3, #0
   16144:	str	r1, [sp]
   16148:	bl	11198 <lseek64@plt>
   1614c:	and	r0, r0, r1
   16150:	cmn	r0, #1
   16154:	beq	16190 <__assert_fail@plt+0x4e0c>
   16158:	mov	r0, r4
   1615c:	bl	161a0 <__assert_fail@plt+0x4e1c>
   16160:	cmp	r0, #0
   16164:	beq	16190 <__assert_fail@plt+0x4e0c>
   16168:	bl	11288 <__errno_location@plt>
   1616c:	ldr	r6, [r0]
   16170:	mov	r5, r0
   16174:	mov	r0, r4
   16178:	bl	112e8 <fclose@plt>
   1617c:	cmp	r6, #0
   16180:	strne	r6, [r5]
   16184:	mvnne	r0, #0
   16188:	sub	sp, fp, #16
   1618c:	pop	{r4, r5, r6, sl, fp, pc}
   16190:	mov	r0, r4
   16194:	sub	sp, fp, #16
   16198:	pop	{r4, r5, r6, sl, fp, lr}
   1619c:	b	112e8 <fclose@plt>
   161a0:	push	{r4, sl, fp, lr}
   161a4:	add	fp, sp, #8
   161a8:	sub	sp, sp, #8
   161ac:	mov	r4, r0
   161b0:	cmp	r0, #0
   161b4:	beq	161d0 <__assert_fail@plt+0x4e4c>
   161b8:	mov	r0, r4
   161bc:	bl	11210 <__freading@plt>
   161c0:	cmp	r0, #0
   161c4:	ldrbne	r0, [r4, #1]
   161c8:	tstne	r0, #1
   161cc:	bne	161e0 <__assert_fail@plt+0x4e5c>
   161d0:	mov	r0, r4
   161d4:	sub	sp, fp, #8
   161d8:	pop	{r4, sl, fp, lr}
   161dc:	b	110cc <fflush@plt>
   161e0:	mov	r0, #1
   161e4:	mov	r2, #0
   161e8:	mov	r3, #0
   161ec:	str	r0, [sp]
   161f0:	mov	r0, r4
   161f4:	bl	16208 <__assert_fail@plt+0x4e84>
   161f8:	mov	r0, r4
   161fc:	sub	sp, fp, #8
   16200:	pop	{r4, sl, fp, lr}
   16204:	b	110cc <fflush@plt>
   16208:	push	{r4, r5, r6, r7, fp, lr}
   1620c:	add	fp, sp, #16
   16210:	sub	sp, sp, #8
   16214:	mov	r4, r0
   16218:	ldr	r0, [r0, #4]
   1621c:	mov	r5, r3
   16220:	mov	r6, r2
   16224:	ldr	r1, [r4, #8]
   16228:	cmp	r1, r0
   1622c:	bne	16248 <__assert_fail@plt+0x4ec4>
   16230:	ldrd	r0, [r4, #16]
   16234:	cmp	r1, r0
   16238:	bne	16248 <__assert_fail@plt+0x4ec4>
   1623c:	ldr	r0, [r4, #36]	; 0x24
   16240:	cmp	r0, #0
   16244:	beq	16260 <__assert_fail@plt+0x4edc>
   16248:	mov	r0, r4
   1624c:	mov	r2, r6
   16250:	mov	r3, r5
   16254:	sub	sp, fp, #16
   16258:	pop	{r4, r5, r6, r7, fp, lr}
   1625c:	b	112f4 <fseeko64@plt>
   16260:	ldr	r7, [fp, #8]
   16264:	mov	r0, r4
   16268:	bl	112d0 <fileno@plt>
   1626c:	mov	r2, r6
   16270:	mov	r3, r5
   16274:	str	r7, [sp]
   16278:	bl	11198 <lseek64@plt>
   1627c:	and	r2, r0, r1
   16280:	cmn	r2, #1
   16284:	mvneq	r0, #0
   16288:	subeq	sp, fp, #16
   1628c:	popeq	{r4, r5, r6, r7, fp, pc}
   16290:	strd	r0, [r4, #80]	; 0x50
   16294:	ldr	r0, [r4]
   16298:	bic	r0, r0, #16
   1629c:	str	r0, [r4]
   162a0:	mov	r0, #0
   162a4:	sub	sp, fp, #16
   162a8:	pop	{r4, r5, r6, r7, fp, pc}
   162ac:	push	{fp, lr}
   162b0:	mov	fp, sp
   162b4:	mov	r0, #14
   162b8:	bl	11324 <nl_langinfo@plt>
   162bc:	movw	r1, #27803	; 0x6c9b
   162c0:	cmp	r0, #0
   162c4:	movt	r1, #1
   162c8:	movne	r1, r0
   162cc:	movw	r0, #29677	; 0x73ed
   162d0:	ldrb	r2, [r1]
   162d4:	movt	r0, #1
   162d8:	cmp	r2, #0
   162dc:	movne	r0, r1
   162e0:	pop	{fp, pc}
   162e4:	push	{r4, r5, r6, r7, fp, lr}
   162e8:	add	fp, sp, #16
   162ec:	sub	sp, sp, #8
   162f0:	add	r5, sp, #4
   162f4:	cmp	r0, #0
   162f8:	mov	r7, r2
   162fc:	mov	r4, r1
   16300:	movne	r5, r0
   16304:	mov	r0, r5
   16308:	bl	111bc <mbrtowc@plt>
   1630c:	mov	r6, r0
   16310:	cmp	r7, #0
   16314:	beq	16338 <__assert_fail@plt+0x4fb4>
   16318:	cmn	r6, #2
   1631c:	bcc	16338 <__assert_fail@plt+0x4fb4>
   16320:	mov	r0, #0
   16324:	bl	12f40 <__assert_fail@plt+0x1bbc>
   16328:	cmp	r0, #0
   1632c:	ldrbeq	r0, [r4]
   16330:	moveq	r6, #1
   16334:	streq	r0, [r5]
   16338:	mov	r0, r6
   1633c:	sub	sp, fp, #16
   16340:	pop	{r4, r5, r6, r7, fp, pc}
   16344:	cmp	r2, #0
   16348:	beq	16378 <__assert_fail@plt+0x4ff4>
   1634c:	mvn	r3, #0
   16350:	udiv	r3, r3, r2
   16354:	cmp	r3, r1
   16358:	bcs	16378 <__assert_fail@plt+0x4ff4>
   1635c:	push	{fp, lr}
   16360:	mov	fp, sp
   16364:	bl	11288 <__errno_location@plt>
   16368:	mov	r1, #12
   1636c:	str	r1, [r0]
   16370:	mov	r0, #0
   16374:	pop	{fp, pc}
   16378:	mul	r1, r2, r1
   1637c:	b	1602c <__assert_fail@plt+0x4ca8>
   16380:	cmp	r3, #0
   16384:	cmpeq	r2, #0
   16388:	bne	163ac <__assert_fail@plt+0x5028>
   1638c:	cmp	r1, #0
   16390:	movlt	r1, #-2147483648	; 0x80000000
   16394:	movlt	r0, #0
   16398:	blt	163a8 <__assert_fail@plt+0x5024>
   1639c:	cmpeq	r0, #0
   163a0:	mvnne	r1, #-2147483648	; 0x80000000
   163a4:	mvnne	r0, #0
   163a8:	b	16454 <__assert_fail@plt+0x50d0>
   163ac:	sub	sp, sp, #8
   163b0:	push	{sp, lr}
   163b4:	cmp	r1, #0
   163b8:	blt	163d8 <__assert_fail@plt+0x5054>
   163bc:	cmp	r3, #0
   163c0:	blt	1640c <__assert_fail@plt+0x5088>
   163c4:	bl	16464 <__assert_fail@plt+0x50e0>
   163c8:	ldr	lr, [sp, #4]
   163cc:	add	sp, sp, #8
   163d0:	pop	{r2, r3}
   163d4:	bx	lr
   163d8:	rsbs	r0, r0, #0
   163dc:	sbc	r1, r1, r1, lsl #1
   163e0:	cmp	r3, #0
   163e4:	blt	16430 <__assert_fail@plt+0x50ac>
   163e8:	bl	16464 <__assert_fail@plt+0x50e0>
   163ec:	ldr	lr, [sp, #4]
   163f0:	add	sp, sp, #8
   163f4:	pop	{r2, r3}
   163f8:	rsbs	r0, r0, #0
   163fc:	sbc	r1, r1, r1, lsl #1
   16400:	rsbs	r2, r2, #0
   16404:	sbc	r3, r3, r3, lsl #1
   16408:	bx	lr
   1640c:	rsbs	r2, r2, #0
   16410:	sbc	r3, r3, r3, lsl #1
   16414:	bl	16464 <__assert_fail@plt+0x50e0>
   16418:	ldr	lr, [sp, #4]
   1641c:	add	sp, sp, #8
   16420:	pop	{r2, r3}
   16424:	rsbs	r0, r0, #0
   16428:	sbc	r1, r1, r1, lsl #1
   1642c:	bx	lr
   16430:	rsbs	r2, r2, #0
   16434:	sbc	r3, r3, r3, lsl #1
   16438:	bl	16464 <__assert_fail@plt+0x50e0>
   1643c:	ldr	lr, [sp, #4]
   16440:	add	sp, sp, #8
   16444:	pop	{r2, r3}
   16448:	rsbs	r2, r2, #0
   1644c:	sbc	r3, r3, r3, lsl #1
   16450:	bx	lr
   16454:	push	{r1, lr}
   16458:	mov	r0, #8
   1645c:	bl	110b4 <raise@plt>
   16460:	pop	{r1, pc}
   16464:	cmp	r1, r3
   16468:	cmpeq	r0, r2
   1646c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16470:	mov	r4, r0
   16474:	movcc	r0, #0
   16478:	mov	r5, r1
   1647c:	ldr	lr, [sp, #36]	; 0x24
   16480:	movcc	r1, r0
   16484:	bcc	16580 <__assert_fail@plt+0x51fc>
   16488:	cmp	r3, #0
   1648c:	clzeq	ip, r2
   16490:	clzne	ip, r3
   16494:	addeq	ip, ip, #32
   16498:	cmp	r5, #0
   1649c:	clzeq	r1, r4
   164a0:	addeq	r1, r1, #32
   164a4:	clzne	r1, r5
   164a8:	sub	ip, ip, r1
   164ac:	sub	sl, ip, #32
   164b0:	lsl	r9, r3, ip
   164b4:	rsb	fp, ip, #32
   164b8:	orr	r9, r9, r2, lsl sl
   164bc:	orr	r9, r9, r2, lsr fp
   164c0:	lsl	r8, r2, ip
   164c4:	cmp	r5, r9
   164c8:	cmpeq	r4, r8
   164cc:	movcc	r0, #0
   164d0:	movcc	r1, r0
   164d4:	bcc	164f0 <__assert_fail@plt+0x516c>
   164d8:	mov	r0, #1
   164dc:	subs	r4, r4, r8
   164e0:	lsl	r1, r0, sl
   164e4:	orr	r1, r1, r0, lsr fp
   164e8:	lsl	r0, r0, ip
   164ec:	sbc	r5, r5, r9
   164f0:	cmp	ip, #0
   164f4:	beq	16580 <__assert_fail@plt+0x51fc>
   164f8:	lsr	r6, r8, #1
   164fc:	orr	r6, r6, r9, lsl #31
   16500:	lsr	r7, r9, #1
   16504:	mov	r2, ip
   16508:	b	1652c <__assert_fail@plt+0x51a8>
   1650c:	subs	r3, r4, r6
   16510:	sbc	r8, r5, r7
   16514:	adds	r3, r3, r3
   16518:	adc	r8, r8, r8
   1651c:	adds	r4, r3, #1
   16520:	adc	r5, r8, #0
   16524:	subs	r2, r2, #1
   16528:	beq	16548 <__assert_fail@plt+0x51c4>
   1652c:	cmp	r5, r7
   16530:	cmpeq	r4, r6
   16534:	bcs	1650c <__assert_fail@plt+0x5188>
   16538:	adds	r4, r4, r4
   1653c:	adc	r5, r5, r5
   16540:	subs	r2, r2, #1
   16544:	bne	1652c <__assert_fail@plt+0x51a8>
   16548:	lsr	r3, r4, ip
   1654c:	orr	r3, r3, r5, lsl fp
   16550:	lsr	r2, r5, ip
   16554:	orr	r3, r3, r5, lsr sl
   16558:	adds	r0, r0, r4
   1655c:	mov	r4, r3
   16560:	lsl	r3, r2, ip
   16564:	orr	r3, r3, r4, lsl sl
   16568:	lsl	ip, r4, ip
   1656c:	orr	r3, r3, r4, lsr fp
   16570:	adc	r1, r1, r5
   16574:	subs	r0, r0, ip
   16578:	mov	r5, r2
   1657c:	sbc	r1, r1, r3
   16580:	cmp	lr, #0
   16584:	strdne	r4, [lr]
   16588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1658c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16590:	mov	r7, r0
   16594:	ldr	r6, [pc, #72]	; 165e4 <__assert_fail@plt+0x5260>
   16598:	ldr	r5, [pc, #72]	; 165e8 <__assert_fail@plt+0x5264>
   1659c:	add	r6, pc, r6
   165a0:	add	r5, pc, r5
   165a4:	sub	r6, r6, r5
   165a8:	mov	r8, r1
   165ac:	mov	r9, r2
   165b0:	bl	1107c <calloc@plt-0x20>
   165b4:	asrs	r6, r6, #2
   165b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   165bc:	mov	r4, #0
   165c0:	add	r4, r4, #1
   165c4:	ldr	r3, [r5], #4
   165c8:	mov	r2, r9
   165cc:	mov	r1, r8
   165d0:	mov	r0, r7
   165d4:	blx	r3
   165d8:	cmp	r6, r4
   165dc:	bne	165c0 <__assert_fail@plt+0x523c>
   165e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165e4:	andeq	r1, r1, r8, ror #18
   165e8:	andeq	r1, r1, r0, ror #18
   165ec:	bx	lr
   165f0:	ldr	r3, [pc, #12]	; 16604 <__assert_fail@plt+0x5280>
   165f4:	mov	r1, #0
   165f8:	add	r3, pc, r3
   165fc:	ldr	r2, [r3]
   16600:	b	112a0 <__cxa_atexit@plt>
   16604:	andeq	r1, r1, r4, lsl fp

Disassembly of section .fini:

00016608 <.fini>:
   16608:	push	{r3, lr}
   1660c:	pop	{r3, pc}
