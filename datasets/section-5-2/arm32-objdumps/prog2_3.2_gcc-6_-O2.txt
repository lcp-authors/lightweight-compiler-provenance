
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

00010690 <.init>:
   10690:	push	{r3, lr}
   10694:	bl	10a90 <_start@@Base+0x3c>
   10698:	pop	{r3, pc}

Disassembly of section .plt:

0001069c <printf@plt-0x14>:
   1069c:	push	{lr}		; (str lr, [sp, #-4]!)
   106a0:	ldr	lr, [pc, #4]	; 106ac <printf@plt-0x4>
   106a4:	add	lr, pc, lr
   106a8:	ldr	pc, [lr, #8]!
   106ac:	andeq	r1, r1, r4, asr r9

000106b0 <printf@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2388]!	; 0x954

000106bc <puts@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2380]!	; 0x94c

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2372]!	; 0x944

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #69632	; 0x11000
   106dc:	ldr	pc, [ip, #2364]!	; 0x93c

000106e0 <strlen@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #69632	; 0x11000
   106e8:	ldr	pc, [ip, #2356]!	; 0x934

000106ec <abort@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #69632	; 0x11000
   106f4:	ldr	pc, [ip, #2348]!	; 0x92c

Disassembly of section .text:

000106f8 <main@@Base>:
   106f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106fc:	sub	sp, sp, #76	; 0x4c
   10700:	ldr	r4, [pc, #740]	; 109ec <main@@Base+0x2f4>
   10704:	add	ip, sp, #24
   10708:	add	r4, pc, r4
   1070c:	mov	r5, ip
   10710:	ldm	r4!, {r0, r1, r2, r3}
   10714:	mov	r7, ip
   10718:	add	r8, sp, #48	; 0x30
   1071c:	mov	lr, r8
   10720:	stmia	ip!, {r0, r1, r2, r3}
   10724:	add	r6, sp, #44	; 0x2c
   10728:	ldm	r4, {r0, r1}
   1072c:	ldr	fp, [pc, #700]	; 109f0 <main@@Base+0x2f8>
   10730:	ldr	r9, [pc, #700]	; 109f4 <main@@Base+0x2fc>
   10734:	stm	ip, {r0, r1}
   10738:	ldm	r5!, {r0, r1, r2, r3}
   1073c:	add	sl, sp, #68	; 0x44
   10740:	mov	r5, r6
   10744:	add	fp, pc, fp
   10748:	stmia	lr!, {r0, r1, r2, r3}
   1074c:	add	r9, pc, r9
   10750:	ldm	ip, {r0, r1}
   10754:	stm	lr, {r0, r1}
   10758:	ldr	r0, [pc, #664]	; 109f8 <main@@Base+0x300>
   1075c:	add	r0, pc, r0
   10760:	bl	106bc <puts@plt>
   10764:	ldr	r0, [pc, #656]	; 109fc <main@@Base+0x304>
   10768:	add	r0, pc, r0
   1076c:	bl	106b0 <printf@plt>
   10770:	ldr	r1, [r5, #4]!
   10774:	mov	r0, fp
   10778:	bl	106b0 <printf@plt>
   1077c:	cmp	r5, sl
   10780:	bne	10770 <main@@Base+0x78>
   10784:	ldr	r0, [pc, #628]	; 10a00 <main@@Base+0x308>
   10788:	mov	r4, r6
   1078c:	add	r0, pc, r0
   10790:	bl	106bc <puts@plt>
   10794:	ldr	r3, [pc, #616]	; 10a04 <main@@Base+0x30c>
   10798:	mov	r2, #4
   1079c:	mov	r1, #6
   107a0:	ldr	sl, [r9, r3]
   107a4:	mov	r0, r8
   107a8:	mov	r3, sl
   107ac:	bl	10bf8 <sort@@Base>
   107b0:	ldr	r0, [pc, #592]	; 10a08 <main@@Base+0x310>
   107b4:	add	r0, pc, r0
   107b8:	bl	106b0 <printf@plt>
   107bc:	ldr	r1, [r4, #4]!
   107c0:	mov	r0, fp
   107c4:	bl	106b0 <printf@plt>
   107c8:	cmp	r4, r5
   107cc:	bne	107bc <main@@Base+0xc4>
   107d0:	ldr	r0, [pc, #564]	; 10a0c <main@@Base+0x314>
   107d4:	add	r5, sp, #72	; 0x48
   107d8:	add	r0, pc, r0
   107dc:	bl	106bc <puts@plt>
   107e0:	mov	lr, r7
   107e4:	mov	ip, r8
   107e8:	ldm	lr!, {r0, r1, r2, r3}
   107ec:	stmia	ip!, {r0, r1, r2, r3}
   107f0:	ldm	lr, {r0, r1}
   107f4:	stm	ip, {r0, r1}
   107f8:	ldr	r0, [pc, #528]	; 10a10 <main@@Base+0x318>
   107fc:	add	r0, pc, r0
   10800:	bl	106bc <puts@plt>
   10804:	mov	r3, #4
   10808:	str	sl, [sp]
   1080c:	mov	r2, #6
   10810:	str	r3, [r5, #-60]!	; 0xffffffc4
   10814:	mov	r1, r8
   10818:	mov	r0, r5
   1081c:	bl	10ca0 <linear_search@@Base>
   10820:	cmp	r0, #0
   10824:	beq	109c4 <main@@Base+0x2cc>
   10828:	sub	r2, r0, r8
   1082c:	ldr	r0, [pc, #480]	; 10a14 <main@@Base+0x31c>
   10830:	ldr	r1, [sp, #12]
   10834:	asr	r2, r2, #2
   10838:	add	r0, pc, r0
   1083c:	bl	106b0 <printf@plt>
   10840:	mov	lr, r7
   10844:	mov	ip, r8
   10848:	ldm	lr!, {r0, r1, r2, r3}
   1084c:	stmia	ip!, {r0, r1, r2, r3}
   10850:	mov	r3, sl
   10854:	ldm	lr, {r0, r1}
   10858:	mov	r2, #4
   1085c:	stm	ip, {r0, r1}
   10860:	mov	r1, #6
   10864:	mov	r0, r8
   10868:	bl	10bf8 <sort@@Base>
   1086c:	ldr	r0, [pc, #420]	; 10a18 <main@@Base+0x320>
   10870:	add	r0, pc, r0
   10874:	bl	106bc <puts@plt>
   10878:	str	sl, [sp]
   1087c:	mov	r0, r5
   10880:	mov	r3, #4
   10884:	mov	r2, #6
   10888:	mov	r1, r8
   1088c:	bl	10d0c <binary_search@@Base>
   10890:	cmp	r0, #0
   10894:	beq	109d8 <main@@Base+0x2e0>
   10898:	sub	r2, r0, r8
   1089c:	ldr	r0, [pc, #376]	; 10a1c <main@@Base+0x324>
   108a0:	ldr	r1, [sp, #12]
   108a4:	asr	r2, r2, #2
   108a8:	add	r0, pc, r0
   108ac:	bl	106b0 <printf@plt>
   108b0:	mov	ip, r7
   108b4:	mov	lr, r8
   108b8:	ldm	ip!, {r0, r1, r2, r3}
   108bc:	mov	r5, r6
   108c0:	ldr	r7, [pc, #344]	; 10a20 <main@@Base+0x328>
   108c4:	stmia	lr!, {r0, r1, r2, r3}
   108c8:	add	r7, pc, r7
   108cc:	ldm	ip, {r0, r1}
   108d0:	stm	lr, {r0, r1}
   108d4:	ldr	r0, [pc, #328]	; 10a24 <main@@Base+0x32c>
   108d8:	add	r0, pc, r0
   108dc:	bl	106bc <puts@plt>
   108e0:	ldr	r0, [pc, #320]	; 10a28 <main@@Base+0x330>
   108e4:	add	r0, pc, r0
   108e8:	bl	106b0 <printf@plt>
   108ec:	ldr	r1, [r5, #4]!
   108f0:	mov	r0, r7
   108f4:	bl	106b0 <printf@plt>
   108f8:	cmp	r5, r4
   108fc:	bne	108ec <main@@Base+0x1f4>
   10900:	ldr	r0, [pc, #292]	; 10a2c <main@@Base+0x334>
   10904:	add	r0, pc, r0
   10908:	bl	106bc <puts@plt>
   1090c:	mov	r0, r8
   10910:	mov	r3, sl
   10914:	mov	r2, #4
   10918:	mov	r1, #6
   1091c:	bl	10da0 <insertion_sort@@Base>
   10920:	ldr	r0, [pc, #264]	; 10a30 <main@@Base+0x338>
   10924:	add	r0, pc, r0
   10928:	bl	106b0 <printf@plt>
   1092c:	ldr	r1, [r6, #4]!
   10930:	mov	r0, r7
   10934:	bl	106b0 <printf@plt>
   10938:	cmp	r6, r4
   1093c:	bne	1092c <main@@Base+0x234>
   10940:	ldr	r0, [pc, #236]	; 10a34 <main@@Base+0x33c>
   10944:	add	r4, sp, #16
   10948:	add	r0, pc, r0
   1094c:	bl	106bc <puts@plt>
   10950:	ldr	r0, [pc, #224]	; 10a38 <main@@Base+0x340>
   10954:	add	r0, pc, r0
   10958:	bl	106bc <puts@plt>
   1095c:	ldr	r3, [pc, #216]	; 10a3c <main@@Base+0x344>
   10960:	add	r3, pc, r3
   10964:	ldm	r3, {r0, r1}
   10968:	str	r0, [sp, #16]
   1096c:	ldr	r0, [pc, #204]	; 10a40 <main@@Base+0x348>
   10970:	strb	r1, [sp, #20]
   10974:	add	r0, pc, r0
   10978:	bl	106b0 <printf@plt>
   1097c:	mov	r0, r4
   10980:	bl	106bc <puts@plt>
   10984:	mov	r0, r4
   10988:	bl	106e0 <strlen@plt>
   1098c:	ldr	r3, [pc, #176]	; 10a44 <main@@Base+0x34c>
   10990:	mov	r2, #1
   10994:	ldr	r3, [r9, r3]
   10998:	mov	r1, r0
   1099c:	mov	r0, r4
   109a0:	bl	10bf8 <sort@@Base>
   109a4:	ldr	r0, [pc, #156]	; 10a48 <main@@Base+0x350>
   109a8:	add	r0, pc, r0
   109ac:	bl	106b0 <printf@plt>
   109b0:	mov	r0, r4
   109b4:	bl	106bc <puts@plt>
   109b8:	mov	r0, #0
   109bc:	add	sp, sp, #76	; 0x4c
   109c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109c4:	ldr	r0, [pc, #128]	; 10a4c <main@@Base+0x354>
   109c8:	ldr	r1, [sp, #12]
   109cc:	add	r0, pc, r0
   109d0:	bl	106b0 <printf@plt>
   109d4:	b	10840 <main@@Base+0x148>
   109d8:	ldr	r0, [pc, #112]	; 10a50 <main@@Base+0x358>
   109dc:	ldr	r1, [sp, #12]
   109e0:	add	r0, pc, r0
   109e4:	bl	106b0 <printf@plt>
   109e8:	b	108b0 <main@@Base+0x1b8>
   109ec:			; <UNDEFINED> instruction: 0x000007b0
   109f0:	andeq	r0, r0, r4, lsr #15
   109f4:	andeq	r1, r1, ip, lsr #17
   109f8:	andeq	r0, r0, r4, ror r7
   109fc:	andeq	r0, r0, r8, ror r7
   10a00:	andeq	r0, r0, r0, lsr #15
   10a04:	andeq	r0, r0, r4, lsr #32
   10a08:	andeq	r0, r0, r8, lsr r7
   10a0c:	andeq	r0, r0, r4, asr r7
   10a10:	strdeq	r0, [r0], -r8
   10a14:	andeq	r0, r0, r8, asr #13
   10a18:	andeq	r0, r0, r4, ror #13
   10a1c:	andeq	r0, r0, r8, asr r6
   10a20:	andeq	r0, r0, r0, lsr #12
   10a24:	andeq	r0, r0, r8, lsl #13
   10a28:	strdeq	r0, [r0], -ip
   10a2c:	andeq	r0, r0, r8, lsr #12
   10a30:	andeq	r0, r0, r8, asr #11
   10a34:	andeq	r0, r0, r4, ror #11
   10a38:	andeq	r0, r0, r8, lsl r6
   10a3c:	andeq	r0, r0, r8, lsl r6
   10a40:	andeq	r0, r0, ip, ror #10
   10a44:	andeq	r0, r0, ip, lsr #32
   10a48:	andeq	r0, r0, r4, asr #10
   10a4c:	andeq	r0, r0, r4, ror #10
   10a50:	andeq	r0, r0, r0, asr r5

00010a54 <_start@@Base>:
   10a54:	mov	fp, #0
   10a58:	mov	lr, #0
   10a5c:	pop	{r1}		; (ldr r1, [sp], #4)
   10a60:	mov	r2, sp
   10a64:	push	{r2}		; (str r2, [sp, #-4]!)
   10a68:	push	{r0}		; (str r0, [sp, #-4]!)
   10a6c:	ldr	ip, [pc, #16]	; 10a84 <_start@@Base+0x30>
   10a70:	push	{ip}		; (str ip, [sp, #-4]!)
   10a74:	ldr	r0, [pc, #12]	; 10a88 <_start@@Base+0x34>
   10a78:	ldr	r3, [pc, #12]	; 10a8c <_start@@Base+0x38>
   10a7c:	bl	106c8 <__libc_start_main@plt>
   10a80:	bl	106ec <abort@plt>
   10a84:			; <UNDEFINED> instruction: 0x00010eb0
   10a88:	strdeq	r0, [r1], -r8
   10a8c:	andeq	r0, r1, r0, asr lr
   10a90:	ldr	r3, [pc, #20]	; 10aac <_start@@Base+0x58>
   10a94:	ldr	r2, [pc, #20]	; 10ab0 <_start@@Base+0x5c>
   10a98:	add	r3, pc, r3
   10a9c:	ldr	r2, [r3, r2]
   10aa0:	cmp	r2, #0
   10aa4:	bxeq	lr
   10aa8:	b	106d4 <__gmon_start__@plt>
   10aac:	andeq	r1, r1, r0, ror #10
   10ab0:	andeq	r0, r0, r8, lsr #32
   10ab4:	ldr	r3, [pc, #28]	; 10ad8 <_start@@Base+0x84>
   10ab8:	ldr	r0, [pc, #28]	; 10adc <_start@@Base+0x88>
   10abc:	sub	r3, r3, r0
   10ac0:	cmp	r3, #6
   10ac4:	bxls	lr
   10ac8:	ldr	r3, [pc, #16]	; 10ae0 <_start@@Base+0x8c>
   10acc:	cmp	r3, #0
   10ad0:	bxeq	lr
   10ad4:	bx	r3
   10ad8:	andeq	r2, r2, fp, lsr r0
   10adc:	andeq	r2, r2, r8, lsr r0
   10ae0:	andeq	r0, r0, r0
   10ae4:	ldr	r1, [pc, #36]	; 10b10 <_start@@Base+0xbc>
   10ae8:	ldr	r0, [pc, #36]	; 10b14 <_start@@Base+0xc0>
   10aec:	sub	r1, r1, r0
   10af0:	asr	r1, r1, #2
   10af4:	add	r1, r1, r1, lsr #31
   10af8:	asrs	r1, r1, #1
   10afc:	bxeq	lr
   10b00:	ldr	r3, [pc, #16]	; 10b18 <_start@@Base+0xc4>
   10b04:	cmp	r3, #0
   10b08:	bxeq	lr
   10b0c:	bx	r3
   10b10:	andeq	r2, r2, r8, lsr r0
   10b14:	andeq	r2, r2, r8, lsr r0
   10b18:	andeq	r0, r0, r0
   10b1c:	push	{r4, lr}
   10b20:	ldr	r4, [pc, #24]	; 10b40 <_start@@Base+0xec>
   10b24:	ldrb	r3, [r4]
   10b28:	cmp	r3, #0
   10b2c:	popne	{r4, pc}
   10b30:	bl	10ab4 <_start@@Base+0x60>
   10b34:	mov	r3, #1
   10b38:	strb	r3, [r4]
   10b3c:	pop	{r4, pc}
   10b40:	andeq	r2, r2, r8, lsr r0
   10b44:	ldr	r0, [pc, #40]	; 10b74 <_start@@Base+0x120>
   10b48:	ldr	r3, [r0]
   10b4c:	cmp	r3, #0
   10b50:	bne	10b58 <_start@@Base+0x104>
   10b54:	b	10ae4 <_start@@Base+0x90>
   10b58:	ldr	r3, [pc, #24]	; 10b78 <_start@@Base+0x124>
   10b5c:	cmp	r3, #0
   10b60:	beq	10b54 <_start@@Base+0x100>
   10b64:	push	{r4, lr}
   10b68:	blx	r3
   10b6c:	pop	{r4, lr}
   10b70:	b	10ae4 <_start@@Base+0x90>
   10b74:	andeq	r1, r2, r4, lsl pc
   10b78:	andeq	r0, r0, r0

00010b7c <comp_int_asc@@Base>:
   10b7c:	ldr	r2, [r0]
   10b80:	ldr	r3, [r1]
   10b84:	cmp	r2, r3
   10b88:	blt	10b98 <comp_int_asc@@Base+0x1c>
   10b8c:	movgt	r0, #1
   10b90:	movle	r0, #0
   10b94:	bx	lr
   10b98:	mvn	r0, #0
   10b9c:	bx	lr

00010ba0 <comp_char_desc@@Base>:
   10ba0:	ldrb	r2, [r0]
   10ba4:	ldrb	r3, [r1]
   10ba8:	cmp	r2, r3
   10bac:	bcc	10bbc <comp_char_desc@@Base+0x1c>
   10bb0:	mvnhi	r0, #0
   10bb4:	movls	r0, #0
   10bb8:	bx	lr
   10bbc:	mov	r0, #1
   10bc0:	bx	lr

00010bc4 <get_elem@@Base>:
   10bc4:	mla	r0, r2, r1, r0
   10bc8:	bx	lr

00010bcc <swap@@Base>:
   10bcc:	cmp	r2, #0
   10bd0:	bxle	lr
   10bd4:	add	r2, r0, r2
   10bd8:	sub	r1, r1, #1
   10bdc:	ldrb	ip, [r1, #1]
   10be0:	ldrb	r3, [r0]
   10be4:	strb	ip, [r0], #1
   10be8:	cmp	r0, r2
   10bec:	strb	r3, [r1, #1]!
   10bf0:	bne	10bdc <swap@@Base+0x10>
   10bf4:	bx	lr

00010bf8 <sort@@Base>:
   10bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bfc:	subs	r7, r1, #0
   10c00:	sub	sp, sp, #12
   10c04:	ble	10c98 <sort@@Base+0xa0>
   10c08:	mov	r9, r3
   10c0c:	mov	r6, r2
   10c10:	mov	r8, r0
   10c14:	mov	sl, #0
   10c18:	mov	r1, sl
   10c1c:	mov	r2, r6
   10c20:	mov	r0, r8
   10c24:	bl	10bc4 <get_elem@@Base>
   10c28:	add	sl, sl, #1
   10c2c:	cmp	r7, sl
   10c30:	str	r0, [sp, #4]
   10c34:	beq	10c84 <sort@@Base+0x8c>
   10c38:	mov	r5, r0
   10c3c:	mov	r4, sl
   10c40:	mov	r1, r4
   10c44:	mov	r2, r6
   10c48:	mov	r0, r8
   10c4c:	bl	10bc4 <get_elem@@Base>
   10c50:	mov	r1, r5
   10c54:	add	r4, r4, #1
   10c58:	mov	fp, r0
   10c5c:	blx	r9
   10c60:	cmp	r0, #0
   10c64:	movlt	r5, fp
   10c68:	cmp	r7, r4
   10c6c:	bne	10c40 <sort@@Base+0x48>
   10c70:	ldr	r1, [sp, #4]
   10c74:	mov	r0, r5
   10c78:	mov	r2, r6
   10c7c:	bl	10bcc <swap@@Base>
   10c80:	b	10c18 <sort@@Base+0x20>
   10c84:	mov	r2, r6
   10c88:	ldr	r1, [sp, #4]
   10c8c:	add	sp, sp, #12
   10c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c94:	b	10bcc <swap@@Base>
   10c98:	add	sp, sp, #12
   10c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010ca0 <linear_search@@Base>:
   10ca0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ca4:	subs	r5, r2, #0
   10ca8:	ldr	r8, [sp, #32]
   10cac:	ble	10d04 <linear_search@@Base+0x64>
   10cb0:	mov	r9, r3
   10cb4:	mov	r6, r1
   10cb8:	mov	r7, r0
   10cbc:	mov	r4, #0
   10cc0:	b	10cd0 <linear_search@@Base+0x30>
   10cc4:	add	r4, r4, #1
   10cc8:	cmp	r5, r4
   10ccc:	beq	10d04 <linear_search@@Base+0x64>
   10cd0:	mov	r2, r5
   10cd4:	mov	r1, r4
   10cd8:	mov	r0, r6
   10cdc:	bl	10bc4 <get_elem@@Base>
   10ce0:	mov	r1, r7
   10ce4:	blx	r8
   10ce8:	cmp	r0, #0
   10cec:	bne	10cc4 <linear_search@@Base+0x24>
   10cf0:	mov	r2, r9
   10cf4:	mov	r1, r4
   10cf8:	mov	r0, r6
   10cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d00:	b	10bc4 <get_elem@@Base>
   10d04:	mov	r0, #0
   10d08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010d0c <binary_search@@Base>:
   10d0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d10:	subs	r6, r2, #1
   10d14:	ldr	sl, [sp, #32]
   10d18:	bmi	10d98 <binary_search@@Base+0x8c>
   10d1c:	mov	r8, r3
   10d20:	mov	r7, r1
   10d24:	mov	r9, r0
   10d28:	mov	r5, #0
   10d2c:	b	10d54 <binary_search@@Base+0x48>
   10d30:	bl	10bc4 <get_elem@@Base>
   10d34:	mov	r1, r0
   10d38:	mov	r0, r9
   10d3c:	blx	sl
   10d40:	cmn	r0, #1
   10d44:	subeq	r6, r4, #1
   10d48:	addne	r5, r4, #1
   10d4c:	cmp	r5, r6
   10d50:	bgt	10d98 <binary_search@@Base+0x8c>
   10d54:	add	r4, r5, r6
   10d58:	mov	r2, r8
   10d5c:	add	r4, r4, r4, lsr #31
   10d60:	mov	r0, r7
   10d64:	asr	r4, r4, #1
   10d68:	mov	r1, r4
   10d6c:	bl	10bc4 <get_elem@@Base>
   10d70:	mov	r1, r0
   10d74:	mov	r0, r9
   10d78:	blx	sl
   10d7c:	mov	r2, r8
   10d80:	mov	r1, r4
   10d84:	cmp	r0, #0
   10d88:	mov	r0, r7
   10d8c:	beq	10d30 <binary_search@@Base+0x24>
   10d90:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d94:	b	10bc4 <get_elem@@Base>
   10d98:	mov	r0, #0
   10d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010da0 <insertion_sort@@Base>:
   10da0:	cmp	r1, #1
   10da4:	ble	10e4c <insertion_sort@@Base+0xac>
   10da8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dac:	mov	r9, r3
   10db0:	mov	r4, r2
   10db4:	mov	r7, r0
   10db8:	mov	fp, r1
   10dbc:	mov	sl, #1
   10dc0:	mov	r6, sl
   10dc4:	mov	r2, r4
   10dc8:	mov	r1, r6
   10dcc:	mov	r0, r7
   10dd0:	bl	10bc4 <get_elem@@Base>
   10dd4:	sub	r5, r6, #1
   10dd8:	mov	r2, r4
   10ddc:	mov	r1, r5
   10de0:	mov	r8, r0
   10de4:	mov	r0, r7
   10de8:	bl	10bc4 <get_elem@@Base>
   10dec:	mov	r1, r0
   10df0:	mov	r0, r8
   10df4:	blx	r9
   10df8:	mov	r1, r6
   10dfc:	mov	r2, r4
   10e00:	cmn	r0, #1
   10e04:	mov	r0, r7
   10e08:	bne	10e3c <insertion_sort@@Base+0x9c>
   10e0c:	bl	10bc4 <get_elem@@Base>
   10e10:	mov	r2, r4
   10e14:	mov	r1, r5
   10e18:	mov	r6, r0
   10e1c:	mov	r0, r7
   10e20:	bl	10bc4 <get_elem@@Base>
   10e24:	mov	r2, r4
   10e28:	mov	r1, r0
   10e2c:	mov	r0, r6
   10e30:	bl	10bcc <swap@@Base>
   10e34:	subs	r6, r5, #0
   10e38:	bne	10dc4 <insertion_sort@@Base+0x24>
   10e3c:	add	sl, sl, #1
   10e40:	cmp	fp, sl
   10e44:	bne	10dc0 <insertion_sort@@Base+0x20>
   10e48:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e4c:	bx	lr

00010e50 <__libc_csu_init@@Base>:
   10e50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e54:	mov	r7, r0
   10e58:	ldr	r6, [pc, #72]	; 10ea8 <__libc_csu_init@@Base+0x58>
   10e5c:	ldr	r5, [pc, #72]	; 10eac <__libc_csu_init@@Base+0x5c>
   10e60:	add	r6, pc, r6
   10e64:	add	r5, pc, r5
   10e68:	sub	r6, r6, r5
   10e6c:	mov	r8, r1
   10e70:	mov	r9, r2
   10e74:	bl	10690 <printf@plt-0x20>
   10e78:	asrs	r6, r6, #2
   10e7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e80:	mov	r4, #0
   10e84:	add	r4, r4, #1
   10e88:	ldr	r3, [r5], #4
   10e8c:	mov	r2, r9
   10e90:	mov	r1, r8
   10e94:	mov	r0, r7
   10e98:	blx	r3
   10e9c:	cmp	r6, r4
   10ea0:	bne	10e84 <__libc_csu_init@@Base+0x34>
   10ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ea8:	andeq	r1, r1, r8, lsr #1
   10eac:	andeq	r1, r1, r0, lsr #1

00010eb0 <__libc_csu_fini@@Base>:
   10eb0:	bx	lr

Disassembly of section .fini:

00010eb4 <.fini>:
   10eb4:	push	{r3, lr}
   10eb8:	pop	{r3, pc}
