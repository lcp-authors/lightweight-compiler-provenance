
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fc8 <.init>:
   10fc8:	push	{r3, lr}
   10fcc:	bl	1137c <__assert_fail@plt+0x4c>
   10fd0:	pop	{r3, pc}

Disassembly of section .plt:

00010fd4 <fstatfs64@plt-0x14>:
   10fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd8:	ldr	lr, [pc, #4]	; 10fe4 <fstatfs64@plt-0x4>
   10fdc:	add	lr, pc, lr
   10fe0:	ldr	pc, [lr, #8]!
   10fe4:	andeq	fp, r1, ip, lsl r0

00010fe8 <fstatfs64@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #28]!

00010ff4 <calloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #20]!

00011000 <endgrent@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #12]!

0001100c <fputs_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #4]!

00011018 <raise@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #106496	; 0x1a000
   11020:	ldr	pc, [ip, #4092]!	; 0xffc

00011024 <strcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #106496	; 0x1a000
   1102c:	ldr	pc, [ip, #4084]!	; 0xff4

00011030 <getpwuid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #106496	; 0x1a000
   11038:	ldr	pc, [ip, #4076]!	; 0xfec

0001103c <fflush@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #4068]!	; 0xfe4

00011048 <memmove@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #4060]!	; 0xfdc

00011054 <free@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011060 <__openat64_2@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #4044]!	; 0xfcc

0001106c <_exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #4036]!	; 0xfc4

00011078 <memcpy@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4028]!	; 0xfbc

00011084 <__strtoull_internal@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011090 <mbsinit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4012]!	; 0xfac

0001109c <memcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a8 <stpcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b4 <fputc_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #3988]!	; 0xf94

000110c0 <dcgettext@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #3980]!	; 0xf8c

000110cc <realloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3972]!	; 0xf84

000110d8 <textdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e4 <__fxstatat64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3956]!	; 0xf74

000110f0 <iswprint@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3948]!	; 0xf6c

000110fc <__fxstat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3940]!	; 0xf64

00011108 <fwrite@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3932]!	; 0xf5c

00011114 <lseek64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3924]!	; 0xf54

00011120 <__ctype_get_mb_cur_max@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3916]!	; 0xf4c

0001112c <strcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3908]!	; 0xf44

00011138 <__fpending@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3900]!	; 0xf3c

00011144 <mbrtowc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3892]!	; 0xf34

00011150 <error@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3884]!	; 0xf2c

0001115c <open64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3876]!	; 0xf24

00011168 <malloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3868]!	; 0xf1c

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3860]!	; 0xf14

00011180 <__freading@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3852]!	; 0xf0c

0001118c <__gmon_start__@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3844]!	; 0xf04

00011198 <getopt_long@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3836]!	; 0xefc

000111a4 <__ctype_b_loc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3828]!	; 0xef4

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3820]!	; 0xeec

000111bc <strlen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3812]!	; 0xee4

000111c8 <strchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3804]!	; 0xedc

000111d4 <openat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3796]!	; 0xed4

000111e0 <fchown@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3788]!	; 0xecc

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3780]!	; 0xec4

000111f8 <__cxa_atexit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3772]!	; 0xebc

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3756]!	; 0xeac

0001121c <fileno@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3748]!	; 0xea4

00011228 <__fprintf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3740]!	; 0xe9c

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3732]!	; 0xe94

00011240 <fseeko64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3724]!	; 0xe8c

0001124c <fcntl64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3716]!	; 0xe84

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3708]!	; 0xe7c

00011264 <strrchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3700]!	; 0xe74

00011270 <nl_langinfo@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3692]!	; 0xe6c

0001127c <readdir64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3684]!	; 0xe64

00011288 <fdopendir@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3676]!	; 0xe5c

00011294 <dirfd@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3668]!	; 0xe54

000112a0 <fchdir@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3660]!	; 0xe4c

000112ac <qsort@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3652]!	; 0xe44

000112b8 <fchownat@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c4 <bindtextdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3636]!	; 0xe34

000112d0 <__xstat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3628]!	; 0xe2c

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3620]!	; 0xe24

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3612]!	; 0xe1c

000112f4 <close@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3604]!	; 0xe14

00011300 <__lxstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3596]!	; 0xe0c

0001130c <closedir@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3588]!	; 0xe04

00011318 <getgrgid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3580]!	; 0xdfc

00011324 <getgrnam@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011330 <__assert_fail@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3564]!	; 0xdec

Disassembly of section .text:

00011340 <.text>:
   11340:	mov	fp, #0
   11344:	mov	lr, #0
   11348:	pop	{r1}		; (ldr r1, [sp], #4)
   1134c:	mov	r2, sp
   11350:	push	{r2}		; (str r2, [sp, #-4]!)
   11354:	push	{r0}		; (str r0, [sp, #-4]!)
   11358:	ldr	ip, [pc, #16]	; 11370 <__assert_fail@plt+0x40>
   1135c:	push	{ip}		; (str ip, [sp, #-4]!)
   11360:	ldr	r0, [pc, #12]	; 11374 <__assert_fail@plt+0x44>
   11364:	ldr	r3, [pc, #12]	; 11378 <__assert_fail@plt+0x48>
   11368:	bl	11174 <__libc_start_main@plt>
   1136c:	bl	112e8 <abort@plt>
   11370:	andeq	sl, r1, r4, ror r4
   11374:	muleq	r1, r0, r8
   11378:	andeq	sl, r1, r4, lsl r4
   1137c:	ldr	r3, [pc, #20]	; 11398 <__assert_fail@plt+0x68>
   11380:	ldr	r2, [pc, #20]	; 1139c <__assert_fail@plt+0x6c>
   11384:	add	r3, pc, r3
   11388:	ldr	r2, [r3, r2]
   1138c:	cmp	r2, #0
   11390:	bxeq	lr
   11394:	b	1118c <__gmon_start__@plt>
   11398:	andeq	sl, r1, r4, ror ip
   1139c:	andeq	r0, r0, r8, lsr #2
   113a0:	ldr	r0, [pc, #24]	; 113c0 <__assert_fail@plt+0x90>
   113a4:	ldr	r3, [pc, #24]	; 113c4 <__assert_fail@plt+0x94>
   113a8:	cmp	r3, r0
   113ac:	bxeq	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <__assert_fail@plt+0x98>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	andeq	ip, r2, ip, ror r1
   113c4:	andeq	ip, r2, ip, ror r1
   113c8:	andeq	r0, r0, r0
   113cc:	ldr	r0, [pc, #36]	; 113f8 <__assert_fail@plt+0xc8>
   113d0:	ldr	r1, [pc, #36]	; 113fc <__assert_fail@plt+0xcc>
   113d4:	sub	r1, r1, r0
   113d8:	asr	r1, r1, #2
   113dc:	add	r1, r1, r1, lsr #31
   113e0:	asrs	r1, r1, #1
   113e4:	bxeq	lr
   113e8:	ldr	r3, [pc, #16]	; 11400 <__assert_fail@plt+0xd0>
   113ec:	cmp	r3, #0
   113f0:	bxeq	lr
   113f4:	bx	r3
   113f8:	andeq	ip, r2, ip, ror r1
   113fc:	andeq	ip, r2, ip, ror r1
   11400:	andeq	r0, r0, r0
   11404:	push	{r4, lr}
   11408:	ldr	r4, [pc, #24]	; 11428 <__assert_fail@plt+0xf8>
   1140c:	ldrb	r3, [r4]
   11410:	cmp	r3, #0
   11414:	popne	{r4, pc}
   11418:	bl	113a0 <__assert_fail@plt+0x70>
   1141c:	mov	r3, #1
   11420:	strb	r3, [r4]
   11424:	pop	{r4, pc}
   11428:	muleq	r2, ip, r1
   1142c:	b	113cc <__assert_fail@plt+0x9c>
   11430:	push	{lr}		; (str lr, [sp, #-4]!)
   11434:	sub	sp, sp, #60	; 0x3c
   11438:	subs	r5, r0, #0
   1143c:	beq	11484 <__assert_fail@plt+0x154>
   11440:	movw	r3, #49552	; 0xc190
   11444:	movt	r3, #2
   11448:	ldr	r4, [r3]
   1144c:	mov	r2, #5
   11450:	movw	r1, #42412	; 0xa5ac
   11454:	movt	r1, #1
   11458:	mov	r0, #0
   1145c:	bl	110c0 <dcgettext@plt>
   11460:	movw	r3, #49600	; 0xc1c0
   11464:	movt	r3, #2
   11468:	ldr	r3, [r3]
   1146c:	mov	r2, r0
   11470:	mov	r1, #1
   11474:	mov	r0, r4
   11478:	bl	11228 <__fprintf_chk@plt>
   1147c:	mov	r0, r5
   11480:	bl	111b0 <exit@plt>
   11484:	mov	r2, #5
   11488:	movw	r1, #42452	; 0xa5d4
   1148c:	movt	r1, #1
   11490:	mov	r0, #0
   11494:	bl	110c0 <dcgettext@plt>
   11498:	movw	r6, #49600	; 0xc1c0
   1149c:	movt	r6, #2
   114a0:	ldr	r3, [r6]
   114a4:	mov	r2, r3
   114a8:	mov	r1, r0
   114ac:	mov	r0, #1
   114b0:	bl	11210 <__printf_chk@plt>
   114b4:	mov	r2, #5
   114b8:	movw	r1, #42540	; 0xa62c
   114bc:	movt	r1, #1
   114c0:	mov	r0, #0
   114c4:	bl	110c0 <dcgettext@plt>
   114c8:	movw	r4, #49556	; 0xc194
   114cc:	movt	r4, #2
   114d0:	ldr	r1, [r4]
   114d4:	bl	1100c <fputs_unlocked@plt>
   114d8:	mov	r2, #5
   114dc:	movw	r1, #42648	; 0xa698
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	bl	110c0 <dcgettext@plt>
   114ec:	ldr	r1, [r4]
   114f0:	bl	1100c <fputs_unlocked@plt>
   114f4:	mov	r2, #5
   114f8:	movw	r1, #42852	; 0xa764
   114fc:	movt	r1, #1
   11500:	mov	r0, #0
   11504:	bl	110c0 <dcgettext@plt>
   11508:	ldr	r1, [r4]
   1150c:	bl	1100c <fputs_unlocked@plt>
   11510:	mov	r2, #5
   11514:	movw	r1, #43084	; 0xa84c
   11518:	movt	r1, #1
   1151c:	mov	r0, #0
   11520:	bl	110c0 <dcgettext@plt>
   11524:	ldr	r1, [r4]
   11528:	bl	1100c <fputs_unlocked@plt>
   1152c:	mov	r2, #5
   11530:	movw	r1, #43204	; 0xa8c4
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	bl	110c0 <dcgettext@plt>
   11540:	ldr	r1, [r4]
   11544:	bl	1100c <fputs_unlocked@plt>
   11548:	mov	r2, #5
   1154c:	movw	r1, #43332	; 0xa944
   11550:	movt	r1, #1
   11554:	mov	r0, #0
   11558:	bl	110c0 <dcgettext@plt>
   1155c:	ldr	r1, [r4]
   11560:	bl	1100c <fputs_unlocked@plt>
   11564:	mov	r2, #5
   11568:	movw	r1, #43440	; 0xa9b0
   1156c:	movt	r1, #1
   11570:	mov	r0, #0
   11574:	bl	110c0 <dcgettext@plt>
   11578:	ldr	r1, [r4]
   1157c:	bl	1100c <fputs_unlocked@plt>
   11580:	mov	r2, #5
   11584:	movw	r1, #43512	; 0xa9f8
   11588:	movt	r1, #1
   1158c:	mov	r0, #0
   11590:	bl	110c0 <dcgettext@plt>
   11594:	ldr	r1, [r4]
   11598:	bl	1100c <fputs_unlocked@plt>
   1159c:	mov	r2, #5
   115a0:	movw	r1, #43980	; 0xabcc
   115a4:	movt	r1, #1
   115a8:	mov	r0, #0
   115ac:	bl	110c0 <dcgettext@plt>
   115b0:	ldr	r1, [r4]
   115b4:	bl	1100c <fputs_unlocked@plt>
   115b8:	mov	r2, #5
   115bc:	movw	r1, #44028	; 0xabfc
   115c0:	movt	r1, #1
   115c4:	mov	r0, #0
   115c8:	bl	110c0 <dcgettext@plt>
   115cc:	ldr	r1, [r4]
   115d0:	bl	1100c <fputs_unlocked@plt>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #44084	; 0xac34
   115dc:	movt	r1, #1
   115e0:	mov	r0, #0
   115e4:	bl	110c0 <dcgettext@plt>
   115e8:	ldr	r2, [r6]
   115ec:	mov	r3, r2
   115f0:	mov	r1, r0
   115f4:	mov	r0, #1
   115f8:	bl	11210 <__printf_chk@plt>
   115fc:	movw	r0, #42140	; 0xa49c
   11600:	movt	r0, #1
   11604:	ldr	r1, [r0]
   11608:	ldr	r3, [r0, #4]
   1160c:	str	r1, [sp]
   11610:	str	r3, [sp, #4]
   11614:	ldrd	r2, [r0, #8]
   11618:	strd	r2, [sp, #8]
   1161c:	ldrd	r2, [r0, #16]
   11620:	strd	r2, [sp, #16]
   11624:	ldrd	r2, [r0, #24]
   11628:	strd	r2, [sp, #24]
   1162c:	ldrd	r2, [r0, #32]
   11630:	strd	r2, [sp, #32]
   11634:	ldrd	r2, [r0, #40]	; 0x28
   11638:	strd	r2, [sp, #40]	; 0x28
   1163c:	ldrd	r2, [r0, #48]	; 0x30
   11640:	strd	r2, [sp, #48]	; 0x30
   11644:	cmp	r1, #0
   11648:	moveq	r4, sp
   1164c:	beq	11678 <__assert_fail@plt+0x348>
   11650:	mov	r4, sp
   11654:	movw	r6, #42404	; 0xa5a4
   11658:	movt	r6, #1
   1165c:	mov	r0, r6
   11660:	bl	11024 <strcmp@plt>
   11664:	cmp	r0, #0
   11668:	beq	11678 <__assert_fail@plt+0x348>
   1166c:	ldr	r1, [r4, #8]!
   11670:	cmp	r1, #0
   11674:	bne	1165c <__assert_fail@plt+0x32c>
   11678:	ldr	r4, [r4, #4]
   1167c:	cmp	r4, #0
   11680:	beq	117dc <__assert_fail@plt+0x4ac>
   11684:	mov	r2, #5
   11688:	movw	r1, #44220	; 0xacbc
   1168c:	movt	r1, #1
   11690:	mov	r0, #0
   11694:	bl	110c0 <dcgettext@plt>
   11698:	movw	r3, #44244	; 0xacd4
   1169c:	movt	r3, #1
   116a0:	movw	r2, #44284	; 0xacfc
   116a4:	movt	r2, #1
   116a8:	mov	r1, r0
   116ac:	mov	r0, #1
   116b0:	bl	11210 <__printf_chk@plt>
   116b4:	mov	r1, #0
   116b8:	mov	r0, #5
   116bc:	bl	11258 <setlocale@plt>
   116c0:	cmp	r0, #0
   116c4:	beq	116e0 <__assert_fail@plt+0x3b0>
   116c8:	mov	r2, #3
   116cc:	movw	r1, #44300	; 0xad0c
   116d0:	movt	r1, #1
   116d4:	bl	112dc <strncmp@plt>
   116d8:	cmp	r0, #0
   116dc:	bne	1175c <__assert_fail@plt+0x42c>
   116e0:	mov	r2, #5
   116e4:	movw	r1, #44376	; 0xad58
   116e8:	movt	r1, #1
   116ec:	mov	r0, #0
   116f0:	bl	110c0 <dcgettext@plt>
   116f4:	movw	r6, #42404	; 0xa5a4
   116f8:	movt	r6, #1
   116fc:	mov	r3, r6
   11700:	movw	r2, #44244	; 0xacd4
   11704:	movt	r2, #1
   11708:	mov	r1, r0
   1170c:	mov	r0, #1
   11710:	bl	11210 <__printf_chk@plt>
   11714:	mov	r2, #5
   11718:	movw	r1, #44404	; 0xad74
   1171c:	movt	r1, #1
   11720:	mov	r0, #0
   11724:	bl	110c0 <dcgettext@plt>
   11728:	mov	r1, r0
   1172c:	movw	r2, #44676	; 0xae84
   11730:	movt	r2, #1
   11734:	movw	r3, #43976	; 0xabc8
   11738:	movt	r3, #1
   1173c:	cmp	r4, r6
   11740:	moveq	r3, r2
   11744:	mov	r2, r4
   11748:	mov	r0, #1
   1174c:	bl	11210 <__printf_chk@plt>
   11750:	b	1147c <__assert_fail@plt+0x14c>
   11754:	movw	r4, #42404	; 0xa5a4
   11758:	movt	r4, #1
   1175c:	mov	r2, #5
   11760:	movw	r1, #44304	; 0xad10
   11764:	movt	r1, #1
   11768:	mov	r0, #0
   1176c:	bl	110c0 <dcgettext@plt>
   11770:	movw	r3, #49556	; 0xc194
   11774:	movt	r3, #2
   11778:	ldr	r1, [r3]
   1177c:	bl	1100c <fputs_unlocked@plt>
   11780:	b	116e0 <__assert_fail@plt+0x3b0>
   11784:	mov	r2, #5
   11788:	movw	r1, #44376	; 0xad58
   1178c:	movt	r1, #1
   11790:	mov	r0, #0
   11794:	bl	110c0 <dcgettext@plt>
   11798:	movw	r4, #42404	; 0xa5a4
   1179c:	movt	r4, #1
   117a0:	mov	r3, r4
   117a4:	movw	r2, #44244	; 0xacd4
   117a8:	movt	r2, #1
   117ac:	mov	r1, r0
   117b0:	mov	r0, #1
   117b4:	bl	11210 <__printf_chk@plt>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #44404	; 0xad74
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	110c0 <dcgettext@plt>
   117cc:	mov	r1, r0
   117d0:	movw	r3, #44676	; 0xae84
   117d4:	movt	r3, #1
   117d8:	b	11744 <__assert_fail@plt+0x414>
   117dc:	mov	r2, #5
   117e0:	movw	r1, #44220	; 0xacbc
   117e4:	movt	r1, #1
   117e8:	mov	r0, #0
   117ec:	bl	110c0 <dcgettext@plt>
   117f0:	movw	r3, #44244	; 0xacd4
   117f4:	movt	r3, #1
   117f8:	movw	r2, #44284	; 0xacfc
   117fc:	movt	r2, #1
   11800:	mov	r1, r0
   11804:	mov	r0, #1
   11808:	bl	11210 <__printf_chk@plt>
   1180c:	mov	r1, #0
   11810:	mov	r0, #5
   11814:	bl	11258 <setlocale@plt>
   11818:	cmp	r0, #0
   1181c:	beq	11784 <__assert_fail@plt+0x454>
   11820:	mov	r2, #3
   11824:	movw	r1, #44300	; 0xad0c
   11828:	movt	r1, #1
   1182c:	bl	112dc <strncmp@plt>
   11830:	cmp	r0, #0
   11834:	bne	11754 <__assert_fail@plt+0x424>
   11838:	mov	r2, #5
   1183c:	movw	r1, #44376	; 0xad58
   11840:	movt	r1, #1
   11844:	mov	r0, #0
   11848:	bl	110c0 <dcgettext@plt>
   1184c:	movw	r4, #42404	; 0xa5a4
   11850:	movt	r4, #1
   11854:	mov	r3, r4
   11858:	movw	r2, #44244	; 0xacd4
   1185c:	movt	r2, #1
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	bl	11210 <__printf_chk@plt>
   1186c:	mov	r2, #5
   11870:	movw	r1, #44404	; 0xad74
   11874:	movt	r1, #1
   11878:	mov	r0, #0
   1187c:	bl	110c0 <dcgettext@plt>
   11880:	mov	r1, r0
   11884:	movw	r3, #44676	; 0xae84
   11888:	movt	r3, #1
   1188c:	b	11744 <__assert_fail@plt+0x414>
   11890:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11894:	strd	r6, [sp, #8]
   11898:	strd	r8, [sp, #16]
   1189c:	strd	sl, [sp, #24]
   118a0:	str	lr, [sp, #32]
   118a4:	sub	sp, sp, #148	; 0x94
   118a8:	mov	r6, r0
   118ac:	mov	r5, r1
   118b0:	ldr	r0, [r1]
   118b4:	bl	163e0 <__assert_fail@plt+0x50b0>
   118b8:	movw	r1, #43976	; 0xabc8
   118bc:	movt	r1, #1
   118c0:	mov	r0, #6
   118c4:	bl	11258 <setlocale@plt>
   118c8:	movw	r4, #44288	; 0xad00
   118cc:	movt	r4, #1
   118d0:	movw	r1, #44456	; 0xada8
   118d4:	movt	r1, #1
   118d8:	mov	r0, r4
   118dc:	bl	112c4 <bindtextdomain@plt>
   118e0:	mov	r0, r4
   118e4:	bl	110d8 <textdomain@plt>
   118e8:	movw	r0, #11220	; 0x2bd4
   118ec:	movt	r0, #1
   118f0:	bl	1a478 <__assert_fail@plt+0x9148>
   118f4:	add	r0, sp, #120	; 0x78
   118f8:	bl	11e24 <__assert_fail@plt+0xaf4>
   118fc:	mvn	sl, #0
   11900:	mov	r8, #16
   11904:	mov	r9, #0
   11908:	ldr	r7, [pc, #1128]	; 11d78 <__assert_fail@plt+0xa48>
   1190c:	movw	r4, #44512	; 0xade0
   11910:	movt	r4, #1
   11914:	movw	fp, #49568	; 0xc1a0
   11918:	movt	fp, #2
   1191c:	b	11a14 <__assert_fail@plt+0x6e4>
   11920:	cmp	r0, #72	; 0x48
   11924:	beq	11a00 <__assert_fail@plt+0x6d0>
   11928:	ble	1194c <__assert_fail@plt+0x61c>
   1192c:	cmp	r0, #80	; 0x50
   11930:	beq	11a08 <__assert_fail@plt+0x6d8>
   11934:	cmp	r0, #82	; 0x52
   11938:	beq	11988 <__assert_fail@plt+0x658>
   1193c:	cmp	r0, #76	; 0x4c
   11940:	beq	11a10 <__assert_fail@plt+0x6e0>
   11944:	mov	r0, #1
   11948:	bl	11430 <__assert_fail@plt+0x100>
   1194c:	cmn	r0, #3
   11950:	beq	119ac <__assert_fail@plt+0x67c>
   11954:	cmn	r0, #2
   11958:	bne	11944 <__assert_fail@plt+0x614>
   1195c:	mov	r0, #0
   11960:	bl	11430 <__assert_fail@plt+0x100>
   11964:	cmp	r0, #104	; 0x68
   11968:	beq	11a88 <__assert_fail@plt+0x758>
   1196c:	cmp	r0, #118	; 0x76
   11970:	beq	119a0 <__assert_fail@plt+0x670>
   11974:	cmp	r0, #102	; 0x66
   11978:	bne	11944 <__assert_fail@plt+0x614>
   1197c:	mov	r3, #1
   11980:	strb	r3, [sp, #133]	; 0x85
   11984:	b	11a14 <__assert_fail@plt+0x6e4>
   11988:	mov	r3, #1
   1198c:	strb	r3, [sp, #124]	; 0x7c
   11990:	b	11a14 <__assert_fail@plt+0x6e4>
   11994:	mov	r3, #1
   11998:	str	r3, [sp, #120]	; 0x78
   1199c:	b	11a14 <__assert_fail@plt+0x6e4>
   119a0:	mov	r3, #0
   119a4:	str	r3, [sp, #120]	; 0x78
   119a8:	b	11a14 <__assert_fail@plt+0x6e4>
   119ac:	movw	r3, #49460	; 0xc134
   119b0:	movt	r3, #2
   119b4:	movw	r0, #49556	; 0xc194
   119b8:	movt	r0, #2
   119bc:	mov	r4, #0
   119c0:	str	r4, [sp, #8]
   119c4:	movw	r2, #44480	; 0xadc0
   119c8:	movt	r2, #1
   119cc:	str	r2, [sp, #4]
   119d0:	movw	r2, #44496	; 0xadd0
   119d4:	movt	r2, #1
   119d8:	str	r2, [sp]
   119dc:	ldr	r3, [r3]
   119e0:	movw	r2, #44284	; 0xacfc
   119e4:	movt	r2, #1
   119e8:	movw	r1, #42404	; 0xa5a4
   119ec:	movt	r1, #1
   119f0:	ldr	r0, [r0]
   119f4:	bl	18c88 <__assert_fail@plt+0x7958>
   119f8:	mov	r0, r4
   119fc:	bl	111b0 <exit@plt>
   11a00:	mov	r8, #17
   11a04:	b	11a14 <__assert_fail@plt+0x6e4>
   11a08:	mov	r8, #16
   11a0c:	b	11a14 <__assert_fail@plt+0x6e4>
   11a10:	mov	r8, #2
   11a14:	mov	r3, #0
   11a18:	str	r3, [sp]
   11a1c:	mov	r3, r7
   11a20:	mov	r2, r4
   11a24:	mov	r1, r5
   11a28:	mov	r0, r6
   11a2c:	bl	11198 <getopt_long@plt>
   11a30:	cmn	r0, #1
   11a34:	beq	11aa0 <__assert_fail@plt+0x770>
   11a38:	cmp	r0, #99	; 0x63
   11a3c:	beq	11994 <__assert_fail@plt+0x664>
   11a40:	ble	11920 <__assert_fail@plt+0x5f0>
   11a44:	cmp	r0, #256	; 0x100
   11a48:	beq	11a80 <__assert_fail@plt+0x750>
   11a4c:	ble	11964 <__assert_fail@plt+0x634>
   11a50:	movw	r3, #258	; 0x102
   11a54:	cmp	r0, r3
   11a58:	beq	11a90 <__assert_fail@plt+0x760>
   11a5c:	blt	11a98 <__assert_fail@plt+0x768>
   11a60:	movw	r3, #259	; 0x103
   11a64:	cmp	r0, r3
   11a68:	bne	11944 <__assert_fail@plt+0x614>
   11a6c:	movw	r3, #49560	; 0xc198
   11a70:	movt	r3, #2
   11a74:	ldr	r3, [r3]
   11a78:	str	r3, [fp]
   11a7c:	b	11a14 <__assert_fail@plt+0x6e4>
   11a80:	mov	sl, #1
   11a84:	b	11a14 <__assert_fail@plt+0x6e4>
   11a88:	mov	sl, #0
   11a8c:	b	11a14 <__assert_fail@plt+0x6e4>
   11a90:	mov	r9, #1
   11a94:	b	11a14 <__assert_fail@plt+0x6e4>
   11a98:	mov	r9, #0
   11a9c:	b	11a14 <__assert_fail@plt+0x6e4>
   11aa0:	ldrb	r3, [sp, #124]	; 0x7c
   11aa4:	cmp	r3, #0
   11aa8:	beq	11ae4 <__assert_fail@plt+0x7b4>
   11aac:	cmp	r8, #16
   11ab0:	bne	11ae8 <__assert_fail@plt+0x7b8>
   11ab4:	cmp	sl, #1
   11ab8:	movne	sl, #0
   11abc:	bne	11ae8 <__assert_fail@plt+0x7b8>
   11ac0:	mov	r2, #5
   11ac4:	movw	r1, #44524	; 0xadec
   11ac8:	movt	r1, #1
   11acc:	mov	r0, #0
   11ad0:	bl	110c0 <dcgettext@plt>
   11ad4:	mov	r2, r0
   11ad8:	mov	r1, #0
   11adc:	mov	r0, #1
   11ae0:	bl	11150 <error@plt>
   11ae4:	mov	r8, #16
   11ae8:	adds	sl, sl, #0
   11aec:	movne	sl, #1
   11af0:	strb	sl, [sp, #132]	; 0x84
   11af4:	movw	r3, #49544	; 0xc188
   11af8:	movt	r3, #2
   11afc:	ldr	r2, [r3]
   11b00:	sub	r1, r6, r2
   11b04:	movw	r3, #49568	; 0xc1a0
   11b08:	movt	r3, #2
   11b0c:	ldr	r4, [r3]
   11b10:	cmp	r4, #0
   11b14:	beq	11d20 <__assert_fail@plt+0x9f0>
   11b18:	cmp	r1, #0
   11b1c:	bgt	11b90 <__assert_fail@plt+0x860>
   11b20:	cmp	r2, r6
   11b24:	blt	11b54 <__assert_fail@plt+0x824>
   11b28:	mov	r2, #5
   11b2c:	movw	r1, #44568	; 0xae18
   11b30:	movt	r1, #1
   11b34:	mov	r0, #0
   11b38:	bl	110c0 <dcgettext@plt>
   11b3c:	mov	r2, r0
   11b40:	mov	r1, #0
   11b44:	mov	r0, r1
   11b48:	bl	11150 <error@plt>
   11b4c:	mov	r0, #1
   11b50:	bl	11430 <__assert_fail@plt+0x100>
   11b54:	mov	r2, #5
   11b58:	movw	r1, #44584	; 0xae28
   11b5c:	movt	r1, #1
   11b60:	mov	r0, #0
   11b64:	bl	110c0 <dcgettext@plt>
   11b68:	mov	r4, r0
   11b6c:	sub	r6, r6, #-1073741823	; 0xc0000001
   11b70:	ldr	r0, [r5, r6, lsl #2]
   11b74:	bl	186dc <__assert_fail@plt+0x73ac>
   11b78:	mov	r3, r0
   11b7c:	mov	r2, r4
   11b80:	mov	r1, #0
   11b84:	mov	r0, r1
   11b88:	bl	11150 <error@plt>
   11b8c:	b	11b4c <__assert_fail@plt+0x81c>
   11b90:	add	r2, sp, #16
   11b94:	mov	r1, r4
   11b98:	mov	r0, #3
   11b9c:	bl	112d0 <__xstat64@plt>
   11ba0:	cmp	r0, #0
   11ba4:	bne	11c00 <__assert_fail@plt+0x8d0>
   11ba8:	ldr	r4, [sp, #44]	; 0x2c
   11bac:	mov	r0, r4
   11bb0:	bl	11e78 <__assert_fail@plt+0xb48>
   11bb4:	str	r0, [sp, #140]	; 0x8c
   11bb8:	ldrb	r3, [sp, #124]	; 0x7c
   11bbc:	tst	r9, r3
   11bc0:	bne	11cc8 <__assert_fail@plt+0x998>
   11bc4:	movw	r3, #49544	; 0xc188
   11bc8:	movt	r3, #2
   11bcc:	ldr	r0, [r3]
   11bd0:	add	r3, sp, #120	; 0x78
   11bd4:	str	r3, [sp, #8]
   11bd8:	mvn	r2, #0
   11bdc:	str	r2, [sp, #4]
   11be0:	str	r2, [sp]
   11be4:	mov	r3, r4
   11be8:	orr	r1, r8, #1024	; 0x400
   11bec:	add	r0, r5, r0, lsl #2
   11bf0:	bl	11f08 <__assert_fail@plt+0xbd8>
   11bf4:	eor	r0, r0, #1
   11bf8:	uxtb	r0, r0
   11bfc:	bl	111b0 <exit@plt>
   11c00:	bl	111ec <__errno_location@plt>
   11c04:	ldr	r5, [r0]
   11c08:	mov	r2, #5
   11c0c:	movw	r1, #44612	; 0xae44
   11c10:	movt	r1, #1
   11c14:	mov	r0, #0
   11c18:	bl	110c0 <dcgettext@plt>
   11c1c:	mov	r6, r0
   11c20:	mov	r1, r4
   11c24:	mov	r0, #4
   11c28:	bl	183ec <__assert_fail@plt+0x70bc>
   11c2c:	mov	r3, r0
   11c30:	mov	r2, r6
   11c34:	mov	r1, r5
   11c38:	mov	r0, #1
   11c3c:	bl	11150 <error@plt>
   11c40:	mov	r0, r6
   11c44:	bl	191cc <__assert_fail@plt+0x7e9c>
   11c48:	mov	r4, r0
   11c4c:	b	11d48 <__assert_fail@plt+0xa18>
   11c50:	movw	r3, #43976	; 0xabc8
   11c54:	movt	r3, #1
   11c58:	str	r3, [sp]
   11c5c:	add	r3, sp, #16
   11c60:	mov	r2, #10
   11c64:	mov	r1, #0
   11c68:	mov	r0, r6
   11c6c:	bl	193ec <__assert_fail@plt+0x80bc>
   11c70:	cmp	r0, #0
   11c74:	bne	11c94 <__assert_fail@plt+0x964>
   11c78:	ldrd	r2, [sp, #16]
   11c7c:	mvn	r0, #0
   11c80:	mov	r1, #0
   11c84:	cmp	r3, r1
   11c88:	cmpeq	r2, r0
   11c8c:	movls	r4, r2
   11c90:	bls	11d70 <__assert_fail@plt+0xa40>
   11c94:	mov	r2, #5
   11c98:	movw	r1, #44644	; 0xae64
   11c9c:	movt	r1, #1
   11ca0:	mov	r0, #0
   11ca4:	bl	110c0 <dcgettext@plt>
   11ca8:	mov	r4, r0
   11cac:	mov	r0, r6
   11cb0:	bl	186dc <__assert_fail@plt+0x73ac>
   11cb4:	mov	r3, r0
   11cb8:	mov	r2, r4
   11cbc:	mov	r1, #0
   11cc0:	mov	r0, #1
   11cc4:	bl	11150 <error@plt>
   11cc8:	ldr	r0, [pc, #172]	; 11d7c <__assert_fail@plt+0xa4c>
   11ccc:	bl	186fc <__assert_fail@plt+0x73cc>
   11cd0:	str	r0, [sp, #128]	; 0x80
   11cd4:	cmp	r0, #0
   11cd8:	bne	11bc4 <__assert_fail@plt+0x894>
   11cdc:	bl	111ec <__errno_location@plt>
   11ce0:	ldr	r4, [r0]
   11ce4:	mov	r2, #5
   11ce8:	movw	r1, #44612	; 0xae44
   11cec:	movt	r1, #1
   11cf0:	mov	r0, #0
   11cf4:	bl	110c0 <dcgettext@plt>
   11cf8:	mov	r5, r0
   11cfc:	movw	r1, #44664	; 0xae78
   11d00:	movt	r1, #1
   11d04:	mov	r0, #4
   11d08:	bl	183ec <__assert_fail@plt+0x70bc>
   11d0c:	mov	r3, r0
   11d10:	mov	r2, r5
   11d14:	mov	r1, r4
   11d18:	mov	r0, #1
   11d1c:	bl	11150 <error@plt>
   11d20:	cmp	r1, #1
   11d24:	ble	11b20 <__assert_fail@plt+0x7f0>
   11d28:	movw	r3, #49544	; 0xc188
   11d2c:	movt	r3, #2
   11d30:	add	r1, r2, #1
   11d34:	str	r1, [r3]
   11d38:	ldr	r6, [r5, r2, lsl #2]
   11d3c:	ldrb	r3, [r6]
   11d40:	cmp	r3, #0
   11d44:	bne	11c40 <__assert_fail@plt+0x910>
   11d48:	str	r4, [sp, #140]	; 0x8c
   11d4c:	ldrb	r3, [r6]
   11d50:	cmp	r3, #0
   11d54:	mvneq	r4, #0
   11d58:	beq	11bb8 <__assert_fail@plt+0x888>
   11d5c:	mov	r0, r6
   11d60:	bl	11324 <getgrnam@plt>
   11d64:	cmp	r0, #0
   11d68:	ldrne	r4, [r0, #8]
   11d6c:	beq	11c50 <__assert_fail@plt+0x920>
   11d70:	bl	11000 <endgrent@plt>
   11d74:	b	11bb8 <__assert_fail@plt+0x888>
   11d78:	ldrdeq	sl, [r1], -r4
   11d7c:	andeq	ip, r2, r8, lsr #3
   11d80:	strd	r4, [sp, #-16]!
   11d84:	str	r6, [sp, #8]
   11d88:	str	lr, [sp, #12]
   11d8c:	mov	r4, r1
   11d90:	subs	r5, r0, #0
   11d94:	beq	11e08 <__assert_fail@plt+0xad8>
   11d98:	cmp	r1, #0
   11d9c:	beq	11df8 <__assert_fail@plt+0xac8>
   11da0:	mov	r0, r5
   11da4:	bl	111bc <strlen@plt>
   11da8:	mov	r6, r0
   11dac:	mov	r0, r4
   11db0:	bl	111bc <strlen@plt>
   11db4:	add	r0, r6, r0
   11db8:	add	r0, r0, #2
   11dbc:	bl	18d60 <__assert_fail@plt+0x7a30>
   11dc0:	mov	r6, r0
   11dc4:	mov	r1, r5
   11dc8:	bl	110a8 <stpcpy@plt>
   11dcc:	movw	r3, #44912	; 0xaf70
   11dd0:	movt	r3, #1
   11dd4:	ldrh	r3, [r3]
   11dd8:	strh	r3, [r0], #1
   11ddc:	mov	r1, r4
   11de0:	bl	1112c <strcpy@plt>
   11de4:	mov	r0, r6
   11de8:	ldrd	r4, [sp]
   11dec:	ldr	r6, [sp, #8]
   11df0:	add	sp, sp, #12
   11df4:	pop	{pc}		; (ldr pc, [sp], #4)
   11df8:	mov	r0, r5
   11dfc:	bl	191cc <__assert_fail@plt+0x7e9c>
   11e00:	mov	r6, r0
   11e04:	b	11de4 <__assert_fail@plt+0xab4>
   11e08:	cmp	r1, #0
   11e0c:	moveq	r6, r1
   11e10:	beq	11de4 <__assert_fail@plt+0xab4>
   11e14:	mov	r0, r1
   11e18:	bl	191cc <__assert_fail@plt+0x7e9c>
   11e1c:	mov	r6, r0
   11e20:	b	11de4 <__assert_fail@plt+0xab4>
   11e24:	mov	r3, #2
   11e28:	str	r3, [r0]
   11e2c:	mov	r3, #0
   11e30:	str	r3, [r0, #8]
   11e34:	mov	r2, #1
   11e38:	strb	r2, [r0, #12]
   11e3c:	strb	r3, [r0, #4]
   11e40:	strb	r3, [r0, #13]
   11e44:	str	r3, [r0, #16]
   11e48:	str	r3, [r0, #20]
   11e4c:	bx	lr
   11e50:	str	r4, [sp, #-8]!
   11e54:	str	lr, [sp, #4]
   11e58:	mov	r4, r0
   11e5c:	ldr	r0, [r0, #16]
   11e60:	bl	12ce4 <__assert_fail@plt+0x19b4>
   11e64:	ldr	r0, [r4, #20]
   11e68:	bl	12ce4 <__assert_fail@plt+0x19b4>
   11e6c:	ldr	r4, [sp]
   11e70:	add	sp, sp, #4
   11e74:	pop	{pc}		; (ldr pc, [sp], #4)
   11e78:	str	r4, [sp, #-8]!
   11e7c:	str	lr, [sp, #4]
   11e80:	sub	sp, sp, #24
   11e84:	mov	r4, r0
   11e88:	bl	11318 <getgrgid@plt>
   11e8c:	cmp	r0, #0
   11e90:	beq	11eac <__assert_fail@plt+0xb7c>
   11e94:	ldr	r0, [r0]
   11e98:	bl	191cc <__assert_fail@plt+0x7e9c>
   11e9c:	add	sp, sp, #24
   11ea0:	ldr	r4, [sp]
   11ea4:	add	sp, sp, #4
   11ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   11eac:	mov	r2, sp
   11eb0:	mov	r0, r4
   11eb4:	mov	r1, #0
   11eb8:	bl	162a4 <__assert_fail@plt+0x4f74>
   11ebc:	b	11e98 <__assert_fail@plt+0xb68>
   11ec0:	str	r4, [sp, #-8]!
   11ec4:	str	lr, [sp, #4]
   11ec8:	sub	sp, sp, #24
   11ecc:	mov	r4, r0
   11ed0:	bl	11030 <getpwuid@plt>
   11ed4:	cmp	r0, #0
   11ed8:	beq	11ef4 <__assert_fail@plt+0xbc4>
   11edc:	ldr	r0, [r0]
   11ee0:	bl	191cc <__assert_fail@plt+0x7e9c>
   11ee4:	add	sp, sp, #24
   11ee8:	ldr	r4, [sp]
   11eec:	add	sp, sp, #4
   11ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef4:	mov	r2, sp
   11ef8:	mov	r0, r4
   11efc:	mov	r1, #0
   11f00:	bl	162a4 <__assert_fail@plt+0x4f74>
   11f04:	b	11ee0 <__assert_fail@plt+0xbb0>
   11f08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f0c:	strd	r6, [sp, #8]
   11f10:	strd	r8, [sp, #16]
   11f14:	strd	sl, [sp, #24]
   11f18:	str	lr, [sp, #32]
   11f1c:	sub	sp, sp, #268	; 0x10c
   11f20:	str	r2, [sp, #40]	; 0x28
   11f24:	str	r3, [sp, #44]	; 0x2c
   11f28:	ldr	r7, [sp, #312]	; 0x138
   11f2c:	ldr	r3, [sp, #304]	; 0x130
   11f30:	ldr	r2, [sp, #308]	; 0x134
   11f34:	and	r3, r3, r2
   11f38:	str	r3, [sp, #28]
   11f3c:	cmn	r3, #1
   11f40:	movne	r3, #0
   11f44:	beq	11f78 <__assert_fail@plt+0xc48>
   11f48:	mov	r2, #0
   11f4c:	orr	r1, r3, r1
   11f50:	bl	19238 <__assert_fail@plt+0x7f08>
   11f54:	str	r0, [sp, #12]
   11f58:	mov	fp, #1
   11f5c:	mov	r3, #0
   11f60:	str	r3, [sp, #36]	; 0x24
   11f64:	movw	r3, #45660	; 0xb25c
   11f68:	movt	r3, #1
   11f6c:	str	r3, [sp, #48]	; 0x30
   11f70:	mov	sl, fp
   11f74:	b	12318 <__assert_fail@plt+0xfe8>
   11f78:	ldrb	r3, [r7, #12]
   11f7c:	cmp	r3, #0
   11f80:	movne	r3, #0
   11f84:	bne	11f48 <__assert_fail@plt+0xc18>
   11f88:	ldr	r3, [r7]
   11f8c:	cmp	r3, #2
   11f90:	movne	r3, #0
   11f94:	moveq	r3, #8
   11f98:	b	11f48 <__assert_fail@plt+0xc18>
   11f9c:	mov	fp, sl
   11fa0:	bl	111ec <__errno_location@plt>
   11fa4:	mov	r4, r0
   11fa8:	ldr	r5, [r0]
   11fac:	cmp	r5, #0
   11fb0:	beq	11fc4 <__assert_fail@plt+0xc94>
   11fb4:	ldrb	fp, [r7, #13]
   11fb8:	cmp	fp, #0
   11fbc:	movne	fp, #0
   11fc0:	beq	11ff4 <__assert_fail@plt+0xcc4>
   11fc4:	ldr	r0, [sp, #12]
   11fc8:	bl	14710 <__assert_fail@plt+0x33e0>
   11fcc:	cmp	r0, #0
   11fd0:	bne	12ac0 <__assert_fail@plt+0x1790>
   11fd4:	mov	r0, fp
   11fd8:	add	sp, sp, #268	; 0x10c
   11fdc:	ldrd	r4, [sp]
   11fe0:	ldrd	r6, [sp, #8]
   11fe4:	ldrd	r8, [sp, #16]
   11fe8:	ldrd	sl, [sp, #24]
   11fec:	add	sp, sp, #32
   11ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ff4:	mov	r2, #5
   11ff8:	movw	r1, #44916	; 0xaf74
   11ffc:	movt	r1, #1
   12000:	mov	r0, #0
   12004:	bl	110c0 <dcgettext@plt>
   12008:	mov	r2, r0
   1200c:	mov	r1, r5
   12010:	mov	r0, #0
   12014:	bl	11150 <error@plt>
   12018:	b	11fc4 <__assert_fail@plt+0xc94>
   1201c:	ldrb	fp, [r7, #4]
   12020:	cmp	fp, #0
   12024:	beq	123fc <__assert_fail@plt+0x10cc>
   12028:	ldr	ip, [r7, #8]
   1202c:	cmp	ip, #0
   12030:	beq	12314 <__assert_fail@plt+0xfe4>
   12034:	ldrd	r0, [r5, #160]	; 0xa0
   12038:	ldrd	r2, [ip]
   1203c:	cmp	r1, r3
   12040:	cmpeq	r0, r2
   12044:	bne	12314 <__assert_fail@plt+0xfe4>
   12048:	ldrd	r2, [r5, #64]	; 0x40
   1204c:	ldrd	r0, [ip, #8]
   12050:	cmp	r3, r1
   12054:	cmpeq	r2, r0
   12058:	bne	12314 <__assert_fail@plt+0xfe4>
   1205c:	movw	r1, #44664	; 0xae78
   12060:	movt	r1, #1
   12064:	ldr	r6, [sp, #16]
   12068:	mov	r0, r6
   1206c:	bl	11024 <strcmp@plt>
   12070:	cmp	r0, #0
   12074:	bne	120f4 <__assert_fail@plt+0xdc4>
   12078:	mov	r2, #5
   1207c:	movw	r1, #44932	; 0xaf84
   12080:	movt	r1, #1
   12084:	bl	110c0 <dcgettext@plt>
   12088:	mov	r4, r0
   1208c:	mov	r1, r6
   12090:	mov	r0, #4
   12094:	bl	183ec <__assert_fail@plt+0x70bc>
   12098:	mov	r3, r0
   1209c:	mov	r2, r4
   120a0:	mov	r1, #0
   120a4:	mov	r0, r1
   120a8:	bl	11150 <error@plt>
   120ac:	mov	r2, #5
   120b0:	movw	r1, #45040	; 0xaff0
   120b4:	movt	r1, #1
   120b8:	mov	r0, #0
   120bc:	bl	110c0 <dcgettext@plt>
   120c0:	mov	r2, r0
   120c4:	mov	r1, #0
   120c8:	mov	r0, r1
   120cc:	bl	11150 <error@plt>
   120d0:	mov	r2, #4
   120d4:	mov	r1, r5
   120d8:	ldr	r4, [sp, #12]
   120dc:	mov	r0, r4
   120e0:	bl	14f1c <__assert_fail@plt+0x3bec>
   120e4:	mov	r0, r4
   120e8:	bl	1488c <__assert_fail@plt+0x355c>
   120ec:	mov	fp, #0
   120f0:	b	12314 <__assert_fail@plt+0xfe4>
   120f4:	mov	r2, #5
   120f8:	movw	r1, #44980	; 0xafb4
   120fc:	movt	r1, #1
   12100:	mov	r0, #0
   12104:	bl	110c0 <dcgettext@plt>
   12108:	mov	r4, r0
   1210c:	ldr	r2, [sp, #16]
   12110:	mov	r1, #4
   12114:	mov	r0, #0
   12118:	bl	18360 <__assert_fail@plt+0x7030>
   1211c:	mov	r6, r0
   12120:	movw	r2, #44664	; 0xae78
   12124:	movt	r2, #1
   12128:	mov	r1, #4
   1212c:	mov	r0, #1
   12130:	bl	18360 <__assert_fail@plt+0x7030>
   12134:	str	r0, [sp]
   12138:	mov	r3, r6
   1213c:	mov	r2, r4
   12140:	mov	r1, #0
   12144:	mov	r0, r1
   12148:	bl	11150 <error@plt>
   1214c:	b	120ac <__assert_fail@plt+0xd7c>
   12150:	ldrb	r3, [r7, #4]
   12154:	cmp	r3, #0
   12158:	moveq	fp, #1
   1215c:	bne	123fc <__assert_fail@plt+0x10cc>
   12160:	b	12314 <__assert_fail@plt+0xfe4>
   12164:	ldr	r3, [r5, #48]	; 0x30
   12168:	cmp	r3, #0
   1216c:	bne	1217c <__assert_fail@plt+0xe4c>
   12170:	ldr	r3, [r5, #16]
   12174:	cmp	r3, #0
   12178:	beq	121c8 <__assert_fail@plt+0xe98>
   1217c:	ldrb	r3, [r7, #13]
   12180:	cmp	r3, #0
   12184:	bne	121f0 <__assert_fail@plt+0xec0>
   12188:	ldr	r4, [r5, #32]
   1218c:	mov	r2, #5
   12190:	movw	r1, #45092	; 0xb024
   12194:	movt	r1, #1
   12198:	mov	r0, #0
   1219c:	bl	110c0 <dcgettext@plt>
   121a0:	mov	r6, r0
   121a4:	ldr	r1, [sp, #16]
   121a8:	mov	r0, #4
   121ac:	bl	183ec <__assert_fail@plt+0x70bc>
   121b0:	mov	r3, r0
   121b4:	mov	r2, r6
   121b8:	mov	r1, r4
   121bc:	mov	r0, #0
   121c0:	bl	11150 <error@plt>
   121c4:	b	121f0 <__assert_fail@plt+0xec0>
   121c8:	mov	fp, #1
   121cc:	str	fp, [r5, #16]
   121d0:	mov	r2, fp
   121d4:	mov	r1, r5
   121d8:	ldr	r0, [sp, #12]
   121dc:	bl	14f1c <__assert_fail@plt+0x3bec>
   121e0:	b	12314 <__assert_fail@plt+0xfe4>
   121e4:	ldrb	r3, [r7, #13]
   121e8:	cmp	r3, #0
   121ec:	beq	1236c <__assert_fail@plt+0x103c>
   121f0:	mov	r8, #0
   121f4:	ldr	fp, [sp, #36]	; 0x24
   121f8:	ldr	r3, [r7]
   121fc:	cmp	r3, #2
   12200:	movne	r4, #1
   12204:	beq	12308 <__assert_fail@plt+0xfd8>
   12208:	cmp	r3, #0
   1220c:	bne	12308 <__assert_fail@plt+0xfd8>
   12210:	cmp	fp, #0
   12214:	moveq	r6, #3
   12218:	bne	1292c <__assert_fail@plt+0x15fc>
   1221c:	cmp	r8, #0
   12220:	streq	r8, [sp, #20]
   12224:	beq	12248 <__assert_fail@plt+0xf18>
   12228:	ldr	r0, [r8, #24]
   1222c:	bl	11ec0 <__assert_fail@plt+0xb90>
   12230:	str	r0, [sp, #20]
   12234:	ldr	r0, [r8, #28]
   12238:	bl	11e78 <__assert_fail@plt+0xb48>
   1223c:	mov	r8, r0
   12240:	cmp	r6, #1
   12244:	beq	12940 <__assert_fail@plt+0x1610>
   12248:	ldr	r4, [r7, #16]
   1224c:	ldr	r9, [r7, #20]
   12250:	mov	r1, r9
   12254:	mov	r0, r4
   12258:	bl	11d80 <__assert_fail@plt+0xa50>
   1225c:	str	r0, [sp, #32]
   12260:	cmp	r4, #0
   12264:	ldr	r3, [sp, #20]
   12268:	movne	r0, r3
   1226c:	moveq	r0, r4
   12270:	cmp	r9, #0
   12274:	movne	r1, r8
   12278:	moveq	r1, r9
   1227c:	bl	11d80 <__assert_fail@plt+0xa50>
   12280:	str	r0, [sp, #24]
   12284:	cmp	r6, #3
   12288:	beq	129a8 <__assert_fail@plt+0x1678>
   1228c:	cmp	r6, #4
   12290:	beq	12a5c <__assert_fail@plt+0x172c>
   12294:	cmp	r6, #2
   12298:	bne	12aa8 <__assert_fail@plt+0x1778>
   1229c:	cmp	r4, #0
   122a0:	beq	12980 <__assert_fail@plt+0x1650>
   122a4:	mov	r2, #5
   122a8:	movw	r1, #45460	; 0xb194
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	bl	110c0 <dcgettext@plt>
   122b8:	mov	r4, r0
   122bc:	ldr	r1, [sp, #16]
   122c0:	mov	r0, #4
   122c4:	bl	183ec <__assert_fail@plt+0x70bc>
   122c8:	ldr	r6, [sp, #32]
   122cc:	str	r6, [sp]
   122d0:	ldr	r9, [sp, #24]
   122d4:	mov	r3, r9
   122d8:	mov	r2, r0
   122dc:	mov	r1, r4
   122e0:	mov	r0, #1
   122e4:	bl	11210 <__printf_chk@plt>
   122e8:	mov	r0, r9
   122ec:	bl	12ce4 <__assert_fail@plt+0x19b4>
   122f0:	mov	r0, r6
   122f4:	bl	12ce4 <__assert_fail@plt+0x19b4>
   122f8:	ldr	r0, [sp, #20]
   122fc:	bl	12ce4 <__assert_fail@plt+0x19b4>
   12300:	mov	r0, r8
   12304:	bl	12ce4 <__assert_fail@plt+0x19b4>
   12308:	ldrb	r3, [r7, #4]
   1230c:	cmp	r3, #0
   12310:	beq	12aac <__assert_fail@plt+0x177c>
   12314:	and	sl, sl, fp
   12318:	ldr	r0, [sp, #12]
   1231c:	bl	1488c <__assert_fail@plt+0x355c>
   12320:	subs	r5, r0, #0
   12324:	beq	11f9c <__assert_fail@plt+0xc6c>
   12328:	ldr	r3, [r5, #28]
   1232c:	str	r3, [sp, #16]
   12330:	ldrh	r3, [r5, #56]	; 0x38
   12334:	sub	r3, r3, #1
   12338:	cmp	r3, #9
   1233c:	ldrls	pc, [pc, r3, lsl #2]
   12340:	b	123fc <__assert_fail@plt+0x10cc>
   12344:	andeq	r2, r1, ip, lsl r0
   12348:	andeq	r2, r1, r8, ror #7
   1234c:	strdeq	r2, [r1], -ip
   12350:	muleq	r1, ip, r3
   12354:	strdeq	r2, [r1], -ip
   12358:	andeq	r2, r1, r0, asr r1
   1235c:	andeq	r2, r1, r4, ror #3
   12360:	strdeq	r2, [r1], -ip
   12364:	strdeq	r2, [r1], -ip
   12368:	andeq	r2, r1, r4, ror #2
   1236c:	ldr	r4, [r5, #32]
   12370:	ldr	r2, [sp, #16]
   12374:	mov	r1, #3
   12378:	mov	r0, #0
   1237c:	bl	18510 <__assert_fail@plt+0x71e0>
   12380:	mov	r3, r0
   12384:	movw	r2, #45912	; 0xb358
   12388:	movt	r2, #1
   1238c:	mov	r1, r4
   12390:	mov	r0, #0
   12394:	bl	11150 <error@plt>
   12398:	b	121f0 <__assert_fail@plt+0xec0>
   1239c:	ldrb	r3, [r7, #13]
   123a0:	cmp	r3, #0
   123a4:	bne	121f0 <__assert_fail@plt+0xec0>
   123a8:	ldr	r4, [r5, #32]
   123ac:	mov	r2, #5
   123b0:	movw	r1, #45112	; 0xb038
   123b4:	movt	r1, #1
   123b8:	mov	r0, #0
   123bc:	bl	110c0 <dcgettext@plt>
   123c0:	mov	r6, r0
   123c4:	ldr	r1, [sp, #16]
   123c8:	mov	r0, #4
   123cc:	bl	183ec <__assert_fail@plt+0x70bc>
   123d0:	mov	r3, r0
   123d4:	mov	r2, r6
   123d8:	mov	r1, r4
   123dc:	mov	r0, #0
   123e0:	bl	11150 <error@plt>
   123e4:	b	121f0 <__assert_fail@plt+0xec0>
   123e8:	mov	r1, r5
   123ec:	ldr	r0, [sp, #12]
   123f0:	bl	19290 <__assert_fail@plt+0x7f60>
   123f4:	cmp	r0, #0
   123f8:	bne	1254c <__assert_fail@plt+0x121c>
   123fc:	ldr	r9, [r5, #24]
   12400:	ldr	r3, [sp, #28]
   12404:	cmn	r3, #1
   12408:	beq	12590 <__assert_fail@plt+0x1260>
   1240c:	add	r8, r5, #64	; 0x40
   12410:	ldrb	r3, [r7, #12]
   12414:	cmp	r3, #0
   12418:	bne	12b04 <__assert_fail@plt+0x17d4>
   1241c:	ldr	r3, [sp, #304]	; 0x130
   12420:	cmn	r3, #1
   12424:	beq	12610 <__assert_fail@plt+0x12e0>
   12428:	ldr	r3, [r8, #24]
   1242c:	ldr	r2, [sp, #304]	; 0x130
   12430:	cmp	r2, r3
   12434:	movne	r3, #0
   12438:	beq	12610 <__assert_fail@plt+0x12e0>
   1243c:	mov	fp, r3
   12440:	ldrh	r6, [r5, #56]	; 0x38
   12444:	sub	r3, r6, #1
   12448:	uxth	r3, r3
   1244c:	bic	r6, r6, #2
   12450:	uxth	r6, r6
   12454:	cmp	r6, #4
   12458:	cmpne	r3, #1
   1245c:	movls	r6, #1
   12460:	movhi	r6, #0
   12464:	movhi	r6, #1
   12468:	bhi	1248c <__assert_fail@plt+0x115c>
   1246c:	ldr	ip, [r7, #8]
   12470:	cmp	ip, #0
   12474:	beq	1248c <__assert_fail@plt+0x115c>
   12478:	ldrd	r0, [r8, #96]	; 0x60
   1247c:	ldrd	r2, [ip]
   12480:	cmp	r1, r3
   12484:	cmpeq	r0, r2
   12488:	beq	12638 <__assert_fail@plt+0x1308>
   1248c:	cmp	fp, #0
   12490:	beq	12af0 <__assert_fail@plt+0x17c0>
   12494:	ldrb	r4, [r7, #12]
   12498:	cmp	r4, #0
   1249c:	bne	12724 <__assert_fail@plt+0x13f4>
   124a0:	mov	r3, #256	; 0x100
   124a4:	str	r3, [sp]
   124a8:	ldr	r3, [sp, #44]	; 0x2c
   124ac:	ldr	r2, [sp, #40]	; 0x28
   124b0:	mov	r1, r9
   124b4:	ldr	r0, [sp, #12]
   124b8:	ldr	r0, [r0, #32]
   124bc:	bl	112b8 <fchownat@plt>
   124c0:	cmp	r0, #0
   124c4:	moveq	r6, #1
   124c8:	movne	r6, #0
   124cc:	beq	124e0 <__assert_fail@plt+0x11b0>
   124d0:	bl	111ec <__errno_location@plt>
   124d4:	ldr	r3, [r0]
   124d8:	cmp	r3, #95	; 0x5f
   124dc:	beq	12af8 <__assert_fail@plt+0x17c8>
   124e0:	cmp	r6, #0
   124e4:	bne	12b64 <__assert_fail@plt+0x1834>
   124e8:	ldrb	fp, [r7, #13]
   124ec:	cmp	fp, #0
   124f0:	movne	fp, #0
   124f4:	bne	121f8 <__assert_fail@plt+0xec8>
   124f8:	bl	111ec <__errno_location@plt>
   124fc:	ldr	r4, [r0]
   12500:	ldr	r3, [sp, #40]	; 0x28
   12504:	cmn	r3, #1
   12508:	mov	r2, #5
   1250c:	movwne	r1, #45352	; 0xb128
   12510:	movtne	r1, #1
   12514:	movweq	r1, #45380	; 0xb144
   12518:	movteq	r1, #1
   1251c:	mov	r0, #0
   12520:	bl	110c0 <dcgettext@plt>
   12524:	mov	r6, r0
   12528:	ldr	r1, [sp, #16]
   1252c:	mov	r0, #4
   12530:	bl	183ec <__assert_fail@plt+0x70bc>
   12534:	mov	r3, r0
   12538:	mov	r2, r6
   1253c:	mov	r1, r4
   12540:	mov	r0, #0
   12544:	bl	11150 <error@plt>
   12548:	b	121f8 <__assert_fail@plt+0xec8>
   1254c:	mov	r2, #5
   12550:	movw	r1, #45140	; 0xb054
   12554:	movt	r1, #1
   12558:	mov	r0, #0
   1255c:	bl	110c0 <dcgettext@plt>
   12560:	mov	r4, r0
   12564:	ldr	r2, [sp, #16]
   12568:	mov	r1, #3
   1256c:	mov	r0, #0
   12570:	bl	18510 <__assert_fail@plt+0x71e0>
   12574:	mov	r3, r0
   12578:	mov	r2, r4
   1257c:	mov	r1, #0
   12580:	mov	r0, r1
   12584:	bl	11150 <error@plt>
   12588:	mov	fp, #0
   1258c:	b	12314 <__assert_fail@plt+0xfe4>
   12590:	ldr	r3, [r7]
   12594:	cmp	r3, #2
   12598:	bne	1240c <__assert_fail@plt+0x10dc>
   1259c:	ldr	r3, [r7, #8]
   125a0:	cmp	r3, #0
   125a4:	bne	1240c <__assert_fail@plt+0x10dc>
   125a8:	ldrb	r3, [r7, #12]
   125ac:	cmp	r3, #0
   125b0:	bne	12b00 <__assert_fail@plt+0x17d0>
   125b4:	add	r8, r5, #64	; 0x40
   125b8:	mov	fp, #1
   125bc:	mov	r6, fp
   125c0:	b	1248c <__assert_fail@plt+0x115c>
   125c4:	bl	111ec <__errno_location@plt>
   125c8:	ldr	r4, [r0]
   125cc:	mov	r2, #5
   125d0:	movw	r1, #45328	; 0xb110
   125d4:	movt	r1, #1
   125d8:	mov	r0, #0
   125dc:	bl	110c0 <dcgettext@plt>
   125e0:	mov	r6, r0
   125e4:	ldr	r1, [sp, #16]
   125e8:	mov	r0, #4
   125ec:	bl	183ec <__assert_fail@plt+0x70bc>
   125f0:	mov	r3, r0
   125f4:	mov	r2, r6
   125f8:	mov	r1, r4
   125fc:	mov	r0, #0
   12600:	bl	11150 <error@plt>
   12604:	b	12b48 <__assert_fail@plt+0x1818>
   12608:	add	r8, sp, #56	; 0x38
   1260c:	b	1241c <__assert_fail@plt+0x10ec>
   12610:	ldr	r3, [sp, #308]	; 0x134
   12614:	cmn	r3, #1
   12618:	moveq	r3, #1
   1261c:	beq	1243c <__assert_fail@plt+0x110c>
   12620:	ldr	r3, [r8, #28]
   12624:	ldr	r2, [sp, #308]	; 0x134
   12628:	cmp	r3, r2
   1262c:	movne	r3, #0
   12630:	moveq	r3, #1
   12634:	b	1243c <__assert_fail@plt+0x110c>
   12638:	ldrd	r2, [r8]
   1263c:	ldrd	r0, [ip, #8]
   12640:	cmp	r3, r1
   12644:	cmpeq	r2, r0
   12648:	bne	1248c <__assert_fail@plt+0x115c>
   1264c:	movw	r1, #44664	; 0xae78
   12650:	movt	r1, #1
   12654:	ldr	r5, [sp, #16]
   12658:	mov	r0, r5
   1265c:	bl	11024 <strcmp@plt>
   12660:	cmp	r0, #0
   12664:	bne	126c8 <__assert_fail@plt+0x1398>
   12668:	mov	r2, #5
   1266c:	movw	r1, #44932	; 0xaf84
   12670:	movt	r1, #1
   12674:	bl	110c0 <dcgettext@plt>
   12678:	mov	r4, r0
   1267c:	mov	r1, r5
   12680:	mov	r0, #4
   12684:	bl	183ec <__assert_fail@plt+0x70bc>
   12688:	mov	r3, r0
   1268c:	mov	r2, r4
   12690:	mov	r1, #0
   12694:	mov	r0, r1
   12698:	bl	11150 <error@plt>
   1269c:	mov	r2, #5
   126a0:	movw	r1, #45040	; 0xaff0
   126a4:	movt	r1, #1
   126a8:	mov	r0, #0
   126ac:	bl	110c0 <dcgettext@plt>
   126b0:	mov	r2, r0
   126b4:	mov	r1, #0
   126b8:	mov	r0, r1
   126bc:	bl	11150 <error@plt>
   126c0:	mov	fp, #0
   126c4:	b	12314 <__assert_fail@plt+0xfe4>
   126c8:	mov	r2, #5
   126cc:	movw	r1, #44980	; 0xafb4
   126d0:	movt	r1, #1
   126d4:	mov	r0, #0
   126d8:	bl	110c0 <dcgettext@plt>
   126dc:	mov	r4, r0
   126e0:	ldr	r2, [sp, #16]
   126e4:	mov	r1, #4
   126e8:	mov	r0, #0
   126ec:	bl	18360 <__assert_fail@plt+0x7030>
   126f0:	mov	r5, r0
   126f4:	movw	r2, #44664	; 0xae78
   126f8:	movt	r2, #1
   126fc:	mov	r1, #4
   12700:	mov	r0, #1
   12704:	bl	18360 <__assert_fail@plt+0x7030>
   12708:	str	r0, [sp]
   1270c:	mov	r3, r5
   12710:	mov	r2, r4
   12714:	mov	r1, #0
   12718:	mov	r0, r1
   1271c:	bl	11150 <error@plt>
   12720:	b	1269c <__assert_fail@plt+0x136c>
   12724:	ldr	r3, [sp, #28]
   12728:	cmn	r3, #1
   1272c:	beq	12848 <__assert_fail@plt+0x1518>
   12730:	ldr	r3, [r8, #16]
   12734:	and	r3, r3, #61440	; 0xf000
   12738:	cmp	r3, #32768	; 0x8000
   1273c:	beq	1282c <__assert_fail@plt+0x14fc>
   12740:	cmp	r3, #16384	; 0x4000
   12744:	bne	12848 <__assert_fail@plt+0x1518>
   12748:	mov	r3, #18688	; 0x4900
   1274c:	str	r3, [sp, #20]
   12750:	ldr	r3, [sp, #12]
   12754:	ldr	r3, [r3, #32]
   12758:	ldr	r2, [sp, #20]
   1275c:	mov	r1, r9
   12760:	str	r3, [sp, #32]
   12764:	mov	r0, r3
   12768:	bl	11060 <__openat64_2@plt>
   1276c:	subs	r1, r0, #0
   12770:	str	r1, [sp, #24]
   12774:	bge	127bc <__assert_fail@plt+0x148c>
   12778:	bl	111ec <__errno_location@plt>
   1277c:	str	r0, [sp, #52]	; 0x34
   12780:	ldr	r3, [r0]
   12784:	cmp	r3, #13
   12788:	bne	124e8 <__assert_fail@plt+0x11b8>
   1278c:	ldr	r3, [r8, #16]
   12790:	and	r3, r3, #61440	; 0xf000
   12794:	cmp	r3, #32768	; 0x8000
   12798:	bne	12848 <__assert_fail@plt+0x1518>
   1279c:	ldr	r2, [sp, #20]
   127a0:	orr	r2, r2, #1
   127a4:	mov	r1, r9
   127a8:	ldr	r0, [sp, #32]
   127ac:	bl	11060 <__openat64_2@plt>
   127b0:	subs	r3, r0, #0
   127b4:	str	r3, [sp, #24]
   127b8:	blt	12838 <__assert_fail@plt+0x1508>
   127bc:	add	r2, sp, #160	; 0xa0
   127c0:	ldr	r1, [sp, #24]
   127c4:	mov	r0, #3
   127c8:	bl	110fc <__fxstat64@plt>
   127cc:	cmp	r0, #0
   127d0:	bne	128f4 <__assert_fail@plt+0x15c4>
   127d4:	ldrd	r0, [r8, #96]	; 0x60
   127d8:	add	r3, sp, #256	; 0x100
   127dc:	ldrd	r2, [r3]
   127e0:	cmp	r1, r3
   127e4:	cmpeq	r0, r2
   127e8:	beq	12874 <__assert_fail@plt+0x1544>
   127ec:	bl	111ec <__errno_location@plt>
   127f0:	mov	r6, r0
   127f4:	ldr	r9, [r0]
   127f8:	ldr	r0, [sp, #24]
   127fc:	bl	112f4 <close@plt>
   12800:	str	r9, [r6]
   12804:	mov	r2, #0
   12808:	ldr	r3, [r7]
   1280c:	cmp	r3, #2
   12810:	moveq	fp, r2
   12814:	beq	12308 <__assert_fail@plt+0xfd8>
   12818:	and	r1, r2, r4
   1281c:	tst	r1, #255	; 0xff
   12820:	bne	12b74 <__assert_fail@plt+0x1844>
   12824:	mov	fp, r2
   12828:	b	12208 <__assert_fail@plt+0xed8>
   1282c:	mov	r3, #2304	; 0x900
   12830:	str	r3, [sp, #20]
   12834:	b	12750 <__assert_fail@plt+0x1420>
   12838:	ldr	r3, [sp, #52]	; 0x34
   1283c:	ldr	r3, [r3]
   12840:	cmp	r3, #13
   12844:	bne	124e8 <__assert_fail@plt+0x11b8>
   12848:	ldr	r3, [sp, #36]	; 0x24
   1284c:	str	r3, [sp]
   12850:	ldr	r3, [sp, #44]	; 0x2c
   12854:	ldr	r2, [sp, #40]	; 0x28
   12858:	mov	r1, r9
   1285c:	ldr	r0, [sp, #12]
   12860:	ldr	r0, [r0, #32]
   12864:	bl	112b8 <fchownat@plt>
   12868:	clz	r6, r0
   1286c:	lsr	r6, r6, #5
   12870:	b	124e0 <__assert_fail@plt+0x11b0>
   12874:	ldrd	r0, [r8]
   12878:	ldrd	r2, [sp, #160]	; 0xa0
   1287c:	cmp	r1, r3
   12880:	cmpeq	r0, r2
   12884:	bne	127ec <__assert_fail@plt+0x14bc>
   12888:	ldr	r3, [sp, #304]	; 0x130
   1288c:	cmn	r3, #1
   12890:	beq	128c0 <__assert_fail@plt+0x1590>
   12894:	ldr	r3, [sp, #184]	; 0xb8
   12898:	ldr	r2, [sp, #304]	; 0x130
   1289c:	cmp	r2, r3
   128a0:	beq	128c0 <__assert_fail@plt+0x1590>
   128a4:	bl	111ec <__errno_location@plt>
   128a8:	mov	r4, r0
   128ac:	ldr	r9, [r0]
   128b0:	ldr	r0, [sp, #24]
   128b4:	bl	112f4 <close@plt>
   128b8:	str	r9, [r4]
   128bc:	b	124e0 <__assert_fail@plt+0x11b0>
   128c0:	ldr	r3, [sp, #308]	; 0x134
   128c4:	cmn	r3, #1
   128c8:	beq	128dc <__assert_fail@plt+0x15ac>
   128cc:	ldr	r3, [sp, #188]	; 0xbc
   128d0:	ldr	r2, [sp, #308]	; 0x134
   128d4:	cmp	r2, r3
   128d8:	bne	128a4 <__assert_fail@plt+0x1574>
   128dc:	ldr	r2, [sp, #44]	; 0x2c
   128e0:	ldr	r1, [sp, #40]	; 0x28
   128e4:	ldr	r0, [sp, #24]
   128e8:	bl	111e0 <fchown@plt>
   128ec:	cmp	r0, #0
   128f0:	beq	12910 <__assert_fail@plt+0x15e0>
   128f4:	bl	111ec <__errno_location@plt>
   128f8:	mov	r4, r0
   128fc:	ldr	r6, [r0]
   12900:	ldr	r0, [sp, #24]
   12904:	bl	112f4 <close@plt>
   12908:	str	r6, [r4]
   1290c:	b	124e8 <__assert_fail@plt+0x11b8>
   12910:	ldr	r0, [sp, #24]
   12914:	bl	112f4 <close@plt>
   12918:	cmp	r0, #0
   1291c:	bne	124e8 <__assert_fail@plt+0x11b8>
   12920:	b	124e0 <__assert_fail@plt+0x11b0>
   12924:	mov	r4, fp
   12928:	b	12208 <__assert_fail@plt+0xed8>
   1292c:	cmp	r4, #0
   12930:	bne	12b58 <__assert_fail@plt+0x1828>
   12934:	cmp	r8, #0
   12938:	streq	r8, [sp, #20]
   1293c:	bne	12978 <__assert_fail@plt+0x1648>
   12940:	mov	r2, #5
   12944:	movw	r1, #45404	; 0xb15c
   12948:	movt	r1, #1
   1294c:	mov	r0, #0
   12950:	bl	110c0 <dcgettext@plt>
   12954:	mov	r4, r0
   12958:	ldr	r1, [sp, #16]
   1295c:	mov	r0, #4
   12960:	bl	183ec <__assert_fail@plt+0x70bc>
   12964:	mov	r2, r0
   12968:	mov	r1, r4
   1296c:	mov	r0, #1
   12970:	bl	11210 <__printf_chk@plt>
   12974:	b	122f8 <__assert_fail@plt+0xfc8>
   12978:	mov	r6, #1
   1297c:	b	12228 <__assert_fail@plt+0xef8>
   12980:	cmp	r9, #0
   12984:	mov	r2, #5
   12988:	movwne	r1, #45500	; 0xb1bc
   1298c:	movtne	r1, #1
   12990:	movweq	r1, #45536	; 0xb1e0
   12994:	movteq	r1, #1
   12998:	mov	r0, #0
   1299c:	bl	110c0 <dcgettext@plt>
   129a0:	mov	r4, r0
   129a4:	b	122bc <__assert_fail@plt+0xf8c>
   129a8:	ldr	r3, [sp, #24]
   129ac:	cmp	r3, #0
   129b0:	beq	129fc <__assert_fail@plt+0x16cc>
   129b4:	cmp	r4, #0
   129b8:	beq	129d8 <__assert_fail@plt+0x16a8>
   129bc:	mov	r2, #5
   129c0:	movw	r1, #45568	; 0xb200
   129c4:	movt	r1, #1
   129c8:	mov	r0, #0
   129cc:	bl	110c0 <dcgettext@plt>
   129d0:	mov	r4, r0
   129d4:	b	122bc <__assert_fail@plt+0xf8c>
   129d8:	cmp	r9, #0
   129dc:	mov	r2, #5
   129e0:	movwne	r1, #45616	; 0xb230
   129e4:	movtne	r1, #1
   129e8:	ldreq	r1, [sp, #48]	; 0x30
   129ec:	mov	r0, #0
   129f0:	bl	110c0 <dcgettext@plt>
   129f4:	mov	r4, r0
   129f8:	b	122bc <__assert_fail@plt+0xf8c>
   129fc:	cmp	r4, #0
   12a00:	beq	12a38 <__assert_fail@plt+0x1708>
   12a04:	mov	r2, #5
   12a08:	movw	r1, #45696	; 0xb280
   12a0c:	movt	r1, #1
   12a10:	mov	r0, #0
   12a14:	bl	110c0 <dcgettext@plt>
   12a18:	mov	r4, r0
   12a1c:	mov	r0, #0
   12a20:	bl	12ce4 <__assert_fail@plt+0x19b4>
   12a24:	ldr	r3, [sp, #24]
   12a28:	ldr	r2, [sp, #32]
   12a2c:	str	r2, [sp, #24]
   12a30:	str	r3, [sp, #32]
   12a34:	b	122bc <__assert_fail@plt+0xf8c>
   12a38:	cmp	r9, #0
   12a3c:	mov	r2, #5
   12a40:	movwne	r1, #45736	; 0xb2a8
   12a44:	movtne	r1, #1
   12a48:	ldreq	r1, [sp, #48]	; 0x30
   12a4c:	mov	r0, #0
   12a50:	bl	110c0 <dcgettext@plt>
   12a54:	mov	r4, r0
   12a58:	b	12a1c <__assert_fail@plt+0x16ec>
   12a5c:	cmp	r4, #0
   12a60:	beq	12a80 <__assert_fail@plt+0x1750>
   12a64:	mov	r2, #5
   12a68:	movw	r1, #45772	; 0xb2cc
   12a6c:	movt	r1, #1
   12a70:	mov	r0, #0
   12a74:	bl	110c0 <dcgettext@plt>
   12a78:	mov	r4, r0
   12a7c:	b	122bc <__assert_fail@plt+0xf8c>
   12a80:	cmp	r9, #0
   12a84:	mov	r2, #5
   12a88:	movwne	r1, #45804	; 0xb2ec
   12a8c:	movtne	r1, #1
   12a90:	movweq	r1, #45832	; 0xb308
   12a94:	movteq	r1, #1
   12a98:	mov	r0, #0
   12a9c:	bl	110c0 <dcgettext@plt>
   12aa0:	mov	r4, r0
   12aa4:	b	122bc <__assert_fail@plt+0xf8c>
   12aa8:	bl	112e8 <abort@plt>
   12aac:	mov	r2, #4
   12ab0:	mov	r1, r5
   12ab4:	ldr	r0, [sp, #12]
   12ab8:	bl	14f1c <__assert_fail@plt+0x3bec>
   12abc:	b	12314 <__assert_fail@plt+0xfe4>
   12ac0:	ldr	r4, [r4]
   12ac4:	mov	r2, #5
   12ac8:	movw	r1, #45860	; 0xb324
   12acc:	movt	r1, #1
   12ad0:	mov	r0, #0
   12ad4:	bl	110c0 <dcgettext@plt>
   12ad8:	mov	r2, r0
   12adc:	mov	r1, r4
   12ae0:	mov	r0, #0
   12ae4:	bl	11150 <error@plt>
   12ae8:	mov	fp, #0
   12aec:	b	11fd4 <__assert_fail@plt+0xca4>
   12af0:	mov	fp, r6
   12af4:	b	121f8 <__assert_fail@plt+0xec8>
   12af8:	mov	r2, fp
   12afc:	b	12808 <__assert_fail@plt+0x14d8>
   12b00:	add	r8, r5, #64	; 0x40
   12b04:	ldr	r3, [r5, #80]	; 0x50
   12b08:	and	r3, r3, #61440	; 0xf000
   12b0c:	cmp	r3, #40960	; 0xa000
   12b10:	bne	1241c <__assert_fail@plt+0x10ec>
   12b14:	ldr	r3, [sp, #36]	; 0x24
   12b18:	str	r3, [sp]
   12b1c:	add	r3, sp, #56	; 0x38
   12b20:	mov	r2, r9
   12b24:	ldr	r1, [sp, #12]
   12b28:	ldr	r1, [r1, #32]
   12b2c:	mov	r0, #3
   12b30:	bl	110e4 <__fxstatat64@plt>
   12b34:	cmp	r0, #0
   12b38:	beq	12608 <__assert_fail@plt+0x12d8>
   12b3c:	ldrb	r3, [r7, #13]
   12b40:	cmp	r3, #0
   12b44:	beq	125c4 <__assert_fail@plt+0x1294>
   12b48:	mov	fp, #0
   12b4c:	add	r8, sp, #56	; 0x38
   12b50:	ldr	r6, [sp, #36]	; 0x24
   12b54:	b	1248c <__assert_fail@plt+0x115c>
   12b58:	mov	fp, r4
   12b5c:	mov	r6, #4
   12b60:	b	1221c <__assert_fail@plt+0xeec>
   12b64:	ldr	r3, [r7]
   12b68:	cmp	r3, #2
   12b6c:	moveq	fp, r6
   12b70:	beq	12308 <__assert_fail@plt+0xfd8>
   12b74:	ldr	r1, [sp, #40]	; 0x28
   12b78:	cmn	r1, #1
   12b7c:	beq	12b90 <__assert_fail@plt+0x1860>
   12b80:	ldr	r2, [r8, #24]
   12b84:	cmp	r1, r2
   12b88:	movne	r6, #2
   12b8c:	bne	12228 <__assert_fail@plt+0xef8>
   12b90:	ldr	r1, [sp, #44]	; 0x2c
   12b94:	cmn	r1, #1
   12b98:	beq	12924 <__assert_fail@plt+0x15f4>
   12b9c:	ldr	r2, [r8, #28]
   12ba0:	cmp	r1, r2
   12ba4:	moveq	r4, fp
   12ba8:	beq	12208 <__assert_fail@plt+0xed8>
   12bac:	mov	r6, #2
   12bb0:	b	12228 <__assert_fail@plt+0xef8>
   12bb4:	movw	r3, #49592	; 0xc1b8
   12bb8:	movt	r3, #2
   12bbc:	str	r0, [r3]
   12bc0:	bx	lr
   12bc4:	movw	r3, #49592	; 0xc1b8
   12bc8:	movt	r3, #2
   12bcc:	strb	r0, [r3, #4]
   12bd0:	bx	lr
   12bd4:	strd	r4, [sp, #-16]!
   12bd8:	str	r6, [sp, #8]
   12bdc:	str	lr, [sp, #12]
   12be0:	sub	sp, sp, #8
   12be4:	movw	r3, #49556	; 0xc194
   12be8:	movt	r3, #2
   12bec:	ldr	r0, [r3]
   12bf0:	bl	19a48 <__assert_fail@plt+0x8718>
   12bf4:	cmp	r0, #0
   12bf8:	beq	12c20 <__assert_fail@plt+0x18f0>
   12bfc:	movw	r3, #49592	; 0xc1b8
   12c00:	movt	r3, #2
   12c04:	ldrb	r3, [r3, #4]
   12c08:	cmp	r3, #0
   12c0c:	beq	12c4c <__assert_fail@plt+0x191c>
   12c10:	bl	111ec <__errno_location@plt>
   12c14:	ldr	r3, [r0]
   12c18:	cmp	r3, #32
   12c1c:	bne	12c4c <__assert_fail@plt+0x191c>
   12c20:	movw	r3, #49552	; 0xc190
   12c24:	movt	r3, #2
   12c28:	ldr	r0, [r3]
   12c2c:	bl	19a48 <__assert_fail@plt+0x8718>
   12c30:	cmp	r0, #0
   12c34:	bne	12cd4 <__assert_fail@plt+0x19a4>
   12c38:	add	sp, sp, #8
   12c3c:	ldrd	r4, [sp]
   12c40:	ldr	r6, [sp, #8]
   12c44:	add	sp, sp, #12
   12c48:	pop	{pc}		; (ldr pc, [sp], #4)
   12c4c:	mov	r2, #5
   12c50:	movw	r1, #45896	; 0xb348
   12c54:	movt	r1, #1
   12c58:	mov	r0, #0
   12c5c:	bl	110c0 <dcgettext@plt>
   12c60:	mov	r4, r0
   12c64:	movw	r3, #49592	; 0xc1b8
   12c68:	movt	r3, #2
   12c6c:	ldr	r5, [r3]
   12c70:	cmp	r5, #0
   12c74:	beq	12cb4 <__assert_fail@plt+0x1984>
   12c78:	bl	111ec <__errno_location@plt>
   12c7c:	ldr	r6, [r0]
   12c80:	mov	r0, r5
   12c84:	bl	184d8 <__assert_fail@plt+0x71a8>
   12c88:	str	r4, [sp]
   12c8c:	mov	r3, r0
   12c90:	movw	r2, #45908	; 0xb354
   12c94:	movt	r2, #1
   12c98:	mov	r1, r6
   12c9c:	mov	r0, #0
   12ca0:	bl	11150 <error@plt>
   12ca4:	movw	r3, #49464	; 0xc138
   12ca8:	movt	r3, #2
   12cac:	ldr	r0, [r3]
   12cb0:	bl	1106c <_exit@plt>
   12cb4:	bl	111ec <__errno_location@plt>
   12cb8:	mov	r3, r4
   12cbc:	movw	r2, #45912	; 0xb358
   12cc0:	movt	r2, #1
   12cc4:	ldr	r1, [r0]
   12cc8:	mov	r0, #0
   12ccc:	bl	11150 <error@plt>
   12cd0:	b	12ca4 <__assert_fail@plt+0x1974>
   12cd4:	movw	r3, #49464	; 0xc138
   12cd8:	movt	r3, #2
   12cdc:	ldr	r0, [r3]
   12ce0:	bl	1106c <_exit@plt>
   12ce4:	strd	r4, [sp, #-12]!
   12ce8:	str	lr, [sp, #8]
   12cec:	sub	sp, sp, #12
   12cf0:	mov	r5, r0
   12cf4:	bl	111ec <__errno_location@plt>
   12cf8:	mov	r4, r0
   12cfc:	ldr	r3, [r0]
   12d00:	str	r3, [sp]
   12d04:	str	r3, [sp, #4]
   12d08:	mov	r3, #0
   12d0c:	str	r3, [r0]
   12d10:	mov	r0, r5
   12d14:	bl	11054 <free@plt>
   12d18:	ldr	r3, [r4]
   12d1c:	clz	r3, r3
   12d20:	lsr	r3, r3, #5
   12d24:	add	r2, sp, #8
   12d28:	add	r3, r2, r3, lsl #2
   12d2c:	ldr	r3, [r3, #-8]
   12d30:	str	r3, [r4]
   12d34:	add	sp, sp, #12
   12d38:	ldrd	r4, [sp]
   12d3c:	add	sp, sp, #8
   12d40:	pop	{pc}		; (ldr pc, [sp], #4)
   12d44:	strd	r4, [sp, #-8]!
   12d48:	ldrd	r4, [r0, #8]
   12d4c:	ldrd	r2, [r1, #8]
   12d50:	cmp	r5, r3
   12d54:	cmpeq	r4, r2
   12d58:	movne	r0, #0
   12d5c:	beq	12d6c <__assert_fail@plt+0x1a3c>
   12d60:	ldrd	r4, [sp]
   12d64:	add	sp, sp, #8
   12d68:	bx	lr
   12d6c:	ldrd	r4, [r0]
   12d70:	ldrd	r2, [r1]
   12d74:	cmp	r5, r3
   12d78:	cmpeq	r4, r2
   12d7c:	moveq	r0, #1
   12d80:	movne	r0, #0
   12d84:	b	12d60 <__assert_fail@plt+0x1a30>
   12d88:	str	r4, [sp, #-8]!
   12d8c:	str	lr, [sp, #4]
   12d90:	mov	r2, r1
   12d94:	mov	r3, #0
   12d98:	ldrd	r0, [r0, #8]
   12d9c:	bl	1a2a0 <__assert_fail@plt+0x8f70>
   12da0:	mov	r0, r2
   12da4:	ldr	r4, [sp]
   12da8:	add	sp, sp, #4
   12dac:	pop	{pc}		; (ldr pc, [sp], #4)
   12db0:	str	r4, [sp, #-8]!
   12db4:	str	lr, [sp, #4]
   12db8:	mov	r2, r1
   12dbc:	mov	r3, #0
   12dc0:	ldrd	r0, [r0]
   12dc4:	bl	1a2a0 <__assert_fail@plt+0x8f70>
   12dc8:	mov	r0, r2
   12dcc:	ldr	r4, [sp]
   12dd0:	add	sp, sp, #4
   12dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12dd8:	strd	r4, [sp, #-8]!
   12ddc:	ldrd	r4, [r0]
   12de0:	ldrd	r2, [r1]
   12de4:	cmp	r5, r3
   12de8:	cmpeq	r4, r2
   12dec:	moveq	r0, #1
   12df0:	movne	r0, #0
   12df4:	ldrd	r4, [sp]
   12df8:	add	sp, sp, #8
   12dfc:	bx	lr
   12e00:	strd	r4, [sp, #-8]!
   12e04:	ldr	r3, [r0]
   12e08:	ldrd	r4, [r3, #160]	; 0xa0
   12e0c:	ldr	r3, [r1]
   12e10:	ldrd	r2, [r3, #160]	; 0xa0
   12e14:	cmp	r5, r3
   12e18:	cmpeq	r4, r2
   12e1c:	movhi	r0, #1
   12e20:	movls	r0, #0
   12e24:	movcc	r3, #1
   12e28:	movcs	r3, #0
   12e2c:	sub	r0, r0, r3
   12e30:	ldrd	r4, [sp]
   12e34:	add	sp, sp, #8
   12e38:	bx	lr
   12e3c:	strd	r4, [sp, #-16]!
   12e40:	str	r6, [sp, #8]
   12e44:	str	lr, [sp, #12]
   12e48:	mov	r4, r0
   12e4c:	ldr	r3, [r0, #36]	; 0x24
   12e50:	add	r1, r1, #256	; 0x100
   12e54:	adds	r1, r1, r3
   12e58:	bcs	12e88 <__assert_fail@plt+0x1b58>
   12e5c:	str	r1, [r0, #36]	; 0x24
   12e60:	ldr	r0, [r0, #24]
   12e64:	bl	199ec <__assert_fail@plt+0x86bc>
   12e68:	cmp	r0, #0
   12e6c:	strne	r0, [r4, #24]
   12e70:	movne	r0, #1
   12e74:	beq	12eac <__assert_fail@plt+0x1b7c>
   12e78:	ldrd	r4, [sp]
   12e7c:	ldr	r6, [sp, #8]
   12e80:	add	sp, sp, #12
   12e84:	pop	{pc}		; (ldr pc, [sp], #4)
   12e88:	ldr	r0, [r0, #24]
   12e8c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   12e90:	mov	r5, #0
   12e94:	str	r5, [r4, #24]
   12e98:	bl	111ec <__errno_location@plt>
   12e9c:	mov	r3, #36	; 0x24
   12ea0:	str	r3, [r0]
   12ea4:	mov	r0, r5
   12ea8:	b	12e78 <__assert_fail@plt+0x1b48>
   12eac:	ldr	r0, [r4, #24]
   12eb0:	bl	12ce4 <__assert_fail@plt+0x19b4>
   12eb4:	mov	r0, #0
   12eb8:	str	r0, [r4, #24]
   12ebc:	b	12e78 <__assert_fail@plt+0x1b48>
   12ec0:	strd	r4, [sp, #-16]!
   12ec4:	str	r6, [sp, #8]
   12ec8:	str	lr, [sp, #12]
   12ecc:	sub	sp, sp, #8
   12ed0:	mov	r4, r1
   12ed4:	add	r5, r1, #64	; 0x40
   12ed8:	ldr	r3, [r1, #48]	; 0x30
   12edc:	cmp	r3, #0
   12ee0:	bne	12ef0 <__assert_fail@plt+0x1bc0>
   12ee4:	ldr	r3, [r0, #48]	; 0x30
   12ee8:	tst	r3, #1
   12eec:	bne	12f00 <__assert_fail@plt+0x1bd0>
   12ef0:	ldr	r3, [r0, #48]	; 0x30
   12ef4:	ubfx	r3, r3, #1, #1
   12ef8:	orrs	r3, r2, r3
   12efc:	beq	12f74 <__assert_fail@plt+0x1c44>
   12f00:	mov	r2, r5
   12f04:	ldr	r1, [r4, #24]
   12f08:	mov	r0, #3
   12f0c:	bl	112d0 <__xstat64@plt>
   12f10:	cmp	r0, #0
   12f14:	beq	12f98 <__assert_fail@plt+0x1c68>
   12f18:	bl	111ec <__errno_location@plt>
   12f1c:	mov	r6, r0
   12f20:	ldr	r3, [r0]
   12f24:	cmp	r3, #2
   12f28:	bne	12f54 <__assert_fail@plt+0x1c24>
   12f2c:	mov	r2, r5
   12f30:	ldr	r1, [r4, #24]
   12f34:	mov	r0, #3
   12f38:	bl	11300 <__lxstat64@plt>
   12f3c:	cmp	r0, #0
   12f40:	bne	12f54 <__assert_fail@plt+0x1c24>
   12f44:	mov	r3, #0
   12f48:	str	r3, [r6]
   12f4c:	mov	r0, #13
   12f50:	b	12fbc <__assert_fail@plt+0x1c8c>
   12f54:	ldr	r3, [r6]
   12f58:	str	r3, [r4, #32]
   12f5c:	mov	r2, #104	; 0x68
   12f60:	mov	r1, #0
   12f64:	mov	r0, r5
   12f68:	bl	11204 <memset@plt>
   12f6c:	mov	r0, #10
   12f70:	b	12fbc <__assert_fail@plt+0x1c8c>
   12f74:	mov	r3, #256	; 0x100
   12f78:	str	r3, [sp]
   12f7c:	mov	r3, r5
   12f80:	ldr	r2, [r4, #24]
   12f84:	ldr	r1, [r0, #32]
   12f88:	mov	r0, #3
   12f8c:	bl	110e4 <__fxstatat64@plt>
   12f90:	cmp	r0, #0
   12f94:	bne	12fd0 <__assert_fail@plt+0x1ca0>
   12f98:	ldr	r3, [r4, #80]	; 0x50
   12f9c:	and	r3, r3, #61440	; 0xf000
   12fa0:	cmp	r3, #16384	; 0x4000
   12fa4:	beq	12fe0 <__assert_fail@plt+0x1cb0>
   12fa8:	cmp	r3, #40960	; 0xa000
   12fac:	beq	13028 <__assert_fail@plt+0x1cf8>
   12fb0:	cmp	r3, #32768	; 0x8000
   12fb4:	movne	r0, #3
   12fb8:	moveq	r0, #8
   12fbc:	add	sp, sp, #8
   12fc0:	ldrd	r4, [sp]
   12fc4:	ldr	r6, [sp, #8]
   12fc8:	add	sp, sp, #12
   12fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd0:	bl	111ec <__errno_location@plt>
   12fd4:	ldr	r3, [r0]
   12fd8:	str	r3, [r4, #32]
   12fdc:	b	12f5c <__assert_fail@plt+0x1c2c>
   12fe0:	ldrb	r3, [r4, #168]	; 0xa8
   12fe4:	cmp	r3, #46	; 0x2e
   12fe8:	movne	r0, #1
   12fec:	bne	12fbc <__assert_fail@plt+0x1c8c>
   12ff0:	ldrb	r3, [r4, #169]	; 0xa9
   12ff4:	cmp	r3, #0
   12ff8:	beq	13014 <__assert_fail@plt+0x1ce4>
   12ffc:	ldr	r3, [r4, #168]	; 0xa8
   13000:	bic	r3, r3, #-16777216	; 0xff000000
   13004:	bic	r3, r3, #255	; 0xff
   13008:	cmp	r3, #11776	; 0x2e00
   1300c:	movne	r0, #1
   13010:	bne	12fbc <__assert_fail@plt+0x1c8c>
   13014:	ldr	r3, [r4, #48]	; 0x30
   13018:	cmp	r3, #0
   1301c:	moveq	r0, #1
   13020:	movne	r0, #5
   13024:	b	12fbc <__assert_fail@plt+0x1c8c>
   13028:	mov	r0, #12
   1302c:	b	12fbc <__assert_fail@plt+0x1c8c>
   13030:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13034:	strd	r6, [sp, #8]
   13038:	str	r8, [sp, #16]
   1303c:	str	lr, [sp, #20]
   13040:	mov	r6, r0
   13044:	mov	r4, r1
   13048:	mov	r5, r2
   1304c:	ldr	r7, [r0, #44]	; 0x2c
   13050:	ldr	r3, [r0, #40]	; 0x28
   13054:	cmp	r3, r2
   13058:	bcs	13084 <__assert_fail@plt+0x1d54>
   1305c:	add	r1, r2, #40	; 0x28
   13060:	str	r1, [r0, #40]	; 0x28
   13064:	cmn	r1, #-1073741823	; 0xc0000001
   13068:	bhi	13104 <__assert_fail@plt+0x1dd4>
   1306c:	lsl	r1, r1, #2
   13070:	ldr	r0, [r0, #8]
   13074:	bl	199ec <__assert_fail@plt+0x86bc>
   13078:	cmp	r0, #0
   1307c:	strne	r0, [r6, #8]
   13080:	beq	13104 <__assert_fail@plt+0x1dd4>
   13084:	ldr	r3, [r6, #8]
   13088:	cmp	r4, #0
   1308c:	beq	130a0 <__assert_fail@plt+0x1d70>
   13090:	str	r4, [r3], #4
   13094:	ldr	r4, [r4, #8]
   13098:	cmp	r4, #0
   1309c:	bne	13090 <__assert_fail@plt+0x1d60>
   130a0:	mov	r3, r7
   130a4:	mov	r2, #4
   130a8:	mov	r1, r5
   130ac:	ldr	r0, [r6, #8]
   130b0:	bl	112ac <qsort@plt>
   130b4:	ldr	lr, [r6, #8]
   130b8:	ldr	r0, [lr]
   130bc:	subs	r3, r5, #1
   130c0:	beq	130e4 <__assert_fail@plt+0x1db4>
   130c4:	mov	r2, lr
   130c8:	ldr	r1, [r2]
   130cc:	ldr	ip, [r2, #4]!
   130d0:	str	ip, [r1, #8]
   130d4:	subs	r3, r3, #1
   130d8:	bne	130c8 <__assert_fail@plt+0x1d98>
   130dc:	sub	r5, r5, #-1073741823	; 0xc0000001
   130e0:	add	lr, lr, r5, lsl #2
   130e4:	ldr	r3, [lr]
   130e8:	mov	r2, #0
   130ec:	str	r2, [r3, #8]
   130f0:	ldrd	r4, [sp]
   130f4:	ldrd	r6, [sp, #8]
   130f8:	ldr	r8, [sp, #16]
   130fc:	add	sp, sp, #20
   13100:	pop	{pc}		; (ldr pc, [sp], #4)
   13104:	ldr	r0, [r6, #8]
   13108:	bl	12ce4 <__assert_fail@plt+0x19b4>
   1310c:	mov	r3, #0
   13110:	str	r3, [r6, #8]
   13114:	str	r3, [r6, #40]	; 0x28
   13118:	mov	r0, r4
   1311c:	b	130f0 <__assert_fail@plt+0x1dc0>
   13120:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13124:	strd	r6, [sp, #8]
   13128:	str	r8, [sp, #16]
   1312c:	str	lr, [sp, #20]
   13130:	mov	r6, r0
   13134:	mov	r7, r1
   13138:	mov	r5, r2
   1313c:	add	r0, r2, #176	; 0xb0
   13140:	bic	r0, r0, #7
   13144:	bl	199b0 <__assert_fail@plt+0x8680>
   13148:	subs	r4, r0, #0
   1314c:	beq	13198 <__assert_fail@plt+0x1e68>
   13150:	mov	r2, r5
   13154:	mov	r1, r7
   13158:	add	r0, r4, #168	; 0xa8
   1315c:	bl	11078 <memcpy@plt>
   13160:	add	r2, r4, r5
   13164:	mov	r3, #0
   13168:	strb	r3, [r2, #168]	; 0xa8
   1316c:	str	r5, [r4, #52]	; 0x34
   13170:	str	r6, [r4, #44]	; 0x2c
   13174:	ldr	r2, [r6, #24]
   13178:	str	r2, [r4, #28]
   1317c:	str	r3, [r4, #32]
   13180:	str	r3, [r4, #12]
   13184:	strh	r3, [r4, #58]	; 0x3a
   13188:	mov	r2, #3
   1318c:	strh	r2, [r4, #60]	; 0x3c
   13190:	str	r3, [r4, #16]
   13194:	str	r3, [r4, #20]
   13198:	mov	r0, r4
   1319c:	ldrd	r4, [sp]
   131a0:	ldrd	r6, [sp, #8]
   131a4:	ldr	r8, [sp, #16]
   131a8:	add	sp, sp, #20
   131ac:	pop	{pc}		; (ldr pc, [sp], #4)
   131b0:	str	r4, [sp, #-8]!
   131b4:	str	lr, [sp, #4]
   131b8:	sub	sp, sp, #8
   131bc:	mov	r4, r0
   131c0:	ldr	r3, [r0, #48]	; 0x30
   131c4:	movw	r2, #258	; 0x102
   131c8:	tst	r2, r3
   131cc:	beq	13214 <__assert_fail@plt+0x1ee4>
   131d0:	movw	r3, #11492	; 0x2ce4
   131d4:	movt	r3, #1
   131d8:	str	r3, [sp]
   131dc:	movw	r3, #11588	; 0x2d44
   131e0:	movt	r3, #1
   131e4:	movw	r2, #11656	; 0x2d88
   131e8:	movt	r2, #1
   131ec:	mov	r1, #0
   131f0:	mov	r0, #31
   131f4:	bl	15aac <__assert_fail@plt+0x477c>
   131f8:	str	r0, [r4, #56]	; 0x38
   131fc:	adds	r0, r0, #0
   13200:	movne	r0, #1
   13204:	add	sp, sp, #8
   13208:	ldr	r4, [sp]
   1320c:	add	sp, sp, #4
   13210:	pop	{pc}		; (ldr pc, [sp], #4)
   13214:	mov	r0, #32
   13218:	bl	199b0 <__assert_fail@plt+0x8680>
   1321c:	str	r0, [r4, #56]	; 0x38
   13220:	cmp	r0, #0
   13224:	moveq	r0, #0
   13228:	beq	13204 <__assert_fail@plt+0x1ed4>
   1322c:	bl	19ad4 <__assert_fail@plt+0x87a4>
   13230:	mov	r0, #1
   13234:	b	13204 <__assert_fail@plt+0x1ed4>
   13238:	str	r4, [sp, #-8]!
   1323c:	str	lr, [sp, #4]
   13240:	mov	ip, r1
   13244:	ldr	r3, [r0, #48]	; 0x30
   13248:	lsl	r2, r3, #11
   1324c:	and	r2, r2, #32768	; 0x8000
   13250:	orr	r2, r2, #540672	; 0x84000
   13254:	orr	r2, r2, #2304	; 0x900
   13258:	tst	r3, #512	; 0x200
   1325c:	beq	13274 <__assert_fail@plt+0x1f44>
   13260:	ldr	r0, [r0, #32]
   13264:	bl	16330 <__assert_fail@plt+0x5000>
   13268:	ldr	r4, [sp]
   1326c:	add	sp, sp, #4
   13270:	pop	{pc}		; (ldr pc, [sp], #4)
   13274:	mov	r1, r2
   13278:	mov	r0, ip
   1327c:	bl	19f08 <__assert_fail@plt+0x8bd8>
   13280:	b	13268 <__assert_fail@plt+0x1f38>
   13284:	strd	r4, [sp, #-16]!
   13288:	str	r6, [sp, #8]
   1328c:	str	lr, [sp, #12]
   13290:	subs	r4, r0, #0
   13294:	bne	132c0 <__assert_fail@plt+0x1f90>
   13298:	ldrd	r4, [sp]
   1329c:	ldr	r6, [sp, #8]
   132a0:	add	sp, sp, #12
   132a4:	pop	{pc}		; (ldr pc, [sp], #4)
   132a8:	bl	1130c <closedir@plt>
   132ac:	mov	r0, r4
   132b0:	bl	12ce4 <__assert_fail@plt+0x19b4>
   132b4:	mov	r4, r5
   132b8:	cmp	r5, #0
   132bc:	beq	13298 <__assert_fail@plt+0x1f68>
   132c0:	ldr	r5, [r4, #8]
   132c4:	ldr	r0, [r4, #12]
   132c8:	cmp	r0, #0
   132cc:	bne	132a8 <__assert_fail@plt+0x1f78>
   132d0:	b	132ac <__assert_fail@plt+0x1f7c>
   132d4:	str	r4, [sp, #-8]!
   132d8:	str	lr, [sp, #4]
   132dc:	ldr	r3, [r0, #48]	; 0x30
   132e0:	movw	r2, #258	; 0x102
   132e4:	tst	r2, r3
   132e8:	beq	13308 <__assert_fail@plt+0x1fd8>
   132ec:	ldr	r0, [r0, #56]	; 0x38
   132f0:	cmp	r0, #0
   132f4:	beq	132fc <__assert_fail@plt+0x1fcc>
   132f8:	bl	15c78 <__assert_fail@plt+0x4948>
   132fc:	ldr	r4, [sp]
   13300:	add	sp, sp, #4
   13304:	pop	{pc}		; (ldr pc, [sp], #4)
   13308:	ldr	r0, [r0, #56]	; 0x38
   1330c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   13310:	b	132fc <__assert_fail@plt+0x1fcc>
   13314:	str	r4, [sp, #-8]!
   13318:	str	lr, [sp, #4]
   1331c:	mov	r4, r0
   13320:	mov	r0, r4
   13324:	bl	16200 <__assert_fail@plt+0x4ed0>
   13328:	cmp	r0, #0
   1332c:	bne	13348 <__assert_fail@plt+0x2018>
   13330:	mov	r0, r4
   13334:	bl	16254 <__assert_fail@plt+0x4f24>
   13338:	cmp	r0, #0
   1333c:	blt	13320 <__assert_fail@plt+0x1ff0>
   13340:	bl	112f4 <close@plt>
   13344:	b	13320 <__assert_fail@plt+0x1ff0>
   13348:	ldr	r4, [sp]
   1334c:	add	sp, sp, #4
   13350:	pop	{pc}		; (ldr pc, [sp], #4)
   13354:	strd	r4, [sp, #-20]!	; 0xffffffec
   13358:	strd	r6, [sp, #8]
   1335c:	str	lr, [sp, #16]
   13360:	sub	sp, sp, #116	; 0x74
   13364:	ldr	r7, [r0, #44]	; 0x2c
   13368:	ldr	r3, [r7, #48]	; 0x30
   1336c:	ands	r3, r3, #512	; 0x200
   13370:	beq	13460 <__assert_fail@plt+0x2130>
   13374:	mov	r6, r1
   13378:	mov	r5, r0
   1337c:	ldr	r4, [r7, #52]	; 0x34
   13380:	cmp	r4, #0
   13384:	beq	133ac <__assert_fail@plt+0x207c>
   13388:	ldrd	r2, [r5, #64]	; 0x40
   1338c:	strd	r2, [sp, #8]
   13390:	add	r1, sp, #8
   13394:	mov	r0, r4
   13398:	bl	157b8 <__assert_fail@plt+0x4488>
   1339c:	cmp	r0, #0
   133a0:	beq	133e4 <__assert_fail@plt+0x20b4>
   133a4:	ldr	r3, [r0, #8]
   133a8:	b	13460 <__assert_fail@plt+0x2130>
   133ac:	movw	r3, #11492	; 0x2ce4
   133b0:	movt	r3, #1
   133b4:	str	r3, [sp]
   133b8:	movw	r3, #11736	; 0x2dd8
   133bc:	movt	r3, #1
   133c0:	movw	r2, #11696	; 0x2db0
   133c4:	movt	r2, #1
   133c8:	mov	r1, #0
   133cc:	mov	r0, #13
   133d0:	bl	15aac <__assert_fail@plt+0x477c>
   133d4:	mov	r4, r0
   133d8:	str	r0, [r7, #52]	; 0x34
   133dc:	cmp	r0, #0
   133e0:	bne	13388 <__assert_fail@plt+0x2058>
   133e4:	cmp	r6, #0
   133e8:	blt	1345c <__assert_fail@plt+0x212c>
   133ec:	add	r1, sp, #24
   133f0:	mov	r0, r6
   133f4:	bl	10fe8 <fstatfs64@plt>
   133f8:	cmp	r0, #0
   133fc:	bne	13478 <__assert_fail@plt+0x2148>
   13400:	cmp	r4, #0
   13404:	beq	13444 <__assert_fail@plt+0x2114>
   13408:	mov	r0, #16
   1340c:	bl	199b0 <__assert_fail@plt+0x8680>
   13410:	subs	r6, r0, #0
   13414:	beq	13444 <__assert_fail@plt+0x2114>
   13418:	ldrd	r2, [r5, #64]	; 0x40
   1341c:	strd	r2, [r6]
   13420:	ldr	r3, [sp, #24]
   13424:	str	r3, [r6, #8]
   13428:	mov	r1, r6
   1342c:	mov	r0, r4
   13430:	bl	16060 <__assert_fail@plt+0x4d30>
   13434:	cmp	r0, #0
   13438:	beq	13450 <__assert_fail@plt+0x2120>
   1343c:	cmp	r6, r0
   13440:	bne	1344c <__assert_fail@plt+0x211c>
   13444:	ldr	r3, [sp, #24]
   13448:	b	13460 <__assert_fail@plt+0x2130>
   1344c:	bl	112e8 <abort@plt>
   13450:	mov	r0, r6
   13454:	bl	12ce4 <__assert_fail@plt+0x19b4>
   13458:	b	13444 <__assert_fail@plt+0x2114>
   1345c:	mov	r3, #0
   13460:	mov	r0, r3
   13464:	add	sp, sp, #116	; 0x74
   13468:	ldrd	r4, [sp]
   1346c:	ldrd	r6, [sp, #8]
   13470:	add	sp, sp, #16
   13474:	pop	{pc}		; (ldr pc, [sp], #4)
   13478:	mov	r3, #0
   1347c:	b	13460 <__assert_fail@plt+0x2130>
   13480:	strd	r4, [sp, #-16]!
   13484:	str	r6, [sp, #8]
   13488:	str	lr, [sp, #12]
   1348c:	mov	r5, r0
   13490:	mov	r4, r1
   13494:	ldr	r3, [r0, #48]	; 0x30
   13498:	movw	r2, #258	; 0x102
   1349c:	tst	r2, r3
   134a0:	beq	13514 <__assert_fail@plt+0x21e4>
   134a4:	mov	r0, #24
   134a8:	bl	199b0 <__assert_fail@plt+0x8680>
   134ac:	subs	r6, r0, #0
   134b0:	moveq	r0, #0
   134b4:	beq	13538 <__assert_fail@plt+0x2208>
   134b8:	ldrd	r2, [r4, #64]	; 0x40
   134bc:	strd	r2, [r6]
   134c0:	ldrd	r2, [r4, #160]	; 0xa0
   134c4:	strd	r2, [r6, #8]
   134c8:	str	r4, [r6, #16]
   134cc:	mov	r1, r6
   134d0:	ldr	r0, [r5, #56]	; 0x38
   134d4:	bl	16060 <__assert_fail@plt+0x4d30>
   134d8:	mov	r5, r0
   134dc:	cmp	r6, r0
   134e0:	moveq	r0, #1
   134e4:	beq	13538 <__assert_fail@plt+0x2208>
   134e8:	mov	r0, r6
   134ec:	bl	12ce4 <__assert_fail@plt+0x19b4>
   134f0:	cmp	r5, #0
   134f4:	moveq	r0, #0
   134f8:	beq	13538 <__assert_fail@plt+0x2208>
   134fc:	ldr	r3, [r5, #16]
   13500:	str	r3, [r4]
   13504:	mov	r3, #2
   13508:	strh	r3, [r4, #56]	; 0x38
   1350c:	mov	r0, #1
   13510:	b	13538 <__assert_fail@plt+0x2208>
   13514:	add	r1, r1, #64	; 0x40
   13518:	ldr	r0, [r0, #56]	; 0x38
   1351c:	bl	19af0 <__assert_fail@plt+0x87c0>
   13520:	cmp	r0, #0
   13524:	moveq	r0, #1
   13528:	beq	13538 <__assert_fail@plt+0x2208>
   1352c:	str	r4, [r4]
   13530:	mov	r3, #2
   13534:	strh	r3, [r4, #56]	; 0x38
   13538:	ldrd	r4, [sp]
   1353c:	ldr	r6, [sp, #8]
   13540:	add	sp, sp, #12
   13544:	pop	{pc}		; (ldr pc, [sp], #4)
   13548:	strd	r4, [sp, #-16]!
   1354c:	str	r6, [sp, #8]
   13550:	str	lr, [sp, #12]
   13554:	mov	r5, r1
   13558:	ldr	r1, [r0, #32]
   1355c:	cmp	r1, r5
   13560:	movne	r3, #0
   13564:	moveq	r3, #1
   13568:	cmn	r1, #100	; 0x64
   1356c:	moveq	r3, #0
   13570:	cmp	r3, #0
   13574:	bne	135b8 <__assert_fail@plt+0x2288>
   13578:	mov	r4, r0
   1357c:	cmp	r2, #0
   13580:	bne	135bc <__assert_fail@plt+0x228c>
   13584:	ldr	r3, [r0, #48]	; 0x30
   13588:	eor	r3, r3, #4
   1358c:	ubfx	r3, r3, #2, #1
   13590:	cmp	r1, #0
   13594:	movlt	r3, #0
   13598:	andge	r3, r3, #1
   1359c:	cmp	r3, #0
   135a0:	bne	135d4 <__assert_fail@plt+0x22a4>
   135a4:	str	r5, [r4, #32]
   135a8:	ldrd	r4, [sp]
   135ac:	ldr	r6, [sp, #8]
   135b0:	add	sp, sp, #12
   135b4:	pop	{pc}		; (ldr pc, [sp], #4)
   135b8:	bl	112e8 <abort@plt>
   135bc:	add	r0, r0, #60	; 0x3c
   135c0:	bl	16208 <__assert_fail@plt+0x4ed8>
   135c4:	cmp	r0, #0
   135c8:	blt	135a4 <__assert_fail@plt+0x2274>
   135cc:	bl	112f4 <close@plt>
   135d0:	b	135a4 <__assert_fail@plt+0x2274>
   135d4:	mov	r0, r1
   135d8:	bl	112f4 <close@plt>
   135dc:	b	135a4 <__assert_fail@plt+0x2274>
   135e0:	strd	r4, [sp, #-16]!
   135e4:	str	r6, [sp, #8]
   135e8:	str	lr, [sp, #12]
   135ec:	mov	r4, r0
   135f0:	ldr	r3, [r0, #48]	; 0x30
   135f4:	ands	r5, r3, #4
   135f8:	movne	r5, #0
   135fc:	bne	13614 <__assert_fail@plt+0x22e4>
   13600:	tst	r3, #512	; 0x200
   13604:	beq	13630 <__assert_fail@plt+0x2300>
   13608:	mov	r2, #1
   1360c:	mvn	r1, #99	; 0x63
   13610:	bl	13548 <__assert_fail@plt+0x2218>
   13614:	add	r0, r4, #60	; 0x3c
   13618:	bl	13314 <__assert_fail@plt+0x1fe4>
   1361c:	mov	r0, r5
   13620:	ldrd	r4, [sp]
   13624:	ldr	r6, [sp, #8]
   13628:	add	sp, sp, #12
   1362c:	pop	{pc}		; (ldr pc, [sp], #4)
   13630:	ldr	r0, [r0, #28]
   13634:	bl	112a0 <fchdir@plt>
   13638:	adds	r5, r0, #0
   1363c:	movne	r5, #1
   13640:	b	13614 <__assert_fail@plt+0x22e4>
   13644:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13648:	strd	r6, [sp, #8]
   1364c:	strd	r8, [sp, #16]
   13650:	str	lr, [sp, #24]
   13654:	sub	sp, sp, #108	; 0x6c
   13658:	mov	r4, r0
   1365c:	mov	r7, r1
   13660:	mov	r5, r2
   13664:	subs	r9, r3, #0
   13668:	beq	13794 <__assert_fail@plt+0x2464>
   1366c:	movw	r1, #45916	; 0xb35c
   13670:	movt	r1, #1
   13674:	mov	r0, r9
   13678:	bl	11024 <strcmp@plt>
   1367c:	cmp	r0, #0
   13680:	bne	13794 <__assert_fail@plt+0x2464>
   13684:	ldr	r3, [r4, #48]	; 0x30
   13688:	tst	r3, #4
   1368c:	bne	136d4 <__assert_fail@plt+0x23a4>
   13690:	cmp	r5, #0
   13694:	bge	13748 <__assert_fail@plt+0x2418>
   13698:	tst	r3, #512	; 0x200
   1369c:	beq	136b4 <__assert_fail@plt+0x2384>
   136a0:	add	r6, r4, #60	; 0x3c
   136a4:	mov	r0, r6
   136a8:	bl	16200 <__assert_fail@plt+0x4ed0>
   136ac:	cmp	r0, #0
   136b0:	beq	13700 <__assert_fail@plt+0x23d0>
   136b4:	mov	r8, #1
   136b8:	mov	r1, r9
   136bc:	mov	r0, r4
   136c0:	bl	13238 <__assert_fail@plt+0x1f08>
   136c4:	subs	r6, r0, #0
   136c8:	bge	137b0 <__assert_fail@plt+0x2480>
   136cc:	mvn	r4, #0
   136d0:	b	13834 <__assert_fail@plt+0x2504>
   136d4:	ubfx	r3, r3, #9, #1
   136d8:	cmp	r5, #0
   136dc:	movlt	r3, #0
   136e0:	andge	r3, r3, #1
   136e4:	cmp	r3, #0
   136e8:	moveq	r4, #0
   136ec:	beq	13834 <__assert_fail@plt+0x2504>
   136f0:	mov	r0, r5
   136f4:	bl	112f4 <close@plt>
   136f8:	mov	r4, #0
   136fc:	b	13834 <__assert_fail@plt+0x2504>
   13700:	mov	r0, r6
   13704:	bl	16254 <__assert_fail@plt+0x4f24>
   13708:	subs	r6, r0, #0
   1370c:	blt	136b4 <__assert_fail@plt+0x2384>
   13710:	ldr	r3, [r4, #48]	; 0x30
   13714:	tst	r3, #2
   13718:	bne	13754 <__assert_fail@plt+0x2424>
   1371c:	mov	r5, r6
   13720:	mov	r8, #1
   13724:	ldr	r3, [r4, #48]	; 0x30
   13728:	tst	r3, #512	; 0x200
   1372c:	bne	13760 <__assert_fail@plt+0x2430>
   13730:	mov	r0, r6
   13734:	bl	112a0 <fchdir@plt>
   13738:	mov	r4, r0
   1373c:	b	1382c <__assert_fail@plt+0x24fc>
   13740:	mov	r8, #0
   13744:	b	136b8 <__assert_fail@plt+0x2388>
   13748:	mov	r6, r5
   1374c:	mov	r8, #1
   13750:	b	137b0 <__assert_fail@plt+0x2480>
   13754:	mov	r5, r6
   13758:	mov	r8, #1
   1375c:	b	137dc <__assert_fail@plt+0x24ac>
   13760:	eor	r2, r8, #1
   13764:	mov	r1, r6
   13768:	mov	r0, r4
   1376c:	bl	13548 <__assert_fail@plt+0x2218>
   13770:	mov	r4, #0
   13774:	b	13834 <__assert_fail@plt+0x2504>
   13778:	bl	111ec <__errno_location@plt>
   1377c:	mov	r5, r0
   13780:	ldr	r7, [r0]
   13784:	mov	r0, r6
   13788:	bl	112f4 <close@plt>
   1378c:	str	r7, [r5]
   13790:	b	13834 <__assert_fail@plt+0x2504>
   13794:	ldr	r3, [r4, #48]	; 0x30
   13798:	tst	r3, #4
   1379c:	bne	136d4 <__assert_fail@plt+0x23a4>
   137a0:	cmp	r5, #0
   137a4:	movge	r6, r5
   137a8:	movge	r8, #0
   137ac:	blt	13740 <__assert_fail@plt+0x2410>
   137b0:	ldr	r3, [r4, #48]	; 0x30
   137b4:	tst	r3, #2
   137b8:	bne	137dc <__assert_fail@plt+0x24ac>
   137bc:	cmp	r9, #0
   137c0:	beq	13724 <__assert_fail@plt+0x23f4>
   137c4:	movw	r1, #45916	; 0xb35c
   137c8:	movt	r1, #1
   137cc:	mov	r0, r9
   137d0:	bl	11024 <strcmp@plt>
   137d4:	cmp	r0, #0
   137d8:	bne	13724 <__assert_fail@plt+0x23f4>
   137dc:	mov	r2, sp
   137e0:	mov	r1, r6
   137e4:	mov	r0, #3
   137e8:	bl	110fc <__fxstat64@plt>
   137ec:	cmp	r0, #0
   137f0:	bne	13828 <__assert_fail@plt+0x24f8>
   137f4:	ldrd	r0, [r7, #64]	; 0x40
   137f8:	ldrd	r2, [sp]
   137fc:	cmp	r1, r3
   13800:	cmpeq	r0, r2
   13804:	bne	1381c <__assert_fail@plt+0x24ec>
   13808:	ldrd	r0, [r7, #160]	; 0xa0
   1380c:	ldrd	r2, [sp, #96]	; 0x60
   13810:	cmp	r1, r3
   13814:	cmpeq	r0, r2
   13818:	beq	13724 <__assert_fail@plt+0x23f4>
   1381c:	bl	111ec <__errno_location@plt>
   13820:	mov	r3, #2
   13824:	str	r3, [r0]
   13828:	mvn	r4, #0
   1382c:	cmp	r5, #0
   13830:	blt	13778 <__assert_fail@plt+0x2448>
   13834:	mov	r0, r4
   13838:	add	sp, sp, #108	; 0x6c
   1383c:	ldrd	r4, [sp]
   13840:	ldrd	r6, [sp, #8]
   13844:	ldrd	r8, [sp, #16]
   13848:	add	sp, sp, #24
   1384c:	pop	{pc}		; (ldr pc, [sp], #4)
   13850:	strd	r4, [sp, #-12]!
   13854:	str	lr, [sp, #8]
   13858:	sub	sp, sp, #28
   1385c:	ldr	r3, [r0, #48]	; 0x30
   13860:	movw	r2, #258	; 0x102
   13864:	tst	r2, r3
   13868:	bne	138d4 <__assert_fail@plt+0x25a4>
   1386c:	ldr	ip, [r1, #4]
   13870:	cmp	ip, #0
   13874:	beq	138fc <__assert_fail@plt+0x25cc>
   13878:	ldr	r3, [ip, #48]	; 0x30
   1387c:	cmp	r3, #0
   13880:	blt	138fc <__assert_fail@plt+0x25cc>
   13884:	ldr	lr, [r0, #56]	; 0x38
   13888:	ldrd	r2, [lr, #16]
   1388c:	orrs	r3, r2, r3
   13890:	beq	13910 <__assert_fail@plt+0x25e0>
   13894:	ldrd	r4, [lr]
   13898:	ldrd	r2, [r1, #160]	; 0xa0
   1389c:	cmp	r5, r3
   138a0:	cmpeq	r4, r2
   138a4:	bne	138fc <__assert_fail@plt+0x25cc>
   138a8:	ldrd	r2, [lr, #8]
   138ac:	ldrd	r4, [r1, #64]	; 0x40
   138b0:	cmp	r3, r5
   138b4:	cmpeq	r2, r4
   138b8:	bne	138fc <__assert_fail@plt+0x25cc>
   138bc:	ldrd	r2, [ip, #64]	; 0x40
   138c0:	strd	r2, [lr, #8]
   138c4:	ldr	r3, [r0, #56]	; 0x38
   138c8:	ldrd	r0, [ip, #160]	; 0xa0
   138cc:	strd	r0, [r3]
   138d0:	b	138fc <__assert_fail@plt+0x25cc>
   138d4:	ldrd	r2, [r1, #64]	; 0x40
   138d8:	strd	r2, [sp]
   138dc:	ldrd	r2, [r1, #160]	; 0xa0
   138e0:	strd	r2, [sp, #8]
   138e4:	mov	r1, sp
   138e8:	ldr	r0, [r0, #56]	; 0x38
   138ec:	bl	160a0 <__assert_fail@plt+0x4d70>
   138f0:	cmp	r0, #0
   138f4:	beq	1390c <__assert_fail@plt+0x25dc>
   138f8:	bl	12ce4 <__assert_fail@plt+0x19b4>
   138fc:	add	sp, sp, #28
   13900:	ldrd	r4, [sp]
   13904:	add	sp, sp, #8
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	bl	112e8 <abort@plt>
   13910:	bl	112e8 <abort@plt>
   13914:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13918:	strd	r6, [sp, #8]
   1391c:	strd	r8, [sp, #16]
   13920:	strd	sl, [sp, #24]
   13924:	str	lr, [sp, #32]
   13928:	sub	sp, sp, #68	; 0x44
   1392c:	mov	r5, r0
   13930:	str	r1, [sp, #32]
   13934:	ldr	r9, [r0]
   13938:	ldr	r0, [r9, #12]
   1393c:	str	r0, [sp, #40]	; 0x28
   13940:	cmp	r0, #0
   13944:	beq	13a54 <__assert_fail@plt+0x2724>
   13948:	bl	11294 <dirfd@plt>
   1394c:	str	r0, [sp, #60]	; 0x3c
   13950:	cmp	r0, #0
   13954:	blt	13a10 <__assert_fail@plt+0x26e0>
   13958:	ldr	r2, [r5, #44]	; 0x2c
   1395c:	movw	r3, #34464	; 0x86a0
   13960:	movt	r3, #1
   13964:	cmp	r2, #0
   13968:	mvnne	r3, #0
   1396c:	str	r3, [sp, #16]
   13970:	mov	r3, #1
   13974:	str	r3, [sp, #52]	; 0x34
   13978:	ldr	r3, [r9, #40]	; 0x28
   1397c:	sub	r1, r3, #1
   13980:	ldr	r2, [r9, #28]
   13984:	ldrb	r2, [r2, r1]
   13988:	cmp	r2, #47	; 0x2f
   1398c:	movne	r1, r3
   13990:	str	r1, [sp, #28]
   13994:	ldr	r3, [r5, #48]	; 0x30
   13998:	tst	r3, #4
   1399c:	moveq	r3, #0
   139a0:	streq	r3, [sp, #20]
   139a4:	beq	139c0 <__assert_fail@plt+0x2690>
   139a8:	ldr	r3, [r5, #24]
   139ac:	add	r2, r3, r1
   139b0:	add	r2, r2, #1
   139b4:	str	r2, [sp, #20]
   139b8:	mov	r2, #47	; 0x2f
   139bc:	strb	r2, [r3, r1]
   139c0:	ldr	r3, [sp, #28]
   139c4:	add	sl, r3, #1
   139c8:	ldr	fp, [r5, #36]	; 0x24
   139cc:	sub	fp, fp, sl
   139d0:	ldr	r3, [r9, #48]	; 0x30
   139d4:	add	r3, r3, #1
   139d8:	str	r3, [sp, #12]
   139dc:	mov	r3, #0
   139e0:	str	r3, [sp, #36]	; 0x24
   139e4:	str	r3, [sp, #24]
   139e8:	str	r3, [sp]
   139ec:	mov	r8, r3
   139f0:	str	r3, [sp, #4]
   139f4:	movw	r3, #6548	; 0x1994
   139f8:	movt	r3, #258	; 0x102
   139fc:	str	r3, [sp, #44]	; 0x2c
   13a00:	movw	r3, #19778	; 0x4d42
   13a04:	movt	r3, #65363	; 0xff53
   13a08:	str	r3, [sp, #48]	; 0x30
   13a0c:	b	13fec <__assert_fail@plt+0x2cbc>
   13a10:	ldr	r0, [r9, #12]
   13a14:	bl	1130c <closedir@plt>
   13a18:	mov	r3, #0
   13a1c:	str	r3, [r9, #12]
   13a20:	ldr	r3, [sp, #32]
   13a24:	cmp	r3, #3
   13a28:	movne	r3, #0
   13a2c:	strne	r3, [sp, #4]
   13a30:	bne	13e9c <__assert_fail@plt+0x2b6c>
   13a34:	mov	r3, #4
   13a38:	strh	r3, [r9, #56]	; 0x38
   13a3c:	bl	111ec <__errno_location@plt>
   13a40:	ldr	r3, [r0]
   13a44:	str	r3, [r9, #32]
   13a48:	mov	r3, #0
   13a4c:	str	r3, [sp, #4]
   13a50:	b	13e9c <__assert_fail@plt+0x2b6c>
   13a54:	ldr	r3, [r5, #48]	; 0x30
   13a58:	and	r2, r3, #516	; 0x204
   13a5c:	cmp	r2, #512	; 0x200
   13a60:	ldreq	r0, [r5, #32]
   13a64:	mvnne	r0, #99	; 0x63
   13a68:	ldr	r1, [r9, #24]
   13a6c:	ands	r2, r3, #16
   13a70:	beq	13a8c <__assert_fail@plt+0x275c>
   13a74:	tst	r3, #1
   13a78:	moveq	r2, #32768	; 0x8000
   13a7c:	beq	13a8c <__assert_fail@plt+0x275c>
   13a80:	ldr	r2, [r9, #48]	; 0x30
   13a84:	cmp	r2, #0
   13a88:	movne	r2, #32768	; 0x8000
   13a8c:	add	r3, sp, #60	; 0x3c
   13a90:	bl	1636c <__assert_fail@plt+0x503c>
   13a94:	str	r0, [sp, #4]
   13a98:	str	r0, [r9, #12]
   13a9c:	cmp	r0, #0
   13aa0:	beq	13b74 <__assert_fail@plt+0x2844>
   13aa4:	ldrh	r3, [r9, #56]	; 0x38
   13aa8:	cmp	r3, #11
   13aac:	beq	13b98 <__assert_fail@plt+0x2868>
   13ab0:	ldr	r3, [r5, #48]	; 0x30
   13ab4:	tst	r3, #256	; 0x100
   13ab8:	bne	13bb0 <__assert_fail@plt+0x2880>
   13abc:	ldr	r2, [r5, #44]	; 0x2c
   13ac0:	movw	r3, #34464	; 0x86a0
   13ac4:	movt	r3, #1
   13ac8:	cmp	r2, #0
   13acc:	mvnne	r3, #0
   13ad0:	str	r3, [sp, #16]
   13ad4:	ldr	r3, [sp, #32]
   13ad8:	cmp	r3, #2
   13adc:	beq	13cd4 <__assert_fail@plt+0x29a4>
   13ae0:	ldr	r3, [r5, #48]	; 0x30
   13ae4:	and	r3, r3, #56	; 0x38
   13ae8:	cmp	r3, #24
   13aec:	beq	13bf8 <__assert_fail@plt+0x28c8>
   13af0:	ldr	r3, [sp, #32]
   13af4:	cmp	r3, #3
   13af8:	movne	r4, #0
   13afc:	moveq	r4, #1
   13b00:	mov	r6, #1
   13b04:	ldr	r3, [r5, #48]	; 0x30
   13b08:	tst	r3, #512	; 0x200
   13b0c:	bne	13c90 <__assert_fail@plt+0x2960>
   13b10:	ldr	r2, [sp, #60]	; 0x3c
   13b14:	cmp	r2, #0
   13b18:	bge	13ca8 <__assert_fail@plt+0x2978>
   13b1c:	tst	r4, r6
   13b20:	beq	13b30 <__assert_fail@plt+0x2800>
   13b24:	bl	111ec <__errno_location@plt>
   13b28:	ldr	r3, [r0]
   13b2c:	str	r3, [r9, #32]
   13b30:	ldrh	r3, [r9, #58]	; 0x3a
   13b34:	orr	r3, r3, #1
   13b38:	strh	r3, [r9, #58]	; 0x3a
   13b3c:	ldr	r0, [r9, #12]
   13b40:	bl	1130c <closedir@plt>
   13b44:	mov	r3, #0
   13b48:	str	r3, [r9, #12]
   13b4c:	ldr	r3, [r5, #48]	; 0x30
   13b50:	tst	r3, #512	; 0x200
   13b54:	beq	13b64 <__assert_fail@plt+0x2834>
   13b58:	ldr	r0, [sp, #60]	; 0x3c
   13b5c:	cmp	r0, #0
   13b60:	bge	13ccc <__assert_fail@plt+0x299c>
   13b64:	mov	r3, #0
   13b68:	str	r3, [r9, #12]
   13b6c:	str	r3, [sp, #52]	; 0x34
   13b70:	b	13978 <__assert_fail@plt+0x2648>
   13b74:	ldr	r3, [sp, #32]
   13b78:	cmp	r3, #3
   13b7c:	bne	13e9c <__assert_fail@plt+0x2b6c>
   13b80:	mov	r3, #4
   13b84:	strh	r3, [r9, #56]	; 0x38
   13b88:	bl	111ec <__errno_location@plt>
   13b8c:	ldr	r3, [r0]
   13b90:	str	r3, [r9, #32]
   13b94:	b	13e9c <__assert_fail@plt+0x2b6c>
   13b98:	mov	r2, #0
   13b9c:	mov	r1, r9
   13ba0:	mov	r0, r5
   13ba4:	bl	12ec0 <__assert_fail@plt+0x1b90>
   13ba8:	strh	r0, [r9, #56]	; 0x38
   13bac:	b	13abc <__assert_fail@plt+0x278c>
   13bb0:	mov	r1, r9
   13bb4:	mov	r0, r5
   13bb8:	bl	13850 <__assert_fail@plt+0x2520>
   13bbc:	mov	r2, #0
   13bc0:	mov	r1, r9
   13bc4:	mov	r0, r5
   13bc8:	bl	12ec0 <__assert_fail@plt+0x1b90>
   13bcc:	mov	r1, r9
   13bd0:	mov	r0, r5
   13bd4:	bl	13480 <__assert_fail@plt+0x2150>
   13bd8:	cmp	r0, #0
   13bdc:	bne	13abc <__assert_fail@plt+0x278c>
   13be0:	bl	111ec <__errno_location@plt>
   13be4:	mov	r3, #12
   13be8:	str	r3, [r0]
   13bec:	ldr	r3, [sp, #40]	; 0x28
   13bf0:	str	r3, [sp, #4]
   13bf4:	b	13e9c <__assert_fail@plt+0x2b6c>
   13bf8:	ldr	r3, [r9, #84]	; 0x54
   13bfc:	cmp	r3, #2
   13c00:	bne	13af0 <__assert_fail@plt+0x27c0>
   13c04:	ldr	r1, [sp, #60]	; 0x3c
   13c08:	mov	r0, r9
   13c0c:	bl	13354 <__assert_fail@plt+0x2024>
   13c10:	movw	r3, #26985	; 0x6969
   13c14:	cmp	r0, r3
   13c18:	beq	13c78 <__assert_fail@plt+0x2948>
   13c1c:	bgt	13c5c <__assert_fail@plt+0x292c>
   13c20:	movw	r3, #19778	; 0x4d42
   13c24:	movt	r3, #65363	; 0xff53
   13c28:	cmp	r0, r3
   13c2c:	beq	13c78 <__assert_fail@plt+0x2948>
   13c30:	cmp	r0, #0
   13c34:	beq	13c78 <__assert_fail@plt+0x2948>
   13c38:	ldr	r3, [sp, #32]
   13c3c:	cmp	r3, #3
   13c40:	moveq	r4, #1
   13c44:	movne	r4, #0
   13c48:	movne	r3, #0
   13c4c:	strne	r3, [sp, #52]	; 0x34
   13c50:	bne	13978 <__assert_fail@plt+0x2648>
   13c54:	mov	r6, #0
   13c58:	b	13b04 <__assert_fail@plt+0x27d4>
   13c5c:	movw	r3, #40864	; 0x9fa0
   13c60:	cmp	r0, r3
   13c64:	beq	13c78 <__assert_fail@plt+0x2948>
   13c68:	movw	r3, #16719	; 0x414f
   13c6c:	movt	r3, #21318	; 0x5346
   13c70:	cmp	r0, r3
   13c74:	bne	13c38 <__assert_fail@plt+0x2908>
   13c78:	ldr	r3, [sp, #32]
   13c7c:	cmp	r3, #3
   13c80:	movne	r4, #0
   13c84:	moveq	r4, #1
   13c88:	mov	r6, #1
   13c8c:	b	13b04 <__assert_fail@plt+0x27d4>
   13c90:	mov	r2, #3
   13c94:	movw	r1, #1030	; 0x406
   13c98:	ldr	r0, [sp, #60]	; 0x3c
   13c9c:	bl	19c9c <__assert_fail@plt+0x896c>
   13ca0:	str	r0, [sp, #60]	; 0x3c
   13ca4:	b	13b10 <__assert_fail@plt+0x27e0>
   13ca8:	mov	r3, #0
   13cac:	mov	r1, r9
   13cb0:	mov	r0, r5
   13cb4:	bl	13644 <__assert_fail@plt+0x2314>
   13cb8:	cmp	r0, #0
   13cbc:	moveq	r3, #1
   13cc0:	streq	r3, [sp, #52]	; 0x34
   13cc4:	beq	13978 <__assert_fail@plt+0x2648>
   13cc8:	b	13b1c <__assert_fail@plt+0x27ec>
   13ccc:	bl	112f4 <close@plt>
   13cd0:	b	13b64 <__assert_fail@plt+0x2834>
   13cd4:	mov	r3, #0
   13cd8:	str	r3, [sp, #52]	; 0x34
   13cdc:	b	13978 <__assert_fail@plt+0x2648>
   13ce0:	ldr	r3, [sp, #8]
   13ce4:	ldr	r3, [r3]
   13ce8:	cmp	r3, #0
   13cec:	beq	13d0c <__assert_fail@plt+0x29dc>
   13cf0:	str	r3, [r9, #32]
   13cf4:	ldr	r3, [sp, #40]	; 0x28
   13cf8:	orr	r3, r3, r8
   13cfc:	cmp	r3, #0
   13d00:	movne	r3, #7
   13d04:	moveq	r3, #4
   13d08:	strh	r3, [r9, #56]	; 0x38
   13d0c:	ldr	r0, [r9, #12]
   13d10:	cmp	r0, #0
   13d14:	beq	13d24 <__assert_fail@plt+0x29f4>
   13d18:	bl	1130c <closedir@plt>
   13d1c:	mov	r3, #0
   13d20:	str	r3, [r9, #12]
   13d24:	ldr	r3, [sp, #24]
   13d28:	cmp	r3, #0
   13d2c:	bne	141ec <__assert_fail@plt+0x2ebc>
   13d30:	ldr	r3, [r5, #48]	; 0x30
   13d34:	tst	r3, #4
   13d38:	beq	13d64 <__assert_fail@plt+0x2a34>
   13d3c:	ldr	r3, [r5, #36]	; 0x24
   13d40:	cmp	r8, #0
   13d44:	cmpne	r3, sl
   13d48:	bne	13d58 <__assert_fail@plt+0x2a28>
   13d4c:	ldr	r3, [sp, #20]
   13d50:	sub	r3, r3, #1
   13d54:	str	r3, [sp, #20]
   13d58:	mov	r3, #0
   13d5c:	ldr	r2, [sp, #20]
   13d60:	strb	r3, [r2]
   13d64:	ldr	r3, [sp, #52]	; 0x34
   13d68:	ldr	r2, [sp, #40]	; 0x28
   13d6c:	cmp	r2, #0
   13d70:	movne	r3, #0
   13d74:	cmp	r3, #0
   13d78:	beq	13db0 <__assert_fail@plt+0x2a80>
   13d7c:	ldr	r3, [sp, #32]
   13d80:	cmp	r8, #0
   13d84:	cmpne	r3, #1
   13d88:	bne	13db8 <__assert_fail@plt+0x2a88>
   13d8c:	ldr	r3, [r9, #48]	; 0x30
   13d90:	cmp	r3, #0
   13d94:	bne	1427c <__assert_fail@plt+0x2f4c>
   13d98:	mov	r0, r5
   13d9c:	bl	135e0 <__assert_fail@plt+0x22b0>
   13da0:	adds	r0, r0, #0
   13da4:	movne	r0, #1
   13da8:	cmp	r0, #0
   13dac:	bne	142a0 <__assert_fail@plt+0x2f70>
   13db0:	cmp	r8, #0
   13db4:	beq	142c8 <__assert_fail@plt+0x2f98>
   13db8:	ldr	r3, [sp, #36]	; 0x24
   13dbc:	cmp	r3, #0
   13dc0:	bne	14300 <__assert_fail@plt+0x2fd0>
   13dc4:	ldr	r3, [r5, #44]	; 0x2c
   13dc8:	cmp	r3, #0
   13dcc:	cmpne	r8, #1
   13dd0:	bls	13e9c <__assert_fail@plt+0x2b6c>
   13dd4:	mov	r2, r8
   13dd8:	ldr	r1, [sp, #4]
   13ddc:	mov	r0, r5
   13de0:	bl	13030 <__assert_fail@plt+0x1d00>
   13de4:	str	r0, [sp, #4]
   13de8:	b	13e9c <__assert_fail@plt+0x2b6c>
   13dec:	ldrb	r3, [r7, #20]
   13df0:	cmp	r3, #0
   13df4:	beq	141e4 <__assert_fail@plt+0x2eb4>
   13df8:	ldrh	r3, [r7, #20]
   13dfc:	cmp	r3, #46	; 0x2e
   13e00:	bne	14030 <__assert_fail@plt+0x2d00>
   13e04:	ldr	r4, [sp]
   13e08:	b	13fe8 <__assert_fail@plt+0x2cb8>
   13e0c:	ldr	fp, [r5, #24]
   13e10:	ldr	r3, [sp, #28]
   13e14:	add	r1, r3, #2
   13e18:	add	r1, r1, r6
   13e1c:	mov	r0, r5
   13e20:	bl	12e3c <__assert_fail@plt+0x1b0c>
   13e24:	cmp	r0, #0
   13e28:	beq	13e58 <__assert_fail@plt+0x2b28>
   13e2c:	ldr	r3, [r5, #24]
   13e30:	cmp	r3, fp
   13e34:	beq	13ebc <__assert_fail@plt+0x2b8c>
   13e38:	ldr	r2, [r5, #48]	; 0x30
   13e3c:	tst	r2, #4
   13e40:	addne	r3, r3, sl
   13e44:	strne	r3, [sp, #20]
   13e48:	ldr	fp, [r5, #36]	; 0x24
   13e4c:	sub	fp, fp, sl
   13e50:	str	r0, [sp, #24]
   13e54:	b	14060 <__assert_fail@plt+0x2d30>
   13e58:	ldr	r7, [sp, #8]
   13e5c:	ldr	r6, [r7]
   13e60:	mov	r0, r4
   13e64:	bl	12ce4 <__assert_fail@plt+0x19b4>
   13e68:	ldr	r0, [sp, #4]
   13e6c:	bl	13284 <__assert_fail@plt+0x1f54>
   13e70:	ldr	r0, [r9, #12]
   13e74:	bl	1130c <closedir@plt>
   13e78:	mov	r2, #0
   13e7c:	str	r2, [r9, #12]
   13e80:	mov	r3, #7
   13e84:	strh	r3, [r9, #56]	; 0x38
   13e88:	ldr	r3, [r5, #48]	; 0x30
   13e8c:	orr	r3, r3, #8192	; 0x2000
   13e90:	str	r3, [r5, #48]	; 0x30
   13e94:	str	r6, [r7]
   13e98:	str	r2, [sp, #4]
   13e9c:	ldr	r0, [sp, #4]
   13ea0:	add	sp, sp, #68	; 0x44
   13ea4:	ldrd	r4, [sp]
   13ea8:	ldrd	r6, [sp, #8]
   13eac:	ldrd	r8, [sp, #16]
   13eb0:	ldrd	sl, [sp, #24]
   13eb4:	add	sp, sp, #32
   13eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ebc:	ldr	r0, [sp, #24]
   13ec0:	b	13e48 <__assert_fail@plt+0x2b18>
   13ec4:	mov	r0, r4
   13ec8:	bl	12ce4 <__assert_fail@plt+0x19b4>
   13ecc:	ldr	r0, [sp, #4]
   13ed0:	bl	13284 <__assert_fail@plt+0x1f54>
   13ed4:	ldr	r0, [r9, #12]
   13ed8:	bl	1130c <closedir@plt>
   13edc:	mov	r2, #0
   13ee0:	str	r2, [r9, #12]
   13ee4:	mov	r3, #7
   13ee8:	strh	r3, [r9, #56]	; 0x38
   13eec:	ldr	r3, [r5, #48]	; 0x30
   13ef0:	orr	r3, r3, #8192	; 0x2000
   13ef4:	str	r3, [r5, #48]	; 0x30
   13ef8:	mov	r3, #36	; 0x24
   13efc:	ldr	r1, [sp, #8]
   13f00:	str	r3, [r1]
   13f04:	str	r2, [sp, #4]
   13f08:	b	13e9c <__assert_fail@plt+0x2b6c>
   13f0c:	ldr	r3, [r4, #28]
   13f10:	str	r3, [r4, #24]
   13f14:	ldr	r2, [r4, #52]	; 0x34
   13f18:	add	r2, r2, #1
   13f1c:	add	r1, r4, #168	; 0xa8
   13f20:	ldr	r0, [sp, #20]
   13f24:	bl	11048 <memmove@plt>
   13f28:	b	14098 <__assert_fail@plt+0x2d68>
   13f2c:	ubfx	r3, r3, #4, #1
   13f30:	cmp	r2, #10
   13f34:	orrne	r3, r3, #1
   13f38:	cmp	r3, #0
   13f3c:	beq	140c8 <__assert_fail@plt+0x2d98>
   13f40:	mov	r2, #11
   13f44:	strh	r2, [r4, #56]	; 0x38
   13f48:	ldrb	r2, [r7, #18]
   13f4c:	sub	r2, r2, #1
   13f50:	cmp	r2, #11
   13f54:	ldrls	pc, [pc, r2, lsl #2]
   13f58:	b	14154 <__assert_fail@plt+0x2e24>
   13f5c:	andeq	r4, r1, r4, lsr #2
   13f60:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13f64:	andeq	r4, r1, r4, asr r1
   13f68:	andeq	r4, r1, r8, lsl r1
   13f6c:	andeq	r4, r1, r4, asr r1
   13f70:	andeq	r4, r1, ip, lsr #6
   13f74:	andeq	r4, r1, r4, asr r1
   13f78:	andeq	r4, r1, ip, lsr r1
   13f7c:	andeq	r4, r1, r4, asr r1
   13f80:	andeq	r4, r1, r0, lsr r1
   13f84:	andeq	r4, r1, r4, asr r1
   13f88:	andeq	r4, r1, r8, asr #2
   13f8c:	mov	r3, #0
   13f90:	mov	r2, #8192	; 0x2000
   13f94:	str	r2, [r4, #80]	; 0x50
   13f98:	cmp	r3, #0
   13f9c:	movne	r2, #1
   13fa0:	moveq	r2, #2
   13fa4:	mov	r3, #0
   13fa8:	str	r2, [r4, #112]	; 0x70
   13fac:	str	r3, [r4, #116]	; 0x74
   13fb0:	mov	r3, #0
   13fb4:	str	r3, [r4, #8]
   13fb8:	ldr	r3, [sp, #4]
   13fbc:	cmp	r3, #0
   13fc0:	ldrne	r3, [sp]
   13fc4:	strne	r4, [r3, #8]
   13fc8:	streq	r4, [sp, #4]
   13fcc:	movw	r3, #10000	; 0x2710
   13fd0:	cmp	r8, r3
   13fd4:	beq	14174 <__assert_fail@plt+0x2e44>
   13fd8:	add	r8, r8, #1
   13fdc:	ldr	r3, [sp, #16]
   13fe0:	cmp	r8, r3
   13fe4:	bcs	13d24 <__assert_fail@plt+0x29f4>
   13fe8:	str	r4, [sp]
   13fec:	ldr	r3, [r9, #12]
   13ff0:	cmp	r3, #0
   13ff4:	beq	13d24 <__assert_fail@plt+0x29f4>
   13ff8:	bl	111ec <__errno_location@plt>
   13ffc:	str	r0, [sp, #8]
   14000:	mov	r3, #0
   14004:	str	r3, [r0]
   14008:	ldr	r0, [r9, #12]
   1400c:	bl	1127c <readdir64@plt>
   14010:	subs	r7, r0, #0
   14014:	beq	13ce0 <__assert_fail@plt+0x29b0>
   14018:	ldr	r3, [r5, #48]	; 0x30
   1401c:	tst	r3, #32
   14020:	bne	14030 <__assert_fail@plt+0x2d00>
   14024:	ldrb	r3, [r7, #19]
   14028:	cmp	r3, #46	; 0x2e
   1402c:	beq	13dec <__assert_fail@plt+0x2abc>
   14030:	add	r4, r7, #19
   14034:	mov	r0, r4
   14038:	bl	111bc <strlen@plt>
   1403c:	mov	r6, r0
   14040:	mov	r2, r0
   14044:	mov	r1, r4
   14048:	mov	r0, r5
   1404c:	bl	13120 <__assert_fail@plt+0x1df0>
   14050:	subs	r4, r0, #0
   14054:	beq	13e58 <__assert_fail@plt+0x2b28>
   14058:	cmp	fp, r6
   1405c:	bls	13e0c <__assert_fail@plt+0x2adc>
   14060:	adds	r6, sl, r6
   14064:	bcs	13ec4 <__assert_fail@plt+0x2b94>
   14068:	ldr	r3, [sp, #12]
   1406c:	str	r3, [r4, #48]	; 0x30
   14070:	ldr	r3, [r5]
   14074:	str	r3, [r4, #4]
   14078:	str	r6, [r4, #40]	; 0x28
   1407c:	ldrd	r2, [r7]
   14080:	strd	r2, [r4, #160]	; 0xa0
   14084:	ldr	r3, [r5, #48]	; 0x30
   14088:	tst	r3, #4
   1408c:	addeq	r3, r4, #168	; 0xa8
   14090:	streq	r3, [r4, #24]
   14094:	bne	13f0c <__assert_fail@plt+0x2bdc>
   14098:	ldr	r3, [r5, #44]	; 0x2c
   1409c:	cmp	r3, #0
   140a0:	beq	140b0 <__assert_fail@plt+0x2d80>
   140a4:	ldr	r3, [r5, #48]	; 0x30
   140a8:	tst	r3, #1024	; 0x400
   140ac:	beq	1415c <__assert_fail@plt+0x2e2c>
   140b0:	ldr	r3, [r5, #48]	; 0x30
   140b4:	tst	r3, #8
   140b8:	beq	140c8 <__assert_fail@plt+0x2d98>
   140bc:	ldrb	r2, [r7, #18]
   140c0:	tst	r2, #251	; 0xfb
   140c4:	bne	13f2c <__assert_fail@plt+0x2bfc>
   140c8:	mov	r3, #11
   140cc:	strh	r3, [r4, #56]	; 0x38
   140d0:	ldrb	r3, [r7, #18]
   140d4:	sub	r3, r3, #1
   140d8:	cmp	r3, #11
   140dc:	ldrls	pc, [pc, r3, lsl #2]
   140e0:	b	14150 <__assert_fail@plt+0x2e20>
   140e4:	andeq	r4, r1, r0, lsr #2
   140e8:	andeq	r3, r1, ip, lsl #31
   140ec:	andeq	r4, r1, r0, asr r1
   140f0:	andeq	r4, r1, r4, lsl r1
   140f4:	andeq	r4, r1, r0, asr r1
   140f8:	andeq	r4, r1, r0, asr #6
   140fc:	andeq	r4, r1, r0, asr r1
   14100:	andeq	r4, r1, r8, lsr r1
   14104:	andeq	r4, r1, r0, asr r1
   14108:	andeq	r4, r1, ip, lsr #2
   1410c:	andeq	r4, r1, r0, asr r1
   14110:	andeq	r4, r1, r4, asr #2
   14114:	mov	r3, #0
   14118:	mov	r2, #16384	; 0x4000
   1411c:	b	13f94 <__assert_fail@plt+0x2c64>
   14120:	mov	r3, #0
   14124:	mov	r2, #4096	; 0x1000
   14128:	b	13f94 <__assert_fail@plt+0x2c64>
   1412c:	mov	r3, #0
   14130:	mov	r2, #40960	; 0xa000
   14134:	b	13f94 <__assert_fail@plt+0x2c64>
   14138:	mov	r3, #0
   1413c:	mov	r2, #32768	; 0x8000
   14140:	b	13f94 <__assert_fail@plt+0x2c64>
   14144:	mov	r3, #0
   14148:	mov	r2, #49152	; 0xc000
   1414c:	b	13f94 <__assert_fail@plt+0x2c64>
   14150:	mov	r3, #0
   14154:	mov	r2, #0
   14158:	b	13f94 <__assert_fail@plt+0x2c64>
   1415c:	mov	r2, #0
   14160:	mov	r1, r4
   14164:	mov	r0, r5
   14168:	bl	12ec0 <__assert_fail@plt+0x1b90>
   1416c:	strh	r0, [r4, #56]	; 0x38
   14170:	b	13fb0 <__assert_fail@plt+0x2c80>
   14174:	ldr	r3, [r5, #44]	; 0x2c
   14178:	cmp	r3, #0
   1417c:	beq	14188 <__assert_fail@plt+0x2e58>
   14180:	movw	r8, #10001	; 0x2711
   14184:	b	13fe8 <__assert_fail@plt+0x2cb8>
   14188:	ldr	r1, [sp, #60]	; 0x3c
   1418c:	mov	r0, r9
   14190:	bl	13354 <__assert_fail@plt+0x2024>
   14194:	movw	r3, #26985	; 0x6969
   14198:	cmp	r0, r3
   1419c:	beq	141cc <__assert_fail@plt+0x2e9c>
   141a0:	ldr	r3, [sp, #44]	; 0x2c
   141a4:	cmp	r0, r3
   141a8:	beq	141d8 <__assert_fail@plt+0x2ea8>
   141ac:	ldr	r3, [sp, #48]	; 0x30
   141b0:	cmp	r0, r3
   141b4:	moveq	r3, #0
   141b8:	streq	r3, [sp, #36]	; 0x24
   141bc:	beq	13fd8 <__assert_fail@plt+0x2ca8>
   141c0:	mov	r3, #1
   141c4:	str	r3, [sp, #36]	; 0x24
   141c8:	b	14180 <__assert_fail@plt+0x2e50>
   141cc:	mov	r3, #0
   141d0:	str	r3, [sp, #36]	; 0x24
   141d4:	b	13fd8 <__assert_fail@plt+0x2ca8>
   141d8:	mov	r3, #0
   141dc:	str	r3, [sp, #36]	; 0x24
   141e0:	b	13fd8 <__assert_fail@plt+0x2ca8>
   141e4:	ldr	r4, [sp]
   141e8:	b	13fe8 <__assert_fail@plt+0x2cb8>
   141ec:	ldr	r1, [r5, #24]
   141f0:	ldr	r3, [r5, #4]
   141f4:	cmp	r3, #0
   141f8:	bne	14214 <__assert_fail@plt+0x2ee4>
   141fc:	ldr	r3, [sp, #4]
   14200:	b	1424c <__assert_fail@plt+0x2f1c>
   14204:	str	r1, [r3, #28]
   14208:	ldr	r3, [r3, #8]
   1420c:	cmp	r3, #0
   14210:	beq	141fc <__assert_fail@plt+0x2ecc>
   14214:	ldr	r2, [r3, #24]
   14218:	add	r0, r3, #168	; 0xa8
   1421c:	cmp	r2, r0
   14220:	beq	14204 <__assert_fail@plt+0x2ed4>
   14224:	ldr	r0, [r3, #28]
   14228:	sub	r2, r2, r0
   1422c:	add	r2, r1, r2
   14230:	str	r2, [r3, #24]
   14234:	b	14204 <__assert_fail@plt+0x2ed4>
   14238:	str	r1, [r3, #28]
   1423c:	ldr	r2, [r3, #8]
   14240:	cmp	r2, #0
   14244:	ldreq	r2, [r3, #4]
   14248:	mov	r3, r2
   1424c:	ldr	r2, [r3, #48]	; 0x30
   14250:	cmp	r2, #0
   14254:	blt	13d30 <__assert_fail@plt+0x2a00>
   14258:	ldr	r2, [r3, #24]
   1425c:	add	r0, r3, #168	; 0xa8
   14260:	cmp	r2, r0
   14264:	beq	14238 <__assert_fail@plt+0x2f08>
   14268:	ldr	r0, [r3, #28]
   1426c:	sub	r2, r2, r0
   14270:	add	r2, r1, r2
   14274:	str	r2, [r3, #24]
   14278:	b	14238 <__assert_fail@plt+0x2f08>
   1427c:	movw	r3, #45916	; 0xb35c
   14280:	movt	r3, #1
   14284:	mvn	r2, #0
   14288:	ldr	r1, [r9, #4]
   1428c:	mov	r0, r5
   14290:	bl	13644 <__assert_fail@plt+0x2314>
   14294:	adds	r0, r0, #0
   14298:	movne	r0, #1
   1429c:	b	13da8 <__assert_fail@plt+0x2a78>
   142a0:	mov	r3, #7
   142a4:	strh	r3, [r9, #56]	; 0x38
   142a8:	ldr	r3, [r5, #48]	; 0x30
   142ac:	orr	r3, r3, #8192	; 0x2000
   142b0:	str	r3, [r5, #48]	; 0x30
   142b4:	ldr	r0, [sp, #4]
   142b8:	bl	13284 <__assert_fail@plt+0x1f54>
   142bc:	mov	r3, #0
   142c0:	str	r3, [sp, #4]
   142c4:	b	13e9c <__assert_fail@plt+0x2b6c>
   142c8:	ldr	r3, [sp, #32]
   142cc:	cmp	r3, #3
   142d0:	beq	142e8 <__assert_fail@plt+0x2fb8>
   142d4:	ldr	r0, [sp, #4]
   142d8:	bl	13284 <__assert_fail@plt+0x1f54>
   142dc:	mov	r3, #0
   142e0:	str	r3, [sp, #4]
   142e4:	b	13e9c <__assert_fail@plt+0x2b6c>
   142e8:	ldrh	r3, [r9, #56]	; 0x38
   142ec:	cmp	r3, #7
   142f0:	cmpne	r3, #4
   142f4:	movne	r3, #6
   142f8:	strhne	r3, [r9, #56]	; 0x38
   142fc:	b	142d4 <__assert_fail@plt+0x2fa4>
   14300:	movw	r3, #11776	; 0x2e00
   14304:	movt	r3, #1
   14308:	str	r3, [r5, #44]	; 0x2c
   1430c:	mov	r2, r8
   14310:	ldr	r1, [sp, #4]
   14314:	mov	r0, r5
   14318:	bl	13030 <__assert_fail@plt+0x1d00>
   1431c:	str	r0, [sp, #4]
   14320:	mov	r3, #0
   14324:	str	r3, [r5, #44]	; 0x2c
   14328:	b	13e9c <__assert_fail@plt+0x2b6c>
   1432c:	mov	r3, #24576	; 0x6000
   14330:	str	r3, [r4, #80]	; 0x50
   14334:	mov	r2, #1
   14338:	mov	r3, #0
   1433c:	b	13fa8 <__assert_fail@plt+0x2c78>
   14340:	mov	r3, #24576	; 0x6000
   14344:	str	r3, [r4, #80]	; 0x50
   14348:	mov	r2, #2
   1434c:	mov	r3, #0
   14350:	b	13fa8 <__assert_fail@plt+0x2c78>
   14354:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14358:	strd	r6, [sp, #8]
   1435c:	strd	r8, [sp, #16]
   14360:	strd	sl, [sp, #24]
   14364:	str	lr, [sp, #32]
   14368:	sub	sp, sp, #20
   1436c:	bic	r3, r1, #4080	; 0xff0
   14370:	bic	r3, r3, #15
   14374:	cmp	r3, #0
   14378:	bne	14458 <__assert_fail@plt+0x3128>
   1437c:	mov	r6, r0
   14380:	mov	r9, r1
   14384:	mov	sl, r2
   14388:	and	r3, r1, #516	; 0x204
   1438c:	cmp	r3, #516	; 0x204
   14390:	beq	1446c <__assert_fail@plt+0x313c>
   14394:	tst	r1, #18
   14398:	beq	14480 <__assert_fail@plt+0x3150>
   1439c:	mov	r1, #96	; 0x60
   143a0:	mov	r0, #1
   143a4:	bl	1993c <__assert_fail@plt+0x860c>
   143a8:	subs	r5, r0, #0
   143ac:	beq	146a8 <__assert_fail@plt+0x3378>
   143b0:	str	sl, [r5, #44]	; 0x2c
   143b4:	tst	r9, #2
   143b8:	streq	r9, [r5, #48]	; 0x30
   143bc:	bicne	r3, r9, #512	; 0x200
   143c0:	orrne	r3, r3, #4
   143c4:	strne	r3, [r5, #48]	; 0x30
   143c8:	mvn	r3, #99	; 0x63
   143cc:	str	r3, [r5, #32]
   143d0:	ldr	r0, [r6]
   143d4:	cmp	r0, #0
   143d8:	beq	14494 <__assert_fail@plt+0x3164>
   143dc:	mov	r7, r6
   143e0:	mov	r4, #0
   143e4:	bl	111bc <strlen@plt>
   143e8:	cmp	r4, r0
   143ec:	movcc	r4, r0
   143f0:	ldr	r0, [r7, #4]!
   143f4:	cmp	r0, #0
   143f8:	bne	143e4 <__assert_fail@plt+0x30b4>
   143fc:	add	r1, r4, #1
   14400:	cmp	r1, #4096	; 0x1000
   14404:	movcc	r1, #4096	; 0x1000
   14408:	mov	r0, r5
   1440c:	bl	12e3c <__assert_fail@plt+0x1b0c>
   14410:	cmp	r0, #0
   14414:	beq	1469c <__assert_fail@plt+0x336c>
   14418:	ldr	fp, [r6]
   1441c:	cmp	fp, #0
   14420:	beq	146c8 <__assert_fail@plt+0x3398>
   14424:	mov	r2, #0
   14428:	movw	r1, #43976	; 0xabc8
   1442c:	movt	r1, #1
   14430:	mov	r0, r5
   14434:	bl	13120 <__assert_fail@plt+0x1df0>
   14438:	subs	fp, r0, #0
   1443c:	beq	14694 <__assert_fail@plt+0x3364>
   14440:	mvn	r3, #0
   14444:	str	r3, [fp, #48]	; 0x30
   14448:	cmp	sl, #0
   1444c:	moveq	r3, #1
   14450:	bne	146d0 <__assert_fail@plt+0x33a0>
   14454:	b	146d8 <__assert_fail@plt+0x33a8>
   14458:	bl	111ec <__errno_location@plt>
   1445c:	mov	r3, #22
   14460:	str	r3, [r0]
   14464:	mov	r5, #0
   14468:	b	146a8 <__assert_fail@plt+0x3378>
   1446c:	bl	111ec <__errno_location@plt>
   14470:	mov	r3, #22
   14474:	str	r3, [r0]
   14478:	mov	r5, #0
   1447c:	b	146a8 <__assert_fail@plt+0x3378>
   14480:	bl	111ec <__errno_location@plt>
   14484:	mov	r3, #22
   14488:	str	r3, [r0]
   1448c:	mov	r5, #0
   14490:	b	146a8 <__assert_fail@plt+0x3378>
   14494:	mov	r4, #0
   14498:	b	143fc <__assert_fail@plt+0x30cc>
   1449c:	sub	r1, r0, #1
   144a0:	ldrb	r3, [r4, r1]
   144a4:	cmp	r3, #47	; 0x2f
   144a8:	bne	14534 <__assert_fail@plt+0x3204>
   144ac:	sub	r0, r0, #2
   144b0:	add	r3, r4, r0
   144b4:	ldrb	r0, [r4, r0]
   144b8:	cmp	r0, #47	; 0x2f
   144bc:	moveq	r2, r1
   144c0:	bne	14534 <__assert_fail@plt+0x3204>
   144c4:	ldrb	r1, [r3, #-1]!
   144c8:	cmp	r1, #47	; 0x2f
   144cc:	bne	14534 <__assert_fail@plt+0x3204>
   144d0:	sub	r2, r2, #1
   144d4:	cmp	r2, #1
   144d8:	bhi	144c4 <__assert_fail@plt+0x3194>
   144dc:	b	14534 <__assert_fail@plt+0x3204>
   144e0:	mov	r2, r9
   144e4:	mov	r1, r4
   144e8:	ldr	r0, [sp, #4]
   144ec:	bl	12ec0 <__assert_fail@plt+0x1b90>
   144f0:	strh	r0, [r4, #56]	; 0x38
   144f4:	cmp	sl, #0
   144f8:	beq	1459c <__assert_fail@plt+0x326c>
   144fc:	str	r7, [r4, #8]
   14500:	mov	r7, r4
   14504:	add	r8, r8, #1
   14508:	ldr	r4, [r6, #4]!
   1450c:	cmp	r4, #0
   14510:	beq	145b4 <__assert_fail@plt+0x3284>
   14514:	mov	r0, r4
   14518:	bl	111bc <strlen@plt>
   1451c:	mov	r2, r0
   14520:	cmp	r0, #2
   14524:	movls	r3, #0
   14528:	andhi	r3, r5, #1
   1452c:	cmp	r3, #0
   14530:	bne	1449c <__assert_fail@plt+0x316c>
   14534:	mov	r1, r4
   14538:	ldr	r0, [sp, #4]
   1453c:	bl	13120 <__assert_fail@plt+0x1df0>
   14540:	subs	r4, r0, #0
   14544:	beq	14680 <__assert_fail@plt+0x3350>
   14548:	str	r9, [r4, #48]	; 0x30
   1454c:	str	fp, [r4, #4]
   14550:	add	r3, r4, #168	; 0xa8
   14554:	str	r3, [r4, #24]
   14558:	ldr	r3, [sp, #8]
   1455c:	cmp	r7, #0
   14560:	moveq	r3, #0
   14564:	cmp	r3, #0
   14568:	beq	144e0 <__assert_fail@plt+0x31b0>
   1456c:	mov	r3, #11
   14570:	strh	r3, [r4, #56]	; 0x38
   14574:	mov	r2, #2
   14578:	mov	r3, #0
   1457c:	strd	r2, [r4, #112]	; 0x70
   14580:	cmp	sl, #0
   14584:	bne	144fc <__assert_fail@plt+0x31cc>
   14588:	str	r9, [r4, #8]
   1458c:	ldr	r3, [sp, #12]
   14590:	str	r4, [r3, #8]
   14594:	str	r4, [sp, #12]
   14598:	b	14504 <__assert_fail@plt+0x31d4>
   1459c:	str	r9, [r4, #8]
   145a0:	cmp	r7, #0
   145a4:	streq	r4, [sp, #12]
   145a8:	moveq	r7, r4
   145ac:	beq	14504 <__assert_fail@plt+0x31d4>
   145b0:	b	1458c <__assert_fail@plt+0x325c>
   145b4:	ldr	r5, [sp, #4]
   145b8:	cmp	sl, #0
   145bc:	cmpne	r8, #1
   145c0:	bhi	1462c <__assert_fail@plt+0x32fc>
   145c4:	mov	r2, #0
   145c8:	movw	r1, #43976	; 0xabc8
   145cc:	movt	r1, #1
   145d0:	mov	r0, r5
   145d4:	bl	13120 <__assert_fail@plt+0x1df0>
   145d8:	str	r0, [r5]
   145dc:	cmp	r0, #0
   145e0:	beq	14684 <__assert_fail@plt+0x3354>
   145e4:	str	r7, [r0, #8]
   145e8:	ldr	r3, [r5]
   145ec:	mov	r2, #9
   145f0:	strh	r2, [r3, #56]	; 0x38
   145f4:	ldr	r3, [r5]
   145f8:	mov	r2, #1
   145fc:	str	r2, [r3, #48]	; 0x30
   14600:	mov	r0, r5
   14604:	bl	131b0 <__assert_fail@plt+0x1e80>
   14608:	cmp	r0, #0
   1460c:	beq	14684 <__assert_fail@plt+0x3354>
   14610:	ldr	r3, [r5, #48]	; 0x30
   14614:	tst	r3, #516	; 0x204
   14618:	beq	14654 <__assert_fail@plt+0x3324>
   1461c:	mvn	r1, #0
   14620:	add	r0, r5, #60	; 0x3c
   14624:	bl	161d4 <__assert_fail@plt+0x4ea4>
   14628:	b	146a8 <__assert_fail@plt+0x3378>
   1462c:	mov	r2, r8
   14630:	mov	r1, r7
   14634:	mov	r0, r5
   14638:	bl	13030 <__assert_fail@plt+0x1d00>
   1463c:	mov	r7, r0
   14640:	b	145c4 <__assert_fail@plt+0x3294>
   14644:	mov	r7, r4
   14648:	b	145c4 <__assert_fail@plt+0x3294>
   1464c:	mov	r7, fp
   14650:	b	145c4 <__assert_fail@plt+0x3294>
   14654:	movw	r1, #45920	; 0xb360
   14658:	movt	r1, #1
   1465c:	mov	r0, r5
   14660:	bl	13238 <__assert_fail@plt+0x1f08>
   14664:	str	r0, [r5, #28]
   14668:	cmp	r0, #0
   1466c:	bge	1461c <__assert_fail@plt+0x32ec>
   14670:	ldr	r3, [r5, #48]	; 0x30
   14674:	orr	r3, r3, #4
   14678:	str	r3, [r5, #48]	; 0x30
   1467c:	b	1461c <__assert_fail@plt+0x32ec>
   14680:	ldr	r5, [sp, #4]
   14684:	mov	r0, r7
   14688:	bl	13284 <__assert_fail@plt+0x1f54>
   1468c:	mov	r0, fp
   14690:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14694:	ldr	r0, [r5, #24]
   14698:	bl	12ce4 <__assert_fail@plt+0x19b4>
   1469c:	mov	r0, r5
   146a0:	bl	12ce4 <__assert_fail@plt+0x19b4>
   146a4:	mov	r5, #0
   146a8:	mov	r0, r5
   146ac:	add	sp, sp, #20
   146b0:	ldrd	r4, [sp]
   146b4:	ldrd	r6, [sp, #8]
   146b8:	ldrd	r8, [sp, #16]
   146bc:	ldrd	sl, [sp, #24]
   146c0:	add	sp, sp, #32
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	cmp	sl, #0
   146cc:	beq	1464c <__assert_fail@plt+0x331c>
   146d0:	ldr	r3, [r5, #48]	; 0x30
   146d4:	ubfx	r3, r3, #10, #1
   146d8:	str	r3, [sp, #8]
   146dc:	ldr	r4, [r6]
   146e0:	cmp	r4, #0
   146e4:	beq	14644 <__assert_fail@plt+0x3314>
   146e8:	mov	r3, #0
   146ec:	mov	r7, r3
   146f0:	str	r3, [sp, #12]
   146f4:	mov	r8, r3
   146f8:	eor	r9, r9, #2048	; 0x800
   146fc:	ubfx	r3, r9, #11, #1
   14700:	mov	r9, r7
   14704:	str	r5, [sp, #4]
   14708:	mov	r5, r3
   1470c:	b	14514 <__assert_fail@plt+0x31e4>
   14710:	strd	r4, [sp, #-16]!
   14714:	str	r6, [sp, #8]
   14718:	str	lr, [sp, #12]
   1471c:	mov	r5, r0
   14720:	ldr	r0, [r0]
   14724:	cmp	r0, #0
   14728:	beq	14760 <__assert_fail@plt+0x3430>
   1472c:	ldr	r3, [r0, #48]	; 0x30
   14730:	cmp	r3, #0
   14734:	blt	147b0 <__assert_fail@plt+0x3480>
   14738:	ldr	r4, [r0, #8]
   1473c:	cmp	r4, #0
   14740:	ldreq	r4, [r0, #4]
   14744:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14748:	mov	r0, r4
   1474c:	ldr	r3, [r4, #48]	; 0x30
   14750:	cmp	r3, #0
   14754:	bge	14738 <__assert_fail@plt+0x3408>
   14758:	mov	r0, r4
   1475c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14760:	ldr	r0, [r5, #4]
   14764:	cmp	r0, #0
   14768:	beq	14770 <__assert_fail@plt+0x3440>
   1476c:	bl	13284 <__assert_fail@plt+0x1f54>
   14770:	ldr	r0, [r5, #8]
   14774:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14778:	ldr	r0, [r5, #24]
   1477c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14780:	ldr	r3, [r5, #48]	; 0x30
   14784:	tst	r3, #512	; 0x200
   14788:	beq	147b8 <__assert_fail@plt+0x3488>
   1478c:	ldr	r0, [r5, #32]
   14790:	cmp	r0, #0
   14794:	blt	147c0 <__assert_fail@plt+0x3490>
   14798:	bl	112f4 <close@plt>
   1479c:	cmp	r0, #0
   147a0:	beq	147c0 <__assert_fail@plt+0x3490>
   147a4:	bl	111ec <__errno_location@plt>
   147a8:	ldr	r4, [r0]
   147ac:	b	14840 <__assert_fail@plt+0x3510>
   147b0:	mov	r4, r0
   147b4:	b	14758 <__assert_fail@plt+0x3428>
   147b8:	tst	r3, #4
   147bc:	beq	14808 <__assert_fail@plt+0x34d8>
   147c0:	add	r0, r5, #60	; 0x3c
   147c4:	bl	13314 <__assert_fail@plt+0x1fe4>
   147c8:	ldr	r0, [r5, #52]	; 0x34
   147cc:	cmp	r0, #0
   147d0:	movne	r4, #0
   147d4:	beq	14874 <__assert_fail@plt+0x3544>
   147d8:	bl	15c78 <__assert_fail@plt+0x4948>
   147dc:	mov	r0, r5
   147e0:	bl	132d4 <__assert_fail@plt+0x1fa4>
   147e4:	mov	r0, r5
   147e8:	bl	12ce4 <__assert_fail@plt+0x19b4>
   147ec:	cmp	r4, #0
   147f0:	bne	14864 <__assert_fail@plt+0x3534>
   147f4:	mov	r0, r4
   147f8:	ldrd	r4, [sp]
   147fc:	ldr	r6, [sp, #8]
   14800:	add	sp, sp, #12
   14804:	pop	{pc}		; (ldr pc, [sp], #4)
   14808:	ldr	r0, [r5, #28]
   1480c:	bl	112a0 <fchdir@plt>
   14810:	subs	r4, r0, #0
   14814:	beq	14820 <__assert_fail@plt+0x34f0>
   14818:	bl	111ec <__errno_location@plt>
   1481c:	ldr	r4, [r0]
   14820:	ldr	r0, [r5, #28]
   14824:	bl	112f4 <close@plt>
   14828:	adds	r0, r0, #0
   1482c:	movne	r0, #1
   14830:	cmp	r4, #0
   14834:	movne	r0, #0
   14838:	cmp	r0, #0
   1483c:	bne	14858 <__assert_fail@plt+0x3528>
   14840:	add	r0, r5, #60	; 0x3c
   14844:	bl	13314 <__assert_fail@plt+0x1fe4>
   14848:	ldr	r0, [r5, #52]	; 0x34
   1484c:	cmp	r0, #0
   14850:	bne	147d8 <__assert_fail@plt+0x34a8>
   14854:	b	147dc <__assert_fail@plt+0x34ac>
   14858:	bl	111ec <__errno_location@plt>
   1485c:	ldr	r4, [r0]
   14860:	b	14840 <__assert_fail@plt+0x3510>
   14864:	bl	111ec <__errno_location@plt>
   14868:	str	r4, [r0]
   1486c:	mvn	r4, #0
   14870:	b	147f4 <__assert_fail@plt+0x34c4>
   14874:	mov	r0, r5
   14878:	bl	132d4 <__assert_fail@plt+0x1fa4>
   1487c:	mov	r0, r5
   14880:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14884:	mov	r4, #0
   14888:	b	147f4 <__assert_fail@plt+0x34c4>
   1488c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14890:	strd	r6, [sp, #8]
   14894:	str	r8, [sp, #16]
   14898:	str	lr, [sp, #20]
   1489c:	ldr	r5, [r0]
   148a0:	cmp	r5, #0
   148a4:	beq	14f04 <__assert_fail@plt+0x3bd4>
   148a8:	ldr	r3, [r0, #48]	; 0x30
   148ac:	tst	r3, #8192	; 0x2000
   148b0:	bne	14f00 <__assert_fail@plt+0x3bd0>
   148b4:	mov	r8, r0
   148b8:	ldrh	r3, [r5, #60]	; 0x3c
   148bc:	mov	r2, #3
   148c0:	strh	r2, [r5, #60]	; 0x3c
   148c4:	cmp	r3, #1
   148c8:	beq	14944 <__assert_fail@plt+0x3614>
   148cc:	cmp	r3, #2
   148d0:	beq	14958 <__assert_fail@plt+0x3628>
   148d4:	ldrh	r2, [r5, #56]	; 0x38
   148d8:	cmp	r2, #1
   148dc:	bne	14bd8 <__assert_fail@plt+0x38a8>
   148e0:	cmp	r3, #4
   148e4:	beq	14908 <__assert_fail@plt+0x35d8>
   148e8:	ldr	r1, [r8, #48]	; 0x30
   148ec:	tst	r1, #64	; 0x40
   148f0:	beq	149ec <__assert_fail@plt+0x36bc>
   148f4:	ldrd	r6, [r5, #64]	; 0x40
   148f8:	ldrd	r2, [r8, #16]
   148fc:	cmp	r7, r3
   14900:	cmpeq	r6, r2
   14904:	beq	149ec <__assert_fail@plt+0x36bc>
   14908:	ldrh	r3, [r5, #58]	; 0x3a
   1490c:	tst	r3, #2
   14910:	bne	149e0 <__assert_fail@plt+0x36b0>
   14914:	ldr	r0, [r8, #4]
   14918:	cmp	r0, #0
   1491c:	beq	1492c <__assert_fail@plt+0x35fc>
   14920:	bl	13284 <__assert_fail@plt+0x1f54>
   14924:	mov	r3, #0
   14928:	str	r3, [r8, #4]
   1492c:	mov	r3, #6
   14930:	strh	r3, [r5, #56]	; 0x38
   14934:	mov	r1, r5
   14938:	mov	r0, r8
   1493c:	bl	13850 <__assert_fail@plt+0x2520>
   14940:	b	14f04 <__assert_fail@plt+0x3bd4>
   14944:	mov	r2, #0
   14948:	mov	r1, r5
   1494c:	bl	12ec0 <__assert_fail@plt+0x1b90>
   14950:	strh	r0, [r5, #56]	; 0x38
   14954:	b	14f04 <__assert_fail@plt+0x3bd4>
   14958:	ldrh	r2, [r5, #56]	; 0x38
   1495c:	sub	r3, r2, #12
   14960:	uxth	r3, r3
   14964:	cmp	r3, #1
   14968:	bls	14978 <__assert_fail@plt+0x3648>
   1496c:	cmp	r2, #1
   14970:	bne	14bd8 <__assert_fail@plt+0x38a8>
   14974:	b	148e8 <__assert_fail@plt+0x35b8>
   14978:	mov	r2, #1
   1497c:	mov	r1, r5
   14980:	bl	12ec0 <__assert_fail@plt+0x1b90>
   14984:	strh	r0, [r5, #56]	; 0x38
   14988:	cmp	r0, #1
   1498c:	bne	14a68 <__assert_fail@plt+0x3738>
   14990:	ldr	r3, [r8, #48]	; 0x30
   14994:	tst	r3, #4
   14998:	bne	14a68 <__assert_fail@plt+0x3738>
   1499c:	movw	r1, #45920	; 0xb360
   149a0:	movt	r1, #1
   149a4:	mov	r0, r8
   149a8:	bl	13238 <__assert_fail@plt+0x1f08>
   149ac:	str	r0, [r5, #36]	; 0x24
   149b0:	cmp	r0, #0
   149b4:	blt	149c8 <__assert_fail@plt+0x3698>
   149b8:	ldrh	r3, [r5, #58]	; 0x3a
   149bc:	orr	r3, r3, #2
   149c0:	strh	r3, [r5, #58]	; 0x3a
   149c4:	b	14a68 <__assert_fail@plt+0x3738>
   149c8:	bl	111ec <__errno_location@plt>
   149cc:	ldr	r3, [r0]
   149d0:	str	r3, [r5, #32]
   149d4:	mov	r3, #7
   149d8:	strh	r3, [r5, #56]	; 0x38
   149dc:	b	14a68 <__assert_fail@plt+0x3738>
   149e0:	ldr	r0, [r5, #36]	; 0x24
   149e4:	bl	112f4 <close@plt>
   149e8:	b	14914 <__assert_fail@plt+0x35e4>
   149ec:	ldr	r0, [r8, #4]
   149f0:	cmp	r0, #0
   149f4:	beq	14ad0 <__assert_fail@plt+0x37a0>
   149f8:	tst	r1, #4096	; 0x1000
   149fc:	bne	14abc <__assert_fail@plt+0x378c>
   14a00:	ldr	r3, [r5, #24]
   14a04:	mvn	r2, #0
   14a08:	mov	r1, r5
   14a0c:	mov	r0, r8
   14a10:	bl	13644 <__assert_fail@plt+0x2314>
   14a14:	cmp	r0, #0
   14a18:	bne	14b24 <__assert_fail@plt+0x37f4>
   14a1c:	ldr	r5, [r8, #4]
   14a20:	mov	r3, #0
   14a24:	str	r3, [r8, #4]
   14a28:	ldr	r2, [r8, #24]
   14a2c:	ldr	r0, [r5, #4]
   14a30:	ldr	r1, [r0, #40]	; 0x28
   14a34:	sub	r3, r1, #1
   14a38:	ldr	r0, [r0, #28]
   14a3c:	ldrb	r0, [r0, r3]
   14a40:	cmp	r0, #47	; 0x2f
   14a44:	movne	r3, r1
   14a48:	add	r0, r2, r3
   14a4c:	mov	r1, #47	; 0x2f
   14a50:	strb	r1, [r2, r3]
   14a54:	ldr	r2, [r5, #52]	; 0x34
   14a58:	add	r2, r2, #1
   14a5c:	add	r1, r5, #168	; 0xa8
   14a60:	add	r0, r0, #1
   14a64:	bl	11048 <memmove@plt>
   14a68:	str	r5, [r8]
   14a6c:	ldrh	r3, [r5, #56]	; 0x38
   14a70:	cmp	r3, #11
   14a74:	beq	14df8 <__assert_fail@plt+0x3ac8>
   14a78:	ldrh	r3, [r5, #56]	; 0x38
   14a7c:	cmp	r3, #1
   14a80:	bne	14f04 <__assert_fail@plt+0x3bd4>
   14a84:	ldr	r3, [r5, #48]	; 0x30
   14a88:	cmp	r3, #0
   14a8c:	ldrdeq	r2, [r5, #64]	; 0x40
   14a90:	strdeq	r2, [r8, #16]
   14a94:	mov	r1, r5
   14a98:	mov	r0, r8
   14a9c:	bl	13480 <__assert_fail@plt+0x2150>
   14aa0:	cmp	r0, #0
   14aa4:	bne	14f04 <__assert_fail@plt+0x3bd4>
   14aa8:	bl	111ec <__errno_location@plt>
   14aac:	mov	r3, #12
   14ab0:	str	r3, [r0]
   14ab4:	mov	r5, #0
   14ab8:	b	14f04 <__assert_fail@plt+0x3bd4>
   14abc:	bic	r1, r1, #4096	; 0x1000
   14ac0:	str	r1, [r8, #48]	; 0x30
   14ac4:	bl	13284 <__assert_fail@plt+0x1f54>
   14ac8:	mov	r3, #0
   14acc:	str	r3, [r8, #4]
   14ad0:	mov	r1, #3
   14ad4:	mov	r0, r8
   14ad8:	bl	13914 <__assert_fail@plt+0x25e4>
   14adc:	str	r0, [r8, #4]
   14ae0:	cmp	r0, #0
   14ae4:	bne	14a1c <__assert_fail@plt+0x36ec>
   14ae8:	ldr	r3, [r8, #48]	; 0x30
   14aec:	tst	r3, #8192	; 0x2000
   14af0:	movne	r5, r0
   14af4:	bne	14f04 <__assert_fail@plt+0x3bd4>
   14af8:	ldr	r3, [r5, #32]
   14afc:	cmp	r3, #0
   14b00:	beq	14b14 <__assert_fail@plt+0x37e4>
   14b04:	ldrh	r3, [r5, #56]	; 0x38
   14b08:	cmp	r3, #4
   14b0c:	movne	r3, #7
   14b10:	strhne	r3, [r5, #56]	; 0x38
   14b14:	mov	r1, r5
   14b18:	mov	r0, r8
   14b1c:	bl	13850 <__assert_fail@plt+0x2520>
   14b20:	b	14f04 <__assert_fail@plt+0x3bd4>
   14b24:	bl	111ec <__errno_location@plt>
   14b28:	ldr	r3, [r0]
   14b2c:	str	r3, [r5, #32]
   14b30:	ldrh	r3, [r5, #58]	; 0x3a
   14b34:	orr	r3, r3, #1
   14b38:	strh	r3, [r5, #58]	; 0x3a
   14b3c:	ldr	r3, [r8, #4]
   14b40:	cmp	r3, #0
   14b44:	beq	14a1c <__assert_fail@plt+0x36ec>
   14b48:	ldr	r2, [r3, #4]
   14b4c:	ldr	r2, [r2, #24]
   14b50:	str	r2, [r3, #24]
   14b54:	ldr	r3, [r3, #8]
   14b58:	cmp	r3, #0
   14b5c:	bne	14b48 <__assert_fail@plt+0x3818>
   14b60:	b	14a1c <__assert_fail@plt+0x36ec>
   14b64:	str	r3, [r8]
   14b68:	ldr	r2, [r8, #24]
   14b6c:	ldr	r3, [r3, #40]	; 0x28
   14b70:	mov	r1, #0
   14b74:	strb	r1, [r2, r3]
   14b78:	mov	r1, #3
   14b7c:	mov	r0, r8
   14b80:	bl	13914 <__assert_fail@plt+0x25e4>
   14b84:	subs	r6, r0, #0
   14b88:	bne	14ba0 <__assert_fail@plt+0x3870>
   14b8c:	ldr	r3, [r8, #48]	; 0x30
   14b90:	tst	r3, #8192	; 0x2000
   14b94:	beq	14bf4 <__assert_fail@plt+0x38c4>
   14b98:	mov	r5, r6
   14b9c:	b	14f04 <__assert_fail@plt+0x3bd4>
   14ba0:	mov	r0, r5
   14ba4:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14ba8:	mov	r5, r6
   14bac:	b	14a28 <__assert_fail@plt+0x36f8>
   14bb0:	str	r4, [r8]
   14bb4:	mov	r0, r5
   14bb8:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14bbc:	ldr	r3, [r4, #48]	; 0x30
   14bc0:	cmp	r3, #0
   14bc4:	beq	14cbc <__assert_fail@plt+0x398c>
   14bc8:	ldrh	r3, [r4, #60]	; 0x3c
   14bcc:	mov	r5, r4
   14bd0:	cmp	r3, #4
   14bd4:	bne	14d70 <__assert_fail@plt+0x3a40>
   14bd8:	ldr	r4, [r5, #8]
   14bdc:	cmp	r4, #0
   14be0:	bne	14bb0 <__assert_fail@plt+0x3880>
   14be4:	ldr	r3, [r5, #4]
   14be8:	ldr	r2, [r3, #12]
   14bec:	cmp	r2, #0
   14bf0:	bne	14b64 <__assert_fail@plt+0x3834>
   14bf4:	ldr	r6, [r5, #4]
   14bf8:	str	r6, [r8]
   14bfc:	mov	r0, r5
   14c00:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14c04:	ldr	r3, [r6, #48]	; 0x30
   14c08:	cmn	r3, #1
   14c0c:	beq	14e30 <__assert_fail@plt+0x3b00>
   14c10:	ldrh	r3, [r6, #56]	; 0x38
   14c14:	cmp	r3, #11
   14c18:	beq	14e50 <__assert_fail@plt+0x3b20>
   14c1c:	ldr	r2, [r8, #24]
   14c20:	ldr	r3, [r6, #40]	; 0x28
   14c24:	mov	r1, #0
   14c28:	strb	r1, [r2, r3]
   14c2c:	ldr	r3, [r6, #48]	; 0x30
   14c30:	cmp	r3, r1
   14c34:	beq	14e54 <__assert_fail@plt+0x3b24>
   14c38:	ldrh	r3, [r6, #58]	; 0x3a
   14c3c:	tst	r3, #2
   14c40:	beq	14ebc <__assert_fail@plt+0x3b8c>
   14c44:	ldr	r3, [r8, #48]	; 0x30
   14c48:	tst	r3, #4
   14c4c:	bne	14c68 <__assert_fail@plt+0x3938>
   14c50:	tst	r3, #512	; 0x200
   14c54:	beq	14e90 <__assert_fail@plt+0x3b60>
   14c58:	mov	r2, #1
   14c5c:	ldr	r1, [r6, #36]	; 0x24
   14c60:	mov	r0, r8
   14c64:	bl	13548 <__assert_fail@plt+0x2218>
   14c68:	ldr	r0, [r6, #36]	; 0x24
   14c6c:	bl	112f4 <close@plt>
   14c70:	ldrh	r3, [r6, #56]	; 0x38
   14c74:	cmp	r3, #2
   14c78:	beq	14ca4 <__assert_fail@plt+0x3974>
   14c7c:	ldr	r3, [r6, #32]
   14c80:	cmp	r3, #0
   14c84:	movne	r3, #7
   14c88:	strhne	r3, [r6, #56]	; 0x38
   14c8c:	bne	14ca4 <__assert_fail@plt+0x3974>
   14c90:	mov	r3, #6
   14c94:	strh	r3, [r6, #56]	; 0x38
   14c98:	mov	r1, r6
   14c9c:	mov	r0, r8
   14ca0:	bl	13850 <__assert_fail@plt+0x2520>
   14ca4:	ldr	r5, [r8, #48]	; 0x30
   14ca8:	and	r5, r5, #8192	; 0x2000
   14cac:	cmp	r5, #0
   14cb0:	moveq	r5, r6
   14cb4:	movne	r5, r4
   14cb8:	b	14f04 <__assert_fail@plt+0x3bd4>
   14cbc:	mov	r0, r8
   14cc0:	bl	135e0 <__assert_fail@plt+0x22b0>
   14cc4:	cmp	r0, #0
   14cc8:	bne	14d4c <__assert_fail@plt+0x3a1c>
   14ccc:	mov	r0, r8
   14cd0:	bl	132d4 <__assert_fail@plt+0x1fa4>
   14cd4:	ldr	r2, [r4, #52]	; 0x34
   14cd8:	str	r2, [r4, #40]	; 0x28
   14cdc:	add	r5, r4, #168	; 0xa8
   14ce0:	add	r2, r2, #1
   14ce4:	mov	r1, r5
   14ce8:	ldr	r0, [r8, #24]
   14cec:	bl	11048 <memmove@plt>
   14cf0:	mov	r1, #47	; 0x2f
   14cf4:	mov	r0, r5
   14cf8:	bl	11264 <strrchr@plt>
   14cfc:	cmp	r0, #0
   14d00:	beq	14d30 <__assert_fail@plt+0x3a00>
   14d04:	cmp	r5, r0
   14d08:	beq	14d60 <__assert_fail@plt+0x3a30>
   14d0c:	add	r6, r0, #1
   14d10:	mov	r0, r6
   14d14:	bl	111bc <strlen@plt>
   14d18:	mov	r7, r0
   14d1c:	add	r2, r0, #1
   14d20:	mov	r1, r6
   14d24:	mov	r0, r5
   14d28:	bl	11048 <memmove@plt>
   14d2c:	str	r7, [r4, #52]	; 0x34
   14d30:	ldr	r3, [r8, #24]
   14d34:	str	r3, [r4, #28]
   14d38:	str	r3, [r4, #24]
   14d3c:	mov	r0, r8
   14d40:	bl	131b0 <__assert_fail@plt+0x1e80>
   14d44:	mov	r5, r4
   14d48:	b	14a68 <__assert_fail@plt+0x3738>
   14d4c:	ldr	r3, [r8, #48]	; 0x30
   14d50:	orr	r3, r3, #8192	; 0x2000
   14d54:	str	r3, [r8, #48]	; 0x30
   14d58:	mov	r5, #0
   14d5c:	b	14f04 <__assert_fail@plt+0x3bd4>
   14d60:	ldrb	r3, [r0, #1]
   14d64:	cmp	r3, #0
   14d68:	beq	14d30 <__assert_fail@plt+0x3a00>
   14d6c:	b	14d0c <__assert_fail@plt+0x39dc>
   14d70:	cmp	r3, #2
   14d74:	movne	r5, r4
   14d78:	bne	14a28 <__assert_fail@plt+0x36f8>
   14d7c:	mov	r2, #1
   14d80:	mov	r1, r4
   14d84:	mov	r0, r8
   14d88:	bl	12ec0 <__assert_fail@plt+0x1b90>
   14d8c:	strh	r0, [r4, #56]	; 0x38
   14d90:	cmp	r0, #1
   14d94:	beq	14da8 <__assert_fail@plt+0x3a78>
   14d98:	mov	r3, #3
   14d9c:	strh	r3, [r4, #60]	; 0x3c
   14da0:	mov	r5, r4
   14da4:	b	14a28 <__assert_fail@plt+0x36f8>
   14da8:	ldr	r3, [r8, #48]	; 0x30
   14dac:	tst	r3, #4
   14db0:	bne	14d98 <__assert_fail@plt+0x3a68>
   14db4:	movw	r1, #45920	; 0xb360
   14db8:	movt	r1, #1
   14dbc:	mov	r0, r8
   14dc0:	bl	13238 <__assert_fail@plt+0x1f08>
   14dc4:	str	r0, [r4, #36]	; 0x24
   14dc8:	cmp	r0, #0
   14dcc:	blt	14de0 <__assert_fail@plt+0x3ab0>
   14dd0:	ldrh	r3, [r4, #58]	; 0x3a
   14dd4:	orr	r3, r3, #2
   14dd8:	strh	r3, [r4, #58]	; 0x3a
   14ddc:	b	14d98 <__assert_fail@plt+0x3a68>
   14de0:	bl	111ec <__errno_location@plt>
   14de4:	ldr	r3, [r0]
   14de8:	str	r3, [r4, #32]
   14dec:	mov	r3, #7
   14df0:	strh	r3, [r4, #56]	; 0x38
   14df4:	b	14d98 <__assert_fail@plt+0x3a68>
   14df8:	ldrd	r2, [r5, #112]	; 0x70
   14dfc:	cmp	r3, #0
   14e00:	cmpeq	r2, #2
   14e04:	beq	14e18 <__assert_fail@plt+0x3ae8>
   14e08:	cmp	r3, #0
   14e0c:	cmpeq	r2, #1
   14e10:	beq	14f04 <__assert_fail@plt+0x3bd4>
   14e14:	bl	112e8 <abort@plt>
   14e18:	mov	r2, #0
   14e1c:	mov	r1, r5
   14e20:	mov	r0, r8
   14e24:	bl	12ec0 <__assert_fail@plt+0x1b90>
   14e28:	strh	r0, [r5, #56]	; 0x38
   14e2c:	b	14a78 <__assert_fail@plt+0x3748>
   14e30:	mov	r0, r6
   14e34:	bl	12ce4 <__assert_fail@plt+0x19b4>
   14e38:	bl	111ec <__errno_location@plt>
   14e3c:	mov	r3, #0
   14e40:	str	r3, [r0]
   14e44:	str	r3, [r8]
   14e48:	mov	r5, r4
   14e4c:	b	14f04 <__assert_fail@plt+0x3bd4>
   14e50:	bl	112e8 <abort@plt>
   14e54:	mov	r0, r8
   14e58:	bl	135e0 <__assert_fail@plt+0x22b0>
   14e5c:	cmp	r0, #0
   14e60:	beq	14c70 <__assert_fail@plt+0x3940>
   14e64:	bl	111ec <__errno_location@plt>
   14e68:	ldr	r3, [r0]
   14e6c:	str	r3, [r6, #32]
   14e70:	ldr	r3, [r8, #48]	; 0x30
   14e74:	orr	r3, r3, #8192	; 0x2000
   14e78:	str	r3, [r8, #48]	; 0x30
   14e7c:	ldrh	r3, [r6, #56]	; 0x38
   14e80:	cmp	r3, #2
   14e84:	moveq	r5, r4
   14e88:	bne	14c7c <__assert_fail@plt+0x394c>
   14e8c:	b	14f04 <__assert_fail@plt+0x3bd4>
   14e90:	ldr	r0, [r6, #36]	; 0x24
   14e94:	bl	112a0 <fchdir@plt>
   14e98:	cmp	r0, #0
   14e9c:	beq	14c68 <__assert_fail@plt+0x3938>
   14ea0:	bl	111ec <__errno_location@plt>
   14ea4:	ldr	r3, [r0]
   14ea8:	str	r3, [r6, #32]
   14eac:	ldr	r3, [r8, #48]	; 0x30
   14eb0:	orr	r3, r3, #8192	; 0x2000
   14eb4:	str	r3, [r8, #48]	; 0x30
   14eb8:	b	14c68 <__assert_fail@plt+0x3938>
   14ebc:	tst	r3, #1
   14ec0:	bne	14c70 <__assert_fail@plt+0x3940>
   14ec4:	movw	r3, #45916	; 0xb35c
   14ec8:	movt	r3, #1
   14ecc:	mvn	r2, #0
   14ed0:	ldr	r1, [r6, #4]
   14ed4:	mov	r0, r8
   14ed8:	bl	13644 <__assert_fail@plt+0x2314>
   14edc:	cmp	r0, #0
   14ee0:	beq	14c70 <__assert_fail@plt+0x3940>
   14ee4:	bl	111ec <__errno_location@plt>
   14ee8:	ldr	r3, [r0]
   14eec:	str	r3, [r6, #32]
   14ef0:	ldr	r3, [r8, #48]	; 0x30
   14ef4:	orr	r3, r3, #8192	; 0x2000
   14ef8:	str	r3, [r8, #48]	; 0x30
   14efc:	b	14e7c <__assert_fail@plt+0x3b4c>
   14f00:	mov	r5, #0
   14f04:	mov	r0, r5
   14f08:	ldrd	r4, [sp]
   14f0c:	ldrd	r6, [sp, #8]
   14f10:	ldr	r8, [sp, #16]
   14f14:	add	sp, sp, #20
   14f18:	pop	{pc}		; (ldr pc, [sp], #4)
   14f1c:	cmp	r2, #4
   14f20:	bhi	14f30 <__assert_fail@plt+0x3c00>
   14f24:	strh	r2, [r1, #60]	; 0x3c
   14f28:	mov	r0, #0
   14f2c:	bx	lr
   14f30:	str	r4, [sp, #-8]!
   14f34:	str	lr, [sp, #4]
   14f38:	bl	111ec <__errno_location@plt>
   14f3c:	mov	r3, #22
   14f40:	str	r3, [r0]
   14f44:	mov	r0, #1
   14f48:	ldr	r4, [sp]
   14f4c:	add	sp, sp, #4
   14f50:	pop	{pc}		; (ldr pc, [sp], #4)
   14f54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f58:	strd	r6, [sp, #8]
   14f5c:	str	r8, [sp, #16]
   14f60:	str	lr, [sp, #20]
   14f64:	bics	r3, r1, #4096	; 0x1000
   14f68:	bne	15018 <__assert_fail@plt+0x3ce8>
   14f6c:	mov	r4, r0
   14f70:	mov	r5, r1
   14f74:	ldr	r6, [r0]
   14f78:	bl	111ec <__errno_location@plt>
   14f7c:	mov	r7, r0
   14f80:	mov	r3, #0
   14f84:	str	r3, [r0]
   14f88:	ldr	r3, [r4, #48]	; 0x30
   14f8c:	tst	r3, #8192	; 0x2000
   14f90:	movne	r0, #0
   14f94:	bne	15004 <__assert_fail@plt+0x3cd4>
   14f98:	ldrh	r3, [r6, #56]	; 0x38
   14f9c:	cmp	r3, #9
   14fa0:	beq	1502c <__assert_fail@plt+0x3cfc>
   14fa4:	cmp	r3, #1
   14fa8:	movne	r0, #0
   14fac:	bne	15004 <__assert_fail@plt+0x3cd4>
   14fb0:	ldr	r0, [r4, #4]
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fc0 <__assert_fail@plt+0x3c90>
   14fbc:	bl	13284 <__assert_fail@plt+0x1f54>
   14fc0:	cmp	r5, #4096	; 0x1000
   14fc4:	movne	r5, #1
   14fc8:	beq	15034 <__assert_fail@plt+0x3d04>
   14fcc:	ldr	r3, [r6, #48]	; 0x30
   14fd0:	cmp	r3, #0
   14fd4:	bne	14ff4 <__assert_fail@plt+0x3cc4>
   14fd8:	ldr	r3, [r6, #24]
   14fdc:	ldrb	r3, [r3]
   14fe0:	cmp	r3, #47	; 0x2f
   14fe4:	beq	14ff4 <__assert_fail@plt+0x3cc4>
   14fe8:	ldr	r3, [r4, #48]	; 0x30
   14fec:	tst	r3, #4
   14ff0:	beq	15048 <__assert_fail@plt+0x3d18>
   14ff4:	mov	r1, r5
   14ff8:	mov	r0, r4
   14ffc:	bl	13914 <__assert_fail@plt+0x25e4>
   15000:	str	r0, [r4, #4]
   15004:	ldrd	r4, [sp]
   15008:	ldrd	r6, [sp, #8]
   1500c:	ldr	r8, [sp, #16]
   15010:	add	sp, sp, #20
   15014:	pop	{pc}		; (ldr pc, [sp], #4)
   15018:	bl	111ec <__errno_location@plt>
   1501c:	mov	r3, #22
   15020:	str	r3, [r0]
   15024:	mov	r0, #0
   15028:	b	15004 <__assert_fail@plt+0x3cd4>
   1502c:	ldr	r0, [r6, #8]
   15030:	b	15004 <__assert_fail@plt+0x3cd4>
   15034:	ldr	r3, [r4, #48]	; 0x30
   15038:	orr	r3, r3, #4096	; 0x1000
   1503c:	str	r3, [r4, #48]	; 0x30
   15040:	mov	r5, #2
   15044:	b	14fcc <__assert_fail@plt+0x3c9c>
   15048:	movw	r1, #45920	; 0xb360
   1504c:	movt	r1, #1
   15050:	mov	r0, r4
   15054:	bl	13238 <__assert_fail@plt+0x1f08>
   15058:	subs	r6, r0, #0
   1505c:	movlt	r0, #0
   15060:	strlt	r0, [r4, #4]
   15064:	blt	15004 <__assert_fail@plt+0x3cd4>
   15068:	mov	r1, r5
   1506c:	mov	r0, r4
   15070:	bl	13914 <__assert_fail@plt+0x25e4>
   15074:	str	r0, [r4, #4]
   15078:	ldr	r3, [r4, #48]	; 0x30
   1507c:	tst	r3, #512	; 0x200
   15080:	beq	1509c <__assert_fail@plt+0x3d6c>
   15084:	mov	r2, #1
   15088:	mov	r1, r6
   1508c:	mov	r0, r4
   15090:	bl	13548 <__assert_fail@plt+0x2218>
   15094:	ldr	r0, [r4, #4]
   15098:	b	15004 <__assert_fail@plt+0x3cd4>
   1509c:	mov	r0, r6
   150a0:	bl	112a0 <fchdir@plt>
   150a4:	cmp	r0, #0
   150a8:	bne	150b8 <__assert_fail@plt+0x3d88>
   150ac:	mov	r0, r6
   150b0:	bl	112f4 <close@plt>
   150b4:	b	15094 <__assert_fail@plt+0x3d64>
   150b8:	ldr	r4, [r7]
   150bc:	mov	r0, r6
   150c0:	bl	112f4 <close@plt>
   150c4:	str	r4, [r7]
   150c8:	mov	r0, #0
   150cc:	b	15004 <__assert_fail@plt+0x3cd4>
   150d0:	ror	r0, r0, #3
   150d4:	udiv	r3, r0, r1
   150d8:	mls	r0, r3, r1, r0
   150dc:	bx	lr
   150e0:	cmp	r1, r0
   150e4:	movne	r0, #0
   150e8:	moveq	r0, #1
   150ec:	bx	lr
   150f0:	ldr	r2, [r0, #20]
   150f4:	movw	r3, #45924	; 0xb364
   150f8:	movt	r3, #1
   150fc:	cmp	r2, r3
   15100:	beq	1519c <__assert_fail@plt+0x3e6c>
   15104:	vldr	s15, [r2, #8]
   15108:	vldr	s14, [pc, #148]	; 151a4 <__assert_fail@plt+0x3e74>
   1510c:	vcmpe.f32	s15, s14
   15110:	vmrs	APSR_nzcv, fpscr
   15114:	ble	15174 <__assert_fail@plt+0x3e44>
   15118:	vldr	s14, [pc, #136]	; 151a8 <__assert_fail@plt+0x3e78>
   1511c:	vcmpe.f32	s15, s14
   15120:	vmrs	APSR_nzcv, fpscr
   15124:	bpl	15174 <__assert_fail@plt+0x3e44>
   15128:	vldr	s13, [r2, #12]
   1512c:	vldr	s14, [pc, #120]	; 151ac <__assert_fail@plt+0x3e7c>
   15130:	vcmpe.f32	s13, s14
   15134:	vmrs	APSR_nzcv, fpscr
   15138:	ble	15174 <__assert_fail@plt+0x3e44>
   1513c:	vldr	s14, [r2]
   15140:	vcmpe.f32	s14, #0.0
   15144:	vmrs	APSR_nzcv, fpscr
   15148:	blt	15174 <__assert_fail@plt+0x3e44>
   1514c:	vldr	s13, [pc, #80]	; 151a4 <__assert_fail@plt+0x3e74>
   15150:	vadd.f32	s14, s14, s13
   15154:	vldr	s13, [r2, #4]
   15158:	vcmpe.f32	s14, s13
   1515c:	vmrs	APSR_nzcv, fpscr
   15160:	bpl	15174 <__assert_fail@plt+0x3e44>
   15164:	vldr	s12, [pc, #68]	; 151b0 <__assert_fail@plt+0x3e80>
   15168:	vcmpe.f32	s13, s12
   1516c:	vmrs	APSR_nzcv, fpscr
   15170:	bls	15188 <__assert_fail@plt+0x3e58>
   15174:	movw	r3, #45924	; 0xb364
   15178:	movt	r3, #1
   1517c:	str	r3, [r0, #20]
   15180:	mov	r0, #0
   15184:	bx	lr
   15188:	vcmpe.f32	s15, s14
   1518c:	vmrs	APSR_nzcv, fpscr
   15190:	ble	15174 <__assert_fail@plt+0x3e44>
   15194:	mov	r0, #1
   15198:	bx	lr
   1519c:	mov	r0, #1
   151a0:	bx	lr
   151a4:	stclcc	12, cr12, [ip, #820]	; 0x334
   151a8:	svccc	0x00666666
   151ac:	svccc	0x008ccccd
   151b0:	svccc	0x00800000
   151b4:	ldrb	r3, [r1, #16]
   151b8:	cmp	r3, #0
   151bc:	bne	151e8 <__assert_fail@plt+0x3eb8>
   151c0:	vmov	s15, r0
   151c4:	vcvt.f32.u32	s15, s15
   151c8:	vldr	s13, [r1, #8]
   151cc:	vdiv.f32	s14, s15, s13
   151d0:	vldr	s15, [pc, #224]	; 152b8 <__assert_fail@plt+0x3f88>
   151d4:	vcmpe.f32	s14, s15
   151d8:	vmrs	APSR_nzcv, fpscr
   151dc:	bge	152a8 <__assert_fail@plt+0x3f78>
   151e0:	vcvt.u32.f32	s15, s14
   151e4:	vmov	r0, s15
   151e8:	cmp	r0, #10
   151ec:	movcc	r0, #10
   151f0:	orr	r0, r0, #1
   151f4:	cmn	r0, #1
   151f8:	beq	1520c <__assert_fail@plt+0x3edc>
   151fc:	push	{lr}		; (str lr, [sp, #-4]!)
   15200:	movw	lr, #43691	; 0xaaab
   15204:	movt	lr, #43690	; 0xaaaa
   15208:	b	15234 <__assert_fail@plt+0x3f04>
   1520c:	mov	r0, #0
   15210:	bx	lr
   15214:	mov	r3, #3
   15218:	udiv	r2, r0, r3
   1521c:	mls	r3, r3, r2, r0
   15220:	cmp	r3, #0
   15224:	bne	15284 <__assert_fail@plt+0x3f54>
   15228:	add	r0, r0, #2
   1522c:	cmn	r0, #1
   15230:	beq	152b0 <__assert_fail@plt+0x3f80>
   15234:	cmp	r0, #9
   15238:	bls	15214 <__assert_fail@plt+0x3ee4>
   1523c:	umull	r2, r3, lr, r0
   15240:	lsr	r3, r3, #1
   15244:	add	r3, r3, r3, lsl #1
   15248:	cmp	r0, r3
   1524c:	beq	15228 <__assert_fail@plt+0x3ef8>
   15250:	mov	r1, #16
   15254:	mov	r2, #9
   15258:	mov	r3, #3
   1525c:	add	r2, r2, r1
   15260:	add	r3, r3, #2
   15264:	cmp	r2, r0
   15268:	bcs	15218 <__assert_fail@plt+0x3ee8>
   1526c:	add	r1, r1, #8
   15270:	udiv	ip, r0, r3
   15274:	mls	ip, r3, ip, r0
   15278:	cmp	ip, #0
   1527c:	bne	1525c <__assert_fail@plt+0x3f2c>
   15280:	b	15228 <__assert_fail@plt+0x3ef8>
   15284:	lsl	r2, r0, #2
   15288:	lsr	r3, r0, #30
   1528c:	adds	r3, r3, #0
   15290:	movne	r3, #1
   15294:	cmp	r2, #0
   15298:	movlt	r3, #1
   1529c:	cmp	r3, #0
   152a0:	movne	r0, #0
   152a4:	pop	{pc}		; (ldr pc, [sp], #4)
   152a8:	mov	r0, #0
   152ac:	bx	lr
   152b0:	mov	r0, #0
   152b4:	b	152a4 <__assert_fail@plt+0x3f74>
   152b8:	svcmi	0x00800000
   152bc:	str	r4, [sp, #-8]!
   152c0:	str	lr, [sp, #4]
   152c4:	mov	r4, r0
   152c8:	mov	r0, r1
   152cc:	ldr	r3, [r4, #24]
   152d0:	ldr	r1, [r4, #8]
   152d4:	blx	r3
   152d8:	ldr	r3, [r4, #8]
   152dc:	cmp	r3, r0
   152e0:	bls	152f8 <__assert_fail@plt+0x3fc8>
   152e4:	ldr	r3, [r4]
   152e8:	add	r0, r3, r0, lsl #3
   152ec:	ldr	r4, [sp]
   152f0:	add	sp, sp, #4
   152f4:	pop	{pc}		; (ldr pc, [sp], #4)
   152f8:	bl	112e8 <abort@plt>
   152fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15300:	strd	r6, [sp, #8]
   15304:	strd	r8, [sp, #16]
   15308:	strd	sl, [sp, #24]
   1530c:	str	lr, [sp, #32]
   15310:	sub	sp, sp, #4
   15314:	ldr	r7, [r1]
   15318:	ldr	r3, [r1, #4]
   1531c:	cmp	r7, r3
   15320:	bcs	15478 <__assert_fail@plt+0x4148>
   15324:	mov	fp, r2
   15328:	mov	r9, r1
   1532c:	mov	r6, r0
   15330:	add	r7, r7, #8
   15334:	mov	sl, #0
   15338:	b	1540c <__assert_fail@plt+0x40dc>
   1533c:	str	r5, [r0]
   15340:	ldr	r2, [r6, #12]
   15344:	add	r2, r2, #1
   15348:	str	r2, [r6, #12]
   1534c:	str	sl, [r4]
   15350:	ldr	r2, [r6, #36]	; 0x24
   15354:	str	r2, [r4, #4]
   15358:	str	r4, [r6, #36]	; 0x24
   1535c:	mov	r4, r3
   15360:	cmp	r3, #0
   15364:	beq	15398 <__assert_fail@plt+0x4068>
   15368:	ldr	r5, [r4]
   1536c:	mov	r1, r5
   15370:	mov	r0, r6
   15374:	bl	152bc <__assert_fail@plt+0x3f8c>
   15378:	ldr	r3, [r4, #4]
   1537c:	ldr	r2, [r0]
   15380:	cmp	r2, #0
   15384:	beq	1533c <__assert_fail@plt+0x400c>
   15388:	ldr	r2, [r0, #4]
   1538c:	str	r2, [r4, #4]
   15390:	str	r4, [r0, #4]
   15394:	b	1535c <__assert_fail@plt+0x402c>
   15398:	ldr	r4, [r8, #-8]
   1539c:	str	sl, [r8, #-4]
   153a0:	cmp	fp, #0
   153a4:	bne	153f8 <__assert_fail@plt+0x40c8>
   153a8:	mov	r1, r4
   153ac:	mov	r0, r6
   153b0:	bl	152bc <__assert_fail@plt+0x3f8c>
   153b4:	mov	r5, r0
   153b8:	ldr	r3, [r0]
   153bc:	cmp	r3, #0
   153c0:	beq	15444 <__assert_fail@plt+0x4114>
   153c4:	ldr	r0, [r6, #36]	; 0x24
   153c8:	cmp	r0, #0
   153cc:	beq	1542c <__assert_fail@plt+0x40fc>
   153d0:	ldr	r3, [r0, #4]
   153d4:	str	r3, [r6, #36]	; 0x24
   153d8:	str	r4, [r0]
   153dc:	ldr	r3, [r5, #4]
   153e0:	str	r3, [r0, #4]
   153e4:	str	r0, [r5, #4]
   153e8:	str	sl, [r8, #-8]
   153ec:	ldr	r3, [r9, #12]
   153f0:	sub	r3, r3, #1
   153f4:	str	r3, [r9, #12]
   153f8:	add	r2, r7, #8
   153fc:	ldr	r3, [r9, #4]
   15400:	cmp	r3, r7
   15404:	bls	15458 <__assert_fail@plt+0x4128>
   15408:	mov	r7, r2
   1540c:	mov	r8, r7
   15410:	ldr	r3, [r7, #-8]
   15414:	cmp	r3, #0
   15418:	beq	153f8 <__assert_fail@plt+0x40c8>
   1541c:	ldr	r4, [r7, #-4]
   15420:	cmp	r4, #0
   15424:	bne	15368 <__assert_fail@plt+0x4038>
   15428:	b	15398 <__assert_fail@plt+0x4068>
   1542c:	mov	r0, #8
   15430:	bl	199b0 <__assert_fail@plt+0x8680>
   15434:	cmp	r0, #0
   15438:	bne	153d8 <__assert_fail@plt+0x40a8>
   1543c:	mov	r0, fp
   15440:	b	1545c <__assert_fail@plt+0x412c>
   15444:	str	r4, [r0]
   15448:	ldr	r3, [r6, #12]
   1544c:	add	r3, r3, #1
   15450:	str	r3, [r6, #12]
   15454:	b	153e8 <__assert_fail@plt+0x40b8>
   15458:	mov	r0, #1
   1545c:	add	sp, sp, #4
   15460:	ldrd	r4, [sp]
   15464:	ldrd	r6, [sp, #8]
   15468:	ldrd	r8, [sp, #16]
   1546c:	ldrd	sl, [sp, #24]
   15470:	add	sp, sp, #32
   15474:	pop	{pc}		; (ldr pc, [sp], #4)
   15478:	mov	r0, #1
   1547c:	b	1545c <__assert_fail@plt+0x412c>
   15480:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15484:	strd	r6, [sp, #8]
   15488:	str	r8, [sp, #16]
   1548c:	str	lr, [sp, #20]
   15490:	mov	r6, r0
   15494:	mov	r5, r1
   15498:	mov	r7, r2
   1549c:	mov	r8, r3
   154a0:	bl	152bc <__assert_fail@plt+0x3f8c>
   154a4:	mov	r4, r0
   154a8:	str	r0, [r7]
   154ac:	ldr	r0, [r0]
   154b0:	cmp	r0, #0
   154b4:	beq	15530 <__assert_fail@plt+0x4200>
   154b8:	cmp	r0, r5
   154bc:	beq	15544 <__assert_fail@plt+0x4214>
   154c0:	ldr	r3, [r6, #28]
   154c4:	mov	r1, r0
   154c8:	mov	r0, r5
   154cc:	blx	r3
   154d0:	cmp	r0, #0
   154d4:	bne	15544 <__assert_fail@plt+0x4214>
   154d8:	ldr	r0, [r4, #4]
   154dc:	cmp	r0, #0
   154e0:	beq	15530 <__assert_fail@plt+0x4200>
   154e4:	ldr	r1, [r0]
   154e8:	cmp	r5, r1
   154ec:	beq	15520 <__assert_fail@plt+0x41f0>
   154f0:	ldr	r3, [r6, #28]
   154f4:	mov	r0, r5
   154f8:	blx	r3
   154fc:	cmp	r0, #0
   15500:	bne	15520 <__assert_fail@plt+0x41f0>
   15504:	ldr	r4, [r4, #4]
   15508:	ldr	r0, [r4, #4]
   1550c:	cmp	r0, #0
   15510:	beq	15530 <__assert_fail@plt+0x4200>
   15514:	ldr	r1, [r0]
   15518:	cmp	r1, r5
   1551c:	bne	154f0 <__assert_fail@plt+0x41c0>
   15520:	ldr	r3, [r4, #4]
   15524:	ldr	r0, [r3]
   15528:	cmp	r8, #0
   1552c:	bne	15584 <__assert_fail@plt+0x4254>
   15530:	ldrd	r4, [sp]
   15534:	ldrd	r6, [sp, #8]
   15538:	ldr	r8, [sp, #16]
   1553c:	add	sp, sp, #20
   15540:	pop	{pc}		; (ldr pc, [sp], #4)
   15544:	ldr	r0, [r4]
   15548:	cmp	r8, #0
   1554c:	beq	15530 <__assert_fail@plt+0x4200>
   15550:	ldr	r1, [r4, #4]
   15554:	cmp	r1, #0
   15558:	moveq	r3, #0
   1555c:	streq	r3, [r4]
   15560:	beq	15530 <__assert_fail@plt+0x4200>
   15564:	ldrd	r2, [r1]
   15568:	strd	r2, [r4]
   1556c:	mov	r3, #0
   15570:	str	r3, [r1]
   15574:	ldr	r3, [r6, #36]	; 0x24
   15578:	str	r3, [r1, #4]
   1557c:	str	r1, [r6, #36]	; 0x24
   15580:	b	15530 <__assert_fail@plt+0x4200>
   15584:	ldr	r2, [r3, #4]
   15588:	str	r2, [r4, #4]
   1558c:	mov	r2, #0
   15590:	str	r2, [r3]
   15594:	ldr	r2, [r6, #36]	; 0x24
   15598:	str	r2, [r3, #4]
   1559c:	str	r3, [r6, #36]	; 0x24
   155a0:	b	15530 <__assert_fail@plt+0x4200>
   155a4:	ldr	r0, [r0, #8]
   155a8:	bx	lr
   155ac:	ldr	r0, [r0, #12]
   155b0:	bx	lr
   155b4:	ldr	r0, [r0, #16]
   155b8:	bx	lr
   155bc:	ldr	r2, [r0]
   155c0:	ldr	r3, [r0, #4]
   155c4:	cmp	r2, r3
   155c8:	bcs	15638 <__assert_fail@plt+0x4308>
   155cc:	add	r1, r2, #8
   155d0:	sub	ip, r3, #1
   155d4:	sub	ip, ip, r2
   155d8:	bic	ip, ip, #7
   155dc:	add	r2, r2, #16
   155e0:	add	ip, ip, r2
   155e4:	mov	r0, #0
   155e8:	b	15604 <__assert_fail@plt+0x42d4>
   155ec:	mov	r2, #1
   155f0:	cmp	r0, r2
   155f4:	movcc	r0, r2
   155f8:	add	r1, r1, #8
   155fc:	cmp	r1, ip
   15600:	beq	15634 <__assert_fail@plt+0x4304>
   15604:	ldr	r3, [r1, #-8]
   15608:	cmp	r3, #0
   1560c:	beq	155f8 <__assert_fail@plt+0x42c8>
   15610:	ldr	r3, [r1, #-4]
   15614:	cmp	r3, #0
   15618:	beq	155ec <__assert_fail@plt+0x42bc>
   1561c:	mov	r2, #1
   15620:	add	r2, r2, #1
   15624:	ldr	r3, [r3, #4]
   15628:	cmp	r3, #0
   1562c:	bne	15620 <__assert_fail@plt+0x42f0>
   15630:	b	155f0 <__assert_fail@plt+0x42c0>
   15634:	bx	lr
   15638:	mov	r0, #0
   1563c:	bx	lr
   15640:	push	{lr}		; (str lr, [sp, #-4]!)
   15644:	ldr	r2, [r0]
   15648:	ldr	r3, [r0, #4]
   1564c:	cmp	r2, r3
   15650:	bcs	156b8 <__assert_fail@plt+0x4388>
   15654:	add	r1, r2, #8
   15658:	sub	ip, r3, #1
   1565c:	sub	ip, ip, r2
   15660:	bic	ip, ip, #7
   15664:	add	r2, r2, #16
   15668:	add	ip, ip, r2
   1566c:	mov	r2, #0
   15670:	mov	lr, r2
   15674:	b	15684 <__assert_fail@plt+0x4354>
   15678:	add	r1, r1, #8
   1567c:	cmp	r1, ip
   15680:	beq	156c0 <__assert_fail@plt+0x4390>
   15684:	ldr	r3, [r1, #-8]
   15688:	cmp	r3, #0
   1568c:	beq	15678 <__assert_fail@plt+0x4348>
   15690:	add	lr, lr, #1
   15694:	add	r2, r2, #1
   15698:	ldr	r3, [r1, #-4]
   1569c:	cmp	r3, #0
   156a0:	beq	15678 <__assert_fail@plt+0x4348>
   156a4:	add	r2, r2, #1
   156a8:	ldr	r3, [r3, #4]
   156ac:	cmp	r3, #0
   156b0:	bne	156a4 <__assert_fail@plt+0x4374>
   156b4:	b	15678 <__assert_fail@plt+0x4348>
   156b8:	mov	r2, #0
   156bc:	mov	lr, r2
   156c0:	ldr	r3, [r0, #12]
   156c4:	cmp	r3, lr
   156c8:	movne	r0, #0
   156cc:	beq	156d4 <__assert_fail@plt+0x43a4>
   156d0:	pop	{pc}		; (ldr pc, [sp], #4)
   156d4:	ldr	r0, [r0, #16]
   156d8:	cmp	r0, r2
   156dc:	movne	r0, #0
   156e0:	moveq	r0, #1
   156e4:	b	156d0 <__assert_fail@plt+0x43a0>
   156e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156ec:	strd	r6, [sp, #8]
   156f0:	str	r8, [sp, #16]
   156f4:	str	lr, [sp, #20]
   156f8:	sub	sp, sp, #8
   156fc:	mov	r6, r0
   15700:	mov	r4, r1
   15704:	ldr	r5, [r0, #8]
   15708:	ldr	r7, [r0, #12]
   1570c:	bl	155bc <__assert_fail@plt+0x428c>
   15710:	mov	r8, r0
   15714:	ldr	r3, [r6, #16]
   15718:	movw	r2, #45944	; 0xb378
   1571c:	movt	r2, #1
   15720:	mov	r1, #1
   15724:	mov	r0, r4
   15728:	bl	11228 <__fprintf_chk@plt>
   1572c:	mov	r3, r5
   15730:	movw	r2, #45968	; 0xb390
   15734:	movt	r2, #1
   15738:	mov	r1, #1
   1573c:	mov	r0, r4
   15740:	bl	11228 <__fprintf_chk@plt>
   15744:	vmov	s15, r7
   15748:	vcvt.f64.u32	d6, s15
   1574c:	vldr	d7, [pc, #92]	; 157b0 <__assert_fail@plt+0x4480>
   15750:	vmul.f64	d6, d6, d7
   15754:	vmov	s15, r5
   15758:	vcvt.f64.u32	d7, s15
   1575c:	vdiv.f64	d5, d6, d7
   15760:	vstr	d5, [sp]
   15764:	mov	r3, r7
   15768:	movw	r2, #45992	; 0xb3a8
   1576c:	movt	r2, #1
   15770:	mov	r1, #1
   15774:	mov	r0, r4
   15778:	bl	11228 <__fprintf_chk@plt>
   1577c:	mov	r3, r8
   15780:	movw	r2, #46028	; 0xb3cc
   15784:	movt	r2, #1
   15788:	mov	r1, #1
   1578c:	mov	r0, r4
   15790:	bl	11228 <__fprintf_chk@plt>
   15794:	add	sp, sp, #8
   15798:	ldrd	r4, [sp]
   1579c:	ldrd	r6, [sp, #8]
   157a0:	ldr	r8, [sp, #16]
   157a4:	add	sp, sp, #20
   157a8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ac:	nop	{0}
   157b0:	andeq	r0, r0, r0
   157b4:	subsmi	r0, r9, r0
   157b8:	strd	r4, [sp, #-16]!
   157bc:	str	r6, [sp, #8]
   157c0:	str	lr, [sp, #12]
   157c4:	mov	r6, r0
   157c8:	mov	r5, r1
   157cc:	bl	152bc <__assert_fail@plt+0x3f8c>
   157d0:	ldr	r1, [r0]
   157d4:	cmp	r1, #0
   157d8:	beq	1582c <__assert_fail@plt+0x44fc>
   157dc:	mov	r4, r0
   157e0:	cmp	r1, r5
   157e4:	beq	15814 <__assert_fail@plt+0x44e4>
   157e8:	ldr	r3, [r6, #28]
   157ec:	mov	r0, r5
   157f0:	blx	r3
   157f4:	cmp	r0, #0
   157f8:	bne	15814 <__assert_fail@plt+0x44e4>
   157fc:	ldr	r4, [r4, #4]
   15800:	cmp	r4, #0
   15804:	beq	15818 <__assert_fail@plt+0x44e8>
   15808:	ldr	r1, [r4]
   1580c:	cmp	r1, r5
   15810:	bne	157e8 <__assert_fail@plt+0x44b8>
   15814:	ldr	r4, [r4]
   15818:	mov	r0, r4
   1581c:	ldrd	r4, [sp]
   15820:	ldr	r6, [sp, #8]
   15824:	add	sp, sp, #12
   15828:	pop	{pc}		; (ldr pc, [sp], #4)
   1582c:	mov	r4, r1
   15830:	b	15818 <__assert_fail@plt+0x44e8>
   15834:	ldr	r3, [r0, #16]
   15838:	cmp	r3, #0
   1583c:	beq	15894 <__assert_fail@plt+0x4564>
   15840:	ldr	r2, [r0]
   15844:	ldr	r1, [r0, #4]
   15848:	cmp	r2, r1
   1584c:	bcs	15888 <__assert_fail@plt+0x4558>
   15850:	ldr	r0, [r2]
   15854:	cmp	r0, #0
   15858:	bxne	lr
   1585c:	mov	r3, r2
   15860:	sub	r1, r1, #1
   15864:	sub	r1, r1, r2
   15868:	bic	r1, r1, #7
   1586c:	add	r2, r2, r1
   15870:	cmp	r3, r2
   15874:	beq	15888 <__assert_fail@plt+0x4558>
   15878:	ldr	r0, [r3, #8]!
   1587c:	cmp	r0, #0
   15880:	beq	15870 <__assert_fail@plt+0x4540>
   15884:	bx	lr
   15888:	str	r4, [sp, #-8]!
   1588c:	str	lr, [sp, #4]
   15890:	bl	112e8 <abort@plt>
   15894:	mov	r0, #0
   15898:	bx	lr
   1589c:	strd	r4, [sp, #-16]!
   158a0:	str	r6, [sp, #8]
   158a4:	str	lr, [sp, #12]
   158a8:	mov	r5, r0
   158ac:	mov	r4, r1
   158b0:	bl	152bc <__assert_fail@plt+0x3f8c>
   158b4:	mov	r2, r0
   158b8:	mov	r3, r0
   158bc:	b	158cc <__assert_fail@plt+0x459c>
   158c0:	ldr	r3, [r3, #4]
   158c4:	cmp	r3, #0
   158c8:	beq	158e8 <__assert_fail@plt+0x45b8>
   158cc:	ldr	r1, [r3]
   158d0:	cmp	r1, r4
   158d4:	bne	158c0 <__assert_fail@plt+0x4590>
   158d8:	ldr	r3, [r3, #4]
   158dc:	cmp	r3, #0
   158e0:	ldrne	r0, [r3]
   158e4:	bne	1590c <__assert_fail@plt+0x45dc>
   158e8:	ldr	r3, [r5, #4]
   158ec:	add	r2, r2, #8
   158f0:	cmp	r3, r2
   158f4:	bls	15908 <__assert_fail@plt+0x45d8>
   158f8:	ldr	r0, [r2]
   158fc:	cmp	r0, #0
   15900:	beq	158ec <__assert_fail@plt+0x45bc>
   15904:	b	1590c <__assert_fail@plt+0x45dc>
   15908:	mov	r0, #0
   1590c:	ldrd	r4, [sp]
   15910:	ldr	r6, [sp, #8]
   15914:	add	sp, sp, #12
   15918:	pop	{pc}		; (ldr pc, [sp], #4)
   1591c:	strd	r4, [sp, #-12]!
   15920:	str	lr, [sp, #8]
   15924:	ldr	r4, [r0]
   15928:	ldr	r3, [r0, #4]
   1592c:	cmp	r4, r3
   15930:	bcs	15998 <__assert_fail@plt+0x4668>
   15934:	mov	r5, r0
   15938:	mov	r0, #0
   1593c:	b	15950 <__assert_fail@plt+0x4620>
   15940:	add	r4, r4, #8
   15944:	ldr	r3, [r5, #4]
   15948:	cmp	r3, r4
   1594c:	bls	1598c <__assert_fail@plt+0x465c>
   15950:	ldr	r3, [r4]
   15954:	cmp	r3, #0
   15958:	beq	15940 <__assert_fail@plt+0x4610>
   1595c:	cmp	r2, r0
   15960:	bls	1598c <__assert_fail@plt+0x465c>
   15964:	add	ip, r1, r0, lsl #2
   15968:	mov	r3, r4
   1596c:	add	r0, r0, #1
   15970:	ldr	lr, [r3]
   15974:	str	lr, [ip], #4
   15978:	ldr	r3, [r3, #4]
   1597c:	cmp	r3, #0
   15980:	beq	15940 <__assert_fail@plt+0x4610>
   15984:	cmp	r2, r0
   15988:	bne	1596c <__assert_fail@plt+0x463c>
   1598c:	ldrd	r4, [sp]
   15990:	add	sp, sp, #8
   15994:	pop	{pc}		; (ldr pc, [sp], #4)
   15998:	mov	r0, #0
   1599c:	b	1598c <__assert_fail@plt+0x465c>
   159a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   159a4:	strd	r6, [sp, #8]
   159a8:	strd	r8, [sp, #16]
   159ac:	str	sl, [sp, #24]
   159b0:	str	lr, [sp, #28]
   159b4:	ldr	r8, [r0]
   159b8:	ldr	r3, [r0, #4]
   159bc:	cmp	r8, r3
   159c0:	bcs	15a20 <__assert_fail@plt+0x46f0>
   159c4:	mov	r7, r2
   159c8:	mov	r6, r1
   159cc:	mov	r9, r0
   159d0:	mov	r5, #0
   159d4:	b	159e8 <__assert_fail@plt+0x46b8>
   159d8:	add	r8, r8, #8
   159dc:	ldr	r3, [r9, #4]
   159e0:	cmp	r3, r8
   159e4:	bls	15a24 <__assert_fail@plt+0x46f4>
   159e8:	ldr	r3, [r8]
   159ec:	cmp	r3, #0
   159f0:	beq	159d8 <__assert_fail@plt+0x46a8>
   159f4:	mov	r4, r8
   159f8:	mov	r1, r7
   159fc:	ldr	r0, [r4]
   15a00:	blx	r6
   15a04:	cmp	r0, #0
   15a08:	beq	15a24 <__assert_fail@plt+0x46f4>
   15a0c:	add	r5, r5, #1
   15a10:	ldr	r4, [r4, #4]
   15a14:	cmp	r4, #0
   15a18:	bne	159f8 <__assert_fail@plt+0x46c8>
   15a1c:	b	159d8 <__assert_fail@plt+0x46a8>
   15a20:	mov	r5, #0
   15a24:	mov	r0, r5
   15a28:	ldrd	r4, [sp]
   15a2c:	ldrd	r6, [sp, #8]
   15a30:	ldrd	r8, [sp, #16]
   15a34:	ldr	sl, [sp, #24]
   15a38:	add	sp, sp, #28
   15a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a40:	ldrb	r2, [r0]
   15a44:	cmp	r2, #0
   15a48:	beq	15a74 <__assert_fail@plt+0x4744>
   15a4c:	mov	r3, #0
   15a50:	rsb	r3, r3, r3, lsl #5
   15a54:	add	r3, r3, r2
   15a58:	udiv	r2, r3, r1
   15a5c:	mls	r3, r1, r2, r3
   15a60:	ldrb	r2, [r0, #1]!
   15a64:	cmp	r2, #0
   15a68:	bne	15a50 <__assert_fail@plt+0x4720>
   15a6c:	mov	r0, r3
   15a70:	bx	lr
   15a74:	mov	r3, #0
   15a78:	b	15a6c <__assert_fail@plt+0x473c>
   15a7c:	strd	r4, [sp, #-8]!
   15a80:	movw	r3, #45924	; 0xb364
   15a84:	movt	r3, #1
   15a88:	ldrd	r4, [r3]
   15a8c:	strd	r4, [r0]
   15a90:	ldrd	r4, [r3, #8]
   15a94:	strd	r4, [r0, #8]
   15a98:	ldr	r3, [r3, #16]
   15a9c:	str	r3, [r0, #16]
   15aa0:	ldrd	r4, [sp]
   15aa4:	add	sp, sp, #8
   15aa8:	bx	lr
   15aac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ab0:	strd	r6, [sp, #8]
   15ab4:	str	r8, [sp, #16]
   15ab8:	str	lr, [sp, #20]
   15abc:	mov	r8, r0
   15ac0:	mov	r5, r1
   15ac4:	subs	r7, r2, #0
   15ac8:	movw	r2, #20688	; 0x50d0
   15acc:	movt	r2, #1
   15ad0:	cmp	r7, #0
   15ad4:	moveq	r7, r2
   15ad8:	subs	r6, r3, #0
   15adc:	movw	r3, #20704	; 0x50e0
   15ae0:	movt	r3, #1
   15ae4:	cmp	r6, #0
   15ae8:	moveq	r6, r3
   15aec:	mov	r0, #40	; 0x28
   15af0:	bl	199b0 <__assert_fail@plt+0x8680>
   15af4:	subs	r4, r0, #0
   15af8:	beq	15b78 <__assert_fail@plt+0x4848>
   15afc:	movw	r3, #45924	; 0xb364
   15b00:	movt	r3, #1
   15b04:	cmp	r5, #0
   15b08:	moveq	r5, r3
   15b0c:	str	r5, [r4, #20]
   15b10:	mov	r0, r4
   15b14:	bl	150f0 <__assert_fail@plt+0x3dc0>
   15b18:	cmp	r0, #0
   15b1c:	beq	15b90 <__assert_fail@plt+0x4860>
   15b20:	mov	r1, r5
   15b24:	mov	r0, r8
   15b28:	bl	151b4 <__assert_fail@plt+0x3e84>
   15b2c:	str	r0, [r4, #8]
   15b30:	cmp	r0, #0
   15b34:	beq	15b90 <__assert_fail@plt+0x4860>
   15b38:	mov	r1, #8
   15b3c:	bl	1993c <__assert_fail@plt+0x860c>
   15b40:	str	r0, [r4]
   15b44:	cmp	r0, #0
   15b48:	beq	15b90 <__assert_fail@plt+0x4860>
   15b4c:	ldr	r3, [r4, #8]
   15b50:	add	r0, r0, r3, lsl #3
   15b54:	str	r0, [r4, #4]
   15b58:	mov	r3, #0
   15b5c:	str	r3, [r4, #12]
   15b60:	str	r3, [r4, #16]
   15b64:	str	r7, [r4, #24]
   15b68:	str	r6, [r4, #28]
   15b6c:	ldr	r2, [sp, #24]
   15b70:	str	r2, [r4, #32]
   15b74:	str	r3, [r4, #36]	; 0x24
   15b78:	mov	r0, r4
   15b7c:	ldrd	r4, [sp]
   15b80:	ldrd	r6, [sp, #8]
   15b84:	ldr	r8, [sp, #16]
   15b88:	add	sp, sp, #20
   15b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b90:	mov	r0, r4
   15b94:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15b98:	mov	r4, #0
   15b9c:	b	15b78 <__assert_fail@plt+0x4848>
   15ba0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ba4:	strd	r6, [sp, #8]
   15ba8:	str	r8, [sp, #16]
   15bac:	str	lr, [sp, #20]
   15bb0:	mov	r5, r0
   15bb4:	ldr	r6, [r0]
   15bb8:	ldr	r3, [r0, #4]
   15bbc:	cmp	r6, r3
   15bc0:	bcs	15c58 <__assert_fail@plt+0x4928>
   15bc4:	add	r6, r6, #8
   15bc8:	mov	r7, #0
   15bcc:	b	15c38 <__assert_fail@plt+0x4908>
   15bd0:	str	r7, [r4]
   15bd4:	ldr	r3, [r4, #4]
   15bd8:	ldr	r2, [r5, #36]	; 0x24
   15bdc:	str	r2, [r4, #4]
   15be0:	str	r4, [r5, #36]	; 0x24
   15be4:	mov	r4, r3
   15be8:	cmp	r3, #0
   15bec:	beq	15c08 <__assert_fail@plt+0x48d8>
   15bf0:	ldr	r3, [r5, #32]
   15bf4:	cmp	r3, #0
   15bf8:	beq	15bd0 <__assert_fail@plt+0x48a0>
   15bfc:	ldr	r0, [r4]
   15c00:	blx	r3
   15c04:	b	15bd0 <__assert_fail@plt+0x48a0>
   15c08:	ldr	r3, [r5, #32]
   15c0c:	cmp	r3, #0
   15c10:	beq	15c1c <__assert_fail@plt+0x48ec>
   15c14:	ldr	r0, [r8, #-8]
   15c18:	blx	r3
   15c1c:	str	r7, [r8, #-8]
   15c20:	str	r7, [r8, #-4]
   15c24:	add	r2, r6, #8
   15c28:	ldr	r3, [r5, #4]
   15c2c:	cmp	r3, r6
   15c30:	bls	15c58 <__assert_fail@plt+0x4928>
   15c34:	mov	r6, r2
   15c38:	mov	r8, r6
   15c3c:	ldr	r3, [r6, #-8]
   15c40:	cmp	r3, #0
   15c44:	beq	15c24 <__assert_fail@plt+0x48f4>
   15c48:	ldr	r4, [r6, #-4]
   15c4c:	cmp	r4, #0
   15c50:	bne	15bf0 <__assert_fail@plt+0x48c0>
   15c54:	b	15c08 <__assert_fail@plt+0x48d8>
   15c58:	mov	r3, #0
   15c5c:	str	r3, [r5, #12]
   15c60:	str	r3, [r5, #16]
   15c64:	ldrd	r4, [sp]
   15c68:	ldrd	r6, [sp, #8]
   15c6c:	ldr	r8, [sp, #16]
   15c70:	add	sp, sp, #20
   15c74:	pop	{pc}		; (ldr pc, [sp], #4)
   15c78:	strd	r4, [sp, #-16]!
   15c7c:	str	r6, [sp, #8]
   15c80:	str	lr, [sp, #12]
   15c84:	mov	r6, r0
   15c88:	ldr	r3, [r0, #32]
   15c8c:	cmp	r3, #0
   15c90:	beq	15cf0 <__assert_fail@plt+0x49c0>
   15c94:	ldr	r3, [r0, #16]
   15c98:	cmp	r3, #0
   15c9c:	beq	15cf0 <__assert_fail@plt+0x49c0>
   15ca0:	ldr	r5, [r0]
   15ca4:	ldr	r3, [r0, #4]
   15ca8:	cmp	r5, r3
   15cac:	bcc	15cc4 <__assert_fail@plt+0x4994>
   15cb0:	b	15d00 <__assert_fail@plt+0x49d0>
   15cb4:	add	r5, r5, #8
   15cb8:	ldr	r3, [r6, #4]
   15cbc:	cmp	r3, r5
   15cc0:	bls	15cf0 <__assert_fail@plt+0x49c0>
   15cc4:	ldr	r3, [r5]
   15cc8:	cmp	r3, #0
   15ccc:	beq	15cb4 <__assert_fail@plt+0x4984>
   15cd0:	mov	r4, r5
   15cd4:	ldr	r3, [r6, #32]
   15cd8:	ldr	r0, [r4]
   15cdc:	blx	r3
   15ce0:	ldr	r4, [r4, #4]
   15ce4:	cmp	r4, #0
   15ce8:	bne	15cd4 <__assert_fail@plt+0x49a4>
   15cec:	b	15cb4 <__assert_fail@plt+0x4984>
   15cf0:	ldr	r5, [r6]
   15cf4:	ldr	r3, [r6, #4]
   15cf8:	cmp	r5, r3
   15cfc:	bcc	15d50 <__assert_fail@plt+0x4a20>
   15d00:	ldr	r0, [r6, #36]	; 0x24
   15d04:	cmp	r0, #0
   15d08:	beq	15d20 <__assert_fail@plt+0x49f0>
   15d0c:	ldr	r4, [r0, #4]
   15d10:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15d14:	mov	r0, r4
   15d18:	cmp	r4, #0
   15d1c:	bne	15d0c <__assert_fail@plt+0x49dc>
   15d20:	ldr	r0, [r6]
   15d24:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15d28:	mov	r0, r6
   15d2c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15d30:	ldrd	r4, [sp]
   15d34:	ldr	r6, [sp, #8]
   15d38:	add	sp, sp, #12
   15d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d40:	add	r5, r5, #8
   15d44:	ldr	r3, [r6, #4]
   15d48:	cmp	r3, r5
   15d4c:	bls	15d00 <__assert_fail@plt+0x49d0>
   15d50:	ldr	r0, [r5, #4]
   15d54:	cmp	r0, #0
   15d58:	beq	15d40 <__assert_fail@plt+0x4a10>
   15d5c:	ldr	r4, [r0, #4]
   15d60:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15d64:	mov	r0, r4
   15d68:	cmp	r4, #0
   15d6c:	bne	15d5c <__assert_fail@plt+0x4a2c>
   15d70:	b	15d40 <__assert_fail@plt+0x4a10>
   15d74:	strd	r4, [sp, #-12]!
   15d78:	str	lr, [sp, #8]
   15d7c:	sub	sp, sp, #44	; 0x2c
   15d80:	mov	r4, r0
   15d84:	mov	r0, r1
   15d88:	ldr	r1, [r4, #20]
   15d8c:	bl	151b4 <__assert_fail@plt+0x3e84>
   15d90:	subs	r5, r0, #0
   15d94:	beq	15e8c <__assert_fail@plt+0x4b5c>
   15d98:	ldr	r3, [r4, #8]
   15d9c:	cmp	r3, r5
   15da0:	beq	15ea4 <__assert_fail@plt+0x4b74>
   15da4:	mov	r1, #8
   15da8:	mov	r0, r5
   15dac:	bl	1993c <__assert_fail@plt+0x860c>
   15db0:	str	r0, [sp]
   15db4:	cmp	r0, #0
   15db8:	beq	15eac <__assert_fail@plt+0x4b7c>
   15dbc:	str	r5, [sp, #8]
   15dc0:	add	r0, r0, r5, lsl #3
   15dc4:	str	r0, [sp, #4]
   15dc8:	mov	r2, #0
   15dcc:	str	r2, [sp, #12]
   15dd0:	str	r2, [sp, #16]
   15dd4:	ldr	r3, [r4, #20]
   15dd8:	str	r3, [sp, #20]
   15ddc:	ldr	r3, [r4, #24]
   15de0:	str	r3, [sp, #24]
   15de4:	ldr	r3, [r4, #28]
   15de8:	str	r3, [sp, #28]
   15dec:	ldr	r3, [r4, #32]
   15df0:	str	r3, [sp, #32]
   15df4:	ldr	r3, [r4, #36]	; 0x24
   15df8:	str	r3, [sp, #36]	; 0x24
   15dfc:	mov	r1, r4
   15e00:	mov	r0, sp
   15e04:	bl	152fc <__assert_fail@plt+0x3fcc>
   15e08:	subs	r5, r0, #0
   15e0c:	bne	15e54 <__assert_fail@plt+0x4b24>
   15e10:	ldr	r3, [sp, #36]	; 0x24
   15e14:	str	r3, [r4, #36]	; 0x24
   15e18:	mov	r2, #1
   15e1c:	mov	r1, sp
   15e20:	mov	r0, r4
   15e24:	bl	152fc <__assert_fail@plt+0x3fcc>
   15e28:	cmp	r0, #0
   15e2c:	beq	15e88 <__assert_fail@plt+0x4b58>
   15e30:	mov	r2, #0
   15e34:	mov	r1, sp
   15e38:	mov	r0, r4
   15e3c:	bl	152fc <__assert_fail@plt+0x3fcc>
   15e40:	cmp	r0, #0
   15e44:	beq	15e88 <__assert_fail@plt+0x4b58>
   15e48:	ldr	r0, [sp]
   15e4c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15e50:	b	15e90 <__assert_fail@plt+0x4b60>
   15e54:	ldr	r0, [r4]
   15e58:	bl	12ce4 <__assert_fail@plt+0x19b4>
   15e5c:	ldr	r3, [sp]
   15e60:	str	r3, [r4]
   15e64:	ldr	r3, [sp, #4]
   15e68:	str	r3, [r4, #4]
   15e6c:	ldr	r3, [sp, #8]
   15e70:	str	r3, [r4, #8]
   15e74:	ldr	r3, [sp, #12]
   15e78:	str	r3, [r4, #12]
   15e7c:	ldr	r3, [sp, #36]	; 0x24
   15e80:	str	r3, [r4, #36]	; 0x24
   15e84:	b	15e90 <__assert_fail@plt+0x4b60>
   15e88:	bl	112e8 <abort@plt>
   15e8c:	mov	r5, #0
   15e90:	mov	r0, r5
   15e94:	add	sp, sp, #44	; 0x2c
   15e98:	ldrd	r4, [sp]
   15e9c:	add	sp, sp, #8
   15ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea4:	mov	r5, #1
   15ea8:	b	15e90 <__assert_fail@plt+0x4b60>
   15eac:	mov	r5, #0
   15eb0:	b	15e90 <__assert_fail@plt+0x4b60>
   15eb4:	strd	r4, [sp, #-16]!
   15eb8:	str	r6, [sp, #8]
   15ebc:	str	lr, [sp, #12]
   15ec0:	sub	sp, sp, #8
   15ec4:	subs	r5, r1, #0
   15ec8:	beq	15f14 <__assert_fail@plt+0x4be4>
   15ecc:	mov	r4, r0
   15ed0:	mov	r6, r2
   15ed4:	mov	r3, #0
   15ed8:	add	r2, sp, #4
   15edc:	mov	r1, r5
   15ee0:	bl	15480 <__assert_fail@plt+0x4150>
   15ee4:	cmp	r0, #0
   15ee8:	beq	15f18 <__assert_fail@plt+0x4be8>
   15eec:	cmp	r6, #0
   15ef0:	moveq	r0, #0
   15ef4:	beq	15f00 <__assert_fail@plt+0x4bd0>
   15ef8:	str	r0, [r6]
   15efc:	mov	r0, #0
   15f00:	add	sp, sp, #8
   15f04:	ldrd	r4, [sp]
   15f08:	ldr	r6, [sp, #8]
   15f0c:	add	sp, sp, #12
   15f10:	pop	{pc}		; (ldr pc, [sp], #4)
   15f14:	bl	112e8 <abort@plt>
   15f18:	vldr	s15, [r4, #12]
   15f1c:	vcvt.f32.u32	s14, s15
   15f20:	ldr	r3, [r4, #20]
   15f24:	vldr	s15, [r4, #8]
   15f28:	vcvt.f32.u32	s15, s15
   15f2c:	vldr	s13, [r3, #8]
   15f30:	vmul.f32	s15, s15, s13
   15f34:	vcmpe.f32	s14, s15
   15f38:	vmrs	APSR_nzcv, fpscr
   15f3c:	bgt	15f8c <__assert_fail@plt+0x4c5c>
   15f40:	ldr	r3, [sp, #4]
   15f44:	ldr	r2, [r3]
   15f48:	cmp	r2, #0
   15f4c:	beq	16038 <__assert_fail@plt+0x4d08>
   15f50:	ldr	r0, [r4, #36]	; 0x24
   15f54:	cmp	r0, #0
   15f58:	beq	16020 <__assert_fail@plt+0x4cf0>
   15f5c:	ldr	r3, [r0, #4]
   15f60:	str	r3, [r4, #36]	; 0x24
   15f64:	str	r5, [r0]
   15f68:	ldr	r3, [sp, #4]
   15f6c:	ldr	r2, [r3, #4]
   15f70:	str	r2, [r0, #4]
   15f74:	str	r0, [r3, #4]
   15f78:	ldr	r3, [r4, #16]
   15f7c:	add	r3, r3, #1
   15f80:	str	r3, [r4, #16]
   15f84:	mov	r0, #1
   15f88:	b	15f00 <__assert_fail@plt+0x4bd0>
   15f8c:	mov	r0, r4
   15f90:	bl	150f0 <__assert_fail@plt+0x3dc0>
   15f94:	ldr	r3, [r4, #20]
   15f98:	vldr	s13, [r3, #8]
   15f9c:	vldr	s15, [r4, #8]
   15fa0:	vcvt.f32.u32	s15, s15
   15fa4:	vldr	s14, [r4, #12]
   15fa8:	vcvt.f32.u32	s14, s14
   15fac:	vmul.f32	s12, s13, s15
   15fb0:	vcmpe.f32	s14, s12
   15fb4:	vmrs	APSR_nzcv, fpscr
   15fb8:	ble	15f40 <__assert_fail@plt+0x4c10>
   15fbc:	ldrb	r2, [r3, #16]
   15fc0:	cmp	r2, #0
   15fc4:	vldr	s14, [r3, #12]
   15fc8:	vmul.f32	s15, s15, s14
   15fcc:	vmuleq.f32	s15, s15, s13
   15fd0:	vldr	s14, [pc, #132]	; 1605c <__assert_fail@plt+0x4d2c>
   15fd4:	vcmpe.f32	s15, s14
   15fd8:	vmrs	APSR_nzcv, fpscr
   15fdc:	mvnge	r0, #0
   15fe0:	bge	15f00 <__assert_fail@plt+0x4bd0>
   15fe4:	vcvt.u32.f32	s15, s15
   15fe8:	vmov	r1, s15
   15fec:	mov	r0, r4
   15ff0:	bl	15d74 <__assert_fail@plt+0x4a44>
   15ff4:	cmp	r0, #0
   15ff8:	mvneq	r0, #0
   15ffc:	beq	15f00 <__assert_fail@plt+0x4bd0>
   16000:	mov	r3, #0
   16004:	add	r2, sp, #4
   16008:	mov	r1, r5
   1600c:	mov	r0, r4
   16010:	bl	15480 <__assert_fail@plt+0x4150>
   16014:	cmp	r0, #0
   16018:	beq	15f40 <__assert_fail@plt+0x4c10>
   1601c:	bl	112e8 <abort@plt>
   16020:	mov	r0, #8
   16024:	bl	199b0 <__assert_fail@plt+0x8680>
   16028:	cmp	r0, #0
   1602c:	mvneq	r0, #0
   16030:	beq	15f00 <__assert_fail@plt+0x4bd0>
   16034:	b	15f64 <__assert_fail@plt+0x4c34>
   16038:	str	r5, [r3]
   1603c:	ldr	r3, [r4, #16]
   16040:	add	r3, r3, #1
   16044:	str	r3, [r4, #16]
   16048:	ldr	r3, [r4, #12]
   1604c:	add	r3, r3, #1
   16050:	str	r3, [r4, #12]
   16054:	mov	r0, #1
   16058:	b	15f00 <__assert_fail@plt+0x4bd0>
   1605c:	svcmi	0x00800000
   16060:	str	r4, [sp, #-8]!
   16064:	str	lr, [sp, #4]
   16068:	sub	sp, sp, #8
   1606c:	mov	r4, r1
   16070:	add	r2, sp, #4
   16074:	bl	15eb4 <__assert_fail@plt+0x4b84>
   16078:	cmn	r0, #1
   1607c:	moveq	r0, #0
   16080:	beq	16090 <__assert_fail@plt+0x4d60>
   16084:	cmp	r0, #0
   16088:	ldreq	r0, [sp, #4]
   1608c:	movne	r0, r4
   16090:	add	sp, sp, #8
   16094:	ldr	r4, [sp]
   16098:	add	sp, sp, #4
   1609c:	pop	{pc}		; (ldr pc, [sp], #4)
   160a0:	strd	r4, [sp, #-16]!
   160a4:	str	r6, [sp, #8]
   160a8:	str	lr, [sp, #12]
   160ac:	sub	sp, sp, #8
   160b0:	mov	r4, r0
   160b4:	mov	r3, #1
   160b8:	add	r2, sp, #4
   160bc:	bl	15480 <__assert_fail@plt+0x4150>
   160c0:	subs	r5, r0, #0
   160c4:	beq	160e4 <__assert_fail@plt+0x4db4>
   160c8:	ldr	r3, [r4, #16]
   160cc:	sub	r3, r3, #1
   160d0:	str	r3, [r4, #16]
   160d4:	ldr	r3, [sp, #4]
   160d8:	ldr	r3, [r3]
   160dc:	cmp	r3, #0
   160e0:	beq	160fc <__assert_fail@plt+0x4dcc>
   160e4:	mov	r0, r5
   160e8:	add	sp, sp, #8
   160ec:	ldrd	r4, [sp]
   160f0:	ldr	r6, [sp, #8]
   160f4:	add	sp, sp, #12
   160f8:	pop	{pc}		; (ldr pc, [sp], #4)
   160fc:	ldr	r3, [r4, #12]
   16100:	sub	r3, r3, #1
   16104:	str	r3, [r4, #12]
   16108:	vmov	s15, r3
   1610c:	vcvt.f32.u32	s15, s15
   16110:	ldr	r3, [r4, #20]
   16114:	vldr	s14, [r4, #8]
   16118:	vcvt.f32.u32	s14, s14
   1611c:	vldr	s13, [r3]
   16120:	vmul.f32	s14, s14, s13
   16124:	vcmpe.f32	s15, s14
   16128:	vmrs	APSR_nzcv, fpscr
   1612c:	bpl	160e4 <__assert_fail@plt+0x4db4>
   16130:	mov	r0, r4
   16134:	bl	150f0 <__assert_fail@plt+0x3dc0>
   16138:	ldr	r3, [r4, #20]
   1613c:	vldr	s15, [r4, #8]
   16140:	vcvt.f32.u32	s15, s15
   16144:	vldr	s14, [r4, #12]
   16148:	vcvt.f32.u32	s13, s14
   1614c:	vldr	s14, [r3]
   16150:	vmul.f32	s14, s15, s14
   16154:	vcmpe.f32	s13, s14
   16158:	vmrs	APSR_nzcv, fpscr
   1615c:	bpl	160e4 <__assert_fail@plt+0x4db4>
   16160:	ldrb	r2, [r3, #16]
   16164:	cmp	r2, #0
   16168:	vldr	s14, [r3, #4]
   1616c:	vmuleq.f32	s15, s15, s14
   16170:	vldreq	s14, [r3, #8]
   16174:	vmul.f32	s15, s15, s14
   16178:	vcvt.u32.f32	s15, s15
   1617c:	vmov	r1, s15
   16180:	mov	r0, r4
   16184:	bl	15d74 <__assert_fail@plt+0x4a44>
   16188:	cmp	r0, #0
   1618c:	bne	160e4 <__assert_fail@plt+0x4db4>
   16190:	ldr	r0, [r4, #36]	; 0x24
   16194:	cmp	r0, #0
   16198:	beq	161b0 <__assert_fail@plt+0x4e80>
   1619c:	ldr	r6, [r0, #4]
   161a0:	bl	12ce4 <__assert_fail@plt+0x19b4>
   161a4:	mov	r0, r6
   161a8:	cmp	r6, #0
   161ac:	bne	1619c <__assert_fail@plt+0x4e6c>
   161b0:	mov	r3, #0
   161b4:	str	r3, [r4, #36]	; 0x24
   161b8:	b	160e4 <__assert_fail@plt+0x4db4>
   161bc:	str	r4, [sp, #-8]!
   161c0:	str	lr, [sp, #4]
   161c4:	bl	160a0 <__assert_fail@plt+0x4d70>
   161c8:	ldr	r4, [sp]
   161cc:	add	sp, sp, #4
   161d0:	pop	{pc}		; (ldr pc, [sp], #4)
   161d4:	mov	r3, #1
   161d8:	strb	r3, [r0, #28]
   161dc:	mov	r3, #0
   161e0:	str	r3, [r0, #20]
   161e4:	str	r3, [r0, #24]
   161e8:	str	r1, [r0]
   161ec:	str	r1, [r0, #4]
   161f0:	str	r1, [r0, #8]
   161f4:	str	r1, [r0, #12]
   161f8:	str	r1, [r0, #16]
   161fc:	bx	lr
   16200:	ldrb	r0, [r0, #28]
   16204:	bx	lr
   16208:	mov	r2, r0
   1620c:	ldrb	ip, [r0, #28]
   16210:	eor	ip, ip, #1
   16214:	ldr	r3, [r0, #20]
   16218:	add	r3, ip, r3
   1621c:	and	r3, r3, #3
   16220:	ldr	r0, [r0, r3, lsl #2]
   16224:	str	r1, [r2, r3, lsl #2]
   16228:	str	r3, [r2, #20]
   1622c:	ldr	r1, [r2, #24]
   16230:	cmp	r1, r3
   16234:	beq	16244 <__assert_fail@plt+0x4f14>
   16238:	mov	r3, #0
   1623c:	strb	r3, [r2, #28]
   16240:	bx	lr
   16244:	add	ip, ip, r1
   16248:	and	ip, ip, #3
   1624c:	str	ip, [r2, #24]
   16250:	b	16238 <__assert_fail@plt+0x4f08>
   16254:	ldrb	r3, [r0, #28]
   16258:	cmp	r3, #0
   1625c:	bne	16298 <__assert_fail@plt+0x4f68>
   16260:	ldr	r3, [r0, #20]
   16264:	ldr	r2, [r0, r3, lsl #2]
   16268:	ldr	r1, [r0, #16]
   1626c:	str	r1, [r0, r3, lsl #2]
   16270:	ldr	r1, [r0, #24]
   16274:	cmp	r3, r1
   16278:	moveq	r3, #1
   1627c:	strbeq	r3, [r0, #28]
   16280:	beq	16290 <__assert_fail@plt+0x4f60>
   16284:	add	r3, r3, #3
   16288:	and	r3, r3, #3
   1628c:	str	r3, [r0, #20]
   16290:	mov	r0, r2
   16294:	bx	lr
   16298:	str	r4, [sp, #-8]!
   1629c:	str	lr, [sp, #4]
   162a0:	bl	112e8 <abort@plt>
   162a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162a8:	str	r6, [sp, #8]
   162ac:	strd	r8, [sp, #12]
   162b0:	str	lr, [sp, #20]
   162b4:	mov	r4, r0
   162b8:	mov	r5, r1
   162bc:	add	r6, r2, #20
   162c0:	mov	r3, #0
   162c4:	strb	r3, [r2, #20]
   162c8:	mov	r8, #10
   162cc:	mov	r9, #0
   162d0:	b	162dc <__assert_fail@plt+0x4fac>
   162d4:	mov	r4, r0
   162d8:	mov	r5, r1
   162dc:	mov	r2, r8
   162e0:	mov	r3, r9
   162e4:	mov	r0, r4
   162e8:	mov	r1, r5
   162ec:	bl	1a2a0 <__assert_fail@plt+0x8f70>
   162f0:	add	r2, r2, #48	; 0x30
   162f4:	strb	r2, [r6, #-1]!
   162f8:	mov	r2, r8
   162fc:	mov	r3, r9
   16300:	mov	r0, r4
   16304:	mov	r1, r5
   16308:	bl	1a2a0 <__assert_fail@plt+0x8f70>
   1630c:	cmp	r5, #0
   16310:	cmpeq	r4, #9
   16314:	bhi	162d4 <__assert_fail@plt+0x4fa4>
   16318:	mov	r0, r6
   1631c:	ldrd	r4, [sp]
   16320:	ldr	r6, [sp, #8]
   16324:	ldrd	r8, [sp, #12]
   16328:	add	sp, sp, #20
   1632c:	pop	{pc}		; (ldr pc, [sp], #4)
   16330:	push	{r2, r3}
   16334:	push	{lr}		; (str lr, [sp, #-4]!)
   16338:	sub	sp, sp, #12
   1633c:	ldr	r2, [sp, #16]
   16340:	tst	r2, #64	; 0x40
   16344:	addne	r3, sp, #24
   16348:	strne	r3, [sp, #4]
   1634c:	ldrne	r3, [sp, #20]
   16350:	moveq	r3, #0
   16354:	bl	111d4 <openat64@plt>
   16358:	bl	18750 <__assert_fail@plt+0x7420>
   1635c:	add	sp, sp, #12
   16360:	pop	{lr}		; (ldr lr, [sp], #4)
   16364:	add	sp, sp, #8
   16368:	bx	lr
   1636c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16370:	strd	r6, [sp, #8]
   16374:	str	r8, [sp, #16]
   16378:	str	lr, [sp, #20]
   1637c:	mov	r6, r3
   16380:	orr	r2, r2, #540672	; 0x84000
   16384:	orr	r2, r2, #2304	; 0x900
   16388:	bl	16330 <__assert_fail@plt+0x5000>
   1638c:	subs	r4, r0, #0
   16390:	movlt	r5, #0
   16394:	blt	163ac <__assert_fail@plt+0x507c>
   16398:	mov	r0, r4
   1639c:	bl	11288 <fdopendir@plt>
   163a0:	subs	r5, r0, #0
   163a4:	strne	r4, [r6]
   163a8:	beq	163c4 <__assert_fail@plt+0x5094>
   163ac:	mov	r0, r5
   163b0:	ldrd	r4, [sp]
   163b4:	ldrd	r6, [sp, #8]
   163b8:	ldr	r8, [sp, #16]
   163bc:	add	sp, sp, #20
   163c0:	pop	{pc}		; (ldr pc, [sp], #4)
   163c4:	bl	111ec <__errno_location@plt>
   163c8:	mov	r6, r0
   163cc:	ldr	r7, [r0]
   163d0:	mov	r0, r4
   163d4:	bl	112f4 <close@plt>
   163d8:	str	r7, [r6]
   163dc:	b	163ac <__assert_fail@plt+0x507c>
   163e0:	strd	r4, [sp, #-16]!
   163e4:	str	r6, [sp, #8]
   163e8:	str	lr, [sp, #12]
   163ec:	subs	r4, r0, #0
   163f0:	beq	1648c <__assert_fail@plt+0x515c>
   163f4:	mov	r1, #47	; 0x2f
   163f8:	mov	r0, r4
   163fc:	bl	11264 <strrchr@plt>
   16400:	subs	r5, r0, #0
   16404:	beq	16464 <__assert_fail@plt+0x5134>
   16408:	add	r6, r5, #1
   1640c:	sub	r3, r6, r4
   16410:	cmp	r3, #6
   16414:	ble	16464 <__assert_fail@plt+0x5134>
   16418:	mov	r2, #7
   1641c:	movw	r1, #46108	; 0xb41c
   16420:	movt	r1, #1
   16424:	sub	r0, r5, #6
   16428:	bl	112dc <strncmp@plt>
   1642c:	cmp	r0, #0
   16430:	bne	16464 <__assert_fail@plt+0x5134>
   16434:	mov	r2, #3
   16438:	movw	r1, #46116	; 0xb424
   1643c:	movt	r1, #1
   16440:	mov	r0, r6
   16444:	bl	112dc <strncmp@plt>
   16448:	cmp	r0, #0
   1644c:	movne	r4, r6
   16450:	bne	16464 <__assert_fail@plt+0x5134>
   16454:	add	r4, r5, #4
   16458:	movw	r3, #49536	; 0xc180
   1645c:	movt	r3, #2
   16460:	str	r4, [r3]
   16464:	movw	r3, #49600	; 0xc1c0
   16468:	movt	r3, #2
   1646c:	str	r4, [r3]
   16470:	movw	r3, #49540	; 0xc184
   16474:	movt	r3, #2
   16478:	str	r4, [r3]
   1647c:	ldrd	r4, [sp]
   16480:	ldr	r6, [sp, #8]
   16484:	add	sp, sp, #12
   16488:	pop	{pc}		; (ldr pc, [sp], #4)
   1648c:	movw	r3, #49552	; 0xc190
   16490:	movt	r3, #2
   16494:	ldr	r3, [r3]
   16498:	mov	r2, #55	; 0x37
   1649c:	mov	r1, #1
   164a0:	movw	r0, #46052	; 0xb3e4
   164a4:	movt	r0, #1
   164a8:	bl	11108 <fwrite@plt>
   164ac:	bl	112e8 <abort@plt>
   164b0:	mov	r2, #0
   164b4:	mov	r3, #0
   164b8:	strd	r2, [r0]
   164bc:	strd	r2, [r0, #8]
   164c0:	strd	r2, [r0, #16]
   164c4:	strd	r2, [r0, #24]
   164c8:	strd	r2, [r0, #32]
   164cc:	strd	r2, [r0, #40]	; 0x28
   164d0:	cmp	r1, #10
   164d4:	beq	164e0 <__assert_fail@plt+0x51b0>
   164d8:	str	r1, [r0]
   164dc:	bx	lr
   164e0:	str	r4, [sp, #-8]!
   164e4:	str	lr, [sp, #4]
   164e8:	bl	112e8 <abort@plt>
   164ec:	strd	r4, [sp, #-16]!
   164f0:	str	r6, [sp, #8]
   164f4:	str	lr, [sp, #12]
   164f8:	mov	r5, r0
   164fc:	mov	r6, r1
   16500:	mov	r2, #5
   16504:	mov	r1, r0
   16508:	mov	r0, #0
   1650c:	bl	110c0 <dcgettext@plt>
   16510:	mov	r4, r0
   16514:	cmp	r5, r0
   16518:	beq	16530 <__assert_fail@plt+0x5200>
   1651c:	mov	r0, r4
   16520:	ldrd	r4, [sp]
   16524:	ldr	r6, [sp, #8]
   16528:	add	sp, sp, #12
   1652c:	pop	{pc}		; (ldr pc, [sp], #4)
   16530:	bl	1a074 <__assert_fail@plt+0x8d44>
   16534:	ldrb	r3, [r0]
   16538:	bic	r3, r3, #32
   1653c:	cmp	r3, #85	; 0x55
   16540:	bne	165c4 <__assert_fail@plt+0x5294>
   16544:	ldrb	r3, [r0, #1]
   16548:	bic	r3, r3, #32
   1654c:	cmp	r3, #84	; 0x54
   16550:	bne	16588 <__assert_fail@plt+0x5258>
   16554:	ldrb	r3, [r0, #2]
   16558:	bic	r3, r3, #32
   1655c:	cmp	r3, #70	; 0x46
   16560:	bne	16588 <__assert_fail@plt+0x5258>
   16564:	ldrb	r3, [r0, #3]
   16568:	cmp	r3, #45	; 0x2d
   1656c:	bne	16588 <__assert_fail@plt+0x5258>
   16570:	ldrb	r3, [r0, #4]
   16574:	cmp	r3, #56	; 0x38
   16578:	bne	16588 <__assert_fail@plt+0x5258>
   1657c:	ldrb	r3, [r0, #5]
   16580:	cmp	r3, #0
   16584:	beq	165a4 <__assert_fail@plt+0x5274>
   16588:	movw	r4, #46204	; 0xb47c
   1658c:	movt	r4, #1
   16590:	movw	r3, #46224	; 0xb490
   16594:	movt	r3, #1
   16598:	cmp	r6, #9
   1659c:	movne	r4, r3
   165a0:	b	1651c <__assert_fail@plt+0x51ec>
   165a4:	ldrb	r2, [r4]
   165a8:	movw	r4, #46220	; 0xb48c
   165ac:	movt	r4, #1
   165b0:	movw	r3, #46208	; 0xb480
   165b4:	movt	r3, #1
   165b8:	cmp	r2, #96	; 0x60
   165bc:	movne	r4, r3
   165c0:	b	1651c <__assert_fail@plt+0x51ec>
   165c4:	cmp	r3, #71	; 0x47
   165c8:	bne	16588 <__assert_fail@plt+0x5258>
   165cc:	ldrb	r3, [r0, #1]
   165d0:	bic	r3, r3, #32
   165d4:	cmp	r3, #66	; 0x42
   165d8:	bne	16588 <__assert_fail@plt+0x5258>
   165dc:	ldrb	r3, [r0, #2]
   165e0:	cmp	r3, #49	; 0x31
   165e4:	bne	16588 <__assert_fail@plt+0x5258>
   165e8:	ldrb	r3, [r0, #3]
   165ec:	cmp	r3, #56	; 0x38
   165f0:	bne	16588 <__assert_fail@plt+0x5258>
   165f4:	ldrb	r3, [r0, #4]
   165f8:	cmp	r3, #48	; 0x30
   165fc:	bne	16588 <__assert_fail@plt+0x5258>
   16600:	ldrb	r3, [r0, #5]
   16604:	cmp	r3, #51	; 0x33
   16608:	bne	16588 <__assert_fail@plt+0x5258>
   1660c:	ldrb	r3, [r0, #6]
   16610:	cmp	r3, #48	; 0x30
   16614:	bne	16588 <__assert_fail@plt+0x5258>
   16618:	ldrb	r3, [r0, #7]
   1661c:	cmp	r3, #0
   16620:	bne	16588 <__assert_fail@plt+0x5258>
   16624:	ldrb	r2, [r4]
   16628:	movw	r4, #46216	; 0xb488
   1662c:	movt	r4, #1
   16630:	movw	r3, #46212	; 0xb484
   16634:	movt	r3, #1
   16638:	cmp	r2, #96	; 0x60
   1663c:	movne	r4, r3
   16640:	b	1651c <__assert_fail@plt+0x51ec>
   16644:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16648:	strd	r6, [sp, #8]
   1664c:	strd	r8, [sp, #16]
   16650:	strd	sl, [sp, #24]
   16654:	str	lr, [sp, #32]
   16658:	sub	sp, sp, #116	; 0x74
   1665c:	str	r0, [sp, #64]	; 0x40
   16660:	mov	r8, r1
   16664:	str	r2, [sp, #48]	; 0x30
   16668:	str	r3, [sp, #24]
   1666c:	ldr	r7, [sp, #152]	; 0x98
   16670:	bl	11120 <__ctype_get_mb_cur_max@plt>
   16674:	str	r0, [sp, #76]	; 0x4c
   16678:	ldr	r3, [sp, #156]	; 0x9c
   1667c:	ubfx	r3, r3, #1, #1
   16680:	str	r3, [sp, #32]
   16684:	mov	r3, #1
   16688:	str	r3, [sp, #40]	; 0x28
   1668c:	mov	r3, #0
   16690:	str	r3, [sp, #68]	; 0x44
   16694:	str	r3, [sp, #36]	; 0x24
   16698:	str	r3, [sp, #28]
   1669c:	str	r3, [sp, #52]	; 0x34
   166a0:	str	r3, [sp, #60]	; 0x3c
   166a4:	str	r3, [sp, #72]	; 0x48
   166a8:	movw	r3, #46228	; 0xb494
   166ac:	movt	r3, #1
   166b0:	str	r3, [sp, #80]	; 0x50
   166b4:	mov	r9, r8
   166b8:	mov	sl, r7
   166bc:	cmp	sl, #10
   166c0:	ldrls	pc, [pc, sl, lsl #2]
   166c4:	b	16888 <__assert_fail@plt+0x5558>
   166c8:	andeq	r6, r1, r8, lsr #14
   166cc:	strdeq	r6, [r1], -ip
   166d0:	andeq	r6, r1, r0, ror #16
   166d4:	strdeq	r6, [r1], -r4
   166d8:	andeq	r6, r1, r4, lsl r8
   166dc:	andeq	r6, r1, r8, lsr r7
   166e0:	andeq	r7, r1, r4, lsl #22
   166e4:	andeq	r6, r1, ip, lsl #17
   166e8:	andeq	r6, r1, r4, ror r7
   166ec:	andeq	r6, r1, r4, ror r7
   166f0:	andeq	r6, r1, r4, ror r7
   166f4:	mov	r3, #1
   166f8:	str	r3, [sp, #28]
   166fc:	mov	r3, #1
   16700:	str	r3, [sp, #32]
   16704:	str	r3, [sp, #52]	; 0x34
   16708:	movw	r3, #46224	; 0xb490
   1670c:	movt	r3, #1
   16710:	str	r3, [sp, #60]	; 0x3c
   16714:	mov	fp, #0
   16718:	mov	sl, #2
   1671c:	mov	r6, #0
   16720:	ldr	r8, [sp, #64]	; 0x40
   16724:	b	16f9c <__assert_fail@plt+0x5c6c>
   16728:	mov	fp, sl
   1672c:	mov	r3, #0
   16730:	str	r3, [sp, #32]
   16734:	b	1671c <__assert_fail@plt+0x53ec>
   16738:	ldr	r3, [sp, #32]
   1673c:	cmp	r3, #0
   16740:	bne	168a0 <__assert_fail@plt+0x5570>
   16744:	cmp	r9, #0
   16748:	beq	168c4 <__assert_fail@plt+0x5594>
   1674c:	mov	r3, #34	; 0x22
   16750:	ldr	r2, [sp, #64]	; 0x40
   16754:	strb	r3, [r2]
   16758:	mov	fp, #1
   1675c:	str	fp, [sp, #28]
   16760:	str	fp, [sp, #52]	; 0x34
   16764:	movw	r3, #46204	; 0xb47c
   16768:	movt	r3, #1
   1676c:	str	r3, [sp, #60]	; 0x3c
   16770:	b	1671c <__assert_fail@plt+0x53ec>
   16774:	cmp	sl, #10
   16778:	bne	167ac <__assert_fail@plt+0x547c>
   1677c:	ldr	r3, [sp, #32]
   16780:	cmp	r3, #0
   16784:	movne	fp, #0
   16788:	beq	167d4 <__assert_fail@plt+0x54a4>
   1678c:	ldr	r0, [sp, #168]	; 0xa8
   16790:	bl	111bc <strlen@plt>
   16794:	str	r0, [sp, #52]	; 0x34
   16798:	ldr	r3, [sp, #168]	; 0xa8
   1679c:	str	r3, [sp, #60]	; 0x3c
   167a0:	mov	r3, #1
   167a4:	str	r3, [sp, #28]
   167a8:	b	1671c <__assert_fail@plt+0x53ec>
   167ac:	mov	r1, sl
   167b0:	ldr	r0, [sp, #80]	; 0x50
   167b4:	bl	164ec <__assert_fail@plt+0x51bc>
   167b8:	str	r0, [sp, #164]	; 0xa4
   167bc:	mov	r1, sl
   167c0:	movw	r0, #46224	; 0xb490
   167c4:	movt	r0, #1
   167c8:	bl	164ec <__assert_fail@plt+0x51bc>
   167cc:	str	r0, [sp, #168]	; 0xa8
   167d0:	b	1677c <__assert_fail@plt+0x544c>
   167d4:	ldr	r3, [sp, #164]	; 0xa4
   167d8:	ldrb	r3, [r3]
   167dc:	cmp	r3, #0
   167e0:	beq	1680c <__assert_fail@plt+0x54dc>
   167e4:	ldr	r2, [sp, #164]	; 0xa4
   167e8:	mov	fp, #0
   167ec:	ldr	r1, [sp, #64]	; 0x40
   167f0:	cmp	r9, fp
   167f4:	strbhi	r3, [r1, fp]
   167f8:	add	fp, fp, #1
   167fc:	ldrb	r3, [r2, #1]!
   16800:	cmp	r3, #0
   16804:	bne	167f0 <__assert_fail@plt+0x54c0>
   16808:	b	1678c <__assert_fail@plt+0x545c>
   1680c:	mov	fp, #0
   16810:	b	1678c <__assert_fail@plt+0x545c>
   16814:	ldr	r3, [sp, #32]
   16818:	cmp	r3, #0
   1681c:	bne	166fc <__assert_fail@plt+0x53cc>
   16820:	mov	r3, #1
   16824:	str	r3, [sp, #28]
   16828:	cmp	r9, #0
   1682c:	beq	168e0 <__assert_fail@plt+0x55b0>
   16830:	mov	r3, #39	; 0x27
   16834:	ldr	r2, [sp, #64]	; 0x40
   16838:	strb	r3, [r2]
   1683c:	mov	r3, #0
   16840:	str	r3, [sp, #32]
   16844:	mov	fp, #1
   16848:	str	fp, [sp, #52]	; 0x34
   1684c:	movw	r3, #46224	; 0xb490
   16850:	movt	r3, #1
   16854:	str	r3, [sp, #60]	; 0x3c
   16858:	mov	sl, #2
   1685c:	b	1671c <__assert_fail@plt+0x53ec>
   16860:	ldr	r3, [sp, #32]
   16864:	cmp	r3, #0
   16868:	beq	16828 <__assert_fail@plt+0x54f8>
   1686c:	mov	r3, #1
   16870:	str	r3, [sp, #52]	; 0x34
   16874:	movw	r3, #46224	; 0xb490
   16878:	movt	r3, #1
   1687c:	str	r3, [sp, #60]	; 0x3c
   16880:	mov	fp, #0
   16884:	b	1671c <__assert_fail@plt+0x53ec>
   16888:	bl	112e8 <abort@plt>
   1688c:	mov	fp, #0
   16890:	str	fp, [sp, #32]
   16894:	mov	r3, #1
   16898:	str	r3, [sp, #28]
   1689c:	b	1671c <__assert_fail@plt+0x53ec>
   168a0:	ldr	r3, [sp, #32]
   168a4:	str	r3, [sp, #28]
   168a8:	mov	r3, #1
   168ac:	str	r3, [sp, #52]	; 0x34
   168b0:	movw	r3, #46204	; 0xb47c
   168b4:	movt	r3, #1
   168b8:	str	r3, [sp, #60]	; 0x3c
   168bc:	mov	fp, #0
   168c0:	b	1671c <__assert_fail@plt+0x53ec>
   168c4:	mov	fp, #1
   168c8:	str	fp, [sp, #28]
   168cc:	str	fp, [sp, #52]	; 0x34
   168d0:	movw	r3, #46204	; 0xb47c
   168d4:	movt	r3, #1
   168d8:	str	r3, [sp, #60]	; 0x3c
   168dc:	b	1671c <__assert_fail@plt+0x53ec>
   168e0:	mov	r3, #0
   168e4:	str	r3, [sp, #32]
   168e8:	mov	fp, #1
   168ec:	str	fp, [sp, #52]	; 0x34
   168f0:	movw	r3, #46224	; 0xb490
   168f4:	movt	r3, #1
   168f8:	str	r3, [sp, #60]	; 0x3c
   168fc:	mov	sl, #2
   16900:	b	1671c <__assert_fail@plt+0x53ec>
   16904:	mov	r3, r2
   16908:	add	r4, r6, r2
   1690c:	ldr	r2, [sp, #24]
   16910:	cmp	r3, #1
   16914:	movls	r3, #0
   16918:	movhi	r3, #1
   1691c:	cmn	r2, #1
   16920:	movne	r3, #0
   16924:	cmp	r3, #0
   16928:	beq	16938 <__assert_fail@plt+0x5608>
   1692c:	ldr	r0, [sp, #48]	; 0x30
   16930:	bl	111bc <strlen@plt>
   16934:	str	r0, [sp, #24]
   16938:	ldr	r3, [sp, #24]
   1693c:	cmp	r4, r3
   16940:	bhi	17b2c <__assert_fail@plt+0x67fc>
   16944:	ldr	r3, [sp, #48]	; 0x30
   16948:	add	r4, r3, r6
   1694c:	ldr	r2, [sp, #52]	; 0x34
   16950:	ldr	r1, [sp, #60]	; 0x3c
   16954:	mov	r0, r4
   16958:	bl	1109c <memcmp@plt>
   1695c:	cmp	r0, #0
   16960:	bne	17b2c <__assert_fail@plt+0x67fc>
   16964:	ldr	r3, [sp, #32]
   16968:	cmp	r3, #0
   1696c:	bne	16b7c <__assert_fail@plt+0x584c>
   16970:	ldrb	r4, [r4]
   16974:	cmp	r4, #126	; 0x7e
   16978:	ldrls	pc, [pc, r4, lsl #2]
   1697c:	b	17430 <__assert_fail@plt+0x6100>
   16980:	andeq	r6, r1, r0, asr #23
   16984:	andeq	r7, r1, r0, lsr r4
   16988:	andeq	r7, r1, r0, lsr r4
   1698c:	andeq	r7, r1, r0, lsr r4
   16990:	andeq	r7, r1, r0, lsr r4
   16994:	andeq	r7, r1, r0, lsr r4
   16998:	andeq	r7, r1, r0, lsr r4
   1699c:	ldrdeq	r7, [r1], -r8
   169a0:	andeq	r6, r1, ip, asr lr
   169a4:	andeq	r7, r1, r0, lsl #4
   169a8:	andeq	r7, r1, ip, lsr #5
   169ac:	andeq	r7, r1, r4, lsl r2
   169b0:	andeq	r6, r1, r0, ror lr
   169b4:	andeq	r6, r1, r4, lsl #29
   169b8:	andeq	r7, r1, r0, lsr r4
   169bc:	andeq	r7, r1, r0, lsr r4
   169c0:	andeq	r7, r1, r0, lsr r4
   169c4:	andeq	r7, r1, r0, lsr r4
   169c8:	andeq	r7, r1, r0, lsr r4
   169cc:	andeq	r7, r1, r0, lsr r4
   169d0:	andeq	r7, r1, r0, lsr r4
   169d4:	andeq	r7, r1, r0, lsr r4
   169d8:	andeq	r7, r1, r0, lsr r4
   169dc:	andeq	r7, r1, r0, lsr r4
   169e0:	andeq	r7, r1, r0, lsr r4
   169e4:	andeq	r7, r1, r0, lsr r4
   169e8:	andeq	r7, r1, r0, lsr r4
   169ec:	andeq	r7, r1, r0, lsr r4
   169f0:	andeq	r7, r1, r0, lsr r4
   169f4:	andeq	r7, r1, r0, lsr r4
   169f8:	andeq	r7, r1, r0, lsr r4
   169fc:	andeq	r7, r1, r0, lsr r4
   16a00:	andeq	r7, r1, ip, asr #6
   16a04:	andeq	r7, r1, r0, ror r3
   16a08:	andeq	r7, r1, r0, ror r3
   16a0c:	andeq	r7, r1, r8, lsl #6
   16a10:	andeq	r7, r1, r0, ror r3
   16a14:	muleq	r1, r0, r8
   16a18:	andeq	r7, r1, r0, ror r3
   16a1c:	muleq	r1, r0, r3
   16a20:	andeq	r7, r1, r0, ror r3
   16a24:	andeq	r7, r1, r0, ror r3
   16a28:	andeq	r7, r1, r0, ror r3
   16a2c:	muleq	r1, r0, r8
   16a30:	muleq	r1, r0, r8
   16a34:	muleq	r1, r0, r8
   16a38:	muleq	r1, r0, r8
   16a3c:	muleq	r1, r0, r8
   16a40:	muleq	r1, r0, r8
   16a44:	muleq	r1, r0, r8
   16a48:	muleq	r1, r0, r8
   16a4c:	muleq	r1, r0, r8
   16a50:	muleq	r1, r0, r8
   16a54:	muleq	r1, r0, r8
   16a58:	muleq	r1, r0, r8
   16a5c:	muleq	r1, r0, r8
   16a60:	muleq	r1, r0, r8
   16a64:	muleq	r1, r0, r8
   16a68:	muleq	r1, r0, r8
   16a6c:	andeq	r7, r1, r0, ror r3
   16a70:	andeq	r7, r1, r0, ror r3
   16a74:	andeq	r7, r1, r0, ror r3
   16a78:	andeq	r7, r1, r0, ror r3
   16a7c:	strdeq	r6, [r1], -r0
   16a80:	andeq	r7, r1, r0, lsr r4
   16a84:	muleq	r1, r0, r8
   16a88:	muleq	r1, r0, r8
   16a8c:	muleq	r1, r0, r8
   16a90:	muleq	r1, r0, r8
   16a94:	muleq	r1, r0, r8
   16a98:	muleq	r1, r0, r8
   16a9c:	muleq	r1, r0, r8
   16aa0:	muleq	r1, r0, r8
   16aa4:	muleq	r1, r0, r8
   16aa8:	muleq	r1, r0, r8
   16aac:	muleq	r1, r0, r8
   16ab0:	muleq	r1, r0, r8
   16ab4:	muleq	r1, r0, r8
   16ab8:	muleq	r1, r0, r8
   16abc:	muleq	r1, r0, r8
   16ac0:	muleq	r1, r0, r8
   16ac4:	muleq	r1, r0, r8
   16ac8:	muleq	r1, r0, r8
   16acc:	muleq	r1, r0, r8
   16ad0:	muleq	r1, r0, r8
   16ad4:	muleq	r1, r0, r8
   16ad8:	muleq	r1, r0, r8
   16adc:	muleq	r1, r0, r8
   16ae0:	muleq	r1, r0, r8
   16ae4:	muleq	r1, r0, r8
   16ae8:	muleq	r1, r0, r8
   16aec:	andeq	r7, r1, r0, ror r3
   16af0:	andeq	r7, r1, r8, lsr #4
   16af4:	muleq	r1, r0, r8
   16af8:	andeq	r7, r1, r0, ror r3
   16afc:	muleq	r1, r0, r8
   16b00:	andeq	r7, r1, r0, ror r3
   16b04:	muleq	r1, r0, r8
   16b08:	muleq	r1, r0, r8
   16b0c:	muleq	r1, r0, r8
   16b10:	muleq	r1, r0, r8
   16b14:	muleq	r1, r0, r8
   16b18:	muleq	r1, r0, r8
   16b1c:	muleq	r1, r0, r8
   16b20:	muleq	r1, r0, r8
   16b24:	muleq	r1, r0, r8
   16b28:	muleq	r1, r0, r8
   16b2c:	muleq	r1, r0, r8
   16b30:	muleq	r1, r0, r8
   16b34:	muleq	r1, r0, r8
   16b38:	muleq	r1, r0, r8
   16b3c:	muleq	r1, r0, r8
   16b40:	muleq	r1, r0, r8
   16b44:	muleq	r1, r0, r8
   16b48:	muleq	r1, r0, r8
   16b4c:	muleq	r1, r0, r8
   16b50:	muleq	r1, r0, r8
   16b54:	muleq	r1, r0, r8
   16b58:	muleq	r1, r0, r8
   16b5c:	muleq	r1, r0, r8
   16b60:	muleq	r1, r0, r8
   16b64:	muleq	r1, r0, r8
   16b68:	muleq	r1, r0, r8
   16b6c:	andeq	r7, r1, r8, ror #5
   16b70:	andeq	r7, r1, r0, ror r3
   16b74:	andeq	r7, r1, r8, ror #5
   16b78:	andeq	r7, r1, r8, lsl #6
   16b7c:	mov	r8, r9
   16b80:	mov	r7, sl
   16b84:	b	17a84 <__assert_fail@plt+0x6754>
   16b88:	ldr	r3, [sp, #28]
   16b8c:	cmp	r3, #0
   16b90:	bne	16bb0 <__assert_fail@plt+0x5880>
   16b94:	ldr	r3, [sp, #156]	; 0x9c
   16b98:	tst	r3, #1
   16b9c:	bne	16f98 <__assert_fail@plt+0x5c68>
   16ba0:	ldr	r3, [sp, #28]
   16ba4:	str	r3, [sp, #44]	; 0x2c
   16ba8:	mov	r5, r3
   16bac:	b	16eb8 <__assert_fail@plt+0x5b88>
   16bb0:	ldr	r3, [sp, #32]
   16bb4:	cmp	r3, #0
   16bb8:	bne	17a34 <__assert_fail@plt+0x6704>
   16bbc:	str	r3, [sp, #44]	; 0x2c
   16bc0:	ldr	r3, [sp, #36]	; 0x24
   16bc4:	eor	r3, r3, #1
   16bc8:	cmp	sl, #2
   16bcc:	movne	r3, #0
   16bd0:	andeq	r3, r3, #1
   16bd4:	cmp	r3, #0
   16bd8:	beq	16c30 <__assert_fail@plt+0x5900>
   16bdc:	cmp	r9, fp
   16be0:	movhi	r2, #39	; 0x27
   16be4:	strbhi	r2, [r8, fp]
   16be8:	add	r2, fp, #1
   16bec:	cmp	r9, r2
   16bf0:	movhi	r1, #36	; 0x24
   16bf4:	strbhi	r1, [r8, r2]
   16bf8:	add	r2, fp, #2
   16bfc:	cmp	r9, r2
   16c00:	movhi	r1, #39	; 0x27
   16c04:	strbhi	r1, [r8, r2]
   16c08:	add	r2, fp, #3
   16c0c:	cmp	r9, r2
   16c10:	bls	17af0 <__assert_fail@plt+0x67c0>
   16c14:	mov	r1, #92	; 0x5c
   16c18:	strb	r1, [r8, r2]
   16c1c:	add	fp, fp, #4
   16c20:	str	r3, [sp, #36]	; 0x24
   16c24:	mov	r5, #0
   16c28:	mov	r4, #48	; 0x30
   16c2c:	b	16f04 <__assert_fail@plt+0x5bd4>
   16c30:	cmp	r9, fp
   16c34:	bhi	16c5c <__assert_fail@plt+0x592c>
   16c38:	add	r1, fp, #1
   16c3c:	ldr	r2, [sp, #56]	; 0x38
   16c40:	cmp	r2, #0
   16c44:	bne	16c84 <__assert_fail@plt+0x5954>
   16c48:	mov	r3, r5
   16c4c:	ldr	r5, [sp, #56]	; 0x38
   16c50:	mov	fp, r1
   16c54:	mov	r4, #48	; 0x30
   16c58:	b	16eb8 <__assert_fail@plt+0x5b88>
   16c5c:	mov	r2, #92	; 0x5c
   16c60:	strb	r2, [r8, fp]
   16c64:	add	r1, fp, #1
   16c68:	ldr	r2, [sp, #56]	; 0x38
   16c6c:	cmp	r2, #0
   16c70:	moveq	r3, r5
   16c74:	moveq	r5, r2
   16c78:	moveq	fp, r1
   16c7c:	moveq	r4, #48	; 0x30
   16c80:	beq	16f04 <__assert_fail@plt+0x5bd4>
   16c84:	add	r2, r6, #1
   16c88:	ldr	r0, [sp, #24]
   16c8c:	cmp	r2, r0
   16c90:	bcs	16cac <__assert_fail@plt+0x597c>
   16c94:	ldr	r0, [sp, #48]	; 0x30
   16c98:	ldrb	r2, [r0, r2]
   16c9c:	sub	r2, r2, #48	; 0x30
   16ca0:	uxtb	r2, r2
   16ca4:	cmp	r2, #9
   16ca8:	bls	16cc4 <__assert_fail@plt+0x5994>
   16cac:	mov	r2, r3
   16cb0:	mov	r3, r5
   16cb4:	mov	r5, r2
   16cb8:	mov	fp, r1
   16cbc:	mov	r4, #48	; 0x30
   16cc0:	b	16edc <__assert_fail@plt+0x5bac>
   16cc4:	cmp	r9, r1
   16cc8:	movhi	r2, #48	; 0x30
   16ccc:	strbhi	r2, [r8, r1]
   16cd0:	add	r2, fp, #2
   16cd4:	cmp	r9, r2
   16cd8:	movhi	r1, #48	; 0x30
   16cdc:	strbhi	r1, [r8, r2]
   16ce0:	add	r1, fp, #3
   16ce4:	b	16cac <__assert_fail@plt+0x597c>
   16ce8:	mov	r3, #0
   16cec:	str	r3, [sp, #44]	; 0x2c
   16cf0:	cmp	sl, #2
   16cf4:	beq	16d10 <__assert_fail@plt+0x59e0>
   16cf8:	cmp	sl, #5
   16cfc:	beq	16d28 <__assert_fail@plt+0x59f8>
   16d00:	mov	r5, #0
   16d04:	mov	r3, r5
   16d08:	mov	r4, #63	; 0x3f
   16d0c:	b	16eb8 <__assert_fail@plt+0x5b88>
   16d10:	ldr	r3, [sp, #32]
   16d14:	cmp	r3, #0
   16d18:	bne	17a40 <__assert_fail@plt+0x6710>
   16d1c:	mov	r5, r3
   16d20:	mov	r4, #63	; 0x3f
   16d24:	b	17420 <__assert_fail@plt+0x60f0>
   16d28:	ldr	r3, [sp, #156]	; 0x9c
   16d2c:	tst	r3, #4
   16d30:	beq	17858 <__assert_fail@plt+0x6528>
   16d34:	add	r2, r6, #2
   16d38:	ldr	r3, [sp, #24]
   16d3c:	cmp	r2, r3
   16d40:	bcs	17868 <__assert_fail@plt+0x6538>
   16d44:	ldr	r3, [sp, #48]	; 0x30
   16d48:	add	r3, r3, r6
   16d4c:	ldrb	r4, [r3, #1]
   16d50:	cmp	r4, #63	; 0x3f
   16d54:	movne	r5, #0
   16d58:	movne	r3, r5
   16d5c:	movne	r4, #63	; 0x3f
   16d60:	bne	16eb8 <__assert_fail@plt+0x5b88>
   16d64:	ldr	r3, [sp, #48]	; 0x30
   16d68:	ldrb	r1, [r3, r2]
   16d6c:	sub	r3, r1, #33	; 0x21
   16d70:	cmp	r3, #29
   16d74:	ldrls	pc, [pc, r3, lsl #2]
   16d78:	b	17878 <__assert_fail@plt+0x6548>
   16d7c:	strdeq	r6, [r1], -r4
   16d80:	andeq	r7, r1, r8, ror r8
   16d84:	andeq	r7, r1, r8, ror r8
   16d88:	andeq	r7, r1, r8, ror r8
   16d8c:	andeq	r7, r1, r8, ror r8
   16d90:	andeq	r7, r1, r8, ror r8
   16d94:	strdeq	r6, [r1], -r4
   16d98:	strdeq	r6, [r1], -r4
   16d9c:	strdeq	r6, [r1], -r4
   16da0:	andeq	r7, r1, r8, ror r8
   16da4:	andeq	r7, r1, r8, ror r8
   16da8:	andeq	r7, r1, r8, ror r8
   16dac:	strdeq	r6, [r1], -r4
   16db0:	andeq	r7, r1, r8, ror r8
   16db4:	strdeq	r6, [r1], -r4
   16db8:	andeq	r7, r1, r8, ror r8
   16dbc:	andeq	r7, r1, r8, ror r8
   16dc0:	andeq	r7, r1, r8, ror r8
   16dc4:	andeq	r7, r1, r8, ror r8
   16dc8:	andeq	r7, r1, r8, ror r8
   16dcc:	andeq	r7, r1, r8, ror r8
   16dd0:	andeq	r7, r1, r8, ror r8
   16dd4:	andeq	r7, r1, r8, ror r8
   16dd8:	andeq	r7, r1, r8, ror r8
   16ddc:	andeq	r7, r1, r8, ror r8
   16de0:	andeq	r7, r1, r8, ror r8
   16de4:	andeq	r7, r1, r8, ror r8
   16de8:	strdeq	r6, [r1], -r4
   16dec:	strdeq	r6, [r1], -r4
   16df0:	strdeq	r6, [r1], -r4
   16df4:	ldr	r3, [sp, #32]
   16df8:	cmp	r3, #0
   16dfc:	bne	17ae4 <__assert_fail@plt+0x67b4>
   16e00:	cmp	r9, fp
   16e04:	movhi	r3, #63	; 0x3f
   16e08:	strbhi	r3, [r8, fp]
   16e0c:	add	r3, fp, #1
   16e10:	cmp	r9, r3
   16e14:	movhi	r0, #34	; 0x22
   16e18:	strbhi	r0, [r8, r3]
   16e1c:	add	r3, fp, #2
   16e20:	cmp	r9, r3
   16e24:	movhi	r0, #34	; 0x22
   16e28:	strbhi	r0, [r8, r3]
   16e2c:	add	r3, fp, #3
   16e30:	cmp	r9, r3
   16e34:	movhi	r0, #63	; 0x3f
   16e38:	strbhi	r0, [r8, r3]
   16e3c:	add	fp, fp, #4
   16e40:	ldr	r3, [sp, #32]
   16e44:	mov	r5, r3
   16e48:	mov	r4, r1
   16e4c:	mov	r6, r2
   16e50:	b	16eb8 <__assert_fail@plt+0x5b88>
   16e54:	mov	r3, #0
   16e58:	str	r3, [sp, #44]	; 0x2c
   16e5c:	mov	r4, #8
   16e60:	mov	r3, #98	; 0x62
   16e64:	b	16ea4 <__assert_fail@plt+0x5b74>
   16e68:	mov	r3, #0
   16e6c:	str	r3, [sp, #44]	; 0x2c
   16e70:	mov	r4, #12
   16e74:	mov	r3, #102	; 0x66
   16e78:	b	16ea4 <__assert_fail@plt+0x5b74>
   16e7c:	mov	r3, #0
   16e80:	str	r3, [sp, #44]	; 0x2c
   16e84:	mov	r4, #13
   16e88:	mov	r3, #114	; 0x72
   16e8c:	ldr	r2, [sp, #32]
   16e90:	cmp	sl, #2
   16e94:	movne	r2, #0
   16e98:	andeq	r2, r2, #1
   16e9c:	cmp	r2, #0
   16ea0:	bne	172c4 <__assert_fail@plt+0x5f94>
   16ea4:	ldr	r2, [sp, #28]
   16ea8:	cmp	r2, #0
   16eac:	bne	178ac <__assert_fail@plt+0x657c>
   16eb0:	mov	r5, r2
   16eb4:	mov	r3, r2
   16eb8:	ldr	r2, [sp, #28]
   16ebc:	eor	r2, r2, #1
   16ec0:	cmp	sl, #2
   16ec4:	orreq	r2, r2, #1
   16ec8:	eor	r2, r2, #1
   16ecc:	ldr	r1, [sp, #32]
   16ed0:	orr	r2, r1, r2
   16ed4:	tst	r2, #255	; 0xff
   16ed8:	beq	16f04 <__assert_fail@plt+0x5bd4>
   16edc:	ldr	r2, [sp, #160]	; 0xa0
   16ee0:	cmp	r2, #0
   16ee4:	beq	16f04 <__assert_fail@plt+0x5bd4>
   16ee8:	ubfx	r1, r4, #5, #8
   16eec:	and	r2, r4, #31
   16ef0:	ldr	r0, [sp, #160]	; 0xa0
   16ef4:	ldr	r1, [r0, r1, lsl #2]
   16ef8:	lsr	r2, r1, r2
   16efc:	tst	r2, #1
   16f00:	bne	16f10 <__assert_fail@plt+0x5be0>
   16f04:	ldr	r2, [sp, #44]	; 0x2c
   16f08:	cmp	r2, #0
   16f0c:	beq	17264 <__assert_fail@plt+0x5f34>
   16f10:	ldr	r3, [sp, #32]
   16f14:	cmp	r3, #0
   16f18:	bne	17a64 <__assert_fail@plt+0x6734>
   16f1c:	ldr	r3, [sp, #36]	; 0x24
   16f20:	eor	r3, r3, #1
   16f24:	cmp	sl, #2
   16f28:	movne	r3, #0
   16f2c:	andeq	r3, r3, #1
   16f30:	cmp	r3, #0
   16f34:	beq	16f6c <__assert_fail@plt+0x5c3c>
   16f38:	cmp	r9, fp
   16f3c:	movhi	r2, #39	; 0x27
   16f40:	strbhi	r2, [r8, fp]
   16f44:	add	r2, fp, #1
   16f48:	cmp	r9, r2
   16f4c:	movhi	r1, #36	; 0x24
   16f50:	strbhi	r1, [r8, r2]
   16f54:	add	r2, fp, #2
   16f58:	cmp	r9, r2
   16f5c:	movhi	r1, #39	; 0x27
   16f60:	strbhi	r1, [r8, r2]
   16f64:	add	fp, fp, #3
   16f68:	str	r3, [sp, #36]	; 0x24
   16f6c:	cmp	r9, fp
   16f70:	movhi	r3, #92	; 0x5c
   16f74:	strbhi	r3, [r8, fp]
   16f78:	add	fp, fp, #1
   16f7c:	cmp	fp, r9
   16f80:	strbcc	r4, [r8, fp]
   16f84:	add	fp, fp, #1
   16f88:	cmp	r5, #0
   16f8c:	ldr	r3, [sp, #40]	; 0x28
   16f90:	moveq	r3, r5
   16f94:	str	r3, [sp, #40]	; 0x28
   16f98:	add	r6, r6, #1
   16f9c:	ldr	r3, [sp, #24]
   16fa0:	cmn	r3, #1
   16fa4:	beq	178d4 <__assert_fail@plt+0x65a4>
   16fa8:	ldr	r3, [sp, #24]
   16fac:	subs	r5, r3, r6
   16fb0:	movne	r5, #1
   16fb4:	cmp	r5, #0
   16fb8:	beq	178e8 <__assert_fail@plt+0x65b8>
   16fbc:	ldr	r3, [sp, #28]
   16fc0:	cmp	sl, #2
   16fc4:	moveq	r3, #0
   16fc8:	andne	r3, r3, #1
   16fcc:	str	r3, [sp, #56]	; 0x38
   16fd0:	ldr	r2, [sp, #52]	; 0x34
   16fd4:	adds	r7, r2, #0
   16fd8:	movne	r7, #1
   16fdc:	ands	r3, r3, r7
   16fe0:	str	r3, [sp, #44]	; 0x2c
   16fe4:	bne	16904 <__assert_fail@plt+0x55d4>
   16fe8:	ldr	r3, [sp, #48]	; 0x30
   16fec:	ldrb	r4, [r3, r6]
   16ff0:	cmp	r4, #126	; 0x7e
   16ff4:	ldrls	pc, [pc, r4, lsl #2]
   16ff8:	b	17430 <__assert_fail@plt+0x6100>
   16ffc:	andeq	r6, r1, r8, lsl #23
   17000:	andeq	r7, r1, r0, lsr r4
   17004:	andeq	r7, r1, r0, lsr r4
   17008:	andeq	r7, r1, r0, lsr r4
   1700c:	andeq	r7, r1, r0, lsr r4
   17010:	andeq	r7, r1, r0, lsr r4
   17014:	andeq	r7, r1, r0, lsr r4
   17018:	ldrdeq	r7, [r1], -r0
   1701c:	andeq	r6, r1, ip, asr lr
   17020:	andeq	r7, r1, r0, lsl #4
   17024:	andeq	r7, r1, r4, lsr #5
   17028:	andeq	r7, r1, r4, lsl r2
   1702c:	andeq	r6, r1, r0, ror lr
   17030:	andeq	r6, r1, r4, lsl #29
   17034:	andeq	r7, r1, r0, lsr r4
   17038:	andeq	r7, r1, r0, lsr r4
   1703c:	andeq	r7, r1, r0, lsr r4
   17040:	andeq	r7, r1, r0, lsr r4
   17044:	andeq	r7, r1, r0, lsr r4
   17048:	andeq	r7, r1, r0, lsr r4
   1704c:	andeq	r7, r1, r0, lsr r4
   17050:	andeq	r7, r1, r0, lsr r4
   17054:	andeq	r7, r1, r0, lsr r4
   17058:	andeq	r7, r1, r0, lsr r4
   1705c:	andeq	r7, r1, r0, lsr r4
   17060:	andeq	r7, r1, r0, lsr r4
   17064:	andeq	r7, r1, r0, lsr r4
   17068:	andeq	r7, r1, r0, lsr r4
   1706c:	andeq	r7, r1, r0, lsr r4
   17070:	andeq	r7, r1, r0, lsr r4
   17074:	andeq	r7, r1, r0, lsr r4
   17078:	andeq	r7, r1, r0, lsr r4
   1707c:	andeq	r7, r1, ip, asr #6
   17080:	andeq	r7, r1, r8, asr #6
   17084:	andeq	r7, r1, r8, asr #6
   17088:	andeq	r7, r1, r8, lsl #6
   1708c:	andeq	r7, r1, r8, asr #6
   17090:	andeq	r7, r1, r0, asr r8
   17094:	andeq	r7, r1, r8, asr #6
   17098:	muleq	r1, r0, r3
   1709c:	andeq	r7, r1, r8, asr #6
   170a0:	andeq	r7, r1, r8, asr #6
   170a4:	andeq	r7, r1, r8, asr #6
   170a8:	andeq	r7, r1, r0, asr r8
   170ac:	andeq	r7, r1, r0, asr r8
   170b0:	andeq	r7, r1, r0, asr r8
   170b4:	andeq	r7, r1, r0, asr r8
   170b8:	andeq	r7, r1, r0, asr r8
   170bc:	andeq	r7, r1, r0, asr r8
   170c0:	andeq	r7, r1, r0, asr r8
   170c4:	andeq	r7, r1, r0, asr r8
   170c8:	andeq	r7, r1, r0, asr r8
   170cc:	andeq	r7, r1, r0, asr r8
   170d0:	andeq	r7, r1, r0, asr r8
   170d4:	andeq	r7, r1, r0, asr r8
   170d8:	andeq	r7, r1, r0, asr r8
   170dc:	andeq	r7, r1, r0, asr r8
   170e0:	andeq	r7, r1, r0, asr r8
   170e4:	andeq	r7, r1, r0, asr r8
   170e8:	andeq	r7, r1, r8, asr #6
   170ec:	andeq	r7, r1, r8, asr #6
   170f0:	andeq	r7, r1, r8, asr #6
   170f4:	andeq	r7, r1, r8, asr #6
   170f8:	strdeq	r6, [r1], -r0
   170fc:	andeq	r7, r1, r0, lsr r4
   17100:	andeq	r7, r1, r0, asr r8
   17104:	andeq	r7, r1, r0, asr r8
   17108:	andeq	r7, r1, r0, asr r8
   1710c:	andeq	r7, r1, r0, asr r8
   17110:	andeq	r7, r1, r0, asr r8
   17114:	andeq	r7, r1, r0, asr r8
   17118:	andeq	r7, r1, r0, asr r8
   1711c:	andeq	r7, r1, r0, asr r8
   17120:	andeq	r7, r1, r0, asr r8
   17124:	andeq	r7, r1, r0, asr r8
   17128:	andeq	r7, r1, r0, asr r8
   1712c:	andeq	r7, r1, r0, asr r8
   17130:	andeq	r7, r1, r0, asr r8
   17134:	andeq	r7, r1, r0, asr r8
   17138:	andeq	r7, r1, r0, asr r8
   1713c:	andeq	r7, r1, r0, asr r8
   17140:	andeq	r7, r1, r0, asr r8
   17144:	andeq	r7, r1, r0, asr r8
   17148:	andeq	r7, r1, r0, asr r8
   1714c:	andeq	r7, r1, r0, asr r8
   17150:	andeq	r7, r1, r0, asr r8
   17154:	andeq	r7, r1, r0, asr r8
   17158:	andeq	r7, r1, r0, asr r8
   1715c:	andeq	r7, r1, r0, asr r8
   17160:	andeq	r7, r1, r0, asr r8
   17164:	andeq	r7, r1, r0, asr r8
   17168:	andeq	r7, r1, r8, asr #6
   1716c:	andeq	r7, r1, r8, lsr #4
   17170:	andeq	r7, r1, r0, asr r8
   17174:	andeq	r7, r1, r8, asr #6
   17178:	andeq	r7, r1, r0, asr r8
   1717c:	andeq	r7, r1, r8, asr #6
   17180:	andeq	r7, r1, r0, asr r8
   17184:	andeq	r7, r1, r0, asr r8
   17188:	andeq	r7, r1, r0, asr r8
   1718c:	andeq	r7, r1, r0, asr r8
   17190:	andeq	r7, r1, r0, asr r8
   17194:	andeq	r7, r1, r0, asr r8
   17198:	andeq	r7, r1, r0, asr r8
   1719c:	andeq	r7, r1, r0, asr r8
   171a0:	andeq	r7, r1, r0, asr r8
   171a4:	andeq	r7, r1, r0, asr r8
   171a8:	andeq	r7, r1, r0, asr r8
   171ac:	andeq	r7, r1, r0, asr r8
   171b0:	andeq	r7, r1, r0, asr r8
   171b4:	andeq	r7, r1, r0, asr r8
   171b8:	andeq	r7, r1, r0, asr r8
   171bc:	andeq	r7, r1, r0, asr r8
   171c0:	andeq	r7, r1, r0, asr r8
   171c4:	andeq	r7, r1, r0, asr r8
   171c8:	andeq	r7, r1, r0, asr r8
   171cc:	andeq	r7, r1, r0, asr r8
   171d0:	andeq	r7, r1, r0, asr r8
   171d4:	andeq	r7, r1, r0, asr r8
   171d8:	andeq	r7, r1, r0, asr r8
   171dc:	andeq	r7, r1, r0, asr r8
   171e0:	andeq	r7, r1, r0, asr r8
   171e4:	andeq	r7, r1, r0, asr r8
   171e8:	andeq	r7, r1, r8, ror #5
   171ec:	andeq	r7, r1, r8, asr #6
   171f0:	andeq	r7, r1, r8, ror #5
   171f4:	andeq	r7, r1, r8, lsl #6
   171f8:	mov	r3, #0
   171fc:	str	r3, [sp, #44]	; 0x2c
   17200:	mov	r4, #9
   17204:	mov	r3, #116	; 0x74
   17208:	b	16e8c <__assert_fail@plt+0x5b5c>
   1720c:	mov	r3, #0
   17210:	str	r3, [sp, #44]	; 0x2c
   17214:	mov	r4, #11
   17218:	mov	r3, #118	; 0x76
   1721c:	b	16ea4 <__assert_fail@plt+0x5b74>
   17220:	mov	r3, #0
   17224:	str	r3, [sp, #44]	; 0x2c
   17228:	cmp	sl, #2
   1722c:	beq	17250 <__assert_fail@plt+0x5f20>
   17230:	ldr	r3, [sp, #28]
   17234:	ldr	r2, [sp, #32]
   17238:	and	r3, r3, r2
   1723c:	tst	r7, r3
   17240:	bne	178c4 <__assert_fail@plt+0x6594>
   17244:	mov	r4, #92	; 0x5c
   17248:	mov	r3, r4
   1724c:	b	16ea4 <__assert_fail@plt+0x5b74>
   17250:	ldr	r3, [sp, #32]
   17254:	cmp	r3, #0
   17258:	bne	17a4c <__assert_fail@plt+0x671c>
   1725c:	mov	r5, r3
   17260:	mov	r4, #92	; 0x5c
   17264:	eor	r3, r3, #1
   17268:	ldr	r2, [sp, #36]	; 0x24
   1726c:	and	r3, r3, r2
   17270:	tst	r3, #255	; 0xff
   17274:	beq	16f7c <__assert_fail@plt+0x5c4c>
   17278:	cmp	r9, fp
   1727c:	movhi	r3, #39	; 0x27
   17280:	strbhi	r3, [r8, fp]
   17284:	add	r3, fp, #1
   17288:	cmp	r9, r3
   1728c:	movhi	r2, #39	; 0x27
   17290:	strbhi	r2, [r8, r3]
   17294:	add	fp, fp, #2
   17298:	mov	r3, #0
   1729c:	str	r3, [sp, #36]	; 0x24
   172a0:	b	16f7c <__assert_fail@plt+0x5c4c>
   172a4:	mov	r3, #110	; 0x6e
   172a8:	b	16e8c <__assert_fail@plt+0x5b5c>
   172ac:	mov	r3, #110	; 0x6e
   172b0:	b	16e8c <__assert_fail@plt+0x5b5c>
   172b4:	mov	r3, #0
   172b8:	str	r3, [sp, #44]	; 0x2c
   172bc:	mov	r3, #110	; 0x6e
   172c0:	b	16e8c <__assert_fail@plt+0x5b5c>
   172c4:	mov	r8, r9
   172c8:	mov	r7, #2
   172cc:	b	17a6c <__assert_fail@plt+0x673c>
   172d0:	mov	r3, #97	; 0x61
   172d4:	b	16ea4 <__assert_fail@plt+0x5b74>
   172d8:	mov	r3, #97	; 0x61
   172dc:	b	16ea4 <__assert_fail@plt+0x5b74>
   172e0:	mov	r3, #0
   172e4:	str	r3, [sp, #44]	; 0x2c
   172e8:	ldr	r3, [sp, #24]
   172ec:	cmn	r3, #1
   172f0:	beq	1731c <__assert_fail@plt+0x5fec>
   172f4:	ldr	r3, [sp, #24]
   172f8:	subs	r3, r3, #1
   172fc:	movne	r3, #1
   17300:	cmp	r3, #0
   17304:	bne	17884 <__assert_fail@plt+0x6554>
   17308:	cmp	r6, #0
   1730c:	beq	1734c <__assert_fail@plt+0x601c>
   17310:	mov	r5, #0
   17314:	mov	r3, r5
   17318:	b	16eb8 <__assert_fail@plt+0x5b88>
   1731c:	ldr	r3, [sp, #48]	; 0x30
   17320:	ldrb	r3, [r3, #1]
   17324:	adds	r3, r3, #0
   17328:	movne	r3, #1
   1732c:	b	17300 <__assert_fail@plt+0x5fd0>
   17330:	mov	r3, #0
   17334:	str	r3, [sp, #44]	; 0x2c
   17338:	b	17308 <__assert_fail@plt+0x5fd8>
   1733c:	mov	r3, #0
   17340:	str	r3, [sp, #44]	; 0x2c
   17344:	b	1734c <__assert_fail@plt+0x601c>
   17348:	ldr	r5, [sp, #44]	; 0x2c
   1734c:	ldr	r3, [sp, #32]
   17350:	cmp	sl, #2
   17354:	movne	r3, #0
   17358:	andeq	r3, r3, #1
   1735c:	cmp	r3, #0
   17360:	beq	16eb8 <__assert_fail@plt+0x5b88>
   17364:	mov	r8, r9
   17368:	mov	r7, #2
   1736c:	b	17a6c <__assert_fail@plt+0x673c>
   17370:	ldr	r5, [sp, #32]
   17374:	b	1734c <__assert_fail@plt+0x601c>
   17378:	mov	r3, #0
   1737c:	str	r3, [sp, #44]	; 0x2c
   17380:	mov	r5, r3
   17384:	b	1734c <__assert_fail@plt+0x601c>
   17388:	mov	r3, #0
   1738c:	str	r3, [sp, #44]	; 0x2c
   17390:	cmp	sl, #2
   17394:	strne	r5, [sp, #68]	; 0x44
   17398:	movne	r3, #0
   1739c:	movne	r4, #39	; 0x27
   173a0:	bne	16eb8 <__assert_fail@plt+0x5b88>
   173a4:	ldr	r3, [sp, #32]
   173a8:	cmp	r3, #0
   173ac:	bne	17a58 <__assert_fail@plt+0x6728>
   173b0:	ldr	r3, [sp, #72]	; 0x48
   173b4:	clz	r3, r3
   173b8:	lsr	r3, r3, #5
   173bc:	cmp	r9, #0
   173c0:	moveq	r3, #0
   173c4:	cmp	r3, #0
   173c8:	movne	r3, #0
   173cc:	bne	173f4 <__assert_fail@plt+0x60c4>
   173d0:	cmp	r9, fp
   173d4:	movhi	r3, #39	; 0x27
   173d8:	strbhi	r3, [r8, fp]
   173dc:	add	r3, fp, #1
   173e0:	cmp	r9, r3
   173e4:	movhi	r2, #92	; 0x5c
   173e8:	strbhi	r2, [r8, r3]
   173ec:	mov	r3, r9
   173f0:	ldr	r9, [sp, #72]	; 0x48
   173f4:	add	r2, fp, #2
   173f8:	cmp	r2, r3
   173fc:	movcc	r1, #39	; 0x27
   17400:	strbcc	r1, [r8, r2]
   17404:	add	fp, fp, #3
   17408:	str	r5, [sp, #68]	; 0x44
   1740c:	ldr	r2, [sp, #32]
   17410:	str	r2, [sp, #36]	; 0x24
   17414:	str	r9, [sp, #72]	; 0x48
   17418:	mov	r9, r3
   1741c:	mov	r4, #39	; 0x27
   17420:	mov	r3, #0
   17424:	b	16f04 <__assert_fail@plt+0x5bd4>
   17428:	mov	r3, #0
   1742c:	str	r3, [sp, #44]	; 0x2c
   17430:	ldr	r7, [sp, #76]	; 0x4c
   17434:	cmp	r7, #1
   17438:	bne	17470 <__assert_fail@plt+0x6140>
   1743c:	bl	111a4 <__ctype_b_loc@plt>
   17440:	ldr	r2, [r0]
   17444:	lsl	r3, r4, #1
   17448:	ldrh	r5, [r2, r3]
   1744c:	ubfx	r5, r5, #14, #1
   17450:	mov	ip, r7
   17454:	eor	r3, r5, #1
   17458:	ldr	r2, [sp, #28]
   1745c:	and	r3, r3, r2
   17460:	ands	r3, r3, #255	; 0xff
   17464:	beq	16eb8 <__assert_fail@plt+0x5b88>
   17468:	mov	r5, #0
   1746c:	b	176cc <__assert_fail@plt+0x639c>
   17470:	mov	r2, #0
   17474:	mov	r3, #0
   17478:	strd	r2, [sp, #104]	; 0x68
   1747c:	ldr	r3, [sp, #24]
   17480:	cmn	r3, #1
   17484:	beq	174a8 <__assert_fail@plt+0x6178>
   17488:	mov	r3, #0
   1748c:	str	r4, [sp, #88]	; 0x58
   17490:	str	fp, [sp, #92]	; 0x5c
   17494:	str	r8, [sp, #56]	; 0x38
   17498:	mov	r8, r3
   1749c:	str	r9, [sp, #84]	; 0x54
   174a0:	ldr	r9, [sp, #48]	; 0x30
   174a4:	b	175f4 <__assert_fail@plt+0x62c4>
   174a8:	ldr	r0, [sp, #48]	; 0x30
   174ac:	bl	111bc <strlen@plt>
   174b0:	str	r0, [sp, #24]
   174b4:	b	17488 <__assert_fail@plt+0x6158>
   174b8:	mov	r1, fp
   174bc:	ldr	r4, [sp, #88]	; 0x58
   174c0:	mov	r2, r8
   174c4:	mov	ip, r8
   174c8:	ldr	fp, [sp, #92]	; 0x5c
   174cc:	ldr	r8, [sp, #56]	; 0x38
   174d0:	ldr	r9, [sp, #84]	; 0x54
   174d4:	ldr	r0, [sp, #24]
   174d8:	cmp	r7, r0
   174dc:	bcs	17694 <__assert_fail@plt+0x6364>
   174e0:	ldrb	r3, [r1]
   174e4:	cmp	r3, #0
   174e8:	beq	1769c <__assert_fail@plt+0x636c>
   174ec:	mov	r3, r1
   174f0:	add	r2, r2, #1
   174f4:	add	r1, r6, r2
   174f8:	cmp	r0, r1
   174fc:	bls	176a4 <__assert_fail@plt+0x6374>
   17500:	ldrb	r1, [r3, #1]!
   17504:	cmp	r1, #0
   17508:	bne	174f0 <__assert_fail@plt+0x61c0>
   1750c:	mov	ip, r2
   17510:	mov	r5, #0
   17514:	b	176c4 <__assert_fail@plt+0x6394>
   17518:	ldr	r3, [sp, #56]	; 0x38
   1751c:	str	r3, [sp, #64]	; 0x40
   17520:	ldr	r8, [sp, #84]	; 0x54
   17524:	mov	r7, #2
   17528:	b	17a6c <__assert_fail@plt+0x673c>
   1752c:	cmp	r2, r7
   17530:	beq	175d0 <__assert_fail@plt+0x62a0>
   17534:	ldrb	r3, [r2], #1
   17538:	sub	r3, r3, #91	; 0x5b
   1753c:	cmp	r3, #33	; 0x21
   17540:	ldrls	pc, [pc, r3, lsl #2]
   17544:	b	1752c <__assert_fail@plt+0x61fc>
   17548:	andeq	r7, r1, r8, lsl r5
   1754c:	andeq	r7, r1, r8, lsl r5
   17550:	andeq	r7, r1, ip, lsr #10
   17554:	andeq	r7, r1, r8, lsl r5
   17558:	andeq	r7, r1, ip, lsr #10
   1755c:	andeq	r7, r1, r8, lsl r5
   17560:	andeq	r7, r1, ip, lsr #10
   17564:	andeq	r7, r1, ip, lsr #10
   17568:	andeq	r7, r1, ip, lsr #10
   1756c:	andeq	r7, r1, ip, lsr #10
   17570:	andeq	r7, r1, ip, lsr #10
   17574:	andeq	r7, r1, ip, lsr #10
   17578:	andeq	r7, r1, ip, lsr #10
   1757c:	andeq	r7, r1, ip, lsr #10
   17580:	andeq	r7, r1, ip, lsr #10
   17584:	andeq	r7, r1, ip, lsr #10
   17588:	andeq	r7, r1, ip, lsr #10
   1758c:	andeq	r7, r1, ip, lsr #10
   17590:	andeq	r7, r1, ip, lsr #10
   17594:	andeq	r7, r1, ip, lsr #10
   17598:	andeq	r7, r1, ip, lsr #10
   1759c:	andeq	r7, r1, ip, lsr #10
   175a0:	andeq	r7, r1, ip, lsr #10
   175a4:	andeq	r7, r1, ip, lsr #10
   175a8:	andeq	r7, r1, ip, lsr #10
   175ac:	andeq	r7, r1, ip, lsr #10
   175b0:	andeq	r7, r1, ip, lsr #10
   175b4:	andeq	r7, r1, ip, lsr #10
   175b8:	andeq	r7, r1, ip, lsr #10
   175bc:	andeq	r7, r1, ip, lsr #10
   175c0:	andeq	r7, r1, ip, lsr #10
   175c4:	andeq	r7, r1, ip, lsr #10
   175c8:	andeq	r7, r1, ip, lsr #10
   175cc:	andeq	r7, r1, r8, lsl r5
   175d0:	ldr	r0, [sp, #100]	; 0x64
   175d4:	bl	110f0 <iswprint@plt>
   175d8:	cmp	r0, #0
   175dc:	moveq	r5, #0
   175e0:	add	r8, r8, r4
   175e4:	add	r0, sp, #104	; 0x68
   175e8:	bl	11090 <mbsinit@plt>
   175ec:	cmp	r0, #0
   175f0:	bne	17660 <__assert_fail@plt+0x6330>
   175f4:	add	r7, r6, r8
   175f8:	add	fp, r9, r7
   175fc:	add	r3, sp, #104	; 0x68
   17600:	ldr	r2, [sp, #24]
   17604:	sub	r2, r2, r7
   17608:	mov	r1, fp
   1760c:	add	r0, sp, #100	; 0x64
   17610:	bl	1a0b8 <__assert_fail@plt+0x8d88>
   17614:	subs	r4, r0, #0
   17618:	beq	176b0 <__assert_fail@plt+0x6380>
   1761c:	cmn	r4, #1
   17620:	beq	17678 <__assert_fail@plt+0x6348>
   17624:	cmn	r4, #2
   17628:	beq	174b8 <__assert_fail@plt+0x6188>
   1762c:	ldr	r3, [sp, #32]
   17630:	cmp	sl, #2
   17634:	movne	r3, #0
   17638:	andeq	r3, r3, #1
   1763c:	cmp	r3, #0
   17640:	beq	175d0 <__assert_fail@plt+0x62a0>
   17644:	cmp	r4, #1
   17648:	bls	175d0 <__assert_fail@plt+0x62a0>
   1764c:	add	r2, r7, #1
   17650:	add	r2, r9, r2
   17654:	add	r3, r9, r4
   17658:	add	r7, r3, r7
   1765c:	b	17534 <__assert_fail@plt+0x6204>
   17660:	ldr	r4, [sp, #88]	; 0x58
   17664:	mov	ip, r8
   17668:	ldr	fp, [sp, #92]	; 0x5c
   1766c:	ldr	r8, [sp, #56]	; 0x38
   17670:	ldr	r9, [sp, #84]	; 0x54
   17674:	b	176c4 <__assert_fail@plt+0x6394>
   17678:	ldr	r4, [sp, #88]	; 0x58
   1767c:	mov	ip, r8
   17680:	ldr	fp, [sp, #92]	; 0x5c
   17684:	ldr	r8, [sp, #56]	; 0x38
   17688:	ldr	r9, [sp, #84]	; 0x54
   1768c:	mov	r5, #0
   17690:	b	176c4 <__assert_fail@plt+0x6394>
   17694:	mov	r5, #0
   17698:	b	176c4 <__assert_fail@plt+0x6394>
   1769c:	mov	r5, #0
   176a0:	b	176c4 <__assert_fail@plt+0x6394>
   176a4:	mov	ip, r2
   176a8:	mov	r5, #0
   176ac:	b	176c4 <__assert_fail@plt+0x6394>
   176b0:	ldr	r4, [sp, #88]	; 0x58
   176b4:	mov	ip, r8
   176b8:	ldr	fp, [sp, #92]	; 0x5c
   176bc:	ldr	r8, [sp, #56]	; 0x38
   176c0:	ldr	r9, [sp, #84]	; 0x54
   176c4:	cmp	ip, #1
   176c8:	bls	17454 <__assert_fail@plt+0x6124>
   176cc:	add	lr, r6, ip
   176d0:	ldr	r3, [sp, #48]	; 0x30
   176d4:	add	r1, r3, r6
   176d8:	mov	r3, #0
   176dc:	eor	r0, r5, #1
   176e0:	ldr	r2, [sp, #28]
   176e4:	and	r0, r0, r2
   176e8:	uxtb	r0, r0
   176ec:	str	r0, [sp, #56]	; 0x38
   176f0:	mov	r7, #92	; 0x5c
   176f4:	ldr	ip, [sp, #36]	; 0x24
   176f8:	str	r5, [sp, #84]	; 0x54
   176fc:	ldr	r2, [sp, #44]	; 0x2c
   17700:	b	17770 <__assert_fail@plt+0x6440>
   17704:	cmp	r2, #0
   17708:	beq	17718 <__assert_fail@plt+0x63e8>
   1770c:	cmp	r9, fp
   17710:	strbhi	r7, [r8, fp]
   17714:	add	fp, fp, #1
   17718:	add	r5, r6, #1
   1771c:	cmp	r5, lr
   17720:	bcs	1782c <__assert_fail@plt+0x64fc>
   17724:	eor	r2, r3, #1
   17728:	and	r2, r2, ip
   1772c:	ands	r2, r2, #255	; 0xff
   17730:	beq	17848 <__assert_fail@plt+0x6518>
   17734:	cmp	r9, fp
   17738:	movhi	r2, #39	; 0x27
   1773c:	strbhi	r2, [r8, fp]
   17740:	add	r2, fp, #1
   17744:	cmp	r9, r2
   17748:	movhi	ip, #39	; 0x27
   1774c:	strbhi	ip, [r8, r2]
   17750:	add	fp, fp, #2
   17754:	ldr	ip, [sp, #56]	; 0x38
   17758:	mov	r2, ip
   1775c:	mov	r6, r5
   17760:	cmp	r9, fp
   17764:	strbhi	r4, [r8, fp]
   17768:	add	fp, fp, #1
   1776c:	ldrb	r4, [r1, #1]!
   17770:	cmp	r0, #0
   17774:	beq	17704 <__assert_fail@plt+0x63d4>
   17778:	ldr	r3, [sp, #32]
   1777c:	cmp	r3, #0
   17780:	bne	17a14 <__assert_fail@plt+0x66e4>
   17784:	eor	r3, ip, #1
   17788:	cmp	sl, #2
   1778c:	movne	r3, #0
   17790:	andeq	r3, r3, #1
   17794:	cmp	r3, #0
   17798:	beq	177d0 <__assert_fail@plt+0x64a0>
   1779c:	cmp	r9, fp
   177a0:	movhi	ip, #39	; 0x27
   177a4:	strbhi	ip, [r8, fp]
   177a8:	add	ip, fp, #1
   177ac:	cmp	r9, ip
   177b0:	movhi	r5, #36	; 0x24
   177b4:	strbhi	r5, [r8, ip]
   177b8:	add	ip, fp, #2
   177bc:	cmp	r9, ip
   177c0:	movhi	r5, #39	; 0x27
   177c4:	strbhi	r5, [r8, ip]
   177c8:	add	fp, fp, #3
   177cc:	mov	ip, r3
   177d0:	cmp	r9, fp
   177d4:	strbhi	r7, [r8, fp]
   177d8:	add	r3, fp, #1
   177dc:	cmp	r9, r3
   177e0:	bls	177f0 <__assert_fail@plt+0x64c0>
   177e4:	lsr	r5, r4, #6
   177e8:	add	r5, r5, #48	; 0x30
   177ec:	strb	r5, [r8, r3]
   177f0:	add	r3, fp, #2
   177f4:	cmp	r9, r3
   177f8:	bls	17808 <__assert_fail@plt+0x64d8>
   177fc:	ubfx	r5, r4, #3, #3
   17800:	add	r5, r5, #48	; 0x30
   17804:	strb	r5, [r8, r3]
   17808:	add	fp, fp, #3
   1780c:	and	r4, r4, #7
   17810:	add	r4, r4, #48	; 0x30
   17814:	add	r5, r6, #1
   17818:	cmp	r5, lr
   1781c:	bcs	17838 <__assert_fail@plt+0x6508>
   17820:	ldr	r3, [sp, #56]	; 0x38
   17824:	mov	r6, r5
   17828:	b	17760 <__assert_fail@plt+0x6430>
   1782c:	str	ip, [sp, #36]	; 0x24
   17830:	ldr	r5, [sp, #84]	; 0x54
   17834:	b	17264 <__assert_fail@plt+0x5f34>
   17838:	str	ip, [sp, #36]	; 0x24
   1783c:	ldr	r5, [sp, #84]	; 0x54
   17840:	mov	r3, r0
   17844:	b	17264 <__assert_fail@plt+0x5f34>
   17848:	mov	r6, r5
   1784c:	b	17760 <__assert_fail@plt+0x6430>
   17850:	ldr	r3, [sp, #44]	; 0x2c
   17854:	b	16eb8 <__assert_fail@plt+0x5b88>
   17858:	mov	r5, #0
   1785c:	mov	r3, r5
   17860:	mov	r4, #63	; 0x3f
   17864:	b	16eb8 <__assert_fail@plt+0x5b88>
   17868:	mov	r5, #0
   1786c:	mov	r3, r5
   17870:	mov	r4, #63	; 0x3f
   17874:	b	16eb8 <__assert_fail@plt+0x5b88>
   17878:	mov	r5, #0
   1787c:	mov	r3, r5
   17880:	b	16eb8 <__assert_fail@plt+0x5b88>
   17884:	mov	r5, #0
   17888:	mov	r3, r5
   1788c:	b	16eb8 <__assert_fail@plt+0x5b88>
   17890:	ldr	r5, [sp, #44]	; 0x2c
   17894:	ldr	r3, [sp, #32]
   17898:	b	16eb8 <__assert_fail@plt+0x5b88>
   1789c:	ldr	r5, [sp, #44]	; 0x2c
   178a0:	mov	r3, #0
   178a4:	str	r3, [sp, #44]	; 0x2c
   178a8:	b	16eb8 <__assert_fail@plt+0x5b88>
   178ac:	mov	r4, r3
   178b0:	mov	r5, #0
   178b4:	b	16f10 <__assert_fail@plt+0x5be0>
   178b8:	mov	r5, #0
   178bc:	mov	r4, #97	; 0x61
   178c0:	b	16f10 <__assert_fail@plt+0x5be0>
   178c4:	mov	r5, #0
   178c8:	mov	r3, r5
   178cc:	mov	r4, #92	; 0x5c
   178d0:	b	17264 <__assert_fail@plt+0x5f34>
   178d4:	ldr	r3, [sp, #48]	; 0x30
   178d8:	ldrb	r5, [r3, r6]
   178dc:	adds	r5, r5, #0
   178e0:	movne	r5, #1
   178e4:	b	16fb4 <__assert_fail@plt+0x5c84>
   178e8:	cmp	sl, #2
   178ec:	movne	r3, #0
   178f0:	moveq	r3, #1
   178f4:	ldr	r1, [sp, #32]
   178f8:	cmp	fp, #0
   178fc:	andeq	r2, r3, r1
   17900:	movne	r2, #0
   17904:	cmp	r2, #0
   17908:	bne	17a28 <__assert_fail@plt+0x66f8>
   1790c:	eor	r2, r1, #1
   17910:	uxtb	r2, r2
   17914:	and	r3, r3, r2
   17918:	ldr	r1, [sp, #68]	; 0x44
   1791c:	ands	r3, r1, r3
   17920:	beq	179b4 <__assert_fail@plt+0x6684>
   17924:	ldr	r2, [sp, #40]	; 0x28
   17928:	cmp	r2, #0
   1792c:	bne	17964 <__assert_fail@plt+0x6634>
   17930:	ldr	r2, [sp, #72]	; 0x48
   17934:	adds	r2, r2, #0
   17938:	movne	r2, #1
   1793c:	cmp	r9, #0
   17940:	movne	r2, #0
   17944:	str	r2, [sp, #68]	; 0x44
   17948:	mov	sl, #2
   1794c:	ldr	r1, [sp, #40]	; 0x28
   17950:	str	r1, [sp, #32]
   17954:	cmp	r2, #0
   17958:	beq	179a8 <__assert_fail@plt+0x6678>
   1795c:	ldr	r9, [sp, #72]	; 0x48
   17960:	b	166bc <__assert_fail@plt+0x538c>
   17964:	ldr	r3, [sp, #168]	; 0xa8
   17968:	str	r3, [sp, #16]
   1796c:	ldr	r3, [sp, #164]	; 0xa4
   17970:	str	r3, [sp, #12]
   17974:	ldr	r3, [sp, #160]	; 0xa0
   17978:	str	r3, [sp, #8]
   1797c:	ldr	r3, [sp, #156]	; 0x9c
   17980:	str	r3, [sp, #4]
   17984:	mov	r3, #5
   17988:	str	r3, [sp]
   1798c:	ldr	r3, [sp, #24]
   17990:	ldr	r2, [sp, #48]	; 0x30
   17994:	ldr	r1, [sp, #72]	; 0x48
   17998:	ldr	r0, [sp, #64]	; 0x40
   1799c:	bl	16644 <__assert_fail@plt+0x5314>
   179a0:	mov	fp, r0
   179a4:	b	17ac4 <__assert_fail@plt+0x6794>
   179a8:	mov	r8, r9
   179ac:	mov	r2, r3
   179b0:	b	179b8 <__assert_fail@plt+0x6688>
   179b4:	mov	r8, r9
   179b8:	ldr	r3, [sp, #60]	; 0x3c
   179bc:	cmp	r3, #0
   179c0:	moveq	r2, #0
   179c4:	andne	r2, r2, #1
   179c8:	cmp	r2, #0
   179cc:	beq	179fc <__assert_fail@plt+0x66cc>
   179d0:	mov	r2, r3
   179d4:	ldrb	r3, [r3]
   179d8:	cmp	r3, #0
   179dc:	beq	179fc <__assert_fail@plt+0x66cc>
   179e0:	ldr	r1, [sp, #64]	; 0x40
   179e4:	cmp	r8, fp
   179e8:	strbhi	r3, [r1, fp]
   179ec:	add	fp, fp, #1
   179f0:	ldrb	r3, [r2, #1]!
   179f4:	cmp	r3, #0
   179f8:	bne	179e4 <__assert_fail@plt+0x66b4>
   179fc:	cmp	r8, fp
   17a00:	bls	17ac4 <__assert_fail@plt+0x6794>
   17a04:	mov	r3, #0
   17a08:	ldr	r2, [sp, #64]	; 0x40
   17a0c:	strb	r3, [r2, fp]
   17a10:	b	17ac4 <__assert_fail@plt+0x6794>
   17a14:	mov	r8, r9
   17a18:	mov	r7, sl
   17a1c:	ldr	r3, [sp, #32]
   17a20:	str	r3, [sp, #28]
   17a24:	b	17a6c <__assert_fail@plt+0x673c>
   17a28:	mov	r8, r9
   17a2c:	mov	r7, #2
   17a30:	b	17a6c <__assert_fail@plt+0x673c>
   17a34:	mov	r8, r9
   17a38:	mov	r7, sl
   17a3c:	b	17a6c <__assert_fail@plt+0x673c>
   17a40:	mov	r8, r9
   17a44:	mov	r7, sl
   17a48:	b	17a6c <__assert_fail@plt+0x673c>
   17a4c:	mov	r8, r9
   17a50:	mov	r7, sl
   17a54:	b	17a6c <__assert_fail@plt+0x673c>
   17a58:	mov	r8, r9
   17a5c:	mov	r7, sl
   17a60:	b	17a6c <__assert_fail@plt+0x673c>
   17a64:	mov	r8, r9
   17a68:	mov	r7, sl
   17a6c:	ldr	r3, [sp, #28]
   17a70:	cmp	r7, #2
   17a74:	movne	r3, #0
   17a78:	andeq	r3, r3, #1
   17a7c:	cmp	r3, #0
   17a80:	movne	r7, #4
   17a84:	ldr	r3, [sp, #168]	; 0xa8
   17a88:	str	r3, [sp, #16]
   17a8c:	ldr	r3, [sp, #164]	; 0xa4
   17a90:	str	r3, [sp, #12]
   17a94:	mov	r3, #0
   17a98:	str	r3, [sp, #8]
   17a9c:	ldr	r3, [sp, #156]	; 0x9c
   17aa0:	bic	r3, r3, #2
   17aa4:	str	r3, [sp, #4]
   17aa8:	str	r7, [sp]
   17aac:	ldr	r3, [sp, #24]
   17ab0:	ldr	r2, [sp, #48]	; 0x30
   17ab4:	mov	r1, r8
   17ab8:	ldr	r0, [sp, #64]	; 0x40
   17abc:	bl	16644 <__assert_fail@plt+0x5314>
   17ac0:	mov	fp, r0
   17ac4:	mov	r0, fp
   17ac8:	add	sp, sp, #116	; 0x74
   17acc:	ldrd	r4, [sp]
   17ad0:	ldrd	r6, [sp, #8]
   17ad4:	ldrd	r8, [sp, #16]
   17ad8:	ldrd	sl, [sp, #24]
   17adc:	add	sp, sp, #32
   17ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae4:	mov	r8, r9
   17ae8:	mov	r7, sl
   17aec:	b	17a84 <__assert_fail@plt+0x6754>
   17af0:	add	fp, fp, #4
   17af4:	str	r3, [sp, #36]	; 0x24
   17af8:	mov	r5, #0
   17afc:	mov	r4, #48	; 0x30
   17b00:	b	16eb8 <__assert_fail@plt+0x5b88>
   17b04:	mov	r3, #1
   17b08:	str	r3, [sp, #32]
   17b0c:	str	r3, [sp, #28]
   17b10:	str	r3, [sp, #52]	; 0x34
   17b14:	movw	r3, #46204	; 0xb47c
   17b18:	movt	r3, #1
   17b1c:	str	r3, [sp, #60]	; 0x3c
   17b20:	mov	fp, #0
   17b24:	mov	sl, #5
   17b28:	b	1671c <__assert_fail@plt+0x53ec>
   17b2c:	ldr	r3, [sp, #48]	; 0x30
   17b30:	ldrb	r4, [r3, r6]
   17b34:	cmp	r4, #126	; 0x7e
   17b38:	ldrls	pc, [pc, r4, lsl #2]
   17b3c:	b	17428 <__assert_fail@plt+0x60f8>
   17b40:			; <UNDEFINED> instruction: 0x00016bb0
   17b44:	andeq	r7, r1, r8, lsr #8
   17b48:	andeq	r7, r1, r8, lsr #8
   17b4c:	andeq	r7, r1, r8, lsr #8
   17b50:	andeq	r7, r1, r8, lsr #8
   17b54:	andeq	r7, r1, r8, lsr #8
   17b58:	andeq	r7, r1, r8, lsr #8
   17b5c:			; <UNDEFINED> instruction: 0x000178b8
   17b60:	andeq	r6, r1, r4, asr lr
   17b64:	strdeq	r7, [r1], -r8
   17b68:			; <UNDEFINED> instruction: 0x000172b4
   17b6c:	andeq	r7, r1, ip, lsl #4
   17b70:	andeq	r6, r1, r8, ror #28
   17b74:	andeq	r6, r1, ip, ror lr
   17b78:	andeq	r7, r1, r8, lsr #8
   17b7c:	andeq	r7, r1, r8, lsr #8
   17b80:	andeq	r7, r1, r8, lsr #8
   17b84:	andeq	r7, r1, r8, lsr #8
   17b88:	andeq	r7, r1, r8, lsr #8
   17b8c:	andeq	r7, r1, r8, lsr #8
   17b90:	andeq	r7, r1, r8, lsr #8
   17b94:	andeq	r7, r1, r8, lsr #8
   17b98:	andeq	r7, r1, r8, lsr #8
   17b9c:	andeq	r7, r1, r8, lsr #8
   17ba0:	andeq	r7, r1, r8, lsr #8
   17ba4:	andeq	r7, r1, r8, lsr #8
   17ba8:	andeq	r7, r1, r8, lsr #8
   17bac:	andeq	r7, r1, r8, lsr #8
   17bb0:	andeq	r7, r1, r8, lsr #8
   17bb4:	andeq	r7, r1, r8, lsr #8
   17bb8:	andeq	r7, r1, r8, lsr #8
   17bbc:	andeq	r7, r1, r8, lsr #8
   17bc0:	andeq	r7, r1, ip, lsr r3
   17bc4:	andeq	r7, r1, r8, ror r3
   17bc8:	andeq	r7, r1, r8, ror r3
   17bcc:	andeq	r7, r1, r0, lsr r3
   17bd0:	andeq	r7, r1, r8, ror r3
   17bd4:	muleq	r1, ip, r8
   17bd8:	andeq	r7, r1, r8, ror r3
   17bdc:	andeq	r7, r1, r8, lsl #7
   17be0:	andeq	r7, r1, r8, ror r3
   17be4:	andeq	r7, r1, r8, ror r3
   17be8:	andeq	r7, r1, r8, ror r3
   17bec:	muleq	r1, ip, r8
   17bf0:	muleq	r1, ip, r8
   17bf4:	muleq	r1, ip, r8
   17bf8:	muleq	r1, ip, r8
   17bfc:	muleq	r1, ip, r8
   17c00:	muleq	r1, ip, r8
   17c04:	muleq	r1, ip, r8
   17c08:	muleq	r1, ip, r8
   17c0c:	muleq	r1, ip, r8
   17c10:	muleq	r1, ip, r8
   17c14:	muleq	r1, ip, r8
   17c18:	muleq	r1, ip, r8
   17c1c:	muleq	r1, ip, r8
   17c20:	muleq	r1, ip, r8
   17c24:	muleq	r1, ip, r8
   17c28:	muleq	r1, ip, r8
   17c2c:	andeq	r7, r1, r8, ror r3
   17c30:	andeq	r7, r1, r8, ror r3
   17c34:	andeq	r7, r1, r8, ror r3
   17c38:	andeq	r7, r1, r8, ror r3
   17c3c:	andeq	r6, r1, r8, ror #25
   17c40:	andeq	r7, r1, r8, lsr #8
   17c44:	muleq	r1, ip, r8
   17c48:	muleq	r1, ip, r8
   17c4c:	muleq	r1, ip, r8
   17c50:	muleq	r1, ip, r8
   17c54:	muleq	r1, ip, r8
   17c58:	muleq	r1, ip, r8
   17c5c:	muleq	r1, ip, r8
   17c60:	muleq	r1, ip, r8
   17c64:	muleq	r1, ip, r8
   17c68:	muleq	r1, ip, r8
   17c6c:	muleq	r1, ip, r8
   17c70:	muleq	r1, ip, r8
   17c74:	muleq	r1, ip, r8
   17c78:	muleq	r1, ip, r8
   17c7c:	muleq	r1, ip, r8
   17c80:	muleq	r1, ip, r8
   17c84:	muleq	r1, ip, r8
   17c88:	muleq	r1, ip, r8
   17c8c:	muleq	r1, ip, r8
   17c90:	muleq	r1, ip, r8
   17c94:	muleq	r1, ip, r8
   17c98:	muleq	r1, ip, r8
   17c9c:	muleq	r1, ip, r8
   17ca0:	muleq	r1, ip, r8
   17ca4:	muleq	r1, ip, r8
   17ca8:	muleq	r1, ip, r8
   17cac:	andeq	r7, r1, r8, ror r3
   17cb0:	andeq	r7, r1, r0, lsr #4
   17cb4:	muleq	r1, ip, r8
   17cb8:	andeq	r7, r1, r8, ror r3
   17cbc:	muleq	r1, ip, r8
   17cc0:	andeq	r7, r1, r8, ror r3
   17cc4:	muleq	r1, ip, r8
   17cc8:	muleq	r1, ip, r8
   17ccc:	muleq	r1, ip, r8
   17cd0:	muleq	r1, ip, r8
   17cd4:	muleq	r1, ip, r8
   17cd8:	muleq	r1, ip, r8
   17cdc:	muleq	r1, ip, r8
   17ce0:	muleq	r1, ip, r8
   17ce4:	muleq	r1, ip, r8
   17ce8:	muleq	r1, ip, r8
   17cec:	muleq	r1, ip, r8
   17cf0:	muleq	r1, ip, r8
   17cf4:	muleq	r1, ip, r8
   17cf8:	muleq	r1, ip, r8
   17cfc:	muleq	r1, ip, r8
   17d00:	muleq	r1, ip, r8
   17d04:	muleq	r1, ip, r8
   17d08:	muleq	r1, ip, r8
   17d0c:	muleq	r1, ip, r8
   17d10:	muleq	r1, ip, r8
   17d14:	muleq	r1, ip, r8
   17d18:	muleq	r1, ip, r8
   17d1c:	muleq	r1, ip, r8
   17d20:	muleq	r1, ip, r8
   17d24:	muleq	r1, ip, r8
   17d28:	muleq	r1, ip, r8
   17d2c:	andeq	r7, r1, r0, ror #5
   17d30:	andeq	r7, r1, r8, ror r3
   17d34:	andeq	r7, r1, r0, ror #5
   17d38:	andeq	r7, r1, r0, lsr r3
   17d3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17d40:	strd	r6, [sp, #8]
   17d44:	strd	r8, [sp, #16]
   17d48:	strd	sl, [sp, #24]
   17d4c:	str	lr, [sp, #32]
   17d50:	sub	sp, sp, #52	; 0x34
   17d54:	mov	r5, r0
   17d58:	str	r1, [sp, #24]
   17d5c:	str	r2, [sp, #28]
   17d60:	mov	r4, r3
   17d64:	bl	111ec <__errno_location@plt>
   17d68:	str	r0, [sp, #32]
   17d6c:	ldr	r3, [r0]
   17d70:	str	r3, [sp, #36]	; 0x24
   17d74:	movw	r3, #49468	; 0xc13c
   17d78:	movt	r3, #2
   17d7c:	ldr	r6, [r3]
   17d80:	cmn	r5, #-2147483647	; 0x80000001
   17d84:	movne	r3, #0
   17d88:	moveq	r3, #1
   17d8c:	orrs	r3, r3, r5, lsr #31
   17d90:	bne	17ef4 <__assert_fail@plt+0x6bc4>
   17d94:	movw	r3, #49468	; 0xc13c
   17d98:	movt	r3, #2
   17d9c:	ldr	r2, [r3, #4]
   17da0:	cmp	r2, r5
   17da4:	bgt	17e14 <__assert_fail@plt+0x6ae4>
   17da8:	str	r2, [sp, #44]	; 0x2c
   17dac:	add	r3, r3, #8
   17db0:	cmp	r6, r3
   17db4:	beq	17ef8 <__assert_fail@plt+0x6bc8>
   17db8:	sub	r2, r5, r2
   17dbc:	mov	r3, #8
   17dc0:	str	r3, [sp]
   17dc4:	mvn	r3, #-2147483648	; 0x80000000
   17dc8:	add	r2, r2, #1
   17dcc:	add	r1, sp, #44	; 0x2c
   17dd0:	mov	r0, r6
   17dd4:	bl	18fac <__assert_fail@plt+0x7c7c>
   17dd8:	mov	r6, r0
   17ddc:	movw	r3, #49468	; 0xc13c
   17de0:	movt	r3, #2
   17de4:	str	r0, [r3]
   17de8:	movw	r7, #49468	; 0xc13c
   17dec:	movt	r7, #2
   17df0:	ldr	r0, [r7, #4]
   17df4:	ldr	r2, [sp, #44]	; 0x2c
   17df8:	sub	r2, r2, r0
   17dfc:	lsl	r2, r2, #3
   17e00:	mov	r1, #0
   17e04:	add	r0, r6, r0, lsl #3
   17e08:	bl	11204 <memset@plt>
   17e0c:	ldr	r3, [sp, #44]	; 0x2c
   17e10:	str	r3, [r7, #4]
   17e14:	add	fp, r6, r5, lsl #3
   17e18:	ldr	r8, [r6, r5, lsl #3]
   17e1c:	ldr	r7, [fp, #4]
   17e20:	ldr	r3, [r4, #4]
   17e24:	orr	r9, r3, #1
   17e28:	add	sl, r4, #8
   17e2c:	ldr	r3, [r4, #44]	; 0x2c
   17e30:	str	r3, [sp, #16]
   17e34:	ldr	r3, [r4, #40]	; 0x28
   17e38:	str	r3, [sp, #12]
   17e3c:	str	sl, [sp, #8]
   17e40:	str	r9, [sp, #4]
   17e44:	ldr	r3, [r4]
   17e48:	str	r3, [sp]
   17e4c:	ldr	r3, [sp, #28]
   17e50:	ldr	r2, [sp, #24]
   17e54:	mov	r1, r8
   17e58:	mov	r0, r7
   17e5c:	bl	16644 <__assert_fail@plt+0x5314>
   17e60:	cmp	r8, r0
   17e64:	bhi	17ec8 <__assert_fail@plt+0x6b98>
   17e68:	add	r8, r0, #1
   17e6c:	str	r8, [r6, r5, lsl #3]
   17e70:	movw	r3, #49604	; 0xc1c4
   17e74:	movt	r3, #2
   17e78:	cmp	r7, r3
   17e7c:	beq	17e88 <__assert_fail@plt+0x6b58>
   17e80:	mov	r0, r7
   17e84:	bl	12ce4 <__assert_fail@plt+0x19b4>
   17e88:	mov	r0, r8
   17e8c:	bl	18da8 <__assert_fail@plt+0x7a78>
   17e90:	mov	r7, r0
   17e94:	str	r0, [fp, #4]
   17e98:	ldr	r3, [r4, #44]	; 0x2c
   17e9c:	str	r3, [sp, #16]
   17ea0:	ldr	r3, [r4, #40]	; 0x28
   17ea4:	str	r3, [sp, #12]
   17ea8:	str	sl, [sp, #8]
   17eac:	str	r9, [sp, #4]
   17eb0:	ldr	r3, [r4]
   17eb4:	str	r3, [sp]
   17eb8:	ldr	r3, [sp, #28]
   17ebc:	ldr	r2, [sp, #24]
   17ec0:	mov	r1, r8
   17ec4:	bl	16644 <__assert_fail@plt+0x5314>
   17ec8:	ldr	r3, [sp, #32]
   17ecc:	ldr	r2, [sp, #36]	; 0x24
   17ed0:	str	r2, [r3]
   17ed4:	mov	r0, r7
   17ed8:	add	sp, sp, #52	; 0x34
   17edc:	ldrd	r4, [sp]
   17ee0:	ldrd	r6, [sp, #8]
   17ee4:	ldrd	r8, [sp, #16]
   17ee8:	ldrd	sl, [sp, #24]
   17eec:	add	sp, sp, #32
   17ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ef4:	bl	112e8 <abort@plt>
   17ef8:	sub	r2, r5, r2
   17efc:	mov	r3, #8
   17f00:	str	r3, [sp]
   17f04:	mvn	r3, #-2147483648	; 0x80000000
   17f08:	add	r2, r2, #1
   17f0c:	add	r1, sp, #44	; 0x2c
   17f10:	mov	r0, #0
   17f14:	bl	18fac <__assert_fail@plt+0x7c7c>
   17f18:	mov	r6, r0
   17f1c:	movw	r3, #49468	; 0xc13c
   17f20:	movt	r3, #2
   17f24:	str	r0, [r3]
   17f28:	ldrd	r2, [r3, #8]
   17f2c:	strd	r2, [r0]
   17f30:	b	17de8 <__assert_fail@plt+0x6ab8>
   17f34:	strd	r4, [sp, #-16]!
   17f38:	str	r6, [sp, #8]
   17f3c:	str	lr, [sp, #12]
   17f40:	mov	r4, r0
   17f44:	bl	111ec <__errno_location@plt>
   17f48:	mov	r5, r0
   17f4c:	ldr	r6, [r0]
   17f50:	cmp	r4, #0
   17f54:	ldr	r3, [pc, #32]	; 17f7c <__assert_fail@plt+0x6c4c>
   17f58:	moveq	r4, r3
   17f5c:	mov	r1, #48	; 0x30
   17f60:	mov	r0, r4
   17f64:	bl	1911c <__assert_fail@plt+0x7dec>
   17f68:	str	r6, [r5]
   17f6c:	ldrd	r4, [sp]
   17f70:	ldr	r6, [sp, #8]
   17f74:	add	sp, sp, #12
   17f78:	pop	{pc}		; (ldr pc, [sp], #4)
   17f7c:	andeq	ip, r2, r4, asr #5
   17f80:	subs	r3, r0, #0
   17f84:	ldr	r2, [pc, #8]	; 17f94 <__assert_fail@plt+0x6c64>
   17f88:	moveq	r3, r2
   17f8c:	ldr	r0, [r3]
   17f90:	bx	lr
   17f94:	andeq	ip, r2, r4, asr #5
   17f98:	subs	r3, r0, #0
   17f9c:	ldr	r2, [pc, #8]	; 17fac <__assert_fail@plt+0x6c7c>
   17fa0:	moveq	r3, r2
   17fa4:	str	r1, [r3]
   17fa8:	bx	lr
   17fac:	andeq	ip, r2, r4, asr #5
   17fb0:	push	{lr}		; (str lr, [sp, #-4]!)
   17fb4:	subs	r3, r0, #0
   17fb8:	ldr	r0, [pc, #44]	; 17fec <__assert_fail@plt+0x6cbc>
   17fbc:	moveq	r3, r0
   17fc0:	add	r3, r3, #8
   17fc4:	lsr	lr, r1, #5
   17fc8:	and	r1, r1, #31
   17fcc:	ldr	ip, [r3, lr, lsl #2]
   17fd0:	lsr	r0, ip, r1
   17fd4:	eor	r2, r2, r0
   17fd8:	and	r2, r2, #1
   17fdc:	eor	r1, ip, r2, lsl r1
   17fe0:	str	r1, [r3, lr, lsl #2]
   17fe4:	and	r0, r0, #1
   17fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fec:	andeq	ip, r2, r4, asr #5
   17ff0:	subs	r3, r0, #0
   17ff4:	ldr	r2, [pc, #12]	; 18008 <__assert_fail@plt+0x6cd8>
   17ff8:	moveq	r3, r2
   17ffc:	ldr	r0, [r3, #4]
   18000:	str	r1, [r3, #4]
   18004:	bx	lr
   18008:	andeq	ip, r2, r4, asr #5
   1800c:	subs	r3, r0, #0
   18010:	ldr	r0, [pc, #44]	; 18044 <__assert_fail@plt+0x6d14>
   18014:	moveq	r3, r0
   18018:	mov	r0, #10
   1801c:	str	r0, [r3]
   18020:	cmp	r2, #0
   18024:	cmpne	r1, #0
   18028:	beq	18038 <__assert_fail@plt+0x6d08>
   1802c:	str	r1, [r3, #40]	; 0x28
   18030:	str	r2, [r3, #44]	; 0x2c
   18034:	bx	lr
   18038:	str	r4, [sp, #-8]!
   1803c:	str	lr, [sp, #4]
   18040:	bl	112e8 <abort@plt>
   18044:	andeq	ip, r2, r4, asr #5
   18048:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1804c:	strd	r6, [sp, #8]
   18050:	strd	r8, [sp, #16]
   18054:	str	sl, [sp, #24]
   18058:	str	lr, [sp, #28]
   1805c:	sub	sp, sp, #24
   18060:	mov	r7, r0
   18064:	mov	r8, r1
   18068:	mov	r9, r2
   1806c:	mov	sl, r3
   18070:	ldr	r4, [sp, #56]	; 0x38
   18074:	cmp	r4, #0
   18078:	ldr	r3, [pc, #104]	; 180e8 <__assert_fail@plt+0x6db8>
   1807c:	moveq	r4, r3
   18080:	bl	111ec <__errno_location@plt>
   18084:	mov	r5, r0
   18088:	ldr	r6, [r0]
   1808c:	ldr	r3, [r4, #44]	; 0x2c
   18090:	str	r3, [sp, #16]
   18094:	ldr	r3, [r4, #40]	; 0x28
   18098:	str	r3, [sp, #12]
   1809c:	add	r3, r4, #8
   180a0:	str	r3, [sp, #8]
   180a4:	ldr	r3, [r4, #4]
   180a8:	str	r3, [sp, #4]
   180ac:	ldr	r3, [r4]
   180b0:	str	r3, [sp]
   180b4:	mov	r3, sl
   180b8:	mov	r2, r9
   180bc:	mov	r1, r8
   180c0:	mov	r0, r7
   180c4:	bl	16644 <__assert_fail@plt+0x5314>
   180c8:	str	r6, [r5]
   180cc:	add	sp, sp, #24
   180d0:	ldrd	r4, [sp]
   180d4:	ldrd	r6, [sp, #8]
   180d8:	ldrd	r8, [sp, #16]
   180dc:	ldr	sl, [sp, #24]
   180e0:	add	sp, sp, #28
   180e4:	pop	{pc}		; (ldr pc, [sp], #4)
   180e8:	andeq	ip, r2, r4, asr #5
   180ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   180f0:	strd	r6, [sp, #8]
   180f4:	strd	r8, [sp, #16]
   180f8:	strd	sl, [sp, #24]
   180fc:	str	lr, [sp, #32]
   18100:	sub	sp, sp, #44	; 0x2c
   18104:	mov	r8, r0
   18108:	mov	sl, r1
   1810c:	mov	r6, r2
   18110:	subs	r4, r3, #0
   18114:	ldr	r3, [pc, #200]	; 181e4 <__assert_fail@plt+0x6eb4>
   18118:	moveq	r4, r3
   1811c:	bl	111ec <__errno_location@plt>
   18120:	mov	r7, r0
   18124:	ldr	fp, [r0]
   18128:	ldr	r5, [r4, #4]
   1812c:	cmp	r6, #0
   18130:	orreq	r5, r5, #1
   18134:	add	r9, r4, #8
   18138:	ldr	r3, [r4, #44]	; 0x2c
   1813c:	str	r3, [sp, #16]
   18140:	ldr	r3, [r4, #40]	; 0x28
   18144:	str	r3, [sp, #12]
   18148:	str	r9, [sp, #8]
   1814c:	str	r5, [sp, #4]
   18150:	ldr	r3, [r4]
   18154:	str	r3, [sp]
   18158:	str	sl, [sp, #36]	; 0x24
   1815c:	mov	r3, sl
   18160:	str	r8, [sp, #32]
   18164:	mov	r2, r8
   18168:	mov	r1, #0
   1816c:	mov	r0, r1
   18170:	bl	16644 <__assert_fail@plt+0x5314>
   18174:	mov	sl, r0
   18178:	add	r8, r0, #1
   1817c:	mov	r0, r8
   18180:	bl	18da8 <__assert_fail@plt+0x7a78>
   18184:	str	r0, [sp, #28]
   18188:	ldr	r3, [r4, #44]	; 0x2c
   1818c:	str	r3, [sp, #16]
   18190:	ldr	r3, [r4, #40]	; 0x28
   18194:	str	r3, [sp, #12]
   18198:	str	r9, [sp, #8]
   1819c:	str	r5, [sp, #4]
   181a0:	ldr	r3, [r4]
   181a4:	str	r3, [sp]
   181a8:	ldr	r3, [sp, #36]	; 0x24
   181ac:	ldr	r2, [sp, #32]
   181b0:	mov	r1, r8
   181b4:	bl	16644 <__assert_fail@plt+0x5314>
   181b8:	str	fp, [r7]
   181bc:	cmp	r6, #0
   181c0:	strne	sl, [r6]
   181c4:	ldr	r0, [sp, #28]
   181c8:	add	sp, sp, #44	; 0x2c
   181cc:	ldrd	r4, [sp]
   181d0:	ldrd	r6, [sp, #8]
   181d4:	ldrd	r8, [sp, #16]
   181d8:	ldrd	sl, [sp, #24]
   181dc:	add	sp, sp, #32
   181e0:	pop	{pc}		; (ldr pc, [sp], #4)
   181e4:	andeq	ip, r2, r4, asr #5
   181e8:	str	r4, [sp, #-8]!
   181ec:	str	lr, [sp, #4]
   181f0:	mov	r3, r2
   181f4:	mov	r2, #0
   181f8:	bl	180ec <__assert_fail@plt+0x6dbc>
   181fc:	ldr	r4, [sp]
   18200:	add	sp, sp, #4
   18204:	pop	{pc}		; (ldr pc, [sp], #4)
   18208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1820c:	strd	r6, [sp, #8]
   18210:	str	r8, [sp, #16]
   18214:	str	lr, [sp, #20]
   18218:	movw	r3, #49468	; 0xc13c
   1821c:	movt	r3, #2
   18220:	ldr	r7, [r3]
   18224:	ldr	r3, [r3, #4]
   18228:	cmp	r3, #1
   1822c:	ble	18258 <__assert_fail@plt+0x6f28>
   18230:	mov	r4, #1
   18234:	add	r6, r7, #4
   18238:	movw	r5, #49468	; 0xc13c
   1823c:	movt	r5, #2
   18240:	ldr	r0, [r6, r4, lsl #3]
   18244:	bl	12ce4 <__assert_fail@plt+0x19b4>
   18248:	add	r4, r4, #1
   1824c:	ldr	r3, [r5, #4]
   18250:	cmp	r3, r4
   18254:	bgt	18240 <__assert_fail@plt+0x6f10>
   18258:	ldr	r0, [r7, #4]
   1825c:	movw	r3, #49604	; 0xc1c4
   18260:	movt	r3, #2
   18264:	cmp	r0, r3
   18268:	beq	1828c <__assert_fail@plt+0x6f5c>
   1826c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   18270:	movw	r3, #49468	; 0xc13c
   18274:	movt	r3, #2
   18278:	mov	r2, #256	; 0x100
   1827c:	str	r2, [r3, #8]
   18280:	movw	r2, #49604	; 0xc1c4
   18284:	movt	r2, #2
   18288:	str	r2, [r3, #12]
   1828c:	ldr	r3, [pc, #64]	; 182d4 <__assert_fail@plt+0x6fa4>
   18290:	cmp	r7, r3
   18294:	beq	182b0 <__assert_fail@plt+0x6f80>
   18298:	mov	r0, r7
   1829c:	bl	12ce4 <__assert_fail@plt+0x19b4>
   182a0:	movw	r3, #49468	; 0xc13c
   182a4:	movt	r3, #2
   182a8:	add	r2, r3, #8
   182ac:	str	r2, [r3]
   182b0:	movw	r3, #49468	; 0xc13c
   182b4:	movt	r3, #2
   182b8:	mov	r2, #1
   182bc:	str	r2, [r3, #4]
   182c0:	ldrd	r4, [sp]
   182c4:	ldrd	r6, [sp, #8]
   182c8:	ldr	r8, [sp, #16]
   182cc:	add	sp, sp, #20
   182d0:	pop	{pc}		; (ldr pc, [sp], #4)
   182d4:	andeq	ip, r2, r4, asr #2
   182d8:	str	r4, [sp, #-8]!
   182dc:	str	lr, [sp, #4]
   182e0:	ldr	r3, [pc, #16]	; 182f8 <__assert_fail@plt+0x6fc8>
   182e4:	mvn	r2, #0
   182e8:	bl	17d3c <__assert_fail@plt+0x6a0c>
   182ec:	ldr	r4, [sp]
   182f0:	add	sp, sp, #4
   182f4:	pop	{pc}		; (ldr pc, [sp], #4)
   182f8:	andeq	ip, r2, r4, asr #5
   182fc:	str	r4, [sp, #-8]!
   18300:	str	lr, [sp, #4]
   18304:	ldr	r3, [pc, #12]	; 18318 <__assert_fail@plt+0x6fe8>
   18308:	bl	17d3c <__assert_fail@plt+0x6a0c>
   1830c:	ldr	r4, [sp]
   18310:	add	sp, sp, #4
   18314:	pop	{pc}		; (ldr pc, [sp], #4)
   18318:	andeq	ip, r2, r4, asr #5
   1831c:	str	r4, [sp, #-8]!
   18320:	str	lr, [sp, #4]
   18324:	mov	r1, r0
   18328:	mov	r0, #0
   1832c:	bl	182d8 <__assert_fail@plt+0x6fa8>
   18330:	ldr	r4, [sp]
   18334:	add	sp, sp, #4
   18338:	pop	{pc}		; (ldr pc, [sp], #4)
   1833c:	str	r4, [sp, #-8]!
   18340:	str	lr, [sp, #4]
   18344:	mov	r2, r1
   18348:	mov	r1, r0
   1834c:	mov	r0, #0
   18350:	bl	182fc <__assert_fail@plt+0x6fcc>
   18354:	ldr	r4, [sp]
   18358:	add	sp, sp, #4
   1835c:	pop	{pc}		; (ldr pc, [sp], #4)
   18360:	strd	r4, [sp, #-12]!
   18364:	str	lr, [sp, #8]
   18368:	sub	sp, sp, #52	; 0x34
   1836c:	mov	r4, r0
   18370:	mov	r5, r2
   18374:	mov	r0, sp
   18378:	bl	164b0 <__assert_fail@plt+0x5180>
   1837c:	mov	r3, sp
   18380:	mvn	r2, #0
   18384:	mov	r1, r5
   18388:	mov	r0, r4
   1838c:	bl	17d3c <__assert_fail@plt+0x6a0c>
   18390:	add	sp, sp, #52	; 0x34
   18394:	ldrd	r4, [sp]
   18398:	add	sp, sp, #8
   1839c:	pop	{pc}		; (ldr pc, [sp], #4)
   183a0:	strd	r4, [sp, #-16]!
   183a4:	str	r6, [sp, #8]
   183a8:	str	lr, [sp, #12]
   183ac:	sub	sp, sp, #48	; 0x30
   183b0:	mov	r4, r0
   183b4:	mov	r5, r2
   183b8:	mov	r6, r3
   183bc:	mov	r0, sp
   183c0:	bl	164b0 <__assert_fail@plt+0x5180>
   183c4:	mov	r3, sp
   183c8:	mov	r2, r6
   183cc:	mov	r1, r5
   183d0:	mov	r0, r4
   183d4:	bl	17d3c <__assert_fail@plt+0x6a0c>
   183d8:	add	sp, sp, #48	; 0x30
   183dc:	ldrd	r4, [sp]
   183e0:	ldr	r6, [sp, #8]
   183e4:	add	sp, sp, #12
   183e8:	pop	{pc}		; (ldr pc, [sp], #4)
   183ec:	str	r4, [sp, #-8]!
   183f0:	str	lr, [sp, #4]
   183f4:	mov	r2, r1
   183f8:	mov	r1, r0
   183fc:	mov	r0, #0
   18400:	bl	18360 <__assert_fail@plt+0x7030>
   18404:	ldr	r4, [sp]
   18408:	add	sp, sp, #4
   1840c:	pop	{pc}		; (ldr pc, [sp], #4)
   18410:	str	r4, [sp, #-8]!
   18414:	str	lr, [sp, #4]
   18418:	mov	r3, r2
   1841c:	mov	r2, r1
   18420:	mov	r1, r0
   18424:	mov	r0, #0
   18428:	bl	183a0 <__assert_fail@plt+0x7070>
   1842c:	ldr	r4, [sp]
   18430:	add	sp, sp, #4
   18434:	pop	{pc}		; (ldr pc, [sp], #4)
   18438:	strd	r4, [sp, #-12]!
   1843c:	str	lr, [sp, #8]
   18440:	sub	sp, sp, #52	; 0x34
   18444:	mov	r4, r0
   18448:	mov	r5, r1
   1844c:	mov	r1, r2
   18450:	ldr	r0, [pc, #92]	; 184b4 <__assert_fail@plt+0x7184>
   18454:	ldrd	r2, [r0]
   18458:	strd	r2, [sp]
   1845c:	ldrd	r2, [r0, #8]
   18460:	strd	r2, [sp, #8]
   18464:	ldrd	r2, [r0, #16]
   18468:	strd	r2, [sp, #16]
   1846c:	ldrd	r2, [r0, #24]
   18470:	strd	r2, [sp, #24]
   18474:	ldrd	r2, [r0, #32]
   18478:	strd	r2, [sp, #32]
   1847c:	ldrd	r2, [r0, #40]	; 0x28
   18480:	strd	r2, [sp, #40]	; 0x28
   18484:	mov	r2, #1
   18488:	mov	r0, sp
   1848c:	bl	17fb0 <__assert_fail@plt+0x6c80>
   18490:	mov	r3, sp
   18494:	mov	r2, r5
   18498:	mov	r1, r4
   1849c:	mov	r0, #0
   184a0:	bl	17d3c <__assert_fail@plt+0x6a0c>
   184a4:	add	sp, sp, #52	; 0x34
   184a8:	ldrd	r4, [sp]
   184ac:	add	sp, sp, #8
   184b0:	pop	{pc}		; (ldr pc, [sp], #4)
   184b4:	andeq	ip, r2, r4, asr #5
   184b8:	str	r4, [sp, #-8]!
   184bc:	str	lr, [sp, #4]
   184c0:	mov	r2, r1
   184c4:	mvn	r1, #0
   184c8:	bl	18438 <__assert_fail@plt+0x7108>
   184cc:	ldr	r4, [sp]
   184d0:	add	sp, sp, #4
   184d4:	pop	{pc}		; (ldr pc, [sp], #4)
   184d8:	str	r4, [sp, #-8]!
   184dc:	str	lr, [sp, #4]
   184e0:	mov	r1, #58	; 0x3a
   184e4:	bl	184b8 <__assert_fail@plt+0x7188>
   184e8:	ldr	r4, [sp]
   184ec:	add	sp, sp, #4
   184f0:	pop	{pc}		; (ldr pc, [sp], #4)
   184f4:	str	r4, [sp, #-8]!
   184f8:	str	lr, [sp, #4]
   184fc:	mov	r2, #58	; 0x3a
   18500:	bl	18438 <__assert_fail@plt+0x7108>
   18504:	ldr	r4, [sp]
   18508:	add	sp, sp, #4
   1850c:	pop	{pc}		; (ldr pc, [sp], #4)
   18510:	strd	r4, [sp, #-12]!
   18514:	str	lr, [sp, #8]
   18518:	sub	sp, sp, #100	; 0x64
   1851c:	mov	r4, r0
   18520:	mov	r5, r2
   18524:	mov	r0, sp
   18528:	bl	164b0 <__assert_fail@plt+0x5180>
   1852c:	ldrd	r2, [sp]
   18530:	strd	r2, [sp, #48]	; 0x30
   18534:	ldrd	r2, [sp, #8]
   18538:	strd	r2, [sp, #56]	; 0x38
   1853c:	ldrd	r2, [sp, #16]
   18540:	strd	r2, [sp, #64]	; 0x40
   18544:	ldrd	r2, [sp, #24]
   18548:	strd	r2, [sp, #72]	; 0x48
   1854c:	ldrd	r2, [sp, #32]
   18550:	strd	r2, [sp, #80]	; 0x50
   18554:	ldrd	r2, [sp, #40]	; 0x28
   18558:	strd	r2, [sp, #88]	; 0x58
   1855c:	mov	r2, #1
   18560:	mov	r1, #58	; 0x3a
   18564:	add	r0, sp, #48	; 0x30
   18568:	bl	17fb0 <__assert_fail@plt+0x6c80>
   1856c:	add	r3, sp, #48	; 0x30
   18570:	mvn	r2, #0
   18574:	mov	r1, r5
   18578:	mov	r0, r4
   1857c:	bl	17d3c <__assert_fail@plt+0x6a0c>
   18580:	add	sp, sp, #100	; 0x64
   18584:	ldrd	r4, [sp]
   18588:	add	sp, sp, #8
   1858c:	pop	{pc}		; (ldr pc, [sp], #4)
   18590:	strd	r4, [sp, #-20]!	; 0xffffffec
   18594:	strd	r6, [sp, #8]
   18598:	str	lr, [sp, #16]
   1859c:	sub	sp, sp, #52	; 0x34
   185a0:	mov	r4, r0
   185a4:	mov	r5, r3
   185a8:	ldr	r3, [pc, #92]	; 1860c <__assert_fail@plt+0x72dc>
   185ac:	ldrd	r6, [r3]
   185b0:	strd	r6, [sp]
   185b4:	ldrd	r6, [r3, #8]
   185b8:	strd	r6, [sp, #8]
   185bc:	ldrd	r6, [r3, #16]
   185c0:	strd	r6, [sp, #16]
   185c4:	ldrd	r6, [r3, #24]
   185c8:	strd	r6, [sp, #24]
   185cc:	ldrd	r6, [r3, #32]
   185d0:	strd	r6, [sp, #32]
   185d4:	ldrd	r6, [r3, #40]	; 0x28
   185d8:	strd	r6, [sp, #40]	; 0x28
   185dc:	mov	r0, sp
   185e0:	bl	1800c <__assert_fail@plt+0x6cdc>
   185e4:	mov	r3, sp
   185e8:	ldr	r2, [sp, #72]	; 0x48
   185ec:	mov	r1, r5
   185f0:	mov	r0, r4
   185f4:	bl	17d3c <__assert_fail@plt+0x6a0c>
   185f8:	add	sp, sp, #52	; 0x34
   185fc:	ldrd	r4, [sp]
   18600:	ldrd	r6, [sp, #8]
   18604:	add	sp, sp, #16
   18608:	pop	{pc}		; (ldr pc, [sp], #4)
   1860c:	andeq	ip, r2, r4, asr #5
   18610:	push	{lr}		; (str lr, [sp, #-4]!)
   18614:	sub	sp, sp, #12
   18618:	mvn	ip, #0
   1861c:	str	ip, [sp]
   18620:	bl	18590 <__assert_fail@plt+0x7260>
   18624:	add	sp, sp, #12
   18628:	pop	{pc}		; (ldr pc, [sp], #4)
   1862c:	str	r4, [sp, #-8]!
   18630:	str	lr, [sp, #4]
   18634:	mov	r3, r2
   18638:	mov	r2, r1
   1863c:	mov	r1, r0
   18640:	mov	r0, #0
   18644:	bl	18610 <__assert_fail@plt+0x72e0>
   18648:	ldr	r4, [sp]
   1864c:	add	sp, sp, #4
   18650:	pop	{pc}		; (ldr pc, [sp], #4)
   18654:	push	{lr}		; (str lr, [sp, #-4]!)
   18658:	sub	sp, sp, #12
   1865c:	str	r3, [sp]
   18660:	mov	r3, r2
   18664:	mov	r2, r1
   18668:	mov	r1, r0
   1866c:	mov	r0, #0
   18670:	bl	18590 <__assert_fail@plt+0x7260>
   18674:	add	sp, sp, #12
   18678:	pop	{pc}		; (ldr pc, [sp], #4)
   1867c:	str	r4, [sp, #-8]!
   18680:	str	lr, [sp, #4]
   18684:	ldr	r3, [pc, #12]	; 18698 <__assert_fail@plt+0x7368>
   18688:	bl	17d3c <__assert_fail@plt+0x6a0c>
   1868c:	ldr	r4, [sp]
   18690:	add	sp, sp, #4
   18694:	pop	{pc}		; (ldr pc, [sp], #4)
   18698:	andeq	ip, r2, ip, asr #2
   1869c:	str	r4, [sp, #-8]!
   186a0:	str	lr, [sp, #4]
   186a4:	mov	r2, r1
   186a8:	mov	r1, r0
   186ac:	mov	r0, #0
   186b0:	bl	1867c <__assert_fail@plt+0x734c>
   186b4:	ldr	r4, [sp]
   186b8:	add	sp, sp, #4
   186bc:	pop	{pc}		; (ldr pc, [sp], #4)
   186c0:	str	r4, [sp, #-8]!
   186c4:	str	lr, [sp, #4]
   186c8:	mvn	r2, #0
   186cc:	bl	1867c <__assert_fail@plt+0x734c>
   186d0:	ldr	r4, [sp]
   186d4:	add	sp, sp, #4
   186d8:	pop	{pc}		; (ldr pc, [sp], #4)
   186dc:	str	r4, [sp, #-8]!
   186e0:	str	lr, [sp, #4]
   186e4:	mov	r1, r0
   186e8:	mov	r0, #0
   186ec:	bl	186c0 <__assert_fail@plt+0x7390>
   186f0:	ldr	r4, [sp]
   186f4:	add	sp, sp, #4
   186f8:	pop	{pc}		; (ldr pc, [sp], #4)
   186fc:	str	r4, [sp, #-8]!
   18700:	str	lr, [sp, #4]
   18704:	sub	sp, sp, #104	; 0x68
   18708:	mov	r4, r0
   1870c:	mov	r2, sp
   18710:	movw	r1, #44664	; 0xae78
   18714:	movt	r1, #1
   18718:	mov	r0, #3
   1871c:	bl	11300 <__lxstat64@plt>
   18720:	cmp	r0, #0
   18724:	movne	r0, #0
   18728:	bne	18740 <__assert_fail@plt+0x7410>
   1872c:	ldrd	r2, [sp, #96]	; 0x60
   18730:	strd	r2, [r4]
   18734:	ldrd	r2, [sp]
   18738:	strd	r2, [r4, #8]
   1873c:	mov	r0, r4
   18740:	add	sp, sp, #104	; 0x68
   18744:	ldr	r4, [sp]
   18748:	add	sp, sp, #4
   1874c:	pop	{pc}		; (ldr pc, [sp], #4)
   18750:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18754:	strd	r6, [sp, #8]
   18758:	str	r8, [sp, #16]
   1875c:	str	lr, [sp, #20]
   18760:	mov	r4, r0
   18764:	cmp	r0, #2
   18768:	bls	18784 <__assert_fail@plt+0x7454>
   1876c:	mov	r0, r4
   18770:	ldrd	r4, [sp]
   18774:	ldrd	r6, [sp, #8]
   18778:	ldr	r8, [sp, #16]
   1877c:	add	sp, sp, #20
   18780:	pop	{pc}		; (ldr pc, [sp], #4)
   18784:	bl	1a164 <__assert_fail@plt+0x8e34>
   18788:	mov	r6, r0
   1878c:	bl	111ec <__errno_location@plt>
   18790:	mov	r5, r0
   18794:	ldr	r7, [r0]
   18798:	mov	r0, r4
   1879c:	bl	112f4 <close@plt>
   187a0:	str	r7, [r5]
   187a4:	mov	r4, r6
   187a8:	b	1876c <__assert_fail@plt+0x743c>
   187ac:	strd	r4, [sp, #-16]!
   187b0:	str	r6, [sp, #8]
   187b4:	str	lr, [sp, #12]
   187b8:	sub	sp, sp, #32
   187bc:	mov	r4, r0
   187c0:	ldr	r5, [sp, #48]	; 0x30
   187c4:	ldr	r6, [sp, #52]	; 0x34
   187c8:	cmp	r1, #0
   187cc:	beq	18898 <__assert_fail@plt+0x7568>
   187d0:	str	r3, [sp, #4]
   187d4:	str	r2, [sp]
   187d8:	mov	r3, r1
   187dc:	movw	r2, #46332	; 0xb4fc
   187e0:	movt	r2, #1
   187e4:	mov	r1, #1
   187e8:	bl	11228 <__fprintf_chk@plt>
   187ec:	mov	r2, #5
   187f0:	movw	r1, #46352	; 0xb510
   187f4:	movt	r1, #1
   187f8:	mov	r0, #0
   187fc:	bl	110c0 <dcgettext@plt>
   18800:	movw	r3, #2022	; 0x7e6
   18804:	str	r3, [sp]
   18808:	mov	r3, r0
   1880c:	movw	r2, #47080	; 0xb7e8
   18810:	movt	r2, #1
   18814:	mov	r1, #1
   18818:	mov	r0, r4
   1881c:	bl	11228 <__fprintf_chk@plt>
   18820:	mov	r1, r4
   18824:	mov	r0, #10
   18828:	bl	110b4 <fputc_unlocked@plt>
   1882c:	mov	r2, #5
   18830:	movw	r1, #46356	; 0xb514
   18834:	movt	r1, #1
   18838:	mov	r0, #0
   1883c:	bl	110c0 <dcgettext@plt>
   18840:	movw	r3, #46528	; 0xb5c0
   18844:	movt	r3, #1
   18848:	mov	r2, r0
   1884c:	mov	r1, #1
   18850:	mov	r0, r4
   18854:	bl	11228 <__fprintf_chk@plt>
   18858:	mov	r1, r4
   1885c:	mov	r0, #10
   18860:	bl	110b4 <fputc_unlocked@plt>
   18864:	cmp	r6, #9
   18868:	ldrls	pc, [pc, r6, lsl #2]
   1886c:	b	18b70 <__assert_fail@plt+0x7840>
   18870:	ldrdeq	r8, [r1], -ip
   18874:			; <UNDEFINED> instruction: 0x000188b4
   18878:	strdeq	r8, [r1], -r0
   1887c:	andeq	r8, r1, r4, lsr #18
   18880:	andeq	r8, r1, r0, ror #18
   18884:	andeq	r8, r1, r4, lsr #19
   18888:	strdeq	r8, [r1], -r0
   1888c:	andeq	r8, r1, r4, asr #20
   18890:	andeq	r8, r1, r0, lsr #21
   18894:	andeq	r8, r1, r4, lsl #22
   18898:	str	r3, [sp]
   1889c:	mov	r3, r2
   188a0:	movw	r2, #46344	; 0xb508
   188a4:	movt	r2, #1
   188a8:	mov	r1, #1
   188ac:	bl	11228 <__fprintf_chk@plt>
   188b0:	b	187ec <__assert_fail@plt+0x74bc>
   188b4:	mov	r2, #5
   188b8:	movw	r1, #46564	; 0xb5e4
   188bc:	movt	r1, #1
   188c0:	mov	r0, #0
   188c4:	bl	110c0 <dcgettext@plt>
   188c8:	ldr	r3, [r5]
   188cc:	mov	r2, r0
   188d0:	mov	r1, #1
   188d4:	mov	r0, r4
   188d8:	bl	11228 <__fprintf_chk@plt>
   188dc:	add	sp, sp, #32
   188e0:	ldrd	r4, [sp]
   188e4:	ldr	r6, [sp, #8]
   188e8:	add	sp, sp, #12
   188ec:	pop	{pc}		; (ldr pc, [sp], #4)
   188f0:	mov	r2, #5
   188f4:	movw	r1, #46580	; 0xb5f4
   188f8:	movt	r1, #1
   188fc:	mov	r0, #0
   18900:	bl	110c0 <dcgettext@plt>
   18904:	ldr	r3, [r5, #4]
   18908:	str	r3, [sp]
   1890c:	ldr	r3, [r5]
   18910:	mov	r2, r0
   18914:	mov	r1, #1
   18918:	mov	r0, r4
   1891c:	bl	11228 <__fprintf_chk@plt>
   18920:	b	188dc <__assert_fail@plt+0x75ac>
   18924:	mov	r2, #5
   18928:	movw	r1, #46604	; 0xb60c
   1892c:	movt	r1, #1
   18930:	mov	r0, #0
   18934:	bl	110c0 <dcgettext@plt>
   18938:	ldr	r3, [r5, #8]
   1893c:	str	r3, [sp, #4]
   18940:	ldr	r3, [r5, #4]
   18944:	str	r3, [sp]
   18948:	ldr	r3, [r5]
   1894c:	mov	r2, r0
   18950:	mov	r1, #1
   18954:	mov	r0, r4
   18958:	bl	11228 <__fprintf_chk@plt>
   1895c:	b	188dc <__assert_fail@plt+0x75ac>
   18960:	mov	r2, #5
   18964:	movw	r1, #46632	; 0xb628
   18968:	movt	r1, #1
   1896c:	mov	r0, #0
   18970:	bl	110c0 <dcgettext@plt>
   18974:	ldr	r3, [r5, #12]
   18978:	str	r3, [sp, #8]
   1897c:	ldr	r3, [r5, #8]
   18980:	str	r3, [sp, #4]
   18984:	ldr	r3, [r5, #4]
   18988:	str	r3, [sp]
   1898c:	ldr	r3, [r5]
   18990:	mov	r2, r0
   18994:	mov	r1, #1
   18998:	mov	r0, r4
   1899c:	bl	11228 <__fprintf_chk@plt>
   189a0:	b	188dc <__assert_fail@plt+0x75ac>
   189a4:	mov	r2, #5
   189a8:	movw	r1, #46664	; 0xb648
   189ac:	movt	r1, #1
   189b0:	mov	r0, #0
   189b4:	bl	110c0 <dcgettext@plt>
   189b8:	ldr	r3, [r5, #16]
   189bc:	str	r3, [sp, #12]
   189c0:	ldr	r3, [r5, #12]
   189c4:	str	r3, [sp, #8]
   189c8:	ldr	r3, [r5, #8]
   189cc:	str	r3, [sp, #4]
   189d0:	ldr	r3, [r5, #4]
   189d4:	str	r3, [sp]
   189d8:	ldr	r3, [r5]
   189dc:	mov	r2, r0
   189e0:	mov	r1, #1
   189e4:	mov	r0, r4
   189e8:	bl	11228 <__fprintf_chk@plt>
   189ec:	b	188dc <__assert_fail@plt+0x75ac>
   189f0:	mov	r2, #5
   189f4:	movw	r1, #46700	; 0xb66c
   189f8:	movt	r1, #1
   189fc:	mov	r0, #0
   18a00:	bl	110c0 <dcgettext@plt>
   18a04:	ldr	r3, [r5, #20]
   18a08:	str	r3, [sp, #16]
   18a0c:	ldr	r3, [r5, #16]
   18a10:	str	r3, [sp, #12]
   18a14:	ldr	r3, [r5, #12]
   18a18:	str	r3, [sp, #8]
   18a1c:	ldr	r3, [r5, #8]
   18a20:	str	r3, [sp, #4]
   18a24:	ldr	r3, [r5, #4]
   18a28:	str	r3, [sp]
   18a2c:	ldr	r3, [r5]
   18a30:	mov	r2, r0
   18a34:	mov	r1, #1
   18a38:	mov	r0, r4
   18a3c:	bl	11228 <__fprintf_chk@plt>
   18a40:	b	188dc <__assert_fail@plt+0x75ac>
   18a44:	mov	r2, #5
   18a48:	movw	r1, #46740	; 0xb694
   18a4c:	movt	r1, #1
   18a50:	mov	r0, #0
   18a54:	bl	110c0 <dcgettext@plt>
   18a58:	ldr	r3, [r5, #24]
   18a5c:	str	r3, [sp, #20]
   18a60:	ldr	r3, [r5, #20]
   18a64:	str	r3, [sp, #16]
   18a68:	ldr	r3, [r5, #16]
   18a6c:	str	r3, [sp, #12]
   18a70:	ldr	r3, [r5, #12]
   18a74:	str	r3, [sp, #8]
   18a78:	ldr	r3, [r5, #8]
   18a7c:	str	r3, [sp, #4]
   18a80:	ldr	r3, [r5, #4]
   18a84:	str	r3, [sp]
   18a88:	ldr	r3, [r5]
   18a8c:	mov	r2, r0
   18a90:	mov	r1, #1
   18a94:	mov	r0, r4
   18a98:	bl	11228 <__fprintf_chk@plt>
   18a9c:	b	188dc <__assert_fail@plt+0x75ac>
   18aa0:	mov	r2, #5
   18aa4:	movw	r1, #46784	; 0xb6c0
   18aa8:	movt	r1, #1
   18aac:	mov	r0, #0
   18ab0:	bl	110c0 <dcgettext@plt>
   18ab4:	ldr	r3, [r5, #28]
   18ab8:	str	r3, [sp, #24]
   18abc:	ldr	r3, [r5, #24]
   18ac0:	str	r3, [sp, #20]
   18ac4:	ldr	r3, [r5, #20]
   18ac8:	str	r3, [sp, #16]
   18acc:	ldr	r3, [r5, #16]
   18ad0:	str	r3, [sp, #12]
   18ad4:	ldr	r3, [r5, #12]
   18ad8:	str	r3, [sp, #8]
   18adc:	ldr	r3, [r5, #8]
   18ae0:	str	r3, [sp, #4]
   18ae4:	ldr	r3, [r5, #4]
   18ae8:	str	r3, [sp]
   18aec:	ldr	r3, [r5]
   18af0:	mov	r2, r0
   18af4:	mov	r1, #1
   18af8:	mov	r0, r4
   18afc:	bl	11228 <__fprintf_chk@plt>
   18b00:	b	188dc <__assert_fail@plt+0x75ac>
   18b04:	mov	r2, #5
   18b08:	movw	r1, #46832	; 0xb6f0
   18b0c:	movt	r1, #1
   18b10:	mov	r0, #0
   18b14:	bl	110c0 <dcgettext@plt>
   18b18:	ldr	r3, [r5, #32]
   18b1c:	str	r3, [sp, #28]
   18b20:	ldr	r3, [r5, #28]
   18b24:	str	r3, [sp, #24]
   18b28:	ldr	r3, [r5, #24]
   18b2c:	str	r3, [sp, #20]
   18b30:	ldr	r3, [r5, #20]
   18b34:	str	r3, [sp, #16]
   18b38:	ldr	r3, [r5, #16]
   18b3c:	str	r3, [sp, #12]
   18b40:	ldr	r3, [r5, #12]
   18b44:	str	r3, [sp, #8]
   18b48:	ldr	r3, [r5, #8]
   18b4c:	str	r3, [sp, #4]
   18b50:	ldr	r3, [r5, #4]
   18b54:	str	r3, [sp]
   18b58:	ldr	r3, [r5]
   18b5c:	mov	r2, r0
   18b60:	mov	r1, #1
   18b64:	mov	r0, r4
   18b68:	bl	11228 <__fprintf_chk@plt>
   18b6c:	b	188dc <__assert_fail@plt+0x75ac>
   18b70:	mov	r2, #5
   18b74:	movw	r1, #46884	; 0xb724
   18b78:	movt	r1, #1
   18b7c:	mov	r0, #0
   18b80:	bl	110c0 <dcgettext@plt>
   18b84:	ldr	r3, [r5, #32]
   18b88:	str	r3, [sp, #28]
   18b8c:	ldr	r3, [r5, #28]
   18b90:	str	r3, [sp, #24]
   18b94:	ldr	r3, [r5, #24]
   18b98:	str	r3, [sp, #20]
   18b9c:	ldr	r3, [r5, #20]
   18ba0:	str	r3, [sp, #16]
   18ba4:	ldr	r3, [r5, #16]
   18ba8:	str	r3, [sp, #12]
   18bac:	ldr	r3, [r5, #12]
   18bb0:	str	r3, [sp, #8]
   18bb4:	ldr	r3, [r5, #8]
   18bb8:	str	r3, [sp, #4]
   18bbc:	ldr	r3, [r5, #4]
   18bc0:	str	r3, [sp]
   18bc4:	ldr	r3, [r5]
   18bc8:	mov	r2, r0
   18bcc:	mov	r1, #1
   18bd0:	mov	r0, r4
   18bd4:	bl	11228 <__fprintf_chk@plt>
   18bd8:	b	188dc <__assert_fail@plt+0x75ac>
   18bdc:	strd	r4, [sp, #-12]!
   18be0:	str	lr, [sp, #8]
   18be4:	sub	sp, sp, #12
   18be8:	ldr	r5, [sp, #24]
   18bec:	ldr	ip, [r5]
   18bf0:	cmp	ip, #0
   18bf4:	beq	18c2c <__assert_fail@plt+0x78fc>
   18bf8:	mov	lr, r5
   18bfc:	mov	ip, #0
   18c00:	add	ip, ip, #1
   18c04:	ldr	r4, [lr, #4]!
   18c08:	cmp	r4, #0
   18c0c:	bne	18c00 <__assert_fail@plt+0x78d0>
   18c10:	str	ip, [sp, #4]
   18c14:	str	r5, [sp]
   18c18:	bl	187ac <__assert_fail@plt+0x747c>
   18c1c:	add	sp, sp, #12
   18c20:	ldrd	r4, [sp]
   18c24:	add	sp, sp, #8
   18c28:	pop	{pc}		; (ldr pc, [sp], #4)
   18c2c:	mov	ip, #0
   18c30:	b	18c10 <__assert_fail@plt+0x78e0>
   18c34:	strd	r4, [sp, #-12]!
   18c38:	str	lr, [sp, #8]
   18c3c:	sub	sp, sp, #52	; 0x34
   18c40:	ldr	r5, [sp, #64]	; 0x40
   18c44:	add	r4, sp, #8
   18c48:	mov	ip, #0
   18c4c:	ldr	lr, [r5], #4
   18c50:	str	lr, [r4], #4
   18c54:	cmp	lr, #0
   18c58:	beq	18c68 <__assert_fail@plt+0x7938>
   18c5c:	add	ip, ip, #1
   18c60:	cmp	ip, #10
   18c64:	bne	18c4c <__assert_fail@plt+0x791c>
   18c68:	str	ip, [sp, #4]
   18c6c:	add	ip, sp, #8
   18c70:	str	ip, [sp]
   18c74:	bl	187ac <__assert_fail@plt+0x747c>
   18c78:	add	sp, sp, #52	; 0x34
   18c7c:	ldrd	r4, [sp]
   18c80:	add	sp, sp, #8
   18c84:	pop	{pc}		; (ldr pc, [sp], #4)
   18c88:	push	{r3}		; (str r3, [sp, #-4]!)
   18c8c:	push	{lr}		; (str lr, [sp, #-4]!)
   18c90:	sub	sp, sp, #16
   18c94:	add	r3, sp, #24
   18c98:	str	r3, [sp, #12]
   18c9c:	str	r3, [sp]
   18ca0:	ldr	r3, [sp, #20]
   18ca4:	bl	18c34 <__assert_fail@plt+0x7904>
   18ca8:	add	sp, sp, #16
   18cac:	pop	{lr}		; (ldr lr, [sp], #4)
   18cb0:	add	sp, sp, #4
   18cb4:	bx	lr
   18cb8:	str	r4, [sp, #-8]!
   18cbc:	str	lr, [sp, #4]
   18cc0:	movw	r3, #49556	; 0xc194
   18cc4:	movt	r3, #2
   18cc8:	ldr	r1, [r3]
   18ccc:	mov	r0, #10
   18cd0:	bl	110b4 <fputc_unlocked@plt>
   18cd4:	mov	r2, #5
   18cd8:	movw	r1, #46944	; 0xb760
   18cdc:	movt	r1, #1
   18ce0:	mov	r0, #0
   18ce4:	bl	110c0 <dcgettext@plt>
   18ce8:	movw	r2, #46964	; 0xb774
   18cec:	movt	r2, #1
   18cf0:	mov	r1, r0
   18cf4:	mov	r0, #1
   18cf8:	bl	11210 <__printf_chk@plt>
   18cfc:	mov	r2, #5
   18d00:	movw	r1, #46988	; 0xb78c
   18d04:	movt	r1, #1
   18d08:	mov	r0, #0
   18d0c:	bl	110c0 <dcgettext@plt>
   18d10:	movw	r3, #44244	; 0xacd4
   18d14:	movt	r3, #1
   18d18:	movw	r2, #44284	; 0xacfc
   18d1c:	movt	r2, #1
   18d20:	mov	r1, r0
   18d24:	mov	r0, #1
   18d28:	bl	11210 <__printf_chk@plt>
   18d2c:	mov	r2, #5
   18d30:	movw	r1, #47008	; 0xb7a0
   18d34:	movt	r1, #1
   18d38:	mov	r0, #0
   18d3c:	bl	110c0 <dcgettext@plt>
   18d40:	movw	r2, #47048	; 0xb7c8
   18d44:	movt	r2, #1
   18d48:	mov	r1, r0
   18d4c:	mov	r0, #1
   18d50:	bl	11210 <__printf_chk@plt>
   18d54:	ldr	r4, [sp]
   18d58:	add	sp, sp, #4
   18d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d60:	str	r4, [sp, #-8]!
   18d64:	str	lr, [sp, #4]
   18d68:	bl	199b0 <__assert_fail@plt+0x8680>
   18d6c:	cmp	r0, #0
   18d70:	beq	18d80 <__assert_fail@plt+0x7a50>
   18d74:	ldr	r4, [sp]
   18d78:	add	sp, sp, #4
   18d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d80:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18d84:	str	r4, [sp, #-8]!
   18d88:	str	lr, [sp, #4]
   18d8c:	bl	199b0 <__assert_fail@plt+0x8680>
   18d90:	cmp	r0, #0
   18d94:	beq	18da4 <__assert_fail@plt+0x7a74>
   18d98:	ldr	r4, [sp]
   18d9c:	add	sp, sp, #4
   18da0:	pop	{pc}		; (ldr pc, [sp], #4)
   18da4:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18da8:	str	r4, [sp, #-8]!
   18dac:	str	lr, [sp, #4]
   18db0:	bl	18d60 <__assert_fail@plt+0x7a30>
   18db4:	ldr	r4, [sp]
   18db8:	add	sp, sp, #4
   18dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   18dc0:	strd	r4, [sp, #-16]!
   18dc4:	str	r6, [sp, #8]
   18dc8:	str	lr, [sp, #12]
   18dcc:	mov	r5, r0
   18dd0:	mov	r4, r1
   18dd4:	bl	199ec <__assert_fail@plt+0x86bc>
   18dd8:	cmp	r0, #0
   18ddc:	beq	18df0 <__assert_fail@plt+0x7ac0>
   18de0:	ldrd	r4, [sp]
   18de4:	ldr	r6, [sp, #8]
   18de8:	add	sp, sp, #12
   18dec:	pop	{pc}		; (ldr pc, [sp], #4)
   18df0:	adds	r4, r4, #0
   18df4:	movne	r4, #1
   18df8:	cmp	r5, #0
   18dfc:	moveq	r4, #1
   18e00:	cmp	r4, #0
   18e04:	beq	18de0 <__assert_fail@plt+0x7ab0>
   18e08:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18e0c:	str	r4, [sp, #-8]!
   18e10:	str	lr, [sp, #4]
   18e14:	cmp	r1, #0
   18e18:	orreq	r1, r1, #1
   18e1c:	bl	199ec <__assert_fail@plt+0x86bc>
   18e20:	cmp	r0, #0
   18e24:	beq	18e34 <__assert_fail@plt+0x7b04>
   18e28:	ldr	r4, [sp]
   18e2c:	add	sp, sp, #4
   18e30:	pop	{pc}		; (ldr pc, [sp], #4)
   18e34:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18e38:	strd	r4, [sp, #-16]!
   18e3c:	str	r6, [sp, #8]
   18e40:	str	lr, [sp, #12]
   18e44:	mov	r4, r0
   18e48:	mov	r6, r1
   18e4c:	mov	r5, r2
   18e50:	bl	1a128 <__assert_fail@plt+0x8df8>
   18e54:	cmp	r0, #0
   18e58:	beq	18e6c <__assert_fail@plt+0x7b3c>
   18e5c:	ldrd	r4, [sp]
   18e60:	ldr	r6, [sp, #8]
   18e64:	add	sp, sp, #12
   18e68:	pop	{pc}		; (ldr pc, [sp], #4)
   18e6c:	cmp	r4, #0
   18e70:	beq	18e80 <__assert_fail@plt+0x7b50>
   18e74:	cmp	r6, #0
   18e78:	cmpne	r5, #0
   18e7c:	beq	18e5c <__assert_fail@plt+0x7b2c>
   18e80:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18e84:	str	r4, [sp, #-8]!
   18e88:	str	lr, [sp, #4]
   18e8c:	bl	18e38 <__assert_fail@plt+0x7b08>
   18e90:	ldr	r4, [sp]
   18e94:	add	sp, sp, #4
   18e98:	pop	{pc}		; (ldr pc, [sp], #4)
   18e9c:	str	r4, [sp, #-8]!
   18ea0:	str	lr, [sp, #4]
   18ea4:	mov	ip, r1
   18ea8:	mov	r3, r2
   18eac:	cmp	r2, #0
   18eb0:	cmpne	r1, #0
   18eb4:	moveq	r3, #1
   18eb8:	moveq	ip, r3
   18ebc:	mov	r2, r3
   18ec0:	mov	r1, ip
   18ec4:	bl	1a128 <__assert_fail@plt+0x8df8>
   18ec8:	cmp	r0, #0
   18ecc:	beq	18edc <__assert_fail@plt+0x7bac>
   18ed0:	ldr	r4, [sp]
   18ed4:	add	sp, sp, #4
   18ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   18edc:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18ee0:	str	r4, [sp, #-8]!
   18ee4:	str	lr, [sp, #4]
   18ee8:	mov	r2, r1
   18eec:	mov	r1, r0
   18ef0:	mov	r0, #0
   18ef4:	bl	18e38 <__assert_fail@plt+0x7b08>
   18ef8:	ldr	r4, [sp]
   18efc:	add	sp, sp, #4
   18f00:	pop	{pc}		; (ldr pc, [sp], #4)
   18f04:	str	r4, [sp, #-8]!
   18f08:	str	lr, [sp, #4]
   18f0c:	mov	r2, r1
   18f10:	mov	r1, r0
   18f14:	mov	r0, #0
   18f18:	bl	18e9c <__assert_fail@plt+0x7b6c>
   18f1c:	ldr	r4, [sp]
   18f20:	add	sp, sp, #4
   18f24:	pop	{pc}		; (ldr pc, [sp], #4)
   18f28:	strd	r4, [sp, #-16]!
   18f2c:	str	r6, [sp, #8]
   18f30:	str	lr, [sp, #12]
   18f34:	mov	r5, r1
   18f38:	ldr	r4, [r1]
   18f3c:	cmp	r0, #0
   18f40:	beq	18f70 <__assert_fail@plt+0x7c40>
   18f44:	lsr	r3, r4, #1
   18f48:	add	r3, r3, #1
   18f4c:	adds	r4, r4, r3
   18f50:	bcs	18f8c <__assert_fail@plt+0x7c5c>
   18f54:	mov	r1, r4
   18f58:	bl	18e38 <__assert_fail@plt+0x7b08>
   18f5c:	str	r4, [r5]
   18f60:	ldrd	r4, [sp]
   18f64:	ldr	r6, [sp, #8]
   18f68:	add	sp, sp, #12
   18f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f70:	cmp	r4, #0
   18f74:	bne	18f54 <__assert_fail@plt+0x7c24>
   18f78:	mov	r4, #64	; 0x40
   18f7c:	udiv	r4, r4, r2
   18f80:	cmp	r2, #64	; 0x40
   18f84:	addhi	r4, r4, #1
   18f88:	b	18f54 <__assert_fail@plt+0x7c24>
   18f8c:	bl	191f4 <__assert_fail@plt+0x7ec4>
   18f90:	str	r4, [sp, #-8]!
   18f94:	str	lr, [sp, #4]
   18f98:	mov	r2, #1
   18f9c:	bl	18f28 <__assert_fail@plt+0x7bf8>
   18fa0:	ldr	r4, [sp]
   18fa4:	add	sp, sp, #4
   18fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18fb0:	strd	r6, [sp, #8]
   18fb4:	str	r8, [sp, #16]
   18fb8:	str	lr, [sp, #20]
   18fbc:	mov	r5, r1
   18fc0:	ldr	lr, [sp, #24]
   18fc4:	ldr	ip, [r1]
   18fc8:	asr	r4, ip, #1
   18fcc:	adds	r4, ip, r4
   18fd0:	movvs	r1, #1
   18fd4:	movvc	r1, #0
   18fd8:	cmp	r1, #0
   18fdc:	mvnne	r4, #-2147483648	; 0x80000000
   18fe0:	mvn	r8, r3
   18fe4:	lsr	r8, r8, #31
   18fe8:	cmp	r3, r4
   18fec:	movge	r1, #0
   18ff0:	andlt	r1, r8, #1
   18ff4:	cmp	r1, #0
   18ff8:	movne	r4, r3
   18ffc:	smull	r6, r7, r4, lr
   19000:	asr	r1, r6, #31
   19004:	cmp	r1, r7
   19008:	bne	19020 <__assert_fail@plt+0x7cf0>
   1900c:	mov	r1, r6
   19010:	cmp	r6, #63	; 0x3f
   19014:	movle	r1, #64	; 0x40
   19018:	ble	19024 <__assert_fail@plt+0x7cf4>
   1901c:	b	19030 <__assert_fail@plt+0x7d00>
   19020:	mvn	r1, #-2147483648	; 0x80000000
   19024:	sdiv	r4, r1, lr
   19028:	mls	r6, lr, r4, r1
   1902c:	sub	r1, r1, r6
   19030:	cmp	r0, #0
   19034:	moveq	r6, #0
   19038:	streq	r6, [r5]
   1903c:	sub	r6, r4, ip
   19040:	cmp	r6, r2
   19044:	bge	1907c <__assert_fail@plt+0x7d4c>
   19048:	adds	r2, ip, r2
   1904c:	mov	r4, r2
   19050:	bvs	19098 <__assert_fail@plt+0x7d68>
   19054:	cmp	r2, r3
   19058:	movle	r3, #0
   1905c:	andgt	r3, r8, #1
   19060:	cmp	r3, #0
   19064:	bne	19098 <__assert_fail@plt+0x7d68>
   19068:	smull	r2, r3, r2, lr
   1906c:	asr	ip, r2, #31
   19070:	mov	r1, r2
   19074:	cmp	ip, r3
   19078:	bne	19098 <__assert_fail@plt+0x7d68>
   1907c:	bl	18dc0 <__assert_fail@plt+0x7a90>
   19080:	str	r4, [r5]
   19084:	ldrd	r4, [sp]
   19088:	ldrd	r6, [sp, #8]
   1908c:	ldr	r8, [sp, #16]
   19090:	add	sp, sp, #20
   19094:	pop	{pc}		; (ldr pc, [sp], #4)
   19098:	bl	191f4 <__assert_fail@plt+0x7ec4>
   1909c:	str	r4, [sp, #-8]!
   190a0:	str	lr, [sp, #4]
   190a4:	bl	1993c <__assert_fail@plt+0x860c>
   190a8:	cmp	r0, #0
   190ac:	beq	190bc <__assert_fail@plt+0x7d8c>
   190b0:	ldr	r4, [sp]
   190b4:	add	sp, sp, #4
   190b8:	pop	{pc}		; (ldr pc, [sp], #4)
   190bc:	bl	191f4 <__assert_fail@plt+0x7ec4>
   190c0:	str	r4, [sp, #-8]!
   190c4:	str	lr, [sp, #4]
   190c8:	mov	r1, #1
   190cc:	bl	1909c <__assert_fail@plt+0x7d6c>
   190d0:	ldr	r4, [sp]
   190d4:	add	sp, sp, #4
   190d8:	pop	{pc}		; (ldr pc, [sp], #4)
   190dc:	str	r4, [sp, #-8]!
   190e0:	str	lr, [sp, #4]
   190e4:	bl	1993c <__assert_fail@plt+0x860c>
   190e8:	cmp	r0, #0
   190ec:	beq	190fc <__assert_fail@plt+0x7dcc>
   190f0:	ldr	r4, [sp]
   190f4:	add	sp, sp, #4
   190f8:	pop	{pc}		; (ldr pc, [sp], #4)
   190fc:	bl	191f4 <__assert_fail@plt+0x7ec4>
   19100:	str	r4, [sp, #-8]!
   19104:	str	lr, [sp, #4]
   19108:	mov	r1, #1
   1910c:	bl	190dc <__assert_fail@plt+0x7dac>
   19110:	ldr	r4, [sp]
   19114:	add	sp, sp, #4
   19118:	pop	{pc}		; (ldr pc, [sp], #4)
   1911c:	strd	r4, [sp, #-16]!
   19120:	str	r6, [sp, #8]
   19124:	str	lr, [sp, #12]
   19128:	mov	r5, r0
   1912c:	mov	r4, r1
   19130:	mov	r0, r1
   19134:	bl	18d60 <__assert_fail@plt+0x7a30>
   19138:	mov	r2, r4
   1913c:	mov	r1, r5
   19140:	bl	11078 <memcpy@plt>
   19144:	ldrd	r4, [sp]
   19148:	ldr	r6, [sp, #8]
   1914c:	add	sp, sp, #12
   19150:	pop	{pc}		; (ldr pc, [sp], #4)
   19154:	strd	r4, [sp, #-16]!
   19158:	str	r6, [sp, #8]
   1915c:	str	lr, [sp, #12]
   19160:	mov	r5, r0
   19164:	mov	r4, r1
   19168:	mov	r0, r1
   1916c:	bl	18d84 <__assert_fail@plt+0x7a54>
   19170:	mov	r2, r4
   19174:	mov	r1, r5
   19178:	bl	11078 <memcpy@plt>
   1917c:	ldrd	r4, [sp]
   19180:	ldr	r6, [sp, #8]
   19184:	add	sp, sp, #12
   19188:	pop	{pc}		; (ldr pc, [sp], #4)
   1918c:	strd	r4, [sp, #-16]!
   19190:	str	r6, [sp, #8]
   19194:	str	lr, [sp, #12]
   19198:	mov	r5, r0
   1919c:	mov	r4, r1
   191a0:	add	r0, r1, #1
   191a4:	bl	18d84 <__assert_fail@plt+0x7a54>
   191a8:	mov	r2, #0
   191ac:	strb	r2, [r0, r4]
   191b0:	mov	r2, r4
   191b4:	mov	r1, r5
   191b8:	bl	11078 <memcpy@plt>
   191bc:	ldrd	r4, [sp]
   191c0:	ldr	r6, [sp, #8]
   191c4:	add	sp, sp, #12
   191c8:	pop	{pc}		; (ldr pc, [sp], #4)
   191cc:	str	r4, [sp, #-8]!
   191d0:	str	lr, [sp, #4]
   191d4:	mov	r4, r0
   191d8:	bl	111bc <strlen@plt>
   191dc:	add	r1, r0, #1
   191e0:	mov	r0, r4
   191e4:	bl	1911c <__assert_fail@plt+0x7dec>
   191e8:	ldr	r4, [sp]
   191ec:	add	sp, sp, #4
   191f0:	pop	{pc}		; (ldr pc, [sp], #4)
   191f4:	str	r4, [sp, #-8]!
   191f8:	str	lr, [sp, #4]
   191fc:	movw	r3, #49464	; 0xc138
   19200:	movt	r3, #2
   19204:	ldr	r4, [r3]
   19208:	mov	r2, #5
   1920c:	movw	r1, #47128	; 0xb818
   19210:	movt	r1, #1
   19214:	mov	r0, #0
   19218:	bl	110c0 <dcgettext@plt>
   1921c:	mov	r3, r0
   19220:	movw	r2, #45912	; 0xb358
   19224:	movt	r2, #1
   19228:	mov	r1, #0
   1922c:	mov	r0, r4
   19230:	bl	11150 <error@plt>
   19234:	bl	112e8 <abort@plt>
   19238:	str	r4, [sp, #-8]!
   1923c:	str	lr, [sp, #4]
   19240:	orr	r1, r1, #512	; 0x200
   19244:	bl	14354 <__assert_fail@plt+0x3024>
   19248:	cmp	r0, #0
   1924c:	beq	1925c <__assert_fail@plt+0x7f2c>
   19250:	ldr	r4, [sp]
   19254:	add	sp, sp, #4
   19258:	pop	{pc}		; (ldr pc, [sp], #4)
   1925c:	bl	111ec <__errno_location@plt>
   19260:	ldr	r3, [r0]
   19264:	cmp	r3, #22
   19268:	beq	19270 <__assert_fail@plt+0x7f40>
   1926c:	bl	191f4 <__assert_fail@plt+0x7ec4>
   19270:	movw	r3, #47148	; 0xb82c
   19274:	movt	r3, #1
   19278:	mov	r2, #41	; 0x29
   1927c:	movw	r1, #47160	; 0xb838
   19280:	movt	r1, #1
   19284:	movw	r0, #47172	; 0xb844
   19288:	movt	r0, #1
   1928c:	bl	11330 <__assert_fail@plt>
   19290:	ldr	r3, [r0, #48]	; 0x30
   19294:	and	r3, r3, #17
   19298:	cmp	r3, #16
   1929c:	beq	192c0 <__assert_fail@plt+0x7f90>
   192a0:	cmp	r3, #17
   192a4:	beq	192b0 <__assert_fail@plt+0x7f80>
   192a8:	mov	r0, #0
   192ac:	bx	lr
   192b0:	ldr	r0, [r1, #48]	; 0x30
   192b4:	adds	r0, r0, #0
   192b8:	movne	r0, #1
   192bc:	bx	lr
   192c0:	mov	r0, #1
   192c4:	bx	lr
   192c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   192cc:	strd	r6, [sp, #8]
   192d0:	strd	r8, [sp, #16]
   192d4:	strd	sl, [sp, #24]
   192d8:	str	lr, [sp, #32]
   192dc:	sub	sp, sp, #12
   192e0:	str	r0, [sp, #4]
   192e4:	cmp	r2, #0
   192e8:	beq	193e4 <__assert_fail@plt+0x80b4>
   192ec:	sub	ip, r2, #1
   192f0:	ldrd	r2, [r0]
   192f4:	mov	r0, #0
   192f8:	mov	r8, r1
   192fc:	asr	r9, r1, #31
   19300:	str	r1, [sp]
   19304:	b	19354 <__assert_fail@plt+0x8024>
   19308:	orrs	r4, r2, r3
   1930c:	movne	lr, #1
   19310:	b	19364 <__assert_fail@plt+0x8034>
   19314:	mov	sl, r3
   19318:	ldr	fp, [sp]
   1931c:	umull	r6, r7, r1, r2
   19320:	mov	r4, r7
   19324:	mov	r5, #0
   19328:	umlal	r4, r5, sl, fp
   1932c:	cmp	r5, #0
   19330:	bne	19398 <__assert_fail@plt+0x8068>
   19334:	cmp	lr, #0
   19338:	bne	193b0 <__assert_fail@plt+0x8080>
   1933c:	mov	r2, r6
   19340:	mov	r3, r4
   19344:	orr	r0, r0, lr
   19348:	sub	ip, ip, #1
   1934c:	cmn	ip, #1
   19350:	beq	193c0 <__assert_fail@plt+0x8090>
   19354:	mov	lr, #0
   19358:	cmp	r8, #0
   1935c:	sbcs	r4, r9, #0
   19360:	blt	19308 <__assert_fail@plt+0x7fd8>
   19364:	cmp	r9, #0
   19368:	bne	19384 <__assert_fail@plt+0x8054>
   1936c:	cmp	r3, #0
   19370:	bne	19314 <__assert_fail@plt+0x7fe4>
   19374:	umull	r2, r3, r1, r2
   19378:	mov	r6, r2
   1937c:	mov	r4, r3
   19380:	b	19334 <__assert_fail@plt+0x8004>
   19384:	cmp	r3, #0
   19388:	bne	19398 <__assert_fail@plt+0x8068>
   1938c:	mov	sl, r9
   19390:	mov	fp, r2
   19394:	b	1931c <__assert_fail@plt+0x7fec>
   19398:	mul	r4, r1, r3
   1939c:	mla	r4, r2, r9, r4
   193a0:	umull	r6, r7, r1, r2
   193a4:	add	r4, r4, r7
   193a8:	mov	lr, #1
   193ac:	b	19334 <__assert_fail@plt+0x8004>
   193b0:	mvn	r2, #0
   193b4:	mvn	r3, #0
   193b8:	mov	lr, #1
   193bc:	b	19344 <__assert_fail@plt+0x8014>
   193c0:	ldr	r1, [sp, #4]
   193c4:	strd	r2, [r1]
   193c8:	add	sp, sp, #12
   193cc:	ldrd	r4, [sp]
   193d0:	ldrd	r6, [sp, #8]
   193d4:	ldrd	r8, [sp, #16]
   193d8:	ldrd	sl, [sp, #24]
   193dc:	add	sp, sp, #32
   193e0:	pop	{pc}		; (ldr pc, [sp], #4)
   193e4:	mov	r0, #0
   193e8:	b	193c8 <__assert_fail@plt+0x8098>
   193ec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   193f0:	strd	r6, [sp, #8]
   193f4:	strd	r8, [sp, #16]
   193f8:	str	lr, [sp, #24]
   193fc:	sub	sp, sp, #20
   19400:	cmp	r2, #36	; 0x24
   19404:	bhi	19458 <__assert_fail@plt+0x8128>
   19408:	mov	r5, r0
   1940c:	mov	r6, r1
   19410:	mov	r7, r2
   19414:	mov	r9, r3
   19418:	cmp	r1, #0
   1941c:	addeq	r6, sp, #12
   19420:	bl	111ec <__errno_location@plt>
   19424:	mov	r8, r0
   19428:	mov	r3, #0
   1942c:	str	r3, [r0]
   19430:	ldrb	r4, [r5]
   19434:	bl	111a4 <__ctype_b_loc@plt>
   19438:	ldr	r1, [r0]
   1943c:	mov	r2, r5
   19440:	lsl	r3, r4, #1
   19444:	ldrh	r3, [r1, r3]
   19448:	tst	r3, #8192	; 0x2000
   1944c:	beq	19478 <__assert_fail@plt+0x8148>
   19450:	ldrb	r4, [r2, #1]!
   19454:	b	19440 <__assert_fail@plt+0x8110>
   19458:	movw	r3, #47188	; 0xb854
   1945c:	movt	r3, #1
   19460:	mov	r2, #85	; 0x55
   19464:	movw	r1, #47200	; 0xb860
   19468:	movt	r1, #1
   1946c:	movw	r0, #47216	; 0xb870
   19470:	movt	r0, #1
   19474:	bl	11330 <__assert_fail@plt>
   19478:	cmp	r4, #45	; 0x2d
   1947c:	moveq	r4, #4
   19480:	beq	19614 <__assert_fail@plt+0x82e4>
   19484:	mov	r3, #0
   19488:	mov	r2, r7
   1948c:	mov	r1, r6
   19490:	mov	r0, r5
   19494:	bl	11084 <__strtoull_internal@plt>
   19498:	strd	r0, [sp]
   1949c:	ldr	r7, [r6]
   194a0:	cmp	r7, r5
   194a4:	beq	194c8 <__assert_fail@plt+0x8198>
   194a8:	ldr	r3, [r8]
   194ac:	cmp	r3, #0
   194b0:	beq	195ec <__assert_fail@plt+0x82bc>
   194b4:	cmp	r3, #34	; 0x22
   194b8:	moveq	r4, #1
   194bc:	beq	195f0 <__assert_fail@plt+0x82c0>
   194c0:	mov	r4, #4
   194c4:	b	19614 <__assert_fail@plt+0x82e4>
   194c8:	ldr	r3, [sp, #48]	; 0x30
   194cc:	cmp	r3, #0
   194d0:	beq	1992c <__assert_fail@plt+0x85fc>
   194d4:	ldrb	r1, [r5]
   194d8:	cmp	r1, #0
   194dc:	moveq	r4, #4
   194e0:	beq	19614 <__assert_fail@plt+0x82e4>
   194e4:	mov	r0, r3
   194e8:	bl	111c8 <strchr@plt>
   194ec:	cmp	r0, #0
   194f0:	beq	19934 <__assert_fail@plt+0x8604>
   194f4:	mov	r2, #1
   194f8:	mov	r3, #0
   194fc:	strd	r2, [sp]
   19500:	ldrb	r5, [r7]
   19504:	mov	r4, #0
   19508:	mov	r1, r5
   1950c:	ldr	r0, [sp, #48]	; 0x30
   19510:	bl	111c8 <strchr@plt>
   19514:	cmp	r0, #0
   19518:	beq	19630 <__assert_fail@plt+0x8300>
   1951c:	sub	r3, r5, #69	; 0x45
   19520:	cmp	r3, #47	; 0x2f
   19524:	ldrls	pc, [pc, r3, lsl #2]
   19528:	b	1977c <__assert_fail@plt+0x844c>
   1952c:	andeq	r9, r1, r0, asr #12
   19530:	andeq	r9, r1, ip, ror r7
   19534:	andeq	r9, r1, r0, asr #12
   19538:	andeq	r9, r1, ip, ror r7
   1953c:	andeq	r9, r1, ip, ror r7
   19540:	andeq	r9, r1, ip, ror r7
   19544:	andeq	r9, r1, r0, asr #12
   19548:	andeq	r9, r1, ip, ror r7
   1954c:	andeq	r9, r1, r0, asr #12
   19550:	andeq	r9, r1, ip, ror r7
   19554:	andeq	r9, r1, ip, ror r7
   19558:	andeq	r9, r1, r0, asr #12
   1955c:	andeq	r9, r1, ip, ror r7
   19560:	andeq	r9, r1, ip, ror r7
   19564:	andeq	r9, r1, ip, ror r7
   19568:	andeq	r9, r1, r0, asr #12
   1956c:	andeq	r9, r1, ip, ror r7
   19570:	andeq	r9, r1, ip, ror r7
   19574:	andeq	r9, r1, ip, ror r7
   19578:	andeq	r9, r1, ip, ror r7
   1957c:	andeq	r9, r1, r0, asr #12
   19580:	andeq	r9, r1, r0, asr #12
   19584:	andeq	r9, r1, ip, ror r7
   19588:	andeq	r9, r1, ip, ror r7
   1958c:	andeq	r9, r1, ip, ror r7
   19590:	andeq	r9, r1, ip, ror r7
   19594:	andeq	r9, r1, ip, ror r7
   19598:	andeq	r9, r1, ip, ror r7
   1959c:	andeq	r9, r1, ip, ror r7
   195a0:	andeq	r9, r1, ip, ror r7
   195a4:	andeq	r9, r1, ip, ror r7
   195a8:	andeq	r9, r1, ip, ror r7
   195ac:	andeq	r9, r1, ip, ror r7
   195b0:	andeq	r9, r1, ip, ror r7
   195b4:	andeq	r9, r1, r0, asr #12
   195b8:	andeq	r9, r1, ip, ror r7
   195bc:	andeq	r9, r1, ip, ror r7
   195c0:	andeq	r9, r1, ip, ror r7
   195c4:	andeq	r9, r1, r0, asr #12
   195c8:	andeq	r9, r1, ip, ror r7
   195cc:	andeq	r9, r1, r0, asr #12
   195d0:	andeq	r9, r1, ip, ror r7
   195d4:	andeq	r9, r1, ip, ror r7
   195d8:	andeq	r9, r1, ip, ror r7
   195dc:	andeq	r9, r1, ip, ror r7
   195e0:	andeq	r9, r1, ip, ror r7
   195e4:	andeq	r9, r1, ip, ror r7
   195e8:	andeq	r9, r1, r0, asr #12
   195ec:	mov	r4, #0
   195f0:	ldr	r3, [sp, #48]	; 0x30
   195f4:	cmp	r3, #0
   195f8:	strdeq	r0, [r9]
   195fc:	beq	19614 <__assert_fail@plt+0x82e4>
   19600:	ldrb	r5, [r7]
   19604:	cmp	r5, #0
   19608:	bne	19508 <__assert_fail@plt+0x81d8>
   1960c:	ldrd	r2, [sp]
   19610:	strd	r2, [r9]
   19614:	mov	r0, r4
   19618:	add	sp, sp, #20
   1961c:	ldrd	r4, [sp]
   19620:	ldrd	r6, [sp, #8]
   19624:	ldrd	r8, [sp, #16]
   19628:	add	sp, sp, #24
   1962c:	pop	{pc}		; (ldr pc, [sp], #4)
   19630:	ldrd	r2, [sp]
   19634:	strd	r2, [r9]
   19638:	orr	r4, r4, #2
   1963c:	b	19614 <__assert_fail@plt+0x82e4>
   19640:	mov	r1, #48	; 0x30
   19644:	ldr	r0, [sp, #48]	; 0x30
   19648:	bl	111c8 <strchr@plt>
   1964c:	cmp	r0, #0
   19650:	beq	19788 <__assert_fail@plt+0x8458>
   19654:	ldrb	r3, [r7, #1]
   19658:	cmp	r3, #68	; 0x44
   1965c:	beq	19794 <__assert_fail@plt+0x8464>
   19660:	cmp	r3, #105	; 0x69
   19664:	beq	19764 <__assert_fail@plt+0x8434>
   19668:	cmp	r3, #66	; 0x42
   1966c:	moveq	r7, #2
   19670:	movne	r7, #1
   19674:	moveq	r1, #1000	; 0x3e8
   19678:	movne	r1, #1024	; 0x400
   1967c:	sub	r5, r5, #66	; 0x42
   19680:	cmp	r5, #53	; 0x35
   19684:	ldrls	pc, [pc, r5, lsl #2]
   19688:	b	198f8 <__assert_fail@plt+0x85c8>
   1968c:	andeq	r9, r1, r8, ror #15
   19690:	strdeq	r9, [r1], -r8
   19694:	strdeq	r9, [r1], -r8
   19698:	andeq	r9, r1, r0, lsr r8
   1969c:	strdeq	r9, [r1], -r8
   196a0:	andeq	r9, r1, r0, asr #16
   196a4:	strdeq	r9, [r1], -r8
   196a8:	strdeq	r9, [r1], -r8
   196ac:	strdeq	r9, [r1], -r8
   196b0:	andeq	r9, r1, r0, asr r8
   196b4:	strdeq	r9, [r1], -r8
   196b8:	andeq	r9, r1, r0, ror #16
   196bc:	strdeq	r9, [r1], -r8
   196c0:	strdeq	r9, [r1], -r8
   196c4:	andeq	r9, r1, r0, ror r8
   196c8:	strdeq	r9, [r1], -r8
   196cc:	strdeq	r9, [r1], -r8
   196d0:	strdeq	r9, [r1], -r8
   196d4:	andeq	r9, r1, r0, lsl #17
   196d8:	strdeq	r9, [r1], -r8
   196dc:	strdeq	r9, [r1], -r8
   196e0:	strdeq	r9, [r1], -r8
   196e4:	strdeq	r9, [r1], -r8
   196e8:	ldrdeq	r9, [r1], -r8
   196ec:	andeq	r9, r1, r8, ror #17
   196f0:	strdeq	r9, [r1], -r8
   196f4:	strdeq	r9, [r1], -r8
   196f8:	strdeq	r9, [r1], -r8
   196fc:	strdeq	r9, [r1], -r8
   19700:	strdeq	r9, [r1], -r8
   19704:	strdeq	r9, [r1], -r8
   19708:	strdeq	r9, [r1], -r8
   1970c:	andeq	r9, r1, r0, lsr #15
   19710:	andeq	r9, r1, r8, lsl #18
   19714:	strdeq	r9, [r1], -r8
   19718:	strdeq	r9, [r1], -r8
   1971c:	strdeq	r9, [r1], -r8
   19720:	andeq	r9, r1, r0, asr #16
   19724:	strdeq	r9, [r1], -r8
   19728:	strdeq	r9, [r1], -r8
   1972c:	strdeq	r9, [r1], -r8
   19730:	andeq	r9, r1, r0, asr r8
   19734:	strdeq	r9, [r1], -r8
   19738:	andeq	r9, r1, r0, ror #16
   1973c:	strdeq	r9, [r1], -r8
   19740:	strdeq	r9, [r1], -r8
   19744:	strdeq	r9, [r1], -r8
   19748:	strdeq	r9, [r1], -r8
   1974c:	strdeq	r9, [r1], -r8
   19750:	strdeq	r9, [r1], -r8
   19754:	andeq	r9, r1, r0, lsl #17
   19758:	strdeq	r9, [r1], -r8
   1975c:	strdeq	r9, [r1], -r8
   19760:	muleq	r1, r0, r8
   19764:	ldrb	r3, [r7, #2]
   19768:	cmp	r3, #66	; 0x42
   1976c:	movne	r7, #1
   19770:	moveq	r7, #3
   19774:	mov	r1, #1024	; 0x400
   19778:	b	1967c <__assert_fail@plt+0x834c>
   1977c:	mov	r7, #1
   19780:	mov	r1, #1024	; 0x400
   19784:	b	1967c <__assert_fail@plt+0x834c>
   19788:	mov	r7, #1
   1978c:	mov	r1, #1024	; 0x400
   19790:	b	1967c <__assert_fail@plt+0x834c>
   19794:	mov	r7, #2
   19798:	mov	r1, #1000	; 0x3e8
   1979c:	b	1967c <__assert_fail@plt+0x834c>
   197a0:	ldr	r3, [sp]
   197a4:	ldr	ip, [sp, #4]
   197a8:	lsl	r2, ip, #9
   197ac:	orr	r2, r2, r3, lsr #23
   197b0:	lsl	r3, r3, #9
   197b4:	mov	r0, #0
   197b8:	mov	r1, r0
   197bc:	lsr	r0, ip, #23
   197c0:	orrs	r1, r0, r1
   197c4:	streq	r3, [sp]
   197c8:	streq	r2, [sp, #4]
   197cc:	moveq	r0, #0
   197d0:	beq	1990c <__assert_fail@plt+0x85dc>
   197d4:	mvn	r2, #0
   197d8:	mvn	r3, #0
   197dc:	strd	r2, [sp]
   197e0:	mov	r0, #1
   197e4:	b	1990c <__assert_fail@plt+0x85dc>
   197e8:	ldr	r3, [sp]
   197ec:	ldr	ip, [sp, #4]
   197f0:	lsl	r2, ip, #10
   197f4:	orr	r2, r2, r3, lsr #22
   197f8:	lsl	r3, r3, #10
   197fc:	mov	r0, #0
   19800:	mov	r1, r0
   19804:	lsr	r0, ip, #22
   19808:	orrs	r1, r0, r1
   1980c:	streq	r3, [sp]
   19810:	streq	r2, [sp, #4]
   19814:	moveq	r0, #0
   19818:	beq	1990c <__assert_fail@plt+0x85dc>
   1981c:	mvn	r2, #0
   19820:	mvn	r3, #0
   19824:	strd	r2, [sp]
   19828:	mov	r0, #1
   1982c:	b	1990c <__assert_fail@plt+0x85dc>
   19830:	mov	r2, #6
   19834:	mov	r0, sp
   19838:	bl	192c8 <__assert_fail@plt+0x7f98>
   1983c:	b	1990c <__assert_fail@plt+0x85dc>
   19840:	mov	r2, #3
   19844:	mov	r0, sp
   19848:	bl	192c8 <__assert_fail@plt+0x7f98>
   1984c:	b	1990c <__assert_fail@plt+0x85dc>
   19850:	mov	r2, #1
   19854:	mov	r0, sp
   19858:	bl	192c8 <__assert_fail@plt+0x7f98>
   1985c:	b	1990c <__assert_fail@plt+0x85dc>
   19860:	mov	r2, #2
   19864:	mov	r0, sp
   19868:	bl	192c8 <__assert_fail@plt+0x7f98>
   1986c:	b	1990c <__assert_fail@plt+0x85dc>
   19870:	mov	r2, #5
   19874:	mov	r0, sp
   19878:	bl	192c8 <__assert_fail@plt+0x7f98>
   1987c:	b	1990c <__assert_fail@plt+0x85dc>
   19880:	mov	r2, #4
   19884:	mov	r0, sp
   19888:	bl	192c8 <__assert_fail@plt+0x7f98>
   1988c:	b	1990c <__assert_fail@plt+0x85dc>
   19890:	ldr	r3, [sp]
   19894:	ldr	r2, [sp, #4]
   19898:	adds	r3, r3, r3
   1989c:	adc	r2, r2, r2
   198a0:	mov	r1, #0
   198a4:	mov	r0, r1
   198a8:	ldr	r1, [sp, #4]
   198ac:	lsr	r1, r1, #31
   198b0:	orrs	r1, r1, r0
   198b4:	streq	r3, [sp]
   198b8:	streq	r2, [sp, #4]
   198bc:	moveq	r0, #0
   198c0:	beq	1990c <__assert_fail@plt+0x85dc>
   198c4:	mvn	r2, #0
   198c8:	mvn	r3, #0
   198cc:	strd	r2, [sp]
   198d0:	mov	r0, #1
   198d4:	b	1990c <__assert_fail@plt+0x85dc>
   198d8:	mov	r2, #8
   198dc:	mov	r0, sp
   198e0:	bl	192c8 <__assert_fail@plt+0x7f98>
   198e4:	b	1990c <__assert_fail@plt+0x85dc>
   198e8:	mov	r2, #7
   198ec:	mov	r0, sp
   198f0:	bl	192c8 <__assert_fail@plt+0x7f98>
   198f4:	b	1990c <__assert_fail@plt+0x85dc>
   198f8:	ldrd	r2, [sp]
   198fc:	strd	r2, [r9]
   19900:	orr	r4, r4, #2
   19904:	b	19614 <__assert_fail@plt+0x82e4>
   19908:	mov	r0, #0
   1990c:	orr	r4, r4, r0
   19910:	ldr	r3, [r6]
   19914:	add	r2, r3, r7
   19918:	str	r2, [r6]
   1991c:	ldrb	r3, [r3, r7]
   19920:	cmp	r3, #0
   19924:	orrne	r4, r4, #2
   19928:	b	1960c <__assert_fail@plt+0x82dc>
   1992c:	mov	r4, #4
   19930:	b	19614 <__assert_fail@plt+0x82e4>
   19934:	mov	r4, #4
   19938:	b	19614 <__assert_fail@plt+0x82e4>
   1993c:	strd	r4, [sp, #-16]!
   19940:	str	r6, [sp, #8]
   19944:	str	lr, [sp, #12]
   19948:	cmp	r1, #0
   1994c:	cmpne	r0, #0
   19950:	beq	1998c <__assert_fail@plt+0x865c>
   19954:	mov	r2, r0
   19958:	mov	r3, r1
   1995c:	umull	r4, r5, r0, r1
   19960:	adds	r1, r5, #0
   19964:	movne	r1, #1
   19968:	cmp	r4, #0
   1996c:	movlt	r1, #1
   19970:	cmp	r1, #0
   19974:	beq	19994 <__assert_fail@plt+0x8664>
   19978:	bl	111ec <__errno_location@plt>
   1997c:	mov	r3, #12
   19980:	str	r3, [r0]
   19984:	mov	r0, #0
   19988:	b	199a0 <__assert_fail@plt+0x8670>
   1998c:	mov	r3, #1
   19990:	mov	r2, r3
   19994:	mov	r1, r3
   19998:	mov	r0, r2
   1999c:	bl	10ff4 <calloc@plt>
   199a0:	ldrd	r4, [sp]
   199a4:	ldr	r6, [sp, #8]
   199a8:	add	sp, sp, #12
   199ac:	pop	{pc}		; (ldr pc, [sp], #4)
   199b0:	str	r4, [sp, #-8]!
   199b4:	str	lr, [sp, #4]
   199b8:	cmp	r0, #0
   199bc:	beq	199d8 <__assert_fail@plt+0x86a8>
   199c0:	bge	199dc <__assert_fail@plt+0x86ac>
   199c4:	bl	111ec <__errno_location@plt>
   199c8:	mov	r3, #12
   199cc:	str	r3, [r0]
   199d0:	mov	r0, #0
   199d4:	b	199e0 <__assert_fail@plt+0x86b0>
   199d8:	mov	r0, #1
   199dc:	bl	11168 <malloc@plt>
   199e0:	ldr	r4, [sp]
   199e4:	add	sp, sp, #4
   199e8:	pop	{pc}		; (ldr pc, [sp], #4)
   199ec:	str	r4, [sp, #-8]!
   199f0:	str	lr, [sp, #4]
   199f4:	cmp	r0, #0
   199f8:	beq	19a1c <__assert_fail@plt+0x86ec>
   199fc:	cmp	r1, #0
   19a00:	beq	19a28 <__assert_fail@plt+0x86f8>
   19a04:	cmp	r1, #0
   19a08:	blt	19a34 <__assert_fail@plt+0x8704>
   19a0c:	bl	110cc <realloc@plt>
   19a10:	ldr	r4, [sp]
   19a14:	add	sp, sp, #4
   19a18:	pop	{pc}		; (ldr pc, [sp], #4)
   19a1c:	mov	r0, r1
   19a20:	bl	199b0 <__assert_fail@plt+0x8680>
   19a24:	b	19a10 <__assert_fail@plt+0x86e0>
   19a28:	bl	12ce4 <__assert_fail@plt+0x19b4>
   19a2c:	mov	r0, #0
   19a30:	b	19a10 <__assert_fail@plt+0x86e0>
   19a34:	bl	111ec <__errno_location@plt>
   19a38:	mov	r3, #12
   19a3c:	str	r3, [r0]
   19a40:	mov	r0, #0
   19a44:	b	19a10 <__assert_fail@plt+0x86e0>
   19a48:	strd	r4, [sp, #-16]!
   19a4c:	str	r6, [sp, #8]
   19a50:	str	lr, [sp, #12]
   19a54:	mov	r5, r0
   19a58:	bl	11138 <__fpending@plt>
   19a5c:	mov	r6, r0
   19a60:	ldr	r4, [r5]
   19a64:	and	r4, r4, #32
   19a68:	mov	r0, r5
   19a6c:	bl	19be0 <__assert_fail@plt+0x88b0>
   19a70:	cmp	r4, #0
   19a74:	bne	19aa8 <__assert_fail@plt+0x8778>
   19a78:	cmp	r0, #0
   19a7c:	beq	19a98 <__assert_fail@plt+0x8768>
   19a80:	cmp	r6, #0
   19a84:	bne	19ac4 <__assert_fail@plt+0x8794>
   19a88:	bl	111ec <__errno_location@plt>
   19a8c:	ldr	r0, [r0]
   19a90:	subs	r0, r0, #9
   19a94:	mvnne	r0, #0
   19a98:	ldrd	r4, [sp]
   19a9c:	ldr	r6, [sp, #8]
   19aa0:	add	sp, sp, #12
   19aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   19aa8:	cmp	r0, #0
   19aac:	bne	19acc <__assert_fail@plt+0x879c>
   19ab0:	bl	111ec <__errno_location@plt>
   19ab4:	mov	r3, #0
   19ab8:	str	r3, [r0]
   19abc:	mvn	r0, #0
   19ac0:	b	19a98 <__assert_fail@plt+0x8768>
   19ac4:	mvn	r0, #0
   19ac8:	b	19a98 <__assert_fail@plt+0x8768>
   19acc:	mvn	r0, #0
   19ad0:	b	19a98 <__assert_fail@plt+0x8768>
   19ad4:	mov	r2, #0
   19ad8:	mov	r3, #0
   19adc:	strd	r2, [r0, #16]
   19ae0:	movw	r3, #62998	; 0xf616
   19ae4:	movt	r3, #149	; 0x95
   19ae8:	str	r3, [r0, #24]
   19aec:	bx	lr
   19af0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19af4:	strd	r6, [sp, #8]
   19af8:	strd	r8, [sp, #16]
   19afc:	str	sl, [sp, #24]
   19b00:	str	lr, [sp, #28]
   19b04:	movw	r3, #62998	; 0xf616
   19b08:	movt	r3, #149	; 0x95
   19b0c:	ldr	r2, [r0, #24]
   19b10:	cmp	r2, r3
   19b14:	bne	19b70 <__assert_fail@plt+0x8840>
   19b18:	ldrd	r6, [r0, #16]
   19b1c:	orrs	r3, r6, r7
   19b20:	beq	19bbc <__assert_fail@plt+0x888c>
   19b24:	ldrd	r4, [r1, #96]	; 0x60
   19b28:	ldrd	r2, [r0]
   19b2c:	cmp	r5, r3
   19b30:	cmpeq	r4, r2
   19b34:	beq	19b90 <__assert_fail@plt+0x8860>
   19b38:	adds	r8, r6, #1
   19b3c:	adc	r9, r7, #0
   19b40:	strd	r8, [r0, #16]
   19b44:	and	r2, r6, r8
   19b48:	and	r3, r7, r9
   19b4c:	orrs	r3, r2, r3
   19b50:	movne	r0, #0
   19b54:	beq	19bac <__assert_fail@plt+0x887c>
   19b58:	ldrd	r4, [sp]
   19b5c:	ldrd	r6, [sp, #8]
   19b60:	ldrd	r8, [sp, #16]
   19b64:	ldr	sl, [sp, #24]
   19b68:	add	sp, sp, #28
   19b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b70:	movw	r3, #47256	; 0xb898
   19b74:	movt	r3, #1
   19b78:	mov	r2, #60	; 0x3c
   19b7c:	movw	r1, #47268	; 0xb8a4
   19b80:	movt	r1, #1
   19b84:	movw	r0, #47288	; 0xb8b8
   19b88:	movt	r0, #1
   19b8c:	bl	11330 <__assert_fail@plt>
   19b90:	ldrd	r4, [r1]
   19b94:	ldrd	r2, [r0, #8]
   19b98:	cmp	r5, r3
   19b9c:	cmpeq	r4, r2
   19ba0:	moveq	r0, #1
   19ba4:	bne	19b38 <__assert_fail@plt+0x8808>
   19ba8:	b	19b58 <__assert_fail@plt+0x8828>
   19bac:	orrs	r3, r8, r9
   19bb0:	moveq	r0, #1
   19bb4:	beq	19b58 <__assert_fail@plt+0x8828>
   19bb8:	b	19bc8 <__assert_fail@plt+0x8898>
   19bbc:	mov	r2, #1
   19bc0:	mov	r3, #0
   19bc4:	strd	r2, [r0, #16]
   19bc8:	ldrd	r2, [r1]
   19bcc:	strd	r2, [r0, #8]
   19bd0:	ldrd	r2, [r1, #96]	; 0x60
   19bd4:	strd	r2, [r0]
   19bd8:	mov	r0, #0
   19bdc:	b	19b58 <__assert_fail@plt+0x8828>
   19be0:	strd	r4, [sp, #-16]!
   19be4:	str	r6, [sp, #8]
   19be8:	str	lr, [sp, #12]
   19bec:	sub	sp, sp, #8
   19bf0:	mov	r4, r0
   19bf4:	bl	1121c <fileno@plt>
   19bf8:	cmp	r0, #0
   19bfc:	blt	19c74 <__assert_fail@plt+0x8944>
   19c00:	mov	r0, r4
   19c04:	bl	11180 <__freading@plt>
   19c08:	cmp	r0, #0
   19c0c:	beq	19c40 <__assert_fail@plt+0x8910>
   19c10:	mov	r0, r4
   19c14:	bl	1121c <fileno@plt>
   19c18:	mov	r3, #1
   19c1c:	str	r3, [sp]
   19c20:	mov	r2, #0
   19c24:	mov	r3, #0
   19c28:	bl	11114 <lseek64@plt>
   19c2c:	mvn	r2, #0
   19c30:	mvn	r3, #0
   19c34:	cmp	r1, r3
   19c38:	cmpeq	r0, r2
   19c3c:	beq	19c80 <__assert_fail@plt+0x8950>
   19c40:	mov	r0, r4
   19c44:	bl	19f44 <__assert_fail@plt+0x8c14>
   19c48:	cmp	r0, #0
   19c4c:	beq	19c80 <__assert_fail@plt+0x8950>
   19c50:	bl	111ec <__errno_location@plt>
   19c54:	mov	r5, r0
   19c58:	ldr	r6, [r0]
   19c5c:	mov	r0, r4
   19c60:	bl	11234 <fclose@plt>
   19c64:	cmp	r6, #0
   19c68:	strne	r6, [r5]
   19c6c:	mvnne	r0, #0
   19c70:	b	19c88 <__assert_fail@plt+0x8958>
   19c74:	mov	r0, r4
   19c78:	bl	11234 <fclose@plt>
   19c7c:	b	19c88 <__assert_fail@plt+0x8958>
   19c80:	mov	r0, r4
   19c84:	bl	11234 <fclose@plt>
   19c88:	add	sp, sp, #8
   19c8c:	ldrd	r4, [sp]
   19c90:	ldr	r6, [sp, #8]
   19c94:	add	sp, sp, #12
   19c98:	pop	{pc}		; (ldr pc, [sp], #4)
   19c9c:	push	{r1, r2, r3}
   19ca0:	strd	r4, [sp, #-16]!
   19ca4:	str	r6, [sp, #8]
   19ca8:	str	lr, [sp, #12]
   19cac:	sub	sp, sp, #12
   19cb0:	mov	r5, r0
   19cb4:	ldr	r1, [sp, #28]
   19cb8:	add	r3, sp, #32
   19cbc:	str	r3, [sp, #4]
   19cc0:	cmp	r1, #0
   19cc4:	beq	19d0c <__assert_fail@plt+0x89dc>
   19cc8:	movw	r3, #1030	; 0x406
   19ccc:	cmp	r1, r3
   19cd0:	beq	19d48 <__assert_fail@plt+0x8a18>
   19cd4:	cmp	r1, #11
   19cd8:	beq	19ef8 <__assert_fail@plt+0x8bc8>
   19cdc:	bgt	19e84 <__assert_fail@plt+0x8b54>
   19ce0:	cmp	r1, #3
   19ce4:	beq	19ef8 <__assert_fail@plt+0x8bc8>
   19ce8:	ble	19e44 <__assert_fail@plt+0x8b14>
   19cec:	cmp	r1, #8
   19cf0:	beq	19e64 <__assert_fail@plt+0x8b34>
   19cf4:	ble	19e5c <__assert_fail@plt+0x8b2c>
   19cf8:	cmp	r1, #9
   19cfc:	beq	19ef8 <__assert_fail@plt+0x8bc8>
   19d00:	cmp	r1, #10
   19d04:	bne	19ebc <__assert_fail@plt+0x8b8c>
   19d08:	b	19e64 <__assert_fail@plt+0x8b34>
   19d0c:	ldr	r3, [sp, #4]
   19d10:	add	r2, r3, #4
   19d14:	str	r2, [sp, #4]
   19d18:	ldr	r2, [r3]
   19d1c:	mov	r1, #0
   19d20:	bl	1124c <fcntl64@plt>
   19d24:	mov	r4, r0
   19d28:	mov	r0, r4
   19d2c:	add	sp, sp, #12
   19d30:	ldrd	r4, [sp]
   19d34:	ldr	r6, [sp, #8]
   19d38:	ldr	lr, [sp, #12]
   19d3c:	add	sp, sp, #16
   19d40:	add	sp, sp, #12
   19d44:	bx	lr
   19d48:	ldr	r3, [sp, #4]
   19d4c:	add	r2, r3, #4
   19d50:	str	r2, [sp, #4]
   19d54:	ldr	r6, [r3]
   19d58:	movw	r3, #49908	; 0xc2f4
   19d5c:	movt	r3, #2
   19d60:	ldr	r3, [r3]
   19d64:	cmp	r3, #0
   19d68:	blt	19dd0 <__assert_fail@plt+0x8aa0>
   19d6c:	mov	r2, r6
   19d70:	movw	r1, #1030	; 0x406
   19d74:	bl	1124c <fcntl64@plt>
   19d78:	subs	r4, r0, #0
   19d7c:	blt	19d94 <__assert_fail@plt+0x8a64>
   19d80:	movw	r3, #49908	; 0xc2f4
   19d84:	movt	r3, #2
   19d88:	mov	r2, #1
   19d8c:	str	r2, [r3]
   19d90:	b	19d28 <__assert_fail@plt+0x89f8>
   19d94:	bl	111ec <__errno_location@plt>
   19d98:	ldr	r3, [r0]
   19d9c:	cmp	r3, #22
   19da0:	bne	19d80 <__assert_fail@plt+0x8a50>
   19da4:	mov	r2, r6
   19da8:	mov	r1, #0
   19dac:	mov	r0, r5
   19db0:	bl	1124c <fcntl64@plt>
   19db4:	subs	r4, r0, #0
   19db8:	blt	19d28 <__assert_fail@plt+0x89f8>
   19dbc:	movw	r3, #49908	; 0xc2f4
   19dc0:	movt	r3, #2
   19dc4:	mvn	r2, #0
   19dc8:	str	r2, [r3]
   19dcc:	b	19df8 <__assert_fail@plt+0x8ac8>
   19dd0:	mov	r2, r6
   19dd4:	mov	r1, #0
   19dd8:	bl	1124c <fcntl64@plt>
   19ddc:	subs	r4, r0, #0
   19de0:	blt	19d28 <__assert_fail@plt+0x89f8>
   19de4:	movw	r3, #49908	; 0xc2f4
   19de8:	movt	r3, #2
   19dec:	ldr	r3, [r3]
   19df0:	cmn	r3, #1
   19df4:	bne	19d28 <__assert_fail@plt+0x89f8>
   19df8:	mov	r1, #1
   19dfc:	mov	r0, r4
   19e00:	bl	1124c <fcntl64@plt>
   19e04:	subs	r2, r0, #0
   19e08:	blt	19e24 <__assert_fail@plt+0x8af4>
   19e0c:	orr	r2, r2, #1
   19e10:	mov	r1, #2
   19e14:	mov	r0, r4
   19e18:	bl	1124c <fcntl64@plt>
   19e1c:	cmn	r0, #1
   19e20:	bne	19d28 <__assert_fail@plt+0x89f8>
   19e24:	bl	111ec <__errno_location@plt>
   19e28:	mov	r5, r0
   19e2c:	ldr	r6, [r0]
   19e30:	mov	r0, r4
   19e34:	bl	112f4 <close@plt>
   19e38:	str	r6, [r5]
   19e3c:	mvn	r4, #0
   19e40:	b	19d28 <__assert_fail@plt+0x89f8>
   19e44:	cmp	r1, #1
   19e48:	beq	19ef8 <__assert_fail@plt+0x8bc8>
   19e4c:	bgt	19e64 <__assert_fail@plt+0x8b34>
   19e50:	cmp	r1, #0
   19e54:	bne	19ebc <__assert_fail@plt+0x8b8c>
   19e58:	b	19e64 <__assert_fail@plt+0x8b34>
   19e5c:	cmp	r1, #4
   19e60:	bne	19ebc <__assert_fail@plt+0x8b8c>
   19e64:	ldr	r3, [sp, #4]
   19e68:	add	r2, r3, #4
   19e6c:	str	r2, [sp, #4]
   19e70:	ldr	r2, [r3]
   19e74:	mov	r0, r5
   19e78:	bl	1124c <fcntl64@plt>
   19e7c:	mov	r4, r0
   19e80:	b	19d28 <__assert_fail@plt+0x89f8>
   19e84:	movw	r3, #1031	; 0x407
   19e88:	cmp	r1, r3
   19e8c:	bgt	19edc <__assert_fail@plt+0x8bac>
   19e90:	movw	r3, #1030	; 0x406
   19e94:	cmp	r1, r3
   19e98:	bge	19e64 <__assert_fail@plt+0x8b34>
   19e9c:	movw	r3, #1025	; 0x401
   19ea0:	cmp	r1, r3
   19ea4:	beq	19ef8 <__assert_fail@plt+0x8bc8>
   19ea8:	movw	r3, #1026	; 0x402
   19eac:	cmp	r1, r3
   19eb0:	beq	19e64 <__assert_fail@plt+0x8b34>
   19eb4:	cmp	r1, #1024	; 0x400
   19eb8:	beq	19e64 <__assert_fail@plt+0x8b34>
   19ebc:	ldr	r3, [sp, #4]
   19ec0:	add	r2, r3, #4
   19ec4:	str	r2, [sp, #4]
   19ec8:	ldr	r2, [r3]
   19ecc:	mov	r0, r5
   19ed0:	bl	1124c <fcntl64@plt>
   19ed4:	mov	r4, r0
   19ed8:	b	19d28 <__assert_fail@plt+0x89f8>
   19edc:	movw	r3, #1033	; 0x409
   19ee0:	cmp	r1, r3
   19ee4:	beq	19e64 <__assert_fail@plt+0x8b34>
   19ee8:	blt	19ef8 <__assert_fail@plt+0x8bc8>
   19eec:	movw	r3, #1034	; 0x40a
   19ef0:	cmp	r1, r3
   19ef4:	bne	19ebc <__assert_fail@plt+0x8b8c>
   19ef8:	mov	r0, r5
   19efc:	bl	1124c <fcntl64@plt>
   19f00:	mov	r4, r0
   19f04:	b	19d28 <__assert_fail@plt+0x89f8>
   19f08:	push	{r1, r2, r3}
   19f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   19f10:	sub	sp, sp, #8
   19f14:	ldr	r1, [sp, #12]
   19f18:	tst	r1, #64	; 0x40
   19f1c:	addne	r3, sp, #20
   19f20:	strne	r3, [sp, #4]
   19f24:	ldrne	r2, [sp, #16]
   19f28:	moveq	r2, #0
   19f2c:	bl	1115c <open64@plt>
   19f30:	bl	18750 <__assert_fail@plt+0x7420>
   19f34:	add	sp, sp, #8
   19f38:	pop	{lr}		; (ldr lr, [sp], #4)
   19f3c:	add	sp, sp, #12
   19f40:	bx	lr
   19f44:	str	r4, [sp, #-8]!
   19f48:	str	lr, [sp, #4]
   19f4c:	sub	sp, sp, #8
   19f50:	subs	r4, r0, #0
   19f54:	beq	19f68 <__assert_fail@plt+0x8c38>
   19f58:	mov	r0, r4
   19f5c:	bl	11180 <__freading@plt>
   19f60:	cmp	r0, #0
   19f64:	bne	19f80 <__assert_fail@plt+0x8c50>
   19f68:	mov	r0, r4
   19f6c:	bl	1103c <fflush@plt>
   19f70:	add	sp, sp, #8
   19f74:	ldr	r4, [sp]
   19f78:	add	sp, sp, #4
   19f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f80:	ldr	r3, [r4]
   19f84:	tst	r3, #256	; 0x100
   19f88:	bne	19f98 <__assert_fail@plt+0x8c68>
   19f8c:	mov	r0, r4
   19f90:	bl	1103c <fflush@plt>
   19f94:	b	19f70 <__assert_fail@plt+0x8c40>
   19f98:	mov	r3, #1
   19f9c:	str	r3, [sp]
   19fa0:	mov	r2, #0
   19fa4:	mov	r3, #0
   19fa8:	mov	r0, r4
   19fac:	bl	19fb4 <__assert_fail@plt+0x8c84>
   19fb0:	b	19f8c <__assert_fail@plt+0x8c5c>
   19fb4:	str	r4, [sp, #-16]!
   19fb8:	strd	r6, [sp, #4]
   19fbc:	str	lr, [sp, #12]
   19fc0:	sub	sp, sp, #8
   19fc4:	mov	r4, r0
   19fc8:	mov	r6, r2
   19fcc:	mov	r7, r3
   19fd0:	ldr	r2, [r0, #8]
   19fd4:	ldr	r3, [r0, #4]
   19fd8:	cmp	r2, r3
   19fdc:	beq	1a00c <__assert_fail@plt+0x8cdc>
   19fe0:	ldr	r3, [sp, #24]
   19fe4:	str	r3, [sp]
   19fe8:	mov	r2, r6
   19fec:	mov	r3, r7
   19ff0:	mov	r0, r4
   19ff4:	bl	11240 <fseeko64@plt>
   19ff8:	add	sp, sp, #8
   19ffc:	ldr	r4, [sp]
   1a000:	ldrd	r6, [sp, #4]
   1a004:	add	sp, sp, #12
   1a008:	pop	{pc}		; (ldr pc, [sp], #4)
   1a00c:	ldr	r2, [r0, #20]
   1a010:	ldr	r3, [r0, #16]
   1a014:	cmp	r2, r3
   1a018:	bne	19fe0 <__assert_fail@plt+0x8cb0>
   1a01c:	ldr	r3, [r0, #36]	; 0x24
   1a020:	cmp	r3, #0
   1a024:	bne	19fe0 <__assert_fail@plt+0x8cb0>
   1a028:	bl	1121c <fileno@plt>
   1a02c:	ldr	r3, [sp, #24]
   1a030:	str	r3, [sp]
   1a034:	mov	r2, r6
   1a038:	mov	r3, r7
   1a03c:	bl	11114 <lseek64@plt>
   1a040:	mvn	r2, #0
   1a044:	mvn	r3, #0
   1a048:	cmp	r1, r3
   1a04c:	cmpeq	r0, r2
   1a050:	beq	1a06c <__assert_fail@plt+0x8d3c>
   1a054:	ldr	r3, [r4]
   1a058:	bic	r3, r3, #16
   1a05c:	str	r3, [r4]
   1a060:	strd	r0, [r4, #80]	; 0x50
   1a064:	mov	r0, #0
   1a068:	b	19ff8 <__assert_fail@plt+0x8cc8>
   1a06c:	mvn	r0, #0
   1a070:	b	19ff8 <__assert_fail@plt+0x8cc8>
   1a074:	str	r4, [sp, #-8]!
   1a078:	str	lr, [sp, #4]
   1a07c:	mov	r0, #14
   1a080:	bl	11270 <nl_langinfo@plt>
   1a084:	cmp	r0, #0
   1a088:	beq	1a0ac <__assert_fail@plt+0x8d7c>
   1a08c:	ldrb	r2, [r0]
   1a090:	movw	r3, #47312	; 0xb8d0
   1a094:	movt	r3, #1
   1a098:	cmp	r2, #0
   1a09c:	moveq	r0, r3
   1a0a0:	ldr	r4, [sp]
   1a0a4:	add	sp, sp, #4
   1a0a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0ac:	movw	r0, #47312	; 0xb8d0
   1a0b0:	movt	r0, #1
   1a0b4:	b	1a0a0 <__assert_fail@plt+0x8d70>
   1a0b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a0bc:	strd	r6, [sp, #8]
   1a0c0:	str	lr, [sp, #16]
   1a0c4:	sub	sp, sp, #12
   1a0c8:	mov	r7, r1
   1a0cc:	mov	r5, r2
   1a0d0:	subs	r6, r0, #0
   1a0d4:	addeq	r6, sp, #4
   1a0d8:	mov	r0, r6
   1a0dc:	bl	11144 <mbrtowc@plt>
   1a0e0:	mov	r4, r0
   1a0e4:	cmp	r5, #0
   1a0e8:	cmnne	r0, #3
   1a0ec:	bhi	1a108 <__assert_fail@plt+0x8dd8>
   1a0f0:	mov	r0, r4
   1a0f4:	add	sp, sp, #12
   1a0f8:	ldrd	r4, [sp]
   1a0fc:	ldrd	r6, [sp, #8]
   1a100:	add	sp, sp, #16
   1a104:	pop	{pc}		; (ldr pc, [sp], #4)
   1a108:	mov	r0, #0
   1a10c:	bl	1a184 <__assert_fail@plt+0x8e54>
   1a110:	cmp	r0, #0
   1a114:	bne	1a0f0 <__assert_fail@plt+0x8dc0>
   1a118:	ldrb	r3, [r7]
   1a11c:	str	r3, [r6]
   1a120:	mov	r4, #1
   1a124:	b	1a0f0 <__assert_fail@plt+0x8dc0>
   1a128:	str	r4, [sp, #-8]!
   1a12c:	str	lr, [sp, #4]
   1a130:	umull	r2, r3, r1, r2
   1a134:	cmp	r3, #0
   1a138:	bne	1a150 <__assert_fail@plt+0x8e20>
   1a13c:	mov	r1, r2
   1a140:	bl	199ec <__assert_fail@plt+0x86bc>
   1a144:	ldr	r4, [sp]
   1a148:	add	sp, sp, #4
   1a14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a150:	bl	111ec <__errno_location@plt>
   1a154:	mov	r3, #12
   1a158:	str	r3, [r0]
   1a15c:	mov	r0, #0
   1a160:	b	1a144 <__assert_fail@plt+0x8e14>
   1a164:	str	r4, [sp, #-8]!
   1a168:	str	lr, [sp, #4]
   1a16c:	mov	r2, #3
   1a170:	mov	r1, #0
   1a174:	bl	19c9c <__assert_fail@plt+0x896c>
   1a178:	ldr	r4, [sp]
   1a17c:	add	sp, sp, #4
   1a180:	pop	{pc}		; (ldr pc, [sp], #4)
   1a184:	push	{lr}		; (str lr, [sp, #-4]!)
   1a188:	sub	sp, sp, #268	; 0x10c
   1a18c:	movw	r2, #257	; 0x101
   1a190:	add	r1, sp, #4
   1a194:	bl	1a1e0 <__assert_fail@plt+0x8eb0>
   1a198:	cmp	r0, #0
   1a19c:	movne	r0, #0
   1a1a0:	bne	1a1d8 <__assert_fail@plt+0x8ea8>
   1a1a4:	movw	r1, #47320	; 0xb8d8
   1a1a8:	movt	r1, #1
   1a1ac:	add	r0, sp, #4
   1a1b0:	bl	11024 <strcmp@plt>
   1a1b4:	cmp	r0, #0
   1a1b8:	beq	1a1d4 <__assert_fail@plt+0x8ea4>
   1a1bc:	movw	r1, #47324	; 0xb8dc
   1a1c0:	movt	r1, #1
   1a1c4:	add	r0, sp, #4
   1a1c8:	bl	11024 <strcmp@plt>
   1a1cc:	adds	r0, r0, #0
   1a1d0:	movne	r0, #1
   1a1d4:	and	r0, r0, #1
   1a1d8:	add	sp, sp, #268	; 0x10c
   1a1dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1e0:	strd	r4, [sp, #-16]!
   1a1e4:	str	r6, [sp, #8]
   1a1e8:	str	lr, [sp, #12]
   1a1ec:	mov	r6, r1
   1a1f0:	mov	r4, r2
   1a1f4:	mov	r1, #0
   1a1f8:	bl	11258 <setlocale@plt>
   1a1fc:	subs	r5, r0, #0
   1a200:	beq	1a244 <__assert_fail@plt+0x8f14>
   1a204:	mov	r0, r5
   1a208:	bl	111bc <strlen@plt>
   1a20c:	cmp	r4, r0
   1a210:	bhi	1a260 <__assert_fail@plt+0x8f30>
   1a214:	cmp	r4, #0
   1a218:	moveq	r0, #34	; 0x22
   1a21c:	beq	1a274 <__assert_fail@plt+0x8f44>
   1a220:	sub	r4, r4, #1
   1a224:	mov	r2, r4
   1a228:	mov	r1, r5
   1a22c:	mov	r0, r6
   1a230:	bl	11078 <memcpy@plt>
   1a234:	mov	r3, #0
   1a238:	strb	r3, [r6, r4]
   1a23c:	mov	r0, #34	; 0x22
   1a240:	b	1a274 <__assert_fail@plt+0x8f44>
   1a244:	cmp	r4, #0
   1a248:	moveq	r0, #22
   1a24c:	beq	1a274 <__assert_fail@plt+0x8f44>
   1a250:	mov	r3, #0
   1a254:	strb	r3, [r6]
   1a258:	mov	r0, #22
   1a25c:	b	1a274 <__assert_fail@plt+0x8f44>
   1a260:	add	r2, r0, #1
   1a264:	mov	r1, r5
   1a268:	mov	r0, r6
   1a26c:	bl	11078 <memcpy@plt>
   1a270:	mov	r0, #0
   1a274:	ldrd	r4, [sp]
   1a278:	ldr	r6, [sp, #8]
   1a27c:	add	sp, sp, #12
   1a280:	pop	{pc}		; (ldr pc, [sp], #4)
   1a284:	str	r4, [sp, #-8]!
   1a288:	str	lr, [sp, #4]
   1a28c:	mov	r1, #0
   1a290:	bl	11258 <setlocale@plt>
   1a294:	ldr	r4, [sp]
   1a298:	add	sp, sp, #4
   1a29c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2a0:	cmp	r3, #0
   1a2a4:	cmpeq	r2, #0
   1a2a8:	bne	1a2c0 <__assert_fail@plt+0x8f90>
   1a2ac:	cmp	r1, #0
   1a2b0:	cmpeq	r0, #0
   1a2b4:	mvnne	r1, #0
   1a2b8:	mvnne	r0, #0
   1a2bc:	b	1a2dc <__assert_fail@plt+0x8fac>
   1a2c0:	sub	sp, sp, #8
   1a2c4:	push	{sp, lr}
   1a2c8:	bl	1a2ec <__assert_fail@plt+0x8fbc>
   1a2cc:	ldr	lr, [sp, #4]
   1a2d0:	add	sp, sp, #8
   1a2d4:	pop	{r2, r3}
   1a2d8:	bx	lr
   1a2dc:	push	{r1, lr}
   1a2e0:	mov	r0, #8
   1a2e4:	bl	11018 <raise@plt>
   1a2e8:	pop	{r1, pc}
   1a2ec:	cmp	r1, r3
   1a2f0:	cmpeq	r0, r2
   1a2f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2f8:	mov	r4, r0
   1a2fc:	movcc	r0, #0
   1a300:	mov	r5, r1
   1a304:	ldr	lr, [sp, #36]	; 0x24
   1a308:	movcc	r1, r0
   1a30c:	bcc	1a408 <__assert_fail@plt+0x90d8>
   1a310:	cmp	r3, #0
   1a314:	clzeq	ip, r2
   1a318:	clzne	ip, r3
   1a31c:	addeq	ip, ip, #32
   1a320:	cmp	r5, #0
   1a324:	clzeq	r1, r4
   1a328:	addeq	r1, r1, #32
   1a32c:	clzne	r1, r5
   1a330:	sub	ip, ip, r1
   1a334:	sub	sl, ip, #32
   1a338:	lsl	r9, r3, ip
   1a33c:	rsb	fp, ip, #32
   1a340:	orr	r9, r9, r2, lsl sl
   1a344:	orr	r9, r9, r2, lsr fp
   1a348:	lsl	r8, r2, ip
   1a34c:	cmp	r5, r9
   1a350:	cmpeq	r4, r8
   1a354:	movcc	r0, #0
   1a358:	movcc	r1, r0
   1a35c:	bcc	1a378 <__assert_fail@plt+0x9048>
   1a360:	mov	r0, #1
   1a364:	subs	r4, r4, r8
   1a368:	lsl	r1, r0, sl
   1a36c:	orr	r1, r1, r0, lsr fp
   1a370:	lsl	r0, r0, ip
   1a374:	sbc	r5, r5, r9
   1a378:	cmp	ip, #0
   1a37c:	beq	1a408 <__assert_fail@plt+0x90d8>
   1a380:	lsr	r6, r8, #1
   1a384:	orr	r6, r6, r9, lsl #31
   1a388:	lsr	r7, r9, #1
   1a38c:	mov	r2, ip
   1a390:	b	1a3b4 <__assert_fail@plt+0x9084>
   1a394:	subs	r3, r4, r6
   1a398:	sbc	r8, r5, r7
   1a39c:	adds	r3, r3, r3
   1a3a0:	adc	r8, r8, r8
   1a3a4:	adds	r4, r3, #1
   1a3a8:	adc	r5, r8, #0
   1a3ac:	subs	r2, r2, #1
   1a3b0:	beq	1a3d0 <__assert_fail@plt+0x90a0>
   1a3b4:	cmp	r5, r7
   1a3b8:	cmpeq	r4, r6
   1a3bc:	bcs	1a394 <__assert_fail@plt+0x9064>
   1a3c0:	adds	r4, r4, r4
   1a3c4:	adc	r5, r5, r5
   1a3c8:	subs	r2, r2, #1
   1a3cc:	bne	1a3b4 <__assert_fail@plt+0x9084>
   1a3d0:	lsr	r3, r4, ip
   1a3d4:	orr	r3, r3, r5, lsl fp
   1a3d8:	lsr	r2, r5, ip
   1a3dc:	orr	r3, r3, r5, lsr sl
   1a3e0:	adds	r0, r0, r4
   1a3e4:	mov	r4, r3
   1a3e8:	lsl	r3, r2, ip
   1a3ec:	orr	r3, r3, r4, lsl sl
   1a3f0:	lsl	ip, r4, ip
   1a3f4:	orr	r3, r3, r4, lsr fp
   1a3f8:	adc	r1, r1, r5
   1a3fc:	subs	r0, r0, ip
   1a400:	mov	r5, r2
   1a404:	sbc	r1, r1, r3
   1a408:	cmp	lr, #0
   1a40c:	strdne	r4, [lr]
   1a410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a418:	mov	r7, r0
   1a41c:	ldr	r6, [pc, #72]	; 1a46c <__assert_fail@plt+0x913c>
   1a420:	ldr	r5, [pc, #72]	; 1a470 <__assert_fail@plt+0x9140>
   1a424:	add	r6, pc, r6
   1a428:	add	r5, pc, r5
   1a42c:	sub	r6, r6, r5
   1a430:	mov	r8, r1
   1a434:	mov	r9, r2
   1a438:	bl	10fc8 <fstatfs64@plt-0x20>
   1a43c:	asrs	r6, r6, #2
   1a440:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a444:	mov	r4, #0
   1a448:	add	r4, r4, #1
   1a44c:	ldr	r3, [r5], #4
   1a450:	mov	r2, r9
   1a454:	mov	r1, r8
   1a458:	mov	r0, r7
   1a45c:	blx	r3
   1a460:	cmp	r6, r4
   1a464:	bne	1a448 <__assert_fail@plt+0x9118>
   1a468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a46c:	andeq	r1, r1, r8, ror #21
   1a470:	andeq	r1, r1, r0, ror #21
   1a474:	bx	lr
   1a478:	ldr	r3, [pc, #12]	; 1a48c <__assert_fail@plt+0x915c>
   1a47c:	mov	r1, #0
   1a480:	add	r3, pc, r3
   1a484:	ldr	r2, [r3]
   1a488:	b	111f8 <__cxa_atexit@plt>
   1a48c:	andeq	r1, r1, r8, lsr #25

Disassembly of section .fini:

0001a490 <.fini>:
   1a490:	push	{r3, lr}
   1a494:	pop	{r3, pc}
