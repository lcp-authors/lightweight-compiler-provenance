
../repos/prog2/0.10:     file format elf32-littlearm


Disassembly of section .init:

00010630 <.init>:
   10630:	push	{r3, lr}
   10634:	bl	106d4 <_start@@Base+0x3c>
   10638:	pop	{r3, pc}

Disassembly of section .plt:

0001063c <printf@plt-0x14>:
   1063c:	push	{lr}		; (str lr, [sp, #-4]!)
   10640:	ldr	lr, [pc, #4]	; 1064c <printf@plt-0x4>
   10644:	add	lr, pc, lr
   10648:	ldr	pc, [lr, #8]!
   1064c:			; <UNDEFINED> instruction: 0x000109b4

00010650 <printf@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2484]!	; 0x9b4

0001065c <memcpy@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2476]!	; 0x9ac

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2468]!	; 0x9a4

00010674 <__gmon_start__@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2460]!	; 0x99c

00010680 <__isoc99_scanf@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2452]!	; 0x994

0001068c <abort@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2444]!	; 0x98c

Disassembly of section .text:

00010698 <_start@@Base>:
   10698:	mov	fp, #0
   1069c:	mov	lr, #0
   106a0:	pop	{r1}		; (ldr r1, [sp], #4)
   106a4:	mov	r2, sp
   106a8:	push	{r2}		; (str r2, [sp, #-4]!)
   106ac:	push	{r0}		; (str r0, [sp, #-4]!)
   106b0:	ldr	ip, [pc, #16]	; 106c8 <_start@@Base+0x30>
   106b4:	push	{ip}		; (str ip, [sp, #-4]!)
   106b8:	ldr	r0, [pc, #12]	; 106cc <_start@@Base+0x34>
   106bc:	ldr	r3, [pc, #12]	; 106d0 <_start@@Base+0x38>
   106c0:	bl	10668 <__libc_start_main@plt>
   106c4:	bl	1068c <abort@plt>
   106c8:	strdeq	r0, [r1], -r8
   106cc:	andeq	r0, r1, r0, lsl r9
   106d0:	muleq	r1, r8, r9
   106d4:	ldr	r3, [pc, #20]	; 106f0 <_start@@Base+0x58>
   106d8:	ldr	r2, [pc, #20]	; 106f4 <_start@@Base+0x5c>
   106dc:	add	r3, pc, r3
   106e0:	ldr	r2, [r3, r2]
   106e4:	cmp	r2, #0
   106e8:	bxeq	lr
   106ec:	b	10674 <__gmon_start__@plt>
   106f0:	andeq	r0, r1, ip, lsl r9
   106f4:	andeq	r0, r0, r4, lsr #32
   106f8:	ldr	r3, [pc, #28]	; 1071c <_start@@Base+0x84>
   106fc:	ldr	r0, [pc, #28]	; 10720 <_start@@Base+0x88>
   10700:	sub	r3, r3, r0
   10704:	cmp	r3, #6
   10708:	bxls	lr
   1070c:	ldr	r3, [pc, #16]	; 10724 <_start@@Base+0x8c>
   10710:	cmp	r3, #0
   10714:	bxeq	lr
   10718:	bx	r3
   1071c:	andeq	r1, r2, r3, lsr r0
   10720:	andeq	r1, r2, r0, lsr r0
   10724:	andeq	r0, r0, r0
   10728:	ldr	r1, [pc, #36]	; 10754 <_start@@Base+0xbc>
   1072c:	ldr	r0, [pc, #36]	; 10758 <_start@@Base+0xc0>
   10730:	sub	r1, r1, r0
   10734:	asr	r1, r1, #2
   10738:	add	r1, r1, r1, lsr #31
   1073c:	asrs	r1, r1, #1
   10740:	bxeq	lr
   10744:	ldr	r3, [pc, #16]	; 1075c <_start@@Base+0xc4>
   10748:	cmp	r3, #0
   1074c:	bxeq	lr
   10750:	bx	r3
   10754:	andeq	r1, r2, r0, lsr r0
   10758:	andeq	r1, r2, r0, lsr r0
   1075c:	andeq	r0, r0, r0
   10760:	push	{r4, lr}
   10764:	ldr	r4, [pc, #24]	; 10784 <_start@@Base+0xec>
   10768:	ldrb	r3, [r4]
   1076c:	cmp	r3, #0
   10770:	popne	{r4, pc}
   10774:	bl	106f8 <_start@@Base+0x60>
   10778:	mov	r3, #1
   1077c:	strb	r3, [r4]
   10780:	pop	{r4, pc}
   10784:	andeq	r1, r2, r0, lsr r0
   10788:	ldr	r0, [pc, #40]	; 107b8 <_start@@Base+0x120>
   1078c:	ldr	r3, [r0]
   10790:	cmp	r3, #0
   10794:	bne	1079c <_start@@Base+0x104>
   10798:	b	10728 <_start@@Base+0x90>
   1079c:	ldr	r3, [pc, #24]	; 107bc <_start@@Base+0x124>
   107a0:	cmp	r3, #0
   107a4:	beq	10798 <_start@@Base+0x100>
   107a8:	push	{r4, lr}
   107ac:	blx	r3
   107b0:	pop	{r4, lr}
   107b4:	b	10728 <_start@@Base+0x90>
   107b8:	andeq	r0, r2, r4, lsl pc
   107bc:	andeq	r0, r0, r0

000107c0 <nova_tarefa@@Base>:
   107c0:	push	{lr}		; (str lr, [sp, #-4]!)
   107c4:	sub	sp, sp, #12
   107c8:	mov	r1, r0
   107cc:	add	r3, r0, #64	; 0x40
   107d0:	str	r3, [sp]
   107d4:	add	r3, r0, #60	; 0x3c
   107d8:	add	r2, r0, #30
   107dc:	ldr	r0, [pc, #20]	; 107f8 <nova_tarefa@@Base+0x38>
   107e0:	bl	10680 <__isoc99_scanf@plt>
   107e4:	cmp	r0, #4
   107e8:	movne	r0, #0
   107ec:	moveq	r0, #1
   107f0:	add	sp, sp, #12
   107f4:	pop	{pc}		; (ldr pc, [sp], #4)
   107f8:	andeq	r0, r1, r8, lsl #20

000107fc <ler_tarefas@@Base>:
   107fc:	push	{r4, r5, r6, lr}
   10800:	mov	r4, r0
   10804:	mov	r5, #0
   10808:	mov	r0, r4
   1080c:	bl	107c0 <nova_tarefa@@Base>
   10810:	add	r4, r4, #68	; 0x44
   10814:	cmp	r5, #99	; 0x63
   10818:	movgt	r3, #0
   1081c:	movle	r3, #1
   10820:	cmp	r0, #0
   10824:	moveq	r3, #0
   10828:	cmp	r3, #0
   1082c:	addne	r5, r5, #1
   10830:	bne	10808 <ler_tarefas@@Base+0xc>
   10834:	mov	r0, r5
   10838:	pop	{r4, r5, r6, pc}

0001083c <lista_tarefas@@Base>:
   1083c:	push	{r4, r5, r6, r7, lr}
   10840:	sub	sp, sp, #12
   10844:	subs	r6, r1, #0
   10848:	ble	10884 <lista_tarefas@@Base+0x48>
   1084c:	mov	r4, r0
   10850:	mov	r5, #0
   10854:	ldr	r7, [pc, #48]	; 1088c <lista_tarefas@@Base+0x50>
   10858:	ldr	r3, [r4, #60]	; 0x3c
   1085c:	ldr	r2, [r4, #64]	; 0x40
   10860:	str	r2, [sp]
   10864:	add	r2, r4, #30
   10868:	mov	r1, r4
   1086c:	mov	r0, r7
   10870:	bl	10650 <printf@plt>
   10874:	add	r5, r5, #1
   10878:	add	r4, r4, #68	; 0x44
   1087c:	cmp	r6, r5
   10880:	bne	10858 <lista_tarefas@@Base+0x1c>
   10884:	add	sp, sp, #12
   10888:	pop	{r4, r5, r6, r7, pc}
   1088c:	andeq	r0, r1, r4, lsl sl

00010890 <analisa_tarefas@@Base>:
   10890:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10894:	subs	r9, r1, #0
   10898:	ble	108f0 <analisa_tarefas@@Base+0x60>
   1089c:	mov	r8, r2
   108a0:	mov	r4, r0
   108a4:	add	r7, r9, r9, lsl #4
   108a8:	add	r7, r0, r7, lsl #2
   108ac:	mov	r3, #0
   108b0:	mov	r6, r3
   108b4:	mov	sl, #68	; 0x44
   108b8:	b	108c8 <analisa_tarefas@@Base+0x38>
   108bc:	add	r4, r4, #68	; 0x44
   108c0:	cmp	r4, r7
   108c4:	beq	108f8 <analisa_tarefas@@Base+0x68>
   108c8:	ldr	r5, [r4, #60]	; 0x3c
   108cc:	add	r6, r6, r5
   108d0:	cmp	r5, r3
   108d4:	ble	108bc <analisa_tarefas@@Base+0x2c>
   108d8:	mov	r2, sl
   108dc:	mov	r1, r4
   108e0:	mov	r0, r8
   108e4:	bl	1065c <memcpy@plt>
   108e8:	mov	r3, r5
   108ec:	b	108bc <analisa_tarefas@@Base+0x2c>
   108f0:	mov	r6, #0
   108f4:	mov	r9, r6
   108f8:	vmov	s15, r6
   108fc:	vcvt.f32.s32	s15, s15
   10900:	vmov	s14, r9
   10904:	vcvt.f32.s32	s0, s14
   10908:	vdiv.f32	s0, s15, s0
   1090c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010910 <main@@Base>:
   10910:	push	{r4, lr}
   10914:	sub	sp, sp, #6848	; 0x1ac0
   10918:	sub	sp, sp, #32
   1091c:	add	r3, sp, #80	; 0x50
   10920:	str	r3, [sp]
   10924:	mov	r0, r3
   10928:	bl	107fc <ler_tarefas@@Base>
   1092c:	mov	r4, r0
   10930:	mov	r1, r0
   10934:	ldr	r0, [sp]
   10938:	bl	1083c <lista_tarefas@@Base>
   1093c:	mov	r1, r4
   10940:	ldr	r0, [pc, #68]	; 1098c <main@@Base+0x7c>
   10944:	bl	10650 <printf@plt>
   10948:	add	r3, sp, #12
   1094c:	str	r3, [sp, #4]
   10950:	mov	r2, r3
   10954:	mov	r1, r4
   10958:	ldr	r0, [sp]
   1095c:	bl	10890 <analisa_tarefas@@Base>
   10960:	vcvt.f64.f32	d7, s0
   10964:	vmov	r2, r3, d7
   10968:	ldr	r0, [pc, #32]	; 10990 <main@@Base+0x80>
   1096c:	bl	10650 <printf@plt>
   10970:	ldr	r1, [sp, #4]
   10974:	ldr	r0, [pc, #24]	; 10994 <main@@Base+0x84>
   10978:	bl	10650 <printf@plt>
   1097c:	mov	r0, #0
   10980:	add	sp, sp, #6848	; 0x1ac0
   10984:	add	sp, sp, #32
   10988:	pop	{r4, pc}
   1098c:	andeq	r0, r1, r4, lsr #20
   10990:	andeq	r0, r1, r4, asr #20
   10994:	andeq	r0, r1, r8, ror #20

00010998 <__libc_csu_init@@Base>:
   10998:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1099c:	mov	r7, r0
   109a0:	ldr	r6, [pc, #72]	; 109f0 <__libc_csu_init@@Base+0x58>
   109a4:	ldr	r5, [pc, #72]	; 109f4 <__libc_csu_init@@Base+0x5c>
   109a8:	add	r6, pc, r6
   109ac:	add	r5, pc, r5
   109b0:	sub	r6, r6, r5
   109b4:	mov	r8, r1
   109b8:	mov	r9, r2
   109bc:	bl	10630 <printf@plt-0x20>
   109c0:	asrs	r6, r6, #2
   109c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109c8:	mov	r4, #0
   109cc:	add	r4, r4, #1
   109d0:	ldr	r3, [r5], #4
   109d4:	mov	r2, r9
   109d8:	mov	r1, r8
   109dc:	mov	r0, r7
   109e0:	blx	r3
   109e4:	cmp	r6, r4
   109e8:	bne	109cc <__libc_csu_init@@Base+0x34>
   109ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109f0:	andeq	r0, r1, r0, ror #10
   109f4:	andeq	r0, r1, r8, asr r5

000109f8 <__libc_csu_fini@@Base>:
   109f8:	bx	lr

Disassembly of section .fini:

000109fc <.fini>:
   109fc:	push	{r3, lr}
   10a00:	pop	{r3, pc}
