
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	10f78 <__assert_fail@plt+0x48>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r8, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	mov	fp, #0
   10f40:	mov	lr, #0
   10f44:	pop	{r1}		; (ldr r1, [sp], #4)
   10f48:	mov	r2, sp
   10f4c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f50:	push	{r0}		; (str r0, [sp, #-4]!)
   10f54:	ldr	ip, [pc, #16]	; 10f6c <__assert_fail@plt+0x3c>
   10f58:	push	{ip}		; (str ip, [sp, #-4]!)
   10f5c:	ldr	r0, [pc, #12]	; 10f70 <__assert_fail@plt+0x40>
   10f60:	ldr	r3, [pc, #12]	; 10f74 <__assert_fail@plt+0x44>
   10f64:	bl	10dec <__libc_start_main@plt>
   10f68:	bl	10f24 <abort@plt>
   10f6c:	andeq	r7, r1, r0, lsl r4
   10f70:	andeq	r2, r1, r0, lsr r0
   10f74:			; <UNDEFINED> instruction: 0x000173b0
   10f78:	ldr	r3, [pc, #20]	; 10f94 <__assert_fail@plt+0x64>
   10f7c:	ldr	r2, [pc, #20]	; 10f98 <__assert_fail@plt+0x68>
   10f80:	add	r3, pc, r3
   10f84:	ldr	r2, [r3, r2]
   10f88:	cmp	r2, #0
   10f8c:	bxeq	lr
   10f90:	b	10e04 <__gmon_start__@plt>
   10f94:	andeq	r8, r1, r8, ror r0
   10f98:	andeq	r0, r0, r0, ror #1
   10f9c:	ldr	r3, [pc, #28]	; 10fc0 <__assert_fail@plt+0x90>
   10fa0:	ldr	r0, [pc, #28]	; 10fc4 <__assert_fail@plt+0x94>
   10fa4:	sub	r3, r3, r0
   10fa8:	cmp	r3, #6
   10fac:	bxls	lr
   10fb0:	ldr	r3, [pc, #16]	; 10fc8 <__assert_fail@plt+0x98>
   10fb4:	cmp	r3, #0
   10fb8:	bxeq	lr
   10fbc:	bx	r3
   10fc0:	andeq	r9, r2, r7, lsr r1
   10fc4:	andeq	r9, r2, r4, lsr r1
   10fc8:	andeq	r0, r0, r0
   10fcc:	ldr	r1, [pc, #36]	; 10ff8 <__assert_fail@plt+0xc8>
   10fd0:	ldr	r0, [pc, #36]	; 10ffc <__assert_fail@plt+0xcc>
   10fd4:	sub	r1, r1, r0
   10fd8:	asr	r1, r1, #2
   10fdc:	add	r1, r1, r1, lsr #31
   10fe0:	asrs	r1, r1, #1
   10fe4:	bxeq	lr
   10fe8:	ldr	r3, [pc, #16]	; 11000 <__assert_fail@plt+0xd0>
   10fec:	cmp	r3, #0
   10ff0:	bxeq	lr
   10ff4:	bx	r3
   10ff8:	andeq	r9, r2, r4, lsr r1
   10ffc:	andeq	r9, r2, r4, lsr r1
   11000:	andeq	r0, r0, r0
   11004:	push	{r4, lr}
   11008:	ldr	r4, [pc, #24]	; 11028 <__assert_fail@plt+0xf8>
   1100c:	ldrb	r3, [r4]
   11010:	cmp	r3, #0
   11014:	popne	{r4, pc}
   11018:	bl	10f9c <__assert_fail@plt+0x6c>
   1101c:	mov	r3, #1
   11020:	strb	r3, [r4]
   11024:	pop	{r4, pc}
   11028:	andeq	r9, r2, ip, asr r1
   1102c:	ldr	r0, [pc, #40]	; 1105c <__assert_fail@plt+0x12c>
   11030:	ldr	r3, [r0]
   11034:	cmp	r3, #0
   11038:	bne	11040 <__assert_fail@plt+0x110>
   1103c:	b	10fcc <__assert_fail@plt+0x9c>
   11040:	ldr	r3, [pc, #24]	; 11060 <__assert_fail@plt+0x130>
   11044:	cmp	r3, #0
   11048:	beq	1103c <__assert_fail@plt+0x10c>
   1104c:	push	{r4, lr}
   11050:	blx	r3
   11054:	pop	{r4, lr}
   11058:	b	10fcc <__assert_fail@plt+0x9c>
   1105c:	andeq	r8, r2, r4, lsl pc
   11060:	andeq	r0, r0, r0
   11064:	add	r3, r0, #2
   11068:	ldr	r0, [pc, #12]	; 1107c <__assert_fail@plt+0x14c>
   1106c:	smull	r2, r0, r0, r3
   11070:	sub	r0, r0, r3, asr #31
   11074:	lsl	r0, r0, #2
   11078:	bx	lr
   1107c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   11080:	add	r0, r0, #4
   11084:	ldr	r3, [pc, #16]	; 1109c <__assert_fail@plt+0x16c>
   11088:	smull	r2, r3, r3, r0
   1108c:	asr	r0, r0, #31
   11090:	rsb	r0, r0, r3, asr #1
   11094:	lsl	r0, r0, #3
   11098:	bx	lr
   1109c:	strbtvs	r6, [r6], -r7, ror #12
   110a0:	sub	r3, r0, #48	; 0x30
   110a4:	uxtb	r3, r3
   110a8:	sub	r0, r0, #65	; 0x41
   110ac:	uxtb	r0, r0
   110b0:	cmp	r0, #21
   110b4:	cmphi	r3, #9
   110b8:	movls	r0, #1
   110bc:	movhi	r0, #0
   110c0:	bx	lr
   110c4:	sub	r3, r0, #48	; 0x30
   110c8:	uxtb	r3, r3
   110cc:	sub	r0, r0, #65	; 0x41
   110d0:	uxtb	r0, r0
   110d4:	cmp	r0, #5
   110d8:	cmphi	r3, #9
   110dc:	movls	r0, #1
   110e0:	movhi	r0, #0
   110e4:	bx	lr
   110e8:	lsl	r0, r0, #1
   110ec:	bx	lr
   110f0:	cmp	r1, #0
   110f4:	bxeq	lr
   110f8:	push	{r4, lr}
   110fc:	add	r2, r2, #2
   11100:	mov	ip, r0
   11104:	add	r0, r0, r1
   11108:	ldr	lr, [pc, #36]	; 11134 <__assert_fail@plt+0x204>
   1110c:	ldrb	r3, [ip], #1
   11110:	ldrb	r4, [lr, r3, lsr #4]
   11114:	strb	r4, [r2, #-2]
   11118:	and	r3, r3, #15
   1111c:	ldrb	r3, [lr, r3]
   11120:	strb	r3, [r2, #-1]
   11124:	add	r2, r2, #2
   11128:	cmp	ip, r0
   1112c:	bne	1110c <__assert_fail@plt+0x1dc>
   11130:	pop	{r4, pc}
   11134:	andeq	r7, r1, r8, lsr r4
   11138:	push	{r4, lr}
   1113c:	ldr	r4, [sp, #8]
   11140:	mov	ip, #0
   11144:	str	ip, [r4]
   11148:	cmp	r2, #0
   1114c:	bne	11198 <__assert_fail@plt+0x268>
   11150:	ldrb	r0, [r0, #5]
   11154:	eor	r0, r0, #1
   11158:	pop	{r4, pc}
   1115c:	ldrb	lr, [r0, #5]
   11160:	cmp	lr, #0
   11164:	ldrbne	lr, [r0, #4]
   11168:	addne	ip, ip, lr, lsl #4
   1116c:	strbne	ip, [r3]
   11170:	ldrne	ip, [r4]
   11174:	addne	ip, ip, #1
   11178:	strne	ip, [r4]
   1117c:	addne	r3, r3, #1
   11180:	strbeq	ip, [r0, #4]
   11184:	ldrb	ip, [r0, #5]
   11188:	eor	ip, ip, #1
   1118c:	strb	ip, [r0, #5]
   11190:	subs	r2, r2, #1
   11194:	beq	111c8 <__assert_fail@plt+0x298>
   11198:	ldrb	ip, [r1], #1
   1119c:	cmp	ip, #10
   111a0:	beq	11190 <__assert_fail@plt+0x260>
   111a4:	sub	lr, ip, #48	; 0x30
   111a8:	cmp	lr, #9
   111ac:	movls	ip, lr
   111b0:	bls	1115c <__assert_fail@plt+0x22c>
   111b4:	sub	lr, ip, #65	; 0x41
   111b8:	cmp	lr, #5
   111bc:	bhi	111d0 <__assert_fail@plt+0x2a0>
   111c0:	sub	ip, ip, #55	; 0x37
   111c4:	b	1115c <__assert_fail@plt+0x22c>
   111c8:	mov	r0, #1
   111cc:	pop	{r4, pc}
   111d0:	mov	r0, #0
   111d4:	pop	{r4, pc}
   111d8:	add	r0, r0, r0, lsl #2
   111dc:	add	r3, r0, #3
   111e0:	cmp	r0, #0
   111e4:	movlt	r0, r3
   111e8:	asr	r0, r0, #2
   111ec:	bx	lr
   111f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f4:	ldr	ip, [sp, #36]	; 0x24
   111f8:	mov	lr, #0
   111fc:	str	lr, [ip]
   11200:	cmp	r2, #0
   11204:	bne	1132c <__assert_fail@plt+0x3fc>
   11208:	ldr	r0, [r0, #4]
   1120c:	cmp	r0, lr
   11210:	movgt	r0, #0
   11214:	movle	r0, #1
   11218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1121c:	subs	r2, r2, #1
   11220:	beq	11304 <__assert_fail@plt+0x3d4>
   11224:	ldrb	r4, [r1], #1
   11228:	cmp	r4, #10
   1122c:	beq	1121c <__assert_fail@plt+0x2ec>
   11230:	sub	r5, r4, #33	; 0x21
   11234:	uxtb	r5, r5
   11238:	cmp	r5, #92	; 0x5c
   1123c:	bhi	11314 <__assert_fail@plt+0x3e4>
   11240:	add	r4, lr, r4
   11244:	ldrsb	r5, [r4, #-17]	; 0xffffffef
   11248:	cmp	r5, #0
   1124c:	blt	1131c <__assert_fail@plt+0x3ec>
   11250:	ldr	r4, [r0, #4]
   11254:	add	r6, r4, #1
   11258:	str	r6, [r0, #4]
   1125c:	add	r4, r0, r4
   11260:	strb	r5, [r4, #8]
   11264:	cmp	r6, #5
   11268:	bne	1121c <__assert_fail@plt+0x2ec>
   1126c:	ldrb	r4, [r0, #9]
   11270:	ldrb	r6, [r0, #10]
   11274:	rsb	r5, r6, r6, lsl #3
   11278:	add	r5, r5, r5, lsl #7
   1127c:	add	r6, r6, r5, lsl #3
   11280:	ldr	r5, [pc, #176]	; 11338 <__assert_fail@plt+0x408>
   11284:	mla	r6, r5, r4, r6
   11288:	ldrb	r4, [r0, #11]
   1128c:	add	r4, r4, r4, lsl #2
   11290:	add	r4, r4, r4, lsl #4
   11294:	add	r4, r6, r4
   11298:	ldrb	r6, [r0, #12]
   1129c:	add	r4, r4, r6
   112a0:	mov	sl, r4
   112a4:	ldrb	r4, [r0, #8]
   112a8:	umull	r4, r5, r4, fp
   112ac:	adds	r6, r4, sl
   112b0:	adc	r7, r5, sl, asr #31
   112b4:	lsr	r8, r6, #24
   112b8:	orr	r8, r8, r7, lsl #8
   112bc:	asr	r9, r7, #24
   112c0:	bic	r4, r8, #255	; 0xff
   112c4:	mov	r5, r9
   112c8:	orrs	r4, r4, r5
   112cc:	bne	11324 <__assert_fail@plt+0x3f4>
   112d0:	strb	r8, [r3]
   112d4:	lsr	r4, r6, #16
   112d8:	strb	r4, [r3, #1]
   112dc:	lsr	r4, r6, #8
   112e0:	strb	r4, [r3, #2]
   112e4:	strb	r6, [r3, #3]
   112e8:	ldr	r4, [ip]
   112ec:	add	r4, r4, #4
   112f0:	str	r4, [ip]
   112f4:	mov	r4, #0
   112f8:	str	r4, [r0, #4]
   112fc:	add	r3, r3, #4
   11300:	b	1121c <__assert_fail@plt+0x2ec>
   11304:	ldr	r3, [r0, #4]
   11308:	str	r3, [r0]
   1130c:	mov	r0, #1
   11310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11314:	mov	r0, #0
   11318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1131c:	mov	r0, #0
   11320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11324:	mov	r0, #0
   11328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1132c:	ldr	lr, [pc, #8]	; 1133c <__assert_fail@plt+0x40c>
   11330:	ldr	fp, [pc, #8]	; 11340 <__assert_fail@plt+0x410>
   11334:	b	11224 <__assert_fail@plt+0x2f4>
   11338:	andeq	r5, r9, sp, ror #29
   1133c:	andeq	r7, r1, r8, lsr r4
   11340:	tsteq	ip, #-1325400064	; 0xb1000000
   11344:	sub	r0, r0, #48	; 0x30
   11348:	uxtb	r0, r0
   1134c:	cmp	r0, #1
   11350:	movhi	r0, #0
   11354:	movls	r0, #1
   11358:	bx	lr
   1135c:	lsl	r0, r0, #3
   11360:	bx	lr
   11364:	cmp	r1, #0
   11368:	bxeq	lr
   1136c:	push	{lr}		; (str lr, [sp, #-4]!)
   11370:	mov	lr, r0
   11374:	add	ip, r2, #7
   11378:	add	r0, r0, r1
   1137c:	b	1138c <__assert_fail@plt+0x45c>
   11380:	add	ip, ip, #8
   11384:	cmp	lr, r0
   11388:	beq	113bc <__assert_fail@plt+0x48c>
   1138c:	ldrb	r3, [lr], #1
   11390:	sub	r1, ip, #8
   11394:	sxtb	r2, r3
   11398:	cmp	r2, #0
   1139c:	movlt	r2, #49	; 0x31
   113a0:	movge	r2, #48	; 0x30
   113a4:	strb	r2, [r1, #1]!
   113a8:	lsl	r3, r3, #1
   113ac:	uxtb	r3, r3
   113b0:	cmp	r1, ip
   113b4:	bne	11394 <__assert_fail@plt+0x464>
   113b8:	b	11380 <__assert_fail@plt+0x450>
   113bc:	pop	{pc}		; (ldr pc, [sp], #4)
   113c0:	cmp	r1, #0
   113c4:	bxeq	lr
   113c8:	push	{lr}		; (str lr, [sp, #-4]!)
   113cc:	mov	lr, r0
   113d0:	add	ip, r2, #7
   113d4:	add	r0, r0, r1
   113d8:	b	113e8 <__assert_fail@plt+0x4b8>
   113dc:	add	ip, ip, #8
   113e0:	cmp	lr, r0
   113e4:	beq	11414 <__assert_fail@plt+0x4e4>
   113e8:	ldrb	r1, [lr], #1
   113ec:	sub	r2, ip, #8
   113f0:	and	r3, r1, #1
   113f4:	cmp	r3, #0
   113f8:	movne	r3, #49	; 0x31
   113fc:	moveq	r3, #48	; 0x30
   11400:	strb	r3, [r2, #1]!
   11404:	lsr	r1, r1, #1
   11408:	cmp	r2, ip
   1140c:	bne	113f0 <__assert_fail@plt+0x4c0>
   11410:	b	113dc <__assert_fail@plt+0x4ac>
   11414:	pop	{pc}		; (ldr pc, [sp], #4)
   11418:	push	{r4, r5, r6, lr}
   1141c:	ldr	r5, [sp, #16]
   11420:	mov	ip, #0
   11424:	str	ip, [r5]
   11428:	cmp	r2, #0
   1142c:	movne	r6, #0
   11430:	bne	1144c <__assert_fail@plt+0x51c>
   11434:	ldr	r0, [r0]
   11438:	clz	r0, r0
   1143c:	lsr	r0, r0, #5
   11440:	pop	{r4, r5, r6, pc}
   11444:	subs	r2, r2, #1
   11448:	beq	114b8 <__assert_fail@plt+0x588>
   1144c:	ldrb	ip, [r1], #1
   11450:	cmp	ip, #10
   11454:	beq	11444 <__assert_fail@plt+0x514>
   11458:	sub	lr, ip, #48	; 0x30
   1145c:	uxtb	lr, lr
   11460:	cmp	lr, #1
   11464:	bhi	114c0 <__assert_fail@plt+0x590>
   11468:	ldr	r4, [r0]
   1146c:	cmp	ip, #49	; 0x31
   11470:	movne	ip, #0
   11474:	moveq	ip, #1
   11478:	ldrb	lr, [r0, #4]
   1147c:	orr	ip, lr, ip, lsl r4
   11480:	uxtb	ip, ip
   11484:	strb	ip, [r0, #4]
   11488:	add	lr, r4, #1
   1148c:	str	lr, [r0]
   11490:	cmp	lr, #8
   11494:	bne	11444 <__assert_fail@plt+0x514>
   11498:	strb	ip, [r3]
   1149c:	strb	r6, [r0, #4]
   114a0:	ldr	ip, [r5]
   114a4:	add	ip, ip, #1
   114a8:	str	ip, [r5]
   114ac:	str	r6, [r0]
   114b0:	add	r3, r3, #1
   114b4:	b	11444 <__assert_fail@plt+0x514>
   114b8:	mov	r0, #1
   114bc:	pop	{r4, r5, r6, pc}
   114c0:	mov	r0, #0
   114c4:	pop	{r4, r5, r6, pc}
   114c8:	push	{r4, r5, r6, r7, lr}
   114cc:	ldr	r4, [sp, #20]
   114d0:	mov	ip, #0
   114d4:	str	ip, [r4]
   114d8:	cmp	r2, #0
   114dc:	movne	r5, #0
   114e0:	movne	r6, #7
   114e4:	bne	1153c <__assert_fail@plt+0x60c>
   114e8:	ldr	r0, [r0]
   114ec:	clz	r0, r0
   114f0:	lsr	r0, r0, #5
   114f4:	pop	{r4, r5, r6, r7, pc}
   114f8:	sub	lr, lr, #1
   114fc:	str	lr, [r0]
   11500:	ldrb	r7, [r0, #4]
   11504:	orr	ip, r7, ip, lsl lr
   11508:	uxtb	ip, ip
   1150c:	strb	ip, [r0, #4]
   11510:	cmp	lr, #0
   11514:	bne	11534 <__assert_fail@plt+0x604>
   11518:	strb	ip, [r3]
   1151c:	strb	r5, [r0, #4]
   11520:	ldr	ip, [r4]
   11524:	add	ip, ip, #1
   11528:	str	ip, [r4]
   1152c:	str	r5, [r0]
   11530:	add	r3, r3, #1
   11534:	subs	r2, r2, #1
   11538:	beq	11584 <__assert_fail@plt+0x654>
   1153c:	ldrb	ip, [r1], #1
   11540:	cmp	ip, #10
   11544:	beq	11534 <__assert_fail@plt+0x604>
   11548:	sub	lr, ip, #48	; 0x30
   1154c:	uxtb	lr, lr
   11550:	cmp	lr, #1
   11554:	bhi	1158c <__assert_fail@plt+0x65c>
   11558:	cmp	ip, #49	; 0x31
   1155c:	movne	ip, #0
   11560:	moveq	ip, #1
   11564:	ldr	lr, [r0]
   11568:	cmp	lr, #0
   1156c:	bne	114f8 <__assert_fail@plt+0x5c8>
   11570:	str	r6, [r0]
   11574:	ldrb	lr, [r0, #4]
   11578:	orr	ip, lr, ip, lsl #7
   1157c:	strb	ip, [r0, #4]
   11580:	b	11534 <__assert_fail@plt+0x604>
   11584:	mov	r0, #1
   11588:	pop	{r4, r5, r6, r7, pc}
   1158c:	mov	r0, #0
   11590:	pop	{r4, r5, r6, r7, pc}
   11594:	cmp	r1, #0
   11598:	beq	115d0 <__assert_fail@plt+0x6a0>
   1159c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a0:	sub	sp, sp, #36	; 0x24
   115a4:	mov	r9, r2
   115a8:	mov	r8, r3
   115ac:	add	r7, r0, #1
   115b0:	mov	r2, r0
   115b4:	ldrb	r3, [r2], r1
   115b8:	strb	r3, [sp, #28]
   115bc:	mov	r3, #0
   115c0:	mov	r6, r3
   115c4:	mov	r3, #1
   115c8:	mov	r5, r2
   115cc:	b	11678 <__assert_fail@plt+0x748>
   115d0:	bx	lr
   115d4:	cmp	r3, #0
   115d8:	bne	115e4 <__assert_fail@plt+0x6b4>
   115dc:	add	sp, sp, #36	; 0x24
   115e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #264]	; 116f8 <__assert_fail@plt+0x7c8>
   115ec:	mov	r0, #0
   115f0:	bl	10d68 <dcgettext@plt>
   115f4:	mov	r2, r0
   115f8:	mov	r1, #0
   115fc:	mov	r0, #1
   11600:	bl	10dd4 <error@plt>
   11604:	sub	r4, r4, #1
   11608:	ldr	r3, [sp, #8]
   1160c:	str	r3, [sp]
   11610:	ldr	r3, [sp, #12]
   11614:	str	r3, [sp, #4]
   11618:	cmp	fp, r4
   1161c:	beq	11668 <__assert_fail@plt+0x738>
   11620:	mov	r2, #85	; 0x55
   11624:	mov	r3, #0
   11628:	ldrd	r0, [sp]
   1162c:	bl	171a4 <__assert_fail@plt+0x6274>
   11630:	str	r0, [sp, #8]
   11634:	str	r1, [sp, #12]
   11638:	add	r3, sl, r4
   1163c:	cmp	r8, r3
   11640:	ble	11604 <__assert_fail@plt+0x6d4>
   11644:	mov	r2, #85	; 0x55
   11648:	mov	r3, #0
   1164c:	ldrd	r0, [sp]
   11650:	bl	171a4 <__assert_fail@plt+0x6274>
   11654:	ldr	r3, [pc, #160]	; 116fc <__assert_fail@plt+0x7cc>
   11658:	add	r2, r3, r2
   1165c:	ldrb	r3, [r2, #112]	; 0x70
   11660:	strb	r3, [r4]
   11664:	b	11604 <__assert_fail@plt+0x6d4>
   11668:	add	r9, r9, #5
   1166c:	add	r6, r6, #5
   11670:	mov	r2, #0
   11674:	mov	r3, r2
   11678:	cmp	r5, r7
   1167c:	beq	115d4 <__assert_fail@plt+0x6a4>
   11680:	add	r2, r3, #1
   11684:	add	r1, sp, #32
   11688:	add	r3, r1, r3
   1168c:	ldrb	r1, [r7], #1
   11690:	strb	r1, [r3, #-4]
   11694:	cmp	r2, #4
   11698:	bne	11674 <__assert_fail@plt+0x744>
   1169c:	ldrb	r2, [sp, #28]
   116a0:	mov	r1, #0
   116a4:	str	r1, [sp, #20]
   116a8:	lsl	r3, r2, #24
   116ac:	str	r3, [sp, #16]
   116b0:	ldrb	r1, [sp, #29]
   116b4:	lsl	r1, r1, #16
   116b8:	ldrd	r2, [sp, #16]
   116bc:	adds	r2, r2, r1
   116c0:	adc	r3, r3, r1, asr #31
   116c4:	ldrb	r1, [sp, #30]
   116c8:	lsl	r1, r1, #8
   116cc:	adds	r2, r2, r1
   116d0:	adc	r3, r3, r1, asr #31
   116d4:	ldrb	r0, [sp, #31]
   116d8:	mov	r1, #0
   116dc:	adds	sl, r0, r2
   116e0:	adc	fp, r1, r3
   116e4:	strd	sl, [sp]
   116e8:	add	r4, r9, #4
   116ec:	sub	fp, r9, #1
   116f0:	sub	sl, r6, r9
   116f4:	b	11620 <__assert_fail@plt+0x6f0>
   116f8:	andeq	r7, r1, r4, lsl #13
   116fc:	andeq	r7, r1, r8, lsr r4
   11700:	cmp	r0, #95	; 0x5f
   11704:	cmpne	r0, #45	; 0x2d
   11708:	beq	11728 <__assert_fail@plt+0x7f8>
   1170c:	and	r3, r0, #251	; 0xfb
   11710:	cmp	r3, #43	; 0x2b
   11714:	beq	11734 <__assert_fail@plt+0x804>
   11718:	push	{r4, lr}
   1171c:	bl	13724 <__assert_fail@plt+0x27f4>
   11720:	and	r0, r0, #1
   11724:	pop	{r4, pc}
   11728:	mov	r0, #1
   1172c:	and	r0, r0, #1
   11730:	bx	lr
   11734:	mov	r0, #0
   11738:	b	1172c <__assert_fail@plt+0x7fc>
   1173c:	push	{r4, r5, r6, lr}
   11740:	mov	r4, r2
   11744:	mov	r5, r3
   11748:	bl	134b0 <__assert_fail@plt+0x2580>
   1174c:	cmp	r5, #0
   11750:	popeq	{r4, r5, r6, pc}
   11754:	add	r3, r4, r5
   11758:	mov	r2, r4
   1175c:	mov	ip, #95	; 0x5f
   11760:	mov	r0, #45	; 0x2d
   11764:	b	11774 <__assert_fail@plt+0x844>
   11768:	add	r2, r2, #1
   1176c:	cmp	r3, r2
   11770:	beq	11790 <__assert_fail@plt+0x860>
   11774:	ldrb	r1, [r2]
   11778:	cmp	r1, #43	; 0x2b
   1177c:	strbeq	r0, [r2]
   11780:	beq	11768 <__assert_fail@plt+0x838>
   11784:	cmp	r1, #47	; 0x2f
   11788:	strbeq	ip, [r2]
   1178c:	b	11768 <__assert_fail@plt+0x838>
   11790:	pop	{r4, r5, r6, pc}
   11794:	push	{r4, lr}
   11798:	mov	r4, r0
   1179c:	ldr	r0, [pc, #12]	; 117b0 <__assert_fail@plt+0x880>
   117a0:	str	r0, [r4, #20]
   117a4:	bl	15e6c <__assert_fail@plt+0x4f3c>
   117a8:	str	r0, [r4, #16]
   117ac:	pop	{r4, pc}
   117b0:	andeq	r1, r0, r8, rrx
   117b4:	push	{r4, lr}
   117b8:	mov	r4, r0
   117bc:	bl	11794 <__assert_fail@plt+0x864>
   117c0:	mov	r3, #0
   117c4:	str	r3, [r4, #4]
   117c8:	mov	r3, #1
   117cc:	str	r3, [r4]
   117d0:	pop	{r4, pc}
   117d4:	push	{r4, lr}
   117d8:	mov	r4, r0
   117dc:	bl	11794 <__assert_fail@plt+0x864>
   117e0:	mov	r3, #0
   117e4:	strb	r3, [r4, #4]
   117e8:	str	r3, [r4]
   117ec:	pop	{r4, pc}
   117f0:	push	{r4, lr}
   117f4:	mov	r4, r0
   117f8:	bl	11794 <__assert_fail@plt+0x864>
   117fc:	mov	r3, #0
   11800:	strb	r3, [r4, #5]
   11804:	mov	r3, #1
   11808:	str	r3, [r4]
   1180c:	pop	{r4, pc}
   11810:	cmp	r0, #90	; 0x5a
   11814:	bhi	11848 <__assert_fail@plt+0x918>
   11818:	cmp	r0, #65	; 0x41
   1181c:	bcs	11854 <__assert_fail@plt+0x924>
   11820:	sub	r3, r0, #48	; 0x30
   11824:	cmp	r3, #9
   11828:	bls	11854 <__assert_fail@plt+0x924>
   1182c:	push	{r4, lr}
   11830:	mov	r1, r0
   11834:	ldr	r0, [pc, #32]	; 1185c <__assert_fail@plt+0x92c>
   11838:	bl	10e40 <strchr@plt>
   1183c:	adds	r0, r0, #0
   11840:	movne	r0, #1
   11844:	pop	{r4, pc}
   11848:	sub	r3, r0, #97	; 0x61
   1184c:	cmp	r3, #25
   11850:	bhi	1182c <__assert_fail@plt+0x8fc>
   11854:	mov	r0, #1
   11858:	bx	lr
   1185c:			; <UNDEFINED> instruction: 0x000176bc
   11860:	push	{r4, lr}
   11864:	sub	sp, sp, #8
   11868:	mov	r4, r0
   1186c:	ldr	r0, [sp, #16]
   11870:	str	r0, [sp]
   11874:	add	r0, r4, #4
   11878:	bl	13088 <__assert_fail@plt+0x2158>
   1187c:	ldr	r3, [r4, #4]
   11880:	str	r3, [r4]
   11884:	add	sp, sp, #8
   11888:	pop	{r4, pc}
   1188c:	push	{r4, r5, r6, r7, lr}
   11890:	sub	sp, sp, #12
   11894:	mov	r4, r0
   11898:	mov	r7, r1
   1189c:	mov	r5, r2
   118a0:	mov	r6, r3
   118a4:	ldr	r3, [r0, #20]
   118a8:	cmp	r2, r3
   118ac:	bgt	11928 <__assert_fail@plt+0x9f8>
   118b0:	ldr	r2, [r4, #16]
   118b4:	cmp	r5, #0
   118b8:	beq	118fc <__assert_fail@plt+0x9cc>
   118bc:	sub	r1, r7, #1
   118c0:	add	lr, r2, r5
   118c4:	ldr	r7, [pc, #120]	; 11944 <__assert_fail@plt+0xa14>
   118c8:	ldrb	r3, [r1, #1]!
   118cc:	sub	ip, r3, #48	; 0x30
   118d0:	uxtb	ip, ip
   118d4:	sub	r0, r3, #65	; 0x41
   118d8:	uxtb	r0, r0
   118dc:	cmp	r0, #21
   118e0:	cmphi	ip, #9
   118e4:	addls	r3, r7, r3
   118e8:	ldrbls	r3, [r3, #152]	; 0x98
   118ec:	strb	r3, [r2]
   118f0:	add	r2, r2, #1
   118f4:	cmp	r2, lr
   118f8:	bne	118c8 <__assert_fail@plt+0x998>
   118fc:	ldr	r3, [sp, #32]
   11900:	str	r3, [sp]
   11904:	mov	r3, r6
   11908:	mov	r2, r5
   1190c:	ldr	r1, [r4, #16]
   11910:	add	r0, r4, #4
   11914:	bl	13088 <__assert_fail@plt+0x2158>
   11918:	ldr	r3, [r4, #4]
   1191c:	str	r3, [r4]
   11920:	add	sp, sp, #12
   11924:	pop	{r4, r5, r6, r7, pc}
   11928:	lsl	r1, r2, #1
   1192c:	str	r1, [r0, #20]
   11930:	mov	r2, #1
   11934:	ldr	r0, [r0, #16]
   11938:	bl	15ec8 <__assert_fail@plt+0x4f98>
   1193c:	str	r0, [r4, #16]
   11940:	b	118b0 <__assert_fail@plt+0x980>
   11944:	andeq	r7, r1, r8, lsr r4
   11948:	push	{r4, lr}
   1194c:	mov	r4, r0
   11950:	add	r0, r0, #4
   11954:	bl	1307c <__assert_fail@plt+0x214c>
   11958:	mov	r0, r4
   1195c:	bl	11794 <__assert_fail@plt+0x864>
   11960:	pop	{r4, pc}
   11964:	push	{r4, lr}
   11968:	add	r0, r0, #4
   1196c:	bl	1307c <__assert_fail@plt+0x214c>
   11970:	pop	{r4, pc}
   11974:	push	{r4, r5, r6, lr}
   11978:	mov	r4, r2
   1197c:	mov	r5, r3
   11980:	bl	12d80 <__assert_fail@plt+0x1e50>
   11984:	cmp	r5, #0
   11988:	popeq	{r4, r5, r6, pc}
   1198c:	ldrb	r3, [r4]
   11990:	sub	r2, r3, #50	; 0x32
   11994:	uxtb	r2, r2
   11998:	cmp	r2, #40	; 0x28
   1199c:	bhi	119d8 <__assert_fail@plt+0xaa8>
   119a0:	mov	r2, r4
   119a4:	sub	r0, r5, #1
   119a8:	add	r0, r4, r0
   119ac:	ldr	ip, [pc, #60]	; 119f0 <__assert_fail@plt+0xac0>
   119b0:	add	r3, ip, r3
   119b4:	ldrb	r3, [r3, #214]	; 0xd6
   119b8:	strb	r3, [r2]
   119bc:	cmp	r2, r0
   119c0:	beq	119ec <__assert_fail@plt+0xabc>
   119c4:	ldrb	r3, [r2, #1]!
   119c8:	sub	r1, r3, #50	; 0x32
   119cc:	uxtb	r1, r1
   119d0:	cmp	r1, #40	; 0x28
   119d4:	bls	119b0 <__assert_fail@plt+0xa80>
   119d8:	ldr	r3, [pc, #20]	; 119f4 <__assert_fail@plt+0xac4>
   119dc:	mov	r2, #452	; 0x1c4
   119e0:	ldr	r1, [pc, #16]	; 119f8 <__assert_fail@plt+0xac8>
   119e4:	ldr	r0, [pc, #16]	; 119fc <__assert_fail@plt+0xacc>
   119e8:	bl	10f30 <__assert_fail@plt>
   119ec:	pop	{r4, r5, r6, pc}
   119f0:	andeq	r7, r1, r8, lsr r4
   119f4:	andeq	r7, r1, ip, lsr #10
   119f8:	ldrdeq	r7, [r1], -r4
   119fc:	andeq	r7, r1, r4, ror #13
   11a00:	push	{r4, lr}
   11a04:	sub	sp, sp, #8
   11a08:	mov	r4, r0
   11a0c:	ldr	r0, [sp, #16]
   11a10:	str	r0, [sp]
   11a14:	add	r0, r4, #4
   11a18:	bl	13748 <__assert_fail@plt+0x2818>
   11a1c:	ldr	r3, [r4, #4]
   11a20:	str	r3, [r4]
   11a24:	add	sp, sp, #8
   11a28:	pop	{r4, pc}
   11a2c:	push	{r4, lr}
   11a30:	mov	r4, r0
   11a34:	add	r0, r0, #4
   11a38:	bl	1373c <__assert_fail@plt+0x280c>
   11a3c:	mov	r0, r4
   11a40:	bl	11794 <__assert_fail@plt+0x864>
   11a44:	pop	{r4, pc}
   11a48:	push	{r4, lr}
   11a4c:	add	r0, r0, #4
   11a50:	bl	1373c <__assert_fail@plt+0x280c>
   11a54:	pop	{r4, pc}
   11a58:	push	{r4, lr}
   11a5c:	mov	r4, r1
   11a60:	bl	13b50 <__assert_fail@plt+0x2c20>
   11a64:	cmp	r0, #0
   11a68:	beq	11ad4 <__assert_fail@plt+0xba4>
   11a6c:	ldr	r1, [pc, #104]	; 11adc <__assert_fail@plt+0xbac>
   11a70:	mov	r0, r4
   11a74:	bl	10ce4 <strcmp@plt>
   11a78:	cmp	r0, #0
   11a7c:	bne	11aa8 <__assert_fail@plt+0xb78>
   11a80:	bl	10e4c <__errno_location@plt>
   11a84:	ldr	r4, [r0]
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #76]	; 11ae0 <__assert_fail@plt+0xbb0>
   11a90:	mov	r0, #0
   11a94:	bl	10d68 <dcgettext@plt>
   11a98:	mov	r2, r0
   11a9c:	mov	r1, r4
   11aa0:	mov	r0, #1
   11aa4:	bl	10dd4 <error@plt>
   11aa8:	bl	10e4c <__errno_location@plt>
   11aac:	ldr	r5, [r0]
   11ab0:	mov	r2, r4
   11ab4:	mov	r1, #3
   11ab8:	mov	r0, #0
   11abc:	bl	15744 <__assert_fail@plt+0x4814>
   11ac0:	mov	r3, r0
   11ac4:	ldr	r2, [pc, #24]	; 11ae4 <__assert_fail@plt+0xbb4>
   11ac8:	mov	r1, r5
   11acc:	mov	r0, #1
   11ad0:	bl	10dd4 <error@plt>
   11ad4:	mov	r0, #0
   11ad8:	bl	10e28 <exit@plt>
   11adc:	andeq	r7, r1, r0, lsl #14
   11ae0:	andeq	r7, r1, r4, lsl #14
   11ae4:	andeq	r7, r1, r0, asr lr
   11ae8:	push	{r4, r5, r6, r7, r8, lr}
   11aec:	sub	sp, sp, #8
   11af0:	mov	r4, r0
   11af4:	mov	r8, r1
   11af8:	mov	r5, r2
   11afc:	mov	r7, r3
   11b00:	ldr	r6, [sp, #32]
   11b04:	ldr	r3, [r0, #20]
   11b08:	cmp	r2, r3
   11b0c:	bgt	11b54 <__assert_fail@plt+0xc24>
   11b10:	mov	r2, r5
   11b14:	mov	r1, r8
   11b18:	ldr	r0, [r4, #16]
   11b1c:	bl	10d2c <memcpy@plt>
   11b20:	ldr	r0, [r4, #16]
   11b24:	cmp	r5, #0
   11b28:	beq	11bac <__assert_fail@plt+0xc7c>
   11b2c:	ldrb	r3, [r0]
   11b30:	and	r2, r3, #251	; 0xfb
   11b34:	cmp	r2, #43	; 0x2b
   11b38:	beq	11b70 <__assert_fail@plt+0xc40>
   11b3c:	mov	r2, r0
   11b40:	sub	r1, r5, #1
   11b44:	add	r0, r0, r1
   11b48:	mov	lr, #47	; 0x2f
   11b4c:	mov	ip, #43	; 0x2b
   11b50:	b	11b9c <__assert_fail@plt+0xc6c>
   11b54:	lsl	r1, r2, #1
   11b58:	str	r1, [r0, #20]
   11b5c:	mov	r2, #1
   11b60:	ldr	r0, [r0, #16]
   11b64:	bl	15ec8 <__assert_fail@plt+0x4f98>
   11b68:	str	r0, [r4, #16]
   11b6c:	b	11b10 <__assert_fail@plt+0xbe0>
   11b70:	mov	r0, #0
   11b74:	str	r0, [r6]
   11b78:	b	11bcc <__assert_fail@plt+0xc9c>
   11b7c:	cmp	r3, #95	; 0x5f
   11b80:	strbeq	lr, [r2]
   11b84:	cmp	r2, r0
   11b88:	beq	11bac <__assert_fail@plt+0xc7c>
   11b8c:	ldrb	r3, [r2, #1]!
   11b90:	and	r1, r3, #251	; 0xfb
   11b94:	cmp	r1, #43	; 0x2b
   11b98:	beq	11b70 <__assert_fail@plt+0xc40>
   11b9c:	cmp	r3, #45	; 0x2d
   11ba0:	strbeq	ip, [r2]
   11ba4:	bne	11b7c <__assert_fail@plt+0xc4c>
   11ba8:	b	11b84 <__assert_fail@plt+0xc54>
   11bac:	str	r6, [sp]
   11bb0:	mov	r3, r7
   11bb4:	mov	r2, r5
   11bb8:	ldr	r1, [r4, #16]
   11bbc:	add	r0, r4, #4
   11bc0:	bl	13748 <__assert_fail@plt+0x2818>
   11bc4:	ldr	r3, [r4, #4]
   11bc8:	str	r3, [r4]
   11bcc:	add	sp, sp, #8
   11bd0:	pop	{r4, r5, r6, r7, r8, pc}
   11bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   11bd8:	sub	sp, sp, #60	; 0x3c
   11bdc:	subs	r6, r0, #0
   11be0:	beq	11c1c <__assert_fail@plt+0xcec>
   11be4:	ldr	r3, [pc, #968]	; 11fb4 <__assert_fail@plt+0x1084>
   11be8:	ldr	r4, [r3]
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #960]	; 11fb8 <__assert_fail@plt+0x1088>
   11bf4:	mov	r0, #0
   11bf8:	bl	10d68 <dcgettext@plt>
   11bfc:	ldr	r3, [pc, #952]	; 11fbc <__assert_fail@plt+0x108c>
   11c00:	ldr	r3, [r3]
   11c04:	mov	r2, r0
   11c08:	mov	r1, #1
   11c0c:	mov	r0, r4
   11c10:	bl	10e88 <__fprintf_chk@plt>
   11c14:	mov	r0, r6
   11c18:	bl	10e28 <exit@plt>
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #920]	; 11fc0 <__assert_fail@plt+0x1090>
   11c24:	mov	r0, #0
   11c28:	bl	10d68 <dcgettext@plt>
   11c2c:	ldr	r3, [pc, #904]	; 11fbc <__assert_fail@plt+0x108c>
   11c30:	ldr	r2, [r3]
   11c34:	mov	r1, r0
   11c38:	mov	r0, #1
   11c3c:	bl	10e70 <__printf_chk@plt>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #888]	; 11fc4 <__assert_fail@plt+0x1094>
   11c48:	mov	r0, #0
   11c4c:	bl	10d68 <dcgettext@plt>
   11c50:	ldr	r4, [pc, #880]	; 11fc8 <__assert_fail@plt+0x1098>
   11c54:	ldr	r1, [r4]
   11c58:	bl	10ccc <fputs_unlocked@plt>
   11c5c:	mov	r2, #5
   11c60:	ldr	r1, [pc, #868]	; 11fcc <__assert_fail@plt+0x109c>
   11c64:	mov	r0, #0
   11c68:	bl	10d68 <dcgettext@plt>
   11c6c:	ldr	r1, [r4]
   11c70:	bl	10ccc <fputs_unlocked@plt>
   11c74:	mov	r2, #5
   11c78:	ldr	r1, [pc, #848]	; 11fd0 <__assert_fail@plt+0x10a0>
   11c7c:	mov	r0, #0
   11c80:	bl	10d68 <dcgettext@plt>
   11c84:	ldr	r1, [r4]
   11c88:	bl	10ccc <fputs_unlocked@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #828]	; 11fd4 <__assert_fail@plt+0x10a4>
   11c94:	mov	r0, #0
   11c98:	bl	10d68 <dcgettext@plt>
   11c9c:	ldr	r1, [r4]
   11ca0:	bl	10ccc <fputs_unlocked@plt>
   11ca4:	mov	r2, #5
   11ca8:	ldr	r1, [pc, #808]	; 11fd8 <__assert_fail@plt+0x10a8>
   11cac:	mov	r0, #0
   11cb0:	bl	10d68 <dcgettext@plt>
   11cb4:	ldr	r1, [r4]
   11cb8:	bl	10ccc <fputs_unlocked@plt>
   11cbc:	mov	r2, #5
   11cc0:	ldr	r1, [pc, #788]	; 11fdc <__assert_fail@plt+0x10ac>
   11cc4:	mov	r0, #0
   11cc8:	bl	10d68 <dcgettext@plt>
   11ccc:	ldr	r1, [r4]
   11cd0:	bl	10ccc <fputs_unlocked@plt>
   11cd4:	mov	r2, #5
   11cd8:	ldr	r1, [pc, #768]	; 11fe0 <__assert_fail@plt+0x10b0>
   11cdc:	mov	r0, #0
   11ce0:	bl	10d68 <dcgettext@plt>
   11ce4:	ldr	r1, [r4]
   11ce8:	bl	10ccc <fputs_unlocked@plt>
   11cec:	mov	r2, #5
   11cf0:	ldr	r1, [pc, #748]	; 11fe4 <__assert_fail@plt+0x10b4>
   11cf4:	mov	r0, #0
   11cf8:	bl	10d68 <dcgettext@plt>
   11cfc:	ldr	r1, [r4]
   11d00:	bl	10ccc <fputs_unlocked@plt>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #728]	; 11fe8 <__assert_fail@plt+0x10b8>
   11d0c:	mov	r0, #0
   11d10:	bl	10d68 <dcgettext@plt>
   11d14:	ldr	r1, [r4]
   11d18:	bl	10ccc <fputs_unlocked@plt>
   11d1c:	mov	r2, #5
   11d20:	ldr	r1, [pc, #708]	; 11fec <__assert_fail@plt+0x10bc>
   11d24:	mov	r0, #0
   11d28:	bl	10d68 <dcgettext@plt>
   11d2c:	ldr	r1, [r4]
   11d30:	bl	10ccc <fputs_unlocked@plt>
   11d34:	mov	r2, #5
   11d38:	ldr	r1, [pc, #688]	; 11ff0 <__assert_fail@plt+0x10c0>
   11d3c:	mov	r0, #0
   11d40:	bl	10d68 <dcgettext@plt>
   11d44:	ldr	r1, [r4]
   11d48:	bl	10ccc <fputs_unlocked@plt>
   11d4c:	mov	r2, #5
   11d50:	ldr	r1, [pc, #668]	; 11ff4 <__assert_fail@plt+0x10c4>
   11d54:	mov	r0, #0
   11d58:	bl	10d68 <dcgettext@plt>
   11d5c:	ldr	r1, [r4]
   11d60:	bl	10ccc <fputs_unlocked@plt>
   11d64:	mov	r2, #5
   11d68:	ldr	r1, [pc, #648]	; 11ff8 <__assert_fail@plt+0x10c8>
   11d6c:	mov	r0, #0
   11d70:	bl	10d68 <dcgettext@plt>
   11d74:	ldr	r1, [r4]
   11d78:	bl	10ccc <fputs_unlocked@plt>
   11d7c:	mov	r2, #5
   11d80:	ldr	r1, [pc, #628]	; 11ffc <__assert_fail@plt+0x10cc>
   11d84:	mov	r0, #0
   11d88:	bl	10d68 <dcgettext@plt>
   11d8c:	ldr	r1, [r4]
   11d90:	bl	10ccc <fputs_unlocked@plt>
   11d94:	mov	r2, #5
   11d98:	ldr	r1, [pc, #608]	; 12000 <__assert_fail@plt+0x10d0>
   11d9c:	mov	r0, #0
   11da0:	bl	10d68 <dcgettext@plt>
   11da4:	ldr	r1, [r4]
   11da8:	bl	10ccc <fputs_unlocked@plt>
   11dac:	mov	ip, sp
   11db0:	ldr	lr, [pc, #588]	; 12004 <__assert_fail@plt+0x10d4>
   11db4:	ldm	lr!, {r0, r1, r2, r3}
   11db8:	stmia	ip!, {r0, r1, r2, r3}
   11dbc:	ldm	lr!, {r0, r1, r2, r3}
   11dc0:	stmia	ip!, {r0, r1, r2, r3}
   11dc4:	ldm	lr!, {r0, r1, r2, r3}
   11dc8:	stmia	ip!, {r0, r1, r2, r3}
   11dcc:	ldm	lr, {r0, r1}
   11dd0:	stm	ip, {r0, r1}
   11dd4:	ldr	r1, [sp]
   11dd8:	cmp	r1, #0
   11ddc:	moveq	r4, sp
   11de0:	beq	11e08 <__assert_fail@plt+0xed8>
   11de4:	mov	r4, sp
   11de8:	ldr	r5, [pc, #536]	; 12008 <__assert_fail@plt+0x10d8>
   11dec:	mov	r0, r5
   11df0:	bl	10ce4 <strcmp@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11e08 <__assert_fail@plt+0xed8>
   11dfc:	ldr	r1, [r4, #8]!
   11e00:	cmp	r1, #0
   11e04:	bne	11dec <__assert_fail@plt+0xebc>
   11e08:	ldr	r4, [r4, #4]
   11e0c:	cmp	r4, #0
   11e10:	beq	11f24 <__assert_fail@plt+0xff4>
   11e14:	mov	r2, #5
   11e18:	ldr	r1, [pc, #492]	; 1200c <__assert_fail@plt+0x10dc>
   11e1c:	mov	r0, #0
   11e20:	bl	10d68 <dcgettext@plt>
   11e24:	ldr	r3, [pc, #484]	; 12010 <__assert_fail@plt+0x10e0>
   11e28:	ldr	r2, [pc, #484]	; 12014 <__assert_fail@plt+0x10e4>
   11e2c:	mov	r1, r0
   11e30:	mov	r0, #1
   11e34:	bl	10e70 <__printf_chk@plt>
   11e38:	mov	r1, #0
   11e3c:	mov	r0, #5
   11e40:	bl	10ec4 <setlocale@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	11e60 <__assert_fail@plt+0xf30>
   11e4c:	mov	r2, #3
   11e50:	ldr	r1, [pc, #448]	; 12018 <__assert_fail@plt+0x10e8>
   11e54:	bl	10f18 <strncmp@plt>
   11e58:	cmp	r0, #0
   11e5c:	bne	11ec0 <__assert_fail@plt+0xf90>
   11e60:	mov	r2, #5
   11e64:	ldr	r1, [pc, #432]	; 1201c <__assert_fail@plt+0x10ec>
   11e68:	mov	r0, #0
   11e6c:	bl	10d68 <dcgettext@plt>
   11e70:	ldr	r5, [pc, #400]	; 12008 <__assert_fail@plt+0x10d8>
   11e74:	mov	r3, r5
   11e78:	ldr	r2, [pc, #400]	; 12010 <__assert_fail@plt+0x10e0>
   11e7c:	mov	r1, r0
   11e80:	mov	r0, #1
   11e84:	bl	10e70 <__printf_chk@plt>
   11e88:	mov	r2, #5
   11e8c:	ldr	r1, [pc, #396]	; 12020 <__assert_fail@plt+0x10f0>
   11e90:	mov	r0, #0
   11e94:	bl	10d68 <dcgettext@plt>
   11e98:	mov	r1, r0
   11e9c:	ldr	r2, [pc, #384]	; 12024 <__assert_fail@plt+0x10f4>
   11ea0:	ldr	r3, [pc, #384]	; 12028 <__assert_fail@plt+0x10f8>
   11ea4:	cmp	r4, r5
   11ea8:	movne	r3, r2
   11eac:	mov	r2, r4
   11eb0:	mov	r0, #1
   11eb4:	bl	10e70 <__printf_chk@plt>
   11eb8:	b	11c14 <__assert_fail@plt+0xce4>
   11ebc:	ldr	r4, [pc, #324]	; 12008 <__assert_fail@plt+0x10d8>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #352]	; 1202c <__assert_fail@plt+0x10fc>
   11ec8:	mov	r0, #0
   11ecc:	bl	10d68 <dcgettext@plt>
   11ed0:	ldr	r3, [pc, #240]	; 11fc8 <__assert_fail@plt+0x1098>
   11ed4:	ldr	r1, [r3]
   11ed8:	bl	10ccc <fputs_unlocked@plt>
   11edc:	b	11e60 <__assert_fail@plt+0xf30>
   11ee0:	mov	r2, #5
   11ee4:	ldr	r1, [pc, #304]	; 1201c <__assert_fail@plt+0x10ec>
   11ee8:	mov	r0, #0
   11eec:	bl	10d68 <dcgettext@plt>
   11ef0:	ldr	r4, [pc, #272]	; 12008 <__assert_fail@plt+0x10d8>
   11ef4:	mov	r3, r4
   11ef8:	ldr	r2, [pc, #272]	; 12010 <__assert_fail@plt+0x10e0>
   11efc:	mov	r1, r0
   11f00:	mov	r0, #1
   11f04:	bl	10e70 <__printf_chk@plt>
   11f08:	mov	r2, #5
   11f0c:	ldr	r1, [pc, #268]	; 12020 <__assert_fail@plt+0x10f0>
   11f10:	mov	r0, #0
   11f14:	bl	10d68 <dcgettext@plt>
   11f18:	mov	r1, r0
   11f1c:	ldr	r3, [pc, #260]	; 12028 <__assert_fail@plt+0x10f8>
   11f20:	b	11eac <__assert_fail@plt+0xf7c>
   11f24:	mov	r2, #5
   11f28:	ldr	r1, [pc, #220]	; 1200c <__assert_fail@plt+0x10dc>
   11f2c:	mov	r0, #0
   11f30:	bl	10d68 <dcgettext@plt>
   11f34:	ldr	r3, [pc, #212]	; 12010 <__assert_fail@plt+0x10e0>
   11f38:	ldr	r2, [pc, #212]	; 12014 <__assert_fail@plt+0x10e4>
   11f3c:	mov	r1, r0
   11f40:	mov	r0, #1
   11f44:	bl	10e70 <__printf_chk@plt>
   11f48:	mov	r1, #0
   11f4c:	mov	r0, #5
   11f50:	bl	10ec4 <setlocale@plt>
   11f54:	cmp	r0, #0
   11f58:	beq	11ee0 <__assert_fail@plt+0xfb0>
   11f5c:	mov	r2, #3
   11f60:	ldr	r1, [pc, #176]	; 12018 <__assert_fail@plt+0x10e8>
   11f64:	bl	10f18 <strncmp@plt>
   11f68:	cmp	r0, #0
   11f6c:	bne	11ebc <__assert_fail@plt+0xf8c>
   11f70:	mov	r2, #5
   11f74:	ldr	r1, [pc, #160]	; 1201c <__assert_fail@plt+0x10ec>
   11f78:	mov	r0, #0
   11f7c:	bl	10d68 <dcgettext@plt>
   11f80:	ldr	r4, [pc, #128]	; 12008 <__assert_fail@plt+0x10d8>
   11f84:	mov	r3, r4
   11f88:	ldr	r2, [pc, #128]	; 12010 <__assert_fail@plt+0x10e0>
   11f8c:	mov	r1, r0
   11f90:	mov	r0, #1
   11f94:	bl	10e70 <__printf_chk@plt>
   11f98:	mov	r2, #5
   11f9c:	ldr	r1, [pc, #124]	; 12020 <__assert_fail@plt+0x10f0>
   11fa0:	mov	r0, #0
   11fa4:	bl	10d68 <dcgettext@plt>
   11fa8:	mov	r1, r0
   11fac:	ldr	r3, [pc, #116]	; 12028 <__assert_fail@plt+0x10f8>
   11fb0:	b	11eac <__assert_fail@plt+0xf7c>
   11fb4:	andeq	r9, r2, r8, asr #2
   11fb8:	andeq	r7, r1, r4, lsr #14
   11fbc:	andeq	r9, r2, ip, ror r1
   11fc0:	andeq	r7, r1, ip, asr #14
   11fc4:	andeq	r7, r1, ip, ror #14
   11fc8:	andeq	r9, r2, r4, asr r1
   11fcc:			; <UNDEFINED> instruction: 0x000177b4
   11fd0:	andeq	r7, r1, ip, ror #15
   11fd4:	andeq	r7, r1, r8, lsr r8
   11fd8:	andeq	r7, r1, r0, lsl #17
   11fdc:	andeq	r7, r1, r8, asr #17
   11fe0:	andeq	r7, r1, r0, lsl r9
   11fe4:	andeq	r7, r1, ip, asr r9
   11fe8:	muleq	r1, r8, r9
   11fec:	andeq	r7, r1, r4, ror #19
   11ff0:	andeq	r7, r1, r0, lsr sl
   11ff4:	andeq	r7, r1, r4, lsr #22
   11ff8:	andeq	r7, r1, r4, lsl #24
   11ffc:	andeq	r7, r1, r4, lsr ip
   12000:	andeq	r7, r1, ip, ror #24
   12004:	andeq	r7, r1, ip, ror #10
   12008:	andeq	r7, r1, ip, lsl r7
   1200c:	andeq	r7, r1, r4, lsr sp
   12010:	andeq	r7, r1, ip, asr #26
   12014:	andeq	r7, r1, r4, ror sp
   12018:	andeq	r7, r1, r4, lsl #27
   1201c:	ldrdeq	r7, [r1], -r0
   12020:	andeq	r7, r1, ip, ror #27
   12024:	andeq	r7, r1, r0, lsr ip
   12028:	ldrdeq	r7, [r1], -ip
   1202c:	andeq	r7, r1, r8, lsl #27
   12030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12034:	sub	sp, sp, #76	; 0x4c
   12038:	mov	r6, r0
   1203c:	mov	r4, r1
   12040:	ldr	r0, [r1]
   12044:	bl	13d5c <__assert_fail@plt+0x2e2c>
   12048:	ldr	r1, [pc, #2456]	; 129e8 <__assert_fail@plt+0x1ab8>
   1204c:	mov	r0, #6
   12050:	bl	10ec4 <setlocale@plt>
   12054:	ldr	r5, [pc, #2448]	; 129ec <__assert_fail@plt+0x1abc>
   12058:	ldr	r1, [pc, #2448]	; 129f0 <__assert_fail@plt+0x1ac0>
   1205c:	mov	r0, r5
   12060:	bl	10f00 <bindtextdomain@plt>
   12064:	mov	r0, r5
   12068:	bl	10d80 <textdomain@plt>
   1206c:	ldr	r0, [pc, #2432]	; 129f4 <__assert_fail@plt+0x1ac4>
   12070:	bl	17414 <__assert_fail@plt+0x64e4>
   12074:	mov	r5, #0
   12078:	mov	fp, #76	; 0x4c
   1207c:	str	r5, [sp, #16]
   12080:	str	r5, [sp, #20]
   12084:	ldr	r8, [pc, #2412]	; 129f8 <__assert_fail@plt+0x1ac8>
   12088:	ldr	r7, [pc, #2412]	; 129fc <__assert_fail@plt+0x1acc>
   1208c:	ldr	r9, [pc, #2412]	; 12a00 <__assert_fail@plt+0x1ad0>
   12090:	mov	r3, #0
   12094:	str	r3, [sp]
   12098:	mov	r3, r8
   1209c:	mov	r2, r7
   120a0:	mov	r1, r4
   120a4:	mov	r0, r6
   120a8:	bl	10e10 <getopt_long@plt>
   120ac:	cmn	r0, #1
   120b0:	beq	121fc <__assert_fail@plt+0x12cc>
   120b4:	cmp	r0, #105	; 0x69
   120b8:	beq	12100 <__assert_fail@plt+0x11d0>
   120bc:	bgt	120e0 <__assert_fail@plt+0x11b0>
   120c0:	cmn	r0, #2
   120c4:	beq	121ac <__assert_fail@plt+0x127c>
   120c8:	cmp	r0, #100	; 0x64
   120cc:	beq	121f0 <__assert_fail@plt+0x12c0>
   120d0:	cmn	r0, #3
   120d4:	beq	121b4 <__assert_fail@plt+0x1284>
   120d8:	mov	r0, #1
   120dc:	bl	11bd4 <__assert_fail@plt+0xca4>
   120e0:	cmp	r0, #119	; 0x77
   120e4:	beq	1210c <__assert_fail@plt+0x11dc>
   120e8:	blt	120d8 <__assert_fail@plt+0x11a8>
   120ec:	sub	r3, r0, #256	; 0x100
   120f0:	cmp	r3, #7
   120f4:	bhi	120d8 <__assert_fail@plt+0x11a8>
   120f8:	mov	r5, r0
   120fc:	b	12090 <__assert_fail@plt+0x1160>
   12100:	mov	r3, #1
   12104:	str	r3, [sp, #16]
   12108:	b	12090 <__assert_fail@plt+0x1160>
   1210c:	ldr	r3, [pc, #2260]	; 129e8 <__assert_fail@plt+0x1ab8>
   12110:	str	r3, [sp]
   12114:	add	r3, sp, #48	; 0x30
   12118:	mov	r2, #10
   1211c:	mov	r1, #0
   12120:	ldr	r0, [r9]
   12124:	bl	165ec <__assert_fail@plt+0x56bc>
   12128:	cmp	r0, #1
   1212c:	bhi	12174 <__assert_fail@plt+0x1244>
   12130:	ldrd	r2, [sp, #48]	; 0x30
   12134:	cmp	r2, #0
   12138:	sbcs	r1, r3, #0
   1213c:	blt	12174 <__assert_fail@plt+0x1244>
   12140:	mvn	sl, #-2147483648	; 0x80000000
   12144:	mov	fp, #0
   12148:	cmp	sl, r2
   1214c:	sbcs	r1, fp, r3
   12150:	movge	r1, #1
   12154:	movlt	r1, #0
   12158:	cmp	r0, #1
   1215c:	moveq	r0, #0
   12160:	andne	r0, r1, #1
   12164:	cmp	r0, #0
   12168:	moveq	r2, #0
   1216c:	mov	fp, r2
   12170:	b	12090 <__assert_fail@plt+0x1160>
   12174:	mov	r2, #5
   12178:	ldr	r1, [pc, #2180]	; 12a04 <__assert_fail@plt+0x1ad4>
   1217c:	mov	r0, #0
   12180:	bl	10d68 <dcgettext@plt>
   12184:	mov	r4, r0
   12188:	ldr	r3, [pc, #2160]	; 12a00 <__assert_fail@plt+0x1ad0>
   1218c:	ldr	r0, [r3]
   12190:	bl	158ac <__assert_fail@plt+0x497c>
   12194:	str	r0, [sp]
   12198:	mov	r3, r4
   1219c:	ldr	r2, [pc, #2148]	; 12a08 <__assert_fail@plt+0x1ad8>
   121a0:	mov	r1, #0
   121a4:	mov	r0, #1
   121a8:	bl	10dd4 <error@plt>
   121ac:	mov	r0, #0
   121b0:	bl	11bd4 <__assert_fail@plt+0xca4>
   121b4:	mov	r4, #0
   121b8:	str	r4, [sp, #8]
   121bc:	ldr	r3, [pc, #2120]	; 12a0c <__assert_fail@plt+0x1adc>
   121c0:	str	r3, [sp, #4]
   121c4:	ldr	r3, [pc, #2116]	; 12a10 <__assert_fail@plt+0x1ae0>
   121c8:	str	r3, [sp]
   121cc:	ldr	r3, [pc, #2112]	; 12a14 <__assert_fail@plt+0x1ae4>
   121d0:	ldr	r3, [r3]
   121d4:	ldr	r2, [pc, #2108]	; 12a18 <__assert_fail@plt+0x1ae8>
   121d8:	ldr	r1, [pc, #2108]	; 12a1c <__assert_fail@plt+0x1aec>
   121dc:	ldr	r0, [pc, #2108]	; 12a20 <__assert_fail@plt+0x1af0>
   121e0:	ldr	r0, [r0]
   121e4:	bl	15d78 <__assert_fail@plt+0x4e48>
   121e8:	mov	r0, r4
   121ec:	bl	10e28 <exit@plt>
   121f0:	mov	r3, #1
   121f4:	str	r3, [sp, #20]
   121f8:	b	12090 <__assert_fail@plt+0x1160>
   121fc:	sub	r5, r5, #256	; 0x100
   12200:	cmp	r5, #7
   12204:	ldrls	pc, [pc, r5, lsl #2]
   12208:	b	12400 <__assert_fail@plt+0x14d0>
   1220c:	andeq	r2, r1, ip, lsr #4
   12210:			; <UNDEFINED> instruction: 0x000122b0
   12214:	andeq	r2, r1, r0, ror #5
   12218:	andeq	r2, r1, r0, lsl r3
   1221c:	andeq	r2, r1, r0, asr #6
   12220:	andeq	r2, r1, r0, ror r3
   12224:	andeq	r2, r1, r0, lsr #7
   12228:	ldrdeq	r2, [r1], -r0
   1222c:	ldr	r3, [pc, #2032]	; 12a24 <__assert_fail@plt+0x1af4>
   12230:	ldr	r2, [pc, #2032]	; 12a28 <__assert_fail@plt+0x1af8>
   12234:	str	r2, [r3]
   12238:	ldr	r2, [pc, #2028]	; 12a2c <__assert_fail@plt+0x1afc>
   1223c:	str	r2, [r3, #4]
   12240:	ldr	r2, [pc, #2024]	; 12a30 <__assert_fail@plt+0x1b00>
   12244:	str	r2, [r3, #8]
   12248:	ldr	r2, [pc, #2020]	; 12a34 <__assert_fail@plt+0x1b04>
   1224c:	str	r2, [r3, #12]
   12250:	ldr	r2, [pc, #2016]	; 12a38 <__assert_fail@plt+0x1b08>
   12254:	str	r2, [r3, #16]
   12258:	ldr	r3, [pc, #2012]	; 12a3c <__assert_fail@plt+0x1b0c>
   1225c:	ldr	r3, [r3]
   12260:	sub	r2, r6, r3
   12264:	cmp	r2, #1
   12268:	ble	12428 <__assert_fail@plt+0x14f8>
   1226c:	mov	r2, #5
   12270:	ldr	r1, [pc, #1992]	; 12a40 <__assert_fail@plt+0x1b10>
   12274:	mov	r0, #0
   12278:	bl	10d68 <dcgettext@plt>
   1227c:	mov	r5, r0
   12280:	ldr	r3, [pc, #1972]	; 12a3c <__assert_fail@plt+0x1b0c>
   12284:	ldr	r3, [r3]
   12288:	add	r3, r3, #1
   1228c:	ldr	r0, [r4, r3, lsl #2]
   12290:	bl	158ac <__assert_fail@plt+0x497c>
   12294:	mov	r3, r0
   12298:	mov	r2, r5
   1229c:	mov	r1, #0
   122a0:	mov	r0, r1
   122a4:	bl	10dd4 <error@plt>
   122a8:	mov	r0, #1
   122ac:	bl	11bd4 <__assert_fail@plt+0xca4>
   122b0:	ldr	r3, [pc, #1900]	; 12a24 <__assert_fail@plt+0x1af4>
   122b4:	ldr	r2, [pc, #1900]	; 12a28 <__assert_fail@plt+0x1af8>
   122b8:	str	r2, [r3]
   122bc:	ldr	r2, [pc, #1920]	; 12a44 <__assert_fail@plt+0x1b14>
   122c0:	str	r2, [r3, #4]
   122c4:	ldr	r2, [pc, #1916]	; 12a48 <__assert_fail@plt+0x1b18>
   122c8:	str	r2, [r3, #8]
   122cc:	ldr	r2, [pc, #1912]	; 12a4c <__assert_fail@plt+0x1b1c>
   122d0:	str	r2, [r3, #12]
   122d4:	ldr	r2, [pc, #1908]	; 12a50 <__assert_fail@plt+0x1b20>
   122d8:	str	r2, [r3, #16]
   122dc:	b	12258 <__assert_fail@plt+0x1328>
   122e0:	ldr	r3, [pc, #1852]	; 12a24 <__assert_fail@plt+0x1af4>
   122e4:	ldr	r2, [pc, #1896]	; 12a54 <__assert_fail@plt+0x1b24>
   122e8:	str	r2, [r3]
   122ec:	ldr	r2, [pc, #1892]	; 12a58 <__assert_fail@plt+0x1b28>
   122f0:	str	r2, [r3, #4]
   122f4:	ldr	r2, [pc, #1888]	; 12a5c <__assert_fail@plt+0x1b2c>
   122f8:	str	r2, [r3, #8]
   122fc:	ldr	r2, [pc, #1884]	; 12a60 <__assert_fail@plt+0x1b30>
   12300:	str	r2, [r3, #12]
   12304:	ldr	r2, [pc, #1880]	; 12a64 <__assert_fail@plt+0x1b34>
   12308:	str	r2, [r3, #16]
   1230c:	b	12258 <__assert_fail@plt+0x1328>
   12310:	ldr	r3, [pc, #1804]	; 12a24 <__assert_fail@plt+0x1af4>
   12314:	ldr	r2, [pc, #1848]	; 12a54 <__assert_fail@plt+0x1b24>
   12318:	str	r2, [r3]
   1231c:	ldr	r2, [pc, #1860]	; 12a68 <__assert_fail@plt+0x1b38>
   12320:	str	r2, [r3, #4]
   12324:	ldr	r2, [pc, #1856]	; 12a6c <__assert_fail@plt+0x1b3c>
   12328:	str	r2, [r3, #8]
   1232c:	ldr	r2, [pc, #1852]	; 12a70 <__assert_fail@plt+0x1b40>
   12330:	str	r2, [r3, #12]
   12334:	ldr	r2, [pc, #1848]	; 12a74 <__assert_fail@plt+0x1b44>
   12338:	str	r2, [r3, #16]
   1233c:	b	12258 <__assert_fail@plt+0x1328>
   12340:	ldr	r3, [pc, #1756]	; 12a24 <__assert_fail@plt+0x1af4>
   12344:	ldr	r2, [pc, #1836]	; 12a78 <__assert_fail@plt+0x1b48>
   12348:	str	r2, [r3]
   1234c:	ldr	r2, [pc, #1832]	; 12a7c <__assert_fail@plt+0x1b4c>
   12350:	str	r2, [r3, #4]
   12354:	ldr	r2, [pc, #1828]	; 12a80 <__assert_fail@plt+0x1b50>
   12358:	str	r2, [r3, #8]
   1235c:	ldr	r2, [pc, #1824]	; 12a84 <__assert_fail@plt+0x1b54>
   12360:	str	r2, [r3, #12]
   12364:	ldr	r2, [pc, #1820]	; 12a88 <__assert_fail@plt+0x1b58>
   12368:	str	r2, [r3, #16]
   1236c:	b	12258 <__assert_fail@plt+0x1328>
   12370:	ldr	r3, [pc, #1708]	; 12a24 <__assert_fail@plt+0x1af4>
   12374:	ldr	r2, [pc, #1808]	; 12a8c <__assert_fail@plt+0x1b5c>
   12378:	str	r2, [r3]
   1237c:	ldr	r2, [pc, #1804]	; 12a90 <__assert_fail@plt+0x1b60>
   12380:	str	r2, [r3, #4]
   12384:	ldr	r2, [pc, #1800]	; 12a94 <__assert_fail@plt+0x1b64>
   12388:	str	r2, [r3, #8]
   1238c:	ldr	r2, [pc, #1796]	; 12a98 <__assert_fail@plt+0x1b68>
   12390:	str	r2, [r3, #12]
   12394:	ldr	r2, [pc, #1792]	; 12a9c <__assert_fail@plt+0x1b6c>
   12398:	str	r2, [r3, #16]
   1239c:	b	12258 <__assert_fail@plt+0x1328>
   123a0:	ldr	r3, [pc, #1660]	; 12a24 <__assert_fail@plt+0x1af4>
   123a4:	ldr	r2, [pc, #1760]	; 12a8c <__assert_fail@plt+0x1b5c>
   123a8:	str	r2, [r3]
   123ac:	ldr	r2, [pc, #1756]	; 12a90 <__assert_fail@plt+0x1b60>
   123b0:	str	r2, [r3, #4]
   123b4:	ldr	r2, [pc, #1764]	; 12aa0 <__assert_fail@plt+0x1b70>
   123b8:	str	r2, [r3, #8]
   123bc:	ldr	r2, [pc, #1748]	; 12a98 <__assert_fail@plt+0x1b68>
   123c0:	str	r2, [r3, #12]
   123c4:	ldr	r2, [pc, #1752]	; 12aa4 <__assert_fail@plt+0x1b74>
   123c8:	str	r2, [r3, #16]
   123cc:	b	12258 <__assert_fail@plt+0x1328>
   123d0:	ldr	r3, [pc, #1612]	; 12a24 <__assert_fail@plt+0x1af4>
   123d4:	ldr	r2, [pc, #1740]	; 12aa8 <__assert_fail@plt+0x1b78>
   123d8:	str	r2, [r3]
   123dc:	ldr	r2, [pc, #1736]	; 12aac <__assert_fail@plt+0x1b7c>
   123e0:	str	r2, [r3, #4]
   123e4:	ldr	r2, [pc, #1732]	; 12ab0 <__assert_fail@plt+0x1b80>
   123e8:	str	r2, [r3, #8]
   123ec:	ldr	r2, [pc, #1728]	; 12ab4 <__assert_fail@plt+0x1b84>
   123f0:	str	r2, [r3, #12]
   123f4:	ldr	r2, [pc, #1724]	; 12ab8 <__assert_fail@plt+0x1b88>
   123f8:	str	r2, [r3, #16]
   123fc:	b	12258 <__assert_fail@plt+0x1328>
   12400:	mov	r2, #5
   12404:	ldr	r1, [pc, #1712]	; 12abc <__assert_fail@plt+0x1b8c>
   12408:	mov	r0, #0
   1240c:	bl	10d68 <dcgettext@plt>
   12410:	mov	r2, r0
   12414:	mov	r1, #0
   12418:	mov	r0, r1
   1241c:	bl	10dd4 <error@plt>
   12420:	mov	r0, #1
   12424:	bl	11bd4 <__assert_fail@plt+0xca4>
   12428:	cmp	r6, r3
   1242c:	ble	1248c <__assert_fail@plt+0x155c>
   12430:	ldr	r3, [r4, r3, lsl #2]
   12434:	str	r3, [sp, #36]	; 0x24
   12438:	ldr	r1, [pc, #1664]	; 12ac0 <__assert_fail@plt+0x1b90>
   1243c:	mov	r0, r3
   12440:	bl	10ce4 <strcmp@plt>
   12444:	cmp	r0, #0
   12448:	beq	12494 <__assert_fail@plt+0x1564>
   1244c:	ldr	r1, [pc, #1648]	; 12ac4 <__assert_fail@plt+0x1b94>
   12450:	ldr	r0, [sp, #36]	; 0x24
   12454:	bl	10ef4 <fopen64@plt>
   12458:	subs	r4, r0, #0
   1245c:	bne	1249c <__assert_fail@plt+0x156c>
   12460:	bl	10e4c <__errno_location@plt>
   12464:	ldr	r4, [r0]
   12468:	ldr	r2, [sp, #36]	; 0x24
   1246c:	mov	r1, #3
   12470:	mov	r0, #0
   12474:	bl	15744 <__assert_fail@plt+0x4814>
   12478:	mov	r3, r0
   1247c:	ldr	r2, [pc, #1604]	; 12ac8 <__assert_fail@plt+0x1b98>
   12480:	mov	r1, r4
   12484:	mov	r0, #1
   12488:	bl	10dd4 <error@plt>
   1248c:	ldr	r3, [pc, #1580]	; 12ac0 <__assert_fail@plt+0x1b90>
   12490:	str	r3, [sp, #36]	; 0x24
   12494:	ldr	r3, [pc, #1584]	; 12acc <__assert_fail@plt+0x1b9c>
   12498:	ldr	r4, [r3]
   1249c:	mov	r1, #2
   124a0:	mov	r0, r4
   124a4:	bl	13b1c <__assert_fail@plt+0x2bec>
   124a8:	ldr	r3, [sp, #20]
   124ac:	cmp	r3, #0
   124b0:	beq	12688 <__assert_fail@plt+0x1758>
   124b4:	ldr	r3, [pc, #1380]	; 12a20 <__assert_fail@plt+0x1af0>
   124b8:	ldr	r3, [r3]
   124bc:	str	r3, [sp, #24]
   124c0:	ldr	r6, [pc, #1544]	; 12ad0 <__assert_fail@plt+0x1ba0>
   124c4:	ldr	r5, [pc, #1368]	; 12a24 <__assert_fail@plt+0x1af4>
   124c8:	ldr	r3, [r5]
   124cc:	mov	r0, r6
   124d0:	blx	r3
   124d4:	bl	15e44 <__assert_fail@plt+0x4f14>
   124d8:	mov	fp, r0
   124dc:	mov	r0, r6
   124e0:	bl	15e44 <__assert_fail@plt+0x4f14>
   124e4:	str	r0, [sp, #20]
   124e8:	mov	r3, #0
   124ec:	str	r3, [sp, #64]	; 0x40
   124f0:	ldr	r3, [r5, #12]
   124f4:	add	r0, sp, #48	; 0x30
   124f8:	blx	r3
   124fc:	mov	r9, r5
   12500:	mov	r7, #0
   12504:	b	1258c <__assert_fail@plt+0x165c>
   12508:	add	r5, r5, #1
   1250c:	bic	r3, r5, r5, asr #31
   12510:	cmp	r8, r3
   12514:	ble	1255c <__assert_fail@plt+0x162c>
   12518:	add	r6, r7, r5
   1251c:	ldr	r3, [r9, #4]
   12520:	ldrb	r0, [fp, r6]
   12524:	blx	r3
   12528:	cmp	r0, #0
   1252c:	bne	12508 <__assert_fail@plt+0x15d8>
   12530:	ldrb	r3, [fp, r6]
   12534:	cmp	r3, #61	; 0x3d
   12538:	beq	12508 <__assert_fail@plt+0x15d8>
   1253c:	add	r0, r5, sl
   12540:	sub	r8, r8, #1
   12544:	add	r1, r0, #1
   12548:	sub	r2, r8, r5
   1254c:	add	r1, fp, r1
   12550:	add	r0, fp, r0
   12554:	bl	10d08 <memmove@plt>
   12558:	b	1250c <__assert_fail@plt+0x15dc>
   1255c:	add	r7, r7, r8
   12560:	ldr	r3, [r4]
   12564:	ands	r5, r3, #32
   12568:	bne	125cc <__assert_fail@plt+0x169c>
   1256c:	ldr	r3, [r9]
   12570:	ldr	r0, [pc, #1368]	; 12ad0 <__assert_fail@plt+0x1ba0>
   12574:	blx	r3
   12578:	cmp	r7, r0
   1257c:	bge	12678 <__assert_fail@plt+0x1748>
   12580:	ldr	r3, [r4]
   12584:	tst	r3, #16
   12588:	bne	125f4 <__assert_fail@plt+0x16c4>
   1258c:	mov	sl, r7
   12590:	add	r5, fp, r7
   12594:	ldr	r3, [r9]
   12598:	ldr	r0, [pc, #1328]	; 12ad0 <__assert_fail@plt+0x1ba0>
   1259c:	blx	r3
   125a0:	mov	r3, r4
   125a4:	sub	r2, r0, r7
   125a8:	mov	r1, #1
   125ac:	mov	r0, r5
   125b0:	bl	10f0c <fread_unlocked@plt>
   125b4:	mov	r8, r0
   125b8:	ldr	r3, [sp, #16]
   125bc:	cmp	r3, #0
   125c0:	beq	1255c <__assert_fail@plt+0x162c>
   125c4:	mov	r5, #0
   125c8:	b	1250c <__assert_fail@plt+0x15dc>
   125cc:	bl	10e4c <__errno_location@plt>
   125d0:	ldr	r4, [r0]
   125d4:	mov	r2, #5
   125d8:	ldr	r1, [pc, #1268]	; 12ad4 <__assert_fail@plt+0x1ba4>
   125dc:	mov	r0, #0
   125e0:	bl	10d68 <dcgettext@plt>
   125e4:	mov	r2, r0
   125e8:	mov	r1, r4
   125ec:	mov	r0, #1
   125f0:	bl	10dd4 <error@plt>
   125f4:	mov	r6, r5
   125f8:	b	1267c <__assert_fail@plt+0x174c>
   125fc:	ldr	r2, [sp, #48]	; 0x30
   12600:	cmp	r2, #0
   12604:	beq	12664 <__assert_fail@plt+0x1734>
   12608:	ldr	r3, [pc, #1216]	; 12ad0 <__assert_fail@plt+0x1ba0>
   1260c:	str	r3, [sp, #44]	; 0x2c
   12610:	ldr	r8, [r9, #16]
   12614:	ldr	r2, [sp, #28]
   12618:	b	12988 <__assert_fail@plt+0x1a58>
   1261c:	bl	10e4c <__errno_location@plt>
   12620:	ldr	r4, [r0]
   12624:	mov	r2, #5
   12628:	ldr	r1, [pc, #1192]	; 12ad8 <__assert_fail@plt+0x1ba8>
   1262c:	mov	r0, #0
   12630:	bl	10d68 <dcgettext@plt>
   12634:	mov	r2, r0
   12638:	mov	r1, r4
   1263c:	mov	r0, #1
   12640:	bl	10dd4 <error@plt>
   12644:	mov	r2, #5
   12648:	ldr	r1, [pc, #1164]	; 12adc <__assert_fail@plt+0x1bac>
   1264c:	mov	r0, #0
   12650:	bl	10d68 <dcgettext@plt>
   12654:	mov	r2, r0
   12658:	mov	r1, #0
   1265c:	mov	r0, #1
   12660:	bl	10dd4 <error@plt>
   12664:	cmp	r3, #0
   12668:	beq	12500 <__assert_fail@plt+0x15d0>
   1266c:	ldr	r1, [sp, #36]	; 0x24
   12670:	mov	r0, r4
   12674:	bl	11a58 <__assert_fail@plt+0xb28>
   12678:	mov	r6, r5
   1267c:	str	r5, [sp, #28]
   12680:	mov	sl, #1
   12684:	b	129d0 <__assert_fail@plt+0x1aa0>
   12688:	ldr	r3, [pc, #912]	; 12a20 <__assert_fail@plt+0x1af0>
   1268c:	ldr	sl, [r3]
   12690:	mov	r0, #30720	; 0x7800
   12694:	bl	15e44 <__assert_fail@plt+0x4f14>
   12698:	mov	r5, r0
   1269c:	ldr	r3, [pc, #896]	; 12a24 <__assert_fail@plt+0x1af4>
   126a0:	ldr	r3, [r3]
   126a4:	mov	r0, #30720	; 0x7800
   126a8:	blx	r3
   126ac:	bl	15e44 <__assert_fail@plt+0x4f14>
   126b0:	str	r0, [sp, #16]
   126b4:	mov	r8, #0
   126b8:	mov	r3, #10
   126bc:	str	r3, [sp, #24]
   126c0:	str	fp, [sp, #20]
   126c4:	mov	fp, r5
   126c8:	b	12700 <__assert_fail@plt+0x17d0>
   126cc:	ldr	r3, [pc, #844]	; 12a20 <__assert_fail@plt+0x1af0>
   126d0:	ldr	r3, [r3]
   126d4:	mov	r2, r0
   126d8:	mov	r1, #1
   126dc:	ldr	r0, [sp, #16]
   126e0:	bl	10d44 <fwrite_unlocked@plt>
   126e4:	cmp	r9, r0
   126e8:	bhi	127a8 <__assert_fail@plt+0x1878>
   126ec:	ldr	r3, [r4]
   126f0:	and	r3, r3, #48	; 0x30
   126f4:	cmp	r6, #30720	; 0x7800
   126f8:	cmpeq	r3, #0
   126fc:	bne	128b4 <__assert_fail@plt+0x1984>
   12700:	mov	r6, #0
   12704:	mov	r5, #1
   12708:	mov	r3, r4
   1270c:	rsb	r2, r6, #30720	; 0x7800
   12710:	mov	r1, r5
   12714:	add	r0, fp, r6
   12718:	bl	10f0c <fread_unlocked@plt>
   1271c:	add	r6, r6, r0
   12720:	ldr	r3, [r4]
   12724:	and	r3, r3, #48	; 0x30
   12728:	ldr	r2, [pc, #944]	; 12ae0 <__assert_fail@plt+0x1bb0>
   1272c:	cmp	r6, r2
   12730:	cmple	r3, #0
   12734:	beq	12708 <__assert_fail@plt+0x17d8>
   12738:	cmp	r6, #0
   1273c:	ble	126ec <__assert_fail@plt+0x17bc>
   12740:	ldr	r3, [pc, #732]	; 12a24 <__assert_fail@plt+0x1af4>
   12744:	ldr	r5, [r3, #8]
   12748:	ldr	r3, [r3]
   1274c:	mov	r0, r6
   12750:	blx	r3
   12754:	mov	r3, r0
   12758:	ldr	r2, [sp, #16]
   1275c:	mov	r1, r6
   12760:	mov	r0, fp
   12764:	blx	r5
   12768:	ldr	r3, [pc, #692]	; 12a24 <__assert_fail@plt+0x1af4>
   1276c:	ldr	r3, [r3]
   12770:	mov	r0, r6
   12774:	blx	r3
   12778:	mov	r9, r0
   1277c:	ldr	r3, [sp, #20]
   12780:	cmp	r3, #0
   12784:	beq	126cc <__assert_fail@plt+0x179c>
   12788:	cmp	r0, #0
   1278c:	ble	126ec <__assert_fail@plt+0x17bc>
   12790:	mov	r7, #0
   12794:	str	r4, [sp, #28]
   12798:	ldr	r5, [sp, #20]
   1279c:	str	fp, [sp, #32]
   127a0:	ldr	fp, [sp, #16]
   127a4:	b	12840 <__assert_fail@plt+0x1910>
   127a8:	bl	10e4c <__errno_location@plt>
   127ac:	ldr	r4, [r0]
   127b0:	mov	r2, #5
   127b4:	ldr	r1, [pc, #796]	; 12ad8 <__assert_fail@plt+0x1ba8>
   127b8:	mov	r0, #0
   127bc:	bl	10d68 <dcgettext@plt>
   127c0:	mov	r2, r0
   127c4:	mov	r1, r4
   127c8:	mov	r0, #1
   127cc:	bl	10dd4 <error@plt>
   127d0:	ldr	r1, [sp, #24]
   127d4:	mov	r0, sl
   127d8:	bl	10eb8 <__overflow@plt>
   127dc:	cmn	r0, #1
   127e0:	movne	r8, #0
   127e4:	bne	12838 <__assert_fail@plt+0x1908>
   127e8:	bl	10e4c <__errno_location@plt>
   127ec:	ldr	r4, [r0]
   127f0:	mov	r2, #5
   127f4:	ldr	r1, [pc, #732]	; 12ad8 <__assert_fail@plt+0x1ba8>
   127f8:	mov	r0, #0
   127fc:	bl	10d68 <dcgettext@plt>
   12800:	mov	r2, r0
   12804:	mov	r1, r4
   12808:	mov	r0, #1
   1280c:	bl	10dd4 <error@plt>
   12810:	ldr	r3, [pc, #520]	; 12a20 <__assert_fail@plt+0x1af0>
   12814:	ldr	r3, [r3]
   12818:	mov	r2, r4
   1281c:	mov	r1, #1
   12820:	add	r0, fp, r7
   12824:	bl	10d44 <fwrite_unlocked@plt>
   12828:	cmp	r4, r0
   1282c:	bhi	12880 <__assert_fail@plt+0x1950>
   12830:	add	r8, r8, r4
   12834:	add	r7, r7, r4
   12838:	cmp	r9, r7
   1283c:	ble	128a8 <__assert_fail@plt+0x1978>
   12840:	sub	r4, r9, r7
   12844:	sub	r3, r5, r8
   12848:	cmp	r4, r3
   1284c:	movge	r4, r3
   12850:	cmp	r4, #0
   12854:	bne	12810 <__assert_fail@plt+0x18e0>
   12858:	ldr	r3, [sl, #20]
   1285c:	ldr	r2, [sl, #24]
   12860:	cmp	r3, r2
   12864:	bcs	127d0 <__assert_fail@plt+0x18a0>
   12868:	add	r2, r3, #1
   1286c:	str	r2, [sl, #20]
   12870:	mov	r2, #10
   12874:	strb	r2, [r3]
   12878:	mov	r8, #0
   1287c:	b	12838 <__assert_fail@plt+0x1908>
   12880:	bl	10e4c <__errno_location@plt>
   12884:	ldr	r4, [r0]
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #580]	; 12ad8 <__assert_fail@plt+0x1ba8>
   12890:	mov	r0, #0
   12894:	bl	10d68 <dcgettext@plt>
   12898:	mov	r2, r0
   1289c:	mov	r1, r4
   128a0:	mov	r0, #1
   128a4:	bl	10dd4 <error@plt>
   128a8:	ldr	r4, [sp, #28]
   128ac:	ldr	fp, [sp, #32]
   128b0:	b	126ec <__assert_fail@plt+0x17bc>
   128b4:	ldr	fp, [sp, #20]
   128b8:	cmp	fp, #0
   128bc:	cmpne	r8, #0
   128c0:	ble	128e4 <__assert_fail@plt+0x19b4>
   128c4:	ldr	r3, [sl, #20]
   128c8:	ldr	r2, [sl, #24]
   128cc:	cmp	r3, r2
   128d0:	addcc	r2, r3, #1
   128d4:	strcc	r2, [sl, #20]
   128d8:	movcc	r2, #10
   128dc:	strbcc	r2, [r3]
   128e0:	bcs	12918 <__assert_fail@plt+0x19e8>
   128e4:	ldr	r3, [r4]
   128e8:	tst	r3, #32
   128ec:	beq	12954 <__assert_fail@plt+0x1a24>
   128f0:	bl	10e4c <__errno_location@plt>
   128f4:	ldr	r4, [r0]
   128f8:	mov	r2, #5
   128fc:	ldr	r1, [pc, #464]	; 12ad4 <__assert_fail@plt+0x1ba4>
   12900:	mov	r0, #0
   12904:	bl	10d68 <dcgettext@plt>
   12908:	mov	r2, r0
   1290c:	mov	r1, r4
   12910:	mov	r0, #1
   12914:	bl	10dd4 <error@plt>
   12918:	mov	r1, #10
   1291c:	mov	r0, sl
   12920:	bl	10eb8 <__overflow@plt>
   12924:	cmn	r0, #1
   12928:	bne	128e4 <__assert_fail@plt+0x19b4>
   1292c:	bl	10e4c <__errno_location@plt>
   12930:	ldr	r4, [r0]
   12934:	mov	r2, #5
   12938:	ldr	r1, [pc, #408]	; 12ad8 <__assert_fail@plt+0x1ba8>
   1293c:	mov	r0, #0
   12940:	bl	10d68 <dcgettext@plt>
   12944:	mov	r2, r0
   12948:	mov	r1, r4
   1294c:	mov	r0, #1
   12950:	bl	10dd4 <error@plt>
   12954:	ldr	r1, [sp, #36]	; 0x24
   12958:	mov	r0, r4
   1295c:	bl	11a58 <__assert_fail@plt+0xb28>
   12960:	cmp	r6, #1
   12964:	bgt	1266c <__assert_fail@plt+0x173c>
   12968:	cmp	r6, #1
   1296c:	beq	125fc <__assert_fail@plt+0x16cc>
   12970:	ldr	r3, [pc, #344]	; 12ad0 <__assert_fail@plt+0x1ba0>
   12974:	str	r3, [sp, #44]	; 0x2c
   12978:	ldr	r8, [r9, #16]
   1297c:	cmp	r6, #0
   12980:	moveq	r2, r7
   12984:	movne	r2, r5
   12988:	add	r3, sp, #44	; 0x2c
   1298c:	str	r3, [sp]
   12990:	ldr	r3, [sp, #20]
   12994:	mov	r1, fp
   12998:	add	r0, sp, #48	; 0x30
   1299c:	blx	r8
   129a0:	mov	r8, r0
   129a4:	ldr	r3, [sp, #24]
   129a8:	ldr	r2, [sp, #44]	; 0x2c
   129ac:	mov	r1, sl
   129b0:	ldr	r0, [sp, #20]
   129b4:	bl	10d44 <fwrite_unlocked@plt>
   129b8:	ldr	r3, [sp, #44]	; 0x2c
   129bc:	cmp	r0, r3
   129c0:	bcc	1261c <__assert_fail@plt+0x16ec>
   129c4:	cmp	r8, #0
   129c8:	beq	12644 <__assert_fail@plt+0x1714>
   129cc:	add	r6, r6, #1
   129d0:	ldr	r3, [r4]
   129d4:	ands	r3, r3, #16
   129d8:	bne	12960 <__assert_fail@plt+0x1a30>
   129dc:	cmp	r6, #0
   129e0:	ble	12968 <__assert_fail@plt+0x1a38>
   129e4:	b	12500 <__assert_fail@plt+0x15d0>
   129e8:	andeq	r7, r1, r0, lsr ip
   129ec:	andeq	r7, r1, r8, ror sp
   129f0:	andeq	r7, r1, r0, lsr #28
   129f4:	andeq	r3, r1, r4, lsl #20
   129f8:	andeq	r7, r1, r4, lsr #11
   129fc:	andeq	r7, r1, r4, ror lr
   12a00:	andeq	r9, r2, r8, asr r1
   12a04:	andeq	r7, r1, r8, lsr lr
   12a08:	andeq	r7, r1, ip, asr #28
   12a0c:	andeq	r7, r1, r4, asr lr
   12a10:	andeq	r7, r1, r4, ror #28
   12a14:	andeq	r9, r2, ip, ror #1
   12a18:	andeq	r7, r1, r4, ror sp
   12a1c:	andeq	r7, r1, ip, lsl r7
   12a20:	andeq	r9, r2, r4, asr r1
   12a24:	andeq	r9, r2, r0, ror #2
   12a28:	andeq	r1, r1, r4, rrx
   12a2c:	andeq	r3, r1, r4, lsr #14
   12a30:			; <UNDEFINED> instruction: 0x000134b0
   12a34:	andeq	r1, r1, r8, asr #20
   12a38:	andeq	r1, r1, r0, lsl #20
   12a3c:	andeq	r9, r2, r0, asr #2
   12a40:	muleq	r1, r4, lr
   12a44:	andeq	r1, r1, r0, lsl #14
   12a48:	andeq	r1, r1, ip, lsr r7
   12a4c:	andeq	r1, r1, ip, lsr #20
   12a50:	andeq	r1, r1, r8, ror #21
   12a54:	andeq	r1, r1, r0, lsl #1
   12a58:	andeq	r3, r1, r4, rrx
   12a5c:	andeq	r2, r1, r0, lsl #27
   12a60:	andeq	r1, r1, r4, ror #18
   12a64:	andeq	r1, r1, r0, ror #16
   12a68:	andeq	r1, r1, r0, lsr #1
   12a6c:	andeq	r1, r1, r4, ror r9
   12a70:	andeq	r1, r1, r8, asr #18
   12a74:	andeq	r1, r1, ip, lsl #17
   12a78:	andeq	r1, r1, r8, ror #1
   12a7c:	andeq	r1, r1, r4, asr #1
   12a80:	strdeq	r1, [r1], -r0
   12a84:	strdeq	r1, [r1], -r0
   12a88:	andeq	r1, r1, r8, lsr r1
   12a8c:	andeq	r1, r1, ip, asr r3
   12a90:	andeq	r1, r1, r4, asr #6
   12a94:	andeq	r1, r1, r4, ror #6
   12a98:	ldrdeq	r1, [r1], -r4
   12a9c:	andeq	r1, r1, r8, asr #9
   12aa0:	andeq	r1, r1, r0, asr #7
   12aa4:	andeq	r1, r1, r8, lsl r4
   12aa8:	ldrdeq	r1, [r1], -r8
   12aac:	andeq	r1, r1, r0, lsl r8
   12ab0:	muleq	r1, r4, r5
   12ab4:			; <UNDEFINED> instruction: 0x000117b4
   12ab8:	strdeq	r1, [r1], -r0
   12abc:	andeq	r7, r1, ip, ror lr
   12ac0:	andeq	r7, r1, r0, lsl #14
   12ac4:	andeq	r7, r1, r8, lsr #29
   12ac8:	andeq	r7, r1, r0, asr lr
   12acc:	andeq	r9, r2, r0, asr r1
   12ad0:	andeq	r1, r0, r8, rrx
   12ad4:	andeq	r7, r1, ip, lsr #29
   12ad8:			; <UNDEFINED> instruction: 0x00017eb8
   12adc:	andeq	r7, r1, r4, asr #29
   12ae0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   12ae4:	cmp	r1, #7
   12ae8:	ble	12d64 <__assert_fail@plt+0x1e34>
   12aec:	ldrb	r1, [r0]
   12af0:	ldr	ip, [pc, #644]	; 12d7c <__assert_fail@plt+0x1e4c>
   12af4:	ldrsb	r1, [ip, r1]
   12af8:	cmp	r1, #0
   12afc:	blt	12d6c <__assert_fail@plt+0x1e3c>
   12b00:	push	{r4, r5, lr}
   12b04:	ldrb	ip, [r0, #1]
   12b08:	ldr	lr, [pc, #620]	; 12d7c <__assert_fail@plt+0x1e4c>
   12b0c:	ldrsb	lr, [lr, ip]
   12b10:	cmp	lr, #0
   12b14:	blt	12d74 <__assert_fail@plt+0x1e44>
   12b18:	ldr	ip, [r2]
   12b1c:	ldr	r4, [r3]
   12b20:	cmp	r4, #0
   12b24:	beq	12b44 <__assert_fail@plt+0x1c14>
   12b28:	asr	r4, lr, #2
   12b2c:	orr	r1, r4, r1, lsl #3
   12b30:	strb	r1, [ip]
   12b34:	ldr	r1, [r3]
   12b38:	sub	r1, r1, #1
   12b3c:	str	r1, [r3]
   12b40:	add	ip, ip, #1
   12b44:	ldrb	r1, [r0, #2]
   12b48:	cmp	r1, #61	; 0x3d
   12b4c:	beq	12c8c <__assert_fail@plt+0x1d5c>
   12b50:	ldr	r4, [pc, #548]	; 12d7c <__assert_fail@plt+0x1e4c>
   12b54:	ldrsb	r1, [r4, r1]
   12b58:	cmp	r1, #0
   12b5c:	blt	12cd8 <__assert_fail@plt+0x1da8>
   12b60:	ldrb	r4, [r0, #3]
   12b64:	ldr	r5, [pc, #528]	; 12d7c <__assert_fail@plt+0x1e4c>
   12b68:	ldrsb	r4, [r5, r4]
   12b6c:	cmp	r4, #0
   12b70:	blt	12cd8 <__assert_fail@plt+0x1da8>
   12b74:	ldr	r5, [r3]
   12b78:	cmp	r5, #0
   12b7c:	beq	12ba0 <__assert_fail@plt+0x1c70>
   12b80:	lsl	r1, r1, #1
   12b84:	orr	lr, r1, lr, lsl #6
   12b88:	orr	lr, lr, r4, asr #4
   12b8c:	strb	lr, [ip]
   12b90:	ldr	r1, [r3]
   12b94:	sub	r1, r1, #1
   12b98:	str	r1, [r3]
   12b9c:	add	ip, ip, #1
   12ba0:	ldrb	r1, [r0, #4]
   12ba4:	cmp	r1, #61	; 0x3d
   12ba8:	beq	12ce4 <__assert_fail@plt+0x1db4>
   12bac:	ldr	lr, [pc, #456]	; 12d7c <__assert_fail@plt+0x1e4c>
   12bb0:	ldrsb	r1, [lr, r1]
   12bb4:	cmp	r1, #0
   12bb8:	blt	12d18 <__assert_fail@plt+0x1de8>
   12bbc:	ldr	lr, [r3]
   12bc0:	cmp	lr, #0
   12bc4:	beq	12be4 <__assert_fail@plt+0x1cb4>
   12bc8:	asr	lr, r1, #1
   12bcc:	orr	r4, lr, r4, lsl #4
   12bd0:	strb	r4, [ip]
   12bd4:	ldr	lr, [r3]
   12bd8:	sub	lr, lr, #1
   12bdc:	str	lr, [r3]
   12be0:	add	ip, ip, #1
   12be4:	ldrb	lr, [r0, #5]
   12be8:	cmp	lr, #61	; 0x3d
   12bec:	beq	12d24 <__assert_fail@plt+0x1df4>
   12bf0:	ldr	r4, [pc, #388]	; 12d7c <__assert_fail@plt+0x1e4c>
   12bf4:	ldrsb	lr, [r4, lr]
   12bf8:	cmp	lr, #0
   12bfc:	blt	12d4c <__assert_fail@plt+0x1e1c>
   12c00:	ldrb	r4, [r0, #6]
   12c04:	ldr	r5, [pc, #368]	; 12d7c <__assert_fail@plt+0x1e4c>
   12c08:	ldrsb	r4, [r5, r4]
   12c0c:	cmp	r4, #0
   12c10:	blt	12d4c <__assert_fail@plt+0x1e1c>
   12c14:	ldr	r5, [r3]
   12c18:	cmp	r5, #0
   12c1c:	beq	12c40 <__assert_fail@plt+0x1d10>
   12c20:	lsl	lr, lr, #2
   12c24:	orr	r1, lr, r1, lsl #7
   12c28:	orr	r1, r1, r4, asr #3
   12c2c:	strb	r1, [ip]
   12c30:	ldr	r1, [r3]
   12c34:	sub	r1, r1, #1
   12c38:	str	r1, [r3]
   12c3c:	add	ip, ip, #1
   12c40:	ldrb	r1, [r0, #7]
   12c44:	cmp	r1, #61	; 0x3d
   12c48:	beq	12c80 <__assert_fail@plt+0x1d50>
   12c4c:	ldr	r0, [pc, #296]	; 12d7c <__assert_fail@plt+0x1e4c>
   12c50:	ldrsb	r1, [r0, r1]
   12c54:	cmp	r1, #0
   12c58:	blt	12d58 <__assert_fail@plt+0x1e28>
   12c5c:	ldr	r0, [r3]
   12c60:	cmp	r0, #0
   12c64:	beq	12c80 <__assert_fail@plt+0x1d50>
   12c68:	orr	r1, r1, r4, lsl #5
   12c6c:	strb	r1, [ip]
   12c70:	ldr	r1, [r3]
   12c74:	sub	r1, r1, #1
   12c78:	str	r1, [r3]
   12c7c:	add	ip, ip, #1
   12c80:	str	ip, [r2]
   12c84:	mov	r0, #1
   12c88:	pop	{r4, r5, pc}
   12c8c:	ldrb	r3, [r0, #3]
   12c90:	cmp	r3, #61	; 0x3d
   12c94:	beq	12ca4 <__assert_fail@plt+0x1d74>
   12c98:	str	ip, [r2]
   12c9c:	mov	r0, #0
   12ca0:	pop	{r4, r5, pc}
   12ca4:	ldrb	r3, [r0, #4]
   12ca8:	cmp	r3, #61	; 0x3d
   12cac:	bne	12c98 <__assert_fail@plt+0x1d68>
   12cb0:	ldrb	r3, [r0, #5]
   12cb4:	cmp	r3, #61	; 0x3d
   12cb8:	bne	12c98 <__assert_fail@plt+0x1d68>
   12cbc:	ldrb	r3, [r0, #6]
   12cc0:	cmp	r3, #61	; 0x3d
   12cc4:	bne	12c98 <__assert_fail@plt+0x1d68>
   12cc8:	ldrb	r3, [r0, #7]
   12ccc:	cmp	r3, #61	; 0x3d
   12cd0:	bne	12c98 <__assert_fail@plt+0x1d68>
   12cd4:	b	12c80 <__assert_fail@plt+0x1d50>
   12cd8:	str	ip, [r2]
   12cdc:	mov	r0, #0
   12ce0:	pop	{r4, r5, pc}
   12ce4:	ldrb	r3, [r0, #5]
   12ce8:	cmp	r3, #61	; 0x3d
   12cec:	beq	12cfc <__assert_fail@plt+0x1dcc>
   12cf0:	str	ip, [r2]
   12cf4:	mov	r0, #0
   12cf8:	pop	{r4, r5, pc}
   12cfc:	ldrb	r3, [r0, #6]
   12d00:	cmp	r3, #61	; 0x3d
   12d04:	bne	12cf0 <__assert_fail@plt+0x1dc0>
   12d08:	ldrb	r3, [r0, #7]
   12d0c:	cmp	r3, #61	; 0x3d
   12d10:	bne	12cf0 <__assert_fail@plt+0x1dc0>
   12d14:	b	12c80 <__assert_fail@plt+0x1d50>
   12d18:	str	ip, [r2]
   12d1c:	mov	r0, #0
   12d20:	pop	{r4, r5, pc}
   12d24:	ldrb	r3, [r0, #6]
   12d28:	cmp	r3, #61	; 0x3d
   12d2c:	beq	12d3c <__assert_fail@plt+0x1e0c>
   12d30:	str	ip, [r2]
   12d34:	mov	r0, #0
   12d38:	pop	{r4, r5, pc}
   12d3c:	ldrb	r3, [r0, #7]
   12d40:	cmp	r3, #61	; 0x3d
   12d44:	bne	12d30 <__assert_fail@plt+0x1e00>
   12d48:	b	12c80 <__assert_fail@plt+0x1d50>
   12d4c:	str	ip, [r2]
   12d50:	mov	r0, #0
   12d54:	pop	{r4, r5, pc}
   12d58:	str	ip, [r2]
   12d5c:	mov	r0, #0
   12d60:	pop	{r4, r5, pc}
   12d64:	mov	r0, #0
   12d68:	bx	lr
   12d6c:	mov	r0, #0
   12d70:	bx	lr
   12d74:	mov	r0, #0
   12d78:	pop	{r4, r5, pc}
   12d7c:	andeq	r7, r1, ip, asr #31
   12d80:	push	{r4, r5, r6, lr}
   12d84:	ldr	lr, [pc, #524]	; 12f98 <__assert_fail@plt+0x2068>
   12d88:	mov	r4, #61	; 0x3d
   12d8c:	mov	r5, #0
   12d90:	b	12e30 <__assert_fail@plt+0x1f00>
   12d94:	pop	{r4, r5, r6, pc}
   12d98:	and	ip, ip, #31
   12d9c:	add	ip, lr, ip
   12da0:	ldrb	ip, [ip, #256]	; 0x100
   12da4:	strb	ip, [r2, #1]
   12da8:	cmp	r3, #2
   12dac:	popeq	{r4, r5, r6, pc}
   12db0:	cmp	r6, #0
   12db4:	bne	12e80 <__assert_fail@plt+0x1f50>
   12db8:	strb	r4, [r2, #2]
   12dbc:	cmp	r3, #3
   12dc0:	beq	12f5c <__assert_fail@plt+0x202c>
   12dc4:	strb	r4, [r2, #3]
   12dc8:	cmp	r3, #4
   12dcc:	popeq	{r4, r5, r6, pc}
   12dd0:	mov	r1, r4
   12dd4:	b	12ef0 <__assert_fail@plt+0x1fc0>
   12dd8:	pop	{r4, r5, r6, pc}
   12ddc:	strb	r4, [r2, #5]
   12de0:	cmp	r3, #6
   12de4:	popeq	{r4, r5, r6, pc}
   12de8:	cmp	r6, #0
   12dec:	moveq	r1, r4
   12df0:	bne	12f20 <__assert_fail@plt+0x1ff0>
   12df4:	strb	r1, [r2, #6]
   12df8:	cmp	r3, #7
   12dfc:	popeq	{r4, r5, r6, pc}
   12e00:	add	r2, r2, #8
   12e04:	cmp	r6, #0
   12e08:	beq	12f84 <__assert_fail@plt+0x2054>
   12e0c:	ldrb	r1, [r0, #4]
   12e10:	and	r1, r1, #31
   12e14:	add	r1, lr, r1
   12e18:	ldrb	r1, [r1, #256]	; 0x100
   12e1c:	strb	r1, [r2, #-1]
   12e20:	subs	r3, r3, #8
   12e24:	popeq	{r4, r5, r6, pc}
   12e28:	subs	r1, r6, #1
   12e2c:	addne	r0, r0, #5
   12e30:	cmp	r1, #0
   12e34:	cmpne	r3, #0
   12e38:	beq	12f4c <__assert_fail@plt+0x201c>
   12e3c:	ldrb	ip, [r0]
   12e40:	add	r6, lr, ip, lsr #3
   12e44:	ldrb	r6, [r6, #256]	; 0x100
   12e48:	strb	r6, [r2]
   12e4c:	cmp	r3, #1
   12e50:	popeq	{r4, r5, r6, pc}
   12e54:	lsl	ip, ip, #2
   12e58:	subs	r6, r1, #1
   12e5c:	beq	12d98 <__assert_fail@plt+0x1e68>
   12e60:	ldrb	r6, [r0, #1]
   12e64:	add	ip, ip, r6, lsr #6
   12e68:	and	ip, ip, #31
   12e6c:	add	ip, lr, ip
   12e70:	ldrb	ip, [ip, #256]	; 0x100
   12e74:	strb	ip, [r2, #1]
   12e78:	cmp	r3, #2
   12e7c:	beq	12d94 <__assert_fail@plt+0x1e64>
   12e80:	ldrb	ip, [r0, #1]
   12e84:	lsl	ip, ip, #26
   12e88:	add	ip, lr, ip, lsr #27
   12e8c:	ldrb	ip, [ip, #256]	; 0x100
   12e90:	strb	ip, [r2, #2]
   12e94:	cmp	r3, #3
   12e98:	popeq	{r4, r5, r6, pc}
   12e9c:	ldrb	ip, [r0, #1]
   12ea0:	lsl	ip, ip, #4
   12ea4:	cmp	r1, #2
   12ea8:	beq	12f60 <__assert_fail@plt+0x2030>
   12eac:	ldrb	r6, [r0, #2]
   12eb0:	add	ip, ip, r6, lsr #4
   12eb4:	and	ip, ip, #31
   12eb8:	add	ip, lr, ip
   12ebc:	ldrb	ip, [ip, #256]	; 0x100
   12ec0:	strb	ip, [r2, #3]
   12ec4:	cmp	r3, #4
   12ec8:	popeq	{r4, r5, r6, pc}
   12ecc:	lsl	ip, r6, #1
   12ed0:	subs	r6, r1, #3
   12ed4:	ldrbne	r1, [r0, #3]
   12ed8:	lsrne	r1, r1, #7
   12edc:	moveq	r1, r5
   12ee0:	add	r1, r1, ip
   12ee4:	and	r1, r1, #31
   12ee8:	add	r1, lr, r1
   12eec:	ldrb	r1, [r1, #256]	; 0x100
   12ef0:	strb	r1, [r2, #4]
   12ef4:	cmp	r3, #5
   12ef8:	popeq	{r4, r5, r6, pc}
   12efc:	cmp	r6, #0
   12f00:	beq	12ddc <__assert_fail@plt+0x1eac>
   12f04:	ldrb	r1, [r0, #3]
   12f08:	lsl	r1, r1, #25
   12f0c:	add	r1, lr, r1, lsr #27
   12f10:	ldrb	r1, [r1, #256]	; 0x100
   12f14:	strb	r1, [r2, #5]
   12f18:	cmp	r3, #6
   12f1c:	beq	12dd8 <__assert_fail@plt+0x1ea8>
   12f20:	ldrb	r1, [r0, #3]
   12f24:	lsl	ip, r1, #3
   12f28:	subs	r6, r6, #1
   12f2c:	ldrbne	r1, [r0, #4]
   12f30:	lsrne	r1, r1, #5
   12f34:	moveq	r1, r5
   12f38:	add	r1, r1, ip
   12f3c:	and	r1, r1, #31
   12f40:	add	r1, lr, r1
   12f44:	ldrb	r1, [r1, #256]	; 0x100
   12f48:	b	12df4 <__assert_fail@plt+0x1ec4>
   12f4c:	cmp	r3, #0
   12f50:	movne	r3, #0
   12f54:	strbne	r3, [r2]
   12f58:	pop	{r4, r5, r6, pc}
   12f5c:	pop	{r4, r5, r6, pc}
   12f60:	and	ip, ip, #31
   12f64:	add	ip, lr, ip
   12f68:	ldrb	r1, [ip, #256]	; 0x100
   12f6c:	strb	r1, [r2, #3]
   12f70:	cmp	r3, #4
   12f74:	popeq	{r4, r5, r6, pc}
   12f78:	mov	r1, r4
   12f7c:	mov	r6, #0
   12f80:	b	12ef0 <__assert_fail@plt+0x1fc0>
   12f84:	strb	r4, [r2, #-1]
   12f88:	subs	r3, r3, #8
   12f8c:	popeq	{r4, r5, r6, pc}
   12f90:	mov	r1, r6
   12f94:	b	12e30 <__assert_fail@plt+0x1f00>
   12f98:	andeq	r7, r1, ip, asr #31
   12f9c:	push	{r4, r5, r6, r7, r8, lr}
   12fa0:	mov	r7, r0
   12fa4:	mov	r5, r1
   12fa8:	mov	r6, r2
   12fac:	ldr	r3, [pc, #172]	; 13060 <__assert_fail@plt+0x2130>
   12fb0:	smull	r3, r2, r3, r1
   12fb4:	asr	r3, r1, #31
   12fb8:	rsb	r3, r3, r2, asr #1
   12fbc:	add	r4, r3, r3, lsl #2
   12fc0:	cmp	r1, r4
   12fc4:	moveq	r4, r3
   12fc8:	addne	r4, r3, #1
   12fcc:	cmp	r4, #0
   12fd0:	blt	13028 <__assert_fail@plt+0x20f8>
   12fd4:	cmn	r4, #-268435455	; 0xf0000001
   12fd8:	movle	r0, #0
   12fdc:	movgt	r0, #1
   12fe0:	cmp	r0, #0
   12fe4:	bne	13050 <__assert_fail@plt+0x2120>
   12fe8:	cmp	r5, #0
   12fec:	blt	13050 <__assert_fail@plt+0x2120>
   12ff0:	lsl	r4, r4, #3
   12ff4:	add	r8, r4, #1
   12ff8:	mov	r0, r8
   12ffc:	bl	16a80 <__assert_fail@plt+0x5b50>
   13000:	str	r0, [r6]
   13004:	cmp	r0, #0
   13008:	moveq	r4, r8
   1300c:	beq	13058 <__assert_fail@plt+0x2128>
   13010:	mov	r3, r8
   13014:	mov	r2, r0
   13018:	mov	r1, r5
   1301c:	mov	r0, r7
   13020:	bl	12d80 <__assert_fail@plt+0x1e50>
   13024:	b	13058 <__assert_fail@plt+0x2128>
   13028:	cmn	r4, #1
   1302c:	moveq	r0, #0
   13030:	beq	12fe0 <__assert_fail@plt+0x20b0>
   13034:	mov	r1, r4
   13038:	mov	r0, #-2147483648	; 0x80000000
   1303c:	bl	16f64 <__assert_fail@plt+0x6034>
   13040:	cmp	r0, #7
   13044:	movgt	r0, #0
   13048:	movle	r0, #1
   1304c:	b	12fe0 <__assert_fail@plt+0x20b0>
   13050:	mov	r4, #0
   13054:	str	r4, [r6]
   13058:	mov	r0, r4
   1305c:	pop	{r4, r5, r6, r7, r8, pc}
   13060:	strbtvs	r6, [r6], -r7, ror #12
   13064:	ldr	r3, [pc, #12]	; 13078 <__assert_fail@plt+0x2148>
   13068:	ldrb	r0, [r3, r0]
   1306c:	eor	r0, r0, #128	; 0x80
   13070:	lsr	r0, r0, #7
   13074:	bx	lr
   13078:	andeq	r7, r1, ip, asr #31
   1307c:	mov	r3, #0
   13080:	str	r3, [r0]
   13084:	bx	lr
   13088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1308c:	sub	sp, sp, #20
   13090:	mov	r4, r1
   13094:	mov	r5, r2
   13098:	str	r3, [sp, #4]
   1309c:	ldr	r3, [sp, #56]	; 0x38
   130a0:	ldr	r3, [r3]
   130a4:	str	r3, [sp, #12]
   130a8:	subs	r6, r0, #0
   130ac:	movne	fp, #1
   130b0:	moveq	fp, #0
   130b4:	ldrne	r9, [r6]
   130b8:	clzne	r8, r2
   130bc:	lsrne	r8, r8, #5
   130c0:	moveq	r9, #0
   130c4:	moveq	r8, r9
   130c8:	eor	r8, r8, #1
   130cc:	and	sl, fp, r8
   130d0:	add	r3, r6, #4
   130d4:	str	r3, [sp]
   130d8:	b	13218 <__assert_fail@plt+0x22e8>
   130dc:	ldr	r7, [sp, #12]
   130e0:	cmp	r5, #0
   130e4:	movne	r3, #0
   130e8:	andeq	r3, r8, #1
   130ec:	cmp	r3, #0
   130f0:	bne	13264 <__assert_fail@plt+0x2334>
   130f4:	cmp	r5, #0
   130f8:	beq	1311c <__assert_fail@plt+0x21ec>
   130fc:	ldrb	r3, [r4]
   13100:	cmp	r3, #10
   13104:	movne	r3, #0
   13108:	andeq	r3, fp, #1
   1310c:	cmp	r3, #0
   13110:	subne	r5, r5, #1
   13114:	addne	r4, r4, #1
   13118:	bne	13218 <__assert_fail@plt+0x22e8>
   1311c:	ldr	r3, [sp, #12]
   13120:	sub	r2, r7, r3
   13124:	ldr	r3, [sp, #4]
   13128:	sub	r3, r3, r2
   1312c:	str	r3, [sp, #4]
   13130:	str	r7, [sp, #12]
   13134:	add	r7, r4, r5
   13138:	cmp	r6, #0
   1313c:	beq	13258 <__assert_fail@plt+0x2328>
   13140:	ldr	r3, [r6]
   13144:	cmp	r3, #8
   13148:	moveq	r3, #0
   1314c:	streq	r3, [r6]
   13150:	ldr	r3, [r6]
   13154:	clz	r3, r3
   13158:	lsr	r3, r3, #5
   1315c:	cmp	r5, #7
   13160:	movle	r3, #0
   13164:	cmp	r3, #0
   13168:	beq	13184 <__assert_fail@plt+0x2254>
   1316c:	mov	r2, #8
   13170:	mov	r1, #10
   13174:	mov	r0, r4
   13178:	bl	10e94 <memchr@plt>
   1317c:	cmp	r0, #0
   13180:	beq	13198 <__assert_fail@plt+0x2268>
   13184:	cmp	r7, r4
   13188:	movls	r0, r4
   1318c:	bls	131d8 <__assert_fail@plt+0x22a8>
   13190:	mov	r0, r4
   13194:	b	131b0 <__assert_fail@plt+0x2280>
   13198:	mov	r0, r4
   1319c:	add	r4, r4, #8
   131a0:	mov	r5, #8
   131a4:	b	131fc <__assert_fail@plt+0x22cc>
   131a8:	cmp	r7, r0
   131ac:	beq	131d8 <__assert_fail@plt+0x22a8>
   131b0:	ldrb	r2, [r0], #1
   131b4:	cmp	r2, #10
   131b8:	beq	131a8 <__assert_fail@plt+0x2278>
   131bc:	ldr	ip, [r6]
   131c0:	add	r1, ip, #1
   131c4:	mov	r3, r6
   131c8:	str	r1, [r3], ip
   131cc:	strb	r2, [r3, #4]
   131d0:	cmp	r1, #8
   131d4:	bne	131a8 <__assert_fail@plt+0x2278>
   131d8:	ldr	r5, [r6]
   131dc:	mov	r4, r0
   131e0:	ldr	r0, [sp]
   131e4:	cmp	r5, #0
   131e8:	beq	13260 <__assert_fail@plt+0x2330>
   131ec:	cmp	r5, #7
   131f0:	bgt	131fc <__assert_fail@plt+0x22cc>
   131f4:	cmp	sl, #0
   131f8:	bne	1328c <__assert_fail@plt+0x235c>
   131fc:	add	r3, sp, #12
   13200:	add	r2, sp, #4
   13204:	mov	r1, r5
   13208:	bl	12ae4 <__assert_fail@plt+0x1bb4>
   1320c:	cmp	r0, #0
   13210:	beq	13264 <__assert_fail@plt+0x2334>
   13214:	sub	r5, r7, r4
   13218:	cmp	r9, #0
   1321c:	movne	r3, #0
   13220:	andeq	r3, r8, #1
   13224:	cmp	r3, #0
   13228:	beq	130dc <__assert_fail@plt+0x21ac>
   1322c:	ldr	r7, [sp, #12]
   13230:	add	r3, sp, #12
   13234:	add	r2, sp, #4
   13238:	mov	r1, r5
   1323c:	mov	r0, r4
   13240:	bl	12ae4 <__assert_fail@plt+0x1bb4>
   13244:	cmp	r0, #0
   13248:	beq	130e0 <__assert_fail@plt+0x21b0>
   1324c:	sub	r5, r5, #8
   13250:	add	r4, r4, #8
   13254:	b	1322c <__assert_fail@plt+0x22fc>
   13258:	mov	r0, r4
   1325c:	b	131e4 <__assert_fail@plt+0x22b4>
   13260:	mov	r5, #0
   13264:	ldr	r3, [sp, #56]	; 0x38
   13268:	ldr	r3, [r3]
   1326c:	ldr	r2, [sp, #12]
   13270:	sub	r3, r3, r2
   13274:	ldr	r2, [sp, #56]	; 0x38
   13278:	str	r3, [r2]
   1327c:	clz	r0, r5
   13280:	lsr	r0, r0, #5
   13284:	add	sp, sp, #20
   13288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1328c:	mov	r5, #0
   13290:	b	13264 <__assert_fail@plt+0x2334>
   13294:	push	{r4, r5, r6, r7, r8, lr}
   13298:	sub	sp, sp, #16
   1329c:	mov	r7, r0
   132a0:	mov	r8, r1
   132a4:	mov	r4, r2
   132a8:	mov	r5, r3
   132ac:	ldr	r6, [sp, #40]	; 0x28
   132b0:	asr	r0, r2, #3
   132b4:	add	r0, r0, #1
   132b8:	add	r0, r0, r0, lsl #2
   132bc:	str	r0, [sp, #12]
   132c0:	bl	16a80 <__assert_fail@plt+0x5b50>
   132c4:	str	r0, [r5]
   132c8:	cmp	r0, #0
   132cc:	moveq	r4, #1
   132d0:	beq	13304 <__assert_fail@plt+0x23d4>
   132d4:	add	r3, sp, #12
   132d8:	str	r3, [sp]
   132dc:	mov	r3, r0
   132e0:	mov	r2, r4
   132e4:	mov	r1, r8
   132e8:	mov	r0, r7
   132ec:	bl	13088 <__assert_fail@plt+0x2158>
   132f0:	subs	r4, r0, #0
   132f4:	beq	13310 <__assert_fail@plt+0x23e0>
   132f8:	cmp	r6, #0
   132fc:	ldrne	r3, [sp, #12]
   13300:	strne	r3, [r6]
   13304:	mov	r0, r4
   13308:	add	sp, sp, #16
   1330c:	pop	{r4, r5, r6, r7, r8, pc}
   13310:	ldr	r0, [r5]
   13314:	bl	13c5c <__assert_fail@plt+0x2d2c>
   13318:	mov	r3, #0
   1331c:	str	r3, [r5]
   13320:	b	13304 <__assert_fail@plt+0x23d4>
   13324:	cmp	r1, #1
   13328:	ble	13494 <__assert_fail@plt+0x2564>
   1332c:	push	{r4, r5, lr}
   13330:	ldrb	ip, [r0]
   13334:	ldr	lr, [pc, #368]	; 134ac <__assert_fail@plt+0x257c>
   13338:	ldrsb	ip, [lr, ip]
   1333c:	cmp	ip, #0
   13340:	blt	1349c <__assert_fail@plt+0x256c>
   13344:	ldrb	lr, [r0, #1]
   13348:	ldr	r4, [pc, #348]	; 134ac <__assert_fail@plt+0x257c>
   1334c:	ldrsb	r4, [r4, lr]
   13350:	cmp	r4, #0
   13354:	blt	134a4 <__assert_fail@plt+0x2574>
   13358:	ldr	lr, [r2]
   1335c:	ldr	r5, [r3]
   13360:	cmp	r5, #0
   13364:	beq	13384 <__assert_fail@plt+0x2454>
   13368:	asr	r5, r4, #4
   1336c:	orr	ip, r5, ip, lsl #2
   13370:	strb	ip, [lr]
   13374:	ldr	ip, [r3]
   13378:	sub	ip, ip, #1
   1337c:	str	ip, [r3]
   13380:	add	lr, lr, #1
   13384:	cmp	r1, #2
   13388:	beq	13424 <__assert_fail@plt+0x24f4>
   1338c:	ldrb	ip, [r0, #2]
   13390:	cmp	ip, #61	; 0x3d
   13394:	beq	13430 <__assert_fail@plt+0x2500>
   13398:	ldr	r5, [pc, #268]	; 134ac <__assert_fail@plt+0x257c>
   1339c:	ldrsb	ip, [r5, ip]
   133a0:	cmp	ip, #0
   133a4:	blt	1345c <__assert_fail@plt+0x252c>
   133a8:	ldr	r5, [r3]
   133ac:	cmp	r5, #0
   133b0:	beq	133d0 <__assert_fail@plt+0x24a0>
   133b4:	asr	r5, ip, #2
   133b8:	orr	r4, r5, r4, lsl #4
   133bc:	strb	r4, [lr]
   133c0:	ldr	r4, [r3]
   133c4:	sub	r4, r4, #1
   133c8:	str	r4, [r3]
   133cc:	add	lr, lr, #1
   133d0:	cmp	r1, #3
   133d4:	beq	13468 <__assert_fail@plt+0x2538>
   133d8:	ldrb	r0, [r0, #3]
   133dc:	cmp	r0, #61	; 0x3d
   133e0:	beq	13474 <__assert_fail@plt+0x2544>
   133e4:	ldr	r1, [pc, #192]	; 134ac <__assert_fail@plt+0x257c>
   133e8:	ldrsb	r1, [r1, r0]
   133ec:	cmp	r1, #0
   133f0:	blt	13488 <__assert_fail@plt+0x2558>
   133f4:	ldr	r0, [r3]
   133f8:	cmp	r0, #0
   133fc:	beq	13418 <__assert_fail@plt+0x24e8>
   13400:	orr	ip, r1, ip, lsl #6
   13404:	strb	ip, [lr]
   13408:	ldr	r1, [r3]
   1340c:	sub	r1, r1, #1
   13410:	str	r1, [r3]
   13414:	add	lr, lr, #1
   13418:	str	lr, [r2]
   1341c:	mov	r0, #1
   13420:	pop	{r4, r5, pc}
   13424:	str	lr, [r2]
   13428:	mov	r0, #0
   1342c:	pop	{r4, r5, pc}
   13430:	cmp	r1, #4
   13434:	beq	13444 <__assert_fail@plt+0x2514>
   13438:	str	lr, [r2]
   1343c:	mov	r0, #0
   13440:	pop	{r4, r5, pc}
   13444:	ldrb	r3, [r0, #3]
   13448:	cmp	r3, #61	; 0x3d
   1344c:	beq	13418 <__assert_fail@plt+0x24e8>
   13450:	str	lr, [r2]
   13454:	mov	r0, #0
   13458:	pop	{r4, r5, pc}
   1345c:	str	lr, [r2]
   13460:	mov	r0, #0
   13464:	pop	{r4, r5, pc}
   13468:	str	lr, [r2]
   1346c:	mov	r0, #0
   13470:	pop	{r4, r5, pc}
   13474:	cmp	r1, #4
   13478:	beq	13418 <__assert_fail@plt+0x24e8>
   1347c:	str	lr, [r2]
   13480:	mov	r0, #0
   13484:	pop	{r4, r5, pc}
   13488:	str	lr, [r2]
   1348c:	mov	r0, #0
   13490:	pop	{r4, r5, pc}
   13494:	mov	r0, #0
   13498:	bx	lr
   1349c:	mov	r0, #0
   134a0:	pop	{r4, r5, pc}
   134a4:	mov	r0, #0
   134a8:	pop	{r4, r5, pc}
   134ac:	andeq	r8, r1, ip, ror #1
   134b0:	push	{r4, r5, r6, lr}
   134b4:	tst	r3, #3
   134b8:	bne	134cc <__assert_fail@plt+0x259c>
   134bc:	asr	ip, r3, #2
   134c0:	add	ip, ip, ip, lsl #1
   134c4:	cmp	r1, ip
   134c8:	beq	134dc <__assert_fail@plt+0x25ac>
   134cc:	ldr	lr, [pc, #392]	; 1365c <__assert_fail@plt+0x272c>
   134d0:	mov	r4, #61	; 0x3d
   134d4:	mov	r5, #0
   134d8:	b	1356c <__assert_fail@plt+0x263c>
   134dc:	cmp	ip, #0
   134e0:	popeq	{r4, r5, r6, pc}
   134e4:	add	r2, r2, #4
   134e8:	add	ip, r0, #3
   134ec:	add	r1, r1, #3
   134f0:	add	lr, r0, r1
   134f4:	ldr	r0, [pc, #352]	; 1365c <__assert_fail@plt+0x272c>
   134f8:	ldrb	r3, [ip, #-3]
   134fc:	add	r1, r0, r3, lsr #2
   13500:	ldrb	r1, [r1, #256]	; 0x100
   13504:	strb	r1, [r2, #-4]
   13508:	ldrb	r4, [ip, #-2]
   1350c:	lsr	r1, r4, #4
   13510:	add	r1, r1, r3, lsl #4
   13514:	and	r1, r1, #63	; 0x3f
   13518:	add	r1, r0, r1
   1351c:	ldrb	r3, [r1, #256]	; 0x100
   13520:	strb	r3, [r2, #-3]
   13524:	ldrb	r1, [ip, #-1]
   13528:	lsr	r3, r1, #6
   1352c:	add	r3, r3, r4, lsl #2
   13530:	and	r3, r3, #63	; 0x3f
   13534:	add	r3, r0, r3
   13538:	ldrb	r3, [r3, #256]	; 0x100
   1353c:	strb	r3, [r2, #-2]
   13540:	and	r1, r1, #63	; 0x3f
   13544:	add	r1, r0, r1
   13548:	ldrb	r3, [r1, #256]	; 0x100
   1354c:	strb	r3, [r2, #-1]
   13550:	add	r2, r2, #4
   13554:	add	ip, ip, #3
   13558:	cmp	lr, ip
   1355c:	bne	134f8 <__assert_fail@plt+0x25c8>
   13560:	pop	{r4, r5, r6, pc}
   13564:	subs	r1, r1, #1
   13568:	addne	r0, r0, #3
   1356c:	cmp	r1, #0
   13570:	cmpne	r3, #0
   13574:	beq	13618 <__assert_fail@plt+0x26e8>
   13578:	ldrb	ip, [r0]
   1357c:	add	r6, lr, ip, lsr #2
   13580:	ldrb	r6, [r6, #256]	; 0x100
   13584:	strb	r6, [r2]
   13588:	cmp	r3, #1
   1358c:	popeq	{r4, r5, r6, pc}
   13590:	lsl	ip, ip, #4
   13594:	cmp	r1, #1
   13598:	beq	13628 <__assert_fail@plt+0x26f8>
   1359c:	ldrb	r6, [r0, #1]
   135a0:	add	ip, ip, r6, lsr #4
   135a4:	and	ip, ip, #63	; 0x3f
   135a8:	add	ip, lr, ip
   135ac:	ldrb	ip, [ip, #256]	; 0x100
   135b0:	strb	ip, [r2, #1]
   135b4:	cmp	r3, #2
   135b8:	popeq	{r4, r5, r6, pc}
   135bc:	lsl	r6, r6, #2
   135c0:	subs	r1, r1, #2
   135c4:	ldrbne	ip, [r0, #2]
   135c8:	lsrne	ip, ip, #6
   135cc:	moveq	ip, r5
   135d0:	add	ip, ip, r6
   135d4:	and	ip, ip, #63	; 0x3f
   135d8:	add	ip, lr, ip
   135dc:	ldrb	ip, [ip, #256]	; 0x100
   135e0:	strb	ip, [r2, #2]
   135e4:	cmp	r3, #3
   135e8:	popeq	{r4, r5, r6, pc}
   135ec:	add	r2, r2, #4
   135f0:	cmp	r1, #0
   135f4:	beq	1364c <__assert_fail@plt+0x271c>
   135f8:	ldrb	ip, [r0, #2]
   135fc:	and	ip, ip, #63	; 0x3f
   13600:	add	ip, lr, ip
   13604:	ldrb	ip, [ip, #256]	; 0x100
   13608:	strb	ip, [r2, #-1]
   1360c:	subs	r3, r3, #4
   13610:	bne	13564 <__assert_fail@plt+0x2634>
   13614:	pop	{r4, r5, r6, pc}
   13618:	cmp	r3, #0
   1361c:	movne	r3, #0
   13620:	strbne	r3, [r2]
   13624:	pop	{r4, r5, r6, pc}
   13628:	and	ip, ip, #63	; 0x3f
   1362c:	add	ip, lr, ip
   13630:	ldrb	r1, [ip, #256]	; 0x100
   13634:	strb	r1, [r2, #1]
   13638:	cmp	r3, #2
   1363c:	popeq	{r4, r5, r6, pc}
   13640:	mov	ip, r4
   13644:	mov	r1, #0
   13648:	b	135e0 <__assert_fail@plt+0x26b0>
   1364c:	strb	r4, [r2, #-1]
   13650:	subs	r3, r3, #4
   13654:	bne	1356c <__assert_fail@plt+0x263c>
   13658:	pop	{r4, r5, r6, pc}
   1365c:	andeq	r8, r1, ip, ror #1
   13660:	push	{r4, r5, r6, r7, r8, lr}
   13664:	mov	r7, r0
   13668:	mov	r5, r1
   1366c:	mov	r6, r2
   13670:	ldr	r3, [pc, #168]	; 13720 <__assert_fail@plt+0x27f0>
   13674:	smull	r2, r3, r3, r1
   13678:	sub	r3, r3, r1, asr #31
   1367c:	add	r4, r3, r3, lsl #1
   13680:	cmp	r1, r4
   13684:	moveq	r4, r3
   13688:	addne	r4, r3, #1
   1368c:	cmp	r4, #0
   13690:	blt	136e8 <__assert_fail@plt+0x27b8>
   13694:	cmn	r4, #-536870911	; 0xe0000001
   13698:	movle	r0, #0
   1369c:	movgt	r0, #1
   136a0:	cmp	r0, #0
   136a4:	bne	13710 <__assert_fail@plt+0x27e0>
   136a8:	cmp	r5, #0
   136ac:	blt	13710 <__assert_fail@plt+0x27e0>
   136b0:	lsl	r4, r4, #2
   136b4:	add	r8, r4, #1
   136b8:	mov	r0, r8
   136bc:	bl	16a80 <__assert_fail@plt+0x5b50>
   136c0:	str	r0, [r6]
   136c4:	cmp	r0, #0
   136c8:	moveq	r4, r8
   136cc:	beq	13718 <__assert_fail@plt+0x27e8>
   136d0:	mov	r3, r8
   136d4:	mov	r2, r0
   136d8:	mov	r1, r5
   136dc:	mov	r0, r7
   136e0:	bl	134b0 <__assert_fail@plt+0x2580>
   136e4:	b	13718 <__assert_fail@plt+0x27e8>
   136e8:	cmn	r4, #1
   136ec:	moveq	r0, #0
   136f0:	beq	136a0 <__assert_fail@plt+0x2770>
   136f4:	mov	r1, r4
   136f8:	mov	r0, #-2147483648	; 0x80000000
   136fc:	bl	16f64 <__assert_fail@plt+0x6034>
   13700:	cmp	r0, #3
   13704:	movgt	r0, #0
   13708:	movle	r0, #1
   1370c:	b	136a0 <__assert_fail@plt+0x2770>
   13710:	mov	r4, #0
   13714:	str	r4, [r6]
   13718:	mov	r0, r4
   1371c:	pop	{r4, r5, r6, r7, r8, pc}
   13720:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   13724:	ldr	r3, [pc, #12]	; 13738 <__assert_fail@plt+0x2808>
   13728:	ldrb	r0, [r3, r0]
   1372c:	eor	r0, r0, #128	; 0x80
   13730:	lsr	r0, r0, #7
   13734:	bx	lr
   13738:	andeq	r8, r1, ip, ror #1
   1373c:	mov	r3, #0
   13740:	str	r3, [r0]
   13744:	bx	lr
   13748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1374c:	sub	sp, sp, #20
   13750:	mov	r4, r1
   13754:	mov	r5, r2
   13758:	str	r3, [sp, #4]
   1375c:	ldr	r3, [sp, #56]	; 0x38
   13760:	ldr	r3, [r3]
   13764:	str	r3, [sp, #12]
   13768:	subs	r6, r0, #0
   1376c:	movne	fp, #1
   13770:	moveq	fp, #0
   13774:	ldrne	r9, [r6]
   13778:	clzne	r8, r2
   1377c:	lsrne	r8, r8, #5
   13780:	moveq	r9, #0
   13784:	moveq	r8, r9
   13788:	eor	r8, r8, #1
   1378c:	and	sl, fp, r8
   13790:	add	r3, r6, #4
   13794:	str	r3, [sp]
   13798:	b	138d8 <__assert_fail@plt+0x29a8>
   1379c:	ldr	r7, [sp, #12]
   137a0:	cmp	r5, #0
   137a4:	movne	r3, #0
   137a8:	andeq	r3, r8, #1
   137ac:	cmp	r3, #0
   137b0:	bne	13924 <__assert_fail@plt+0x29f4>
   137b4:	cmp	r5, #0
   137b8:	beq	137dc <__assert_fail@plt+0x28ac>
   137bc:	ldrb	r3, [r4]
   137c0:	cmp	r3, #10
   137c4:	movne	r3, #0
   137c8:	andeq	r3, fp, #1
   137cc:	cmp	r3, #0
   137d0:	subne	r5, r5, #1
   137d4:	addne	r4, r4, #1
   137d8:	bne	138d8 <__assert_fail@plt+0x29a8>
   137dc:	ldr	r3, [sp, #12]
   137e0:	sub	r2, r7, r3
   137e4:	ldr	r3, [sp, #4]
   137e8:	sub	r3, r3, r2
   137ec:	str	r3, [sp, #4]
   137f0:	str	r7, [sp, #12]
   137f4:	add	r7, r4, r5
   137f8:	cmp	r6, #0
   137fc:	beq	13918 <__assert_fail@plt+0x29e8>
   13800:	ldr	r3, [r6]
   13804:	cmp	r3, #4
   13808:	moveq	r3, #0
   1380c:	streq	r3, [r6]
   13810:	ldr	r3, [r6]
   13814:	clz	r3, r3
   13818:	lsr	r3, r3, #5
   1381c:	cmp	r5, #3
   13820:	movle	r3, #0
   13824:	cmp	r3, #0
   13828:	beq	13844 <__assert_fail@plt+0x2914>
   1382c:	mov	r2, #4
   13830:	mov	r1, #10
   13834:	mov	r0, r4
   13838:	bl	10e94 <memchr@plt>
   1383c:	cmp	r0, #0
   13840:	beq	13858 <__assert_fail@plt+0x2928>
   13844:	cmp	r7, r4
   13848:	movls	r0, r4
   1384c:	bls	13898 <__assert_fail@plt+0x2968>
   13850:	mov	r0, r4
   13854:	b	13870 <__assert_fail@plt+0x2940>
   13858:	mov	r0, r4
   1385c:	add	r4, r4, #4
   13860:	mov	r5, #4
   13864:	b	138bc <__assert_fail@plt+0x298c>
   13868:	cmp	r7, r0
   1386c:	beq	13898 <__assert_fail@plt+0x2968>
   13870:	ldrb	r2, [r0], #1
   13874:	cmp	r2, #10
   13878:	beq	13868 <__assert_fail@plt+0x2938>
   1387c:	ldr	ip, [r6]
   13880:	add	r1, ip, #1
   13884:	mov	r3, r6
   13888:	str	r1, [r3], ip
   1388c:	strb	r2, [r3, #4]
   13890:	cmp	r1, #4
   13894:	bne	13868 <__assert_fail@plt+0x2938>
   13898:	ldr	r5, [r6]
   1389c:	mov	r4, r0
   138a0:	ldr	r0, [sp]
   138a4:	cmp	r5, #0
   138a8:	beq	13920 <__assert_fail@plt+0x29f0>
   138ac:	cmp	r5, #3
   138b0:	bgt	138bc <__assert_fail@plt+0x298c>
   138b4:	cmp	sl, #0
   138b8:	bne	1394c <__assert_fail@plt+0x2a1c>
   138bc:	add	r3, sp, #12
   138c0:	add	r2, sp, #4
   138c4:	mov	r1, r5
   138c8:	bl	13324 <__assert_fail@plt+0x23f4>
   138cc:	cmp	r0, #0
   138d0:	beq	13924 <__assert_fail@plt+0x29f4>
   138d4:	sub	r5, r7, r4
   138d8:	cmp	r9, #0
   138dc:	movne	r3, #0
   138e0:	andeq	r3, r8, #1
   138e4:	cmp	r3, #0
   138e8:	beq	1379c <__assert_fail@plt+0x286c>
   138ec:	ldr	r7, [sp, #12]
   138f0:	add	r3, sp, #12
   138f4:	add	r2, sp, #4
   138f8:	mov	r1, r5
   138fc:	mov	r0, r4
   13900:	bl	13324 <__assert_fail@plt+0x23f4>
   13904:	cmp	r0, #0
   13908:	beq	137a0 <__assert_fail@plt+0x2870>
   1390c:	sub	r5, r5, #4
   13910:	add	r4, r4, #4
   13914:	b	138ec <__assert_fail@plt+0x29bc>
   13918:	mov	r0, r4
   1391c:	b	138a4 <__assert_fail@plt+0x2974>
   13920:	mov	r5, #0
   13924:	ldr	r3, [sp, #56]	; 0x38
   13928:	ldr	r3, [r3]
   1392c:	ldr	r2, [sp, #12]
   13930:	sub	r3, r3, r2
   13934:	ldr	r2, [sp, #56]	; 0x38
   13938:	str	r3, [r2]
   1393c:	clz	r0, r5
   13940:	lsr	r0, r0, #5
   13944:	add	sp, sp, #20
   13948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394c:	mov	r5, #0
   13950:	b	13924 <__assert_fail@plt+0x29f4>
   13954:	push	{r4, r5, r6, r7, r8, lr}
   13958:	sub	sp, sp, #16
   1395c:	mov	r7, r0
   13960:	mov	r8, r1
   13964:	mov	r4, r2
   13968:	mov	r5, r3
   1396c:	ldr	r6, [sp, #40]	; 0x28
   13970:	asr	r0, r2, #2
   13974:	add	r0, r0, #1
   13978:	add	r0, r0, r0, lsl #1
   1397c:	str	r0, [sp, #12]
   13980:	bl	16a80 <__assert_fail@plt+0x5b50>
   13984:	str	r0, [r5]
   13988:	cmp	r0, #0
   1398c:	moveq	r4, #1
   13990:	beq	139c4 <__assert_fail@plt+0x2a94>
   13994:	add	r3, sp, #12
   13998:	str	r3, [sp]
   1399c:	mov	r3, r0
   139a0:	mov	r2, r4
   139a4:	mov	r1, r8
   139a8:	mov	r0, r7
   139ac:	bl	13748 <__assert_fail@plt+0x2818>
   139b0:	subs	r4, r0, #0
   139b4:	beq	139d0 <__assert_fail@plt+0x2aa0>
   139b8:	cmp	r6, #0
   139bc:	ldrne	r3, [sp, #12]
   139c0:	strne	r3, [r6]
   139c4:	mov	r0, r4
   139c8:	add	sp, sp, #16
   139cc:	pop	{r4, r5, r6, r7, r8, pc}
   139d0:	ldr	r0, [r5]
   139d4:	bl	13c5c <__assert_fail@plt+0x2d2c>
   139d8:	mov	r3, #0
   139dc:	str	r3, [r5]
   139e0:	b	139c4 <__assert_fail@plt+0x2a94>
   139e4:	ldr	r3, [pc, #4]	; 139f0 <__assert_fail@plt+0x2ac0>
   139e8:	str	r0, [r3]
   139ec:	bx	lr
   139f0:	andeq	r9, r2, r4, ror r1
   139f4:	ldr	r3, [pc, #4]	; 13a00 <__assert_fail@plt+0x2ad0>
   139f8:	strb	r0, [r3, #4]
   139fc:	bx	lr
   13a00:	andeq	r9, r2, r4, ror r1
   13a04:	push	{r4, r5, r6, lr}
   13a08:	sub	sp, sp, #8
   13a0c:	ldr	r3, [pc, #200]	; 13adc <__assert_fail@plt+0x2bac>
   13a10:	ldr	r0, [r3]
   13a14:	bl	16b00 <__assert_fail@plt+0x5bd0>
   13a18:	cmp	r0, #0
   13a1c:	beq	13a40 <__assert_fail@plt+0x2b10>
   13a20:	ldr	r3, [pc, #184]	; 13ae0 <__assert_fail@plt+0x2bb0>
   13a24:	ldrb	r3, [r3, #4]
   13a28:	cmp	r3, #0
   13a2c:	beq	13a5c <__assert_fail@plt+0x2b2c>
   13a30:	bl	10e4c <__errno_location@plt>
   13a34:	ldr	r3, [r0]
   13a38:	cmp	r3, #32
   13a3c:	bne	13a5c <__assert_fail@plt+0x2b2c>
   13a40:	ldr	r3, [pc, #156]	; 13ae4 <__assert_fail@plt+0x2bb4>
   13a44:	ldr	r0, [r3]
   13a48:	bl	16b00 <__assert_fail@plt+0x5bd0>
   13a4c:	cmp	r0, #0
   13a50:	bne	13ad0 <__assert_fail@plt+0x2ba0>
   13a54:	add	sp, sp, #8
   13a58:	pop	{r4, r5, r6, pc}
   13a5c:	mov	r2, #5
   13a60:	ldr	r1, [pc, #128]	; 13ae8 <__assert_fail@plt+0x2bb8>
   13a64:	mov	r0, #0
   13a68:	bl	10d68 <dcgettext@plt>
   13a6c:	mov	r4, r0
   13a70:	ldr	r3, [pc, #104]	; 13ae0 <__assert_fail@plt+0x2bb0>
   13a74:	ldr	r5, [r3]
   13a78:	cmp	r5, #0
   13a7c:	beq	13ab4 <__assert_fail@plt+0x2b84>
   13a80:	bl	10e4c <__errno_location@plt>
   13a84:	ldr	r6, [r0]
   13a88:	mov	r0, r5
   13a8c:	bl	15724 <__assert_fail@plt+0x47f4>
   13a90:	str	r4, [sp]
   13a94:	mov	r3, r0
   13a98:	ldr	r2, [pc, #76]	; 13aec <__assert_fail@plt+0x2bbc>
   13a9c:	mov	r1, r6
   13aa0:	mov	r0, #0
   13aa4:	bl	10dd4 <error@plt>
   13aa8:	ldr	r3, [pc, #64]	; 13af0 <__assert_fail@plt+0x2bc0>
   13aac:	ldr	r0, [r3]
   13ab0:	bl	10d20 <_exit@plt>
   13ab4:	bl	10e4c <__errno_location@plt>
   13ab8:	mov	r3, r4
   13abc:	ldr	r2, [pc, #48]	; 13af4 <__assert_fail@plt+0x2bc4>
   13ac0:	ldr	r1, [r0]
   13ac4:	mov	r0, #0
   13ac8:	bl	10dd4 <error@plt>
   13acc:	b	13aa8 <__assert_fail@plt+0x2b78>
   13ad0:	ldr	r3, [pc, #24]	; 13af0 <__assert_fail@plt+0x2bc0>
   13ad4:	ldr	r0, [r3]
   13ad8:	bl	10d20 <_exit@plt>
   13adc:	andeq	r9, r2, r4, asr r1
   13ae0:	andeq	r9, r2, r4, ror r1
   13ae4:	andeq	r9, r2, r8, asr #2
   13ae8:			; <UNDEFINED> instruction: 0x00017eb8
   13aec:	andeq	r7, r1, ip, asr #28
   13af0:	strdeq	r9, [r2], -r0
   13af4:	andeq	r7, r1, r0, asr lr
   13af8:	push	{r4, r5, lr}
   13afc:	sub	sp, sp, #20
   13b00:	ldr	r1, [sp, #40]	; 0x28
   13b04:	str	r1, [sp, #8]
   13b08:	ldrd	r4, [sp, #32]
   13b0c:	strd	r4, [sp]
   13b10:	bl	10cf0 <posix_fadvise64@plt>
   13b14:	add	sp, sp, #20
   13b18:	pop	{r4, r5, pc}
   13b1c:	cmp	r0, #0
   13b20:	bxeq	lr
   13b24:	push	{r4, lr}
   13b28:	sub	sp, sp, #16
   13b2c:	mov	r4, r1
   13b30:	bl	10e7c <fileno@plt>
   13b34:	str	r4, [sp, #8]
   13b38:	mov	r2, #0
   13b3c:	mov	r3, #0
   13b40:	strd	r2, [sp]
   13b44:	bl	10cf0 <posix_fadvise64@plt>
   13b48:	add	sp, sp, #16
   13b4c:	pop	{r4, pc}
   13b50:	push	{r4, r5, r6, lr}
   13b54:	sub	sp, sp, #8
   13b58:	mov	r4, r0
   13b5c:	bl	10e7c <fileno@plt>
   13b60:	cmp	r0, #0
   13b64:	blt	13bdc <__assert_fail@plt+0x2cac>
   13b68:	mov	r0, r4
   13b6c:	bl	10df8 <__freading@plt>
   13b70:	cmp	r0, #0
   13b74:	beq	13ba8 <__assert_fail@plt+0x2c78>
   13b78:	mov	r0, r4
   13b7c:	bl	10e7c <fileno@plt>
   13b80:	mov	r3, #1
   13b84:	str	r3, [sp]
   13b88:	mov	r2, #0
   13b8c:	mov	r3, #0
   13b90:	bl	10da4 <lseek64@plt>
   13b94:	mvn	r2, #0
   13b98:	mvn	r3, #0
   13b9c:	cmp	r1, r3
   13ba0:	cmpeq	r0, r2
   13ba4:	beq	13be8 <__assert_fail@plt+0x2cb8>
   13ba8:	mov	r0, r4
   13bac:	bl	13bf8 <__assert_fail@plt+0x2cc8>
   13bb0:	cmp	r0, #0
   13bb4:	beq	13be8 <__assert_fail@plt+0x2cb8>
   13bb8:	bl	10e4c <__errno_location@plt>
   13bbc:	mov	r5, r0
   13bc0:	ldr	r6, [r0]
   13bc4:	mov	r0, r4
   13bc8:	bl	10ea0 <fclose@plt>
   13bcc:	cmp	r6, #0
   13bd0:	strne	r6, [r5]
   13bd4:	mvnne	r0, #0
   13bd8:	b	13bf0 <__assert_fail@plt+0x2cc0>
   13bdc:	mov	r0, r4
   13be0:	bl	10ea0 <fclose@plt>
   13be4:	b	13bf0 <__assert_fail@plt+0x2cc0>
   13be8:	mov	r0, r4
   13bec:	bl	10ea0 <fclose@plt>
   13bf0:	add	sp, sp, #8
   13bf4:	pop	{r4, r5, r6, pc}
   13bf8:	push	{r4, lr}
   13bfc:	sub	sp, sp, #8
   13c00:	subs	r4, r0, #0
   13c04:	beq	13c18 <__assert_fail@plt+0x2ce8>
   13c08:	mov	r0, r4
   13c0c:	bl	10df8 <__freading@plt>
   13c10:	cmp	r0, #0
   13c14:	bne	13c28 <__assert_fail@plt+0x2cf8>
   13c18:	mov	r0, r4
   13c1c:	bl	10cfc <fflush@plt>
   13c20:	add	sp, sp, #8
   13c24:	pop	{r4, pc}
   13c28:	ldr	r3, [r4]
   13c2c:	tst	r3, #256	; 0x100
   13c30:	bne	13c40 <__assert_fail@plt+0x2d10>
   13c34:	mov	r0, r4
   13c38:	bl	10cfc <fflush@plt>
   13c3c:	b	13c20 <__assert_fail@plt+0x2cf0>
   13c40:	mov	r3, #1
   13c44:	str	r3, [sp]
   13c48:	mov	r2, #0
   13c4c:	mov	r3, #0
   13c50:	mov	r0, r4
   13c54:	bl	13cb4 <__assert_fail@plt+0x2d84>
   13c58:	b	13c34 <__assert_fail@plt+0x2d04>
   13c5c:	push	{r4, r5, lr}
   13c60:	sub	sp, sp, #12
   13c64:	mov	r5, r0
   13c68:	bl	10e4c <__errno_location@plt>
   13c6c:	mov	r4, r0
   13c70:	ldr	r3, [r0]
   13c74:	str	r3, [sp]
   13c78:	str	r3, [sp, #4]
   13c7c:	mov	r3, #0
   13c80:	str	r3, [r0]
   13c84:	mov	r0, r5
   13c88:	bl	10d14 <free@plt>
   13c8c:	ldr	r3, [r4]
   13c90:	cmp	r3, #0
   13c94:	moveq	r3, #4
   13c98:	movne	r3, #0
   13c9c:	add	r2, sp, #8
   13ca0:	add	r3, r2, r3
   13ca4:	ldr	r3, [r3, #-8]
   13ca8:	str	r3, [r4]
   13cac:	add	sp, sp, #12
   13cb0:	pop	{r4, r5, pc}
   13cb4:	push	{r4, r5, r6, r7, lr}
   13cb8:	sub	sp, sp, #12
   13cbc:	mov	r4, r0
   13cc0:	mov	r6, r2
   13cc4:	mov	r7, r3
   13cc8:	ldr	r5, [sp, #32]
   13ccc:	ldr	r2, [r0, #8]
   13cd0:	ldr	r3, [r0, #4]
   13cd4:	cmp	r2, r3
   13cd8:	beq	13cf8 <__assert_fail@plt+0x2dc8>
   13cdc:	str	r5, [sp]
   13ce0:	mov	r2, r6
   13ce4:	mov	r3, r7
   13ce8:	mov	r0, r4
   13cec:	bl	10eac <fseeko64@plt>
   13cf0:	add	sp, sp, #12
   13cf4:	pop	{r4, r5, r6, r7, pc}
   13cf8:	ldr	r2, [r0, #20]
   13cfc:	ldr	r3, [r0, #16]
   13d00:	cmp	r2, r3
   13d04:	bne	13cdc <__assert_fail@plt+0x2dac>
   13d08:	ldr	r3, [r0, #36]	; 0x24
   13d0c:	cmp	r3, #0
   13d10:	bne	13cdc <__assert_fail@plt+0x2dac>
   13d14:	bl	10e7c <fileno@plt>
   13d18:	str	r5, [sp]
   13d1c:	mov	r2, r6
   13d20:	mov	r3, r7
   13d24:	bl	10da4 <lseek64@plt>
   13d28:	mvn	r2, #0
   13d2c:	mvn	r3, #0
   13d30:	cmp	r1, r3
   13d34:	cmpeq	r0, r2
   13d38:	beq	13d54 <__assert_fail@plt+0x2e24>
   13d3c:	ldr	r3, [r4]
   13d40:	bic	r3, r3, #16
   13d44:	str	r3, [r4]
   13d48:	strd	r0, [r4, #80]	; 0x50
   13d4c:	mov	r0, #0
   13d50:	b	13cf0 <__assert_fail@plt+0x2dc0>
   13d54:	mvn	r0, #0
   13d58:	b	13cf0 <__assert_fail@plt+0x2dc0>
   13d5c:	push	{r4, r5, r6, lr}
   13d60:	subs	r4, r0, #0
   13d64:	beq	13ddc <__assert_fail@plt+0x2eac>
   13d68:	mov	r1, #47	; 0x2f
   13d6c:	mov	r0, r4
   13d70:	bl	10ed0 <strrchr@plt>
   13d74:	cmp	r0, #0
   13d78:	addne	r5, r0, #1
   13d7c:	moveq	r5, r4
   13d80:	sub	r3, r5, r4
   13d84:	cmp	r3, #6
   13d88:	ble	13dc8 <__assert_fail@plt+0x2e98>
   13d8c:	mov	r2, #7
   13d90:	ldr	r1, [pc, #96]	; 13df8 <__assert_fail@plt+0x2ec8>
   13d94:	sub	r0, r5, #7
   13d98:	bl	10f18 <strncmp@plt>
   13d9c:	cmp	r0, #0
   13da0:	bne	13dc8 <__assert_fail@plt+0x2e98>
   13da4:	mov	r2, #3
   13da8:	ldr	r1, [pc, #76]	; 13dfc <__assert_fail@plt+0x2ecc>
   13dac:	mov	r0, r5
   13db0:	bl	10f18 <strncmp@plt>
   13db4:	cmp	r0, #0
   13db8:	addeq	r4, r5, #3
   13dbc:	ldreq	r3, [pc, #60]	; 13e00 <__assert_fail@plt+0x2ed0>
   13dc0:	streq	r4, [r3]
   13dc4:	movne	r4, r5
   13dc8:	ldr	r3, [pc, #52]	; 13e04 <__assert_fail@plt+0x2ed4>
   13dcc:	str	r4, [r3]
   13dd0:	ldr	r3, [pc, #48]	; 13e08 <__assert_fail@plt+0x2ed8>
   13dd4:	str	r4, [r3]
   13dd8:	pop	{r4, r5, r6, pc}
   13ddc:	ldr	r3, [pc, #40]	; 13e0c <__assert_fail@plt+0x2edc>
   13de0:	ldr	r3, [r3]
   13de4:	mov	r2, #55	; 0x37
   13de8:	mov	r1, #1
   13dec:	ldr	r0, [pc, #28]	; 13e10 <__assert_fail@plt+0x2ee0>
   13df0:	bl	10d98 <fwrite@plt>
   13df4:	bl	10f24 <abort@plt>
   13df8:	andeq	r8, r1, r4, ror #4
   13dfc:	andeq	r8, r1, ip, ror #4
   13e00:	andeq	r9, r2, r8, lsr r1
   13e04:	andeq	r9, r2, ip, ror r1
   13e08:	andeq	r9, r2, ip, lsr r1
   13e0c:	andeq	r9, r2, r8, asr #2
   13e10:	andeq	r8, r1, ip, lsr #4
   13e14:	push	{r4, r5, r6, lr}
   13e18:	mov	r5, r0
   13e1c:	mov	r4, r1
   13e20:	mov	r2, #48	; 0x30
   13e24:	mov	r1, #0
   13e28:	bl	10e64 <memset@plt>
   13e2c:	cmp	r4, #10
   13e30:	beq	13e40 <__assert_fail@plt+0x2f10>
   13e34:	str	r4, [r5]
   13e38:	mov	r0, r5
   13e3c:	pop	{r4, r5, r6, pc}
   13e40:	bl	10f24 <abort@plt>
   13e44:	push	{r4, r5, r6, lr}
   13e48:	mov	r4, r0
   13e4c:	mov	r5, r1
   13e50:	mov	r2, #5
   13e54:	mov	r1, r0
   13e58:	mov	r0, #0
   13e5c:	bl	10d68 <dcgettext@plt>
   13e60:	cmp	r4, r0
   13e64:	popne	{r4, r5, r6, pc}
   13e68:	bl	16b78 <__assert_fail@plt+0x5c48>
   13e6c:	ldrb	r3, [r0]
   13e70:	bic	r3, r3, #32
   13e74:	cmp	r3, #85	; 0x55
   13e78:	beq	13ef4 <__assert_fail@plt+0x2fc4>
   13e7c:	cmp	r3, #71	; 0x47
   13e80:	bne	13f50 <__assert_fail@plt+0x3020>
   13e84:	ldrb	r3, [r0, #1]
   13e88:	bic	r3, r3, #32
   13e8c:	cmp	r3, #66	; 0x42
   13e90:	bne	13f50 <__assert_fail@plt+0x3020>
   13e94:	ldrb	r3, [r0, #2]
   13e98:	cmp	r3, #49	; 0x31
   13e9c:	bne	13f50 <__assert_fail@plt+0x3020>
   13ea0:	ldrb	r3, [r0, #3]
   13ea4:	cmp	r3, #56	; 0x38
   13ea8:	bne	13f50 <__assert_fail@plt+0x3020>
   13eac:	ldrb	r3, [r0, #4]
   13eb0:	cmp	r3, #48	; 0x30
   13eb4:	bne	13f50 <__assert_fail@plt+0x3020>
   13eb8:	ldrb	r3, [r0, #5]
   13ebc:	cmp	r3, #51	; 0x33
   13ec0:	bne	13f50 <__assert_fail@plt+0x3020>
   13ec4:	ldrb	r3, [r0, #6]
   13ec8:	cmp	r3, #48	; 0x30
   13ecc:	bne	13f50 <__assert_fail@plt+0x3020>
   13ed0:	ldrb	r3, [r0, #7]
   13ed4:	cmp	r3, #0
   13ed8:	bne	13f50 <__assert_fail@plt+0x3020>
   13edc:	ldrb	r2, [r4]
   13ee0:	ldr	r3, [pc, #124]	; 13f64 <__assert_fail@plt+0x3034>
   13ee4:	ldr	r0, [pc, #124]	; 13f68 <__assert_fail@plt+0x3038>
   13ee8:	cmp	r2, #96	; 0x60
   13eec:	movne	r0, r3
   13ef0:	pop	{r4, r5, r6, pc}
   13ef4:	ldrb	r3, [r0, #1]
   13ef8:	bic	r3, r3, #32
   13efc:	cmp	r3, #84	; 0x54
   13f00:	bne	13f50 <__assert_fail@plt+0x3020>
   13f04:	ldrb	r3, [r0, #2]
   13f08:	bic	r3, r3, #32
   13f0c:	cmp	r3, #70	; 0x46
   13f10:	bne	13f50 <__assert_fail@plt+0x3020>
   13f14:	ldrb	r3, [r0, #3]
   13f18:	cmp	r3, #45	; 0x2d
   13f1c:	bne	13f50 <__assert_fail@plt+0x3020>
   13f20:	ldrb	r3, [r0, #4]
   13f24:	cmp	r3, #56	; 0x38
   13f28:	bne	13f50 <__assert_fail@plt+0x3020>
   13f2c:	ldrb	r3, [r0, #5]
   13f30:	cmp	r3, #0
   13f34:	bne	13f50 <__assert_fail@plt+0x3020>
   13f38:	ldrb	r2, [r4]
   13f3c:	ldr	r3, [pc, #40]	; 13f6c <__assert_fail@plt+0x303c>
   13f40:	ldr	r0, [pc, #40]	; 13f70 <__assert_fail@plt+0x3040>
   13f44:	cmp	r2, #96	; 0x60
   13f48:	movne	r0, r3
   13f4c:	pop	{r4, r5, r6, pc}
   13f50:	ldr	r3, [pc, #28]	; 13f74 <__assert_fail@plt+0x3044>
   13f54:	ldr	r0, [pc, #28]	; 13f78 <__assert_fail@plt+0x3048>
   13f58:	cmp	r5, #9
   13f5c:	movne	r0, r3
   13f60:	pop	{r4, r5, r6, pc}
   13f64:	andeq	r8, r1, r8, asr #5
   13f68:	ldrdeq	r8, [r1], -r4
   13f6c:	andeq	r8, r1, r4, asr #5
   13f70:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13f74:	andeq	r8, r1, ip, asr #5
   13f78:	ldrdeq	r8, [r1], -r0
   13f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f80:	sub	sp, sp, #116	; 0x74
   13f84:	str	r0, [sp, #36]	; 0x24
   13f88:	mov	sl, r1
   13f8c:	str	r2, [sp, #52]	; 0x34
   13f90:	str	r3, [sp, #28]
   13f94:	ldr	r8, [sp, #152]	; 0x98
   13f98:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   13f9c:	str	r0, [sp, #84]	; 0x54
   13fa0:	ldr	r3, [sp, #156]	; 0x9c
   13fa4:	lsr	r3, r3, #1
   13fa8:	and	r3, r3, #1
   13fac:	str	r3, [sp, #32]
   13fb0:	mov	r3, #1
   13fb4:	str	r3, [sp, #40]	; 0x28
   13fb8:	mov	r3, #0
   13fbc:	str	r3, [sp, #80]	; 0x50
   13fc0:	str	r3, [sp, #44]	; 0x2c
   13fc4:	str	r3, [sp, #48]	; 0x30
   13fc8:	str	r3, [sp, #60]	; 0x3c
   13fcc:	str	r3, [sp, #72]	; 0x48
   13fd0:	str	r3, [sp, #76]	; 0x4c
   13fd4:	mov	r7, sl
   13fd8:	mov	sl, r8
   13fdc:	cmp	sl, #10
   13fe0:	ldrls	pc, [pc, sl, lsl #2]
   13fe4:	b	1419c <__assert_fail@plt+0x326c>
   13fe8:	andeq	r4, r1, ip, asr #32
   13fec:	andeq	r4, r1, ip, lsl r0
   13ff0:	andeq	r4, r1, r8, ror r1
   13ff4:	andeq	r4, r1, r4, lsl r0
   13ff8:	andeq	r4, r1, ip, lsr #2
   13ffc:	andeq	r4, r1, ip, asr r0
   14000:	andeq	r5, r1, r8, asr #1
   14004:	andeq	r4, r1, r0, lsr #3
   14008:	muleq	r1, r8, r0
   1400c:	muleq	r1, r8, r0
   14010:	muleq	r1, r8, r0
   14014:	mov	r3, #1
   14018:	str	r3, [sp, #48]	; 0x30
   1401c:	mov	r3, #1
   14020:	str	r3, [sp, #32]
   14024:	str	r3, [sp, #60]	; 0x3c
   14028:	ldr	r3, [pc, #4068]	; 15014 <__assert_fail@plt+0x40e4>
   1402c:	str	r3, [sp, #72]	; 0x48
   14030:	mov	fp, #0
   14034:	mov	sl, #2
   14038:	mov	r6, #0
   1403c:	ldr	r3, [sp, #48]	; 0x30
   14040:	eor	r3, r3, #1
   14044:	str	r3, [sp, #68]	; 0x44
   14048:	b	14930 <__assert_fail@plt+0x3a00>
   1404c:	mov	r3, #0
   14050:	str	r3, [sp, #32]
   14054:	mov	fp, r3
   14058:	b	14038 <__assert_fail@plt+0x3108>
   1405c:	ldr	r3, [sp, #32]
   14060:	cmp	r3, #0
   14064:	bne	141b8 <__assert_fail@plt+0x3288>
   14068:	cmp	r7, #0
   1406c:	beq	141d8 <__assert_fail@plt+0x32a8>
   14070:	ldr	r3, [sp, #36]	; 0x24
   14074:	mov	r2, #34	; 0x22
   14078:	strb	r2, [r3]
   1407c:	mov	r3, #1
   14080:	str	r3, [sp, #48]	; 0x30
   14084:	str	r3, [sp, #60]	; 0x3c
   14088:	ldr	r3, [pc, #3980]	; 1501c <__assert_fail@plt+0x40ec>
   1408c:	str	r3, [sp, #72]	; 0x48
   14090:	mov	fp, #1
   14094:	b	14038 <__assert_fail@plt+0x3108>
   14098:	cmp	sl, #10
   1409c:	beq	140c0 <__assert_fail@plt+0x3190>
   140a0:	mov	r1, sl
   140a4:	ldr	r0, [pc, #3948]	; 15018 <__assert_fail@plt+0x40e8>
   140a8:	bl	13e44 <__assert_fail@plt+0x2f14>
   140ac:	str	r0, [sp, #164]	; 0xa4
   140b0:	mov	r1, sl
   140b4:	ldr	r0, [pc, #3928]	; 15014 <__assert_fail@plt+0x40e4>
   140b8:	bl	13e44 <__assert_fail@plt+0x2f14>
   140bc:	str	r0, [sp, #168]	; 0xa8
   140c0:	ldr	r3, [sp, #32]
   140c4:	cmp	r3, #0
   140c8:	movne	fp, #0
   140cc:	bne	14104 <__assert_fail@plt+0x31d4>
   140d0:	ldr	r3, [sp, #164]	; 0xa4
   140d4:	ldrb	r3, [r3]
   140d8:	cmp	r3, #0
   140dc:	beq	14124 <__assert_fail@plt+0x31f4>
   140e0:	ldr	r2, [sp, #164]	; 0xa4
   140e4:	mov	fp, #0
   140e8:	ldr	r1, [sp, #36]	; 0x24
   140ec:	cmp	r7, fp
   140f0:	strbhi	r3, [r1, fp]
   140f4:	add	fp, fp, #1
   140f8:	ldrb	r3, [r2, #1]!
   140fc:	cmp	r3, #0
   14100:	bne	140ec <__assert_fail@plt+0x31bc>
   14104:	ldr	r0, [sp, #168]	; 0xa8
   14108:	bl	10e34 <strlen@plt>
   1410c:	str	r0, [sp, #60]	; 0x3c
   14110:	ldr	r3, [sp, #168]	; 0xa8
   14114:	str	r3, [sp, #72]	; 0x48
   14118:	mov	r3, #1
   1411c:	str	r3, [sp, #48]	; 0x30
   14120:	b	14038 <__assert_fail@plt+0x3108>
   14124:	mov	fp, #0
   14128:	b	14104 <__assert_fail@plt+0x31d4>
   1412c:	ldr	r3, [sp, #32]
   14130:	cmp	r3, #0
   14134:	bne	141f4 <__assert_fail@plt+0x32c4>
   14138:	mov	r3, #1
   1413c:	str	r3, [sp, #48]	; 0x30
   14140:	cmp	r7, #0
   14144:	beq	14210 <__assert_fail@plt+0x32e0>
   14148:	ldr	r3, [sp, #36]	; 0x24
   1414c:	mov	r2, #39	; 0x27
   14150:	strb	r2, [r3]
   14154:	mov	r3, #0
   14158:	str	r3, [sp, #32]
   1415c:	mov	r3, #1
   14160:	str	r3, [sp, #60]	; 0x3c
   14164:	ldr	r3, [pc, #3752]	; 15014 <__assert_fail@plt+0x40e4>
   14168:	str	r3, [sp, #72]	; 0x48
   1416c:	mov	fp, #1
   14170:	mov	sl, #2
   14174:	b	14038 <__assert_fail@plt+0x3108>
   14178:	ldr	r3, [sp, #32]
   1417c:	cmp	r3, #0
   14180:	beq	14140 <__assert_fail@plt+0x3210>
   14184:	mov	r3, #1
   14188:	str	r3, [sp, #60]	; 0x3c
   1418c:	ldr	r3, [pc, #3712]	; 15014 <__assert_fail@plt+0x40e4>
   14190:	str	r3, [sp, #72]	; 0x48
   14194:	mov	fp, #0
   14198:	b	14038 <__assert_fail@plt+0x3108>
   1419c:	bl	10f24 <abort@plt>
   141a0:	mov	r3, #0
   141a4:	str	r3, [sp, #32]
   141a8:	mov	r3, #1
   141ac:	str	r3, [sp, #48]	; 0x30
   141b0:	mov	fp, #0
   141b4:	b	14038 <__assert_fail@plt+0x3108>
   141b8:	ldr	r3, [sp, #32]
   141bc:	str	r3, [sp, #48]	; 0x30
   141c0:	mov	r3, #1
   141c4:	str	r3, [sp, #60]	; 0x3c
   141c8:	ldr	r3, [pc, #3660]	; 1501c <__assert_fail@plt+0x40ec>
   141cc:	str	r3, [sp, #72]	; 0x48
   141d0:	mov	fp, #0
   141d4:	b	14038 <__assert_fail@plt+0x3108>
   141d8:	mov	r3, #1
   141dc:	str	r3, [sp, #48]	; 0x30
   141e0:	str	r3, [sp, #60]	; 0x3c
   141e4:	ldr	r3, [pc, #3632]	; 1501c <__assert_fail@plt+0x40ec>
   141e8:	str	r3, [sp, #72]	; 0x48
   141ec:	mov	fp, #1
   141f0:	b	14038 <__assert_fail@plt+0x3108>
   141f4:	mov	r3, #1
   141f8:	str	r3, [sp, #60]	; 0x3c
   141fc:	ldr	r3, [pc, #3600]	; 15014 <__assert_fail@plt+0x40e4>
   14200:	str	r3, [sp, #72]	; 0x48
   14204:	mov	fp, #0
   14208:	mov	sl, #2
   1420c:	b	14038 <__assert_fail@plt+0x3108>
   14210:	mov	r3, #0
   14214:	str	r3, [sp, #32]
   14218:	mov	r3, #1
   1421c:	str	r3, [sp, #60]	; 0x3c
   14220:	ldr	r3, [pc, #3564]	; 15014 <__assert_fail@plt+0x40e4>
   14224:	str	r3, [sp, #72]	; 0x48
   14228:	mov	fp, #1
   1422c:	mov	sl, #2
   14230:	b	14038 <__assert_fail@plt+0x3108>
   14234:	mov	r3, #0
   14238:	str	r3, [sp, #56]	; 0x38
   1423c:	ldr	r3, [sp, #52]	; 0x34
   14240:	add	r2, r3, r6
   14244:	str	r2, [sp, #64]	; 0x40
   14248:	ldrb	r4, [r3, r6]
   1424c:	cmp	r4, #126	; 0x7e
   14250:	ldrls	pc, [pc, r4, lsl #2]
   14254:	b	14a90 <__assert_fail@plt+0x3b60>
   14258:	andeq	r4, r1, r0, ror r4
   1425c:	muleq	r1, r0, sl
   14260:	muleq	r1, r0, sl
   14264:	muleq	r1, r0, sl
   14268:	muleq	r1, r0, sl
   1426c:	muleq	r1, r0, sl
   14270:	muleq	r1, r0, sl
   14274:	andeq	r4, r1, ip, asr #15
   14278:	andeq	r4, r1, r8, ror #8
   1427c:	andeq	r4, r1, r4, lsl #15
   14280:	andeq	r4, r1, ip, ror r7
   14284:	andeq	r4, r1, ip, ror #13
   14288:	andeq	r4, r1, r4, ror #13
   1428c:	andeq	r4, r1, r0, ror #8
   14290:	muleq	r1, r0, sl
   14294:	muleq	r1, r0, sl
   14298:	muleq	r1, r0, sl
   1429c:	muleq	r1, r0, sl
   142a0:	muleq	r1, r0, sl
   142a4:	muleq	r1, r0, sl
   142a8:	muleq	r1, r0, sl
   142ac:	muleq	r1, r0, sl
   142b0:	muleq	r1, r0, sl
   142b4:	muleq	r1, r0, sl
   142b8:	muleq	r1, r0, sl
   142bc:	muleq	r1, r0, sl
   142c0:	muleq	r1, r0, sl
   142c4:	muleq	r1, r0, sl
   142c8:	muleq	r1, r0, sl
   142cc:	muleq	r1, r0, sl
   142d0:	muleq	r1, r0, sl
   142d4:	muleq	r1, r0, sl
   142d8:	andeq	r4, r1, r0, lsr #16
   142dc:	andeq	r4, r1, ip, lsl r8
   142e0:	andeq	r4, r1, ip, lsl r8
   142e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142e8:	andeq	r4, r1, ip, lsl r8
   142ec:	andeq	r4, r1, r4, ror #28
   142f0:	andeq	r4, r1, ip, lsl r8
   142f4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142f8:	andeq	r4, r1, ip, lsl r8
   142fc:	andeq	r4, r1, ip, lsl r8
   14300:	andeq	r4, r1, ip, lsl r8
   14304:	andeq	r4, r1, r4, ror #28
   14308:	andeq	r4, r1, r4, ror #28
   1430c:	andeq	r4, r1, r4, ror #28
   14310:	andeq	r4, r1, r4, ror #28
   14314:	andeq	r4, r1, r4, ror #28
   14318:	andeq	r4, r1, r4, ror #28
   1431c:	andeq	r4, r1, r4, ror #28
   14320:	andeq	r4, r1, r4, ror #28
   14324:	andeq	r4, r1, r4, ror #28
   14328:	andeq	r4, r1, r4, ror #28
   1432c:	andeq	r4, r1, r4, ror #28
   14330:	andeq	r4, r1, r4, ror #28
   14334:	andeq	r4, r1, r4, ror #28
   14338:	andeq	r4, r1, r4, ror #28
   1433c:	andeq	r4, r1, r4, ror #28
   14340:	andeq	r4, r1, r4, ror #28
   14344:	andeq	r4, r1, ip, lsl r8
   14348:	andeq	r4, r1, ip, lsl r8
   1434c:	andeq	r4, r1, ip, lsl r8
   14350:	andeq	r4, r1, ip, lsl r8
   14354:	andeq	r4, r1, r8, ror r5
   14358:	muleq	r1, r0, sl
   1435c:	andeq	r4, r1, r4, ror #28
   14360:	andeq	r4, r1, r4, ror #28
   14364:	andeq	r4, r1, r4, ror #28
   14368:	andeq	r4, r1, r4, ror #28
   1436c:	andeq	r4, r1, r4, ror #28
   14370:	andeq	r4, r1, r4, ror #28
   14374:	andeq	r4, r1, r4, ror #28
   14378:	andeq	r4, r1, r4, ror #28
   1437c:	andeq	r4, r1, r4, ror #28
   14380:	andeq	r4, r1, r4, ror #28
   14384:	andeq	r4, r1, r4, ror #28
   14388:	andeq	r4, r1, r4, ror #28
   1438c:	andeq	r4, r1, r4, ror #28
   14390:	andeq	r4, r1, r4, ror #28
   14394:	andeq	r4, r1, r4, ror #28
   14398:	andeq	r4, r1, r4, ror #28
   1439c:	andeq	r4, r1, r4, ror #28
   143a0:	andeq	r4, r1, r4, ror #28
   143a4:	andeq	r4, r1, r4, ror #28
   143a8:	andeq	r4, r1, r4, ror #28
   143ac:	andeq	r4, r1, r4, ror #28
   143b0:	andeq	r4, r1, r4, ror #28
   143b4:	andeq	r4, r1, r4, ror #28
   143b8:	andeq	r4, r1, r4, ror #28
   143bc:	andeq	r4, r1, r4, ror #28
   143c0:	andeq	r4, r1, r4, ror #28
   143c4:	andeq	r4, r1, ip, lsl r8
   143c8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143cc:	andeq	r4, r1, r4, ror #28
   143d0:	andeq	r4, r1, ip, lsl r8
   143d4:	andeq	r4, r1, r4, ror #28
   143d8:	andeq	r4, r1, ip, lsl r8
   143dc:	andeq	r4, r1, r4, ror #28
   143e0:	andeq	r4, r1, r4, ror #28
   143e4:	andeq	r4, r1, r4, ror #28
   143e8:	andeq	r4, r1, r4, ror #28
   143ec:	andeq	r4, r1, r4, ror #28
   143f0:	andeq	r4, r1, r4, ror #28
   143f4:	andeq	r4, r1, r4, ror #28
   143f8:	andeq	r4, r1, r4, ror #28
   143fc:	andeq	r4, r1, r4, ror #28
   14400:	andeq	r4, r1, r4, ror #28
   14404:	andeq	r4, r1, r4, ror #28
   14408:	andeq	r4, r1, r4, ror #28
   1440c:	andeq	r4, r1, r4, ror #28
   14410:	andeq	r4, r1, r4, ror #28
   14414:	andeq	r4, r1, r4, ror #28
   14418:	andeq	r4, r1, r4, ror #28
   1441c:	andeq	r4, r1, r4, ror #28
   14420:	andeq	r4, r1, r4, ror #28
   14424:	andeq	r4, r1, r4, ror #28
   14428:	andeq	r4, r1, r4, ror #28
   1442c:	andeq	r4, r1, r4, ror #28
   14430:	andeq	r4, r1, r4, ror #28
   14434:	andeq	r4, r1, r4, ror #28
   14438:	andeq	r4, r1, r4, ror #28
   1443c:	andeq	r4, r1, r4, ror #28
   14440:	andeq	r4, r1, r4, ror #28
   14444:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14448:	andeq	r4, r1, ip, lsl r8
   1444c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14450:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14454:	mov	r3, #0
   14458:	str	r3, [sp, #56]	; 0x38
   1445c:	b	1423c <__assert_fail@plt+0x330c>
   14460:	mov	r3, #114	; 0x72
   14464:	b	14788 <__assert_fail@plt+0x3858>
   14468:	mov	r3, #98	; 0x62
   1446c:	b	147a0 <__assert_fail@plt+0x3870>
   14470:	ldr	r3, [sp, #48]	; 0x30
   14474:	cmp	r3, #0
   14478:	beq	14560 <__assert_fail@plt+0x3630>
   1447c:	ldr	r3, [sp, #32]
   14480:	cmp	r3, #0
   14484:	bne	14fe8 <__assert_fail@plt+0x40b8>
   14488:	ldr	r3, [sp, #44]	; 0x2c
   1448c:	eor	r3, r3, #1
   14490:	cmp	sl, #2
   14494:	movne	r3, #0
   14498:	andeq	r3, r3, #1
   1449c:	cmp	r3, #0
   144a0:	moveq	r2, fp
   144a4:	beq	144e8 <__assert_fail@plt+0x35b8>
   144a8:	cmp	r7, fp
   144ac:	ldrhi	r2, [sp, #36]	; 0x24
   144b0:	movhi	r1, #39	; 0x27
   144b4:	strbhi	r1, [r2, fp]
   144b8:	add	r2, fp, #1
   144bc:	cmp	r7, r2
   144c0:	ldrhi	r1, [sp, #36]	; 0x24
   144c4:	movhi	r0, #36	; 0x24
   144c8:	strbhi	r0, [r1, r2]
   144cc:	add	r2, fp, #2
   144d0:	cmp	r7, r2
   144d4:	ldrhi	r1, [sp, #36]	; 0x24
   144d8:	movhi	r0, #39	; 0x27
   144dc:	strbhi	r0, [r1, r2]
   144e0:	add	r2, fp, #3
   144e4:	str	r3, [sp, #44]	; 0x2c
   144e8:	cmp	r7, r2
   144ec:	ldrhi	r3, [sp, #36]	; 0x24
   144f0:	movhi	r1, #92	; 0x5c
   144f4:	strbhi	r1, [r3, r2]
   144f8:	add	fp, r2, #1
   144fc:	cmp	r5, #0
   14500:	beq	14e6c <__assert_fail@plt+0x3f3c>
   14504:	add	r3, r6, #1
   14508:	ldr	r1, [sp, #28]
   1450c:	cmp	r1, r3
   14510:	bls	14e7c <__assert_fail@plt+0x3f4c>
   14514:	ldr	r1, [sp, #52]	; 0x34
   14518:	ldrb	r3, [r1, r3]
   1451c:	sub	r3, r3, #48	; 0x30
   14520:	uxtb	r3, r3
   14524:	cmp	r3, #9
   14528:	bhi	14e88 <__assert_fail@plt+0x3f58>
   1452c:	cmp	r7, fp
   14530:	movhi	r3, #48	; 0x30
   14534:	ldrhi	r1, [sp, #36]	; 0x24
   14538:	strbhi	r3, [r1, fp]
   1453c:	add	r3, r2, #2
   14540:	cmp	r7, r3
   14544:	movhi	r1, #48	; 0x30
   14548:	ldrhi	r0, [sp, #36]	; 0x24
   1454c:	strbhi	r1, [r0, r3]
   14550:	add	fp, r2, #3
   14554:	ldr	r8, [sp, #32]
   14558:	mov	r4, #48	; 0x30
   1455c:	b	14838 <__assert_fail@plt+0x3908>
   14560:	ldr	r3, [sp, #156]	; 0x9c
   14564:	tst	r3, #1
   14568:	bne	1492c <__assert_fail@plt+0x39fc>
   1456c:	ldr	r5, [sp, #48]	; 0x30
   14570:	mov	r8, r5
   14574:	b	14838 <__assert_fail@plt+0x3908>
   14578:	cmp	sl, #2
   1457c:	beq	14594 <__assert_fail@plt+0x3664>
   14580:	cmp	sl, #5
   14584:	beq	145ac <__assert_fail@plt+0x367c>
   14588:	mov	r8, #0
   1458c:	mov	r5, r8
   14590:	b	14838 <__assert_fail@plt+0x3908>
   14594:	ldr	r3, [sp, #32]
   14598:	cmp	r3, #0
   1459c:	bne	14ffc <__assert_fail@plt+0x40cc>
   145a0:	mov	r8, r3
   145a4:	mov	r5, r3
   145a8:	b	14838 <__assert_fail@plt+0x3908>
   145ac:	ldr	r3, [sp, #156]	; 0x9c
   145b0:	tst	r3, #4
   145b4:	beq	14e94 <__assert_fail@plt+0x3f64>
   145b8:	add	r3, r6, #2
   145bc:	ldr	r2, [sp, #28]
   145c0:	cmp	r2, r3
   145c4:	bls	14ea0 <__assert_fail@plt+0x3f70>
   145c8:	ldr	r2, [sp, #52]	; 0x34
   145cc:	add	r2, r2, r6
   145d0:	ldrb	r2, [r2, #1]
   145d4:	cmp	r2, #63	; 0x3f
   145d8:	movne	r8, #0
   145dc:	movne	r5, r8
   145e0:	bne	14838 <__assert_fail@plt+0x3908>
   145e4:	ldr	r2, [sp, #52]	; 0x34
   145e8:	ldrb	r2, [r2, r3]
   145ec:	sub	r1, r2, #33	; 0x21
   145f0:	cmp	r1, #29
   145f4:	ldrls	pc, [pc, r1, lsl #2]
   145f8:	b	14eac <__assert_fail@plt+0x3f7c>
   145fc:	andeq	r4, r1, r4, ror r6
   14600:	andeq	r4, r1, ip, lsr #29
   14604:	andeq	r4, r1, ip, lsr #29
   14608:	andeq	r4, r1, ip, lsr #29
   1460c:	andeq	r4, r1, ip, lsr #29
   14610:	andeq	r4, r1, ip, lsr #29
   14614:	andeq	r4, r1, r4, ror r6
   14618:	andeq	r4, r1, r4, ror r6
   1461c:	andeq	r4, r1, r4, ror r6
   14620:	andeq	r4, r1, ip, lsr #29
   14624:	andeq	r4, r1, ip, lsr #29
   14628:	andeq	r4, r1, ip, lsr #29
   1462c:	andeq	r4, r1, r4, ror r6
   14630:	andeq	r4, r1, ip, lsr #29
   14634:	andeq	r4, r1, r4, ror r6
   14638:	andeq	r4, r1, ip, lsr #29
   1463c:	andeq	r4, r1, ip, lsr #29
   14640:	andeq	r4, r1, ip, lsr #29
   14644:	andeq	r4, r1, ip, lsr #29
   14648:	andeq	r4, r1, ip, lsr #29
   1464c:	andeq	r4, r1, ip, lsr #29
   14650:	andeq	r4, r1, ip, lsr #29
   14654:	andeq	r4, r1, ip, lsr #29
   14658:	andeq	r4, r1, ip, lsr #29
   1465c:	andeq	r4, r1, ip, lsr #29
   14660:	andeq	r4, r1, ip, lsr #29
   14664:	andeq	r4, r1, ip, lsr #29
   14668:	andeq	r4, r1, r4, ror r6
   1466c:	andeq	r4, r1, r4, ror r6
   14670:	andeq	r4, r1, r4, ror r6
   14674:	ldr	r1, [sp, #32]
   14678:	cmp	r1, #0
   1467c:	bne	150bc <__assert_fail@plt+0x418c>
   14680:	cmp	r7, fp
   14684:	movhi	r1, #63	; 0x3f
   14688:	ldrhi	r0, [sp, #36]	; 0x24
   1468c:	strbhi	r1, [r0, fp]
   14690:	add	r1, fp, #1
   14694:	cmp	r7, r1
   14698:	ldrhi	r0, [sp, #36]	; 0x24
   1469c:	movhi	ip, #34	; 0x22
   146a0:	strbhi	ip, [r0, r1]
   146a4:	add	r1, fp, #2
   146a8:	cmp	r7, r1
   146ac:	ldrhi	r0, [sp, #36]	; 0x24
   146b0:	movhi	ip, #34	; 0x22
   146b4:	strbhi	ip, [r0, r1]
   146b8:	add	r1, fp, #3
   146bc:	cmp	r7, r1
   146c0:	movhi	r0, #63	; 0x3f
   146c4:	ldrhi	ip, [sp, #36]	; 0x24
   146c8:	strbhi	r0, [ip, r1]
   146cc:	add	fp, fp, #4
   146d0:	ldr	r5, [sp, #32]
   146d4:	mov	r8, r5
   146d8:	mov	r4, r2
   146dc:	mov	r6, r3
   146e0:	b	14838 <__assert_fail@plt+0x3908>
   146e4:	mov	r3, #102	; 0x66
   146e8:	b	147a0 <__assert_fail@plt+0x3870>
   146ec:	mov	r3, #118	; 0x76
   146f0:	b	147a0 <__assert_fail@plt+0x3870>
   146f4:	cmp	sl, #2
   146f8:	beq	14764 <__assert_fail@plt+0x3834>
   146fc:	ldr	r3, [sp, #48]	; 0x30
   14700:	ldr	r2, [sp, #32]
   14704:	and	r3, r3, r2
   14708:	tst	r9, r3
   1470c:	moveq	r3, r4
   14710:	beq	147a0 <__assert_fail@plt+0x3870>
   14714:	mov	r8, #0
   14718:	mov	r5, r8
   1471c:	eor	r5, r5, #1
   14720:	ldr	r3, [sp, #44]	; 0x2c
   14724:	and	r5, r5, r3
   14728:	tst	r5, #255	; 0xff
   1472c:	beq	1490c <__assert_fail@plt+0x39dc>
   14730:	cmp	r7, fp
   14734:	ldrhi	r3, [sp, #36]	; 0x24
   14738:	movhi	r2, #39	; 0x27
   1473c:	strbhi	r2, [r3, fp]
   14740:	add	r3, fp, #1
   14744:	cmp	r7, r3
   14748:	ldrhi	r2, [sp, #36]	; 0x24
   1474c:	movhi	r1, #39	; 0x27
   14750:	strbhi	r1, [r2, r3]
   14754:	add	fp, fp, #2
   14758:	mov	r3, #0
   1475c:	str	r3, [sp, #44]	; 0x2c
   14760:	b	1490c <__assert_fail@plt+0x39dc>
   14764:	ldr	r3, [sp, #32]
   14768:	cmp	r3, #0
   1476c:	bne	15008 <__assert_fail@plt+0x40d8>
   14770:	mov	r8, r3
   14774:	mov	r5, r3
   14778:	b	1471c <__assert_fail@plt+0x37ec>
   1477c:	mov	r3, #110	; 0x6e
   14780:	b	14788 <__assert_fail@plt+0x3858>
   14784:	mov	r3, #116	; 0x74
   14788:	ldr	r2, [sp, #32]
   1478c:	cmp	sl, #2
   14790:	movne	r2, #0
   14794:	andeq	r2, r2, #1
   14798:	cmp	r2, #0
   1479c:	bne	147c0 <__assert_fail@plt+0x3890>
   147a0:	ldr	r2, [sp, #48]	; 0x30
   147a4:	cmp	r2, #0
   147a8:	moveq	r8, r2
   147ac:	moveq	r5, r2
   147b0:	beq	14838 <__assert_fail@plt+0x3908>
   147b4:	mov	r4, r3
   147b8:	mov	r8, #0
   147bc:	b	14890 <__assert_fail@plt+0x3960>
   147c0:	mov	r8, sl
   147c4:	mov	sl, r7
   147c8:	b	15034 <__assert_fail@plt+0x4104>
   147cc:	mov	r3, #97	; 0x61
   147d0:	b	147a0 <__assert_fail@plt+0x3870>
   147d4:	ldr	r3, [sp, #28]
   147d8:	cmn	r3, #1
   147dc:	beq	14808 <__assert_fail@plt+0x38d8>
   147e0:	ldr	r3, [sp, #28]
   147e4:	subs	r3, r3, #1
   147e8:	movne	r3, #1
   147ec:	cmp	r3, #0
   147f0:	bne	14eb8 <__assert_fail@plt+0x3f88>
   147f4:	cmp	r6, #0
   147f8:	beq	14820 <__assert_fail@plt+0x38f0>
   147fc:	mov	r8, #0
   14800:	mov	r5, r8
   14804:	b	14838 <__assert_fail@plt+0x3908>
   14808:	ldr	r3, [sp, #52]	; 0x34
   1480c:	ldrb	r3, [r3, #1]
   14810:	adds	r3, r3, #0
   14814:	movne	r3, #1
   14818:	b	147ec <__assert_fail@plt+0x38bc>
   1481c:	mov	r8, #0
   14820:	ldr	r5, [sp, #32]
   14824:	cmp	sl, #2
   14828:	movne	r5, #0
   1482c:	andeq	r5, r5, #1
   14830:	cmp	r5, #0
   14834:	bne	149e8 <__assert_fail@plt+0x3ab8>
   14838:	ldr	r3, [sp, #68]	; 0x44
   1483c:	cmp	sl, #2
   14840:	orreq	r3, r3, #1
   14844:	eor	r3, r3, #1
   14848:	ldr	r2, [sp, #32]
   1484c:	orr	r3, r2, r3
   14850:	tst	r3, #255	; 0xff
   14854:	beq	14884 <__assert_fail@plt+0x3954>
   14858:	ldr	r3, [sp, #160]	; 0xa0
   1485c:	cmp	r3, #0
   14860:	beq	14884 <__assert_fail@plt+0x3954>
   14864:	lsr	r2, r4, #5
   14868:	uxtb	r2, r2
   1486c:	and	r3, r4, #31
   14870:	ldr	r1, [sp, #160]	; 0xa0
   14874:	ldr	r2, [r1, r2, lsl #2]
   14878:	lsr	r3, r2, r3
   1487c:	tst	r3, #1
   14880:	bne	14890 <__assert_fail@plt+0x3960>
   14884:	ldr	r3, [sp, #56]	; 0x38
   14888:	cmp	r3, #0
   1488c:	beq	1471c <__assert_fail@plt+0x37ec>
   14890:	ldr	r3, [sp, #32]
   14894:	cmp	r3, #0
   14898:	bne	150a4 <__assert_fail@plt+0x4174>
   1489c:	ldr	r3, [sp, #44]	; 0x2c
   148a0:	eor	r3, r3, #1
   148a4:	cmp	sl, #2
   148a8:	movne	r3, #0
   148ac:	andeq	r3, r3, #1
   148b0:	cmp	r3, #0
   148b4:	beq	148f8 <__assert_fail@plt+0x39c8>
   148b8:	cmp	r7, fp
   148bc:	ldrhi	r2, [sp, #36]	; 0x24
   148c0:	movhi	r1, #39	; 0x27
   148c4:	strbhi	r1, [r2, fp]
   148c8:	add	r2, fp, #1
   148cc:	cmp	r7, r2
   148d0:	ldrhi	r1, [sp, #36]	; 0x24
   148d4:	movhi	r0, #36	; 0x24
   148d8:	strbhi	r0, [r1, r2]
   148dc:	add	r2, fp, #2
   148e0:	cmp	r7, r2
   148e4:	ldrhi	r1, [sp, #36]	; 0x24
   148e8:	movhi	r0, #39	; 0x27
   148ec:	strbhi	r0, [r1, r2]
   148f0:	add	fp, fp, #3
   148f4:	str	r3, [sp, #44]	; 0x2c
   148f8:	cmp	r7, fp
   148fc:	ldrhi	r3, [sp, #36]	; 0x24
   14900:	movhi	r2, #92	; 0x5c
   14904:	strbhi	r2, [r3, fp]
   14908:	add	fp, fp, #1
   1490c:	cmp	fp, r7
   14910:	ldrcc	r3, [sp, #36]	; 0x24
   14914:	strbcc	r4, [r3, fp]
   14918:	add	fp, fp, #1
   1491c:	ldr	r3, [sp, #40]	; 0x28
   14920:	cmp	r8, #0
   14924:	moveq	r3, #0
   14928:	str	r3, [sp, #40]	; 0x28
   1492c:	add	r6, r6, #1
   14930:	ldr	r3, [sp, #28]
   14934:	cmn	r3, #1
   14938:	beq	14ec4 <__assert_fail@plt+0x3f94>
   1493c:	ldr	r3, [sp, #28]
   14940:	subs	r8, r3, r6
   14944:	movne	r8, #1
   14948:	cmp	r8, #0
   1494c:	beq	14ed8 <__assert_fail@plt+0x3fa8>
   14950:	ldr	r5, [sp, #48]	; 0x30
   14954:	cmp	sl, #2
   14958:	moveq	r5, #0
   1495c:	andne	r5, r5, #1
   14960:	ldr	r3, [sp, #60]	; 0x3c
   14964:	adds	r9, r3, #0
   14968:	movne	r9, #1
   1496c:	ands	r2, r5, r9
   14970:	str	r2, [sp, #56]	; 0x38
   14974:	beq	1423c <__assert_fail@plt+0x330c>
   14978:	add	r4, r6, r3
   1497c:	ldr	r2, [sp, #28]
   14980:	cmp	r3, #1
   14984:	movls	r3, #0
   14988:	movhi	r3, #1
   1498c:	cmn	r2, #1
   14990:	movne	r3, #0
   14994:	cmp	r3, #0
   14998:	beq	149a8 <__assert_fail@plt+0x3a78>
   1499c:	ldr	r0, [sp, #52]	; 0x34
   149a0:	bl	10e34 <strlen@plt>
   149a4:	str	r0, [sp, #28]
   149a8:	ldr	r3, [sp, #28]
   149ac:	cmp	r3, r4
   149b0:	bcc	14234 <__assert_fail@plt+0x3304>
   149b4:	ldr	r2, [sp, #60]	; 0x3c
   149b8:	ldr	r1, [sp, #72]	; 0x48
   149bc:	ldr	r3, [sp, #52]	; 0x34
   149c0:	add	r0, r3, r6
   149c4:	bl	10d50 <memcmp@plt>
   149c8:	cmp	r0, #0
   149cc:	bne	14454 <__assert_fail@plt+0x3524>
   149d0:	ldr	r3, [sp, #32]
   149d4:	cmp	r3, #0
   149d8:	beq	1423c <__assert_fail@plt+0x330c>
   149dc:	mov	r8, sl
   149e0:	mov	sl, r7
   149e4:	b	15034 <__assert_fail@plt+0x4104>
   149e8:	mov	r8, sl
   149ec:	mov	sl, r7
   149f0:	b	15034 <__assert_fail@plt+0x4104>
   149f4:	cmp	sl, #2
   149f8:	strne	r8, [sp, #80]	; 0x50
   149fc:	movne	r5, #0
   14a00:	bne	14838 <__assert_fail@plt+0x3908>
   14a04:	ldr	r3, [sp, #32]
   14a08:	cmp	r3, #0
   14a0c:	bne	15020 <__assert_fail@plt+0x40f0>
   14a10:	ldr	r2, [sp, #76]	; 0x4c
   14a14:	adds	r3, r7, #0
   14a18:	movne	r3, #1
   14a1c:	cmp	r2, #0
   14a20:	movne	r3, #0
   14a24:	cmp	r3, #0
   14a28:	movne	r3, #0
   14a2c:	bne	14a5c <__assert_fail@plt+0x3b2c>
   14a30:	cmp	r7, fp
   14a34:	ldrhi	r3, [sp, #36]	; 0x24
   14a38:	movhi	r2, #39	; 0x27
   14a3c:	strbhi	r2, [r3, fp]
   14a40:	add	r3, fp, #1
   14a44:	cmp	r7, r3
   14a48:	ldrhi	r2, [sp, #36]	; 0x24
   14a4c:	movhi	r1, #92	; 0x5c
   14a50:	strbhi	r1, [r2, r3]
   14a54:	mov	r3, r7
   14a58:	ldr	r7, [sp, #76]	; 0x4c
   14a5c:	add	r2, fp, #2
   14a60:	cmp	r2, r3
   14a64:	ldrcc	r1, [sp, #36]	; 0x24
   14a68:	movcc	r0, #39	; 0x27
   14a6c:	strbcc	r0, [r1, r2]
   14a70:	add	fp, fp, #3
   14a74:	ldr	r2, [sp, #32]
   14a78:	mov	r5, r2
   14a7c:	str	r8, [sp, #80]	; 0x50
   14a80:	str	r2, [sp, #44]	; 0x2c
   14a84:	str	r7, [sp, #76]	; 0x4c
   14a88:	mov	r7, r3
   14a8c:	b	14838 <__assert_fail@plt+0x3908>
   14a90:	ldr	r5, [sp, #84]	; 0x54
   14a94:	cmp	r5, #1
   14a98:	beq	14ac8 <__assert_fail@plt+0x3b98>
   14a9c:	mov	r3, #0
   14aa0:	str	r3, [sp, #104]	; 0x68
   14aa4:	str	r3, [sp, #108]	; 0x6c
   14aa8:	ldr	r3, [sp, #28]
   14aac:	cmn	r3, #1
   14ab0:	beq	14afc <__assert_fail@plt+0x3bcc>
   14ab4:	mov	r3, #0
   14ab8:	str	r4, [sp, #88]	; 0x58
   14abc:	str	fp, [sp, #92]	; 0x5c
   14ac0:	mov	fp, r3
   14ac4:	b	14c24 <__assert_fail@plt+0x3cf4>
   14ac8:	bl	10e1c <__ctype_b_loc@plt>
   14acc:	ldr	r2, [r0]
   14ad0:	lsl	r3, r4, #1
   14ad4:	ldrh	r8, [r2, r3]
   14ad8:	lsr	r8, r8, #14
   14adc:	and	r8, r8, #1
   14ae0:	mov	r2, r5
   14ae4:	eor	r5, r8, #1
   14ae8:	ldr	r3, [sp, #48]	; 0x30
   14aec:	and	r5, r5, r3
   14af0:	ands	r5, r5, #255	; 0xff
   14af4:	beq	14838 <__assert_fail@plt+0x3908>
   14af8:	b	14cbc <__assert_fail@plt+0x3d8c>
   14afc:	ldr	r0, [sp, #52]	; 0x34
   14b00:	bl	10e34 <strlen@plt>
   14b04:	str	r0, [sp, #28]
   14b08:	b	14ab4 <__assert_fail@plt+0x3b84>
   14b0c:	mov	r2, fp
   14b10:	mov	r1, r4
   14b14:	ldr	r4, [sp, #88]	; 0x58
   14b18:	ldr	fp, [sp, #92]	; 0x5c
   14b1c:	ldr	r0, [sp, #28]
   14b20:	cmp	r0, r5
   14b24:	bls	14cf0 <__assert_fail@plt+0x3dc0>
   14b28:	ldrb	r3, [r1]
   14b2c:	cmp	r3, #0
   14b30:	beq	14cf8 <__assert_fail@plt+0x3dc8>
   14b34:	mov	r3, r1
   14b38:	add	r2, r2, #1
   14b3c:	add	r1, r6, r2
   14b40:	cmp	r0, r1
   14b44:	bls	14d00 <__assert_fail@plt+0x3dd0>
   14b48:	ldrb	r1, [r3, #1]!
   14b4c:	cmp	r1, #0
   14b50:	bne	14b38 <__assert_fail@plt+0x3c08>
   14b54:	mov	r8, #0
   14b58:	b	14cb4 <__assert_fail@plt+0x3d84>
   14b5c:	cmp	r4, r5
   14b60:	beq	14c00 <__assert_fail@plt+0x3cd0>
   14b64:	ldrb	r3, [r4, #1]!
   14b68:	sub	r3, r3, #91	; 0x5b
   14b6c:	cmp	r3, #33	; 0x21
   14b70:	ldrls	pc, [pc, r3, lsl #2]
   14b74:	b	14b5c <__assert_fail@plt+0x3c2c>
   14b78:	andeq	r5, r1, ip, lsr #32
   14b7c:	andeq	r5, r1, ip, lsr #32
   14b80:	andeq	r4, r1, ip, asr fp
   14b84:	andeq	r5, r1, ip, lsr #32
   14b88:	andeq	r4, r1, ip, asr fp
   14b8c:	andeq	r5, r1, ip, lsr #32
   14b90:	andeq	r4, r1, ip, asr fp
   14b94:	andeq	r4, r1, ip, asr fp
   14b98:	andeq	r4, r1, ip, asr fp
   14b9c:	andeq	r4, r1, ip, asr fp
   14ba0:	andeq	r4, r1, ip, asr fp
   14ba4:	andeq	r4, r1, ip, asr fp
   14ba8:	andeq	r4, r1, ip, asr fp
   14bac:	andeq	r4, r1, ip, asr fp
   14bb0:	andeq	r4, r1, ip, asr fp
   14bb4:	andeq	r4, r1, ip, asr fp
   14bb8:	andeq	r4, r1, ip, asr fp
   14bbc:	andeq	r4, r1, ip, asr fp
   14bc0:	andeq	r4, r1, ip, asr fp
   14bc4:	andeq	r4, r1, ip, asr fp
   14bc8:	andeq	r4, r1, ip, asr fp
   14bcc:	andeq	r4, r1, ip, asr fp
   14bd0:	andeq	r4, r1, ip, asr fp
   14bd4:	andeq	r4, r1, ip, asr fp
   14bd8:	andeq	r4, r1, ip, asr fp
   14bdc:	andeq	r4, r1, ip, asr fp
   14be0:	andeq	r4, r1, ip, asr fp
   14be4:	andeq	r4, r1, ip, asr fp
   14be8:	andeq	r4, r1, ip, asr fp
   14bec:	andeq	r4, r1, ip, asr fp
   14bf0:	andeq	r4, r1, ip, asr fp
   14bf4:	andeq	r4, r1, ip, asr fp
   14bf8:	andeq	r4, r1, ip, asr fp
   14bfc:	andeq	r5, r1, ip, lsr #32
   14c00:	ldr	r0, [sp, #100]	; 0x64
   14c04:	bl	10d8c <iswprint@plt>
   14c08:	cmp	r0, #0
   14c0c:	moveq	r8, #0
   14c10:	add	fp, fp, r9
   14c14:	add	r0, sp, #104	; 0x68
   14c18:	bl	10d38 <mbsinit@plt>
   14c1c:	cmp	r0, #0
   14c20:	bne	14c94 <__assert_fail@plt+0x3d64>
   14c24:	add	r5, r6, fp
   14c28:	ldr	r3, [sp, #52]	; 0x34
   14c2c:	add	r4, r3, r5
   14c30:	add	r3, sp, #104	; 0x68
   14c34:	ldr	r2, [sp, #28]
   14c38:	sub	r2, r2, r5
   14c3c:	mov	r1, r4
   14c40:	add	r0, sp, #100	; 0x64
   14c44:	bl	16bac <__assert_fail@plt+0x5c7c>
   14c48:	subs	r9, r0, #0
   14c4c:	beq	14d08 <__assert_fail@plt+0x3dd8>
   14c50:	cmn	r9, #1
   14c54:	beq	14ca4 <__assert_fail@plt+0x3d74>
   14c58:	cmn	r9, #2
   14c5c:	beq	14b0c <__assert_fail@plt+0x3bdc>
   14c60:	ldr	r3, [sp, #32]
   14c64:	cmp	sl, #2
   14c68:	movne	r3, #0
   14c6c:	andeq	r3, r3, #1
   14c70:	cmp	r3, #0
   14c74:	beq	14c00 <__assert_fail@plt+0x3cd0>
   14c78:	cmp	r9, #1
   14c7c:	bls	14c00 <__assert_fail@plt+0x3cd0>
   14c80:	sub	r3, r9, #1
   14c84:	add	r5, r3, r5
   14c88:	ldr	r3, [sp, #52]	; 0x34
   14c8c:	add	r5, r3, r5
   14c90:	b	14b64 <__assert_fail@plt+0x3c34>
   14c94:	ldr	r4, [sp, #88]	; 0x58
   14c98:	mov	r2, fp
   14c9c:	ldr	fp, [sp, #92]	; 0x5c
   14ca0:	b	14cb4 <__assert_fail@plt+0x3d84>
   14ca4:	ldr	r4, [sp, #88]	; 0x58
   14ca8:	mov	r2, fp
   14cac:	ldr	fp, [sp, #92]	; 0x5c
   14cb0:	mov	r8, #0
   14cb4:	cmp	r2, #1
   14cb8:	bls	14ae4 <__assert_fail@plt+0x3bb4>
   14cbc:	add	r1, r6, r2
   14cc0:	ldr	ip, [sp, #64]	; 0x40
   14cc4:	mov	r5, #0
   14cc8:	eor	r3, r8, #1
   14ccc:	ldr	r2, [sp, #48]	; 0x30
   14cd0:	and	r3, r3, r2
   14cd4:	uxtb	r3, r3
   14cd8:	ldr	r9, [sp, #32]
   14cdc:	ldr	lr, [sp, #44]	; 0x2c
   14ce0:	ldr	r2, [sp, #56]	; 0x38
   14ce4:	str	r8, [sp, #56]	; 0x38
   14ce8:	ldr	r0, [sp, #36]	; 0x24
   14cec:	b	14d88 <__assert_fail@plt+0x3e58>
   14cf0:	mov	r8, #0
   14cf4:	b	14cb4 <__assert_fail@plt+0x3d84>
   14cf8:	mov	r8, #0
   14cfc:	b	14cb4 <__assert_fail@plt+0x3d84>
   14d00:	mov	r8, #0
   14d04:	b	14cb4 <__assert_fail@plt+0x3d84>
   14d08:	ldr	r4, [sp, #88]	; 0x58
   14d0c:	mov	r2, fp
   14d10:	ldr	fp, [sp, #92]	; 0x5c
   14d14:	b	14cb4 <__assert_fail@plt+0x3d84>
   14d18:	cmp	r2, #0
   14d1c:	beq	14d30 <__assert_fail@plt+0x3e00>
   14d20:	cmp	r7, fp
   14d24:	movhi	r2, #92	; 0x5c
   14d28:	strbhi	r2, [r0, fp]
   14d2c:	add	fp, fp, #1
   14d30:	add	r8, r6, #1
   14d34:	cmp	r1, r8
   14d38:	bls	14e40 <__assert_fail@plt+0x3f10>
   14d3c:	eor	r2, r5, #1
   14d40:	and	r2, r2, lr
   14d44:	ands	r2, r2, #255	; 0xff
   14d48:	beq	14e5c <__assert_fail@plt+0x3f2c>
   14d4c:	cmp	r7, fp
   14d50:	movhi	r2, #39	; 0x27
   14d54:	strbhi	r2, [r0, fp]
   14d58:	add	r2, fp, #1
   14d5c:	cmp	r7, r2
   14d60:	movhi	lr, #39	; 0x27
   14d64:	strbhi	lr, [r0, r2]
   14d68:	add	fp, fp, #2
   14d6c:	mov	r6, r8
   14d70:	mov	r2, r3
   14d74:	mov	lr, r3
   14d78:	cmp	r7, fp
   14d7c:	strbhi	r4, [r0, fp]
   14d80:	add	fp, fp, #1
   14d84:	ldrb	r4, [ip, #1]!
   14d88:	cmp	r3, #0
   14d8c:	beq	14d18 <__assert_fail@plt+0x3de8>
   14d90:	cmp	r9, #0
   14d94:	bne	15098 <__assert_fail@plt+0x4168>
   14d98:	eor	r5, lr, #1
   14d9c:	cmp	sl, #2
   14da0:	movne	r5, #0
   14da4:	andeq	r5, r5, #1
   14da8:	cmp	r5, #0
   14dac:	beq	14de4 <__assert_fail@plt+0x3eb4>
   14db0:	cmp	r7, fp
   14db4:	movhi	lr, #39	; 0x27
   14db8:	strbhi	lr, [r0, fp]
   14dbc:	add	lr, fp, #1
   14dc0:	cmp	r7, lr
   14dc4:	movhi	r8, #36	; 0x24
   14dc8:	strbhi	r8, [r0, lr]
   14dcc:	add	lr, fp, #2
   14dd0:	cmp	r7, lr
   14dd4:	movhi	r8, #39	; 0x27
   14dd8:	strbhi	r8, [r0, lr]
   14ddc:	add	fp, fp, #3
   14de0:	mov	lr, r5
   14de4:	cmp	r7, fp
   14de8:	movhi	r5, #92	; 0x5c
   14dec:	strbhi	r5, [r0, fp]
   14df0:	add	r5, fp, #1
   14df4:	cmp	r7, r5
   14df8:	lsrhi	r8, r4, #6
   14dfc:	addhi	r8, r8, #48	; 0x30
   14e00:	strbhi	r8, [r0, r5]
   14e04:	add	r8, fp, #2
   14e08:	cmp	r7, r8
   14e0c:	lsrhi	r5, r4, #3
   14e10:	andhi	r5, r5, #7
   14e14:	addhi	r5, r5, #48	; 0x30
   14e18:	strbhi	r5, [r0, r8]
   14e1c:	add	fp, fp, #3
   14e20:	and	r4, r4, #7
   14e24:	add	r4, r4, #48	; 0x30
   14e28:	add	r5, r6, #1
   14e2c:	cmp	r1, r5
   14e30:	bls	14e4c <__assert_fail@plt+0x3f1c>
   14e34:	mov	r6, r5
   14e38:	mov	r5, r3
   14e3c:	b	14d78 <__assert_fail@plt+0x3e48>
   14e40:	str	lr, [sp, #44]	; 0x2c
   14e44:	ldr	r8, [sp, #56]	; 0x38
   14e48:	b	1471c <__assert_fail@plt+0x37ec>
   14e4c:	str	lr, [sp, #44]	; 0x2c
   14e50:	ldr	r8, [sp, #56]	; 0x38
   14e54:	mov	r5, r3
   14e58:	b	1471c <__assert_fail@plt+0x37ec>
   14e5c:	mov	r6, r8
   14e60:	b	14d78 <__assert_fail@plt+0x3e48>
   14e64:	mov	r5, #0
   14e68:	b	14838 <__assert_fail@plt+0x3908>
   14e6c:	mov	r8, r5
   14e70:	ldr	r5, [sp, #48]	; 0x30
   14e74:	mov	r4, #48	; 0x30
   14e78:	b	14838 <__assert_fail@plt+0x3908>
   14e7c:	ldr	r8, [sp, #32]
   14e80:	mov	r4, #48	; 0x30
   14e84:	b	14838 <__assert_fail@plt+0x3908>
   14e88:	ldr	r8, [sp, #32]
   14e8c:	mov	r4, #48	; 0x30
   14e90:	b	14838 <__assert_fail@plt+0x3908>
   14e94:	mov	r8, #0
   14e98:	mov	r5, r8
   14e9c:	b	14838 <__assert_fail@plt+0x3908>
   14ea0:	mov	r8, #0
   14ea4:	mov	r5, r8
   14ea8:	b	14838 <__assert_fail@plt+0x3908>
   14eac:	mov	r8, #0
   14eb0:	mov	r5, r8
   14eb4:	b	14838 <__assert_fail@plt+0x3908>
   14eb8:	mov	r8, #0
   14ebc:	mov	r5, r8
   14ec0:	b	14838 <__assert_fail@plt+0x3908>
   14ec4:	ldr	r3, [sp, #52]	; 0x34
   14ec8:	ldrb	r8, [r3, r6]
   14ecc:	adds	r8, r8, #0
   14ed0:	movne	r8, #1
   14ed4:	b	14948 <__assert_fail@plt+0x3a18>
   14ed8:	cmp	sl, #2
   14edc:	movne	r3, #0
   14ee0:	moveq	r3, #1
   14ee4:	ldr	r1, [sp, #32]
   14ee8:	mov	r2, r1
   14eec:	and	r2, r2, r3
   14ef0:	cmp	fp, #0
   14ef4:	movne	r2, #0
   14ef8:	andeq	r2, r2, #1
   14efc:	cmp	r2, #0
   14f00:	bne	150b0 <__assert_fail@plt+0x4180>
   14f04:	eor	r2, r1, #1
   14f08:	and	r3, r3, r2
   14f0c:	ldr	r1, [sp, #80]	; 0x50
   14f10:	tst	r1, r3
   14f14:	beq	14f8c <__assert_fail@plt+0x405c>
   14f18:	ldr	r3, [sp, #40]	; 0x28
   14f1c:	cmp	r3, #0
   14f20:	bne	14f48 <__assert_fail@plt+0x4018>
   14f24:	ldr	r1, [sp, #76]	; 0x4c
   14f28:	clz	r3, r7
   14f2c:	lsr	r3, r3, #5
   14f30:	cmp	r1, #0
   14f34:	moveq	r3, #0
   14f38:	cmp	r3, #0
   14f3c:	beq	14f8c <__assert_fail@plt+0x405c>
   14f40:	ldr	r7, [sp, #76]	; 0x4c
   14f44:	b	13fdc <__assert_fail@plt+0x30ac>
   14f48:	ldr	r3, [sp, #168]	; 0xa8
   14f4c:	str	r3, [sp, #16]
   14f50:	ldr	r3, [sp, #164]	; 0xa4
   14f54:	str	r3, [sp, #12]
   14f58:	ldr	r3, [sp, #160]	; 0xa0
   14f5c:	str	r3, [sp, #8]
   14f60:	ldr	r3, [sp, #156]	; 0x9c
   14f64:	str	r3, [sp, #4]
   14f68:	mov	r3, #5
   14f6c:	str	r3, [sp]
   14f70:	ldr	r3, [sp, #28]
   14f74:	ldr	r2, [sp, #52]	; 0x34
   14f78:	ldr	r1, [sp, #76]	; 0x4c
   14f7c:	ldr	r0, [sp, #36]	; 0x24
   14f80:	bl	13f7c <__assert_fail@plt+0x304c>
   14f84:	mov	fp, r0
   14f88:	b	1508c <__assert_fail@plt+0x415c>
   14f8c:	mov	sl, r7
   14f90:	ldr	r3, [sp, #72]	; 0x48
   14f94:	cmp	r3, #0
   14f98:	moveq	r2, #0
   14f9c:	andne	r2, r2, #1
   14fa0:	cmp	r2, #0
   14fa4:	beq	14fd4 <__assert_fail@plt+0x40a4>
   14fa8:	mov	r2, r3
   14fac:	ldrb	r3, [r3]
   14fb0:	cmp	r3, #0
   14fb4:	beq	14fd4 <__assert_fail@plt+0x40a4>
   14fb8:	ldr	r1, [sp, #36]	; 0x24
   14fbc:	cmp	sl, fp
   14fc0:	strbhi	r3, [r1, fp]
   14fc4:	add	fp, fp, #1
   14fc8:	ldrb	r3, [r2, #1]!
   14fcc:	cmp	r3, #0
   14fd0:	bne	14fbc <__assert_fail@plt+0x408c>
   14fd4:	cmp	sl, fp
   14fd8:	movhi	r3, #0
   14fdc:	ldrhi	r2, [sp, #36]	; 0x24
   14fe0:	strbhi	r3, [r2, fp]
   14fe4:	b	1508c <__assert_fail@plt+0x415c>
   14fe8:	mov	r8, sl
   14fec:	mov	sl, r7
   14ff0:	ldr	r3, [sp, #32]
   14ff4:	str	r3, [sp, #48]	; 0x30
   14ff8:	b	15034 <__assert_fail@plt+0x4104>
   14ffc:	mov	r8, sl
   15000:	mov	sl, r7
   15004:	b	15034 <__assert_fail@plt+0x4104>
   15008:	mov	r8, sl
   1500c:	mov	sl, r7
   15010:	b	15034 <__assert_fail@plt+0x4104>
   15014:	andeq	r8, r1, ip, asr #5
   15018:	ldrdeq	r8, [r1], -ip
   1501c:	ldrdeq	r8, [r1], -r0
   15020:	mov	r8, sl
   15024:	mov	sl, r7
   15028:	b	15034 <__assert_fail@plt+0x4104>
   1502c:	mov	r8, sl
   15030:	mov	sl, r7
   15034:	ldr	r3, [sp, #48]	; 0x30
   15038:	cmp	r8, #2
   1503c:	movne	r3, #0
   15040:	andeq	r3, r3, #1
   15044:	cmp	r3, #0
   15048:	movne	r8, #4
   1504c:	ldr	r3, [sp, #168]	; 0xa8
   15050:	str	r3, [sp, #16]
   15054:	ldr	r3, [sp, #164]	; 0xa4
   15058:	str	r3, [sp, #12]
   1505c:	mov	r3, #0
   15060:	str	r3, [sp, #8]
   15064:	ldr	r3, [sp, #156]	; 0x9c
   15068:	bic	r3, r3, #2
   1506c:	str	r3, [sp, #4]
   15070:	str	r8, [sp]
   15074:	ldr	r3, [sp, #28]
   15078:	ldr	r2, [sp, #52]	; 0x34
   1507c:	mov	r1, sl
   15080:	ldr	r0, [sp, #36]	; 0x24
   15084:	bl	13f7c <__assert_fail@plt+0x304c>
   15088:	mov	fp, r0
   1508c:	mov	r0, fp
   15090:	add	sp, sp, #116	; 0x74
   15094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15098:	mov	r8, sl
   1509c:	mov	sl, r7
   150a0:	b	15034 <__assert_fail@plt+0x4104>
   150a4:	mov	r8, sl
   150a8:	mov	sl, r7
   150ac:	b	15034 <__assert_fail@plt+0x4104>
   150b0:	mov	r8, sl
   150b4:	mov	sl, r7
   150b8:	b	15034 <__assert_fail@plt+0x4104>
   150bc:	mov	r8, sl
   150c0:	mov	sl, r7
   150c4:	b	1504c <__assert_fail@plt+0x411c>
   150c8:	mov	r3, #1
   150cc:	str	r3, [sp, #32]
   150d0:	str	r3, [sp, #48]	; 0x30
   150d4:	str	r3, [sp, #60]	; 0x3c
   150d8:	ldr	r3, [pc, #-196]	; 1501c <__assert_fail@plt+0x40ec>
   150dc:	str	r3, [sp, #72]	; 0x48
   150e0:	mov	fp, #0
   150e4:	mov	sl, #5
   150e8:	b	14038 <__assert_fail@plt+0x3108>
   150ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f0:	sub	sp, sp, #52	; 0x34
   150f4:	mov	r5, r0
   150f8:	str	r1, [sp, #24]
   150fc:	str	r2, [sp, #28]
   15100:	mov	r4, r3
   15104:	bl	10e4c <__errno_location@plt>
   15108:	str	r0, [sp, #32]
   1510c:	ldr	r3, [r0]
   15110:	str	r3, [sp, #36]	; 0x24
   15114:	ldr	r3, [pc, #396]	; 152a8 <__assert_fail@plt+0x4378>
   15118:	ldr	r6, [r3]
   1511c:	cmn	r5, #-2147483647	; 0x80000001
   15120:	movne	r3, #0
   15124:	moveq	r3, #1
   15128:	orrs	r3, r3, r5, lsr #31
   1512c:	bne	1526c <__assert_fail@plt+0x433c>
   15130:	ldr	r3, [pc, #368]	; 152a8 <__assert_fail@plt+0x4378>
   15134:	ldr	r2, [r3, #4]
   15138:	cmp	r5, r2
   1513c:	blt	151a4 <__assert_fail@plt+0x4274>
   15140:	str	r2, [sp, #44]	; 0x2c
   15144:	add	r3, r3, #8
   15148:	cmp	r6, r3
   1514c:	beq	15270 <__assert_fail@plt+0x4340>
   15150:	sub	r2, r5, r2
   15154:	mov	r3, #8
   15158:	str	r3, [sp]
   1515c:	mvn	r3, #-2147483648	; 0x80000000
   15160:	add	r2, r2, #1
   15164:	add	r1, sp, #44	; 0x2c
   15168:	mov	r0, r6
   1516c:	bl	15ff0 <__assert_fail@plt+0x50c0>
   15170:	mov	r6, r0
   15174:	ldr	r3, [pc, #300]	; 152a8 <__assert_fail@plt+0x4378>
   15178:	str	r0, [r3]
   1517c:	ldr	r7, [pc, #292]	; 152a8 <__assert_fail@plt+0x4378>
   15180:	ldr	r0, [r7, #4]
   15184:	ldr	r2, [sp, #44]	; 0x2c
   15188:	sub	r2, r2, r0
   1518c:	lsl	r2, r2, #3
   15190:	mov	r1, #0
   15194:	add	r0, r6, r0, lsl #3
   15198:	bl	10e64 <memset@plt>
   1519c:	ldr	r3, [sp, #44]	; 0x2c
   151a0:	str	r3, [r7, #4]
   151a4:	add	fp, r6, r5, lsl #3
   151a8:	ldr	r8, [r6, r5, lsl #3]
   151ac:	ldr	r7, [fp, #4]
   151b0:	ldr	r9, [r4, #4]
   151b4:	orr	r9, r9, #1
   151b8:	add	sl, r4, #8
   151bc:	ldr	r3, [r4, #44]	; 0x2c
   151c0:	str	r3, [sp, #16]
   151c4:	ldr	r3, [r4, #40]	; 0x28
   151c8:	str	r3, [sp, #12]
   151cc:	str	sl, [sp, #8]
   151d0:	str	r9, [sp, #4]
   151d4:	ldr	r3, [r4]
   151d8:	str	r3, [sp]
   151dc:	ldr	r3, [sp, #28]
   151e0:	ldr	r2, [sp, #24]
   151e4:	mov	r1, r8
   151e8:	mov	r0, r7
   151ec:	bl	13f7c <__assert_fail@plt+0x304c>
   151f0:	cmp	r8, r0
   151f4:	bhi	15254 <__assert_fail@plt+0x4324>
   151f8:	add	r8, r0, #1
   151fc:	str	r8, [r6, r5, lsl #3]
   15200:	ldr	r3, [pc, #164]	; 152ac <__assert_fail@plt+0x437c>
   15204:	cmp	r7, r3
   15208:	beq	15214 <__assert_fail@plt+0x42e4>
   1520c:	mov	r0, r7
   15210:	bl	13c5c <__assert_fail@plt+0x2d2c>
   15214:	mov	r0, r8
   15218:	bl	15e6c <__assert_fail@plt+0x4f3c>
   1521c:	mov	r7, r0
   15220:	str	r0, [fp, #4]
   15224:	ldr	r3, [r4, #44]	; 0x2c
   15228:	str	r3, [sp, #16]
   1522c:	ldr	r3, [r4, #40]	; 0x28
   15230:	str	r3, [sp, #12]
   15234:	str	sl, [sp, #8]
   15238:	str	r9, [sp, #4]
   1523c:	ldr	r3, [r4]
   15240:	str	r3, [sp]
   15244:	ldr	r3, [sp, #28]
   15248:	ldr	r2, [sp, #24]
   1524c:	mov	r1, r8
   15250:	bl	13f7c <__assert_fail@plt+0x304c>
   15254:	ldr	r3, [sp, #32]
   15258:	ldr	r2, [sp, #36]	; 0x24
   1525c:	str	r2, [r3]
   15260:	mov	r0, r7
   15264:	add	sp, sp, #52	; 0x34
   15268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1526c:	bl	10f24 <abort@plt>
   15270:	sub	r2, r5, r2
   15274:	mov	r3, #8
   15278:	str	r3, [sp]
   1527c:	mvn	r3, #-2147483648	; 0x80000000
   15280:	add	r2, r2, #1
   15284:	add	r1, sp, #44	; 0x2c
   15288:	mov	r0, #0
   1528c:	bl	15ff0 <__assert_fail@plt+0x50c0>
   15290:	mov	r6, r0
   15294:	ldr	r3, [pc, #12]	; 152a8 <__assert_fail@plt+0x4378>
   15298:	str	r0, [r3], #8
   1529c:	ldm	r3, {r0, r1}
   152a0:	stm	r6, {r0, r1}
   152a4:	b	1517c <__assert_fail@plt+0x424c>
   152a8:	strdeq	r9, [r2], -r4
   152ac:	andeq	r9, r2, r0, lsl #3
   152b0:	push	{r4, r5, r6, lr}
   152b4:	mov	r4, r0
   152b8:	bl	10e4c <__errno_location@plt>
   152bc:	mov	r5, r0
   152c0:	ldr	r6, [r0]
   152c4:	cmp	r4, #0
   152c8:	ldr	r3, [pc, #20]	; 152e4 <__assert_fail@plt+0x43b4>
   152cc:	moveq	r4, r3
   152d0:	mov	r1, #48	; 0x30
   152d4:	mov	r0, r4
   152d8:	bl	16358 <__assert_fail@plt+0x5428>
   152dc:	str	r6, [r5]
   152e0:	pop	{r4, r5, r6, pc}
   152e4:	andeq	r9, r2, r0, lsl #5
   152e8:	subs	r3, r0, #0
   152ec:	ldr	r2, [pc, #8]	; 152fc <__assert_fail@plt+0x43cc>
   152f0:	moveq	r3, r2
   152f4:	ldr	r0, [r3]
   152f8:	bx	lr
   152fc:	andeq	r9, r2, r0, lsl #5
   15300:	subs	r3, r0, #0
   15304:	ldr	r2, [pc, #8]	; 15314 <__assert_fail@plt+0x43e4>
   15308:	moveq	r3, r2
   1530c:	str	r1, [r3]
   15310:	bx	lr
   15314:	andeq	r9, r2, r0, lsl #5
   15318:	push	{lr}		; (str lr, [sp, #-4]!)
   1531c:	subs	r3, r0, #0
   15320:	ldr	r0, [pc, #44]	; 15354 <__assert_fail@plt+0x4424>
   15324:	moveq	r3, r0
   15328:	add	r3, r3, #8
   1532c:	lsr	lr, r1, #5
   15330:	and	r1, r1, #31
   15334:	ldr	ip, [r3, lr, lsl #2]
   15338:	lsr	r0, ip, r1
   1533c:	eor	r2, r2, r0
   15340:	and	r2, r2, #1
   15344:	eor	r1, ip, r2, lsl r1
   15348:	str	r1, [r3, lr, lsl #2]
   1534c:	and	r0, r0, #1
   15350:	pop	{pc}		; (ldr pc, [sp], #4)
   15354:	andeq	r9, r2, r0, lsl #5
   15358:	subs	r3, r0, #0
   1535c:	ldr	r2, [pc, #12]	; 15370 <__assert_fail@plt+0x4440>
   15360:	moveq	r3, r2
   15364:	ldr	r0, [r3, #4]
   15368:	str	r1, [r3, #4]
   1536c:	bx	lr
   15370:	andeq	r9, r2, r0, lsl #5
   15374:	subs	r3, r0, #0
   15378:	ldr	r0, [pc, #40]	; 153a8 <__assert_fail@plt+0x4478>
   1537c:	moveq	r3, r0
   15380:	mov	r0, #10
   15384:	str	r0, [r3]
   15388:	cmp	r2, #0
   1538c:	cmpne	r1, #0
   15390:	beq	153a0 <__assert_fail@plt+0x4470>
   15394:	str	r1, [r3, #40]	; 0x28
   15398:	str	r2, [r3, #44]	; 0x2c
   1539c:	bx	lr
   153a0:	push	{r4, lr}
   153a4:	bl	10f24 <abort@plt>
   153a8:	andeq	r9, r2, r0, lsl #5
   153ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153b0:	sub	sp, sp, #24
   153b4:	mov	r7, r0
   153b8:	mov	r8, r1
   153bc:	mov	r9, r2
   153c0:	mov	sl, r3
   153c4:	ldr	r4, [sp, #56]	; 0x38
   153c8:	cmp	r4, #0
   153cc:	ldr	r3, [pc, #84]	; 15428 <__assert_fail@plt+0x44f8>
   153d0:	moveq	r4, r3
   153d4:	bl	10e4c <__errno_location@plt>
   153d8:	mov	r5, r0
   153dc:	ldr	r6, [r0]
   153e0:	ldr	r3, [r4, #44]	; 0x2c
   153e4:	str	r3, [sp, #16]
   153e8:	ldr	r3, [r4, #40]	; 0x28
   153ec:	str	r3, [sp, #12]
   153f0:	add	r3, r4, #8
   153f4:	str	r3, [sp, #8]
   153f8:	ldr	r3, [r4, #4]
   153fc:	str	r3, [sp, #4]
   15400:	ldr	r3, [r4]
   15404:	str	r3, [sp]
   15408:	mov	r3, sl
   1540c:	mov	r2, r9
   15410:	mov	r1, r8
   15414:	mov	r0, r7
   15418:	bl	13f7c <__assert_fail@plt+0x304c>
   1541c:	str	r6, [r5]
   15420:	add	sp, sp, #24
   15424:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15428:	andeq	r9, r2, r0, lsl #5
   1542c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15430:	sub	sp, sp, #44	; 0x2c
   15434:	str	r0, [sp, #28]
   15438:	str	r1, [sp, #32]
   1543c:	mov	r6, r2
   15440:	subs	r4, r3, #0
   15444:	ldr	r3, [pc, #172]	; 154f8 <__assert_fail@plt+0x45c8>
   15448:	moveq	r4, r3
   1544c:	bl	10e4c <__errno_location@plt>
   15450:	mov	r7, r0
   15454:	ldr	fp, [r0]
   15458:	ldr	r5, [r4, #4]
   1545c:	cmp	r6, #0
   15460:	orreq	r5, r5, #1
   15464:	add	r9, r4, #8
   15468:	ldr	r3, [r4, #44]	; 0x2c
   1546c:	str	r3, [sp, #16]
   15470:	ldr	r3, [r4, #40]	; 0x28
   15474:	str	r3, [sp, #12]
   15478:	str	r9, [sp, #8]
   1547c:	str	r5, [sp, #4]
   15480:	ldr	r3, [r4]
   15484:	str	r3, [sp]
   15488:	ldr	r3, [sp, #32]
   1548c:	ldr	r2, [sp, #28]
   15490:	mov	r1, #0
   15494:	mov	r0, r1
   15498:	bl	13f7c <__assert_fail@plt+0x304c>
   1549c:	mov	sl, r0
   154a0:	add	r8, r0, #1
   154a4:	mov	r0, r8
   154a8:	bl	15e6c <__assert_fail@plt+0x4f3c>
   154ac:	str	r0, [sp, #36]	; 0x24
   154b0:	ldr	r3, [r4, #44]	; 0x2c
   154b4:	str	r3, [sp, #16]
   154b8:	ldr	r3, [r4, #40]	; 0x28
   154bc:	str	r3, [sp, #12]
   154c0:	str	r9, [sp, #8]
   154c4:	str	r5, [sp, #4]
   154c8:	ldr	r3, [r4]
   154cc:	str	r3, [sp]
   154d0:	ldr	r3, [sp, #32]
   154d4:	ldr	r2, [sp, #28]
   154d8:	mov	r1, r8
   154dc:	bl	13f7c <__assert_fail@plt+0x304c>
   154e0:	str	fp, [r7]
   154e4:	cmp	r6, #0
   154e8:	strne	sl, [r6]
   154ec:	ldr	r0, [sp, #36]	; 0x24
   154f0:	add	sp, sp, #44	; 0x2c
   154f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f8:	andeq	r9, r2, r0, lsl #5
   154fc:	push	{r4, lr}
   15500:	mov	r3, r2
   15504:	mov	r2, #0
   15508:	bl	1542c <__assert_fail@plt+0x44fc>
   1550c:	pop	{r4, pc}
   15510:	push	{r4, r5, r6, r7, r8, lr}
   15514:	ldr	r3, [pc, #140]	; 155a8 <__assert_fail@plt+0x4678>
   15518:	ldr	r7, [r3]
   1551c:	ldr	r3, [r3, #4]
   15520:	cmp	r3, #1
   15524:	ble	15550 <__assert_fail@plt+0x4620>
   15528:	mov	r5, r7
   1552c:	mov	r4, #1
   15530:	ldr	r6, [pc, #112]	; 155a8 <__assert_fail@plt+0x4678>
   15534:	ldr	r0, [r5, #12]
   15538:	bl	13c5c <__assert_fail@plt+0x2d2c>
   1553c:	add	r4, r4, #1
   15540:	add	r5, r5, #8
   15544:	ldr	r3, [r6, #4]
   15548:	cmp	r3, r4
   1554c:	bgt	15534 <__assert_fail@plt+0x4604>
   15550:	ldr	r0, [r7, #4]
   15554:	ldr	r3, [pc, #80]	; 155ac <__assert_fail@plt+0x467c>
   15558:	cmp	r0, r3
   1555c:	beq	15578 <__assert_fail@plt+0x4648>
   15560:	bl	13c5c <__assert_fail@plt+0x2d2c>
   15564:	ldr	r3, [pc, #60]	; 155a8 <__assert_fail@plt+0x4678>
   15568:	mov	r2, #256	; 0x100
   1556c:	str	r2, [r3, #8]
   15570:	ldr	r2, [pc, #52]	; 155ac <__assert_fail@plt+0x467c>
   15574:	str	r2, [r3, #12]
   15578:	ldr	r3, [pc, #48]	; 155b0 <__assert_fail@plt+0x4680>
   1557c:	cmp	r7, r3
   15580:	beq	15598 <__assert_fail@plt+0x4668>
   15584:	mov	r0, r7
   15588:	bl	13c5c <__assert_fail@plt+0x2d2c>
   1558c:	ldr	r3, [pc, #20]	; 155a8 <__assert_fail@plt+0x4678>
   15590:	add	r2, r3, #8
   15594:	str	r2, [r3]
   15598:	mov	r2, #1
   1559c:	ldr	r3, [pc, #4]	; 155a8 <__assert_fail@plt+0x4678>
   155a0:	str	r2, [r3, #4]
   155a4:	pop	{r4, r5, r6, r7, r8, pc}
   155a8:	strdeq	r9, [r2], -r4
   155ac:	andeq	r9, r2, r0, lsl #3
   155b0:	strdeq	r9, [r2], -ip
   155b4:	push	{r4, lr}
   155b8:	ldr	r3, [pc, #8]	; 155c8 <__assert_fail@plt+0x4698>
   155bc:	mvn	r2, #0
   155c0:	bl	150ec <__assert_fail@plt+0x41bc>
   155c4:	pop	{r4, pc}
   155c8:	andeq	r9, r2, r0, lsl #5
   155cc:	push	{r4, lr}
   155d0:	ldr	r3, [pc, #4]	; 155dc <__assert_fail@plt+0x46ac>
   155d4:	bl	150ec <__assert_fail@plt+0x41bc>
   155d8:	pop	{r4, pc}
   155dc:	andeq	r9, r2, r0, lsl #5
   155e0:	push	{r4, lr}
   155e4:	mov	r1, r0
   155e8:	mov	r0, #0
   155ec:	bl	155b4 <__assert_fail@plt+0x4684>
   155f0:	pop	{r4, pc}
   155f4:	push	{r4, lr}
   155f8:	mov	r2, r1
   155fc:	mov	r1, r0
   15600:	mov	r0, #0
   15604:	bl	155cc <__assert_fail@plt+0x469c>
   15608:	pop	{r4, pc}
   1560c:	push	{r4, r5, lr}
   15610:	sub	sp, sp, #52	; 0x34
   15614:	mov	r4, r0
   15618:	mov	r5, r2
   1561c:	mov	r0, sp
   15620:	bl	13e14 <__assert_fail@plt+0x2ee4>
   15624:	mov	r3, sp
   15628:	mvn	r2, #0
   1562c:	mov	r1, r5
   15630:	mov	r0, r4
   15634:	bl	150ec <__assert_fail@plt+0x41bc>
   15638:	add	sp, sp, #52	; 0x34
   1563c:	pop	{r4, r5, pc}
   15640:	push	{r4, r5, r6, lr}
   15644:	sub	sp, sp, #48	; 0x30
   15648:	mov	r4, r0
   1564c:	mov	r5, r2
   15650:	mov	r6, r3
   15654:	mov	r0, sp
   15658:	bl	13e14 <__assert_fail@plt+0x2ee4>
   1565c:	mov	r3, sp
   15660:	mov	r2, r6
   15664:	mov	r1, r5
   15668:	mov	r0, r4
   1566c:	bl	150ec <__assert_fail@plt+0x41bc>
   15670:	add	sp, sp, #48	; 0x30
   15674:	pop	{r4, r5, r6, pc}
   15678:	push	{r4, lr}
   1567c:	mov	r2, r1
   15680:	mov	r1, r0
   15684:	mov	r0, #0
   15688:	bl	1560c <__assert_fail@plt+0x46dc>
   1568c:	pop	{r4, pc}
   15690:	push	{r4, lr}
   15694:	mov	r3, r2
   15698:	mov	r2, r1
   1569c:	mov	r1, r0
   156a0:	mov	r0, #0
   156a4:	bl	15640 <__assert_fail@plt+0x4710>
   156a8:	pop	{r4, pc}
   156ac:	push	{r4, r5, r6, lr}
   156b0:	sub	sp, sp, #48	; 0x30
   156b4:	mov	r4, r0
   156b8:	mov	r5, r1
   156bc:	mov	r6, r2
   156c0:	mov	ip, sp
   156c4:	ldr	lr, [pc, #64]	; 1570c <__assert_fail@plt+0x47dc>
   156c8:	ldm	lr!, {r0, r1, r2, r3}
   156cc:	stmia	ip!, {r0, r1, r2, r3}
   156d0:	ldm	lr!, {r0, r1, r2, r3}
   156d4:	stmia	ip!, {r0, r1, r2, r3}
   156d8:	ldm	lr, {r0, r1, r2, r3}
   156dc:	stm	ip, {r0, r1, r2, r3}
   156e0:	mov	r2, #1
   156e4:	mov	r1, r6
   156e8:	mov	r0, sp
   156ec:	bl	15318 <__assert_fail@plt+0x43e8>
   156f0:	mov	r3, sp
   156f4:	mov	r2, r5
   156f8:	mov	r1, r4
   156fc:	mov	r0, #0
   15700:	bl	150ec <__assert_fail@plt+0x41bc>
   15704:	add	sp, sp, #48	; 0x30
   15708:	pop	{r4, r5, r6, pc}
   1570c:	andeq	r9, r2, r0, lsl #5
   15710:	push	{r4, lr}
   15714:	mov	r2, r1
   15718:	mvn	r1, #0
   1571c:	bl	156ac <__assert_fail@plt+0x477c>
   15720:	pop	{r4, pc}
   15724:	push	{r4, lr}
   15728:	mov	r1, #58	; 0x3a
   1572c:	bl	15710 <__assert_fail@plt+0x47e0>
   15730:	pop	{r4, pc}
   15734:	push	{r4, lr}
   15738:	mov	r2, #58	; 0x3a
   1573c:	bl	156ac <__assert_fail@plt+0x477c>
   15740:	pop	{r4, pc}
   15744:	push	{r4, r5, lr}
   15748:	sub	sp, sp, #100	; 0x64
   1574c:	mov	r4, r0
   15750:	mov	r5, r2
   15754:	mov	r0, sp
   15758:	bl	13e14 <__assert_fail@plt+0x2ee4>
   1575c:	add	lr, sp, #48	; 0x30
   15760:	mov	ip, sp
   15764:	ldm	ip!, {r0, r1, r2, r3}
   15768:	stmia	lr!, {r0, r1, r2, r3}
   1576c:	ldm	ip!, {r0, r1, r2, r3}
   15770:	stmia	lr!, {r0, r1, r2, r3}
   15774:	ldm	ip, {r0, r1, r2, r3}
   15778:	stm	lr, {r0, r1, r2, r3}
   1577c:	mov	r2, #1
   15780:	mov	r1, #58	; 0x3a
   15784:	add	r0, sp, #48	; 0x30
   15788:	bl	15318 <__assert_fail@plt+0x43e8>
   1578c:	add	r3, sp, #48	; 0x30
   15790:	mvn	r2, #0
   15794:	mov	r1, r5
   15798:	mov	r0, r4
   1579c:	bl	150ec <__assert_fail@plt+0x41bc>
   157a0:	add	sp, sp, #100	; 0x64
   157a4:	pop	{r4, r5, pc}
   157a8:	push	{r4, r5, r6, r7, lr}
   157ac:	sub	sp, sp, #52	; 0x34
   157b0:	mov	r4, r0
   157b4:	mov	r6, r1
   157b8:	mov	r7, r2
   157bc:	mov	r5, r3
   157c0:	mov	ip, sp
   157c4:	ldr	lr, [pc, #64]	; 1580c <__assert_fail@plt+0x48dc>
   157c8:	ldm	lr!, {r0, r1, r2, r3}
   157cc:	stmia	ip!, {r0, r1, r2, r3}
   157d0:	ldm	lr!, {r0, r1, r2, r3}
   157d4:	stmia	ip!, {r0, r1, r2, r3}
   157d8:	ldm	lr, {r0, r1, r2, r3}
   157dc:	stm	ip, {r0, r1, r2, r3}
   157e0:	mov	r2, r7
   157e4:	mov	r1, r6
   157e8:	mov	r0, sp
   157ec:	bl	15374 <__assert_fail@plt+0x4444>
   157f0:	mov	r3, sp
   157f4:	ldr	r2, [sp, #72]	; 0x48
   157f8:	mov	r1, r5
   157fc:	mov	r0, r4
   15800:	bl	150ec <__assert_fail@plt+0x41bc>
   15804:	add	sp, sp, #52	; 0x34
   15808:	pop	{r4, r5, r6, r7, pc}
   1580c:	andeq	r9, r2, r0, lsl #5
   15810:	push	{lr}		; (str lr, [sp, #-4]!)
   15814:	sub	sp, sp, #12
   15818:	mvn	ip, #0
   1581c:	str	ip, [sp]
   15820:	bl	157a8 <__assert_fail@plt+0x4878>
   15824:	add	sp, sp, #12
   15828:	pop	{pc}		; (ldr pc, [sp], #4)
   1582c:	push	{r4, lr}
   15830:	mov	r3, r2
   15834:	mov	r2, r1
   15838:	mov	r1, r0
   1583c:	mov	r0, #0
   15840:	bl	15810 <__assert_fail@plt+0x48e0>
   15844:	pop	{r4, pc}
   15848:	push	{lr}		; (str lr, [sp, #-4]!)
   1584c:	sub	sp, sp, #12
   15850:	str	r3, [sp]
   15854:	mov	r3, r2
   15858:	mov	r2, r1
   1585c:	mov	r1, r0
   15860:	mov	r0, #0
   15864:	bl	157a8 <__assert_fail@plt+0x4878>
   15868:	add	sp, sp, #12
   1586c:	pop	{pc}		; (ldr pc, [sp], #4)
   15870:	push	{r4, lr}
   15874:	ldr	r3, [pc, #4]	; 15880 <__assert_fail@plt+0x4950>
   15878:	bl	150ec <__assert_fail@plt+0x41bc>
   1587c:	pop	{r4, pc}
   15880:	andeq	r9, r2, r4, lsl #2
   15884:	push	{r4, lr}
   15888:	mov	r2, r1
   1588c:	mov	r1, r0
   15890:	mov	r0, #0
   15894:	bl	15870 <__assert_fail@plt+0x4940>
   15898:	pop	{r4, pc}
   1589c:	push	{r4, lr}
   158a0:	mvn	r2, #0
   158a4:	bl	15870 <__assert_fail@plt+0x4940>
   158a8:	pop	{r4, pc}
   158ac:	push	{r4, lr}
   158b0:	mov	r1, r0
   158b4:	mov	r0, #0
   158b8:	bl	1589c <__assert_fail@plt+0x496c>
   158bc:	pop	{r4, pc}
   158c0:	push	{r4, r5, r6, lr}
   158c4:	sub	sp, sp, #32
   158c8:	mov	r4, r0
   158cc:	ldr	r5, [sp, #48]	; 0x30
   158d0:	ldr	r6, [sp, #52]	; 0x34
   158d4:	cmp	r1, #0
   158d8:	beq	15990 <__assert_fail@plt+0x4a60>
   158dc:	str	r3, [sp, #4]
   158e0:	str	r2, [sp]
   158e4:	mov	r3, r1
   158e8:	ldr	r2, [pc, #940]	; 15c9c <__assert_fail@plt+0x4d6c>
   158ec:	mov	r1, #1
   158f0:	bl	10e88 <__fprintf_chk@plt>
   158f4:	mov	r2, #5
   158f8:	ldr	r1, [pc, #928]	; 15ca0 <__assert_fail@plt+0x4d70>
   158fc:	mov	r0, #0
   15900:	bl	10d68 <dcgettext@plt>
   15904:	ldr	r3, [pc, #920]	; 15ca4 <__assert_fail@plt+0x4d74>
   15908:	str	r3, [sp]
   1590c:	mov	r3, r0
   15910:	ldr	r2, [pc, #912]	; 15ca8 <__assert_fail@plt+0x4d78>
   15914:	mov	r1, #1
   15918:	mov	r0, r4
   1591c:	bl	10e88 <__fprintf_chk@plt>
   15920:	mov	r1, r4
   15924:	mov	r0, #10
   15928:	bl	10d5c <fputc_unlocked@plt>
   1592c:	mov	r2, #5
   15930:	ldr	r1, [pc, #884]	; 15cac <__assert_fail@plt+0x4d7c>
   15934:	mov	r0, #0
   15938:	bl	10d68 <dcgettext@plt>
   1593c:	ldr	r3, [pc, #876]	; 15cb0 <__assert_fail@plt+0x4d80>
   15940:	mov	r2, r0
   15944:	mov	r1, #1
   15948:	mov	r0, r4
   1594c:	bl	10e88 <__fprintf_chk@plt>
   15950:	mov	r1, r4
   15954:	mov	r0, #10
   15958:	bl	10d5c <fputc_unlocked@plt>
   1595c:	cmp	r6, #9
   15960:	ldrls	pc, [pc, r6, lsl #2]
   15964:	b	15c34 <__assert_fail@plt+0x4d04>
   15968:	andeq	r5, r1, ip, asr #19
   1596c:	andeq	r5, r1, r8, lsr #19
   15970:	ldrdeq	r5, [r1], -r4
   15974:	andeq	r5, r1, r4, lsl #20
   15978:	andeq	r5, r1, ip, lsr sl
   1597c:	andeq	r5, r1, ip, ror sl
   15980:	andeq	r5, r1, r4, asr #21
   15984:	andeq	r5, r1, r4, lsl fp
   15988:	andeq	r5, r1, ip, ror #22
   1598c:	andeq	r5, r1, ip, asr #23
   15990:	str	r3, [sp]
   15994:	mov	r3, r2
   15998:	ldr	r2, [pc, #788]	; 15cb4 <__assert_fail@plt+0x4d84>
   1599c:	mov	r1, #1
   159a0:	bl	10e88 <__fprintf_chk@plt>
   159a4:	b	158f4 <__assert_fail@plt+0x49c4>
   159a8:	mov	r2, #5
   159ac:	ldr	r1, [pc, #772]	; 15cb8 <__assert_fail@plt+0x4d88>
   159b0:	mov	r0, #0
   159b4:	bl	10d68 <dcgettext@plt>
   159b8:	ldr	r3, [r5]
   159bc:	mov	r2, r0
   159c0:	mov	r1, #1
   159c4:	mov	r0, r4
   159c8:	bl	10e88 <__fprintf_chk@plt>
   159cc:	add	sp, sp, #32
   159d0:	pop	{r4, r5, r6, pc}
   159d4:	mov	r2, #5
   159d8:	ldr	r1, [pc, #732]	; 15cbc <__assert_fail@plt+0x4d8c>
   159dc:	mov	r0, #0
   159e0:	bl	10d68 <dcgettext@plt>
   159e4:	ldr	r3, [r5]
   159e8:	ldr	r2, [r5, #4]
   159ec:	str	r2, [sp]
   159f0:	mov	r2, r0
   159f4:	mov	r1, #1
   159f8:	mov	r0, r4
   159fc:	bl	10e88 <__fprintf_chk@plt>
   15a00:	b	159cc <__assert_fail@plt+0x4a9c>
   15a04:	mov	r2, #5
   15a08:	ldr	r1, [pc, #688]	; 15cc0 <__assert_fail@plt+0x4d90>
   15a0c:	mov	r0, #0
   15a10:	bl	10d68 <dcgettext@plt>
   15a14:	ldr	r3, [r5]
   15a18:	ldr	r2, [r5, #8]
   15a1c:	str	r2, [sp, #4]
   15a20:	ldr	r2, [r5, #4]
   15a24:	str	r2, [sp]
   15a28:	mov	r2, r0
   15a2c:	mov	r1, #1
   15a30:	mov	r0, r4
   15a34:	bl	10e88 <__fprintf_chk@plt>
   15a38:	b	159cc <__assert_fail@plt+0x4a9c>
   15a3c:	mov	r2, #5
   15a40:	ldr	r1, [pc, #636]	; 15cc4 <__assert_fail@plt+0x4d94>
   15a44:	mov	r0, #0
   15a48:	bl	10d68 <dcgettext@plt>
   15a4c:	ldr	r3, [r5]
   15a50:	ldr	r2, [r5, #12]
   15a54:	str	r2, [sp, #8]
   15a58:	ldr	r2, [r5, #8]
   15a5c:	str	r2, [sp, #4]
   15a60:	ldr	r2, [r5, #4]
   15a64:	str	r2, [sp]
   15a68:	mov	r2, r0
   15a6c:	mov	r1, #1
   15a70:	mov	r0, r4
   15a74:	bl	10e88 <__fprintf_chk@plt>
   15a78:	b	159cc <__assert_fail@plt+0x4a9c>
   15a7c:	mov	r2, #5
   15a80:	ldr	r1, [pc, #576]	; 15cc8 <__assert_fail@plt+0x4d98>
   15a84:	mov	r0, #0
   15a88:	bl	10d68 <dcgettext@plt>
   15a8c:	ldr	r3, [r5]
   15a90:	ldr	r2, [r5, #16]
   15a94:	str	r2, [sp, #12]
   15a98:	ldr	r2, [r5, #12]
   15a9c:	str	r2, [sp, #8]
   15aa0:	ldr	r2, [r5, #8]
   15aa4:	str	r2, [sp, #4]
   15aa8:	ldr	r2, [r5, #4]
   15aac:	str	r2, [sp]
   15ab0:	mov	r2, r0
   15ab4:	mov	r1, #1
   15ab8:	mov	r0, r4
   15abc:	bl	10e88 <__fprintf_chk@plt>
   15ac0:	b	159cc <__assert_fail@plt+0x4a9c>
   15ac4:	mov	r2, #5
   15ac8:	ldr	r1, [pc, #508]	; 15ccc <__assert_fail@plt+0x4d9c>
   15acc:	mov	r0, #0
   15ad0:	bl	10d68 <dcgettext@plt>
   15ad4:	ldr	r3, [r5]
   15ad8:	ldr	r2, [r5, #20]
   15adc:	str	r2, [sp, #16]
   15ae0:	ldr	r2, [r5, #16]
   15ae4:	str	r2, [sp, #12]
   15ae8:	ldr	r2, [r5, #12]
   15aec:	str	r2, [sp, #8]
   15af0:	ldr	r2, [r5, #8]
   15af4:	str	r2, [sp, #4]
   15af8:	ldr	r2, [r5, #4]
   15afc:	str	r2, [sp]
   15b00:	mov	r2, r0
   15b04:	mov	r1, #1
   15b08:	mov	r0, r4
   15b0c:	bl	10e88 <__fprintf_chk@plt>
   15b10:	b	159cc <__assert_fail@plt+0x4a9c>
   15b14:	mov	r2, #5
   15b18:	ldr	r1, [pc, #432]	; 15cd0 <__assert_fail@plt+0x4da0>
   15b1c:	mov	r0, #0
   15b20:	bl	10d68 <dcgettext@plt>
   15b24:	ldr	r3, [r5]
   15b28:	ldr	r2, [r5, #24]
   15b2c:	str	r2, [sp, #20]
   15b30:	ldr	r2, [r5, #20]
   15b34:	str	r2, [sp, #16]
   15b38:	ldr	r2, [r5, #16]
   15b3c:	str	r2, [sp, #12]
   15b40:	ldr	r2, [r5, #12]
   15b44:	str	r2, [sp, #8]
   15b48:	ldr	r2, [r5, #8]
   15b4c:	str	r2, [sp, #4]
   15b50:	ldr	r2, [r5, #4]
   15b54:	str	r2, [sp]
   15b58:	mov	r2, r0
   15b5c:	mov	r1, #1
   15b60:	mov	r0, r4
   15b64:	bl	10e88 <__fprintf_chk@plt>
   15b68:	b	159cc <__assert_fail@plt+0x4a9c>
   15b6c:	mov	r2, #5
   15b70:	ldr	r1, [pc, #348]	; 15cd4 <__assert_fail@plt+0x4da4>
   15b74:	mov	r0, #0
   15b78:	bl	10d68 <dcgettext@plt>
   15b7c:	ldr	r3, [r5]
   15b80:	ldr	r2, [r5, #28]
   15b84:	str	r2, [sp, #24]
   15b88:	ldr	r2, [r5, #24]
   15b8c:	str	r2, [sp, #20]
   15b90:	ldr	r2, [r5, #20]
   15b94:	str	r2, [sp, #16]
   15b98:	ldr	r2, [r5, #16]
   15b9c:	str	r2, [sp, #12]
   15ba0:	ldr	r2, [r5, #12]
   15ba4:	str	r2, [sp, #8]
   15ba8:	ldr	r2, [r5, #8]
   15bac:	str	r2, [sp, #4]
   15bb0:	ldr	r2, [r5, #4]
   15bb4:	str	r2, [sp]
   15bb8:	mov	r2, r0
   15bbc:	mov	r1, #1
   15bc0:	mov	r0, r4
   15bc4:	bl	10e88 <__fprintf_chk@plt>
   15bc8:	b	159cc <__assert_fail@plt+0x4a9c>
   15bcc:	mov	r2, #5
   15bd0:	ldr	r1, [pc, #256]	; 15cd8 <__assert_fail@plt+0x4da8>
   15bd4:	mov	r0, #0
   15bd8:	bl	10d68 <dcgettext@plt>
   15bdc:	ldr	r3, [r5]
   15be0:	ldr	r2, [r5, #32]
   15be4:	str	r2, [sp, #28]
   15be8:	ldr	r2, [r5, #28]
   15bec:	str	r2, [sp, #24]
   15bf0:	ldr	r2, [r5, #24]
   15bf4:	str	r2, [sp, #20]
   15bf8:	ldr	r2, [r5, #20]
   15bfc:	str	r2, [sp, #16]
   15c00:	ldr	r2, [r5, #16]
   15c04:	str	r2, [sp, #12]
   15c08:	ldr	r2, [r5, #12]
   15c0c:	str	r2, [sp, #8]
   15c10:	ldr	r2, [r5, #8]
   15c14:	str	r2, [sp, #4]
   15c18:	ldr	r2, [r5, #4]
   15c1c:	str	r2, [sp]
   15c20:	mov	r2, r0
   15c24:	mov	r1, #1
   15c28:	mov	r0, r4
   15c2c:	bl	10e88 <__fprintf_chk@plt>
   15c30:	b	159cc <__assert_fail@plt+0x4a9c>
   15c34:	mov	r2, #5
   15c38:	ldr	r1, [pc, #156]	; 15cdc <__assert_fail@plt+0x4dac>
   15c3c:	mov	r0, #0
   15c40:	bl	10d68 <dcgettext@plt>
   15c44:	ldr	r3, [r5]
   15c48:	ldr	r2, [r5, #32]
   15c4c:	str	r2, [sp, #28]
   15c50:	ldr	r2, [r5, #28]
   15c54:	str	r2, [sp, #24]
   15c58:	ldr	r2, [r5, #24]
   15c5c:	str	r2, [sp, #20]
   15c60:	ldr	r2, [r5, #20]
   15c64:	str	r2, [sp, #16]
   15c68:	ldr	r2, [r5, #16]
   15c6c:	str	r2, [sp, #12]
   15c70:	ldr	r2, [r5, #12]
   15c74:	str	r2, [sp, #8]
   15c78:	ldr	r2, [r5, #8]
   15c7c:	str	r2, [sp, #4]
   15c80:	ldr	r2, [r5, #4]
   15c84:	str	r2, [sp]
   15c88:	mov	r2, r0
   15c8c:	mov	r1, #1
   15c90:	mov	r0, r4
   15c94:	bl	10e88 <__fprintf_chk@plt>
   15c98:	b	159cc <__assert_fail@plt+0x4a9c>
   15c9c:	andeq	r8, r1, r4, asr #6
   15ca0:	andeq	r8, r1, r8, asr r3
   15ca4:	andeq	r0, r0, r6, ror #15
   15ca8:	andeq	r8, r1, r0, lsr r6
   15cac:	andeq	r8, r1, ip, asr r3
   15cb0:	andeq	r8, r1, r8, lsl #8
   15cb4:	andeq	r8, r1, r0, asr r3
   15cb8:	andeq	r8, r1, ip, lsr #8
   15cbc:	andeq	r8, r1, ip, lsr r4
   15cc0:	andeq	r8, r1, r4, asr r4
   15cc4:	andeq	r8, r1, r0, ror r4
   15cc8:	muleq	r1, r0, r4
   15ccc:			; <UNDEFINED> instruction: 0x000184b4
   15cd0:	ldrdeq	r8, [r1], -ip
   15cd4:	andeq	r8, r1, r8, lsl #10
   15cd8:	andeq	r8, r1, r8, lsr r5
   15cdc:	andeq	r8, r1, ip, ror #10
   15ce0:	push	{r4, r5, lr}
   15ce4:	sub	sp, sp, #12
   15ce8:	ldr	r5, [sp, #24]
   15cec:	ldr	ip, [r5]
   15cf0:	cmp	ip, #0
   15cf4:	beq	15d24 <__assert_fail@plt+0x4df4>
   15cf8:	mov	lr, r5
   15cfc:	mov	ip, #0
   15d00:	add	ip, ip, #1
   15d04:	ldr	r4, [lr, #4]!
   15d08:	cmp	r4, #0
   15d0c:	bne	15d00 <__assert_fail@plt+0x4dd0>
   15d10:	str	ip, [sp, #4]
   15d14:	str	r5, [sp]
   15d18:	bl	158c0 <__assert_fail@plt+0x4990>
   15d1c:	add	sp, sp, #12
   15d20:	pop	{r4, r5, pc}
   15d24:	mov	ip, #0
   15d28:	b	15d10 <__assert_fail@plt+0x4de0>
   15d2c:	push	{r4, r5, lr}
   15d30:	sub	sp, sp, #52	; 0x34
   15d34:	ldr	r4, [sp, #64]	; 0x40
   15d38:	sub	r4, r4, #4
   15d3c:	add	r5, sp, #4
   15d40:	mov	ip, #0
   15d44:	ldr	lr, [r4, #4]!
   15d48:	str	lr, [r5, #4]!
   15d4c:	cmp	lr, #0
   15d50:	beq	15d60 <__assert_fail@plt+0x4e30>
   15d54:	add	ip, ip, #1
   15d58:	cmp	ip, #10
   15d5c:	bne	15d44 <__assert_fail@plt+0x4e14>
   15d60:	str	ip, [sp, #4]
   15d64:	add	ip, sp, #8
   15d68:	str	ip, [sp]
   15d6c:	bl	158c0 <__assert_fail@plt+0x4990>
   15d70:	add	sp, sp, #52	; 0x34
   15d74:	pop	{r4, r5, pc}
   15d78:	push	{r3}		; (str r3, [sp, #-4]!)
   15d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   15d80:	sub	sp, sp, #16
   15d84:	add	r3, sp, #24
   15d88:	str	r3, [sp, #12]
   15d8c:	str	r3, [sp]
   15d90:	ldr	r3, [sp, #20]
   15d94:	bl	15d2c <__assert_fail@plt+0x4dfc>
   15d98:	add	sp, sp, #16
   15d9c:	pop	{lr}		; (ldr lr, [sp], #4)
   15da0:	add	sp, sp, #4
   15da4:	bx	lr
   15da8:	push	{r4, lr}
   15dac:	ldr	r3, [pc, #112]	; 15e24 <__assert_fail@plt+0x4ef4>
   15db0:	ldr	r1, [r3]
   15db4:	mov	r0, #10
   15db8:	bl	10d5c <fputc_unlocked@plt>
   15dbc:	mov	r2, #5
   15dc0:	ldr	r1, [pc, #96]	; 15e28 <__assert_fail@plt+0x4ef8>
   15dc4:	mov	r0, #0
   15dc8:	bl	10d68 <dcgettext@plt>
   15dcc:	ldr	r2, [pc, #88]	; 15e2c <__assert_fail@plt+0x4efc>
   15dd0:	mov	r1, r0
   15dd4:	mov	r0, #1
   15dd8:	bl	10e70 <__printf_chk@plt>
   15ddc:	mov	r2, #5
   15de0:	ldr	r1, [pc, #72]	; 15e30 <__assert_fail@plt+0x4f00>
   15de4:	mov	r0, #0
   15de8:	bl	10d68 <dcgettext@plt>
   15dec:	ldr	r3, [pc, #64]	; 15e34 <__assert_fail@plt+0x4f04>
   15df0:	ldr	r2, [pc, #64]	; 15e38 <__assert_fail@plt+0x4f08>
   15df4:	mov	r1, r0
   15df8:	mov	r0, #1
   15dfc:	bl	10e70 <__printf_chk@plt>
   15e00:	mov	r2, #5
   15e04:	ldr	r1, [pc, #48]	; 15e3c <__assert_fail@plt+0x4f0c>
   15e08:	mov	r0, #0
   15e0c:	bl	10d68 <dcgettext@plt>
   15e10:	ldr	r2, [pc, #40]	; 15e40 <__assert_fail@plt+0x4f10>
   15e14:	mov	r1, r0
   15e18:	mov	r0, #1
   15e1c:	bl	10e70 <__printf_chk@plt>
   15e20:	pop	{r4, pc}
   15e24:	andeq	r9, r2, r4, asr r1
   15e28:	andeq	r8, r1, r8, lsr #11
   15e2c:			; <UNDEFINED> instruction: 0x000185bc
   15e30:	ldrdeq	r8, [r1], -r4
   15e34:	andeq	r7, r1, ip, asr #26
   15e38:	andeq	r7, r1, r4, ror sp
   15e3c:	andeq	r8, r1, r8, ror #11
   15e40:	andeq	r8, r1, r0, lsl r6
   15e44:	push	{r4, lr}
   15e48:	bl	16a80 <__assert_fail@plt+0x5b50>
   15e4c:	cmp	r0, #0
   15e50:	popne	{r4, pc}
   15e54:	bl	163e8 <__assert_fail@plt+0x54b8>
   15e58:	push	{r4, lr}
   15e5c:	bl	16a80 <__assert_fail@plt+0x5b50>
   15e60:	cmp	r0, #0
   15e64:	popne	{r4, pc}
   15e68:	bl	163e8 <__assert_fail@plt+0x54b8>
   15e6c:	push	{r4, lr}
   15e70:	bl	15e44 <__assert_fail@plt+0x4f14>
   15e74:	pop	{r4, pc}
   15e78:	push	{r4, r5, r6, lr}
   15e7c:	mov	r5, r0
   15e80:	mov	r4, r1
   15e84:	bl	16ab0 <__assert_fail@plt+0x5b80>
   15e88:	cmp	r0, #0
   15e8c:	popne	{r4, r5, r6, pc}
   15e90:	adds	r4, r4, #0
   15e94:	movne	r4, #1
   15e98:	cmp	r5, #0
   15e9c:	orreq	r4, r4, #1
   15ea0:	cmp	r4, #0
   15ea4:	popeq	{r4, r5, r6, pc}
   15ea8:	bl	163e8 <__assert_fail@plt+0x54b8>
   15eac:	push	{r4, lr}
   15eb0:	cmp	r1, #0
   15eb4:	orreq	r1, r1, #1
   15eb8:	bl	16ab0 <__assert_fail@plt+0x5b80>
   15ebc:	cmp	r0, #0
   15ec0:	popne	{r4, pc}
   15ec4:	bl	163e8 <__assert_fail@plt+0x54b8>
   15ec8:	push	{r4, r5, r6, lr}
   15ecc:	mov	r6, r0
   15ed0:	mov	r5, r1
   15ed4:	mov	r4, r2
   15ed8:	bl	16c04 <__assert_fail@plt+0x5cd4>
   15edc:	cmp	r0, #0
   15ee0:	popne	{r4, r5, r6, pc}
   15ee4:	cmp	r6, #0
   15ee8:	beq	15ef8 <__assert_fail@plt+0x4fc8>
   15eec:	cmp	r5, #0
   15ef0:	cmpne	r4, #0
   15ef4:	popeq	{r4, r5, r6, pc}
   15ef8:	bl	163e8 <__assert_fail@plt+0x54b8>
   15efc:	push	{r4, lr}
   15f00:	bl	15ec8 <__assert_fail@plt+0x4f98>
   15f04:	pop	{r4, pc}
   15f08:	push	{r4, lr}
   15f0c:	mov	ip, r1
   15f10:	mov	r3, r2
   15f14:	cmp	r2, #0
   15f18:	cmpne	r1, #0
   15f1c:	moveq	r3, #1
   15f20:	moveq	ip, r3
   15f24:	mov	r2, r3
   15f28:	mov	r1, ip
   15f2c:	bl	16c04 <__assert_fail@plt+0x5cd4>
   15f30:	cmp	r0, #0
   15f34:	popne	{r4, pc}
   15f38:	bl	163e8 <__assert_fail@plt+0x54b8>
   15f3c:	push	{r4, lr}
   15f40:	mov	r2, r1
   15f44:	mov	r1, r0
   15f48:	mov	r0, #0
   15f4c:	bl	15ec8 <__assert_fail@plt+0x4f98>
   15f50:	pop	{r4, pc}
   15f54:	push	{r4, lr}
   15f58:	mov	r2, r1
   15f5c:	mov	r1, r0
   15f60:	mov	r0, #0
   15f64:	bl	15f08 <__assert_fail@plt+0x4fd8>
   15f68:	pop	{r4, pc}
   15f6c:	push	{r4, r5, r6, r7, r8, lr}
   15f70:	mov	r5, r1
   15f74:	mov	r6, r2
   15f78:	ldr	r4, [r1]
   15f7c:	subs	r7, r0, #0
   15f80:	beq	15f9c <__assert_fail@plt+0x506c>
   15f84:	lsr	r2, r4, #1
   15f88:	add	r3, r2, #1
   15f8c:	mvn	r3, r3
   15f90:	cmp	r4, r3
   15f94:	bls	15fc0 <__assert_fail@plt+0x5090>
   15f98:	bl	163e8 <__assert_fail@plt+0x54b8>
   15f9c:	cmp	r4, #0
   15fa0:	bne	15fc8 <__assert_fail@plt+0x5098>
   15fa4:	mov	r1, r2
   15fa8:	mov	r0, #64	; 0x40
   15fac:	bl	16d58 <__assert_fail@plt+0x5e28>
   15fb0:	cmp	r0, #0
   15fb4:	movne	r4, r0
   15fb8:	addeq	r4, r0, #1
   15fbc:	b	15fc8 <__assert_fail@plt+0x5098>
   15fc0:	add	r4, r4, #1
   15fc4:	add	r4, r4, r2
   15fc8:	mov	r2, r6
   15fcc:	mov	r1, r4
   15fd0:	mov	r0, r7
   15fd4:	bl	15ec8 <__assert_fail@plt+0x4f98>
   15fd8:	str	r4, [r5]
   15fdc:	pop	{r4, r5, r6, r7, r8, pc}
   15fe0:	push	{r4, lr}
   15fe4:	mov	r2, #1
   15fe8:	bl	15f6c <__assert_fail@plt+0x503c>
   15fec:	pop	{r4, pc}
   15ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff4:	sub	sp, sp, #12
   15ff8:	mov	fp, r0
   15ffc:	mov	sl, r1
   16000:	mov	r9, r2
   16004:	mov	r7, r3
   16008:	ldr	r6, [sp, #48]	; 0x30
   1600c:	ldr	r5, [r1]
   16010:	asrs	r4, r5, #1
   16014:	bmi	16170 <__assert_fail@plt+0x5240>
   16018:	cmp	r5, #0
   1601c:	blt	16184 <__assert_fail@plt+0x5254>
   16020:	mvn	r3, #-2147483648	; 0x80000000
   16024:	sub	r3, r3, r4
   16028:	cmp	r5, r3
   1602c:	movle	r3, #0
   16030:	movgt	r3, #1
   16034:	cmp	r3, #0
   16038:	addeq	r4, r4, r5
   1603c:	mvnne	r4, #-2147483648	; 0x80000000
   16040:	mvn	r8, r7
   16044:	lsr	r8, r8, #31
   16048:	cmp	r7, r4
   1604c:	movge	r3, #0
   16050:	andlt	r3, r8, #1
   16054:	cmp	r3, #0
   16058:	movne	r4, r7
   1605c:	cmp	r6, #0
   16060:	blt	16198 <__assert_fail@plt+0x5268>
   16064:	cmp	r6, #0
   16068:	beq	16244 <__assert_fail@plt+0x5314>
   1606c:	cmp	r4, #0
   16070:	blt	161f4 <__assert_fail@plt+0x52c4>
   16074:	mov	r1, r6
   16078:	mvn	r0, #-2147483648	; 0x80000000
   1607c:	bl	16f64 <__assert_fail@plt+0x6034>
   16080:	cmp	r0, r4
   16084:	movge	r0, #0
   16088:	movlt	r0, #1
   1608c:	cmp	r0, #0
   16090:	mvnne	r3, #-2147483648	; 0x80000000
   16094:	strne	r3, [sp, #4]
   16098:	beq	1622c <__assert_fail@plt+0x52fc>
   1609c:	mov	r1, r6
   160a0:	ldr	r0, [sp, #4]
   160a4:	bl	16f64 <__assert_fail@plt+0x6034>
   160a8:	mov	r4, r0
   160ac:	mov	r1, r6
   160b0:	ldr	r0, [sp, #4]
   160b4:	bl	17184 <__assert_fail@plt+0x6254>
   160b8:	ldr	r3, [sp, #4]
   160bc:	sub	r1, r3, r1
   160c0:	cmp	fp, #0
   160c4:	moveq	r3, #0
   160c8:	streq	r3, [sl]
   160cc:	sub	r3, r4, r5
   160d0:	cmp	r3, r9
   160d4:	bge	1615c <__assert_fail@plt+0x522c>
   160d8:	cmp	r9, #0
   160dc:	blt	16250 <__assert_fail@plt+0x5320>
   160e0:	cmp	r5, #0
   160e4:	blt	16264 <__assert_fail@plt+0x5334>
   160e8:	mvn	r3, #-2147483648	; 0x80000000
   160ec:	sub	r3, r3, r9
   160f0:	cmp	r5, r3
   160f4:	movle	r3, #0
   160f8:	movgt	r3, #1
   160fc:	cmp	r3, #0
   16100:	bne	1630c <__assert_fail@plt+0x53dc>
   16104:	add	r5, r5, r9
   16108:	mov	r4, r5
   1610c:	cmp	r7, r5
   16110:	movge	r7, #0
   16114:	andlt	r7, r8, #1
   16118:	cmp	r7, #0
   1611c:	bne	1630c <__assert_fail@plt+0x53dc>
   16120:	cmp	r6, #0
   16124:	blt	16278 <__assert_fail@plt+0x5348>
   16128:	cmp	r6, #0
   1612c:	beq	16158 <__assert_fail@plt+0x5228>
   16130:	cmp	r5, #0
   16134:	blt	162d4 <__assert_fail@plt+0x53a4>
   16138:	mov	r1, r6
   1613c:	mvn	r0, #-2147483648	; 0x80000000
   16140:	bl	16f64 <__assert_fail@plt+0x6034>
   16144:	cmp	r5, r0
   16148:	movle	r0, #0
   1614c:	movgt	r0, #1
   16150:	cmp	r0, #0
   16154:	bne	1630c <__assert_fail@plt+0x53dc>
   16158:	mul	r1, r5, r6
   1615c:	mov	r0, fp
   16160:	bl	15e78 <__assert_fail@plt+0x4f48>
   16164:	str	r4, [sl]
   16168:	add	sp, sp, #12
   1616c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16170:	rsb	r3, r4, #-2147483648	; 0x80000000
   16174:	cmp	r5, r3
   16178:	movge	r3, #0
   1617c:	movlt	r3, #1
   16180:	b	16034 <__assert_fail@plt+0x5104>
   16184:	rsb	r3, r5, #-2147483648	; 0x80000000
   16188:	cmp	r4, r3
   1618c:	movge	r3, #0
   16190:	movlt	r3, #1
   16194:	b	16034 <__assert_fail@plt+0x5104>
   16198:	cmp	r4, #0
   1619c:	blt	161c4 <__assert_fail@plt+0x5294>
   161a0:	cmn	r6, #1
   161a4:	beq	161e0 <__assert_fail@plt+0x52b0>
   161a8:	mov	r1, r6
   161ac:	mov	r0, #-2147483648	; 0x80000000
   161b0:	bl	16f64 <__assert_fail@plt+0x6034>
   161b4:	cmp	r0, r4
   161b8:	movge	r0, #0
   161bc:	movlt	r0, #1
   161c0:	b	1608c <__assert_fail@plt+0x515c>
   161c4:	mov	r1, r6
   161c8:	mvn	r0, #-2147483648	; 0x80000000
   161cc:	bl	16f64 <__assert_fail@plt+0x6034>
   161d0:	cmp	r0, r4
   161d4:	movle	r0, #0
   161d8:	movgt	r0, #1
   161dc:	b	1608c <__assert_fail@plt+0x515c>
   161e0:	add	r0, r4, #-2147483648	; 0x80000000
   161e4:	cmp	r0, #0
   161e8:	movle	r0, #0
   161ec:	movgt	r0, #1
   161f0:	b	1608c <__assert_fail@plt+0x515c>
   161f4:	cmn	r4, #1
   161f8:	beq	16218 <__assert_fail@plt+0x52e8>
   161fc:	mov	r1, r4
   16200:	mov	r0, #-2147483648	; 0x80000000
   16204:	bl	16f64 <__assert_fail@plt+0x6034>
   16208:	cmp	r6, r0
   1620c:	movle	r0, #0
   16210:	movgt	r0, #1
   16214:	b	1608c <__assert_fail@plt+0x515c>
   16218:	add	r0, r6, #-2147483648	; 0x80000000
   1621c:	cmp	r0, #0
   16220:	movle	r0, #0
   16224:	movgt	r0, #1
   16228:	b	1608c <__assert_fail@plt+0x515c>
   1622c:	mul	r1, r6, r4
   16230:	cmp	r1, #63	; 0x3f
   16234:	movle	r3, #64	; 0x40
   16238:	strle	r3, [sp, #4]
   1623c:	bgt	160c0 <__assert_fail@plt+0x5190>
   16240:	b	1609c <__assert_fail@plt+0x516c>
   16244:	mov	r3, #64	; 0x40
   16248:	str	r3, [sp, #4]
   1624c:	b	1609c <__assert_fail@plt+0x516c>
   16250:	rsb	r3, r9, #-2147483648	; 0x80000000
   16254:	cmp	r5, r3
   16258:	movge	r3, #0
   1625c:	movlt	r3, #1
   16260:	b	160fc <__assert_fail@plt+0x51cc>
   16264:	rsb	r3, r5, #-2147483648	; 0x80000000
   16268:	cmp	r9, r3
   1626c:	movge	r3, #0
   16270:	movlt	r3, #1
   16274:	b	160fc <__assert_fail@plt+0x51cc>
   16278:	cmp	r5, #0
   1627c:	blt	162a4 <__assert_fail@plt+0x5374>
   16280:	cmn	r6, #1
   16284:	beq	162c0 <__assert_fail@plt+0x5390>
   16288:	mov	r1, r6
   1628c:	mov	r0, #-2147483648	; 0x80000000
   16290:	bl	16f64 <__assert_fail@plt+0x6034>
   16294:	cmp	r5, r0
   16298:	movle	r0, #0
   1629c:	movgt	r0, #1
   162a0:	b	16150 <__assert_fail@plt+0x5220>
   162a4:	mov	r1, r6
   162a8:	mvn	r0, #-2147483648	; 0x80000000
   162ac:	bl	16f64 <__assert_fail@plt+0x6034>
   162b0:	cmp	r5, r0
   162b4:	movge	r0, #0
   162b8:	movlt	r0, #1
   162bc:	b	16150 <__assert_fail@plt+0x5220>
   162c0:	add	r0, r5, #-2147483648	; 0x80000000
   162c4:	cmp	r0, #0
   162c8:	movle	r0, #0
   162cc:	movgt	r0, #1
   162d0:	b	16150 <__assert_fail@plt+0x5220>
   162d4:	cmn	r5, #1
   162d8:	beq	162f8 <__assert_fail@plt+0x53c8>
   162dc:	mov	r1, r5
   162e0:	mov	r0, #-2147483648	; 0x80000000
   162e4:	bl	16f64 <__assert_fail@plt+0x6034>
   162e8:	cmp	r6, r0
   162ec:	movle	r0, #0
   162f0:	movgt	r0, #1
   162f4:	b	16150 <__assert_fail@plt+0x5220>
   162f8:	add	r0, r6, #-2147483648	; 0x80000000
   162fc:	cmp	r0, #0
   16300:	movle	r0, #0
   16304:	movgt	r0, #1
   16308:	b	16150 <__assert_fail@plt+0x5220>
   1630c:	bl	163e8 <__assert_fail@plt+0x54b8>
   16310:	push	{r4, lr}
   16314:	bl	16a30 <__assert_fail@plt+0x5b00>
   16318:	cmp	r0, #0
   1631c:	popne	{r4, pc}
   16320:	bl	163e8 <__assert_fail@plt+0x54b8>
   16324:	push	{r4, lr}
   16328:	mov	r1, #1
   1632c:	bl	16310 <__assert_fail@plt+0x53e0>
   16330:	pop	{r4, pc}
   16334:	push	{r4, lr}
   16338:	bl	16a30 <__assert_fail@plt+0x5b00>
   1633c:	cmp	r0, #0
   16340:	popne	{r4, pc}
   16344:	bl	163e8 <__assert_fail@plt+0x54b8>
   16348:	push	{r4, lr}
   1634c:	mov	r1, #1
   16350:	bl	16334 <__assert_fail@plt+0x5404>
   16354:	pop	{r4, pc}
   16358:	push	{r4, r5, r6, lr}
   1635c:	mov	r5, r0
   16360:	mov	r4, r1
   16364:	mov	r0, r1
   16368:	bl	15e44 <__assert_fail@plt+0x4f14>
   1636c:	mov	r2, r4
   16370:	mov	r1, r5
   16374:	bl	10d2c <memcpy@plt>
   16378:	pop	{r4, r5, r6, pc}
   1637c:	push	{r4, r5, r6, lr}
   16380:	mov	r5, r0
   16384:	mov	r4, r1
   16388:	mov	r0, r1
   1638c:	bl	15e58 <__assert_fail@plt+0x4f28>
   16390:	mov	r2, r4
   16394:	mov	r1, r5
   16398:	bl	10d2c <memcpy@plt>
   1639c:	pop	{r4, r5, r6, pc}
   163a0:	push	{r4, r5, r6, lr}
   163a4:	mov	r5, r0
   163a8:	mov	r4, r1
   163ac:	add	r0, r1, #1
   163b0:	bl	15e58 <__assert_fail@plt+0x4f28>
   163b4:	mov	r2, #0
   163b8:	strb	r2, [r0, r4]
   163bc:	mov	r2, r4
   163c0:	mov	r1, r5
   163c4:	bl	10d2c <memcpy@plt>
   163c8:	pop	{r4, r5, r6, pc}
   163cc:	push	{r4, lr}
   163d0:	mov	r4, r0
   163d4:	bl	10e34 <strlen@plt>
   163d8:	add	r1, r0, #1
   163dc:	mov	r0, r4
   163e0:	bl	16358 <__assert_fail@plt+0x5428>
   163e4:	pop	{r4, pc}
   163e8:	push	{r4, lr}
   163ec:	ldr	r3, [pc, #40]	; 1641c <__assert_fail@plt+0x54ec>
   163f0:	ldr	r4, [r3]
   163f4:	mov	r2, #5
   163f8:	ldr	r1, [pc, #32]	; 16420 <__assert_fail@plt+0x54f0>
   163fc:	mov	r0, #0
   16400:	bl	10d68 <dcgettext@plt>
   16404:	mov	r3, r0
   16408:	ldr	r2, [pc, #20]	; 16424 <__assert_fail@plt+0x54f4>
   1640c:	mov	r1, #0
   16410:	mov	r0, r4
   16414:	bl	10dd4 <error@plt>
   16418:	bl	10f24 <abort@plt>
   1641c:	strdeq	r9, [r2], -r0
   16420:	andeq	r8, r1, r0, ror #12
   16424:	andeq	r7, r1, r0, asr lr
   16428:	push	{r4, r5, r6, r7, r8, lr}
   1642c:	mov	r5, r0
   16430:	subs	r4, r1, #0
   16434:	blt	16490 <__assert_fail@plt+0x5560>
   16438:	cmp	r4, #0
   1643c:	beq	16504 <__assert_fail@plt+0x55d4>
   16440:	ldrd	r6, [r0]
   16444:	cmp	r6, #0
   16448:	sbcs	r3, r7, #0
   1644c:	blt	16548 <__assert_fail@plt+0x5618>
   16450:	mov	r2, r4
   16454:	asr	r3, r4, #31
   16458:	mvn	r0, #0
   1645c:	mvn	r1, #-2147483648	; 0x80000000
   16460:	bl	171a4 <__assert_fail@plt+0x6274>
   16464:	cmp	r0, r6
   16468:	sbcs	r3, r1, r7
   1646c:	movlt	r3, #1
   16470:	movge	r3, #0
   16474:	cmp	r3, #0
   16478:	mvnne	r2, #0
   1647c:	mvnne	r3, #-2147483648	; 0x80000000
   16480:	beq	16504 <__assert_fail@plt+0x55d4>
   16484:	strd	r2, [r5]
   16488:	mov	r0, #1
   1648c:	pop	{r4, r5, r6, r7, r8, pc}
   16490:	ldrd	r6, [r0]
   16494:	cmp	r6, #0
   16498:	sbcs	r3, r7, #0
   1649c:	blt	164d0 <__assert_fail@plt+0x55a0>
   164a0:	cmn	r4, #1
   164a4:	beq	1652c <__assert_fail@plt+0x55fc>
   164a8:	mov	r2, r4
   164ac:	asr	r3, r4, #31
   164b0:	mov	r0, #0
   164b4:	mov	r1, #-2147483648	; 0x80000000
   164b8:	bl	171a4 <__assert_fail@plt+0x6274>
   164bc:	cmp	r0, r6
   164c0:	sbcs	r3, r1, r7
   164c4:	movlt	r3, #1
   164c8:	movge	r3, #0
   164cc:	b	16474 <__assert_fail@plt+0x5544>
   164d0:	mov	r2, r4
   164d4:	asr	r3, r4, #31
   164d8:	mvn	r0, #0
   164dc:	mvn	r1, #-2147483648	; 0x80000000
   164e0:	bl	171a4 <__assert_fail@plt+0x6274>
   164e4:	cmp	r6, r0
   164e8:	sbcs	r3, r7, r1
   164ec:	movlt	r3, #1
   164f0:	movge	r3, #0
   164f4:	cmp	r3, #0
   164f8:	movne	r2, #0
   164fc:	movne	r3, #-2147483648	; 0x80000000
   16500:	bne	16484 <__assert_fail@plt+0x5554>
   16504:	asr	r3, r4, #31
   16508:	ldr	r1, [r5, #4]
   1650c:	ldr	r2, [r5]
   16510:	mul	r3, r3, r2
   16514:	mla	r1, r4, r1, r3
   16518:	umull	r2, r3, r2, r4
   1651c:	add	r3, r1, r3
   16520:	strd	r2, [r5]
   16524:	mov	r0, #0
   16528:	pop	{r4, r5, r6, r7, r8, pc}
   1652c:	adds	r6, r6, #0
   16530:	adc	r7, r7, #-2147483648	; 0x80000000
   16534:	cmp	r6, #1
   16538:	sbcs	r3, r7, #0
   1653c:	movge	r3, #1
   16540:	movlt	r3, #0
   16544:	b	16474 <__assert_fail@plt+0x5544>
   16548:	mvn	r2, #0
   1654c:	mvn	r3, #0
   16550:	cmp	r7, r3
   16554:	cmpeq	r6, r2
   16558:	beq	1658c <__assert_fail@plt+0x565c>
   1655c:	mov	r2, r6
   16560:	mov	r3, r7
   16564:	mov	r0, #0
   16568:	mov	r1, #-2147483648	; 0x80000000
   1656c:	bl	171a4 <__assert_fail@plt+0x6274>
   16570:	mov	r2, r4
   16574:	asr	r3, r4, #31
   16578:	cmp	r0, r4
   1657c:	sbcs	r3, r1, r3
   16580:	movlt	r3, #1
   16584:	movge	r3, #0
   16588:	b	164f4 <__assert_fail@plt+0x55c4>
   1658c:	asr	r3, r4, #31
   16590:	adds	r2, r4, #0
   16594:	adc	r3, r3, #-2147483648	; 0x80000000
   16598:	cmp	r2, #1
   1659c:	sbcs	r3, r3, #0
   165a0:	movge	r3, #1
   165a4:	movlt	r3, #0
   165a8:	b	164f4 <__assert_fail@plt+0x55c4>
   165ac:	push	{r4, r5, r6, r7, r8, lr}
   165b0:	subs	r4, r2, #0
   165b4:	beq	165e4 <__assert_fail@plt+0x56b4>
   165b8:	mov	r7, r1
   165bc:	mov	r6, r0
   165c0:	mov	r5, #0
   165c4:	mov	r1, r7
   165c8:	mov	r0, r6
   165cc:	bl	16428 <__assert_fail@plt+0x54f8>
   165d0:	orr	r5, r5, r0
   165d4:	subs	r4, r4, #1
   165d8:	bne	165c4 <__assert_fail@plt+0x5694>
   165dc:	mov	r0, r5
   165e0:	pop	{r4, r5, r6, r7, r8, pc}
   165e4:	mov	r5, #0
   165e8:	b	165dc <__assert_fail@plt+0x56ac>
   165ec:	push	{r4, r5, r6, r7, r8, lr}
   165f0:	sub	sp, sp, #16
   165f4:	cmp	r2, #36	; 0x24
   165f8:	bhi	16664 <__assert_fail@plt+0x5734>
   165fc:	mov	r6, r0
   16600:	mov	r4, r1
   16604:	mov	r5, r2
   16608:	mov	r8, r3
   1660c:	cmp	r1, #0
   16610:	addeq	r4, sp, #12
   16614:	bl	10e4c <__errno_location@plt>
   16618:	mov	r7, r0
   1661c:	mov	r3, #0
   16620:	str	r3, [r0]
   16624:	mov	r2, r5
   16628:	mov	r1, r4
   1662c:	mov	r0, r6
   16630:	bl	10ee8 <__strtoll_internal@plt>
   16634:	strd	r0, [sp]
   16638:	ldr	r5, [r4]
   1663c:	cmp	r6, r5
   16640:	beq	16678 <__assert_fail@plt+0x5748>
   16644:	ldr	r3, [r7]
   16648:	cmp	r3, #0
   1664c:	beq	166c0 <__assert_fail@plt+0x5790>
   16650:	cmp	r3, #34	; 0x22
   16654:	moveq	r6, #1
   16658:	beq	166c4 <__assert_fail@plt+0x5794>
   1665c:	mov	r6, #4
   16660:	b	16a18 <__assert_fail@plt+0x5ae8>
   16664:	ldr	r3, [pc, #952]	; 16a24 <__assert_fail@plt+0x5af4>
   16668:	mov	r2, #85	; 0x55
   1666c:	ldr	r1, [pc, #948]	; 16a28 <__assert_fail@plt+0x5af8>
   16670:	ldr	r0, [pc, #948]	; 16a2c <__assert_fail@plt+0x5afc>
   16674:	bl	10f30 <__assert_fail@plt>
   16678:	ldr	r3, [sp, #40]	; 0x28
   1667c:	cmp	r3, #0
   16680:	moveq	r6, #4
   16684:	beq	16a18 <__assert_fail@plt+0x5ae8>
   16688:	ldrb	r1, [r5]
   1668c:	cmp	r1, #0
   16690:	moveq	r6, #4
   16694:	beq	16a18 <__assert_fail@plt+0x5ae8>
   16698:	mov	r0, r3
   1669c:	bl	10e40 <strchr@plt>
   166a0:	cmp	r0, #0
   166a4:	moveq	r6, #4
   166a8:	beq	16a18 <__assert_fail@plt+0x5ae8>
   166ac:	mov	r2, #1
   166b0:	mov	r3, #0
   166b4:	strd	r2, [sp]
   166b8:	mov	r6, #0
   166bc:	b	166d0 <__assert_fail@plt+0x57a0>
   166c0:	mov	r6, #0
   166c4:	ldr	r3, [sp, #40]	; 0x28
   166c8:	cmp	r3, #0
   166cc:	beq	167c0 <__assert_fail@plt+0x5890>
   166d0:	ldrb	r7, [r5]
   166d4:	cmp	r7, #0
   166d8:	beq	16a10 <__assert_fail@plt+0x5ae0>
   166dc:	mov	r1, r7
   166e0:	ldr	r0, [sp, #40]	; 0x28
   166e4:	bl	10e40 <strchr@plt>
   166e8:	cmp	r0, #0
   166ec:	beq	167c8 <__assert_fail@plt+0x5898>
   166f0:	sub	r3, r7, #69	; 0x45
   166f4:	cmp	r3, #47	; 0x2f
   166f8:	ldrls	pc, [pc, r3, lsl #2]
   166fc:	b	16834 <__assert_fail@plt+0x5904>
   16700:	ldrdeq	r6, [r1], -r8
   16704:	andeq	r6, r1, r4, lsr r8
   16708:	ldrdeq	r6, [r1], -r8
   1670c:	andeq	r6, r1, r4, lsr r8
   16710:	andeq	r6, r1, r4, lsr r8
   16714:	andeq	r6, r1, r4, lsr r8
   16718:	ldrdeq	r6, [r1], -r8
   1671c:	andeq	r6, r1, r4, lsr r8
   16720:	ldrdeq	r6, [r1], -r8
   16724:	andeq	r6, r1, r4, lsr r8
   16728:	andeq	r6, r1, r4, lsr r8
   1672c:	ldrdeq	r6, [r1], -r8
   16730:	andeq	r6, r1, r4, lsr r8
   16734:	andeq	r6, r1, r4, lsr r8
   16738:	andeq	r6, r1, r4, lsr r8
   1673c:	ldrdeq	r6, [r1], -r8
   16740:	andeq	r6, r1, r4, lsr r8
   16744:	andeq	r6, r1, r4, lsr r8
   16748:	andeq	r6, r1, r4, lsr r8
   1674c:	andeq	r6, r1, r4, lsr r8
   16750:	ldrdeq	r6, [r1], -r8
   16754:	ldrdeq	r6, [r1], -r8
   16758:	andeq	r6, r1, r4, lsr r8
   1675c:	andeq	r6, r1, r4, lsr r8
   16760:	andeq	r6, r1, r4, lsr r8
   16764:	andeq	r6, r1, r4, lsr r8
   16768:	andeq	r6, r1, r4, lsr r8
   1676c:	andeq	r6, r1, r4, lsr r8
   16770:	andeq	r6, r1, r4, lsr r8
   16774:	andeq	r6, r1, r4, lsr r8
   16778:	andeq	r6, r1, r4, lsr r8
   1677c:	andeq	r6, r1, r4, lsr r8
   16780:	andeq	r6, r1, r4, lsr r8
   16784:	andeq	r6, r1, r4, lsr r8
   16788:	ldrdeq	r6, [r1], -r8
   1678c:	andeq	r6, r1, r4, lsr r8
   16790:	andeq	r6, r1, r4, lsr r8
   16794:	andeq	r6, r1, r4, lsr r8
   16798:	ldrdeq	r6, [r1], -r8
   1679c:	andeq	r6, r1, r4, lsr r8
   167a0:	ldrdeq	r6, [r1], -r8
   167a4:	andeq	r6, r1, r4, lsr r8
   167a8:	andeq	r6, r1, r4, lsr r8
   167ac:	andeq	r6, r1, r4, lsr r8
   167b0:	andeq	r6, r1, r4, lsr r8
   167b4:	andeq	r6, r1, r4, lsr r8
   167b8:	andeq	r6, r1, r4, lsr r8
   167bc:	ldrdeq	r6, [r1], -r8
   167c0:	strd	r0, [r8]
   167c4:	b	16a18 <__assert_fail@plt+0x5ae8>
   167c8:	ldrd	r2, [sp]
   167cc:	strd	r2, [r8]
   167d0:	orr	r6, r6, #2
   167d4:	b	16a18 <__assert_fail@plt+0x5ae8>
   167d8:	mov	r1, #48	; 0x30
   167dc:	ldr	r0, [sp, #40]	; 0x28
   167e0:	bl	10e40 <strchr@plt>
   167e4:	cmp	r0, #0
   167e8:	beq	16924 <__assert_fail@plt+0x59f4>
   167ec:	ldrb	r3, [r5, #1]
   167f0:	cmp	r3, #68	; 0x44
   167f4:	beq	16810 <__assert_fail@plt+0x58e0>
   167f8:	cmp	r3, #105	; 0x69
   167fc:	beq	1681c <__assert_fail@plt+0x58ec>
   16800:	cmp	r3, #66	; 0x42
   16804:	movne	r5, #1
   16808:	movne	r1, #1024	; 0x400
   1680c:	bne	1683c <__assert_fail@plt+0x590c>
   16810:	mov	r5, #2
   16814:	mov	r1, #1000	; 0x3e8
   16818:	b	1683c <__assert_fail@plt+0x590c>
   1681c:	ldrb	r5, [r5, #2]
   16820:	cmp	r5, #66	; 0x42
   16824:	movne	r5, #1
   16828:	moveq	r5, #3
   1682c:	mov	r1, #1024	; 0x400
   16830:	b	1683c <__assert_fail@plt+0x590c>
   16834:	mov	r5, #1
   16838:	mov	r1, #1024	; 0x400
   1683c:	sub	r7, r7, #66	; 0x42
   16840:	cmp	r7, #53	; 0x35
   16844:	ldrls	pc, [pc, r7, lsl #2]
   16848:	b	169e0 <__assert_fail@plt+0x5ab0>
   1684c:	andeq	r6, r1, r0, asr #18
   16850:	andeq	r6, r1, r0, ror #19
   16854:	andeq	r6, r1, r0, ror #19
   16858:	andeq	r6, r1, r0, asr r9
   1685c:	andeq	r6, r1, r0, ror #19
   16860:	andeq	r6, r1, r0, ror #18
   16864:	andeq	r6, r1, r0, ror #19
   16868:	andeq	r6, r1, r0, ror #19
   1686c:	andeq	r6, r1, r0, ror #19
   16870:	andeq	r6, r1, r0, ror r9
   16874:	andeq	r6, r1, r0, ror #19
   16878:	andeq	r6, r1, r0, lsl #19
   1687c:	andeq	r6, r1, r0, ror #19
   16880:	andeq	r6, r1, r0, ror #19
   16884:	muleq	r1, r0, r9
   16888:	andeq	r6, r1, r0, ror #19
   1688c:	andeq	r6, r1, r0, ror #19
   16890:	andeq	r6, r1, r0, ror #19
   16894:	andeq	r6, r1, r0, lsr #19
   16898:	andeq	r6, r1, r0, ror #19
   1689c:	andeq	r6, r1, r0, ror #19
   168a0:	andeq	r6, r1, r0, ror #19
   168a4:	andeq	r6, r1, r0, ror #19
   168a8:	andeq	r6, r1, r0, asr #19
   168ac:	ldrdeq	r6, [r1], -r0
   168b0:	andeq	r6, r1, r0, ror #19
   168b4:	andeq	r6, r1, r0, ror #19
   168b8:	andeq	r6, r1, r0, ror #19
   168bc:	andeq	r6, r1, r0, ror #19
   168c0:	andeq	r6, r1, r0, ror #19
   168c4:	andeq	r6, r1, r0, ror #19
   168c8:	andeq	r6, r1, r0, ror #19
   168cc:	andeq	r6, r1, r0, lsr r9
   168d0:	strdeq	r6, [r1], -r0
   168d4:	andeq	r6, r1, r0, ror #19
   168d8:	andeq	r6, r1, r0, ror #19
   168dc:	andeq	r6, r1, r0, ror #19
   168e0:	andeq	r6, r1, r0, ror #18
   168e4:	andeq	r6, r1, r0, ror #19
   168e8:	andeq	r6, r1, r0, ror #19
   168ec:	andeq	r6, r1, r0, ror #19
   168f0:	andeq	r6, r1, r0, ror r9
   168f4:	andeq	r6, r1, r0, ror #19
   168f8:	andeq	r6, r1, r0, lsl #19
   168fc:	andeq	r6, r1, r0, ror #19
   16900:	andeq	r6, r1, r0, ror #19
   16904:	andeq	r6, r1, r0, ror #19
   16908:	andeq	r6, r1, r0, ror #19
   1690c:	andeq	r6, r1, r0, ror #19
   16910:	andeq	r6, r1, r0, ror #19
   16914:	andeq	r6, r1, r0, lsr #19
   16918:	andeq	r6, r1, r0, ror #19
   1691c:	andeq	r6, r1, r0, ror #19
   16920:			; <UNDEFINED> instruction: 0x000169b0
   16924:	mov	r5, #1
   16928:	mov	r1, #1024	; 0x400
   1692c:	b	1683c <__assert_fail@plt+0x590c>
   16930:	mov	r1, #512	; 0x200
   16934:	mov	r0, sp
   16938:	bl	16428 <__assert_fail@plt+0x54f8>
   1693c:	b	169f4 <__assert_fail@plt+0x5ac4>
   16940:	mov	r1, #1024	; 0x400
   16944:	mov	r0, sp
   16948:	bl	16428 <__assert_fail@plt+0x54f8>
   1694c:	b	169f4 <__assert_fail@plt+0x5ac4>
   16950:	mov	r2, #6
   16954:	mov	r0, sp
   16958:	bl	165ac <__assert_fail@plt+0x567c>
   1695c:	b	169f4 <__assert_fail@plt+0x5ac4>
   16960:	mov	r2, #3
   16964:	mov	r0, sp
   16968:	bl	165ac <__assert_fail@plt+0x567c>
   1696c:	b	169f4 <__assert_fail@plt+0x5ac4>
   16970:	mov	r2, #1
   16974:	mov	r0, sp
   16978:	bl	165ac <__assert_fail@plt+0x567c>
   1697c:	b	169f4 <__assert_fail@plt+0x5ac4>
   16980:	mov	r2, #2
   16984:	mov	r0, sp
   16988:	bl	165ac <__assert_fail@plt+0x567c>
   1698c:	b	169f4 <__assert_fail@plt+0x5ac4>
   16990:	mov	r2, #5
   16994:	mov	r0, sp
   16998:	bl	165ac <__assert_fail@plt+0x567c>
   1699c:	b	169f4 <__assert_fail@plt+0x5ac4>
   169a0:	mov	r2, #4
   169a4:	mov	r0, sp
   169a8:	bl	165ac <__assert_fail@plt+0x567c>
   169ac:	b	169f4 <__assert_fail@plt+0x5ac4>
   169b0:	mov	r1, #2
   169b4:	mov	r0, sp
   169b8:	bl	16428 <__assert_fail@plt+0x54f8>
   169bc:	b	169f4 <__assert_fail@plt+0x5ac4>
   169c0:	mov	r2, #8
   169c4:	mov	r0, sp
   169c8:	bl	165ac <__assert_fail@plt+0x567c>
   169cc:	b	169f4 <__assert_fail@plt+0x5ac4>
   169d0:	mov	r2, #7
   169d4:	mov	r0, sp
   169d8:	bl	165ac <__assert_fail@plt+0x567c>
   169dc:	b	169f4 <__assert_fail@plt+0x5ac4>
   169e0:	ldrd	r2, [sp]
   169e4:	strd	r2, [r8]
   169e8:	orr	r6, r6, #2
   169ec:	b	16a18 <__assert_fail@plt+0x5ae8>
   169f0:	mov	r0, #0
   169f4:	orr	r6, r6, r0
   169f8:	ldr	r3, [r4]
   169fc:	add	r2, r3, r5
   16a00:	str	r2, [r4]
   16a04:	ldrb	r3, [r3, r5]
   16a08:	cmp	r3, #0
   16a0c:	orrne	r6, r6, #2
   16a10:	ldrd	r2, [sp]
   16a14:	strd	r2, [r8]
   16a18:	mov	r0, r6
   16a1c:	add	sp, sp, #16
   16a20:	pop	{r4, r5, r6, r7, r8, pc}
   16a24:	andeq	r8, r1, r4, ror r6
   16a28:	andeq	r8, r1, r0, lsl #13
   16a2c:	muleq	r1, r0, r6
   16a30:	push	{r4, lr}
   16a34:	mov	r2, r0
   16a38:	mov	r3, r1
   16a3c:	cmp	r1, #0
   16a40:	cmpne	r0, #0
   16a44:	moveq	r3, #1
   16a48:	moveq	r2, r3
   16a4c:	umull	r0, r1, r2, r3
   16a50:	cmp	r0, #0
   16a54:	cmpge	r1, #0
   16a58:	bne	16a6c <__assert_fail@plt+0x5b3c>
   16a5c:	mov	r1, r3
   16a60:	mov	r0, r2
   16a64:	bl	10cc0 <calloc@plt>
   16a68:	pop	{r4, pc}
   16a6c:	bl	10e4c <__errno_location@plt>
   16a70:	mov	r3, #12
   16a74:	str	r3, [r0]
   16a78:	mov	r0, #0
   16a7c:	pop	{r4, pc}
   16a80:	push	{r4, lr}
   16a84:	cmp	r0, #0
   16a88:	moveq	r0, #1
   16a8c:	cmp	r0, #0
   16a90:	blt	16a9c <__assert_fail@plt+0x5b6c>
   16a94:	bl	10de0 <malloc@plt>
   16a98:	pop	{r4, pc}
   16a9c:	bl	10e4c <__errno_location@plt>
   16aa0:	mov	r3, #12
   16aa4:	str	r3, [r0]
   16aa8:	mov	r0, #0
   16aac:	pop	{r4, pc}
   16ab0:	push	{r4, lr}
   16ab4:	cmp	r0, #0
   16ab8:	beq	16ad4 <__assert_fail@plt+0x5ba4>
   16abc:	cmp	r1, #0
   16ac0:	beq	16ae0 <__assert_fail@plt+0x5bb0>
   16ac4:	cmp	r1, #0
   16ac8:	blt	16aec <__assert_fail@plt+0x5bbc>
   16acc:	bl	10d74 <realloc@plt>
   16ad0:	pop	{r4, pc}
   16ad4:	mov	r0, r1
   16ad8:	bl	16a80 <__assert_fail@plt+0x5b50>
   16adc:	pop	{r4, pc}
   16ae0:	bl	13c5c <__assert_fail@plt+0x2d2c>
   16ae4:	mov	r0, #0
   16ae8:	pop	{r4, pc}
   16aec:	bl	10e4c <__errno_location@plt>
   16af0:	mov	r3, #12
   16af4:	str	r3, [r0]
   16af8:	mov	r0, #0
   16afc:	pop	{r4, pc}
   16b00:	push	{r4, r5, r6, lr}
   16b04:	mov	r5, r0
   16b08:	bl	10dbc <__fpending@plt>
   16b0c:	mov	r6, r0
   16b10:	ldr	r4, [r5]
   16b14:	and	r4, r4, #32
   16b18:	mov	r0, r5
   16b1c:	bl	13b50 <__assert_fail@plt+0x2c20>
   16b20:	cmp	r4, #0
   16b24:	bne	16b4c <__assert_fail@plt+0x5c1c>
   16b28:	cmp	r0, #0
   16b2c:	popeq	{r4, r5, r6, pc}
   16b30:	cmp	r6, #0
   16b34:	bne	16b68 <__assert_fail@plt+0x5c38>
   16b38:	bl	10e4c <__errno_location@plt>
   16b3c:	ldr	r0, [r0]
   16b40:	subs	r0, r0, #9
   16b44:	mvnne	r0, #0
   16b48:	pop	{r4, r5, r6, pc}
   16b4c:	cmp	r0, #0
   16b50:	bne	16b70 <__assert_fail@plt+0x5c40>
   16b54:	bl	10e4c <__errno_location@plt>
   16b58:	mov	r3, #0
   16b5c:	str	r3, [r0]
   16b60:	mvn	r0, #0
   16b64:	pop	{r4, r5, r6, pc}
   16b68:	mvn	r0, #0
   16b6c:	pop	{r4, r5, r6, pc}
   16b70:	mvn	r0, #0
   16b74:	pop	{r4, r5, r6, pc}
   16b78:	push	{r4, lr}
   16b7c:	mov	r0, #14
   16b80:	bl	10edc <nl_langinfo@plt>
   16b84:	cmp	r0, #0
   16b88:	beq	16ba0 <__assert_fail@plt+0x5c70>
   16b8c:	ldrb	r2, [r0]
   16b90:	ldr	r3, [pc, #16]	; 16ba8 <__assert_fail@plt+0x5c78>
   16b94:	cmp	r2, #0
   16b98:	moveq	r0, r3
   16b9c:	pop	{r4, pc}
   16ba0:	ldr	r0, [pc]	; 16ba8 <__assert_fail@plt+0x5c78>
   16ba4:	pop	{r4, pc}
   16ba8:			; <UNDEFINED> instruction: 0x000186b8
   16bac:	push	{r4, r5, r6, r7, lr}
   16bb0:	sub	sp, sp, #12
   16bb4:	mov	r7, r1
   16bb8:	mov	r5, r2
   16bbc:	subs	r6, r0, #0
   16bc0:	addeq	r6, sp, #4
   16bc4:	mov	r0, r6
   16bc8:	bl	10dc8 <mbrtowc@plt>
   16bcc:	mov	r4, r0
   16bd0:	cmp	r5, #0
   16bd4:	cmnne	r0, #3
   16bd8:	bhi	16be8 <__assert_fail@plt+0x5cb8>
   16bdc:	mov	r0, r4
   16be0:	add	sp, sp, #12
   16be4:	pop	{r4, r5, r6, r7, pc}
   16be8:	mov	r0, #0
   16bec:	bl	16c50 <__assert_fail@plt+0x5d20>
   16bf0:	cmp	r0, #0
   16bf4:	ldrbeq	r3, [r7]
   16bf8:	streq	r3, [r6]
   16bfc:	moveq	r4, #1
   16c00:	b	16bdc <__assert_fail@plt+0x5cac>
   16c04:	push	{r4, r5, r6, lr}
   16c08:	mov	r6, r0
   16c0c:	mov	r5, r1
   16c10:	subs	r4, r2, #0
   16c14:	beq	16c40 <__assert_fail@plt+0x5d10>
   16c18:	mov	r1, r4
   16c1c:	mvn	r0, #0
   16c20:	bl	16d58 <__assert_fail@plt+0x5e28>
   16c24:	cmp	r0, r5
   16c28:	bcs	16c40 <__assert_fail@plt+0x5d10>
   16c2c:	bl	10e4c <__errno_location@plt>
   16c30:	mov	r3, #12
   16c34:	str	r3, [r0]
   16c38:	mov	r0, #0
   16c3c:	pop	{r4, r5, r6, pc}
   16c40:	mul	r1, r5, r4
   16c44:	mov	r0, r6
   16c48:	bl	16ab0 <__assert_fail@plt+0x5b80>
   16c4c:	pop	{r4, r5, r6, pc}
   16c50:	push	{lr}		; (str lr, [sp, #-4]!)
   16c54:	sub	sp, sp, #268	; 0x10c
   16c58:	ldr	r2, [pc, #68]	; 16ca4 <__assert_fail@plt+0x5d74>
   16c5c:	add	r1, sp, #4
   16c60:	bl	16cb0 <__assert_fail@plt+0x5d80>
   16c64:	cmp	r0, #0
   16c68:	movne	r0, #0
   16c6c:	bne	16c9c <__assert_fail@plt+0x5d6c>
   16c70:	ldr	r1, [pc, #48]	; 16ca8 <__assert_fail@plt+0x5d78>
   16c74:	add	r0, sp, #4
   16c78:	bl	10ce4 <strcmp@plt>
   16c7c:	cmp	r0, #0
   16c80:	moveq	r0, #0
   16c84:	beq	16c9c <__assert_fail@plt+0x5d6c>
   16c88:	ldr	r1, [pc, #28]	; 16cac <__assert_fail@plt+0x5d7c>
   16c8c:	add	r0, sp, #4
   16c90:	bl	10ce4 <strcmp@plt>
   16c94:	adds	r0, r0, #0
   16c98:	movne	r0, #1
   16c9c:	add	sp, sp, #268	; 0x10c
   16ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ca4:	andeq	r0, r0, r1, lsl #2
   16ca8:	andeq	r8, r1, r0, asr #13
   16cac:	andeq	r8, r1, r4, asr #13
   16cb0:	push	{r4, r5, r6, lr}
   16cb4:	mov	r6, r1
   16cb8:	mov	r4, r2
   16cbc:	mov	r1, #0
   16cc0:	bl	10ec4 <setlocale@plt>
   16cc4:	subs	r5, r0, #0
   16cc8:	beq	16cec <__assert_fail@plt+0x5dbc>
   16ccc:	mov	r0, r5
   16cd0:	bl	10e34 <strlen@plt>
   16cd4:	cmp	r4, r0
   16cd8:	bhi	16d04 <__assert_fail@plt+0x5dd4>
   16cdc:	cmp	r4, #0
   16ce0:	bne	16d1c <__assert_fail@plt+0x5dec>
   16ce4:	mov	r0, #34	; 0x22
   16ce8:	pop	{r4, r5, r6, pc}
   16cec:	cmp	r4, #0
   16cf0:	beq	16d40 <__assert_fail@plt+0x5e10>
   16cf4:	mov	r3, #0
   16cf8:	strb	r3, [r6]
   16cfc:	mov	r0, #22
   16d00:	pop	{r4, r5, r6, pc}
   16d04:	add	r2, r0, #1
   16d08:	mov	r1, r5
   16d0c:	mov	r0, r6
   16d10:	bl	10d2c <memcpy@plt>
   16d14:	mov	r0, #0
   16d18:	pop	{r4, r5, r6, pc}
   16d1c:	sub	r4, r4, #1
   16d20:	mov	r2, r4
   16d24:	mov	r1, r5
   16d28:	mov	r0, r6
   16d2c:	bl	10d2c <memcpy@plt>
   16d30:	mov	r3, #0
   16d34:	strb	r3, [r6, r4]
   16d38:	mov	r0, #34	; 0x22
   16d3c:	pop	{r4, r5, r6, pc}
   16d40:	mov	r0, #22
   16d44:	pop	{r4, r5, r6, pc}
   16d48:	push	{r4, lr}
   16d4c:	mov	r1, #0
   16d50:	bl	10ec4 <setlocale@plt>
   16d54:	pop	{r4, pc}
   16d58:	subs	r2, r1, #1
   16d5c:	bxeq	lr
   16d60:	bcc	16f38 <__assert_fail@plt+0x6008>
   16d64:	cmp	r0, r1
   16d68:	bls	16f1c <__assert_fail@plt+0x5fec>
   16d6c:	tst	r1, r2
   16d70:	beq	16f28 <__assert_fail@plt+0x5ff8>
   16d74:	clz	r3, r0
   16d78:	clz	r2, r1
   16d7c:	sub	r3, r2, r3
   16d80:	rsbs	r3, r3, #31
   16d84:	addne	r3, r3, r3, lsl #1
   16d88:	mov	r2, #0
   16d8c:	addne	pc, pc, r3, lsl #2
   16d90:	nop			; (mov r0, r0)
   16d94:	cmp	r0, r1, lsl #31
   16d98:	adc	r2, r2, r2
   16d9c:	subcs	r0, r0, r1, lsl #31
   16da0:	cmp	r0, r1, lsl #30
   16da4:	adc	r2, r2, r2
   16da8:	subcs	r0, r0, r1, lsl #30
   16dac:	cmp	r0, r1, lsl #29
   16db0:	adc	r2, r2, r2
   16db4:	subcs	r0, r0, r1, lsl #29
   16db8:	cmp	r0, r1, lsl #28
   16dbc:	adc	r2, r2, r2
   16dc0:	subcs	r0, r0, r1, lsl #28
   16dc4:	cmp	r0, r1, lsl #27
   16dc8:	adc	r2, r2, r2
   16dcc:	subcs	r0, r0, r1, lsl #27
   16dd0:	cmp	r0, r1, lsl #26
   16dd4:	adc	r2, r2, r2
   16dd8:	subcs	r0, r0, r1, lsl #26
   16ddc:	cmp	r0, r1, lsl #25
   16de0:	adc	r2, r2, r2
   16de4:	subcs	r0, r0, r1, lsl #25
   16de8:	cmp	r0, r1, lsl #24
   16dec:	adc	r2, r2, r2
   16df0:	subcs	r0, r0, r1, lsl #24
   16df4:	cmp	r0, r1, lsl #23
   16df8:	adc	r2, r2, r2
   16dfc:	subcs	r0, r0, r1, lsl #23
   16e00:	cmp	r0, r1, lsl #22
   16e04:	adc	r2, r2, r2
   16e08:	subcs	r0, r0, r1, lsl #22
   16e0c:	cmp	r0, r1, lsl #21
   16e10:	adc	r2, r2, r2
   16e14:	subcs	r0, r0, r1, lsl #21
   16e18:	cmp	r0, r1, lsl #20
   16e1c:	adc	r2, r2, r2
   16e20:	subcs	r0, r0, r1, lsl #20
   16e24:	cmp	r0, r1, lsl #19
   16e28:	adc	r2, r2, r2
   16e2c:	subcs	r0, r0, r1, lsl #19
   16e30:	cmp	r0, r1, lsl #18
   16e34:	adc	r2, r2, r2
   16e38:	subcs	r0, r0, r1, lsl #18
   16e3c:	cmp	r0, r1, lsl #17
   16e40:	adc	r2, r2, r2
   16e44:	subcs	r0, r0, r1, lsl #17
   16e48:	cmp	r0, r1, lsl #16
   16e4c:	adc	r2, r2, r2
   16e50:	subcs	r0, r0, r1, lsl #16
   16e54:	cmp	r0, r1, lsl #15
   16e58:	adc	r2, r2, r2
   16e5c:	subcs	r0, r0, r1, lsl #15
   16e60:	cmp	r0, r1, lsl #14
   16e64:	adc	r2, r2, r2
   16e68:	subcs	r0, r0, r1, lsl #14
   16e6c:	cmp	r0, r1, lsl #13
   16e70:	adc	r2, r2, r2
   16e74:	subcs	r0, r0, r1, lsl #13
   16e78:	cmp	r0, r1, lsl #12
   16e7c:	adc	r2, r2, r2
   16e80:	subcs	r0, r0, r1, lsl #12
   16e84:	cmp	r0, r1, lsl #11
   16e88:	adc	r2, r2, r2
   16e8c:	subcs	r0, r0, r1, lsl #11
   16e90:	cmp	r0, r1, lsl #10
   16e94:	adc	r2, r2, r2
   16e98:	subcs	r0, r0, r1, lsl #10
   16e9c:	cmp	r0, r1, lsl #9
   16ea0:	adc	r2, r2, r2
   16ea4:	subcs	r0, r0, r1, lsl #9
   16ea8:	cmp	r0, r1, lsl #8
   16eac:	adc	r2, r2, r2
   16eb0:	subcs	r0, r0, r1, lsl #8
   16eb4:	cmp	r0, r1, lsl #7
   16eb8:	adc	r2, r2, r2
   16ebc:	subcs	r0, r0, r1, lsl #7
   16ec0:	cmp	r0, r1, lsl #6
   16ec4:	adc	r2, r2, r2
   16ec8:	subcs	r0, r0, r1, lsl #6
   16ecc:	cmp	r0, r1, lsl #5
   16ed0:	adc	r2, r2, r2
   16ed4:	subcs	r0, r0, r1, lsl #5
   16ed8:	cmp	r0, r1, lsl #4
   16edc:	adc	r2, r2, r2
   16ee0:	subcs	r0, r0, r1, lsl #4
   16ee4:	cmp	r0, r1, lsl #3
   16ee8:	adc	r2, r2, r2
   16eec:	subcs	r0, r0, r1, lsl #3
   16ef0:	cmp	r0, r1, lsl #2
   16ef4:	adc	r2, r2, r2
   16ef8:	subcs	r0, r0, r1, lsl #2
   16efc:	cmp	r0, r1, lsl #1
   16f00:	adc	r2, r2, r2
   16f04:	subcs	r0, r0, r1, lsl #1
   16f08:	cmp	r0, r1
   16f0c:	adc	r2, r2, r2
   16f10:	subcs	r0, r0, r1
   16f14:	mov	r0, r2
   16f18:	bx	lr
   16f1c:	moveq	r0, #1
   16f20:	movne	r0, #0
   16f24:	bx	lr
   16f28:	clz	r2, r1
   16f2c:	rsb	r2, r2, #31
   16f30:	lsr	r0, r0, r2
   16f34:	bx	lr
   16f38:	cmp	r0, #0
   16f3c:	mvnne	r0, #0
   16f40:	b	17278 <__assert_fail@plt+0x6348>
   16f44:	cmp	r1, #0
   16f48:	beq	16f38 <__assert_fail@plt+0x6008>
   16f4c:	push	{r0, r1, lr}
   16f50:	bl	16d58 <__assert_fail@plt+0x5e28>
   16f54:	pop	{r1, r2, lr}
   16f58:	mul	r3, r2, r0
   16f5c:	sub	r1, r1, r3
   16f60:	bx	lr
   16f64:	cmp	r1, #0
   16f68:	beq	17174 <__assert_fail@plt+0x6244>
   16f6c:	eor	ip, r0, r1
   16f70:	rsbmi	r1, r1, #0
   16f74:	subs	r2, r1, #1
   16f78:	beq	17140 <__assert_fail@plt+0x6210>
   16f7c:	movs	r3, r0
   16f80:	rsbmi	r3, r0, #0
   16f84:	cmp	r3, r1
   16f88:	bls	1714c <__assert_fail@plt+0x621c>
   16f8c:	tst	r1, r2
   16f90:	beq	1715c <__assert_fail@plt+0x622c>
   16f94:	clz	r2, r3
   16f98:	clz	r0, r1
   16f9c:	sub	r2, r0, r2
   16fa0:	rsbs	r2, r2, #31
   16fa4:	addne	r2, r2, r2, lsl #1
   16fa8:	mov	r0, #0
   16fac:	addne	pc, pc, r2, lsl #2
   16fb0:	nop			; (mov r0, r0)
   16fb4:	cmp	r3, r1, lsl #31
   16fb8:	adc	r0, r0, r0
   16fbc:	subcs	r3, r3, r1, lsl #31
   16fc0:	cmp	r3, r1, lsl #30
   16fc4:	adc	r0, r0, r0
   16fc8:	subcs	r3, r3, r1, lsl #30
   16fcc:	cmp	r3, r1, lsl #29
   16fd0:	adc	r0, r0, r0
   16fd4:	subcs	r3, r3, r1, lsl #29
   16fd8:	cmp	r3, r1, lsl #28
   16fdc:	adc	r0, r0, r0
   16fe0:	subcs	r3, r3, r1, lsl #28
   16fe4:	cmp	r3, r1, lsl #27
   16fe8:	adc	r0, r0, r0
   16fec:	subcs	r3, r3, r1, lsl #27
   16ff0:	cmp	r3, r1, lsl #26
   16ff4:	adc	r0, r0, r0
   16ff8:	subcs	r3, r3, r1, lsl #26
   16ffc:	cmp	r3, r1, lsl #25
   17000:	adc	r0, r0, r0
   17004:	subcs	r3, r3, r1, lsl #25
   17008:	cmp	r3, r1, lsl #24
   1700c:	adc	r0, r0, r0
   17010:	subcs	r3, r3, r1, lsl #24
   17014:	cmp	r3, r1, lsl #23
   17018:	adc	r0, r0, r0
   1701c:	subcs	r3, r3, r1, lsl #23
   17020:	cmp	r3, r1, lsl #22
   17024:	adc	r0, r0, r0
   17028:	subcs	r3, r3, r1, lsl #22
   1702c:	cmp	r3, r1, lsl #21
   17030:	adc	r0, r0, r0
   17034:	subcs	r3, r3, r1, lsl #21
   17038:	cmp	r3, r1, lsl #20
   1703c:	adc	r0, r0, r0
   17040:	subcs	r3, r3, r1, lsl #20
   17044:	cmp	r3, r1, lsl #19
   17048:	adc	r0, r0, r0
   1704c:	subcs	r3, r3, r1, lsl #19
   17050:	cmp	r3, r1, lsl #18
   17054:	adc	r0, r0, r0
   17058:	subcs	r3, r3, r1, lsl #18
   1705c:	cmp	r3, r1, lsl #17
   17060:	adc	r0, r0, r0
   17064:	subcs	r3, r3, r1, lsl #17
   17068:	cmp	r3, r1, lsl #16
   1706c:	adc	r0, r0, r0
   17070:	subcs	r3, r3, r1, lsl #16
   17074:	cmp	r3, r1, lsl #15
   17078:	adc	r0, r0, r0
   1707c:	subcs	r3, r3, r1, lsl #15
   17080:	cmp	r3, r1, lsl #14
   17084:	adc	r0, r0, r0
   17088:	subcs	r3, r3, r1, lsl #14
   1708c:	cmp	r3, r1, lsl #13
   17090:	adc	r0, r0, r0
   17094:	subcs	r3, r3, r1, lsl #13
   17098:	cmp	r3, r1, lsl #12
   1709c:	adc	r0, r0, r0
   170a0:	subcs	r3, r3, r1, lsl #12
   170a4:	cmp	r3, r1, lsl #11
   170a8:	adc	r0, r0, r0
   170ac:	subcs	r3, r3, r1, lsl #11
   170b0:	cmp	r3, r1, lsl #10
   170b4:	adc	r0, r0, r0
   170b8:	subcs	r3, r3, r1, lsl #10
   170bc:	cmp	r3, r1, lsl #9
   170c0:	adc	r0, r0, r0
   170c4:	subcs	r3, r3, r1, lsl #9
   170c8:	cmp	r3, r1, lsl #8
   170cc:	adc	r0, r0, r0
   170d0:	subcs	r3, r3, r1, lsl #8
   170d4:	cmp	r3, r1, lsl #7
   170d8:	adc	r0, r0, r0
   170dc:	subcs	r3, r3, r1, lsl #7
   170e0:	cmp	r3, r1, lsl #6
   170e4:	adc	r0, r0, r0
   170e8:	subcs	r3, r3, r1, lsl #6
   170ec:	cmp	r3, r1, lsl #5
   170f0:	adc	r0, r0, r0
   170f4:	subcs	r3, r3, r1, lsl #5
   170f8:	cmp	r3, r1, lsl #4
   170fc:	adc	r0, r0, r0
   17100:	subcs	r3, r3, r1, lsl #4
   17104:	cmp	r3, r1, lsl #3
   17108:	adc	r0, r0, r0
   1710c:	subcs	r3, r3, r1, lsl #3
   17110:	cmp	r3, r1, lsl #2
   17114:	adc	r0, r0, r0
   17118:	subcs	r3, r3, r1, lsl #2
   1711c:	cmp	r3, r1, lsl #1
   17120:	adc	r0, r0, r0
   17124:	subcs	r3, r3, r1, lsl #1
   17128:	cmp	r3, r1
   1712c:	adc	r0, r0, r0
   17130:	subcs	r3, r3, r1
   17134:	cmp	ip, #0
   17138:	rsbmi	r0, r0, #0
   1713c:	bx	lr
   17140:	teq	ip, r0
   17144:	rsbmi	r0, r0, #0
   17148:	bx	lr
   1714c:	movcc	r0, #0
   17150:	asreq	r0, ip, #31
   17154:	orreq	r0, r0, #1
   17158:	bx	lr
   1715c:	clz	r2, r1
   17160:	rsb	r2, r2, #31
   17164:	cmp	ip, #0
   17168:	lsr	r0, r3, r2
   1716c:	rsbmi	r0, r0, #0
   17170:	bx	lr
   17174:	cmp	r0, #0
   17178:	mvngt	r0, #-2147483648	; 0x80000000
   1717c:	movlt	r0, #-2147483648	; 0x80000000
   17180:	b	17278 <__assert_fail@plt+0x6348>
   17184:	cmp	r1, #0
   17188:	beq	17174 <__assert_fail@plt+0x6244>
   1718c:	push	{r0, r1, lr}
   17190:	bl	16f6c <__assert_fail@plt+0x603c>
   17194:	pop	{r1, r2, lr}
   17198:	mul	r3, r2, r0
   1719c:	sub	r1, r1, r3
   171a0:	bx	lr
   171a4:	cmp	r3, #0
   171a8:	cmpeq	r2, #0
   171ac:	bne	171d0 <__assert_fail@plt+0x62a0>
   171b0:	cmp	r1, #0
   171b4:	movlt	r1, #-2147483648	; 0x80000000
   171b8:	movlt	r0, #0
   171bc:	blt	171cc <__assert_fail@plt+0x629c>
   171c0:	cmpeq	r0, #0
   171c4:	mvnne	r1, #-2147483648	; 0x80000000
   171c8:	mvnne	r0, #0
   171cc:	b	17278 <__assert_fail@plt+0x6348>
   171d0:	sub	sp, sp, #8
   171d4:	push	{sp, lr}
   171d8:	cmp	r1, #0
   171dc:	blt	171fc <__assert_fail@plt+0x62cc>
   171e0:	cmp	r3, #0
   171e4:	blt	17230 <__assert_fail@plt+0x6300>
   171e8:	bl	17288 <__assert_fail@plt+0x6358>
   171ec:	ldr	lr, [sp, #4]
   171f0:	add	sp, sp, #8
   171f4:	pop	{r2, r3}
   171f8:	bx	lr
   171fc:	rsbs	r0, r0, #0
   17200:	sbc	r1, r1, r1, lsl #1
   17204:	cmp	r3, #0
   17208:	blt	17254 <__assert_fail@plt+0x6324>
   1720c:	bl	17288 <__assert_fail@plt+0x6358>
   17210:	ldr	lr, [sp, #4]
   17214:	add	sp, sp, #8
   17218:	pop	{r2, r3}
   1721c:	rsbs	r0, r0, #0
   17220:	sbc	r1, r1, r1, lsl #1
   17224:	rsbs	r2, r2, #0
   17228:	sbc	r3, r3, r3, lsl #1
   1722c:	bx	lr
   17230:	rsbs	r2, r2, #0
   17234:	sbc	r3, r3, r3, lsl #1
   17238:	bl	17288 <__assert_fail@plt+0x6358>
   1723c:	ldr	lr, [sp, #4]
   17240:	add	sp, sp, #8
   17244:	pop	{r2, r3}
   17248:	rsbs	r0, r0, #0
   1724c:	sbc	r1, r1, r1, lsl #1
   17250:	bx	lr
   17254:	rsbs	r2, r2, #0
   17258:	sbc	r3, r3, r3, lsl #1
   1725c:	bl	17288 <__assert_fail@plt+0x6358>
   17260:	ldr	lr, [sp, #4]
   17264:	add	sp, sp, #8
   17268:	pop	{r2, r3}
   1726c:	rsbs	r2, r2, #0
   17270:	sbc	r3, r3, r3, lsl #1
   17274:	bx	lr
   17278:	push	{r1, lr}
   1727c:	mov	r0, #8
   17280:	bl	10cd8 <raise@plt>
   17284:	pop	{r1, pc}
   17288:	cmp	r1, r3
   1728c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17290:	cmpeq	r0, r2
   17294:	mov	r4, r0
   17298:	mov	r5, r1
   1729c:	ldr	r9, [sp, #28]
   172a0:	movcc	r0, #0
   172a4:	movcc	r1, #0
   172a8:	bcc	173a0 <__assert_fail@plt+0x6470>
   172ac:	cmp	r3, #0
   172b0:	clzeq	ip, r2
   172b4:	clzne	ip, r3
   172b8:	addeq	ip, ip, #32
   172bc:	cmp	r5, #0
   172c0:	clzeq	r1, r4
   172c4:	addeq	r1, r1, #32
   172c8:	clzne	r1, r5
   172cc:	sub	ip, ip, r1
   172d0:	sub	lr, ip, #32
   172d4:	lsl	r7, r3, ip
   172d8:	rsb	r8, ip, #32
   172dc:	orr	r7, r7, r2, lsl lr
   172e0:	orr	r7, r7, r2, lsr r8
   172e4:	lsl	r6, r2, ip
   172e8:	cmp	r5, r7
   172ec:	cmpeq	r4, r6
   172f0:	movcc	r0, #0
   172f4:	movcc	r1, #0
   172f8:	bcc	17314 <__assert_fail@plt+0x63e4>
   172fc:	mov	r3, #1
   17300:	subs	r4, r4, r6
   17304:	lsl	r1, r3, lr
   17308:	lsl	r0, r3, ip
   1730c:	orr	r1, r1, r3, lsr r8
   17310:	sbc	r5, r5, r7
   17314:	cmp	ip, #0
   17318:	beq	173a0 <__assert_fail@plt+0x6470>
   1731c:	lsrs	r3, r7, #1
   17320:	rrx	r2, r6
   17324:	mov	r6, ip
   17328:	b	1734c <__assert_fail@plt+0x641c>
   1732c:	subs	r4, r4, r2
   17330:	sbc	r5, r5, r3
   17334:	adds	r4, r4, r4
   17338:	adc	r5, r5, r5
   1733c:	adds	r4, r4, #1
   17340:	adc	r5, r5, #0
   17344:	subs	r6, r6, #1
   17348:	beq	17368 <__assert_fail@plt+0x6438>
   1734c:	cmp	r5, r3
   17350:	cmpeq	r4, r2
   17354:	bcs	1732c <__assert_fail@plt+0x63fc>
   17358:	adds	r4, r4, r4
   1735c:	adc	r5, r5, r5
   17360:	subs	r6, r6, #1
   17364:	bne	1734c <__assert_fail@plt+0x641c>
   17368:	lsr	r6, r4, ip
   1736c:	lsr	r7, r5, ip
   17370:	orr	r6, r6, r5, lsl r8
   17374:	adds	r2, r0, r4
   17378:	orr	r6, r6, r5, lsr lr
   1737c:	adc	r3, r1, r5
   17380:	lsl	r1, r7, ip
   17384:	orr	r1, r1, r6, lsl lr
   17388:	lsl	r0, r6, ip
   1738c:	orr	r1, r1, r6, lsr r8
   17390:	subs	r0, r2, r0
   17394:	mov	r4, r6
   17398:	mov	r5, r7
   1739c:	sbc	r1, r3, r1
   173a0:	cmp	r9, #0
   173a4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   173a8:	strd	r4, [r9]
   173ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   173b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173b4:	mov	r7, r0
   173b8:	ldr	r6, [pc, #72]	; 17408 <__assert_fail@plt+0x64d8>
   173bc:	ldr	r5, [pc, #72]	; 1740c <__assert_fail@plt+0x64dc>
   173c0:	add	r6, pc, r6
   173c4:	add	r5, pc, r5
   173c8:	sub	r6, r6, r5
   173cc:	mov	r8, r1
   173d0:	mov	r9, r2
   173d4:	bl	10ca0 <calloc@plt-0x20>
   173d8:	asrs	r6, r6, #2
   173dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   173e0:	mov	r4, #0
   173e4:	add	r4, r4, #1
   173e8:	ldr	r3, [r5], #4
   173ec:	mov	r2, r9
   173f0:	mov	r1, r8
   173f4:	mov	r0, r7
   173f8:	blx	r3
   173fc:	cmp	r6, r4
   17400:	bne	173e4 <__assert_fail@plt+0x64b4>
   17404:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17408:	andeq	r1, r1, r8, asr #22
   1740c:	andeq	r1, r1, r0, asr #22
   17410:	bx	lr
   17414:	ldr	r3, [pc, #12]	; 17428 <__assert_fail@plt+0x64f8>
   17418:	mov	r1, #0
   1741c:	add	r3, pc, r3
   17420:	ldr	r2, [r3]
   17424:	b	10e58 <__cxa_atexit@plt>
   17428:	andeq	r1, r1, r4, asr #25

Disassembly of section .fini:

0001742c <.fini>:
   1742c:	push	{r3, lr}
   17430:	pop	{r3, pc}
