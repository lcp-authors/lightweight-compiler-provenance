
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d0 <.init>:
   128d0:	push	{r3, lr}
   128d4:	bl	12a04 <_start@@Base+0x3c>
   128d8:	pop	{r3, pc}

Disassembly of section .plt:

000128dc <free@plt-0x14>:
   128dc:	push	{lr}		; (str lr, [sp, #-4]!)
   128e0:	ldr	lr, [pc, #4]	; 128ec <free@plt-0x4>
   128e4:	add	lr, pc, lr
   128e8:	ldr	pc, [lr, #8]!
   128ec:	andeq	lr, r1, r4, lsl r7

000128f0 <free@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #122880	; 0x1e000
   128f8:	ldr	pc, [ip, #1812]!	; 0x714

000128fc <memcpy@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #122880	; 0x1e000
   12904:	ldr	pc, [ip, #1804]!	; 0x70c

00012908 <__isinff@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #122880	; 0x1e000
   12910:	ldr	pc, [ip, #1796]!	; 0x704

00012914 <__isinf@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #122880	; 0x1e000
   1291c:	ldr	pc, [ip, #1788]!	; 0x6fc

00012920 <realloc@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #122880	; 0x1e000
   12928:	ldr	pc, [ip, #1780]!	; 0x6f4

0001292c <fwrite@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #122880	; 0x1e000
   12934:	ldr	pc, [ip, #1772]!	; 0x6ec

00012938 <malloc@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #122880	; 0x1e000
   12940:	ldr	pc, [ip, #1764]!	; 0x6e4

00012944 <__libc_start_main@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #122880	; 0x1e000
   1294c:	ldr	pc, [ip, #1756]!	; 0x6dc

00012950 <__gmon_start__@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #122880	; 0x1e000
   12958:	ldr	pc, [ip, #1748]!	; 0x6d4

0001295c <bcmp@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #122880	; 0x1e000
   12964:	ldr	pc, [ip, #1740]!	; 0x6cc

00012968 <strlen@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #122880	; 0x1e000
   12970:	ldr	pc, [ip, #1732]!	; 0x6c4

00012974 <fprintf@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #122880	; 0x1e000
   1297c:	ldr	pc, [ip, #1724]!	; 0x6bc

00012980 <posix_memalign@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #122880	; 0x1e000
   12988:	ldr	pc, [ip, #1716]!	; 0x6b4

0001298c <memset@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #122880	; 0x1e000
   12994:	ldr	pc, [ip, #1708]!	; 0x6ac

00012998 <strtod@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #122880	; 0x1e000
   129a0:	ldr	pc, [ip, #1700]!	; 0x6a4

000129a4 <memchr@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #122880	; 0x1e000
   129ac:	ldr	pc, [ip, #1692]!	; 0x69c

000129b0 <abort@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #122880	; 0x1e000
   129b8:	ldr	pc, [ip, #1684]!	; 0x694

000129bc <__assert_fail@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #122880	; 0x1e000
   129c4:	ldr	pc, [ip, #1676]!	; 0x68c

Disassembly of section .text:

000129c8 <_start@@Base>:
   129c8:	mov	fp, #0
   129cc:	mov	lr, #0
   129d0:	pop	{r1}		; (ldr r1, [sp], #4)
   129d4:	mov	r2, sp
   129d8:	push	{r2}		; (str r2, [sp, #-4]!)
   129dc:	push	{r0}		; (str r0, [sp, #-4]!)
   129e0:	ldr	ip, [pc, #16]	; 129f8 <_start@@Base+0x30>
   129e4:	push	{ip}		; (str ip, [sp, #-4]!)
   129e8:	ldr	r0, [pc, #12]	; 129fc <_start@@Base+0x34>
   129ec:	ldr	r3, [pc, #12]	; 12a00 <_start@@Base+0x38>
   129f0:	bl	12944 <__libc_start_main@plt>
   129f4:	bl	129b0 <abort@plt>
   129f8:			; <UNDEFINED> instruction: 0x0001ddb0
   129fc:	andeq	r3, r1, r0, ror #28
   12a00:	andeq	sp, r1, r0, asr sp
   12a04:	ldr	r3, [pc, #20]	; 12a20 <_start@@Base+0x58>
   12a08:	ldr	r2, [pc, #20]	; 12a24 <_start@@Base+0x5c>
   12a0c:	add	r3, pc, r3
   12a10:	ldr	r2, [r3, r2]
   12a14:	cmp	r2, #0
   12a18:	bxeq	lr
   12a1c:	b	12950 <__gmon_start__@plt>
   12a20:	andeq	lr, r1, ip, ror #11
   12a24:	andeq	r0, r0, r0, rrx
   12a28:	ldr	r0, [pc, #24]	; 12a48 <_start@@Base+0x80>
   12a2c:	ldr	r3, [pc, #24]	; 12a4c <_start@@Base+0x84>
   12a30:	cmp	r3, r0
   12a34:	bxeq	lr
   12a38:	ldr	r3, [pc, #16]	; 12a50 <_start@@Base+0x88>
   12a3c:	cmp	r3, #0
   12a40:	bxeq	lr
   12a44:	bx	r3
   12a48:	andeq	r1, r3, r4, ror r0
   12a4c:	andeq	r1, r3, r4, ror r0
   12a50:	andeq	r0, r0, r0
   12a54:	ldr	r0, [pc, #36]	; 12a80 <_start@@Base+0xb8>
   12a58:	ldr	r1, [pc, #36]	; 12a84 <_start@@Base+0xbc>
   12a5c:	sub	r1, r1, r0
   12a60:	asr	r1, r1, #2
   12a64:	add	r1, r1, r1, lsr #31
   12a68:	asrs	r1, r1, #1
   12a6c:	bxeq	lr
   12a70:	ldr	r3, [pc, #16]	; 12a88 <_start@@Base+0xc0>
   12a74:	cmp	r3, #0
   12a78:	bxeq	lr
   12a7c:	bx	r3
   12a80:	andeq	r1, r3, r4, ror r0
   12a84:	andeq	r1, r3, r4, ror r0
   12a88:	andeq	r0, r0, r0
   12a8c:	push	{r4, lr}
   12a90:	ldr	r4, [pc, #24]	; 12ab0 <_start@@Base+0xe8>
   12a94:	ldrb	r3, [r4]
   12a98:	cmp	r3, #0
   12a9c:	popne	{r4, pc}
   12aa0:	bl	12a28 <_start@@Base+0x60>
   12aa4:	mov	r3, #1
   12aa8:	strb	r3, [r4]
   12aac:	pop	{r4, pc}
   12ab0:	andeq	r1, r3, r4, ror r0
   12ab4:	b	12a54 <_start@@Base+0x8c>

00012ab8 <test@@Base>:
   12ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12abc:	add	fp, sp, #28
   12ac0:	sub	sp, sp, #84	; 0x54
   12ac4:	vmov.i32	q8, #0	; 0x00000000
   12ac8:	mov	r9, r0
   12acc:	add	r0, sp, #24
   12ad0:	mov	r4, r1
   12ad4:	str	r3, [sp, #12]
   12ad8:	mov	r8, r2
   12adc:	mov	r2, #0
   12ae0:	mov	r3, #0
   12ae4:	add	r1, r0, #16
   12ae8:	vst1.64	{d16-d17}, [r1]
   12aec:	mov	r1, #28
   12af0:	vst1.64	{d16-d17}, [r0], r1
   12af4:	vst1.32	{d16-d17}, [r0]
   12af8:	mov	r0, #1
   12afc:	str	r4, [sp, #28]
   12b00:	str	r0, [sp, #40]	; 0x28
   12b04:	mov	r0, r9
   12b08:	ldr	r1, [pc, #4048]	; 13ae0 <test@@Base+0x1028>
   12b0c:	add	r1, pc, r1
   12b10:	bl	14e28 <flatcc_builder_start_buffer@@Base>
   12b14:	sub	r0, r8, r4
   12b18:	cmp	r0, #2
   12b1c:	blt	12b88 <test@@Base+0xd0>
   12b20:	ldrb	r0, [r4]
   12b24:	cmp	r0, #32
   12b28:	bls	12b74 <test@@Base+0xbc>
   12b2c:	mov	r6, r4
   12b30:	cmp	r6, r8
   12b34:	beq	13bfc <test@@Base+0x1144>
   12b38:	bcs	13c38 <test@@Base+0x1180>
   12b3c:	ldrb	r0, [r6]
   12b40:	cmp	r0, #123	; 0x7b
   12b44:	bne	13c38 <test@@Base+0x1180>
   12b48:	add	r1, r6, #1
   12b4c:	sub	r0, r8, r1
   12b50:	cmp	r0, #2
   12b54:	blt	12bb8 <test@@Base+0x100>
   12b58:	ldrb	r0, [r1]
   12b5c:	cmp	r0, #32
   12b60:	bls	12ba8 <test@@Base+0xf0>
   12b64:	mov	r6, r1
   12b68:	cmp	r6, r8
   12b6c:	bne	12bd0 <test@@Base+0x118>
   12b70:	b	13bfc <test@@Base+0x1144>
   12b74:	bne	12b88 <test@@Base+0xd0>
   12b78:	mov	r6, r4
   12b7c:	ldrb	r0, [r6, #1]!
   12b80:	cmp	r0, #32
   12b84:	bhi	12b9c <test@@Base+0xe4>
   12b88:	add	r0, sp, #24
   12b8c:	mov	r1, r4
   12b90:	mov	r2, r8
   12b94:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   12b98:	mov	r6, r0
   12b9c:	cmp	r6, r8
   12ba0:	bne	12b38 <test@@Base+0x80>
   12ba4:	b	13bfc <test@@Base+0x1144>
   12ba8:	bne	12bb8 <test@@Base+0x100>
   12bac:	ldrb	r0, [r6, #2]!
   12bb0:	cmp	r0, #32
   12bb4:	bhi	12bc8 <test@@Base+0x110>
   12bb8:	add	r0, sp, #24
   12bbc:	mov	r2, r8
   12bc0:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   12bc4:	mov	r6, r0
   12bc8:	cmp	r6, r8
   12bcc:	beq	13bfc <test@@Base+0x1144>
   12bd0:	mov	r0, r9
   12bd4:	mov	r1, #11
   12bd8:	bl	16404 <flatcc_builder_start_table@@Base>
   12bdc:	add	r0, sp, #20
   12be0:	add	r4, sp, #24
   12be4:	str	r9, [sp, #16]
   12be8:	add	r0, r0, #1
   12bec:	str	r0, [sp, #8]
   12bf0:	cmp	r6, r8
   12bf4:	mov	lr, r8
   12bf8:	beq	12c44 <test@@Base+0x18c>
   12bfc:	ldrb	r0, [r6]
   12c00:	cmp	r0, #46	; 0x2e
   12c04:	beq	12c1c <test@@Base+0x164>
   12c08:	cmp	r0, #34	; 0x22
   12c0c:	bne	12c38 <test@@Base+0x180>
   12c10:	mov	r0, #0
   12c14:	add	lr, r6, #1
   12c18:	b	12c40 <test@@Base+0x188>
   12c1c:	mov	r0, r4
   12c20:	mov	r1, r6
   12c24:	mov	r2, r8
   12c28:	mov	r3, #5
   12c2c:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   12c30:	mov	lr, r0
   12c34:	b	12c44 <test@@Base+0x18c>
   12c38:	mov	r0, #1
   12c3c:	mov	lr, r6
   12c40:	str	r0, [sp, #36]	; 0x24
   12c44:	sub	r3, r8, lr
   12c48:	mov	r0, #8
   12c4c:	cmp	r3, #8
   12c50:	movcc	r0, r3
   12c54:	sub	r0, r0, #1
   12c58:	cmp	r0, #7
   12c5c:	bhi	13c24 <test@@Base+0x116c>
   12c60:	add	r1, pc, #36	; 0x24
   12c64:	mov	sl, #0
   12c68:	mov	ip, #0
   12c6c:	mov	r9, #0
   12c70:	mov	r6, #0
   12c74:	mov	r4, #0
   12c78:	mov	r2, #0
   12c7c:	mov	r5, #0
   12c80:	ldr	r7, [r1, r0, lsl #2]
   12c84:	mov	r0, #0
   12c88:	add	pc, r1, r7
   12c8c:	andeq	r0, r0, r4, rrx
   12c90:	andeq	r0, r0, ip, asr r0
   12c94:	andeq	r0, r0, r4, asr r0
   12c98:	andeq	r0, r0, ip, asr #32
   12c9c:	andeq	r0, r0, r0, asr #32
   12ca0:	andeq	r0, r0, r4, lsr r0
   12ca4:	andeq	r0, r0, r4, lsr #32
   12ca8:	andeq	r0, r0, r0, lsr #32
   12cac:	ldrb	ip, [lr, #7]
   12cb0:	ldrb	r0, [lr, #6]
   12cb4:	mov	r9, sl
   12cb8:	orr	r0, ip, r0, lsl #8
   12cbc:	mov	sl, r0
   12cc0:	ldrb	r0, [lr, #5]
   12cc4:	orr	sl, sl, r0, lsl #16
   12cc8:	mov	r0, r9
   12ccc:	ldrb	r1, [lr, #4]
   12cd0:	mov	r6, r0
   12cd4:	orr	sl, sl, r1, lsl #24
   12cd8:	ldrb	r0, [lr, #3]
   12cdc:	orr	r4, r0, r6
   12ce0:	ldrb	r0, [lr, #2]
   12ce4:	orr	r2, r4, r0, lsl #8
   12ce8:	ldrb	r0, [lr, #1]
   12cec:	orr	r5, r2, r0, lsl #16
   12cf0:	mov	r1, lr
   12cf4:	movw	r2, #0
   12cf8:	cmp	r3, #8
   12cfc:	movw	r6, #25455	; 0x636f
   12d00:	ldrb	r0, [r1], #8
   12d04:	movt	r2, #28260	; 0x6e64
   12d08:	movt	r6, #29541	; 0x7365
   12d0c:	movle	r1, r8
   12d10:	orr	r3, r5, r0, lsl #24
   12d14:	mov	r0, sl
   12d18:	bfc	r0, #0, #16
   12d1c:	subs	r2, r0, r2
   12d20:	sbcs	r2, r3, r6
   12d24:	bcs	12de4 <test@@Base+0x32c>
   12d28:	movw	r0, #29299	; 0x7273
   12d2c:	ldr	r9, [sp, #16]
   12d30:	and	r1, sl, #-16777216	; 0xff000000
   12d34:	add	r4, sp, #24
   12d38:	movt	r0, #26217	; 0x6669
   12d3c:	eor	r1, r1, #1946157056	; 0x74000000
   12d40:	eor	r0, r3, r0
   12d44:	orrs	r0, r1, r0
   12d48:	bne	13c24 <test@@Base+0x116c>
   12d4c:	ldr	r1, [sp, #36]	; 0x24
   12d50:	add	r0, lr, #5
   12d54:	cmp	r1, #0
   12d58:	beq	12f70 <test@@Base+0x4b8>
   12d5c:	cmp	r0, r8
   12d60:	mov	r1, r8
   12d64:	beq	1328c <test@@Base+0x7d4>
   12d68:	ldrb	r3, [r0]
   12d6c:	mov	r1, r0
   12d70:	cmp	r3, #33	; 0x21
   12d74:	bcc	1328c <test@@Base+0x7d4>
   12d78:	add	r1, lr, #6
   12d7c:	uxtb	r0, r3
   12d80:	cmp	r0, #46	; 0x2e
   12d84:	cmpne	r0, #95	; 0x5f
   12d88:	bne	12da4 <test@@Base+0x2ec>
   12d8c:	cmp	r8, r1
   12d90:	beq	1322c <test@@Base+0x774>
   12d94:	ldrb	r3, [r1], #1
   12d98:	cmp	r3, #33	; 0x21
   12d9c:	bcs	12d7c <test@@Base+0x2c4>
   12da0:	b	12dd4 <test@@Base+0x31c>
   12da4:	sxtb	r2, r3
   12da8:	cmp	r2, #0
   12dac:	bmi	12d8c <test@@Base+0x2d4>
   12db0:	sub	r2, r3, #48	; 0x30
   12db4:	uxtb	r2, r2
   12db8:	cmp	r2, #9
   12dbc:	bls	12d8c <test@@Base+0x2d4>
   12dc0:	orr	r2, r3, #32
   12dc4:	sub	r2, r2, #97	; 0x61
   12dc8:	uxtb	r2, r2
   12dcc:	cmp	r2, #26
   12dd0:	bcc	12d8c <test@@Base+0x2d4>
   12dd4:	sub	r1, r1, #1
   12dd8:	cmp	r0, #46	; 0x2e
   12ddc:	beq	13238 <test@@Base+0x780>
   12de0:	b	1328c <test@@Base+0x7d4>
   12de4:	movw	r2, #27764	; 0x6c74
   12de8:	movt	r2, #31349	; 0x7a75
   12dec:	cmp	r3, r2
   12df0:	bhi	12ec0 <test@@Base+0x408>
   12df4:	movw	r5, #29472	; 0x7320
   12df8:	movt	r5, #28260	; 0x6e64
   12dfc:	subs	r2, sl, r5
   12e00:	sbcs	r2, r3, r6
   12e04:	bcs	12fb4 <test@@Base+0x4fc>
   12e08:	movw	r1, #0
   12e0c:	movt	r1, #28260	; 0x6e64
   12e10:	eor	r0, r0, r1
   12e14:	eor	r1, r3, r6
   12e18:	orrs	r0, r0, r1
   12e1c:	bne	13c84 <test@@Base+0x11cc>
   12e20:	ldr	r1, [sp, #36]	; 0x24
   12e24:	ldr	r9, [sp, #16]
   12e28:	add	r0, lr, #6
   12e2c:	cmp	r1, #0
   12e30:	beq	131e4 <test@@Base+0x72c>
   12e34:	cmp	r0, r8
   12e38:	mov	r1, r8
   12e3c:	add	r4, sp, #24
   12e40:	beq	137d0 <test@@Base+0xd18>
   12e44:	ldrb	r3, [r0]
   12e48:	mov	r1, r0
   12e4c:	cmp	r3, #33	; 0x21
   12e50:	bcc	137d0 <test@@Base+0xd18>
   12e54:	add	r1, lr, #7
   12e58:	uxtb	r0, r3
   12e5c:	cmp	r0, #46	; 0x2e
   12e60:	cmpne	r0, #95	; 0x5f
   12e64:	bne	12e80 <test@@Base+0x3c8>
   12e68:	cmp	r8, r1
   12e6c:	beq	13568 <test@@Base+0xab0>
   12e70:	ldrb	r3, [r1], #1
   12e74:	cmp	r3, #33	; 0x21
   12e78:	bcs	12e58 <test@@Base+0x3a0>
   12e7c:	b	12eb0 <test@@Base+0x3f8>
   12e80:	sxtb	r2, r3
   12e84:	cmp	r2, #0
   12e88:	bmi	12e68 <test@@Base+0x3b0>
   12e8c:	sub	r2, r3, #48	; 0x30
   12e90:	uxtb	r2, r2
   12e94:	cmp	r2, #9
   12e98:	bls	12e68 <test@@Base+0x3b0>
   12e9c:	orr	r2, r3, #32
   12ea0:	sub	r2, r2, #97	; 0x61
   12ea4:	uxtb	r2, r2
   12ea8:	cmp	r2, #26
   12eac:	bcc	12e68 <test@@Base+0x3b0>
   12eb0:	sub	r1, r1, #1
   12eb4:	cmp	r0, #46	; 0x2e
   12eb8:	beq	13574 <test@@Base+0xabc>
   12ebc:	b	137d0 <test@@Base+0xd18>
   12ec0:	movw	r0, #27765	; 0x6c75
   12ec4:	movt	r0, #31349	; 0x7a75
   12ec8:	teq	r3, r0
   12ecc:	bne	13c84 <test@@Base+0x11cc>
   12ed0:	ldr	r1, [sp, #36]	; 0x24
   12ed4:	ldr	r9, [sp, #16]
   12ed8:	add	r0, lr, #4
   12edc:	cmp	r1, #0
   12ee0:	beq	130ec <test@@Base+0x634>
   12ee4:	cmp	r0, r8
   12ee8:	mov	r1, r8
   12eec:	add	r4, sp, #24
   12ef0:	beq	1359c <test@@Base+0xae4>
   12ef4:	ldrb	r3, [r0]
   12ef8:	mov	r1, r0
   12efc:	cmp	r3, #33	; 0x21
   12f00:	bcc	1359c <test@@Base+0xae4>
   12f04:	add	r1, lr, #5
   12f08:	uxtb	r0, r3
   12f0c:	cmp	r0, #46	; 0x2e
   12f10:	cmpne	r0, #95	; 0x5f
   12f14:	bne	12f30 <test@@Base+0x478>
   12f18:	cmp	r8, r1
   12f1c:	beq	13258 <test@@Base+0x7a0>
   12f20:	ldrb	r3, [r1], #1
   12f24:	cmp	r3, #33	; 0x21
   12f28:	bcs	12f08 <test@@Base+0x450>
   12f2c:	b	12f60 <test@@Base+0x4a8>
   12f30:	sxtb	r2, r3
   12f34:	cmp	r2, #0
   12f38:	bmi	12f18 <test@@Base+0x460>
   12f3c:	sub	r2, r3, #48	; 0x30
   12f40:	uxtb	r2, r2
   12f44:	cmp	r2, #9
   12f48:	bls	12f18 <test@@Base+0x460>
   12f4c:	orr	r2, r3, #32
   12f50:	sub	r2, r2, #97	; 0x61
   12f54:	uxtb	r2, r2
   12f58:	cmp	r2, #26
   12f5c:	bcc	12f18 <test@@Base+0x460>
   12f60:	sub	r1, r1, #1
   12f64:	cmp	r0, #46	; 0x2e
   12f68:	beq	13264 <test@@Base+0x7ac>
   12f6c:	b	1359c <test@@Base+0xae4>
   12f70:	cmp	r0, r8
   12f74:	mov	r1, r8
   12f78:	bne	12f94 <test@@Base+0x4dc>
   12f7c:	b	13278 <test@@Base+0x7c0>
   12f80:	cmp	r1, #34	; 0x22
   12f84:	beq	131dc <test@@Base+0x724>
   12f88:	add	r0, r0, #1
   12f8c:	cmp	r0, r8
   12f90:	beq	13248 <test@@Base+0x790>
   12f94:	ldrb	r1, [r0]
   12f98:	cmp	r1, #92	; 0x5c
   12f9c:	bne	12f80 <test@@Base+0x4c8>
   12fa0:	sub	r1, r8, r0
   12fa4:	cmp	r1, #2
   12fa8:	blt	13274 <test@@Base+0x7bc>
   12fac:	add	r0, r0, #1
   12fb0:	b	12f88 <test@@Base+0x4d0>
   12fb4:	eor	r0, sl, r5
   12fb8:	eor	r2, r3, r6
   12fbc:	orrs	r0, r0, r2
   12fc0:	bne	13c84 <test@@Base+0x11cc>
   12fc4:	sub	r0, r8, r1
   12fc8:	mov	r2, #8
   12fcc:	ldr	r9, [sp, #16]
   12fd0:	add	r4, sp, #24
   12fd4:	cmp	r0, #8
   12fd8:	movcs	r0, r2
   12fdc:	sub	r2, r0, #1
   12fe0:	cmp	r2, #7
   12fe4:	bhi	13dc0 <test@@Base+0x1308>
   12fe8:	add	r3, pc, #8
   12fec:	mov	r0, #0
   12ff0:	ldr	r2, [r3, r2, lsl #2]
   12ff4:	add	pc, r3, r2
   12ff8:	andeq	r0, r0, r4, lsr r0
   12ffc:	andeq	r0, r0, ip, lsr #32
   13000:	andeq	r0, r0, r4, lsr #32
   13004:	andeq	r0, r0, r0, lsr #32
   13008:	andeq	r0, r0, r0, lsr #32
   1300c:	andeq	r0, r0, r0, lsr #32
   13010:	andeq	r0, r0, r0, lsr #32
   13014:	andeq	r0, r0, r0, lsr #32
   13018:	ldrb	r0, [r1, #3]
   1301c:	ldrb	r2, [r1, #2]
   13020:	orr	r0, r0, r2, lsl #8
   13024:	ldrb	r2, [r1, #1]
   13028:	orr	r0, r0, r2, lsl #16
   1302c:	ldrb	r2, [r1]
   13030:	orr	r0, r0, r2, lsl #24
   13034:	movw	r2, #26227	; 0x6673
   13038:	movt	r2, #27749	; 0x6c65
   1303c:	cmp	r0, r2
   13040:	bhi	13134 <test@@Base+0x67c>
   13044:	movw	r2, #24932	; 0x6164
   13048:	movt	r2, #27749	; 0x6c65
   1304c:	teq	r0, r2
   13050:	bne	13dc0 <test@@Base+0x1308>
   13054:	ldr	r2, [sp, #36]	; 0x24
   13058:	add	r0, r1, #4
   1305c:	cmp	r2, #0
   13060:	beq	134d8 <test@@Base+0xa20>
   13064:	cmp	r0, r8
   13068:	mov	r2, r8
   1306c:	beq	13940 <test@@Base+0xe88>
   13070:	ldrb	r3, [r0]
   13074:	mov	r2, r0
   13078:	cmp	r3, #33	; 0x21
   1307c:	bcc	13940 <test@@Base+0xe88>
   13080:	add	r1, r1, #5
   13084:	uxtb	r0, r3
   13088:	cmp	r0, #46	; 0x2e
   1308c:	cmpne	r0, #95	; 0x5f
   13090:	bne	130ac <test@@Base+0x5f4>
   13094:	cmp	r8, r1
   13098:	beq	138c8 <test@@Base+0xe10>
   1309c:	ldrb	r3, [r1], #1
   130a0:	cmp	r3, #33	; 0x21
   130a4:	bcs	13084 <test@@Base+0x5cc>
   130a8:	b	130dc <test@@Base+0x624>
   130ac:	sxtb	r2, r3
   130b0:	cmp	r2, #0
   130b4:	bmi	13094 <test@@Base+0x5dc>
   130b8:	sub	r2, r3, #48	; 0x30
   130bc:	uxtb	r2, r2
   130c0:	cmp	r2, #9
   130c4:	bls	13094 <test@@Base+0x5dc>
   130c8:	orr	r2, r3, #32
   130cc:	sub	r2, r2, #97	; 0x61
   130d0:	uxtb	r2, r2
   130d4:	cmp	r2, #26
   130d8:	bcc	13094 <test@@Base+0x5dc>
   130dc:	sub	r2, r1, #1
   130e0:	cmp	r0, #46	; 0x2e
   130e4:	beq	138d4 <test@@Base+0xe1c>
   130e8:	b	13940 <test@@Base+0xe88>
   130ec:	cmp	r0, r8
   130f0:	mov	r1, r8
   130f4:	add	r4, sp, #24
   130f8:	bne	13114 <test@@Base+0x65c>
   130fc:	b	13588 <test@@Base+0xad0>
   13100:	cmp	r1, #34	; 0x22
   13104:	beq	13250 <test@@Base+0x798>
   13108:	add	r0, r0, #1
   1310c:	cmp	r0, r8
   13110:	beq	134d0 <test@@Base+0xa18>
   13114:	ldrb	r1, [r0]
   13118:	cmp	r1, #92	; 0x5c
   1311c:	bne	13100 <test@@Base+0x648>
   13120:	sub	r1, r8, r0
   13124:	cmp	r1, #2
   13128:	blt	13584 <test@@Base+0xacc>
   1312c:	add	r0, r0, #1
   13130:	b	13108 <test@@Base+0x650>
   13134:	movw	r2, #26228	; 0x6674
   13138:	movt	r2, #27749	; 0x6c65
   1313c:	teq	r0, r2
   13140:	bne	13dc0 <test@@Base+0x1308>
   13144:	ldr	r2, [sp, #36]	; 0x24
   13148:	add	r0, r1, #4
   1314c:	cmp	r2, #0
   13150:	beq	1351c <test@@Base+0xa64>
   13154:	cmp	r0, r8
   13158:	mov	r2, r8
   1315c:	beq	13ab8 <test@@Base+0x1000>
   13160:	ldrb	r3, [r0]
   13164:	mov	r2, r0
   13168:	cmp	r3, #33	; 0x21
   1316c:	bcc	13ab8 <test@@Base+0x1000>
   13170:	add	r1, r1, #5
   13174:	uxtb	r0, r3
   13178:	cmp	r0, #46	; 0x2e
   1317c:	cmpne	r0, #95	; 0x5f
   13180:	bne	1319c <test@@Base+0x6e4>
   13184:	cmp	r8, r1
   13188:	beq	138e8 <test@@Base+0xe30>
   1318c:	ldrb	r3, [r1], #1
   13190:	cmp	r3, #33	; 0x21
   13194:	bcs	13174 <test@@Base+0x6bc>
   13198:	b	131cc <test@@Base+0x714>
   1319c:	sxtb	r2, r3
   131a0:	cmp	r2, #0
   131a4:	bmi	13184 <test@@Base+0x6cc>
   131a8:	sub	r2, r3, #48	; 0x30
   131ac:	uxtb	r2, r2
   131b0:	cmp	r2, #9
   131b4:	bls	13184 <test@@Base+0x6cc>
   131b8:	orr	r2, r3, #32
   131bc:	sub	r2, r2, #97	; 0x61
   131c0:	uxtb	r2, r2
   131c4:	cmp	r2, #26
   131c8:	bcc	13184 <test@@Base+0x6cc>
   131cc:	sub	r2, r1, #1
   131d0:	cmp	r0, #46	; 0x2e
   131d4:	beq	138f4 <test@@Base+0xe3c>
   131d8:	b	13ab8 <test@@Base+0x1000>
   131dc:	add	r1, r0, #1
   131e0:	b	1328c <test@@Base+0x7d4>
   131e4:	cmp	r0, r8
   131e8:	mov	r1, r8
   131ec:	add	r4, sp, #24
   131f0:	bne	1320c <test@@Base+0x754>
   131f4:	b	137bc <test@@Base+0xd04>
   131f8:	cmp	r1, #34	; 0x22
   131fc:	beq	13560 <test@@Base+0xaa8>
   13200:	add	r0, r0, #1
   13204:	cmp	r0, r8
   13208:	beq	137b0 <test@@Base+0xcf8>
   1320c:	ldrb	r1, [r0]
   13210:	cmp	r1, #92	; 0x5c
   13214:	bne	131f8 <test@@Base+0x740>
   13218:	sub	r1, r8, r0
   1321c:	cmp	r1, #2
   13220:	blt	137b8 <test@@Base+0xd00>
   13224:	add	r0, r0, #1
   13228:	b	13200 <test@@Base+0x748>
   1322c:	mov	r1, r8
   13230:	cmp	r0, #46	; 0x2e
   13234:	bne	1328c <test@@Base+0x7d4>
   13238:	mov	r0, r4
   1323c:	mov	r2, r8
   13240:	mov	r3, #5
   13244:	b	13284 <test@@Base+0x7cc>
   13248:	mov	r1, r8
   1324c:	b	13278 <test@@Base+0x7c0>
   13250:	add	r1, r0, #1
   13254:	b	1359c <test@@Base+0xae4>
   13258:	mov	r1, r8
   1325c:	cmp	r0, #46	; 0x2e
   13260:	bne	1359c <test@@Base+0xae4>
   13264:	mov	r0, r4
   13268:	mov	r2, r8
   1326c:	mov	r3, #5
   13270:	b	13594 <test@@Base+0xadc>
   13274:	mov	r1, r0
   13278:	mov	r0, r4
   1327c:	mov	r2, r8
   13280:	mov	r3, #20
   13284:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   13288:	mov	r1, r0
   1328c:	sub	r0, r8, r1
   13290:	cmp	r0, #2
   13294:	blt	13300 <test@@Base+0x848>
   13298:	ldrb	r0, [r1]
   1329c:	cmp	r0, #32
   132a0:	bls	132ec <test@@Base+0x834>
   132a4:	mov	sl, r1
   132a8:	cmp	sl, r8
   132ac:	beq	13bfc <test@@Base+0x1144>
   132b0:	bcs	13c54 <test@@Base+0x119c>
   132b4:	ldrb	r0, [sl]
   132b8:	cmp	r0, #58	; 0x3a
   132bc:	bne	13c54 <test@@Base+0x119c>
   132c0:	add	r1, sl, #1
   132c4:	sub	r0, r8, r1
   132c8:	cmp	r0, #2
   132cc:	blt	1332c <test@@Base+0x874>
   132d0:	ldrb	r0, [r1]
   132d4:	cmp	r0, #32
   132d8:	bls	1331c <test@@Base+0x864>
   132dc:	mov	sl, r1
   132e0:	cmp	sl, r8
   132e4:	bne	13344 <test@@Base+0x88c>
   132e8:	b	13bfc <test@@Base+0x1144>
   132ec:	bne	13300 <test@@Base+0x848>
   132f0:	mov	sl, r1
   132f4:	ldrb	r0, [sl, #1]!
   132f8:	cmp	r0, #32
   132fc:	bhi	13310 <test@@Base+0x858>
   13300:	mov	r0, r4
   13304:	mov	r2, r8
   13308:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1330c:	mov	sl, r0
   13310:	cmp	sl, r8
   13314:	bne	132b0 <test@@Base+0x7f8>
   13318:	b	13bfc <test@@Base+0x1144>
   1331c:	bne	1332c <test@@Base+0x874>
   13320:	ldrb	r0, [sl, #2]!
   13324:	cmp	r0, #32
   13328:	bhi	1333c <test@@Base+0x884>
   1332c:	mov	r0, r4
   13330:	mov	r2, r8
   13334:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13338:	mov	sl, r0
   1333c:	cmp	sl, r8
   13340:	beq	13bfc <test@@Base+0x1144>
   13344:	mov	r0, r9
   13348:	mov	r1, #0
   1334c:	mov	r2, #1
   13350:	mov	r3, #1
   13354:	bl	178a0 <flatcc_builder_table_add@@Base>
   13358:	cmp	r0, #0
   1335c:	beq	13d3c <test@@Base+0x1284>
   13360:	mov	r6, r0
   13364:	mov	r0, #0
   13368:	mov	r1, sl
   1336c:	mov	r2, r8
   13370:	sub	r3, fp, #44	; 0x2c
   13374:	str	r0, [fp, #-36]	; 0xffffffdc
   13378:	str	r0, [fp, #-40]	; 0xffffffd8
   1337c:	str	r0, [fp, #-44]	; 0xffffffd4
   13380:	strb	r0, [r6]
   13384:	sub	r0, fp, #40	; 0x28
   13388:	str	r0, [sp]
   1338c:	mov	r0, r4
   13390:	bl	1bb2c <flatcc_json_parser_integer@@Base>
   13394:	cmp	r0, sl
   13398:	mov	r1, sl
   1339c:	beq	13404 <test@@Base+0x94c>
   133a0:	mov	r2, r0
   133a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   133a8:	cmp	r0, #0
   133ac:	beq	133c4 <test@@Base+0x90c>
   133b0:	mov	r1, r2
   133b4:	mov	r0, r4
   133b8:	mov	r2, r8
   133bc:	mov	r3, #8
   133c0:	b	133e8 <test@@Base+0x930>
   133c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   133c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   133cc:	subs	r3, r0, #256	; 0x100
   133d0:	sbcs	r1, r1, #0
   133d4:	bcc	133fc <test@@Base+0x944>
   133d8:	mov	r1, r2
   133dc:	mov	r0, r4
   133e0:	mov	r2, r8
   133e4:	mov	r3, #7
   133e8:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   133ec:	mov	r1, r0
   133f0:	cmp	sl, r1
   133f4:	bne	1340c <test@@Base+0x954>
   133f8:	b	13d3c <test@@Base+0x1284>
   133fc:	strb	r0, [r6]
   13400:	mov	r1, r2
   13404:	cmp	sl, r1
   13408:	beq	13d3c <test@@Base+0x1284>
   1340c:	sub	r0, r8, r1
   13410:	cmp	r0, #2
   13414:	blt	13448 <test@@Base+0x990>
   13418:	ldrb	r0, [r1]
   1341c:	cmp	r0, #32
   13420:	bls	13434 <test@@Base+0x97c>
   13424:	mov	r6, r1
   13428:	cmp	r6, r8
   1342c:	bne	13460 <test@@Base+0x9a8>
   13430:	b	13bfc <test@@Base+0x1144>
   13434:	bne	13448 <test@@Base+0x990>
   13438:	mov	r6, r1
   1343c:	ldrb	r0, [r6, #1]!
   13440:	cmp	r0, #32
   13444:	bhi	13458 <test@@Base+0x9a0>
   13448:	mov	r0, r4
   1344c:	mov	r2, r8
   13450:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13454:	mov	r6, r0
   13458:	cmp	r6, r8
   1345c:	beq	13bfc <test@@Base+0x1144>
   13460:	ldrb	r0, [r6]
   13464:	cmp	r0, #44	; 0x2c
   13468:	bne	13ca4 <test@@Base+0x11ec>
   1346c:	add	r1, r6, #1
   13470:	sub	r0, r8, r1
   13474:	cmp	r0, #2
   13478:	blt	134a8 <test@@Base+0x9f0>
   1347c:	ldrb	r0, [r1]
   13480:	cmp	r0, #32
   13484:	bls	13498 <test@@Base+0x9e0>
   13488:	mov	r6, r1
   1348c:	cmp	r6, r8
   13490:	bne	134c0 <test@@Base+0xa08>
   13494:	b	13bfc <test@@Base+0x1144>
   13498:	bne	134a8 <test@@Base+0x9f0>
   1349c:	ldrb	r0, [r6, #2]!
   134a0:	cmp	r0, #32
   134a4:	bhi	134b8 <test@@Base+0xa00>
   134a8:	mov	r0, r4
   134ac:	mov	r2, r8
   134b0:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   134b4:	mov	r6, r0
   134b8:	cmp	r6, r8
   134bc:	beq	13bfc <test@@Base+0x1144>
   134c0:	ldrb	r0, [r6]
   134c4:	cmp	r0, #125	; 0x7d
   134c8:	bne	12bf0 <test@@Base+0x138>
   134cc:	b	13ca0 <test@@Base+0x11e8>
   134d0:	mov	r1, r8
   134d4:	b	13588 <test@@Base+0xad0>
   134d8:	cmp	r0, r8
   134dc:	mov	r1, r8
   134e0:	bne	134fc <test@@Base+0xa44>
   134e4:	b	1392c <test@@Base+0xe74>
   134e8:	cmp	r1, #34	; 0x22
   134ec:	beq	13908 <test@@Base+0xe50>
   134f0:	add	r0, r0, #1
   134f4:	cmp	r0, r8
   134f8:	beq	13918 <test@@Base+0xe60>
   134fc:	ldrb	r1, [r0]
   13500:	cmp	r1, #92	; 0x5c
   13504:	bne	134e8 <test@@Base+0xa30>
   13508:	sub	r1, r8, r0
   1350c:	cmp	r1, #2
   13510:	blt	13928 <test@@Base+0xe70>
   13514:	add	r0, r0, #1
   13518:	b	134f0 <test@@Base+0xa38>
   1351c:	cmp	r0, r8
   13520:	mov	r1, r8
   13524:	bne	13540 <test@@Base+0xa88>
   13528:	b	13aa4 <test@@Base+0xfec>
   1352c:	cmp	r1, #34	; 0x22
   13530:	beq	13910 <test@@Base+0xe58>
   13534:	add	r0, r0, #1
   13538:	cmp	r0, r8
   1353c:	beq	13920 <test@@Base+0xe68>
   13540:	ldrb	r1, [r0]
   13544:	cmp	r1, #92	; 0x5c
   13548:	bne	1352c <test@@Base+0xa74>
   1354c:	sub	r1, r8, r0
   13550:	cmp	r1, #2
   13554:	blt	13aa0 <test@@Base+0xfe8>
   13558:	add	r0, r0, #1
   1355c:	b	13534 <test@@Base+0xa7c>
   13560:	add	r1, r0, #1
   13564:	b	137d0 <test@@Base+0xd18>
   13568:	mov	r1, r8
   1356c:	cmp	r0, #46	; 0x2e
   13570:	bne	137d0 <test@@Base+0xd18>
   13574:	mov	r0, r4
   13578:	mov	r2, r8
   1357c:	mov	r3, #5
   13580:	b	137c8 <test@@Base+0xd10>
   13584:	mov	r1, r0
   13588:	mov	r0, r4
   1358c:	mov	r2, r8
   13590:	mov	r3, #20
   13594:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   13598:	mov	r1, r0
   1359c:	sub	r0, r8, r1
   135a0:	cmp	r0, #2
   135a4:	blt	13610 <test@@Base+0xb58>
   135a8:	ldrb	r0, [r1]
   135ac:	cmp	r0, #32
   135b0:	bls	135fc <test@@Base+0xb44>
   135b4:	mov	r6, r1
   135b8:	cmp	r6, r8
   135bc:	beq	13bfc <test@@Base+0x1144>
   135c0:	bcs	13d08 <test@@Base+0x1250>
   135c4:	ldrb	r0, [r6]
   135c8:	cmp	r0, #58	; 0x3a
   135cc:	bne	13d08 <test@@Base+0x1250>
   135d0:	add	r1, r6, #1
   135d4:	sub	r0, r8, r1
   135d8:	cmp	r0, #2
   135dc:	blt	1363c <test@@Base+0xb84>
   135e0:	ldrb	r0, [r1]
   135e4:	cmp	r0, #32
   135e8:	bls	1362c <test@@Base+0xb74>
   135ec:	mov	r6, r1
   135f0:	cmp	r6, r8
   135f4:	bne	13654 <test@@Base+0xb9c>
   135f8:	b	13bfc <test@@Base+0x1144>
   135fc:	bne	13610 <test@@Base+0xb58>
   13600:	mov	r6, r1
   13604:	ldrb	r0, [r6, #1]!
   13608:	cmp	r0, #32
   1360c:	bhi	13620 <test@@Base+0xb68>
   13610:	mov	r0, r4
   13614:	mov	r2, r8
   13618:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1361c:	mov	r6, r0
   13620:	cmp	r6, r8
   13624:	bne	135c0 <test@@Base+0xb08>
   13628:	b	13bfc <test@@Base+0x1144>
   1362c:	bne	1363c <test@@Base+0xb84>
   13630:	ldrb	r0, [r6, #2]!
   13634:	cmp	r0, #32
   13638:	bhi	1364c <test@@Base+0xb94>
   1363c:	mov	r0, r4
   13640:	mov	r2, r8
   13644:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13648:	mov	r6, r0
   1364c:	cmp	r6, r8
   13650:	beq	13bfc <test@@Base+0x1144>
   13654:	ldrb	r0, [r6]
   13658:	cmp	r0, #34	; 0x22
   1365c:	bne	13668 <test@@Base+0xbb0>
   13660:	add	r6, r6, #1
   13664:	b	13680 <test@@Base+0xbc8>
   13668:	mov	r0, r4
   1366c:	mov	r1, r6
   13670:	mov	r2, r8
   13674:	mov	r3, #16
   13678:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   1367c:	mov	r6, r0
   13680:	mov	r0, r4
   13684:	mov	r1, r6
   13688:	mov	r2, r8
   1368c:	bl	19808 <flatcc_json_parser_string_part@@Base>
   13690:	cmp	r0, r8
   13694:	beq	13c7c <test@@Base+0x11c4>
   13698:	mov	sl, r0
   1369c:	ldrb	r0, [r0]
   136a0:	cmp	r0, #34	; 0x22
   136a4:	bne	136bc <test@@Base+0xc04>
   136a8:	sub	r2, sl, r6
   136ac:	mov	r0, r9
   136b0:	mov	r1, r6
   136b4:	bl	18620 <flatcc_builder_create_string@@Base>
   136b8:	b	13754 <test@@Base+0xc9c>
   136bc:	mov	r0, r9
   136c0:	bl	1624c <flatcc_builder_start_string@@Base>
   136c4:	mov	r0, r9
   136c8:	sub	r9, sl, r6
   136cc:	mov	r1, r9
   136d0:	bl	15a10 <flatcc_builder_extend_string@@Base>
   136d4:	cmp	r0, #0
   136d8:	beq	13e1c <test@@Base+0x1364>
   136dc:	mov	r1, r6
   136e0:	mov	r2, r9
   136e4:	bl	128fc <memcpy@plt>
   136e8:	ldr	r9, [sp, #16]
   136ec:	mov	r0, r4
   136f0:	mov	r1, sl
   136f4:	mov	r2, r8
   136f8:	add	r3, sp, #20
   136fc:	bl	199bc <flatcc_json_parser_string_escape@@Base>
   13700:	ldrb	r2, [sp, #20]
   13704:	ldr	r1, [sp, #8]
   13708:	mov	r6, r0
   1370c:	mov	r0, r9
   13710:	bl	15b34 <flatcc_builder_append_string@@Base>
   13714:	mov	r0, r4
   13718:	mov	r1, r6
   1371c:	mov	r2, r8
   13720:	bl	19808 <flatcc_json_parser_string_part@@Base>
   13724:	cmp	r0, r8
   13728:	beq	13c7c <test@@Base+0x11c4>
   1372c:	mov	sl, r0
   13730:	sub	r2, r0, r6
   13734:	mov	r0, r9
   13738:	mov	r1, r6
   1373c:	bl	15b34 <flatcc_builder_append_string@@Base>
   13740:	ldrb	r0, [sl]
   13744:	cmp	r0, #34	; 0x22
   13748:	bne	136ec <test@@Base+0xc34>
   1374c:	mov	r0, r9
   13750:	bl	187a4 <flatcc_builder_end_string@@Base>
   13754:	mov	r6, r0
   13758:	cmp	r0, #0
   1375c:	beq	13d3c <test@@Base+0x1284>
   13760:	mov	r0, r9
   13764:	mov	r1, #10
   13768:	bl	176ec <flatcc_builder_table_add_offset@@Base>
   1376c:	cmp	r0, #0
   13770:	beq	13d3c <test@@Base+0x1284>
   13774:	cmp	sl, r8
   13778:	str	r6, [r0]
   1377c:	beq	13794 <test@@Base+0xcdc>
   13780:	ldrb	r0, [sl]
   13784:	cmp	r0, #34	; 0x22
   13788:	bne	13794 <test@@Base+0xcdc>
   1378c:	add	r1, sl, #1
   13790:	b	1340c <test@@Base+0x954>
   13794:	mov	r0, r4
   13798:	mov	r1, sl
   1379c:	mov	r2, r8
   137a0:	mov	r3, #20
   137a4:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   137a8:	mov	r1, r0
   137ac:	b	1340c <test@@Base+0x954>
   137b0:	mov	r1, r8
   137b4:	b	137bc <test@@Base+0xd04>
   137b8:	mov	r1, r0
   137bc:	mov	r0, r4
   137c0:	mov	r2, r8
   137c4:	mov	r3, #20
   137c8:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   137cc:	mov	r1, r0
   137d0:	sub	r0, r8, r1
   137d4:	cmp	r0, #2
   137d8:	blt	13844 <test@@Base+0xd8c>
   137dc:	ldrb	r0, [r1]
   137e0:	cmp	r0, #32
   137e4:	bls	13830 <test@@Base+0xd78>
   137e8:	mov	sl, r1
   137ec:	cmp	sl, r8
   137f0:	beq	13bfc <test@@Base+0x1144>
   137f4:	bcs	13c54 <test@@Base+0x119c>
   137f8:	ldrb	r0, [sl]
   137fc:	cmp	r0, #58	; 0x3a
   13800:	bne	13c54 <test@@Base+0x119c>
   13804:	add	r1, sl, #1
   13808:	sub	r0, r8, r1
   1380c:	cmp	r0, #2
   13810:	blt	13870 <test@@Base+0xdb8>
   13814:	ldrb	r0, [r1]
   13818:	cmp	r0, #32
   1381c:	bls	13860 <test@@Base+0xda8>
   13820:	mov	sl, r1
   13824:	cmp	sl, r8
   13828:	bne	13888 <test@@Base+0xdd0>
   1382c:	b	13bfc <test@@Base+0x1144>
   13830:	bne	13844 <test@@Base+0xd8c>
   13834:	mov	sl, r1
   13838:	ldrb	r0, [sl, #1]!
   1383c:	cmp	r0, #32
   13840:	bhi	13854 <test@@Base+0xd9c>
   13844:	mov	r0, r4
   13848:	mov	r2, r8
   1384c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13850:	mov	sl, r0
   13854:	cmp	sl, r8
   13858:	bne	137f4 <test@@Base+0xd3c>
   1385c:	b	13bfc <test@@Base+0x1144>
   13860:	bne	13870 <test@@Base+0xdb8>
   13864:	ldrb	r0, [sl, #2]!
   13868:	cmp	r0, #32
   1386c:	bhi	13880 <test@@Base+0xdc8>
   13870:	mov	r0, r4
   13874:	mov	r2, r8
   13878:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1387c:	mov	sl, r0
   13880:	cmp	sl, r8
   13884:	beq	13bfc <test@@Base+0x1144>
   13888:	mov	r0, r9
   1388c:	mov	r1, #1
   13890:	mov	r2, #8
   13894:	mov	r3, #8
   13898:	bl	178a0 <flatcc_builder_table_add@@Base>
   1389c:	cmp	r0, #0
   138a0:	beq	13d3c <test@@Base+0x1284>
   138a4:	mov	r3, r0
   138a8:	mov	r0, r4
   138ac:	mov	r1, sl
   138b0:	mov	r2, r8
   138b4:	bl	1b028 <flatcc_json_parser_double@@Base>
   138b8:	mov	r1, r0
   138bc:	cmp	sl, r0
   138c0:	bne	1340c <test@@Base+0x954>
   138c4:	b	13d3c <test@@Base+0x1284>
   138c8:	mov	r2, r8
   138cc:	cmp	r0, #46	; 0x2e
   138d0:	bne	13940 <test@@Base+0xe88>
   138d4:	mov	r1, r2
   138d8:	mov	r0, r4
   138dc:	mov	r2, r8
   138e0:	mov	r3, #5
   138e4:	b	13938 <test@@Base+0xe80>
   138e8:	mov	r2, r8
   138ec:	cmp	r0, #46	; 0x2e
   138f0:	bne	13ab8 <test@@Base+0x1000>
   138f4:	mov	r1, r2
   138f8:	mov	r0, r4
   138fc:	mov	r2, r8
   13900:	mov	r3, #5
   13904:	b	13ab0 <test@@Base+0xff8>
   13908:	add	r2, r0, #1
   1390c:	b	13940 <test@@Base+0xe88>
   13910:	add	r2, r0, #1
   13914:	b	13ab8 <test@@Base+0x1000>
   13918:	mov	r1, r8
   1391c:	b	1392c <test@@Base+0xe74>
   13920:	mov	r1, r8
   13924:	b	13aa4 <test@@Base+0xfec>
   13928:	mov	r1, r0
   1392c:	mov	r0, r4
   13930:	mov	r2, r8
   13934:	mov	r3, #20
   13938:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   1393c:	mov	r2, r0
   13940:	sub	r0, r8, r2
   13944:	cmp	r0, #2
   13948:	blt	1397c <test@@Base+0xec4>
   1394c:	ldrb	r0, [r2]
   13950:	cmp	r0, #32
   13954:	bls	13968 <test@@Base+0xeb0>
   13958:	mov	sl, r2
   1395c:	cmp	sl, r8
   13960:	bne	13998 <test@@Base+0xee0>
   13964:	b	13bfc <test@@Base+0x1144>
   13968:	bne	1397c <test@@Base+0xec4>
   1396c:	mov	sl, r2
   13970:	ldrb	r0, [sl, #1]!
   13974:	cmp	r0, #32
   13978:	bhi	13990 <test@@Base+0xed8>
   1397c:	mov	r1, r2
   13980:	mov	r0, r4
   13984:	mov	r2, r8
   13988:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1398c:	mov	sl, r0
   13990:	cmp	sl, r8
   13994:	beq	13bfc <test@@Base+0x1144>
   13998:	bcs	13c54 <test@@Base+0x119c>
   1399c:	ldrb	r0, [sl]
   139a0:	cmp	r0, #58	; 0x3a
   139a4:	bne	13c54 <test@@Base+0x119c>
   139a8:	add	r1, sl, #1
   139ac:	sub	r0, r8, r1
   139b0:	cmp	r0, #2
   139b4:	blt	139e4 <test@@Base+0xf2c>
   139b8:	ldrb	r0, [r1]
   139bc:	cmp	r0, #32
   139c0:	bls	139d4 <test@@Base+0xf1c>
   139c4:	mov	sl, r1
   139c8:	cmp	sl, r8
   139cc:	bne	139fc <test@@Base+0xf44>
   139d0:	b	13bfc <test@@Base+0x1144>
   139d4:	bne	139e4 <test@@Base+0xf2c>
   139d8:	ldrb	r0, [sl, #2]!
   139dc:	cmp	r0, #32
   139e0:	bhi	139f4 <test@@Base+0xf3c>
   139e4:	mov	r0, r4
   139e8:	mov	r2, r8
   139ec:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   139f0:	mov	sl, r0
   139f4:	cmp	sl, r8
   139f8:	beq	13bfc <test@@Base+0x1144>
   139fc:	mov	r0, r9
   13a00:	mov	r1, #3
   13a04:	mov	r2, #8
   13a08:	mov	r3, #8
   13a0c:	bl	178a0 <flatcc_builder_table_add@@Base>
   13a10:	cmp	r0, #0
   13a14:	beq	13d3c <test@@Base+0x1284>
   13a18:	mov	r6, r0
   13a1c:	mov	r0, #0
   13a20:	mov	r1, sl
   13a24:	mov	r2, r8
   13a28:	sub	r3, fp, #44	; 0x2c
   13a2c:	str	r0, [fp, #-36]	; 0xffffffdc
   13a30:	str	r0, [fp, #-40]	; 0xffffffd8
   13a34:	str	r0, [fp, #-44]	; 0xffffffd4
   13a38:	str	r0, [r6]
   13a3c:	str	r0, [r6, #4]
   13a40:	sub	r0, fp, #40	; 0x28
   13a44:	str	r0, [sp]
   13a48:	mov	r0, r4
   13a4c:	bl	1bb2c <flatcc_json_parser_integer@@Base>
   13a50:	cmp	r0, sl
   13a54:	mov	r1, sl
   13a58:	beq	13404 <test@@Base+0x94c>
   13a5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a60:	mov	r2, r0
   13a64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13a68:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13a6c:	cmp	r3, #0
   13a70:	beq	13a90 <test@@Base+0xfd8>
   13a74:	subs	r3, r0, #1
   13a78:	sbcs	r3, r1, #-2147483648	; 0x80000000
   13a7c:	bcs	133b0 <test@@Base+0x8f8>
   13a80:	rsbs	r0, r0, #0
   13a84:	rsc	r1, r1, #0
   13a88:	strd	r0, [r6]
   13a8c:	b	13400 <test@@Base+0x948>
   13a90:	cmn	r1, #1
   13a94:	ble	133d8 <test@@Base+0x920>
   13a98:	strd	r0, [r6]
   13a9c:	b	13400 <test@@Base+0x948>
   13aa0:	mov	r1, r0
   13aa4:	mov	r0, r4
   13aa8:	mov	r2, r8
   13aac:	mov	r3, #20
   13ab0:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   13ab4:	mov	r2, r0
   13ab8:	sub	r0, r8, r2
   13abc:	cmp	r0, #2
   13ac0:	blt	13af8 <test@@Base+0x1040>
   13ac4:	ldrb	r0, [r2]
   13ac8:	cmp	r0, #32
   13acc:	bls	13ae4 <test@@Base+0x102c>
   13ad0:	mov	sl, r2
   13ad4:	cmp	sl, r8
   13ad8:	bne	13b14 <test@@Base+0x105c>
   13adc:	b	13bfc <test@@Base+0x1144>
   13ae0:	andeq	fp, r0, r6, lsr r5
   13ae4:	bne	13af8 <test@@Base+0x1040>
   13ae8:	mov	sl, r2
   13aec:	ldrb	r0, [sl, #1]!
   13af0:	cmp	r0, #32
   13af4:	bhi	13b0c <test@@Base+0x1054>
   13af8:	mov	r1, r2
   13afc:	mov	r0, r4
   13b00:	mov	r2, r8
   13b04:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13b08:	mov	sl, r0
   13b0c:	cmp	sl, r8
   13b10:	beq	13bfc <test@@Base+0x1144>
   13b14:	bcs	13c54 <test@@Base+0x119c>
   13b18:	ldrb	r0, [sl]
   13b1c:	cmp	r0, #58	; 0x3a
   13b20:	bne	13c54 <test@@Base+0x119c>
   13b24:	add	r1, sl, #1
   13b28:	sub	r0, r8, r1
   13b2c:	cmp	r0, #2
   13b30:	blt	13b60 <test@@Base+0x10a8>
   13b34:	ldrb	r0, [r1]
   13b38:	cmp	r0, #32
   13b3c:	bls	13b50 <test@@Base+0x1098>
   13b40:	mov	sl, r1
   13b44:	cmp	sl, r8
   13b48:	bne	13b78 <test@@Base+0x10c0>
   13b4c:	b	13bfc <test@@Base+0x1144>
   13b50:	bne	13b60 <test@@Base+0x10a8>
   13b54:	ldrb	r0, [sl, #2]!
   13b58:	cmp	r0, #32
   13b5c:	bhi	13b70 <test@@Base+0x10b8>
   13b60:	mov	r0, r4
   13b64:	mov	r2, r8
   13b68:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13b6c:	mov	sl, r0
   13b70:	cmp	sl, r8
   13b74:	beq	13bfc <test@@Base+0x1144>
   13b78:	mov	r0, r9
   13b7c:	mov	r1, #2
   13b80:	mov	r2, #4
   13b84:	mov	r3, #4
   13b88:	bl	178a0 <flatcc_builder_table_add@@Base>
   13b8c:	cmp	r0, #0
   13b90:	beq	13d3c <test@@Base+0x1284>
   13b94:	mov	r6, r0
   13b98:	mov	r0, #0
   13b9c:	mov	r1, sl
   13ba0:	mov	r2, r8
   13ba4:	sub	r3, fp, #44	; 0x2c
   13ba8:	str	r0, [fp, #-36]	; 0xffffffdc
   13bac:	str	r0, [fp, #-40]	; 0xffffffd8
   13bb0:	str	r0, [fp, #-44]	; 0xffffffd4
   13bb4:	str	r0, [r6]
   13bb8:	sub	r0, fp, #40	; 0x28
   13bbc:	str	r0, [sp]
   13bc0:	mov	r0, r4
   13bc4:	bl	1bb2c <flatcc_json_parser_integer@@Base>
   13bc8:	cmp	r0, sl
   13bcc:	mov	r1, sl
   13bd0:	beq	13404 <test@@Base+0x94c>
   13bd4:	mov	r2, r0
   13bd8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13bdc:	cmp	r0, #0
   13be0:	bne	133b0 <test@@Base+0x8f8>
   13be4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13be8:	cmp	r0, #0
   13bec:	bne	133d8 <test@@Base+0x920>
   13bf0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13bf4:	str	r0, [r6]
   13bf8:	b	13400 <test@@Base+0x948>
   13bfc:	ldr	r0, [pc, #544]	; 13e24 <test@@Base+0x136c>
   13c00:	mov	r1, #13
   13c04:	mov	r2, #1
   13c08:	ldr	r0, [pc, r0]
   13c0c:	ldr	r3, [r0]
   13c10:	ldr	r0, [pc, #528]	; 13e28 <test@@Base+0x1370>
   13c14:	add	r0, pc, r0
   13c18:	bl	1292c <fwrite@plt>
   13c1c:	mov	sl, r8
   13c20:	b	13d3c <test@@Base+0x1284>
   13c24:	add	r0, sp, #24
   13c28:	mov	r1, lr
   13c2c:	mov	r2, r8
   13c30:	mov	r3, #13
   13c34:	b	13d34 <test@@Base+0x127c>
   13c38:	ldr	r0, [pc, #492]	; 13e2c <test@@Base+0x1374>
   13c3c:	mov	r2, #123	; 0x7b
   13c40:	ldr	r0, [pc, r0]
   13c44:	ldr	r0, [r0]
   13c48:	ldr	r1, [pc, #480]	; 13e30 <test@@Base+0x1378>
   13c4c:	add	r1, pc, r1
   13c50:	b	13d20 <test@@Base+0x1268>
   13c54:	ldr	r0, [pc, #492]	; 13e48 <test@@Base+0x1390>
   13c58:	mov	r2, #58	; 0x3a
   13c5c:	ldr	r0, [pc, r0]
   13c60:	ldr	r0, [r0]
   13c64:	ldr	r1, [pc, #480]	; 13e4c <test@@Base+0x1394>
   13c68:	add	r1, pc, r1
   13c6c:	bl	12974 <fprintf@plt>
   13c70:	add	r0, sp, #24
   13c74:	mov	r1, sl
   13c78:	b	13d2c <test@@Base+0x1274>
   13c7c:	mov	sl, r8
   13c80:	b	13d3c <test@@Base+0x1284>
   13c84:	add	r0, sp, #24
   13c88:	mov	r1, lr
   13c8c:	mov	r2, r8
   13c90:	mov	r3, #13
   13c94:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   13c98:	ldr	r9, [sp, #16]
   13c9c:	b	13d38 <test@@Base+0x1280>
   13ca0:	mov	r0, #125	; 0x7d
   13ca4:	cmp	r6, r8
   13ca8:	bcs	13cec <test@@Base+0x1234>
   13cac:	cmp	r0, #125	; 0x7d
   13cb0:	bne	13cec <test@@Base+0x1234>
   13cb4:	mov	r0, r9
   13cb8:	bl	16e2c <flatcc_builder_end_table@@Base>
   13cbc:	mov	r1, r0
   13cc0:	mov	r0, r9
   13cc4:	bl	15028 <flatcc_builder_end_buffer@@Base>
   13cc8:	add	r1, r6, #1
   13ccc:	sub	r0, r8, r1
   13cd0:	cmp	r0, #2
   13cd4:	blt	13dd8 <test@@Base+0x1320>
   13cd8:	ldrb	r0, [r1]
   13cdc:	cmp	r0, #32
   13ce0:	bls	13dc8 <test@@Base+0x1310>
   13ce4:	mov	r6, r1
   13ce8:	b	13de8 <test@@Base+0x1330>
   13cec:	ldr	r0, [pc, #356]	; 13e58 <test@@Base+0x13a0>
   13cf0:	mov	r2, #125	; 0x7d
   13cf4:	ldr	r0, [pc, r0]
   13cf8:	ldr	r0, [r0]
   13cfc:	ldr	r1, [pc, #344]	; 13e5c <test@@Base+0x13a4>
   13d00:	add	r1, pc, r1
   13d04:	b	13d20 <test@@Base+0x1268>
   13d08:	ldr	r0, [pc, #320]	; 13e50 <test@@Base+0x1398>
   13d0c:	mov	r2, #58	; 0x3a
   13d10:	ldr	r0, [pc, r0]
   13d14:	ldr	r0, [r0]
   13d18:	ldr	r1, [pc, #308]	; 13e54 <test@@Base+0x139c>
   13d1c:	add	r1, pc, r1
   13d20:	bl	12974 <fprintf@plt>
   13d24:	add	r0, sp, #24
   13d28:	mov	r1, r6
   13d2c:	mov	r2, r8
   13d30:	mov	r3, #17
   13d34:	bl	197d0 <flatcc_json_parser_set_error@@Base>
   13d38:	mov	sl, r0
   13d3c:	ldr	r0, [pc, #248]	; 13e3c <test@@Base+0x1384>
   13d40:	ldr	r0, [pc, r0]
   13d44:	ldr	r4, [r0]
   13d48:	ldr	r0, [sp, #48]	; 0x30
   13d4c:	cmp	r0, #0
   13d50:	bne	13d70 <test@@Base+0x12b8>
   13d54:	ldr	r0, [pc, #232]	; 13e44 <test@@Base+0x138c>
   13d58:	mov	r1, #15
   13d5c:	mov	r2, #1
   13d60:	mov	r3, r4
   13d64:	add	r0, pc, r0
   13d68:	bl	1292c <fwrite@plt>
   13d6c:	b	13da8 <test@@Base+0x12f0>
   13d70:	ldr	r5, [sp, #28]
   13d74:	ldr	r6, [sp, #40]	; 0x28
   13d78:	ldr	r7, [sp, #60]	; 0x3c
   13d7c:	bl	197a4 <flatcc_json_parser_error_string@@Base>
   13d80:	str	r0, [sp]
   13d84:	sub	r0, r7, r5
   13d88:	mov	r2, r6
   13d8c:	ldr	r1, [pc, #172]	; 13e40 <test@@Base+0x1388>
   13d90:	add	r3, r0, #1
   13d94:	mov	r0, r4
   13d98:	add	r1, pc, r1
   13d9c:	bl	12974 <fprintf@plt>
   13da0:	mov	r0, r9
   13da4:	bl	1422c <flatcc_builder_reset@@Base>
   13da8:	ldr	r0, [sp, #48]	; 0x30
   13dac:	ldr	r1, [sp, #12]
   13db0:	str	r0, [r1]
   13db4:	mov	r0, sl
   13db8:	sub	sp, fp, #28
   13dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc0:	add	r0, sp, #24
   13dc4:	b	13c2c <test@@Base+0x1174>
   13dc8:	bne	13dd8 <test@@Base+0x1320>
   13dcc:	ldrb	r0, [r6, #2]!
   13dd0:	cmp	r0, #32
   13dd4:	bhi	13de8 <test@@Base+0x1330>
   13dd8:	add	r0, sp, #24
   13ddc:	mov	r2, r8
   13de0:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   13de4:	mov	r6, r0
   13de8:	cmp	r6, r8
   13dec:	mov	sl, r8
   13df0:	beq	13d3c <test@@Base+0x1284>
   13df4:	ldr	r0, [pc, #56]	; 13e34 <test@@Base+0x137c>
   13df8:	mov	r1, #26
   13dfc:	mov	r2, #1
   13e00:	ldr	r0, [pc, r0]
   13e04:	ldr	r3, [r0]
   13e08:	ldr	r0, [pc, #40]	; 13e38 <test@@Base+0x1380>
   13e0c:	add	r0, pc, r0
   13e10:	bl	1292c <fwrite@plt>
   13e14:	mov	sl, r6
   13e18:	b	13d3c <test@@Base+0x1284>
   13e1c:	ldr	r9, [sp, #16]
   13e20:	b	13d3c <test@@Base+0x1284>
   13e24:	andeq	sp, r1, ip, asr #8
   13e28:	andeq	sl, r0, r3, lsr r4
   13e2c:	andeq	sp, r1, r4, lsl r4
   13e30:	andeq	sl, r0, r9, lsl #8
   13e34:	andeq	sp, r1, r4, asr r2
   13e38:	andeq	sl, r0, pc, asr r2
   13e3c:	andeq	sp, r1, r4, lsl r3
   13e40:	andeq	sl, r0, lr, ror #5
   13e44:	andeq	sl, r0, sp, lsr #6
   13e48:	strdeq	sp, [r1], -r8
   13e4c:	andeq	sl, r0, sp, ror #7
   13e50:	andeq	sp, r1, r4, asr #6
   13e54:	andeq	sl, r0, r9, lsr r3
   13e58:	andeq	sp, r1, r0, ror #6
   13e5c:	andeq	sl, r0, r5, asr r3

00013e60 <main@@Base>:
   13e60:	push	{r4, sl, fp, lr}
   13e64:	add	fp, sp, #8
   13e68:	sub	sp, sp, #240	; 0xf0
   13e6c:	mvn	r0, #0
   13e70:	add	r4, sp, #4
   13e74:	str	r0, [fp, #-12]
   13e78:	mov	r0, r4
   13e7c:	bl	14080 <flatcc_builder_init@@Base>
   13e80:	ldr	r1, [pc, #40]	; 13eb0 <main@@Base+0x50>
   13e84:	movw	r0, #645	; 0x285
   13e88:	sub	r3, fp, #12
   13e8c:	ldr	r1, [pc, r1]
   13e90:	add	r2, r1, r0
   13e94:	mov	r0, r4
   13e98:	bl	12ab8 <test@@Base>
   13e9c:	mov	r0, r4
   13ea0:	bl	143f0 <flatcc_builder_clear@@Base>
   13ea4:	ldr	r0, [fp, #-12]
   13ea8:	sub	sp, fp, #8
   13eac:	pop	{r4, sl, fp, pc}
   13eb0:	andeq	sp, r1, r0, asr #3

00013eb4 <flatcc_builder_default_alloc@@Base>:
   13eb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13eb8:	add	fp, sp, #24
   13ebc:	mov	r4, r1
   13ec0:	cmp	r2, #0
   13ec4:	beq	13f10 <flatcc_builder_default_alloc@@Base+0x5c>
   13ec8:	ldr	r0, [fp, #8]
   13ecc:	mov	r8, r3
   13ed0:	sub	r1, r0, #1
   13ed4:	cmp	r1, #6
   13ed8:	bhi	13f40 <flatcc_builder_default_alloc@@Base+0x8c>
   13edc:	add	r3, pc, #8
   13ee0:	mov	r0, #256	; 0x100
   13ee4:	ldr	r1, [r3, r1, lsl #2]
   13ee8:	add	pc, r3, r1
   13eec:	andeq	r0, r0, r8, rrx
   13ef0:	andeq	r0, r0, r4, asr r0
   13ef4:	andeq	r0, r0, r4, asr r0
   13ef8:	andeq	r0, r0, ip, lsl r0
   13efc:	andeq	r0, r0, ip, asr r0
   13f00:	andeq	r0, r0, r4, asr r0
   13f04:	andeq	r0, r0, r4, rrx
   13f08:	mov	r0, #288	; 0x120
   13f0c:	b	13f54 <flatcc_builder_default_alloc@@Base+0xa0>
   13f10:	ldr	r0, [r4]
   13f14:	cmp	r0, #0
   13f18:	beq	13f34 <flatcc_builder_default_alloc@@Base+0x80>
   13f1c:	bl	128f0 <free@plt>
   13f20:	mov	r6, #0
   13f24:	mov	r0, r6
   13f28:	str	r6, [r4]
   13f2c:	str	r6, [r4, #4]
   13f30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f34:	mov	r6, #0
   13f38:	mov	r0, r6
   13f3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f40:	mov	r0, #32
   13f44:	b	13f54 <flatcc_builder_default_alloc@@Base+0xa0>
   13f48:	mov	r0, r2
   13f4c:	b	13f54 <flatcc_builder_default_alloc@@Base+0xa0>
   13f50:	mov	r0, #64	; 0x40
   13f54:	mov	r7, r0
   13f58:	lsl	r0, r0, #1
   13f5c:	cmp	r7, r2
   13f60:	bcc	13f54 <flatcc_builder_default_alloc@@Base+0xa0>
   13f64:	ldr	r0, [r4, #4]
   13f68:	mov	r6, #0
   13f6c:	cmp	r0, r2
   13f70:	lsrcs	r0, r0, #1
   13f74:	cmpcs	r0, r7
   13f78:	bcs	13fbc <flatcc_builder_default_alloc@@Base+0x108>
   13f7c:	ldr	r0, [r4]
   13f80:	mov	r1, r7
   13f84:	bl	12920 <realloc@plt>
   13f88:	cmp	r0, #0
   13f8c:	beq	13fc4 <flatcc_builder_default_alloc@@Base+0x110>
   13f90:	mov	r5, r0
   13f94:	cmp	r8, #0
   13f98:	beq	13fb8 <flatcc_builder_default_alloc@@Base+0x104>
   13f9c:	ldr	r1, [r4, #4]
   13fa0:	cmp	r7, r1
   13fa4:	bls	13fb8 <flatcc_builder_default_alloc@@Base+0x104>
   13fa8:	add	r0, r5, r1
   13fac:	sub	r2, r7, r1
   13fb0:	mov	r1, #0
   13fb4:	bl	1298c <memset@plt>
   13fb8:	stm	r4, {r5, r7}
   13fbc:	mov	r0, r6
   13fc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fc4:	mvn	r6, #0
   13fc8:	mov	r0, r6
   13fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013fd0 <flatcc_builder_flush_vtable_cache@@Base>:
   13fd0:	push	{r4, r5, fp, lr}
   13fd4:	add	fp, sp, #8
   13fd8:	mov	r4, r0
   13fdc:	ldr	r0, [r0, #116]	; 0x74
   13fe0:	cmp	r0, #0
   13fe4:	popeq	{r4, r5, fp, pc}
   13fe8:	ldr	r0, [r4, #92]	; 0x5c
   13fec:	ldr	r2, [r4, #96]	; 0x60
   13ff0:	mov	r1, #0
   13ff4:	mov	r5, #0
   13ff8:	bl	1298c <memset@plt>
   13ffc:	mov	r0, #16
   14000:	str	r5, [r4, #120]	; 0x78
   14004:	str	r0, [r4, #124]	; 0x7c
   14008:	pop	{r4, r5, fp, pc}

0001400c <flatcc_builder_custom_init@@Base>:
   1400c:	push	{r4, r5, r6, r7, fp, lr}
   14010:	add	fp, sp, #16
   14014:	mov	r6, r2
   14018:	mov	r7, r1
   1401c:	mov	r1, #0
   14020:	mov	r2, #232	; 0xe8
   14024:	mov	r5, r3
   14028:	mov	r4, r0
   1402c:	bl	1298c <memset@plt>
   14030:	ldr	r0, [fp, #8]
   14034:	cmp	r7, #0
   14038:	bne	14050 <flatcc_builder_custom_init@@Base+0x44>
   1403c:	mov	r1, #1
   14040:	add	r6, r4, #188	; 0xbc
   14044:	str	r1, [r4, #184]	; 0xb8
   14048:	ldr	r7, [pc, #40]	; 14078 <flatcc_builder_custom_init@@Base+0x6c>
   1404c:	ldr	r7, [pc, r7]
   14050:	ldr	r1, [pc, #36]	; 1407c <flatcc_builder_custom_init@@Base+0x70>
   14054:	cmp	r5, #0
   14058:	ldr	r1, [pc, r1]
   1405c:	str	r6, [r4, #36]	; 0x24
   14060:	str	r0, [r4, #40]	; 0x28
   14064:	mov	r0, #0
   14068:	movne	r1, r5
   1406c:	str	r7, [r4, #44]	; 0x2c
   14070:	str	r1, [r4, #48]	; 0x30
   14074:	pop	{r4, r5, r6, r7, fp, pc}
   14078:	andeq	sp, r1, r4, lsl r0
   1407c:	andeq	sp, r1, r4

00014080 <flatcc_builder_init@@Base>:
   14080:	push	{r4, r5, fp, lr}
   14084:	add	fp, sp, #8
   14088:	mov	r1, #0
   1408c:	mov	r2, #232	; 0xe8
   14090:	mov	r4, r0
   14094:	mov	r5, #0
   14098:	bl	1298c <memset@plt>
   1409c:	mov	r0, #1
   140a0:	str	r0, [r4, #184]	; 0xb8
   140a4:	add	r0, r4, #188	; 0xbc
   140a8:	ldr	r1, [pc, #32]	; 140d0 <flatcc_builder_init@@Base+0x50>
   140ac:	ldr	r1, [pc, r1]
   140b0:	ldr	r2, [pc, #28]	; 140d4 <flatcc_builder_init@@Base+0x54>
   140b4:	ldr	r2, [pc, r2]
   140b8:	str	r0, [r4, #36]	; 0x24
   140bc:	mov	r0, #0
   140c0:	str	r5, [r4, #40]	; 0x28
   140c4:	str	r2, [r4, #44]	; 0x2c
   140c8:	str	r1, [r4, #48]	; 0x30
   140cc:	pop	{r4, r5, fp, pc}
   140d0:			; <UNDEFINED> instruction: 0x0001cfb0
   140d4:	andeq	ip, r1, ip, lsr #31

000140d8 <flatcc_builder_custom_reset@@Base>:
   140d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140dc:	add	fp, sp, #28
   140e0:	sub	sp, sp, #4
   140e4:	mov	r9, r2
   140e8:	mov	r8, r1
   140ec:	mov	sl, r0
   140f0:	add	r7, r0, #52	; 0x34
   140f4:	mov	r5, #0
   140f8:	b	14118 <flatcc_builder_custom_reset@@Base+0x40>
   140fc:	ldr	r0, [r6, #56]	; 0x38
   14100:	cmp	r0, #0
   14104:	bne	14200 <flatcc_builder_custom_reset@@Base+0x128>
   14108:	add	r5, r5, #1
   1410c:	add	r7, r7, #8
   14110:	cmp	r5, #8
   14114:	beq	1416c <flatcc_builder_custom_reset@@Base+0x94>
   14118:	add	r6, sl, r5, lsl #3
   1411c:	ldr	r0, [r6, #52]	; 0x34
   14120:	cmp	r0, #0
   14124:	beq	140fc <flatcc_builder_custom_reset@@Base+0x24>
   14128:	cmp	r9, #0
   1412c:	cmpne	r5, #5
   14130:	beq	1415c <flatcc_builder_custom_reset@@Base+0x84>
   14134:	ldr	r0, [sl, #40]	; 0x28
   14138:	ldr	r4, [sl, #48]	; 0x30
   1413c:	mov	r1, r7
   14140:	mov	r2, #1
   14144:	mov	r3, #1
   14148:	str	r5, [sp]
   1414c:	blx	r4
   14150:	cmp	r0, #0
   14154:	bne	141f0 <flatcc_builder_custom_reset@@Base+0x118>
   14158:	ldr	r0, [r6, #52]	; 0x34
   1415c:	ldr	r2, [r6, #56]	; 0x38
   14160:	mov	r1, #0
   14164:	bl	1298c <memset@plt>
   14168:	b	14108 <flatcc_builder_custom_reset@@Base+0x30>
   1416c:	mov	r0, #0
   14170:	vmov.i32	q8, #0	; 0x00000000
   14174:	mov	r5, #0
   14178:	str	r0, [sl, #120]	; 0x78
   1417c:	ldr	r1, [sl, #124]	; 0x7c
   14180:	cmp	r1, #0
   14184:	movne	r1, #16
   14188:	strne	r1, [sl, #124]	; 0x7c
   1418c:	add	r1, sl, #148	; 0x94
   14190:	str	r0, [sl, #136]	; 0x88
   14194:	str	r0, [sl, #140]	; 0x8c
   14198:	strh	r0, [sl, #128]	; 0x80
   1419c:	str	r0, [sl, #32]
   141a0:	cmp	r8, #0
   141a4:	vst1.32	{d16-d17}, [r1]
   141a8:	ldr	r2, [sl, #60]	; 0x3c
   141ac:	ldr	r1, [sl, #52]	; 0x34
   141b0:	ldr	r3, [sl, #76]	; 0x4c
   141b4:	str	r2, [sl, #16]
   141b8:	str	r0, [sl, #20]
   141bc:	str	r0, [sl, #24]
   141c0:	movne	r0, #0
   141c4:	str	r3, [sl]
   141c8:	str	r1, [sl, #4]
   141cc:	strne	r0, [sl, #172]	; 0xac
   141d0:	strne	r0, [sl, #176]	; 0xb0
   141d4:	strne	r0, [sl, #180]	; 0xb4
   141d8:	ldr	r0, [sl, #184]	; 0xb8
   141dc:	cmp	r0, #0
   141e0:	beq	141f4 <flatcc_builder_custom_reset@@Base+0x11c>
   141e4:	add	r0, sl, #188	; 0xbc
   141e8:	bl	18d74 <flatcc_emitter_reset@@Base>
   141ec:	b	141f4 <flatcc_builder_custom_reset@@Base+0x11c>
   141f0:	mvn	r5, #0
   141f4:	mov	r0, r5
   141f8:	sub	sp, fp, #28
   141fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14200:	ldr	r0, [pc, #24]	; 14220 <flatcc_builder_custom_reset@@Base+0x148>
   14204:	ldr	r1, [pc, #24]	; 14224 <flatcc_builder_custom_reset@@Base+0x14c>
   14208:	ldr	r3, [pc, #24]	; 14228 <flatcc_builder_custom_reset@@Base+0x150>
   1420c:	movw	r2, #434	; 0x1b2
   14210:	add	r0, pc, r0
   14214:	add	r1, pc, r1
   14218:	add	r3, pc, r3
   1421c:	bl	129bc <__assert_fail@plt>
   14220:	muleq	r0, r1, r0
   14224:	muleq	r0, pc, r0	; <UNPREDICTABLE>
   14228:	strdeq	sl, [r0], -r8

0001422c <flatcc_builder_reset@@Base>:
   1422c:	push	{r4, sl, fp, lr}
   14230:	add	fp, sp, #8
   14234:	mov	r4, r0
   14238:	ldr	r0, [r0, #52]	; 0x34
   1423c:	ldr	r2, [r4, #56]	; 0x38
   14240:	cmp	r0, #0
   14244:	beq	14254 <flatcc_builder_reset@@Base+0x28>
   14248:	mov	r1, #0
   1424c:	bl	1298c <memset@plt>
   14250:	b	1425c <flatcc_builder_reset@@Base+0x30>
   14254:	cmp	r2, #0
   14258:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   1425c:	ldr	r0, [r4, #60]	; 0x3c
   14260:	ldr	r2, [r4, #64]	; 0x40
   14264:	cmp	r0, #0
   14268:	beq	14278 <flatcc_builder_reset@@Base+0x4c>
   1426c:	mov	r1, #0
   14270:	bl	1298c <memset@plt>
   14274:	b	14280 <flatcc_builder_reset@@Base+0x54>
   14278:	cmp	r2, #0
   1427c:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   14280:	ldr	r0, [r4, #68]	; 0x44
   14284:	ldr	r2, [r4, #72]	; 0x48
   14288:	cmp	r0, #0
   1428c:	beq	1429c <flatcc_builder_reset@@Base+0x70>
   14290:	mov	r1, #0
   14294:	bl	1298c <memset@plt>
   14298:	b	142a4 <flatcc_builder_reset@@Base+0x78>
   1429c:	cmp	r2, #0
   142a0:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   142a4:	ldr	r0, [r4, #76]	; 0x4c
   142a8:	ldr	r2, [r4, #80]	; 0x50
   142ac:	cmp	r0, #0
   142b0:	beq	142c0 <flatcc_builder_reset@@Base+0x94>
   142b4:	mov	r1, #0
   142b8:	bl	1298c <memset@plt>
   142bc:	b	142c8 <flatcc_builder_reset@@Base+0x9c>
   142c0:	cmp	r2, #0
   142c4:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   142c8:	ldr	r0, [r4, #84]	; 0x54
   142cc:	ldr	r2, [r4, #88]	; 0x58
   142d0:	cmp	r0, #0
   142d4:	beq	142e4 <flatcc_builder_reset@@Base+0xb8>
   142d8:	mov	r1, #0
   142dc:	bl	1298c <memset@plt>
   142e0:	b	142ec <flatcc_builder_reset@@Base+0xc0>
   142e4:	cmp	r2, #0
   142e8:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   142ec:	ldr	r0, [r4, #92]	; 0x5c
   142f0:	ldr	r2, [r4, #96]	; 0x60
   142f4:	cmp	r0, #0
   142f8:	beq	14308 <flatcc_builder_reset@@Base+0xdc>
   142fc:	mov	r1, #0
   14300:	bl	1298c <memset@plt>
   14304:	b	14310 <flatcc_builder_reset@@Base+0xe4>
   14308:	cmp	r2, #0
   1430c:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   14310:	ldr	r0, [r4, #100]	; 0x64
   14314:	ldr	r2, [r4, #104]	; 0x68
   14318:	cmp	r0, #0
   1431c:	beq	1432c <flatcc_builder_reset@@Base+0x100>
   14320:	mov	r1, #0
   14324:	bl	1298c <memset@plt>
   14328:	b	14334 <flatcc_builder_reset@@Base+0x108>
   1432c:	cmp	r2, #0
   14330:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   14334:	ldr	r0, [r4, #108]	; 0x6c
   14338:	ldr	r2, [r4, #112]	; 0x70
   1433c:	cmp	r0, #0
   14340:	beq	14350 <flatcc_builder_reset@@Base+0x124>
   14344:	mov	r1, #0
   14348:	bl	1298c <memset@plt>
   1434c:	b	14358 <flatcc_builder_reset@@Base+0x12c>
   14350:	cmp	r2, #0
   14354:	bne	143c4 <flatcc_builder_reset@@Base+0x198>
   14358:	mov	r0, #0
   1435c:	str	r0, [r4, #120]	; 0x78
   14360:	ldr	r1, [r4, #124]	; 0x7c
   14364:	cmp	r1, #0
   14368:	movne	r1, #16
   1436c:	strne	r1, [r4, #124]	; 0x7c
   14370:	vmov.i32	q8, #0	; 0x00000000
   14374:	add	r1, r4, #148	; 0x94
   14378:	str	r0, [r4, #136]	; 0x88
   1437c:	str	r0, [r4, #140]	; 0x8c
   14380:	strh	r0, [r4, #128]	; 0x80
   14384:	str	r0, [r4, #32]
   14388:	vst1.32	{d16-d17}, [r1]
   1438c:	ldr	r1, [r4, #184]	; 0xb8
   14390:	ldr	r2, [r4, #60]	; 0x3c
   14394:	ldr	r3, [r4, #76]	; 0x4c
   14398:	ldr	ip, [r4, #52]	; 0x34
   1439c:	cmp	r1, #0
   143a0:	str	r2, [r4, #16]
   143a4:	str	r0, [r4, #20]
   143a8:	str	r0, [r4, #24]
   143ac:	stm	r4, {r3, ip}
   143b0:	beq	143bc <flatcc_builder_reset@@Base+0x190>
   143b4:	add	r0, r4, #188	; 0xbc
   143b8:	bl	18d74 <flatcc_emitter_reset@@Base>
   143bc:	mov	r0, #0
   143c0:	pop	{r4, sl, fp, pc}
   143c4:	ldr	r0, [pc, #24]	; 143e4 <flatcc_builder_reset@@Base+0x1b8>
   143c8:	ldr	r1, [pc, #24]	; 143e8 <flatcc_builder_reset@@Base+0x1bc>
   143cc:	ldr	r3, [pc, #24]	; 143ec <flatcc_builder_reset@@Base+0x1c0>
   143d0:	movw	r2, #434	; 0x1b2
   143d4:	add	r0, pc, r0
   143d8:	add	r1, pc, r1
   143dc:	add	r3, pc, r3
   143e0:	bl	129bc <__assert_fail@plt>
   143e4:	andeq	r9, r0, sp, asr #29
   143e8:	ldrdeq	r9, [r0], -fp
   143ec:	andeq	r9, r0, r4, lsr pc

000143f0 <flatcc_builder_clear@@Base>:
   143f0:	push	{r4, sl, fp, lr}
   143f4:	add	fp, sp, #8
   143f8:	sub	sp, sp, #8
   143fc:	mov	r4, r0
   14400:	ldr	r0, [r0, #40]	; 0x28
   14404:	mov	r1, #0
   14408:	mov	r2, #0
   1440c:	mov	r3, #0
   14410:	ldr	ip, [r4, #48]	; 0x30
   14414:	str	r1, [sp]
   14418:	add	r1, r4, #52	; 0x34
   1441c:	blx	ip
   14420:	ldr	r0, [r4, #40]	; 0x28
   14424:	ldr	ip, [r4, #48]	; 0x30
   14428:	mov	r1, #1
   1442c:	mov	r2, #0
   14430:	mov	r3, #0
   14434:	str	r1, [sp]
   14438:	add	r1, r4, #60	; 0x3c
   1443c:	blx	ip
   14440:	ldr	r0, [r4, #40]	; 0x28
   14444:	ldr	ip, [r4, #48]	; 0x30
   14448:	mov	r1, #2
   1444c:	mov	r2, #0
   14450:	mov	r3, #0
   14454:	str	r1, [sp]
   14458:	add	r1, r4, #68	; 0x44
   1445c:	blx	ip
   14460:	ldr	r0, [r4, #40]	; 0x28
   14464:	ldr	ip, [r4, #48]	; 0x30
   14468:	mov	r1, #3
   1446c:	mov	r2, #0
   14470:	mov	r3, #0
   14474:	str	r1, [sp]
   14478:	add	r1, r4, #76	; 0x4c
   1447c:	blx	ip
   14480:	ldr	r0, [r4, #40]	; 0x28
   14484:	ldr	ip, [r4, #48]	; 0x30
   14488:	mov	r1, #4
   1448c:	mov	r2, #0
   14490:	mov	r3, #0
   14494:	str	r1, [sp]
   14498:	add	r1, r4, #84	; 0x54
   1449c:	blx	ip
   144a0:	ldr	r0, [r4, #40]	; 0x28
   144a4:	ldr	ip, [r4, #48]	; 0x30
   144a8:	mov	r1, #5
   144ac:	mov	r2, #0
   144b0:	mov	r3, #0
   144b4:	str	r1, [sp]
   144b8:	add	r1, r4, #92	; 0x5c
   144bc:	blx	ip
   144c0:	ldr	r0, [r4, #40]	; 0x28
   144c4:	ldr	ip, [r4, #48]	; 0x30
   144c8:	mov	r1, #6
   144cc:	mov	r2, #0
   144d0:	mov	r3, #0
   144d4:	str	r1, [sp]
   144d8:	add	r1, r4, #100	; 0x64
   144dc:	blx	ip
   144e0:	ldr	r0, [r4, #40]	; 0x28
   144e4:	ldr	ip, [r4, #48]	; 0x30
   144e8:	mov	r1, #7
   144ec:	mov	r2, #0
   144f0:	mov	r3, #0
   144f4:	str	r1, [sp]
   144f8:	add	r1, r4, #108	; 0x6c
   144fc:	blx	ip
   14500:	ldr	r0, [r4, #184]	; 0xb8
   14504:	cmp	r0, #0
   14508:	beq	14514 <flatcc_builder_clear@@Base+0x124>
   1450c:	add	r0, r4, #188	; 0xbc
   14510:	bl	18e40 <flatcc_emitter_clear@@Base>
   14514:	mov	r0, r4
   14518:	mov	r1, #0
   1451c:	mov	r2, #232	; 0xe8
   14520:	sub	sp, fp, #8
   14524:	pop	{r4, sl, fp, lr}
   14528:	b	1298c <memset@plt>

0001452c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1452c:	push	{r4, r5, r6, r7, fp, lr}
   14530:	add	fp, sp, #16
   14534:	sub	sp, sp, #8
   14538:	mov	r4, r0
   1453c:	ldr	r0, [r0, #112]	; 0x70
   14540:	add	r1, r1, #7
   14544:	ldr	r7, [r4, #228]	; 0xe4
   14548:	bic	r5, r1, #3
   1454c:	add	r6, r4, #108	; 0x6c
   14550:	add	r2, r7, r5
   14554:	cmp	r2, r0
   14558:	bls	14580 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1455c:	ldr	r0, [r4, #40]	; 0x28
   14560:	ldr	ip, [r4, #48]	; 0x30
   14564:	mov	r1, #7
   14568:	mov	r3, #0
   1456c:	str	r1, [sp]
   14570:	mov	r1, r6
   14574:	blx	ip
   14578:	cmp	r0, #0
   1457c:	bne	145cc <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   14580:	ldr	r0, [r6]
   14584:	adds	r6, r0, r7
   14588:	beq	145bc <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   1458c:	mov	r0, r6
   14590:	mov	r1, #0
   14594:	mov	r2, r5
   14598:	bl	1298c <memset@plt>
   1459c:	ldr	r0, [r4, #224]	; 0xe0
   145a0:	str	r0, [r6], #4
   145a4:	ldr	r0, [r4, #228]	; 0xe4
   145a8:	add	r1, r0, #4
   145ac:	add	r0, r0, r5
   145b0:	str	r1, [r4, #224]	; 0xe0
   145b4:	str	r0, [r4, #228]	; 0xe4
   145b8:	b	145c0 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   145bc:	mov	r6, #0
   145c0:	mov	r0, r6
   145c4:	sub	sp, fp, #16
   145c8:	pop	{r4, r5, r6, r7, fp, pc}
   145cc:	ldr	r0, [pc, #24]	; 145ec <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   145d0:	ldr	r1, [pc, #24]	; 145f0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   145d4:	ldr	r3, [pc, #24]	; 145f4 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   145d8:	mov	r2, #308	; 0x134
   145dc:	add	r0, pc, r0
   145e0:	add	r1, pc, r1
   145e4:	add	r3, pc, r3
   145e8:	bl	129bc <__assert_fail@plt>
   145ec:	muleq	r0, r4, lr
   145f0:	ldrdeq	r9, [r0], -r3
   145f4:	andeq	sl, r0, r6, asr #25

000145f8 <flatcc_builder_enter_user_frame@@Base>:
   145f8:	push	{r4, r5, r6, r7, fp, lr}
   145fc:	add	fp, sp, #16
   14600:	sub	sp, sp, #8
   14604:	mov	r4, r0
   14608:	ldr	r0, [r0, #112]	; 0x70
   1460c:	add	r1, r1, #7
   14610:	ldr	r7, [r4, #228]	; 0xe4
   14614:	bic	r5, r1, #3
   14618:	add	r6, r4, #108	; 0x6c
   1461c:	add	r2, r7, r5
   14620:	cmp	r2, r0
   14624:	bls	1464c <flatcc_builder_enter_user_frame@@Base+0x54>
   14628:	ldr	r0, [r4, #40]	; 0x28
   1462c:	ldr	ip, [r4, #48]	; 0x30
   14630:	mov	r1, #7
   14634:	mov	r3, #0
   14638:	str	r1, [sp]
   1463c:	mov	r1, r6
   14640:	blx	ip
   14644:	cmp	r0, #0
   14648:	bne	14698 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1464c:	ldr	r0, [r6]
   14650:	adds	r6, r0, r7
   14654:	beq	1468c <flatcc_builder_enter_user_frame@@Base+0x94>
   14658:	mov	r0, r6
   1465c:	mov	r1, #0
   14660:	mov	r2, r5
   14664:	bl	1298c <memset@plt>
   14668:	ldr	r0, [r4, #224]	; 0xe0
   1466c:	str	r0, [r6]
   14670:	ldr	r1, [r4, #228]	; 0xe4
   14674:	add	r0, r1, #4
   14678:	add	r1, r1, r5
   1467c:	str	r0, [r4, #224]	; 0xe0
   14680:	str	r1, [r4, #228]	; 0xe4
   14684:	sub	sp, fp, #16
   14688:	pop	{r4, r5, r6, r7, fp, pc}
   1468c:	mov	r0, #0
   14690:	sub	sp, fp, #16
   14694:	pop	{r4, r5, r6, r7, fp, pc}
   14698:	ldr	r0, [pc, #24]	; 146b8 <flatcc_builder_enter_user_frame@@Base+0xc0>
   1469c:	ldr	r1, [pc, #24]	; 146bc <flatcc_builder_enter_user_frame@@Base+0xc4>
   146a0:	ldr	r3, [pc, #24]	; 146c0 <flatcc_builder_enter_user_frame@@Base+0xc8>
   146a4:	mov	r2, #308	; 0x134
   146a8:	add	r0, pc, r0
   146ac:	add	r1, pc, r1
   146b0:	add	r3, pc, r3
   146b4:	bl	129bc <__assert_fail@plt>
   146b8:	andeq	sl, r0, r8, asr #27
   146bc:	andeq	r9, r0, r7, lsl #24
   146c0:	strdeq	sl, [r0], -sl	; <UNPREDICTABLE>

000146c4 <flatcc_builder_exit_user_frame@@Base>:
   146c4:	push	{fp, lr}
   146c8:	mov	fp, sp
   146cc:	ldr	r1, [r0, #224]	; 0xe0
   146d0:	cmp	r1, #0
   146d4:	subne	r2, r1, #4
   146d8:	strne	r2, [r0, #228]	; 0xe4
   146dc:	ldrne	r2, [r0, #108]	; 0x6c
   146e0:	addne	r1, r2, r1
   146e4:	ldrne	r1, [r1, #-4]
   146e8:	strne	r1, [r0, #224]	; 0xe0
   146ec:	movne	r0, r1
   146f0:	popne	{fp, pc}
   146f4:	ldr	r0, [pc, #24]	; 14714 <flatcc_builder_exit_user_frame@@Base+0x50>
   146f8:	ldr	r1, [pc, #24]	; 14718 <flatcc_builder_exit_user_frame@@Base+0x54>
   146fc:	ldr	r3, [pc, #24]	; 1471c <flatcc_builder_exit_user_frame@@Base+0x58>
   14700:	movw	r2, #542	; 0x21e
   14704:	add	r0, pc, r0
   14708:	add	r1, pc, r1
   1470c:	add	r3, pc, r3
   14710:	bl	129bc <__assert_fail@plt>
   14714:	andeq	r9, r0, sl, asr #24
   14718:	andeq	r9, r0, fp, lsr #23
   1471c:	andeq	r9, r0, fp, asr ip

00014720 <flatcc_builder_exit_user_frame_at@@Base>:
   14720:	push	{fp, lr}
   14724:	mov	fp, sp
   14728:	ldr	r2, [r0, #224]	; 0xe0
   1472c:	cmp	r2, r1
   14730:	bcc	1477c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   14734:	cmp	r1, #0
   14738:	str	r1, [r0, #224]	; 0xe0
   1473c:	subne	r2, r1, #4
   14740:	strne	r2, [r0, #228]	; 0xe4
   14744:	ldrne	r2, [r0, #108]	; 0x6c
   14748:	addne	r1, r2, r1
   1474c:	ldrne	r1, [r1, #-4]
   14750:	strne	r1, [r0, #224]	; 0xe0
   14754:	movne	r0, r1
   14758:	popne	{fp, pc}
   1475c:	ldr	r0, [pc, #68]	; 147a8 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   14760:	ldr	r1, [pc, #68]	; 147ac <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   14764:	ldr	r3, [pc, #68]	; 147b0 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   14768:	movw	r2, #542	; 0x21e
   1476c:	add	r0, pc, r0
   14770:	add	r1, pc, r1
   14774:	add	r3, pc, r3
   14778:	bl	129bc <__assert_fail@plt>
   1477c:	ldr	r0, [pc, #24]	; 1479c <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   14780:	ldr	r1, [pc, #24]	; 147a0 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   14784:	ldr	r3, [pc, #24]	; 147a4 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   14788:	movw	r2, #551	; 0x227
   1478c:	add	r0, pc, r0
   14790:	add	r1, pc, r1
   14794:	add	r3, pc, r3
   14798:	bl	129bc <__assert_fail@plt>
   1479c:	andeq	r9, r0, r5, lsl ip
   147a0:	andeq	r9, r0, r3, lsr #22
   147a4:	andeq	r9, r0, ip, lsr #24
   147a8:	andeq	r9, r0, r2, ror #23
   147ac:	andeq	r9, r0, r3, asr #22
   147b0:	strdeq	r9, [r0], -r3

000147b4 <flatcc_builder_get_current_user_frame@@Base>:
   147b4:	ldr	r0, [r0, #224]	; 0xe0
   147b8:	bx	lr

000147bc <flatcc_builder_get_user_frame_ptr@@Base>:
   147bc:	ldr	r0, [r0, #108]	; 0x6c
   147c0:	add	r0, r0, r1
   147c4:	bx	lr

000147c8 <flatcc_builder_embed_buffer@@Base>:
   147c8:	push	{r4, r5, r6, r7, fp, lr}
   147cc:	add	fp, sp, #16
   147d0:	sub	sp, sp, #88	; 0x58
   147d4:	mov	r4, r0
   147d8:	ldr	r0, [fp, #8]
   147dc:	mov	r5, r3
   147e0:	mov	r7, r2
   147e4:	mov	r2, r1
   147e8:	sub	r1, fp, #18
   147ec:	strh	r0, [fp, #-18]	; 0xffffffee
   147f0:	mov	r0, r4
   147f4:	ldr	r3, [r4, #152]	; 0x98
   147f8:	cmp	r3, #0
   147fc:	movwne	r3, #1
   14800:	bl	14954 <flatcc_builder_embed_buffer@@Base+0x18c>
   14804:	ldr	r1, [fp, #12]
   14808:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1480c:	ldr	r0, [r4, #136]	; 0x88
   14810:	mov	r2, #0
   14814:	str	r2, [sp, #12]
   14818:	str	r2, [sp, #8]
   1481c:	and	r1, r1, #2
   14820:	sub	r3, r3, #1
   14824:	add	r1, r5, r1, lsl #1
   14828:	sub	r1, r0, r1
   1482c:	and	r3, r1, r3
   14830:	add	r1, r3, r5
   14834:	str	r1, [fp, #-24]	; 0xffffffe8
   14838:	ldr	r1, [r4, #152]	; 0x98
   1483c:	cmp	r1, #0
   14840:	mov	r1, #0
   14844:	beq	14864 <flatcc_builder_embed_buffer@@Base+0x9c>
   14848:	mov	r1, #4
   1484c:	sub	r2, fp, #24
   14850:	str	r1, [sp, #20]
   14854:	str	r2, [sp, #16]
   14858:	mov	r2, #1
   1485c:	str	r1, [sp, #8]
   14860:	str	r2, [sp, #12]
   14864:	cmp	r5, #0
   14868:	beq	1488c <flatcc_builder_embed_buffer@@Base+0xc4>
   1486c:	add	r6, sp, #8
   14870:	add	r1, r1, r5
   14874:	add	r6, r6, r2, lsl #3
   14878:	add	r2, r2, #1
   1487c:	str	r1, [sp, #8]
   14880:	str	r7, [r6, #8]
   14884:	str	r5, [r6, #12]
   14888:	str	r2, [sp, #12]
   1488c:	cmp	r3, #0
   14890:	beq	148bc <flatcc_builder_embed_buffer@@Base+0xf4>
   14894:	add	r1, r1, r3
   14898:	add	r7, sp, #8
   1489c:	str	r1, [sp, #8]
   148a0:	add	r7, r7, r2, lsl #3
   148a4:	add	r2, r2, #1
   148a8:	ldr	r6, [pc, #136]	; 14938 <flatcc_builder_embed_buffer@@Base+0x170>
   148ac:	ldr	r6, [pc, r6]
   148b0:	str	r6, [r7, #8]
   148b4:	str	r3, [r7, #12]
   148b8:	str	r2, [sp, #12]
   148bc:	cmp	r1, #0
   148c0:	ble	14918 <flatcc_builder_embed_buffer@@Base+0x150>
   148c4:	sub	r5, r0, r1
   148c8:	ldr	r0, [r4, #36]	; 0x24
   148cc:	ldr	r7, [r4, #44]	; 0x2c
   148d0:	str	r1, [sp]
   148d4:	add	r1, sp, #8
   148d8:	add	r1, r1, #8
   148dc:	mov	r3, r5
   148e0:	blx	r7
   148e4:	cmp	r0, #0
   148e8:	streq	r5, [r4, #136]	; 0x88
   148ec:	moveq	r0, r5
   148f0:	subeq	sp, fp, #16
   148f4:	popeq	{r4, r5, r6, r7, fp, pc}
   148f8:	ldr	r0, [pc, #72]	; 14948 <flatcc_builder_embed_buffer@@Base+0x180>
   148fc:	ldr	r1, [pc, #72]	; 1494c <flatcc_builder_embed_buffer@@Base+0x184>
   14900:	ldr	r3, [pc, #72]	; 14950 <flatcc_builder_embed_buffer@@Base+0x188>
   14904:	movw	r2, #651	; 0x28b
   14908:	add	r0, pc, r0
   1490c:	add	r1, pc, r1
   14910:	add	r3, pc, r3
   14914:	bl	129bc <__assert_fail@plt>
   14918:	ldr	r0, [pc, #28]	; 1493c <flatcc_builder_embed_buffer@@Base+0x174>
   1491c:	ldr	r1, [pc, #28]	; 14940 <flatcc_builder_embed_buffer@@Base+0x178>
   14920:	ldr	r3, [pc, #28]	; 14944 <flatcc_builder_embed_buffer@@Base+0x17c>
   14924:	movw	r2, #647	; 0x287
   14928:	add	r0, pc, r0
   1492c:	add	r1, pc, r1
   14930:	add	r3, pc, r3
   14934:	bl	129bc <__assert_fail@plt>
   14938:	andeq	ip, r1, r4, lsr #15
   1493c:	andeq	sl, r0, r8, asr #22
   14940:	andeq	r9, r0, r7, lsl #19
   14944:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   14948:	andeq	sl, r0, r8, ror #22
   1494c:	andeq	r9, r0, r7, lsr #19
   14950:	andeq	sl, r0, pc, lsl sl
   14954:	push	{r4, sl, fp, lr}
   14958:	add	fp, sp, #8
   1495c:	sub	sp, sp, #80	; 0x50
   14960:	cmp	r2, #0
   14964:	bne	14974 <flatcc_builder_embed_buffer@@Base+0x1ac>
   14968:	ldrh	r2, [r0, #132]	; 0x84
   1496c:	cmp	r2, #0
   14970:	movweq	r2, #1
   14974:	ldrh	r4, [r1]
   14978:	cmp	r4, #4
   1497c:	movwcc	r4, #4
   14980:	cmpcs	r4, r2
   14984:	bcs	14994 <flatcc_builder_embed_buffer@@Base+0x1cc>
   14988:	cmp	r4, r2
   1498c:	movcc	r4, r2
   14990:	strh	r4, [r1]
   14994:	cmp	r3, #0
   14998:	bne	14a0c <flatcc_builder_embed_buffer@@Base+0x244>
   1499c:	ldr	r4, [r0, #140]	; 0x8c
   149a0:	sub	r1, r2, #1
   149a4:	ands	r1, r4, r1
   149a8:	beq	14a0c <flatcc_builder_embed_buffer@@Base+0x244>
   149ac:	mov	r2, #1
   149b0:	str	r1, [sp, #20]
   149b4:	str	r1, [sp, #8]
   149b8:	cmn	r1, #1
   149bc:	str	r2, [sp, #12]
   149c0:	ldr	r2, [pc, #172]	; 14a74 <flatcc_builder_embed_buffer@@Base+0x2ac>
   149c4:	ldr	r2, [pc, r2]
   149c8:	str	r2, [sp, #16]
   149cc:	add	r2, r1, r4
   149d0:	str	r2, [r0, #140]	; 0x8c
   149d4:	ble	14a14 <flatcc_builder_embed_buffer@@Base+0x24c>
   149d8:	ldr	r2, [r0, #36]	; 0x24
   149dc:	ldr	ip, [r0, #44]	; 0x2c
   149e0:	add	r0, sp, #8
   149e4:	str	r1, [sp]
   149e8:	mov	r3, r4
   149ec:	add	r1, r0, #8
   149f0:	mov	r0, r2
   149f4:	mov	r2, #1
   149f8:	blx	ip
   149fc:	cmp	r0, #0
   14a00:	bne	14a34 <flatcc_builder_embed_buffer@@Base+0x26c>
   14a04:	cmn	r4, #1
   14a08:	beq	14a54 <flatcc_builder_embed_buffer@@Base+0x28c>
   14a0c:	sub	sp, fp, #8
   14a10:	pop	{r4, sl, fp, pc}
   14a14:	ldr	r0, [pc, #92]	; 14a78 <flatcc_builder_embed_buffer@@Base+0x2b0>
   14a18:	ldr	r1, [pc, #92]	; 14a7c <flatcc_builder_embed_buffer@@Base+0x2b4>
   14a1c:	ldr	r3, [pc, #92]	; 14a80 <flatcc_builder_embed_buffer@@Base+0x2b8>
   14a20:	movw	r2, #673	; 0x2a1
   14a24:	add	r0, pc, r0
   14a28:	add	r1, pc, r1
   14a2c:	add	r3, pc, r3
   14a30:	bl	129bc <__assert_fail@plt>
   14a34:	ldr	r0, [pc, #72]	; 14a84 <flatcc_builder_embed_buffer@@Base+0x2bc>
   14a38:	ldr	r1, [pc, #72]	; 14a88 <flatcc_builder_embed_buffer@@Base+0x2c0>
   14a3c:	ldr	r3, [pc, #72]	; 14a8c <flatcc_builder_embed_buffer@@Base+0x2c4>
   14a40:	movw	r2, #677	; 0x2a5
   14a44:	add	r0, pc, r0
   14a48:	add	r1, pc, r1
   14a4c:	add	r3, pc, r3
   14a50:	bl	129bc <__assert_fail@plt>
   14a54:	ldr	r0, [pc, #52]	; 14a90 <flatcc_builder_embed_buffer@@Base+0x2c8>
   14a58:	ldr	r1, [pc, #52]	; 14a94 <flatcc_builder_embed_buffer@@Base+0x2cc>
   14a5c:	ldr	r3, [pc, #52]	; 14a98 <flatcc_builder_embed_buffer@@Base+0x2d0>
   14a60:	movw	r2, #702	; 0x2be
   14a64:	add	r0, pc, r0
   14a68:	add	r1, pc, r1
   14a6c:	add	r3, pc, r3
   14a70:	bl	129bc <__assert_fail@plt>
   14a74:	andeq	ip, r1, ip, lsl #13
   14a78:	andeq	sl, r0, ip, asr #20
   14a7c:	andeq	r9, r0, fp, lsl #17
   14a80:			; <UNDEFINED> instruction: 0x0000a9bf
   14a84:	andeq	sl, r0, ip, lsr #20
   14a88:	andeq	r9, r0, fp, ror #16
   14a8c:	muleq	r0, pc, r9	; <UNPREDICTABLE>
   14a90:	andeq	sl, r0, ip, lsl #20
   14a94:	andeq	r9, r0, fp, asr #16
   14a98:	andeq	sl, r0, r1, lsl #17

00014a9c <flatcc_builder_create_buffer@@Base>:
   14a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aa0:	add	fp, sp, #28
   14aa4:	sub	sp, sp, #100	; 0x64
   14aa8:	ldr	sl, [fp, #12]
   14aac:	mov	r4, r0
   14ab0:	ldr	r0, [fp, #8]
   14ab4:	mov	r7, r1
   14ab8:	mov	r5, #0
   14abc:	mov	r6, r3
   14ac0:	sub	r1, fp, #30
   14ac4:	str	r5, [sp, #12]
   14ac8:	and	r9, sl, #1
   14acc:	strh	r0, [fp, #-30]	; 0xffffffe2
   14ad0:	mov	r0, r4
   14ad4:	mov	r3, r9
   14ad8:	bl	14954 <flatcc_builder_embed_buffer@@Base+0x18c>
   14adc:	ldrh	r0, [r4, #128]	; 0x80
   14ae0:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14ae4:	str	r6, [sp, #8]
   14ae8:	cmp	r0, r1
   14aec:	strhcc	r1, [r4, #128]	; 0x80
   14af0:	cmp	r7, #0
   14af4:	beq	14b10 <flatcc_builder_create_buffer@@Base+0x74>
   14af8:	ldr	r5, [r7]
   14afc:	cmp	r5, #0
   14b00:	str	r5, [sp, #12]
   14b04:	movwne	r5, #1
   14b08:	lsl	r7, r5, #2
   14b0c:	b	14b14 <flatcc_builder_create_buffer@@Base+0x78>
   14b10:	mov	r7, #0
   14b14:	ldr	r0, [r4, #136]	; 0x88
   14b18:	and	r2, sl, #2
   14b1c:	mov	r3, #0
   14b20:	sub	r6, r1, #1
   14b24:	ands	ip, sl, #3
   14b28:	mov	sl, #4
   14b2c:	mov	r1, #4
   14b30:	str	r3, [sp, #20]
   14b34:	str	r3, [sp, #16]
   14b38:	sub	r2, r0, r2, lsl #1
   14b3c:	sub	r2, r2, r7
   14b40:	sub	r2, r2, #4
   14b44:	beq	14b68 <flatcc_builder_create_buffer@@Base+0xcc>
   14b48:	mov	r1, #4
   14b4c:	sub	r3, fp, #40	; 0x28
   14b50:	str	r1, [sp, #28]
   14b54:	str	r3, [sp, #24]
   14b58:	str	r1, [sp, #16]
   14b5c:	mov	r3, #1
   14b60:	mov	r1, #8
   14b64:	str	r3, [sp, #20]
   14b68:	add	lr, sp, #16
   14b6c:	and	r6, r2, r6
   14b70:	sub	r8, fp, #36	; 0x24
   14b74:	str	r1, [sp, #16]
   14b78:	cmp	r5, #0
   14b7c:	add	r2, lr, r3, lsl #3
   14b80:	str	r8, [r2, #8]
   14b84:	str	sl, [r2, #12]
   14b88:	add	r2, r3, #1
   14b8c:	str	r2, [sp, #20]
   14b90:	beq	14bb4 <flatcc_builder_create_buffer@@Base+0x118>
   14b94:	add	r2, lr, r2, lsl #3
   14b98:	add	r1, r1, r7
   14b9c:	add	r5, sp, #12
   14ba0:	str	r1, [sp, #16]
   14ba4:	str	r5, [r2, #8]
   14ba8:	str	r7, [r2, #12]
   14bac:	orr	r2, r3, #2
   14bb0:	str	r2, [sp, #20]
   14bb4:	cmp	r6, #0
   14bb8:	beq	14be0 <flatcc_builder_create_buffer@@Base+0x144>
   14bbc:	add	r1, r1, r6
   14bc0:	add	r3, lr, r2, lsl #3
   14bc4:	add	r2, r2, #1
   14bc8:	str	r1, [sp, #16]
   14bcc:	ldr	r5, [pc, #220]	; 14cb0 <flatcc_builder_create_buffer@@Base+0x214>
   14bd0:	ldr	r5, [pc, r5]
   14bd4:	str	r5, [r3, #8]
   14bd8:	str	r6, [r3, #12]
   14bdc:	str	r2, [sp, #20]
   14be0:	sub	r7, r0, r1
   14be4:	cmp	ip, #0
   14be8:	mov	r6, #144	; 0x90
   14bec:	ldr	r3, [sp, #8]
   14bf0:	mov	r0, r7
   14bf4:	addne	r0, r0, #4
   14bf8:	cmp	r9, #0
   14bfc:	movweq	r6, #140	; 0x8c
   14c00:	cmp	r1, #0
   14c04:	ldr	r6, [r4, r6]
   14c08:	sub	r3, r3, r0
   14c0c:	str	r3, [fp, #-36]	; 0xffffffdc
   14c10:	sub	r0, r6, r0
   14c14:	str	r0, [fp, #-40]	; 0xffffffd8
   14c18:	ble	14c70 <flatcc_builder_create_buffer@@Base+0x1d4>
   14c1c:	ldr	r0, [r4, #36]	; 0x24
   14c20:	ldr	r6, [r4, #44]	; 0x2c
   14c24:	str	r1, [sp]
   14c28:	add	r1, lr, #8
   14c2c:	mov	r3, r7
   14c30:	blx	r6
   14c34:	cmp	r0, #0
   14c38:	bne	14c90 <flatcc_builder_create_buffer@@Base+0x1f4>
   14c3c:	cmp	r7, #0
   14c40:	str	r7, [r4, #136]	; 0x88
   14c44:	movne	r0, r7
   14c48:	subne	sp, fp, #28
   14c4c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c50:	ldr	r0, [pc, #116]	; 14ccc <flatcc_builder_create_buffer@@Base+0x230>
   14c54:	ldr	r1, [pc, #116]	; 14cd0 <flatcc_builder_create_buffer@@Base+0x234>
   14c58:	ldr	r3, [pc, #116]	; 14cd4 <flatcc_builder_create_buffer@@Base+0x238>
   14c5c:	mov	r2, #772	; 0x304
   14c60:	add	r0, pc, r0
   14c64:	add	r1, pc, r1
   14c68:	add	r3, pc, r3
   14c6c:	bl	129bc <__assert_fail@plt>
   14c70:	ldr	r0, [pc, #60]	; 14cb4 <flatcc_builder_create_buffer@@Base+0x218>
   14c74:	ldr	r1, [pc, #60]	; 14cb8 <flatcc_builder_create_buffer@@Base+0x21c>
   14c78:	ldr	r3, [pc, #60]	; 14cbc <flatcc_builder_create_buffer@@Base+0x220>
   14c7c:	movw	r2, #647	; 0x287
   14c80:	add	r0, pc, r0
   14c84:	add	r1, pc, r1
   14c88:	add	r3, pc, r3
   14c8c:	bl	129bc <__assert_fail@plt>
   14c90:	ldr	r0, [pc, #40]	; 14cc0 <flatcc_builder_create_buffer@@Base+0x224>
   14c94:	ldr	r1, [pc, #40]	; 14cc4 <flatcc_builder_create_buffer@@Base+0x228>
   14c98:	ldr	r3, [pc, #40]	; 14cc8 <flatcc_builder_create_buffer@@Base+0x22c>
   14c9c:	movw	r2, #651	; 0x28b
   14ca0:	add	r0, pc, r0
   14ca4:	add	r1, pc, r1
   14ca8:	add	r3, pc, r3
   14cac:	bl	129bc <__assert_fail@plt>
   14cb0:	andeq	ip, r1, r0, lsl #9
   14cb4:	strdeq	sl, [r0], -r0
   14cb8:	andeq	r9, r0, pc, lsr #12
   14cbc:	andeq	sl, r0, r7, lsr #13
   14cc0:	ldrdeq	sl, [r0], -r0
   14cc4:	andeq	r9, r0, pc, lsl #12
   14cc8:	andeq	sl, r0, r7, lsl #13
   14ccc:	andeq	sl, r0, r0, lsl r8
   14cd0:	andeq	r9, r0, pc, asr #12
   14cd4:	muleq	r0, sp, r7

00014cd8 <flatcc_builder_create_struct@@Base>:
   14cd8:	push	{r4, r5, r6, sl, fp, lr}
   14cdc:	add	fp, sp, #16
   14ce0:	sub	sp, sp, #80	; 0x50
   14ce4:	cmp	r3, #0
   14ce8:	beq	14dc0 <flatcc_builder_create_struct@@Base+0xe8>
   14cec:	mov	r5, r0
   14cf0:	ldrh	r0, [r0, #128]	; 0x80
   14cf4:	mov	r4, #0
   14cf8:	cmp	r0, r3
   14cfc:	strhcc	r3, [r5, #128]	; 0x80
   14d00:	sub	r3, r3, #1
   14d04:	cmp	r2, #0
   14d08:	ldr	r0, [r5, #136]	; 0x88
   14d0c:	str	r4, [sp, #12]
   14d10:	str	r4, [sp, #8]
   14d14:	movne	r4, #1
   14d18:	strne	r2, [sp, #20]
   14d1c:	strne	r1, [sp, #16]
   14d20:	strne	r2, [sp, #8]
   14d24:	strne	r4, [sp, #12]
   14d28:	sub	r6, r0, r2
   14d2c:	and	r3, r6, r3
   14d30:	cmp	r3, #0
   14d34:	beq	14d60 <flatcc_builder_create_struct@@Base+0x88>
   14d38:	add	r2, r3, r2
   14d3c:	add	r1, sp, #8
   14d40:	str	r2, [sp, #8]
   14d44:	add	r1, r1, r4, lsl #3
   14d48:	add	r4, r4, #1
   14d4c:	ldr	r6, [pc, #172]	; 14e00 <flatcc_builder_create_struct@@Base+0x128>
   14d50:	ldr	r6, [pc, r6]
   14d54:	str	r6, [r1, #8]
   14d58:	str	r3, [r1, #12]
   14d5c:	str	r4, [sp, #12]
   14d60:	cmp	r2, #0
   14d64:	ble	14de0 <flatcc_builder_create_struct@@Base+0x108>
   14d68:	sub	r6, r0, r2
   14d6c:	ldr	r0, [r5, #36]	; 0x24
   14d70:	ldr	ip, [r5, #44]	; 0x2c
   14d74:	add	r1, sp, #8
   14d78:	str	r2, [sp]
   14d7c:	mov	r2, r4
   14d80:	add	r1, r1, #8
   14d84:	mov	r3, r6
   14d88:	blx	ip
   14d8c:	cmp	r0, #0
   14d90:	streq	r6, [r5, #136]	; 0x88
   14d94:	moveq	r0, r6
   14d98:	subeq	sp, fp, #16
   14d9c:	popeq	{r4, r5, r6, sl, fp, pc}
   14da0:	ldr	r0, [pc, #116]	; 14e1c <flatcc_builder_create_struct@@Base+0x144>
   14da4:	ldr	r1, [pc, #116]	; 14e20 <flatcc_builder_create_struct@@Base+0x148>
   14da8:	ldr	r3, [pc, #116]	; 14e24 <flatcc_builder_create_struct@@Base+0x14c>
   14dac:	movw	r2, #651	; 0x28b
   14db0:	add	r0, pc, r0
   14db4:	add	r1, pc, r1
   14db8:	add	r3, pc, r3
   14dbc:	bl	129bc <__assert_fail@plt>
   14dc0:	ldr	r0, [pc, #60]	; 14e04 <flatcc_builder_create_struct@@Base+0x12c>
   14dc4:	ldr	r1, [pc, #60]	; 14e08 <flatcc_builder_create_struct@@Base+0x130>
   14dc8:	ldr	r3, [pc, #60]	; 14e0c <flatcc_builder_create_struct@@Base+0x134>
   14dcc:	movw	r2, #783	; 0x30f
   14dd0:	add	r0, pc, r0
   14dd4:	add	r1, pc, r1
   14dd8:	add	r3, pc, r3
   14ddc:	bl	129bc <__assert_fail@plt>
   14de0:	ldr	r0, [pc, #40]	; 14e10 <flatcc_builder_create_struct@@Base+0x138>
   14de4:	ldr	r1, [pc, #40]	; 14e14 <flatcc_builder_create_struct@@Base+0x13c>
   14de8:	ldr	r3, [pc, #40]	; 14e18 <flatcc_builder_create_struct@@Base+0x140>
   14dec:	movw	r2, #647	; 0x287
   14df0:	add	r0, pc, r0
   14df4:	add	r1, pc, r1
   14df8:	add	r3, pc, r3
   14dfc:	bl	129bc <__assert_fail@plt>
   14e00:	andeq	ip, r1, r0, lsl #6
   14e04:			; <UNDEFINED> instruction: 0x000096b8
   14e08:	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>
   14e0c:			; <UNDEFINED> instruction: 0x000096bb
   14e10:	andeq	sl, r0, r0, lsl #13
   14e14:			; <UNDEFINED> instruction: 0x000094bf
   14e18:	andeq	sl, r0, r7, lsr r5
   14e1c:	andeq	sl, r0, r0, asr #13
   14e20:	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
   14e24:	andeq	sl, r0, r7, ror r5

00014e28 <flatcc_builder_start_buffer@@Base>:
   14e28:	push	{r4, r5, r6, r7, fp, lr}
   14e2c:	add	fp, sp, #16
   14e30:	mov	r5, r1
   14e34:	ldrh	r1, [r0, #128]	; 0x80
   14e38:	mov	r6, r3
   14e3c:	mov	r7, r2
   14e40:	mov	r4, r0
   14e44:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   14e48:	mov	r1, r0
   14e4c:	mvn	r0, #0
   14e50:	cmp	r1, #0
   14e54:	popne	{r4, r5, r6, r7, fp, pc}
   14e58:	mov	r0, #1
   14e5c:	cmp	r5, #0
   14e60:	strh	r0, [r4, #128]	; 0x80
   14e64:	ldrh	r1, [r4, #132]	; 0x84
   14e68:	ldr	r2, [r4, #32]
   14e6c:	strh	r1, [r2, #34]	; 0x22
   14e70:	strh	r7, [r4, #132]	; 0x84
   14e74:	ldrh	r1, [r4, #164]	; 0xa4
   14e78:	ldr	r2, [r4, #32]
   14e7c:	strh	r1, [r2, #32]
   14e80:	strh	r6, [r4, #164]	; 0xa4
   14e84:	ldr	r1, [r4, #32]
   14e88:	ldr	r2, [r4, #144]	; 0x90
   14e8c:	str	r2, [r1, #20]
   14e90:	ldr	r1, [r4, #32]
   14e94:	ldr	r2, [r4, #152]	; 0x98
   14e98:	str	r2, [r1, #28]
   14e9c:	ldr	r3, [r4, #148]	; 0x94
   14ea0:	ldr	r1, [r4, #32]
   14ea4:	ldr	r2, [r4, #136]	; 0x88
   14ea8:	ldr	r7, [r4, #168]	; 0xa8
   14eac:	add	r6, r3, #1
   14eb0:	str	r2, [r4, #144]	; 0x90
   14eb4:	str	r6, [r4, #148]	; 0x94
   14eb8:	str	r3, [r4, #152]	; 0x98
   14ebc:	str	r7, [r1, #16]
   14ec0:	ldr	r1, [pc, #28]	; 14ee4 <flatcc_builder_start_buffer@@Base+0xbc>
   14ec4:	ldr	r1, [pc, r1]
   14ec8:	movne	r1, r5
   14ecc:	ldr	r1, [r1]
   14ed0:	str	r1, [r4, #168]	; 0xa8
   14ed4:	ldr	r1, [r4, #32]
   14ed8:	strh	r0, [r1, #14]
   14edc:	mov	r0, #0
   14ee0:	pop	{r4, r5, r6, r7, fp, pc}
   14ee4:	andeq	ip, r1, ip, lsl #3
   14ee8:	push	{r4, r5, r6, r7, fp, lr}
   14eec:	add	fp, sp, #16
   14ef0:	sub	sp, sp, #8
   14ef4:	mov	r5, r1
   14ef8:	ldr	r1, [r0, #156]	; 0x9c
   14efc:	ldr	r2, [r0, #160]	; 0xa0
   14f00:	mov	r4, r0
   14f04:	add	r0, r1, #1
   14f08:	cmp	r1, r2
   14f0c:	str	r0, [r4, #156]	; 0x9c
   14f10:	bge	14f24 <flatcc_builder_start_buffer@@Base+0xfc>
   14f14:	ldr	r0, [r4, #32]
   14f18:	add	r0, r0, #36	; 0x24
   14f1c:	str	r0, [r4, #32]
   14f20:	b	14fb8 <flatcc_builder_start_buffer@@Base+0x190>
   14f24:	ldr	r2, [r4, #176]	; 0xb0
   14f28:	mvn	r6, #0
   14f2c:	cmp	r2, #1
   14f30:	cmpge	r1, r2
   14f34:	bge	14ff0 <flatcc_builder_start_buffer@@Base+0x1c8>
   14f38:	add	r7, r0, r0, lsl #3
   14f3c:	ldr	r0, [r4, #88]	; 0x58
   14f40:	lsl	r2, r7, #2
   14f44:	cmp	r2, r0
   14f48:	bls	14f70 <flatcc_builder_start_buffer@@Base+0x148>
   14f4c:	ldr	r0, [r4, #40]	; 0x28
   14f50:	ldr	ip, [r4, #48]	; 0x30
   14f54:	mov	r3, #4
   14f58:	add	r1, r4, #84	; 0x54
   14f5c:	str	r3, [sp]
   14f60:	mov	r3, #0
   14f64:	blx	ip
   14f68:	cmp	r0, #0
   14f6c:	bne	14ffc <flatcc_builder_start_buffer@@Base+0x1d4>
   14f70:	ldr	r1, [r4, #84]	; 0x54
   14f74:	mvn	r0, #35	; 0x23
   14f78:	add	r0, r0, r7, lsl #2
   14f7c:	adds	r0, r0, r1
   14f80:	str	r0, [r4, #32]
   14f84:	beq	14ff0 <flatcc_builder_start_buffer@@Base+0x1c8>
   14f88:	ldr	r1, [r4, #88]	; 0x58
   14f8c:	movw	r3, #36409	; 0x8e39
   14f90:	ldr	r2, [r4, #176]	; 0xb0
   14f94:	movt	r3, #14563	; 0x38e3
   14f98:	umull	r1, r3, r1, r3
   14f9c:	cmp	r2, r3, lsr #3
   14fa0:	lsr	r1, r3, #3
   14fa4:	mov	r3, r1
   14fa8:	movlt	r3, r2
   14fac:	cmp	r2, #0
   14fb0:	movle	r3, r1
   14fb4:	str	r3, [r4, #160]	; 0xa0
   14fb8:	ldr	r1, [r4, #20]
   14fbc:	mvn	r3, #3
   14fc0:	mov	r6, #0
   14fc4:	str	r1, [r0, #8]
   14fc8:	ldrh	r2, [r4, #130]	; 0x82
   14fcc:	strh	r2, [r0, #12]
   14fd0:	strh	r5, [r4, #130]	; 0x82
   14fd4:	ldr	r2, [r4, #28]
   14fd8:	stm	r0, {r2, r3}
   14fdc:	add	r0, r1, r2
   14fe0:	str	r6, [r4, #20]
   14fe4:	add	r0, r0, #7
   14fe8:	bic	r0, r0, #7
   14fec:	str	r0, [r4, #28]
   14ff0:	mov	r0, r6
   14ff4:	sub	sp, fp, #16
   14ff8:	pop	{r4, r5, r6, r7, fp, pc}
   14ffc:	ldr	r0, [pc, #24]	; 1501c <flatcc_builder_start_buffer@@Base+0x1f4>
   15000:	ldr	r1, [pc, #24]	; 15020 <flatcc_builder_start_buffer@@Base+0x1f8>
   15004:	ldr	r3, [pc, #24]	; 15024 <flatcc_builder_start_buffer@@Base+0x1fc>
   15008:	mov	r2, #308	; 0x134
   1500c:	add	r0, pc, r0
   15010:	add	r1, pc, r1
   15014:	add	r3, pc, r3
   15018:	bl	129bc <__assert_fail@plt>
   1501c:	andeq	sl, r0, r4, ror #8
   15020:	andeq	r9, r0, r3, lsr #5
   15024:	muleq	r0, r6, r2

00015028 <flatcc_builder_end_buffer@@Base>:
   15028:	push	{r4, r5, r6, sl, fp, lr}
   1502c:	add	fp, sp, #16
   15030:	sub	sp, sp, #8
   15034:	mov	r4, r0
   15038:	ldr	r0, [r0, #32]
   1503c:	ldrh	r0, [r0, #14]
   15040:	cmp	r0, #1
   15044:	bne	15138 <flatcc_builder_end_buffer@@Base+0x110>
   15048:	mov	r3, r1
   1504c:	ldr	r1, [r4, #152]	; 0x98
   15050:	ldrh	r0, [r4, #164]	; 0xa4
   15054:	ldrh	r2, [r4, #132]	; 0x84
   15058:	cmp	r1, #0
   1505c:	ldrh	r1, [r4, #128]	; 0x80
   15060:	and	r0, r0, #2
   15064:	orrne	r0, r0, #1
   15068:	cmp	r1, r2
   1506c:	movcc	r1, r2
   15070:	strhcc	r2, [r4, #128]	; 0x80
   15074:	str	r0, [sp, #4]
   15078:	mov	r0, r4
   1507c:	str	r1, [sp]
   15080:	add	r1, r4, #168	; 0xa8
   15084:	bl	14a9c <flatcc_builder_create_buffer@@Base>
   15088:	mov	r6, r0
   1508c:	cmp	r0, #0
   15090:	beq	1512c <flatcc_builder_end_buffer@@Base+0x104>
   15094:	ldr	r1, [r4, #32]
   15098:	ldr	r0, [r4, #16]
   1509c:	ldr	r2, [r4, #20]
   150a0:	ldr	r3, [r1, #20]
   150a4:	str	r3, [r4, #144]	; 0x90
   150a8:	ldr	r3, [r1, #28]
   150ac:	str	r3, [r4, #152]	; 0x98
   150b0:	ldr	r3, [r1, #16]
   150b4:	str	r3, [r4, #168]	; 0xa8
   150b8:	ldrh	r1, [r1, #32]
   150bc:	strh	r1, [r4, #164]	; 0xa4
   150c0:	mov	r1, #0
   150c4:	bl	1298c <memset@plt>
   150c8:	ldr	r0, [r4, #32]
   150cc:	ldr	r1, [r4, #60]	; 0x3c
   150d0:	ldr	r2, [r4, #64]	; 0x40
   150d4:	ldr	r3, [r0, #8]
   150d8:	str	r3, [r4, #20]
   150dc:	ldr	r3, [r0]
   150e0:	str	r3, [r4, #28]
   150e4:	add	r1, r1, r3
   150e8:	ldr	r5, [r0, #4]
   150ec:	str	r1, [r4, #16]
   150f0:	sub	r1, r2, r3
   150f4:	cmp	r1, r5
   150f8:	movhi	r1, r5
   150fc:	str	r1, [r4, #24]
   15100:	ldrh	r1, [r4, #130]	; 0x82
   15104:	ldrh	r2, [r4, #128]	; 0x80
   15108:	cmp	r2, r1
   1510c:	strhcc	r1, [r4, #128]	; 0x80
   15110:	ldrh	r1, [r0, #12]
   15114:	sub	r0, r0, #36	; 0x24
   15118:	str	r0, [r4, #32]
   1511c:	strh	r1, [r4, #130]	; 0x82
   15120:	ldr	r0, [r4, #156]	; 0x9c
   15124:	sub	r0, r0, #1
   15128:	str	r0, [r4, #156]	; 0x9c
   1512c:	mov	r0, r6
   15130:	sub	sp, fp, #16
   15134:	pop	{r4, r5, r6, sl, fp, pc}
   15138:	ldr	r0, [pc, #24]	; 15158 <flatcc_builder_end_buffer@@Base+0x130>
   1513c:	ldr	r1, [pc, #24]	; 1515c <flatcc_builder_end_buffer@@Base+0x134>
   15140:	ldr	r3, [pc, #24]	; 15160 <flatcc_builder_end_buffer@@Base+0x138>
   15144:	movw	r2, #838	; 0x346
   15148:	add	r0, pc, r0
   1514c:	add	r1, pc, r1
   15150:	add	r3, pc, r3
   15154:	bl	129bc <__assert_fail@plt>
   15158:			; <UNDEFINED> instruction: 0x000093b1
   1515c:	andeq	r9, r0, r7, ror #2
   15160:	ldrdeq	r9, [r0], -r5

00015164 <flatcc_builder_start_struct@@Base>:
   15164:	push	{r4, r5, r6, r7, fp, lr}
   15168:	add	fp, sp, #16
   1516c:	sub	sp, sp, #8
   15170:	mov	r6, r1
   15174:	mov	r1, r2
   15178:	mov	r4, r0
   1517c:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   15180:	mov	r5, #0
   15184:	cmp	r0, #0
   15188:	bne	15238 <flatcc_builder_start_struct@@Base+0xd4>
   1518c:	ldr	r2, [r4, #32]
   15190:	mov	r0, #2
   15194:	mvn	r7, #3
   15198:	strh	r0, [r2, #14]
   1519c:	ldr	r1, [r4, #28]
   151a0:	ldr	r3, [r4, #64]	; 0x40
   151a4:	ldr	r0, [r4, #60]	; 0x3c
   151a8:	sub	r3, r3, r1
   151ac:	add	r0, r0, r1
   151b0:	cmn	r3, #4
   151b4:	str	r0, [r4, #16]
   151b8:	movcs	r3, r7
   151bc:	str	r3, [r4, #24]
   151c0:	str	r7, [r2, #4]
   151c4:	ldr	r7, [r4, #20]
   151c8:	add	r2, r7, r6
   151cc:	cmp	r2, r3
   151d0:	str	r2, [r4, #20]
   151d4:	bcc	15234 <flatcc_builder_start_struct@@Base+0xd0>
   151d8:	ldr	r0, [r4, #40]	; 0x28
   151dc:	ldr	r6, [r4, #48]	; 0x30
   151e0:	add	r1, r1, r2
   151e4:	mov	r3, #1
   151e8:	str	r3, [sp]
   151ec:	add	r2, r1, #1
   151f0:	add	r1, r4, #60	; 0x3c
   151f4:	mov	r3, #1
   151f8:	blx	r6
   151fc:	cmp	r0, #0
   15200:	bne	15238 <flatcc_builder_start_struct@@Base+0xd4>
   15204:	ldr	r1, [r4, #28]
   15208:	ldr	r0, [r4, #60]	; 0x3c
   1520c:	ldr	r3, [r4, #64]	; 0x40
   15210:	ldr	r2, [r4, #32]
   15214:	add	r0, r0, r1
   15218:	sub	r1, r3, r1
   1521c:	mvn	r3, #3
   15220:	cmn	r1, #4
   15224:	str	r0, [r4, #16]
   15228:	movcs	r1, r3
   1522c:	str	r1, [r4, #24]
   15230:	str	r3, [r2, #4]
   15234:	add	r5, r0, r7
   15238:	mov	r0, r5
   1523c:	sub	sp, fp, #16
   15240:	pop	{r4, r5, r6, r7, fp, pc}

00015244 <flatcc_builder_struct_edit@@Base>:
   15244:	ldr	r0, [r0, #16]
   15248:	bx	lr

0001524c <flatcc_builder_end_struct@@Base>:
   1524c:	push	{r4, r5, fp, lr}
   15250:	add	fp, sp, #8
   15254:	mov	r4, r0
   15258:	ldr	r0, [r0, #32]
   1525c:	ldrh	r0, [r0, #14]
   15260:	cmp	r0, #2
   15264:	bne	15304 <flatcc_builder_end_struct@@Base+0xb8>
   15268:	ldrh	r3, [r4, #130]	; 0x82
   1526c:	ldr	r1, [r4, #16]
   15270:	ldr	r2, [r4, #20]
   15274:	mov	r0, r4
   15278:	bl	14cd8 <flatcc_builder_create_struct@@Base>
   1527c:	mov	r5, r0
   15280:	cmp	r0, #0
   15284:	beq	152fc <flatcc_builder_end_struct@@Base+0xb0>
   15288:	ldr	r0, [r4, #16]
   1528c:	ldr	r2, [r4, #20]
   15290:	mov	r1, #0
   15294:	bl	1298c <memset@plt>
   15298:	ldr	r0, [r4, #32]
   1529c:	ldr	r1, [r4, #60]	; 0x3c
   152a0:	ldr	ip, [r4, #64]	; 0x40
   152a4:	ldr	r3, [r0, #8]
   152a8:	str	r3, [r4, #20]
   152ac:	ldr	r3, [r0]
   152b0:	str	r3, [r4, #28]
   152b4:	add	r1, r1, r3
   152b8:	ldr	r2, [r0, #4]
   152bc:	str	r1, [r4, #16]
   152c0:	sub	r1, ip, r3
   152c4:	cmp	r1, r2
   152c8:	movhi	r1, r2
   152cc:	str	r1, [r4, #24]
   152d0:	ldrh	r1, [r4, #130]	; 0x82
   152d4:	ldrh	r2, [r4, #128]	; 0x80
   152d8:	cmp	r2, r1
   152dc:	strhcc	r1, [r4, #128]	; 0x80
   152e0:	ldrh	r1, [r0, #12]
   152e4:	sub	r0, r0, #36	; 0x24
   152e8:	str	r0, [r4, #32]
   152ec:	strh	r1, [r4, #130]	; 0x82
   152f0:	ldr	r0, [r4, #156]	; 0x9c
   152f4:	sub	r0, r0, #1
   152f8:	str	r0, [r4, #156]	; 0x9c
   152fc:	mov	r0, r5
   15300:	pop	{r4, r5, fp, pc}
   15304:	ldr	r0, [pc, #24]	; 15324 <flatcc_builder_end_struct@@Base+0xd8>
   15308:	ldr	r1, [pc, #24]	; 15328 <flatcc_builder_end_struct@@Base+0xdc>
   1530c:	ldr	r3, [pc, #24]	; 1532c <flatcc_builder_end_struct@@Base+0xe0>
   15310:	mov	r2, #872	; 0x368
   15314:	add	r0, pc, r0
   15318:	add	r1, pc, r1
   1531c:	add	r3, pc, r3
   15320:	bl	129bc <__assert_fail@plt>
   15324:	andeq	r9, r0, sl, ror #4
   15328:	muleq	r0, fp, pc	; <UNPREDICTABLE>
   1532c:	andeq	r9, r0, lr, lsl #5

00015330 <flatcc_builder_extend_vector@@Base>:
   15330:	push	{r4, r5, fp, lr}
   15334:	add	fp, sp, #8
   15338:	sub	sp, sp, #8
   1533c:	mov	r4, r0
   15340:	ldr	r0, [r0, #32]
   15344:	ldr	r2, [r0, #20]
   15348:	adds	r2, r2, r1
   1534c:	bcs	15404 <flatcc_builder_extend_vector@@Base+0xd4>
   15350:	ldr	r3, [r0, #24]
   15354:	cmp	r2, r3
   15358:	bhi	15404 <flatcc_builder_extend_vector@@Base+0xd4>
   1535c:	str	r2, [r0, #20]
   15360:	ldr	r2, [r4, #32]
   15364:	ldr	r5, [r4, #20]
   15368:	ldr	r0, [r4, #24]
   1536c:	ldr	r2, [r2, #16]
   15370:	mla	r1, r2, r1, r5
   15374:	cmp	r1, r0
   15378:	str	r1, [r4, #20]
   1537c:	bcs	15388 <flatcc_builder_extend_vector@@Base+0x58>
   15380:	ldr	r0, [r4, #16]
   15384:	b	153f8 <flatcc_builder_extend_vector@@Base+0xc8>
   15388:	ldr	r2, [r4, #28]
   1538c:	ldr	r0, [r4, #40]	; 0x28
   15390:	ldr	ip, [r4, #48]	; 0x30
   15394:	mov	r3, #1
   15398:	str	r3, [sp]
   1539c:	mov	r3, #1
   153a0:	add	r1, r1, r2
   153a4:	add	r2, r1, #1
   153a8:	add	r1, r4, #60	; 0x3c
   153ac:	blx	ip
   153b0:	mov	r1, r0
   153b4:	mov	r0, #0
   153b8:	cmp	r1, #0
   153bc:	beq	153c8 <flatcc_builder_extend_vector@@Base+0x98>
   153c0:	sub	sp, fp, #8
   153c4:	pop	{r4, r5, fp, pc}
   153c8:	ldr	r1, [r4, #28]
   153cc:	ldr	r0, [r4, #60]	; 0x3c
   153d0:	ldr	r3, [r4, #64]	; 0x40
   153d4:	ldr	r2, [r4, #32]
   153d8:	add	r0, r0, r1
   153dc:	sub	r1, r3, r1
   153e0:	mvn	r3, #3
   153e4:	cmn	r1, #4
   153e8:	str	r0, [r4, #16]
   153ec:	movcs	r1, r3
   153f0:	str	r1, [r4, #24]
   153f4:	str	r3, [r2, #4]
   153f8:	add	r0, r0, r5
   153fc:	sub	sp, fp, #8
   15400:	pop	{r4, r5, fp, pc}
   15404:	ldr	r0, [pc, #24]	; 15424 <flatcc_builder_extend_vector@@Base+0xf4>
   15408:	ldr	r1, [pc, #24]	; 15428 <flatcc_builder_extend_vector@@Base+0xf8>
   1540c:	ldr	r3, [pc, #24]	; 1542c <flatcc_builder_extend_vector@@Base+0xfc>
   15410:	mov	r2, #892	; 0x37c
   15414:	add	r0, pc, r0
   15418:	add	r1, pc, r1
   1541c:	add	r3, pc, r3
   15420:	bl	129bc <__assert_fail@plt>
   15424:	andeq	r9, r0, r5, ror #30
   15428:	muleq	r0, fp, lr
   1542c:	andeq	r9, r0, r8, ror pc

00015430 <flatcc_builder_vector_push@@Base>:
   15430:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15434:	add	fp, sp, #24
   15438:	sub	sp, sp, #8
   1543c:	mov	r5, r0
   15440:	ldr	r0, [r0, #32]
   15444:	mov	r8, r1
   15448:	ldrh	r1, [r0, #14]
   1544c:	cmp	r1, #4
   15450:	bne	15528 <flatcc_builder_vector_push@@Base+0xf8>
   15454:	ldr	r1, [r0, #20]
   15458:	ldr	r2, [r0, #24]
   1545c:	cmp	r1, r2
   15460:	bhi	15548 <flatcc_builder_vector_push@@Base+0x118>
   15464:	add	r1, r1, #1
   15468:	str	r1, [r0, #20]
   1546c:	ldr	r1, [r5, #32]
   15470:	ldr	r4, [r5, #20]
   15474:	ldr	r0, [r5, #24]
   15478:	ldr	r6, [r1, #16]
   1547c:	add	r1, r4, r6
   15480:	cmp	r1, r0
   15484:	str	r1, [r5, #20]
   15488:	bcs	154ac <flatcc_builder_vector_push@@Base+0x7c>
   1548c:	ldr	r0, [r5, #16]
   15490:	adds	r7, r0, r4
   15494:	beq	15518 <flatcc_builder_vector_push@@Base+0xe8>
   15498:	mov	r0, r7
   1549c:	mov	r1, r8
   154a0:	mov	r2, r6
   154a4:	bl	128fc <memcpy@plt>
   154a8:	b	1551c <flatcc_builder_vector_push@@Base+0xec>
   154ac:	ldr	r2, [r5, #28]
   154b0:	ldr	r0, [r5, #40]	; 0x28
   154b4:	ldr	r7, [r5, #48]	; 0x30
   154b8:	mov	r3, #1
   154bc:	str	r3, [sp]
   154c0:	mov	r3, #1
   154c4:	add	r1, r1, r2
   154c8:	add	r2, r1, #1
   154cc:	add	r1, r5, #60	; 0x3c
   154d0:	blx	r7
   154d4:	mov	r7, #0
   154d8:	cmp	r0, #0
   154dc:	bne	1551c <flatcc_builder_vector_push@@Base+0xec>
   154e0:	ldr	r1, [r5, #28]
   154e4:	ldr	r0, [r5, #60]	; 0x3c
   154e8:	ldr	r3, [r5, #64]	; 0x40
   154ec:	ldr	r2, [r5, #32]
   154f0:	add	r0, r0, r1
   154f4:	sub	r1, r3, r1
   154f8:	mvn	r3, #3
   154fc:	cmn	r1, #4
   15500:	str	r0, [r5, #16]
   15504:	movcs	r1, r3
   15508:	str	r1, [r5, #24]
   1550c:	str	r3, [r2, #4]
   15510:	adds	r7, r0, r4
   15514:	bne	15498 <flatcc_builder_vector_push@@Base+0x68>
   15518:	mov	r7, #0
   1551c:	mov	r0, r7
   15520:	sub	sp, fp, #24
   15524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15528:	ldr	r0, [pc, #56]	; 15568 <flatcc_builder_vector_push@@Base+0x138>
   1552c:	ldr	r1, [pc, #56]	; 1556c <flatcc_builder_vector_push@@Base+0x13c>
   15530:	ldr	r3, [pc, #56]	; 15570 <flatcc_builder_vector_push@@Base+0x140>
   15534:	movw	r2, #907	; 0x38b
   15538:	add	r0, pc, r0
   1553c:	add	r1, pc, r1
   15540:	add	r3, pc, r3
   15544:	bl	129bc <__assert_fail@plt>
   15548:	ldr	r0, [pc, #36]	; 15574 <flatcc_builder_vector_push@@Base+0x144>
   1554c:	ldr	r1, [pc, #36]	; 15578 <flatcc_builder_vector_push@@Base+0x148>
   15550:	ldr	r3, [pc, #36]	; 1557c <flatcc_builder_vector_push@@Base+0x14c>
   15554:	mov	r2, #908	; 0x38c
   15558:	add	r0, pc, r0
   1555c:	add	r1, pc, r1
   15560:	add	r3, pc, r3
   15564:	bl	129bc <__assert_fail@plt>
   15568:	strheq	r9, [r0], -r5
   1556c:	andeq	r8, r0, r7, ror sp
   15570:	ldrdeq	r9, [r0], -r9	; <UNPREDICTABLE>
   15574:	andeq	r9, r0, r4, lsl #2
   15578:	andeq	r8, r0, r7, asr sp
   1557c:	strheq	r9, [r0], -r9	; <UNPREDICTABLE>

00015580 <flatcc_builder_append_vector@@Base>:
   15580:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15584:	add	fp, sp, #24
   15588:	sub	sp, sp, #8
   1558c:	mov	r6, r0
   15590:	ldr	r0, [r0, #32]
   15594:	mov	r8, r1
   15598:	ldrh	r1, [r0, #14]
   1559c:	cmp	r1, #4
   155a0:	bne	156a0 <flatcc_builder_append_vector@@Base+0x120>
   155a4:	ldr	r1, [r0, #20]
   155a8:	mov	r5, r2
   155ac:	adds	r1, r1, r2
   155b0:	bcs	15680 <flatcc_builder_append_vector@@Base+0x100>
   155b4:	ldr	r2, [r0, #24]
   155b8:	cmp	r1, r2
   155bc:	bhi	15680 <flatcc_builder_append_vector@@Base+0x100>
   155c0:	str	r1, [r0, #20]
   155c4:	ldr	r1, [r6, #32]
   155c8:	ldr	r4, [r6, #20]
   155cc:	ldr	r0, [r6, #24]
   155d0:	ldr	r9, [r1, #16]
   155d4:	mla	r1, r9, r5, r4
   155d8:	cmp	r1, r0
   155dc:	str	r1, [r6, #20]
   155e0:	bcs	15604 <flatcc_builder_append_vector@@Base+0x84>
   155e4:	ldr	r0, [r6, #16]
   155e8:	adds	r7, r0, r4
   155ec:	beq	15670 <flatcc_builder_append_vector@@Base+0xf0>
   155f0:	mul	r2, r9, r5
   155f4:	mov	r0, r7
   155f8:	mov	r1, r8
   155fc:	bl	128fc <memcpy@plt>
   15600:	b	15674 <flatcc_builder_append_vector@@Base+0xf4>
   15604:	ldr	r2, [r6, #28]
   15608:	ldr	r0, [r6, #40]	; 0x28
   1560c:	ldr	r7, [r6, #48]	; 0x30
   15610:	mov	r3, #1
   15614:	str	r3, [sp]
   15618:	mov	r3, #1
   1561c:	add	r1, r1, r2
   15620:	add	r2, r1, #1
   15624:	add	r1, r6, #60	; 0x3c
   15628:	blx	r7
   1562c:	mov	r7, #0
   15630:	cmp	r0, #0
   15634:	bne	15674 <flatcc_builder_append_vector@@Base+0xf4>
   15638:	ldr	r1, [r6, #28]
   1563c:	ldr	r0, [r6, #60]	; 0x3c
   15640:	ldr	r3, [r6, #64]	; 0x40
   15644:	ldr	r2, [r6, #32]
   15648:	add	r0, r0, r1
   1564c:	sub	r1, r3, r1
   15650:	mvn	r3, #3
   15654:	cmn	r1, #4
   15658:	str	r0, [r6, #16]
   1565c:	movcs	r1, r3
   15660:	str	r1, [r6, #24]
   15664:	str	r3, [r2, #4]
   15668:	adds	r7, r0, r4
   1566c:	bne	155f0 <flatcc_builder_append_vector@@Base+0x70>
   15670:	mov	r7, #0
   15674:	mov	r0, r7
   15678:	sub	sp, fp, #24
   1567c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15680:	ldr	r0, [pc, #68]	; 156cc <flatcc_builder_append_vector@@Base+0x14c>
   15684:	ldr	r1, [pc, #68]	; 156d0 <flatcc_builder_append_vector@@Base+0x150>
   15688:	ldr	r3, [pc, #68]	; 156d4 <flatcc_builder_append_vector@@Base+0x154>
   1568c:	mov	r2, #892	; 0x37c
   15690:	add	r0, pc, r0
   15694:	add	r1, pc, r1
   15698:	add	r3, pc, r3
   1569c:	bl	129bc <__assert_fail@plt>
   156a0:	ldr	r0, [pc, #24]	; 156c0 <flatcc_builder_append_vector@@Base+0x140>
   156a4:	ldr	r1, [pc, #24]	; 156c4 <flatcc_builder_append_vector@@Base+0x144>
   156a8:	ldr	r3, [pc, #24]	; 156c8 <flatcc_builder_append_vector@@Base+0x148>
   156ac:	movw	r2, #915	; 0x393
   156b0:	add	r0, pc, r0
   156b4:	add	r1, pc, r1
   156b8:	add	r3, pc, r3
   156bc:	bl	129bc <__assert_fail@plt>
   156c0:	andeq	r8, r0, sp, lsr pc
   156c4:	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   156c8:	andeq	r8, r0, r1, ror #31
   156cc:	andeq	r9, r0, r9, ror #25
   156d0:	andeq	r8, r0, pc, lsl ip
   156d4:	strdeq	r9, [r0], -ip

000156d8 <flatcc_builder_extend_offset_vector@@Base>:
   156d8:	push	{r4, r5, fp, lr}
   156dc:	add	fp, sp, #8
   156e0:	sub	sp, sp, #8
   156e4:	mov	r4, r0
   156e8:	ldr	r0, [r0, #32]
   156ec:	ldr	r2, [r0, #20]
   156f0:	adds	r2, r2, r1
   156f4:	cmpcc	r2, #1073741824	; 0x40000000
   156f8:	bcc	1571c <flatcc_builder_extend_offset_vector@@Base+0x44>
   156fc:	ldr	r0, [pc, #184]	; 157bc <flatcc_builder_extend_offset_vector@@Base+0xe4>
   15700:	ldr	r1, [pc, #184]	; 157c0 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   15704:	ldr	r3, [pc, #184]	; 157c4 <flatcc_builder_extend_offset_vector@@Base+0xec>
   15708:	mov	r2, #892	; 0x37c
   1570c:	add	r0, pc, r0
   15710:	add	r1, pc, r1
   15714:	add	r3, pc, r3
   15718:	bl	129bc <__assert_fail@plt>
   1571c:	str	r2, [r0, #20]
   15720:	ldr	r5, [r4, #20]
   15724:	ldr	r0, [r4, #24]
   15728:	add	r1, r5, r1, lsl #2
   1572c:	cmp	r1, r0
   15730:	str	r1, [r4, #20]
   15734:	bcs	15740 <flatcc_builder_extend_offset_vector@@Base+0x68>
   15738:	ldr	r0, [r4, #16]
   1573c:	b	157b0 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   15740:	ldr	r2, [r4, #28]
   15744:	ldr	r0, [r4, #40]	; 0x28
   15748:	ldr	ip, [r4, #48]	; 0x30
   1574c:	mov	r3, #1
   15750:	str	r3, [sp]
   15754:	mov	r3, #1
   15758:	add	r1, r1, r2
   1575c:	add	r2, r1, #1
   15760:	add	r1, r4, #60	; 0x3c
   15764:	blx	ip
   15768:	mov	r1, r0
   1576c:	mov	r0, #0
   15770:	cmp	r1, #0
   15774:	beq	15780 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   15778:	sub	sp, fp, #8
   1577c:	pop	{r4, r5, fp, pc}
   15780:	ldr	r1, [r4, #28]
   15784:	ldr	r0, [r4, #60]	; 0x3c
   15788:	ldr	r3, [r4, #64]	; 0x40
   1578c:	ldr	r2, [r4, #32]
   15790:	add	r0, r0, r1
   15794:	sub	r1, r3, r1
   15798:	mvn	r3, #3
   1579c:	cmn	r1, #4
   157a0:	str	r0, [r4, #16]
   157a4:	movcs	r1, r3
   157a8:	str	r1, [r4, #24]
   157ac:	str	r3, [r2, #4]
   157b0:	add	r0, r0, r5
   157b4:	sub	sp, fp, #8
   157b8:	pop	{r4, r5, fp, pc}
   157bc:	andeq	r9, r0, sp, ror #24
   157c0:	andeq	r8, r0, r3, lsr #23
   157c4:	andeq	r9, r0, r0, lsl #25

000157c8 <flatcc_builder_offset_vector_push@@Base>:
   157c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157cc:	add	fp, sp, #24
   157d0:	sub	sp, sp, #8
   157d4:	mov	r6, r0
   157d8:	ldr	r0, [r0, #32]
   157dc:	mov	r8, r1
   157e0:	ldrh	r1, [r0, #14]
   157e4:	cmp	r1, #5
   157e8:	bne	1589c <flatcc_builder_offset_vector_push@@Base+0xd4>
   157ec:	ldr	r1, [r0, #20]
   157f0:	mov	r5, #0
   157f4:	cmn	r1, #-1073741823	; 0xc0000001
   157f8:	beq	15890 <flatcc_builder_offset_vector_push@@Base+0xc8>
   157fc:	add	r1, r1, #1
   15800:	str	r1, [r0, #20]
   15804:	ldr	r7, [r6, #20]
   15808:	ldr	r0, [r6, #24]
   1580c:	add	r1, r7, #4
   15810:	cmp	r1, r0
   15814:	str	r1, [r6, #20]
   15818:	bcs	15824 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1581c:	ldr	r0, [r6, #16]
   15820:	b	15884 <flatcc_builder_offset_vector_push@@Base+0xbc>
   15824:	ldr	r1, [r6, #28]
   15828:	ldr	r0, [r6, #40]	; 0x28
   1582c:	ldr	r4, [r6, #48]	; 0x30
   15830:	mov	r2, #1
   15834:	mov	r3, #1
   15838:	str	r2, [sp]
   1583c:	add	r1, r7, r1
   15840:	add	r2, r1, #5
   15844:	add	r1, r6, #60	; 0x3c
   15848:	blx	r4
   1584c:	cmp	r0, #0
   15850:	bne	15890 <flatcc_builder_offset_vector_push@@Base+0xc8>
   15854:	ldr	r1, [r6, #28]
   15858:	ldr	r0, [r6, #60]	; 0x3c
   1585c:	ldr	r3, [r6, #64]	; 0x40
   15860:	ldr	r2, [r6, #32]
   15864:	add	r0, r0, r1
   15868:	sub	r1, r3, r1
   1586c:	mvn	r3, #3
   15870:	cmn	r1, #4
   15874:	str	r0, [r6, #16]
   15878:	movcs	r1, r3
   1587c:	str	r1, [r6, #24]
   15880:	str	r3, [r2, #4]
   15884:	adds	r0, r0, r7
   15888:	movne	r5, r0
   1588c:	strne	r8, [r0]
   15890:	mov	r0, r5
   15894:	sub	sp, fp, #24
   15898:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1589c:	ldr	r0, [pc, #24]	; 158bc <flatcc_builder_offset_vector_push@@Base+0xf4>
   158a0:	ldr	r1, [pc, #24]	; 158c0 <flatcc_builder_offset_vector_push@@Base+0xf8>
   158a4:	ldr	r3, [pc, #24]	; 158c4 <flatcc_builder_offset_vector_push@@Base+0xfc>
   158a8:	movw	r2, #934	; 0x3a6
   158ac:	add	r0, pc, r0
   158b0:	add	r1, pc, r1
   158b4:	add	r3, pc, r3
   158b8:	bl	129bc <__assert_fail@plt>
   158bc:	andeq	r8, r0, sl, lsr lr
   158c0:	andeq	r8, r0, r3, lsl #20
   158c4:	andeq	r8, r0, r5, ror #28

000158c8 <flatcc_builder_append_offset_vector@@Base>:
   158c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158cc:	add	fp, sp, #24
   158d0:	sub	sp, sp, #8
   158d4:	mov	r6, r0
   158d8:	ldr	r0, [r0, #32]
   158dc:	mov	r8, r1
   158e0:	ldrh	r1, [r0, #14]
   158e4:	cmp	r1, #5
   158e8:	bne	159d8 <flatcc_builder_append_offset_vector@@Base+0x110>
   158ec:	ldr	r1, [r0, #20]
   158f0:	mov	r5, r2
   158f4:	adds	r1, r1, r2
   158f8:	cmpcc	r1, #1073741824	; 0x40000000
   158fc:	bcc	15920 <flatcc_builder_append_offset_vector@@Base+0x58>
   15900:	ldr	r0, [pc, #252]	; 15a04 <flatcc_builder_append_offset_vector@@Base+0x13c>
   15904:	ldr	r1, [pc, #252]	; 15a08 <flatcc_builder_append_offset_vector@@Base+0x140>
   15908:	ldr	r3, [pc, #252]	; 15a0c <flatcc_builder_append_offset_vector@@Base+0x144>
   1590c:	mov	r2, #892	; 0x37c
   15910:	add	r0, pc, r0
   15914:	add	r1, pc, r1
   15918:	add	r3, pc, r3
   1591c:	bl	129bc <__assert_fail@plt>
   15920:	str	r1, [r0, #20]
   15924:	ldr	r4, [r6, #20]
   15928:	ldr	r0, [r6, #24]
   1592c:	add	r1, r4, r5, lsl #2
   15930:	cmp	r1, r0
   15934:	str	r1, [r6, #20]
   15938:	bcs	1595c <flatcc_builder_append_offset_vector@@Base+0x94>
   1593c:	ldr	r0, [r6, #16]
   15940:	adds	r7, r0, r4
   15944:	beq	159c8 <flatcc_builder_append_offset_vector@@Base+0x100>
   15948:	lsl	r2, r5, #2
   1594c:	mov	r0, r7
   15950:	mov	r1, r8
   15954:	bl	128fc <memcpy@plt>
   15958:	b	159cc <flatcc_builder_append_offset_vector@@Base+0x104>
   1595c:	ldr	r2, [r6, #28]
   15960:	ldr	r0, [r6, #40]	; 0x28
   15964:	ldr	r7, [r6, #48]	; 0x30
   15968:	mov	r3, #1
   1596c:	str	r3, [sp]
   15970:	mov	r3, #1
   15974:	add	r1, r1, r2
   15978:	add	r2, r1, #1
   1597c:	add	r1, r6, #60	; 0x3c
   15980:	blx	r7
   15984:	mov	r7, #0
   15988:	cmp	r0, #0
   1598c:	bne	159cc <flatcc_builder_append_offset_vector@@Base+0x104>
   15990:	ldr	r1, [r6, #28]
   15994:	ldr	r0, [r6, #60]	; 0x3c
   15998:	ldr	r3, [r6, #64]	; 0x40
   1599c:	ldr	r2, [r6, #32]
   159a0:	add	r0, r0, r1
   159a4:	sub	r1, r3, r1
   159a8:	mvn	r3, #3
   159ac:	cmn	r1, #4
   159b0:	str	r0, [r6, #16]
   159b4:	movcs	r1, r3
   159b8:	str	r1, [r6, #24]
   159bc:	str	r3, [r2, #4]
   159c0:	adds	r7, r0, r4
   159c4:	bne	15948 <flatcc_builder_append_offset_vector@@Base+0x80>
   159c8:	mov	r7, #0
   159cc:	mov	r0, r7
   159d0:	sub	sp, fp, #24
   159d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159d8:	ldr	r0, [pc, #24]	; 159f8 <flatcc_builder_append_offset_vector@@Base+0x130>
   159dc:	ldr	r1, [pc, #24]	; 159fc <flatcc_builder_append_offset_vector@@Base+0x134>
   159e0:	ldr	r3, [pc, #24]	; 15a00 <flatcc_builder_append_offset_vector@@Base+0x138>
   159e4:	mov	r2, #948	; 0x3b4
   159e8:	add	r0, pc, r0
   159ec:	add	r1, pc, r1
   159f0:	add	r3, pc, r3
   159f4:	bl	129bc <__assert_fail@plt>
   159f8:	strdeq	r8, [r0], -lr
   159fc:	andeq	r8, r0, r7, asr #17
   15a00:	andeq	r8, r0, fp, lsl #27
   15a04:	andeq	r9, r0, r9, ror #20
   15a08:	muleq	r0, pc, r9	; <UNPREDICTABLE>
   15a0c:	andeq	r9, r0, ip, ror sl

00015a10 <flatcc_builder_extend_string@@Base>:
   15a10:	push	{r4, r5, fp, lr}
   15a14:	add	fp, sp, #8
   15a18:	sub	sp, sp, #8
   15a1c:	mov	r4, r0
   15a20:	ldr	r0, [r0, #32]
   15a24:	ldrh	r2, [r0, #14]
   15a28:	cmp	r2, #6
   15a2c:	bne	15adc <flatcc_builder_extend_string@@Base+0xcc>
   15a30:	ldr	r2, [r0, #20]
   15a34:	adds	r2, r2, r1
   15a38:	bcs	15afc <flatcc_builder_extend_string@@Base+0xec>
   15a3c:	str	r2, [r0, #20]
   15a40:	ldr	r5, [r4, #20]
   15a44:	ldr	r0, [r4, #24]
   15a48:	add	r1, r5, r1
   15a4c:	cmp	r1, r0
   15a50:	str	r1, [r4, #20]
   15a54:	bcs	15a60 <flatcc_builder_extend_string@@Base+0x50>
   15a58:	ldr	r0, [r4, #16]
   15a5c:	b	15ad0 <flatcc_builder_extend_string@@Base+0xc0>
   15a60:	ldr	r2, [r4, #28]
   15a64:	ldr	r0, [r4, #40]	; 0x28
   15a68:	ldr	ip, [r4, #48]	; 0x30
   15a6c:	mov	r3, #1
   15a70:	str	r3, [sp]
   15a74:	mov	r3, #1
   15a78:	add	r1, r1, r2
   15a7c:	add	r2, r1, #1
   15a80:	add	r1, r4, #60	; 0x3c
   15a84:	blx	ip
   15a88:	mov	r1, r0
   15a8c:	mov	r0, #0
   15a90:	cmp	r1, #0
   15a94:	beq	15aa0 <flatcc_builder_extend_string@@Base+0x90>
   15a98:	sub	sp, fp, #8
   15a9c:	pop	{r4, r5, fp, pc}
   15aa0:	ldr	r1, [r4, #28]
   15aa4:	ldr	r0, [r4, #60]	; 0x3c
   15aa8:	ldr	r3, [r4, #64]	; 0x40
   15aac:	ldr	r2, [r4, #32]
   15ab0:	add	r0, r0, r1
   15ab4:	sub	r1, r3, r1
   15ab8:	mvn	r3, #3
   15abc:	cmn	r1, #4
   15ac0:	str	r0, [r4, #16]
   15ac4:	movcs	r1, r3
   15ac8:	str	r1, [r4, #24]
   15acc:	str	r3, [r2, #4]
   15ad0:	add	r0, r0, r5
   15ad4:	sub	sp, fp, #8
   15ad8:	pop	{r4, r5, fp, pc}
   15adc:	ldr	r0, [pc, #56]	; 15b1c <flatcc_builder_extend_string@@Base+0x10c>
   15ae0:	ldr	r1, [pc, #56]	; 15b20 <flatcc_builder_extend_string@@Base+0x110>
   15ae4:	ldr	r3, [pc, #56]	; 15b24 <flatcc_builder_extend_string@@Base+0x114>
   15ae8:	movw	r2, #957	; 0x3bd
   15aec:	add	r0, pc, r0
   15af0:	add	r1, pc, r1
   15af4:	add	r3, pc, r3
   15af8:	bl	129bc <__assert_fail@plt>
   15afc:	ldr	r0, [pc, #36]	; 15b28 <flatcc_builder_extend_string@@Base+0x118>
   15b00:	ldr	r1, [pc, #36]	; 15b2c <flatcc_builder_extend_string@@Base+0x11c>
   15b04:	ldr	r3, [pc, #36]	; 15b30 <flatcc_builder_extend_string@@Base+0x120>
   15b08:	mov	r2, #892	; 0x37c
   15b0c:	add	r0, pc, r0
   15b10:	add	r1, pc, r1
   15b14:	add	r3, pc, r3
   15b18:	bl	129bc <__assert_fail@plt>
   15b1c:	andeq	r8, r0, r3, lsl #26
   15b20:	andeq	r8, r0, r3, asr #15
   15b24:	andeq	r8, r0, r7, lsr #26
   15b28:	andeq	r9, r0, sp, ror #16
   15b2c:	andeq	r8, r0, r3, lsr #15
   15b30:	andeq	r9, r0, r0, lsl #17

00015b34 <flatcc_builder_append_string@@Base>:
   15b34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b38:	add	fp, sp, #24
   15b3c:	sub	sp, sp, #8
   15b40:	mov	r6, r0
   15b44:	ldr	r0, [r0, #32]
   15b48:	mov	r8, r1
   15b4c:	ldrh	r1, [r0, #14]
   15b50:	cmp	r1, #6
   15b54:	bne	15c20 <flatcc_builder_append_string@@Base+0xec>
   15b58:	ldr	r1, [r0, #20]
   15b5c:	mov	r4, r2
   15b60:	adds	r1, r1, r2
   15b64:	bcs	15c40 <flatcc_builder_append_string@@Base+0x10c>
   15b68:	str	r1, [r0, #20]
   15b6c:	ldr	r5, [r6, #20]
   15b70:	ldr	r0, [r6, #24]
   15b74:	add	r1, r5, r4
   15b78:	cmp	r1, r0
   15b7c:	str	r1, [r6, #20]
   15b80:	bcs	15ba4 <flatcc_builder_append_string@@Base+0x70>
   15b84:	ldr	r0, [r6, #16]
   15b88:	adds	r7, r0, r5
   15b8c:	beq	15c10 <flatcc_builder_append_string@@Base+0xdc>
   15b90:	mov	r0, r7
   15b94:	mov	r1, r8
   15b98:	mov	r2, r4
   15b9c:	bl	128fc <memcpy@plt>
   15ba0:	b	15c14 <flatcc_builder_append_string@@Base+0xe0>
   15ba4:	ldr	r2, [r6, #28]
   15ba8:	ldr	r0, [r6, #40]	; 0x28
   15bac:	ldr	r7, [r6, #48]	; 0x30
   15bb0:	mov	r3, #1
   15bb4:	str	r3, [sp]
   15bb8:	mov	r3, #1
   15bbc:	add	r1, r1, r2
   15bc0:	add	r2, r1, #1
   15bc4:	add	r1, r6, #60	; 0x3c
   15bc8:	blx	r7
   15bcc:	mov	r7, #0
   15bd0:	cmp	r0, #0
   15bd4:	bne	15c14 <flatcc_builder_append_string@@Base+0xe0>
   15bd8:	ldr	r1, [r6, #28]
   15bdc:	ldr	r0, [r6, #60]	; 0x3c
   15be0:	ldr	r3, [r6, #64]	; 0x40
   15be4:	ldr	r2, [r6, #32]
   15be8:	add	r0, r0, r1
   15bec:	sub	r1, r3, r1
   15bf0:	mvn	r3, #3
   15bf4:	cmn	r1, #4
   15bf8:	str	r0, [r6, #16]
   15bfc:	movcs	r1, r3
   15c00:	str	r1, [r6, #24]
   15c04:	str	r3, [r2, #4]
   15c08:	adds	r7, r0, r5
   15c0c:	bne	15b90 <flatcc_builder_append_string@@Base+0x5c>
   15c10:	mov	r7, #0
   15c14:	mov	r0, r7
   15c18:	sub	sp, fp, #24
   15c1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c20:	ldr	r0, [pc, #56]	; 15c60 <flatcc_builder_append_string@@Base+0x12c>
   15c24:	ldr	r1, [pc, #56]	; 15c64 <flatcc_builder_append_string@@Base+0x130>
   15c28:	ldr	r3, [pc, #56]	; 15c68 <flatcc_builder_append_string@@Base+0x134>
   15c2c:	movw	r2, #966	; 0x3c6
   15c30:	add	r0, pc, r0
   15c34:	add	r1, pc, r1
   15c38:	add	r3, pc, r3
   15c3c:	bl	129bc <__assert_fail@plt>
   15c40:	ldr	r0, [pc, #36]	; 15c6c <flatcc_builder_append_string@@Base+0x138>
   15c44:	ldr	r1, [pc, #36]	; 15c70 <flatcc_builder_append_string@@Base+0x13c>
   15c48:	ldr	r3, [pc, #36]	; 15c74 <flatcc_builder_append_string@@Base+0x140>
   15c4c:	mov	r2, #892	; 0x37c
   15c50:	add	r0, pc, r0
   15c54:	add	r1, pc, r1
   15c58:	add	r3, pc, r3
   15c5c:	bl	129bc <__assert_fail@plt>
   15c60:			; <UNDEFINED> instruction: 0x00008bbf
   15c64:	andeq	r8, r0, pc, ror r6
   15c68:	andeq	r8, r0, r2, lsr #24
   15c6c:	andeq	r9, r0, r9, lsr #14
   15c70:	andeq	r8, r0, pc, asr r6
   15c74:	andeq	r9, r0, ip, lsr r7

00015c78 <flatcc_builder_append_string_str@@Base>:
   15c78:	push	{r4, r5, fp, lr}
   15c7c:	add	fp, sp, #8
   15c80:	mov	r5, r0
   15c84:	mov	r0, r1
   15c88:	mov	r4, r1
   15c8c:	bl	12968 <strlen@plt>
   15c90:	mov	r2, r0
   15c94:	mov	r0, r5
   15c98:	mov	r1, r4
   15c9c:	pop	{r4, r5, fp, lr}
   15ca0:	b	15b34 <flatcc_builder_append_string@@Base>

00015ca4 <flatcc_builder_append_string_strn@@Base>:
   15ca4:	push	{r4, r5, r6, sl, fp, lr}
   15ca8:	add	fp, sp, #16
   15cac:	mov	r6, r0
   15cb0:	mov	r5, r1
   15cb4:	mov	r0, r1
   15cb8:	mov	r1, #0
   15cbc:	mov	r4, r2
   15cc0:	bl	129a4 <memchr@plt>
   15cc4:	cmp	r0, #0
   15cc8:	mov	r1, r5
   15ccc:	subne	r4, r0, r5
   15cd0:	mov	r0, r6
   15cd4:	mov	r2, r4
   15cd8:	pop	{r4, r5, r6, sl, fp, lr}
   15cdc:	b	15b34 <flatcc_builder_append_string@@Base>

00015ce0 <flatcc_builder_truncate_vector@@Base>:
   15ce0:	push	{fp, lr}
   15ce4:	mov	fp, sp
   15ce8:	ldr	r2, [r0, #32]
   15cec:	ldrh	r3, [r2, #14]
   15cf0:	cmp	r3, #4
   15cf4:	bne	15d3c <flatcc_builder_truncate_vector@@Base+0x5c>
   15cf8:	ldr	r3, [r2, #20]
   15cfc:	cmp	r3, r1
   15d00:	bcc	15d5c <flatcc_builder_truncate_vector@@Base+0x7c>
   15d04:	sub	r3, r3, r1
   15d08:	str	r3, [r2, #20]
   15d0c:	ldr	r2, [r0, #32]
   15d10:	ldr	r3, [r0, #20]
   15d14:	ldr	ip, [r0, #16]
   15d18:	ldr	r2, [r2, #16]
   15d1c:	mls	r3, r2, r1, r3
   15d20:	mul	r2, r2, r1
   15d24:	mov	r1, #0
   15d28:	str	r3, [r0, #20]
   15d2c:	add	r0, ip, r3
   15d30:	bl	1298c <memset@plt>
   15d34:	mov	r0, #0
   15d38:	pop	{fp, pc}
   15d3c:	ldr	r0, [pc, #56]	; 15d7c <flatcc_builder_truncate_vector@@Base+0x9c>
   15d40:	ldr	r1, [pc, #56]	; 15d80 <flatcc_builder_truncate_vector@@Base+0xa0>
   15d44:	ldr	r3, [pc, #56]	; 15d84 <flatcc_builder_truncate_vector@@Base+0xa4>
   15d48:	movw	r2, #985	; 0x3d9
   15d4c:	add	r0, pc, r0
   15d50:	add	r1, pc, r1
   15d54:	add	r3, pc, r3
   15d58:	bl	129bc <__assert_fail@plt>
   15d5c:	ldr	r0, [pc, #36]	; 15d88 <flatcc_builder_truncate_vector@@Base+0xa8>
   15d60:	ldr	r1, [pc, #36]	; 15d8c <flatcc_builder_truncate_vector@@Base+0xac>
   15d64:	ldr	r3, [pc, #36]	; 15d90 <flatcc_builder_truncate_vector@@Base+0xb0>
   15d68:	movw	r2, #986	; 0x3da
   15d6c:	add	r0, pc, r0
   15d70:	add	r1, pc, r1
   15d74:	add	r3, pc, r3
   15d78:	bl	129bc <__assert_fail@plt>
   15d7c:	andeq	r8, r0, r1, lsr #17
   15d80:	andeq	r8, r0, r3, ror #10
   15d84:	andeq	r8, r0, r3, asr fp
   15d88:	andeq	r8, r0, sl, ror fp
   15d8c:	andeq	r8, r0, r3, asr #10
   15d90:	andeq	r8, r0, r3, lsr fp

00015d94 <flatcc_builder_truncate_offset_vector@@Base>:
   15d94:	push	{fp, lr}
   15d98:	mov	fp, sp
   15d9c:	ldr	r2, [r0, #32]
   15da0:	ldrh	r3, [r2, #14]
   15da4:	cmp	r3, #5
   15da8:	bne	15df0 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15dac:	ldr	r3, [r2, #20]
   15db0:	cmp	r3, r1
   15db4:	bcc	15e10 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15db8:	sub	r3, r3, r1
   15dbc:	str	r3, [r2, #20]
   15dc0:	ldr	r2, [r0, #32]
   15dc4:	ldr	r3, [r0, #20]
   15dc8:	ldr	ip, [r0, #16]
   15dcc:	ldr	r2, [r2, #16]
   15dd0:	mls	r3, r2, r1, r3
   15dd4:	mul	r2, r2, r1
   15dd8:	mov	r1, #0
   15ddc:	str	r3, [r0, #20]
   15de0:	add	r0, ip, r3
   15de4:	bl	1298c <memset@plt>
   15de8:	mov	r0, #0
   15dec:	pop	{fp, pc}
   15df0:	ldr	r0, [pc, #56]	; 15e30 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   15df4:	ldr	r1, [pc, #56]	; 15e34 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15df8:	ldr	r3, [pc, #56]	; 15e38 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   15dfc:	movw	r2, #994	; 0x3e2
   15e00:	add	r0, pc, r0
   15e04:	add	r1, pc, r1
   15e08:	add	r3, pc, r3
   15e0c:	bl	129bc <__assert_fail@plt>
   15e10:	ldr	r0, [pc, #36]	; 15e3c <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   15e14:	ldr	r1, [pc, #36]	; 15e40 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   15e18:	ldr	r3, [pc, #36]	; 15e44 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   15e1c:	movw	r2, #995	; 0x3e3
   15e20:	add	r0, pc, r0
   15e24:	add	r1, pc, r1
   15e28:	add	r3, pc, r3
   15e2c:	bl	129bc <__assert_fail@plt>
   15e30:	andeq	r8, r0, r6, ror #17
   15e34:	andeq	r8, r0, pc, lsr #9
   15e38:	andeq	r8, r0, r2, lsl #22
   15e3c:	andeq	r8, r0, r0, lsr fp
   15e40:	andeq	r8, r0, pc, lsl #9
   15e44:	andeq	r8, r0, r2, ror #21

00015e48 <flatcc_builder_truncate_string@@Base>:
   15e48:	push	{fp, lr}
   15e4c:	mov	fp, sp
   15e50:	mov	r2, r1
   15e54:	ldr	r1, [r0, #32]
   15e58:	ldrh	r3, [r1, #14]
   15e5c:	cmp	r3, #6
   15e60:	bne	15e9c <flatcc_builder_truncate_string@@Base+0x54>
   15e64:	ldr	r3, [r1, #20]
   15e68:	cmp	r3, r2
   15e6c:	bcc	15ebc <flatcc_builder_truncate_string@@Base+0x74>
   15e70:	sub	r3, r3, r2
   15e74:	str	r3, [r1, #20]
   15e78:	ldr	r3, [r0, #20]
   15e7c:	ldr	r1, [r0, #16]
   15e80:	sub	r3, r3, r2
   15e84:	str	r3, [r0, #20]
   15e88:	add	r0, r1, r3
   15e8c:	mov	r1, #0
   15e90:	bl	1298c <memset@plt>
   15e94:	mov	r0, #0
   15e98:	pop	{fp, pc}
   15e9c:	ldr	r0, [pc, #56]	; 15edc <flatcc_builder_truncate_string@@Base+0x94>
   15ea0:	ldr	r1, [pc, #56]	; 15ee0 <flatcc_builder_truncate_string@@Base+0x98>
   15ea4:	ldr	r3, [pc, #56]	; 15ee4 <flatcc_builder_truncate_string@@Base+0x9c>
   15ea8:	movw	r2, #1003	; 0x3eb
   15eac:	add	r0, pc, r0
   15eb0:	add	r1, pc, r1
   15eb4:	add	r3, pc, r3
   15eb8:	bl	129bc <__assert_fail@plt>
   15ebc:	ldr	r0, [pc, #36]	; 15ee8 <flatcc_builder_truncate_string@@Base+0xa0>
   15ec0:	ldr	r1, [pc, #36]	; 15eec <flatcc_builder_truncate_string@@Base+0xa4>
   15ec4:	ldr	r3, [pc, #36]	; 15ef0 <flatcc_builder_truncate_string@@Base+0xa8>
   15ec8:	mov	r2, #1004	; 0x3ec
   15ecc:	add	r0, pc, r0
   15ed0:	add	r1, pc, r1
   15ed4:	add	r3, pc, r3
   15ed8:	bl	129bc <__assert_fail@plt>
   15edc:	andeq	r8, r0, r3, asr #18
   15ee0:	andeq	r8, r0, r3, lsl #8
   15ee4:	ldrdeq	r8, [r0], -r7
   15ee8:	strdeq	r8, [r0], -lr
   15eec:	andeq	r8, r0, r3, ror #7
   15ef0:			; <UNDEFINED> instruction: 0x00008ab7

00015ef4 <flatcc_builder_start_vector@@Base>:
   15ef4:	push	{r4, r5, r6, r7, fp, lr}
   15ef8:	add	fp, sp, #16
   15efc:	mov	r7, #4
   15f00:	cmp	r2, #4
   15f04:	mov	r6, r1
   15f08:	mov	r5, r3
   15f0c:	mov	r4, r0
   15f10:	movls	r2, r7
   15f14:	mov	r1, r2
   15f18:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   15f1c:	mov	r1, r0
   15f20:	mvn	r0, #0
   15f24:	cmp	r1, #0
   15f28:	popne	{r4, r5, r6, r7, fp, pc}
   15f2c:	ldr	r0, [r4, #32]
   15f30:	str	r6, [r0, #16]
   15f34:	mov	r0, #0
   15f38:	ldr	r1, [r4, #32]
   15f3c:	str	r0, [r1, #20]
   15f40:	ldr	r1, [r4, #32]
   15f44:	str	r5, [r1, #24]
   15f48:	ldr	r1, [r4, #32]
   15f4c:	strh	r7, [r1, #14]
   15f50:	ldr	r2, [r4, #28]
   15f54:	ldr	r3, [r4, #60]	; 0x3c
   15f58:	ldr	r7, [r4, #64]	; 0x40
   15f5c:	add	r3, r3, r2
   15f60:	sub	r2, r7, r2
   15f64:	str	r3, [r4, #16]
   15f68:	mvn	r3, #3
   15f6c:	cmn	r2, #4
   15f70:	movcs	r2, r3
   15f74:	str	r2, [r4, #24]
   15f78:	str	r3, [r1, #4]
   15f7c:	pop	{r4, r5, r6, r7, fp, pc}

00015f80 <flatcc_builder_start_offset_vector@@Base>:
   15f80:	push	{r4, r5, fp, lr}
   15f84:	add	fp, sp, #8
   15f88:	mov	r1, #4
   15f8c:	mov	r4, r0
   15f90:	mov	r5, #4
   15f94:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   15f98:	mov	r1, r0
   15f9c:	mvn	r0, #0
   15fa0:	cmp	r1, #0
   15fa4:	popne	{r4, r5, fp, pc}
   15fa8:	ldr	r0, [r4, #32]
   15fac:	mov	r2, #5
   15fb0:	str	r5, [r0, #16]
   15fb4:	mov	r0, #0
   15fb8:	ldr	r1, [r4, #32]
   15fbc:	str	r0, [r1, #20]
   15fc0:	ldr	r1, [r4, #32]
   15fc4:	strh	r2, [r1, #14]
   15fc8:	ldr	r2, [r4, #28]
   15fcc:	ldr	r3, [r4, #60]	; 0x3c
   15fd0:	ldr	r5, [r4, #64]	; 0x40
   15fd4:	add	r3, r3, r2
   15fd8:	sub	r2, r5, r2
   15fdc:	str	r3, [r4, #16]
   15fe0:	mvn	r3, #3
   15fe4:	cmn	r2, #4
   15fe8:	movcs	r2, r3
   15fec:	str	r2, [r4, #24]
   15ff0:	str	r3, [r1, #4]
   15ff4:	pop	{r4, r5, fp, pc}

00015ff8 <flatcc_builder_create_offset_vector@@Base>:
   15ff8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ffc:	add	fp, sp, #24
   16000:	sub	sp, sp, #8
   16004:	mov	r8, r1
   16008:	mov	r1, #4
   1600c:	mov	r6, r2
   16010:	mov	r4, r0
   16014:	mov	r7, #4
   16018:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   1601c:	cmp	r0, #0
   16020:	beq	16030 <flatcc_builder_create_offset_vector@@Base+0x38>
   16024:	mov	r0, #0
   16028:	sub	sp, fp, #24
   1602c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16030:	ldr	r0, [r4, #32]
   16034:	mov	r1, #0
   16038:	str	r7, [r0, #16]
   1603c:	ldr	r0, [r4, #32]
   16040:	str	r1, [r0, #20]
   16044:	mov	r1, #5
   16048:	ldr	r0, [r4, #32]
   1604c:	strh	r1, [r0, #14]
   16050:	ldr	r1, [r4, #28]
   16054:	ldr	r2, [r4, #60]	; 0x3c
   16058:	ldr	r3, [r4, #64]	; 0x40
   1605c:	add	r2, r2, r1
   16060:	sub	r1, r3, r1
   16064:	str	r2, [r4, #16]
   16068:	mvn	r2, #3
   1606c:	cmn	r1, #4
   16070:	movcs	r1, r2
   16074:	str	r1, [r4, #24]
   16078:	str	r2, [r0, #4]
   1607c:	ldr	r1, [r0, #20]
   16080:	adds	r1, r1, r6
   16084:	cmpcc	r1, #1073741824	; 0x40000000
   16088:	bcc	160ac <flatcc_builder_create_offset_vector@@Base+0xb4>
   1608c:	ldr	r0, [pc, #200]	; 1615c <flatcc_builder_create_offset_vector@@Base+0x164>
   16090:	ldr	r1, [pc, #200]	; 16160 <flatcc_builder_create_offset_vector@@Base+0x168>
   16094:	ldr	r3, [pc, #200]	; 16164 <flatcc_builder_create_offset_vector@@Base+0x16c>
   16098:	mov	r2, #892	; 0x37c
   1609c:	add	r0, pc, r0
   160a0:	add	r1, pc, r1
   160a4:	add	r3, pc, r3
   160a8:	bl	129bc <__assert_fail@plt>
   160ac:	str	r1, [r0, #20]
   160b0:	ldr	r7, [r4, #20]
   160b4:	ldr	r0, [r4, #24]
   160b8:	add	r1, r7, r6, lsl #2
   160bc:	cmp	r1, r0
   160c0:	str	r1, [r4, #20]
   160c4:	bcs	160d8 <flatcc_builder_create_offset_vector@@Base+0xe0>
   160c8:	ldr	r0, [r4, #16]
   160cc:	adds	r0, r0, r7
   160d0:	bne	16140 <flatcc_builder_create_offset_vector@@Base+0x148>
   160d4:	b	16024 <flatcc_builder_create_offset_vector@@Base+0x2c>
   160d8:	ldr	r2, [r4, #28]
   160dc:	ldr	r0, [r4, #40]	; 0x28
   160e0:	ldr	r5, [r4, #48]	; 0x30
   160e4:	mov	r3, #1
   160e8:	str	r3, [sp]
   160ec:	mov	r3, #1
   160f0:	add	r1, r1, r2
   160f4:	add	r2, r1, #1
   160f8:	add	r1, r4, #60	; 0x3c
   160fc:	blx	r5
   16100:	cmp	r0, #0
   16104:	bne	16024 <flatcc_builder_create_offset_vector@@Base+0x2c>
   16108:	ldr	r1, [r4, #28]
   1610c:	ldr	r0, [r4, #60]	; 0x3c
   16110:	ldr	r3, [r4, #64]	; 0x40
   16114:	ldr	r2, [r4, #32]
   16118:	add	r0, r0, r1
   1611c:	sub	r1, r3, r1
   16120:	mvn	r3, #3
   16124:	cmn	r1, #4
   16128:	str	r0, [r4, #16]
   1612c:	movcs	r1, r3
   16130:	str	r1, [r4, #24]
   16134:	str	r3, [r2, #4]
   16138:	adds	r0, r0, r7
   1613c:	beq	16024 <flatcc_builder_create_offset_vector@@Base+0x2c>
   16140:	lsl	r2, r6, #2
   16144:	mov	r1, r8
   16148:	bl	128fc <memcpy@plt>
   1614c:	mov	r0, r4
   16150:	sub	sp, fp, #24
   16154:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16158:	b	16168 <flatcc_builder_end_offset_vector@@Base>
   1615c:	ldrdeq	r9, [r0], -sp
   16160:	andeq	r8, r0, r3, lsl r2
   16164:	strdeq	r9, [r0], -r0

00016168 <flatcc_builder_end_offset_vector@@Base>:
   16168:	push	{r4, r5, fp, lr}
   1616c:	add	fp, sp, #8
   16170:	mov	r4, r0
   16174:	ldr	r0, [r0, #32]
   16178:	ldrh	r1, [r0, #14]
   1617c:	cmp	r1, #5
   16180:	bne	16220 <flatcc_builder_end_offset_vector@@Base+0xb8>
   16184:	ldr	r2, [r0, #20]
   16188:	ldr	r1, [r4, #16]
   1618c:	mov	r0, r4
   16190:	mov	r3, #0
   16194:	bl	17284 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16198:	mov	r5, r0
   1619c:	cmp	r0, #0
   161a0:	beq	16218 <flatcc_builder_end_offset_vector@@Base+0xb0>
   161a4:	ldr	r0, [r4, #16]
   161a8:	ldr	r2, [r4, #20]
   161ac:	mov	r1, #0
   161b0:	bl	1298c <memset@plt>
   161b4:	ldr	r0, [r4, #32]
   161b8:	ldr	r1, [r4, #60]	; 0x3c
   161bc:	ldr	ip, [r4, #64]	; 0x40
   161c0:	ldr	r3, [r0, #8]
   161c4:	str	r3, [r4, #20]
   161c8:	ldr	r3, [r0]
   161cc:	str	r3, [r4, #28]
   161d0:	add	r1, r1, r3
   161d4:	ldr	r2, [r0, #4]
   161d8:	str	r1, [r4, #16]
   161dc:	sub	r1, ip, r3
   161e0:	cmp	r1, r2
   161e4:	movhi	r1, r2
   161e8:	str	r1, [r4, #24]
   161ec:	ldrh	r1, [r4, #130]	; 0x82
   161f0:	ldrh	r2, [r4, #128]	; 0x80
   161f4:	cmp	r2, r1
   161f8:	strhcc	r1, [r4, #128]	; 0x80
   161fc:	ldrh	r1, [r0, #12]
   16200:	sub	r0, r0, #36	; 0x24
   16204:	str	r0, [r4, #32]
   16208:	strh	r1, [r4, #130]	; 0x82
   1620c:	ldr	r0, [r4, #156]	; 0x9c
   16210:	sub	r0, r0, #1
   16214:	str	r0, [r4, #156]	; 0x9c
   16218:	mov	r0, r5
   1621c:	pop	{r4, r5, fp, pc}
   16220:	ldr	r0, [pc, #24]	; 16240 <flatcc_builder_end_offset_vector@@Base+0xd8>
   16224:	ldr	r1, [pc, #24]	; 16244 <flatcc_builder_end_offset_vector@@Base+0xdc>
   16228:	ldr	r3, [pc, #24]	; 16248 <flatcc_builder_end_offset_vector@@Base+0xe0>
   1622c:	movw	r2, #1480	; 0x5c8
   16230:	add	r0, pc, r0
   16234:	add	r1, pc, r1
   16238:	add	r3, pc, r3
   1623c:	bl	129bc <__assert_fail@plt>
   16240:			; <UNDEFINED> instruction: 0x000084b6
   16244:	andeq	r8, r0, pc, ror r0
   16248:	ldrdeq	r8, [r0], -sp

0001624c <flatcc_builder_start_string@@Base>:
   1624c:	push	{r4, r5, fp, lr}
   16250:	add	fp, sp, #8
   16254:	mov	r1, #1
   16258:	mov	r4, r0
   1625c:	mov	r5, #1
   16260:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   16264:	mov	r1, r0
   16268:	mvn	r0, #0
   1626c:	cmp	r1, #0
   16270:	popne	{r4, r5, fp, pc}
   16274:	ldr	r0, [r4, #32]
   16278:	mov	r2, #6
   1627c:	str	r5, [r0, #16]
   16280:	mov	r0, #0
   16284:	ldr	r1, [r4, #32]
   16288:	str	r0, [r1, #20]
   1628c:	ldr	r1, [r4, #32]
   16290:	strh	r2, [r1, #14]
   16294:	ldr	r2, [r4, #28]
   16298:	ldr	r3, [r4, #60]	; 0x3c
   1629c:	ldr	r5, [r4, #64]	; 0x40
   162a0:	add	r3, r3, r2
   162a4:	sub	r2, r5, r2
   162a8:	str	r3, [r4, #16]
   162ac:	mvn	r3, #3
   162b0:	cmn	r2, #4
   162b4:	movcs	r2, r3
   162b8:	str	r2, [r4, #24]
   162bc:	str	r3, [r1, #4]
   162c0:	pop	{r4, r5, fp, pc}

000162c4 <flatcc_builder_reserve_table@@Base>:
   162c4:	push	{r4, r5, r6, sl, fp, lr}
   162c8:	add	fp, sp, #16
   162cc:	sub	sp, sp, #8
   162d0:	cmn	r1, #1
   162d4:	ble	163ac <flatcc_builder_reserve_table@@Base+0xe8>
   162d8:	mov	r4, r0
   162dc:	ldr	r0, [r0, #32]
   162e0:	mov	r5, r1
   162e4:	ldr	r1, [r4, #56]	; 0x38
   162e8:	ldrh	r2, [r0, #28]
   162ec:	ldr	r0, [r0, #16]
   162f0:	add	r6, r0, r2, lsl #1
   162f4:	add	r0, r6, r5, lsl #1
   162f8:	add	r2, r0, #4
   162fc:	cmp	r2, r1
   16300:	bls	16328 <flatcc_builder_reserve_table@@Base+0x64>
   16304:	ldr	r0, [r4, #40]	; 0x28
   16308:	ldr	ip, [r4, #48]	; 0x30
   1630c:	mov	r3, #0
   16310:	add	r1, r4, #52	; 0x34
   16314:	str	r3, [sp]
   16318:	mov	r3, #1
   1631c:	blx	ip
   16320:	cmp	r0, #0
   16324:	bne	163cc <flatcc_builder_reserve_table@@Base+0x108>
   16328:	ldr	r0, [r4, #52]	; 0x34
   1632c:	adds	r0, r0, r6
   16330:	str	r0, [r4, #4]
   16334:	beq	163a0 <flatcc_builder_reserve_table@@Base+0xdc>
   16338:	add	r0, r0, #4
   1633c:	lsl	r1, r5, #1
   16340:	str	r0, [r4, #4]
   16344:	ldr	r0, [r4, #32]
   16348:	ldr	r3, [r4, #80]	; 0x50
   1634c:	ldr	r5, [r0, #20]
   16350:	orr	r0, r1, #1
   16354:	add	r2, r5, r0
   16358:	cmp	r2, r3
   1635c:	bls	16384 <flatcc_builder_reserve_table@@Base+0xc0>
   16360:	ldr	r0, [r4, #40]	; 0x28
   16364:	ldr	r6, [r4, #48]	; 0x30
   16368:	mov	r3, #3
   1636c:	add	r1, r4, #76	; 0x4c
   16370:	str	r3, [sp]
   16374:	mov	r3, #0
   16378:	blx	r6
   1637c:	cmp	r0, #0
   16380:	bne	163cc <flatcc_builder_reserve_table@@Base+0x108>
   16384:	ldr	r0, [r4, #76]	; 0x4c
   16388:	adds	r0, r0, r5
   1638c:	str	r0, [r4]
   16390:	mov	r0, #0
   16394:	mvneq	r0, #0
   16398:	sub	sp, fp, #16
   1639c:	pop	{r4, r5, r6, sl, fp, pc}
   163a0:	mvn	r0, #0
   163a4:	sub	sp, fp, #16
   163a8:	pop	{r4, r5, r6, sl, fp, pc}
   163ac:	ldr	r0, [pc, #56]	; 163ec <flatcc_builder_reserve_table@@Base+0x128>
   163b0:	ldr	r1, [pc, #56]	; 163f0 <flatcc_builder_reserve_table@@Base+0x12c>
   163b4:	ldr	r3, [pc, #56]	; 163f4 <flatcc_builder_reserve_table@@Base+0x130>
   163b8:	movw	r2, #1065	; 0x429
   163bc:	add	r0, pc, r0
   163c0:	add	r1, pc, r1
   163c4:	add	r3, pc, r3
   163c8:	bl	129bc <__assert_fail@plt>
   163cc:	ldr	r0, [pc, #36]	; 163f8 <flatcc_builder_reserve_table@@Base+0x134>
   163d0:	ldr	r1, [pc, #36]	; 163fc <flatcc_builder_reserve_table@@Base+0x138>
   163d4:	ldr	r3, [pc, #36]	; 16400 <flatcc_builder_reserve_table@@Base+0x13c>
   163d8:	mov	r2, #308	; 0x134
   163dc:	add	r0, pc, r0
   163e0:	add	r1, pc, r1
   163e4:	add	r3, pc, r3
   163e8:	bl	129bc <__assert_fail@plt>
   163ec:	andeq	r8, r0, r1, ror r6
   163f0:	strdeq	r7, [r0], -r3
   163f4:	andeq	r8, r0, r8, lsr #12
   163f8:	muleq	r0, r4, r0
   163fc:	ldrdeq	r7, [r0], -r3
   16400:	andeq	r8, r0, r6, asr #29

00016404 <flatcc_builder_start_table@@Base>:
   16404:	push	{r4, r5, r6, r7, fp, lr}
   16408:	add	fp, sp, #16
   1640c:	sub	sp, sp, #8
   16410:	mov	r6, r1
   16414:	mov	r1, #4
   16418:	mov	r4, r0
   1641c:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   16420:	mvn	r5, #0
   16424:	cmp	r0, #0
   16428:	beq	16438 <flatcc_builder_start_table@@Base+0x34>
   1642c:	mov	r0, r5
   16430:	sub	sp, fp, #16
   16434:	pop	{r4, r5, r6, r7, fp, pc}
   16438:	mov	r1, r4
   1643c:	ldr	r2, [r4, #4]
   16440:	ldr	r3, [r4, #32]
   16444:	ldr	r0, [r1, #52]!	; 0x34
   16448:	sub	r0, r2, r0
   1644c:	str	r0, [r3, #16]
   16450:	ldr	r0, [r4]
   16454:	ldr	r3, [r4, #76]	; 0x4c
   16458:	ldr	r2, [r4, #32]
   1645c:	sub	r0, r0, r3
   16460:	mov	r3, #0
   16464:	str	r0, [r2, #20]
   16468:	ldr	r0, [r4, #12]
   1646c:	ldr	r2, [r4, #32]
   16470:	str	r0, [r2, #24]
   16474:	ldr	r0, [r4, #32]
   16478:	ldrh	r2, [r4, #8]
   1647c:	strh	r2, [r0, #28]
   16480:	movw	r0, #15186	; 0x3b52
   16484:	strh	r3, [r4, #8]
   16488:	mov	r2, #3
   1648c:	movt	r0, #12137	; 0x2f69
   16490:	str	r0, [r4, #12]
   16494:	ldr	r0, [r4, #32]
   16498:	strh	r2, [r0, #14]
   1649c:	ldrh	r2, [r0, #28]
   164a0:	ldr	r0, [r0, #16]
   164a4:	add	r7, r0, r2, lsl #1
   164a8:	add	r0, r7, r6, lsl #1
   164ac:	add	r2, r0, #4
   164b0:	ldr	r0, [r4, #56]	; 0x38
   164b4:	cmp	r2, r0
   164b8:	bls	164d8 <flatcc_builder_start_table@@Base+0xd4>
   164bc:	ldr	r0, [r4, #40]	; 0x28
   164c0:	ldr	ip, [r4, #48]	; 0x30
   164c4:	str	r3, [sp]
   164c8:	mov	r3, #1
   164cc:	blx	ip
   164d0:	cmp	r0, #0
   164d4:	bne	1657c <flatcc_builder_start_table@@Base+0x178>
   164d8:	ldr	r0, [r4, #52]	; 0x34
   164dc:	adds	r0, r0, r7
   164e0:	str	r0, [r4, #4]
   164e4:	beq	1642c <flatcc_builder_start_table@@Base+0x28>
   164e8:	add	r0, r0, #4
   164ec:	lsl	r1, r6, #1
   164f0:	str	r0, [r4, #4]
   164f4:	ldr	r0, [r4, #32]
   164f8:	ldr	r3, [r4, #80]	; 0x50
   164fc:	ldr	r6, [r0, #20]
   16500:	orr	r0, r1, #1
   16504:	add	r2, r6, r0
   16508:	cmp	r2, r3
   1650c:	bls	16534 <flatcc_builder_start_table@@Base+0x130>
   16510:	ldr	r0, [r4, #40]	; 0x28
   16514:	ldr	r7, [r4, #48]	; 0x30
   16518:	mov	r3, #3
   1651c:	add	r1, r4, #76	; 0x4c
   16520:	str	r3, [sp]
   16524:	mov	r3, #0
   16528:	blx	r7
   1652c:	cmp	r0, #0
   16530:	bne	1657c <flatcc_builder_start_table@@Base+0x178>
   16534:	ldr	r0, [r4, #76]	; 0x4c
   16538:	adds	r0, r0, r6
   1653c:	str	r0, [r4]
   16540:	beq	1642c <flatcc_builder_start_table@@Base+0x28>
   16544:	ldr	r0, [r4, #28]
   16548:	ldr	r2, [r4, #60]	; 0x3c
   1654c:	ldr	r3, [r4, #64]	; 0x40
   16550:	ldr	r1, [r4, #32]
   16554:	mov	r5, #0
   16558:	add	r2, r2, r0
   1655c:	sub	r0, r3, r0
   16560:	str	r2, [r4, #16]
   16564:	movw	r2, #65532	; 0xfffc
   16568:	cmp	r0, r2
   1656c:	movcs	r0, r2
   16570:	str	r0, [r4, #24]
   16574:	str	r2, [r1, #4]
   16578:	b	1642c <flatcc_builder_start_table@@Base+0x28>
   1657c:	ldr	r0, [pc, #24]	; 1659c <flatcc_builder_start_table@@Base+0x198>
   16580:	ldr	r1, [pc, #24]	; 165a0 <flatcc_builder_start_table@@Base+0x19c>
   16584:	ldr	r3, [pc, #24]	; 165a4 <flatcc_builder_start_table@@Base+0x1a0>
   16588:	mov	r2, #308	; 0x134
   1658c:	add	r0, pc, r0
   16590:	add	r1, pc, r1
   16594:	add	r3, pc, r3
   16598:	bl	129bc <__assert_fail@plt>
   1659c:	andeq	r8, r0, r4, ror #29
   165a0:	andeq	r7, r0, r3, lsr #26
   165a4:	andeq	r8, r0, r6, lsl sp

000165a8 <flatcc_builder_create_vtable@@Base>:
   165a8:	push	{r4, r5, fp, lr}
   165ac:	add	fp, sp, #8
   165b0:	sub	sp, sp, #80	; 0x50
   165b4:	mov	r3, r2
   165b8:	mov	r2, #0
   165bc:	mov	r4, r0
   165c0:	cmp	r3, #0
   165c4:	str	r2, [sp, #12]
   165c8:	str	r2, [sp, #8]
   165cc:	movne	r2, #1
   165d0:	strne	r3, [sp, #20]
   165d4:	strne	r1, [sp, #16]
   165d8:	strne	r3, [sp, #8]
   165dc:	strne	r2, [sp, #12]
   165e0:	ldr	r0, [r4, #152]	; 0x98
   165e4:	cmp	r0, #0
   165e8:	bne	165f8 <flatcc_builder_create_vtable@@Base+0x50>
   165ec:	ldr	r0, [r4, #180]	; 0xb4
   165f0:	cmp	r0, #0
   165f4:	beq	16654 <flatcc_builder_create_vtable@@Base+0xac>
   165f8:	cmp	r3, #0
   165fc:	beq	16698 <flatcc_builder_create_vtable@@Base+0xf0>
   16600:	ldr	r0, [r4, #136]	; 0x88
   16604:	ldr	ip, [r4, #44]	; 0x2c
   16608:	add	r1, sp, #8
   1660c:	add	r1, r1, #8
   16610:	sub	r5, r0, r3
   16614:	ldr	r0, [r4, #36]	; 0x24
   16618:	str	r3, [sp]
   1661c:	mov	r3, r5
   16620:	blx	ip
   16624:	cmp	r0, #0
   16628:	bne	166b8 <flatcc_builder_create_vtable@@Base+0x110>
   1662c:	cmp	r5, #0
   16630:	str	r5, [r4, #136]	; 0x88
   16634:	beq	16648 <flatcc_builder_create_vtable@@Base+0xa0>
   16638:	add	r1, r5, #1
   1663c:	mov	r0, r1
   16640:	sub	sp, fp, #8
   16644:	pop	{r4, r5, fp, pc}
   16648:	mov	r0, #0
   1664c:	sub	sp, fp, #8
   16650:	pop	{r4, r5, fp, pc}
   16654:	ldr	r5, [r4, #140]	; 0x8c
   16658:	ldr	r0, [r4, #36]	; 0x24
   1665c:	ldr	ip, [r4, #44]	; 0x2c
   16660:	add	r1, r5, r3
   16664:	str	r1, [r4, #140]	; 0x8c
   16668:	add	r1, sp, #8
   1666c:	str	r3, [sp]
   16670:	mov	r3, r5
   16674:	add	r1, r1, #8
   16678:	blx	ip
   1667c:	cmp	r0, #0
   16680:	bne	166d8 <flatcc_builder_create_vtable@@Base+0x130>
   16684:	adds	r1, r5, #1
   16688:	mov	r0, #0
   1668c:	movcc	r0, r1
   16690:	sub	sp, fp, #8
   16694:	pop	{r4, r5, fp, pc}
   16698:	ldr	r0, [pc, #100]	; 16704 <flatcc_builder_create_vtable@@Base+0x15c>
   1669c:	ldr	r1, [pc, #100]	; 16708 <flatcc_builder_create_vtable@@Base+0x160>
   166a0:	ldr	r3, [pc, #100]	; 1670c <flatcc_builder_create_vtable@@Base+0x164>
   166a4:	movw	r2, #647	; 0x287
   166a8:	add	r0, pc, r0
   166ac:	add	r1, pc, r1
   166b0:	add	r3, pc, r3
   166b4:	bl	129bc <__assert_fail@plt>
   166b8:	ldr	r0, [pc, #80]	; 16710 <flatcc_builder_create_vtable@@Base+0x168>
   166bc:	ldr	r1, [pc, #80]	; 16714 <flatcc_builder_create_vtable@@Base+0x16c>
   166c0:	ldr	r3, [pc, #80]	; 16718 <flatcc_builder_create_vtable@@Base+0x170>
   166c4:	movw	r2, #651	; 0x28b
   166c8:	add	r0, pc, r0
   166cc:	add	r1, pc, r1
   166d0:	add	r3, pc, r3
   166d4:	bl	129bc <__assert_fail@plt>
   166d8:	ldr	r0, [pc, #24]	; 166f8 <flatcc_builder_create_vtable@@Base+0x150>
   166dc:	ldr	r1, [pc, #24]	; 166fc <flatcc_builder_create_vtable@@Base+0x154>
   166e0:	ldr	r3, [pc, #24]	; 16700 <flatcc_builder_create_vtable@@Base+0x158>
   166e4:	movw	r2, #677	; 0x2a5
   166e8:	add	r0, pc, r0
   166ec:	add	r1, pc, r1
   166f0:	add	r3, pc, r3
   166f4:	bl	129bc <__assert_fail@plt>
   166f8:	andeq	r8, r0, r8, lsl #27
   166fc:	andeq	r7, r0, r7, asr #23
   16700:	strdeq	r8, [r0], -fp
   16704:	andeq	r8, r0, r8, asr #27
   16708:	andeq	r7, r0, r7, lsl #24
   1670c:	andeq	r8, r0, pc, ror ip
   16710:	andeq	r8, r0, r8, lsr #27
   16714:	andeq	r7, r0, r7, ror #23
   16718:	andeq	r8, r0, pc, asr ip

0001671c <flatcc_builder_create_cached_vtable@@Base>:
   1671c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16720:	add	fp, sp, #28
   16724:	sub	sp, sp, #20
   16728:	mov	sl, r0
   1672c:	ldr	r0, [r0, #116]	; 0x74
   16730:	mov	r8, r3
   16734:	mov	r5, r2
   16738:	str	r1, [sp, #16]
   1673c:	cmp	r0, #0
   16740:	beq	167e4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16744:	ldr	r1, [sl, #92]	; 0x5c
   16748:	rsb	r0, r0, #32
   1674c:	lsr	r0, r8, r0
   16750:	add	r6, r1, r0, lsl #2
   16754:	cmp	r6, #0
   16758:	beq	168a8 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   1675c:	ldr	r7, [r6]
   16760:	str	r6, [sp, #12]
   16764:	cmp	r7, #0
   16768:	beq	168b0 <flatcc_builder_create_cached_vtable@@Base+0x194>
   1676c:	ldr	r4, [sl, #68]	; 0x44
   16770:	ldr	r8, [sl, #100]	; 0x64
   16774:	mov	r0, #0
   16778:	str	r0, [sp, #8]
   1677c:	b	16790 <flatcc_builder_create_cached_vtable@@Base+0x74>
   16780:	ldr	r7, [r9, #12]!
   16784:	mov	r6, r9
   16788:	cmp	r7, #0
   1678c:	beq	168a0 <flatcc_builder_create_cached_vtable@@Base+0x184>
   16790:	add	r9, r8, r7
   16794:	mov	r1, r4
   16798:	ldr	r0, [r9, #8]
   1679c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   167a0:	cmp	r0, r5
   167a4:	bne	16780 <flatcc_builder_create_cached_vtable@@Base+0x64>
   167a8:	ldr	r0, [sp, #16]
   167ac:	mov	r2, r5
   167b0:	bl	1295c <bcmp@plt>
   167b4:	cmp	r0, #0
   167b8:	bne	16780 <flatcc_builder_create_cached_vtable@@Base+0x64>
   167bc:	ldr	r0, [sl, #152]	; 0x98
   167c0:	ldr	r1, [r9, #4]
   167c4:	cmp	r1, r0
   167c8:	beq	16a14 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   167cc:	mov	r6, r9
   167d0:	mov	r0, r9
   167d4:	ldr	r7, [r6, #12]!
   167d8:	cmp	r7, #0
   167dc:	bne	16778 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   167e0:	b	168b4 <flatcc_builder_create_cached_vtable@@Base+0x198>
   167e4:	ldr	r0, [sl, #124]	; 0x7c
   167e8:	cmp	r0, #0
   167ec:	bne	16a60 <flatcc_builder_create_cached_vtable@@Base+0x344>
   167f0:	ldr	r0, [sl, #104]	; 0x68
   167f4:	add	r7, sl, #100	; 0x64
   167f8:	cmp	r0, #15
   167fc:	bhi	16828 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   16800:	ldr	r0, [sl, #40]	; 0x28
   16804:	ldr	r6, [sl, #48]	; 0x30
   16808:	mov	r1, #6
   1680c:	mov	r2, #16
   16810:	mov	r3, #0
   16814:	str	r1, [sp]
   16818:	mov	r1, r7
   1681c:	blx	r6
   16820:	cmp	r0, #0
   16824:	bne	16a40 <flatcc_builder_create_cached_vtable@@Base+0x324>
   16828:	ldr	r0, [r7]
   1682c:	mov	r7, #0
   16830:	cmp	r0, #0
   16834:	beq	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16838:	mov	r0, #16
   1683c:	mov	r2, #5
   16840:	add	r1, sl, #92	; 0x5c
   16844:	mov	r3, #1
   16848:	mov	r4, #256	; 0x100
   1684c:	str	r0, [sl, #124]	; 0x7c
   16850:	ldr	r0, [sl, #40]	; 0x28
   16854:	ldr	r6, [sl, #48]	; 0x30
   16858:	str	r2, [sp]
   1685c:	mov	r2, #256	; 0x100
   16860:	blx	r6
   16864:	cmp	r0, #0
   16868:	bne	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1686c:	ldr	r0, [sl, #96]	; 0x60
   16870:	mov	r1, r4
   16874:	lsl	r4, r4, #1
   16878:	cmp	r0, r1, lsl #1
   1687c:	bcs	16870 <flatcc_builder_create_cached_vtable@@Base+0x154>
   16880:	lsr	r1, r1, #2
   16884:	mvn	r0, #0
   16888:	mov	r2, #1
   1688c:	add	r0, r0, #1
   16890:	cmp	r1, r2, lsl r0
   16894:	bhi	1688c <flatcc_builder_create_cached_vtable@@Base+0x170>
   16898:	str	r0, [sl, #116]	; 0x74
   1689c:	b	16744 <flatcc_builder_create_cached_vtable@@Base+0x28>
   168a0:	ldr	r9, [sp, #8]
   168a4:	b	168b4 <flatcc_builder_create_cached_vtable@@Base+0x198>
   168a8:	mov	r7, #0
   168ac:	b	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   168b0:	mov	r9, #0
   168b4:	ldr	r4, [sl, #124]	; 0x7c
   168b8:	ldr	r0, [sl, #104]	; 0x68
   168bc:	add	r7, sl, #100	; 0x64
   168c0:	add	r2, r4, #16
   168c4:	cmp	r2, r0
   168c8:	bls	168f0 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   168cc:	ldr	r0, [sl, #40]	; 0x28
   168d0:	ldr	r6, [sl, #48]	; 0x30
   168d4:	mov	r1, #6
   168d8:	mov	r3, #0
   168dc:	str	r1, [sp]
   168e0:	mov	r1, r7
   168e4:	blx	r6
   168e8:	cmp	r0, #0
   168ec:	bne	16a40 <flatcc_builder_create_cached_vtable@@Base+0x324>
   168f0:	ldr	r0, [r7]
   168f4:	mov	r7, #0
   168f8:	adds	r4, r0, r4
   168fc:	beq	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16900:	ldr	r0, [sl, #124]	; 0x7c
   16904:	ldr	r1, [sl, #152]	; 0x98
   16908:	add	r2, r0, #16
   1690c:	str	r2, [sl, #124]	; 0x7c
   16910:	ldr	r2, [sp, #12]
   16914:	str	r1, [r4, #4]
   16918:	ldr	r1, [r2]
   1691c:	str	r1, [r4, #12]
   16920:	ldr	r1, [sp, #16]
   16924:	str	r0, [r2]
   16928:	mov	r0, sl
   1692c:	mov	r2, r5
   16930:	bl	165a8 <flatcc_builder_create_vtable@@Base>
   16934:	cmp	r0, #0
   16938:	str	r0, [r4]
   1693c:	beq	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16940:	cmp	r9, #0
   16944:	beq	16960 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16948:	ldr	r0, [r9, #8]
   1694c:	str	r0, [r4, #8]
   16950:	ldr	r7, [r4]
   16954:	mov	r0, r7
   16958:	sub	sp, fp, #28
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	ldr	r6, [sl, #120]	; 0x78
   16964:	ldr	r0, [sl, #172]	; 0xac
   16968:	add	r2, r6, r5
   1696c:	cmp	r0, #0
   16970:	beq	169ac <flatcc_builder_create_cached_vtable@@Base+0x290>
   16974:	cmp	r0, r2
   16978:	bcs	169ac <flatcc_builder_create_cached_vtable@@Base+0x290>
   1697c:	ldr	r0, [sl, #116]	; 0x74
   16980:	cmp	r0, #0
   16984:	beq	16950 <flatcc_builder_create_cached_vtable@@Base+0x234>
   16988:	ldr	r0, [sl, #92]	; 0x5c
   1698c:	ldr	r2, [sl, #96]	; 0x60
   16990:	mov	r1, #0
   16994:	mov	r5, #0
   16998:	bl	1298c <memset@plt>
   1699c:	mov	r0, #16
   169a0:	str	r5, [sl, #120]	; 0x78
   169a4:	str	r0, [sl, #124]	; 0x7c
   169a8:	b	16950 <flatcc_builder_create_cached_vtable@@Base+0x234>
   169ac:	ldr	r0, [sl, #72]	; 0x48
   169b0:	add	r7, sl, #68	; 0x44
   169b4:	cmp	r2, r0
   169b8:	bls	169e0 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   169bc:	ldr	r0, [sl, #40]	; 0x28
   169c0:	ldr	ip, [sl, #48]	; 0x30
   169c4:	mov	r1, #2
   169c8:	mov	r3, #0
   169cc:	str	r1, [sp]
   169d0:	mov	r1, r7
   169d4:	blx	ip
   169d8:	cmp	r0, #0
   169dc:	bne	16a40 <flatcc_builder_create_cached_vtable@@Base+0x324>
   169e0:	ldr	r0, [r7]
   169e4:	adds	r0, r0, r6
   169e8:	beq	16a0c <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   169ec:	ldr	r1, [sl, #120]	; 0x78
   169f0:	mov	r2, r5
   169f4:	str	r1, [r4, #8]
   169f8:	add	r1, r1, r5
   169fc:	str	r1, [sl, #120]	; 0x78
   16a00:	ldr	r1, [sp, #16]
   16a04:	bl	128fc <memcpy@plt>
   16a08:	b	16950 <flatcc_builder_create_cached_vtable@@Base+0x234>
   16a0c:	mvn	r7, #0
   16a10:	b	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16a14:	ldr	r0, [sp, #12]
   16a18:	cmp	r6, r0
   16a1c:	beq	16a38 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   16a20:	mov	r1, r0
   16a24:	ldr	r0, [r9, #12]
   16a28:	str	r0, [r6]
   16a2c:	ldr	r0, [r1]
   16a30:	str	r0, [r9, #12]
   16a34:	str	r7, [r1]
   16a38:	ldr	r7, [r9]
   16a3c:	b	16954 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16a40:	ldr	r0, [pc, #68]	; 16a8c <flatcc_builder_create_cached_vtable@@Base+0x370>
   16a44:	ldr	r1, [pc, #68]	; 16a90 <flatcc_builder_create_cached_vtable@@Base+0x374>
   16a48:	ldr	r3, [pc, #68]	; 16a94 <flatcc_builder_create_cached_vtable@@Base+0x378>
   16a4c:	mov	r2, #308	; 0x134
   16a50:	add	r0, pc, r0
   16a54:	add	r1, pc, r1
   16a58:	add	r3, pc, r3
   16a5c:	bl	129bc <__assert_fail@plt>
   16a60:	ldr	r0, [pc, #24]	; 16a80 <flatcc_builder_create_cached_vtable@@Base+0x364>
   16a64:	ldr	r1, [pc, #24]	; 16a84 <flatcc_builder_create_cached_vtable@@Base+0x368>
   16a68:	ldr	r3, [pc, #24]	; 16a88 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   16a6c:	movw	r2, #342	; 0x156
   16a70:	add	r0, pc, r0
   16a74:	add	r1, pc, r1
   16a78:	add	r3, pc, r3
   16a7c:	bl	129bc <__assert_fail@plt>
   16a80:	andeq	r8, r0, r4, asr #19
   16a84:	andeq	r7, r0, pc, lsr r8
   16a88:	andeq	r8, r0, fp, asr #19
   16a8c:	andeq	r8, r0, r0, lsr #20
   16a90:	andeq	r7, r0, pc, asr r8
   16a94:	andeq	r8, r0, r2, asr r8

00016a98 <flatcc_builder_create_table@@Base>:
   16a98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16a9c:	add	fp, sp, #24
   16aa0:	sub	sp, sp, #80	; 0x50
   16aa4:	ldr	r5, [fp, #12]
   16aa8:	cmn	r5, #1
   16aac:	ble	16bf8 <flatcc_builder_create_table@@Base+0x160>
   16ab0:	ldr	ip, [fp, #16]
   16ab4:	tst	ip, #1
   16ab8:	beq	16c18 <flatcc_builder_create_table@@Base+0x180>
   16abc:	mov	r8, r0
   16ac0:	ldrh	r0, [r0, #128]	; 0x80
   16ac4:	cmp	r3, #4
   16ac8:	movls	r3, #4
   16acc:	cmp	r0, r3
   16ad0:	strhcc	r3, [r8, #128]	; 0x80
   16ad4:	cmp	r5, #1
   16ad8:	ldr	r0, [r8, #136]	; 0x88
   16adc:	sub	r4, r0, r2
   16ae0:	sub	r0, r3, #1
   16ae4:	and	r0, r4, r0
   16ae8:	sub	r4, r4, #4
   16aec:	add	r3, ip, r0
   16af0:	sub	r3, r4, r3
   16af4:	add	r3, r3, #1
   16af8:	str	r3, [fp, #-28]	; 0xffffffe4
   16afc:	blt	16b2c <flatcc_builder_create_table@@Base+0x94>
   16b00:	ldr	r3, [fp, #8]
   16b04:	sub	ip, r4, r0
   16b08:	mvn	r4, #3
   16b0c:	sub	r4, r4, ip
   16b10:	ldrh	r6, [r3], #2
   16b14:	subs	r5, r5, #1
   16b18:	ldr	r7, [r6, r1]
   16b1c:	add	r7, r4, r7
   16b20:	sub	r7, r7, r6
   16b24:	str	r7, [r6, r1]
   16b28:	bne	16b10 <flatcc_builder_create_table@@Base+0x78>
   16b2c:	mov	r4, #4
   16b30:	sub	r3, fp, #28
   16b34:	cmp	r2, #0
   16b38:	str	r4, [sp, #16]
   16b3c:	str	r3, [sp, #12]
   16b40:	mov	r3, #1
   16b44:	str	r4, [sp, #4]
   16b48:	addne	r4, r2, #4
   16b4c:	str	r3, [sp, #8]
   16b50:	movne	r3, #2
   16b54:	strne	r2, [sp, #24]
   16b58:	strne	r1, [sp, #20]
   16b5c:	strne	r3, [sp, #8]
   16b60:	strne	r4, [sp, #4]
   16b64:	cmp	r0, #0
   16b68:	beq	16b94 <flatcc_builder_create_table@@Base+0xfc>
   16b6c:	add	r4, r4, r0
   16b70:	add	r1, sp, #4
   16b74:	str	r4, [sp, #4]
   16b78:	add	r1, r1, r3, lsl #3
   16b7c:	add	r3, r3, #1
   16b80:	ldr	r2, [pc, #208]	; 16c58 <flatcc_builder_create_table@@Base+0x1c0>
   16b84:	ldr	r2, [pc, r2]
   16b88:	str	r2, [r1, #8]
   16b8c:	str	r0, [r1, #12]
   16b90:	str	r3, [sp, #8]
   16b94:	cmp	r4, #0
   16b98:	ble	16c38 <flatcc_builder_create_table@@Base+0x1a0>
   16b9c:	ldr	r0, [r8, #136]	; 0x88
   16ba0:	ldr	r7, [r8, #44]	; 0x2c
   16ba4:	add	r1, sp, #4
   16ba8:	mov	r2, r3
   16bac:	add	r1, r1, #8
   16bb0:	sub	r5, r0, r4
   16bb4:	ldr	r0, [r8, #36]	; 0x24
   16bb8:	str	r4, [sp]
   16bbc:	mov	r3, r5
   16bc0:	blx	r7
   16bc4:	cmp	r0, #0
   16bc8:	streq	r5, [r8, #136]	; 0x88
   16bcc:	moveq	r0, r5
   16bd0:	subeq	sp, fp, #24
   16bd4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16bd8:	ldr	r0, [pc, #160]	; 16c80 <flatcc_builder_create_table@@Base+0x1e8>
   16bdc:	ldr	r1, [pc, #160]	; 16c84 <flatcc_builder_create_table@@Base+0x1ec>
   16be0:	ldr	r3, [pc, #160]	; 16c88 <flatcc_builder_create_table@@Base+0x1f0>
   16be4:	movw	r2, #651	; 0x28b
   16be8:	add	r0, pc, r0
   16bec:	add	r1, pc, r1
   16bf0:	add	r3, pc, r3
   16bf4:	bl	129bc <__assert_fail@plt>
   16bf8:	ldr	r0, [pc, #92]	; 16c5c <flatcc_builder_create_table@@Base+0x1c4>
   16bfc:	ldr	r1, [pc, #92]	; 16c60 <flatcc_builder_create_table@@Base+0x1c8>
   16c00:	ldr	r3, [pc, #92]	; 16c64 <flatcc_builder_create_table@@Base+0x1cc>
   16c04:	movw	r2, #1237	; 0x4d5
   16c08:	add	r0, pc, r0
   16c0c:	add	r1, pc, r1
   16c10:	add	r3, pc, r3
   16c14:	bl	129bc <__assert_fail@plt>
   16c18:	ldr	r0, [pc, #72]	; 16c68 <flatcc_builder_create_table@@Base+0x1d0>
   16c1c:	ldr	r1, [pc, #72]	; 16c6c <flatcc_builder_create_table@@Base+0x1d4>
   16c20:	ldr	r3, [pc, #72]	; 16c70 <flatcc_builder_create_table@@Base+0x1d8>
   16c24:	movw	r2, #1243	; 0x4db
   16c28:	add	r0, pc, r0
   16c2c:	add	r1, pc, r1
   16c30:	add	r3, pc, r3
   16c34:	bl	129bc <__assert_fail@plt>
   16c38:	ldr	r0, [pc, #52]	; 16c74 <flatcc_builder_create_table@@Base+0x1dc>
   16c3c:	ldr	r1, [pc, #52]	; 16c78 <flatcc_builder_create_table@@Base+0x1e0>
   16c40:	ldr	r3, [pc, #52]	; 16c7c <flatcc_builder_create_table@@Base+0x1e4>
   16c44:	movw	r2, #647	; 0x287
   16c48:	add	r0, pc, r0
   16c4c:	add	r1, pc, r1
   16c50:	add	r3, pc, r3
   16c54:	bl	129bc <__assert_fail@plt>
   16c58:	andeq	sl, r1, ip, asr #9
   16c5c:	andeq	r7, r0, lr, lsl lr
   16c60:	andeq	r7, r0, r7, lsr #13
   16c64:	andeq	r7, r0, r8, lsr #28
   16c68:	andeq	r7, r0, ip, lsr #29
   16c6c:	andeq	r7, r0, r7, lsl #13
   16c70:	andeq	r7, r0, r8, lsl #28
   16c74:	andeq	r8, r0, r8, lsr #16
   16c78:	andeq	r7, r0, r7, ror #12
   16c7c:	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   16c80:	andeq	r8, r0, r8, lsl #17
   16c84:	andeq	r7, r0, r7, asr #13
   16c88:	andeq	r8, r0, pc, lsr r7

00016c8c <flatcc_builder_check_required_field@@Base>:
   16c8c:	push	{fp, lr}
   16c90:	mov	fp, sp
   16c94:	ldr	r2, [r0, #32]
   16c98:	ldrh	r2, [r2, #14]
   16c9c:	cmp	r2, #3
   16ca0:	bne	16cd0 <flatcc_builder_check_required_field@@Base+0x44>
   16ca4:	ldrh	r3, [r0, #8]
   16ca8:	mov	r2, #0
   16cac:	cmp	r3, r1
   16cb0:	bls	16cc8 <flatcc_builder_check_required_field@@Base+0x3c>
   16cb4:	ldr	r0, [r0, #4]
   16cb8:	add	r0, r0, r1, lsl #1
   16cbc:	ldrh	r2, [r0]
   16cc0:	cmp	r2, #0
   16cc4:	movwne	r2, #1
   16cc8:	mov	r0, r2
   16ccc:	pop	{fp, pc}
   16cd0:	ldr	r0, [pc, #24]	; 16cf0 <flatcc_builder_check_required_field@@Base+0x64>
   16cd4:	ldr	r1, [pc, #24]	; 16cf4 <flatcc_builder_check_required_field@@Base+0x68>
   16cd8:	ldr	r3, [pc, #24]	; 16cf8 <flatcc_builder_check_required_field@@Base+0x6c>
   16cdc:	movw	r2, #1272	; 0x4f8
   16ce0:	add	r0, pc, r0
   16ce4:	add	r1, pc, r1
   16ce8:	add	r3, pc, r3
   16cec:	bl	129bc <__assert_fail@plt>
   16cf0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   16cf4:	andeq	r7, r0, pc, asr #11
   16cf8:	andeq	r7, r0, r2, lsr #28

00016cfc <flatcc_builder_check_union_field@@Base>:
   16cfc:	push	{fp, lr}
   16d00:	mov	fp, sp
   16d04:	mov	r2, r0
   16d08:	ldr	r0, [r0, #32]
   16d0c:	ldrh	r0, [r0, #14]
   16d10:	cmp	r0, #3
   16d14:	bne	16d74 <flatcc_builder_check_union_field@@Base+0x78>
   16d18:	mov	r0, #0
   16d1c:	cmp	r1, #0
   16d20:	beq	16d60 <flatcc_builder_check_union_field@@Base+0x64>
   16d24:	ldrh	r3, [r2, #8]
   16d28:	cmp	r3, r1
   16d2c:	popls	{fp, pc}
   16d30:	ldr	r0, [r2, #4]
   16d34:	add	r0, r0, r1, lsl #1
   16d38:	ldrh	r1, [r0, #-2]
   16d3c:	cmp	r1, #0
   16d40:	beq	16d64 <flatcc_builder_check_union_field@@Base+0x68>
   16d44:	ldr	r2, [r2, #16]
   16d48:	ldrh	r0, [r0]
   16d4c:	ldrb	r1, [r2, r1]
   16d50:	cmp	r1, #0
   16d54:	beq	16d68 <flatcc_builder_check_union_field@@Base+0x6c>
   16d58:	cmp	r0, #0
   16d5c:	movwne	r0, #1
   16d60:	pop	{fp, pc}
   16d64:	ldrh	r0, [r0]
   16d68:	clz	r0, r0
   16d6c:	lsr	r0, r0, #5
   16d70:	pop	{fp, pc}
   16d74:	ldr	r0, [pc, #24]	; 16d94 <flatcc_builder_check_union_field@@Base+0x98>
   16d78:	ldr	r1, [pc, #24]	; 16d98 <flatcc_builder_check_union_field@@Base+0x9c>
   16d7c:	ldr	r3, [pc, #24]	; 16d9c <flatcc_builder_check_union_field@@Base+0xa0>
   16d80:	movw	r2, #1279	; 0x4ff
   16d84:	add	r0, pc, r0
   16d88:	add	r1, pc, r1
   16d8c:	add	r3, pc, r3
   16d90:	bl	129bc <__assert_fail@plt>
   16d94:	andeq	r7, r0, fp, asr sp
   16d98:	andeq	r7, r0, fp, lsr #10
   16d9c:	ldrdeq	r7, [r0], -r1

00016da0 <flatcc_builder_check_required@@Base>:
   16da0:	push	{fp, lr}
   16da4:	mov	fp, sp
   16da8:	mov	r3, r0
   16dac:	ldr	r0, [r0, #32]
   16db0:	ldrh	r0, [r0, #14]
   16db4:	cmp	r0, #3
   16db8:	bne	16e00 <flatcc_builder_check_required@@Base+0x60>
   16dbc:	ldrh	ip, [r3, #8]
   16dc0:	mov	r0, #0
   16dc4:	cmp	ip, r2
   16dc8:	poplt	{fp, pc}
   16dcc:	cmp	r2, #1
   16dd0:	blt	16df8 <flatcc_builder_check_required@@Base+0x58>
   16dd4:	ldr	ip, [r3, #4]
   16dd8:	ldrh	r3, [r1]
   16ddc:	add	r3, ip, r3, lsl #1
   16de0:	ldrh	r3, [r3]
   16de4:	cmp	r3, #0
   16de8:	beq	16dfc <flatcc_builder_check_required@@Base+0x5c>
   16dec:	add	r1, r1, #2
   16df0:	subs	r2, r2, #1
   16df4:	bne	16dd8 <flatcc_builder_check_required@@Base+0x38>
   16df8:	mov	r0, #1
   16dfc:	pop	{fp, pc}
   16e00:	ldr	r0, [pc, #24]	; 16e20 <flatcc_builder_check_required@@Base+0x80>
   16e04:	ldr	r1, [pc, #24]	; 16e24 <flatcc_builder_check_required@@Base+0x84>
   16e08:	ldr	r3, [pc, #24]	; 16e28 <flatcc_builder_check_required@@Base+0x88>
   16e0c:	movw	r2, #1297	; 0x511
   16e10:	add	r0, pc, r0
   16e14:	add	r1, pc, r1
   16e18:	add	r3, pc, r3
   16e1c:	bl	129bc <__assert_fail@plt>
   16e20:	andeq	r7, r0, pc, asr #25
   16e24:	muleq	r0, pc, r4	; <UNPREDICTABLE>
   16e28:	muleq	r0, r5, sp

00016e2c <flatcc_builder_end_table@@Base>:
   16e2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e30:	add	fp, sp, #24
   16e34:	sub	sp, sp, #16
   16e38:	mov	r4, r0
   16e3c:	ldr	r0, [r0, #32]
   16e40:	ldrh	r0, [r0, #14]
   16e44:	cmp	r0, #3
   16e48:	bne	16fc4 <flatcc_builder_end_table@@Base+0x198>
   16e4c:	ldrh	r0, [r4, #8]
   16e50:	ldr	r5, [r4, #4]
   16e54:	mov	r1, #4
   16e58:	movw	r2, #31153	; 0x79b1
   16e5c:	movt	r2, #40503	; 0x9e37
   16e60:	add	r0, r1, r0, lsl #1
   16e64:	strh	r0, [r5, #-4]!
   16e68:	ldrh	r1, [r4, #20]
   16e6c:	uxth	r6, r0
   16e70:	add	r1, r1, #4
   16e74:	strh	r1, [r5, #2]
   16e78:	uxth	r1, r1
   16e7c:	ldr	r0, [r4, #12]
   16e80:	eor	r0, r0, r6
   16e84:	mul	r0, r0, r2
   16e88:	eor	r0, r0, r1
   16e8c:	mov	r1, r5
   16e90:	mul	r3, r0, r2
   16e94:	mov	r0, r4
   16e98:	mov	r2, r6
   16e9c:	str	r3, [r4, #12]
   16ea0:	bl	1671c <flatcc_builder_create_cached_vtable@@Base>
   16ea4:	cmp	r0, #0
   16ea8:	beq	16fb4 <flatcc_builder_end_table@@Base+0x188>
   16eac:	mov	r7, r0
   16eb0:	mov	r0, r5
   16eb4:	mov	r1, #0
   16eb8:	mov	r2, r6
   16ebc:	mov	r8, #0
   16ec0:	bl	1298c <memset@plt>
   16ec4:	ldr	r5, [r4, #32]
   16ec8:	ldr	r0, [r4, #76]	; 0x4c
   16ecc:	ldr	r6, [r4]
   16ed0:	ldrh	r3, [r4, #130]	; 0x82
   16ed4:	ldr	r1, [r4, #16]
   16ed8:	ldr	r2, [r4, #20]
   16edc:	ldr	r5, [r5, #20]
   16ee0:	add	r0, r0, r5
   16ee4:	sub	r6, r6, r0
   16ee8:	asr	r6, r6, #1
   16eec:	stm	sp, {r0, r6, r7}
   16ef0:	mov	r0, r4
   16ef4:	bl	16a98 <flatcc_builder_create_table@@Base>
   16ef8:	cmp	r0, #0
   16efc:	beq	16fb8 <flatcc_builder_end_table@@Base+0x18c>
   16f00:	ldr	r1, [r4, #32]
   16f04:	mov	r5, r0
   16f08:	ldr	r0, [r4, #16]
   16f0c:	ldr	r2, [r4, #20]
   16f10:	ldr	r3, [r4, #52]	; 0x34
   16f14:	ldr	r7, [r1, #24]
   16f18:	str	r7, [r4, #12]
   16f1c:	ldrh	r7, [r1, #28]
   16f20:	strh	r7, [r4, #8]
   16f24:	ldr	r7, [r1, #16]
   16f28:	add	r3, r3, r7
   16f2c:	str	r3, [r4, #4]
   16f30:	ldr	r3, [r4, #76]	; 0x4c
   16f34:	ldr	r1, [r1, #20]
   16f38:	add	r1, r3, r1
   16f3c:	str	r1, [r4]
   16f40:	mov	r1, #0
   16f44:	bl	1298c <memset@plt>
   16f48:	ldr	r0, [r4, #32]
   16f4c:	ldr	r1, [r4, #60]	; 0x3c
   16f50:	ldr	r2, [r4, #64]	; 0x40
   16f54:	mov	r8, r5
   16f58:	ldr	r3, [r0, #8]
   16f5c:	str	r3, [r4, #20]
   16f60:	ldr	r3, [r0]
   16f64:	str	r3, [r4, #28]
   16f68:	add	r1, r1, r3
   16f6c:	ldr	r7, [r0, #4]
   16f70:	str	r1, [r4, #16]
   16f74:	sub	r1, r2, r3
   16f78:	cmp	r1, r7
   16f7c:	movhi	r1, r7
   16f80:	str	r1, [r4, #24]
   16f84:	ldrh	r1, [r4, #130]	; 0x82
   16f88:	ldrh	r2, [r4, #128]	; 0x80
   16f8c:	cmp	r2, r1
   16f90:	strhcc	r1, [r4, #128]	; 0x80
   16f94:	ldrh	r1, [r0, #12]
   16f98:	sub	r0, r0, #36	; 0x24
   16f9c:	str	r0, [r4, #32]
   16fa0:	strh	r1, [r4, #130]	; 0x82
   16fa4:	ldr	r0, [r4, #156]	; 0x9c
   16fa8:	sub	r0, r0, #1
   16fac:	str	r0, [r4, #156]	; 0x9c
   16fb0:	b	16fb8 <flatcc_builder_end_table@@Base+0x18c>
   16fb4:	mov	r8, #0
   16fb8:	mov	r0, r8
   16fbc:	sub	sp, fp, #24
   16fc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16fc4:	ldr	r0, [pc, #24]	; 16fe4 <flatcc_builder_end_table@@Base+0x1b8>
   16fc8:	ldr	r1, [pc, #24]	; 16fe8 <flatcc_builder_end_table@@Base+0x1bc>
   16fcc:	ldr	r3, [pc, #24]	; 16fec <flatcc_builder_end_table@@Base+0x1c0>
   16fd0:	movw	r2, #1317	; 0x525
   16fd4:	add	r0, pc, r0
   16fd8:	add	r1, pc, r1
   16fdc:	add	r3, pc, r3
   16fe0:	bl	129bc <__assert_fail@plt>
   16fe4:	andeq	r7, r0, fp, lsl #22
   16fe8:	ldrdeq	r7, [r0], -fp
   16fec:	andeq	r7, r0, fp, lsr #24

00016ff0 <flatcc_builder_create_vector@@Base>:
   16ff0:	push	{r4, r5, r6, r7, fp, lr}
   16ff4:	add	fp, sp, #16
   16ff8:	sub	sp, sp, #80	; 0x50
   16ffc:	mov	r7, r0
   17000:	ldr	r0, [fp, #12]
   17004:	cmp	r2, r0
   17008:	bhi	17104 <flatcc_builder_create_vector@@Base+0x114>
   1700c:	ldr	r0, [fp, #8]
   17010:	mov	r4, r2
   17014:	ldrh	r2, [r7, #128]	; 0x80
   17018:	mov	r5, #4
   1701c:	cmp	r0, #4
   17020:	movls	r0, r5
   17024:	cmp	r2, r0
   17028:	sub	r2, fp, #20
   1702c:	strhcc	r0, [r7, #128]	; 0x80
   17030:	str	r4, [fp, #-20]	; 0xffffffec
   17034:	sub	r0, r0, #1
   17038:	ldr	ip, [r7, #136]	; 0x88
   1703c:	str	r5, [sp, #16]
   17040:	str	r2, [sp, #12]
   17044:	mov	r2, #1
   17048:	str	r5, [sp, #4]
   1704c:	str	r2, [sp, #8]
   17050:	mls	r6, r3, r4, ip
   17054:	mul	r3, r3, r4
   17058:	cmp	r3, #0
   1705c:	and	r0, r6, r0
   17060:	movne	r2, #2
   17064:	addne	r5, r3, #4
   17068:	strne	r3, [sp, #24]
   1706c:	strne	r1, [sp, #20]
   17070:	strne	r2, [sp, #8]
   17074:	strne	r5, [sp, #4]
   17078:	cmp	r0, #0
   1707c:	beq	170a8 <flatcc_builder_create_vector@@Base+0xb8>
   17080:	add	r5, r5, r0
   17084:	add	r1, sp, #4
   17088:	str	r5, [sp, #4]
   1708c:	add	r1, r1, r2, lsl #3
   17090:	add	r2, r2, #1
   17094:	ldr	r3, [pc, #168]	; 17144 <flatcc_builder_create_vector@@Base+0x154>
   17098:	ldr	r3, [pc, r3]
   1709c:	str	r3, [r1, #8]
   170a0:	str	r0, [r1, #12]
   170a4:	str	r2, [sp, #8]
   170a8:	cmp	r5, #0
   170ac:	ble	17124 <flatcc_builder_create_vector@@Base+0x134>
   170b0:	ldr	r0, [r7, #36]	; 0x24
   170b4:	ldr	r6, [r7, #44]	; 0x2c
   170b8:	add	r1, sp, #4
   170bc:	sub	r4, ip, r5
   170c0:	str	r5, [sp]
   170c4:	add	r1, r1, #8
   170c8:	mov	r3, r4
   170cc:	blx	r6
   170d0:	cmp	r0, #0
   170d4:	streq	r4, [r7, #136]	; 0x88
   170d8:	moveq	r0, r4
   170dc:	subeq	sp, fp, #16
   170e0:	popeq	{r4, r5, r6, r7, fp, pc}
   170e4:	ldr	r0, [pc, #116]	; 17160 <flatcc_builder_create_vector@@Base+0x170>
   170e8:	ldr	r1, [pc, #116]	; 17164 <flatcc_builder_create_vector@@Base+0x174>
   170ec:	ldr	r3, [pc, #116]	; 17168 <flatcc_builder_create_vector@@Base+0x178>
   170f0:	movw	r2, #651	; 0x28b
   170f4:	add	r0, pc, r0
   170f8:	add	r1, pc, r1
   170fc:	add	r3, pc, r3
   17100:	bl	129bc <__assert_fail@plt>
   17104:	ldr	r0, [pc, #60]	; 17148 <flatcc_builder_create_vector@@Base+0x158>
   17108:	ldr	r1, [pc, #60]	; 1714c <flatcc_builder_create_vector@@Base+0x15c>
   1710c:	ldr	r3, [pc, #60]	; 17150 <flatcc_builder_create_vector@@Base+0x160>
   17110:	movw	r2, #1365	; 0x555
   17114:	add	r0, pc, r0
   17118:	add	r1, pc, r1
   1711c:	add	r3, pc, r3
   17120:	bl	129bc <__assert_fail@plt>
   17124:	ldr	r0, [pc, #40]	; 17154 <flatcc_builder_create_vector@@Base+0x164>
   17128:	ldr	r1, [pc, #40]	; 17158 <flatcc_builder_create_vector@@Base+0x168>
   1712c:	ldr	r3, [pc, #40]	; 1715c <flatcc_builder_create_vector@@Base+0x16c>
   17130:	movw	r2, #647	; 0x287
   17134:	add	r0, pc, r0
   17138:	add	r1, pc, r1
   1713c:	add	r3, pc, r3
   17140:	bl	129bc <__assert_fail@plt>
   17144:			; <UNDEFINED> instruction: 0x00019fb8
   17148:	andeq	r7, r0, r5, lsr fp
   1714c:	muleq	r0, fp, r1
   17150:	andeq	r7, r0, r0, asr #22
   17154:	andeq	r8, r0, ip, lsr r3
   17158:	andeq	r7, r0, fp, ror r1
   1715c:	strdeq	r8, [r0], -r3
   17160:	andeq	r8, r0, ip, ror r3
   17164:			; <UNDEFINED> instruction: 0x000071bb
   17168:	andeq	r8, r0, r3, lsr r2

0001716c <flatcc_builder_end_vector@@Base>:
   1716c:	push	{r4, r5, fp, lr}
   17170:	add	fp, sp, #8
   17174:	sub	sp, sp, #8
   17178:	mov	r4, r0
   1717c:	ldr	r0, [r0, #32]
   17180:	ldrh	r1, [r0, #14]
   17184:	cmp	r1, #4
   17188:	bne	1723c <flatcc_builder_end_vector@@Base+0xd0>
   1718c:	ldr	r3, [r0, #16]
   17190:	ldr	r2, [r0, #20]
   17194:	ldr	r0, [r0, #24]
   17198:	ldr	r1, [r4, #16]
   1719c:	ldrh	r5, [r4, #130]	; 0x82
   171a0:	str	r0, [sp, #4]
   171a4:	mov	r0, r4
   171a8:	str	r5, [sp]
   171ac:	bl	16ff0 <flatcc_builder_create_vector@@Base>
   171b0:	mov	r5, r0
   171b4:	cmp	r0, #0
   171b8:	beq	17230 <flatcc_builder_end_vector@@Base+0xc4>
   171bc:	ldr	r0, [r4, #16]
   171c0:	ldr	r2, [r4, #20]
   171c4:	mov	r1, #0
   171c8:	bl	1298c <memset@plt>
   171cc:	ldr	r0, [r4, #32]
   171d0:	ldr	r1, [r4, #60]	; 0x3c
   171d4:	ldr	ip, [r4, #64]	; 0x40
   171d8:	ldr	r3, [r0, #8]
   171dc:	str	r3, [r4, #20]
   171e0:	ldr	r3, [r0]
   171e4:	str	r3, [r4, #28]
   171e8:	add	r1, r1, r3
   171ec:	ldr	r2, [r0, #4]
   171f0:	str	r1, [r4, #16]
   171f4:	sub	r1, ip, r3
   171f8:	cmp	r1, r2
   171fc:	movhi	r1, r2
   17200:	str	r1, [r4, #24]
   17204:	ldrh	r1, [r4, #130]	; 0x82
   17208:	ldrh	r2, [r4, #128]	; 0x80
   1720c:	cmp	r2, r1
   17210:	strhcc	r1, [r4, #128]	; 0x80
   17214:	ldrh	r1, [r0, #12]
   17218:	sub	r0, r0, #36	; 0x24
   1721c:	str	r0, [r4, #32]
   17220:	strh	r1, [r4, #130]	; 0x82
   17224:	ldr	r0, [r4, #156]	; 0x9c
   17228:	sub	r0, r0, #1
   1722c:	str	r0, [r4, #156]	; 0x9c
   17230:	mov	r0, r5
   17234:	sub	sp, fp, #8
   17238:	pop	{r4, r5, fp, pc}
   1723c:	ldr	r0, [pc, #24]	; 1725c <flatcc_builder_end_vector@@Base+0xf0>
   17240:	ldr	r1, [pc, #24]	; 17260 <flatcc_builder_end_vector@@Base+0xf4>
   17244:	ldr	r3, [pc, #24]	; 17264 <flatcc_builder_end_vector@@Base+0xf8>
   17248:	movw	r2, #1400	; 0x578
   1724c:	add	r0, pc, r0
   17250:	add	r1, pc, r1
   17254:	add	r3, pc, r3
   17258:	bl	129bc <__assert_fail@plt>
   1725c:	andeq	r7, r0, r1, lsr #7
   17260:	andeq	r7, r0, r3, rrx
   17264:	andeq	r7, r0, lr, ror sl

00017268 <flatcc_builder_vector_count@@Base>:
   17268:	ldr	r0, [r0, #32]
   1726c:	ldr	r0, [r0, #20]
   17270:	bx	lr

00017274 <flatcc_builder_vector_edit@@Base>:
   17274:	ldr	r0, [r0, #16]
   17278:	bx	lr

0001727c <flatcc_builder_create_offset_vector_direct@@Base>:
   1727c:	mov	r3, #0
   17280:	b	17284 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17288:	add	fp, sp, #24
   1728c:	sub	sp, sp, #80	; 0x50
   17290:	mov	r6, #0
   17294:	cmn	r2, #-1073741823	; 0xc0000001
   17298:	bhi	173f8 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   1729c:	mov	r8, r0
   172a0:	ldrh	r0, [r0, #128]	; 0x80
   172a4:	mov	r5, #4
   172a8:	sub	r7, fp, #28
   172ac:	mov	r4, #1
   172b0:	cmp	r0, #3
   172b4:	movls	r0, #4
   172b8:	strhls	r0, [r8, #128]	; 0x80
   172bc:	str	r2, [fp, #-28]	; 0xffffffe4
   172c0:	ldr	ip, [r8, #136]	; 0x88
   172c4:	str	r5, [sp, #16]
   172c8:	str	r7, [sp, #12]
   172cc:	mov	r7, #0
   172d0:	str	r5, [sp, #4]
   172d4:	str	r4, [sp, #8]
   172d8:	cmp	r7, r2, lsl #2
   172dc:	and	r6, ip, #3
   172e0:	beq	17300 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   172e4:	lsl	r7, r2, #2
   172e8:	mov	r4, #2
   172ec:	add	r5, r7, #4
   172f0:	str	r7, [sp, #24]
   172f4:	str	r1, [sp, #20]
   172f8:	str	r4, [sp, #8]
   172fc:	str	r5, [sp, #4]
   17300:	cmp	r6, #0
   17304:	beq	17330 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   17308:	add	r5, r5, r6
   1730c:	add	r7, sp, #4
   17310:	str	r5, [sp, #4]
   17314:	add	r7, r7, r4, lsl #3
   17318:	add	r4, r4, #1
   1731c:	ldr	r0, [pc, #352]	; 17484 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   17320:	ldr	r0, [pc, r0]
   17324:	str	r0, [r7, #8]
   17328:	str	r6, [r7, #12]
   1732c:	str	r4, [sp, #8]
   17330:	cmp	r2, #0
   17334:	beq	173c0 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   17338:	sub	r0, r5, ip
   1733c:	mov	r6, r3
   17340:	sub	r0, r0, #4
   17344:	b	1735c <flatcc_builder_create_offset_vector_direct@@Base+0xe0>
   17348:	sub	r0, r0, #4
   1734c:	add	r1, r1, #4
   17350:	add	r6, r6, #1
   17354:	subs	r2, r2, #1
   17358:	beq	173bc <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   1735c:	ldr	r7, [r1]
   17360:	cmp	r7, #0
   17364:	beq	17388 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   17368:	add	r7, r0, r7
   1736c:	cmp	r3, #0
   17370:	str	r7, [r1]
   17374:	beq	17348 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   17378:	ldrb	r7, [r6]
   1737c:	cmp	r7, #0
   17380:	bne	17348 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   17384:	b	17404 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   17388:	cmp	r3, #0
   1738c:	beq	17424 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   17390:	ldrb	r7, [r6]
   17394:	cmp	r7, #0
   17398:	beq	17348 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   1739c:	ldr	r0, [pc, #240]	; 17494 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   173a0:	ldr	r1, [pc, #240]	; 17498 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   173a4:	ldr	r3, [pc, #240]	; 1749c <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   173a8:	movw	r2, #1461	; 0x5b5
   173ac:	add	r0, pc, r0
   173b0:	add	r1, pc, r1
   173b4:	add	r3, pc, r3
   173b8:	bl	129bc <__assert_fail@plt>
   173bc:	ldr	ip, [r8, #136]	; 0x88
   173c0:	cmp	r5, #0
   173c4:	ble	17444 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   173c8:	ldr	r0, [r8, #36]	; 0x24
   173cc:	ldr	r7, [r8, #44]	; 0x2c
   173d0:	add	r1, sp, #4
   173d4:	sub	r6, ip, r5
   173d8:	mov	r2, r4
   173dc:	str	r5, [sp]
   173e0:	add	r1, r1, #8
   173e4:	mov	r3, r6
   173e8:	blx	r7
   173ec:	cmp	r0, #0
   173f0:	bne	17464 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   173f4:	str	r6, [r8, #136]	; 0x88
   173f8:	mov	r0, r6
   173fc:	sub	sp, fp, #24
   17400:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17404:	ldr	r0, [pc, #124]	; 17488 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   17408:	ldr	r1, [pc, #124]	; 1748c <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   1740c:	ldr	r3, [pc, #124]	; 17490 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   17410:	movw	r2, #1457	; 0x5b1
   17414:	add	r0, pc, r0
   17418:	add	r1, pc, r1
   1741c:	add	r3, pc, r3
   17420:	bl	129bc <__assert_fail@plt>
   17424:	ldr	r0, [pc, #116]	; 174a0 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   17428:	ldr	r1, [pc, #116]	; 174a4 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   1742c:	ldr	r3, [pc, #116]	; 174a8 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   17430:	movw	r2, #1463	; 0x5b7
   17434:	add	r0, pc, r0
   17438:	add	r1, pc, r1
   1743c:	add	r3, pc, r3
   17440:	bl	129bc <__assert_fail@plt>
   17444:	ldr	r0, [pc, #96]	; 174ac <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   17448:	ldr	r1, [pc, #96]	; 174b0 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   1744c:	ldr	r3, [pc, #96]	; 174b4 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   17450:	movw	r2, #647	; 0x287
   17454:	add	r0, pc, r0
   17458:	add	r1, pc, r1
   1745c:	add	r3, pc, r3
   17460:	bl	129bc <__assert_fail@plt>
   17464:	ldr	r0, [pc, #76]	; 174b8 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   17468:	ldr	r1, [pc, #76]	; 174bc <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   1746c:	ldr	r3, [pc, #76]	; 174c0 <flatcc_builder_create_offset_vector_direct@@Base+0x244>
   17470:	movw	r2, #651	; 0x28b
   17474:	add	r0, pc, r0
   17478:	add	r1, pc, r1
   1747c:	add	r3, pc, r3
   17480:	bl	129bc <__assert_fail@plt>
   17484:	andeq	r9, r1, r0, lsr sp
   17488:	andeq	r8, r0, r0, asr r0
   1748c:	muleq	r0, fp, lr
   17490:	andeq	r8, r0, r6, asr r0
   17494:	andeq	r8, r0, r9, asr #2
   17498:	andeq	r6, r0, r3, lsl #30
   1749c:	strheq	r8, [r0], -lr
   174a0:	andeq	r8, r0, ip, lsr r0
   174a4:	andeq	r6, r0, fp, ror lr
   174a8:	andeq	r8, r0, r6, lsr r0
   174ac:	andeq	r8, r0, ip, lsl r0
   174b0:	andeq	r6, r0, fp, asr lr
   174b4:	ldrdeq	r7, [r0], -r3
   174b8:	strdeq	r7, [r0], -ip
   174bc:	andeq	r6, r0, fp, lsr lr
   174c0:			; <UNDEFINED> instruction: 0x00007eb3

000174c4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   174c4:	push	{r4, r5, fp, lr}
   174c8:	add	fp, sp, #8
   174cc:	mov	r4, r0
   174d0:	ldr	r0, [r0, #32]
   174d4:	mov	r3, r1
   174d8:	ldrh	r1, [r0, #14]
   174dc:	cmp	r1, #5
   174e0:	bne	1757c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   174e4:	ldr	r2, [r0, #20]
   174e8:	ldr	r1, [r4, #16]
   174ec:	mov	r0, r4
   174f0:	bl	17284 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   174f4:	mov	r5, r0
   174f8:	cmp	r0, #0
   174fc:	beq	17574 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   17500:	ldr	r0, [r4, #16]
   17504:	ldr	r2, [r4, #20]
   17508:	mov	r1, #0
   1750c:	bl	1298c <memset@plt>
   17510:	ldr	r0, [r4, #32]
   17514:	ldr	r1, [r4, #60]	; 0x3c
   17518:	ldr	ip, [r4, #64]	; 0x40
   1751c:	ldr	r3, [r0, #8]
   17520:	str	r3, [r4, #20]
   17524:	ldr	r3, [r0]
   17528:	str	r3, [r4, #28]
   1752c:	add	r1, r1, r3
   17530:	ldr	r2, [r0, #4]
   17534:	str	r1, [r4, #16]
   17538:	sub	r1, ip, r3
   1753c:	cmp	r1, r2
   17540:	movhi	r1, r2
   17544:	str	r1, [r4, #24]
   17548:	ldrh	r1, [r4, #130]	; 0x82
   1754c:	ldrh	r2, [r4, #128]	; 0x80
   17550:	cmp	r2, r1
   17554:	strhcc	r1, [r4, #128]	; 0x80
   17558:	ldrh	r1, [r0, #12]
   1755c:	sub	r0, r0, #36	; 0x24
   17560:	str	r0, [r4, #32]
   17564:	strh	r1, [r4, #130]	; 0x82
   17568:	ldr	r0, [r4, #156]	; 0x9c
   1756c:	sub	r0, r0, #1
   17570:	str	r0, [r4, #156]	; 0x9c
   17574:	mov	r0, r5
   17578:	pop	{r4, r5, fp, pc}
   1757c:	ldr	r0, [pc, #24]	; 1759c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   17580:	ldr	r1, [pc, #24]	; 175a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   17584:	ldr	r3, [pc, #24]	; 175a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   17588:	movw	r2, #1493	; 0x5d5
   1758c:	add	r0, pc, r0
   17590:	add	r1, pc, r1
   17594:	add	r3, pc, r3
   17598:	bl	129bc <__assert_fail@plt>
   1759c:	andeq	r7, r0, sl, asr r1
   175a0:	andeq	r6, r0, r3, lsr #26
   175a4:	andeq	r7, r0, fp, asr #15

000175a8 <flatcc_builder_offset_vector_edit@@Base>:
   175a8:	ldr	r0, [r0, #16]
   175ac:	bx	lr

000175b0 <flatcc_builder_offset_vector_count@@Base>:
   175b0:	ldr	r0, [r0, #32]
   175b4:	ldr	r0, [r0, #20]
   175b8:	bx	lr

000175bc <flatcc_builder_table_add_union@@Base>:
   175bc:	push	{r4, r5, r6, r7, fp, lr}
   175c0:	add	fp, sp, #16
   175c4:	mov	r5, r0
   175c8:	ldr	r0, [r0, #32]
   175cc:	ldrh	r0, [r0, #14]
   175d0:	cmp	r0, #3
   175d4:	bne	1765c <flatcc_builder_table_add_union@@Base+0xa0>
   175d8:	mov	r7, r3
   175dc:	mov	r4, r2
   175e0:	mov	r6, r1
   175e4:	cmp	r3, #0
   175e8:	beq	175f8 <flatcc_builder_table_add_union@@Base+0x3c>
   175ec:	uxtb	r0, r4
   175f0:	cmp	r0, #0
   175f4:	beq	1767c <flatcc_builder_table_add_union@@Base+0xc0>
   175f8:	cmp	r7, #0
   175fc:	beq	17618 <flatcc_builder_table_add_union@@Base+0x5c>
   17600:	mov	r0, r5
   17604:	mov	r1, r6
   17608:	bl	176ec <flatcc_builder_table_add_offset@@Base>
   1760c:	cmp	r0, #0
   17610:	beq	1769c <flatcc_builder_table_add_union@@Base+0xe0>
   17614:	str	r7, [r0]
   17618:	sub	r1, r6, #1
   1761c:	mov	r0, r5
   17620:	mov	r2, #1
   17624:	mov	r3, #1
   17628:	bl	178a0 <flatcc_builder_table_add@@Base>
   1762c:	cmp	r0, #0
   17630:	strbne	r4, [r0]
   17634:	movne	r0, #0
   17638:	popne	{r4, r5, r6, r7, fp, pc}
   1763c:	ldr	r0, [pc, #156]	; 176e0 <flatcc_builder_table_add_union@@Base+0x124>
   17640:	ldr	r1, [pc, #156]	; 176e4 <flatcc_builder_table_add_union@@Base+0x128>
   17644:	ldr	r3, [pc, #156]	; 176e8 <flatcc_builder_table_add_union@@Base+0x12c>
   17648:	movw	r2, #1526	; 0x5f6
   1764c:	add	r0, pc, r0
   17650:	add	r1, pc, r1
   17654:	add	r3, pc, r3
   17658:	bl	129bc <__assert_fail@plt>
   1765c:	ldr	r0, [pc, #88]	; 176bc <flatcc_builder_table_add_union@@Base+0x100>
   17660:	ldr	r1, [pc, #88]	; 176c0 <flatcc_builder_table_add_union@@Base+0x104>
   17664:	ldr	r3, [pc, #88]	; 176c4 <flatcc_builder_table_add_union@@Base+0x108>
   17668:	movw	r2, #1518	; 0x5ee
   1766c:	add	r0, pc, r0
   17670:	add	r1, pc, r1
   17674:	add	r3, pc, r3
   17678:	bl	129bc <__assert_fail@plt>
   1767c:	ldr	r0, [pc, #68]	; 176c8 <flatcc_builder_table_add_union@@Base+0x10c>
   17680:	ldr	r1, [pc, #68]	; 176cc <flatcc_builder_table_add_union@@Base+0x110>
   17684:	ldr	r3, [pc, #68]	; 176d0 <flatcc_builder_table_add_union@@Base+0x114>
   17688:	movw	r2, #1519	; 0x5ef
   1768c:	add	r0, pc, r0
   17690:	add	r1, pc, r1
   17694:	add	r3, pc, r3
   17698:	bl	129bc <__assert_fail@plt>
   1769c:	ldr	r0, [pc, #48]	; 176d4 <flatcc_builder_table_add_union@@Base+0x118>
   176a0:	ldr	r1, [pc, #48]	; 176d8 <flatcc_builder_table_add_union@@Base+0x11c>
   176a4:	ldr	r3, [pc, #48]	; 176dc <flatcc_builder_table_add_union@@Base+0x120>
   176a8:	movw	r2, #1522	; 0x5f2
   176ac:	add	r0, pc, r0
   176b0:	add	r1, pc, r1
   176b4:	add	r3, pc, r3
   176b8:	bl	129bc <__assert_fail@plt>
   176bc:	andeq	r7, r0, r3, ror r4
   176c0:	andeq	r6, r0, r3, asr #24
   176c4:	andeq	r7, r0, sp, asr r7
   176c8:	muleq	r0, sp, r7
   176cc:	andeq	r6, r0, r3, lsr #24
   176d0:	andeq	r7, r0, sp, lsr r7
   176d4:	muleq	r0, pc, r7	; <UNPREDICTABLE>
   176d8:	andeq	r6, r0, r3, lsl #24
   176dc:	andeq	r7, r0, sp, lsl r7
   176e0:	andeq	r7, r0, r9, lsl #16
   176e4:	andeq	r6, r0, r3, ror #24
   176e8:	andeq	r7, r0, sp, ror r7

000176ec <flatcc_builder_table_add_offset@@Base>:
   176ec:	push	{r4, r5, r6, r7, fp, lr}
   176f0:	add	fp, sp, #16
   176f4:	sub	sp, sp, #8
   176f8:	mov	r4, r0
   176fc:	ldr	r0, [r0, #32]
   17700:	ldrh	r0, [r0, #14]
   17704:	cmp	r0, #3
   17708:	bne	1781c <flatcc_builder_table_add_offset@@Base+0x130>
   1770c:	movw	r0, #32765	; 0x7ffd
   17710:	mov	r5, r1
   17714:	cmp	r1, r0
   17718:	bcs	1783c <flatcc_builder_table_add_offset@@Base+0x150>
   1771c:	ldr	r0, [r4, #4]
   17720:	add	r1, r0, r5, lsl #1
   17724:	ldrh	r1, [r1]
   17728:	cmp	r1, #0
   1772c:	bne	1785c <flatcc_builder_table_add_offset@@Base+0x170>
   17730:	ldr	r2, [r4, #20]
   17734:	ldr	r1, [r4, #12]
   17738:	ldr	r3, [r4, #24]
   1773c:	add	r2, r2, #3
   17740:	eor	r1, r1, r5
   17744:	bic	r6, r2, #3
   17748:	movw	r2, #31153	; 0x79b1
   1774c:	movt	r2, #40503	; 0x9e37
   17750:	add	r7, r6, #4
   17754:	cmp	r7, r3
   17758:	str	r7, [r4, #20]
   1775c:	mul	r1, r1, r2
   17760:	eor	r1, r1, #4
   17764:	mul	r1, r1, r2
   17768:	str	r1, [r4, #12]
   1776c:	bls	177e0 <flatcc_builder_table_add_offset@@Base+0xf4>
   17770:	ldr	r1, [r4, #28]
   17774:	ldr	r0, [r4, #40]	; 0x28
   17778:	ldr	ip, [r4, #48]	; 0x30
   1777c:	mov	r2, #1
   17780:	mov	r3, #1
   17784:	str	r2, [sp]
   17788:	add	r2, r1, r7
   1778c:	add	r1, r4, #60	; 0x3c
   17790:	blx	ip
   17794:	mov	r1, r0
   17798:	mov	r0, #0
   1779c:	cmp	r1, #0
   177a0:	beq	177ac <flatcc_builder_table_add_offset@@Base+0xc0>
   177a4:	sub	sp, fp, #16
   177a8:	pop	{r4, r5, r6, r7, fp, pc}
   177ac:	ldr	r0, [r4, #28]
   177b0:	ldr	r2, [r4, #60]	; 0x3c
   177b4:	ldr	r3, [r4, #64]	; 0x40
   177b8:	ldr	r1, [r4, #32]
   177bc:	add	r2, r2, r0
   177c0:	sub	r0, r3, r0
   177c4:	str	r2, [r4, #16]
   177c8:	movw	r2, #65532	; 0xfffc
   177cc:	cmp	r0, r2
   177d0:	movcs	r0, r2
   177d4:	str	r0, [r4, #24]
   177d8:	str	r2, [r1, #4]
   177dc:	ldr	r0, [r4, #4]
   177e0:	uxth	r1, r5
   177e4:	add	r0, r0, r1, lsl #1
   177e8:	strh	r7, [r0]
   177ec:	ldrh	r0, [r4, #8]
   177f0:	cmp	r0, r1
   177f4:	addls	r0, r5, #1
   177f8:	strhls	r0, [r4, #8]
   177fc:	ldr	r0, [r4]
   17800:	add	r1, r0, #2
   17804:	str	r1, [r4]
   17808:	strh	r6, [r0]
   1780c:	ldr	r0, [r4, #16]
   17810:	add	r0, r0, r6
   17814:	sub	sp, fp, #16
   17818:	pop	{r4, r5, r6, r7, fp, pc}
   1781c:	ldr	r0, [pc, #88]	; 1787c <flatcc_builder_table_add_offset@@Base+0x190>
   17820:	ldr	r1, [pc, #88]	; 17880 <flatcc_builder_table_add_offset@@Base+0x194>
   17824:	ldr	r3, [pc, #88]	; 17884 <flatcc_builder_table_add_offset@@Base+0x198>
   17828:	movw	r2, #1811	; 0x713
   1782c:	add	r0, pc, r0
   17830:	add	r1, pc, r1
   17834:	add	r3, pc, r3
   17838:	bl	129bc <__assert_fail@plt>
   1783c:	ldr	r0, [pc, #68]	; 17888 <flatcc_builder_table_add_offset@@Base+0x19c>
   17840:	ldr	r1, [pc, #68]	; 1788c <flatcc_builder_table_add_offset@@Base+0x1a0>
   17844:	ldr	r3, [pc, #68]	; 17890 <flatcc_builder_table_add_offset@@Base+0x1a4>
   17848:	movw	r2, #1812	; 0x714
   1784c:	add	r0, pc, r0
   17850:	add	r1, pc, r1
   17854:	add	r3, pc, r3
   17858:	bl	129bc <__assert_fail@plt>
   1785c:	ldr	r0, [pc, #48]	; 17894 <flatcc_builder_table_add_offset@@Base+0x1a8>
   17860:	ldr	r1, [pc, #48]	; 17898 <flatcc_builder_table_add_offset@@Base+0x1ac>
   17864:	ldr	r3, [pc, #48]	; 1789c <flatcc_builder_table_add_offset@@Base+0x1b0>
   17868:	movw	r2, #1819	; 0x71b
   1786c:	add	r0, pc, r0
   17870:	add	r1, pc, r1
   17874:	add	r3, pc, r3
   17878:	bl	129bc <__assert_fail@plt>
   1787c:			; <UNDEFINED> instruction: 0x000072b3
   17880:	andeq	r6, r0, r3, lsl #21
   17884:	muleq	r0, pc, r9	; <UNPREDICTABLE>
   17888:	andeq	r7, r0, r7, lsl #18
   1788c:	andeq	r6, r0, r3, ror #20
   17890:	andeq	r7, r0, pc, ror r9
   17894:	andeq	r7, r0, r4, lsl #24
   17898:	andeq	r6, r0, r3, asr #20
   1789c:	andeq	r7, r0, pc, asr r9

000178a0 <flatcc_builder_table_add@@Base>:
   178a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178a4:	add	fp, sp, #24
   178a8:	sub	sp, sp, #8
   178ac:	mov	r4, r0
   178b0:	ldr	r0, [r0, #32]
   178b4:	ldrh	r0, [r0, #14]
   178b8:	cmp	r0, #3
   178bc:	bne	179dc <flatcc_builder_table_add@@Base+0x13c>
   178c0:	movw	r0, #32765	; 0x7ffd
   178c4:	mov	r8, r1
   178c8:	cmp	r1, r0
   178cc:	bcs	179fc <flatcc_builder_table_add@@Base+0x15c>
   178d0:	ldrh	r0, [r4, #130]	; 0x82
   178d4:	cmp	r0, r3
   178d8:	strhcc	r3, [r4, #130]	; 0x82
   178dc:	ldr	r0, [r4, #4]
   178e0:	add	r1, r0, r8, lsl #1
   178e4:	ldrh	r1, [r1]
   178e8:	cmp	r1, #0
   178ec:	bne	17a1c <flatcc_builder_table_add@@Base+0x17c>
   178f0:	ldr	r1, [r4, #12]
   178f4:	movw	r7, #31153	; 0x79b1
   178f8:	ldr	r6, [r4, #20]
   178fc:	ldr	r5, [r4, #24]
   17900:	movt	r7, #40503	; 0x9e37
   17904:	eor	r1, r1, r8
   17908:	mul	r1, r1, r7
   1790c:	eor	r1, r1, r2
   17910:	mul	r1, r1, r7
   17914:	str	r1, [r4, #12]
   17918:	add	r1, r3, r6
   1791c:	rsb	r3, r3, #0
   17920:	sub	r1, r1, #1
   17924:	and	r6, r1, r3
   17928:	add	r1, r6, r2
   1792c:	cmp	r1, r5
   17930:	str	r1, [r4, #20]
   17934:	bcc	179ac <flatcc_builder_table_add@@Base+0x10c>
   17938:	ldr	r2, [r4, #28]
   1793c:	ldr	r0, [r4, #40]	; 0x28
   17940:	ldr	r7, [r4, #48]	; 0x30
   17944:	mov	r3, #1
   17948:	str	r3, [sp]
   1794c:	mov	r3, #1
   17950:	add	r1, r1, r2
   17954:	add	r2, r1, #1
   17958:	add	r1, r4, #60	; 0x3c
   1795c:	blx	r7
   17960:	mov	r1, r0
   17964:	mov	r0, #0
   17968:	cmp	r1, #0
   1796c:	beq	17978 <flatcc_builder_table_add@@Base+0xd8>
   17970:	sub	sp, fp, #24
   17974:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17978:	ldr	r0, [r4, #28]
   1797c:	ldr	r2, [r4, #60]	; 0x3c
   17980:	ldr	r3, [r4, #64]	; 0x40
   17984:	ldr	r1, [r4, #32]
   17988:	add	r2, r2, r0
   1798c:	sub	r0, r3, r0
   17990:	str	r2, [r4, #16]
   17994:	movw	r2, #65532	; 0xfffc
   17998:	cmp	r0, r2
   1799c:	movcs	r0, r2
   179a0:	str	r0, [r4, #24]
   179a4:	str	r2, [r1, #4]
   179a8:	ldr	r0, [r4, #4]
   179ac:	uxth	r1, r8
   179b0:	add	r2, r6, #4
   179b4:	add	r0, r0, r1, lsl #1
   179b8:	strh	r2, [r0]
   179bc:	ldrh	r0, [r4, #8]
   179c0:	cmp	r0, r1
   179c4:	addls	r0, r8, #1
   179c8:	strhls	r0, [r4, #8]
   179cc:	ldr	r0, [r4, #16]
   179d0:	add	r0, r0, r6
   179d4:	sub	sp, fp, #24
   179d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179dc:	ldr	r0, [pc, #88]	; 17a3c <flatcc_builder_table_add@@Base+0x19c>
   179e0:	ldr	r1, [pc, #88]	; 17a40 <flatcc_builder_table_add@@Base+0x1a0>
   179e4:	ldr	r3, [pc, #88]	; 17a44 <flatcc_builder_table_add@@Base+0x1a4>
   179e8:	movw	r2, #1773	; 0x6ed
   179ec:	add	r0, pc, r0
   179f0:	add	r1, pc, r1
   179f4:	add	r3, pc, r3
   179f8:	bl	129bc <__assert_fail@plt>
   179fc:	ldr	r0, [pc, #68]	; 17a48 <flatcc_builder_table_add@@Base+0x1a8>
   17a00:	ldr	r1, [pc, #68]	; 17a4c <flatcc_builder_table_add@@Base+0x1ac>
   17a04:	ldr	r3, [pc, #68]	; 17a50 <flatcc_builder_table_add@@Base+0x1b0>
   17a08:	movw	r2, #1774	; 0x6ee
   17a0c:	add	r0, pc, r0
   17a10:	add	r1, pc, r1
   17a14:	add	r3, pc, r3
   17a18:	bl	129bc <__assert_fail@plt>
   17a1c:	ldr	r0, [pc, #48]	; 17a54 <flatcc_builder_table_add@@Base+0x1b4>
   17a20:	ldr	r1, [pc, #48]	; 17a58 <flatcc_builder_table_add@@Base+0x1b8>
   17a24:	ldr	r3, [pc, #48]	; 17a5c <flatcc_builder_table_add@@Base+0x1bc>
   17a28:	movw	r2, #1784	; 0x6f8
   17a2c:	add	r0, pc, r0
   17a30:	add	r1, pc, r1
   17a34:	add	r3, pc, r3
   17a38:	bl	129bc <__assert_fail@plt>
   17a3c:	strdeq	r7, [r0], -r3
   17a40:	andeq	r6, r0, r3, asr #17
   17a44:	andeq	r7, r0, r5, lsl r7
   17a48:	andeq	r7, r0, r7, asr #14
   17a4c:	andeq	r6, r0, r3, lsr #17
   17a50:	strdeq	r7, [r0], -r5
   17a54:	andeq	r7, r0, r4, asr #20
   17a58:	andeq	r6, r0, r3, lsl #17
   17a5c:	ldrdeq	r7, [r0], -r5

00017a60 <flatcc_builder_table_add_union_vector@@Base>:
   17a60:	push	{r4, r5, r6, r7, fp, lr}
   17a64:	add	fp, sp, #16
   17a68:	mov	r6, r0
   17a6c:	ldr	r0, [r0, #32]
   17a70:	ldrh	r0, [r0, #14]
   17a74:	cmp	r0, #3
   17a78:	bne	17ae4 <flatcc_builder_table_add_union_vector@@Base+0x84>
   17a7c:	mov	r5, r1
   17a80:	clz	r1, r3
   17a84:	cmp	r2, #0
   17a88:	mov	r0, r2
   17a8c:	mov	r4, r3
   17a90:	mov	r7, r2
   17a94:	movwne	r0, #1
   17a98:	lsr	r1, r1, #5
   17a9c:	teq	r1, r0
   17aa0:	beq	17b04 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   17aa4:	cmp	r7, #0
   17aa8:	beq	17adc <flatcc_builder_table_add_union_vector@@Base+0x7c>
   17aac:	sub	r1, r5, #1
   17ab0:	mov	r0, r6
   17ab4:	bl	176ec <flatcc_builder_table_add_offset@@Base>
   17ab8:	cmp	r0, #0
   17abc:	beq	17b24 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   17ac0:	str	r7, [r0]
   17ac4:	mov	r0, r6
   17ac8:	mov	r1, r5
   17acc:	bl	176ec <flatcc_builder_table_add_offset@@Base>
   17ad0:	cmp	r0, #0
   17ad4:	beq	17b44 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   17ad8:	str	r4, [r0]
   17adc:	mov	r0, #0
   17ae0:	pop	{r4, r5, r6, r7, fp, pc}
   17ae4:	ldr	r0, [pc, #120]	; 17b64 <flatcc_builder_table_add_union_vector@@Base+0x104>
   17ae8:	ldr	r1, [pc, #120]	; 17b68 <flatcc_builder_table_add_union_vector@@Base+0x108>
   17aec:	ldr	r3, [pc, #120]	; 17b6c <flatcc_builder_table_add_union_vector@@Base+0x10c>
   17af0:	mov	r2, #1536	; 0x600
   17af4:	add	r0, pc, r0
   17af8:	add	r1, pc, r1
   17afc:	add	r3, pc, r3
   17b00:	bl	129bc <__assert_fail@plt>
   17b04:	ldr	r0, [pc, #100]	; 17b70 <flatcc_builder_table_add_union_vector@@Base+0x110>
   17b08:	ldr	r1, [pc, #100]	; 17b74 <flatcc_builder_table_add_union_vector@@Base+0x114>
   17b0c:	ldr	r3, [pc, #100]	; 17b78 <flatcc_builder_table_add_union_vector@@Base+0x118>
   17b10:	movw	r2, #1537	; 0x601
   17b14:	add	r0, pc, r0
   17b18:	add	r1, pc, r1
   17b1c:	add	r3, pc, r3
   17b20:	bl	129bc <__assert_fail@plt>
   17b24:	ldr	r0, [pc, #80]	; 17b7c <flatcc_builder_table_add_union_vector@@Base+0x11c>
   17b28:	ldr	r1, [pc, #80]	; 17b80 <flatcc_builder_table_add_union_vector@@Base+0x120>
   17b2c:	ldr	r3, [pc, #80]	; 17b84 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17b30:	movw	r2, #1540	; 0x604
   17b34:	add	r0, pc, r0
   17b38:	add	r1, pc, r1
   17b3c:	add	r3, pc, r3
   17b40:	bl	129bc <__assert_fail@plt>
   17b44:	ldr	r0, [pc, #60]	; 17b88 <flatcc_builder_table_add_union_vector@@Base+0x128>
   17b48:	ldr	r1, [pc, #60]	; 17b8c <flatcc_builder_table_add_union_vector@@Base+0x12c>
   17b4c:	ldr	r3, [pc, #60]	; 17b90 <flatcc_builder_table_add_union_vector@@Base+0x130>
   17b50:	movw	r2, #1544	; 0x608
   17b54:	add	r0, pc, r0
   17b58:	add	r1, pc, r1
   17b5c:	add	r3, pc, r3
   17b60:	bl	129bc <__assert_fail@plt>
   17b64:	andeq	r6, r0, fp, ror #31
   17b68:			; <UNDEFINED> instruction: 0x000067bb
   17b6c:	andeq	r7, r0, r5, ror #6
   17b70:			; <UNDEFINED> instruction: 0x000073b0
   17b74:	muleq	r0, fp, r7
   17b78:	andeq	r7, r0, r5, asr #6
   17b7c:	andeq	r7, r0, r7, lsl r3
   17b80:	andeq	r6, r0, fp, ror r7
   17b84:	andeq	r7, r0, r5, lsr #6
   17b88:	strdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   17b8c:	andeq	r6, r0, fp, asr r7
   17b90:	andeq	r7, r0, r5, lsl #6

00017b94 <flatcc_builder_create_union_vector@@Base>:
   17b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b98:	add	fp, sp, #28
   17b9c:	sub	sp, sp, #12
   17ba0:	mov	r6, #0
   17ba4:	mov	r4, r1
   17ba8:	mov	r8, r0
   17bac:	mov	sl, r3
   17bb0:	mov	r9, r2
   17bb4:	mov	r7, #4
   17bb8:	str	r6, [r0]
   17bbc:	str	r6, [r0, #4]
   17bc0:	mov	r0, r1
   17bc4:	mov	r1, #4
   17bc8:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   17bcc:	cmp	r0, #0
   17bd0:	beq	17bdc <flatcc_builder_create_union_vector@@Base+0x48>
   17bd4:	sub	sp, fp, #28
   17bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bdc:	ldr	r0, [r4, #32]
   17be0:	mov	r1, #5
   17be4:	str	r7, [r0, #16]
   17be8:	ldr	r0, [r4, #32]
   17bec:	str	r6, [r0, #20]
   17bf0:	ldr	r0, [r4, #32]
   17bf4:	strh	r1, [r0, #14]
   17bf8:	ldr	r1, [r4, #28]
   17bfc:	ldr	r2, [r4, #60]	; 0x3c
   17c00:	ldr	r3, [r4, #64]	; 0x40
   17c04:	add	r2, r2, r1
   17c08:	sub	r1, r3, r1
   17c0c:	str	r2, [r4, #16]
   17c10:	mvn	r2, #3
   17c14:	cmn	r1, #4
   17c18:	movcs	r1, r2
   17c1c:	str	r1, [r4, #24]
   17c20:	str	r2, [r0, #4]
   17c24:	ldr	r1, [r0, #20]
   17c28:	adds	r1, r1, sl
   17c2c:	cmpcc	r1, #1073741824	; 0x40000000
   17c30:	bcc	17c54 <flatcc_builder_create_union_vector@@Base+0xc0>
   17c34:	ldr	r0, [pc, #644]	; 17ec0 <flatcc_builder_create_union_vector@@Base+0x32c>
   17c38:	ldr	r1, [pc, #644]	; 17ec4 <flatcc_builder_create_union_vector@@Base+0x330>
   17c3c:	ldr	r3, [pc, #644]	; 17ec8 <flatcc_builder_create_union_vector@@Base+0x334>
   17c40:	mov	r2, #892	; 0x37c
   17c44:	add	r0, pc, r0
   17c48:	add	r1, pc, r1
   17c4c:	add	r3, pc, r3
   17c50:	bl	129bc <__assert_fail@plt>
   17c54:	str	r1, [r0, #20]
   17c58:	ldr	r7, [r4, #20]
   17c5c:	ldr	r0, [r4, #24]
   17c60:	add	r1, r7, sl, lsl #2
   17c64:	cmp	r1, r0
   17c68:	str	r1, [r4, #20]
   17c6c:	bcs	17c80 <flatcc_builder_create_union_vector@@Base+0xec>
   17c70:	ldr	r1, [r4, #16]
   17c74:	adds	r2, r1, r7
   17c78:	bne	17ce8 <flatcc_builder_create_union_vector@@Base+0x154>
   17c7c:	b	17bd4 <flatcc_builder_create_union_vector@@Base+0x40>
   17c80:	ldr	r2, [r4, #28]
   17c84:	ldr	r0, [r4, #40]	; 0x28
   17c88:	ldr	r6, [r4, #48]	; 0x30
   17c8c:	mov	r3, #1
   17c90:	str	r3, [sp]
   17c94:	mov	r3, #1
   17c98:	add	r1, r1, r2
   17c9c:	add	r2, r1, #1
   17ca0:	add	r1, r4, #60	; 0x3c
   17ca4:	blx	r6
   17ca8:	cmp	r0, #0
   17cac:	bne	17bd4 <flatcc_builder_create_union_vector@@Base+0x40>
   17cb0:	ldr	r0, [r4, #28]
   17cb4:	ldr	r1, [r4, #60]	; 0x3c
   17cb8:	ldr	r3, [r4, #64]	; 0x40
   17cbc:	ldr	r2, [r4, #32]
   17cc0:	add	r1, r1, r0
   17cc4:	sub	r0, r3, r0
   17cc8:	mvn	r3, #3
   17ccc:	cmn	r0, #4
   17cd0:	str	r1, [r4, #16]
   17cd4:	movcs	r0, r3
   17cd8:	str	r0, [r4, #24]
   17cdc:	str	r3, [r2, #4]
   17ce0:	adds	r2, r1, r7
   17ce4:	beq	17bd4 <flatcc_builder_create_union_vector@@Base+0x40>
   17ce8:	ldr	r7, [r4, #20]
   17cec:	add	r2, r7, sl
   17cf0:	cmp	r2, r0
   17cf4:	str	r2, [r4, #20]
   17cf8:	bcc	17d5c <flatcc_builder_create_union_vector@@Base+0x1c8>
   17cfc:	ldr	r1, [r4, #28]
   17d00:	ldr	r0, [r4, #40]	; 0x28
   17d04:	ldr	r6, [r4, #48]	; 0x30
   17d08:	mov	r3, #1
   17d0c:	str	r3, [sp]
   17d10:	mov	r3, #1
   17d14:	add	r1, r2, r1
   17d18:	add	r2, r1, #1
   17d1c:	add	r1, r4, #60	; 0x3c
   17d20:	blx	r6
   17d24:	cmp	r0, #0
   17d28:	bne	17bd4 <flatcc_builder_create_union_vector@@Base+0x40>
   17d2c:	ldr	r0, [r4, #28]
   17d30:	ldr	r1, [r4, #60]	; 0x3c
   17d34:	ldr	r3, [r4, #64]	; 0x40
   17d38:	ldr	r2, [r4, #32]
   17d3c:	add	r1, r1, r0
   17d40:	sub	r0, r3, r0
   17d44:	mvn	r3, #3
   17d48:	cmn	r0, #4
   17d4c:	str	r1, [r4, #16]
   17d50:	movcs	r0, r3
   17d54:	str	r0, [r4, #24]
   17d58:	str	r3, [r2, #4]
   17d5c:	adds	r5, r1, r7
   17d60:	beq	17bd4 <flatcc_builder_create_union_vector@@Base+0x40>
   17d64:	cmp	sl, #0
   17d68:	beq	17df0 <flatcc_builder_create_union_vector@@Base+0x25c>
   17d6c:	and	ip, sl, #1
   17d70:	mov	r0, #0
   17d74:	cmp	sl, #1
   17d78:	str	r5, [sp, #8]
   17d7c:	beq	17dd4 <flatcc_builder_create_union_vector@@Base+0x240>
   17d80:	ldr	r0, [sp, #8]
   17d84:	sub	lr, sl, ip
   17d88:	add	r2, r1, #4
   17d8c:	add	r6, r9, #8
   17d90:	add	r7, r0, #1
   17d94:	mov	r0, #0
   17d98:	ldrb	r3, [r6, #-8]
   17d9c:	add	r5, r7, r0
   17da0:	strb	r3, [r5, #-1]
   17da4:	add	r3, r9, r0, lsl #3
   17da8:	ldr	r5, [r3, #4]
   17dac:	str	r5, [r2, #-4]
   17db0:	ldrb	r5, [r6]
   17db4:	add	r6, r6, #16
   17db8:	strb	r5, [r7, r0]
   17dbc:	add	r0, r0, #2
   17dc0:	ldr	r3, [r3, #12]
   17dc4:	cmp	lr, r0
   17dc8:	str	r3, [r2]
   17dcc:	add	r2, r2, #8
   17dd0:	bne	17d98 <flatcc_builder_create_union_vector@@Base+0x204>
   17dd4:	ldr	r5, [sp, #8]
   17dd8:	cmp	ip, #0
   17ddc:	beq	17df0 <flatcc_builder_create_union_vector@@Base+0x25c>
   17de0:	ldrb	r2, [r9, r0, lsl #3]!
   17de4:	strb	r2, [r5, r0]
   17de8:	ldr	r2, [r9, #4]
   17dec:	str	r2, [r1, r0, lsl #2]
   17df0:	mov	r0, r4
   17df4:	mov	r2, sl
   17df8:	mov	r3, r5
   17dfc:	bl	17284 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17e00:	mov	r7, r0
   17e04:	mov	r6, #0
   17e08:	cmp	r0, #0
   17e0c:	beq	17e38 <flatcc_builder_create_union_vector@@Base+0x2a4>
   17e10:	mvn	r0, #0
   17e14:	mov	r1, #1
   17e18:	mov	r2, sl
   17e1c:	mov	r3, #1
   17e20:	str	r1, [sp]
   17e24:	str	r0, [sp, #4]
   17e28:	mov	r0, r4
   17e2c:	mov	r1, r5
   17e30:	bl	16ff0 <flatcc_builder_create_vector@@Base>
   17e34:	b	17e3c <flatcc_builder_create_union_vector@@Base+0x2a8>
   17e38:	mov	r0, #0
   17e3c:	orr	r1, r6, r7
   17e40:	stm	r8, {r0, r1}
   17e44:	mov	r1, #0
   17e48:	ldr	r0, [r4, #16]
   17e4c:	ldr	r2, [r4, #20]
   17e50:	bl	1298c <memset@plt>
   17e54:	ldr	r0, [r4, #32]
   17e58:	ldr	r1, [r4, #60]	; 0x3c
   17e5c:	ldr	r2, [r4, #64]	; 0x40
   17e60:	ldr	r3, [r0, #8]
   17e64:	str	r3, [r4, #20]
   17e68:	ldr	r3, [r0]
   17e6c:	str	r3, [r4, #28]
   17e70:	add	r1, r1, r3
   17e74:	ldr	r7, [r0, #4]
   17e78:	str	r1, [r4, #16]
   17e7c:	sub	r1, r2, r3
   17e80:	cmp	r1, r7
   17e84:	movhi	r1, r7
   17e88:	str	r1, [r4, #24]
   17e8c:	ldrh	r1, [r4, #130]	; 0x82
   17e90:	ldrh	r2, [r4, #128]	; 0x80
   17e94:	cmp	r2, r1
   17e98:	strhcc	r1, [r4, #128]	; 0x80
   17e9c:	ldrh	r1, [r0, #12]
   17ea0:	sub	r0, r0, #36	; 0x24
   17ea4:	str	r0, [r4, #32]
   17ea8:	strh	r1, [r4, #130]	; 0x82
   17eac:	ldr	r0, [r4, #156]	; 0x9c
   17eb0:	sub	r0, r0, #1
   17eb4:	str	r0, [r4, #156]	; 0x9c
   17eb8:	sub	sp, fp, #28
   17ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ec0:	andeq	r7, r0, r5, lsr r7
   17ec4:	andeq	r6, r0, fp, ror #12
   17ec8:	andeq	r7, r0, r8, asr #14

00017ecc <flatcc_builder_create_union_vector_direct@@Base>:
   17ecc:	push	{r4, r5, r6, r7, fp, lr}
   17ed0:	add	fp, sp, #16
   17ed4:	sub	sp, sp, #8
   17ed8:	ldr	r7, [fp, #8]
   17edc:	mov	r5, r2
   17ee0:	mov	r4, r0
   17ee4:	mov	r0, #0
   17ee8:	mov	r6, r1
   17eec:	str	r0, [r4]
   17ef0:	str	r0, [r4, #4]
   17ef4:	mov	r0, r1
   17ef8:	mov	r1, r3
   17efc:	mov	r3, r5
   17f00:	mov	r2, r7
   17f04:	bl	17284 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17f08:	cmp	r0, #0
   17f0c:	str	r0, [r4, #4]
   17f10:	beq	17f3c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17f14:	mvn	r0, #0
   17f18:	mov	r1, #1
   17f1c:	mov	r2, r7
   17f20:	mov	r3, #1
   17f24:	str	r1, [sp]
   17f28:	str	r0, [sp, #4]
   17f2c:	mov	r0, r6
   17f30:	mov	r1, r5
   17f34:	bl	16ff0 <flatcc_builder_create_vector@@Base>
   17f38:	str	r0, [r4]
   17f3c:	sub	sp, fp, #16
   17f40:	pop	{r4, r5, r6, r7, fp, pc}

00017f44 <flatcc_builder_start_union_vector@@Base>:
   17f44:	push	{r4, sl, fp, lr}
   17f48:	add	fp, sp, #8
   17f4c:	mov	r1, #4
   17f50:	mov	r4, r0
   17f54:	bl	14ee8 <flatcc_builder_start_buffer@@Base+0xc0>
   17f58:	mov	r1, r0
   17f5c:	mvn	r0, #0
   17f60:	cmp	r1, #0
   17f64:	popne	{r4, sl, fp, pc}
   17f68:	ldr	r0, [r4, #32]
   17f6c:	mov	r1, #8
   17f70:	mov	r2, #7
   17f74:	str	r1, [r0, #16]
   17f78:	mov	r0, #0
   17f7c:	ldr	r1, [r4, #32]
   17f80:	str	r0, [r1, #20]
   17f84:	ldr	r1, [r4, #32]
   17f88:	strh	r2, [r1, #14]
   17f8c:	ldr	r2, [r4, #28]
   17f90:	ldr	r3, [r4, #60]	; 0x3c
   17f94:	ldr	ip, [r4, #64]	; 0x40
   17f98:	add	r3, r3, r2
   17f9c:	sub	r2, ip, r2
   17fa0:	str	r3, [r4, #16]
   17fa4:	mvn	r3, #3
   17fa8:	cmn	r2, #4
   17fac:	movcs	r2, r3
   17fb0:	str	r2, [r4, #24]
   17fb4:	str	r3, [r1, #4]
   17fb8:	pop	{r4, sl, fp, pc}

00017fbc <flatcc_builder_end_union_vector@@Base>:
   17fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fc0:	add	fp, sp, #28
   17fc4:	sub	sp, sp, #20
   17fc8:	mov	r4, r0
   17fcc:	mov	r0, #0
   17fd0:	mov	r8, r1
   17fd4:	str	r0, [r4]
   17fd8:	str	r0, [r4, #4]
   17fdc:	ldr	r0, [r1, #32]
   17fe0:	ldrh	r1, [r0, #14]
   17fe4:	cmp	r1, #7
   17fe8:	bne	181ec <flatcc_builder_end_union_vector@@Base+0x230>
   17fec:	ldr	r9, [r0, #20]
   17ff0:	ldr	r5, [r8, #20]
   17ff4:	ldr	r2, [r8, #24]
   17ff8:	add	r0, r9, r9, lsl #2
   17ffc:	add	r1, r5, r0
   18000:	cmp	r1, r2
   18004:	str	r1, [r8, #20]
   18008:	bcs	1801c <flatcc_builder_end_union_vector@@Base+0x60>
   1800c:	ldr	r0, [r8, #16]
   18010:	adds	r1, r0, r5
   18014:	bne	18084 <flatcc_builder_end_union_vector@@Base+0xc8>
   18018:	b	181e4 <flatcc_builder_end_union_vector@@Base+0x228>
   1801c:	ldr	r2, [r8, #28]
   18020:	ldr	r0, [r8, #40]	; 0x28
   18024:	ldr	r7, [r8, #48]	; 0x30
   18028:	mov	r3, #1
   1802c:	str	r3, [sp]
   18030:	mov	r3, #1
   18034:	add	r1, r1, r2
   18038:	add	r2, r1, #1
   1803c:	add	r1, r8, #60	; 0x3c
   18040:	blx	r7
   18044:	cmp	r0, #0
   18048:	bne	181e4 <flatcc_builder_end_union_vector@@Base+0x228>
   1804c:	ldr	r1, [r8, #28]
   18050:	ldr	r0, [r8, #60]	; 0x3c
   18054:	ldr	r3, [r8, #64]	; 0x40
   18058:	ldr	r2, [r8, #32]
   1805c:	add	r0, r0, r1
   18060:	sub	r1, r3, r1
   18064:	mvn	r3, #3
   18068:	cmn	r1, #4
   1806c:	str	r0, [r8, #16]
   18070:	movcs	r1, r3
   18074:	str	r1, [r8, #24]
   18078:	str	r3, [r2, #4]
   1807c:	adds	r1, r0, r5
   18080:	beq	181e4 <flatcc_builder_end_union_vector@@Base+0x228>
   18084:	add	sl, r1, r9, lsl #2
   18088:	cmp	r9, #0
   1808c:	beq	1811c <flatcc_builder_end_union_vector@@Base+0x160>
   18090:	and	r2, r9, #1
   18094:	cmp	r9, #1
   18098:	str	r4, [sp, #12]
   1809c:	str	r2, [sp, #16]
   180a0:	mov	r2, #0
   180a4:	beq	180fc <flatcc_builder_end_union_vector@@Base+0x140>
   180a8:	ldr	r2, [sp, #16]
   180ac:	add	r5, r5, #4
   180b0:	add	r6, r0, #8
   180b4:	sub	lr, r9, r2
   180b8:	mov	r2, #0
   180bc:	ldrb	r7, [r6, #-8]
   180c0:	mov	r4, sl
   180c4:	add	r3, r0, r2, lsl #3
   180c8:	strb	r7, [r4, r2]!
   180cc:	add	r7, r0, r5
   180d0:	add	r2, r2, #2
   180d4:	ldr	ip, [r3, #4]
   180d8:	cmp	lr, r2
   180dc:	str	ip, [r7, #-4]
   180e0:	ldrb	r7, [r6]
   180e4:	add	r6, r6, #16
   180e8:	strb	r7, [r4, #1]
   180ec:	ldr	r3, [r3, #12]
   180f0:	str	r3, [r0, r5]
   180f4:	add	r5, r5, #8
   180f8:	bne	180bc <flatcc_builder_end_union_vector@@Base+0x100>
   180fc:	ldr	r3, [sp, #16]
   18100:	ldr	r4, [sp, #12]
   18104:	cmp	r3, #0
   18108:	beq	1811c <flatcc_builder_end_union_vector@@Base+0x160>
   1810c:	ldrb	r3, [r0, r2, lsl #3]!
   18110:	strb	r3, [sl, r2]
   18114:	ldr	r0, [r0, #4]
   18118:	str	r0, [r1, r2, lsl #2]
   1811c:	mov	r0, r8
   18120:	mov	r2, r9
   18124:	mov	r3, sl
   18128:	bl	17284 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1812c:	mov	r5, r0
   18130:	mov	r6, #0
   18134:	cmp	r0, #0
   18138:	beq	18164 <flatcc_builder_end_union_vector@@Base+0x1a8>
   1813c:	mvn	r0, #0
   18140:	mov	r1, #1
   18144:	mov	r2, r9
   18148:	mov	r3, #1
   1814c:	str	r1, [sp]
   18150:	str	r0, [sp, #4]
   18154:	mov	r0, r8
   18158:	mov	r1, sl
   1815c:	bl	16ff0 <flatcc_builder_create_vector@@Base>
   18160:	b	18168 <flatcc_builder_end_union_vector@@Base+0x1ac>
   18164:	mov	r0, #0
   18168:	orr	r1, r6, r5
   1816c:	stm	r4, {r0, r1}
   18170:	mov	r1, #0
   18174:	ldr	r0, [r8, #16]
   18178:	ldr	r2, [r8, #20]
   1817c:	bl	1298c <memset@plt>
   18180:	ldr	r0, [r8, #32]
   18184:	ldr	r1, [r8, #60]	; 0x3c
   18188:	ldr	r2, [r8, #64]	; 0x40
   1818c:	ldr	r3, [r0, #8]
   18190:	str	r3, [r8, #20]
   18194:	ldr	r3, [r0]
   18198:	str	r3, [r8, #28]
   1819c:	add	r1, r1, r3
   181a0:	ldr	r7, [r0, #4]
   181a4:	str	r1, [r8, #16]
   181a8:	sub	r1, r2, r3
   181ac:	cmp	r1, r7
   181b0:	movhi	r1, r7
   181b4:	str	r1, [r8, #24]
   181b8:	ldrh	r1, [r8, #130]	; 0x82
   181bc:	ldrh	r2, [r8, #128]	; 0x80
   181c0:	cmp	r2, r1
   181c4:	strhcc	r1, [r8, #128]	; 0x80
   181c8:	ldrh	r1, [r0, #12]
   181cc:	sub	r0, r0, #36	; 0x24
   181d0:	str	r0, [r8, #32]
   181d4:	strh	r1, [r8, #130]	; 0x82
   181d8:	ldr	r0, [r8, #156]	; 0x9c
   181dc:	sub	r0, r0, #1
   181e0:	str	r0, [r8, #156]	; 0x9c
   181e4:	sub	sp, fp, #28
   181e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ec:	ldr	r0, [pc, #24]	; 1820c <flatcc_builder_end_union_vector@@Base+0x250>
   181f0:	ldr	r1, [pc, #24]	; 18210 <flatcc_builder_end_union_vector@@Base+0x254>
   181f4:	ldr	r3, [pc, #24]	; 18214 <flatcc_builder_end_union_vector@@Base+0x258>
   181f8:	movw	r2, #1617	; 0x651
   181fc:	add	r0, pc, r0
   18200:	add	r1, pc, r1
   18204:	add	r3, pc, r3
   18208:	bl	129bc <__assert_fail@plt>
   1820c:	strdeq	r6, [r0], -r0
   18210:	strheq	r6, [r0], -r3
   18214:	andeq	r6, r0, sl, lsl sp

00018218 <flatcc_builder_union_vector_count@@Base>:
   18218:	ldr	r0, [r0, #32]
   1821c:	ldr	r0, [r0, #20]
   18220:	bx	lr

00018224 <flatcc_builder_union_vector_edit@@Base>:
   18224:	ldr	r0, [r0, #16]
   18228:	bx	lr

0001822c <flatcc_builder_extend_union_vector@@Base>:
   1822c:	push	{r4, r5, fp, lr}
   18230:	add	fp, sp, #8
   18234:	sub	sp, sp, #8
   18238:	mov	r4, r0
   1823c:	ldr	r0, [r0, #32]
   18240:	ldr	r2, [r0, #20]
   18244:	adds	r2, r2, r1
   18248:	cmpcc	r2, #536870912	; 0x20000000
   1824c:	bcc	18270 <flatcc_builder_extend_union_vector@@Base+0x44>
   18250:	ldr	r0, [pc, #184]	; 18310 <flatcc_builder_extend_union_vector@@Base+0xe4>
   18254:	ldr	r1, [pc, #184]	; 18314 <flatcc_builder_extend_union_vector@@Base+0xe8>
   18258:	ldr	r3, [pc, #184]	; 18318 <flatcc_builder_extend_union_vector@@Base+0xec>
   1825c:	mov	r2, #892	; 0x37c
   18260:	add	r0, pc, r0
   18264:	add	r1, pc, r1
   18268:	add	r3, pc, r3
   1826c:	bl	129bc <__assert_fail@plt>
   18270:	str	r2, [r0, #20]
   18274:	ldr	r5, [r4, #20]
   18278:	ldr	r0, [r4, #24]
   1827c:	add	r1, r5, r1, lsl #3
   18280:	cmp	r1, r0
   18284:	str	r1, [r4, #20]
   18288:	bcs	18294 <flatcc_builder_extend_union_vector@@Base+0x68>
   1828c:	ldr	r0, [r4, #16]
   18290:	b	18304 <flatcc_builder_extend_union_vector@@Base+0xd8>
   18294:	ldr	r2, [r4, #28]
   18298:	ldr	r0, [r4, #40]	; 0x28
   1829c:	ldr	ip, [r4, #48]	; 0x30
   182a0:	mov	r3, #1
   182a4:	str	r3, [sp]
   182a8:	mov	r3, #1
   182ac:	add	r1, r1, r2
   182b0:	add	r2, r1, #1
   182b4:	add	r1, r4, #60	; 0x3c
   182b8:	blx	ip
   182bc:	mov	r1, r0
   182c0:	mov	r0, #0
   182c4:	cmp	r1, #0
   182c8:	beq	182d4 <flatcc_builder_extend_union_vector@@Base+0xa8>
   182cc:	sub	sp, fp, #8
   182d0:	pop	{r4, r5, fp, pc}
   182d4:	ldr	r1, [r4, #28]
   182d8:	ldr	r0, [r4, #60]	; 0x3c
   182dc:	ldr	r3, [r4, #64]	; 0x40
   182e0:	ldr	r2, [r4, #32]
   182e4:	add	r0, r0, r1
   182e8:	sub	r1, r3, r1
   182ec:	mvn	r3, #3
   182f0:	cmn	r1, #4
   182f4:	str	r0, [r4, #16]
   182f8:	movcs	r1, r3
   182fc:	str	r1, [r4, #24]
   18300:	str	r3, [r2, #4]
   18304:	add	r0, r0, r5
   18308:	sub	sp, fp, #8
   1830c:	pop	{r4, r5, fp, pc}
   18310:	andeq	r7, r0, r9, lsl r1
   18314:	andeq	r6, r0, pc, asr #32
   18318:	andeq	r7, r0, ip, lsr #2

0001831c <flatcc_builder_truncate_union_vector@@Base>:
   1831c:	push	{fp, lr}
   18320:	mov	fp, sp
   18324:	ldr	r2, [r0, #32]
   18328:	ldrh	r3, [r2, #14]
   1832c:	cmp	r3, #7
   18330:	bne	18378 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   18334:	ldr	r3, [r2, #20]
   18338:	cmp	r3, r1
   1833c:	bcc	18398 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   18340:	sub	r3, r3, r1
   18344:	str	r3, [r2, #20]
   18348:	ldr	r2, [r0, #32]
   1834c:	ldr	r3, [r0, #20]
   18350:	ldr	ip, [r0, #16]
   18354:	ldr	r2, [r2, #16]
   18358:	mls	r3, r2, r1, r3
   1835c:	mul	r2, r2, r1
   18360:	mov	r1, #0
   18364:	str	r3, [r0, #20]
   18368:	add	r0, ip, r3
   1836c:	bl	1298c <memset@plt>
   18370:	mov	r0, #0
   18374:	pop	{fp, pc}
   18378:	ldr	r0, [pc, #56]	; 183b8 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1837c:	ldr	r1, [pc, #56]	; 183bc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18380:	ldr	r3, [pc, #56]	; 183c0 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   18384:	movw	r2, #1665	; 0x681
   18388:	add	r0, pc, r0
   1838c:	add	r1, pc, r1
   18390:	add	r3, pc, r3
   18394:	bl	129bc <__assert_fail@plt>
   18398:	ldr	r0, [pc, #36]	; 183c4 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   1839c:	ldr	r1, [pc, #36]	; 183c8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   183a0:	ldr	r3, [pc, #36]	; 183cc <flatcc_builder_truncate_union_vector@@Base+0xb0>
   183a4:	movw	r2, #1666	; 0x682
   183a8:	add	r0, pc, r0
   183ac:	add	r1, pc, r1
   183b0:	add	r3, pc, r3
   183b4:	bl	129bc <__assert_fail@plt>
   183b8:	andeq	r6, r0, r4, ror #22
   183bc:	andeq	r5, r0, r7, lsr #30
   183c0:	andeq	r6, r0, r1, ror #23
   183c4:	andeq	r6, r0, r8, lsr #11
   183c8:	andeq	r5, r0, r7, lsl #30
   183cc:	andeq	r6, r0, r1, asr #23

000183d0 <flatcc_builder_union_vector_push@@Base>:
   183d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   183d4:	add	fp, sp, #24
   183d8:	sub	sp, sp, #8
   183dc:	mov	r7, r0
   183e0:	ldr	r0, [r0, #32]
   183e4:	mov	r9, r1
   183e8:	ldrh	r1, [r0, #14]
   183ec:	cmp	r1, #7
   183f0:	bne	184ac <flatcc_builder_union_vector_push@@Base+0xdc>
   183f4:	ldr	r1, [r0, #20]
   183f8:	mov	r6, #0
   183fc:	cmn	r1, #-536870911	; 0xe0000001
   18400:	beq	184a0 <flatcc_builder_union_vector_push@@Base+0xd0>
   18404:	add	r1, r1, #1
   18408:	mov	r8, r2
   1840c:	str	r1, [r0, #20]
   18410:	ldr	r4, [r7, #20]
   18414:	ldr	r0, [r7, #24]
   18418:	add	r1, r4, #8
   1841c:	cmp	r1, r0
   18420:	str	r1, [r7, #20]
   18424:	bcs	18430 <flatcc_builder_union_vector_push@@Base+0x60>
   18428:	ldr	r0, [r7, #16]
   1842c:	b	18490 <flatcc_builder_union_vector_push@@Base+0xc0>
   18430:	ldr	r1, [r7, #28]
   18434:	ldr	r0, [r7, #40]	; 0x28
   18438:	ldr	r5, [r7, #48]	; 0x30
   1843c:	mov	r2, #1
   18440:	mov	r3, #1
   18444:	str	r2, [sp]
   18448:	add	r1, r4, r1
   1844c:	add	r2, r1, #9
   18450:	add	r1, r7, #60	; 0x3c
   18454:	blx	r5
   18458:	cmp	r0, #0
   1845c:	bne	184a0 <flatcc_builder_union_vector_push@@Base+0xd0>
   18460:	ldr	r1, [r7, #28]
   18464:	ldr	r0, [r7, #60]	; 0x3c
   18468:	ldr	r3, [r7, #64]	; 0x40
   1846c:	ldr	r2, [r7, #32]
   18470:	add	r0, r0, r1
   18474:	sub	r1, r3, r1
   18478:	mvn	r3, #3
   1847c:	cmn	r1, #4
   18480:	str	r0, [r7, #16]
   18484:	movcs	r1, r3
   18488:	str	r1, [r7, #24]
   1848c:	str	r3, [r2, #4]
   18490:	adds	r0, r0, r4
   18494:	movne	r6, r0
   18498:	strne	r9, [r0]
   1849c:	strne	r8, [r0, #4]
   184a0:	mov	r0, r6
   184a4:	sub	sp, fp, #24
   184a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184ac:	ldr	r0, [pc, #24]	; 184cc <flatcc_builder_union_vector_push@@Base+0xfc>
   184b0:	ldr	r1, [pc, #24]	; 184d0 <flatcc_builder_union_vector_push@@Base+0x100>
   184b4:	ldr	r3, [pc, #24]	; 184d4 <flatcc_builder_union_vector_push@@Base+0x104>
   184b8:	movw	r2, #1677	; 0x68d
   184bc:	add	r0, pc, r0
   184c0:	add	r1, pc, r1
   184c4:	add	r3, pc, r3
   184c8:	bl	129bc <__assert_fail@plt>
   184cc:	andeq	r6, r0, r0, lsr sl
   184d0:	strdeq	r5, [r0], -r3
   184d4:	strdeq	r6, [r0], -r2

000184d8 <flatcc_builder_append_union_vector@@Base>:
   184d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184dc:	add	fp, sp, #24
   184e0:	sub	sp, sp, #8
   184e4:	mov	r6, r0
   184e8:	ldr	r0, [r0, #32]
   184ec:	mov	r8, r1
   184f0:	ldrh	r1, [r0, #14]
   184f4:	cmp	r1, #7
   184f8:	bne	185e8 <flatcc_builder_append_union_vector@@Base+0x110>
   184fc:	ldr	r1, [r0, #20]
   18500:	mov	r5, r2
   18504:	adds	r1, r1, r2
   18508:	cmpcc	r1, #536870912	; 0x20000000
   1850c:	bcc	18530 <flatcc_builder_append_union_vector@@Base+0x58>
   18510:	ldr	r0, [pc, #252]	; 18614 <flatcc_builder_append_union_vector@@Base+0x13c>
   18514:	ldr	r1, [pc, #252]	; 18618 <flatcc_builder_append_union_vector@@Base+0x140>
   18518:	ldr	r3, [pc, #252]	; 1861c <flatcc_builder_append_union_vector@@Base+0x144>
   1851c:	mov	r2, #892	; 0x37c
   18520:	add	r0, pc, r0
   18524:	add	r1, pc, r1
   18528:	add	r3, pc, r3
   1852c:	bl	129bc <__assert_fail@plt>
   18530:	str	r1, [r0, #20]
   18534:	ldr	r4, [r6, #20]
   18538:	ldr	r0, [r6, #24]
   1853c:	add	r1, r4, r5, lsl #3
   18540:	cmp	r1, r0
   18544:	str	r1, [r6, #20]
   18548:	bcs	1856c <flatcc_builder_append_union_vector@@Base+0x94>
   1854c:	ldr	r0, [r6, #16]
   18550:	adds	r7, r0, r4
   18554:	beq	185d8 <flatcc_builder_append_union_vector@@Base+0x100>
   18558:	lsl	r2, r5, #3
   1855c:	mov	r0, r7
   18560:	mov	r1, r8
   18564:	bl	128fc <memcpy@plt>
   18568:	b	185dc <flatcc_builder_append_union_vector@@Base+0x104>
   1856c:	ldr	r2, [r6, #28]
   18570:	ldr	r0, [r6, #40]	; 0x28
   18574:	ldr	r7, [r6, #48]	; 0x30
   18578:	mov	r3, #1
   1857c:	str	r3, [sp]
   18580:	mov	r3, #1
   18584:	add	r1, r1, r2
   18588:	add	r2, r1, #1
   1858c:	add	r1, r6, #60	; 0x3c
   18590:	blx	r7
   18594:	mov	r7, #0
   18598:	cmp	r0, #0
   1859c:	bne	185dc <flatcc_builder_append_union_vector@@Base+0x104>
   185a0:	ldr	r1, [r6, #28]
   185a4:	ldr	r0, [r6, #60]	; 0x3c
   185a8:	ldr	r3, [r6, #64]	; 0x40
   185ac:	ldr	r2, [r6, #32]
   185b0:	add	r0, r0, r1
   185b4:	sub	r1, r3, r1
   185b8:	mvn	r3, #3
   185bc:	cmn	r1, #4
   185c0:	str	r0, [r6, #16]
   185c4:	movcs	r1, r3
   185c8:	str	r1, [r6, #24]
   185cc:	str	r3, [r2, #4]
   185d0:	adds	r7, r0, r4
   185d4:	bne	18558 <flatcc_builder_append_union_vector@@Base+0x80>
   185d8:	mov	r7, #0
   185dc:	mov	r0, r7
   185e0:	sub	sp, fp, #24
   185e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   185e8:	ldr	r0, [pc, #24]	; 18608 <flatcc_builder_append_union_vector@@Base+0x130>
   185ec:	ldr	r1, [pc, #24]	; 1860c <flatcc_builder_append_union_vector@@Base+0x134>
   185f0:	ldr	r3, [pc, #24]	; 18610 <flatcc_builder_append_union_vector@@Base+0x138>
   185f4:	movw	r2, #1692	; 0x69c
   185f8:	add	r0, pc, r0
   185fc:	add	r1, pc, r1
   18600:	add	r3, pc, r3
   18604:	bl	129bc <__assert_fail@plt>
   18608:	strdeq	r6, [r0], -r4
   1860c:			; <UNDEFINED> instruction: 0x00005cb7
   18610:	andeq	r6, r0, r3, lsr #20
   18614:	andeq	r6, r0, r9, asr lr
   18618:	andeq	r5, r0, pc, lsl #27
   1861c:	andeq	r6, r0, ip, ror #28

00018620 <flatcc_builder_create_string@@Base>:
   18620:	push	{r4, r5, r6, sl, fp, lr}
   18624:	add	fp, sp, #16
   18628:	sub	sp, sp, #80	; 0x50
   1862c:	str	r2, [fp, #-20]	; 0xffffffec
   18630:	mvn	r5, r2
   18634:	mov	r6, r0
   18638:	sub	r3, fp, #20
   1863c:	cmp	r2, #0
   18640:	add	lr, sp, #4
   18644:	ldr	ip, [r0, #136]	; 0x88
   18648:	mov	r0, #4
   1864c:	str	r0, [sp, #16]
   18650:	str	r3, [sp, #12]
   18654:	str	r0, [sp, #4]
   18658:	mov	r3, #1
   1865c:	addne	r0, r2, #4
   18660:	str	r3, [sp, #8]
   18664:	strne	r2, [sp, #24]
   18668:	strne	r1, [sp, #20]
   1866c:	movne	r3, #2
   18670:	strne	r3, [sp, #8]
   18674:	strne	r0, [sp, #4]
   18678:	add	r5, ip, r5
   1867c:	and	r5, r5, #3
   18680:	add	r5, r5, #1
   18684:	add	r1, r0, r5
   18688:	add	r0, lr, r3, lsl #3
   1868c:	str	r1, [sp, #4]
   18690:	cmp	r1, #0
   18694:	ldr	r2, [pc, #132]	; 18720 <flatcc_builder_create_string@@Base+0x100>
   18698:	ldr	r2, [pc, r2]
   1869c:	str	r2, [r0, #8]
   186a0:	add	r2, r3, #1
   186a4:	str	r5, [r0, #12]
   186a8:	str	r2, [sp, #8]
   186ac:	ble	18700 <flatcc_builder_create_string@@Base+0xe0>
   186b0:	ldr	r0, [r6, #36]	; 0x24
   186b4:	ldr	r4, [r6, #44]	; 0x2c
   186b8:	sub	r5, ip, r1
   186bc:	str	r1, [sp]
   186c0:	add	r1, lr, #8
   186c4:	mov	r3, r5
   186c8:	blx	r4
   186cc:	cmp	r0, #0
   186d0:	streq	r5, [r6, #136]	; 0x88
   186d4:	moveq	r0, r5
   186d8:	subeq	sp, fp, #16
   186dc:	popeq	{r4, r5, r6, sl, fp, pc}
   186e0:	ldr	r0, [pc, #72]	; 18730 <flatcc_builder_create_string@@Base+0x110>
   186e4:	ldr	r1, [pc, #72]	; 18734 <flatcc_builder_create_string@@Base+0x114>
   186e8:	ldr	r3, [pc, #72]	; 18738 <flatcc_builder_create_string@@Base+0x118>
   186ec:	movw	r2, #651	; 0x28b
   186f0:	add	r0, pc, r0
   186f4:	add	r1, pc, r1
   186f8:	add	r3, pc, r3
   186fc:	bl	129bc <__assert_fail@plt>
   18700:	ldr	r0, [pc, #28]	; 18724 <flatcc_builder_create_string@@Base+0x104>
   18704:	ldr	r1, [pc, #28]	; 18728 <flatcc_builder_create_string@@Base+0x108>
   18708:	ldr	r3, [pc, #28]	; 1872c <flatcc_builder_create_string@@Base+0x10c>
   1870c:	movw	r2, #647	; 0x287
   18710:	add	r0, pc, r0
   18714:	add	r1, pc, r1
   18718:	add	r3, pc, r3
   1871c:	bl	129bc <__assert_fail@plt>
   18720:			; <UNDEFINED> instruction: 0x000189b8
   18724:	andeq	r6, r0, r0, ror #26
   18728:	muleq	r0, pc, fp	; <UNPREDICTABLE>
   1872c:	andeq	r6, r0, r7, lsl ip
   18730:	andeq	r6, r0, r0, lsl #27
   18734:			; <UNDEFINED> instruction: 0x00005bbf
   18738:	andeq	r6, r0, r7, lsr ip

0001873c <flatcc_builder_create_string_str@@Base>:
   1873c:	push	{r4, r5, fp, lr}
   18740:	add	fp, sp, #8
   18744:	mov	r5, r0
   18748:	mov	r0, r1
   1874c:	mov	r4, r1
   18750:	bl	12968 <strlen@plt>
   18754:	mov	r2, r0
   18758:	mov	r0, r5
   1875c:	mov	r1, r4
   18760:	pop	{r4, r5, fp, lr}
   18764:	b	18620 <flatcc_builder_create_string@@Base>

00018768 <flatcc_builder_create_string_strn@@Base>:
   18768:	push	{r4, r5, r6, sl, fp, lr}
   1876c:	add	fp, sp, #16
   18770:	mov	r6, r0
   18774:	mov	r5, r1
   18778:	mov	r0, r1
   1877c:	mov	r1, #0
   18780:	mov	r4, r2
   18784:	bl	129a4 <memchr@plt>
   18788:	cmp	r0, #0
   1878c:	mov	r1, r5
   18790:	subne	r4, r0, r5
   18794:	mov	r0, r6
   18798:	mov	r2, r4
   1879c:	pop	{r4, r5, r6, sl, fp, lr}
   187a0:	b	18620 <flatcc_builder_create_string@@Base>

000187a4 <flatcc_builder_end_string@@Base>:
   187a4:	push	{r4, r5, fp, lr}
   187a8:	add	fp, sp, #8
   187ac:	mov	r4, r0
   187b0:	ldr	r0, [r0, #32]
   187b4:	ldrh	r1, [r0, #14]
   187b8:	cmp	r1, #6
   187bc:	bne	18864 <flatcc_builder_end_string@@Base+0xc0>
   187c0:	ldr	r2, [r0, #20]
   187c4:	ldr	r0, [r4, #20]
   187c8:	cmp	r2, r0
   187cc:	bne	18884 <flatcc_builder_end_string@@Base+0xe0>
   187d0:	ldr	r1, [r4, #16]
   187d4:	mov	r0, r4
   187d8:	bl	18620 <flatcc_builder_create_string@@Base>
   187dc:	mov	r5, r0
   187e0:	cmp	r0, #0
   187e4:	beq	1885c <flatcc_builder_end_string@@Base+0xb8>
   187e8:	ldr	r0, [r4, #16]
   187ec:	ldr	r2, [r4, #20]
   187f0:	mov	r1, #0
   187f4:	bl	1298c <memset@plt>
   187f8:	ldr	r0, [r4, #32]
   187fc:	ldr	r1, [r4, #60]	; 0x3c
   18800:	ldr	ip, [r4, #64]	; 0x40
   18804:	ldr	r3, [r0, #8]
   18808:	str	r3, [r4, #20]
   1880c:	ldr	r3, [r0]
   18810:	str	r3, [r4, #28]
   18814:	add	r1, r1, r3
   18818:	ldr	r2, [r0, #4]
   1881c:	str	r1, [r4, #16]
   18820:	sub	r1, ip, r3
   18824:	cmp	r1, r2
   18828:	movhi	r1, r2
   1882c:	str	r1, [r4, #24]
   18830:	ldrh	r1, [r4, #130]	; 0x82
   18834:	ldrh	r2, [r4, #128]	; 0x80
   18838:	cmp	r2, r1
   1883c:	strhcc	r1, [r4, #128]	; 0x80
   18840:	ldrh	r1, [r0, #12]
   18844:	sub	r0, r0, #36	; 0x24
   18848:	str	r0, [r4, #32]
   1884c:	strh	r1, [r4, #130]	; 0x82
   18850:	ldr	r0, [r4, #156]	; 0x9c
   18854:	sub	r0, r0, #1
   18858:	str	r0, [r4, #156]	; 0x9c
   1885c:	mov	r0, r5
   18860:	pop	{r4, r5, fp, pc}
   18864:	ldr	r0, [pc, #56]	; 188a4 <flatcc_builder_end_string@@Base+0x100>
   18868:	ldr	r1, [pc, #56]	; 188a8 <flatcc_builder_end_string@@Base+0x104>
   1886c:	ldr	r3, [pc, #56]	; 188ac <flatcc_builder_end_string@@Base+0x108>
   18870:	movw	r2, #1732	; 0x6c4
   18874:	add	r0, pc, r0
   18878:	add	r1, pc, r1
   1887c:	add	r3, pc, r3
   18880:	bl	129bc <__assert_fail@plt>
   18884:	ldr	r0, [pc, #36]	; 188b0 <flatcc_builder_end_string@@Base+0x10c>
   18888:	ldr	r1, [pc, #36]	; 188b4 <flatcc_builder_end_string@@Base+0x110>
   1888c:	ldr	r3, [pc, #36]	; 188b8 <flatcc_builder_end_string@@Base+0x114>
   18890:	movw	r2, #1733	; 0x6c5
   18894:	add	r0, pc, r0
   18898:	add	r1, pc, r1
   1889c:	add	r3, pc, r3
   188a0:	bl	129bc <__assert_fail@plt>
   188a4:	andeq	r5, r0, fp, ror pc
   188a8:	andeq	r5, r0, fp, lsr sl
   188ac:	andeq	r6, r0, r6, lsr #16
   188b0:	andeq	r6, r0, r1, asr r8
   188b4:	andeq	r5, r0, fp, lsl sl
   188b8:	andeq	r6, r0, r6, lsl #16

000188bc <flatcc_builder_string_edit@@Base>:
   188bc:	ldr	r0, [r0, #16]
   188c0:	bx	lr

000188c4 <flatcc_builder_string_len@@Base>:
   188c4:	ldr	r0, [r0, #32]
   188c8:	ldr	r0, [r0, #20]
   188cc:	bx	lr

000188d0 <flatcc_builder_table_edit@@Base>:
   188d0:	push	{fp, lr}
   188d4:	mov	fp, sp
   188d8:	ldr	r2, [r0, #32]
   188dc:	ldrh	r2, [r2, #14]
   188e0:	cmp	r2, #3
   188e4:	ldreq	r2, [r0, #16]
   188e8:	ldreq	r0, [r0, #20]
   188ec:	addeq	r0, r2, r0
   188f0:	subeq	r0, r0, r1
   188f4:	popeq	{fp, pc}
   188f8:	ldr	r0, [pc, #24]	; 18918 <flatcc_builder_table_edit@@Base+0x48>
   188fc:	ldr	r1, [pc, #24]	; 1891c <flatcc_builder_table_edit@@Base+0x4c>
   18900:	ldr	r3, [pc, #24]	; 18920 <flatcc_builder_table_edit@@Base+0x50>
   18904:	movw	r2, #1794	; 0x702
   18908:	add	r0, pc, r0
   1890c:	add	r1, pc, r1
   18910:	add	r3, pc, r3
   18914:	bl	129bc <__assert_fail@plt>
   18918:	ldrdeq	r6, [r0], -r7
   1891c:	andeq	r5, r0, r7, lsr #19
   18920:	andeq	r6, r0, r7, lsl #17

00018924 <flatcc_builder_table_add_copy@@Base>:
   18924:	push	{r4, r5, r6, sl, fp, lr}
   18928:	add	fp, sp, #16
   1892c:	mov	r4, r3
   18930:	ldr	r3, [fp, #8]
   18934:	mov	r5, r2
   18938:	mov	r2, r4
   1893c:	bl	178a0 <flatcc_builder_table_add@@Base>
   18940:	mov	r6, r0
   18944:	cmp	r0, #0
   18948:	beq	1895c <flatcc_builder_table_add_copy@@Base+0x38>
   1894c:	mov	r0, r6
   18950:	mov	r1, r5
   18954:	mov	r2, r4
   18958:	bl	128fc <memcpy@plt>
   1895c:	mov	r0, r6
   18960:	pop	{r4, r5, r6, sl, fp, pc}

00018964 <flatcc_builder_push_buffer_alignment@@Base>:
   18964:	ldrh	r1, [r0, #128]	; 0x80
   18968:	mov	r2, #4
   1896c:	strh	r2, [r0, #128]	; 0x80
   18970:	mov	r0, r1
   18974:	bx	lr

00018978 <flatcc_builder_pop_buffer_alignment@@Base>:
   18978:	ldrh	r2, [r0, #128]	; 0x80
   1897c:	cmp	r2, r1
   18980:	strhcc	r1, [r0, #128]	; 0x80
   18984:	bx	lr

00018988 <flatcc_builder_get_buffer_alignment@@Base>:
   18988:	ldrh	r0, [r0, #128]	; 0x80
   1898c:	bx	lr

00018990 <flatcc_builder_set_vtable_clustering@@Base>:
   18990:	clz	r1, r1
   18994:	lsr	r1, r1, #5
   18998:	str	r1, [r0, #180]	; 0xb4
   1899c:	bx	lr

000189a0 <flatcc_builder_set_block_align@@Base>:
   189a0:	strh	r1, [r0, #132]	; 0x84
   189a4:	bx	lr

000189a8 <flatcc_builder_get_level@@Base>:
   189a8:	ldr	r0, [r0, #156]	; 0x9c
   189ac:	bx	lr

000189b0 <flatcc_builder_set_max_level@@Base>:
   189b0:	str	r1, [r0, #176]	; 0xb0
   189b4:	ldr	r2, [r0, #160]	; 0xa0
   189b8:	cmp	r2, r1
   189bc:	strlt	r1, [r0, #160]	; 0xa0
   189c0:	bx	lr

000189c4 <flatcc_builder_get_buffer_size@@Base>:
   189c4:	ldr	r1, [r0, #136]	; 0x88
   189c8:	ldr	r0, [r0, #140]	; 0x8c
   189cc:	sub	r0, r0, r1
   189d0:	bx	lr

000189d4 <flatcc_builder_get_buffer_start@@Base>:
   189d4:	ldr	r0, [r0, #136]	; 0x88
   189d8:	bx	lr

000189dc <flatcc_builder_get_buffer_end@@Base>:
   189dc:	ldr	r0, [r0, #140]	; 0x8c
   189e0:	bx	lr

000189e4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   189e4:	str	r1, [r0, #172]	; 0xac
   189e8:	bx	lr

000189ec <flatcc_builder_set_identifier@@Base>:
   189ec:	ldr	r2, [pc, #20]	; 18a08 <flatcc_builder_set_identifier@@Base+0x1c>
   189f0:	cmp	r1, #0
   189f4:	ldr	r2, [pc, r2]
   189f8:	movne	r2, r1
   189fc:	ldr	r1, [r2]
   18a00:	str	r1, [r0, #168]	; 0xa8
   18a04:	bx	lr
   18a08:	andeq	r8, r1, ip, asr r6

00018a0c <flatcc_builder_get_type@@Base>:
   18a0c:	ldr	r0, [r0, #32]
   18a10:	cmp	r0, #0
   18a14:	ldrhne	r0, [r0, #14]
   18a18:	moveq	r0, #0
   18a1c:	bx	lr

00018a20 <flatcc_builder_get_type_at@@Base>:
   18a20:	mov	r2, r0
   18a24:	mov	r0, #0
   18a28:	cmp	r1, #1
   18a2c:	blt	18a50 <flatcc_builder_get_type_at@@Base+0x30>
   18a30:	ldr	r3, [r2, #156]	; 0x9c
   18a34:	cmp	r3, r1
   18a38:	bxlt	lr
   18a3c:	sub	r0, r1, r3
   18a40:	ldr	r1, [r2, #32]
   18a44:	add	r0, r0, r0, lsl #3
   18a48:	add	r0, r1, r0, lsl #2
   18a4c:	ldrh	r0, [r0, #14]
   18a50:	bx	lr

00018a54 <flatcc_builder_get_direct_buffer@@Base>:
   18a54:	ldr	r2, [r0, #184]	; 0xb8
   18a58:	cmp	r2, #0
   18a5c:	beq	18a70 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18a60:	ldr	r2, [r0, #188]	; 0xbc
   18a64:	ldr	r3, [r0, #192]	; 0xc0
   18a68:	cmp	r2, r3
   18a6c:	beq	18a88 <flatcc_builder_get_direct_buffer@@Base+0x34>
   18a70:	cmp	r1, #0
   18a74:	moveq	r0, #0
   18a78:	bxeq	lr
   18a7c:	mov	r0, #0
   18a80:	str	r0, [r1]
   18a84:	bx	lr
   18a88:	cmp	r1, #0
   18a8c:	ldrne	r2, [r0, #212]	; 0xd4
   18a90:	strne	r2, [r1]
   18a94:	ldr	r0, [r0, #196]	; 0xc4
   18a98:	bx	lr

00018a9c <flatcc_builder_copy_buffer@@Base>:
   18a9c:	push	{fp, lr}
   18aa0:	mov	fp, sp
   18aa4:	ldr	r3, [r0, #184]	; 0xb8
   18aa8:	cmp	r3, #0
   18aac:	beq	18ae0 <flatcc_builder_copy_buffer@@Base+0x44>
   18ab0:	add	r0, r0, #188	; 0xbc
   18ab4:	bl	191ec <flatcc_emitter_copy_buffer@@Base>
   18ab8:	cmp	r0, #0
   18abc:	popne	{fp, pc}
   18ac0:	ldr	r0, [pc, #32]	; 18ae8 <flatcc_builder_copy_buffer@@Base+0x4c>
   18ac4:	ldr	r1, [pc, #32]	; 18aec <flatcc_builder_copy_buffer@@Base+0x50>
   18ac8:	ldr	r3, [pc, #32]	; 18af0 <flatcc_builder_copy_buffer@@Base+0x54>
   18acc:	movw	r2, #1926	; 0x786
   18ad0:	add	r0, pc, r0
   18ad4:	add	r1, pc, r1
   18ad8:	add	r3, pc, r3
   18adc:	bl	129bc <__assert_fail@plt>
   18ae0:	mov	r0, #0
   18ae4:	pop	{fp, pc}
   18ae8:	andeq	r5, r0, lr, asr #20
   18aec:	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   18af0:	andeq	r6, r0, sl, asr #14

00018af4 <flatcc_builder_finalize_buffer@@Base>:
   18af4:	push	{r4, r5, r6, sl, fp, lr}
   18af8:	add	fp, sp, #16
   18afc:	mov	r5, r0
   18b00:	ldr	r0, [r0, #136]	; 0x88
   18b04:	cmp	r1, #0
   18b08:	ldr	r2, [r5, #140]	; 0x8c
   18b0c:	sub	r4, r2, r0
   18b10:	mov	r0, r4
   18b14:	strne	r4, [r1]
   18b18:	bl	12938 <malloc@plt>
   18b1c:	cmp	r0, #0
   18b20:	beq	18b70 <flatcc_builder_finalize_buffer@@Base+0x7c>
   18b24:	mov	r6, r0
   18b28:	ldr	r0, [r5, #184]	; 0xb8
   18b2c:	cmp	r0, #0
   18b30:	beq	18b90 <flatcc_builder_finalize_buffer@@Base+0x9c>
   18b34:	add	r0, r5, #188	; 0xbc
   18b38:	mov	r1, r6
   18b3c:	mov	r2, r4
   18b40:	bl	191ec <flatcc_emitter_copy_buffer@@Base>
   18b44:	cmp	r0, #0
   18b48:	movne	r0, r6
   18b4c:	popne	{r4, r5, r6, sl, fp, pc}
   18b50:	ldr	r0, [pc, #88]	; 18bb0 <flatcc_builder_finalize_buffer@@Base+0xbc>
   18b54:	ldr	r1, [pc, #88]	; 18bb4 <flatcc_builder_finalize_buffer@@Base+0xc0>
   18b58:	ldr	r3, [pc, #88]	; 18bb8 <flatcc_builder_finalize_buffer@@Base+0xc4>
   18b5c:	movw	r2, #1926	; 0x786
   18b60:	add	r0, pc, r0
   18b64:	add	r1, pc, r1
   18b68:	add	r3, pc, r3
   18b6c:	bl	129bc <__assert_fail@plt>
   18b70:	ldr	r0, [pc, #80]	; 18bc8 <flatcc_builder_finalize_buffer@@Base+0xd4>
   18b74:	ldr	r1, [pc, #80]	; 18bcc <flatcc_builder_finalize_buffer@@Base+0xd8>
   18b78:	ldr	r3, [pc, #80]	; 18bd0 <flatcc_builder_finalize_buffer@@Base+0xdc>
   18b7c:	movw	r2, #1944	; 0x798
   18b80:	add	r0, pc, r0
   18b84:	add	r1, pc, r1
   18b88:	add	r3, pc, r3
   18b8c:	bl	129bc <__assert_fail@plt>
   18b90:	ldr	r0, [pc, #36]	; 18bbc <flatcc_builder_finalize_buffer@@Base+0xc8>
   18b94:	ldr	r1, [pc, #36]	; 18bc0 <flatcc_builder_finalize_buffer@@Base+0xcc>
   18b98:	ldr	r3, [pc, #36]	; 18bc4 <flatcc_builder_finalize_buffer@@Base+0xd0>
   18b9c:	movw	r2, #1948	; 0x79c
   18ba0:	add	r0, pc, r0
   18ba4:	add	r1, pc, r1
   18ba8:	add	r3, pc, r3
   18bac:	bl	129bc <__assert_fail@plt>
   18bb0:			; <UNDEFINED> instruction: 0x000059be
   18bb4:	andeq	r5, r0, pc, asr #14
   18bb8:			; <UNDEFINED> instruction: 0x000066ba
   18bbc:	ldrdeq	r6, [r0], -r0
   18bc0:	andeq	r5, r0, pc, lsl #14
   18bc4:			; <UNDEFINED> instruction: 0x000066bf
   18bc8:	strdeq	r6, [r0], -r0
   18bcc:	andeq	r5, r0, pc, lsr #14
   18bd0:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>

00018bd4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18bd4:	push	{r4, r5, r6, r7, fp, lr}
   18bd8:	add	fp, sp, #16
   18bdc:	sub	sp, sp, #8
   18be0:	mov	r5, r0
   18be4:	mov	r4, r1
   18be8:	ldr	r0, [r0, #136]	; 0x88
   18bec:	ldr	r1, [r5, #140]	; 0x8c
   18bf0:	cmp	r4, #0
   18bf4:	sub	r0, r1, r0
   18bf8:	mov	r1, #0
   18bfc:	strne	r0, [r4]
   18c00:	ldrh	r2, [r5, #128]	; 0x80
   18c04:	str	r1, [sp, #4]
   18c08:	add	r0, r0, r2
   18c0c:	cmp	r2, #4
   18c10:	mov	r1, r2
   18c14:	rsb	r2, r2, #0
   18c18:	sub	r0, r0, #1
   18c1c:	movls	r1, #4
   18c20:	and	r7, r0, r2
   18c24:	add	r0, sp, #4
   18c28:	mov	r2, r7
   18c2c:	bl	12980 <posix_memalign@plt>
   18c30:	ldr	r6, [sp, #4]
   18c34:	cmp	r0, #0
   18c38:	cmpne	r6, #0
   18c3c:	bne	18c8c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18c40:	cmp	r6, #0
   18c44:	beq	18c94 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   18c48:	ldr	r0, [r5, #184]	; 0xb8
   18c4c:	cmp	r0, #0
   18c50:	beq	18c8c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18c54:	add	r0, r5, #188	; 0xbc
   18c58:	mov	r1, r6
   18c5c:	mov	r2, r7
   18c60:	bl	191ec <flatcc_emitter_copy_buffer@@Base>
   18c64:	cmp	r0, #0
   18c68:	bne	18ca0 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18c6c:	ldr	r0, [pc, #56]	; 18cac <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   18c70:	ldr	r1, [pc, #56]	; 18cb0 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   18c74:	ldr	r3, [pc, #56]	; 18cb4 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   18c78:	movw	r2, #1926	; 0x786
   18c7c:	add	r0, pc, r0
   18c80:	add	r1, pc, r1
   18c84:	add	r3, pc, r3
   18c88:	bl	129bc <__assert_fail@plt>
   18c8c:	mov	r0, r6
   18c90:	bl	128f0 <free@plt>
   18c94:	mov	r6, #0
   18c98:	cmp	r4, #0
   18c9c:	strne	r6, [r4]
   18ca0:	mov	r0, r6
   18ca4:	sub	sp, fp, #16
   18ca8:	pop	{r4, r5, r6, r7, fp, pc}
   18cac:	andeq	r5, r0, r2, lsr #17
   18cb0:	andeq	r5, r0, r3, lsr r6
   18cb4:	muleq	r0, lr, r5

00018cb8 <flatcc_builder_aligned_alloc@@Base>:
   18cb8:	push	{fp, lr}
   18cbc:	mov	fp, sp
   18cc0:	sub	sp, sp, #8
   18cc4:	mov	r2, r1
   18cc8:	mov	r1, r0
   18ccc:	mov	r0, #0
   18cd0:	cmp	r1, #4
   18cd4:	str	r0, [sp, #4]
   18cd8:	add	r0, sp, #4
   18cdc:	movls	r1, #4
   18ce0:	bl	12980 <posix_memalign@plt>
   18ce4:	mov	r1, r0
   18ce8:	ldr	r0, [sp, #4]
   18cec:	cmp	r1, #0
   18cf0:	cmpne	r0, #0
   18cf4:	bne	18d00 <flatcc_builder_aligned_alloc@@Base+0x48>
   18cf8:	mov	sp, fp
   18cfc:	pop	{fp, pc}
   18d00:	bl	128f0 <free@plt>
   18d04:	mov	r0, #0
   18d08:	str	r0, [sp, #4]
   18d0c:	mov	sp, fp
   18d10:	pop	{fp, pc}

00018d14 <flatcc_builder_aligned_free@@Base>:
   18d14:	b	128f0 <free@plt>

00018d18 <flatcc_builder_get_emit_context@@Base>:
   18d18:	ldr	r0, [r0, #36]	; 0x24
   18d1c:	bx	lr

00018d20 <flatcc_emitter_recycle_page@@Base>:
   18d20:	ldr	r3, [r0]
   18d24:	mov	r2, r0
   18d28:	mvn	r0, #0
   18d2c:	cmp	r3, r1
   18d30:	beq	18d70 <flatcc_emitter_recycle_page@@Base+0x50>
   18d34:	ldr	r2, [r2, #4]
   18d38:	cmp	r2, r1
   18d3c:	bxeq	lr
   18d40:	ldr	r0, [r1, #2944]	; 0xb80
   18d44:	ldr	r2, [r1, #2948]	; 0xb84
   18d48:	str	r2, [r0, #2948]	; 0xb84
   18d4c:	ldr	r2, [r1, #2948]	; 0xb84
   18d50:	str	r0, [r2, #2944]	; 0xb80
   18d54:	ldr	r0, [r3, #2948]	; 0xb84
   18d58:	str	r3, [r1, #2944]	; 0xb80
   18d5c:	str	r0, [r1, #2948]	; 0xb84
   18d60:	str	r1, [r0, #2944]	; 0xb80
   18d64:	ldr	r0, [r1, #2944]	; 0xb80
   18d68:	str	r1, [r0, #2948]	; 0xb84
   18d6c:	mov	r0, #0
   18d70:	bx	lr

00018d74 <flatcc_emitter_reset@@Base>:
   18d74:	push	{r4, sl, fp, lr}
   18d78:	add	fp, sp, #8
   18d7c:	ldr	r1, [r0]
   18d80:	cmp	r1, #0
   18d84:	beq	18e3c <flatcc_emitter_reset@@Base+0xc8>
   18d88:	mov	r4, r0
   18d8c:	add	r2, r1, #1472	; 0x5c0
   18d90:	mov	r0, #1472	; 0x5c0
   18d94:	mov	r3, #0
   18d98:	stmib	r4, {r1, r2}
   18d9c:	str	r0, [r4, #12]
   18da0:	str	r2, [r4, #16]
   18da4:	str	r0, [r4, #20]
   18da8:	movw	r0, #64064	; 0xfa40
   18dac:	movt	r0, #65535	; 0xffff
   18db0:	str	r0, [r1, #2952]	; 0xb88
   18db4:	ldr	r2, [r4, #32]
   18db8:	ldr	r0, [r4, #24]
   18dbc:	cmp	r2, #0
   18dc0:	moveq	r2, r0
   18dc4:	streq	r0, [r4, #32]
   18dc8:	str	r3, [r4, #24]
   18dcc:	add	r2, r2, r2, lsl #1
   18dd0:	lsr	r2, r2, #2
   18dd4:	add	r0, r2, r0, lsr #2
   18dd8:	str	r0, [r4, #32]
   18ddc:	ldr	r2, [r4, #28]
   18de0:	cmp	r2, r0, lsl #1
   18de4:	bls	18e3c <flatcc_emitter_reset@@Base+0xc8>
   18de8:	mov	r2, r1
   18dec:	ldr	r0, [r2, #2944]!	; 0xb80
   18df0:	cmp	r0, r1
   18df4:	popeq	{r4, sl, fp, pc}
   18df8:	ldr	r3, [r0, #2944]	; 0xb80
   18dfc:	str	r3, [r2]
   18e00:	ldr	r2, [r0, #2944]	; 0xb80
   18e04:	str	r1, [r2, #2948]	; 0xb84
   18e08:	bl	128f0 <free@plt>
   18e0c:	ldr	r0, [r4, #28]
   18e10:	ldr	r1, [r4, #32]
   18e14:	sub	r0, r0, #2944	; 0xb80
   18e18:	cmp	r0, r1, lsl #1
   18e1c:	str	r0, [r4, #28]
   18e20:	bls	18e3c <flatcc_emitter_reset@@Base+0xc8>
   18e24:	ldr	r1, [r4, #4]
   18e28:	ldr	r3, [r4]
   18e2c:	mov	r2, r1
   18e30:	ldr	r0, [r2, #2944]!	; 0xb80
   18e34:	cmp	r0, r3
   18e38:	bne	18df8 <flatcc_emitter_reset@@Base+0x84>
   18e3c:	pop	{r4, sl, fp, pc}

00018e40 <flatcc_emitter_clear@@Base>:
   18e40:	push	{r4, r5, r6, sl, fp, lr}
   18e44:	add	fp, sp, #16
   18e48:	ldr	r5, [r0]
   18e4c:	cmp	r5, #0
   18e50:	beq	18ea0 <flatcc_emitter_clear@@Base+0x60>
   18e54:	mov	r4, r0
   18e58:	ldr	r0, [r5, #2948]	; 0xb84
   18e5c:	mov	r6, #0
   18e60:	str	r6, [r0, #2944]	; 0xb80
   18e64:	ldr	r0, [r5, #2944]	; 0xb80
   18e68:	cmp	r0, #0
   18e6c:	beq	18e80 <flatcc_emitter_clear@@Base+0x40>
   18e70:	mov	r5, r0
   18e74:	ldr	r0, [r0, #2948]	; 0xb84
   18e78:	bl	128f0 <free@plt>
   18e7c:	b	18e64 <flatcc_emitter_clear@@Base+0x24>
   18e80:	mov	r0, r5
   18e84:	bl	128f0 <free@plt>
   18e88:	vmov.i32	q8, #0	; 0x00000000
   18e8c:	add	r0, r4, #16
   18e90:	vst1.32	{d16-d17}, [r0]
   18e94:	mov	r0, #32
   18e98:	vst1.32	{d16-d17}, [r4], r0
   18e9c:	str	r6, [r4]
   18ea0:	pop	{r4, r5, r6, sl, fp, pc}

00018ea4 <flatcc_emitter@@Base>:
   18ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ea8:	add	fp, sp, #28
   18eac:	sub	sp, sp, #4
   18eb0:	mov	r6, r0
   18eb4:	mov	r7, r1
   18eb8:	ldr	r0, [r0, #24]
   18ebc:	ldr	r1, [fp, #8]
   18ec0:	mov	r4, r2
   18ec4:	cmn	r3, #1
   18ec8:	mov	r9, r6
   18ecc:	add	r0, r0, r1
   18ed0:	str	r0, [r6, #24]
   18ed4:	ble	19028 <flatcc_emitter@@Base+0x184>
   18ed8:	ldr	r0, [r9, #20]!
   18edc:	cmp	r0, r1
   18ee0:	bcs	19188 <flatcc_emitter@@Base+0x2e4>
   18ee4:	mov	r8, #0
   18ee8:	cmp	r4, #0
   18eec:	beq	191e0 <flatcc_emitter@@Base+0x33c>
   18ef0:	movw	sl, #64064	; 0xfa40
   18ef4:	movt	sl, #65535	; 0xffff
   18ef8:	ldr	r8, [r7, #4]
   18efc:	cmp	r8, #0
   18f00:	beq	19014 <flatcc_emitter@@Base+0x170>
   18f04:	ldr	r9, [r7]
   18f08:	b	18f44 <flatcc_emitter@@Base+0xa0>
   18f0c:	mov	r5, r8
   18f10:	ldr	r0, [r6, #16]
   18f14:	mov	r1, r9
   18f18:	mov	r2, r5
   18f1c:	bl	128fc <memcpy@plt>
   18f20:	ldr	r0, [r6, #16]
   18f24:	ldr	r1, [r6, #20]
   18f28:	add	r9, r9, r5
   18f2c:	subs	r8, r8, r5
   18f30:	add	r2, r0, r5
   18f34:	sub	r0, r1, r5
   18f38:	str	r2, [r6, #16]
   18f3c:	str	r0, [r6, #20]
   18f40:	beq	19014 <flatcc_emitter@@Base+0x170>
   18f44:	cmp	r8, r0
   18f48:	mov	r5, r8
   18f4c:	bls	18f10 <flatcc_emitter@@Base+0x6c>
   18f50:	mov	r5, r0
   18f54:	cmp	r5, #0
   18f58:	beq	18fa4 <flatcc_emitter@@Base+0x100>
   18f5c:	b	18f10 <flatcc_emitter@@Base+0x6c>
   18f60:	ldr	r1, [r6]
   18f64:	str	r1, [r0, #2944]	; 0xb80
   18f68:	str	r5, [r0, #2948]	; 0xb84
   18f6c:	str	r0, [r1, #2948]	; 0xb84
   18f70:	str	r0, [r5, #2944]	; 0xb80
   18f74:	mov	r5, #2944	; 0xb80
   18f78:	str	r0, [r6, #4]
   18f7c:	str	r0, [r6, #16]
   18f80:	str	r5, [r6, #20]
   18f84:	ldr	r1, [r0, #2948]	; 0xb84
   18f88:	ldr	r1, [r1, #2952]	; 0xb88
   18f8c:	add	r1, r1, #2944	; 0xb80
   18f90:	str	r1, [r0, #2952]	; 0xb88
   18f94:	cmp	r8, r5
   18f98:	bls	18f0c <flatcc_emitter@@Base+0x68>
   18f9c:	cmp	r5, #0
   18fa0:	bne	18f10 <flatcc_emitter@@Base+0x6c>
   18fa4:	ldr	r5, [r6, #4]
   18fa8:	cmp	r5, #0
   18fac:	beq	18fc0 <flatcc_emitter@@Base+0x11c>
   18fb0:	ldr	r0, [r5, #2944]	; 0xb80
   18fb4:	ldr	r1, [r6]
   18fb8:	cmp	r0, r1
   18fbc:	bne	18f74 <flatcc_emitter@@Base+0xd0>
   18fc0:	movw	r0, #2956	; 0xb8c
   18fc4:	bl	12938 <malloc@plt>
   18fc8:	cmp	r0, #0
   18fcc:	beq	19198 <flatcc_emitter@@Base+0x2f4>
   18fd0:	ldr	r1, [r6, #28]
   18fd4:	cmp	r5, #0
   18fd8:	add	r1, r1, #2944	; 0xb80
   18fdc:	str	r1, [r6, #28]
   18fe0:	bne	18f60 <flatcc_emitter@@Base+0xbc>
   18fe4:	add	r1, r0, #1472	; 0x5c0
   18fe8:	mov	r5, #1472	; 0x5c0
   18fec:	str	r0, [r6]
   18ff0:	stmib	r6, {r0, r1, r5}
   18ff4:	str	r1, [r6, #16]
   18ff8:	str	r5, [r6, #20]
   18ffc:	str	r0, [r0, #2944]	; 0xb80
   19000:	str	r0, [r0, #2948]	; 0xb84
   19004:	str	sl, [r0, #2952]	; 0xb88
   19008:	cmp	r8, r5
   1900c:	bhi	18f9c <flatcc_emitter@@Base+0xf8>
   19010:	b	18f0c <flatcc_emitter@@Base+0x68>
   19014:	subs	r4, r4, #1
   19018:	add	r7, r7, #8
   1901c:	bne	18ef8 <flatcc_emitter@@Base+0x54>
   19020:	mov	r8, #0
   19024:	b	191e0 <flatcc_emitter@@Base+0x33c>
   19028:	ldr	r0, [r9, #12]!
   1902c:	cmp	r0, r1
   19030:	bcs	191a0 <flatcc_emitter@@Base+0x2fc>
   19034:	mov	r8, #0
   19038:	cmp	r4, #0
   1903c:	beq	191e0 <flatcc_emitter@@Base+0x33c>
   19040:	add	r0, r7, r4, lsl #3
   19044:	ldr	sl, [r0, #-4]
   19048:	sub	r1, r0, #8
   1904c:	str	r1, [sp]
   19050:	cmp	sl, #0
   19054:	beq	19178 <flatcc_emitter@@Base+0x2d4>
   19058:	ldr	r0, [sp]
   1905c:	ldr	r0, [r0]
   19060:	add	r7, r0, sl
   19064:	ldr	r1, [r9]
   19068:	cmp	sl, r1
   1906c:	bhi	190ac <flatcc_emitter@@Base+0x208>
   19070:	b	19148 <flatcc_emitter@@Base+0x2a4>
   19074:	ldr	r1, [r5, #2952]	; 0xb88
   19078:	sub	r1, r1, #2944	; 0xb80
   1907c:	str	r1, [r0, #2952]	; 0xb88
   19080:	mov	r1, #2944	; 0xb80
   19084:	add	r2, r0, #2944	; 0xb80
   19088:	str	r0, [r6]
   1908c:	str	r2, [r6, #8]
   19090:	str	r1, [r6, #12]
   19094:	ldr	r2, [r0, #2944]	; 0xb80
   19098:	ldr	r2, [r2, #2952]	; 0xb88
   1909c:	sub	r2, r2, #2944	; 0xb80
   190a0:	str	r2, [r0, #2952]	; 0xb88
   190a4:	cmp	sl, r1
   190a8:	bls	19148 <flatcc_emitter@@Base+0x2a4>
   190ac:	cmp	r1, #0
   190b0:	mov	r5, r1
   190b4:	bne	1914c <flatcc_emitter@@Base+0x2a8>
   190b8:	ldr	r5, [r6]
   190bc:	cmp	r5, #0
   190c0:	beq	190d4 <flatcc_emitter@@Base+0x230>
   190c4:	ldr	r0, [r5, #2948]	; 0xb84
   190c8:	ldr	r1, [r6, #4]
   190cc:	cmp	r0, r1
   190d0:	bne	19074 <flatcc_emitter@@Base+0x1d0>
   190d4:	movw	r0, #2956	; 0xb8c
   190d8:	bl	12938 <malloc@plt>
   190dc:	cmp	r0, #0
   190e0:	beq	19198 <flatcc_emitter@@Base+0x2f4>
   190e4:	ldr	r1, [r6, #28]
   190e8:	cmp	r5, #0
   190ec:	add	r1, r1, #2944	; 0xb80
   190f0:	str	r1, [r6, #28]
   190f4:	beq	19110 <flatcc_emitter@@Base+0x26c>
   190f8:	ldr	r1, [r6, #4]
   190fc:	str	r5, [r0, #2944]	; 0xb80
   19100:	str	r1, [r0, #2948]	; 0xb84
   19104:	str	r0, [r5, #2948]	; 0xb84
   19108:	str	r0, [r1, #2944]	; 0xb80
   1910c:	b	19080 <flatcc_emitter@@Base+0x1dc>
   19110:	add	r2, r0, #1472	; 0x5c0
   19114:	mov	r1, #1472	; 0x5c0
   19118:	str	r0, [r6]
   1911c:	stmib	r6, {r0, r2}
   19120:	str	r1, [r6, #12]
   19124:	str	r2, [r6, #16]
   19128:	movw	r2, #64064	; 0xfa40
   1912c:	str	r1, [r6, #20]
   19130:	str	r0, [r0, #2944]	; 0xb80
   19134:	str	r0, [r0, #2948]	; 0xb84
   19138:	movt	r2, #65535	; 0xffff
   1913c:	str	r2, [r0, #2952]	; 0xb88
   19140:	cmp	sl, r1
   19144:	bhi	190ac <flatcc_emitter@@Base+0x208>
   19148:	mov	r5, sl
   1914c:	sub	r0, r1, r5
   19150:	sub	r7, r7, r5
   19154:	mov	r2, r5
   19158:	str	r0, [r6, #12]
   1915c:	mov	r1, r7
   19160:	ldr	r0, [r6, #8]
   19164:	sub	r0, r0, r5
   19168:	str	r0, [r6, #8]
   1916c:	bl	128fc <memcpy@plt>
   19170:	subs	sl, sl, r5
   19174:	bne	19064 <flatcc_emitter@@Base+0x1c0>
   19178:	ldr	r0, [sp]
   1917c:	subs	r4, r4, #1
   19180:	bne	19044 <flatcc_emitter@@Base+0x1a0>
   19184:	b	191e0 <flatcc_emitter@@Base+0x33c>
   19188:	ldr	r5, [r6, #16]
   1918c:	add	r2, r5, r1
   19190:	str	r2, [r6, #16]
   19194:	b	191ac <flatcc_emitter@@Base+0x308>
   19198:	mvn	r8, #0
   1919c:	b	191e0 <flatcc_emitter@@Base+0x33c>
   191a0:	ldr	r2, [r6, #8]
   191a4:	sub	r5, r2, r1
   191a8:	str	r5, [r6, #8]
   191ac:	sub	r0, r0, r1
   191b0:	mov	r8, #0
   191b4:	cmp	r4, #0
   191b8:	str	r0, [r9]
   191bc:	beq	191e0 <flatcc_emitter@@Base+0x33c>
   191c0:	ldm	r7, {r1, r2}
   191c4:	mov	r0, r5
   191c8:	bl	128fc <memcpy@plt>
   191cc:	ldr	r0, [r7, #4]
   191d0:	add	r7, r7, #8
   191d4:	subs	r4, r4, #1
   191d8:	add	r5, r5, r0
   191dc:	bne	191c0 <flatcc_emitter@@Base+0x31c>
   191e0:	mov	r0, r8
   191e4:	sub	sp, fp, #28
   191e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000191ec <flatcc_emitter_copy_buffer@@Base>:
   191ec:	push	{r4, r5, r6, sl, fp, lr}
   191f0:	add	fp, sp, #16
   191f4:	mov	r3, r2
   191f8:	ldr	r2, [r0, #24]
   191fc:	mov	r5, #0
   19200:	cmp	r2, r3
   19204:	bhi	1928c <flatcc_emitter_copy_buffer@@Base+0xa0>
   19208:	mov	r4, r0
   1920c:	ldr	r0, [r0]
   19210:	cmp	r0, #0
   19214:	beq	1928c <flatcc_emitter_copy_buffer@@Base+0xa0>
   19218:	mov	r6, r1
   1921c:	ldr	r1, [r4, #4]
   19220:	cmp	r0, r1
   19224:	beq	19294 <flatcc_emitter_copy_buffer@@Base+0xa8>
   19228:	ldr	r0, [r4, #12]
   1922c:	ldr	r1, [r4, #8]
   19230:	rsb	r5, r0, #2944	; 0xb80
   19234:	mov	r0, r6
   19238:	mov	r2, r5
   1923c:	bl	128fc <memcpy@plt>
   19240:	ldm	r4, {r0, r1}
   19244:	add	r5, r6, r5
   19248:	ldr	r6, [r0, #2944]	; 0xb80
   1924c:	cmp	r6, r1
   19250:	beq	19278 <flatcc_emitter_copy_buffer@@Base+0x8c>
   19254:	mov	r0, r5
   19258:	mov	r1, r6
   1925c:	mov	r2, #2944	; 0xb80
   19260:	bl	128fc <memcpy@plt>
   19264:	ldr	r6, [r6, #2944]	; 0xb80
   19268:	ldr	r0, [r4, #4]
   1926c:	add	r5, r5, #2944	; 0xb80
   19270:	cmp	r6, r0
   19274:	bne	19254 <flatcc_emitter_copy_buffer@@Base+0x68>
   19278:	ldr	r0, [r4, #20]
   1927c:	mov	r1, r6
   19280:	rsb	r2, r0, #2944	; 0xb80
   19284:	mov	r0, r5
   19288:	bl	128fc <memcpy@plt>
   1928c:	mov	r0, r5
   19290:	pop	{r4, r5, r6, sl, fp, pc}
   19294:	ldr	r1, [r4, #8]
   19298:	mov	r0, r6
   1929c:	bl	128fc <memcpy@plt>
   192a0:	mov	r0, r6
   192a4:	pop	{r4, r5, r6, sl, fp, pc}

000192a8 <grisu3_diy_fp_encode_double@@Base>:
   192a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192ac:	add	fp, sp, #28
   192b0:	sub	sp, sp, #12
   192b4:	ldr	lr, [fp, #8]
   192b8:	orr	r7, r0, r1
   192bc:	cmp	lr, #0
   192c0:	movwne	lr, #1
   192c4:	cmp	r7, #0
   192c8:	beq	196b4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   192cc:	mov	ip, #0
   192d0:	cmp	ip, r1, lsr #22
   192d4:	bne	192f4 <grisu3_diy_fp_encode_double@@Base+0x4c>
   192d8:	mov	ip, #0
   192dc:	lsl	r1, r1, #10
   192e0:	sub	ip, ip, #10
   192e4:	orr	r1, r1, r0, lsr #22
   192e8:	lsl	r0, r0, #10
   192ec:	cmp	r1, #4194304	; 0x400000
   192f0:	bcc	192dc <grisu3_diy_fp_encode_double@@Base+0x34>
   192f4:	sub	r5, r2, r3
   192f8:	mvn	r2, #0
   192fc:	cmp	r1, #0
   19300:	bmi	194b4 <grisu3_diy_fp_encode_double@@Base+0x20c>
   19304:	lsl	r1, r1, #1
   19308:	lsl	r4, r0, #1
   1930c:	sub	ip, ip, #1
   19310:	orr	r1, r1, r0, lsr #31
   19314:	subs	r0, r2, r0, lsl #1
   19318:	sbcs	r0, r2, r1
   1931c:	mov	r0, r4
   19320:	blt	19304 <grisu3_diy_fp_encode_double@@Base+0x5c>
   19324:	cmn	r5, #348	; 0x15c
   19328:	blt	194c0 <grisu3_diy_fp_encode_double@@Base+0x218>
   1932c:	cmp	r5, #348	; 0x15c
   19330:	bge	196d4 <grisu3_diy_fp_encode_double@@Base+0x42c>
   19334:	add	r0, r5, #348	; 0x15c
   19338:	ldr	r9, [pc, #1044]	; 19754 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   1933c:	asr	r6, r0, #31
   19340:	add	r0, r0, r6, lsr #29
   19344:	mvn	r6, #14
   19348:	and	r6, r6, r0, lsl #1
   1934c:	add	r9, pc, r9
   19350:	ldr	r8, [r9, r6]!
   19354:	ldrsh	r7, [r9, #10]
   19358:	cmp	r5, r7
   1935c:	blt	196f4 <grisu3_diy_fp_encode_double@@Base+0x44c>
   19360:	add	r6, r7, #8
   19364:	cmp	r6, r5
   19368:	ble	19714 <grisu3_diy_fp_encode_double@@Base+0x46c>
   1936c:	lsl	r6, lr, #2
   19370:	rsb	r0, ip, #0
   19374:	cmp	r5, r7
   19378:	lsl	sl, r6, r0
   1937c:	beq	19404 <grisu3_diy_fp_encode_double@@Base+0x15c>
   19380:	mvn	r0, r7
   19384:	str	sl, [sp, #4]
   19388:	str	r3, [sp, #8]
   1938c:	add	r5, r5, r0
   19390:	cmp	r5, #7
   19394:	bcs	19734 <grisu3_diy_fp_encode_double@@Base+0x48c>
   19398:	ldr	r0, [pc, #952]	; 19758 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1939c:	add	r0, pc, r0
   193a0:	ldr	r6, [r0, r5, lsl #4]!
   193a4:	ldr	lr, [r0, #4]
   193a8:	ldr	r0, [r0, #8]
   193ac:	umull	sl, r7, r6, r1
   193b0:	str	r0, [sp]
   193b4:	umull	r3, r0, lr, r4
   193b8:	umaal	r7, r0, lr, r1
   193bc:	umull	r1, r6, r6, r4
   193c0:	mov	r1, #0
   193c4:	adds	r6, sl, r6
   193c8:	ldr	sl, [sp, #4]
   193cc:	adc	r1, r1, #0
   193d0:	adds	r3, r6, r3
   193d4:	adc	r1, r1, #0
   193d8:	adds	r3, r3, #-2147483648	; 0x80000000
   193dc:	adcs	r4, r7, r1
   193e0:	adc	r1, r0, #0
   193e4:	ldr	r0, [sp, #8]
   193e8:	add	r0, r0, r5
   193ec:	add	r0, r0, #1
   193f0:	cmp	r0, #19
   193f4:	ldr	r0, [sp]
   193f8:	addgt	sl, sl, #4
   193fc:	add	r0, ip, r0
   19400:	add	ip, r0, #64	; 0x40
   19404:	ldr	r0, [r9, #4]
   19408:	umull	r3, r7, r4, r8
   1940c:	umull	r3, r5, r1, r8
   19410:	mov	lr, #0
   19414:	umull	r4, r6, r4, r0
   19418:	adds	r3, r3, r7
   1941c:	adc	r7, lr, #0
   19420:	umaal	r5, r6, r1, r0
   19424:	mov	r1, #9
   19428:	adds	r3, r3, r4
   1942c:	adc	r4, r7, #0
   19430:	adds	r0, r3, #-2147483648	; 0x80000000
   19434:	adcs	r4, r5, r4
   19438:	adc	r3, r6, #0
   1943c:	cmp	sl, #0
   19440:	orr	r0, r4, r3
   19444:	movweq	r1, #8
   19448:	cmp	r0, #0
   1944c:	beq	196b4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   19450:	ldrsh	r0, [r9, #8]
   19454:	cmp	lr, r3, lsr #22
   19458:	add	r0, r0, ip
   1945c:	add	r5, r0, #64	; 0x40
   19460:	mov	r0, r5
   19464:	bne	19480 <grisu3_diy_fp_encode_double@@Base+0x1d8>
   19468:	lsl	r3, r3, #10
   1946c:	sub	r0, r0, #10
   19470:	orr	r3, r3, r4, lsr #22
   19474:	lsl	r4, r4, #10
   19478:	cmp	r3, #4194304	; 0x400000
   1947c:	bcc	19468 <grisu3_diy_fp_encode_double@@Base+0x1c0>
   19480:	add	r7, r1, sl
   19484:	subs	r1, r2, r4
   19488:	sbcs	r1, r2, r3
   1948c:	bge	194e0 <grisu3_diy_fp_encode_double@@Base+0x238>
   19490:	lsl	r1, r3, #1
   19494:	subs	r6, r2, r4, lsl #1
   19498:	sub	r0, r0, #1
   1949c:	orr	r3, r1, r4, lsr #31
   194a0:	lsl	r1, r4, #1
   194a4:	mov	r4, r1
   194a8:	sbcs	r6, r2, r3
   194ac:	blt	19490 <grisu3_diy_fp_encode_double@@Base+0x1e8>
   194b0:	b	194e4 <grisu3_diy_fp_encode_double@@Base+0x23c>
   194b4:	mov	r4, r0
   194b8:	cmn	r5, #348	; 0x15c
   194bc:	bge	1932c <grisu3_diy_fp_encode_double@@Base+0x84>
   194c0:	ldr	r0, [pc, #660]	; 1975c <grisu3_diy_fp_encode_double@@Base+0x4b4>
   194c4:	ldr	r1, [pc, #660]	; 19760 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   194c8:	ldr	r3, [pc, #660]	; 19764 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   194cc:	mov	r2, #80	; 0x50
   194d0:	add	r0, pc, r0
   194d4:	add	r1, pc, r1
   194d8:	add	r3, pc, r3
   194dc:	bl	129bc <__assert_fail@plt>
   194e0:	mov	r1, r4
   194e4:	movw	lr, #64462	; 0xfbce
   194e8:	sub	r2, r5, r0
   194ec:	mov	r5, #0
   194f0:	movt	lr, #65535	; 0xffff
   194f4:	lsl	ip, r7, r2
   194f8:	add	r2, r0, #64	; 0x40
   194fc:	add	r4, lr, #63	; 0x3f
   19500:	cmp	r2, r4
   19504:	bgt	19554 <grisu3_diy_fp_encode_double@@Base+0x2ac>
   19508:	mvn	r4, #1072	; 0x430
   1950c:	mov	r5, #64	; 0x40
   19510:	cmp	r2, r4
   19514:	blt	19524 <grisu3_diy_fp_encode_double@@Base+0x27c>
   19518:	sub	r5, lr, r0
   1951c:	cmp	r5, #61	; 0x3d
   19520:	blt	19554 <grisu3_diy_fp_encode_double@@Base+0x2ac>
   19524:	sub	r2, r5, #62	; 0x3e
   19528:	mov	r4, #9
   1952c:	add	ip, r4, ip, asr r2
   19530:	lsr	r1, r1, r2
   19534:	rsb	r4, r5, #94	; 0x5e
   19538:	add	r0, r2, r0
   1953c:	orr	r1, r1, r3, lsl r4
   19540:	subs	r4, r5, #94	; 0x5e
   19544:	mov	r5, #62	; 0x3e
   19548:	lsrpl	r1, r3, r4
   1954c:	lsr	r3, r3, r2
   19550:	movwpl	r3, #0
   19554:	lsr	r2, r1, r5
   19558:	rsb	r4, r5, #32
   1955c:	lsr	r6, r3, r5
   19560:	add	r0, r0, r5
   19564:	orr	r2, r2, r3, lsl r4
   19568:	subs	r4, r5, #32
   1956c:	lsrpl	r2, r3, r4
   19570:	sub	r3, r5, #1
   19574:	mov	r4, #1
   19578:	movwpl	r6, #0
   1957c:	lsl	r4, r4, r3
   19580:	subs	r3, r5, #33	; 0x21
   19584:	movwpl	r4, #0
   19588:	add	r3, ip, r4, lsl #3
   1958c:	cmp	r5, r3
   19590:	blt	195b0 <grisu3_diy_fp_encode_double@@Base+0x308>
   19594:	adds	r2, r2, #1
   19598:	adc	r6, r6, #0
   1959c:	tst	r6, #2097152	; 0x200000
   195a0:	beq	195b0 <grisu3_diy_fp_encode_double@@Base+0x308>
   195a4:	lsrs	r6, r6, #1
   195a8:	rrx	r2, r2
   195ac:	add	r0, r0, #1
   195b0:	and	r1, r4, r1
   195b4:	cmp	r6, #2097152	; 0x200000
   195b8:	bcc	195dc <grisu3_diy_fp_encode_double@@Base+0x334>
   195bc:	mov	r5, #0
   195c0:	lsrs	r7, r6, #1
   195c4:	rrx	r2, r2
   195c8:	cmp	r5, r6, lsr #22
   195cc:	add	r0, r0, #1
   195d0:	mov	r6, r7
   195d4:	bne	195c0 <grisu3_diy_fp_encode_double@@Base+0x318>
   195d8:	b	195e0 <grisu3_diy_fp_encode_double@@Base+0x338>
   195dc:	mov	r7, r6
   195e0:	ldr	r8, [fp, #12]
   195e4:	vmov.i32	d16, #0	; 0x00000000
   195e8:	lsl	r9, r4, #3
   195ec:	lsl	r1, r1, #3
   195f0:	cmp	r0, lr
   195f4:	blt	19688 <grisu3_diy_fp_encode_double@@Base+0x3e0>
   195f8:	and	r4, r7, #1048576	; 0x100000
   195fc:	mov	r5, #1
   19600:	cmp	r0, lr
   19604:	eor	r5, r5, r4, lsr #20
   19608:	beq	1964c <grisu3_diy_fp_encode_double@@Base+0x3a4>
   1960c:	cmp	r4, #0
   19610:	bne	1964c <grisu3_diy_fp_encode_double@@Base+0x3a4>
   19614:	mov	r4, #1
   19618:	lsl	r5, r7, #1
   1961c:	sub	r0, r0, #1
   19620:	orr	r6, r5, r2, lsr #31
   19624:	ands	r5, r7, #524288	; 0x80000
   19628:	lsl	r2, r2, #1
   1962c:	eor	r5, r4, r5, lsr #19
   19630:	bne	19640 <grisu3_diy_fp_encode_double@@Base+0x398>
   19634:	cmp	r0, lr
   19638:	mov	r7, r6
   1963c:	bgt	19618 <grisu3_diy_fp_encode_double@@Base+0x370>
   19640:	cmp	r0, lr
   19644:	beq	19658 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   19648:	b	19668 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   1964c:	mov	r6, r7
   19650:	cmp	r0, lr
   19654:	bne	19668 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   19658:	cmp	r5, #0
   1965c:	mov	r7, #0
   19660:	mov	r5, #0
   19664:	bne	19678 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   19668:	movw	r7, #1075	; 0x433
   1966c:	add	r0, r0, r7
   19670:	mov	r7, #0
   19674:	lsl	r5, r0, #20
   19678:	bfc	r6, #20, #12
   1967c:	orr	r0, r7, r2
   19680:	orr	r2, r5, r6
   19684:	vmov	d16, r0, r2
   19688:	cmp	r1, r3
   1968c:	sub	r3, r9, ip
   19690:	mov	r2, #0
   19694:	mov	r0, #0
   19698:	vstr	d16, [r8]
   1969c:	movwge	r2, #1
   196a0:	cmp	r3, r1
   196a4:	movwge	r0, #1
   196a8:	orr	r0, r2, r0
   196ac:	sub	sp, fp, #28
   196b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196b4:	ldr	r0, [pc, #220]	; 19798 <grisu3_diy_fp_encode_double@@Base+0x4f0>
   196b8:	ldr	r1, [pc, #220]	; 1979c <grisu3_diy_fp_encode_double@@Base+0x4f4>
   196bc:	ldr	r3, [pc, #220]	; 197a0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   196c0:	mov	r2, #260	; 0x104
   196c4:	add	r0, pc, r0
   196c8:	add	r1, pc, r1
   196cc:	add	r3, pc, r3
   196d0:	bl	129bc <__assert_fail@plt>
   196d4:	ldr	r0, [pc, #140]	; 19768 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   196d8:	ldr	r1, [pc, #140]	; 1976c <grisu3_diy_fp_encode_double@@Base+0x4c4>
   196dc:	ldr	r3, [pc, #140]	; 19770 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   196e0:	mov	r2, #81	; 0x51
   196e4:	add	r0, pc, r0
   196e8:	add	r1, pc, r1
   196ec:	add	r3, pc, r3
   196f0:	bl	129bc <__assert_fail@plt>
   196f4:	ldr	r0, [pc, #120]	; 19774 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   196f8:	ldr	r1, [pc, #120]	; 19778 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   196fc:	ldr	r3, [pc, #120]	; 1977c <grisu3_diy_fp_encode_double@@Base+0x4d4>
   19700:	mov	r2, #88	; 0x58
   19704:	add	r0, pc, r0
   19708:	add	r1, pc, r1
   1970c:	add	r3, pc, r3
   19710:	bl	129bc <__assert_fail@plt>
   19714:	ldr	r0, [pc, #100]	; 19780 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   19718:	ldr	r1, [pc, #100]	; 19784 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   1971c:	ldr	r3, [pc, #100]	; 19788 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   19720:	mov	r2, #89	; 0x59
   19724:	add	r0, pc, r0
   19728:	add	r1, pc, r1
   1972c:	add	r3, pc, r3
   19730:	bl	129bc <__assert_fail@plt>
   19734:	ldr	r0, [pc, #80]	; 1978c <grisu3_diy_fp_encode_double@@Base+0x4e4>
   19738:	ldr	r1, [pc, #80]	; 19790 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   1973c:	ldr	r3, [pc, #80]	; 19794 <grisu3_diy_fp_encode_double@@Base+0x4ec>
   19740:	mov	r2, #185	; 0xb9
   19744:	add	r0, pc, r0
   19748:	add	r1, pc, r1
   1974c:	add	r3, pc, r3
   19750:	bl	129bc <__assert_fail@plt>
   19754:	andeq	r6, r0, ip, lsr #4
   19758:	andeq	r6, r0, ip, ror #2
   1975c:	andeq	r6, r0, r4, asr lr
   19760:	andeq	r6, r0, r0, lsr r8
   19764:	andeq	r6, r0, fp, ror #28
   19768:	muleq	r0, r8, ip
   1976c:	andeq	r6, r0, ip, lsl r6
   19770:	andeq	r6, r0, r7, asr ip
   19774:	andeq	r6, r0, r3, lsr #25
   19778:	strdeq	r6, [r0], -ip
   1977c:	andeq	r6, r0, r7, lsr ip
   19780:	muleq	r0, r2, ip
   19784:	ldrdeq	r6, [r0], -ip
   19788:	andeq	r6, r0, r7, lsl ip
   1978c:	andeq	r6, r0, r4, lsr #11
   19790:			; <UNDEFINED> instruction: 0x000065bc
   19794:	andeq	r6, r0, r6, lsr #12
   19798:			; <UNDEFINED> instruction: 0x00006bb1
   1979c:			; <UNDEFINED> instruction: 0x00006bb6
   197a0:	andeq	r6, r0, pc, lsl ip

000197a4 <flatcc_json_parser_error_string@@Base>:
   197a4:	cmp	r0, #34	; 0x22
   197a8:	bhi	197bc <flatcc_json_parser_error_string@@Base+0x18>
   197ac:	ldr	r1, [pc, #20]	; 197c8 <flatcc_json_parser_error_string@@Base+0x24>
   197b0:	add	r1, pc, r1
   197b4:	ldr	r0, [r1, r0, lsl #2]
   197b8:	bx	lr
   197bc:	ldr	r0, [pc, #8]	; 197cc <flatcc_json_parser_error_string@@Base+0x28>
   197c0:	add	r0, pc, r0
   197c4:	bx	lr
   197c8:	andeq	r7, r1, ip, asr #13
   197cc:	andeq	r6, r0, r8, ror r8

000197d0 <flatcc_json_parser_set_error@@Base>:
   197d0:	mov	ip, r2
   197d4:	ldr	r2, [r0, #24]
   197d8:	cmp	r2, #0
   197dc:	beq	197e8 <flatcc_json_parser_set_error@@Base+0x18>
   197e0:	mov	r0, ip
   197e4:	bx	lr
   197e8:	str	r1, [r0, #36]	; 0x24
   197ec:	ldr	r2, [r0, #4]
   197f0:	sub	r1, r1, r2
   197f4:	add	r1, r1, #1
   197f8:	str	r1, [r0, #20]
   197fc:	str	r3, [r0, #24]
   19800:	mov	r0, ip
   19804:	bx	lr

00019808 <flatcc_json_parser_string_part@@Base>:
   19808:	cmp	r1, r2
   1980c:	beq	19838 <flatcc_json_parser_string_part@@Base+0x30>
   19810:	ldrb	r3, [r1]
   19814:	cmp	r3, #32
   19818:	bcc	1986c <flatcc_json_parser_string_part@@Base+0x64>
   1981c:	cmp	r3, #34	; 0x22
   19820:	cmpne	r3, #92	; 0x5c
   19824:	beq	19864 <flatcc_json_parser_string_part@@Base+0x5c>
   19828:	add	r1, r1, #1
   1982c:	cmp	r2, r1
   19830:	bne	19810 <flatcc_json_parser_string_part@@Base+0x8>
   19834:	mov	r1, r2
   19838:	ldr	r3, [r0, #24]
   1983c:	cmp	r3, #0
   19840:	bne	19860 <flatcc_json_parser_string_part@@Base+0x58>
   19844:	mov	ip, #20
   19848:	str	r1, [r0, #36]	; 0x24
   1984c:	ldr	r3, [r0, #4]
   19850:	sub	r1, r1, r3
   19854:	add	r1, r1, #1
   19858:	str	r1, [r0, #20]
   1985c:	str	ip, [r0, #24]
   19860:	mov	r1, r2
   19864:	mov	r0, r1
   19868:	bx	lr
   1986c:	ldr	r3, [r0, #24]
   19870:	cmp	r3, #0
   19874:	bne	19860 <flatcc_json_parser_string_part@@Base+0x58>
   19878:	mov	ip, #17
   1987c:	b	19848 <flatcc_json_parser_string_part@@Base+0x40>

00019880 <flatcc_json_parser_space_ext@@Base>:
   19880:	mov	ip, r2
   19884:	cmp	r1, r2
   19888:	beq	19990 <flatcc_json_parser_space_ext@@Base+0x110>
   1988c:	ldrb	r3, [r1]
   19890:	cmp	r3, #32
   19894:	bne	198c0 <flatcc_json_parser_space_ext@@Base+0x40>
   19898:	add	r1, r1, #1
   1989c:	cmp	r1, ip
   198a0:	bne	1988c <flatcc_json_parser_space_ext@@Base+0xc>
   198a4:	b	19990 <flatcc_json_parser_space_ext@@Base+0x110>
   198a8:	add	r1, r1, r3
   198ac:	add	r1, r1, #1
   198b0:	str	r1, [r0, #4]
   198b4:	ldr	r2, [r0, #16]
   198b8:	add	r2, r2, #1
   198bc:	str	r2, [r0, #16]
   198c0:	cmp	r1, ip
   198c4:	bne	198d8 <flatcc_json_parser_space_ext@@Base+0x58>
   198c8:	b	19990 <flatcc_json_parser_space_ext@@Base+0x110>
   198cc:	add	r1, r1, #1
   198d0:	cmp	r1, ip
   198d4:	beq	19990 <flatcc_json_parser_space_ext@@Base+0x110>
   198d8:	ldrb	r3, [r1]
   198dc:	cmp	r3, #32
   198e0:	movhi	r0, r1
   198e4:	bxhi	lr
   198e8:	sub	r3, r3, #9
   198ec:	cmp	r3, #23
   198f0:	bhi	19984 <flatcc_json_parser_space_ext@@Base+0x104>
   198f4:	add	r2, pc, #4
   198f8:	ldr	r3, [r2, r3, lsl #2]
   198fc:	add	pc, r2, r3
   19900:			; <UNDEFINED> instruction: 0xffffffcc
   19904:			; <UNDEFINED> instruction: 0xffffffac
   19908:	andeq	r0, r0, r4, lsl #1
   1990c:	andeq	r0, r0, r4, lsl #1
   19910:	andeq	r0, r0, r0, rrx
   19914:	andeq	r0, r0, r4, lsl #1
   19918:	andeq	r0, r0, r4, lsl #1
   1991c:	andeq	r0, r0, r4, lsl #1
   19920:	andeq	r0, r0, r4, lsl #1
   19924:	andeq	r0, r0, r4, lsl #1
   19928:	andeq	r0, r0, r4, lsl #1
   1992c:	andeq	r0, r0, r4, lsl #1
   19930:	andeq	r0, r0, r4, lsl #1
   19934:	andeq	r0, r0, r4, lsl #1
   19938:	andeq	r0, r0, r4, lsl #1
   1993c:	andeq	r0, r0, r4, lsl #1
   19940:	andeq	r0, r0, r4, lsl #1
   19944:	andeq	r0, r0, r4, lsl #1
   19948:	andeq	r0, r0, r4, lsl #1
   1994c:	andeq	r0, r0, r4, lsl #1
   19950:	andeq	r0, r0, r4, lsl #1
   19954:	andeq	r0, r0, r4, lsl #1
   19958:	andeq	r0, r0, r4, lsl #1
   1995c:			; <UNDEFINED> instruction: 0xffffff9c
   19960:	sub	r2, ip, r1
   19964:	mov	r3, #0
   19968:	cmp	r2, #2
   1996c:	blt	198a8 <flatcc_json_parser_space_ext@@Base+0x28>
   19970:	ldrb	r2, [r1, #1]
   19974:	sub	r2, r2, #10
   19978:	clz	r2, r2
   1997c:	lsr	r3, r2, #5
   19980:	b	198a8 <flatcc_json_parser_space_ext@@Base+0x28>
   19984:	ldr	r2, [r0, #24]
   19988:	cmp	r2, #0
   1998c:	beq	19998 <flatcc_json_parser_space_ext@@Base+0x118>
   19990:	mov	r0, ip
   19994:	bx	lr
   19998:	str	r1, [r0, #36]	; 0x24
   1999c:	mov	r2, #5
   199a0:	ldr	r3, [r0, #4]
   199a4:	sub	r1, r1, r3
   199a8:	add	r1, r1, #1
   199ac:	str	r1, [r0, #20]
   199b0:	str	r2, [r0, #24]
   199b4:	mov	r0, ip
   199b8:	bx	lr

000199bc <flatcc_json_parser_string_escape@@Base>:
   199bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   199c0:	add	fp, sp, #24
   199c4:	sub	r7, r2, r1
   199c8:	cmp	r7, #2
   199cc:	blt	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   199d0:	ldrb	r6, [r1]
   199d4:	cmp	r6, #92	; 0x5c
   199d8:	bne	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   199dc:	ldrb	r6, [r1, #1]
   199e0:	sub	r6, r6, #34	; 0x22
   199e4:	cmp	r6, #86	; 0x56
   199e8:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   199ec:	add	r5, pc, #4
   199f0:	ldr	r6, [r5, r6, lsl #2]
   199f4:	add	pc, r5, r6
   199f8:	andeq	r0, r0, ip, asr r1
   199fc:	ldrdeq	r0, [r0], -ip
   19a00:	ldrdeq	r0, [r0], -ip
   19a04:	ldrdeq	r0, [r0], -ip
   19a08:	ldrdeq	r0, [r0], -ip
   19a0c:	ldrdeq	r0, [r0], -ip
   19a10:	ldrdeq	r0, [r0], -ip
   19a14:	ldrdeq	r0, [r0], -ip
   19a18:	ldrdeq	r0, [r0], -ip
   19a1c:	ldrdeq	r0, [r0], -ip
   19a20:	ldrdeq	r0, [r0], -ip
   19a24:	ldrdeq	r0, [r0], -ip
   19a28:	ldrdeq	r0, [r0], -ip
   19a2c:	andeq	r0, r0, r4, ror #2
   19a30:	ldrdeq	r0, [r0], -ip
   19a34:	ldrdeq	r0, [r0], -ip
   19a38:	ldrdeq	r0, [r0], -ip
   19a3c:	ldrdeq	r0, [r0], -ip
   19a40:	ldrdeq	r0, [r0], -ip
   19a44:	ldrdeq	r0, [r0], -ip
   19a48:	ldrdeq	r0, [r0], -ip
   19a4c:	ldrdeq	r0, [r0], -ip
   19a50:	ldrdeq	r0, [r0], -ip
   19a54:	ldrdeq	r0, [r0], -ip
   19a58:	ldrdeq	r0, [r0], -ip
   19a5c:	ldrdeq	r0, [r0], -ip
   19a60:	ldrdeq	r0, [r0], -ip
   19a64:	ldrdeq	r0, [r0], -ip
   19a68:	ldrdeq	r0, [r0], -ip
   19a6c:	ldrdeq	r0, [r0], -ip
   19a70:	ldrdeq	r0, [r0], -ip
   19a74:	ldrdeq	r0, [r0], -ip
   19a78:	ldrdeq	r0, [r0], -ip
   19a7c:	ldrdeq	r0, [r0], -ip
   19a80:	ldrdeq	r0, [r0], -ip
   19a84:	ldrdeq	r0, [r0], -ip
   19a88:	ldrdeq	r0, [r0], -ip
   19a8c:	ldrdeq	r0, [r0], -ip
   19a90:	ldrdeq	r0, [r0], -ip
   19a94:	ldrdeq	r0, [r0], -ip
   19a98:	ldrdeq	r0, [r0], -ip
   19a9c:	ldrdeq	r0, [r0], -ip
   19aa0:	ldrdeq	r0, [r0], -ip
   19aa4:	ldrdeq	r0, [r0], -ip
   19aa8:	ldrdeq	r0, [r0], -ip
   19aac:	ldrdeq	r0, [r0], -ip
   19ab0:	ldrdeq	r0, [r0], -ip
   19ab4:	ldrdeq	r0, [r0], -ip
   19ab8:	ldrdeq	r0, [r0], -ip
   19abc:	ldrdeq	r0, [r0], -ip
   19ac0:	ldrdeq	r0, [r0], -ip
   19ac4:	ldrdeq	r0, [r0], -ip
   19ac8:	ldrdeq	r0, [r0], -ip
   19acc:	ldrdeq	r0, [r0], -ip
   19ad0:	ldrdeq	r0, [r0], -ip
   19ad4:	ldrdeq	r0, [r0], -ip
   19ad8:	ldrdeq	r0, [r0], -ip
   19adc:	ldrdeq	r0, [r0], -ip
   19ae0:	andeq	r0, r0, ip, ror #2
   19ae4:	ldrdeq	r0, [r0], -ip
   19ae8:	ldrdeq	r0, [r0], -ip
   19aec:	ldrdeq	r0, [r0], -ip
   19af0:	ldrdeq	r0, [r0], -ip
   19af4:	ldrdeq	r0, [r0], -ip
   19af8:	andeq	r0, r0, r4, ror r1
   19afc:	ldrdeq	r0, [r0], -ip
   19b00:	ldrdeq	r0, [r0], -ip
   19b04:	ldrdeq	r0, [r0], -ip
   19b08:	andeq	r0, r0, ip, ror r1
   19b0c:	ldrdeq	r0, [r0], -ip
   19b10:	ldrdeq	r0, [r0], -ip
   19b14:	ldrdeq	r0, [r0], -ip
   19b18:	ldrdeq	r0, [r0], -ip
   19b1c:	ldrdeq	r0, [r0], -ip
   19b20:	ldrdeq	r0, [r0], -ip
   19b24:	ldrdeq	r0, [r0], -ip
   19b28:	andeq	r0, r0, r4, lsl #3
   19b2c:	ldrdeq	r0, [r0], -ip
   19b30:	ldrdeq	r0, [r0], -ip
   19b34:	ldrdeq	r0, [r0], -ip
   19b38:	andeq	r0, r0, ip, lsl #3
   19b3c:	ldrdeq	r0, [r0], -ip
   19b40:	muleq	r0, r4, r1
   19b44:	andeq	r0, r0, r8, lsr #3
   19b48:	ldrdeq	r0, [r0], -ip
   19b4c:	ldrdeq	r0, [r0], -ip
   19b50:	andeq	r0, r0, ip, asr #3
   19b54:	movw	r0, #8705	; 0x2201
   19b58:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b5c:	movw	r0, #12033	; 0x2f01
   19b60:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b64:	movw	r0, #23553	; 0x5c01
   19b68:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b6c:	movw	r0, #2049	; 0x801
   19b70:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b74:	movw	r0, #3073	; 0xc01
   19b78:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b7c:	movw	r0, #2561	; 0xa01
   19b80:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b84:	movw	r0, #3329	; 0xd01
   19b88:	b	19b90 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b8c:	movw	r0, #2305	; 0x901
   19b90:	add	r2, r1, #2
   19b94:	strh	r0, [r3]
   19b98:	mov	r0, r2
   19b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19ba0:	cmp	r7, #5
   19ba4:	ble	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19ba8:	ldrb	r7, [r1, #2]
   19bac:	sub	r6, r7, #48	; 0x30
   19bb0:	uxtb	r6, r6
   19bb4:	cmp	r6, #9
   19bb8:	bhi	19c30 <flatcc_json_parser_string_escape@@Base+0x274>
   19bbc:	lsl	ip, r7, #12
   19bc0:	b	19c50 <flatcc_json_parser_string_escape@@Base+0x294>
   19bc4:	mov	r6, #1
   19bc8:	cmp	r7, #3
   19bcc:	strb	r6, [r3]
   19bd0:	bgt	19c14 <flatcc_json_parser_string_escape@@Base+0x258>
   19bd4:	mov	r7, #0
   19bd8:	strb	r7, [r3]
   19bdc:	ldr	r3, [r0, #24]
   19be0:	cmp	r3, #0
   19be4:	beq	19bf0 <flatcc_json_parser_string_escape@@Base+0x234>
   19be8:	mov	r0, r2
   19bec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19bf0:	str	r1, [r0, #36]	; 0x24
   19bf4:	mov	r3, #18
   19bf8:	ldr	r7, [r0, #4]
   19bfc:	sub	r1, r1, r7
   19c00:	add	r1, r1, #1
   19c04:	str	r1, [r0, #20]
   19c08:	str	r3, [r0, #24]
   19c0c:	mov	r0, r2
   19c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c14:	ldrb	r7, [r1, #2]
   19c18:	sub	r6, r7, #48	; 0x30
   19c1c:	uxtb	r6, r6
   19c20:	cmp	r6, #9
   19c24:	bhi	19c6c <flatcc_json_parser_string_escape@@Base+0x2b0>
   19c28:	lsl	r7, r7, #4
   19c2c:	b	19c88 <flatcc_json_parser_string_escape@@Base+0x2cc>
   19c30:	orr	r6, r7, #32
   19c34:	sub	r6, r6, #97	; 0x61
   19c38:	uxtb	r6, r6
   19c3c:	cmp	r6, #5
   19c40:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19c44:	movw	r6, #36864	; 0x9000
   19c48:	movt	r6, #65535	; 0xffff
   19c4c:	add	ip, r6, r7, lsl #12
   19c50:	ldrb	lr, [r1, #3]
   19c54:	sub	r4, lr, #48	; 0x30
   19c58:	uxtb	r4, r4
   19c5c:	cmp	r4, #10
   19c60:	bcs	19cc8 <flatcc_json_parser_string_escape@@Base+0x30c>
   19c64:	mov	r8, #53248	; 0xd000
   19c68:	b	19ce0 <flatcc_json_parser_string_escape@@Base+0x324>
   19c6c:	orr	r6, r7, #32
   19c70:	sub	r6, r6, #97	; 0x61
   19c74:	uxtb	r6, r6
   19c78:	cmp	r6, #5
   19c7c:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19c80:	mvn	r6, #111	; 0x6f
   19c84:	add	r7, r6, r7, lsl #4
   19c88:	ldrb	r5, [r1, #3]
   19c8c:	sub	r6, r5, #48	; 0x30
   19c90:	uxtb	r4, r6
   19c94:	cmp	r4, #10
   19c98:	bcc	19cb4 <flatcc_json_parser_string_escape@@Base+0x2f8>
   19c9c:	orr	r6, r5, #32
   19ca0:	sub	r5, r6, #97	; 0x61
   19ca4:	uxtb	r5, r5
   19ca8:	cmp	r5, #5
   19cac:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19cb0:	sub	r6, r6, #87	; 0x57
   19cb4:	orr	r0, r6, r7
   19cb8:	add	r2, r1, #4
   19cbc:	strb	r0, [r3, #1]
   19cc0:	mov	r0, r2
   19cc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19cc8:	orr	lr, lr, #32
   19ccc:	mov	r8, #43264	; 0xa900
   19cd0:	sub	r4, lr, #97	; 0x61
   19cd4:	uxtb	r4, r4
   19cd8:	cmp	r4, #6
   19cdc:	bcs	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19ce0:	ldrb	r5, [r1, #4]
   19ce4:	sub	r4, r5, #48	; 0x30
   19ce8:	uxtb	r4, r4
   19cec:	cmp	r4, #10
   19cf0:	bcs	19cfc <flatcc_json_parser_string_escape@@Base+0x340>
   19cf4:	mov	r9, #64768	; 0xfd00
   19cf8:	b	19d14 <flatcc_json_parser_string_escape@@Base+0x358>
   19cfc:	orr	r5, r5, #32
   19d00:	movw	r9, #64144	; 0xfa90
   19d04:	sub	r4, r5, #97	; 0x61
   19d08:	uxtb	r4, r4
   19d0c:	cmp	r4, #6
   19d10:	bcs	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19d14:	ldrb	r7, [r1, #5]
   19d18:	sub	r4, r7, #48	; 0x30
   19d1c:	uxtb	r4, r4
   19d20:	cmp	r4, #10
   19d24:	bcs	19d34 <flatcc_json_parser_string_escape@@Base+0x378>
   19d28:	mvn	r0, #86	; 0x56
   19d2c:	add	r4, r0, #39	; 0x27
   19d30:	b	19d4c <flatcc_json_parser_string_escape@@Base+0x390>
   19d34:	orr	r7, r7, #32
   19d38:	movw	r4, #65449	; 0xffa9
   19d3c:	sub	r6, r7, #97	; 0x61
   19d40:	uxtb	r6, r6
   19d44:	cmp	r6, #6
   19d48:	bcs	19bd4 <flatcc_json_parser_string_escape@@Base+0x218>
   19d4c:	add	r0, r8, lr, lsl #8
   19d50:	add	r2, r9, r5, lsl #4
   19d54:	orr	r0, r0, ip
   19d58:	orr	r0, r0, r2
   19d5c:	add	r2, r4, r7
   19d60:	orr	r0, r0, r2
   19d64:	uxth	r7, r0
   19d68:	cmp	r7, #127	; 0x7f
   19d6c:	bhi	19d7c <flatcc_json_parser_string_escape@@Base+0x3c0>
   19d70:	mov	r2, #1
   19d74:	strb	r2, [r3]
   19d78:	b	19dcc <flatcc_json_parser_string_escape@@Base+0x410>
   19d7c:	mov	r2, #0
   19d80:	cmp	r2, r7, lsr #11
   19d84:	bne	19da0 <flatcc_json_parser_string_escape@@Base+0x3e4>
   19d88:	mov	r7, #192	; 0xc0
   19d8c:	mov	r2, #2
   19d90:	orr	r7, r7, r0, lsr #6
   19d94:	strb	r2, [r3]
   19d98:	strb	r7, [r3, #1]
   19d9c:	b	19dc4 <flatcc_json_parser_string_escape@@Base+0x408>
   19da0:	mov	r6, #224	; 0xe0
   19da4:	mov	r2, #3
   19da8:	orr	r6, r6, r7, lsr #12
   19dac:	strb	r2, [r3]
   19db0:	lsr	r7, r7, #6
   19db4:	strb	r6, [r3, #1]
   19db8:	mov	r6, #2
   19dbc:	bfi	r7, r6, #6, #26
   19dc0:	strb	r7, [r3, #2]
   19dc4:	mvn	r7, #-67108863	; 0xfc000001
   19dc8:	bfi	r0, r7, #6, #26
   19dcc:	strb	r0, [r3, r2]
   19dd0:	add	r2, r1, #6
   19dd4:	mov	r0, r2
   19dd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00019ddc <flatcc_json_parser_skip_constant@@Base>:
   19ddc:	push	{r4, r5, r6, sl, fp, lr}
   19de0:	add	fp, sp, #16
   19de4:	cmp	r1, r2
   19de8:	beq	19e9c <flatcc_json_parser_skip_constant@@Base+0xc0>
   19dec:	mov	r4, r2
   19df0:	mov	r5, r0
   19df4:	ldrsb	r0, [r1]
   19df8:	mov	r6, r1
   19dfc:	cmp	r0, #0
   19e00:	bmi	19e14 <flatcc_json_parser_skip_constant@@Base+0x38>
   19e04:	uxtb	r0, r0
   19e08:	cmp	r0, #95	; 0x5f
   19e0c:	cmpne	r0, #46	; 0x2e
   19e10:	bne	19e24 <flatcc_json_parser_skip_constant@@Base+0x48>
   19e14:	add	r1, r6, #1
   19e18:	cmp	r1, r4
   19e1c:	bne	19df4 <flatcc_json_parser_skip_constant@@Base+0x18>
   19e20:	b	19e94 <flatcc_json_parser_skip_constant@@Base+0xb8>
   19e24:	sub	r1, r0, #48	; 0x30
   19e28:	uxtb	r1, r1
   19e2c:	cmp	r1, #9
   19e30:	bls	19e14 <flatcc_json_parser_skip_constant@@Base+0x38>
   19e34:	orr	r1, r0, #32
   19e38:	sub	r1, r1, #97	; 0x61
   19e3c:	uxtb	r1, r1
   19e40:	cmp	r1, #25
   19e44:	bls	19e14 <flatcc_json_parser_skip_constant@@Base+0x38>
   19e48:	sub	r1, r4, r6
   19e4c:	cmp	r1, #2
   19e50:	blt	19e70 <flatcc_json_parser_skip_constant@@Base+0x94>
   19e54:	cmp	r0, #32
   19e58:	bhi	19e8c <flatcc_json_parser_skip_constant@@Base+0xb0>
   19e5c:	bne	19e70 <flatcc_json_parser_skip_constant@@Base+0x94>
   19e60:	mov	r1, r6
   19e64:	ldrb	r0, [r1, #1]!
   19e68:	cmp	r0, #32
   19e6c:	bhi	19e18 <flatcc_json_parser_skip_constant@@Base+0x3c>
   19e70:	mov	r0, r5
   19e74:	mov	r1, r6
   19e78:	mov	r2, r4
   19e7c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   19e80:	mov	r1, r0
   19e84:	cmp	r0, r6
   19e88:	bne	19e18 <flatcc_json_parser_skip_constant@@Base+0x3c>
   19e8c:	mov	r0, r6
   19e90:	pop	{r4, r5, r6, sl, fp, pc}
   19e94:	mov	r0, r4
   19e98:	pop	{r4, r5, r6, sl, fp, pc}
   19e9c:	mov	r0, r1
   19ea0:	pop	{r4, r5, r6, sl, fp, pc}

00019ea4 <flatcc_json_parser_match_constant@@Base>:
   19ea4:	push	{r4, r5, r6, r7, fp, lr}
   19ea8:	add	fp, sp, #16
   19eac:	ldr	r7, [fp, #8]
   19eb0:	mov	r4, r1
   19eb4:	sub	r1, r2, r1
   19eb8:	cmp	r1, r3
   19ebc:	ble	19fbc <flatcc_json_parser_match_constant@@Base+0x118>
   19ec0:	ldr	r1, [r0, #12]
   19ec4:	mov	r5, r2
   19ec8:	add	r6, r4, r3
   19ecc:	cmp	r1, #0
   19ed0:	beq	19f54 <flatcc_json_parser_match_constant@@Base+0xb0>
   19ed4:	sub	r1, r5, r6
   19ed8:	cmp	r1, #2
   19edc:	blt	19f04 <flatcc_json_parser_match_constant@@Base+0x60>
   19ee0:	ldrb	r1, [r6]
   19ee4:	mov	r2, r6
   19ee8:	cmp	r1, #32
   19eec:	bhi	19f14 <flatcc_json_parser_match_constant@@Base+0x70>
   19ef0:	bne	19f04 <flatcc_json_parser_match_constant@@Base+0x60>
   19ef4:	mov	r2, r6
   19ef8:	ldrb	r1, [r2, #1]!
   19efc:	cmp	r1, #32
   19f00:	bhi	19f14 <flatcc_json_parser_match_constant@@Base+0x70>
   19f04:	mov	r1, r6
   19f08:	mov	r2, r5
   19f0c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   19f10:	mov	r2, r0
   19f14:	cmp	r2, r5
   19f18:	beq	19fd0 <flatcc_json_parser_match_constant@@Base+0x12c>
   19f1c:	cmp	r2, r6
   19f20:	beq	19fe0 <flatcc_json_parser_match_constant@@Base+0x13c>
   19f24:	ldrsb	r0, [r2]
   19f28:	cmp	r0, #95	; 0x5f
   19f2c:	beq	19f4c <flatcc_json_parser_match_constant@@Base+0xa8>
   19f30:	cmn	r0, #1
   19f34:	ble	19f4c <flatcc_json_parser_match_constant@@Base+0xa8>
   19f38:	orr	r0, r0, #32
   19f3c:	sub	r0, r0, #97	; 0x61
   19f40:	uxtb	r0, r0
   19f44:	cmp	r0, #25
   19f48:	bhi	19fe0 <flatcc_json_parser_match_constant@@Base+0x13c>
   19f4c:	mov	r0, #1
   19f50:	b	1a064 <flatcc_json_parser_match_constant@@Base+0x1c0>
   19f54:	ldrb	r1, [r6]
   19f58:	cmp	r1, #92	; 0x5c
   19f5c:	beq	1a008 <flatcc_json_parser_match_constant@@Base+0x164>
   19f60:	cmp	r1, #34	; 0x22
   19f64:	beq	19f98 <flatcc_json_parser_match_constant@@Base+0xf4>
   19f68:	cmp	r1, #32
   19f6c:	bne	19fbc <flatcc_json_parser_match_constant@@Base+0x118>
   19f70:	add	r1, r4, r3
   19f74:	add	r1, r1, #1
   19f78:	cmp	r5, r1
   19f7c:	beq	19fd0 <flatcc_json_parser_match_constant@@Base+0x12c>
   19f80:	ldrb	r2, [r1], #1
   19f84:	cmp	r2, #32
   19f88:	beq	19f78 <flatcc_json_parser_match_constant@@Base+0xd4>
   19f8c:	cmp	r2, #34	; 0x22
   19f90:	bne	1a070 <flatcc_json_parser_match_constant@@Base+0x1cc>
   19f94:	sub	r6, r1, #1
   19f98:	mvn	r2, r6
   19f9c:	add	r1, r6, #1
   19fa0:	cmp	r2, #2
   19fa4:	blt	1a054 <flatcc_json_parser_match_constant@@Base+0x1b0>
   19fa8:	ldrb	r2, [r1]
   19fac:	cmp	r2, #32
   19fb0:	bls	1a040 <flatcc_json_parser_match_constant@@Base+0x19c>
   19fb4:	mov	r2, r1
   19fb8:	b	1a060 <flatcc_json_parser_match_constant@@Base+0x1bc>
   19fbc:	mov	r0, #0
   19fc0:	mov	r2, r4
   19fc4:	str	r0, [r7]
   19fc8:	mov	r0, r2
   19fcc:	pop	{r4, r5, r6, r7, fp, pc}
   19fd0:	mov	r0, #0
   19fd4:	str	r0, [r7]
   19fd8:	mov	r0, r5
   19fdc:	pop	{r4, r5, r6, r7, fp, pc}
   19fe0:	mov	r0, #0
   19fe4:	str	r0, [r7]
   19fe8:	ldrb	r0, [r2]
   19fec:	cmp	r0, #44	; 0x2c
   19ff0:	cmpne	r0, #93	; 0x5d
   19ff4:	beq	19fc8 <flatcc_json_parser_match_constant@@Base+0x124>
   19ff8:	cmp	r0, #125	; 0x7d
   19ffc:	movne	r2, r4
   1a000:	mov	r0, r2
   1a004:	pop	{r4, r5, r6, r7, fp, pc}
   1a008:	mov	r1, #0
   1a00c:	str	r1, [r7]
   1a010:	ldr	r1, [r0, #24]
   1a014:	cmp	r1, #0
   1a018:	bne	19fd8 <flatcc_json_parser_match_constant@@Base+0x134>
   1a01c:	str	r6, [r0, #36]	; 0x24
   1a020:	mov	r1, #18
   1a024:	ldr	r2, [r0, #4]
   1a028:	sub	r2, r6, r2
   1a02c:	add	r2, r2, #1
   1a030:	str	r2, [r0, #20]
   1a034:	str	r1, [r0, #24]
   1a038:	mov	r0, r5
   1a03c:	pop	{r4, r5, r6, r7, fp, pc}
   1a040:	bne	1a054 <flatcc_json_parser_match_constant@@Base+0x1b0>
   1a044:	ldrb	r2, [r6, #2]!
   1a048:	cmp	r2, #32
   1a04c:	mov	r2, r6
   1a050:	bhi	1a060 <flatcc_json_parser_match_constant@@Base+0x1bc>
   1a054:	mov	r2, #0
   1a058:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1a05c:	mov	r2, r0
   1a060:	mov	r0, #0
   1a064:	str	r0, [r7]
   1a068:	mov	r0, r2
   1a06c:	pop	{r4, r5, r6, r7, fp, pc}
   1a070:	mov	r0, #1
   1a074:	sub	r2, r1, #1
   1a078:	b	1a064 <flatcc_json_parser_match_constant@@Base+0x1c0>

0001a07c <flatcc_json_parser_unmatched_symbol@@Base>:
   1a07c:	push	{r4, r5, fp, lr}
   1a080:	add	fp, sp, #8
   1a084:	mov	r5, r0
   1a088:	ldrb	r0, [r0, #8]
   1a08c:	mov	r4, r2
   1a090:	tst	r0, #1
   1a094:	bne	1a0b8 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   1a098:	ldr	r0, [r5, #24]
   1a09c:	cmp	r0, #0
   1a0a0:	bne	1a27c <flatcc_json_parser_unmatched_symbol@@Base+0x200>
   1a0a4:	str	r1, [r5, #36]	; 0x24
   1a0a8:	mov	r0, #13
   1a0ac:	ldr	r2, [r5, #4]
   1a0b0:	sub	r1, r1, r2
   1a0b4:	b	1a294 <flatcc_json_parser_unmatched_symbol@@Base+0x218>
   1a0b8:	ldr	r0, [r5, #12]
   1a0bc:	cmp	r0, #0
   1a0c0:	beq	1a158 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1a0c4:	cmp	r1, r4
   1a0c8:	beq	1a1ac <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   1a0cc:	ldrb	r2, [r1]
   1a0d0:	cmp	r2, #33	; 0x21
   1a0d4:	bcc	1a1ac <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   1a0d8:	add	r1, r1, #1
   1a0dc:	uxtb	r0, r2
   1a0e0:	cmp	r0, #46	; 0x2e
   1a0e4:	cmpne	r0, #95	; 0x5f
   1a0e8:	bne	1a104 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1a0ec:	cmp	r4, r1
   1a0f0:	beq	1a1a0 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1a0f4:	ldrb	r2, [r1], #1
   1a0f8:	cmp	r2, #33	; 0x21
   1a0fc:	bcs	1a0dc <flatcc_json_parser_unmatched_symbol@@Base+0x60>
   1a100:	b	1a134 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   1a104:	sxtb	r3, r2
   1a108:	cmp	r3, #0
   1a10c:	bmi	1a0ec <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a110:	sub	r3, r2, #48	; 0x30
   1a114:	uxtb	r3, r3
   1a118:	cmp	r3, #9
   1a11c:	bls	1a0ec <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a120:	orr	r2, r2, #32
   1a124:	sub	r2, r2, #97	; 0x61
   1a128:	uxtb	r2, r2
   1a12c:	cmp	r2, #26
   1a130:	bcc	1a0ec <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a134:	sub	r1, r1, #1
   1a138:	cmp	r0, #46	; 0x2e
   1a13c:	bne	1a1ac <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   1a140:	ldr	r0, [r5, #24]
   1a144:	mov	r2, r4
   1a148:	cmp	r0, #0
   1a14c:	bne	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   1a150:	mov	r0, #5
   1a154:	b	1a1cc <flatcc_json_parser_unmatched_symbol@@Base+0x150>
   1a158:	cmp	r1, r4
   1a15c:	bne	1a178 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   1a160:	b	1a1b8 <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   1a164:	cmp	r0, #34	; 0x22
   1a168:	beq	1a198 <flatcc_json_parser_unmatched_symbol@@Base+0x11c>
   1a16c:	add	r1, r1, #1
   1a170:	cmp	r1, r4
   1a174:	beq	1a1b4 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   1a178:	ldrb	r0, [r1]
   1a17c:	cmp	r0, #92	; 0x5c
   1a180:	bne	1a164 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1a184:	sub	r0, r4, r1
   1a188:	cmp	r0, #2
   1a18c:	blt	1a1b8 <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   1a190:	add	r1, r1, #1
   1a194:	b	1a16c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1a198:	add	r2, r1, #1
   1a19c:	b	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   1a1a0:	mov	r1, r4
   1a1a4:	cmp	r0, #46	; 0x2e
   1a1a8:	beq	1a140 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   1a1ac:	mov	r2, r1
   1a1b0:	b	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   1a1b4:	mov	r1, r4
   1a1b8:	ldr	r0, [r5, #24]
   1a1bc:	mov	r2, r4
   1a1c0:	cmp	r0, #0
   1a1c4:	bne	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   1a1c8:	mov	r0, #20
   1a1cc:	str	r1, [r5, #36]	; 0x24
   1a1d0:	ldr	r2, [r5, #4]
   1a1d4:	sub	r1, r1, r2
   1a1d8:	mov	r2, r4
   1a1dc:	add	r1, r1, #1
   1a1e0:	str	r1, [r5, #20]
   1a1e4:	str	r0, [r5, #24]
   1a1e8:	sub	r0, r4, r2
   1a1ec:	cmp	r0, #2
   1a1f0:	blt	1a224 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1a1f4:	ldrb	r0, [r2]
   1a1f8:	cmp	r0, #32
   1a1fc:	bls	1a210 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   1a200:	mov	r3, r2
   1a204:	cmp	r3, r4
   1a208:	bne	1a240 <flatcc_json_parser_unmatched_symbol@@Base+0x1c4>
   1a20c:	b	1a270 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1a210:	bne	1a224 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1a214:	mov	r3, r2
   1a218:	ldrb	r0, [r3, #1]!
   1a21c:	cmp	r0, #32
   1a220:	bhi	1a238 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   1a224:	mov	r1, r2
   1a228:	mov	r0, r5
   1a22c:	mov	r2, r4
   1a230:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1a234:	mov	r3, r0
   1a238:	cmp	r3, r4
   1a23c:	beq	1a270 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1a240:	ldrb	r0, [r3]
   1a244:	cmp	r0, #58	; 0x3a
   1a248:	bne	1a270 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1a24c:	add	r1, r3, #1
   1a250:	sub	r0, r4, r1
   1a254:	cmp	r0, #2
   1a258:	blt	1a2b8 <flatcc_json_parser_unmatched_symbol@@Base+0x23c>
   1a25c:	ldrb	r0, [r1]
   1a260:	cmp	r0, #32
   1a264:	bls	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   1a268:	mov	r3, r1
   1a26c:	b	1a2c8 <flatcc_json_parser_unmatched_symbol@@Base+0x24c>
   1a270:	ldr	r0, [r5, #24]
   1a274:	cmp	r0, #0
   1a278:	beq	1a284 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1a27c:	mov	r0, r4
   1a280:	pop	{r4, r5, fp, pc}
   1a284:	str	r3, [r5, #36]	; 0x24
   1a288:	mov	r0, #4
   1a28c:	ldr	r1, [r5, #4]
   1a290:	sub	r1, r3, r1
   1a294:	add	r1, r1, #1
   1a298:	str	r1, [r5, #20]
   1a29c:	str	r0, [r5, #24]
   1a2a0:	mov	r0, r4
   1a2a4:	pop	{r4, r5, fp, pc}
   1a2a8:	bne	1a2b8 <flatcc_json_parser_unmatched_symbol@@Base+0x23c>
   1a2ac:	ldrb	r0, [r3, #2]!
   1a2b0:	cmp	r0, #32
   1a2b4:	bhi	1a2c8 <flatcc_json_parser_unmatched_symbol@@Base+0x24c>
   1a2b8:	mov	r0, r5
   1a2bc:	mov	r2, r4
   1a2c0:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1a2c4:	mov	r3, r0
   1a2c8:	mov	r0, r5
   1a2cc:	mov	r1, r3
   1a2d0:	mov	r2, r4
   1a2d4:	pop	{r4, r5, fp, lr}
   1a2d8:	b	1a2dc <flatcc_json_parser_generic_json@@Base>

0001a2dc <flatcc_json_parser_generic_json@@Base>:
   1a2dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2e0:	add	fp, sp, #28
   1a2e4:	sub	sp, sp, #540	; 0x21c
   1a2e8:	mov	r7, r1
   1a2ec:	cmp	r1, r2
   1a2f0:	beq	1af2c <flatcc_json_parser_generic_json@@Base+0xc50>
   1a2f4:	mov	r5, r0
   1a2f8:	add	r0, r2, #1
   1a2fc:	add	r1, sp, #24
   1a300:	mov	r6, r2
   1a304:	mov	r8, #0
   1a308:	str	r0, [sp, #4]
   1a30c:	add	r0, r5, #36	; 0x24
   1a310:	sub	sl, r1, #1
   1a314:	add	r9, r5, #24
   1a318:	str	r0, [sp, #16]
   1a31c:	add	r0, r5, #20
   1a320:	str	r0, [sp, #12]
   1a324:	add	r0, r5, #4
   1a328:	str	r0, [sp, #8]
   1a32c:	mov	r0, r1
   1a330:	cmp	r8, #0
   1a334:	beq	1a5a4 <flatcc_json_parser_generic_json@@Base+0x2c8>
   1a338:	ldrb	r0, [r0, #-1]
   1a33c:	cmp	r0, #125	; 0x7d
   1a340:	bne	1a5a4 <flatcc_json_parser_generic_json@@Base+0x2c8>
   1a344:	ldrb	r0, [r7]
   1a348:	cmp	r0, #46	; 0x2e
   1a34c:	beq	1a3a8 <flatcc_json_parser_generic_json@@Base+0xcc>
   1a350:	cmp	r0, #34	; 0x22
   1a354:	bne	1a3f4 <flatcc_json_parser_generic_json@@Base+0x118>
   1a358:	mov	r0, #0
   1a35c:	mov	r2, r6
   1a360:	str	r0, [r5, #12]
   1a364:	add	r0, r7, #1
   1a368:	cmp	r0, r6
   1a36c:	bne	1a388 <flatcc_json_parser_generic_json@@Base+0xac>
   1a370:	b	1a4c4 <flatcc_json_parser_generic_json@@Base+0x1e8>
   1a374:	cmp	r1, #34	; 0x22
   1a378:	beq	1a49c <flatcc_json_parser_generic_json@@Base+0x1c0>
   1a37c:	add	r0, r0, #1
   1a380:	cmp	r0, r6
   1a384:	beq	1a4a4 <flatcc_json_parser_generic_json@@Base+0x1c8>
   1a388:	ldrb	r1, [r0]
   1a38c:	cmp	r1, #92	; 0x5c
   1a390:	bne	1a374 <flatcc_json_parser_generic_json@@Base+0x98>
   1a394:	sub	r1, r6, r0
   1a398:	cmp	r1, #2
   1a39c:	blt	1a4c0 <flatcc_json_parser_generic_json@@Base+0x1e4>
   1a3a0:	add	r0, r0, #1
   1a3a4:	b	1a37c <flatcc_json_parser_generic_json@@Base+0xa0>
   1a3a8:	ldr	r0, [r9]
   1a3ac:	cmp	r0, #0
   1a3b0:	bne	1a3dc <flatcc_json_parser_generic_json@@Base+0x100>
   1a3b4:	mov	r0, #5
   1a3b8:	ldr	r1, [sp, #12]
   1a3bc:	str	r0, [r9]
   1a3c0:	ldr	r0, [sp, #8]
   1a3c4:	ldr	r0, [r0]
   1a3c8:	sub	r0, r7, r0
   1a3cc:	add	r0, r0, #1
   1a3d0:	str	r0, [r1]
   1a3d4:	ldr	r0, [sp, #16]
   1a3d8:	str	r7, [r0]
   1a3dc:	ldr	r0, [r5, #12]
   1a3e0:	mov	r2, r6
   1a3e4:	mov	r1, r6
   1a3e8:	cmp	r0, #0
   1a3ec:	bne	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a3f0:	b	1a4c4 <flatcc_json_parser_generic_json@@Base+0x1e8>
   1a3f4:	mov	r0, #1
   1a3f8:	cmp	r7, r6
   1a3fc:	mov	r1, r6
   1a400:	str	r0, [r5, #12]
   1a404:	beq	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a408:	ldrb	r2, [r7]
   1a40c:	cmp	r2, #33	; 0x21
   1a410:	bcc	1a494 <flatcc_json_parser_generic_json@@Base+0x1b8>
   1a414:	add	r1, r7, #1
   1a418:	uxtb	r0, r2
   1a41c:	cmp	r0, #46	; 0x2e
   1a420:	cmpne	r0, #95	; 0x5f
   1a424:	bne	1a440 <flatcc_json_parser_generic_json@@Base+0x164>
   1a428:	cmp	r6, r1
   1a42c:	beq	1a4ac <flatcc_json_parser_generic_json@@Base+0x1d0>
   1a430:	ldrb	r2, [r1], #1
   1a434:	cmp	r2, #33	; 0x21
   1a438:	bcs	1a418 <flatcc_json_parser_generic_json@@Base+0x13c>
   1a43c:	b	1a470 <flatcc_json_parser_generic_json@@Base+0x194>
   1a440:	sxtb	r3, r2
   1a444:	cmp	r3, #0
   1a448:	bmi	1a428 <flatcc_json_parser_generic_json@@Base+0x14c>
   1a44c:	sub	r3, r2, #48	; 0x30
   1a450:	uxtb	r3, r3
   1a454:	cmp	r3, #9
   1a458:	bls	1a428 <flatcc_json_parser_generic_json@@Base+0x14c>
   1a45c:	orr	r2, r2, #32
   1a460:	sub	r2, r2, #97	; 0x61
   1a464:	uxtb	r2, r2
   1a468:	cmp	r2, #26
   1a46c:	bcc	1a428 <flatcc_json_parser_generic_json@@Base+0x14c>
   1a470:	sub	r2, r1, #1
   1a474:	cmp	r0, #46	; 0x2e
   1a478:	bne	1a4b8 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1a47c:	ldr	r0, [r9]
   1a480:	mov	r1, r6
   1a484:	cmp	r0, #0
   1a488:	bne	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a48c:	mov	r0, #5
   1a490:	b	1a4d8 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1a494:	mov	r1, r7
   1a498:	b	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a49c:	add	r1, r0, #1
   1a4a0:	b	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a4a4:	mov	r2, r6
   1a4a8:	b	1a4c4 <flatcc_json_parser_generic_json@@Base+0x1e8>
   1a4ac:	mov	r2, r6
   1a4b0:	cmp	r0, #46	; 0x2e
   1a4b4:	beq	1a47c <flatcc_json_parser_generic_json@@Base+0x1a0>
   1a4b8:	mov	r1, r2
   1a4bc:	b	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a4c0:	mov	r2, r0
   1a4c4:	ldr	r0, [r9]
   1a4c8:	mov	r1, r6
   1a4cc:	cmp	r0, #0
   1a4d0:	bne	1a500 <flatcc_json_parser_generic_json@@Base+0x224>
   1a4d4:	mov	r0, #20
   1a4d8:	str	r0, [r9]
   1a4dc:	ldr	r0, [sp, #8]
   1a4e0:	ldr	r1, [sp, #12]
   1a4e4:	ldr	r0, [r0]
   1a4e8:	sub	r0, r2, r0
   1a4ec:	add	r0, r0, #1
   1a4f0:	str	r0, [r1]
   1a4f4:	ldr	r0, [sp, #16]
   1a4f8:	mov	r1, r6
   1a4fc:	str	r2, [r0]
   1a500:	sub	r0, r6, r1
   1a504:	cmp	r0, #2
   1a508:	blt	1a53c <flatcc_json_parser_generic_json@@Base+0x260>
   1a50c:	ldrb	r0, [r1]
   1a510:	cmp	r0, #32
   1a514:	bls	1a528 <flatcc_json_parser_generic_json@@Base+0x24c>
   1a518:	mov	r7, r1
   1a51c:	cmp	r7, r6
   1a520:	bne	1a554 <flatcc_json_parser_generic_json@@Base+0x278>
   1a524:	b	1afb0 <flatcc_json_parser_generic_json@@Base+0xcd4>
   1a528:	bne	1a53c <flatcc_json_parser_generic_json@@Base+0x260>
   1a52c:	mov	r7, r1
   1a530:	ldrb	r0, [r7, #1]!
   1a534:	cmp	r0, #32
   1a538:	bhi	1a54c <flatcc_json_parser_generic_json@@Base+0x270>
   1a53c:	mov	r0, r5
   1a540:	mov	r2, r6
   1a544:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1a548:	mov	r7, r0
   1a54c:	cmp	r7, r6
   1a550:	beq	1afb0 <flatcc_json_parser_generic_json@@Base+0xcd4>
   1a554:	ldrb	r0, [r7]
   1a558:	cmp	r0, #58	; 0x3a
   1a55c:	bne	1afc8 <flatcc_json_parser_generic_json@@Base+0xcec>
   1a560:	add	r1, r7, #1
   1a564:	sub	r0, r6, r1
   1a568:	cmp	r0, #2
   1a56c:	blt	1a594 <flatcc_json_parser_generic_json@@Base+0x2b8>
   1a570:	ldrb	r2, [r1]
   1a574:	cmp	r2, #32
   1a578:	bls	1a584 <flatcc_json_parser_generic_json@@Base+0x2a8>
   1a57c:	mov	r7, r1
   1a580:	b	1a5a8 <flatcc_json_parser_generic_json@@Base+0x2cc>
   1a584:	bne	1a594 <flatcc_json_parser_generic_json@@Base+0x2b8>
   1a588:	ldrb	r2, [r7, #2]!
   1a58c:	cmp	r2, #32
   1a590:	bhi	1a5a8 <flatcc_json_parser_generic_json@@Base+0x2cc>
   1a594:	mov	r0, r5
   1a598:	mov	r2, r6
   1a59c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1a5a0:	mov	r7, r0
   1a5a4:	ldrb	r2, [r7]
   1a5a8:	sub	r0, r2, #48	; 0x30
   1a5ac:	cmp	r0, #10
   1a5b0:	bcs	1a64c <flatcc_json_parser_generic_json@@Base+0x370>
   1a5b4:	cmp	r7, r6
   1a5b8:	beq	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1a5bc:	cmp	r2, #45	; 0x2d
   1a5c0:	bne	1a5d4 <flatcc_json_parser_generic_json@@Base+0x2f8>
   1a5c4:	add	r7, r7, #1
   1a5c8:	cmp	r7, r6
   1a5cc:	beq	1aae0 <flatcc_json_parser_generic_json@@Base+0x804>
   1a5d0:	ldrb	r2, [r7]
   1a5d4:	cmp	r2, #48	; 0x30
   1a5d8:	bne	1a668 <flatcc_json_parser_generic_json@@Base+0x38c>
   1a5dc:	add	r4, r7, #1
   1a5e0:	cmp	r4, r6
   1a5e4:	mov	r1, r6
   1a5e8:	beq	1aaf8 <flatcc_json_parser_generic_json@@Base+0x81c>
   1a5ec:	ldrb	r0, [r4]
   1a5f0:	cmp	r0, #46	; 0x2e
   1a5f4:	bne	1a97c <flatcc_json_parser_generic_json@@Base+0x6a0>
   1a5f8:	mov	r0, r4
   1a5fc:	ldrb	r1, [r0, #1]!
   1a600:	sub	r1, r1, #48	; 0x30
   1a604:	uxtb	r1, r1
   1a608:	cmp	r1, #10
   1a60c:	bcc	1a948 <flatcc_json_parser_generic_json@@Base+0x66c>
   1a610:	ldr	r1, [r9]
   1a614:	cmp	r1, #0
   1a618:	bne	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1a61c:	mov	r1, #6
   1a620:	ldr	r2, [sp, #12]
   1a624:	mov	r4, r6
   1a628:	str	r1, [r9]
   1a62c:	ldr	r1, [sp, #8]
   1a630:	ldr	r1, [r1]
   1a634:	sub	r1, r0, r1
   1a638:	add	r1, r1, #1
   1a63c:	str	r1, [r2]
   1a640:	ldr	r1, [sp, #16]
   1a644:	str	r0, [r1]
   1a648:	b	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1a64c:	cmp	r2, #90	; 0x5a
   1a650:	bgt	1a6b0 <flatcc_json_parser_generic_json@@Base+0x3d4>
   1a654:	cmp	r2, #34	; 0x22
   1a658:	beq	1a728 <flatcc_json_parser_generic_json@@Base+0x44c>
   1a65c:	cmp	r2, #45	; 0x2d
   1a660:	beq	1a5b4 <flatcc_json_parser_generic_json@@Base+0x2d8>
   1a664:	b	1a88c <flatcc_json_parser_generic_json@@Base+0x5b0>
   1a668:	sub	r0, r2, #49	; 0x31
   1a66c:	uxtb	r0, r0
   1a670:	cmp	r0, #8
   1a674:	bls	1a700 <flatcc_json_parser_generic_json@@Base+0x424>
   1a678:	ldr	r0, [r9]
   1a67c:	cmp	r0, #0
   1a680:	bne	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1a684:	mov	r0, #6
   1a688:	ldr	r1, [sp, #12]
   1a68c:	str	r0, [r9]
   1a690:	ldr	r0, [sp, #8]
   1a694:	ldr	r0, [r0]
   1a698:	sub	r0, r7, r0
   1a69c:	add	r0, r0, #1
   1a6a0:	str	r0, [r1]
   1a6a4:	ldr	r0, [sp, #16]
   1a6a8:	str	r7, [r0]
   1a6ac:	b	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1a6b0:	cmp	r2, #91	; 0x5b
   1a6b4:	beq	1a84c <flatcc_json_parser_generic_json@@Base+0x570>
   1a6b8:	cmp	r2, #123	; 0x7b
   1a6bc:	bne	1a88c <flatcc_json_parser_generic_json@@Base+0x5b0>
   1a6c0:	cmp	r8, #512	; 0x200
   1a6c4:	beq	1afdc <flatcc_json_parser_generic_json@@Base+0xd00>
   1a6c8:	add	r0, sp, #24
   1a6cc:	mov	r1, #125	; 0x7d
   1a6d0:	strb	r1, [r0, r8]
   1a6d4:	add	r1, r7, #1
   1a6d8:	sub	r0, r6, r1
   1a6dc:	cmp	r0, #2
   1a6e0:	blt	1ae5c <flatcc_json_parser_generic_json@@Base+0xb80>
   1a6e4:	ldrb	r0, [r1]
   1a6e8:	cmp	r0, #32
   1a6ec:	bls	1ae4c <flatcc_json_parser_generic_json@@Base+0xb70>
   1a6f0:	mov	r7, r1
   1a6f4:	cmp	r7, r6
   1a6f8:	bne	1ae74 <flatcc_json_parser_generic_json@@Base+0xb98>
   1a6fc:	b	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1a700:	add	r0, r7, #1
   1a704:	cmp	r6, r0
   1a708:	beq	1aaf4 <flatcc_json_parser_generic_json@@Base+0x818>
   1a70c:	ldrb	r1, [r0], #1
   1a710:	sub	r1, r1, #48	; 0x30
   1a714:	uxtb	r1, r1
   1a718:	cmp	r1, #10
   1a71c:	bcc	1a704 <flatcc_json_parser_generic_json@@Base+0x428>
   1a720:	sub	r4, r0, #1
   1a724:	b	1a5e0 <flatcc_json_parser_generic_json@@Base+0x304>
   1a728:	cmp	r7, r6
   1a72c:	beq	1ae10 <flatcc_json_parser_generic_json@@Base+0xb34>
   1a730:	add	r0, r7, #1
   1a734:	mov	r1, r6
   1a738:	add	r4, sp, #20
   1a73c:	mov	r7, #17
   1a740:	cmp	r0, r6
   1a744:	bne	1a774 <flatcc_json_parser_generic_json@@Base+0x498>
   1a748:	b	1af00 <flatcc_json_parser_generic_json@@Base+0xc24>
   1a74c:	ldr	r1, [r9]
   1a750:	cmp	r1, #0
   1a754:	mov	r1, r6
   1a758:	beq	1a7e0 <flatcc_json_parser_generic_json@@Base+0x504>
   1a75c:	mov	r0, r5
   1a760:	mov	r2, r6
   1a764:	mov	r3, r4
   1a768:	bl	199bc <flatcc_json_parser_string_escape@@Base>
   1a76c:	cmp	r0, r6
   1a770:	beq	1aefc <flatcc_json_parser_generic_json@@Base+0xc20>
   1a774:	ldrb	r1, [r0]
   1a778:	cmp	r1, #34	; 0x22
   1a77c:	beq	1aedc <flatcc_json_parser_generic_json@@Base+0xc00>
   1a780:	cmp	r1, #32
   1a784:	bcc	1a74c <flatcc_json_parser_generic_json@@Base+0x470>
   1a788:	rsb	r0, r0, #0
   1a78c:	uxtb	r2, r1
   1a790:	cmp	r2, #34	; 0x22
   1a794:	cmpne	r2, #92	; 0x5c
   1a798:	beq	1a7c4 <flatcc_json_parser_generic_json@@Base+0x4e8>
   1a79c:	add	r1, r6, r0
   1a7a0:	cmp	r1, #1
   1a7a4:	beq	1a80c <flatcc_json_parser_generic_json@@Base+0x530>
   1a7a8:	rsb	r1, r0, #0
   1a7ac:	sub	r0, r0, #1
   1a7b0:	ldrb	r1, [r1, #1]
   1a7b4:	cmp	r1, #32
   1a7b8:	bcs	1a78c <flatcc_json_parser_generic_json@@Base+0x4b0>
   1a7bc:	rsb	r0, r0, #0
   1a7c0:	b	1a74c <flatcc_json_parser_generic_json@@Base+0x470>
   1a7c4:	adds	r1, r6, r0
   1a7c8:	mov	r1, r6
   1a7cc:	beq	1a75c <flatcc_json_parser_generic_json@@Base+0x480>
   1a7d0:	rsb	r1, r0, #0
   1a7d4:	cmp	r2, #34	; 0x22
   1a7d8:	bne	1a75c <flatcc_json_parser_generic_json@@Base+0x480>
   1a7dc:	b	1aee0 <flatcc_json_parser_generic_json@@Base+0xc04>
   1a7e0:	ldr	r1, [sp, #8]
   1a7e4:	str	r7, [r9]
   1a7e8:	ldr	r2, [sp, #12]
   1a7ec:	ldr	r1, [r1]
   1a7f0:	sub	r1, r0, r1
   1a7f4:	add	r1, r1, #1
   1a7f8:	str	r1, [r2]
   1a7fc:	ldr	r1, [sp, #16]
   1a800:	str	r0, [r1]
   1a804:	mov	r1, r6
   1a808:	b	1a75c <flatcc_json_parser_generic_json@@Base+0x480>
   1a80c:	ldr	r0, [r9]
   1a810:	mov	r1, r6
   1a814:	cmp	r0, #0
   1a818:	bne	1a75c <flatcc_json_parser_generic_json@@Base+0x480>
   1a81c:	mov	r0, #20
   1a820:	ldr	r1, [sp, #4]
   1a824:	str	r0, [r9]
   1a828:	ldr	r0, [sp, #8]
   1a82c:	ldr	r0, [r0]
   1a830:	sub	r0, r1, r0
   1a834:	ldr	r1, [sp, #12]
   1a838:	str	r0, [r1]
   1a83c:	ldr	r0, [sp, #16]
   1a840:	mov	r1, r6
   1a844:	str	r6, [r0]
   1a848:	b	1a75c <flatcc_json_parser_generic_json@@Base+0x480>
   1a84c:	cmp	r8, #512	; 0x200
   1a850:	beq	1afdc <flatcc_json_parser_generic_json@@Base+0xd00>
   1a854:	add	r0, sp, #24
   1a858:	mov	r1, #93	; 0x5d
   1a85c:	strb	r1, [r0, r8]
   1a860:	add	r1, r7, #1
   1a864:	sub	r0, r6, r1
   1a868:	cmp	r0, #2
   1a86c:	blt	1ae9c <flatcc_json_parser_generic_json@@Base+0xbc0>
   1a870:	ldrb	r0, [r1]
   1a874:	cmp	r0, #32
   1a878:	bls	1ae8c <flatcc_json_parser_generic_json@@Base+0xbb0>
   1a87c:	mov	r7, r1
   1a880:	cmp	r7, r6
   1a884:	bne	1aeb4 <flatcc_json_parser_generic_json@@Base+0xbd8>
   1a888:	b	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1a88c:	cmp	r7, r6
   1a890:	mov	r4, r6
   1a894:	beq	1a93c <flatcc_json_parser_generic_json@@Base+0x660>
   1a898:	mov	r4, r7
   1a89c:	sxtb	r0, r2
   1a8a0:	cmp	r0, #0
   1a8a4:	bmi	1a8b8 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8a8:	uxtb	r0, r2
   1a8ac:	cmp	r0, #95	; 0x5f
   1a8b0:	cmpne	r0, #46	; 0x2e
   1a8b4:	bne	1a8d0 <flatcc_json_parser_generic_json@@Base+0x5f4>
   1a8b8:	add	r0, r4, #1
   1a8bc:	cmp	r0, r6
   1a8c0:	beq	1a938 <flatcc_json_parser_generic_json@@Base+0x65c>
   1a8c4:	ldrb	r2, [r0]
   1a8c8:	mov	r4, r0
   1a8cc:	b	1a89c <flatcc_json_parser_generic_json@@Base+0x5c0>
   1a8d0:	sub	r1, r2, #48	; 0x30
   1a8d4:	uxtb	r1, r1
   1a8d8:	cmp	r1, #9
   1a8dc:	bls	1a8b8 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8e0:	orr	r1, r2, #32
   1a8e4:	sub	r1, r1, #97	; 0x61
   1a8e8:	uxtb	r1, r1
   1a8ec:	cmp	r1, #25
   1a8f0:	bls	1a8b8 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8f4:	sub	r1, r6, r4
   1a8f8:	cmp	r1, #2
   1a8fc:	blt	1a91c <flatcc_json_parser_generic_json@@Base+0x640>
   1a900:	cmp	r0, #32
   1a904:	bhi	1a93c <flatcc_json_parser_generic_json@@Base+0x660>
   1a908:	bne	1a91c <flatcc_json_parser_generic_json@@Base+0x640>
   1a90c:	mov	r0, r4
   1a910:	ldrb	r1, [r0, #1]!
   1a914:	cmp	r1, #32
   1a918:	bhi	1a8bc <flatcc_json_parser_generic_json@@Base+0x5e0>
   1a91c:	mov	r0, r5
   1a920:	mov	r1, r4
   1a924:	mov	r2, r6
   1a928:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1a92c:	cmp	r0, r4
   1a930:	bne	1a8bc <flatcc_json_parser_generic_json@@Base+0x5e0>
   1a934:	b	1a93c <flatcc_json_parser_generic_json@@Base+0x660>
   1a938:	mov	r4, r6
   1a93c:	cmp	r7, r4
   1a940:	bne	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1a944:	b	1aff0 <flatcc_json_parser_generic_json@@Base+0xd14>
   1a948:	add	r4, r4, #2
   1a94c:	mov	r1, r6
   1a950:	cmp	r4, r6
   1a954:	beq	1aaf8 <flatcc_json_parser_generic_json@@Base+0x81c>
   1a958:	ldrb	r0, [r4]
   1a95c:	sub	r1, r0, #48	; 0x30
   1a960:	uxtb	r1, r1
   1a964:	cmp	r1, #9
   1a968:	bhi	1a97c <flatcc_json_parser_generic_json@@Base+0x6a0>
   1a96c:	add	r4, r4, #1
   1a970:	cmp	r6, r4
   1a974:	bne	1a958 <flatcc_json_parser_generic_json@@Base+0x67c>
   1a978:	b	1aaf4 <flatcc_json_parser_generic_json@@Base+0x818>
   1a97c:	cmp	r4, r6
   1a980:	mov	r1, r6
   1a984:	beq	1aaf8 <flatcc_json_parser_generic_json@@Base+0x81c>
   1a988:	orr	r1, r0, #32
   1a98c:	cmp	r1, #101	; 0x65
   1a990:	bne	1a9f0 <flatcc_json_parser_generic_json@@Base+0x714>
   1a994:	add	r0, r4, #1
   1a998:	cmp	r0, r6
   1a99c:	beq	1aae0 <flatcc_json_parser_generic_json@@Base+0x804>
   1a9a0:	ldrb	r1, [r0]
   1a9a4:	cmp	r1, #45	; 0x2d
   1a9a8:	cmpne	r1, #43	; 0x2b
   1a9ac:	addeq	r0, r4, #2
   1a9b0:	cmp	r0, r6
   1a9b4:	beq	1a610 <flatcc_json_parser_generic_json@@Base+0x334>
   1a9b8:	ldrb	r1, [r0]
   1a9bc:	sub	r1, r1, #48	; 0x30
   1a9c0:	uxtb	r1, r1
   1a9c4:	cmp	r1, #9
   1a9c8:	bhi	1a610 <flatcc_json_parser_generic_json@@Base+0x334>
   1a9cc:	add	r1, r0, #1
   1a9d0:	cmp	r6, r1
   1a9d4:	beq	1aaf4 <flatcc_json_parser_generic_json@@Base+0x818>
   1a9d8:	ldrb	r0, [r1], #1
   1a9dc:	sub	r2, r0, #48	; 0x30
   1a9e0:	uxtb	r2, r2
   1a9e4:	cmp	r2, #10
   1a9e8:	bcc	1a9d0 <flatcc_json_parser_generic_json@@Base+0x6f4>
   1a9ec:	sub	r4, r1, #1
   1a9f0:	cmp	r4, r6
   1a9f4:	mov	r1, r6
   1a9f8:	beq	1aaf8 <flatcc_json_parser_generic_json@@Base+0x81c>
   1a9fc:	sub	r1, r0, #9
   1aa00:	cmp	r1, #49	; 0x31
   1aa04:	bhi	1af14 <flatcc_json_parser_generic_json@@Base+0xc38>
   1aa08:	add	r0, pc, #8
   1aa0c:	ldr	r2, [r0, r1, lsl #2]
   1aa10:	mov	r1, r4
   1aa14:	add	pc, r0, r2
   1aa18:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aa1c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aa20:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aa24:	andeq	r0, r0, r0, ror #1
   1aa28:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aa2c:	andeq	r0, r0, r0, ror #1
   1aa30:	andeq	r0, r0, r0, ror #1
   1aa34:	andeq	r0, r0, r0, ror #1
   1aa38:	andeq	r0, r0, r0, ror #1
   1aa3c:	andeq	r0, r0, r0, ror #1
   1aa40:	andeq	r0, r0, r0, ror #1
   1aa44:	andeq	r0, r0, r0, ror #1
   1aa48:	andeq	r0, r0, r0, ror #1
   1aa4c:	andeq	r0, r0, r0, ror #1
   1aa50:	andeq	r0, r0, r0, ror #1
   1aa54:	andeq	r0, r0, r0, ror #1
   1aa58:	andeq	r0, r0, r0, ror #1
   1aa5c:	andeq	r0, r0, r0, ror #1
   1aa60:	andeq	r0, r0, r0, ror #1
   1aa64:	andeq	r0, r0, r0, ror #1
   1aa68:	andeq	r0, r0, r0, ror #1
   1aa6c:	andeq	r0, r0, r0, ror #1
   1aa70:	andeq	r0, r0, r0, ror #1
   1aa74:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aa78:	andeq	r0, r0, r0, ror #1
   1aa7c:	andeq	r0, r0, r0, ror #1
   1aa80:	andeq	r0, r0, r0, ror #1
   1aa84:	andeq	r0, r0, r0, ror #1
   1aa88:	andeq	r0, r0, r0, ror #1
   1aa8c:	andeq	r0, r0, r0, ror #1
   1aa90:	andeq	r0, r0, r0, ror #1
   1aa94:	andeq	r0, r0, r0, ror #1
   1aa98:	andeq	r0, r0, r0, ror #1
   1aa9c:	andeq	r0, r0, r0, ror #1
   1aaa0:	andeq	r0, r0, r0, ror #1
   1aaa4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aaa8:	andeq	r0, r0, r0, ror #1
   1aaac:	andeq	r0, r0, r0, ror #1
   1aab0:	andeq	r0, r0, r0, ror #1
   1aab4:	andeq	r0, r0, r0, ror #1
   1aab8:	andeq	r0, r0, r0, ror #1
   1aabc:	andeq	r0, r0, r0, ror #1
   1aac0:	andeq	r0, r0, r0, ror #1
   1aac4:	andeq	r0, r0, r0, ror #1
   1aac8:	andeq	r0, r0, r0, ror #1
   1aacc:	andeq	r0, r0, r0, ror #1
   1aad0:	andeq	r0, r0, r0, ror #1
   1aad4:	andeq	r0, r0, r0, ror #1
   1aad8:	andeq	r0, r0, r0, ror #1
   1aadc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aae0:	ldr	r0, [r9]
   1aae4:	cmp	r0, #0
   1aae8:	bne	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1aaec:	mov	r0, #6
   1aaf0:	b	1ae20 <flatcc_json_parser_generic_json@@Base+0xb44>
   1aaf4:	mov	r1, r6
   1aaf8:	ldr	r0, [r9]
   1aafc:	cmp	r0, #0
   1ab00:	beq	1ade0 <flatcc_json_parser_generic_json@@Base+0xb04>
   1ab04:	mov	r4, r6
   1ab08:	subs	r1, r4, r6
   1ab0c:	mov	r2, r8
   1ab10:	movwne	r1, #1
   1ab14:	cmp	r8, #0
   1ab18:	movwne	r2, #1
   1ab1c:	beq	1af34 <flatcc_json_parser_generic_json@@Base+0xc58>
   1ab20:	cmp	r4, r6
   1ab24:	beq	1af44 <flatcc_json_parser_generic_json@@Base+0xc68>
   1ab28:	ldrb	r1, [sl, r8]
   1ab2c:	sub	r0, r6, r4
   1ab30:	cmp	r1, #93	; 0x5d
   1ab34:	bne	1ab54 <flatcc_json_parser_generic_json@@Base+0x878>
   1ab38:	cmp	r0, #2
   1ab3c:	blt	1ab84 <flatcc_json_parser_generic_json@@Base+0x8a8>
   1ab40:	ldrb	r0, [r4]
   1ab44:	cmp	r0, #32
   1ab48:	bls	1ab70 <flatcc_json_parser_generic_json@@Base+0x894>
   1ab4c:	mov	r7, r4
   1ab50:	b	1ab98 <flatcc_json_parser_generic_json@@Base+0x8bc>
   1ab54:	cmp	r0, #2
   1ab58:	blt	1abe4 <flatcc_json_parser_generic_json@@Base+0x908>
   1ab5c:	ldrb	r0, [r4]
   1ab60:	cmp	r0, #32
   1ab64:	bls	1abd0 <flatcc_json_parser_generic_json@@Base+0x8f4>
   1ab68:	mov	r7, r4
   1ab6c:	b	1abf8 <flatcc_json_parser_generic_json@@Base+0x91c>
   1ab70:	bne	1ab84 <flatcc_json_parser_generic_json@@Base+0x8a8>
   1ab74:	mov	r7, r4
   1ab78:	ldrb	r0, [r7, #1]!
   1ab7c:	cmp	r0, #32
   1ab80:	bhi	1ab98 <flatcc_json_parser_generic_json@@Base+0x8bc>
   1ab84:	mov	r0, r5
   1ab88:	mov	r1, r4
   1ab8c:	mov	r2, r6
   1ab90:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1ab94:	mov	r7, r0
   1ab98:	cmp	r7, r6
   1ab9c:	mov	r4, r6
   1aba0:	beq	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1aba4:	ldrb	r0, [r7]
   1aba8:	cmp	r0, #44	; 0x2c
   1abac:	beq	1ac58 <flatcc_json_parser_generic_json@@Base+0x97c>
   1abb0:	cmp	r0, #93	; 0x5d
   1abb4:	beq	1ad6c <flatcc_json_parser_generic_json@@Base+0xa90>
   1abb8:	ldr	r0, [r9]
   1abbc:	mov	r4, r6
   1abc0:	cmp	r0, #0
   1abc4:	bne	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1abc8:	mov	r0, #9
   1abcc:	b	1ac2c <flatcc_json_parser_generic_json@@Base+0x950>
   1abd0:	bne	1abe4 <flatcc_json_parser_generic_json@@Base+0x908>
   1abd4:	mov	r7, r4
   1abd8:	ldrb	r0, [r7, #1]!
   1abdc:	cmp	r0, #32
   1abe0:	bhi	1abf8 <flatcc_json_parser_generic_json@@Base+0x91c>
   1abe4:	mov	r0, r5
   1abe8:	mov	r1, r4
   1abec:	mov	r2, r6
   1abf0:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1abf4:	mov	r7, r0
   1abf8:	cmp	r7, r6
   1abfc:	mov	r4, r6
   1ac00:	beq	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ac04:	ldrb	r0, [r7]
   1ac08:	cmp	r0, #44	; 0x2c
   1ac0c:	beq	1ac98 <flatcc_json_parser_generic_json@@Base+0x9bc>
   1ac10:	cmp	r0, #125	; 0x7d
   1ac14:	beq	1ad6c <flatcc_json_parser_generic_json@@Base+0xa90>
   1ac18:	ldr	r0, [r9]
   1ac1c:	mov	r4, r6
   1ac20:	cmp	r0, #0
   1ac24:	bne	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ac28:	mov	r0, #10
   1ac2c:	str	r0, [r9]
   1ac30:	ldr	r0, [sp, #8]
   1ac34:	ldr	r1, [sp, #12]
   1ac38:	mov	r4, r6
   1ac3c:	ldr	r0, [r0]
   1ac40:	sub	r0, r7, r0
   1ac44:	add	r0, r0, #1
   1ac48:	str	r0, [r1]
   1ac4c:	ldr	r0, [sp, #16]
   1ac50:	str	r7, [r0]
   1ac54:	b	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ac58:	add	r1, r7, #1
   1ac5c:	sub	r0, r6, r1
   1ac60:	cmp	r0, #2
   1ac64:	blt	1ad10 <flatcc_json_parser_generic_json@@Base+0xa34>
   1ac68:	ldrb	r0, [r1]
   1ac6c:	cmp	r0, #32
   1ac70:	bls	1ad00 <flatcc_json_parser_generic_json@@Base+0xa24>
   1ac74:	mov	r7, r1
   1ac78:	cmp	r7, r6
   1ac7c:	bne	1ad28 <flatcc_json_parser_generic_json@@Base+0xa4c>
   1ac80:	ldr	r0, [r9]
   1ac84:	mov	r4, r6
   1ac88:	cmp	r0, #0
   1ac8c:	bne	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ac90:	mov	r0, #9
   1ac94:	b	1acd4 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1ac98:	add	r1, r7, #1
   1ac9c:	sub	r0, r6, r1
   1aca0:	cmp	r0, #2
   1aca4:	blt	1ad48 <flatcc_json_parser_generic_json@@Base+0xa6c>
   1aca8:	ldrb	r0, [r1]
   1acac:	cmp	r0, #32
   1acb0:	bls	1ad38 <flatcc_json_parser_generic_json@@Base+0xa5c>
   1acb4:	mov	r7, r1
   1acb8:	cmp	r7, r6
   1acbc:	bne	1ad60 <flatcc_json_parser_generic_json@@Base+0xa84>
   1acc0:	ldr	r0, [r9]
   1acc4:	mov	r4, r6
   1acc8:	cmp	r0, #0
   1accc:	bne	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1acd0:	mov	r0, #10
   1acd4:	str	r0, [r9]
   1acd8:	ldr	r0, [sp, #8]
   1acdc:	ldr	r1, [sp, #4]
   1ace0:	mov	r4, r6
   1ace4:	ldr	r0, [r0]
   1ace8:	sub	r0, r1, r0
   1acec:	ldr	r1, [sp, #12]
   1acf0:	str	r0, [r1]
   1acf4:	ldr	r0, [sp, #16]
   1acf8:	str	r6, [r0]
   1acfc:	b	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ad00:	bne	1ad10 <flatcc_json_parser_generic_json@@Base+0xa34>
   1ad04:	ldrb	r0, [r7, #2]!
   1ad08:	cmp	r0, #32
   1ad0c:	bhi	1ad20 <flatcc_json_parser_generic_json@@Base+0xa44>
   1ad10:	mov	r0, r5
   1ad14:	mov	r2, r6
   1ad18:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1ad1c:	mov	r7, r0
   1ad20:	cmp	r7, r6
   1ad24:	beq	1ac80 <flatcc_json_parser_generic_json@@Base+0x9a4>
   1ad28:	ldrb	r0, [r7]
   1ad2c:	cmp	r0, #93	; 0x5d
   1ad30:	beq	1ad6c <flatcc_json_parser_generic_json@@Base+0xa90>
   1ad34:	b	1aec8 <flatcc_json_parser_generic_json@@Base+0xbec>
   1ad38:	bne	1ad48 <flatcc_json_parser_generic_json@@Base+0xa6c>
   1ad3c:	ldrb	r0, [r7, #2]!
   1ad40:	cmp	r0, #32
   1ad44:	bhi	1ad58 <flatcc_json_parser_generic_json@@Base+0xa7c>
   1ad48:	mov	r0, r5
   1ad4c:	mov	r2, r6
   1ad50:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1ad54:	mov	r7, r0
   1ad58:	cmp	r7, r6
   1ad5c:	beq	1acc0 <flatcc_json_parser_generic_json@@Base+0x9e4>
   1ad60:	ldrb	r0, [r7]
   1ad64:	cmp	r0, #125	; 0x7d
   1ad68:	bne	1aec8 <flatcc_json_parser_generic_json@@Base+0xbec>
   1ad6c:	add	r1, r7, #1
   1ad70:	sub	r0, r6, r1
   1ad74:	cmp	r0, #2
   1ad78:	blt	1ada4 <flatcc_json_parser_generic_json@@Base+0xac8>
   1ad7c:	ldrb	r0, [r1]
   1ad80:	cmp	r0, #32
   1ad84:	bls	1ad90 <flatcc_json_parser_generic_json@@Base+0xab4>
   1ad88:	mov	r4, r1
   1ad8c:	b	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ad90:	bne	1ada4 <flatcc_json_parser_generic_json@@Base+0xac8>
   1ad94:	ldrb	r0, [r7, #2]!
   1ad98:	mov	r4, r7
   1ad9c:	cmp	r0, #32
   1ada0:	bhi	1adb4 <flatcc_json_parser_generic_json@@Base+0xad8>
   1ada4:	mov	r0, r5
   1ada8:	mov	r2, r6
   1adac:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1adb0:	mov	r4, r0
   1adb4:	subs	r1, r4, r6
   1adb8:	sub	r0, r8, #1
   1adbc:	movwne	r1, #1
   1adc0:	subs	r2, r8, #1
   1adc4:	movwne	r2, #1
   1adc8:	cmp	r8, #1
   1adcc:	beq	1af48 <flatcc_json_parser_generic_json@@Base+0xc6c>
   1add0:	cmp	r4, r6
   1add4:	mov	r8, r0
   1add8:	bne	1ab28 <flatcc_json_parser_generic_json@@Base+0x84c>
   1addc:	b	1af48 <flatcc_json_parser_generic_json@@Base+0xc6c>
   1ade0:	mov	r0, #6
   1ade4:	str	r0, [r9]
   1ade8:	ldr	r0, [sp, #8]
   1adec:	ldr	r2, [sp, #12]
   1adf0:	mov	r4, r6
   1adf4:	ldr	r0, [r0]
   1adf8:	sub	r0, r1, r0
   1adfc:	add	r0, r0, #1
   1ae00:	str	r0, [r2]
   1ae04:	ldr	r0, [sp, #16]
   1ae08:	str	r1, [r0]
   1ae0c:	b	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1ae10:	ldr	r0, [r9]
   1ae14:	cmp	r0, #0
   1ae18:	bne	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1ae1c:	mov	r0, #16
   1ae20:	str	r0, [r9]
   1ae24:	ldr	r0, [sp, #8]
   1ae28:	ldr	r1, [sp, #4]
   1ae2c:	mov	r4, r6
   1ae30:	ldr	r0, [r0]
   1ae34:	sub	r0, r1, r0
   1ae38:	ldr	r1, [sp, #12]
   1ae3c:	str	r0, [r1]
   1ae40:	ldr	r0, [sp, #16]
   1ae44:	str	r6, [r0]
   1ae48:	b	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1ae4c:	bne	1ae5c <flatcc_json_parser_generic_json@@Base+0xb80>
   1ae50:	ldrb	r0, [r7, #2]!
   1ae54:	cmp	r0, #32
   1ae58:	bhi	1ae6c <flatcc_json_parser_generic_json@@Base+0xb90>
   1ae5c:	mov	r0, r5
   1ae60:	mov	r2, r6
   1ae64:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1ae68:	mov	r7, r0
   1ae6c:	cmp	r7, r6
   1ae70:	beq	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1ae74:	ldrb	r0, [r7]
   1ae78:	add	r8, r8, #1
   1ae7c:	cmp	r0, #125	; 0x7d
   1ae80:	mov	r4, r7
   1ae84:	bne	1aec8 <flatcc_json_parser_generic_json@@Base+0xbec>
   1ae88:	b	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1ae8c:	bne	1ae9c <flatcc_json_parser_generic_json@@Base+0xbc0>
   1ae90:	ldrb	r0, [r7, #2]!
   1ae94:	cmp	r0, #32
   1ae98:	bhi	1aeac <flatcc_json_parser_generic_json@@Base+0xbd0>
   1ae9c:	mov	r0, r5
   1aea0:	mov	r2, r6
   1aea4:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1aea8:	mov	r7, r0
   1aeac:	cmp	r7, r6
   1aeb0:	beq	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1aeb4:	ldrb	r0, [r7]
   1aeb8:	add	r8, r8, #1
   1aebc:	cmp	r0, #93	; 0x5d
   1aec0:	mov	r4, r7
   1aec4:	beq	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1aec8:	add	r0, sp, #24
   1aecc:	cmp	r7, r6
   1aed0:	add	r0, r0, r8
   1aed4:	bne	1a330 <flatcc_json_parser_generic_json@@Base+0x54>
   1aed8:	b	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1aedc:	mov	r1, r0
   1aee0:	cmp	r1, r6
   1aee4:	beq	1af00 <flatcc_json_parser_generic_json@@Base+0xc24>
   1aee8:	ldrb	r0, [r1]
   1aeec:	cmp	r0, #34	; 0x22
   1aef0:	bne	1af00 <flatcc_json_parser_generic_json@@Base+0xc24>
   1aef4:	add	r4, r1, #1
   1aef8:	b	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1aefc:	mov	r1, r6
   1af00:	ldr	r0, [r9]
   1af04:	cmp	r0, #0
   1af08:	bne	1ab04 <flatcc_json_parser_generic_json@@Base+0x828>
   1af0c:	mov	r0, #20
   1af10:	b	1ade4 <flatcc_json_parser_generic_json@@Base+0xb08>
   1af14:	cmp	r0, #93	; 0x5d
   1af18:	beq	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1af1c:	cmp	r0, #125	; 0x7d
   1af20:	mov	r1, r4
   1af24:	beq	1ab08 <flatcc_json_parser_generic_json@@Base+0x82c>
   1af28:	b	1aaf8 <flatcc_json_parser_generic_json@@Base+0x81c>
   1af2c:	mov	r4, r7
   1af30:	b	1afa4 <flatcc_json_parser_generic_json@@Base+0xcc8>
   1af34:	mov	r0, r8
   1af38:	cmp	r1, #0
   1af3c:	beq	1af50 <flatcc_json_parser_generic_json@@Base+0xc74>
   1af40:	b	1afa4 <flatcc_json_parser_generic_json@@Base+0xcc8>
   1af44:	mov	r0, r8
   1af48:	cmp	r1, #0
   1af4c:	bne	1afa4 <flatcc_json_parser_generic_json@@Base+0xcc8>
   1af50:	cmp	r2, #0
   1af54:	beq	1afa4 <flatcc_json_parser_generic_json@@Base+0xcc8>
   1af58:	ldr	r1, [r9]
   1af5c:	cmp	r1, #0
   1af60:	bne	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1af64:	add	r1, sp, #24
   1af68:	add	r0, r1, r0
   1af6c:	mov	r1, #10
   1af70:	ldrb	r0, [r0, #-1]
   1af74:	cmp	r0, #93	; 0x5d
   1af78:	movweq	r1, #9
   1af7c:	str	r1, [r9]
   1af80:	ldr	r0, [sp, #8]
   1af84:	ldr	r1, [sp, #4]
   1af88:	ldr	r0, [r0]
   1af8c:	sub	r0, r1, r0
   1af90:	ldr	r1, [sp, #12]
   1af94:	str	r0, [r1]
   1af98:	ldr	r0, [sp, #16]
   1af9c:	str	r6, [r0]
   1afa0:	mov	r4, r6
   1afa4:	mov	r0, r4
   1afa8:	sub	sp, fp, #28
   1afac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afb0:	ldr	r0, [r9]
   1afb4:	cmp	r0, #0
   1afb8:	bne	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1afbc:	mov	r0, #10
   1afc0:	str	r0, [r9]
   1afc4:	b	1af80 <flatcc_json_parser_generic_json@@Base+0xca4>
   1afc8:	ldr	r0, [r9]
   1afcc:	cmp	r0, #0
   1afd0:	bne	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1afd4:	mov	r0, #4
   1afd8:	b	1b000 <flatcc_json_parser_generic_json@@Base+0xd24>
   1afdc:	ldr	r0, [r9]
   1afe0:	cmp	r0, #0
   1afe4:	bne	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1afe8:	mov	r0, #2
   1afec:	b	1b000 <flatcc_json_parser_generic_json@@Base+0xd24>
   1aff0:	ldr	r0, [r9]
   1aff4:	cmp	r0, #0
   1aff8:	bne	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>
   1affc:	mov	r0, #5
   1b000:	str	r0, [r9]
   1b004:	ldr	r0, [sp, #8]
   1b008:	ldr	r1, [sp, #12]
   1b00c:	ldr	r0, [r0]
   1b010:	sub	r0, r7, r0
   1b014:	add	r0, r0, #1
   1b018:	str	r0, [r1]
   1b01c:	ldr	r0, [sp, #16]
   1b020:	str	r7, [r0]
   1b024:	b	1afa0 <flatcc_json_parser_generic_json@@Base+0xcc4>

0001b028 <flatcc_json_parser_double@@Base>:
   1b028:	push	{r4, r5, r6, r7, fp, lr}
   1b02c:	add	fp, sp, #16
   1b030:	mov	r5, r0
   1b034:	mov	r0, #0
   1b038:	mov	r6, r1
   1b03c:	cmp	r1, r2
   1b040:	str	r0, [r3]
   1b044:	str	r0, [r3, #4]
   1b048:	beq	1b0ec <flatcc_json_parser_double@@Base+0xc4>
   1b04c:	mov	r0, r6
   1b050:	mov	r4, r2
   1b054:	mov	r7, r3
   1b058:	ldrb	r1, [r0], #1
   1b05c:	cmp	r1, #45	; 0x2d
   1b060:	movne	r0, r6
   1b064:	sub	r2, r2, r0
   1b068:	cmp	r2, #2
   1b06c:	blt	1b0ac <flatcc_json_parser_double@@Base+0x84>
   1b070:	sub	r1, r1, #45	; 0x2d
   1b074:	clz	r1, r1
   1b078:	lsr	r1, r1, #5
   1b07c:	ldrb	r1, [r6, r1]
   1b080:	cmp	r1, #46	; 0x2e
   1b084:	beq	1b09c <flatcc_json_parser_double@@Base+0x74>
   1b088:	cmp	r1, #48	; 0x30
   1b08c:	bne	1b0ac <flatcc_json_parser_double@@Base+0x84>
   1b090:	ldrb	r0, [r0, #1]
   1b094:	cmp	r0, #48	; 0x30
   1b098:	bne	1b0ac <flatcc_json_parser_double@@Base+0x84>
   1b09c:	ldr	r0, [r5, #24]
   1b0a0:	cmp	r0, #0
   1b0a4:	bne	1b118 <flatcc_json_parser_double@@Base+0xf0>
   1b0a8:	b	1b0fc <flatcc_json_parser_double@@Base+0xd4>
   1b0ac:	sub	r1, r4, r6
   1b0b0:	mov	r0, r6
   1b0b4:	mov	r2, r7
   1b0b8:	bl	1b120 <flatcc_json_parser_double@@Base+0xf8>
   1b0bc:	cmp	r0, #0
   1b0c0:	cmpne	r0, r6
   1b0c4:	bne	1b11c <flatcc_json_parser_double@@Base+0xf4>
   1b0c8:	vldr	d0, [r7]
   1b0cc:	bl	12914 <__isinf@plt>
   1b0d0:	ldr	r1, [r5, #24]
   1b0d4:	cmp	r0, #0
   1b0d8:	beq	1b0f4 <flatcc_json_parser_double@@Base+0xcc>
   1b0dc:	cmp	r1, #0
   1b0e0:	bne	1b118 <flatcc_json_parser_double@@Base+0xf0>
   1b0e4:	mov	r0, #7
   1b0e8:	b	1b100 <flatcc_json_parser_double@@Base+0xd8>
   1b0ec:	mov	r0, r6
   1b0f0:	pop	{r4, r5, r6, r7, fp, pc}
   1b0f4:	cmp	r1, #0
   1b0f8:	bne	1b118 <flatcc_json_parser_double@@Base+0xf0>
   1b0fc:	mov	r0, #6
   1b100:	str	r6, [r5, #36]	; 0x24
   1b104:	ldr	r1, [r5, #4]
   1b108:	sub	r1, r6, r1
   1b10c:	add	r1, r1, #1
   1b110:	str	r1, [r5, #20]
   1b114:	str	r0, [r5, #24]
   1b118:	mov	r0, r4
   1b11c:	pop	{r4, r5, r6, r7, fp, pc}
   1b120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b124:	add	fp, sp, #28
   1b128:	sub	sp, sp, #36	; 0x24
   1b12c:	cmp	r1, #1000	; 0x3e8
   1b130:	mov	r3, r1
   1b134:	mov	r5, #0
   1b138:	mov	r9, r0
   1b13c:	movge	r3, #1000	; 0x3e8
   1b140:	str	r5, [r2]
   1b144:	str	r5, [r2, #4]
   1b148:	add	ip, r0, r3
   1b14c:	add	lr, ip, #1
   1b150:	cmp	lr, r0
   1b154:	beq	1b1c8 <flatcc_json_parser_double@@Base+0x1a0>
   1b158:	ldrb	r0, [r9]
   1b15c:	mov	r4, r9
   1b160:	cmp	r0, #45	; 0x2d
   1b164:	bne	1b17c <flatcc_json_parser_double@@Base+0x154>
   1b168:	cmp	r3, #0
   1b16c:	beq	1b518 <flatcc_json_parser_double@@Base+0x4f0>
   1b170:	add	r4, r9, #1
   1b174:	mov	r5, #1
   1b178:	ldrb	r0, [r4]
   1b17c:	cmp	r0, #48	; 0x30
   1b180:	bne	1b1b0 <flatcc_json_parser_double@@Base+0x188>
   1b184:	add	r6, r4, #1
   1b188:	cmp	r4, ip
   1b18c:	beq	1b21c <flatcc_json_parser_double@@Base+0x1f4>
   1b190:	ldrb	r1, [r6]
   1b194:	orr	r0, r1, #32
   1b198:	cmp	r0, #120	; 0x78
   1b19c:	bne	1b1e8 <flatcc_json_parser_double@@Base+0x1c0>
   1b1a0:	mov	r0, #0
   1b1a4:	str	r0, [r2]
   1b1a8:	str	r0, [r2, #4]
   1b1ac:	b	1b1c8 <flatcc_json_parser_double@@Base+0x1a0>
   1b1b0:	sub	r1, r0, #49	; 0x31
   1b1b4:	uxtb	r1, r1
   1b1b8:	cmp	r1, #9
   1b1bc:	bcc	1b1d0 <flatcc_json_parser_double@@Base+0x1a8>
   1b1c0:	cmp	r5, #0
   1b1c4:	movne	r9, #0
   1b1c8:	mov	r2, r9
   1b1cc:	b	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b1d0:	sub	r0, r0, #48	; 0x30
   1b1d4:	add	r6, r4, #1
   1b1d8:	asr	r1, r0, #31
   1b1dc:	cmp	r6, lr
   1b1e0:	bne	1b22c <flatcc_json_parser_double@@Base+0x204>
   1b1e4:	b	1b518 <flatcc_json_parser_double@@Base+0x4f0>
   1b1e8:	cmp	r1, #48	; 0x30
   1b1ec:	mov	r0, #0
   1b1f0:	mov	r1, #0
   1b1f4:	bne	1b224 <flatcc_json_parser_double@@Base+0x1fc>
   1b1f8:	sub	r0, ip, #1
   1b1fc:	mov	r1, r4
   1b200:	cmp	r0, r4
   1b204:	beq	1b218 <flatcc_json_parser_double@@Base+0x1f0>
   1b208:	ldrb	r7, [r1, #2]
   1b20c:	add	r4, r1, #1
   1b210:	cmp	r7, #48	; 0x30
   1b214:	beq	1b1fc <flatcc_json_parser_double@@Base+0x1d4>
   1b218:	add	r6, r1, #2
   1b21c:	mov	r0, #0
   1b220:	mov	r1, #0
   1b224:	cmp	r6, lr
   1b228:	beq	1b518 <flatcc_json_parser_double@@Base+0x4f0>
   1b22c:	mov	sl, #10
   1b230:	mov	r7, r6
   1b234:	str	r2, [sp, #20]
   1b238:	ldrb	r8, [r7]
   1b23c:	sub	r2, r8, #48	; 0x30
   1b240:	uxtb	r4, r2
   1b244:	mov	r2, #0
   1b248:	cmp	r4, #9
   1b24c:	bhi	1b28c <flatcc_json_parser_double@@Base+0x264>
   1b250:	movw	r4, #39320	; 0x9998
   1b254:	movt	r4, #39321	; 0x9999
   1b258:	subs	r4, r4, r0
   1b25c:	movw	r4, #39321	; 0x9999
   1b260:	movt	r4, #6553	; 0x1999
   1b264:	sbcs	r4, r4, r1
   1b268:	bcc	1b29c <flatcc_json_parser_double@@Base+0x274>
   1b26c:	add	r1, r1, r1, lsl #2
   1b270:	add	r7, r7, #1
   1b274:	lsl	r1, r1, #1
   1b278:	umlal	r8, r1, r0, sl
   1b27c:	subs	r0, r8, #48	; 0x30
   1b280:	sbc	r1, r1, #0
   1b284:	cmp	lr, r7
   1b288:	bne	1b238 <flatcc_json_parser_double@@Base+0x210>
   1b28c:	mov	r8, r0
   1b290:	mov	sl, r1
   1b294:	mov	r0, #0
   1b298:	b	1b2b8 <flatcc_json_parser_double@@Base+0x290>
   1b29c:	adds	r4, r0, #1
   1b2a0:	adc	sl, r1, #0
   1b2a4:	cmp	r8, #52	; 0x34
   1b2a8:	mov	r8, r4
   1b2ac:	movls	r8, r0
   1b2b0:	movls	sl, r1
   1b2b4:	mov	r0, #1
   1b2b8:	cmp	r7, lr
   1b2bc:	str	r0, [sp, #24]
   1b2c0:	beq	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b2c4:	sub	r0, r7, r6
   1b2c8:	mov	r6, #0
   1b2cc:	str	r0, [sp, #16]
   1b2d0:	sub	r0, r3, r7
   1b2d4:	add	r0, r9, r0
   1b2d8:	ldrb	r1, [r7]
   1b2dc:	cmp	r1, #48	; 0x30
   1b2e0:	bne	1b304 <flatcc_json_parser_double@@Base+0x2dc>
   1b2e4:	add	r1, r7, #1
   1b2e8:	cmp	r7, ip
   1b2ec:	sub	r0, r0, #1
   1b2f0:	add	r6, r6, #1
   1b2f4:	mov	r7, r1
   1b2f8:	bne	1b2d8 <flatcc_json_parser_double@@Base+0x2b0>
   1b2fc:	mov	r7, r1
   1b300:	b	1b350 <flatcc_json_parser_double@@Base+0x328>
   1b304:	sub	r1, r1, #49	; 0x31
   1b308:	uxtb	r1, r1
   1b30c:	cmp	r1, #8
   1b310:	bhi	1b350 <flatcc_json_parser_double@@Base+0x328>
   1b314:	mvn	r2, #0
   1b318:	mov	r1, r2
   1b31c:	cmp	r0, #0
   1b320:	beq	1b340 <flatcc_json_parser_double@@Base+0x318>
   1b324:	ldrb	r2, [r7, -r1]
   1b328:	sub	r0, r0, #1
   1b32c:	sub	r2, r2, #48	; 0x30
   1b330:	uxtb	r4, r2
   1b334:	sub	r2, r1, #1
   1b338:	cmp	r4, #10
   1b33c:	bcc	1b318 <flatcc_json_parser_double@@Base+0x2f0>
   1b340:	mov	r0, #1
   1b344:	sub	r6, r6, r1
   1b348:	sub	r7, r7, r1
   1b34c:	str	r0, [sp, #24]
   1b350:	mov	r2, #0
   1b354:	cmp	r7, lr
   1b358:	beq	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b35c:	ldrb	r0, [r7]
   1b360:	cmp	r0, #46	; 0x2e
   1b364:	bne	1b4f0 <flatcc_json_parser_double@@Base+0x4c8>
   1b368:	mov	r4, r7
   1b36c:	ldrb	r0, [r4, #1]!
   1b370:	sub	r1, r0, #48	; 0x30
   1b374:	uxtb	r1, r1
   1b378:	cmp	r1, #9
   1b37c:	bhi	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b380:	cmp	r7, ip
   1b384:	beq	1b42c <flatcc_json_parser_double@@Base+0x404>
   1b388:	sub	r1, r3, r7
   1b38c:	str	r4, [sp, #8]
   1b390:	add	r1, r1, r9
   1b394:	sub	r1, r1, #1
   1b398:	str	r1, [sp, #12]
   1b39c:	mov	r1, #0
   1b3a0:	mov	r3, r1
   1b3a4:	movw	r1, #39320	; 0x9998
   1b3a8:	movt	r1, #39321	; 0x9999
   1b3ac:	subs	r1, r1, r8
   1b3b0:	movw	r1, #39321	; 0x9999
   1b3b4:	movt	r1, #6553	; 0x1999
   1b3b8:	sbcs	r1, r1, sl
   1b3bc:	bcc	1b43c <flatcc_json_parser_double@@Base+0x414>
   1b3c0:	add	r1, sl, sl, lsl #2
   1b3c4:	uxtb	r0, r0
   1b3c8:	mov	r4, #10
   1b3cc:	lsl	r1, r1, #1
   1b3d0:	umlal	r0, r1, r8, r4
   1b3d4:	add	r4, r7, r3
   1b3d8:	subs	r8, r0, #48	; 0x30
   1b3dc:	ldr	r0, [sp, #12]
   1b3e0:	sbc	sl, r1, #0
   1b3e4:	cmp	r0, r3
   1b3e8:	beq	1b41c <flatcc_json_parser_double@@Base+0x3f4>
   1b3ec:	ldrb	r0, [r4, #2]
   1b3f0:	str	sl, [sp, #28]
   1b3f4:	mov	sl, r8
   1b3f8:	mov	r8, r5
   1b3fc:	add	r1, r3, #1
   1b400:	sub	r5, r0, #48	; 0x30
   1b404:	uxtb	r5, r5
   1b408:	cmp	r5, #10
   1b40c:	mov	r5, r8
   1b410:	mov	r8, sl
   1b414:	ldr	sl, [sp, #28]
   1b418:	bcc	1b3a0 <flatcc_json_parser_double@@Base+0x378>
   1b41c:	mvn	r0, r3
   1b420:	add	r7, r4, #2
   1b424:	add	r6, r0, r6
   1b428:	b	1b474 <flatcc_json_parser_double@@Base+0x44c>
   1b42c:	mov	r7, r4
   1b430:	cmp	r7, lr
   1b434:	bne	1b480 <flatcc_json_parser_double@@Base+0x458>
   1b438:	b	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b43c:	add	r1, r7, r3
   1b440:	sub	r6, r6, r3
   1b444:	add	r7, r1, #1
   1b448:	ldr	r1, [sp, #24]
   1b44c:	cmp	r1, #0
   1b450:	bne	1b474 <flatcc_json_parser_double@@Base+0x44c>
   1b454:	uxtb	r0, r0
   1b458:	adds	r1, r8, #1
   1b45c:	adc	r3, sl, #0
   1b460:	cmp	r0, #52	; 0x34
   1b464:	mov	r0, #1
   1b468:	movhi	r8, r1
   1b46c:	movhi	sl, r3
   1b470:	str	r0, [sp, #24]
   1b474:	ldr	r4, [sp, #8]
   1b478:	cmp	r7, lr
   1b47c:	beq	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b480:	ldr	r1, [sp, #16]
   1b484:	sub	r0, r7, r4
   1b488:	add	r1, r0, r1
   1b48c:	str	r1, [sp, #16]
   1b490:	ldrb	r0, [r7]
   1b494:	cmp	r0, #48	; 0x30
   1b498:	bne	1b4b0 <flatcc_json_parser_double@@Base+0x488>
   1b49c:	add	r7, r7, #1
   1b4a0:	add	r6, r6, #1
   1b4a4:	cmp	lr, r7
   1b4a8:	bne	1b490 <flatcc_json_parser_double@@Base+0x468>
   1b4ac:	b	1b4f0 <flatcc_json_parser_double@@Base+0x4c8>
   1b4b0:	sub	r0, r0, #49	; 0x31
   1b4b4:	uxtb	r0, r0
   1b4b8:	cmp	r0, #8
   1b4bc:	bhi	1b4f0 <flatcc_json_parser_double@@Base+0x4c8>
   1b4c0:	mov	r0, r7
   1b4c4:	cmp	ip, r7
   1b4c8:	beq	1b4e4 <flatcc_json_parser_double@@Base+0x4bc>
   1b4cc:	ldrb	r1, [r0, #1]
   1b4d0:	add	r7, r0, #1
   1b4d4:	sub	r1, r1, #48	; 0x30
   1b4d8:	uxtb	r1, r1
   1b4dc:	cmp	r1, #10
   1b4e0:	bcc	1b4c0 <flatcc_json_parser_double@@Base+0x498>
   1b4e4:	add	r7, r0, #1
   1b4e8:	mov	r0, #1
   1b4ec:	str	r0, [sp, #24]
   1b4f0:	cmp	r7, lr
   1b4f4:	beq	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b4f8:	ldrb	r0, [r7]
   1b4fc:	mov	r4, #0
   1b500:	orr	r0, r0, #32
   1b504:	cmp	r0, #101	; 0x65
   1b508:	bne	1b528 <flatcc_json_parser_double@@Base+0x500>
   1b50c:	sub	r0, lr, r7
   1b510:	cmp	r0, #2
   1b514:	bge	1b594 <flatcc_json_parser_double@@Base+0x56c>
   1b518:	mov	r2, #0
   1b51c:	mov	r0, r2
   1b520:	sub	sp, fp, #28
   1b524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b528:	mov	r0, #0
   1b52c:	cmp	r7, lr
   1b530:	mov	r2, #0
   1b534:	beq	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b538:	vmov.i32	d16, #0	; 0x00000000
   1b53c:	cmp	r4, #0
   1b540:	rsbne	r0, r0, #0
   1b544:	orrs	r1, r8, sl
   1b548:	beq	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b54c:	ldr	r2, [sp, #16]
   1b550:	add	r1, r2, r6
   1b554:	add	r4, r1, r0
   1b558:	cmn	r4, #324	; 0x144
   1b55c:	blt	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b560:	movw	r0, #310	; 0x136
   1b564:	cmp	r4, r0
   1b568:	ble	1b5c8 <flatcc_json_parser_double@@Base+0x5a0>
   1b56c:	vldr	d16, [pc, #964]	; 1b938 <flatcc_json_parser_double@@Base+0x910>
   1b570:	ldr	r4, [sp, #20]
   1b574:	vstr	d16, [r4]
   1b578:	cmp	r5, #0
   1b57c:	beq	1b58c <flatcc_json_parser_double@@Base+0x564>
   1b580:	vldr	d16, [r4]
   1b584:	vneg.f64	d16, d16
   1b588:	vstr	d16, [r4]
   1b58c:	mov	r2, r7
   1b590:	b	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b594:	mov	r3, r7
   1b598:	ldrb	r0, [r3, #1]!
   1b59c:	cmp	r0, #45	; 0x2d
   1b5a0:	beq	1b6c8 <flatcc_json_parser_double@@Base+0x6a0>
   1b5a4:	mov	r4, #0
   1b5a8:	cmp	r0, #43	; 0x2b
   1b5ac:	bne	1b6d8 <flatcc_json_parser_double@@Base+0x6b0>
   1b5b0:	add	r3, r7, #2
   1b5b4:	mov	r2, #0
   1b5b8:	cmp	r3, lr
   1b5bc:	beq	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b5c0:	mov	r4, #0
   1b5c4:	b	1b6d8 <flatcc_json_parser_double@@Base+0x6b0>
   1b5c8:	mov	r0, #0
   1b5cc:	mov	r6, r2
   1b5d0:	cmp	r0, sl, lsr #21
   1b5d4:	bne	1b730 <flatcc_json_parser_double@@Base+0x708>
   1b5d8:	cmp	r4, #22
   1b5dc:	bhi	1b730 <flatcc_json_parser_double@@Base+0x708>
   1b5e0:	mov	r0, r8
   1b5e4:	mov	r1, sl
   1b5e8:	bl	1dcdc <flatcc_json_parser_struct_as_root@@Base+0x420>
   1b5ec:	vmov	d16, r0, r1
   1b5f0:	sub	r2, r4, r6
   1b5f4:	add	r0, r2, #22
   1b5f8:	cmp	r0, #44	; 0x2c
   1b5fc:	bhi	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b600:	add	r1, pc, #4
   1b604:	ldr	r0, [r1, r0, lsl #2]
   1b608:	add	pc, r1, r0
   1b60c:	strheq	r0, [r0], -r4
   1b610:	andeq	r0, r0, r4, ror r1
   1b614:	andeq	r0, r0, ip, ror r1
   1b618:	andeq	r0, r0, r4, lsl #3
   1b61c:	andeq	r0, r0, ip, lsl #3
   1b620:	muleq	r0, r4, r1
   1b624:	muleq	r0, ip, r1
   1b628:	andeq	r0, r0, r4, lsr #3
   1b62c:	andeq	r0, r0, ip, lsr #3
   1b630:			; <UNDEFINED> instruction: 0x000001b4
   1b634:			; <UNDEFINED> instruction: 0x000001bc
   1b638:	andeq	r0, r0, r4, asr #3
   1b63c:	andeq	r0, r0, ip, asr #3
   1b640:	ldrdeq	r0, [r0], -r4
   1b644:	ldrdeq	r0, [r0], -ip
   1b648:	andeq	r0, r0, r4, ror #3
   1b64c:	andeq	r0, r0, ip, ror #3
   1b650:	strdeq	r0, [r0], -r4
   1b654:	strdeq	r0, [r0], -ip
   1b658:	andeq	r0, r0, r4, lsl #4
   1b65c:	andeq	r0, r0, ip, lsl #4
   1b660:	andeq	r0, r0, r4, lsl r2
   1b664:			; <UNDEFINED> instruction: 0xffffff64
   1b668:	andeq	r0, r0, r0, lsr #4
   1b66c:	andeq	r0, r0, ip, lsr #4
   1b670:	andeq	r0, r0, r8, lsr r2
   1b674:	andeq	r0, r0, r4, asr #4
   1b678:	andeq	r0, r0, r0, asr r2
   1b67c:	andeq	r0, r0, ip, asr r2
   1b680:	andeq	r0, r0, r8, ror #4
   1b684:	andeq	r0, r0, r4, ror r2
   1b688:	andeq	r0, r0, r0, lsl #5
   1b68c:	andeq	r0, r0, ip, lsl #5
   1b690:	muleq	r0, r8, r2
   1b694:	andeq	r0, r0, r4, lsr #5
   1b698:			; <UNDEFINED> instruction: 0x000002b0
   1b69c:			; <UNDEFINED> instruction: 0x000002bc
   1b6a0:	andeq	r0, r0, r8, asr #5
   1b6a4:	ldrdeq	r0, [r0], -r4
   1b6a8:	andeq	r0, r0, r0, ror #5
   1b6ac:	andeq	r0, r0, ip, ror #5
   1b6b0:	strdeq	r0, [r0], -r8
   1b6b4:	andeq	r0, r0, r4, lsl #6
   1b6b8:	andeq	r0, r0, r0, lsl r3
   1b6bc:	andeq	r0, r0, ip, lsl r3
   1b6c0:	vldr	d17, [pc, #792]	; 1b9e0 <flatcc_json_parser_double@@Base+0x9b8>
   1b6c4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b6c8:	add	r3, r7, #2
   1b6cc:	mov	r4, #1
   1b6d0:	cmp	r3, lr
   1b6d4:	beq	1b518 <flatcc_json_parser_double@@Base+0x4f0>
   1b6d8:	ldrb	r0, [r3]
   1b6dc:	mov	r2, #0
   1b6e0:	sub	r0, r0, #48	; 0x30
   1b6e4:	uxtb	r1, r0
   1b6e8:	cmp	r1, #9
   1b6ec:	bhi	1b51c <flatcc_json_parser_double@@Base+0x4f4>
   1b6f0:	cmp	r3, ip
   1b6f4:	beq	1b728 <flatcc_json_parser_double@@Base+0x700>
   1b6f8:	ldrb	r1, [r3, #1]
   1b6fc:	sub	r2, r1, #48	; 0x30
   1b700:	uxtb	r2, r2
   1b704:	cmp	r2, #9
   1b708:	bhi	1b728 <flatcc_json_parser_double@@Base+0x700>
   1b70c:	cmp	r0, #32768	; 0x8000
   1b710:	add	r3, r3, #1
   1b714:	addlt	r0, r0, r0, lsl #2
   1b718:	addlt	r0, r1, r0, lsl #1
   1b71c:	sublt	r0, r0, #48	; 0x30
   1b720:	cmp	ip, r3
   1b724:	bne	1b6f8 <flatcc_json_parser_double@@Base+0x6d0>
   1b728:	add	r7, r3, #1
   1b72c:	b	1b52c <flatcc_json_parser_double@@Base+0x504>
   1b730:	ldr	r0, [sp, #24]
   1b734:	ldr	r3, [sp, #20]
   1b738:	mov	r2, r4
   1b73c:	mov	r1, sl
   1b740:	str	r0, [sp]
   1b744:	str	r3, [sp, #4]
   1b748:	mov	r4, r3
   1b74c:	mov	r0, r8
   1b750:	mov	r3, r6
   1b754:	bl	192a8 <grisu3_diy_fp_encode_double@@Base>
   1b758:	cmp	r0, #0
   1b75c:	bne	1b578 <flatcc_json_parser_double@@Base+0x550>
   1b760:	add	r1, sp, #32
   1b764:	mov	r0, r9
   1b768:	bl	12998 <strtod@plt>
   1b76c:	vstr	d0, [r4]
   1b770:	ldr	r0, [sp, #32]
   1b774:	cmp	r0, r7
   1b778:	movcc	r7, r0
   1b77c:	b	1b58c <flatcc_json_parser_double@@Base+0x564>
   1b780:	vldr	d17, [pc, #440]	; 1b940 <flatcc_json_parser_double@@Base+0x918>
   1b784:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b788:	vldr	d17, [pc, #440]	; 1b948 <flatcc_json_parser_double@@Base+0x920>
   1b78c:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b790:	vldr	d17, [pc, #440]	; 1b950 <flatcc_json_parser_double@@Base+0x928>
   1b794:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b798:	vldr	d17, [pc, #440]	; 1b958 <flatcc_json_parser_double@@Base+0x930>
   1b79c:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7a0:	vldr	d17, [pc, #440]	; 1b960 <flatcc_json_parser_double@@Base+0x938>
   1b7a4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7a8:	vldr	d17, [pc, #440]	; 1b968 <flatcc_json_parser_double@@Base+0x940>
   1b7ac:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7b0:	vldr	d17, [pc, #440]	; 1b970 <flatcc_json_parser_double@@Base+0x948>
   1b7b4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7b8:	vldr	d17, [pc, #440]	; 1b978 <flatcc_json_parser_double@@Base+0x950>
   1b7bc:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7c0:	vldr	d17, [pc, #440]	; 1b980 <flatcc_json_parser_double@@Base+0x958>
   1b7c4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7c8:	vldr	d17, [pc, #440]	; 1b988 <flatcc_json_parser_double@@Base+0x960>
   1b7cc:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7d0:	vldr	d17, [pc, #440]	; 1b990 <flatcc_json_parser_double@@Base+0x968>
   1b7d4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7d8:	vldr	d17, [pc, #440]	; 1b998 <flatcc_json_parser_double@@Base+0x970>
   1b7dc:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7e0:	vldr	d17, [pc, #440]	; 1b9a0 <flatcc_json_parser_double@@Base+0x978>
   1b7e4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7e8:	vldr	d17, [pc, #440]	; 1b9a8 <flatcc_json_parser_double@@Base+0x980>
   1b7ec:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7f0:	vldr	d17, [pc, #440]	; 1b9b0 <flatcc_json_parser_double@@Base+0x988>
   1b7f4:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b7f8:	vldr	d17, [pc, #440]	; 1b9b8 <flatcc_json_parser_double@@Base+0x990>
   1b7fc:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b800:	vldr	d17, [pc, #440]	; 1b9c0 <flatcc_json_parser_double@@Base+0x998>
   1b804:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b808:	vldr	d17, [pc, #440]	; 1b9c8 <flatcc_json_parser_double@@Base+0x9a0>
   1b80c:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b810:	vldr	d17, [pc, #440]	; 1b9d0 <flatcc_json_parser_double@@Base+0x9a8>
   1b814:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b818:	vldr	d17, [pc, #440]	; 1b9d8 <flatcc_json_parser_double@@Base+0x9b0>
   1b81c:	b	1b824 <flatcc_json_parser_double@@Base+0x7fc>
   1b820:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b824:	vdiv.f64	d16, d16, d17
   1b828:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b82c:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b830:	vmul.f64	d16, d16, d17
   1b834:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b838:	vldr	d17, [pc, #408]	; 1b9d8 <flatcc_json_parser_double@@Base+0x9b0>
   1b83c:	vmul.f64	d16, d16, d17
   1b840:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b844:	vldr	d17, [pc, #388]	; 1b9d0 <flatcc_json_parser_double@@Base+0x9a8>
   1b848:	vmul.f64	d16, d16, d17
   1b84c:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b850:	vldr	d17, [pc, #368]	; 1b9c8 <flatcc_json_parser_double@@Base+0x9a0>
   1b854:	vmul.f64	d16, d16, d17
   1b858:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b85c:	vldr	d17, [pc, #348]	; 1b9c0 <flatcc_json_parser_double@@Base+0x998>
   1b860:	vmul.f64	d16, d16, d17
   1b864:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b868:	vldr	d17, [pc, #328]	; 1b9b8 <flatcc_json_parser_double@@Base+0x990>
   1b86c:	vmul.f64	d16, d16, d17
   1b870:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b874:	vldr	d17, [pc, #308]	; 1b9b0 <flatcc_json_parser_double@@Base+0x988>
   1b878:	vmul.f64	d16, d16, d17
   1b87c:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b880:	vldr	d17, [pc, #288]	; 1b9a8 <flatcc_json_parser_double@@Base+0x980>
   1b884:	vmul.f64	d16, d16, d17
   1b888:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b88c:	vldr	d17, [pc, #268]	; 1b9a0 <flatcc_json_parser_double@@Base+0x978>
   1b890:	vmul.f64	d16, d16, d17
   1b894:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b898:	vldr	d17, [pc, #248]	; 1b998 <flatcc_json_parser_double@@Base+0x970>
   1b89c:	vmul.f64	d16, d16, d17
   1b8a0:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8a4:	vldr	d17, [pc, #228]	; 1b990 <flatcc_json_parser_double@@Base+0x968>
   1b8a8:	vmul.f64	d16, d16, d17
   1b8ac:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8b0:	vldr	d17, [pc, #208]	; 1b988 <flatcc_json_parser_double@@Base+0x960>
   1b8b4:	vmul.f64	d16, d16, d17
   1b8b8:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8bc:	vldr	d17, [pc, #188]	; 1b980 <flatcc_json_parser_double@@Base+0x958>
   1b8c0:	vmul.f64	d16, d16, d17
   1b8c4:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8c8:	vldr	d17, [pc, #168]	; 1b978 <flatcc_json_parser_double@@Base+0x950>
   1b8cc:	vmul.f64	d16, d16, d17
   1b8d0:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8d4:	vldr	d17, [pc, #148]	; 1b970 <flatcc_json_parser_double@@Base+0x948>
   1b8d8:	vmul.f64	d16, d16, d17
   1b8dc:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8e0:	vldr	d17, [pc, #128]	; 1b968 <flatcc_json_parser_double@@Base+0x940>
   1b8e4:	vmul.f64	d16, d16, d17
   1b8e8:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8ec:	vldr	d17, [pc, #108]	; 1b960 <flatcc_json_parser_double@@Base+0x938>
   1b8f0:	vmul.f64	d16, d16, d17
   1b8f4:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b8f8:	vldr	d17, [pc, #88]	; 1b958 <flatcc_json_parser_double@@Base+0x930>
   1b8fc:	vmul.f64	d16, d16, d17
   1b900:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b904:	vldr	d17, [pc, #68]	; 1b950 <flatcc_json_parser_double@@Base+0x928>
   1b908:	vmul.f64	d16, d16, d17
   1b90c:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b910:	vldr	d17, [pc, #48]	; 1b948 <flatcc_json_parser_double@@Base+0x920>
   1b914:	vmul.f64	d16, d16, d17
   1b918:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b91c:	vldr	d17, [pc, #28]	; 1b940 <flatcc_json_parser_double@@Base+0x918>
   1b920:	vmul.f64	d16, d16, d17
   1b924:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b928:	vldr	d17, [pc, #176]	; 1b9e0 <flatcc_json_parser_double@@Base+0x9b8>
   1b92c:	vmul.f64	d16, d16, d17
   1b930:	b	1b570 <flatcc_json_parser_double@@Base+0x548>
   1b934:	nop	{0}
   1b938:	andeq	r0, r0, r0
   1b93c:	svcvc	0x00f00000	; IMB
   1b940:	usatle	lr, #2, r0, asr #30
   1b944:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1b948:	ldmvc	r5!, {r6, sl, fp, pc}
   1b94c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1b950:	addsvs	r3, r1, r0, lsl #26
   1b954:	mvnmi	r5, #228, 16	; 0xe40000
   1b958:	strbvs	ip, [lr, -r0, lsl #16]
   1b95c:			; <UNDEFINED> instruction: 0x43abc16d
   1b960:	ldrbhi	sl, [r8]
   1b964:	cmnmi	r6, #1459617792	; 0x57000000
   1b968:	strbcc	r8, [r0, r0]!
   1b96c:	movtmi	ip, #4985	; 0x1379
   1b970:	ldrtcs	r0, [r4], -r0
   1b974:	movwmi	r6, #52213	; 0xcbf5
   1b978:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1b97c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1b980:	strb	r0, [r0, #-0]
   1b984:	adcmi	r3, r2, #156	; 0x9c
   1b988:	andge	r0, r0, #0
   1b98c:	rsbmi	r1, sp, #148, 20	; 0x94000
   1b990:	stmda	r0, {}	; <UNPREDICTABLE>
   1b994:	eorsmi	r4, r7, #7733248	; 0x760000
   1b998:	andcs	r0, r0, r0
   1b99c:	andmi	sl, r2, #95	; 0x5f
   1b9a0:	andeq	r0, r0, r0
   1b9a4:	bicmi	ip, sp, r5, ror #26
   1b9a8:	andeq	r0, r0, r0
   1b9ac:	orrsmi	sp, r7, r4, lsl #15
   1b9b0:	andeq	r0, r0, r0
   1b9b4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1b9b8:	andeq	r0, r0, r0
   1b9bc:	smlawbmi	lr, r0, r4, r8
   1b9c0:	andeq	r0, r0, r0
   1b9c4:	rscsmi	r6, r8, r0, lsl #20
   1b9c8:	andeq	r0, r0, r0
   1b9cc:	sbcmi	r8, r3, r0, lsl #16
   1b9d0:	andeq	r0, r0, r0
   1b9d4:	addmi	r4, pc, r0
   1b9d8:	andeq	r0, r0, r0
   1b9dc:	subsmi	r0, r9, r0
   1b9e0:			; <UNDEFINED> instruction: 0x064dd592
   1b9e4:	strmi	pc, [r0], #207	; 0xcf

0001b9e8 <flatcc_json_parser_float@@Base>:
   1b9e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b9ec:	add	fp, sp, #24
   1b9f0:	vpush	{d8-d9}
   1b9f4:	sub	sp, sp, #8
   1b9f8:	mov	r8, r0
   1b9fc:	mov	r0, #0
   1ba00:	mov	r6, r1
   1ba04:	cmp	r1, r2
   1ba08:	str	r0, [r3]
   1ba0c:	beq	1bae4 <flatcc_json_parser_float@@Base+0xfc>
   1ba10:	mov	r0, r6
   1ba14:	mov	r5, r2
   1ba18:	mov	r7, r3
   1ba1c:	ldrb	r1, [r0], #1
   1ba20:	cmp	r1, #45	; 0x2d
   1ba24:	movne	r0, r6
   1ba28:	sub	r2, r2, r0
   1ba2c:	cmp	r2, #2
   1ba30:	blt	1ba70 <flatcc_json_parser_float@@Base+0x88>
   1ba34:	sub	r1, r1, #45	; 0x2d
   1ba38:	clz	r1, r1
   1ba3c:	lsr	r1, r1, #5
   1ba40:	ldrb	r1, [r6, r1]
   1ba44:	cmp	r1, #46	; 0x2e
   1ba48:	beq	1ba60 <flatcc_json_parser_float@@Base+0x78>
   1ba4c:	cmp	r1, #48	; 0x30
   1ba50:	bne	1ba70 <flatcc_json_parser_float@@Base+0x88>
   1ba54:	ldrb	r0, [r0, #1]
   1ba58:	cmp	r0, #48	; 0x30
   1ba5c:	bne	1ba70 <flatcc_json_parser_float@@Base+0x88>
   1ba60:	ldr	r0, [r8, #24]
   1ba64:	cmp	r0, #0
   1ba68:	bne	1bb10 <flatcc_json_parser_float@@Base+0x128>
   1ba6c:	b	1baf4 <flatcc_json_parser_float@@Base+0x10c>
   1ba70:	sub	r1, r5, r6
   1ba74:	mov	r2, sp
   1ba78:	mov	r0, r6
   1ba7c:	bl	1b120 <flatcc_json_parser_double@@Base+0xf8>
   1ba80:	vldr	d16, [sp]
   1ba84:	mov	r4, r0
   1ba88:	add	r0, pc, #148	; 0x94
   1ba8c:	vcmpe.f64	d16, #0.0
   1ba90:	vcvt.f32.f64	s16, d16
   1ba94:	vmrs	APSR_nzcv, fpscr
   1ba98:	addmi	r0, r0, #4
   1ba9c:	vldr	s18, [r0]
   1baa0:	vmov.f32	s0, s16
   1baa4:	bl	12908 <__isinff@plt>
   1baa8:	cmp	r0, #0
   1baac:	vseleq.f32	s0, s16, s18
   1bab0:	movne	r4, r6
   1bab4:	cmp	r4, #0
   1bab8:	cmpne	r4, r6
   1babc:	vstr	s0, [r7]
   1bac0:	bne	1bb14 <flatcc_json_parser_float@@Base+0x12c>
   1bac4:	bl	12908 <__isinff@plt>
   1bac8:	ldr	r1, [r8, #24]
   1bacc:	cmp	r0, #0
   1bad0:	beq	1baec <flatcc_json_parser_float@@Base+0x104>
   1bad4:	cmp	r1, #0
   1bad8:	bne	1bb10 <flatcc_json_parser_float@@Base+0x128>
   1badc:	mov	r0, #7
   1bae0:	b	1baf8 <flatcc_json_parser_float@@Base+0x110>
   1bae4:	mov	r4, r6
   1bae8:	b	1bb14 <flatcc_json_parser_float@@Base+0x12c>
   1baec:	cmp	r1, #0
   1baf0:	bne	1bb10 <flatcc_json_parser_float@@Base+0x128>
   1baf4:	mov	r0, #6
   1baf8:	str	r6, [r8, #36]	; 0x24
   1bafc:	ldr	r1, [r8, #4]
   1bb00:	sub	r1, r6, r1
   1bb04:	add	r1, r1, #1
   1bb08:	str	r1, [r8, #20]
   1bb0c:	str	r0, [r8, #24]
   1bb10:	mov	r4, r5
   1bb14:	mov	r0, r4
   1bb18:	sub	sp, fp, #40	; 0x28
   1bb1c:	vpop	{d8-d9}
   1bb20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bb24:	svcvc	0x00800000
   1bb28:			; <UNDEFINED> instruction: 0xff800000

0001bb2c <flatcc_json_parser_integer@@Base>:
   1bb2c:	push	{r4, r5, r6, r7, fp, lr}
   1bb30:	add	fp, sp, #16
   1bb34:	mov	ip, r1
   1bb38:	cmp	r1, r2
   1bb3c:	beq	1bc28 <flatcc_json_parser_integer@@Base+0xfc>
   1bb40:	ldrb	r1, [ip]
   1bb44:	mov	r4, #0
   1bb48:	sub	r1, r1, #45	; 0x2d
   1bb4c:	clz	r1, r1
   1bb50:	lsr	r1, r1, #5
   1bb54:	str	r1, [r3]
   1bb58:	add	r1, ip, r1
   1bb5c:	cmp	r1, r2
   1bb60:	beq	1bc14 <flatcc_json_parser_integer@@Base+0xe8>
   1bb64:	mov	lr, #10
   1bb68:	mov	r5, #0
   1bb6c:	ldrb	r6, [r1]
   1bb70:	sub	r7, r6, #48	; 0x30
   1bb74:	uxtb	r7, r7
   1bb78:	cmp	r7, #9
   1bb7c:	bhi	1bc30 <flatcc_json_parser_integer@@Base+0x104>
   1bb80:	add	r7, r5, r5, lsl #2
   1bb84:	lsl	r7, r7, #1
   1bb88:	umlal	r6, r7, r4, lr
   1bb8c:	subs	r6, r6, #48	; 0x30
   1bb90:	sbc	r7, r7, #0
   1bb94:	subs	r4, r6, r4
   1bb98:	sbcs	r4, r7, r5
   1bb9c:	bcc	1bc40 <flatcc_json_parser_integer@@Base+0x114>
   1bba0:	add	r1, r1, #1
   1bba4:	mov	r4, r6
   1bba8:	mov	r5, r7
   1bbac:	cmp	r2, r1
   1bbb0:	bne	1bb6c <flatcc_json_parser_integer@@Base+0x40>
   1bbb4:	mov	r3, #0
   1bbb8:	mov	r1, r2
   1bbbc:	mov	r4, r6
   1bbc0:	mov	r5, r7
   1bbc4:	cmp	r1, ip
   1bbc8:	beq	1bc28 <flatcc_json_parser_integer@@Base+0xfc>
   1bbcc:	cmp	r3, #0
   1bbd0:	beq	1bc5c <flatcc_json_parser_integer@@Base+0x130>
   1bbd4:	ldrb	r3, [r1]
   1bbd8:	cmp	r3, #46	; 0x2e
   1bbdc:	cmpne	r3, #101	; 0x65
   1bbe0:	bne	1bc54 <flatcc_json_parser_integer@@Base+0x128>
   1bbe4:	ldr	r3, [r0, #24]
   1bbe8:	cmp	r3, #0
   1bbec:	bne	1bc4c <flatcc_json_parser_integer@@Base+0x120>
   1bbf0:	str	r1, [r0, #36]	; 0x24
   1bbf4:	mov	r3, #12
   1bbf8:	ldr	r7, [r0, #4]
   1bbfc:	sub	r1, r1, r7
   1bc00:	add	r1, r1, #1
   1bc04:	str	r1, [r0, #20]
   1bc08:	str	r3, [r0, #24]
   1bc0c:	mov	r0, r2
   1bc10:	pop	{r4, r5, r6, r7, fp, pc}
   1bc14:	mov	r1, r2
   1bc18:	mov	r5, #0
   1bc1c:	mov	r3, #0
   1bc20:	cmp	r1, ip
   1bc24:	bne	1bbcc <flatcc_json_parser_integer@@Base+0xa0>
   1bc28:	mov	r0, ip
   1bc2c:	pop	{r4, r5, r6, r7, fp, pc}
   1bc30:	mov	r3, #1
   1bc34:	cmp	r1, ip
   1bc38:	bne	1bbcc <flatcc_json_parser_integer@@Base+0xa0>
   1bc3c:	b	1bc28 <flatcc_json_parser_integer@@Base+0xfc>
   1bc40:	ldr	r7, [r0, #24]
   1bc44:	cmp	r7, #0
   1bc48:	beq	1bc70 <flatcc_json_parser_integer@@Base+0x144>
   1bc4c:	mov	r0, r2
   1bc50:	pop	{r4, r5, r6, r7, fp, pc}
   1bc54:	cmp	r3, #69	; 0x45
   1bc58:	beq	1bbe4 <flatcc_json_parser_integer@@Base+0xb8>
   1bc5c:	ldr	r0, [fp, #8]
   1bc60:	mov	ip, r1
   1bc64:	strd	r4, [r0]
   1bc68:	mov	r0, ip
   1bc6c:	pop	{r4, r5, r6, r7, fp, pc}
   1bc70:	str	r1, [r0, #36]	; 0x24
   1bc74:	cmp	r3, #0
   1bc78:	mov	r7, #8
   1bc7c:	ldr	r3, [r0, #4]
   1bc80:	movweq	r7, #7
   1bc84:	sub	r1, r1, r3
   1bc88:	add	r1, r1, #1
   1bc8c:	str	r1, [r0, #20]
   1bc90:	str	r7, [r0, #24]
   1bc94:	mov	r0, r2
   1bc98:	pop	{r4, r5, r6, r7, fp, pc}

0001bc9c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1bc9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bca0:	add	fp, sp, #28
   1bca4:	sub	sp, sp, #28
   1bca8:	ldr	r9, [fp, #8]
   1bcac:	mov	r6, r3
   1bcb0:	mov	r4, r2
   1bcb4:	mov	r5, r0
   1bcb8:	cmp	r1, r2
   1bcbc:	beq	1bd04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1bcc0:	ldrb	r0, [r1]
   1bcc4:	cmp	r0, #34	; 0x22
   1bcc8:	bne	1bd04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1bccc:	add	sl, r1, #1
   1bcd0:	cmp	sl, r4
   1bcd4:	beq	1bd2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bcd8:	mov	r7, sl
   1bcdc:	ldrb	r1, [r7]
   1bce0:	cmp	r1, #32
   1bce4:	bcc	1bf48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   1bce8:	cmp	r1, #34	; 0x22
   1bcec:	cmpne	r1, #92	; 0x5c
   1bcf0:	beq	1bda0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x104>
   1bcf4:	add	r7, r7, #1
   1bcf8:	cmp	r4, r7
   1bcfc:	bne	1bcdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1bd00:	b	1bd2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bd04:	ldr	r0, [r5, #24]
   1bd08:	cmp	r0, #0
   1bd0c:	bne	1bd2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bd10:	str	r1, [r5, #36]	; 0x24
   1bd14:	mov	r0, #16
   1bd18:	ldr	r2, [r5, #4]
   1bd1c:	sub	r1, r1, r2
   1bd20:	add	r1, r1, #1
   1bd24:	str	r1, [r5, #20]
   1bd28:	str	r0, [r5, #24]
   1bd2c:	ldr	r0, [r5, #24]
   1bd30:	cmp	r0, #0
   1bd34:	mov	r0, r4
   1bd38:	bne	1bd5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bd3c:	str	r4, [r5, #36]	; 0x24
   1bd40:	mov	r0, #20
   1bd44:	ldr	r1, [r5, #4]
   1bd48:	sub	r1, r4, r1
   1bd4c:	add	r1, r1, #1
   1bd50:	str	r1, [r5, #20]
   1bd54:	str	r0, [r5, #24]
   1bd58:	mov	r0, r4
   1bd5c:	mov	r1, #0
   1bd60:	str	r1, [r6]
   1bd64:	ldr	r1, [r5, #24]
   1bd68:	cmp	r1, #0
   1bd6c:	bne	1bd94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1bd70:	str	r0, [r5, #36]	; 0x24
   1bd74:	cmp	r9, #0
   1bd78:	mov	r1, #31
   1bd7c:	ldr	r2, [r5, #4]
   1bd80:	movwne	r1, #32
   1bd84:	sub	r0, r0, r2
   1bd88:	add	r0, r0, #1
   1bd8c:	str	r0, [r5, #20]
   1bd90:	str	r1, [r5, #24]
   1bd94:	mov	r0, r4
   1bd98:	sub	sp, fp, #28
   1bd9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bda0:	cmp	r4, r7
   1bda4:	mov	r0, r4
   1bda8:	beq	1bd5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bdac:	cmp	r1, #34	; 0x22
   1bdb0:	bne	1bddc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   1bdb4:	sub	r1, r7, sl
   1bdb8:	and	r0, r1, #3
   1bdbc:	str	r1, [sp, #20]
   1bdc0:	lsr	r1, r1, #2
   1bdc4:	add	r8, r1, r1, lsl #1
   1bdc8:	cmp	r0, #2
   1bdcc:	beq	1bde4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x148>
   1bdd0:	cmp	r0, #3
   1bdd4:	addeq	r8, r8, #2
   1bdd8:	b	1bde8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1bddc:	mov	r0, r7
   1bde0:	b	1bd5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bde4:	add	r8, r8, #1
   1bde8:	ldr	r0, [r5]
   1bdec:	mov	r1, #1
   1bdf0:	mov	r2, #1
   1bdf4:	mvn	r3, #0
   1bdf8:	bl	15ef4 <flatcc_builder_start_vector@@Base>
   1bdfc:	cmp	r0, #0
   1be00:	beq	1be38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   1be04:	mov	r0, #0
   1be08:	str	r0, [r6]
   1be0c:	ldr	r0, [r5, #24]
   1be10:	cmp	r0, #0
   1be14:	bne	1bd94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1be18:	mov	r0, #33	; 0x21
   1be1c:	str	r7, [r5, #36]	; 0x24
   1be20:	ldr	r1, [r5, #4]
   1be24:	sub	r1, r7, r1
   1be28:	add	r1, r1, #1
   1be2c:	str	r1, [r5, #20]
   1be30:	str	r0, [r5, #24]
   1be34:	b	1bd94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1be38:	ldr	r0, [r5]
   1be3c:	mov	r1, r8
   1be40:	bl	15330 <flatcc_builder_extend_vector@@Base>
   1be44:	cmp	r0, #0
   1be48:	beq	1be04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1be4c:	ldr	r2, [pc, #636]	; 1c0d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x434>
   1be50:	mov	r1, r8
   1be54:	ldr	r8, [pc, #632]	; 1c0d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x438>
   1be58:	str	r0, [sp]
   1be5c:	str	r0, [sp, #12]
   1be60:	ldr	r0, [sp, #20]
   1be64:	cmp	r9, #0
   1be68:	add	lr, sp, #24
   1be6c:	mov	ip, sl
   1be70:	str	r1, [sp, #4]
   1be74:	add	r2, pc, r2
   1be78:	add	r8, pc, r8
   1be7c:	movne	r8, r2
   1be80:	cmp	r1, #0
   1be84:	mvneq	r1, #0
   1be88:	str	r1, [sp, #16]
   1be8c:	mov	r1, #0
   1be90:	str	r0, [sp, #8]
   1be94:	cmp	r0, r1
   1be98:	bne	1beb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1be9c:	b	1bf6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   1bea0:	add	r1, r1, #1
   1bea4:	cmp	r1, #4
   1bea8:	bcs	1bee0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   1beac:	cmp	r0, r1
   1beb0:	beq	1bf6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   1beb4:	ldrb	r2, [ip, r1]
   1beb8:	ldrb	r3, [r8, r2]
   1bebc:	cmp	r3, #64	; 0x40
   1bec0:	strb	r3, [lr, r1]
   1bec4:	bcc	1bea0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   1bec8:	cmp	r3, #65	; 0x41
   1becc:	bne	1bfb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x31c>
   1bed0:	sub	r1, r1, #1
   1bed4:	sub	r0, r0, #1
   1bed8:	add	ip, ip, #1
   1bedc:	b	1bea0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   1bee0:	ldr	lr, [sp, #16]
   1bee4:	cmp	lr, #3
   1bee8:	bcc	1c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b0>
   1beec:	ldrb	r2, [sp, #25]
   1bef0:	ldrb	r1, [sp, #24]
   1bef4:	subs	lr, lr, #3
   1bef8:	sub	r0, r0, #4
   1befc:	add	ip, ip, #4
   1bf00:	str	lr, [sp, #16]
   1bf04:	add	lr, sp, #24
   1bf08:	lsr	r3, r2, #4
   1bf0c:	orr	r1, r3, r1, lsl #2
   1bf10:	ldr	r3, [sp, #12]
   1bf14:	strb	r1, [r3]
   1bf18:	ldrb	r1, [sp, #26]
   1bf1c:	lsr	r1, r1, #2
   1bf20:	orr	r1, r1, r2, lsl #4
   1bf24:	strb	r1, [r3, #1]
   1bf28:	ldrb	r1, [sp, #26]
   1bf2c:	ldrb	r2, [sp, #27]
   1bf30:	orr	r1, r2, r1, lsl #6
   1bf34:	strb	r1, [r3, #2]
   1bf38:	add	r3, r3, #3
   1bf3c:	str	r3, [sp, #12]
   1bf40:	bne	1be8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1bf44:	b	1c038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x39c>
   1bf48:	ldr	r0, [r5, #24]
   1bf4c:	cmp	r0, #0
   1bf50:	mov	r0, r4
   1bf54:	bne	1bd5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bf58:	str	r7, [r5, #36]	; 0x24
   1bf5c:	mov	r0, #17
   1bf60:	ldr	r1, [r5, #4]
   1bf64:	sub	r1, r7, r1
   1bf68:	b	1bd4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xb0>
   1bf6c:	mov	r1, r0
   1bf70:	mov	r3, r0
   1bf74:	ldr	r2, [sp, #16]
   1bf78:	sub	r0, r0, r3
   1bf7c:	cmp	r1, #0
   1bf80:	beq	1c038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x39c>
   1bf84:	cmp	r1, #3
   1bf88:	beq	1bff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   1bf8c:	cmp	r1, #2
   1bf90:	bne	1c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b0>
   1bf94:	ldrb	r1, [sp, #25]
   1bf98:	tst	r1, #15
   1bf9c:	bne	1c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b0>
   1bfa0:	ldrb	r2, [sp, #24]
   1bfa4:	lsl	r2, r2, #2
   1bfa8:	orr	r1, r2, r1, lsr #4
   1bfac:	ldr	r2, [sp, #12]
   1bfb0:	strb	r1, [r2], #1
   1bfb4:	b	1c034 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x398>
   1bfb8:	cmp	r3, #66	; 0x42
   1bfbc:	bne	1c0b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x418>
   1bfc0:	add	r2, r1, #1
   1bfc4:	mov	r3, r2
   1bfc8:	cmp	r2, r0
   1bfcc:	bcs	1bf74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1bfd0:	cmp	r3, #7
   1bfd4:	bhi	1bf74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1bfd8:	ldrb	r2, [ip, r3]
   1bfdc:	ldrb	r2, [r8, r2]
   1bfe0:	sub	r2, r2, #65	; 0x41
   1bfe4:	uxtb	lr, r2
   1bfe8:	add	r2, r3, #1
   1bfec:	cmp	lr, #2
   1bff0:	bcc	1bfc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x328>
   1bff4:	b	1bf74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1bff8:	cmp	r2, #2
   1bffc:	bcc	1c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b0>
   1c000:	ldrb	r1, [sp, #26]
   1c004:	ands	r2, r1, #3
   1c008:	bne	1c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b0>
   1c00c:	ldrb	r3, [sp, #25]
   1c010:	ldrb	ip, [sp, #24]
   1c014:	lsl	r2, r3, #4
   1c018:	orr	r1, r2, r1, lsr #2
   1c01c:	ldr	r2, [sp, #12]
   1c020:	strb	r1, [r2, #1]
   1c024:	lsr	r1, r3, #4
   1c028:	orr	r1, r1, ip, lsl #2
   1c02c:	strb	r1, [r2]
   1c030:	add	r2, r2, #2
   1c034:	str	r2, [sp, #12]
   1c038:	cmp	r0, #0
   1c03c:	beq	1c060 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c4>
   1c040:	mov	r1, r0
   1c044:	ldr	r0, [sp, #20]
   1c048:	b	1c054 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   1c04c:	ldr	r0, [sp, #20]
   1c050:	ldr	r1, [sp, #8]
   1c054:	sub	r0, r0, r1
   1c058:	add	r0, sl, r0
   1c05c:	b	1bd5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1c060:	ldr	r0, [sp]
   1c064:	ldr	r1, [sp, #12]
   1c068:	sub	r0, r1, r0
   1c06c:	ldr	r1, [sp, #4]
   1c070:	cmp	r1, r0
   1c074:	bls	1c08c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
   1c078:	sub	r1, r1, r0
   1c07c:	ldr	r0, [r5]
   1c080:	bl	15ce0 <flatcc_builder_truncate_vector@@Base>
   1c084:	cmp	r0, #0
   1c088:	bne	1be04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1c08c:	ldr	r0, [r5]
   1c090:	bl	1716c <flatcc_builder_end_vector@@Base>
   1c094:	cmp	r0, #0
   1c098:	str	r0, [r6]
   1c09c:	beq	1be04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1c0a0:	ldrb	r0, [r7]
   1c0a4:	cmp	r0, #34	; 0x22
   1c0a8:	bne	1c0bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x420>
   1c0ac:	add	r4, r7, #1
   1c0b0:	b	1bd94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1c0b4:	mov	r3, r1
   1c0b8:	b	1bf74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1c0bc:	ldr	r0, [r5, #24]
   1c0c0:	cmp	r0, #0
   1c0c4:	bne	1bd94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1c0c8:	mov	r0, #20
   1c0cc:	b	1be1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1c0d0:	andeq	r3, r0, r4, ror sp
   1c0d4:	andeq	r3, r0, r0, ror ip

0001c0d8 <flatcc_json_parser_build_string@@Base>:
   1c0d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0dc:	add	fp, sp, #28
   1c0e0:	sub	sp, sp, #4
   1c0e4:	mov	sl, r3
   1c0e8:	mov	r4, r2
   1c0ec:	mov	r5, r0
   1c0f0:	cmp	r1, r2
   1c0f4:	beq	1c144 <flatcc_json_parser_build_string@@Base+0x6c>
   1c0f8:	ldrb	r0, [r1]
   1c0fc:	cmp	r0, #34	; 0x22
   1c100:	bne	1c144 <flatcc_json_parser_build_string@@Base+0x6c>
   1c104:	add	r1, r1, #1
   1c108:	mov	r6, r4
   1c10c:	cmp	r1, r4
   1c110:	beq	1c174 <flatcc_json_parser_build_string@@Base+0x9c>
   1c114:	mov	r6, r1
   1c118:	ldrb	r0, [r6]
   1c11c:	cmp	r0, #32
   1c120:	bcc	1c370 <flatcc_json_parser_build_string@@Base+0x298>
   1c124:	cmp	r0, #34	; 0x22
   1c128:	cmpne	r0, #92	; 0x5c
   1c12c:	beq	1c290 <flatcc_json_parser_build_string@@Base+0x1b8>
   1c130:	add	r6, r6, #1
   1c134:	cmp	r4, r6
   1c138:	bne	1c118 <flatcc_json_parser_build_string@@Base+0x40>
   1c13c:	mov	r6, r1
   1c140:	b	1c174 <flatcc_json_parser_build_string@@Base+0x9c>
   1c144:	ldr	r0, [r5, #24]
   1c148:	mov	r6, r4
   1c14c:	cmp	r0, #0
   1c150:	bne	1c174 <flatcc_json_parser_build_string@@Base+0x9c>
   1c154:	str	r1, [r5, #36]	; 0x24
   1c158:	mov	r0, #16
   1c15c:	mov	r6, r4
   1c160:	ldr	r2, [r5, #4]
   1c164:	sub	r1, r1, r2
   1c168:	add	r1, r1, #1
   1c16c:	str	r1, [r5, #20]
   1c170:	str	r0, [r5, #24]
   1c174:	ldr	r0, [r5, #24]
   1c178:	cmp	r0, #0
   1c17c:	bne	1c19c <flatcc_json_parser_build_string@@Base+0xc4>
   1c180:	str	r4, [r5, #36]	; 0x24
   1c184:	mov	r0, #20
   1c188:	ldr	r1, [r5, #4]
   1c18c:	sub	r1, r4, r1
   1c190:	add	r1, r1, #1
   1c194:	str	r1, [r5, #20]
   1c198:	str	r0, [r5, #24]
   1c19c:	mov	r7, r4
   1c1a0:	ldr	r0, [r5]
   1c1a4:	bl	1624c <flatcc_builder_start_string@@Base>
   1c1a8:	cmp	r0, #0
   1c1ac:	beq	1c1c8 <flatcc_json_parser_build_string@@Base+0xf0>
   1c1b0:	mov	r4, r7
   1c1b4:	mov	r0, #0
   1c1b8:	str	r0, [sl]
   1c1bc:	mov	r0, r4
   1c1c0:	sub	sp, fp, #28
   1c1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1c8:	ldr	r0, [r5]
   1c1cc:	sub	r2, r7, r6
   1c1d0:	mov	r1, r6
   1c1d4:	bl	15b34 <flatcc_builder_append_string@@Base>
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c1b0 <flatcc_json_parser_build_string@@Base+0xd8>
   1c1e0:	cmp	r7, r4
   1c1e4:	mov	r6, r4
   1c1e8:	beq	1c314 <flatcc_json_parser_build_string@@Base+0x23c>
   1c1ec:	mov	r8, sp
   1c1f0:	add	r9, r8, #1
   1c1f4:	ldrb	r0, [r7]
   1c1f8:	cmp	r0, #34	; 0x22
   1c1fc:	beq	1c310 <flatcc_json_parser_build_string@@Base+0x238>
   1c200:	mov	r0, r5
   1c204:	mov	r1, r7
   1c208:	mov	r2, r4
   1c20c:	mov	r3, r8
   1c210:	bl	199bc <flatcc_json_parser_string_escape@@Base>
   1c214:	mov	r6, r0
   1c218:	ldr	r0, [r5]
   1c21c:	ldrb	r2, [sp]
   1c220:	mov	r1, r9
   1c224:	bl	15b34 <flatcc_builder_append_string@@Base>
   1c228:	cmp	r0, #0
   1c22c:	beq	1c368 <flatcc_json_parser_build_string@@Base+0x290>
   1c230:	cmp	r6, r4
   1c234:	beq	1c2b8 <flatcc_json_parser_build_string@@Base+0x1e0>
   1c238:	mov	r7, r6
   1c23c:	ldrb	r0, [r7]
   1c240:	cmp	r0, #32
   1c244:	bcc	1c2dc <flatcc_json_parser_build_string@@Base+0x204>
   1c248:	cmp	r0, #34	; 0x22
   1c24c:	cmpne	r0, #92	; 0x5c
   1c250:	beq	1c264 <flatcc_json_parser_build_string@@Base+0x18c>
   1c254:	add	r7, r7, #1
   1c258:	cmp	r4, r7
   1c25c:	bne	1c23c <flatcc_json_parser_build_string@@Base+0x164>
   1c260:	b	1c2b8 <flatcc_json_parser_build_string@@Base+0x1e0>
   1c264:	cmp	r4, r7
   1c268:	beq	1c308 <flatcc_json_parser_build_string@@Base+0x230>
   1c26c:	ldr	r0, [r5]
   1c270:	sub	r2, r7, r6
   1c274:	mov	r1, r6
   1c278:	bl	15b34 <flatcc_builder_append_string@@Base>
   1c27c:	cmp	r0, #0
   1c280:	beq	1c1b0 <flatcc_json_parser_build_string@@Base+0xd8>
   1c284:	cmp	r4, r7
   1c288:	bne	1c1f4 <flatcc_json_parser_build_string@@Base+0x11c>
   1c28c:	b	1c308 <flatcc_json_parser_build_string@@Base+0x230>
   1c290:	cmp	r4, r6
   1c294:	beq	1c37c <flatcc_json_parser_build_string@@Base+0x2a4>
   1c298:	cmp	r0, #34	; 0x22
   1c29c:	bne	1c2b0 <flatcc_json_parser_build_string@@Base+0x1d8>
   1c2a0:	ldr	r0, [r5]
   1c2a4:	sub	r2, r6, r1
   1c2a8:	bl	18620 <flatcc_builder_create_string@@Base>
   1c2ac:	b	1c31c <flatcc_json_parser_build_string@@Base+0x244>
   1c2b0:	mov	r7, r6
   1c2b4:	b	1c380 <flatcc_json_parser_build_string@@Base+0x2a8>
   1c2b8:	ldr	r0, [r5, #24]
   1c2bc:	mov	r6, r4
   1c2c0:	cmp	r0, #0
   1c2c4:	bne	1c314 <flatcc_json_parser_build_string@@Base+0x23c>
   1c2c8:	str	r4, [r5, #36]	; 0x24
   1c2cc:	mov	r0, #20
   1c2d0:	ldr	r1, [r5, #4]
   1c2d4:	sub	r1, r4, r1
   1c2d8:	b	1c2fc <flatcc_json_parser_build_string@@Base+0x224>
   1c2dc:	ldr	r0, [r5, #24]
   1c2e0:	mov	r6, r4
   1c2e4:	cmp	r0, #0
   1c2e8:	bne	1c314 <flatcc_json_parser_build_string@@Base+0x23c>
   1c2ec:	str	r7, [r5, #36]	; 0x24
   1c2f0:	mov	r0, #17
   1c2f4:	ldr	r1, [r5, #4]
   1c2f8:	sub	r1, r7, r1
   1c2fc:	add	r1, r1, #1
   1c300:	str	r1, [r5, #20]
   1c304:	str	r0, [r5, #24]
   1c308:	mov	r6, r4
   1c30c:	b	1c314 <flatcc_json_parser_build_string@@Base+0x23c>
   1c310:	mov	r6, r7
   1c314:	ldr	r0, [r5]
   1c318:	bl	187a4 <flatcc_builder_end_string@@Base>
   1c31c:	cmp	r6, r4
   1c320:	str	r0, [sl]
   1c324:	beq	1c33c <flatcc_json_parser_build_string@@Base+0x264>
   1c328:	ldrb	r0, [r6]
   1c32c:	cmp	r0, #34	; 0x22
   1c330:	bne	1c33c <flatcc_json_parser_build_string@@Base+0x264>
   1c334:	add	r4, r6, #1
   1c338:	b	1c1bc <flatcc_json_parser_build_string@@Base+0xe4>
   1c33c:	ldr	r0, [r5, #24]
   1c340:	cmp	r0, #0
   1c344:	bne	1c1bc <flatcc_json_parser_build_string@@Base+0xe4>
   1c348:	str	r6, [r5, #36]	; 0x24
   1c34c:	mov	r0, #20
   1c350:	ldr	r1, [r5, #4]
   1c354:	sub	r1, r6, r1
   1c358:	add	r1, r1, #1
   1c35c:	str	r1, [r5, #20]
   1c360:	str	r0, [r5, #24]
   1c364:	b	1c1bc <flatcc_json_parser_build_string@@Base+0xe4>
   1c368:	mov	r4, r6
   1c36c:	b	1c1b4 <flatcc_json_parser_build_string@@Base+0xdc>
   1c370:	ldr	r0, [r5, #24]
   1c374:	cmp	r0, #0
   1c378:	beq	1c388 <flatcc_json_parser_build_string@@Base+0x2b0>
   1c37c:	mov	r7, r4
   1c380:	mov	r6, r1
   1c384:	b	1c1a0 <flatcc_json_parser_build_string@@Base+0xc8>
   1c388:	str	r6, [r5, #36]	; 0x24
   1c38c:	mov	r0, #17
   1c390:	mov	r7, r4
   1c394:	ldr	r2, [r5, #4]
   1c398:	sub	r2, r6, r2
   1c39c:	add	r2, r2, #1
   1c3a0:	str	r2, [r5, #20]
   1c3a4:	str	r0, [r5, #24]
   1c3a8:	b	1c380 <flatcc_json_parser_build_string@@Base+0x2a8>

0001c3ac <flatcc_json_parser_prepare_unions@@Base>:
   1c3ac:	push	{r4, r5, r6, r7, fp, lr}
   1c3b0:	add	fp, sp, #16
   1c3b4:	mov	r6, r0
   1c3b8:	add	r0, r3, r3, lsl #1
   1c3bc:	mov	r5, r1
   1c3c0:	mov	r1, #8
   1c3c4:	mov	r7, r3
   1c3c8:	mov	r4, r2
   1c3cc:	add	r1, r1, r0, lsl #3
   1c3d0:	ldr	r0, [r6]
   1c3d4:	bl	145f8 <flatcc_builder_enter_user_frame@@Base>
   1c3d8:	mov	r1, r0
   1c3dc:	ldr	r0, [fp, #8]
   1c3e0:	cmp	r1, #0
   1c3e4:	str	r1, [r0]
   1c3e8:	beq	1c404 <flatcc_json_parser_prepare_unions@@Base+0x58>
   1c3ec:	ldr	r0, [r6]
   1c3f0:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1c3f4:	mov	r4, r5
   1c3f8:	str	r7, [r0]
   1c3fc:	mov	r0, r4
   1c400:	pop	{r4, r5, r6, r7, fp, pc}
   1c404:	ldr	r0, [r6, #24]
   1c408:	cmp	r0, #0
   1c40c:	beq	1c418 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1c410:	mov	r0, r4
   1c414:	pop	{r4, r5, r6, r7, fp, pc}
   1c418:	str	r5, [r6, #36]	; 0x24
   1c41c:	mov	r0, #33	; 0x21
   1c420:	ldr	r1, [r6, #4]
   1c424:	sub	r1, r5, r1
   1c428:	add	r1, r1, #1
   1c42c:	str	r1, [r6, #20]
   1c430:	str	r0, [r6, #24]
   1c434:	mov	r0, r4
   1c438:	pop	{r4, r5, r6, r7, fp, pc}

0001c43c <flatcc_json_parser_finalize_unions@@Base>:
   1c43c:	push	{r4, r5, r6, r7, fp, lr}
   1c440:	add	fp, sp, #16
   1c444:	mov	r6, r0
   1c448:	ldr	r0, [r0]
   1c44c:	mov	r7, r1
   1c450:	mov	r1, r3
   1c454:	mov	r5, r3
   1c458:	mov	r4, r2
   1c45c:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1c460:	ldr	r0, [r0, #4]
   1c464:	cmp	r0, #0
   1c468:	beq	1c498 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1c46c:	ldr	r0, [r6, #24]
   1c470:	cmp	r0, #0
   1c474:	bne	1c49c <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c478:	str	r7, [r6, #36]	; 0x24
   1c47c:	mov	r0, #27
   1c480:	ldr	r1, [r6, #4]
   1c484:	sub	r1, r7, r1
   1c488:	add	r1, r1, #1
   1c48c:	str	r1, [r6, #20]
   1c490:	str	r0, [r6, #24]
   1c494:	b	1c49c <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c498:	mov	r4, r7
   1c49c:	ldr	r0, [r6]
   1c4a0:	mov	r1, r5
   1c4a4:	bl	14720 <flatcc_builder_exit_user_frame_at@@Base>
   1c4a8:	mov	r0, r4
   1c4ac:	pop	{r4, r5, r6, r7, fp, pc}

0001c4b0 <flatcc_json_parser_union@@Base>:
   1c4b0:	push	{r4, r5, r6, r7, fp, lr}
   1c4b4:	add	fp, sp, #16
   1c4b8:	sub	sp, sp, #16
   1c4bc:	mov	r6, r1
   1c4c0:	mov	r5, r0
   1c4c4:	ldr	r0, [r0]
   1c4c8:	ldr	r1, [fp, #12]
   1c4cc:	mov	r7, r3
   1c4d0:	mov	r4, r2
   1c4d4:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1c4d8:	add	r2, r0, #8
   1c4dc:	add	r3, r7, r7, lsl #1
   1c4e0:	mov	r1, r2
   1c4e4:	ldr	r7, [r1, r3, lsl #3]!
   1c4e8:	cmp	r7, #0
   1c4ec:	beq	1c51c <flatcc_json_parser_union@@Base+0x6c>
   1c4f0:	ldr	r0, [r5, #24]
   1c4f4:	cmp	r0, #0
   1c4f8:	bne	1c5dc <flatcc_json_parser_union@@Base+0x12c>
   1c4fc:	mov	r0, #28
   1c500:	str	r6, [r5, #36]	; 0x24
   1c504:	ldr	r1, [r5, #4]
   1c508:	sub	r1, r6, r1
   1c50c:	add	r1, r1, #1
   1c510:	str	r1, [r5, #20]
   1c514:	str	r0, [r5, #24]
   1c518:	b	1c5dc <flatcc_json_parser_union@@Base+0x12c>
   1c51c:	add	r2, r2, r3, lsl #3
   1c520:	ldrb	r3, [r2, #12]
   1c524:	cmp	r3, #0
   1c528:	beq	1c598 <flatcc_json_parser_union@@Base+0xe8>
   1c52c:	ldrb	r3, [r2, #13]
   1c530:	cmp	r3, #0
   1c534:	strb	r3, [sp, #8]
   1c538:	beq	1c5d0 <flatcc_json_parser_union@@Base+0x120>
   1c53c:	ldr	r1, [r0, #4]
   1c540:	ldr	r7, [fp, #16]
   1c544:	mov	r2, r4
   1c548:	sub	r1, r1, #1
   1c54c:	str	r1, [r0, #4]
   1c550:	add	r0, sp, #8
   1c554:	mov	r1, r6
   1c558:	add	r0, r0, #4
   1c55c:	str	r0, [sp]
   1c560:	mov	r0, r5
   1c564:	blx	r7
   1c568:	cmp	r0, r4
   1c56c:	beq	1c5dc <flatcc_json_parser_union@@Base+0x12c>
   1c570:	mov	r6, r0
   1c574:	ldr	r1, [fp, #8]
   1c578:	ldr	r0, [r5]
   1c57c:	ldr	r2, [sp, #8]
   1c580:	ldr	r3, [sp, #12]
   1c584:	bl	175bc <flatcc_builder_table_add_union@@Base>
   1c588:	cmp	r0, #0
   1c58c:	bne	1c4f0 <flatcc_json_parser_union@@Base+0x40>
   1c590:	mov	r4, r6
   1c594:	b	1c5dc <flatcc_json_parser_union@@Base+0x12c>
   1c598:	ldr	r3, [r0, #4]
   1c59c:	add	r3, r3, #1
   1c5a0:	str	r3, [r0, #4]
   1c5a4:	ldr	r0, [r5, #16]
   1c5a8:	str	r0, [r2, #8]
   1c5ac:	ldr	r0, [r5, #4]
   1c5b0:	str	r0, [r2, #4]
   1c5b4:	str	r6, [r1]
   1c5b8:	mov	r0, r5
   1c5bc:	mov	r1, r6
   1c5c0:	mov	r2, r4
   1c5c4:	bl	1a2dc <flatcc_json_parser_generic_json@@Base>
   1c5c8:	mov	r4, r0
   1c5cc:	b	1c5dc <flatcc_json_parser_union@@Base+0x12c>
   1c5d0:	ldr	r0, [r5, #24]
   1c5d4:	cmp	r0, #0
   1c5d8:	beq	1c5e8 <flatcc_json_parser_union@@Base+0x138>
   1c5dc:	mov	r0, r4
   1c5e0:	sub	sp, fp, #16
   1c5e4:	pop	{r4, r5, r6, r7, fp, pc}
   1c5e8:	mov	r0, #25
   1c5ec:	b	1c500 <flatcc_json_parser_union@@Base+0x50>

0001c5f0 <flatcc_json_parser_union_type@@Base>:
   1c5f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5f4:	add	fp, sp, #28
   1c5f8:	sub	sp, sp, #20
   1c5fc:	mov	r8, r1
   1c600:	mov	r5, r0
   1c604:	ldr	r0, [r0]
   1c608:	ldr	r1, [fp, #12]
   1c60c:	mov	r6, r3
   1c610:	mov	r4, r2
   1c614:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1c618:	add	r3, r6, r6, lsl #1
   1c61c:	add	r2, r0, #8
   1c620:	mov	r9, r0
   1c624:	add	sl, r2, r3, lsl #3
   1c628:	mov	r0, sl
   1c62c:	ldrb	r1, [r0, #12]!
   1c630:	cmp	r1, #0
   1c634:	beq	1c664 <flatcc_json_parser_union_type@@Base+0x74>
   1c638:	ldr	r0, [r5, #24]
   1c63c:	cmp	r0, #0
   1c640:	bne	1c940 <flatcc_json_parser_union_type@@Base+0x350>
   1c644:	str	r8, [r5, #36]	; 0x24
   1c648:	mov	r0, #28
   1c64c:	ldr	r1, [r5, #4]
   1c650:	sub	r1, r8, r1
   1c654:	add	r1, r1, #1
   1c658:	str	r1, [r5, #20]
   1c65c:	str	r0, [r5, #24]
   1c660:	b	1c940 <flatcc_json_parser_union_type@@Base+0x350>
   1c664:	mov	r1, #1
   1c668:	mov	r6, #0
   1c66c:	mov	lr, sl
   1c670:	cmp	r8, r4
   1c674:	str	r3, [sp, #4]
   1c678:	str	r2, [sp, #8]
   1c67c:	strb	r1, [r0]
   1c680:	strb	r6, [lr, #13]!
   1c684:	beq	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c688:	mov	r2, r8
   1c68c:	ldrb	ip, [r2], #1
   1c690:	cmp	ip, #45	; 0x2d
   1c694:	movne	r2, r8
   1c698:	cmp	r2, r4
   1c69c:	beq	1c74c <flatcc_json_parser_union_type@@Base+0x15c>
   1c6a0:	mov	r6, #0
   1c6a4:	mov	r0, #10
   1c6a8:	mov	r7, #0
   1c6ac:	ldrb	r1, [r2]
   1c6b0:	sub	r3, r1, #48	; 0x30
   1c6b4:	uxtb	r3, r3
   1c6b8:	cmp	r3, #9
   1c6bc:	bhi	1c7d8 <flatcc_json_parser_union_type@@Base+0x1e8>
   1c6c0:	add	r3, r7, r7, lsl #2
   1c6c4:	lsl	r3, r3, #1
   1c6c8:	umlal	r1, r3, r6, r0
   1c6cc:	subs	r1, r1, #48	; 0x30
   1c6d0:	sbc	r3, r3, #0
   1c6d4:	subs	r6, r1, r6
   1c6d8:	sbcs	r7, r3, r7
   1c6dc:	bcc	1c7e8 <flatcc_json_parser_union_type@@Base+0x1f8>
   1c6e0:	add	r2, r2, #1
   1c6e4:	mov	r6, r1
   1c6e8:	mov	r7, r3
   1c6ec:	cmp	r4, r2
   1c6f0:	bne	1c6ac <flatcc_json_parser_union_type@@Base+0xbc>
   1c6f4:	mov	r0, #0
   1c6f8:	mov	r2, r4
   1c6fc:	mov	r6, r1
   1c700:	mov	r7, r3
   1c704:	cmp	r2, r8
   1c708:	beq	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c70c:	cmp	r0, #0
   1c710:	beq	1c764 <flatcc_json_parser_union_type@@Base+0x174>
   1c714:	ldrb	r0, [r2]
   1c718:	cmp	r0, #46	; 0x2e
   1c71c:	beq	1c72c <flatcc_json_parser_union_type@@Base+0x13c>
   1c720:	cmp	r0, #101	; 0x65
   1c724:	cmpne	r0, #69	; 0x45
   1c728:	bne	1c764 <flatcc_json_parser_union_type@@Base+0x174>
   1c72c:	ldr	r0, [r5, #24]
   1c730:	mov	r6, #0
   1c734:	mov	r7, #0
   1c738:	cmp	r0, #0
   1c73c:	mov	r0, r4
   1c740:	bne	1c828 <flatcc_json_parser_union_type@@Base+0x238>
   1c744:	mov	r0, #12
   1c748:	b	1c804 <flatcc_json_parser_union_type@@Base+0x214>
   1c74c:	mov	r2, r4
   1c750:	mov	r7, #0
   1c754:	mov	r0, #0
   1c758:	cmp	r2, r8
   1c75c:	bne	1c70c <flatcc_json_parser_union_type@@Base+0x11c>
   1c760:	b	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c764:	mov	r0, r2
   1c768:	cmp	r0, r8
   1c76c:	beq	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c770:	cmp	ip, #45	; 0x2d
   1c774:	bne	1c790 <flatcc_json_parser_union_type@@Base+0x1a0>
   1c778:	ldr	r1, [r5, #24]
   1c77c:	mov	r2, r4
   1c780:	cmp	r1, #0
   1c784:	bne	1c83c <flatcc_json_parser_union_type@@Base+0x24c>
   1c788:	mov	r1, #8
   1c78c:	b	1c7b0 <flatcc_json_parser_union_type@@Base+0x1c0>
   1c790:	subs	r1, r6, #256	; 0x100
   1c794:	sbcs	r1, r7, #0
   1c798:	bcc	1c834 <flatcc_json_parser_union_type@@Base+0x244>
   1c79c:	ldr	r1, [r5, #24]
   1c7a0:	mov	r2, r4
   1c7a4:	cmp	r1, #0
   1c7a8:	bne	1c83c <flatcc_json_parser_union_type@@Base+0x24c>
   1c7ac:	mov	r1, #7
   1c7b0:	str	r0, [r5, #36]	; 0x24
   1c7b4:	ldr	r2, [r5, #4]
   1c7b8:	sub	r0, r0, r2
   1c7bc:	mov	r2, r4
   1c7c0:	add	r0, r0, #1
   1c7c4:	str	r0, [r5, #20]
   1c7c8:	str	r1, [r5, #24]
   1c7cc:	cmp	r2, r8
   1c7d0:	bne	1c868 <flatcc_json_parser_union_type@@Base+0x278>
   1c7d4:	b	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c7d8:	mov	r0, #1
   1c7dc:	cmp	r2, r8
   1c7e0:	bne	1c70c <flatcc_json_parser_union_type@@Base+0x11c>
   1c7e4:	b	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c7e8:	ldr	r0, [r5, #24]
   1c7ec:	mov	r6, #0
   1c7f0:	mov	r7, #0
   1c7f4:	cmp	r0, #0
   1c7f8:	mov	r0, r4
   1c7fc:	bne	1c828 <flatcc_json_parser_union_type@@Base+0x238>
   1c800:	mov	r0, #8
   1c804:	str	r2, [r5, #36]	; 0x24
   1c808:	mov	r6, #0
   1c80c:	mov	r7, #0
   1c810:	ldr	r1, [r5, #4]
   1c814:	sub	r1, r2, r1
   1c818:	add	r1, r1, #1
   1c81c:	str	r1, [r5, #20]
   1c820:	str	r0, [r5, #24]
   1c824:	mov	r0, r4
   1c828:	cmp	r0, r8
   1c82c:	bne	1c770 <flatcc_json_parser_union_type@@Base+0x180>
   1c830:	b	1c844 <flatcc_json_parser_union_type@@Base+0x254>
   1c834:	mov	r2, r0
   1c838:	strb	r6, [lr]
   1c83c:	cmp	r2, r8
   1c840:	bne	1c868 <flatcc_json_parser_union_type@@Base+0x278>
   1c844:	ldr	r3, [fp, #16]
   1c848:	mov	r0, r5
   1c84c:	mov	r1, r8
   1c850:	mov	r2, r4
   1c854:	str	lr, [sp]
   1c858:	mov	r6, lr
   1c85c:	bl	1c978 <flatcc_json_parser_union_type@@Base+0x388>
   1c860:	mov	lr, r6
   1c864:	mov	r2, r0
   1c868:	ldr	r0, [sp, #8]
   1c86c:	ldr	r1, [sp, #4]
   1c870:	ldr	r1, [r0, r1, lsl #3]
   1c874:	cmp	r1, #0
   1c878:	beq	1c918 <flatcc_json_parser_union_type@@Base+0x328>
   1c87c:	ldr	r0, [r9, #4]
   1c880:	str	r2, [sp, #8]
   1c884:	cmp	r0, #0
   1c888:	beq	1c94c <flatcc_json_parser_union_type@@Base+0x35c>
   1c88c:	sub	r0, r0, #1
   1c890:	ldr	r6, [fp, #20]
   1c894:	mov	r2, r4
   1c898:	str	r0, [r9, #4]
   1c89c:	ldr	r0, [sl, #8]
   1c8a0:	ldr	r8, [r5, #4]
   1c8a4:	ldr	r7, [r5, #16]
   1c8a8:	str	r0, [r5, #16]
   1c8ac:	ldr	r0, [sl, #4]
   1c8b0:	str	r0, [r5, #4]
   1c8b4:	add	r0, sp, #12
   1c8b8:	ldrb	r3, [lr]
   1c8bc:	add	r0, r0, #4
   1c8c0:	str	r0, [sp]
   1c8c4:	mov	r0, r5
   1c8c8:	strb	r3, [sp, #12]
   1c8cc:	blx	r6
   1c8d0:	cmp	r0, r4
   1c8d4:	beq	1c940 <flatcc_json_parser_union_type@@Base+0x350>
   1c8d8:	ldr	r1, [fp, #8]
   1c8dc:	ldr	r0, [r5]
   1c8e0:	ldr	r2, [sp, #12]
   1c8e4:	ldr	r3, [sp, #16]
   1c8e8:	bl	175bc <flatcc_builder_table_add_union@@Base>
   1c8ec:	cmp	r0, #0
   1c8f0:	beq	1c934 <flatcc_json_parser_union_type@@Base+0x344>
   1c8f4:	ldr	r0, [r5, #24]
   1c8f8:	cmp	r0, #0
   1c8fc:	bne	1c940 <flatcc_json_parser_union_type@@Base+0x350>
   1c900:	ldr	r2, [sp, #8]
   1c904:	mov	r0, #28
   1c908:	str	r2, [r5, #36]	; 0x24
   1c90c:	ldr	r1, [r5, #4]
   1c910:	sub	r1, r2, r1
   1c914:	b	1c654 <flatcc_json_parser_union_type@@Base+0x64>
   1c918:	ldrb	r0, [lr]
   1c91c:	ldr	r1, [r9, #4]
   1c920:	mov	r4, r2
   1c924:	cmp	r0, #0
   1c928:	addne	r1, r1, #1
   1c92c:	str	r1, [r9, #4]
   1c930:	b	1c940 <flatcc_json_parser_union_type@@Base+0x350>
   1c934:	ldr	r4, [sp, #8]
   1c938:	str	r8, [r5, #4]
   1c93c:	str	r7, [r5, #16]
   1c940:	mov	r0, r4
   1c944:	sub	sp, fp, #28
   1c948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c94c:	ldr	r0, [pc, #24]	; 1c96c <flatcc_json_parser_union_type@@Base+0x37c>
   1c950:	ldr	r1, [pc, #24]	; 1c970 <flatcc_json_parser_union_type@@Base+0x380>
   1c954:	ldr	r3, [pc, #24]	; 1c974 <flatcc_json_parser_union_type@@Base+0x384>
   1c958:	movw	r2, #965	; 0x3c5
   1c95c:	add	r0, pc, r0
   1c960:	add	r1, pc, r1
   1c964:	add	r3, pc, r3
   1c968:	bl	129bc <__assert_fail@plt>
   1c96c:	andeq	r3, r0, r4, ror #13
   1c970:	andeq	r3, r0, pc, ror #13
   1c974:	andeq	r3, r0, ip, asr #14
   1c978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c97c:	add	fp, sp, #28
   1c980:	sub	sp, sp, #44	; 0x2c
   1c984:	mov	r4, r2
   1c988:	mov	r2, r1
   1c98c:	ldr	r1, [fp, #8]
   1c990:	mov	r5, r0
   1c994:	mov	r0, #0
   1c998:	cmp	r2, r4
   1c99c:	strb	r0, [r1]
   1c9a0:	beq	1ca04 <flatcc_json_parser_union_type@@Base+0x414>
   1c9a4:	ldrb	r0, [r2]
   1c9a8:	cmp	r0, #46	; 0x2e
   1c9ac:	beq	1c9c8 <flatcc_json_parser_union_type@@Base+0x3d8>
   1c9b0:	cmp	r0, #34	; 0x22
   1c9b4:	bne	1c9fc <flatcc_json_parser_union_type@@Base+0x40c>
   1c9b8:	mov	r0, #0
   1c9bc:	add	r1, r2, #1
   1c9c0:	str	r0, [r5, #12]
   1c9c4:	b	1ca08 <flatcc_json_parser_union_type@@Base+0x418>
   1c9c8:	ldr	r0, [r5, #24]
   1c9cc:	mov	r1, r4
   1c9d0:	cmp	r0, #0
   1c9d4:	bne	1ca08 <flatcc_json_parser_union_type@@Base+0x418>
   1c9d8:	str	r2, [r5, #36]	; 0x24
   1c9dc:	mov	r0, #5
   1c9e0:	ldr	r1, [r5, #4]
   1c9e4:	sub	r1, r2, r1
   1c9e8:	add	r1, r1, #1
   1c9ec:	str	r1, [r5, #20]
   1c9f0:	str	r0, [r5, #24]
   1c9f4:	mov	r1, r4
   1c9f8:	b	1ca08 <flatcc_json_parser_union_type@@Base+0x418>
   1c9fc:	mov	r0, #1
   1ca00:	str	r0, [r5, #12]
   1ca04:	mov	r1, r2
   1ca08:	ldr	r0, [r5, #12]
   1ca0c:	cmp	r0, #0
   1ca10:	beq	1ca24 <flatcc_json_parser_union_type@@Base+0x434>
   1ca14:	mov	r7, r1
   1ca18:	cmp	r7, r4
   1ca1c:	bne	1ca70 <flatcc_json_parser_union_type@@Base+0x480>
   1ca20:	b	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1ca24:	sub	r0, r4, r1
   1ca28:	cmp	r0, #2
   1ca2c:	blt	1ca50 <flatcc_json_parser_union_type@@Base+0x460>
   1ca30:	ldrb	r0, [r1]
   1ca34:	cmp	r0, #32
   1ca38:	bhi	1ca14 <flatcc_json_parser_union_type@@Base+0x424>
   1ca3c:	bne	1ca50 <flatcc_json_parser_union_type@@Base+0x460>
   1ca40:	mov	r7, r1
   1ca44:	ldrb	r0, [r7, #1]!
   1ca48:	cmp	r0, #32
   1ca4c:	bhi	1ca68 <flatcc_json_parser_union_type@@Base+0x478>
   1ca50:	mov	r0, r5
   1ca54:	mov	r2, r4
   1ca58:	mov	r6, r3
   1ca5c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1ca60:	mov	r3, r6
   1ca64:	mov	r7, r0
   1ca68:	cmp	r7, r4
   1ca6c:	beq	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1ca70:	add	r9, r3, #4
   1ca74:	mov	r6, #0
   1ca78:	add	sl, sp, #32
   1ca7c:	add	r8, sp, #28
   1ca80:	str	r3, [sp, #16]
   1ca84:	str	r9, [sp, #12]
   1ca88:	str	r6, [sp, #20]
   1ca8c:	mov	r6, r3
   1ca90:	ldr	r6, [r3]
   1ca94:	add	r0, sp, #24
   1ca98:	mov	r1, r7
   1ca9c:	mov	r2, r4
   1caa0:	mov	r3, r8
   1caa4:	str	sl, [sp]
   1caa8:	str	r0, [sp, #4]
   1caac:	mov	r0, r5
   1cab0:	blx	r6
   1cab4:	cmp	r0, r4
   1cab8:	beq	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1cabc:	cmp	r0, r7
   1cac0:	bne	1cad4 <flatcc_json_parser_union_type@@Base+0x4e4>
   1cac4:	ldr	r6, [r9], #4
   1cac8:	cmp	r6, #0
   1cacc:	bne	1ca94 <flatcc_json_parser_union_type@@Base+0x4a4>
   1cad0:	b	1cb44 <flatcc_json_parser_union_type@@Base+0x554>
   1cad4:	ldr	r6, [sp, #20]
   1cad8:	cmp	r6, #0
   1cadc:	beq	1caec <flatcc_json_parser_union_type@@Base+0x4fc>
   1cae0:	ldr	r1, [r5, #12]
   1cae4:	cmp	r1, #0
   1cae8:	bne	1cba0 <flatcc_json_parser_union_type@@Base+0x5b0>
   1caec:	ldr	r1, [sp, #28]
   1caf0:	cmp	r1, #0
   1caf4:	bne	1cb78 <flatcc_json_parser_union_type@@Base+0x588>
   1caf8:	ldr	r1, [sp, #32]
   1cafc:	ldr	r2, [sp, #36]	; 0x24
   1cb00:	subs	r3, r1, #256	; 0x100
   1cb04:	sbcs	r2, r2, #0
   1cb08:	bcs	1cb8c <flatcc_json_parser_union_type@@Base+0x59c>
   1cb0c:	ldr	r2, [fp, #8]
   1cb10:	ldr	r9, [sp, #12]
   1cb14:	add	r6, r6, #1
   1cb18:	mov	r7, r0
   1cb1c:	mov	r3, r2
   1cb20:	ldrb	r2, [r2]
   1cb24:	add	r1, r2, r1
   1cb28:	strb	r1, [r3]
   1cb2c:	ldr	r3, [sp, #16]
   1cb30:	ldr	r1, [sp, #24]
   1cb34:	cmp	r1, #0
   1cb38:	bne	1ca88 <flatcc_json_parser_union_type@@Base+0x498>
   1cb3c:	sub	sp, fp, #28
   1cb40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb44:	ldr	r0, [r5, #24]
   1cb48:	cmp	r0, #0
   1cb4c:	bne	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1cb50:	str	r7, [r5, #36]	; 0x24
   1cb54:	mov	r0, #23
   1cb58:	ldr	r1, [r5, #4]
   1cb5c:	sub	r1, r7, r1
   1cb60:	add	r1, r1, #1
   1cb64:	str	r1, [r5, #20]
   1cb68:	str	r0, [r5, #24]
   1cb6c:	mov	r0, r4
   1cb70:	sub	sp, fp, #28
   1cb74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb78:	ldr	r1, [r5, #24]
   1cb7c:	cmp	r1, #0
   1cb80:	bne	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1cb84:	mov	r1, #8
   1cb88:	b	1cbb0 <flatcc_json_parser_union_type@@Base+0x5c0>
   1cb8c:	ldr	r1, [r5, #24]
   1cb90:	cmp	r1, #0
   1cb94:	bne	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1cb98:	mov	r1, #7
   1cb9c:	b	1cbb0 <flatcc_json_parser_union_type@@Base+0x5c0>
   1cba0:	ldr	r1, [r5, #24]
   1cba4:	cmp	r1, #0
   1cba8:	bne	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>
   1cbac:	mov	r1, #14
   1cbb0:	str	r0, [r5, #36]	; 0x24
   1cbb4:	ldr	r2, [r5, #4]
   1cbb8:	sub	r0, r0, r2
   1cbbc:	add	r0, r0, #1
   1cbc0:	str	r0, [r5, #20]
   1cbc4:	str	r1, [r5, #24]
   1cbc8:	b	1cb6c <flatcc_json_parser_union_type@@Base+0x57c>

0001cbcc <flatcc_json_parser_union_vector@@Base>:
   1cbcc:	push	{r4, r5, r6, r7, fp, lr}
   1cbd0:	add	fp, sp, #16
   1cbd4:	sub	sp, sp, #16
   1cbd8:	mov	r6, r1
   1cbdc:	mov	r5, r0
   1cbe0:	ldr	r0, [r0]
   1cbe4:	ldr	r1, [fp, #12]
   1cbe8:	mov	r7, r3
   1cbec:	mov	r4, r2
   1cbf0:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1cbf4:	add	r2, r0, #8
   1cbf8:	add	r3, r7, r7, lsl #1
   1cbfc:	mov	r1, r2
   1cc00:	ldr	r7, [r1, r3, lsl #3]!
   1cc04:	cmp	r7, #0
   1cc08:	beq	1cc40 <flatcc_json_parser_union_vector@@Base+0x74>
   1cc0c:	ldr	r0, [r5, #24]
   1cc10:	cmp	r0, #0
   1cc14:	bne	1cc34 <flatcc_json_parser_union_vector@@Base+0x68>
   1cc18:	str	r6, [r5, #36]	; 0x24
   1cc1c:	mov	r0, #28
   1cc20:	ldr	r1, [r5, #4]
   1cc24:	sub	r1, r6, r1
   1cc28:	add	r1, r1, #1
   1cc2c:	str	r1, [r5, #20]
   1cc30:	str	r0, [r5, #24]
   1cc34:	mov	r0, r4
   1cc38:	sub	sp, fp, #16
   1cc3c:	pop	{r4, r5, r6, r7, fp, pc}
   1cc40:	add	r2, r2, r3, lsl #3
   1cc44:	ldr	r3, [r0, #4]
   1cc48:	ldrb	r7, [r2, #12]
   1cc4c:	cmp	r7, #0
   1cc50:	beq	1cc8c <flatcc_json_parser_union_vector@@Base+0xc0>
   1cc54:	sub	r3, r3, #1
   1cc58:	ldr	r1, [fp, #16]
   1cc5c:	ldr	r7, [fp, #8]
   1cc60:	str	r3, [r0, #4]
   1cc64:	ldr	r0, [r2, #16]
   1cc68:	ldr	r3, [r2, #20]
   1cc6c:	mov	r2, r4
   1cc70:	stm	sp, {r0, r7}
   1cc74:	str	r1, [sp, #8]
   1cc78:	mov	r0, r5
   1cc7c:	mov	r1, r6
   1cc80:	bl	1ccc0 <flatcc_json_parser_union_vector@@Base+0xf4>
   1cc84:	sub	sp, fp, #16
   1cc88:	pop	{r4, r5, r6, r7, fp, pc}
   1cc8c:	add	r3, r3, #1
   1cc90:	str	r3, [r0, #4]
   1cc94:	ldr	r0, [r5, #16]
   1cc98:	str	r0, [r2, #8]
   1cc9c:	ldr	r0, [r5, #4]
   1cca0:	str	r0, [r2, #4]
   1cca4:	str	r6, [r1]
   1cca8:	mov	r0, r5
   1ccac:	mov	r1, r6
   1ccb0:	mov	r2, r4
   1ccb4:	sub	sp, fp, #16
   1ccb8:	pop	{r4, r5, r6, r7, fp, lr}
   1ccbc:	b	1a2dc <flatcc_json_parser_generic_json@@Base>
   1ccc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccc4:	add	fp, sp, #28
   1ccc8:	sub	sp, sp, #12
   1cccc:	mov	r5, r0
   1ccd0:	mov	r0, #0
   1ccd4:	mov	r8, r3
   1ccd8:	mov	r6, r2
   1ccdc:	mov	r7, r1
   1cce0:	str	r0, [sp, #8]
   1cce4:	ldr	r0, [r5]
   1cce8:	bl	15f80 <flatcc_builder_start_offset_vector@@Base>
   1ccec:	cmp	r0, #0
   1ccf0:	beq	1cd14 <flatcc_json_parser_union_vector@@Base+0x148>
   1ccf4:	ldr	r0, [r5, #24]
   1ccf8:	cmp	r0, #0
   1ccfc:	bne	1cd90 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1cd00:	str	r7, [r5, #36]	; 0x24
   1cd04:	mov	r0, #33	; 0x21
   1cd08:	ldr	r1, [r5, #4]
   1cd0c:	sub	r1, r7, r1
   1cd10:	b	1cd84 <flatcc_json_parser_union_vector@@Base+0x1b8>
   1cd14:	ldr	sl, [fp, #8]
   1cd18:	cmp	r7, r6
   1cd1c:	beq	1cd50 <flatcc_json_parser_union_vector@@Base+0x184>
   1cd20:	ldrb	r0, [r7]
   1cd24:	cmp	r0, #91	; 0x5b
   1cd28:	bne	1cd50 <flatcc_json_parser_union_vector@@Base+0x184>
   1cd2c:	add	r1, r7, #1
   1cd30:	sub	r0, r6, r1
   1cd34:	cmp	r0, #2
   1cd38:	blt	1ce24 <flatcc_json_parser_union_vector@@Base+0x258>
   1cd3c:	ldrb	r0, [r1]
   1cd40:	cmp	r0, #32
   1cd44:	bls	1ce14 <flatcc_json_parser_union_vector@@Base+0x248>
   1cd48:	mov	r7, r1
   1cd4c:	b	1ce34 <flatcc_json_parser_union_vector@@Base+0x268>
   1cd50:	ldr	r0, [r5, #24]
   1cd54:	mov	r9, r6
   1cd58:	cmp	r0, #0
   1cd5c:	beq	1cd9c <flatcc_json_parser_union_vector@@Base+0x1d0>
   1cd60:	cmp	sl, #0
   1cd64:	beq	1cdc4 <flatcc_json_parser_union_vector@@Base+0x1f8>
   1cd68:	ldr	r0, [r5, #24]
   1cd6c:	cmp	r0, #0
   1cd70:	bne	1cd90 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1cd74:	str	r9, [r5, #36]	; 0x24
   1cd78:	mov	r0, #30
   1cd7c:	ldr	r1, [r5, #4]
   1cd80:	sub	r1, r9, r1
   1cd84:	add	r1, r1, #1
   1cd88:	str	r1, [r5, #20]
   1cd8c:	str	r0, [r5, #24]
   1cd90:	mov	r0, r6
   1cd94:	sub	sp, fp, #28
   1cd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd9c:	str	r7, [r5, #36]	; 0x24
   1cda0:	mov	r0, #22
   1cda4:	mov	r9, r6
   1cda8:	ldr	r1, [r5, #4]
   1cdac:	sub	r1, r7, r1
   1cdb0:	add	r1, r1, #1
   1cdb4:	str	r1, [r5, #20]
   1cdb8:	str	r0, [r5, #24]
   1cdbc:	cmp	sl, #0
   1cdc0:	bne	1cd68 <flatcc_json_parser_union_vector@@Base+0x19c>
   1cdc4:	ldr	r0, [r5]
   1cdc8:	mov	r1, r8
   1cdcc:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1cdd0:	mov	r1, r0
   1cdd4:	ldr	r0, [r5]
   1cdd8:	bl	174c4 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1cddc:	cmp	r0, #0
   1cde0:	str	r0, [sp, #8]
   1cde4:	beq	1ce0c <flatcc_json_parser_union_vector@@Base+0x240>
   1cde8:	ldr	r1, [fp, #12]
   1cdec:	ldr	r0, [r5]
   1cdf0:	bl	176ec <flatcc_builder_table_add_offset@@Base>
   1cdf4:	cmp	r0, #0
   1cdf8:	beq	1ce0c <flatcc_json_parser_union_vector@@Base+0x240>
   1cdfc:	ldr	r1, [sp, #8]
   1ce00:	mov	r6, r9
   1ce04:	str	r1, [r0]
   1ce08:	b	1cd90 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1ce0c:	mov	r7, r9
   1ce10:	b	1ccf4 <flatcc_json_parser_union_vector@@Base+0x128>
   1ce14:	bne	1ce24 <flatcc_json_parser_union_vector@@Base+0x258>
   1ce18:	ldrb	r0, [r7, #2]!
   1ce1c:	cmp	r0, #32
   1ce20:	bhi	1ce34 <flatcc_json_parser_union_vector@@Base+0x268>
   1ce24:	mov	r0, r5
   1ce28:	mov	r2, r6
   1ce2c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1ce30:	mov	r7, r0
   1ce34:	cmp	r7, r6
   1ce38:	mov	r4, r6
   1ce3c:	beq	1ce7c <flatcc_json_parser_union_vector@@Base+0x2b0>
   1ce40:	ldrb	r0, [r7]
   1ce44:	cmp	r0, #93	; 0x5d
   1ce48:	bne	1ce78 <flatcc_json_parser_union_vector@@Base+0x2ac>
   1ce4c:	add	r1, r7, #1
   1ce50:	sub	r0, r6, r1
   1ce54:	cmp	r0, #2
   1ce58:	blt	1cfec <flatcc_json_parser_union_vector@@Base+0x420>
   1ce5c:	ldrb	r0, [r1]
   1ce60:	cmp	r0, #32
   1ce64:	bls	1cfd8 <flatcc_json_parser_union_vector@@Base+0x40c>
   1ce68:	mov	r9, r1
   1ce6c:	cmp	sl, #0
   1ce70:	bne	1cd68 <flatcc_json_parser_union_vector@@Base+0x19c>
   1ce74:	b	1cdc4 <flatcc_json_parser_union_vector@@Base+0x1f8>
   1ce78:	mov	r4, r7
   1ce7c:	cmp	sl, #0
   1ce80:	beq	1cfb8 <flatcc_json_parser_union_vector@@Base+0x3ec>
   1ce84:	add	r0, r6, #1
   1ce88:	mov	sl, #0
   1ce8c:	add	r9, sp, #8
   1ce90:	str	r0, [sp, #4]
   1ce94:	ldr	r0, [r5]
   1ce98:	mov	r1, r8
   1ce9c:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1cea0:	ldrb	r3, [r0, -sl]
   1cea4:	ldr	r7, [fp, #16]
   1cea8:	mov	r0, r5
   1ceac:	mov	r1, r4
   1ceb0:	mov	r2, r6
   1ceb4:	str	r9, [sp]
   1ceb8:	blx	r7
   1cebc:	cmp	r0, r6
   1cec0:	beq	1cd90 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1cec4:	mov	r7, r0
   1cec8:	ldr	r0, [r5]
   1cecc:	mov	r1, #1
   1ced0:	bl	156d8 <flatcc_builder_extend_offset_vector@@Base>
   1ced4:	cmp	r0, #0
   1ced8:	beq	1ccf4 <flatcc_json_parser_union_vector@@Base+0x128>
   1cedc:	ldr	r1, [sp, #8]
   1cee0:	str	r1, [r0]
   1cee4:	sub	r0, r6, r7
   1cee8:	cmp	r0, #2
   1ceec:	blt	1cf20 <flatcc_json_parser_union_vector@@Base+0x354>
   1cef0:	ldrb	r0, [r7]
   1cef4:	cmp	r0, #32
   1cef8:	bls	1cf0c <flatcc_json_parser_union_vector@@Base+0x340>
   1cefc:	mov	r4, r7
   1cf00:	cmp	r4, r6
   1cf04:	bne	1cf3c <flatcc_json_parser_union_vector@@Base+0x370>
   1cf08:	b	1d088 <flatcc_json_parser_union_vector@@Base+0x4bc>
   1cf0c:	bne	1cf20 <flatcc_json_parser_union_vector@@Base+0x354>
   1cf10:	mov	r4, r7
   1cf14:	ldrb	r0, [r4, #1]!
   1cf18:	cmp	r0, #32
   1cf1c:	bhi	1cf34 <flatcc_json_parser_union_vector@@Base+0x368>
   1cf20:	mov	r0, r5
   1cf24:	mov	r1, r7
   1cf28:	mov	r2, r6
   1cf2c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1cf30:	mov	r4, r0
   1cf34:	cmp	r4, r6
   1cf38:	beq	1d088 <flatcc_json_parser_union_vector@@Base+0x4bc>
   1cf3c:	ldrb	r0, [r4]
   1cf40:	cmp	r0, #44	; 0x2c
   1cf44:	bne	1d008 <flatcc_json_parser_union_vector@@Base+0x43c>
   1cf48:	add	r1, r4, #1
   1cf4c:	sub	r0, r6, r1
   1cf50:	cmp	r0, #2
   1cf54:	blt	1cf84 <flatcc_json_parser_union_vector@@Base+0x3b8>
   1cf58:	ldrb	r0, [r1]
   1cf5c:	cmp	r0, #32
   1cf60:	bls	1cf74 <flatcc_json_parser_union_vector@@Base+0x3a8>
   1cf64:	mov	r4, r1
   1cf68:	cmp	r4, r6
   1cf6c:	bne	1cf9c <flatcc_json_parser_union_vector@@Base+0x3d0>
   1cf70:	b	1d034 <flatcc_json_parser_union_vector@@Base+0x468>
   1cf74:	bne	1cf84 <flatcc_json_parser_union_vector@@Base+0x3b8>
   1cf78:	ldrb	r0, [r4, #2]!
   1cf7c:	cmp	r0, #32
   1cf80:	bhi	1cf94 <flatcc_json_parser_union_vector@@Base+0x3c8>
   1cf84:	mov	r0, r5
   1cf88:	mov	r2, r6
   1cf8c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1cf90:	mov	r4, r0
   1cf94:	cmp	r4, r6
   1cf98:	beq	1d034 <flatcc_json_parser_union_vector@@Base+0x468>
   1cf9c:	ldrb	r0, [r4]
   1cfa0:	cmp	r0, #93	; 0x5d
   1cfa4:	beq	1d010 <flatcc_json_parser_union_vector@@Base+0x444>
   1cfa8:	ldr	r0, [fp, #8]
   1cfac:	sub	sl, sl, #1
   1cfb0:	adds	r0, r0, sl
   1cfb4:	bne	1ce94 <flatcc_json_parser_union_vector@@Base+0x2c8>
   1cfb8:	ldr	r0, [r5, #24]
   1cfbc:	cmp	r0, #0
   1cfc0:	bne	1cd90 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1cfc4:	str	r4, [r5, #36]	; 0x24
   1cfc8:	mov	r0, #30
   1cfcc:	ldr	r1, [r5, #4]
   1cfd0:	sub	r1, r4, r1
   1cfd4:	b	1cd84 <flatcc_json_parser_union_vector@@Base+0x1b8>
   1cfd8:	bne	1cfec <flatcc_json_parser_union_vector@@Base+0x420>
   1cfdc:	ldrb	r0, [r7, #2]!
   1cfe0:	mov	r9, r7
   1cfe4:	cmp	r0, #32
   1cfe8:	bhi	1cd60 <flatcc_json_parser_union_vector@@Base+0x194>
   1cfec:	mov	r0, r5
   1cff0:	mov	r2, r6
   1cff4:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1cff8:	mov	r9, r0
   1cffc:	cmp	sl, #0
   1d000:	bne	1cd68 <flatcc_json_parser_union_vector@@Base+0x19c>
   1d004:	b	1cdc4 <flatcc_json_parser_union_vector@@Base+0x1f8>
   1d008:	cmp	r0, #93	; 0x5d
   1d00c:	bne	1d05c <flatcc_json_parser_union_vector@@Base+0x490>
   1d010:	add	r1, r4, #1
   1d014:	sub	r0, r6, r1
   1d018:	cmp	r0, #2
   1d01c:	blt	1d0a4 <flatcc_json_parser_union_vector@@Base+0x4d8>
   1d020:	ldrb	r0, [r1]
   1d024:	cmp	r0, #32
   1d028:	bls	1d090 <flatcc_json_parser_union_vector@@Base+0x4c4>
   1d02c:	mov	r9, r1
   1d030:	b	1d0b4 <flatcc_json_parser_union_vector@@Base+0x4e8>
   1d034:	ldr	r0, [r5, #24]
   1d038:	mov	r9, r6
   1d03c:	cmp	r0, #0
   1d040:	bne	1d0b4 <flatcc_json_parser_union_vector@@Base+0x4e8>
   1d044:	str	r6, [r5, #36]	; 0x24
   1d048:	ldr	r2, [sp, #4]
   1d04c:	mov	r0, #9
   1d050:	ldr	r1, [r5, #4]
   1d054:	sub	r1, r2, r1
   1d058:	b	1d080 <flatcc_json_parser_union_vector@@Base+0x4b4>
   1d05c:	ldr	r0, [r5, #24]
   1d060:	mov	r9, r6
   1d064:	cmp	r0, #0
   1d068:	bne	1d0b4 <flatcc_json_parser_union_vector@@Base+0x4e8>
   1d06c:	str	r4, [r5, #36]	; 0x24
   1d070:	mov	r0, #9
   1d074:	ldr	r1, [r5, #4]
   1d078:	sub	r1, r4, r1
   1d07c:	add	r1, r1, #1
   1d080:	str	r1, [r5, #20]
   1d084:	str	r0, [r5, #24]
   1d088:	mov	r9, r6
   1d08c:	b	1d0b4 <flatcc_json_parser_union_vector@@Base+0x4e8>
   1d090:	bne	1d0a4 <flatcc_json_parser_union_vector@@Base+0x4d8>
   1d094:	ldrb	r0, [r4, #2]!
   1d098:	mov	r9, r4
   1d09c:	cmp	r0, #32
   1d0a0:	bhi	1d0b4 <flatcc_json_parser_union_vector@@Base+0x4e8>
   1d0a4:	mov	r0, r5
   1d0a8:	mov	r2, r6
   1d0ac:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1d0b0:	mov	r9, r0
   1d0b4:	ldr	r0, [fp, #8]
   1d0b8:	add	r0, r0, sl
   1d0bc:	cmp	r0, #1
   1d0c0:	bne	1cd68 <flatcc_json_parser_union_vector@@Base+0x19c>
   1d0c4:	b	1cdc4 <flatcc_json_parser_union_vector@@Base+0x1f8>

0001d0c8 <flatcc_json_parser_union_type_vector@@Base>:
   1d0c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0cc:	add	fp, sp, #28
   1d0d0:	sub	sp, sp, #28
   1d0d4:	mov	r7, r1
   1d0d8:	mov	r5, r0
   1d0dc:	ldr	r0, [r0]
   1d0e0:	ldr	r1, [fp, #12]
   1d0e4:	mov	r4, r3
   1d0e8:	mov	r8, r2
   1d0ec:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1d0f0:	add	r6, r4, r4, lsl #1
   1d0f4:	add	r0, r0, #8
   1d0f8:	add	r4, r0, r6, lsl #3
   1d0fc:	mov	r0, r4
   1d100:	ldrb	r1, [r0, #12]!
   1d104:	cmp	r1, #0
   1d108:	beq	1d12c <flatcc_json_parser_union_type_vector@@Base+0x64>
   1d10c:	ldr	r0, [r5, #24]
   1d110:	cmp	r0, #0
   1d114:	bne	1d17c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d118:	str	r7, [r5, #36]	; 0x24
   1d11c:	mov	r0, #28
   1d120:	ldr	r1, [r5, #4]
   1d124:	sub	r1, r7, r1
   1d128:	b	1d170 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   1d12c:	mov	r1, #1
   1d130:	mov	r2, #1
   1d134:	mvn	r3, #0
   1d138:	strb	r1, [r0]
   1d13c:	mov	r1, #1
   1d140:	ldr	r0, [r5]
   1d144:	bl	15ef4 <flatcc_builder_start_vector@@Base>
   1d148:	cmp	r0, #0
   1d14c:	beq	1d188 <flatcc_json_parser_union_type_vector@@Base+0xc0>
   1d150:	mov	sl, r7
   1d154:	ldr	r0, [r5, #24]
   1d158:	cmp	r0, #0
   1d15c:	bne	1d17c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d160:	str	sl, [r5, #36]	; 0x24
   1d164:	mov	r0, #33	; 0x21
   1d168:	ldr	r1, [r5, #4]
   1d16c:	sub	r1, sl, r1
   1d170:	add	r1, r1, #1
   1d174:	str	r1, [r5, #20]
   1d178:	str	r0, [r5, #24]
   1d17c:	mov	r0, r8
   1d180:	sub	sp, fp, #28
   1d184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d188:	cmp	r7, r8
   1d18c:	beq	1d1c0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1d190:	ldrb	r0, [r7]
   1d194:	cmp	r0, #91	; 0x5b
   1d198:	bne	1d1c0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1d19c:	add	r1, r7, #1
   1d1a0:	sub	r0, r8, r1
   1d1a4:	cmp	r0, #2
   1d1a8:	blt	1d204 <flatcc_json_parser_union_type_vector@@Base+0x13c>
   1d1ac:	ldrb	r0, [r1]
   1d1b0:	cmp	r0, #32
   1d1b4:	bls	1d1f4 <flatcc_json_parser_union_type_vector@@Base+0x12c>
   1d1b8:	mov	r7, r1
   1d1bc:	b	1d214 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   1d1c0:	ldr	r0, [r5, #24]
   1d1c4:	cmp	r0, #0
   1d1c8:	mov	r0, r8
   1d1cc:	bne	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d1d0:	str	r7, [r5, #36]	; 0x24
   1d1d4:	mov	r0, #22
   1d1d8:	ldr	r1, [r5, #4]
   1d1dc:	sub	r1, r7, r1
   1d1e0:	add	r1, r1, #1
   1d1e4:	str	r1, [r5, #20]
   1d1e8:	str	r0, [r5, #24]
   1d1ec:	mov	r0, r8
   1d1f0:	b	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d1f4:	bne	1d204 <flatcc_json_parser_union_type_vector@@Base+0x13c>
   1d1f8:	ldrb	r0, [r7, #2]!
   1d1fc:	cmp	r0, #32
   1d200:	bhi	1d214 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   1d204:	mov	r0, r5
   1d208:	mov	r2, r8
   1d20c:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1d210:	mov	r7, r0
   1d214:	cmp	r7, r8
   1d218:	mov	sl, r8
   1d21c:	beq	1d264 <flatcc_json_parser_union_type_vector@@Base+0x19c>
   1d220:	ldrb	r0, [r7]
   1d224:	cmp	r0, #93	; 0x5d
   1d228:	bne	1d260 <flatcc_json_parser_union_type_vector@@Base+0x198>
   1d22c:	add	r1, r7, #1
   1d230:	sub	r0, r8, r1
   1d234:	cmp	r0, #2
   1d238:	blt	1d69c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d23c:	ldrb	r0, [r1]
   1d240:	cmp	r0, #32
   1d244:	bhi	1d60c <flatcc_json_parser_union_type_vector@@Base+0x544>
   1d248:	bne	1d69c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d24c:	ldrb	r0, [r7, #2]!
   1d250:	cmp	r0, #32
   1d254:	mov	r0, r7
   1d258:	bls	1d69c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d25c:	b	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d260:	mov	sl, r7
   1d264:	ldr	r0, [r5]
   1d268:	mov	r1, #1
   1d26c:	bl	15330 <flatcc_builder_extend_vector@@Base>
   1d270:	cmp	r0, #0
   1d274:	beq	1d154 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d278:	mov	r1, r0
   1d27c:	add	r0, r8, #1
   1d280:	str	r4, [sp, #16]
   1d284:	str	r0, [sp, #12]
   1d288:	mov	r9, #0
   1d28c:	cmp	sl, r8
   1d290:	mov	r4, r8
   1d294:	str	r1, [sp, #20]
   1d298:	strb	r9, [sp, #27]
   1d29c:	beq	1d48c <flatcc_json_parser_union_type_vector@@Base+0x3c4>
   1d2a0:	mov	r2, sl
   1d2a4:	mov	r9, #0
   1d2a8:	ldrb	ip, [r2], #1
   1d2ac:	cmp	ip, #45	; 0x2d
   1d2b0:	movne	r2, sl
   1d2b4:	cmp	r2, r8
   1d2b8:	beq	1d324 <flatcc_json_parser_union_type_vector@@Base+0x25c>
   1d2bc:	mov	r7, #0
   1d2c0:	mov	r0, #0
   1d2c4:	mov	r4, #10
   1d2c8:	ldrb	r1, [r2]
   1d2cc:	sub	r3, r1, #48	; 0x30
   1d2d0:	uxtb	r3, r3
   1d2d4:	cmp	r3, #9
   1d2d8:	bhi	1d338 <flatcc_json_parser_union_type_vector@@Base+0x270>
   1d2dc:	add	r3, r0, r0, lsl #2
   1d2e0:	lsl	r3, r3, #1
   1d2e4:	umlal	r1, r3, r7, r4
   1d2e8:	subs	r1, r1, #48	; 0x30
   1d2ec:	sbc	r3, r3, #0
   1d2f0:	subs	r7, r1, r7
   1d2f4:	sbcs	r0, r3, r0
   1d2f8:	bcc	1d3a4 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   1d2fc:	add	r2, r2, #1
   1d300:	mov	r7, r1
   1d304:	mov	r0, r3
   1d308:	cmp	r8, r2
   1d30c:	bne	1d2c8 <flatcc_json_parser_union_type_vector@@Base+0x200>
   1d310:	mov	lr, #0
   1d314:	mov	r2, r8
   1d318:	mov	r7, r1
   1d31c:	mov	r0, r3
   1d320:	b	1d33c <flatcc_json_parser_union_type_vector@@Base+0x274>
   1d324:	mov	r2, r8
   1d328:	mov	r7, #0
   1d32c:	mov	r0, #0
   1d330:	mov	lr, #0
   1d334:	b	1d33c <flatcc_json_parser_union_type_vector@@Base+0x274>
   1d338:	mov	lr, #1
   1d33c:	cmp	r2, sl
   1d340:	mov	r4, sl
   1d344:	beq	1d48c <flatcc_json_parser_union_type_vector@@Base+0x3c4>
   1d348:	cmp	lr, #0
   1d34c:	beq	1d39c <flatcc_json_parser_union_type_vector@@Base+0x2d4>
   1d350:	ldrb	r1, [r2]
   1d354:	cmp	r1, #46	; 0x2e
   1d358:	beq	1d368 <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   1d35c:	cmp	r1, #101	; 0x65
   1d360:	cmpne	r1, #69	; 0x45
   1d364:	bne	1d39c <flatcc_json_parser_union_type_vector@@Base+0x2d4>
   1d368:	ldr	r0, [r5, #24]
   1d36c:	mov	r7, #0
   1d370:	mov	r4, r8
   1d374:	cmp	r0, #0
   1d378:	mov	r0, #0
   1d37c:	bne	1d3e4 <flatcc_json_parser_union_type_vector@@Base+0x31c>
   1d380:	str	r2, [r5, #36]	; 0x24
   1d384:	ldr	r0, [r5, #4]
   1d388:	sub	r0, r2, r0
   1d38c:	add	r0, r0, #1
   1d390:	str	r0, [r5, #20]
   1d394:	mov	r0, #12
   1d398:	b	1d3d4 <flatcc_json_parser_union_type_vector@@Base+0x30c>
   1d39c:	mov	r4, r2
   1d3a0:	b	1d3e4 <flatcc_json_parser_union_type_vector@@Base+0x31c>
   1d3a4:	ldr	r0, [r5, #24]
   1d3a8:	mov	r7, #0
   1d3ac:	mov	r4, r8
   1d3b0:	cmp	r0, #0
   1d3b4:	mov	r0, #0
   1d3b8:	bne	1d3e4 <flatcc_json_parser_union_type_vector@@Base+0x31c>
   1d3bc:	str	r2, [r5, #36]	; 0x24
   1d3c0:	ldr	r0, [r5, #4]
   1d3c4:	sub	r0, r2, r0
   1d3c8:	add	r0, r0, #1
   1d3cc:	str	r0, [r5, #20]
   1d3d0:	mov	r0, #8
   1d3d4:	str	r0, [r5, #24]
   1d3d8:	mov	r7, #0
   1d3dc:	mov	r0, #0
   1d3e0:	mov	r4, r8
   1d3e4:	mov	r9, #0
   1d3e8:	cmp	r4, sl
   1d3ec:	beq	1d420 <flatcc_json_parser_union_type_vector@@Base+0x358>
   1d3f0:	cmp	ip, #45	; 0x2d
   1d3f4:	bne	1d430 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1d3f8:	ldr	r0, [r5, #24]
   1d3fc:	cmp	r0, #0
   1d400:	bne	1d448 <flatcc_json_parser_union_type_vector@@Base+0x380>
   1d404:	str	r4, [r5, #36]	; 0x24
   1d408:	ldr	r0, [r5, #4]
   1d40c:	sub	r0, r4, r0
   1d410:	add	r0, r0, #1
   1d414:	str	r0, [r5, #20]
   1d418:	mov	r0, #8
   1d41c:	b	1d484 <flatcc_json_parser_union_type_vector@@Base+0x3bc>
   1d420:	mov	r4, sl
   1d424:	cmp	sl, r4
   1d428:	bne	1d4c8 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d42c:	b	1d494 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   1d430:	subs	r1, r7, #256	; 0x100
   1d434:	sbcs	r0, r0, #0
   1d438:	bcc	1d458 <flatcc_json_parser_union_type_vector@@Base+0x390>
   1d43c:	ldr	r0, [r5, #24]
   1d440:	cmp	r0, #0
   1d444:	beq	1d46c <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   1d448:	mov	r4, r8
   1d44c:	cmp	sl, r4
   1d450:	bne	1d4c8 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d454:	b	1d494 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   1d458:	mov	r9, r7
   1d45c:	strb	r7, [sp, #27]
   1d460:	cmp	sl, r4
   1d464:	bne	1d4c8 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d468:	b	1d494 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   1d46c:	str	r4, [r5, #36]	; 0x24
   1d470:	ldr	r0, [r5, #4]
   1d474:	sub	r0, r4, r0
   1d478:	add	r0, r0, #1
   1d47c:	str	r0, [r5, #20]
   1d480:	mov	r0, #7
   1d484:	str	r0, [r5, #24]
   1d488:	mov	r4, r8
   1d48c:	cmp	sl, r4
   1d490:	bne	1d4c8 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d494:	ldr	r3, [fp, #16]
   1d498:	add	r0, sp, #27
   1d49c:	mov	r1, sl
   1d4a0:	mov	r2, r8
   1d4a4:	str	r0, [sp]
   1d4a8:	mov	r0, r5
   1d4ac:	bl	1c978 <flatcc_json_parser_union_type@@Base+0x388>
   1d4b0:	mov	r4, r0
   1d4b4:	cmp	r0, sl
   1d4b8:	beq	1d660 <flatcc_json_parser_union_type_vector@@Base+0x598>
   1d4bc:	cmp	r4, r8
   1d4c0:	beq	1d660 <flatcc_json_parser_union_type_vector@@Base+0x598>
   1d4c4:	ldrb	r9, [sp, #27]
   1d4c8:	ldr	r1, [fp, #24]
   1d4cc:	uxtb	r0, r9
   1d4d0:	blx	r1
   1d4d4:	cmp	r0, #0
   1d4d8:	bne	1d4f0 <flatcc_json_parser_union_type_vector@@Base+0x428>
   1d4dc:	ldrb	r0, [r5, #8]
   1d4e0:	tst	r0, #1
   1d4e4:	beq	1d668 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
   1d4e8:	mov	r9, #0
   1d4ec:	strb	r9, [sp, #27]
   1d4f0:	ldr	r0, [sp, #20]
   1d4f4:	strb	r9, [r0]
   1d4f8:	sub	r0, r8, r4
   1d4fc:	cmp	r0, #2
   1d500:	blt	1d534 <flatcc_json_parser_union_type_vector@@Base+0x46c>
   1d504:	ldrb	r0, [r4]
   1d508:	cmp	r0, #32
   1d50c:	bls	1d520 <flatcc_json_parser_union_type_vector@@Base+0x458>
   1d510:	mov	sl, r4
   1d514:	cmp	sl, r8
   1d518:	bne	1d550 <flatcc_json_parser_union_type_vector@@Base+0x488>
   1d51c:	b	1d5dc <flatcc_json_parser_union_type_vector@@Base+0x514>
   1d520:	bne	1d534 <flatcc_json_parser_union_type_vector@@Base+0x46c>
   1d524:	mov	sl, r4
   1d528:	ldrb	r0, [sl, #1]!
   1d52c:	cmp	r0, #32
   1d530:	bhi	1d548 <flatcc_json_parser_union_type_vector@@Base+0x480>
   1d534:	mov	r0, r5
   1d538:	mov	r1, r4
   1d53c:	mov	r2, r8
   1d540:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1d544:	mov	sl, r0
   1d548:	cmp	sl, r8
   1d54c:	beq	1d5dc <flatcc_json_parser_union_type_vector@@Base+0x514>
   1d550:	ldrb	r0, [sl]
   1d554:	ldr	r4, [sp, #16]
   1d558:	cmp	r0, #44	; 0x2c
   1d55c:	bne	1d5e8 <flatcc_json_parser_union_type_vector@@Base+0x520>
   1d560:	add	r1, sl, #1
   1d564:	sub	r0, r8, r1
   1d568:	cmp	r0, #2
   1d56c:	blt	1d59c <flatcc_json_parser_union_type_vector@@Base+0x4d4>
   1d570:	ldrb	r0, [r1]
   1d574:	cmp	r0, #32
   1d578:	bls	1d58c <flatcc_json_parser_union_type_vector@@Base+0x4c4>
   1d57c:	mov	sl, r1
   1d580:	cmp	sl, r8
   1d584:	bne	1d5b4 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   1d588:	b	1d614 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   1d58c:	bne	1d59c <flatcc_json_parser_union_type_vector@@Base+0x4d4>
   1d590:	ldrb	r0, [sl, #2]!
   1d594:	cmp	r0, #32
   1d598:	bhi	1d5ac <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1d59c:	mov	r0, r5
   1d5a0:	mov	r2, r8
   1d5a4:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1d5a8:	mov	sl, r0
   1d5ac:	cmp	sl, r8
   1d5b0:	beq	1d614 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   1d5b4:	ldrb	r0, [sl]
   1d5b8:	cmp	r0, #93	; 0x5d
   1d5bc:	beq	1d5f0 <flatcc_json_parser_union_type_vector@@Base+0x528>
   1d5c0:	ldr	r0, [r5]
   1d5c4:	mov	r1, #1
   1d5c8:	bl	15330 <flatcc_builder_extend_vector@@Base>
   1d5cc:	mov	r1, r0
   1d5d0:	cmp	r0, #0
   1d5d4:	bne	1d288 <flatcc_json_parser_union_type_vector@@Base+0x1c0>
   1d5d8:	b	1d154 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d5dc:	ldr	r4, [sp, #16]
   1d5e0:	mov	r0, r8
   1d5e4:	b	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d5e8:	cmp	r0, #93	; 0x5d
   1d5ec:	bne	1d63c <flatcc_json_parser_union_type_vector@@Base+0x574>
   1d5f0:	add	r1, sl, #1
   1d5f4:	sub	r0, r8, r1
   1d5f8:	cmp	r0, #2
   1d5fc:	blt	1d69c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d600:	ldrb	r0, [r1]
   1d604:	cmp	r0, #32
   1d608:	bls	1d688 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1d60c:	mov	r0, r1
   1d610:	b	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d614:	ldr	r0, [r5, #24]
   1d618:	cmp	r0, #0
   1d61c:	mov	r0, r8
   1d620:	bne	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d624:	str	r8, [r5, #36]	; 0x24
   1d628:	ldr	r2, [sp, #12]
   1d62c:	mov	r0, #9
   1d630:	ldr	r1, [r5, #4]
   1d634:	sub	r1, r2, r1
   1d638:	b	1d1e4 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   1d63c:	ldr	r0, [r5, #24]
   1d640:	cmp	r0, #0
   1d644:	mov	r0, r8
   1d648:	bne	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d64c:	str	sl, [r5, #36]	; 0x24
   1d650:	mov	r0, #9
   1d654:	ldr	r1, [r5, #4]
   1d658:	sub	r1, sl, r1
   1d65c:	b	1d1e0 <flatcc_json_parser_union_type_vector@@Base+0x118>
   1d660:	mov	sl, r4
   1d664:	b	1d154 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d668:	ldr	r0, [r5, #24]
   1d66c:	cmp	r0, #0
   1d670:	bne	1d17c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d674:	str	r4, [r5, #36]	; 0x24
   1d678:	mov	r0, #15
   1d67c:	ldr	r1, [r5, #4]
   1d680:	sub	r1, r4, r1
   1d684:	b	1d170 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   1d688:	bne	1d69c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d68c:	ldrb	r0, [sl, #2]!
   1d690:	cmp	r0, #32
   1d694:	mov	r0, sl
   1d698:	bhi	1d6a8 <flatcc_json_parser_union_type_vector@@Base+0x5e0>
   1d69c:	mov	r0, r5
   1d6a0:	mov	r2, r8
   1d6a4:	bl	19880 <flatcc_json_parser_space_ext@@Base>
   1d6a8:	mov	sl, r0
   1d6ac:	ldr	r0, [r5]
   1d6b0:	bl	17268 <flatcc_builder_vector_count@@Base>
   1d6b4:	str	r0, [r4, #16]
   1d6b8:	mov	r7, r0
   1d6bc:	ldr	r0, [r5]
   1d6c0:	mov	r1, r7
   1d6c4:	bl	145f8 <flatcc_builder_enter_user_frame@@Base>
   1d6c8:	mov	r9, r0
   1d6cc:	ldr	r0, [r5]
   1d6d0:	mov	r1, r9
   1d6d4:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1d6d8:	mov	r4, r0
   1d6dc:	ldr	r0, [r5]
   1d6e0:	bl	17274 <flatcc_builder_vector_edit@@Base>
   1d6e4:	mov	r1, r0
   1d6e8:	mov	r0, r4
   1d6ec:	mov	r2, r7
   1d6f0:	bl	128fc <memcpy@plt>
   1d6f4:	ldr	r0, [r5]
   1d6f8:	bl	1716c <flatcc_builder_end_vector@@Base>
   1d6fc:	cmp	r0, #0
   1d700:	beq	1d154 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d704:	ldr	r1, [fp, #8]
   1d708:	mov	r4, r0
   1d70c:	ldr	r0, [r5]
   1d710:	sub	r1, r1, #1
   1d714:	bl	176ec <flatcc_builder_table_add_offset@@Base>
   1d718:	cmp	r0, #0
   1d71c:	beq	1d154 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d720:	str	r4, [r0]
   1d724:	ldr	r1, [fp, #12]
   1d728:	ldr	r0, [r5]
   1d72c:	bl	147bc <flatcc_builder_get_user_frame_ptr@@Base>
   1d730:	add	r2, r0, #8
   1d734:	mov	r3, r2
   1d738:	ldr	r1, [r3, r6, lsl #3]!
   1d73c:	str	r9, [r3, #20]
   1d740:	ldr	r3, [r0, #4]
   1d744:	cmp	r1, #0
   1d748:	beq	1d7ac <flatcc_json_parser_union_type_vector@@Base+0x6e4>
   1d74c:	cmp	r3, #0
   1d750:	beq	1d7bc <flatcc_json_parser_union_type_vector@@Base+0x6f4>
   1d754:	sub	r3, r3, #1
   1d758:	ldr	ip, [fp, #20]
   1d75c:	str	r3, [r0, #4]
   1d760:	add	r0, r2, r6, lsl #3
   1d764:	mov	r3, r9
   1d768:	ldr	r6, [r5, #4]
   1d76c:	ldr	r4, [r5, #16]
   1d770:	ldr	r2, [r0, #8]
   1d774:	str	r2, [r5, #16]
   1d778:	mov	r2, r8
   1d77c:	ldr	r0, [r0, #4]
   1d780:	str	r0, [r5, #4]
   1d784:	ldr	r0, [fp, #8]
   1d788:	str	r7, [sp]
   1d78c:	stmib	sp, {r0, ip}
   1d790:	mov	r0, r5
   1d794:	bl	1ccc0 <flatcc_json_parser_union_vector@@Base+0xf4>
   1d798:	cmp	r0, r8
   1d79c:	beq	1d17c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d7a0:	str	r6, [r5, #4]
   1d7a4:	str	r4, [r5, #16]
   1d7a8:	b	1d7b4 <flatcc_json_parser_union_type_vector@@Base+0x6ec>
   1d7ac:	add	r1, r3, #1
   1d7b0:	str	r1, [r0, #4]
   1d7b4:	mov	r8, sl
   1d7b8:	b	1d17c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d7bc:	ldr	r0, [pc, #24]	; 1d7dc <flatcc_json_parser_union_type_vector@@Base+0x714>
   1d7c0:	ldr	r1, [pc, #24]	; 1d7e0 <flatcc_json_parser_union_type_vector@@Base+0x718>
   1d7c4:	ldr	r3, [pc, #24]	; 1d7e4 <flatcc_json_parser_union_type_vector@@Base+0x71c>
   1d7c8:	movw	r2, #1122	; 0x462
   1d7cc:	add	r0, pc, r0
   1d7d0:	add	r1, pc, r1
   1d7d4:	add	r3, pc, r3
   1d7d8:	bl	129bc <__assert_fail@plt>
   1d7dc:	andeq	r2, r0, r4, ror r8
   1d7e0:	andeq	r2, r0, pc, ror r8
   1d7e4:	andeq	r2, r0, r8, lsr #19

0001d7e8 <flatcc_json_parser_table_as_root@@Base>:
   1d7e8:	push	{r4, r5, r6, r7, fp, lr}
   1d7ec:	add	fp, sp, #16
   1d7f0:	sub	sp, sp, #48	; 0x30
   1d7f4:	cmp	r1, #0
   1d7f8:	vmov.i32	q8, #0	; 0x00000000
   1d7fc:	add	r5, sp, #4
   1d800:	mov	r6, r0
   1d804:	add	r7, r2, r3
   1d808:	mov	r4, r2
   1d80c:	movne	r5, r1
   1d810:	mov	r1, #1
   1d814:	add	r0, r5, #12
   1d818:	vst1.32	{d16-d17}, [r0]
   1d81c:	add	r0, r5, #28
   1d820:	vst1.32	{d16-d17}, [r0]
   1d824:	ldr	r0, [fp, #8]
   1d828:	str	r2, [r5, #4]
   1d82c:	str	r6, [r5]
   1d830:	str	r0, [r5, #8]
   1d834:	str	r1, [r5, #16]
   1d838:	mov	r1, #2
   1d83c:	str	r2, [r5, #28]
   1d840:	str	r7, [r5, #32]
   1d844:	str	r2, [r5, #36]	; 0x24
   1d848:	mov	r2, #0
   1d84c:	and	r3, r1, r0, lsr #1
   1d850:	ldr	r1, [fp, #12]
   1d854:	mov	r0, r6
   1d858:	bl	14e28 <flatcc_builder_start_buffer@@Base>
   1d85c:	mov	r1, r0
   1d860:	mvn	r0, #0
   1d864:	cmp	r1, #0
   1d868:	bne	1d890 <flatcc_json_parser_table_as_root@@Base+0xa8>
   1d86c:	ldr	ip, [fp, #16]
   1d870:	mov	r3, sp
   1d874:	mov	r0, r5
   1d878:	mov	r1, r4
   1d87c:	mov	r2, r7
   1d880:	blx	ip
   1d884:	ldr	r0, [r5, #24]
   1d888:	cmp	r0, #0
   1d88c:	beq	1d898 <flatcc_json_parser_table_as_root@@Base+0xb0>
   1d890:	sub	sp, fp, #16
   1d894:	pop	{r4, r5, r6, r7, fp, pc}
   1d898:	ldr	r1, [sp]
   1d89c:	mov	r0, r6
   1d8a0:	bl	15028 <flatcc_builder_end_buffer@@Base>
   1d8a4:	cmp	r0, #0
   1d8a8:	mvn	r0, #0
   1d8ac:	movne	r0, #0
   1d8b0:	strne	r4, [r5, #40]	; 0x28
   1d8b4:	sub	sp, fp, #16
   1d8b8:	pop	{r4, r5, r6, r7, fp, pc}

0001d8bc <flatcc_json_parser_struct_as_root@@Base>:
   1d8bc:	push	{r4, r5, r6, r7, fp, lr}
   1d8c0:	add	fp, sp, #16
   1d8c4:	sub	sp, sp, #48	; 0x30
   1d8c8:	cmp	r1, #0
   1d8cc:	vmov.i32	q8, #0	; 0x00000000
   1d8d0:	add	r5, sp, #4
   1d8d4:	mov	r6, r0
   1d8d8:	add	r7, r2, r3
   1d8dc:	mov	r4, r2
   1d8e0:	movne	r5, r1
   1d8e4:	mov	r1, #1
   1d8e8:	add	r0, r5, #12
   1d8ec:	vst1.32	{d16-d17}, [r0]
   1d8f0:	add	r0, r5, #28
   1d8f4:	vst1.32	{d16-d17}, [r0]
   1d8f8:	ldr	r0, [fp, #8]
   1d8fc:	str	r2, [r5, #4]
   1d900:	str	r6, [r5]
   1d904:	str	r0, [r5, #8]
   1d908:	str	r1, [r5, #16]
   1d90c:	mov	r1, #2
   1d910:	str	r2, [r5, #28]
   1d914:	str	r7, [r5, #32]
   1d918:	str	r2, [r5, #36]	; 0x24
   1d91c:	mov	r2, #0
   1d920:	and	r3, r1, r0, lsr #1
   1d924:	ldr	r1, [fp, #12]
   1d928:	mov	r0, r6
   1d92c:	bl	14e28 <flatcc_builder_start_buffer@@Base>
   1d930:	mov	r1, r0
   1d934:	mvn	r0, #0
   1d938:	cmp	r1, #0
   1d93c:	bne	1d964 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   1d940:	ldr	ip, [fp, #16]
   1d944:	mov	r3, sp
   1d948:	mov	r0, r5
   1d94c:	mov	r1, r4
   1d950:	mov	r2, r7
   1d954:	blx	ip
   1d958:	ldr	r0, [r5, #24]
   1d95c:	cmp	r0, #0
   1d960:	beq	1d96c <flatcc_json_parser_struct_as_root@@Base+0xb0>
   1d964:	sub	sp, fp, #16
   1d968:	pop	{r4, r5, r6, r7, fp, pc}
   1d96c:	ldr	r1, [sp]
   1d970:	mov	r0, r6
   1d974:	bl	15028 <flatcc_builder_end_buffer@@Base>
   1d978:	cmp	r0, #0
   1d97c:	mvn	r0, #0
   1d980:	movne	r0, #0
   1d984:	strne	r4, [r5, #40]	; 0x28
   1d988:	sub	sp, fp, #16
   1d98c:	pop	{r4, r5, r6, r7, fp, pc}
   1d990:	eor	r1, r1, #-2147483648	; 0x80000000
   1d994:	b	1d99c <flatcc_json_parser_struct_as_root@@Base+0xe0>
   1d998:	eor	r3, r3, #-2147483648	; 0x80000000
   1d99c:	push	{r4, r5, lr}
   1d9a0:	lsl	r4, r1, #1
   1d9a4:	lsl	r5, r3, #1
   1d9a8:	teq	r4, r5
   1d9ac:	teqeq	r0, r2
   1d9b0:	orrsne	ip, r4, r0
   1d9b4:	orrsne	ip, r5, r2
   1d9b8:	mvnsne	ip, r4, asr #21
   1d9bc:	mvnsne	ip, r5, asr #21
   1d9c0:	beq	1dbac <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   1d9c4:	lsr	r4, r4, #21
   1d9c8:	rsbs	r5, r4, r5, lsr #21
   1d9cc:	rsblt	r5, r5, #0
   1d9d0:	ble	1d9f0 <flatcc_json_parser_struct_as_root@@Base+0x134>
   1d9d4:	add	r4, r4, r5
   1d9d8:	eor	r2, r0, r2
   1d9dc:	eor	r3, r1, r3
   1d9e0:	eor	r0, r2, r0
   1d9e4:	eor	r1, r3, r1
   1d9e8:	eor	r2, r0, r2
   1d9ec:	eor	r3, r1, r3
   1d9f0:	cmp	r5, #54	; 0x36
   1d9f4:	pophi	{r4, r5, pc}
   1d9f8:	tst	r1, #-2147483648	; 0x80000000
   1d9fc:	lsl	r1, r1, #12
   1da00:	mov	ip, #1048576	; 0x100000
   1da04:	orr	r1, ip, r1, lsr #12
   1da08:	beq	1da14 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1da0c:	rsbs	r0, r0, #0
   1da10:	rsc	r1, r1, #0
   1da14:	tst	r3, #-2147483648	; 0x80000000
   1da18:	lsl	r3, r3, #12
   1da1c:	orr	r3, ip, r3, lsr #12
   1da20:	beq	1da2c <flatcc_json_parser_struct_as_root@@Base+0x170>
   1da24:	rsbs	r2, r2, #0
   1da28:	rsc	r3, r3, #0
   1da2c:	teq	r4, r5
   1da30:	beq	1db94 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   1da34:	sub	r4, r4, #1
   1da38:	rsbs	lr, r5, #32
   1da3c:	blt	1da58 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   1da40:	lsl	ip, r2, lr
   1da44:	adds	r0, r0, r2, lsr r5
   1da48:	adc	r1, r1, #0
   1da4c:	adds	r0, r0, r3, lsl lr
   1da50:	adcs	r1, r1, r3, asr r5
   1da54:	b	1da74 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   1da58:	sub	r5, r5, #32
   1da5c:	add	lr, lr, #32
   1da60:	cmp	r2, #1
   1da64:	lsl	ip, r3, lr
   1da68:	orrcs	ip, ip, #2
   1da6c:	adds	r0, r0, r3, asr r5
   1da70:	adcs	r1, r1, r3, asr #31
   1da74:	and	r5, r1, #-2147483648	; 0x80000000
   1da78:	bpl	1da88 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1da7c:	rsbs	ip, ip, #0
   1da80:	rscs	r0, r0, #0
   1da84:	rsc	r1, r1, #0
   1da88:	cmp	r1, #1048576	; 0x100000
   1da8c:	bcc	1dacc <flatcc_json_parser_struct_as_root@@Base+0x210>
   1da90:	cmp	r1, #2097152	; 0x200000
   1da94:	bcc	1dab4 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1da98:	lsrs	r1, r1, #1
   1da9c:	rrxs	r0, r0
   1daa0:	rrx	ip, ip
   1daa4:	add	r4, r4, #1
   1daa8:	lsl	r2, r4, #21
   1daac:	cmn	r2, #4194304	; 0x400000
   1dab0:	bcs	1dc0c <flatcc_json_parser_struct_as_root@@Base+0x350>
   1dab4:	cmp	ip, #-2147483648	; 0x80000000
   1dab8:	lsrseq	ip, r0, #1
   1dabc:	adcs	r0, r0, #0
   1dac0:	adc	r1, r1, r4, lsl #20
   1dac4:	orr	r1, r1, r5
   1dac8:	pop	{r4, r5, pc}
   1dacc:	lsls	ip, ip, #1
   1dad0:	adcs	r0, r0, r0
   1dad4:	adc	r1, r1, r1
   1dad8:	tst	r1, #1048576	; 0x100000
   1dadc:	sub	r4, r4, #1
   1dae0:	bne	1dab4 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1dae4:	teq	r1, #0
   1dae8:	moveq	r1, r0
   1daec:	moveq	r0, #0
   1daf0:	clz	r3, r1
   1daf4:	addeq	r3, r3, #32
   1daf8:	sub	r3, r3, #11
   1dafc:	subs	r2, r3, #32
   1db00:	bge	1db24 <flatcc_json_parser_struct_as_root@@Base+0x268>
   1db04:	adds	r2, r2, #12
   1db08:	ble	1db20 <flatcc_json_parser_struct_as_root@@Base+0x264>
   1db0c:	add	ip, r2, #20
   1db10:	rsb	r2, r2, #12
   1db14:	lsl	r0, r1, ip
   1db18:	lsr	r1, r1, r2
   1db1c:	b	1db34 <flatcc_json_parser_struct_as_root@@Base+0x278>
   1db20:	add	r2, r2, #20
   1db24:	rsble	ip, r2, #32
   1db28:	lsl	r1, r1, r2
   1db2c:	orrle	r1, r1, r0, lsr ip
   1db30:	lslle	r0, r0, r2
   1db34:	subs	r4, r4, r3
   1db38:	addge	r1, r1, r4, lsl #20
   1db3c:	orrge	r1, r1, r5
   1db40:	popge	{r4, r5, pc}
   1db44:	mvn	r4, r4
   1db48:	subs	r4, r4, #31
   1db4c:	bge	1db88 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   1db50:	adds	r4, r4, #12
   1db54:	bgt	1db70 <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   1db58:	add	r4, r4, #20
   1db5c:	rsb	r2, r4, #32
   1db60:	lsr	r0, r0, r4
   1db64:	orr	r0, r0, r1, lsl r2
   1db68:	orr	r1, r5, r1, lsr r4
   1db6c:	pop	{r4, r5, pc}
   1db70:	rsb	r4, r4, #12
   1db74:	rsb	r2, r4, #32
   1db78:	lsr	r0, r0, r2
   1db7c:	orr	r0, r0, r1, lsl r4
   1db80:	mov	r1, r5
   1db84:	pop	{r4, r5, pc}
   1db88:	lsr	r0, r1, r4
   1db8c:	mov	r1, r5
   1db90:	pop	{r4, r5, pc}
   1db94:	teq	r4, #0
   1db98:	eor	r3, r3, #1048576	; 0x100000
   1db9c:	eoreq	r1, r1, #1048576	; 0x100000
   1dba0:	addeq	r4, r4, #1
   1dba4:	subne	r5, r5, #1
   1dba8:	b	1da34 <flatcc_json_parser_struct_as_root@@Base+0x178>
   1dbac:	mvns	ip, r4, asr #21
   1dbb0:	mvnsne	ip, r5, asr #21
   1dbb4:	beq	1dc1c <flatcc_json_parser_struct_as_root@@Base+0x360>
   1dbb8:	teq	r4, r5
   1dbbc:	teqeq	r0, r2
   1dbc0:	beq	1dbd4 <flatcc_json_parser_struct_as_root@@Base+0x318>
   1dbc4:	orrs	ip, r4, r0
   1dbc8:	moveq	r1, r3
   1dbcc:	moveq	r0, r2
   1dbd0:	pop	{r4, r5, pc}
   1dbd4:	teq	r1, r3
   1dbd8:	movne	r1, #0
   1dbdc:	movne	r0, #0
   1dbe0:	popne	{r4, r5, pc}
   1dbe4:	lsrs	ip, r4, #21
   1dbe8:	bne	1dbfc <flatcc_json_parser_struct_as_root@@Base+0x340>
   1dbec:	lsls	r0, r0, #1
   1dbf0:	adcs	r1, r1, r1
   1dbf4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1dbf8:	pop	{r4, r5, pc}
   1dbfc:	adds	r4, r4, #4194304	; 0x400000
   1dc00:	addcc	r1, r1, #1048576	; 0x100000
   1dc04:	popcc	{r4, r5, pc}
   1dc08:	and	r5, r1, #-2147483648	; 0x80000000
   1dc0c:	orr	r1, r5, #2130706432	; 0x7f000000
   1dc10:	orr	r1, r1, #15728640	; 0xf00000
   1dc14:	mov	r0, #0
   1dc18:	pop	{r4, r5, pc}
   1dc1c:	mvns	ip, r4, asr #21
   1dc20:	movne	r1, r3
   1dc24:	movne	r0, r2
   1dc28:	mvnseq	ip, r5, asr #21
   1dc2c:	movne	r3, r1
   1dc30:	movne	r2, r0
   1dc34:	orrs	r4, r0, r1, lsl #12
   1dc38:	orrseq	r5, r2, r3, lsl #12
   1dc3c:	teqeq	r1, r3
   1dc40:	orrne	r1, r1, #524288	; 0x80000
   1dc44:	pop	{r4, r5, pc}
   1dc48:	teq	r0, #0
   1dc4c:	moveq	r1, #0
   1dc50:	bxeq	lr
   1dc54:	push	{r4, r5, lr}
   1dc58:	mov	r4, #1024	; 0x400
   1dc5c:	add	r4, r4, #50	; 0x32
   1dc60:	mov	r5, #0
   1dc64:	mov	r1, #0
   1dc68:	b	1dae4 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dc6c:	teq	r0, #0
   1dc70:	moveq	r1, #0
   1dc74:	bxeq	lr
   1dc78:	push	{r4, r5, lr}
   1dc7c:	mov	r4, #1024	; 0x400
   1dc80:	add	r4, r4, #50	; 0x32
   1dc84:	ands	r5, r0, #-2147483648	; 0x80000000
   1dc88:	rsbmi	r0, r0, #0
   1dc8c:	mov	r1, #0
   1dc90:	b	1dae4 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dc94:	lsls	r2, r0, #1
   1dc98:	asr	r1, r2, #3
   1dc9c:	rrx	r1, r1
   1dca0:	lsl	r0, r2, #28
   1dca4:	andsne	r3, r2, #-16777216	; 0xff000000
   1dca8:	teqne	r3, #-16777216	; 0xff000000
   1dcac:	eorne	r1, r1, #939524096	; 0x38000000
   1dcb0:	bxne	lr
   1dcb4:	bics	r2, r2, #-16777216	; 0xff000000
   1dcb8:	bxeq	lr
   1dcbc:	teq	r3, #-16777216	; 0xff000000
   1dcc0:	orreq	r1, r1, #524288	; 0x80000
   1dcc4:	bxeq	lr
   1dcc8:	push	{r4, r5, lr}
   1dccc:	mov	r4, #896	; 0x380
   1dcd0:	and	r5, r1, #-2147483648	; 0x80000000
   1dcd4:	bic	r1, r1, #-2147483648	; 0x80000000
   1dcd8:	b	1dae4 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dcdc:	orrs	r2, r0, r1
   1dce0:	bxeq	lr
   1dce4:	push	{r4, r5, lr}
   1dce8:	mov	r5, #0
   1dcec:	b	1dd0c <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dcf0:	orrs	r2, r0, r1
   1dcf4:	bxeq	lr
   1dcf8:	push	{r4, r5, lr}
   1dcfc:	ands	r5, r1, #-2147483648	; 0x80000000
   1dd00:	bpl	1dd0c <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dd04:	rsbs	r0, r0, #0
   1dd08:	rsc	r1, r1, #0
   1dd0c:	mov	r4, #1024	; 0x400
   1dd10:	add	r4, r4, #50	; 0x32
   1dd14:	lsrs	ip, r1, #22
   1dd18:	beq	1da88 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1dd1c:	mov	r2, #3
   1dd20:	lsrs	ip, ip, #3
   1dd24:	addne	r2, r2, #3
   1dd28:	lsrs	ip, ip, #3
   1dd2c:	addne	r2, r2, #3
   1dd30:	add	r2, r2, ip, lsr #3
   1dd34:	rsb	r3, r2, #32
   1dd38:	lsl	ip, r0, r3
   1dd3c:	lsr	r0, r0, r2
   1dd40:	orr	r0, r0, r1, lsl r3
   1dd44:	lsr	r1, r1, r2
   1dd48:	add	r4, r4, r2
   1dd4c:	b	1da88 <flatcc_json_parser_struct_as_root@@Base+0x1cc>

0001dd50 <__libc_csu_init@@Base>:
   1dd50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dd54:	mov	r7, r0
   1dd58:	ldr	r6, [pc, #72]	; 1dda8 <__libc_csu_init@@Base+0x58>
   1dd5c:	ldr	r5, [pc, #72]	; 1ddac <__libc_csu_init@@Base+0x5c>
   1dd60:	add	r6, pc, r6
   1dd64:	add	r5, pc, r5
   1dd68:	sub	r6, r6, r5
   1dd6c:	mov	r8, r1
   1dd70:	mov	r9, r2
   1dd74:	bl	128d0 <free@plt-0x20>
   1dd78:	asrs	r6, r6, #2
   1dd7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd80:	mov	r4, #0
   1dd84:	add	r4, r4, #1
   1dd88:	ldr	r3, [r5], #4
   1dd8c:	mov	r2, r9
   1dd90:	mov	r1, r8
   1dd94:	mov	r0, r7
   1dd98:	blx	r3
   1dd9c:	cmp	r6, r4
   1dda0:	bne	1dd84 <__libc_csu_init@@Base+0x34>
   1dda4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dda8:	andeq	r3, r1, r8, lsl r1
   1ddac:	andeq	r3, r1, r0, lsl r1

0001ddb0 <__libc_csu_fini@@Base>:
   1ddb0:	bx	lr

Disassembly of section .fini:

0001ddb4 <.fini>:
   1ddb4:	push	{r3, lr}
   1ddb8:	pop	{r3, pc}
