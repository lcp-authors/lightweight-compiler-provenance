
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

0001117c <.init>:
   1117c:	push	{r3, lr}
   11180:	bl	1150c <__assert_fail@plt+0x4c>
   11184:	pop	{r3, pc}

Disassembly of section .plt:

00011188 <fstatfs64@plt-0x14>:
   11188:	push	{lr}		; (str lr, [sp, #-4]!)
   1118c:	ldr	lr, [pc, #4]	; 11198 <fstatfs64@plt-0x4>
   11190:	add	lr, pc, lr
   11194:	ldr	pc, [lr, #8]!
   11198:	andeq	sl, r1, r8, ror #28

0001119c <fstatfs64@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3688]!	; 0xe68

000111a8 <calloc@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3680]!	; 0xe60

000111b4 <endgrent@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3672]!	; 0xe58

000111c0 <fputs_unlocked@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3664]!	; 0xe50

000111cc <raise@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3656]!	; 0xe48

000111d8 <strcmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3648]!	; 0xe40

000111e4 <getpwuid@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3640]!	; 0xe38

000111f0 <fflush@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3632]!	; 0xe30

000111fc <memmove@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3624]!	; 0xe28

00011208 <free@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3616]!	; 0xe20

00011214 <_exit@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3608]!	; 0xe18

00011220 <memcpy@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3600]!	; 0xe10

0001122c <__strtoull_internal@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3592]!	; 0xe08

00011238 <mbsinit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3584]!	; 0xe00

00011244 <memcmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011250 <stpcpy@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3568]!	; 0xdf0

0001125c <dcgettext@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3560]!	; 0xde8

00011268 <realloc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3552]!	; 0xde0

00011274 <textdomain@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011280 <__fxstatat64@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3536]!	; 0xdd0

0001128c <iswprint@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3528]!	; 0xdc8

00011298 <__fxstat64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112a4 <fwrite@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3512]!	; 0xdb8

000112b0 <lseek64@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112bc <__ctype_get_mb_cur_max@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3496]!	; 0xda8

000112c8 <__fpending@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3488]!	; 0xda0

000112d4 <mbrtowc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3480]!	; 0xd98

000112e0 <error@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3472]!	; 0xd90

000112ec <open64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3464]!	; 0xd88

000112f8 <malloc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3456]!	; 0xd80

00011304 <__libc_start_main@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3448]!	; 0xd78

00011310 <__freading@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3440]!	; 0xd70

0001131c <__gmon_start__@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3432]!	; 0xd68

00011328 <getopt_long@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3424]!	; 0xd60

00011334 <__ctype_b_loc@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3416]!	; 0xd58

00011340 <exit@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3408]!	; 0xd50

0001134c <strlen@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3400]!	; 0xd48

00011358 <strchr@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3392]!	; 0xd40

00011364 <openat64@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3384]!	; 0xd38

00011370 <fchown@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3376]!	; 0xd30

0001137c <__errno_location@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3368]!	; 0xd28

00011388 <__cxa_atexit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3360]!	; 0xd20

00011394 <memset@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3352]!	; 0xd18

000113a0 <__printf_chk@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ac <fileno@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3336]!	; 0xd08

000113b8 <__fprintf_chk@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3328]!	; 0xd00

000113c4 <fclose@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113d0 <fseeko64@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113dc <fcntl64@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3304]!	; 0xce8

000113e8 <setlocale@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3296]!	; 0xce0

000113f4 <strrchr@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3288]!	; 0xcd8

00011400 <nl_langinfo@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3280]!	; 0xcd0

0001140c <readdir64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3272]!	; 0xcc8

00011418 <fdopendir@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3264]!	; 0xcc0

00011424 <dirfd@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011430 <fchdir@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3248]!	; 0xcb0

0001143c <qsort@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3240]!	; 0xca8

00011448 <fchownat@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3232]!	; 0xca0

00011454 <bindtextdomain@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3224]!	; 0xc98

00011460 <__xstat64@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3216]!	; 0xc90

0001146c <strncmp@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3208]!	; 0xc88

00011478 <abort@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3200]!	; 0xc80

00011484 <close@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3192]!	; 0xc78

00011490 <__lxstat64@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3184]!	; 0xc70

0001149c <closedir@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3176]!	; 0xc68

000114a8 <getgrgid@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3168]!	; 0xc60

000114b4 <getgrnam@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3160]!	; 0xc58

000114c0 <__assert_fail@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3152]!	; 0xc50

Disassembly of section .text:

000114d0 <.text>:
   114d0:	mov	fp, #0
   114d4:	mov	lr, #0
   114d8:	pop	{r1}		; (ldr r1, [sp], #4)
   114dc:	mov	r2, sp
   114e0:	push	{r2}		; (str r2, [sp, #-4]!)
   114e4:	push	{r0}		; (str r0, [sp, #-4]!)
   114e8:	ldr	ip, [pc, #16]	; 11500 <__assert_fail@plt+0x40>
   114ec:	push	{ip}		; (str ip, [sp, #-4]!)
   114f0:	ldr	r0, [pc, #12]	; 11504 <__assert_fail@plt+0x44>
   114f4:	ldr	r3, [pc, #12]	; 11508 <__assert_fail@plt+0x48>
   114f8:	bl	11304 <__libc_start_main@plt>
   114fc:	bl	11478 <abort@plt>
   11500:			; <UNDEFINED> instruction: 0x0001a7b4
   11504:	strdeq	r1, [r1], -r4
   11508:	andeq	sl, r1, r4, asr r7
   1150c:	ldr	r3, [pc, #20]	; 11528 <__assert_fail@plt+0x68>
   11510:	ldr	r2, [pc, #20]	; 1152c <__assert_fail@plt+0x6c>
   11514:	add	r3, pc, r3
   11518:	ldr	r2, [r3, r2]
   1151c:	cmp	r2, #0
   11520:	bxeq	lr
   11524:	b	1131c <__gmon_start__@plt>
   11528:	andeq	sl, r1, r4, ror #21
   1152c:	andeq	r0, r0, ip, lsl r1
   11530:	ldr	r0, [pc, #24]	; 11550 <__assert_fail@plt+0x90>
   11534:	ldr	r3, [pc, #24]	; 11554 <__assert_fail@plt+0x94>
   11538:	cmp	r3, r0
   1153c:	bxeq	lr
   11540:	ldr	r3, [pc, #16]	; 11558 <__assert_fail@plt+0x98>
   11544:	cmp	r3, #0
   11548:	bxeq	lr
   1154c:	bx	r3
   11550:	andeq	ip, r2, r0, ror r1
   11554:	andeq	ip, r2, r0, ror r1
   11558:	andeq	r0, r0, r0
   1155c:	ldr	r0, [pc, #36]	; 11588 <__assert_fail@plt+0xc8>
   11560:	ldr	r1, [pc, #36]	; 1158c <__assert_fail@plt+0xcc>
   11564:	sub	r1, r1, r0
   11568:	asr	r1, r1, #2
   1156c:	add	r1, r1, r1, lsr #31
   11570:	asrs	r1, r1, #1
   11574:	bxeq	lr
   11578:	ldr	r3, [pc, #16]	; 11590 <__assert_fail@plt+0xd0>
   1157c:	cmp	r3, #0
   11580:	bxeq	lr
   11584:	bx	r3
   11588:	andeq	ip, r2, r0, ror r1
   1158c:	andeq	ip, r2, r0, ror r1
   11590:	andeq	r0, r0, r0
   11594:	push	{r4, lr}
   11598:	ldr	r4, [pc, #24]	; 115b8 <__assert_fail@plt+0xf8>
   1159c:	ldrb	r3, [r4]
   115a0:	cmp	r3, #0
   115a4:	popne	{r4, pc}
   115a8:	bl	11530 <__assert_fail@plt+0x70>
   115ac:	mov	r3, #1
   115b0:	strb	r3, [r4]
   115b4:	pop	{r4, pc}
   115b8:	andeq	ip, r2, ip, lsl #3
   115bc:	b	1155c <__assert_fail@plt+0x9c>
   115c0:	push	{fp, lr}
   115c4:	mov	fp, sp
   115c8:	sub	sp, sp, #56	; 0x38
   115cc:	mov	r4, r0
   115d0:	cmp	r0, #0
   115d4:	bne	118b0 <__assert_fail@plt+0x3f0>
   115d8:	movw	r1, #43019	; 0xa80b
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	1125c <dcgettext@plt>
   115ec:	movw	r5, #49584	; 0xc1b0
   115f0:	mov	r1, r0
   115f4:	mov	r0, #1
   115f8:	movt	r5, #2
   115fc:	ldr	r2, [r5]
   11600:	mov	r3, r2
   11604:	bl	113a0 <__printf_chk@plt>
   11608:	movw	r1, #43104	; 0xa860
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	movt	r1, #1
   11618:	bl	1125c <dcgettext@plt>
   1161c:	movw	r7, #49540	; 0xc184
   11620:	movt	r7, #2
   11624:	ldr	r1, [r7]
   11628:	bl	111c0 <fputs_unlocked@plt>
   1162c:	movw	r1, #43212	; 0xa8cc
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	1125c <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	111c0 <fputs_unlocked@plt>
   11648:	movw	r1, #43413	; 0xa995
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	1125c <dcgettext@plt>
   1165c:	ldr	r1, [r7]
   11660:	bl	111c0 <fputs_unlocked@plt>
   11664:	movw	r1, #43644	; 0xaa7c
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	1125c <dcgettext@plt>
   11678:	ldr	r1, [r7]
   1167c:	bl	111c0 <fputs_unlocked@plt>
   11680:	movw	r1, #43763	; 0xaaf3
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	1125c <dcgettext@plt>
   11694:	ldr	r1, [r7]
   11698:	bl	111c0 <fputs_unlocked@plt>
   1169c:	movw	r1, #43891	; 0xab73
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	1125c <dcgettext@plt>
   116b0:	ldr	r1, [r7]
   116b4:	bl	111c0 <fputs_unlocked@plt>
   116b8:	movw	r1, #43997	; 0xabdd
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	1125c <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	111c0 <fputs_unlocked@plt>
   116d4:	movw	r1, #44068	; 0xac24
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	1125c <dcgettext@plt>
   116e8:	ldr	r1, [r7]
   116ec:	bl	111c0 <fputs_unlocked@plt>
   116f0:	movw	r1, #44533	; 0xadf5
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	1125c <dcgettext@plt>
   11704:	ldr	r1, [r7]
   11708:	bl	111c0 <fputs_unlocked@plt>
   1170c:	movw	r1, #44578	; 0xae22
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #1
   1171c:	bl	1125c <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	111c0 <fputs_unlocked@plt>
   11728:	movw	r1, #44632	; 0xae58
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #1
   11738:	bl	1125c <dcgettext@plt>
   1173c:	ldr	r2, [r5]
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r3, r2
   1174c:	bl	113a0 <__printf_chk@plt>
   11750:	movw	r0, #45584	; 0xb210
   11754:	mov	r2, #48	; 0x30
   11758:	mov	r6, sp
   1175c:	movw	r5, #44765	; 0xaedd
   11760:	movt	r0, #1
   11764:	movt	r5, #1
   11768:	add	r1, r0, #32
   1176c:	add	r3, r0, #16
   11770:	vld1.64	{d18-d19}, [r0], r2
   11774:	vld1.64	{d16-d17}, [r1]
   11778:	vld1.64	{d20-d21}, [r3]
   1177c:	add	r1, r6, #32
   11780:	vldr	d22, [r0]
   11784:	add	r0, r6, #16
   11788:	vst1.64	{d16-d17}, [r1]
   1178c:	movw	r1, #44961	; 0xafa1
   11790:	vst1.64	{d20-d21}, [r0]
   11794:	mov	r0, r6
   11798:	vst1.64	{d18-d19}, [r0], r2
   1179c:	movt	r1, #1
   117a0:	vstr	d22, [r0]
   117a4:	mov	r0, r5
   117a8:	bl	111d8 <strcmp@plt>
   117ac:	cmp	r0, #0
   117b0:	ldrne	r1, [r6, #8]!
   117b4:	cmpne	r1, #0
   117b8:	bne	117a4 <__assert_fail@plt+0x2e4>
   117bc:	ldr	r6, [r6, #4]
   117c0:	movw	r1, #45056	; 0xb000
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	1125c <dcgettext@plt>
   117d4:	movw	r2, #44804	; 0xaf04
   117d8:	movw	r3, #45079	; 0xb017
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	movt	r2, #1
   117e8:	movt	r3, #1
   117ec:	bl	113a0 <__printf_chk@plt>
   117f0:	cmp	r6, #0
   117f4:	mov	r0, #5
   117f8:	mov	r1, #0
   117fc:	moveq	r6, r5
   11800:	bl	113e8 <setlocale@plt>
   11804:	cmp	r0, #0
   11808:	beq	11840 <__assert_fail@plt+0x380>
   1180c:	movw	r1, #45119	; 0xb03f
   11810:	mov	r2, #3
   11814:	movt	r1, #1
   11818:	bl	1146c <strncmp@plt>
   1181c:	cmp	r0, #0
   11820:	beq	11840 <__assert_fail@plt+0x380>
   11824:	movw	r1, #45123	; 0xb043
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	1125c <dcgettext@plt>
   11838:	ldr	r1, [r7]
   1183c:	bl	111c0 <fputs_unlocked@plt>
   11840:	movw	r1, #45194	; 0xb08a
   11844:	mov	r0, #0
   11848:	mov	r2, #5
   1184c:	movt	r1, #1
   11850:	bl	1125c <dcgettext@plt>
   11854:	movw	r2, #45079	; 0xb017
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	mov	r3, r5
   11864:	movt	r2, #1
   11868:	bl	113a0 <__printf_chk@plt>
   1186c:	movw	r1, #45221	; 0xb0a5
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	movt	r1, #1
   1187c:	bl	1125c <dcgettext@plt>
   11880:	movw	r3, #44532	; 0xadf4
   11884:	mov	r1, r0
   11888:	movw	r0, #44989	; 0xafbd
   1188c:	cmp	r6, r5
   11890:	mov	r2, r6
   11894:	movt	r0, #1
   11898:	movt	r3, #1
   1189c:	moveq	r3, r0
   118a0:	mov	r0, #1
   118a4:	bl	113a0 <__printf_chk@plt>
   118a8:	mov	r0, r4
   118ac:	bl	11340 <exit@plt>
   118b0:	movw	r0, #49536	; 0xc180
   118b4:	movw	r1, #42980	; 0xa7e4
   118b8:	mov	r2, #5
   118bc:	movt	r0, #2
   118c0:	movt	r1, #1
   118c4:	ldr	r5, [r0]
   118c8:	mov	r0, #0
   118cc:	bl	1125c <dcgettext@plt>
   118d0:	mov	r2, r0
   118d4:	movw	r0, #49584	; 0xc1b0
   118d8:	mov	r1, #1
   118dc:	movt	r0, #2
   118e0:	ldr	r3, [r0]
   118e4:	mov	r0, r5
   118e8:	bl	113b8 <__fprintf_chk@plt>
   118ec:	mov	r0, r4
   118f0:	bl	11340 <exit@plt>
   118f4:	push	{fp, lr}
   118f8:	mov	fp, sp
   118fc:	sub	sp, sp, #144	; 0x90
   11900:	mov	r7, r0
   11904:	ldr	r0, [r1]
   11908:	mov	r4, r1
   1190c:	bl	16664 <__assert_fail@plt+0x51a4>
   11910:	movw	r1, #44532	; 0xadf4
   11914:	mov	r0, #6
   11918:	movt	r1, #1
   1191c:	bl	113e8 <setlocale@plt>
   11920:	movw	r5, #44808	; 0xaf08
   11924:	movw	r1, #44771	; 0xaee3
   11928:	movt	r5, #1
   1192c:	movt	r1, #1
   11930:	mov	r0, r5
   11934:	bl	11454 <bindtextdomain@plt>
   11938:	mov	r0, r5
   1193c:	bl	11274 <textdomain@plt>
   11940:	movw	r0, #11564	; 0x2d2c
   11944:	movt	r0, #1
   11948:	bl	1a7b8 <__assert_fail@plt+0x92f8>
   1194c:	sub	r0, fp, #24
   11950:	bl	11e7c <__assert_fail@plt+0x9bc>
   11954:	movw	r5, #44795	; 0xaefb
   11958:	movw	r6, #45376	; 0xb140
   1195c:	mov	r9, #0
   11960:	mov	r0, #16
   11964:	mvn	r8, #0
   11968:	movt	r5, #1
   1196c:	movt	r6, #1
   11970:	b	11978 <__assert_fail@plt+0x4b8>
   11974:	mov	r0, sl
   11978:	mov	r1, #0
   1197c:	str	r1, [sp, #12]
   11980:	b	11990 <__assert_fail@plt+0x4d0>
   11984:	mov	r0, #1
   11988:	str	r0, [fp, #-24]	; 0xffffffe8
   1198c:	mov	r0, sl
   11990:	mov	sl, r0
   11994:	mov	r0, r7
   11998:	mov	r1, r4
   1199c:	mov	r2, r5
   119a0:	mov	r3, r6
   119a4:	str	r9, [sp]
   119a8:	bl	11328 <getopt_long@plt>
   119ac:	cmp	r0, #71	; 0x47
   119b0:	ble	11b30 <__assert_fail@plt+0x670>
   119b4:	sub	r1, r0, #72	; 0x48
   119b8:	cmp	r1, #46	; 0x2e
   119bc:	bhi	11a90 <__assert_fail@plt+0x5d0>
   119c0:	add	r2, pc, #4
   119c4:	mov	r0, #17
   119c8:	ldr	pc, [r2, r1, lsl #2]
   119cc:	muleq	r1, r0, r9
   119d0:	andeq	r1, r1, r4, ror lr
   119d4:	andeq	r1, r1, r4, ror lr
   119d8:	andeq	r1, r1, r4, ror lr
   119dc:	andeq	r1, r1, r8, lsl #21
   119e0:	andeq	r1, r1, r4, ror lr
   119e4:	andeq	r1, r1, r4, ror lr
   119e8:	andeq	r1, r1, r4, ror lr
   119ec:	strdeq	r1, [r1], -r0
   119f0:	andeq	r1, r1, r4, ror lr
   119f4:	strdeq	r1, [r1], -r8
   119f8:	andeq	r1, r1, r4, ror lr
   119fc:	andeq	r1, r1, r4, ror lr
   11a00:	andeq	r1, r1, r4, ror lr
   11a04:	andeq	r1, r1, r4, ror lr
   11a08:	andeq	r1, r1, r4, ror lr
   11a0c:	andeq	r1, r1, r4, ror lr
   11a10:	andeq	r1, r1, r4, ror lr
   11a14:	andeq	r1, r1, r4, ror lr
   11a18:	andeq	r1, r1, r4, ror lr
   11a1c:	andeq	r1, r1, r4, ror lr
   11a20:	andeq	r1, r1, r4, ror lr
   11a24:	andeq	r1, r1, r4, ror lr
   11a28:	andeq	r1, r1, r4, ror lr
   11a2c:	andeq	r1, r1, r4, ror lr
   11a30:	andeq	r1, r1, r4, ror lr
   11a34:	andeq	r1, r1, r4, ror lr
   11a38:	andeq	r1, r1, r4, lsl #19
   11a3c:	andeq	r1, r1, r4, ror lr
   11a40:	andeq	r1, r1, r4, ror lr
   11a44:	andeq	r1, r1, r8, lsl #22
   11a48:	andeq	r1, r1, r4, ror lr
   11a4c:	andeq	r1, r1, r8, lsl fp
   11a50:	andeq	r1, r1, r4, ror lr
   11a54:	andeq	r1, r1, r4, ror lr
   11a58:	andeq	r1, r1, r4, ror lr
   11a5c:	andeq	r1, r1, r4, ror lr
   11a60:	andeq	r1, r1, r4, ror lr
   11a64:	andeq	r1, r1, r4, ror lr
   11a68:	andeq	r1, r1, r4, ror lr
   11a6c:	andeq	r1, r1, r4, ror lr
   11a70:	andeq	r1, r1, r4, ror lr
   11a74:	andeq	r1, r1, r4, ror lr
   11a78:	andeq	r1, r1, r4, ror lr
   11a7c:	andeq	r1, r1, r4, ror lr
   11a80:	andeq	r1, r1, r4, ror lr
   11a84:	andeq	r1, r1, r4, lsr #22
   11a88:	mov	r0, #2
   11a8c:	b	11990 <__assert_fail@plt+0x4d0>
   11a90:	sub	r0, r0, #256	; 0x100
   11a94:	cmp	r0, #3
   11a98:	bhi	11e74 <__assert_fail@plt+0x9b4>
   11a9c:	add	r1, pc, #0
   11aa0:	ldr	pc, [r1, r0, lsl #2]
   11aa4:			; <UNDEFINED> instruction: 0x00011ab4
   11aa8:	andeq	r1, r1, r4, ror r9
   11aac:	andeq	r1, r1, r0, asr #21
   11ab0:	ldrdeq	r1, [r1], -r0
   11ab4:	mov	r8, #1
   11ab8:	mov	r0, sl
   11abc:	b	11990 <__assert_fail@plt+0x4d0>
   11ac0:	mov	r0, #1
   11ac4:	str	r0, [sp, #12]
   11ac8:	mov	r0, sl
   11acc:	b	11990 <__assert_fail@plt+0x4d0>
   11ad0:	movw	r0, #49544	; 0xc188
   11ad4:	movw	r1, #49552	; 0xc190
   11ad8:	movt	r0, #2
   11adc:	movt	r1, #2
   11ae0:	ldr	r0, [r0]
   11ae4:	str	r0, [r1]
   11ae8:	mov	r0, sl
   11aec:	b	11990 <__assert_fail@plt+0x4d0>
   11af0:	mov	r0, #16
   11af4:	b	11990 <__assert_fail@plt+0x4d0>
   11af8:	mov	r0, #1
   11afc:	strb	r0, [fp, #-20]	; 0xffffffec
   11b00:	mov	r0, sl
   11b04:	b	11990 <__assert_fail@plt+0x4d0>
   11b08:	mov	r0, #1
   11b0c:	strb	r0, [fp, #-11]
   11b10:	mov	r0, sl
   11b14:	b	11990 <__assert_fail@plt+0x4d0>
   11b18:	mov	r8, #0
   11b1c:	mov	r0, sl
   11b20:	b	11990 <__assert_fail@plt+0x4d0>
   11b24:	str	r9, [fp, #-24]	; 0xffffffe8
   11b28:	mov	r0, sl
   11b2c:	b	11990 <__assert_fail@plt+0x4d0>
   11b30:	cmn	r0, #3
   11b34:	beq	11b48 <__assert_fail@plt+0x688>
   11b38:	cmn	r0, #2
   11b3c:	bne	11b9c <__assert_fail@plt+0x6dc>
   11b40:	mov	r0, #0
   11b44:	bl	115c0 <__assert_fail@plt+0x100>
   11b48:	movw	r0, #49448	; 0xc128
   11b4c:	movw	r2, #44834	; 0xaf22
   11b50:	mov	r1, #0
   11b54:	movw	r7, #44818	; 0xaf12
   11b58:	movt	r0, #2
   11b5c:	movt	r2, #1
   11b60:	str	r1, [sp, #8]
   11b64:	movw	r1, #44765	; 0xaedd
   11b68:	movt	r7, #1
   11b6c:	ldr	r3, [r0]
   11b70:	movw	r0, #49540	; 0xc184
   11b74:	str	r2, [sp, #4]
   11b78:	movw	r2, #44804	; 0xaf04
   11b7c:	movt	r1, #1
   11b80:	str	r7, [sp]
   11b84:	movt	r0, #2
   11b88:	movt	r2, #1
   11b8c:	ldr	r0, [r0]
   11b90:	bl	188f0 <__assert_fail@plt+0x7430>
   11b94:	mov	r0, #0
   11b98:	bl	11340 <exit@plt>
   11b9c:	cmn	r0, #1
   11ba0:	bne	11e74 <__assert_fail@plt+0x9b4>
   11ba4:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11ba8:	mov	r9, #16
   11bac:	cmp	r0, #0
   11bb0:	bne	11bbc <__assert_fail@plt+0x6fc>
   11bb4:	mov	r0, r8
   11bb8:	b	11bfc <__assert_fail@plt+0x73c>
   11bbc:	cmp	sl, #16
   11bc0:	bne	11bf4 <__assert_fail@plt+0x734>
   11bc4:	mov	r0, #0
   11bc8:	cmp	r8, #1
   11bcc:	bne	11bfc <__assert_fail@plt+0x73c>
   11bd0:	movw	r1, #44847	; 0xaf2f
   11bd4:	mov	r0, #0
   11bd8:	mov	r2, #5
   11bdc:	movt	r1, #1
   11be0:	bl	1125c <dcgettext@plt>
   11be4:	mov	r2, r0
   11be8:	mov	r0, #1
   11bec:	mov	r1, #0
   11bf0:	bl	112e0 <error@plt>
   11bf4:	mov	r0, r8
   11bf8:	mov	r9, sl
   11bfc:	cmp	r0, #0
   11c00:	movw	r8, #49528	; 0xc178
   11c04:	mov	r2, #2
   11c08:	movwne	r0, #1
   11c0c:	movt	r8, #2
   11c10:	strb	r0, [fp, #-12]
   11c14:	movw	r0, #49552	; 0xc190
   11c18:	movt	r0, #2
   11c1c:	ldr	r1, [r0]
   11c20:	ldr	r0, [r8]
   11c24:	cmp	r1, #0
   11c28:	sub	r3, r7, r0
   11c2c:	movwne	r2, #1
   11c30:	cmp	r3, r2
   11c34:	bge	11c80 <__assert_fail@plt+0x7c0>
   11c38:	cmp	r0, r7
   11c3c:	bge	11cb0 <__assert_fail@plt+0x7f0>
   11c40:	movw	r1, #44905	; 0xaf69
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	1125c <dcgettext@plt>
   11c54:	mov	r5, r0
   11c58:	add	r0, r4, r7, lsl #2
   11c5c:	ldr	r0, [r0, #-4]
   11c60:	bl	18298 <__assert_fail@plt+0x6dd8>
   11c64:	mov	r3, r0
   11c68:	mov	r0, #0
   11c6c:	mov	r1, #0
   11c70:	mov	r2, r5
   11c74:	bl	112e0 <error@plt>
   11c78:	mov	r0, #1
   11c7c:	bl	115c0 <__assert_fail@plt+0x100>
   11c80:	cmp	r1, #0
   11c84:	beq	11cdc <__assert_fail@plt+0x81c>
   11c88:	add	r2, sp, #16
   11c8c:	mov	r0, #3
   11c90:	bl	11460 <__xstat64@plt>
   11c94:	cmp	r0, #0
   11c98:	bne	11d88 <__assert_fail@plt+0x8c8>
   11c9c:	ldr	r6, [sp, #44]	; 0x2c
   11ca0:	mov	r0, r6
   11ca4:	bl	11ec4 <__assert_fail@plt+0xa04>
   11ca8:	str	r0, [fp, #-4]
   11cac:	b	11dc8 <__assert_fail@plt+0x908>
   11cb0:	movw	r1, #44889	; 0xaf59
   11cb4:	mov	r0, #0
   11cb8:	mov	r2, #5
   11cbc:	movt	r1, #1
   11cc0:	bl	1125c <dcgettext@plt>
   11cc4:	mov	r2, r0
   11cc8:	mov	r0, #0
   11ccc:	mov	r1, #0
   11cd0:	bl	112e0 <error@plt>
   11cd4:	mov	r0, #1
   11cd8:	bl	115c0 <__assert_fail@plt+0x100>
   11cdc:	add	r1, r0, #1
   11ce0:	str	r1, [r8]
   11ce4:	ldr	r5, [r4, r0, lsl #2]
   11ce8:	mov	r0, #0
   11cec:	ldrb	r1, [r5]
   11cf0:	cmp	r1, #0
   11cf4:	beq	11d00 <__assert_fail@plt+0x840>
   11cf8:	mov	r0, r5
   11cfc:	bl	19044 <__assert_fail@plt+0x7b84>
   11d00:	str	r0, [fp, #-4]
   11d04:	mvn	r6, #0
   11d08:	ldrb	r0, [r5]
   11d0c:	cmp	r0, #0
   11d10:	beq	11dc8 <__assert_fail@plt+0x908>
   11d14:	mov	r0, r5
   11d18:	bl	114b4 <getgrnam@plt>
   11d1c:	cmp	r0, #0
   11d20:	bne	11db8 <__assert_fail@plt+0x8f8>
   11d24:	movw	r0, #44532	; 0xadf4
   11d28:	add	r3, sp, #16
   11d2c:	mov	r1, #0
   11d30:	mov	r2, #10
   11d34:	movt	r0, #1
   11d38:	str	r0, [sp]
   11d3c:	mov	r0, r5
   11d40:	bl	19144 <__assert_fail@plt+0x7c84>
   11d44:	cmp	r0, #0
   11d48:	ldreq	r0, [sp, #20]
   11d4c:	cmpeq	r0, #0
   11d50:	beq	11dc0 <__assert_fail@plt+0x900>
   11d54:	movw	r1, #45356	; 0xb12c
   11d58:	mov	r0, #0
   11d5c:	mov	r2, #5
   11d60:	movt	r1, #1
   11d64:	bl	1125c <dcgettext@plt>
   11d68:	mov	r4, r0
   11d6c:	mov	r0, r5
   11d70:	bl	18298 <__assert_fail@plt+0x6dd8>
   11d74:	mov	r3, r0
   11d78:	mov	r0, #1
   11d7c:	mov	r1, #0
   11d80:	mov	r2, r4
   11d84:	bl	112e0 <error@plt>
   11d88:	bl	1137c <__errno_location@plt>
   11d8c:	ldr	r4, [r0]
   11d90:	movw	r1, #44930	; 0xaf82
   11d94:	mov	r0, #0
   11d98:	mov	r2, #5
   11d9c:	movt	r1, #1
   11da0:	bl	1125c <dcgettext@plt>
   11da4:	mov	r5, r0
   11da8:	movw	r0, #49552	; 0xc190
   11dac:	movt	r0, #2
   11db0:	ldr	r1, [r0]
   11db4:	b	11e24 <__assert_fail@plt+0x964>
   11db8:	ldr	r6, [r0, #8]
   11dbc:	b	11dc4 <__assert_fail@plt+0x904>
   11dc0:	ldr	r6, [sp, #16]
   11dc4:	bl	111b4 <endgrent@plt>
   11dc8:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11dcc:	cmp	r0, #0
   11dd0:	beq	11e40 <__assert_fail@plt+0x980>
   11dd4:	ldr	r0, [sp, #12]
   11dd8:	eor	r0, r0, #1
   11ddc:	tst	r0, #1
   11de0:	bne	11e40 <__assert_fail@plt+0x980>
   11de4:	movw	r0, #49560	; 0xc198
   11de8:	movt	r0, #2
   11dec:	bl	183d0 <__assert_fail@plt+0x6f10>
   11df0:	cmp	r0, #0
   11df4:	str	r0, [fp, #-16]
   11df8:	bne	11e40 <__assert_fail@plt+0x980>
   11dfc:	bl	1137c <__errno_location@plt>
   11e00:	ldr	r4, [r0]
   11e04:	movw	r1, #44930	; 0xaf82
   11e08:	mov	r0, #0
   11e0c:	mov	r2, #5
   11e10:	movt	r1, #1
   11e14:	bl	1125c <dcgettext@plt>
   11e18:	movw	r1, #47775	; 0xba9f
   11e1c:	mov	r5, r0
   11e20:	movt	r1, #1
   11e24:	mov	r0, #4
   11e28:	bl	17d70 <__assert_fail@plt+0x68b0>
   11e2c:	mov	r3, r0
   11e30:	mov	r0, #1
   11e34:	mov	r1, r4
   11e38:	mov	r2, r5
   11e3c:	bl	112e0 <error@plt>
   11e40:	ldr	r0, [r8]
   11e44:	mvn	r1, #0
   11e48:	mvn	r2, #0
   11e4c:	mov	r3, r6
   11e50:	str	r1, [sp]
   11e54:	str	r1, [sp, #4]
   11e58:	sub	r1, fp, #24
   11e5c:	str	r1, [sp, #8]
   11e60:	orr	r1, r9, #1024	; 0x400
   11e64:	add	r0, r4, r0, lsl #2
   11e68:	bl	11f44 <__assert_fail@plt+0xa84>
   11e6c:	eor	r0, r0, #1
   11e70:	bl	11340 <exit@plt>
   11e74:	mov	r0, #1
   11e78:	bl	115c0 <__assert_fail@plt+0x100>
   11e7c:	mov	r1, #0
   11e80:	mov	r2, #2
   11e84:	str	r1, [r0, #8]
   11e88:	str	r2, [r0]
   11e8c:	mov	r2, #1
   11e90:	strb	r1, [r0, #4]
   11e94:	strh	r2, [r0, #12]
   11e98:	str	r1, [r0, #16]
   11e9c:	str	r1, [r0, #20]
   11ea0:	bx	lr
   11ea4:	push	{r4, sl, fp, lr}
   11ea8:	add	fp, sp, #8
   11eac:	mov	r4, r0
   11eb0:	ldr	r0, [r0, #16]
   11eb4:	bl	12e14 <__assert_fail@plt+0x1954>
   11eb8:	ldr	r0, [r4, #20]
   11ebc:	pop	{r4, sl, fp, lr}
   11ec0:	b	12e14 <__assert_fail@plt+0x1954>
   11ec4:	push	{r4, sl, fp, lr}
   11ec8:	add	fp, sp, #8
   11ecc:	sub	sp, sp, #24
   11ed0:	mov	r4, r0
   11ed4:	bl	114a8 <getgrgid@plt>
   11ed8:	cmp	r0, #0
   11edc:	beq	11ee8 <__assert_fail@plt+0xa28>
   11ee0:	ldr	r0, [r0]
   11ee4:	b	11ef8 <__assert_fail@plt+0xa38>
   11ee8:	add	r2, sp, #3
   11eec:	mov	r0, r4
   11ef0:	mov	r1, #0
   11ef4:	bl	16568 <__assert_fail@plt+0x50a8>
   11ef8:	bl	19044 <__assert_fail@plt+0x7b84>
   11efc:	sub	sp, fp, #8
   11f00:	pop	{r4, sl, fp, pc}
   11f04:	push	{r4, sl, fp, lr}
   11f08:	add	fp, sp, #8
   11f0c:	sub	sp, sp, #24
   11f10:	mov	r4, r0
   11f14:	bl	111e4 <getpwuid@plt>
   11f18:	cmp	r0, #0
   11f1c:	beq	11f28 <__assert_fail@plt+0xa68>
   11f20:	ldr	r0, [r0]
   11f24:	b	11f38 <__assert_fail@plt+0xa78>
   11f28:	add	r2, sp, #3
   11f2c:	mov	r0, r4
   11f30:	mov	r1, #0
   11f34:	bl	16568 <__assert_fail@plt+0x50a8>
   11f38:	bl	19044 <__assert_fail@plt+0x7b84>
   11f3c:	sub	sp, fp, #8
   11f40:	pop	{r4, sl, fp, pc}
   11f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f48:	add	fp, sp, #28
   11f4c:	sub	sp, sp, #260	; 0x104
   11f50:	str	r3, [sp, #24]
   11f54:	str	r2, [sp, #28]
   11f58:	ldr	r2, [fp, #8]
   11f5c:	ldr	r3, [fp, #12]
   11f60:	ldr	r5, [fp, #16]
   11f64:	and	r3, r3, r2
   11f68:	mov	r2, #0
   11f6c:	cmn	r3, #1
   11f70:	str	r3, [sp, #32]
   11f74:	bne	11f98 <__assert_fail@plt+0xad8>
   11f78:	ldrb	r3, [r5, #12]
   11f7c:	cmp	r3, #0
   11f80:	bne	11f98 <__assert_fail@plt+0xad8>
   11f84:	ldr	r2, [r5]
   11f88:	sub	r2, r2, #2
   11f8c:	clz	r2, r2
   11f90:	lsr	r2, r2, #5
   11f94:	lsl	r2, r2, #3
   11f98:	orr	r1, r2, r1
   11f9c:	mov	r2, #0
   11fa0:	bl	190c8 <__assert_fail@plt+0x7c08>
   11fa4:	str	r0, [sp, #44]	; 0x2c
   11fa8:	bl	13754 <__assert_fail@plt+0x2294>
   11fac:	cmp	r0, #0
   11fb0:	beq	11fec <__assert_fail@plt+0xb2c>
   11fb4:	ldr	r1, [sp, #28]
   11fb8:	movw	r2, #46075	; 0xb3fb
   11fbc:	mov	r9, r0
   11fc0:	movw	r0, #46100	; 0xb414
   11fc4:	mov	r7, #1
   11fc8:	movt	r0, #1
   11fcc:	movt	r2, #1
   11fd0:	cmn	r1, #1
   11fd4:	moveq	r2, r0
   11fd8:	sub	r0, fp, #136	; 0x88
   11fdc:	add	r0, r0, #96	; 0x60
   11fe0:	str	r2, [sp, #12]
   11fe4:	str	r0, [sp, #8]
   11fe8:	b	1200c <__assert_fail@plt+0xb4c>
   11fec:	mov	r7, #1
   11ff0:	b	12be4 <__assert_fail@plt+0x1724>
   11ff4:	ldr	r0, [sp, #36]	; 0x24
   11ff8:	bl	11484 <close@plt>
   11ffc:	cmp	r0, #0
   12000:	mov	r0, #6
   12004:	movweq	r0, #2
   12008:	b	1262c <__assert_fail@plt+0x116c>
   1200c:	ldr	r8, [r9, #24]
   12010:	ldr	r4, [r9, #28]
   12014:	ldrh	r0, [r9, #56]	; 0x38
   12018:	sub	r0, r0, #1
   1201c:	cmp	r0, #9
   12020:	bhi	12220 <__assert_fail@plt+0xd60>
   12024:	add	r1, pc, #0
   12028:	ldr	pc, [r1, r0, lsl #2]
   1202c:	andeq	r2, r1, r4, asr r0
   12030:			; <UNDEFINED> instruction: 0x000121b8
   12034:	andeq	r2, r1, r0, lsr #4
   12038:	andeq	r2, r1, r8, lsl r1
   1203c:	andeq	r2, r1, r0, lsr #4
   12040:	andeq	r2, r1, r4, lsl r2
   12044:	andeq	r2, r1, r8, lsr #6
   12048:	andeq	r2, r1, r0, lsr #4
   1204c:	andeq	r2, r1, r0, lsr #4
   12050:	andeq	r2, r1, r8, asr #2
   12054:	ldrb	r0, [r5, #4]
   12058:	cmp	r0, #0
   1205c:	beq	12220 <__assert_fail@plt+0xd60>
   12060:	ldr	r0, [r5, #8]
   12064:	mov	r6, r4
   12068:	mov	r4, #1
   1206c:	cmp	r0, #0
   12070:	beq	12bcc <__assert_fail@plt+0x170c>
   12074:	ldrd	r2, [r0]
   12078:	ldrd	r4, [r9, #160]	; 0xa0
   1207c:	eor	r1, r5, r3
   12080:	eor	r2, r4, r2
   12084:	orrs	r1, r2, r1
   12088:	bne	123ac <__assert_fail@plt+0xeec>
   1208c:	ldrd	r0, [r0, #8]
   12090:	ldrd	r2, [r9, #64]	; 0x40
   12094:	ldr	r5, [fp, #16]
   12098:	mov	r4, #1
   1209c:	eor	r1, r3, r1
   120a0:	eor	r0, r2, r0
   120a4:	orrs	r0, r0, r1
   120a8:	bne	12bcc <__assert_fail@plt+0x170c>
   120ac:	movw	r8, #47775	; 0xba9f
   120b0:	mov	r0, r6
   120b4:	mov	r4, r6
   120b8:	movt	r8, #1
   120bc:	mov	r1, r8
   120c0:	bl	111d8 <strcmp@plt>
   120c4:	cmp	r0, #0
   120c8:	beq	12aa8 <__assert_fail@plt+0x15e8>
   120cc:	movw	r1, #45718	; 0xb296
   120d0:	mov	r0, #0
   120d4:	mov	r2, #5
   120d8:	movt	r1, #1
   120dc:	bl	1125c <dcgettext@plt>
   120e0:	mov	r6, r0
   120e4:	mov	r0, #0
   120e8:	mov	r1, #4
   120ec:	mov	r2, r4
   120f0:	bl	17cc8 <__assert_fail@plt+0x6808>
   120f4:	mov	r5, r0
   120f8:	mov	r0, #1
   120fc:	mov	r1, #4
   12100:	mov	r2, r8
   12104:	bl	17cc8 <__assert_fail@plt+0x6808>
   12108:	mov	r3, r5
   1210c:	ldr	r5, [fp, #16]
   12110:	str	r0, [sp]
   12114:	b	12ad0 <__assert_fail@plt+0x1610>
   12118:	ldrb	r0, [r5, #13]
   1211c:	mov	sl, #0
   12120:	mov	r6, #1
   12124:	str	r4, [sp, #40]	; 0x28
   12128:	cmp	r0, #0
   1212c:	bne	12340 <__assert_fail@plt+0xe80>
   12130:	ldr	r8, [r9, #32]
   12134:	movw	r1, #45842	; 0xb312
   12138:	mov	sl, #0
   1213c:	mov	r0, #0
   12140:	movt	r1, #1
   12144:	b	1218c <__assert_fail@plt+0xccc>
   12148:	ldr	r0, [r9, #48]	; 0x30
   1214c:	cmp	r0, #0
   12150:	bne	12160 <__assert_fail@plt+0xca0>
   12154:	ldr	r0, [r9, #16]
   12158:	cmp	r0, #0
   1215c:	beq	12524 <__assert_fail@plt+0x1064>
   12160:	ldrb	r0, [r5, #13]
   12164:	mov	sl, #0
   12168:	mov	r6, #1
   1216c:	str	r4, [sp, #40]	; 0x28
   12170:	cmp	r0, #0
   12174:	bne	12340 <__assert_fail@plt+0xe80>
   12178:	ldr	r8, [r9, #32]
   1217c:	movw	r1, #45825	; 0xb301
   12180:	mov	sl, #0
   12184:	mov	r0, #0
   12188:	movt	r1, #1
   1218c:	mov	r2, #5
   12190:	bl	1125c <dcgettext@plt>
   12194:	mov	r5, r0
   12198:	mov	r0, #4
   1219c:	mov	r1, r4
   121a0:	bl	17d70 <__assert_fail@plt+0x68b0>
   121a4:	mov	r3, r0
   121a8:	mov	r0, #0
   121ac:	mov	r1, r8
   121b0:	mov	r2, r5
   121b4:	b	123a0 <__assert_fail@plt+0xee0>
   121b8:	ldr	r0, [sp, #44]	; 0x2c
   121bc:	mov	r1, r9
   121c0:	bl	19114 <__assert_fail@plt+0x7c54>
   121c4:	cmp	r0, #0
   121c8:	beq	12220 <__assert_fail@plt+0xd60>
   121cc:	movw	r1, #45867	; 0xb32b
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	mov	r6, r4
   121dc:	movt	r1, #1
   121e0:	bl	1125c <dcgettext@plt>
   121e4:	mov	r4, r0
   121e8:	mov	r0, #0
   121ec:	mov	r1, #3
   121f0:	mov	r2, r6
   121f4:	bl	17fec <__assert_fail@plt+0x6b2c>
   121f8:	mov	r3, r0
   121fc:	mov	r2, r4
   12200:	mov	r0, #0
   12204:	mov	r1, #0
   12208:	mov	r4, #0
   1220c:	bl	112e0 <error@plt>
   12210:	b	12bcc <__assert_fail@plt+0x170c>
   12214:	ldrb	r0, [r5, #4]
   12218:	cmp	r0, #0
   1221c:	beq	1236c <__assert_fail@plt+0xeac>
   12220:	ldr	r0, [sp, #32]
   12224:	cmn	r0, #1
   12228:	bne	12240 <__assert_fail@plt+0xd80>
   1222c:	ldr	r0, [r5]
   12230:	cmp	r0, #2
   12234:	ldreq	r0, [r5, #8]
   12238:	cmpeq	r0, #0
   1223c:	beq	123b8 <__assert_fail@plt+0xef8>
   12240:	ldrb	r0, [r5, #12]
   12244:	add	sl, r9, #64	; 0x40
   12248:	cmp	r0, #0
   1224c:	beq	122f4 <__assert_fail@plt+0xe34>
   12250:	ldr	r0, [r9, #80]	; 0x50
   12254:	and	r0, r0, #61440	; 0xf000
   12258:	cmp	r0, #40960	; 0xa000
   1225c:	bne	122f4 <__assert_fail@plt+0xe34>
   12260:	ldr	r0, [sp, #44]	; 0x2c
   12264:	add	sl, sp, #48	; 0x30
   12268:	mov	r2, r8
   1226c:	mov	r3, sl
   12270:	ldr	r1, [r0, #32]
   12274:	mov	r0, #0
   12278:	str	r0, [sp]
   1227c:	mov	r0, #3
   12280:	bl	11280 <__fxstatat64@plt>
   12284:	cmp	r0, #0
   12288:	beq	122f4 <__assert_fail@plt+0xe34>
   1228c:	ldrb	r0, [r5, #13]
   12290:	str	r4, [sp, #40]	; 0x28
   12294:	mov	r4, #0
   12298:	mov	r6, #1
   1229c:	cmp	r0, #0
   122a0:	bne	122e8 <__assert_fail@plt+0xe28>
   122a4:	bl	1137c <__errno_location@plt>
   122a8:	ldr	r4, [r0]
   122ac:	movw	r1, #46053	; 0xb3e5
   122b0:	mov	r0, #0
   122b4:	mov	r2, #5
   122b8:	movt	r1, #1
   122bc:	bl	1125c <dcgettext@plt>
   122c0:	ldr	r1, [sp, #40]	; 0x28
   122c4:	mov	r5, r0
   122c8:	mov	r0, #4
   122cc:	bl	17d70 <__assert_fail@plt+0x68b0>
   122d0:	mov	r3, r0
   122d4:	mov	r1, r4
   122d8:	mov	r0, #0
   122dc:	mov	r2, r5
   122e0:	mov	r4, #0
   122e4:	bl	112e0 <error@plt>
   122e8:	add	sl, sp, #48	; 0x30
   122ec:	mov	r5, #1
   122f0:	b	12740 <__assert_fail@plt+0x1280>
   122f4:	ldr	r2, [fp, #8]
   122f8:	cmn	r2, #1
   122fc:	beq	12348 <__assert_fail@plt+0xe88>
   12300:	ldr	r1, [sl, #24]
   12304:	ldr	r3, [fp, #12]
   12308:	sub	r0, r1, r2
   1230c:	cmn	r3, #1
   12310:	clz	r0, r0
   12314:	lsr	r0, r0, #5
   12318:	beq	123cc <__assert_fail@plt+0xf0c>
   1231c:	cmp	r1, r2
   12320:	beq	12354 <__assert_fail@plt+0xe94>
   12324:	b	123cc <__assert_fail@plt+0xf0c>
   12328:	ldrb	r0, [r5, #13]
   1232c:	mov	sl, #0
   12330:	mov	r6, #1
   12334:	str	r4, [sp, #40]	; 0x28
   12338:	cmp	r0, #0
   1233c:	beq	12374 <__assert_fail@plt+0xeb4>
   12340:	mov	r5, #1
   12344:	b	1273c <__assert_fail@plt+0x127c>
   12348:	ldr	r0, [fp, #12]
   1234c:	cmn	r0, #1
   12350:	beq	123c8 <__assert_fail@plt+0xf08>
   12354:	ldr	r0, [sl, #28]
   12358:	ldr	r1, [fp, #12]
   1235c:	sub	r0, r0, r1
   12360:	clz	r0, r0
   12364:	lsr	r0, r0, #5
   12368:	b	123cc <__assert_fail@plt+0xf0c>
   1236c:	mov	r4, #1
   12370:	b	12bcc <__assert_fail@plt+0x170c>
   12374:	ldr	r5, [r9, #32]
   12378:	mov	r0, #0
   1237c:	mov	r1, #3
   12380:	mov	r2, r4
   12384:	mov	sl, #0
   12388:	bl	17fec <__assert_fail@plt+0x6b2c>
   1238c:	movw	r2, #45371	; 0xb13b
   12390:	mov	r3, r0
   12394:	mov	r0, #0
   12398:	mov	r1, r5
   1239c:	movt	r2, #1
   123a0:	bl	112e0 <error@plt>
   123a4:	mov	r5, #1
   123a8:	b	1273c <__assert_fail@plt+0x127c>
   123ac:	ldr	r5, [fp, #16]
   123b0:	mov	r4, #1
   123b4:	b	12bcc <__assert_fail@plt+0x170c>
   123b8:	ldrb	r0, [r5, #12]
   123bc:	add	sl, r9, #64	; 0x40
   123c0:	cmp	r0, #0
   123c4:	bne	12250 <__assert_fail@plt+0xd90>
   123c8:	mov	r0, #1
   123cc:	ldrh	r1, [r9, #56]	; 0x38
   123d0:	cmp	r1, #6
   123d4:	bhi	123f0 <__assert_fail@plt+0xf30>
   123d8:	mov	r2, #1
   123dc:	mov	r3, #86	; 0x56
   123e0:	tst	r3, r2, lsl r1
   123e4:	ldrne	r1, [r5, #8]
   123e8:	cmpne	r1, #0
   123ec:	bne	12440 <__assert_fail@plt+0xf80>
   123f0:	str	r4, [sp, #40]	; 0x28
   123f4:	mov	r4, #1
   123f8:	cmp	r0, #0
   123fc:	beq	12660 <__assert_fail@plt+0x11a0>
   12400:	ldr	r0, [sp, #44]	; 0x2c
   12404:	ldr	r6, [r0, #32]
   12408:	ldrb	r0, [r5, #12]
   1240c:	cmp	r0, #0
   12410:	beq	124e4 <__assert_fail@plt+0x1024>
   12414:	ldr	r0, [sp, #32]
   12418:	cmn	r0, #1
   1241c:	beq	126bc <__assert_fail@plt+0x11fc>
   12420:	ldr	r0, [sl, #16]
   12424:	and	r0, r0, #61440	; 0xf000
   12428:	cmp	r0, #32768	; 0x8000
   1242c:	beq	12548 <__assert_fail@plt+0x1088>
   12430:	cmp	r0, #16384	; 0x4000
   12434:	bne	126bc <__assert_fail@plt+0x11fc>
   12438:	mov	r5, #18688	; 0x4900
   1243c:	b	1254c <__assert_fail@plt+0x108c>
   12440:	ldrd	r2, [r1]
   12444:	ldr	r6, [sl, #96]	; 0x60
   12448:	ldr	r5, [sl, #100]	; 0x64
   1244c:	eor	r3, r5, r3
   12450:	ldr	r5, [fp, #16]
   12454:	eor	r2, r6, r2
   12458:	orrs	r2, r2, r3
   1245c:	bne	123f0 <__assert_fail@plt+0xf30>
   12460:	ldrd	r2, [r1, #8]
   12464:	ldr	r6, [sl]
   12468:	ldr	r1, [sl, #4]
   1246c:	eor	r1, r1, r3
   12470:	eor	r2, r6, r2
   12474:	orrs	r1, r2, r1
   12478:	bne	123f0 <__assert_fail@plt+0xf30>
   1247c:	movw	r8, #47775	; 0xba9f
   12480:	mov	r0, r4
   12484:	movt	r8, #1
   12488:	mov	r1, r8
   1248c:	bl	111d8 <strcmp@plt>
   12490:	cmp	r0, #0
   12494:	beq	12a24 <__assert_fail@plt+0x1564>
   12498:	movw	r1, #45718	; 0xb296
   1249c:	mov	r0, #0
   124a0:	mov	r2, #5
   124a4:	movt	r1, #1
   124a8:	bl	1125c <dcgettext@plt>
   124ac:	mov	r6, r0
   124b0:	mov	r0, #0
   124b4:	mov	r1, #4
   124b8:	mov	r2, r4
   124bc:	bl	17cc8 <__assert_fail@plt+0x6808>
   124c0:	mov	r5, r0
   124c4:	mov	r0, #1
   124c8:	mov	r1, #4
   124cc:	mov	r2, r8
   124d0:	bl	17cc8 <__assert_fail@plt+0x6808>
   124d4:	mov	r3, r5
   124d8:	ldr	r5, [fp, #16]
   124dc:	str	r0, [sp]
   124e0:	b	12a4c <__assert_fail@plt+0x158c>
   124e4:	ldr	r2, [sp, #28]
   124e8:	ldr	r3, [sp, #24]
   124ec:	mov	r0, #256	; 0x100
   124f0:	mov	r1, r8
   124f4:	str	r0, [sp]
   124f8:	mov	r0, r6
   124fc:	bl	11448 <fchownat@plt>
   12500:	cmp	r0, #0
   12504:	beq	1253c <__assert_fail@plt+0x107c>
   12508:	bl	1137c <__errno_location@plt>
   1250c:	ldr	r0, [r0]
   12510:	mov	r6, #0
   12514:	cmp	r0, #95	; 0x5f
   12518:	bne	126e4 <__assert_fail@plt+0x1224>
   1251c:	mov	r5, #0
   12520:	b	12740 <__assert_fail@plt+0x1280>
   12524:	ldr	r0, [sp, #44]	; 0x2c
   12528:	mov	r4, #1
   1252c:	mov	r1, r9
   12530:	mov	r2, #1
   12534:	str	r4, [r9, #16]
   12538:	b	12bc8 <__assert_fail@plt+0x1708>
   1253c:	mov	r5, #0
   12540:	mov	r6, #1
   12544:	b	12740 <__assert_fail@plt+0x1280>
   12548:	mov	r5, #2304	; 0x900
   1254c:	mov	r0, r6
   12550:	mov	r1, r8
   12554:	mov	r2, r5
   12558:	bl	11364 <openat64@plt>
   1255c:	mov	r1, r0
   12560:	cmn	r0, #1
   12564:	ble	1266c <__assert_fail@plt+0x11ac>
   12568:	mov	r0, #3
   1256c:	sub	r2, fp, #136	; 0x88
   12570:	str	r1, [sp, #36]	; 0x24
   12574:	bl	11298 <__fxstat64@plt>
   12578:	mov	r6, #6
   1257c:	cmp	r0, #0
   12580:	bne	1260c <__assert_fail@plt+0x114c>
   12584:	ldr	r0, [sp, #8]
   12588:	ldrd	r2, [sl, #96]	; 0x60
   1258c:	mov	r6, #4
   12590:	ldrd	r0, [r0]
   12594:	eor	r1, r3, r1
   12598:	eor	r0, r2, r0
   1259c:	orrs	r0, r0, r1
   125a0:	bne	1260c <__assert_fail@plt+0x114c>
   125a4:	ldrd	r0, [sl]
   125a8:	ldr	r2, [fp, #-136]	; 0xffffff78
   125ac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   125b0:	eor	r1, r1, r3
   125b4:	eor	r0, r0, r2
   125b8:	orrs	r0, r0, r1
   125bc:	bne	1260c <__assert_fail@plt+0x114c>
   125c0:	ldr	r1, [fp, #8]
   125c4:	mov	r6, #2
   125c8:	cmn	r1, #1
   125cc:	ldrne	r0, [fp, #-112]	; 0xffffff90
   125d0:	cmpne	r0, r1
   125d4:	bne	1260c <__assert_fail@plt+0x114c>
   125d8:	ldr	r0, [fp, #12]
   125dc:	cmn	r0, #1
   125e0:	ldrne	r0, [fp, #-108]	; 0xffffff94
   125e4:	ldrne	r1, [fp, #12]
   125e8:	cmpne	r0, r1
   125ec:	bne	1260c <__assert_fail@plt+0x114c>
   125f0:	ldr	r0, [sp, #36]	; 0x24
   125f4:	ldr	r1, [sp, #28]
   125f8:	ldr	r2, [sp, #24]
   125fc:	bl	11370 <fchown@plt>
   12600:	cmp	r0, #0
   12604:	mov	r6, #6
   12608:	beq	11ff4 <__assert_fail@plt+0xb34>
   1260c:	str	r6, [sp, #20]
   12610:	bl	1137c <__errno_location@plt>
   12614:	mov	r5, r0
   12618:	ldr	r6, [r0]
   1261c:	ldr	r0, [sp, #36]	; 0x24
   12620:	bl	11484 <close@plt>
   12624:	ldr	r0, [sp, #20]
   12628:	str	r6, [r5]
   1262c:	sub	r0, r0, #2
   12630:	cmp	r0, #4
   12634:	bhi	12c7c <__assert_fail@plt+0x17bc>
   12638:	add	r1, pc, #8
   1263c:	mov	r5, #0
   12640:	mov	r6, #1
   12644:	ldr	pc, [r1, r0, lsl #2]
   12648:	andeq	r2, r1, r0, asr #14
   1264c:	andeq	r2, r1, ip, asr r6
   12650:	andeq	r2, r1, ip, asr r6
   12654:			; <UNDEFINED> instruction: 0x000126bc
   12658:	andeq	r2, r1, r4, ror #13
   1265c:	mov	r4, #0
   12660:	mov	r6, #1
   12664:	mov	r5, #1
   12668:	b	12740 <__assert_fail@plt+0x1280>
   1266c:	bl	1137c <__errno_location@plt>
   12670:	ldr	r1, [r0]
   12674:	cmp	r1, #13
   12678:	bne	126e4 <__assert_fail@plt+0x1224>
   1267c:	ldr	r1, [sl, #16]
   12680:	and	r1, r1, #61440	; 0xf000
   12684:	cmp	r1, #32768	; 0x8000
   12688:	bne	126bc <__assert_fail@plt+0x11fc>
   1268c:	str	r0, [sp, #36]	; 0x24
   12690:	orr	r2, r5, #1
   12694:	mov	r0, r6
   12698:	mov	r1, r8
   1269c:	bl	11364 <openat64@plt>
   126a0:	mov	r1, r0
   126a4:	cmn	r0, #1
   126a8:	bgt	12568 <__assert_fail@plt+0x10a8>
   126ac:	ldr	r0, [sp, #36]	; 0x24
   126b0:	ldr	r0, [r0]
   126b4:	cmp	r0, #13
   126b8:	bne	126e4 <__assert_fail@plt+0x1224>
   126bc:	ldr	r0, [sp, #44]	; 0x2c
   126c0:	ldr	r2, [sp, #28]
   126c4:	ldr	r3, [sp, #24]
   126c8:	mov	r5, #0
   126cc:	mov	r1, r8
   126d0:	str	r5, [sp]
   126d4:	ldr	r0, [r0, #32]
   126d8:	bl	11448 <fchownat@plt>
   126dc:	cmp	r0, #0
   126e0:	beq	1298c <__assert_fail@plt+0x14cc>
   126e4:	ldr	r0, [fp, #16]
   126e8:	mov	r5, #0
   126ec:	ldrb	r0, [r0, #13]
   126f0:	cmp	r0, #0
   126f4:	bne	12738 <__assert_fail@plt+0x1278>
   126f8:	bl	1137c <__errno_location@plt>
   126fc:	ldr	r1, [sp, #12]
   12700:	ldr	r4, [r0]
   12704:	mov	r0, #0
   12708:	mov	r2, #5
   1270c:	mov	r5, #0
   12710:	bl	1125c <dcgettext@plt>
   12714:	ldr	r1, [sp, #40]	; 0x28
   12718:	mov	r6, r0
   1271c:	mov	r0, #4
   12720:	bl	17d70 <__assert_fail@plt+0x68b0>
   12724:	mov	r3, r0
   12728:	mov	r0, #0
   1272c:	mov	r1, r4
   12730:	mov	r2, r6
   12734:	bl	112e0 <error@plt>
   12738:	mov	r6, #1
   1273c:	mov	r4, #0
   12740:	ldr	r0, [fp, #16]
   12744:	ldr	r0, [r0]
   12748:	cmp	r0, #2
   1274c:	beq	12bac <__assert_fail@plt+0x16ec>
   12750:	eor	r1, r4, #1
   12754:	orrs	r1, r5, r1
   12758:	eorseq	r1, r6, #1
   1275c:	beq	12790 <__assert_fail@plt+0x12d0>
   12760:	cmp	r0, #0
   12764:	bne	12bac <__assert_fail@plt+0x16ec>
   12768:	cmp	r6, #0
   1276c:	mov	r5, #1
   12770:	mov	r0, #3
   12774:	movwne	r5, #4
   12778:	cmp	r4, #0
   1277c:	moveq	r5, r0
   12780:	cmp	sl, #0
   12784:	beq	12854 <__assert_fail@plt+0x1394>
   12788:	mov	r6, r4
   1278c:	b	127e4 <__assert_fail@plt+0x1324>
   12790:	ldr	r1, [sp, #28]
   12794:	cmn	r1, #1
   12798:	beq	127ac <__assert_fail@plt+0x12ec>
   1279c:	ldr	r1, [sl, #24]
   127a0:	ldr	r2, [sp, #28]
   127a4:	cmp	r1, r2
   127a8:	bne	127c8 <__assert_fail@plt+0x1308>
   127ac:	ldr	r1, [sp, #24]
   127b0:	cmn	r1, #1
   127b4:	beq	12760 <__assert_fail@plt+0x12a0>
   127b8:	ldr	r1, [sl, #28]
   127bc:	ldr	r2, [sp, #24]
   127c0:	cmp	r1, r2
   127c4:	beq	12760 <__assert_fail@plt+0x12a0>
   127c8:	cmp	r6, #0
   127cc:	mov	r5, #1
   127d0:	mov	r0, #3
   127d4:	mov	r6, r4
   127d8:	movwne	r5, #2
   127dc:	cmp	r4, #0
   127e0:	moveq	r5, r0
   127e4:	ldr	r4, [sl, #24]
   127e8:	mov	r0, r4
   127ec:	bl	111e4 <getpwuid@plt>
   127f0:	cmp	r0, #0
   127f4:	beq	12800 <__assert_fail@plt+0x1340>
   127f8:	ldr	r0, [r0]
   127fc:	b	12810 <__assert_fail@plt+0x1350>
   12800:	mov	r0, r4
   12804:	mov	r1, #0
   12808:	sub	r2, fp, #136	; 0x88
   1280c:	bl	16568 <__assert_fail@plt+0x50a8>
   12810:	bl	19044 <__assert_fail@plt+0x7b84>
   12814:	ldr	r4, [sl, #28]
   12818:	str	r0, [sp, #36]	; 0x24
   1281c:	mov	r0, r4
   12820:	bl	114a8 <getgrgid@plt>
   12824:	cmp	r0, #0
   12828:	beq	12834 <__assert_fail@plt+0x1374>
   1282c:	ldr	r0, [r0]
   12830:	b	12844 <__assert_fail@plt+0x1384>
   12834:	mov	r0, r4
   12838:	mov	r1, #0
   1283c:	sub	r2, fp, #136	; 0x88
   12840:	bl	16568 <__assert_fail@plt+0x50a8>
   12844:	mov	r4, r6
   12848:	bl	19044 <__assert_fail@plt+0x7b84>
   1284c:	mov	sl, r0
   12850:	b	12860 <__assert_fail@plt+0x13a0>
   12854:	mov	r0, #0
   12858:	mov	sl, #0
   1285c:	str	r0, [sp, #36]	; 0x24
   12860:	mov	r8, r4
   12864:	cmp	r5, #1
   12868:	bne	128a8 <__assert_fail@plt+0x13e8>
   1286c:	movw	r1, #46121	; 0xb429
   12870:	mov	r0, #0
   12874:	mov	r2, #5
   12878:	movt	r1, #1
   1287c:	bl	1125c <dcgettext@plt>
   12880:	ldr	r1, [sp, #40]	; 0x28
   12884:	mov	r4, r0
   12888:	mov	r0, #4
   1288c:	bl	17d70 <__assert_fail@plt+0x68b0>
   12890:	mov	r2, r0
   12894:	mov	r0, #1
   12898:	mov	r1, r4
   1289c:	bl	113a0 <__printf_chk@plt>
   128a0:	mov	r4, r8
   128a4:	b	12b9c <__assert_fail@plt+0x16dc>
   128a8:	ldr	r0, [fp, #16]
   128ac:	ldr	r6, [r0, #20]
   128b0:	ldr	r4, [r0, #16]
   128b4:	mov	r0, r4
   128b8:	mov	r1, r6
   128bc:	bl	12c80 <__assert_fail@plt+0x17c0>
   128c0:	ldr	r1, [sp, #36]	; 0x24
   128c4:	mov	r2, sl
   128c8:	mov	sl, r0
   128cc:	cmp	r4, #0
   128d0:	mov	r0, r4
   128d4:	str	r2, [sp, #20]
   128d8:	movne	r0, r1
   128dc:	cmp	r6, #0
   128e0:	mov	r1, r6
   128e4:	movne	r1, r2
   128e8:	bl	12c80 <__assert_fail@plt+0x17c0>
   128ec:	cmp	r5, #4
   128f0:	beq	1295c <__assert_fail@plt+0x149c>
   128f4:	cmp	r5, #3
   128f8:	beq	12924 <__assert_fail@plt+0x1464>
   128fc:	cmp	r5, #2
   12900:	bne	12c7c <__assert_fail@plt+0x17bc>
   12904:	cmp	r4, #0
   12908:	mov	r5, sl
   1290c:	str	r0, [sp, #16]
   12910:	beq	12994 <__assert_fail@plt+0x14d4>
   12914:	movw	r1, #46177	; 0xb461
   12918:	mov	r0, #0
   1291c:	movt	r1, #1
   12920:	b	12948 <__assert_fail@plt+0x1488>
   12924:	cmp	r0, #0
   12928:	beq	129b4 <__assert_fail@plt+0x14f4>
   1292c:	cmp	r4, #0
   12930:	mov	r5, sl
   12934:	str	r0, [sp, #16]
   12938:	beq	12a88 <__assert_fail@plt+0x15c8>
   1293c:	movw	r1, #46281	; 0xb4c9
   12940:	mov	r0, #0
   12944:	movt	r1, #1
   12948:	mov	r2, #5
   1294c:	bl	1125c <dcgettext@plt>
   12950:	mov	r6, r0
   12954:	mov	r4, r8
   12958:	b	12b48 <__assert_fail@plt+0x1688>
   1295c:	cmp	r4, #0
   12960:	str	r0, [sp, #16]
   12964:	beq	12a04 <__assert_fail@plt+0x1544>
   12968:	movw	r1, #46483	; 0xb593
   1296c:	mov	r0, #0
   12970:	mov	r2, #5
   12974:	movt	r1, #1
   12978:	bl	1125c <dcgettext@plt>
   1297c:	mov	r6, r0
   12980:	mov	r4, r8
   12984:	mov	r5, sl
   12988:	b	12b48 <__assert_fail@plt+0x1688>
   1298c:	mov	r6, #1
   12990:	b	12740 <__assert_fail@plt+0x1280>
   12994:	ldr	sl, [sp, #20]
   12998:	cmp	r6, #0
   1299c:	mov	r4, r8
   129a0:	mov	r0, #0
   129a4:	beq	12b28 <__assert_fail@plt+0x1668>
   129a8:	movw	r1, #46216	; 0xb488
   129ac:	movt	r1, #1
   129b0:	b	12b58 <__assert_fail@plt+0x1698>
   129b4:	movw	r1, #46373	; 0xb525
   129b8:	movw	r0, #46447	; 0xb56f
   129bc:	cmp	r6, #0
   129c0:	mov	r2, #5
   129c4:	movt	r1, #1
   129c8:	movt	r0, #1
   129cc:	movne	r1, r0
   129d0:	movw	r0, #46407	; 0xb547
   129d4:	cmp	r4, #0
   129d8:	movt	r0, #1
   129dc:	movne	r1, r0
   129e0:	mov	r0, #0
   129e4:	bl	1125c <dcgettext@plt>
   129e8:	mov	r6, r0
   129ec:	mov	r0, #0
   129f0:	bl	12e14 <__assert_fail@plt+0x1954>
   129f4:	str	sl, [sp, #16]
   129f8:	mov	r5, #0
   129fc:	mov	r4, r8
   12a00:	b	12b48 <__assert_fail@plt+0x1688>
   12a04:	cmp	r6, #0
   12a08:	mov	r4, r8
   12a0c:	mov	r5, sl
   12a10:	mov	r0, #0
   12a14:	beq	12b34 <__assert_fail@plt+0x1674>
   12a18:	movw	r1, #46515	; 0xb5b3
   12a1c:	movt	r1, #1
   12a20:	b	12b3c <__assert_fail@plt+0x167c>
   12a24:	movw	r1, #45673	; 0xb269
   12a28:	mov	r0, #0
   12a2c:	mov	r2, #5
   12a30:	movt	r1, #1
   12a34:	bl	1125c <dcgettext@plt>
   12a38:	mov	r6, r0
   12a3c:	mov	r0, #4
   12a40:	mov	r1, r4
   12a44:	bl	17d70 <__assert_fail@plt+0x68b0>
   12a48:	mov	r3, r0
   12a4c:	mov	r0, #0
   12a50:	mov	r1, #0
   12a54:	mov	r2, r6
   12a58:	bl	112e0 <error@plt>
   12a5c:	movw	r1, #45776	; 0xb2d0
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	mov	r4, #0
   12a6c:	movt	r1, #1
   12a70:	bl	1125c <dcgettext@plt>
   12a74:	mov	r2, r0
   12a78:	mov	r0, #0
   12a7c:	mov	r1, #0
   12a80:	bl	112e0 <error@plt>
   12a84:	b	12bcc <__assert_fail@plt+0x170c>
   12a88:	ldr	sl, [sp, #20]
   12a8c:	cmp	r6, #0
   12a90:	mov	r4, r8
   12a94:	mov	r0, #0
   12a98:	beq	12b50 <__assert_fail@plt+0x1690>
   12a9c:	movw	r1, #46329	; 0xb4f9
   12aa0:	movt	r1, #1
   12aa4:	b	12b58 <__assert_fail@plt+0x1698>
   12aa8:	movw	r1, #45673	; 0xb269
   12aac:	mov	r0, #0
   12ab0:	mov	r2, #5
   12ab4:	movt	r1, #1
   12ab8:	bl	1125c <dcgettext@plt>
   12abc:	mov	r6, r0
   12ac0:	mov	r0, #4
   12ac4:	mov	r1, r4
   12ac8:	bl	17d70 <__assert_fail@plt+0x68b0>
   12acc:	mov	r3, r0
   12ad0:	mov	r0, #0
   12ad4:	mov	r1, #0
   12ad8:	mov	r2, r6
   12adc:	bl	112e0 <error@plt>
   12ae0:	movw	r1, #45776	; 0xb2d0
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	movt	r1, #1
   12af0:	bl	1125c <dcgettext@plt>
   12af4:	mov	r2, r0
   12af8:	mov	r0, #0
   12afc:	mov	r1, #0
   12b00:	bl	112e0 <error@plt>
   12b04:	ldr	r4, [sp, #44]	; 0x2c
   12b08:	mov	r1, r9
   12b0c:	mov	r2, #4
   12b10:	mov	r0, r4
   12b14:	bl	14dd4 <__assert_fail@plt+0x3914>
   12b18:	mov	r0, r4
   12b1c:	mov	r4, #0
   12b20:	bl	13754 <__assert_fail@plt+0x2294>
   12b24:	b	12bcc <__assert_fail@plt+0x170c>
   12b28:	movw	r1, #46251	; 0xb4ab
   12b2c:	movt	r1, #1
   12b30:	b	12b58 <__assert_fail@plt+0x1698>
   12b34:	movw	r1, #46543	; 0xb5cf
   12b38:	movt	r1, #1
   12b3c:	mov	r2, #5
   12b40:	bl	1125c <dcgettext@plt>
   12b44:	mov	r6, r0
   12b48:	ldr	sl, [sp, #20]
   12b4c:	b	12b64 <__assert_fail@plt+0x16a4>
   12b50:	movw	r1, #46373	; 0xb525
   12b54:	movt	r1, #1
   12b58:	mov	r2, #5
   12b5c:	bl	1125c <dcgettext@plt>
   12b60:	mov	r6, r0
   12b64:	ldr	r1, [sp, #40]	; 0x28
   12b68:	mov	r0, #4
   12b6c:	bl	17d70 <__assert_fail@plt+0x68b0>
   12b70:	mov	r1, r6
   12b74:	ldr	r6, [sp, #16]
   12b78:	mov	r2, r0
   12b7c:	mov	r0, #1
   12b80:	str	r5, [sp]
   12b84:	mov	r3, r6
   12b88:	bl	113a0 <__printf_chk@plt>
   12b8c:	mov	r0, r6
   12b90:	bl	12e14 <__assert_fail@plt+0x1954>
   12b94:	mov	r0, r5
   12b98:	bl	12e14 <__assert_fail@plt+0x1954>
   12b9c:	ldr	r0, [sp, #36]	; 0x24
   12ba0:	bl	12e14 <__assert_fail@plt+0x1954>
   12ba4:	mov	r0, sl
   12ba8:	bl	12e14 <__assert_fail@plt+0x1954>
   12bac:	ldr	r5, [fp, #16]
   12bb0:	ldrb	r0, [r5, #4]
   12bb4:	cmp	r0, #0
   12bb8:	bne	12bcc <__assert_fail@plt+0x170c>
   12bbc:	ldr	r0, [sp, #44]	; 0x2c
   12bc0:	mov	r1, r9
   12bc4:	mov	r2, #4
   12bc8:	bl	14dd4 <__assert_fail@plt+0x3914>
   12bcc:	ldr	r0, [sp, #44]	; 0x2c
   12bd0:	and	r7, r7, r4
   12bd4:	bl	13754 <__assert_fail@plt+0x2294>
   12bd8:	mov	r9, r0
   12bdc:	cmp	r0, #0
   12be0:	bne	1200c <__assert_fail@plt+0xb4c>
   12be4:	bl	1137c <__errno_location@plt>
   12be8:	ldr	r4, [r0]
   12bec:	mov	r5, r0
   12bf0:	cmp	r4, #0
   12bf4:	beq	12c34 <__assert_fail@plt+0x1774>
   12bf8:	ldr	r0, [fp, #16]
   12bfc:	mov	r7, #0
   12c00:	ldrb	r0, [r0, #13]
   12c04:	cmp	r0, #0
   12c08:	bne	12c34 <__assert_fail@plt+0x1774>
   12c0c:	movw	r1, #45640	; 0xb248
   12c10:	mov	r0, #0
   12c14:	mov	r2, #5
   12c18:	mov	r7, #0
   12c1c:	movt	r1, #1
   12c20:	bl	1125c <dcgettext@plt>
   12c24:	mov	r2, r0
   12c28:	mov	r0, #0
   12c2c:	mov	r1, r4
   12c30:	bl	112e0 <error@plt>
   12c34:	ldr	r0, [sp, #44]	; 0x2c
   12c38:	bl	135b4 <__assert_fail@plt+0x20f4>
   12c3c:	cmp	r0, #0
   12c40:	beq	12c70 <__assert_fail@plt+0x17b0>
   12c44:	ldr	r4, [r5]
   12c48:	movw	r1, #45656	; 0xb258
   12c4c:	mov	r0, #0
   12c50:	mov	r2, #5
   12c54:	mov	r7, #0
   12c58:	movt	r1, #1
   12c5c:	bl	1125c <dcgettext@plt>
   12c60:	mov	r2, r0
   12c64:	mov	r0, #0
   12c68:	mov	r1, r4
   12c6c:	bl	112e0 <error@plt>
   12c70:	mov	r0, r7
   12c74:	sub	sp, fp, #28
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	bl	11478 <abort@plt>
   12c80:	push	{r4, r5, r6, sl, fp, lr}
   12c84:	add	fp, sp, #16
   12c88:	mov	r4, r1
   12c8c:	cmp	r0, #0
   12c90:	beq	12ce4 <__assert_fail@plt+0x1824>
   12c94:	mov	r5, r0
   12c98:	cmp	r4, #0
   12c9c:	beq	12d00 <__assert_fail@plt+0x1840>
   12ca0:	mov	r0, r5
   12ca4:	bl	1134c <strlen@plt>
   12ca8:	mov	r6, r0
   12cac:	mov	r0, r4
   12cb0:	bl	1134c <strlen@plt>
   12cb4:	add	r0, r6, r0
   12cb8:	add	r0, r0, #2
   12cbc:	bl	18b24 <__assert_fail@plt+0x7664>
   12cc0:	mov	r1, r5
   12cc4:	mov	r6, r0
   12cc8:	bl	11250 <stpcpy@plt>
   12ccc:	mov	r1, #58	; 0x3a
   12cd0:	strh	r1, [r0], #1
   12cd4:	mov	r1, r4
   12cd8:	bl	11250 <stpcpy@plt>
   12cdc:	mov	r0, r6
   12ce0:	pop	{r4, r5, r6, sl, fp, pc}
   12ce4:	cmp	r4, #0
   12ce8:	moveq	r6, #0
   12cec:	moveq	r0, r6
   12cf0:	popeq	{r4, r5, r6, sl, fp, pc}
   12cf4:	mov	r0, r4
   12cf8:	bl	19044 <__assert_fail@plt+0x7b84>
   12cfc:	pop	{r4, r5, r6, sl, fp, pc}
   12d00:	mov	r0, r5
   12d04:	bl	19044 <__assert_fail@plt+0x7b84>
   12d08:	pop	{r4, r5, r6, sl, fp, pc}
   12d0c:	movw	r1, #49576	; 0xc1a8
   12d10:	movt	r1, #2
   12d14:	str	r0, [r1]
   12d18:	bx	lr
   12d1c:	movw	r1, #49580	; 0xc1ac
   12d20:	movt	r1, #2
   12d24:	strb	r0, [r1]
   12d28:	bx	lr
   12d2c:	push	{r4, r5, r6, sl, fp, lr}
   12d30:	add	fp, sp, #16
   12d34:	sub	sp, sp, #8
   12d38:	movw	r0, #49540	; 0xc184
   12d3c:	movt	r0, #2
   12d40:	ldr	r0, [r0]
   12d44:	bl	19ebc <__assert_fail@plt+0x89fc>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d74 <__assert_fail@plt+0x18b4>
   12d50:	movw	r0, #49580	; 0xc1ac
   12d54:	movt	r0, #2
   12d58:	ldrb	r0, [r0]
   12d5c:	cmp	r0, #0
   12d60:	beq	12d94 <__assert_fail@plt+0x18d4>
   12d64:	bl	1137c <__errno_location@plt>
   12d68:	ldr	r0, [r0]
   12d6c:	cmp	r0, #32
   12d70:	bne	12d94 <__assert_fail@plt+0x18d4>
   12d74:	movw	r0, #49536	; 0xc180
   12d78:	movt	r0, #2
   12d7c:	ldr	r0, [r0]
   12d80:	bl	19ebc <__assert_fail@plt+0x89fc>
   12d84:	cmp	r0, #0
   12d88:	subeq	sp, fp, #16
   12d8c:	popeq	{r4, r5, r6, sl, fp, pc}
   12d90:	b	12e04 <__assert_fail@plt+0x1944>
   12d94:	movw	r1, #46584	; 0xb5f8
   12d98:	mov	r0, #0
   12d9c:	mov	r2, #5
   12da0:	movt	r1, #1
   12da4:	bl	1125c <dcgettext@plt>
   12da8:	mov	r4, r0
   12dac:	movw	r0, #49576	; 0xc1a8
   12db0:	movt	r0, #2
   12db4:	ldr	r6, [r0]
   12db8:	bl	1137c <__errno_location@plt>
   12dbc:	ldr	r5, [r0]
   12dc0:	cmp	r6, #0
   12dc4:	bne	12de0 <__assert_fail@plt+0x1920>
   12dc8:	movw	r2, #45371	; 0xb13b
   12dcc:	mov	r0, #0
   12dd0:	mov	r1, r5
   12dd4:	mov	r3, r4
   12dd8:	movt	r2, #1
   12ddc:	b	12e00 <__assert_fail@plt+0x1940>
   12de0:	mov	r0, r6
   12de4:	bl	17f10 <__assert_fail@plt+0x6a50>
   12de8:	movw	r2, #46596	; 0xb604
   12dec:	mov	r3, r0
   12df0:	str	r4, [sp]
   12df4:	mov	r0, #0
   12df8:	mov	r1, r5
   12dfc:	movt	r2, #1
   12e00:	bl	112e0 <error@plt>
   12e04:	movw	r0, #49452	; 0xc12c
   12e08:	movt	r0, #2
   12e0c:	ldr	r0, [r0]
   12e10:	bl	11214 <_exit@plt>
   12e14:	push	{r4, r5, r6, sl, fp, lr}
   12e18:	add	fp, sp, #16
   12e1c:	mov	r4, r0
   12e20:	bl	1137c <__errno_location@plt>
   12e24:	ldr	r6, [r0]
   12e28:	mov	r5, r0
   12e2c:	mov	r0, r4
   12e30:	bl	11208 <free@plt>
   12e34:	str	r6, [r5]
   12e38:	pop	{r4, r5, r6, sl, fp, pc}
   12e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e40:	add	fp, sp, #28
   12e44:	sub	sp, sp, #28
   12e48:	cmp	r1, #4096	; 0x1000
   12e4c:	bcs	12e68 <__assert_fail@plt+0x19a8>
   12e50:	mov	r7, r0
   12e54:	and	r0, r1, #516	; 0x204
   12e58:	mov	r5, r1
   12e5c:	cmp	r0, #516	; 0x204
   12e60:	tstne	r5, #18
   12e64:	bne	12e84 <__assert_fail@plt+0x19c4>
   12e68:	bl	1137c <__errno_location@plt>
   12e6c:	mov	r1, #22
   12e70:	mov	r4, #0
   12e74:	str	r1, [r0]
   12e78:	mov	r0, r4
   12e7c:	sub	sp, fp, #28
   12e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e84:	mov	r0, #1
   12e88:	mov	r1, #96	; 0x60
   12e8c:	mov	sl, r2
   12e90:	bl	19de4 <__assert_fail@plt+0x8924>
   12e94:	cmp	r0, #0
   12e98:	beq	13288 <__assert_fail@plt+0x1dc8>
   12e9c:	mov	r4, r0
   12ea0:	mvn	r0, #99	; 0x63
   12ea4:	tst	r5, #2
   12ea8:	mov	r1, r5
   12eac:	str	r0, [r4, #32]
   12eb0:	bic	r0, r5, #516	; 0x204
   12eb4:	str	sl, [r4, #44]	; 0x2c
   12eb8:	str	r4, [sp, #24]
   12ebc:	orrne	r1, r0, #4
   12ec0:	str	r1, [r4, #48]	; 0x30
   12ec4:	ldr	r0, [r7]
   12ec8:	cmp	r0, #0
   12ecc:	beq	12f04 <__assert_fail@plt+0x1a44>
   12ed0:	add	r6, r7, #4
   12ed4:	mov	r4, #0
   12ed8:	bl	1134c <strlen@plt>
   12edc:	cmp	r0, r4
   12ee0:	movhi	r4, r0
   12ee4:	ldr	r0, [r6], #4
   12ee8:	cmp	r0, #0
   12eec:	bne	12ed8 <__assert_fail@plt+0x1a18>
   12ef0:	add	r0, r4, #1
   12ef4:	ldr	r4, [sp, #24]
   12ef8:	cmp	r0, #4096	; 0x1000
   12efc:	movls	r0, #4096	; 0x1000
   12f00:	b	12f08 <__assert_fail@plt+0x1a48>
   12f04:	mov	r0, #4096	; 0x1000
   12f08:	ldr	r1, [r4, #36]	; 0x24
   12f0c:	add	r0, r0, #256	; 0x100
   12f10:	adds	r1, r0, r1
   12f14:	bcc	12f38 <__assert_fail@plt+0x1a78>
   12f18:	ldr	r0, [r4, #24]
   12f1c:	bl	12e14 <__assert_fail@plt+0x1954>
   12f20:	mov	r0, #0
   12f24:	str	r0, [r4, #24]
   12f28:	bl	1137c <__errno_location@plt>
   12f2c:	mov	r1, #36	; 0x24
   12f30:	str	r1, [r0]
   12f34:	b	13280 <__assert_fail@plt+0x1dc0>
   12f38:	str	r1, [r4, #36]	; 0x24
   12f3c:	ldr	r0, [r4, #24]
   12f40:	bl	19e68 <__assert_fail@plt+0x89a8>
   12f44:	cmp	r0, #0
   12f48:	beq	12fac <__assert_fail@plt+0x1aec>
   12f4c:	str	r0, [r4, #24]
   12f50:	ldr	r0, [r7]
   12f54:	cmp	r0, #0
   12f58:	beq	12fc0 <__assert_fail@plt+0x1b00>
   12f5c:	mov	r0, #176	; 0xb0
   12f60:	bl	19e38 <__assert_fail@plt+0x8978>
   12f64:	cmp	r0, #0
   12f68:	beq	13278 <__assert_fail@plt+0x1db8>
   12f6c:	ldr	r1, [r4, #24]
   12f70:	mov	r8, r0
   12f74:	mov	r0, #0
   12f78:	mov	r2, #196608	; 0x30000
   12f7c:	strb	r0, [r8, #168]	; 0xa8
   12f80:	str	r2, [r8, #58]	; 0x3a
   12f84:	mvn	r2, #0
   12f88:	str	r0, [r8, #12]
   12f8c:	str	r0, [r8, #16]
   12f90:	str	r0, [r8, #20]
   12f94:	str	r4, [r8, #44]	; 0x2c
   12f98:	str	r2, [r8, #48]	; 0x30
   12f9c:	str	r0, [r8, #52]	; 0x34
   12fa0:	str	r1, [r8, #28]
   12fa4:	str	r0, [r8, #32]
   12fa8:	b	12fc4 <__assert_fail@plt+0x1b04>
   12fac:	ldr	r0, [r4, #24]
   12fb0:	bl	12e14 <__assert_fail@plt+0x1954>
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [r4, #24]
   12fbc:	b	13280 <__assert_fail@plt+0x1dc0>
   12fc0:	mov	r8, #0
   12fc4:	cmp	sl, #0
   12fc8:	ldrbne	r0, [r4, #49]	; 0x31
   12fcc:	ubfxne	r0, r0, #2, #1
   12fd0:	ldr	r4, [r7]
   12fd4:	moveq	r0, #1
   12fd8:	cmp	r4, #0
   12fdc:	beq	13148 <__assert_fail@plt+0x1c88>
   12fe0:	eor	r0, r0, #1
   12fe4:	and	r1, r5, #2048	; 0x800
   12fe8:	mov	r9, #0
   12fec:	mov	r6, #0
   12ff0:	str	r8, [sp, #16]
   12ff4:	str	sl, [sp, #8]
   12ff8:	str	r0, [sp, #12]
   12ffc:	mov	r0, #0
   13000:	str	r1, [sp, #20]
   13004:	str	r0, [sp, #4]
   13008:	mov	r0, r4
   1300c:	bl	1134c <strlen@plt>
   13010:	mov	r8, r0
   13014:	ldr	r0, [sp, #20]
   13018:	cmp	r0, #0
   1301c:	bne	13054 <__assert_fail@plt+0x1b94>
   13020:	cmp	r8, #3
   13024:	bcc	13054 <__assert_fail@plt+0x1b94>
   13028:	add	r0, r4, r8
   1302c:	ldrb	r0, [r0, #-1]
   13030:	cmp	r0, #47	; 0x2f
   13034:	bne	13054 <__assert_fail@plt+0x1b94>
   13038:	sub	r0, r4, #2
   1303c:	ldrb	r1, [r0, r8]
   13040:	cmp	r1, #47	; 0x2f
   13044:	bne	13054 <__assert_fail@plt+0x1b94>
   13048:	sub	r8, r8, #1
   1304c:	cmp	r8, #1
   13050:	bhi	1303c <__assert_fail@plt+0x1b7c>
   13054:	add	r0, r8, #176	; 0xb0
   13058:	bic	r0, r0, #7
   1305c:	bl	19e38 <__assert_fail@plt+0x8978>
   13060:	cmp	r0, #0
   13064:	beq	13154 <__assert_fail@plt+0x1c94>
   13068:	add	sl, r0, #168	; 0xa8
   1306c:	mov	r5, r0
   13070:	mov	r1, r4
   13074:	mov	r2, r8
   13078:	mov	r0, sl
   1307c:	bl	11220 <memcpy@plt>
   13080:	ldr	r0, [sp, #24]
   13084:	mov	r4, #0
   13088:	mov	r2, #196608	; 0x30000
   1308c:	strb	r4, [sl, r8]
   13090:	str	r2, [r5, #58]	; 0x3a
   13094:	add	r2, r5, #44	; 0x2c
   13098:	ldr	r1, [r0, #24]
   1309c:	stm	r2, {r0, r4, r8}
   130a0:	ldr	r8, [sp, #16]
   130a4:	ldr	r2, [sp, #12]
   130a8:	str	r8, [r5, #4]
   130ac:	str	r4, [r5, #12]
   130b0:	str	r4, [r5, #16]
   130b4:	str	r4, [r5, #20]
   130b8:	str	sl, [r5, #24]
   130bc:	str	r1, [r5, #28]
   130c0:	clz	r1, r9
   130c4:	str	r4, [r5, #32]
   130c8:	lsr	r1, r1, #5
   130cc:	orrs	r1, r2, r1
   130d0:	bne	130e8 <__assert_fail@plt+0x1c28>
   130d4:	mov	r0, #2
   130d8:	str	r0, [r5, #112]	; 0x70
   130dc:	str	r4, [r5, #116]	; 0x74
   130e0:	mov	r0, #11
   130e4:	b	130f4 <__assert_fail@plt+0x1c34>
   130e8:	mov	r1, r5
   130ec:	mov	r2, #0
   130f0:	bl	13318 <__assert_fail@plt+0x1e58>
   130f4:	ldr	sl, [sp, #8]
   130f8:	strh	r0, [r5, #56]	; 0x38
   130fc:	cmp	sl, #0
   13100:	beq	13110 <__assert_fail@plt+0x1c50>
   13104:	str	r9, [r5, #8]
   13108:	mov	r9, r5
   1310c:	b	13128 <__assert_fail@plt+0x1c68>
   13110:	cmp	r9, #0
   13114:	str	r4, [r5, #8]
   13118:	beq	1313c <__assert_fail@plt+0x1c7c>
   1311c:	ldr	r0, [sp, #4]
   13120:	str	r5, [sp, #4]
   13124:	str	r5, [r0, #8]
   13128:	ldr	r4, [r7, #4]!
   1312c:	add	r6, r6, #1
   13130:	cmp	r4, #0
   13134:	bne	13008 <__assert_fail@plt+0x1b48>
   13138:	b	13164 <__assert_fail@plt+0x1ca4>
   1313c:	mov	r0, r5
   13140:	str	r5, [sp, #4]
   13144:	b	13108 <__assert_fail@plt+0x1c48>
   13148:	ldr	r4, [sp, #24]
   1314c:	mov	r9, #0
   13150:	b	13194 <__assert_fail@plt+0x1cd4>
   13154:	ldr	r8, [sp, #16]
   13158:	cmp	r9, #0
   1315c:	bne	13244 <__assert_fail@plt+0x1d84>
   13160:	b	1326c <__assert_fail@plt+0x1dac>
   13164:	cmp	sl, #0
   13168:	beq	13190 <__assert_fail@plt+0x1cd0>
   1316c:	ldr	r4, [sp, #24]
   13170:	cmp	r6, #2
   13174:	bcc	13194 <__assert_fail@plt+0x1cd4>
   13178:	mov	r0, r4
   1317c:	mov	r1, r9
   13180:	mov	r2, r6
   13184:	bl	134b0 <__assert_fail@plt+0x1ff0>
   13188:	mov	r9, r0
   1318c:	b	13194 <__assert_fail@plt+0x1cd4>
   13190:	ldr	r4, [sp, #24]
   13194:	mov	r0, #176	; 0xb0
   13198:	bl	19e38 <__assert_fail@plt+0x8978>
   1319c:	cmp	r0, #0
   131a0:	beq	13234 <__assert_fail@plt+0x1d74>
   131a4:	ldr	r2, [r4, #24]
   131a8:	mov	r1, #0
   131ac:	mov	r3, #196608	; 0x30000
   131b0:	str	r0, [r4]
   131b4:	str	r1, [r0, #52]	; 0x34
   131b8:	strb	r1, [r0, #168]	; 0xa8
   131bc:	str	r4, [r0, #44]	; 0x2c
   131c0:	str	r3, [r0, #58]	; 0x3a
   131c4:	str	r2, [r0, #28]
   131c8:	mov	r2, #9
   131cc:	str	r1, [r0, #32]
   131d0:	strh	r2, [r0, #56]	; 0x38
   131d4:	str	r9, [r0, #8]
   131d8:	str	r1, [r0, #12]
   131dc:	str	r1, [r0, #16]
   131e0:	str	r1, [r0, #20]
   131e4:	mov	r1, #1
   131e8:	str	r1, [r0, #48]	; 0x30
   131ec:	ldrh	r0, [r4, #48]	; 0x30
   131f0:	movw	r1, #258	; 0x102
   131f4:	tst	r0, r1
   131f8:	beq	13290 <__assert_fail@plt+0x1dd0>
   131fc:	movw	r0, #11796	; 0x2e14
   13200:	movw	r2, #20444	; 0x4fdc
   13204:	movw	r3, #20476	; 0x4ffc
   13208:	mov	r1, #0
   1320c:	movt	r0, #1
   13210:	movt	r2, #1
   13214:	movt	r3, #1
   13218:	str	r0, [sp]
   1321c:	mov	r0, #31
   13220:	bl	15670 <__assert_fail@plt+0x41b0>
   13224:	cmp	r0, #0
   13228:	str	r0, [r4, #56]	; 0x38
   1322c:	bne	132a8 <__assert_fail@plt+0x1de8>
   13230:	b	1323c <__assert_fail@plt+0x1d7c>
   13234:	mov	r0, #0
   13238:	str	r0, [r4]
   1323c:	cmp	r9, #0
   13240:	beq	1326c <__assert_fail@plt+0x1dac>
   13244:	ldrd	r4, [r9, #8]
   13248:	cmp	r5, #0
   1324c:	beq	13258 <__assert_fail@plt+0x1d98>
   13250:	mov	r0, r5
   13254:	bl	1149c <closedir@plt>
   13258:	mov	r0, r9
   1325c:	bl	12e14 <__assert_fail@plt+0x1954>
   13260:	cmp	r4, #0
   13264:	mov	r9, r4
   13268:	bne	13244 <__assert_fail@plt+0x1d84>
   1326c:	mov	r0, r8
   13270:	bl	12e14 <__assert_fail@plt+0x1954>
   13274:	ldr	r4, [sp, #24]
   13278:	ldr	r0, [r4, #24]
   1327c:	bl	12e14 <__assert_fail@plt+0x1954>
   13280:	mov	r0, r4
   13284:	bl	12e14 <__assert_fail@plt+0x1954>
   13288:	mov	r4, #0
   1328c:	b	12e78 <__assert_fail@plt+0x19b8>
   13290:	mov	r0, #32
   13294:	bl	19e38 <__assert_fail@plt+0x8978>
   13298:	cmp	r0, #0
   1329c:	str	r0, [r4, #56]	; 0x38
   132a0:	beq	1323c <__assert_fail@plt+0x1d7c>
   132a4:	bl	19f40 <__assert_fail@plt+0x8a80>
   132a8:	ldr	r4, [sp, #24]
   132ac:	ldr	r0, [r4, #48]	; 0x30
   132b0:	tst	r0, #516	; 0x204
   132b4:	bne	13308 <__assert_fail@plt+0x1e48>
   132b8:	mov	r1, #32768	; 0x8000
   132bc:	tst	r0, #512	; 0x200
   132c0:	and	r1, r1, r0, lsl #11
   132c4:	orr	r1, r1, #18688	; 0x4900
   132c8:	orr	r2, r1, #524288	; 0x80000
   132cc:	bne	132e4 <__assert_fail@plt+0x1e24>
   132d0:	movw	r0, #46604	; 0xb60c
   132d4:	mov	r1, r2
   132d8:	movt	r0, #1
   132dc:	bl	1a2b0 <__assert_fail@plt+0x8df0>
   132e0:	b	132f4 <__assert_fail@plt+0x1e34>
   132e4:	ldr	r0, [r4, #32]
   132e8:	movw	r1, #46604	; 0xb60c
   132ec:	movt	r1, #1
   132f0:	bl	165c4 <__assert_fail@plt+0x5104>
   132f4:	str	r0, [r4, #28]
   132f8:	cmn	r0, #1
   132fc:	ldrle	r0, [r4, #48]	; 0x30
   13300:	orrle	r0, r0, #4
   13304:	strle	r0, [r4, #48]	; 0x30
   13308:	add	r0, r4, #60	; 0x3c
   1330c:	mvn	r1, #0
   13310:	bl	16498 <__assert_fail@plt+0x4fd8>
   13314:	b	12e78 <__assert_fail@plt+0x19b8>
   13318:	push	{r4, r5, r6, sl, fp, lr}
   1331c:	add	fp, sp, #16
   13320:	sub	sp, sp, #8
   13324:	mov	r4, r1
   13328:	ldr	r1, [r0, #48]	; 0x30
   1332c:	ldr	r3, [r4, #48]	; 0x30
   13330:	add	r5, r4, #64	; 0x40
   13334:	cmp	r3, #0
   13338:	andeq	r3, r1, #1
   1333c:	orreq	r2, r3, r2
   13340:	cmp	r2, #0
   13344:	andseq	r1, r1, #2
   13348:	beq	133a4 <__assert_fail@plt+0x1ee4>
   1334c:	ldr	r1, [r4, #24]
   13350:	mov	r0, #3
   13354:	mov	r2, r5
   13358:	bl	11460 <__xstat64@plt>
   1335c:	cmp	r0, #0
   13360:	beq	13424 <__assert_fail@plt+0x1f64>
   13364:	bl	1137c <__errno_location@plt>
   13368:	mov	r6, r0
   1336c:	ldr	r0, [r0]
   13370:	cmp	r0, #2
   13374:	bne	133d4 <__assert_fail@plt+0x1f14>
   13378:	ldr	r1, [r4, #24]
   1337c:	mov	r0, #3
   13380:	mov	r2, r5
   13384:	bl	11490 <__lxstat64@plt>
   13388:	cmp	r0, #0
   1338c:	bne	133d0 <__assert_fail@plt+0x1f10>
   13390:	mov	r0, #0
   13394:	str	r0, [r6]
   13398:	mov	r0, #13
   1339c:	sub	sp, fp, #16
   133a0:	pop	{r4, r5, r6, sl, fp, pc}
   133a4:	ldr	r1, [r0, #32]
   133a8:	ldr	r2, [r4, #24]
   133ac:	mov	r0, #256	; 0x100
   133b0:	mov	r3, r5
   133b4:	str	r0, [sp]
   133b8:	mov	r0, #3
   133bc:	bl	11280 <__fxstatat64@plt>
   133c0:	cmp	r0, #0
   133c4:	beq	13424 <__assert_fail@plt+0x1f64>
   133c8:	bl	1137c <__errno_location@plt>
   133cc:	mov	r6, r0
   133d0:	ldr	r0, [r6]
   133d4:	vmov.i32	q8, #0	; 0x00000000
   133d8:	add	r1, r5, #80	; 0x50
   133dc:	str	r0, [r4, #32]
   133e0:	mov	r0, #0
   133e4:	vst1.64	{d16-d17}, [r1]
   133e8:	add	r1, r5, #64	; 0x40
   133ec:	str	r0, [r5, #96]	; 0x60
   133f0:	vst1.64	{d16-d17}, [r1]
   133f4:	add	r1, r5, #48	; 0x30
   133f8:	vst1.64	{d16-d17}, [r1]
   133fc:	add	r1, r5, #32
   13400:	vst1.64	{d16-d17}, [r1]
   13404:	add	r1, r5, #16
   13408:	vst1.64	{d16-d17}, [r1]
   1340c:	mov	r1, #100	; 0x64
   13410:	vst1.64	{d16-d17}, [r5], r1
   13414:	str	r0, [r5]
   13418:	mov	r0, #10
   1341c:	sub	sp, fp, #16
   13420:	pop	{r4, r5, r6, sl, fp, pc}
   13424:	ldr	r0, [r4, #80]	; 0x50
   13428:	and	r0, r0, #61440	; 0xf000
   1342c:	cmp	r0, #40960	; 0xa000
   13430:	beq	1348c <__assert_fail@plt+0x1fcc>
   13434:	cmp	r0, #32768	; 0x8000
   13438:	moveq	r0, #8
   1343c:	subeq	sp, fp, #16
   13440:	popeq	{r4, r5, r6, sl, fp, pc}
   13444:	cmp	r0, #16384	; 0x4000
   13448:	bne	13480 <__assert_fail@plt+0x1fc0>
   1344c:	ldrb	r1, [r4, #168]	; 0xa8
   13450:	mov	r0, #1
   13454:	cmp	r1, #46	; 0x2e
   13458:	bne	13478 <__assert_fail@plt+0x1fb8>
   1345c:	ldrb	r1, [r4, #169]	; 0xa9
   13460:	cmp	r1, #0
   13464:	beq	13498 <__assert_fail@plt+0x1fd8>
   13468:	cmp	r1, #46	; 0x2e
   1346c:	ldrbeq	r1, [r4, #170]	; 0xaa
   13470:	cmpeq	r1, #0
   13474:	beq	13498 <__assert_fail@plt+0x1fd8>
   13478:	sub	sp, fp, #16
   1347c:	pop	{r4, r5, r6, sl, fp, pc}
   13480:	mov	r0, #3
   13484:	sub	sp, fp, #16
   13488:	pop	{r4, r5, r6, sl, fp, pc}
   1348c:	mov	r0, #12
   13490:	sub	sp, fp, #16
   13494:	pop	{r4, r5, r6, sl, fp, pc}
   13498:	ldr	r1, [r4, #48]	; 0x30
   1349c:	mov	r0, #5
   134a0:	cmp	r1, #0
   134a4:	movweq	r0, #1
   134a8:	sub	sp, fp, #16
   134ac:	pop	{r4, r5, r6, sl, fp, pc}
   134b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134b4:	add	fp, sp, #24
   134b8:	ldrd	r8, [r0, #40]	; 0x28
   134bc:	mov	r5, r2
   134c0:	mov	r4, r1
   134c4:	mov	r6, r0
   134c8:	cmp	r8, r2
   134cc:	bcs	1350c <__assert_fail@plt+0x204c>
   134d0:	add	r1, r5, #40	; 0x28
   134d4:	cmn	r1, #-1073741823	; 0xc0000001
   134d8:	str	r1, [r6, #40]	; 0x28
   134dc:	bhi	13598 <__assert_fail@plt+0x20d8>
   134e0:	add	r7, r6, #8
   134e4:	lsl	r1, r1, #2
   134e8:	ldr	r0, [r7]
   134ec:	bl	19e68 <__assert_fail@plt+0x89a8>
   134f0:	cmp	r0, #0
   134f4:	beq	13598 <__assert_fail@plt+0x20d8>
   134f8:	mov	r6, r7
   134fc:	str	r0, [r7]
   13500:	cmp	r4, #0
   13504:	bne	13518 <__assert_fail@plt+0x2058>
   13508:	b	1352c <__assert_fail@plt+0x206c>
   1350c:	ldr	r0, [r6, #8]!
   13510:	cmp	r4, #0
   13514:	beq	1352c <__assert_fail@plt+0x206c>
   13518:	str	r4, [r0], #4
   1351c:	ldr	r4, [r4, #8]
   13520:	cmp	r4, #0
   13524:	bne	13518 <__assert_fail@plt+0x2058>
   13528:	ldr	r0, [r6]
   1352c:	mov	r1, r5
   13530:	mov	r2, #4
   13534:	mov	r3, r9
   13538:	bl	1143c <qsort@plt>
   1353c:	ldr	r7, [r6]
   13540:	subs	r0, r5, #1
   13544:	ldr	r4, [r7]
   13548:	mov	r1, r4
   1354c:	beq	13588 <__assert_fail@plt+0x20c8>
   13550:	mov	r1, r7
   13554:	cmp	r5, #2
   13558:	ldr	r2, [r1, #4]!
   1355c:	str	r2, [r4, #8]
   13560:	beq	13584 <__assert_fail@plt+0x20c4>
   13564:	rsb	r3, r5, #2
   13568:	mov	r2, r1
   1356c:	ldr	r6, [r2, #4]!
   13570:	ldr	r1, [r1]
   13574:	adds	r3, r3, #1
   13578:	str	r6, [r1, #8]
   1357c:	mov	r1, r2
   13580:	bne	1356c <__assert_fail@plt+0x20ac>
   13584:	ldr	r1, [r7, r0, lsl #2]
   13588:	mov	r0, #0
   1358c:	str	r0, [r1, #8]
   13590:	mov	r0, r4
   13594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13598:	ldr	r0, [r6, #8]
   1359c:	bl	12e14 <__assert_fail@plt+0x1954>
   135a0:	mov	r0, #0
   135a4:	str	r0, [r6, #40]	; 0x28
   135a8:	str	r0, [r6, #8]
   135ac:	mov	r0, r4
   135b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135b4:	push	{r4, r5, r6, r7, fp, lr}
   135b8:	add	fp, sp, #16
   135bc:	mov	r4, r0
   135c0:	ldr	r0, [r0]
   135c4:	cmp	r0, #0
   135c8:	beq	13608 <__assert_fail@plt+0x2148>
   135cc:	ldr	r1, [r0, #48]	; 0x30
   135d0:	cmp	r1, #0
   135d4:	blt	135fc <__assert_fail@plt+0x213c>
   135d8:	ldr	r5, [r0, #8]
   135dc:	cmp	r5, #0
   135e0:	ldreq	r5, [r0, #4]
   135e4:	bl	12e14 <__assert_fail@plt+0x1954>
   135e8:	ldr	r0, [r5, #48]	; 0x30
   135ec:	cmn	r0, #1
   135f0:	mov	r0, r5
   135f4:	bgt	135d8 <__assert_fail@plt+0x2118>
   135f8:	b	13600 <__assert_fail@plt+0x2140>
   135fc:	mov	r5, r0
   13600:	mov	r0, r5
   13604:	bl	12e14 <__assert_fail@plt+0x1954>
   13608:	ldr	r5, [r4, #4]
   1360c:	cmp	r5, #0
   13610:	beq	1363c <__assert_fail@plt+0x217c>
   13614:	ldrd	r6, [r5, #8]
   13618:	cmp	r7, #0
   1361c:	beq	13628 <__assert_fail@plt+0x2168>
   13620:	mov	r0, r7
   13624:	bl	1149c <closedir@plt>
   13628:	mov	r0, r5
   1362c:	bl	12e14 <__assert_fail@plt+0x1954>
   13630:	cmp	r6, #0
   13634:	mov	r5, r6
   13638:	bne	13614 <__assert_fail@plt+0x2154>
   1363c:	ldr	r0, [r4, #8]
   13640:	bl	12e14 <__assert_fail@plt+0x1954>
   13644:	ldr	r0, [r4, #24]
   13648:	bl	12e14 <__assert_fail@plt+0x1954>
   1364c:	ldr	r0, [r4, #48]	; 0x30
   13650:	tst	r0, #512	; 0x200
   13654:	bne	13680 <__assert_fail@plt+0x21c0>
   13658:	mov	r6, #0
   1365c:	tst	r0, #4
   13660:	bne	136c4 <__assert_fail@plt+0x2204>
   13664:	ldr	r0, [r4, #28]
   13668:	bl	11430 <fchdir@plt>
   1366c:	cmp	r0, #0
   13670:	beq	136a0 <__assert_fail@plt+0x21e0>
   13674:	bl	1137c <__errno_location@plt>
   13678:	ldr	r6, [r0]
   1367c:	b	136a4 <__assert_fail@plt+0x21e4>
   13680:	ldr	r0, [r4, #32]
   13684:	mov	r6, #0
   13688:	cmp	r0, #0
   1368c:	blt	136c4 <__assert_fail@plt+0x2204>
   13690:	bl	11484 <close@plt>
   13694:	cmp	r0, #0
   13698:	bne	136bc <__assert_fail@plt+0x21fc>
   1369c:	b	136c4 <__assert_fail@plt+0x2204>
   136a0:	mov	r6, #0
   136a4:	ldr	r0, [r4, #28]
   136a8:	bl	11484 <close@plt>
   136ac:	cmp	r6, #0
   136b0:	bne	136c4 <__assert_fail@plt+0x2204>
   136b4:	cmp	r0, #0
   136b8:	beq	136c4 <__assert_fail@plt+0x2204>
   136bc:	bl	1137c <__errno_location@plt>
   136c0:	ldr	r6, [r0]
   136c4:	add	r5, r4, #60	; 0x3c
   136c8:	b	136d0 <__assert_fail@plt+0x2210>
   136cc:	bl	11484 <close@plt>
   136d0:	mov	r0, r5
   136d4:	bl	164bc <__assert_fail@plt+0x4ffc>
   136d8:	cmp	r0, #0
   136dc:	bne	136f4 <__assert_fail@plt+0x2234>
   136e0:	mov	r0, r5
   136e4:	bl	16510 <__assert_fail@plt+0x5050>
   136e8:	cmp	r0, #0
   136ec:	bge	136cc <__assert_fail@plt+0x220c>
   136f0:	b	136d0 <__assert_fail@plt+0x2210>
   136f4:	ldr	r0, [r4, #52]	; 0x34
   136f8:	cmp	r0, #0
   136fc:	beq	13704 <__assert_fail@plt+0x2244>
   13700:	bl	15968 <__assert_fail@plt+0x44a8>
   13704:	ldrh	r0, [r4, #48]	; 0x30
   13708:	movw	r1, #258	; 0x102
   1370c:	tst	r0, r1
   13710:	beq	13728 <__assert_fail@plt+0x2268>
   13714:	ldr	r0, [r4, #56]	; 0x38
   13718:	cmp	r0, #0
   1371c:	beq	13730 <__assert_fail@plt+0x2270>
   13720:	bl	15968 <__assert_fail@plt+0x44a8>
   13724:	b	13730 <__assert_fail@plt+0x2270>
   13728:	ldr	r0, [r4, #56]	; 0x38
   1372c:	bl	12e14 <__assert_fail@plt+0x1954>
   13730:	mov	r0, r4
   13734:	bl	12e14 <__assert_fail@plt+0x1954>
   13738:	cmp	r6, #0
   1373c:	moveq	r0, #0
   13740:	popeq	{r4, r5, r6, r7, fp, pc}
   13744:	bl	1137c <__errno_location@plt>
   13748:	str	r6, [r0]
   1374c:	mvn	r0, #0
   13750:	pop	{r4, r5, r6, r7, fp, pc}
   13754:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13758:	add	fp, sp, #24
   1375c:	sub	sp, sp, #8
   13760:	ldr	r6, [r0]
   13764:	mov	r5, #0
   13768:	cmp	r6, #0
   1376c:	beq	13ea0 <__assert_fail@plt+0x29e0>
   13770:	mov	r4, r0
   13774:	ldr	r0, [r0, #48]	; 0x30
   13778:	tst	r0, #8192	; 0x2000
   1377c:	bne	13ea0 <__assert_fail@plt+0x29e0>
   13780:	ldrh	r1, [r6, #60]	; 0x3c
   13784:	mov	r2, #3
   13788:	strh	r2, [r6, #60]	; 0x3c
   1378c:	cmp	r1, #1
   13790:	beq	13808 <__assert_fail@plt+0x2348>
   13794:	mov	r7, r6
   13798:	cmp	r1, #2
   1379c:	bne	13824 <__assert_fail@plt+0x2364>
   137a0:	ldrh	r2, [r7, #56]!	; 0x38
   137a4:	movw	r3, #65534	; 0xfffe
   137a8:	and	r3, r2, r3
   137ac:	cmp	r3, #12
   137b0:	bne	13828 <__assert_fail@plt+0x2368>
   137b4:	mov	r0, r4
   137b8:	mov	r1, r6
   137bc:	mov	r2, #1
   137c0:	bl	13318 <__assert_fail@plt+0x1e58>
   137c4:	cmp	r0, #1
   137c8:	strh	r0, [r6, #56]	; 0x38
   137cc:	bne	13910 <__assert_fail@plt+0x2450>
   137d0:	ldr	r0, [r4, #48]	; 0x30
   137d4:	tst	r0, #4
   137d8:	bne	13910 <__assert_fail@plt+0x2450>
   137dc:	mov	r1, #32768	; 0x8000
   137e0:	tst	r0, #512	; 0x200
   137e4:	and	r1, r1, r0, lsl #11
   137e8:	orr	r1, r1, #18688	; 0x4900
   137ec:	orr	r2, r1, #524288	; 0x80000
   137f0:	bne	13b7c <__assert_fail@plt+0x26bc>
   137f4:	movw	r0, #46604	; 0xb60c
   137f8:	mov	r1, r2
   137fc:	movt	r0, #1
   13800:	bl	1a2b0 <__assert_fail@plt+0x8df0>
   13804:	b	13b8c <__assert_fail@plt+0x26cc>
   13808:	mov	r0, r4
   1380c:	mov	r1, r6
   13810:	mov	r2, #0
   13814:	bl	13318 <__assert_fail@plt+0x1e58>
   13818:	strh	r0, [r6, #56]	; 0x38
   1381c:	mov	r5, r6
   13820:	b	13ea0 <__assert_fail@plt+0x29e0>
   13824:	ldrh	r2, [r7, #56]!	; 0x38
   13828:	cmp	r2, #1
   1382c:	bne	138a4 <__assert_fail@plt+0x23e4>
   13830:	cmp	r1, #4
   13834:	bne	13918 <__assert_fail@plt+0x2458>
   13838:	ldrb	r0, [r6, #58]	; 0x3a
   1383c:	tst	r0, #2
   13840:	beq	1384c <__assert_fail@plt+0x238c>
   13844:	ldr	r0, [r6, #36]	; 0x24
   13848:	bl	11484 <close@plt>
   1384c:	ldr	r5, [r4, #4]
   13850:	cmp	r5, #0
   13854:	beq	13888 <__assert_fail@plt+0x23c8>
   13858:	ldrd	r8, [r5, #8]
   1385c:	cmp	r9, #0
   13860:	beq	1386c <__assert_fail@plt+0x23ac>
   13864:	mov	r0, r9
   13868:	bl	1149c <closedir@plt>
   1386c:	mov	r0, r5
   13870:	bl	12e14 <__assert_fail@plt+0x1954>
   13874:	cmp	r8, #0
   13878:	mov	r5, r8
   1387c:	bne	13858 <__assert_fail@plt+0x2398>
   13880:	mov	r0, #0
   13884:	str	r0, [r4, #4]
   13888:	mov	r0, #6
   1388c:	strh	r0, [r6, #56]	; 0x38
   13890:	mov	r0, r4
   13894:	mov	r1, r6
   13898:	bl	13eb0 <__assert_fail@plt+0x29f0>
   1389c:	mov	r5, r6
   138a0:	b	13ea0 <__assert_fail@plt+0x29e0>
   138a4:	ldr	r5, [r6, #8]
   138a8:	cmp	r5, #0
   138ac:	beq	139a8 <__assert_fail@plt+0x24e8>
   138b0:	mov	r0, r6
   138b4:	str	r5, [r4]
   138b8:	bl	12e14 <__assert_fail@plt+0x1954>
   138bc:	ldr	r0, [r5, #48]	; 0x30
   138c0:	cmp	r0, #0
   138c4:	beq	139f4 <__assert_fail@plt+0x2534>
   138c8:	ldrh	r0, [r5, #60]	; 0x3c
   138cc:	mov	r6, r5
   138d0:	cmp	r0, #4
   138d4:	beq	138a4 <__assert_fail@plt+0x23e4>
   138d8:	cmp	r0, #2
   138dc:	bne	13a94 <__assert_fail@plt+0x25d4>
   138e0:	mov	r0, r4
   138e4:	mov	r1, r5
   138e8:	mov	r2, #1
   138ec:	bl	13318 <__assert_fail@plt+0x1e58>
   138f0:	strh	r0, [r5, #56]	; 0x38
   138f4:	cmp	r0, #1
   138f8:	ldreq	r0, [r4, #48]	; 0x30
   138fc:	tsteq	r0, #4
   13900:	beq	13db8 <__assert_fail@plt+0x28f8>
   13904:	mov	r0, #3
   13908:	strh	r0, [r5, #60]	; 0x3c
   1390c:	b	13a94 <__assert_fail@plt+0x25d4>
   13910:	mov	r5, r6
   13914:	b	13ad0 <__assert_fail@plt+0x2610>
   13918:	tst	r0, #64	; 0x40
   1391c:	beq	13938 <__assert_fail@plt+0x2478>
   13920:	ldrd	r2, [r4, #16]
   13924:	ldrd	r8, [r6, #64]	; 0x40
   13928:	eor	r1, r9, r3
   1392c:	eor	r2, r8, r2
   13930:	orrs	r1, r2, r1
   13934:	bne	13838 <__assert_fail@plt+0x2378>
   13938:	ldr	r5, [r4, #4]
   1393c:	cmp	r5, #0
   13940:	beq	13a70 <__assert_fail@plt+0x25b0>
   13944:	tst	r0, #4096	; 0x1000
   13948:	bne	13a38 <__assert_fail@plt+0x2578>
   1394c:	ldr	r3, [r6, #24]
   13950:	mov	r0, r4
   13954:	mov	r1, r6
   13958:	mvn	r2, #0
   1395c:	bl	13f80 <__assert_fail@plt+0x2ac0>
   13960:	cmp	r0, #0
   13964:	beq	13a88 <__assert_fail@plt+0x25c8>
   13968:	bl	1137c <__errno_location@plt>
   1396c:	ldr	r0, [r0]
   13970:	str	r0, [r6, #32]
   13974:	ldrh	r0, [r6, #58]	; 0x3a
   13978:	orr	r0, r0, #1
   1397c:	strh	r0, [r6, #58]	; 0x3a
   13980:	ldr	r0, [r4, #4]
   13984:	cmp	r0, #0
   13988:	beq	13a88 <__assert_fail@plt+0x25c8>
   1398c:	ldmib	r0, {r1, r2}
   13990:	ldr	r1, [r1, #24]
   13994:	cmp	r2, #0
   13998:	str	r1, [r0, #24]
   1399c:	mov	r0, r2
   139a0:	bne	1398c <__assert_fail@plt+0x24cc>
   139a4:	b	13a88 <__assert_fail@plt+0x25c8>
   139a8:	ldr	r5, [r6, #4]
   139ac:	ldr	r0, [r5, #12]
   139b0:	cmp	r0, #0
   139b4:	beq	13bbc <__assert_fail@plt+0x26fc>
   139b8:	str	r5, [r4]
   139bc:	ldr	r1, [r5, #40]	; 0x28
   139c0:	ldr	r0, [r4, #24]
   139c4:	mov	r5, #0
   139c8:	strb	r5, [r0, r1]
   139cc:	mov	r0, r4
   139d0:	mov	r1, #3
   139d4:	bl	141d8 <__assert_fail@plt+0x2d18>
   139d8:	cmp	r0, #0
   139dc:	beq	13bac <__assert_fail@plt+0x26ec>
   139e0:	mov	r7, r0
   139e4:	mov	r0, r6
   139e8:	bl	12e14 <__assert_fail@plt+0x1954>
   139ec:	mov	r5, r7
   139f0:	b	13a94 <__assert_fail@plt+0x25d4>
   139f4:	mov	r0, r4
   139f8:	bl	14c8c <__assert_fail@plt+0x37cc>
   139fc:	ldr	r1, [r4, #48]	; 0x30
   13a00:	cmp	r0, #0
   13a04:	beq	13a18 <__assert_fail@plt+0x2558>
   13a08:	orr	r0, r1, #8192	; 0x2000
   13a0c:	mov	r5, #0
   13a10:	str	r0, [r4, #48]	; 0x30
   13a14:	b	13ea0 <__assert_fail@plt+0x29e0>
   13a18:	movw	r0, #258	; 0x102
   13a1c:	tst	r1, r0
   13a20:	beq	13c6c <__assert_fail@plt+0x27ac>
   13a24:	ldr	r0, [r4, #56]	; 0x38
   13a28:	cmp	r0, #0
   13a2c:	beq	13c74 <__assert_fail@plt+0x27b4>
   13a30:	bl	15968 <__assert_fail@plt+0x44a8>
   13a34:	b	13c74 <__assert_fail@plt+0x27b4>
   13a38:	bic	r0, r0, #4096	; 0x1000
   13a3c:	str	r0, [r4, #48]	; 0x30
   13a40:	ldrd	r8, [r5, #8]
   13a44:	cmp	r9, #0
   13a48:	beq	13a54 <__assert_fail@plt+0x2594>
   13a4c:	mov	r0, r9
   13a50:	bl	1149c <closedir@plt>
   13a54:	mov	r0, r5
   13a58:	bl	12e14 <__assert_fail@plt+0x1954>
   13a5c:	cmp	r8, #0
   13a60:	mov	r5, r8
   13a64:	bne	13a40 <__assert_fail@plt+0x2580>
   13a68:	mov	r0, #0
   13a6c:	str	r0, [r4, #4]
   13a70:	mov	r0, r4
   13a74:	mov	r1, #3
   13a78:	bl	141d8 <__assert_fail@plt+0x2d18>
   13a7c:	cmp	r0, #0
   13a80:	str	r0, [r4, #4]
   13a84:	beq	13b50 <__assert_fail@plt+0x2690>
   13a88:	ldr	r5, [r4, #4]
   13a8c:	mov	r0, #0
   13a90:	str	r0, [r4, #4]
   13a94:	ldr	r0, [r5, #4]
   13a98:	ldr	r1, [r0, #28]
   13a9c:	ldr	r0, [r0, #40]	; 0x28
   13aa0:	sub	r2, r0, #1
   13aa4:	ldrb	r1, [r1, r2]
   13aa8:	cmp	r1, #47	; 0x2f
   13aac:	ldr	r1, [r4, #24]
   13ab0:	moveq	r0, r2
   13ab4:	mov	r2, #47	; 0x2f
   13ab8:	strb	r2, [r1, r0]!
   13abc:	ldr	r2, [r5, #52]	; 0x34
   13ac0:	add	r0, r1, #1
   13ac4:	add	r1, r5, #168	; 0xa8
   13ac8:	add	r2, r2, #1
   13acc:	bl	111fc <memmove@plt>
   13ad0:	str	r5, [r4]
   13ad4:	ldrh	r0, [r5, #56]	; 0x38
   13ad8:	cmp	r0, #11
   13adc:	bne	13b10 <__assert_fail@plt+0x2650>
   13ae0:	ldrd	r0, [r5, #112]	; 0x70
   13ae4:	eor	r2, r0, #1
   13ae8:	orrs	r2, r2, r1
   13aec:	beq	13ea0 <__assert_fail@plt+0x29e0>
   13af0:	eor	r0, r0, #2
   13af4:	orrs	r0, r0, r1
   13af8:	bne	13eac <__assert_fail@plt+0x29ec>
   13afc:	mov	r0, r4
   13b00:	mov	r1, r5
   13b04:	mov	r2, #0
   13b08:	bl	13318 <__assert_fail@plt+0x1e58>
   13b0c:	strh	r0, [r5, #56]	; 0x38
   13b10:	cmp	r0, #1
   13b14:	bne	13ea0 <__assert_fail@plt+0x29e0>
   13b18:	ldr	r0, [r5, #48]	; 0x30
   13b1c:	cmp	r0, #0
   13b20:	ldrdeq	r0, [r5, #64]	; 0x40
   13b24:	strdeq	r0, [r4, #16]
   13b28:	mov	r0, r4
   13b2c:	mov	r1, r5
   13b30:	bl	14d1c <__assert_fail@plt+0x385c>
   13b34:	cmp	r0, #0
   13b38:	bne	13ea0 <__assert_fail@plt+0x29e0>
   13b3c:	bl	1137c <__errno_location@plt>
   13b40:	mov	r1, #12
   13b44:	mov	r5, #0
   13b48:	str	r1, [r0]
   13b4c:	b	13ea0 <__assert_fail@plt+0x29e0>
   13b50:	ldrb	r0, [r4, #49]	; 0x31
   13b54:	mov	r5, #0
   13b58:	tst	r0, #32
   13b5c:	bne	13ea0 <__assert_fail@plt+0x29e0>
   13b60:	ldr	r0, [r6, #32]
   13b64:	cmp	r0, #0
   13b68:	ldrhne	r0, [r7]
   13b6c:	cmpne	r0, #4
   13b70:	movne	r0, #7
   13b74:	strhne	r0, [r7]
   13b78:	b	13890 <__assert_fail@plt+0x23d0>
   13b7c:	ldr	r0, [r4, #32]
   13b80:	movw	r1, #46604	; 0xb60c
   13b84:	movt	r1, #1
   13b88:	bl	165c4 <__assert_fail@plt+0x5104>
   13b8c:	cmn	r0, #1
   13b90:	str	r0, [r6, #36]	; 0x24
   13b94:	ble	13c50 <__assert_fail@plt+0x2790>
   13b98:	ldrh	r0, [r6, #58]	; 0x3a
   13b9c:	mov	r5, r6
   13ba0:	orr	r0, r0, #2
   13ba4:	strh	r0, [r6, #58]	; 0x3a
   13ba8:	b	13ad0 <__assert_fail@plt+0x2610>
   13bac:	ldrb	r0, [r4, #49]	; 0x31
   13bb0:	tst	r0, #32
   13bb4:	bne	13ea0 <__assert_fail@plt+0x29e0>
   13bb8:	ldr	r5, [r6, #4]
   13bbc:	mov	r0, r6
   13bc0:	str	r5, [r4]
   13bc4:	bl	12e14 <__assert_fail@plt+0x1954>
   13bc8:	ldr	r0, [r5, #48]	; 0x30
   13bcc:	cmn	r0, #1
   13bd0:	beq	13c34 <__assert_fail@plt+0x2774>
   13bd4:	ldrh	r0, [r5, #56]	; 0x38
   13bd8:	cmp	r0, #11
   13bdc:	beq	13eac <__assert_fail@plt+0x29ec>
   13be0:	ldr	r0, [r5, #40]	; 0x28
   13be4:	ldr	r1, [r4, #24]
   13be8:	mov	r2, #0
   13bec:	strb	r2, [r1, r0]
   13bf0:	ldr	r0, [r5, #48]	; 0x30
   13bf4:	cmp	r0, #0
   13bf8:	beq	13d44 <__assert_fail@plt+0x2884>
   13bfc:	ldrh	r0, [r5, #58]	; 0x3a
   13c00:	tst	r0, #2
   13c04:	bne	13d70 <__assert_fail@plt+0x28b0>
   13c08:	tst	r0, #1
   13c0c:	bne	13e64 <__assert_fail@plt+0x29a4>
   13c10:	ldr	r1, [r5, #4]
   13c14:	movw	r3, #46603	; 0xb60b
   13c18:	mov	r0, r4
   13c1c:	mvn	r2, #0
   13c20:	movt	r3, #1
   13c24:	bl	13f80 <__assert_fail@plt+0x2ac0>
   13c28:	cmp	r0, #0
   13c2c:	bne	13d54 <__assert_fail@plt+0x2894>
   13c30:	b	13e64 <__assert_fail@plt+0x29a4>
   13c34:	mov	r0, r5
   13c38:	bl	12e14 <__assert_fail@plt+0x1954>
   13c3c:	bl	1137c <__errno_location@plt>
   13c40:	mov	r5, #0
   13c44:	str	r5, [r0]
   13c48:	str	r5, [r4]
   13c4c:	b	13ea0 <__assert_fail@plt+0x29e0>
   13c50:	bl	1137c <__errno_location@plt>
   13c54:	ldr	r0, [r0]
   13c58:	mov	r1, #7
   13c5c:	mov	r5, r6
   13c60:	strh	r1, [r6, #56]	; 0x38
   13c64:	str	r0, [r6, #32]
   13c68:	b	13ad0 <__assert_fail@plt+0x2610>
   13c6c:	ldr	r0, [r4, #56]	; 0x38
   13c70:	bl	12e14 <__assert_fail@plt+0x1954>
   13c74:	ldr	r1, [r5, #52]	; 0x34
   13c78:	add	r6, r5, #168	; 0xa8
   13c7c:	str	r1, [r5, #40]	; 0x28
   13c80:	add	r2, r1, #1
   13c84:	mov	r1, r6
   13c88:	ldr	r0, [r4, #24]
   13c8c:	bl	111fc <memmove@plt>
   13c90:	mov	r0, r6
   13c94:	mov	r1, #47	; 0x2f
   13c98:	bl	113f4 <strrchr@plt>
   13c9c:	cmp	r0, #0
   13ca0:	beq	13cdc <__assert_fail@plt+0x281c>
   13ca4:	cmp	r0, r6
   13ca8:	bne	13cb8 <__assert_fail@plt+0x27f8>
   13cac:	ldrb	r1, [r5, #169]	; 0xa9
   13cb0:	cmp	r1, #0
   13cb4:	beq	13cdc <__assert_fail@plt+0x281c>
   13cb8:	add	r7, r0, #1
   13cbc:	mov	r0, r7
   13cc0:	bl	1134c <strlen@plt>
   13cc4:	mov	r8, r0
   13cc8:	add	r2, r0, #1
   13ccc:	mov	r0, r6
   13cd0:	mov	r1, r7
   13cd4:	bl	111fc <memmove@plt>
   13cd8:	str	r8, [r5, #52]	; 0x34
   13cdc:	ldr	r0, [r4, #24]
   13ce0:	movw	r1, #258	; 0x102
   13ce4:	str	r0, [r5, #24]
   13ce8:	str	r0, [r5, #28]
   13cec:	ldrh	r0, [r4, #48]	; 0x30
   13cf0:	tst	r0, r1
   13cf4:	beq	13d28 <__assert_fail@plt+0x2868>
   13cf8:	movw	r0, #11796	; 0x2e14
   13cfc:	movw	r2, #20444	; 0x4fdc
   13d00:	movw	r3, #20476	; 0x4ffc
   13d04:	mov	r1, #0
   13d08:	movt	r0, #1
   13d0c:	movt	r2, #1
   13d10:	movt	r3, #1
   13d14:	str	r0, [sp]
   13d18:	mov	r0, #31
   13d1c:	bl	15670 <__assert_fail@plt+0x41b0>
   13d20:	str	r0, [r4, #56]	; 0x38
   13d24:	b	13ad0 <__assert_fail@plt+0x2610>
   13d28:	mov	r0, #32
   13d2c:	bl	19e38 <__assert_fail@plt+0x8978>
   13d30:	cmp	r0, #0
   13d34:	str	r0, [r4, #56]	; 0x38
   13d38:	beq	13ad0 <__assert_fail@plt+0x2610>
   13d3c:	bl	19f40 <__assert_fail@plt+0x8a80>
   13d40:	b	13ad0 <__assert_fail@plt+0x2610>
   13d44:	mov	r0, r4
   13d48:	bl	14c8c <__assert_fail@plt+0x37cc>
   13d4c:	cmp	r0, #0
   13d50:	beq	13e64 <__assert_fail@plt+0x29a4>
   13d54:	bl	1137c <__errno_location@plt>
   13d58:	ldr	r0, [r0]
   13d5c:	str	r0, [r5, #32]
   13d60:	ldr	r0, [r4, #48]	; 0x30
   13d64:	orr	r0, r0, #8192	; 0x2000
   13d68:	str	r0, [r4, #48]	; 0x30
   13d6c:	b	13e64 <__assert_fail@plt+0x29a4>
   13d70:	ldr	r0, [r4, #48]	; 0x30
   13d74:	tst	r0, #4
   13d78:	bne	13de4 <__assert_fail@plt+0x2924>
   13d7c:	mov	r7, r5
   13d80:	tst	r0, #512	; 0x200
   13d84:	ldr	r6, [r7, #36]!	; 0x24
   13d88:	bne	13e30 <__assert_fail@plt+0x2970>
   13d8c:	mov	r0, r6
   13d90:	bl	11430 <fchdir@plt>
   13d94:	cmp	r0, #0
   13d98:	beq	13e5c <__assert_fail@plt+0x299c>
   13d9c:	bl	1137c <__errno_location@plt>
   13da0:	ldr	r0, [r0]
   13da4:	str	r0, [r5, #32]
   13da8:	ldr	r0, [r4, #48]	; 0x30
   13dac:	orr	r0, r0, #8192	; 0x2000
   13db0:	str	r0, [r4, #48]	; 0x30
   13db4:	b	13e5c <__assert_fail@plt+0x299c>
   13db8:	mov	r1, #32768	; 0x8000
   13dbc:	tst	r0, #512	; 0x200
   13dc0:	and	r1, r1, r0, lsl #11
   13dc4:	orr	r1, r1, #18688	; 0x4900
   13dc8:	orr	r2, r1, #524288	; 0x80000
   13dcc:	bne	13dec <__assert_fail@plt+0x292c>
   13dd0:	movw	r0, #46604	; 0xb60c
   13dd4:	mov	r1, r2
   13dd8:	movt	r0, #1
   13ddc:	bl	1a2b0 <__assert_fail@plt+0x8df0>
   13de0:	b	13dfc <__assert_fail@plt+0x293c>
   13de4:	add	r7, r5, #36	; 0x24
   13de8:	b	13e5c <__assert_fail@plt+0x299c>
   13dec:	ldr	r0, [r4, #32]
   13df0:	movw	r1, #46604	; 0xb60c
   13df4:	movt	r1, #1
   13df8:	bl	165c4 <__assert_fail@plt+0x5104>
   13dfc:	cmn	r0, #1
   13e00:	str	r0, [r5, #36]	; 0x24
   13e04:	ble	13e18 <__assert_fail@plt+0x2958>
   13e08:	ldrh	r0, [r5, #58]	; 0x3a
   13e0c:	orr	r0, r0, #2
   13e10:	strh	r0, [r5, #58]	; 0x3a
   13e14:	b	13904 <__assert_fail@plt+0x2444>
   13e18:	bl	1137c <__errno_location@plt>
   13e1c:	ldr	r0, [r0]
   13e20:	mov	r1, #7
   13e24:	strh	r1, [r5, #56]	; 0x38
   13e28:	str	r0, [r5, #32]
   13e2c:	b	13904 <__assert_fail@plt+0x2444>
   13e30:	ldr	r1, [r4, #32]
   13e34:	cmp	r1, r6
   13e38:	bne	13e44 <__assert_fail@plt+0x2984>
   13e3c:	cmn	r1, #100	; 0x64
   13e40:	bne	13eac <__assert_fail@plt+0x29ec>
   13e44:	add	r0, r4, #60	; 0x3c
   13e48:	bl	164c4 <__assert_fail@plt+0x5004>
   13e4c:	cmp	r0, #0
   13e50:	blt	13e58 <__assert_fail@plt+0x2998>
   13e54:	bl	11484 <close@plt>
   13e58:	str	r6, [r4, #32]
   13e5c:	ldr	r0, [r7]
   13e60:	bl	11484 <close@plt>
   13e64:	ldrh	r0, [r5, #56]	; 0x38
   13e68:	cmp	r0, #2
   13e6c:	beq	13e94 <__assert_fail@plt+0x29d4>
   13e70:	ldr	r0, [r5, #32]
   13e74:	mov	r1, #7
   13e78:	cmp	r0, #0
   13e7c:	movweq	r1, #6
   13e80:	strh	r1, [r5, #56]	; 0x38
   13e84:	bne	13e94 <__assert_fail@plt+0x29d4>
   13e88:	mov	r0, r4
   13e8c:	mov	r1, r5
   13e90:	bl	13eb0 <__assert_fail@plt+0x29f0>
   13e94:	ldrb	r0, [r4, #49]	; 0x31
   13e98:	tst	r0, #32
   13e9c:	movne	r5, #0
   13ea0:	mov	r0, r5
   13ea4:	sub	sp, fp, #24
   13ea8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13eac:	bl	11478 <abort@plt>
   13eb0:	push	{r4, r5, r6, r7, fp, lr}
   13eb4:	add	fp, sp, #16
   13eb8:	sub	sp, sp, #24
   13ebc:	ldrh	r2, [r0, #48]	; 0x30
   13ec0:	movw	r3, #258	; 0x102
   13ec4:	add	lr, r1, #64	; 0x40
   13ec8:	tst	r2, r3
   13ecc:	beq	13f04 <__assert_fail@plt+0x2a44>
   13ed0:	ldrd	r2, [lr]
   13ed4:	stm	sp, {r2, r3}
   13ed8:	ldrd	r2, [r1, #160]	; 0xa0
   13edc:	mov	r1, sp
   13ee0:	str	r3, [sp, #12]
   13ee4:	str	r2, [sp, #8]
   13ee8:	ldr	r0, [r0, #56]	; 0x38
   13eec:	bl	161f4 <__assert_fail@plt+0x4d34>
   13ef0:	cmp	r0, #0
   13ef4:	beq	13f7c <__assert_fail@plt+0x2abc>
   13ef8:	bl	12e14 <__assert_fail@plt+0x1954>
   13efc:	sub	sp, fp, #16
   13f00:	pop	{r4, r5, r6, r7, fp, pc}
   13f04:	ldr	r2, [r1, #4]
   13f08:	cmp	r2, #0
   13f0c:	beq	13f74 <__assert_fail@plt+0x2ab4>
   13f10:	ldr	r3, [r2, #48]	; 0x30
   13f14:	cmp	r3, #0
   13f18:	blt	13f74 <__assert_fail@plt+0x2ab4>
   13f1c:	ldr	ip, [r0, #56]	; 0x38
   13f20:	ldrd	r4, [ip, #16]
   13f24:	orrs	r3, r4, r5
   13f28:	beq	13f7c <__assert_fail@plt+0x2abc>
   13f2c:	ldrd	r4, [r1, #160]	; 0xa0
   13f30:	ldrd	r6, [ip]
   13f34:	eor	r1, r7, r5
   13f38:	eor	r3, r6, r4
   13f3c:	orrs	r1, r3, r1
   13f40:	bne	13f74 <__assert_fail@plt+0x2ab4>
   13f44:	ldr	r1, [ip, #8]!
   13f48:	ldrd	r4, [lr]
   13f4c:	ldr	r3, [ip, #4]
   13f50:	eor	r1, r1, r4
   13f54:	eor	r3, r3, r5
   13f58:	orrs	r1, r1, r3
   13f5c:	bne	13f74 <__assert_fail@plt+0x2ab4>
   13f60:	ldrd	r4, [r2, #64]	; 0x40
   13f64:	strd	r4, [ip]
   13f68:	ldr	r0, [r0, #56]	; 0x38
   13f6c:	ldrd	r2, [r2, #160]	; 0xa0
   13f70:	strd	r2, [r0]
   13f74:	sub	sp, fp, #16
   13f78:	pop	{r4, r5, r6, r7, fp, pc}
   13f7c:	bl	11478 <abort@plt>
   13f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f84:	add	fp, sp, #28
   13f88:	sub	sp, sp, #108	; 0x6c
   13f8c:	mov	r7, r3
   13f90:	mov	r4, r2
   13f94:	mov	r8, r1
   13f98:	mov	sl, r0
   13f9c:	cmp	r3, #0
   13fa0:	beq	13fc4 <__assert_fail@plt+0x2b04>
   13fa4:	movw	r1, #46603	; 0xb60b
   13fa8:	mov	r0, r7
   13fac:	movt	r1, #1
   13fb0:	bl	111d8 <strcmp@plt>
   13fb4:	mov	r6, r0
   13fb8:	cmp	r0, #0
   13fbc:	movwne	r6, #1
   13fc0:	b	13fc8 <__assert_fail@plt+0x2b08>
   13fc4:	mov	r6, #1
   13fc8:	ldr	r0, [sl, #48]	; 0x30
   13fcc:	tst	r0, #4
   13fd0:	bne	14028 <__assert_fail@plt+0x2b68>
   13fd4:	cmn	r4, #1
   13fd8:	mov	r1, #0
   13fdc:	mov	r9, #0
   13fe0:	movwgt	r1, #1
   13fe4:	orrs	r1, r1, r6
   13fe8:	bne	14048 <__assert_fail@plt+0x2b88>
   13fec:	ands	r0, r0, #512	; 0x200
   13ff0:	beq	14048 <__assert_fail@plt+0x2b88>
   13ff4:	add	r4, sl, #60	; 0x3c
   13ff8:	mov	r0, r4
   13ffc:	bl	164bc <__assert_fail@plt+0x4ffc>
   14000:	cmp	r0, #0
   14004:	bne	14050 <__assert_fail@plt+0x2b90>
   14008:	mov	r0, r4
   1400c:	bl	16510 <__assert_fail@plt+0x5050>
   14010:	cmn	r0, #1
   14014:	ble	14050 <__assert_fail@plt+0x2b90>
   14018:	mov	r4, r0
   1401c:	mov	r9, #0
   14020:	mov	r7, #0
   14024:	b	14098 <__assert_fail@plt+0x2bd8>
   14028:	mov	r5, #0
   1402c:	cmp	r4, #0
   14030:	blt	141c8 <__assert_fail@plt+0x2d08>
   14034:	ands	r0, r0, #512	; 0x200
   14038:	beq	141c8 <__assert_fail@plt+0x2d08>
   1403c:	mov	r0, r4
   14040:	bl	11484 <close@plt>
   14044:	b	141c8 <__assert_fail@plt+0x2d08>
   14048:	cmn	r4, #1
   1404c:	bgt	14098 <__assert_fail@plt+0x2bd8>
   14050:	ldr	r0, [sl, #48]	; 0x30
   14054:	mov	r1, #32768	; 0x8000
   14058:	and	r1, r1, r0, lsl #11
   1405c:	tst	r0, #512	; 0x200
   14060:	orr	r1, r1, #18688	; 0x4900
   14064:	orr	r2, r1, #524288	; 0x80000
   14068:	bne	1407c <__assert_fail@plt+0x2bbc>
   1406c:	mov	r0, r7
   14070:	mov	r1, r2
   14074:	bl	1a2b0 <__assert_fail@plt+0x8df0>
   14078:	b	14088 <__assert_fail@plt+0x2bc8>
   1407c:	ldr	r0, [sl, #32]
   14080:	mov	r1, r7
   14084:	bl	165c4 <__assert_fail@plt+0x5104>
   14088:	mov	r4, r0
   1408c:	mov	r9, #1
   14090:	cmp	r0, #0
   14094:	blt	1416c <__assert_fail@plt+0x2cac>
   14098:	ldr	r5, [sl, #48]	; 0x30
   1409c:	tst	r5, #2
   140a0:	bne	140e4 <__assert_fail@plt+0x2c24>
   140a4:	cmp	r7, #0
   140a8:	beq	140c4 <__assert_fail@plt+0x2c04>
   140ac:	movw	r1, #46603	; 0xb60b
   140b0:	mov	r0, r7
   140b4:	movt	r1, #1
   140b8:	bl	111d8 <strcmp@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	140e4 <__assert_fail@plt+0x2c24>
   140c4:	tst	r5, #512	; 0x200
   140c8:	bne	1413c <__assert_fail@plt+0x2c7c>
   140cc:	mov	r0, r4
   140d0:	bl	11430 <fchdir@plt>
   140d4:	mov	r5, r0
   140d8:	cmp	r9, #0
   140dc:	bne	1418c <__assert_fail@plt+0x2ccc>
   140e0:	b	141c8 <__assert_fail@plt+0x2d08>
   140e4:	mov	r2, sp
   140e8:	mov	r0, #3
   140ec:	mov	r1, r4
   140f0:	bl	11298 <__fxstat64@plt>
   140f4:	cmp	r0, #0
   140f8:	bne	14180 <__assert_fail@plt+0x2cc0>
   140fc:	ldrd	r0, [r8, #64]	; 0x40
   14100:	ldm	sp, {r2, r3}
   14104:	eor	r1, r1, r3
   14108:	eor	r0, r0, r2
   1410c:	orrs	r0, r0, r1
   14110:	bne	14174 <__assert_fail@plt+0x2cb4>
   14114:	ldrd	r0, [r8, #160]	; 0xa0
   14118:	ldr	r2, [sp, #96]	; 0x60
   1411c:	ldr	r3, [sp, #100]	; 0x64
   14120:	eor	r1, r1, r3
   14124:	eor	r0, r0, r2
   14128:	orrs	r0, r0, r1
   1412c:	bne	14174 <__assert_fail@plt+0x2cb4>
   14130:	ldr	r5, [sl, #48]	; 0x30
   14134:	tst	r5, #512	; 0x200
   14138:	beq	140cc <__assert_fail@plt+0x2c0c>
   1413c:	ldr	r1, [sl, #32]
   14140:	cmp	r1, r4
   14144:	bne	14150 <__assert_fail@plt+0x2c90>
   14148:	cmn	r1, #100	; 0x64
   1414c:	bne	141d4 <__assert_fail@plt+0x2d14>
   14150:	cmp	r6, #0
   14154:	beq	141a8 <__assert_fail@plt+0x2ce8>
   14158:	add	r0, sl, #60	; 0x3c
   1415c:	bl	164c4 <__assert_fail@plt+0x5004>
   14160:	cmp	r0, #0
   14164:	bge	141bc <__assert_fail@plt+0x2cfc>
   14168:	b	141c0 <__assert_fail@plt+0x2d00>
   1416c:	mvn	r5, #0
   14170:	b	141c8 <__assert_fail@plt+0x2d08>
   14174:	bl	1137c <__errno_location@plt>
   14178:	mov	r1, #2
   1417c:	str	r1, [r0]
   14180:	mvn	r5, #0
   14184:	cmp	r9, #0
   14188:	beq	141c8 <__assert_fail@plt+0x2d08>
   1418c:	bl	1137c <__errno_location@plt>
   14190:	ldr	r7, [r0]
   14194:	mov	r6, r0
   14198:	mov	r0, r4
   1419c:	bl	11484 <close@plt>
   141a0:	str	r7, [r6]
   141a4:	b	141c8 <__assert_fail@plt+0x2d08>
   141a8:	tst	r5, #4
   141ac:	bne	141c0 <__assert_fail@plt+0x2d00>
   141b0:	cmp	r1, #0
   141b4:	blt	141c0 <__assert_fail@plt+0x2d00>
   141b8:	mov	r0, r1
   141bc:	bl	11484 <close@plt>
   141c0:	str	r4, [sl, #32]
   141c4:	mov	r5, #0
   141c8:	mov	r0, r5
   141cc:	sub	sp, fp, #28
   141d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d4:	bl	11478 <abort@plt>
   141d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141dc:	add	fp, sp, #28
   141e0:	sub	sp, sp, #76	; 0x4c
   141e4:	ldr	sl, [r0]
   141e8:	mov	r8, r1
   141ec:	mov	r5, r0
   141f0:	str	r0, [sp, #44]	; 0x2c
   141f4:	ldr	r4, [sl, #12]
   141f8:	cmp	r4, #0
   141fc:	beq	14248 <__assert_fail@plt+0x2d88>
   14200:	mov	r0, r4
   14204:	bl	11424 <dirfd@plt>
   14208:	cmn	r0, #1
   1420c:	str	r0, [fp, #-32]	; 0xffffffe0
   14210:	ble	14280 <__assert_fail@plt+0x2dc0>
   14214:	mov	r1, r5
   14218:	mvn	r2, #0
   1421c:	str	r4, [sp, #16]
   14220:	str	r8, [sp, #8]
   14224:	mov	ip, #0
   14228:	ldr	r0, [r1, #44]!	; 0x2c
   1422c:	cmp	r0, #0
   14230:	str	r1, [sp, #52]	; 0x34
   14234:	add	r7, r1, #4
   14238:	movweq	r2, #34464	; 0x86a0
   1423c:	movteq	r2, #1
   14240:	str	r2, [sp, #32]
   14244:	b	14464 <__assert_fail@plt+0x2fa4>
   14248:	mov	r7, r5
   1424c:	mvn	r0, #99	; 0x63
   14250:	mov	r2, #0
   14254:	ldr	r3, [r7, #48]!	; 0x30
   14258:	and	r1, r3, #516	; 0x204
   1425c:	cmp	r1, #512	; 0x200
   14260:	ldr	r1, [sl, #24]
   14264:	ldreq	r0, [r5, #32]
   14268:	tst	r3, #16
   1426c:	beq	142a8 <__assert_fail@plt+0x2de8>
   14270:	tst	r3, #1
   14274:	bne	1429c <__assert_fail@plt+0x2ddc>
   14278:	mov	r2, #32768	; 0x8000
   1427c:	b	142a8 <__assert_fail@plt+0x2de8>
   14280:	ldr	r0, [sl, #12]
   14284:	bl	1149c <closedir@plt>
   14288:	mov	r6, #0
   1428c:	str	r6, [sl, #12]
   14290:	cmp	r8, #3
   14294:	beq	142ec <__assert_fail@plt+0x2e2c>
   14298:	b	14b80 <__assert_fail@plt+0x36c0>
   1429c:	ldr	r3, [sl, #48]	; 0x30
   142a0:	cmp	r3, #0
   142a4:	movne	r2, #32768	; 0x8000
   142a8:	sub	r3, fp, #32
   142ac:	bl	16608 <__assert_fail@plt+0x5148>
   142b0:	cmp	r0, #0
   142b4:	str	r0, [sl, #12]
   142b8:	beq	142e0 <__assert_fail@plt+0x2e20>
   142bc:	ldrh	r0, [sl, #56]	; 0x38
   142c0:	cmp	r0, #11
   142c4:	bne	14304 <__assert_fail@plt+0x2e44>
   142c8:	mov	r0, r5
   142cc:	mov	r1, sl
   142d0:	mov	r2, #0
   142d4:	bl	13318 <__assert_fail@plt+0x1e58>
   142d8:	strh	r0, [sl, #56]	; 0x38
   142dc:	b	14344 <__assert_fail@plt+0x2e84>
   142e0:	mov	r6, #0
   142e4:	cmp	r8, #3
   142e8:	bne	14b80 <__assert_fail@plt+0x36c0>
   142ec:	mov	r0, #4
   142f0:	strh	r0, [sl, #56]	; 0x38
   142f4:	bl	1137c <__errno_location@plt>
   142f8:	ldr	r0, [r0]
   142fc:	str	r0, [sl, #32]
   14300:	b	14b80 <__assert_fail@plt+0x36c0>
   14304:	ldrb	r0, [r7, #1]
   14308:	tst	r0, #1
   1430c:	beq	14344 <__assert_fail@plt+0x2e84>
   14310:	mov	r0, r5
   14314:	mov	r1, sl
   14318:	bl	13eb0 <__assert_fail@plt+0x29f0>
   1431c:	mov	r0, r5
   14320:	mov	r1, sl
   14324:	mov	r2, #0
   14328:	mov	r6, #0
   1432c:	bl	13318 <__assert_fail@plt+0x1e58>
   14330:	mov	r0, r5
   14334:	mov	r1, sl
   14338:	bl	14d1c <__assert_fail@plt+0x385c>
   1433c:	cmp	r0, #0
   14340:	beq	14aec <__assert_fail@plt+0x362c>
   14344:	mov	r1, r5
   14348:	str	r8, [sp, #8]
   1434c:	str	r4, [sp, #16]
   14350:	ldr	r0, [r1, #44]!	; 0x2c
   14354:	str	r1, [sp, #52]	; 0x34
   14358:	mvn	r1, #0
   1435c:	cmp	r0, #0
   14360:	movweq	r1, #34464	; 0x86a0
   14364:	movteq	r1, #1
   14368:	cmp	r8, #2
   1436c:	str	r1, [sp, #32]
   14370:	bne	1438c <__assert_fail@plt+0x2ecc>
   14374:	mov	ip, #1
   14378:	cmp	r8, #3
   1437c:	bne	14464 <__assert_fail@plt+0x2fa4>
   14380:	sub	r0, r8, #3
   14384:	mov	r5, #0
   14388:	b	143ac <__assert_fail@plt+0x2eec>
   1438c:	ldr	r0, [r7]
   14390:	and	r0, r0, #56	; 0x38
   14394:	cmp	r0, #24
   14398:	ldreq	r0, [sl, #84]	; 0x54
   1439c:	cmpeq	r0, #2
   143a0:	beq	14c34 <__assert_fail@plt+0x3774>
   143a4:	sub	r0, r8, #3
   143a8:	mov	r5, #1
   143ac:	clz	r0, r0
   143b0:	lsr	r6, r0, #5
   143b4:	ldrb	r0, [r7, #1]
   143b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143bc:	tst	r0, #2
   143c0:	beq	143dc <__assert_fail@plt+0x2f1c>
   143c4:	mov	r0, r2
   143c8:	movw	r1, #1030	; 0x406
   143cc:	mov	r2, #3
   143d0:	bl	1a0d0 <__assert_fail@plt+0x8c10>
   143d4:	mov	r2, r0
   143d8:	str	r0, [fp, #-32]	; 0xffffffe0
   143dc:	cmp	r2, #0
   143e0:	blt	143fc <__assert_fail@plt+0x2f3c>
   143e4:	ldr	r0, [sp, #44]	; 0x2c
   143e8:	mov	r1, sl
   143ec:	mov	r3, #0
   143f0:	bl	13f80 <__assert_fail@plt+0x2ac0>
   143f4:	cmp	r0, #0
   143f8:	beq	1445c <__assert_fail@plt+0x2f9c>
   143fc:	and	r0, r6, r5
   14400:	cmp	r0, #1
   14404:	bne	14414 <__assert_fail@plt+0x2f54>
   14408:	bl	1137c <__errno_location@plt>
   1440c:	ldr	r0, [r0]
   14410:	str	r0, [sl, #32]
   14414:	ldrh	r0, [sl, #58]	; 0x3a
   14418:	orr	r0, r0, #1
   1441c:	strh	r0, [sl, #58]	; 0x3a
   14420:	ldr	r0, [sl, #12]
   14424:	bl	1149c <closedir@plt>
   14428:	mov	r4, #0
   1442c:	ldr	r5, [sp, #44]	; 0x2c
   14430:	str	r4, [sl, #12]
   14434:	ldr	r0, [r7]
   14438:	tst	r0, #512	; 0x200
   1443c:	beq	14450 <__assert_fail@plt+0x2f90>
   14440:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14444:	cmp	r0, #0
   14448:	blt	14450 <__assert_fail@plt+0x2f90>
   1444c:	bl	11484 <close@plt>
   14450:	mov	ip, #1
   14454:	str	r4, [sl, #12]
   14458:	b	14464 <__assert_fail@plt+0x2fa4>
   1445c:	ldr	r5, [sp, #44]	; 0x2c
   14460:	mov	ip, #0
   14464:	ldr	r0, [sl, #40]	; 0x28
   14468:	ldr	r1, [sl, #28]
   1446c:	mov	r9, #0
   14470:	sub	r2, r0, #1
   14474:	ldrb	r1, [r1, r2]
   14478:	cmp	r1, #47	; 0x2f
   1447c:	ldrb	r1, [r7]
   14480:	moveq	r0, r2
   14484:	tst	r1, #4
   14488:	mov	r1, #0
   1448c:	str	r1, [sp, #40]	; 0x28
   14490:	beq	144a8 <__assert_fail@plt+0x2fe8>
   14494:	ldr	r1, [r5, #24]
   14498:	mov	r2, #47	; 0x2f
   1449c:	strb	r2, [r1, r0]!
   144a0:	add	r1, r1, #1
   144a4:	str	r1, [sp, #40]	; 0x28
   144a8:	ldr	r6, [sl, #12]
   144ac:	add	r1, r0, #1
   144b0:	str	r1, [fp, #-48]	; 0xffffffd0
   144b4:	cmp	r6, #0
   144b8:	beq	14830 <__assert_fail@plt+0x3370>
   144bc:	ldr	r0, [sl, #48]	; 0x30
   144c0:	str	r7, [fp, #-36]	; 0xffffffdc
   144c4:	str	ip, [sp, #4]
   144c8:	mov	r7, #0
   144cc:	add	r0, r0, #1
   144d0:	str	r0, [sp, #24]
   144d4:	ldr	r0, [r5, #36]	; 0x24
   144d8:	sub	r0, r0, r1
   144dc:	str	r0, [fp, #-44]	; 0xffffffd4
   144e0:	bl	1137c <__errno_location@plt>
   144e4:	str	r0, [sp, #36]	; 0x24
   144e8:	mov	r0, #0
   144ec:	mov	r9, #0
   144f0:	mov	r4, #0
   144f4:	str	sl, [sp, #28]
   144f8:	str	r0, [sp, #48]	; 0x30
   144fc:	mov	r0, #0
   14500:	str	r0, [sp, #12]
   14504:	mov	r0, #0
   14508:	str	r0, [sp, #20]
   1450c:	ldr	r0, [sp, #36]	; 0x24
   14510:	str	r7, [r0]
   14514:	mov	r0, r6
   14518:	bl	1140c <readdir64@plt>
   1451c:	cmp	r0, #0
   14520:	beq	14984 <__assert_fail@plt+0x34c4>
   14524:	mov	r8, r0
   14528:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1452c:	str	r4, [fp, #-40]	; 0xffffffd8
   14530:	add	r4, r8, #19
   14534:	ldrb	r0, [r0]
   14538:	tst	r0, #32
   1453c:	ldrbeq	r0, [r4]
   14540:	cmpeq	r0, #46	; 0x2e
   14544:	beq	14640 <__assert_fail@plt+0x3180>
   14548:	mov	r0, r4
   1454c:	bl	1134c <strlen@plt>
   14550:	mov	r5, r0
   14554:	add	r0, r0, #176	; 0xb0
   14558:	bic	r0, r0, #7
   1455c:	bl	19e38 <__assert_fail@plt+0x8978>
   14560:	mov	r6, r0
   14564:	cmp	r0, #0
   14568:	beq	14b10 <__assert_fail@plt+0x3650>
   1456c:	add	sl, r6, #168	; 0xa8
   14570:	mov	r1, r4
   14574:	mov	r2, r5
   14578:	mov	r0, sl
   1457c:	bl	11220 <memcpy@plt>
   14580:	ldr	r2, [sp, #44]	; 0x2c
   14584:	mov	r0, #0
   14588:	mov	r1, #196608	; 0x30000
   1458c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14590:	strb	r0, [sl, r5]
   14594:	str	r5, [r6, #52]	; 0x34
   14598:	str	r2, [r6, #44]	; 0x2c
   1459c:	add	r7, r5, r3
   145a0:	ldr	r4, [r2, #24]
   145a4:	str	r1, [r6, #58]	; 0x3a
   145a8:	str	r0, [r6, #12]
   145ac:	str	r0, [r6, #16]
   145b0:	str	r0, [r6, #20]
   145b4:	str	r4, [r6, #28]
   145b8:	str	r0, [r6, #32]
   145bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   145c0:	cmp	r5, r0
   145c4:	bcs	145dc <__assert_fail@plt+0x311c>
   145c8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   145cc:	mov	r5, r2
   145d0:	cmp	r7, r3
   145d4:	bcs	14680 <__assert_fail@plt+0x31c0>
   145d8:	b	149e8 <__assert_fail@plt+0x3528>
   145dc:	ldr	r1, [r2, #36]	; 0x24
   145e0:	movw	r0, #257	; 0x101
   145e4:	mov	r5, r2
   145e8:	add	r0, r7, r0
   145ec:	adds	r1, r0, r1
   145f0:	bcs	14acc <__assert_fail@plt+0x360c>
   145f4:	mov	r0, r4
   145f8:	str	r1, [r5, #36]	; 0x24
   145fc:	bl	19e68 <__assert_fail@plt+0x89a8>
   14600:	cmp	r0, #0
   14604:	beq	14afc <__assert_fail@plt+0x363c>
   14608:	cmp	r0, r4
   1460c:	str	r0, [r5, #24]
   14610:	beq	14668 <__assert_fail@plt+0x31a8>
   14614:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14618:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1461c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14620:	ldrb	r1, [r1]
   14624:	tst	r1, #4
   14628:	ldr	r1, [sp, #40]	; 0x28
   1462c:	addne	r1, r0, r3
   14630:	mov	r0, #1
   14634:	str	r1, [sp, #40]	; 0x28
   14638:	str	r0, [sp, #20]
   1463c:	b	14670 <__assert_fail@plt+0x31b0>
   14640:	ldrb	r0, [r8, #20]
   14644:	cmp	r0, #0
   14648:	beq	1465c <__assert_fail@plt+0x319c>
   1464c:	cmp	r0, #46	; 0x2e
   14650:	ldrbeq	r0, [r8, #21]
   14654:	cmpeq	r0, #0
   14658:	bne	14548 <__assert_fail@plt+0x3088>
   1465c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14660:	mov	r7, #0
   14664:	b	14814 <__assert_fail@plt+0x3354>
   14668:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1466c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14670:	ldr	r0, [r5, #36]	; 0x24
   14674:	sub	r0, r0, r3
   14678:	cmp	r7, r3
   1467c:	bcc	149e8 <__assert_fail@plt+0x3528>
   14680:	str	r0, [fp, #-44]	; 0xffffffd4
   14684:	ldr	r0, [sp, #24]
   14688:	str	r0, [r6, #48]	; 0x30
   1468c:	ldr	r0, [r5]
   14690:	str	r7, [r6, #40]	; 0x28
   14694:	str	r0, [r6, #4]
   14698:	ldrd	r0, [r8]
   1469c:	strd	r0, [r6, #160]	; 0xa0
   146a0:	ldrb	r0, [r5, #48]	; 0x30
   146a4:	tst	r0, #4
   146a8:	bne	146b4 <__assert_fail@plt+0x31f4>
   146ac:	str	sl, [r6, #24]
   146b0:	b	146d0 <__assert_fail@plt+0x3210>
   146b4:	ldr	r0, [r6, #28]
   146b8:	ldr	r1, [r6, #52]	; 0x34
   146bc:	str	r0, [r6, #24]
   146c0:	ldr	r0, [sp, #40]	; 0x28
   146c4:	add	r2, r1, #1
   146c8:	mov	r1, sl
   146cc:	bl	111fc <memmove@plt>
   146d0:	ldr	r0, [sp, #52]	; 0x34
   146d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   146d8:	ldr	sl, [sp, #28]
   146dc:	ldr	r0, [r0]
   146e0:	ldr	r2, [r1]
   146e4:	cmp	r0, #0
   146e8:	beq	14710 <__assert_fail@plt+0x3250>
   146ec:	ands	r0, r2, #1024	; 0x400
   146f0:	bne	14710 <__assert_fail@plt+0x3250>
   146f4:	mov	r0, r5
   146f8:	mov	r1, r6
   146fc:	mov	r2, #0
   14700:	bl	13318 <__assert_fail@plt+0x1e58>
   14704:	mov	r7, #0
   14708:	strh	r0, [r6, #56]	; 0x38
   1470c:	b	14784 <__assert_fail@plt+0x32c4>
   14710:	ldrb	r3, [r8, #18]
   14714:	mov	r0, #0
   14718:	tst	r2, #8
   1471c:	mov	r1, #0
   14720:	beq	14744 <__assert_fail@plt+0x3284>
   14724:	orr	r1, r3, #4
   14728:	cmp	r1, #4
   1472c:	mov	r1, #0
   14730:	beq	14744 <__assert_fail@plt+0x3284>
   14734:	eor	r1, r3, #10
   14738:	and	r2, r2, #16
   1473c:	orrs	r1, r2, r1
   14740:	movwne	r1, #1
   14744:	mov	r2, #11
   14748:	mov	r7, #0
   1474c:	strh	r2, [r6, #56]	; 0x38
   14750:	sub	r2, r3, #1
   14754:	uxtb	r3, r2
   14758:	cmp	r3, #11
   1475c:	sxtbls	r0, r2
   14760:	movwls	r2, #46608	; 0xb610
   14764:	movtls	r2, #1
   14768:	ldrls	r0, [r2, r0, lsl #2]
   1476c:	cmp	r1, #0
   14770:	str	r0, [r6, #80]	; 0x50
   14774:	mov	r0, #2
   14778:	movwne	r0, #1
   1477c:	str	r0, [r6, #112]	; 0x70
   14780:	str	r7, [r6, #116]	; 0x74
   14784:	cmp	r9, #0
   14788:	str	r7, [r6, #8]
   1478c:	ldrne	r0, [sp, #48]	; 0x30
   14790:	moveq	r9, r6
   14794:	strne	r6, [r0, #8]
   14798:	movw	r0, #10000	; 0x2710
   1479c:	cmp	r4, r0
   147a0:	bne	147f4 <__assert_fail@plt+0x3334>
   147a4:	ldr	r0, [sp, #52]	; 0x34
   147a8:	ldr	r0, [r0]
   147ac:	cmp	r0, #0
   147b0:	bne	147f4 <__assert_fail@plt+0x3334>
   147b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   147b8:	mov	r0, sl
   147bc:	bl	1507c <__assert_fail@plt+0x3bbc>
   147c0:	mov	r1, #0
   147c4:	str	r1, [sp, #12]
   147c8:	movw	r1, #19778	; 0x4d42
   147cc:	movt	r1, #65363	; 0xff53
   147d0:	cmp	r0, r1
   147d4:	movwne	r1, #26985	; 0x6969
   147d8:	cmpne	r0, r1
   147dc:	beq	147f4 <__assert_fail@plt+0x3334>
   147e0:	movw	r1, #6548	; 0x1994
   147e4:	movt	r1, #258	; 0x102
   147e8:	cmp	r0, r1
   147ec:	movne	r0, #1
   147f0:	strne	r0, [sp, #12]
   147f4:	ldr	r0, [sp, #32]
   147f8:	add	r4, r4, #1
   147fc:	cmp	r0, r4
   14800:	mov	r0, #0
   14804:	movwls	r0, #15
   14808:	cmp	r0, #0
   1480c:	bne	14a5c <__assert_fail@plt+0x359c>
   14810:	str	r6, [sp, #48]	; 0x30
   14814:	ldr	r6, [sl, #12]
   14818:	cmp	r6, #0
   1481c:	bne	1450c <__assert_fail@plt+0x304c>
   14820:	ldr	r0, [sp, #20]
   14824:	ldr	ip, [sp, #4]
   14828:	ldr	r6, [sp, #12]
   1482c:	b	149d0 <__assert_fail@plt+0x3510>
   14830:	mov	r4, #0
   14834:	mov	r6, #0
   14838:	ldrb	r0, [r7]
   1483c:	tst	r0, #4
   14840:	beq	1486c <__assert_fail@plt+0x33ac>
   14844:	ldr	r2, [sp, #40]	; 0x28
   14848:	ldr	r0, [r5, #36]	; 0x24
   1484c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14850:	cmp	r3, r0
   14854:	sub	r1, r2, #1
   14858:	mov	r0, #0
   1485c:	moveq	r2, r1
   14860:	cmp	r4, #0
   14864:	moveq	r2, r1
   14868:	strb	r0, [r2]
   1486c:	ldr	r0, [sp, #16]
   14870:	cmp	r0, #0
   14874:	movwne	r0, #1
   14878:	orrs	r0, r0, ip
   1487c:	beq	148e0 <__assert_fail@plt+0x3420>
   14880:	cmp	r4, #0
   14884:	bne	14920 <__assert_fail@plt+0x3460>
   14888:	ldr	r0, [sp, #8]
   1488c:	cmp	r0, #3
   14890:	bne	148a8 <__assert_fail@plt+0x33e8>
   14894:	ldrh	r0, [sl, #56]	; 0x38
   14898:	cmp	r0, #4
   1489c:	cmpne	r0, #7
   148a0:	movne	r0, #6
   148a4:	strhne	r0, [sl, #56]	; 0x38
   148a8:	mov	r6, #0
   148ac:	cmp	r9, #0
   148b0:	beq	14b80 <__assert_fail@plt+0x36c0>
   148b4:	ldrd	r4, [r9, #8]
   148b8:	cmp	r5, #0
   148bc:	beq	148c8 <__assert_fail@plt+0x3408>
   148c0:	mov	r0, r5
   148c4:	bl	1149c <closedir@plt>
   148c8:	mov	r0, r9
   148cc:	bl	12e14 <__assert_fail@plt+0x1954>
   148d0:	cmp	r4, #0
   148d4:	mov	r9, r4
   148d8:	bne	148b4 <__assert_fail@plt+0x33f4>
   148dc:	b	14b80 <__assert_fail@plt+0x36c0>
   148e0:	ldr	r0, [sp, #8]
   148e4:	cmp	r0, #1
   148e8:	cmpne	r4, #0
   148ec:	bne	14920 <__assert_fail@plt+0x3460>
   148f0:	ldr	r0, [sl, #48]	; 0x30
   148f4:	cmp	r0, #0
   148f8:	beq	14a70 <__assert_fail@plt+0x35b0>
   148fc:	ldr	r1, [sl, #4]
   14900:	movw	r3, #46603	; 0xb60b
   14904:	mov	r0, r5
   14908:	mvn	r2, #0
   1490c:	movt	r3, #1
   14910:	bl	13f80 <__assert_fail@plt+0x2ac0>
   14914:	cmp	r0, #0
   14918:	bne	14a80 <__assert_fail@plt+0x35c0>
   1491c:	b	14880 <__assert_fail@plt+0x33c0>
   14920:	tst	r6, #1
   14924:	beq	14954 <__assert_fail@plt+0x3494>
   14928:	movw	r0, #20548	; 0x5044
   1492c:	mov	r1, r9
   14930:	mov	r2, r4
   14934:	movt	r0, #1
   14938:	str	r0, [r5, #44]	; 0x2c
   1493c:	mov	r0, r5
   14940:	bl	134b0 <__assert_fail@plt+0x1ff0>
   14944:	mov	r6, r0
   14948:	mov	r0, #0
   1494c:	str	r0, [r5, #44]	; 0x2c
   14950:	b	14b80 <__assert_fail@plt+0x36c0>
   14954:	cmp	r4, #2
   14958:	bcc	149e0 <__assert_fail@plt+0x3520>
   1495c:	ldr	r0, [sp, #52]	; 0x34
   14960:	ldr	r0, [r0]
   14964:	cmp	r0, #0
   14968:	beq	149e0 <__assert_fail@plt+0x3520>
   1496c:	mov	r0, r5
   14970:	mov	r1, r9
   14974:	mov	r2, r4
   14978:	bl	134b0 <__assert_fail@plt+0x1ff0>
   1497c:	mov	r6, r0
   14980:	b	14b80 <__assert_fail@plt+0x36c0>
   14984:	ldr	r0, [sp, #36]	; 0x24
   14988:	ldr	r0, [r0]
   1498c:	cmp	r0, #0
   14990:	beq	149ac <__assert_fail@plt+0x34ec>
   14994:	str	r0, [sl, #32]
   14998:	ldr	r0, [sp, #16]
   1499c:	orrs	r0, r0, r4
   149a0:	mov	r0, #4
   149a4:	movwne	r0, #7
   149a8:	strh	r0, [sl, #56]	; 0x38
   149ac:	ldr	r0, [sl, #12]
   149b0:	ldr	r6, [sp, #12]
   149b4:	cmp	r0, #0
   149b8:	beq	14b94 <__assert_fail@plt+0x36d4>
   149bc:	bl	1149c <closedir@plt>
   149c0:	mov	r0, #0
   149c4:	ldr	ip, [sp, #4]
   149c8:	str	r0, [sl, #12]
   149cc:	ldr	r0, [sp, #20]
   149d0:	tst	r0, #1
   149d4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   149d8:	beq	14838 <__assert_fail@plt+0x3378>
   149dc:	b	14ba8 <__assert_fail@plt+0x36e8>
   149e0:	mov	r6, r9
   149e4:	b	14b80 <__assert_fail@plt+0x36c0>
   149e8:	mov	r0, r6
   149ec:	bl	12e14 <__assert_fail@plt+0x1954>
   149f0:	ldr	r7, [sp, #28]
   149f4:	cmp	r9, #0
   149f8:	beq	14a24 <__assert_fail@plt+0x3564>
   149fc:	ldrd	r4, [r9, #8]
   14a00:	cmp	r5, #0
   14a04:	beq	14a10 <__assert_fail@plt+0x3550>
   14a08:	mov	r0, r5
   14a0c:	bl	1149c <closedir@plt>
   14a10:	mov	r0, r9
   14a14:	bl	12e14 <__assert_fail@plt+0x1954>
   14a18:	cmp	r4, #0
   14a1c:	mov	r9, r4
   14a20:	bne	149fc <__assert_fail@plt+0x353c>
   14a24:	ldr	r0, [r7, #12]
   14a28:	bl	1149c <closedir@plt>
   14a2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14a30:	mov	r6, #0
   14a34:	mov	r0, #7
   14a38:	str	r6, [r7, #12]
   14a3c:	strh	r0, [r7, #56]	; 0x38
   14a40:	ldr	r0, [r1]
   14a44:	orr	r0, r0, #8192	; 0x2000
   14a48:	str	r0, [r1]
   14a4c:	ldr	r1, [sp, #36]	; 0x24
   14a50:	mov	r0, #36	; 0x24
   14a54:	str	r0, [r1]
   14a58:	b	14b80 <__assert_fail@plt+0x36c0>
   14a5c:	ldr	ip, [sp, #4]
   14a60:	cmp	r0, #15
   14a64:	bne	14b8c <__assert_fail@plt+0x36cc>
   14a68:	ldr	r6, [sp, #12]
   14a6c:	b	14b98 <__assert_fail@plt+0x36d8>
   14a70:	mov	r0, r5
   14a74:	bl	14c8c <__assert_fail@plt+0x37cc>
   14a78:	cmp	r0, #0
   14a7c:	beq	14880 <__assert_fail@plt+0x33c0>
   14a80:	mov	r0, #7
   14a84:	mov	r6, #0
   14a88:	cmp	r9, #0
   14a8c:	strh	r0, [sl, #56]	; 0x38
   14a90:	ldr	r0, [r7]
   14a94:	orr	r0, r0, #8192	; 0x2000
   14a98:	str	r0, [r7]
   14a9c:	beq	14b80 <__assert_fail@plt+0x36c0>
   14aa0:	ldrd	r4, [r9, #8]
   14aa4:	cmp	r5, #0
   14aa8:	beq	14ab4 <__assert_fail@plt+0x35f4>
   14aac:	mov	r0, r5
   14ab0:	bl	1149c <closedir@plt>
   14ab4:	mov	r0, r9
   14ab8:	bl	12e14 <__assert_fail@plt+0x1954>
   14abc:	cmp	r4, #0
   14ac0:	mov	r9, r4
   14ac4:	bne	14aa0 <__assert_fail@plt+0x35e0>
   14ac8:	b	14b80 <__assert_fail@plt+0x36c0>
   14acc:	mov	r0, r4
   14ad0:	bl	12e14 <__assert_fail@plt+0x1954>
   14ad4:	ldr	r1, [sp, #36]	; 0x24
   14ad8:	mov	r0, #0
   14adc:	str	r0, [r5, #24]
   14ae0:	mov	r0, #36	; 0x24
   14ae4:	str	r0, [r1]
   14ae8:	b	14b0c <__assert_fail@plt+0x364c>
   14aec:	bl	1137c <__errno_location@plt>
   14af0:	mov	r1, #12
   14af4:	str	r1, [r0]
   14af8:	b	14b80 <__assert_fail@plt+0x36c0>
   14afc:	ldr	r0, [r5, #24]
   14b00:	bl	12e14 <__assert_fail@plt+0x1954>
   14b04:	mov	r0, #0
   14b08:	str	r0, [r5, #24]
   14b0c:	ldr	sl, [sp, #28]
   14b10:	ldr	r0, [sp, #36]	; 0x24
   14b14:	ldr	r4, [r0]
   14b18:	mov	r0, r6
   14b1c:	bl	12e14 <__assert_fail@plt+0x1954>
   14b20:	cmp	r9, #0
   14b24:	beq	14b50 <__assert_fail@plt+0x3690>
   14b28:	ldrd	r6, [r9, #8]
   14b2c:	cmp	r7, #0
   14b30:	beq	14b3c <__assert_fail@plt+0x367c>
   14b34:	mov	r0, r7
   14b38:	bl	1149c <closedir@plt>
   14b3c:	mov	r0, r9
   14b40:	bl	12e14 <__assert_fail@plt+0x1954>
   14b44:	cmp	r6, #0
   14b48:	mov	r9, r6
   14b4c:	bne	14b28 <__assert_fail@plt+0x3668>
   14b50:	ldr	r0, [sl, #12]
   14b54:	bl	1149c <closedir@plt>
   14b58:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14b5c:	mov	r6, #0
   14b60:	mov	r0, #7
   14b64:	str	r6, [sl, #12]
   14b68:	strh	r0, [sl, #56]	; 0x38
   14b6c:	ldr	r0, [r1]
   14b70:	orr	r0, r0, #8192	; 0x2000
   14b74:	str	r0, [r1]
   14b78:	ldr	r0, [sp, #36]	; 0x24
   14b7c:	str	r4, [r0]
   14b80:	mov	r0, r6
   14b84:	sub	sp, fp, #28
   14b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b8c:	mov	r6, #0
   14b90:	b	14b80 <__assert_fail@plt+0x36c0>
   14b94:	ldr	ip, [sp, #4]
   14b98:	ldr	r0, [sp, #20]
   14b9c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14ba0:	tst	r0, #1
   14ba4:	beq	14838 <__assert_fail@plt+0x3378>
   14ba8:	ldr	r1, [r5, #4]
   14bac:	ldr	r0, [r5, #24]
   14bb0:	cmp	r1, #0
   14bb4:	beq	14be4 <__assert_fail@plt+0x3724>
   14bb8:	ldr	r2, [r1, #24]
   14bbc:	add	r3, r1, #168	; 0xa8
   14bc0:	cmp	r2, r3
   14bc4:	ldrne	r3, [r1, #28]
   14bc8:	subne	r2, r2, r3
   14bcc:	addne	r2, r0, r2
   14bd0:	strne	r2, [r1, #24]
   14bd4:	str	r0, [r1, #28]
   14bd8:	ldr	r1, [r1, #8]
   14bdc:	cmp	r1, #0
   14be0:	bne	14bb8 <__assert_fail@plt+0x36f8>
   14be4:	ldr	r1, [r9, #48]	; 0x30
   14be8:	cmp	r1, #0
   14bec:	blt	14838 <__assert_fail@plt+0x3378>
   14bf0:	mov	r1, r9
   14bf4:	ldr	r2, [r1, #24]
   14bf8:	add	r3, r1, #168	; 0xa8
   14bfc:	cmp	r2, r3
   14c00:	ldrne	r3, [r1, #28]
   14c04:	subne	r2, r2, r3
   14c08:	addne	r2, r0, r2
   14c0c:	strne	r2, [r1, #24]
   14c10:	str	r0, [r1, #28]
   14c14:	ldr	r2, [r1, #8]
   14c18:	cmp	r2, #0
   14c1c:	ldreq	r2, [r1, #4]
   14c20:	ldr	r1, [r2, #48]	; 0x30
   14c24:	cmn	r1, #1
   14c28:	mov	r1, r2
   14c2c:	bgt	14bf4 <__assert_fail@plt+0x3734>
   14c30:	b	14838 <__assert_fail@plt+0x3378>
   14c34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14c38:	mov	r0, sl
   14c3c:	bl	1507c <__assert_fail@plt+0x3bbc>
   14c40:	movw	r1, #26984	; 0x6968
   14c44:	cmp	r0, r1
   14c48:	ble	14c74 <__assert_fail@plt+0x37b4>
   14c4c:	movw	r1, #26985	; 0x6969
   14c50:	cmp	r0, r1
   14c54:	movwne	r1, #16719	; 0x414f
   14c58:	movtne	r1, #21318	; 0x5346
   14c5c:	cmpne	r0, r1
   14c60:	beq	143a4 <__assert_fail@plt+0x2ee4>
   14c64:	movw	r1, #40864	; 0x9fa0
   14c68:	cmp	r0, r1
   14c6c:	beq	143a4 <__assert_fail@plt+0x2ee4>
   14c70:	b	14374 <__assert_fail@plt+0x2eb4>
   14c74:	movw	r1, #19778	; 0x4d42
   14c78:	movt	r1, #65363	; 0xff53
   14c7c:	cmp	r0, r1
   14c80:	cmpne	r0, #0
   14c84:	beq	143a4 <__assert_fail@plt+0x2ee4>
   14c88:	b	14374 <__assert_fail@plt+0x2eb4>
   14c8c:	push	{r4, r5, fp, lr}
   14c90:	add	fp, sp, #8
   14c94:	mov	r5, r0
   14c98:	ldr	r0, [r0, #48]	; 0x30
   14c9c:	mov	r4, #0
   14ca0:	tst	r0, #4
   14ca4:	bne	14ce8 <__assert_fail@plt+0x3828>
   14ca8:	tst	r0, #512	; 0x200
   14cac:	bne	14cc8 <__assert_fail@plt+0x3808>
   14cb0:	ldr	r0, [r5, #28]
   14cb4:	bl	11430 <fchdir@plt>
   14cb8:	mov	r4, r0
   14cbc:	cmp	r0, #0
   14cc0:	movwne	r4, #1
   14cc4:	b	14ce8 <__assert_fail@plt+0x3828>
   14cc8:	ldr	r1, [r5, #32]
   14ccc:	add	r0, r5, #60	; 0x3c
   14cd0:	bl	164c4 <__assert_fail@plt+0x5004>
   14cd4:	cmp	r0, #0
   14cd8:	blt	14ce0 <__assert_fail@plt+0x3820>
   14cdc:	bl	11484 <close@plt>
   14ce0:	mvn	r0, #99	; 0x63
   14ce4:	str	r0, [r5, #32]
   14ce8:	add	r5, r5, #60	; 0x3c
   14cec:	b	14cf4 <__assert_fail@plt+0x3834>
   14cf0:	bl	11484 <close@plt>
   14cf4:	mov	r0, r5
   14cf8:	bl	164bc <__assert_fail@plt+0x4ffc>
   14cfc:	cmp	r0, #0
   14d00:	movne	r0, r4
   14d04:	popne	{r4, r5, fp, pc}
   14d08:	mov	r0, r5
   14d0c:	bl	16510 <__assert_fail@plt+0x5050>
   14d10:	cmp	r0, #0
   14d14:	bge	14cf0 <__assert_fail@plt+0x3830>
   14d18:	b	14cf4 <__assert_fail@plt+0x3834>
   14d1c:	push	{r4, r5, r6, r7, fp, lr}
   14d20:	add	fp, sp, #16
   14d24:	mov	r6, r0
   14d28:	ldrh	r0, [r0, #48]	; 0x30
   14d2c:	mov	r4, r1
   14d30:	movw	r1, #258	; 0x102
   14d34:	tst	r0, r1
   14d38:	beq	14dac <__assert_fail@plt+0x38ec>
   14d3c:	mov	r0, #24
   14d40:	bl	19e38 <__assert_fail@plt+0x8978>
   14d44:	mov	r5, #0
   14d48:	cmp	r0, #0
   14d4c:	beq	14dcc <__assert_fail@plt+0x390c>
   14d50:	mov	r7, r0
   14d54:	ldrd	r0, [r4, #64]	; 0x40
   14d58:	add	r2, r7, #8
   14d5c:	stm	r7, {r0, r1}
   14d60:	ldrd	r0, [r4, #160]	; 0xa0
   14d64:	stm	r2, {r0, r1, r4}
   14d68:	mov	r1, r7
   14d6c:	ldr	r0, [r6, #56]	; 0x38
   14d70:	bl	161b4 <__assert_fail@plt+0x4cf4>
   14d74:	cmp	r0, r7
   14d78:	beq	14da0 <__assert_fail@plt+0x38e0>
   14d7c:	mov	r6, r0
   14d80:	mov	r0, r7
   14d84:	bl	12e14 <__assert_fail@plt+0x1954>
   14d88:	cmp	r6, #0
   14d8c:	beq	14dcc <__assert_fail@plt+0x390c>
   14d90:	ldr	r0, [r6, #16]
   14d94:	mov	r1, #2
   14d98:	strh	r1, [r4, #56]	; 0x38
   14d9c:	str	r0, [r4]
   14da0:	mov	r5, #1
   14da4:	mov	r0, r5
   14da8:	pop	{r4, r5, r6, r7, fp, pc}
   14dac:	ldr	r0, [r6, #56]	; 0x38
   14db0:	add	r1, r4, #64	; 0x40
   14db4:	bl	19f5c <__assert_fail@plt+0x8a9c>
   14db8:	cmp	r0, #0
   14dbc:	mov	r5, #1
   14dc0:	movne	r0, #2
   14dc4:	strhne	r0, [r4, #56]	; 0x38
   14dc8:	strne	r4, [r4]
   14dcc:	mov	r0, r5
   14dd0:	pop	{r4, r5, r6, r7, fp, pc}
   14dd4:	cmp	r2, #5
   14dd8:	movcc	r0, #0
   14ddc:	strhcc	r2, [r1, #60]	; 0x3c
   14de0:	bxcc	lr
   14de4:	push	{fp, lr}
   14de8:	mov	fp, sp
   14dec:	bl	1137c <__errno_location@plt>
   14df0:	mov	r1, #22
   14df4:	str	r1, [r0]
   14df8:	mov	r0, #1
   14dfc:	pop	{fp, pc}
   14e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e04:	add	fp, sp, #28
   14e08:	sub	sp, sp, #4
   14e0c:	mov	r9, r0
   14e10:	orr	r0, r1, #4096	; 0x1000
   14e14:	cmp	r0, #4096	; 0x1000
   14e18:	bne	14e58 <__assert_fail@plt+0x3998>
   14e1c:	ldr	r8, [r9]
   14e20:	mov	r7, r1
   14e24:	bl	1137c <__errno_location@plt>
   14e28:	mov	r5, #0
   14e2c:	mov	sl, r0
   14e30:	str	r5, [r0]
   14e34:	ldrb	r0, [r9, #49]	; 0x31
   14e38:	tst	r0, #32
   14e3c:	bne	14e68 <__assert_fail@plt+0x39a8>
   14e40:	ldrh	r0, [r8, #56]	; 0x38
   14e44:	cmp	r0, #1
   14e48:	beq	14e74 <__assert_fail@plt+0x39b4>
   14e4c:	cmp	r0, #9
   14e50:	ldreq	r5, [r8, #8]
   14e54:	b	14e68 <__assert_fail@plt+0x39a8>
   14e58:	bl	1137c <__errno_location@plt>
   14e5c:	mov	r1, #22
   14e60:	mov	r5, #0
   14e64:	str	r1, [r0]
   14e68:	mov	r0, r5
   14e6c:	sub	sp, fp, #28
   14e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e74:	ldr	r6, [r9, #4]
   14e78:	cmp	r6, #0
   14e7c:	beq	14eac <__assert_fail@plt+0x39ec>
   14e80:	ldr	r4, [r6, #8]
   14e84:	ldr	r1, [r6, #12]
   14e88:	cmp	r1, #0
   14e8c:	beq	14e98 <__assert_fail@plt+0x39d8>
   14e90:	mov	r0, r1
   14e94:	bl	1149c <closedir@plt>
   14e98:	mov	r0, r6
   14e9c:	bl	12e14 <__assert_fail@plt+0x1954>
   14ea0:	cmp	r4, #0
   14ea4:	mov	r6, r4
   14ea8:	bne	14e80 <__assert_fail@plt+0x39c0>
   14eac:	cmp	r7, #4096	; 0x1000
   14eb0:	mov	r4, #1
   14eb4:	ldreq	r0, [r9, #48]	; 0x30
   14eb8:	moveq	r4, #2
   14ebc:	orreq	r0, r0, #4096	; 0x1000
   14ec0:	streq	r0, [r9, #48]	; 0x30
   14ec4:	ldr	r0, [r8, #48]	; 0x30
   14ec8:	cmp	r0, #0
   14ecc:	bne	14f18 <__assert_fail@plt+0x3a58>
   14ed0:	ldr	r0, [r8, #24]
   14ed4:	ldrb	r0, [r0]
   14ed8:	cmp	r0, #47	; 0x2f
   14edc:	beq	14f18 <__assert_fail@plt+0x3a58>
   14ee0:	ldr	r0, [r9, #48]	; 0x30
   14ee4:	tst	r0, #4
   14ee8:	bne	14f18 <__assert_fail@plt+0x3a58>
   14eec:	mov	r1, #32768	; 0x8000
   14ef0:	tst	r0, #512	; 0x200
   14ef4:	and	r1, r1, r0, lsl #11
   14ef8:	orr	r1, r1, #18688	; 0x4900
   14efc:	orr	r2, r1, #524288	; 0x80000
   14f00:	bne	14f30 <__assert_fail@plt+0x3a70>
   14f04:	movw	r0, #46604	; 0xb60c
   14f08:	mov	r1, r2
   14f0c:	movt	r0, #1
   14f10:	bl	1a2b0 <__assert_fail@plt+0x8df0>
   14f14:	b	14f40 <__assert_fail@plt+0x3a80>
   14f18:	mov	r0, r9
   14f1c:	mov	r1, r4
   14f20:	bl	141d8 <__assert_fail@plt+0x2d18>
   14f24:	mov	r5, r0
   14f28:	str	r0, [r9, #4]
   14f2c:	b	14e68 <__assert_fail@plt+0x39a8>
   14f30:	ldr	r0, [r9, #32]
   14f34:	movw	r1, #46604	; 0xb60c
   14f38:	movt	r1, #1
   14f3c:	bl	165c4 <__assert_fail@plt+0x5104>
   14f40:	mov	r8, r0
   14f44:	cmn	r0, #1
   14f48:	ble	14f8c <__assert_fail@plt+0x3acc>
   14f4c:	mov	r0, r9
   14f50:	mov	r1, r4
   14f54:	bl	141d8 <__assert_fail@plt+0x2d18>
   14f58:	str	r0, [r9, #4]
   14f5c:	ldrb	r0, [r9, #49]	; 0x31
   14f60:	tst	r0, #2
   14f64:	bne	14f98 <__assert_fail@plt+0x3ad8>
   14f68:	mov	r0, r8
   14f6c:	bl	11430 <fchdir@plt>
   14f70:	cmp	r0, #0
   14f74:	beq	14fc8 <__assert_fail@plt+0x3b08>
   14f78:	ldr	r4, [sl]
   14f7c:	mov	r0, r8
   14f80:	bl	11484 <close@plt>
   14f84:	str	r4, [sl]
   14f88:	b	14e68 <__assert_fail@plt+0x39a8>
   14f8c:	mov	r5, #0
   14f90:	str	r5, [r9, #4]
   14f94:	b	14e68 <__assert_fail@plt+0x39a8>
   14f98:	ldr	r1, [r9, #32]
   14f9c:	cmp	r1, r8
   14fa0:	bne	14fac <__assert_fail@plt+0x3aec>
   14fa4:	cmn	r1, #100	; 0x64
   14fa8:	bne	14fd8 <__assert_fail@plt+0x3b18>
   14fac:	add	r0, r9, #60	; 0x3c
   14fb0:	bl	164c4 <__assert_fail@plt+0x5004>
   14fb4:	cmp	r0, #0
   14fb8:	blt	14fc0 <__assert_fail@plt+0x3b00>
   14fbc:	bl	11484 <close@plt>
   14fc0:	str	r8, [r9, #32]
   14fc4:	b	14fd0 <__assert_fail@plt+0x3b10>
   14fc8:	mov	r0, r8
   14fcc:	bl	11484 <close@plt>
   14fd0:	ldr	r5, [r9, #4]
   14fd4:	b	14e68 <__assert_fail@plt+0x39a8>
   14fd8:	bl	11478 <abort@plt>
   14fdc:	push	{fp, lr}
   14fe0:	mov	fp, sp
   14fe4:	mov	r2, r1
   14fe8:	ldrd	r0, [r0, #8]
   14fec:	mov	r3, #0
   14ff0:	bl	1a5e0 <__assert_fail@plt+0x9120>
   14ff4:	mov	r0, r2
   14ff8:	pop	{fp, pc}
   14ffc:	push	{r4, r5, fp, lr}
   15000:	add	fp, sp, #8
   15004:	ldrd	r2, [r1, #8]
   15008:	ldrd	r4, [r0, #8]
   1500c:	eor	r3, r5, r3
   15010:	eor	r2, r4, r2
   15014:	orrs	r2, r2, r3
   15018:	mov	r2, #0
   1501c:	bne	1503c <__assert_fail@plt+0x3b7c>
   15020:	ldrd	r2, [r1]
   15024:	ldrd	r0, [r0]
   15028:	eor	r1, r1, r3
   1502c:	eor	r0, r0, r2
   15030:	orr	r0, r0, r1
   15034:	clz	r0, r0
   15038:	lsr	r2, r0, #5
   1503c:	mov	r0, r2
   15040:	pop	{r4, r5, fp, pc}
   15044:	push	{r4, r5, fp, lr}
   15048:	add	fp, sp, #8
   1504c:	ldr	r0, [r0]
   15050:	ldrd	r2, [r0, #160]	; 0xa0
   15054:	ldr	r0, [r1]
   15058:	ldrd	r4, [r0, #160]	; 0xa0
   1505c:	mov	r0, #0
   15060:	subs	r1, r4, r2
   15064:	sbcs	r1, r5, r3
   15068:	movwcc	r0, #1
   1506c:	subs	r1, r2, r4
   15070:	sbcs	r1, r3, r5
   15074:	subcc	r0, r0, #1
   15078:	pop	{r4, r5, fp, pc}
   1507c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15080:	add	fp, sp, #24
   15084:	sub	sp, sp, #96	; 0x60
   15088:	ldr	r7, [r0, #44]	; 0x2c
   1508c:	mov	r4, r0
   15090:	mov	r5, #0
   15094:	ldrb	r0, [r7, #49]	; 0x31
   15098:	tst	r0, #2
   1509c:	beq	15198 <__assert_fail@plt+0x3cd8>
   150a0:	ldr	r6, [r7, #52]	; 0x34
   150a4:	mov	r9, r1
   150a8:	cmp	r6, #0
   150ac:	bne	150ec <__assert_fail@plt+0x3c2c>
   150b0:	movw	r0, #11796	; 0x2e14
   150b4:	movw	r2, #20900	; 0x51a4
   150b8:	movw	r3, #20932	; 0x51c4
   150bc:	mov	r1, #0
   150c0:	mov	r8, #0
   150c4:	movt	r0, #1
   150c8:	movt	r2, #1
   150cc:	movt	r3, #1
   150d0:	str	r0, [sp]
   150d4:	mov	r0, #13
   150d8:	bl	15670 <__assert_fail@plt+0x41b0>
   150dc:	mov	r6, r0
   150e0:	cmp	r0, #0
   150e4:	str	r0, [r7, #52]	; 0x34
   150e8:	beq	15124 <__assert_fail@plt+0x3c64>
   150ec:	ldrd	r0, [r4, #64]	; 0x40
   150f0:	str	r1, [sp, #12]
   150f4:	str	r0, [sp, #8]
   150f8:	add	r1, sp, #8
   150fc:	mov	r0, r6
   15100:	bl	153c0 <__assert_fail@plt+0x3f00>
   15104:	cmp	r0, #0
   15108:	beq	15114 <__assert_fail@plt+0x3c54>
   1510c:	ldr	r5, [r0, #8]
   15110:	b	15198 <__assert_fail@plt+0x3cd8>
   15114:	mov	r8, #1
   15118:	cmp	r9, #0
   1511c:	bge	15130 <__assert_fail@plt+0x3c70>
   15120:	b	15198 <__assert_fail@plt+0x3cd8>
   15124:	mov	r6, #0
   15128:	cmp	r9, #0
   1512c:	blt	15198 <__assert_fail@plt+0x3cd8>
   15130:	add	r1, sp, #8
   15134:	mov	r0, r9
   15138:	bl	1119c <fstatfs64@plt>
   1513c:	cmp	r0, #0
   15140:	bne	15198 <__assert_fail@plt+0x3cd8>
   15144:	cmp	r8, #0
   15148:	beq	15194 <__assert_fail@plt+0x3cd4>
   1514c:	mov	r0, #16
   15150:	bl	19e38 <__assert_fail@plt+0x8978>
   15154:	cmp	r0, #0
   15158:	beq	15194 <__assert_fail@plt+0x3cd4>
   1515c:	mov	r5, r0
   15160:	ldrd	r0, [r4, #64]	; 0x40
   15164:	ldr	r2, [sp, #8]
   15168:	stm	r5, {r0, r1, r2}
   1516c:	mov	r0, r6
   15170:	mov	r1, r5
   15174:	bl	161b4 <__assert_fail@plt+0x4cf4>
   15178:	cmp	r0, #0
   1517c:	beq	1518c <__assert_fail@plt+0x3ccc>
   15180:	cmp	r0, r5
   15184:	beq	15194 <__assert_fail@plt+0x3cd4>
   15188:	bl	11478 <abort@plt>
   1518c:	mov	r0, r5
   15190:	bl	12e14 <__assert_fail@plt+0x1954>
   15194:	ldr	r5, [sp, #8]
   15198:	mov	r0, r5
   1519c:	sub	sp, fp, #24
   151a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151a4:	push	{fp, lr}
   151a8:	mov	fp, sp
   151ac:	mov	r2, r1
   151b0:	ldrd	r0, [r0]
   151b4:	mov	r3, #0
   151b8:	bl	1a5e0 <__assert_fail@plt+0x9120>
   151bc:	mov	r0, r2
   151c0:	pop	{fp, pc}
   151c4:	ldrd	r2, [r1]
   151c8:	ldrd	r0, [r0]
   151cc:	eor	r1, r1, r3
   151d0:	eor	r0, r0, r2
   151d4:	orr	r0, r0, r1
   151d8:	clz	r0, r0
   151dc:	lsr	r0, r0, #5
   151e0:	bx	lr
   151e4:	andeq	r0, r0, r0
   151e8:	ldr	r0, [r0, #8]
   151ec:	bx	lr
   151f0:	ldr	r0, [r0, #12]
   151f4:	bx	lr
   151f8:	ldr	r0, [r0, #16]
   151fc:	bx	lr
   15200:	ldm	r0, {r2, ip}
   15204:	mov	r0, #0
   15208:	cmp	r2, ip
   1520c:	bxcs	lr
   15210:	mov	r0, #0
   15214:	ldr	r1, [r2]
   15218:	cmp	r1, #0
   1521c:	beq	15240 <__assert_fail@plt+0x3d80>
   15220:	mov	r3, #0
   15224:	mov	r1, r2
   15228:	ldr	r1, [r1, #4]
   1522c:	add	r3, r3, #1
   15230:	cmp	r1, #0
   15234:	bne	15228 <__assert_fail@plt+0x3d68>
   15238:	cmp	r3, r0
   1523c:	movhi	r0, r3
   15240:	add	r2, r2, #8
   15244:	cmp	r2, ip
   15248:	bcc	15214 <__assert_fail@plt+0x3d54>
   1524c:	bx	lr
   15250:	push	{fp, lr}
   15254:	mov	fp, sp
   15258:	ldm	r0, {r3, ip}
   1525c:	mov	lr, #0
   15260:	mov	r1, #0
   15264:	cmp	r3, ip
   15268:	bcs	152a4 <__assert_fail@plt+0x3de4>
   1526c:	mov	r1, #0
   15270:	mov	lr, #0
   15274:	ldr	r2, [r3]
   15278:	cmp	r2, #0
   1527c:	beq	15298 <__assert_fail@plt+0x3dd8>
   15280:	mov	r2, r3
   15284:	ldr	r2, [r2, #4]
   15288:	add	r1, r1, #1
   1528c:	cmp	r2, #0
   15290:	bne	15284 <__assert_fail@plt+0x3dc4>
   15294:	add	lr, lr, #1
   15298:	add	r3, r3, #8
   1529c:	cmp	r3, ip
   152a0:	bcc	15274 <__assert_fail@plt+0x3db4>
   152a4:	ldr	r2, [r0, #12]
   152a8:	cmp	lr, r2
   152ac:	bne	152c4 <__assert_fail@plt+0x3e04>
   152b0:	ldr	r2, [r0, #16]
   152b4:	mov	r0, #1
   152b8:	cmp	r1, r2
   152bc:	movne	r0, #0
   152c0:	pop	{fp, pc}
   152c4:	mov	r0, #0
   152c8:	pop	{fp, pc}
   152cc:	nop	{0}
   152d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152d4:	add	fp, sp, #24
   152d8:	sub	sp, sp, #8
   152dc:	ldr	r6, [r0]
   152e0:	ldmib	r0, {r2, r7, r8}
   152e4:	ldr	r3, [r0, #16]
   152e8:	mov	r4, r1
   152ec:	mov	r5, #0
   152f0:	cmp	r6, r2
   152f4:	bcs	15334 <__assert_fail@plt+0x3e74>
   152f8:	mov	r5, #0
   152fc:	ldr	r0, [r6]
   15300:	cmp	r0, #0
   15304:	beq	15328 <__assert_fail@plt+0x3e68>
   15308:	mov	r0, #0
   1530c:	mov	r1, r6
   15310:	ldr	r1, [r1, #4]
   15314:	add	r0, r0, #1
   15318:	cmp	r1, #0
   1531c:	bne	15310 <__assert_fail@plt+0x3e50>
   15320:	cmp	r0, r5
   15324:	movhi	r5, r0
   15328:	add	r6, r6, #8
   1532c:	cmp	r6, r2
   15330:	bcc	152fc <__assert_fail@plt+0x3e3c>
   15334:	movw	r2, #46656	; 0xb640
   15338:	mov	r0, r4
   1533c:	mov	r1, #1
   15340:	movt	r2, #1
   15344:	bl	113b8 <__fprintf_chk@plt>
   15348:	movw	r2, #46680	; 0xb658
   1534c:	mov	r0, r4
   15350:	mov	r1, #1
   15354:	mov	r3, r7
   15358:	movt	r2, #1
   1535c:	bl	113b8 <__fprintf_chk@plt>
   15360:	vldr	d16, [pc, #80]	; 153b8 <__assert_fail@plt+0x3ef8>
   15364:	vmov	s0, r8
   15368:	movw	r2, #46704	; 0xb670
   1536c:	mov	r0, r4
   15370:	mov	r1, #1
   15374:	mov	r3, r8
   15378:	vcvt.f64.u32	d17, s0
   1537c:	vmov	s0, r7
   15380:	movt	r2, #1
   15384:	vcvt.f64.u32	d18, s0
   15388:	vmul.f64	d16, d17, d16
   1538c:	vdiv.f64	d16, d16, d18
   15390:	vstr	d16, [sp]
   15394:	bl	113b8 <__fprintf_chk@plt>
   15398:	movw	r2, #46737	; 0xb691
   1539c:	mov	r0, r4
   153a0:	mov	r1, #1
   153a4:	mov	r3, r5
   153a8:	movt	r2, #1
   153ac:	sub	sp, fp, #24
   153b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153b4:	b	113b8 <__fprintf_chk@plt>
   153b8:	andeq	r0, r0, r0
   153bc:	subsmi	r0, r9, r0
   153c0:	push	{r4, r5, r6, r7, fp, lr}
   153c4:	add	fp, sp, #16
   153c8:	mov	r4, r1
   153cc:	ldr	r1, [r0, #8]
   153d0:	ldr	r2, [r0, #24]
   153d4:	mov	r5, r0
   153d8:	mov	r0, r4
   153dc:	blx	r2
   153e0:	ldr	r1, [r5, #8]
   153e4:	cmp	r0, r1
   153e8:	bcs	15454 <__assert_fail@plt+0x3f94>
   153ec:	ldr	r7, [r5]
   153f0:	mov	r6, #0
   153f4:	ldr	r1, [r7, r0, lsl #3]!
   153f8:	cmp	r1, #0
   153fc:	cmpne	r7, #0
   15400:	bne	15410 <__assert_fail@plt+0x3f50>
   15404:	mov	r0, r6
   15408:	pop	{r4, r5, r6, r7, fp, pc}
   1540c:	ldr	r1, [r7]
   15410:	cmp	r1, r4
   15414:	beq	1543c <__assert_fail@plt+0x3f7c>
   15418:	ldr	r2, [r5, #28]
   1541c:	mov	r0, r4
   15420:	blx	r2
   15424:	cmp	r0, #0
   15428:	bne	15448 <__assert_fail@plt+0x3f88>
   1542c:	ldr	r7, [r7, #4]
   15430:	cmp	r7, #0
   15434:	bne	1540c <__assert_fail@plt+0x3f4c>
   15438:	b	15404 <__assert_fail@plt+0x3f44>
   1543c:	mov	r6, r4
   15440:	mov	r0, r6
   15444:	pop	{r4, r5, r6, r7, fp, pc}
   15448:	ldr	r6, [r7]
   1544c:	mov	r0, r6
   15450:	pop	{r4, r5, r6, r7, fp, pc}
   15454:	bl	11478 <abort@plt>
   15458:	ldr	r1, [r0, #16]
   1545c:	cmp	r1, #0
   15460:	moveq	r0, #0
   15464:	bxeq	lr
   15468:	ldm	r0, {r1, r2}
   1546c:	cmp	r1, r2
   15470:	bcs	15488 <__assert_fail@plt+0x3fc8>
   15474:	ldr	r0, [r1], #8
   15478:	cmp	r0, #0
   1547c:	bxne	lr
   15480:	cmp	r1, r2
   15484:	bcc	15474 <__assert_fail@plt+0x3fb4>
   15488:	push	{fp, lr}
   1548c:	mov	fp, sp
   15490:	bl	11478 <abort@plt>
   15494:	push	{r4, r5, fp, lr}
   15498:	add	fp, sp, #8
   1549c:	mov	r5, r1
   154a0:	ldr	r1, [r0, #8]
   154a4:	ldr	r2, [r0, #24]
   154a8:	mov	r4, r0
   154ac:	mov	r0, r5
   154b0:	blx	r2
   154b4:	ldr	r1, [r4, #8]
   154b8:	cmp	r0, r1
   154bc:	bcs	15518 <__assert_fail@plt+0x4058>
   154c0:	ldr	r1, [r4]
   154c4:	add	r2, r1, r0, lsl #3
   154c8:	ldr	r3, [r2]
   154cc:	ldr	r2, [r2, #4]
   154d0:	cmp	r3, r5
   154d4:	beq	154e4 <__assert_fail@plt+0x4024>
   154d8:	cmp	r2, #0
   154dc:	bne	154c8 <__assert_fail@plt+0x4008>
   154e0:	b	154f0 <__assert_fail@plt+0x4030>
   154e4:	cmp	r2, #0
   154e8:	ldrne	r0, [r2]
   154ec:	popne	{r4, r5, fp, pc}
   154f0:	ldr	r2, [r4, #4]
   154f4:	add	r0, r1, r0, lsl #3
   154f8:	add	r1, r0, #8
   154fc:	cmp	r1, r2
   15500:	movcs	r0, #0
   15504:	popcs	{r4, r5, fp, pc}
   15508:	ldr	r0, [r1], #8
   1550c:	cmp	r0, #0
   15510:	popne	{r4, r5, fp, pc}
   15514:	b	154fc <__assert_fail@plt+0x403c>
   15518:	bl	11478 <abort@plt>
   1551c:	push	{r4, r5, fp, lr}
   15520:	add	fp, sp, #8
   15524:	ldm	r0, {r5, lr}
   15528:	mov	ip, r0
   1552c:	mov	r0, #0
   15530:	cmp	r5, lr
   15534:	bcs	15580 <__assert_fail@plt+0x40c0>
   15538:	mov	r0, #0
   1553c:	ldr	r3, [r5]
   15540:	cmp	r3, #0
   15544:	cmpne	r5, #0
   15548:	beq	15574 <__assert_fail@plt+0x40b4>
   1554c:	mov	r3, r5
   15550:	cmp	r0, r2
   15554:	popcs	{r4, r5, fp, pc}
   15558:	ldr	r4, [r3]
   1555c:	str	r4, [r1, r0, lsl #2]
   15560:	add	r0, r0, #1
   15564:	ldr	r3, [r3, #4]
   15568:	cmp	r3, #0
   1556c:	bne	15550 <__assert_fail@plt+0x4090>
   15570:	ldr	lr, [ip, #4]
   15574:	add	r5, r5, #8
   15578:	cmp	r5, lr
   1557c:	bcc	1553c <__assert_fail@plt+0x407c>
   15580:	pop	{r4, r5, fp, pc}
   15584:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15588:	add	fp, sp, #24
   1558c:	mov	r5, r1
   15590:	ldr	r4, [r0]
   15594:	ldr	r1, [r0, #4]
   15598:	mov	r6, #0
   1559c:	cmp	r4, r1
   155a0:	bcs	15614 <__assert_fail@plt+0x4154>
   155a4:	mov	r9, r2
   155a8:	mov	r8, r0
   155ac:	mov	r6, #0
   155b0:	b	155f8 <__assert_fail@plt+0x4138>
   155b4:	mov	r1, r9
   155b8:	blx	r5
   155bc:	cmp	r0, #0
   155c0:	beq	15614 <__assert_fail@plt+0x4154>
   155c4:	mov	r7, r4
   155c8:	ldr	r7, [r7, #4]
   155cc:	add	r6, r6, #1
   155d0:	cmp	r7, #0
   155d4:	beq	155f0 <__assert_fail@plt+0x4130>
   155d8:	ldr	r0, [r7]
   155dc:	mov	r1, r9
   155e0:	blx	r5
   155e4:	cmp	r0, #0
   155e8:	bne	155c8 <__assert_fail@plt+0x4108>
   155ec:	b	15614 <__assert_fail@plt+0x4154>
   155f0:	ldr	r1, [r8, #4]
   155f4:	b	15608 <__assert_fail@plt+0x4148>
   155f8:	ldr	r0, [r4]
   155fc:	cmp	r0, #0
   15600:	cmpne	r4, #0
   15604:	bne	155b4 <__assert_fail@plt+0x40f4>
   15608:	add	r4, r4, #8
   1560c:	cmp	r4, r1
   15610:	bcc	155f8 <__assert_fail@plt+0x4138>
   15614:	mov	r0, r6
   15618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1561c:	ldrb	r2, [r0]
   15620:	cmp	r2, #0
   15624:	moveq	r0, #0
   15628:	bxeq	lr
   1562c:	add	r3, r0, #1
   15630:	mov	r0, #0
   15634:	rsb	r0, r0, r0, lsl #5
   15638:	uxtab	r0, r0, r2
   1563c:	udiv	r2, r0, r1
   15640:	mls	r0, r2, r1, r0
   15644:	ldrb	r2, [r3], #1
   15648:	cmp	r2, #0
   1564c:	bne	15634 <__assert_fail@plt+0x4174>
   15650:	bx	lr
   15654:	movw	r1, #46768	; 0xb6b0
   15658:	movt	r1, #1
   1565c:	vld1.32	{d16-d17}, [r1]!
   15660:	ldr	r1, [r1]
   15664:	vst1.32	{d16-d17}, [r0]!
   15668:	str	r1, [r0]
   1566c:	bx	lr
   15670:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15674:	add	fp, sp, #24
   15678:	movw	r9, #22680	; 0x5898
   1567c:	movw	r5, #22660	; 0x5884
   15680:	cmp	r3, #0
   15684:	mov	r6, r0
   15688:	mov	r0, #40	; 0x28
   1568c:	mov	r7, r1
   15690:	movt	r9, #1
   15694:	movt	r5, #1
   15698:	movne	r9, r3
   1569c:	cmp	r2, #0
   156a0:	movne	r5, r2
   156a4:	bl	19e38 <__assert_fail@plt+0x8978>
   156a8:	mov	r8, #0
   156ac:	cmp	r0, #0
   156b0:	beq	1586c <__assert_fail@plt+0x43ac>
   156b4:	mov	r4, r0
   156b8:	movw	r0, #46768	; 0xb6b0
   156bc:	cmp	r7, #0
   156c0:	movt	r0, #1
   156c4:	moveq	r7, r0
   156c8:	cmp	r7, r0
   156cc:	str	r7, [r4, #20]
   156d0:	beq	1574c <__assert_fail@plt+0x428c>
   156d4:	vldr	s2, [pc, #408]	; 15874 <__assert_fail@plt+0x43b4>
   156d8:	vldr	s0, [r7, #8]
   156dc:	vcmpe.f32	s0, s2
   156e0:	vmrs	APSR_nzcv, fpscr
   156e4:	ble	157f8 <__assert_fail@plt+0x4338>
   156e8:	vldr	s4, [pc, #392]	; 15878 <__assert_fail@plt+0x43b8>
   156ec:	vcmpe.f32	s0, s4
   156f0:	vmrs	APSR_nzcv, fpscr
   156f4:	bpl	157f8 <__assert_fail@plt+0x4338>
   156f8:	vldr	s4, [pc, #380]	; 1587c <__assert_fail@plt+0x43bc>
   156fc:	vldr	s6, [r7, #12]
   15700:	vcmpe.f32	s6, s4
   15704:	vmrs	APSR_nzcv, fpscr
   15708:	ble	157f8 <__assert_fail@plt+0x4338>
   1570c:	vldr	s4, [r7]
   15710:	vcmpe.f32	s4, #0.0
   15714:	vmrs	APSR_nzcv, fpscr
   15718:	blt	157f8 <__assert_fail@plt+0x4338>
   1571c:	vadd.f32	s2, s4, s2
   15720:	vcmpe.f32	s2, s0
   15724:	vmrs	APSR_nzcv, fpscr
   15728:	bpl	157f8 <__assert_fail@plt+0x4338>
   1572c:	vldr	s0, [r7, #4]
   15730:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15734:	vcmpe.f32	s0, s4
   15738:	vmrs	APSR_nzcv, fpscr
   1573c:	bhi	157f8 <__assert_fail@plt+0x4338>
   15740:	vcmpe.f32	s2, s0
   15744:	vmrs	APSR_nzcv, fpscr
   15748:	bpl	157f8 <__assert_fail@plt+0x4338>
   1574c:	ldrb	r0, [r7, #16]
   15750:	cmp	r0, #0
   15754:	bne	15780 <__assert_fail@plt+0x42c0>
   15758:	vldr	s0, [r7, #8]
   1575c:	vldr	s4, [pc, #284]	; 15880 <__assert_fail@plt+0x43c0>
   15760:	vmov	s2, r6
   15764:	vcvt.f32.u32	s2, s2
   15768:	vdiv.f32	s2, s2, s0
   1576c:	vcmpe.f32	s2, s4
   15770:	vcvt.u32.f32	s0, s2
   15774:	vmrs	APSR_nzcv, fpscr
   15778:	bge	15808 <__assert_fail@plt+0x4348>
   1577c:	vmov	r6, s0
   15780:	cmp	r6, #10
   15784:	movls	r6, #10
   15788:	orr	r0, r6, #1
   1578c:	cmn	r0, #1
   15790:	beq	15808 <__assert_fail@plt+0x4348>
   15794:	ldr	r6, [fp, #8]
   15798:	mov	r1, #3
   1579c:	cmp	r0, #10
   157a0:	bcc	157d8 <__assert_fail@plt+0x4318>
   157a4:	mov	r1, #3
   157a8:	mov	r3, #9
   157ac:	mov	r2, #12
   157b0:	udiv	r7, r0, r1
   157b4:	mls	r7, r7, r1, r0
   157b8:	cmp	r7, #0
   157bc:	beq	157d8 <__assert_fail@plt+0x4318>
   157c0:	add	r3, r3, r2
   157c4:	add	r2, r2, #8
   157c8:	add	r1, r1, #2
   157cc:	add	r3, r3, #4
   157d0:	cmp	r3, r0
   157d4:	bcc	157b0 <__assert_fail@plt+0x42f0>
   157d8:	udiv	r2, r0, r1
   157dc:	mls	r1, r2, r1, r0
   157e0:	cmp	r1, #0
   157e4:	bne	15800 <__assert_fail@plt+0x4340>
   157e8:	add	r0, r0, #2
   157ec:	cmn	r0, #1
   157f0:	bne	15798 <__assert_fail@plt+0x42d8>
   157f4:	b	15808 <__assert_fail@plt+0x4348>
   157f8:	str	r0, [r4, #20]
   157fc:	b	15810 <__assert_fail@plt+0x4350>
   15800:	cmp	r0, #536870912	; 0x20000000
   15804:	bcc	15820 <__assert_fail@plt+0x4360>
   15808:	mov	r0, #0
   1580c:	str	r0, [r4, #8]
   15810:	mov	r0, r4
   15814:	bl	12e14 <__assert_fail@plt+0x1954>
   15818:	mov	r0, r8
   1581c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15820:	cmp	r0, #0
   15824:	str	r0, [r4, #8]
   15828:	beq	15810 <__assert_fail@plt+0x4350>
   1582c:	mov	r1, #8
   15830:	bl	19de4 <__assert_fail@plt+0x8924>
   15834:	cmp	r0, #0
   15838:	str	r0, [r4]
   1583c:	beq	15810 <__assert_fail@plt+0x4350>
   15840:	mov	r1, #0
   15844:	mov	r8, r4
   15848:	str	r1, [r4, #12]
   1584c:	str	r1, [r4, #16]
   15850:	str	r5, [r4, #24]
   15854:	str	r9, [r4, #28]
   15858:	str	r6, [r4, #32]
   1585c:	str	r1, [r4, #36]	; 0x24
   15860:	ldr	r1, [r4, #8]
   15864:	add	r0, r0, r1, lsl #3
   15868:	str	r0, [r4, #4]
   1586c:	mov	r0, r8
   15870:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15874:	stclcc	12, cr12, [ip, #820]	; 0x334
   15878:	svccc	0x00666666
   1587c:	svccc	0x008ccccd
   15880:	svcmi	0x00800000
   15884:	ror	r2, r0, #3
   15888:	udiv	r2, r2, r1
   1588c:	mul	r1, r2, r1
   15890:	rsb	r0, r1, r0, ror #3
   15894:	bx	lr
   15898:	sub	r0, r0, r1
   1589c:	clz	r0, r0
   158a0:	lsr	r0, r0, #5
   158a4:	bx	lr
   158a8:	push	{r4, r5, r6, r7, fp, lr}
   158ac:	add	fp, sp, #16
   158b0:	mov	r4, r0
   158b4:	ldr	r5, [r0]
   158b8:	ldr	r0, [r0, #4]
   158bc:	cmp	r5, r0
   158c0:	bcs	15958 <__assert_fail@plt+0x4498>
   158c4:	mov	r6, #0
   158c8:	ldr	r1, [r5]
   158cc:	cmp	r1, #0
   158d0:	beq	1594c <__assert_fail@plt+0x448c>
   158d4:	ldr	r1, [r4, #32]
   158d8:	ldr	r7, [r5, #4]
   158dc:	cmp	r1, #0
   158e0:	mov	r0, r1
   158e4:	movwne	r0, #1
   158e8:	cmp	r7, #0
   158ec:	beq	15930 <__assert_fail@plt+0x4470>
   158f0:	tst	r0, #1
   158f4:	beq	15904 <__assert_fail@plt+0x4444>
   158f8:	ldr	r0, [r7]
   158fc:	blx	r1
   15900:	ldr	r1, [r4, #32]
   15904:	str	r6, [r7]
   15908:	cmp	r1, #0
   1590c:	ldr	r0, [r4, #36]	; 0x24
   15910:	ldr	r2, [r7, #4]
   15914:	str	r0, [r7, #4]
   15918:	mov	r0, r1
   1591c:	str	r7, [r4, #36]	; 0x24
   15920:	mov	r7, r2
   15924:	movwne	r0, #1
   15928:	cmp	r2, #0
   1592c:	bne	158f0 <__assert_fail@plt+0x4430>
   15930:	cmp	r0, #0
   15934:	beq	15940 <__assert_fail@plt+0x4480>
   15938:	ldr	r0, [r5]
   1593c:	blx	r1
   15940:	str	r6, [r5]
   15944:	str	r6, [r5, #4]
   15948:	ldr	r0, [r4, #4]
   1594c:	add	r5, r5, #8
   15950:	cmp	r5, r0
   15954:	bcc	158c8 <__assert_fail@plt+0x4408>
   15958:	mov	r0, #0
   1595c:	str	r0, [r4, #12]
   15960:	str	r0, [r4, #16]
   15964:	pop	{r4, r5, r6, r7, fp, pc}
   15968:	push	{r4, r5, r6, sl, fp, lr}
   1596c:	add	fp, sp, #16
   15970:	mov	r4, r0
   15974:	ldr	r0, [r0, #32]
   15978:	cmp	r0, #0
   1597c:	ldrne	r0, [r4, #16]
   15980:	cmpne	r0, #0
   15984:	beq	159ec <__assert_fail@plt+0x452c>
   15988:	ldr	r5, [r4]
   1598c:	ldr	r1, [r4, #4]
   15990:	cmp	r5, r1
   15994:	bcc	159a8 <__assert_fail@plt+0x44e8>
   15998:	b	159ec <__assert_fail@plt+0x452c>
   1599c:	add	r5, r5, #8
   159a0:	cmp	r5, r1
   159a4:	bcs	159ec <__assert_fail@plt+0x452c>
   159a8:	ldr	r0, [r5]
   159ac:	cmp	r0, #0
   159b0:	cmpne	r5, #0
   159b4:	beq	1599c <__assert_fail@plt+0x44dc>
   159b8:	ldr	r1, [r4, #32]
   159bc:	blx	r1
   159c0:	ldr	r6, [r5, #4]
   159c4:	cmp	r6, #0
   159c8:	beq	159e4 <__assert_fail@plt+0x4524>
   159cc:	ldr	r1, [r4, #32]
   159d0:	ldr	r0, [r6]
   159d4:	blx	r1
   159d8:	ldr	r6, [r6, #4]
   159dc:	cmp	r6, #0
   159e0:	bne	159cc <__assert_fail@plt+0x450c>
   159e4:	ldr	r1, [r4, #4]
   159e8:	b	1599c <__assert_fail@plt+0x44dc>
   159ec:	ldr	r5, [r4]
   159f0:	ldr	r1, [r4, #4]
   159f4:	cmp	r5, r1
   159f8:	bcc	15a0c <__assert_fail@plt+0x454c>
   159fc:	b	15a34 <__assert_fail@plt+0x4574>
   15a00:	add	r5, r5, #8
   15a04:	cmp	r5, r1
   15a08:	bcs	15a34 <__assert_fail@plt+0x4574>
   15a0c:	ldr	r0, [r5, #4]
   15a10:	cmp	r0, #0
   15a14:	beq	15a00 <__assert_fail@plt+0x4540>
   15a18:	ldr	r6, [r0, #4]
   15a1c:	bl	12e14 <__assert_fail@plt+0x1954>
   15a20:	cmp	r6, #0
   15a24:	mov	r0, r6
   15a28:	bne	15a18 <__assert_fail@plt+0x4558>
   15a2c:	ldr	r1, [r4, #4]
   15a30:	b	15a00 <__assert_fail@plt+0x4540>
   15a34:	ldr	r0, [r4, #36]	; 0x24
   15a38:	cmp	r0, #0
   15a3c:	beq	15a54 <__assert_fail@plt+0x4594>
   15a40:	ldr	r5, [r0, #4]
   15a44:	bl	12e14 <__assert_fail@plt+0x1954>
   15a48:	cmp	r5, #0
   15a4c:	mov	r0, r5
   15a50:	bne	15a40 <__assert_fail@plt+0x4580>
   15a54:	ldr	r0, [r4]
   15a58:	bl	12e14 <__assert_fail@plt+0x1954>
   15a5c:	mov	r0, r4
   15a60:	pop	{r4, r5, r6, sl, fp, lr}
   15a64:	b	12e14 <__assert_fail@plt+0x1954>
   15a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a6c:	add	fp, sp, #28
   15a70:	sub	sp, sp, #44	; 0x2c
   15a74:	mov	r7, r0
   15a78:	mov	r4, r0
   15a7c:	ldr	r0, [r7, #20]!
   15a80:	ldrb	r2, [r0, #16]
   15a84:	cmp	r2, #0
   15a88:	bne	15ab8 <__assert_fail@plt+0x45f8>
   15a8c:	vldr	s0, [r0, #8]
   15a90:	vldr	s4, [pc, #560]	; 15cc8 <__assert_fail@plt+0x4808>
   15a94:	vmov	s2, r1
   15a98:	mov	r5, #0
   15a9c:	vcvt.f32.u32	s2, s2
   15aa0:	vdiv.f32	s2, s2, s0
   15aa4:	vcmpe.f32	s2, s4
   15aa8:	vcvt.u32.f32	s0, s2
   15aac:	vmrs	APSR_nzcv, fpscr
   15ab0:	bge	15cb8 <__assert_fail@plt+0x47f8>
   15ab4:	vmov	r1, s0
   15ab8:	cmp	r1, #10
   15abc:	mov	r5, #0
   15ac0:	movls	r1, #10
   15ac4:	orr	r6, r1, #1
   15ac8:	cmn	r6, #1
   15acc:	bne	15ae0 <__assert_fail@plt+0x4620>
   15ad0:	b	15cb8 <__assert_fail@plt+0x47f8>
   15ad4:	add	r6, r6, #2
   15ad8:	cmn	r6, #1
   15adc:	beq	15cb8 <__assert_fail@plt+0x47f8>
   15ae0:	mov	r0, #3
   15ae4:	cmp	r6, #10
   15ae8:	bcc	15b20 <__assert_fail@plt+0x4660>
   15aec:	mov	r0, #3
   15af0:	mov	r2, #9
   15af4:	mov	r1, #12
   15af8:	udiv	r3, r6, r0
   15afc:	mls	r3, r3, r0, r6
   15b00:	cmp	r3, #0
   15b04:	beq	15b20 <__assert_fail@plt+0x4660>
   15b08:	add	r2, r2, r1
   15b0c:	add	r1, r1, #8
   15b10:	add	r0, r0, #2
   15b14:	add	r2, r2, #4
   15b18:	cmp	r2, r6
   15b1c:	bcc	15af8 <__assert_fail@plt+0x4638>
   15b20:	udiv	r1, r6, r0
   15b24:	mls	r0, r1, r0, r6
   15b28:	cmp	r0, #0
   15b2c:	beq	15ad4 <__assert_fail@plt+0x4614>
   15b30:	sub	r0, r6, #1
   15b34:	cmn	r0, #-536870910	; 0xe0000002
   15b38:	bhi	15cb8 <__assert_fail@plt+0x47f8>
   15b3c:	ldr	r0, [r4, #8]
   15b40:	cmp	r6, r0
   15b44:	bne	15b50 <__assert_fail@plt+0x4690>
   15b48:	mov	r5, #1
   15b4c:	b	15cb8 <__assert_fail@plt+0x47f8>
   15b50:	mov	r0, r6
   15b54:	mov	r1, #8
   15b58:	bl	19de4 <__assert_fail@plt+0x8924>
   15b5c:	cmp	r0, #0
   15b60:	str	r0, [sp, #4]
   15b64:	beq	15cb8 <__assert_fail@plt+0x47f8>
   15b68:	mov	r1, #0
   15b6c:	add	r0, r0, r6, lsl #3
   15b70:	str	r6, [sp, #12]
   15b74:	add	r5, sp, #4
   15b78:	mov	sl, r4
   15b7c:	mov	r2, #0
   15b80:	str	r1, [sp, #16]
   15b84:	str	r1, [sp, #20]
   15b88:	str	r0, [sp, #8]
   15b8c:	add	r0, r5, #20
   15b90:	mov	r1, r4
   15b94:	vld1.32	{d16-d17}, [r7]
   15b98:	vst1.32	{d16-d17}, [r0]
   15b9c:	ldr	r0, [sl, #36]!	; 0x24
   15ba0:	str	r0, [sp, #40]	; 0x28
   15ba4:	mov	r0, r5
   15ba8:	bl	15ccc <__assert_fail@plt+0x480c>
   15bac:	cmp	r0, #0
   15bb0:	beq	15bd8 <__assert_fail@plt+0x4718>
   15bb4:	ldr	r0, [r4]
   15bb8:	bl	12e14 <__assert_fail@plt+0x1954>
   15bbc:	mov	r0, #36	; 0x24
   15bc0:	vld1.32	{d16-d17}, [r5], r0
   15bc4:	vst1.32	{d16-d17}, [r4], r0
   15bc8:	ldr	r0, [r5]
   15bcc:	mov	r5, #1
   15bd0:	str	r0, [r4]
   15bd4:	b	15cb8 <__assert_fail@plt+0x47f8>
   15bd8:	ldr	r0, [sp, #40]	; 0x28
   15bdc:	str	r0, [sl]
   15be0:	ldr	r0, [sp, #8]
   15be4:	ldr	r8, [sp, #4]
   15be8:	cmp	r8, r0
   15bec:	str	r0, [sp]
   15bf0:	bcs	15c94 <__assert_fail@plt+0x47d4>
   15bf4:	mov	r9, #0
   15bf8:	ldr	r0, [r8]
   15bfc:	cmp	r0, #0
   15c00:	beq	15c84 <__assert_fail@plt+0x47c4>
   15c04:	ldr	r6, [r8, #4]
   15c08:	cmp	r6, #0
   15c0c:	beq	15c80 <__assert_fail@plt+0x47c0>
   15c10:	ldr	r1, [r4, #8]
   15c14:	ldr	r5, [r6]
   15c18:	ldr	r2, [r4, #24]
   15c1c:	mov	r0, r5
   15c20:	blx	r2
   15c24:	ldr	r1, [r4, #8]
   15c28:	cmp	r0, r1
   15c2c:	bcs	15cc4 <__assert_fail@plt+0x4804>
   15c30:	ldr	r3, [r4]
   15c34:	ldr	r2, [r6, #4]
   15c38:	ldr	r7, [r3, r0, lsl #3]
   15c3c:	cmp	r7, #0
   15c40:	beq	15c50 <__assert_fail@plt+0x4790>
   15c44:	add	r0, r3, r0, lsl #3
   15c48:	add	r0, r0, #4
   15c4c:	b	15c68 <__assert_fail@plt+0x47a8>
   15c50:	str	r5, [r3, r0, lsl #3]
   15c54:	ldr	r0, [r4, #12]
   15c58:	add	r0, r0, #1
   15c5c:	str	r0, [r4, #12]
   15c60:	mov	r0, sl
   15c64:	str	r9, [r6]
   15c68:	ldr	r3, [r0]
   15c6c:	cmp	r2, #0
   15c70:	str	r3, [r6, #4]
   15c74:	str	r6, [r0]
   15c78:	mov	r6, r2
   15c7c:	bne	15c14 <__assert_fail@plt+0x4754>
   15c80:	str	r9, [r8, #4]
   15c84:	ldr	r0, [sp]
   15c88:	add	r8, r8, #8
   15c8c:	cmp	r8, r0
   15c90:	bcc	15bf8 <__assert_fail@plt+0x4738>
   15c94:	add	r1, sp, #4
   15c98:	mov	r0, r4
   15c9c:	mov	r2, #0
   15ca0:	mov	r5, #0
   15ca4:	bl	15ccc <__assert_fail@plt+0x480c>
   15ca8:	cmp	r0, #0
   15cac:	beq	15cc4 <__assert_fail@plt+0x4804>
   15cb0:	ldr	r0, [sp, #4]
   15cb4:	bl	12e14 <__assert_fail@plt+0x1954>
   15cb8:	mov	r0, r5
   15cbc:	sub	sp, fp, #28
   15cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc4:	bl	11478 <abort@plt>
   15cc8:	svcmi	0x00800000
   15ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd0:	add	fp, sp, #28
   15cd4:	sub	sp, sp, #12
   15cd8:	ldr	sl, [r1]
   15cdc:	str	r1, [sp, #8]
   15ce0:	ldr	r1, [r1, #4]
   15ce4:	mov	r7, r0
   15ce8:	mov	r0, #1
   15cec:	str	r2, [sp, #4]
   15cf0:	cmp	sl, r1
   15cf4:	bcs	15e50 <__assert_fail@plt+0x4990>
   15cf8:	add	r8, r7, #36	; 0x24
   15cfc:	mov	r9, #0
   15d00:	ldr	r4, [sl]
   15d04:	cmp	r4, #0
   15d08:	beq	15e38 <__assert_fail@plt+0x4978>
   15d0c:	ldr	r5, [sl, #4]
   15d10:	cmp	r5, #0
   15d14:	beq	15d8c <__assert_fail@plt+0x48cc>
   15d18:	ldr	r1, [r7, #8]
   15d1c:	ldr	r4, [r5]
   15d20:	ldr	r2, [r7, #24]
   15d24:	mov	r0, r4
   15d28:	blx	r2
   15d2c:	ldr	r1, [r7, #8]
   15d30:	cmp	r0, r1
   15d34:	bcs	15e64 <__assert_fail@plt+0x49a4>
   15d38:	ldr	r3, [r7]
   15d3c:	ldr	r2, [r5, #4]
   15d40:	ldr	r6, [r3, r0, lsl #3]
   15d44:	cmp	r6, #0
   15d48:	beq	15d58 <__assert_fail@plt+0x4898>
   15d4c:	add	r0, r3, r0, lsl #3
   15d50:	add	r0, r0, #4
   15d54:	b	15d70 <__assert_fail@plt+0x48b0>
   15d58:	str	r4, [r3, r0, lsl #3]
   15d5c:	ldr	r0, [r7, #12]
   15d60:	add	r0, r0, #1
   15d64:	str	r0, [r7, #12]
   15d68:	mov	r0, r8
   15d6c:	str	r9, [r5]
   15d70:	ldr	r3, [r0]
   15d74:	cmp	r2, #0
   15d78:	str	r3, [r5, #4]
   15d7c:	str	r5, [r0]
   15d80:	mov	r5, r2
   15d84:	bne	15d1c <__assert_fail@plt+0x485c>
   15d88:	ldr	r4, [sl]
   15d8c:	ldr	r0, [sp, #4]
   15d90:	str	r9, [sl, #4]
   15d94:	cmp	r0, #0
   15d98:	bne	15e38 <__assert_fail@plt+0x4978>
   15d9c:	ldr	r1, [r7, #8]
   15da0:	ldr	r2, [r7, #24]
   15da4:	mov	r0, r4
   15da8:	blx	r2
   15dac:	mov	r5, r0
   15db0:	ldr	r0, [r7, #8]
   15db4:	cmp	r5, r0
   15db8:	bcs	15e64 <__assert_fail@plt+0x49a4>
   15dbc:	ldr	r6, [r7]
   15dc0:	ldr	r0, [r6, r5, lsl #3]
   15dc4:	cmp	r0, #0
   15dc8:	beq	15de8 <__assert_fail@plt+0x4928>
   15dcc:	ldr	r0, [r8]
   15dd0:	cmp	r0, #0
   15dd4:	beq	15dfc <__assert_fail@plt+0x493c>
   15dd8:	mov	r1, r0
   15ddc:	ldr	r2, [r1, #4]!
   15de0:	str	r2, [r8]
   15de4:	b	15e10 <__assert_fail@plt+0x4950>
   15de8:	str	r4, [r6, r5, lsl #3]
   15dec:	ldr	r0, [r7, #12]
   15df0:	add	r0, r0, #1
   15df4:	str	r0, [r7, #12]
   15df8:	b	15e24 <__assert_fail@plt+0x4964>
   15dfc:	mov	r0, #8
   15e00:	bl	19e38 <__assert_fail@plt+0x8978>
   15e04:	cmp	r0, #0
   15e08:	beq	15e58 <__assert_fail@plt+0x4998>
   15e0c:	add	r1, r0, #4
   15e10:	str	r4, [r0]
   15e14:	add	r2, r6, r5, lsl #3
   15e18:	ldr	r3, [r2, #4]
   15e1c:	str	r3, [r1]
   15e20:	str	r0, [r2, #4]
   15e24:	ldr	r1, [sp, #8]
   15e28:	str	r9, [sl]
   15e2c:	ldr	r0, [r1, #12]
   15e30:	sub	r0, r0, #1
   15e34:	str	r0, [r1, #12]
   15e38:	ldr	r0, [sp, #8]
   15e3c:	add	sl, sl, #8
   15e40:	ldr	r0, [r0, #4]
   15e44:	cmp	sl, r0
   15e48:	bcc	15d00 <__assert_fail@plt+0x4840>
   15e4c:	mov	r0, #1
   15e50:	sub	sp, fp, #28
   15e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e58:	mov	r0, #0
   15e5c:	sub	sp, fp, #28
   15e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e64:	bl	11478 <abort@plt>
   15e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e6c:	add	fp, sp, #28
   15e70:	sub	sp, sp, #4
   15e74:	cmp	r1, #0
   15e78:	beq	1619c <__assert_fail@plt+0x4cdc>
   15e7c:	mov	r8, r2
   15e80:	mov	sl, r1
   15e84:	ldr	r1, [r0, #8]
   15e88:	ldr	r2, [r0, #24]
   15e8c:	mov	r4, r0
   15e90:	mov	r0, sl
   15e94:	blx	r2
   15e98:	mov	r7, r0
   15e9c:	ldr	r0, [r4, #8]
   15ea0:	cmp	r7, r0
   15ea4:	bcs	1619c <__assert_fail@plt+0x4cdc>
   15ea8:	ldr	r5, [r4]
   15eac:	mov	r9, r5
   15eb0:	ldr	r1, [r9, r7, lsl #3]!
   15eb4:	cmp	r1, #0
   15eb8:	beq	15f44 <__assert_fail@plt+0x4a84>
   15ebc:	cmp	r1, sl
   15ec0:	beq	15eec <__assert_fail@plt+0x4a2c>
   15ec4:	ldr	r2, [r4, #28]
   15ec8:	mov	r0, sl
   15ecc:	blx	r2
   15ed0:	cmp	r0, #0
   15ed4:	mov	r6, r9
   15ed8:	beq	15f00 <__assert_fail@plt+0x4a40>
   15edc:	ldr	r0, [r6]
   15ee0:	cmp	r0, #0
   15ee4:	bne	15ef0 <__assert_fail@plt+0x4a30>
   15ee8:	b	15f44 <__assert_fail@plt+0x4a84>
   15eec:	mov	r0, sl
   15ef0:	cmp	r8, #0
   15ef4:	mov	r7, #0
   15ef8:	strne	r0, [r8]
   15efc:	b	16138 <__assert_fail@plt+0x4c78>
   15f00:	add	r6, r5, r7, lsl #3
   15f04:	ldr	r0, [r6, #4]!
   15f08:	cmp	r0, #0
   15f0c:	beq	15f44 <__assert_fail@plt+0x4a84>
   15f10:	ldr	r1, [r0]
   15f14:	cmp	r1, sl
   15f18:	beq	15f38 <__assert_fail@plt+0x4a78>
   15f1c:	ldr	r2, [r4, #28]
   15f20:	mov	r0, sl
   15f24:	blx	r2
   15f28:	ldr	r6, [r6]
   15f2c:	cmp	r0, #0
   15f30:	beq	15f04 <__assert_fail@plt+0x4a44>
   15f34:	b	15edc <__assert_fail@plt+0x4a1c>
   15f38:	mov	r0, sl
   15f3c:	cmp	r0, #0
   15f40:	bne	15ef0 <__assert_fail@plt+0x4a30>
   15f44:	vldr	s0, [r4, #8]
   15f48:	vldr	s2, [r4, #12]
   15f4c:	ldr	r0, [r4, #20]
   15f50:	vcvt.f32.u32	s0, s0
   15f54:	vcvt.f32.u32	s4, s2
   15f58:	vldr	s2, [r0, #8]
   15f5c:	vmul.f32	s6, s2, s0
   15f60:	vcmpe.f32	s6, s4
   15f64:	vmrs	APSR_nzcv, fpscr
   15f68:	bpl	160bc <__assert_fail@plt+0x4bfc>
   15f6c:	movw	r1, #46768	; 0xb6b0
   15f70:	movt	r1, #1
   15f74:	cmp	r0, r1
   15f78:	beq	16004 <__assert_fail@plt+0x4b44>
   15f7c:	vldr	s6, [pc, #540]	; 161a0 <__assert_fail@plt+0x4ce0>
   15f80:	vcmpe.f32	s2, s6
   15f84:	vmrs	APSR_nzcv, fpscr
   15f88:	ble	15ff0 <__assert_fail@plt+0x4b30>
   15f8c:	vldr	s8, [pc, #528]	; 161a4 <__assert_fail@plt+0x4ce4>
   15f90:	vcmpe.f32	s2, s8
   15f94:	vmrs	APSR_nzcv, fpscr
   15f98:	bpl	15ff0 <__assert_fail@plt+0x4b30>
   15f9c:	vldr	s8, [pc, #516]	; 161a8 <__assert_fail@plt+0x4ce8>
   15fa0:	vldr	s10, [r0, #12]
   15fa4:	vcmpe.f32	s10, s8
   15fa8:	vmrs	APSR_nzcv, fpscr
   15fac:	ble	15ff0 <__assert_fail@plt+0x4b30>
   15fb0:	vldr	s8, [r0]
   15fb4:	vcmpe.f32	s8, #0.0
   15fb8:	vmrs	APSR_nzcv, fpscr
   15fbc:	blt	15ff0 <__assert_fail@plt+0x4b30>
   15fc0:	vadd.f32	s6, s8, s6
   15fc4:	vcmpe.f32	s6, s2
   15fc8:	vmrs	APSR_nzcv, fpscr
   15fcc:	bpl	15ff0 <__assert_fail@plt+0x4b30>
   15fd0:	vldr	s8, [r0, #4]
   15fd4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   15fd8:	vcmpe.f32	s8, s10
   15fdc:	vmrs	APSR_nzcv, fpscr
   15fe0:	bhi	15ff0 <__assert_fail@plt+0x4b30>
   15fe4:	vcmpe.f32	s6, s8
   15fe8:	vmrs	APSR_nzcv, fpscr
   15fec:	bmi	16008 <__assert_fail@plt+0x4b48>
   15ff0:	vldr	s2, [pc, #436]	; 161ac <__assert_fail@plt+0x4cec>
   15ff4:	movw	r0, #46768	; 0xb6b0
   15ff8:	movt	r0, #1
   15ffc:	str	r0, [r4, #20]
   16000:	b	16008 <__assert_fail@plt+0x4b48>
   16004:	mov	r0, r1
   16008:	vmul.f32	s6, s2, s0
   1600c:	vcmpe.f32	s6, s4
   16010:	vmrs	APSR_nzcv, fpscr
   16014:	bpl	160bc <__assert_fail@plt+0x4bfc>
   16018:	vldr	s4, [r0, #12]
   1601c:	ldrb	r0, [r0, #16]
   16020:	mvn	r7, #0
   16024:	vmul.f32	s0, s4, s0
   16028:	vldr	s4, [pc, #384]	; 161b0 <__assert_fail@plt+0x4cf0>
   1602c:	cmp	r0, #0
   16030:	vmul.f32	s2, s2, s0
   16034:	vseleq.f32	s0, s2, s0
   16038:	vcmpe.f32	s0, s4
   1603c:	vmrs	APSR_nzcv, fpscr
   16040:	bge	16138 <__assert_fail@plt+0x4c78>
   16044:	vcvt.u32.f32	s0, s0
   16048:	mov	r0, r4
   1604c:	vmov	r1, s0
   16050:	bl	15a68 <__assert_fail@plt+0x45a8>
   16054:	cmp	r0, #0
   16058:	beq	16138 <__assert_fail@plt+0x4c78>
   1605c:	ldr	r1, [r4, #8]
   16060:	ldr	r2, [r4, #24]
   16064:	mov	r0, sl
   16068:	blx	r2
   1606c:	mov	r7, r0
   16070:	ldr	r0, [r4, #8]
   16074:	cmp	r7, r0
   16078:	bcs	1619c <__assert_fail@plt+0x4cdc>
   1607c:	ldr	r5, [r4]
   16080:	mov	r9, r5
   16084:	ldr	r1, [r9, r7, lsl #3]!
   16088:	cmp	r1, #0
   1608c:	beq	160e4 <__assert_fail@plt+0x4c24>
   16090:	cmp	r1, sl
   16094:	mov	r0, sl
   16098:	beq	160b4 <__assert_fail@plt+0x4bf4>
   1609c:	ldr	r2, [r4, #28]
   160a0:	mov	r0, sl
   160a4:	blx	r2
   160a8:	cmp	r0, #0
   160ac:	beq	1614c <__assert_fail@plt+0x4c8c>
   160b0:	ldr	r0, [r9]
   160b4:	cmp	r0, #0
   160b8:	bne	1619c <__assert_fail@plt+0x4cdc>
   160bc:	ldr	r0, [r9]
   160c0:	cmp	r0, #0
   160c4:	beq	160e4 <__assert_fail@plt+0x4c24>
   160c8:	ldr	r0, [r4, #36]	; 0x24
   160cc:	cmp	r0, #0
   160d0:	beq	16104 <__assert_fail@plt+0x4c44>
   160d4:	mov	r1, r0
   160d8:	ldr	r2, [r1, #4]!
   160dc:	str	r2, [r4, #36]	; 0x24
   160e0:	b	16118 <__assert_fail@plt+0x4c58>
   160e4:	str	sl, [r9]
   160e8:	ldr	r0, [r4, #12]
   160ec:	ldr	r1, [r4, #16]
   160f0:	add	r0, r0, #1
   160f4:	add	r1, r1, #1
   160f8:	str	r0, [r4, #12]
   160fc:	str	r1, [r4, #16]
   16100:	b	16134 <__assert_fail@plt+0x4c74>
   16104:	mov	r0, #8
   16108:	bl	19e38 <__assert_fail@plt+0x8978>
   1610c:	cmp	r0, #0
   16110:	beq	16144 <__assert_fail@plt+0x4c84>
   16114:	add	r1, r0, #4
   16118:	str	sl, [r0]
   1611c:	ldr	r2, [r9, #4]
   16120:	str	r2, [r1]
   16124:	str	r0, [r9, #4]
   16128:	ldr	r0, [r4, #16]
   1612c:	add	r0, r0, #1
   16130:	str	r0, [r4, #16]
   16134:	mov	r7, #1
   16138:	mov	r0, r7
   1613c:	sub	sp, fp, #28
   16140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16144:	mvn	r7, #0
   16148:	b	16138 <__assert_fail@plt+0x4c78>
   1614c:	add	r6, r5, r7, lsl #3
   16150:	ldr	r0, [r6, #4]!
   16154:	cmp	r0, #0
   16158:	beq	160bc <__assert_fail@plt+0x4bfc>
   1615c:	ldr	r1, [r0]
   16160:	cmp	r1, sl
   16164:	beq	16190 <__assert_fail@plt+0x4cd0>
   16168:	ldr	r2, [r4, #28]
   1616c:	mov	r0, sl
   16170:	blx	r2
   16174:	ldr	r6, [r6]
   16178:	cmp	r0, #0
   1617c:	beq	16150 <__assert_fail@plt+0x4c90>
   16180:	ldr	r0, [r6]
   16184:	cmp	r0, #0
   16188:	beq	160bc <__assert_fail@plt+0x4bfc>
   1618c:	b	1619c <__assert_fail@plt+0x4cdc>
   16190:	mov	r0, sl
   16194:	cmp	r0, #0
   16198:	beq	160bc <__assert_fail@plt+0x4bfc>
   1619c:	bl	11478 <abort@plt>
   161a0:	stclcc	12, cr12, [ip, #820]	; 0x334
   161a4:	svccc	0x00666666
   161a8:	svccc	0x008ccccd
   161ac:	svccc	0x004ccccd
   161b0:	svcmi	0x00800000
   161b4:	push	{r4, sl, fp, lr}
   161b8:	add	fp, sp, #8
   161bc:	sub	sp, sp, #8
   161c0:	add	r2, sp, #4
   161c4:	mov	r4, r1
   161c8:	bl	15e68 <__assert_fail@plt+0x49a8>
   161cc:	cmn	r0, #1
   161d0:	beq	161e4 <__assert_fail@plt+0x4d24>
   161d4:	ldr	r1, [sp, #4]
   161d8:	cmp	r0, #0
   161dc:	moveq	r4, r1
   161e0:	b	161e8 <__assert_fail@plt+0x4d28>
   161e4:	mov	r4, #0
   161e8:	mov	r0, r4
   161ec:	sub	sp, fp, #8
   161f0:	pop	{r4, sl, fp, pc}
   161f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   161f8:	add	fp, sp, #24
   161fc:	mov	r9, r1
   16200:	ldr	r1, [r0, #8]
   16204:	ldr	r2, [r0, #24]
   16208:	mov	r5, r0
   1620c:	mov	r0, r9
   16210:	blx	r2
   16214:	mov	r7, r0
   16218:	ldr	r0, [r5, #8]
   1621c:	cmp	r7, r0
   16220:	bcs	16480 <__assert_fail@plt+0x4fc0>
   16224:	ldr	r6, [r5]
   16228:	mov	r8, #0
   1622c:	mov	r4, r6
   16230:	ldr	r1, [r4, r7, lsl #3]!
   16234:	cmp	r1, #0
   16238:	beq	162ec <__assert_fail@plt+0x4e2c>
   1623c:	cmp	r1, r9
   16240:	beq	1625c <__assert_fail@plt+0x4d9c>
   16244:	ldr	r2, [r5, #28]
   16248:	mov	r0, r9
   1624c:	blx	r2
   16250:	cmp	r0, #0
   16254:	beq	16294 <__assert_fail@plt+0x4dd4>
   16258:	ldr	r9, [r4]
   1625c:	add	r0, r6, r7, lsl #3
   16260:	ldr	r0, [r0, #4]
   16264:	cmp	r0, #0
   16268:	beq	162dc <__assert_fail@plt+0x4e1c>
   1626c:	ldm	r0, {r1, r2}
   16270:	stm	r4, {r1, r2}
   16274:	mov	r1, #0
   16278:	str	r1, [r0]
   1627c:	ldr	r1, [r5, #36]	; 0x24
   16280:	str	r1, [r0, #4]
   16284:	str	r0, [r5, #36]	; 0x24
   16288:	cmp	r9, #0
   1628c:	bne	16324 <__assert_fail@plt+0x4e64>
   16290:	b	162ec <__assert_fail@plt+0x4e2c>
   16294:	add	r7, r6, r7, lsl #3
   16298:	ldr	r0, [r7, #4]!
   1629c:	cmp	r0, #0
   162a0:	beq	162ec <__assert_fail@plt+0x4e2c>
   162a4:	ldr	r1, [r0]
   162a8:	cmp	r1, r9
   162ac:	beq	162f4 <__assert_fail@plt+0x4e34>
   162b0:	ldr	r2, [r5, #28]
   162b4:	mov	r0, r9
   162b8:	blx	r2
   162bc:	ldr	r1, [r7]
   162c0:	cmp	r0, #0
   162c4:	bne	162fc <__assert_fail@plt+0x4e3c>
   162c8:	ldr	r0, [r1, #4]!
   162cc:	cmp	r0, #0
   162d0:	mov	r7, r1
   162d4:	bne	162a4 <__assert_fail@plt+0x4de4>
   162d8:	b	162ec <__assert_fail@plt+0x4e2c>
   162dc:	mov	r0, #0
   162e0:	str	r0, [r4]
   162e4:	cmp	r9, #0
   162e8:	bne	16324 <__assert_fail@plt+0x4e64>
   162ec:	mov	r0, r8
   162f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   162f4:	mov	r1, r0
   162f8:	b	16300 <__assert_fail@plt+0x4e40>
   162fc:	ldr	r9, [r1]
   16300:	ldr	r0, [r1, #4]
   16304:	str	r0, [r7]
   16308:	mov	r0, #0
   1630c:	str	r0, [r1]
   16310:	ldr	r0, [r5, #36]	; 0x24
   16314:	str	r0, [r1, #4]
   16318:	str	r1, [r5, #36]	; 0x24
   1631c:	cmp	r9, #0
   16320:	beq	162ec <__assert_fail@plt+0x4e2c>
   16324:	ldr	r0, [r5, #16]
   16328:	sub	r0, r0, #1
   1632c:	str	r0, [r5, #16]
   16330:	ldr	r0, [r4]
   16334:	cmp	r0, #0
   16338:	bne	16440 <__assert_fail@plt+0x4f80>
   1633c:	ldr	r0, [r5, #12]
   16340:	vldr	s0, [r5, #8]
   16344:	sub	r1, r0, #1
   16348:	str	r1, [r5, #12]
   1634c:	vmov	s2, r1
   16350:	ldr	r0, [r5, #20]
   16354:	vcvt.f32.u32	s0, s0
   16358:	vcvt.f32.u32	s2, s2
   1635c:	vldr	s4, [r0]
   16360:	vmul.f32	s6, s4, s0
   16364:	vcmpe.f32	s6, s2
   16368:	vmrs	APSR_nzcv, fpscr
   1636c:	ble	16440 <__assert_fail@plt+0x4f80>
   16370:	movw	r1, #46768	; 0xb6b0
   16374:	movt	r1, #1
   16378:	cmp	r0, r1
   1637c:	beq	163d4 <__assert_fail@plt+0x4f14>
   16380:	vldr	s8, [pc, #252]	; 16484 <__assert_fail@plt+0x4fc4>
   16384:	vldr	s6, [r0, #8]
   16388:	vcmpe.f32	s6, s8
   1638c:	vmrs	APSR_nzcv, fpscr
   16390:	ble	163c0 <__assert_fail@plt+0x4f00>
   16394:	vldr	s10, [pc, #236]	; 16488 <__assert_fail@plt+0x4fc8>
   16398:	vcmpe.f32	s6, s10
   1639c:	vmrs	APSR_nzcv, fpscr
   163a0:	bpl	163c0 <__assert_fail@plt+0x4f00>
   163a4:	vcmpe.f32	s4, #0.0
   163a8:	vmrs	APSR_nzcv, fpscr
   163ac:	vldrge	s10, [r0, #12]
   163b0:	vldrge	s12, [pc, #212]	; 1648c <__assert_fail@plt+0x4fcc>
   163b4:	vcmpege.f32	s10, s12
   163b8:	vmrsge	APSR_nzcv, fpscr
   163bc:	bgt	1644c <__assert_fail@plt+0x4f8c>
   163c0:	vldr	s4, [pc, #200]	; 16490 <__assert_fail@plt+0x4fd0>
   163c4:	movw	r0, #46768	; 0xb6b0
   163c8:	movt	r0, #1
   163cc:	str	r0, [r5, #20]
   163d0:	b	163d8 <__assert_fail@plt+0x4f18>
   163d4:	mov	r0, r1
   163d8:	vmul.f32	s4, s4, s0
   163dc:	vcmpe.f32	s4, s2
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	ble	16440 <__assert_fail@plt+0x4f80>
   163e8:	ldrb	r1, [r0, #16]
   163ec:	vldr	s2, [r0, #4]
   163f0:	cmp	r1, #0
   163f4:	vmul.f32	s0, s2, s0
   163f8:	vldreq	s2, [r0, #8]
   163fc:	mov	r0, r5
   16400:	vmuleq.f32	s0, s0, s2
   16404:	vcvt.u32.f32	s0, s0
   16408:	vmov	r1, s0
   1640c:	bl	15a68 <__assert_fail@plt+0x45a8>
   16410:	cmp	r0, #0
   16414:	bne	16440 <__assert_fail@plt+0x4f80>
   16418:	ldr	r0, [r5, #36]	; 0x24
   1641c:	cmp	r0, #0
   16420:	beq	16438 <__assert_fail@plt+0x4f78>
   16424:	ldr	r4, [r0, #4]
   16428:	bl	12e14 <__assert_fail@plt+0x1954>
   1642c:	cmp	r4, #0
   16430:	mov	r0, r4
   16434:	bne	16424 <__assert_fail@plt+0x4f64>
   16438:	mov	r0, #0
   1643c:	str	r0, [r5, #36]	; 0x24
   16440:	mov	r8, r9
   16444:	mov	r0, r8
   16448:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1644c:	vadd.f32	s8, s4, s8
   16450:	vcmpe.f32	s8, s6
   16454:	vmrs	APSR_nzcv, fpscr
   16458:	bpl	163c0 <__assert_fail@plt+0x4f00>
   1645c:	vldr	s6, [r0, #4]
   16460:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16464:	vcmpe.f32	s6, s10
   16468:	vmrs	APSR_nzcv, fpscr
   1646c:	bhi	163c0 <__assert_fail@plt+0x4f00>
   16470:	vcmpe.f32	s8, s6
   16474:	vmrs	APSR_nzcv, fpscr
   16478:	bmi	163d8 <__assert_fail@plt+0x4f18>
   1647c:	b	163c0 <__assert_fail@plt+0x4f00>
   16480:	bl	11478 <abort@plt>
   16484:	stclcc	12, cr12, [ip, #820]	; 0x334
   16488:	svccc	0x00666666
   1648c:	svccc	0x008ccccd
   16490:	andeq	r0, r0, r0
   16494:	b	161f4 <__assert_fail@plt+0x4d34>
   16498:	mov	r3, #1
   1649c:	mov	r2, #0
   164a0:	vdup.32	q8, r1
   164a4:	strb	r3, [r0, #28]
   164a8:	str	r2, [r0, #20]
   164ac:	str	r2, [r0, #24]
   164b0:	vst1.32	{d16-d17}, [r0]!
   164b4:	str	r1, [r0]
   164b8:	bx	lr
   164bc:	ldrb	r0, [r0, #28]
   164c0:	bx	lr
   164c4:	push	{fp, lr}
   164c8:	mov	fp, sp
   164cc:	ldrb	r3, [r0, #28]
   164d0:	ldr	r2, [r0, #20]
   164d4:	eor	lr, r3, #1
   164d8:	add	r2, r2, lr
   164dc:	and	r3, r2, #3
   164e0:	ldr	ip, [r0, r3, lsl #2]
   164e4:	str	r1, [r0, r3, lsl #2]
   164e8:	str	r3, [r0, #20]
   164ec:	ldr	r1, [r0, #24]
   164f0:	cmp	r3, r1
   164f4:	addeq	r1, r2, lr
   164f8:	andeq	r1, r1, #3
   164fc:	streq	r1, [r0, #24]
   16500:	mov	r1, #0
   16504:	strb	r1, [r0, #28]
   16508:	mov	r0, ip
   1650c:	pop	{fp, pc}
   16510:	ldrb	r1, [r0, #28]
   16514:	cmp	r1, #0
   16518:	bne	1655c <__assert_fail@plt+0x509c>
   1651c:	ldr	r3, [r0, #20]
   16520:	ldr	r2, [r0, #16]
   16524:	ldr	r1, [r0, r3, lsl #2]
   16528:	str	r2, [r0, r3, lsl #2]
   1652c:	ldr	r2, [r0, #20]
   16530:	ldr	r3, [r0, #24]
   16534:	cmp	r2, r3
   16538:	moveq	r2, #1
   1653c:	strbeq	r2, [r0, #28]
   16540:	moveq	r0, r1
   16544:	bxeq	lr
   16548:	sub	r2, r2, #1
   1654c:	and	r2, r2, #3
   16550:	str	r2, [r0, #20]
   16554:	mov	r0, r1
   16558:	bx	lr
   1655c:	push	{fp, lr}
   16560:	mov	fp, sp
   16564:	bl	11478 <abort@plt>
   16568:	push	{r4, r5, r6, sl, fp, lr}
   1656c:	add	fp, sp, #16
   16570:	mov	r5, r0
   16574:	mov	r0, #0
   16578:	mov	r4, r1
   1657c:	add	r6, r2, #19
   16580:	strb	r0, [r2, #20]
   16584:	mov	r0, r5
   16588:	mov	r1, r4
   1658c:	mov	r2, #10
   16590:	mov	r3, #0
   16594:	bl	1a5e0 <__assert_fail@plt+0x9120>
   16598:	add	r2, r0, r0, lsl #2
   1659c:	sub	r2, r5, r2, lsl #1
   165a0:	orr	r2, r2, #48	; 0x30
   165a4:	strb	r2, [r6], #-1
   165a8:	rsbs	r2, r5, #9
   165ac:	mov	r5, r0
   165b0:	rscs	r2, r4, #0
   165b4:	mov	r4, r1
   165b8:	bcc	16584 <__assert_fail@plt+0x50c4>
   165bc:	add	r0, r6, #1
   165c0:	pop	{r4, r5, r6, sl, fp, pc}
   165c4:	sub	sp, sp, #4
   165c8:	push	{fp, lr}
   165cc:	mov	fp, sp
   165d0:	sub	sp, sp, #4
   165d4:	str	r3, [fp, #8]
   165d8:	mov	r3, #0
   165dc:	tst	r2, #64	; 0x40
   165e0:	addne	r3, fp, #8
   165e4:	addne	r3, r3, #4
   165e8:	strne	r3, [sp]
   165ec:	ldrne	r3, [fp, #8]
   165f0:	bl	11364 <openat64@plt>
   165f4:	bl	18428 <__assert_fail@plt+0x6f68>
   165f8:	mov	sp, fp
   165fc:	pop	{fp, lr}
   16600:	add	sp, sp, #4
   16604:	bx	lr
   16608:	push	{r4, r5, r6, sl, fp, lr}
   1660c:	add	fp, sp, #16
   16610:	orr	r2, r2, #18688	; 0x4900
   16614:	mov	r4, r3
   16618:	orr	r2, r2, #524288	; 0x80000
   1661c:	bl	165c4 <__assert_fail@plt+0x5104>
   16620:	mov	r5, r0
   16624:	mov	r0, #0
   16628:	cmp	r5, #0
   1662c:	poplt	{r4, r5, r6, sl, fp, pc}
   16630:	mov	r0, r5
   16634:	bl	11418 <fdopendir@plt>
   16638:	cmp	r0, #0
   1663c:	strne	r5, [r4]
   16640:	popne	{r4, r5, r6, sl, fp, pc}
   16644:	bl	1137c <__errno_location@plt>
   16648:	ldr	r6, [r0]
   1664c:	mov	r4, r0
   16650:	mov	r0, r5
   16654:	bl	11484 <close@plt>
   16658:	mov	r0, #0
   1665c:	str	r6, [r4]
   16660:	pop	{r4, r5, r6, sl, fp, pc}
   16664:	push	{r4, r5, fp, lr}
   16668:	add	fp, sp, #8
   1666c:	cmp	r0, #0
   16670:	beq	16704 <__assert_fail@plt+0x5244>
   16674:	mov	r1, #47	; 0x2f
   16678:	mov	r4, r0
   1667c:	bl	113f4 <strrchr@plt>
   16680:	cmp	r0, #0
   16684:	mov	r5, r4
   16688:	addne	r5, r0, #1
   1668c:	sub	r0, r5, r4
   16690:	cmp	r0, #7
   16694:	blt	166e8 <__assert_fail@plt+0x5228>
   16698:	movw	r1, #46844	; 0xb6fc
   1669c:	sub	r0, r5, #7
   166a0:	mov	r2, #7
   166a4:	movt	r1, #1
   166a8:	bl	1146c <strncmp@plt>
   166ac:	cmp	r0, #0
   166b0:	bne	166e8 <__assert_fail@plt+0x5228>
   166b4:	movw	r1, #46852	; 0xb704
   166b8:	mov	r0, r5
   166bc:	mov	r2, #3
   166c0:	movt	r1, #1
   166c4:	bl	1146c <strncmp@plt>
   166c8:	cmp	r0, #0
   166cc:	beq	166d8 <__assert_fail@plt+0x5218>
   166d0:	mov	r4, r5
   166d4:	b	166e8 <__assert_fail@plt+0x5228>
   166d8:	movw	r0, #49520	; 0xc170
   166dc:	add	r4, r5, #3
   166e0:	movt	r0, #2
   166e4:	str	r4, [r0]
   166e8:	movw	r0, #49524	; 0xc174
   166ec:	movt	r0, #2
   166f0:	str	r4, [r0]
   166f4:	movw	r0, #49584	; 0xc1b0
   166f8:	movt	r0, #2
   166fc:	str	r4, [r0]
   16700:	pop	{r4, r5, fp, pc}
   16704:	movw	r0, #49536	; 0xc180
   16708:	mov	r1, #55	; 0x37
   1670c:	mov	r2, #1
   16710:	movt	r0, #2
   16714:	ldr	r3, [r0]
   16718:	movw	r0, #46788	; 0xb6c4
   1671c:	movt	r0, #1
   16720:	bl	112a4 <fwrite@plt>
   16724:	bl	11478 <abort@plt>
   16728:	push	{r4, r5, r6, sl, fp, lr}
   1672c:	add	fp, sp, #16
   16730:	mov	r4, r0
   16734:	movw	r0, #49592	; 0xc1b8
   16738:	movt	r0, #2
   1673c:	cmp	r4, #0
   16740:	moveq	r4, r0
   16744:	bl	1137c <__errno_location@plt>
   16748:	ldr	r6, [r0]
   1674c:	mov	r5, r0
   16750:	mov	r0, r4
   16754:	mov	r1, #48	; 0x30
   16758:	bl	18f84 <__assert_fail@plt+0x7ac4>
   1675c:	str	r6, [r5]
   16760:	pop	{r4, r5, r6, sl, fp, pc}
   16764:	movw	r1, #49592	; 0xc1b8
   16768:	cmp	r0, #0
   1676c:	movt	r1, #2
   16770:	movne	r1, r0
   16774:	ldr	r0, [r1]
   16778:	bx	lr
   1677c:	movw	r2, #49592	; 0xc1b8
   16780:	cmp	r0, #0
   16784:	movt	r2, #2
   16788:	movne	r2, r0
   1678c:	str	r1, [r2]
   16790:	bx	lr
   16794:	movw	r3, #49592	; 0xc1b8
   16798:	cmp	r0, #0
   1679c:	movt	r3, #2
   167a0:	movne	r3, r0
   167a4:	ubfx	r0, r1, #5, #3
   167a8:	and	r1, r1, #31
   167ac:	add	r0, r3, r0, lsl #2
   167b0:	ldr	r3, [r0, #8]
   167b4:	eor	r2, r2, r3, lsr r1
   167b8:	and	r2, r2, #1
   167bc:	eor	r2, r3, r2, lsl r1
   167c0:	str	r2, [r0, #8]
   167c4:	mov	r0, #1
   167c8:	and	r0, r0, r3, lsr r1
   167cc:	bx	lr
   167d0:	movw	r2, #49592	; 0xc1b8
   167d4:	cmp	r0, #0
   167d8:	movt	r2, #2
   167dc:	movne	r2, r0
   167e0:	ldr	r0, [r2, #4]
   167e4:	str	r1, [r2, #4]
   167e8:	bx	lr
   167ec:	movw	r3, #49592	; 0xc1b8
   167f0:	cmp	r0, #0
   167f4:	movt	r3, #2
   167f8:	movne	r3, r0
   167fc:	cmp	r1, #0
   16800:	mov	r0, #10
   16804:	cmpne	r2, #0
   16808:	str	r0, [r3]
   1680c:	bne	1681c <__assert_fail@plt+0x535c>
   16810:	push	{fp, lr}
   16814:	mov	fp, sp
   16818:	bl	11478 <abort@plt>
   1681c:	str	r1, [r3, #40]	; 0x28
   16820:	str	r2, [r3, #44]	; 0x2c
   16824:	bx	lr
   16828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1682c:	add	fp, sp, #28
   16830:	sub	sp, sp, #20
   16834:	mov	r7, r0
   16838:	ldr	r0, [fp, #8]
   1683c:	movw	r5, #49592	; 0xc1b8
   16840:	mov	r8, r3
   16844:	mov	r9, r2
   16848:	mov	sl, r1
   1684c:	movt	r5, #2
   16850:	cmp	r0, #0
   16854:	movne	r5, r0
   16858:	bl	1137c <__errno_location@plt>
   1685c:	mov	r4, r0
   16860:	ldm	r5, {r0, r1}
   16864:	ldr	r2, [r5, #40]	; 0x28
   16868:	ldr	r3, [r5, #44]	; 0x2c
   1686c:	add	r5, r5, #8
   16870:	ldr	r6, [r4]
   16874:	stm	sp, {r0, r1, r5}
   16878:	str	r2, [sp, #12]
   1687c:	str	r3, [sp, #16]
   16880:	mov	r0, r7
   16884:	mov	r1, sl
   16888:	mov	r2, r9
   1688c:	mov	r3, r8
   16890:	bl	168a0 <__assert_fail@plt+0x53e0>
   16894:	str	r6, [r4]
   16898:	sub	sp, fp, #28
   1689c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a4:	add	fp, sp, #28
   168a8:	sub	sp, sp, #156	; 0x9c
   168ac:	str	r0, [sp, #80]	; 0x50
   168b0:	ldr	r0, [fp, #12]
   168b4:	mov	r6, r1
   168b8:	mov	r9, r3
   168bc:	str	r2, [fp, #-84]	; 0xffffffac
   168c0:	and	r1, r0, #4
   168c4:	str	r1, [sp, #32]
   168c8:	and	r1, r0, #1
   168cc:	str	r1, [sp, #36]	; 0x24
   168d0:	ubfx	r4, r0, #1, #1
   168d4:	bl	112bc <__ctype_get_mb_cur_max@plt>
   168d8:	str	r0, [sp, #40]	; 0x28
   168dc:	ldr	r0, [fp, #24]
   168e0:	ldr	r7, [fp, #8]
   168e4:	mov	r1, #0
   168e8:	mov	r5, #1
   168ec:	str	r1, [fp, #-56]	; 0xffffffc8
   168f0:	mov	r1, #0
   168f4:	str	r1, [sp, #60]	; 0x3c
   168f8:	str	r0, [sp, #76]	; 0x4c
   168fc:	ldr	r0, [fp, #20]
   16900:	str	r0, [sp, #72]	; 0x48
   16904:	mov	r0, #0
   16908:	str	r0, [sp, #56]	; 0x38
   1690c:	mov	r0, #0
   16910:	str	r0, [sp, #92]	; 0x5c
   16914:	mov	r0, #0
   16918:	str	r0, [fp, #-76]	; 0xffffffb4
   1691c:	mov	r0, #0
   16920:	cmp	r7, #10
   16924:	bhi	178a4 <__assert_fail@plt+0x63e4>
   16928:	add	r1, pc, #28
   1692c:	mov	sl, r6
   16930:	ldr	r6, [sp, #80]	; 0x50
   16934:	ldr	ip, [fp, #-84]	; 0xffffffac
   16938:	mov	r8, #0
   1693c:	mov	r2, #1
   16940:	mov	r3, #0
   16944:	mov	lr, r9
   16948:	ldr	pc, [r1, r7, lsl #2]
   1694c:	andeq	r6, r1, r0, lsr sl
   16950:	andeq	r6, r1, ip, asr sl
   16954:	andeq	r6, r1, r0, lsr #20
   16958:	andeq	r6, r1, r8, lsl sl
   1695c:	andeq	r6, r1, r0, asr sl
   16960:	andeq	r6, r1, r4, lsr #21
   16964:	andeq	r6, r1, r0, asr #20
   16968:	andeq	r6, r1, r0, lsl #22
   1696c:	andeq	r6, r1, r8, ror r9
   16970:	andeq	r6, r1, r8, ror r9
   16974:	andeq	r6, r1, r0, lsr #19
   16978:	movw	r0, #46934	; 0xb756
   1697c:	mov	r1, r7
   16980:	movt	r0, #1
   16984:	bl	182b0 <__assert_fail@plt+0x6df0>
   16988:	str	r0, [sp, #72]	; 0x48
   1698c:	movw	r0, #46936	; 0xb758
   16990:	mov	r1, r7
   16994:	movt	r0, #1
   16998:	bl	182b0 <__assert_fail@plt+0x6df0>
   1699c:	str	r0, [sp, #76]	; 0x4c
   169a0:	str	r5, [fp, #-48]	; 0xffffffd0
   169a4:	mov	r8, #0
   169a8:	mov	r5, r7
   169ac:	tst	r4, #1
   169b0:	bne	169e8 <__assert_fail@plt+0x5528>
   169b4:	ldr	r0, [sp, #72]	; 0x48
   169b8:	ldrb	r0, [r0]
   169bc:	cmp	r0, #0
   169c0:	beq	169e8 <__assert_fail@plt+0x5528>
   169c4:	ldr	r1, [sp, #72]	; 0x48
   169c8:	mov	r8, #0
   169cc:	add	r1, r1, #1
   169d0:	cmp	r8, sl
   169d4:	strbcc	r0, [r6, r8]
   169d8:	ldrb	r0, [r1, r8]
   169dc:	add	r8, r8, #1
   169e0:	cmp	r0, #0
   169e4:	bne	169d0 <__assert_fail@plt+0x5510>
   169e8:	ldr	r7, [sp, #76]	; 0x4c
   169ec:	mov	r0, r7
   169f0:	bl	1134c <strlen@plt>
   169f4:	str	r7, [sp, #92]	; 0x5c
   169f8:	mov	r7, r5
   169fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a00:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16a04:	str	r0, [fp, #-76]	; 0xffffffb4
   16a08:	mov	r2, #1
   16a0c:	mov	r3, r4
   16a10:	mov	lr, r9
   16a14:	b	16b00 <__assert_fail@plt+0x5640>
   16a18:	mov	r0, #1
   16a1c:	b	16a5c <__assert_fail@plt+0x559c>
   16a20:	tst	r4, #1
   16a24:	bne	16a5c <__assert_fail@plt+0x559c>
   16a28:	mov	r2, r0
   16a2c:	b	16a84 <__assert_fail@plt+0x55c4>
   16a30:	mov	r7, #0
   16a34:	mov	r8, #0
   16a38:	mov	r2, r0
   16a3c:	b	16afc <__assert_fail@plt+0x563c>
   16a40:	mov	r0, #1
   16a44:	mov	r8, #0
   16a48:	mov	r7, #5
   16a4c:	b	16ab8 <__assert_fail@plt+0x55f8>
   16a50:	mov	r2, #1
   16a54:	tst	r4, #1
   16a58:	beq	16a84 <__assert_fail@plt+0x55c4>
   16a5c:	mov	r1, #1
   16a60:	mov	r8, #0
   16a64:	mov	r7, #2
   16a68:	mov	r2, r0
   16a6c:	mov	r3, #1
   16a70:	str	r1, [fp, #-76]	; 0xffffffb4
   16a74:	movw	r1, #46936	; 0xb758
   16a78:	movt	r1, #1
   16a7c:	str	r1, [sp, #92]	; 0x5c
   16a80:	b	16b00 <__assert_fail@plt+0x5640>
   16a84:	cmp	sl, #0
   16a88:	mov	r8, #1
   16a8c:	mov	r7, #2
   16a90:	movne	r0, #39	; 0x27
   16a94:	strbne	r0, [r6]
   16a98:	movw	r0, #46936	; 0xb758
   16a9c:	movt	r0, #1
   16aa0:	b	16af0 <__assert_fail@plt+0x5630>
   16aa4:	mov	r7, #5
   16aa8:	tst	r4, #1
   16aac:	beq	16ad4 <__assert_fail@plt+0x5614>
   16ab0:	mov	r0, #1
   16ab4:	mov	r8, #0
   16ab8:	str	r0, [fp, #-76]	; 0xffffffb4
   16abc:	movw	r0, #46932	; 0xb754
   16ac0:	mov	r2, #1
   16ac4:	mov	r3, #1
   16ac8:	movt	r0, #1
   16acc:	str	r0, [sp, #92]	; 0x5c
   16ad0:	b	16b00 <__assert_fail@plt+0x5640>
   16ad4:	cmp	sl, #0
   16ad8:	mov	r8, #1
   16adc:	mov	r2, #1
   16ae0:	movne	r0, #34	; 0x22
   16ae4:	strbne	r0, [r6]
   16ae8:	movw	r0, #46932	; 0xb754
   16aec:	movt	r0, #1
   16af0:	str	r0, [sp, #92]	; 0x5c
   16af4:	mov	r0, #1
   16af8:	str	r0, [fp, #-76]	; 0xffffffb4
   16afc:	mov	r3, #0
   16b00:	ldr	r0, [fp, #16]
   16b04:	str	r3, [fp, #-72]	; 0xffffffb8
   16b08:	str	r7, [fp, #-64]	; 0xffffffc0
   16b0c:	str	r2, [sp, #84]	; 0x54
   16b10:	cmp	r0, #0
   16b14:	movwne	r0, #1
   16b18:	and	r0, r0, r3
   16b1c:	str	r0, [fp, #-88]	; 0xffffffa8
   16b20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b24:	cmp	r0, #0
   16b28:	movwne	r0, #1
   16b2c:	subs	r4, r7, #2
   16b30:	mov	r7, #0
   16b34:	and	r1, r0, r3
   16b38:	str	r4, [fp, #-80]	; 0xffffffb0
   16b3c:	and	r1, r2, r1
   16b40:	str	r1, [sp, #48]	; 0x30
   16b44:	clz	r1, r4
   16b48:	lsr	r1, r1, #5
   16b4c:	and	r1, r1, r3
   16b50:	eor	r3, r3, #1
   16b54:	str	r1, [sp, #64]	; 0x40
   16b58:	mov	r1, r4
   16b5c:	str	r3, [sp, #88]	; 0x58
   16b60:	movwne	r1, #1
   16b64:	orr	r3, r1, r3
   16b68:	and	r1, r1, r2
   16b6c:	and	r0, r0, r1
   16b70:	str	r3, [sp, #68]	; 0x44
   16b74:	str	r1, [fp, #-68]	; 0xffffffbc
   16b78:	str	r0, [fp, #-60]	; 0xffffffc4
   16b7c:	eor	r0, r2, #1
   16b80:	str	r0, [sp, #52]	; 0x34
   16b84:	cmn	lr, #1
   16b88:	beq	16b98 <__assert_fail@plt+0x56d8>
   16b8c:	cmp	r7, lr
   16b90:	bne	16ba4 <__assert_fail@plt+0x56e4>
   16b94:	b	176cc <__assert_fail@plt+0x620c>
   16b98:	ldrb	r0, [ip, r7]
   16b9c:	cmp	r0, #0
   16ba0:	beq	176d4 <__assert_fail@plt+0x6214>
   16ba4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16ba8:	mov	r9, #0
   16bac:	str	r5, [fp, #-48]	; 0xffffffd0
   16bb0:	cmp	r0, #0
   16bb4:	beq	16be8 <__assert_fail@plt+0x5728>
   16bb8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16bbc:	add	r4, r7, r0
   16bc0:	cmp	r0, #2
   16bc4:	bcc	16be0 <__assert_fail@plt+0x5720>
   16bc8:	cmn	lr, #1
   16bcc:	bne	16be0 <__assert_fail@plt+0x5720>
   16bd0:	mov	r0, ip
   16bd4:	bl	1134c <strlen@plt>
   16bd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   16bdc:	mov	lr, r0
   16be0:	cmp	r4, lr
   16be4:	bls	16bf0 <__assert_fail@plt+0x5730>
   16be8:	mov	r0, #0
   16bec:	b	16c30 <__assert_fail@plt+0x5770>
   16bf0:	ldr	r1, [sp, #92]	; 0x5c
   16bf4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16bf8:	add	r0, ip, r7
   16bfc:	mov	r4, lr
   16c00:	bl	11244 <memcmp@plt>
   16c04:	ldr	r2, [sp, #88]	; 0x58
   16c08:	cmp	r0, #0
   16c0c:	mov	r1, r0
   16c10:	movwne	r1, #1
   16c14:	orr	r1, r1, r2
   16c18:	tst	r1, #1
   16c1c:	beq	17764 <__assert_fail@plt+0x62a4>
   16c20:	ldr	ip, [fp, #-84]	; 0xffffffac
   16c24:	clz	r0, r0
   16c28:	mov	lr, r4
   16c2c:	lsr	r0, r0, #5
   16c30:	str	r0, [fp, #-52]	; 0xffffffcc
   16c34:	ldrb	r5, [ip, r7]
   16c38:	cmp	r5, #126	; 0x7e
   16c3c:	bhi	16ff4 <__assert_fail@plt+0x5b34>
   16c40:	add	r3, pc, #16
   16c44:	mov	r4, #1
   16c48:	mov	r2, #110	; 0x6e
   16c4c:	mov	r0, #97	; 0x61
   16c50:	mov	r1, #0
   16c54:	ldr	pc, [r3, r5, lsl #2]
   16c58:	strdeq	r6, [r1], -r0
   16c5c:	strdeq	r6, [r1], -r4
   16c60:	strdeq	r6, [r1], -r4
   16c64:	strdeq	r6, [r1], -r4
   16c68:	strdeq	r6, [r1], -r4
   16c6c:	strdeq	r6, [r1], -r4
   16c70:	strdeq	r6, [r1], -r4
   16c74:	andeq	r7, r1, r8, lsr #1
   16c78:	ldrdeq	r6, [r1], -r0
   16c7c:	andeq	r6, r1, r8, asr #29
   16c80:	ldrdeq	r6, [r1], -ip
   16c84:	andeq	r6, r1, ip, asr pc
   16c88:	andeq	r6, r1, r0, asr #29
   16c8c:	ldrdeq	r6, [r1], -r8
   16c90:	strdeq	r6, [r1], -r4
   16c94:	strdeq	r6, [r1], -r4
   16c98:	strdeq	r6, [r1], -r4
   16c9c:	strdeq	r6, [r1], -r4
   16ca0:	strdeq	r6, [r1], -r4
   16ca4:	strdeq	r6, [r1], -r4
   16ca8:	strdeq	r6, [r1], -r4
   16cac:	strdeq	r6, [r1], -r4
   16cb0:	strdeq	r6, [r1], -r4
   16cb4:	strdeq	r6, [r1], -r4
   16cb8:	strdeq	r6, [r1], -r4
   16cbc:	strdeq	r6, [r1], -r4
   16cc0:	strdeq	r6, [r1], -r4
   16cc4:	strdeq	r6, [r1], -r4
   16cc8:	strdeq	r6, [r1], -r4
   16ccc:	strdeq	r6, [r1], -r4
   16cd0:	strdeq	r6, [r1], -r4
   16cd4:	strdeq	r6, [r1], -r4
   16cd8:	andeq	r7, r1, r0, rrx
   16cdc:	andeq	r7, r1, r4, rrx
   16ce0:	andeq	r7, r1, r4, rrx
   16ce4:	andeq	r6, r1, r8, ror #28
   16ce8:	andeq	r7, r1, r4, rrx
   16cec:	andeq	r6, r1, r4, asr lr
   16cf0:	andeq	r7, r1, r4, rrx
   16cf4:	andeq	r6, r1, r4, ror #30
   16cf8:	andeq	r7, r1, r4, rrx
   16cfc:	andeq	r7, r1, r4, rrx
   16d00:	andeq	r7, r1, r4, rrx
   16d04:	andeq	r6, r1, r4, asr lr
   16d08:	andeq	r6, r1, r4, asr lr
   16d0c:	andeq	r6, r1, r4, asr lr
   16d10:	andeq	r6, r1, r4, asr lr
   16d14:	andeq	r6, r1, r4, asr lr
   16d18:	andeq	r6, r1, r4, asr lr
   16d1c:	andeq	r6, r1, r4, asr lr
   16d20:	andeq	r6, r1, r4, asr lr
   16d24:	andeq	r6, r1, r4, asr lr
   16d28:	andeq	r6, r1, r4, asr lr
   16d2c:	andeq	r6, r1, r4, asr lr
   16d30:	andeq	r6, r1, r4, asr lr
   16d34:	andeq	r6, r1, r4, asr lr
   16d38:	andeq	r6, r1, r4, asr lr
   16d3c:	andeq	r6, r1, r4, asr lr
   16d40:	andeq	r6, r1, r4, asr lr
   16d44:	andeq	r7, r1, r4, rrx
   16d48:	andeq	r7, r1, r4, rrx
   16d4c:	andeq	r7, r1, r4, rrx
   16d50:	andeq	r7, r1, r4, rrx
   16d54:	andeq	r6, r1, r0, lsr pc
   16d58:	strdeq	r6, [r1], -r4
   16d5c:	andeq	r6, r1, r4, asr lr
   16d60:	andeq	r6, r1, r4, asr lr
   16d64:	andeq	r6, r1, r4, asr lr
   16d68:	andeq	r6, r1, r4, asr lr
   16d6c:	andeq	r6, r1, r4, asr lr
   16d70:	andeq	r6, r1, r4, asr lr
   16d74:	andeq	r6, r1, r4, asr lr
   16d78:	andeq	r6, r1, r4, asr lr
   16d7c:	andeq	r6, r1, r4, asr lr
   16d80:	andeq	r6, r1, r4, asr lr
   16d84:	andeq	r6, r1, r4, asr lr
   16d88:	andeq	r6, r1, r4, asr lr
   16d8c:	andeq	r6, r1, r4, asr lr
   16d90:	andeq	r6, r1, r4, asr lr
   16d94:	andeq	r6, r1, r4, asr lr
   16d98:	andeq	r6, r1, r4, asr lr
   16d9c:	andeq	r6, r1, r4, asr lr
   16da0:	andeq	r6, r1, r4, asr lr
   16da4:	andeq	r6, r1, r4, asr lr
   16da8:	andeq	r6, r1, r4, asr lr
   16dac:	andeq	r6, r1, r4, asr lr
   16db0:	andeq	r6, r1, r4, asr lr
   16db4:	andeq	r6, r1, r4, asr lr
   16db8:	andeq	r6, r1, r4, asr lr
   16dbc:	andeq	r6, r1, r4, asr lr
   16dc0:	andeq	r6, r1, r4, asr lr
   16dc4:	andeq	r7, r1, r4, rrx
   16dc8:	muleq	r1, ip, lr
   16dcc:	andeq	r6, r1, r4, asr lr
   16dd0:	andeq	r7, r1, r4, rrx
   16dd4:	andeq	r6, r1, r4, asr lr
   16dd8:	andeq	r7, r1, r4, rrx
   16ddc:	andeq	r6, r1, r4, asr lr
   16de0:	andeq	r6, r1, r4, asr lr
   16de4:	andeq	r6, r1, r4, asr lr
   16de8:	andeq	r6, r1, r4, asr lr
   16dec:	andeq	r6, r1, r4, asr lr
   16df0:	andeq	r6, r1, r4, asr lr
   16df4:	andeq	r6, r1, r4, asr lr
   16df8:	andeq	r6, r1, r4, asr lr
   16dfc:	andeq	r6, r1, r4, asr lr
   16e00:	andeq	r6, r1, r4, asr lr
   16e04:	andeq	r6, r1, r4, asr lr
   16e08:	andeq	r6, r1, r4, asr lr
   16e0c:	andeq	r6, r1, r4, asr lr
   16e10:	andeq	r6, r1, r4, asr lr
   16e14:	andeq	r6, r1, r4, asr lr
   16e18:	andeq	r6, r1, r4, asr lr
   16e1c:	andeq	r6, r1, r4, asr lr
   16e20:	andeq	r6, r1, r4, asr lr
   16e24:	andeq	r6, r1, r4, asr lr
   16e28:	andeq	r6, r1, r4, asr lr
   16e2c:	andeq	r6, r1, r4, asr lr
   16e30:	andeq	r6, r1, r4, asr lr
   16e34:	andeq	r6, r1, r4, asr lr
   16e38:	andeq	r6, r1, r4, asr lr
   16e3c:	andeq	r6, r1, r4, asr lr
   16e40:	andeq	r6, r1, r4, asr lr
   16e44:	andeq	r6, r1, ip, ror lr
   16e48:	andeq	r7, r1, r4, rrx
   16e4c:	andeq	r6, r1, ip, ror lr
   16e50:	andeq	r6, r1, r8, ror #28
   16e54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16e58:	cmp	r0, #0
   16e5c:	beq	170bc <__assert_fail@plt+0x5bfc>
   16e60:	ldr	r0, [fp, #16]
   16e64:	b	170c0 <__assert_fail@plt+0x5c00>
   16e68:	mov	r4, #0
   16e6c:	cmp	r7, #0
   16e70:	beq	17060 <__assert_fail@plt+0x5ba0>
   16e74:	mov	r9, #0
   16e78:	b	16e54 <__assert_fail@plt+0x5994>
   16e7c:	mov	r4, #0
   16e80:	cmn	lr, #1
   16e84:	beq	17044 <__assert_fail@plt+0x5b84>
   16e88:	cmp	r7, #0
   16e8c:	bne	16e74 <__assert_fail@plt+0x59b4>
   16e90:	cmp	lr, #1
   16e94:	beq	17060 <__assert_fail@plt+0x5ba0>
   16e98:	b	16e74 <__assert_fail@plt+0x59b4>
   16e9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16ea0:	cmp	r0, #2
   16ea4:	bne	17084 <__assert_fail@plt+0x5bc4>
   16ea8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16eac:	tst	r0, #1
   16eb0:	bne	17780 <__assert_fail@plt+0x62c0>
   16eb4:	mov	r9, #0
   16eb8:	mov	r0, #92	; 0x5c
   16ebc:	b	17098 <__assert_fail@plt+0x5bd8>
   16ec0:	mov	r0, #102	; 0x66
   16ec4:	b	170a8 <__assert_fail@plt+0x5be8>
   16ec8:	mov	r2, #116	; 0x74
   16ecc:	b	16edc <__assert_fail@plt+0x5a1c>
   16ed0:	mov	r0, #98	; 0x62
   16ed4:	b	170a8 <__assert_fail@plt+0x5be8>
   16ed8:	mov	r2, #114	; 0x72
   16edc:	ldr	r0, [sp, #68]	; 0x44
   16ee0:	tst	r0, #1
   16ee4:	mov	r0, r2
   16ee8:	bne	170a8 <__assert_fail@plt+0x5be8>
   16eec:	b	17780 <__assert_fail@plt+0x62c0>
   16ef0:	ldr	r0, [sp, #84]	; 0x54
   16ef4:	tst	r0, #1
   16ef8:	beq	17198 <__assert_fail@plt+0x5cd8>
   16efc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16f00:	tst	r0, #1
   16f04:	bne	17890 <__assert_fail@plt+0x63d0>
   16f08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f0c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16f10:	cmp	r0, #2
   16f14:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16f18:	movwne	r0, #1
   16f1c:	orr	r0, r0, r2
   16f20:	tst	r0, #1
   16f24:	beq	17568 <__assert_fail@plt+0x60a8>
   16f28:	mov	r0, r8
   16f2c:	b	1759c <__assert_fail@plt+0x60dc>
   16f30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f34:	mov	r9, #0
   16f38:	mov	r5, #63	; 0x3f
   16f3c:	cmp	r0, #5
   16f40:	beq	1734c <__assert_fail@plt+0x5e8c>
   16f44:	cmp	r0, #2
   16f48:	bne	173f0 <__assert_fail@plt+0x5f30>
   16f4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16f50:	tst	r0, #1
   16f54:	beq	173f4 <__assert_fail@plt+0x5f34>
   16f58:	b	17780 <__assert_fail@plt+0x62c0>
   16f5c:	mov	r0, #118	; 0x76
   16f60:	b	170a8 <__assert_fail@plt+0x5be8>
   16f64:	mov	r0, #1
   16f68:	mov	r5, #39	; 0x27
   16f6c:	str	r0, [sp, #60]	; 0x3c
   16f70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f74:	cmp	r0, #2
   16f78:	bne	16fec <__assert_fail@plt+0x5b2c>
   16f7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16f80:	tst	r0, #1
   16f84:	bne	17780 <__assert_fail@plt+0x62c0>
   16f88:	ldr	r2, [sp, #56]	; 0x38
   16f8c:	clz	r1, sl
   16f90:	mov	r9, #0
   16f94:	lsr	r1, r1, #5
   16f98:	cmp	r2, #0
   16f9c:	mov	r0, r2
   16fa0:	movwne	r0, #1
   16fa4:	orrs	r0, r0, r1
   16fa8:	moveq	r2, sl
   16fac:	moveq	sl, r0
   16fb0:	cmp	r8, sl
   16fb4:	str	r2, [sp, #56]	; 0x38
   16fb8:	movcc	r0, #39	; 0x27
   16fbc:	strbcc	r0, [r6, r8]
   16fc0:	add	r0, r8, #1
   16fc4:	cmp	r0, sl
   16fc8:	movcc	r1, #92	; 0x5c
   16fcc:	strbcc	r1, [r6, r0]
   16fd0:	add	r0, r8, #2
   16fd4:	add	r8, r8, #3
   16fd8:	cmp	r0, sl
   16fdc:	movcc	r1, #39	; 0x27
   16fe0:	strbcc	r1, [r6, r0]
   16fe4:	mov	r0, #0
   16fe8:	str	r0, [fp, #-56]	; 0xffffffc8
   16fec:	mov	r4, #1
   16ff0:	b	16e54 <__assert_fail@plt+0x5994>
   16ff4:	ldr	r0, [sp, #40]	; 0x28
   16ff8:	cmp	r0, #1
   16ffc:	bne	171c4 <__assert_fail@plt+0x5d04>
   17000:	str	lr, [sp, #28]
   17004:	bl	11334 <__ctype_b_loc@plt>
   17008:	ldr	r0, [r0]
   1700c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17010:	mov	r1, #1
   17014:	add	r0, r0, r5, lsl #1
   17018:	ldrb	r0, [r0, #1]
   1701c:	ubfx	r4, r0, #6, #1
   17020:	ldr	r0, [sp, #52]	; 0x34
   17024:	mov	r2, r1
   17028:	cmp	r1, #1
   1702c:	orr	r0, r4, r0
   17030:	bhi	173fc <__assert_fail@plt+0x5f3c>
   17034:	tst	r0, #1
   17038:	beq	173fc <__assert_fail@plt+0x5f3c>
   1703c:	ldr	lr, [sp, #28]
   17040:	b	16e54 <__assert_fail@plt+0x5994>
   17044:	cmp	r7, #0
   17048:	ldrbeq	r0, [ip, #1]
   1704c:	cmpeq	r0, #0
   17050:	beq	17060 <__assert_fail@plt+0x5ba0>
   17054:	mvn	lr, #0
   17058:	mov	r9, #0
   1705c:	b	16e54 <__assert_fail@plt+0x5994>
   17060:	mov	r1, #1
   17064:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17068:	cmp	r0, #2
   1706c:	bne	1707c <__assert_fail@plt+0x5bbc>
   17070:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17074:	tst	r0, #1
   17078:	bne	17780 <__assert_fail@plt+0x62c0>
   1707c:	mov	r4, r1
   17080:	b	16e54 <__assert_fail@plt+0x5994>
   17084:	ldr	r1, [sp, #48]	; 0x30
   17088:	mov	r9, #0
   1708c:	mov	r0, #92	; 0x5c
   17090:	cmp	r1, #0
   17094:	beq	170a8 <__assert_fail@plt+0x5be8>
   17098:	mov	r4, #0
   1709c:	cmp	r9, #0
   170a0:	beq	17634 <__assert_fail@plt+0x6174>
   170a4:	b	17670 <__assert_fail@plt+0x61b0>
   170a8:	ldr	r1, [sp, #84]	; 0x54
   170ac:	mov	r4, #0
   170b0:	mov	r9, #0
   170b4:	tst	r1, #1
   170b8:	bne	170f8 <__assert_fail@plt+0x5c38>
   170bc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   170c0:	cmp	r0, #0
   170c4:	mov	r0, r5
   170c8:	beq	170ec <__assert_fail@plt+0x5c2c>
   170cc:	ldr	r1, [fp, #16]
   170d0:	ubfx	r0, r5, #5, #3
   170d4:	mov	r2, #1
   170d8:	ldr	r0, [r1, r0, lsl #2]
   170dc:	and	r1, r5, #31
   170e0:	tst	r0, r2, lsl r1
   170e4:	mov	r0, r5
   170e8:	bne	170f8 <__assert_fail@plt+0x5c38>
   170ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   170f0:	cmp	r1, #0
   170f4:	beq	1762c <__assert_fail@plt+0x616c>
   170f8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   170fc:	tst	r1, #1
   17100:	bne	17758 <__assert_fail@plt+0x6298>
   17104:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17108:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1710c:	cmp	r1, #2
   17110:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17114:	movwne	r1, #1
   17118:	orr	r1, r1, r2
   1711c:	tst	r1, #1
   17120:	beq	1712c <__assert_fail@plt+0x5c6c>
   17124:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17128:	b	17168 <__assert_fail@plt+0x5ca8>
   1712c:	cmp	r8, sl
   17130:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17134:	movcc	r1, #39	; 0x27
   17138:	strbcc	r1, [r6, r8]
   1713c:	add	r1, r8, #1
   17140:	cmp	r1, sl
   17144:	movcc	r2, #36	; 0x24
   17148:	strbcc	r2, [r6, r1]
   1714c:	add	r1, r8, #2
   17150:	add	r8, r8, #3
   17154:	cmp	r1, sl
   17158:	movcc	r2, #39	; 0x27
   1715c:	strbcc	r2, [r6, r1]
   17160:	mov	r1, #1
   17164:	str	r1, [fp, #-56]	; 0xffffffc8
   17168:	cmp	r8, sl
   1716c:	movcc	r1, #92	; 0x5c
   17170:	strbcc	r1, [r6, r8]
   17174:	add	r8, r8, #1
   17178:	cmp	r8, sl
   1717c:	and	r5, r5, r4
   17180:	add	r7, r7, #1
   17184:	strbcc	r0, [r6, r8]
   17188:	add	r8, r8, #1
   1718c:	cmn	lr, #1
   17190:	bne	16b8c <__assert_fail@plt+0x56cc>
   17194:	b	16b98 <__assert_fail@plt+0x56d8>
   17198:	ldr	r0, [sp, #36]	; 0x24
   1719c:	mov	r4, #0
   171a0:	mov	r9, #0
   171a4:	mov	r5, #0
   171a8:	cmp	r0, #0
   171ac:	beq	170bc <__assert_fail@plt+0x5bfc>
   171b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   171b4:	add	r7, r7, #1
   171b8:	cmn	lr, #1
   171bc:	bne	16b8c <__assert_fail@plt+0x56cc>
   171c0:	b	16b98 <__assert_fail@plt+0x56d8>
   171c4:	mov	r0, #0
   171c8:	cmn	lr, #1
   171cc:	str	r0, [fp, #-36]	; 0xffffffdc
   171d0:	str	r0, [fp, #-40]	; 0xffffffd8
   171d4:	bne	171e8 <__assert_fail@plt+0x5d28>
   171d8:	mov	r0, ip
   171dc:	bl	1134c <strlen@plt>
   171e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   171e4:	mov	lr, r0
   171e8:	add	r0, ip, r7
   171ec:	mov	r4, #1
   171f0:	mov	r6, #0
   171f4:	str	lr, [sp, #28]
   171f8:	str	r0, [sp, #24]
   171fc:	sub	r0, fp, #40	; 0x28
   17200:	mov	r3, r0
   17204:	str	r6, [sp, #44]	; 0x2c
   17208:	add	r6, r6, r7
   1720c:	sub	r0, fp, #44	; 0x2c
   17210:	add	r1, ip, r6
   17214:	sub	r2, lr, r6
   17218:	bl	1a430 <__assert_fail@plt+0x8f70>
   1721c:	cmp	r0, #0
   17220:	beq	176b8 <__assert_fail@plt+0x61f8>
   17224:	cmn	r0, #1
   17228:	beq	17678 <__assert_fail@plt+0x61b8>
   1722c:	ldr	lr, [sp, #28]
   17230:	cmn	r0, #2
   17234:	beq	17680 <__assert_fail@plt+0x61c0>
   17238:	ldr	r2, [sp, #64]	; 0x40
   1723c:	cmp	r0, #2
   17240:	mov	r1, #0
   17244:	movwcc	r1, #1
   17248:	eor	r2, r2, #1
   1724c:	orrs	r1, r2, r1
   17250:	bne	17310 <__assert_fail@plt+0x5e50>
   17254:	ldr	r1, [sp, #44]	; 0x2c
   17258:	ldr	r2, [sp, #24]
   1725c:	add	r1, r2, r1
   17260:	mov	r2, #1
   17264:	ldrb	r3, [r1, r2]
   17268:	sub	r3, r3, #91	; 0x5b
   1726c:	cmp	r3, #33	; 0x21
   17270:	bhi	17304 <__assert_fail@plt+0x5e44>
   17274:	add	r6, pc, #0
   17278:	ldr	pc, [r6, r3, lsl #2]
   1727c:	andeq	r7, r1, r8, ror r7
   17280:	andeq	r7, r1, r8, ror r7
   17284:	andeq	r7, r1, r4, lsl #6
   17288:	andeq	r7, r1, r8, ror r7
   1728c:	andeq	r7, r1, r4, lsl #6
   17290:	andeq	r7, r1, r8, ror r7
   17294:	andeq	r7, r1, r4, lsl #6
   17298:	andeq	r7, r1, r4, lsl #6
   1729c:	andeq	r7, r1, r4, lsl #6
   172a0:	andeq	r7, r1, r4, lsl #6
   172a4:	andeq	r7, r1, r4, lsl #6
   172a8:	andeq	r7, r1, r4, lsl #6
   172ac:	andeq	r7, r1, r4, lsl #6
   172b0:	andeq	r7, r1, r4, lsl #6
   172b4:	andeq	r7, r1, r4, lsl #6
   172b8:	andeq	r7, r1, r4, lsl #6
   172bc:	andeq	r7, r1, r4, lsl #6
   172c0:	andeq	r7, r1, r4, lsl #6
   172c4:	andeq	r7, r1, r4, lsl #6
   172c8:	andeq	r7, r1, r4, lsl #6
   172cc:	andeq	r7, r1, r4, lsl #6
   172d0:	andeq	r7, r1, r4, lsl #6
   172d4:	andeq	r7, r1, r4, lsl #6
   172d8:	andeq	r7, r1, r4, lsl #6
   172dc:	andeq	r7, r1, r4, lsl #6
   172e0:	andeq	r7, r1, r4, lsl #6
   172e4:	andeq	r7, r1, r4, lsl #6
   172e8:	andeq	r7, r1, r4, lsl #6
   172ec:	andeq	r7, r1, r4, lsl #6
   172f0:	andeq	r7, r1, r4, lsl #6
   172f4:	andeq	r7, r1, r4, lsl #6
   172f8:	andeq	r7, r1, r4, lsl #6
   172fc:	andeq	r7, r1, r4, lsl #6
   17300:	andeq	r7, r1, r8, ror r7
   17304:	add	r2, r2, #1
   17308:	cmp	r2, r0
   1730c:	bcc	17264 <__assert_fail@plt+0x5da4>
   17310:	ldr	r6, [sp, #44]	; 0x2c
   17314:	add	r6, r0, r6
   17318:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1731c:	bl	1128c <iswprint@plt>
   17320:	cmp	r0, #0
   17324:	movwne	r0, #1
   17328:	and	r4, r4, r0
   1732c:	sub	r0, fp, #40	; 0x28
   17330:	bl	11238 <mbsinit@plt>
   17334:	ldr	lr, [sp, #28]
   17338:	ldr	ip, [fp, #-84]	; 0xffffffac
   1733c:	sub	r3, fp, #40	; 0x28
   17340:	cmp	r0, #0
   17344:	beq	17204 <__assert_fail@plt+0x5d44>
   17348:	b	176c0 <__assert_fail@plt+0x6200>
   1734c:	ldr	r0, [sp, #32]
   17350:	cmp	r0, #0
   17354:	beq	173f0 <__assert_fail@plt+0x5f30>
   17358:	add	r0, r7, #2
   1735c:	cmp	r0, lr
   17360:	bcs	173f0 <__assert_fail@plt+0x5f30>
   17364:	add	r1, ip, r7
   17368:	ldrb	r1, [r1, #1]
   1736c:	cmp	r1, #63	; 0x3f
   17370:	bne	173f0 <__assert_fail@plt+0x5f30>
   17374:	ldrb	r5, [ip, r0]
   17378:	sub	r1, r5, #33	; 0x21
   1737c:	cmp	r1, #29
   17380:	bhi	173f0 <__assert_fail@plt+0x5f30>
   17384:	movw	r3, #20929	; 0x51c1
   17388:	mov	r2, #1
   1738c:	movt	r3, #14336	; 0x3800
   17390:	tst	r3, r2, lsl r1
   17394:	beq	173f0 <__assert_fail@plt+0x5f30>
   17398:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1739c:	tst	r1, #1
   173a0:	bne	17898 <__assert_fail@plt+0x63d8>
   173a4:	cmp	r8, sl
   173a8:	mov	r7, r0
   173ac:	mov	r4, #0
   173b0:	movcc	r1, #63	; 0x3f
   173b4:	strbcc	r1, [r6, r8]
   173b8:	add	r1, r8, #1
   173bc:	cmp	r1, sl
   173c0:	movcc	r2, #34	; 0x22
   173c4:	strbcc	r2, [r6, r1]
   173c8:	add	r1, r8, #2
   173cc:	cmp	r1, sl
   173d0:	movcc	r2, #34	; 0x22
   173d4:	strbcc	r2, [r6, r1]
   173d8:	add	r1, r8, #3
   173dc:	add	r8, r8, #4
   173e0:	cmp	r1, sl
   173e4:	movcc	r2, #63	; 0x3f
   173e8:	strbcc	r2, [r6, r1]
   173ec:	b	16e54 <__assert_fail@plt+0x5994>
   173f0:	mov	r5, #63	; 0x3f
   173f4:	mov	r4, #0
   173f8:	b	16e54 <__assert_fail@plt+0x5994>
   173fc:	add	r1, r2, r7
   17400:	ldr	lr, [sp, #28]
   17404:	mov	r3, #0
   17408:	str	r1, [sp, #44]	; 0x2c
   1740c:	add	r1, r7, #1
   17410:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17414:	tst	r0, #1
   17418:	bne	174ec <__assert_fail@plt+0x602c>
   1741c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17420:	tst	r2, #1
   17424:	bne	177e0 <__assert_fail@plt+0x6320>
   17428:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1742c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17430:	cmp	r7, #2
   17434:	movwne	r3, #1
   17438:	orr	r3, r3, r2
   1743c:	tst	r3, #1
   17440:	bne	1747c <__assert_fail@plt+0x5fbc>
   17444:	cmp	r8, sl
   17448:	add	r3, r8, #1
   1744c:	movcc	r2, #39	; 0x27
   17450:	strbcc	r2, [r6, r8]
   17454:	cmp	r3, sl
   17458:	movcc	r2, #36	; 0x24
   1745c:	strbcc	r2, [r6, r3]
   17460:	add	r3, r8, #2
   17464:	add	r8, r8, #3
   17468:	cmp	r3, sl
   1746c:	movcc	r2, #39	; 0x27
   17470:	strbcc	r2, [r6, r3]
   17474:	mov	r2, #1
   17478:	str	r2, [fp, #-56]	; 0xffffffc8
   1747c:	cmp	r8, sl
   17480:	movcc	r3, #92	; 0x5c
   17484:	strbcc	r3, [r6, r8]
   17488:	add	r3, r8, #1
   1748c:	cmp	r3, sl
   17490:	andcc	r7, r5, #192	; 0xc0
   17494:	movcc	r2, #48	; 0x30
   17498:	orrcc	r7, r2, r7, lsr #6
   1749c:	strbcc	r7, [r6, r3]
   174a0:	add	r3, r8, #2
   174a4:	add	r8, r8, #3
   174a8:	cmp	r3, sl
   174ac:	lsrcc	r7, r5, #3
   174b0:	movcc	r2, #6
   174b4:	bficc	r7, r2, #3, #29
   174b8:	mov	r2, #6
   174bc:	strbcc	r7, [r6, r3]
   174c0:	bfi	r5, r2, #3, #29
   174c4:	mov	r3, #1
   174c8:	b	17510 <__assert_fail@plt+0x6050>
   174cc:	cmp	r8, sl
   174d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   174d4:	strbcc	r5, [r6, r8]
   174d8:	add	r8, r8, #1
   174dc:	ldrb	r5, [ip, r1]
   174e0:	add	r1, r1, #1
   174e4:	tst	r0, #1
   174e8:	beq	1741c <__assert_fail@plt+0x5f5c>
   174ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   174f0:	tst	r2, #1
   174f4:	beq	17508 <__assert_fail@plt+0x6048>
   174f8:	cmp	r8, sl
   174fc:	movcc	r7, #92	; 0x5c
   17500:	strbcc	r7, [r6, r8]
   17504:	add	r8, r8, #1
   17508:	mov	r2, #0
   1750c:	str	r2, [fp, #-52]	; 0xffffffcc
   17510:	ldr	r2, [sp, #44]	; 0x2c
   17514:	and	r9, r3, #1
   17518:	cmp	r2, r1
   1751c:	bls	1761c <__assert_fail@plt+0x615c>
   17520:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17524:	cmp	r9, #0
   17528:	movwne	r9, #1
   1752c:	mvn	r7, r2
   17530:	orr	r7, r7, r9
   17534:	tst	r7, #1
   17538:	bne	174cc <__assert_fail@plt+0x600c>
   1753c:	cmp	r8, sl
   17540:	movcc	r7, #39	; 0x27
   17544:	strbcc	r7, [r6, r8]
   17548:	add	r7, r8, #1
   1754c:	add	r8, r8, #2
   17550:	cmp	r7, sl
   17554:	movcc	r2, #39	; 0x27
   17558:	strbcc	r2, [r6, r7]
   1755c:	mov	r2, #0
   17560:	str	r2, [fp, #-56]	; 0xffffffc8
   17564:	b	174cc <__assert_fail@plt+0x600c>
   17568:	cmp	r8, sl
   1756c:	mov	r2, #1
   17570:	movcc	r0, #39	; 0x27
   17574:	strbcc	r0, [r6, r8]
   17578:	add	r0, r8, #1
   1757c:	cmp	r0, sl
   17580:	movcc	r1, #36	; 0x24
   17584:	strbcc	r1, [r6, r0]
   17588:	add	r0, r8, #2
   1758c:	cmp	r0, sl
   17590:	movcc	r1, #39	; 0x27
   17594:	strbcc	r1, [r6, r0]
   17598:	add	r0, r8, #3
   1759c:	cmp	r0, sl
   175a0:	add	r8, r0, #1
   175a4:	str	r2, [fp, #-56]	; 0xffffffc8
   175a8:	movcc	r1, #92	; 0x5c
   175ac:	strbcc	r1, [r6, r0]
   175b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   175b4:	cmp	r1, #2
   175b8:	beq	1760c <__assert_fail@plt+0x614c>
   175bc:	add	r1, r7, #1
   175c0:	mov	r4, #0
   175c4:	mov	r9, #1
   175c8:	mov	r5, #48	; 0x30
   175cc:	cmp	r1, lr
   175d0:	bcs	16e54 <__assert_fail@plt+0x5994>
   175d4:	ldrb	r1, [ip, r1]
   175d8:	sub	r1, r1, #48	; 0x30
   175dc:	uxtb	r1, r1
   175e0:	cmp	r1, #9
   175e4:	bhi	16e54 <__assert_fail@plt+0x5994>
   175e8:	cmp	r8, sl
   175ec:	movcc	r1, #48	; 0x30
   175f0:	strbcc	r1, [r6, r8]
   175f4:	add	r1, r0, #2
   175f8:	add	r8, r0, #3
   175fc:	cmp	r1, sl
   17600:	movcc	r2, #48	; 0x30
   17604:	strbcc	r2, [r6, r1]
   17608:	b	16e54 <__assert_fail@plt+0x5994>
   1760c:	mov	r0, #48	; 0x30
   17610:	mov	r9, #1
   17614:	mov	r4, #0
   17618:	b	170ec <__assert_fail@plt+0x5c2c>
   1761c:	cmp	r9, #0
   17620:	sub	r7, r1, #1
   17624:	mov	r0, r5
   17628:	movwne	r9, #1
   1762c:	cmp	r9, #0
   17630:	bne	17670 <__assert_fail@plt+0x61b0>
   17634:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17638:	tst	r1, #1
   1763c:	beq	17670 <__assert_fail@plt+0x61b0>
   17640:	cmp	r8, sl
   17644:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17648:	movcc	r1, #39	; 0x27
   1764c:	strbcc	r1, [r6, r8]
   17650:	add	r1, r8, #1
   17654:	add	r8, r8, #2
   17658:	cmp	r1, sl
   1765c:	movcc	r2, #39	; 0x27
   17660:	strbcc	r2, [r6, r1]
   17664:	mov	r1, #0
   17668:	str	r1, [fp, #-56]	; 0xffffffc8
   1766c:	b	17178 <__assert_fail@plt+0x5cb8>
   17670:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17674:	b	17178 <__assert_fail@plt+0x5cb8>
   17678:	mov	r4, #0
   1767c:	b	176b8 <__assert_fail@plt+0x61f8>
   17680:	mov	r4, #0
   17684:	cmp	lr, r6
   17688:	bls	176b8 <__assert_fail@plt+0x61f8>
   1768c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17690:	ldr	r6, [sp, #44]	; 0x2c
   17694:	ldr	r0, [sp, #24]
   17698:	ldrb	r0, [r0, r6]
   1769c:	cmp	r0, #0
   176a0:	beq	176c0 <__assert_fail@plt+0x6200>
   176a4:	add	r6, r6, #1
   176a8:	add	r0, r7, r6
   176ac:	cmp	r0, lr
   176b0:	bcc	17694 <__assert_fail@plt+0x61d4>
   176b4:	b	176c0 <__assert_fail@plt+0x6200>
   176b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   176bc:	ldr	r6, [sp, #44]	; 0x2c
   176c0:	mov	r1, r6
   176c4:	ldr	r6, [sp, #80]	; 0x50
   176c8:	b	17020 <__assert_fail@plt+0x5b60>
   176cc:	mov	lr, r7
   176d0:	b	176d8 <__assert_fail@plt+0x6218>
   176d4:	mvn	lr, #0
   176d8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   176dc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   176e0:	eor	r0, r7, #2
   176e4:	orr	r0, r0, r8
   176e8:	clz	r0, r0
   176ec:	lsr	r0, r0, #5
   176f0:	tst	r1, r0
   176f4:	bne	17780 <__assert_fail@plt+0x62c0>
   176f8:	mov	r0, r1
   176fc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17700:	cmp	r7, #2
   17704:	movwne	r1, #1
   17708:	orr	r0, r0, r1
   1770c:	tst	r0, #1
   17710:	ldreq	r0, [sp, #60]	; 0x3c
   17714:	eoreq	r0, r0, #1
   17718:	tsteq	r0, #1
   1771c:	bne	1782c <__assert_fail@plt+0x636c>
   17720:	mov	r9, lr
   17724:	tst	r5, #1
   17728:	bne	177e8 <__assert_fail@plt+0x6328>
   1772c:	ldr	r6, [sp, #56]	; 0x38
   17730:	mov	r4, #0
   17734:	cmp	r6, #0
   17738:	beq	17824 <__assert_fail@plt+0x6364>
   1773c:	ldr	r0, [sp, #84]	; 0x54
   17740:	mov	r1, #0
   17744:	cmp	sl, #0
   17748:	mov	r5, #0
   1774c:	str	r1, [fp, #-72]	; 0xffffffb8
   17750:	beq	16920 <__assert_fail@plt+0x5460>
   17754:	b	1782c <__assert_fail@plt+0x636c>
   17758:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1775c:	ldr	r2, [sp, #84]	; 0x54
   17760:	b	17788 <__assert_fail@plt+0x62c8>
   17764:	ldr	ip, [fp, #-84]	; 0xffffffac
   17768:	mov	r2, #1
   1776c:	mov	lr, r4
   17770:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17774:	b	17788 <__assert_fail@plt+0x62c8>
   17778:	ldr	r6, [sp, #80]	; 0x50
   1777c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17780:	ldr	r2, [sp, #84]	; 0x54
   17784:	mov	r7, #2
   17788:	mov	r0, #0
   1778c:	ldr	r1, [fp, #12]
   17790:	tst	r2, #1
   17794:	mov	r2, r7
   17798:	mov	r3, lr
   1779c:	str	r0, [sp, #8]
   177a0:	ldr	r0, [sp, #72]	; 0x48
   177a4:	movwne	r2, #4
   177a8:	cmp	r7, #2
   177ac:	movne	r2, r7
   177b0:	str	r2, [sp]
   177b4:	mov	r2, ip
   177b8:	bic	r1, r1, #2
   177bc:	str	r0, [sp, #12]
   177c0:	ldr	r0, [sp, #76]	; 0x4c
   177c4:	str	r1, [sp, #4]
   177c8:	mov	r1, sl
   177cc:	str	r0, [sp, #16]
   177d0:	mov	r0, r6
   177d4:	bl	168a0 <__assert_fail@plt+0x53e0>
   177d8:	mov	r8, r0
   177dc:	b	17884 <__assert_fail@plt+0x63c4>
   177e0:	ldr	r2, [sp, #84]	; 0x54
   177e4:	b	17788 <__assert_fail@plt+0x62c8>
   177e8:	mov	r0, #5
   177ec:	ldr	r1, [sp, #56]	; 0x38
   177f0:	ldr	r2, [fp, #-84]	; 0xffffffac
   177f4:	mov	r3, r9
   177f8:	str	r0, [sp]
   177fc:	ldr	r0, [fp, #12]
   17800:	str	r0, [sp, #4]
   17804:	ldr	r0, [fp, #16]
   17808:	str	r0, [sp, #8]
   1780c:	ldr	r0, [sp, #72]	; 0x48
   17810:	str	r0, [sp, #12]
   17814:	ldr	r0, [sp, #76]	; 0x4c
   17818:	str	r0, [sp, #16]
   1781c:	ldr	r0, [sp, #80]	; 0x50
   17820:	b	177d4 <__assert_fail@plt+0x6314>
   17824:	mov	r0, #0
   17828:	str	r0, [fp, #-72]	; 0xffffffb8
   1782c:	ldr	r1, [sp, #92]	; 0x5c
   17830:	cmp	r1, #0
   17834:	beq	17874 <__assert_fail@plt+0x63b4>
   17838:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1783c:	ldr	r2, [sp, #80]	; 0x50
   17840:	tst	r0, #1
   17844:	bne	17878 <__assert_fail@plt+0x63b8>
   17848:	ldrb	r0, [r1]
   1784c:	cmp	r0, #0
   17850:	beq	17878 <__assert_fail@plt+0x63b8>
   17854:	add	r1, r1, #1
   17858:	cmp	r8, sl
   1785c:	strbcc	r0, [r2, r8]
   17860:	add	r8, r8, #1
   17864:	ldrb	r0, [r1], #1
   17868:	cmp	r0, #0
   1786c:	bne	17858 <__assert_fail@plt+0x6398>
   17870:	b	17878 <__assert_fail@plt+0x63b8>
   17874:	ldr	r2, [sp, #80]	; 0x50
   17878:	cmp	r8, sl
   1787c:	movcc	r0, #0
   17880:	strbcc	r0, [r2, r8]
   17884:	mov	r0, r8
   17888:	sub	sp, fp, #28
   1788c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17890:	mov	r2, #1
   17894:	b	17770 <__assert_fail@plt+0x62b0>
   17898:	ldr	r2, [sp, #84]	; 0x54
   1789c:	mov	r7, #5
   178a0:	b	17788 <__assert_fail@plt+0x62c8>
   178a4:	bl	11478 <abort@plt>
   178a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178ac:	add	fp, sp, #28
   178b0:	sub	sp, sp, #28
   178b4:	movw	r5, #49592	; 0xc1b8
   178b8:	cmp	r2, #0
   178bc:	mov	r4, r1
   178c0:	mov	r7, r0
   178c4:	str	r0, [sp, #20]
   178c8:	movt	r5, #2
   178cc:	movne	r5, r2
   178d0:	bl	1137c <__errno_location@plt>
   178d4:	mov	sl, r0
   178d8:	ldm	r5, {r0, r1}
   178dc:	ldr	r2, [r5, #40]	; 0x28
   178e0:	ldr	r3, [r5, #44]	; 0x2c
   178e4:	add	r9, r5, #8
   178e8:	ldr	r6, [sl]
   178ec:	orr	r8, r1, #1
   178f0:	mov	r1, #0
   178f4:	str	r6, [sp, #24]
   178f8:	stm	sp, {r0, r8, r9}
   178fc:	str	r2, [sp, #12]
   17900:	str	r3, [sp, #16]
   17904:	mov	r0, #0
   17908:	mov	r2, r7
   1790c:	mov	r3, r4
   17910:	mov	r6, r4
   17914:	bl	168a0 <__assert_fail@plt+0x53e0>
   17918:	add	r7, r0, #1
   1791c:	mov	r0, r7
   17920:	bl	18b54 <__assert_fail@plt+0x7694>
   17924:	mov	r4, r0
   17928:	ldr	r0, [r5]
   1792c:	ldr	r2, [r5, #44]	; 0x2c
   17930:	ldr	r1, [r5, #40]	; 0x28
   17934:	mov	r3, r6
   17938:	stm	sp, {r0, r8, r9}
   1793c:	str	r2, [sp, #16]
   17940:	str	r1, [sp, #12]
   17944:	mov	r0, r4
   17948:	mov	r1, r7
   1794c:	ldr	r2, [sp, #20]
   17950:	bl	168a0 <__assert_fail@plt+0x53e0>
   17954:	ldr	r0, [sp, #24]
   17958:	str	r0, [sl]
   1795c:	mov	r0, r4
   17960:	sub	sp, fp, #28
   17964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1796c:	add	fp, sp, #28
   17970:	sub	sp, sp, #36	; 0x24
   17974:	movw	r8, #49592	; 0xc1b8
   17978:	cmp	r3, #0
   1797c:	mov	r4, r2
   17980:	str	r2, [sp, #24]
   17984:	mov	r5, r1
   17988:	mov	r6, r0
   1798c:	str	r0, [sp, #20]
   17990:	movt	r8, #2
   17994:	movne	r8, r3
   17998:	bl	1137c <__errno_location@plt>
   1799c:	str	r0, [sp, #28]
   179a0:	cmp	r4, #0
   179a4:	add	sl, r8, #8
   179a8:	ldm	r8, {r3, r9}
   179ac:	ldr	r7, [r0]
   179b0:	ldr	r1, [r8, #40]	; 0x28
   179b4:	ldr	r2, [r8, #44]	; 0x2c
   179b8:	mov	r0, #0
   179bc:	orreq	r9, r9, #1
   179c0:	str	r7, [sp, #32]
   179c4:	mov	r7, r5
   179c8:	stm	sp, {r3, r9, sl}
   179cc:	str	r1, [sp, #12]
   179d0:	str	r2, [sp, #16]
   179d4:	mov	r1, #0
   179d8:	mov	r2, r6
   179dc:	mov	r3, r5
   179e0:	bl	168a0 <__assert_fail@plt+0x53e0>
   179e4:	add	r4, r0, #1
   179e8:	mov	r5, r0
   179ec:	mov	r0, r4
   179f0:	bl	18b54 <__assert_fail@plt+0x7694>
   179f4:	mov	r6, r0
   179f8:	ldr	r0, [r8]
   179fc:	ldr	r2, [r8, #44]	; 0x2c
   17a00:	ldr	r1, [r8, #40]	; 0x28
   17a04:	mov	r3, r7
   17a08:	stm	sp, {r0, r9, sl}
   17a0c:	str	r2, [sp, #16]
   17a10:	str	r1, [sp, #12]
   17a14:	mov	r0, r6
   17a18:	mov	r1, r4
   17a1c:	ldr	r2, [sp, #20]
   17a20:	bl	168a0 <__assert_fail@plt+0x53e0>
   17a24:	ldr	r0, [sp, #24]
   17a28:	ldr	r1, [sp, #32]
   17a2c:	ldr	r2, [sp, #28]
   17a30:	cmp	r0, #0
   17a34:	str	r1, [r2]
   17a38:	strne	r5, [r0]
   17a3c:	mov	r0, r6
   17a40:	sub	sp, fp, #28
   17a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a4c:	add	fp, sp, #24
   17a50:	movw	r5, #49460	; 0xc134
   17a54:	movw	r8, #49456	; 0xc130
   17a58:	movt	r5, #2
   17a5c:	movt	r8, #2
   17a60:	ldr	r0, [r5]
   17a64:	ldr	r4, [r8]
   17a68:	cmp	r0, #2
   17a6c:	blt	17a98 <__assert_fail@plt+0x65d8>
   17a70:	add	r7, r4, #12
   17a74:	mov	r6, #0
   17a78:	ldr	r0, [r7, r6, lsl #3]
   17a7c:	bl	12e14 <__assert_fail@plt+0x1954>
   17a80:	ldr	r1, [r5]
   17a84:	add	r2, r6, #2
   17a88:	add	r0, r6, #1
   17a8c:	mov	r6, r0
   17a90:	cmp	r2, r1
   17a94:	blt	17a78 <__assert_fail@plt+0x65b8>
   17a98:	ldr	r0, [r4, #4]
   17a9c:	movw	r7, #49640	; 0xc1e8
   17aa0:	movt	r7, #2
   17aa4:	cmp	r0, r7
   17aa8:	beq	17ac0 <__assert_fail@plt+0x6600>
   17aac:	bl	12e14 <__assert_fail@plt+0x1954>
   17ab0:	movw	r0, #49464	; 0xc138
   17ab4:	mov	r6, #256	; 0x100
   17ab8:	movt	r0, #2
   17abc:	strd	r6, [r0]
   17ac0:	movw	r6, #49464	; 0xc138
   17ac4:	movt	r6, #2
   17ac8:	cmp	r4, r6
   17acc:	beq	17adc <__assert_fail@plt+0x661c>
   17ad0:	mov	r0, r4
   17ad4:	bl	12e14 <__assert_fail@plt+0x1954>
   17ad8:	str	r6, [r8]
   17adc:	mov	r0, #1
   17ae0:	str	r0, [r5]
   17ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ae8:	movw	r3, #49592	; 0xc1b8
   17aec:	mvn	r2, #0
   17af0:	movt	r3, #2
   17af4:	b	17af8 <__assert_fail@plt+0x6638>
   17af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17afc:	add	fp, sp, #28
   17b00:	sub	sp, sp, #44	; 0x2c
   17b04:	mov	r7, r3
   17b08:	str	r2, [sp, #36]	; 0x24
   17b0c:	str	r1, [sp, #32]
   17b10:	mov	r5, r0
   17b14:	bl	1137c <__errno_location@plt>
   17b18:	cmp	r5, #0
   17b1c:	blt	17c88 <__assert_fail@plt+0x67c8>
   17b20:	cmn	r5, #-2147483647	; 0x80000001
   17b24:	beq	17c88 <__assert_fail@plt+0x67c8>
   17b28:	movw	r8, #49460	; 0xc134
   17b2c:	movw	r4, #49456	; 0xc130
   17b30:	str	r0, [sp, #28]
   17b34:	ldr	r0, [r0]
   17b38:	movt	r8, #2
   17b3c:	movt	r4, #2
   17b40:	ldr	r1, [r8]
   17b44:	ldr	r6, [r4]
   17b48:	str	r0, [sp, #24]
   17b4c:	cmp	r1, r5
   17b50:	ble	17b5c <__assert_fail@plt+0x669c>
   17b54:	mov	sl, r6
   17b58:	b	17bc4 <__assert_fail@plt+0x6704>
   17b5c:	movw	r9, #49464	; 0xc138
   17b60:	mov	r0, #8
   17b64:	add	r2, r5, #1
   17b68:	str	r1, [fp, #-32]	; 0xffffffe0
   17b6c:	mvn	r3, #-2147483648	; 0x80000000
   17b70:	movt	r9, #2
   17b74:	str	r0, [sp]
   17b78:	sub	r2, r2, r1
   17b7c:	sub	r1, fp, #32
   17b80:	subs	r0, r6, r9
   17b84:	movne	r0, r6
   17b88:	bl	18d54 <__assert_fail@plt+0x7894>
   17b8c:	cmp	r6, r9
   17b90:	mov	sl, r0
   17b94:	str	r0, [r4]
   17b98:	ldrdeq	r0, [r9]
   17b9c:	stmeq	sl, {r0, r1}
   17ba0:	ldr	r1, [r8]
   17ba4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17ba8:	add	r0, sl, r1, lsl #3
   17bac:	sub	r1, r2, r1
   17bb0:	lsl	r2, r1, #3
   17bb4:	mov	r1, #0
   17bb8:	bl	11394 <memset@plt>
   17bbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17bc0:	str	r0, [r8]
   17bc4:	mov	r9, sl
   17bc8:	ldr	r6, [r9, r5, lsl #3]!
   17bcc:	ldr	r4, [r9, #4]!
   17bd0:	ldm	r7, {r0, r1}
   17bd4:	ldr	r2, [r7, #40]	; 0x28
   17bd8:	ldr	r3, [r7, #44]	; 0x2c
   17bdc:	orr	r8, r1, #1
   17be0:	add	r1, r7, #8
   17be4:	stm	sp, {r0, r8}
   17be8:	add	r0, sp, #8
   17bec:	str	r1, [sp, #20]
   17bf0:	stm	r0, {r1, r2, r3}
   17bf4:	mov	r0, r4
   17bf8:	mov	r1, r6
   17bfc:	ldr	r2, [sp, #32]
   17c00:	ldr	r3, [sp, #36]	; 0x24
   17c04:	bl	168a0 <__assert_fail@plt+0x53e0>
   17c08:	cmp	r6, r0
   17c0c:	bhi	17c70 <__assert_fail@plt+0x67b0>
   17c10:	add	r6, r0, #1
   17c14:	movw	r0, #49640	; 0xc1e8
   17c18:	movt	r0, #2
   17c1c:	str	r6, [sl, r5, lsl #3]
   17c20:	cmp	r4, r0
   17c24:	beq	17c30 <__assert_fail@plt+0x6770>
   17c28:	mov	r0, r4
   17c2c:	bl	12e14 <__assert_fail@plt+0x1954>
   17c30:	mov	r0, r6
   17c34:	bl	18b54 <__assert_fail@plt+0x7694>
   17c38:	str	r0, [r9]
   17c3c:	mov	r4, r0
   17c40:	add	r3, sp, #8
   17c44:	ldr	r0, [r7]
   17c48:	ldr	r1, [r7, #40]	; 0x28
   17c4c:	ldr	r2, [r7, #44]	; 0x2c
   17c50:	stm	sp, {r0, r8}
   17c54:	ldr	r0, [sp, #20]
   17c58:	stm	r3, {r0, r1, r2}
   17c5c:	mov	r0, r4
   17c60:	mov	r1, r6
   17c64:	ldr	r2, [sp, #32]
   17c68:	ldr	r3, [sp, #36]	; 0x24
   17c6c:	bl	168a0 <__assert_fail@plt+0x53e0>
   17c70:	ldr	r0, [sp, #28]
   17c74:	ldr	r1, [sp, #24]
   17c78:	str	r1, [r0]
   17c7c:	mov	r0, r4
   17c80:	sub	sp, fp, #28
   17c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c88:	bl	11478 <abort@plt>
   17c8c:	movw	r3, #49592	; 0xc1b8
   17c90:	movt	r3, #2
   17c94:	b	17af8 <__assert_fail@plt+0x6638>
   17c98:	movw	r3, #49592	; 0xc1b8
   17c9c:	mov	r1, r0
   17ca0:	mov	r0, #0
   17ca4:	mvn	r2, #0
   17ca8:	movt	r3, #2
   17cac:	b	17af8 <__assert_fail@plt+0x6638>
   17cb0:	movw	r3, #49592	; 0xc1b8
   17cb4:	mov	r2, r1
   17cb8:	mov	r1, r0
   17cbc:	mov	r0, #0
   17cc0:	movt	r3, #2
   17cc4:	b	17af8 <__assert_fail@plt+0x6638>
   17cc8:	push	{fp, lr}
   17ccc:	mov	fp, sp
   17cd0:	sub	sp, sp, #48	; 0x30
   17cd4:	vmov.i32	q8, #0	; 0x00000000
   17cd8:	mov	ip, #32
   17cdc:	mov	r3, sp
   17ce0:	mov	lr, r2
   17ce4:	cmp	r1, #10
   17ce8:	add	r2, r3, #16
   17cec:	vst1.64	{d16-d17}, [r3], ip
   17cf0:	vst1.64	{d16-d17}, [r3]
   17cf4:	vst1.64	{d16-d17}, [r2]
   17cf8:	beq	17d18 <__assert_fail@plt+0x6858>
   17cfc:	str	r1, [sp]
   17d00:	mov	r3, sp
   17d04:	mov	r1, lr
   17d08:	mvn	r2, #0
   17d0c:	bl	17af8 <__assert_fail@plt+0x6638>
   17d10:	mov	sp, fp
   17d14:	pop	{fp, pc}
   17d18:	bl	11478 <abort@plt>
   17d1c:	push	{r4, sl, fp, lr}
   17d20:	add	fp, sp, #8
   17d24:	sub	sp, sp, #48	; 0x30
   17d28:	mov	ip, r3
   17d2c:	mov	r3, sp
   17d30:	vmov.i32	q8, #0	; 0x00000000
   17d34:	mov	lr, #32
   17d38:	cmp	r1, #10
   17d3c:	add	r4, r3, #16
   17d40:	vst1.64	{d16-d17}, [r3], lr
   17d44:	vst1.64	{d16-d17}, [r3]
   17d48:	vst1.64	{d16-d17}, [r4]
   17d4c:	beq	17d6c <__assert_fail@plt+0x68ac>
   17d50:	str	r1, [sp]
   17d54:	mov	r1, r2
   17d58:	mov	r3, sp
   17d5c:	mov	r2, ip
   17d60:	bl	17af8 <__assert_fail@plt+0x6638>
   17d64:	sub	sp, fp, #8
   17d68:	pop	{r4, sl, fp, pc}
   17d6c:	bl	11478 <abort@plt>
   17d70:	push	{fp, lr}
   17d74:	mov	fp, sp
   17d78:	sub	sp, sp, #48	; 0x30
   17d7c:	mov	r3, sp
   17d80:	vmov.i32	q8, #0	; 0x00000000
   17d84:	mov	ip, #32
   17d88:	cmp	r0, #10
   17d8c:	add	r2, r3, #16
   17d90:	vst1.64	{d16-d17}, [r3], ip
   17d94:	vst1.64	{d16-d17}, [r3]
   17d98:	vst1.64	{d16-d17}, [r2]
   17d9c:	beq	17dbc <__assert_fail@plt+0x68fc>
   17da0:	str	r0, [sp]
   17da4:	mov	r3, sp
   17da8:	mov	r0, #0
   17dac:	mvn	r2, #0
   17db0:	bl	17af8 <__assert_fail@plt+0x6638>
   17db4:	mov	sp, fp
   17db8:	pop	{fp, pc}
   17dbc:	bl	11478 <abort@plt>
   17dc0:	push	{fp, lr}
   17dc4:	mov	fp, sp
   17dc8:	sub	sp, sp, #48	; 0x30
   17dcc:	mov	r3, sp
   17dd0:	vmov.i32	q8, #0	; 0x00000000
   17dd4:	mov	ip, #32
   17dd8:	cmp	r0, #10
   17ddc:	add	lr, r3, #16
   17de0:	vst1.64	{d16-d17}, [r3], ip
   17de4:	vst1.64	{d16-d17}, [r3]
   17de8:	vst1.64	{d16-d17}, [lr]
   17dec:	beq	17e08 <__assert_fail@plt+0x6948>
   17df0:	str	r0, [sp]
   17df4:	mov	r3, sp
   17df8:	mov	r0, #0
   17dfc:	bl	17af8 <__assert_fail@plt+0x6638>
   17e00:	mov	sp, fp
   17e04:	pop	{fp, pc}
   17e08:	bl	11478 <abort@plt>
   17e0c:	push	{r4, sl, fp, lr}
   17e10:	add	fp, sp, #8
   17e14:	sub	sp, sp, #48	; 0x30
   17e18:	mov	lr, r0
   17e1c:	movw	r0, #49592	; 0xc1b8
   17e20:	mov	r3, #32
   17e24:	mov	ip, r1
   17e28:	mov	r4, #1
   17e2c:	movt	r0, #2
   17e30:	add	r1, r0, #16
   17e34:	vld1.64	{d16-d17}, [r0], r3
   17e38:	mov	r3, sp
   17e3c:	vld1.64	{d18-d19}, [r1]
   17e40:	add	r1, r3, #16
   17e44:	vld1.64	{d20-d21}, [r0]
   17e48:	add	r0, r3, #32
   17e4c:	vst1.64	{d18-d19}, [r1]
   17e50:	mov	r1, r3
   17e54:	vst1.64	{d20-d21}, [r0]
   17e58:	mov	r0, #28
   17e5c:	and	r0, r0, r2, lsr #3
   17e60:	and	r2, r2, #31
   17e64:	vst1.64	{d16-d17}, [r1], r0
   17e68:	ldr	r0, [r1, #8]
   17e6c:	bic	r4, r4, r0, lsr r2
   17e70:	eor	r0, r0, r4, lsl r2
   17e74:	mov	r2, ip
   17e78:	str	r0, [r1, #8]
   17e7c:	mov	r0, #0
   17e80:	mov	r1, lr
   17e84:	bl	17af8 <__assert_fail@plt+0x6638>
   17e88:	sub	sp, fp, #8
   17e8c:	pop	{r4, sl, fp, pc}
   17e90:	push	{fp, lr}
   17e94:	mov	fp, sp
   17e98:	sub	sp, sp, #48	; 0x30
   17e9c:	mov	ip, r0
   17ea0:	movw	r0, #49592	; 0xc1b8
   17ea4:	mov	r3, #32
   17ea8:	movt	r0, #2
   17eac:	add	r2, r0, #16
   17eb0:	vld1.64	{d16-d17}, [r0], r3
   17eb4:	mov	r3, sp
   17eb8:	vld1.64	{d18-d19}, [r2]
   17ebc:	add	r2, r3, #16
   17ec0:	vld1.64	{d20-d21}, [r0]
   17ec4:	add	r0, r3, #32
   17ec8:	vst1.64	{d18-d19}, [r2]
   17ecc:	mov	r2, r3
   17ed0:	vst1.64	{d20-d21}, [r0]
   17ed4:	mov	r0, #28
   17ed8:	and	r0, r0, r1, lsr #3
   17edc:	and	r1, r1, #31
   17ee0:	vst1.64	{d16-d17}, [r2], r0
   17ee4:	mov	r0, #1
   17ee8:	ldr	lr, [r2, #8]
   17eec:	bic	r0, r0, lr, lsr r1
   17ef0:	eor	r0, lr, r0, lsl r1
   17ef4:	mov	r1, ip
   17ef8:	str	r0, [r2, #8]
   17efc:	mov	r0, #0
   17f00:	mvn	r2, #0
   17f04:	bl	17af8 <__assert_fail@plt+0x6638>
   17f08:	mov	sp, fp
   17f0c:	pop	{fp, pc}
   17f10:	push	{fp, lr}
   17f14:	mov	fp, sp
   17f18:	sub	sp, sp, #48	; 0x30
   17f1c:	movw	r2, #49592	; 0xc1b8
   17f20:	mov	r3, #32
   17f24:	mov	r1, r0
   17f28:	movt	r2, #2
   17f2c:	add	r0, r2, #16
   17f30:	vld1.64	{d16-d17}, [r2], r3
   17f34:	mov	r3, sp
   17f38:	vld1.64	{d18-d19}, [r0]
   17f3c:	add	r0, r3, #16
   17f40:	vld1.64	{d20-d21}, [r2]
   17f44:	mov	r2, r3
   17f48:	vst1.64	{d18-d19}, [r0]
   17f4c:	add	r0, r3, #32
   17f50:	vst1.64	{d20-d21}, [r0]
   17f54:	mov	r0, #12
   17f58:	vst1.64	{d16-d17}, [r2], r0
   17f5c:	ldr	r0, [r2]
   17f60:	orr	r0, r0, #67108864	; 0x4000000
   17f64:	str	r0, [r2]
   17f68:	mov	r0, #0
   17f6c:	mvn	r2, #0
   17f70:	bl	17af8 <__assert_fail@plt+0x6638>
   17f74:	mov	sp, fp
   17f78:	pop	{fp, pc}
   17f7c:	push	{fp, lr}
   17f80:	mov	fp, sp
   17f84:	sub	sp, sp, #48	; 0x30
   17f88:	mov	ip, r1
   17f8c:	mov	r1, r0
   17f90:	movw	r0, #49592	; 0xc1b8
   17f94:	mov	r3, #32
   17f98:	movt	r0, #2
   17f9c:	add	r2, r0, #16
   17fa0:	vld1.64	{d16-d17}, [r0], r3
   17fa4:	mov	r3, sp
   17fa8:	vld1.64	{d18-d19}, [r2]
   17fac:	add	r2, r3, #16
   17fb0:	vld1.64	{d20-d21}, [r0]
   17fb4:	add	r0, r3, #32
   17fb8:	vst1.64	{d18-d19}, [r2]
   17fbc:	mov	r2, r3
   17fc0:	vst1.64	{d20-d21}, [r0]
   17fc4:	mov	r0, #12
   17fc8:	vst1.64	{d16-d17}, [r2], r0
   17fcc:	ldr	r0, [r2]
   17fd0:	orr	r0, r0, #67108864	; 0x4000000
   17fd4:	str	r0, [r2]
   17fd8:	mov	r0, #0
   17fdc:	mov	r2, ip
   17fe0:	bl	17af8 <__assert_fail@plt+0x6638>
   17fe4:	mov	sp, fp
   17fe8:	pop	{fp, pc}
   17fec:	push	{r4, sl, fp, lr}
   17ff0:	add	fp, sp, #8
   17ff4:	sub	sp, sp, #96	; 0x60
   17ff8:	mov	ip, r2
   17ffc:	mov	r2, sp
   18000:	vmov.i32	q8, #0	; 0x00000000
   18004:	mov	r4, #28
   18008:	cmp	r1, #10
   1800c:	mov	r3, r2
   18010:	add	lr, r2, #16
   18014:	vst1.64	{d16-d17}, [r3], r4
   18018:	vst1.64	{d16-d17}, [lr]
   1801c:	vst1.32	{d16-d17}, [r3]
   18020:	beq	18070 <__assert_fail@plt+0x6bb0>
   18024:	vld1.64	{d16-d17}, [r2], r4
   18028:	vld1.64	{d18-d19}, [lr]
   1802c:	add	r3, sp, #48	; 0x30
   18030:	add	r4, r3, #4
   18034:	vld1.32	{d20-d21}, [r2]
   18038:	add	r2, r3, #20
   1803c:	vst1.32	{d16-d17}, [r4]
   18040:	vst1.32	{d18-d19}, [r2]
   18044:	add	r2, r3, #32
   18048:	vst1.32	{d20-d21}, [r2]
   1804c:	str	r1, [sp, #48]	; 0x30
   18050:	mvn	r2, #0
   18054:	ldr	r1, [sp, #60]	; 0x3c
   18058:	orr	r1, r1, #67108864	; 0x4000000
   1805c:	str	r1, [sp, #60]	; 0x3c
   18060:	mov	r1, ip
   18064:	bl	17af8 <__assert_fail@plt+0x6638>
   18068:	sub	sp, fp, #8
   1806c:	pop	{r4, sl, fp, pc}
   18070:	bl	11478 <abort@plt>
   18074:	push	{r4, r5, fp, lr}
   18078:	add	fp, sp, #8
   1807c:	sub	sp, sp, #48	; 0x30
   18080:	mov	ip, r3
   18084:	movw	r3, #49592	; 0xc1b8
   18088:	mov	lr, #32
   1808c:	cmp	r1, #0
   18090:	mov	r5, sp
   18094:	movt	r3, #2
   18098:	cmpne	r2, #0
   1809c:	add	r4, r3, #16
   180a0:	vld1.64	{d16-d17}, [r3], lr
   180a4:	vld1.64	{d18-d19}, [r4]
   180a8:	add	r4, r5, #16
   180ac:	vld1.64	{d20-d21}, [r3]
   180b0:	vst1.64	{d16-d17}, [r5], lr
   180b4:	mov	r3, #10
   180b8:	vst1.64	{d18-d19}, [r4]
   180bc:	vst1.64	{d20-d21}, [r5]
   180c0:	str	r3, [sp]
   180c4:	bne	180cc <__assert_fail@plt+0x6c0c>
   180c8:	bl	11478 <abort@plt>
   180cc:	str	r2, [sp, #44]	; 0x2c
   180d0:	str	r1, [sp, #40]	; 0x28
   180d4:	mov	r3, sp
   180d8:	mov	r1, ip
   180dc:	mvn	r2, #0
   180e0:	bl	17af8 <__assert_fail@plt+0x6638>
   180e4:	sub	sp, fp, #8
   180e8:	pop	{r4, r5, fp, pc}
   180ec:	push	{r4, r5, fp, lr}
   180f0:	add	fp, sp, #8
   180f4:	sub	sp, sp, #48	; 0x30
   180f8:	mov	lr, r3
   180fc:	movw	r3, #49592	; 0xc1b8
   18100:	mov	ip, #32
   18104:	cmp	r1, #0
   18108:	mov	r5, sp
   1810c:	movt	r3, #2
   18110:	cmpne	r2, #0
   18114:	add	r4, r3, #16
   18118:	vld1.64	{d16-d17}, [r3], ip
   1811c:	vld1.64	{d18-d19}, [r4]
   18120:	add	r4, r5, #16
   18124:	vld1.64	{d20-d21}, [r3]
   18128:	vst1.64	{d16-d17}, [r5], ip
   1812c:	mov	r3, #10
   18130:	vst1.64	{d18-d19}, [r4]
   18134:	vst1.64	{d20-d21}, [r5]
   18138:	str	r3, [sp]
   1813c:	bne	18144 <__assert_fail@plt+0x6c84>
   18140:	bl	11478 <abort@plt>
   18144:	ldr	ip, [fp, #8]
   18148:	str	r2, [sp, #44]	; 0x2c
   1814c:	str	r1, [sp, #40]	; 0x28
   18150:	mov	r3, sp
   18154:	mov	r1, lr
   18158:	mov	r2, ip
   1815c:	bl	17af8 <__assert_fail@plt+0x6638>
   18160:	sub	sp, fp, #8
   18164:	pop	{r4, r5, fp, pc}
   18168:	push	{r4, sl, fp, lr}
   1816c:	add	fp, sp, #8
   18170:	sub	sp, sp, #48	; 0x30
   18174:	mov	ip, r2
   18178:	movw	r2, #49592	; 0xc1b8
   1817c:	mov	lr, #32
   18180:	cmp	r0, #0
   18184:	mov	r4, sp
   18188:	movt	r2, #2
   1818c:	cmpne	r1, #0
   18190:	add	r3, r2, #16
   18194:	vld1.64	{d16-d17}, [r2], lr
   18198:	vld1.64	{d18-d19}, [r3]
   1819c:	add	r3, r4, #16
   181a0:	vld1.64	{d20-d21}, [r2]
   181a4:	vst1.64	{d16-d17}, [r4], lr
   181a8:	mov	r2, #10
   181ac:	vst1.64	{d18-d19}, [r3]
   181b0:	vst1.64	{d20-d21}, [r4]
   181b4:	str	r2, [sp]
   181b8:	bne	181c0 <__assert_fail@plt+0x6d00>
   181bc:	bl	11478 <abort@plt>
   181c0:	str	r1, [sp, #44]	; 0x2c
   181c4:	str	r0, [sp, #40]	; 0x28
   181c8:	mov	r3, sp
   181cc:	mov	r0, #0
   181d0:	mov	r1, ip
   181d4:	mvn	r2, #0
   181d8:	bl	17af8 <__assert_fail@plt+0x6638>
   181dc:	sub	sp, fp, #8
   181e0:	pop	{r4, sl, fp, pc}
   181e4:	push	{r4, r5, fp, lr}
   181e8:	add	fp, sp, #8
   181ec:	sub	sp, sp, #48	; 0x30
   181f0:	mov	lr, r2
   181f4:	movw	r2, #49592	; 0xc1b8
   181f8:	mov	ip, r3
   181fc:	mov	r3, #32
   18200:	cmp	r0, #0
   18204:	mov	r5, sp
   18208:	movt	r2, #2
   1820c:	cmpne	r1, #0
   18210:	add	r4, r2, #16
   18214:	vld1.64	{d16-d17}, [r2], r3
   18218:	vld1.64	{d18-d19}, [r4]
   1821c:	add	r4, r5, #16
   18220:	vld1.64	{d20-d21}, [r2]
   18224:	vst1.64	{d16-d17}, [r5], r3
   18228:	mov	r2, #10
   1822c:	vst1.64	{d18-d19}, [r4]
   18230:	vst1.64	{d20-d21}, [r5]
   18234:	str	r2, [sp]
   18238:	bne	18240 <__assert_fail@plt+0x6d80>
   1823c:	bl	11478 <abort@plt>
   18240:	str	r1, [sp, #44]	; 0x2c
   18244:	str	r0, [sp, #40]	; 0x28
   18248:	mov	r3, sp
   1824c:	mov	r0, #0
   18250:	mov	r1, lr
   18254:	mov	r2, ip
   18258:	bl	17af8 <__assert_fail@plt+0x6638>
   1825c:	sub	sp, fp, #8
   18260:	pop	{r4, r5, fp, pc}
   18264:	movw	r3, #49472	; 0xc140
   18268:	movt	r3, #2
   1826c:	b	17af8 <__assert_fail@plt+0x6638>
   18270:	movw	r3, #49472	; 0xc140
   18274:	mov	r2, r1
   18278:	mov	r1, r0
   1827c:	mov	r0, #0
   18280:	movt	r3, #2
   18284:	b	17af8 <__assert_fail@plt+0x6638>
   18288:	movw	r3, #49472	; 0xc140
   1828c:	mvn	r2, #0
   18290:	movt	r3, #2
   18294:	b	17af8 <__assert_fail@plt+0x6638>
   18298:	movw	r3, #49472	; 0xc140
   1829c:	mov	r1, r0
   182a0:	mov	r0, #0
   182a4:	mvn	r2, #0
   182a8:	movt	r3, #2
   182ac:	b	17af8 <__assert_fail@plt+0x6638>
   182b0:	push	{r4, r5, fp, lr}
   182b4:	add	fp, sp, #8
   182b8:	mov	r5, r0
   182bc:	mov	r4, r1
   182c0:	mov	r0, #0
   182c4:	mov	r2, #5
   182c8:	mov	r1, r5
   182cc:	bl	1125c <dcgettext@plt>
   182d0:	cmp	r0, r5
   182d4:	popne	{r4, r5, fp, pc}
   182d8:	bl	1a3f8 <__assert_fail@plt+0x8f38>
   182dc:	ldrb	r1, [r0]
   182e0:	and	r1, r1, #223	; 0xdf
   182e4:	cmp	r1, #71	; 0x47
   182e8:	beq	18350 <__assert_fail@plt+0x6e90>
   182ec:	cmp	r1, #85	; 0x55
   182f0:	bne	18374 <__assert_fail@plt+0x6eb4>
   182f4:	ldrb	r1, [r0, #1]
   182f8:	and	r1, r1, #223	; 0xdf
   182fc:	cmp	r1, #84	; 0x54
   18300:	bne	18374 <__assert_fail@plt+0x6eb4>
   18304:	ldrb	r1, [r0, #2]
   18308:	and	r1, r1, #223	; 0xdf
   1830c:	cmp	r1, #70	; 0x46
   18310:	ldrbeq	r1, [r0, #3]
   18314:	cmpeq	r1, #45	; 0x2d
   18318:	bne	18374 <__assert_fail@plt+0x6eb4>
   1831c:	ldrb	r1, [r0, #4]
   18320:	cmp	r1, #56	; 0x38
   18324:	ldrbeq	r0, [r0, #5]
   18328:	cmpeq	r0, #0
   1832c:	bne	18374 <__assert_fail@plt+0x6eb4>
   18330:	ldrb	r1, [r5]
   18334:	movw	r2, #46938	; 0xb75a
   18338:	movw	r0, #46942	; 0xb75e
   1833c:	movt	r2, #1
   18340:	movt	r0, #1
   18344:	cmp	r1, #96	; 0x60
   18348:	moveq	r0, r2
   1834c:	pop	{r4, r5, fp, pc}
   18350:	ldrb	r1, [r0, #1]
   18354:	and	r1, r1, #223	; 0xdf
   18358:	cmp	r1, #66	; 0x42
   1835c:	bne	18374 <__assert_fail@plt+0x6eb4>
   18360:	ldrb	r1, [r0, #2]
   18364:	cmp	r1, #49	; 0x31
   18368:	ldrbeq	r1, [r0, #3]
   1836c:	cmpeq	r1, #56	; 0x38
   18370:	beq	18390 <__assert_fail@plt+0x6ed0>
   18374:	movw	r1, #46932	; 0xb754
   18378:	movw	r0, #46936	; 0xb758
   1837c:	cmp	r4, #9
   18380:	movt	r1, #1
   18384:	movt	r0, #1
   18388:	moveq	r0, r1
   1838c:	pop	{r4, r5, fp, pc}
   18390:	ldrb	r1, [r0, #4]
   18394:	cmp	r1, #48	; 0x30
   18398:	ldrbeq	r1, [r0, #5]
   1839c:	cmpeq	r1, #51	; 0x33
   183a0:	bne	18374 <__assert_fail@plt+0x6eb4>
   183a4:	ldrb	r1, [r0, #6]
   183a8:	cmp	r1, #48	; 0x30
   183ac:	ldrbeq	r0, [r0, #7]
   183b0:	cmpeq	r0, #0
   183b4:	bne	18374 <__assert_fail@plt+0x6eb4>
   183b8:	ldrb	r1, [r5]
   183bc:	movw	r2, #46946	; 0xb762
   183c0:	movw	r0, #46950	; 0xb766
   183c4:	movt	r2, #1
   183c8:	movt	r0, #1
   183cc:	b	18344 <__assert_fail@plt+0x6e84>
   183d0:	push	{r4, sl, fp, lr}
   183d4:	add	fp, sp, #8
   183d8:	sub	sp, sp, #104	; 0x68
   183dc:	movw	r1, #47775	; 0xba9f
   183e0:	mov	r4, r0
   183e4:	mov	r2, sp
   183e8:	mov	r0, #3
   183ec:	movt	r1, #1
   183f0:	bl	11490 <__lxstat64@plt>
   183f4:	mov	r1, r0
   183f8:	mov	r0, #0
   183fc:	cmp	r1, #0
   18400:	beq	1840c <__assert_fail@plt+0x6f4c>
   18404:	sub	sp, fp, #8
   18408:	pop	{r4, sl, fp, pc}
   1840c:	ldr	r0, [sp, #96]	; 0x60
   18410:	ldr	r1, [sp, #100]	; 0x64
   18414:	ldm	sp, {r2, r3}
   18418:	stm	r4, {r0, r1, r2, r3}
   1841c:	mov	r0, r4
   18420:	sub	sp, fp, #8
   18424:	pop	{r4, sl, fp, pc}
   18428:	push	{r4, r5, r6, r7, fp, lr}
   1842c:	add	fp, sp, #16
   18430:	mov	r4, r0
   18434:	cmp	r0, #2
   18438:	movhi	r0, r4
   1843c:	pophi	{r4, r5, r6, r7, fp, pc}
   18440:	mov	r0, r4
   18444:	bl	1a4cc <__assert_fail@plt+0x900c>
   18448:	mov	r5, r0
   1844c:	bl	1137c <__errno_location@plt>
   18450:	ldr	r7, [r0]
   18454:	mov	r6, r0
   18458:	mov	r0, r4
   1845c:	bl	11484 <close@plt>
   18460:	mov	r0, r5
   18464:	str	r7, [r6]
   18468:	pop	{r4, r5, r6, r7, fp, pc}
   1846c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18470:	add	fp, sp, #24
   18474:	sub	sp, sp, #32
   18478:	ldr	r6, [fp, #12]
   1847c:	ldr	r7, [fp, #8]
   18480:	mov	r4, r2
   18484:	mov	r8, r0
   18488:	cmp	r1, #0
   1848c:	beq	184b4 <__assert_fail@plt+0x6ff4>
   18490:	movw	r2, #47040	; 0xb7c0
   18494:	mov	r5, r1
   18498:	str	r3, [sp, #4]
   1849c:	str	r4, [sp]
   184a0:	mov	r0, r8
   184a4:	mov	r1, #1
   184a8:	movt	r2, #1
   184ac:	mov	r3, r5
   184b0:	b	184cc <__assert_fail@plt+0x700c>
   184b4:	movw	r2, #47052	; 0xb7cc
   184b8:	str	r3, [sp]
   184bc:	mov	r0, r8
   184c0:	mov	r1, #1
   184c4:	mov	r3, r4
   184c8:	movt	r2, #1
   184cc:	bl	113b8 <__fprintf_chk@plt>
   184d0:	movw	r1, #47059	; 0xb7d3
   184d4:	mov	r0, #0
   184d8:	mov	r2, #5
   184dc:	movt	r1, #1
   184e0:	bl	1125c <dcgettext@plt>
   184e4:	movw	r2, #47777	; 0xbaa1
   184e8:	mov	r3, r0
   184ec:	movw	r0, #2022	; 0x7e6
   184f0:	mov	r1, #1
   184f4:	str	r0, [sp]
   184f8:	movt	r2, #1
   184fc:	mov	r0, r8
   18500:	bl	113b8 <__fprintf_chk@plt>
   18504:	movw	r4, #44531	; 0xadf3
   18508:	mov	r1, r8
   1850c:	movt	r4, #1
   18510:	mov	r0, r4
   18514:	bl	111c0 <fputs_unlocked@plt>
   18518:	movw	r1, #47063	; 0xb7d7
   1851c:	mov	r0, #0
   18520:	mov	r2, #5
   18524:	movt	r1, #1
   18528:	bl	1125c <dcgettext@plt>
   1852c:	movw	r3, #47234	; 0xb882
   18530:	mov	r2, r0
   18534:	mov	r0, r8
   18538:	mov	r1, #1
   1853c:	movt	r3, #1
   18540:	bl	113b8 <__fprintf_chk@plt>
   18544:	mov	r0, r4
   18548:	mov	r1, r8
   1854c:	bl	111c0 <fputs_unlocked@plt>
   18550:	cmp	r6, #9
   18554:	bhi	18590 <__assert_fail@plt+0x70d0>
   18558:	add	r0, pc, #0
   1855c:	ldr	pc, [r0, r6, lsl #2]
   18560:	andeq	r8, r1, r8, lsl #11
   18564:	muleq	r1, ip, r5
   18568:	andeq	r8, r1, ip, asr #11
   1856c:	strdeq	r8, [r1], -r4
   18570:	andeq	r8, r1, ip, lsl r6
   18574:	andeq	r8, r1, r4, asr #12
   18578:	andeq	r8, r1, ip, ror #12
   1857c:	andeq	r8, r1, r4, lsr #13
   18580:	andeq	r8, r1, r4, asr #14
   18584:	andeq	r8, r1, ip, ror #13
   18588:	sub	sp, fp, #24
   1858c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18590:	movw	r1, #47587	; 0xb9e3
   18594:	movt	r1, #1
   18598:	b	186f4 <__assert_fail@plt+0x7234>
   1859c:	movw	r1, #47268	; 0xb8a4
   185a0:	mov	r0, #0
   185a4:	mov	r2, #5
   185a8:	movt	r1, #1
   185ac:	bl	1125c <dcgettext@plt>
   185b0:	ldr	r3, [r7]
   185b4:	mov	r2, r0
   185b8:	mov	r0, r8
   185bc:	mov	r1, #1
   185c0:	sub	sp, fp, #24
   185c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   185c8:	b	113b8 <__fprintf_chk@plt>
   185cc:	movw	r1, #47284	; 0xb8b4
   185d0:	mov	r0, #0
   185d4:	mov	r2, #5
   185d8:	movt	r1, #1
   185dc:	bl	1125c <dcgettext@plt>
   185e0:	mov	r2, r0
   185e4:	ldr	r3, [r7]
   185e8:	ldr	r0, [r7, #4]
   185ec:	str	r0, [sp]
   185f0:	b	186e0 <__assert_fail@plt+0x7220>
   185f4:	movw	r1, #47307	; 0xb8cb
   185f8:	mov	r0, #0
   185fc:	mov	r2, #5
   18600:	movt	r1, #1
   18604:	bl	1125c <dcgettext@plt>
   18608:	ldr	r3, [r7]
   1860c:	mov	r2, r0
   18610:	ldmib	r7, {r0, r1}
   18614:	stm	sp, {r0, r1}
   18618:	b	186e0 <__assert_fail@plt+0x7220>
   1861c:	movw	r1, #47335	; 0xb8e7
   18620:	mov	r0, #0
   18624:	mov	r2, #5
   18628:	movt	r1, #1
   1862c:	bl	1125c <dcgettext@plt>
   18630:	ldr	r3, [r7]
   18634:	mov	r2, r0
   18638:	ldmib	r7, {r0, r1, r7}
   1863c:	stm	sp, {r0, r1, r7}
   18640:	b	186e0 <__assert_fail@plt+0x7220>
   18644:	movw	r1, #47367	; 0xb907
   18648:	mov	r0, #0
   1864c:	mov	r2, #5
   18650:	movt	r1, #1
   18654:	bl	1125c <dcgettext@plt>
   18658:	ldr	r3, [r7]
   1865c:	mov	r2, r0
   18660:	ldmib	r7, {r0, r1, r6, r7}
   18664:	stm	sp, {r0, r1, r6, r7}
   18668:	b	186e0 <__assert_fail@plt+0x7220>
   1866c:	movw	r1, #47403	; 0xb92b
   18670:	mov	r0, #0
   18674:	mov	r2, #5
   18678:	movt	r1, #1
   1867c:	bl	1125c <dcgettext@plt>
   18680:	ldr	r3, [r7]
   18684:	mov	r2, r0
   18688:	ldmib	r7, {r0, r1, r6}
   1868c:	ldr	r5, [r7, #16]
   18690:	ldr	r7, [r7, #20]
   18694:	stm	sp, {r0, r1, r6}
   18698:	str	r5, [sp, #12]
   1869c:	str	r7, [sp, #16]
   186a0:	b	186e0 <__assert_fail@plt+0x7220>
   186a4:	movw	r1, #47443	; 0xb953
   186a8:	mov	r0, #0
   186ac:	mov	r2, #5
   186b0:	movt	r1, #1
   186b4:	bl	1125c <dcgettext@plt>
   186b8:	ldr	r3, [r7]
   186bc:	mov	r2, r0
   186c0:	ldmib	r7, {r0, r1, r6}
   186c4:	ldr	r5, [r7, #16]
   186c8:	ldr	r4, [r7, #20]
   186cc:	ldr	r7, [r7, #24]
   186d0:	stm	sp, {r0, r1, r6}
   186d4:	str	r5, [sp, #12]
   186d8:	str	r4, [sp, #16]
   186dc:	str	r7, [sp, #20]
   186e0:	mov	r0, r8
   186e4:	mov	r1, #1
   186e8:	b	18794 <__assert_fail@plt+0x72d4>
   186ec:	movw	r1, #47535	; 0xb9af
   186f0:	movt	r1, #1
   186f4:	mov	r0, #0
   186f8:	mov	r2, #5
   186fc:	bl	1125c <dcgettext@plt>
   18700:	mov	ip, r0
   18704:	ldr	r3, [r7]
   18708:	ldr	r0, [r7, #4]
   1870c:	ldr	r1, [r7, #8]
   18710:	ldr	r6, [r7, #12]
   18714:	ldr	r5, [r7, #16]
   18718:	ldr	r4, [r7, #20]
   1871c:	ldr	r2, [r7, #24]
   18720:	ldr	lr, [r7, #28]
   18724:	ldr	r7, [r7, #32]
   18728:	stm	sp, {r0, r1, r6}
   1872c:	str	r5, [sp, #12]
   18730:	str	r4, [sp, #16]
   18734:	str	r2, [sp, #20]
   18738:	str	lr, [sp, #24]
   1873c:	str	r7, [sp, #28]
   18740:	b	18788 <__assert_fail@plt+0x72c8>
   18744:	movw	r1, #47487	; 0xb97f
   18748:	mov	r0, #0
   1874c:	mov	r2, #5
   18750:	movt	r1, #1
   18754:	bl	1125c <dcgettext@plt>
   18758:	mov	ip, r0
   1875c:	ldr	r3, [r7]
   18760:	ldmib	r7, {r0, r1, r6}
   18764:	ldr	r5, [r7, #16]
   18768:	ldr	r4, [r7, #20]
   1876c:	ldr	r2, [r7, #24]
   18770:	ldr	r7, [r7, #28]
   18774:	stm	sp, {r0, r1, r6}
   18778:	str	r5, [sp, #12]
   1877c:	str	r4, [sp, #16]
   18780:	str	r2, [sp, #20]
   18784:	str	r7, [sp, #24]
   18788:	mov	r0, r8
   1878c:	mov	r1, #1
   18790:	mov	r2, ip
   18794:	bl	113b8 <__fprintf_chk@plt>
   18798:	sub	sp, fp, #24
   1879c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   187a0:	push	{r4, sl, fp, lr}
   187a4:	add	fp, sp, #8
   187a8:	sub	sp, sp, #8
   187ac:	ldr	ip, [fp, #8]
   187b0:	mov	lr, #0
   187b4:	ldr	r4, [ip, lr, lsl #2]
   187b8:	add	lr, lr, #1
   187bc:	cmp	r4, #0
   187c0:	bne	187b4 <__assert_fail@plt+0x72f4>
   187c4:	sub	r4, lr, #1
   187c8:	str	ip, [sp]
   187cc:	str	r4, [sp, #4]
   187d0:	bl	1846c <__assert_fail@plt+0x6fac>
   187d4:	sub	sp, fp, #8
   187d8:	pop	{r4, sl, fp, pc}
   187dc:	push	{fp, lr}
   187e0:	mov	fp, sp
   187e4:	sub	sp, sp, #48	; 0x30
   187e8:	ldr	ip, [fp, #8]
   187ec:	ldr	lr, [ip]
   187f0:	cmp	lr, #0
   187f4:	str	lr, [sp, #8]
   187f8:	beq	18894 <__assert_fail@plt+0x73d4>
   187fc:	ldr	lr, [ip, #4]
   18800:	cmp	lr, #0
   18804:	str	lr, [sp, #12]
   18808:	beq	1889c <__assert_fail@plt+0x73dc>
   1880c:	ldr	lr, [ip, #8]
   18810:	cmp	lr, #0
   18814:	str	lr, [sp, #16]
   18818:	beq	188a4 <__assert_fail@plt+0x73e4>
   1881c:	ldr	lr, [ip, #12]
   18820:	cmp	lr, #0
   18824:	str	lr, [sp, #20]
   18828:	beq	188ac <__assert_fail@plt+0x73ec>
   1882c:	ldr	lr, [ip, #16]
   18830:	cmp	lr, #0
   18834:	str	lr, [sp, #24]
   18838:	beq	188b4 <__assert_fail@plt+0x73f4>
   1883c:	ldr	lr, [ip, #20]
   18840:	cmp	lr, #0
   18844:	str	lr, [sp, #28]
   18848:	beq	188bc <__assert_fail@plt+0x73fc>
   1884c:	ldr	lr, [ip, #24]
   18850:	cmp	lr, #0
   18854:	str	lr, [sp, #32]
   18858:	beq	188c4 <__assert_fail@plt+0x7404>
   1885c:	ldr	lr, [ip, #28]
   18860:	cmp	lr, #0
   18864:	str	lr, [sp, #36]	; 0x24
   18868:	beq	188cc <__assert_fail@plt+0x740c>
   1886c:	ldr	lr, [ip, #32]
   18870:	cmp	lr, #0
   18874:	str	lr, [sp, #40]	; 0x28
   18878:	beq	188d4 <__assert_fail@plt+0x7414>
   1887c:	ldr	lr, [ip, #36]	; 0x24
   18880:	mov	ip, #10
   18884:	cmp	lr, #0
   18888:	str	lr, [sp, #44]	; 0x2c
   1888c:	movweq	ip, #9
   18890:	b	188d8 <__assert_fail@plt+0x7418>
   18894:	mov	ip, #0
   18898:	b	188d8 <__assert_fail@plt+0x7418>
   1889c:	mov	ip, #1
   188a0:	b	188d8 <__assert_fail@plt+0x7418>
   188a4:	mov	ip, #2
   188a8:	b	188d8 <__assert_fail@plt+0x7418>
   188ac:	mov	ip, #3
   188b0:	b	188d8 <__assert_fail@plt+0x7418>
   188b4:	mov	ip, #4
   188b8:	b	188d8 <__assert_fail@plt+0x7418>
   188bc:	mov	ip, #5
   188c0:	b	188d8 <__assert_fail@plt+0x7418>
   188c4:	mov	ip, #6
   188c8:	b	188d8 <__assert_fail@plt+0x7418>
   188cc:	mov	ip, #7
   188d0:	b	188d8 <__assert_fail@plt+0x7418>
   188d4:	mov	ip, #8
   188d8:	add	lr, sp, #8
   188dc:	str	ip, [sp, #4]
   188e0:	str	lr, [sp]
   188e4:	bl	1846c <__assert_fail@plt+0x6fac>
   188e8:	mov	sp, fp
   188ec:	pop	{fp, pc}
   188f0:	push	{fp, lr}
   188f4:	mov	fp, sp
   188f8:	sub	sp, sp, #56	; 0x38
   188fc:	add	ip, fp, #8
   18900:	str	ip, [sp, #12]
   18904:	ldr	lr, [fp, #8]
   18908:	cmp	lr, #0
   1890c:	str	lr, [sp, #16]
   18910:	beq	189ac <__assert_fail@plt+0x74ec>
   18914:	ldr	lr, [ip, #4]
   18918:	cmp	lr, #0
   1891c:	str	lr, [sp, #20]
   18920:	beq	189b4 <__assert_fail@plt+0x74f4>
   18924:	ldr	lr, [ip, #8]
   18928:	cmp	lr, #0
   1892c:	str	lr, [sp, #24]
   18930:	beq	189bc <__assert_fail@plt+0x74fc>
   18934:	ldr	lr, [ip, #12]
   18938:	cmp	lr, #0
   1893c:	str	lr, [sp, #28]
   18940:	beq	189c4 <__assert_fail@plt+0x7504>
   18944:	ldr	lr, [ip, #16]
   18948:	cmp	lr, #0
   1894c:	str	lr, [sp, #32]
   18950:	beq	189cc <__assert_fail@plt+0x750c>
   18954:	ldr	lr, [ip, #20]
   18958:	cmp	lr, #0
   1895c:	str	lr, [sp, #36]	; 0x24
   18960:	beq	189d4 <__assert_fail@plt+0x7514>
   18964:	ldr	lr, [ip, #24]
   18968:	cmp	lr, #0
   1896c:	str	lr, [sp, #40]	; 0x28
   18970:	beq	189dc <__assert_fail@plt+0x751c>
   18974:	ldr	lr, [ip, #28]
   18978:	cmp	lr, #0
   1897c:	str	lr, [sp, #44]	; 0x2c
   18980:	beq	189e4 <__assert_fail@plt+0x7524>
   18984:	ldr	lr, [ip, #32]
   18988:	cmp	lr, #0
   1898c:	str	lr, [sp, #48]	; 0x30
   18990:	beq	189ec <__assert_fail@plt+0x752c>
   18994:	ldr	lr, [ip, #36]	; 0x24
   18998:	mov	ip, #10
   1899c:	cmp	lr, #0
   189a0:	str	lr, [sp, #52]	; 0x34
   189a4:	movweq	ip, #9
   189a8:	b	189f0 <__assert_fail@plt+0x7530>
   189ac:	mov	ip, #0
   189b0:	b	189f0 <__assert_fail@plt+0x7530>
   189b4:	mov	ip, #1
   189b8:	b	189f0 <__assert_fail@plt+0x7530>
   189bc:	mov	ip, #2
   189c0:	b	189f0 <__assert_fail@plt+0x7530>
   189c4:	mov	ip, #3
   189c8:	b	189f0 <__assert_fail@plt+0x7530>
   189cc:	mov	ip, #4
   189d0:	b	189f0 <__assert_fail@plt+0x7530>
   189d4:	mov	ip, #5
   189d8:	b	189f0 <__assert_fail@plt+0x7530>
   189dc:	mov	ip, #6
   189e0:	b	189f0 <__assert_fail@plt+0x7530>
   189e4:	mov	ip, #7
   189e8:	b	189f0 <__assert_fail@plt+0x7530>
   189ec:	mov	ip, #8
   189f0:	add	lr, sp, #16
   189f4:	str	ip, [sp, #4]
   189f8:	str	lr, [sp]
   189fc:	bl	1846c <__assert_fail@plt+0x6fac>
   18a00:	mov	sp, fp
   18a04:	pop	{fp, pc}
   18a08:	push	{fp, lr}
   18a0c:	mov	fp, sp
   18a10:	movw	r0, #49540	; 0xc184
   18a14:	movt	r0, #2
   18a18:	ldr	r1, [r0]
   18a1c:	movw	r0, #44531	; 0xadf3
   18a20:	movt	r0, #1
   18a24:	bl	111c0 <fputs_unlocked@plt>
   18a28:	movw	r1, #47647	; 0xba1f
   18a2c:	mov	r0, #0
   18a30:	mov	r2, #5
   18a34:	movt	r1, #1
   18a38:	bl	1125c <dcgettext@plt>
   18a3c:	movw	r2, #47667	; 0xba33
   18a40:	mov	r1, r0
   18a44:	mov	r0, #1
   18a48:	movt	r2, #1
   18a4c:	bl	113a0 <__printf_chk@plt>
   18a50:	movw	r1, #47689	; 0xba49
   18a54:	mov	r0, #0
   18a58:	mov	r2, #5
   18a5c:	movt	r1, #1
   18a60:	bl	1125c <dcgettext@plt>
   18a64:	movw	r2, #44804	; 0xaf04
   18a68:	movw	r3, #45079	; 0xb017
   18a6c:	mov	r1, r0
   18a70:	mov	r0, #1
   18a74:	movt	r2, #1
   18a78:	movt	r3, #1
   18a7c:	bl	113a0 <__printf_chk@plt>
   18a80:	movw	r1, #47709	; 0xba5d
   18a84:	mov	r0, #0
   18a88:	mov	r2, #5
   18a8c:	movt	r1, #1
   18a90:	bl	1125c <dcgettext@plt>
   18a94:	movw	r2, #47748	; 0xba84
   18a98:	mov	r1, r0
   18a9c:	mov	r0, #1
   18aa0:	movt	r2, #1
   18aa4:	pop	{fp, lr}
   18aa8:	b	113a0 <__printf_chk@plt>
   18aac:	push	{r4, r5, r6, sl, fp, lr}
   18ab0:	add	fp, sp, #16
   18ab4:	mov	r4, r2
   18ab8:	mov	r5, r1
   18abc:	mov	r6, r0
   18ac0:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18ac4:	cmp	r0, #0
   18ac8:	popne	{r4, r5, r6, sl, fp, pc}
   18acc:	cmp	r6, #0
   18ad0:	beq	18ae4 <__assert_fail@plt+0x7624>
   18ad4:	cmp	r5, #0
   18ad8:	cmpne	r4, #0
   18adc:	bne	18ae4 <__assert_fail@plt+0x7624>
   18ae0:	pop	{r4, r5, r6, sl, fp, pc}
   18ae4:	bl	19084 <__assert_fail@plt+0x7bc4>
   18ae8:	push	{r4, r5, r6, sl, fp, lr}
   18aec:	add	fp, sp, #16
   18af0:	mov	r4, r2
   18af4:	mov	r5, r1
   18af8:	mov	r6, r0
   18afc:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18b00:	cmp	r0, #0
   18b04:	popne	{r4, r5, r6, sl, fp, pc}
   18b08:	cmp	r6, #0
   18b0c:	beq	18b20 <__assert_fail@plt+0x7660>
   18b10:	cmp	r5, #0
   18b14:	cmpne	r4, #0
   18b18:	bne	18b20 <__assert_fail@plt+0x7660>
   18b1c:	pop	{r4, r5, r6, sl, fp, pc}
   18b20:	bl	19084 <__assert_fail@plt+0x7bc4>
   18b24:	push	{fp, lr}
   18b28:	mov	fp, sp
   18b2c:	bl	19e38 <__assert_fail@plt+0x8978>
   18b30:	cmp	r0, #0
   18b34:	popne	{fp, pc}
   18b38:	bl	19084 <__assert_fail@plt+0x7bc4>
   18b3c:	push	{fp, lr}
   18b40:	mov	fp, sp
   18b44:	bl	19e38 <__assert_fail@plt+0x8978>
   18b48:	cmp	r0, #0
   18b4c:	popne	{fp, pc}
   18b50:	bl	19084 <__assert_fail@plt+0x7bc4>
   18b54:	push	{fp, lr}
   18b58:	mov	fp, sp
   18b5c:	bl	19e38 <__assert_fail@plt+0x8978>
   18b60:	cmp	r0, #0
   18b64:	popne	{fp, pc}
   18b68:	bl	19084 <__assert_fail@plt+0x7bc4>
   18b6c:	push	{r4, r5, fp, lr}
   18b70:	add	fp, sp, #8
   18b74:	mov	r4, r1
   18b78:	mov	r5, r0
   18b7c:	bl	19e68 <__assert_fail@plt+0x89a8>
   18b80:	cmp	r0, #0
   18b84:	popne	{r4, r5, fp, pc}
   18b88:	cmp	r5, #0
   18b8c:	beq	18b9c <__assert_fail@plt+0x76dc>
   18b90:	cmp	r4, #0
   18b94:	bne	18b9c <__assert_fail@plt+0x76dc>
   18b98:	pop	{r4, r5, fp, pc}
   18b9c:	bl	19084 <__assert_fail@plt+0x7bc4>
   18ba0:	push	{fp, lr}
   18ba4:	mov	fp, sp
   18ba8:	cmp	r1, #0
   18bac:	orreq	r1, r1, #1
   18bb0:	bl	19e68 <__assert_fail@plt+0x89a8>
   18bb4:	cmp	r0, #0
   18bb8:	popne	{fp, pc}
   18bbc:	bl	19084 <__assert_fail@plt+0x7bc4>
   18bc0:	push	{fp, lr}
   18bc4:	mov	fp, sp
   18bc8:	clz	r3, r2
   18bcc:	lsr	ip, r3, #5
   18bd0:	clz	r3, r1
   18bd4:	lsr	r3, r3, #5
   18bd8:	orrs	r3, r3, ip
   18bdc:	movwne	r1, #1
   18be0:	movwne	r2, #1
   18be4:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18be8:	cmp	r0, #0
   18bec:	popne	{fp, pc}
   18bf0:	bl	19084 <__assert_fail@plt+0x7bc4>
   18bf4:	push	{fp, lr}
   18bf8:	mov	fp, sp
   18bfc:	mov	r2, r1
   18c00:	mov	r1, r0
   18c04:	mov	r0, #0
   18c08:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18c0c:	cmp	r0, #0
   18c10:	popne	{fp, pc}
   18c14:	bl	19084 <__assert_fail@plt+0x7bc4>
   18c18:	push	{fp, lr}
   18c1c:	mov	fp, sp
   18c20:	mov	r2, r1
   18c24:	mov	r1, r0
   18c28:	clz	r0, r2
   18c2c:	clz	r3, r1
   18c30:	lsr	r0, r0, #5
   18c34:	lsr	r3, r3, #5
   18c38:	orrs	r0, r3, r0
   18c3c:	movwne	r1, #1
   18c40:	movwne	r2, #1
   18c44:	mov	r0, #0
   18c48:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18c4c:	cmp	r0, #0
   18c50:	popne	{fp, pc}
   18c54:	bl	19084 <__assert_fail@plt+0x7bc4>
   18c58:	push	{r4, r5, r6, sl, fp, lr}
   18c5c:	add	fp, sp, #16
   18c60:	ldr	r5, [r1]
   18c64:	mov	r4, r1
   18c68:	mov	r6, r0
   18c6c:	cmp	r0, #0
   18c70:	beq	18c88 <__assert_fail@plt+0x77c8>
   18c74:	mov	r0, #1
   18c78:	add	r0, r0, r5, lsr #1
   18c7c:	adds	r5, r5, r0
   18c80:	bcc	18c90 <__assert_fail@plt+0x77d0>
   18c84:	b	18ccc <__assert_fail@plt+0x780c>
   18c88:	cmp	r5, #0
   18c8c:	movweq	r5, #64	; 0x40
   18c90:	mov	r0, r6
   18c94:	mov	r1, r5
   18c98:	mov	r2, #1
   18c9c:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18ca0:	cmp	r5, #0
   18ca4:	mov	r1, r5
   18ca8:	movwne	r1, #1
   18cac:	cmp	r0, #0
   18cb0:	bne	18cc4 <__assert_fail@plt+0x7804>
   18cb4:	clz	r2, r6
   18cb8:	lsr	r2, r2, #5
   18cbc:	orrs	r1, r2, r1
   18cc0:	bne	18ccc <__assert_fail@plt+0x780c>
   18cc4:	str	r5, [r4]
   18cc8:	pop	{r4, r5, r6, sl, fp, pc}
   18ccc:	bl	19084 <__assert_fail@plt+0x7bc4>
   18cd0:	push	{r4, r5, r6, r7, fp, lr}
   18cd4:	add	fp, sp, #16
   18cd8:	ldr	r5, [r1]
   18cdc:	mov	r6, r2
   18ce0:	mov	r4, r1
   18ce4:	mov	r7, r0
   18ce8:	cmp	r0, #0
   18cec:	beq	18d04 <__assert_fail@plt+0x7844>
   18cf0:	mov	r0, #1
   18cf4:	add	r0, r0, r5, lsr #1
   18cf8:	adds	r5, r5, r0
   18cfc:	bcc	18d1c <__assert_fail@plt+0x785c>
   18d00:	b	18d50 <__assert_fail@plt+0x7890>
   18d04:	cmp	r5, #0
   18d08:	bne	18d1c <__assert_fail@plt+0x785c>
   18d0c:	mov	r0, #64	; 0x40
   18d10:	cmp	r6, #64	; 0x40
   18d14:	udiv	r5, r0, r6
   18d18:	addhi	r5, r5, #1
   18d1c:	mov	r0, r7
   18d20:	mov	r1, r5
   18d24:	mov	r2, r6
   18d28:	bl	1a490 <__assert_fail@plt+0x8fd0>
   18d2c:	cmp	r0, #0
   18d30:	bne	18d48 <__assert_fail@plt+0x7888>
   18d34:	cmp	r7, #0
   18d38:	beq	18d50 <__assert_fail@plt+0x7890>
   18d3c:	cmp	r6, #0
   18d40:	cmpne	r5, #0
   18d44:	bne	18d50 <__assert_fail@plt+0x7890>
   18d48:	str	r5, [r4]
   18d4c:	pop	{r4, r5, r6, r7, fp, pc}
   18d50:	bl	19084 <__assert_fail@plt+0x7bc4>
   18d54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18d58:	add	fp, sp, #24
   18d5c:	mov	r8, r1
   18d60:	ldr	r1, [r1]
   18d64:	mov	r5, r0
   18d68:	add	r0, r1, r1, asr #1
   18d6c:	cmp	r0, r1
   18d70:	mvnvs	r0, #-2147483648	; 0x80000000
   18d74:	cmp	r0, r3
   18d78:	mov	r7, r0
   18d7c:	movgt	r7, r3
   18d80:	cmn	r3, #1
   18d84:	movle	r7, r0
   18d88:	ldr	r0, [fp, #8]
   18d8c:	cmn	r0, #1
   18d90:	ble	18db8 <__assert_fail@plt+0x78f8>
   18d94:	cmp	r0, #0
   18d98:	beq	18e0c <__assert_fail@plt+0x794c>
   18d9c:	cmn	r7, #1
   18da0:	ble	18de0 <__assert_fail@plt+0x7920>
   18da4:	mvn	r4, #-2147483648	; 0x80000000
   18da8:	udiv	r6, r4, r0
   18dac:	cmp	r6, r7
   18db0:	bge	18e0c <__assert_fail@plt+0x794c>
   18db4:	b	18e1c <__assert_fail@plt+0x795c>
   18db8:	cmn	r7, #1
   18dbc:	ble	18dfc <__assert_fail@plt+0x793c>
   18dc0:	cmn	r0, #1
   18dc4:	beq	18e0c <__assert_fail@plt+0x794c>
   18dc8:	mov	r6, #-2147483648	; 0x80000000
   18dcc:	mvn	r4, #-2147483648	; 0x80000000
   18dd0:	sdiv	r6, r6, r0
   18dd4:	cmp	r6, r7
   18dd8:	bge	18e0c <__assert_fail@plt+0x794c>
   18ddc:	b	18e1c <__assert_fail@plt+0x795c>
   18de0:	beq	18e0c <__assert_fail@plt+0x794c>
   18de4:	mov	r6, #-2147483648	; 0x80000000
   18de8:	mvn	r4, #-2147483648	; 0x80000000
   18dec:	sdiv	r6, r6, r7
   18df0:	cmp	r6, r0
   18df4:	bge	18e0c <__assert_fail@plt+0x794c>
   18df8:	b	18e1c <__assert_fail@plt+0x795c>
   18dfc:	mvn	r4, #-2147483648	; 0x80000000
   18e00:	sdiv	r6, r4, r0
   18e04:	cmp	r7, r6
   18e08:	blt	18e1c <__assert_fail@plt+0x795c>
   18e0c:	mul	r6, r7, r0
   18e10:	mov	r4, #64	; 0x40
   18e14:	cmp	r6, #63	; 0x3f
   18e18:	bgt	18e24 <__assert_fail@plt+0x7964>
   18e1c:	sdiv	r7, r4, r0
   18e20:	mul	r6, r7, r0
   18e24:	cmp	r5, #0
   18e28:	moveq	r4, #0
   18e2c:	streq	r4, [r8]
   18e30:	sub	r4, r7, r1
   18e34:	cmp	r4, r2
   18e38:	bge	18ee4 <__assert_fail@plt+0x7a24>
   18e3c:	add	r7, r1, r2
   18e40:	mov	r6, #0
   18e44:	mov	r2, #0
   18e48:	cmp	r7, r3
   18e4c:	movwgt	r6, #1
   18e50:	cmn	r3, #1
   18e54:	movwgt	r2, #1
   18e58:	cmp	r7, r1
   18e5c:	bvs	18f18 <__assert_fail@plt+0x7a58>
   18e60:	ands	r1, r2, r6
   18e64:	bne	18f18 <__assert_fail@plt+0x7a58>
   18e68:	cmn	r0, #1
   18e6c:	ble	18e94 <__assert_fail@plt+0x79d4>
   18e70:	cmp	r0, #0
   18e74:	beq	18ee0 <__assert_fail@plt+0x7a20>
   18e78:	cmn	r7, #1
   18e7c:	ble	18eb8 <__assert_fail@plt+0x79f8>
   18e80:	mvn	r1, #-2147483648	; 0x80000000
   18e84:	udiv	r1, r1, r0
   18e88:	cmp	r1, r7
   18e8c:	bge	18ee0 <__assert_fail@plt+0x7a20>
   18e90:	b	18f18 <__assert_fail@plt+0x7a58>
   18e94:	cmn	r7, #1
   18e98:	ble	18ed0 <__assert_fail@plt+0x7a10>
   18e9c:	cmn	r0, #1
   18ea0:	beq	18ee0 <__assert_fail@plt+0x7a20>
   18ea4:	mov	r1, #-2147483648	; 0x80000000
   18ea8:	sdiv	r1, r1, r0
   18eac:	cmp	r1, r7
   18eb0:	bge	18ee0 <__assert_fail@plt+0x7a20>
   18eb4:	b	18f18 <__assert_fail@plt+0x7a58>
   18eb8:	beq	18ee0 <__assert_fail@plt+0x7a20>
   18ebc:	mov	r1, #-2147483648	; 0x80000000
   18ec0:	sdiv	r1, r1, r7
   18ec4:	cmp	r1, r0
   18ec8:	bge	18ee0 <__assert_fail@plt+0x7a20>
   18ecc:	b	18f18 <__assert_fail@plt+0x7a58>
   18ed0:	mvn	r1, #-2147483648	; 0x80000000
   18ed4:	sdiv	r1, r1, r0
   18ed8:	cmp	r7, r1
   18edc:	blt	18f18 <__assert_fail@plt+0x7a58>
   18ee0:	mul	r6, r7, r0
   18ee4:	mov	r0, r5
   18ee8:	mov	r1, r6
   18eec:	bl	19e68 <__assert_fail@plt+0x89a8>
   18ef0:	cmp	r6, #0
   18ef4:	movwne	r6, #1
   18ef8:	cmp	r0, #0
   18efc:	bne	18f10 <__assert_fail@plt+0x7a50>
   18f00:	clz	r1, r5
   18f04:	lsr	r1, r1, #5
   18f08:	orrs	r1, r1, r6
   18f0c:	bne	18f18 <__assert_fail@plt+0x7a58>
   18f10:	str	r7, [r8]
   18f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f18:	bl	19084 <__assert_fail@plt+0x7bc4>
   18f1c:	push	{fp, lr}
   18f20:	mov	fp, sp
   18f24:	mov	r1, #1
   18f28:	bl	19de4 <__assert_fail@plt+0x8924>
   18f2c:	cmp	r0, #0
   18f30:	popne	{fp, pc}
   18f34:	bl	19084 <__assert_fail@plt+0x7bc4>
   18f38:	push	{fp, lr}
   18f3c:	mov	fp, sp
   18f40:	bl	19de4 <__assert_fail@plt+0x8924>
   18f44:	cmp	r0, #0
   18f48:	popne	{fp, pc}
   18f4c:	bl	19084 <__assert_fail@plt+0x7bc4>
   18f50:	push	{fp, lr}
   18f54:	mov	fp, sp
   18f58:	mov	r1, #1
   18f5c:	bl	19de4 <__assert_fail@plt+0x8924>
   18f60:	cmp	r0, #0
   18f64:	popne	{fp, pc}
   18f68:	bl	19084 <__assert_fail@plt+0x7bc4>
   18f6c:	push	{fp, lr}
   18f70:	mov	fp, sp
   18f74:	bl	19de4 <__assert_fail@plt+0x8924>
   18f78:	cmp	r0, #0
   18f7c:	popne	{fp, pc}
   18f80:	bl	19084 <__assert_fail@plt+0x7bc4>
   18f84:	push	{r4, r5, r6, sl, fp, lr}
   18f88:	add	fp, sp, #16
   18f8c:	mov	r5, r0
   18f90:	mov	r0, r1
   18f94:	mov	r4, r1
   18f98:	bl	19e38 <__assert_fail@plt+0x8978>
   18f9c:	cmp	r0, #0
   18fa0:	beq	18fbc <__assert_fail@plt+0x7afc>
   18fa4:	mov	r1, r5
   18fa8:	mov	r2, r4
   18fac:	mov	r6, r0
   18fb0:	bl	11220 <memcpy@plt>
   18fb4:	mov	r0, r6
   18fb8:	pop	{r4, r5, r6, sl, fp, pc}
   18fbc:	bl	19084 <__assert_fail@plt+0x7bc4>
   18fc0:	push	{r4, r5, r6, sl, fp, lr}
   18fc4:	add	fp, sp, #16
   18fc8:	mov	r5, r0
   18fcc:	mov	r0, r1
   18fd0:	mov	r4, r1
   18fd4:	bl	19e38 <__assert_fail@plt+0x8978>
   18fd8:	cmp	r0, #0
   18fdc:	beq	18ff8 <__assert_fail@plt+0x7b38>
   18fe0:	mov	r1, r5
   18fe4:	mov	r2, r4
   18fe8:	mov	r6, r0
   18fec:	bl	11220 <memcpy@plt>
   18ff0:	mov	r0, r6
   18ff4:	pop	{r4, r5, r6, sl, fp, pc}
   18ff8:	bl	19084 <__assert_fail@plt+0x7bc4>
   18ffc:	push	{r4, r5, r6, sl, fp, lr}
   19000:	add	fp, sp, #16
   19004:	mov	r5, r0
   19008:	add	r0, r1, #1
   1900c:	mov	r4, r1
   19010:	bl	19e38 <__assert_fail@plt+0x8978>
   19014:	cmp	r0, #0
   19018:	beq	19040 <__assert_fail@plt+0x7b80>
   1901c:	mov	r6, r0
   19020:	mov	r0, #0
   19024:	mov	r1, r5
   19028:	mov	r2, r4
   1902c:	strb	r0, [r6, r4]
   19030:	mov	r0, r6
   19034:	bl	11220 <memcpy@plt>
   19038:	mov	r0, r6
   1903c:	pop	{r4, r5, r6, sl, fp, pc}
   19040:	bl	19084 <__assert_fail@plt+0x7bc4>
   19044:	push	{r4, r5, r6, sl, fp, lr}
   19048:	add	fp, sp, #16
   1904c:	mov	r4, r0
   19050:	bl	1134c <strlen@plt>
   19054:	add	r5, r0, #1
   19058:	mov	r0, r5
   1905c:	bl	19e38 <__assert_fail@plt+0x8978>
   19060:	cmp	r0, #0
   19064:	beq	19080 <__assert_fail@plt+0x7bc0>
   19068:	mov	r1, r4
   1906c:	mov	r2, r5
   19070:	mov	r6, r0
   19074:	bl	11220 <memcpy@plt>
   19078:	mov	r0, r6
   1907c:	pop	{r4, r5, r6, sl, fp, pc}
   19080:	bl	19084 <__assert_fail@plt+0x7bc4>
   19084:	push	{fp, lr}
   19088:	mov	fp, sp
   1908c:	movw	r0, #49452	; 0xc12c
   19090:	movw	r1, #47824	; 0xbad0
   19094:	mov	r2, #5
   19098:	movt	r0, #2
   1909c:	movt	r1, #1
   190a0:	ldr	r4, [r0]
   190a4:	mov	r0, #0
   190a8:	bl	1125c <dcgettext@plt>
   190ac:	movw	r2, #45371	; 0xb13b
   190b0:	mov	r3, r0
   190b4:	mov	r0, r4
   190b8:	mov	r1, #0
   190bc:	movt	r2, #1
   190c0:	bl	112e0 <error@plt>
   190c4:	bl	11478 <abort@plt>
   190c8:	push	{fp, lr}
   190cc:	mov	fp, sp
   190d0:	orr	r1, r1, #512	; 0x200
   190d4:	bl	12e3c <__assert_fail@plt+0x197c>
   190d8:	cmp	r0, #0
   190dc:	popne	{fp, pc}
   190e0:	bl	1137c <__errno_location@plt>
   190e4:	ldr	r0, [r0]
   190e8:	cmp	r0, #22
   190ec:	bne	19110 <__assert_fail@plt+0x7c50>
   190f0:	movw	r0, #47841	; 0xbae1
   190f4:	movw	r1, #47857	; 0xbaf1
   190f8:	movw	r3, #47868	; 0xbafc
   190fc:	mov	r2, #41	; 0x29
   19100:	movt	r0, #1
   19104:	movt	r1, #1
   19108:	movt	r3, #1
   1910c:	bl	114c0 <__assert_fail@plt>
   19110:	bl	19084 <__assert_fail@plt+0x7bc4>
   19114:	ldr	r0, [r0, #48]	; 0x30
   19118:	and	r0, r0, #17
   1911c:	cmp	r0, #16
   19120:	moveq	r0, #1
   19124:	bxeq	lr
   19128:	cmp	r0, #17
   1912c:	movne	r0, #0
   19130:	bxne	lr
   19134:	ldr	r0, [r1, #48]	; 0x30
   19138:	cmp	r0, #0
   1913c:	movwne	r0, #1
   19140:	bx	lr
   19144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19148:	add	fp, sp, #28
   1914c:	sub	sp, sp, #44	; 0x2c
   19150:	cmp	r2, #37	; 0x25
   19154:	bcs	19dc4 <__assert_fail@plt+0x8904>
   19158:	ldr	sl, [fp, #8]
   1915c:	mov	r6, r2
   19160:	mov	r7, r1
   19164:	mov	r4, r0
   19168:	str	r3, [sp, #36]	; 0x24
   1916c:	bl	1137c <__errno_location@plt>
   19170:	mov	r5, r0
   19174:	mov	r0, #0
   19178:	str	r0, [r5]
   1917c:	bl	11334 <__ctype_b_loc@plt>
   19180:	ldr	r1, [r0]
   19184:	mov	r2, r4
   19188:	ldrb	r0, [r2], #1
   1918c:	add	r3, r1, r0, lsl #1
   19190:	ldrb	r3, [r3, #1]
   19194:	tst	r3, #32
   19198:	bne	19188 <__assert_fail@plt+0x7cc8>
   1919c:	sub	r9, fp, #32
   191a0:	cmp	r7, #0
   191a4:	mov	r8, #4
   191a8:	movne	r9, r7
   191ac:	cmp	r0, #45	; 0x2d
   191b0:	beq	19db8 <__assert_fail@plt+0x88f8>
   191b4:	mov	r0, r4
   191b8:	mov	r1, r9
   191bc:	mov	r2, r6
   191c0:	mov	r3, #0
   191c4:	bl	1122c <__strtoull_internal@plt>
   191c8:	mov	r7, r1
   191cc:	ldr	r1, [r9]
   191d0:	cmp	r1, r4
   191d4:	beq	19200 <__assert_fail@plt+0x7d40>
   191d8:	mov	r6, r0
   191dc:	ldr	r0, [r5]
   191e0:	cmp	r0, #0
   191e4:	beq	1923c <__assert_fail@plt+0x7d7c>
   191e8:	cmp	r0, #34	; 0x22
   191ec:	bne	19db8 <__assert_fail@plt+0x88f8>
   191f0:	mov	r8, #1
   191f4:	cmp	sl, #0
   191f8:	bne	19248 <__assert_fail@plt+0x7d88>
   191fc:	b	19db0 <__assert_fail@plt+0x88f0>
   19200:	cmp	sl, #0
   19204:	beq	19db8 <__assert_fail@plt+0x88f8>
   19208:	mov	r5, r1
   1920c:	ldrb	r1, [r4]
   19210:	cmp	r1, #0
   19214:	beq	19db8 <__assert_fail@plt+0x88f8>
   19218:	mov	r0, sl
   1921c:	bl	11358 <strchr@plt>
   19220:	cmp	r0, #0
   19224:	beq	19db8 <__assert_fail@plt+0x88f8>
   19228:	mov	r1, r5
   1922c:	mov	r8, #0
   19230:	mov	r6, #1
   19234:	mov	r7, #0
   19238:	b	19248 <__assert_fail@plt+0x7d88>
   1923c:	mov	r8, r0
   19240:	cmp	sl, #0
   19244:	beq	19db0 <__assert_fail@plt+0x88f0>
   19248:	ldrb	r4, [r1]
   1924c:	cmp	r4, #0
   19250:	beq	19db0 <__assert_fail@plt+0x88f0>
   19254:	str	r1, [sp, #32]
   19258:	mov	r0, sl
   1925c:	mov	r1, r4
   19260:	bl	11358 <strchr@plt>
   19264:	cmp	r0, #0
   19268:	beq	19530 <__assert_fail@plt+0x8070>
   1926c:	sub	r0, r4, #69	; 0x45
   19270:	mov	r1, #1
   19274:	mov	r3, #0
   19278:	mov	r5, #1024	; 0x400
   1927c:	cmp	r0, #47	; 0x2f
   19280:	str	r1, [sp, #28]
   19284:	bhi	19388 <__assert_fail@plt+0x7ec8>
   19288:	add	r1, pc, #0
   1928c:	ldr	pc, [r1, r0, lsl #2]
   19290:	andeq	r9, r1, r0, asr r3
   19294:	andeq	r9, r1, r8, lsl #7
   19298:	andeq	r9, r1, r0, asr r3
   1929c:	andeq	r9, r1, r8, lsl #7
   192a0:	andeq	r9, r1, r8, lsl #7
   192a4:	andeq	r9, r1, r8, lsl #7
   192a8:	andeq	r9, r1, r0, asr r3
   192ac:	andeq	r9, r1, r8, lsl #7
   192b0:	andeq	r9, r1, r0, asr r3
   192b4:	andeq	r9, r1, r8, lsl #7
   192b8:	andeq	r9, r1, r8, lsl #7
   192bc:	andeq	r9, r1, r0, asr r3
   192c0:	andeq	r9, r1, r8, lsl #7
   192c4:	andeq	r9, r1, r8, lsl #7
   192c8:	andeq	r9, r1, r8, lsl #7
   192cc:	andeq	r9, r1, r0, asr r3
   192d0:	andeq	r9, r1, r8, lsl #7
   192d4:	andeq	r9, r1, r8, lsl #7
   192d8:	andeq	r9, r1, r8, lsl #7
   192dc:	andeq	r9, r1, r8, lsl #7
   192e0:	andeq	r9, r1, r0, asr r3
   192e4:	andeq	r9, r1, r0, asr r3
   192e8:	andeq	r9, r1, r8, lsl #7
   192ec:	andeq	r9, r1, r8, lsl #7
   192f0:	andeq	r9, r1, r8, lsl #7
   192f4:	andeq	r9, r1, r8, lsl #7
   192f8:	andeq	r9, r1, r8, lsl #7
   192fc:	andeq	r9, r1, r8, lsl #7
   19300:	andeq	r9, r1, r8, lsl #7
   19304:	andeq	r9, r1, r8, lsl #7
   19308:	andeq	r9, r1, r8, lsl #7
   1930c:	andeq	r9, r1, r8, lsl #7
   19310:	andeq	r9, r1, r8, lsl #7
   19314:	andeq	r9, r1, r8, lsl #7
   19318:	andeq	r9, r1, r0, asr r3
   1931c:	andeq	r9, r1, r8, lsl #7
   19320:	andeq	r9, r1, r8, lsl #7
   19324:	andeq	r9, r1, r8, lsl #7
   19328:	andeq	r9, r1, r0, asr r3
   1932c:	andeq	r9, r1, r8, lsl #7
   19330:	andeq	r9, r1, r0, asr r3
   19334:	andeq	r9, r1, r8, lsl #7
   19338:	andeq	r9, r1, r8, lsl #7
   1933c:	andeq	r9, r1, r8, lsl #7
   19340:	andeq	r9, r1, r8, lsl #7
   19344:	andeq	r9, r1, r8, lsl #7
   19348:	andeq	r9, r1, r8, lsl #7
   1934c:	andeq	r9, r1, r0, asr r3
   19350:	mov	r0, sl
   19354:	mov	r1, #48	; 0x30
   19358:	bl	11358 <strchr@plt>
   1935c:	cmp	r0, #0
   19360:	beq	19384 <__assert_fail@plt+0x7ec4>
   19364:	ldr	r1, [sp, #32]
   19368:	ldrb	r0, [r1, #1]
   1936c:	cmp	r0, #66	; 0x42
   19370:	cmpne	r0, #68	; 0x44
   19374:	bne	1953c <__assert_fail@plt+0x807c>
   19378:	mov	r5, #1000	; 0x3e8
   1937c:	mov	r0, #2
   19380:	str	r0, [sp, #28]
   19384:	mov	r3, #0
   19388:	sub	r0, r4, #66	; 0x42
   1938c:	cmp	r0, #53	; 0x35
   19390:	bhi	19530 <__assert_fail@plt+0x8070>
   19394:	add	r1, pc, #0
   19398:	ldr	pc, [r1, r0, lsl #2]
   1939c:			; <UNDEFINED> instruction: 0x000198b8
   193a0:	andeq	r9, r1, r0, lsr r5
   193a4:	andeq	r9, r1, r0, lsr r5
   193a8:	andeq	r9, r1, r0, ror #17
   193ac:	andeq	r9, r1, r0, lsr r5
   193b0:	andeq	r9, r1, r4, ror r4
   193b4:	andeq	r9, r1, r0, lsr r5
   193b8:	andeq	r9, r1, r0, lsr r5
   193bc:	andeq	r9, r1, r0, lsr r5
   193c0:	andeq	r9, r1, r0, ror #10
   193c4:	andeq	r9, r1, r0, lsr r5
   193c8:	andeq	r9, r1, r8, lsr #11
   193cc:	andeq	r9, r1, r0, lsr r5
   193d0:	andeq	r9, r1, r0, lsr r5
   193d4:	andeq	r9, r1, r8, lsr sl
   193d8:	andeq	r9, r1, r0, lsr r5
   193dc:	andeq	r9, r1, r0, lsr r5
   193e0:	andeq	r9, r1, r0, lsr r5
   193e4:	andeq	r9, r1, r4, lsr r6
   193e8:	andeq	r9, r1, r0, lsr r5
   193ec:	andeq	r9, r1, r0, lsr r5
   193f0:	andeq	r9, r1, r0, lsr r5
   193f4:	andeq	r9, r1, r0, lsr r5
   193f8:	andeq	r9, r1, r0, ror #22
   193fc:	andeq	r9, r1, ip, lsl r7
   19400:	andeq	r9, r1, r0, lsr r5
   19404:	andeq	r9, r1, r0, lsr r5
   19408:	andeq	r9, r1, r0, lsr r5
   1940c:	andeq	r9, r1, r0, lsr r5
   19410:	andeq	r9, r1, r0, lsr r5
   19414:	andeq	r9, r1, r0, lsr r5
   19418:	andeq	r9, r1, r0, lsr r5
   1941c:	andeq	r9, r1, r8, lsr sp
   19420:	muleq	r1, r0, sp
   19424:	andeq	r9, r1, r0, lsr r5
   19428:	andeq	r9, r1, r0, lsr r5
   1942c:	andeq	r9, r1, r0, lsr r5
   19430:	andeq	r9, r1, r4, ror r4
   19434:	andeq	r9, r1, r0, lsr r5
   19438:	andeq	r9, r1, r0, lsr r5
   1943c:	andeq	r9, r1, r0, lsr r5
   19440:	andeq	r9, r1, r0, ror #10
   19444:	andeq	r9, r1, r0, lsr r5
   19448:	andeq	r9, r1, r8, lsr #11
   1944c:	andeq	r9, r1, r0, lsr r5
   19450:	andeq	r9, r1, r0, lsr r5
   19454:	andeq	r9, r1, r0, lsr r5
   19458:	andeq	r9, r1, r0, lsr r5
   1945c:	andeq	r9, r1, r0, lsr r5
   19460:	andeq	r9, r1, r0, lsr r5
   19464:	andeq	r9, r1, r4, lsr r6
   19468:	andeq	r9, r1, r0, lsr r5
   1946c:	andeq	r9, r1, r0, lsr r5
   19470:	andeq	r9, r1, ip, ror #26
   19474:	mvn	r0, #0
   19478:	mvn	r1, #0
   1947c:	mov	r2, r5
   19480:	mov	sl, r3
   19484:	bl	1a5e0 <__assert_fail@plt+0x9120>
   19488:	subs	r3, r0, r6
   1948c:	mov	lr, #0
   19490:	umull	r4, r2, r6, r5
   19494:	str	r1, [sp, #20]
   19498:	sbcs	r3, r1, r7
   1949c:	mla	ip, r6, sl, r2
   194a0:	mov	r2, r1
   194a4:	movwcc	lr, #1
   194a8:	mla	r7, r7, r5, ip
   194ac:	mov	r2, #0
   194b0:	cmp	lr, #0
   194b4:	mvnne	r4, #0
   194b8:	mvnne	r7, #0
   194bc:	subs	r6, r0, r4
   194c0:	sbcs	r6, r1, r7
   194c4:	movwcc	r2, #1
   194c8:	umull	r3, r6, r4, r5
   194cc:	cmp	r2, #0
   194d0:	str	r6, [sp, #16]
   194d4:	mvnne	r3, #0
   194d8:	cmp	r2, #0
   194dc:	umull	r6, ip, r3, r5
   194e0:	mla	r1, r3, sl, ip
   194e4:	ldr	ip, [sp, #16]
   194e8:	str	r1, [sp, #12]
   194ec:	mla	r4, r4, sl, ip
   194f0:	mla	r4, r7, r5, r4
   194f4:	ldr	r7, [sp, #12]
   194f8:	mvnne	r4, #0
   194fc:	subs	r0, r0, r3
   19500:	ldr	r0, [sp, #20]
   19504:	mla	r7, r4, r5, r7
   19508:	sbcs	r0, r0, r4
   1950c:	mov	r0, #0
   19510:	movwcc	r0, #1
   19514:	cmp	r0, #0
   19518:	mov	r1, r0
   1951c:	orr	r0, lr, r2
   19520:	mvnne	r7, #0
   19524:	mvnne	r6, #0
   19528:	orr	r3, r0, r1
   1952c:	b	19d90 <__assert_fail@plt+0x88d0>
   19530:	ldr	r0, [sp, #36]	; 0x24
   19534:	orr	r8, r8, #2
   19538:	b	19db4 <__assert_fail@plt+0x88f4>
   1953c:	cmp	r0, #105	; 0x69
   19540:	mov	r3, #0
   19544:	bne	19388 <__assert_fail@plt+0x7ec8>
   19548:	ldrb	r0, [r1, #2]
   1954c:	mov	r1, #1
   19550:	cmp	r0, #66	; 0x42
   19554:	movweq	r1, #3
   19558:	str	r1, [sp, #28]
   1955c:	b	19388 <__assert_fail@plt+0x7ec8>
   19560:	mvn	r0, #0
   19564:	mvn	r1, #0
   19568:	mov	r2, r5
   1956c:	mov	r4, r3
   19570:	bl	1a5e0 <__assert_fail@plt+0x9120>
   19574:	subs	r0, r0, r6
   19578:	mov	r2, #0
   1957c:	sbcs	r0, r1, r7
   19580:	movwcc	r2, #1
   19584:	umull	r0, r1, r6, r5
   19588:	mla	r1, r6, r4, r1
   1958c:	cmp	r2, #0
   19590:	mov	r3, r2
   19594:	mla	r7, r7, r5, r1
   19598:	mvnne	r0, #0
   1959c:	mvnne	r7, #0
   195a0:	mov	r6, r0
   195a4:	b	19d90 <__assert_fail@plt+0x88d0>
   195a8:	mvn	r0, #0
   195ac:	mvn	r1, #0
   195b0:	mov	r2, r5
   195b4:	str	r3, [sp, #24]
   195b8:	bl	1a5e0 <__assert_fail@plt+0x9120>
   195bc:	subs	r3, r0, r6
   195c0:	mov	ip, r0
   195c4:	umull	r4, r0, r6, r5
   195c8:	mov	sl, #0
   195cc:	sbcs	r3, r1, r7
   195d0:	str	r0, [sp, #20]
   195d4:	ldr	r0, [sp, #24]
   195d8:	mov	r3, #0
   195dc:	movwcc	r3, #1
   195e0:	cmp	r3, #0
   195e4:	mvnne	r4, #0
   195e8:	cmp	r3, #0
   195ec:	umull	lr, r2, r4, r5
   195f0:	mla	r2, r4, r0, r2
   195f4:	str	r2, [sp, #16]
   195f8:	ldr	r2, [sp, #20]
   195fc:	mla	r6, r6, r0, r2
   19600:	ldr	r0, [sp, #16]
   19604:	mla	r6, r7, r5, r6
   19608:	mvnne	r6, #0
   1960c:	mla	r7, r6, r5, r0
   19610:	subs	r0, ip, r4
   19614:	sbcs	r0, r1, r6
   19618:	movwcc	sl, #1
   1961c:	cmp	sl, #0
   19620:	orr	r3, r3, sl
   19624:	mvnne	lr, #0
   19628:	mvnne	r7, #0
   1962c:	mov	r6, lr
   19630:	b	19d90 <__assert_fail@plt+0x88d0>
   19634:	mvn	r0, #0
   19638:	mvn	r1, #0
   1963c:	mov	r2, r5
   19640:	mov	sl, r3
   19644:	bl	1a5e0 <__assert_fail@plt+0x9120>
   19648:	subs	r3, r0, r6
   1964c:	mov	ip, r1
   19650:	umull	r2, lr, r6, r5
   19654:	str	r0, [sp, #20]
   19658:	sbcs	r3, r1, r7
   1965c:	mov	r1, #0
   19660:	mla	r6, r6, sl, lr
   19664:	mov	lr, #0
   19668:	str	ip, [sp, #16]
   1966c:	movwcc	r1, #1
   19670:	mla	r7, r7, r5, r6
   19674:	cmp	r1, #0
   19678:	mvnne	r2, #0
   1967c:	cmp	r1, #0
   19680:	umull	r3, r4, r2, r5
   19684:	mvnne	r7, #0
   19688:	mla	r4, r2, sl, r4
   1968c:	subs	r2, r0, r2
   19690:	sbcs	r2, ip, r7
   19694:	mla	r4, r7, r5, r4
   19698:	movwcc	lr, #1
   1969c:	mov	r2, #0
   196a0:	cmp	lr, #0
   196a4:	mvnne	r3, #0
   196a8:	mvnne	r4, #0
   196ac:	subs	r7, r0, r3
   196b0:	mov	r0, r5
   196b4:	sbcs	r7, ip, r4
   196b8:	movwcc	r2, #1
   196bc:	umull	r5, r7, r3, r5
   196c0:	cmp	r2, #0
   196c4:	mla	r3, r3, sl, r7
   196c8:	mvnne	r5, #0
   196cc:	mla	r3, r4, r0, r3
   196d0:	cmp	r2, #0
   196d4:	umull	r6, ip, r5, r0
   196d8:	mvnne	r3, #0
   196dc:	mla	ip, r5, sl, ip
   196e0:	mla	r7, r3, r0, ip
   196e4:	ldr	r0, [sp, #20]
   196e8:	subs	r0, r0, r5
   196ec:	ldr	r0, [sp, #16]
   196f0:	sbcs	r0, r0, r3
   196f4:	mov	r0, #0
   196f8:	movwcc	r0, #1
   196fc:	cmp	r0, #0
   19700:	mov	r3, r0
   19704:	orr	r0, r1, lr
   19708:	orr	r0, r0, r2
   1970c:	mvnne	r7, #0
   19710:	mvnne	r6, #0
   19714:	orr	r3, r0, r3
   19718:	b	19d90 <__assert_fail@plt+0x88d0>
   1971c:	mvn	r0, #0
   19720:	mvn	r1, #0
   19724:	mov	r2, r5
   19728:	mov	r4, r3
   1972c:	str	r3, [sp, #24]
   19730:	bl	1a5e0 <__assert_fail@plt+0x9120>
   19734:	umull	r3, r2, r6, r5
   19738:	mla	r2, r6, r4, r2
   1973c:	subs	r6, r0, r6
   19740:	sbcs	r6, r1, r7
   19744:	mla	ip, r7, r5, r2
   19748:	ldr	r2, [sp, #24]
   1974c:	mov	r6, #0
   19750:	movwcc	r6, #1
   19754:	cmp	r6, #0
   19758:	str	r6, [sp, #20]
   1975c:	mov	r6, #0
   19760:	mvnne	r3, #0
   19764:	mvnne	ip, #0
   19768:	subs	r4, r0, r3
   1976c:	umull	r7, lr, r3, r5
   19770:	sbcs	r4, r1, ip
   19774:	mla	r3, r3, r2, lr
   19778:	movwcc	r6, #1
   1977c:	cmp	r6, #0
   19780:	str	r6, [sp, #16]
   19784:	mvnne	r7, #0
   19788:	cmp	r6, #0
   1978c:	umull	sl, r4, r7, r5
   19790:	mla	r4, r7, r2, r4
   19794:	mla	r2, ip, r5, r3
   19798:	mov	ip, #0
   1979c:	mvnne	r2, #0
   197a0:	subs	r3, r0, r7
   197a4:	mla	r6, r2, r5, r4
   197a8:	mov	r4, r0
   197ac:	sbcs	r2, r1, r2
   197b0:	mov	r0, #0
   197b4:	movwcc	r0, #1
   197b8:	mov	r3, r4
   197bc:	cmp	r0, #0
   197c0:	str	r0, [sp, #12]
   197c4:	mov	r0, r1
   197c8:	str	r3, [sp, #4]
   197cc:	mvnne	sl, #0
   197d0:	mvnne	r6, #0
   197d4:	str	r0, [sp, #8]
   197d8:	subs	r2, r4, sl
   197dc:	ldr	r4, [sp, #24]
   197e0:	sbcs	r2, r1, r6
   197e4:	movwcc	ip, #1
   197e8:	umull	r7, r2, sl, r5
   197ec:	cmp	ip, #0
   197f0:	mla	r2, sl, r4, r2
   197f4:	mvnne	r7, #0
   197f8:	cmp	ip, #0
   197fc:	mov	sl, #0
   19800:	umull	r1, lr, r7, r5
   19804:	mla	r2, r6, r5, r2
   19808:	mvnne	r2, #0
   1980c:	mla	lr, r7, r4, lr
   19810:	subs	r6, r3, r7
   19814:	mla	lr, r2, r5, lr
   19818:	sbcs	r2, r0, r2
   1981c:	movwcc	sl, #1
   19820:	mov	r2, #0
   19824:	cmp	sl, #0
   19828:	mvnne	r1, #0
   1982c:	mvnne	lr, #0
   19830:	subs	r6, r3, r1
   19834:	ldr	r3, [sp, #24]
   19838:	sbcs	r6, r0, lr
   1983c:	umull	r0, r7, r1, r5
   19840:	movwcc	r2, #1
   19844:	cmp	r2, #0
   19848:	mvnne	r0, #0
   1984c:	mla	r1, r1, r3, r7
   19850:	cmp	r2, #0
   19854:	umull	r6, r4, r0, r5
   19858:	mla	r1, lr, r5, r1
   1985c:	mla	r4, r0, r3, r4
   19860:	ldr	r3, [sp, #4]
   19864:	mvnne	r1, #0
   19868:	mla	r7, r1, r5, r4
   1986c:	ldr	r5, [sp, #16]
   19870:	subs	r0, r3, r0
   19874:	ldr	r0, [sp, #8]
   19878:	sbcs	r0, r0, r1
   1987c:	mov	r0, #0
   19880:	movwcc	r0, #1
   19884:	cmp	r0, #0
   19888:	mov	r1, r0
   1988c:	ldr	r0, [sp, #20]
   19890:	mvnne	r7, #0
   19894:	mvnne	r6, #0
   19898:	orr	r0, r0, r5
   1989c:	ldr	r5, [sp, #12]
   198a0:	orr	r0, r0, r5
   198a4:	orr	r0, r0, ip
   198a8:	orr	r0, r0, sl
   198ac:	orr	r0, r0, r2
   198b0:	orr	r0, r0, r1
   198b4:	b	19d30 <__assert_fail@plt+0x8870>
   198b8:	mov	r1, #0
   198bc:	lsl	r2, r7, #10
   198c0:	lsl	r0, r6, #10
   198c4:	lsr	r3, r7, #22
   198c8:	cmp	r1, r7, lsr #22
   198cc:	orr	r2, r2, r6, lsr #22
   198d0:	mvnne	r0, #0
   198d4:	movwne	r3, #1
   198d8:	cmp	r1, r7, lsr #22
   198dc:	b	19d5c <__assert_fail@plt+0x889c>
   198e0:	mvn	r0, #0
   198e4:	mvn	r1, #0
   198e8:	mov	r2, r5
   198ec:	mov	sl, r3
   198f0:	bl	1a5e0 <__assert_fail@plt+0x9120>
   198f4:	subs	r2, r0, r6
   198f8:	mov	ip, r0
   198fc:	mov	r0, #0
   19900:	sbcs	r2, r1, r7
   19904:	movwcc	r0, #1
   19908:	umull	r4, r2, r6, r5
   1990c:	cmp	r0, #0
   19910:	mla	r2, r6, sl, r2
   19914:	str	r0, [sp, #20]
   19918:	mvnne	r4, #0
   1991c:	cmp	r0, #0
   19920:	mla	r2, r7, r5, r2
   19924:	mov	r0, #0
   19928:	umull	lr, r3, r4, r5
   1992c:	mvnne	r2, #0
   19930:	mla	r3, r4, sl, r3
   19934:	mla	r6, r2, r5, r3
   19938:	subs	r3, ip, r4
   1993c:	sbcs	r2, r1, r2
   19940:	mov	r3, r1
   19944:	movwcc	r0, #1
   19948:	str	r3, [sp, #8]
   1994c:	cmp	r0, #0
   19950:	str	r0, [sp, #16]
   19954:	mov	r0, ip
   19958:	mvnne	lr, #0
   1995c:	mvnne	r6, #0
   19960:	str	r0, [sp, #12]
   19964:	subs	r2, ip, lr
   19968:	umull	r7, r4, lr, r5
   1996c:	sbcs	r2, r1, r6
   19970:	mla	r4, lr, sl, r4
   19974:	mov	r2, #0
   19978:	mla	r6, r6, r5, r4
   1997c:	mov	r4, #0
   19980:	movwcc	r2, #1
   19984:	cmp	r2, #0
   19988:	mvnne	r7, #0
   1998c:	cmp	r2, #0
   19990:	umull	r1, ip, r7, r5
   19994:	mvnne	r6, #0
   19998:	mla	ip, r7, sl, ip
   1999c:	subs	r7, r0, r7
   199a0:	mla	lr, r6, r5, ip
   199a4:	sbcs	r7, r3, r6
   199a8:	mov	ip, #0
   199ac:	movwcc	ip, #1
   199b0:	cmp	ip, #0
   199b4:	mvnne	r1, #0
   199b8:	mvnne	lr, #0
   199bc:	subs	r7, r0, r1
   199c0:	sbcs	r7, r3, lr
   199c4:	movwcc	r4, #1
   199c8:	umull	r0, r7, r1, r5
   199cc:	cmp	r4, #0
   199d0:	mla	r1, r1, sl, r7
   199d4:	mvnne	r0, #0
   199d8:	mla	r1, lr, r5, r1
   199dc:	cmp	r4, #0
   199e0:	umull	r6, r3, r0, r5
   199e4:	mvnne	r1, #0
   199e8:	mla	r3, r0, sl, r3
   199ec:	mla	r7, r1, r5, r3
   199f0:	ldr	r3, [sp, #12]
   199f4:	subs	r0, r3, r0
   199f8:	ldr	r3, [sp, #16]
   199fc:	ldr	r0, [sp, #8]
   19a00:	sbcs	r0, r0, r1
   19a04:	mov	r0, #0
   19a08:	movwcc	r0, #1
   19a0c:	cmp	r0, #0
   19a10:	mov	r1, r0
   19a14:	ldr	r0, [sp, #20]
   19a18:	mvnne	r7, #0
   19a1c:	mvnne	r6, #0
   19a20:	orr	r0, r0, r3
   19a24:	orr	r0, r0, r2
   19a28:	orr	r0, r0, ip
   19a2c:	orr	r0, r0, r4
   19a30:	orr	r3, r0, r1
   19a34:	b	19d90 <__assert_fail@plt+0x88d0>
   19a38:	mvn	r0, #0
   19a3c:	mvn	r1, #0
   19a40:	mov	r2, r5
   19a44:	mov	sl, r3
   19a48:	bl	1a5e0 <__assert_fail@plt+0x9120>
   19a4c:	umull	r3, r2, r6, r5
   19a50:	mov	lr, r1
   19a54:	mov	r1, r0
   19a58:	mla	r2, r6, sl, r2
   19a5c:	subs	r6, r0, r6
   19a60:	mov	r0, #0
   19a64:	sbcs	r6, lr, r7
   19a68:	mla	r2, r7, r5, r2
   19a6c:	movwcc	r0, #1
   19a70:	cmp	r0, #0
   19a74:	str	r0, [sp, #20]
   19a78:	mov	r0, r1
   19a7c:	mvnne	r3, #0
   19a80:	mvnne	r2, #0
   19a84:	str	r0, [sp, #16]
   19a88:	subs	r4, r1, r3
   19a8c:	umull	r7, ip, r3, r5
   19a90:	sbcs	r4, lr, r2
   19a94:	mla	r3, r3, sl, ip
   19a98:	mov	ip, #0
   19a9c:	mov	r4, #0
   19aa0:	mla	r2, r2, r5, r3
   19aa4:	movwcc	r4, #1
   19aa8:	cmp	r4, #0
   19aac:	mvnne	r7, #0
   19ab0:	cmp	r4, #0
   19ab4:	umull	r1, r6, r7, r5
   19ab8:	mvnne	r2, #0
   19abc:	mla	r6, r7, sl, r6
   19ac0:	mla	r3, r2, r5, r6
   19ac4:	subs	r6, r0, r7
   19ac8:	sbcs	r2, lr, r2
   19acc:	movwcc	ip, #1
   19ad0:	mov	r2, #0
   19ad4:	cmp	ip, #0
   19ad8:	mvnne	r1, #0
   19adc:	mvnne	r3, #0
   19ae0:	subs	r6, r0, r1
   19ae4:	sbcs	r6, lr, r3
   19ae8:	movwcc	r2, #1
   19aec:	umull	r0, r6, r1, r5
   19af0:	cmp	r2, #0
   19af4:	str	r6, [sp, #12]
   19af8:	mvnne	r0, #0
   19afc:	cmp	r2, #0
   19b00:	umull	r6, r7, r0, r5
   19b04:	mla	r7, r0, sl, r7
   19b08:	str	r7, [sp, #8]
   19b0c:	ldr	r7, [sp, #12]
   19b10:	mla	r1, r1, sl, r7
   19b14:	mla	r1, r3, r5, r1
   19b18:	ldr	r3, [sp, #8]
   19b1c:	mvnne	r1, #0
   19b20:	mla	r7, r1, r5, r3
   19b24:	ldr	r3, [sp, #16]
   19b28:	subs	r0, r3, r0
   19b2c:	sbcs	r0, lr, r1
   19b30:	mov	r0, #0
   19b34:	movwcc	r0, #1
   19b38:	cmp	r0, #0
   19b3c:	mov	r1, r0
   19b40:	ldr	r0, [sp, #20]
   19b44:	mvnne	r7, #0
   19b48:	mvnne	r6, #0
   19b4c:	orr	r0, r0, r4
   19b50:	orr	r0, r0, ip
   19b54:	orr	r0, r0, r2
   19b58:	orr	r3, r0, r1
   19b5c:	b	19d90 <__assert_fail@plt+0x88d0>
   19b60:	mvn	r0, #0
   19b64:	mvn	r1, #0
   19b68:	mov	r2, r5
   19b6c:	mov	sl, r3
   19b70:	bl	1a5e0 <__assert_fail@plt+0x9120>
   19b74:	mov	lr, r0
   19b78:	subs	r0, r0, r6
   19b7c:	mov	r2, #0
   19b80:	mov	ip, r1
   19b84:	str	sl, [sp, #24]
   19b88:	sbcs	r0, r1, r7
   19b8c:	umull	r3, r1, r6, r5
   19b90:	str	lr, [sp, #4]
   19b94:	movwcc	r2, #1
   19b98:	mla	r6, r6, sl, r1
   19b9c:	mov	r1, #0
   19ba0:	cmp	r2, #0
   19ba4:	mla	r7, r7, r5, r6
   19ba8:	str	r2, [sp, #20]
   19bac:	mvnne	r3, #0
   19bb0:	cmp	r2, #0
   19bb4:	mov	r2, #0
   19bb8:	umull	r0, r4, r3, r5
   19bbc:	mvnne	r7, #0
   19bc0:	mla	r4, r3, sl, r4
   19bc4:	subs	r3, lr, r3
   19bc8:	sbcs	r3, ip, r7
   19bcc:	mla	r4, r7, r5, r4
   19bd0:	movwcc	r1, #1
   19bd4:	cmp	r1, #0
   19bd8:	str	r1, [sp, #16]
   19bdc:	mvnne	r0, #0
   19be0:	mvnne	r4, #0
   19be4:	subs	r3, lr, r0
   19be8:	sbcs	r3, ip, r4
   19bec:	movwcc	r2, #1
   19bf0:	umull	r6, r3, r0, r5
   19bf4:	cmp	r2, #0
   19bf8:	mla	r0, r0, sl, r3
   19bfc:	str	r2, [sp, #12]
   19c00:	mvnne	r6, #0
   19c04:	mla	r0, r4, r5, r0
   19c08:	cmp	r2, #0
   19c0c:	ldr	r4, [sp, #24]
   19c10:	umull	r1, r7, r6, r5
   19c14:	mvnne	r0, #0
   19c18:	subs	r3, lr, r6
   19c1c:	mla	r7, r6, sl, r7
   19c20:	mov	r3, ip
   19c24:	mla	r7, r0, r5, r7
   19c28:	sbcs	r0, ip, r0
   19c2c:	str	r3, [sp]
   19c30:	mov	r0, #0
   19c34:	movwcc	r0, #1
   19c38:	cmp	r0, #0
   19c3c:	str	r0, [sp, #8]
   19c40:	mvnne	r1, #0
   19c44:	mvnne	r7, #0
   19c48:	subs	r0, lr, r1
   19c4c:	sbcs	r0, ip, r7
   19c50:	mov	ip, #0
   19c54:	movwcc	ip, #1
   19c58:	umull	r6, r0, r1, r5
   19c5c:	cmp	ip, #0
   19c60:	mla	r1, r1, r4, r0
   19c64:	mov	r0, lr
   19c68:	mvnne	r6, #0
   19c6c:	mla	r1, r7, r5, r1
   19c70:	cmp	ip, #0
   19c74:	umull	r2, sl, r6, r5
   19c78:	mvnne	r1, #0
   19c7c:	mla	sl, r6, r4, sl
   19c80:	subs	r6, lr, r6
   19c84:	mov	lr, #0
   19c88:	mla	r7, r1, r5, sl
   19c8c:	sbcs	r1, r3, r1
   19c90:	movwcc	lr, #1
   19c94:	ldr	r1, [sp, #24]
   19c98:	cmp	lr, #0
   19c9c:	mvnne	r2, #0
   19ca0:	mvnne	r7, #0
   19ca4:	subs	r6, r0, r2
   19ca8:	umull	r0, sl, r2, r5
   19cac:	sbcs	r6, r3, r7
   19cb0:	mov	r3, #0
   19cb4:	mla	r2, r2, r1, sl
   19cb8:	movwcc	r3, #1
   19cbc:	mla	r2, r7, r5, r2
   19cc0:	cmp	r3, #0
   19cc4:	mvnne	r0, #0
   19cc8:	cmp	r3, #0
   19ccc:	umull	r6, r4, r0, r5
   19cd0:	mvnne	r2, #0
   19cd4:	mla	r4, r0, r1, r4
   19cd8:	ldr	r1, [sp, #4]
   19cdc:	mla	r7, r2, r5, r4
   19ce0:	ldr	r5, [sp, #16]
   19ce4:	subs	r0, r1, r0
   19ce8:	ldr	r0, [sp]
   19cec:	sbcs	r0, r0, r2
   19cf0:	mov	r0, #0
   19cf4:	movwcc	r0, #1
   19cf8:	cmp	r0, #0
   19cfc:	mov	r2, r0
   19d00:	ldr	r0, [sp, #20]
   19d04:	mvnne	r7, #0
   19d08:	mvnne	r6, #0
   19d0c:	orr	r0, r0, r5
   19d10:	ldr	r5, [sp, #12]
   19d14:	orr	r0, r0, r5
   19d18:	ldr	r5, [sp, #8]
   19d1c:	orr	r0, r0, r5
   19d20:	orr	r0, r0, ip
   19d24:	orr	r0, r0, lr
   19d28:	orr	r0, r0, r3
   19d2c:	orr	r0, r0, r2
   19d30:	and	r3, r0, #1
   19d34:	b	19d90 <__assert_fail@plt+0x88d0>
   19d38:	mov	r1, #0
   19d3c:	lsl	r2, r7, #9
   19d40:	lsl	r0, r6, #9
   19d44:	lsr	r3, r7, #23
   19d48:	cmp	r1, r7, lsr #23
   19d4c:	orr	r2, r2, r6, lsr #23
   19d50:	mvnne	r0, #0
   19d54:	movwne	r3, #1
   19d58:	cmp	r1, r7, lsr #23
   19d5c:	mvnne	r2, #0
   19d60:	mov	r6, r0
   19d64:	mov	r7, r2
   19d68:	b	19d90 <__assert_fail@plt+0x88d0>
   19d6c:	lsl	r1, r7, #1
   19d70:	lsl	r0, r6, #1
   19d74:	cmp	r7, #0
   19d78:	lsr	r3, r7, #31
   19d7c:	orr	r1, r1, r6, lsr #31
   19d80:	mvnlt	r0, #0
   19d84:	mvnlt	r1, #0
   19d88:	mov	r6, r0
   19d8c:	mov	r7, r1
   19d90:	ldr	r1, [sp, #32]
   19d94:	ldr	r2, [sp, #28]
   19d98:	orr	r8, r3, r8
   19d9c:	add	r0, r1, r2
   19da0:	str	r0, [r9]
   19da4:	ldrb	r0, [r1, r2]
   19da8:	cmp	r0, #0
   19dac:	orrne	r8, r8, #2
   19db0:	ldr	r0, [sp, #36]	; 0x24
   19db4:	strd	r6, [r0]
   19db8:	mov	r0, r8
   19dbc:	sub	sp, fp, #28
   19dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dc4:	movw	r0, #47946	; 0xbb4a
   19dc8:	movw	r1, #47984	; 0xbb70
   19dcc:	movw	r3, #48000	; 0xbb80
   19dd0:	mov	r2, #85	; 0x55
   19dd4:	movt	r0, #1
   19dd8:	movt	r1, #1
   19ddc:	movt	r3, #1
   19de0:	bl	114c0 <__assert_fail@plt>
   19de4:	clz	r2, r1
   19de8:	clz	r3, r0
   19dec:	lsr	r2, r2, #5
   19df0:	lsr	r3, r3, #5
   19df4:	orrs	r2, r3, r2
   19df8:	movwne	r1, #1
   19dfc:	movwne	r0, #1
   19e00:	cmp	r1, #0
   19e04:	beq	19e34 <__assert_fail@plt+0x8974>
   19e08:	mvn	r2, #-2147483648	; 0x80000000
   19e0c:	udiv	r2, r2, r1
   19e10:	cmp	r2, r0
   19e14:	bcs	19e34 <__assert_fail@plt+0x8974>
   19e18:	push	{fp, lr}
   19e1c:	mov	fp, sp
   19e20:	bl	1137c <__errno_location@plt>
   19e24:	mov	r1, #12
   19e28:	str	r1, [r0]
   19e2c:	mov	r0, #0
   19e30:	pop	{fp, pc}
   19e34:	b	111a8 <calloc@plt>
   19e38:	cmp	r0, #0
   19e3c:	movweq	r0, #1
   19e40:	cmn	r0, #1
   19e44:	ble	19e4c <__assert_fail@plt+0x898c>
   19e48:	b	112f8 <malloc@plt>
   19e4c:	push	{fp, lr}
   19e50:	mov	fp, sp
   19e54:	bl	1137c <__errno_location@plt>
   19e58:	mov	r1, #12
   19e5c:	str	r1, [r0]
   19e60:	mov	r0, #0
   19e64:	pop	{fp, pc}
   19e68:	push	{fp, lr}
   19e6c:	mov	fp, sp
   19e70:	cmp	r0, #0
   19e74:	beq	19e90 <__assert_fail@plt+0x89d0>
   19e78:	cmp	r1, #0
   19e7c:	beq	19e9c <__assert_fail@plt+0x89dc>
   19e80:	cmn	r1, #1
   19e84:	ble	19ea8 <__assert_fail@plt+0x89e8>
   19e88:	pop	{fp, lr}
   19e8c:	b	11268 <realloc@plt>
   19e90:	mov	r0, r1
   19e94:	pop	{fp, lr}
   19e98:	b	19e38 <__assert_fail@plt+0x8978>
   19e9c:	bl	12e14 <__assert_fail@plt+0x1954>
   19ea0:	mov	r0, #0
   19ea4:	pop	{fp, pc}
   19ea8:	bl	1137c <__errno_location@plt>
   19eac:	mov	r1, #12
   19eb0:	str	r1, [r0]
   19eb4:	mov	r0, #0
   19eb8:	pop	{fp, pc}
   19ebc:	push	{r4, r5, r6, sl, fp, lr}
   19ec0:	add	fp, sp, #16
   19ec4:	mov	r4, r0
   19ec8:	bl	112c8 <__fpending@plt>
   19ecc:	ldr	r6, [r4]
   19ed0:	mov	r5, r0
   19ed4:	mov	r0, r4
   19ed8:	bl	1a034 <__assert_fail@plt+0x8b74>
   19edc:	tst	r6, #32
   19ee0:	bne	19f18 <__assert_fail@plt+0x8a58>
   19ee4:	cmp	r0, #0
   19ee8:	mov	r4, r0
   19eec:	mvnne	r4, #0
   19ef0:	cmp	r5, #0
   19ef4:	bne	19f24 <__assert_fail@plt+0x8a64>
   19ef8:	cmp	r0, #0
   19efc:	beq	19f24 <__assert_fail@plt+0x8a64>
   19f00:	bl	1137c <__errno_location@plt>
   19f04:	ldr	r0, [r0]
   19f08:	subs	r4, r0, #9
   19f0c:	mvnne	r4, #0
   19f10:	mov	r0, r4
   19f14:	pop	{r4, r5, r6, sl, fp, pc}
   19f18:	mvn	r4, #0
   19f1c:	cmp	r0, #0
   19f20:	beq	19f2c <__assert_fail@plt+0x8a6c>
   19f24:	mov	r0, r4
   19f28:	pop	{r4, r5, r6, sl, fp, pc}
   19f2c:	bl	1137c <__errno_location@plt>
   19f30:	mov	r1, #0
   19f34:	str	r1, [r0]
   19f38:	mov	r0, r4
   19f3c:	pop	{r4, r5, r6, sl, fp, pc}
   19f40:	movw	r2, #62998	; 0xf616
   19f44:	mov	r1, #0
   19f48:	movt	r2, #149	; 0x95
   19f4c:	str	r1, [r0, #16]
   19f50:	str	r1, [r0, #20]
   19f54:	str	r2, [r0, #24]
   19f58:	bx	lr
   19f5c:	push	{r4, r5, r6, r7, fp, lr}
   19f60:	add	fp, sp, #16
   19f64:	ldr	r2, [r0, #24]
   19f68:	movw	r3, #62998	; 0xf616
   19f6c:	movt	r3, #149	; 0x95
   19f70:	cmp	r2, r3
   19f74:	bne	1a014 <__assert_fail@plt+0x8b54>
   19f78:	mov	r3, r0
   19f7c:	ldr	r2, [r3, #16]!
   19f80:	ldr	lr, [r3, #4]
   19f84:	orrs	r5, r2, lr
   19f88:	beq	19fc0 <__assert_fail@plt+0x8b00>
   19f8c:	ldrd	r4, [r0]
   19f90:	ldrd	r6, [r1, #96]	; 0x60
   19f94:	eor	r7, r7, r5
   19f98:	eor	r6, r6, r4
   19f9c:	orrs	r7, r6, r7
   19fa0:	bne	19fc0 <__assert_fail@plt+0x8b00>
   19fa4:	ldrd	r4, [r0, #8]
   19fa8:	ldrd	r6, [r1]
   19fac:	mov	ip, #1
   19fb0:	eor	r7, r7, r5
   19fb4:	eor	r6, r6, r4
   19fb8:	orrs	r7, r6, r7
   19fbc:	beq	19fe0 <__assert_fail@plt+0x8b20>
   19fc0:	adds	r4, r2, #1
   19fc4:	mov	ip, #0
   19fc8:	adc	r5, lr, #0
   19fcc:	and	r2, r4, r2
   19fd0:	strd	r4, [r3]
   19fd4:	and	r3, r5, lr
   19fd8:	orrs	r2, r2, r3
   19fdc:	beq	19fe8 <__assert_fail@plt+0x8b28>
   19fe0:	mov	r0, ip
   19fe4:	pop	{r4, r5, r6, r7, fp, pc}
   19fe8:	orrs	r2, r4, r5
   19fec:	moveq	ip, #1
   19ff0:	moveq	r0, ip
   19ff4:	popeq	{r4, r5, r6, r7, fp, pc}
   19ff8:	ldrd	r2, [r1]
   19ffc:	str	r3, [r0, #12]
   1a000:	str	r2, [r0, #8]
   1a004:	ldrd	r2, [r1, #96]	; 0x60
   1a008:	stm	r0, {r2, r3}
   1a00c:	mov	r0, ip
   1a010:	pop	{r4, r5, r6, r7, fp, pc}
   1a014:	movw	r0, #48079	; 0xbbcf
   1a018:	movw	r1, #48103	; 0xbbe7
   1a01c:	movw	r3, #48121	; 0xbbf9
   1a020:	mov	r2, #60	; 0x3c
   1a024:	movt	r0, #1
   1a028:	movt	r1, #1
   1a02c:	movt	r3, #1
   1a030:	bl	114c0 <__assert_fail@plt>
   1a034:	push	{r4, r5, r6, sl, fp, lr}
   1a038:	add	fp, sp, #16
   1a03c:	sub	sp, sp, #8
   1a040:	mov	r4, r0
   1a044:	bl	113ac <fileno@plt>
   1a048:	cmn	r0, #1
   1a04c:	ble	1a0c0 <__assert_fail@plt+0x8c00>
   1a050:	mov	r0, r4
   1a054:	bl	11310 <__freading@plt>
   1a058:	cmp	r0, #0
   1a05c:	beq	1a088 <__assert_fail@plt+0x8bc8>
   1a060:	mov	r0, r4
   1a064:	bl	113ac <fileno@plt>
   1a068:	mov	r1, #1
   1a06c:	mov	r2, #0
   1a070:	mov	r3, #0
   1a074:	str	r1, [sp]
   1a078:	bl	112b0 <lseek64@plt>
   1a07c:	and	r0, r0, r1
   1a080:	cmn	r0, #1
   1a084:	beq	1a0c0 <__assert_fail@plt+0x8c00>
   1a088:	mov	r0, r4
   1a08c:	bl	1a2f8 <__assert_fail@plt+0x8e38>
   1a090:	cmp	r0, #0
   1a094:	beq	1a0c0 <__assert_fail@plt+0x8c00>
   1a098:	bl	1137c <__errno_location@plt>
   1a09c:	ldr	r6, [r0]
   1a0a0:	mov	r5, r0
   1a0a4:	mov	r0, r4
   1a0a8:	bl	113c4 <fclose@plt>
   1a0ac:	cmp	r6, #0
   1a0b0:	strne	r6, [r5]
   1a0b4:	mvnne	r0, #0
   1a0b8:	sub	sp, fp, #16
   1a0bc:	pop	{r4, r5, r6, sl, fp, pc}
   1a0c0:	mov	r0, r4
   1a0c4:	sub	sp, fp, #16
   1a0c8:	pop	{r4, r5, r6, sl, fp, lr}
   1a0cc:	b	113c4 <fclose@plt>
   1a0d0:	sub	sp, sp, #8
   1a0d4:	push	{r4, r5, r6, r7, fp, lr}
   1a0d8:	add	fp, sp, #16
   1a0dc:	sub	sp, sp, #8
   1a0e0:	mov	r5, r0
   1a0e4:	add	r0, fp, #8
   1a0e8:	cmp	r1, #11
   1a0ec:	str	r3, [fp, #12]
   1a0f0:	str	r2, [fp, #8]
   1a0f4:	str	r0, [sp, #4]
   1a0f8:	bhi	1a134 <__assert_fail@plt+0x8c74>
   1a0fc:	mov	r0, #1
   1a100:	movw	r2, #1300	; 0x514
   1a104:	tst	r2, r0, lsl r1
   1a108:	bne	1a1f4 <__assert_fail@plt+0x8d34>
   1a10c:	movw	r2, #2570	; 0xa0a
   1a110:	tst	r2, r0, lsl r1
   1a114:	bne	1a15c <__assert_fail@plt+0x8c9c>
   1a118:	cmp	r1, #0
   1a11c:	bne	1a134 <__assert_fail@plt+0x8c74>
   1a120:	ldr	r0, [sp, #4]
   1a124:	add	r1, r0, #4
   1a128:	str	r1, [sp, #4]
   1a12c:	mov	r1, #0
   1a130:	b	1a200 <__assert_fail@plt+0x8d40>
   1a134:	sub	r0, r1, #1024	; 0x400
   1a138:	cmp	r0, #10
   1a13c:	bhi	1a1f4 <__assert_fail@plt+0x8d34>
   1a140:	mov	r2, #1
   1a144:	movw	r3, #645	; 0x285
   1a148:	tst	r3, r2, lsl r0
   1a14c:	bne	1a1f4 <__assert_fail@plt+0x8d34>
   1a150:	movw	r3, #1282	; 0x502
   1a154:	tst	r3, r2, lsl r0
   1a158:	beq	1a168 <__assert_fail@plt+0x8ca8>
   1a15c:	mov	r0, r5
   1a160:	bl	113dc <fcntl64@plt>
   1a164:	b	1a20c <__assert_fail@plt+0x8d4c>
   1a168:	cmp	r0, #6
   1a16c:	bne	1a1f4 <__assert_fail@plt+0x8d34>
   1a170:	ldr	r0, [sp, #4]
   1a174:	movw	r7, #49896	; 0xc2e8
   1a178:	movt	r7, #2
   1a17c:	add	r1, r0, #4
   1a180:	str	r1, [sp, #4]
   1a184:	ldr	r6, [r0]
   1a188:	ldr	r0, [r7]
   1a18c:	cmp	r0, #0
   1a190:	blt	1a230 <__assert_fail@plt+0x8d70>
   1a194:	mov	r0, r5
   1a198:	movw	r1, #1030	; 0x406
   1a19c:	mov	r2, r6
   1a1a0:	bl	113dc <fcntl64@plt>
   1a1a4:	mov	r4, r0
   1a1a8:	cmn	r0, #1
   1a1ac:	bgt	1a224 <__assert_fail@plt+0x8d64>
   1a1b0:	bl	1137c <__errno_location@plt>
   1a1b4:	ldr	r0, [r0]
   1a1b8:	cmp	r0, #22
   1a1bc:	bne	1a224 <__assert_fail@plt+0x8d64>
   1a1c0:	mov	r0, r5
   1a1c4:	mov	r1, #0
   1a1c8:	mov	r2, r6
   1a1cc:	bl	113dc <fcntl64@plt>
   1a1d0:	mov	r4, r0
   1a1d4:	cmp	r0, #0
   1a1d8:	blt	1a210 <__assert_fail@plt+0x8d50>
   1a1dc:	mvn	r0, #0
   1a1e0:	str	r0, [r7]
   1a1e4:	mov	r0, #1
   1a1e8:	cmp	r0, #0
   1a1ec:	bne	1a25c <__assert_fail@plt+0x8d9c>
   1a1f0:	b	1a210 <__assert_fail@plt+0x8d50>
   1a1f4:	ldr	r0, [sp, #4]
   1a1f8:	add	r2, r0, #4
   1a1fc:	str	r2, [sp, #4]
   1a200:	ldr	r2, [r0]
   1a204:	mov	r0, r5
   1a208:	bl	113dc <fcntl64@plt>
   1a20c:	mov	r4, r0
   1a210:	mov	r0, r4
   1a214:	sub	sp, fp, #16
   1a218:	pop	{r4, r5, r6, r7, fp, lr}
   1a21c:	add	sp, sp, #8
   1a220:	bx	lr
   1a224:	mov	r0, #1
   1a228:	str	r0, [r7]
   1a22c:	b	1a210 <__assert_fail@plt+0x8d50>
   1a230:	mov	r0, r5
   1a234:	mov	r1, #0
   1a238:	mov	r2, r6
   1a23c:	bl	113dc <fcntl64@plt>
   1a240:	mov	r4, r0
   1a244:	ldr	r0, [r7]
   1a248:	add	r0, r0, #1
   1a24c:	clz	r0, r0
   1a250:	lsr	r0, r0, #5
   1a254:	cmp	r0, #0
   1a258:	beq	1a210 <__assert_fail@plt+0x8d50>
   1a25c:	cmp	r4, #0
   1a260:	blt	1a210 <__assert_fail@plt+0x8d50>
   1a264:	mov	r0, r4
   1a268:	mov	r1, #1
   1a26c:	bl	113dc <fcntl64@plt>
   1a270:	cmp	r0, #0
   1a274:	blt	1a290 <__assert_fail@plt+0x8dd0>
   1a278:	orr	r2, r0, #1
   1a27c:	mov	r0, r4
   1a280:	mov	r1, #2
   1a284:	bl	113dc <fcntl64@plt>
   1a288:	cmn	r0, #1
   1a28c:	bne	1a210 <__assert_fail@plt+0x8d50>
   1a290:	bl	1137c <__errno_location@plt>
   1a294:	ldr	r6, [r0]
   1a298:	mov	r5, r0
   1a29c:	mov	r0, r4
   1a2a0:	bl	11484 <close@plt>
   1a2a4:	str	r6, [r5]
   1a2a8:	mvn	r4, #0
   1a2ac:	b	1a210 <__assert_fail@plt+0x8d50>
   1a2b0:	sub	sp, sp, #8
   1a2b4:	push	{fp, lr}
   1a2b8:	mov	fp, sp
   1a2bc:	sub	sp, sp, #8
   1a2c0:	str	r2, [fp, #8]
   1a2c4:	mov	r2, #0
   1a2c8:	tst	r1, #64	; 0x40
   1a2cc:	str	r3, [fp, #12]
   1a2d0:	addne	r2, fp, #8
   1a2d4:	orrne	r2, r2, #4
   1a2d8:	strne	r2, [sp, #4]
   1a2dc:	ldrne	r2, [fp, #8]
   1a2e0:	bl	112ec <open64@plt>
   1a2e4:	bl	18428 <__assert_fail@plt+0x6f68>
   1a2e8:	mov	sp, fp
   1a2ec:	pop	{fp, lr}
   1a2f0:	add	sp, sp, #8
   1a2f4:	bx	lr
   1a2f8:	push	{r4, sl, fp, lr}
   1a2fc:	add	fp, sp, #8
   1a300:	sub	sp, sp, #8
   1a304:	mov	r4, r0
   1a308:	cmp	r0, #0
   1a30c:	beq	1a328 <__assert_fail@plt+0x8e68>
   1a310:	mov	r0, r4
   1a314:	bl	11310 <__freading@plt>
   1a318:	cmp	r0, #0
   1a31c:	ldrbne	r0, [r4, #1]
   1a320:	tstne	r0, #1
   1a324:	bne	1a338 <__assert_fail@plt+0x8e78>
   1a328:	mov	r0, r4
   1a32c:	sub	sp, fp, #8
   1a330:	pop	{r4, sl, fp, lr}
   1a334:	b	111f0 <fflush@plt>
   1a338:	mov	r0, #1
   1a33c:	mov	r2, #0
   1a340:	mov	r3, #0
   1a344:	str	r0, [sp]
   1a348:	mov	r0, r4
   1a34c:	bl	1a354 <__assert_fail@plt+0x8e94>
   1a350:	b	1a328 <__assert_fail@plt+0x8e68>
   1a354:	push	{r4, r5, r6, r7, fp, lr}
   1a358:	add	fp, sp, #16
   1a35c:	sub	sp, sp, #8
   1a360:	mov	r4, r0
   1a364:	ldr	r0, [r0, #4]
   1a368:	mov	r5, r3
   1a36c:	mov	r6, r2
   1a370:	ldr	r1, [r4, #8]
   1a374:	cmp	r1, r0
   1a378:	bne	1a394 <__assert_fail@plt+0x8ed4>
   1a37c:	ldrd	r0, [r4, #16]
   1a380:	cmp	r1, r0
   1a384:	bne	1a394 <__assert_fail@plt+0x8ed4>
   1a388:	ldr	r0, [r4, #36]	; 0x24
   1a38c:	cmp	r0, #0
   1a390:	beq	1a3ac <__assert_fail@plt+0x8eec>
   1a394:	mov	r0, r4
   1a398:	mov	r2, r6
   1a39c:	mov	r3, r5
   1a3a0:	sub	sp, fp, #16
   1a3a4:	pop	{r4, r5, r6, r7, fp, lr}
   1a3a8:	b	113d0 <fseeko64@plt>
   1a3ac:	ldr	r7, [fp, #8]
   1a3b0:	mov	r0, r4
   1a3b4:	bl	113ac <fileno@plt>
   1a3b8:	mov	r2, r6
   1a3bc:	mov	r3, r5
   1a3c0:	str	r7, [sp]
   1a3c4:	bl	112b0 <lseek64@plt>
   1a3c8:	and	r2, r0, r1
   1a3cc:	cmn	r2, #1
   1a3d0:	mvneq	r0, #0
   1a3d4:	subeq	sp, fp, #16
   1a3d8:	popeq	{r4, r5, r6, r7, fp, pc}
   1a3dc:	strd	r0, [r4, #80]	; 0x50
   1a3e0:	ldr	r0, [r4]
   1a3e4:	bic	r0, r0, #16
   1a3e8:	str	r0, [r4]
   1a3ec:	mov	r0, #0
   1a3f0:	sub	sp, fp, #16
   1a3f4:	pop	{r4, r5, r6, r7, fp, pc}
   1a3f8:	push	{fp, lr}
   1a3fc:	mov	fp, sp
   1a400:	mov	r0, #14
   1a404:	bl	11400 <nl_langinfo@plt>
   1a408:	movw	r1, #44532	; 0xadf4
   1a40c:	cmp	r0, #0
   1a410:	movt	r1, #1
   1a414:	movne	r1, r0
   1a418:	movw	r0, #48188	; 0xbc3c
   1a41c:	ldrb	r2, [r1]
   1a420:	movt	r0, #1
   1a424:	cmp	r2, #0
   1a428:	movne	r0, r1
   1a42c:	pop	{fp, pc}
   1a430:	push	{r4, r5, r6, r7, fp, lr}
   1a434:	add	fp, sp, #16
   1a438:	sub	sp, sp, #8
   1a43c:	add	r5, sp, #4
   1a440:	cmp	r0, #0
   1a444:	mov	r7, r2
   1a448:	mov	r4, r1
   1a44c:	movne	r5, r0
   1a450:	mov	r0, r5
   1a454:	bl	112d4 <mbrtowc@plt>
   1a458:	mov	r6, r0
   1a45c:	cmp	r7, #0
   1a460:	beq	1a484 <__assert_fail@plt+0x8fc4>
   1a464:	cmn	r6, #2
   1a468:	bcc	1a484 <__assert_fail@plt+0x8fc4>
   1a46c:	mov	r0, #0
   1a470:	bl	1a4d8 <__assert_fail@plt+0x9018>
   1a474:	cmp	r0, #0
   1a478:	ldrbeq	r0, [r4]
   1a47c:	moveq	r6, #1
   1a480:	streq	r0, [r5]
   1a484:	mov	r0, r6
   1a488:	sub	sp, fp, #16
   1a48c:	pop	{r4, r5, r6, r7, fp, pc}
   1a490:	cmp	r2, #0
   1a494:	beq	1a4c4 <__assert_fail@plt+0x9004>
   1a498:	mvn	r3, #0
   1a49c:	udiv	r3, r3, r2
   1a4a0:	cmp	r3, r1
   1a4a4:	bcs	1a4c4 <__assert_fail@plt+0x9004>
   1a4a8:	push	{fp, lr}
   1a4ac:	mov	fp, sp
   1a4b0:	bl	1137c <__errno_location@plt>
   1a4b4:	mov	r1, #12
   1a4b8:	str	r1, [r0]
   1a4bc:	mov	r0, #0
   1a4c0:	pop	{fp, pc}
   1a4c4:	mul	r1, r2, r1
   1a4c8:	b	19e68 <__assert_fail@plt+0x89a8>
   1a4cc:	mov	r1, #0
   1a4d0:	mov	r2, #3
   1a4d4:	b	1a0d0 <__assert_fail@plt+0x8c10>
   1a4d8:	push	{r4, sl, fp, lr}
   1a4dc:	add	fp, sp, #8
   1a4e0:	sub	sp, sp, #264	; 0x108
   1a4e4:	add	r1, sp, #7
   1a4e8:	movw	r2, #257	; 0x101
   1a4ec:	bl	1a53c <__assert_fail@plt+0x907c>
   1a4f0:	mov	r4, #0
   1a4f4:	cmp	r0, #0
   1a4f8:	bne	1a530 <__assert_fail@plt+0x9070>
   1a4fc:	movw	r1, #48194	; 0xbc42
   1a500:	add	r0, sp, #7
   1a504:	movt	r1, #1
   1a508:	bl	111d8 <strcmp@plt>
   1a50c:	cmp	r0, #0
   1a510:	beq	1a530 <__assert_fail@plt+0x9070>
   1a514:	movw	r1, #48196	; 0xbc44
   1a518:	add	r0, sp, #7
   1a51c:	movt	r1, #1
   1a520:	bl	111d8 <strcmp@plt>
   1a524:	mov	r4, r0
   1a528:	cmp	r0, #0
   1a52c:	movwne	r4, #1
   1a530:	mov	r0, r4
   1a534:	sub	sp, fp, #8
   1a538:	pop	{r4, sl, fp, pc}
   1a53c:	push	{r4, r5, r6, r7, fp, lr}
   1a540:	add	fp, sp, #16
   1a544:	mov	r4, r1
   1a548:	mov	r1, #0
   1a54c:	mov	r6, r2
   1a550:	bl	113e8 <setlocale@plt>
   1a554:	cmp	r0, #0
   1a558:	beq	1a588 <__assert_fail@plt+0x90c8>
   1a55c:	mov	r7, r0
   1a560:	bl	1134c <strlen@plt>
   1a564:	cmp	r0, r6
   1a568:	bcs	1a5a8 <__assert_fail@plt+0x90e8>
   1a56c:	add	r2, r0, #1
   1a570:	mov	r0, r4
   1a574:	mov	r1, r7
   1a578:	bl	11220 <memcpy@plt>
   1a57c:	mov	r5, #0
   1a580:	mov	r0, r5
   1a584:	pop	{r4, r5, r6, r7, fp, pc}
   1a588:	cmp	r6, #0
   1a58c:	mov	r5, #22
   1a590:	movne	r0, #0
   1a594:	strbne	r0, [r4]
   1a598:	movne	r0, r5
   1a59c:	popne	{r4, r5, r6, r7, fp, pc}
   1a5a0:	mov	r0, r5
   1a5a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a5a8:	mov	r5, #34	; 0x22
   1a5ac:	cmp	r6, #0
   1a5b0:	beq	1a5d0 <__assert_fail@plt+0x9110>
   1a5b4:	sub	r6, r6, #1
   1a5b8:	mov	r0, r4
   1a5bc:	mov	r1, r7
   1a5c0:	mov	r2, r6
   1a5c4:	bl	11220 <memcpy@plt>
   1a5c8:	mov	r0, #0
   1a5cc:	strb	r0, [r4, r6]
   1a5d0:	mov	r0, r5
   1a5d4:	pop	{r4, r5, r6, r7, fp, pc}
   1a5d8:	mov	r1, #0
   1a5dc:	b	113e8 <setlocale@plt>
   1a5e0:	cmp	r3, #0
   1a5e4:	cmpeq	r2, #0
   1a5e8:	bne	1a600 <__assert_fail@plt+0x9140>
   1a5ec:	cmp	r1, #0
   1a5f0:	cmpeq	r0, #0
   1a5f4:	mvnne	r1, #0
   1a5f8:	mvnne	r0, #0
   1a5fc:	b	1a61c <__assert_fail@plt+0x915c>
   1a600:	sub	sp, sp, #8
   1a604:	push	{sp, lr}
   1a608:	bl	1a62c <__assert_fail@plt+0x916c>
   1a60c:	ldr	lr, [sp, #4]
   1a610:	add	sp, sp, #8
   1a614:	pop	{r2, r3}
   1a618:	bx	lr
   1a61c:	push	{r1, lr}
   1a620:	mov	r0, #8
   1a624:	bl	111cc <raise@plt>
   1a628:	pop	{r1, pc}
   1a62c:	cmp	r1, r3
   1a630:	cmpeq	r0, r2
   1a634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a638:	mov	r4, r0
   1a63c:	movcc	r0, #0
   1a640:	mov	r5, r1
   1a644:	ldr	lr, [sp, #36]	; 0x24
   1a648:	movcc	r1, r0
   1a64c:	bcc	1a748 <__assert_fail@plt+0x9288>
   1a650:	cmp	r3, #0
   1a654:	clzeq	ip, r2
   1a658:	clzne	ip, r3
   1a65c:	addeq	ip, ip, #32
   1a660:	cmp	r5, #0
   1a664:	clzeq	r1, r4
   1a668:	addeq	r1, r1, #32
   1a66c:	clzne	r1, r5
   1a670:	sub	ip, ip, r1
   1a674:	sub	sl, ip, #32
   1a678:	lsl	r9, r3, ip
   1a67c:	rsb	fp, ip, #32
   1a680:	orr	r9, r9, r2, lsl sl
   1a684:	orr	r9, r9, r2, lsr fp
   1a688:	lsl	r8, r2, ip
   1a68c:	cmp	r5, r9
   1a690:	cmpeq	r4, r8
   1a694:	movcc	r0, #0
   1a698:	movcc	r1, r0
   1a69c:	bcc	1a6b8 <__assert_fail@plt+0x91f8>
   1a6a0:	mov	r0, #1
   1a6a4:	subs	r4, r4, r8
   1a6a8:	lsl	r1, r0, sl
   1a6ac:	orr	r1, r1, r0, lsr fp
   1a6b0:	lsl	r0, r0, ip
   1a6b4:	sbc	r5, r5, r9
   1a6b8:	cmp	ip, #0
   1a6bc:	beq	1a748 <__assert_fail@plt+0x9288>
   1a6c0:	lsr	r6, r8, #1
   1a6c4:	orr	r6, r6, r9, lsl #31
   1a6c8:	lsr	r7, r9, #1
   1a6cc:	mov	r2, ip
   1a6d0:	b	1a6f4 <__assert_fail@plt+0x9234>
   1a6d4:	subs	r3, r4, r6
   1a6d8:	sbc	r8, r5, r7
   1a6dc:	adds	r3, r3, r3
   1a6e0:	adc	r8, r8, r8
   1a6e4:	adds	r4, r3, #1
   1a6e8:	adc	r5, r8, #0
   1a6ec:	subs	r2, r2, #1
   1a6f0:	beq	1a710 <__assert_fail@plt+0x9250>
   1a6f4:	cmp	r5, r7
   1a6f8:	cmpeq	r4, r6
   1a6fc:	bcs	1a6d4 <__assert_fail@plt+0x9214>
   1a700:	adds	r4, r4, r4
   1a704:	adc	r5, r5, r5
   1a708:	subs	r2, r2, #1
   1a70c:	bne	1a6f4 <__assert_fail@plt+0x9234>
   1a710:	lsr	r3, r4, ip
   1a714:	orr	r3, r3, r5, lsl fp
   1a718:	lsr	r2, r5, ip
   1a71c:	orr	r3, r3, r5, lsr sl
   1a720:	adds	r0, r0, r4
   1a724:	mov	r4, r3
   1a728:	lsl	r3, r2, ip
   1a72c:	orr	r3, r3, r4, lsl sl
   1a730:	lsl	ip, r4, ip
   1a734:	orr	r3, r3, r4, lsr fp
   1a738:	adc	r1, r1, r5
   1a73c:	subs	r0, r0, ip
   1a740:	mov	r5, r2
   1a744:	sbc	r1, r1, r3
   1a748:	cmp	lr, #0
   1a74c:	strdne	r4, [lr]
   1a750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a754:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a758:	mov	r7, r0
   1a75c:	ldr	r6, [pc, #72]	; 1a7ac <__assert_fail@plt+0x92ec>
   1a760:	ldr	r5, [pc, #72]	; 1a7b0 <__assert_fail@plt+0x92f0>
   1a764:	add	r6, pc, r6
   1a768:	add	r5, pc, r5
   1a76c:	sub	r6, r6, r5
   1a770:	mov	r8, r1
   1a774:	mov	r9, r2
   1a778:	bl	1117c <fstatfs64@plt-0x20>
   1a77c:	asrs	r6, r6, #2
   1a780:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a784:	mov	r4, #0
   1a788:	add	r4, r4, #1
   1a78c:	ldr	r3, [r5], #4
   1a790:	mov	r2, r9
   1a794:	mov	r1, r8
   1a798:	mov	r0, r7
   1a79c:	blx	r3
   1a7a0:	cmp	r6, r4
   1a7a4:	bne	1a788 <__assert_fail@plt+0x92c8>
   1a7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7ac:	andeq	r1, r1, r0, lsr #15
   1a7b0:	muleq	r1, r8, r7
   1a7b4:	bx	lr
   1a7b8:	ldr	r3, [pc, #12]	; 1a7cc <__assert_fail@plt+0x930c>
   1a7bc:	mov	r1, #0
   1a7c0:	add	r3, pc, r3
   1a7c4:	ldr	r2, [r3]
   1a7c8:	b	11388 <__cxa_atexit@plt>
   1a7cc:	andeq	r1, r1, ip, asr r9

Disassembly of section .fini:

0001a7d0 <.fini>:
   1a7d0:	push	{r3, lr}
   1a7d4:	pop	{r3, pc}
