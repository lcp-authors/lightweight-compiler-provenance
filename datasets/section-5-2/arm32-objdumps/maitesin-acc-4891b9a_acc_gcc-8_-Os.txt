
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011928 <.init>:
   11928:	push	{r3, lr}
   1192c:	bl	11d04 <_start@@Base+0x3c>
   11930:	pop	{r3, pc}

Disassembly of section .plt:

00011934 <fdopen@plt-0x14>:
   11934:	push	{lr}		; (str lr, [sp, #-4]!)
   11938:	ldr	lr, [pc, #4]	; 11944 <fdopen@plt-0x4>
   1193c:	add	lr, pc, lr
   11940:	ldr	pc, [lr, #8]!
   11944:			; <UNDEFINED> instruction: 0x000176bc

00011948 <fdopen@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #94208	; 0x17000
   11950:	ldr	pc, [ip, #1724]!	; 0x6bc

00011954 <raise@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #94208	; 0x17000
   1195c:	ldr	pc, [ip, #1716]!	; 0x6b4

00011960 <setbuf@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #94208	; 0x17000
   11968:	ldr	pc, [ip, #1708]!	; 0x6ac

0001196c <fopen@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #94208	; 0x17000
   11974:	ldr	pc, [ip, #1700]!	; 0x6a4

00011978 <free@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #94208	; 0x17000
   11980:	ldr	pc, [ip, #1692]!	; 0x69c

00011984 <memcpy@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #94208	; 0x17000
   1198c:	ldr	pc, [ip, #1684]!	; 0x694

00011990 <ftell@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #94208	; 0x17000
   11998:	ldr	pc, [ip, #1676]!	; 0x68c

0001199c <fwrite@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #94208	; 0x17000
   119a4:	ldr	pc, [ip, #1668]!	; 0x684

000119a8 <strcpy@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #94208	; 0x17000
   119b0:	ldr	pc, [ip, #1660]!	; 0x67c

000119b4 <fread@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #94208	; 0x17000
   119bc:	ldr	pc, [ip, #1652]!	; 0x674

000119c0 <open64@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #94208	; 0x17000
   119c8:	ldr	pc, [ip, #1644]!	; 0x66c

000119cc <getenv@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #94208	; 0x17000
   119d4:	ldr	pc, [ip, #1636]!	; 0x664

000119d8 <malloc@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #94208	; 0x17000
   119e0:	ldr	pc, [ip, #1628]!	; 0x65c

000119e4 <__libc_start_main@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #94208	; 0x17000
   119ec:	ldr	pc, [ip, #1620]!	; 0x654

000119f0 <__gmon_start__@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #94208	; 0x17000
   119f8:	ldr	pc, [ip, #1612]!	; 0x64c

000119fc <getpid@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #94208	; 0x17000
   11a04:	ldr	pc, [ip, #1604]!	; 0x644

00011a08 <exit@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #94208	; 0x17000
   11a10:	ldr	pc, [ip, #1596]!	; 0x63c

00011a14 <strlen@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #94208	; 0x17000
   11a1c:	ldr	pc, [ip, #1588]!	; 0x634

00011a20 <getopt@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #94208	; 0x17000
   11a28:	ldr	pc, [ip, #1580]!	; 0x62c

00011a2c <fprintf@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #94208	; 0x17000
   11a34:	ldr	pc, [ip, #1572]!	; 0x624

00011a38 <__errno_location@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #94208	; 0x17000
   11a40:	ldr	pc, [ip, #1564]!	; 0x61c

00011a44 <mkdir@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #94208	; 0x17000
   11a4c:	ldr	pc, [ip, #1556]!	; 0x614

00011a50 <memset@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #94208	; 0x17000
   11a58:	ldr	pc, [ip, #1548]!	; 0x60c

00011a5c <strncpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #94208	; 0x17000
   11a64:	ldr	pc, [ip, #1540]!	; 0x604

00011a68 <access@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #94208	; 0x17000
   11a70:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a74 <fclose@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #94208	; 0x17000
   11a7c:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a80 <strnlen@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #94208	; 0x17000
   11a88:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a8c <fcntl64@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #94208	; 0x17000
   11a94:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a98 <vfprintf@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #94208	; 0x17000
   11aa0:	ldr	pc, [ip, #1500]!	; 0x5dc

00011aa4 <fputc@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #94208	; 0x17000
   11aac:	ldr	pc, [ip, #1492]!	; 0x5d4

00011ab0 <atoi@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #94208	; 0x17000
   11ab8:	ldr	pc, [ip, #1484]!	; 0x5cc

00011abc <fopen64@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #94208	; 0x17000
   11ac4:	ldr	pc, [ip, #1476]!	; 0x5c4

00011ac8 <fseek@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #94208	; 0x17000
   11ad0:	ldr	pc, [ip, #1468]!	; 0x5bc

00011ad4 <fputs@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #94208	; 0x17000
   11adc:	ldr	pc, [ip, #1460]!	; 0x5b4

00011ae0 <strncmp@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #94208	; 0x17000
   11ae8:	ldr	pc, [ip, #1452]!	; 0x5ac

00011aec <abort@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #94208	; 0x17000
   11af4:	ldr	pc, [ip, #1444]!	; 0x5a4

00011af8 <close@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #94208	; 0x17000
   11b00:	ldr	pc, [ip, #1436]!	; 0x59c

Disassembly of section .text:

00011b04 <main@@Base-0x18>:
   11b04:	b	17a14 <__gcov_sort_n_vals@@Base+0x430>
   11b08:	b	17a14 <__gcov_sort_n_vals@@Base+0x430>
   11b0c:	b	17a14 <__gcov_sort_n_vals@@Base+0x430>
   11b10:	b	17a14 <__gcov_sort_n_vals@@Base+0x430>
   11b14:	b	17a14 <__gcov_sort_n_vals@@Base+0x430>
   11b18:	b	17a14 <__gcov_sort_n_vals@@Base+0x430>

00011b1c <main@@Base>:
   11b1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b20:	mov	r7, r0
   11b24:	mov	r6, r1
   11b28:	mov	r5, #0
   11b2c:	ldr	r4, [pc, #304]	; 11c64 <main@@Base+0x148>
   11b30:	ldr	r8, [pc, #304]	; 11c68 <main@@Base+0x14c>
   11b34:	ldr	r9, [pc, #304]	; 11c6c <main@@Base+0x150>
   11b38:	ldr	r3, [r4, #192]	; 0xc0
   11b3c:	ldr	r2, [r4, #196]	; 0xc4
   11b40:	adds	r3, r3, #1
   11b44:	adc	r2, r2, #0
   11b48:	str	r3, [r4, #192]	; 0xc0
   11b4c:	str	r2, [r4, #196]	; 0xc4
   11b50:	mov	r2, r8
   11b54:	mov	r1, r6
   11b58:	mov	r0, r7
   11b5c:	bl	11a20 <getopt@plt>
   11b60:	cmn	r0, #1
   11b64:	bne	11bdc <main@@Base+0xc0>
   11b68:	ldr	r3, [pc, #256]	; 11c70 <main@@Base+0x154>
   11b6c:	ldr	r1, [r3]
   11b70:	cmp	r1, r7
   11b74:	bge	11c1c <main@@Base+0x100>
   11b78:	ldr	r3, [r4, #216]	; 0xd8
   11b7c:	ldr	r2, [r4, #220]	; 0xdc
   11b80:	ldr	r0, [r6, r1, lsl #2]
   11b84:	adds	r3, r3, #1
   11b88:	adc	r2, r2, #0
   11b8c:	cmp	r5, #0
   11b90:	str	r3, [r4, #216]	; 0xd8
   11b94:	str	r2, [r4, #220]	; 0xdc
   11b98:	bne	11bb8 <main@@Base+0x9c>
   11b9c:	ldr	r3, [r4, #232]	; 0xe8
   11ba0:	ldr	r2, [r4, #236]	; 0xec
   11ba4:	ldr	r5, [pc, #200]	; 11c74 <main@@Base+0x158>
   11ba8:	adds	r3, r3, #1
   11bac:	adc	r2, r2, #0
   11bb0:	str	r3, [r4, #232]	; 0xe8
   11bb4:	str	r2, [r4, #236]	; 0xec
   11bb8:	mov	r1, r5
   11bbc:	bl	12028 <my_main@@Base>
   11bc0:	ldr	r3, [r4, #240]	; 0xf0
   11bc4:	ldr	r2, [r4, #244]	; 0xf4
   11bc8:	adds	r3, r3, #1
   11bcc:	adc	r2, r2, #0
   11bd0:	str	r3, [r4, #240]	; 0xf0
   11bd4:	str	r2, [r4, #244]	; 0xf4
   11bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bdc:	cmp	r0, #111	; 0x6f
   11be0:	bne	11c00 <main@@Base+0xe4>
   11be4:	ldr	r3, [r4, #200]	; 0xc8
   11be8:	ldr	r2, [r4, #204]	; 0xcc
   11bec:	ldr	r5, [r9]
   11bf0:	adds	r3, r3, #1
   11bf4:	adc	r2, r2, #0
   11bf8:	str	r3, [r4, #200]	; 0xc8
   11bfc:	str	r2, [r4, #204]	; 0xcc
   11c00:	ldr	r3, [r4, #208]	; 0xd0
   11c04:	ldr	r2, [r4, #212]	; 0xd4
   11c08:	adds	r3, r3, #1
   11c0c:	adc	r2, r2, #0
   11c10:	str	r3, [r4, #208]	; 0xd0
   11c14:	str	r2, [r4, #212]	; 0xd4
   11c18:	b	11b50 <main@@Base+0x34>
   11c1c:	ldr	r3, [r4, #224]	; 0xe0
   11c20:	ldr	r2, [r4, #228]	; 0xe4
   11c24:	ldr	r0, [pc, #76]	; 11c78 <main@@Base+0x15c>
   11c28:	adds	r3, r3, #1
   11c2c:	str	r3, [r4, #224]	; 0xe0
   11c30:	adc	r2, r2, #0
   11c34:	ldr	r3, [pc, #64]	; 11c7c <main@@Base+0x160>
   11c38:	str	r2, [r4, #228]	; 0xe4
   11c3c:	ldr	r1, [r3]
   11c40:	bl	11ad4 <fputs@plt>
   11c44:	ldr	r3, [r4, #248]	; 0xf8
   11c48:	mov	r0, #1
   11c4c:	ldr	r2, [r4, #252]	; 0xfc
   11c50:	adds	r3, r3, #1
   11c54:	adc	r2, r2, #0
   11c58:	str	r3, [r4, #248]	; 0xf8
   11c5c:	str	r2, [r4, #252]	; 0xfc
   11c60:	bl	11a08 <exit@plt>
   11c64:			; <UNDEFINED> instruction: 0x00029ab0
   11c68:	muleq	r1, r0, lr
   11c6c:	andeq	r9, r2, r8, lsr #21
   11c70:	muleq	r2, r8, sl
   11c74:	andeq	r7, r1, ip, lsl #29
   11c78:	muleq	r1, r3, lr
   11c7c:	andeq	r9, r2, r0, lsr #21
   11c80:	ldr	r0, [pc]	; 11c88 <main@@Base+0x16c>
   11c84:	b	17a84 <__gcov_sort_n_vals@@Base+0x4a0>
   11c88:	strheq	r9, [r2], -ip
   11c8c:	ldr	r0, [pc]	; 11c94 <main@@Base+0x178>
   11c90:	b	17a84 <__gcov_sort_n_vals@@Base+0x4a0>
   11c94:	andeq	r9, r2, ip, asr #2
   11c98:	ldr	r0, [pc]	; 11ca0 <main@@Base+0x184>
   11c9c:	b	17a84 <__gcov_sort_n_vals@@Base+0x4a0>
   11ca0:	andeq	r9, r2, r0, ror #8
   11ca4:	ldr	r0, [pc]	; 11cac <main@@Base+0x190>
   11ca8:	b	17a84 <__gcov_sort_n_vals@@Base+0x4a0>
   11cac:	andeq	r9, r2, ip, ror r5
   11cb0:	ldr	r0, [pc]	; 11cb8 <main@@Base+0x19c>
   11cb4:	b	17a84 <__gcov_sort_n_vals@@Base+0x4a0>
   11cb8:	andeq	r9, r2, r8, ror r7
   11cbc:	ldr	r0, [pc]	; 11cc4 <main@@Base+0x1a8>
   11cc0:	b	17a84 <__gcov_sort_n_vals@@Base+0x4a0>
   11cc4:	andeq	r9, r2, r8, ror #17

00011cc8 <_start@@Base>:
   11cc8:	mov	fp, #0
   11ccc:	mov	lr, #0
   11cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cd4:	mov	r2, sp
   11cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ce0:	ldr	ip, [pc, #16]	; 11cf8 <_start@@Base+0x30>
   11ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce8:	ldr	r0, [pc, #12]	; 11cfc <_start@@Base+0x34>
   11cec:	ldr	r3, [pc, #12]	; 11d00 <_start@@Base+0x38>
   11cf0:	bl	119e4 <__libc_start_main@plt>
   11cf4:	bl	11aec <abort@plt>
   11cf8:	strdeq	r7, [r1], -ip
   11cfc:	andeq	r1, r1, ip, lsl fp
   11d00:	muleq	r1, ip, sp
   11d04:	ldr	r3, [pc, #20]	; 11d20 <_start@@Base+0x58>
   11d08:	ldr	r2, [pc, #20]	; 11d24 <_start@@Base+0x5c>
   11d0c:	add	r3, pc, r3
   11d10:	ldr	r2, [r3, r2]
   11d14:	cmp	r2, #0
   11d18:	bxeq	lr
   11d1c:	b	119f0 <__gmon_start__@plt>
   11d20:	andeq	r7, r1, ip, ror #5
   11d24:	andeq	r0, r0, r4, lsr #1
   11d28:	ldr	r0, [pc, #24]	; 11d48 <_start@@Base+0x80>
   11d2c:	ldr	r3, [pc, #24]	; 11d4c <_start@@Base+0x84>
   11d30:	cmp	r3, r0
   11d34:	bxeq	lr
   11d38:	ldr	r3, [pc, #16]	; 11d50 <_start@@Base+0x88>
   11d3c:	cmp	r3, #0
   11d40:	bxeq	lr
   11d44:	bx	r3
   11d48:	muleq	r2, r8, sl
   11d4c:	muleq	r2, r8, sl
   11d50:	andeq	r0, r0, r0
   11d54:	ldr	r0, [pc, #36]	; 11d80 <_start@@Base+0xb8>
   11d58:	ldr	r1, [pc, #36]	; 11d84 <_start@@Base+0xbc>
   11d5c:	sub	r1, r1, r0
   11d60:	asr	r1, r1, #2
   11d64:	add	r1, r1, r1, lsr #31
   11d68:	asrs	r1, r1, #1
   11d6c:	bxeq	lr
   11d70:	ldr	r3, [pc, #16]	; 11d88 <_start@@Base+0xc0>
   11d74:	cmp	r3, #0
   11d78:	bxeq	lr
   11d7c:	bx	r3
   11d80:	muleq	r2, r8, sl
   11d84:	muleq	r2, r8, sl
   11d88:	andeq	r0, r0, r0
   11d8c:	push	{r4, lr}
   11d90:	ldr	r4, [pc, #24]	; 11db0 <_start@@Base+0xe8>
   11d94:	ldrb	r3, [r4]
   11d98:	cmp	r3, #0
   11d9c:	popne	{r4, pc}
   11da0:	bl	11d28 <_start@@Base+0x60>
   11da4:	mov	r3, #1
   11da8:	strb	r3, [r4]
   11dac:	pop	{r4, pc}
   11db0:	andeq	r9, r2, ip, lsr #21
   11db4:	b	11d54 <_start@@Base+0x8c>

00011db8 <load_file@@Base>:
   11db8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11dbc:	mov	r8, r0
   11dc0:	ldr	r4, [pc, #584]	; 12010 <load_file@@Base+0x258>
   11dc4:	ldr	r1, [pc, #584]	; 12014 <load_file@@Base+0x25c>
   11dc8:	ldr	r3, [r4]
   11dcc:	ldr	r2, [r4, #4]
   11dd0:	adds	r3, r3, #1
   11dd4:	adc	r2, r2, #0
   11dd8:	str	r3, [r4]
   11ddc:	str	r2, [r4, #4]
   11de0:	bl	1196c <fopen@plt>
   11de4:	subs	r6, r0, #0
   11de8:	bne	11e0c <load_file@@Base+0x54>
   11dec:	ldr	r3, [r4, #16]
   11df0:	ldr	r2, [r4, #20]
   11df4:	adds	r3, r3, #1
   11df8:	adc	r2, r2, #0
   11dfc:	str	r3, [r4, #16]
   11e00:	str	r2, [r4, #20]
   11e04:	mov	r0, r6
   11e08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e0c:	ldr	r3, [r4, #8]
   11e10:	mov	r1, #0
   11e14:	mov	r5, r4
   11e18:	ldr	r2, [r4, #12]
   11e1c:	adds	r3, r3, #1
   11e20:	adc	r2, r2, #0
   11e24:	str	r3, [r4, #8]
   11e28:	str	r2, [r4, #12]
   11e2c:	mov	r2, #2
   11e30:	bl	11ac8 <fseek@plt>
   11e34:	ldr	r3, [r4, #24]
   11e38:	ldr	r2, [r4, #28]
   11e3c:	adds	r3, r3, #1
   11e40:	adc	r2, r2, #0
   11e44:	subs	sl, r0, #0
   11e48:	str	r3, [r4, #24]
   11e4c:	str	r2, [r4, #28]
   11e50:	bne	12008 <load_file@@Base+0x250>
   11e54:	ldr	r3, [r4, #32]
   11e58:	mov	r0, r6
   11e5c:	ldr	r2, [r4, #36]	; 0x24
   11e60:	adds	r3, r3, #1
   11e64:	adc	r2, r2, #0
   11e68:	str	r3, [r4, #32]
   11e6c:	str	r2, [r4, #36]	; 0x24
   11e70:	bl	11990 <ftell@plt>
   11e74:	cmn	r0, #1
   11e78:	mov	r9, r0
   11e7c:	bne	11ec8 <load_file@@Base+0x110>
   11e80:	ldr	r3, [r4, #40]	; 0x28
   11e84:	ldr	r2, [r4, #44]	; 0x2c
   11e88:	ldr	r0, [pc, #392]	; 12018 <load_file@@Base+0x260>
   11e8c:	adds	r3, r3, #1
   11e90:	str	r3, [r4, #40]	; 0x28
   11e94:	adc	r2, r2, #0
   11e98:	ldr	r3, [pc, #380]	; 1201c <load_file@@Base+0x264>
   11e9c:	str	r2, [r4, #44]	; 0x2c
   11ea0:	ldr	r1, [r3]
   11ea4:	bl	11ad4 <fputs@plt>
   11ea8:	ldr	r3, [r4, #56]	; 0x38
   11eac:	ldr	r2, [r4, #60]	; 0x3c
   11eb0:	adds	r3, r3, #1
   11eb4:	adc	r2, r2, #0
   11eb8:	str	r3, [r4, #56]	; 0x38
   11ebc:	str	r2, [r4, #60]	; 0x3c
   11ec0:	mov	r0, #1
   11ec4:	bl	11a08 <exit@plt>
   11ec8:	ldr	r3, [r4, #48]	; 0x30
   11ecc:	add	r0, r0, #1
   11ed0:	ldr	r2, [r4, #52]	; 0x34
   11ed4:	adds	r3, r3, #1
   11ed8:	adc	r2, r2, #0
   11edc:	str	r3, [r4, #48]	; 0x30
   11ee0:	str	r2, [r4, #52]	; 0x34
   11ee4:	bl	119d8 <malloc@plt>
   11ee8:	mov	r7, r0
   11eec:	mov	r2, sl
   11ef0:	mov	r1, sl
   11ef4:	mov	r0, r6
   11ef8:	bl	11ac8 <fseek@plt>
   11efc:	subs	sl, r0, #0
   11f00:	beq	11f48 <load_file@@Base+0x190>
   11f04:	ldr	r3, [r4, #64]	; 0x40
   11f08:	ldr	r2, [r4, #68]	; 0x44
   11f0c:	ldr	r0, [pc, #268]	; 12020 <load_file@@Base+0x268>
   11f10:	adds	r3, r3, #1
   11f14:	str	r3, [r4, #64]	; 0x40
   11f18:	adc	r2, r2, #0
   11f1c:	ldr	r3, [pc, #248]	; 1201c <load_file@@Base+0x264>
   11f20:	str	r2, [r4, #68]	; 0x44
   11f24:	ldr	r1, [r3]
   11f28:	bl	11ad4 <fputs@plt>
   11f2c:	ldr	r3, [r4, #80]	; 0x50
   11f30:	ldr	r2, [r4, #84]	; 0x54
   11f34:	adds	r3, r3, #1
   11f38:	adc	r2, r2, #0
   11f3c:	str	r3, [r4, #80]	; 0x50
   11f40:	str	r2, [r4, #84]	; 0x54
   11f44:	b	11ec0 <load_file@@Base+0x108>
   11f48:	ldr	r3, [r4, #72]	; 0x48
   11f4c:	mov	r1, #1
   11f50:	mov	r0, r7
   11f54:	ldr	r2, [r4, #76]	; 0x4c
   11f58:	adds	r3, r3, #1
   11f5c:	adc	r2, r2, #0
   11f60:	str	r3, [r4, #72]	; 0x48
   11f64:	mov	r3, r6
   11f68:	str	r2, [r4, #76]	; 0x4c
   11f6c:	mov	r2, r9
   11f70:	bl	119b4 <fread@plt>
   11f74:	cmp	r0, #0
   11f78:	bne	11fc4 <load_file@@Base+0x20c>
   11f7c:	ldr	r3, [r4, #88]	; 0x58
   11f80:	ldr	r2, [r4, #92]	; 0x5c
   11f84:	ldr	r1, [pc, #152]	; 12024 <load_file@@Base+0x26c>
   11f88:	adds	r3, r3, #1
   11f8c:	str	r3, [r4, #88]	; 0x58
   11f90:	adc	r2, r2, #0
   11f94:	ldr	r3, [pc, #128]	; 1201c <load_file@@Base+0x264>
   11f98:	str	r2, [r4, #92]	; 0x5c
   11f9c:	mov	r2, r8
   11fa0:	ldr	r0, [r3]
   11fa4:	bl	11a2c <fprintf@plt>
   11fa8:	ldr	r3, [r4, #96]	; 0x60
   11fac:	ldr	r2, [r4, #100]	; 0x64
   11fb0:	adds	r3, r3, #1
   11fb4:	adc	r2, r2, #0
   11fb8:	str	r3, [r4, #96]	; 0x60
   11fbc:	str	r2, [r4, #100]	; 0x64
   11fc0:	b	11ec0 <load_file@@Base+0x108>
   11fc4:	ldr	r3, [r4, #104]	; 0x68
   11fc8:	strb	sl, [r7, r0]
   11fcc:	ldr	r2, [r4, #108]	; 0x6c
   11fd0:	adds	r3, r3, #1
   11fd4:	adc	r2, r2, #0
   11fd8:	str	r3, [r4, #104]	; 0x68
   11fdc:	str	r2, [r4, #108]	; 0x6c
   11fe0:	mov	r0, r6
   11fe4:	mov	r6, r7
   11fe8:	bl	11a74 <fclose@plt>
   11fec:	ldr	r3, [r5, #112]	; 0x70
   11ff0:	ldr	r2, [r5, #116]	; 0x74
   11ff4:	adds	r3, r3, #1
   11ff8:	adc	r2, r2, #0
   11ffc:	str	r3, [r5, #112]	; 0x70
   12000:	str	r2, [r5, #116]	; 0x74
   12004:	b	11e04 <load_file@@Base+0x4c>
   12008:	mov	r7, #0
   1200c:	b	11fe0 <load_file@@Base+0x228>
   12010:			; <UNDEFINED> instruction: 0x00029ab0
   12014:	andeq	r7, r1, ip, lsl #28
   12018:	andeq	r7, r1, lr, lsl #28
   1201c:	andeq	r9, r2, r0, lsr #21
   12020:	andeq	r7, r1, r2, asr #28
   12024:	andeq	r7, r1, r4, ror lr

00012028 <my_main@@Base>:
   12028:	push	{r4, r5, r6, lr}
   1202c:	sub	sp, sp, #32
   12030:	mov	r6, r1
   12034:	ldr	r4, [pc, #312]	; 12174 <my_main@@Base+0x14c>
   12038:	ldr	r3, [r4, #120]	; 0x78
   1203c:	ldr	r2, [r4, #124]	; 0x7c
   12040:	adds	r3, r3, #1
   12044:	adc	r2, r2, #0
   12048:	str	r3, [r4, #120]	; 0x78
   1204c:	str	r2, [r4, #124]	; 0x7c
   12050:	bl	11db8 <load_file@@Base>
   12054:	ldr	r3, [r4, #128]	; 0x80
   12058:	mov	r5, r0
   1205c:	mov	r1, r0
   12060:	add	r0, sp, #4
   12064:	ldr	r2, [r4, #132]	; 0x84
   12068:	adds	r3, r3, #1
   1206c:	adc	r2, r2, #0
   12070:	str	r3, [r4, #128]	; 0x80
   12074:	str	r2, [r4, #132]	; 0x84
   12078:	bl	125d0 <init_lexer@@Base>
   1207c:	ldr	r3, [r4, #136]	; 0x88
   12080:	add	r1, sp, #4
   12084:	mov	r0, sp
   12088:	ldr	r2, [r4, #140]	; 0x8c
   1208c:	adds	r3, r3, #1
   12090:	adc	r2, r2, #0
   12094:	str	r3, [r4, #136]	; 0x88
   12098:	str	r2, [r4, #140]	; 0x8c
   1209c:	bl	13f28 <init_grammar@@Base>
   120a0:	ldr	r3, [r4, #144]	; 0x90
   120a4:	mov	r1, sp
   120a8:	add	r0, sp, #16
   120ac:	ldr	r2, [r4, #148]	; 0x94
   120b0:	adds	r3, r3, #1
   120b4:	adc	r2, r2, #0
   120b8:	str	r3, [r4, #144]	; 0x90
   120bc:	str	r2, [r4, #148]	; 0x94
   120c0:	mov	r2, r6
   120c4:	bl	14eec <init_generator@@Base>
   120c8:	ldr	r3, [r4, #152]	; 0x98
   120cc:	add	r0, sp, #16
   120d0:	ldr	r2, [r4, #156]	; 0x9c
   120d4:	adds	r3, r3, #1
   120d8:	adc	r2, r2, #0
   120dc:	str	r3, [r4, #152]	; 0x98
   120e0:	str	r2, [r4, #156]	; 0x9c
   120e4:	bl	159d0 <generate_code@@Base>
   120e8:	ldr	r3, [r4, #160]	; 0xa0
   120ec:	add	r0, sp, #16
   120f0:	ldr	r2, [r4, #164]	; 0xa4
   120f4:	adds	r3, r3, #1
   120f8:	adc	r2, r2, #0
   120fc:	str	r3, [r4, #160]	; 0xa0
   12100:	str	r2, [r4, #164]	; 0xa4
   12104:	bl	14f54 <destroy_generator@@Base>
   12108:	ldr	r3, [r4, #168]	; 0xa8
   1210c:	mov	r0, sp
   12110:	ldr	r2, [r4, #172]	; 0xac
   12114:	adds	r3, r3, #1
   12118:	adc	r2, r2, #0
   1211c:	str	r3, [r4, #168]	; 0xa8
   12120:	str	r2, [r4, #172]	; 0xac
   12124:	bl	13f48 <destroy_grammar@@Base>
   12128:	ldr	r3, [r4, #176]	; 0xb0
   1212c:	add	r0, sp, #4
   12130:	ldr	r2, [r4, #180]	; 0xb4
   12134:	adds	r3, r3, #1
   12138:	adc	r2, r2, #0
   1213c:	str	r3, [r4, #176]	; 0xb0
   12140:	str	r2, [r4, #180]	; 0xb4
   12144:	bl	125fc <destroy_lexer@@Base>
   12148:	ldr	r3, [r4, #184]	; 0xb8
   1214c:	mov	r0, r5
   12150:	ldr	r2, [r4, #188]	; 0xbc
   12154:	adds	r3, r3, #1
   12158:	adc	r2, r2, #0
   1215c:	str	r3, [r4, #184]	; 0xb8
   12160:	str	r2, [r4, #188]	; 0xbc
   12164:	bl	11978 <free@plt>
   12168:	mov	r0, #0
   1216c:	add	sp, sp, #32
   12170:	pop	{r4, r5, r6, pc}
   12174:			; <UNDEFINED> instruction: 0x00029ab0

00012178 <init_token_int_type@@Base>:
   12178:	ldr	r2, [pc, #32]	; 121a0 <init_token_int_type@@Base+0x28>
   1217c:	ldr	r3, [r2]
   12180:	ldr	r1, [r2, #4]
   12184:	adds	r3, r3, #1
   12188:	adc	r1, r1, #0
   1218c:	str	r3, [r2]
   12190:	mov	r3, #0
   12194:	str	r3, [r0]
   12198:	str	r1, [r2, #4]
   1219c:	bx	lr
   121a0:			; <UNDEFINED> instruction: 0x00029bb0

000121a4 <init_token_int_value@@Base>:
   121a4:	ldr	r2, [pc, #36]	; 121d0 <init_token_int_value@@Base+0x2c>
   121a8:	str	r1, [r0, #4]
   121ac:	ldr	r3, [r2, #8]
   121b0:	ldr	ip, [r2, #12]
   121b4:	adds	r3, r3, #1
   121b8:	adc	ip, ip, #0
   121bc:	str	r3, [r2, #8]
   121c0:	mov	r3, #1
   121c4:	str	r3, [r0]
   121c8:	str	ip, [r2, #12]
   121cc:	bx	lr
   121d0:			; <UNDEFINED> instruction: 0x00029bb0

000121d4 <init_token_function@@Base>:
   121d4:	ldr	r2, [pc, #36]	; 12200 <init_token_function@@Base+0x2c>
   121d8:	str	r1, [r0, #4]
   121dc:	ldr	r3, [r2, #16]
   121e0:	ldr	ip, [r2, #20]
   121e4:	adds	r3, r3, #1
   121e8:	adc	ip, ip, #0
   121ec:	str	r3, [r2, #16]
   121f0:	mov	r3, #2
   121f4:	str	r3, [r0]
   121f8:	str	ip, [r2, #20]
   121fc:	bx	lr
   12200:			; <UNDEFINED> instruction: 0x00029bb0

00012204 <init_token_opar@@Base>:
   12204:	ldr	r2, [pc, #32]	; 1222c <init_token_opar@@Base+0x28>
   12208:	ldr	r3, [r2, #24]
   1220c:	ldr	r1, [r2, #28]
   12210:	adds	r3, r3, #1
   12214:	adc	r1, r1, #0
   12218:	str	r3, [r2, #24]
   1221c:	mov	r3, #3
   12220:	str	r3, [r0]
   12224:	str	r1, [r2, #28]
   12228:	bx	lr
   1222c:			; <UNDEFINED> instruction: 0x00029bb0

00012230 <init_token_cpar@@Base>:
   12230:	ldr	r2, [pc, #32]	; 12258 <init_token_cpar@@Base+0x28>
   12234:	ldr	r3, [r2, #32]
   12238:	ldr	r1, [r2, #36]	; 0x24
   1223c:	adds	r3, r3, #1
   12240:	adc	r1, r1, #0
   12244:	str	r3, [r2, #32]
   12248:	mov	r3, #4
   1224c:	str	r3, [r0]
   12250:	str	r1, [r2, #36]	; 0x24
   12254:	bx	lr
   12258:			; <UNDEFINED> instruction: 0x00029bb0

0001225c <init_token_obra@@Base>:
   1225c:	ldr	r2, [pc, #32]	; 12284 <init_token_obra@@Base+0x28>
   12260:	ldr	r3, [r2, #40]	; 0x28
   12264:	ldr	r1, [r2, #44]	; 0x2c
   12268:	adds	r3, r3, #1
   1226c:	adc	r1, r1, #0
   12270:	str	r3, [r2, #40]	; 0x28
   12274:	mov	r3, #5
   12278:	str	r3, [r0]
   1227c:	str	r1, [r2, #44]	; 0x2c
   12280:	bx	lr
   12284:			; <UNDEFINED> instruction: 0x00029bb0

00012288 <init_token_cbra@@Base>:
   12288:	ldr	r2, [pc, #32]	; 122b0 <init_token_cbra@@Base+0x28>
   1228c:	ldr	r3, [r2, #48]	; 0x30
   12290:	ldr	r1, [r2, #52]	; 0x34
   12294:	adds	r3, r3, #1
   12298:	adc	r1, r1, #0
   1229c:	str	r3, [r2, #48]	; 0x30
   122a0:	mov	r3, #6
   122a4:	str	r3, [r0]
   122a8:	str	r1, [r2, #52]	; 0x34
   122ac:	bx	lr
   122b0:			; <UNDEFINED> instruction: 0x00029bb0

000122b4 <init_token_return@@Base>:
   122b4:	ldr	r2, [pc, #32]	; 122dc <init_token_return@@Base+0x28>
   122b8:	ldr	r3, [r2, #56]	; 0x38
   122bc:	ldr	r1, [r2, #60]	; 0x3c
   122c0:	adds	r3, r3, #1
   122c4:	adc	r1, r1, #0
   122c8:	str	r3, [r2, #56]	; 0x38
   122cc:	mov	r3, #7
   122d0:	str	r3, [r0]
   122d4:	str	r1, [r2, #60]	; 0x3c
   122d8:	bx	lr
   122dc:			; <UNDEFINED> instruction: 0x00029bb0

000122e0 <init_token_semicolon@@Base>:
   122e0:	ldr	r2, [pc, #32]	; 12308 <init_token_semicolon@@Base+0x28>
   122e4:	ldr	r3, [r2, #64]	; 0x40
   122e8:	ldr	r1, [r2, #68]	; 0x44
   122ec:	adds	r3, r3, #1
   122f0:	adc	r1, r1, #0
   122f4:	str	r3, [r2, #64]	; 0x40
   122f8:	mov	r3, #8
   122fc:	str	r3, [r0]
   12300:	str	r1, [r2, #68]	; 0x44
   12304:	bx	lr
   12308:			; <UNDEFINED> instruction: 0x00029bb0

0001230c <init_token_eof@@Base>:
   1230c:	ldr	r2, [pc, #32]	; 12334 <init_token_eof@@Base+0x28>
   12310:	ldr	r3, [r2, #72]	; 0x48
   12314:	ldr	r1, [r2, #76]	; 0x4c
   12318:	adds	r3, r3, #1
   1231c:	adc	r1, r1, #0
   12320:	str	r3, [r2, #72]	; 0x48
   12324:	mov	r3, #9
   12328:	str	r3, [r0]
   1232c:	str	r1, [r2, #76]	; 0x4c
   12330:	bx	lr
   12334:			; <UNDEFINED> instruction: 0x00029bb0

00012338 <init_token_if@@Base>:
   12338:	ldr	r2, [pc, #32]	; 12360 <init_token_if@@Base+0x28>
   1233c:	ldr	r3, [r2, #80]	; 0x50
   12340:	ldr	r1, [r2, #84]	; 0x54
   12344:	adds	r3, r3, #1
   12348:	adc	r1, r1, #0
   1234c:	str	r3, [r2, #80]	; 0x50
   12350:	mov	r3, #10
   12354:	str	r3, [r0]
   12358:	str	r1, [r2, #84]	; 0x54
   1235c:	bx	lr
   12360:			; <UNDEFINED> instruction: 0x00029bb0

00012364 <init_token_else@@Base>:
   12364:	ldr	r2, [pc, #32]	; 1238c <init_token_else@@Base+0x28>
   12368:	ldr	r3, [r2, #88]	; 0x58
   1236c:	ldr	r1, [r2, #92]	; 0x5c
   12370:	adds	r3, r3, #1
   12374:	adc	r1, r1, #0
   12378:	str	r3, [r2, #88]	; 0x58
   1237c:	mov	r3, #11
   12380:	str	r3, [r0]
   12384:	str	r1, [r2, #92]	; 0x5c
   12388:	bx	lr
   1238c:			; <UNDEFINED> instruction: 0x00029bb0

00012390 <init_token_boolean_op@@Base>:
   12390:	ldr	r2, [pc, #36]	; 123bc <init_token_boolean_op@@Base+0x2c>
   12394:	str	r1, [r0, #4]
   12398:	ldr	r3, [r2, #96]	; 0x60
   1239c:	ldr	ip, [r2, #100]	; 0x64
   123a0:	adds	r3, r3, #1
   123a4:	adc	ip, ip, #0
   123a8:	str	r3, [r2, #96]	; 0x60
   123ac:	mov	r3, #12
   123b0:	str	r3, [r0]
   123b4:	str	ip, [r2, #100]	; 0x64
   123b8:	bx	lr
   123bc:			; <UNDEFINED> instruction: 0x00029bb0

000123c0 <free_token_int_type@@Base>:
   123c0:	ldr	r2, [pc, #24]	; 123e0 <free_token_int_type@@Base+0x20>
   123c4:	ldr	r3, [r2, #104]	; 0x68
   123c8:	ldr	r1, [r2, #108]	; 0x6c
   123cc:	adds	r3, r3, #1
   123d0:	adc	r1, r1, #0
   123d4:	str	r3, [r2, #104]	; 0x68
   123d8:	str	r1, [r2, #108]	; 0x6c
   123dc:	b	11978 <free@plt>
   123e0:			; <UNDEFINED> instruction: 0x00029bb0

000123e4 <free_token_int_value@@Base>:
   123e4:	ldr	r2, [pc, #24]	; 12404 <free_token_int_value@@Base+0x20>
   123e8:	ldr	r3, [r2, #112]	; 0x70
   123ec:	ldr	r1, [r2, #116]	; 0x74
   123f0:	adds	r3, r3, #1
   123f4:	adc	r1, r1, #0
   123f8:	str	r3, [r2, #112]	; 0x70
   123fc:	str	r1, [r2, #116]	; 0x74
   12400:	b	11978 <free@plt>
   12404:			; <UNDEFINED> instruction: 0x00029bb0

00012408 <free_token_function@@Base>:
   12408:	ldr	r2, [pc, #24]	; 12428 <free_token_function@@Base+0x20>
   1240c:	ldr	r3, [r2, #120]	; 0x78
   12410:	ldr	r1, [r2, #124]	; 0x7c
   12414:	adds	r3, r3, #1
   12418:	adc	r1, r1, #0
   1241c:	str	r3, [r2, #120]	; 0x78
   12420:	str	r1, [r2, #124]	; 0x7c
   12424:	b	11978 <free@plt>
   12428:			; <UNDEFINED> instruction: 0x00029bb0

0001242c <free_token_opar@@Base>:
   1242c:	ldr	r2, [pc, #24]	; 1244c <free_token_opar@@Base+0x20>
   12430:	ldr	r3, [r2, #128]	; 0x80
   12434:	ldr	r1, [r2, #132]	; 0x84
   12438:	adds	r3, r3, #1
   1243c:	adc	r1, r1, #0
   12440:	str	r3, [r2, #128]	; 0x80
   12444:	str	r1, [r2, #132]	; 0x84
   12448:	b	11978 <free@plt>
   1244c:			; <UNDEFINED> instruction: 0x00029bb0

00012450 <free_token_cpar@@Base>:
   12450:	ldr	r2, [pc, #24]	; 12470 <free_token_cpar@@Base+0x20>
   12454:	ldr	r3, [r2, #136]	; 0x88
   12458:	ldr	r1, [r2, #140]	; 0x8c
   1245c:	adds	r3, r3, #1
   12460:	adc	r1, r1, #0
   12464:	str	r3, [r2, #136]	; 0x88
   12468:	str	r1, [r2, #140]	; 0x8c
   1246c:	b	11978 <free@plt>
   12470:			; <UNDEFINED> instruction: 0x00029bb0

00012474 <free_token_obra@@Base>:
   12474:	ldr	r2, [pc, #24]	; 12494 <free_token_obra@@Base+0x20>
   12478:	ldr	r3, [r2, #144]	; 0x90
   1247c:	ldr	r1, [r2, #148]	; 0x94
   12480:	adds	r3, r3, #1
   12484:	adc	r1, r1, #0
   12488:	str	r3, [r2, #144]	; 0x90
   1248c:	str	r1, [r2, #148]	; 0x94
   12490:	b	11978 <free@plt>
   12494:			; <UNDEFINED> instruction: 0x00029bb0

00012498 <free_token_cbra@@Base>:
   12498:	ldr	r2, [pc, #24]	; 124b8 <free_token_cbra@@Base+0x20>
   1249c:	ldr	r3, [r2, #152]	; 0x98
   124a0:	ldr	r1, [r2, #156]	; 0x9c
   124a4:	adds	r3, r3, #1
   124a8:	adc	r1, r1, #0
   124ac:	str	r3, [r2, #152]	; 0x98
   124b0:	str	r1, [r2, #156]	; 0x9c
   124b4:	b	11978 <free@plt>
   124b8:			; <UNDEFINED> instruction: 0x00029bb0

000124bc <free_token_return@@Base>:
   124bc:	ldr	r2, [pc, #24]	; 124dc <free_token_return@@Base+0x20>
   124c0:	ldr	r3, [r2, #160]	; 0xa0
   124c4:	ldr	r1, [r2, #164]	; 0xa4
   124c8:	adds	r3, r3, #1
   124cc:	adc	r1, r1, #0
   124d0:	str	r3, [r2, #160]	; 0xa0
   124d4:	str	r1, [r2, #164]	; 0xa4
   124d8:	b	11978 <free@plt>
   124dc:			; <UNDEFINED> instruction: 0x00029bb0

000124e0 <free_token_semicolon@@Base>:
   124e0:	ldr	r2, [pc, #24]	; 12500 <free_token_semicolon@@Base+0x20>
   124e4:	ldr	r3, [r2, #168]	; 0xa8
   124e8:	ldr	r1, [r2, #172]	; 0xac
   124ec:	adds	r3, r3, #1
   124f0:	adc	r1, r1, #0
   124f4:	str	r3, [r2, #168]	; 0xa8
   124f8:	str	r1, [r2, #172]	; 0xac
   124fc:	b	11978 <free@plt>
   12500:			; <UNDEFINED> instruction: 0x00029bb0

00012504 <free_token_eof@@Base>:
   12504:	ldr	r2, [pc, #24]	; 12524 <free_token_eof@@Base+0x20>
   12508:	ldr	r3, [r2, #176]	; 0xb0
   1250c:	ldr	r1, [r2, #180]	; 0xb4
   12510:	adds	r3, r3, #1
   12514:	adc	r1, r1, #0
   12518:	str	r3, [r2, #176]	; 0xb0
   1251c:	str	r1, [r2, #180]	; 0xb4
   12520:	b	11978 <free@plt>
   12524:			; <UNDEFINED> instruction: 0x00029bb0

00012528 <free_token_if@@Base>:
   12528:	ldr	r2, [pc, #24]	; 12548 <free_token_if@@Base+0x20>
   1252c:	ldr	r3, [r2, #184]	; 0xb8
   12530:	ldr	r1, [r2, #188]	; 0xbc
   12534:	adds	r3, r3, #1
   12538:	adc	r1, r1, #0
   1253c:	str	r3, [r2, #184]	; 0xb8
   12540:	str	r1, [r2, #188]	; 0xbc
   12544:	b	11978 <free@plt>
   12548:			; <UNDEFINED> instruction: 0x00029bb0

0001254c <free_token_else@@Base>:
   1254c:	ldr	r2, [pc, #24]	; 1256c <free_token_else@@Base+0x20>
   12550:	ldr	r3, [r2, #192]	; 0xc0
   12554:	ldr	r1, [r2, #196]	; 0xc4
   12558:	adds	r3, r3, #1
   1255c:	adc	r1, r1, #0
   12560:	str	r3, [r2, #192]	; 0xc0
   12564:	str	r1, [r2, #196]	; 0xc4
   12568:	b	11978 <free@plt>
   1256c:			; <UNDEFINED> instruction: 0x00029bb0

00012570 <free_token_boolean_op@@Base>:
   12570:	push	{r4, lr}
   12574:	mov	r4, r0
   12578:	ldr	r0, [r0, #4]
   1257c:	ldr	r3, [pc, #72]	; 125cc <free_token_boolean_op@@Base+0x5c>
   12580:	cmp	r0, #0
   12584:	bne	125ac <free_token_boolean_op@@Base+0x3c>
   12588:	ldr	r2, [r3, #208]	; 0xd0
   1258c:	ldr	r1, [r3, #212]	; 0xd4
   12590:	adds	r2, r2, #1
   12594:	adc	r1, r1, #0
   12598:	str	r2, [r3, #208]	; 0xd0
   1259c:	str	r1, [r3, #212]	; 0xd4
   125a0:	mov	r0, r4
   125a4:	pop	{r4, lr}
   125a8:	b	11978 <free@plt>
   125ac:	ldr	r2, [r3, #200]	; 0xc8
   125b0:	ldr	r1, [r3, #204]	; 0xcc
   125b4:	adds	r2, r2, #1
   125b8:	adc	r1, r1, #0
   125bc:	str	r2, [r3, #200]	; 0xc8
   125c0:	str	r1, [r3, #204]	; 0xcc
   125c4:	bl	11978 <free@plt>
   125c8:	b	125a0 <free_token_boolean_op@@Base+0x30>
   125cc:			; <UNDEFINED> instruction: 0x00029bb0

000125d0 <init_lexer@@Base>:
   125d0:	ldr	r2, [pc, #32]	; 125f8 <init_lexer@@Base+0x28>
   125d4:	str	r1, [r0]
   125d8:	ldm	r2, {r3, ip}
   125dc:	adds	r3, r3, #1
   125e0:	adc	ip, ip, #0
   125e4:	stm	r2, {r3, ip}
   125e8:	mov	r3, #0
   125ec:	str	r3, [r0, #4]
   125f0:	str	r3, [r0, #8]
   125f4:	bx	lr
   125f8:	andeq	r9, r2, r8, lsl #25

000125fc <destroy_lexer@@Base>:
   125fc:	ldr	r0, [r0, #4]
   12600:	ldr	r3, [pc, #60]	; 12644 <destroy_lexer@@Base+0x48>
   12604:	cmp	r0, #0
   12608:	bne	12628 <destroy_lexer@@Base+0x2c>
   1260c:	ldr	r2, [r3, #16]
   12610:	ldr	r1, [r3, #20]
   12614:	adds	r2, r2, #1
   12618:	adc	r1, r1, #0
   1261c:	str	r2, [r3, #16]
   12620:	str	r1, [r3, #20]
   12624:	bx	lr
   12628:	ldr	r2, [r3, #8]
   1262c:	ldr	r1, [r3, #12]
   12630:	adds	r2, r2, #1
   12634:	adc	r1, r1, #0
   12638:	str	r2, [r3, #8]
   1263c:	str	r1, [r3, #12]
   12640:	b	11978 <free@plt>
   12644:	andeq	r9, r2, r8, lsl #25

00012648 <free_stack_base@@Base>:
   12648:	ldr	r2, [pc, #24]	; 12668 <free_stack_base@@Base+0x20>
   1264c:	ldr	r3, [r2, #24]
   12650:	ldr	r1, [r2, #28]
   12654:	adds	r3, r3, #1
   12658:	adc	r1, r1, #0
   1265c:	str	r3, [r2, #24]
   12660:	str	r1, [r2, #28]
   12664:	b	11978 <free@plt>
   12668:	andeq	r9, r2, r8, lsl #25

0001266c <push_back@@Base>:
   1266c:	ldr	r2, [pc, #56]	; 126ac <push_back@@Base+0x40>
   12670:	push	{r4, r5, r6, lr}
   12674:	mov	r4, r0
   12678:	mov	r5, r1
   1267c:	ldr	r3, [r2, #32]
   12680:	ldr	r0, [r2, #36]	; 0x24
   12684:	adds	r3, r3, #1
   12688:	adc	r0, r0, #0
   1268c:	str	r3, [r2, #32]
   12690:	str	r0, [r2, #36]	; 0x24
   12694:	mov	r0, #8
   12698:	bl	119d8 <malloc@plt>
   1269c:	ldr	r3, [r4, #4]
   126a0:	str	r0, [r4, #4]
   126a4:	stm	r0, {r3, r5}
   126a8:	pop	{r4, r5, r6, pc}
   126ac:	andeq	r9, r2, r8, lsl #25

000126b0 <get_char@@Base>:
   126b0:	ldr	r2, [pc, #44]	; 126e4 <get_char@@Base+0x34>
   126b4:	ldr	r3, [r2, #40]	; 0x28
   126b8:	ldr	r1, [r2, #44]	; 0x2c
   126bc:	adds	r3, r3, #1
   126c0:	adc	r1, r1, #0
   126c4:	str	r3, [r2, #40]	; 0x28
   126c8:	ldr	r3, [r0, #8]
   126cc:	str	r1, [r2, #44]	; 0x2c
   126d0:	ldr	r2, [r0]
   126d4:	add	r1, r3, #1
   126d8:	str	r1, [r0, #8]
   126dc:	ldrb	r0, [r2, r3]
   126e0:	bx	lr
   126e4:	andeq	r9, r2, r8, lsl #25

000126e8 <push_back_chars@@Base>:
   126e8:	ldr	r2, [r0, #8]
   126ec:	push	{r4, lr}
   126f0:	ldr	r4, [pc, #112]	; 12768 <push_back_chars@@Base+0x80>
   126f4:	cmp	r2, r1
   126f8:	bcc	12720 <push_back_chars@@Base+0x38>
   126fc:	ldr	r3, [r4, #48]	; 0x30
   12700:	sub	r2, r2, r1
   12704:	ldr	ip, [r4, #52]	; 0x34
   12708:	str	r2, [r0, #8]
   1270c:	adds	r3, r3, #1
   12710:	adc	ip, ip, #0
   12714:	str	r3, [r4, #48]	; 0x30
   12718:	str	ip, [r4, #52]	; 0x34
   1271c:	pop	{r4, pc}
   12720:	ldr	r3, [r4, #56]	; 0x38
   12724:	ldr	r2, [r4, #60]	; 0x3c
   12728:	ldr	r0, [pc, #60]	; 1276c <push_back_chars@@Base+0x84>
   1272c:	adds	r3, r3, #1
   12730:	str	r3, [r4, #56]	; 0x38
   12734:	adc	r2, r2, #0
   12738:	ldr	r3, [pc, #48]	; 12770 <push_back_chars@@Base+0x88>
   1273c:	str	r2, [r4, #60]	; 0x3c
   12740:	ldr	r1, [r3]
   12744:	bl	11ad4 <fputs@plt>
   12748:	ldr	r3, [r4, #64]	; 0x40
   1274c:	mov	r0, #1
   12750:	ldr	r2, [r4, #68]	; 0x44
   12754:	adds	r3, r3, #1
   12758:	adc	r2, r2, #0
   1275c:	str	r3, [r4, #64]	; 0x40
   12760:	str	r2, [r4, #68]	; 0x44
   12764:	bl	11a08 <exit@plt>
   12768:	andeq	r9, r2, r8, lsl #25
   1276c:	andeq	r7, r1, pc, asr pc
   12770:	andeq	r9, r2, r0, lsr #21

00012774 <push_back_one_char@@Base>:
   12774:	push	{r4, lr}
   12778:	mov	r1, #1
   1277c:	ldr	r4, [pc, #52]	; 127b8 <push_back_one_char@@Base+0x44>
   12780:	ldr	r3, [r4, #72]	; 0x48
   12784:	ldr	r2, [r4, #76]	; 0x4c
   12788:	adds	r3, r3, #1
   1278c:	adc	r2, r2, #0
   12790:	str	r3, [r4, #72]	; 0x48
   12794:	str	r2, [r4, #76]	; 0x4c
   12798:	bl	126e8 <push_back_chars@@Base>
   1279c:	ldr	r3, [r4, #80]	; 0x50
   127a0:	ldr	r2, [r4, #84]	; 0x54
   127a4:	adds	r3, r3, #1
   127a8:	adc	r2, r2, #0
   127ac:	str	r3, [r4, #80]	; 0x50
   127b0:	str	r2, [r4, #84]	; 0x54
   127b4:	pop	{r4, pc}
   127b8:	andeq	r9, r2, r8, lsl #25

000127bc <next@@Base>:
   127bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	mov	r7, r0
   127c4:	sub	sp, sp, #516	; 0x204
   127c8:	ldr	r8, [r0, #4]
   127cc:	ldr	r4, [pc, #3440]	; 13544 <next@@Base+0xd88>
   127d0:	cmp	r8, #0
   127d4:	beq	12810 <next@@Base+0x54>
   127d8:	ldr	r3, [r4, #88]	; 0x58
   127dc:	mov	r0, r8
   127e0:	ldr	r2, [r4, #92]	; 0x5c
   127e4:	ldr	r6, [r8, #4]
   127e8:	adds	r3, r3, #1
   127ec:	str	r3, [r4, #88]	; 0x58
   127f0:	adc	r2, r2, #0
   127f4:	ldr	r3, [r8]
   127f8:	str	r2, [r4, #92]	; 0x5c
   127fc:	str	r3, [r7, #4]
   12800:	bl	11978 <free@plt>
   12804:	mov	r0, r6
   12808:	add	sp, sp, #516	; 0x204
   1280c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12810:	ldr	r3, [r4, #96]	; 0x60
   12814:	mov	r6, r8
   12818:	add	r9, r4, #304	; 0x130
   1281c:	add	sl, r4, #288	; 0x120
   12820:	ldr	r2, [r4, #100]	; 0x64
   12824:	adds	r3, r3, #1
   12828:	adc	r2, r2, #0
   1282c:	str	r3, [r4, #96]	; 0x60
   12830:	str	r2, [r4, #100]	; 0x64
   12834:	bl	126b0 <get_char@@Base>
   12838:	mov	r5, r0
   1283c:	mov	r0, r8
   12840:	add	r8, r4, #320	; 0x140
   12844:	cmp	r5, #0
   12848:	bne	12880 <next@@Base+0xc4>
   1284c:	ldr	r4, [pc, #3316]	; 13548 <next@@Base+0xd8c>
   12850:	ldr	r3, [r4]
   12854:	ldr	r2, [r4, #4]
   12858:	adds	r3, r3, #1
   1285c:	mov	r0, r3
   12860:	adc	r2, r2, #0
   12864:	mov	r1, r2
   12868:	strd	r0, [r4], #16
   1286c:	mov	r0, #4
   12870:	bl	119d8 <malloc@plt>
   12874:	mov	r6, r0
   12878:	bl	1230c <init_token_eof@@Base>
   1287c:	b	12be4 <next@@Base+0x428>
   12880:	sub	r0, r0, #1
   12884:	cmp	r0, #4
   12888:	ldrls	pc, [pc, r0, lsl #2]
   1288c:	b	12944 <next@@Base+0x188>
   12890:	andeq	r2, r1, r4, lsr #17
   12894:	andeq	r3, r1, r4, lsr r1
   12898:	andeq	r3, r1, r4, asr #4
   1289c:	andeq	r3, r1, r8, ror #6
   128a0:	muleq	r1, r4, r4
   128a4:	ldr	r3, [r4, #112]	; 0x70
   128a8:	ldr	r2, [r4, #116]	; 0x74
   128ac:	adds	r3, r3, #1
   128b0:	adc	r2, r2, #0
   128b4:	str	r3, [r4, #112]	; 0x70
   128b8:	str	r2, [r4, #116]	; 0x74
   128bc:	ldr	r4, [pc, #3208]	; 1354c <next@@Base+0xd90>
   128c0:	sub	r3, r5, #48	; 0x30
   128c4:	uxtb	r3, r3
   128c8:	cmp	r3, #9
   128cc:	bls	13104 <next@@Base+0x948>
   128d0:	ldr	r4, [pc, #3192]	; 13550 <next@@Base+0xd94>
   128d4:	mov	r0, r7
   128d8:	ldr	r3, [r4, #-8]
   128dc:	ldr	r2, [r4, #-4]
   128e0:	adds	r3, r3, #1
   128e4:	adc	r2, r2, #0
   128e8:	str	r3, [r4, #-8]
   128ec:	str	r2, [r4, #-4]
   128f0:	bl	12774 <push_back_one_char@@Base>
   128f4:	ldr	r3, [r4]
   128f8:	ldr	r2, [r4, #4]
   128fc:	adds	r3, r3, #1
   12900:	mov	r0, r3
   12904:	add	r3, sp, #512	; 0x200
   12908:	adc	r2, r2, #0
   1290c:	add	r6, r3, r6
   12910:	mov	r1, r2
   12914:	mov	r3, #0
   12918:	strd	r0, [r4], #16
   1291c:	mov	r0, #8
   12920:	strb	r3, [r6, #-512]	; 0xfffffe00
   12924:	bl	119d8 <malloc@plt>
   12928:	mov	r6, r0
   1292c:	mov	r0, sp
   12930:	bl	11ab0 <atoi@plt>
   12934:	mov	r1, r0
   12938:	mov	r0, r6
   1293c:	bl	121a4 <init_token_int_value@@Base>
   12940:	b	12be4 <next@@Base+0x428>
   12944:	cmp	r5, #32
   12948:	cmpne	r5, #9
   1294c:	moveq	fp, #1
   12950:	movne	fp, #0
   12954:	bne	129a0 <next@@Base+0x1e4>
   12958:	ldr	r3, [r4, #144]	; 0x90
   1295c:	ldr	r2, [r4, #148]	; 0x94
   12960:	adds	r3, r3, #1
   12964:	adc	r2, r2, #0
   12968:	str	r3, [r4, #144]	; 0x90
   1296c:	str	r2, [r4, #148]	; 0x94
   12970:	mov	r0, r7
   12974:	bl	126b0 <get_char@@Base>
   12978:	mov	r5, r0
   1297c:	mov	r0, #0
   12980:	ldr	r2, [pc, #3008]	; 13548 <next@@Base+0xd8c>
   12984:	ldr	r3, [r2, #-8]
   12988:	ldr	r1, [r2, #-4]
   1298c:	adds	r3, r3, #1
   12990:	adc	r1, r1, #0
   12994:	str	r3, [r2, #-8]
   12998:	str	r1, [r2, #-4]
   1299c:	b	12844 <next@@Base+0x88>
   129a0:	cmp	r5, #10
   129a4:	bne	129c4 <next@@Base+0x208>
   129a8:	ldr	r3, [r4, #152]	; 0x98
   129ac:	ldr	r2, [r4, #156]	; 0x9c
   129b0:	adds	r3, r3, #1
   129b4:	adc	r2, r2, #0
   129b8:	str	r3, [r4, #152]	; 0x98
   129bc:	str	r2, [r4, #156]	; 0x9c
   129c0:	b	12970 <next@@Base+0x1b4>
   129c4:	cmp	r5, #48	; 0x30
   129c8:	bne	12a14 <next@@Base+0x258>
   129cc:	ldr	r3, [r4, #160]	; 0xa0
   129d0:	mov	r0, #8
   129d4:	ldr	r2, [r4, #164]	; 0xa4
   129d8:	adds	r3, r3, #1
   129dc:	adc	r2, r2, #0
   129e0:	str	r3, [r4, #160]	; 0xa0
   129e4:	str	r2, [r4, #164]	; 0xa4
   129e8:	bl	119d8 <malloc@plt>
   129ec:	mov	r1, fp
   129f0:	mov	r6, r0
   129f4:	bl	121a4 <init_token_int_value@@Base>
   129f8:	ldr	r3, [r4, #168]	; 0xa8
   129fc:	ldr	r2, [r4, #172]	; 0xac
   12a00:	adds	r3, r3, #1
   12a04:	adc	r2, r2, #0
   12a08:	str	r3, [r4, #168]	; 0xa8
   12a0c:	str	r2, [r4, #172]	; 0xac
   12a10:	b	12804 <next@@Base+0x48>
   12a14:	sub	r3, r5, #49	; 0x31
   12a18:	uxtb	r3, r3
   12a1c:	cmp	r3, #8
   12a20:	bhi	12a7c <next@@Base+0x2c0>
   12a24:	ldr	r3, [r4, #176]	; 0xb0
   12a28:	add	fp, r6, #1
   12a2c:	mov	r0, r7
   12a30:	ldr	r2, [r4, #180]	; 0xb4
   12a34:	adds	r3, r3, #1
   12a38:	str	r3, [r4, #176]	; 0xb0
   12a3c:	add	r3, sp, #512	; 0x200
   12a40:	adc	r2, r2, #0
   12a44:	add	r6, r3, r6
   12a48:	str	r2, [r4, #180]	; 0xb4
   12a4c:	strb	r5, [r6, #-512]	; 0xfffffe00
   12a50:	mov	r6, fp
   12a54:	bl	126b0 <get_char@@Base>
   12a58:	ldr	r3, [r4, #184]	; 0xb8
   12a5c:	mov	r5, r0
   12a60:	mov	r0, #1
   12a64:	ldr	r2, [r4, #188]	; 0xbc
   12a68:	adds	r3, r3, #1
   12a6c:	adc	r2, r2, #0
   12a70:	str	r3, [r4, #184]	; 0xb8
   12a74:	str	r2, [r4, #188]	; 0xbc
   12a78:	b	12980 <next@@Base+0x1c4>
   12a7c:	cmp	r5, #40	; 0x28
   12a80:	bne	12ac8 <next@@Base+0x30c>
   12a84:	ldr	r3, [r4, #192]	; 0xc0
   12a88:	mov	r0, #4
   12a8c:	ldr	r2, [r4, #196]	; 0xc4
   12a90:	adds	r3, r3, #1
   12a94:	adc	r2, r2, #0
   12a98:	str	r3, [r4, #192]	; 0xc0
   12a9c:	str	r2, [r4, #196]	; 0xc4
   12aa0:	bl	119d8 <malloc@plt>
   12aa4:	mov	r6, r0
   12aa8:	bl	12204 <init_token_opar@@Base>
   12aac:	ldr	r3, [r4, #200]	; 0xc8
   12ab0:	ldr	r2, [r4, #204]	; 0xcc
   12ab4:	adds	r3, r3, #1
   12ab8:	adc	r2, r2, #0
   12abc:	str	r3, [r4, #200]	; 0xc8
   12ac0:	str	r2, [r4, #204]	; 0xcc
   12ac4:	b	12804 <next@@Base+0x48>
   12ac8:	cmp	r5, #41	; 0x29
   12acc:	bne	12b14 <next@@Base+0x358>
   12ad0:	ldr	r3, [r4, #208]	; 0xd0
   12ad4:	mov	r0, #4
   12ad8:	ldr	r2, [r4, #212]	; 0xd4
   12adc:	adds	r3, r3, #1
   12ae0:	adc	r2, r2, #0
   12ae4:	str	r3, [r4, #208]	; 0xd0
   12ae8:	str	r2, [r4, #212]	; 0xd4
   12aec:	bl	119d8 <malloc@plt>
   12af0:	mov	r6, r0
   12af4:	bl	12230 <init_token_cpar@@Base>
   12af8:	ldr	r3, [r4, #216]	; 0xd8
   12afc:	ldr	r2, [r4, #220]	; 0xdc
   12b00:	adds	r3, r3, #1
   12b04:	adc	r2, r2, #0
   12b08:	str	r3, [r4, #216]	; 0xd8
   12b0c:	str	r2, [r4, #220]	; 0xdc
   12b10:	b	12804 <next@@Base+0x48>
   12b14:	cmp	r5, #123	; 0x7b
   12b18:	bne	12b60 <next@@Base+0x3a4>
   12b1c:	ldr	r3, [r4, #224]	; 0xe0
   12b20:	mov	r0, #4
   12b24:	ldr	r2, [r4, #228]	; 0xe4
   12b28:	adds	r3, r3, #1
   12b2c:	adc	r2, r2, #0
   12b30:	str	r3, [r4, #224]	; 0xe0
   12b34:	str	r2, [r4, #228]	; 0xe4
   12b38:	bl	119d8 <malloc@plt>
   12b3c:	mov	r6, r0
   12b40:	bl	1225c <init_token_obra@@Base>
   12b44:	ldr	r3, [r4, #232]	; 0xe8
   12b48:	ldr	r2, [r4, #236]	; 0xec
   12b4c:	adds	r3, r3, #1
   12b50:	adc	r2, r2, #0
   12b54:	str	r3, [r4, #232]	; 0xe8
   12b58:	str	r2, [r4, #236]	; 0xec
   12b5c:	b	12804 <next@@Base+0x48>
   12b60:	cmp	r5, #125	; 0x7d
   12b64:	bne	12bac <next@@Base+0x3f0>
   12b68:	ldr	r3, [r4, #240]	; 0xf0
   12b6c:	mov	r0, #4
   12b70:	ldr	r2, [r4, #244]	; 0xf4
   12b74:	adds	r3, r3, #1
   12b78:	adc	r2, r2, #0
   12b7c:	str	r3, [r4, #240]	; 0xf0
   12b80:	str	r2, [r4, #244]	; 0xf4
   12b84:	bl	119d8 <malloc@plt>
   12b88:	mov	r6, r0
   12b8c:	bl	12288 <init_token_cbra@@Base>
   12b90:	ldr	r3, [r4, #248]	; 0xf8
   12b94:	ldr	r2, [r4, #252]	; 0xfc
   12b98:	adds	r3, r3, #1
   12b9c:	adc	r2, r2, #0
   12ba0:	str	r3, [r4, #248]	; 0xf8
   12ba4:	str	r2, [r4, #252]	; 0xfc
   12ba8:	b	12804 <next@@Base+0x48>
   12bac:	cmp	r5, #59	; 0x3b
   12bb0:	bne	12c00 <next@@Base+0x444>
   12bb4:	ldr	r4, [pc, #2456]	; 13554 <next@@Base+0xd98>
   12bb8:	ldr	r3, [r4]
   12bbc:	ldr	r2, [r4, #4]
   12bc0:	adds	r3, r3, #1
   12bc4:	mov	r0, r3
   12bc8:	adc	r2, r2, #0
   12bcc:	mov	r1, r2
   12bd0:	strd	r0, [r4], #16
   12bd4:	mov	r0, #4
   12bd8:	bl	119d8 <malloc@plt>
   12bdc:	mov	r6, r0
   12be0:	bl	122e0 <init_token_semicolon@@Base>
   12be4:	ldr	r3, [r4, #-8]
   12be8:	ldr	r2, [r4, #-4]
   12bec:	adds	r3, r3, #1
   12bf0:	adc	r2, r2, #0
   12bf4:	str	r3, [r4, #-8]
   12bf8:	str	r2, [r4, #-4]
   12bfc:	b	12804 <next@@Base+0x48>
   12c00:	add	r3, sp, #512	; 0x200
   12c04:	cmp	r5, #101	; 0x65
   12c08:	add	r1, r3, r6
   12c0c:	bne	12c64 <next@@Base+0x4a8>
   12c10:	ldr	fp, [pc, #2368]	; 13558 <next@@Base+0xd9c>
   12c14:	add	r6, r6, #1
   12c18:	ldm	fp, {r3, ip}
   12c1c:	adds	r0, r3, #1
   12c20:	adc	ip, ip, #0
   12c24:	mov	r2, r0
   12c28:	mov	r3, ip
   12c2c:	mov	r0, r7
   12c30:	strd	r2, [fp], #16
   12c34:	mov	r3, #101	; 0x65
   12c38:	strb	r3, [r1, #-512]	; 0xfffffe00
   12c3c:	bl	126b0 <get_char@@Base>
   12c40:	ldr	r3, [fp, #-8]
   12c44:	mov	r5, r0
   12c48:	mov	r0, #5
   12c4c:	ldr	r2, [fp, #-4]
   12c50:	adds	r3, r3, #1
   12c54:	adc	r2, r2, #0
   12c58:	str	r3, [fp, #-8]
   12c5c:	str	r2, [fp, #-4]
   12c60:	b	12980 <next@@Base+0x1c4>
   12c64:	cmp	r5, #105	; 0x69
   12c68:	bne	12cbc <next@@Base+0x500>
   12c6c:	ldr	r3, [sl]
   12c70:	mov	r0, r7
   12c74:	add	r6, r6, #1
   12c78:	strb	r5, [r1, #-512]	; 0xfffffe00
   12c7c:	ldr	r2, [sl, #4]
   12c80:	adds	r3, r3, #1
   12c84:	adc	r2, r2, #0
   12c88:	str	r3, [sl]
   12c8c:	str	r2, [sl, #4]
   12c90:	bl	126b0 <get_char@@Base>
   12c94:	ldr	r2, [pc, #2240]	; 1355c <next@@Base+0xda0>
   12c98:	mov	r5, r0
   12c9c:	mov	r0, #2
   12ca0:	ldr	r3, [r2, #-8]
   12ca4:	ldr	r1, [r2, #-4]
   12ca8:	adds	r3, r3, #1
   12cac:	adc	r1, r1, #0
   12cb0:	str	r3, [r2, #-8]
   12cb4:	str	r1, [r2, #-4]
   12cb8:	b	12980 <next@@Base+0x1c4>
   12cbc:	cmp	r5, #109	; 0x6d
   12cc0:	bne	12d14 <next@@Base+0x558>
   12cc4:	ldr	r3, [r9]
   12cc8:	mov	r0, r7
   12ccc:	add	r6, r6, #1
   12cd0:	strb	r5, [r1, #-512]	; 0xfffffe00
   12cd4:	ldr	r2, [r9, #4]
   12cd8:	adds	r3, r3, #1
   12cdc:	adc	r2, r2, #0
   12ce0:	str	r3, [r9]
   12ce4:	str	r2, [r9, #4]
   12ce8:	bl	126b0 <get_char@@Base>
   12cec:	ldr	r2, [pc, #2156]	; 13560 <next@@Base+0xda4>
   12cf0:	mov	r5, r0
   12cf4:	mov	r0, #3
   12cf8:	ldr	r3, [r2, #-8]
   12cfc:	ldr	r1, [r2, #-4]
   12d00:	adds	r3, r3, #1
   12d04:	adc	r1, r1, #0
   12d08:	str	r3, [r2, #-8]
   12d0c:	str	r1, [r2, #-4]
   12d10:	b	12980 <next@@Base+0x1c4>
   12d14:	cmp	r5, #114	; 0x72
   12d18:	bne	12d6c <next@@Base+0x5b0>
   12d1c:	ldr	r3, [r8]
   12d20:	mov	r0, r7
   12d24:	add	r6, r6, #1
   12d28:	strb	r5, [r1, #-512]	; 0xfffffe00
   12d2c:	ldr	r2, [r8, #4]
   12d30:	adds	r3, r3, #1
   12d34:	adc	r2, r2, #0
   12d38:	str	r3, [r8]
   12d3c:	str	r2, [r8, #4]
   12d40:	bl	126b0 <get_char@@Base>
   12d44:	ldr	r2, [pc, #2072]	; 13564 <next@@Base+0xda8>
   12d48:	mov	r5, r0
   12d4c:	mov	r0, #4
   12d50:	ldr	r3, [r2, #-8]
   12d54:	ldr	r1, [r2, #-4]
   12d58:	adds	r3, r3, #1
   12d5c:	adc	r1, r1, #0
   12d60:	str	r3, [r2, #-8]
   12d64:	str	r1, [r2, #-4]
   12d68:	b	12980 <next@@Base+0x1c4>
   12d6c:	cmp	r5, #33	; 0x21
   12d70:	bne	12e64 <next@@Base+0x6a8>
   12d74:	ldr	r4, [pc, #2024]	; 13564 <next@@Base+0xda8>
   12d78:	strb	r5, [r1, #-512]	; 0xfffffe00
   12d7c:	ldm	r4, {r3, ip}
   12d80:	mov	r8, r4
   12d84:	add	r4, r4, #32
   12d88:	adds	r0, r3, #1
   12d8c:	adc	ip, ip, #0
   12d90:	mov	r2, r0
   12d94:	mov	r3, ip
   12d98:	mov	r0, r7
   12d9c:	strd	r2, [r8], #16
   12da0:	bl	126b0 <get_char@@Base>
   12da4:	ldr	r3, [r8, #-8]
   12da8:	mov	r5, r0
   12dac:	mov	r0, #8
   12db0:	ldr	r2, [r8, #-4]
   12db4:	adds	r3, r3, #1
   12db8:	adc	r2, r2, #0
   12dbc:	str	r3, [r8, #-8]
   12dc0:	str	r2, [r8, #-4]
   12dc4:	bl	119d8 <malloc@plt>
   12dc8:	cmp	r5, #61	; 0x3d
   12dcc:	mov	r6, r0
   12dd0:	beq	12e2c <next@@Base+0x670>
   12dd4:	mov	r0, r7
   12dd8:	bl	12774 <push_back_one_char@@Base>
   12ddc:	ldr	r3, [r8]
   12de0:	mov	r0, #2
   12de4:	ldr	r2, [r8, #4]
   12de8:	adds	r3, r3, #1
   12dec:	adc	r2, r2, #0
   12df0:	str	r3, [r8]
   12df4:	str	r2, [r8, #4]
   12df8:	bl	119d8 <malloc@plt>
   12dfc:	ldrb	r3, [sp]
   12e00:	strb	r3, [r0]
   12e04:	mov	r3, #0
   12e08:	strb	r3, [r0, #1]
   12e0c:	mov	r1, r0
   12e10:	mov	r0, r6
   12e14:	bl	12390 <init_token_boolean_op@@Base>
   12e18:	ldr	r3, [r4]
   12e1c:	ldr	r2, [r4, #4]
   12e20:	adds	r3, r3, #1
   12e24:	adc	r2, r2, #0
   12e28:	b	1335c <next@@Base+0xba0>
   12e2c:	mov	r0, #3
   12e30:	bl	119d8 <malloc@plt>
   12e34:	ldrb	r3, [sp]
   12e38:	ldr	r2, [r4, #-4]
   12e3c:	strb	r3, [r0]
   12e40:	mov	r3, #0
   12e44:	strb	r5, [r0, #1]
   12e48:	strb	r3, [r0, #2]
   12e4c:	ldr	r3, [r4, #-8]
   12e50:	adds	r3, r3, #1
   12e54:	adc	r2, r2, #0
   12e58:	str	r3, [r4, #-8]
   12e5c:	str	r2, [r4, #-4]
   12e60:	b	12e0c <next@@Base+0x650>
   12e64:	and	r3, r5, #253	; 0xfd
   12e68:	cmp	r3, #60	; 0x3c
   12e6c:	bne	12f68 <next@@Base+0x7ac>
   12e70:	ldr	r4, [pc, #1776]	; 13568 <next@@Base+0xdac>
   12e74:	mov	r0, r7
   12e78:	strb	r5, [r1, #-512]	; 0xfffffe00
   12e7c:	ldr	r3, [r4, #-8]
   12e80:	ldr	r2, [r4, #-4]
   12e84:	adds	r3, r3, #1
   12e88:	adc	r2, r2, #0
   12e8c:	str	r3, [r4, #-8]
   12e90:	str	r2, [r4, #-4]
   12e94:	bl	126b0 <get_char@@Base>
   12e98:	ldr	r3, [r4]
   12e9c:	mov	r5, r0
   12ea0:	ldr	r2, [r4, #4]
   12ea4:	adds	r3, r3, #1
   12ea8:	mov	r0, r3
   12eac:	adc	r2, r2, #0
   12eb0:	mov	r1, r2
   12eb4:	strd	r0, [r4], #16
   12eb8:	mov	r0, #8
   12ebc:	bl	119d8 <malloc@plt>
   12ec0:	cmp	r5, #61	; 0x3d
   12ec4:	mov	r6, r0
   12ec8:	beq	12f30 <next@@Base+0x774>
   12ecc:	mov	r0, r7
   12ed0:	bl	12774 <push_back_one_char@@Base>
   12ed4:	ldr	r3, [r4, #-8]
   12ed8:	mov	r0, #2
   12edc:	ldr	r2, [r4, #-4]
   12ee0:	adds	r3, r3, #1
   12ee4:	adc	r2, r2, #0
   12ee8:	str	r3, [r4, #-8]
   12eec:	str	r2, [r4, #-4]
   12ef0:	bl	119d8 <malloc@plt>
   12ef4:	ldrb	r3, [sp]
   12ef8:	strb	r3, [r0]
   12efc:	mov	r3, #0
   12f00:	strb	r3, [r0, #1]
   12f04:	mov	r1, r0
   12f08:	mov	r0, r6
   12f0c:	bl	12390 <init_token_boolean_op@@Base>
   12f10:	ldr	r2, [pc, #1620]	; 1356c <next@@Base+0xdb0>
   12f14:	ldr	r3, [r2, #-8]
   12f18:	ldr	r1, [r2, #-4]
   12f1c:	adds	r3, r3, #1
   12f20:	adc	r1, r1, #0
   12f24:	str	r3, [r2, #-8]
   12f28:	str	r1, [r2, #-4]
   12f2c:	b	12804 <next@@Base+0x48>
   12f30:	mov	r0, #3
   12f34:	bl	119d8 <malloc@plt>
   12f38:	ldrb	r3, [sp]
   12f3c:	ldr	r2, [r4, #4]
   12f40:	strb	r3, [r0]
   12f44:	mov	r3, #0
   12f48:	strb	r5, [r0, #1]
   12f4c:	strb	r3, [r0, #2]
   12f50:	ldr	r3, [r4]
   12f54:	adds	r3, r3, #1
   12f58:	adc	r2, r2, #0
   12f5c:	str	r3, [r4]
   12f60:	str	r2, [r4, #4]
   12f64:	b	12f04 <next@@Base+0x748>
   12f68:	cmp	r5, #61	; 0x3d
   12f6c:	ldr	r4, [pc, #1532]	; 13570 <next@@Base+0xdb4>
   12f70:	bne	1300c <next@@Base+0x850>
   12f74:	mov	r2, r4
   12f78:	strb	r5, [r1, #-512]	; 0xfffffe00
   12f7c:	ldrd	r8, [r2, #-16]!
   12f80:	adds	r3, r8, #1
   12f84:	adc	r0, r9, #0
   12f88:	str	r3, [r2]
   12f8c:	str	r0, [r2, #4]
   12f90:	mov	r0, r7
   12f94:	bl	126b0 <get_char@@Base>
   12f98:	ldr	r3, [r4]
   12f9c:	mov	r7, r0
   12fa0:	ldr	r2, [r4, #4]
   12fa4:	adds	r3, r3, #1
   12fa8:	mov	r0, r3
   12fac:	adc	r2, r2, #0
   12fb0:	mov	r1, r2
   12fb4:	strd	r0, [r4], #16
   12fb8:	mov	r0, #8
   12fbc:	bl	119d8 <malloc@plt>
   12fc0:	mov	r6, r0
   12fc4:	cmp	r7, #61	; 0x3d
   12fc8:	beq	12fe8 <next@@Base+0x82c>
   12fcc:	ldr	r3, [r4, #-8]
   12fd0:	ldr	r2, [r4, #-4]
   12fd4:	adds	r3, r3, #1
   12fd8:	adc	r2, r2, #0
   12fdc:	str	r3, [r4, #-8]
   12fe0:	str	r2, [r4, #-4]
   12fe4:	b	1323c <next@@Base+0xa80>
   12fe8:	mov	r0, #3
   12fec:	bl	119d8 <malloc@plt>
   12ff0:	ldrb	r3, [sp]
   12ff4:	mov	r1, r0
   12ff8:	strb	r3, [r0]
   12ffc:	mov	r3, #0
   13000:	strb	r5, [r0, #1]
   13004:	strb	r3, [r0, #2]
   13008:	b	12e10 <next@@Base+0x654>
   1300c:	ldr	r3, [r4, #-8]
   13010:	ldr	r2, [r4, #-4]
   13014:	adds	r3, r3, #1
   13018:	adc	r2, r2, #0
   1301c:	cmp	r5, #124	; 0x7c
   13020:	str	r3, [r4, #-8]
   13024:	str	r2, [r4, #-4]
   13028:	bne	13084 <next@@Base+0x8c8>
   1302c:	ldr	r3, [r4, #24]
   13030:	mov	r0, r7
   13034:	add	r4, r4, #48	; 0x30
   13038:	strb	r5, [r1, #-512]	; 0xfffffe00
   1303c:	ldr	r2, [r4, #-20]	; 0xffffffec
   13040:	adds	r3, r3, #1
   13044:	adc	r2, r2, #0
   13048:	str	r3, [r4, #-24]	; 0xffffffe8
   1304c:	str	r2, [r4, #-20]	; 0xffffffec
   13050:	bl	126b0 <get_char@@Base>
   13054:	ldr	r3, [r4, #-16]
   13058:	mov	r7, r0
   1305c:	mov	r0, #8
   13060:	ldr	r2, [r4, #-12]
   13064:	adds	r3, r3, #1
   13068:	adc	r2, r2, #0
   1306c:	str	r3, [r4, #-16]
   13070:	str	r2, [r4, #-12]
   13074:	bl	119d8 <malloc@plt>
   13078:	mov	r6, r0
   1307c:	cmp	r7, #124	; 0x7c
   13080:	b	12fc8 <next@@Base+0x80c>
   13084:	cmp	r5, #38	; 0x26
   13088:	add	r6, r4, #64	; 0x40
   1308c:	bne	130d0 <next@@Base+0x914>
   13090:	mov	r0, r7
   13094:	strb	r5, [r1, #-512]	; 0xfffffe00
   13098:	add	r4, r4, #80	; 0x50
   1309c:	bl	126b0 <get_char@@Base>
   130a0:	ldr	r3, [r6]
   130a4:	mov	r7, r0
   130a8:	mov	r0, #8
   130ac:	ldr	r2, [r6, #4]
   130b0:	adds	r3, r3, #1
   130b4:	adc	r2, r2, #0
   130b8:	str	r3, [r6]
   130bc:	str	r2, [r6, #4]
   130c0:	bl	119d8 <malloc@plt>
   130c4:	mov	r6, r0
   130c8:	cmp	r7, #38	; 0x26
   130cc:	b	12fc8 <next@@Base+0x80c>
   130d0:	ldr	r3, [r6, #-8]
   130d4:	add	r4, r4, #96	; 0x60
   130d8:	ldr	r2, [r6, #-4]
   130dc:	ldr	r1, [pc, #1168]	; 13574 <next@@Base+0xdb8>
   130e0:	adds	r3, r3, #1
   130e4:	str	r3, [r6, #-8]
   130e8:	adc	r2, r2, #0
   130ec:	ldr	r3, [pc, #1156]	; 13578 <next@@Base+0xdbc>
   130f0:	str	r2, [r6, #-4]
   130f4:	mov	r2, r5
   130f8:	ldr	r0, [r3]
   130fc:	bl	11a2c <fprintf@plt>
   13100:	b	12fcc <next@@Base+0x810>
   13104:	ldr	r3, [r4]
   13108:	mov	r0, r7
   1310c:	strb	r5, [sp, r6]
   13110:	add	r6, r6, #1
   13114:	ldr	r2, [r4, #4]
   13118:	adds	r3, r3, #1
   1311c:	adc	r2, r2, #0
   13120:	str	r3, [r4]
   13124:	str	r2, [r4, #4]
   13128:	bl	126b0 <get_char@@Base>
   1312c:	mov	r5, r0
   13130:	b	128c0 <next@@Base+0x104>
   13134:	ldr	r4, [pc, #1088]	; 1357c <next@@Base+0xdc0>
   13138:	add	r3, sp, #512	; 0x200
   1313c:	cmp	r5, #102	; 0x66
   13140:	add	r6, r3, r6
   13144:	add	r8, r4, #32
   13148:	beq	131d0 <next@@Base+0xa14>
   1314c:	cmp	r5, #110	; 0x6e
   13150:	bne	13220 <next@@Base+0xa64>
   13154:	ldr	r3, [r4]
   13158:	strb	r5, [r6, #-512]	; 0xfffffe00
   1315c:	ldr	r2, [r4, #4]
   13160:	adds	r3, r3, #1
   13164:	mov	r0, r3
   13168:	adc	r2, r2, #0
   1316c:	mov	r1, r2
   13170:	strd	r0, [r4], #16
   13174:	mov	r0, r7
   13178:	bl	126b0 <get_char@@Base>
   1317c:	ldr	r3, [r4, #-8]
   13180:	ldr	r2, [r4, #-4]
   13184:	adds	r3, r3, #1
   13188:	adc	r2, r2, #0
   1318c:	cmp	r0, #116	; 0x74
   13190:	str	r3, [r4, #-8]
   13194:	ldrne	r3, [r4]
   13198:	str	r2, [r4, #-4]
   1319c:	ldrne	r2, [r4, #4]
   131a0:	bne	1322c <next@@Base+0xa70>
   131a4:	mov	r0, #4
   131a8:	bl	119d8 <malloc@plt>
   131ac:	mov	r6, r0
   131b0:	bl	12178 <init_token_int_type@@Base>
   131b4:	ldr	r3, [r8, #-8]
   131b8:	ldr	r2, [r8, #-4]
   131bc:	adds	r3, r3, #1
   131c0:	adc	r2, r2, #0
   131c4:	str	r3, [r8, #-8]
   131c8:	str	r2, [r8, #-4]
   131cc:	b	12804 <next@@Base+0x48>
   131d0:	ldr	r3, [r4, #-8]
   131d4:	mov	r0, #4
   131d8:	strb	r5, [r6, #-512]	; 0xfffffe00
   131dc:	ldr	r2, [r4, #-4]
   131e0:	adds	r3, r3, #1
   131e4:	adc	r2, r2, #0
   131e8:	str	r3, [r4, #-8]
   131ec:	mov	r3, #0
   131f0:	strb	r3, [r6, #-511]	; 0xfffffe01
   131f4:	str	r2, [r4, #-4]
   131f8:	bl	119d8 <malloc@plt>
   131fc:	mov	r6, r0
   13200:	bl	12338 <init_token_if@@Base>
   13204:	ldr	r3, [r8]
   13208:	ldr	r2, [r8, #4]
   1320c:	adds	r3, r3, #1
   13210:	adc	r2, r2, #0
   13214:	str	r3, [r8]
   13218:	str	r2, [r8, #4]
   1321c:	b	12804 <next@@Base+0x48>
   13220:	ldrd	r0, [r4, #-16]!
   13224:	mov	r3, r0
   13228:	mov	r2, r1
   1322c:	adds	r3, r3, #1
   13230:	adc	r2, r2, #0
   13234:	str	r3, [r4]
   13238:	str	r2, [r4, #4]
   1323c:	mov	r0, #1
   13240:	bl	11a08 <exit@plt>
   13244:	ldr	r3, [r4, #120]	; 0x78
   13248:	ldr	r2, [r4, #124]	; 0x7c
   1324c:	adds	r3, r3, #1
   13250:	adc	r2, r2, #0
   13254:	cmp	r5, #97	; 0x61
   13258:	str	r3, [r4, #120]	; 0x78
   1325c:	str	r2, [r4, #124]	; 0x7c
   13260:	ldr	r4, [pc, #792]	; 13580 <next@@Base+0xdc4>
   13264:	bne	12fcc <next@@Base+0x810>
   13268:	add	r3, sp, #512	; 0x200
   1326c:	mov	r0, r7
   13270:	add	r3, r3, r6
   13274:	add	sl, r6, #1
   13278:	strb	r5, [r3, #-512]	; 0xfffffe00
   1327c:	mov	r5, r4
   13280:	bl	126b0 <get_char@@Base>
   13284:	ldr	r3, [r4]
   13288:	ldr	r2, [r4, #4]
   1328c:	adds	r3, r3, #1
   13290:	mov	r8, r3
   13294:	adc	r2, r2, #0
   13298:	cmp	r0, #105	; 0x69
   1329c:	mov	r9, r2
   132a0:	strd	r8, [r5], #16
   132a4:	beq	132c4 <next@@Base+0xb08>
   132a8:	ldr	r3, [r5, #-8]
   132ac:	ldr	r2, [r5, #-4]
   132b0:	adds	r3, r3, #1
   132b4:	adc	r2, r2, #0
   132b8:	str	r3, [r5, #-8]
   132bc:	str	r2, [r5, #-4]
   132c0:	b	1323c <next@@Base+0xa80>
   132c4:	add	r3, sp, #512	; 0x200
   132c8:	add	r8, r6, #2
   132cc:	add	sl, r3, sl
   132d0:	add	r4, r4, #32
   132d4:	strb	r0, [sl, #-512]	; 0xfffffe00
   132d8:	mov	r0, r7
   132dc:	bl	126b0 <get_char@@Base>
   132e0:	ldr	r3, [r5]
   132e4:	ldr	r2, [r5, #4]
   132e8:	adds	r3, r3, #1
   132ec:	adc	r2, r2, #0
   132f0:	cmp	r0, #110	; 0x6e
   132f4:	str	r3, [r5]
   132f8:	str	r2, [r5, #4]
   132fc:	bne	12fcc <next@@Base+0x810>
   13300:	add	r3, sp, #512	; 0x200
   13304:	add	r5, r6, #3
   13308:	add	r8, r3, r8
   1330c:	add	r3, r3, r5
   13310:	strb	r0, [r8, #-512]	; 0xfffffe00
   13314:	mov	r8, #0
   13318:	add	r0, r6, #4
   1331c:	strb	r8, [r3, #-512]	; 0xfffffe00
   13320:	bl	119d8 <malloc@plt>
   13324:	mov	r7, r0
   13328:	mov	r2, r5
   1332c:	mov	r1, sp
   13330:	bl	11a5c <strncpy@plt>
   13334:	mov	r0, #8
   13338:	strb	r8, [r7, r5]
   1333c:	bl	119d8 <malloc@plt>
   13340:	mov	r1, r7
   13344:	mov	r6, r0
   13348:	bl	121d4 <init_token_function@@Base>
   1334c:	ldr	r3, [r4]
   13350:	ldr	r2, [r4, #4]
   13354:	adds	r3, r3, #1
   13358:	adc	r2, r2, r8
   1335c:	str	r3, [r4]
   13360:	str	r2, [r4, #4]
   13364:	b	12804 <next@@Base+0x48>
   13368:	ldr	r3, [r4, #128]	; 0x80
   1336c:	ldr	r2, [r4, #132]	; 0x84
   13370:	adds	r3, r3, #1
   13374:	adc	r2, r2, #0
   13378:	cmp	r5, #101	; 0x65
   1337c:	str	r3, [r4, #128]	; 0x80
   13380:	str	r2, [r4, #132]	; 0x84
   13384:	ldr	r4, [pc, #504]	; 13584 <next@@Base+0xdc8>
   13388:	bne	12fcc <next@@Base+0x810>
   1338c:	add	r3, sp, #512	; 0x200
   13390:	mov	r0, r7
   13394:	add	r3, r3, r6
   13398:	add	sl, r6, #1
   1339c:	strb	r5, [r3, #-512]	; 0xfffffe00
   133a0:	mov	r5, r4
   133a4:	bl	126b0 <get_char@@Base>
   133a8:	ldr	r3, [r4]
   133ac:	ldr	r2, [r4, #4]
   133b0:	adds	r3, r3, #1
   133b4:	mov	r8, r3
   133b8:	adc	r2, r2, #0
   133bc:	cmp	r0, #116	; 0x74
   133c0:	mov	r9, r2
   133c4:	strd	r8, [r5], #16
   133c8:	bne	132a8 <next@@Base+0xaec>
   133cc:	add	r3, sp, #512	; 0x200
   133d0:	add	r8, r6, #2
   133d4:	add	sl, r3, sl
   133d8:	strb	r0, [sl, #-512]	; 0xfffffe00
   133dc:	mov	r0, r7
   133e0:	bl	126b0 <get_char@@Base>
   133e4:	ldr	r3, [r5]
   133e8:	ldr	r2, [r5, #4]
   133ec:	adds	r3, r3, #1
   133f0:	adc	r2, r2, #0
   133f4:	cmp	r0, #117	; 0x75
   133f8:	str	r3, [r5]
   133fc:	addne	r4, r4, #32
   13400:	str	r2, [r5, #4]
   13404:	bne	12fcc <next@@Base+0x810>
   13408:	add	r3, sp, #512	; 0x200
   1340c:	add	r6, r6, #3
   13410:	add	r8, r3, r8
   13414:	strb	r0, [r8, #-512]	; 0xfffffe00
   13418:	mov	r0, r7
   1341c:	bl	126b0 <get_char@@Base>
   13420:	cmp	r0, #114	; 0x72
   13424:	ldrdne	r0, [r4, #32]!
   13428:	bne	13224 <next@@Base+0xa68>
   1342c:	add	r5, r4, #48	; 0x30
   13430:	ldr	r3, [r5, #-8]
   13434:	add	r4, r4, #64	; 0x40
   13438:	ldr	r2, [r5, #-4]
   1343c:	adds	r3, r3, #1
   13440:	str	r3, [r5, #-8]
   13444:	add	r3, sp, #512	; 0x200
   13448:	adc	r2, r2, #0
   1344c:	add	r6, r3, r6
   13450:	str	r2, [r5, #-4]
   13454:	strb	r0, [r6, #-512]	; 0xfffffe00
   13458:	mov	r0, r7
   1345c:	bl	126b0 <get_char@@Base>
   13460:	ldr	r3, [r5]
   13464:	ldr	r2, [r5, #4]
   13468:	adds	r3, r3, #1
   1346c:	adc	r2, r2, #0
   13470:	cmp	r0, #110	; 0x6e
   13474:	str	r3, [r5]
   13478:	str	r2, [r5, #4]
   1347c:	bne	12fcc <next@@Base+0x810>
   13480:	mov	r0, #4
   13484:	bl	119d8 <malloc@plt>
   13488:	mov	r6, r0
   1348c:	bl	122b4 <init_token_return@@Base>
   13490:	b	12e18 <next@@Base+0x65c>
   13494:	ldr	r3, [r4, #136]	; 0x88
   13498:	ldr	r2, [r4, #140]	; 0x8c
   1349c:	adds	r3, r3, #1
   134a0:	adc	r2, r2, #0
   134a4:	cmp	r5, #108	; 0x6c
   134a8:	str	r3, [r4, #136]	; 0x88
   134ac:	str	r2, [r4, #140]	; 0x8c
   134b0:	ldr	r4, [pc, #208]	; 13588 <next@@Base+0xdcc>
   134b4:	bne	12fcc <next@@Base+0x810>
   134b8:	add	r3, sp, #512	; 0x200
   134bc:	add	r8, r6, #1
   134c0:	add	r6, r3, r6
   134c4:	mov	r0, r7
   134c8:	strb	r5, [r6, #-512]	; 0xfffffe00
   134cc:	mov	r5, r4
   134d0:	bl	126b0 <get_char@@Base>
   134d4:	ldr	r3, [r4]
   134d8:	ldr	r2, [r4, #4]
   134dc:	adds	r3, r3, #1
   134e0:	mov	sl, r3
   134e4:	adc	r2, r2, #0
   134e8:	cmp	r0, #115	; 0x73
   134ec:	mov	fp, r2
   134f0:	strd	sl, [r5], #16
   134f4:	bne	132a8 <next@@Base+0xaec>
   134f8:	add	r3, sp, #512	; 0x200
   134fc:	add	r4, r4, #32
   13500:	add	r8, r3, r8
   13504:	strb	r0, [r8, #-512]	; 0xfffffe00
   13508:	mov	r0, r7
   1350c:	bl	126b0 <get_char@@Base>
   13510:	ldr	r3, [r5]
   13514:	ldr	r2, [r5, #4]
   13518:	adds	r3, r3, #1
   1351c:	adc	r2, r2, #0
   13520:	cmp	r0, #101	; 0x65
   13524:	str	r3, [r5]
   13528:	str	r2, [r5, #4]
   1352c:	bne	12fcc <next@@Base+0x810>
   13530:	mov	r0, #4
   13534:	bl	119d8 <malloc@plt>
   13538:	mov	r6, r0
   1353c:	bl	12364 <init_token_else@@Base>
   13540:	b	12e18 <next@@Base+0x65c>
   13544:	andeq	r9, r2, r8, lsl #25
   13548:	andeq	r9, r2, r8, lsr #31
   1354c:	muleq	r2, r8, lr
   13550:	andeq	r9, r2, r8, lsr #29
   13554:	andeq	r9, r2, r8, lsl #27
   13558:	muleq	r2, r8, sp
   1355c:			; <UNDEFINED> instruction: 0x00029db8
   13560:	andeq	r9, r2, r8, asr #27
   13564:	ldrdeq	r9, [r2], -r8
   13568:	andeq	r9, r2, r8, lsl #28
   1356c:	andeq	r9, r2, r8, lsr #28
   13570:	andeq	r9, r2, r8, lsr lr
   13574:	andeq	r7, r1, r0, lsl #31
   13578:	andeq	r9, r2, r0, lsr #21
   1357c:	andeq	r9, r2, r8, asr #29
   13580:	strdeq	r9, [r2], -r8
   13584:	andeq	r9, r2, r8, lsr #30
   13588:	andeq	r9, r2, r8, ror pc

0001358c <init_ast_base@@Base>:
   1358c:	ldr	ip, [pc, #24]	; 135ac <init_ast_base@@Base+0x20>
   13590:	push	{lr}		; (str lr, [sp, #-4]!)
   13594:	stm	r0, {r1, r2}
   13598:	ldm	ip, {r3, lr}
   1359c:	adds	r3, r3, #1
   135a0:	adc	lr, lr, #0
   135a4:	stm	ip, {r3, lr}
   135a8:	pop	{pc}		; (ldr pc, [sp], #4)
   135ac:			; <UNDEFINED> instruction: 0x00029fb8

000135b0 <init_ast_base_single@@Base>:
   135b0:	ldr	r2, [pc, #36]	; 135dc <init_ast_base_single@@Base+0x2c>
   135b4:	str	r1, [r0]
   135b8:	ldr	r3, [r2, #8]
   135bc:	ldr	ip, [r2, #12]
   135c0:	adds	r3, r3, #1
   135c4:	adc	ip, ip, #0
   135c8:	str	r3, [r2, #8]
   135cc:	mov	r3, #0
   135d0:	str	r3, [r0, #4]
   135d4:	str	ip, [r2, #12]
   135d8:	bx	lr
   135dc:			; <UNDEFINED> instruction: 0x00029fb8

000135e0 <init_node_id@@Base>:
   135e0:	ldr	r2, [pc, #40]	; 13610 <init_node_id@@Base+0x30>
   135e4:	str	r1, [r0, #8]
   135e8:	ldr	r3, [r2, #16]
   135ec:	ldr	ip, [r2, #20]
   135f0:	adds	r3, r3, #1
   135f4:	adc	ip, ip, #0
   135f8:	str	r3, [r2, #16]
   135fc:	mov	r3, #0
   13600:	str	r3, [r0]
   13604:	str	r3, [r0, #4]
   13608:	str	ip, [r2, #20]
   1360c:	bx	lr
   13610:			; <UNDEFINED> instruction: 0x00029fb8

00013614 <init_node_int@@Base>:
   13614:	ldr	r2, [pc, #40]	; 13644 <init_node_int@@Base+0x30>
   13618:	str	r1, [r0, #8]
   1361c:	ldr	r3, [r2, #24]
   13620:	ldr	ip, [r2, #28]
   13624:	adds	r3, r3, #1
   13628:	adc	ip, ip, #0
   1362c:	str	r3, [r2, #24]
   13630:	mov	r3, #0
   13634:	str	ip, [r2, #28]
   13638:	mov	r2, #1
   1363c:	strd	r2, [r0]
   13640:	bx	lr
   13644:			; <UNDEFINED> instruction: 0x00029fb8

00013648 <init_node_function@@Base>:
   13648:	ldr	ip, [pc, #48]	; 13680 <init_node_function@@Base+0x38>
   1364c:	push	{lr}		; (str lr, [sp, #-4]!)
   13650:	str	r1, [r0, #8]
   13654:	ldr	r3, [ip, #32]
   13658:	str	r2, [r0, #12]
   1365c:	mov	r2, #2
   13660:	ldr	lr, [ip, #36]	; 0x24
   13664:	adds	r3, r3, #1
   13668:	adc	lr, lr, #0
   1366c:	str	r3, [ip, #32]
   13670:	mov	r3, #0
   13674:	strd	r2, [r0]
   13678:	str	lr, [ip, #36]	; 0x24
   1367c:	pop	{pc}		; (ldr pc, [sp], #4)
   13680:			; <UNDEFINED> instruction: 0x00029fb8

00013684 <init_node_return@@Base>:
   13684:	ldr	r2, [pc, #40]	; 136b4 <init_node_return@@Base+0x30>
   13688:	str	r1, [r0, #8]
   1368c:	ldr	r3, [r2, #40]	; 0x28
   13690:	ldr	ip, [r2, #44]	; 0x2c
   13694:	adds	r3, r3, #1
   13698:	adc	ip, ip, #0
   1369c:	str	r3, [r2, #40]	; 0x28
   136a0:	mov	r3, #0
   136a4:	str	ip, [r2, #44]	; 0x2c
   136a8:	mov	r2, #3
   136ac:	strd	r2, [r0]
   136b0:	bx	lr
   136b4:			; <UNDEFINED> instruction: 0x00029fb8

000136b8 <init_node_if@@Base>:
   136b8:	push	{r4, lr}
   136bc:	ldr	lr, [pc, #44]	; 136f0 <init_node_if@@Base+0x38>
   136c0:	str	r1, [r0, #8]
   136c4:	strd	r2, [r0, #12]
   136c8:	mov	r2, #4
   136cc:	mov	r3, #0
   136d0:	strd	r2, [r0]
   136d4:	ldr	ip, [lr, #48]	; 0x30
   136d8:	ldr	r4, [lr, #52]	; 0x34
   136dc:	adds	ip, ip, #1
   136e0:	adc	r4, r4, #0
   136e4:	str	ip, [lr, #48]	; 0x30
   136e8:	str	r4, [lr, #52]	; 0x34
   136ec:	pop	{r4, pc}
   136f0:			; <UNDEFINED> instruction: 0x00029fb8

000136f4 <init_node_boolean_operator@@Base>:
   136f4:	push	{r4, lr}
   136f8:	ldr	lr, [pc, #44]	; 1372c <init_node_boolean_operator@@Base+0x38>
   136fc:	strd	r2, [r0, #8]
   13700:	mov	r2, #5
   13704:	mov	r3, #0
   13708:	strd	r2, [r0]
   1370c:	str	r1, [r0, #16]
   13710:	ldr	ip, [lr, #56]	; 0x38
   13714:	ldr	r4, [lr, #60]	; 0x3c
   13718:	adds	ip, ip, #1
   1371c:	adc	r4, r4, #0
   13720:	str	ip, [lr, #56]	; 0x38
   13724:	str	r4, [lr, #60]	; 0x3c
   13728:	pop	{r4, pc}
   1372c:			; <UNDEFINED> instruction: 0x00029fb8

00013730 <free_node_boolean_operator@@Base>:
   13730:	push	{r4, r5, r6, lr}
   13734:	mov	r5, r0
   13738:	ldr	r0, [r0, #4]
   1373c:	ldr	r4, [pc, #160]	; 137e4 <free_node_boolean_operator@@Base+0xb4>
   13740:	cmp	r0, #0
   13744:	bne	137ac <free_node_boolean_operator@@Base+0x7c>
   13748:	ldr	r3, [r4, #72]	; 0x48
   1374c:	ldr	r2, [r4, #76]	; 0x4c
   13750:	adds	r3, r3, #1
   13754:	adc	r2, r2, #0
   13758:	str	r3, [r4, #72]	; 0x48
   1375c:	str	r2, [r4, #76]	; 0x4c
   13760:	ldr	r0, [r5, #8]
   13764:	bl	137e8 <free_node@@Base>
   13768:	ldr	r3, [r4, #88]	; 0x58
   1376c:	ldr	r2, [r4, #92]	; 0x5c
   13770:	ldr	r0, [r5, #12]
   13774:	adds	r3, r3, #1
   13778:	adc	r2, r2, #0
   1377c:	str	r3, [r4, #88]	; 0x58
   13780:	str	r2, [r4, #92]	; 0x5c
   13784:	bl	137e8 <free_node@@Base>
   13788:	ldr	r3, [r4, #96]	; 0x60
   1378c:	mov	r0, r5
   13790:	ldr	r2, [r4, #100]	; 0x64
   13794:	adds	r3, r3, #1
   13798:	adc	r2, r2, #0
   1379c:	str	r3, [r4, #96]	; 0x60
   137a0:	str	r2, [r4, #100]	; 0x64
   137a4:	pop	{r4, r5, r6, lr}
   137a8:	b	11978 <free@plt>
   137ac:	ldr	r3, [r4, #64]	; 0x40
   137b0:	ldr	r2, [r4, #68]	; 0x44
   137b4:	adds	r3, r3, #1
   137b8:	adc	r2, r2, #0
   137bc:	str	r3, [r4, #64]	; 0x40
   137c0:	str	r2, [r4, #68]	; 0x44
   137c4:	bl	137e8 <free_node@@Base>
   137c8:	ldr	r3, [r4, #80]	; 0x50
   137cc:	ldr	r2, [r4, #84]	; 0x54
   137d0:	adds	r3, r3, #1
   137d4:	adc	r2, r2, #0
   137d8:	str	r3, [r4, #80]	; 0x50
   137dc:	str	r2, [r4, #84]	; 0x54
   137e0:	b	13760 <free_node_boolean_operator@@Base+0x30>
   137e4:			; <UNDEFINED> instruction: 0x00029fb8

000137e8 <free_node@@Base>:
   137e8:	ldr	r3, [r0]
   137ec:	push	{r4, lr}
   137f0:	ldr	r4, [pc, #440]	; 139b0 <free_node@@Base+0x1c8>
   137f4:	cmp	r3, #5
   137f8:	ldrls	pc, [pc, r3, lsl #2]
   137fc:	b	13968 <free_node@@Base+0x180>
   13800:	andeq	r3, r1, r8, lsl r8
   13804:	andeq	r3, r1, r0, asr r8
   13808:	andeq	r3, r1, r8, lsl #17
   1380c:	andeq	r3, r1, r0, asr #17
   13810:	strdeq	r3, [r1], -r8
   13814:	andeq	r3, r1, r0, lsr r9
   13818:	ldr	r3, [r4, #112]	; 0x70
   1381c:	ldr	r2, [r4, #116]	; 0x74
   13820:	adds	r3, r3, #1
   13824:	adc	r2, r2, #0
   13828:	str	r3, [r4, #112]	; 0x70
   1382c:	str	r2, [r4, #116]	; 0x74
   13830:	bl	13c0c <free_node_id@@Base>
   13834:	ldr	r3, [r4, #160]	; 0xa0
   13838:	ldr	r2, [r4, #164]	; 0xa4
   1383c:	adds	r3, r3, #1
   13840:	adc	r2, r2, #0
   13844:	str	r3, [r4, #160]	; 0xa0
   13848:	str	r2, [r4, #164]	; 0xa4
   1384c:	pop	{r4, pc}
   13850:	ldr	r3, [r4, #120]	; 0x78
   13854:	ldr	r2, [r4, #124]	; 0x7c
   13858:	adds	r3, r3, #1
   1385c:	adc	r2, r2, #0
   13860:	str	r3, [r4, #120]	; 0x78
   13864:	str	r2, [r4, #124]	; 0x7c
   13868:	bl	13b94 <free_node_int@@Base>
   1386c:	ldr	r3, [r4, #168]	; 0xa8
   13870:	ldr	r2, [r4, #172]	; 0xac
   13874:	adds	r3, r3, #1
   13878:	adc	r2, r2, #0
   1387c:	str	r3, [r4, #168]	; 0xa8
   13880:	str	r2, [r4, #172]	; 0xac
   13884:	pop	{r4, pc}
   13888:	ldr	r3, [r4, #128]	; 0x80
   1388c:	ldr	r2, [r4, #132]	; 0x84
   13890:	adds	r3, r3, #1
   13894:	adc	r2, r2, #0
   13898:	str	r3, [r4, #128]	; 0x80
   1389c:	str	r2, [r4, #132]	; 0x84
   138a0:	bl	13b14 <free_node_function@@Base>
   138a4:	ldr	r3, [r4, #176]	; 0xb0
   138a8:	ldr	r2, [r4, #180]	; 0xb4
   138ac:	adds	r3, r3, #1
   138b0:	adc	r2, r2, #0
   138b4:	str	r3, [r4, #176]	; 0xb0
   138b8:	str	r2, [r4, #180]	; 0xb4
   138bc:	pop	{r4, pc}
   138c0:	ldr	r3, [r4, #136]	; 0x88
   138c4:	ldr	r2, [r4, #140]	; 0x8c
   138c8:	adds	r3, r3, #1
   138cc:	adc	r2, r2, #0
   138d0:	str	r3, [r4, #136]	; 0x88
   138d4:	str	r2, [r4, #140]	; 0x8c
   138d8:	bl	13a9c <free_node_return@@Base>
   138dc:	ldr	r3, [r4, #184]	; 0xb8
   138e0:	ldr	r2, [r4, #188]	; 0xbc
   138e4:	adds	r3, r3, #1
   138e8:	adc	r2, r2, #0
   138ec:	str	r3, [r4, #184]	; 0xb8
   138f0:	str	r2, [r4, #188]	; 0xbc
   138f4:	pop	{r4, pc}
   138f8:	ldr	r3, [r4, #144]	; 0x90
   138fc:	ldr	r2, [r4, #148]	; 0x94
   13900:	adds	r3, r3, #1
   13904:	adc	r2, r2, #0
   13908:	str	r3, [r4, #144]	; 0x90
   1390c:	str	r2, [r4, #148]	; 0x94
   13910:	bl	139bc <free_node_if@@Base>
   13914:	ldr	r3, [r4, #192]	; 0xc0
   13918:	ldr	r2, [r4, #196]	; 0xc4
   1391c:	adds	r3, r3, #1
   13920:	adc	r2, r2, #0
   13924:	str	r3, [r4, #192]	; 0xc0
   13928:	str	r2, [r4, #196]	; 0xc4
   1392c:	pop	{r4, pc}
   13930:	ldr	r3, [r4, #152]	; 0x98
   13934:	ldr	r2, [r4, #156]	; 0x9c
   13938:	adds	r3, r3, #1
   1393c:	adc	r2, r2, #0
   13940:	str	r3, [r4, #152]	; 0x98
   13944:	str	r2, [r4, #156]	; 0x9c
   13948:	bl	13730 <free_node_boolean_operator@@Base>
   1394c:	ldr	r3, [r4, #200]	; 0xc8
   13950:	ldr	r2, [r4, #204]	; 0xcc
   13954:	adds	r3, r3, #1
   13958:	adc	r2, r2, #0
   1395c:	str	r3, [r4, #200]	; 0xc8
   13960:	str	r2, [r4, #204]	; 0xcc
   13964:	pop	{r4, pc}
   13968:	ldr	r3, [r4, #104]	; 0x68
   1396c:	ldr	r2, [r4, #108]	; 0x6c
   13970:	ldr	r0, [pc, #60]	; 139b4 <free_node@@Base+0x1cc>
   13974:	adds	r3, r3, #1
   13978:	str	r3, [r4, #104]	; 0x68
   1397c:	adc	r2, r2, #0
   13980:	ldr	r3, [pc, #48]	; 139b8 <free_node@@Base+0x1d0>
   13984:	str	r2, [r4, #108]	; 0x6c
   13988:	ldr	r1, [r3]
   1398c:	bl	11ad4 <fputs@plt>
   13990:	ldr	r3, [r4, #208]	; 0xd0
   13994:	mov	r0, #1
   13998:	ldr	r2, [r4, #212]	; 0xd4
   1399c:	adds	r3, r3, #1
   139a0:	adc	r2, r2, #0
   139a4:	str	r3, [r4, #208]	; 0xd0
   139a8:	str	r2, [r4, #212]	; 0xd4
   139ac:	bl	11a08 <exit@plt>
   139b0:			; <UNDEFINED> instruction: 0x00029fb8
   139b4:	strdeq	r7, [r1], -r8
   139b8:	andeq	r9, r2, r0, lsr #21

000139bc <free_node_if@@Base>:
   139bc:	push	{r4, r5, r6, lr}
   139c0:	mov	r5, r0
   139c4:	ldr	r0, [r0, #4]
   139c8:	ldr	r4, [pc, #196]	; 13a94 <free_node_if@@Base+0xd8>
   139cc:	cmp	r0, #0
   139d0:	bne	13a5c <free_node_if@@Base+0xa0>
   139d4:	ldr	r3, [r4, #224]	; 0xe0
   139d8:	ldr	r2, [r4, #228]	; 0xe4
   139dc:	adds	r3, r3, #1
   139e0:	adc	r2, r2, #0
   139e4:	str	r3, [r4, #224]	; 0xe0
   139e8:	str	r2, [r4, #228]	; 0xe4
   139ec:	ldr	r0, [r5, #8]
   139f0:	bl	137e8 <free_node@@Base>
   139f4:	ldr	r3, [r4, #240]	; 0xf0
   139f8:	ldr	r2, [r4, #244]	; 0xf4
   139fc:	ldr	r0, [r5, #12]
   13a00:	adds	r3, r3, #1
   13a04:	adc	r2, r2, #0
   13a08:	str	r3, [r4, #240]	; 0xf0
   13a0c:	str	r2, [r4, #244]	; 0xf4
   13a10:	bl	137e8 <free_node@@Base>
   13a14:	ldr	r3, [r4, #248]	; 0xf8
   13a18:	ldr	r2, [r4, #252]	; 0xfc
   13a1c:	ldr	r0, [r5, #16]
   13a20:	adds	r3, r3, #1
   13a24:	adc	r2, r2, #0
   13a28:	str	r3, [r4, #248]	; 0xf8
   13a2c:	str	r2, [r4, #252]	; 0xfc
   13a30:	bl	137e8 <free_node@@Base>
   13a34:	ldr	r2, [pc, #92]	; 13a98 <free_node_if@@Base+0xdc>
   13a38:	mov	r0, r5
   13a3c:	pop	{r4, r5, r6, lr}
   13a40:	ldr	r3, [r2]
   13a44:	ldr	r1, [r2, #4]
   13a48:	adds	r3, r3, #1
   13a4c:	adc	r1, r1, #0
   13a50:	str	r3, [r2]
   13a54:	str	r1, [r2, #4]
   13a58:	b	11978 <free@plt>
   13a5c:	ldr	r3, [r4, #216]	; 0xd8
   13a60:	ldr	r2, [r4, #220]	; 0xdc
   13a64:	adds	r3, r3, #1
   13a68:	adc	r2, r2, #0
   13a6c:	str	r3, [r4, #216]	; 0xd8
   13a70:	str	r2, [r4, #220]	; 0xdc
   13a74:	bl	137e8 <free_node@@Base>
   13a78:	ldr	r3, [r4, #232]	; 0xe8
   13a7c:	ldr	r2, [r4, #236]	; 0xec
   13a80:	adds	r3, r3, #1
   13a84:	adc	r2, r2, #0
   13a88:	str	r3, [r4, #232]	; 0xe8
   13a8c:	str	r2, [r4, #236]	; 0xec
   13a90:	b	139ec <free_node_if@@Base+0x30>
   13a94:			; <UNDEFINED> instruction: 0x00029fb8
   13a98:	strheq	sl, [r2], -r8

00013a9c <free_node_return@@Base>:
   13a9c:	push	{r4, r5, r6, lr}
   13aa0:	mov	r5, r0
   13aa4:	ldr	r0, [r0, #4]
   13aa8:	ldr	r4, [pc, #96]	; 13b10 <free_node_return@@Base+0x74>
   13aac:	cmp	r0, #0
   13ab0:	bne	13ad8 <free_node_return@@Base+0x3c>
   13ab4:	ldr	r3, [r4]
   13ab8:	ldr	r2, [r4, #4]
   13abc:	adds	r3, r3, #1
   13ac0:	adc	r2, r2, #0
   13ac4:	str	r3, [r4]
   13ac8:	str	r2, [r4, #4]
   13acc:	mov	r0, r5
   13ad0:	pop	{r4, r5, r6, lr}
   13ad4:	b	11978 <free@plt>
   13ad8:	ldr	r3, [r4, #-8]
   13adc:	ldr	r2, [r4, #-4]
   13ae0:	adds	r3, r3, #1
   13ae4:	adc	r2, r2, #0
   13ae8:	str	r3, [r4, #-8]
   13aec:	str	r2, [r4, #-4]
   13af0:	bl	137e8 <free_node@@Base>
   13af4:	ldr	r3, [r4, #8]
   13af8:	ldr	r2, [r4, #12]
   13afc:	adds	r3, r3, #1
   13b00:	adc	r2, r2, #0
   13b04:	str	r3, [r4, #8]
   13b08:	str	r2, [r4, #12]
   13b0c:	b	13acc <free_node_return@@Base+0x30>
   13b10:	andeq	sl, r2, r8, asr #1

00013b14 <free_node_function@@Base>:
   13b14:	push	{r4, r5, r6, lr}
   13b18:	mov	r5, r0
   13b1c:	ldr	r0, [r0, #4]
   13b20:	ldr	r4, [pc, #104]	; 13b90 <free_node_function@@Base+0x7c>
   13b24:	cmp	r0, #0
   13b28:	bne	13b58 <free_node_function@@Base+0x44>
   13b2c:	ldr	r3, [r4, #8]
   13b30:	ldr	r2, [r4, #12]
   13b34:	adds	r3, r3, #1
   13b38:	adc	r2, r2, #0
   13b3c:	str	r3, [r4, #8]
   13b40:	str	r2, [r4, #12]
   13b44:	ldr	r0, [r5, #8]
   13b48:	bl	11978 <free@plt>
   13b4c:	mov	r0, r5
   13b50:	pop	{r4, r5, r6, lr}
   13b54:	b	11978 <free@plt>
   13b58:	ldr	r3, [r4]
   13b5c:	ldr	r2, [r4, #4]
   13b60:	adds	r3, r3, #1
   13b64:	adc	r2, r2, #0
   13b68:	str	r3, [r4]
   13b6c:	str	r2, [r4, #4]
   13b70:	bl	137e8 <free_node@@Base>
   13b74:	ldr	r3, [r4, #16]
   13b78:	ldr	r2, [r4, #20]
   13b7c:	adds	r3, r3, #1
   13b80:	adc	r2, r2, #0
   13b84:	str	r3, [r4, #16]
   13b88:	str	r2, [r4, #20]
   13b8c:	b	13b44 <free_node_function@@Base+0x30>
   13b90:	ldrdeq	sl, [r2], -r8

00013b94 <free_node_int@@Base>:
   13b94:	push	{r4, r5, r6, lr}
   13b98:	mov	r5, r0
   13b9c:	ldr	r0, [r0, #4]
   13ba0:	ldr	r4, [pc, #96]	; 13c08 <free_node_int@@Base+0x74>
   13ba4:	cmp	r0, #0
   13ba8:	bne	13bd0 <free_node_int@@Base+0x3c>
   13bac:	ldr	r3, [r4]
   13bb0:	ldr	r2, [r4, #4]
   13bb4:	adds	r3, r3, #1
   13bb8:	adc	r2, r2, #0
   13bbc:	str	r3, [r4]
   13bc0:	str	r2, [r4, #4]
   13bc4:	mov	r0, r5
   13bc8:	pop	{r4, r5, r6, lr}
   13bcc:	b	11978 <free@plt>
   13bd0:	ldr	r3, [r4, #-8]
   13bd4:	ldr	r2, [r4, #-4]
   13bd8:	adds	r3, r3, #1
   13bdc:	adc	r2, r2, #0
   13be0:	str	r3, [r4, #-8]
   13be4:	str	r2, [r4, #-4]
   13be8:	bl	137e8 <free_node@@Base>
   13bec:	ldr	r3, [r4, #8]
   13bf0:	ldr	r2, [r4, #12]
   13bf4:	adds	r3, r3, #1
   13bf8:	adc	r2, r2, #0
   13bfc:	str	r3, [r4, #8]
   13c00:	str	r2, [r4, #12]
   13c04:	b	13bc4 <free_node_int@@Base+0x30>
   13c08:	strdeq	sl, [r2], -r8

00013c0c <free_node_id@@Base>:
   13c0c:	push	{r4, r5, r6, lr}
   13c10:	mov	r5, r0
   13c14:	ldr	r0, [r0, #4]
   13c18:	ldr	r4, [pc, #96]	; 13c80 <free_node_id@@Base+0x74>
   13c1c:	cmp	r0, #0
   13c20:	bne	13c48 <free_node_id@@Base+0x3c>
   13c24:	ldr	r3, [r4, #8]
   13c28:	ldr	r2, [r4, #12]
   13c2c:	adds	r3, r3, #1
   13c30:	adc	r2, r2, #0
   13c34:	str	r3, [r4, #8]
   13c38:	str	r2, [r4, #12]
   13c3c:	mov	r0, r5
   13c40:	pop	{r4, r5, r6, lr}
   13c44:	b	11978 <free@plt>
   13c48:	ldr	r3, [r4]
   13c4c:	ldr	r2, [r4, #4]
   13c50:	adds	r3, r3, #1
   13c54:	adc	r2, r2, #0
   13c58:	str	r3, [r4]
   13c5c:	str	r2, [r4, #4]
   13c60:	bl	137e8 <free_node@@Base>
   13c64:	ldr	r3, [r4, #16]
   13c68:	ldr	r2, [r4, #20]
   13c6c:	adds	r3, r3, #1
   13c70:	adc	r2, r2, #0
   13c74:	str	r3, [r4, #16]
   13c78:	str	r2, [r4, #20]
   13c7c:	b	13c3c <free_node_id@@Base+0x30>
   13c80:	andeq	sl, r2, r8, lsl #2

00013c84 <get_boolean_op_value@@Base>:
   13c84:	push	{r4, r5, r6, lr}
   13c88:	mov	r1, #2
   13c8c:	ldr	r6, [r0, #4]
   13c90:	ldr	r4, [pc, #620]	; 13f04 <get_boolean_op_value@@Base+0x280>
   13c94:	mov	r0, r6
   13c98:	bl	11a80 <strnlen@plt>
   13c9c:	cmp	r0, #2
   13ca0:	bne	13e20 <get_boolean_op_value@@Base+0x19c>
   13ca4:	mov	r2, r0
   13ca8:	mov	r5, r0
   13cac:	ldr	r1, [pc, #596]	; 13f08 <get_boolean_op_value@@Base+0x284>
   13cb0:	mov	r0, r6
   13cb4:	bl	11ae0 <strncmp@plt>
   13cb8:	cmp	r0, #0
   13cbc:	beq	13ee4 <get_boolean_op_value@@Base+0x260>
   13cc0:	mov	r2, r5
   13cc4:	ldr	r1, [pc, #576]	; 13f0c <get_boolean_op_value@@Base+0x288>
   13cc8:	mov	r0, r6
   13ccc:	bl	11ae0 <strncmp@plt>
   13cd0:	cmp	r0, #0
   13cd4:	bne	13cfc <get_boolean_op_value@@Base+0x78>
   13cd8:	ldr	r3, [r4]
   13cdc:	mov	r5, #1
   13ce0:	ldr	r2, [r4, #4]
   13ce4:	adds	r3, r3, #1
   13ce8:	adc	r2, r2, #0
   13cec:	str	r3, [r4]
   13cf0:	str	r2, [r4, #4]
   13cf4:	mov	r0, r5
   13cf8:	pop	{r4, r5, r6, pc}
   13cfc:	mov	r2, r5
   13d00:	ldr	r1, [pc, #520]	; 13f10 <get_boolean_op_value@@Base+0x28c>
   13d04:	mov	r0, r6
   13d08:	bl	11ae0 <strncmp@plt>
   13d0c:	cmp	r0, #0
   13d10:	bne	13d30 <get_boolean_op_value@@Base+0xac>
   13d14:	ldr	r3, [r4, #8]
   13d18:	ldr	r2, [r4, #12]
   13d1c:	adds	r3, r3, #1
   13d20:	adc	r2, r2, #0
   13d24:	str	r3, [r4, #8]
   13d28:	str	r2, [r4, #12]
   13d2c:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13d30:	mov	r2, r5
   13d34:	ldr	r1, [pc, #472]	; 13f14 <get_boolean_op_value@@Base+0x290>
   13d38:	mov	r0, r6
   13d3c:	bl	11ae0 <strncmp@plt>
   13d40:	cmp	r0, #0
   13d44:	bne	13d68 <get_boolean_op_value@@Base+0xe4>
   13d48:	ldr	r3, [r4, #16]
   13d4c:	mov	r5, #3
   13d50:	ldr	r2, [r4, #20]
   13d54:	adds	r3, r3, #1
   13d58:	adc	r2, r2, #0
   13d5c:	str	r3, [r4, #16]
   13d60:	str	r2, [r4, #20]
   13d64:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13d68:	mov	r2, r5
   13d6c:	ldr	r1, [pc, #420]	; 13f18 <get_boolean_op_value@@Base+0x294>
   13d70:	mov	r0, r6
   13d74:	bl	11ae0 <strncmp@plt>
   13d78:	cmp	r0, #0
   13d7c:	bne	13da0 <get_boolean_op_value@@Base+0x11c>
   13d80:	ldr	r3, [r4, #24]
   13d84:	mov	r5, #4
   13d88:	ldr	r2, [r4, #28]
   13d8c:	adds	r3, r3, #1
   13d90:	adc	r2, r2, #0
   13d94:	str	r3, [r4, #24]
   13d98:	str	r2, [r4, #28]
   13d9c:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13da0:	ldr	r3, [r4, #32]
   13da4:	mov	r0, r6
   13da8:	ldr	r2, [r4, #36]	; 0x24
   13dac:	ldr	r1, [pc, #360]	; 13f1c <get_boolean_op_value@@Base+0x298>
   13db0:	adds	r3, r3, #1
   13db4:	adc	r2, r2, #0
   13db8:	str	r3, [r4, #32]
   13dbc:	str	r2, [r4, #36]	; 0x24
   13dc0:	mov	r2, r5
   13dc4:	bl	11ae0 <strncmp@plt>
   13dc8:	cmp	r0, #0
   13dcc:	moveq	r5, #5
   13dd0:	beq	13cf4 <get_boolean_op_value@@Base+0x70>
   13dd4:	ldr	r3, [r4, #40]	; 0x28
   13dd8:	ldr	r2, [r4, #44]	; 0x2c
   13ddc:	ldr	r1, [pc, #316]	; 13f20 <get_boolean_op_value@@Base+0x29c>
   13de0:	adds	r3, r3, #1
   13de4:	str	r3, [r4, #40]	; 0x28
   13de8:	adc	r2, r2, #0
   13dec:	ldr	r3, [pc, #304]	; 13f24 <get_boolean_op_value@@Base+0x2a0>
   13df0:	str	r2, [r4, #44]	; 0x2c
   13df4:	mov	r2, r6
   13df8:	ldr	r0, [r3]
   13dfc:	bl	11a2c <fprintf@plt>
   13e00:	ldr	r3, [r4, #48]	; 0x30
   13e04:	ldr	r2, [r4, #52]	; 0x34
   13e08:	adds	r3, r3, #1
   13e0c:	adc	r2, r2, #0
   13e10:	str	r3, [r4, #48]	; 0x30
   13e14:	str	r2, [r4, #52]	; 0x34
   13e18:	mov	r0, #1
   13e1c:	bl	11a08 <exit@plt>
   13e20:	ldrb	r3, [r6]
   13e24:	cmp	r3, #60	; 0x3c
   13e28:	beq	13e5c <get_boolean_op_value@@Base+0x1d8>
   13e2c:	cmp	r3, #62	; 0x3e
   13e30:	beq	13e7c <get_boolean_op_value@@Base+0x1f8>
   13e34:	cmp	r3, #33	; 0x21
   13e38:	bne	13e9c <get_boolean_op_value@@Base+0x218>
   13e3c:	ldr	r3, [r4, #64]	; 0x40
   13e40:	mov	r5, #8
   13e44:	ldr	r2, [r4, #68]	; 0x44
   13e48:	adds	r3, r3, #1
   13e4c:	adc	r2, r2, #0
   13e50:	str	r3, [r4, #64]	; 0x40
   13e54:	str	r2, [r4, #68]	; 0x44
   13e58:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13e5c:	ldr	r3, [r4, #72]	; 0x48
   13e60:	mov	r5, #6
   13e64:	ldr	r2, [r4, #76]	; 0x4c
   13e68:	adds	r3, r3, #1
   13e6c:	adc	r2, r2, #0
   13e70:	str	r3, [r4, #72]	; 0x48
   13e74:	str	r2, [r4, #76]	; 0x4c
   13e78:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13e7c:	ldr	r3, [r4, #80]	; 0x50
   13e80:	mov	r5, #7
   13e84:	ldr	r2, [r4, #84]	; 0x54
   13e88:	adds	r3, r3, #1
   13e8c:	adc	r2, r2, #0
   13e90:	str	r3, [r4, #80]	; 0x50
   13e94:	str	r2, [r4, #84]	; 0x54
   13e98:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13e9c:	ldr	r3, [r4, #56]	; 0x38
   13ea0:	ldr	r2, [r4, #60]	; 0x3c
   13ea4:	ldr	r1, [pc, #116]	; 13f20 <get_boolean_op_value@@Base+0x29c>
   13ea8:	adds	r3, r3, #1
   13eac:	str	r3, [r4, #56]	; 0x38
   13eb0:	adc	r2, r2, #0
   13eb4:	ldr	r3, [pc, #104]	; 13f24 <get_boolean_op_value@@Base+0x2a0>
   13eb8:	str	r2, [r4, #60]	; 0x3c
   13ebc:	mov	r2, r6
   13ec0:	ldr	r0, [r3]
   13ec4:	bl	11a2c <fprintf@plt>
   13ec8:	ldr	r3, [r4, #88]	; 0x58
   13ecc:	ldr	r2, [r4, #92]	; 0x5c
   13ed0:	adds	r3, r3, #1
   13ed4:	adc	r2, r2, #0
   13ed8:	str	r3, [r4, #88]	; 0x58
   13edc:	str	r2, [r4, #92]	; 0x5c
   13ee0:	b	13e18 <get_boolean_op_value@@Base+0x194>
   13ee4:	ldr	r3, [r4, #-8]
   13ee8:	mov	r5, r0
   13eec:	ldr	r2, [r4, #-4]
   13ef0:	adds	r3, r3, #1
   13ef4:	adc	r2, r2, #0
   13ef8:	str	r3, [r4, #-8]
   13efc:	str	r2, [r4, #-4]
   13f00:	b	13cf4 <get_boolean_op_value@@Base+0x70>
   13f04:	andeq	sl, r2, r8, lsr #2
   13f08:	andeq	r8, r1, r8, lsl r0
   13f0c:	andeq	r8, r1, fp, lsl r0
   13f10:	andeq	r8, r1, lr, lsl r0
   13f14:	andeq	r8, r1, r1, lsr #32
   13f18:	andeq	r8, r1, r4, lsr #32
   13f1c:	andeq	r8, r1, r7, lsr #32
   13f20:	andeq	r8, r1, sl, lsr #32
   13f24:	andeq	r9, r2, r0, lsr #21

00013f28 <init_grammar@@Base>:
   13f28:	ldr	r2, [pc, #20]	; 13f44 <init_grammar@@Base+0x1c>
   13f2c:	str	r1, [r0]
   13f30:	ldm	r2, {r3, ip}
   13f34:	adds	r3, r3, #1
   13f38:	adc	ip, ip, #0
   13f3c:	stm	r2, {r3, ip}
   13f40:	bx	lr
   13f44:	andeq	sl, r2, r8, lsl #3

00013f48 <destroy_grammar@@Base>:
   13f48:	ldr	r2, [pc, #24]	; 13f68 <destroy_grammar@@Base+0x20>
   13f4c:	ldr	r3, [r2, #8]
   13f50:	ldr	r1, [r2, #12]
   13f54:	adds	r3, r3, #1
   13f58:	adc	r1, r1, #0
   13f5c:	str	r3, [r2, #8]
   13f60:	str	r1, [r2, #12]
   13f64:	bx	lr
   13f68:	andeq	sl, r2, r8, lsl #3

00013f6c <read_return_expression@@Base>:
   13f6c:	push	{r4, r5, r6, r7, r8, lr}
   13f70:	mov	r5, r0
   13f74:	ldr	r4, [pc, #328]	; 140c4 <read_return_expression@@Base+0x158>
   13f78:	ldr	r0, [r0]
   13f7c:	ldr	r3, [r4, #16]
   13f80:	ldr	r2, [r4, #20]
   13f84:	adds	r3, r3, #1
   13f88:	adc	r2, r2, #0
   13f8c:	str	r3, [r4, #16]
   13f90:	str	r2, [r4, #20]
   13f94:	bl	127bc <next@@Base>
   13f98:	ldr	r3, [r0]
   13f9c:	cmp	r3, #1
   13fa0:	beq	13fc8 <read_return_expression@@Base+0x5c>
   13fa4:	ldr	r3, [r4, #24]
   13fa8:	ldr	r2, [r4, #28]
   13fac:	adds	r3, r3, #1
   13fb0:	adc	r2, r2, #0
   13fb4:	str	r3, [r4, #24]
   13fb8:	str	r2, [r4, #28]
   13fbc:	mov	r6, #0
   13fc0:	mov	r0, r6
   13fc4:	pop	{r4, r5, r6, r7, r8, pc}
   13fc8:	ldr	r3, [r4, #32]
   13fcc:	mov	r6, r0
   13fd0:	mov	r0, #12
   13fd4:	ldr	r2, [r4, #36]	; 0x24
   13fd8:	adds	r3, r3, #1
   13fdc:	adc	r2, r2, #0
   13fe0:	str	r3, [r4, #32]
   13fe4:	str	r2, [r4, #36]	; 0x24
   13fe8:	bl	119d8 <malloc@plt>
   13fec:	ldr	r1, [r6, #4]
   13ff0:	mov	r7, r0
   13ff4:	bl	13614 <init_node_int@@Base>
   13ff8:	ldr	r3, [r4, #40]	; 0x28
   13ffc:	mov	r0, r6
   14000:	ldr	r2, [r4, #44]	; 0x2c
   14004:	adds	r3, r3, #1
   14008:	adc	r2, r2, #0
   1400c:	str	r3, [r4, #40]	; 0x28
   14010:	str	r2, [r4, #44]	; 0x2c
   14014:	bl	123e4 <free_token_int_value@@Base>
   14018:	ldr	r3, [r4, #48]	; 0x30
   1401c:	mov	r0, #12
   14020:	ldr	r2, [r4, #52]	; 0x34
   14024:	adds	r3, r3, #1
   14028:	adc	r2, r2, #0
   1402c:	str	r3, [r4, #48]	; 0x30
   14030:	str	r2, [r4, #52]	; 0x34
   14034:	bl	119d8 <malloc@plt>
   14038:	mov	r1, r7
   1403c:	mov	r6, r0
   14040:	bl	13684 <init_node_return@@Base>
   14044:	ldr	r3, [r4, #56]	; 0x38
   14048:	ldr	r2, [r4, #60]	; 0x3c
   1404c:	ldr	r0, [r5]
   14050:	adds	r3, r3, #1
   14054:	adc	r2, r2, #0
   14058:	str	r3, [r4, #56]	; 0x38
   1405c:	str	r2, [r4, #60]	; 0x3c
   14060:	bl	127bc <next@@Base>
   14064:	ldr	r3, [r0]
   14068:	cmp	r3, #8
   1406c:	beq	1408c <read_return_expression@@Base+0x120>
   14070:	ldr	r3, [r4, #64]	; 0x40
   14074:	ldr	r2, [r4, #68]	; 0x44
   14078:	adds	r3, r3, #1
   1407c:	adc	r2, r2, #0
   14080:	str	r3, [r4, #64]	; 0x40
   14084:	str	r2, [r4, #68]	; 0x44
   14088:	b	13fbc <read_return_expression@@Base+0x50>
   1408c:	ldr	r3, [r4, #72]	; 0x48
   14090:	ldr	r2, [r4, #76]	; 0x4c
   14094:	adds	r3, r3, #1
   14098:	adc	r2, r2, #0
   1409c:	str	r3, [r4, #72]	; 0x48
   140a0:	str	r2, [r4, #76]	; 0x4c
   140a4:	bl	124e0 <free_token_semicolon@@Base>
   140a8:	ldr	r3, [r4, #80]	; 0x50
   140ac:	ldr	r2, [r4, #84]	; 0x54
   140b0:	adds	r3, r3, #1
   140b4:	adc	r2, r2, #0
   140b8:	str	r3, [r4, #80]	; 0x50
   140bc:	str	r2, [r4, #84]	; 0x54
   140c0:	b	13fc0 <read_return_expression@@Base+0x54>
   140c4:	andeq	sl, r2, r8, lsl #3

000140c8 <read_boolean_unary_expression@@Base>:
   140c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140cc:	mov	r7, r0
   140d0:	mov	r0, #20
   140d4:	ldr	r4, [pc, #440]	; 14294 <read_boolean_unary_expression@@Base+0x1cc>
   140d8:	ldr	r3, [r4, #88]	; 0x58
   140dc:	ldr	r2, [r4, #92]	; 0x5c
   140e0:	adds	r3, r3, #1
   140e4:	adc	r2, r2, #0
   140e8:	str	r3, [r4, #88]	; 0x58
   140ec:	str	r2, [r4, #92]	; 0x5c
   140f0:	bl	119d8 <malloc@plt>
   140f4:	mov	r5, r0
   140f8:	ldr	r0, [r7]
   140fc:	bl	127bc <next@@Base>
   14100:	ldr	r8, [r0]
   14104:	cmp	r8, #12
   14108:	beq	14150 <read_boolean_unary_expression@@Base+0x88>
   1410c:	ldr	r3, [r4, #96]	; 0x60
   14110:	mov	r0, r5
   14114:	ldr	r2, [r4, #100]	; 0x64
   14118:	adds	r3, r3, #1
   1411c:	adc	r2, r2, #0
   14120:	str	r3, [r4, #96]	; 0x60
   14124:	str	r2, [r4, #100]	; 0x64
   14128:	bl	13730 <free_node_boolean_operator@@Base>
   1412c:	ldr	r3, [r4, #112]	; 0x70
   14130:	ldr	r2, [r4, #116]	; 0x74
   14134:	adds	r3, r3, #1
   14138:	adc	r2, r2, #0
   1413c:	str	r3, [r4, #112]	; 0x70
   14140:	str	r2, [r4, #116]	; 0x74
   14144:	mov	r5, #0
   14148:	mov	r0, r5
   1414c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14150:	ldr	r3, [r4, #104]	; 0x68
   14154:	mov	r9, r0
   14158:	ldr	r2, [r4, #108]	; 0x6c
   1415c:	adds	r3, r3, #1
   14160:	adc	r2, r2, #0
   14164:	str	r3, [r4, #104]	; 0x68
   14168:	str	r2, [r4, #108]	; 0x6c
   1416c:	bl	13c84 <get_boolean_op_value@@Base>
   14170:	ldr	r3, [r4, #120]	; 0x78
   14174:	mov	r6, r0
   14178:	mov	r0, r9
   1417c:	ldr	r2, [r4, #124]	; 0x7c
   14180:	adds	r3, r3, #1
   14184:	adc	r2, r2, #0
   14188:	str	r3, [r4, #120]	; 0x78
   1418c:	str	r2, [r4, #124]	; 0x7c
   14190:	bl	12570 <free_token_boolean_op@@Base>
   14194:	ldr	r3, [r4, #128]	; 0x80
   14198:	ldr	r2, [r4, #132]	; 0x84
   1419c:	ldr	r0, [r7]
   141a0:	adds	r3, r3, #1
   141a4:	adc	r2, r2, #0
   141a8:	str	r3, [r4, #128]	; 0x80
   141ac:	str	r2, [r4, #132]	; 0x84
   141b0:	bl	127bc <next@@Base>
   141b4:	ldr	r3, [r0]
   141b8:	mov	r9, r0
   141bc:	cmp	r3, #1
   141c0:	beq	14200 <read_boolean_unary_expression@@Base+0x138>
   141c4:	ldr	r3, [r4, #136]	; 0x88
   141c8:	mov	r0, r5
   141cc:	ldr	r2, [r4, #140]	; 0x8c
   141d0:	adds	r3, r3, #1
   141d4:	adc	r2, r2, #0
   141d8:	str	r3, [r4, #136]	; 0x88
   141dc:	str	r2, [r4, #140]	; 0x8c
   141e0:	bl	13730 <free_node_boolean_operator@@Base>
   141e4:	ldr	r3, [r4, #152]	; 0x98
   141e8:	ldr	r2, [r4, #156]	; 0x9c
   141ec:	adds	r3, r3, #1
   141f0:	adc	r2, r2, #0
   141f4:	str	r3, [r4, #152]	; 0x98
   141f8:	str	r2, [r4, #156]	; 0x9c
   141fc:	b	14144 <read_boolean_unary_expression@@Base+0x7c>
   14200:	ldr	r3, [r4, #144]	; 0x90
   14204:	mov	r0, r8
   14208:	ldr	r2, [r4, #148]	; 0x94
   1420c:	adds	r3, r3, #1
   14210:	adc	r2, r2, #0
   14214:	str	r3, [r4, #144]	; 0x90
   14218:	str	r2, [r4, #148]	; 0x94
   1421c:	bl	119d8 <malloc@plt>
   14220:	ldr	r1, [r9, #4]
   14224:	mov	r7, r0
   14228:	bl	13614 <init_node_int@@Base>
   1422c:	ldr	r3, [r4, #160]	; 0xa0
   14230:	mov	r0, r9
   14234:	ldr	r2, [r4, #164]	; 0xa4
   14238:	adds	r3, r3, #1
   1423c:	adc	r2, r2, #0
   14240:	str	r3, [r4, #160]	; 0xa0
   14244:	str	r2, [r4, #164]	; 0xa4
   14248:	bl	123e4 <free_token_int_value@@Base>
   1424c:	ldr	r3, [r4, #168]	; 0xa8
   14250:	mov	r2, r7
   14254:	mov	r0, r5
   14258:	ldr	r1, [r4, #172]	; 0xac
   1425c:	adds	r3, r3, #1
   14260:	adc	r1, r1, #0
   14264:	str	r3, [r4, #168]	; 0xa8
   14268:	mov	r3, #0
   1426c:	str	r1, [r4, #172]	; 0xac
   14270:	mov	r1, r6
   14274:	bl	136f4 <init_node_boolean_operator@@Base>
   14278:	ldr	r3, [r4, #176]	; 0xb0
   1427c:	ldr	r2, [r4, #180]	; 0xb4
   14280:	adds	r3, r3, #1
   14284:	adc	r2, r2, #0
   14288:	str	r3, [r4, #176]	; 0xb0
   1428c:	str	r2, [r4, #180]	; 0xb4
   14290:	b	14148 <read_boolean_unary_expression@@Base+0x80>
   14294:	andeq	sl, r2, r8, lsl #3

00014298 <read_boolean_binary_expression@@Base>:
   14298:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1429c:	mov	r9, r0
   142a0:	ldr	r4, [pc, #712]	; 14570 <read_boolean_binary_expression@@Base+0x2d8>
   142a4:	ldr	r0, [r0]
   142a8:	ldr	r3, [r4, #184]	; 0xb8
   142ac:	ldr	r2, [r4, #188]	; 0xbc
   142b0:	adds	r3, r3, #1
   142b4:	adc	r2, r2, #0
   142b8:	str	r3, [r4, #184]	; 0xb8
   142bc:	str	r2, [r4, #188]	; 0xbc
   142c0:	bl	127bc <next@@Base>
   142c4:	ldr	r1, [r0]
   142c8:	mov	r5, r0
   142cc:	cmp	r1, #1
   142d0:	beq	1435c <read_boolean_binary_expression@@Base+0xc4>
   142d4:	ldr	r3, [r4, #192]	; 0xc0
   142d8:	ldr	r2, [r4, #196]	; 0xc4
   142dc:	adds	r3, r3, #1
   142e0:	adc	r2, r2, #0
   142e4:	cmp	r1, #12
   142e8:	str	r3, [r4, #192]	; 0xc0
   142ec:	str	r2, [r4, #196]	; 0xc4
   142f0:	bne	14414 <read_boolean_binary_expression@@Base+0x17c>
   142f4:	ldr	r3, [r4, #208]	; 0xd0
   142f8:	mov	r1, r0
   142fc:	ldr	r2, [r4, #212]	; 0xd4
   14300:	ldr	r0, [r9]
   14304:	adds	r3, r3, #1
   14308:	adc	r2, r2, #0
   1430c:	str	r3, [r4, #208]	; 0xd0
   14310:	str	r2, [r4, #212]	; 0xd4
   14314:	bl	1266c <push_back@@Base>
   14318:	ldr	r3, [r4, #216]	; 0xd8
   1431c:	mov	r0, r9
   14320:	ldr	r2, [r4, #220]	; 0xdc
   14324:	adds	r3, r3, #1
   14328:	adc	r2, r2, #0
   1432c:	str	r3, [r4, #216]	; 0xd8
   14330:	str	r2, [r4, #220]	; 0xdc
   14334:	bl	140c8 <read_boolean_unary_expression@@Base>
   14338:	ldr	r3, [r4, #224]	; 0xe0
   1433c:	mov	r5, r0
   14340:	ldr	r2, [r4, #228]	; 0xe4
   14344:	adds	r3, r3, #1
   14348:	adc	r2, r2, #0
   1434c:	str	r3, [r4, #224]	; 0xe0
   14350:	str	r2, [r4, #228]	; 0xe4
   14354:	mov	r0, r5
   14358:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1435c:	ldr	r3, [r4, #200]	; 0xc8
   14360:	mov	r0, #12
   14364:	ldr	r2, [r4, #204]	; 0xcc
   14368:	adds	r3, r3, #1
   1436c:	adc	r2, r2, #0
   14370:	str	r3, [r4, #200]	; 0xc8
   14374:	str	r2, [r4, #204]	; 0xcc
   14378:	bl	119d8 <malloc@plt>
   1437c:	ldr	r1, [r5, #4]
   14380:	mov	r7, r0
   14384:	bl	13614 <init_node_int@@Base>
   14388:	ldr	r3, [r4, #232]	; 0xe8
   1438c:	mov	r0, r5
   14390:	add	r5, r4, #272	; 0x110
   14394:	ldr	r2, [r4, #236]	; 0xec
   14398:	adds	r3, r3, #1
   1439c:	adc	r2, r2, #0
   143a0:	str	r3, [r4, #232]	; 0xe8
   143a4:	str	r2, [r4, #236]	; 0xec
   143a8:	bl	123e4 <free_token_int_value@@Base>
   143ac:	ldr	r3, [r4, #240]	; 0xf0
   143b0:	ldr	r2, [r4, #244]	; 0xf4
   143b4:	ldr	r0, [r9]
   143b8:	adds	r3, r3, #1
   143bc:	adc	r2, r2, #0
   143c0:	str	r3, [r4, #240]	; 0xf0
   143c4:	str	r2, [r4, #244]	; 0xf4
   143c8:	bl	127bc <next@@Base>
   143cc:	ldr	sl, [r0]
   143d0:	mov	r6, r0
   143d4:	cmp	sl, #12
   143d8:	beq	1441c <read_boolean_binary_expression@@Base+0x184>
   143dc:	ldr	r3, [r4, #248]	; 0xf8
   143e0:	mov	r0, r7
   143e4:	ldr	r2, [r4, #252]	; 0xfc
   143e8:	adds	r3, r3, #1
   143ec:	adc	r2, r2, #0
   143f0:	str	r3, [r4, #248]	; 0xf8
   143f4:	str	r2, [r4, #252]	; 0xfc
   143f8:	bl	137e8 <free_node@@Base>
   143fc:	ldr	r3, [r5, #-8]
   14400:	ldr	r2, [r5, #-4]
   14404:	adds	r3, r3, #1
   14408:	adc	r2, r2, #0
   1440c:	str	r3, [r5, #-8]
   14410:	str	r2, [r5, #-4]
   14414:	mov	r5, #0
   14418:	b	14354 <read_boolean_binary_expression@@Base+0xbc>
   1441c:	ldr	r3, [r4, #256]	; 0x100
   14420:	ldr	r1, [r4, #260]	; 0x104
   14424:	adds	r3, r3, #1
   14428:	adc	r1, r1, #0
   1442c:	str	r3, [r4, #256]	; 0x100
   14430:	str	r1, [r4, #260]	; 0x104
   14434:	bl	13c84 <get_boolean_op_value@@Base>
   14438:	ldr	r3, [r5]
   1443c:	mov	r8, r0
   14440:	mov	r0, r6
   14444:	add	r6, r4, #288	; 0x120
   14448:	ldr	r2, [r5, #4]
   1444c:	adds	r3, r3, #1
   14450:	adc	r2, r2, #0
   14454:	str	r3, [r5]
   14458:	str	r2, [r5, #4]
   1445c:	add	r5, r4, #304	; 0x130
   14460:	bl	12570 <free_token_boolean_op@@Base>
   14464:	ldr	r3, [r4, #280]	; 0x118
   14468:	ldr	r2, [r4, #284]	; 0x11c
   1446c:	ldr	r0, [r9]
   14470:	adds	r3, r3, #1
   14474:	adc	r2, r2, #0
   14478:	str	r3, [r4, #280]	; 0x118
   1447c:	str	r2, [r4, #284]	; 0x11c
   14480:	bl	127bc <next@@Base>
   14484:	ldr	r3, [r0]
   14488:	mov	r9, r0
   1448c:	cmp	r3, #1
   14490:	beq	144d0 <read_boolean_binary_expression@@Base+0x238>
   14494:	ldr	r3, [r4, #288]	; 0x120
   14498:	mov	r0, r7
   1449c:	ldr	r2, [r4, #292]	; 0x124
   144a0:	adds	r3, r3, #1
   144a4:	adc	r2, r2, #0
   144a8:	str	r3, [r4, #288]	; 0x120
   144ac:	str	r2, [r4, #292]	; 0x124
   144b0:	bl	137e8 <free_node@@Base>
   144b4:	ldr	r3, [r5]
   144b8:	ldr	r2, [r5, #4]
   144bc:	adds	r3, r3, #1
   144c0:	adc	r2, r2, #0
   144c4:	str	r3, [r5]
   144c8:	str	r2, [r5, #4]
   144cc:	b	14414 <read_boolean_binary_expression@@Base+0x17c>
   144d0:	ldr	r3, [r5, #-8]
   144d4:	mov	r0, sl
   144d8:	add	r4, r4, #336	; 0x150
   144dc:	ldr	r2, [r5, #-4]
   144e0:	adds	r3, r3, #1
   144e4:	adc	r2, r2, #0
   144e8:	str	r3, [r5, #-8]
   144ec:	str	r2, [r5, #-4]
   144f0:	bl	119d8 <malloc@plt>
   144f4:	ldr	r1, [r9, #4]
   144f8:	mov	r6, r0
   144fc:	bl	13614 <init_node_int@@Base>
   14500:	ldr	r2, [r4, #-24]	; 0xffffffe8
   14504:	mov	r0, r9
   14508:	ldr	r3, [r4, #-20]	; 0xffffffec
   1450c:	adds	r2, r2, #1
   14510:	adc	r3, r3, #0
   14514:	str	r2, [r4, #-24]	; 0xffffffe8
   14518:	str	r3, [r4, #-20]	; 0xffffffec
   1451c:	bl	123e4 <free_token_int_value@@Base>
   14520:	ldr	r2, [r4, #-16]
   14524:	mov	r0, #20
   14528:	ldr	r3, [r4, #-12]
   1452c:	adds	r2, r2, #1
   14530:	adc	r3, r3, #0
   14534:	str	r2, [r4, #-16]
   14538:	str	r3, [r4, #-12]
   1453c:	bl	119d8 <malloc@plt>
   14540:	mov	r3, r6
   14544:	mov	r2, r7
   14548:	mov	r1, r8
   1454c:	mov	r5, r0
   14550:	bl	136f4 <init_node_boolean_operator@@Base>
   14554:	ldr	r3, [r4, #-8]
   14558:	ldr	r2, [r4, #-4]
   1455c:	adds	r3, r3, #1
   14560:	adc	r2, r2, #0
   14564:	str	r3, [r4, #-8]
   14568:	str	r2, [r4, #-4]
   1456c:	b	14354 <read_boolean_binary_expression@@Base+0xbc>
   14570:	andeq	sl, r2, r8, lsl #3

00014574 <read_single_boolean_expression@@Base>:
   14574:	cmp	r1, #0
   14578:	push	{r4, r5, r6, r7, r8, lr}
   1457c:	ldr	r4, [pc, #236]	; 14670 <read_single_boolean_expression@@Base+0xfc>
   14580:	bne	145c4 <read_single_boolean_expression@@Base+0x50>
   14584:	ldr	r3, [r4]
   14588:	ldr	r2, [r4, #4]
   1458c:	adds	r3, r3, #1
   14590:	adc	r2, r2, #0
   14594:	str	r3, [r4]
   14598:	str	r2, [r4, #4]
   1459c:	bl	14298 <read_boolean_binary_expression@@Base>
   145a0:	ldr	r3, [r4, #8]
   145a4:	mov	r5, r0
   145a8:	ldr	r2, [r4, #12]
   145ac:	adds	r3, r3, #1
   145b0:	adc	r2, r2, #0
   145b4:	str	r3, [r4, #8]
   145b8:	str	r2, [r4, #12]
   145bc:	mov	r0, r5
   145c0:	pop	{r4, r5, r6, r7, r8, pc}
   145c4:	ldr	r1, [r2]
   145c8:	mov	r6, r2
   145cc:	cmp	r1, #0
   145d0:	beq	14650 <read_single_boolean_expression@@Base+0xdc>
   145d4:	mov	r7, r3
   145d8:	ldr	r3, [r4, #16]
   145dc:	ldr	r2, [r4, #20]
   145e0:	adds	r3, r3, #1
   145e4:	adc	r2, r2, #0
   145e8:	str	r3, [r4, #16]
   145ec:	str	r2, [r4, #20]
   145f0:	bl	14298 <read_boolean_binary_expression@@Base>
   145f4:	ldr	r2, [r4, #32]
   145f8:	mov	r8, r0
   145fc:	mov	r0, #20
   14600:	ldr	r1, [r4, #36]	; 0x24
   14604:	adds	r2, r2, #1
   14608:	adc	r1, r1, #0
   1460c:	str	r2, [r4, #32]
   14610:	str	r1, [r4, #36]	; 0x24
   14614:	bl	119d8 <malloc@plt>
   14618:	mov	r3, r8
   1461c:	mov	r2, #0
   14620:	mov	r1, r7
   14624:	mov	r5, r0
   14628:	bl	136f4 <init_node_boolean_operator@@Base>
   1462c:	mov	r3, #0
   14630:	ldr	r2, [r4, #44]	; 0x2c
   14634:	str	r3, [r6]
   14638:	ldr	r3, [r4, #40]	; 0x28
   1463c:	adds	r3, r3, #1
   14640:	adc	r2, r2, #0
   14644:	str	r3, [r4, #40]	; 0x28
   14648:	str	r2, [r4, #44]	; 0x2c
   1464c:	b	145bc <read_single_boolean_expression@@Base+0x48>
   14650:	ldr	r3, [r4, #24]
   14654:	ldr	r2, [r4, #28]
   14658:	adds	r3, r3, #1
   1465c:	adc	r2, r2, #0
   14660:	str	r3, [r4, #24]
   14664:	ldr	r3, [r1, #4]
   14668:	str	r2, [r4, #28]
   1466c:	udf	#0
   14670:	ldrdeq	sl, [r2], -r8

00014674 <read_boolean_expression@@Base>:
   14674:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14678:	mov	r5, #0
   1467c:	mov	r6, r0
   14680:	mov	r8, #1
   14684:	ldr	r4, [pc, #488]	; 14874 <read_boolean_expression@@Base+0x200>
   14688:	str	r5, [sp, #4]
   1468c:	ldr	r0, [r0]
   14690:	ldr	r3, [r4, #-8]
   14694:	ldr	r2, [r4, #-4]
   14698:	adds	r3, r3, #1
   1469c:	adc	r2, r2, #0
   146a0:	str	r3, [r4, #-8]
   146a4:	str	r2, [r4, #-4]
   146a8:	bl	127bc <next@@Base>
   146ac:	ldr	r3, [r4]
   146b0:	ldr	r2, [r4, #4]
   146b4:	adds	r3, r3, #1
   146b8:	adc	r2, r2, r5
   146bc:	str	r3, [r4]
   146c0:	str	r2, [r4, #4]
   146c4:	ldr	r3, [r0]
   146c8:	cmp	r3, #4
   146cc:	bne	14710 <read_boolean_expression@@Base+0x9c>
   146d0:	ldr	r3, [r4, #80]	; 0x50
   146d4:	ldr	r2, [r4, #84]	; 0x54
   146d8:	adds	r3, r3, #1
   146dc:	adc	r2, r2, #0
   146e0:	str	r3, [r4, #80]	; 0x50
   146e4:	str	r2, [r4, #84]	; 0x54
   146e8:	bl	12450 <free_token_cpar@@Base>
   146ec:	ldr	r3, [r4, #88]	; 0x58
   146f0:	mov	r0, r5
   146f4:	ldr	r2, [r4, #92]	; 0x5c
   146f8:	adds	r3, r3, #1
   146fc:	adc	r2, r2, #0
   14700:	str	r3, [r4, #88]	; 0x58
   14704:	str	r2, [r4, #92]	; 0x5c
   14708:	add	sp, sp, #8
   1470c:	pop	{r4, r5, r6, r7, r8, pc}
   14710:	cmp	r3, #3
   14714:	beq	147e0 <read_boolean_expression@@Base+0x16c>
   14718:	cmp	r3, #12
   1471c:	beq	147a0 <read_boolean_expression@@Base+0x12c>
   14720:	cmp	r3, #1
   14724:	bne	1482c <read_boolean_expression@@Base+0x1b8>
   14728:	ldr	r3, [r4, #16]
   1472c:	mov	r1, r0
   14730:	ldr	r2, [r4, #20]
   14734:	ldr	r0, [r6]
   14738:	adds	r3, r3, #1
   1473c:	adc	r2, r2, #0
   14740:	str	r3, [r4, #16]
   14744:	str	r2, [r4, #20]
   14748:	bl	1266c <push_back@@Base>
   1474c:	ldr	r3, [r4, #40]	; 0x28
   14750:	mov	r1, r5
   14754:	mov	r0, r6
   14758:	ldr	r2, [r4, #44]	; 0x2c
   1475c:	adds	r3, r3, #1
   14760:	adc	r2, r2, #0
   14764:	str	r3, [r4, #40]	; 0x28
   14768:	mov	r3, r7
   1476c:	str	r2, [r4, #44]	; 0x2c
   14770:	add	r2, sp, #4
   14774:	bl	14574 <read_single_boolean_expression@@Base>
   14778:	ldr	r3, [r4, #48]	; 0x30
   1477c:	mov	r5, r0
   14780:	ldr	r2, [r4, #52]	; 0x34
   14784:	adds	r3, r3, #1
   14788:	adc	r2, r2, #0
   1478c:	str	r3, [r4, #48]	; 0x30
   14790:	str	r2, [r4, #52]	; 0x34
   14794:	ldr	r0, [r6]
   14798:	bl	127bc <next@@Base>
   1479c:	b	146c4 <read_boolean_expression@@Base+0x50>
   147a0:	ldr	r3, [r4, #32]
   147a4:	ldr	r2, [r4, #36]	; 0x24
   147a8:	adds	r3, r3, #1
   147ac:	adc	r2, r2, #0
   147b0:	str	r3, [r4, #32]
   147b4:	str	r2, [r4, #36]	; 0x24
   147b8:	bl	13c84 <get_boolean_op_value@@Base>
   147bc:	ldr	r3, [r4, #56]	; 0x38
   147c0:	mov	r7, r0
   147c4:	str	r8, [sp, #4]
   147c8:	ldr	r2, [r4, #60]	; 0x3c
   147cc:	adds	r3, r3, #1
   147d0:	adc	r2, r2, #0
   147d4:	str	r3, [r4, #56]	; 0x38
   147d8:	str	r2, [r4, #60]	; 0x3c
   147dc:	b	14794 <read_boolean_expression@@Base+0x120>
   147e0:	ldr	r3, [r4, #24]
   147e4:	mov	r1, r5
   147e8:	mov	r0, r6
   147ec:	ldr	r2, [r4, #28]
   147f0:	adds	r3, r3, #1
   147f4:	adc	r2, r2, #0
   147f8:	str	r3, [r4, #24]
   147fc:	mov	r3, r7
   14800:	str	r2, [r4, #28]
   14804:	add	r2, sp, #4
   14808:	bl	14574 <read_single_boolean_expression@@Base>
   1480c:	ldr	r3, [r4, #64]	; 0x40
   14810:	mov	r5, r0
   14814:	ldr	r2, [r4, #68]	; 0x44
   14818:	adds	r3, r3, #1
   1481c:	adc	r2, r2, #0
   14820:	str	r3, [r4, #64]	; 0x40
   14824:	str	r2, [r4, #68]	; 0x44
   14828:	b	14794 <read_boolean_expression@@Base+0x120>
   1482c:	ldr	r3, [r4, #8]
   14830:	ldr	r2, [r4, #12]
   14834:	ldr	r0, [pc, #60]	; 14878 <read_boolean_expression@@Base+0x204>
   14838:	adds	r3, r3, #1
   1483c:	str	r3, [r4, #8]
   14840:	adc	r2, r2, #0
   14844:	ldr	r3, [pc, #48]	; 1487c <read_boolean_expression@@Base+0x208>
   14848:	str	r2, [r4, #12]
   1484c:	ldr	r1, [r3]
   14850:	bl	11ad4 <fputs@plt>
   14854:	ldr	r3, [r4, #72]	; 0x48
   14858:	mov	r0, #1
   1485c:	ldr	r2, [r4, #76]	; 0x4c
   14860:	adds	r3, r3, #1
   14864:	adc	r2, r2, #0
   14868:	str	r3, [r4, #72]	; 0x48
   1486c:	str	r2, [r4, #76]	; 0x4c
   14870:	bl	11a08 <exit@plt>
   14874:	andeq	sl, r2, r8, lsl r3
   14878:	andeq	r8, r1, lr, lsr #1
   1487c:	andeq	r9, r2, r0, lsr #21

00014880 <read_if_statement@@Base>:
   14880:	push	{r4, r5, r6, r7, r8, lr}
   14884:	mov	r6, r0
   14888:	ldr	r5, [pc, #436]	; 14a44 <read_if_statement@@Base+0x1c4>
   1488c:	ldr	r0, [r0]
   14890:	ldr	r3, [r5]
   14894:	ldr	r2, [r5, #4]
   14898:	adds	r3, r3, #1
   1489c:	adc	r2, r2, #0
   148a0:	str	r3, [r5]
   148a4:	str	r2, [r5, #4]
   148a8:	bl	127bc <next@@Base>
   148ac:	ldr	r3, [r0]
   148b0:	cmp	r3, #3
   148b4:	beq	148dc <read_if_statement@@Base+0x5c>
   148b8:	ldr	r3, [r5, #8]
   148bc:	mov	r6, #0
   148c0:	ldr	r2, [r5, #12]
   148c4:	adds	r3, r3, #1
   148c8:	adc	r2, r2, #0
   148cc:	str	r3, [r5, #8]
   148d0:	str	r2, [r5, #12]
   148d4:	mov	r0, r6
   148d8:	pop	{r4, r5, r6, r7, r8, pc}
   148dc:	ldr	r3, [r5, #16]
   148e0:	mov	r4, r5
   148e4:	ldr	r2, [r5, #20]
   148e8:	adds	r3, r3, #1
   148ec:	adc	r2, r2, #0
   148f0:	str	r3, [r5, #16]
   148f4:	str	r2, [r5, #20]
   148f8:	bl	1242c <free_token_opar@@Base>
   148fc:	ldr	r3, [r5, #24]
   14900:	mov	r0, r6
   14904:	ldr	r2, [r5, #28]
   14908:	adds	r3, r3, #1
   1490c:	adc	r2, r2, #0
   14910:	str	r3, [r5, #24]
   14914:	str	r2, [r5, #28]
   14918:	bl	14674 <read_boolean_expression@@Base>
   1491c:	ldr	r3, [r4, #32]
   14920:	mov	r5, r0
   14924:	mov	r0, r6
   14928:	ldr	r2, [r4, #36]	; 0x24
   1492c:	adds	r3, r3, #1
   14930:	adc	r2, r2, #0
   14934:	str	r3, [r4, #32]
   14938:	str	r2, [r4, #36]	; 0x24
   1493c:	bl	14a48 <read_body@@Base>
   14940:	ldr	r3, [r4, #40]	; 0x28
   14944:	mov	r7, r0
   14948:	ldr	r2, [r4, #44]	; 0x2c
   1494c:	ldr	r0, [r6]
   14950:	adds	r3, r3, #1
   14954:	adc	r2, r2, #0
   14958:	str	r3, [r4, #40]	; 0x28
   1495c:	str	r2, [r4, #44]	; 0x2c
   14960:	bl	127bc <next@@Base>
   14964:	ldr	r3, [r0]
   14968:	mov	r1, r0
   1496c:	cmp	r3, #11
   14970:	bne	14a04 <read_if_statement@@Base+0x184>
   14974:	ldr	r3, [r4, #48]	; 0x30
   14978:	ldr	r2, [r4, #52]	; 0x34
   1497c:	adds	r3, r3, #1
   14980:	adc	r2, r2, #0
   14984:	str	r3, [r4, #48]	; 0x30
   14988:	str	r2, [r4, #52]	; 0x34
   1498c:	bl	1254c <free_token_else@@Base>
   14990:	ldr	r3, [r4, #64]	; 0x40
   14994:	mov	r0, r6
   14998:	ldr	r2, [r4, #68]	; 0x44
   1499c:	adds	r3, r3, #1
   149a0:	adc	r2, r2, #0
   149a4:	str	r3, [r4, #64]	; 0x40
   149a8:	str	r2, [r4, #68]	; 0x44
   149ac:	bl	14a48 <read_body@@Base>
   149b0:	ldr	r2, [r4, #72]	; 0x48
   149b4:	mov	r8, r0
   149b8:	ldr	r1, [r4, #76]	; 0x4c
   149bc:	adds	r2, r2, #1
   149c0:	adc	r1, r1, #0
   149c4:	str	r2, [r4, #72]	; 0x48
   149c8:	str	r1, [r4, #76]	; 0x4c
   149cc:	mov	r0, #20
   149d0:	bl	119d8 <malloc@plt>
   149d4:	mov	r3, r8
   149d8:	mov	r2, r7
   149dc:	mov	r1, r5
   149e0:	mov	r6, r0
   149e4:	bl	136b8 <init_node_if@@Base>
   149e8:	ldr	r3, [r4, #88]	; 0x58
   149ec:	ldr	r2, [r4, #92]	; 0x5c
   149f0:	adds	r3, r3, #1
   149f4:	adc	r2, r2, #0
   149f8:	str	r3, [r4, #88]	; 0x58
   149fc:	str	r2, [r4, #92]	; 0x5c
   14a00:	b	148d4 <read_if_statement@@Base+0x54>
   14a04:	ldr	r3, [r4, #56]	; 0x38
   14a08:	mov	r8, #0
   14a0c:	ldr	r2, [r4, #60]	; 0x3c
   14a10:	ldr	r0, [r6]
   14a14:	adds	r3, r3, #1
   14a18:	adc	r2, r2, #0
   14a1c:	str	r3, [r4, #56]	; 0x38
   14a20:	str	r2, [r4, #60]	; 0x3c
   14a24:	bl	1266c <push_back@@Base>
   14a28:	ldr	r3, [r4, #80]	; 0x50
   14a2c:	ldr	r2, [r4, #84]	; 0x54
   14a30:	adds	r3, r3, #1
   14a34:	adc	r2, r2, #0
   14a38:	str	r3, [r4, #80]	; 0x50
   14a3c:	str	r2, [r4, #84]	; 0x54
   14a40:	b	149cc <read_if_statement@@Base+0x14c>
   14a44:	andeq	sl, r2, r8, ror r3

00014a48 <read_body@@Base>:
   14a48:	push	{r4, r5, r6, r7, r8, lr}
   14a4c:	mov	r6, r0
   14a50:	ldr	r5, [pc, #556]	; 14c84 <read_body@@Base+0x23c>
   14a54:	ldr	r0, [r0]
   14a58:	ldr	r3, [r5]
   14a5c:	ldr	r2, [r5, #4]
   14a60:	adds	r3, r3, #1
   14a64:	adc	r2, r2, #0
   14a68:	str	r3, [r5]
   14a6c:	str	r2, [r5, #4]
   14a70:	bl	127bc <next@@Base>
   14a74:	ldr	r3, [r0]
   14a78:	cmp	r3, #5
   14a7c:	beq	14aa4 <read_body@@Base+0x5c>
   14a80:	ldr	r3, [r5, #8]
   14a84:	ldr	r2, [r5, #12]
   14a88:	adds	r3, r3, #1
   14a8c:	adc	r2, r2, #0
   14a90:	str	r3, [r5, #8]
   14a94:	str	r2, [r5, #12]
   14a98:	mov	r5, #0
   14a9c:	mov	r0, r5
   14aa0:	pop	{r4, r5, r6, r7, r8, pc}
   14aa4:	mov	r4, r5
   14aa8:	mov	r7, #0
   14aac:	ldr	r3, [r4, #16]
   14ab0:	mov	r5, r7
   14ab4:	ldr	r2, [r4, #20]
   14ab8:	adds	r3, r3, #1
   14abc:	adc	r2, r2, #0
   14ac0:	str	r3, [r4, #16]
   14ac4:	str	r2, [r4, #20]
   14ac8:	bl	12474 <free_token_obra@@Base>
   14acc:	ldr	r3, [r4, #24]
   14ad0:	ldr	r2, [r4, #28]
   14ad4:	ldr	r0, [r6]
   14ad8:	adds	r3, r3, #1
   14adc:	adc	r2, r2, #0
   14ae0:	str	r3, [r4, #24]
   14ae4:	str	r2, [r4, #28]
   14ae8:	bl	127bc <next@@Base>
   14aec:	ldr	r3, [r4, #32]
   14af0:	ldr	r2, [r4, #36]	; 0x24
   14af4:	adds	r3, r3, #1
   14af8:	adc	r2, r2, #0
   14afc:	str	r3, [r4, #32]
   14b00:	str	r2, [r4, #36]	; 0x24
   14b04:	ldr	r3, [r0]
   14b08:	cmp	r3, #6
   14b0c:	bne	14b48 <read_body@@Base+0x100>
   14b10:	ldr	r3, [r4, #112]	; 0x70
   14b14:	ldr	r2, [r4, #116]	; 0x74
   14b18:	adds	r3, r3, #1
   14b1c:	adc	r2, r2, #0
   14b20:	str	r3, [r4, #112]	; 0x70
   14b24:	str	r2, [r4, #116]	; 0x74
   14b28:	bl	12498 <free_token_cbra@@Base>
   14b2c:	ldr	r3, [r4, #120]	; 0x78
   14b30:	ldr	r2, [r4, #124]	; 0x7c
   14b34:	adds	r3, r3, #1
   14b38:	adc	r2, r2, #0
   14b3c:	str	r3, [r4, #120]	; 0x78
   14b40:	str	r2, [r4, #124]	; 0x7c
   14b44:	b	14a9c <read_body@@Base+0x54>
   14b48:	cmp	r3, #7
   14b4c:	beq	14b98 <read_body@@Base+0x150>
   14b50:	cmp	r3, #10
   14b54:	beq	14c28 <read_body@@Base+0x1e0>
   14b58:	ldr	r3, [r4, #40]	; 0x28
   14b5c:	mov	r1, r0
   14b60:	ldr	r2, [r4, #44]	; 0x2c
   14b64:	ldr	r0, [r6]
   14b68:	adds	r3, r3, #1
   14b6c:	adc	r2, r2, #0
   14b70:	str	r3, [r4, #40]	; 0x28
   14b74:	str	r2, [r4, #44]	; 0x2c
   14b78:	bl	1266c <push_back@@Base>
   14b7c:	ldr	r3, [r4, #96]	; 0x60
   14b80:	ldr	r2, [r4, #100]	; 0x64
   14b84:	adds	r3, r3, #1
   14b88:	adc	r2, r2, #0
   14b8c:	str	r3, [r4, #96]	; 0x60
   14b90:	str	r2, [r4, #100]	; 0x64
   14b94:	b	14a9c <read_body@@Base+0x54>
   14b98:	ldr	r3, [r4, #48]	; 0x30
   14b9c:	ldr	r2, [r4, #52]	; 0x34
   14ba0:	adds	r3, r3, #1
   14ba4:	adc	r2, r2, #0
   14ba8:	str	r3, [r4, #48]	; 0x30
   14bac:	str	r2, [r4, #52]	; 0x34
   14bb0:	bl	124bc <free_token_return@@Base>
   14bb4:	ldr	r3, [r4, #64]	; 0x40
   14bb8:	mov	r0, r6
   14bbc:	ldr	r2, [r4, #68]	; 0x44
   14bc0:	adds	r3, r3, #1
   14bc4:	adc	r2, r2, #0
   14bc8:	str	r3, [r4, #64]	; 0x40
   14bcc:	str	r2, [r4, #68]	; 0x44
   14bd0:	bl	13f6c <read_return_expression@@Base>
   14bd4:	ldr	r3, [r4, #72]	; 0x48
   14bd8:	mov	r8, r0
   14bdc:	ldr	r2, [r4, #76]	; 0x4c
   14be0:	adds	r3, r3, #1
   14be4:	adc	r2, r2, #0
   14be8:	str	r3, [r4, #72]	; 0x48
   14bec:	str	r2, [r4, #76]	; 0x4c
   14bf0:	cmp	r5, #0
   14bf4:	strne	r8, [r7, #4]
   14bf8:	bne	14c18 <read_body@@Base+0x1d0>
   14bfc:	ldr	r3, [r4, #104]	; 0x68
   14c00:	mov	r5, r8
   14c04:	ldr	r2, [r4, #108]	; 0x6c
   14c08:	adds	r3, r3, #1
   14c0c:	adc	r2, r2, #0
   14c10:	str	r3, [r4, #104]	; 0x68
   14c14:	str	r2, [r4, #108]	; 0x6c
   14c18:	ldr	r0, [r6]
   14c1c:	mov	r7, r8
   14c20:	bl	127bc <next@@Base>
   14c24:	b	14b04 <read_body@@Base+0xbc>
   14c28:	ldr	r3, [r4, #56]	; 0x38
   14c2c:	ldr	r2, [r4, #60]	; 0x3c
   14c30:	adds	r3, r3, #1
   14c34:	adc	r2, r2, #0
   14c38:	str	r3, [r4, #56]	; 0x38
   14c3c:	str	r2, [r4, #60]	; 0x3c
   14c40:	bl	12528 <free_token_if@@Base>
   14c44:	ldr	r3, [r4, #80]	; 0x50
   14c48:	mov	r0, r6
   14c4c:	ldr	r2, [r4, #84]	; 0x54
   14c50:	adds	r3, r3, #1
   14c54:	adc	r2, r2, #0
   14c58:	str	r3, [r4, #80]	; 0x50
   14c5c:	str	r2, [r4, #84]	; 0x54
   14c60:	bl	14880 <read_if_statement@@Base>
   14c64:	ldr	r3, [r4, #88]	; 0x58
   14c68:	mov	r8, r0
   14c6c:	ldr	r2, [r4, #92]	; 0x5c
   14c70:	adds	r3, r3, #1
   14c74:	adc	r2, r2, #0
   14c78:	str	r3, [r4, #88]	; 0x58
   14c7c:	str	r2, [r4, #92]	; 0x5c
   14c80:	b	14bf0 <read_body@@Base+0x1a8>
   14c84:	ldrdeq	sl, [r2], -r8

00014c88 <read_function_ast_node@@Base>:
   14c88:	push	{r4, r5, r6, r7, r8, lr}
   14c8c:	mov	r7, r0
   14c90:	ldr	r4, [pc, #524]	; 14ea4 <read_function_ast_node@@Base+0x21c>
   14c94:	ldr	r0, [r0]
   14c98:	ldr	r3, [r4]
   14c9c:	ldr	r2, [r4, #4]
   14ca0:	adds	r3, r3, #1
   14ca4:	adc	r2, r2, #0
   14ca8:	str	r3, [r4]
   14cac:	str	r2, [r4, #4]
   14cb0:	bl	127bc <next@@Base>
   14cb4:	ldr	r5, [r0]
   14cb8:	cmp	r5, #0
   14cbc:	beq	14ce4 <read_function_ast_node@@Base+0x5c>
   14cc0:	ldr	r3, [r4, #8]
   14cc4:	mov	r5, #0
   14cc8:	ldr	r2, [r4, #12]
   14ccc:	adds	r3, r3, #1
   14cd0:	adc	r2, r2, #0
   14cd4:	str	r3, [r4, #8]
   14cd8:	str	r2, [r4, #12]
   14cdc:	mov	r0, r5
   14ce0:	pop	{r4, r5, r6, r7, r8, pc}
   14ce4:	ldr	r3, [r4, #16]
   14ce8:	ldr	r2, [r4, #20]
   14cec:	adds	r3, r3, #1
   14cf0:	adc	r2, r2, #0
   14cf4:	str	r3, [r4, #16]
   14cf8:	str	r2, [r4, #20]
   14cfc:	bl	123c0 <free_token_int_type@@Base>
   14d00:	ldr	r3, [r4, #24]
   14d04:	ldr	r2, [r4, #28]
   14d08:	ldr	r0, [r7]
   14d0c:	adds	r3, r3, #1
   14d10:	adc	r2, r2, #0
   14d14:	str	r3, [r4, #24]
   14d18:	str	r2, [r4, #28]
   14d1c:	bl	127bc <next@@Base>
   14d20:	ldr	r3, [r0]
   14d24:	mov	r6, r0
   14d28:	cmp	r3, #2
   14d2c:	beq	14d4c <read_function_ast_node@@Base+0xc4>
   14d30:	ldr	r3, [r4, #32]
   14d34:	ldr	r2, [r4, #36]	; 0x24
   14d38:	adds	r3, r3, #1
   14d3c:	adc	r2, r2, #0
   14d40:	str	r3, [r4, #32]
   14d44:	str	r2, [r4, #36]	; 0x24
   14d48:	b	14cdc <read_function_ast_node@@Base+0x54>
   14d4c:	ldr	r3, [r4, #40]	; 0x28
   14d50:	ldr	r2, [r4, #44]	; 0x2c
   14d54:	ldr	r0, [r7]
   14d58:	adds	r3, r3, #1
   14d5c:	adc	r2, r2, #0
   14d60:	str	r3, [r4, #40]	; 0x28
   14d64:	str	r2, [r4, #44]	; 0x2c
   14d68:	bl	127bc <next@@Base>
   14d6c:	ldr	r3, [r0]
   14d70:	cmp	r3, #3
   14d74:	beq	14d94 <read_function_ast_node@@Base+0x10c>
   14d78:	ldr	r3, [r4, #48]	; 0x30
   14d7c:	ldr	r2, [r4, #52]	; 0x34
   14d80:	adds	r3, r3, #1
   14d84:	adc	r2, r2, #0
   14d88:	str	r3, [r4, #48]	; 0x30
   14d8c:	str	r2, [r4, #52]	; 0x34
   14d90:	b	14cdc <read_function_ast_node@@Base+0x54>
   14d94:	ldr	r3, [r4, #56]	; 0x38
   14d98:	ldr	r2, [r4, #60]	; 0x3c
   14d9c:	adds	r3, r3, #1
   14da0:	adc	r2, r2, #0
   14da4:	str	r3, [r4, #56]	; 0x38
   14da8:	str	r2, [r4, #60]	; 0x3c
   14dac:	bl	1242c <free_token_opar@@Base>
   14db0:	ldr	r3, [r4, #64]	; 0x40
   14db4:	ldr	r2, [r4, #68]	; 0x44
   14db8:	ldr	r0, [r7]
   14dbc:	adds	r3, r3, #1
   14dc0:	adc	r2, r2, #0
   14dc4:	str	r3, [r4, #64]	; 0x40
   14dc8:	str	r2, [r4, #68]	; 0x44
   14dcc:	bl	127bc <next@@Base>
   14dd0:	ldr	r3, [r0]
   14dd4:	cmp	r3, #4
   14dd8:	beq	14df8 <read_function_ast_node@@Base+0x170>
   14ddc:	ldr	r3, [r4, #72]	; 0x48
   14de0:	ldr	r2, [r4, #76]	; 0x4c
   14de4:	adds	r3, r3, #1
   14de8:	adc	r2, r2, #0
   14dec:	str	r3, [r4, #72]	; 0x48
   14df0:	str	r2, [r4, #76]	; 0x4c
   14df4:	b	14cdc <read_function_ast_node@@Base+0x54>
   14df8:	ldr	r3, [r4, #80]	; 0x50
   14dfc:	ldr	r2, [r4, #84]	; 0x54
   14e00:	adds	r3, r3, #1
   14e04:	adc	r2, r2, #0
   14e08:	str	r3, [r4, #80]	; 0x50
   14e0c:	str	r2, [r4, #84]	; 0x54
   14e10:	bl	12450 <free_token_cpar@@Base>
   14e14:	ldr	r3, [r4, #88]	; 0x58
   14e18:	mov	r0, r7
   14e1c:	ldr	r2, [r4, #92]	; 0x5c
   14e20:	adds	r3, r3, #1
   14e24:	adc	r2, r2, #0
   14e28:	str	r3, [r4, #88]	; 0x58
   14e2c:	str	r2, [r4, #92]	; 0x5c
   14e30:	bl	14a48 <read_body@@Base>
   14e34:	ldr	r3, [r4, #96]	; 0x60
   14e38:	mov	r7, r0
   14e3c:	mov	r0, #16
   14e40:	ldr	r1, [r4, #100]	; 0x64
   14e44:	adds	r3, r3, #1
   14e48:	adc	r1, r1, #0
   14e4c:	str	r3, [r4, #96]	; 0x60
   14e50:	str	r1, [r4, #100]	; 0x64
   14e54:	bl	119d8 <malloc@plt>
   14e58:	mov	r2, r7
   14e5c:	ldr	r1, [r6, #4]
   14e60:	mov	r5, r0
   14e64:	bl	13648 <init_node_function@@Base>
   14e68:	ldr	r3, [r4, #104]	; 0x68
   14e6c:	mov	r0, r6
   14e70:	ldr	r2, [r4, #108]	; 0x6c
   14e74:	adds	r3, r3, #1
   14e78:	adc	r2, r2, #0
   14e7c:	str	r3, [r4, #104]	; 0x68
   14e80:	str	r2, [r4, #108]	; 0x6c
   14e84:	bl	12408 <free_token_function@@Base>
   14e88:	ldr	r3, [r4, #112]	; 0x70
   14e8c:	ldr	r2, [r4, #116]	; 0x74
   14e90:	adds	r3, r3, #1
   14e94:	adc	r2, r2, #0
   14e98:	str	r3, [r4, #112]	; 0x70
   14e9c:	str	r2, [r4, #116]	; 0x74
   14ea0:	b	14cdc <read_function_ast_node@@Base+0x54>
   14ea4:	andeq	sl, r2, r8, asr r4

00014ea8 <build_ast@@Base>:
   14ea8:	push	{r4, lr}
   14eac:	ldr	r4, [pc, #52]	; 14ee8 <build_ast@@Base+0x40>
   14eb0:	ldr	r3, [r4, #-8]
   14eb4:	ldr	r2, [r4, #-4]
   14eb8:	adds	r3, r3, #1
   14ebc:	adc	r2, r2, #0
   14ec0:	str	r3, [r4, #-8]
   14ec4:	str	r2, [r4, #-4]
   14ec8:	bl	14c88 <read_function_ast_node@@Base>
   14ecc:	ldr	r3, [r4]
   14ed0:	ldr	r2, [r4, #4]
   14ed4:	adds	r3, r3, #1
   14ed8:	adc	r2, r2, #0
   14edc:	str	r3, [r4]
   14ee0:	str	r2, [r4, #4]
   14ee4:	pop	{r4, pc}
   14ee8:	ldrdeq	sl, [r2], -r8

00014eec <init_generator@@Base>:
   14eec:	push	{r4, r5, r6, lr}
   14ef0:	mov	r5, r0
   14ef4:	ldr	r4, [pc, #80]	; 14f4c <init_generator@@Base+0x60>
   14ef8:	str	r1, [r5]
   14efc:	ldr	r1, [pc, #76]	; 14f50 <init_generator@@Base+0x64>
   14f00:	ldr	r3, [r4]
   14f04:	ldr	r0, [r4, #4]
   14f08:	adds	r3, r3, #1
   14f0c:	adc	r0, r0, #0
   14f10:	str	r3, [r4]
   14f14:	str	r0, [r4, #4]
   14f18:	mov	r0, r2
   14f1c:	bl	1196c <fopen@plt>
   14f20:	ldr	r3, [r4, #8]
   14f24:	str	r0, [r5, #4]
   14f28:	ldr	r2, [r4, #12]
   14f2c:	adds	r3, r3, #1
   14f30:	adc	r2, r2, #0
   14f34:	str	r3, [r4, #8]
   14f38:	mov	r3, #0
   14f3c:	str	r2, [r4, #12]
   14f40:	mov	r2, #0
   14f44:	strd	r2, [r5, #8]
   14f48:	pop	{r4, r5, r6, pc}
   14f4c:	andeq	sl, r2, r0, ror #9
   14f50:	andeq	r8, r1, r2, lsr #2

00014f54 <destroy_generator@@Base>:
   14f54:	push	{r4, lr}
   14f58:	ldr	r4, [pc, #56]	; 14f98 <destroy_generator@@Base+0x44>
   14f5c:	ldr	r0, [r0, #4]
   14f60:	ldr	r3, [r4, #16]
   14f64:	ldr	r2, [r4, #20]
   14f68:	adds	r3, r3, #1
   14f6c:	adc	r2, r2, #0
   14f70:	str	r3, [r4, #16]
   14f74:	str	r2, [r4, #20]
   14f78:	bl	11a74 <fclose@plt>
   14f7c:	ldr	r3, [r4, #24]
   14f80:	ldr	r2, [r4, #28]
   14f84:	adds	r3, r3, #1
   14f88:	adc	r2, r2, #0
   14f8c:	str	r3, [r4, #24]
   14f90:	str	r2, [r4, #28]
   14f94:	pop	{r4, pc}
   14f98:	andeq	sl, r2, r0, ror #9

00014f9c <__generate_code_for_int@@Base>:
   14f9c:	push	{r4, lr}
   14fa0:	ldr	r4, [pc, #64]	; 14fe8 <__generate_code_for_int@@Base+0x4c>
   14fa4:	ldr	r0, [r0, #4]
   14fa8:	ldr	r3, [r4, #32]
   14fac:	ldr	r2, [r4, #36]	; 0x24
   14fb0:	adds	r3, r3, #1
   14fb4:	adc	r2, r2, #0
   14fb8:	str	r3, [r4, #32]
   14fbc:	str	r2, [r4, #36]	; 0x24
   14fc0:	ldr	r2, [r1, #8]
   14fc4:	ldr	r1, [pc, #32]	; 14fec <__generate_code_for_int@@Base+0x50>
   14fc8:	bl	11a2c <fprintf@plt>
   14fcc:	ldr	r3, [r4, #40]	; 0x28
   14fd0:	ldr	r2, [r4, #44]	; 0x2c
   14fd4:	adds	r3, r3, #1
   14fd8:	adc	r2, r2, #0
   14fdc:	str	r3, [r4, #40]	; 0x28
   14fe0:	str	r2, [r4, #44]	; 0x2c
   14fe4:	pop	{r4, pc}
   14fe8:	andeq	sl, r2, r0, ror #9
   14fec:	andeq	r8, r1, r4, lsr #2

00014ff0 <__generate_code_for_return@@Base>:
   14ff0:	push	{r4, r5, r6, lr}
   14ff4:	mov	r5, r0
   14ff8:	ldr	r4, [pc, #220]	; 150dc <__generate_code_for_return@@Base+0xec>
   14ffc:	ldr	r6, [r1, #8]
   15000:	ldr	r1, [r0, #4]
   15004:	ldr	r3, [r4, #48]	; 0x30
   15008:	ldr	r2, [r4, #52]	; 0x34
   1500c:	ldr	r0, [pc, #204]	; 150e0 <__generate_code_for_return@@Base+0xf0>
   15010:	adds	r3, r3, #1
   15014:	adc	r2, r2, #0
   15018:	str	r3, [r4, #48]	; 0x30
   1501c:	str	r2, [r4, #52]	; 0x34
   15020:	bl	11ad4 <fputs@plt>
   15024:	ldr	r3, [r6]
   15028:	cmp	r3, #1
   1502c:	bne	15094 <__generate_code_for_return@@Base+0xa4>
   15030:	ldr	r3, [r4, #64]	; 0x40
   15034:	mov	r1, r6
   15038:	mov	r0, r5
   1503c:	ldr	r2, [r4, #68]	; 0x44
   15040:	adds	r3, r3, #1
   15044:	adc	r2, r2, #0
   15048:	str	r3, [r4, #64]	; 0x40
   1504c:	str	r2, [r4, #68]	; 0x44
   15050:	bl	14f9c <__generate_code_for_int@@Base>
   15054:	ldr	r3, [r4, #72]	; 0x48
   15058:	ldr	r2, [r4, #76]	; 0x4c
   1505c:	ldr	r0, [pc, #128]	; 150e4 <__generate_code_for_return@@Base+0xf4>
   15060:	adds	r3, r3, #1
   15064:	ldr	r1, [r5, #4]
   15068:	adc	r2, r2, #0
   1506c:	str	r3, [r4, #72]	; 0x48
   15070:	str	r2, [r4, #76]	; 0x4c
   15074:	bl	11ad4 <fputs@plt>
   15078:	ldr	r3, [r4, #80]	; 0x50
   1507c:	ldr	r2, [r4, #84]	; 0x54
   15080:	adds	r3, r3, #1
   15084:	adc	r2, r2, #0
   15088:	str	r3, [r4, #80]	; 0x50
   1508c:	str	r2, [r4, #84]	; 0x54
   15090:	pop	{r4, r5, r6, pc}
   15094:	ldr	r3, [r4, #56]	; 0x38
   15098:	ldr	r2, [r4, #60]	; 0x3c
   1509c:	ldr	r0, [pc, #68]	; 150e8 <__generate_code_for_return@@Base+0xf8>
   150a0:	adds	r3, r3, #1
   150a4:	str	r3, [r4, #56]	; 0x38
   150a8:	adc	r2, r2, #0
   150ac:	ldr	r3, [pc, #56]	; 150ec <__generate_code_for_return@@Base+0xfc>
   150b0:	str	r2, [r4, #60]	; 0x3c
   150b4:	ldr	r1, [r3]
   150b8:	bl	11ad4 <fputs@plt>
   150bc:	ldr	r3, [r4, #88]	; 0x58
   150c0:	mov	r0, #1
   150c4:	ldr	r2, [r4, #92]	; 0x5c
   150c8:	adds	r3, r3, #1
   150cc:	adc	r2, r2, #0
   150d0:	str	r3, [r4, #88]	; 0x58
   150d4:	str	r2, [r4, #92]	; 0x5c
   150d8:	bl	11a08 <exit@plt>
   150dc:	andeq	sl, r2, r0, ror #9
   150e0:	andeq	r8, r1, r8, lsr #2
   150e4:	andeq	r8, r1, r2, lsr r1
   150e8:	andeq	r8, r1, fp, lsr r1
   150ec:	andeq	r9, r2, r0, lsr #21

000150f0 <__generate_code_for_binary_boolean_expression@@Base>:
   150f0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   150f4:	mov	r6, r1
   150f8:	mov	r5, r0
   150fc:	ldr	r4, [pc, #808]	; 1542c <__generate_code_for_binary_boolean_expression@@Base+0x33c>
   15100:	strd	r2, [sp]
   15104:	ldr	r8, [r6, #8]
   15108:	ldr	r7, [r6, #12]
   1510c:	ldr	r1, [r4, #96]	; 0x60
   15110:	ldr	r0, [r4, #100]	; 0x64
   15114:	adds	r1, r1, #1
   15118:	adc	r0, r0, #0
   1511c:	str	r1, [r4, #96]	; 0x60
   15120:	ldr	r1, [r5, #4]
   15124:	str	r0, [r4, #100]	; 0x64
   15128:	ldr	r0, [pc, #768]	; 15430 <__generate_code_for_binary_boolean_expression@@Base+0x340>
   1512c:	bl	11ad4 <fputs@plt>
   15130:	ldr	r1, [r4, #104]	; 0x68
   15134:	ldr	r0, [r4, #108]	; 0x6c
   15138:	adds	r1, r1, #1
   1513c:	adc	r0, r0, #0
   15140:	str	r1, [r4, #104]	; 0x68
   15144:	mov	r1, r8
   15148:	str	r0, [r4, #108]	; 0x6c
   1514c:	mov	r0, r5
   15150:	bl	14f9c <__generate_code_for_int@@Base>
   15154:	ldr	r1, [r4, #112]	; 0x70
   15158:	ldr	r0, [r4, #116]	; 0x74
   1515c:	adds	r1, r1, #1
   15160:	adc	r0, r0, #0
   15164:	str	r1, [r4, #112]	; 0x70
   15168:	ldr	r1, [r5, #4]
   1516c:	str	r0, [r4, #116]	; 0x74
   15170:	mov	r0, #10
   15174:	bl	11aa4 <fputc@plt>
   15178:	ldr	r1, [r4, #120]	; 0x78
   1517c:	ldr	r0, [r4, #124]	; 0x7c
   15180:	adds	r1, r1, #1
   15184:	adc	r0, r0, #0
   15188:	str	r1, [r4, #120]	; 0x78
   1518c:	ldr	r1, [r5, #4]
   15190:	str	r0, [r4, #124]	; 0x7c
   15194:	ldr	r0, [pc, #664]	; 15434 <__generate_code_for_binary_boolean_expression@@Base+0x344>
   15198:	bl	11ad4 <fputs@plt>
   1519c:	ldr	r1, [r4, #128]	; 0x80
   151a0:	ldr	r0, [r4, #132]	; 0x84
   151a4:	adds	r1, r1, #1
   151a8:	adc	r0, r0, #0
   151ac:	str	r1, [r4, #128]	; 0x80
   151b0:	mov	r1, r7
   151b4:	str	r0, [r4, #132]	; 0x84
   151b8:	mov	r0, r5
   151bc:	bl	14f9c <__generate_code_for_int@@Base>
   151c0:	ldr	r1, [r4, #136]	; 0x88
   151c4:	ldr	r0, [r4, #140]	; 0x8c
   151c8:	adds	r1, r1, #1
   151cc:	adc	r0, r0, #0
   151d0:	str	r1, [r4, #136]	; 0x88
   151d4:	ldr	r1, [r5, #4]
   151d8:	str	r0, [r4, #140]	; 0x8c
   151dc:	mov	r0, #10
   151e0:	bl	11aa4 <fputc@plt>
   151e4:	ldr	r1, [r4, #144]	; 0x90
   151e8:	ldr	r0, [r4, #148]	; 0x94
   151ec:	adds	r1, r1, #1
   151f0:	adc	r0, r0, #0
   151f4:	str	r1, [r4, #144]	; 0x90
   151f8:	ldr	r1, [r5, #4]
   151fc:	str	r0, [r4, #148]	; 0x94
   15200:	ldr	r0, [pc, #560]	; 15438 <__generate_code_for_binary_boolean_expression@@Base+0x348>
   15204:	bl	11ad4 <fputs@plt>
   15208:	ldr	r1, [r6, #16]
   1520c:	ldrd	r2, [sp]
   15210:	cmp	r1, #7
   15214:	ldrls	pc, [pc, r1, lsl #2]
   15218:	b	153e0 <__generate_code_for_binary_boolean_expression@@Base+0x2f0>
   1521c:	andeq	r5, r1, ip, asr r2
   15220:	muleq	r1, ip, r2
   15224:	ldrdeq	r5, [r1], -ip
   15228:	andeq	r5, r1, ip, lsl r3
   1522c:	andeq	r5, r1, ip, lsr r2
   15230:	andeq	r5, r1, ip, lsr r2
   15234:	andeq	r5, r1, ip, asr r3
   15238:	muleq	r1, ip, r3
   1523c:	ldr	r3, [r4, #192]	; 0xc0
   15240:	ldr	r2, [r4, #196]	; 0xc4
   15244:	adds	r3, r3, #1
   15248:	adc	r2, r2, #0
   1524c:	str	r3, [r4, #192]	; 0xc0
   15250:	str	r2, [r4, #196]	; 0xc4
   15254:	add	sp, sp, #8
   15258:	pop	{r4, r5, r6, r7, r8, pc}
   1525c:	ldr	r1, [r4, #160]	; 0xa0
   15260:	ldr	r0, [r4, #164]	; 0xa4
   15264:	adds	r1, r1, #1
   15268:	adc	r0, r0, #0
   1526c:	str	r1, [r4, #160]	; 0xa0
   15270:	ldr	r1, [pc, #452]	; 1543c <__generate_code_for_binary_boolean_expression@@Base+0x34c>
   15274:	str	r0, [r4, #164]	; 0xa4
   15278:	ldr	r0, [r5, #4]
   1527c:	bl	11a2c <fprintf@plt>
   15280:	ldr	r3, [r4, #216]	; 0xd8
   15284:	ldr	r2, [r4, #220]	; 0xdc
   15288:	adds	r3, r3, #1
   1528c:	adc	r2, r2, #0
   15290:	str	r3, [r4, #216]	; 0xd8
   15294:	str	r2, [r4, #220]	; 0xdc
   15298:	b	15254 <__generate_code_for_binary_boolean_expression@@Base+0x164>
   1529c:	ldr	r1, [r4, #168]	; 0xa8
   152a0:	ldr	r0, [r4, #172]	; 0xac
   152a4:	adds	r1, r1, #1
   152a8:	adc	r0, r0, #0
   152ac:	str	r1, [r4, #168]	; 0xa8
   152b0:	ldr	r1, [pc, #392]	; 15440 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   152b4:	str	r0, [r4, #172]	; 0xac
   152b8:	ldr	r0, [r5, #4]
   152bc:	bl	11a2c <fprintf@plt>
   152c0:	ldr	r3, [r4, #224]	; 0xe0
   152c4:	ldr	r2, [r4, #228]	; 0xe4
   152c8:	adds	r3, r3, #1
   152cc:	adc	r2, r2, #0
   152d0:	str	r3, [r4, #224]	; 0xe0
   152d4:	str	r2, [r4, #228]	; 0xe4
   152d8:	b	15254 <__generate_code_for_binary_boolean_expression@@Base+0x164>
   152dc:	ldr	r1, [r4, #176]	; 0xb0
   152e0:	ldr	r0, [r4, #180]	; 0xb4
   152e4:	adds	r1, r1, #1
   152e8:	adc	r0, r0, #0
   152ec:	str	r1, [r4, #176]	; 0xb0
   152f0:	ldr	r1, [pc, #332]	; 15444 <__generate_code_for_binary_boolean_expression@@Base+0x354>
   152f4:	str	r0, [r4, #180]	; 0xb4
   152f8:	ldr	r0, [r5, #4]
   152fc:	bl	11a2c <fprintf@plt>
   15300:	ldr	r3, [r4, #232]	; 0xe8
   15304:	ldr	r2, [r4, #236]	; 0xec
   15308:	adds	r3, r3, #1
   1530c:	adc	r2, r2, #0
   15310:	str	r3, [r4, #232]	; 0xe8
   15314:	str	r2, [r4, #236]	; 0xec
   15318:	b	15254 <__generate_code_for_binary_boolean_expression@@Base+0x164>
   1531c:	ldr	r1, [r4, #184]	; 0xb8
   15320:	ldr	r0, [r4, #188]	; 0xbc
   15324:	adds	r1, r1, #1
   15328:	adc	r0, r0, #0
   1532c:	str	r1, [r4, #184]	; 0xb8
   15330:	ldr	r1, [pc, #272]	; 15448 <__generate_code_for_binary_boolean_expression@@Base+0x358>
   15334:	str	r0, [r4, #188]	; 0xbc
   15338:	ldr	r0, [r5, #4]
   1533c:	bl	11a2c <fprintf@plt>
   15340:	ldr	r3, [r4, #240]	; 0xf0
   15344:	ldr	r2, [r4, #244]	; 0xf4
   15348:	adds	r3, r3, #1
   1534c:	adc	r2, r2, #0
   15350:	str	r3, [r4, #240]	; 0xf0
   15354:	str	r2, [r4, #244]	; 0xf4
   15358:	b	15254 <__generate_code_for_binary_boolean_expression@@Base+0x164>
   1535c:	ldr	r1, [r4, #208]	; 0xd0
   15360:	ldr	r0, [r4, #212]	; 0xd4
   15364:	adds	r1, r1, #1
   15368:	adc	r0, r0, #0
   1536c:	str	r1, [r4, #208]	; 0xd0
   15370:	ldr	r1, [pc, #212]	; 1544c <__generate_code_for_binary_boolean_expression@@Base+0x35c>
   15374:	str	r0, [r4, #212]	; 0xd4
   15378:	ldr	r0, [r5, #4]
   1537c:	bl	11a2c <fprintf@plt>
   15380:	ldr	r3, [r4, #248]	; 0xf8
   15384:	ldr	r2, [r4, #252]	; 0xfc
   15388:	adds	r3, r3, #1
   1538c:	adc	r2, r2, #0
   15390:	str	r3, [r4, #248]	; 0xf8
   15394:	str	r2, [r4, #252]	; 0xfc
   15398:	b	15254 <__generate_code_for_binary_boolean_expression@@Base+0x164>
   1539c:	ldr	r1, [r4, #200]	; 0xc8
   153a0:	ldr	r0, [r4, #204]	; 0xcc
   153a4:	adds	r1, r1, #1
   153a8:	adc	r0, r0, #0
   153ac:	str	r1, [r4, #200]	; 0xc8
   153b0:	ldr	r1, [pc, #152]	; 15450 <__generate_code_for_binary_boolean_expression@@Base+0x360>
   153b4:	str	r0, [r4, #204]	; 0xcc
   153b8:	ldr	r0, [r5, #4]
   153bc:	bl	11a2c <fprintf@plt>
   153c0:	ldr	r2, [pc, #140]	; 15454 <__generate_code_for_binary_boolean_expression@@Base+0x364>
   153c4:	ldr	r3, [r2]
   153c8:	ldr	r1, [r2, #4]
   153cc:	adds	r3, r3, #1
   153d0:	adc	r1, r1, #0
   153d4:	str	r3, [r2]
   153d8:	str	r1, [r2, #4]
   153dc:	b	15254 <__generate_code_for_binary_boolean_expression@@Base+0x164>
   153e0:	ldr	r3, [r4, #152]	; 0x98
   153e4:	ldr	r2, [r4, #156]	; 0x9c
   153e8:	ldr	r0, [pc, #104]	; 15458 <__generate_code_for_binary_boolean_expression@@Base+0x368>
   153ec:	adds	r3, r3, #1
   153f0:	str	r3, [r4, #152]	; 0x98
   153f4:	adc	r2, r2, #0
   153f8:	ldr	r3, [pc, #92]	; 1545c <__generate_code_for_binary_boolean_expression@@Base+0x36c>
   153fc:	str	r2, [r4, #156]	; 0x9c
   15400:	ldr	r1, [r3]
   15404:	bl	11ad4 <fputs@plt>
   15408:	ldr	r2, [pc, #80]	; 15460 <__generate_code_for_binary_boolean_expression@@Base+0x370>
   1540c:	mov	r0, #1
   15410:	ldr	r3, [r2, #-8]
   15414:	ldr	r1, [r2, #-4]
   15418:	adds	r3, r3, #1
   1541c:	adc	r1, r1, #0
   15420:	str	r3, [r2, #-8]
   15424:	str	r1, [r2, #-4]
   15428:	bl	11a08 <exit@plt>
   1542c:	andeq	sl, r2, r0, ror #9
   15430:	andeq	r8, r1, r8, lsr #2
   15434:	andeq	r8, r1, r1, ror #2
   15438:	andeq	r8, r1, fp, ror #2
   1543c:	andeq	r8, r1, r8, ror r1
   15440:	andeq	r8, r1, fp, lsl #3
   15444:	muleq	r1, lr, r1
   15448:			; <UNDEFINED> instruction: 0x000181b1
   1544c:	andeq	r8, r1, r4, asr #3
   15450:	ldrdeq	r8, [r1], -r7
   15454:	andeq	sl, r2, r0, ror #11
   15458:	andeq	r8, r1, sl, ror #3
   1545c:	andeq	r9, r2, r0, lsr #21
   15460:	strdeq	sl, [r2], -r0

00015464 <__generate_code_for_unary_boolean_expression@@Base>:
   15464:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15468:	mov	r7, r3
   1546c:	mov	r6, r2
   15470:	mov	r5, r0
   15474:	mov	r8, r1
   15478:	ldr	r4, [pc, #264]	; 15588 <__generate_code_for_unary_boolean_expression@@Base+0x124>
   1547c:	ldr	r9, [r1, #8]
   15480:	ldr	r1, [r0, #4]
   15484:	ldr	r3, [r4]
   15488:	ldr	r2, [r4, #4]
   1548c:	ldr	r0, [pc, #248]	; 1558c <__generate_code_for_unary_boolean_expression@@Base+0x128>
   15490:	adds	r3, r3, #1
   15494:	adc	r2, r2, #0
   15498:	str	r3, [r4]
   1549c:	str	r2, [r4, #4]
   154a0:	bl	11ad4 <fputs@plt>
   154a4:	ldr	r3, [r4, #8]
   154a8:	ldr	r2, [r4, #12]
   154ac:	ldr	r0, [pc, #220]	; 15590 <__generate_code_for_unary_boolean_expression@@Base+0x12c>
   154b0:	adds	r3, r3, #1
   154b4:	ldr	r1, [r5, #4]
   154b8:	adc	r2, r2, #0
   154bc:	str	r3, [r4, #8]
   154c0:	str	r2, [r4, #12]
   154c4:	bl	11ad4 <fputs@plt>
   154c8:	ldr	r3, [r4, #16]
   154cc:	mov	r1, r9
   154d0:	mov	r0, r5
   154d4:	ldr	r2, [r4, #20]
   154d8:	adds	r3, r3, #1
   154dc:	adc	r2, r2, #0
   154e0:	str	r3, [r4, #16]
   154e4:	str	r2, [r4, #20]
   154e8:	bl	14f9c <__generate_code_for_int@@Base>
   154ec:	ldr	r3, [r8, #16]
   154f0:	cmp	r3, #8
   154f4:	bne	15540 <__generate_code_for_unary_boolean_expression@@Base+0xdc>
   154f8:	ldr	r3, [r4, #32]
   154fc:	ldr	r2, [r4, #36]	; 0x24
   15500:	ldr	r1, [pc, #140]	; 15594 <__generate_code_for_unary_boolean_expression@@Base+0x130>
   15504:	adds	r3, r3, #1
   15508:	ldr	r0, [r5, #4]
   1550c:	adc	r2, r2, #0
   15510:	str	r3, [r4, #32]
   15514:	mov	r3, r7
   15518:	str	r2, [r4, #36]	; 0x24
   1551c:	mov	r2, r6
   15520:	bl	11a2c <fprintf@plt>
   15524:	ldr	r3, [r4, #40]	; 0x28
   15528:	ldr	r2, [r4, #44]	; 0x2c
   1552c:	adds	r3, r3, #1
   15530:	adc	r2, r2, #0
   15534:	str	r3, [r4, #40]	; 0x28
   15538:	str	r2, [r4, #44]	; 0x2c
   1553c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15540:	ldr	r3, [r4, #24]
   15544:	ldr	r2, [r4, #28]
   15548:	ldr	r0, [pc, #72]	; 15598 <__generate_code_for_unary_boolean_expression@@Base+0x134>
   1554c:	adds	r3, r3, #1
   15550:	str	r3, [r4, #24]
   15554:	adc	r2, r2, #0
   15558:	ldr	r3, [pc, #60]	; 1559c <__generate_code_for_unary_boolean_expression@@Base+0x138>
   1555c:	str	r2, [r4, #28]
   15560:	ldr	r1, [r3]
   15564:	bl	11ad4 <fputs@plt>
   15568:	ldr	r3, [r4, #48]	; 0x30
   1556c:	mov	r0, #1
   15570:	ldr	r2, [r4, #52]	; 0x34
   15574:	adds	r3, r3, #1
   15578:	adc	r2, r2, #0
   1557c:	str	r3, [r4, #48]	; 0x30
   15580:	str	r2, [r4, #52]	; 0x34
   15584:	bl	11a08 <exit@plt>
   15588:	strdeq	sl, [r2], -r0
   1558c:	andeq	r8, r1, sl, lsl #4
   15590:	andeq	r8, r1, r1, ror #2
   15594:	andeq	r8, r1, fp, lsl #3
   15598:	andeq	r8, r1, sl, ror #3
   1559c:	andeq	r9, r2, r0, lsr #21

000155a0 <__generate_code_for_if_expression@@Base>:
   155a0:	ldr	ip, [r1, #16]
   155a4:	push	{r4, lr}
   155a8:	ldr	r4, [pc, #100]	; 15614 <__generate_code_for_if_expression@@Base+0x74>
   155ac:	cmp	ip, #8
   155b0:	bne	155e4 <__generate_code_for_if_expression@@Base+0x44>
   155b4:	ldm	r4, {ip, lr}
   155b8:	adds	ip, ip, #1
   155bc:	adc	lr, lr, #0
   155c0:	stm	r4, {ip, lr}
   155c4:	bl	15464 <__generate_code_for_unary_boolean_expression@@Base>
   155c8:	ldr	r3, [r4, #8]
   155cc:	ldr	r2, [r4, #12]
   155d0:	adds	r3, r3, #1
   155d4:	adc	r2, r2, #0
   155d8:	str	r3, [r4, #8]
   155dc:	str	r2, [r4, #12]
   155e0:	pop	{r4, pc}
   155e4:	ldmdb	r4, {ip, lr}
   155e8:	adds	ip, ip, #1
   155ec:	adc	lr, lr, #0
   155f0:	stmdb	r4, {ip, lr}
   155f4:	bl	150f0 <__generate_code_for_binary_boolean_expression@@Base>
   155f8:	ldr	r3, [r4, #16]
   155fc:	ldr	r2, [r4, #20]
   15600:	adds	r3, r3, #1
   15604:	adc	r2, r2, #0
   15608:	str	r3, [r4, #16]
   1560c:	str	r2, [r4, #20]
   15610:	pop	{r4, pc}
   15614:	andeq	sl, r2, r0, lsr r6

00015618 <__generate_code_for_body@@Base>:
   15618:	push	{r4, r5, r6, lr}
   1561c:	mov	r5, r0
   15620:	ldr	r4, [pc, #248]	; 15720 <__generate_code_for_body@@Base+0x108>
   15624:	ldr	r3, [r4, #-8]
   15628:	ldr	r2, [r4, #-4]
   1562c:	adds	r3, r3, #1
   15630:	adc	r2, r2, #0
   15634:	str	r3, [r4, #-8]
   15638:	str	r2, [r4, #-4]
   1563c:	cmp	r1, #0
   15640:	bne	15660 <__generate_code_for_body@@Base+0x48>
   15644:	ldr	r3, [r4, #40]	; 0x28
   15648:	ldr	r2, [r4, #44]	; 0x2c
   1564c:	adds	r3, r3, #1
   15650:	adc	r2, r2, #0
   15654:	str	r3, [r4, #40]	; 0x28
   15658:	str	r2, [r4, #44]	; 0x2c
   1565c:	pop	{r4, r5, r6, pc}
   15660:	ldm	r1, {r3, r6}
   15664:	cmp	r3, #3
   15668:	beq	156bc <__generate_code_for_body@@Base+0xa4>
   1566c:	cmp	r3, #4
   15670:	beq	156fc <__generate_code_for_body@@Base+0xe4>
   15674:	ldr	r3, [r4]
   15678:	ldr	r2, [r4, #4]
   1567c:	ldr	r0, [pc, #160]	; 15724 <__generate_code_for_body@@Base+0x10c>
   15680:	adds	r3, r3, #1
   15684:	str	r3, [r4]
   15688:	adc	r2, r2, #0
   1568c:	ldr	r3, [pc, #148]	; 15728 <__generate_code_for_body@@Base+0x110>
   15690:	str	r2, [r4, #4]
   15694:	ldr	r1, [r3]
   15698:	bl	11ad4 <fputs@plt>
   1569c:	ldr	r3, [r4, #32]
   156a0:	mov	r0, #1
   156a4:	ldr	r2, [r4, #36]	; 0x24
   156a8:	adds	r3, r3, #1
   156ac:	adc	r2, r2, #0
   156b0:	str	r3, [r4, #32]
   156b4:	str	r2, [r4, #36]	; 0x24
   156b8:	bl	11a08 <exit@plt>
   156bc:	ldr	r3, [r4, #8]
   156c0:	mov	r0, r5
   156c4:	ldr	r2, [r4, #12]
   156c8:	adds	r3, r3, #1
   156cc:	adc	r2, r2, #0
   156d0:	str	r3, [r4, #8]
   156d4:	str	r2, [r4, #12]
   156d8:	bl	14ff0 <__generate_code_for_return@@Base>
   156dc:	ldr	r3, [r4, #24]
   156e0:	ldr	r2, [r4, #28]
   156e4:	adds	r3, r3, #1
   156e8:	adc	r2, r2, #0
   156ec:	str	r3, [r4, #24]
   156f0:	str	r2, [r4, #28]
   156f4:	mov	r1, r6
   156f8:	b	1563c <__generate_code_for_body@@Base+0x24>
   156fc:	ldr	r3, [r4, #16]
   15700:	mov	r0, r5
   15704:	ldr	r2, [r4, #20]
   15708:	adds	r3, r3, #1
   1570c:	adc	r2, r2, #0
   15710:	str	r3, [r4, #16]
   15714:	str	r2, [r4, #20]
   15718:	bl	1572c <__generate_code_for_if@@Base>
   1571c:	b	156f4 <__generate_code_for_body@@Base+0xdc>
   15720:	andeq	sl, r2, r0, asr r6
   15724:	andeq	r8, r1, r6, lsl r2
   15728:	andeq	r9, r2, r0, lsr #21

0001572c <__generate_code_for_if@@Base>:
   1572c:	push	{r4, r5, r6, r7, r8, lr}
   15730:	mov	r7, r1
   15734:	mov	r5, r0
   15738:	ldr	r4, [pc, #236]	; 1582c <__generate_code_for_if@@Base+0x100>
   1573c:	ldr	r6, [r0, #8]
   15740:	ldr	r8, [r0, #12]
   15744:	ldr	r3, [r4]
   15748:	ldr	r2, [r4, #4]
   1574c:	ldr	r1, [r1, #8]
   15750:	adds	r3, r3, #1
   15754:	adc	r2, r2, #0
   15758:	str	r3, [r4]
   1575c:	str	r2, [r4, #4]
   15760:	adds	r2, r6, #1
   15764:	adc	r3, r8, #0
   15768:	strd	r2, [r0, #8]
   1576c:	mov	r2, r6
   15770:	mov	r3, r8
   15774:	bl	155a0 <__generate_code_for_if_expression@@Base>
   15778:	ldr	r3, [r4, #8]
   1577c:	mov	r0, r5
   15780:	ldr	r2, [r4, #12]
   15784:	ldr	r1, [r7, #12]
   15788:	adds	r3, r3, #1
   1578c:	adc	r2, r2, #0
   15790:	str	r3, [r4, #8]
   15794:	str	r2, [r4, #12]
   15798:	bl	15618 <__generate_code_for_body@@Base>
   1579c:	ldr	r3, [r4, #16]
   157a0:	ldr	r2, [r4, #20]
   157a4:	ldr	r1, [pc, #132]	; 15830 <__generate_code_for_if@@Base+0x104>
   157a8:	adds	r3, r3, #1
   157ac:	ldr	r0, [r5, #4]
   157b0:	adc	r2, r2, #0
   157b4:	str	r3, [r4, #16]
   157b8:	mov	r3, r8
   157bc:	str	r2, [r4, #20]
   157c0:	mov	r2, r6
   157c4:	bl	11a2c <fprintf@plt>
   157c8:	ldr	r1, [r7, #16]
   157cc:	cmp	r1, #0
   157d0:	bne	157f0 <__generate_code_for_if@@Base+0xc4>
   157d4:	ldr	r3, [r4, #32]
   157d8:	ldr	r2, [r4, #36]	; 0x24
   157dc:	adds	r3, r3, #1
   157e0:	adc	r2, r2, #0
   157e4:	str	r3, [r4, #32]
   157e8:	str	r2, [r4, #36]	; 0x24
   157ec:	pop	{r4, r5, r6, r7, r8, pc}
   157f0:	ldr	r3, [r4, #24]
   157f4:	mov	r0, r5
   157f8:	ldr	r2, [r4, #28]
   157fc:	adds	r3, r3, #1
   15800:	adc	r2, r2, #0
   15804:	str	r3, [r4, #24]
   15808:	str	r2, [r4, #28]
   1580c:	bl	15618 <__generate_code_for_body@@Base>
   15810:	ldr	r3, [r4, #40]	; 0x28
   15814:	ldr	r2, [r4, #44]	; 0x2c
   15818:	adds	r3, r3, #1
   1581c:	adc	r2, r2, #0
   15820:	str	r3, [r4, #40]	; 0x28
   15824:	str	r2, [r4, #44]	; 0x2c
   15828:	pop	{r4, r5, r6, r7, r8, pc}
   1582c:	andeq	sl, r2, r0, lsl #13
   15830:	andeq	r8, r1, fp, asr #4

00015834 <__generate_code_for_function@@Base>:
   15834:	push	{r4, r5, r6, lr}
   15838:	mov	r6, r1
   1583c:	mov	r5, r0
   15840:	ldr	r4, [pc, #100]	; 158ac <__generate_code_for_function@@Base+0x78>
   15844:	ldr	r1, [pc, #100]	; 158b0 <__generate_code_for_function@@Base+0x7c>
   15848:	ldr	r0, [r0, #4]
   1584c:	ldr	r3, [r4]
   15850:	ldr	r2, [r4, #4]
   15854:	adds	r3, r3, #1
   15858:	adc	r2, r2, #0
   1585c:	str	r3, [r4]
   15860:	str	r2, [r4, #4]
   15864:	ldr	r2, [r6, #8]
   15868:	bl	11a2c <fprintf@plt>
   1586c:	ldr	r3, [r4, #8]
   15870:	mov	r0, r5
   15874:	ldr	r2, [r4, #12]
   15878:	ldr	r1, [r6, #12]
   1587c:	adds	r3, r3, #1
   15880:	adc	r2, r2, #0
   15884:	str	r3, [r4, #8]
   15888:	str	r2, [r4, #12]
   1588c:	bl	15618 <__generate_code_for_body@@Base>
   15890:	ldr	r3, [r4, #16]
   15894:	ldr	r2, [r4, #20]
   15898:	adds	r3, r3, #1
   1589c:	adc	r2, r2, #0
   158a0:	str	r3, [r4, #16]
   158a4:	str	r2, [r4, #20]
   158a8:	pop	{r4, r5, r6, pc}
   158ac:			; <UNDEFINED> instruction: 0x0002a6b0
   158b0:	andeq	r8, r1, sl, asr r2

000158b4 <__generate_code_for_main@@Base>:
   158b4:	ldr	r3, [r1]
   158b8:	push	{r4, lr}
   158bc:	ldr	r4, [pc, #132]	; 15948 <__generate_code_for_main@@Base+0x94>
   158c0:	cmp	r3, #2
   158c4:	bne	15900 <__generate_code_for_main@@Base+0x4c>
   158c8:	ldr	r3, [r4]
   158cc:	ldr	r2, [r4, #4]
   158d0:	adds	r3, r3, #1
   158d4:	adc	r2, r2, #0
   158d8:	str	r3, [r4]
   158dc:	str	r2, [r4, #4]
   158e0:	bl	15834 <__generate_code_for_function@@Base>
   158e4:	ldr	r3, [r4, #8]
   158e8:	ldr	r2, [r4, #12]
   158ec:	adds	r3, r3, #1
   158f0:	adc	r2, r2, #0
   158f4:	str	r3, [r4, #8]
   158f8:	str	r2, [r4, #12]
   158fc:	pop	{r4, pc}
   15900:	ldr	r3, [r4, #-8]
   15904:	ldr	r2, [r4, #-4]
   15908:	ldr	r0, [pc, #60]	; 1594c <__generate_code_for_main@@Base+0x98>
   1590c:	adds	r3, r3, #1
   15910:	str	r3, [r4, #-8]
   15914:	adc	r2, r2, #0
   15918:	ldr	r3, [pc, #48]	; 15950 <__generate_code_for_main@@Base+0x9c>
   1591c:	str	r2, [r4, #-4]
   15920:	ldr	r1, [r3]
   15924:	bl	11ad4 <fputs@plt>
   15928:	ldr	r3, [r4, #16]
   1592c:	mov	r0, #1
   15930:	ldr	r2, [r4, #20]
   15934:	adds	r3, r3, #1
   15938:	adc	r2, r2, #0
   1593c:	str	r3, [r4, #16]
   15940:	str	r2, [r4, #20]
   15944:	bl	11a08 <exit@plt>
   15948:	ldrdeq	sl, [r2], -r0
   1594c:	andeq	r8, r1, pc, asr r2
   15950:	andeq	r9, r2, r0, lsr #21

00015954 <__generate_code@@Base>:
   15954:	push	{r4, r5, r6, lr}
   15958:	mov	r5, r0
   1595c:	mov	r6, r1
   15960:	ldr	r4, [pc, #96]	; 159c8 <__generate_code@@Base+0x74>
   15964:	ldr	r0, [pc, #96]	; 159cc <__generate_code@@Base+0x78>
   15968:	ldr	r1, [r5, #4]
   1596c:	ldr	r3, [r4, #-8]
   15970:	ldr	r2, [r4, #-4]
   15974:	adds	r3, r3, #1
   15978:	adc	r2, r2, #0
   1597c:	str	r3, [r4, #-8]
   15980:	str	r2, [r4, #-4]
   15984:	bl	11ad4 <fputs@plt>
   15988:	ldr	r3, [r4]
   1598c:	mov	r1, r6
   15990:	mov	r0, r5
   15994:	ldr	r2, [r4, #4]
   15998:	adds	r3, r3, #1
   1599c:	adc	r2, r2, #0
   159a0:	str	r3, [r4]
   159a4:	str	r2, [r4, #4]
   159a8:	bl	158b4 <__generate_code_for_main@@Base>
   159ac:	ldr	r3, [r4, #8]
   159b0:	ldr	r2, [r4, #12]
   159b4:	adds	r3, r3, #1
   159b8:	adc	r2, r2, #0
   159bc:	str	r3, [r4, #8]
   159c0:	str	r2, [r4, #12]
   159c4:	pop	{r4, r5, r6, pc}
   159c8:	strdeq	sl, [r2], -r0
   159cc:	andeq	r8, r1, lr, lsl #5

000159d0 <generate_code@@Base>:
   159d0:	push	{r4, r5, r6, lr}
   159d4:	mov	r6, r0
   159d8:	ldr	r4, [pc, #128]	; 15a60 <generate_code@@Base+0x90>
   159dc:	ldr	r0, [r0]
   159e0:	ldr	r3, [r4]
   159e4:	ldr	r2, [r4, #4]
   159e8:	adds	r3, r3, #1
   159ec:	adc	r2, r2, #0
   159f0:	str	r3, [r4]
   159f4:	str	r2, [r4, #4]
   159f8:	bl	14ea8 <build_ast@@Base>
   159fc:	ldr	r3, [r4, #8]
   15a00:	mov	r1, r0
   15a04:	mov	r5, r0
   15a08:	mov	r0, r6
   15a0c:	ldr	r2, [r4, #12]
   15a10:	adds	r3, r3, #1
   15a14:	adc	r2, r2, #0
   15a18:	str	r3, [r4, #8]
   15a1c:	str	r2, [r4, #12]
   15a20:	bl	15954 <__generate_code@@Base>
   15a24:	ldr	r3, [r4, #16]
   15a28:	mov	r0, r5
   15a2c:	ldr	r2, [r4, #20]
   15a30:	adds	r3, r3, #1
   15a34:	adc	r2, r2, #0
   15a38:	str	r3, [r4, #16]
   15a3c:	str	r2, [r4, #20]
   15a40:	bl	137e8 <free_node@@Base>
   15a44:	ldr	r3, [r4, #24]
   15a48:	ldr	r2, [r4, #28]
   15a4c:	adds	r3, r3, #1
   15a50:	adc	r2, r2, #0
   15a54:	str	r3, [r4, #24]
   15a58:	str	r2, [r4, #28]
   15a5c:	pop	{r4, r5, r6, pc}
   15a60:	andeq	sl, r2, r0, lsl #14
   15a64:	b	16d08 <generate_code@@Base+0x1338>
   15a68:	push	{r4, r5, r6, r7, r8, lr}
   15a6c:	subs	r5, r1, #0
   15a70:	popeq	{r4, r5, r6, r7, r8, pc}
   15a74:	mov	r4, r0
   15a78:	bl	15a64 <generate_code@@Base+0x94>
   15a7c:	ldr	r3, [r4]
   15a80:	ldr	r2, [r4, #4]
   15a84:	adds	r6, r3, r0
   15a88:	adc	r7, r2, r1
   15a8c:	subs	r5, r5, #1
   15a90:	strd	r6, [r4], #8
   15a94:	bne	15a78 <generate_code@@Base+0xa8>
   15a98:	pop	{r4, r5, r6, r7, r8, pc}
   15a9c:	ldr	r3, [pc, #20]	; 15ab8 <generate_code@@Base+0xe8>
   15aa0:	ldr	r2, [pc, #20]	; 15abc <generate_code@@Base+0xec>
   15aa4:	add	r3, pc, r3
   15aa8:	ldr	r3, [r3, r2]
   15aac:	ldmib	r3, {r0, r3}
   15ab0:	add	r0, r0, r3
   15ab4:	bx	lr
   15ab8:	andeq	r3, r1, r4, asr r5
   15abc:	andeq	r0, r0, ip, lsr #1
   15ac0:	ldr	r3, [pc, #28]	; 15ae4 <generate_code@@Base+0x114>
   15ac4:	ldr	r2, [pc, #28]	; 15ae8 <generate_code@@Base+0x118>
   15ac8:	add	r3, pc, r3
   15acc:	ldr	r3, [r3, r2]
   15ad0:	ldr	r2, [r3]
   15ad4:	cmp	r2, #0
   15ad8:	ldrne	r0, [r3, #20]
   15adc:	moveq	r0, #1
   15ae0:	bx	lr
   15ae4:	andeq	r3, r1, r0, lsr r5
   15ae8:	andeq	r0, r0, ip, lsr #1
   15aec:	bx	lr
   15af0:	ldr	ip, [pc, #32]	; 15b18 <generate_code@@Base+0x148>
   15af4:	mov	r3, #32
   15af8:	teq	r0, r1
   15afc:	movmi	r2, ip
   15b00:	movpl	r2, #0
   15b04:	subs	r3, r3, #1
   15b08:	lsl	r1, r1, #1
   15b0c:	eor	r0, r2, r0, lsl #1
   15b10:	bne	15af8 <generate_code@@Base+0x128>
   15b14:	bx	lr
   15b18:	strbeq	r1, [r1], #3511	; 0xdb7
   15b1c:	ldr	r2, [pc, #60]	; 15b60 <generate_code@@Base+0x190>
   15b20:	ldr	r3, [pc, #60]	; 15b64 <generate_code@@Base+0x194>
   15b24:	add	r2, pc, r2
   15b28:	push	{r4, lr}
   15b2c:	ldr	r4, [r2, r3]
   15b30:	ldr	r0, [r4]
   15b34:	cmp	r0, #0
   15b38:	popeq	{r4, pc}
   15b3c:	ldr	r3, [pc, #36]	; 15b68 <generate_code@@Base+0x198>
   15b40:	ldr	r3, [r2, r3]
   15b44:	ldr	r3, [r3]
   15b48:	cmp	r0, r3
   15b4c:	popeq	{r4, pc}
   15b50:	bl	11a74 <fclose@plt>
   15b54:	mov	r3, #0
   15b58:	str	r3, [r4]
   15b5c:	pop	{r4, pc}
   15b60:	ldrdeq	r3, [r1], -r4
   15b64:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15b68:	andeq	r0, r0, r0, lsr #1
   15b6c:	ldr	r3, [pc, #76]	; 15bc0 <generate_code@@Base+0x1f0>
   15b70:	ldr	r1, [pc, #76]	; 15bc4 <generate_code@@Base+0x1f4>
   15b74:	add	r3, pc, r3
   15b78:	push	{r4, r5, r6, lr}
   15b7c:	mov	r5, r0
   15b80:	ldr	r4, [r3, r1]
   15b84:	lsl	r1, r0, #2
   15b88:	mov	r0, r4
   15b8c:	mov	r2, #1
   15b90:	ldr	r3, [r0], #28
   15b94:	bl	1199c <fwrite@plt>
   15b98:	cmp	r0, #1
   15b9c:	movne	r3, #1
   15ba0:	ldr	r0, [r4, #8]
   15ba4:	strne	r3, [r4, #20]
   15ba8:	ldr	r3, [r4, #4]
   15bac:	sub	r0, r0, r5
   15bb0:	add	r3, r3, r5
   15bb4:	str	r3, [r4, #4]
   15bb8:	str	r0, [r4, #8]
   15bbc:	pop	{r4, r5, r6, pc}
   15bc0:	andeq	r3, r1, r4, lsl #9
   15bc4:	andeq	r0, r0, ip, lsr #1
   15bc8:	ldr	r3, [pc, #80]	; 15c20 <generate_code@@Base+0x250>
   15bcc:	ldr	r2, [pc, #80]	; 15c24 <generate_code@@Base+0x254>
   15bd0:	add	r3, pc, r3
   15bd4:	push	{r4, r5, r6, lr}
   15bd8:	mov	r5, r0
   15bdc:	ldr	r4, [r3, r2]
   15be0:	ldr	r3, [r4, #8]
   15be4:	cmp	r3, #1024	; 0x400
   15be8:	bcs	15c00 <generate_code@@Base+0x230>
   15bec:	add	r0, r3, #7
   15bf0:	add	r3, r5, r3
   15bf4:	str	r3, [r4, #8]
   15bf8:	add	r0, r4, r0, lsl #2
   15bfc:	pop	{r4, r5, r6, pc}
   15c00:	mov	r0, #1024	; 0x400
   15c04:	bl	15b6c <generate_code@@Base+0x19c>
   15c08:	ldr	r3, [r4, #8]
   15c0c:	cmp	r3, #0
   15c10:	addne	r2, r4, #4096	; 0x1000
   15c14:	ldrne	r2, [r2, #28]
   15c18:	strne	r2, [r4, #28]
   15c1c:	b	15bec <generate_code@@Base+0x21c>
   15c20:	andeq	r3, r1, r8, lsr #8
   15c24:	andeq	r0, r0, ip, lsr #1
   15c28:	ldr	r3, [pc, #192]	; 15cf0 <generate_code@@Base+0x320>
   15c2c:	ldr	r2, [pc, #192]	; 15cf4 <generate_code@@Base+0x324>
   15c30:	add	r3, pc, r3
   15c34:	push	{r4, r5, r6, lr}
   15c38:	ldr	r4, [r3, r2]
   15c3c:	ldr	r2, [r4, #24]
   15c40:	ldr	r3, [r4, #8]
   15c44:	ldr	ip, [r4, #12]
   15c48:	cmp	r2, #0
   15c4c:	sub	ip, ip, r3
   15c50:	ble	15ccc <generate_code@@Base+0x2fc>
   15c54:	cmp	ip, r0
   15c58:	mov	r5, r0
   15c5c:	bcs	15cb8 <generate_code@@Base+0x2e8>
   15c60:	ldr	r2, [r4, #4]
   15c64:	cmp	ip, #0
   15c68:	add	r2, r2, r3
   15c6c:	str	r2, [r4, #4]
   15c70:	addne	r2, r4, #28
   15c74:	mov	r0, r4
   15c78:	ldrne	r3, [r2, r3, lsl #2]
   15c7c:	mov	r6, #0
   15c80:	strne	r3, [r4, #28]
   15c84:	ldr	r3, [r0], #28
   15c88:	mov	r2, #4096	; 0x1000
   15c8c:	add	r0, r0, ip, lsl #2
   15c90:	mov	r1, #1
   15c94:	str	ip, [r4, #12]
   15c98:	str	r6, [r4, #8]
   15c9c:	bl	119b4 <fread@plt>
   15ca0:	ldr	r3, [r4, #12]
   15ca4:	add	r0, r3, r0, lsr #2
   15ca8:	cmp	r0, r5
   15cac:	str	r0, [r4, #12]
   15cb0:	bcc	15cd4 <generate_code@@Base+0x304>
   15cb4:	ldr	r3, [r4, #8]
   15cb8:	add	r0, r3, #7
   15cbc:	add	r5, r5, r3
   15cc0:	str	r5, [r4, #8]
   15cc4:	add	r0, r4, r0, lsl #2
   15cc8:	pop	{r4, r5, r6, pc}
   15ccc:	mov	r0, #0
   15cd0:	pop	{r4, r5, r6, pc}
   15cd4:	ldr	r3, [r4, #16]
   15cd8:	str	r6, [r4, #12]
   15cdc:	add	r5, r5, r3
   15ce0:	sub	r5, r5, r0
   15ce4:	str	r5, [r4, #16]
   15ce8:	mov	r0, r6
   15cec:	pop	{r4, r5, r6, pc}
   15cf0:	andeq	r3, r1, r8, asr #7
   15cf4:	andeq	r0, r0, ip, lsr #1
   15cf8:	push	{r4, r5, r6, lr}
   15cfc:	ldr	r4, [pc, #92]	; 15d60 <generate_code@@Base+0x390>
   15d00:	ldr	r3, [pc, #92]	; 15d64 <generate_code@@Base+0x394>
   15d04:	add	r4, pc, r4
   15d08:	ldr	r5, [r4, r3]
   15d0c:	ldr	r0, [r5]
   15d10:	cmp	r0, #0
   15d14:	popne	{r4, r5, r6, pc}
   15d18:	ldr	r0, [pc, #72]	; 15d68 <generate_code@@Base+0x398>
   15d1c:	add	r0, pc, r0
   15d20:	bl	119cc <getenv@plt>
   15d24:	cmp	r0, #0
   15d28:	beq	15d58 <generate_code@@Base+0x388>
   15d2c:	ldr	r1, [pc, #56]	; 15d6c <generate_code@@Base+0x39c>
   15d30:	add	r1, pc, r1
   15d34:	bl	11abc <fopen64@plt>
   15d38:	str	r0, [r5]
   15d3c:	cmp	r0, #0
   15d40:	popne	{r4, r5, r6, pc}
   15d44:	ldr	r3, [pc, #36]	; 15d70 <generate_code@@Base+0x3a0>
   15d48:	ldr	r3, [r4, r3]
   15d4c:	ldr	r0, [r3]
   15d50:	str	r0, [r5]
   15d54:	pop	{r4, r5, r6, pc}
   15d58:	ldr	r0, [r5]
   15d5c:	b	15d3c <generate_code@@Base+0x36c>
   15d60:	strdeq	r3, [r1], -r4
   15d64:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15d68:	ldrdeq	r2, [r0], -r4
   15d6c:	ldrdeq	r2, [r0], -r0
   15d70:	andeq	r0, r0, r0, lsr #1
   15d74:	push	{r0, r1, r2, r3}
   15d78:	push	{lr}		; (str lr, [sp, #-4]!)
   15d7c:	sub	sp, sp, #12
   15d80:	add	r3, sp, #20
   15d84:	str	r3, [sp, #4]
   15d88:	bl	15cf8 <generate_code@@Base+0x328>
   15d8c:	ldr	r1, [sp, #16]
   15d90:	ldr	r2, [sp, #4]
   15d94:	bl	11a98 <vfprintf@plt>
   15d98:	add	sp, sp, #12
   15d9c:	pop	{lr}		; (ldr lr, [sp], #4)
   15da0:	add	sp, sp, #16
   15da4:	bx	lr
   15da8:	push	{r4, r5, r6, r7, r8, lr}
   15dac:	subs	r6, r1, #0
   15db0:	beq	15e04 <generate_code@@Base+0x434>
   15db4:	cmp	r2, #0
   15db8:	ldr	r7, [r6]
   15dbc:	beq	15df4 <generate_code@@Base+0x424>
   15dc0:	add	r4, r0, #12
   15dc4:	add	r5, r4, r2, lsl #2
   15dc8:	mov	r3, #0
   15dcc:	ldr	r2, [r4, #4]!
   15dd0:	add	r1, r6, r3, lsl #3
   15dd4:	cmp	r2, #0
   15dd8:	add	r8, r3, #1
   15ddc:	beq	15dec <generate_code@@Base+0x41c>
   15de0:	ldr	r0, [r1, #28]
   15de4:	bl	11978 <free@plt>
   15de8:	mov	r3, r8
   15dec:	cmp	r4, r5
   15df0:	bne	15dcc <generate_code@@Base+0x3fc>
   15df4:	mov	r0, r6
   15df8:	bl	11978 <free@plt>
   15dfc:	mov	r0, r7
   15e00:	pop	{r4, r5, r6, r7, r8, pc}
   15e04:	mov	r7, r6
   15e08:	b	15dfc <generate_code@@Base+0x42c>
   15e0c:	push	{r4, r5}
   15e10:	mov	r4, r0
   15e14:	mov	r5, r1
   15e18:	orrs	r3, r4, r5
   15e1c:	beq	15e60 <generate_code@@Base+0x490>
   15e20:	cmp	r1, #0
   15e24:	clzeq	r2, r0
   15e28:	addeq	r2, r2, #32
   15e2c:	clzne	r2, r1
   15e30:	rsb	r3, r2, #63	; 0x3f
   15e34:	cmp	r3, #1
   15e38:	bls	15e60 <generate_code@@Base+0x490>
   15e3c:	rsb	r1, r2, #61	; 0x3d
   15e40:	rsb	r0, r1, #32
   15e44:	lsr	r3, r4, r1
   15e48:	sub	r1, r1, #32
   15e4c:	orr	r3, r3, r5, lsl r0
   15e50:	orr	r3, r3, r5, lsr r1
   15e54:	rsb	r2, r2, #1073741886	; 0x4000003e
   15e58:	and	r0, r3, #3
   15e5c:	add	r0, r0, r2, lsl #2
   15e60:	pop	{r4, r5}
   15e64:	bx	lr
   15e68:	push	{r4, r5, r6, lr}
   15e6c:	mov	r1, r3
   15e70:	mov	r6, r0
   15e74:	mov	r0, r2
   15e78:	mov	r4, r2
   15e7c:	mov	r5, r3
   15e80:	bl	15e0c <generate_code@@Base+0x43c>
   15e84:	add	r0, r0, r0, lsl #1
   15e88:	lsl	r0, r0, #3
   15e8c:	add	r3, r6, r0
   15e90:	ldr	r1, [r6, r0]
   15e94:	ldr	r2, [r3, #16]
   15e98:	add	r1, r1, #1
   15e9c:	str	r1, [r6, r0]
   15ea0:	ldrd	r0, [r3, #8]
   15ea4:	ldr	ip, [r3, #20]
   15ea8:	adds	r2, r2, r4
   15eac:	str	r2, [r3, #16]
   15eb0:	adc	r2, ip, r5
   15eb4:	cmp	r4, r0
   15eb8:	sbcs	r1, r5, r1
   15ebc:	str	r2, [r3, #20]
   15ec0:	strdlt	r4, [r3, #8]
   15ec4:	pop	{r4, r5, r6, pc}
   15ec8:	ldr	r3, [r1, #8]
   15ecc:	cmp	r3, #0
   15ed0:	bxeq	lr
   15ed4:	add	r2, r1, #6016	; 0x1780
   15ed8:	push	{r4, r5, r6, r7, r8, lr}
   15edc:	mov	r3, r1
   15ee0:	mov	r8, r1
   15ee4:	mov	r7, r0
   15ee8:	ldrd	r4, [r1, #24]
   15eec:	add	r2, r2, #32
   15ef0:	mov	ip, #0
   15ef4:	mov	r0, #0
   15ef8:	mov	r1, #0
   15efc:	str	ip, [r3, #40]	; 0x28
   15f00:	strd	r4, [r3, #48]	; 0x30
   15f04:	strd	r0, [r3, #56]	; 0x38
   15f08:	add	r3, r3, #24
   15f0c:	cmp	r3, r2
   15f10:	bne	15efc <generate_code@@Base+0x52c>
   15f14:	cmp	r7, #0
   15f18:	popeq	{r4, r5, r6, r7, r8, pc}
   15f1c:	add	r8, r8, #40	; 0x28
   15f20:	ldr	r3, [r7, #16]
   15f24:	cmp	r3, #0
   15f28:	beq	15fb0 <generate_code@@Base+0x5e0>
   15f2c:	ldr	r2, [r7, #52]	; 0x34
   15f30:	cmp	r2, #0
   15f34:	beq	15fb0 <generate_code@@Base+0x5e0>
   15f38:	mov	r6, #0
   15f3c:	b	15f4c <generate_code@@Base+0x57c>
   15f40:	add	r6, r6, #1
   15f44:	cmp	r2, r6
   15f48:	beq	15fb0 <generate_code@@Base+0x5e0>
   15f4c:	ldr	r3, [r7, #56]	; 0x38
   15f50:	ldr	r5, [r3, r6, lsl #2]
   15f54:	cmp	r5, #0
   15f58:	beq	15f40 <generate_code@@Base+0x570>
   15f5c:	ldr	r3, [r5]
   15f60:	cmp	r3, r7
   15f64:	bne	15f40 <generate_code@@Base+0x570>
   15f68:	ldr	r3, [r5, #16]
   15f6c:	cmp	r3, #0
   15f70:	beq	15f40 <generate_code@@Base+0x570>
   15f74:	mov	r4, #0
   15f78:	ldr	r2, [r5, #20]
   15f7c:	lsl	r3, r4, #3
   15f80:	add	r2, r2, r3
   15f84:	mov	r0, r8
   15f88:	ldrd	r2, [r2]
   15f8c:	bl	15e68 <generate_code@@Base+0x498>
   15f90:	ldr	r3, [r5, #16]
   15f94:	add	r4, r4, #1
   15f98:	cmp	r3, r4
   15f9c:	bhi	15f78 <generate_code@@Base+0x5a8>
   15fa0:	ldr	r2, [r7, #52]	; 0x34
   15fa4:	add	r6, r6, #1
   15fa8:	cmp	r2, r6
   15fac:	bne	15f4c <generate_code@@Base+0x57c>
   15fb0:	ldr	r7, [r7, #4]
   15fb4:	cmp	r7, #0
   15fb8:	bne	15f20 <generate_code@@Base+0x550>
   15fbc:	pop	{r4, r5, r6, r7, r8, pc}
   15fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fc4:	sub	sp, sp, #12
   15fc8:	mov	r6, r0
   15fcc:	str	r0, [sp, #4]
   15fd0:	mov	r8, r2
   15fd4:	mov	r0, r1
   15fd8:	mov	r4, r1
   15fdc:	ldr	r2, [pc, #364]	; 16150 <generate_code@@Base+0x780>
   15fe0:	mov	r1, #0
   15fe4:	bl	11a50 <memset@plt>
   15fe8:	mov	r5, #0
   15fec:	cmp	r6, #0
   15ff0:	str	r5, [r8]
   15ff4:	beq	16134 <generate_code@@Base+0x764>
   15ff8:	mov	r9, r5
   15ffc:	ldr	r0, [r6, #12]
   16000:	bl	11a14 <strlen@plt>
   16004:	cmp	r5, r0
   16008:	strcc	r0, [r8]
   1600c:	mov	r0, r9
   16010:	ldr	r1, [r6, #8]
   16014:	bl	15af0 <generate_code@@Base+0x120>
   16018:	ldr	r7, [r6, #52]	; 0x34
   1601c:	mov	r1, r7
   16020:	bl	15af0 <generate_code@@Base+0x120>
   16024:	cmp	r7, #0
   16028:	mov	r9, r0
   1602c:	beq	16120 <generate_code@@Base+0x750>
   16030:	ldr	r5, [r6, #56]	; 0x38
   16034:	add	r7, r5, r7, lsl #2
   16038:	sub	r7, r7, #4
   1603c:	sub	r5, r5, #4
   16040:	b	16070 <generate_code@@Base+0x6a0>
   16044:	ldr	r3, [sl]
   16048:	mov	r0, r9
   1604c:	cmp	r3, r6
   16050:	beq	1608c <generate_code@@Base+0x6bc>
   16054:	mov	r1, #0
   16058:	bl	15af0 <generate_code@@Base+0x120>
   1605c:	mov	r1, #0
   16060:	bl	15af0 <generate_code@@Base+0x120>
   16064:	mov	r9, r0
   16068:	cmp	r5, r7
   1606c:	beq	16120 <generate_code@@Base+0x750>
   16070:	ldr	sl, [r5, #4]!
   16074:	cmp	sl, #0
   16078:	bne	16044 <generate_code@@Base+0x674>
   1607c:	mov	r1, sl
   16080:	mov	r0, r9
   16084:	bl	15af0 <generate_code@@Base+0x120>
   16088:	b	1605c <generate_code@@Base+0x68c>
   1608c:	ldr	r1, [sl, #12]
   16090:	bl	15af0 <generate_code@@Base+0x120>
   16094:	ldr	r1, [sl, #8]
   16098:	bl	15af0 <generate_code@@Base+0x120>
   1609c:	ldr	r3, [r6, #16]
   160a0:	cmp	r3, #0
   160a4:	mov	r9, r0
   160a8:	beq	16068 <generate_code@@Base+0x698>
   160ac:	ldr	fp, [sl, #16]
   160b0:	ldr	r3, [r4, #8]
   160b4:	mov	r1, fp
   160b8:	add	r3, r3, fp
   160bc:	str	r3, [r4, #8]
   160c0:	bl	15af0 <generate_code@@Base+0x120>
   160c4:	cmp	fp, #0
   160c8:	mov	r9, r0
   160cc:	beq	16068 <generate_code@@Base+0x698>
   160d0:	ldr	r2, [sl, #20]
   160d4:	ldr	r3, [r4, #16]
   160d8:	add	lr, r2, fp, lsl #3
   160dc:	ldr	ip, [r4, #20]
   160e0:	sub	lr, lr, #8
   160e4:	sub	r2, r2, #8
   160e8:	ldrd	r0, [r2, #8]!
   160ec:	ldrd	sl, [r4, #24]
   160f0:	adds	r3, r3, r0
   160f4:	adc	ip, ip, r1
   160f8:	str	ip, [r4, #20]
   160fc:	str	r3, [r4, #16]
   16100:	ldrd	r0, [r2]
   16104:	cmp	sl, r0
   16108:	sbcs	sl, fp, r1
   1610c:	strdlt	r0, [r4, #24]
   16110:	cmp	lr, r2
   16114:	bne	160e8 <generate_code@@Base+0x718>
   16118:	cmp	r5, r7
   1611c:	bne	16070 <generate_code@@Base+0x6a0>
   16120:	ldr	r6, [r6, #4]
   16124:	cmp	r6, #0
   16128:	beq	16138 <generate_code@@Base+0x768>
   1612c:	ldr	r5, [r8]
   16130:	b	15ffc <generate_code@@Base+0x62c>
   16134:	ldr	r9, [sp, #4]
   16138:	ldr	r0, [sp, #4]
   1613c:	mov	r1, r4
   16140:	bl	15ec8 <generate_code@@Base+0x4f8>
   16144:	mov	r0, r9
   16148:	add	sp, sp, #12
   1614c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16150:	andeq	r1, r0, r8, asr #15
   16154:	push	{r4, r5, r6, lr}
   16158:	mov	r4, r0
   1615c:	ldr	r0, [pc, #192]	; 16224 <generate_code@@Base+0x854>
   16160:	add	r0, pc, r0
   16164:	bl	119cc <getenv@plt>
   16168:	subs	r3, r0, #0
   1616c:	beq	16178 <generate_code@@Base+0x7a8>
   16170:	bl	11ab0 <atoi@plt>
   16174:	bic	r3, r0, r0, asr #31
   16178:	ldr	r0, [pc, #168]	; 16228 <generate_code@@Base+0x858>
   1617c:	str	r3, [r4, #8]
   16180:	add	r0, pc, r0
   16184:	bl	119cc <getenv@plt>
   16188:	subs	r6, r0, #0
   1618c:	beq	161fc <generate_code@@Base+0x82c>
   16190:	bl	11a14 <strlen@plt>
   16194:	ldr	r3, [r4, #4]
   16198:	add	r3, r3, #2
   1619c:	cmp	r0, #0
   161a0:	bne	161dc <generate_code@@Base+0x80c>
   161a4:	ldr	r2, [r4, #8]
   161a8:	cmp	r2, #0
   161ac:	beq	16210 <generate_code@@Base+0x840>
   161b0:	ldr	r6, [pc, #116]	; 1622c <generate_code@@Base+0x85c>
   161b4:	mov	r5, #1
   161b8:	add	r6, pc, r6
   161bc:	str	r5, [r4, #12]
   161c0:	add	r0, r3, r5
   161c4:	bl	119d8 <malloc@plt>
   161c8:	mov	r2, r5
   161cc:	mov	r1, r6
   161d0:	str	r0, [r4]
   161d4:	pop	{r4, r5, r6, lr}
   161d8:	b	11984 <memcpy@plt>
   161dc:	sub	r5, r0, #1
   161e0:	ldrb	r2, [r6, r5]
   161e4:	cmp	r2, #47	; 0x2f
   161e8:	movne	r5, r0
   161ec:	bne	161bc <generate_code@@Base+0x7ec>
   161f0:	cmp	r5, #0
   161f4:	bne	161bc <generate_code@@Base+0x7ec>
   161f8:	b	161a4 <generate_code@@Base+0x7d4>
   161fc:	ldr	r2, [r4, #8]
   16200:	ldr	r3, [r4, #4]
   16204:	cmp	r2, #0
   16208:	add	r3, r3, #2
   1620c:	bne	161b0 <generate_code@@Base+0x7e0>
   16210:	str	r2, [r4, #12]
   16214:	mov	r0, r3
   16218:	bl	119d8 <malloc@plt>
   1621c:	str	r0, [r4]
   16220:	pop	{r4, r5, r6, pc}
   16224:	andeq	r2, r0, r8, lsr #3
   16228:	muleq	r0, ip, r1
   1622c:	andeq	r2, r0, ip, asr #2
   16230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16234:	sub	sp, sp, #6080	; 0x17c0
   16238:	sub	sp, sp, #36	; 0x24
   1623c:	mov	r3, r0
   16240:	str	r1, [sp, #40]	; 0x28
   16244:	mov	r1, #0
   16248:	mov	r4, r1
   1624c:	str	r0, [sp, #56]	; 0x38
   16250:	add	r7, r3, #6016	; 0x1780
   16254:	add	r0, sp, #64	; 0x40
   16258:	add	r6, sp, #2016	; 0x7e0
   1625c:	ldr	r2, [pc, #984]	; 1663c <generate_code@@Base+0xc6c>
   16260:	mov	r5, #251	; 0xfb
   16264:	str	r0, [sp, #60]	; 0x3c
   16268:	str	r5, [sp, #52]	; 0x34
   1626c:	str	r6, [sp, #36]	; 0x24
   16270:	mov	r9, r4
   16274:	bl	11a50 <memset@plt>
   16278:	mov	sl, r4
   1627c:	add	r3, r7, #8
   16280:	mov	r0, r4
   16284:	str	r3, [sp, #48]	; 0x30
   16288:	sub	r3, r6, #1952	; 0x7a0
   1628c:	str	r3, [sp, #44]	; 0x2c
   16290:	ldr	r3, [sp, #48]	; 0x30
   16294:	ldr	r2, [r3, #16]
   16298:	ldr	r7, [r3]
   1629c:	str	r2, [sp, #16]
   162a0:	ldr	r2, [r3, #20]
   162a4:	cmp	r7, #0
   162a8:	str	r2, [sp, #20]
   162ac:	beq	165cc <generate_code@@Base+0xbfc>
   162b0:	ldrd	r2, [r3, #8]
   162b4:	str	r9, [sp, #12]
   162b8:	strd	r2, [sp, #24]
   162bc:	b	1639c <generate_code@@Base+0x9cc>
   162c0:	bls	16630 <generate_code@@Base+0xc60>
   162c4:	ldr	r3, [sp, #12]
   162c8:	mov	r2, r4
   162cc:	umull	r0, r1, r7, r3
   162d0:	mov	r3, #0
   162d4:	mla	r1, r7, sl, r1
   162d8:	bl	17b4c <__gcov_sort_n_vals@@Base+0x568>
   162dc:	mov	r6, r0
   162e0:	mov	r8, r1
   162e4:	ldr	r3, [sp, #12]
   162e8:	sub	r4, r4, r7
   162ec:	subs	r3, r3, r6
   162f0:	sbc	sl, sl, r8
   162f4:	mov	fp, r7
   162f8:	mov	r7, #0
   162fc:	str	r3, [sp, #12]
   16300:	ldr	r0, [sp, #16]
   16304:	ldr	r3, [sp, #20]
   16308:	str	r7, [sp, #16]
   1630c:	str	r7, [sp, #20]
   16310:	adds	r6, r6, r0
   16314:	ldrd	r0, [sp]
   16318:	adc	r8, r8, r3
   1631c:	bl	15e0c <generate_code@@Base+0x43c>
   16320:	ldr	r3, [sp, #44]	; 0x2c
   16324:	add	r1, r0, r0, lsl #1
   16328:	lsl	r1, r1, #3
   1632c:	add	ip, r3, r1
   16330:	ldr	r3, [sp, #36]	; 0x24
   16334:	ldr	lr, [ip, #16]
   16338:	add	r1, r3, r1
   1633c:	adds	r6, lr, r6
   16340:	ldr	lr, [ip, #20]
   16344:	ldrd	r2, [ip, #8]
   16348:	adc	lr, lr, r8
   1634c:	ldrd	r8, [sp]
   16350:	str	lr, [sp, #32]
   16354:	orrs	lr, r2, r3
   16358:	moveq	lr, #1
   1635c:	movne	lr, #0
   16360:	cmp	r8, r2
   16364:	sbcs	r3, r9, r3
   16368:	orrlt	lr, lr, #1
   1636c:	cmp	lr, #0
   16370:	str	r6, [ip, #16]
   16374:	ldr	r6, [r1, #-1952]	; 0xfffff860
   16378:	ldr	r3, [sp, #32]
   1637c:	strdne	r8, [ip, #8]
   16380:	cmp	r4, #0
   16384:	add	fp, r6, fp
   16388:	subeq	r5, r5, #1
   1638c:	cmp	r7, #0
   16390:	str	r3, [ip, #20]
   16394:	str	fp, [r1, #-1952]	; 0xfffff860
   16398:	beq	165c8 <generate_code@@Base+0xbf8>
   1639c:	cmp	r4, #0
   163a0:	beq	16424 <generate_code@@Base+0xa54>
   163a4:	add	r2, r5, r5, lsl #1
   163a8:	ldr	r3, [sp, #40]	; 0x28
   163ac:	add	r2, r3, r2, lsl #3
   163b0:	ldrd	r0, [sp, #24]
   163b4:	ldr	r3, [r2, #8]
   163b8:	ldr	r2, [r2, #12]
   163bc:	adds	r3, r0, r3
   163c0:	str	r3, [sp]
   163c4:	adc	r3, r1, r2
   163c8:	cmp	r4, r7
   163cc:	str	r3, [sp, #4]
   163d0:	bcs	162c0 <generate_code@@Base+0x8f0>
   163d4:	ldr	r6, [sp, #16]
   163d8:	ldr	r8, [sp, #20]
   163dc:	mov	r2, r7
   163e0:	umull	r0, r1, r4, r6
   163e4:	mov	r3, #0
   163e8:	mla	r1, r4, r8, r1
   163ec:	bl	17b4c <__gcov_sort_n_vals@@Base+0x568>
   163f0:	sub	r7, r7, r4
   163f4:	mov	fp, r4
   163f8:	mov	r4, #0
   163fc:	subs	r2, r6, r0
   16400:	str	r2, [sp, #16]
   16404:	sbc	r2, r8, r1
   16408:	ldr	r6, [sp, #12]
   1640c:	mov	r8, sl
   16410:	mov	r3, r1
   16414:	str	r2, [sp, #20]
   16418:	str	r4, [sp, #12]
   1641c:	mov	sl, r4
   16420:	b	16310 <generate_code@@Base+0x940>
   16424:	cmp	r5, #0
   16428:	blt	16628 <generate_code@@Base+0xc58>
   1642c:	ldr	r3, [sp, #40]	; 0x28
   16430:	add	r2, r5, r5, lsl #1
   16434:	ldr	r4, [r3, r2, lsl #3]
   16438:	add	r2, r3, r2, lsl #3
   1643c:	cmp	r4, #0
   16440:	bne	165b8 <generate_code@@Base+0xbe8>
   16444:	mov	r3, r2
   16448:	ldr	r9, [sp, #12]
   1644c:	b	16460 <generate_code@@Base+0xa90>
   16450:	ldr	r4, [r3]
   16454:	mov	r2, r3
   16458:	cmp	r4, #0
   1645c:	bne	165b8 <generate_code@@Base+0xbe8>
   16460:	subs	r5, r5, #1
   16464:	sub	r3, r3, #24
   16468:	bcs	16450 <generate_code@@Base+0xa80>
   1646c:	ldr	r2, [sp, #52]	; 0x34
   16470:	ldr	ip, [sp, #36]	; 0x24
   16474:	ldr	r4, [sp, #16]
   16478:	lsl	r3, r2, #1
   1647c:	add	r1, r3, r2
   16480:	sub	r2, ip, #1952	; 0x7a0
   16484:	lsl	r1, r1, #3
   16488:	add	r2, r2, r1
   1648c:	add	r1, ip, r1
   16490:	ldr	ip, [r2, #16]
   16494:	ldr	lr, [r1, #-1952]	; 0xfffff860
   16498:	adds	ip, ip, r4
   1649c:	add	r7, lr, r7
   164a0:	ldrd	r4, [r2, #8]
   164a4:	ldr	lr, [r2, #20]
   164a8:	str	r7, [r1, #-1952]	; 0xfffff860
   164ac:	ldr	r1, [sp, #20]
   164b0:	str	ip, [r2, #16]
   164b4:	adc	lr, lr, r1
   164b8:	orrs	r1, r4, r5
   164bc:	str	lr, [r2, #20]
   164c0:	beq	16598 <generate_code@@Base+0xbc8>
   164c4:	ldrd	r6, [sp, #24]
   164c8:	cmp	r6, r4
   164cc:	sbcs	r2, r7, r5
   164d0:	blt	16598 <generate_code@@Base+0xbc8>
   164d4:	ldr	r2, [sp, #52]	; 0x34
   164d8:	ldr	lr, [sp, #60]	; 0x3c
   164dc:	add	ip, r3, r2
   164e0:	ldr	r3, [sp, #56]	; 0x38
   164e4:	lsl	ip, ip, #3
   164e8:	add	r1, lr, ip
   164ec:	add	ip, r3, ip
   164f0:	b	1654c <generate_code@@Base+0xb7c>
   164f4:	ldr	r3, [r1, #-8]
   164f8:	ldr	r6, [ip, #-8]
   164fc:	ldr	r7, [ip, #-4]
   16500:	ldr	r2, [r1, #-4]
   16504:	adds	r6, r3, r6
   16508:	ldrd	r4, [r1, #-16]
   1650c:	adc	r2, r2, r7
   16510:	ldr	r3, [r1, #-24]	; 0xffffffe8
   16514:	ldr	r7, [ip, #-24]	; 0xffffffe8
   16518:	orrs	r8, r4, r5
   1651c:	add	r3, r3, r7
   16520:	str	r2, [r1, #-4]
   16524:	str	r3, [r1, #-24]	; 0xffffffe8
   16528:	str	r6, [r1, #-8]
   1652c:	ldrd	r2, [ip, #-16]
   16530:	sub	ip, ip, #24
   16534:	beq	16544 <generate_code@@Base+0xb74>
   16538:	cmp	r2, r4
   1653c:	sbcs	r4, r3, r5
   16540:	bge	16548 <generate_code@@Base+0xb78>
   16544:	strd	r2, [r1, #-16]
   16548:	sub	r1, r1, #24
   1654c:	cmp	r1, lr
   16550:	bne	164f4 <generate_code@@Base+0xb24>
   16554:	ldr	r3, [sp, #36]	; 0x24
   16558:	add	r0, r0, r0, lsl #1
   1655c:	sub	r3, r3, #1952	; 0x7a0
   16560:	add	r3, r3, r0, lsl #3
   16564:	ldr	r1, [sp, #60]	; 0x3c
   16568:	ldr	r2, [r3, #16]
   1656c:	ldr	ip, [r3, #20]
   16570:	adds	r9, r2, r9
   16574:	adc	sl, ip, sl
   16578:	ldr	r0, [sp, #56]	; 0x38
   1657c:	ldr	r2, [pc, #184]	; 1663c <generate_code@@Base+0xc6c>
   16580:	str	r9, [r3, #16]
   16584:	str	sl, [r3, #20]
   16588:	bl	11984 <memcpy@plt>
   1658c:	add	sp, sp, #6080	; 0x17c0
   16590:	add	sp, sp, #36	; 0x24
   16594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16598:	ldr	r2, [sp, #52]	; 0x34
   1659c:	ldrd	r4, [sp, #24]
   165a0:	add	r1, r3, r2
   165a4:	ldr	r2, [sp, #36]	; 0x24
   165a8:	sub	r2, r2, #1952	; 0x7a0
   165ac:	add	r2, r2, r1, lsl #3
   165b0:	strd	r4, [r2, #8]
   165b4:	b	164d4 <generate_code@@Base+0xb04>
   165b8:	ldr	r3, [r2, #16]
   165bc:	ldr	sl, [r2, #20]
   165c0:	str	r3, [sp, #12]
   165c4:	b	163b0 <generate_code@@Base+0x9e0>
   165c8:	ldr	r9, [sp, #12]
   165cc:	ldr	r3, [sp, #52]	; 0x34
   165d0:	sub	r3, r3, #1
   165d4:	str	r3, [sp, #52]	; 0x34
   165d8:	cmn	r3, #1
   165dc:	ldr	r3, [sp, #48]	; 0x30
   165e0:	sub	r3, r3, #24
   165e4:	str	r3, [sp, #48]	; 0x30
   165e8:	bne	16290 <generate_code@@Base+0x8c0>
   165ec:	cmp	r4, #0
   165f0:	subne	r5, r5, #1
   165f4:	cmp	r5, #0
   165f8:	blt	16554 <generate_code@@Base+0xb84>
   165fc:	add	r5, r5, r5, lsl #1
   16600:	ldr	ip, [sp, #40]	; 0x28
   16604:	add	r3, ip, r5, lsl #3
   16608:	ldr	r2, [r3, #16]
   1660c:	ldr	r1, [r3, #20]
   16610:	adds	r9, r9, r2
   16614:	adc	sl, sl, r1
   16618:	cmp	ip, r3
   1661c:	sub	r3, r3, #24
   16620:	bne	16608 <generate_code@@Base+0xc38>
   16624:	b	16554 <generate_code@@Base+0xb84>
   16628:	ldr	r9, [sp, #12]
   1662c:	b	1646c <generate_code@@Base+0xa9c>
   16630:	ldr	r6, [sp, #12]
   16634:	mov	r8, sl
   16638:	b	162e4 <generate_code@@Base+0x914>
   1663c:	andeq	r1, r0, r0, lsr #15
   16640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16644:	ldrb	r4, [r0]
   16648:	cmp	r4, #47	; 0x2f
   1664c:	addeq	r5, r0, #1
   16650:	ldrbeq	r4, [r0, #1]
   16654:	movne	r5, r0
   16658:	cmp	r4, #0
   1665c:	beq	166b0 <generate_code@@Base+0xce0>
   16660:	mov	r6, r0
   16664:	mov	r7, #0
   16668:	mov	r8, #47	; 0x2f
   1666c:	ldr	sl, [pc, #136]	; 166fc <generate_code@@Base+0xd2c>
   16670:	b	16680 <generate_code@@Base+0xcb0>
   16674:	ldrb	r4, [r5, #1]!
   16678:	cmp	r4, #0
   1667c:	beq	166b0 <generate_code@@Base+0xce0>
   16680:	cmp	r4, #47	; 0x2f
   16684:	bne	16674 <generate_code@@Base+0xca4>
   16688:	strb	r7, [r5]
   1668c:	mov	r1, #0
   16690:	mov	r0, r6
   16694:	bl	11a68 <access@plt>
   16698:	cmn	r0, #1
   1669c:	beq	166bc <generate_code@@Base+0xcec>
   166a0:	strb	r8, [r5]
   166a4:	ldrb	r4, [r5, #1]!
   166a8:	cmp	r4, #0
   166ac:	bne	16680 <generate_code@@Base+0xcb0>
   166b0:	mov	r9, #0
   166b4:	mov	r0, r9
   166b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166bc:	mov	r1, sl
   166c0:	mov	r0, r6
   166c4:	bl	11a44 <mkdir@plt>
   166c8:	cmn	r0, #1
   166cc:	mov	r9, r0
   166d0:	bne	166a0 <generate_code@@Base+0xcd0>
   166d4:	bl	11a38 <__errno_location@plt>
   166d8:	ldr	r3, [r0]
   166dc:	cmp	r3, #17
   166e0:	beq	166a0 <generate_code@@Base+0xcd0>
   166e4:	ldr	r0, [pc, #20]	; 16700 <generate_code@@Base+0xd30>
   166e8:	mov	r1, r6
   166ec:	add	r0, pc, r0
   166f0:	bl	15d74 <generate_code@@Base+0x3a4>
   166f4:	strb	r4, [r5]
   166f8:	b	166b4 <generate_code@@Base+0xce4>
   166fc:	andeq	r0, r0, sp, ror #3
   16700:	andeq	r1, r0, ip, lsr ip
   16704:	ldr	r3, [pc, #76]	; 16758 <generate_code@@Base+0xd88>
   16708:	cmp	r1, r3
   1670c:	beq	16750 <generate_code@@Base+0xd80>
   16710:	cmp	r2, #0
   16714:	ldr	ip, [pc, #64]	; 1675c <generate_code@@Base+0xd8c>
   16718:	push	{lr}		; (str lr, [sp, #-4]!)
   1671c:	rev	r3, r1
   16720:	sub	sp, sp, #12
   16724:	ldreq	r2, [r0]
   16728:	ldr	r0, [pc, #48]	; 16760 <generate_code@@Base+0xd90>
   1672c:	stm	sp, {r3, ip}
   16730:	mov	r1, r2
   16734:	mov	r3, sp
   16738:	add	r2, sp, #4
   1673c:	add	r0, pc, r0
   16740:	bl	15d74 <generate_code@@Base+0x3a4>
   16744:	mov	r0, #0
   16748:	add	sp, sp, #12
   1674c:	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	mov	r0, #1
   16754:	bx	lr
   16758:	teqmi	r8, sl, lsr #6
   1675c:	bcs	ce4868 <__bss_end__@@Base+0xcb910c>
   16760:	andeq	r1, r0, r4, lsl ip
   16764:	ldr	r2, [r2]
   16768:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1676c:	cmp	r2, #0
   16770:	mov	r4, r3
   16774:	ldr	r2, [r3, #12]
   16778:	ldr	r3, [sp, #32]
   1677c:	beq	16868 <generate_code@@Base+0xe98>
   16780:	cmp	r1, #0
   16784:	addeq	r1, r2, #1
   16788:	streq	r1, [r4, #12]
   1678c:	cmp	r2, #0
   16790:	ldr	r0, [r4, #16]
   16794:	ldr	lr, [r4, #20]
   16798:	ldrd	r6, [r4, #24]
   1679c:	ldr	r2, [r4, #32]
   167a0:	ldr	r1, [r4, #36]	; 0x24
   167a4:	bne	16814 <generate_code@@Base+0xe44>
   167a8:	ldr	ip, [r3, #8]
   167ac:	str	ip, [r4, #8]
   167b0:	ldr	ip, [r3, #16]
   167b4:	ldr	r5, [r3, #20]
   167b8:	adds	r0, ip, r0
   167bc:	adc	lr, r5, lr
   167c0:	str	r0, [r4, #16]
   167c4:	str	lr, [r4, #20]
   167c8:	ldrd	r8, [r3, #24]
   167cc:	cmp	r6, r8
   167d0:	sbcs	r0, r7, r9
   167d4:	bge	16888 <generate_code@@Base+0xeb8>
   167d8:	strd	r8, [r4, #24]
   167dc:	ldr	r0, [r3, #24]
   167e0:	ldr	ip, [r3, #28]
   167e4:	adds	r2, r0, r2
   167e8:	adc	r1, ip, r1
   167ec:	str	r1, [r4, #36]	; 0x24
   167f0:	str	r2, [r4, #32]
   167f4:	add	r1, r3, #40	; 0x28
   167f8:	ldr	r2, [pc, #176]	; 168b0 <generate_code@@Base+0xee0>
   167fc:	add	r0, r4, #40	; 0x28
   16800:	bl	11984 <memcpy@plt>
   16804:	ldr	r3, [sp, #36]	; 0x24
   16808:	mov	r0, #0
   1680c:	str	r3, [r4]
   16810:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16814:	ldr	ip, [r3, #16]
   16818:	ldr	r5, [r3, #20]
   1681c:	adds	r0, ip, r0
   16820:	adc	lr, r5, lr
   16824:	str	r0, [r4, #16]
   16828:	str	lr, [r4, #20]
   1682c:	ldrd	r8, [r3, #24]
   16830:	cmp	r6, r8
   16834:	sbcs	r0, r7, r9
   16838:	bge	1689c <generate_code@@Base+0xecc>
   1683c:	strd	r8, [r4, #24]
   16840:	ldr	r0, [r3, #24]
   16844:	ldr	ip, [r3, #28]
   16848:	adds	r2, r0, r2
   1684c:	adc	r1, ip, r1
   16850:	str	r1, [r4, #36]	; 0x24
   16854:	str	r2, [r4, #32]
   16858:	add	r1, r3, #40	; 0x28
   1685c:	add	r0, r4, #40	; 0x28
   16860:	bl	16230 <generate_code@@Base+0x860>
   16864:	b	16804 <generate_code@@Base+0xe34>
   16868:	cmp	r2, #0
   1686c:	beq	16804 <generate_code@@Base+0xe34>
   16870:	mov	r1, r0
   16874:	ldr	r0, [pc, #56]	; 168b4 <generate_code@@Base+0xee4>
   16878:	add	r0, pc, r0
   1687c:	bl	15d74 <generate_code@@Base+0x3a4>
   16880:	mvn	r0, #0
   16884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16888:	adds	r2, r2, r8
   1688c:	adc	r1, r1, r9
   16890:	str	r1, [r4, #36]	; 0x24
   16894:	str	r2, [r4, #32]
   16898:	b	167f4 <generate_code@@Base+0xe24>
   1689c:	adds	r2, r2, r8
   168a0:	adc	r1, r1, r9
   168a4:	str	r1, [r4, #36]	; 0x24
   168a8:	str	r2, [r4, #32]
   168ac:	b	16858 <generate_code@@Base+0xe88>
   168b0:	andeq	r1, r0, r0, lsr #15
   168b4:	andeq	r1, r0, r0, lsl fp
   168b8:	ldr	r0, [pc, #52]	; 168f4 <generate_code@@Base+0xf24>
   168bc:	ldr	r3, [pc, #52]	; 168f8 <generate_code@@Base+0xf28>
   168c0:	add	r0, pc, r0
   168c4:	push	{lr}		; (str lr, [sp, #-4]!)
   168c8:	mov	ip, #0
   168cc:	ldr	r3, [r0, r3]
   168d0:	mvn	lr, #0
   168d4:	mov	r2, ip
   168d8:	str	lr, [r3, #24]
   168dc:	mov	r1, ip
   168e0:	ldr	r0, [r3]
   168e4:	pop	{lr}		; (ldr lr, [sp], #4)
   168e8:	str	ip, [r3, #4]
   168ec:	str	ip, [r3, #8]
   168f0:	b	11ac8 <fseek@plt>
   168f4:	andeq	r2, r1, r8, lsr r7
   168f8:	andeq	r0, r0, ip, lsr #1
   168fc:	push	{r4, r5, r6, r7, lr}
   16900:	mov	r2, #0
   16904:	sub	sp, sp, #36	; 0x24
   16908:	mov	r3, #0
   1690c:	mov	r4, #0
   16910:	mov	r6, r0
   16914:	strd	r2, [sp, #8]
   16918:	strd	r2, [sp, #16]
   1691c:	strh	r4, [sp, #2]
   16920:	bl	119fc <getpid@plt>
   16924:	ldr	r3, [pc, #196]	; 169f0 <generate_code@@Base+0x1020>
   16928:	ldr	ip, [pc, #196]	; 169f4 <generate_code@@Base+0x1024>
   1692c:	add	r3, pc, r3
   16930:	mvn	lr, #0
   16934:	mov	r7, #1
   16938:	ldr	r2, [pc, #184]	; 169f8 <generate_code@@Base+0x1028>
   1693c:	mov	r1, #66	; 0x42
   16940:	str	r0, [sp, #24]
   16944:	ldr	r5, [r3, ip]
   16948:	mov	r0, r6
   1694c:	strh	r7, [sp]
   16950:	str	r4, [r5, #4]
   16954:	str	r4, [r5, #12]
   16958:	str	r4, [r5, #8]
   1695c:	str	r4, [r5, #20]
   16960:	str	lr, [r5, #16]
   16964:	bl	119c0 <open64@plt>
   16968:	subs	r6, r0, #0
   1696c:	movlt	r0, r4
   16970:	blt	169d4 <generate_code@@Base+0x1004>
   16974:	mov	r4, sp
   16978:	mov	r2, r4
   1697c:	mov	r1, #14
   16980:	mov	r0, r6
   16984:	bl	11a8c <fcntl64@plt>
   16988:	cmp	r0, #0
   1698c:	beq	169a0 <generate_code@@Base+0xfd0>
   16990:	bl	11a38 <__errno_location@plt>
   16994:	ldr	r3, [r0]
   16998:	cmp	r3, #4
   1699c:	beq	16978 <generate_code@@Base+0xfa8>
   169a0:	ldr	r1, [pc, #84]	; 169fc <generate_code@@Base+0x102c>
   169a4:	mov	r0, r6
   169a8:	add	r1, pc, r1
   169ac:	bl	11948 <fdopen@plt>
   169b0:	cmp	r0, #0
   169b4:	mov	r4, r0
   169b8:	str	r0, [r5]
   169bc:	beq	169dc <generate_code@@Base+0x100c>
   169c0:	mov	r4, #1
   169c4:	mov	r1, #0
   169c8:	str	r4, [r5, #24]
   169cc:	bl	11960 <setbuf@plt>
   169d0:	mov	r0, r4
   169d4:	add	sp, sp, #36	; 0x24
   169d8:	pop	{r4, r5, r6, r7, pc}
   169dc:	mov	r0, r6
   169e0:	bl	11af8 <close@plt>
   169e4:	mov	r0, r4
   169e8:	add	sp, sp, #36	; 0x24
   169ec:	pop	{r4, r5, r6, r7, pc}
   169f0:	andeq	r2, r1, ip, asr #13
   169f4:	andeq	r0, r0, ip, lsr #1
   169f8:			; <UNDEFINED> instruction: 0x000001b6
   169fc:	andeq	r1, r0, ip, lsl #20
   16a00:	push	{r4, r5, r6, lr}
   16a04:	mov	r4, r1
   16a08:	ldr	r5, [pc, #248]	; 16b08 <generate_code@@Base+0x1138>
   16a0c:	ldr	ip, [r4, #8]
   16a10:	ldr	lr, [r4, #12]
   16a14:	ldr	r6, [r4]
   16a18:	cmp	ip, #0
   16a1c:	mov	r1, r0
   16a20:	add	r5, pc, r5
   16a24:	add	r0, r6, lr
   16a28:	ble	16a64 <generate_code@@Base+0x1094>
   16a2c:	ldrb	r3, [r1]
   16a30:	cmp	r3, #47	; 0x2f
   16a34:	addeq	r2, r1, #1
   16a38:	ldrbeq	r3, [r1, #1]
   16a3c:	movne	r2, r1
   16a40:	cmp	r3, #0
   16a44:	beq	16a64 <generate_code@@Base+0x1094>
   16a48:	cmp	r3, #47	; 0x2f
   16a4c:	moveq	r1, r2
   16a50:	ldrb	r3, [r2, #1]!
   16a54:	subeq	ip, ip, #1
   16a58:	cmp	r3, #0
   16a5c:	cmpne	ip, #0
   16a60:	bne	16a48 <generate_code@@Base+0x1078>
   16a64:	cmp	lr, #0
   16a68:	bne	16a88 <generate_code@@Base+0x10b8>
   16a6c:	bl	119a8 <strcpy@plt>
   16a70:	ldr	r0, [r4]
   16a74:	bl	168fc <generate_code@@Base+0xf2c>
   16a78:	cmp	r0, #0
   16a7c:	beq	16aa0 <generate_code@@Base+0x10d0>
   16a80:	mov	r0, #0
   16a84:	pop	{r4, r5, r6, pc}
   16a88:	ldrb	r3, [r1]
   16a8c:	cmp	r3, #47	; 0x2f
   16a90:	movne	r3, #47	; 0x2f
   16a94:	addne	r0, r0, #1
   16a98:	strbne	r3, [r6, lr]
   16a9c:	b	16a6c <generate_code@@Base+0x109c>
   16aa0:	ldr	r0, [r4]
   16aa4:	bl	16640 <generate_code@@Base+0xc70>
   16aa8:	cmp	r0, #0
   16aac:	bne	16ae4 <generate_code@@Base+0x1114>
   16ab0:	ldr	r0, [r4]
   16ab4:	bl	168fc <generate_code@@Base+0xf2c>
   16ab8:	cmp	r0, #0
   16abc:	bne	16a80 <generate_code@@Base+0x10b0>
   16ac0:	ldr	r3, [pc, #68]	; 16b0c <generate_code@@Base+0x113c>
   16ac4:	ldr	r1, [pc, #68]	; 16b10 <generate_code@@Base+0x1140>
   16ac8:	ldr	r2, [r4]
   16acc:	ldr	r3, [r5, r3]
   16ad0:	add	r1, pc, r1
   16ad4:	ldr	r0, [r3]
   16ad8:	bl	11a2c <fprintf@plt>
   16adc:	mvn	r0, #0
   16ae0:	pop	{r4, r5, r6, pc}
   16ae4:	ldr	r3, [pc, #32]	; 16b0c <generate_code@@Base+0x113c>
   16ae8:	ldr	r1, [pc, #36]	; 16b14 <generate_code@@Base+0x1144>
   16aec:	ldr	r2, [r4]
   16af0:	ldr	r3, [r5, r3]
   16af4:	add	r1, pc, r1
   16af8:	ldr	r0, [r3]
   16afc:	bl	11a2c <fprintf@plt>
   16b00:	mvn	r0, #0
   16b04:	pop	{r4, r5, r6, pc}
   16b08:	ldrdeq	r2, [r1], -r8
   16b0c:	andeq	r0, r0, r0, lsr #1
   16b10:	strdeq	r1, [r0], -ip
   16b14:	andeq	r1, r0, r4, asr #17
   16b18:	ldr	r3, [pc, #96]	; 16b80 <generate_code@@Base+0x11b0>
   16b1c:	ldr	r2, [pc, #96]	; 16b84 <generate_code@@Base+0x11b4>
   16b20:	add	r3, pc, r3
   16b24:	push	{r4, lr}
   16b28:	ldr	r4, [r3, r2]
   16b2c:	ldr	r0, [r4]
   16b30:	cmp	r0, #0
   16b34:	beq	16b54 <generate_code@@Base+0x1184>
   16b38:	ldr	r3, [r4, #8]
   16b3c:	cmp	r3, #0
   16b40:	bne	16b64 <generate_code@@Base+0x1194>
   16b44:	bl	11a74 <fclose@plt>
   16b48:	mov	r3, #0
   16b4c:	str	r3, [r4]
   16b50:	str	r3, [r4, #12]
   16b54:	mov	r3, #0
   16b58:	str	r3, [r4, #24]
   16b5c:	ldr	r0, [r4, #20]
   16b60:	pop	{r4, pc}
   16b64:	ldr	r2, [r4, #24]
   16b68:	cmp	r2, #0
   16b6c:	bge	16b44 <generate_code@@Base+0x1174>
   16b70:	mov	r0, r3
   16b74:	bl	15b6c <generate_code@@Base+0x19c>
   16b78:	ldr	r0, [r4]
   16b7c:	b	16b44 <generate_code@@Base+0x1174>
   16b80:	ldrdeq	r2, [r1], -r8
   16b84:	andeq	r0, r0, ip, lsr #1
   16b88:	push	{r4, lr}
   16b8c:	mov	r4, r0
   16b90:	mov	r0, #1
   16b94:	bl	15bc8 <generate_code@@Base+0x1f8>
   16b98:	str	r4, [r0]
   16b9c:	pop	{r4, pc}
   16ba0:	push	{r4, r5, r6, lr}
   16ba4:	mov	r5, r0
   16ba8:	mov	r0, #2
   16bac:	mov	r4, r1
   16bb0:	bl	15bc8 <generate_code@@Base+0x1f8>
   16bb4:	str	r5, [r0]
   16bb8:	str	r4, [r0, #4]
   16bbc:	pop	{r4, r5, r6, pc}
   16bc0:	push	{r4, r5, r6, lr}
   16bc4:	mov	r5, r0
   16bc8:	mov	r0, #2
   16bcc:	mov	r4, r1
   16bd0:	bl	15bc8 <generate_code@@Base+0x1f8>
   16bd4:	str	r5, [r0]
   16bd8:	str	r4, [r0, #4]
   16bdc:	pop	{r4, r5, r6, pc}
   16be0:	mov	r2, #0
   16be4:	push	{r4, r5, r6, r7, r8, lr}
   16be8:	mov	r3, r2
   16bec:	sub	sp, sp, #32
   16bf0:	mov	r5, r1
   16bf4:	mov	r7, r2
   16bf8:	mov	r4, r1
   16bfc:	mov	r8, #1
   16c00:	str	r2, [sp]
   16c04:	str	r2, [sp, #4]
   16c08:	str	r2, [sp, #8]
   16c0c:	str	r2, [sp, #12]
   16c10:	str	r2, [sp, #16]
   16c14:	str	r2, [sp, #20]
   16c18:	str	r2, [sp, #24]
   16c1c:	str	r2, [sp, #28]
   16c20:	lsr	r2, r3, #5
   16c24:	ldr	lr, [r1, #40]	; 0x28
   16c28:	add	ip, sp, #32
   16c2c:	cmp	lr, #0
   16c30:	add	r2, ip, r2, lsl #2
   16c34:	and	r6, r3, #31
   16c38:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   16c3c:	add	r3, r3, #1
   16c40:	orrne	ip, ip, r8, lsl r6
   16c44:	addne	r7, r7, #1
   16c48:	strne	ip, [r2, #-32]	; 0xffffffe0
   16c4c:	cmp	r3, #252	; 0xfc
   16c50:	add	r1, r1, #24
   16c54:	bne	16c20 <generate_code@@Base+0x1250>
   16c58:	add	r7, r7, r7, lsl #2
   16c5c:	add	r1, r7, #17
   16c60:	bl	16bc0 <generate_code@@Base+0x11f0>
   16c64:	ldr	r0, [r5]
   16c68:	bl	16b88 <generate_code@@Base+0x11b8>
   16c6c:	ldr	r0, [r5, #8]
   16c70:	bl	16b88 <generate_code@@Base+0x11b8>
   16c74:	ldr	r0, [r5, #12]
   16c78:	bl	16b88 <generate_code@@Base+0x11b8>
   16c7c:	ldrd	r0, [r5, #16]
   16c80:	bl	16ba0 <generate_code@@Base+0x11d0>
   16c84:	ldrd	r0, [r5, #24]
   16c88:	bl	16ba0 <generate_code@@Base+0x11d0>
   16c8c:	ldrd	r0, [r5, #32]
   16c90:	bl	16ba0 <generate_code@@Base+0x11d0>
   16c94:	sub	r6, sp, #4
   16c98:	add	r7, sp, #28
   16c9c:	ldr	r0, [r6, #4]!
   16ca0:	bl	16b88 <generate_code@@Base+0x11b8>
   16ca4:	cmp	r7, r6
   16ca8:	bne	16c9c <generate_code@@Base+0x12cc>
   16cac:	add	r5, r5, #6016	; 0x1780
   16cb0:	add	r5, r5, #32
   16cb4:	ldr	r3, [r4, #40]	; 0x28
   16cb8:	subs	r0, r3, #0
   16cbc:	beq	16cd4 <generate_code@@Base+0x1304>
   16cc0:	bl	16b88 <generate_code@@Base+0x11b8>
   16cc4:	ldrd	r0, [r4, #48]	; 0x30
   16cc8:	bl	16ba0 <generate_code@@Base+0x11d0>
   16ccc:	ldrd	r0, [r4, #56]	; 0x38
   16cd0:	bl	16ba0 <generate_code@@Base+0x11d0>
   16cd4:	add	r4, r4, #24
   16cd8:	cmp	r4, r5
   16cdc:	bne	16cb4 <generate_code@@Base+0x12e4>
   16ce0:	add	sp, sp, #32
   16ce4:	pop	{r4, r5, r6, r7, r8, pc}
   16ce8:	push	{r4, lr}
   16cec:	mov	r0, #1
   16cf0:	bl	15c28 <generate_code@@Base+0x258>
   16cf4:	subs	r3, r0, #0
   16cf8:	popeq	{r4, pc}
   16cfc:	ldr	r0, [r3]
   16d00:	pop	{r4, lr}
   16d04:	b	15aec <generate_code@@Base+0x11c>
   16d08:	push	{r4, lr}
   16d0c:	mov	r0, #2
   16d10:	bl	15c28 <generate_code@@Base+0x258>
   16d14:	subs	r2, r0, #0
   16d18:	beq	16d3c <generate_code@@Base+0x136c>
   16d1c:	ldr	r0, [r2]
   16d20:	bl	15aec <generate_code@@Base+0x11c>
   16d24:	mov	r3, r0
   16d28:	ldr	r0, [r2, #4]
   16d2c:	bl	15aec <generate_code@@Base+0x11c>
   16d30:	mov	r1, r0
   16d34:	mov	r0, r3
   16d38:	pop	{r4, pc}
   16d3c:	mov	r3, r2
   16d40:	mov	r1, r2
   16d44:	mov	r0, r3
   16d48:	pop	{r4, pc}
   16d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d50:	sub	sp, sp, #28
   16d54:	mov	r8, r1
   16d58:	str	r3, [sp, #12]
   16d5c:	mov	r4, #0
   16d60:	add	r3, r1, #52	; 0x34
   16d64:	add	r1, r1, #16
   16d68:	str	r0, [sp, #20]
   16d6c:	str	r2, [sp, #16]
   16d70:	ldr	r2, [r3, #-4]!
   16d74:	cmp	r2, #0
   16d78:	addne	r4, r4, #1
   16d7c:	cmp	r1, r3
   16d80:	bne	16d70 <generate_code@@Base+0x13a0>
   16d84:	add	r4, r4, #4
   16d88:	lsl	r4, r4, #3
   16d8c:	mov	r0, r4
   16d90:	bl	119d8 <malloc@plt>
   16d94:	subs	r6, r0, #0
   16d98:	beq	16e6c <generate_code@@Base+0x149c>
   16d9c:	ldr	r3, [sp, #12]
   16da0:	mov	r4, #0
   16da4:	str	r3, [r6, #4]
   16da8:	str	r4, [r6]
   16dac:	bl	16ce8 <generate_code@@Base+0x1318>
   16db0:	mov	r7, r4
   16db4:	add	r5, r8, #12
   16db8:	str	r0, [r6, #12]
   16dbc:	bl	16ce8 <generate_code@@Base+0x1318>
   16dc0:	str	r0, [r6, #16]
   16dc4:	bl	16ce8 <generate_code@@Base+0x1318>
   16dc8:	str	r0, [r6, #20]
   16dcc:	b	16ddc <generate_code@@Base+0x140c>
   16dd0:	add	r4, r4, #1
   16dd4:	cmp	r4, #9
   16dd8:	beq	16e58 <generate_code@@Base+0x1488>
   16ddc:	ldr	r3, [r5, #4]!
   16de0:	cmp	r3, #0
   16de4:	beq	16dd0 <generate_code@@Base+0x1400>
   16de8:	bl	16ce8 <generate_code@@Base+0x1318>
   16dec:	lsl	r3, r4, #17
   16df0:	add	r3, r3, #27262976	; 0x1a00000
   16df4:	add	r3, r3, #65536	; 0x10000
   16df8:	cmp	r0, r3
   16dfc:	bne	16ec0 <generate_code@@Base+0x14f0>
   16e00:	bl	16ce8 <generate_code@@Base+0x1318>
   16e04:	lsr	sl, r0, #1
   16e08:	lsl	fp, sl, #3
   16e0c:	mov	r0, fp
   16e10:	bl	119d8 <malloc@plt>
   16e14:	subs	r9, r0, #0
   16e18:	beq	16ed0 <generate_code@@Base+0x1500>
   16e1c:	add	r1, r6, r7, lsl #3
   16e20:	cmp	sl, #0
   16e24:	str	sl, [r1, #24]
   16e28:	str	r9, [r1, #28]
   16e2c:	sub	fp, sl, #1
   16e30:	beq	16e48 <generate_code@@Base+0x1478>
   16e34:	bl	16d08 <generate_code@@Base+0x1338>
   16e38:	sub	fp, fp, #1
   16e3c:	cmn	fp, #1
   16e40:	strd	r0, [r9], #8
   16e44:	bne	16e34 <generate_code@@Base+0x1464>
   16e48:	add	r4, r4, #1
   16e4c:	cmp	r4, #9
   16e50:	add	r7, r7, #1
   16e54:	bne	16ddc <generate_code@@Base+0x140c>
   16e58:	ldr	r3, [sp, #16]
   16e5c:	mov	r0, r6
   16e60:	str	r6, [r3]
   16e64:	add	sp, sp, #28
   16e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e6c:	mvn	r5, #0
   16e70:	cmp	r4, #0
   16e74:	bne	16eb4 <generate_code@@Base+0x14e4>
   16e78:	ldr	r3, [pc, #92]	; 16edc <generate_code@@Base+0x150c>
   16e7c:	mov	r4, r5
   16e80:	add	r3, pc, r3
   16e84:	ldr	r0, [pc, #84]	; 16ee0 <generate_code@@Base+0x1510>
   16e88:	ldr	r2, [sp, #12]
   16e8c:	ldr	r1, [sp, #20]
   16e90:	str	r4, [sp]
   16e94:	add	r0, pc, r0
   16e98:	bl	15d74 <generate_code@@Base+0x3a4>
   16e9c:	mov	r2, r5
   16ea0:	mov	r1, r6
   16ea4:	mov	r0, r8
   16ea8:	add	sp, sp, #28
   16eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb0:	b	15da8 <generate_code@@Base+0x3d8>
   16eb4:	ldr	r3, [pc, #40]	; 16ee4 <generate_code@@Base+0x1514>
   16eb8:	add	r3, pc, r3
   16ebc:	b	16e84 <generate_code@@Base+0x14b4>
   16ec0:	ldr	r3, [pc, #32]	; 16ee8 <generate_code@@Base+0x1518>
   16ec4:	mov	r5, r4
   16ec8:	add	r3, pc, r3
   16ecc:	b	16e84 <generate_code@@Base+0x14b4>
   16ed0:	mov	r5, r4
   16ed4:	mov	r4, fp
   16ed8:	b	16e70 <generate_code@@Base+0x14a0>
   16edc:	andeq	r1, r0, r8, ror #10
   16ee0:	andeq	r1, r0, r8, ror r5
   16ee4:	andeq	r1, r0, r4, asr #10
   16ee8:	andeq	r1, r0, r0, lsr #10
   16eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ef0:	sub	sp, sp, #36	; 0x24
   16ef4:	mov	r9, r0
   16ef8:	bl	16ce8 <generate_code@@Base+0x1318>
   16efc:	mov	r7, #0
   16f00:	sub	r4, sp, #4
   16f04:	add	r5, sp, #28
   16f08:	str	r0, [r9]
   16f0c:	bl	16ce8 <generate_code@@Base+0x1318>
   16f10:	str	r0, [r9, #8]
   16f14:	bl	16ce8 <generate_code@@Base+0x1318>
   16f18:	str	r0, [r9, #12]
   16f1c:	bl	16d08 <generate_code@@Base+0x1338>
   16f20:	strd	r0, [r9, #16]
   16f24:	bl	16d08 <generate_code@@Base+0x1338>
   16f28:	strd	r0, [r9, #24]
   16f2c:	bl	16d08 <generate_code@@Base+0x1338>
   16f30:	ldr	r2, [pc, #264]	; 17040 <generate_code@@Base+0x1670>
   16f34:	strd	r0, [r9, #32]
   16f38:	add	r0, r9, #40	; 0x28
   16f3c:	mov	r1, r7
   16f40:	bl	11a50 <memset@plt>
   16f44:	bl	16ce8 <generate_code@@Base+0x1318>
   16f48:	str	r0, [r4, #4]!
   16f4c:	bl	17c30 <__gcov_sort_n_vals@@Base+0x64c>
   16f50:	cmp	r4, r5
   16f54:	add	r7, r7, r0
   16f58:	bne	16f44 <generate_code@@Base+0x1574>
   16f5c:	cmp	r7, #0
   16f60:	sub	r7, r7, #1
   16f64:	beq	1702c <generate_code@@Base+0x165c>
   16f68:	ldr	r8, [pc, #212]	; 17044 <generate_code@@Base+0x1674>
   16f6c:	ldr	sl, [pc, #212]	; 17048 <generate_code@@Base+0x1678>
   16f70:	mov	r4, #0
   16f74:	add	r8, pc, r8
   16f78:	add	sl, pc, sl
   16f7c:	mov	r5, r4
   16f80:	mov	r6, r4
   16f84:	cmp	r4, #0
   16f88:	addeq	r3, sp, #32
   16f8c:	addeq	r6, r3, r5, lsl #2
   16f90:	subeq	r6, r6, #36	; 0x24
   16f94:	beq	16fb0 <generate_code@@Base+0x15e0>
   16f98:	b	16fd8 <generate_code@@Base+0x1608>
   16f9c:	ldr	r4, [r6, #4]!
   16fa0:	add	r3, r5, #1
   16fa4:	cmp	r4, #0
   16fa8:	bne	16fd0 <generate_code@@Base+0x1600>
   16fac:	mov	r5, r3
   16fb0:	cmp	r5, #7
   16fb4:	bls	16f9c <generate_code@@Base+0x15cc>
   16fb8:	mov	r0, r8
   16fbc:	bl	15d74 <generate_code@@Base+0x3a4>
   16fc0:	ldr	r4, [r6, #4]!
   16fc4:	add	r3, r5, #1
   16fc8:	cmp	r4, #0
   16fcc:	beq	16fac <generate_code@@Base+0x15dc>
   16fd0:	lsl	r6, r5, #5
   16fd4:	mov	r5, r3
   16fd8:	tst	r4, #1
   16fdc:	bne	16ff0 <generate_code@@Base+0x1620>
   16fe0:	lsr	r4, r4, #1
   16fe4:	tst	r4, #1
   16fe8:	add	r6, r6, #1
   16fec:	beq	16fe0 <generate_code@@Base+0x1610>
   16ff0:	cmp	r6, #251	; 0xfb
   16ff4:	bhi	17034 <generate_code@@Base+0x1664>
   16ff8:	bl	16ce8 <generate_code@@Base+0x1318>
   16ffc:	add	fp, r6, r6, lsl #1
   17000:	sub	r7, r7, #1
   17004:	add	fp, r9, fp, lsl #3
   17008:	lsr	r4, r4, #1
   1700c:	add	r6, r6, #1
   17010:	str	r0, [fp, #40]	; 0x28
   17014:	bl	16d08 <generate_code@@Base+0x1338>
   17018:	strd	r0, [fp, #48]	; 0x30
   1701c:	bl	16d08 <generate_code@@Base+0x1338>
   17020:	cmn	r7, #1
   17024:	strd	r0, [fp, #56]	; 0x38
   17028:	bne	16f84 <generate_code@@Base+0x15b4>
   1702c:	add	sp, sp, #36	; 0x24
   17030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17034:	mov	r0, sl
   17038:	bl	15d74 <generate_code@@Base+0x3a4>
   1703c:	b	16ff8 <generate_code@@Base+0x1628>
   17040:	andeq	r1, r0, r0, lsr #15
   17044:			; <UNDEFINED> instruction: 0x000014bc
   17048:	strdeq	r1, [r0], -r8
   1704c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17050:	sub	sp, sp, #6080	; 0x17c0
   17054:	sub	sp, sp, #28
   17058:	mov	r4, r1
   1705c:	strd	r2, [sp, #4]
   17060:	add	r3, sp, #6144	; 0x1800
   17064:	mov	r9, r0
   17068:	ldr	r7, [r3]
   1706c:	add	r3, sp, #6144	; 0x1800
   17070:	add	r3, r3, #4
   17074:	ldr	r6, [r3]
   17078:	add	r3, sp, #6144	; 0x1800
   1707c:	add	r3, r3, #8
   17080:	ldr	sl, [r3]
   17084:	bl	16ce8 <generate_code@@Base+0x1318>
   17088:	add	r3, r4, #12
   1708c:	mov	r2, r9
   17090:	str	r3, [sp, #12]
   17094:	mov	r1, r0
   17098:	mov	r0, r3
   1709c:	bl	16704 <generate_code@@Base+0xd34>
   170a0:	cmp	r0, #0
   170a4:	beq	1732c <generate_code@@Base+0x195c>
   170a8:	bl	16ce8 <generate_code@@Base+0x1318>
   170ac:	ldr	r3, [r4, #8]
   170b0:	cmp	r0, r3
   170b4:	bne	17148 <generate_code@@Base+0x1778>
   170b8:	ldr	fp, [pc, #628]	; 17334 <generate_code@@Base+0x1964>
   170bc:	add	r5, sp, #16
   170c0:	add	fp, pc, fp
   170c4:	bl	15a9c <generate_code@@Base+0xcc>
   170c8:	str	r0, [r6]
   170cc:	bl	16ce8 <generate_code@@Base+0x1318>
   170d0:	cmp	r0, #-1560281088	; 0xa3000000
   170d4:	bne	1718c <generate_code@@Base+0x17bc>
   170d8:	bl	16ce8 <generate_code@@Base+0x1318>
   170dc:	mov	r0, r5
   170e0:	bl	16eec <generate_code@@Base+0x151c>
   170e4:	bl	15ac0 <generate_code@@Base+0xf0>
   170e8:	add	r2, sp, #2000	; 0x7d0
   170ec:	add	r2, r2, #8
   170f0:	subs	r8, r0, #0
   170f4:	bne	172c0 <generate_code@@Base+0x18f0>
   170f8:	ldr	r3, [r7]
   170fc:	cmp	r3, #0
   17100:	bne	17158 <generate_code@@Base+0x1788>
   17104:	ldr	r3, [r2, #-1992]	; 0xfffff838
   17108:	cmp	r3, sl
   1710c:	bne	170c4 <generate_code@@Base+0x16f4>
   17110:	ldr	r3, [sp, #8]
   17114:	ldr	r2, [r2, #-1984]	; 0xfffff840
   17118:	ldr	r3, [r3]
   1711c:	cmp	r2, r3
   17120:	bne	170c4 <generate_code@@Base+0x16f4>
   17124:	ldr	r2, [pc, #524]	; 17338 <generate_code@@Base+0x1968>
   17128:	mov	r1, r5
   1712c:	ldr	r0, [sp, #4]
   17130:	bl	11984 <memcpy@plt>
   17134:	ldr	r3, [r6]
   17138:	str	r3, [r7]
   1713c:	b	170c4 <generate_code@@Base+0x16f4>
   17140:	cmp	r0, #0
   17144:	bne	17300 <generate_code@@Base+0x1930>
   17148:	mov	r0, #0
   1714c:	add	sp, sp, #6080	; 0x17c0
   17150:	add	sp, sp, #28
   17154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17158:	ldr	r0, [pc, #476]	; 1733c <generate_code@@Base+0x196c>
   1715c:	bl	119d8 <malloc@plt>
   17160:	ldr	r2, [pc, #464]	; 17338 <generate_code@@Base+0x1968>
   17164:	mov	r1, r5
   17168:	mov	r3, r0
   1716c:	str	r0, [fp]
   17170:	add	r0, r0, #8
   17174:	str	r3, [sp]
   17178:	bl	11984 <memcpy@plt>
   1717c:	ldr	r3, [sp]
   17180:	str	r8, [r3]
   17184:	ldr	fp, [fp]
   17188:	b	170c4 <generate_code@@Base+0x16f4>
   1718c:	ldr	r5, [r4, #52]	; 0x34
   17190:	cmp	r5, #0
   17194:	beq	17140 <generate_code@@Base+0x1770>
   17198:	ldr	r3, [r4, #56]	; 0x38
   1719c:	cmp	r0, #16777216	; 0x1000000
   171a0:	ldr	r8, [r3]
   171a4:	bne	172fc <generate_code@@Base+0x192c>
   171a8:	ldr	r6, [pc, #400]	; 17340 <generate_code@@Base+0x1970>
   171ac:	mov	r5, #0
   171b0:	add	r6, pc, r6
   171b4:	add	r6, r6, #4
   171b8:	b	171fc <generate_code@@Base+0x182c>
   171bc:	mov	r2, r6
   171c0:	mov	r3, r5
   171c4:	mov	r1, r4
   171c8:	mov	r0, r9
   171cc:	bl	16d4c <generate_code@@Base+0x137c>
   171d0:	subs	r6, r0, #0
   171d4:	beq	17300 <generate_code@@Base+0x1930>
   171d8:	bl	16ce8 <generate_code@@Base+0x1318>
   171dc:	ldr	r3, [r4, #52]	; 0x34
   171e0:	add	r5, r5, #1
   171e4:	cmp	r3, r5
   171e8:	beq	17140 <generate_code@@Base+0x1770>
   171ec:	ldr	r3, [r4, #56]	; 0x38
   171f0:	cmp	r0, #16777216	; 0x1000000
   171f4:	ldr	r8, [r3, r5, lsl #2]
   171f8:	bne	17300 <generate_code@@Base+0x1930>
   171fc:	bl	16ce8 <generate_code@@Base+0x1318>
   17200:	cmp	r0, #0
   17204:	beq	171d8 <generate_code@@Base+0x1808>
   17208:	cmp	r0, #3
   1720c:	bne	17300 <generate_code@@Base+0x1930>
   17210:	cmp	r8, #0
   17214:	beq	171bc <generate_code@@Base+0x17ec>
   17218:	ldr	r3, [r8]
   1721c:	cmp	r4, r3
   17220:	bne	171bc <generate_code@@Base+0x17ec>
   17224:	bl	16ce8 <generate_code@@Base+0x1318>
   17228:	ldr	r3, [r8, #4]
   1722c:	cmp	r0, r3
   17230:	bne	17300 <generate_code@@Base+0x1930>
   17234:	bl	16ce8 <generate_code@@Base+0x1318>
   17238:	ldr	r3, [r8, #8]
   1723c:	cmp	r0, r3
   17240:	bne	17300 <generate_code@@Base+0x1930>
   17244:	bl	16ce8 <generate_code@@Base+0x1318>
   17248:	ldr	r3, [r8, #12]
   1724c:	cmp	r0, r3
   17250:	bne	17300 <generate_code@@Base+0x1930>
   17254:	ldr	r7, [pc, #232]	; 17344 <generate_code@@Base+0x1974>
   17258:	ldr	fp, [sp, #12]
   1725c:	add	r8, r8, #16
   17260:	ldr	sl, [fp, #4]!
   17264:	cmp	sl, #0
   17268:	beq	172a0 <generate_code@@Base+0x18d0>
   1726c:	bl	16ce8 <generate_code@@Base+0x1318>
   17270:	str	r0, [sp]
   17274:	bl	16ce8 <generate_code@@Base+0x1318>
   17278:	ldr	r3, [sp]
   1727c:	cmp	r3, r7
   17280:	bne	17300 <generate_code@@Base+0x1930>
   17284:	ldr	r3, [r8]
   17288:	mov	r1, r3
   1728c:	cmp	r0, r3, lsl #1
   17290:	bne	17300 <generate_code@@Base+0x1930>
   17294:	ldr	r0, [r8, #4]
   17298:	blx	sl
   1729c:	add	r8, r8, #8
   172a0:	ldr	r3, [pc, #160]	; 17348 <generate_code@@Base+0x1978>
   172a4:	add	r7, r7, #131072	; 0x20000
   172a8:	cmp	r7, r3
   172ac:	bne	17260 <generate_code@@Base+0x1890>
   172b0:	bl	15ac0 <generate_code@@Base+0xf0>
   172b4:	cmp	r0, #0
   172b8:	beq	171d8 <generate_code@@Base+0x1808>
   172bc:	mov	r8, r0
   172c0:	cmp	r8, #0
   172c4:	blt	172f0 <generate_code@@Base+0x1920>
   172c8:	ldr	r2, [pc, #124]	; 1734c <generate_code@@Base+0x197c>
   172cc:	add	r2, pc, r2
   172d0:	ldr	r0, [pc, #120]	; 17350 <generate_code@@Base+0x1980>
   172d4:	mov	r1, r9
   172d8:	add	r0, pc, r0
   172dc:	bl	15d74 <generate_code@@Base+0x3a4>
   172e0:	mvn	r0, #0
   172e4:	add	sp, sp, #6080	; 0x17c0
   172e8:	add	sp, sp, #28
   172ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f0:	ldr	r2, [pc, #92]	; 17354 <generate_code@@Base+0x1984>
   172f4:	add	r2, pc, r2
   172f8:	b	172d0 <generate_code@@Base+0x1900>
   172fc:	mov	r5, #0
   17300:	ldr	r2, [pc, #80]	; 17358 <generate_code@@Base+0x1988>
   17304:	ldr	r0, [pc, #80]	; 1735c <generate_code@@Base+0x198c>
   17308:	mov	r3, r5
   1730c:	mov	r1, r9
   17310:	add	r2, pc, r2
   17314:	add	r0, pc, r0
   17318:	bl	15d74 <generate_code@@Base+0x3a4>
   1731c:	mvn	r0, #0
   17320:	add	sp, sp, #6080	; 0x17c0
   17324:	add	sp, sp, #28
   17328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1732c:	mvn	r0, #0
   17330:	b	1714c <generate_code@@Base+0x177c>
   17334:	andeq	r3, r1, r8, asr r6
   17338:	andeq	r1, r0, r8, asr #15
   1733c:	ldrdeq	r1, [r0], -r0
   17340:	andeq	r3, r1, r8, ror #10
   17344:			; <UNDEFINED> instruction: 0x01a10000
   17348:			; <UNDEFINED> instruction: 0x01b30000
   1734c:	andeq	r1, r0, ip, ror #3
   17350:	andeq	r1, r0, ip, lsl r2
   17354:			; <UNDEFINED> instruction: 0x000011b8
   17358:			; <UNDEFINED> instruction: 0x000011b0
   1735c:			; <UNDEFINED> instruction: 0x000011b8
   17360:	ldr	r3, [pc, #72]	; 173b0 <generate_code@@Base+0x19e0>
   17364:	ldr	r2, [pc, #72]	; 173b4 <generate_code@@Base+0x19e4>
   17368:	add	r3, pc, r3
   1736c:	push	{r4, r5, r6, lr}
   17370:	mov	r5, r0
   17374:	ldr	r4, [r3, r2]
   17378:	ldr	r0, [r4, #8]
   1737c:	cmp	r0, #0
   17380:	bne	173a8 <generate_code@@Base+0x19d8>
   17384:	lsl	r1, r5, #2
   17388:	mov	r2, #0
   1738c:	ldr	r0, [r4]
   17390:	bl	11ac8 <fseek@plt>
   17394:	ldr	r0, [r4]
   17398:	bl	11990 <ftell@plt>
   1739c:	asr	r0, r0, #2
   173a0:	str	r0, [r4, #4]
   173a4:	pop	{r4, r5, r6, pc}
   173a8:	bl	15b6c <generate_code@@Base+0x19c>
   173ac:	b	17384 <generate_code@@Base+0x19b4>
   173b0:	muleq	r1, r0, ip
   173b4:	andeq	r0, r0, ip, lsr #1
   173b8:	cmp	r2, #0
   173bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c0:	mov	r8, r0
   173c4:	sub	sp, sp, #20
   173c8:	mov	r5, r1
   173cc:	mov	r4, r3
   173d0:	beq	175a0 <generate_code@@Base+0x1bd0>
   173d4:	cmp	r4, #0
   173d8:	bne	175bc <generate_code@@Base+0x1bec>
   173dc:	mov	r1, r5
   173e0:	ldr	r5, [pc, #480]	; 175c8 <generate_code@@Base+0x1bf8>
   173e4:	mov	r0, #-1560281088	; 0xa3000000
   173e8:	add	r5, pc, r5
   173ec:	bl	16be0 <generate_code@@Base+0x1210>
   173f0:	ldr	r4, [r5]
   173f4:	cmp	r4, #0
   173f8:	beq	17424 <generate_code@@Base+0x1a54>
   173fc:	add	r1, r4, #8
   17400:	mov	r0, #-1560281088	; 0xa3000000
   17404:	bl	16be0 <generate_code@@Base+0x1210>
   17408:	ldr	r3, [r5]
   1740c:	mov	r0, r3
   17410:	ldr	r4, [r3]
   17414:	bl	11978 <free@plt>
   17418:	cmp	r4, #0
   1741c:	str	r4, [r5]
   17420:	bne	173fc <generate_code@@Base+0x1a2c>
   17424:	ldr	r3, [r8, #52]	; 0x34
   17428:	cmp	r3, #0
   1742c:	beq	17578 <generate_code@@Base+0x1ba8>
   17430:	ldr	r3, [pc, #404]	; 175cc <generate_code@@Base+0x1bfc>
   17434:	ldr	r9, [pc, #404]	; 175d0 <generate_code@@Base+0x1c00>
   17438:	add	r3, pc, r3
   1743c:	str	r3, [sp, #4]
   17440:	ldr	r3, [pc, #396]	; 175d4 <generate_code@@Base+0x1c04>
   17444:	mov	r7, #0
   17448:	add	r3, pc, r3
   1744c:	str	r3, [sp, #12]
   17450:	b	1748c <generate_code@@Base+0x1abc>
   17454:	ldr	r3, [r8, #56]	; 0x38
   17458:	ldr	r4, [r3, r7, lsl #2]
   1745c:	cmp	r4, #0
   17460:	beq	17470 <generate_code@@Base+0x1aa0>
   17464:	ldr	r3, [r4]
   17468:	cmp	r3, r8
   1746c:	beq	17588 <generate_code@@Base+0x1bb8>
   17470:	mov	r1, #0
   17474:	mov	r0, #16777216	; 0x1000000
   17478:	bl	16bc0 <generate_code@@Base+0x11f0>
   1747c:	ldr	r3, [r8, #52]	; 0x34
   17480:	add	r7, r7, #1
   17484:	cmp	r3, r7
   17488:	beq	17578 <generate_code@@Base+0x1ba8>
   1748c:	ldr	r3, [sp, #4]
   17490:	ldr	r4, [r3, #4]
   17494:	cmp	r4, #0
   17498:	beq	17454 <generate_code@@Base+0x1a84>
   1749c:	ldr	r3, [r4, #4]
   174a0:	cmp	r3, r7
   174a4:	bne	17454 <generate_code@@Base+0x1a84>
   174a8:	mov	r3, #1
   174ac:	mov	r1, #3
   174b0:	mov	r0, #16777216	; 0x1000000
   174b4:	add	r4, r4, #8
   174b8:	str	r3, [sp, #8]
   174bc:	bl	16bc0 <generate_code@@Base+0x11f0>
   174c0:	ldr	r0, [r4, #4]
   174c4:	bl	16b88 <generate_code@@Base+0x11b8>
   174c8:	ldr	r0, [r4, #8]
   174cc:	bl	16b88 <generate_code@@Base+0x11b8>
   174d0:	ldr	r0, [r4, #12]
   174d4:	bl	16b88 <generate_code@@Base+0x11b8>
   174d8:	ldr	r5, [pc, #248]	; 175d8 <generate_code@@Base+0x1c08>
   174dc:	add	r4, r4, #16
   174e0:	add	r6, r8, #12
   174e4:	b	174f4 <generate_code@@Base+0x1b24>
   174e8:	add	r5, r5, #131072	; 0x20000
   174ec:	cmp	r5, r9
   174f0:	beq	17544 <generate_code@@Base+0x1b74>
   174f4:	ldr	r3, [r6, #4]!
   174f8:	cmp	r3, #0
   174fc:	beq	174e8 <generate_code@@Base+0x1b18>
   17500:	ldr	fp, [r4]
   17504:	mov	r0, r5
   17508:	sub	sl, fp, #1
   1750c:	lsl	r1, fp, #1
   17510:	bl	16bc0 <generate_code@@Base+0x11f0>
   17514:	cmp	fp, #0
   17518:	ldr	fp, [r4, #4]
   1751c:	beq	17534 <generate_code@@Base+0x1b64>
   17520:	sub	sl, sl, #1
   17524:	ldrd	r0, [fp], #8
   17528:	bl	16ba0 <generate_code@@Base+0x11d0>
   1752c:	cmn	sl, #1
   17530:	bne	17520 <generate_code@@Base+0x1b50>
   17534:	add	r5, r5, #131072	; 0x20000
   17538:	cmp	r5, r9
   1753c:	add	r4, r4, #8
   17540:	bne	174f4 <generate_code@@Base+0x1b24>
   17544:	ldr	r3, [sp, #8]
   17548:	cmp	r3, #0
   1754c:	beq	1747c <generate_code@@Base+0x1aac>
   17550:	ldr	r4, [sp, #12]
   17554:	mov	r2, #9
   17558:	mov	r0, r8
   1755c:	ldr	r1, [r4, #4]
   17560:	bl	15da8 <generate_code@@Base+0x3d8>
   17564:	ldr	r3, [r8, #52]	; 0x34
   17568:	add	r7, r7, #1
   1756c:	cmp	r3, r7
   17570:	str	r0, [r4, #4]
   17574:	bne	1748c <generate_code@@Base+0x1abc>
   17578:	mov	r0, #0
   1757c:	add	sp, sp, #20
   17580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17584:	b	16b88 <generate_code@@Base+0x11b8>
   17588:	mov	r1, #3
   1758c:	mov	r0, #16777216	; 0x1000000
   17590:	bl	16bc0 <generate_code@@Base+0x11f0>
   17594:	mov	r3, #0
   17598:	str	r3, [sp, #8]
   1759c:	b	174c0 <generate_code@@Base+0x1af0>
   175a0:	ldr	r1, [pc, #52]	; 175dc <generate_code@@Base+0x1c0c>
   175a4:	ldr	r0, [pc, #52]	; 175e0 <generate_code@@Base+0x1c10>
   175a8:	bl	16bc0 <generate_code@@Base+0x11f0>
   175ac:	ldr	r0, [r8, #8]
   175b0:	bl	16b88 <generate_code@@Base+0x11b8>
   175b4:	cmp	r4, #0
   175b8:	beq	173dc <generate_code@@Base+0x1a0c>
   175bc:	mov	r0, r4
   175c0:	bl	17360 <generate_code@@Base+0x1990>
   175c4:	b	173dc <generate_code@@Base+0x1a0c>
   175c8:	andeq	r3, r1, r0, lsr r3
   175cc:	andeq	r3, r1, r0, ror #5
   175d0:			; <UNDEFINED> instruction: 0x01b30000
   175d4:	ldrdeq	r3, [r1], -r0
   175d8:			; <UNDEFINED> instruction: 0x01a10000
   175dc:	teqmi	r8, sl, lsr #6
   175e0:	strbvs	r6, [r3, -r1, ror #8]!

000175e4 <__gcov_sort_n_vals@@Base>:
   175e4:	cmp	r1, #2
   175e8:	bxle	lr
   175ec:	sub	r1, r1, #3
   175f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175f4:	add	r2, r0, #8
   175f8:	sub	sp, sp, #20
   175fc:	mov	r6, r0
   17600:	bic	r7, r1, #1
   17604:	mvn	r8, #15
   17608:	mov	lr, #0
   1760c:	ldrd	r0, [r2]
   17610:	ldrd	r4, [r2, #16]
   17614:	ldrd	sl, [r2, #8]
   17618:	add	r9, r2, #16
   1761c:	cmp	r0, r4
   17620:	sbcs	r3, r1, r5
   17624:	mov	ip, r9
   17628:	sub	r1, r6, r8
   1762c:	strd	sl, [sp]
   17630:	mov	r3, lr
   17634:	bge	1769c <__gcov_sort_n_vals@@Base+0xb8>
   17638:	add	sl, r8, #16
   1763c:	mvn	fp, #1
   17640:	add	sl, r2, sl
   17644:	orr	fp, lr, fp
   17648:	str	r7, [sp, #8]
   1764c:	str	r6, [sp, #12]
   17650:	b	17668 <__gcov_sort_n_vals@@Base+0x84>
   17654:	ldrd	r6, [ip, #-16]
   17658:	sub	r2, r2, #16
   1765c:	cmp	r6, r4
   17660:	sbcs	r1, r7, r5
   17664:	bge	176c4 <__gcov_sort_n_vals@@Base+0xe0>
   17668:	ldrd	r6, [r2, #-8]
   1766c:	lsl	r1, r3, #3
   17670:	mov	r0, r3
   17674:	strd	r6, [r2, #8]
   17678:	ldrd	r6, [sl, r1]
   1767c:	sub	r3, r3, #2
   17680:	cmp	r3, fp
   17684:	strd	r6, [r2, #16]
   17688:	mov	ip, r2
   1768c:	bne	17654 <__gcov_sort_n_vals@@Base+0x70>
   17690:	ldr	r6, [sp, #12]
   17694:	ldr	r7, [sp, #8]
   17698:	add	r1, r6, r1
   1769c:	ldrd	r2, [sp]
   176a0:	cmp	lr, r7
   176a4:	sub	r8, r8, #16
   176a8:	strd	r2, [r1]
   176ac:	add	lr, lr, #2
   176b0:	strd	r4, [ip]
   176b4:	mov	r2, r9
   176b8:	bne	1760c <__gcov_sort_n_vals@@Base+0x28>
   176bc:	add	sp, sp, #20
   176c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c4:	ldr	r6, [sp, #12]
   176c8:	ldr	r7, [sp, #8]
   176cc:	add	r1, r6, r0, lsl #3
   176d0:	b	1769c <__gcov_sort_n_vals@@Base+0xb8>
   176d4:	push	{r4, r5, r6, lr}
   176d8:	ldr	r4, [pc, #76]	; 1772c <__gcov_sort_n_vals@@Base+0x148>
   176dc:	smull	r2, r3, r4, r0
   176e0:	asr	r4, r0, #31
   176e4:	rsb	r4, r4, r3, asr #1
   176e8:	add	r4, r4, r4, lsl #3
   176ec:	subs	r4, r0, r4
   176f0:	bne	17728 <__gcov_sort_n_vals@@Base+0x144>
   176f4:	cmp	r0, #0
   176f8:	mov	r6, r0
   176fc:	ldr	r5, [r1]
   17700:	pople	{r4, r5, r6, pc}
   17704:	add	r5, r5, #8
   17708:	mov	r0, r5
   1770c:	add	r4, r4, #9
   17710:	mov	r1, #8
   17714:	bl	175e4 <__gcov_sort_n_vals@@Base>
   17718:	cmp	r6, r4
   1771c:	add	r5, r5, #72	; 0x48
   17720:	bgt	17708 <__gcov_sort_n_vals@@Base+0x124>
   17724:	pop	{r4, r5, r6, pc}
   17728:	bl	11aec <abort@plt>
   1772c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   17730:	ldr	r3, [r0, #48]	; 0x30
   17734:	cmp	r3, #0
   17738:	bxeq	lr
   1773c:	push	{r4, r5, r6, lr}
   17740:	ldr	lr, [r0, #52]	; 0x34
   17744:	cmp	lr, #0
   17748:	popeq	{r4, r5, r6, pc}
   1774c:	mov	r5, r0
   17750:	mov	r4, #0
   17754:	add	r6, r0, #12
   17758:	ldr	r1, [r5, #56]	; 0x38
   1775c:	mov	r2, r6
   17760:	mov	r3, #0
   17764:	ldr	r1, [r1, r4, lsl #2]
   17768:	add	r1, r1, #16
   1776c:	ldr	ip, [r2, #4]!
   17770:	cmp	ip, #0
   17774:	beq	17784 <__gcov_sort_n_vals@@Base+0x1a0>
   17778:	cmp	r3, #8
   1777c:	beq	177a0 <__gcov_sort_n_vals@@Base+0x1bc>
   17780:	add	r1, r1, #8
   17784:	add	r3, r3, #1
   17788:	cmp	r3, #9
   1778c:	bne	1776c <__gcov_sort_n_vals@@Base+0x188>
   17790:	add	r4, r4, #1
   17794:	cmp	lr, r4
   17798:	bne	17758 <__gcov_sort_n_vals@@Base+0x174>
   1779c:	pop	{r4, r5, r6, pc}
   177a0:	ldr	r0, [r1], #4
   177a4:	bl	176d4 <__gcov_sort_n_vals@@Base+0xf0>
   177a8:	ldr	lr, [r5, #52]	; 0x34
   177ac:	b	17790 <__gcov_sort_n_vals@@Base+0x1ac>
   177b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   177b4:	sub	sp, sp, #6080	; 0x17c0
   177b8:	ldr	ip, [pc, #396]	; 1794c <__gcov_sort_n_vals@@Base+0x368>
   177bc:	sub	sp, sp, #36	; 0x24
   177c0:	add	ip, pc, ip
   177c4:	add	r5, sp, #2016	; 0x7e0
   177c8:	mov	r4, r0
   177cc:	mov	r6, r1
   177d0:	mov	r1, #0
   177d4:	str	r1, [ip, #4]
   177d8:	str	r1, [ip]
   177dc:	mov	r8, r2
   177e0:	mov	r7, r3
   177e4:	str	r1, [r5, #-2000]	; 0xfffff830
   177e8:	str	r1, [r5, #-1996]	; 0xfffff834
   177ec:	bl	17730 <__gcov_sort_n_vals@@Base+0x14c>
   177f0:	mov	r1, r6
   177f4:	ldr	r0, [r4, #12]
   177f8:	bl	16a00 <generate_code@@Base+0x1030>
   177fc:	cmn	r0, #1
   17800:	beq	1787c <__gcov_sort_n_vals@@Base+0x298>
   17804:	bl	16ce8 <generate_code@@Base+0x1318>
   17808:	cmp	r0, #0
   1780c:	beq	17888 <__gcov_sort_n_vals@@Base+0x2a4>
   17810:	ldr	r2, [pc, #312]	; 17950 <__gcov_sort_n_vals@@Base+0x36c>
   17814:	ldr	r1, [r6]
   17818:	cmp	r0, r2
   1781c:	beq	178e0 <__gcov_sort_n_vals@@Base+0x2fc>
   17820:	ldr	r0, [pc, #300]	; 17954 <__gcov_sort_n_vals@@Base+0x370>
   17824:	add	r0, pc, r0
   17828:	bl	15d74 <generate_code@@Base+0x3a4>
   1782c:	ldr	r5, [pc, #292]	; 17958 <__gcov_sort_n_vals@@Base+0x374>
   17830:	add	r5, pc, r5
   17834:	ldr	r1, [r5, #4]
   17838:	cmp	r1, #0
   1783c:	beq	1785c <__gcov_sort_n_vals@@Base+0x278>
   17840:	mov	r2, #9
   17844:	mov	r0, r4
   17848:	bl	15da8 <generate_code@@Base+0x3d8>
   1784c:	cmp	r0, #0
   17850:	mov	r1, r0
   17854:	str	r0, [r5, #4]
   17858:	bne	17840 <__gcov_sort_n_vals@@Base+0x25c>
   1785c:	bl	16b18 <generate_code@@Base+0x1148>
   17860:	cmp	r0, #0
   17864:	beq	1787c <__gcov_sort_n_vals@@Base+0x298>
   17868:	blt	17940 <__gcov_sort_n_vals@@Base+0x35c>
   1786c:	ldr	r0, [pc, #232]	; 1795c <__gcov_sort_n_vals@@Base+0x378>
   17870:	add	r0, pc, r0
   17874:	ldr	r1, [r6]
   17878:	bl	15d74 <generate_code@@Base+0x3a4>
   1787c:	add	sp, sp, #6080	; 0x17c0
   17880:	add	sp, sp, #36	; 0x24
   17884:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17888:	bl	168b8 <generate_code@@Base+0xee8>
   1788c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   17890:	add	r9, sp, #24
   17894:	cmp	r1, #0
   17898:	beq	17928 <__gcov_sort_n_vals@@Base+0x344>
   1789c:	add	r3, sp, #6144	; 0x1800
   178a0:	str	r7, [sp, #4]
   178a4:	ldr	r3, [r3]
   178a8:	mov	r1, r8
   178ac:	str	r3, [sp]
   178b0:	add	r2, r4, #16
   178b4:	mov	r3, r9
   178b8:	ldr	r0, [r6]
   178bc:	bl	16764 <generate_code@@Base+0xd94>
   178c0:	cmn	r0, #1
   178c4:	beq	1782c <__gcov_sort_n_vals@@Base+0x248>
   178c8:	mov	r1, r9
   178cc:	ldr	r3, [r5, #-2000]	; 0xfffff830
   178d0:	ldr	r2, [r5, #-1996]	; 0xfffff834
   178d4:	mov	r0, r4
   178d8:	bl	173b8 <generate_code@@Base+0x19e8>
   178dc:	b	1782c <__gcov_sort_n_vals@@Base+0x248>
   178e0:	add	ip, sp, #20
   178e4:	add	r3, sp, #16
   178e8:	str	r7, [sp, #8]
   178ec:	stm	sp, {r3, ip}
   178f0:	add	r3, sp, #6144	; 0x1800
   178f4:	add	r9, sp, #24
   178f8:	ldr	r3, [r3]
   178fc:	mov	r0, r1
   17900:	mov	r2, r9
   17904:	add	r3, r3, #8
   17908:	mov	r1, r4
   1790c:	bl	1704c <generate_code@@Base+0x167c>
   17910:	cmn	r0, #1
   17914:	beq	1782c <__gcov_sort_n_vals@@Base+0x248>
   17918:	bl	168b8 <generate_code@@Base+0xee8>
   1791c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   17920:	cmp	r1, #0
   17924:	bne	1789c <__gcov_sort_n_vals@@Base+0x2b8>
   17928:	ldr	r2, [pc, #48]	; 17960 <__gcov_sort_n_vals@@Base+0x37c>
   1792c:	mov	r0, r9
   17930:	bl	11a50 <memset@plt>
   17934:	ldr	r3, [r5, #-1996]	; 0xfffff834
   17938:	str	r3, [r5, #-2000]	; 0xfffff830
   1793c:	b	1789c <__gcov_sort_n_vals@@Base+0x2b8>
   17940:	ldr	r0, [pc, #28]	; 17964 <__gcov_sort_n_vals@@Base+0x380>
   17944:	add	r0, pc, r0
   17948:	b	17874 <__gcov_sort_n_vals@@Base+0x290>
   1794c:	andeq	r2, r1, r8, asr pc
   17950:	strbvs	r6, [r3, -r1, ror #8]!
   17954:	andeq	r0, r0, r8, lsr #26
   17958:	andeq	r2, r1, r8, ror #29
   1795c:	andeq	r0, r0, r0, asr #25
   17960:	andeq	r1, r0, r8, asr #15
   17964:	andeq	r0, r0, ip, asr #23
   17968:	push	{r4, r5, r6, r7, r8, lr}
   1796c:	sub	sp, sp, #6080	; 0x17c0
   17970:	sub	sp, sp, #32
   17974:	add	r6, sp, #24
   17978:	add	r2, sp, #12
   1797c:	mov	r8, r1
   17980:	mov	r1, r6
   17984:	mov	r4, r0
   17988:	bl	15fc0 <generate_code@@Base+0x5f0>
   1798c:	add	r5, sp, #8
   17990:	mov	r7, r0
   17994:	mov	r0, r5
   17998:	bl	16154 <generate_code@@Base+0x784>
   1799c:	cmp	r4, #0
   179a0:	beq	179c8 <__gcov_sort_n_vals@@Base+0x3e4>
   179a4:	mov	r0, r4
   179a8:	str	r6, [sp]
   179ac:	mov	r3, r7
   179b0:	mov	r2, r8
   179b4:	mov	r1, r5
   179b8:	bl	177b0 <__gcov_sort_n_vals@@Base+0x1cc>
   179bc:	ldr	r4, [r4, #4]
   179c0:	cmp	r4, #0
   179c4:	bne	179a4 <__gcov_sort_n_vals@@Base+0x3c0>
   179c8:	ldr	r0, [sp, #8]
   179cc:	bl	11978 <free@plt>
   179d0:	add	sp, sp, #6080	; 0x17c0
   179d4:	add	sp, sp, #32
   179d8:	pop	{r4, r5, r6, r7, r8, pc}
   179dc:	ldrb	r1, [r0, #4]
   179e0:	tst	r1, #1
   179e4:	bxne	lr
   179e8:	push	{r4, lr}
   179ec:	lsr	r1, r1, #1
   179f0:	mov	r4, r0
   179f4:	and	r1, r1, #1
   179f8:	ldr	r0, [r0]
   179fc:	bl	17968 <__gcov_sort_n_vals@@Base+0x384>
   17a00:	ldrb	r3, [r4, #4]
   17a04:	bic	r3, r3, #3
   17a08:	orr	r3, r3, #3
   17a0c:	strb	r3, [r4, #4]
   17a10:	pop	{r4, pc}
   17a14:	push	{r4, r5, r6, lr}
   17a18:	ldr	r4, [pc, #84]	; 17a74 <__gcov_sort_n_vals@@Base+0x490>
   17a1c:	ldr	r5, [pc, #84]	; 17a78 <__gcov_sort_n_vals@@Base+0x494>
   17a20:	add	r4, pc, r4
   17a24:	mov	r0, r4
   17a28:	bl	179dc <__gcov_sort_n_vals@@Base+0x3f8>
   17a2c:	ldr	r3, [r4, #8]
   17a30:	add	r5, pc, r5
   17a34:	cmp	r3, #0
   17a38:	ldrne	r2, [r4, #12]
   17a3c:	strne	r2, [r3, #12]
   17a40:	ldr	r2, [pc, #52]	; 17a7c <__gcov_sort_n_vals@@Base+0x498>
   17a44:	add	r2, pc, r2
   17a48:	ldr	r2, [r2, #12]
   17a4c:	cmp	r2, #0
   17a50:	strne	r3, [r2, #8]
   17a54:	beq	17a60 <__gcov_sort_n_vals@@Base+0x47c>
   17a58:	pop	{r4, r5, r6, lr}
   17a5c:	b	15b1c <generate_code@@Base+0x14c>
   17a60:	ldr	r2, [pc, #24]	; 17a80 <__gcov_sort_n_vals@@Base+0x49c>
   17a64:	ldr	r2, [r5, r2]
   17a68:	pop	{r4, r5, r6, lr}
   17a6c:	str	r3, [r2, #4]
   17a70:	b	15b1c <generate_code@@Base+0x14c>
   17a74:	andeq	r2, r1, r4, lsl #26
   17a78:	andeq	r1, r1, r8, asr #11
   17a7c:	andeq	r2, r1, r0, ror #25
   17a80:	andeq	r0, r0, r8, lsr #1
   17a84:	ldr	r1, [r0]
   17a88:	push	{r4, r5, r6, lr}
   17a8c:	cmp	r1, #0
   17a90:	ldr	r5, [pc, #156]	; 17b34 <__gcov_sort_n_vals@@Base+0x550>
   17a94:	add	r5, pc, r5
   17a98:	popeq	{r4, r5, r6, pc}
   17a9c:	ldr	r3, [r0, #52]	; 0x34
   17aa0:	cmp	r3, #0
   17aa4:	popeq	{r4, r5, r6, pc}
   17aa8:	mov	r4, r0
   17aac:	mov	r2, #0
   17ab0:	add	r0, r0, #12
   17ab4:	bl	16704 <generate_code@@Base+0xd34>
   17ab8:	cmp	r0, #0
   17abc:	popeq	{r4, r5, r6, pc}
   17ac0:	ldr	r6, [pc, #112]	; 17b38 <__gcov_sort_n_vals@@Base+0x554>
   17ac4:	add	r6, pc, r6
   17ac8:	ldr	r2, [r6]
   17acc:	cmp	r2, #0
   17ad0:	beq	17ae8 <__gcov_sort_n_vals@@Base+0x504>
   17ad4:	ldr	r3, [pc, #96]	; 17b3c <__gcov_sort_n_vals@@Base+0x558>
   17ad8:	str	r2, [r4, #4]
   17adc:	add	r3, pc, r3
   17ae0:	str	r4, [r3]
   17ae4:	pop	{r4, r5, r6, pc}
   17ae8:	ldr	r3, [pc, #80]	; 17b40 <__gcov_sort_n_vals@@Base+0x55c>
   17aec:	ldr	r2, [pc, #80]	; 17b44 <__gcov_sort_n_vals@@Base+0x560>
   17af0:	mov	r0, #12
   17af4:	ldr	r5, [r5, r3]
   17af8:	add	r2, pc, r2
   17afc:	ldr	r1, [r5]
   17b00:	bl	16704 <generate_code@@Base+0xd34>
   17b04:	cmp	r0, #0
   17b08:	ldreq	r2, [r6]
   17b0c:	beq	17ad4 <__gcov_sort_n_vals@@Base+0x4f0>
   17b10:	ldr	r3, [r5, #4]
   17b14:	cmp	r3, #0
   17b18:	str	r3, [r6, #8]
   17b1c:	strne	r6, [r3, #12]
   17b20:	ldr	r3, [pc, #32]	; 17b48 <__gcov_sort_n_vals@@Base+0x564>
   17b24:	add	r3, pc, r3
   17b28:	str	r3, [r5, #4]
   17b2c:	ldr	r2, [r3]
   17b30:	b	17ad4 <__gcov_sort_n_vals@@Base+0x4f0>
   17b34:	andeq	r1, r1, r4, ror #10
   17b38:	andeq	r2, r1, r0, ror #24
   17b3c:	andeq	r2, r1, r8, asr #24
   17b40:	andeq	r0, r0, r8, lsr #1
   17b44:	andeq	r0, r0, r8, ror sl
   17b48:	andeq	r2, r1, r0, lsl #24
   17b4c:	cmp	r3, #0
   17b50:	cmpeq	r2, #0
   17b54:	bne	17b78 <__gcov_sort_n_vals@@Base+0x594>
   17b58:	cmp	r1, #0
   17b5c:	movlt	r1, #-2147483648	; 0x80000000
   17b60:	movlt	r0, #0
   17b64:	blt	17b74 <__gcov_sort_n_vals@@Base+0x590>
   17b68:	cmpeq	r0, #0
   17b6c:	mvnne	r1, #-2147483648	; 0x80000000
   17b70:	mvnne	r0, #0
   17b74:	b	17c20 <__gcov_sort_n_vals@@Base+0x63c>
   17b78:	sub	sp, sp, #8
   17b7c:	push	{sp, lr}
   17b80:	cmp	r1, #0
   17b84:	blt	17ba4 <__gcov_sort_n_vals@@Base+0x5c0>
   17b88:	cmp	r3, #0
   17b8c:	blt	17bd8 <__gcov_sort_n_vals@@Base+0x5f4>
   17b90:	bl	17c74 <__gcov_sort_n_vals@@Base+0x690>
   17b94:	ldr	lr, [sp, #4]
   17b98:	add	sp, sp, #8
   17b9c:	pop	{r2, r3}
   17ba0:	bx	lr
   17ba4:	rsbs	r0, r0, #0
   17ba8:	sbc	r1, r1, r1, lsl #1
   17bac:	cmp	r3, #0
   17bb0:	blt	17bfc <__gcov_sort_n_vals@@Base+0x618>
   17bb4:	bl	17c74 <__gcov_sort_n_vals@@Base+0x690>
   17bb8:	ldr	lr, [sp, #4]
   17bbc:	add	sp, sp, #8
   17bc0:	pop	{r2, r3}
   17bc4:	rsbs	r0, r0, #0
   17bc8:	sbc	r1, r1, r1, lsl #1
   17bcc:	rsbs	r2, r2, #0
   17bd0:	sbc	r3, r3, r3, lsl #1
   17bd4:	bx	lr
   17bd8:	rsbs	r2, r2, #0
   17bdc:	sbc	r3, r3, r3, lsl #1
   17be0:	bl	17c74 <__gcov_sort_n_vals@@Base+0x690>
   17be4:	ldr	lr, [sp, #4]
   17be8:	add	sp, sp, #8
   17bec:	pop	{r2, r3}
   17bf0:	rsbs	r0, r0, #0
   17bf4:	sbc	r1, r1, r1, lsl #1
   17bf8:	bx	lr
   17bfc:	rsbs	r2, r2, #0
   17c00:	sbc	r3, r3, r3, lsl #1
   17c04:	bl	17c74 <__gcov_sort_n_vals@@Base+0x690>
   17c08:	ldr	lr, [sp, #4]
   17c0c:	add	sp, sp, #8
   17c10:	pop	{r2, r3}
   17c14:	rsbs	r2, r2, #0
   17c18:	sbc	r3, r3, r3, lsl #1
   17c1c:	bx	lr
   17c20:	push	{r1, lr}
   17c24:	mov	r0, #8
   17c28:	bl	11954 <raise@plt>
   17c2c:	pop	{r1, pc}
   17c30:	ldr	r3, [pc, #48]	; 17c68 <__gcov_sort_n_vals@@Base+0x684>
   17c34:	ldr	r2, [pc, #48]	; 17c6c <__gcov_sort_n_vals@@Base+0x688>
   17c38:	and	r3, r3, r0, lsr #1
   17c3c:	sub	r0, r0, r3
   17c40:	and	r3, r0, r2
   17c44:	and	r0, r2, r0, lsr #2
   17c48:	add	r3, r3, r0
   17c4c:	ldr	r0, [pc, #28]	; 17c70 <__gcov_sort_n_vals@@Base+0x68c>
   17c50:	add	r3, r3, r3, lsr #4
   17c54:	and	r0, r0, r3
   17c58:	add	r0, r0, r0, lsl #8
   17c5c:	add	r0, r0, r0, lsl #16
   17c60:	lsr	r0, r0, #24
   17c64:	bx	lr
   17c68:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   17c6c:	teqcc	r3, #-872415232	; 0xcc000000
   17c70:	svceq	0x000f0f0f
   17c74:	cmp	r1, r3
   17c78:	cmpeq	r0, r2
   17c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c80:	mov	r4, r0
   17c84:	movcc	r0, #0
   17c88:	mov	r5, r1
   17c8c:	ldr	lr, [sp, #36]	; 0x24
   17c90:	movcc	r1, r0
   17c94:	bcc	17d90 <__gcov_sort_n_vals@@Base+0x7ac>
   17c98:	cmp	r3, #0
   17c9c:	clzeq	ip, r2
   17ca0:	clzne	ip, r3
   17ca4:	addeq	ip, ip, #32
   17ca8:	cmp	r5, #0
   17cac:	clzeq	r1, r4
   17cb0:	addeq	r1, r1, #32
   17cb4:	clzne	r1, r5
   17cb8:	sub	ip, ip, r1
   17cbc:	sub	sl, ip, #32
   17cc0:	lsl	r9, r3, ip
   17cc4:	rsb	fp, ip, #32
   17cc8:	orr	r9, r9, r2, lsl sl
   17ccc:	orr	r9, r9, r2, lsr fp
   17cd0:	lsl	r8, r2, ip
   17cd4:	cmp	r5, r9
   17cd8:	cmpeq	r4, r8
   17cdc:	movcc	r0, #0
   17ce0:	movcc	r1, r0
   17ce4:	bcc	17d00 <__gcov_sort_n_vals@@Base+0x71c>
   17ce8:	mov	r0, #1
   17cec:	subs	r4, r4, r8
   17cf0:	lsl	r1, r0, sl
   17cf4:	orr	r1, r1, r0, lsr fp
   17cf8:	lsl	r0, r0, ip
   17cfc:	sbc	r5, r5, r9
   17d00:	cmp	ip, #0
   17d04:	beq	17d90 <__gcov_sort_n_vals@@Base+0x7ac>
   17d08:	lsr	r6, r8, #1
   17d0c:	orr	r6, r6, r9, lsl #31
   17d10:	lsr	r7, r9, #1
   17d14:	mov	r2, ip
   17d18:	b	17d3c <__gcov_sort_n_vals@@Base+0x758>
   17d1c:	subs	r3, r4, r6
   17d20:	sbc	r8, r5, r7
   17d24:	adds	r3, r3, r3
   17d28:	adc	r8, r8, r8
   17d2c:	adds	r4, r3, #1
   17d30:	adc	r5, r8, #0
   17d34:	subs	r2, r2, #1
   17d38:	beq	17d58 <__gcov_sort_n_vals@@Base+0x774>
   17d3c:	cmp	r5, r7
   17d40:	cmpeq	r4, r6
   17d44:	bcs	17d1c <__gcov_sort_n_vals@@Base+0x738>
   17d48:	adds	r4, r4, r4
   17d4c:	adc	r5, r5, r5
   17d50:	subs	r2, r2, #1
   17d54:	bne	17d3c <__gcov_sort_n_vals@@Base+0x758>
   17d58:	lsr	r3, r4, ip
   17d5c:	orr	r3, r3, r5, lsl fp
   17d60:	lsr	r2, r5, ip
   17d64:	orr	r3, r3, r5, lsr sl
   17d68:	adds	r0, r0, r4
   17d6c:	mov	r4, r3
   17d70:	lsl	r3, r2, ip
   17d74:	orr	r3, r3, r4, lsl sl
   17d78:	lsl	ip, r4, ip
   17d7c:	orr	r3, r3, r4, lsr fp
   17d80:	adc	r1, r1, r5
   17d84:	subs	r0, r0, ip
   17d88:	mov	r5, r2
   17d8c:	sbc	r1, r1, r3
   17d90:	cmp	lr, #0
   17d94:	strdne	r4, [lr]
   17d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017d9c <__libc_csu_init@@Base>:
   17d9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17da0:	mov	r7, r0
   17da4:	ldr	r6, [pc, #72]	; 17df4 <__libc_csu_init@@Base+0x58>
   17da8:	ldr	r5, [pc, #72]	; 17df8 <__libc_csu_init@@Base+0x5c>
   17dac:	add	r6, pc, r6
   17db0:	add	r5, pc, r5
   17db4:	sub	r6, r6, r5
   17db8:	mov	r8, r1
   17dbc:	mov	r9, r2
   17dc0:	bl	11928 <fdopen@plt-0x20>
   17dc4:	asrs	r6, r6, #2
   17dc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17dcc:	mov	r4, #0
   17dd0:	add	r4, r4, #1
   17dd4:	ldr	r3, [r5], #4
   17dd8:	mov	r2, r9
   17ddc:	mov	r1, r8
   17de0:	mov	r0, r7
   17de4:	blx	r3
   17de8:	cmp	r6, r4
   17dec:	bne	17dd0 <__libc_csu_init@@Base+0x34>
   17df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17df4:	andeq	r1, r1, r8, asr #2
   17df8:	andeq	r1, r1, r8, lsr #2

00017dfc <__libc_csu_fini@@Base>:
   17dfc:	bx	lr

Disassembly of section .fini:

00017e00 <.fini>:
   17e00:	push	{r3, lr}
   17e04:	pop	{r3, pc}
