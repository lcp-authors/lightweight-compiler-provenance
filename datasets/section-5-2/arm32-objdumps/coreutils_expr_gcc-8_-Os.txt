
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011138 <.init>:
   11138:	push	{r3, lr}
   1113c:	bl	11718 <__assert_fail@plt+0x230>
   11140:	pop	{r3, pc}

Disassembly of section .plt:

00011144 <pthread_mutex_unlock@plt-0x14>:
   11144:	push	{lr}		; (str lr, [sp, #-4]!)
   11148:	ldr	lr, [pc, #4]	; 11154 <pthread_mutex_unlock@plt-0x4>
   1114c:	add	lr, pc, lr
   11150:	ldr	pc, [lr, #8]!
   11154:	andeq	r0, r2, ip, lsr #29

00011158 <pthread_mutex_unlock@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #32, 20	; 0x20000
   11160:	ldr	pc, [ip, #3756]!	; 0xeac

00011164 <calloc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #32, 20	; 0x20000
   1116c:	ldr	pc, [ip, #3748]!	; 0xea4

00011170 <fputs_unlocked@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #32, 20	; 0x20000
   11178:	ldr	pc, [ip, #3740]!	; 0xe9c

0001117c <wctype@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #32, 20	; 0x20000
   11184:	ldr	pc, [ip, #3732]!	; 0xe94

00011188 <wcrtomb@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #32, 20	; 0x20000
   11190:	ldr	pc, [ip, #3724]!	; 0xe8c

00011194 <iswctype@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #32, 20	; 0x20000
   1119c:	ldr	pc, [ip, #3716]!	; 0xe84

000111a0 <strcmp@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #32, 20	; 0x20000
   111a8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111ac <__gmpz_tdiv_q@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #32, 20	; 0x20000
   111b4:	ldr	pc, [ip, #3700]!	; 0xe74

000111b8 <strcspn@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #32, 20	; 0x20000
   111c0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111c4 <pthread_mutex_destroy@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #32, 20	; 0x20000
   111cc:	ldr	pc, [ip, #3684]!	; 0xe64

000111d0 <fflush@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #32, 20	; 0x20000
   111d8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111dc <wcwidth@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #32, 20	; 0x20000
   111e4:	ldr	pc, [ip, #3668]!	; 0xe54

000111e8 <memmove@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #32, 20	; 0x20000
   111f0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111f4 <free@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #32, 20	; 0x20000
   111fc:	ldr	pc, [ip, #3652]!	; 0xe44

00011200 <pthread_mutex_lock@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #32, 20	; 0x20000
   11208:	ldr	pc, [ip, #3644]!	; 0xe3c

0001120c <_exit@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #32, 20	; 0x20000
   11214:	ldr	pc, [ip, #3636]!	; 0xe34

00011218 <memcpy@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #32, 20	; 0x20000
   11220:	ldr	pc, [ip, #3628]!	; 0xe2c

00011224 <__gmpz_sub@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #32, 20	; 0x20000
   1122c:	ldr	pc, [ip, #3620]!	; 0xe24

00011230 <tolower@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #32, 20	; 0x20000
   11238:	ldr	pc, [ip, #3612]!	; 0xe1c

0001123c <pthread_mutex_init@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #32, 20	; 0x20000
   11244:	ldr	pc, [ip, #3604]!	; 0xe14

00011248 <towlower@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #32, 20	; 0x20000
   11250:	ldr	pc, [ip, #3596]!	; 0xe0c

00011254 <mbsinit@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #32, 20	; 0x20000
   1125c:	ldr	pc, [ip, #3588]!	; 0xe04

00011260 <memcmp@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #32, 20	; 0x20000
   11268:	ldr	pc, [ip, #3580]!	; 0xdfc

0001126c <fputc_unlocked@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #32, 20	; 0x20000
   11274:	ldr	pc, [ip, #3572]!	; 0xdf4

00011278 <dcgettext@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #32, 20	; 0x20000
   11280:	ldr	pc, [ip, #3564]!	; 0xdec

00011284 <__gmpz_get_str@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #32, 20	; 0x20000
   1128c:	ldr	pc, [ip, #3556]!	; 0xde4

00011290 <realloc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #32, 20	; 0x20000
   11298:	ldr	pc, [ip, #3548]!	; 0xddc

0001129c <__gmpz_mul@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #32, 20	; 0x20000
   112a4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112a8 <textdomain@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #32, 20	; 0x20000
   112b0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112b4 <iswcntrl@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #32, 20	; 0x20000
   112bc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112c0 <__gmpz_out_str@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #32, 20	; 0x20000
   112c8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112cc <iswprint@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #32, 20	; 0x20000
   112d4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112d8 <lseek64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #32, 20	; 0x20000
   112e0:	ldr	pc, [ip, #3500]!	; 0xdac

000112e4 <__ctype_get_mb_cur_max@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #32, 20	; 0x20000
   112ec:	ldr	pc, [ip, #3492]!	; 0xda4

000112f0 <__fpending@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #32, 20	; 0x20000
   112f8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112fc <ferror_unlocked@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #32, 20	; 0x20000
   11304:	ldr	pc, [ip, #3476]!	; 0xd94

00011308 <mbrtowc@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #32, 20	; 0x20000
   11310:	ldr	pc, [ip, #3468]!	; 0xd8c

00011314 <error@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #32, 20	; 0x20000
   1131c:	ldr	pc, [ip, #3460]!	; 0xd84

00011320 <strcoll@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #32, 20	; 0x20000
   11328:	ldr	pc, [ip, #3452]!	; 0xd7c

0001132c <puts@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #32, 20	; 0x20000
   11334:	ldr	pc, [ip, #3444]!	; 0xd74

00011338 <malloc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #32, 20	; 0x20000
   11340:	ldr	pc, [ip, #3436]!	; 0xd6c

00011344 <__libc_start_main@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #32, 20	; 0x20000
   1134c:	ldr	pc, [ip, #3428]!	; 0xd64

00011350 <__freading@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #32, 20	; 0x20000
   11358:	ldr	pc, [ip, #3420]!	; 0xd5c

0001135c <__gmon_start__@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #32, 20	; 0x20000
   11364:	ldr	pc, [ip, #3412]!	; 0xd54

00011368 <mempcpy@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #32, 20	; 0x20000
   11370:	ldr	pc, [ip, #3404]!	; 0xd4c

00011374 <getopt_long@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #32, 20	; 0x20000
   1137c:	ldr	pc, [ip, #3396]!	; 0xd44

00011380 <__ctype_b_loc@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #32, 20	; 0x20000
   11388:	ldr	pc, [ip, #3388]!	; 0xd3c

0001138c <exit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #32, 20	; 0x20000
   11394:	ldr	pc, [ip, #3380]!	; 0xd34

00011398 <strlen@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #32, 20	; 0x20000
   113a0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113a4 <strchr@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #32, 20	; 0x20000
   113ac:	ldr	pc, [ip, #3364]!	; 0xd24

000113b0 <__gmpz_tdiv_r@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #32, 20	; 0x20000
   113b8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113bc <__gmpz_clear@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #32, 20	; 0x20000
   113c4:	ldr	pc, [ip, #3348]!	; 0xd14

000113c8 <__errno_location@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #32, 20	; 0x20000
   113d0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113d4 <iswalnum@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #32, 20	; 0x20000
   113dc:	ldr	pc, [ip, #3332]!	; 0xd04

000113e0 <__cxa_atexit@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #32, 20	; 0x20000
   113e8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113ec <memset@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #32, 20	; 0x20000
   113f4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113f8 <btowc@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #32, 20	; 0x20000
   11400:	ldr	pc, [ip, #3308]!	; 0xcec

00011404 <__printf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #32, 20	; 0x20000
   1140c:	ldr	pc, [ip, #3300]!	; 0xce4

00011410 <fileno@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #32, 20	; 0x20000
   11418:	ldr	pc, [ip, #3292]!	; 0xcdc

0001141c <__fprintf_chk@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #32, 20	; 0x20000
   11424:	ldr	pc, [ip, #3284]!	; 0xcd4

00011428 <memchr@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #32, 20	; 0x20000
   11430:	ldr	pc, [ip, #3276]!	; 0xccc

00011434 <fclose@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #32, 20	; 0x20000
   1143c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011440 <fseeko64@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #32, 20	; 0x20000
   11448:	ldr	pc, [ip, #3260]!	; 0xcbc

0001144c <__gmpz_init_set_ui@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #32, 20	; 0x20000
   11454:	ldr	pc, [ip, #3252]!	; 0xcb4

00011458 <setlocale@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #32, 20	; 0x20000
   11460:	ldr	pc, [ip, #3244]!	; 0xcac

00011464 <toupper@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #32, 20	; 0x20000
   1146c:	ldr	pc, [ip, #3236]!	; 0xca4

00011470 <strrchr@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #32, 20	; 0x20000
   11478:	ldr	pc, [ip, #3228]!	; 0xc9c

0001147c <nl_langinfo@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #32, 20	; 0x20000
   11484:	ldr	pc, [ip, #3220]!	; 0xc94

00011488 <__gmpz_add@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #32, 20	; 0x20000
   11490:	ldr	pc, [ip, #3212]!	; 0xc8c

00011494 <__gmpz_init_set_str@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #32, 20	; 0x20000
   1149c:	ldr	pc, [ip, #3204]!	; 0xc84

000114a0 <bindtextdomain@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #32, 20	; 0x20000
   114a8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114ac <towupper@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #32, 20	; 0x20000
   114b4:	ldr	pc, [ip, #3188]!	; 0xc74

000114b8 <fputs@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #32, 20	; 0x20000
   114c0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114c4 <strncmp@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #32, 20	; 0x20000
   114cc:	ldr	pc, [ip, #3172]!	; 0xc64

000114d0 <abort@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #32, 20	; 0x20000
   114d8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114dc <putchar_unlocked@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #32, 20	; 0x20000
   114e4:	ldr	pc, [ip, #3156]!	; 0xc54

000114e8 <__assert_fail@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #32, 20	; 0x20000
   114f0:	ldr	pc, [ip, #3148]!	; 0xc4c

Disassembly of section .text:

000114f4 <.text>:
   114f4:	push	{r4, lr}
   114f8:	bl	113c8 <__errno_location@plt>
   114fc:	mov	r3, #12
   11500:	str	r3, [r0]
   11504:	mov	r0, #0
   11508:	pop	{r4, pc}
   1150c:	push	{r4, r5, lr}
   11510:	mov	r5, r0
   11514:	sub	sp, sp, #28
   11518:	mov	r4, r1
   1151c:	ldr	r0, [r1]
   11520:	bl	13094 <__assert_fail@plt+0x1bac>
   11524:	ldr	r1, [pc, #364]	; 11698 <__assert_fail@plt+0x1b0>
   11528:	mov	r0, #6
   1152c:	bl	11458 <setlocale@plt>
   11530:	ldr	r1, [pc, #356]	; 1169c <__assert_fail@plt+0x1b4>
   11534:	ldr	r0, [pc, #356]	; 116a0 <__assert_fail@plt+0x1b8>
   11538:	bl	114a0 <bindtextdomain@plt>
   1153c:	ldr	r0, [pc, #348]	; 116a0 <__assert_fail@plt+0x1b8>
   11540:	bl	112a8 <textdomain@plt>
   11544:	ldr	r3, [pc, #344]	; 116a4 <__assert_fail@plt+0x1bc>
   11548:	mov	r2, #3
   1154c:	ldr	r0, [pc, #340]	; 116a8 <__assert_fail@plt+0x1c0>
   11550:	str	r2, [r3]
   11554:	bl	2058c <__assert_fail@plt+0xf0a4>
   11558:	mov	r3, #0
   1155c:	ldr	r2, [pc, #328]	; 116ac <__assert_fail@plt+0x1c4>
   11560:	mov	r1, r4
   11564:	mov	r0, r5
   11568:	str	r3, [sp, #20]
   1156c:	ldr	r3, [pc, #316]	; 116b0 <__assert_fail@plt+0x1c8>
   11570:	str	r3, [sp, #16]
   11574:	ldr	r3, [pc, #312]	; 116b4 <__assert_fail@plt+0x1cc>
   11578:	str	r3, [sp, #12]
   1157c:	ldr	r3, [pc, #308]	; 116b8 <__assert_fail@plt+0x1d0>
   11580:	str	r3, [sp, #8]
   11584:	ldr	r3, [pc, #304]	; 116bc <__assert_fail@plt+0x1d4>
   11588:	str	r3, [sp, #4]
   1158c:	ldr	r3, [pc, #300]	; 116c0 <__assert_fail@plt+0x1d8>
   11590:	str	r3, [sp]
   11594:	ldr	r3, [pc, #296]	; 116c4 <__assert_fail@plt+0x1dc>
   11598:	bl	12c28 <__assert_fail@plt+0x1740>
   1159c:	cmp	r5, #1
   115a0:	bls	115c4 <__assert_fail@plt+0xdc>
   115a4:	ldr	r1, [pc, #284]	; 116c8 <__assert_fail@plt+0x1e0>
   115a8:	ldr	r0, [r4, #4]
   115ac:	bl	111a0 <strcmp@plt>
   115b0:	cmp	r0, #0
   115b4:	bne	115ec <__assert_fail@plt+0x104>
   115b8:	cmp	r5, #2
   115bc:	addne	r4, r4, #4
   115c0:	bne	115ec <__assert_fail@plt+0x104>
   115c4:	mov	r2, #5
   115c8:	ldr	r1, [pc, #252]	; 116cc <__assert_fail@plt+0x1e4>
   115cc:	mov	r0, #0
   115d0:	bl	11278 <dcgettext@plt>
   115d4:	mov	r1, #0
   115d8:	mov	r2, r0
   115dc:	mov	r0, r1
   115e0:	bl	11314 <error@plt>
   115e4:	mov	r0, #2
   115e8:	bl	11c24 <__assert_fail@plt+0x73c>
   115ec:	ldr	r5, [pc, #220]	; 116d0 <__assert_fail@plt+0x1e8>
   115f0:	add	r4, r4, #4
   115f4:	mov	r0, #1
   115f8:	str	r4, [r5]
   115fc:	bl	12a40 <__assert_fail@plt+0x1558>
   11600:	ldr	r5, [r5]
   11604:	mov	r4, r0
   11608:	ldr	r3, [r5]
   1160c:	cmp	r3, #0
   11610:	beq	1164c <__assert_fail@plt+0x164>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #180]	; 116d4 <__assert_fail@plt+0x1ec>
   1161c:	mov	r0, #0
   11620:	bl	11278 <dcgettext@plt>
   11624:	mov	r4, r0
   11628:	mov	r1, #8
   1162c:	ldr	r2, [r5]
   11630:	mov	r0, #0
   11634:	bl	14444 <__assert_fail@plt+0x2f5c>
   11638:	mov	r3, r0
   1163c:	mov	r2, r4
   11640:	mov	r1, #0
   11644:	mov	r0, #2
   11648:	bl	11314 <error@plt>
   1164c:	ldr	r3, [r0]
   11650:	cmp	r3, #0
   11654:	beq	11664 <__assert_fail@plt+0x17c>
   11658:	cmp	r3, #1
   1165c:	beq	1168c <__assert_fail@plt+0x1a4>
   11660:	bl	114d0 <abort@plt>
   11664:	ldr	r3, [pc, #108]	; 116d8 <__assert_fail@plt+0x1f0>
   11668:	add	r2, r0, #4
   1166c:	mov	r1, #10
   11670:	ldr	r0, [r3]
   11674:	bl	112c0 <__gmpz_out_str@plt>
   11678:	mov	r0, #10
   1167c:	bl	114dc <putchar_unlocked@plt>
   11680:	mov	r0, r4
   11684:	bl	118cc <__assert_fail@plt+0x3e4>
   11688:	bl	1138c <exit@plt>
   1168c:	ldr	r0, [r0, #4]
   11690:	bl	1132c <puts@plt>
   11694:	b	11680 <__assert_fail@plt+0x198>
   11698:	andeq	r0, r2, r6, asr #29
   1169c:			; <UNDEFINED> instruction: 0x00020fb9
   116a0:	andeq	r0, r2, r4, lsr #28
   116a4:	andeq	r2, r3, ip, asr #2
   116a8:	andeq	r2, r1, r4, lsl #22
   116ac:	andeq	r0, r2, ip, lsl #12
   116b0:	ldrdeq	r0, [r2], -r1
   116b4:	ldrdeq	r0, [r2], -sp
   116b8:	andeq	r0, r2, ip, ror #31
   116bc:	andeq	r1, r1, r4, lsr #24
   116c0:	strdeq	r0, [r2], -r8
   116c4:	andeq	r0, r2, r0, lsr #28
   116c8:	andeq	r1, r2, r7
   116cc:	andeq	r1, r2, sl
   116d0:			; <UNDEFINED> instruction: 0x000321b0
   116d4:	andeq	r1, r2, sl, lsl r0
   116d8:	andeq	r2, r3, r4, lsr #3
   116dc:	mov	fp, #0
   116e0:	mov	lr, #0
   116e4:	pop	{r1}		; (ldr r1, [sp], #4)
   116e8:	mov	r2, sp
   116ec:	push	{r2}		; (str r2, [sp, #-4]!)
   116f0:	push	{r0}		; (str r0, [sp, #-4]!)
   116f4:	ldr	ip, [pc, #16]	; 1170c <__assert_fail@plt+0x224>
   116f8:	push	{ip}		; (str ip, [sp, #-4]!)
   116fc:	ldr	r0, [pc, #12]	; 11710 <__assert_fail@plt+0x228>
   11700:	ldr	r3, [pc, #12]	; 11714 <__assert_fail@plt+0x22c>
   11704:	bl	11344 <__libc_start_main@plt>
   11708:	bl	114d0 <abort@plt>
   1170c:	andeq	r0, r2, r8, lsl #11
   11710:	andeq	r1, r1, ip, lsl #10
   11714:	andeq	r0, r2, r8, lsr #10
   11718:	ldr	r3, [pc, #20]	; 11734 <__assert_fail@plt+0x24c>
   1171c:	ldr	r2, [pc, #20]	; 11738 <__assert_fail@plt+0x250>
   11720:	add	r3, pc, r3
   11724:	ldr	r2, [r3, r2]
   11728:	cmp	r2, #0
   1172c:	bxeq	lr
   11730:	b	1135c <__gmon_start__@plt>
   11734:	ldrdeq	r0, [r2], -r8
   11738:	andeq	r0, r0, r0, asr #2
   1173c:	ldr	r0, [pc, #24]	; 1175c <__assert_fail@plt+0x274>
   11740:	ldr	r3, [pc, #24]	; 11760 <__assert_fail@plt+0x278>
   11744:	cmp	r3, r0
   11748:	bxeq	lr
   1174c:	ldr	r3, [pc, #16]	; 11764 <__assert_fail@plt+0x27c>
   11750:	cmp	r3, #0
   11754:	bxeq	lr
   11758:	bx	r3
   1175c:	muleq	r3, r0, r1
   11760:	muleq	r3, r0, r1
   11764:	andeq	r0, r0, r0
   11768:	ldr	r0, [pc, #36]	; 11794 <__assert_fail@plt+0x2ac>
   1176c:	ldr	r1, [pc, #36]	; 11798 <__assert_fail@plt+0x2b0>
   11770:	sub	r1, r1, r0
   11774:	asr	r1, r1, #2
   11778:	add	r1, r1, r1, lsr #31
   1177c:	asrs	r1, r1, #1
   11780:	bxeq	lr
   11784:	ldr	r3, [pc, #16]	; 1179c <__assert_fail@plt+0x2b4>
   11788:	cmp	r3, #0
   1178c:	bxeq	lr
   11790:	bx	r3
   11794:	muleq	r3, r0, r1
   11798:	muleq	r3, r0, r1
   1179c:	andeq	r0, r0, r0
   117a0:	push	{r4, lr}
   117a4:	ldr	r4, [pc, #24]	; 117c4 <__assert_fail@plt+0x2dc>
   117a8:	ldrb	r3, [r4]
   117ac:	cmp	r3, #0
   117b0:	popne	{r4, pc}
   117b4:	bl	1173c <__assert_fail@plt+0x254>
   117b8:	mov	r3, #1
   117bc:	strb	r3, [r4]
   117c0:	pop	{r4, pc}
   117c4:	andeq	r2, r3, ip, lsr #3
   117c8:	b	11768 <__assert_fail@plt+0x280>
   117cc:	ldrb	r3, [r0]
   117d0:	cmp	r3, #45	; 0x2d
   117d4:	addeq	r0, r0, #1
   117d8:	ldrb	r3, [r0]
   117dc:	sub	r3, r3, #48	; 0x30
   117e0:	cmp	r3, #9
   117e4:	bhi	117fc <__assert_fail@plt+0x314>
   117e8:	ldrb	r3, [r0, #1]!
   117ec:	cmp	r3, #0
   117f0:	bne	117d8 <__assert_fail@plt+0x2f0>
   117f4:	mov	r0, #1
   117f8:	bx	lr
   117fc:	mov	r0, #0
   11800:	bx	lr
   11804:	push	{r4, r5, r6, lr}
   11808:	mov	r1, r0
   1180c:	ldr	r5, [pc, #36]	; 11838 <__assert_fail@plt+0x350>
   11810:	ldr	r4, [r5]
   11814:	ldr	r0, [r4]
   11818:	cmp	r0, #0
   1181c:	popeq	{r4, r5, r6, pc}
   11820:	bl	111a0 <strcmp@plt>
   11824:	clz	r0, r0
   11828:	lsr	r0, r0, #5
   1182c:	add	r4, r4, r0, lsl #2
   11830:	str	r4, [r5]
   11834:	pop	{r4, r5, r6, pc}
   11838:			; <UNDEFINED> instruction: 0x000321b0
   1183c:	push	{r4, r5, r6, lr}
   11840:	mov	r5, r0
   11844:	mov	r0, #16
   11848:	bl	1fc78 <__assert_fail@plt+0xe790>
   1184c:	mov	r4, r0
   11850:	mov	r3, #1
   11854:	mov	r0, r5
   11858:	str	r3, [r4]
   1185c:	bl	1ff14 <__assert_fail@plt+0xea2c>
   11860:	str	r0, [r4, #4]
   11864:	mov	r0, r4
   11868:	pop	{r4, r5, r6, pc}
   1186c:	ldr	r3, [r0]
   11870:	push	{r4, lr}
   11874:	mov	r4, r0
   11878:	cmp	r3, #1
   1187c:	bne	11894 <__assert_fail@plt+0x3ac>
   11880:	ldr	r0, [r0, #4]
   11884:	bl	12bd8 <__assert_fail@plt+0x16f0>
   11888:	mov	r0, r4
   1188c:	pop	{r4, lr}
   11890:	b	12bd8 <__assert_fail@plt+0x16f0>
   11894:	add	r0, r0, #4
   11898:	bl	113bc <__gmpz_clear@plt>
   1189c:	b	11888 <__assert_fail@plt+0x3a0>
   118a0:	push	{r4, r5, r6, lr}
   118a4:	mov	r5, r0
   118a8:	mov	r0, #16
   118ac:	bl	1fc78 <__assert_fail@plt+0xe790>
   118b0:	mov	r3, #0
   118b4:	mov	r4, r0
   118b8:	mov	r1, r5
   118bc:	str	r3, [r0], #4
   118c0:	bl	1144c <__gmpz_init_set_ui@plt>
   118c4:	mov	r0, r4
   118c8:	pop	{r4, r5, r6, pc}
   118cc:	ldr	r3, [r0]
   118d0:	cmp	r3, #0
   118d4:	beq	118e8 <__assert_fail@plt+0x400>
   118d8:	cmp	r3, #1
   118dc:	beq	118f8 <__assert_fail@plt+0x410>
   118e0:	push	{r4, lr}
   118e4:	bl	114d0 <abort@plt>
   118e8:	ldr	r0, [r0, #8]
   118ec:	clz	r0, r0
   118f0:	lsr	r0, r0, #5
   118f4:	bx	lr
   118f8:	ldr	r2, [r0, #4]
   118fc:	ldrb	r1, [r2]
   11900:	cmp	r1, #0
   11904:	beq	1192c <__assert_fail@plt+0x444>
   11908:	cmp	r1, #45	; 0x2d
   1190c:	movne	r3, r2
   11910:	addeq	r3, r2, #1
   11914:	ldrb	r2, [r3]
   11918:	cmp	r2, #48	; 0x30
   1191c:	bne	11934 <__assert_fail@plt+0x44c>
   11920:	ldrb	r2, [r3, #1]!
   11924:	cmp	r2, #0
   11928:	bne	11914 <__assert_fail@plt+0x42c>
   1192c:	mov	r0, #1
   11930:	bx	lr
   11934:	mov	r0, #0
   11938:	bx	lr
   1193c:	ldr	r3, [r0]
   11940:	push	{r4, r5, r6, r7, r8, lr}
   11944:	cmp	r3, #0
   11948:	beq	119b0 <__assert_fail@plt+0x4c8>
   1194c:	cmp	r3, #1
   11950:	mov	r4, r0
   11954:	bne	119ac <__assert_fail@plt+0x4c4>
   11958:	ldr	r5, [r0, #4]
   1195c:	mov	r0, r5
   11960:	bl	117cc <__assert_fail@plt+0x2e4>
   11964:	subs	r6, r0, #0
   11968:	beq	119a4 <__assert_fail@plt+0x4bc>
   1196c:	mov	r2, #10
   11970:	mov	r1, r5
   11974:	add	r0, r4, #4
   11978:	bl	11494 <__gmpz_init_set_str@plt>
   1197c:	subs	r7, r0, #0
   11980:	beq	11998 <__assert_fail@plt+0x4b0>
   11984:	mov	r3, r5
   11988:	ldr	r2, [pc, #40]	; 119b8 <__assert_fail@plt+0x4d0>
   1198c:	mov	r1, #34	; 0x22
   11990:	mov	r0, #3
   11994:	bl	11314 <error@plt>
   11998:	mov	r0, r5
   1199c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   119a0:	str	r7, [r4]
   119a4:	mov	r0, r6
   119a8:	pop	{r4, r5, r6, r7, r8, pc}
   119ac:	bl	114d0 <abort@plt>
   119b0:	mov	r6, #1
   119b4:	b	119a4 <__assert_fail@plt+0x4bc>
   119b8:	andeq	r1, r2, lr, lsr #1
   119bc:	push	{r4, r5, r6, lr}
   119c0:	mov	r4, r0
   119c4:	ldr	r0, [r0]
   119c8:	cmp	r0, #0
   119cc:	beq	119dc <__assert_fail@plt+0x4f4>
   119d0:	cmp	r0, #1
   119d4:	popeq	{r4, r5, r6, pc}
   119d8:	bl	114d0 <abort@plt>
   119dc:	add	r5, r4, #4
   119e0:	mov	r1, #10
   119e4:	mov	r2, r5
   119e8:	bl	11284 <__gmpz_get_str@plt>
   119ec:	mov	r6, r0
   119f0:	mov	r0, r5
   119f4:	bl	113bc <__gmpz_clear@plt>
   119f8:	mov	r3, #1
   119fc:	stm	r4, {r3, r6}
   11a00:	pop	{r4, r5, r6, pc}
   11a04:	push	{r4, r5, r6, r7, lr}
   11a08:	mov	r5, r1
   11a0c:	sub	sp, sp, #372	; 0x174
   11a10:	mov	r6, r0
   11a14:	mov	r4, #0
   11a18:	bl	119bc <__assert_fail@plt+0x4d4>
   11a1c:	mov	r0, r5
   11a20:	bl	119bc <__assert_fail@plt+0x4d4>
   11a24:	add	r3, sp, #112	; 0x70
   11a28:	ldr	r5, [r5, #4]
   11a2c:	movw	r2, #710	; 0x2c6
   11a30:	str	r4, [sp, #12]
   11a34:	str	r4, [sp, #16]
   11a38:	str	r3, [sp, #40]	; 0x28
   11a3c:	ldr	r3, [pc, #464]	; 11c14 <__assert_fail@plt+0x72c>
   11a40:	mov	r0, r5
   11a44:	str	r4, [sp, #20]
   11a48:	str	r4, [sp, #24]
   11a4c:	str	r4, [sp, #28]
   11a50:	str	r4, [sp, #44]	; 0x2c
   11a54:	str	r2, [r3]
   11a58:	bl	11398 <strlen@plt>
   11a5c:	mov	r1, r0
   11a60:	add	r2, sp, #24
   11a64:	mov	r0, r5
   11a68:	bl	1ebc8 <__assert_fail@plt+0xd6e0>
   11a6c:	subs	r7, r0, #0
   11a70:	beq	11a88 <__assert_fail@plt+0x5a0>
   11a74:	mov	r3, r7
   11a78:	ldr	r2, [pc, #408]	; 11c18 <__assert_fail@plt+0x730>
   11a7c:	mov	r1, r4
   11a80:	mov	r0, #2
   11a84:	bl	11314 <error@plt>
   11a88:	ldrb	r3, [sp, #52]	; 0x34
   11a8c:	ldr	r4, [r6, #4]
   11a90:	bfi	r3, r7, #7, #1
   11a94:	mov	r0, r4
   11a98:	strb	r3, [sp, #52]	; 0x34
   11a9c:	bl	11398 <strlen@plt>
   11aa0:	add	r3, sp, #12
   11aa4:	mov	r2, r0
   11aa8:	mov	r1, r4
   11aac:	add	r0, sp, #24
   11ab0:	str	r3, [sp]
   11ab4:	mov	r3, r7
   11ab8:	bl	1f398 <__assert_fail@plt+0xdeb0>
   11abc:	subs	r5, r0, #0
   11ac0:	blt	11bc8 <__assert_fail@plt+0x6e0>
   11ac4:	ldr	r4, [sp, #48]	; 0x30
   11ac8:	cmp	r4, #0
   11acc:	beq	11b40 <__assert_fail@plt+0x658>
   11ad0:	ldr	r3, [sp, #20]
   11ad4:	ldr	r3, [r3, #4]
   11ad8:	cmp	r3, #0
   11adc:	bge	11b24 <__assert_fail@plt+0x63c>
   11ae0:	ldr	r0, [pc, #308]	; 11c1c <__assert_fail@plt+0x734>
   11ae4:	bl	1183c <__assert_fail@plt+0x354>
   11ae8:	ldr	r3, [sp, #12]
   11aec:	mov	r4, r0
   11af0:	cmp	r3, #0
   11af4:	beq	11b08 <__assert_fail@plt+0x620>
   11af8:	ldr	r0, [sp, #16]
   11afc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   11b00:	ldr	r0, [sp, #20]
   11b04:	bl	12bd8 <__assert_fail@plt+0x16f0>
   11b08:	mov	r3, #0
   11b0c:	add	r0, sp, #24
   11b10:	str	r3, [sp, #40]	; 0x28
   11b14:	bl	1f230 <__assert_fail@plt+0xdd48>
   11b18:	mov	r0, r4
   11b1c:	add	sp, sp, #372	; 0x174
   11b20:	pop	{r4, r5, r6, r7, pc}
   11b24:	ldr	r2, [r6, #4]
   11b28:	strb	r7, [r2, r3]
   11b2c:	ldr	r3, [sp, #16]
   11b30:	ldr	r0, [r6, #4]
   11b34:	ldr	r3, [r3, #4]
   11b38:	add	r0, r0, r3
   11b3c:	b	11ae4 <__assert_fail@plt+0x5fc>
   11b40:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   11b44:	cmp	r0, #1
   11b48:	mov	r3, r5
   11b4c:	beq	11b94 <__assert_fail@plt+0x6ac>
   11b50:	ldr	r6, [r6, #4]
   11b54:	mov	r2, #0
   11b58:	mov	r3, #0
   11b5c:	mov	r7, r4
   11b60:	strb	r4, [sp, #56]	; 0x38
   11b64:	strd	r2, [sp, #60]	; 0x3c
   11b68:	strb	r4, [sp, #68]	; 0x44
   11b6c:	str	r6, [sp, #72]	; 0x48
   11b70:	add	r0, sp, #56	; 0x38
   11b74:	bl	12ee4 <__assert_fail@plt+0x19fc>
   11b78:	ldrb	r3, [sp, #80]	; 0x50
   11b7c:	cmp	r3, #0
   11b80:	beq	11ba0 <__assert_fail@plt+0x6b8>
   11b84:	ldr	r3, [sp, #84]	; 0x54
   11b88:	cmp	r3, #0
   11b8c:	bne	11ba0 <__assert_fail@plt+0x6b8>
   11b90:	mov	r3, r4
   11b94:	mov	r0, r3
   11b98:	bl	118a0 <__assert_fail@plt+0x3b8>
   11b9c:	b	11ae8 <__assert_fail@plt+0x600>
   11ba0:	ldr	r3, [sp, #72]	; 0x48
   11ba4:	sub	r2, r3, r6
   11ba8:	cmp	r2, r5
   11bac:	bcs	11b90 <__assert_fail@plt+0x6a8>
   11bb0:	ldr	r2, [sp, #76]	; 0x4c
   11bb4:	add	r4, r4, #1
   11bb8:	strb	r7, [sp, #68]	; 0x44
   11bbc:	add	r3, r3, r2
   11bc0:	str	r3, [sp, #72]	; 0x48
   11bc4:	b	11b70 <__assert_fail@plt+0x688>
   11bc8:	cmn	r5, #1
   11bcc:	bne	11be0 <__assert_fail@plt+0x6f8>
   11bd0:	ldr	r0, [sp, #48]	; 0x30
   11bd4:	cmp	r0, #0
   11bd8:	bne	11ae0 <__assert_fail@plt+0x5f8>
   11bdc:	b	11b98 <__assert_fail@plt+0x6b0>
   11be0:	cmn	r5, #2
   11be4:	movne	r4, #75	; 0x4b
   11be8:	bne	11bf4 <__assert_fail@plt+0x70c>
   11bec:	bl	113c8 <__errno_location@plt>
   11bf0:	ldr	r4, [r0]
   11bf4:	mov	r2, #5
   11bf8:	mov	r0, #0
   11bfc:	ldr	r1, [pc, #28]	; 11c20 <__assert_fail@plt+0x738>
   11c00:	bl	11278 <dcgettext@plt>
   11c04:	mov	r2, r0
   11c08:	mov	r1, r4
   11c0c:	mov	r0, #3
   11c10:	bl	11314 <error@plt>
   11c14:	strdeq	r2, [r3], -r0
   11c18:	andeq	r1, r2, lr, lsr #1
   11c1c:	andeq	r0, r2, r6, asr #29
   11c20:	andeq	r0, r2, r8, ror #11
   11c24:	subs	r5, r0, #0
   11c28:	push	{r7, lr}
   11c2c:	sub	sp, sp, #56	; 0x38
   11c30:	ldr	r4, [pc, #628]	; 11eac <__assert_fail@plt+0x9c4>
   11c34:	beq	11c6c <__assert_fail@plt+0x784>
   11c38:	mov	r2, #5
   11c3c:	mov	r0, #0
   11c40:	ldr	r3, [pc, #616]	; 11eb0 <__assert_fail@plt+0x9c8>
   11c44:	ldr	r1, [pc, #616]	; 11eb4 <__assert_fail@plt+0x9cc>
   11c48:	ldr	r6, [r3]
   11c4c:	bl	11278 <dcgettext@plt>
   11c50:	mov	r2, r0
   11c54:	mov	r1, #1
   11c58:	ldr	r3, [r4]
   11c5c:	mov	r0, r6
   11c60:	bl	1141c <__fprintf_chk@plt>
   11c64:	mov	r0, r5
   11c68:	bl	1138c <exit@plt>
   11c6c:	mov	r2, #5
   11c70:	ldr	r1, [pc, #576]	; 11eb8 <__assert_fail@plt+0x9d0>
   11c74:	mov	r6, sp
   11c78:	bl	11278 <dcgettext@plt>
   11c7c:	ldr	r3, [r4]
   11c80:	mov	r1, r0
   11c84:	mov	r0, #1
   11c88:	ldr	r4, [pc, #556]	; 11ebc <__assert_fail@plt+0x9d4>
   11c8c:	ldr	r7, [pc, #556]	; 11ec0 <__assert_fail@plt+0x9d8>
   11c90:	mov	r2, r3
   11c94:	bl	11404 <__printf_chk@plt>
   11c98:	mov	r0, #10
   11c9c:	bl	114dc <putchar_unlocked@plt>
   11ca0:	mov	r2, #5
   11ca4:	ldr	r1, [pc, #536]	; 11ec4 <__assert_fail@plt+0x9dc>
   11ca8:	mov	r0, r5
   11cac:	bl	11278 <dcgettext@plt>
   11cb0:	ldr	r1, [r4]
   11cb4:	bl	11170 <fputs_unlocked@plt>
   11cb8:	mov	r2, #5
   11cbc:	ldr	r1, [pc, #516]	; 11ec8 <__assert_fail@plt+0x9e0>
   11cc0:	mov	r0, r5
   11cc4:	bl	11278 <dcgettext@plt>
   11cc8:	ldr	r1, [r4]
   11ccc:	bl	11170 <fputs_unlocked@plt>
   11cd0:	mov	r2, #5
   11cd4:	ldr	r1, [pc, #496]	; 11ecc <__assert_fail@plt+0x9e4>
   11cd8:	mov	r0, r5
   11cdc:	bl	11278 <dcgettext@plt>
   11ce0:	ldr	r1, [r4]
   11ce4:	bl	11170 <fputs_unlocked@plt>
   11ce8:	mov	r2, #5
   11cec:	ldr	r1, [pc, #476]	; 11ed0 <__assert_fail@plt+0x9e8>
   11cf0:	mov	r0, r5
   11cf4:	bl	11278 <dcgettext@plt>
   11cf8:	ldr	r1, [r4]
   11cfc:	bl	11170 <fputs_unlocked@plt>
   11d00:	mov	r2, #5
   11d04:	ldr	r1, [pc, #456]	; 11ed4 <__assert_fail@plt+0x9ec>
   11d08:	mov	r0, r5
   11d0c:	bl	11278 <dcgettext@plt>
   11d10:	ldr	r1, [r4]
   11d14:	bl	11170 <fputs_unlocked@plt>
   11d18:	mov	r2, #5
   11d1c:	ldr	r1, [pc, #436]	; 11ed8 <__assert_fail@plt+0x9f0>
   11d20:	mov	r0, r5
   11d24:	bl	11278 <dcgettext@plt>
   11d28:	ldr	r1, [r4]
   11d2c:	bl	11170 <fputs_unlocked@plt>
   11d30:	mov	r2, #5
   11d34:	ldr	r1, [pc, #416]	; 11edc <__assert_fail@plt+0x9f4>
   11d38:	mov	r0, r5
   11d3c:	bl	11278 <dcgettext@plt>
   11d40:	ldr	r1, [r4]
   11d44:	bl	11170 <fputs_unlocked@plt>
   11d48:	mov	r2, #5
   11d4c:	ldr	r1, [pc, #396]	; 11ee0 <__assert_fail@plt+0x9f8>
   11d50:	mov	r0, r5
   11d54:	bl	11278 <dcgettext@plt>
   11d58:	ldr	r1, [r4]
   11d5c:	bl	11170 <fputs_unlocked@plt>
   11d60:	mov	r2, #5
   11d64:	ldr	r1, [pc, #376]	; 11ee4 <__assert_fail@plt+0x9fc>
   11d68:	mov	r0, r5
   11d6c:	bl	11278 <dcgettext@plt>
   11d70:	ldr	r1, [r4]
   11d74:	bl	11170 <fputs_unlocked@plt>
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #356]	; 11ee8 <__assert_fail@plt+0xa00>
   11d80:	mov	r0, r5
   11d84:	bl	11278 <dcgettext@plt>
   11d88:	ldr	r1, [r4]
   11d8c:	bl	11170 <fputs_unlocked@plt>
   11d90:	ldr	lr, [pc, #340]	; 11eec <__assert_fail@plt+0xa04>
   11d94:	mov	ip, sp
   11d98:	ldm	lr!, {r0, r1, r2, r3}
   11d9c:	stmia	ip!, {r0, r1, r2, r3}
   11da0:	ldm	lr!, {r0, r1, r2, r3}
   11da4:	stmia	ip!, {r0, r1, r2, r3}
   11da8:	ldm	lr!, {r0, r1, r2, r3}
   11dac:	stmia	ip!, {r0, r1, r2, r3}
   11db0:	ldm	lr, {r0, r1}
   11db4:	stm	ip, {r0, r1}
   11db8:	ldr	r1, [r6]
   11dbc:	cmp	r1, #0
   11dc0:	bne	11e64 <__assert_fail@plt+0x97c>
   11dc4:	ldr	r6, [r6, #4]
   11dc8:	mov	r2, #5
   11dcc:	mov	r0, #0
   11dd0:	ldr	r7, [pc, #232]	; 11ec0 <__assert_fail@plt+0x9d8>
   11dd4:	ldr	r1, [pc, #276]	; 11ef0 <__assert_fail@plt+0xa08>
   11dd8:	cmp	r6, #0
   11ddc:	moveq	r6, r7
   11de0:	bl	11278 <dcgettext@plt>
   11de4:	mov	r1, r0
   11de8:	ldr	r3, [pc, #260]	; 11ef4 <__assert_fail@plt+0xa0c>
   11dec:	mov	r0, #1
   11df0:	ldr	r2, [pc, #256]	; 11ef8 <__assert_fail@plt+0xa10>
   11df4:	bl	11404 <__printf_chk@plt>
   11df8:	mov	r1, #0
   11dfc:	mov	r0, #5
   11e00:	bl	11458 <setlocale@plt>
   11e04:	cmp	r0, #0
   11e08:	bne	11e7c <__assert_fail@plt+0x994>
   11e0c:	mov	r2, #5
   11e10:	ldr	r1, [pc, #228]	; 11efc <__assert_fail@plt+0xa14>
   11e14:	mov	r0, #0
   11e18:	bl	11278 <dcgettext@plt>
   11e1c:	mov	r1, r0
   11e20:	ldr	r3, [pc, #152]	; 11ec0 <__assert_fail@plt+0x9d8>
   11e24:	mov	r0, #1
   11e28:	ldr	r2, [pc, #196]	; 11ef4 <__assert_fail@plt+0xa0c>
   11e2c:	bl	11404 <__printf_chk@plt>
   11e30:	mov	r2, #5
   11e34:	ldr	r1, [pc, #196]	; 11f00 <__assert_fail@plt+0xa18>
   11e38:	mov	r0, #0
   11e3c:	bl	11278 <dcgettext@plt>
   11e40:	ldr	r2, [pc, #188]	; 11f04 <__assert_fail@plt+0xa1c>
   11e44:	cmp	r6, r7
   11e48:	mov	r1, r0
   11e4c:	mov	r0, #1
   11e50:	ldr	r3, [pc, #176]	; 11f08 <__assert_fail@plt+0xa20>
   11e54:	moveq	r3, r2
   11e58:	mov	r2, r6
   11e5c:	bl	11404 <__printf_chk@plt>
   11e60:	b	11c64 <__assert_fail@plt+0x77c>
   11e64:	mov	r0, r7
   11e68:	bl	111a0 <strcmp@plt>
   11e6c:	cmp	r0, #0
   11e70:	beq	11dc4 <__assert_fail@plt+0x8dc>
   11e74:	add	r6, r6, #8
   11e78:	b	11db8 <__assert_fail@plt+0x8d0>
   11e7c:	mov	r2, #3
   11e80:	ldr	r1, [pc, #132]	; 11f0c <__assert_fail@plt+0xa24>
   11e84:	bl	114c4 <strncmp@plt>
   11e88:	cmp	r0, #0
   11e8c:	beq	11e0c <__assert_fail@plt+0x924>
   11e90:	mov	r2, #5
   11e94:	ldr	r1, [pc, #116]	; 11f10 <__assert_fail@plt+0xa28>
   11e98:	mov	r0, #0
   11e9c:	bl	11278 <dcgettext@plt>
   11ea0:	ldr	r1, [r4]
   11ea4:	bl	11170 <fputs_unlocked@plt>
   11ea8:	b	11e0c <__assert_fail@plt+0x924>
   11eac:			; <UNDEFINED> instruction: 0x000321bc
   11eb0:	andeq	r2, r3, r0, lsr #3
   11eb4:	andeq	r0, r2, r1, lsl r6
   11eb8:	andeq	r0, r2, r8, lsr r6
   11ebc:	andeq	r2, r3, r4, lsr #3
   11ec0:	andeq	r0, r2, ip, lsl #12
   11ec4:	andeq	r0, r2, pc, asr r6
   11ec8:	andeq	r0, r2, ip, lsl #13
   11ecc:	andeq	r0, r2, r2, asr #13
   11ed0:	ldrdeq	r0, [r2], -r4
   11ed4:	strdeq	r0, [r2], -r6
   11ed8:	andeq	r0, r2, r7, ror #18
   11edc:	andeq	r0, r2, r2, lsr #20
   11ee0:	andeq	r0, r2, r8, asr fp
   11ee4:	andeq	r0, r2, r1, lsr #24
   11ee8:	andeq	r0, r2, r5, asr #26
   11eec:			; <UNDEFINED> instruction: 0x000205b0
   11ef0:	andeq	r0, r2, r1, ror #27
   11ef4:	strdeq	r0, [r2], -r8
   11ef8:	andeq	r0, r2, r0, lsr #28
   11efc:	andeq	r0, r2, r9, ror lr
   11f00:	muleq	r2, r4, lr
   11f04:	andeq	r1, r2, fp, asr r0
   11f08:	andeq	r0, r2, r6, asr #29
   11f0c:	andeq	r0, r2, lr, lsr #28
   11f10:	andeq	r0, r2, r2, lsr lr
   11f14:	ldr	r3, [pc, #72]	; 11f64 <__assert_fail@plt+0xa7c>
   11f18:	push	{r4, r5, r6, lr}
   11f1c:	ldr	r5, [r3]
   11f20:	ldr	r4, [r5]
   11f24:	cmp	r4, #0
   11f28:	popne	{r4, r5, r6, pc}
   11f2c:	mov	r2, #5
   11f30:	ldr	r1, [pc, #48]	; 11f68 <__assert_fail@plt+0xa80>
   11f34:	mov	r0, r4
   11f38:	bl	11278 <dcgettext@plt>
   11f3c:	mov	r6, r0
   11f40:	mov	r1, #8
   11f44:	ldr	r2, [r5, #-4]
   11f48:	mov	r0, r4
   11f4c:	bl	14444 <__assert_fail@plt+0x2f5c>
   11f50:	mov	r3, r0
   11f54:	mov	r2, r6
   11f58:	mov	r1, r4
   11f5c:	mov	r0, #2
   11f60:	bl	11314 <error@plt>
   11f64:			; <UNDEFINED> instruction: 0x000321b0
   11f68:	andeq	r0, r2, r7, asr #29
   11f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f70:	mov	r5, r0
   11f74:	sub	sp, sp, #132	; 0x84
   11f78:	ldr	r0, [pc, #1444]	; 12524 <__assert_fail@plt+0x103c>
   11f7c:	bl	11804 <__assert_fail@plt+0x31c>
   11f80:	cmp	r0, #0
   11f84:	beq	11fac <__assert_fail@plt+0xac4>
   11f88:	bl	11f14 <__assert_fail@plt+0xa2c>
   11f8c:	ldr	r2, [pc, #1428]	; 12528 <__assert_fail@plt+0x1040>
   11f90:	ldr	r3, [r2]
   11f94:	add	r1, r3, #4
   11f98:	str	r1, [r2]
   11f9c:	ldr	r0, [r3]
   11fa0:	bl	1183c <__assert_fail@plt+0x354>
   11fa4:	mov	r4, r0
   11fa8:	b	11fe4 <__assert_fail@plt+0xafc>
   11fac:	ldr	r0, [pc, #1400]	; 1252c <__assert_fail@plt+0x1044>
   11fb0:	bl	11804 <__assert_fail@plt+0x31c>
   11fb4:	cmp	r0, #0
   11fb8:	beq	11ff0 <__assert_fail@plt+0xb08>
   11fbc:	mov	r0, r5
   11fc0:	bl	11f6c <__assert_fail@plt+0xa84>
   11fc4:	mov	r5, r0
   11fc8:	bl	119bc <__assert_fail@plt+0x4d4>
   11fcc:	ldr	r0, [r5, #4]
   11fd0:	bl	12e58 <__assert_fail@plt+0x1970>
   11fd4:	bl	118a0 <__assert_fail@plt+0x3b8>
   11fd8:	mov	r4, r0
   11fdc:	mov	r0, r5
   11fe0:	bl	1186c <__assert_fail@plt+0x384>
   11fe4:	mov	r0, r4
   11fe8:	add	sp, sp, #132	; 0x84
   11fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff0:	ldr	r0, [pc, #1336]	; 12530 <__assert_fail@plt+0x1048>
   11ff4:	bl	11804 <__assert_fail@plt+0x31c>
   11ff8:	subs	fp, r0, #0
   11ffc:	beq	12044 <__assert_fail@plt+0xb5c>
   12000:	mov	r0, r5
   12004:	bl	11f6c <__assert_fail@plt+0xa84>
   12008:	mov	r4, r0
   1200c:	mov	r0, r5
   12010:	bl	11f6c <__assert_fail@plt+0xa84>
   12014:	cmp	r5, #0
   12018:	mov	r6, r0
   1201c:	beq	1203c <__assert_fail@plt+0xb54>
   12020:	mov	r1, r0
   12024:	mov	r0, r4
   12028:	bl	11a04 <__assert_fail@plt+0x51c>
   1202c:	mov	r5, r0
   12030:	mov	r0, r4
   12034:	mov	r4, r5
   12038:	bl	1186c <__assert_fail@plt+0x384>
   1203c:	mov	r0, r6
   12040:	b	11fe0 <__assert_fail@plt+0xaf8>
   12044:	ldr	r0, [pc, #1256]	; 12534 <__assert_fail@plt+0x104c>
   12048:	bl	11804 <__assert_fail@plt+0x31c>
   1204c:	cmp	r0, #0
   12050:	beq	121f4 <__assert_fail@plt+0xd0c>
   12054:	mov	r0, r5
   12058:	bl	11f6c <__assert_fail@plt+0xa84>
   1205c:	mov	r7, r0
   12060:	mov	r0, r5
   12064:	bl	11f6c <__assert_fail@plt+0xa84>
   12068:	mov	r8, r0
   1206c:	mov	r0, r7
   12070:	bl	119bc <__assert_fail@plt+0x4d4>
   12074:	mov	r0, r8
   12078:	bl	119bc <__assert_fail@plt+0x4d4>
   1207c:	ldr	r4, [r8, #4]
   12080:	ldrb	r3, [r4]
   12084:	cmp	r3, #0
   12088:	bne	120ac <__assert_fail@plt+0xbc4>
   1208c:	mov	sl, #0
   12090:	mov	r0, sl
   12094:	bl	118a0 <__assert_fail@plt+0x3b8>
   12098:	mov	r4, r0
   1209c:	mov	r0, r7
   120a0:	bl	1186c <__assert_fail@plt+0x384>
   120a4:	mov	r0, r8
   120a8:	b	11fe0 <__assert_fail@plt+0xaf8>
   120ac:	ldr	r5, [r7, #4]
   120b0:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   120b4:	cmp	r0, #1
   120b8:	bls	121d4 <__assert_fail@plt+0xcec>
   120bc:	mov	r9, fp
   120c0:	strb	fp, [sp, #16]
   120c4:	str	r5, [sp, #32]
   120c8:	mov	r5, #0
   120cc:	mov	r6, r5
   120d0:	str	r5, [sp, #20]
   120d4:	str	r5, [sp, #24]
   120d8:	strb	fp, [sp, #28]
   120dc:	add	r0, sp, #16
   120e0:	bl	12ee4 <__assert_fail@plt+0x19fc>
   120e4:	ldrb	r3, [sp, #40]	; 0x28
   120e8:	cmp	r3, #0
   120ec:	beq	120fc <__assert_fail@plt+0xc14>
   120f0:	ldr	sl, [sp, #44]	; 0x2c
   120f4:	cmp	sl, #0
   120f8:	beq	12090 <__assert_fail@plt+0xba8>
   120fc:	ldr	r3, [sp, #36]	; 0x24
   12100:	add	sl, fp, #1
   12104:	cmp	r3, #1
   12108:	bne	1213c <__assert_fail@plt+0xc54>
   1210c:	ldr	r3, [sp, #32]
   12110:	mov	r0, r4
   12114:	ldrb	r1, [r3]
   12118:	bl	12da8 <__assert_fail@plt+0x18c0>
   1211c:	cmp	r0, #0
   12120:	bne	12090 <__assert_fail@plt+0xba8>
   12124:	ldrd	r2, [sp, #32]
   12128:	mov	fp, sl
   1212c:	strb	r9, [sp, #28]
   12130:	add	r3, r3, r2
   12134:	str	r3, [sp, #32]
   12138:	b	120dc <__assert_fail@plt+0xbf4>
   1213c:	strb	r9, [sp, #72]	; 0x48
   12140:	str	r5, [sp, #76]	; 0x4c
   12144:	str	r6, [sp, #80]	; 0x50
   12148:	strb	r9, [sp, #84]	; 0x54
   1214c:	str	r4, [sp, #88]	; 0x58
   12150:	add	r0, sp, #72	; 0x48
   12154:	bl	12ee4 <__assert_fail@plt+0x19fc>
   12158:	ldrb	r3, [sp, #96]	; 0x60
   1215c:	cmp	r3, #0
   12160:	beq	121a8 <__assert_fail@plt+0xcc0>
   12164:	ldr	r3, [sp, #100]	; 0x64
   12168:	cmp	r3, #0
   1216c:	beq	12124 <__assert_fail@plt+0xc3c>
   12170:	ldrb	r2, [sp, #40]	; 0x28
   12174:	cmp	r2, #0
   12178:	beq	121a8 <__assert_fail@plt+0xcc0>
   1217c:	ldr	r0, [sp, #44]	; 0x2c
   12180:	sub	r0, r0, r3
   12184:	clz	r0, r0
   12188:	lsr	r0, r0, #5
   1218c:	cmp	r0, #0
   12190:	bne	12090 <__assert_fail@plt+0xba8>
   12194:	ldrd	r2, [sp, #88]	; 0x58
   12198:	strb	r0, [sp, #84]	; 0x54
   1219c:	add	r3, r3, r2
   121a0:	str	r3, [sp, #88]	; 0x58
   121a4:	b	12150 <__assert_fail@plt+0xc68>
   121a8:	ldr	r3, [sp, #36]	; 0x24
   121ac:	ldr	r2, [sp, #92]	; 0x5c
   121b0:	cmp	r2, r3
   121b4:	movne	r0, #0
   121b8:	bne	1218c <__assert_fail@plt+0xca4>
   121bc:	ldr	r1, [sp, #32]
   121c0:	ldr	r0, [sp, #88]	; 0x58
   121c4:	bl	11260 <memcmp@plt>
   121c8:	clz	r0, r0
   121cc:	lsr	r0, r0, #5
   121d0:	b	1218c <__assert_fail@plt+0xca4>
   121d4:	mov	r1, r4
   121d8:	mov	r0, r5
   121dc:	bl	111b8 <strcspn@plt>
   121e0:	ldrb	r3, [r5, r0]
   121e4:	cmp	r3, #0
   121e8:	beq	1208c <__assert_fail@plt+0xba4>
   121ec:	add	sl, r0, #1
   121f0:	b	12090 <__assert_fail@plt+0xba8>
   121f4:	ldr	r0, [pc, #828]	; 12538 <__assert_fail@plt+0x1050>
   121f8:	bl	11804 <__assert_fail@plt+0x31c>
   121fc:	cmp	r0, #0
   12200:	beq	12450 <__assert_fail@plt+0xf68>
   12204:	mov	r0, r5
   12208:	bl	11f6c <__assert_fail@plt+0xa84>
   1220c:	mov	fp, r0
   12210:	mov	r0, r5
   12214:	bl	11f6c <__assert_fail@plt+0xa84>
   12218:	mov	r8, r0
   1221c:	mov	r0, r5
   12220:	bl	11f6c <__assert_fail@plt+0xa84>
   12224:	mov	r7, r0
   12228:	mov	r0, fp
   1222c:	bl	119bc <__assert_fail@plt+0x4d4>
   12230:	mov	r0, r8
   12234:	bl	1193c <__assert_fail@plt+0x454>
   12238:	cmp	r0, #0
   1223c:	bne	12264 <__assert_fail@plt+0xd7c>
   12240:	ldr	r0, [pc, #756]	; 1253c <__assert_fail@plt+0x1054>
   12244:	bl	1183c <__assert_fail@plt+0x354>
   12248:	mov	r4, r0
   1224c:	mov	r0, fp
   12250:	bl	1186c <__assert_fail@plt+0x384>
   12254:	mov	r0, r8
   12258:	bl	1186c <__assert_fail@plt+0x384>
   1225c:	mov	r0, r7
   12260:	b	11fe0 <__assert_fail@plt+0xaf8>
   12264:	mov	r0, r7
   12268:	bl	1193c <__assert_fail@plt+0x454>
   1226c:	cmp	r0, #0
   12270:	beq	12240 <__assert_fail@plt+0xd58>
   12274:	ldr	r3, [r8, #8]
   12278:	cmp	r3, #0
   1227c:	mvnlt	r4, #0
   12280:	blt	122ac <__assert_fail@plt+0xdc4>
   12284:	cmp	r3, #1
   12288:	mvngt	r4, #1
   1228c:	bgt	122ac <__assert_fail@plt+0xdc4>
   12290:	ldr	r2, [r8, #12]
   12294:	cmp	r3, #0
   12298:	ldr	r4, [r2]
   1229c:	moveq	r4, #0
   122a0:	beq	122ac <__assert_fail@plt+0xdc4>
   122a4:	cmn	r4, #1
   122a8:	mvneq	r4, #1
   122ac:	ldr	r3, [r7, #8]
   122b0:	cmp	r3, #0
   122b4:	mvnlt	r6, #0
   122b8:	blt	122e4 <__assert_fail@plt+0xdfc>
   122bc:	cmp	r3, #1
   122c0:	mvngt	r6, #1
   122c4:	bgt	122e4 <__assert_fail@plt+0xdfc>
   122c8:	ldr	r2, [r7, #12]
   122cc:	cmp	r3, #0
   122d0:	ldr	r6, [r2]
   122d4:	moveq	r6, r3
   122d8:	beq	122e4 <__assert_fail@plt+0xdfc>
   122dc:	cmn	r6, #1
   122e0:	mvneq	r6, #1
   122e4:	ldr	r9, [fp, #4]
   122e8:	mov	r0, r9
   122ec:	bl	11398 <strlen@plt>
   122f0:	str	r0, [sp, #4]
   122f4:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   122f8:	cmp	r0, #1
   122fc:	ldrls	r0, [sp, #4]
   12300:	bls	1230c <__assert_fail@plt+0xe24>
   12304:	mov	r0, r9
   12308:	bl	12e58 <__assert_fail@plt+0x1970>
   1230c:	clz	r3, r4
   12310:	lsr	r3, r3, #5
   12314:	cmp	r0, r4
   12318:	movcs	sl, r3
   1231c:	orrcc	sl, r3, #1
   12320:	cmp	sl, #0
   12324:	bne	12334 <__assert_fail@plt+0xe4c>
   12328:	sub	r2, r6, #1
   1232c:	cmn	r2, #3
   12330:	bls	12358 <__assert_fail@plt+0xe70>
   12334:	ldr	r0, [pc, #512]	; 1253c <__assert_fail@plt+0x1054>
   12338:	bl	1ff14 <__assert_fail@plt+0xea2c>
   1233c:	mov	r6, r0
   12340:	mov	r0, r6
   12344:	bl	1183c <__assert_fail@plt+0x354>
   12348:	mov	r4, r0
   1234c:	mov	r0, r6
   12350:	bl	12bd8 <__assert_fail@plt+0x16f0>
   12354:	b	1224c <__assert_fail@plt+0xd64>
   12358:	rsb	r5, r4, #1
   1235c:	add	r5, r5, r0
   12360:	cmp	r5, r6
   12364:	movcs	r5, r6
   12368:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   1236c:	cmp	r0, #1
   12370:	bne	123a0 <__assert_fail@plt+0xeb8>
   12374:	add	r0, r5, #1
   12378:	bl	1fc78 <__assert_fail@plt+0xe790>
   1237c:	sub	r1, r4, #1
   12380:	mov	r2, r5
   12384:	add	r1, r9, r1
   12388:	mov	r6, r0
   1238c:	bl	11368 <mempcpy@plt>
   12390:	mov	r9, r0
   12394:	mov	r3, #0
   12398:	strb	r3, [r9]
   1239c:	b	12340 <__assert_fail@plt+0xe58>
   123a0:	ldr	r3, [sp, #4]
   123a4:	add	r0, r3, #1
   123a8:	bl	1fc78 <__assert_fail@plt+0xe790>
   123ac:	mov	r6, r0
   123b0:	mov	r1, #0
   123b4:	strb	sl, [sp, #72]	; 0x48
   123b8:	mov	r0, #0
   123bc:	mov	r3, #1
   123c0:	str	r9, [sp, #88]	; 0x58
   123c4:	mov	r9, r6
   123c8:	stmib	sp, {r3, sl}
   123cc:	strd	r0, [sp, #76]	; 0x4c
   123d0:	strb	sl, [sp, #84]	; 0x54
   123d4:	add	r0, sp, #72	; 0x48
   123d8:	bl	12ee4 <__assert_fail@plt+0x19fc>
   123dc:	ldrb	r3, [sp, #96]	; 0x60
   123e0:	cmp	r3, #0
   123e4:	beq	123f4 <__assert_fail@plt+0xf0c>
   123e8:	ldr	r3, [sp, #100]	; 0x64
   123ec:	cmp	r3, #0
   123f0:	beq	12394 <__assert_fail@plt+0xeac>
   123f4:	cmp	r5, #0
   123f8:	beq	12394 <__assert_fail@plt+0xeac>
   123fc:	ldr	r2, [sp, #4]
   12400:	ldr	sl, [sp, #88]	; 0x58
   12404:	ldr	r3, [sp, #92]	; 0x5c
   12408:	cmp	r2, r4
   1240c:	bcc	12430 <__assert_fail@plt+0xf48>
   12410:	mov	r2, r3
   12414:	mov	r0, r9
   12418:	str	r3, [sp, #12]
   1241c:	mov	r1, sl
   12420:	sub	r5, r5, #1
   12424:	bl	11368 <mempcpy@plt>
   12428:	ldr	r3, [sp, #12]
   1242c:	mov	r9, r0
   12430:	add	sl, sl, r3
   12434:	ldr	r3, [sp, #8]
   12438:	strb	r3, [sp, #84]	; 0x54
   1243c:	ldr	r3, [sp, #4]
   12440:	str	sl, [sp, #88]	; 0x58
   12444:	add	r3, r3, #1
   12448:	str	r3, [sp, #4]
   1244c:	b	123d4 <__assert_fail@plt+0xeec>
   12450:	bl	11f14 <__assert_fail@plt+0xa2c>
   12454:	ldr	r0, [pc, #228]	; 12540 <__assert_fail@plt+0x1058>
   12458:	bl	11804 <__assert_fail@plt+0x31c>
   1245c:	subs	r4, r0, #0
   12460:	ldr	r6, [pc, #192]	; 12528 <__assert_fail@plt+0x1040>
   12464:	beq	124e8 <__assert_fail@plt+0x1000>
   12468:	mov	r0, r5
   1246c:	bl	12a40 <__assert_fail@plt+0x1558>
   12470:	ldr	r7, [r6]
   12474:	mov	r4, r0
   12478:	ldr	r5, [r7]
   1247c:	cmp	r5, #0
   12480:	bne	124bc <__assert_fail@plt+0xfd4>
   12484:	mov	r2, #5
   12488:	ldr	r1, [pc, #180]	; 12544 <__assert_fail@plt+0x105c>
   1248c:	mov	r0, r5
   12490:	bl	11278 <dcgettext@plt>
   12494:	ldr	r2, [r7, #-4]
   12498:	mov	r4, r0
   1249c:	mov	r1, #8
   124a0:	mov	r0, r5
   124a4:	bl	14444 <__assert_fail@plt+0x2f5c>
   124a8:	mov	r3, r0
   124ac:	mov	r2, r4
   124b0:	mov	r1, r5
   124b4:	mov	r0, #2
   124b8:	bl	11314 <error@plt>
   124bc:	ldr	r0, [pc, #132]	; 12548 <__assert_fail@plt+0x1060>
   124c0:	bl	11804 <__assert_fail@plt+0x31c>
   124c4:	subs	r5, r0, #0
   124c8:	bne	11fe4 <__assert_fail@plt+0xafc>
   124cc:	mov	r2, #5
   124d0:	ldr	r1, [pc, #116]	; 1254c <__assert_fail@plt+0x1064>
   124d4:	bl	11278 <dcgettext@plt>
   124d8:	ldr	r3, [r6]
   124dc:	mov	r4, r0
   124e0:	ldr	r2, [r3]
   124e4:	b	1249c <__assert_fail@plt+0xfb4>
   124e8:	ldr	r0, [pc, #88]	; 12548 <__assert_fail@plt+0x1060>
   124ec:	bl	11804 <__assert_fail@plt+0x31c>
   124f0:	cmp	r0, #0
   124f4:	ldreq	r3, [r6]
   124f8:	addeq	r2, r3, #4
   124fc:	streq	r2, [r6]
   12500:	beq	11f9c <__assert_fail@plt+0xab4>
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #64]	; 12550 <__assert_fail@plt+0x1068>
   1250c:	mov	r0, r4
   12510:	bl	11278 <dcgettext@plt>
   12514:	mov	r2, r0
   12518:	mov	r1, r4
   1251c:	mov	r0, #2
   12520:	bl	11314 <error@plt>
   12524:	andeq	r0, r2, pc, ror #29
   12528:			; <UNDEFINED> instruction: 0x000321b0
   1252c:	strdeq	r0, [r2], -r1
   12530:	strdeq	r0, [r2], -r8
   12534:	strdeq	r0, [r2], -lr
   12538:	andeq	r0, r2, r4, lsl #30
   1253c:	andeq	r0, r2, r6, asr #29
   12540:	andeq	r0, r2, fp, lsl #30
   12544:	andeq	r0, r2, sp, lsl #30
   12548:	andeq	r1, r2, lr, lsl #9
   1254c:	andeq	r0, r2, r2, lsr pc
   12550:	andeq	r0, r2, ip, asr pc
   12554:	push	{r4, r5, r6, r7, r8, lr}
   12558:	mov	r6, r0
   1255c:	ldr	r7, [pc, #88]	; 125bc <__assert_fail@plt+0x10d4>
   12560:	bl	11f6c <__assert_fail@plt+0xa84>
   12564:	mov	r4, r0
   12568:	mov	r0, r7
   1256c:	bl	11804 <__assert_fail@plt+0x31c>
   12570:	cmp	r0, #0
   12574:	beq	125b4 <__assert_fail@plt+0x10cc>
   12578:	mov	r0, r6
   1257c:	bl	11f6c <__assert_fail@plt+0xa84>
   12580:	cmp	r6, #0
   12584:	mov	r5, r0
   12588:	beq	125a8 <__assert_fail@plt+0x10c0>
   1258c:	mov	r1, r0
   12590:	mov	r0, r4
   12594:	bl	11a04 <__assert_fail@plt+0x51c>
   12598:	mov	r8, r0
   1259c:	mov	r0, r4
   125a0:	mov	r4, r8
   125a4:	bl	1186c <__assert_fail@plt+0x384>
   125a8:	mov	r0, r5
   125ac:	bl	1186c <__assert_fail@plt+0x384>
   125b0:	b	12568 <__assert_fail@plt+0x1080>
   125b4:	mov	r0, r4
   125b8:	pop	{r4, r5, r6, r7, r8, pc}
   125bc:	andeq	r0, r2, r9, ror pc
   125c0:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c4:	mov	r6, r0
   125c8:	ldr	r7, [pc, #252]	; 126cc <__assert_fail@plt+0x11e4>
   125cc:	bl	12554 <__assert_fail@plt+0x106c>
   125d0:	ldr	r8, [pc, #248]	; 126d0 <__assert_fail@plt+0x11e8>
   125d4:	mov	r5, r0
   125d8:	ldr	r9, [pc, #244]	; 126d4 <__assert_fail@plt+0x11ec>
   125dc:	mov	r0, r7
   125e0:	bl	11804 <__assert_fail@plt+0x31c>
   125e4:	cmp	r0, #0
   125e8:	bne	1261c <__assert_fail@plt+0x1134>
   125ec:	mov	r0, r8
   125f0:	bl	11804 <__assert_fail@plt+0x31c>
   125f4:	cmp	r0, #0
   125f8:	movne	sl, #1
   125fc:	bne	12620 <__assert_fail@plt+0x1138>
   12600:	mov	r0, r9
   12604:	bl	11804 <__assert_fail@plt+0x31c>
   12608:	cmp	r0, #0
   1260c:	bne	12664 <__assert_fail@plt+0x117c>
   12610:	mov	r0, r5
   12614:	add	sp, sp, #4
   12618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1261c:	mov	sl, #0
   12620:	mov	r0, r6
   12624:	bl	12554 <__assert_fail@plt+0x106c>
   12628:	cmp	r6, #0
   1262c:	mov	r4, r0
   12630:	beq	126b8 <__assert_fail@plt+0x11d0>
   12634:	mov	r0, r5
   12638:	bl	1193c <__assert_fail@plt+0x454>
   1263c:	cmp	r0, #0
   12640:	bne	1266c <__assert_fail@plt+0x1184>
   12644:	ldr	r1, [pc, #140]	; 126d8 <__assert_fail@plt+0x11f0>
   12648:	mov	r2, #5
   1264c:	mov	r0, #0
   12650:	bl	11278 <dcgettext@plt>
   12654:	mov	r2, r0
   12658:	mov	r1, #0
   1265c:	mov	r0, #2
   12660:	bl	11314 <error@plt>
   12664:	mov	sl, #2
   12668:	b	12620 <__assert_fail@plt+0x1138>
   1266c:	mov	r0, r4
   12670:	bl	1193c <__assert_fail@plt+0x454>
   12674:	cmp	r0, #0
   12678:	beq	12644 <__assert_fail@plt+0x115c>
   1267c:	cmp	sl, #0
   12680:	beq	126c4 <__assert_fail@plt+0x11dc>
   12684:	ldr	fp, [r4, #8]
   12688:	cmp	fp, #0
   1268c:	moveq	r2, #5
   12690:	ldreq	r1, [pc, #68]	; 126dc <__assert_fail@plt+0x11f4>
   12694:	beq	1264c <__assert_fail@plt+0x1164>
   12698:	ldr	r2, [pc, #64]	; 126e0 <__assert_fail@plt+0x11f8>
   1269c:	cmp	sl, #1
   126a0:	ldr	r3, [pc, #60]	; 126e4 <__assert_fail@plt+0x11fc>
   126a4:	movne	r3, r2
   126a8:	add	r1, r5, #4
   126ac:	add	r2, r4, #4
   126b0:	mov	r0, r1
   126b4:	blx	r3
   126b8:	mov	r0, r4
   126bc:	bl	1186c <__assert_fail@plt+0x384>
   126c0:	b	125dc <__assert_fail@plt+0x10f4>
   126c4:	ldr	r3, [pc, #28]	; 126e8 <__assert_fail@plt+0x1200>
   126c8:	b	126a8 <__assert_fail@plt+0x11c0>
   126cc:	andeq	r0, r2, fp, ror pc
   126d0:	andeq	r1, r2, r8, asr r7
   126d4:	andeq	r0, r2, sp, ror pc
   126d8:	andeq	r0, r2, pc, ror pc
   126dc:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   126e0:			; <UNDEFINED> instruction: 0x000113b0
   126e4:	andeq	r1, r1, ip, lsr #3
   126e8:	muleq	r1, ip, r2
   126ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126f0:	mov	r6, r0
   126f4:	ldr	r7, [pc, #188]	; 127b8 <__assert_fail@plt+0x12d0>
   126f8:	bl	125c0 <__assert_fail@plt+0x10d8>
   126fc:	ldr	r8, [pc, #184]	; 127bc <__assert_fail@plt+0x12d4>
   12700:	mov	r4, r0
   12704:	ldr	r9, [pc, #180]	; 127c0 <__assert_fail@plt+0x12d8>
   12708:	mov	r0, r7
   1270c:	bl	11804 <__assert_fail@plt+0x31c>
   12710:	cmp	r0, #0
   12714:	bne	12730 <__assert_fail@plt+0x1248>
   12718:	mov	r0, r8
   1271c:	bl	11804 <__assert_fail@plt+0x31c>
   12720:	cmp	r0, #0
   12724:	bne	12778 <__assert_fail@plt+0x1290>
   12728:	mov	r0, r4
   1272c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12730:	mov	sl, #0
   12734:	mov	r0, r6
   12738:	bl	125c0 <__assert_fail@plt+0x10d8>
   1273c:	cmp	r6, #0
   12740:	mov	r5, r0
   12744:	beq	127ac <__assert_fail@plt+0x12c4>
   12748:	mov	r0, r4
   1274c:	bl	1193c <__assert_fail@plt+0x454>
   12750:	cmp	r0, #0
   12754:	bne	12780 <__assert_fail@plt+0x1298>
   12758:	mov	r2, #5
   1275c:	ldr	r1, [pc, #96]	; 127c4 <__assert_fail@plt+0x12dc>
   12760:	mov	r0, #0
   12764:	bl	11278 <dcgettext@plt>
   12768:	mov	r2, r0
   1276c:	mov	r1, #0
   12770:	mov	r0, #2
   12774:	bl	11314 <error@plt>
   12778:	mov	sl, #1
   1277c:	b	12734 <__assert_fail@plt+0x124c>
   12780:	mov	r0, r5
   12784:	bl	1193c <__assert_fail@plt+0x454>
   12788:	cmp	r0, #0
   1278c:	beq	12758 <__assert_fail@plt+0x1270>
   12790:	cmp	sl, #0
   12794:	add	r1, r4, #4
   12798:	ldr	r3, [pc, #40]	; 127c8 <__assert_fail@plt+0x12e0>
   1279c:	add	r2, r5, #4
   127a0:	moveq	r3, r9
   127a4:	mov	r0, r1
   127a8:	blx	r3
   127ac:	mov	r0, r5
   127b0:	bl	1186c <__assert_fail@plt+0x384>
   127b4:	b	12708 <__assert_fail@plt+0x1220>
   127b8:	andeq	r0, r2, pc, ror #29
   127bc:	andeq	r1, r2, r8
   127c0:	andeq	r1, r1, r8, lsl #9
   127c4:	andeq	r0, r2, pc, ror pc
   127c8:	andeq	r1, r1, r4, lsr #4
   127cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127d0:	mov	r7, r0
   127d4:	ldr	r8, [pc, #420]	; 12980 <__assert_fail@plt+0x1498>
   127d8:	bl	126ec <__assert_fail@plt+0x1204>
   127dc:	ldr	r9, [pc, #416]	; 12984 <__assert_fail@plt+0x149c>
   127e0:	mov	r5, r0
   127e4:	ldr	sl, [pc, #412]	; 12988 <__assert_fail@plt+0x14a0>
   127e8:	mov	r0, r8
   127ec:	bl	11804 <__assert_fail@plt+0x31c>
   127f0:	cmp	r0, #0
   127f4:	bne	128ec <__assert_fail@plt+0x1404>
   127f8:	mov	r0, r9
   127fc:	bl	11804 <__assert_fail@plt+0x31c>
   12800:	cmp	r0, #0
   12804:	movne	r4, #1
   12808:	bne	12820 <__assert_fail@plt+0x1338>
   1280c:	mov	r0, sl
   12810:	bl	11804 <__assert_fail@plt+0x31c>
   12814:	cmp	r0, #0
   12818:	beq	1289c <__assert_fail@plt+0x13b4>
   1281c:	mov	r4, #2
   12820:	mov	r0, r7
   12824:	bl	126ec <__assert_fail@plt+0x1204>
   12828:	cmp	r7, #0
   1282c:	mov	r6, r0
   12830:	moveq	r4, r7
   12834:	beq	1291c <__assert_fail@plt+0x1434>
   12838:	mov	r0, r5
   1283c:	bl	119bc <__assert_fail@plt+0x4d4>
   12840:	mov	r0, r6
   12844:	bl	119bc <__assert_fail@plt+0x4d4>
   12848:	ldr	r2, [r5, #4]
   1284c:	mov	r0, r2
   12850:	bl	117cc <__assert_fail@plt+0x2e4>
   12854:	cmp	r0, #0
   12858:	beq	128fc <__assert_fail@plt+0x1414>
   1285c:	ldr	r1, [r6, #4]
   12860:	mov	r0, r1
   12864:	bl	117cc <__assert_fail@plt+0x2e4>
   12868:	cmp	r0, #0
   1286c:	beq	128fc <__assert_fail@plt+0x1414>
   12870:	mov	r0, r2
   12874:	bl	1f5a0 <__assert_fail@plt+0xe0b8>
   12878:	sub	r4, r4, #1
   1287c:	cmp	r4, #4
   12880:	ldrls	pc, [pc, r4, lsl #2]
   12884:	b	12918 <__assert_fail@plt+0x1430>
   12888:	andeq	r2, r1, ip, lsr r9
   1288c:	andeq	r2, r1, ip, asr #18
   12890:	andeq	r2, r1, r8, asr r9
   12894:	andeq	r2, r1, r4, ror #18
   12898:	andeq	r2, r1, r0, ror r9
   1289c:	ldr	r0, [pc, #232]	; 1298c <__assert_fail@plt+0x14a4>
   128a0:	bl	11804 <__assert_fail@plt+0x31c>
   128a4:	cmp	r0, #0
   128a8:	bne	1281c <__assert_fail@plt+0x1334>
   128ac:	ldr	r0, [pc, #220]	; 12990 <__assert_fail@plt+0x14a8>
   128b0:	bl	11804 <__assert_fail@plt+0x31c>
   128b4:	cmp	r0, #0
   128b8:	movne	r4, #3
   128bc:	bne	12820 <__assert_fail@plt+0x1338>
   128c0:	ldr	r0, [pc, #204]	; 12994 <__assert_fail@plt+0x14ac>
   128c4:	bl	11804 <__assert_fail@plt+0x31c>
   128c8:	cmp	r0, #0
   128cc:	movne	r4, #4
   128d0:	bne	12820 <__assert_fail@plt+0x1338>
   128d4:	ldr	r0, [pc, #188]	; 12998 <__assert_fail@plt+0x14b0>
   128d8:	bl	11804 <__assert_fail@plt+0x31c>
   128dc:	cmp	r0, #0
   128e0:	bne	128f4 <__assert_fail@plt+0x140c>
   128e4:	mov	r0, r5
   128e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128ec:	mov	r4, #0
   128f0:	b	12820 <__assert_fail@plt+0x1338>
   128f4:	mov	r4, #5
   128f8:	b	12820 <__assert_fail@plt+0x1338>
   128fc:	bl	113c8 <__errno_location@plt>
   12900:	mov	r3, #0
   12904:	str	r3, [r0]
   12908:	ldr	r0, [r5, #4]
   1290c:	ldr	r1, [r6, #4]
   12910:	bl	11320 <strcoll@plt>
   12914:	b	12878 <__assert_fail@plt+0x1390>
   12918:	lsr	r4, r0, #31
   1291c:	mov	r0, r5
   12920:	bl	1186c <__assert_fail@plt+0x384>
   12924:	mov	r0, r6
   12928:	bl	1186c <__assert_fail@plt+0x384>
   1292c:	mov	r0, r4
   12930:	bl	118a0 <__assert_fail@plt+0x3b8>
   12934:	mov	r5, r0
   12938:	b	127e8 <__assert_fail@plt+0x1300>
   1293c:	cmp	r0, #0
   12940:	movgt	r4, #0
   12944:	movle	r4, #1
   12948:	b	1291c <__assert_fail@plt+0x1434>
   1294c:	clz	r4, r0
   12950:	lsr	r4, r4, #5
   12954:	b	1291c <__assert_fail@plt+0x1434>
   12958:	adds	r4, r0, #0
   1295c:	movne	r4, #1
   12960:	b	1291c <__assert_fail@plt+0x1434>
   12964:	mvn	r4, r0
   12968:	lsr	r4, r4, #31
   1296c:	b	1291c <__assert_fail@plt+0x1434>
   12970:	cmp	r0, #0
   12974:	movle	r4, #0
   12978:	movgt	r4, #1
   1297c:	b	1291c <__assert_fail@plt+0x1434>
   12980:	andeq	r0, r2, r5, lsr #31
   12984:	andeq	r0, r2, r7, lsr #31
   12988:	andeq	r0, r2, lr, lsr #31
   1298c:	andeq	r0, r2, sl, lsr #31
   12990:	andeq	r0, r2, sp, lsr #31
   12994:			; <UNDEFINED> instruction: 0x00020fb0
   12998:			; <UNDEFINED> instruction: 0x00020fb3
   1299c:	push	{r4, r5, r6, r7, r8, lr}
   129a0:	mov	r6, r0
   129a4:	ldr	r7, [pc, #144]	; 12a3c <__assert_fail@plt+0x1554>
   129a8:	bl	127cc <__assert_fail@plt+0x12e4>
   129ac:	mov	r4, r0
   129b0:	mov	r0, r7
   129b4:	bl	11804 <__assert_fail@plt+0x31c>
   129b8:	cmp	r0, #0
   129bc:	beq	12a34 <__assert_fail@plt+0x154c>
   129c0:	cmp	r6, #0
   129c4:	moveq	r0, r6
   129c8:	beq	129dc <__assert_fail@plt+0x14f4>
   129cc:	mov	r0, r4
   129d0:	bl	118cc <__assert_fail@plt+0x3e4>
   129d4:	eor	r0, r0, #1
   129d8:	uxtb	r0, r0
   129dc:	and	r0, r0, #1
   129e0:	bl	127cc <__assert_fail@plt+0x12e4>
   129e4:	mov	r5, r0
   129e8:	mov	r0, r4
   129ec:	bl	118cc <__assert_fail@plt+0x3e4>
   129f0:	cmp	r0, #0
   129f4:	bne	12a08 <__assert_fail@plt+0x1520>
   129f8:	mov	r0, r5
   129fc:	bl	118cc <__assert_fail@plt+0x3e4>
   12a00:	cmp	r0, #0
   12a04:	beq	12a28 <__assert_fail@plt+0x1540>
   12a08:	mov	r0, r4
   12a0c:	bl	1186c <__assert_fail@plt+0x384>
   12a10:	mov	r0, r5
   12a14:	bl	1186c <__assert_fail@plt+0x384>
   12a18:	mov	r0, #0
   12a1c:	bl	118a0 <__assert_fail@plt+0x3b8>
   12a20:	mov	r4, r0
   12a24:	b	129b0 <__assert_fail@plt+0x14c8>
   12a28:	mov	r0, r5
   12a2c:	bl	1186c <__assert_fail@plt+0x384>
   12a30:	b	129b0 <__assert_fail@plt+0x14c8>
   12a34:	mov	r0, r4
   12a38:	pop	{r4, r5, r6, r7, r8, pc}
   12a3c:			; <UNDEFINED> instruction: 0x00020fb5
   12a40:	push	{r4, r5, r6, r7, r8, lr}
   12a44:	mov	r6, r0
   12a48:	ldr	r7, [pc, #144]	; 12ae0 <__assert_fail@plt+0x15f8>
   12a4c:	bl	1299c <__assert_fail@plt+0x14b4>
   12a50:	mov	r4, r0
   12a54:	mov	r0, r7
   12a58:	bl	11804 <__assert_fail@plt+0x31c>
   12a5c:	cmp	r0, #0
   12a60:	beq	12ad8 <__assert_fail@plt+0x15f0>
   12a64:	cmp	r6, #0
   12a68:	moveq	r0, r6
   12a6c:	beq	12a78 <__assert_fail@plt+0x1590>
   12a70:	mov	r0, r4
   12a74:	bl	118cc <__assert_fail@plt+0x3e4>
   12a78:	and	r0, r0, #1
   12a7c:	bl	1299c <__assert_fail@plt+0x14b4>
   12a80:	mov	r5, r0
   12a84:	mov	r0, r4
   12a88:	bl	118cc <__assert_fail@plt+0x3e4>
   12a8c:	cmp	r0, #0
   12a90:	beq	12ac8 <__assert_fail@plt+0x15e0>
   12a94:	mov	r0, r4
   12a98:	bl	1186c <__assert_fail@plt+0x384>
   12a9c:	mov	r0, r5
   12aa0:	bl	118cc <__assert_fail@plt+0x3e4>
   12aa4:	cmp	r0, #0
   12aa8:	beq	12ac0 <__assert_fail@plt+0x15d8>
   12aac:	mov	r0, r5
   12ab0:	bl	1186c <__assert_fail@plt+0x384>
   12ab4:	mov	r0, #0
   12ab8:	bl	118a0 <__assert_fail@plt+0x3b8>
   12abc:	mov	r5, r0
   12ac0:	mov	r4, r5
   12ac4:	b	12a54 <__assert_fail@plt+0x156c>
   12ac8:	mov	r0, r5
   12acc:	mov	r5, r4
   12ad0:	bl	1186c <__assert_fail@plt+0x384>
   12ad4:	b	12ac0 <__assert_fail@plt+0x15d8>
   12ad8:	mov	r0, r4
   12adc:	pop	{r4, r5, r6, r7, r8, pc}
   12ae0:			; <UNDEFINED> instruction: 0x00020fb7
   12ae4:	ldr	r3, [pc, #4]	; 12af0 <__assert_fail@plt+0x1608>
   12ae8:	str	r0, [r3]
   12aec:	bx	lr
   12af0:			; <UNDEFINED> instruction: 0x000321b4
   12af4:	ldr	r3, [pc, #4]	; 12b00 <__assert_fail@plt+0x1618>
   12af8:	strb	r0, [r3, #4]
   12afc:	bx	lr
   12b00:			; <UNDEFINED> instruction: 0x000321b4
   12b04:	ldr	r3, [pc, #176]	; 12bbc <__assert_fail@plt+0x16d4>
   12b08:	push	{r0, r1, r4, r5, r6, lr}
   12b0c:	ldr	r0, [r3]
   12b10:	bl	20034 <__assert_fail@plt+0xeb4c>
   12b14:	cmp	r0, #0
   12b18:	beq	12ba0 <__assert_fail@plt+0x16b8>
   12b1c:	ldr	r4, [pc, #156]	; 12bc0 <__assert_fail@plt+0x16d8>
   12b20:	bl	113c8 <__errno_location@plt>
   12b24:	mov	r5, r0
   12b28:	ldrb	r6, [r4, #4]
   12b2c:	cmp	r6, #0
   12b30:	beq	12b40 <__assert_fail@plt+0x1658>
   12b34:	ldr	r3, [r0]
   12b38:	cmp	r3, #32
   12b3c:	beq	12ba0 <__assert_fail@plt+0x16b8>
   12b40:	mov	r2, #5
   12b44:	ldr	r1, [pc, #120]	; 12bc4 <__assert_fail@plt+0x16dc>
   12b48:	mov	r0, #0
   12b4c:	bl	11278 <dcgettext@plt>
   12b50:	mov	r6, r0
   12b54:	ldr	r0, [r4]
   12b58:	cmp	r0, #0
   12b5c:	beq	12b8c <__assert_fail@plt+0x16a4>
   12b60:	ldr	r4, [r5]
   12b64:	bl	14544 <__assert_fail@plt+0x305c>
   12b68:	mov	r3, r0
   12b6c:	ldr	r2, [pc, #84]	; 12bc8 <__assert_fail@plt+0x16e0>
   12b70:	mov	r0, #0
   12b74:	str	r6, [sp]
   12b78:	mov	r1, r4
   12b7c:	bl	11314 <error@plt>
   12b80:	ldr	r3, [pc, #68]	; 12bcc <__assert_fail@plt+0x16e4>
   12b84:	ldr	r0, [r3]
   12b88:	bl	1120c <_exit@plt>
   12b8c:	mov	r3, r6
   12b90:	ldr	r2, [pc, #56]	; 12bd0 <__assert_fail@plt+0x16e8>
   12b94:	ldr	r1, [r5]
   12b98:	bl	11314 <error@plt>
   12b9c:	b	12b80 <__assert_fail@plt+0x1698>
   12ba0:	ldr	r3, [pc, #44]	; 12bd4 <__assert_fail@plt+0x16ec>
   12ba4:	ldr	r0, [r3]
   12ba8:	bl	20034 <__assert_fail@plt+0xeb4c>
   12bac:	cmp	r0, #0
   12bb0:	bne	12b80 <__assert_fail@plt+0x1698>
   12bb4:	add	sp, sp, #8
   12bb8:	pop	{r4, r5, r6, pc}
   12bbc:	andeq	r2, r3, r4, lsr #3
   12bc0:			; <UNDEFINED> instruction: 0x000321b4
   12bc4:	muleq	r2, lr, r0
   12bc8:	andeq	r1, r2, sl, lsr #1
   12bcc:	andeq	r2, r3, ip, asr #2
   12bd0:	andeq	r1, r2, lr, lsr #1
   12bd4:	andeq	r2, r3, r0, lsr #3
   12bd8:	push	{r0, r1, r2, r4, r5, lr}
   12bdc:	mov	r5, r0
   12be0:	bl	113c8 <__errno_location@plt>
   12be4:	mov	r4, r0
   12be8:	mov	r0, r5
   12bec:	ldr	r3, [r4]
   12bf0:	str	r3, [sp]
   12bf4:	str	r3, [sp, #4]
   12bf8:	mov	r3, #0
   12bfc:	str	r3, [r4]
   12c00:	bl	111f4 <free@plt>
   12c04:	ldr	r3, [r4]
   12c08:	add	r2, sp, #8
   12c0c:	clz	r3, r3
   12c10:	lsr	r3, r3, #5
   12c14:	add	r3, r2, r3, lsl #2
   12c18:	ldr	r3, [r3, #-8]
   12c1c:	str	r3, [r4]
   12c20:	add	sp, sp, #12
   12c24:	pop	{r4, r5, pc}
   12c28:	ldr	ip, [pc, #156]	; 12ccc <__assert_fail@plt+0x17e4>
   12c2c:	cmp	r0, #2
   12c30:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12c34:	mov	r6, #0
   12c38:	mov	r8, ip
   12c3c:	ldr	r7, [ip]
   12c40:	str	r6, [ip]
   12c44:	bne	12c78 <__assert_fail@plt+0x1790>
   12c48:	mov	r5, r3
   12c4c:	mov	r4, r2
   12c50:	ldr	r3, [pc, #120]	; 12cd0 <__assert_fail@plt+0x17e8>
   12c54:	str	r6, [sp]
   12c58:	ldr	r2, [pc, #116]	; 12cd4 <__assert_fail@plt+0x17ec>
   12c5c:	bl	11374 <getopt_long@plt>
   12c60:	cmn	r0, #1
   12c64:	beq	12c78 <__assert_fail@plt+0x1790>
   12c68:	cmp	r0, #104	; 0x68
   12c6c:	beq	12c90 <__assert_fail@plt+0x17a8>
   12c70:	cmp	r0, #118	; 0x76
   12c74:	beq	12ca0 <__assert_fail@plt+0x17b8>
   12c78:	ldr	r3, [pc, #88]	; 12cd8 <__assert_fail@plt+0x17f0>
   12c7c:	mov	r2, #0
   12c80:	str	r7, [r8]
   12c84:	str	r2, [r3]
   12c88:	add	sp, sp, #16
   12c8c:	pop	{r4, r5, r6, r7, r8, pc}
   12c90:	mov	r0, r6
   12c94:	ldr	r3, [sp, #44]	; 0x2c
   12c98:	blx	r3
   12c9c:	b	12c78 <__assert_fail@plt+0x1790>
   12ca0:	ldr	r0, [pc, #52]	; 12cdc <__assert_fail@plt+0x17f4>
   12ca4:	add	r3, sp, #48	; 0x30
   12ca8:	mov	r2, r5
   12cac:	mov	r1, r4
   12cb0:	str	r3, [sp]
   12cb4:	str	r3, [sp, #12]
   12cb8:	ldr	r3, [sp, #40]	; 0x28
   12cbc:	ldr	r0, [r0]
   12cc0:	bl	1fb6c <__assert_fail@plt+0xe684>
   12cc4:	mov	r0, r6
   12cc8:	bl	1138c <exit@plt>
   12ccc:	andeq	r2, r3, r8, lsr #3
   12cd0:	strheq	r1, [r2], -r4
   12cd4:	andeq	r0, r2, pc, ror #29
   12cd8:	muleq	r3, r8, r1
   12cdc:	andeq	r2, r3, r4, lsr #3
   12ce0:	push	{r4, r5, r6, r7, r8, r9, lr}
   12ce4:	sub	sp, sp, #20
   12ce8:	mov	r8, r3
   12cec:	mov	r4, #0
   12cf0:	mov	r7, r2
   12cf4:	mov	r2, #1
   12cf8:	ldrb	lr, [sp, #52]	; 0x34
   12cfc:	ldr	r3, [pc, #140]	; 12d90 <__assert_fail@plt+0x18a8>
   12d00:	ldr	ip, [pc, #140]	; 12d94 <__assert_fail@plt+0x18ac>
   12d04:	cmp	lr, r4
   12d08:	ldr	r6, [sp, #56]	; 0x38
   12d0c:	mov	r5, r3
   12d10:	ldr	r9, [r3]
   12d14:	str	r2, [r3]
   12d18:	ldr	r2, [pc, #120]	; 12d98 <__assert_fail@plt+0x18b0>
   12d1c:	moveq	r2, ip
   12d20:	str	r4, [sp]
   12d24:	ldr	r3, [pc, #112]	; 12d9c <__assert_fail@plt+0x18b4>
   12d28:	bl	11374 <getopt_long@plt>
   12d2c:	cmn	r0, #1
   12d30:	beq	12d58 <__assert_fail@plt+0x1870>
   12d34:	cmp	r0, #104	; 0x68
   12d38:	beq	12d50 <__assert_fail@plt+0x1868>
   12d3c:	cmp	r0, #118	; 0x76
   12d40:	beq	12d64 <__assert_fail@plt+0x187c>
   12d44:	ldr	r3, [pc, #84]	; 12da0 <__assert_fail@plt+0x18b8>
   12d48:	ldr	r0, [r3]
   12d4c:	b	12d54 <__assert_fail@plt+0x186c>
   12d50:	mov	r0, r4
   12d54:	blx	r6
   12d58:	str	r9, [r5]
   12d5c:	add	sp, sp, #20
   12d60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d64:	ldr	r0, [pc, #56]	; 12da4 <__assert_fail@plt+0x18bc>
   12d68:	add	r3, sp, #60	; 0x3c
   12d6c:	mov	r2, r8
   12d70:	mov	r1, r7
   12d74:	str	r3, [sp]
   12d78:	str	r3, [sp, #12]
   12d7c:	ldr	r3, [sp, #48]	; 0x30
   12d80:	ldr	r0, [r0]
   12d84:	bl	1fb6c <__assert_fail@plt+0xe684>
   12d88:	mov	r0, r4
   12d8c:	bl	1138c <exit@plt>
   12d90:	andeq	r2, r3, r8, lsr #3
   12d94:	andeq	r0, r2, pc, ror #29
   12d98:	andeq	r0, r2, r6, asr #29
   12d9c:	strheq	r1, [r2], -r4
   12da0:	andeq	r2, r3, ip, asr #2
   12da4:	andeq	r2, r3, r4, lsr #3
   12da8:	push	{r4, r5, r6, lr}
   12dac:	sub	sp, sp, #56	; 0x38
   12db0:	mov	r4, r0
   12db4:	mov	r5, r1
   12db8:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   12dbc:	cmp	r0, #1
   12dc0:	bls	12e3c <__assert_fail@plt+0x1954>
   12dc4:	uxtb	r6, r5
   12dc8:	cmp	r6, #47	; 0x2f
   12dcc:	bls	12e3c <__assert_fail@plt+0x1954>
   12dd0:	mov	r3, #0
   12dd4:	mov	r0, #0
   12dd8:	mov	r1, #0
   12ddc:	strb	r3, [sp]
   12de0:	str	r4, [sp, #16]
   12de4:	mov	r4, r3
   12de8:	strd	r0, [sp, #4]
   12dec:	strb	r3, [sp, #12]
   12df0:	mov	r0, sp
   12df4:	bl	12ee4 <__assert_fail@plt+0x19fc>
   12df8:	ldrb	r3, [sp, #24]
   12dfc:	cmp	r3, #0
   12e00:	beq	12e10 <__assert_fail@plt+0x1928>
   12e04:	ldr	r0, [sp, #28]
   12e08:	cmp	r0, #0
   12e0c:	beq	12e50 <__assert_fail@plt+0x1968>
   12e10:	ldr	r0, [sp, #16]
   12e14:	ldr	r3, [sp, #20]
   12e18:	cmp	r3, #1
   12e1c:	bne	12e2c <__assert_fail@plt+0x1944>
   12e20:	ldrb	r2, [r0]
   12e24:	cmp	r2, r6
   12e28:	beq	12e50 <__assert_fail@plt+0x1968>
   12e2c:	add	r0, r0, r3
   12e30:	strb	r4, [sp, #12]
   12e34:	str	r0, [sp, #16]
   12e38:	b	12df0 <__assert_fail@plt+0x1908>
   12e3c:	mov	r1, r5
   12e40:	mov	r0, r4
   12e44:	add	sp, sp, #56	; 0x38
   12e48:	pop	{r4, r5, r6, lr}
   12e4c:	b	113a4 <strchr@plt>
   12e50:	add	sp, sp, #56	; 0x38
   12e54:	pop	{r4, r5, r6, pc}
   12e58:	push	{r4, r5, lr}
   12e5c:	sub	sp, sp, #60	; 0x3c
   12e60:	mov	r4, r0
   12e64:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   12e68:	cmp	r0, #1
   12e6c:	bls	12ed4 <__assert_fail@plt+0x19ec>
   12e70:	str	r4, [sp, #16]
   12e74:	mov	r4, #0
   12e78:	mov	r2, #0
   12e7c:	mov	r3, #0
   12e80:	mov	r5, r4
   12e84:	strb	r4, [sp]
   12e88:	strd	r2, [sp, #4]
   12e8c:	strb	r4, [sp, #12]
   12e90:	mov	r0, sp
   12e94:	bl	12ee4 <__assert_fail@plt+0x19fc>
   12e98:	ldrb	r3, [sp, #24]
   12e9c:	cmp	r3, #0
   12ea0:	beq	12ebc <__assert_fail@plt+0x19d4>
   12ea4:	ldr	r3, [sp, #28]
   12ea8:	cmp	r3, #0
   12eac:	bne	12ebc <__assert_fail@plt+0x19d4>
   12eb0:	mov	r0, r4
   12eb4:	add	sp, sp, #60	; 0x3c
   12eb8:	pop	{r4, r5, pc}
   12ebc:	ldrd	r2, [sp, #16]
   12ec0:	add	r4, r4, #1
   12ec4:	strb	r5, [sp, #12]
   12ec8:	add	r3, r3, r2
   12ecc:	str	r3, [sp, #16]
   12ed0:	b	12e90 <__assert_fail@plt+0x19a8>
   12ed4:	mov	r0, r4
   12ed8:	bl	11398 <strlen@plt>
   12edc:	mov	r4, r0
   12ee0:	b	12eb0 <__assert_fail@plt+0x19c8>
   12ee4:	ldrb	r3, [r0, #12]
   12ee8:	cmp	r3, #0
   12eec:	bxne	lr
   12ef0:	push	{r4, r5, r6, lr}
   12ef4:	mov	r4, r0
   12ef8:	ldrb	r3, [r0]
   12efc:	ldr	r5, [r0, #16]
   12f00:	cmp	r3, #0
   12f04:	bne	12f64 <__assert_fail@plt+0x1a7c>
   12f08:	ldrb	r0, [r5]
   12f0c:	bl	203ac <__assert_fail@plt+0xeec4>
   12f10:	cmp	r0, #0
   12f14:	beq	12f38 <__assert_fail@plt+0x1a50>
   12f18:	mov	r3, #1
   12f1c:	str	r3, [r4, #20]
   12f20:	ldrb	r2, [r5]
   12f24:	str	r2, [r4, #28]
   12f28:	strb	r3, [r4, #24]
   12f2c:	mov	r3, #1
   12f30:	strb	r3, [r4, #12]
   12f34:	pop	{r4, r5, r6, pc}
   12f38:	add	r0, r4, #4
   12f3c:	bl	11254 <mbsinit@plt>
   12f40:	cmp	r0, #0
   12f44:	movne	r3, #1
   12f48:	strbne	r3, [r4]
   12f4c:	bne	12f64 <__assert_fail@plt+0x1a7c>
   12f50:	ldr	r3, [pc, #220]	; 13034 <__assert_fail@plt+0x1b4c>
   12f54:	mov	r2, #143	; 0x8f
   12f58:	ldr	r1, [pc, #216]	; 13038 <__assert_fail@plt+0x1b50>
   12f5c:	ldr	r0, [pc, #216]	; 1303c <__assert_fail@plt+0x1b54>
   12f60:	bl	114e8 <__assert_fail@plt>
   12f64:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   12f68:	mov	r1, r0
   12f6c:	mov	r0, r5
   12f70:	bl	1f4b4 <__assert_fail@plt+0xdfcc>
   12f74:	add	r6, r4, #4
   12f78:	mov	r2, r0
   12f7c:	mov	r3, r6
   12f80:	mov	r1, r5
   12f84:	add	r0, r4, #28
   12f88:	bl	203cc <__assert_fail@plt+0xeee4>
   12f8c:	cmn	r0, #1
   12f90:	str	r0, [r4, #20]
   12f94:	bne	12fa8 <__assert_fail@plt+0x1ac0>
   12f98:	mov	r3, #1
   12f9c:	str	r3, [r4, #20]
   12fa0:	mov	r3, #0
   12fa4:	b	12f28 <__assert_fail@plt+0x1a40>
   12fa8:	cmn	r0, #2
   12fac:	bne	12fc0 <__assert_fail@plt+0x1ad8>
   12fb0:	ldr	r0, [r4, #16]
   12fb4:	bl	11398 <strlen@plt>
   12fb8:	str	r0, [r4, #20]
   12fbc:	b	12fa0 <__assert_fail@plt+0x1ab8>
   12fc0:	cmp	r0, #0
   12fc4:	bne	13014 <__assert_fail@plt+0x1b2c>
   12fc8:	mov	r3, #1
   12fcc:	str	r3, [r4, #20]
   12fd0:	ldr	r3, [r4, #16]
   12fd4:	ldrb	r3, [r3]
   12fd8:	cmp	r3, #0
   12fdc:	beq	12ff4 <__assert_fail@plt+0x1b0c>
   12fe0:	ldr	r3, [pc, #76]	; 13034 <__assert_fail@plt+0x1b4c>
   12fe4:	mov	r2, #171	; 0xab
   12fe8:	ldr	r1, [pc, #72]	; 13038 <__assert_fail@plt+0x1b50>
   12fec:	ldr	r0, [pc, #76]	; 13040 <__assert_fail@plt+0x1b58>
   12ff0:	bl	114e8 <__assert_fail@plt>
   12ff4:	ldr	r3, [r4, #28]
   12ff8:	cmp	r3, #0
   12ffc:	beq	13014 <__assert_fail@plt+0x1b2c>
   13000:	ldr	r3, [pc, #44]	; 13034 <__assert_fail@plt+0x1b4c>
   13004:	mov	r2, #172	; 0xac
   13008:	ldr	r1, [pc, #40]	; 13038 <__assert_fail@plt+0x1b50>
   1300c:	ldr	r0, [pc, #48]	; 13044 <__assert_fail@plt+0x1b5c>
   13010:	bl	114e8 <__assert_fail@plt>
   13014:	mov	r3, #1
   13018:	mov	r0, r6
   1301c:	strb	r3, [r4, #24]
   13020:	bl	11254 <mbsinit@plt>
   13024:	cmp	r0, #0
   13028:	movne	r3, #0
   1302c:	strbne	r3, [r4]
   13030:	b	12f2c <__assert_fail@plt+0x1a44>
   13034:	strdeq	r1, [r2], -r1	; <UNPREDICTABLE>
   13038:	andeq	r1, r2, r4, lsl #2
   1303c:	andeq	r1, r2, r2, lsl r1
   13040:	andeq	r1, r2, r9, lsr #2
   13044:	andeq	r1, r2, r0, asr #2
   13048:	ldr	r3, [r0, #16]
   1304c:	add	r1, r3, r1
   13050:	str	r1, [r0, #16]
   13054:	bx	lr
   13058:	ldrb	r2, [r1]
   1305c:	mov	r3, r0
   13060:	add	r0, r0, #16
   13064:	cmp	r2, #0
   13068:	strb	r2, [r3], #4
   1306c:	movne	ip, r1
   13070:	add	r1, r1, #16
   13074:	ldrne	r2, [ip, #4]!
   13078:	streq	r2, [r0, #-12]
   1307c:	strne	r2, [r0, #-12]
   13080:	ldrne	r2, [ip, #4]
   13084:	str	r2, [r3, #4]
   13088:	ldrb	r3, [r1, #-4]
   1308c:	strb	r3, [r0, #-4]
   13090:	b	20358 <__assert_fail@plt+0xee70>
   13094:	push	{r4, r5, r6, lr}
   13098:	subs	r4, r0, #0
   1309c:	bne	130b4 <__assert_fail@plt+0x1bcc>
   130a0:	ldr	r3, [pc, #124]	; 13124 <__assert_fail@plt+0x1c3c>
   130a4:	ldr	r0, [pc, #124]	; 13128 <__assert_fail@plt+0x1c40>
   130a8:	ldr	r1, [r3]
   130ac:	bl	114b8 <fputs@plt>
   130b0:	bl	114d0 <abort@plt>
   130b4:	mov	r1, #47	; 0x2f
   130b8:	bl	11470 <strrchr@plt>
   130bc:	subs	r6, r0, #0
   130c0:	beq	13110 <__assert_fail@plt+0x1c28>
   130c4:	add	r5, r6, #1
   130c8:	sub	r3, r5, r4
   130cc:	cmp	r3, #6
   130d0:	ble	13110 <__assert_fail@plt+0x1c28>
   130d4:	mov	r2, #7
   130d8:	ldr	r1, [pc, #76]	; 1312c <__assert_fail@plt+0x1c44>
   130dc:	sub	r0, r6, #6
   130e0:	bl	114c4 <strncmp@plt>
   130e4:	cmp	r0, #0
   130e8:	bne	13110 <__assert_fail@plt+0x1c28>
   130ec:	mov	r2, #3
   130f0:	ldr	r1, [pc, #56]	; 13130 <__assert_fail@plt+0x1c48>
   130f4:	mov	r0, r5
   130f8:	bl	114c4 <strncmp@plt>
   130fc:	cmp	r0, #0
   13100:	ldreq	r3, [pc, #44]	; 13134 <__assert_fail@plt+0x1c4c>
   13104:	addeq	r4, r6, #4
   13108:	movne	r4, r5
   1310c:	streq	r4, [r3]
   13110:	ldr	r3, [pc, #32]	; 13138 <__assert_fail@plt+0x1c50>
   13114:	str	r4, [r3]
   13118:	ldr	r3, [pc, #28]	; 1313c <__assert_fail@plt+0x1c54>
   1311c:	str	r4, [r3]
   13120:	pop	{r4, r5, r6, pc}
   13124:	andeq	r2, r3, r0, lsr #3
   13128:	andeq	r1, r2, r2, asr r1
   1312c:	andeq	r1, r2, sl, lsl #3
   13130:	muleq	r2, r2, r1
   13134:	muleq	r3, r0, r1
   13138:			; <UNDEFINED> instruction: 0x000321bc
   1313c:	muleq	r3, r4, r1
   13140:	push	{r4, lr}
   13144:	mov	r2, #48	; 0x30
   13148:	mov	r4, r1
   1314c:	mov	r1, #0
   13150:	bl	113ec <memset@plt>
   13154:	cmp	r4, #10
   13158:	bne	13160 <__assert_fail@plt+0x1c78>
   1315c:	bl	114d0 <abort@plt>
   13160:	str	r4, [r0]
   13164:	pop	{r4, pc}
   13168:	push	{r4, r5, r6, lr}
   1316c:	mov	r2, #5
   13170:	mov	r6, r0
   13174:	mov	r5, r1
   13178:	mov	r1, r0
   1317c:	mov	r0, #0
   13180:	bl	11278 <dcgettext@plt>
   13184:	cmp	r6, r0
   13188:	mov	r4, r0
   1318c:	bne	131fc <__assert_fail@plt+0x1d14>
   13190:	bl	202fc <__assert_fail@plt+0xee14>
   13194:	ldrb	r3, [r0]
   13198:	bic	r3, r3, #32
   1319c:	cmp	r3, #85	; 0x55
   131a0:	bne	13204 <__assert_fail@plt+0x1d1c>
   131a4:	ldrb	r3, [r0, #1]
   131a8:	bic	r3, r3, #32
   131ac:	cmp	r3, #84	; 0x54
   131b0:	bne	13274 <__assert_fail@plt+0x1d8c>
   131b4:	ldrb	r3, [r0, #2]
   131b8:	bic	r3, r3, #32
   131bc:	cmp	r3, #70	; 0x46
   131c0:	bne	13274 <__assert_fail@plt+0x1d8c>
   131c4:	ldrb	r3, [r0, #3]
   131c8:	cmp	r3, #45	; 0x2d
   131cc:	bne	13274 <__assert_fail@plt+0x1d8c>
   131d0:	ldrb	r3, [r0, #4]
   131d4:	cmp	r3, #56	; 0x38
   131d8:	bne	13274 <__assert_fail@plt+0x1d8c>
   131dc:	ldrb	r3, [r0, #5]
   131e0:	cmp	r3, #0
   131e4:	bne	13274 <__assert_fail@plt+0x1d8c>
   131e8:	ldrb	r2, [r4]
   131ec:	ldr	r3, [pc, #144]	; 13284 <__assert_fail@plt+0x1d9c>
   131f0:	ldr	r4, [pc, #144]	; 13288 <__assert_fail@plt+0x1da0>
   131f4:	cmp	r2, #96	; 0x60
   131f8:	movne	r4, r3
   131fc:	mov	r0, r4
   13200:	pop	{r4, r5, r6, pc}
   13204:	cmp	r3, #71	; 0x47
   13208:	bne	13274 <__assert_fail@plt+0x1d8c>
   1320c:	ldrb	r3, [r0, #1]
   13210:	bic	r3, r3, #32
   13214:	cmp	r3, #66	; 0x42
   13218:	bne	13274 <__assert_fail@plt+0x1d8c>
   1321c:	ldrb	r3, [r0, #2]
   13220:	cmp	r3, #49	; 0x31
   13224:	bne	13274 <__assert_fail@plt+0x1d8c>
   13228:	ldrb	r3, [r0, #3]
   1322c:	cmp	r3, #56	; 0x38
   13230:	bne	13274 <__assert_fail@plt+0x1d8c>
   13234:	ldrb	r3, [r0, #4]
   13238:	cmp	r3, #48	; 0x30
   1323c:	bne	13274 <__assert_fail@plt+0x1d8c>
   13240:	ldrb	r3, [r0, #5]
   13244:	cmp	r3, #51	; 0x33
   13248:	bne	13274 <__assert_fail@plt+0x1d8c>
   1324c:	ldrb	r3, [r0, #6]
   13250:	cmp	r3, #48	; 0x30
   13254:	bne	13274 <__assert_fail@plt+0x1d8c>
   13258:	ldrb	r3, [r0, #7]
   1325c:	cmp	r3, #0
   13260:	bne	13274 <__assert_fail@plt+0x1d8c>
   13264:	ldrb	r2, [r4]
   13268:	ldr	r3, [pc, #28]	; 1328c <__assert_fail@plt+0x1da4>
   1326c:	ldr	r4, [pc, #28]	; 13290 <__assert_fail@plt+0x1da8>
   13270:	b	131f4 <__assert_fail@plt+0x1d0c>
   13274:	ldr	r4, [pc, #24]	; 13294 <__assert_fail@plt+0x1dac>
   13278:	cmp	r5, #9
   1327c:	ldr	r3, [pc, #20]	; 13298 <__assert_fail@plt+0x1db0>
   13280:	b	131f8 <__assert_fail@plt+0x1d10>
   13284:	andeq	r1, r2, lr, ror #3
   13288:	strdeq	r1, [r2], -r9
   1328c:	strdeq	r1, [r2], -r2
   13290:	strdeq	r1, [r2], -r5
   13294:	andeq	r1, r2, ip, ror #3
   13298:	andeq	r0, r2, r7, ror pc
   1329c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a0:	sub	sp, sp, #108	; 0x6c
   132a4:	mov	r8, r0
   132a8:	mov	r5, r1
   132ac:	mov	r6, #0
   132b0:	str	r3, [sp, #40]	; 0x28
   132b4:	str	r2, [sp, #48]	; 0x30
   132b8:	ldr	sl, [sp, #144]	; 0x90
   132bc:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   132c0:	ldr	r3, [sp, #148]	; 0x94
   132c4:	str	r6, [sp, #24]
   132c8:	str	r6, [sp, #32]
   132cc:	str	r6, [sp, #44]	; 0x2c
   132d0:	str	r6, [sp, #52]	; 0x34
   132d4:	ubfx	r7, r3, #1, #1
   132d8:	mov	r3, #1
   132dc:	str	r6, [sp, #60]	; 0x3c
   132e0:	str	r3, [sp, #72]	; 0x48
   132e4:	str	r0, [sp, #76]	; 0x4c
   132e8:	cmp	sl, #10
   132ec:	ldrls	pc, [pc, sl, lsl #2]
   132f0:	b	13534 <__assert_fail@plt+0x204c>
   132f4:	andeq	r3, r1, r0, lsr #6
   132f8:	andeq	r3, r1, ip, asr #10
   132fc:	ldrdeq	r3, [r1], -r0
   13300:	andeq	r3, r1, r8, ror #9
   13304:			; <UNDEFINED> instruction: 0x000134b8
   13308:	andeq	r3, r1, r0, lsl r4
   1330c:	strdeq	r3, [r1], -r0
   13310:	andeq	r3, r1, r8, lsr r5
   13314:	andeq	r3, r1, r0, asr #8
   13318:	andeq	r3, r1, r0, asr #8
   1331c:	andeq	r3, r1, r0, asr #8
   13320:	mov	r4, sl
   13324:	mov	r7, #0
   13328:	mov	r9, r5
   1332c:	mov	r3, #0
   13330:	str	r6, [sp, #68]	; 0x44
   13334:	str	r3, [sp, #28]
   13338:	ldr	r3, [sp, #40]	; 0x28
   1333c:	cmn	r3, #1
   13340:	bne	13ee0 <__assert_fail@plt+0x29f8>
   13344:	ldr	r2, [sp, #28]
   13348:	ldr	r3, [sp, #48]	; 0x30
   1334c:	ldrb	r3, [r3, r2]
   13350:	adds	r3, r3, #0
   13354:	movne	r3, #1
   13358:	str	r3, [sp, #36]	; 0x24
   1335c:	ldr	r3, [sp, #36]	; 0x24
   13360:	cmp	r3, #0
   13364:	bne	13570 <__assert_fail@plt+0x2088>
   13368:	sub	r3, sl, #2
   1336c:	cmp	r4, #0
   13370:	clz	r3, r3
   13374:	movne	r2, #0
   13378:	lsr	r3, r3, #5
   1337c:	andeq	r2, r3, r7
   13380:	cmp	r2, #0
   13384:	bne	13734 <__assert_fail@plt+0x224c>
   13388:	eor	r7, r7, #1
   1338c:	ands	r3, r3, r7
   13390:	beq	13f58 <__assert_fail@plt+0x2a70>
   13394:	ldr	r2, [sp, #68]	; 0x44
   13398:	cmp	r2, #0
   1339c:	beq	13f20 <__assert_fail@plt+0x2a38>
   133a0:	ldr	r3, [sp, #72]	; 0x48
   133a4:	cmp	r3, #0
   133a8:	beq	13ef4 <__assert_fail@plt+0x2a0c>
   133ac:	ldr	r2, [sp, #48]	; 0x30
   133b0:	ldr	r3, [sp, #160]	; 0xa0
   133b4:	ldr	r1, [sp, #60]	; 0x3c
   133b8:	str	r3, [sp, #16]
   133bc:	ldr	r3, [sp, #156]	; 0x9c
   133c0:	str	r3, [sp, #12]
   133c4:	ldr	r3, [sp, #152]	; 0x98
   133c8:	str	r3, [sp, #8]
   133cc:	ldr	r3, [sp, #148]	; 0x94
   133d0:	str	r3, [sp, #4]
   133d4:	mov	r3, #5
   133d8:	str	r3, [sp]
   133dc:	ldr	r3, [sp, #40]	; 0x28
   133e0:	mov	r0, r8
   133e4:	bl	1329c <__assert_fail@plt+0x1db4>
   133e8:	mov	r4, r0
   133ec:	b	13f4c <__assert_fail@plt+0x2a64>
   133f0:	ldr	r3, [pc, #2948]	; 13f7c <__assert_fail@plt+0x2a94>
   133f4:	mov	r7, #1
   133f8:	mov	r4, #0
   133fc:	mov	sl, #5
   13400:	str	r7, [sp, #24]
   13404:	str	r7, [sp, #32]
   13408:	str	r3, [sp, #44]	; 0x2c
   1340c:	b	13328 <__assert_fail@plt+0x1e40>
   13410:	cmp	r7, #0
   13414:	bne	13558 <__assert_fail@plt+0x2070>
   13418:	cmp	r5, #0
   1341c:	mov	r4, #1
   13420:	movne	r3, #34	; 0x22
   13424:	strbne	r3, [r8]
   13428:	mov	r3, #1
   1342c:	str	r3, [sp, #24]
   13430:	str	r3, [sp, #32]
   13434:	ldr	r3, [pc, #2880]	; 13f7c <__assert_fail@plt+0x2a94>
   13438:	str	r3, [sp, #44]	; 0x2c
   1343c:	b	13328 <__assert_fail@plt+0x1e40>
   13440:	cmp	sl, #10
   13444:	beq	13468 <__assert_fail@plt+0x1f80>
   13448:	mov	r1, sl
   1344c:	ldr	r0, [pc, #2860]	; 13f80 <__assert_fail@plt+0x2a98>
   13450:	bl	13168 <__assert_fail@plt+0x1c80>
   13454:	mov	r1, sl
   13458:	str	r0, [sp, #156]	; 0x9c
   1345c:	ldr	r0, [pc, #2848]	; 13f84 <__assert_fail@plt+0x2a9c>
   13460:	bl	13168 <__assert_fail@plt+0x1c80>
   13464:	str	r0, [sp, #160]	; 0xa0
   13468:	cmp	r7, #0
   1346c:	moveq	r4, r7
   13470:	beq	13488 <__assert_fail@plt+0x1fa0>
   13474:	mov	r4, #0
   13478:	b	13498 <__assert_fail@plt+0x1fb0>
   1347c:	cmp	r5, r4
   13480:	strbhi	r3, [r8, r4]
   13484:	add	r4, r4, #1
   13488:	ldr	r3, [sp, #156]	; 0x9c
   1348c:	ldrb	r3, [r3, r4]
   13490:	cmp	r3, #0
   13494:	bne	1347c <__assert_fail@plt+0x1f94>
   13498:	ldr	r0, [sp, #160]	; 0xa0
   1349c:	bl	11398 <strlen@plt>
   134a0:	ldr	r3, [sp, #160]	; 0xa0
   134a4:	str	r0, [sp, #32]
   134a8:	str	r3, [sp, #44]	; 0x2c
   134ac:	mov	r3, #1
   134b0:	str	r3, [sp, #24]
   134b4:	b	13328 <__assert_fail@plt+0x1e40>
   134b8:	mov	r3, #1
   134bc:	cmp	r7, #0
   134c0:	streq	r3, [sp, #24]
   134c4:	beq	13508 <__assert_fail@plt+0x2020>
   134c8:	str	r3, [sp, #32]
   134cc:	b	134f4 <__assert_fail@plt+0x200c>
   134d0:	cmp	r7, #0
   134d4:	beq	13508 <__assert_fail@plt+0x2020>
   134d8:	mov	r3, #1
   134dc:	str	r3, [sp, #32]
   134e0:	ldr	r3, [pc, #2716]	; 13f84 <__assert_fail@plt+0x2a9c>
   134e4:	b	13568 <__assert_fail@plt+0x2080>
   134e8:	mov	r7, #1
   134ec:	str	r7, [sp, #24]
   134f0:	str	r7, [sp, #32]
   134f4:	ldr	r3, [pc, #2696]	; 13f84 <__assert_fail@plt+0x2a9c>
   134f8:	mov	r4, #0
   134fc:	str	r3, [sp, #44]	; 0x2c
   13500:	mov	sl, #2
   13504:	b	13328 <__assert_fail@plt+0x1e40>
   13508:	cmp	r5, #0
   1350c:	movne	r3, #39	; 0x27
   13510:	movne	r7, #0
   13514:	strbne	r3, [r8]
   13518:	moveq	r7, r5
   1351c:	mov	r3, #1
   13520:	mov	r4, #1
   13524:	str	r3, [sp, #32]
   13528:	ldr	r3, [pc, #2644]	; 13f84 <__assert_fail@plt+0x2a9c>
   1352c:	str	r3, [sp, #44]	; 0x2c
   13530:	b	13500 <__assert_fail@plt+0x2018>
   13534:	bl	114d0 <abort@plt>
   13538:	mov	r3, #1
   1353c:	mov	r7, #0
   13540:	str	r3, [sp, #24]
   13544:	mov	r4, #0
   13548:	b	13328 <__assert_fail@plt+0x1e40>
   1354c:	mov	r7, #1
   13550:	str	sl, [sp, #32]
   13554:	b	134f4 <__assert_fail@plt+0x200c>
   13558:	mov	r3, #1
   1355c:	str	r7, [sp, #24]
   13560:	str	r3, [sp, #32]
   13564:	ldr	r3, [pc, #2576]	; 13f7c <__assert_fail@plt+0x2a94>
   13568:	str	r3, [sp, #44]	; 0x2c
   1356c:	b	13544 <__assert_fail@plt+0x205c>
   13570:	ldr	fp, [sp, #24]
   13574:	ldr	r3, [sp, #32]
   13578:	cmp	sl, #2
   1357c:	moveq	fp, #0
   13580:	andne	fp, fp, #1
   13584:	adds	r5, r3, #0
   13588:	movne	r5, #1
   1358c:	ands	r3, fp, r5
   13590:	str	r3, [sp, #64]	; 0x40
   13594:	beq	13664 <__assert_fail@plt+0x217c>
   13598:	ldr	r3, [sp, #28]
   1359c:	ldr	r2, [sp, #32]
   135a0:	cmp	r2, #1
   135a4:	add	r6, r3, r2
   135a8:	mov	r3, r2
   135ac:	ldr	r2, [sp, #40]	; 0x28
   135b0:	movls	r3, #0
   135b4:	movhi	r3, #1
   135b8:	cmn	r2, #1
   135bc:	movne	r3, #0
   135c0:	cmp	r3, #0
   135c4:	beq	135d4 <__assert_fail@plt+0x20ec>
   135c8:	ldr	r0, [sp, #48]	; 0x30
   135cc:	bl	11398 <strlen@plt>
   135d0:	str	r0, [sp, #40]	; 0x28
   135d4:	ldr	r3, [sp, #40]	; 0x28
   135d8:	cmp	r6, r3
   135dc:	bhi	1365c <__assert_fail@plt+0x2174>
   135e0:	ldr	r0, [sp, #28]
   135e4:	ldr	r2, [sp, #32]
   135e8:	ldr	r3, [sp, #48]	; 0x30
   135ec:	ldr	r1, [sp, #44]	; 0x2c
   135f0:	add	r0, r3, r0
   135f4:	bl	11260 <memcmp@plt>
   135f8:	cmp	r0, #0
   135fc:	bne	1365c <__assert_fail@plt+0x2174>
   13600:	cmp	r7, #0
   13604:	beq	13664 <__assert_fail@plt+0x217c>
   13608:	str	r7, [sp, #24]
   1360c:	ldr	r3, [sp, #24]
   13610:	mov	r1, r9
   13614:	ldr	r2, [sp, #48]	; 0x30
   13618:	cmp	sl, #2
   1361c:	movne	r3, #0
   13620:	andeq	r3, r3, #1
   13624:	cmp	r3, #0
   13628:	ldr	r3, [sp, #160]	; 0xa0
   1362c:	movne	sl, #4
   13630:	str	sl, [sp]
   13634:	str	r3, [sp, #16]
   13638:	ldr	r3, [sp, #156]	; 0x9c
   1363c:	str	r3, [sp, #12]
   13640:	mov	r3, #0
   13644:	str	r3, [sp, #8]
   13648:	ldr	r3, [sp, #148]	; 0x94
   1364c:	bic	r3, r3, #2
   13650:	str	r3, [sp, #4]
   13654:	ldr	r3, [sp, #40]	; 0x28
   13658:	b	133e0 <__assert_fail@plt+0x1ef8>
   1365c:	mov	r3, #0
   13660:	str	r3, [sp, #64]	; 0x40
   13664:	ldr	r2, [sp, #28]
   13668:	ldr	r3, [sp, #48]	; 0x30
   1366c:	add	r3, r3, r2
   13670:	str	r3, [sp, #80]	; 0x50
   13674:	ldr	r3, [sp, #48]	; 0x30
   13678:	ldrb	r6, [r3, r2]
   1367c:	cmp	r6, #58	; 0x3a
   13680:	bhi	137e4 <__assert_fail@plt+0x22fc>
   13684:	cmp	r6, #43	; 0x2b
   13688:	bcs	139a4 <__assert_fail@plt+0x24bc>
   1368c:	cmp	r6, #32
   13690:	beq	139f8 <__assert_fail@plt+0x2510>
   13694:	bhi	1373c <__assert_fail@plt+0x2254>
   13698:	cmp	r6, #9
   1369c:	beq	13ba0 <__assert_fail@plt+0x26b8>
   136a0:	bhi	13700 <__assert_fail@plt+0x2218>
   136a4:	cmp	r6, #7
   136a8:	beq	13bb0 <__assert_fail@plt+0x26c8>
   136ac:	bhi	13bcc <__assert_fail@plt+0x26e4>
   136b0:	cmp	r6, #0
   136b4:	beq	13a14 <__assert_fail@plt+0x252c>
   136b8:	ldr	r3, [sp, #76]	; 0x4c
   136bc:	cmp	r3, #1
   136c0:	bne	13c18 <__assert_fail@plt+0x2730>
   136c4:	bl	11380 <__ctype_b_loc@plt>
   136c8:	ldr	r2, [r0]
   136cc:	sxth	r3, r6
   136d0:	lsl	r3, r3, #1
   136d4:	ldrh	r5, [r2, r3]
   136d8:	ldr	r3, [sp, #76]	; 0x4c
   136dc:	ubfx	r5, r5, #14, #1
   136e0:	str	r3, [sp, #56]	; 0x38
   136e4:	ldr	r3, [sp, #24]
   136e8:	eor	fp, r5, #1
   136ec:	and	fp, fp, r3
   136f0:	ands	fp, fp, #255	; 0xff
   136f4:	beq	138d4 <__assert_fail@plt+0x23ec>
   136f8:	mov	r5, #0
   136fc:	b	13cc4 <__assert_fail@plt+0x27dc>
   13700:	cmp	r6, #11
   13704:	beq	13bd4 <__assert_fail@plt+0x26ec>
   13708:	bcc	13ba8 <__assert_fail@plt+0x26c0>
   1370c:	cmp	r6, #12
   13710:	beq	13bdc <__assert_fail@plt+0x26f4>
   13714:	cmp	r6, #13
   13718:	moveq	r3, #114	; 0x72
   1371c:	bne	136b8 <__assert_fail@plt+0x21d0>
   13720:	cmp	sl, #2
   13724:	movne	r2, #0
   13728:	andeq	r2, r7, #1
   1372c:	cmp	r2, #0
   13730:	beq	13bb4 <__assert_fail@plt+0x26cc>
   13734:	mov	sl, #2
   13738:	b	1360c <__assert_fail@plt+0x2124>
   1373c:	cmp	r6, #37	; 0x25
   13740:	beq	139a4 <__assert_fail@plt+0x24bc>
   13744:	bhi	13758 <__assert_fail@plt+0x2270>
   13748:	cmp	r6, #35	; 0x23
   1374c:	beq	139ec <__assert_fail@plt+0x2504>
   13750:	mov	r5, #0
   13754:	b	139fc <__assert_fail@plt+0x2514>
   13758:	cmp	r6, #39	; 0x27
   1375c:	bne	13750 <__assert_fail@plt+0x2268>
   13760:	cmp	sl, #2
   13764:	ldrne	r5, [sp, #36]	; 0x24
   13768:	movne	r3, r5
   1376c:	strne	r3, [sp, #68]	; 0x44
   13770:	bne	13af0 <__assert_fail@plt+0x2608>
   13774:	cmp	r7, #0
   13778:	bne	1360c <__assert_fail@plt+0x2124>
   1377c:	ldr	r3, [sp, #60]	; 0x3c
   13780:	cmp	r9, #0
   13784:	clz	r3, r3
   13788:	lsr	r3, r3, #5
   1378c:	moveq	r3, #0
   13790:	cmp	r3, #0
   13794:	strne	r9, [sp, #60]	; 0x3c
   13798:	movne	r9, #0
   1379c:	bne	137ac <__assert_fail@plt+0x22c4>
   137a0:	cmp	r9, r4
   137a4:	movhi	r3, #39	; 0x27
   137a8:	strbhi	r3, [r8, r4]
   137ac:	add	r3, r4, #1
   137b0:	ldr	r5, [sp, #36]	; 0x24
   137b4:	mov	fp, #0
   137b8:	cmp	r3, r9
   137bc:	movcc	r2, #92	; 0x5c
   137c0:	str	fp, [sp, #52]	; 0x34
   137c4:	strbcc	r2, [r8, r3]
   137c8:	add	r3, r4, #2
   137cc:	add	r4, r4, #3
   137d0:	cmp	r3, r9
   137d4:	str	r5, [sp, #68]	; 0x44
   137d8:	movcc	r2, #39	; 0x27
   137dc:	strbcc	r2, [r8, r3]
   137e0:	b	138d4 <__assert_fail@plt+0x23ec>
   137e4:	cmp	r6, #94	; 0x5e
   137e8:	beq	13750 <__assert_fail@plt+0x2268>
   137ec:	bhi	139ac <__assert_fail@plt+0x24c4>
   137f0:	cmp	r6, #90	; 0x5a
   137f4:	bhi	13998 <__assert_fail@plt+0x24b0>
   137f8:	cmp	r6, #65	; 0x41
   137fc:	bcs	139a4 <__assert_fail@plt+0x24bc>
   13800:	cmp	r6, #62	; 0x3e
   13804:	bls	13750 <__assert_fail@plt+0x2268>
   13808:	cmp	r6, #63	; 0x3f
   1380c:	bne	136b8 <__assert_fail@plt+0x21d0>
   13810:	cmp	sl, #2
   13814:	beq	13af8 <__assert_fail@plt+0x2610>
   13818:	cmp	sl, #5
   1381c:	movne	fp, #0
   13820:	bne	13ec8 <__assert_fail@plt+0x29e0>
   13824:	ldr	r3, [sp, #148]	; 0x94
   13828:	tst	r3, #4
   1382c:	beq	13b00 <__assert_fail@plt+0x2618>
   13830:	ldr	r3, [sp, #28]
   13834:	add	r2, r3, #2
   13838:	ldr	r3, [sp, #40]	; 0x28
   1383c:	cmp	r2, r3
   13840:	bcs	13b00 <__assert_fail@plt+0x2618>
   13844:	ldr	r1, [sp, #28]
   13848:	ldr	r3, [sp, #48]	; 0x30
   1384c:	add	r3, r3, r1
   13850:	ldrb	r1, [r3, #1]
   13854:	cmp	r1, #63	; 0x3f
   13858:	bne	13b00 <__assert_fail@plt+0x2618>
   1385c:	ldr	r3, [sp, #48]	; 0x30
   13860:	ldrb	r6, [r3, r2]
   13864:	sub	r3, r6, #33	; 0x21
   13868:	uxtb	r3, r3
   1386c:	cmp	r3, #29
   13870:	bhi	13ed0 <__assert_fail@plt+0x29e8>
   13874:	ldr	r0, [pc, #1804]	; 13f88 <__assert_fail@plt+0x2aa0>
   13878:	mov	r5, #1
   1387c:	ands	r5, r0, r5, lsl r3
   13880:	beq	13ed8 <__assert_fail@plt+0x29f0>
   13884:	cmp	r7, #0
   13888:	bne	1360c <__assert_fail@plt+0x2124>
   1388c:	cmp	r9, r4
   13890:	add	r3, r4, #1
   13894:	str	r2, [sp, #28]
   13898:	mov	r5, #0
   1389c:	strbhi	r1, [r8, r4]
   138a0:	cmp	r9, r3
   138a4:	mov	fp, r5
   138a8:	movhi	r1, #34	; 0x22
   138ac:	strbhi	r1, [r8, r3]
   138b0:	add	r3, r4, #2
   138b4:	cmp	r9, r3
   138b8:	movhi	r1, #34	; 0x22
   138bc:	strbhi	r1, [r8, r3]
   138c0:	add	r3, r4, #3
   138c4:	add	r4, r4, #4
   138c8:	cmp	r9, r3
   138cc:	movhi	r1, #63	; 0x3f
   138d0:	strbhi	r1, [r8, r3]
   138d4:	ldr	r3, [sp, #24]
   138d8:	eor	r3, r3, #1
   138dc:	cmp	sl, #2
   138e0:	orreq	r3, r3, #1
   138e4:	eor	r3, r3, #1
   138e8:	orr	r3, r7, r3
   138ec:	tst	r3, #255	; 0xff
   138f0:	beq	1391c <__assert_fail@plt+0x2434>
   138f4:	ldr	r3, [sp, #152]	; 0x98
   138f8:	cmp	r3, #0
   138fc:	beq	1391c <__assert_fail@plt+0x2434>
   13900:	ldr	r1, [sp, #152]	; 0x98
   13904:	ubfx	r2, r6, #5, #8
   13908:	and	r3, r6, #31
   1390c:	ldr	r2, [r1, r2, lsl #2]
   13910:	lsr	r3, r2, r3
   13914:	tst	r3, #1
   13918:	bne	13928 <__assert_fail@plt+0x2440>
   1391c:	ldr	r3, [sp, #64]	; 0x40
   13920:	cmp	r3, #0
   13924:	beq	13b20 <__assert_fail@plt+0x2638>
   13928:	sub	r3, sl, #2
   1392c:	cmp	r7, #0
   13930:	clz	r3, r3
   13934:	lsr	r3, r3, #5
   13938:	bne	1360c <__assert_fail@plt+0x2124>
   1393c:	ldr	r2, [sp, #52]	; 0x34
   13940:	eor	r2, r2, #1
   13944:	ands	r3, r3, r2
   13948:	beq	13980 <__assert_fail@plt+0x2498>
   1394c:	cmp	r9, r4
   13950:	str	r3, [sp, #52]	; 0x34
   13954:	movhi	r2, #39	; 0x27
   13958:	strbhi	r2, [r8, r4]
   1395c:	add	r2, r4, #1
   13960:	cmp	r9, r2
   13964:	movhi	r1, #36	; 0x24
   13968:	strbhi	r1, [r8, r2]
   1396c:	add	r2, r4, #2
   13970:	add	r4, r4, #3
   13974:	cmp	r9, r2
   13978:	movhi	r1, #39	; 0x27
   1397c:	strbhi	r1, [r8, r2]
   13980:	cmp	r9, r4
   13984:	ldr	fp, [sp, #36]	; 0x24
   13988:	movhi	r3, #92	; 0x5c
   1398c:	strbhi	r3, [r8, r4]
   13990:	add	r4, r4, #1
   13994:	b	13b20 <__assert_fail@plt+0x2638>
   13998:	cmp	r6, #92	; 0x5c
   1399c:	beq	13b08 <__assert_fail@plt+0x2620>
   139a0:	bls	13750 <__assert_fail@plt+0x2268>
   139a4:	ldr	r5, [sp, #36]	; 0x24
   139a8:	b	13af0 <__assert_fail@plt+0x2608>
   139ac:	cmp	r6, #122	; 0x7a
   139b0:	bhi	139d0 <__assert_fail@plt+0x24e8>
   139b4:	cmp	r6, #97	; 0x61
   139b8:	bcs	139a4 <__assert_fail@plt+0x24bc>
   139bc:	cmp	r6, #95	; 0x5f
   139c0:	beq	139a4 <__assert_fail@plt+0x24bc>
   139c4:	cmp	r6, #96	; 0x60
   139c8:	bne	136b8 <__assert_fail@plt+0x21d0>
   139cc:	b	13750 <__assert_fail@plt+0x2268>
   139d0:	cmp	r6, #124	; 0x7c
   139d4:	beq	13750 <__assert_fail@plt+0x2268>
   139d8:	bcc	13be4 <__assert_fail@plt+0x26fc>
   139dc:	cmp	r6, #125	; 0x7d
   139e0:	beq	13be4 <__assert_fail@plt+0x26fc>
   139e4:	cmp	r6, #126	; 0x7e
   139e8:	bne	136b8 <__assert_fail@plt+0x21d0>
   139ec:	ldr	r3, [sp, #28]
   139f0:	cmp	r3, #0
   139f4:	bne	13b00 <__assert_fail@plt+0x2618>
   139f8:	ldr	r5, [sp, #36]	; 0x24
   139fc:	cmp	sl, #2
   13a00:	movne	fp, #0
   13a04:	andeq	fp, r7, #1
   13a08:	cmp	fp, #0
   13a0c:	beq	138d4 <__assert_fail@plt+0x23ec>
   13a10:	b	13734 <__assert_fail@plt+0x224c>
   13a14:	ldr	r3, [sp, #24]
   13a18:	cmp	r3, #0
   13a1c:	beq	13ae4 <__assert_fail@plt+0x25fc>
   13a20:	sub	r2, sl, #2
   13a24:	cmp	r7, #0
   13a28:	clz	r2, r2
   13a2c:	lsr	r2, r2, #5
   13a30:	bne	13608 <__assert_fail@plt+0x2120>
   13a34:	ldr	r3, [sp, #52]	; 0x34
   13a38:	eor	r3, r3, #1
   13a3c:	ands	r2, r2, r3
   13a40:	moveq	r3, r4
   13a44:	beq	13a7c <__assert_fail@plt+0x2594>
   13a48:	cmp	r9, r4
   13a4c:	str	r2, [sp, #52]	; 0x34
   13a50:	movhi	r3, #39	; 0x27
   13a54:	strbhi	r3, [r8, r4]
   13a58:	add	r3, r4, #1
   13a5c:	cmp	r9, r3
   13a60:	movhi	r1, #36	; 0x24
   13a64:	strbhi	r1, [r8, r3]
   13a68:	add	r3, r4, #2
   13a6c:	cmp	r9, r3
   13a70:	movhi	r1, #39	; 0x27
   13a74:	strbhi	r1, [r8, r3]
   13a78:	add	r3, r4, #3
   13a7c:	cmp	r9, r3
   13a80:	add	r4, r3, #1
   13a84:	movhi	r2, #92	; 0x5c
   13a88:	strbhi	r2, [r8, r3]
   13a8c:	cmp	fp, #0
   13a90:	beq	13eb8 <__assert_fail@plt+0x29d0>
   13a94:	ldr	r2, [sp, #28]
   13a98:	ldr	r1, [sp, #40]	; 0x28
   13a9c:	add	r2, r2, #1
   13aa0:	cmp	r2, r1
   13aa4:	bcs	13adc <__assert_fail@plt+0x25f4>
   13aa8:	ldr	r1, [sp, #48]	; 0x30
   13aac:	mov	r6, #48	; 0x30
   13ab0:	ldrb	r2, [r1, r2]
   13ab4:	sub	r2, r2, #48	; 0x30
   13ab8:	cmp	r2, #9
   13abc:	bhi	13ec8 <__assert_fail@plt+0x29e0>
   13ac0:	cmp	r9, r4
   13ac4:	add	r2, r3, #2
   13ac8:	strbhi	r6, [r8, r4]
   13acc:	cmp	r9, r2
   13ad0:	add	r4, r3, #3
   13ad4:	movhi	r1, #48	; 0x30
   13ad8:	strbhi	r1, [r8, r2]
   13adc:	mov	r5, #0
   13ae0:	b	13ec0 <__assert_fail@plt+0x29d8>
   13ae4:	ldr	r3, [sp, #148]	; 0x94
   13ae8:	ands	r5, r3, #1
   13aec:	bne	13b74 <__assert_fail@plt+0x268c>
   13af0:	mov	fp, #0
   13af4:	b	138d4 <__assert_fail@plt+0x23ec>
   13af8:	cmp	r7, #0
   13afc:	bne	1360c <__assert_fail@plt+0x2124>
   13b00:	mov	r5, #0
   13b04:	b	13af0 <__assert_fail@plt+0x2608>
   13b08:	cmp	sl, #2
   13b0c:	bne	13b80 <__assert_fail@plt+0x2698>
   13b10:	cmp	r7, #0
   13b14:	bne	1360c <__assert_fail@plt+0x2124>
   13b18:	mov	r5, r7
   13b1c:	mov	fp, r7
   13b20:	ldr	r3, [sp, #52]	; 0x34
   13b24:	eor	fp, fp, #1
   13b28:	tst	r3, fp
   13b2c:	beq	13b58 <__assert_fail@plt+0x2670>
   13b30:	cmp	r9, r4
   13b34:	movhi	r3, #39	; 0x27
   13b38:	strbhi	r3, [r8, r4]
   13b3c:	add	r3, r4, #1
   13b40:	add	r4, r4, #2
   13b44:	cmp	r9, r3
   13b48:	movhi	r2, #39	; 0x27
   13b4c:	strbhi	r2, [r8, r3]
   13b50:	mov	r3, #0
   13b54:	str	r3, [sp, #52]	; 0x34
   13b58:	cmp	r9, r4
   13b5c:	ldr	r3, [sp, #72]	; 0x48
   13b60:	strbhi	r6, [r8, r4]
   13b64:	cmp	r5, #0
   13b68:	add	r4, r4, #1
   13b6c:	moveq	r3, #0
   13b70:	str	r3, [sp, #72]	; 0x48
   13b74:	ldr	r3, [sp, #28]
   13b78:	add	r3, r3, #1
   13b7c:	b	13334 <__assert_fail@plt+0x1e4c>
   13b80:	ldr	r3, [sp, #24]
   13b84:	and	r3, r3, r7
   13b88:	tst	r5, r3
   13b8c:	moveq	r3, r6
   13b90:	beq	13720 <__assert_fail@plt+0x2238>
   13b94:	mov	fp, #0
   13b98:	mov	r5, fp
   13b9c:	b	13b20 <__assert_fail@plt+0x2638>
   13ba0:	mov	r3, #116	; 0x74
   13ba4:	b	13720 <__assert_fail@plt+0x2238>
   13ba8:	mov	r3, #110	; 0x6e
   13bac:	b	13720 <__assert_fail@plt+0x2238>
   13bb0:	mov	r3, #97	; 0x61
   13bb4:	ldr	r2, [sp, #24]
   13bb8:	cmp	r2, #0
   13bbc:	beq	13b00 <__assert_fail@plt+0x2618>
   13bc0:	mov	r6, r3
   13bc4:	mov	r5, #0
   13bc8:	b	13928 <__assert_fail@plt+0x2440>
   13bcc:	mov	r3, #98	; 0x62
   13bd0:	b	13bb4 <__assert_fail@plt+0x26cc>
   13bd4:	mov	r3, #118	; 0x76
   13bd8:	b	13bb4 <__assert_fail@plt+0x26cc>
   13bdc:	mov	r3, #102	; 0x66
   13be0:	b	13bb4 <__assert_fail@plt+0x26cc>
   13be4:	ldr	r3, [sp, #40]	; 0x28
   13be8:	cmn	r3, #1
   13bec:	bne	13c0c <__assert_fail@plt+0x2724>
   13bf0:	ldr	r3, [sp, #48]	; 0x30
   13bf4:	ldrb	r3, [r3, #1]
   13bf8:	adds	r3, r3, #0
   13bfc:	movne	r3, #1
   13c00:	cmp	r3, #0
   13c04:	bne	13b00 <__assert_fail@plt+0x2618>
   13c08:	b	139ec <__assert_fail@plt+0x2504>
   13c0c:	ldr	r3, [sp, #40]	; 0x28
   13c10:	subs	r3, r3, #1
   13c14:	b	13bfc <__assert_fail@plt+0x2714>
   13c18:	mov	r3, #0
   13c1c:	mov	r2, #0
   13c20:	strd	r2, [sp, #96]	; 0x60
   13c24:	ldr	r3, [sp, #40]	; 0x28
   13c28:	cmn	r3, #1
   13c2c:	bne	13c3c <__assert_fail@plt+0x2754>
   13c30:	ldr	r0, [sp, #48]	; 0x30
   13c34:	bl	11398 <strlen@plt>
   13c38:	str	r0, [sp, #40]	; 0x28
   13c3c:	ldr	r5, [sp, #36]	; 0x24
   13c40:	mov	r3, #0
   13c44:	str	r3, [sp, #56]	; 0x38
   13c48:	ldr	r3, [sp, #28]
   13c4c:	add	r0, sp, #92	; 0x5c
   13c50:	ldr	r1, [sp, #40]	; 0x28
   13c54:	ldr	r2, [sp, #56]	; 0x38
   13c58:	add	r2, r3, r2
   13c5c:	ldr	r3, [sp, #48]	; 0x30
   13c60:	add	fp, r3, r2
   13c64:	sub	r2, r1, r2
   13c68:	add	r3, sp, #96	; 0x60
   13c6c:	mov	r1, fp
   13c70:	bl	203cc <__assert_fail@plt+0xeee4>
   13c74:	subs	r2, r0, #0
   13c78:	beq	13cb8 <__assert_fail@plt+0x27d0>
   13c7c:	cmn	r2, #1
   13c80:	beq	13e8c <__assert_fail@plt+0x29a4>
   13c84:	cmn	r2, #2
   13c88:	bne	13dfc <__assert_fail@plt+0x2914>
   13c8c:	ldr	r3, [sp, #28]
   13c90:	ldr	r2, [sp, #56]	; 0x38
   13c94:	add	r3, r3, r2
   13c98:	ldr	r2, [sp, #40]	; 0x28
   13c9c:	cmp	r2, r3
   13ca0:	bls	13e8c <__assert_fail@plt+0x29a4>
   13ca4:	ldr	r2, [sp, #56]	; 0x38
   13ca8:	ldr	r3, [sp, #80]	; 0x50
   13cac:	ldrb	r5, [r3, r2]
   13cb0:	cmp	r5, #0
   13cb4:	bne	13dec <__assert_fail@plt+0x2904>
   13cb8:	ldr	r3, [sp, #56]	; 0x38
   13cbc:	cmp	r3, #1
   13cc0:	bls	136e4 <__assert_fail@plt+0x21fc>
   13cc4:	ldr	r3, [sp, #28]
   13cc8:	mov	fp, #0
   13ccc:	mov	ip, #92	; 0x5c
   13cd0:	ldr	r2, [sp, #56]	; 0x38
   13cd4:	add	r3, r3, r2
   13cd8:	ldr	r2, [sp, #24]
   13cdc:	str	r3, [sp, #36]	; 0x24
   13ce0:	eor	r3, r5, #1
   13ce4:	and	r3, r3, r2
   13ce8:	mov	r2, #39	; 0x27
   13cec:	uxtb	r3, r3
   13cf0:	cmp	r3, #0
   13cf4:	beq	13e94 <__assert_fail@plt+0x29ac>
   13cf8:	sub	r0, sl, #2
   13cfc:	cmp	r7, #0
   13d00:	clz	r0, r0
   13d04:	lsr	r0, r0, #5
   13d08:	bne	13608 <__assert_fail@plt+0x2120>
   13d0c:	ldr	r1, [sp, #52]	; 0x34
   13d10:	eor	r1, r1, #1
   13d14:	ands	r1, r0, r1
   13d18:	beq	13d48 <__assert_fail@plt+0x2860>
   13d1c:	cmp	r9, r4
   13d20:	add	r0, r4, #1
   13d24:	str	r1, [sp, #52]	; 0x34
   13d28:	strbhi	r2, [r8, r4]
   13d2c:	cmp	r9, r0
   13d30:	movhi	lr, #36	; 0x24
   13d34:	strbhi	lr, [r8, r0]
   13d38:	add	r0, r4, #2
   13d3c:	add	r4, r4, #3
   13d40:	cmp	r9, r0
   13d44:	strbhi	r2, [r8, r0]
   13d48:	cmp	r9, r4
   13d4c:	add	r0, r4, #1
   13d50:	mov	fp, r3
   13d54:	strbhi	ip, [r8, r4]
   13d58:	cmp	r9, r0
   13d5c:	lsrhi	r1, r6, #6
   13d60:	addhi	r1, r1, #48	; 0x30
   13d64:	strbhi	r1, [r8, r0]
   13d68:	add	r0, r4, #2
   13d6c:	add	r4, r4, #3
   13d70:	cmp	r9, r0
   13d74:	ubfxhi	r1, r6, #3, #3
   13d78:	and	r6, r6, #7
   13d7c:	add	r6, r6, #48	; 0x30
   13d80:	addhi	r1, r1, #48	; 0x30
   13d84:	strbhi	r1, [r8, r0]
   13d88:	eor	r0, fp, #1
   13d8c:	ldr	r1, [sp, #28]
   13d90:	ldr	lr, [sp, #52]	; 0x34
   13d94:	add	r1, r1, #1
   13d98:	and	r0, r0, lr
   13d9c:	ldr	lr, [sp, #36]	; 0x24
   13da0:	cmp	r1, lr
   13da4:	bcs	13b20 <__assert_fail@plt+0x2638>
   13da8:	cmp	r0, #0
   13dac:	beq	13dd0 <__assert_fail@plt+0x28e8>
   13db0:	cmp	r9, r4
   13db4:	add	r0, r4, #1
   13db8:	strbhi	r2, [r8, r4]
   13dbc:	cmp	r9, r0
   13dc0:	add	r4, r4, #2
   13dc4:	strbhi	r2, [r8, r0]
   13dc8:	mov	r0, #0
   13dcc:	str	r0, [sp, #52]	; 0x34
   13dd0:	ldr	r0, [sp, #48]	; 0x30
   13dd4:	cmp	r9, r4
   13dd8:	str	r1, [sp, #28]
   13ddc:	strbhi	r6, [r8, r4]
   13de0:	add	r4, r4, #1
   13de4:	ldrb	r6, [r0, r1]
   13de8:	b	13cf0 <__assert_fail@plt+0x2808>
   13dec:	ldr	r3, [sp, #56]	; 0x38
   13df0:	add	r3, r3, #1
   13df4:	str	r3, [sp, #56]	; 0x38
   13df8:	b	13c8c <__assert_fail@plt+0x27a4>
   13dfc:	cmp	sl, #2
   13e00:	movne	r3, #0
   13e04:	andeq	r3, r7, #1
   13e08:	cmp	r3, #0
   13e0c:	movne	r1, #1
   13e10:	bne	13e6c <__assert_fail@plt+0x2984>
   13e14:	ldr	r0, [sp, #92]	; 0x5c
   13e18:	str	r2, [sp, #84]	; 0x54
   13e1c:	bl	112cc <iswprint@plt>
   13e20:	ldr	r3, [sp, #56]	; 0x38
   13e24:	cmp	r0, #0
   13e28:	add	r0, sp, #96	; 0x60
   13e2c:	moveq	r5, #0
   13e30:	ldr	r2, [sp, #84]	; 0x54
   13e34:	add	r3, r3, r2
   13e38:	str	r3, [sp, #56]	; 0x38
   13e3c:	bl	11254 <mbsinit@plt>
   13e40:	cmp	r0, #0
   13e44:	beq	13c48 <__assert_fail@plt+0x2760>
   13e48:	b	13cb8 <__assert_fail@plt+0x27d0>
   13e4c:	ldrb	r3, [fp, #1]!
   13e50:	cmp	r3, #94	; 0x5e
   13e54:	beq	13734 <__assert_fail@plt+0x224c>
   13e58:	bhi	13e78 <__assert_fail@plt+0x2990>
   13e5c:	sub	r3, r3, #91	; 0x5b
   13e60:	cmp	r3, #1
   13e64:	bls	13734 <__assert_fail@plt+0x224c>
   13e68:	add	r1, r1, #1
   13e6c:	cmp	r1, r2
   13e70:	bne	13e4c <__assert_fail@plt+0x2964>
   13e74:	b	13e14 <__assert_fail@plt+0x292c>
   13e78:	cmp	r3, #96	; 0x60
   13e7c:	beq	13734 <__assert_fail@plt+0x224c>
   13e80:	cmp	r3, #124	; 0x7c
   13e84:	bne	13e68 <__assert_fail@plt+0x2980>
   13e88:	b	13734 <__assert_fail@plt+0x224c>
   13e8c:	mov	r5, #0
   13e90:	b	13cb8 <__assert_fail@plt+0x27d0>
   13e94:	ldr	r1, [sp, #64]	; 0x40
   13e98:	cmp	r1, #0
   13e9c:	beq	13d88 <__assert_fail@plt+0x28a0>
   13ea0:	cmp	r9, r4
   13ea4:	mov	r1, #0
   13ea8:	strbhi	ip, [r8, r4]
   13eac:	add	r4, r4, #1
   13eb0:	str	r1, [sp, #64]	; 0x40
   13eb4:	b	13d88 <__assert_fail@plt+0x28a0>
   13eb8:	mov	r5, fp
   13ebc:	ldr	fp, [sp, #24]
   13ec0:	mov	r6, #48	; 0x30
   13ec4:	b	138d4 <__assert_fail@plt+0x23ec>
   13ec8:	mov	r5, #0
   13ecc:	b	138d4 <__assert_fail@plt+0x23ec>
   13ed0:	mov	r6, r1
   13ed4:	b	13b00 <__assert_fail@plt+0x2618>
   13ed8:	mov	r6, r1
   13edc:	b	13af0 <__assert_fail@plt+0x2608>
   13ee0:	ldr	r2, [sp, #28]
   13ee4:	ldr	r3, [sp, #40]	; 0x28
   13ee8:	subs	r3, r3, r2
   13eec:	movne	r3, #1
   13ef0:	b	13358 <__assert_fail@plt+0x1e70>
   13ef4:	ldr	r3, [sp, #60]	; 0x3c
   13ef8:	mov	sl, #2
   13efc:	ldr	r7, [sp, #72]	; 0x48
   13f00:	adds	r6, r3, #0
   13f04:	mov	r5, r3
   13f08:	movne	r6, #1
   13f0c:	cmp	r9, #0
   13f10:	movne	r6, #0
   13f14:	cmp	r6, #0
   13f18:	bne	132e8 <__assert_fail@plt+0x1e00>
   13f1c:	ldr	r3, [sp, #68]	; 0x44
   13f20:	ldr	r2, [sp, #44]	; 0x2c
   13f24:	cmp	r2, #0
   13f28:	moveq	r3, #0
   13f2c:	andne	r3, r3, #1
   13f30:	cmp	r3, #0
   13f34:	movne	r3, r2
   13f38:	subne	r3, r3, #1
   13f3c:	bne	13f6c <__assert_fail@plt+0x2a84>
   13f40:	cmp	r9, r4
   13f44:	movhi	r3, #0
   13f48:	strbhi	r3, [r8, r4]
   13f4c:	mov	r0, r4
   13f50:	add	sp, sp, #108	; 0x6c
   13f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f58:	mov	r3, r7
   13f5c:	b	13f20 <__assert_fail@plt+0x2a38>
   13f60:	cmp	r9, r4
   13f64:	strbhi	r2, [r8, r4]
   13f68:	add	r4, r4, #1
   13f6c:	ldrb	r2, [r3, #1]!
   13f70:	cmp	r2, #0
   13f74:	bne	13f60 <__assert_fail@plt+0x2a78>
   13f78:	b	13f40 <__assert_fail@plt+0x2a58>
   13f7c:	andeq	r1, r2, ip, ror #3
   13f80:	strdeq	r1, [r2], -sp
   13f84:	andeq	r0, r2, r7, ror pc
   13f88:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f90:	sub	sp, sp, #52	; 0x34
   13f94:	mov	r6, r0
   13f98:	mov	r5, r3
   13f9c:	mov	r8, r1
   13fa0:	mov	r9, r2
   13fa4:	bl	113c8 <__errno_location@plt>
   13fa8:	ldr	r3, [r0]
   13fac:	cmn	r6, #-2147483647	; 0x80000001
   13fb0:	str	r0, [sp, #24]
   13fb4:	ldr	r7, [pc, #368]	; 1412c <__assert_fail@plt+0x2c44>
   13fb8:	str	r3, [sp, #32]
   13fbc:	movne	r3, #0
   13fc0:	moveq	r3, #1
   13fc4:	orrs	r3, r3, r6, lsr #31
   13fc8:	ldr	r4, [r7]
   13fcc:	beq	13fd4 <__assert_fail@plt+0x2aec>
   13fd0:	bl	114d0 <abort@plt>
   13fd4:	ldr	r2, [r7, #4]
   13fd8:	cmp	r2, r6
   13fdc:	bgt	1404c <__assert_fail@plt+0x2b64>
   13fe0:	add	sl, r7, #8
   13fe4:	mov	r3, #8
   13fe8:	cmp	r4, sl
   13fec:	add	r1, sp, #44	; 0x2c
   13ff0:	str	r2, [sp, #44]	; 0x2c
   13ff4:	sub	r2, r6, r2
   13ff8:	movne	r0, r4
   13ffc:	moveq	r0, #0
   14000:	add	r2, r2, #1
   14004:	str	r3, [sp]
   14008:	mvn	r3, #-2147483648	; 0x80000000
   1400c:	bl	1fdb0 <__assert_fail@plt+0xe8c8>
   14010:	cmp	r4, sl
   14014:	mov	fp, r0
   14018:	str	r0, [r7]
   1401c:	ldmeq	r4, {r0, r1}
   14020:	mov	r4, fp
   14024:	ldr	r2, [sp, #44]	; 0x2c
   14028:	stmeq	fp, {r0, r1}
   1402c:	mov	r1, #0
   14030:	ldr	r0, [r7, #4]
   14034:	sub	r2, r2, r0
   14038:	add	r0, fp, r0, lsl #3
   1403c:	lsl	r2, r2, #3
   14040:	bl	113ec <memset@plt>
   14044:	ldr	r3, [sp, #44]	; 0x2c
   14048:	str	r3, [r7, #4]
   1404c:	ldr	r3, [r5, #4]
   14050:	add	sl, r4, r6, lsl #3
   14054:	mov	r2, r8
   14058:	ldr	fp, [r4, r6, lsl #3]
   1405c:	ldr	r7, [sl, #4]
   14060:	orr	r3, r3, #1
   14064:	str	r3, [sp, #28]
   14068:	add	r3, r5, #8
   1406c:	mov	r1, fp
   14070:	str	r3, [sp, #36]	; 0x24
   14074:	mov	r0, r7
   14078:	ldr	r3, [r5, #44]	; 0x2c
   1407c:	str	r3, [sp, #16]
   14080:	ldr	r3, [r5, #40]	; 0x28
   14084:	str	r3, [sp, #12]
   14088:	add	r3, r5, #8
   1408c:	str	r3, [sp, #8]
   14090:	ldr	r3, [sp, #28]
   14094:	str	r3, [sp, #4]
   14098:	ldr	r3, [r5]
   1409c:	str	r3, [sp]
   140a0:	mov	r3, r9
   140a4:	bl	1329c <__assert_fail@plt+0x1db4>
   140a8:	cmp	fp, r0
   140ac:	bhi	14114 <__assert_fail@plt+0x2c2c>
   140b0:	ldr	r3, [pc, #120]	; 14130 <__assert_fail@plt+0x2c48>
   140b4:	add	fp, r0, #1
   140b8:	str	fp, [r4, r6, lsl #3]
   140bc:	cmp	r7, r3
   140c0:	beq	140cc <__assert_fail@plt+0x2be4>
   140c4:	mov	r0, r7
   140c8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   140cc:	mov	r0, fp
   140d0:	bl	1fca0 <__assert_fail@plt+0xe7b8>
   140d4:	ldr	r3, [r5, #44]	; 0x2c
   140d8:	mov	r2, r8
   140dc:	mov	r1, fp
   140e0:	str	r0, [sl, #4]
   140e4:	mov	r7, r0
   140e8:	str	r3, [sp, #16]
   140ec:	ldr	r3, [r5, #40]	; 0x28
   140f0:	str	r3, [sp, #12]
   140f4:	add	r3, r5, #8
   140f8:	str	r3, [sp, #8]
   140fc:	ldr	r3, [sp, #28]
   14100:	str	r3, [sp, #4]
   14104:	ldr	r3, [r5]
   14108:	str	r3, [sp]
   1410c:	mov	r3, r9
   14110:	bl	1329c <__assert_fail@plt+0x1db4>
   14114:	ldr	r3, [sp, #24]
   14118:	mov	r0, r7
   1411c:	ldr	r2, [sp, #32]
   14120:	str	r2, [r3]
   14124:	add	sp, sp, #52	; 0x34
   14128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412c:	andeq	r2, r3, r0, asr r1
   14130:	andeq	r2, r3, r0, asr #3
   14134:	push	{r4, r5, r6, lr}
   14138:	mov	r5, r0
   1413c:	bl	113c8 <__errno_location@plt>
   14140:	mov	r4, r0
   14144:	cmp	r5, #0
   14148:	ldr	r0, [pc, #20]	; 14164 <__assert_fail@plt+0x2c7c>
   1414c:	mov	r1, #48	; 0x30
   14150:	movne	r0, r5
   14154:	ldr	r6, [r4]
   14158:	bl	1fea0 <__assert_fail@plt+0xe9b8>
   1415c:	str	r6, [r4]
   14160:	pop	{r4, r5, r6, pc}
   14164:	andeq	r2, r3, r0, asr #5
   14168:	ldr	r3, [pc, #12]	; 1417c <__assert_fail@plt+0x2c94>
   1416c:	cmp	r0, #0
   14170:	moveq	r0, r3
   14174:	ldr	r0, [r0]
   14178:	bx	lr
   1417c:	andeq	r2, r3, r0, asr #5
   14180:	ldr	r3, [pc, #12]	; 14194 <__assert_fail@plt+0x2cac>
   14184:	cmp	r0, #0
   14188:	moveq	r0, r3
   1418c:	str	r1, [r0]
   14190:	bx	lr
   14194:	andeq	r2, r3, r0, asr #5
   14198:	ldr	r3, [pc, #52]	; 141d4 <__assert_fail@plt+0x2cec>
   1419c:	cmp	r0, #0
   141a0:	push	{lr}		; (str lr, [sp, #-4]!)
   141a4:	lsr	lr, r1, #5
   141a8:	and	r1, r1, #31
   141ac:	moveq	r0, r3
   141b0:	add	r3, r0, #8
   141b4:	ldr	ip, [r3, lr, lsl #2]
   141b8:	lsr	r0, ip, r1
   141bc:	eor	r2, r2, r0
   141c0:	and	r0, r0, #1
   141c4:	and	r2, r2, #1
   141c8:	eor	r1, ip, r2, lsl r1
   141cc:	str	r1, [r3, lr, lsl #2]
   141d0:	pop	{pc}		; (ldr pc, [sp], #4)
   141d4:	andeq	r2, r3, r0, asr #5
   141d8:	ldr	r3, [pc, #16]	; 141f0 <__assert_fail@plt+0x2d08>
   141dc:	cmp	r0, #0
   141e0:	movne	r3, r0
   141e4:	ldr	r0, [r3, #4]
   141e8:	str	r1, [r3, #4]
   141ec:	bx	lr
   141f0:	andeq	r2, r3, r0, asr #5
   141f4:	ldr	r3, [pc, #44]	; 14228 <__assert_fail@plt+0x2d40>
   141f8:	cmp	r0, #0
   141fc:	moveq	r0, r3
   14200:	mov	r3, #10
   14204:	cmp	r2, #0
   14208:	cmpne	r1, #0
   1420c:	str	r3, [r0]
   14210:	bne	1421c <__assert_fail@plt+0x2d34>
   14214:	push	{r4, lr}
   14218:	bl	114d0 <abort@plt>
   1421c:	str	r1, [r0, #40]	; 0x28
   14220:	str	r2, [r0, #44]	; 0x2c
   14224:	bx	lr
   14228:	andeq	r2, r3, r0, asr #5
   1422c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14230:	sub	sp, sp, #24
   14234:	mov	sl, r3
   14238:	mov	r7, r0
   1423c:	mov	r8, r1
   14240:	mov	r9, r2
   14244:	ldr	r4, [sp, #56]	; 0x38
   14248:	ldr	r3, [pc, #88]	; 142a8 <__assert_fail@plt+0x2dc0>
   1424c:	cmp	r4, #0
   14250:	moveq	r4, r3
   14254:	bl	113c8 <__errno_location@plt>
   14258:	ldr	r3, [r4, #44]	; 0x2c
   1425c:	mov	r5, r0
   14260:	mov	r2, r9
   14264:	mov	r1, r8
   14268:	mov	r0, r7
   1426c:	ldr	r6, [r5]
   14270:	str	r3, [sp, #16]
   14274:	ldr	r3, [r4, #40]	; 0x28
   14278:	str	r3, [sp, #12]
   1427c:	add	r3, r4, #8
   14280:	str	r3, [sp, #8]
   14284:	ldr	r3, [r4, #4]
   14288:	str	r3, [sp, #4]
   1428c:	ldr	r3, [r4]
   14290:	str	r3, [sp]
   14294:	mov	r3, sl
   14298:	bl	1329c <__assert_fail@plt+0x1db4>
   1429c:	str	r6, [r5]
   142a0:	add	sp, sp, #24
   142a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142a8:	andeq	r2, r3, r0, asr #5
   142ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142b0:	cmp	r3, #0
   142b4:	sub	sp, sp, #44	; 0x2c
   142b8:	mov	r6, r2
   142bc:	mov	sl, r1
   142c0:	mov	r9, r0
   142c4:	ldr	r4, [pc, #176]	; 1437c <__assert_fail@plt+0x2e94>
   142c8:	movne	r4, r3
   142cc:	bl	113c8 <__errno_location@plt>
   142d0:	ldr	r3, [r0]
   142d4:	mov	r1, #0
   142d8:	mov	r2, r9
   142dc:	mov	r8, r0
   142e0:	mov	r0, r1
   142e4:	ldr	r5, [r4, #4]
   142e8:	add	fp, r4, #8
   142ec:	str	r3, [sp, #28]
   142f0:	ldr	r3, [r4, #44]	; 0x2c
   142f4:	cmp	r6, #0
   142f8:	orreq	r5, r5, #1
   142fc:	str	r3, [sp, #16]
   14300:	ldr	r3, [r4, #40]	; 0x28
   14304:	stmib	sp, {r5, fp}
   14308:	str	r3, [sp, #12]
   1430c:	ldr	r3, [r4]
   14310:	str	r3, [sp]
   14314:	mov	r3, sl
   14318:	bl	1329c <__assert_fail@plt+0x1db4>
   1431c:	add	r1, r0, #1
   14320:	mov	r7, r0
   14324:	mov	r0, r1
   14328:	str	r1, [sp, #36]	; 0x24
   1432c:	bl	1fca0 <__assert_fail@plt+0xe7b8>
   14330:	ldr	r3, [r4, #44]	; 0x2c
   14334:	mov	r2, r9
   14338:	ldr	r1, [sp, #36]	; 0x24
   1433c:	str	r3, [sp, #16]
   14340:	ldr	r3, [r4, #40]	; 0x28
   14344:	stmib	sp, {r5, fp}
   14348:	str	r0, [sp, #32]
   1434c:	str	r3, [sp, #12]
   14350:	ldr	r3, [r4]
   14354:	str	r3, [sp]
   14358:	mov	r3, sl
   1435c:	bl	1329c <__assert_fail@plt+0x1db4>
   14360:	ldr	r3, [sp, #28]
   14364:	cmp	r6, #0
   14368:	ldr	r0, [sp, #32]
   1436c:	str	r3, [r8]
   14370:	strne	r7, [r6]
   14374:	add	sp, sp, #44	; 0x2c
   14378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1437c:	andeq	r2, r3, r0, asr #5
   14380:	mov	r3, r2
   14384:	mov	r2, #0
   14388:	b	142ac <__assert_fail@plt+0x2dc4>
   1438c:	push	{r4, r5, r6, r7, r8, lr}
   14390:	mov	r6, #1
   14394:	ldr	r4, [pc, #100]	; 14400 <__assert_fail@plt+0x2f18>
   14398:	ldr	r5, [r4]
   1439c:	add	r7, r5, #4
   143a0:	ldr	r3, [r4, #4]
   143a4:	cmp	r3, r6
   143a8:	bgt	143f0 <__assert_fail@plt+0x2f08>
   143ac:	ldr	r6, [pc, #80]	; 14404 <__assert_fail@plt+0x2f1c>
   143b0:	ldr	r0, [r5, #4]
   143b4:	cmp	r0, r6
   143b8:	beq	143cc <__assert_fail@plt+0x2ee4>
   143bc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   143c0:	mov	r3, #256	; 0x100
   143c4:	str	r3, [r4, #8]
   143c8:	str	r6, [r4, #12]
   143cc:	ldr	r6, [pc, #52]	; 14408 <__assert_fail@plt+0x2f20>
   143d0:	cmp	r5, r6
   143d4:	beq	143e4 <__assert_fail@plt+0x2efc>
   143d8:	mov	r0, r5
   143dc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   143e0:	str	r6, [r4]
   143e4:	mov	r3, #1
   143e8:	str	r3, [r4, #4]
   143ec:	pop	{r4, r5, r6, r7, r8, pc}
   143f0:	ldr	r0, [r7, r6, lsl #3]
   143f4:	add	r6, r6, #1
   143f8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   143fc:	b	143a0 <__assert_fail@plt+0x2eb8>
   14400:	andeq	r2, r3, r0, asr r1
   14404:	andeq	r2, r3, r0, asr #3
   14408:	andeq	r2, r3, r8, asr r1
   1440c:	ldr	r3, [pc, #4]	; 14418 <__assert_fail@plt+0x2f30>
   14410:	mvn	r2, #0
   14414:	b	13f8c <__assert_fail@plt+0x2aa4>
   14418:	andeq	r2, r3, r0, asr #5
   1441c:	ldr	r3, [pc]	; 14424 <__assert_fail@plt+0x2f3c>
   14420:	b	13f8c <__assert_fail@plt+0x2aa4>
   14424:	andeq	r2, r3, r0, asr #5
   14428:	mov	r1, r0
   1442c:	mov	r0, #0
   14430:	b	1440c <__assert_fail@plt+0x2f24>
   14434:	mov	r2, r1
   14438:	mov	r1, r0
   1443c:	mov	r0, #0
   14440:	b	1441c <__assert_fail@plt+0x2f34>
   14444:	push	{r4, r5, lr}
   14448:	sub	sp, sp, #52	; 0x34
   1444c:	mov	r5, r2
   14450:	mov	r4, r0
   14454:	mov	r0, sp
   14458:	bl	13140 <__assert_fail@plt+0x1c58>
   1445c:	mov	r3, sp
   14460:	mvn	r2, #0
   14464:	mov	r1, r5
   14468:	mov	r0, r4
   1446c:	bl	13f8c <__assert_fail@plt+0x2aa4>
   14470:	add	sp, sp, #52	; 0x34
   14474:	pop	{r4, r5, pc}
   14478:	push	{r4, r5, r6, lr}
   1447c:	sub	sp, sp, #48	; 0x30
   14480:	mov	r5, r2
   14484:	mov	r6, r3
   14488:	mov	r4, r0
   1448c:	mov	r0, sp
   14490:	bl	13140 <__assert_fail@plt+0x1c58>
   14494:	mov	r3, sp
   14498:	mov	r2, r6
   1449c:	mov	r1, r5
   144a0:	mov	r0, r4
   144a4:	bl	13f8c <__assert_fail@plt+0x2aa4>
   144a8:	add	sp, sp, #48	; 0x30
   144ac:	pop	{r4, r5, r6, pc}
   144b0:	mov	r2, r1
   144b4:	mov	r1, r0
   144b8:	mov	r0, #0
   144bc:	b	14444 <__assert_fail@plt+0x2f5c>
   144c0:	mov	r3, r2
   144c4:	mov	r2, r1
   144c8:	mov	r1, r0
   144cc:	mov	r0, #0
   144d0:	b	14478 <__assert_fail@plt+0x2f90>
   144d4:	push	{r4, r5, r6, lr}
   144d8:	mov	r4, r0
   144dc:	mov	r5, r1
   144e0:	mov	r6, r2
   144e4:	sub	sp, sp, #48	; 0x30
   144e8:	mov	ip, sp
   144ec:	ldr	lr, [pc, #64]	; 14534 <__assert_fail@plt+0x304c>
   144f0:	ldm	lr!, {r0, r1, r2, r3}
   144f4:	stmia	ip!, {r0, r1, r2, r3}
   144f8:	ldm	lr!, {r0, r1, r2, r3}
   144fc:	stmia	ip!, {r0, r1, r2, r3}
   14500:	ldm	lr, {r0, r1, r2, r3}
   14504:	stm	ip, {r0, r1, r2, r3}
   14508:	mov	r1, r6
   1450c:	mov	r2, #1
   14510:	mov	r0, sp
   14514:	bl	14198 <__assert_fail@plt+0x2cb0>
   14518:	mov	r3, sp
   1451c:	mov	r2, r5
   14520:	mov	r1, r4
   14524:	mov	r0, #0
   14528:	bl	13f8c <__assert_fail@plt+0x2aa4>
   1452c:	add	sp, sp, #48	; 0x30
   14530:	pop	{r4, r5, r6, pc}
   14534:	andeq	r2, r3, r0, asr #5
   14538:	mov	r2, r1
   1453c:	mvn	r1, #0
   14540:	b	144d4 <__assert_fail@plt+0x2fec>
   14544:	mov	r1, #58	; 0x3a
   14548:	b	14538 <__assert_fail@plt+0x3050>
   1454c:	mov	r2, #58	; 0x3a
   14550:	b	144d4 <__assert_fail@plt+0x2fec>
   14554:	push	{r4, r5, lr}
   14558:	sub	sp, sp, #100	; 0x64
   1455c:	mov	r4, r0
   14560:	mov	r0, sp
   14564:	mov	r5, r2
   14568:	bl	13140 <__assert_fail@plt+0x1c58>
   1456c:	mov	ip, sp
   14570:	add	lr, sp, #48	; 0x30
   14574:	ldm	ip!, {r0, r1, r2, r3}
   14578:	stmia	lr!, {r0, r1, r2, r3}
   1457c:	ldm	ip!, {r0, r1, r2, r3}
   14580:	stmia	lr!, {r0, r1, r2, r3}
   14584:	ldm	ip, {r0, r1, r2, r3}
   14588:	stm	lr, {r0, r1, r2, r3}
   1458c:	mov	r2, #1
   14590:	mov	r1, #58	; 0x3a
   14594:	add	r0, sp, #48	; 0x30
   14598:	bl	14198 <__assert_fail@plt+0x2cb0>
   1459c:	add	r3, sp, #48	; 0x30
   145a0:	mvn	r2, #0
   145a4:	mov	r1, r5
   145a8:	mov	r0, r4
   145ac:	bl	13f8c <__assert_fail@plt+0x2aa4>
   145b0:	add	sp, sp, #100	; 0x64
   145b4:	pop	{r4, r5, pc}
   145b8:	push	{r4, r5, r6, r7, lr}
   145bc:	mov	r4, r0
   145c0:	mov	r6, r1
   145c4:	mov	r7, r2
   145c8:	mov	r5, r3
   145cc:	sub	sp, sp, #52	; 0x34
   145d0:	ldr	lr, [pc, #68]	; 1461c <__assert_fail@plt+0x3134>
   145d4:	mov	ip, sp
   145d8:	ldm	lr!, {r0, r1, r2, r3}
   145dc:	stmia	ip!, {r0, r1, r2, r3}
   145e0:	ldm	lr!, {r0, r1, r2, r3}
   145e4:	stmia	ip!, {r0, r1, r2, r3}
   145e8:	ldm	lr, {r0, r1, r2, r3}
   145ec:	stm	ip, {r0, r1, r2, r3}
   145f0:	mov	r2, r7
   145f4:	mov	r1, r6
   145f8:	mov	r0, sp
   145fc:	bl	141f4 <__assert_fail@plt+0x2d0c>
   14600:	ldr	r2, [sp, #72]	; 0x48
   14604:	mov	r3, sp
   14608:	mov	r1, r5
   1460c:	mov	r0, r4
   14610:	bl	13f8c <__assert_fail@plt+0x2aa4>
   14614:	add	sp, sp, #52	; 0x34
   14618:	pop	{r4, r5, r6, r7, pc}
   1461c:	andeq	r2, r3, r0, asr #5
   14620:	mvn	ip, #0
   14624:	push	{r0, r1, r2, lr}
   14628:	str	ip, [sp]
   1462c:	bl	145b8 <__assert_fail@plt+0x30d0>
   14630:	add	sp, sp, #12
   14634:	pop	{pc}		; (ldr pc, [sp], #4)
   14638:	mov	r3, r2
   1463c:	mov	r2, r1
   14640:	mov	r1, r0
   14644:	mov	r0, #0
   14648:	b	14620 <__assert_fail@plt+0x3138>
   1464c:	push	{r0, r1, r2, lr}
   14650:	str	r3, [sp]
   14654:	mov	r3, r2
   14658:	mov	r2, r1
   1465c:	mov	r1, r0
   14660:	mov	r0, #0
   14664:	bl	145b8 <__assert_fail@plt+0x30d0>
   14668:	add	sp, sp, #12
   1466c:	pop	{pc}		; (ldr pc, [sp], #4)
   14670:	ldr	r3, [pc]	; 14678 <__assert_fail@plt+0x3190>
   14674:	b	13f8c <__assert_fail@plt+0x2aa4>
   14678:	andeq	r2, r3, r0, ror #2
   1467c:	mov	r2, r1
   14680:	mov	r1, r0
   14684:	mov	r0, #0
   14688:	b	14670 <__assert_fail@plt+0x3188>
   1468c:	mvn	r2, #0
   14690:	b	14670 <__assert_fail@plt+0x3188>
   14694:	mov	r1, r0
   14698:	mov	r0, #0
   1469c:	b	1468c <__assert_fail@plt+0x31a4>
   146a0:	cmp	r1, #0
   146a4:	add	r3, r1, #31
   146a8:	movge	r3, r1
   146ac:	rsbs	r2, r1, #0
   146b0:	asr	r3, r3, #5
   146b4:	and	r2, r2, #31
   146b8:	and	r1, r1, #31
   146bc:	rsbpl	r1, r2, #0
   146c0:	mov	ip, #1
   146c4:	ldr	r2, [r0, r3, lsl #2]
   146c8:	orr	r1, r2, ip, lsl r1
   146cc:	str	r1, [r0, r3, lsl #2]
   146d0:	bx	lr
   146d4:	asr	r3, r1, #5
   146d8:	and	r1, r1, #31
   146dc:	ldr	r0, [r0, r3, lsl #2]
   146e0:	lsr	r0, r0, r1
   146e4:	and	r0, r0, #1
   146e8:	bx	lr
   146ec:	sub	r3, r0, #4
   146f0:	add	r0, r0, #28
   146f4:	ldr	r2, [r3, #4]!
   146f8:	mvn	r2, r2
   146fc:	cmp	r3, r0
   14700:	str	r2, [r3]
   14704:	bne	146f4 <__assert_fail@plt+0x320c>
   14708:	bx	lr
   1470c:	sub	r3, r0, #4
   14710:	sub	r1, r1, #4
   14714:	add	r0, r0, #28
   14718:	ldr	r2, [r3, #4]!
   1471c:	ldr	ip, [r1, #4]!
   14720:	cmp	r3, r0
   14724:	orr	r2, r2, ip
   14728:	str	r2, [r3]
   1472c:	bne	14718 <__assert_fail@plt+0x3230>
   14730:	bx	lr
   14734:	sub	r3, r0, #4
   14738:	sub	r1, r1, #4
   1473c:	add	r0, r0, #28
   14740:	ldr	r2, [r3, #4]!
   14744:	ldr	ip, [r1, #4]!
   14748:	cmp	r3, r0
   1474c:	and	r2, r2, ip
   14750:	str	r2, [r3]
   14754:	bne	14740 <__assert_fail@plt+0x3258>
   14758:	bx	lr
   1475c:	ldr	r3, [r0, #80]	; 0x50
   14760:	cmp	r3, #1
   14764:	ldreq	r3, [r0, #4]
   14768:	ldrne	r3, [r0, #8]
   1476c:	ldrbeq	r0, [r3, r1]
   14770:	ldrne	r0, [r3, r1, lsl #2]
   14774:	bx	lr
   14778:	ldr	r3, [r0, #36]	; 0x24
   1477c:	ldr	r2, [r0, #48]	; 0x30
   14780:	cmp	r3, r2
   14784:	movlt	r2, r3
   14788:	ldr	r3, [r0, #28]
   1478c:	cmp	r3, r2
   14790:	blt	147a0 <__assert_fail@plt+0x32b8>
   14794:	str	r3, [r0, #28]
   14798:	str	r3, [r0, #32]
   1479c:	bx	lr
   147a0:	ldr	r1, [r0]
   147a4:	ldr	ip, [r0, #24]
   147a8:	add	r1, r1, r3
   147ac:	ldrb	r1, [r1, ip]
   147b0:	ldr	ip, [r0, #64]	; 0x40
   147b4:	ldrb	ip, [ip, r1]
   147b8:	ldr	r1, [r0, #4]
   147bc:	strb	ip, [r1, r3]
   147c0:	add	r3, r3, #1
   147c4:	b	1478c <__assert_fail@plt+0x32a4>
   147c8:	mov	r2, r1
   147cc:	clz	r1, r1
   147d0:	lsr	r1, r1, #5
   147d4:	cmp	r0, #0
   147d8:	moveq	r1, #1
   147dc:	cmp	r1, #0
   147e0:	bne	14804 <__assert_fail@plt+0x331c>
   147e4:	ldr	r3, [r0, #4]
   147e8:	ldr	ip, [r2, #4]
   147ec:	cmp	r3, ip
   147f0:	bne	14808 <__assert_fail@plt+0x3320>
   147f4:	subs	r3, r3, #1
   147f8:	bpl	14810 <__assert_fail@plt+0x3328>
   147fc:	mov	r1, #1
   14800:	b	14808 <__assert_fail@plt+0x3320>
   14804:	mov	r1, #0
   14808:	mov	r0, r1
   1480c:	bx	lr
   14810:	push	{lr}		; (str lr, [sp, #-4]!)
   14814:	ldr	lr, [r0, #8]
   14818:	ldr	ip, [r2, #8]
   1481c:	ldr	lr, [lr, r3, lsl #2]
   14820:	ldr	ip, [ip, r3, lsl #2]
   14824:	cmp	lr, ip
   14828:	bne	14838 <__assert_fail@plt+0x3350>
   1482c:	subs	r3, r3, #1
   14830:	bpl	14814 <__assert_fail@plt+0x332c>
   14834:	mov	r1, #1
   14838:	mov	r0, r1
   1483c:	pop	{pc}		; (ldr pc, [sp], #4)
   14840:	ldr	r3, [r0, #4]
   14844:	cmp	r3, #0
   14848:	ble	14874 <__assert_fail@plt+0x338c>
   1484c:	sub	r3, r3, #1
   14850:	ldr	ip, [r0, #8]
   14854:	mov	r0, #0
   14858:	cmp	r0, r3
   1485c:	bcc	1487c <__assert_fail@plt+0x3394>
   14860:	ldr	r3, [ip, r0, lsl #2]
   14864:	cmp	r3, r1
   14868:	bne	14874 <__assert_fail@plt+0x338c>
   1486c:	add	r0, r0, #1
   14870:	bx	lr
   14874:	mov	r0, #0
   14878:	bx	lr
   1487c:	push	{lr}		; (str lr, [sp, #-4]!)
   14880:	add	r2, r0, r3
   14884:	lsr	r2, r2, #1
   14888:	ldr	lr, [ip, r2, lsl #2]
   1488c:	cmp	lr, r1
   14890:	addlt	r0, r2, #1
   14894:	movge	r3, r2
   14898:	cmp	r0, r3
   1489c:	bcc	14880 <__assert_fail@plt+0x3398>
   148a0:	ldr	r3, [ip, r0, lsl #2]
   148a4:	cmp	r3, r1
   148a8:	addeq	r0, r0, #1
   148ac:	movne	r0, #0
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	push	{r4, r5, r6, lr}
   148b8:	mov	r4, r0
   148bc:	mov	r5, r1
   148c0:	mov	r6, r2
   148c4:	ldr	r3, [r4, #4]
   148c8:	cmp	r3, #0
   148cc:	bne	14924 <__assert_fail@plt+0x343c>
   148d0:	ldr	r3, [r4, #8]
   148d4:	cmp	r3, #0
   148d8:	bne	14924 <__assert_fail@plt+0x343c>
   148dc:	mov	r1, r4
   148e0:	mov	r0, r6
   148e4:	blx	r5
   148e8:	cmp	r0, #0
   148ec:	popne	{r4, r5, r6, pc}
   148f0:	ldr	r1, [r4]
   148f4:	cmp	r1, #0
   148f8:	popeq	{r4, r5, r6, pc}
   148fc:	ldr	r3, [r1, #8]
   14900:	sub	r4, r3, r4
   14904:	cmp	r3, #0
   14908:	clz	r4, r4
   1490c:	moveq	r2, #1
   14910:	lsr	r4, r4, #5
   14914:	movne	r2, r4
   14918:	mov	r4, r1
   1491c:	cmp	r2, #0
   14920:	bne	148dc <__assert_fail@plt+0x33f4>
   14924:	mov	r4, r3
   14928:	b	148c4 <__assert_fail@plt+0x33dc>
   1492c:	ldr	r3, [r1, #40]	; 0x28
   14930:	ldr	ip, [r1, #56]	; 0x38
   14934:	cmp	ip, r3
   14938:	bgt	14950 <__assert_fail@plt+0x3468>
   1493c:	mov	r3, #2
   14940:	strb	r3, [r0, #4]
   14944:	mov	r3, #0
   14948:	mov	r0, r3
   1494c:	bx	lr
   14950:	push	{r4, lr}
   14954:	ldr	lr, [r1, #4]
   14958:	ldr	r4, [r1, #80]	; 0x50
   1495c:	ldrb	ip, [lr, r3]
   14960:	cmp	r4, #1
   14964:	strb	ip, [r0]
   14968:	ble	14994 <__assert_fail@plt+0x34ac>
   1496c:	ldr	r4, [r1, #28]
   14970:	cmp	r3, r4
   14974:	beq	14994 <__assert_fail@plt+0x34ac>
   14978:	ldr	r4, [r1, #8]
   1497c:	ldr	r4, [r4, r3, lsl #2]
   14980:	cmn	r4, #1
   14984:	bne	14994 <__assert_fail@plt+0x34ac>
   14988:	mov	r3, #1
   1498c:	strb	r3, [r0, #4]
   14990:	b	14a20 <__assert_fail@plt+0x3538>
   14994:	cmp	ip, #92	; 0x5c
   14998:	bne	149c0 <__assert_fail@plt+0x34d8>
   1499c:	tst	r2, #1
   149a0:	beq	14988 <__assert_fail@plt+0x34a0>
   149a4:	ldr	r2, [r1, #48]	; 0x30
   149a8:	add	r3, r3, #1
   149ac:	cmp	r3, r2
   149b0:	strlt	r3, [r1, #40]	; 0x28
   149b4:	ldrblt	r3, [lr, r3]
   149b8:	strblt	r3, [r0]
   149bc:	b	14988 <__assert_fail@plt+0x34a0>
   149c0:	cmp	ip, #91	; 0x5b
   149c4:	bne	14a38 <__assert_fail@plt+0x3550>
   149c8:	ldr	r1, [r1, #48]	; 0x30
   149cc:	add	ip, r3, #1
   149d0:	cmp	ip, r1
   149d4:	bge	14a00 <__assert_fail@plt+0x3518>
   149d8:	add	r3, lr, r3
   149dc:	ldrb	r3, [r3, #1]
   149e0:	cmp	r3, #58	; 0x3a
   149e4:	strb	r3, [r0]
   149e8:	beq	14a28 <__assert_fail@plt+0x3540>
   149ec:	cmp	r3, #61	; 0x3d
   149f0:	beq	14a14 <__assert_fail@plt+0x352c>
   149f4:	cmp	r3, #46	; 0x2e
   149f8:	moveq	r3, #26
   149fc:	beq	14a18 <__assert_fail@plt+0x3530>
   14a00:	mov	r3, #1
   14a04:	mov	r2, #91	; 0x5b
   14a08:	strb	r2, [r0]
   14a0c:	strb	r3, [r0, #4]
   14a10:	b	14a20 <__assert_fail@plt+0x3538>
   14a14:	mov	r3, #28
   14a18:	strb	r3, [r0, #4]
   14a1c:	mov	r3, #2
   14a20:	mov	r0, r3
   14a24:	pop	{r4, pc}
   14a28:	tst	r2, #4
   14a2c:	beq	14a00 <__assert_fail@plt+0x3518>
   14a30:	mov	r3, #30
   14a34:	b	14a18 <__assert_fail@plt+0x3530>
   14a38:	cmp	ip, #93	; 0x5d
   14a3c:	beq	14a64 <__assert_fail@plt+0x357c>
   14a40:	cmp	ip, #94	; 0x5e
   14a44:	moveq	r3, #25
   14a48:	beq	14a58 <__assert_fail@plt+0x3570>
   14a4c:	cmp	ip, #45	; 0x2d
   14a50:	moveq	r3, #22
   14a54:	bne	14988 <__assert_fail@plt+0x34a0>
   14a58:	strb	r3, [r0, #4]
   14a5c:	mov	r3, #1
   14a60:	b	14a20 <__assert_fail@plt+0x3538>
   14a64:	mov	r3, #21
   14a68:	b	14a58 <__assert_fail@plt+0x3570>
   14a6c:	ldrb	r3, [r1, #24]
   14a70:	cmp	r3, #17
   14a74:	bne	14a8c <__assert_fail@plt+0x35a4>
   14a78:	ldr	r3, [r1, #20]
   14a7c:	cmp	r0, r3
   14a80:	ldrbeq	r3, [r1, #26]
   14a84:	orreq	r3, r3, #8
   14a88:	strbeq	r3, [r1, #26]
   14a8c:	mov	r0, #0
   14a90:	bx	lr
   14a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	sub	sp, sp, #36	; 0x24
   14a9c:	mov	r6, r2
   14aa0:	mov	r9, #12
   14aa4:	mov	fp, r0
   14aa8:	mov	r4, r1
   14aac:	mov	r8, #0
   14ab0:	ldr	sl, [r0, #84]	; 0x54
   14ab4:	str	r3, [sp, #12]
   14ab8:	ldr	r2, [sp, #12]
   14abc:	ldr	r3, [sl, #24]
   14ac0:	mla	r9, r9, r2, r3
   14ac4:	mov	r3, #1
   14ac8:	ldr	r2, [sp, #72]	; 0x48
   14acc:	lsl	r3, r3, r6
   14ad0:	str	r3, [sp, #8]
   14ad4:	mvn	r3, r3
   14ad8:	str	r3, [sp, #20]
   14adc:	mov	r3, #24
   14ae0:	mla	r3, r2, r3, r3
   14ae4:	str	r3, [sp, #28]
   14ae8:	ldr	r3, [r9, #4]
   14aec:	cmp	r3, r8
   14af0:	asrle	r0, r4, #1
   14af4:	ble	14b98 <__assert_fail@plt+0x36b0>
   14af8:	ldr	r3, [r9, #8]
   14afc:	ldr	r7, [r3, r8, lsl #2]
   14b00:	ldr	r3, [sl]
   14b04:	add	r2, r3, r7, lsl #3
   14b08:	ldrb	r2, [r2, #4]
   14b0c:	cmp	r2, #8
   14b10:	beq	14c10 <__assert_fail@plt+0x3728>
   14b14:	cmp	r2, #9
   14b18:	beq	14c28 <__assert_fail@plt+0x3740>
   14b1c:	cmp	r2, #4
   14b20:	bne	14c08 <__assert_fail@plt+0x3720>
   14b24:	ldr	r3, [sp, #72]	; 0x48
   14b28:	cmn	r3, #1
   14b2c:	beq	14c08 <__assert_fail@plt+0x3720>
   14b30:	mov	r3, #12
   14b34:	ldr	r5, [fp, #116]	; 0x74
   14b38:	mul	r3, r3, r7
   14b3c:	str	r3, [sp, #16]
   14b40:	ldr	r3, [sp, #28]
   14b44:	add	r5, r5, r3
   14b48:	and	r3, r4, #2
   14b4c:	str	r3, [sp, #24]
   14b50:	ldr	r3, [r5, #-24]	; 0xffffffe8
   14b54:	cmp	r3, r7
   14b58:	bne	14bf8 <__assert_fail@plt+0x3710>
   14b5c:	cmp	r6, #31
   14b60:	bgt	14b74 <__assert_fail@plt+0x368c>
   14b64:	ldr	r3, [r5, #-8]
   14b68:	ldr	r2, [sp, #8]
   14b6c:	tst	r2, r3
   14b70:	beq	14bf8 <__assert_fail@plt+0x3710>
   14b74:	ldr	r2, [sp, #16]
   14b78:	ldr	r3, [sl, #20]
   14b7c:	add	r3, r3, r2
   14b80:	ldr	r2, [sp, #12]
   14b84:	ldr	r3, [r3, #8]
   14b88:	ldr	r3, [r3]
   14b8c:	cmp	r2, r3
   14b90:	bne	14ba0 <__assert_fail@plt+0x36b8>
   14b94:	sbfx	r0, r4, #0, #1
   14b98:	add	sp, sp, #36	; 0x24
   14b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba0:	ldr	r2, [sp, #72]	; 0x48
   14ba4:	mov	r1, r4
   14ba8:	mov	r0, fp
   14bac:	str	r2, [sp]
   14bb0:	mov	r2, r6
   14bb4:	bl	14a94 <__assert_fail@plt+0x35ac>
   14bb8:	cmn	r0, #1
   14bbc:	bne	14bc8 <__assert_fail@plt+0x36e0>
   14bc0:	mvn	r0, #0
   14bc4:	b	14b98 <__assert_fail@plt+0x36b0>
   14bc8:	cmp	r0, #0
   14bcc:	bne	14be4 <__assert_fail@plt+0x36fc>
   14bd0:	ldr	r3, [sp, #24]
   14bd4:	cmp	r3, #0
   14bd8:	beq	14be4 <__assert_fail@plt+0x36fc>
   14bdc:	mov	r0, #0
   14be0:	b	14b98 <__assert_fail@plt+0x36b0>
   14be4:	cmp	r6, #31
   14be8:	ldrle	r3, [r5, #-8]
   14bec:	ldrle	r2, [sp, #20]
   14bf0:	andle	r3, r3, r2
   14bf4:	strle	r3, [r5, #-8]
   14bf8:	add	r5, r5, #24
   14bfc:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   14c00:	cmp	r3, #0
   14c04:	bne	14b50 <__assert_fail@plt+0x3668>
   14c08:	add	r8, r8, #1
   14c0c:	b	14ae8 <__assert_fail@plt+0x3600>
   14c10:	tst	r4, #1
   14c14:	beq	14c08 <__assert_fail@plt+0x3720>
   14c18:	ldr	r3, [r3, r7, lsl #3]
   14c1c:	cmp	r3, r6
   14c20:	bne	14c08 <__assert_fail@plt+0x3720>
   14c24:	b	14bc0 <__assert_fail@plt+0x36d8>
   14c28:	tst	r4, #2
   14c2c:	beq	14c08 <__assert_fail@plt+0x3720>
   14c30:	ldr	r3, [r3, r7, lsl #3]
   14c34:	cmp	r3, r6
   14c38:	bne	14c08 <__assert_fail@plt+0x3720>
   14c3c:	b	14bdc <__assert_fail@plt+0x36f4>
   14c40:	push	{r4, r5, lr}
   14c44:	mov	lr, #24
   14c48:	ldr	r5, [r0, #116]	; 0x74
   14c4c:	ldr	ip, [sp, #12]
   14c50:	ldr	r4, [sp, #16]
   14c54:	mla	r1, lr, r1, r5
   14c58:	ldr	lr, [r1, #8]
   14c5c:	cmp	lr, ip
   14c60:	bgt	14c98 <__assert_fail@plt+0x37b0>
   14c64:	ldr	r1, [r1, #12]
   14c68:	cmp	r1, ip
   14c6c:	blt	14ca4 <__assert_fail@plt+0x37bc>
   14c70:	cmp	r1, ip
   14c74:	moveq	r1, #2
   14c78:	movne	r1, #0
   14c7c:	cmp	lr, ip
   14c80:	orreq	r1, r1, #1
   14c84:	cmp	r1, #0
   14c88:	beq	14c9c <__assert_fail@plt+0x37b4>
   14c8c:	str	r4, [sp, #12]
   14c90:	pop	{r4, r5, lr}
   14c94:	b	14a94 <__assert_fail@plt+0x35ac>
   14c98:	mvn	r1, #0
   14c9c:	mov	r0, r1
   14ca0:	pop	{r4, r5, pc}
   14ca4:	mov	r1, #1
   14ca8:	b	14c9c <__assert_fail@plt+0x37b4>
   14cac:	push	{r4, r5, lr}
   14cb0:	mov	r3, #0
   14cb4:	mov	r5, #24
   14cb8:	ldr	r4, [r0, #108]	; 0x6c
   14cbc:	mov	ip, r4
   14cc0:	cmp	ip, r3
   14cc4:	bgt	14cf4 <__assert_fail@plt+0x380c>
   14cc8:	cmp	r4, r3
   14ccc:	mvnle	r3, #0
   14cd0:	ble	14cec <__assert_fail@plt+0x3804>
   14cd4:	ldr	r0, [r0, #116]	; 0x74
   14cd8:	mov	r2, #24
   14cdc:	mla	r2, r2, r3, r0
   14ce0:	ldr	r2, [r2, #4]
   14ce4:	cmp	r2, r1
   14ce8:	mvnne	r3, #0
   14cec:	mov	r0, r3
   14cf0:	pop	{r4, r5, pc}
   14cf4:	ldr	lr, [r0, #116]	; 0x74
   14cf8:	add	r2, ip, r3
   14cfc:	asr	r2, r2, #1
   14d00:	mla	lr, r5, r2, lr
   14d04:	ldr	lr, [lr, #4]
   14d08:	cmp	lr, r1
   14d0c:	addlt	r3, r2, #1
   14d10:	movge	ip, r2
   14d14:	b	14cc0 <__assert_fail@plt+0x37d8>
   14d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d1c:	mov	r6, r1
   14d20:	sub	sp, sp, #20
   14d24:	mov	r1, r3
   14d28:	mov	r5, r0
   14d2c:	mov	sl, r2
   14d30:	mov	r7, r3
   14d34:	ldr	r9, [r0, #84]	; 0x54
   14d38:	mov	r4, #0
   14d3c:	bl	14cac <__assert_fail@plt+0x37c4>
   14d40:	str	r0, [sp, #8]
   14d44:	mov	r0, r5
   14d48:	ldr	r1, [sp, #60]	; 0x3c
   14d4c:	bl	14cac <__assert_fail@plt+0x37c4>
   14d50:	str	r0, [sp, #12]
   14d54:	ldr	r3, [r6, #4]
   14d58:	cmp	r3, r4
   14d5c:	bgt	14d6c <__assert_fail@plt+0x3884>
   14d60:	mov	r0, #0
   14d64:	add	sp, sp, #20
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	ldr	r3, [r6, #8]
   14d70:	mov	r0, r5
   14d74:	ldr	r2, [r5, #116]	; 0x74
   14d78:	ldr	r1, [r3, r4, lsl #2]
   14d7c:	mov	r3, #24
   14d80:	mul	r3, r3, r1
   14d84:	ldr	r2, [r2, r3]
   14d88:	ldr	r3, [r9]
   14d8c:	ldr	r8, [r3, r2, lsl #3]
   14d90:	str	r7, [sp]
   14d94:	ldr	r3, [sp, #8]
   14d98:	mov	r2, r8
   14d9c:	str	r3, [sp, #4]
   14da0:	mov	r3, sl
   14da4:	bl	14c40 <__assert_fail@plt+0x3758>
   14da8:	ldr	r3, [sp, #12]
   14dac:	mov	fp, r0
   14db0:	mov	r2, r8
   14db4:	mov	r0, r5
   14db8:	ldr	r1, [r6, #8]
   14dbc:	str	r3, [sp, #4]
   14dc0:	ldr	r3, [sp, #60]	; 0x3c
   14dc4:	str	r3, [sp]
   14dc8:	ldr	r1, [r1, r4, lsl #2]
   14dcc:	ldr	r3, [sp, #56]	; 0x38
   14dd0:	bl	14c40 <__assert_fail@plt+0x3758>
   14dd4:	cmp	fp, r0
   14dd8:	addeq	r4, r4, #1
   14ddc:	beq	14d54 <__assert_fail@plt+0x386c>
   14de0:	mov	r0, #1
   14de4:	b	14d64 <__assert_fail@plt+0x387c>
   14de8:	ldr	r3, [r0, #80]	; 0x50
   14dec:	push	{r4, r5, r6, lr}
   14df0:	mov	r4, r0
   14df4:	mov	r5, r1
   14df8:	cmp	r3, #1
   14dfc:	ble	14e4c <__assert_fail@plt+0x3964>
   14e00:	cmn	r1, #-1073741823	; 0xc0000001
   14e04:	bls	14e10 <__assert_fail@plt+0x3928>
   14e08:	mov	r0, #12
   14e0c:	pop	{r4, r5, r6, pc}
   14e10:	lsl	r6, r1, #2
   14e14:	ldr	r0, [r0, #8]
   14e18:	mov	r1, r6
   14e1c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   14e20:	cmp	r0, #0
   14e24:	beq	14e08 <__assert_fail@plt+0x3920>
   14e28:	str	r0, [r4, #8]
   14e2c:	ldr	r0, [r4, #12]
   14e30:	cmp	r0, #0
   14e34:	beq	14e4c <__assert_fail@plt+0x3964>
   14e38:	mov	r1, r6
   14e3c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   14e40:	cmp	r0, #0
   14e44:	beq	14e08 <__assert_fail@plt+0x3920>
   14e48:	str	r0, [r4, #12]
   14e4c:	ldrb	r3, [r4, #75]	; 0x4b
   14e50:	cmp	r3, #0
   14e54:	beq	14e70 <__assert_fail@plt+0x3988>
   14e58:	mov	r1, r5
   14e5c:	ldr	r0, [r4, #4]
   14e60:	bl	1fff0 <__assert_fail@plt+0xeb08>
   14e64:	cmp	r0, #0
   14e68:	beq	14e08 <__assert_fail@plt+0x3920>
   14e6c:	str	r0, [r4, #4]
   14e70:	mov	r0, #0
   14e74:	str	r5, [r4, #36]	; 0x24
   14e78:	pop	{r4, r5, r6, pc}
   14e7c:	push	{r4, r5, r6, lr}
   14e80:	mov	r5, r1
   14e84:	mov	r4, r0
   14e88:	ldm	r0, {r1, r3}
   14e8c:	cmp	r1, r3
   14e90:	bne	14eb8 <__assert_fail@plt+0x39d0>
   14e94:	add	r1, r1, #1
   14e98:	ldr	r0, [r0, #8]
   14e9c:	lsl	r3, r1, #1
   14ea0:	lsl	r1, r1, #3
   14ea4:	str	r3, [r4]
   14ea8:	bl	1fff0 <__assert_fail@plt+0xeb08>
   14eac:	cmp	r0, #0
   14eb0:	popeq	{r4, r5, r6, pc}
   14eb4:	str	r0, [r4, #8]
   14eb8:	ldr	r3, [r4, #4]
   14ebc:	mov	r0, #1
   14ec0:	ldr	r2, [r4, #8]
   14ec4:	add	r1, r3, #1
   14ec8:	str	r1, [r4, #4]
   14ecc:	str	r5, [r2, r3, lsl #2]
   14ed0:	pop	{r4, r5, r6, pc}
   14ed4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ed8:	mov	r9, r3
   14edc:	mov	r4, r0
   14ee0:	mov	r7, r1
   14ee4:	mov	r8, r2
   14ee8:	ldr	r3, [r0, #64]	; 0x40
   14eec:	cmp	r3, #31
   14ef0:	bne	14f18 <__assert_fail@plt+0x3a30>
   14ef4:	mov	r0, #996	; 0x3e4
   14ef8:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   14efc:	subs	r5, r0, #0
   14f00:	beq	14f80 <__assert_fail@plt+0x3a98>
   14f04:	ldr	r3, [r4, #56]	; 0x38
   14f08:	str	r0, [r4, #56]	; 0x38
   14f0c:	str	r3, [r0]
   14f10:	mov	r3, #0
   14f14:	str	r3, [r4, #64]	; 0x40
   14f18:	ldr	r6, [r4, #56]	; 0x38
   14f1c:	mov	r2, #0
   14f20:	cmp	r7, r2
   14f24:	ldr	ip, [r4, #64]	; 0x40
   14f28:	add	r3, ip, #1
   14f2c:	lsl	ip, ip, #5
   14f30:	add	lr, r6, ip
   14f34:	str	r3, [r4, #64]	; 0x40
   14f38:	add	r5, ip, #4
   14f3c:	add	r3, lr, #24
   14f40:	add	ip, ip, #16
   14f44:	stmib	lr, {r2, r7, r8}
   14f48:	add	ip, r6, ip
   14f4c:	add	r5, r6, r5
   14f50:	ldm	r9, {r0, r1}
   14f54:	stm	r3, {r0, r1}
   14f58:	ldrb	r3, [ip, #14]
   14f5c:	bic	r3, r3, #12
   14f60:	strb	r3, [ip, #14]
   14f64:	mvn	r3, #0
   14f68:	str	r2, [lr, #16]
   14f6c:	str	r2, [lr, #20]
   14f70:	str	r3, [lr, #32]
   14f74:	strne	r5, [r7]
   14f78:	cmp	r8, #0
   14f7c:	strne	r5, [r8]
   14f80:	mov	r0, r5
   14f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f88:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14f8c:	mov	r5, r0
   14f90:	mov	r7, r1
   14f94:	add	r6, sp, #4
   14f98:	ldr	r4, [r0]
   14f9c:	mov	r2, #0
   14fa0:	add	r3, r5, #20
   14fa4:	mov	r1, r2
   14fa8:	mov	r0, r7
   14fac:	bl	14ed4 <__assert_fail@plt+0x39ec>
   14fb0:	cmp	r0, #0
   14fb4:	str	r0, [r6]
   14fb8:	beq	15018 <__assert_fail@plt+0x3b30>
   14fbc:	str	r4, [r0]
   14fc0:	ldr	r4, [r6]
   14fc4:	ldrb	r3, [r4, #26]
   14fc8:	orr	r3, r3, #4
   14fcc:	strb	r3, [r4, #26]
   14fd0:	ldr	r3, [r5, #4]
   14fd4:	cmp	r3, #0
   14fd8:	addne	r6, r4, #4
   14fdc:	bne	14ff8 <__assert_fail@plt+0x3b10>
   14fe0:	ldr	r2, [r5, #8]
   14fe4:	cmp	r2, r3
   14fe8:	cmpne	r2, #0
   14fec:	beq	15000 <__assert_fail@plt+0x3b18>
   14ff0:	add	r6, r4, #8
   14ff4:	mov	r3, r2
   14ff8:	mov	r5, r3
   14ffc:	b	14f9c <__assert_fail@plt+0x3ab4>
   15000:	ldr	r2, [r5]
   15004:	mov	r3, r5
   15008:	ldr	r4, [r4]
   1500c:	cmp	r2, #0
   15010:	bne	15020 <__assert_fail@plt+0x3b38>
   15014:	ldr	r0, [sp, #4]
   15018:	add	sp, sp, #12
   1501c:	pop	{r4, r5, r6, r7, pc}
   15020:	mov	r5, r2
   15024:	b	14fe0 <__assert_fail@plt+0x3af8>
   15028:	push	{r0, r1, r2, r4, r5, lr}
   1502c:	mov	r4, #0
   15030:	mov	r5, #0
   15034:	strd	r4, [sp]
   15038:	strb	r3, [sp, #4]
   1503c:	mov	r3, sp
   15040:	bl	14ed4 <__assert_fail@plt+0x39ec>
   15044:	add	sp, sp, #12
   15048:	pop	{r4, r5, pc}
   1504c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15050:	ldr	r4, [r2, #4]
   15054:	ldr	r9, [r1]
   15058:	ldrb	r1, [r1, #28]
   1505c:	adds	r3, r4, #0
   15060:	movne	r3, #1
   15064:	ands	r3, r3, r1, lsr #4
   15068:	beq	15088 <__assert_fail@plt+0x3ba0>
   1506c:	ldr	r1, [r2, #20]
   15070:	cmp	r1, #31
   15074:	bgt	15120 <__assert_fail@plt+0x3c38>
   15078:	ldr	r3, [r9, #80]	; 0x50
   1507c:	lsr	r3, r3, r1
   15080:	tst	r3, #1
   15084:	beq	15120 <__assert_fail@plt+0x3c38>
   15088:	mov	sl, r2
   1508c:	mov	r2, #0
   15090:	mov	r1, r2
   15094:	mov	r3, #8
   15098:	mov	r6, r0
   1509c:	mov	r0, r9
   150a0:	bl	15028 <__assert_fail@plt+0x3b40>
   150a4:	mov	r2, #0
   150a8:	mov	r8, r0
   150ac:	mov	r3, #9
   150b0:	mov	r1, r2
   150b4:	mov	r0, r9
   150b8:	bl	15028 <__assert_fail@plt+0x3b40>
   150bc:	cmp	r4, #0
   150c0:	mov	r5, r0
   150c4:	moveq	r7, r0
   150c8:	beq	150e4 <__assert_fail@plt+0x3bfc>
   150cc:	mov	r2, r0
   150d0:	mov	r3, #16
   150d4:	mov	r1, r4
   150d8:	mov	r0, r9
   150dc:	bl	15028 <__assert_fail@plt+0x3b40>
   150e0:	mov	r7, r0
   150e4:	mov	r3, #16
   150e8:	mov	r2, r7
   150ec:	mov	r1, r8
   150f0:	mov	r0, r9
   150f4:	bl	15028 <__assert_fail@plt+0x3b40>
   150f8:	cmp	r7, #0
   150fc:	cmpne	r0, #0
   15100:	mov	r4, r0
   15104:	beq	15114 <__assert_fail@plt+0x3c2c>
   15108:	cmp	r5, #0
   1510c:	cmpne	r8, #0
   15110:	bne	15128 <__assert_fail@plt+0x3c40>
   15114:	mov	r3, #12
   15118:	mov	r4, #0
   1511c:	str	r3, [r6]
   15120:	mov	r0, r4
   15124:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15128:	ldr	r3, [sl, #20]
   1512c:	str	r3, [r5, #20]
   15130:	str	r3, [r8, #20]
   15134:	ldrb	r3, [sl, #26]
   15138:	ldrb	r2, [r5, #26]
   1513c:	ubfx	r3, r3, #3, #1
   15140:	bfi	r2, r3, #3, #1
   15144:	strb	r2, [r5, #26]
   15148:	ldrb	r2, [r8, #26]
   1514c:	bfi	r2, r3, #3, #1
   15150:	strb	r2, [r8, #26]
   15154:	b	15120 <__assert_fail@plt+0x3c38>
   15158:	push	{r0, r1, r2, r4, r5, lr}
   1515c:	mov	r3, #0
   15160:	mov	r5, r0
   15164:	mov	r4, r1
   15168:	ldr	r2, [r1, #4]
   1516c:	str	r3, [sp, #4]
   15170:	cmp	r2, r3
   15174:	beq	1519c <__assert_fail@plt+0x3cb4>
   15178:	ldrb	r3, [r2, #24]
   1517c:	cmp	r3, #17
   15180:	bne	1519c <__assert_fail@plt+0x3cb4>
   15184:	mov	r1, r0
   15188:	add	r0, sp, #4
   1518c:	bl	1504c <__assert_fail@plt+0x3b64>
   15190:	cmp	r0, #0
   15194:	str	r0, [r4, #4]
   15198:	strne	r4, [r0]
   1519c:	ldr	r2, [r4, #8]
   151a0:	cmp	r2, #0
   151a4:	beq	151cc <__assert_fail@plt+0x3ce4>
   151a8:	ldrb	r3, [r2, #24]
   151ac:	cmp	r3, #17
   151b0:	bne	151cc <__assert_fail@plt+0x3ce4>
   151b4:	mov	r1, r5
   151b8:	add	r0, sp, #4
   151bc:	bl	1504c <__assert_fail@plt+0x3b64>
   151c0:	cmp	r0, #0
   151c4:	str	r0, [r4, #8]
   151c8:	strne	r4, [r0]
   151cc:	ldr	r0, [sp, #4]
   151d0:	add	sp, sp, #12
   151d4:	pop	{r4, r5, pc}
   151d8:	mov	r3, #1
   151dc:	push	{r4, r5, r6, lr}
   151e0:	mov	r4, r0
   151e4:	mov	r5, r1
   151e8:	str	r3, [r0]
   151ec:	str	r3, [r0, #4]
   151f0:	mov	r0, #4
   151f4:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   151f8:	cmp	r0, #0
   151fc:	str	r0, [r4, #8]
   15200:	streq	r0, [r4]
   15204:	streq	r0, [r4, #4]
   15208:	moveq	r0, #12
   1520c:	strne	r5, [r0]
   15210:	movne	r0, #0
   15214:	pop	{r4, r5, r6, pc}
   15218:	push	{r4, lr}
   1521c:	mov	r3, #0
   15220:	mov	r4, r0
   15224:	lsl	r0, r1, #2
   15228:	stm	r4, {r1, r3}
   1522c:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   15230:	cmp	r0, #0
   15234:	str	r0, [r4, #8]
   15238:	moveq	r0, #12
   1523c:	movne	r0, #0
   15240:	pop	{r4, pc}
   15244:	mov	r2, #32
   15248:	mov	r1, #0
   1524c:	b	113ec <memset@plt>
   15250:	push	{r4, r5, r6, r7, r8, lr}
   15254:	sub	sp, sp, #80	; 0x50
   15258:	mov	r4, r0
   1525c:	add	r7, sp, #8
   15260:	add	r6, r0, #16
   15264:	ldr	r5, [r0, #28]
   15268:	ldr	r8, [r0, #36]	; 0x24
   1526c:	ldr	r3, [r0, #48]	; 0x30
   15270:	cmp	r8, r3
   15274:	movge	r8, r3
   15278:	cmp	r5, r8
   1527c:	bge	15394 <__assert_fail@plt+0x3eac>
   15280:	ldr	r3, [r4, #64]	; 0x40
   15284:	sub	r2, r8, r5
   15288:	ldm	r6, {r0, r1}
   1528c:	cmp	r3, #0
   15290:	stm	r7, {r0, r1}
   15294:	beq	15378 <__assert_fail@plt+0x3e90>
   15298:	mov	r3, #0
   1529c:	add	r1, sp, #16
   152a0:	b	152d4 <__assert_fail@plt+0x3dec>
   152a4:	ldr	r0, [r4]
   152a8:	ldr	ip, [r4, #24]
   152ac:	add	r0, r0, r5
   152b0:	add	r0, r0, r3
   152b4:	ldrb	r0, [r0, ip]
   152b8:	ldr	ip, [r4, #64]	; 0x40
   152bc:	ldrb	ip, [ip, r0]
   152c0:	ldr	r0, [r4, #4]
   152c4:	add	r0, r0, r3
   152c8:	strb	ip, [r0, r5]
   152cc:	strb	ip, [r1, r3]
   152d0:	add	r3, r3, #1
   152d4:	ldr	r0, [r4, #80]	; 0x50
   152d8:	cmp	r2, r0
   152dc:	movlt	r0, r2
   152e0:	cmp	r0, r3
   152e4:	bgt	152a4 <__assert_fail@plt+0x3dbc>
   152e8:	mov	r3, r6
   152ec:	add	r0, sp, #4
   152f0:	bl	203cc <__assert_fail@plt+0xeee4>
   152f4:	sub	r3, r0, #1
   152f8:	cmn	r3, #3
   152fc:	bhi	15318 <__assert_fail@plt+0x3e30>
   15300:	cmn	r0, #2
   15304:	bne	15348 <__assert_fail@plt+0x3e60>
   15308:	ldr	r2, [r4, #36]	; 0x24
   1530c:	ldr	r3, [r4, #48]	; 0x30
   15310:	cmp	r2, r3
   15314:	blt	1538c <__assert_fail@plt+0x3ea4>
   15318:	ldr	r3, [r4]
   1531c:	ldr	r2, [r4, #24]
   15320:	ldm	r7, {r0, r1}
   15324:	add	r3, r3, r5
   15328:	ldrb	r3, [r3, r2]
   1532c:	ldr	r2, [r4, #64]	; 0x40
   15330:	str	r3, [sp, #4]
   15334:	cmp	r2, #0
   15338:	ldrbne	r3, [r2, r3]
   1533c:	stm	r6, {r0, r1}
   15340:	mov	r0, #1
   15344:	strne	r3, [sp, #4]
   15348:	ldr	r3, [sp, #4]
   1534c:	add	r0, r5, r0
   15350:	mvn	r1, #0
   15354:	ldr	r2, [r4, #8]
   15358:	str	r3, [r2, r5, lsl #2]
   1535c:	add	r3, r5, #1
   15360:	cmp	r3, r0
   15364:	mov	r5, r3
   15368:	bge	15278 <__assert_fail@plt+0x3d90>
   1536c:	str	r1, [r2, r3, lsl #2]
   15370:	add	r3, r3, #1
   15374:	b	15360 <__assert_fail@plt+0x3e78>
   15378:	ldr	r1, [r4, #24]
   1537c:	add	r3, r5, r1
   15380:	ldr	r1, [r4]
   15384:	add	r1, r1, r3
   15388:	b	152e8 <__assert_fail@plt+0x3e00>
   1538c:	ldm	r7, {r0, r1}
   15390:	stm	r6, {r0, r1}
   15394:	str	r5, [r4, #28]
   15398:	str	r5, [r4, #32]
   1539c:	add	sp, sp, #80	; 0x50
   153a0:	pop	{r4, r5, r6, r7, r8, pc}
   153a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a8:	mov	r4, r0
   153ac:	sub	sp, sp, #100	; 0x64
   153b0:	ldr	r5, [r0, #28]
   153b4:	ldr	r7, [r0, #36]	; 0x24
   153b8:	ldr	r3, [r0, #48]	; 0x30
   153bc:	cmp	r7, r3
   153c0:	movge	r7, r3
   153c4:	ldrb	r3, [r0, #74]	; 0x4a
   153c8:	cmp	r3, #0
   153cc:	bne	153f0 <__assert_fail@plt+0x3f08>
   153d0:	ldr	r3, [r0, #64]	; 0x40
   153d4:	cmp	r3, #0
   153d8:	bne	153f0 <__assert_fail@plt+0x3f08>
   153dc:	ldrb	r3, [r0, #76]	; 0x4c
   153e0:	cmp	r3, #0
   153e4:	addeq	r6, r0, #16
   153e8:	addeq	r8, sp, #24
   153ec:	beq	15454 <__assert_fail@plt+0x3f6c>
   153f0:	mov	r6, r5
   153f4:	ldr	r5, [r4, #32]
   153f8:	cmp	r6, r7
   153fc:	blt	15504 <__assert_fail@plt+0x401c>
   15400:	b	155d4 <__assert_fail@plt+0x40ec>
   15404:	ldr	fp, [r4]
   15408:	str	r5, [sp, #4]
   1540c:	ldr	sl, [r4, #24]
   15410:	add	r3, fp, sl
   15414:	ldrb	r9, [r3, r5]
   15418:	tst	r9, #128	; 0x80
   1541c:	bne	15460 <__assert_fail@plt+0x3f78>
   15420:	mov	r0, r6
   15424:	bl	11254 <mbsinit@plt>
   15428:	cmp	r0, #0
   1542c:	beq	15460 <__assert_fail@plt+0x3f78>
   15430:	mov	r0, r9
   15434:	bl	114ac <towupper@plt>
   15438:	bics	r3, r0, #127	; 0x7f
   1543c:	bne	15460 <__assert_fail@plt+0x3f78>
   15440:	ldr	r3, [r4, #4]
   15444:	strb	r0, [r3, r5]
   15448:	ldr	r3, [r4, #8]
   1544c:	str	r0, [r3, r5, lsl #2]
   15450:	add	r5, r5, #1
   15454:	cmp	r5, r7
   15458:	blt	15404 <__assert_fail@plt+0x3f1c>
   1545c:	b	15640 <__assert_fail@plt+0x4158>
   15460:	ldm	r6, {r0, r1}
   15464:	mov	r3, r6
   15468:	sub	r2, r7, r5
   1546c:	stm	r8, {r0, r1}
   15470:	add	r1, sl, r5
   15474:	add	r0, sp, #20
   15478:	add	r1, fp, r1
   1547c:	bl	203cc <__assert_fail@plt+0xeee4>
   15480:	sub	r3, r0, #1
   15484:	mov	sl, r0
   15488:	cmn	r3, #4
   1548c:	bhi	155f8 <__assert_fail@plt+0x4110>
   15490:	ldr	fp, [sp, #20]
   15494:	mov	r0, fp
   15498:	bl	114ac <towupper@plt>
   1549c:	cmp	fp, r0
   154a0:	mov	r9, r0
   154a4:	beq	155dc <__assert_fail@plt+0x40f4>
   154a8:	mov	r1, r0
   154ac:	mov	r2, r8
   154b0:	add	r0, sp, #32
   154b4:	bl	11188 <wcrtomb@plt>
   154b8:	cmp	sl, r0
   154bc:	bne	15500 <__assert_fail@plt+0x4018>
   154c0:	ldr	r0, [r4, #4]
   154c4:	mov	r2, sl
   154c8:	add	r1, sp, #32
   154cc:	add	r0, r0, r5
   154d0:	add	sl, sl, r5
   154d4:	bl	11218 <memcpy@plt>
   154d8:	ldr	r2, [r4, #8]
   154dc:	add	r3, r5, #1
   154e0:	mvn	r1, #0
   154e4:	str	r9, [r2, r5, lsl #2]
   154e8:	cmp	r3, sl
   154ec:	mov	r5, r3
   154f0:	bge	15454 <__assert_fail@plt+0x3f6c>
   154f4:	str	r1, [r2, r3, lsl #2]
   154f8:	add	r3, r3, #1
   154fc:	b	154e8 <__assert_fail@plt+0x4000>
   15500:	mov	r6, r5
   15504:	add	r3, r4, #16
   15508:	ldr	ip, [r4, #64]	; 0x40
   1550c:	add	sl, sp, #24
   15510:	sub	r2, r7, r6
   15514:	ldm	r3, {r0, r1}
   15518:	str	r3, [sp, #4]
   1551c:	cmp	ip, #0
   15520:	stm	sl, {r0, r1}
   15524:	beq	15678 <__assert_fail@plt+0x4190>
   15528:	ldr	r0, [r4, #80]	; 0x50
   1552c:	mov	r3, #0
   15530:	add	r9, sp, #32
   15534:	cmp	r2, r0
   15538:	movlt	r0, r2
   1553c:	cmp	r0, r3
   15540:	bgt	15654 <__assert_fail@plt+0x416c>
   15544:	mov	r1, r9
   15548:	add	r0, sp, #20
   1554c:	ldr	r3, [sp, #4]
   15550:	bl	203cc <__assert_fail@plt+0xeee4>
   15554:	sub	r3, r0, #1
   15558:	mov	r8, r0
   1555c:	cmn	r3, #4
   15560:	str	r3, [sp, #8]
   15564:	bhi	157fc <__assert_fail@plt+0x4314>
   15568:	ldr	r3, [sp, #20]
   1556c:	mov	r0, r3
   15570:	str	r3, [sp, #12]
   15574:	bl	114ac <towupper@plt>
   15578:	ldr	r3, [sp, #12]
   1557c:	mov	fp, r0
   15580:	cmp	r3, r0
   15584:	beq	15788 <__assert_fail@plt+0x42a0>
   15588:	mov	r1, r0
   1558c:	mov	r2, sl
   15590:	add	r0, sp, #32
   15594:	bl	11188 <wcrtomb@plt>
   15598:	cmp	r8, r0
   1559c:	mov	r3, r0
   155a0:	moveq	r2, r8
   155a4:	addeq	r1, sp, #32
   155a8:	ldreq	r0, [r4, #4]
   155ac:	beq	15794 <__assert_fail@plt+0x42ac>
   155b0:	cmn	r3, #1
   155b4:	beq	15788 <__assert_fail@plt+0x42a0>
   155b8:	ldr	r0, [r4, #36]	; 0x24
   155bc:	add	r9, r6, r3
   155c0:	cmp	r9, r0
   155c4:	bls	1568c <__assert_fail@plt+0x41a4>
   155c8:	ldm	sl, {r0, r1}
   155cc:	ldr	r3, [sp, #4]
   155d0:	stm	r3, {r0, r1}
   155d4:	str	r6, [r4, #28]
   155d8:	b	15644 <__assert_fail@plt+0x415c>
   155dc:	ldr	r1, [r4]
   155e0:	mov	r2, sl
   155e4:	ldr	r3, [r4, #24]
   155e8:	ldr	r0, [r4, #4]
   155ec:	add	r3, r5, r3
   155f0:	add	r1, r1, r3
   155f4:	b	154cc <__assert_fail@plt+0x3fe4>
   155f8:	cmn	r3, #3
   155fc:	bne	15610 <__assert_fail@plt+0x4128>
   15600:	ldr	r2, [r4, #36]	; 0x24
   15604:	ldr	r3, [r4, #48]	; 0x30
   15608:	cmp	r2, r3
   1560c:	blt	15638 <__assert_fail@plt+0x4150>
   15610:	ldr	r3, [r4, #4]
   15614:	cmn	sl, #1
   15618:	ldr	r2, [sp, #4]
   1561c:	strb	r9, [r3, r5]
   15620:	add	r5, r5, #1
   15624:	ldr	r3, [r4, #8]
   15628:	str	r9, [r3, r2, lsl #2]
   1562c:	ldmeq	r8, {r0, r1}
   15630:	stmeq	r6, {r0, r1}
   15634:	b	15454 <__assert_fail@plt+0x3f6c>
   15638:	ldm	r8, {r0, r1}
   1563c:	stm	r6, {r0, r1}
   15640:	str	r5, [r4, #28]
   15644:	mov	r0, #0
   15648:	str	r5, [r4, #32]
   1564c:	add	sp, sp, #100	; 0x64
   15650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15654:	ldr	r1, [r4]
   15658:	ldr	lr, [r4, #24]
   1565c:	add	r1, r1, r5
   15660:	add	r1, r1, r3
   15664:	ldrb	r1, [r1, lr]
   15668:	ldrb	r1, [ip, r1]
   1566c:	strb	r1, [r9, r3]
   15670:	add	r3, r3, #1
   15674:	b	1553c <__assert_fail@plt+0x4054>
   15678:	ldr	r9, [r4, #24]
   1567c:	add	r3, r5, r9
   15680:	ldr	r9, [r4]
   15684:	add	r9, r9, r3
   15688:	b	15544 <__assert_fail@plt+0x405c>
   1568c:	ldr	r2, [r4, #12]
   15690:	cmp	r2, #0
   15694:	bne	156b8 <__assert_fail@plt+0x41d0>
   15698:	lsl	r0, r0, #2
   1569c:	str	r3, [sp, #4]
   156a0:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   156a4:	cmp	r0, #0
   156a8:	str	r0, [r4, #12]
   156ac:	moveq	r0, #12
   156b0:	ldr	r3, [sp, #4]
   156b4:	beq	1564c <__assert_fail@plt+0x4164>
   156b8:	ldrb	r2, [r4, #76]	; 0x4c
   156bc:	cmp	r2, #0
   156c0:	beq	15754 <__assert_fail@plt+0x426c>
   156c4:	ldr	r0, [r4, #4]
   156c8:	mov	r2, r3
   156cc:	add	r1, sp, #32
   156d0:	str	r3, [sp, #4]
   156d4:	add	r0, r0, r6
   156d8:	bl	11218 <memcpy@plt>
   156dc:	ldr	r1, [r4, #8]
   156e0:	lsl	r2, r6, #2
   156e4:	mvn	lr, #0
   156e8:	ldr	r0, [r4, #12]
   156ec:	ldr	r3, [sp, #4]
   156f0:	str	fp, [r1, r6, lsl #2]
   156f4:	add	r1, r1, r2
   156f8:	str	r5, [r0, r6, lsl #2]
   156fc:	add	r0, r0, r2
   15700:	mov	r2, #1
   15704:	cmp	r2, r3
   15708:	bcc	15768 <__assert_fail@plt+0x4280>
   1570c:	ldr	r7, [r4, #48]	; 0x30
   15710:	sub	r3, r3, r8
   15714:	mov	r6, r9
   15718:	ldr	r2, [r4, #52]	; 0x34
   1571c:	add	r7, r3, r7
   15720:	cmp	r2, r5
   15724:	add	r5, r5, r8
   15728:	str	r7, [r4, #48]	; 0x30
   1572c:	ldrgt	r2, [r4, #56]	; 0x38
   15730:	addgt	r3, r2, r3
   15734:	strgt	r3, [r4, #56]	; 0x38
   15738:	ldr	r3, [r4, #36]	; 0x24
   1573c:	cmp	r7, r3
   15740:	movge	r7, r3
   15744:	b	153f8 <__assert_fail@plt+0x3f10>
   15748:	ldr	r1, [r4, #12]
   1574c:	str	r2, [r1, r2, lsl #2]
   15750:	add	r2, r2, #1
   15754:	cmp	r2, r6
   15758:	bne	15748 <__assert_fail@plt+0x4260>
   1575c:	mov	r2, #1
   15760:	strb	r2, [r4, #76]	; 0x4c
   15764:	b	156c4 <__assert_fail@plt+0x41dc>
   15768:	ldr	ip, [sp, #8]
   1576c:	cmp	r2, r8
   15770:	movcc	ip, r2
   15774:	add	r2, r2, #1
   15778:	add	ip, r5, ip
   1577c:	str	ip, [r0, #4]!
   15780:	str	lr, [r1, #4]!
   15784:	b	15704 <__assert_fail@plt+0x421c>
   15788:	ldr	r0, [r4, #4]
   1578c:	mov	r2, r8
   15790:	mov	r1, r9
   15794:	add	r0, r0, r6
   15798:	bl	11218 <memcpy@plt>
   1579c:	ldrb	r3, [r4, #76]	; 0x4c
   157a0:	cmp	r3, #0
   157a4:	bne	157d8 <__assert_fail@plt+0x42f0>
   157a8:	ldr	r2, [r4, #8]
   157ac:	add	r5, r5, r8
   157b0:	add	r3, r6, #1
   157b4:	add	r8, r8, r6
   157b8:	mvn	r1, #0
   157bc:	str	fp, [r2, r6, lsl #2]
   157c0:	cmp	r3, r8
   157c4:	mov	r6, r3
   157c8:	bge	153f8 <__assert_fail@plt+0x3f10>
   157cc:	str	r1, [r2, r3, lsl #2]
   157d0:	add	r3, r3, #1
   157d4:	b	157c0 <__assert_fail@plt+0x42d8>
   157d8:	ldr	r2, [r4, #12]
   157dc:	mov	r3, #0
   157e0:	add	r2, r2, r6, lsl #2
   157e4:	add	r1, r5, r3
   157e8:	add	r3, r3, #1
   157ec:	cmp	r8, r3
   157f0:	str	r1, [r2], #4
   157f4:	bne	157e4 <__assert_fail@plt+0x42fc>
   157f8:	b	157a8 <__assert_fail@plt+0x42c0>
   157fc:	sub	r3, r0, #1
   15800:	cmn	r3, #3
   15804:	bne	15818 <__assert_fail@plt+0x4330>
   15808:	ldr	r2, [r4, #36]	; 0x24
   1580c:	ldr	r3, [r4, #48]	; 0x30
   15810:	cmp	r2, r3
   15814:	blt	155c8 <__assert_fail@plt+0x40e0>
   15818:	ldr	r3, [r4]
   1581c:	ldr	r2, [r4, #24]
   15820:	add	r3, r3, r5
   15824:	ldrb	r3, [r3, r2]
   15828:	ldr	r2, [r4, #64]	; 0x40
   1582c:	cmp	r2, #0
   15830:	ldrbne	r3, [r2, r3]
   15834:	ldr	r2, [r4, #4]
   15838:	strb	r3, [r2, r6]
   1583c:	lsl	r2, r6, #2
   15840:	ldrb	r1, [r4, #76]	; 0x4c
   15844:	cmp	r1, #0
   15848:	ldrne	r1, [r4, #12]
   1584c:	strne	r5, [r1, r6, lsl #2]
   15850:	cmn	r8, #1
   15854:	add	r5, r5, #1
   15858:	ldr	r1, [r4, #8]
   1585c:	add	r6, r6, #1
   15860:	str	r3, [r1, r2]
   15864:	ldreq	r3, [sp, #4]
   15868:	ldmeq	sl, {r0, r1}
   1586c:	stmeq	r3, {r0, r1}
   15870:	b	153f8 <__assert_fail@plt+0x3f10>
   15874:	push	{r4, r5, r6, lr}
   15878:	mov	r4, r0
   1587c:	ldr	r5, [r0, #28]
   15880:	ldr	r3, [r0, #36]	; 0x24
   15884:	ldr	r6, [r0, #48]	; 0x30
   15888:	cmp	r3, r6
   1588c:	movlt	r6, r3
   15890:	cmp	r5, r6
   15894:	blt	158a4 <__assert_fail@plt+0x43bc>
   15898:	str	r5, [r4, #28]
   1589c:	str	r5, [r4, #32]
   158a0:	pop	{r4, r5, r6, pc}
   158a4:	ldr	r3, [r4]
   158a8:	ldr	r2, [r4, #24]
   158ac:	add	r3, r3, r5
   158b0:	ldrb	r0, [r3, r2]
   158b4:	ldr	r3, [r4, #64]	; 0x40
   158b8:	cmp	r3, #0
   158bc:	ldrbne	r0, [r3, r0]
   158c0:	bl	11464 <toupper@plt>
   158c4:	ldr	r3, [r4, #4]
   158c8:	strb	r0, [r3, r5]
   158cc:	add	r5, r5, #1
   158d0:	b	15890 <__assert_fail@plt+0x43a8>
   158d4:	ldr	r3, [r0, #36]	; 0x24
   158d8:	push	{r4, r5, r6, lr}
   158dc:	cmn	r3, #-536870910	; 0xe0000002
   158e0:	bls	158f0 <__assert_fail@plt+0x4408>
   158e4:	mov	r5, #12
   158e8:	mov	r0, r5
   158ec:	pop	{r4, r5, r6, pc}
   158f0:	ldr	r2, [r0, #48]	; 0x30
   158f4:	lsl	r3, r3, #1
   158f8:	mov	r4, r0
   158fc:	cmp	r3, r2
   15900:	movge	r3, r2
   15904:	cmp	r3, r1
   15908:	movge	r1, r3
   1590c:	bl	14de8 <__assert_fail@plt+0x3900>
   15910:	subs	r5, r0, #0
   15914:	bne	158e8 <__assert_fail@plt+0x4400>
   15918:	ldr	r0, [r4, #100]	; 0x64
   1591c:	cmp	r0, #0
   15920:	beq	15940 <__assert_fail@plt+0x4458>
   15924:	ldr	r1, [r4, #36]	; 0x24
   15928:	add	r1, r1, #1
   1592c:	lsl	r1, r1, #2
   15930:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15934:	cmp	r0, #0
   15938:	beq	158e4 <__assert_fail@plt+0x43fc>
   1593c:	str	r0, [r4, #100]	; 0x64
   15940:	ldrb	r2, [r4, #72]	; 0x48
   15944:	ldr	r3, [r4, #80]	; 0x50
   15948:	cmp	r2, #0
   1594c:	beq	1596c <__assert_fail@plt+0x4484>
   15950:	cmp	r3, #1
   15954:	mov	r0, r4
   15958:	ble	15964 <__assert_fail@plt+0x447c>
   1595c:	pop	{r4, r5, r6, lr}
   15960:	b	153a4 <__assert_fail@plt+0x3ebc>
   15964:	bl	15874 <__assert_fail@plt+0x438c>
   15968:	b	158e8 <__assert_fail@plt+0x4400>
   1596c:	cmp	r3, #1
   15970:	ble	15980 <__assert_fail@plt+0x4498>
   15974:	mov	r0, r4
   15978:	bl	15250 <__assert_fail@plt+0x3d68>
   1597c:	b	158e8 <__assert_fail@plt+0x4400>
   15980:	ldr	r3, [r4, #64]	; 0x40
   15984:	cmp	r3, #0
   15988:	beq	158e8 <__assert_fail@plt+0x4400>
   1598c:	mov	r0, r4
   15990:	bl	14778 <__assert_fail@plt+0x3290>
   15994:	b	158e8 <__assert_fail@plt+0x4400>
   15998:	push	{r4, lr}
   1599c:	mov	r4, r0
   159a0:	ldr	r0, [r0]
   159a4:	bl	12bd8 <__assert_fail@plt+0x16f0>
   159a8:	ldr	r0, [r4, #4]
   159ac:	bl	12bd8 <__assert_fail@plt+0x16f0>
   159b0:	ldr	r0, [r4, #8]
   159b4:	bl	12bd8 <__assert_fail@plt+0x16f0>
   159b8:	ldr	r0, [r4, #12]
   159bc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   159c0:	mov	r0, r4
   159c4:	pop	{r4, lr}
   159c8:	b	12bd8 <__assert_fail@plt+0x16f0>
   159cc:	ldr	r3, [pc, #36]	; 159f8 <__assert_fail@plt+0x4510>
   159d0:	ldr	r2, [r0, #4]
   159d4:	and	r3, r3, r2
   159d8:	cmp	r3, #6
   159dc:	bne	159e8 <__assert_fail@plt+0x4500>
   159e0:	ldr	r0, [r0]
   159e4:	b	15998 <__assert_fail@plt+0x44b0>
   159e8:	cmp	r3, #3
   159ec:	bxne	lr
   159f0:	ldr	r0, [r0]
   159f4:	b	12bd8 <__assert_fail@plt+0x16f0>
   159f8:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   159fc:	add	r0, r1, #20
   15a00:	push	{r4, lr}
   15a04:	bl	159cc <__assert_fail@plt+0x44e4>
   15a08:	mov	r0, #0
   15a0c:	pop	{r4, pc}
   15a10:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a14:	mov	r7, sp
   15a18:	mov	r4, r0
   15a1c:	ldr	r6, [r0, #4]
   15a20:	stm	r7, {r1, r2}
   15a24:	ldr	r3, [r0, #8]
   15a28:	ldrb	r5, [sp, #4]
   15a2c:	cmp	r3, r6
   15a30:	bcc	15b04 <__assert_fail@plt+0x461c>
   15a34:	ldr	r3, [pc, #372]	; 15bb0 <__assert_fail@plt+0x46c8>
   15a38:	lsl	r8, r6, #1
   15a3c:	cmp	r8, r3
   15a40:	bls	15a50 <__assert_fail@plt+0x4568>
   15a44:	mvn	r0, #0
   15a48:	add	sp, sp, #12
   15a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a50:	lsl	r1, r6, #4
   15a54:	ldr	r0, [r0]
   15a58:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15a5c:	cmp	r0, #0
   15a60:	beq	15a44 <__assert_fail@plt+0x455c>
   15a64:	lsl	r9, r6, #3
   15a68:	str	r0, [r4]
   15a6c:	ldr	r0, [r4, #12]
   15a70:	mov	r1, r9
   15a74:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15a78:	mov	sl, r0
   15a7c:	mov	r1, r9
   15a80:	ldr	r0, [r4, #16]
   15a84:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15a88:	mov	r3, #24
   15a8c:	mov	r9, r0
   15a90:	ldr	r0, [r4, #20]
   15a94:	mul	r6, r3, r6
   15a98:	mov	r1, r6
   15a9c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15aa0:	mov	fp, r0
   15aa4:	mov	r1, r6
   15aa8:	ldr	r0, [r4, #24]
   15aac:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15ab0:	cmp	r9, #0
   15ab4:	cmpne	sl, #0
   15ab8:	mov	r6, r0
   15abc:	beq	15acc <__assert_fail@plt+0x45e4>
   15ac0:	cmp	r0, #0
   15ac4:	cmpne	fp, #0
   15ac8:	bne	15af0 <__assert_fail@plt+0x4608>
   15acc:	mov	r0, sl
   15ad0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15ad4:	mov	r0, r9
   15ad8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15adc:	mov	r0, fp
   15ae0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15ae4:	mov	r0, r6
   15ae8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15aec:	b	15a44 <__assert_fail@plt+0x455c>
   15af0:	str	r8, [r4, #4]
   15af4:	str	sl, [r4, #12]
   15af8:	str	r9, [r4, #16]
   15afc:	str	fp, [r4, #20]
   15b00:	str	r0, [r4, #24]
   15b04:	ldr	r3, [r4]
   15b08:	cmp	r5, #5
   15b0c:	ldr	r2, [r4, #8]
   15b10:	ldm	r7, {r0, r1}
   15b14:	add	r3, r3, r2, lsl #3
   15b18:	stm	r3, {r0, r1}
   15b1c:	bfc	r1, #8, #10
   15b20:	str	r1, [r3, #4]
   15b24:	bne	15ba0 <__assert_fail@plt+0x46b8>
   15b28:	ldr	r5, [r4, #92]	; 0x5c
   15b2c:	cmp	r5, #1
   15b30:	movle	r5, #0
   15b34:	movgt	r5, #1
   15b38:	ldrb	r1, [r3, #6]
   15b3c:	bfi	r1, r5, #4, #1
   15b40:	strb	r1, [r3, #6]
   15b44:	mvn	r1, #0
   15b48:	ldr	r3, [r4, #12]
   15b4c:	ldr	ip, [r4, #20]
   15b50:	str	r1, [r3, r2, lsl #2]
   15b54:	mov	r2, #12
   15b58:	mov	r3, #0
   15b5c:	ldr	r1, [r4, #8]
   15b60:	mul	r1, r2, r1
   15b64:	add	r0, ip, r1
   15b68:	str	r3, [ip, r1]
   15b6c:	str	r3, [r0, #4]
   15b70:	str	r3, [r0, #8]
   15b74:	ldr	r1, [r4, #8]
   15b78:	ldr	r0, [r4, #24]
   15b7c:	mul	r2, r2, r1
   15b80:	add	r1, r0, r2
   15b84:	str	r3, [r0, r2]
   15b88:	str	r3, [r1, #4]
   15b8c:	str	r3, [r1, #8]
   15b90:	ldr	r0, [r4, #8]
   15b94:	add	r3, r0, #1
   15b98:	str	r3, [r4, #8]
   15b9c:	b	15a48 <__assert_fail@plt+0x4560>
   15ba0:	sub	r5, r5, #6
   15ba4:	clz	r5, r5
   15ba8:	lsr	r5, r5, #5
   15bac:	b	15b38 <__assert_fail@plt+0x4650>
   15bb0:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   15bb4:	ldr	r3, [r0]
   15bb8:	push	{r4, r5, r6, r7, r8, lr}
   15bbc:	lsl	r7, r1, #3
   15bc0:	mov	r6, r1
   15bc4:	mov	r4, r2
   15bc8:	mov	r5, r0
   15bcc:	add	r3, r3, r7
   15bd0:	ldm	r3, {r1, r2}
   15bd4:	bl	15a10 <__assert_fail@plt+0x4528>
   15bd8:	cmn	r0, #1
   15bdc:	popeq	{r4, r5, r6, r7, r8, pc}
   15be0:	ubfx	r2, r4, #0, #10
   15be4:	ldr	ip, [r5]
   15be8:	add	r1, ip, r0, lsl #3
   15bec:	add	ip, ip, r7
   15bf0:	ldr	r3, [r1, #4]
   15bf4:	bfi	r3, r2, #8, #10
   15bf8:	str	r3, [r1, #4]
   15bfc:	ldr	ip, [ip, #4]
   15c00:	ubfx	ip, ip, #8, #10
   15c04:	orr	r2, r2, ip
   15c08:	bfi	r3, r2, #8, #10
   15c0c:	str	r3, [r1, #4]
   15c10:	ubfx	r3, r3, #16, #8
   15c14:	orr	r3, r3, #4
   15c18:	strb	r3, [r1, #6]
   15c1c:	ldr	r3, [r5, #16]
   15c20:	str	r6, [r3, r0, lsl #2]
   15c24:	pop	{r4, r5, r6, r7, r8, pc}
   15c28:	push	{r4, lr}
   15c2c:	mov	r4, r0
   15c30:	ldr	r0, [r0, #24]
   15c34:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c38:	ldr	r0, [r4, #36]	; 0x24
   15c3c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c40:	ldr	r3, [r4, #40]	; 0x28
   15c44:	add	r2, r4, #4
   15c48:	cmp	r3, r2
   15c4c:	beq	15c60 <__assert_fail@plt+0x4778>
   15c50:	ldr	r0, [r3, #8]
   15c54:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c58:	ldr	r0, [r4, #40]	; 0x28
   15c5c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c60:	ldr	r0, [r4, #12]
   15c64:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c68:	ldr	r0, [r4, #48]	; 0x30
   15c6c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c70:	ldr	r0, [r4, #44]	; 0x2c
   15c74:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c78:	mov	r0, r4
   15c7c:	pop	{r4, lr}
   15c80:	b	12bd8 <__assert_fail@plt+0x16f0>
   15c84:	push	{r4, lr}
   15c88:	mov	r4, r0
   15c8c:	ldr	r0, [r0, #8]
   15c90:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c94:	ldr	r0, [r4, #12]
   15c98:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15c9c:	ldrb	r3, [r4, #75]	; 0x4b
   15ca0:	cmp	r3, #0
   15ca4:	popeq	{r4, pc}
   15ca8:	ldr	r0, [r4, #4]
   15cac:	pop	{r4, lr}
   15cb0:	b	12bd8 <__assert_fail@plt+0x16f0>
   15cb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15cb8:	mov	r4, #0
   15cbc:	mov	r6, r0
   15cc0:	mov	r8, r4
   15cc4:	ldr	r3, [r6, #124]	; 0x7c
   15cc8:	cmp	r3, r4
   15ccc:	bgt	15cdc <__assert_fail@plt+0x47f4>
   15cd0:	str	r8, [r6, #108]	; 0x6c
   15cd4:	str	r8, [r6, #124]	; 0x7c
   15cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15cdc:	ldr	r3, [r6, #132]	; 0x84
   15ce0:	mov	r7, #0
   15ce4:	ldr	r5, [r3, r4, lsl #2]
   15ce8:	ldr	r3, [r5, #16]
   15cec:	ldr	r0, [r5, #20]
   15cf0:	cmp	r3, r7
   15cf4:	bgt	15d28 <__assert_fail@plt+0x4840>
   15cf8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15cfc:	ldr	r3, [r5, #8]
   15d00:	cmp	r3, #0
   15d04:	beq	15d18 <__assert_fail@plt+0x4830>
   15d08:	ldr	r0, [r3, #8]
   15d0c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15d10:	ldr	r0, [r5, #8]
   15d14:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15d18:	mov	r0, r5
   15d1c:	add	r4, r4, #1
   15d20:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15d24:	b	15cc4 <__assert_fail@plt+0x47dc>
   15d28:	ldr	r9, [r0, r7, lsl #2]
   15d2c:	add	r7, r7, #1
   15d30:	ldr	r0, [r9, #16]
   15d34:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15d38:	mov	r0, r9
   15d3c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15d40:	b	15ce8 <__assert_fail@plt+0x4800>
   15d44:	push	{r4, r5, r6, lr}
   15d48:	add	r5, r0, #12
   15d4c:	mov	r4, r0
   15d50:	ldr	r0, [r0, #8]
   15d54:	cmp	r0, r5
   15d58:	beq	15d60 <__assert_fail@plt+0x4878>
   15d5c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   15d60:	mov	r3, #0
   15d64:	str	r3, [r4]
   15d68:	mov	r3, #16
   15d6c:	str	r5, [r4, #8]
   15d70:	str	r3, [r4, #4]
   15d74:	pop	{r4, r5, r6, pc}
   15d78:	mov	r3, r1
   15d7c:	ldr	r2, [r1, #28]
   15d80:	ldrb	r1, [r1, #24]
   15d84:	sub	r1, r1, #2
   15d88:	cmp	r1, #14
   15d8c:	ldrls	pc, [pc, r1, lsl #2]
   15d90:	b	15ea4 <__assert_fail@plt+0x49bc>
   15d94:			; <UNDEFINED> instruction: 0x00015eb4
   15d98:	andeq	r5, r1, r4, lsr #29
   15d9c:	andeq	r5, r1, r0, lsl #29
   15da0:	andeq	r5, r1, r4, lsr #29
   15da4:	andeq	r5, r1, r4, lsr #29
   15da8:	andeq	r5, r1, r4, lsr #29
   15dac:	andeq	r5, r1, r8, ror #28
   15db0:	andeq	r5, r1, r8, ror #28
   15db4:	ldrdeq	r5, [r1], -r0
   15db8:	ldrdeq	r5, [r1], -r0
   15dbc:	andeq	r5, r1, r8, ror #28
   15dc0:	andeq	r5, r1, r4, lsr #29
   15dc4:	andeq	r5, r1, r4, lsr #29
   15dc8:	andeq	r5, r1, r4, lsr #29
   15dcc:			; <UNDEFINED> instruction: 0x00015eb4
   15dd0:	ldrb	r1, [r0, #88]	; 0x58
   15dd4:	push	{r4, r5, r6, r7, r8, lr}
   15dd8:	mov	r4, #12
   15ddc:	mov	r8, #2
   15de0:	mul	r2, r4, r2
   15de4:	orr	r1, r1, #1
   15de8:	strb	r1, [r0, #88]	; 0x58
   15dec:	ldr	r1, [r3, #4]
   15df0:	cmp	r1, #0
   15df4:	ldreq	r1, [r3, #16]
   15df8:	ldrne	r1, [r1, #12]
   15dfc:	ldr	r5, [r1, #28]
   15e00:	ldr	r1, [r3, #8]
   15e04:	cmp	r1, #0
   15e08:	ldrne	r3, [r1, #12]
   15e0c:	ldreq	r3, [r3, #16]
   15e10:	ldr	r6, [r3, #28]
   15e14:	ldr	r3, [r0, #20]
   15e18:	mov	r0, #8
   15e1c:	str	r8, [r3, r2]
   15e20:	add	r7, r3, r2
   15e24:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   15e28:	cmp	r0, #0
   15e2c:	str	r0, [r7, #8]
   15e30:	bne	15e3c <__assert_fail@plt+0x4954>
   15e34:	mov	r0, r4
   15e38:	pop	{r4, r5, r6, r7, r8, pc}
   15e3c:	cmp	r5, r6
   15e40:	moveq	r3, #1
   15e44:	streq	r3, [r7, #4]
   15e48:	streq	r5, [r0]
   15e4c:	beq	15e60 <__assert_fail@plt+0x4978>
   15e50:	str	r8, [r7, #4]
   15e54:	stmlt	r0, {r5, r6}
   15e58:	strge	r6, [r0]
   15e5c:	strge	r5, [r0, #4]
   15e60:	mov	r0, #0
   15e64:	pop	{r4, r5, r6, r7, r8, pc}
   15e68:	ldr	r1, [r3, #16]
   15e6c:	ldr	r3, [r0, #20]
   15e70:	ldr	r1, [r1, #28]
   15e74:	mov	r0, #12
   15e78:	mla	r0, r0, r2, r3
   15e7c:	b	151d8 <__assert_fail@plt+0x3cf0>
   15e80:	ldr	r1, [r3, #16]
   15e84:	ldr	ip, [r0, #12]
   15e88:	ldr	r1, [r1, #28]
   15e8c:	str	r1, [ip, r2, lsl #2]
   15e90:	ldrb	r3, [r3, #24]
   15e94:	cmp	r3, #4
   15e98:	bne	15eb4 <__assert_fail@plt+0x49cc>
   15e9c:	ldr	r3, [r0, #20]
   15ea0:	b	15e74 <__assert_fail@plt+0x498c>
   15ea4:	ldr	r3, [r3, #16]
   15ea8:	ldr	r1, [r3, #28]
   15eac:	ldr	r3, [r0, #12]
   15eb0:	str	r1, [r3, r2, lsl #2]
   15eb4:	mov	r0, #0
   15eb8:	bx	lr
   15ebc:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ec0:	mov	r4, r0
   15ec4:	mov	r8, r1
   15ec8:	mov	r7, r2
   15ecc:	mov	r5, #0
   15ed0:	ldr	r9, [r0, #84]	; 0x54
   15ed4:	ldr	r3, [r8, #4]
   15ed8:	cmp	r3, r5
   15edc:	movle	r0, #0
   15ee0:	ble	15f48 <__assert_fail@plt+0x4a60>
   15ee4:	ldr	r3, [r8, #8]
   15ee8:	ldr	r6, [r3, r5, lsl #2]
   15eec:	ldr	r3, [r9]
   15ef0:	add	r2, r3, r6, lsl #3
   15ef4:	ldrb	r2, [r2, #4]
   15ef8:	cmp	r2, #8
   15efc:	bne	15f94 <__assert_fail@plt+0x4aac>
   15f00:	ldr	r2, [r3, r6, lsl #3]
   15f04:	cmp	r2, #31
   15f08:	bgt	15f94 <__assert_fail@plt+0x4aac>
   15f0c:	ldr	r3, [r9, #80]	; 0x50
   15f10:	lsr	r3, r3, r2
   15f14:	tst	r3, #1
   15f18:	beq	15f94 <__assert_fail@plt+0x4aac>
   15f1c:	ldr	r3, [r4, #124]	; 0x7c
   15f20:	ldr	r1, [r4, #128]	; 0x80
   15f24:	ldr	r0, [r4, #132]	; 0x84
   15f28:	cmp	r1, r3
   15f2c:	bne	15f58 <__assert_fail@plt+0x4a70>
   15f30:	lsl	sl, r1, #1
   15f34:	lsl	r1, r1, #3
   15f38:	bl	1fff0 <__assert_fail@plt+0xeb08>
   15f3c:	cmp	r0, #0
   15f40:	bne	15f50 <__assert_fail@plt+0x4a68>
   15f44:	mov	r0, #12
   15f48:	add	sp, sp, #4
   15f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f50:	str	sl, [r4, #128]	; 0x80
   15f54:	str	r0, [r4, #132]	; 0x84
   15f58:	mov	r1, #24
   15f5c:	mov	r0, #1
   15f60:	ldr	fp, [r4, #124]	; 0x7c
   15f64:	ldr	sl, [r4, #132]	; 0x84
   15f68:	bl	1ff70 <__assert_fail@plt+0xea88>
   15f6c:	ldr	r3, [r4, #124]	; 0x7c
   15f70:	ldr	r2, [r4, #132]	; 0x84
   15f74:	str	r0, [sl, fp, lsl #2]
   15f78:	ldr	r2, [r2, r3, lsl #2]
   15f7c:	cmp	r2, #0
   15f80:	beq	15f44 <__assert_fail@plt+0x4a5c>
   15f84:	add	r3, r3, #1
   15f88:	str	r6, [r2, #4]
   15f8c:	str	r3, [r4, #124]	; 0x7c
   15f90:	str	r7, [r2]
   15f94:	add	r5, r5, #1
   15f98:	b	15ed4 <__assert_fail@plt+0x49ec>
   15f9c:	ldr	r3, [r0, #36]	; 0x24
   15fa0:	push	{r4, r5, r6, lr}
   15fa4:	mov	r4, r0
   15fa8:	mov	r5, r1
   15fac:	ldr	r6, [r0, #104]	; 0x68
   15fb0:	cmp	r3, r1
   15fb4:	bgt	15fc4 <__assert_fail@plt+0x4adc>
   15fb8:	ldr	r2, [r0, #48]	; 0x30
   15fbc:	cmp	r3, r2
   15fc0:	blt	15fec <__assert_fail@plt+0x4b04>
   15fc4:	ldr	r3, [r4, #28]
   15fc8:	cmp	r3, r5
   15fcc:	ble	15fe0 <__assert_fail@plt+0x4af8>
   15fd0:	cmp	r6, r5
   15fd4:	blt	16004 <__assert_fail@plt+0x4b1c>
   15fd8:	mov	r0, #0
   15fdc:	pop	{r4, r5, r6, pc}
   15fe0:	ldr	r2, [r4, #48]	; 0x30
   15fe4:	cmp	r3, r2
   15fe8:	bge	15fd0 <__assert_fail@plt+0x4ae8>
   15fec:	add	r1, r5, #1
   15ff0:	mov	r0, r4
   15ff4:	bl	158d4 <__assert_fail@plt+0x43ec>
   15ff8:	cmp	r0, #0
   15ffc:	beq	15fd0 <__assert_fail@plt+0x4ae8>
   16000:	pop	{r4, r5, r6, pc}
   16004:	ldr	r0, [r4, #100]	; 0x64
   16008:	sub	r2, r5, r6
   1600c:	add	r6, r6, #1
   16010:	lsl	r2, r2, #2
   16014:	mov	r1, #0
   16018:	add	r0, r0, r6, lsl #2
   1601c:	bl	113ec <memset@plt>
   16020:	str	r5, [r4, #104]	; 0x68
   16024:	b	15fd8 <__assert_fail@plt+0x4af0>
   16028:	push	{r4, r5, r6, r7, r8, lr}
   1602c:	subs	r4, r0, #0
   16030:	ldr	r7, [sp, #28]
   16034:	beq	160c8 <__assert_fail@plt+0x4be0>
   16038:	ldr	r5, [r4]
   1603c:	cmp	r5, #0
   16040:	beq	160c8 <__assert_fail@plt+0x4be0>
   16044:	mov	r0, r3
   16048:	sub	r5, r5, #1
   1604c:	lsl	r6, r2, #3
   16050:	mov	r3, #24
   16054:	str	r5, [r4]
   16058:	mov	r2, r6
   1605c:	mul	r5, r3, r5
   16060:	ldr	r3, [r4, #8]
   16064:	add	ip, r3, r5
   16068:	ldr	r3, [r3, r5]
   1606c:	str	r3, [r1]
   16070:	ldr	r1, [ip, #8]
   16074:	bl	11218 <memcpy@plt>
   16078:	ldr	r3, [r4, #8]
   1607c:	mov	r2, r6
   16080:	ldr	r0, [sp, #24]
   16084:	add	r3, r3, r5
   16088:	ldr	r1, [r3, #8]
   1608c:	add	r1, r1, r6
   16090:	bl	11218 <memcpy@plt>
   16094:	ldr	r0, [r7, #8]
   16098:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1609c:	ldr	r3, [r4, #8]
   160a0:	add	r3, r3, r5
   160a4:	ldr	r0, [r3, #8]
   160a8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   160ac:	ldr	r3, [r4, #8]
   160b0:	add	r5, r3, r5
   160b4:	add	r3, r5, #12
   160b8:	ldm	r3, {r0, r1, r2}
   160bc:	stm	r7, {r0, r1, r2}
   160c0:	ldr	r0, [r5, #4]
   160c4:	pop	{r4, r5, r6, r7, r8, pc}
   160c8:	mvn	r0, #0
   160cc:	pop	{r4, r5, r6, r7, r8, pc}
   160d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160d4:	mov	r9, r3
   160d8:	mov	r5, r0
   160dc:	mov	r4, r1
   160e0:	mov	r8, r2
   160e4:	ldr	r6, [sp, #32]
   160e8:	ldr	r3, [sp, #36]	; 0x24
   160ec:	tst	r3, #4194304	; 0x400000
   160f0:	beq	16124 <__assert_fail@plt+0x4c3c>
   160f4:	mov	r0, r6
   160f8:	ldr	r1, [pc, #1720]	; 167b8 <__assert_fail@plt+0x52d0>
   160fc:	bl	111a0 <strcmp@plt>
   16100:	cmp	r0, #0
   16104:	ldreq	r6, [pc, #1712]	; 167bc <__assert_fail@plt+0x52d4>
   16108:	beq	16124 <__assert_fail@plt+0x4c3c>
   1610c:	mov	r0, r6
   16110:	ldr	r1, [pc, #1704]	; 167c0 <__assert_fail@plt+0x52d8>
   16114:	bl	111a0 <strcmp@plt>
   16118:	ldr	r3, [pc, #1692]	; 167bc <__assert_fail@plt+0x52d4>
   1611c:	cmp	r0, #0
   16120:	moveq	r6, r3
   16124:	ldr	r7, [r9]
   16128:	ldr	r3, [r8, #36]	; 0x24
   1612c:	cmp	r7, r3
   16130:	bne	16158 <__assert_fail@plt+0x4c70>
   16134:	lsl	r7, r7, #1
   16138:	ldr	r0, [r8, #12]
   1613c:	add	r7, r7, #1
   16140:	lsl	r1, r7, #2
   16144:	bl	1fff0 <__assert_fail@plt+0xeb08>
   16148:	cmp	r0, #0
   1614c:	beq	167a8 <__assert_fail@plt+0x52c0>
   16150:	str	r0, [r8, #12]
   16154:	str	r7, [r9]
   16158:	ldr	r9, [r8, #12]
   1615c:	mov	r0, r6
   16160:	ldr	r7, [r8, #36]	; 0x24
   16164:	add	r3, r7, #1
   16168:	str	r3, [r8, #36]	; 0x24
   1616c:	bl	1117c <wctype@plt>
   16170:	ldr	r1, [pc, #1612]	; 167c4 <__assert_fail@plt+0x52dc>
   16174:	str	r0, [r9, r7, lsl #2]
   16178:	mov	r0, r6
   1617c:	bl	111a0 <strcmp@plt>
   16180:	subs	r7, r0, #0
   16184:	bne	161fc <__assert_fail@plt+0x4d14>
   16188:	bl	11380 <__ctype_b_loc@plt>
   1618c:	cmp	r5, #0
   16190:	mov	r6, r0
   16194:	beq	161cc <__assert_fail@plt+0x4ce4>
   16198:	ldr	r2, [r6]
   1619c:	lsl	r3, r7, #1
   161a0:	ldrh	r3, [r2, r3]
   161a4:	tst	r3, #8
   161a8:	beq	161b8 <__assert_fail@plt+0x4cd0>
   161ac:	ldrb	r1, [r5, r7]
   161b0:	mov	r0, r4
   161b4:	bl	146a0 <__assert_fail@plt+0x31b8>
   161b8:	add	r7, r7, #1
   161bc:	cmp	r7, #256	; 0x100
   161c0:	bne	16198 <__assert_fail@plt+0x4cb0>
   161c4:	mov	r0, #0
   161c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161cc:	ldr	r2, [r6]
   161d0:	lsl	r3, r7, #1
   161d4:	ldrh	r3, [r2, r3]
   161d8:	tst	r3, #8
   161dc:	beq	161ec <__assert_fail@plt+0x4d04>
   161e0:	mov	r1, r7
   161e4:	mov	r0, r4
   161e8:	bl	146a0 <__assert_fail@plt+0x31b8>
   161ec:	add	r7, r7, #1
   161f0:	cmp	r7, #256	; 0x100
   161f4:	bne	161cc <__assert_fail@plt+0x4ce4>
   161f8:	b	161c4 <__assert_fail@plt+0x4cdc>
   161fc:	ldr	r1, [pc, #1476]	; 167c8 <__assert_fail@plt+0x52e0>
   16200:	mov	r0, r6
   16204:	bl	111a0 <strcmp@plt>
   16208:	subs	r7, r0, #0
   1620c:	bne	16280 <__assert_fail@plt+0x4d98>
   16210:	bl	11380 <__ctype_b_loc@plt>
   16214:	cmp	r5, #0
   16218:	mov	r6, r0
   1621c:	beq	16250 <__assert_fail@plt+0x4d68>
   16220:	ldr	r2, [r6]
   16224:	lsl	r3, r7, #1
   16228:	ldrh	r3, [r2, r3]
   1622c:	tst	r3, #2
   16230:	beq	16240 <__assert_fail@plt+0x4d58>
   16234:	ldrb	r1, [r5, r7]
   16238:	mov	r0, r4
   1623c:	bl	146a0 <__assert_fail@plt+0x31b8>
   16240:	add	r7, r7, #1
   16244:	cmp	r7, #256	; 0x100
   16248:	bne	16220 <__assert_fail@plt+0x4d38>
   1624c:	b	161c4 <__assert_fail@plt+0x4cdc>
   16250:	ldr	r2, [r6]
   16254:	lsl	r3, r7, #1
   16258:	ldrh	r3, [r2, r3]
   1625c:	tst	r3, #2
   16260:	beq	16270 <__assert_fail@plt+0x4d88>
   16264:	mov	r1, r7
   16268:	mov	r0, r4
   1626c:	bl	146a0 <__assert_fail@plt+0x31b8>
   16270:	add	r7, r7, #1
   16274:	cmp	r7, #256	; 0x100
   16278:	bne	16250 <__assert_fail@plt+0x4d68>
   1627c:	b	161c4 <__assert_fail@plt+0x4cdc>
   16280:	ldr	r1, [pc, #1336]	; 167c0 <__assert_fail@plt+0x52d8>
   16284:	mov	r0, r6
   16288:	bl	111a0 <strcmp@plt>
   1628c:	subs	r7, r0, #0
   16290:	bne	16304 <__assert_fail@plt+0x4e1c>
   16294:	bl	11380 <__ctype_b_loc@plt>
   16298:	cmp	r5, #0
   1629c:	mov	r6, r0
   162a0:	beq	162d4 <__assert_fail@plt+0x4dec>
   162a4:	ldr	r2, [r6]
   162a8:	lsl	r3, r7, #1
   162ac:	ldrh	r3, [r2, r3]
   162b0:	tst	r3, #512	; 0x200
   162b4:	beq	162c4 <__assert_fail@plt+0x4ddc>
   162b8:	ldrb	r1, [r5, r7]
   162bc:	mov	r0, r4
   162c0:	bl	146a0 <__assert_fail@plt+0x31b8>
   162c4:	add	r7, r7, #1
   162c8:	cmp	r7, #256	; 0x100
   162cc:	bne	162a4 <__assert_fail@plt+0x4dbc>
   162d0:	b	161c4 <__assert_fail@plt+0x4cdc>
   162d4:	ldr	r2, [r6]
   162d8:	lsl	r3, r7, #1
   162dc:	ldrh	r3, [r2, r3]
   162e0:	tst	r3, #512	; 0x200
   162e4:	beq	162f4 <__assert_fail@plt+0x4e0c>
   162e8:	mov	r1, r7
   162ec:	mov	r0, r4
   162f0:	bl	146a0 <__assert_fail@plt+0x31b8>
   162f4:	add	r7, r7, #1
   162f8:	cmp	r7, #256	; 0x100
   162fc:	bne	162d4 <__assert_fail@plt+0x4dec>
   16300:	b	161c4 <__assert_fail@plt+0x4cdc>
   16304:	ldr	r1, [pc, #1216]	; 167cc <__assert_fail@plt+0x52e4>
   16308:	mov	r0, r6
   1630c:	bl	111a0 <strcmp@plt>
   16310:	subs	r7, r0, #0
   16314:	bne	16388 <__assert_fail@plt+0x4ea0>
   16318:	bl	11380 <__ctype_b_loc@plt>
   1631c:	cmp	r5, #0
   16320:	mov	r6, r0
   16324:	beq	16358 <__assert_fail@plt+0x4e70>
   16328:	ldr	r2, [r6]
   1632c:	lsl	r3, r7, #1
   16330:	ldrh	r3, [r2, r3]
   16334:	tst	r3, #8192	; 0x2000
   16338:	beq	16348 <__assert_fail@plt+0x4e60>
   1633c:	ldrb	r1, [r5, r7]
   16340:	mov	r0, r4
   16344:	bl	146a0 <__assert_fail@plt+0x31b8>
   16348:	add	r7, r7, #1
   1634c:	cmp	r7, #256	; 0x100
   16350:	bne	16328 <__assert_fail@plt+0x4e40>
   16354:	b	161c4 <__assert_fail@plt+0x4cdc>
   16358:	ldr	r2, [r6]
   1635c:	lsl	r3, r7, #1
   16360:	ldrh	r3, [r2, r3]
   16364:	tst	r3, #8192	; 0x2000
   16368:	beq	16378 <__assert_fail@plt+0x4e90>
   1636c:	mov	r1, r7
   16370:	mov	r0, r4
   16374:	bl	146a0 <__assert_fail@plt+0x31b8>
   16378:	add	r7, r7, #1
   1637c:	cmp	r7, #256	; 0x100
   16380:	bne	16358 <__assert_fail@plt+0x4e70>
   16384:	b	161c4 <__assert_fail@plt+0x4cdc>
   16388:	ldr	r1, [pc, #1068]	; 167bc <__assert_fail@plt+0x52d4>
   1638c:	mov	r0, r6
   16390:	bl	111a0 <strcmp@plt>
   16394:	subs	r7, r0, #0
   16398:	bne	1640c <__assert_fail@plt+0x4f24>
   1639c:	bl	11380 <__ctype_b_loc@plt>
   163a0:	cmp	r5, #0
   163a4:	mov	r6, r0
   163a8:	beq	163dc <__assert_fail@plt+0x4ef4>
   163ac:	ldr	r2, [r6]
   163b0:	lsl	r3, r7, #1
   163b4:	ldrh	r3, [r2, r3]
   163b8:	tst	r3, #1024	; 0x400
   163bc:	beq	163cc <__assert_fail@plt+0x4ee4>
   163c0:	ldrb	r1, [r5, r7]
   163c4:	mov	r0, r4
   163c8:	bl	146a0 <__assert_fail@plt+0x31b8>
   163cc:	add	r7, r7, #1
   163d0:	cmp	r7, #256	; 0x100
   163d4:	bne	163ac <__assert_fail@plt+0x4ec4>
   163d8:	b	161c4 <__assert_fail@plt+0x4cdc>
   163dc:	ldr	r2, [r6]
   163e0:	lsl	r3, r7, #1
   163e4:	ldrh	r3, [r2, r3]
   163e8:	tst	r3, #1024	; 0x400
   163ec:	beq	163fc <__assert_fail@plt+0x4f14>
   163f0:	mov	r1, r7
   163f4:	mov	r0, r4
   163f8:	bl	146a0 <__assert_fail@plt+0x31b8>
   163fc:	add	r7, r7, #1
   16400:	cmp	r7, #256	; 0x100
   16404:	bne	163dc <__assert_fail@plt+0x4ef4>
   16408:	b	161c4 <__assert_fail@plt+0x4cdc>
   1640c:	ldr	r1, [pc, #956]	; 167d0 <__assert_fail@plt+0x52e8>
   16410:	mov	r0, r6
   16414:	bl	111a0 <strcmp@plt>
   16418:	subs	r7, r0, #0
   1641c:	bne	16490 <__assert_fail@plt+0x4fa8>
   16420:	bl	11380 <__ctype_b_loc@plt>
   16424:	cmp	r5, #0
   16428:	mov	r6, r0
   1642c:	beq	16460 <__assert_fail@plt+0x4f78>
   16430:	ldr	r2, [r6]
   16434:	lsl	r3, r7, #1
   16438:	ldrh	r3, [r2, r3]
   1643c:	tst	r3, #2048	; 0x800
   16440:	beq	16450 <__assert_fail@plt+0x4f68>
   16444:	ldrb	r1, [r5, r7]
   16448:	mov	r0, r4
   1644c:	bl	146a0 <__assert_fail@plt+0x31b8>
   16450:	add	r7, r7, #1
   16454:	cmp	r7, #256	; 0x100
   16458:	bne	16430 <__assert_fail@plt+0x4f48>
   1645c:	b	161c4 <__assert_fail@plt+0x4cdc>
   16460:	ldr	r2, [r6]
   16464:	lsl	r3, r7, #1
   16468:	ldrh	r3, [r2, r3]
   1646c:	tst	r3, #2048	; 0x800
   16470:	beq	16480 <__assert_fail@plt+0x4f98>
   16474:	mov	r1, r7
   16478:	mov	r0, r4
   1647c:	bl	146a0 <__assert_fail@plt+0x31b8>
   16480:	add	r7, r7, #1
   16484:	cmp	r7, #256	; 0x100
   16488:	bne	16460 <__assert_fail@plt+0x4f78>
   1648c:	b	161c4 <__assert_fail@plt+0x4cdc>
   16490:	ldr	r1, [pc, #828]	; 167d4 <__assert_fail@plt+0x52ec>
   16494:	mov	r0, r6
   16498:	bl	111a0 <strcmp@plt>
   1649c:	subs	r7, r0, #0
   164a0:	bne	16514 <__assert_fail@plt+0x502c>
   164a4:	bl	11380 <__ctype_b_loc@plt>
   164a8:	cmp	r5, #0
   164ac:	mov	r6, r0
   164b0:	beq	164e4 <__assert_fail@plt+0x4ffc>
   164b4:	ldr	r2, [r6]
   164b8:	lsl	r3, r7, #1
   164bc:	ldrh	r3, [r2, r3]
   164c0:	tst	r3, #16384	; 0x4000
   164c4:	beq	164d4 <__assert_fail@plt+0x4fec>
   164c8:	ldrb	r1, [r5, r7]
   164cc:	mov	r0, r4
   164d0:	bl	146a0 <__assert_fail@plt+0x31b8>
   164d4:	add	r7, r7, #1
   164d8:	cmp	r7, #256	; 0x100
   164dc:	bne	164b4 <__assert_fail@plt+0x4fcc>
   164e0:	b	161c4 <__assert_fail@plt+0x4cdc>
   164e4:	ldr	r2, [r6]
   164e8:	lsl	r3, r7, #1
   164ec:	ldrh	r3, [r2, r3]
   164f0:	tst	r3, #16384	; 0x4000
   164f4:	beq	16504 <__assert_fail@plt+0x501c>
   164f8:	mov	r1, r7
   164fc:	mov	r0, r4
   16500:	bl	146a0 <__assert_fail@plt+0x31b8>
   16504:	add	r7, r7, #1
   16508:	cmp	r7, #256	; 0x100
   1650c:	bne	164e4 <__assert_fail@plt+0x4ffc>
   16510:	b	161c4 <__assert_fail@plt+0x4cdc>
   16514:	ldr	r1, [pc, #668]	; 167b8 <__assert_fail@plt+0x52d0>
   16518:	mov	r0, r6
   1651c:	bl	111a0 <strcmp@plt>
   16520:	subs	r7, r0, #0
   16524:	bne	16598 <__assert_fail@plt+0x50b0>
   16528:	bl	11380 <__ctype_b_loc@plt>
   1652c:	cmp	r5, #0
   16530:	mov	r6, r0
   16534:	beq	16568 <__assert_fail@plt+0x5080>
   16538:	ldr	r2, [r6]
   1653c:	lsl	r3, r7, #1
   16540:	ldrh	r3, [r2, r3]
   16544:	tst	r3, #256	; 0x100
   16548:	beq	16558 <__assert_fail@plt+0x5070>
   1654c:	ldrb	r1, [r5, r7]
   16550:	mov	r0, r4
   16554:	bl	146a0 <__assert_fail@plt+0x31b8>
   16558:	add	r7, r7, #1
   1655c:	cmp	r7, #256	; 0x100
   16560:	bne	16538 <__assert_fail@plt+0x5050>
   16564:	b	161c4 <__assert_fail@plt+0x4cdc>
   16568:	ldr	r2, [r6]
   1656c:	lsl	r3, r7, #1
   16570:	ldrh	r3, [r2, r3]
   16574:	tst	r3, #256	; 0x100
   16578:	beq	16588 <__assert_fail@plt+0x50a0>
   1657c:	mov	r1, r7
   16580:	mov	r0, r4
   16584:	bl	146a0 <__assert_fail@plt+0x31b8>
   16588:	add	r7, r7, #1
   1658c:	cmp	r7, #256	; 0x100
   16590:	bne	16568 <__assert_fail@plt+0x5080>
   16594:	b	161c4 <__assert_fail@plt+0x4cdc>
   16598:	ldr	r1, [pc, #568]	; 167d8 <__assert_fail@plt+0x52f0>
   1659c:	mov	r0, r6
   165a0:	bl	111a0 <strcmp@plt>
   165a4:	subs	r7, r0, #0
   165a8:	bne	1661c <__assert_fail@plt+0x5134>
   165ac:	bl	11380 <__ctype_b_loc@plt>
   165b0:	cmp	r5, #0
   165b4:	mov	r6, r0
   165b8:	beq	165ec <__assert_fail@plt+0x5104>
   165bc:	ldr	r2, [r6]
   165c0:	lsl	r3, r7, #1
   165c4:	ldrh	r3, [r2, r3]
   165c8:	tst	r3, #1
   165cc:	beq	165dc <__assert_fail@plt+0x50f4>
   165d0:	ldrb	r1, [r5, r7]
   165d4:	mov	r0, r4
   165d8:	bl	146a0 <__assert_fail@plt+0x31b8>
   165dc:	add	r7, r7, #1
   165e0:	cmp	r7, #256	; 0x100
   165e4:	bne	165bc <__assert_fail@plt+0x50d4>
   165e8:	b	161c4 <__assert_fail@plt+0x4cdc>
   165ec:	ldr	r2, [r6]
   165f0:	lsl	r3, r7, #1
   165f4:	ldrh	r3, [r2, r3]
   165f8:	tst	r3, #1
   165fc:	beq	1660c <__assert_fail@plt+0x5124>
   16600:	mov	r1, r7
   16604:	mov	r0, r4
   16608:	bl	146a0 <__assert_fail@plt+0x31b8>
   1660c:	add	r7, r7, #1
   16610:	cmp	r7, #256	; 0x100
   16614:	bne	165ec <__assert_fail@plt+0x5104>
   16618:	b	161c4 <__assert_fail@plt+0x4cdc>
   1661c:	ldr	r1, [pc, #440]	; 167dc <__assert_fail@plt+0x52f4>
   16620:	mov	r0, r6
   16624:	bl	111a0 <strcmp@plt>
   16628:	subs	r7, r0, #0
   1662c:	bne	166a0 <__assert_fail@plt+0x51b8>
   16630:	bl	11380 <__ctype_b_loc@plt>
   16634:	cmp	r5, #0
   16638:	mov	r6, r0
   1663c:	beq	16670 <__assert_fail@plt+0x5188>
   16640:	ldr	r2, [r6]
   16644:	lsl	r3, r7, #1
   16648:	ldrsh	r3, [r2, r3]
   1664c:	cmp	r3, #0
   16650:	bge	16660 <__assert_fail@plt+0x5178>
   16654:	ldrb	r1, [r5, r7]
   16658:	mov	r0, r4
   1665c:	bl	146a0 <__assert_fail@plt+0x31b8>
   16660:	add	r7, r7, #1
   16664:	cmp	r7, #256	; 0x100
   16668:	bne	16640 <__assert_fail@plt+0x5158>
   1666c:	b	161c4 <__assert_fail@plt+0x4cdc>
   16670:	ldr	r2, [r6]
   16674:	lsl	r3, r7, #1
   16678:	ldrsh	r3, [r2, r3]
   1667c:	cmp	r3, #0
   16680:	bge	16690 <__assert_fail@plt+0x51a8>
   16684:	mov	r1, r7
   16688:	mov	r0, r4
   1668c:	bl	146a0 <__assert_fail@plt+0x31b8>
   16690:	add	r7, r7, #1
   16694:	cmp	r7, #256	; 0x100
   16698:	bne	16670 <__assert_fail@plt+0x5188>
   1669c:	b	161c4 <__assert_fail@plt+0x4cdc>
   166a0:	ldr	r1, [pc, #312]	; 167e0 <__assert_fail@plt+0x52f8>
   166a4:	mov	r0, r6
   166a8:	bl	111a0 <strcmp@plt>
   166ac:	subs	r7, r0, #0
   166b0:	bne	16724 <__assert_fail@plt+0x523c>
   166b4:	bl	11380 <__ctype_b_loc@plt>
   166b8:	cmp	r5, #0
   166bc:	mov	r6, r0
   166c0:	beq	166f4 <__assert_fail@plt+0x520c>
   166c4:	ldr	r2, [r6]
   166c8:	lsl	r3, r7, #1
   166cc:	ldrh	r3, [r2, r3]
   166d0:	tst	r3, #4
   166d4:	beq	166e4 <__assert_fail@plt+0x51fc>
   166d8:	ldrb	r1, [r5, r7]
   166dc:	mov	r0, r4
   166e0:	bl	146a0 <__assert_fail@plt+0x31b8>
   166e4:	add	r7, r7, #1
   166e8:	cmp	r7, #256	; 0x100
   166ec:	bne	166c4 <__assert_fail@plt+0x51dc>
   166f0:	b	161c4 <__assert_fail@plt+0x4cdc>
   166f4:	ldr	r2, [r6]
   166f8:	lsl	r3, r7, #1
   166fc:	ldrh	r3, [r2, r3]
   16700:	tst	r3, #4
   16704:	beq	16714 <__assert_fail@plt+0x522c>
   16708:	mov	r1, r7
   1670c:	mov	r0, r4
   16710:	bl	146a0 <__assert_fail@plt+0x31b8>
   16714:	add	r7, r7, #1
   16718:	cmp	r7, #256	; 0x100
   1671c:	bne	166f4 <__assert_fail@plt+0x520c>
   16720:	b	161c4 <__assert_fail@plt+0x4cdc>
   16724:	mov	r0, r6
   16728:	ldr	r1, [pc, #180]	; 167e4 <__assert_fail@plt+0x52fc>
   1672c:	bl	111a0 <strcmp@plt>
   16730:	subs	r6, r0, #0
   16734:	bne	167b0 <__assert_fail@plt+0x52c8>
   16738:	bl	11380 <__ctype_b_loc@plt>
   1673c:	cmp	r5, #0
   16740:	mov	r7, r0
   16744:	beq	16778 <__assert_fail@plt+0x5290>
   16748:	ldr	r2, [r7]
   1674c:	lsl	r3, r6, #1
   16750:	ldrh	r3, [r2, r3]
   16754:	tst	r3, #4096	; 0x1000
   16758:	beq	16768 <__assert_fail@plt+0x5280>
   1675c:	ldrb	r1, [r5, r6]
   16760:	mov	r0, r4
   16764:	bl	146a0 <__assert_fail@plt+0x31b8>
   16768:	add	r6, r6, #1
   1676c:	cmp	r6, #256	; 0x100
   16770:	bne	16748 <__assert_fail@plt+0x5260>
   16774:	b	161c4 <__assert_fail@plt+0x4cdc>
   16778:	ldr	r2, [r7]
   1677c:	lsl	r3, r6, #1
   16780:	ldrh	r3, [r2, r3]
   16784:	tst	r3, #4096	; 0x1000
   16788:	beq	16798 <__assert_fail@plt+0x52b0>
   1678c:	mov	r1, r6
   16790:	mov	r0, r4
   16794:	bl	146a0 <__assert_fail@plt+0x31b8>
   16798:	add	r6, r6, #1
   1679c:	cmp	r6, #256	; 0x100
   167a0:	bne	16778 <__assert_fail@plt+0x5290>
   167a4:	b	161c4 <__assert_fail@plt+0x4cdc>
   167a8:	mov	r0, #12
   167ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167b0:	mov	r0, #4
   167b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167b8:	andeq	r1, r2, sl, lsr r4
   167bc:	andeq	r1, r2, r4, lsr r4
   167c0:	andeq	r1, r2, r0, asr #8
   167c4:	andeq	r1, r2, r6, asr #8
   167c8:	andeq	r1, r2, ip, asr #8
   167cc:	andeq	r1, r2, r2, asr r4
   167d0:	andeq	r1, r2, r1, ror r4
   167d4:	andeq	r1, r2, r8, asr r4
   167d8:	andeq	r1, r2, lr, asr r4
   167dc:	andeq	r1, r2, r4, ror #8
   167e0:	andeq	r1, r2, sl, ror #8
   167e4:	andeq	r1, r2, r0, ror r4
   167e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ec:	mov	r9, #0
   167f0:	sub	sp, sp, #36	; 0x24
   167f4:	mov	r6, r0
   167f8:	mov	fp, r1
   167fc:	mov	r0, #32
   16800:	mov	r1, #1
   16804:	ldr	r7, [sp, #76]	; 0x4c
   16808:	mov	r8, r3
   1680c:	str	r2, [sp, #12]
   16810:	ldrb	sl, [sp, #72]	; 0x48
   16814:	str	r9, [sp, #20]
   16818:	bl	1ff70 <__assert_fail@plt+0xea88>
   1681c:	subs	r4, r0, #0
   16820:	moveq	r3, #12
   16824:	streq	r3, [r7]
   16828:	beq	16968 <__assert_fail@plt+0x5480>
   1682c:	mov	r1, #1
   16830:	mov	r0, #40	; 0x28
   16834:	bl	1ff70 <__assert_fail@plt+0xea88>
   16838:	subs	r5, r0, #0
   1683c:	bne	16854 <__assert_fail@plt+0x536c>
   16840:	mov	r0, r4
   16844:	bl	12bd8 <__assert_fail@plt+0x16f0>
   16848:	mov	r3, #12
   1684c:	str	r3, [r7]
   16850:	b	168a0 <__assert_fail@plt+0x53b8>
   16854:	ldrb	r3, [r5, #16]
   16858:	mov	r0, fp
   1685c:	mov	r2, r5
   16860:	mov	r1, r4
   16864:	bfi	r3, sl, #0, #1
   16868:	strb	r3, [r5, #16]
   1686c:	ldr	r3, [sp, #12]
   16870:	str	r3, [sp]
   16874:	add	r3, sp, #20
   16878:	str	r9, [sp, #4]
   1687c:	bl	160d0 <__assert_fail@plt+0x4be8>
   16880:	subs	fp, r0, #0
   16884:	subeq	r8, r8, #1
   16888:	beq	168b0 <__assert_fail@plt+0x53c8>
   1688c:	mov	r0, r4
   16890:	bl	12bd8 <__assert_fail@plt+0x16f0>
   16894:	mov	r0, r5
   16898:	bl	15998 <__assert_fail@plt+0x44b0>
   1689c:	str	fp, [r7]
   168a0:	mov	r4, #0
   168a4:	b	16968 <__assert_fail@plt+0x5480>
   168a8:	mov	r0, r4
   168ac:	bl	146a0 <__assert_fail@plt+0x31b8>
   168b0:	ldrb	r1, [r8, #1]!
   168b4:	cmp	r1, #0
   168b8:	bne	168a8 <__assert_fail@plt+0x53c0>
   168bc:	cmp	sl, #0
   168c0:	beq	168cc <__assert_fail@plt+0x53e4>
   168c4:	mov	r0, r4
   168c8:	bl	146ec <__assert_fail@plt+0x3204>
   168cc:	ldr	r3, [r6, #92]	; 0x5c
   168d0:	cmp	r3, #1
   168d4:	ble	168e4 <__assert_fail@plt+0x53fc>
   168d8:	mov	r0, r4
   168dc:	ldr	r1, [r6, #60]	; 0x3c
   168e0:	bl	14734 <__assert_fail@plt+0x324c>
   168e4:	mov	r8, #0
   168e8:	mov	r3, #3
   168ec:	str	r4, [sp, #24]
   168f0:	mov	r2, r8
   168f4:	mov	r1, r8
   168f8:	mov	r0, r6
   168fc:	str	r8, [sp, #28]
   16900:	strb	r3, [sp, #28]
   16904:	add	r3, sp, #24
   16908:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1690c:	subs	r9, r0, #0
   16910:	beq	16984 <__assert_fail@plt+0x549c>
   16914:	ldr	r3, [r6, #92]	; 0x5c
   16918:	cmp	r3, #1
   1691c:	ble	16974 <__assert_fail@plt+0x548c>
   16920:	mov	r3, #6
   16924:	mov	r2, r8
   16928:	str	r5, [sp, #24]
   1692c:	mov	r1, r8
   16930:	mov	r0, r6
   16934:	strb	r3, [sp, #28]
   16938:	ldrb	r3, [r6, #88]	; 0x58
   1693c:	orr	r3, r3, #2
   16940:	strb	r3, [r6, #88]	; 0x58
   16944:	add	r3, sp, #24
   16948:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1694c:	subs	r2, r0, #0
   16950:	beq	16984 <__assert_fail@plt+0x549c>
   16954:	mov	r3, #10
   16958:	mov	r1, r9
   1695c:	mov	r0, r6
   16960:	bl	15028 <__assert_fail@plt+0x3b40>
   16964:	mov	r4, r0
   16968:	mov	r0, r4
   1696c:	add	sp, sp, #36	; 0x24
   16970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16974:	mov	r0, r5
   16978:	mov	r4, r9
   1697c:	bl	15998 <__assert_fail@plt+0x44b0>
   16980:	b	16968 <__assert_fail@plt+0x5480>
   16984:	mov	r0, r4
   16988:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1698c:	mov	r0, r5
   16990:	bl	15998 <__assert_fail@plt+0x44b0>
   16994:	b	16848 <__assert_fail@plt+0x5360>
   16998:	ldr	r2, [r0, #80]	; 0x50
   1699c:	cmp	r2, #1
   169a0:	beq	169b8 <__assert_fail@plt+0x54d0>
   169a4:	ldr	ip, [r0, #28]
   169a8:	add	r3, r1, #1
   169ac:	sub	r2, r3, r1
   169b0:	cmp	ip, r3
   169b4:	bgt	169c0 <__assert_fail@plt+0x54d8>
   169b8:	mov	r0, r2
   169bc:	bx	lr
   169c0:	push	{lr}		; (str lr, [sp, #-4]!)
   169c4:	ldr	lr, [r0, #8]
   169c8:	ldr	lr, [lr, r3, lsl #2]
   169cc:	add	r3, r3, #1
   169d0:	cmn	lr, #1
   169d4:	bne	169e4 <__assert_fail@plt+0x54fc>
   169d8:	cmp	ip, r3
   169dc:	sub	r2, r3, r1
   169e0:	bgt	169c4 <__assert_fail@plt+0x54dc>
   169e4:	mov	r0, r2
   169e8:	pop	{pc}		; (ldr pc, [sp], #4)
   169ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169f0:	ldr	r9, [r0]
   169f4:	add	ip, r9, r1, lsl #3
   169f8:	ldrb	r5, [ip, #4]
   169fc:	cmp	r5, #7
   16a00:	bne	16aec <__assert_fail@plt+0x5604>
   16a04:	ldr	r0, [r2, #4]
   16a08:	ldrb	ip, [r0, r3]
   16a0c:	add	r1, r0, r3
   16a10:	cmp	ip, #193	; 0xc1
   16a14:	bls	16a44 <__assert_fail@plt+0x555c>
   16a18:	ldr	r0, [r2, #48]	; 0x30
   16a1c:	add	r2, r3, #1
   16a20:	cmp	r2, r0
   16a24:	bge	16a44 <__assert_fail@plt+0x555c>
   16a28:	cmp	ip, #223	; 0xdf
   16a2c:	ldrb	r2, [r1, #1]
   16a30:	bhi	16a50 <__assert_fail@plt+0x5568>
   16a34:	eor	r2, r2, #128	; 0x80
   16a38:	cmp	r2, #63	; 0x3f
   16a3c:	movls	r4, #2
   16a40:	bls	16a48 <__assert_fail@plt+0x5560>
   16a44:	mov	r4, #0
   16a48:	mov	r0, r4
   16a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a50:	cmp	ip, #239	; 0xef
   16a54:	bhi	16a98 <__assert_fail@plt+0x55b0>
   16a58:	cmp	r2, #159	; 0x9f
   16a5c:	cmpls	ip, #224	; 0xe0
   16a60:	movne	r4, #3
   16a64:	beq	16a44 <__assert_fail@plt+0x555c>
   16a68:	add	r3, r4, r3
   16a6c:	cmp	r0, r3
   16a70:	blt	16a44 <__assert_fail@plt+0x555c>
   16a74:	mov	r3, #1
   16a78:	ldrb	r2, [r1, #1]!
   16a7c:	eor	r2, r2, #128	; 0x80
   16a80:	cmp	r2, #63	; 0x3f
   16a84:	bhi	16a44 <__assert_fail@plt+0x555c>
   16a88:	add	r3, r3, #1
   16a8c:	cmp	r4, r3
   16a90:	bne	16a78 <__assert_fail@plt+0x5590>
   16a94:	b	16a48 <__assert_fail@plt+0x5560>
   16a98:	cmp	ip, #247	; 0xf7
   16a9c:	bhi	16ab4 <__assert_fail@plt+0x55cc>
   16aa0:	cmp	r2, #143	; 0x8f
   16aa4:	cmpls	ip, #240	; 0xf0
   16aa8:	movne	r4, #4
   16aac:	bne	16a68 <__assert_fail@plt+0x5580>
   16ab0:	b	16a44 <__assert_fail@plt+0x555c>
   16ab4:	cmp	ip, #251	; 0xfb
   16ab8:	bhi	16ad0 <__assert_fail@plt+0x55e8>
   16abc:	cmp	r2, #135	; 0x87
   16ac0:	cmpls	ip, #248	; 0xf8
   16ac4:	movne	r4, #5
   16ac8:	bne	16a68 <__assert_fail@plt+0x5580>
   16acc:	b	16a44 <__assert_fail@plt+0x555c>
   16ad0:	cmp	ip, #253	; 0xfd
   16ad4:	bhi	16a44 <__assert_fail@plt+0x555c>
   16ad8:	cmp	r2, #131	; 0x83
   16adc:	cmpls	ip, #252	; 0xfc
   16ae0:	beq	16a44 <__assert_fail@plt+0x555c>
   16ae4:	mov	r4, #6
   16ae8:	b	16a68 <__assert_fail@plt+0x5580>
   16aec:	mov	r7, r1
   16af0:	mov	sl, r0
   16af4:	mov	r1, r3
   16af8:	mov	r0, r2
   16afc:	mov	r6, r3
   16b00:	mov	r8, r2
   16b04:	bl	16998 <__assert_fail@plt+0x54b0>
   16b08:	cmp	r5, #5
   16b0c:	mov	r4, r0
   16b10:	bne	16b54 <__assert_fail@plt+0x566c>
   16b14:	cmp	r0, #1
   16b18:	ble	16a44 <__assert_fail@plt+0x555c>
   16b1c:	ldr	r3, [sl, #128]	; 0x80
   16b20:	tst	r3, #64	; 0x40
   16b24:	bne	16b38 <__assert_fail@plt+0x5650>
   16b28:	ldr	r2, [r8, #4]
   16b2c:	ldrb	r2, [r2, r6]
   16b30:	cmp	r2, #10
   16b34:	beq	16a44 <__assert_fail@plt+0x555c>
   16b38:	tst	r3, #128	; 0x80
   16b3c:	beq	16a48 <__assert_fail@plt+0x5560>
   16b40:	ldr	r3, [r8, #4]
   16b44:	ldrb	r3, [r3, r6]
   16b48:	cmp	r3, #0
   16b4c:	beq	16a44 <__assert_fail@plt+0x555c>
   16b50:	b	16a48 <__assert_fail@plt+0x5560>
   16b54:	sub	r3, r5, #6
   16b58:	cmp	r0, #1
   16b5c:	clz	r3, r3
   16b60:	lsr	r3, r3, #5
   16b64:	movle	r3, #0
   16b68:	cmp	r3, #0
   16b6c:	beq	16a44 <__assert_fail@plt+0x555c>
   16b70:	ldr	r7, [r9, r7, lsl #3]
   16b74:	ldr	r2, [r7, #20]
   16b78:	ldr	r3, [r7, #32]
   16b7c:	cmp	r3, #0
   16b80:	bne	16b90 <__assert_fail@plt+0x56a8>
   16b84:	ldr	r5, [r7, #36]	; 0x24
   16b88:	orrs	r5, r2, r5
   16b8c:	beq	16bbc <__assert_fail@plt+0x56d4>
   16b90:	mov	r1, r6
   16b94:	mov	r0, r8
   16b98:	bl	1475c <__assert_fail@plt+0x3274>
   16b9c:	mov	r5, r0
   16ba0:	mov	r3, #0
   16ba4:	cmp	r3, r2
   16ba8:	blt	16bec <__assert_fail@plt+0x5704>
   16bac:	mov	r6, #0
   16bb0:	ldr	r3, [r7, #36]	; 0x24
   16bb4:	cmp	r3, r6
   16bb8:	bgt	16c04 <__assert_fail@plt+0x571c>
   16bbc:	ldr	r2, [r7, #32]
   16bc0:	mov	r3, #0
   16bc4:	cmp	r2, r3
   16bc8:	bgt	16c24 <__assert_fail@plt+0x573c>
   16bcc:	mov	r3, #0
   16bd0:	ldrb	r2, [r7, #16]
   16bd4:	tst	r2, #1
   16bd8:	moveq	r4, r3
   16bdc:	beq	16a48 <__assert_fail@plt+0x5560>
   16be0:	cmp	r3, #0
   16be4:	bne	16a44 <__assert_fail@plt+0x555c>
   16be8:	b	16a48 <__assert_fail@plt+0x5560>
   16bec:	ldr	r1, [r7]
   16bf0:	ldr	r1, [r1, r3, lsl #2]
   16bf4:	cmp	r1, r5
   16bf8:	beq	16c4c <__assert_fail@plt+0x5764>
   16bfc:	add	r3, r3, #1
   16c00:	b	16ba4 <__assert_fail@plt+0x56bc>
   16c04:	ldr	r3, [r7, #12]
   16c08:	mov	r0, r5
   16c0c:	ldr	r1, [r3, r6, lsl #2]
   16c10:	bl	11194 <iswctype@plt>
   16c14:	cmp	r0, #0
   16c18:	bne	16c4c <__assert_fail@plt+0x5764>
   16c1c:	add	r6, r6, #1
   16c20:	b	16bb0 <__assert_fail@plt+0x56c8>
   16c24:	ldr	r1, [r7, #4]
   16c28:	ldr	r1, [r1, r3, lsl #2]
   16c2c:	cmp	r1, r5
   16c30:	bhi	16c44 <__assert_fail@plt+0x575c>
   16c34:	ldr	r1, [r7, #8]
   16c38:	ldr	r1, [r1, r3, lsl #2]
   16c3c:	cmp	r1, r5
   16c40:	bcs	16c4c <__assert_fail@plt+0x5764>
   16c44:	add	r3, r3, #1
   16c48:	b	16bc4 <__assert_fail@plt+0x56dc>
   16c4c:	mov	r3, r4
   16c50:	b	16bd0 <__assert_fail@plt+0x56e8>
   16c54:	cmp	r1, #0
   16c58:	bxlt	lr
   16c5c:	ldr	r3, [r0, #4]
   16c60:	cmp	r3, r1
   16c64:	subgt	r3, r3, #1
   16c68:	strgt	r3, [r0, #4]
   16c6c:	bxle	lr
   16c70:	ldr	r3, [r0, #4]
   16c74:	cmp	r1, r3
   16c78:	bxge	lr
   16c7c:	add	r1, r1, #1
   16c80:	ldr	r3, [r0, #8]
   16c84:	ldr	r2, [r3, r1, lsl #2]
   16c88:	add	r3, r3, r1, lsl #2
   16c8c:	str	r2, [r3, #-4]
   16c90:	b	16c70 <__assert_fail@plt+0x5788>
   16c94:	ldrb	r3, [r1, #24]
   16c98:	cmp	r3, #4
   16c9c:	bne	16cd0 <__assert_fail@plt+0x57e8>
   16ca0:	ldr	r3, [r0, #132]	; 0x84
   16ca4:	cmp	r3, #0
   16ca8:	beq	16cc8 <__assert_fail@plt+0x57e0>
   16cac:	ldr	r2, [r1, #20]
   16cb0:	ldr	r2, [r3, r2, lsl #2]
   16cb4:	ldr	r3, [r0, #80]	; 0x50
   16cb8:	str	r2, [r1, #20]
   16cbc:	mov	r1, #1
   16cc0:	orr	r3, r3, r1, lsl r2
   16cc4:	str	r3, [r0, #80]	; 0x50
   16cc8:	mov	r0, #0
   16ccc:	bx	lr
   16cd0:	cmp	r3, #17
   16cd4:	bne	16cc8 <__assert_fail@plt+0x57e0>
   16cd8:	ldr	r3, [r1, #4]
   16cdc:	cmp	r3, #0
   16ce0:	beq	16cc8 <__assert_fail@plt+0x57e0>
   16ce4:	ldrb	r2, [r3, #24]
   16ce8:	cmp	r2, #17
   16cec:	bne	16cc8 <__assert_fail@plt+0x57e0>
   16cf0:	ldr	r2, [r3, #20]
   16cf4:	ldr	r3, [r3, #4]
   16cf8:	cmp	r3, #0
   16cfc:	str	r3, [r1, #4]
   16d00:	strne	r1, [r3]
   16d04:	cmp	r2, #31
   16d08:	ldr	r1, [r1, #20]
   16d0c:	ldr	r3, [r0, #132]	; 0x84
   16d10:	ldr	r1, [r3, r1, lsl #2]
   16d14:	str	r1, [r3, r2, lsl #2]
   16d18:	bgt	16cc8 <__assert_fail@plt+0x57e0>
   16d1c:	ldr	r3, [r0, #80]	; 0x50
   16d20:	mov	r1, #1
   16d24:	bic	r3, r3, r1, lsl r2
   16d28:	b	16cc4 <__assert_fail@plt+0x57dc>
   16d2c:	ldrb	r3, [r1, #24]
   16d30:	ldr	r2, [r1, #4]
   16d34:	cmp	r3, #11
   16d38:	streq	r1, [r2, #16]
   16d3c:	beq	16d60 <__assert_fail@plt+0x5878>
   16d40:	cmp	r3, #16
   16d44:	ldr	r3, [r1, #8]
   16d48:	beq	16d68 <__assert_fail@plt+0x5880>
   16d4c:	cmp	r2, #0
   16d50:	ldrne	r0, [r1, #16]
   16d54:	strne	r0, [r2, #16]
   16d58:	cmp	r3, #0
   16d5c:	bne	16d70 <__assert_fail@plt+0x5888>
   16d60:	mov	r0, #0
   16d64:	bx	lr
   16d68:	ldr	r0, [r3, #12]
   16d6c:	str	r0, [r2, #16]
   16d70:	ldr	r2, [r1, #16]
   16d74:	str	r2, [r3, #16]
   16d78:	b	16d60 <__assert_fail@plt+0x5878>
   16d7c:	push	{r4, r5, r6, lr}
   16d80:	mov	r4, r0
   16d84:	mov	r5, r1
   16d88:	mov	r6, r2
   16d8c:	mov	r1, r4
   16d90:	mov	r0, r6
   16d94:	blx	r5
   16d98:	cmp	r0, #0
   16d9c:	popne	{r4, r5, r6, pc}
   16da0:	ldr	r3, [r4, #4]
   16da4:	cmp	r3, #0
   16da8:	moveq	r1, r0
   16dac:	beq	16dcc <__assert_fail@plt+0x58e4>
   16db0:	mov	r4, r3
   16db4:	b	16d8c <__assert_fail@plt+0x58a4>
   16db8:	ldr	r3, [r4]
   16dbc:	mov	r1, r4
   16dc0:	cmp	r3, #0
   16dc4:	popeq	{r4, r5, r6, pc}
   16dc8:	mov	r4, r3
   16dcc:	ldr	r3, [r4, #8]
   16dd0:	cmp	r3, #0
   16dd4:	cmpne	r3, r1
   16dd8:	beq	16db8 <__assert_fail@plt+0x58d0>
   16ddc:	b	16db0 <__assert_fail@plt+0x58c8>
   16de0:	ldr	r3, [r1, #4]
   16de4:	cmp	r3, #0
   16de8:	beq	16f3c <__assert_fail@plt+0x5a54>
   16dec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16df0:	ldr	r4, [r2, #4]
   16df4:	cmp	r4, #0
   16df8:	beq	16f20 <__assert_fail@plt+0x5a38>
   16dfc:	mov	r6, r2
   16e00:	ldr	r2, [r0, #4]
   16e04:	add	r3, r3, r4
   16e08:	mov	r7, r1
   16e0c:	mov	r5, r0
   16e10:	ldr	r4, [r0]
   16e14:	add	r2, r3, r2
   16e18:	cmp	r2, r4
   16e1c:	ble	16e44 <__assert_fail@plt+0x595c>
   16e20:	add	r4, r3, r4
   16e24:	ldr	r0, [r0, #8]
   16e28:	lsl	r1, r4, #2
   16e2c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   16e30:	cmp	r0, #0
   16e34:	moveq	r3, #12
   16e38:	beq	16f24 <__assert_fail@plt+0x5a3c>
   16e3c:	str	r4, [r5]
   16e40:	str	r0, [r5, #8]
   16e44:	ldr	r2, [r5, #4]
   16e48:	ldmib	r7, {r3, r4}
   16e4c:	ldmib	r6, {r0, r8}
   16e50:	add	ip, r2, r3
   16e54:	sub	r3, r3, #1
   16e58:	sub	r2, r2, #1
   16e5c:	add	ip, ip, r0
   16e60:	sub	r0, r0, #1
   16e64:	ldr	lr, [r8, r0, lsl #2]
   16e68:	ldr	r1, [r4, r3, lsl #2]
   16e6c:	cmp	r1, lr
   16e70:	ldreq	lr, [r5, #8]
   16e74:	beq	16e88 <__assert_fail@plt+0x59a0>
   16e78:	blt	16eb0 <__assert_fail@plt+0x59c8>
   16e7c:	subs	r3, r3, #1
   16e80:	b	16eb4 <__assert_fail@plt+0x59cc>
   16e84:	sub	r2, r2, #1
   16e88:	cmp	r2, #0
   16e8c:	blt	16ea0 <__assert_fail@plt+0x59b8>
   16e90:	ldr	r9, [lr, r2, lsl #2]
   16e94:	cmp	r1, r9
   16e98:	blt	16e84 <__assert_fail@plt+0x599c>
   16e9c:	beq	16ea8 <__assert_fail@plt+0x59c0>
   16ea0:	sub	ip, ip, #1
   16ea4:	str	r1, [lr, ip, lsl #2]
   16ea8:	subs	r3, r3, #1
   16eac:	bmi	16eb8 <__assert_fail@plt+0x59d0>
   16eb0:	subs	r0, r0, #1
   16eb4:	bpl	16e64 <__assert_fail@plt+0x597c>
   16eb8:	ldr	r1, [r5, #4]
   16ebc:	ldr	r2, [r7, #4]
   16ec0:	ldr	r0, [r6, #4]
   16ec4:	sub	r3, r1, #1
   16ec8:	add	r2, r1, r2
   16ecc:	add	r2, r2, r0
   16ed0:	ldr	r0, [r5, #8]
   16ed4:	sub	lr, r2, #1
   16ed8:	sub	r2, r2, ip
   16edc:	add	r1, r1, r2
   16ee0:	cmp	r3, #0
   16ee4:	cmpge	r2, #0
   16ee8:	str	r1, [r5, #4]
   16eec:	ble	16f14 <__assert_fail@plt+0x5a2c>
   16ef0:	ldr	r5, [r0, lr, lsl #2]
   16ef4:	add	r1, r3, r2
   16ef8:	ldr	r4, [r0, r3, lsl #2]
   16efc:	cmp	r5, r4
   16f00:	ble	16f2c <__assert_fail@plt+0x5a44>
   16f04:	subs	r2, r2, #1
   16f08:	sub	lr, lr, #1
   16f0c:	str	r5, [r0, r1, lsl #2]
   16f10:	bne	16ef0 <__assert_fail@plt+0x5a08>
   16f14:	lsl	r2, r2, #2
   16f18:	add	r1, r0, ip, lsl #2
   16f1c:	bl	11218 <memcpy@plt>
   16f20:	mov	r3, #0
   16f24:	mov	r0, r3
   16f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f2c:	subs	r3, r3, #1
   16f30:	str	r4, [r0, r1, lsl #2]
   16f34:	bcs	16ef0 <__assert_fail@plt+0x5a08>
   16f38:	b	16f14 <__assert_fail@plt+0x5a2c>
   16f3c:	mov	r0, r3
   16f40:	bx	lr
   16f44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f48:	mov	r7, r1
   16f4c:	mov	r9, r0
   16f50:	mov	r5, r1
   16f54:	mov	r4, r2
   16f58:	str	r2, [r7], #16
   16f5c:	mov	r0, r7
   16f60:	ldr	r1, [r1, #8]
   16f64:	bl	15218 <__assert_fail@plt+0x3d30>
   16f68:	subs	r8, r0, #0
   16f6c:	moveq	r6, r8
   16f70:	beq	16fa0 <__assert_fail@plt+0x5ab8>
   16f74:	mov	r8, #12
   16f78:	mov	r0, r8
   16f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f80:	ldr	r3, [r5, #12]
   16f84:	ldr	r1, [r3, r6, lsl #2]
   16f88:	ldr	r3, [r9]
   16f8c:	add	r3, r3, r1, lsl #3
   16f90:	ldrb	r3, [r3, #4]
   16f94:	tst	r3, #8
   16f98:	beq	17010 <__assert_fail@plt+0x5b28>
   16f9c:	add	r6, r6, #1
   16fa0:	ldr	r3, [r5, #8]
   16fa4:	cmp	r3, r6
   16fa8:	bgt	16f80 <__assert_fail@plt+0x5a98>
   16fac:	ldr	r7, [r9, #32]
   16fb0:	ldr	r3, [r9, #68]	; 0x44
   16fb4:	and	r4, r4, r3
   16fb8:	mov	r3, #12
   16fbc:	mul	r4, r3, r4
   16fc0:	add	r6, r7, r4
   16fc4:	ldr	r1, [r7, r4]
   16fc8:	ldr	r3, [r6, #4]
   16fcc:	cmp	r3, r1
   16fd0:	bgt	16ff8 <__assert_fail@plt+0x5b10>
   16fd4:	add	r1, r1, #1
   16fd8:	ldr	r0, [r6, #8]
   16fdc:	lsl	r9, r1, #1
   16fe0:	lsl	r1, r1, #3
   16fe4:	bl	1fff0 <__assert_fail@plt+0xeb08>
   16fe8:	cmp	r0, #0
   16fec:	beq	16f74 <__assert_fail@plt+0x5a8c>
   16ff0:	str	r9, [r6, #4]
   16ff4:	str	r0, [r6, #8]
   16ff8:	ldr	r3, [r7, r4]
   16ffc:	ldr	r2, [r6, #8]
   17000:	add	r1, r3, #1
   17004:	str	r1, [r7, r4]
   17008:	str	r5, [r2, r3, lsl #2]
   1700c:	b	16f78 <__assert_fail@plt+0x5a90>
   17010:	mov	r0, r7
   17014:	bl	14e7c <__assert_fail@plt+0x3994>
   17018:	cmp	r0, #0
   1701c:	bne	16f9c <__assert_fail@plt+0x5ab4>
   17020:	b	16f74 <__assert_fail@plt+0x5a8c>
   17024:	ldr	r3, [r1, #4]
   17028:	cmp	r3, #0
   1702c:	str	r3, [r0, #4]
   17030:	ble	17084 <__assert_fail@plt+0x5b9c>
   17034:	push	{r4, r5, r6, lr}
   17038:	mov	r4, r0
   1703c:	lsl	r0, r3, #2
   17040:	mov	r5, r1
   17044:	str	r3, [r4]
   17048:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1704c:	cmp	r0, #0
   17050:	mov	r3, r0
   17054:	str	r0, [r4, #8]
   17058:	bne	1706c <__assert_fail@plt+0x5b84>
   1705c:	mov	r0, #12
   17060:	str	r3, [r4]
   17064:	str	r3, [r4, #4]
   17068:	pop	{r4, r5, r6, pc}
   1706c:	ldr	r2, [r5, #4]
   17070:	ldr	r1, [r5, #8]
   17074:	lsl	r2, r2, #2
   17078:	bl	11218 <memcpy@plt>
   1707c:	mov	r0, #0
   17080:	pop	{r4, r5, r6, pc}
   17084:	mov	r3, #0
   17088:	str	r3, [r0]
   1708c:	str	r3, [r0, #4]
   17090:	str	r3, [r0, #8]
   17094:	mov	r0, r3
   17098:	bx	lr
   1709c:	cmp	r1, #0
   170a0:	beq	17144 <__assert_fail@plt+0x5c5c>
   170a4:	ldr	r3, [r1, #4]
   170a8:	cmp	r2, #0
   170ac:	cmpne	r3, #0
   170b0:	ble	17138 <__assert_fail@plt+0x5c50>
   170b4:	ldr	ip, [r2, #4]
   170b8:	cmp	ip, #0
   170bc:	ble	17140 <__assert_fail@plt+0x5c58>
   170c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   170c4:	mov	r7, r0
   170c8:	add	r0, r3, ip
   170cc:	mov	r9, r1
   170d0:	mov	r8, r2
   170d4:	str	r0, [r7]
   170d8:	lsl	r0, r0, #2
   170dc:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   170e0:	cmp	r0, #0
   170e4:	mov	lr, r0
   170e8:	str	r0, [r7, #8]
   170ec:	beq	171a4 <__assert_fail@plt+0x5cbc>
   170f0:	ldr	r5, [r8, #4]
   170f4:	mov	ip, #0
   170f8:	mov	r3, ip
   170fc:	mov	r6, ip
   17100:	ldr	r2, [r9, #4]
   17104:	cmp	r2, r6
   17108:	mov	r4, ip
   1710c:	ble	171ac <__assert_fail@plt+0x5cc4>
   17110:	ldr	sl, [r9, #8]
   17114:	cmp	r5, r3
   17118:	add	r0, lr, ip, lsl #2
   1711c:	add	r1, sl, r6, lsl #2
   17120:	bgt	17174 <__assert_fail@plt+0x5c8c>
   17124:	sub	r6, r2, r6
   17128:	lsl	r2, r6, #2
   1712c:	add	r4, r4, r6
   17130:	bl	11218 <memcpy@plt>
   17134:	b	171d0 <__assert_fail@plt+0x5ce8>
   17138:	cmp	r3, #0
   1713c:	ble	17144 <__assert_fail@plt+0x5c5c>
   17140:	b	17024 <__assert_fail@plt+0x5b3c>
   17144:	cmp	r2, #0
   17148:	beq	1715c <__assert_fail@plt+0x5c74>
   1714c:	ldr	r3, [r2, #4]
   17150:	cmp	r3, #0
   17154:	movgt	r1, r2
   17158:	bgt	17140 <__assert_fail@plt+0x5c58>
   1715c:	mov	r3, #0
   17160:	str	r3, [r0]
   17164:	str	r3, [r0, #4]
   17168:	str	r3, [r0, #8]
   1716c:	mov	r0, r3
   17170:	bx	lr
   17174:	ldr	r0, [r8, #8]
   17178:	ldr	r1, [sl, r6, lsl #2]
   1717c:	ldr	r0, [r0, r3, lsl #2]
   17180:	cmp	r1, r0
   17184:	addgt	r3, r3, #1
   17188:	strgt	r0, [lr, ip, lsl #2]
   1718c:	bgt	1719c <__assert_fail@plt+0x5cb4>
   17190:	addeq	r3, r3, #1
   17194:	add	r6, r6, #1
   17198:	str	r1, [lr, ip, lsl #2]
   1719c:	add	ip, ip, #1
   171a0:	b	17104 <__assert_fail@plt+0x5c1c>
   171a4:	mov	r0, #12
   171a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171ac:	cmp	r5, r3
   171b0:	ble	171d0 <__assert_fail@plt+0x5ce8>
   171b4:	ldr	r1, [r8, #8]
   171b8:	sub	r5, r5, r3
   171bc:	add	r0, lr, r4, lsl #2
   171c0:	lsl	r2, r5, #2
   171c4:	add	r4, r4, r5
   171c8:	add	r1, r1, r3, lsl #2
   171cc:	bl	11218 <memcpy@plt>
   171d0:	mov	r0, #0
   171d4:	str	r4, [r7, #4]
   171d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171e0:	mov	ip, #0
   171e4:	sub	sp, sp, #20
   171e8:	ldr	r4, [r2, #4]
   171ec:	str	ip, [r0]
   171f0:	cmp	r4, ip
   171f4:	addne	r9, r4, r3
   171f8:	bne	17218 <__assert_fail@plt+0x5d30>
   171fc:	mov	r0, r4
   17200:	add	sp, sp, #20
   17204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17208:	ldr	lr, [r2, #8]
   1720c:	ldr	lr, [lr, ip, lsl #2]
   17210:	add	ip, ip, #1
   17214:	add	r9, r9, lr
   17218:	cmp	r4, ip
   1721c:	bgt	17208 <__assert_fail@plt+0x5d20>
   17220:	mov	r5, r3
   17224:	ldr	r3, [r1, #68]	; 0x44
   17228:	mov	r6, r2
   1722c:	mov	r8, r1
   17230:	mov	r7, #0
   17234:	str	r0, [sp, #8]
   17238:	and	r2, r9, r3
   1723c:	mov	r3, #12
   17240:	mul	r3, r3, r2
   17244:	ldr	r2, [r1, #32]
   17248:	ldr	fp, [r2, r3]
   1724c:	add	sl, r2, r3
   17250:	cmp	fp, r7
   17254:	bgt	172a0 <__assert_fail@plt+0x5db8>
   17258:	mov	r1, #1
   1725c:	mov	r0, #56	; 0x38
   17260:	bl	1ff70 <__assert_fail@plt+0xea88>
   17264:	subs	r4, r0, #0
   17268:	beq	1728c <__assert_fail@plt+0x5da4>
   1726c:	add	sl, r4, #4
   17270:	mov	r1, r6
   17274:	mov	r0, sl
   17278:	bl	17024 <__assert_fail@plt+0x5b3c>
   1727c:	subs	r3, r0, #0
   17280:	beq	172e0 <__assert_fail@plt+0x5df8>
   17284:	mov	r0, r4
   17288:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1728c:	ldr	r2, [sp, #8]
   17290:	mov	r3, #12
   17294:	mov	r4, #0
   17298:	str	r3, [r2]
   1729c:	b	171fc <__assert_fail@plt+0x5d14>
   172a0:	ldr	r3, [sl, #8]
   172a4:	ldr	r4, [r3, r7, lsl #2]
   172a8:	ldr	r3, [r4]
   172ac:	cmp	r3, r9
   172b0:	bne	172d8 <__assert_fail@plt+0x5df0>
   172b4:	ldrb	r3, [r4, #52]	; 0x34
   172b8:	and	r3, r3, #15
   172bc:	cmp	r3, r5
   172c0:	bne	172d8 <__assert_fail@plt+0x5df0>
   172c4:	mov	r1, r6
   172c8:	ldr	r0, [r4, #40]	; 0x28
   172cc:	bl	147c8 <__assert_fail@plt+0x32e0>
   172d0:	cmp	r0, #0
   172d4:	bne	171fc <__assert_fail@plt+0x5d14>
   172d8:	add	r7, r7, #1
   172dc:	b	17250 <__assert_fail@plt+0x5d68>
   172e0:	ldrb	r2, [r4, #52]	; 0x34
   172e4:	mov	fp, r3
   172e8:	str	sl, [r4, #40]	; 0x28
   172ec:	bfi	r2, r5, #0, #4
   172f0:	strb	r2, [r4, #52]	; 0x34
   172f4:	and	r2, r5, #4
   172f8:	str	r2, [sp]
   172fc:	and	r2, r5, #2
   17300:	and	r5, r5, #1
   17304:	str	r2, [sp, #4]
   17308:	ldr	r1, [r6, #4]
   1730c:	cmp	fp, r1
   17310:	blt	17330 <__assert_fail@plt+0x5e48>
   17314:	mov	r2, r9
   17318:	mov	r1, r4
   1731c:	mov	r0, r8
   17320:	bl	16f44 <__assert_fail@plt+0x5a5c>
   17324:	cmp	r0, #0
   17328:	beq	171fc <__assert_fail@plt+0x5d14>
   1732c:	b	173bc <__assert_fail@plt+0x5ed4>
   17330:	ldr	r1, [r6, #8]
   17334:	ldr	r0, [r8]
   17338:	ldr	r1, [r1, fp, lsl #2]
   1733c:	add	r0, r0, r1, lsl #3
   17340:	ldr	r7, [r0, #4]
   17344:	ldrb	ip, [r0, #4]
   17348:	ubfx	r7, r7, #8, #10
   1734c:	cmp	ip, #1
   17350:	cmpeq	r7, #0
   17354:	beq	17448 <__assert_fail@plt+0x5f60>
   17358:	ldrb	r1, [r4, #52]	; 0x34
   1735c:	cmp	ip, #2
   17360:	ldrb	r0, [r0, #6]
   17364:	ubfx	lr, r1, #5, #1
   17368:	ubfx	r0, r0, #4, #1
   1736c:	orr	r0, lr, r0
   17370:	bfi	r1, r0, #5, #1
   17374:	strb	r1, [r4, #52]	; 0x34
   17378:	uxtbeq	r1, r1
   1737c:	orreq	r1, r1, #16
   17380:	beq	17394 <__assert_fail@plt+0x5eac>
   17384:	cmp	ip, #4
   17388:	bne	17398 <__assert_fail@plt+0x5eb0>
   1738c:	ldrb	r1, [r4, #52]	; 0x34
   17390:	orr	r1, r1, #64	; 0x40
   17394:	strb	r1, [r4, #52]	; 0x34
   17398:	cmp	r7, #0
   1739c:	beq	17448 <__assert_fail@plt+0x5f60>
   173a0:	ldr	r1, [r4, #40]	; 0x28
   173a4:	cmp	sl, r1
   173a8:	bne	173e8 <__assert_fail@plt+0x5f00>
   173ac:	mov	r0, #12
   173b0:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   173b4:	subs	r3, r0, #0
   173b8:	bne	173c8 <__assert_fail@plt+0x5ee0>
   173bc:	mov	r0, r4
   173c0:	bl	15c28 <__assert_fail@plt+0x4740>
   173c4:	b	1728c <__assert_fail@plt+0x5da4>
   173c8:	mov	r1, r6
   173cc:	str	r3, [r4, #40]	; 0x28
   173d0:	bl	17024 <__assert_fail@plt+0x5b3c>
   173d4:	subs	r3, r0, #0
   173d8:	bne	173bc <__assert_fail@plt+0x5ed4>
   173dc:	ldrb	r1, [r4, #52]	; 0x34
   173e0:	orr	r1, r1, #128	; 0x80
   173e4:	strb	r1, [r4, #52]	; 0x34
   173e8:	tst	r7, #1
   173ec:	beq	173f8 <__assert_fail@plt+0x5f10>
   173f0:	cmp	r5, #0
   173f4:	beq	17430 <__assert_fail@plt+0x5f48>
   173f8:	tst	r7, #2
   173fc:	beq	17408 <__assert_fail@plt+0x5f20>
   17400:	cmp	r5, #0
   17404:	bne	17430 <__assert_fail@plt+0x5f48>
   17408:	tst	r7, #16
   1740c:	beq	1741c <__assert_fail@plt+0x5f34>
   17410:	ldr	r2, [sp, #4]
   17414:	cmp	r2, #0
   17418:	beq	17430 <__assert_fail@plt+0x5f48>
   1741c:	tst	r7, #64	; 0x40
   17420:	beq	17448 <__assert_fail@plt+0x5f60>
   17424:	ldr	r2, [sp]
   17428:	cmp	r2, #0
   1742c:	bne	17448 <__assert_fail@plt+0x5f60>
   17430:	sub	r1, fp, r3
   17434:	mov	r0, sl
   17438:	str	r3, [sp, #12]
   1743c:	bl	16c54 <__assert_fail@plt+0x576c>
   17440:	ldr	r3, [sp, #12]
   17444:	add	r3, r3, #1
   17448:	add	fp, fp, #1
   1744c:	b	17308 <__assert_fail@plt+0x5e20>
   17450:	ldrb	r3, [r1, #24]
   17454:	cmp	r3, #16
   17458:	bne	17478 <__assert_fail@plt+0x5f90>
   1745c:	ldr	r3, [r1, #4]
   17460:	mov	r0, #0
   17464:	ldr	r2, [r3, #12]
   17468:	ldr	r3, [r3, #28]
   1746c:	str	r2, [r1, #12]
   17470:	str	r3, [r1, #28]
   17474:	bx	lr
   17478:	push	{r4, r5, r6, lr}
   1747c:	mov	r4, r1
   17480:	add	r3, r1, #20
   17484:	mov	r5, r0
   17488:	ldm	r3, {r1, r2}
   1748c:	str	r4, [r4, #12]
   17490:	bl	15a10 <__assert_fail@plt+0x4528>
   17494:	cmn	r0, #1
   17498:	str	r0, [r4, #28]
   1749c:	beq	174cc <__assert_fail@plt+0x5fe4>
   174a0:	ldrb	r3, [r4, #24]
   174a4:	cmp	r3, #12
   174a8:	bne	174c4 <__assert_fail@plt+0x5fdc>
   174ac:	ldr	r3, [r5]
   174b0:	ldr	r2, [r4, #20]
   174b4:	add	r0, r3, r0, lsl #3
   174b8:	ldr	r3, [r0, #4]
   174bc:	bfi	r3, r2, #8, #10
   174c0:	str	r3, [r0, #4]
   174c4:	mov	r0, #0
   174c8:	pop	{r4, r5, r6, pc}
   174cc:	mov	r0, #12
   174d0:	pop	{r4, r5, r6, pc}
   174d4:	ldr	r3, [r0]
   174d8:	push	{r4, r5, r6, r7, r8, lr}
   174dc:	mov	r4, r0
   174e0:	cmp	r3, #0
   174e4:	movne	r5, #0
   174e8:	bne	17578 <__assert_fail@plt+0x6090>
   174ec:	ldr	r0, [r4, #12]
   174f0:	mov	r5, #0
   174f4:	mov	r6, #12
   174f8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   174fc:	ldr	r3, [r4, #8]
   17500:	cmp	r3, r5
   17504:	bhi	17588 <__assert_fail@plt+0x60a0>
   17508:	ldr	r0, [r4, #20]
   1750c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17510:	ldr	r0, [r4, #24]
   17514:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17518:	ldr	r0, [r4, #28]
   1751c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17520:	ldr	r0, [r4]
   17524:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17528:	ldr	r3, [r4, #32]
   1752c:	cmp	r3, #0
   17530:	movne	r5, #0
   17534:	movne	r8, #12
   17538:	bne	175f8 <__assert_fail@plt+0x6110>
   1753c:	ldr	r0, [r4, #32]
   17540:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17544:	ldr	r3, [pc, #216]	; 17624 <__assert_fail@plt+0x613c>
   17548:	ldr	r0, [r4, #60]	; 0x3c
   1754c:	cmp	r0, r3
   17550:	bne	1761c <__assert_fail@plt+0x6134>
   17554:	ldr	r0, [r4, #132]	; 0x84
   17558:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1755c:	mov	r0, r4
   17560:	pop	{r4, r5, r6, r7, r8, lr}
   17564:	b	12bd8 <__assert_fail@plt+0x16f0>
   17568:	ldr	r0, [r4]
   1756c:	add	r0, r0, r5, lsl #3
   17570:	add	r5, r5, #1
   17574:	bl	159cc <__assert_fail@plt+0x44e4>
   17578:	ldr	r3, [r4, #8]
   1757c:	cmp	r3, r5
   17580:	bhi	17568 <__assert_fail@plt+0x6080>
   17584:	b	174ec <__assert_fail@plt+0x6004>
   17588:	ldr	r3, [r4, #24]
   1758c:	cmp	r3, #0
   17590:	beq	175a0 <__assert_fail@plt+0x60b8>
   17594:	mla	r3, r6, r5, r3
   17598:	ldr	r0, [r3, #8]
   1759c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   175a0:	ldr	r3, [r4, #28]
   175a4:	cmp	r3, #0
   175a8:	beq	175b8 <__assert_fail@plt+0x60d0>
   175ac:	mla	r3, r6, r5, r3
   175b0:	ldr	r0, [r3, #8]
   175b4:	bl	12bd8 <__assert_fail@plt+0x16f0>
   175b8:	ldr	r3, [r4, #20]
   175bc:	cmp	r3, #0
   175c0:	beq	175d0 <__assert_fail@plt+0x60e8>
   175c4:	mla	r3, r6, r5, r3
   175c8:	ldr	r0, [r3, #8]
   175cc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   175d0:	add	r5, r5, #1
   175d4:	b	174fc <__assert_fail@plt+0x6014>
   175d8:	mla	r6, r8, r5, r6
   175dc:	mov	r7, #0
   175e0:	ldr	r3, [r6]
   175e4:	ldr	r0, [r6, #8]
   175e8:	cmp	r7, r3
   175ec:	blt	1760c <__assert_fail@plt+0x6124>
   175f0:	add	r5, r5, #1
   175f4:	bl	12bd8 <__assert_fail@plt+0x16f0>
   175f8:	ldr	r6, [r4, #32]
   175fc:	ldr	r3, [r4, #68]	; 0x44
   17600:	cmp	r5, r3
   17604:	bls	175d8 <__assert_fail@plt+0x60f0>
   17608:	b	1753c <__assert_fail@plt+0x6054>
   1760c:	ldr	r0, [r0, r7, lsl #2]
   17610:	add	r7, r7, #1
   17614:	bl	15c28 <__assert_fail@plt+0x4740>
   17618:	b	175e0 <__assert_fail@plt+0x60f8>
   1761c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17620:	b	17554 <__assert_fail@plt+0x606c>
   17624:	andeq	r1, r2, r0, asr r2
   17628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1762c:	mov	r9, #12
   17630:	sub	sp, sp, #28
   17634:	mov	r4, #0
   17638:	mov	r8, r0
   1763c:	mov	fp, r1
   17640:	mov	r7, r2
   17644:	ldr	r5, [r0, #28]
   17648:	str	r3, [sp]
   1764c:	str	r4, [sp, #12]
   17650:	str	r4, [sp, #16]
   17654:	str	r4, [sp, #20]
   17658:	mla	r5, r9, r1, r5
   1765c:	ldr	r3, [r5, #4]
   17660:	cmp	r3, r4
   17664:	bgt	17688 <__assert_fail@plt+0x61a0>
   17668:	mov	r4, #0
   1766c:	ldr	r3, [r5, #4]
   17670:	cmp	r3, r4
   17674:	bgt	17764 <__assert_fail@plt+0x627c>
   17678:	ldr	r0, [sp, #20]
   1767c:	mov	r6, #0
   17680:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17684:	b	17750 <__assert_fail@plt+0x6268>
   17688:	ldr	r3, [r5, #8]
   1768c:	ldr	r6, [r3, r4, lsl #2]
   17690:	cmp	fp, r6
   17694:	beq	1775c <__assert_fail@plt+0x6274>
   17698:	ldr	r3, [r8]
   1769c:	add	r3, r3, r6, lsl #3
   176a0:	ldrb	r3, [r3, #4]
   176a4:	tst	r3, #8
   176a8:	beq	1775c <__assert_fail@plt+0x6274>
   176ac:	ldr	r3, [r8, #20]
   176b0:	mul	r6, r9, r6
   176b4:	mov	r0, r5
   176b8:	add	r3, r3, r6
   176bc:	ldr	r1, [r3, #8]
   176c0:	ldr	r3, [r3, #4]
   176c4:	ldr	r2, [r1]
   176c8:	cmp	r3, #1
   176cc:	ldrgt	sl, [r1, #4]
   176d0:	mvnle	sl, #0
   176d4:	mov	r1, r2
   176d8:	str	r2, [sp, #4]
   176dc:	bl	14840 <__assert_fail@plt+0x3358>
   176e0:	cmp	r0, #0
   176e4:	bne	17700 <__assert_fail@plt+0x6218>
   176e8:	ldr	r2, [sp, #4]
   176ec:	mov	r0, r7
   176f0:	mov	r1, r2
   176f4:	bl	14840 <__assert_fail@plt+0x3358>
   176f8:	cmp	r0, #0
   176fc:	bne	1772c <__assert_fail@plt+0x6244>
   17700:	cmp	sl, #0
   17704:	ble	1775c <__assert_fail@plt+0x6274>
   17708:	mov	r1, sl
   1770c:	mov	r0, r5
   17710:	bl	14840 <__assert_fail@plt+0x3358>
   17714:	cmp	r0, #0
   17718:	bne	1775c <__assert_fail@plt+0x6274>
   1771c:	mov	r0, r7
   17720:	bl	14840 <__assert_fail@plt+0x3358>
   17724:	cmp	r0, #0
   17728:	beq	1775c <__assert_fail@plt+0x6274>
   1772c:	ldr	r2, [r8, #28]
   17730:	add	r0, sp, #12
   17734:	ldr	r1, [sp]
   17738:	add	r2, r2, r6
   1773c:	bl	16de0 <__assert_fail@plt+0x58f8>
   17740:	subs	r6, r0, #0
   17744:	beq	1775c <__assert_fail@plt+0x6274>
   17748:	ldr	r0, [sp, #20]
   1774c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17750:	mov	r0, r6
   17754:	add	sp, sp, #28
   17758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1775c:	add	r4, r4, #1
   17760:	b	1765c <__assert_fail@plt+0x6174>
   17764:	ldr	r3, [r5, #8]
   17768:	add	r0, sp, #12
   1776c:	ldr	r6, [r3, r4, lsl #2]
   17770:	mov	r1, r6
   17774:	bl	14840 <__assert_fail@plt+0x3358>
   17778:	cmp	r0, #0
   1777c:	bne	17794 <__assert_fail@plt+0x62ac>
   17780:	mov	r0, r7
   17784:	bl	14840 <__assert_fail@plt+0x3358>
   17788:	sub	r1, r0, #1
   1778c:	mov	r0, r7
   17790:	bl	16c54 <__assert_fail@plt+0x576c>
   17794:	add	r4, r4, #1
   17798:	b	1766c <__assert_fail@plt+0x6184>
   1779c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177a0:	mov	r7, r0
   177a4:	sub	sp, sp, #300	; 0x12c
   177a8:	mov	fp, r1
   177ac:	mov	r4, r2
   177b0:	ldr	r5, [r0]
   177b4:	ldr	r3, [r5, #92]	; 0x5c
   177b8:	cmp	r3, #1
   177bc:	mov	r3, #0
   177c0:	ldreq	r6, [r0, #12]
   177c4:	movne	r6, #0
   177c8:	str	r3, [sp, #4]
   177cc:	str	r3, [sp, #8]
   177d0:	str	r3, [sp, #12]
   177d4:	ubfxeq	r6, r6, #22, #1
   177d8:	ldr	r2, [sp, #4]
   177dc:	ldr	r3, [fp, #8]
   177e0:	cmp	r3, r2
   177e4:	ble	17ae0 <__assert_fail@plt+0x65f8>
   177e8:	ldr	r2, [sp, #4]
   177ec:	ldr	r3, [fp, #12]
   177f0:	ldr	sl, [r3, r2, lsl #2]
   177f4:	ldr	r3, [r5]
   177f8:	lsl	r9, sl, #3
   177fc:	add	r2, r3, r9
   17800:	ldrb	r8, [r2, #4]
   17804:	cmp	r8, #1
   17808:	bne	178f4 <__assert_fail@plt+0x640c>
   1780c:	ldrb	r0, [r3, sl, lsl #3]
   17810:	cmp	r6, #0
   17814:	strb	r8, [r4, r0]
   17818:	beq	17824 <__assert_fail@plt+0x633c>
   1781c:	bl	11230 <tolower@plt>
   17820:	strb	r8, [r4, r0]
   17824:	ldr	r3, [r7, #12]
   17828:	tst	r3, #4194304	; 0x400000
   1782c:	beq	178d8 <__assert_fail@plt+0x63f0>
   17830:	ldr	r3, [r5, #92]	; 0x5c
   17834:	cmp	r3, #1
   17838:	ble	178d8 <__assert_fail@plt+0x63f0>
   1783c:	ldr	r3, [r5]
   17840:	add	r8, sp, #41	; 0x29
   17844:	ldr	r1, [pc, #668]	; 17ae8 <__assert_fail@plt+0x6600>
   17848:	ldrb	r3, [r3, r9]
   1784c:	strb	r3, [sp, #40]	; 0x28
   17850:	ldr	r3, [r5, #8]
   17854:	add	sl, sl, #1
   17858:	cmp	r3, sl
   1785c:	bls	17880 <__assert_fail@plt+0x6398>
   17860:	ldr	r2, [r5]
   17864:	add	r3, r2, sl, lsl #3
   17868:	ldr	r3, [r3, #4]
   1786c:	bic	r3, r3, #-16777216	; 0xff000000
   17870:	bic	r3, r3, #14614528	; 0xdf0000
   17874:	bic	r3, r3, #65280	; 0xff00
   17878:	cmp	r3, r1
   1787c:	beq	178e8 <__assert_fail@plt+0x6400>
   17880:	mov	r3, #0
   17884:	add	r9, sp, #40	; 0x28
   17888:	sub	r8, r8, r9
   1788c:	mov	r1, r9
   17890:	mov	r2, r8
   17894:	add	r0, sp, #28
   17898:	str	r3, [sp, #32]
   1789c:	str	r3, [sp, #36]	; 0x24
   178a0:	add	r3, sp, #32
   178a4:	bl	203cc <__assert_fail@plt+0xeee4>
   178a8:	cmp	r8, r0
   178ac:	bne	178d8 <__assert_fail@plt+0x63f0>
   178b0:	ldr	r0, [sp, #28]
   178b4:	bl	11248 <towlower@plt>
   178b8:	mov	r1, r0
   178bc:	add	r2, sp, #32
   178c0:	mov	r0, r9
   178c4:	bl	11188 <wcrtomb@plt>
   178c8:	cmn	r0, #1
   178cc:	ldrbne	r3, [sp, #40]	; 0x28
   178d0:	movne	r2, #1
   178d4:	strbne	r2, [r4, r3]
   178d8:	ldr	r3, [sp, #4]
   178dc:	add	r3, r3, #1
   178e0:	str	r3, [sp, #4]
   178e4:	b	177d8 <__assert_fail@plt+0x62f0>
   178e8:	ldrb	r3, [r2, sl, lsl #3]
   178ec:	strb	r3, [r8], #1
   178f0:	b	17850 <__assert_fail@plt+0x6368>
   178f4:	cmp	r8, #3
   178f8:	bne	17970 <__assert_fail@plt+0x6488>
   178fc:	mov	r8, #0
   17900:	mov	r2, #1
   17904:	ldr	r1, [r5]
   17908:	lsl	r3, r8, #3
   1790c:	mov	sl, #0
   17910:	ldr	r1, [r1, r9]
   17914:	ldr	r1, [r1, r8]
   17918:	lsr	r0, r1, sl
   1791c:	tst	r0, #1
   17920:	beq	17950 <__assert_fail@plt+0x6468>
   17924:	cmp	r6, #0
   17928:	strb	r2, [r4, r3]
   1792c:	beq	17950 <__assert_fail@plt+0x6468>
   17930:	mov	r0, r3
   17934:	str	r3, [sp, #16]
   17938:	str	r1, [sp, #20]
   1793c:	bl	11230 <tolower@plt>
   17940:	ldr	r3, [sp, #16]
   17944:	mov	r2, #1
   17948:	ldr	r1, [sp, #20]
   1794c:	strb	r2, [r4, r0]
   17950:	add	sl, sl, #1
   17954:	add	r3, r3, #1
   17958:	cmp	sl, #32
   1795c:	bne	17918 <__assert_fail@plt+0x6430>
   17960:	add	r8, r8, #4
   17964:	cmp	r8, #32
   17968:	bne	17904 <__assert_fail@plt+0x641c>
   1796c:	b	178d8 <__assert_fail@plt+0x63f0>
   17970:	cmp	r8, #6
   17974:	bne	17aac <__assert_fail@plt+0x65c4>
   17978:	ldr	sl, [r3, r9]
   1797c:	ldr	r3, [r5, #92]	; 0x5c
   17980:	cmp	r3, #1
   17984:	ble	17aa4 <__assert_fail@plt+0x65bc>
   17988:	ldr	r3, [sl, #36]	; 0x24
   1798c:	cmp	r3, #0
   17990:	bne	179ac <__assert_fail@plt+0x64c4>
   17994:	ldrb	r3, [sl, #16]
   17998:	tst	r3, #1
   1799c:	bne	179ac <__assert_fail@plt+0x64c4>
   179a0:	ldr	r8, [sl, #32]
   179a4:	cmp	r8, #0
   179a8:	beq	17a94 <__assert_fail@plt+0x65ac>
   179ac:	mov	r3, #0
   179b0:	strb	r3, [sp, #32]
   179b4:	ldr	r3, [sp, #8]
   179b8:	mov	r2, #1
   179bc:	add	r1, sp, #32
   179c0:	mov	r0, #0
   179c4:	str	r3, [sp, #40]	; 0x28
   179c8:	ldr	r3, [sp, #12]
   179cc:	str	r3, [sp, #44]	; 0x2c
   179d0:	add	r3, sp, #40	; 0x28
   179d4:	bl	203cc <__assert_fail@plt+0xeee4>
   179d8:	ldrb	r3, [sp, #32]
   179dc:	cmn	r0, #2
   179e0:	moveq	r2, #1
   179e4:	strbeq	r2, [r4, r3]
   179e8:	add	r3, r3, #1
   179ec:	uxtb	r3, r3
   179f0:	cmp	r3, #0
   179f4:	strb	r3, [sp, #32]
   179f8:	bne	179b4 <__assert_fail@plt+0x64cc>
   179fc:	b	178d8 <__assert_fail@plt+0x63f0>
   17a00:	mov	r3, #0
   17a04:	add	r2, sp, #32
   17a08:	lsl	r9, r8, #2
   17a0c:	add	r0, sp, #40	; 0x28
   17a10:	str	r3, [sp, #32]
   17a14:	str	r3, [sp, #36]	; 0x24
   17a18:	ldr	r3, [sl]
   17a1c:	ldr	r1, [r3, r8, lsl #2]
   17a20:	bl	11188 <wcrtomb@plt>
   17a24:	cmn	r0, #1
   17a28:	beq	17a4c <__assert_fail@plt+0x6564>
   17a2c:	ldrb	r0, [sp, #40]	; 0x28
   17a30:	mov	r3, #1
   17a34:	cmp	r6, #0
   17a38:	strb	r3, [r4, r0]
   17a3c:	beq	17a4c <__assert_fail@plt+0x6564>
   17a40:	bl	11230 <tolower@plt>
   17a44:	mov	r3, #1
   17a48:	strb	r3, [r4, r0]
   17a4c:	ldr	r3, [r7, #12]
   17a50:	tst	r3, #4194304	; 0x400000
   17a54:	beq	17a90 <__assert_fail@plt+0x65a8>
   17a58:	ldr	r3, [r5, #92]	; 0x5c
   17a5c:	cmp	r3, #1
   17a60:	ble	17a90 <__assert_fail@plt+0x65a8>
   17a64:	ldr	r3, [sl]
   17a68:	ldr	r0, [r3, r9]
   17a6c:	bl	11248 <towlower@plt>
   17a70:	mov	r1, r0
   17a74:	add	r2, sp, #32
   17a78:	add	r0, sp, #40	; 0x28
   17a7c:	bl	11188 <wcrtomb@plt>
   17a80:	cmn	r0, #1
   17a84:	ldrbne	r3, [sp, #40]	; 0x28
   17a88:	movne	r2, #1
   17a8c:	strbne	r2, [r4, r3]
   17a90:	add	r8, r8, #1
   17a94:	ldr	r3, [sl, #20]
   17a98:	cmp	r3, r8
   17a9c:	bgt	17a00 <__assert_fail@plt+0x6518>
   17aa0:	b	178d8 <__assert_fail@plt+0x63f0>
   17aa4:	mov	r8, #0
   17aa8:	b	17a94 <__assert_fail@plt+0x65ac>
   17aac:	and	r3, r8, #253	; 0xfd
   17ab0:	cmp	r3, #5
   17ab4:	beq	17ac0 <__assert_fail@plt+0x65d8>
   17ab8:	cmp	r8, #2
   17abc:	bne	178d8 <__assert_fail@plt+0x63f0>
   17ac0:	mov	r2, #256	; 0x100
   17ac4:	mov	r1, #1
   17ac8:	mov	r0, r4
   17acc:	bl	113ec <memset@plt>
   17ad0:	cmp	r8, #2
   17ad4:	ldrbeq	r3, [r7, #28]
   17ad8:	orreq	r3, r3, #1
   17adc:	strbeq	r3, [r7, #28]
   17ae0:	add	sp, sp, #300	; 0x12c
   17ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae8:	eoreq	r0, r0, r1
   17aec:	push	{r4, r5, r6, r7, r8, lr}
   17af0:	subs	r4, r0, #0
   17af4:	movne	r5, #0
   17af8:	movne	r7, #24
   17afc:	bne	17b2c <__assert_fail@plt+0x6644>
   17b00:	mov	r0, #0
   17b04:	pop	{r4, r5, r6, r7, r8, pc}
   17b08:	mul	r6, r7, r5
   17b0c:	add	r5, r5, #1
   17b10:	add	r0, r0, r6
   17b14:	ldr	r0, [r0, #20]
   17b18:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17b1c:	ldr	r3, [r4, #8]
   17b20:	add	r3, r3, r6
   17b24:	ldr	r0, [r3, #8]
   17b28:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17b2c:	ldr	r3, [r4]
   17b30:	ldr	r0, [r4, #8]
   17b34:	cmp	r5, r3
   17b38:	blt	17b08 <__assert_fail@plt+0x6620>
   17b3c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   17b40:	b	17b00 <__assert_fail@plt+0x6618>
   17b44:	ldr	r3, [r0]
   17b48:	push	{r4, r5, r6, lr}
   17b4c:	cmp	r3, #0
   17b50:	bne	17b64 <__assert_fail@plt+0x667c>
   17b54:	bl	151d8 <__assert_fail@plt+0x3cf0>
   17b58:	clz	r0, r0
   17b5c:	lsr	r0, r0, #5
   17b60:	pop	{r4, r5, r6, pc}
   17b64:	ldr	r2, [r0, #4]
   17b68:	mov	r4, r0
   17b6c:	mov	r5, r1
   17b70:	ldr	r0, [r0, #8]
   17b74:	cmp	r2, #0
   17b78:	streq	r1, [r0]
   17b7c:	beq	17bf0 <__assert_fail@plt+0x6708>
   17b80:	cmp	r3, r2
   17b84:	bne	17ba4 <__assert_fail@plt+0x66bc>
   17b88:	lsl	r2, r3, #1
   17b8c:	lsl	r1, r3, #3
   17b90:	str	r2, [r4]
   17b94:	bl	1fff0 <__assert_fail@plt+0xeb08>
   17b98:	cmp	r0, #0
   17b9c:	popeq	{r4, r5, r6, pc}
   17ba0:	str	r0, [r4, #8]
   17ba4:	ldr	r2, [r4, #4]
   17ba8:	ldr	r1, [r4, #8]
   17bac:	ldr	r3, [r1]
   17bb0:	cmp	r5, r3
   17bb4:	lsl	r3, r2, #2
   17bb8:	add	r3, r1, r3
   17bbc:	blt	17bd8 <__assert_fail@plt+0x66f0>
   17bc0:	ldr	r0, [r3, #-4]
   17bc4:	cmp	r5, r0
   17bc8:	bge	17bec <__assert_fail@plt+0x6704>
   17bcc:	sub	r2, r2, #1
   17bd0:	str	r0, [r3], #-4
   17bd4:	b	17bc0 <__assert_fail@plt+0x66d8>
   17bd8:	mov	r0, r2
   17bdc:	cmp	r0, #0
   17be0:	bgt	17c04 <__assert_fail@plt+0x671c>
   17be4:	cmp	r2, #0
   17be8:	subge	r2, r2, r2
   17bec:	str	r5, [r1, r2, lsl #2]
   17bf0:	ldr	r3, [r4, #4]
   17bf4:	mov	r0, #1
   17bf8:	add	r3, r3, #1
   17bfc:	str	r3, [r4, #4]
   17c00:	pop	{r4, r5, r6, pc}
   17c04:	ldr	ip, [r3, #-4]
   17c08:	sub	r0, r0, #1
   17c0c:	str	ip, [r3], #-4
   17c10:	b	17bdc <__assert_fail@plt+0x66f4>
   17c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c18:	sub	sp, sp, #20
   17c1c:	mov	r4, r0
   17c20:	mov	r7, r1
   17c24:	mov	fp, r2
   17c28:	mov	r9, #12
   17c2c:	mov	sl, #0
   17c30:	ldr	r6, [sp, #56]	; 0x38
   17c34:	str	r3, [sp, #8]
   17c38:	ldr	ip, [r4]
   17c3c:	ldr	r0, [r4, #20]
   17c40:	add	r1, ip, r7, lsl #3
   17c44:	ldrb	lr, [r1, #4]
   17c48:	cmp	lr, #4
   17c4c:	bne	17cc4 <__assert_fail@plt+0x67dc>
   17c50:	ldr	r1, [r4, #12]
   17c54:	mul	r8, r9, fp
   17c58:	mov	r2, r6
   17c5c:	str	fp, [sp, #12]
   17c60:	add	r0, r0, r8
   17c64:	ldr	r5, [r1, r7, lsl #2]
   17c68:	str	sl, [r0, #4]
   17c6c:	mov	r0, r4
   17c70:	mov	r1, r5
   17c74:	bl	15bb4 <__assert_fail@plt+0x46cc>
   17c78:	cmn	r0, #1
   17c7c:	mov	fp, r0
   17c80:	ldr	r3, [sp, #12]
   17c84:	bne	17c98 <__assert_fail@plt+0x67b0>
   17c88:	mov	r3, #12
   17c8c:	mov	r0, r3
   17c90:	add	sp, sp, #20
   17c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c98:	ldr	r1, [r4, #12]
   17c9c:	ldr	r0, [r1, r7, lsl #2]
   17ca0:	str	r0, [r1, r3, lsl #2]
   17ca4:	ldr	r0, [r4, #20]
   17ca8:	mov	r1, fp
   17cac:	add	r0, r0, r8
   17cb0:	bl	17b44 <__assert_fail@plt+0x665c>
   17cb4:	cmp	r0, #0
   17cb8:	beq	17c88 <__assert_fail@plt+0x67a0>
   17cbc:	mov	r7, r5
   17cc0:	b	17c38 <__assert_fail@plt+0x6750>
   17cc4:	mul	r3, r9, r7
   17cc8:	add	lr, r0, r3
   17ccc:	str	r3, [sp, #12]
   17cd0:	ldr	r3, [lr, #4]
   17cd4:	cmp	r3, #0
   17cd8:	bne	17cec <__assert_fail@plt+0x6804>
   17cdc:	ldr	r1, [r4, #12]
   17ce0:	ldr	r0, [r1, r7, lsl #2]
   17ce4:	str	r0, [r1, fp, lsl #2]
   17ce8:	b	17c8c <__assert_fail@plt+0x67a4>
   17cec:	mul	r8, r9, fp
   17cf0:	ldr	lr, [lr, #8]
   17cf4:	cmp	r3, #1
   17cf8:	ldrne	r1, [r4, #8]
   17cfc:	add	r0, r0, r8
   17d00:	ldr	r5, [lr]
   17d04:	str	sl, [r0, #4]
   17d08:	bne	17d90 <__assert_fail@plt+0x68a8>
   17d0c:	ldr	r3, [sp, #8]
   17d10:	cmp	r7, fp
   17d14:	sub	r3, r7, r3
   17d18:	clz	r3, r3
   17d1c:	lsr	r3, r3, #5
   17d20:	moveq	r3, #0
   17d24:	cmp	r3, #0
   17d28:	beq	17d44 <__assert_fail@plt+0x685c>
   17d2c:	mov	r1, r5
   17d30:	bl	17b44 <__assert_fail@plt+0x665c>
   17d34:	cmp	r0, #0
   17d38:	movne	r3, #0
   17d3c:	bne	17c8c <__assert_fail@plt+0x67a4>
   17d40:	b	17c88 <__assert_fail@plt+0x67a0>
   17d44:	ldr	r3, [r1, #4]
   17d48:	ubfx	r3, r3, #8, #10
   17d4c:	orr	r6, r6, r3
   17d50:	mov	r2, r6
   17d54:	mov	r1, r5
   17d58:	mov	r0, r4
   17d5c:	bl	15bb4 <__assert_fail@plt+0x46cc>
   17d60:	cmn	r0, #1
   17d64:	mov	fp, r0
   17d68:	bne	17ca4 <__assert_fail@plt+0x67bc>
   17d6c:	b	17c88 <__assert_fail@plt+0x67a0>
   17d70:	ldr	r2, [r4, #16]
   17d74:	ldr	r2, [r2, r1, lsl #2]
   17d78:	cmp	r2, r5
   17d7c:	bne	17d90 <__assert_fail@plt+0x68a8>
   17d80:	ldr	r3, [r3, #4]
   17d84:	ubfx	r3, r3, #8, #10
   17d88:	cmp	r6, r3
   17d8c:	beq	17e1c <__assert_fail@plt+0x6934>
   17d90:	sub	r1, r1, #1
   17d94:	add	r3, ip, r1, lsl #3
   17d98:	cmp	r1, #0
   17d9c:	movle	r2, #0
   17da0:	movgt	r2, #1
   17da4:	ldrb	lr, [r3, #6]
   17da8:	ands	r2, r2, lr, lsr #2
   17dac:	bne	17d70 <__assert_fail@plt+0x6888>
   17db0:	mov	r2, r6
   17db4:	mov	r1, r5
   17db8:	mov	r0, r4
   17dbc:	bl	15bb4 <__assert_fail@plt+0x46cc>
   17dc0:	cmn	r0, #1
   17dc4:	mov	r7, r0
   17dc8:	beq	17c88 <__assert_fail@plt+0x67a0>
   17dcc:	ldr	r0, [r4, #20]
   17dd0:	mov	r1, r7
   17dd4:	add	r0, r0, r8
   17dd8:	bl	17b44 <__assert_fail@plt+0x665c>
   17ddc:	cmp	r0, #0
   17de0:	beq	17c88 <__assert_fail@plt+0x67a0>
   17de4:	mov	r2, r7
   17de8:	mov	r1, r5
   17dec:	str	r6, [sp]
   17df0:	mov	r0, r4
   17df4:	ldr	r3, [sp, #8]
   17df8:	bl	17c14 <__assert_fail@plt+0x672c>
   17dfc:	subs	r3, r0, #0
   17e00:	bne	17c8c <__assert_fail@plt+0x67a4>
   17e04:	ldr	r2, [sp, #12]
   17e08:	ldr	r3, [r4, #20]
   17e0c:	add	r3, r3, r2
   17e10:	ldr	r3, [r3, #8]
   17e14:	ldr	r5, [r3, #4]
   17e18:	b	17d50 <__assert_fail@plt+0x6868>
   17e1c:	bl	17b44 <__assert_fail@plt+0x665c>
   17e20:	cmp	r0, #0
   17e24:	bne	17e04 <__assert_fail@plt+0x691c>
   17e28:	b	17c88 <__assert_fail@plt+0x67a0>
   17e2c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17e30:	mov	r6, r0
   17e34:	mov	r5, r1
   17e38:	mov	r4, r2
   17e3c:	mov	r8, r3
   17e40:	mov	r9, #12
   17e44:	ldr	r7, [sp, #40]	; 0x28
   17e48:	mov	r1, r4
   17e4c:	mov	r0, r5
   17e50:	bl	14840 <__assert_fail@plt+0x3358>
   17e54:	cmp	r0, #0
   17e58:	beq	17e64 <__assert_fail@plt+0x697c>
   17e5c:	mov	r0, #0
   17e60:	b	17ea4 <__assert_fail@plt+0x69bc>
   17e64:	ldr	r3, [r6]
   17e68:	add	r2, r3, r4, lsl #3
   17e6c:	ldrb	r2, [r2, #4]
   17e70:	cmp	r2, r7
   17e74:	bne	17eac <__assert_fail@plt+0x69c4>
   17e78:	ldr	r3, [r3, r4, lsl #3]
   17e7c:	cmp	r3, r8
   17e80:	bne	17eac <__assert_fail@plt+0x69c4>
   17e84:	cmp	r7, #9
   17e88:	bne	17e5c <__assert_fail@plt+0x6974>
   17e8c:	mov	r1, r4
   17e90:	mov	r0, r5
   17e94:	bl	17b44 <__assert_fail@plt+0x665c>
   17e98:	cmp	r0, #0
   17e9c:	bne	17e5c <__assert_fail@plt+0x6974>
   17ea0:	mov	r0, #12
   17ea4:	add	sp, sp, #12
   17ea8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17eac:	mov	r1, r4
   17eb0:	mov	r0, r5
   17eb4:	bl	17b44 <__assert_fail@plt+0x665c>
   17eb8:	cmp	r0, #0
   17ebc:	beq	17ea0 <__assert_fail@plt+0x69b8>
   17ec0:	ldr	r3, [r6, #20]
   17ec4:	mul	r4, r9, r4
   17ec8:	add	r3, r3, r4
   17ecc:	ldr	r2, [r3, #4]
   17ed0:	cmp	r2, #0
   17ed4:	beq	17e5c <__assert_fail@plt+0x6974>
   17ed8:	cmp	r2, #2
   17edc:	beq	17ef4 <__assert_fail@plt+0x6a0c>
   17ee0:	ldr	r2, [r6, #20]
   17ee4:	add	r4, r2, r4
   17ee8:	ldr	r3, [r4, #8]
   17eec:	ldr	r4, [r3]
   17ef0:	b	17e48 <__assert_fail@plt+0x6960>
   17ef4:	ldr	r2, [r3, #8]
   17ef8:	mov	r1, r5
   17efc:	mov	r0, r6
   17f00:	mov	r3, r8
   17f04:	str	r7, [sp]
   17f08:	ldr	r2, [r2, #4]
   17f0c:	bl	17e2c <__assert_fail@plt+0x6944>
   17f10:	cmp	r0, #0
   17f14:	beq	17ee0 <__assert_fail@plt+0x69f8>
   17f18:	b	17ea4 <__assert_fail@plt+0x69bc>
   17f1c:	push	{r4, r5, r6, r7, r8, lr}
   17f20:	subs	r7, r1, #0
   17f24:	bne	17f30 <__assert_fail@plt+0x6a48>
   17f28:	mov	r5, #0
   17f2c:	b	17fa4 <__assert_fail@plt+0x6abc>
   17f30:	ldr	r3, [r7, #4]
   17f34:	cmp	r3, #0
   17f38:	beq	17f28 <__assert_fail@plt+0x6a40>
   17f3c:	ldm	r0, {r1, r2}
   17f40:	mov	r4, r0
   17f44:	add	r2, r2, r3, lsl #1
   17f48:	cmp	r1, r2
   17f4c:	bge	17f78 <__assert_fail@plt+0x6a90>
   17f50:	add	r1, r3, r1
   17f54:	ldr	r0, [r0, #8]
   17f58:	lsl	r5, r1, #1
   17f5c:	lsl	r1, r1, #3
   17f60:	bl	1fff0 <__assert_fail@plt+0xeb08>
   17f64:	cmp	r0, #0
   17f68:	moveq	r5, #12
   17f6c:	beq	17fa4 <__assert_fail@plt+0x6abc>
   17f70:	str	r5, [r4]
   17f74:	str	r0, [r4, #8]
   17f78:	ldr	r5, [r4, #4]
   17f7c:	ldr	r2, [r7, #4]
   17f80:	cmp	r5, #0
   17f84:	addne	r6, r5, r2, lsl #1
   17f88:	bne	17fc4 <__assert_fail@plt+0x6adc>
   17f8c:	ldr	r1, [r7, #8]
   17f90:	str	r2, [r4, #4]
   17f94:	ldr	r2, [r7, #4]
   17f98:	ldr	r0, [r4, #8]
   17f9c:	lsl	r2, r2, #2
   17fa0:	bl	11218 <memcpy@plt>
   17fa4:	mov	r0, r5
   17fa8:	pop	{r4, r5, r6, r7, r8, pc}
   17fac:	ldr	r3, [r4, #8]
   17fb0:	ldr	r1, [r7, #8]
   17fb4:	ldr	r0, [r3, r5, lsl #2]
   17fb8:	ldr	r1, [r1, r2, lsl #2]
   17fbc:	cmp	r0, r1
   17fc0:	bne	17fd0 <__assert_fail@plt+0x6ae8>
   17fc4:	sub	r2, r2, #1
   17fc8:	sub	r5, r5, #1
   17fcc:	b	17fe0 <__assert_fail@plt+0x6af8>
   17fd0:	bge	17fc8 <__assert_fail@plt+0x6ae0>
   17fd4:	sub	r6, r6, #1
   17fd8:	sub	r2, r2, #1
   17fdc:	str	r1, [r3, r6, lsl #2]
   17fe0:	cmp	r2, #0
   17fe4:	cmpge	r5, #0
   17fe8:	bge	17fac <__assert_fail@plt+0x6ac4>
   17fec:	cmp	r2, #0
   17ff0:	blt	18010 <__assert_fail@plt+0x6b28>
   17ff4:	ldr	r0, [r4, #8]
   17ff8:	add	r2, r2, #1
   17ffc:	sub	r6, r6, r2
   18000:	lsl	r2, r2, #2
   18004:	ldr	r1, [r7, #8]
   18008:	add	r0, r0, r6, lsl #2
   1800c:	bl	11218 <memcpy@plt>
   18010:	ldr	r1, [r4, #4]
   18014:	ldr	r2, [r7, #4]
   18018:	add	r2, r1, r2, lsl #1
   1801c:	sub	ip, r2, #1
   18020:	subs	r2, r2, r6
   18024:	beq	17f28 <__assert_fail@plt+0x6a40>
   18028:	ldr	r0, [r4, #8]
   1802c:	sub	r3, r1, #1
   18030:	add	r1, r1, r2
   18034:	str	r1, [r4, #4]
   18038:	ldr	r4, [r0, ip, lsl #2]
   1803c:	add	r1, r3, r2
   18040:	ldr	lr, [r0, r3, lsl #2]
   18044:	cmp	r4, lr
   18048:	ble	18060 <__assert_fail@plt+0x6b78>
   1804c:	subs	r2, r2, #1
   18050:	sub	ip, ip, #1
   18054:	str	r4, [r0, r1, lsl #2]
   18058:	bne	18038 <__assert_fail@plt+0x6b50>
   1805c:	b	17f28 <__assert_fail@plt+0x6a40>
   18060:	subs	r3, r3, #1
   18064:	str	lr, [r0, r1, lsl #2]
   18068:	bpl	18038 <__assert_fail@plt+0x6b50>
   1806c:	lsl	r2, r2, #2
   18070:	add	r1, r0, r6, lsl #2
   18074:	bl	11218 <memcpy@plt>
   18078:	b	17f28 <__assert_fail@plt+0x6a40>
   1807c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18080:	sub	sp, sp, #44	; 0x2c
   18084:	mov	r6, #12
   18088:	mov	r4, r1
   1808c:	add	r5, sp, #16
   18090:	mul	r6, r6, r2
   18094:	mov	r7, r2
   18098:	str	r0, [sp, #8]
   1809c:	mov	r0, r5
   180a0:	str	r3, [sp, #12]
   180a4:	ldr	r3, [r1, #20]
   180a8:	add	r3, r3, r6
   180ac:	ldr	r1, [r3, #4]
   180b0:	add	r1, r1, #1
   180b4:	bl	15218 <__assert_fail@plt+0x3d30>
   180b8:	subs	r9, r0, #0
   180bc:	bne	181ec <__assert_fail@plt+0x6d04>
   180c0:	ldr	r3, [sp, #20]
   180c4:	lsl	r8, r7, #3
   180c8:	ldr	r1, [pc, #404]	; 18264 <__assert_fail@plt+0x6d7c>
   180cc:	add	r2, r3, #1
   180d0:	str	r2, [sp, #20]
   180d4:	ldr	r2, [sp, #24]
   180d8:	str	r7, [r2, r3, lsl #2]
   180dc:	mvn	r2, #0
   180e0:	ldr	r3, [r4, #24]
   180e4:	add	r3, r3, r6
   180e8:	str	r2, [r3, #4]
   180ec:	ldr	r2, [r4]
   180f0:	add	r3, r2, r8
   180f4:	ldr	r3, [r3, #4]
   180f8:	and	r1, r1, r3
   180fc:	cmp	r1, #0
   18100:	bne	1812c <__assert_fail@plt+0x6c44>
   18104:	ldr	r3, [r4]
   18108:	add	r8, r3, r8
   1810c:	ldrb	r3, [r8, #4]
   18110:	tst	r3, #8
   18114:	bne	18254 <__assert_fail@plt+0x6d6c>
   18118:	ldr	r3, [r4, #24]
   1811c:	ldm	r5, {r0, r1, r2}
   18120:	add	r6, r3, r6
   18124:	stm	r6, {r0, r1, r2}
   18128:	b	181e0 <__assert_fail@plt+0x6cf8>
   1812c:	ldr	r1, [r4, #20]
   18130:	add	r1, r1, r6
   18134:	ldr	r0, [r1, #4]
   18138:	cmp	r0, #0
   1813c:	beq	18104 <__assert_fail@plt+0x6c1c>
   18140:	ldr	r1, [r1, #8]
   18144:	ldr	r1, [r1]
   18148:	add	r2, r2, r1, lsl #3
   1814c:	ldrb	r2, [r2, #6]
   18150:	tst	r2, #4
   18154:	bne	18104 <__assert_fail@plt+0x6c1c>
   18158:	ubfx	r3, r3, #8, #10
   1815c:	mov	r0, r4
   18160:	mov	r2, r7
   18164:	mov	r1, r7
   18168:	str	r3, [sp]
   1816c:	mov	r3, r7
   18170:	bl	17c14 <__assert_fail@plt+0x672c>
   18174:	cmp	r0, #0
   18178:	beq	18104 <__assert_fail@plt+0x6c1c>
   1817c:	mov	r9, r0
   18180:	b	181ec <__assert_fail@plt+0x6d04>
   18184:	ldr	r3, [r3, #8]
   18188:	ldr	r2, [r3, r7, lsl #2]
   1818c:	mov	r3, #12
   18190:	mul	fp, r3, r2
   18194:	add	r1, r1, fp
   18198:	ldr	r3, [r1, #4]
   1819c:	cmn	r3, #1
   181a0:	bne	181f8 <__assert_fail@plt+0x6d10>
   181a4:	mov	sl, #1
   181a8:	add	r7, r7, #1
   181ac:	ldr	r3, [r4, #20]
   181b0:	ldr	r1, [r4, #24]
   181b4:	add	r3, r3, r6
   181b8:	ldr	r2, [r3, #4]
   181bc:	cmp	r2, r7
   181c0:	bgt	18184 <__assert_fail@plt+0x6c9c>
   181c4:	ldr	r3, [sp, #12]
   181c8:	add	r1, r1, r6
   181cc:	eor	r3, r3, #1
   181d0:	tst	sl, r3
   181d4:	movne	r3, #0
   181d8:	strne	r3, [r1, #4]
   181dc:	beq	18118 <__assert_fail@plt+0x6c30>
   181e0:	ldm	r5, {r0, r1, r2}
   181e4:	ldr	r3, [sp, #8]
   181e8:	stm	r3, {r0, r1, r2}
   181ec:	mov	r0, r9
   181f0:	add	sp, sp, #44	; 0x2c
   181f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181f8:	cmp	r3, #0
   181fc:	bne	18248 <__assert_fail@plt+0x6d60>
   18200:	mov	r1, r4
   18204:	mov	r0, r8
   18208:	bl	1807c <__assert_fail@plt+0x6b94>
   1820c:	cmp	r0, #0
   18210:	bne	1817c <__assert_fail@plt+0x6c94>
   18214:	mov	r1, r8
   18218:	mov	r0, r5
   1821c:	bl	17f1c <__assert_fail@plt+0x6a34>
   18220:	cmp	r0, #0
   18224:	bne	1817c <__assert_fail@plt+0x6c94>
   18228:	ldr	r3, [r4, #24]
   1822c:	add	fp, r3, fp
   18230:	ldr	r3, [fp, #4]
   18234:	cmp	r3, #0
   18238:	bne	181a8 <__assert_fail@plt+0x6cc0>
   1823c:	ldr	r0, [sp, #36]	; 0x24
   18240:	bl	12bd8 <__assert_fail@plt+0x16f0>
   18244:	b	181a4 <__assert_fail@plt+0x6cbc>
   18248:	ldm	r1, {r0, r1, r2}
   1824c:	stm	r8, {r0, r1, r2}
   18250:	b	18214 <__assert_fail@plt+0x6d2c>
   18254:	mov	r7, #0
   18258:	add	r8, sp, #28
   1825c:	mov	sl, r7
   18260:	b	181ac <__assert_fail@plt+0x6cc4>
   18264:	andeq	pc, r3, r0, lsl #30
   18268:	cmp	r1, #0
   1826c:	push	{r4, r5, r6, lr}
   18270:	mov	r4, r0
   18274:	bge	18280 <__assert_fail@plt+0x6d98>
   18278:	ldr	r0, [r4, #60]	; 0x3c
   1827c:	pop	{r4, r5, r6, pc}
   18280:	ldr	r3, [r0, #48]	; 0x30
   18284:	cmp	r3, r1
   18288:	bne	1829c <__assert_fail@plt+0x6db4>
   1828c:	tst	r2, #2
   18290:	movne	r0, #8
   18294:	moveq	r0, #10
   18298:	pop	{r4, r5, r6, pc}
   1829c:	ldr	r3, [r0, #80]	; 0x50
   182a0:	cmp	r3, #1
   182a4:	ldrgt	r3, [r0, #8]
   182a8:	bgt	182dc <__assert_fail@plt+0x6df4>
   182ac:	ldr	r3, [r0, #4]
   182b0:	ldr	r0, [r0, #68]	; 0x44
   182b4:	ldrb	r2, [r3, r1]
   182b8:	mov	r1, r2
   182bc:	bl	146d4 <__assert_fail@plt+0x31ec>
   182c0:	cmp	r0, #0
   182c4:	bne	18340 <__assert_fail@plt+0x6e58>
   182c8:	cmp	r2, #10
   182cc:	popne	{r4, r5, r6, pc}
   182d0:	b	18324 <__assert_fail@plt+0x6e3c>
   182d4:	subs	r1, r1, #1
   182d8:	bcc	18278 <__assert_fail@plt+0x6d90>
   182dc:	ldr	r5, [r3, r1, lsl #2]
   182e0:	cmn	r5, #1
   182e4:	beq	182d4 <__assert_fail@plt+0x6dec>
   182e8:	ldrb	r3, [r4, #78]	; 0x4e
   182ec:	cmp	r3, #0
   182f0:	beq	1831c <__assert_fail@plt+0x6e34>
   182f4:	mov	r0, r5
   182f8:	bl	113d4 <iswalnum@plt>
   182fc:	sub	r3, r5, #95	; 0x5f
   18300:	cmp	r0, #0
   18304:	clz	r3, r3
   18308:	movne	r0, #1
   1830c:	lsr	r3, r3, #5
   18310:	moveq	r0, r3
   18314:	cmp	r0, #0
   18318:	bne	18340 <__assert_fail@plt+0x6e58>
   1831c:	cmp	r5, #10
   18320:	bne	18338 <__assert_fail@plt+0x6e50>
   18324:	ldrb	r3, [r4, #77]	; 0x4d
   18328:	cmp	r3, #0
   1832c:	moveq	r0, #0
   18330:	movne	r0, #2
   18334:	pop	{r4, r5, r6, pc}
   18338:	mov	r0, #0
   1833c:	pop	{r4, r5, r6, pc}
   18340:	mov	r0, #1
   18344:	pop	{r4, r5, r6, pc}
   18348:	ldr	r3, [r0, #4]
   1834c:	push	{r4, r5, r6, lr}
   18350:	mov	r4, r1
   18354:	mov	r5, r0
   18358:	mov	r6, r2
   1835c:	ldrb	r1, [r3, r2]
   18360:	ldrb	r3, [r4, #4]
   18364:	sub	r3, r3, #1
   18368:	cmp	r3, #6
   1836c:	ldrls	pc, [pc, r3, lsl #2]
   18370:	b	18454 <__assert_fail@plt+0x6f6c>
   18374:	muleq	r1, r0, r3
   18378:	andeq	r8, r1, r4, asr r4
   1837c:	andeq	r8, r1, r4, lsl #8
   18380:	andeq	r8, r1, r4, asr r4
   18384:	andeq	r8, r1, r0, lsr #8
   18388:	andeq	r8, r1, r4, asr r4
   1838c:	andeq	r8, r1, r8, lsl r4
   18390:	ldrb	r3, [r4]
   18394:	cmp	r3, r1
   18398:	bne	18454 <__assert_fail@plt+0x6f6c>
   1839c:	ldr	r3, [pc, #192]	; 18464 <__assert_fail@plt+0x6f7c>
   183a0:	ldr	r4, [r4, #4]
   183a4:	and	r3, r3, r4
   183a8:	cmp	r3, #0
   183ac:	beq	1845c <__assert_fail@plt+0x6f74>
   183b0:	mov	r1, r6
   183b4:	mov	r0, r5
   183b8:	ldr	r2, [r5, #88]	; 0x58
   183bc:	bl	18268 <__assert_fail@plt+0x6d80>
   183c0:	ubfx	r3, r4, #8, #10
   183c4:	tst	r3, #4
   183c8:	beq	183d4 <__assert_fail@plt+0x6eec>
   183cc:	ands	r1, r0, #1
   183d0:	beq	18454 <__assert_fail@plt+0x6f6c>
   183d4:	tst	r3, #8
   183d8:	beq	183e4 <__assert_fail@plt+0x6efc>
   183dc:	tst	r0, #1
   183e0:	bne	18454 <__assert_fail@plt+0x6f6c>
   183e4:	tst	r3, #32
   183e8:	beq	183f4 <__assert_fail@plt+0x6f0c>
   183ec:	ands	r1, r0, #2
   183f0:	beq	18454 <__assert_fail@plt+0x6f6c>
   183f4:	tst	r3, #128	; 0x80
   183f8:	beq	1845c <__assert_fail@plt+0x6f74>
   183fc:	ubfx	r0, r0, #3, #1
   18400:	pop	{r4, r5, r6, pc}
   18404:	ldr	r0, [r4]
   18408:	bl	146d4 <__assert_fail@plt+0x31ec>
   1840c:	cmp	r0, #0
   18410:	bne	1839c <__assert_fail@plt+0x6eb4>
   18414:	pop	{r4, r5, r6, pc}
   18418:	tst	r1, #128	; 0x80
   1841c:	bne	18454 <__assert_fail@plt+0x6f6c>
   18420:	cmp	r1, #10
   18424:	bne	1843c <__assert_fail@plt+0x6f54>
   18428:	ldr	r3, [r5, #84]	; 0x54
   1842c:	ldr	r0, [r3, #128]	; 0x80
   18430:	ands	r0, r0, #64	; 0x40
   18434:	bne	1839c <__assert_fail@plt+0x6eb4>
   18438:	pop	{r4, r5, r6, pc}
   1843c:	cmp	r1, #0
   18440:	bne	1839c <__assert_fail@plt+0x6eb4>
   18444:	ldr	r3, [r5, #84]	; 0x54
   18448:	ldr	r3, [r3, #128]	; 0x80
   1844c:	tst	r3, #128	; 0x80
   18450:	beq	1839c <__assert_fail@plt+0x6eb4>
   18454:	mov	r0, #0
   18458:	pop	{r4, r5, r6, pc}
   1845c:	mov	r0, #1
   18460:	pop	{r4, r5, r6, pc}
   18464:	andeq	pc, r3, r0, lsl #30
   18468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1846c:	mov	r4, r0
   18470:	sub	sp, sp, #28
   18474:	mov	r6, r1
   18478:	mov	sl, r2
   1847c:	ldr	r5, [r0, #24]
   18480:	cmp	r5, r1
   18484:	suble	r5, r1, r5
   18488:	ble	184e8 <__assert_fail@plt+0x7000>
   1848c:	ldr	r3, [r0, #80]	; 0x50
   18490:	mov	r5, r1
   18494:	cmp	r3, #1
   18498:	movgt	r3, #0
   1849c:	movgt	r2, #0
   184a0:	strdgt	r2, [r0, #16]
   184a4:	tst	sl, #1
   184a8:	ldr	r3, [r0, #44]	; 0x2c
   184ac:	str	r3, [r0, #48]	; 0x30
   184b0:	ldr	r3, [r0, #52]	; 0x34
   184b4:	str	r3, [r0, #56]	; 0x38
   184b8:	mov	r3, #0
   184bc:	str	r3, [r0, #24]
   184c0:	str	r3, [r0, #28]
   184c4:	str	r3, [r0, #32]
   184c8:	strb	r3, [r0, #76]	; 0x4c
   184cc:	movne	r3, #4
   184d0:	moveq	r3, #6
   184d4:	str	r3, [r0, #60]	; 0x3c
   184d8:	ldrb	r3, [r0, #75]	; 0x4b
   184dc:	cmp	r3, #0
   184e0:	ldreq	r3, [r0]
   184e4:	streq	r3, [r0, #4]
   184e8:	cmp	r5, #0
   184ec:	beq	185ec <__assert_fail@plt+0x7104>
   184f0:	ldrb	r3, [r4, #76]	; 0x4c
   184f4:	ldr	r2, [r4, #32]
   184f8:	ldr	r8, [r4, #28]
   184fc:	cmp	r2, r5
   18500:	ble	18790 <__assert_fail@plt+0x72a8>
   18504:	cmp	r3, #0
   18508:	beq	18720 <__assert_fail@plt+0x7238>
   1850c:	ldr	r9, [r4, #12]
   18510:	mov	r3, r8
   18514:	mov	r2, #0
   18518:	add	r7, r2, r3
   1851c:	add	r7, r7, r7, lsr #31
   18520:	asr	r7, r7, #1
   18524:	ldr	r1, [r9, r7, lsl #2]
   18528:	cmp	r1, r5
   1852c:	bgt	18638 <__assert_fail@plt+0x7150>
   18530:	bge	18548 <__assert_fail@plt+0x7060>
   18534:	add	r2, r7, #1
   18538:	cmp	r2, r3
   1853c:	blt	18518 <__assert_fail@plt+0x7030>
   18540:	cmp	r1, r5
   18544:	addlt	r7, r7, #1
   18548:	mov	r2, sl
   1854c:	sub	r1, r7, #1
   18550:	mov	r0, r4
   18554:	bl	18268 <__assert_fail@plt+0x6d80>
   18558:	sub	r3, r5, r7
   1855c:	cmp	r5, r8
   18560:	str	r0, [r4, #60]	; 0x3c
   18564:	clz	r3, r3
   18568:	lsr	r3, r3, #5
   1856c:	movge	r3, #0
   18570:	cmp	r3, #0
   18574:	beq	1865c <__assert_fail@plt+0x7174>
   18578:	ldr	r3, [r9, r7, lsl #2]
   1857c:	cmp	r3, r5
   18580:	bne	1865c <__assert_fail@plt+0x7174>
   18584:	ldr	r0, [r4, #8]
   18588:	lsl	r7, r5, #2
   1858c:	sub	r2, r8, r5
   18590:	lsl	r2, r2, #2
   18594:	add	r1, r0, r7
   18598:	bl	111e8 <memmove@plt>
   1859c:	ldr	r0, [r4, #4]
   185a0:	ldr	r2, [r4, #28]
   185a4:	add	r1, r0, r5
   185a8:	sub	r2, r2, r5
   185ac:	bl	111e8 <memmove@plt>
   185b0:	ldr	r3, [r4, #28]
   185b4:	sub	r3, r3, r5
   185b8:	str	r3, [r4, #28]
   185bc:	ldr	r3, [r4, #32]
   185c0:	sub	r3, r3, r5
   185c4:	str	r3, [r4, #32]
   185c8:	mov	r3, #0
   185cc:	ldr	r2, [r4, #28]
   185d0:	cmp	r2, r3
   185d4:	bgt	18640 <__assert_fail@plt+0x7158>
   185d8:	ldrb	r3, [r4, #75]	; 0x4b
   185dc:	cmp	r3, #0
   185e0:	ldreq	r3, [r4, #4]
   185e4:	addeq	r3, r3, r5
   185e8:	streq	r3, [r4, #4]
   185ec:	ldr	r3, [r4, #48]	; 0x30
   185f0:	str	r6, [r4, #24]
   185f4:	ldr	r2, [r4, #56]	; 0x38
   185f8:	sub	r3, r3, r5
   185fc:	sub	r5, r2, r5
   18600:	ldr	r2, [r4, #80]	; 0x50
   18604:	str	r3, [r4, #48]	; 0x30
   18608:	str	r5, [r4, #56]	; 0x38
   1860c:	cmp	r2, #1
   18610:	ble	18a64 <__assert_fail@plt+0x757c>
   18614:	ldrb	r3, [r4, #72]	; 0x48
   18618:	mov	r0, r4
   1861c:	cmp	r3, #0
   18620:	beq	18a54 <__assert_fail@plt+0x756c>
   18624:	bl	153a4 <__assert_fail@plt+0x3ebc>
   18628:	cmp	r0, #0
   1862c:	beq	18a58 <__assert_fail@plt+0x7570>
   18630:	add	sp, sp, #28
   18634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18638:	mov	r3, r7
   1863c:	b	18538 <__assert_fail@plt+0x7050>
   18640:	ldr	r1, [r4, #12]
   18644:	ldr	r2, [r1, r7]
   18648:	add	r7, r7, #4
   1864c:	sub	r2, r2, r5
   18650:	str	r2, [r1, r3, lsl #2]
   18654:	add	r3, r3, #1
   18658:	b	185cc <__assert_fail@plt+0x70e4>
   1865c:	ldr	r3, [r4, #44]	; 0x2c
   18660:	sub	r3, r3, r6
   18664:	add	r3, r3, r5
   18668:	str	r3, [r4, #48]	; 0x30
   1866c:	ldr	r3, [r4, #52]	; 0x34
   18670:	sub	r3, r3, r6
   18674:	add	r3, r3, r5
   18678:	str	r3, [r4, #56]	; 0x38
   1867c:	mov	r3, #0
   18680:	strb	r3, [r4, #76]	; 0x4c
   18684:	add	r3, r9, r7, lsl #2
   18688:	cmp	r7, #0
   1868c:	ble	1869c <__assert_fail@plt+0x71b4>
   18690:	ldr	r2, [r3, #-4]!
   18694:	cmp	r2, r5
   18698:	beq	186cc <__assert_fail@plt+0x71e4>
   1869c:	cmp	r7, r8
   186a0:	blt	186d4 <__assert_fail@plt+0x71ec>
   186a4:	moveq	r3, #0
   186a8:	streq	r3, [r4, #28]
   186ac:	beq	186c4 <__assert_fail@plt+0x71dc>
   186b0:	ldr	r3, [r9, r7, lsl #2]
   186b4:	sub	r3, r3, r5
   186b8:	cmp	r3, #0
   186bc:	str	r3, [r4, #28]
   186c0:	bne	18714 <__assert_fail@plt+0x722c>
   186c4:	ldr	r3, [r4, #28]
   186c8:	b	18788 <__assert_fail@plt+0x72a0>
   186cc:	sub	r7, r7, #1
   186d0:	b	18688 <__assert_fail@plt+0x71a0>
   186d4:	ldr	r3, [r4, #8]
   186d8:	ldr	r3, [r3, r7, lsl #2]
   186dc:	cmn	r3, #1
   186e0:	bne	186b0 <__assert_fail@plt+0x71c8>
   186e4:	add	r7, r7, #1
   186e8:	b	1869c <__assert_fail@plt+0x71b4>
   186ec:	ldr	r2, [r4, #8]
   186f0:	str	r1, [r2, r3, lsl #2]
   186f4:	add	r3, r3, #1
   186f8:	ldr	r2, [r4, #28]
   186fc:	cmp	r2, r3
   18700:	bgt	186ec <__assert_fail@plt+0x7204>
   18704:	mov	r1, #255	; 0xff
   18708:	ldr	r0, [r4, #4]
   1870c:	bl	113ec <memset@plt>
   18710:	b	186c4 <__assert_fail@plt+0x71dc>
   18714:	mov	r3, #0
   18718:	mvn	r1, #0
   1871c:	b	186f8 <__assert_fail@plt+0x7210>
   18720:	mov	r2, sl
   18724:	sub	r1, r5, #1
   18728:	mov	r0, r4
   1872c:	bl	18268 <__assert_fail@plt+0x6d80>
   18730:	ldr	r3, [r4, #80]	; 0x50
   18734:	str	r0, [r4, #60]	; 0x3c
   18738:	cmp	r3, #1
   1873c:	ble	18754 <__assert_fail@plt+0x726c>
   18740:	ldr	r0, [r4, #8]
   18744:	sub	r2, r8, r5
   18748:	lsl	r2, r2, #2
   1874c:	add	r1, r0, r5, lsl #2
   18750:	bl	111e8 <memmove@plt>
   18754:	ldrb	r3, [r4, #75]	; 0x4b
   18758:	cmp	r3, #0
   1875c:	beq	18774 <__assert_fail@plt+0x728c>
   18760:	ldr	r0, [r4, #4]
   18764:	ldr	r2, [r4, #28]
   18768:	add	r1, r0, r5
   1876c:	sub	r2, r2, r5
   18770:	bl	111e8 <memmove@plt>
   18774:	ldr	r3, [r4, #28]
   18778:	sub	r3, r3, r5
   1877c:	str	r3, [r4, #28]
   18780:	ldr	r3, [r4, #32]
   18784:	sub	r3, r3, r5
   18788:	str	r3, [r4, #32]
   1878c:	b	185d8 <__assert_fail@plt+0x70f0>
   18790:	cmp	r3, #0
   18794:	beq	187c0 <__assert_fail@plt+0x72d8>
   18798:	ldr	r3, [r4, #44]	; 0x2c
   1879c:	sub	r3, r3, r6
   187a0:	add	r3, r3, r5
   187a4:	str	r3, [r4, #48]	; 0x30
   187a8:	ldr	r3, [r4, #52]	; 0x34
   187ac:	sub	r3, r3, r6
   187b0:	add	r3, r3, r5
   187b4:	str	r3, [r4, #56]	; 0x38
   187b8:	mov	r3, #0
   187bc:	strb	r3, [r4, #76]	; 0x4c
   187c0:	mov	r1, #0
   187c4:	ldr	r7, [r4, #24]
   187c8:	ldr	r3, [r4, #80]	; 0x50
   187cc:	str	r1, [r4, #28]
   187d0:	cmp	r3, #1
   187d4:	ble	189fc <__assert_fail@plt+0x7514>
   187d8:	ldrb	r2, [r4, #73]	; 0x49
   187dc:	cmp	r2, r1
   187e0:	beq	188b0 <__assert_fail@plt+0x73c8>
   187e4:	ldr	r2, [r4]
   187e8:	sub	r3, r5, r3
   187ec:	add	r7, r2, r7
   187f0:	add	r3, r7, r3
   187f4:	cmp	r2, r3
   187f8:	movcs	r3, r2
   187fc:	sub	r2, r5, #1
   18800:	add	r2, r7, r2
   18804:	cmp	r2, r3
   18808:	mov	r9, r2
   1880c:	bcc	188b0 <__assert_fail@plt+0x73c8>
   18810:	mov	r2, r9
   18814:	ldrb	r1, [r2], #-1
   18818:	and	r1, r1, #192	; 0xc0
   1881c:	cmp	r1, #128	; 0x80
   18820:	beq	18804 <__assert_fail@plt+0x731c>
   18824:	ldr	r2, [r4, #48]	; 0x30
   18828:	ldr	r0, [r4, #64]	; 0x40
   1882c:	add	r2, r7, r2
   18830:	sub	r2, r2, r9
   18834:	cmp	r0, #0
   18838:	moveq	ip, r9
   1883c:	beq	1885c <__assert_fail@plt+0x7374>
   18840:	cmp	r2, #6
   18844:	add	r1, sp, #8
   18848:	movlt	r3, r2
   1884c:	movge	r3, #6
   18850:	subs	r3, r3, #1
   18854:	bpl	18908 <__assert_fail@plt+0x7420>
   18858:	mov	ip, r1
   1885c:	mov	r0, #0
   18860:	mov	r1, #0
   18864:	add	r3, sp, #16
   18868:	add	r7, r7, r5
   1886c:	strd	r0, [sp, #16]
   18870:	mov	r1, ip
   18874:	add	r0, sp, #4
   18878:	sub	r9, r7, r9
   1887c:	bl	203cc <__assert_fail@plt+0xeee4>
   18880:	cmp	r9, r0
   18884:	bhi	188b0 <__assert_fail@plt+0x73c8>
   18888:	cmn	r0, #3
   1888c:	bhi	188b0 <__assert_fail@plt+0x73c8>
   18890:	ldr	fp, [sp, #4]
   18894:	mov	r2, #0
   18898:	mov	r3, #0
   1889c:	sub	r0, r0, r9
   188a0:	strd	r2, [r4, #16]
   188a4:	str	r0, [r4, #28]
   188a8:	cmn	fp, #1
   188ac:	bne	18980 <__assert_fail@plt+0x7498>
   188b0:	ldr	r7, [r4, #24]
   188b4:	mvn	fp, #0
   188b8:	add	r9, r4, #16
   188bc:	ldr	r3, [r4, #32]
   188c0:	add	r7, r7, r3
   188c4:	cmp	r6, r7
   188c8:	bgt	18918 <__assert_fail@plt+0x7430>
   188cc:	sub	r7, r7, r6
   188d0:	cmn	fp, #1
   188d4:	str	r7, [r4, #28]
   188d8:	bne	18980 <__assert_fail@plt+0x7498>
   188dc:	mov	r2, sl
   188e0:	sub	r1, r8, #1
   188e4:	mov	r0, r4
   188e8:	bl	18268 <__assert_fail@plt+0x6d80>
   188ec:	str	r0, [r4, #60]	; 0x3c
   188f0:	ldr	r3, [r4, #28]
   188f4:	cmp	r3, #0
   188f8:	beq	186c4 <__assert_fail@plt+0x71dc>
   188fc:	mov	r3, #0
   18900:	mvn	r1, #0
   18904:	b	189e0 <__assert_fail@plt+0x74f8>
   18908:	ldrb	ip, [r9, r3]
   1890c:	ldrb	ip, [r0, ip]
   18910:	strb	ip, [r1, r3]
   18914:	b	18850 <__assert_fail@plt+0x7368>
   18918:	ldm	r9, {r0, r1}
   1891c:	add	r3, sp, #16
   18920:	ldr	fp, [r4, #44]	; 0x2c
   18924:	stm	r3, {r0, r1}
   18928:	mov	r3, r9
   1892c:	add	r0, sp, #8
   18930:	ldr	r1, [r4]
   18934:	sub	fp, fp, r7
   18938:	mov	r2, fp
   1893c:	add	r1, r1, r7
   18940:	bl	203cc <__assert_fail@plt+0xeee4>
   18944:	sub	r3, r0, #1
   18948:	cmn	r3, #4
   1894c:	ldrls	fp, [sp, #8]
   18950:	bls	18978 <__assert_fail@plt+0x7490>
   18954:	cmp	fp, #0
   18958:	cmpne	r0, #0
   1895c:	ldrne	r3, [r4]
   18960:	moveq	fp, #0
   18964:	ldrbne	fp, [r3, r7]
   18968:	add	r3, sp, #16
   1896c:	ldm	r3, {r0, r1}
   18970:	stm	r9, {r0, r1}
   18974:	mov	r0, #1
   18978:	add	r7, r7, r0
   1897c:	b	188c4 <__assert_fail@plt+0x73dc>
   18980:	ldrb	r3, [r4, #78]	; 0x4e
   18984:	cmp	r3, #0
   18988:	beq	189b0 <__assert_fail@plt+0x74c8>
   1898c:	mov	r0, fp
   18990:	bl	113d4 <iswalnum@plt>
   18994:	subs	r3, fp, #95	; 0x5f
   18998:	movne	r3, #1
   1899c:	cmp	r0, #0
   189a0:	movne	r3, #0
   189a4:	cmp	r3, #0
   189a8:	moveq	r3, #1
   189ac:	beq	189cc <__assert_fail@plt+0x74e4>
   189b0:	cmp	fp, #10
   189b4:	movne	r3, #0
   189b8:	bne	189cc <__assert_fail@plt+0x74e4>
   189bc:	ldrb	r3, [r4, #77]	; 0x4d
   189c0:	cmp	r3, #0
   189c4:	moveq	r3, #0
   189c8:	movne	r3, #2
   189cc:	str	r3, [r4, #60]	; 0x3c
   189d0:	b	188f0 <__assert_fail@plt+0x7408>
   189d4:	ldr	r2, [r4, #8]
   189d8:	str	r1, [r2, r3, lsl #2]
   189dc:	add	r3, r3, #1
   189e0:	ldr	r2, [r4, #28]
   189e4:	cmp	r2, r3
   189e8:	bgt	189d4 <__assert_fail@plt+0x74ec>
   189ec:	ldrb	r3, [r4, #75]	; 0x4b
   189f0:	cmp	r3, #0
   189f4:	beq	186c4 <__assert_fail@plt+0x71dc>
   189f8:	b	18704 <__assert_fail@plt+0x721c>
   189fc:	ldr	r3, [r4]
   18a00:	ldr	r0, [r4, #68]	; 0x44
   18a04:	add	r3, r3, r5
   18a08:	add	r7, r3, r7
   18a0c:	ldr	r3, [r4, #64]	; 0x40
   18a10:	ldrb	r2, [r7, #-1]
   18a14:	str	r1, [r4, #32]
   18a18:	cmp	r3, #0
   18a1c:	ldrbne	r2, [r3, r2]
   18a20:	mov	r1, r2
   18a24:	bl	146d4 <__assert_fail@plt+0x31ec>
   18a28:	cmp	r0, #0
   18a2c:	movne	r0, #1
   18a30:	bne	18a4c <__assert_fail@plt+0x7564>
   18a34:	cmp	r2, #10
   18a38:	bne	18a4c <__assert_fail@plt+0x7564>
   18a3c:	ldrb	r3, [r4, #77]	; 0x4d
   18a40:	cmp	r3, #0
   18a44:	moveq	r0, #0
   18a48:	movne	r0, #2
   18a4c:	str	r0, [r4, #60]	; 0x3c
   18a50:	b	185d8 <__assert_fail@plt+0x70f0>
   18a54:	bl	15250 <__assert_fail@plt+0x3d68>
   18a58:	mov	r0, #0
   18a5c:	str	r0, [r4, #40]	; 0x28
   18a60:	b	18630 <__assert_fail@plt+0x7148>
   18a64:	ldrb	r2, [r4, #75]	; 0x4b
   18a68:	cmp	r2, #0
   18a6c:	streq	r3, [r4, #28]
   18a70:	beq	18a58 <__assert_fail@plt+0x7570>
   18a74:	ldrb	r3, [r4, #72]	; 0x48
   18a78:	cmp	r3, #0
   18a7c:	beq	18a8c <__assert_fail@plt+0x75a4>
   18a80:	mov	r0, r4
   18a84:	bl	15874 <__assert_fail@plt+0x438c>
   18a88:	b	18a58 <__assert_fail@plt+0x7570>
   18a8c:	ldr	r3, [r4, #64]	; 0x40
   18a90:	cmp	r3, #0
   18a94:	beq	18a58 <__assert_fail@plt+0x7570>
   18a98:	mov	r0, r4
   18a9c:	bl	14778 <__assert_fail@plt+0x3290>
   18aa0:	b	18a58 <__assert_fail@plt+0x7570>
   18aa4:	push	{r4, r5, r6, r7, r8, lr}
   18aa8:	mov	r5, r1
   18aac:	mov	r1, r2
   18ab0:	mov	r4, r0
   18ab4:	ldr	r2, [r0, #88]	; 0x58
   18ab8:	bl	18268 <__assert_fail@plt+0x6d80>
   18abc:	ldr	lr, [r5, #8]
   18ac0:	mov	ip, #0
   18ac4:	and	r6, r0, #8
   18ac8:	and	r7, r0, #2
   18acc:	and	r1, r0, #1
   18ad0:	cmp	lr, ip
   18ad4:	bgt	18ae0 <__assert_fail@plt+0x75f8>
   18ad8:	mov	r0, #0
   18adc:	pop	{r4, r5, r6, r7, r8, pc}
   18ae0:	ldr	r3, [r5, #12]
   18ae4:	ldr	r0, [r3, ip, lsl #2]
   18ae8:	ldr	r3, [r4, #84]	; 0x54
   18aec:	ldr	r2, [r3]
   18af0:	add	r2, r2, r0, lsl #3
   18af4:	ldr	r3, [r2, #4]
   18af8:	ldrb	r2, [r2, #4]
   18afc:	ubfx	r3, r3, #8, #10
   18b00:	cmp	r2, #2
   18b04:	bne	18b50 <__assert_fail@plt+0x7668>
   18b08:	cmp	r3, #0
   18b0c:	popeq	{r4, r5, r6, r7, r8, pc}
   18b10:	tst	r3, #4
   18b14:	beq	18b20 <__assert_fail@plt+0x7638>
   18b18:	cmp	r1, #0
   18b1c:	beq	18b50 <__assert_fail@plt+0x7668>
   18b20:	tst	r3, #8
   18b24:	beq	18b30 <__assert_fail@plt+0x7648>
   18b28:	cmp	r1, #0
   18b2c:	bne	18b50 <__assert_fail@plt+0x7668>
   18b30:	tst	r3, #32
   18b34:	beq	18b40 <__assert_fail@plt+0x7658>
   18b38:	cmp	r7, #0
   18b3c:	beq	18b50 <__assert_fail@plt+0x7668>
   18b40:	tst	r3, #128	; 0x80
   18b44:	popeq	{r4, r5, r6, r7, r8, pc}
   18b48:	cmp	r6, #0
   18b4c:	popne	{r4, r5, r6, r7, r8, pc}
   18b50:	add	ip, ip, #1
   18b54:	b	18ad0 <__assert_fail@plt+0x75e8>
   18b58:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b5c:	ldr	r8, [r1, #40]	; 0x28
   18b60:	ldr	r3, [r1, #56]	; 0x38
   18b64:	cmp	r3, r8
   18b68:	movle	r3, #2
   18b6c:	strble	r3, [r0, #4]
   18b70:	movle	r0, #0
   18b74:	ble	18d48 <__assert_fail@plt+0x7860>
   18b78:	ldrb	r3, [r0, #6]
   18b7c:	ldr	sl, [r1, #4]
   18b80:	bic	r3, r3, #96	; 0x60
   18b84:	ldrb	r6, [sl, r8]
   18b88:	strb	r3, [r0, #6]
   18b8c:	ldr	r3, [r1, #80]	; 0x50
   18b90:	strb	r6, [r0]
   18b94:	cmp	r3, #1
   18b98:	ble	18bd8 <__assert_fail@plt+0x76f0>
   18b9c:	ldr	ip, [r1, #28]
   18ba0:	cmp	r8, ip
   18ba4:	beq	18bd8 <__assert_fail@plt+0x76f0>
   18ba8:	ldr	ip, [r1, #8]
   18bac:	ldr	ip, [ip, r8, lsl #2]
   18bb0:	cmn	ip, #1
   18bb4:	bne	18bd8 <__assert_fail@plt+0x76f0>
   18bb8:	ldr	r3, [r0, #4]
   18bbc:	bic	r3, r3, #2097152	; 0x200000
   18bc0:	bic	r3, r3, #255	; 0xff
   18bc4:	orr	r3, r3, #2097152	; 0x200000
   18bc8:	orr	r3, r3, #1
   18bcc:	str	r3, [r0, #4]
   18bd0:	mov	r0, #1
   18bd4:	b	18d48 <__assert_fail@plt+0x7860>
   18bd8:	cmp	r6, #92	; 0x5c
   18bdc:	mov	r4, r2
   18be0:	mov	r7, r1
   18be4:	mov	r5, r0
   18be8:	bne	18f20 <__assert_fail@plt+0x7a38>
   18bec:	ldr	r2, [r7, #48]	; 0x30
   18bf0:	add	r1, r8, #1
   18bf4:	cmp	r1, r2
   18bf8:	movge	r3, #36	; 0x24
   18bfc:	bge	1904c <__assert_fail@plt+0x7b64>
   18c00:	ldrb	r2, [r7, #75]	; 0x4b
   18c04:	cmp	r2, #0
   18c08:	bne	18c14 <__assert_fail@plt+0x772c>
   18c0c:	ldrb	r6, [sl, r1]
   18c10:	b	18c84 <__assert_fail@plt+0x779c>
   18c14:	cmp	r3, #1
   18c18:	ble	18c50 <__assert_fail@plt+0x7768>
   18c1c:	ldr	r2, [r7, #8]
   18c20:	lsl	r0, r1, #2
   18c24:	ldr	ip, [r2, r1, lsl #2]
   18c28:	cmn	ip, #1
   18c2c:	beq	18c0c <__assert_fail@plt+0x7724>
   18c30:	ldr	ip, [r7, #28]
   18c34:	add	r8, r8, #2
   18c38:	cmp	ip, r8
   18c3c:	beq	18c50 <__assert_fail@plt+0x7768>
   18c40:	add	r2, r2, r0
   18c44:	ldr	r2, [r2, #4]
   18c48:	cmn	r2, #1
   18c4c:	beq	18c0c <__assert_fail@plt+0x7724>
   18c50:	ldrb	r0, [r7, #76]	; 0x4c
   18c54:	ldr	lr, [r7, #24]
   18c58:	cmp	r0, #0
   18c5c:	ldrne	r2, [r7, #12]
   18c60:	moveq	ip, r1
   18c64:	ldrne	ip, [r2, r1, lsl #2]
   18c68:	cmp	r0, #0
   18c6c:	ldr	r2, [r7]
   18c70:	add	r2, r2, ip
   18c74:	ldrb	r6, [r2, lr]
   18c78:	beq	18c84 <__assert_fail@plt+0x779c>
   18c7c:	tst	r6, #128	; 0x80
   18c80:	bne	18c0c <__assert_fail@plt+0x7724>
   18c84:	mov	r2, #1
   18c88:	ldrb	r8, [r5, #6]
   18c8c:	cmp	r3, r2
   18c90:	strb	r6, [r5]
   18c94:	strb	r2, [r5, #4]
   18c98:	ble	18cfc <__assert_fail@plt+0x7814>
   18c9c:	mov	r0, r7
   18ca0:	bl	1475c <__assert_fail@plt+0x3274>
   18ca4:	mov	r7, r0
   18ca8:	bl	113d4 <iswalnum@plt>
   18cac:	adds	r0, r0, #0
   18cb0:	movne	r0, #1
   18cb4:	cmp	r7, #95	; 0x5f
   18cb8:	orreq	r0, r0, #1
   18cbc:	bfi	r8, r0, #6, #1
   18cc0:	cmp	r6, #66	; 0x42
   18cc4:	strb	r8, [r5, #6]
   18cc8:	beq	18e6c <__assert_fail@plt+0x7984>
   18ccc:	bhi	18d84 <__assert_fail@plt+0x789c>
   18cd0:	cmp	r6, #57	; 0x39
   18cd4:	bhi	18d50 <__assert_fail@plt+0x7868>
   18cd8:	cmp	r6, #49	; 0x31
   18cdc:	bcs	18e38 <__assert_fail@plt+0x7950>
   18ce0:	cmp	r6, #40	; 0x28
   18ce4:	beq	18ed4 <__assert_fail@plt+0x79ec>
   18ce8:	bhi	18d20 <__assert_fail@plt+0x7838>
   18cec:	cmp	r6, #39	; 0x27
   18cf0:	beq	18ebc <__assert_fail@plt+0x79d4>
   18cf4:	mov	r0, #2
   18cf8:	b	18d48 <__assert_fail@plt+0x7860>
   18cfc:	bl	11380 <__ctype_b_loc@plt>
   18d00:	ldr	r2, [r0]
   18d04:	lsl	r3, r6, #1
   18d08:	ldrh	r3, [r2, r3]
   18d0c:	ubfx	r3, r3, #3, #1
   18d10:	cmp	r6, #95	; 0x5f
   18d14:	orreq	r3, r3, #1
   18d18:	bfi	r8, r3, #6, #1
   18d1c:	b	18cc0 <__assert_fail@plt+0x77d8>
   18d20:	cmp	r6, #41	; 0x29
   18d24:	beq	18ee4 <__assert_fail@plt+0x79fc>
   18d28:	cmp	r6, #43	; 0x2b
   18d2c:	bne	18cf4 <__assert_fail@plt+0x780c>
   18d30:	movw	r0, #1026	; 0x402
   18d34:	and	r0, r4, r0
   18d38:	cmp	r0, #2
   18d3c:	moveq	r3, #18
   18d40:	bne	18cf4 <__assert_fail@plt+0x780c>
   18d44:	strb	r3, [r5, #4]
   18d48:	add	sp, sp, #12
   18d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d50:	cmp	r6, #62	; 0x3e
   18d54:	beq	18e54 <__assert_fail@plt+0x796c>
   18d58:	cmp	r6, #63	; 0x3f
   18d5c:	beq	18ef4 <__assert_fail@plt+0x7a0c>
   18d60:	cmp	r6, #60	; 0x3c
   18d64:	bne	18cf4 <__assert_fail@plt+0x780c>
   18d68:	tst	r4, #524288	; 0x80000
   18d6c:	moveq	r3, #12
   18d70:	strbeq	r3, [r5, #4]
   18d74:	moveq	r3, #6
   18d78:	bne	18cf4 <__assert_fail@plt+0x780c>
   18d7c:	str	r3, [r5]
   18d80:	b	18cf4 <__assert_fail@plt+0x780c>
   18d84:	cmp	r6, #115	; 0x73
   18d88:	beq	18e94 <__assert_fail@plt+0x79ac>
   18d8c:	bhi	18ddc <__assert_fail@plt+0x78f4>
   18d90:	cmp	r6, #87	; 0x57
   18d94:	beq	18e84 <__assert_fail@plt+0x799c>
   18d98:	bhi	18db4 <__assert_fail@plt+0x78cc>
   18d9c:	cmp	r6, #83	; 0x53
   18da0:	bne	18cf4 <__assert_fail@plt+0x780c>
   18da4:	tst	r4, #524288	; 0x80000
   18da8:	moveq	r3, #35	; 0x23
   18dac:	beq	18e30 <__assert_fail@plt+0x7948>
   18db0:	b	18cf4 <__assert_fail@plt+0x780c>
   18db4:	cmp	r6, #96	; 0x60
   18db8:	beq	18ea4 <__assert_fail@plt+0x79bc>
   18dbc:	cmp	r6, #98	; 0x62
   18dc0:	bne	18cf4 <__assert_fail@plt+0x780c>
   18dc4:	tst	r4, #524288	; 0x80000
   18dc8:	moveq	r3, #12
   18dcc:	strbeq	r3, [r5, #4]
   18dd0:	moveq	r3, #256	; 0x100
   18dd4:	beq	18d7c <__assert_fail@plt+0x7894>
   18dd8:	b	18cf4 <__assert_fail@plt+0x780c>
   18ddc:	cmp	r6, #123	; 0x7b
   18de0:	beq	18f0c <__assert_fail@plt+0x7a24>
   18de4:	bhi	18e00 <__assert_fail@plt+0x7918>
   18de8:	cmp	r6, #119	; 0x77
   18dec:	bne	18cf4 <__assert_fail@plt+0x780c>
   18df0:	tst	r4, #524288	; 0x80000
   18df4:	moveq	r3, #32
   18df8:	beq	18e30 <__assert_fail@plt+0x7948>
   18dfc:	b	18cf4 <__assert_fail@plt+0x780c>
   18e00:	cmp	r6, #124	; 0x7c
   18e04:	beq	18e24 <__assert_fail@plt+0x793c>
   18e08:	cmp	r6, #125	; 0x7d
   18e0c:	bne	18cf4 <__assert_fail@plt+0x780c>
   18e10:	and	r4, r4, #4608	; 0x1200
   18e14:	cmp	r4, #512	; 0x200
   18e18:	bne	18cf4 <__assert_fail@plt+0x780c>
   18e1c:	mov	r3, #24
   18e20:	b	18e30 <__assert_fail@plt+0x7948>
   18e24:	tst	r4, #33792	; 0x8400
   18e28:	moveq	r3, #10
   18e2c:	bne	18cf4 <__assert_fail@plt+0x780c>
   18e30:	strb	r3, [r5, #4]
   18e34:	b	18cf4 <__assert_fail@plt+0x780c>
   18e38:	tst	r4, #16384	; 0x4000
   18e3c:	bne	18cf4 <__assert_fail@plt+0x780c>
   18e40:	mov	r3, #4
   18e44:	sub	r6, r6, #49	; 0x31
   18e48:	str	r6, [r5]
   18e4c:	strb	r3, [r5, #4]
   18e50:	b	18cf4 <__assert_fail@plt+0x780c>
   18e54:	tst	r4, #524288	; 0x80000
   18e58:	moveq	r3, #12
   18e5c:	strbeq	r3, [r5, #4]
   18e60:	moveq	r3, #9
   18e64:	beq	18d7c <__assert_fail@plt+0x7894>
   18e68:	b	18cf4 <__assert_fail@plt+0x780c>
   18e6c:	tst	r4, #524288	; 0x80000
   18e70:	moveq	r3, #12
   18e74:	strbeq	r3, [r5, #4]
   18e78:	moveq	r3, #512	; 0x200
   18e7c:	beq	18d7c <__assert_fail@plt+0x7894>
   18e80:	b	18cf4 <__assert_fail@plt+0x780c>
   18e84:	tst	r4, #524288	; 0x80000
   18e88:	moveq	r3, #33	; 0x21
   18e8c:	beq	18e30 <__assert_fail@plt+0x7948>
   18e90:	b	18cf4 <__assert_fail@plt+0x780c>
   18e94:	tst	r4, #524288	; 0x80000
   18e98:	moveq	r3, #34	; 0x22
   18e9c:	beq	18e30 <__assert_fail@plt+0x7948>
   18ea0:	b	18cf4 <__assert_fail@plt+0x780c>
   18ea4:	tst	r4, #524288	; 0x80000
   18ea8:	moveq	r3, #12
   18eac:	strbeq	r3, [r5, #4]
   18eb0:	moveq	r3, #64	; 0x40
   18eb4:	beq	18d7c <__assert_fail@plt+0x7894>
   18eb8:	b	18cf4 <__assert_fail@plt+0x780c>
   18ebc:	tst	r4, #524288	; 0x80000
   18ec0:	bne	18cf4 <__assert_fail@plt+0x780c>
   18ec4:	mov	r3, #12
   18ec8:	strb	r3, [r5, #4]
   18ecc:	mov	r3, #128	; 0x80
   18ed0:	b	18d7c <__assert_fail@plt+0x7894>
   18ed4:	tst	r4, #8192	; 0x2000
   18ed8:	moveq	r3, #8
   18edc:	beq	18e30 <__assert_fail@plt+0x7948>
   18ee0:	b	18cf4 <__assert_fail@plt+0x780c>
   18ee4:	tst	r4, #8192	; 0x2000
   18ee8:	moveq	r3, #9
   18eec:	beq	18e30 <__assert_fail@plt+0x7948>
   18ef0:	b	18cf4 <__assert_fail@plt+0x780c>
   18ef4:	movw	r0, #1026	; 0x402
   18ef8:	and	r0, r4, r0
   18efc:	cmp	r0, #2
   18f00:	bne	18cf4 <__assert_fail@plt+0x780c>
   18f04:	mov	r3, #19
   18f08:	b	18d44 <__assert_fail@plt+0x785c>
   18f0c:	and	r4, r4, #4608	; 0x1200
   18f10:	cmp	r4, #512	; 0x200
   18f14:	moveq	r3, #23
   18f18:	bne	18cf4 <__assert_fail@plt+0x780c>
   18f1c:	b	18e30 <__assert_fail@plt+0x7948>
   18f20:	mov	r2, #1
   18f24:	ldrb	r9, [r0, #6]
   18f28:	cmp	r3, r2
   18f2c:	strb	r2, [r0, #4]
   18f30:	ble	18fe0 <__assert_fail@plt+0x7af8>
   18f34:	mov	r1, r8
   18f38:	mov	r0, r7
   18f3c:	bl	1475c <__assert_fail@plt+0x3274>
   18f40:	mov	fp, r0
   18f44:	bl	113d4 <iswalnum@plt>
   18f48:	adds	r0, r0, #0
   18f4c:	movne	r0, #1
   18f50:	cmp	fp, #95	; 0x5f
   18f54:	orreq	r0, r0, #1
   18f58:	bfi	r9, r0, #6, #1
   18f5c:	cmp	r6, #46	; 0x2e
   18f60:	strb	r9, [r5, #6]
   18f64:	beq	190f0 <__assert_fail@plt+0x7c08>
   18f68:	bhi	1902c <__assert_fail@plt+0x7b44>
   18f6c:	cmp	r6, #40	; 0x28
   18f70:	beq	190d0 <__assert_fail@plt+0x7be8>
   18f74:	bhi	19004 <__assert_fail@plt+0x7b1c>
   18f78:	cmp	r6, #10
   18f7c:	beq	19080 <__assert_fail@plt+0x7b98>
   18f80:	cmp	r6, #36	; 0x24
   18f84:	bne	18bd0 <__assert_fail@plt+0x76e8>
   18f88:	tst	r4, #8
   18f8c:	bne	18fd0 <__assert_fail@plt+0x7ae8>
   18f90:	ldr	r3, [r7, #48]	; 0x30
   18f94:	add	r8, r8, #1
   18f98:	cmp	r8, r3
   18f9c:	beq	18fd0 <__assert_fail@plt+0x7ae8>
   18fa0:	mov	r2, r4
   18fa4:	mov	r1, r7
   18fa8:	str	r8, [r7, #40]	; 0x28
   18fac:	mov	r0, sp
   18fb0:	bl	18b58 <__assert_fail@plt+0x7670>
   18fb4:	ldr	r3, [r7, #40]	; 0x28
   18fb8:	sub	r3, r3, #1
   18fbc:	str	r3, [r7, #40]	; 0x28
   18fc0:	ldrb	r3, [sp, #4]
   18fc4:	sub	r3, r3, #9
   18fc8:	cmp	r3, #1
   18fcc:	bhi	18bd0 <__assert_fail@plt+0x76e8>
   18fd0:	mov	r3, #12
   18fd4:	strb	r3, [r5, #4]
   18fd8:	mov	r3, #32
   18fdc:	b	19144 <__assert_fail@plt+0x7c5c>
   18fe0:	bl	11380 <__ctype_b_loc@plt>
   18fe4:	ldr	r2, [r0]
   18fe8:	lsl	r3, r6, #1
   18fec:	ldrh	r3, [r2, r3]
   18ff0:	ubfx	r3, r3, #3, #1
   18ff4:	cmp	r6, #95	; 0x5f
   18ff8:	orreq	r3, r3, #1
   18ffc:	bfi	r9, r3, #6, #1
   19000:	b	18f5c <__assert_fail@plt+0x7a74>
   19004:	cmp	r6, #42	; 0x2a
   19008:	beq	190a0 <__assert_fail@plt+0x7bb8>
   1900c:	bcc	190e0 <__assert_fail@plt+0x7bf8>
   19010:	cmp	r6, #43	; 0x2b
   19014:	bne	18bd0 <__assert_fail@plt+0x76e8>
   19018:	movw	r3, #1026	; 0x402
   1901c:	tst	r4, r3
   19020:	moveq	r3, #18
   19024:	beq	1904c <__assert_fail@plt+0x7b64>
   19028:	b	18bd0 <__assert_fail@plt+0x76e8>
   1902c:	cmp	r6, #94	; 0x5e
   19030:	beq	190f8 <__assert_fail@plt+0x7c10>
   19034:	bhi	19054 <__assert_fail@plt+0x7b6c>
   19038:	cmp	r6, #63	; 0x3f
   1903c:	beq	190a8 <__assert_fail@plt+0x7bc0>
   19040:	cmp	r6, #91	; 0x5b
   19044:	moveq	r3, #20
   19048:	bne	18bd0 <__assert_fail@plt+0x76e8>
   1904c:	strb	r3, [r5, #4]
   19050:	b	18bd0 <__assert_fail@plt+0x76e8>
   19054:	cmp	r6, #124	; 0x7c
   19058:	beq	19090 <__assert_fail@plt+0x7ba8>
   1905c:	cmp	r6, #125	; 0x7d
   19060:	beq	190bc <__assert_fail@plt+0x7bd4>
   19064:	cmp	r6, #123	; 0x7b
   19068:	bne	18bd0 <__assert_fail@plt+0x76e8>
   1906c:	and	r4, r4, #4608	; 0x1200
   19070:	cmp	r4, #4608	; 0x1200
   19074:	moveq	r3, #23
   19078:	bne	18bd0 <__assert_fail@plt+0x76e8>
   1907c:	b	1904c <__assert_fail@plt+0x7b64>
   19080:	tst	r4, #2048	; 0x800
   19084:	beq	18bd0 <__assert_fail@plt+0x76e8>
   19088:	mov	r3, #10
   1908c:	b	1904c <__assert_fail@plt+0x7b64>
   19090:	and	r4, r4, #33792	; 0x8400
   19094:	cmp	r4, #32768	; 0x8000
   19098:	bne	18bd0 <__assert_fail@plt+0x76e8>
   1909c:	b	19088 <__assert_fail@plt+0x7ba0>
   190a0:	mov	r3, #11
   190a4:	b	1904c <__assert_fail@plt+0x7b64>
   190a8:	movw	r3, #1026	; 0x402
   190ac:	tst	r4, r3
   190b0:	moveq	r3, #19
   190b4:	beq	1904c <__assert_fail@plt+0x7b64>
   190b8:	b	18bd0 <__assert_fail@plt+0x76e8>
   190bc:	and	r4, r4, #4608	; 0x1200
   190c0:	cmp	r4, #4608	; 0x1200
   190c4:	moveq	r3, #24
   190c8:	bne	18bd0 <__assert_fail@plt+0x76e8>
   190cc:	b	1904c <__assert_fail@plt+0x7b64>
   190d0:	tst	r4, #8192	; 0x2000
   190d4:	movne	r3, #8
   190d8:	bne	1904c <__assert_fail@plt+0x7b64>
   190dc:	b	18bd0 <__assert_fail@plt+0x76e8>
   190e0:	tst	r4, #8192	; 0x2000
   190e4:	movne	r3, #9
   190e8:	bne	1904c <__assert_fail@plt+0x7b64>
   190ec:	b	18bd0 <__assert_fail@plt+0x76e8>
   190f0:	mov	r3, #5
   190f4:	b	1904c <__assert_fail@plt+0x7b64>
   190f8:	ldr	r3, [pc, #76]	; 1914c <__assert_fail@plt+0x7c64>
   190fc:	tst	r4, r3
   19100:	moveq	r3, #1
   19104:	movne	r3, #0
   19108:	cmp	r8, #0
   1910c:	moveq	r3, #0
   19110:	cmp	r3, #0
   19114:	beq	19138 <__assert_fail@plt+0x7c50>
   19118:	add	r8, sl, r8
   1911c:	eor	r4, r4, #2048	; 0x800
   19120:	ldrb	r2, [r8, #-1]
   19124:	ubfx	r4, r4, #11, #1
   19128:	cmp	r2, #10
   1912c:	orrne	r4, r4, #1
   19130:	cmp	r4, #0
   19134:	bne	18bd0 <__assert_fail@plt+0x76e8>
   19138:	mov	r3, #12
   1913c:	strb	r3, [r5, #4]
   19140:	mov	r3, #16
   19144:	str	r3, [r5]
   19148:	b	18bd0 <__assert_fail@plt+0x76e8>
   1914c:	addeq	r0, r0, r8
   19150:	push	{r4, lr}
   19154:	mov	r4, r1
   19158:	bl	18b58 <__assert_fail@plt+0x7670>
   1915c:	ldr	r3, [r4, #40]	; 0x28
   19160:	add	r0, r3, r0
   19164:	str	r0, [r4, #40]	; 0x28
   19168:	pop	{r4, pc}
   1916c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19170:	mov	r8, r0
   19174:	mov	r5, r1
   19178:	mov	r9, r2
   1917c:	mvn	r4, #0
   19180:	mov	r7, #10
   19184:	movw	r6, #32816	; 0x8030
   19188:	mov	r2, r9
   1918c:	mov	r1, r8
   19190:	mov	r0, r5
   19194:	bl	19150 <__assert_fail@plt+0x7c68>
   19198:	ldrb	r2, [r5, #4]
   1919c:	ldrb	r3, [r5]
   191a0:	cmp	r2, #2
   191a4:	beq	19208 <__assert_fail@plt+0x7d20>
   191a8:	cmp	r3, #44	; 0x2c
   191ac:	cmpne	r2, #24
   191b0:	beq	1920c <__assert_fail@plt+0x7d24>
   191b4:	cmp	r2, #1
   191b8:	bne	19200 <__assert_fail@plt+0x7d18>
   191bc:	sub	r1, r3, #48	; 0x30
   191c0:	uxtb	r0, r1
   191c4:	cmp	r0, #9
   191c8:	movhi	r2, #0
   191cc:	movls	r2, #1
   191d0:	cmn	r4, #2
   191d4:	moveq	r2, #0
   191d8:	cmp	r2, #0
   191dc:	beq	19200 <__assert_fail@plt+0x7d18>
   191e0:	cmn	r4, #1
   191e4:	moveq	r4, r1
   191e8:	beq	19188 <__assert_fail@plt+0x7ca0>
   191ec:	mla	r4, r7, r4, r3
   191f0:	cmp	r4, r6
   191f4:	movge	r4, r6
   191f8:	sub	r4, r4, #48	; 0x30
   191fc:	b	19188 <__assert_fail@plt+0x7ca0>
   19200:	mvn	r4, #1
   19204:	b	19188 <__assert_fail@plt+0x7ca0>
   19208:	mvn	r4, #1
   1920c:	mov	r0, r4
   19210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19214:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19218:	mov	r6, r0
   1921c:	mov	r4, r1
   19220:	mov	r0, r1
   19224:	mov	r7, r2
   19228:	mov	r8, r3
   1922c:	ldr	r5, [r1, #40]	; 0x28
   19230:	mov	r1, r5
   19234:	bl	16998 <__assert_fail@plt+0x54b0>
   19238:	cmp	r0, #1
   1923c:	ble	1926c <__assert_fail@plt+0x7d84>
   19240:	mov	r3, #1
   19244:	mov	r2, r0
   19248:	mov	r0, r4
   1924c:	str	r3, [r6]
   19250:	bl	1475c <__assert_fail@plt+0x3274>
   19254:	add	r5, r5, r2
   19258:	str	r0, [r6, #4]
   1925c:	mov	r0, #0
   19260:	str	r5, [r4, #40]	; 0x28
   19264:	add	sp, sp, #8
   19268:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1926c:	ldrb	r2, [r7, #4]
   19270:	add	r5, r5, r8
   19274:	str	r5, [r4, #40]	; 0x28
   19278:	and	r3, r2, #251	; 0xfb
   1927c:	cmp	r2, #28
   19280:	cmpne	r3, #26
   19284:	bne	193cc <__assert_fail@plt+0x7ee4>
   19288:	ldr	r3, [r4, #56]	; 0x38
   1928c:	cmp	r5, r3
   19290:	ldrblt	sl, [r7]
   19294:	movlt	r9, #0
   19298:	blt	1933c <__assert_fail@plt+0x7e54>
   1929c:	mov	r0, #7
   192a0:	b	19264 <__assert_fail@plt+0x7d7c>
   192a4:	ldrb	r3, [r4, #76]	; 0x4c
   192a8:	cmp	r3, #0
   192ac:	beq	19368 <__assert_fail@plt+0x7e80>
   192b0:	ldr	r3, [r4, #28]
   192b4:	cmp	r5, r3
   192b8:	beq	192cc <__assert_fail@plt+0x7de4>
   192bc:	ldr	r3, [r4, #8]
   192c0:	ldr	r3, [r3, r5, lsl #2]
   192c4:	cmn	r3, #1
   192c8:	beq	19358 <__assert_fail@plt+0x7e70>
   192cc:	ldr	r3, [r4]
   192d0:	ldr	r2, [r4, #12]
   192d4:	ldr	r1, [r2, r5, lsl #2]
   192d8:	ldr	r2, [r4, #24]
   192dc:	add	r3, r3, r1
   192e0:	ldrb	r8, [r3, r2]
   192e4:	tst	r8, #128	; 0x80
   192e8:	bne	19358 <__assert_fail@plt+0x7e70>
   192ec:	mov	r1, r5
   192f0:	mov	r0, r4
   192f4:	bl	16998 <__assert_fail@plt+0x54b0>
   192f8:	add	r0, r5, r0
   192fc:	str	r0, [r4, #40]	; 0x28
   19300:	ldr	r3, [r4, #40]	; 0x28
   19304:	ldr	r2, [r4, #56]	; 0x38
   19308:	cmp	r2, r3
   1930c:	ble	1929c <__assert_fail@plt+0x7db4>
   19310:	cmp	sl, r8
   19314:	ldr	r2, [r6, #4]
   19318:	bne	1932c <__assert_fail@plt+0x7e44>
   1931c:	ldr	r1, [r4, #4]
   19320:	ldrb	r1, [r1, r3]
   19324:	cmp	r1, #93	; 0x5d
   19328:	beq	19384 <__assert_fail@plt+0x7e9c>
   1932c:	strb	r8, [r2, r9]
   19330:	add	r9, r9, #1
   19334:	cmp	r9, #32
   19338:	beq	1929c <__assert_fail@plt+0x7db4>
   1933c:	ldrb	r3, [r7, #4]
   19340:	ldr	r5, [r4, #40]	; 0x28
   19344:	cmp	r3, #30
   19348:	bne	19358 <__assert_fail@plt+0x7e70>
   1934c:	ldrb	r3, [r4, #75]	; 0x4b
   19350:	cmp	r3, #0
   19354:	bne	192a4 <__assert_fail@plt+0x7dbc>
   19358:	add	r2, r5, #1
   1935c:	ldr	r3, [r4, #4]
   19360:	str	r2, [r4, #40]	; 0x28
   19364:	b	1937c <__assert_fail@plt+0x7e94>
   19368:	ldr	r0, [r4]
   1936c:	add	r2, r5, #1
   19370:	ldr	r3, [r4, #24]
   19374:	str	r2, [r4, #40]	; 0x28
   19378:	add	r5, r0, r5
   1937c:	ldrb	r8, [r3, r5]
   19380:	b	19300 <__assert_fail@plt+0x7e18>
   19384:	add	r3, r3, #1
   19388:	mov	r0, #0
   1938c:	str	r3, [r4, #40]	; 0x28
   19390:	strb	r0, [r2, r9]
   19394:	ldrb	r3, [r7, #4]
   19398:	cmp	r3, #28
   1939c:	beq	193bc <__assert_fail@plt+0x7ed4>
   193a0:	cmp	r3, #30
   193a4:	beq	193c4 <__assert_fail@plt+0x7edc>
   193a8:	cmp	r3, #26
   193ac:	moveq	r3, #3
   193b0:	bne	19264 <__assert_fail@plt+0x7d7c>
   193b4:	str	r3, [r6]
   193b8:	b	19264 <__assert_fail@plt+0x7d7c>
   193bc:	mov	r3, #2
   193c0:	b	193b4 <__assert_fail@plt+0x7ecc>
   193c4:	mov	r3, #4
   193c8:	b	193b4 <__assert_fail@plt+0x7ecc>
   193cc:	ldrb	r3, [sp, #44]	; 0x2c
   193d0:	cmp	r2, #22
   193d4:	orrne	r3, r3, #1
   193d8:	cmp	r3, #0
   193dc:	bne	19400 <__assert_fail@plt+0x7f18>
   193e0:	mov	r1, r4
   193e4:	mov	r0, sp
   193e8:	ldr	r2, [sp, #40]	; 0x28
   193ec:	bl	1492c <__assert_fail@plt+0x3444>
   193f0:	ldrb	r3, [sp, #4]
   193f4:	cmp	r3, #21
   193f8:	movne	r0, #11
   193fc:	bne	19264 <__assert_fail@plt+0x7d7c>
   19400:	ldrb	r3, [r7]
   19404:	mov	r0, #0
   19408:	str	r0, [r6]
   1940c:	strb	r3, [r6, #4]
   19410:	b	19264 <__assert_fail@plt+0x7d7c>
   19414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19418:	mov	fp, #0
   1941c:	sub	sp, sp, #14400	; 0x3840
   19420:	sub	sp, sp, #4
   19424:	mov	sl, r0
   19428:	add	r0, sp, #64	; 0x40
   1942c:	mov	r9, r1
   19430:	str	fp, [r1, #44]	; 0x2c
   19434:	str	fp, [r1, #48]	; 0x30
   19438:	bl	15244 <__assert_fail@plt+0x3d5c>
   1943c:	str	fp, [sp, #4]
   19440:	ldr	r2, [sp, #4]
   19444:	ldr	r3, [r9, #8]
   19448:	cmp	r2, r3
   1944c:	blt	19480 <__assert_fail@plt+0x7f98>
   19450:	cmp	fp, #0
   19454:	bgt	198a0 <__assert_fail@plt+0x83b8>
   19458:	bne	19888 <__assert_fail@plt+0x83a0>
   1945c:	mov	r1, #256	; 0x100
   19460:	mov	r0, #4
   19464:	bl	1ff70 <__assert_fail@plt+0xea88>
   19468:	str	r0, [r9, #44]	; 0x2c
   1946c:	adds	r0, r0, #0
   19470:	movne	r0, #1
   19474:	add	sp, sp, #14400	; 0x3840
   19478:	add	sp, sp, #4
   1947c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19480:	ldr	r3, [sp, #4]
   19484:	ldr	r2, [sp, #4]
   19488:	lsl	r3, r3, #2
   1948c:	str	r3, [sp, #12]
   19490:	ldr	r3, [r9, #12]
   19494:	ldr	r2, [r3, r2, lsl #2]
   19498:	ldr	r3, [sl]
   1949c:	add	r1, r3, r2, lsl #3
   194a0:	ldrb	r5, [r1, #4]
   194a4:	str	r1, [sp, #8]
   194a8:	ldr	r4, [r1, #4]
   194ac:	cmp	r5, #1
   194b0:	ubfx	r4, r4, #8, #10
   194b4:	bne	1950c <__assert_fail@plt+0x8024>
   194b8:	ldrb	r1, [r3, r2, lsl #3]
   194bc:	add	r0, sp, #64	; 0x40
   194c0:	bl	146a0 <__assert_fail@plt+0x31b8>
   194c4:	cmp	r4, #0
   194c8:	beq	195ac <__assert_fail@plt+0x80c4>
   194cc:	tst	r4, #32
   194d0:	beq	194f8 <__assert_fail@plt+0x8010>
   194d4:	ldr	r6, [sp, #64]	; 0x40
   194d8:	add	r0, sp, #64	; 0x40
   194dc:	bl	15244 <__assert_fail@plt+0x3d5c>
   194e0:	and	r6, r6, #1024	; 0x400
   194e4:	cmp	r6, #0
   194e8:	beq	19628 <__assert_fail@plt+0x8140>
   194ec:	ldr	r3, [sp, #64]	; 0x40
   194f0:	orr	r3, r3, #1024	; 0x400
   194f4:	str	r3, [sp, #64]	; 0x40
   194f8:	tst	r4, #128	; 0x80
   194fc:	beq	1959c <__assert_fail@plt+0x80b4>
   19500:	add	r0, sp, #64	; 0x40
   19504:	bl	15244 <__assert_fail@plt+0x3d5c>
   19508:	b	19628 <__assert_fail@plt+0x8140>
   1950c:	cmp	r5, #3
   19510:	bne	19524 <__assert_fail@plt+0x803c>
   19514:	add	r0, sp, #64	; 0x40
   19518:	ldr	r1, [r3, r2, lsl #3]
   1951c:	bl	1470c <__assert_fail@plt+0x3224>
   19520:	b	194c4 <__assert_fail@plt+0x7fdc>
   19524:	cmp	r5, #5
   19528:	bne	19580 <__assert_fail@plt+0x8098>
   1952c:	ldr	r3, [sl, #92]	; 0x5c
   19530:	cmp	r3, #1
   19534:	ble	1956c <__assert_fail@plt+0x8084>
   19538:	add	r0, sp, #64	; 0x40
   1953c:	ldr	r1, [sl, #60]	; 0x3c
   19540:	bl	1470c <__assert_fail@plt+0x3224>
   19544:	ldr	r2, [sl, #128]	; 0x80
   19548:	tst	r2, #64	; 0x40
   1954c:	ldreq	r3, [sp, #64]	; 0x40
   19550:	biceq	r3, r3, #1024	; 0x400
   19554:	streq	r3, [sp, #64]	; 0x40
   19558:	tst	r2, #128	; 0x80
   1955c:	ldrne	r3, [sp, #64]	; 0x40
   19560:	bicne	r3, r3, #1
   19564:	strne	r3, [sp, #64]	; 0x40
   19568:	b	194c4 <__assert_fail@plt+0x7fdc>
   1956c:	mov	r2, #32
   19570:	mvn	r1, #0
   19574:	add	r0, sp, #64	; 0x40
   19578:	bl	113ec <memset@plt>
   1957c:	b	19544 <__assert_fail@plt+0x805c>
   19580:	cmp	r5, #7
   19584:	bne	19628 <__assert_fail@plt+0x8140>
   19588:	mvn	r2, #0
   1958c:	mvn	r3, #0
   19590:	strd	r2, [sp, #64]	; 0x40
   19594:	strd	r2, [sp, #72]	; 0x48
   19598:	b	19544 <__assert_fail@plt+0x805c>
   1959c:	tst	r4, #4
   195a0:	bne	195bc <__assert_fail@plt+0x80d4>
   195a4:	tst	r4, #8
   195a8:	bne	19660 <__assert_fail@plt+0x8178>
   195ac:	add	r4, sp, #6208	; 0x1840
   195b0:	mov	r6, #0
   195b4:	add	r4, r4, #28
   195b8:	b	1981c <__assert_fail@plt+0x8334>
   195bc:	cmp	r5, #1
   195c0:	bne	195d4 <__assert_fail@plt+0x80ec>
   195c4:	ldr	r3, [sp, #8]
   195c8:	ldrb	r3, [r3, #6]
   195cc:	tst	r3, #64	; 0x40
   195d0:	beq	19500 <__assert_fail@plt+0x8018>
   195d4:	ldr	r3, [sl, #92]	; 0x5c
   195d8:	add	r2, sl, #96	; 0x60
   195dc:	cmp	r3, #1
   195e0:	add	r3, sp, #64	; 0x40
   195e4:	ble	19638 <__assert_fail@plt+0x8150>
   195e8:	ldr	ip, [sl, #60]	; 0x3c
   195ec:	add	lr, sl, #128	; 0x80
   195f0:	mov	r0, #0
   195f4:	sub	ip, ip, #4
   195f8:	ldr	r1, [ip, #4]!
   195fc:	ldr	r6, [r2], #4
   19600:	ldr	r7, [r3]
   19604:	mvn	r1, r1
   19608:	orr	r1, r1, r6
   1960c:	cmp	lr, r2
   19610:	and	r1, r1, r7
   19614:	orr	r0, r0, r1
   19618:	str	r1, [r3], #4
   1961c:	bne	195f8 <__assert_fail@plt+0x8110>
   19620:	cmp	r0, #0
   19624:	bne	195a4 <__assert_fail@plt+0x80bc>
   19628:	ldr	r3, [sp, #4]
   1962c:	add	r3, r3, #1
   19630:	str	r3, [sp, #4]
   19634:	b	19440 <__assert_fail@plt+0x7f58>
   19638:	add	ip, sl, #128	; 0x80
   1963c:	mov	r0, #0
   19640:	ldr	lr, [r2], #4
   19644:	ldr	r1, [r3]
   19648:	cmp	r2, ip
   1964c:	and	r1, r1, lr
   19650:	orr	r0, r0, r1
   19654:	str	r1, [r3], #4
   19658:	bne	19640 <__assert_fail@plt+0x8158>
   1965c:	b	19620 <__assert_fail@plt+0x8138>
   19660:	cmp	r5, #1
   19664:	bne	19678 <__assert_fail@plt+0x8190>
   19668:	ldr	r3, [sp, #8]
   1966c:	ldrb	r3, [r3, #6]
   19670:	tst	r3, #64	; 0x40
   19674:	bne	19500 <__assert_fail@plt+0x8018>
   19678:	ldr	r3, [sl, #92]	; 0x5c
   1967c:	add	r2, sl, #96	; 0x60
   19680:	cmp	r3, #1
   19684:	add	r3, sp, #64	; 0x40
   19688:	ble	196cc <__assert_fail@plt+0x81e4>
   1968c:	ldr	r0, [sl, #60]	; 0x3c
   19690:	add	lr, sl, #128	; 0x80
   19694:	mov	r1, #0
   19698:	sub	r0, r0, #4
   1969c:	ldr	ip, [r2], #4
   196a0:	ldr	r4, [r0, #4]!
   196a4:	ldr	r6, [r3]
   196a8:	cmp	lr, r2
   196ac:	and	ip, ip, r4
   196b0:	bic	ip, r6, ip
   196b4:	orr	r1, r1, ip
   196b8:	str	ip, [r3], #4
   196bc:	bne	1969c <__assert_fail@plt+0x81b4>
   196c0:	cmp	r1, #0
   196c4:	beq	19628 <__assert_fail@plt+0x8140>
   196c8:	b	195ac <__assert_fail@plt+0x80c4>
   196cc:	add	ip, sl, #128	; 0x80
   196d0:	mov	r1, #0
   196d4:	ldr	lr, [r2], #4
   196d8:	ldr	r0, [r3]
   196dc:	cmp	r2, ip
   196e0:	bic	r0, r0, lr
   196e4:	orr	r1, r1, r0
   196e8:	str	r0, [r3], #4
   196ec:	bne	196d4 <__assert_fail@plt+0x81ec>
   196f0:	b	196c0 <__assert_fail@plt+0x81d8>
   196f4:	cmp	r5, #1
   196f8:	sub	r0, r4, #28
   196fc:	bne	19714 <__assert_fail@plt+0x822c>
   19700:	ldr	r3, [sp, #8]
   19704:	ldrb	r1, [r3]
   19708:	bl	146d4 <__assert_fail@plt+0x31ec>
   1970c:	cmp	r0, #0
   19710:	beq	19814 <__assert_fail@plt+0x832c>
   19714:	add	r1, sp, #64	; 0x40
   19718:	sub	r2, r4, #32
   1971c:	add	lr, sp, #1088	; 0x440
   19720:	mov	ip, r2
   19724:	mov	r7, r1
   19728:	mov	r0, #0
   1972c:	ldr	r8, [ip, #4]!
   19730:	ldr	r3, [r7], #4
   19734:	cmp	r4, ip
   19738:	and	r3, r3, r8
   1973c:	orr	r0, r0, r3
   19740:	str	r3, [lr], #4
   19744:	bne	1972c <__assert_fail@plt+0x8244>
   19748:	cmp	r0, #0
   1974c:	beq	19814 <__assert_fail@plt+0x832c>
   19750:	mov	r7, #0
   19754:	add	r8, sp, #2112	; 0x840
   19758:	mov	r0, r7
   1975c:	ldr	ip, [r2, #4]!
   19760:	ldr	r3, [r1]
   19764:	cmp	r4, r2
   19768:	bic	lr, ip, r3
   1976c:	bic	r3, r3, ip
   19770:	orr	r0, r0, lr
   19774:	orr	r7, r7, r3
   19778:	str	lr, [r8], #4
   1977c:	str	r3, [r1], #4
   19780:	bne	1975c <__assert_fail@plt+0x8274>
   19784:	mov	r3, #12
   19788:	add	r2, sp, #3136	; 0xc40
   1978c:	cmp	r0, #0
   19790:	mla	r8, r3, r6, r2
   19794:	beq	197f0 <__assert_fail@plt+0x8308>
   19798:	add	r2, sp, #14400	; 0x3840
   1979c:	add	lr, sp, #2112	; 0x840
   197a0:	add	ip, r2, fp, lsl #5
   197a4:	ldm	lr!, {r0, r1, r2, r3}
   197a8:	sub	ip, ip, #8192	; 0x2000
   197ac:	stmia	ip!, {r0, r1, r2, r3}
   197b0:	ldm	lr, {r0, r1, r2, r3}
   197b4:	add	lr, sp, #1088	; 0x440
   197b8:	stm	ip, {r0, r1, r2, r3}
   197bc:	sub	ip, r4, #28
   197c0:	ldm	lr!, {r0, r1, r2, r3}
   197c4:	stmia	ip!, {r0, r1, r2, r3}
   197c8:	ldm	lr, {r0, r1, r2, r3}
   197cc:	stm	ip, {r0, r1, r2, r3}
   197d0:	mov	r3, #12
   197d4:	add	r2, sp, #3136	; 0xc40
   197d8:	mov	r1, r8
   197dc:	mla	r0, r3, fp, r2
   197e0:	bl	17024 <__assert_fail@plt+0x5b3c>
   197e4:	cmp	r0, #0
   197e8:	bne	19874 <__assert_fail@plt+0x838c>
   197ec:	add	fp, fp, #1
   197f0:	ldr	r3, [r9, #12]
   197f4:	mov	r0, r8
   197f8:	ldr	r2, [sp, #12]
   197fc:	ldr	r1, [r3, r2]
   19800:	bl	17b44 <__assert_fail@plt+0x665c>
   19804:	cmp	r0, #0
   19808:	beq	19874 <__assert_fail@plt+0x838c>
   1980c:	cmp	r7, #0
   19810:	beq	19824 <__assert_fail@plt+0x833c>
   19814:	add	r6, r6, #1
   19818:	add	r4, r4, #32
   1981c:	cmp	r6, fp
   19820:	blt	196f4 <__assert_fail@plt+0x820c>
   19824:	cmp	r6, fp
   19828:	bne	19628 <__assert_fail@plt+0x8140>
   1982c:	add	r3, sp, #14400	; 0x3840
   19830:	add	lr, sp, #64	; 0x40
   19834:	add	ip, r3, fp, lsl #5
   19838:	ldm	lr!, {r0, r1, r2, r3}
   1983c:	sub	ip, ip, #8192	; 0x2000
   19840:	stmia	ip!, {r0, r1, r2, r3}
   19844:	ldm	lr, {r0, r1, r2, r3}
   19848:	stm	ip, {r0, r1, r2, r3}
   1984c:	ldr	r3, [r9, #12]
   19850:	ldr	r2, [sp, #12]
   19854:	ldr	r1, [r3, r2]
   19858:	mov	r3, #12
   1985c:	add	r2, sp, #3136	; 0xc40
   19860:	mla	r0, r3, fp, r2
   19864:	bl	151d8 <__assert_fail@plt+0x3cf0>
   19868:	cmp	r0, #0
   1986c:	addeq	fp, fp, #1
   19870:	beq	19500 <__assert_fail@plt+0x8018>
   19874:	add	r5, sp, #3136	; 0xc40
   19878:	mov	r4, #0
   1987c:	cmp	r4, fp
   19880:	add	r5, r5, #12
   19884:	blt	19890 <__assert_fail@plt+0x83a8>
   19888:	mov	r0, #0
   1988c:	b	19474 <__assert_fail@plt+0x7f8c>
   19890:	ldr	r0, [r5, #-4]
   19894:	add	r4, r4, #1
   19898:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1989c:	b	1987c <__assert_fail@plt+0x8394>
   198a0:	add	r1, fp, #1
   198a4:	add	r0, sp, #20
   198a8:	bl	15218 <__assert_fail@plt+0x3d30>
   198ac:	add	r4, sp, #2112	; 0x840
   198b0:	cmp	r0, #0
   198b4:	str	r0, [r4, #-2096]	; 0xfffff7d0
   198b8:	mov	r6, r0
   198bc:	beq	198ec <__assert_fail@plt+0x8404>
   198c0:	ldr	r0, [sp, #28]
   198c4:	add	r5, sp, #3136	; 0xc40
   198c8:	mov	r4, #0
   198cc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   198d0:	add	r4, r4, #1
   198d4:	ldr	r0, [r5, #8]
   198d8:	add	r5, r5, #12
   198dc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   198e0:	cmp	r4, fp
   198e4:	bne	198d0 <__assert_fail@plt+0x83e8>
   198e8:	b	19888 <__assert_fail@plt+0x83a0>
   198ec:	add	r0, sp, #32
   198f0:	mov	r5, r6
   198f4:	bl	15244 <__assert_fail@plt+0x3d5c>
   198f8:	add	r3, sp, #3136	; 0xc40
   198fc:	str	r6, [sp, #4]
   19900:	mov	r8, r3
   19904:	str	r3, [sp, #8]
   19908:	mov	r3, #0
   1990c:	mov	r7, r3
   19910:	str	r3, [r4, #-2088]	; 0xfffff7d8
   19914:	ldr	r3, [r8, #4]
   19918:	cmp	r3, r7
   1991c:	bgt	199b4 <__assert_fail@plt+0x84cc>
   19920:	mov	r3, #0
   19924:	add	r2, sp, #20
   19928:	mov	r1, sl
   1992c:	add	r0, sp, #16
   19930:	bl	171dc <__assert_fail@plt+0x5cf4>
   19934:	add	r3, sp, #64	; 0x40
   19938:	cmp	r0, #0
   1993c:	mov	r7, r0
   19940:	str	r0, [r3, r5, lsl #2]
   19944:	bne	19954 <__assert_fail@plt+0x846c>
   19948:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1994c:	cmp	r3, #0
   19950:	bne	198c0 <__assert_fail@plt+0x83d8>
   19954:	ldrsb	r3, [r7, #52]	; 0x34
   19958:	cmp	r3, #0
   1995c:	addge	r3, sp, #1088	; 0x440
   19960:	strge	r7, [r4, r5, lsl #2]
   19964:	strge	r7, [r3, r5, lsl #2]
   19968:	bge	19a2c <__assert_fail@plt+0x8544>
   1996c:	mov	r3, #1
   19970:	add	r2, sp, #20
   19974:	mov	r1, sl
   19978:	add	r0, sp, #16
   1997c:	bl	171dc <__assert_fail@plt+0x5cf4>
   19980:	add	r3, sp, #1088	; 0x440
   19984:	cmp	r0, #0
   19988:	str	r0, [r3, r5, lsl #2]
   1998c:	bne	199f8 <__assert_fail@plt+0x8510>
   19990:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   19994:	cmp	r3, #0
   19998:	bne	198c0 <__assert_fail@plt+0x83d8>
   1999c:	ldr	r3, [sl, #92]	; 0x5c
   199a0:	cmp	r3, #2
   199a4:	ldr	r3, [sp, #4]
   199a8:	movge	r3, #1
   199ac:	str	r3, [sp, #4]
   199b0:	b	19a00 <__assert_fail@plt+0x8518>
   199b4:	ldr	r3, [r8, #8]
   199b8:	ldr	r2, [r3, r7, lsl #2]
   199bc:	ldr	r3, [sl, #12]
   199c0:	ldr	r3, [r3, r2, lsl #2]
   199c4:	cmn	r3, #1
   199c8:	bne	199d4 <__assert_fail@plt+0x84ec>
   199cc:	add	r7, r7, #1
   199d0:	b	19914 <__assert_fail@plt+0x842c>
   199d4:	ldr	r1, [sl, #24]
   199d8:	mov	r2, #12
   199dc:	add	r0, sp, #20
   199e0:	mla	r1, r2, r3, r1
   199e4:	bl	17f1c <__assert_fail@plt+0x6a34>
   199e8:	cmp	r0, #0
   199ec:	str	r0, [r4, #-2096]	; 0xfffff7d0
   199f0:	beq	199cc <__assert_fail@plt+0x84e4>
   199f4:	b	198c0 <__assert_fail@plt+0x83d8>
   199f8:	cmp	r7, r0
   199fc:	bne	1999c <__assert_fail@plt+0x84b4>
   19a00:	mov	r3, #2
   19a04:	add	r2, sp, #20
   19a08:	mov	r1, sl
   19a0c:	add	r0, sp, #16
   19a10:	bl	171dc <__assert_fail@plt+0x5cf4>
   19a14:	cmp	r0, #0
   19a18:	str	r0, [r4, r5, lsl #2]
   19a1c:	bne	19a2c <__assert_fail@plt+0x8544>
   19a20:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   19a24:	cmp	r3, #0
   19a28:	bne	198c0 <__assert_fail@plt+0x83d8>
   19a2c:	add	r7, sp, #6208	; 0x1840
   19a30:	add	r0, sp, #32
   19a34:	add	r1, r7, r5, lsl #5
   19a38:	add	r5, r5, #1
   19a3c:	add	r8, r8, #12
   19a40:	bl	1470c <__assert_fail@plt+0x3224>
   19a44:	cmp	r5, fp
   19a48:	bne	19908 <__assert_fail@plt+0x8420>
   19a4c:	ldr	r3, [sp, #4]
   19a50:	cmp	r3, #0
   19a54:	bne	19b68 <__assert_fail@plt+0x8680>
   19a58:	mov	r1, #256	; 0x100
   19a5c:	mov	r0, #4
   19a60:	bl	1ff70 <__assert_fail@plt+0xea88>
   19a64:	cmp	r0, #0
   19a68:	mov	r2, r0
   19a6c:	str	r0, [r9, #44]	; 0x2c
   19a70:	beq	198c0 <__assert_fail@plt+0x83d8>
   19a74:	ldr	r0, [sp, #4]
   19a78:	add	r1, sp, #32
   19a7c:	mov	r5, r7
   19a80:	add	r9, sl, #96	; 0x60
   19a84:	ldr	ip, [r1], #4
   19a88:	add	r4, r2, r0, lsl #7
   19a8c:	mov	lr, #1
   19a90:	cmp	ip, #0
   19a94:	bne	19b18 <__assert_fail@plt+0x8630>
   19a98:	add	r0, r0, #1
   19a9c:	add	r5, r5, #4
   19aa0:	cmp	r0, #8
   19aa4:	bne	19a84 <__assert_fail@plt+0x859c>
   19aa8:	add	r5, sp, #2112	; 0x840
   19aac:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   19ab0:	tst	r3, #1024	; 0x400
   19ab4:	beq	19ae4 <__assert_fail@plt+0x85fc>
   19ab8:	mov	r4, #0
   19abc:	mov	r1, #10
   19ac0:	mov	r0, r7
   19ac4:	bl	146d4 <__assert_fail@plt+0x31ec>
   19ac8:	cmp	r0, #0
   19acc:	beq	19c00 <__assert_fail@plt+0x8718>
   19ad0:	ldr	r1, [sp, #4]
   19ad4:	ldr	r3, [r5, r4, lsl #2]
   19ad8:	cmp	r1, #0
   19adc:	strne	r3, [r2, #1064]	; 0x428
   19ae0:	str	r3, [r2, #40]	; 0x28
   19ae4:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   19ae8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   19aec:	ldr	r3, [sp, #8]
   19af0:	add	r6, r6, #1
   19af4:	ldr	r0, [r3, #8]
   19af8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   19afc:	ldr	r3, [sp, #8]
   19b00:	cmp	r6, fp
   19b04:	add	r3, r3, #12
   19b08:	str	r3, [sp, #8]
   19b0c:	bne	19aec <__assert_fail@plt+0x8604>
   19b10:	mov	r0, #1
   19b14:	b	19474 <__assert_fail@plt+0x7f8c>
   19b18:	tst	ip, #1
   19b1c:	beq	19b58 <__assert_fail@plt+0x8670>
   19b20:	mov	r3, #0
   19b24:	b	19b2c <__assert_fail@plt+0x8644>
   19b28:	add	r3, r3, #1
   19b2c:	ldr	sl, [r5, r3, lsl #5]
   19b30:	tst	lr, sl
   19b34:	beq	19b28 <__assert_fail@plt+0x8640>
   19b38:	ldr	sl, [r9, r0, lsl #2]
   19b3c:	lsl	r3, r3, #2
   19b40:	add	r8, sp, #2112	; 0x840
   19b44:	add	r3, r8, r3
   19b48:	tst	lr, sl
   19b4c:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   19b50:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   19b54:	str	r3, [r4]
   19b58:	lsl	lr, lr, #1
   19b5c:	add	r4, r4, #4
   19b60:	lsr	ip, ip, #1
   19b64:	b	19a90 <__assert_fail@plt+0x85a8>
   19b68:	mov	r1, #512	; 0x200
   19b6c:	mov	r0, #4
   19b70:	bl	1ff70 <__assert_fail@plt+0xea88>
   19b74:	cmp	r0, #0
   19b78:	mov	r2, r0
   19b7c:	str	r0, [r9, #48]	; 0x30
   19b80:	beq	198c0 <__assert_fail@plt+0x83d8>
   19b84:	add	r3, sp, #32
   19b88:	add	r9, r0, #1024	; 0x400
   19b8c:	mov	r4, r7
   19b90:	ldr	ip, [r3], #4
   19b94:	mov	lr, r0
   19b98:	mov	r5, #1
   19b9c:	cmp	ip, #0
   19ba0:	bne	19bb8 <__assert_fail@plt+0x86d0>
   19ba4:	add	r0, r0, #128	; 0x80
   19ba8:	add	r4, r4, #4
   19bac:	cmp	r0, r9
   19bb0:	bne	19b90 <__assert_fail@plt+0x86a8>
   19bb4:	b	19aa8 <__assert_fail@plt+0x85c0>
   19bb8:	tst	ip, #1
   19bbc:	beq	19bf0 <__assert_fail@plt+0x8708>
   19bc0:	mov	r1, #0
   19bc4:	b	19bcc <__assert_fail@plt+0x86e4>
   19bc8:	add	r1, r1, #1
   19bcc:	ldr	sl, [r4, r1, lsl #5]
   19bd0:	tst	r5, sl
   19bd4:	beq	19bc8 <__assert_fail@plt+0x86e0>
   19bd8:	add	r8, sp, #2112	; 0x840
   19bdc:	add	r1, r8, r1, lsl #2
   19be0:	ldr	sl, [r1, #-2048]	; 0xfffff800
   19be4:	str	sl, [lr]
   19be8:	ldr	r1, [r1, #-1024]	; 0xfffffc00
   19bec:	str	r1, [lr, #1024]	; 0x400
   19bf0:	lsl	r5, r5, #1
   19bf4:	add	lr, lr, #4
   19bf8:	lsr	ip, ip, #1
   19bfc:	b	19b9c <__assert_fail@plt+0x86b4>
   19c00:	add	r4, r4, #1
   19c04:	add	r7, r7, #32
   19c08:	cmp	r4, fp
   19c0c:	bne	19abc <__assert_fail@plt+0x85d4>
   19c10:	b	19ae4 <__assert_fail@plt+0x85fc>
   19c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c18:	sub	sp, sp, #28
   19c1c:	mov	r8, r0
   19c20:	add	r5, sp, #12
   19c24:	mov	r4, r1
   19c28:	mov	r0, r5
   19c2c:	mov	r9, r2
   19c30:	ldr	r1, [r1, #4]
   19c34:	mov	sl, r3
   19c38:	bl	15218 <__assert_fail@plt+0x3d30>
   19c3c:	subs	r6, r0, #0
   19c40:	moveq	r7, r6
   19c44:	beq	19ce8 <__assert_fail@plt+0x8800>
   19c48:	mov	r0, r6
   19c4c:	add	sp, sp, #28
   19c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c54:	ldr	r2, [r0, r7, lsl #2]
   19c58:	mov	r3, #12
   19c5c:	ldr	r1, [r8, #24]
   19c60:	mla	r1, r3, r2, r1
   19c64:	mov	r3, #0
   19c68:	ldr	lr, [r1, #4]
   19c6c:	cmp	r3, lr
   19c70:	blt	19c94 <__assert_fail@plt+0x87ac>
   19c74:	mov	r0, r5
   19c78:	bl	17f1c <__assert_fail@plt+0x6a34>
   19c7c:	subs	fp, r0, #0
   19c80:	beq	19ce4 <__assert_fail@plt+0x87fc>
   19c84:	ldr	r0, [sp, #20]
   19c88:	mov	r6, fp
   19c8c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   19c90:	b	19c48 <__assert_fail@plt+0x8760>
   19c94:	ldr	r0, [r1, #8]
   19c98:	ldr	ip, [r8]
   19c9c:	ldr	r0, [r0, r3, lsl #2]
   19ca0:	add	fp, ip, r0, lsl #3
   19ca4:	ldrb	fp, [fp, #4]
   19ca8:	cmp	sl, fp
   19cac:	bne	19cbc <__assert_fail@plt+0x87d4>
   19cb0:	ldr	ip, [ip, r0, lsl #3]
   19cb4:	cmp	r9, ip
   19cb8:	beq	19cc4 <__assert_fail@plt+0x87dc>
   19cbc:	add	r3, r3, #1
   19cc0:	b	19c6c <__assert_fail@plt+0x8784>
   19cc4:	cmn	r0, #1
   19cc8:	beq	19c74 <__assert_fail@plt+0x878c>
   19ccc:	mov	r3, r9
   19cd0:	mov	r1, r5
   19cd4:	str	sl, [sp]
   19cd8:	mov	r0, r8
   19cdc:	bl	17e2c <__assert_fail@plt+0x6944>
   19ce0:	b	19c7c <__assert_fail@plt+0x8794>
   19ce4:	add	r7, r7, #1
   19ce8:	ldr	r3, [r4, #4]
   19cec:	ldr	r0, [r4, #8]
   19cf0:	cmp	r3, r7
   19cf4:	bgt	19c54 <__assert_fail@plt+0x876c>
   19cf8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   19cfc:	ldm	r5, {r0, r1, r2}
   19d00:	stm	r4, {r0, r1, r2}
   19d04:	b	19c48 <__assert_fail@plt+0x8760>
   19d08:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d0c:	mov	r3, #0
   19d10:	ldr	r4, [r2, #4]
   19d14:	str	r3, [r0]
   19d18:	cmp	r4, r3
   19d1c:	movne	r7, r4
   19d20:	bne	19d40 <__assert_fail@plt+0x8858>
   19d24:	mov	r0, r4
   19d28:	add	sp, sp, #4
   19d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d30:	ldr	ip, [r2, #8]
   19d34:	ldr	ip, [ip, r3, lsl #2]
   19d38:	add	r3, r3, #1
   19d3c:	add	r7, r7, ip
   19d40:	cmp	r4, r3
   19d44:	bgt	19d30 <__assert_fail@plt+0x8848>
   19d48:	ldr	r3, [r1, #68]	; 0x44
   19d4c:	mov	r5, r2
   19d50:	mov	r6, r1
   19d54:	mov	r8, r0
   19d58:	mov	r9, #0
   19d5c:	and	r2, r7, r3
   19d60:	mov	r3, #12
   19d64:	mul	r3, r3, r2
   19d68:	ldr	r2, [r1, #32]
   19d6c:	ldr	sl, [r2, r3]
   19d70:	add	fp, r2, r3
   19d74:	cmp	sl, r9
   19d78:	bgt	19dc0 <__assert_fail@plt+0x88d8>
   19d7c:	mov	r1, #1
   19d80:	mov	r0, #56	; 0x38
   19d84:	bl	1ff70 <__assert_fail@plt+0xea88>
   19d88:	subs	r4, r0, #0
   19d8c:	beq	19db0 <__assert_fail@plt+0x88c8>
   19d90:	add	r9, r4, #4
   19d94:	mov	r1, r5
   19d98:	mov	r0, r9
   19d9c:	bl	17024 <__assert_fail@plt+0x5b3c>
   19da0:	cmp	r0, #0
   19da4:	beq	19df0 <__assert_fail@plt+0x8908>
   19da8:	mov	r0, r4
   19dac:	bl	12bd8 <__assert_fail@plt+0x16f0>
   19db0:	mov	r3, #12
   19db4:	mov	r4, #0
   19db8:	str	r3, [r8]
   19dbc:	b	19d24 <__assert_fail@plt+0x883c>
   19dc0:	ldr	r3, [fp, #8]
   19dc4:	ldr	r4, [r3, r9, lsl #2]
   19dc8:	ldr	r3, [r4]
   19dcc:	cmp	r3, r7
   19dd0:	bne	19de8 <__assert_fail@plt+0x8900>
   19dd4:	mov	r1, r5
   19dd8:	add	r0, r4, #4
   19ddc:	bl	147c8 <__assert_fail@plt+0x32e0>
   19de0:	cmp	r0, #0
   19de4:	bne	19d24 <__assert_fail@plt+0x883c>
   19de8:	add	r9, r9, #1
   19dec:	b	19d74 <__assert_fail@plt+0x888c>
   19df0:	ldr	r1, [pc, #188]	; 19eb4 <__assert_fail@plt+0x89cc>
   19df4:	str	r9, [r4, #40]	; 0x28
   19df8:	ldr	lr, [r5, #4]
   19dfc:	cmp	r0, lr
   19e00:	blt	19e28 <__assert_fail@plt+0x8940>
   19e04:	mov	r2, r7
   19e08:	mov	r1, r4
   19e0c:	mov	r0, r6
   19e10:	bl	16f44 <__assert_fail@plt+0x5a5c>
   19e14:	cmp	r0, #0
   19e18:	beq	19d24 <__assert_fail@plt+0x883c>
   19e1c:	mov	r0, r4
   19e20:	bl	15c28 <__assert_fail@plt+0x4740>
   19e24:	b	19db0 <__assert_fail@plt+0x88c8>
   19e28:	ldr	r3, [r5, #8]
   19e2c:	ldr	r2, [r3, r0, lsl #2]
   19e30:	ldr	r3, [r6]
   19e34:	add	r3, r3, r2, lsl #3
   19e38:	ldrb	r2, [r3, #4]
   19e3c:	cmp	r2, #1
   19e40:	bne	19e50 <__assert_fail@plt+0x8968>
   19e44:	ldr	ip, [r3, #4]
   19e48:	tst	r1, ip
   19e4c:	beq	19eac <__assert_fail@plt+0x89c4>
   19e50:	ldrb	sl, [r3, #6]
   19e54:	cmp	r2, #2
   19e58:	ldrb	ip, [r4, #52]	; 0x34
   19e5c:	ubfx	sl, sl, #4, #1
   19e60:	ubfx	r9, ip, #5, #1
   19e64:	orr	r9, r9, sl
   19e68:	bfi	ip, r9, #5, #1
   19e6c:	uxtbeq	r3, ip
   19e70:	orreq	r3, r3, #16
   19e74:	strb	ip, [r4, #52]	; 0x34
   19e78:	beq	19ea8 <__assert_fail@plt+0x89c0>
   19e7c:	cmp	r2, #4
   19e80:	ldrbeq	r3, [r4, #52]	; 0x34
   19e84:	orreq	r3, r3, #64	; 0x40
   19e88:	beq	19ea8 <__assert_fail@plt+0x89c0>
   19e8c:	cmp	r2, #12
   19e90:	beq	19ea0 <__assert_fail@plt+0x89b8>
   19e94:	ldr	r3, [r3, #4]
   19e98:	tst	r1, r3
   19e9c:	beq	19eac <__assert_fail@plt+0x89c4>
   19ea0:	ldrb	r3, [r4, #52]	; 0x34
   19ea4:	orr	r3, r3, #128	; 0x80
   19ea8:	strb	r3, [r4, #52]	; 0x34
   19eac:	add	r0, r0, #1
   19eb0:	b	19dfc <__assert_fail@plt+0x8914>
   19eb4:	andeq	pc, r3, r0, lsl #30
   19eb8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19ebc:	mov	r7, r0
   19ec0:	mov	r5, r1
   19ec4:	mov	r8, r2
   19ec8:	mov	r6, r3
   19ecc:	mov	r4, #0
   19ed0:	cmp	r4, r6
   19ed4:	blt	19ee4 <__assert_fail@plt+0x89fc>
   19ed8:	mov	r0, #0
   19edc:	add	sp, sp, #16
   19ee0:	pop	{r4, r5, r6, r7, r8, pc}
   19ee4:	ldr	r1, [r5, r4, lsl #2]
   19ee8:	ldr	r2, [r8, r4, lsl #2]
   19eec:	cmp	r1, #0
   19ef0:	streq	r2, [r5, r4, lsl #2]
   19ef4:	beq	19f44 <__assert_fail@plt+0x8a5c>
   19ef8:	cmp	r2, #0
   19efc:	beq	19f44 <__assert_fail@plt+0x8a5c>
   19f00:	add	r2, r2, #4
   19f04:	add	r1, r1, #4
   19f08:	add	r0, sp, #4
   19f0c:	bl	1709c <__assert_fail@plt+0x5bb4>
   19f10:	cmp	r0, #0
   19f14:	str	r0, [sp]
   19f18:	bne	19edc <__assert_fail@plt+0x89f4>
   19f1c:	add	r2, sp, #4
   19f20:	mov	r1, r7
   19f24:	mov	r0, sp
   19f28:	bl	19d08 <__assert_fail@plt+0x8820>
   19f2c:	str	r0, [r5, r4, lsl #2]
   19f30:	ldr	r0, [sp, #12]
   19f34:	bl	12bd8 <__assert_fail@plt+0x16f0>
   19f38:	ldr	r0, [sp]
   19f3c:	cmp	r0, #0
   19f40:	bne	19edc <__assert_fail@plt+0x89f4>
   19f44:	add	r4, r4, #1
   19f48:	b	19ed0 <__assert_fail@plt+0x89e8>
   19f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f50:	sub	sp, sp, #36	; 0x24
   19f54:	mov	r8, r1
   19f58:	mov	r1, r2
   19f5c:	mov	r6, r0
   19f60:	mov	r9, r2
   19f64:	str	r3, [sp, #4]
   19f68:	bl	14cac <__assert_fail@plt+0x37c4>
   19f6c:	cmn	r0, #1
   19f70:	bne	19f80 <__assert_fail@plt+0x8a98>
   19f74:	mov	r0, #0
   19f78:	add	sp, sp, #36	; 0x24
   19f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f80:	mov	r3, #24
   19f84:	ldr	r7, [r6, #84]	; 0x54
   19f88:	mla	r3, r0, r3, r3
   19f8c:	str	r3, [sp, #8]
   19f90:	ldr	r3, [sp, #8]
   19f94:	mov	fp, #12
   19f98:	ldr	r4, [r6, #116]	; 0x74
   19f9c:	add	r4, r4, r3
   19fa0:	ldr	sl, [r4, #-24]	; 0xffffffe8
   19fa4:	mov	r0, r8
   19fa8:	mov	r1, sl
   19fac:	bl	14840 <__assert_fail@plt+0x3358>
   19fb0:	cmp	r0, #0
   19fb4:	beq	1a100 <__assert_fail@plt+0x8c18>
   19fb8:	ldr	r2, [r4, #-16]
   19fbc:	ldr	r5, [r4, #-12]
   19fc0:	add	r5, r9, r5
   19fc4:	sub	r5, r5, r2
   19fc8:	cmp	r9, r5
   19fcc:	bne	1a058 <__assert_fail@plt+0x8b70>
   19fd0:	ldr	r2, [r7, #20]
   19fd4:	mov	r0, r8
   19fd8:	mla	r3, fp, sl, r2
   19fdc:	ldr	r3, [r3, #8]
   19fe0:	ldr	r5, [r3]
   19fe4:	mov	r1, r5
   19fe8:	bl	14840 <__assert_fail@plt+0x3358>
   19fec:	cmp	r0, #0
   19ff0:	bne	1a100 <__assert_fail@plt+0x8c18>
   19ff4:	add	r0, sp, #20
   19ff8:	bl	151d8 <__assert_fail@plt+0x3cf0>
   19ffc:	add	r1, sp, #20
   1a000:	str	r0, [sp, #16]
   1a004:	mov	r0, r7
   1a008:	ldr	r2, [sp, #4]
   1a00c:	ldr	r3, [sp, #72]	; 0x48
   1a010:	bl	19c14 <__assert_fail@plt+0x872c>
   1a014:	mov	r4, r0
   1a018:	add	r1, sp, #20
   1a01c:	mov	r0, r8
   1a020:	bl	17f1c <__assert_fail@plt+0x6a34>
   1a024:	mov	r5, r0
   1a028:	ldr	r0, [sp, #28]
   1a02c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a030:	ldr	r0, [sp, #16]
   1a034:	orr	r3, r4, r5
   1a038:	orrs	r3, r3, r0
   1a03c:	beq	19f90 <__assert_fail@plt+0x8aa8>
   1a040:	cmp	r0, #0
   1a044:	bne	19f78 <__assert_fail@plt+0x8a90>
   1a048:	cmp	r4, #0
   1a04c:	movne	r0, r4
   1a050:	moveq	r0, r5
   1a054:	b	19f78 <__assert_fail@plt+0x8a90>
   1a058:	ldr	r3, [r6, #100]	; 0x64
   1a05c:	ldr	r2, [r7, #12]
   1a060:	ldr	r3, [r3, r5, lsl #2]
   1a064:	ldr	sl, [r2, sl, lsl #2]
   1a068:	cmp	r3, #0
   1a06c:	beq	1a12c <__assert_fail@plt+0x8c44>
   1a070:	add	r3, r3, #4
   1a074:	mov	r1, sl
   1a078:	mov	r0, r3
   1a07c:	str	r3, [sp, #12]
   1a080:	bl	14840 <__assert_fail@plt+0x3358>
   1a084:	cmp	r0, #0
   1a088:	bne	1a100 <__assert_fail@plt+0x8c18>
   1a08c:	ldr	r3, [sp, #12]
   1a090:	add	r0, sp, #20
   1a094:	mov	r1, r3
   1a098:	bl	17024 <__assert_fail@plt+0x5b3c>
   1a09c:	mov	r1, sl
   1a0a0:	str	r0, [sp, #16]
   1a0a4:	add	r0, sp, #20
   1a0a8:	bl	17b44 <__assert_fail@plt+0x665c>
   1a0ac:	ldr	r3, [sp, #16]
   1a0b0:	eor	r0, r0, #1
   1a0b4:	cmp	r3, #0
   1a0b8:	orrne	r0, r0, #1
   1a0bc:	tst	r0, #255	; 0xff
   1a0c0:	bne	1a114 <__assert_fail@plt+0x8c2c>
   1a0c4:	ldr	sl, [r6, #100]	; 0x64
   1a0c8:	add	r2, sp, #20
   1a0cc:	mov	r1, r7
   1a0d0:	add	r0, sp, #16
   1a0d4:	bl	19d08 <__assert_fail@plt+0x8820>
   1a0d8:	str	r0, [sl, r5, lsl #2]
   1a0dc:	ldr	r0, [sp, #28]
   1a0e0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a0e4:	ldr	r3, [r6, #100]	; 0x64
   1a0e8:	ldr	r3, [r3, r5, lsl #2]
   1a0ec:	cmp	r3, #0
   1a0f0:	bne	1a100 <__assert_fail@plt+0x8c18>
   1a0f4:	ldr	r0, [sp, #16]
   1a0f8:	cmp	r0, #0
   1a0fc:	bne	19f78 <__assert_fail@plt+0x8a90>
   1a100:	add	r4, r4, #24
   1a104:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1a108:	cmp	r3, #0
   1a10c:	bne	19fa0 <__assert_fail@plt+0x8ab8>
   1a110:	b	19f74 <__assert_fail@plt+0x8a8c>
   1a114:	ldr	r0, [sp, #28]
   1a118:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a11c:	ldr	r0, [sp, #16]
   1a120:	cmp	r0, #0
   1a124:	moveq	r0, #12
   1a128:	b	19f78 <__assert_fail@plt+0x8a90>
   1a12c:	mov	r1, sl
   1a130:	add	r0, sp, #20
   1a134:	bl	151d8 <__assert_fail@plt+0x3cf0>
   1a138:	cmp	r0, #0
   1a13c:	str	r0, [sp, #16]
   1a140:	beq	1a0c4 <__assert_fail@plt+0x8bdc>
   1a144:	b	19f78 <__assert_fail@plt+0x8a90>
   1a148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a14c:	mov	r9, r3
   1a150:	sub	sp, sp, #84	; 0x54
   1a154:	mov	sl, #0
   1a158:	mov	r4, r0
   1a15c:	mov	r7, r1
   1a160:	mov	r6, r2
   1a164:	ldr	r3, [r0, #84]	; 0x54
   1a168:	ldr	r5, [r0, #120]	; 0x78
   1a16c:	ldr	r8, [r1, #4]
   1a170:	str	r3, [sp, #12]
   1a174:	ldr	r3, [r3]
   1a178:	str	sl, [sp, #48]	; 0x30
   1a17c:	ldr	r3, [r3, r2, lsl #3]
   1a180:	str	r3, [sp, #16]
   1a184:	ldr	r3, [sp, #124]	; 0x7c
   1a188:	add	r5, r3, r5
   1a18c:	cmp	r5, r8
   1a190:	blt	1a1ec <__assert_fail@plt+0x8d04>
   1a194:	mvn	r3, #-2147483648	; 0x80000000
   1a198:	add	r5, r5, #1
   1a19c:	sub	r3, r3, r8
   1a1a0:	cmp	r3, r5
   1a1a4:	bge	1a1b4 <__assert_fail@plt+0x8ccc>
   1a1a8:	mov	r0, #12
   1a1ac:	add	sp, sp, #84	; 0x54
   1a1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1b4:	add	fp, r8, r5
   1a1b8:	cmn	fp, #-1073741823	; 0xc0000001
   1a1bc:	bhi	1a1a8 <__assert_fail@plt+0x8cc0>
   1a1c0:	lsl	r1, fp, #2
   1a1c4:	ldr	r0, [r7, #8]
   1a1c8:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1a1cc:	cmp	r0, #0
   1a1d0:	beq	1a1a8 <__assert_fail@plt+0x8cc0>
   1a1d4:	lsl	r2, r5, #2
   1a1d8:	mov	r1, sl
   1a1dc:	str	fp, [r7, #4]
   1a1e0:	str	r0, [r7, #8]
   1a1e4:	add	r0, r0, r8, lsl #2
   1a1e8:	bl	113ec <memset@plt>
   1a1ec:	ldr	r5, [r7]
   1a1f0:	mov	r0, r4
   1a1f4:	ldr	r3, [r4, #100]	; 0x64
   1a1f8:	ldr	sl, [r7, #8]
   1a1fc:	cmp	r5, #0
   1a200:	moveq	r5, r9
   1a204:	ldr	r2, [r4, #88]	; 0x58
   1a208:	str	r3, [sp, #32]
   1a20c:	sub	r1, r5, #1
   1a210:	ldr	r3, [r4, #40]	; 0x28
   1a214:	str	r5, [r4, #40]	; 0x28
   1a218:	str	sl, [r4, #100]	; 0x64
   1a21c:	str	r3, [sp, #36]	; 0x24
   1a220:	bl	18268 <__assert_fail@plt+0x6d80>
   1a224:	cmp	r5, r9
   1a228:	mov	r8, r0
   1a22c:	bne	1a2a8 <__assert_fail@plt+0x8dc0>
   1a230:	mov	r1, r6
   1a234:	add	r0, sp, #56	; 0x38
   1a238:	bl	151d8 <__assert_fail@plt+0x3cf0>
   1a23c:	cmp	r0, #0
   1a240:	str	r0, [sp, #48]	; 0x30
   1a244:	bne	1a1ac <__assert_fail@plt+0x8cc4>
   1a248:	add	r1, sp, #56	; 0x38
   1a24c:	ldr	r0, [sp, #12]
   1a250:	ldr	r2, [sp, #16]
   1a254:	ldr	r3, [sp, #128]	; 0x80
   1a258:	bl	19c14 <__assert_fail@plt+0x872c>
   1a25c:	cmp	r0, #0
   1a260:	str	r0, [sp, #48]	; 0x30
   1a264:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a268:	ldr	r3, [sp, #60]	; 0x3c
   1a26c:	cmp	r3, #0
   1a270:	bne	1a370 <__assert_fail@plt+0x8e88>
   1a274:	mov	r3, r8
   1a278:	add	r2, sp, #56	; 0x38
   1a27c:	ldr	r1, [sp, #12]
   1a280:	add	r0, sp, #48	; 0x30
   1a284:	bl	171dc <__assert_fail@plt+0x5cf4>
   1a288:	subs	r6, r0, #0
   1a28c:	bne	1a29c <__assert_fail@plt+0x8db4>
   1a290:	ldr	r3, [sp, #48]	; 0x30
   1a294:	cmp	r3, #0
   1a298:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a29c:	ldr	r3, [r4, #100]	; 0x64
   1a2a0:	str	r6, [r3, r5, lsl #2]
   1a2a4:	b	1a2e4 <__assert_fail@plt+0x8dfc>
   1a2a8:	ldr	r6, [sl, r5, lsl #2]
   1a2ac:	cmp	r6, #0
   1a2b0:	beq	1a354 <__assert_fail@plt+0x8e6c>
   1a2b4:	ldrb	r3, [r6, #52]	; 0x34
   1a2b8:	tst	r3, #64	; 0x40
   1a2bc:	beq	1a354 <__assert_fail@plt+0x8e6c>
   1a2c0:	add	r1, r6, #4
   1a2c4:	add	r0, sp, #56	; 0x38
   1a2c8:	bl	17024 <__assert_fail@plt+0x5b3c>
   1a2cc:	cmp	r0, #0
   1a2d0:	str	r0, [sp, #48]	; 0x30
   1a2d4:	bne	1a1ac <__assert_fail@plt+0x8cc4>
   1a2d8:	ldrb	r3, [r6, #52]	; 0x34
   1a2dc:	tst	r3, #64	; 0x40
   1a2e0:	bne	1a268 <__assert_fail@plt+0x8d80>
   1a2e4:	mov	fp, #0
   1a2e8:	mov	r8, fp
   1a2ec:	ldr	r3, [sp, #124]	; 0x7c
   1a2f0:	cmp	r5, r3
   1a2f4:	bge	1a304 <__assert_fail@plt+0x8e1c>
   1a2f8:	ldr	r3, [r4, #120]	; 0x78
   1a2fc:	cmp	r3, fp
   1a300:	bge	1a3a8 <__assert_fail@plt+0x8ec0>
   1a304:	ldr	r0, [sp, #64]	; 0x40
   1a308:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a30c:	ldr	r3, [r4, #100]	; 0x64
   1a310:	ldr	r2, [sp, #124]	; 0x7c
   1a314:	ldr	r0, [r3, r2, lsl #2]
   1a318:	str	r5, [r7]
   1a31c:	ldr	r3, [sp, #32]
   1a320:	cmp	r0, #0
   1a324:	addne	r0, r0, #4
   1a328:	str	r3, [r4, #100]	; 0x64
   1a32c:	cmp	r0, #0
   1a330:	ldr	r3, [sp, #36]	; 0x24
   1a334:	moveq	r0, #1
   1a338:	str	r3, [r4, #40]	; 0x28
   1a33c:	beq	1a1ac <__assert_fail@plt+0x8cc4>
   1a340:	ldr	r1, [sp, #120]	; 0x78
   1a344:	bl	14840 <__assert_fail@plt+0x3358>
   1a348:	clz	r0, r0
   1a34c:	lsr	r0, r0, #5
   1a350:	b	1a1ac <__assert_fail@plt+0x8cc4>
   1a354:	mov	r3, #0
   1a358:	cmp	r6, r3
   1a35c:	str	r3, [sp, #56]	; 0x38
   1a360:	str	r3, [sp, #60]	; 0x3c
   1a364:	str	r3, [sp, #64]	; 0x40
   1a368:	bne	1a2d8 <__assert_fail@plt+0x8df0>
   1a36c:	b	1a2e4 <__assert_fail@plt+0x8dfc>
   1a370:	ldr	r3, [sp, #128]	; 0x80
   1a374:	mov	r2, r5
   1a378:	add	r1, sp, #56	; 0x38
   1a37c:	mov	r0, r4
   1a380:	str	r3, [sp]
   1a384:	ldr	r3, [sp, #16]
   1a388:	bl	19f4c <__assert_fail@plt+0x8a64>
   1a38c:	cmp	r0, #0
   1a390:	str	r0, [sp, #48]	; 0x30
   1a394:	beq	1a274 <__assert_fail@plt+0x8d8c>
   1a398:	ldr	r0, [sp, #64]	; 0x40
   1a39c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a3a0:	ldr	r0, [sp, #48]	; 0x30
   1a3a4:	b	1a1ac <__assert_fail@plt+0x8cc4>
   1a3a8:	add	r3, r5, #1
   1a3ac:	add	r2, r5, #1
   1a3b0:	str	r3, [sp, #40]	; 0x28
   1a3b4:	ldr	r3, [r4, #100]	; 0x64
   1a3b8:	str	r8, [sp, #60]	; 0x3c
   1a3bc:	ldr	r1, [r3, r2, lsl #2]
   1a3c0:	cmp	r1, #0
   1a3c4:	beq	1a3e0 <__assert_fail@plt+0x8ef8>
   1a3c8:	add	r1, r1, #4
   1a3cc:	add	r0, sp, #56	; 0x38
   1a3d0:	bl	17f1c <__assert_fail@plt+0x6a34>
   1a3d4:	cmp	r0, #0
   1a3d8:	str	r0, [sp, #48]	; 0x30
   1a3dc:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a3e0:	cmp	r6, #0
   1a3e4:	beq	1a4f8 <__assert_fail@plt+0x9010>
   1a3e8:	ldr	sl, [r4, #84]	; 0x54
   1a3ec:	add	r3, sp, #68	; 0x44
   1a3f0:	mov	r2, #0
   1a3f4:	str	r2, [sp, #20]
   1a3f8:	str	r3, [sp, #28]
   1a3fc:	str	r8, [sp, #52]	; 0x34
   1a400:	str	r8, [sp, #68]	; 0x44
   1a404:	str	r8, [sp, #72]	; 0x48
   1a408:	str	r8, [sp, #76]	; 0x4c
   1a40c:	ldr	r3, [r6, #20]
   1a410:	ldr	r2, [sp, #20]
   1a414:	cmp	r2, r3
   1a418:	blt	1a42c <__assert_fail@plt+0x8f44>
   1a41c:	ldr	r0, [sp, #76]	; 0x4c
   1a420:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a424:	str	r8, [sp, #48]	; 0x30
   1a428:	b	1a4f8 <__assert_fail@plt+0x9010>
   1a42c:	ldr	r2, [sp, #20]
   1a430:	ldr	r3, [r6, #24]
   1a434:	ldr	r3, [r3, r2, lsl #2]
   1a438:	lsl	r9, r3, #3
   1a43c:	str	r3, [sp, #24]
   1a440:	ldr	r3, [sl]
   1a444:	add	r3, r3, r9
   1a448:	ldrb	r3, [r3, #6]
   1a44c:	tst	r3, #16
   1a450:	bne	1a480 <__assert_fail@plt+0x8f98>
   1a454:	ldr	r1, [sl]
   1a458:	mov	r2, r5
   1a45c:	mov	r0, r4
   1a460:	add	r1, r1, r9
   1a464:	bl	18348 <__assert_fail@plt+0x6e60>
   1a468:	cmp	r0, #0
   1a46c:	bne	1a600 <__assert_fail@plt+0x9118>
   1a470:	ldr	r3, [sp, #20]
   1a474:	add	r3, r3, #1
   1a478:	str	r3, [sp, #20]
   1a47c:	b	1a40c <__assert_fail@plt+0x8f24>
   1a480:	mov	r3, r5
   1a484:	mov	r2, r4
   1a488:	ldr	r1, [sp, #24]
   1a48c:	mov	r0, sl
   1a490:	bl	169ec <__assert_fail@plt+0x5504>
   1a494:	cmp	r0, #1
   1a498:	ble	1a630 <__assert_fail@plt+0x9148>
   1a49c:	ldr	r3, [sl, #12]
   1a4a0:	add	r9, r5, r0
   1a4a4:	ldr	r2, [sp, #24]
   1a4a8:	ldr	r3, [r3, r2, lsl #2]
   1a4ac:	ldr	r2, [r4, #100]	; 0x64
   1a4b0:	ldr	r1, [r2, r9, lsl #2]
   1a4b4:	str	r8, [sp, #72]	; 0x48
   1a4b8:	cmp	r1, #0
   1a4bc:	beq	1a5a8 <__assert_fail@plt+0x90c0>
   1a4c0:	add	r1, r1, #4
   1a4c4:	ldr	r0, [sp, #28]
   1a4c8:	str	r3, [sp, #44]	; 0x2c
   1a4cc:	bl	17f1c <__assert_fail@plt+0x6a34>
   1a4d0:	cmp	r0, #0
   1a4d4:	str	r0, [sp, #52]	; 0x34
   1a4d8:	ldr	r3, [sp, #44]	; 0x2c
   1a4dc:	beq	1a5a8 <__assert_fail@plt+0x90c0>
   1a4e0:	ldr	r0, [sp, #76]	; 0x4c
   1a4e4:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a4e8:	ldr	r3, [sp, #52]	; 0x34
   1a4ec:	cmp	r3, #0
   1a4f0:	str	r3, [sp, #48]	; 0x30
   1a4f4:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a4f8:	ldr	r3, [sp, #60]	; 0x3c
   1a4fc:	add	r9, r5, #1
   1a500:	cmp	r3, #0
   1a504:	beq	1a550 <__assert_fail@plt+0x9068>
   1a508:	add	r1, sp, #56	; 0x38
   1a50c:	ldr	r0, [sp, #12]
   1a510:	ldr	r2, [sp, #16]
   1a514:	ldr	r3, [sp, #128]	; 0x80
   1a518:	bl	19c14 <__assert_fail@plt+0x872c>
   1a51c:	cmp	r0, #0
   1a520:	str	r0, [sp, #48]	; 0x30
   1a524:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a528:	ldr	r3, [sp, #128]	; 0x80
   1a52c:	mov	r2, r9
   1a530:	add	r1, sp, #56	; 0x38
   1a534:	mov	r0, r4
   1a538:	str	r3, [sp]
   1a53c:	ldr	r3, [sp, #16]
   1a540:	bl	19f4c <__assert_fail@plt+0x8a64>
   1a544:	cmp	r0, #0
   1a548:	str	r0, [sp, #48]	; 0x30
   1a54c:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a550:	mov	r1, r5
   1a554:	mov	r0, r4
   1a558:	ldr	r2, [r4, #88]	; 0x58
   1a55c:	bl	18268 <__assert_fail@plt+0x6d80>
   1a560:	mov	r3, r0
   1a564:	add	r2, sp, #56	; 0x38
   1a568:	ldr	r1, [sp, #12]
   1a56c:	add	r0, sp, #48	; 0x30
   1a570:	bl	171dc <__assert_fail@plt+0x5cf4>
   1a574:	subs	r6, r0, #0
   1a578:	bne	1a588 <__assert_fail@plt+0x90a0>
   1a57c:	ldr	r3, [sp, #48]	; 0x30
   1a580:	cmp	r3, #0
   1a584:	bne	1a398 <__assert_fail@plt+0x8eb0>
   1a588:	ldr	r2, [sp, #40]	; 0x28
   1a58c:	cmp	r6, #0
   1a590:	addeq	fp, fp, #1
   1a594:	ldr	r3, [r4, #100]	; 0x64
   1a598:	str	r6, [r3, r2, lsl #2]
   1a59c:	movne	fp, #0
   1a5a0:	mov	r5, r9
   1a5a4:	b	1a2ec <__assert_fail@plt+0x8e04>
   1a5a8:	mov	r1, r3
   1a5ac:	ldr	r0, [sp, #28]
   1a5b0:	bl	17b44 <__assert_fail@plt+0x665c>
   1a5b4:	cmp	r0, #0
   1a5b8:	bne	1a5d0 <__assert_fail@plt+0x90e8>
   1a5bc:	ldr	r0, [sp, #76]	; 0x4c
   1a5c0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a5c4:	mov	r3, #12
   1a5c8:	str	r3, [sp, #48]	; 0x30
   1a5cc:	b	1a398 <__assert_fail@plt+0x8eb0>
   1a5d0:	ldr	r3, [r4, #100]	; 0x64
   1a5d4:	mov	r1, sl
   1a5d8:	add	r0, sp, #52	; 0x34
   1a5dc:	ldr	r2, [sp, #28]
   1a5e0:	str	r3, [sp, #44]	; 0x2c
   1a5e4:	bl	19d08 <__assert_fail@plt+0x8820>
   1a5e8:	ldr	r3, [sp, #44]	; 0x2c
   1a5ec:	str	r0, [r3, r9, lsl #2]
   1a5f0:	ldr	r3, [r4, #100]	; 0x64
   1a5f4:	ldr	r3, [r3, r9, lsl #2]
   1a5f8:	cmp	r3, #0
   1a5fc:	beq	1a620 <__assert_fail@plt+0x9138>
   1a600:	ldr	r3, [sl, #12]
   1a604:	add	r0, sp, #56	; 0x38
   1a608:	ldr	r2, [sp, #24]
   1a60c:	ldr	r1, [r3, r2, lsl #2]
   1a610:	bl	17b44 <__assert_fail@plt+0x665c>
   1a614:	cmp	r0, #0
   1a618:	bne	1a470 <__assert_fail@plt+0x8f88>
   1a61c:	b	1a5bc <__assert_fail@plt+0x90d4>
   1a620:	ldr	r3, [sp, #52]	; 0x34
   1a624:	cmp	r3, #0
   1a628:	beq	1a600 <__assert_fail@plt+0x9118>
   1a62c:	b	1a4e0 <__assert_fail@plt+0x8ff8>
   1a630:	cmp	r0, #0
   1a634:	beq	1a454 <__assert_fail@plt+0x8f6c>
   1a638:	b	1a600 <__assert_fail@plt+0x9118>
   1a63c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a640:	sub	sp, sp, #20
   1a644:	mov	r9, r3
   1a648:	mov	r3, #8
   1a64c:	mov	r8, r1
   1a650:	mov	r7, r2
   1a654:	add	r1, r2, #8
   1a658:	ldr	r5, [sp, #56]	; 0x38
   1a65c:	mov	r4, r0
   1a660:	str	r9, [sp]
   1a664:	str	r5, [sp, #4]
   1a668:	str	r3, [sp, #8]
   1a66c:	ldrd	r2, [r2]
   1a670:	bl	1a148 <__assert_fail@plt+0x8c60>
   1a674:	subs	fp, r0, #0
   1a678:	bne	1a6b4 <__assert_fail@plt+0x91cc>
   1a67c:	ldrd	r2, [r4, #108]	; 0x6c
   1a680:	ldr	sl, [r8]
   1a684:	ldr	r6, [r7, #4]
   1a688:	cmp	r2, r3
   1a68c:	blt	1a6ec <__assert_fail@plt+0x9204>
   1a690:	mov	r1, #48	; 0x30
   1a694:	ldr	r0, [r4, #116]	; 0x74
   1a698:	mul	r1, r1, r3
   1a69c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1a6a0:	subs	r3, r0, #0
   1a6a4:	bne	1a6c0 <__assert_fail@plt+0x91d8>
   1a6a8:	ldr	r0, [r4, #116]	; 0x74
   1a6ac:	mov	fp, #12
   1a6b0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1a6b4:	mov	r0, fp
   1a6b8:	add	sp, sp, #20
   1a6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6c0:	ldr	ip, [r4, #108]	; 0x6c
   1a6c4:	mov	r0, #24
   1a6c8:	mov	r1, fp
   1a6cc:	str	r3, [r4, #116]	; 0x74
   1a6d0:	ldr	r2, [r4, #112]	; 0x70
   1a6d4:	mul	r2, r0, r2
   1a6d8:	mla	r0, r0, ip, r3
   1a6dc:	bl	113ec <memset@plt>
   1a6e0:	ldr	r3, [r4, #112]	; 0x70
   1a6e4:	lsl	r3, r3, #1
   1a6e8:	str	r3, [r4, #112]	; 0x70
   1a6ec:	ldr	r2, [r4, #108]	; 0x6c
   1a6f0:	mov	r1, #24
   1a6f4:	ldr	r0, [r4, #116]	; 0x74
   1a6f8:	cmp	r2, #0
   1a6fc:	mul	r1, r1, r2
   1a700:	ble	1a71c <__assert_fail@plt+0x9234>
   1a704:	sub	r3, r1, #24
   1a708:	add	r3, r0, r3
   1a70c:	ldr	ip, [r3, #4]
   1a710:	cmp	r5, ip
   1a714:	moveq	ip, #1
   1a718:	strbeq	ip, [r3, #20]
   1a71c:	cmp	sl, r6
   1a720:	add	r3, r0, r1
   1a724:	str	r9, [r0, r1]
   1a728:	add	r2, r2, #1
   1a72c:	movne	r1, #0
   1a730:	mvneq	r1, #0
   1a734:	stmib	r3, {r5, sl}
   1a738:	mov	r0, r4
   1a73c:	str	r6, [r3, #12]
   1a740:	sub	r6, r6, sl
   1a744:	str	r1, [r3, #16]
   1a748:	str	r2, [r4, #108]	; 0x6c
   1a74c:	mov	r2, #0
   1a750:	strb	r2, [r3, #20]
   1a754:	ldr	r3, [r4, #120]	; 0x78
   1a758:	ldr	r1, [r7, #4]
   1a75c:	cmp	r3, r6
   1a760:	add	r5, r5, r1
   1a764:	strlt	r6, [r4, #120]	; 0x78
   1a768:	ldr	r1, [r8]
   1a76c:	sub	r1, r5, r1
   1a770:	add	sp, sp, #20
   1a774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a778:	b	15f9c <__assert_fail@plt+0x4ab4>
   1a77c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a780:	sub	sp, sp, #84	; 0x54
   1a784:	mov	r4, r0
   1a788:	ldr	r9, [r0, #40]	; 0x28
   1a78c:	str	r1, [sp, #56]	; 0x38
   1a790:	ldr	sl, [r0, #84]	; 0x54
   1a794:	lsl	r3, r9, #2
   1a798:	str	r3, [sp, #44]	; 0x2c
   1a79c:	mov	r3, #0
   1a7a0:	str	r3, [sp, #20]
   1a7a4:	ldr	r2, [sp, #20]
   1a7a8:	ldr	r3, [sp, #56]	; 0x38
   1a7ac:	ldr	r3, [r3, #4]
   1a7b0:	cmp	r3, r2
   1a7b4:	movle	r3, #0
   1a7b8:	ble	1ac10 <__assert_fail@plt+0x9728>
   1a7bc:	ldr	r2, [sp, #20]
   1a7c0:	ldr	r3, [sp, #56]	; 0x38
   1a7c4:	ldr	r3, [r3, #8]
   1a7c8:	ldr	r3, [r3, r2, lsl #2]
   1a7cc:	str	r3, [sp, #16]
   1a7d0:	ldr	r3, [sl]
   1a7d4:	ldr	r2, [sp, #16]
   1a7d8:	add	r3, r3, r2, lsl #3
   1a7dc:	ldrb	r2, [r3, #4]
   1a7e0:	cmp	r2, #4
   1a7e4:	beq	1a7f4 <__assert_fail@plt+0x930c>
   1a7e8:	ldr	r3, [sp, #20]
   1a7ec:	add	r3, r3, #1
   1a7f0:	b	1a7a0 <__assert_fail@plt+0x92b8>
   1a7f4:	ldr	r5, [r3, #4]
   1a7f8:	ldr	r3, [pc, #1400]	; 1ad78 <__assert_fail@plt+0x9890>
   1a7fc:	and	r3, r3, r5
   1a800:	cmp	r3, #0
   1a804:	beq	1a85c <__assert_fail@plt+0x9374>
   1a808:	mov	r1, r9
   1a80c:	mov	r0, r4
   1a810:	ldr	r2, [r4, #88]	; 0x58
   1a814:	bl	18268 <__assert_fail@plt+0x6d80>
   1a818:	ubfx	r3, r5, #8, #10
   1a81c:	tst	r3, #4
   1a820:	beq	1a82c <__assert_fail@plt+0x9344>
   1a824:	tst	r0, #1
   1a828:	beq	1a7e8 <__assert_fail@plt+0x9300>
   1a82c:	tst	r3, #8
   1a830:	beq	1a83c <__assert_fail@plt+0x9354>
   1a834:	tst	r0, #1
   1a838:	bne	1a7e8 <__assert_fail@plt+0x9300>
   1a83c:	tst	r3, #32
   1a840:	beq	1a84c <__assert_fail@plt+0x9364>
   1a844:	tst	r0, #2
   1a848:	beq	1a7e8 <__assert_fail@plt+0x9300>
   1a84c:	tst	r3, #128	; 0x80
   1a850:	beq	1a85c <__assert_fail@plt+0x9374>
   1a854:	tst	r0, #8
   1a858:	beq	1a7e8 <__assert_fail@plt+0x9300>
   1a85c:	ldr	r3, [r4, #108]	; 0x6c
   1a860:	mov	r1, r9
   1a864:	mov	r0, r4
   1a868:	str	r3, [sp, #24]
   1a86c:	bl	14cac <__assert_fail@plt+0x37c4>
   1a870:	cmn	r0, #1
   1a874:	beq	1a90c <__assert_fail@plt+0x9424>
   1a878:	mov	r3, #24
   1a87c:	mla	r3, r0, r3, r3
   1a880:	ldr	r0, [r4, #116]	; 0x74
   1a884:	add	r0, r0, r3
   1a888:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1a88c:	ldr	r2, [sp, #16]
   1a890:	cmp	r2, r3
   1a894:	bne	1a8fc <__assert_fail@plt+0x9414>
   1a898:	mov	r3, #0
   1a89c:	ldr	r2, [sp, #16]
   1a8a0:	str	r3, [sp, #64]	; 0x40
   1a8a4:	ldr	r3, [sp, #16]
   1a8a8:	lsl	r3, r3, #2
   1a8ac:	str	r3, [sp, #28]
   1a8b0:	mov	r3, #12
   1a8b4:	mul	fp, r3, r2
   1a8b8:	ldr	r2, [sp, #24]
   1a8bc:	ldr	r3, [r4, #108]	; 0x6c
   1a8c0:	cmp	r3, r2
   1a8c4:	ble	1a7e8 <__assert_fail@plt+0x9300>
   1a8c8:	ldr	r2, [sp, #24]
   1a8cc:	mov	r3, #24
   1a8d0:	ldr	r1, [r4, #116]	; 0x74
   1a8d4:	mul	r3, r3, r2
   1a8d8:	add	r2, r1, r3
   1a8dc:	ldr	r3, [r1, r3]
   1a8e0:	ldr	r1, [sp, #16]
   1a8e4:	cmp	r3, r1
   1a8e8:	beq	1ac18 <__assert_fail@plt+0x9730>
   1a8ec:	ldr	r3, [sp, #24]
   1a8f0:	add	r3, r3, #1
   1a8f4:	str	r3, [sp, #24]
   1a8f8:	b	1a8b8 <__assert_fail@plt+0x93d0>
   1a8fc:	add	r0, r0, #24
   1a900:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   1a904:	cmp	r3, #0
   1a908:	bne	1a888 <__assert_fail@plt+0x93a0>
   1a90c:	ldr	r2, [sp, #16]
   1a910:	ldr	r3, [r4, #84]	; 0x54
   1a914:	ldr	r7, [r4, #4]
   1a918:	str	r3, [sp, #36]	; 0x24
   1a91c:	ldr	r3, [r3]
   1a920:	ldr	r3, [r3, r2, lsl #3]
   1a924:	str	r3, [sp, #48]	; 0x30
   1a928:	mov	r3, #0
   1a92c:	str	r3, [sp, #28]
   1a930:	ldr	r2, [sp, #28]
   1a934:	ldr	r3, [r4, #124]	; 0x7c
   1a938:	cmp	r2, r3
   1a93c:	bge	1a898 <__assert_fail@plt+0x93b0>
   1a940:	ldr	r2, [sp, #28]
   1a944:	ldr	r3, [r4, #132]	; 0x84
   1a948:	ldr	r5, [r3, r2, lsl #2]
   1a94c:	ldr	r3, [sp, #36]	; 0x24
   1a950:	ldr	r2, [r5, #4]
   1a954:	ldr	r3, [r3]
   1a958:	ldr	r3, [r3, r2, lsl #3]
   1a95c:	ldr	r2, [sp, #48]	; 0x30
   1a960:	cmp	r2, r3
   1a964:	moveq	fp, r9
   1a968:	moveq	r8, #0
   1a96c:	ldreq	r6, [r5]
   1a970:	beq	1aab4 <__assert_fail@plt+0x95cc>
   1a974:	ldr	r3, [sp, #28]
   1a978:	add	r3, r3, #1
   1a97c:	b	1a92c <__assert_fail@plt+0x9444>
   1a980:	ldr	r3, [r4, #28]
   1a984:	add	r1, r2, fp
   1a988:	cmp	r3, r1
   1a98c:	bge	1a9c0 <__assert_fail@plt+0x94d8>
   1a990:	str	r2, [sp, #60]	; 0x3c
   1a994:	ldr	r2, [sp, #32]
   1a998:	ldr	r3, [r4, #48]	; 0x30
   1a99c:	cmp	r3, r2
   1a9a0:	blt	1a9d4 <__assert_fail@plt+0x94ec>
   1a9a4:	mov	r1, r2
   1a9a8:	mov	r0, r4
   1a9ac:	bl	15f9c <__assert_fail@plt+0x4ab4>
   1a9b0:	cmp	r0, #0
   1a9b4:	bne	1ab0c <__assert_fail@plt+0x9624>
   1a9b8:	ldr	r7, [r4, #4]
   1a9bc:	ldr	r2, [sp, #60]	; 0x3c
   1a9c0:	add	r1, r7, r6
   1a9c4:	add	r0, r7, fp
   1a9c8:	bl	11260 <memcmp@plt>
   1a9cc:	cmp	r0, #0
   1a9d0:	beq	1aae8 <__assert_fail@plt+0x9600>
   1a9d4:	ldr	r3, [r5, #16]
   1a9d8:	cmp	r8, r3
   1a9dc:	blt	1a974 <__assert_fail@plt+0x948c>
   1a9e0:	cmp	r8, #0
   1a9e4:	ble	1a9ec <__assert_fail@plt+0x9504>
   1a9e8:	add	r6, r6, #1
   1a9ec:	cmp	r9, r6
   1a9f0:	blt	1a974 <__assert_fail@plt+0x948c>
   1a9f4:	ldr	r3, [r5]
   1a9f8:	sub	r3, r6, r3
   1a9fc:	cmp	r3, #0
   1aa00:	ble	1aa50 <__assert_fail@plt+0x9568>
   1aa04:	ldr	r3, [r4, #28]
   1aa08:	cmp	r3, fp
   1aa0c:	bgt	1aa34 <__assert_fail@plt+0x954c>
   1aa10:	ldr	r3, [r4, #48]	; 0x30
   1aa14:	cmp	fp, r3
   1aa18:	bge	1a974 <__assert_fail@plt+0x948c>
   1aa1c:	add	r1, fp, #1
   1aa20:	mov	r0, r4
   1aa24:	bl	158d4 <__assert_fail@plt+0x43ec>
   1aa28:	cmp	r0, #0
   1aa2c:	bne	1ab0c <__assert_fail@plt+0x9624>
   1aa30:	ldr	r7, [r4, #4]
   1aa34:	add	r3, r7, r6
   1aa38:	add	r2, fp, #1
   1aa3c:	ldrb	r1, [r7, fp]
   1aa40:	ldrb	r3, [r3, #-1]
   1aa44:	cmp	r1, r3
   1aa48:	bne	1a974 <__assert_fail@plt+0x948c>
   1aa4c:	mov	fp, r2
   1aa50:	ldr	r3, [r4, #100]	; 0x64
   1aa54:	ldr	r2, [r3, r6, lsl #2]
   1aa58:	cmp	r2, #0
   1aa5c:	movne	r3, #0
   1aa60:	ldrne	r0, [r2, #8]
   1aa64:	beq	1a9e8 <__assert_fail@plt+0x9500>
   1aa68:	cmp	r3, r0
   1aa6c:	bge	1a9e8 <__assert_fail@plt+0x9500>
   1aa70:	ldr	r1, [r2, #12]
   1aa74:	ldr	r8, [r1, r3, lsl #2]
   1aa78:	ldr	r1, [sp, #36]	; 0x24
   1aa7c:	ldr	r1, [r1]
   1aa80:	add	ip, r1, r8, lsl #3
   1aa84:	ldrb	ip, [ip, #4]
   1aa88:	cmp	ip, #9
   1aa8c:	bne	1aaa0 <__assert_fail@plt+0x95b8>
   1aa90:	ldr	r1, [r1, r8, lsl #3]
   1aa94:	ldr	ip, [sp, #48]	; 0x30
   1aa98:	cmp	ip, r1
   1aa9c:	beq	1ab1c <__assert_fail@plt+0x9634>
   1aaa0:	add	r3, r3, #1
   1aaa4:	b	1aa68 <__assert_fail@plt+0x9580>
   1aaa8:	ldr	fp, [sp, #32]
   1aaac:	add	r8, r8, #1
   1aab0:	ldr	r6, [sp, #40]	; 0x28
   1aab4:	ldr	r3, [r5, #16]
   1aab8:	cmp	r8, r3
   1aabc:	bge	1a9d4 <__assert_fail@plt+0x94ec>
   1aac0:	ldr	r3, [r5, #20]
   1aac4:	ldr	r3, [r3, r8, lsl #2]
   1aac8:	str	r3, [sp, #52]	; 0x34
   1aacc:	ldr	r3, [r3, #4]
   1aad0:	sub	r2, r3, r6
   1aad4:	str	r3, [sp, #40]	; 0x28
   1aad8:	add	r3, r2, fp
   1aadc:	cmp	r2, #0
   1aae0:	str	r3, [sp, #32]
   1aae4:	bgt	1a980 <__assert_fail@plt+0x9498>
   1aae8:	mov	r1, r5
   1aaec:	mov	r0, r4
   1aaf0:	str	r9, [sp]
   1aaf4:	ldr	r3, [sp, #16]
   1aaf8:	ldr	r2, [sp, #52]	; 0x34
   1aafc:	bl	1a63c <__assert_fail@plt+0x9154>
   1ab00:	cmp	r0, #1
   1ab04:	ldr	r7, [r4, #4]
   1ab08:	bls	1aaa8 <__assert_fail@plt+0x95c0>
   1ab0c:	str	r0, [sp, #64]	; 0x40
   1ab10:	ldr	r0, [sp, #64]	; 0x40
   1ab14:	add	sp, sp, #84	; 0x54
   1ab18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab1c:	cmn	r8, #1
   1ab20:	beq	1a9e8 <__assert_fail@plt+0x9500>
   1ab24:	ldr	r3, [r5, #8]
   1ab28:	cmp	r3, #0
   1ab2c:	beq	1abec <__assert_fail@plt+0x9704>
   1ab30:	mov	r3, #9
   1ab34:	mov	r0, r4
   1ab38:	str	r8, [sp]
   1ab3c:	str	r6, [sp, #4]
   1ab40:	str	r3, [sp, #8]
   1ab44:	ldr	r3, [r5]
   1ab48:	ldr	r2, [r5, #4]
   1ab4c:	ldr	r1, [r5, #8]
   1ab50:	bl	1a148 <__assert_fail@plt+0x8c60>
   1ab54:	cmp	r0, #1
   1ab58:	beq	1a9e8 <__assert_fail@plt+0x9500>
   1ab5c:	cmp	r0, #0
   1ab60:	bne	1ab0c <__assert_fail@plt+0x9624>
   1ab64:	ldr	r3, [r5, #12]
   1ab68:	ldr	r7, [r5, #16]
   1ab6c:	cmp	r7, r3
   1ab70:	bne	1ab98 <__assert_fail@plt+0x96b0>
   1ab74:	lsl	r7, r7, #1
   1ab78:	ldr	r0, [r5, #20]
   1ab7c:	add	r7, r7, #1
   1ab80:	lsl	r1, r7, #2
   1ab84:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1ab88:	cmp	r0, #0
   1ab8c:	beq	1ac0c <__assert_fail@plt+0x9724>
   1ab90:	str	r7, [r5, #12]
   1ab94:	str	r0, [r5, #20]
   1ab98:	mov	r1, #20
   1ab9c:	mov	r0, #1
   1aba0:	bl	1ff70 <__assert_fail@plt+0xea88>
   1aba4:	subs	r2, r0, #0
   1aba8:	beq	1ac0c <__assert_fail@plt+0x9724>
   1abac:	ldr	r3, [r5, #16]
   1abb0:	mov	r0, r4
   1abb4:	ldr	r1, [r5, #20]
   1abb8:	str	r2, [r1, r3, lsl #2]
   1abbc:	add	r3, r3, #1
   1abc0:	mov	r1, r5
   1abc4:	str	r8, [r2]
   1abc8:	str	r6, [r2, #4]
   1abcc:	str	r3, [r5, #16]
   1abd0:	str	r9, [sp]
   1abd4:	ldr	r3, [sp, #16]
   1abd8:	bl	1a63c <__assert_fail@plt+0x9154>
   1abdc:	cmp	r0, #1
   1abe0:	ldr	r7, [r4, #4]
   1abe4:	bls	1a9e8 <__assert_fail@plt+0x9500>
   1abe8:	b	1ab0c <__assert_fail@plt+0x9624>
   1abec:	ldr	r1, [r5]
   1abf0:	mov	r0, #12
   1abf4:	sub	r1, r6, r1
   1abf8:	add	r1, r1, #1
   1abfc:	bl	1ff70 <__assert_fail@plt+0xea88>
   1ac00:	cmp	r0, #0
   1ac04:	str	r0, [r5, #8]
   1ac08:	bne	1ab30 <__assert_fail@plt+0x9648>
   1ac0c:	mov	r3, #12
   1ac10:	str	r3, [sp, #64]	; 0x40
   1ac14:	b	1ab10 <__assert_fail@plt+0x9628>
   1ac18:	ldr	r3, [r2, #4]
   1ac1c:	cmp	r3, r9
   1ac20:	bne	1a8ec <__assert_fail@plt+0x9404>
   1ac24:	ldr	r3, [r2, #8]
   1ac28:	mov	r0, r4
   1ac2c:	ldr	r5, [r2, #12]
   1ac30:	ldr	r6, [sl, #24]
   1ac34:	subs	r2, r5, r3
   1ac38:	add	r5, r5, r9
   1ac3c:	ldrne	r1, [sp, #28]
   1ac40:	sub	r5, r5, r3
   1ac44:	str	r2, [sp, #32]
   1ac48:	ldreq	r2, [sl, #20]
   1ac4c:	ldrne	r2, [sl, #12]
   1ac50:	addeq	r2, r2, fp
   1ac54:	ldreq	r2, [r2, #8]
   1ac58:	ldrne	r2, [r2, r1]
   1ac5c:	mov	r1, #12
   1ac60:	ldreq	r2, [r2]
   1ac64:	mla	r6, r1, r2, r6
   1ac68:	sub	r1, r5, #1
   1ac6c:	ldr	r2, [r4, #88]	; 0x58
   1ac70:	bl	18268 <__assert_fail@plt+0x6d80>
   1ac74:	ldr	r2, [sp, #44]	; 0x2c
   1ac78:	mov	r3, r0
   1ac7c:	ldr	r8, [r4, #100]	; 0x64
   1ac80:	ldr	r7, [r8, r2]
   1ac84:	ldr	r1, [r8, r5, lsl #2]
   1ac88:	cmp	r7, #0
   1ac8c:	ldrne	r7, [r7, #8]
   1ac90:	cmp	r1, #0
   1ac94:	bne	1ad24 <__assert_fail@plt+0x983c>
   1ac98:	mov	r2, r6
   1ac9c:	mov	r1, sl
   1aca0:	add	r0, sp, #64	; 0x40
   1aca4:	bl	171dc <__assert_fail@plt+0x5cf4>
   1aca8:	str	r0, [r8, r5, lsl #2]
   1acac:	ldr	r3, [r4, #100]	; 0x64
   1acb0:	ldr	r3, [r3, r5, lsl #2]
   1acb4:	cmp	r3, #0
   1acb8:	bne	1acc8 <__assert_fail@plt+0x97e0>
   1acbc:	ldr	r3, [sp, #64]	; 0x40
   1acc0:	cmp	r3, #0
   1acc4:	bne	1ab10 <__assert_fail@plt+0x9628>
   1acc8:	ldr	r3, [sp, #32]
   1accc:	cmp	r3, #0
   1acd0:	bne	1a8ec <__assert_fail@plt+0x9404>
   1acd4:	ldr	r2, [sp, #44]	; 0x2c
   1acd8:	ldr	r3, [r4, #100]	; 0x64
   1acdc:	ldr	r3, [r3, r2]
   1ace0:	ldr	r3, [r3, #8]
   1ace4:	cmp	r3, r7
   1ace8:	ble	1a8ec <__assert_fail@plt+0x9404>
   1acec:	mov	r2, r9
   1acf0:	mov	r1, r6
   1acf4:	mov	r0, r4
   1acf8:	bl	15ebc <__assert_fail@plt+0x49d4>
   1acfc:	cmp	r0, #0
   1ad00:	str	r0, [sp, #64]	; 0x40
   1ad04:	bne	1ab10 <__assert_fail@plt+0x9628>
   1ad08:	mov	r1, r6
   1ad0c:	mov	r0, r4
   1ad10:	bl	1a77c <__assert_fail@plt+0x9294>
   1ad14:	cmp	r0, #0
   1ad18:	str	r0, [sp, #64]	; 0x40
   1ad1c:	beq	1a8ec <__assert_fail@plt+0x9404>
   1ad20:	b	1ab10 <__assert_fail@plt+0x9628>
   1ad24:	mov	r2, r6
   1ad28:	add	r0, sp, #68	; 0x44
   1ad2c:	ldr	r1, [r1, #40]	; 0x28
   1ad30:	str	r3, [sp, #36]	; 0x24
   1ad34:	bl	1709c <__assert_fail@plt+0x5bb4>
   1ad38:	cmp	r0, #0
   1ad3c:	str	r0, [sp, #64]	; 0x40
   1ad40:	ldr	r3, [sp, #36]	; 0x24
   1ad44:	beq	1ad54 <__assert_fail@plt+0x986c>
   1ad48:	ldr	r0, [sp, #76]	; 0x4c
   1ad4c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1ad50:	b	1ab10 <__assert_fail@plt+0x9628>
   1ad54:	ldr	r8, [r4, #100]	; 0x64
   1ad58:	add	r2, sp, #68	; 0x44
   1ad5c:	mov	r1, sl
   1ad60:	add	r0, sp, #64	; 0x40
   1ad64:	bl	171dc <__assert_fail@plt+0x5cf4>
   1ad68:	str	r0, [r8, r5, lsl #2]
   1ad6c:	ldr	r0, [sp, #76]	; 0x4c
   1ad70:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1ad74:	b	1acac <__assert_fail@plt+0x97c4>
   1ad78:	andeq	pc, r3, r0, lsl #30
   1ad7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad80:	mov	r4, r2
   1ad84:	sub	sp, sp, #20
   1ad88:	mov	r8, r0
   1ad8c:	mov	r5, r1
   1ad90:	ldr	r6, [r1, #40]	; 0x28
   1ad94:	ldr	sl, [r1, #84]	; 0x54
   1ad98:	ldr	r2, [r1, #104]	; 0x68
   1ad9c:	ldr	r3, [r1, #100]	; 0x64
   1ada0:	cmp	r2, r6
   1ada4:	strlt	r4, [r3, r6, lsl #2]
   1ada8:	strlt	r6, [r1, #104]	; 0x68
   1adac:	blt	1ae4c <__assert_fail@plt+0x9964>
   1adb0:	ldr	r2, [r3, r6, lsl #2]
   1adb4:	cmp	r2, #0
   1adb8:	streq	r4, [r3, r6, lsl #2]
   1adbc:	beq	1ae4c <__assert_fail@plt+0x9964>
   1adc0:	cmp	r4, #0
   1adc4:	add	r7, sp, #4
   1adc8:	ldr	r2, [r2, #40]	; 0x28
   1adcc:	beq	1adfc <__assert_fail@plt+0x9914>
   1add0:	ldr	r9, [r4, #40]	; 0x28
   1add4:	mov	r0, r7
   1add8:	mov	r1, r9
   1addc:	bl	1709c <__assert_fail@plt+0x5bb4>
   1ade0:	cmp	r0, #0
   1ade4:	str	r0, [r8]
   1ade8:	beq	1ae08 <__assert_fail@plt+0x9920>
   1adec:	mov	r4, #0
   1adf0:	mov	r0, r4
   1adf4:	add	sp, sp, #20
   1adf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adfc:	ldm	r2, {r0, r1, r2}
   1ae00:	mov	r9, r4
   1ae04:	stm	r7, {r0, r1, r2}
   1ae08:	mov	r0, r5
   1ae0c:	ldr	r1, [r5, #40]	; 0x28
   1ae10:	ldr	r2, [r5, #88]	; 0x58
   1ae14:	sub	r1, r1, #1
   1ae18:	bl	18268 <__assert_fail@plt+0x6d80>
   1ae1c:	ldr	fp, [r5, #100]	; 0x64
   1ae20:	mov	r3, r0
   1ae24:	mov	r2, r7
   1ae28:	mov	r1, sl
   1ae2c:	mov	r0, r8
   1ae30:	bl	171dc <__assert_fail@plt+0x5cf4>
   1ae34:	cmp	r9, #0
   1ae38:	mov	r4, r0
   1ae3c:	str	r0, [fp, r6, lsl #2]
   1ae40:	beq	1ae4c <__assert_fail@plt+0x9964>
   1ae44:	ldr	r0, [sp, #12]
   1ae48:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1ae4c:	ldr	r3, [sl, #76]	; 0x4c
   1ae50:	cmp	r3, #0
   1ae54:	beq	1adf0 <__assert_fail@plt+0x9908>
   1ae58:	cmp	r4, #0
   1ae5c:	beq	1adec <__assert_fail@plt+0x9904>
   1ae60:	add	r7, r4, #4
   1ae64:	mov	r2, r6
   1ae68:	mov	r1, r7
   1ae6c:	mov	r0, r5
   1ae70:	bl	15ebc <__assert_fail@plt+0x49d4>
   1ae74:	cmp	r0, #0
   1ae78:	str	r0, [r8]
   1ae7c:	bne	1adec <__assert_fail@plt+0x9904>
   1ae80:	ldrb	r3, [r4, #52]	; 0x34
   1ae84:	tst	r3, #64	; 0x40
   1ae88:	beq	1adf0 <__assert_fail@plt+0x9908>
   1ae8c:	mov	r1, r7
   1ae90:	mov	r0, r5
   1ae94:	bl	1a77c <__assert_fail@plt+0x9294>
   1ae98:	cmp	r0, #0
   1ae9c:	str	r0, [r8]
   1aea0:	bne	1adec <__assert_fail@plt+0x9904>
   1aea4:	ldr	r3, [r5, #100]	; 0x64
   1aea8:	ldr	r4, [r3, r6, lsl #2]
   1aeac:	b	1adf0 <__assert_fail@plt+0x9908>
   1aeb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aeb4:	mov	r4, r3
   1aeb8:	sub	sp, sp, #84	; 0x54
   1aebc:	mov	r3, #0
   1aec0:	mov	r5, r2
   1aec4:	mov	r7, r0
   1aec8:	mov	r6, r1
   1aecc:	str	r3, [sp, #48]	; 0x30
   1aed0:	lsl	r3, r2, #2
   1aed4:	ldr	r8, [r0, #84]	; 0x54
   1aed8:	str	r3, [sp, #24]
   1aedc:	ldr	r3, [r0, #100]	; 0x64
   1aee0:	ldr	fp, [r3, r2, lsl #2]
   1aee4:	ldr	r3, [r4, #4]
   1aee8:	cmp	fp, #0
   1aeec:	addne	fp, fp, #4
   1aef0:	cmp	r3, #0
   1aef4:	ldreq	r2, [r1]
   1aef8:	streq	r3, [r2, r5, lsl #2]
   1aefc:	beq	1b1f4 <__assert_fail@plt+0x9d0c>
   1af00:	cmp	fp, #0
   1af04:	bne	1af38 <__assert_fail@plt+0x9a50>
   1af08:	mov	r2, r4
   1af0c:	mov	r1, r8
   1af10:	ldr	r9, [r6]
   1af14:	add	r0, sp, #48	; 0x30
   1af18:	bl	19d08 <__assert_fail@plt+0x8820>
   1af1c:	ldr	r3, [sp, #48]	; 0x30
   1af20:	str	r0, [r9, r5, lsl #2]
   1af24:	cmp	r3, #0
   1af28:	beq	1b1f4 <__assert_fail@plt+0x9d0c>
   1af2c:	mov	r0, r3
   1af30:	add	sp, sp, #84	; 0x54
   1af34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af38:	mov	r3, #0
   1af3c:	mov	r2, r4
   1af40:	mov	r1, r8
   1af44:	add	r0, sp, #52	; 0x34
   1af48:	str	r3, [sp, #52]	; 0x34
   1af4c:	bl	19d08 <__assert_fail@plt+0x8820>
   1af50:	ldr	r3, [sp, #52]	; 0x34
   1af54:	cmp	r3, #0
   1af58:	bne	1af80 <__assert_fail@plt+0x9a98>
   1af5c:	ldr	r3, [r0, #28]
   1af60:	add	sl, r0, #28
   1af64:	cmp	r3, #0
   1af68:	beq	1afbc <__assert_fail@plt+0x9ad4>
   1af6c:	mov	r2, sl
   1af70:	mov	r1, fp
   1af74:	mov	r0, r4
   1af78:	bl	16de0 <__assert_fail@plt+0x58f8>
   1af7c:	mov	r3, r0
   1af80:	cmp	r3, #0
   1af84:	str	r3, [sp, #48]	; 0x30
   1af88:	bne	1af2c <__assert_fail@plt+0x9a44>
   1af8c:	ldr	r2, [r6, #20]
   1af90:	cmp	r2, #0
   1af94:	ldrne	r2, [r7, #116]	; 0x74
   1af98:	strne	r2, [sp, #16]
   1af9c:	beq	1af08 <__assert_fail@plt+0x9a20>
   1afa0:	str	r3, [sp, #12]
   1afa4:	ldr	r2, [sp, #12]
   1afa8:	ldr	r3, [r6, #20]
   1afac:	cmp	r2, r3
   1afb0:	blt	1b01c <__assert_fail@plt+0x9b34>
   1afb4:	mov	r3, #0
   1afb8:	b	1b108 <__assert_fail@plt+0x9c20>
   1afbc:	mov	r0, sl
   1afc0:	ldr	r1, [r4, #4]
   1afc4:	bl	15218 <__assert_fail@plt+0x3d30>
   1afc8:	cmp	r0, #0
   1afcc:	mov	r9, r0
   1afd0:	str	r0, [sp, #52]	; 0x34
   1afd4:	movne	r3, #12
   1afd8:	bne	1af2c <__assert_fail@plt+0x9a44>
   1afdc:	ldr	r3, [r4, #4]
   1afe0:	mov	r2, #12
   1afe4:	cmp	r9, r3
   1afe8:	bge	1af6c <__assert_fail@plt+0x9a84>
   1afec:	ldr	r3, [r4, #8]
   1aff0:	mov	r0, sl
   1aff4:	ldr	r1, [r3, r9, lsl #2]
   1aff8:	ldr	r3, [r8, #28]
   1affc:	mla	r1, r2, r1, r3
   1b000:	bl	17f1c <__assert_fail@plt+0x6a34>
   1b004:	cmp	r0, #0
   1b008:	str	r0, [sp, #52]	; 0x34
   1b00c:	addeq	r9, r9, #1
   1b010:	beq	1afdc <__assert_fail@plt+0x9af4>
   1b014:	mov	r3, #12
   1b018:	b	1af80 <__assert_fail@plt+0x9a98>
   1b01c:	ldr	r2, [sp, #12]
   1b020:	ldr	r3, [r6, #24]
   1b024:	ldr	r3, [r3, r2, lsl #2]
   1b028:	mov	r2, #24
   1b02c:	mul	r3, r2, r3
   1b030:	ldr	r2, [sp, #16]
   1b034:	add	r2, r2, r3
   1b038:	ldr	r1, [r2, #8]
   1b03c:	cmp	r5, r1
   1b040:	bgt	1b050 <__assert_fail@plt+0x9b68>
   1b044:	ldr	r3, [sp, #12]
   1b048:	add	r3, r3, #1
   1b04c:	b	1afa0 <__assert_fail@plt+0x9ab8>
   1b050:	ldr	r1, [r2, #4]
   1b054:	cmp	r5, r1
   1b058:	bgt	1b044 <__assert_fail@plt+0x9b5c>
   1b05c:	ldr	r1, [sp, #16]
   1b060:	ldr	r0, [r8]
   1b064:	ldr	r3, [r1, r3]
   1b068:	ldr	r9, [r0, r3, lsl #3]
   1b06c:	ldr	r3, [r2, #12]
   1b070:	cmp	r5, r3
   1b074:	movne	sl, #0
   1b078:	bne	1b1bc <__assert_fail@plt+0x9cd4>
   1b07c:	ldr	lr, [r4, #4]
   1b080:	mvn	sl, #0
   1b084:	mov	r2, #0
   1b088:	mov	r1, sl
   1b08c:	cmp	r2, lr
   1b090:	blt	1b0ac <__assert_fail@plt+0x9bc4>
   1b094:	cmp	r1, #0
   1b098:	bge	1b0f0 <__assert_fail@plt+0x9c08>
   1b09c:	cmp	sl, #0
   1b0a0:	blt	1b044 <__assert_fail@plt+0x9b5c>
   1b0a4:	mov	r9, #0
   1b0a8:	b	1b188 <__assert_fail@plt+0x9ca0>
   1b0ac:	ldr	r3, [r4, #8]
   1b0b0:	ldr	r3, [r3, r2, lsl #2]
   1b0b4:	add	ip, r0, r3, lsl #3
   1b0b8:	ldrb	ip, [ip, #4]
   1b0bc:	cmp	ip, #8
   1b0c0:	bne	1b0d8 <__assert_fail@plt+0x9bf0>
   1b0c4:	ldr	ip, [r0, r3, lsl #3]
   1b0c8:	cmp	r9, ip
   1b0cc:	moveq	r1, r3
   1b0d0:	add	r2, r2, #1
   1b0d4:	b	1b08c <__assert_fail@plt+0x9ba4>
   1b0d8:	cmp	ip, #9
   1b0dc:	bne	1b0d0 <__assert_fail@plt+0x9be8>
   1b0e0:	ldr	ip, [r0, r3, lsl #3]
   1b0e4:	cmp	r9, ip
   1b0e8:	moveq	sl, r3
   1b0ec:	b	1b0d0 <__assert_fail@plt+0x9be8>
   1b0f0:	mov	r3, fp
   1b0f4:	mov	r2, r4
   1b0f8:	mov	r0, r8
   1b0fc:	bl	17628 <__assert_fail@plt+0x6140>
   1b100:	subs	r3, r0, #0
   1b104:	beq	1b09c <__assert_fail@plt+0x9bb4>
   1b108:	cmp	r3, #0
   1b10c:	str	r3, [sp, #48]	; 0x30
   1b110:	beq	1af08 <__assert_fail@plt+0x9a20>
   1b114:	b	1af2c <__assert_fail@plt+0x9a44>
   1b118:	ldr	r3, [r4, #8]
   1b11c:	mov	r1, sl
   1b120:	ldr	r0, [r8, #28]
   1b124:	ldr	r3, [r3, r9, lsl #2]
   1b128:	str	r3, [sp, #20]
   1b12c:	mov	r3, #12
   1b130:	ldr	r2, [sp, #20]
   1b134:	mul	r3, r3, r2
   1b138:	add	r0, r0, r3
   1b13c:	str	r3, [sp, #28]
   1b140:	bl	14840 <__assert_fail@plt+0x3358>
   1b144:	cmp	r0, #0
   1b148:	bne	1b184 <__assert_fail@plt+0x9c9c>
   1b14c:	ldr	r0, [r8, #24]
   1b150:	ldr	r3, [sp, #28]
   1b154:	add	r0, r0, r3
   1b158:	bl	14840 <__assert_fail@plt+0x3358>
   1b15c:	cmp	r0, #0
   1b160:	bne	1b184 <__assert_fail@plt+0x9c9c>
   1b164:	mov	r3, fp
   1b168:	mov	r2, r4
   1b16c:	ldr	r1, [sp, #20]
   1b170:	mov	r0, r8
   1b174:	bl	17628 <__assert_fail@plt+0x6140>
   1b178:	subs	r3, r0, #0
   1b17c:	bne	1b108 <__assert_fail@plt+0x9c20>
   1b180:	sub	r9, r9, #1
   1b184:	add	r9, r9, #1
   1b188:	ldr	r3, [r4, #4]
   1b18c:	cmp	r9, r3
   1b190:	blt	1b118 <__assert_fail@plt+0x9c30>
   1b194:	b	1b044 <__assert_fail@plt+0x9b5c>
   1b198:	ldr	r3, [r4, #8]
   1b19c:	ldr	r2, [r8]
   1b1a0:	ldr	r1, [r3, sl, lsl #2]
   1b1a4:	add	r3, r2, r1, lsl #3
   1b1a8:	ldrb	r3, [r3, #4]
   1b1ac:	sub	r3, r3, #8
   1b1b0:	cmp	r3, #1
   1b1b4:	bls	1b1cc <__assert_fail@plt+0x9ce4>
   1b1b8:	add	sl, sl, #1
   1b1bc:	ldr	r3, [r4, #4]
   1b1c0:	cmp	sl, r3
   1b1c4:	blt	1b198 <__assert_fail@plt+0x9cb0>
   1b1c8:	b	1b044 <__assert_fail@plt+0x9b5c>
   1b1cc:	ldr	r3, [r2, r1, lsl #3]
   1b1d0:	cmp	r9, r3
   1b1d4:	bne	1b1b8 <__assert_fail@plt+0x9cd0>
   1b1d8:	mov	r3, fp
   1b1dc:	mov	r2, r4
   1b1e0:	mov	r0, r8
   1b1e4:	bl	17628 <__assert_fail@plt+0x6140>
   1b1e8:	subs	r3, r0, #0
   1b1ec:	beq	1b1b8 <__assert_fail@plt+0x9cd0>
   1b1f0:	b	1b108 <__assert_fail@plt+0x9c20>
   1b1f4:	cmp	fp, #0
   1b1f8:	moveq	r3, fp
   1b1fc:	beq	1af2c <__assert_fail@plt+0x9a44>
   1b200:	ldr	r3, [r7, #100]	; 0x64
   1b204:	ldr	r3, [r3, r5, lsl #2]
   1b208:	ldrb	r3, [r3, #52]	; 0x34
   1b20c:	ands	r3, r3, #64	; 0x40
   1b210:	beq	1af2c <__assert_fail@plt+0x9a44>
   1b214:	mov	r1, r5
   1b218:	mov	r0, r7
   1b21c:	bl	14cac <__assert_fail@plt+0x37c4>
   1b220:	cmn	r0, #1
   1b224:	mov	r2, #0
   1b228:	str	r0, [sp, #16]
   1b22c:	mov	r3, r0
   1b230:	moveq	r3, r2
   1b234:	beq	1af2c <__assert_fail@plt+0x9a44>
   1b238:	ldr	r1, [sp, #16]
   1b23c:	mov	r3, #24
   1b240:	str	r2, [sp, #12]
   1b244:	ldr	sl, [r7, #84]	; 0x54
   1b248:	str	r2, [sp, #52]	; 0x34
   1b24c:	mul	r3, r3, r1
   1b250:	str	r3, [sp, #28]
   1b254:	add	r3, r6, #16
   1b258:	str	r3, [sp, #20]
   1b25c:	ldr	r3, [fp, #4]
   1b260:	ldr	r2, [sp, #12]
   1b264:	cmp	r2, r3
   1b268:	movge	r3, #0
   1b26c:	bge	1b3a8 <__assert_fail@plt+0x9ec0>
   1b270:	ldr	r3, [fp, #8]
   1b274:	ldr	r2, [sp, #12]
   1b278:	ldr	r8, [r3, r2, lsl #2]
   1b27c:	ldr	r3, [sl]
   1b280:	ldr	r2, [r6, #8]
   1b284:	add	r3, r3, r8, lsl #3
   1b288:	cmp	r8, r2
   1b28c:	ldrb	r3, [r3, #4]
   1b290:	bne	1b2b0 <__assert_fail@plt+0x9dc8>
   1b294:	ldr	r2, [r6, #12]
   1b298:	cmp	r5, r2
   1b29c:	bne	1b2b0 <__assert_fail@plt+0x9dc8>
   1b2a0:	ldr	r3, [sp, #12]
   1b2a4:	add	r3, r3, #1
   1b2a8:	str	r3, [sp, #12]
   1b2ac:	b	1b25c <__assert_fail@plt+0x9d74>
   1b2b0:	cmp	r3, #4
   1b2b4:	bne	1b2a0 <__assert_fail@plt+0x9db8>
   1b2b8:	ldr	r4, [r7, #116]	; 0x74
   1b2bc:	ldr	r3, [sp, #28]
   1b2c0:	ldr	r9, [sp, #16]
   1b2c4:	add	r4, r4, r3
   1b2c8:	mov	r3, #12
   1b2cc:	mul	r3, r3, r8
   1b2d0:	str	r3, [sp, #36]	; 0x24
   1b2d4:	lsl	r3, r8, #2
   1b2d8:	str	r3, [sp, #32]
   1b2dc:	ldr	r3, [r4]
   1b2e0:	cmp	r8, r3
   1b2e4:	bne	1b458 <__assert_fail@plt+0x9f70>
   1b2e8:	ldrd	r2, [r4, #8]
   1b2ec:	sub	r3, r3, r2
   1b2f0:	cmp	r3, #0
   1b2f4:	add	r2, r5, r3
   1b2f8:	ldreq	r1, [sp, #36]	; 0x24
   1b2fc:	ldreq	r3, [sl, #20]
   1b300:	ldrne	r1, [sp, #32]
   1b304:	ldrne	r3, [sl, #12]
   1b308:	addeq	r3, r3, r1
   1b30c:	ldreq	r3, [r3, #8]
   1b310:	ldrne	r3, [r3, r1]
   1b314:	ldr	r1, [r6, #12]
   1b318:	ldreq	r3, [r3]
   1b31c:	cmp	r2, r1
   1b320:	bgt	1b458 <__assert_fail@plt+0x9f70>
   1b324:	ldr	r1, [r6]
   1b328:	str	r2, [sp, #44]	; 0x2c
   1b32c:	ldr	r0, [r1, r2, lsl #2]
   1b330:	cmp	r0, #0
   1b334:	beq	1b458 <__assert_fail@plt+0x9f70>
   1b338:	mov	r1, r3
   1b33c:	add	r0, r0, #4
   1b340:	str	r3, [sp, #40]	; 0x28
   1b344:	bl	14840 <__assert_fail@plt+0x3358>
   1b348:	cmp	r0, #0
   1b34c:	beq	1b458 <__assert_fail@plt+0x9f70>
   1b350:	mov	r0, r7
   1b354:	ldr	r1, [sp, #20]
   1b358:	ldr	r3, [sp, #40]	; 0x28
   1b35c:	ldr	r2, [sp, #44]	; 0x2c
   1b360:	str	r3, [sp]
   1b364:	mov	r3, r5
   1b368:	str	r2, [sp, #4]
   1b36c:	mov	r2, r8
   1b370:	bl	14d18 <__assert_fail@plt+0x3830>
   1b374:	cmp	r0, #0
   1b378:	bne	1b458 <__assert_fail@plt+0x9f70>
   1b37c:	ldr	r3, [sp, #52]	; 0x34
   1b380:	cmp	r3, #0
   1b384:	beq	1b3c8 <__assert_fail@plt+0x9ee0>
   1b388:	mov	r1, r9
   1b38c:	add	r0, sp, #68	; 0x44
   1b390:	str	r8, [sp, #60]	; 0x3c
   1b394:	str	r5, [sp, #64]	; 0x40
   1b398:	bl	17b44 <__assert_fail@plt+0x665c>
   1b39c:	cmp	r0, #0
   1b3a0:	bne	1b3fc <__assert_fail@plt+0x9f14>
   1b3a4:	mov	r3, #12
   1b3a8:	ldr	r2, [sp, #52]	; 0x34
   1b3ac:	cmp	r2, #0
   1b3b0:	beq	1af2c <__assert_fail@plt+0x9a44>
   1b3b4:	ldr	r0, [sp, #76]	; 0x4c
   1b3b8:	str	r3, [sp, #12]
   1b3bc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1b3c0:	ldr	r3, [sp, #12]
   1b3c4:	b	1af2c <__assert_fail@plt+0x9a44>
   1b3c8:	mov	lr, r6
   1b3cc:	add	ip, sp, #52	; 0x34
   1b3d0:	ldm	lr!, {r0, r1, r2, r3}
   1b3d4:	stmia	ip!, {r0, r1, r2, r3}
   1b3d8:	ldr	r3, [sp, #20]
   1b3dc:	ldm	r3, {r0, r1, r2}
   1b3e0:	stm	ip, {r0, r1, r2}
   1b3e4:	mov	r1, r3
   1b3e8:	add	r0, sp, #68	; 0x44
   1b3ec:	bl	17024 <__assert_fail@plt+0x5b3c>
   1b3f0:	subs	r3, r0, #0
   1b3f4:	beq	1b388 <__assert_fail@plt+0x9ea0>
   1b3f8:	b	1b3a8 <__assert_fail@plt+0x9ec0>
   1b3fc:	ldr	r2, [sp, #24]
   1b400:	add	r1, sp, #52	; 0x34
   1b404:	mov	r0, r7
   1b408:	ldr	r3, [sp, #52]	; 0x34
   1b40c:	ldr	r4, [r3, r2]
   1b410:	bl	1b490 <__assert_fail@plt+0x9fa8>
   1b414:	subs	r3, r0, #0
   1b418:	bne	1b3a8 <__assert_fail@plt+0x9ec0>
   1b41c:	ldr	r1, [r6, #4]
   1b420:	cmp	r1, #0
   1b424:	bne	1b474 <__assert_fail@plt+0x9f8c>
   1b428:	ldr	r2, [sp, #24]
   1b42c:	mov	r1, r9
   1b430:	add	r0, sp, #68	; 0x44
   1b434:	ldr	r3, [sp, #52]	; 0x34
   1b438:	str	r4, [r3, r2]
   1b43c:	mov	r4, #24
   1b440:	bl	14840 <__assert_fail@plt+0x3358>
   1b444:	sub	r1, r0, #1
   1b448:	add	r0, sp, #68	; 0x44
   1b44c:	bl	16c54 <__assert_fail@plt+0x576c>
   1b450:	ldr	r3, [r7, #116]	; 0x74
   1b454:	mla	r4, r4, r9, r3
   1b458:	ldrb	r3, [r4, #20]
   1b45c:	add	r9, r9, #1
   1b460:	add	r2, r4, #24
   1b464:	cmp	r3, #0
   1b468:	beq	1b2a0 <__assert_fail@plt+0x9db8>
   1b46c:	mov	r4, r2
   1b470:	b	1b2dc <__assert_fail@plt+0x9df4>
   1b474:	add	r3, r5, #1
   1b478:	mov	r0, sl
   1b47c:	ldr	r2, [sp, #52]	; 0x34
   1b480:	bl	19eb8 <__assert_fail@plt+0x89d0>
   1b484:	subs	r3, r0, #0
   1b488:	beq	1b428 <__assert_fail@plt+0x9f40>
   1b48c:	b	1b3a8 <__assert_fail@plt+0x9ec0>
   1b490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b494:	sub	sp, sp, #52	; 0x34
   1b498:	mov	r6, r0
   1b49c:	mov	r5, r1
   1b4a0:	add	r0, sp, #36	; 0x24
   1b4a4:	ldr	r4, [r1, #12]
   1b4a8:	ldr	r1, [r1, #8]
   1b4ac:	bl	151d8 <__assert_fail@plt+0x3cf0>
   1b4b0:	subs	r8, r0, #0
   1b4b4:	bne	1b4e8 <__assert_fail@plt+0xa000>
   1b4b8:	add	r3, sp, #36	; 0x24
   1b4bc:	mov	r2, r4
   1b4c0:	mov	r1, r5
   1b4c4:	mov	r0, r6
   1b4c8:	bl	1aeb0 <__assert_fail@plt+0x99c8>
   1b4cc:	subs	r8, r0, #0
   1b4d0:	addeq	r3, r5, #16
   1b4d4:	moveq	fp, r8
   1b4d8:	streq	r3, [sp, #28]
   1b4dc:	beq	1b6b0 <__assert_fail@plt+0xa1c8>
   1b4e0:	ldr	r0, [sp, #44]	; 0x2c
   1b4e4:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1b4e8:	mov	r0, r8
   1b4ec:	add	sp, sp, #52	; 0x34
   1b4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f4:	mov	r3, #0
   1b4f8:	ldr	r2, [sp, #16]
   1b4fc:	sub	r4, r4, #1
   1b500:	str	r3, [sp, #40]	; 0x28
   1b504:	ldr	r3, [r6, #100]	; 0x64
   1b508:	add	r3, r3, r2
   1b50c:	ldr	sl, [r3, #-4]
   1b510:	cmp	sl, #0
   1b514:	movne	r3, #0
   1b518:	ldrne	r9, [r6, #84]	; 0x54
   1b51c:	bne	1b598 <__assert_fail@plt+0xa0b0>
   1b520:	add	r3, sp, #36	; 0x24
   1b524:	mov	r2, r4
   1b528:	mov	r1, r5
   1b52c:	mov	r0, r6
   1b530:	bl	1aeb0 <__assert_fail@plt+0x99c8>
   1b534:	cmp	r0, #0
   1b538:	beq	1b6b0 <__assert_fail@plt+0xa1c8>
   1b53c:	mov	r8, r0
   1b540:	b	1b4e0 <__assert_fail@plt+0x9ff8>
   1b544:	ldr	r2, [sp, #12]
   1b548:	ldr	r3, [sl, #24]
   1b54c:	ldr	r7, [r3, r2, lsl #2]
   1b550:	lsl	r3, r7, #3
   1b554:	lsl	r2, r7, #3
   1b558:	str	r3, [sp, #20]
   1b55c:	ldr	r3, [r9]
   1b560:	add	r3, r3, r2
   1b564:	ldrb	r3, [r3, #6]
   1b568:	tst	r3, #16
   1b56c:	bne	1b5b0 <__assert_fail@plt+0xa0c8>
   1b570:	ldr	r1, [r9]
   1b574:	lsl	r3, r7, #3
   1b578:	mov	r2, r4
   1b57c:	mov	r0, r6
   1b580:	add	r1, r1, r3
   1b584:	bl	18348 <__assert_fail@plt+0x6e60>
   1b588:	cmp	r0, #0
   1b58c:	bne	1b650 <__assert_fail@plt+0xa168>
   1b590:	ldr	r3, [sp, #12]
   1b594:	add	r3, r3, #1
   1b598:	str	r3, [sp, #12]
   1b59c:	ldr	r2, [sp, #12]
   1b5a0:	ldr	r3, [sl, #20]
   1b5a4:	cmp	r2, r3
   1b5a8:	blt	1b544 <__assert_fail@plt+0xa05c>
   1b5ac:	b	1b520 <__assert_fail@plt+0xa038>
   1b5b0:	ldr	r3, [r5, #12]
   1b5b4:	mov	r2, r6
   1b5b8:	mov	r1, r7
   1b5bc:	str	r3, [sp, #24]
   1b5c0:	ldr	r3, [r6, #84]	; 0x54
   1b5c4:	str	r3, [sp, #20]
   1b5c8:	mov	r3, r4
   1b5cc:	ldr	r0, [sp, #20]
   1b5d0:	bl	169ec <__assert_fail@plt+0x5504>
   1b5d4:	subs	r3, r0, #0
   1b5d8:	ble	1b648 <__assert_fail@plt+0xa160>
   1b5dc:	ldr	r1, [sp, #24]
   1b5e0:	add	r2, r4, r3
   1b5e4:	cmp	r1, r2
   1b5e8:	blt	1b620 <__assert_fail@plt+0xa138>
   1b5ec:	ldr	r1, [r5]
   1b5f0:	str	r3, [sp, #24]
   1b5f4:	ldr	r0, [r1, r2, lsl #2]
   1b5f8:	cmp	r0, #0
   1b5fc:	beq	1b570 <__assert_fail@plt+0xa088>
   1b600:	ldr	r3, [sp, #20]
   1b604:	add	r0, r0, #4
   1b608:	ldr	r2, [r3, #12]
   1b60c:	ldr	r1, [r2, r7, lsl #2]
   1b610:	bl	14840 <__assert_fail@plt+0x3358>
   1b614:	cmp	r0, #0
   1b618:	ldrne	r3, [sp, #24]
   1b61c:	beq	1b570 <__assert_fail@plt+0xa088>
   1b620:	ldr	r2, [r5, #20]
   1b624:	cmp	r2, #0
   1b628:	bne	1b684 <__assert_fail@plt+0xa19c>
   1b62c:	mov	r1, r7
   1b630:	add	r0, sp, #36	; 0x24
   1b634:	bl	17b44 <__assert_fail@plt+0x665c>
   1b638:	cmp	r0, #0
   1b63c:	bne	1b590 <__assert_fail@plt+0xa0a8>
   1b640:	mov	r8, #12
   1b644:	b	1b4e0 <__assert_fail@plt+0x9ff8>
   1b648:	beq	1b570 <__assert_fail@plt+0xa088>
   1b64c:	b	1b620 <__assert_fail@plt+0xa138>
   1b650:	ldr	r3, [r5]
   1b654:	ldr	r2, [sp, #16]
   1b658:	ldr	r0, [r3, r2]
   1b65c:	cmp	r0, #0
   1b660:	beq	1b590 <__assert_fail@plt+0xa0a8>
   1b664:	ldr	r3, [r9, #12]
   1b668:	add	r0, r0, #4
   1b66c:	ldr	r1, [r3, r7, lsl #2]
   1b670:	bl	14840 <__assert_fail@plt+0x3358>
   1b674:	cmp	r0, #0
   1b678:	beq	1b590 <__assert_fail@plt+0xa0a8>
   1b67c:	mov	r3, #1
   1b680:	b	1b620 <__assert_fail@plt+0xa138>
   1b684:	ldr	r2, [r9, #12]
   1b688:	add	r3, r4, r3
   1b68c:	mov	r0, r6
   1b690:	str	r7, [sp]
   1b694:	str	r4, [sp, #4]
   1b698:	ldr	r1, [sp, #28]
   1b69c:	ldr	r2, [r2, r7, lsl #2]
   1b6a0:	bl	14d18 <__assert_fail@plt+0x3830>
   1b6a4:	cmp	r0, #0
   1b6a8:	beq	1b62c <__assert_fail@plt+0xa144>
   1b6ac:	b	1b590 <__assert_fail@plt+0xa0a8>
   1b6b0:	cmp	r4, #0
   1b6b4:	ble	1b4e0 <__assert_fail@plt+0x9ff8>
   1b6b8:	ldr	r0, [r5]
   1b6bc:	lsl	r3, r4, #2
   1b6c0:	str	r3, [sp, #16]
   1b6c4:	ldr	r3, [r0, r4, lsl #2]
   1b6c8:	cmp	r3, #0
   1b6cc:	ldr	r3, [r6, #120]	; 0x78
   1b6d0:	addeq	fp, fp, #1
   1b6d4:	movne	fp, #0
   1b6d8:	cmp	r3, fp
   1b6dc:	bge	1b4f4 <__assert_fail@plt+0xa00c>
   1b6e0:	mov	r1, #0
   1b6e4:	ldr	r2, [sp, #16]
   1b6e8:	bl	113ec <memset@plt>
   1b6ec:	b	1b4e0 <__assert_fail@plt+0x9ff8>
   1b6f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6f4:	sub	sp, sp, #412	; 0x19c
   1b6f8:	mov	sl, r0
   1b6fc:	add	r4, sp, #448	; 0x1c0
   1b700:	mov	r7, r3
   1b704:	str	r2, [sp, #24]
   1b708:	mov	r2, #136	; 0x88
   1b70c:	str	r1, [sp, #40]	; 0x28
   1b710:	mov	r1, #0
   1b714:	ldr	fp, [r0]
   1b718:	add	r0, sp, #132	; 0x84
   1b71c:	ldm	r4, {r4, r6, r8}
   1b720:	ldr	r5, [sp, #460]	; 0x1cc
   1b724:	bl	113ec <memset@plt>
   1b728:	ldr	r3, [sl, #16]
   1b72c:	cmp	r3, #0
   1b730:	str	r3, [sp, #16]
   1b734:	str	fp, [sp, #216]	; 0xd8
   1b738:	beq	1b760 <__assert_fail@plt+0xa278>
   1b73c:	ldrb	r2, [sl, #28]
   1b740:	subs	r3, r7, r4
   1b744:	movne	r3, #1
   1b748:	ands	r3, r3, r2, lsr #3
   1b74c:	beq	1b75c <__assert_fail@plt+0xa274>
   1b750:	tst	r2, #1
   1b754:	ldr	r3, [sp, #16]
   1b758:	movne	r3, #0
   1b75c:	str	r3, [sp, #16]
   1b760:	ldr	r3, [sl, #24]
   1b764:	cmp	r3, r8
   1b768:	subcc	r2, r8, #1
   1b76c:	movcs	r3, #0
   1b770:	subcc	r3, r2, r3
   1b774:	str	r3, [sp, #56]	; 0x38
   1b778:	ldr	r3, [sl, #8]
   1b77c:	cmp	r3, #0
   1b780:	beq	1ccd4 <__assert_fail@plt+0xb7ec>
   1b784:	ldr	r1, [fp, #36]	; 0x24
   1b788:	cmp	r1, #0
   1b78c:	beq	1ccd4 <__assert_fail@plt+0xb7ec>
   1b790:	ldr	r2, [fp, #40]	; 0x28
   1b794:	cmp	r2, #0
   1b798:	beq	1ccd4 <__assert_fail@plt+0xb7ec>
   1b79c:	ldr	r3, [fp, #44]	; 0x2c
   1b7a0:	cmp	r3, #0
   1b7a4:	beq	1ccd4 <__assert_fail@plt+0xb7ec>
   1b7a8:	ldr	r0, [fp, #48]	; 0x30
   1b7ac:	cmp	r0, #0
   1b7b0:	beq	1ccd4 <__assert_fail@plt+0xb7ec>
   1b7b4:	ldr	r1, [r1, #8]
   1b7b8:	cmp	r1, #0
   1b7bc:	bne	1b800 <__assert_fail@plt+0xa318>
   1b7c0:	ldr	r2, [r2, #8]
   1b7c4:	cmp	r2, #0
   1b7c8:	bne	1b800 <__assert_fail@plt+0xa318>
   1b7cc:	ldr	r3, [r3, #8]
   1b7d0:	cmp	r3, #0
   1b7d4:	beq	1b7e4 <__assert_fail@plt+0xa2fc>
   1b7d8:	ldrsb	r3, [sl, #28]
   1b7dc:	cmp	r3, #0
   1b7e0:	blt	1b800 <__assert_fail@plt+0xa318>
   1b7e4:	adds	r4, r4, #0
   1b7e8:	movne	r4, #1
   1b7ec:	cmp	r7, #0
   1b7f0:	moveq	r4, #0
   1b7f4:	cmp	r4, #0
   1b7f8:	bne	1ccd4 <__assert_fail@plt+0xb7ec>
   1b7fc:	mov	r7, r4
   1b800:	ldr	r3, [sp, #56]	; 0x38
   1b804:	subs	r3, r8, r3
   1b808:	str	r3, [sp, #8]
   1b80c:	movne	r3, #1
   1b810:	bne	1b820 <__assert_fail@plt+0xa338>
   1b814:	ldr	r3, [fp, #76]	; 0x4c
   1b818:	adds	r3, r3, #0
   1b81c:	movne	r3, #1
   1b820:	str	r3, [sp, #36]	; 0x24
   1b824:	ldr	ip, [sp, #40]	; 0x28
   1b828:	ldr	r2, [sl, #12]
   1b82c:	ldr	r3, [sl, #20]
   1b830:	ldr	r0, [fp, #92]	; 0x5c
   1b834:	ldr	r1, [sp, #24]
   1b838:	str	ip, [sp, #132]	; 0x84
   1b83c:	ldr	ip, [sp, #24]
   1b840:	str	r3, [sp, #20]
   1b844:	ldr	r3, [fp, #8]
   1b848:	add	r1, r1, #1
   1b84c:	str	ip, [sp, #176]	; 0xb0
   1b850:	str	ip, [sp, #180]	; 0xb4
   1b854:	ldr	ip, [sp, #20]
   1b858:	add	r3, r3, #1
   1b85c:	cmp	r3, r0
   1b860:	movlt	r3, r0
   1b864:	str	ip, [sp, #196]	; 0xc4
   1b868:	and	ip, r2, #4194304	; 0x400000
   1b86c:	ubfx	r2, r2, #22, #1
   1b870:	str	r0, [sp, #212]	; 0xd4
   1b874:	strb	r2, [sp, #204]	; 0xcc
   1b878:	ldr	r2, [sp, #20]
   1b87c:	orrs	r2, r2, ip
   1b880:	movne	r2, #1
   1b884:	moveq	r2, #0
   1b888:	cmp	r3, r1
   1b88c:	strb	r2, [sp, #207]	; 0xcf
   1b890:	movlt	r1, r3
   1b894:	ldrb	r2, [fp, #88]	; 0x58
   1b898:	ubfx	r0, r2, #2, #1
   1b89c:	ubfx	r2, r2, #3, #1
   1b8a0:	strb	r0, [sp, #205]	; 0xcd
   1b8a4:	add	r0, sp, #132	; 0x84
   1b8a8:	strb	r2, [sp, #206]	; 0xce
   1b8ac:	ldr	r2, [sp, #24]
   1b8b0:	str	r2, [sp, #184]	; 0xb8
   1b8b4:	str	r2, [sp, #188]	; 0xbc
   1b8b8:	bl	14de8 <__assert_fail@plt+0x3900>
   1b8bc:	cmp	r0, #0
   1b8c0:	bne	1c9b0 <__assert_fail@plt+0xb4c8>
   1b8c4:	add	r3, fp, #96	; 0x60
   1b8c8:	str	r3, [sp, #200]	; 0xc8
   1b8cc:	ldrb	r3, [fp, #88]	; 0x58
   1b8d0:	ubfx	r3, r3, #4, #1
   1b8d4:	strb	r3, [sp, #210]	; 0xd2
   1b8d8:	ldrb	r3, [sp, #207]	; 0xcf
   1b8dc:	cmp	r3, #0
   1b8e0:	ldrne	r2, [sp, #136]	; 0x88
   1b8e4:	ldreq	r2, [sp, #40]	; 0x28
   1b8e8:	cmp	r3, #0
   1b8ec:	movne	r3, #0
   1b8f0:	str	r2, [sp, #136]	; 0x88
   1b8f4:	bne	1b908 <__assert_fail@plt+0xa420>
   1b8f8:	ldr	r3, [fp, #92]	; 0x5c
   1b8fc:	cmp	r3, #1
   1b900:	ldr	r3, [sp, #24]
   1b904:	movgt	r3, #0
   1b908:	str	r3, [sp, #160]	; 0xa0
   1b90c:	str	r3, [sp, #164]	; 0xa4
   1b910:	ldrb	r3, [sl, #28]
   1b914:	str	r6, [sp, #184]	; 0xb8
   1b918:	str	r6, [sp, #188]	; 0xbc
   1b91c:	ubfx	r3, r3, #7, #1
   1b920:	strb	r3, [sp, #209]	; 0xd1
   1b924:	ldr	r8, [fp, #76]	; 0x4c
   1b928:	ldr	r3, [sp, #464]	; 0x1d0
   1b92c:	lsl	r6, r8, #1
   1b930:	str	r3, [sp, #220]	; 0xdc
   1b934:	mvn	r3, #0
   1b938:	cmp	r6, #0
   1b93c:	str	r3, [sp, #224]	; 0xe0
   1b940:	bgt	1b9c8 <__assert_fail@plt+0xa4e0>
   1b944:	mov	r3, #1
   1b948:	str	r6, [sp, #244]	; 0xf4
   1b94c:	str	r3, [sp, #252]	; 0xfc
   1b950:	ldr	r3, [sp, #8]
   1b954:	str	r6, [sp, #260]	; 0x104
   1b958:	cmp	r3, #1
   1b95c:	bhi	1ba0c <__assert_fail@plt+0xa524>
   1b960:	ldrb	r3, [fp, #88]	; 0x58
   1b964:	tst	r3, #2
   1b968:	bne	1ba0c <__assert_fail@plt+0xa524>
   1b96c:	ldr	r3, [sp, #464]	; 0x1d0
   1b970:	str	r7, [sp, #100]	; 0x64
   1b974:	tst	r3, #1
   1b978:	movne	r3, #4
   1b97c:	moveq	r3, #6
   1b980:	cmp	r7, r4
   1b984:	str	r3, [sp, #192]	; 0xc0
   1b988:	mvngt	r3, #0
   1b98c:	movle	r3, #1
   1b990:	str	r3, [sp, #76]	; 0x4c
   1b994:	movlt	r3, r7
   1b998:	movge	r3, r4
   1b99c:	str	r3, [sp, #60]	; 0x3c
   1b9a0:	movge	r3, r7
   1b9a4:	movlt	r3, r4
   1b9a8:	str	r3, [sp, #28]
   1b9ac:	ldr	r3, [fp, #92]	; 0x5c
   1b9b0:	str	r3, [sp, #72]	; 0x48
   1b9b4:	ldr	r3, [sp, #16]
   1b9b8:	cmp	r3, #0
   1b9bc:	bne	1ba34 <__assert_fail@plt+0xa54c>
   1b9c0:	mov	r3, #8
   1b9c4:	b	1ba78 <__assert_fail@plt+0xa590>
   1b9c8:	ldr	r3, [pc, #4072]	; 1c9b8 <__assert_fail@plt+0xb4d0>
   1b9cc:	cmp	r6, r3
   1b9d0:	ble	1b9dc <__assert_fail@plt+0xa4f4>
   1b9d4:	mov	r3, #12
   1b9d8:	b	1bb60 <__assert_fail@plt+0xa678>
   1b9dc:	mov	r0, #24
   1b9e0:	mul	r0, r0, r6
   1b9e4:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1b9e8:	str	r0, [sp, #248]	; 0xf8
   1b9ec:	lsl	r0, r8, #3
   1b9f0:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1b9f4:	ldr	r3, [sp, #248]	; 0xf8
   1b9f8:	str	r0, [sp, #264]	; 0x108
   1b9fc:	cmp	r0, #0
   1ba00:	cmpne	r3, #0
   1ba04:	bne	1b944 <__assert_fail@plt+0xa45c>
   1ba08:	b	1b9d4 <__assert_fail@plt+0xa4ec>
   1ba0c:	ldr	r0, [sp, #168]	; 0xa8
   1ba10:	cmn	r0, #-1073741822	; 0xc0000002
   1ba14:	bhi	1b9d4 <__assert_fail@plt+0xa4ec>
   1ba18:	add	r0, r0, #1
   1ba1c:	lsl	r0, r0, #2
   1ba20:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1ba24:	cmp	r0, #0
   1ba28:	str	r0, [sp, #232]	; 0xe8
   1ba2c:	bne	1b96c <__assert_fail@plt+0xa484>
   1ba30:	b	1b9d4 <__assert_fail@plt+0xa4ec>
   1ba34:	ldr	r3, [sp, #72]	; 0x48
   1ba38:	cmp	r3, #1
   1ba3c:	moveq	r3, #4
   1ba40:	beq	1ba5c <__assert_fail@plt+0xa574>
   1ba44:	ldr	r3, [sl, #12]
   1ba48:	ldr	r2, [sp, #20]
   1ba4c:	and	r3, r3, #4194304	; 0x400000
   1ba50:	orrs	r3, r2, r3
   1ba54:	moveq	r3, #4
   1ba58:	movne	r3, #0
   1ba5c:	ldr	r1, [sp, #20]
   1ba60:	cmp	r7, r4
   1ba64:	movle	r2, #2
   1ba68:	movgt	r2, #0
   1ba6c:	cmp	r1, #0
   1ba70:	orrne	r3, r3, #1
   1ba74:	orr	r3, r3, r2
   1ba78:	cmp	r7, r4
   1ba7c:	str	r3, [sp, #80]	; 0x50
   1ba80:	add	r3, sp, #408	; 0x198
   1ba84:	suble	r3, r3, #308	; 0x134
   1ba88:	movgt	r3, #0
   1ba8c:	str	r3, [sp, #84]	; 0x54
   1ba90:	adds	r3, r3, #0
   1ba94:	movne	r3, #1
   1ba98:	str	r3, [sp, #88]	; 0x58
   1ba9c:	ldr	r2, [sp, #28]
   1baa0:	ldr	r1, [sp, #60]	; 0x3c
   1baa4:	ldr	r3, [sp, #100]	; 0x64
   1baa8:	cmp	r3, r2
   1baac:	movle	r2, #0
   1bab0:	movgt	r2, #1
   1bab4:	cmp	r3, r1
   1bab8:	orrlt	r2, r2, #1
   1babc:	cmp	r2, #0
   1bac0:	str	r2, [sp, #32]
   1bac4:	bne	1bb5c <__assert_fail@plt+0xa674>
   1bac8:	ldr	r2, [sp, #80]	; 0x50
   1bacc:	sub	r2, r2, #4
   1bad0:	cmp	r2, #4
   1bad4:	ldrls	pc, [pc, r2, lsl #2]
   1bad8:	b	1bc78 <__assert_fail@plt+0xa790>
   1badc:	ldrdeq	fp, [r1], -ip
   1bae0:	ldrdeq	fp, [r1], -ip
   1bae4:	andeq	fp, r1, r4, lsr #23
   1bae8:	strdeq	fp, [r1], -r0
   1baec:	andeq	fp, r1, r8, lsl sp
   1baf0:	mov	r2, #0
   1baf4:	ldr	r0, [sp, #28]
   1baf8:	mov	r1, r3
   1bafc:	cmp	r0, r3
   1bb00:	bgt	1bc04 <__assert_fail@plt+0xa71c>
   1bb04:	cmp	r2, #0
   1bb08:	strne	r3, [sp, #100]	; 0x64
   1bb0c:	ldr	r2, [sp, #28]
   1bb10:	ldr	r3, [sp, #100]	; 0x64
   1bb14:	cmp	r3, r2
   1bb18:	bne	1bd18 <__assert_fail@plt+0xa830>
   1bb1c:	mov	r3, r2
   1bb20:	ldr	r1, [sp, #20]
   1bb24:	ldr	r2, [sp, #24]
   1bb28:	cmp	r3, r2
   1bb2c:	ldrlt	r3, [sp, #40]	; 0x28
   1bb30:	movge	r3, #0
   1bb34:	ldrlt	r2, [sp, #28]
   1bb38:	ldrblt	r3, [r3, r2]
   1bb3c:	cmp	r1, #0
   1bb40:	mov	r2, r3
   1bb44:	movne	r2, r1
   1bb48:	ldrbne	r2, [r2, r3]
   1bb4c:	ldr	r3, [sp, #16]
   1bb50:	ldrb	r3, [r3, r2]
   1bb54:	cmp	r3, #0
   1bb58:	bne	1bd18 <__assert_fail@plt+0xa830>
   1bb5c:	mov	r3, #1
   1bb60:	str	r3, [sp, #12]
   1bb64:	ldr	r0, [sp, #232]	; 0xe8
   1bb68:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1bb6c:	ldr	r3, [fp, #76]	; 0x4c
   1bb70:	cmp	r3, #0
   1bb74:	beq	1bb90 <__assert_fail@plt+0xa6a8>
   1bb78:	add	r0, sp, #132	; 0x84
   1bb7c:	bl	15cb4 <__assert_fail@plt+0x47cc>
   1bb80:	ldr	r0, [sp, #264]	; 0x108
   1bb84:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1bb88:	ldr	r0, [sp, #248]	; 0xf8
   1bb8c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1bb90:	add	r0, sp, #132	; 0x84
   1bb94:	bl	15c84 <__assert_fail@plt+0x479c>
   1bb98:	ldr	r0, [sp, #12]
   1bb9c:	add	sp, sp, #412	; 0x19c
   1bba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bba4:	mov	r2, #0
   1bba8:	ldr	r0, [sp, #28]
   1bbac:	mov	r1, r3
   1bbb0:	cmp	r0, r3
   1bbb4:	ble	1bb04 <__assert_fail@plt+0xa61c>
   1bbb8:	ldr	ip, [sp, #16]
   1bbbc:	ldr	r0, [sp, #40]	; 0x28
   1bbc0:	ldrb	r0, [r0, r3]
   1bbc4:	add	r3, r3, #1
   1bbc8:	ldrb	r0, [ip, r0]
   1bbcc:	cmp	r0, #0
   1bbd0:	bne	1bc28 <__assert_fail@plt+0xa740>
   1bbd4:	mov	r2, #1
   1bbd8:	b	1bba8 <__assert_fail@plt+0xa6c0>
   1bbdc:	mov	r2, #0
   1bbe0:	ldr	r1, [sp, #60]	; 0x3c
   1bbe4:	mov	ip, r3
   1bbe8:	cmp	r1, r3
   1bbec:	ble	1bc34 <__assert_fail@plt+0xa74c>
   1bbf0:	cmp	r2, #0
   1bbf4:	strne	r3, [sp, #100]	; 0x64
   1bbf8:	b	1bb5c <__assert_fail@plt+0xa674>
   1bbfc:	mov	r2, #1
   1bc00:	b	1baf4 <__assert_fail@plt+0xa60c>
   1bc04:	ldr	ip, [sp, #20]
   1bc08:	ldr	r0, [sp, #40]	; 0x28
   1bc0c:	ldrb	r0, [r0, r3]
   1bc10:	add	r3, r3, #1
   1bc14:	ldrb	r0, [ip, r0]
   1bc18:	ldr	ip, [sp, #16]
   1bc1c:	ldrb	r0, [ip, r0]
   1bc20:	cmp	r0, #0
   1bc24:	beq	1bbfc <__assert_fail@plt+0xa714>
   1bc28:	cmp	r2, #0
   1bc2c:	strne	r1, [sp, #100]	; 0x64
   1bc30:	b	1bb0c <__assert_fail@plt+0xa624>
   1bc34:	ldr	lr, [sp, #20]
   1bc38:	ldr	r1, [sp, #24]
   1bc3c:	cmp	r1, r3
   1bc40:	ldrgt	r1, [sp, #40]	; 0x28
   1bc44:	movle	r1, #0
   1bc48:	ldrbgt	r1, [r1, r3]
   1bc4c:	cmp	lr, #0
   1bc50:	sub	r3, r3, #1
   1bc54:	mov	r0, r1
   1bc58:	movne	r0, lr
   1bc5c:	ldrbne	r0, [r0, r1]
   1bc60:	ldr	r1, [sp, #16]
   1bc64:	ldrb	r1, [r1, r0]
   1bc68:	cmp	r1, #0
   1bc6c:	bne	1bd10 <__assert_fail@plt+0xa828>
   1bc70:	mov	r2, #1
   1bc74:	b	1bbe0 <__assert_fail@plt+0xa6f8>
   1bc78:	ldr	r4, [sp, #100]	; 0x64
   1bc7c:	ldr	r3, [sp, #156]	; 0x9c
   1bc80:	ldr	r2, [sp, #164]	; 0xa4
   1bc84:	sub	r3, r4, r3
   1bc88:	cmp	r2, r3
   1bc8c:	bhi	1bcb4 <__assert_fail@plt+0xa7cc>
   1bc90:	mov	r1, r4
   1bc94:	add	r0, sp, #132	; 0x84
   1bc98:	ldr	r2, [sp, #464]	; 0x1d0
   1bc9c:	bl	18468 <__assert_fail@plt+0x6f80>
   1bca0:	subs	r3, r0, #0
   1bca4:	str	r3, [sp, #12]
   1bca8:	bne	1bb64 <__assert_fail@plt+0xa67c>
   1bcac:	ldr	r3, [sp, #156]	; 0x9c
   1bcb0:	sub	r3, r4, r3
   1bcb4:	ldr	r2, [sp, #160]	; 0xa0
   1bcb8:	cmp	r2, r3
   1bcbc:	ldrhi	r2, [sp, #136]	; 0x88
   1bcc0:	movls	r3, #0
   1bcc4:	ldrbhi	r3, [r2, r3]
   1bcc8:	ldr	r2, [sp, #16]
   1bccc:	ldrb	r3, [r2, r3]
   1bcd0:	cmp	r3, #0
   1bcd4:	bne	1bd18 <__assert_fail@plt+0xa830>
   1bcd8:	ldr	r2, [sp, #60]	; 0x3c
   1bcdc:	ldr	r3, [sp, #76]	; 0x4c
   1bce0:	add	r4, r4, r3
   1bce4:	ldr	r3, [sp, #28]
   1bce8:	str	r4, [sp, #100]	; 0x64
   1bcec:	cmp	r4, r3
   1bcf0:	movle	r3, #0
   1bcf4:	movgt	r3, #1
   1bcf8:	cmp	r4, r2
   1bcfc:	movge	r4, r3
   1bd00:	orrlt	r4, r3, #1
   1bd04:	cmp	r4, #0
   1bd08:	beq	1bc78 <__assert_fail@plt+0xa790>
   1bd0c:	b	1bb5c <__assert_fail@plt+0xa674>
   1bd10:	cmp	r2, #0
   1bd14:	strne	ip, [sp, #100]	; 0x64
   1bd18:	add	r0, sp, #132	; 0x84
   1bd1c:	ldr	r1, [sp, #100]	; 0x64
   1bd20:	ldr	r2, [sp, #464]	; 0x1d0
   1bd24:	bl	18468 <__assert_fail@plt+0x6f80>
   1bd28:	subs	r3, r0, #0
   1bd2c:	str	r3, [sp, #12]
   1bd30:	bne	1bb64 <__assert_fail@plt+0xa67c>
   1bd34:	ldr	r3, [sp, #72]	; 0x48
   1bd38:	cmp	r3, #1
   1bd3c:	beq	1bd5c <__assert_fail@plt+0xa874>
   1bd40:	ldr	r3, [sp, #160]	; 0xa0
   1bd44:	cmp	r3, #0
   1bd48:	beq	1bd5c <__assert_fail@plt+0xa874>
   1bd4c:	ldr	r3, [sp, #140]	; 0x8c
   1bd50:	ldr	r3, [r3]
   1bd54:	cmn	r3, #1
   1bd58:	beq	1be68 <__assert_fail@plt+0xa980>
   1bd5c:	mov	r3, #0
   1bd60:	ldr	r9, [sp, #172]	; 0xac
   1bd64:	ldr	r4, [sp, #216]	; 0xd8
   1bd68:	ldr	r6, [r4, #36]	; 0x24
   1bd6c:	str	r3, [sp, #108]	; 0x6c
   1bd70:	str	r3, [sp, #236]	; 0xec
   1bd74:	str	r3, [sp, #240]	; 0xf0
   1bd78:	str	r3, [sp, #252]	; 0xfc
   1bd7c:	ldrsb	r3, [r6, #52]	; 0x34
   1bd80:	cmp	r3, #0
   1bd84:	bge	1bdf0 <__assert_fail@plt+0xa908>
   1bd88:	sub	r1, r9, #1
   1bd8c:	add	r0, sp, #132	; 0x84
   1bd90:	ldr	r2, [sp, #220]	; 0xdc
   1bd94:	bl	18268 <__assert_fail@plt+0x6d80>
   1bd98:	tst	r0, #1
   1bd9c:	mov	r3, r0
   1bda0:	ldrne	r6, [r4, #40]	; 0x28
   1bda4:	bne	1bde8 <__assert_fail@plt+0xa900>
   1bda8:	cmp	r0, #0
   1bdac:	beq	1bdf0 <__assert_fail@plt+0xa908>
   1bdb0:	and	r2, r0, #6
   1bdb4:	cmp	r2, #6
   1bdb8:	ldreq	r6, [r4, #48]	; 0x30
   1bdbc:	beq	1bde8 <__assert_fail@plt+0xa900>
   1bdc0:	tst	r0, #2
   1bdc4:	ldrne	r6, [r4, #44]	; 0x2c
   1bdc8:	bne	1bde8 <__assert_fail@plt+0xa900>
   1bdcc:	tst	r0, #4
   1bdd0:	beq	1bdf0 <__assert_fail@plt+0xa908>
   1bdd4:	mov	r1, r4
   1bdd8:	add	r0, sp, #108	; 0x6c
   1bddc:	ldr	r2, [r6, #40]	; 0x28
   1bde0:	bl	171dc <__assert_fail@plt+0x5cf4>
   1bde4:	mov	r6, r0
   1bde8:	cmp	r6, #0
   1bdec:	beq	1b9d4 <__assert_fail@plt+0xa4ec>
   1bdf0:	ldr	r3, [sp, #232]	; 0xe8
   1bdf4:	cmp	r3, #0
   1bdf8:	beq	1be7c <__assert_fail@plt+0xa994>
   1bdfc:	str	r6, [r3, r9, lsl #2]
   1be00:	ldr	r3, [r4, #76]	; 0x4c
   1be04:	cmp	r3, #0
   1be08:	beq	1be7c <__assert_fail@plt+0xa994>
   1be0c:	add	r7, r6, #4
   1be10:	mov	r2, #0
   1be14:	mov	r1, r7
   1be18:	add	r0, sp, #132	; 0x84
   1be1c:	bl	15ebc <__assert_fail@plt+0x49d4>
   1be20:	cmp	r0, #0
   1be24:	mov	r4, r0
   1be28:	str	r0, [sp, #108]	; 0x6c
   1be2c:	bne	1be58 <__assert_fail@plt+0xa970>
   1be30:	ldrb	r3, [r6, #52]	; 0x34
   1be34:	tst	r3, #64	; 0x40
   1be38:	beq	1be84 <__assert_fail@plt+0xa99c>
   1be3c:	mov	r1, r7
   1be40:	add	r0, sp, #132	; 0x84
   1be44:	bl	1a77c <__assert_fail@plt+0x9294>
   1be48:	cmp	r0, #0
   1be4c:	mov	r4, r0
   1be50:	str	r0, [sp, #108]	; 0x6c
   1be54:	beq	1be84 <__assert_fail@plt+0xa99c>
   1be58:	cmn	r4, #1
   1be5c:	bne	1c30c <__assert_fail@plt+0xae24>
   1be60:	add	r0, sp, #132	; 0x84
   1be64:	bl	15cb4 <__assert_fail@plt+0x47cc>
   1be68:	ldr	r2, [sp, #76]	; 0x4c
   1be6c:	ldr	r3, [sp, #100]	; 0x64
   1be70:	add	r3, r3, r2
   1be74:	str	r3, [sp, #100]	; 0x64
   1be78:	b	1ba9c <__assert_fail@plt+0xa5b4>
   1be7c:	ldr	r3, [sp, #88]	; 0x58
   1be80:	str	r3, [sp, #32]
   1be84:	ldrb	r3, [r6, #52]	; 0x34
   1be88:	ubfx	r3, r3, #4, #1
   1be8c:	cmp	r3, #0
   1be90:	streq	r3, [sp, #44]	; 0x2c
   1be94:	beq	1c304 <__assert_fail@plt+0xae1c>
   1be98:	ldrsb	r3, [r6, #52]	; 0x34
   1be9c:	cmp	r3, #0
   1bea0:	bge	1bec0 <__assert_fail@plt+0xa9d8>
   1bea4:	mov	r2, r9
   1bea8:	mov	r1, r6
   1beac:	add	r0, sp, #132	; 0x84
   1beb0:	bl	18aa4 <__assert_fail@plt+0x75bc>
   1beb4:	subs	r3, r0, #0
   1beb8:	str	r3, [sp, #44]	; 0x2c
   1bebc:	beq	1c304 <__assert_fail@plt+0xae1c>
   1bec0:	ldr	r3, [sp, #36]	; 0x24
   1bec4:	mov	r4, r9
   1bec8:	cmp	r3, #0
   1becc:	ldrne	r3, [sp, #36]	; 0x24
   1bed0:	strne	r3, [sp, #44]	; 0x2c
   1bed4:	beq	1be58 <__assert_fail@plt+0xa970>
   1bed8:	ldr	r3, [sp, #84]	; 0x54
   1bedc:	str	r3, [sp, #48]	; 0x30
   1bee0:	ldr	r1, [sp, #172]	; 0xac
   1bee4:	ldr	r3, [sp, #188]	; 0xbc
   1bee8:	cmp	r1, r3
   1beec:	bge	1bff0 <__assert_fail@plt+0xab08>
   1bef0:	add	r3, r1, #1
   1bef4:	add	r2, r1, #1
   1bef8:	str	r3, [sp, #64]	; 0x40
   1befc:	ldr	r3, [sp, #168]	; 0xa8
   1bf00:	cmp	r2, r3
   1bf04:	blt	1bf14 <__assert_fail@plt+0xaa2c>
   1bf08:	ldr	r2, [sp, #180]	; 0xb4
   1bf0c:	cmp	r3, r2
   1bf10:	blt	1bf30 <__assert_fail@plt+0xaa48>
   1bf14:	ldr	r3, [sp, #160]	; 0xa0
   1bf18:	add	r2, r1, #1
   1bf1c:	cmp	r2, r3
   1bf20:	blt	1bf48 <__assert_fail@plt+0xaa60>
   1bf24:	ldr	r2, [sp, #180]	; 0xb4
   1bf28:	cmp	r3, r2
   1bf2c:	bge	1bf48 <__assert_fail@plt+0xaa60>
   1bf30:	add	r1, r1, #2
   1bf34:	add	r0, sp, #132	; 0x84
   1bf38:	bl	158d4 <__assert_fail@plt+0x43ec>
   1bf3c:	cmp	r0, #0
   1bf40:	str	r0, [sp, #108]	; 0x6c
   1bf44:	bne	1b9d4 <__assert_fail@plt+0xa4ec>
   1bf48:	ldrb	r3, [r6, #52]	; 0x34
   1bf4c:	tst	r3, #32
   1bf50:	bne	1c00c <__assert_fail@plt+0xab24>
   1bf54:	ldr	r3, [sp, #172]	; 0xac
   1bf58:	add	r2, r3, #1
   1bf5c:	str	r2, [sp, #172]	; 0xac
   1bf60:	ldr	r2, [sp, #136]	; 0x88
   1bf64:	ldrb	r8, [r2, r3]
   1bf68:	ldr	r3, [r6, #44]	; 0x2c
   1bf6c:	cmp	r3, #0
   1bf70:	beq	1c1e4 <__assert_fail@plt+0xacfc>
   1bf74:	ldr	r7, [r3, r8, lsl #2]
   1bf78:	ldr	r3, [sp, #232]	; 0xe8
   1bf7c:	cmp	r3, #0
   1bf80:	beq	1bf98 <__assert_fail@plt+0xaab0>
   1bf84:	mov	r2, r7
   1bf88:	add	r1, sp, #132	; 0x84
   1bf8c:	add	r0, sp, #108	; 0x6c
   1bf90:	bl	1ad7c <__assert_fail@plt+0x9894>
   1bf94:	mov	r7, r0
   1bf98:	cmp	r7, #0
   1bf9c:	bne	1c274 <__assert_fail@plt+0xad8c>
   1bfa0:	ldr	r2, [sp, #108]	; 0x6c
   1bfa4:	ldr	r3, [sp, #232]	; 0xe8
   1bfa8:	cmp	r2, #0
   1bfac:	bne	1b9d4 <__assert_fail@plt+0xa4ec>
   1bfb0:	cmp	r3, #0
   1bfb4:	beq	1bff0 <__assert_fail@plt+0xab08>
   1bfb8:	ldr	r3, [sp, #36]	; 0x24
   1bfbc:	ldr	r2, [sp, #44]	; 0x2c
   1bfc0:	eor	r3, r3, #1
   1bfc4:	tst	r2, r3
   1bfc8:	bne	1bff0 <__assert_fail@plt+0xab08>
   1bfcc:	ldr	r3, [sp, #172]	; 0xac
   1bfd0:	mov	r2, #0
   1bfd4:	ldr	r0, [sp, #232]	; 0xe8
   1bfd8:	ldr	ip, [sp, #236]	; 0xec
   1bfdc:	add	r1, r3, #1
   1bfe0:	cmp	ip, r1
   1bfe4:	bge	1c234 <__assert_fail@plt+0xad4c>
   1bfe8:	cmp	r2, #0
   1bfec:	strne	r3, [sp, #172]	; 0xac
   1bff0:	ldr	r3, [sp, #48]	; 0x30
   1bff4:	cmp	r3, #0
   1bff8:	ldrne	r3, [r3]
   1bffc:	ldrne	r2, [sp, #48]	; 0x30
   1c000:	addne	r3, r3, r9
   1c004:	strne	r3, [r2]
   1c008:	b	1be58 <__assert_fail@plt+0xa970>
   1c00c:	ldr	r8, [sp, #216]	; 0xd8
   1c010:	mov	r3, #0
   1c014:	str	r3, [sp, #52]	; 0x34
   1c018:	ldr	r3, [r6, #8]
   1c01c:	ldr	r2, [sp, #52]	; 0x34
   1c020:	cmp	r2, r3
   1c024:	movge	r0, #0
   1c028:	bge	1c1d0 <__assert_fail@plt+0xace8>
   1c02c:	ldr	r3, [r6, #12]
   1c030:	ldr	r2, [sp, #52]	; 0x34
   1c034:	ldr	r3, [r3, r2, lsl #2]
   1c038:	str	r3, [sp, #68]	; 0x44
   1c03c:	ldr	r3, [r8]
   1c040:	ldr	r2, [sp, #68]	; 0x44
   1c044:	add	r3, r3, r2, lsl #3
   1c048:	ldrb	r2, [r3, #6]
   1c04c:	tst	r2, #16
   1c050:	beq	1c1a8 <__assert_fail@plt+0xacc0>
   1c054:	ldr	r7, [r3, #4]
   1c058:	ldr	r3, [pc, #2396]	; 1c9bc <__assert_fail@plt+0xb4d4>
   1c05c:	ldr	r2, [sp, #172]	; 0xac
   1c060:	tst	r3, r7
   1c064:	str	r2, [sp, #92]	; 0x5c
   1c068:	beq	1c0c0 <__assert_fail@plt+0xabd8>
   1c06c:	ubfx	r7, r7, #8, #10
   1c070:	add	r0, sp, #132	; 0x84
   1c074:	ldr	r1, [sp, #92]	; 0x5c
   1c078:	ldr	r2, [sp, #220]	; 0xdc
   1c07c:	bl	18268 <__assert_fail@plt+0x6d80>
   1c080:	tst	r7, #4
   1c084:	beq	1c090 <__assert_fail@plt+0xaba8>
   1c088:	tst	r0, #1
   1c08c:	beq	1c1a8 <__assert_fail@plt+0xacc0>
   1c090:	tst	r7, #8
   1c094:	beq	1c0a0 <__assert_fail@plt+0xabb8>
   1c098:	tst	r0, #1
   1c09c:	bne	1c1a8 <__assert_fail@plt+0xacc0>
   1c0a0:	tst	r7, #32
   1c0a4:	beq	1c0b0 <__assert_fail@plt+0xabc8>
   1c0a8:	tst	r0, #2
   1c0ac:	beq	1c1a8 <__assert_fail@plt+0xacc0>
   1c0b0:	tst	r7, #128	; 0x80
   1c0b4:	beq	1c0c0 <__assert_fail@plt+0xabd8>
   1c0b8:	tst	r0, #8
   1c0bc:	beq	1c1a8 <__assert_fail@plt+0xacc0>
   1c0c0:	add	r2, sp, #132	; 0x84
   1c0c4:	mov	r0, r8
   1c0c8:	ldr	r1, [sp, #68]	; 0x44
   1c0cc:	ldr	r3, [sp, #92]	; 0x5c
   1c0d0:	bl	169ec <__assert_fail@plt+0x5504>
   1c0d4:	cmp	r0, #0
   1c0d8:	beq	1c1a8 <__assert_fail@plt+0xacc0>
   1c0dc:	ldr	r7, [sp, #172]	; 0xac
   1c0e0:	ldr	r3, [sp, #252]	; 0xfc
   1c0e4:	add	r7, r0, r7
   1c0e8:	mov	r1, r7
   1c0ec:	cmp	r3, r0
   1c0f0:	strge	r3, [sp, #252]	; 0xfc
   1c0f4:	strlt	r0, [sp, #252]	; 0xfc
   1c0f8:	add	r0, sp, #132	; 0x84
   1c0fc:	bl	15f9c <__assert_fail@plt+0x4ab4>
   1c100:	cmp	r0, #0
   1c104:	str	r0, [sp, #120]	; 0x78
   1c108:	bne	1c1d0 <__assert_fail@plt+0xace8>
   1c10c:	ldr	r3, [r8, #12]
   1c110:	mov	r1, #12
   1c114:	ldr	r2, [sp, #68]	; 0x44
   1c118:	ldr	r2, [r3, r2, lsl #2]
   1c11c:	ldr	r3, [r8, #24]
   1c120:	mla	r2, r1, r2, r3
   1c124:	ldr	r3, [sp, #232]	; 0xe8
   1c128:	ldr	r3, [r3, r7, lsl #2]
   1c12c:	cmp	r3, #0
   1c130:	str	r3, [sp, #68]	; 0x44
   1c134:	add	r3, sp, #268	; 0x10c
   1c138:	bne	1c1b4 <__assert_fail@plt+0xaccc>
   1c13c:	ldm	r2, {r0, r1, r2}
   1c140:	stm	r3, {r0, r1, r2}
   1c144:	sub	r1, r7, #1
   1c148:	add	r0, sp, #132	; 0x84
   1c14c:	ldr	r2, [sp, #220]	; 0xdc
   1c150:	bl	18268 <__assert_fail@plt+0x6d80>
   1c154:	ldr	r3, [sp, #232]	; 0xe8
   1c158:	add	r2, sp, #268	; 0x10c
   1c15c:	mov	r1, r8
   1c160:	str	r3, [sp, #92]	; 0x5c
   1c164:	mov	r3, r0
   1c168:	add	r0, sp, #120	; 0x78
   1c16c:	bl	171dc <__assert_fail@plt+0x5cf4>
   1c170:	ldr	r3, [sp, #92]	; 0x5c
   1c174:	str	r0, [r3, r7, lsl #2]
   1c178:	ldr	r3, [sp, #68]	; 0x44
   1c17c:	cmp	r3, #0
   1c180:	beq	1c18c <__assert_fail@plt+0xaca4>
   1c184:	ldr	r0, [sp, #276]	; 0x114
   1c188:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c18c:	ldr	r3, [sp, #232]	; 0xe8
   1c190:	ldr	r3, [r3, r7, lsl #2]
   1c194:	cmp	r3, #0
   1c198:	bne	1c1a8 <__assert_fail@plt+0xacc0>
   1c19c:	ldr	r0, [sp, #120]	; 0x78
   1c1a0:	cmp	r0, #0
   1c1a4:	bne	1c1d0 <__assert_fail@plt+0xace8>
   1c1a8:	ldr	r3, [sp, #52]	; 0x34
   1c1ac:	add	r3, r3, #1
   1c1b0:	b	1c014 <__assert_fail@plt+0xab2c>
   1c1b4:	ldr	r1, [sp, #68]	; 0x44
   1c1b8:	mov	r0, r3
   1c1bc:	ldr	r1, [r1, #40]	; 0x28
   1c1c0:	bl	1709c <__assert_fail@plt+0x5bb4>
   1c1c4:	cmp	r0, #0
   1c1c8:	str	r0, [sp, #120]	; 0x78
   1c1cc:	beq	1c144 <__assert_fail@plt+0xac5c>
   1c1d0:	cmp	r0, #0
   1c1d4:	str	r0, [sp, #108]	; 0x6c
   1c1d8:	beq	1bf54 <__assert_fail@plt+0xaa6c>
   1c1dc:	mov	r7, #0
   1c1e0:	b	1bf78 <__assert_fail@plt+0xaa90>
   1c1e4:	ldr	r7, [r6, #48]	; 0x30
   1c1e8:	cmp	r7, #0
   1c1ec:	beq	1c214 <__assert_fail@plt+0xad2c>
   1c1f0:	ldr	r1, [sp, #172]	; 0xac
   1c1f4:	add	r0, sp, #132	; 0x84
   1c1f8:	ldr	r2, [sp, #220]	; 0xdc
   1c1fc:	sub	r1, r1, #1
   1c200:	bl	18268 <__assert_fail@plt+0x6d80>
   1c204:	tst	r0, #1
   1c208:	addne	r8, r8, #256	; 0x100
   1c20c:	ldr	r7, [r7, r8, lsl #2]
   1c210:	b	1bf78 <__assert_fail@plt+0xaa90>
   1c214:	mov	r1, r6
   1c218:	ldr	r0, [sp, #216]	; 0xd8
   1c21c:	bl	19414 <__assert_fail@plt+0x7f2c>
   1c220:	cmp	r0, #0
   1c224:	bne	1bf68 <__assert_fail@plt+0xaa80>
   1c228:	mov	r3, #12
   1c22c:	str	r3, [sp, #108]	; 0x6c
   1c230:	b	1bf78 <__assert_fail@plt+0xaa90>
   1c234:	mov	r3, r1
   1c238:	ldr	r1, [r0, r1, lsl #2]
   1c23c:	mov	r2, #1
   1c240:	cmp	r1, #0
   1c244:	beq	1bfdc <__assert_fail@plt+0xaaf4>
   1c248:	mov	r2, #0
   1c24c:	add	r1, sp, #132	; 0x84
   1c250:	str	r3, [sp, #172]	; 0xac
   1c254:	add	r0, sp, #108	; 0x6c
   1c258:	bl	1ad7c <__assert_fail@plt+0x9894>
   1c25c:	ldr	r3, [sp, #108]	; 0x6c
   1c260:	mov	r7, r0
   1c264:	cmp	r3, #0
   1c268:	bne	1c2f8 <__assert_fail@plt+0xae10>
   1c26c:	cmp	r0, #0
   1c270:	beq	1bfcc <__assert_fail@plt+0xaae4>
   1c274:	ldr	r3, [sp, #32]
   1c278:	cmp	r6, r7
   1c27c:	movne	r3, #0
   1c280:	andeq	r3, r3, #1
   1c284:	str	r3, [sp, #32]
   1c288:	ldr	r2, [sp, #32]
   1c28c:	ldr	r3, [sp, #64]	; 0x40
   1c290:	cmp	r2, #0
   1c294:	moveq	r3, r9
   1c298:	str	r3, [sp, #64]	; 0x40
   1c29c:	ldrb	r3, [r7, #52]	; 0x34
   1c2a0:	tst	r3, #16
   1c2a4:	beq	1c2ec <__assert_fail@plt+0xae04>
   1c2a8:	tst	r3, #128	; 0x80
   1c2ac:	ldr	r6, [sp, #172]	; 0xac
   1c2b0:	beq	1c2cc <__assert_fail@plt+0xade4>
   1c2b4:	mov	r2, r6
   1c2b8:	mov	r1, r7
   1c2bc:	add	r0, sp, #132	; 0x84
   1c2c0:	bl	18aa4 <__assert_fail@plt+0x75bc>
   1c2c4:	cmp	r0, #0
   1c2c8:	beq	1c2ec <__assert_fail@plt+0xae04>
   1c2cc:	ldr	r3, [sp, #36]	; 0x24
   1c2d0:	mov	r4, r6
   1c2d4:	cmp	r3, #0
   1c2d8:	beq	1be58 <__assert_fail@plt+0xa970>
   1c2dc:	ldr	r3, [sp, #36]	; 0x24
   1c2e0:	str	r3, [sp, #44]	; 0x2c
   1c2e4:	mov	r3, #0
   1c2e8:	str	r3, [sp, #48]	; 0x30
   1c2ec:	mov	r6, r7
   1c2f0:	ldr	r9, [sp, #64]	; 0x40
   1c2f4:	b	1bee0 <__assert_fail@plt+0xa9f8>
   1c2f8:	cmp	r0, #0
   1c2fc:	bne	1c274 <__assert_fail@plt+0xad8c>
   1c300:	b	1bff0 <__assert_fail@plt+0xab08>
   1c304:	mvn	r4, #0
   1c308:	b	1bed8 <__assert_fail@plt+0xa9f0>
   1c30c:	cmn	r4, #2
   1c310:	beq	1b9d4 <__assert_fail@plt+0xa4ec>
   1c314:	ldr	r2, [sp, #8]
   1c318:	str	r4, [sp, #224]	; 0xe0
   1c31c:	ldrb	r3, [sl, #28]
   1c320:	cmp	r2, #1
   1c324:	movls	r2, #0
   1c328:	movhi	r2, #1
   1c32c:	eor	r3, r3, #16
   1c330:	ands	r6, r2, r3, lsr #4
   1c334:	bne	1c344 <__assert_fail@plt+0xae5c>
   1c338:	ldr	r3, [fp, #76]	; 0x4c
   1c33c:	cmp	r3, #0
   1c340:	beq	1c370 <__assert_fail@plt+0xae88>
   1c344:	ldr	r3, [sp, #232]	; 0xe8
   1c348:	mov	r2, r4
   1c34c:	add	r0, sp, #132	; 0x84
   1c350:	ldr	r1, [r3, r4, lsl #2]
   1c354:	bl	18aa4 <__assert_fail@plt+0x75bc>
   1c358:	cmp	r6, #0
   1c35c:	str	r0, [sp, #228]	; 0xe4
   1c360:	beq	1c370 <__assert_fail@plt+0xae88>
   1c364:	ldrb	r3, [fp, #88]	; 0x58
   1c368:	tst	r3, #1
   1c36c:	bne	1c37c <__assert_fail@plt+0xae94>
   1c370:	ldr	r3, [fp, #76]	; 0x4c
   1c374:	cmp	r3, #0
   1c378:	beq	1ccec <__assert_fail@plt+0xb804>
   1c37c:	ldr	r3, [sp, #216]	; 0xd8
   1c380:	cmn	r4, #-1073741822	; 0xc0000002
   1c384:	ldr	r8, [sp, #228]	; 0xe4
   1c388:	str	r3, [sp, #32]
   1c38c:	bhi	1b9d4 <__assert_fail@plt+0xa4ec>
   1c390:	add	r9, r4, #1
   1c394:	lsl	r9, r9, #2
   1c398:	mov	r0, r9
   1c39c:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1c3a0:	subs	r7, r0, #0
   1c3a4:	beq	1c508 <__assert_fail@plt+0xb020>
   1c3a8:	ldr	r3, [sp, #32]
   1c3ac:	ldr	r6, [r3, #76]	; 0x4c
   1c3b0:	cmp	r6, #0
   1c3b4:	beq	1c4a0 <__assert_fail@plt+0xafb8>
   1c3b8:	mov	r0, r9
   1c3bc:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1c3c0:	subs	r6, r0, #0
   1c3c4:	beq	1c50c <__assert_fail@plt+0xb024>
   1c3c8:	add	r3, r4, #1
   1c3cc:	mov	r1, #0
   1c3d0:	lsl	r2, r3, #2
   1c3d4:	mov	r0, r6
   1c3d8:	str	r3, [sp, #44]	; 0x2c
   1c3dc:	bl	113ec <memset@plt>
   1c3e0:	mov	r3, #0
   1c3e4:	add	r1, sp, #268	; 0x10c
   1c3e8:	str	r7, [sp, #268]	; 0x10c
   1c3ec:	add	r0, sp, #132	; 0x84
   1c3f0:	str	r6, [sp, #272]	; 0x110
   1c3f4:	str	r8, [sp, #276]	; 0x114
   1c3f8:	str	r4, [sp, #280]	; 0x118
   1c3fc:	str	r3, [sp, #284]	; 0x11c
   1c400:	str	r3, [sp, #288]	; 0x120
   1c404:	str	r3, [sp, #292]	; 0x124
   1c408:	bl	1b490 <__assert_fail@plt+0x9fa8>
   1c40c:	mov	r9, r0
   1c410:	ldr	r0, [sp, #292]	; 0x124
   1c414:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c418:	cmp	r9, #0
   1c41c:	bne	1c510 <__assert_fail@plt+0xb028>
   1c420:	ldr	r2, [r7]
   1c424:	ldr	r3, [sp, #44]	; 0x2c
   1c428:	cmp	r2, #0
   1c42c:	bne	1c474 <__assert_fail@plt+0xaf8c>
   1c430:	ldr	r2, [r6]
   1c434:	cmp	r2, #0
   1c438:	bne	1c474 <__assert_fail@plt+0xaf8c>
   1c43c:	ldr	r2, [sp, #232]	; 0xe8
   1c440:	subs	r4, r4, #1
   1c444:	bcc	1c538 <__assert_fail@plt+0xb050>
   1c448:	ldr	r1, [r2, r4, lsl #2]
   1c44c:	cmp	r1, #0
   1c450:	beq	1c440 <__assert_fail@plt+0xaf58>
   1c454:	ldrb	r3, [r1, #52]	; 0x34
   1c458:	tst	r3, #16
   1c45c:	beq	1c440 <__assert_fail@plt+0xaf58>
   1c460:	mov	r2, r4
   1c464:	add	r0, sp, #132	; 0x84
   1c468:	bl	18aa4 <__assert_fail@plt+0x75bc>
   1c46c:	mov	r8, r0
   1c470:	b	1c3c8 <__assert_fail@plt+0xaee0>
   1c474:	mov	r2, r6
   1c478:	mov	r1, r7
   1c47c:	ldr	r0, [sp, #32]
   1c480:	bl	19eb8 <__assert_fail@plt+0x89d0>
   1c484:	mov	r9, r0
   1c488:	mov	r0, r6
   1c48c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c490:	cmp	r9, #0
   1c494:	beq	1c4e8 <__assert_fail@plt+0xb000>
   1c498:	mov	r6, #0
   1c49c:	b	1c510 <__assert_fail@plt+0xb028>
   1c4a0:	add	r1, sp, #268	; 0x10c
   1c4a4:	add	r0, sp, #132	; 0x84
   1c4a8:	str	r7, [sp, #268]	; 0x10c
   1c4ac:	str	r6, [sp, #272]	; 0x110
   1c4b0:	str	r8, [sp, #276]	; 0x114
   1c4b4:	str	r4, [sp, #280]	; 0x118
   1c4b8:	str	r6, [sp, #284]	; 0x11c
   1c4bc:	str	r6, [sp, #288]	; 0x120
   1c4c0:	str	r6, [sp, #292]	; 0x124
   1c4c4:	bl	1b490 <__assert_fail@plt+0x9fa8>
   1c4c8:	mov	r9, r0
   1c4cc:	ldr	r0, [sp, #292]	; 0x124
   1c4d0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c4d4:	cmp	r9, #0
   1c4d8:	bne	1c510 <__assert_fail@plt+0xb028>
   1c4dc:	ldr	r6, [r7]
   1c4e0:	cmp	r6, #0
   1c4e4:	beq	1c538 <__assert_fail@plt+0xb050>
   1c4e8:	ldr	r0, [sp, #232]	; 0xe8
   1c4ec:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c4f0:	str	r4, [sp, #224]	; 0xe0
   1c4f4:	str	r7, [sp, #232]	; 0xe8
   1c4f8:	mov	r7, #0
   1c4fc:	mov	r9, r7
   1c500:	str	r8, [sp, #228]	; 0xe4
   1c504:	b	1c498 <__assert_fail@plt+0xafb0>
   1c508:	mov	r6, r7
   1c50c:	mov	r9, #12
   1c510:	mov	r0, r7
   1c514:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c518:	mov	r0, r6
   1c51c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c520:	cmp	r9, #0
   1c524:	beq	1ccec <__assert_fail@plt+0xb804>
   1c528:	cmp	r9, #1
   1c52c:	beq	1be60 <__assert_fail@plt+0xa978>
   1c530:	str	r9, [sp, #12]
   1c534:	b	1bb64 <__assert_fail@plt+0xa67c>
   1c538:	mov	r9, #1
   1c53c:	b	1c510 <__assert_fail@plt+0xb028>
   1c540:	str	r2, [r1, r3, lsl #3]
   1c544:	str	r2, [r5, r3, lsl #3]
   1c548:	add	r3, r3, #1
   1c54c:	ldr	r0, [sp, #8]
   1c550:	cmp	r3, r0
   1c554:	bne	1c540 <__assert_fail@plt+0xb058>
   1c558:	mov	r3, #0
   1c55c:	subs	r2, r0, #1
   1c560:	movne	r2, #1
   1c564:	str	r3, [r5]
   1c568:	ldr	r3, [sp, #224]	; 0xe0
   1c56c:	str	r3, [r5, #4]
   1c570:	ldrb	r3, [sl, #28]
   1c574:	eor	r3, r3, #16
   1c578:	ands	r3, r2, r3, lsr #4
   1c57c:	beq	1cbcc <__assert_fail@plt+0xb6e4>
   1c580:	ldrb	r4, [fp, #88]	; 0x58
   1c584:	ands	r4, r4, #1
   1c588:	beq	1c59c <__assert_fail@plt+0xb0b4>
   1c58c:	ldr	r4, [fp, #76]	; 0x4c
   1c590:	cmp	r4, #0
   1c594:	movle	r4, #0
   1c598:	movgt	r4, #1
   1c59c:	ldr	r3, [sl]
   1c5a0:	mov	r2, #2
   1c5a4:	add	r7, sp, #280	; 0x118
   1c5a8:	cmp	r4, #0
   1c5ac:	str	r3, [sp, #16]
   1c5b0:	mov	r3, #0
   1c5b4:	str	r2, [sp, #124]	; 0x7c
   1c5b8:	str	r3, [sp, #120]	; 0x78
   1c5bc:	str	r3, [sp, #128]	; 0x80
   1c5c0:	str	r3, [sp, #268]	; 0x10c
   1c5c4:	mov	r3, #16
   1c5c8:	str	r7, [sp, #276]	; 0x114
   1c5cc:	str	r3, [sp, #272]	; 0x110
   1c5d0:	beq	1c5ec <__assert_fail@plt+0xb104>
   1c5d4:	mov	r0, #48	; 0x30
   1c5d8:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1c5dc:	cmp	r0, #0
   1c5e0:	str	r0, [sp, #128]	; 0x80
   1c5e4:	addne	r4, sp, #120	; 0x78
   1c5e8:	beq	1b9d4 <__assert_fail@plt+0xa4ec>
   1c5ec:	ldr	r2, [sp, #8]
   1c5f0:	ldr	r3, [sp, #16]
   1c5f4:	ldr	r6, [r3, #72]	; 0x48
   1c5f8:	mov	r3, #0
   1c5fc:	str	r3, [sp, #108]	; 0x6c
   1c600:	str	r3, [sp, #112]	; 0x70
   1c604:	str	r3, [sp, #116]	; 0x74
   1c608:	ldr	r3, [sp, #268]	; 0x10c
   1c60c:	cmp	r2, r3
   1c610:	ldrls	r3, [sp, #8]
   1c614:	strls	r3, [sp, #268]	; 0x10c
   1c618:	bls	1c670 <__assert_fail@plt+0xb188>
   1c61c:	mov	r3, #8
   1c620:	mov	r2, r7
   1c624:	ldr	r1, [sp, #8]
   1c628:	add	r0, sp, #268	; 0x10c
   1c62c:	bl	200a4 <__assert_fail@plt+0xebbc>
   1c630:	cmp	r0, #0
   1c634:	bne	1c670 <__assert_fail@plt+0xb188>
   1c638:	ldr	r0, [sp, #276]	; 0x114
   1c63c:	cmp	r0, r7
   1c640:	beq	1c648 <__assert_fail@plt+0xb160>
   1c644:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c648:	mov	r3, #0
   1c64c:	str	r3, [sp, #268]	; 0x10c
   1c650:	mvn	r3, #0
   1c654:	str	r7, [sp, #276]	; 0x114
   1c658:	str	r3, [sp, #272]	; 0x110
   1c65c:	add	r0, sp, #268	; 0x10c
   1c660:	bl	15d44 <__assert_fail@plt+0x485c>
   1c664:	mov	r0, r4
   1c668:	bl	17aec <__assert_fail@plt+0x6604>
   1c66c:	b	1b9d4 <__assert_fail@plt+0xa4ec>
   1c670:	ldr	r3, [sp, #8]
   1c674:	mov	r1, r5
   1c678:	ldr	r7, [sp, #276]	; 0x114
   1c67c:	lsl	r8, r3, #3
   1c680:	mov	r0, r7
   1c684:	mov	r2, r8
   1c688:	bl	11218 <memcpy@plt>
   1c68c:	mov	r2, r5
   1c690:	ldr	r3, [r2], #4
   1c694:	str	r2, [sp, #28]
   1c698:	str	r3, [sp, #104]	; 0x68
   1c69c:	ldr	r3, [sp, #8]
   1c6a0:	lsl	r3, r3, #4
   1c6a4:	str	r3, [sp, #24]
   1c6a8:	ldr	r3, [r5, #4]
   1c6ac:	ldr	r2, [sp, #104]	; 0x68
   1c6b0:	cmp	r2, r3
   1c6b4:	bgt	1c990 <__assert_fail@plt+0xb4a8>
   1c6b8:	ldr	r3, [sp, #16]
   1c6bc:	lsl	r0, r6, #3
   1c6c0:	ldr	r3, [r3]
   1c6c4:	add	r1, r3, r0
   1c6c8:	ldrb	ip, [r1, #4]
   1c6cc:	cmp	ip, #8
   1c6d0:	bne	1c914 <__assert_fail@plt+0xb42c>
   1c6d4:	ldr	r3, [r3, r6, lsl #3]
   1c6d8:	ldr	r1, [sp, #8]
   1c6dc:	add	r3, r3, #1
   1c6e0:	cmp	r1, r3
   1c6e4:	ble	1c6f8 <__assert_fail@plt+0xb210>
   1c6e8:	add	r1, r5, r3, lsl #3
   1c6ec:	str	r2, [r5, r3, lsl #3]
   1c6f0:	mvn	r3, #0
   1c6f4:	str	r3, [r1, #4]
   1c6f8:	ldr	r2, [r5, #4]
   1c6fc:	ldr	r3, [sp, #104]	; 0x68
   1c700:	cmp	r2, r3
   1c704:	bne	1c714 <__assert_fail@plt+0xb22c>
   1c708:	ldr	r3, [sp, #228]	; 0xe4
   1c70c:	cmp	r6, r3
   1c710:	beq	1c988 <__assert_fail@plt+0xb4a0>
   1c714:	cmp	r4, #0
   1c718:	beq	1c778 <__assert_fail@plt+0xb290>
   1c71c:	mov	r1, r6
   1c720:	add	r0, sp, #108	; 0x6c
   1c724:	bl	14840 <__assert_fail@plt+0x3358>
   1c728:	cmp	r0, #0
   1c72c:	beq	1c778 <__assert_fail@plt+0xb290>
   1c730:	mov	r3, #0
   1c734:	ldr	r2, [r5, r3, lsl #3]
   1c738:	cmp	r2, #0
   1c73c:	blt	1c9c0 <__assert_fail@plt+0xb4d8>
   1c740:	ldr	r2, [sp, #28]
   1c744:	ldr	r2, [r2, r3, lsl #3]
   1c748:	cmn	r2, #1
   1c74c:	bne	1c9c0 <__assert_fail@plt+0xb4d8>
   1c750:	add	r3, sp, #108	; 0x6c
   1c754:	add	r1, sp, #104	; 0x68
   1c758:	str	r7, [sp]
   1c75c:	mov	r0, r4
   1c760:	ldr	r2, [sp, #8]
   1c764:	str	r3, [sp, #4]
   1c768:	mov	r3, r5
   1c76c:	bl	16028 <__assert_fail@plt+0x4b40>
   1c770:	subs	r6, r0, #0
   1c774:	blt	1c990 <__assert_fail@plt+0xb4a8>
   1c778:	ldr	r9, [sp, #216]	; 0xd8
   1c77c:	lsl	sl, r6, #3
   1c780:	str	r6, [sp, #20]
   1c784:	ldr	r3, [r9]
   1c788:	add	r1, r3, sl
   1c78c:	ldrb	r2, [r1, #4]
   1c790:	tst	r2, #8
   1c794:	beq	1c9fc <__assert_fail@plt+0xb514>
   1c798:	ldr	r2, [sp, #104]	; 0x68
   1c79c:	mov	r1, r6
   1c7a0:	add	r0, sp, #108	; 0x6c
   1c7a4:	ldr	r3, [sp, #232]	; 0xe8
   1c7a8:	ldr	sl, [r3, r2, lsl #2]
   1c7ac:	mov	r2, #12
   1c7b0:	add	r3, sl, #4
   1c7b4:	str	r3, [sp, #20]
   1c7b8:	ldr	r3, [r9, #20]
   1c7bc:	mla	sl, r2, r6, r3
   1c7c0:	bl	14840 <__assert_fail@plt+0x3358>
   1c7c4:	cmp	r0, #0
   1c7c8:	beq	1c9d4 <__assert_fail@plt+0xb4ec>
   1c7cc:	ldr	r2, [sl, #4]
   1c7d0:	mov	r3, #0
   1c7d4:	mvn	r6, #0
   1c7d8:	cmp	r3, r2
   1c7dc:	bge	1c900 <__assert_fail@plt+0xb418>
   1c7e0:	ldr	r1, [sl, #8]
   1c7e4:	str	r3, [sp, #32]
   1c7e8:	ldr	r0, [sp, #20]
   1c7ec:	str	r2, [sp, #36]	; 0x24
   1c7f0:	ldr	r9, [r1, r3, lsl #2]
   1c7f4:	mov	r1, r9
   1c7f8:	bl	14840 <__assert_fail@plt+0x3358>
   1c7fc:	cmp	r0, #0
   1c800:	ldr	r3, [sp, #32]
   1c804:	ldr	r2, [sp, #36]	; 0x24
   1c808:	beq	1c9f4 <__assert_fail@plt+0xb50c>
   1c80c:	cmn	r6, #1
   1c810:	beq	1c9f0 <__assert_fail@plt+0xb508>
   1c814:	mov	r1, r6
   1c818:	add	r0, sp, #108	; 0x6c
   1c81c:	bl	14840 <__assert_fail@plt+0x3358>
   1c820:	cmp	r0, #0
   1c824:	bne	1cbc4 <__assert_fail@plt+0xb6dc>
   1c828:	cmp	r4, #0
   1c82c:	beq	1c900 <__assert_fail@plt+0xb418>
   1c830:	ldr	sl, [r4]
   1c834:	ldr	r3, [sp, #104]	; 0x68
   1c838:	ldr	r2, [r4, #4]
   1c83c:	str	r3, [sp, #20]
   1c840:	add	r3, sl, #1
   1c844:	cmp	r3, r2
   1c848:	str	r3, [r4]
   1c84c:	bne	1c878 <__assert_fail@plt+0xb390>
   1c850:	mov	r1, #48	; 0x30
   1c854:	ldr	r0, [r4, #8]
   1c858:	mul	r1, r1, r3
   1c85c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1c860:	cmp	r0, #0
   1c864:	beq	1c9e4 <__assert_fail@plt+0xb4fc>
   1c868:	ldr	r3, [r4, #4]
   1c86c:	str	r0, [r4, #8]
   1c870:	lsl	r3, r3, #1
   1c874:	str	r3, [r4, #4]
   1c878:	mov	r0, #24
   1c87c:	ldr	r2, [r4, #8]
   1c880:	mul	sl, r0, sl
   1c884:	ldr	r1, [sp, #20]
   1c888:	ldr	r0, [sp, #24]
   1c88c:	add	r3, r2, sl
   1c890:	str	r1, [r2, sl]
   1c894:	str	r9, [r3, #4]
   1c898:	str	r3, [sp, #20]
   1c89c:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1c8a0:	ldr	r3, [sp, #20]
   1c8a4:	str	r0, [r3, #8]
   1c8a8:	ldr	r3, [r4, #8]
   1c8ac:	add	r3, r3, sl
   1c8b0:	ldr	r0, [r3, #8]
   1c8b4:	cmp	r0, #0
   1c8b8:	beq	1c9e4 <__assert_fail@plt+0xb4fc>
   1c8bc:	mov	r2, r8
   1c8c0:	mov	r1, r5
   1c8c4:	bl	11218 <memcpy@plt>
   1c8c8:	ldr	r3, [r4, #8]
   1c8cc:	mov	r2, r8
   1c8d0:	mov	r1, r7
   1c8d4:	add	r3, r3, sl
   1c8d8:	ldr	r0, [r3, #8]
   1c8dc:	add	r0, r0, r8
   1c8e0:	bl	11218 <memcpy@plt>
   1c8e4:	ldr	r0, [r4, #8]
   1c8e8:	add	r1, sp, #108	; 0x6c
   1c8ec:	add	r0, r0, sl
   1c8f0:	add	r0, r0, #12
   1c8f4:	bl	17024 <__assert_fail@plt+0x5b3c>
   1c8f8:	cmp	r0, #0
   1c8fc:	bne	1c9e4 <__assert_fail@plt+0xb4fc>
   1c900:	cmp	r6, #0
   1c904:	bge	1c6a8 <__assert_fail@plt+0xb1c0>
   1c908:	cmn	r6, #2
   1c90c:	bne	1ca44 <__assert_fail@plt+0xb55c>
   1c910:	b	1c9e4 <__assert_fail@plt+0xb4fc>
   1c914:	cmp	ip, #9
   1c918:	bne	1c6f8 <__assert_fail@plt+0xb210>
   1c91c:	ldr	r3, [r3, r0]
   1c920:	ldr	r0, [sp, #8]
   1c924:	add	r3, r3, #1
   1c928:	cmp	r0, r3
   1c92c:	ble	1c6f8 <__assert_fail@plt+0xb210>
   1c930:	ldr	ip, [r5, r3, lsl #3]
   1c934:	add	r0, r5, r3, lsl #3
   1c938:	cmp	r2, ip
   1c93c:	ble	1c958 <__assert_fail@plt+0xb470>
   1c940:	mov	r1, r5
   1c944:	str	r2, [r0, #4]
   1c948:	mov	r2, r8
   1c94c:	mov	r0, r7
   1c950:	bl	11218 <memcpy@plt>
   1c954:	b	1c6f8 <__assert_fail@plt+0xb210>
   1c958:	ldrb	r1, [r1, #6]
   1c95c:	tst	r1, #8
   1c960:	beq	1c980 <__assert_fail@plt+0xb498>
   1c964:	ldr	r3, [r7, r3, lsl #3]
   1c968:	cmn	r3, #1
   1c96c:	beq	1c980 <__assert_fail@plt+0xb498>
   1c970:	mov	r2, r8
   1c974:	mov	r1, r7
   1c978:	mov	r0, r5
   1c97c:	b	1c950 <__assert_fail@plt+0xb468>
   1c980:	str	r2, [r0, #4]
   1c984:	b	1c6f8 <__assert_fail@plt+0xb210>
   1c988:	cmp	r4, #0
   1c98c:	bne	1c730 <__assert_fail@plt+0xb248>
   1c990:	ldr	r0, [sp, #116]	; 0x74
   1c994:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c998:	add	r0, sp, #268	; 0x10c
   1c99c:	bl	15d44 <__assert_fail@plt+0x485c>
   1c9a0:	mov	r0, r4
   1c9a4:	bl	17aec <__assert_fail@plt+0x6604>
   1c9a8:	cmp	r0, #0
   1c9ac:	beq	1cbcc <__assert_fail@plt+0xb6e4>
   1c9b0:	str	r0, [sp, #12]
   1c9b4:	b	1bb64 <__assert_fail@plt+0xa67c>
   1c9b8:	beq	feac7468 <opterr@@GLIBC_2.4+0xfea952c0>
   1c9bc:	andeq	pc, r3, r0, lsl #30
   1c9c0:	ldr	r2, [sp, #8]
   1c9c4:	add	r3, r3, #1
   1c9c8:	cmp	r2, r3
   1c9cc:	bne	1c734 <__assert_fail@plt+0xb24c>
   1c9d0:	b	1c990 <__assert_fail@plt+0xb4a8>
   1c9d4:	add	r0, sp, #108	; 0x6c
   1c9d8:	bl	17b44 <__assert_fail@plt+0x665c>
   1c9dc:	cmp	r0, #0
   1c9e0:	bne	1c7cc <__assert_fail@plt+0xb2e4>
   1c9e4:	ldr	r0, [sp, #116]	; 0x74
   1c9e8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1c9ec:	b	1c65c <__assert_fail@plt+0xb174>
   1c9f0:	mov	r6, r9
   1c9f4:	add	r3, r3, #1
   1c9f8:	b	1c7d8 <__assert_fail@plt+0xb2f0>
   1c9fc:	ldrb	r1, [r1, #6]
   1ca00:	tst	r1, #16
   1ca04:	beq	1ca88 <__assert_fail@plt+0xb5a0>
   1ca08:	add	r2, sp, #132	; 0x84
   1ca0c:	mov	r0, r9
   1ca10:	ldr	r1, [sp, #20]
   1ca14:	ldr	r3, [sp, #104]	; 0x68
   1ca18:	bl	169ec <__assert_fail@plt+0x5504>
   1ca1c:	subs	r3, r0, #0
   1ca20:	bne	1cb0c <__assert_fail@plt+0xb624>
   1ca24:	ldr	r1, [r9]
   1ca28:	add	r0, sp, #132	; 0x84
   1ca2c:	ldr	r2, [sp, #104]	; 0x68
   1ca30:	add	r1, r1, sl
   1ca34:	bl	18348 <__assert_fail@plt+0x6e60>
   1ca38:	cmp	r0, #0
   1ca3c:	movne	r3, #0
   1ca40:	bne	1cb0c <__assert_fail@plt+0xb624>
   1ca44:	add	r3, sp, #108	; 0x6c
   1ca48:	add	r1, sp, #104	; 0x68
   1ca4c:	str	r7, [sp]
   1ca50:	mov	r0, r4
   1ca54:	ldr	r2, [sp, #8]
   1ca58:	str	r3, [sp, #4]
   1ca5c:	mov	r3, r5
   1ca60:	bl	16028 <__assert_fail@plt+0x4b40>
   1ca64:	subs	r6, r0, #0
   1ca68:	bge	1c6a8 <__assert_fail@plt+0xb1c0>
   1ca6c:	ldr	r0, [sp, #116]	; 0x74
   1ca70:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1ca74:	add	r0, sp, #268	; 0x10c
   1ca78:	bl	15d44 <__assert_fail@plt+0x485c>
   1ca7c:	mov	r0, r4
   1ca80:	bl	17aec <__assert_fail@plt+0x6604>
   1ca84:	b	1bb5c <__assert_fail@plt+0xa674>
   1ca88:	cmp	r2, #4
   1ca8c:	bne	1ca24 <__assert_fail@plt+0xb53c>
   1ca90:	ldr	r3, [r3, sl]
   1ca94:	ldr	r2, [sp, #8]
   1ca98:	add	r3, r3, #1
   1ca9c:	cmp	r2, r3
   1caa0:	ble	1cce0 <__assert_fail@plt+0xb7f8>
   1caa4:	add	r2, r5, r3, lsl #3
   1caa8:	ldr	r0, [r5, r3, lsl #3]
   1caac:	cmp	r4, #0
   1cab0:	ldr	r2, [r2, #4]
   1cab4:	sub	r3, r2, r0
   1cab8:	beq	1cb70 <__assert_fail@plt+0xb688>
   1cabc:	cmn	r0, #1
   1cac0:	beq	1ca44 <__assert_fail@plt+0xb55c>
   1cac4:	cmn	r2, #1
   1cac8:	beq	1ca44 <__assert_fail@plt+0xb55c>
   1cacc:	cmp	r3, #0
   1cad0:	beq	1cb78 <__assert_fail@plt+0xb690>
   1cad4:	ldr	r1, [sp, #104]	; 0x68
   1cad8:	ldr	ip, [sp, #136]	; 0x88
   1cadc:	ldr	r2, [sp, #160]	; 0xa0
   1cae0:	sub	r2, r2, r1
   1cae4:	cmp	r3, r2
   1cae8:	bgt	1ca44 <__assert_fail@plt+0xb55c>
   1caec:	mov	r2, r3
   1caf0:	add	r1, ip, r1
   1caf4:	str	r3, [sp, #32]
   1caf8:	add	r0, ip, r0
   1cafc:	bl	11260 <memcmp@plt>
   1cb00:	cmp	r0, #0
   1cb04:	ldr	r3, [sp, #32]
   1cb08:	bne	1ca44 <__assert_fail@plt+0xb55c>
   1cb0c:	ldr	r2, [r9, #12]
   1cb10:	cmp	r3, #0
   1cb14:	ldr	r1, [sp, #20]
   1cb18:	ldr	r6, [r2, r1, lsl #2]
   1cb1c:	ldr	r2, [sp, #104]	; 0x68
   1cb20:	addeq	r3, r2, #1
   1cb24:	addne	r3, r2, r3
   1cb28:	cmp	r4, #0
   1cb2c:	str	r3, [sp, #104]	; 0x68
   1cb30:	beq	1cb64 <__assert_fail@plt+0xb67c>
   1cb34:	ldr	r2, [sp, #224]	; 0xe0
   1cb38:	cmp	r3, r2
   1cb3c:	bgt	1ca44 <__assert_fail@plt+0xb55c>
   1cb40:	ldr	r2, [sp, #232]	; 0xe8
   1cb44:	ldr	r0, [r2, r3, lsl #2]
   1cb48:	cmp	r0, #0
   1cb4c:	beq	1ca44 <__assert_fail@plt+0xb55c>
   1cb50:	mov	r1, r6
   1cb54:	add	r0, r0, #4
   1cb58:	bl	14840 <__assert_fail@plt+0x3358>
   1cb5c:	cmp	r0, #0
   1cb60:	beq	1ca44 <__assert_fail@plt+0xb55c>
   1cb64:	mov	r3, #0
   1cb68:	str	r3, [sp, #112]	; 0x70
   1cb6c:	b	1c900 <__assert_fail@plt+0xb418>
   1cb70:	cmp	r3, #0
   1cb74:	bne	1cb0c <__assert_fail@plt+0xb624>
   1cb78:	mov	r1, r6
   1cb7c:	add	r0, sp, #108	; 0x6c
   1cb80:	bl	17b44 <__assert_fail@plt+0x665c>
   1cb84:	cmp	r0, #0
   1cb88:	beq	1c9e4 <__assert_fail@plt+0xb4fc>
   1cb8c:	ldr	r2, [r9, #20]
   1cb90:	mov	r3, #12
   1cb94:	mla	r6, r3, r6, r2
   1cb98:	ldr	r2, [sp, #104]	; 0x68
   1cb9c:	ldr	r3, [r6, #8]
   1cba0:	ldr	r6, [r3]
   1cba4:	ldr	r3, [sp, #232]	; 0xe8
   1cba8:	mov	r1, r6
   1cbac:	ldr	r0, [r3, r2, lsl #2]
   1cbb0:	add	r0, r0, #4
   1cbb4:	bl	14840 <__assert_fail@plt+0x3358>
   1cbb8:	cmp	r0, #0
   1cbbc:	beq	1ca24 <__assert_fail@plt+0xb53c>
   1cbc0:	b	1c900 <__assert_fail@plt+0xb418>
   1cbc4:	mov	r6, r9
   1cbc8:	b	1c900 <__assert_fail@plt+0xb418>
   1cbcc:	ldrb	r6, [sp, #208]	; 0xd0
   1cbd0:	mov	r2, r5
   1cbd4:	mov	r3, #0
   1cbd8:	ldr	r0, [sp, #100]	; 0x64
   1cbdc:	ldr	lr, [sp, #144]	; 0x90
   1cbe0:	ldr	r4, [sp, #160]	; 0xa0
   1cbe4:	ldr	ip, [sp, #164]	; 0xa4
   1cbe8:	ldr	r1, [r5, r3, lsl #3]
   1cbec:	cmn	r1, #1
   1cbf0:	beq	1cc38 <__assert_fail@plt+0xb750>
   1cbf4:	cmp	r6, #0
   1cbf8:	beq	1cc20 <__assert_fail@plt+0xb738>
   1cbfc:	cmp	r1, r4
   1cc00:	ldrne	r1, [lr, r1, lsl #2]
   1cc04:	moveq	r1, ip
   1cc08:	str	r1, [r5, r3, lsl #3]
   1cc0c:	ldr	r1, [r2, #4]
   1cc10:	cmp	r4, r1
   1cc14:	ldrne	r1, [lr, r1, lsl #2]
   1cc18:	moveq	r1, ip
   1cc1c:	str	r1, [r2, #4]
   1cc20:	ldr	r1, [r5, r3, lsl #3]
   1cc24:	add	r1, r1, r0
   1cc28:	str	r1, [r5, r3, lsl #3]
   1cc2c:	ldr	r1, [r2, #4]
   1cc30:	add	r1, r1, r0
   1cc34:	str	r1, [r2, #4]
   1cc38:	ldr	r1, [sp, #8]
   1cc3c:	add	r3, r3, #1
   1cc40:	add	r2, r2, #8
   1cc44:	cmp	r3, r1
   1cc48:	bne	1cbe8 <__assert_fail@plt+0xb700>
   1cc4c:	ldr	r3, [sp, #8]
   1cc50:	mov	r2, #0
   1cc54:	mvn	r1, #0
   1cc58:	add	r3, r5, r3, lsl #3
   1cc5c:	ldr	r0, [sp, #56]	; 0x38
   1cc60:	add	r3, r3, #8
   1cc64:	cmp	r2, r0
   1cc68:	blt	1ccc4 <__assert_fail@plt+0xb7dc>
   1cc6c:	ldr	r3, [fp, #132]	; 0x84
   1cc70:	cmp	r3, #0
   1cc74:	movne	r0, #0
   1cc78:	addne	ip, r5, #4
   1cc7c:	beq	1bb64 <__assert_fail@plt+0xa67c>
   1cc80:	ldr	r1, [sp, #8]
   1cc84:	add	r2, r0, #1
   1cc88:	cmp	r2, r1
   1cc8c:	beq	1bb64 <__assert_fail@plt+0xa67c>
   1cc90:	ldr	r1, [r3]
   1cc94:	cmp	r1, r0
   1cc98:	beq	1ccb8 <__assert_fail@plt+0xb7d0>
   1cc9c:	add	r1, r1, #1
   1cca0:	ldr	r1, [r5, r1, lsl #3]
   1cca4:	str	r1, [r5, r2, lsl #3]
   1cca8:	ldr	r1, [r3]
   1ccac:	add	r1, r5, r1, lsl #3
   1ccb0:	ldr	r1, [r1, #12]
   1ccb4:	str	r1, [ip, r2, lsl #3]
   1ccb8:	add	r3, r3, #4
   1ccbc:	mov	r0, r2
   1ccc0:	b	1cc80 <__assert_fail@plt+0xb798>
   1ccc4:	add	r2, r2, #1
   1ccc8:	str	r1, [r3, #-8]
   1cccc:	str	r1, [r3, #-4]
   1ccd0:	b	1cc5c <__assert_fail@plt+0xb774>
   1ccd4:	mov	r3, #1
   1ccd8:	str	r3, [sp, #12]
   1ccdc:	b	1bb98 <__assert_fail@plt+0xa6b0>
   1cce0:	cmp	r4, #0
   1cce4:	beq	1cb78 <__assert_fail@plt+0xb690>
   1cce8:	b	1ca44 <__assert_fail@plt+0xb55c>
   1ccec:	ldr	r3, [sp, #8]
   1ccf0:	cmp	r3, #0
   1ccf4:	movne	r3, #1
   1ccf8:	addne	r1, r5, #4
   1ccfc:	mvnne	r2, #0
   1cd00:	bne	1c54c <__assert_fail@plt+0xb064>
   1cd04:	b	1bb64 <__assert_fail@plt+0xa67c>
   1cd08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd0c:	sub	sp, sp, #148	; 0x94
   1cd10:	mov	fp, r0
   1cd14:	mov	r6, r1
   1cd18:	mov	r5, r2
   1cd1c:	and	r7, r3, #16777216	; 0x1000000
   1cd20:	and	r8, r3, #32
   1cd24:	ldr	sl, [sp, #188]	; 0xbc
   1cd28:	and	r9, r3, #16
   1cd2c:	str	r3, [sp, #8]
   1cd30:	ldrb	r3, [r5, #4]
   1cd34:	ldr	r4, [r6]
   1cd38:	sub	r2, r3, #1
   1cd3c:	cmp	r2, #35	; 0x23
   1cd40:	ldrls	pc, [pc, r2, lsl #2]
   1cd44:	b	1d9e0 <__assert_fail@plt+0xc4f8>
   1cd48:	ldrdeq	ip, [r1], -r8
   1cd4c:	andeq	sp, r1, r4
   1cd50:	andeq	sp, r1, r0, ror #19
   1cd54:			; <UNDEFINED> instruction: 0x0001d6b8
   1cd58:	andeq	sp, r1, r4, asr r9
   1cd5c:	andeq	sp, r1, r0, ror #19
   1cd60:	andeq	sp, r1, r0, ror #19
   1cd64:	andeq	ip, r1, r4, lsr #30
   1cd68:	andeq	sp, r1, r4, asr r7
   1cd6c:	andeq	sp, r1, r4
   1cd70:	andeq	sp, r1, r8, lsr #14
   1cd74:	muleq	r1, ip, r7
   1cd78:	andeq	sp, r1, r0, ror #19
   1cd7c:	andeq	sp, r1, r0, ror #19
   1cd80:	andeq	sp, r1, r0, ror #19
   1cd84:	andeq	sp, r1, r0, ror #19
   1cd88:	andeq	sp, r1, r0, ror #19
   1cd8c:	andeq	sp, r1, r8, lsr #14
   1cd90:	andeq	sp, r1, r8, lsr #14
   1cd94:	andeq	sp, r1, ip
   1cd98:	andeq	sp, r1, r0, ror #19
   1cd9c:	andeq	sp, r1, r0, ror #19
   1cda0:	andeq	sp, r1, r8, lsl r7
   1cda4:	andeq	sp, r1, r4, ror r7
   1cda8:	andeq	sp, r1, r0, ror #19
   1cdac:	andeq	sp, r1, r0, ror #19
   1cdb0:	andeq	sp, r1, r0, ror #19
   1cdb4:	andeq	sp, r1, r0, ror #19
   1cdb8:	andeq	sp, r1, r0, ror #19
   1cdbc:	andeq	sp, r1, r0, ror #19
   1cdc0:	andeq	sp, r1, r0, ror #19
   1cdc4:	andeq	sp, r1, r0, lsl #19
   1cdc8:	andeq	sp, r1, r0, lsl #19
   1cdcc:	andeq	sp, r1, r4, asr #19
   1cdd0:	andeq	sp, r1, r4, asr #19
   1cdd4:	andeq	sp, r1, r0, ror #19
   1cdd8:	mov	r2, #0
   1cddc:	mov	r3, r5
   1cde0:	mov	r1, r2
   1cde4:	mov	r0, r4
   1cde8:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1cdec:	subs	r6, r0, #0
   1cdf0:	bne	1ce00 <__assert_fail@plt+0xb918>
   1cdf4:	mov	r3, #12
   1cdf8:	str	r3, [sl]
   1cdfc:	b	1d004 <__assert_fail@plt+0xbb1c>
   1ce00:	ldr	r3, [r4, #92]	; 0x5c
   1ce04:	cmp	r3, #1
   1ce08:	bgt	1cef4 <__assert_fail@plt+0xba0c>
   1ce0c:	mov	r1, fp
   1ce10:	mov	r0, r5
   1ce14:	ldr	r2, [sp, #8]
   1ce18:	bl	19150 <__assert_fail@plt+0x7c68>
   1ce1c:	ldrb	r3, [r5, #4]
   1ce20:	cmp	r3, #23
   1ce24:	bhi	1d768 <__assert_fail@plt+0xc280>
   1ce28:	ldr	r2, [pc, #3904]	; 1dd70 <__assert_fail@plt+0xc888>
   1ce2c:	sub	r9, r3, #18
   1ce30:	clz	r9, r9
   1ce34:	lsr	r9, r9, #5
   1ce38:	mvn	r8, r2, lsr r3
   1ce3c:	ands	r8, r8, #1
   1ce40:	bne	1d768 <__assert_fail@plt+0xc280>
   1ce44:	ldr	r2, [fp, #40]	; 0x28
   1ce48:	cmp	r3, #23
   1ce4c:	ldm	r5, {r0, r1}
   1ce50:	str	r2, [sp, #12]
   1ce54:	add	r2, sp, #112	; 0x70
   1ce58:	stm	r2, {r0, r1}
   1ce5c:	bne	1db34 <__assert_fail@plt+0xc64c>
   1ce60:	mov	r1, r5
   1ce64:	mov	r0, fp
   1ce68:	ldr	r2, [sp, #8]
   1ce6c:	bl	1916c <__assert_fail@plt+0x7c84>
   1ce70:	cmn	r0, #1
   1ce74:	mov	r9, r0
   1ce78:	bne	1d9e8 <__assert_fail@plt+0xc500>
   1ce7c:	ldrb	r3, [r5, #4]
   1ce80:	cmp	r3, #1
   1ce84:	bne	1ce98 <__assert_fail@plt+0xb9b0>
   1ce88:	ldrb	r3, [r5]
   1ce8c:	cmp	r3, #44	; 0x2c
   1ce90:	moveq	r9, r8
   1ce94:	beq	1da54 <__assert_fail@plt+0xc56c>
   1ce98:	mov	r3, #10
   1ce9c:	mov	r7, #0
   1cea0:	str	r3, [sl]
   1cea4:	b	1da1c <__assert_fail@plt+0xc534>
   1cea8:	mov	r1, fp
   1ceac:	mov	r0, r5
   1ceb0:	ldr	r2, [sp, #8]
   1ceb4:	bl	19150 <__assert_fail@plt+0x7c68>
   1ceb8:	mov	r2, #0
   1cebc:	mov	r3, r5
   1cec0:	mov	r1, r2
   1cec4:	mov	r0, r4
   1cec8:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1cecc:	mov	r7, r0
   1ced0:	mov	r2, r0
   1ced4:	mov	r1, r6
   1ced8:	mov	r3, #16
   1cedc:	mov	r0, r4
   1cee0:	bl	15028 <__assert_fail@plt+0x3b40>
   1cee4:	cmp	r0, #0
   1cee8:	cmpne	r7, #0
   1ceec:	mov	r6, r0
   1cef0:	beq	1cdf4 <__assert_fail@plt+0xb90c>
   1cef4:	ldr	r3, [fp, #40]	; 0x28
   1cef8:	ldr	r2, [fp, #56]	; 0x38
   1cefc:	cmp	r2, r3
   1cf00:	ble	1ce0c <__assert_fail@plt+0xb924>
   1cf04:	ldr	r2, [fp, #28]
   1cf08:	cmp	r3, r2
   1cf0c:	beq	1ce0c <__assert_fail@plt+0xb924>
   1cf10:	ldr	r2, [fp, #8]
   1cf14:	ldr	r3, [r2, r3, lsl #2]
   1cf18:	cmn	r3, #1
   1cf1c:	beq	1cea8 <__assert_fail@plt+0xb9c0>
   1cf20:	b	1ce0c <__assert_fail@plt+0xb924>
   1cf24:	ldr	r7, [r6, #24]
   1cf28:	mov	r1, fp
   1cf2c:	mov	r0, r5
   1cf30:	add	r3, r7, #1
   1cf34:	str	r3, [r6, #24]
   1cf38:	ldr	r3, [sp, #8]
   1cf3c:	orr	r2, r3, #8388608	; 0x800000
   1cf40:	bl	19150 <__assert_fail@plt+0x7c68>
   1cf44:	ldrb	r3, [r5, #4]
   1cf48:	cmp	r3, #9
   1cf4c:	moveq	r1, #0
   1cf50:	beq	1cfb0 <__assert_fail@plt+0xbac8>
   1cf54:	ldr	r3, [sp, #184]	; 0xb8
   1cf58:	mov	r2, r5
   1cf5c:	mov	r1, r6
   1cf60:	mov	r0, fp
   1cf64:	add	r3, r3, #1
   1cf68:	stm	sp, {r3, sl}
   1cf6c:	ldr	r3, [sp, #8]
   1cf70:	bl	1dee0 <__assert_fail@plt+0xc9f8>
   1cf74:	ldr	r2, [sl]
   1cf78:	mov	r1, r0
   1cf7c:	cmp	r2, #0
   1cf80:	bne	1cfa8 <__assert_fail@plt+0xbac0>
   1cf84:	ldrb	r3, [r5, #4]
   1cf88:	cmp	r3, #9
   1cf8c:	beq	1cfb0 <__assert_fail@plt+0xbac8>
   1cf90:	cmp	r0, #0
   1cf94:	beq	1cfa0 <__assert_fail@plt+0xbab8>
   1cf98:	ldr	r1, [pc, #3540]	; 1dd74 <__assert_fail@plt+0xc88c>
   1cf9c:	bl	148b4 <__assert_fail@plt+0x33cc>
   1cfa0:	mov	r3, #8
   1cfa4:	str	r3, [sl]
   1cfa8:	mov	r6, #0
   1cfac:	b	1cfe8 <__assert_fail@plt+0xbb00>
   1cfb0:	cmp	r7, #8
   1cfb4:	mov	r0, r4
   1cfb8:	ldrls	r3, [r4, #84]	; 0x54
   1cfbc:	movls	r2, #1
   1cfc0:	orrls	r3, r3, r2, lsl r7
   1cfc4:	mov	r2, #0
   1cfc8:	strls	r3, [r4, #84]	; 0x54
   1cfcc:	mov	r3, #17
   1cfd0:	bl	15028 <__assert_fail@plt+0x3b40>
   1cfd4:	subs	r6, r0, #0
   1cfd8:	strne	r7, [r6, #20]
   1cfdc:	bne	1cfe8 <__assert_fail@plt+0xbb00>
   1cfe0:	mov	r3, #12
   1cfe4:	str	r3, [sl]
   1cfe8:	ldr	r2, [sl]
   1cfec:	clz	r3, r6
   1cff0:	lsr	r3, r3, #5
   1cff4:	cmp	r2, #0
   1cff8:	moveq	r3, #0
   1cffc:	cmp	r3, #0
   1d000:	beq	1ce0c <__assert_fail@plt+0xb924>
   1d004:	mov	r6, #0
   1d008:	b	1d768 <__assert_fail@plt+0xc280>
   1d00c:	mov	r6, #0
   1d010:	mov	r1, #1
   1d014:	mov	r0, #32
   1d018:	str	r6, [sp, #52]	; 0x34
   1d01c:	bl	1ff70 <__assert_fail@plt+0xea88>
   1d020:	mov	r1, #1
   1d024:	str	r0, [sp, #12]
   1d028:	mov	r0, #40	; 0x28
   1d02c:	bl	1ff70 <__assert_fail@plt+0xea88>
   1d030:	ldr	r3, [sp, #12]
   1d034:	mov	r7, r0
   1d038:	clz	r0, r0
   1d03c:	lsr	r0, r0, #5
   1d040:	cmp	r3, r6
   1d044:	movne	r8, r0
   1d048:	moveq	r8, #1
   1d04c:	cmp	r8, r6
   1d050:	beq	1d068 <__assert_fail@plt+0xbb80>
   1d054:	mov	r0, r3
   1d058:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1d05c:	mov	r0, r7
   1d060:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1d064:	b	1cfe0 <__assert_fail@plt+0xbaf8>
   1d068:	mov	r1, fp
   1d06c:	mov	r0, r5
   1d070:	ldr	r2, [sp, #8]
   1d074:	bl	1492c <__assert_fail@plt+0x3444>
   1d078:	ldrb	r3, [r5, #4]
   1d07c:	str	r0, [sp, #20]
   1d080:	cmp	r3, #2
   1d084:	bne	1d094 <__assert_fail@plt+0xbbac>
   1d088:	mov	r3, #2
   1d08c:	str	r3, [sl]
   1d090:	b	1d164 <__assert_fail@plt+0xbc7c>
   1d094:	cmp	r3, #25
   1d098:	strne	r8, [sp, #32]
   1d09c:	bne	1d0fc <__assert_fail@plt+0xbc14>
   1d0a0:	ldrb	r3, [r7, #16]
   1d0a4:	orr	r3, r3, #1
   1d0a8:	strb	r3, [r7, #16]
   1d0ac:	ldr	r3, [sp, #8]
   1d0b0:	tst	r3, #256	; 0x100
   1d0b4:	beq	1d0c4 <__assert_fail@plt+0xbbdc>
   1d0b8:	mov	r1, #10
   1d0bc:	ldr	r0, [sp, #12]
   1d0c0:	bl	146a0 <__assert_fail@plt+0x31b8>
   1d0c4:	ldr	r2, [sp, #20]
   1d0c8:	mov	r1, fp
   1d0cc:	mov	r0, r5
   1d0d0:	ldr	r3, [fp, #40]	; 0x28
   1d0d4:	add	r3, r3, r2
   1d0d8:	ldr	r2, [sp, #8]
   1d0dc:	str	r3, [fp, #40]	; 0x28
   1d0e0:	bl	1492c <__assert_fail@plt+0x3444>
   1d0e4:	ldrb	r3, [r5, #4]
   1d0e8:	str	r0, [sp, #20]
   1d0ec:	cmp	r3, #2
   1d0f0:	movne	r3, #1
   1d0f4:	strne	r3, [sp, #32]
   1d0f8:	beq	1d088 <__assert_fail@plt+0xbba0>
   1d0fc:	ldrb	r3, [r5, #4]
   1d100:	mov	r2, #0
   1d104:	cmp	r3, #21
   1d108:	moveq	r3, #1
   1d10c:	strbeq	r3, [r5, #4]
   1d110:	mov	r3, #0
   1d114:	strd	r2, [sp, #24]
   1d118:	mov	r3, #1
   1d11c:	ldr	r2, [sp, #8]
   1d120:	ubfx	r2, r2, #16, #1
   1d124:	str	r2, [sp, #36]	; 0x24
   1d128:	str	r3, [sp, #4]
   1d12c:	add	r2, sp, #80	; 0x50
   1d130:	mov	r6, #3
   1d134:	ldr	r3, [sp, #8]
   1d138:	mov	r1, fp
   1d13c:	add	r0, sp, #56	; 0x38
   1d140:	str	r2, [sp, #60]	; 0x3c
   1d144:	mov	r2, r5
   1d148:	str	r3, [sp]
   1d14c:	ldr	r3, [sp, #20]
   1d150:	str	r6, [sp, #56]	; 0x38
   1d154:	bl	19214 <__assert_fail@plt+0x7d2c>
   1d158:	cmp	r0, #0
   1d15c:	beq	1d178 <__assert_fail@plt+0xbc90>
   1d160:	str	r0, [sl]
   1d164:	ldr	r0, [sp, #12]
   1d168:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1d16c:	mov	r0, r7
   1d170:	bl	15998 <__assert_fail@plt+0x44b0>
   1d174:	b	1cfa8 <__assert_fail@plt+0xbac0>
   1d178:	mov	r1, fp
   1d17c:	mov	r0, r5
   1d180:	ldr	r2, [sp, #8]
   1d184:	bl	1492c <__assert_fail@plt+0x3444>
   1d188:	ldr	r3, [sp, #56]	; 0x38
   1d18c:	str	r0, [sp, #20]
   1d190:	sub	r3, r3, #2
   1d194:	bics	r3, r3, #2
   1d198:	beq	1d248 <__assert_fail@plt+0xbd60>
   1d19c:	ldrb	r3, [r5, #4]
   1d1a0:	cmp	r3, #2
   1d1a4:	bne	1d1b0 <__assert_fail@plt+0xbcc8>
   1d1a8:	mov	r3, #7
   1d1ac:	b	1d08c <__assert_fail@plt+0xbba4>
   1d1b0:	cmp	r3, #22
   1d1b4:	bne	1d248 <__assert_fail@plt+0xbd60>
   1d1b8:	ldr	r2, [sp, #20]
   1d1bc:	mov	r1, fp
   1d1c0:	add	r0, sp, #72	; 0x48
   1d1c4:	ldr	r3, [fp, #40]	; 0x28
   1d1c8:	add	r3, r3, r2
   1d1cc:	ldr	r2, [sp, #8]
   1d1d0:	str	r3, [fp, #40]	; 0x28
   1d1d4:	bl	1492c <__assert_fail@plt+0x3444>
   1d1d8:	ldrb	r2, [sp, #76]	; 0x4c
   1d1dc:	mov	r3, r0
   1d1e0:	cmp	r2, #2
   1d1e4:	beq	1d1a8 <__assert_fail@plt+0xbcc0>
   1d1e8:	cmp	r2, #21
   1d1ec:	beq	1d230 <__assert_fail@plt+0xbd48>
   1d1f0:	add	r2, sp, #112	; 0x70
   1d1f4:	mov	r1, fp
   1d1f8:	str	r6, [sp, #64]	; 0x40
   1d1fc:	add	r0, sp, #64	; 0x40
   1d200:	str	r2, [sp, #68]	; 0x44
   1d204:	mov	r2, #1
   1d208:	str	r2, [sp, #4]
   1d20c:	ldr	r2, [sp, #8]
   1d210:	str	r2, [sp]
   1d214:	add	r2, sp, #72	; 0x48
   1d218:	bl	19214 <__assert_fail@plt+0x7d2c>
   1d21c:	subs	r3, r0, #0
   1d220:	str	r3, [sp, #16]
   1d224:	beq	1d26c <__assert_fail@plt+0xbd84>
   1d228:	ldr	r3, [sp, #16]
   1d22c:	b	1d08c <__assert_fail@plt+0xbba4>
   1d230:	ldr	r2, [sp, #20]
   1d234:	ldr	r3, [fp, #40]	; 0x28
   1d238:	sub	r3, r3, r2
   1d23c:	str	r3, [fp, #40]	; 0x28
   1d240:	mov	r3, #1
   1d244:	strb	r3, [r5, #4]
   1d248:	ldr	r3, [sp, #56]	; 0x38
   1d24c:	cmp	r3, #4
   1d250:	ldrls	pc, [pc, r3, lsl #2]
   1d254:	b	1d564 <__assert_fail@plt+0xc07c>
   1d258:			; <UNDEFINED> instruction: 0x0001d4bc
   1d25c:	andeq	sp, r1, r4, ror #9
   1d260:	andeq	sp, r1, r4, lsr r5
   1d264:	andeq	sp, r1, r4, lsr r5
   1d268:	andeq	sp, r1, r4, ror #10
   1d26c:	mov	r1, fp
   1d270:	mov	r0, r5
   1d274:	ldr	r2, [sp, #8]
   1d278:	bl	1492c <__assert_fail@plt+0x3444>
   1d27c:	ldr	r2, [sp, #56]	; 0x38
   1d280:	str	r0, [sp, #20]
   1d284:	sub	r3, r2, #2
   1d288:	bics	r3, r3, #2
   1d28c:	beq	1d4b4 <__assert_fail@plt+0xbfcc>
   1d290:	ldr	r8, [sp, #64]	; 0x40
   1d294:	sub	r3, r8, #2
   1d298:	bics	r3, r3, #2
   1d29c:	beq	1d4b4 <__assert_fail@plt+0xbfcc>
   1d2a0:	cmp	r2, #3
   1d2a4:	moveq	r9, #1
   1d2a8:	movne	r9, #0
   1d2ac:	bne	1d2d0 <__assert_fail@plt+0xbde8>
   1d2b0:	ldr	r0, [sp, #60]	; 0x3c
   1d2b4:	str	r2, [sp, #40]	; 0x28
   1d2b8:	bl	11398 <strlen@plt>
   1d2bc:	cmp	r0, #1
   1d2c0:	ldr	r2, [sp, #40]	; 0x28
   1d2c4:	bls	1dd48 <__assert_fail@plt+0xc860>
   1d2c8:	mov	r3, #3
   1d2cc:	b	1d40c <__assert_fail@plt+0xbf24>
   1d2d0:	cmp	r8, #3
   1d2d4:	bne	1dd54 <__assert_fail@plt+0xc86c>
   1d2d8:	ldr	r0, [sp, #68]	; 0x44
   1d2dc:	str	r2, [sp, #40]	; 0x28
   1d2e0:	bl	11398 <strlen@plt>
   1d2e4:	cmp	r0, #1
   1d2e8:	bhi	1d2c8 <__assert_fail@plt+0xbde0>
   1d2ec:	ldr	r2, [sp, #40]	; 0x28
   1d2f0:	cmp	r2, #0
   1d2f4:	bne	1d414 <__assert_fail@plt+0xbf2c>
   1d2f8:	ldrb	r6, [sp, #60]	; 0x3c
   1d2fc:	cmp	r8, #0
   1d300:	bne	1d438 <__assert_fail@plt+0xbf50>
   1d304:	ldrb	r8, [sp, #68]	; 0x44
   1d308:	cmp	r2, #0
   1d30c:	moveq	r9, #1
   1d310:	cmp	r9, #0
   1d314:	ldreq	r6, [sp, #60]	; 0x3c
   1d318:	beq	1d334 <__assert_fail@plt+0xbe4c>
   1d31c:	ldr	r3, [r4, #92]	; 0x5c
   1d320:	cmp	r3, #1
   1d324:	ble	1d334 <__assert_fail@plt+0xbe4c>
   1d328:	mov	r0, r6
   1d32c:	bl	113f8 <btowc@plt>
   1d330:	mov	r6, r0
   1d334:	ldr	r3, [sp, #64]	; 0x40
   1d338:	cmp	r3, #3
   1d33c:	cmpne	r3, #0
   1d340:	ldrne	r8, [sp, #68]	; 0x44
   1d344:	bne	1d360 <__assert_fail@plt+0xbe78>
   1d348:	ldr	r3, [r4, #92]	; 0x5c
   1d34c:	cmp	r3, #1
   1d350:	ble	1d360 <__assert_fail@plt+0xbe78>
   1d354:	mov	r0, r8
   1d358:	bl	113f8 <btowc@plt>
   1d35c:	mov	r8, r0
   1d360:	cmn	r6, #1
   1d364:	cmnne	r8, #1
   1d368:	beq	1d2c8 <__assert_fail@plt+0xbde0>
   1d36c:	ldr	r3, [sp, #36]	; 0x24
   1d370:	cmp	r6, r8
   1d374:	movls	r3, #0
   1d378:	andhi	r3, r3, #1
   1d37c:	cmp	r3, #0
   1d380:	bne	1d4b4 <__assert_fail@plt+0xbfcc>
   1d384:	ldr	r3, [r4, #92]	; 0x5c
   1d388:	cmp	r3, #1
   1d38c:	ble	1d468 <__assert_fail@plt+0xbf80>
   1d390:	ldr	r2, [sp, #28]
   1d394:	ldr	r3, [r7, #32]
   1d398:	cmp	r3, r2
   1d39c:	bne	1d448 <__assert_fail@plt+0xbf60>
   1d3a0:	lsl	r9, r2, #1
   1d3a4:	ldr	r0, [r7, #4]
   1d3a8:	add	r9, r9, #1
   1d3ac:	lsl	r3, r9, #2
   1d3b0:	mov	r1, r3
   1d3b4:	str	r3, [sp, #44]	; 0x2c
   1d3b8:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1d3bc:	ldr	r3, [sp, #44]	; 0x2c
   1d3c0:	mov	r2, r0
   1d3c4:	ldr	r0, [r7, #8]
   1d3c8:	str	r2, [sp, #40]	; 0x28
   1d3cc:	mov	r1, r3
   1d3d0:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1d3d4:	ldr	r2, [sp, #40]	; 0x28
   1d3d8:	mov	r3, r0
   1d3dc:	cmp	r0, #0
   1d3e0:	cmpne	r2, #0
   1d3e4:	strdne	r2, [r7, #4]
   1d3e8:	strne	r9, [sp, #28]
   1d3ec:	bne	1d448 <__assert_fail@plt+0xbf60>
   1d3f0:	mov	r0, r2
   1d3f4:	str	r3, [sp, #16]
   1d3f8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1d3fc:	ldr	r3, [sp, #16]
   1d400:	mov	r0, r3
   1d404:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1d408:	mov	r3, #12
   1d40c:	str	r3, [sp, #16]
   1d410:	b	1d4a0 <__assert_fail@plt+0xbfb8>
   1d414:	cmp	r2, #3
   1d418:	bne	1d428 <__assert_fail@plt+0xbf40>
   1d41c:	ldr	r3, [sp, #60]	; 0x3c
   1d420:	ldrb	r6, [r3]
   1d424:	b	1d2fc <__assert_fail@plt+0xbe14>
   1d428:	mov	r6, #0
   1d42c:	ldr	r3, [sp, #68]	; 0x44
   1d430:	ldrb	r8, [r3]
   1d434:	b	1d308 <__assert_fail@plt+0xbe20>
   1d438:	cmp	r8, #3
   1d43c:	beq	1d42c <__assert_fail@plt+0xbf44>
   1d440:	mov	r8, #0
   1d444:	b	1d308 <__assert_fail@plt+0xbe20>
   1d448:	ldr	r3, [r7, #4]
   1d44c:	ldr	r2, [r7, #32]
   1d450:	str	r6, [r3, r2, lsl #2]
   1d454:	ldr	r2, [r7, #8]
   1d458:	ldr	r3, [r7, #32]
   1d45c:	add	r1, r3, #1
   1d460:	str	r1, [r7, #32]
   1d464:	str	r8, [r2, r3, lsl #2]
   1d468:	mov	r9, #0
   1d46c:	cmp	r6, r9
   1d470:	movhi	r3, #0
   1d474:	movls	r3, #1
   1d478:	cmp	r8, r9
   1d47c:	movcc	r3, #0
   1d480:	cmp	r3, #0
   1d484:	beq	1d494 <__assert_fail@plt+0xbfac>
   1d488:	mov	r1, r9
   1d48c:	ldr	r0, [sp, #12]
   1d490:	bl	146a0 <__assert_fail@plt+0x31b8>
   1d494:	add	r9, r9, #1
   1d498:	cmp	r9, #256	; 0x100
   1d49c:	bne	1d46c <__assert_fail@plt+0xbf84>
   1d4a0:	ldr	r3, [sp, #16]
   1d4a4:	cmp	r3, #0
   1d4a8:	str	r3, [sl]
   1d4ac:	beq	1d4c8 <__assert_fail@plt+0xbfe0>
   1d4b0:	b	1d164 <__assert_fail@plt+0xbc7c>
   1d4b4:	mov	r3, #11
   1d4b8:	b	1d40c <__assert_fail@plt+0xbf24>
   1d4bc:	ldrb	r1, [sp, #60]	; 0x3c
   1d4c0:	ldr	r0, [sp, #12]
   1d4c4:	bl	146a0 <__assert_fail@plt+0x31b8>
   1d4c8:	ldrb	r3, [r5, #4]
   1d4cc:	cmp	r3, #2
   1d4d0:	beq	1d1a8 <__assert_fail@plt+0xbcc0>
   1d4d4:	cmp	r3, #21
   1d4d8:	beq	1d594 <__assert_fail@plt+0xc0ac>
   1d4dc:	mov	r3, #0
   1d4e0:	b	1d128 <__assert_fail@plt+0xbc40>
   1d4e4:	ldr	r3, [r7, #20]
   1d4e8:	ldr	r2, [sp, #24]
   1d4ec:	cmp	r3, r2
   1d4f0:	bne	1d518 <__assert_fail@plt+0xc030>
   1d4f4:	lsl	r3, r2, #1
   1d4f8:	ldr	r0, [r7]
   1d4fc:	add	r3, r3, #1
   1d500:	lsl	r1, r3, #2
   1d504:	str	r3, [sp, #24]
   1d508:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1d50c:	cmp	r0, #0
   1d510:	beq	1dd40 <__assert_fail@plt+0xc858>
   1d514:	str	r0, [r7]
   1d518:	ldr	r2, [r7]
   1d51c:	ldr	r3, [r7, #20]
   1d520:	add	r1, r3, #1
   1d524:	str	r1, [r7, #20]
   1d528:	ldr	r1, [sp, #60]	; 0x3c
   1d52c:	str	r1, [r2, r3, lsl #2]
   1d530:	b	1d4c8 <__assert_fail@plt+0xbfe0>
   1d534:	ldr	r6, [sp, #60]	; 0x3c
   1d538:	mov	r0, r6
   1d53c:	bl	11398 <strlen@plt>
   1d540:	cmp	r0, #1
   1d544:	movne	r3, #3
   1d548:	bne	1d08c <__assert_fail@plt+0xbba4>
   1d54c:	ldrb	r1, [r6]
   1d550:	ldr	r0, [sp, #12]
   1d554:	bl	146a0 <__assert_fail@plt+0x31b8>
   1d558:	mov	r3, #0
   1d55c:	str	r3, [sl]
   1d560:	b	1d4c8 <__assert_fail@plt+0xbfe0>
   1d564:	ldr	r3, [sp, #8]
   1d568:	mov	r2, r7
   1d56c:	ldr	r0, [fp, #64]	; 0x40
   1d570:	ldr	r1, [sp, #12]
   1d574:	str	r3, [sp, #4]
   1d578:	ldr	r3, [sp, #60]	; 0x3c
   1d57c:	str	r3, [sp]
   1d580:	add	r3, sp, #52	; 0x34
   1d584:	bl	160d0 <__assert_fail@plt+0x4be8>
   1d588:	cmp	r0, #0
   1d58c:	str	r0, [sl]
   1d590:	b	1d4ac <__assert_fail@plt+0xbfc4>
   1d594:	ldr	r2, [sp, #20]
   1d598:	ldr	r3, [fp, #40]	; 0x28
   1d59c:	add	r3, r3, r2
   1d5a0:	str	r3, [fp, #40]	; 0x28
   1d5a4:	ldr	r3, [sp, #32]
   1d5a8:	cmp	r3, #0
   1d5ac:	beq	1d5b8 <__assert_fail@plt+0xc0d0>
   1d5b0:	ldr	r0, [sp, #12]
   1d5b4:	bl	146ec <__assert_fail@plt+0x3204>
   1d5b8:	ldr	r3, [r4, #92]	; 0x5c
   1d5bc:	cmp	r3, #1
   1d5c0:	ble	1d5d0 <__assert_fail@plt+0xc0e8>
   1d5c4:	ldr	r0, [sp, #12]
   1d5c8:	ldr	r1, [r4, #60]	; 0x3c
   1d5cc:	bl	14734 <__assert_fail@plt+0x324c>
   1d5d0:	ldr	r3, [r7, #20]
   1d5d4:	cmp	r3, #0
   1d5d8:	bne	1d624 <__assert_fail@plt+0xc13c>
   1d5dc:	ldr	r3, [r7, #24]
   1d5e0:	cmp	r3, #0
   1d5e4:	bne	1d624 <__assert_fail@plt+0xc13c>
   1d5e8:	ldr	r3, [r7, #28]
   1d5ec:	cmp	r3, #0
   1d5f0:	bne	1d624 <__assert_fail@plt+0xc13c>
   1d5f4:	ldr	r3, [r7, #32]
   1d5f8:	cmp	r3, #0
   1d5fc:	bne	1d624 <__assert_fail@plt+0xc13c>
   1d600:	ldr	r3, [r4, #92]	; 0x5c
   1d604:	cmp	r3, #1
   1d608:	ble	1d688 <__assert_fail@plt+0xc1a0>
   1d60c:	ldr	r3, [r7, #36]	; 0x24
   1d610:	cmp	r3, #0
   1d614:	bne	1d624 <__assert_fail@plt+0xc13c>
   1d618:	ldrb	r3, [r7, #16]
   1d61c:	tst	r3, #1
   1d620:	beq	1d688 <__assert_fail@plt+0xc1a0>
   1d624:	ldrb	r3, [r4, #88]	; 0x58
   1d628:	mov	r2, #0
   1d62c:	mov	r0, r4
   1d630:	mov	r1, r2
   1d634:	orr	r3, r3, #2
   1d638:	strb	r3, [r4, #88]	; 0x58
   1d63c:	mov	r3, #6
   1d640:	str	r7, [sp, #112]	; 0x70
   1d644:	strb	r3, [sp, #116]	; 0x74
   1d648:	add	r3, sp, #112	; 0x70
   1d64c:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d650:	subs	r6, r0, #0
   1d654:	beq	1dd40 <__assert_fail@plt+0xc858>
   1d658:	ldr	r3, [sp, #12]
   1d65c:	ldr	r2, [sp, #12]
   1d660:	sub	r3, r3, #4
   1d664:	add	r2, r2, #28
   1d668:	ldr	r1, [r3, #4]!
   1d66c:	cmp	r1, #0
   1d670:	bne	1dcfc <__assert_fail@plt+0xc814>
   1d674:	cmp	r2, r3
   1d678:	bne	1d668 <__assert_fail@plt+0xc180>
   1d67c:	ldr	r0, [sp, #12]
   1d680:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1d684:	b	1cfe8 <__assert_fail@plt+0xbb00>
   1d688:	mov	r0, r7
   1d68c:	bl	15998 <__assert_fail@plt+0x44b0>
   1d690:	mov	r3, #3
   1d694:	mov	r2, #0
   1d698:	mov	r1, r2
   1d69c:	mov	r0, r4
   1d6a0:	strb	r3, [sp, #116]	; 0x74
   1d6a4:	ldr	r3, [sp, #12]
   1d6a8:	str	r3, [sp, #112]	; 0x70
   1d6ac:	add	r3, sp, #112	; 0x70
   1d6b0:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d6b4:	b	1dd38 <__assert_fail@plt+0xc850>
   1d6b8:	ldr	r2, [r5]
   1d6bc:	mov	r3, #1
   1d6c0:	ldr	r6, [r4, #84]	; 0x54
   1d6c4:	lsl	r3, r3, r2
   1d6c8:	ands	r6, r3, r6
   1d6cc:	moveq	r3, #6
   1d6d0:	beq	1d764 <__assert_fail@plt+0xc27c>
   1d6d4:	ldr	r2, [r4, #80]	; 0x50
   1d6d8:	mov	r0, r4
   1d6dc:	orr	r3, r2, r3
   1d6e0:	mov	r2, #0
   1d6e4:	mov	r1, r2
   1d6e8:	str	r3, [r4, #80]	; 0x50
   1d6ec:	mov	r3, r5
   1d6f0:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d6f4:	subs	r6, r0, #0
   1d6f8:	ldrne	r3, [r4, #76]	; 0x4c
   1d6fc:	addne	r3, r3, #1
   1d700:	strne	r3, [r4, #76]	; 0x4c
   1d704:	beq	1cdf4 <__assert_fail@plt+0xb90c>
   1d708:	ldrb	r3, [r4, #88]	; 0x58
   1d70c:	orr	r3, r3, #2
   1d710:	strb	r3, [r4, #88]	; 0x58
   1d714:	b	1ce0c <__assert_fail@plt+0xb924>
   1d718:	cmp	r7, #0
   1d71c:	beq	1d728 <__assert_fail@plt+0xc240>
   1d720:	mov	r3, #13
   1d724:	b	1cdf8 <__assert_fail@plt+0xb910>
   1d728:	cmp	r8, #0
   1d72c:	bne	1d720 <__assert_fail@plt+0xc238>
   1d730:	cmp	r9, #0
   1d734:	beq	1d74c <__assert_fail@plt+0xc264>
   1d738:	mov	r1, fp
   1d73c:	mov	r0, r5
   1d740:	ldr	r2, [sp, #8]
   1d744:	bl	19150 <__assert_fail@plt+0x7c68>
   1d748:	b	1cd30 <__assert_fail@plt+0xb848>
   1d74c:	cmp	r3, #9
   1d750:	bne	1d774 <__assert_fail@plt+0xc28c>
   1d754:	ldr	r3, [sp, #8]
   1d758:	ands	r6, r3, #131072	; 0x20000
   1d75c:	bne	1d774 <__assert_fail@plt+0xc28c>
   1d760:	mov	r3, #16
   1d764:	str	r3, [sl]
   1d768:	mov	r0, r6
   1d76c:	add	sp, sp, #148	; 0x94
   1d770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d774:	mov	r3, #1
   1d778:	mov	r2, #0
   1d77c:	mov	r1, r2
   1d780:	mov	r0, r4
   1d784:	strb	r3, [r5, #4]
   1d788:	mov	r3, r5
   1d78c:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d790:	subs	r6, r0, #0
   1d794:	bne	1ce0c <__assert_fail@plt+0xb924>
   1d798:	b	1cdf4 <__assert_fail@plt+0xb90c>
   1d79c:	ldr	r3, [r5]
   1d7a0:	movw	r2, #783	; 0x30f
   1d7a4:	tst	r2, r3
   1d7a8:	beq	1d7f4 <__assert_fail@plt+0xc30c>
   1d7ac:	ldrb	r3, [r4, #88]	; 0x58
   1d7b0:	ands	r7, r3, #16
   1d7b4:	bne	1d7f4 <__assert_fail@plt+0xc30c>
   1d7b8:	orr	r3, r3, #16
   1d7bc:	ands	r1, r3, #8
   1d7c0:	strb	r3, [r4, #88]	; 0x58
   1d7c4:	bne	1d8e4 <__assert_fail@plt+0xc3fc>
   1d7c8:	ldr	r2, [pc, #1448]	; 1dd78 <__assert_fail@plt+0xc890>
   1d7cc:	mvn	r6, #2013265921	; 0x78000001
   1d7d0:	mvn	r7, #-134217727	; 0xf8000001
   1d7d4:	tst	r3, #4
   1d7d8:	str	r1, [r4, #96]	; 0x60
   1d7dc:	str	r2, [r4, #100]	; 0x64
   1d7e0:	strd	r6, [r4, #104]	; 0x68
   1d7e4:	beq	1d904 <__assert_fail@plt+0xc41c>
   1d7e8:	mov	r2, #16
   1d7ec:	add	r0, r4, #112	; 0x70
   1d7f0:	bl	113ec <memset@plt>
   1d7f4:	ldr	r3, [r5]
   1d7f8:	sub	r2, r3, #256	; 0x100
   1d7fc:	bics	r2, r2, #256	; 0x100
   1d800:	bne	1d934 <__assert_fail@plt+0xc44c>
   1d804:	cmp	r3, #256	; 0x100
   1d808:	bne	1d910 <__assert_fail@plt+0xc428>
   1d80c:	mov	r3, #6
   1d810:	mov	r1, r2
   1d814:	mov	r0, r4
   1d818:	str	r3, [r5]
   1d81c:	mov	r3, r5
   1d820:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d824:	mov	r7, r0
   1d828:	mov	r3, #9
   1d82c:	mov	r2, #0
   1d830:	mov	r0, r4
   1d834:	str	r3, [r5]
   1d838:	mov	r1, r2
   1d83c:	mov	r3, r5
   1d840:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d844:	mov	r6, r0
   1d848:	mov	r2, r0
   1d84c:	mov	r3, #10
   1d850:	mov	r1, r7
   1d854:	mov	r0, r4
   1d858:	bl	15028 <__assert_fail@plt+0x3b40>
   1d85c:	clz	r2, r6
   1d860:	cmp	r7, #0
   1d864:	lsr	r2, r2, #5
   1d868:	moveq	r2, #1
   1d86c:	cmp	r0, #0
   1d870:	moveq	r2, #1
   1d874:	mov	r6, r0
   1d878:	cmp	r2, #0
   1d87c:	bne	1cdf4 <__assert_fail@plt+0xb90c>
   1d880:	mov	r1, fp
   1d884:	mov	r0, r5
   1d888:	ldr	r2, [sp, #8]
   1d88c:	bl	19150 <__assert_fail@plt+0x7c68>
   1d890:	b	1d768 <__assert_fail@plt+0xc280>
   1d894:	ldrh	r8, [r0], #2
   1d898:	add	r1, r2, r7
   1d89c:	ubfx	r8, r8, #3, #1
   1d8a0:	cmp	r1, #95	; 0x5f
   1d8a4:	movne	r1, r8
   1d8a8:	orreq	r1, r8, #1
   1d8ac:	cmp	r1, #0
   1d8b0:	ldrne	r1, [r3]
   1d8b4:	orrne	r1, r1, r6, lsl r2
   1d8b8:	add	r2, r2, #1
   1d8bc:	strne	r1, [r3]
   1d8c0:	cmp	r2, #32
   1d8c4:	bne	1d894 <__assert_fail@plt+0xc3ac>
   1d8c8:	add	r3, r3, #4
   1d8cc:	add	r7, r7, #32
   1d8d0:	cmp	lr, r3
   1d8d4:	beq	1d7f4 <__assert_fail@plt+0xc30c>
   1d8d8:	add	r0, ip, r7, lsl #1
   1d8dc:	mov	r2, #0
   1d8e0:	b	1d894 <__assert_fail@plt+0xc3ac>
   1d8e4:	mov	r6, r7
   1d8e8:	bl	11380 <__ctype_b_loc@plt>
   1d8ec:	add	r3, r6, #24
   1d8f0:	add	lr, r4, #128	; 0x80
   1d8f4:	ldr	ip, [r0]
   1d8f8:	add	r3, r4, r3, lsl #2
   1d8fc:	mov	r6, #1
   1d900:	b	1d8d8 <__assert_fail@plt+0xc3f0>
   1d904:	mov	r7, #128	; 0x80
   1d908:	mov	r6, #4
   1d90c:	b	1d8e8 <__assert_fail@plt+0xc400>
   1d910:	mov	r3, #5
   1d914:	mov	r1, r2
   1d918:	mov	r0, r4
   1d91c:	str	r3, [r5]
   1d920:	mov	r3, r5
   1d924:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d928:	mov	r7, r0
   1d92c:	mov	r3, #10
   1d930:	b	1d82c <__assert_fail@plt+0xc344>
   1d934:	mov	r2, #0
   1d938:	mov	r3, r5
   1d93c:	mov	r1, r2
   1d940:	mov	r0, r4
   1d944:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d948:	subs	r6, r0, #0
   1d94c:	bne	1d880 <__assert_fail@plt+0xc398>
   1d950:	b	1cdf4 <__assert_fail@plt+0xb90c>
   1d954:	mov	r2, #0
   1d958:	mov	r3, r5
   1d95c:	mov	r1, r2
   1d960:	mov	r0, r4
   1d964:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1d968:	subs	r6, r0, #0
   1d96c:	beq	1cdf4 <__assert_fail@plt+0xb90c>
   1d970:	ldr	r3, [r4, #92]	; 0x5c
   1d974:	cmp	r3, #1
   1d978:	bgt	1d708 <__assert_fail@plt+0xc220>
   1d97c:	b	1ce0c <__assert_fail@plt+0xb924>
   1d980:	sub	r3, r3, #33	; 0x21
   1d984:	ldr	r2, [pc, #1008]	; 1dd7c <__assert_fail@plt+0xc894>
   1d988:	clz	r3, r3
   1d98c:	lsr	r3, r3, #5
   1d990:	stm	sp, {r3, sl}
   1d994:	ldr	r3, [pc, #996]	; 1dd80 <__assert_fail@plt+0xc898>
   1d998:	mov	r0, r4
   1d99c:	ldr	r1, [fp, #64]	; 0x40
   1d9a0:	bl	167e8 <__assert_fail@plt+0x5300>
   1d9a4:	ldr	r3, [sl]
   1d9a8:	mov	r6, r0
   1d9ac:	clz	r0, r0
   1d9b0:	lsr	r0, r0, #5
   1d9b4:	cmp	r3, #0
   1d9b8:	moveq	r0, #0
   1d9bc:	cmp	r0, #0
   1d9c0:	b	1d000 <__assert_fail@plt+0xbb18>
   1d9c4:	sub	r3, r3, #35	; 0x23
   1d9c8:	ldr	r2, [pc, #948]	; 1dd84 <__assert_fail@plt+0xc89c>
   1d9cc:	clz	r3, r3
   1d9d0:	lsr	r3, r3, #5
   1d9d4:	stm	sp, {r3, sl}
   1d9d8:	ldr	r3, [pc, #936]	; 1dd88 <__assert_fail@plt+0xc8a0>
   1d9dc:	b	1d998 <__assert_fail@plt+0xc4b0>
   1d9e0:	mov	r3, #5
   1d9e4:	b	1cdf8 <__assert_fail@plt+0xb910>
   1d9e8:	cmn	r0, #2
   1d9ec:	bne	1da54 <__assert_fail@plt+0xc56c>
   1d9f0:	cmn	r9, #2
   1d9f4:	cmnne	r8, #2
   1d9f8:	bne	1dabc <__assert_fail@plt+0xc5d4>
   1d9fc:	ldr	r3, [sp, #8]
   1da00:	ands	r7, r3, #2097152	; 0x200000
   1da04:	bne	1da98 <__assert_fail@plt+0xc5b0>
   1da08:	ldrb	r3, [r5, #4]
   1da0c:	cmp	r3, #2
   1da10:	moveq	r3, #9
   1da14:	streq	r3, [sl]
   1da18:	bne	1ce98 <__assert_fail@plt+0xb9b0>
   1da1c:	ldr	r3, [sl]
   1da20:	clz	r2, r7
   1da24:	lsr	r2, r2, #5
   1da28:	cmp	r3, #0
   1da2c:	moveq	r2, #0
   1da30:	cmp	r2, #0
   1da34:	beq	1dcc0 <__assert_fail@plt+0xc7d8>
   1da38:	cmp	r6, #0
   1da3c:	beq	1d004 <__assert_fail@plt+0xbb1c>
   1da40:	mov	r2, #0
   1da44:	ldr	r1, [pc, #808]	; 1dd74 <__assert_fail@plt+0xc88c>
   1da48:	mov	r0, r6
   1da4c:	bl	148b4 <__assert_fail@plt+0x33cc>
   1da50:	b	1d004 <__assert_fail@plt+0xbb1c>
   1da54:	ldrb	r3, [r5, #4]
   1da58:	cmp	r3, #24
   1da5c:	moveq	r8, r9
   1da60:	beq	1d9f0 <__assert_fail@plt+0xc508>
   1da64:	cmp	r3, #1
   1da68:	bne	1da90 <__assert_fail@plt+0xc5a8>
   1da6c:	ldrb	r3, [r5]
   1da70:	cmp	r3, #44	; 0x2c
   1da74:	bne	1da90 <__assert_fail@plt+0xc5a8>
   1da78:	mov	r1, r5
   1da7c:	mov	r0, fp
   1da80:	ldr	r2, [sp, #8]
   1da84:	bl	1916c <__assert_fail@plt+0x7c84>
   1da88:	mov	r8, r0
   1da8c:	b	1d9f0 <__assert_fail@plt+0xc508>
   1da90:	mvn	r8, #1
   1da94:	b	1d9f0 <__assert_fail@plt+0xc508>
   1da98:	ldr	r3, [sp, #12]
   1da9c:	str	r3, [fp, #40]	; 0x28
   1daa0:	add	r3, sp, #112	; 0x70
   1daa4:	ldm	r3, {r0, r1}
   1daa8:	mov	r3, #1
   1daac:	stm	r5, {r0, r1}
   1dab0:	strb	r3, [r5, #4]
   1dab4:	mov	r7, r6
   1dab8:	b	1da1c <__assert_fail@plt+0xc534>
   1dabc:	cmn	r8, #1
   1dac0:	cmpne	r9, r8
   1dac4:	bgt	1ce98 <__assert_fail@plt+0xb9b0>
   1dac8:	ldrb	r3, [r5, #4]
   1dacc:	cmp	r3, #24
   1dad0:	bne	1ce98 <__assert_fail@plt+0xb9b0>
   1dad4:	cmn	r8, #1
   1dad8:	movw	r3, #32767	; 0x7fff
   1dadc:	bne	1db2c <__assert_fail@plt+0xc644>
   1dae0:	cmp	r9, r3
   1dae4:	movle	r3, #0
   1dae8:	movgt	r3, #1
   1daec:	cmp	r3, #0
   1daf0:	movne	r3, #15
   1daf4:	bne	1ce9c <__assert_fail@plt+0xb9b4>
   1daf8:	mov	r1, fp
   1dafc:	mov	r0, r5
   1db00:	ldr	r2, [sp, #8]
   1db04:	bl	19150 <__assert_fail@plt+0x7c68>
   1db08:	cmp	r6, #0
   1db0c:	beq	1dab4 <__assert_fail@plt+0xc5cc>
   1db10:	orrs	r7, r9, r8
   1db14:	bne	1db44 <__assert_fail@plt+0xc65c>
   1db18:	mov	r2, r7
   1db1c:	ldr	r1, [pc, #592]	; 1dd74 <__assert_fail@plt+0xc88c>
   1db20:	mov	r0, r6
   1db24:	bl	148b4 <__assert_fail@plt+0x33cc>
   1db28:	b	1da1c <__assert_fail@plt+0xc534>
   1db2c:	cmp	r8, r3
   1db30:	b	1dae4 <__assert_fail@plt+0xc5fc>
   1db34:	cmp	r3, #19
   1db38:	moveq	r8, #1
   1db3c:	mvnne	r8, #0
   1db40:	b	1daf8 <__assert_fail@plt+0xc610>
   1db44:	cmp	r9, #0
   1db48:	movle	r3, #0
   1db4c:	strle	r6, [sp, #12]
   1db50:	strle	r3, [sp, #16]
   1db54:	ble	1dbdc <__assert_fail@plt+0xc6f4>
   1db58:	mov	r7, r6
   1db5c:	mov	r3, #2
   1db60:	str	r6, [sp, #12]
   1db64:	b	1dba8 <__assert_fail@plt+0xc6c0>
   1db68:	mov	r1, r4
   1db6c:	ldr	r0, [sp, #12]
   1db70:	bl	14f88 <__assert_fail@plt+0x3aa0>
   1db74:	mov	r2, r0
   1db78:	mov	r3, #16
   1db7c:	str	r0, [sp, #12]
   1db80:	mov	r1, r7
   1db84:	mov	r0, r4
   1db88:	bl	15028 <__assert_fail@plt+0x3b40>
   1db8c:	ldr	r3, [sp, #12]
   1db90:	mov	r7, r0
   1db94:	cmp	r0, #0
   1db98:	cmpne	r3, #0
   1db9c:	beq	1dc28 <__assert_fail@plt+0xc740>
   1dba0:	ldr	r3, [sp, #16]
   1dba4:	add	r3, r3, #1
   1dba8:	str	r3, [sp, #16]
   1dbac:	ldr	r3, [sp, #16]
   1dbb0:	cmp	r9, r3
   1dbb4:	bge	1db68 <__assert_fail@plt+0xc680>
   1dbb8:	cmp	r9, r8
   1dbbc:	beq	1da1c <__assert_fail@plt+0xc534>
   1dbc0:	mov	r1, r4
   1dbc4:	ldr	r0, [sp, #12]
   1dbc8:	bl	14f88 <__assert_fail@plt+0x3aa0>
   1dbcc:	subs	r3, r0, #0
   1dbd0:	str	r3, [sp, #12]
   1dbd4:	beq	1dc28 <__assert_fail@plt+0xc740>
   1dbd8:	str	r7, [sp, #16]
   1dbdc:	ldr	r3, [sp, #12]
   1dbe0:	ldrb	r3, [r3, #24]
   1dbe4:	cmp	r3, #17
   1dbe8:	bne	1dc00 <__assert_fail@plt+0xc718>
   1dbec:	ldr	r3, [sp, #12]
   1dbf0:	ldr	r1, [pc, #404]	; 1dd8c <__assert_fail@plt+0xc8a4>
   1dbf4:	mov	r0, r3
   1dbf8:	ldr	r2, [r3, #20]
   1dbfc:	bl	148b4 <__assert_fail@plt+0x33cc>
   1dc00:	cmn	r8, #1
   1dc04:	mov	r2, #0
   1dc08:	ldr	r1, [sp, #12]
   1dc0c:	moveq	r3, #11
   1dc10:	movne	r3, #10
   1dc14:	mov	r0, r4
   1dc18:	bl	15028 <__assert_fail@plt+0x3b40>
   1dc1c:	subs	r7, r0, #0
   1dc20:	addne	r9, r9, #2
   1dc24:	bne	1dc90 <__assert_fail@plt+0xc7a8>
   1dc28:	mov	r3, #12
   1dc2c:	b	1ce9c <__assert_fail@plt+0xb9b4>
   1dc30:	mov	r1, r4
   1dc34:	ldr	r0, [sp, #12]
   1dc38:	bl	14f88 <__assert_fail@plt+0x3aa0>
   1dc3c:	mov	r2, r0
   1dc40:	mov	r3, #16
   1dc44:	str	r0, [sp, #12]
   1dc48:	mov	r1, r7
   1dc4c:	mov	r0, r4
   1dc50:	bl	15028 <__assert_fail@plt+0x3b40>
   1dc54:	ldr	r3, [sp, #12]
   1dc58:	mov	r1, r0
   1dc5c:	clz	r0, r0
   1dc60:	lsr	r0, r0, #5
   1dc64:	cmp	r3, #0
   1dc68:	movne	r2, r0
   1dc6c:	moveq	r2, #1
   1dc70:	cmp	r2, #0
   1dc74:	bne	1dc28 <__assert_fail@plt+0xc740>
   1dc78:	mov	r3, #10
   1dc7c:	mov	r0, r4
   1dc80:	bl	15028 <__assert_fail@plt+0x3b40>
   1dc84:	subs	r7, r0, #0
   1dc88:	beq	1dc28 <__assert_fail@plt+0xc740>
   1dc8c:	add	r9, r9, #1
   1dc90:	cmp	r8, r9
   1dc94:	bge	1dc30 <__assert_fail@plt+0xc748>
   1dc98:	ldr	r3, [sp, #16]
   1dc9c:	cmp	r3, #0
   1dca0:	beq	1da1c <__assert_fail@plt+0xc534>
   1dca4:	mov	r2, r7
   1dca8:	mov	r3, #16
   1dcac:	ldr	r1, [sp, #16]
   1dcb0:	mov	r0, r4
   1dcb4:	bl	15028 <__assert_fail@plt+0x3b40>
   1dcb8:	mov	r7, r0
   1dcbc:	b	1da1c <__assert_fail@plt+0xc534>
   1dcc0:	ldr	r3, [sp, #8]
   1dcc4:	tst	r3, #16777216	; 0x1000000
   1dcc8:	beq	1dcf4 <__assert_fail@plt+0xc80c>
   1dccc:	ldrb	r3, [r5, #4]
   1dcd0:	cmp	r3, #23
   1dcd4:	cmpne	r3, #11
   1dcd8:	bne	1dcf4 <__assert_fail@plt+0xc80c>
   1dcdc:	cmp	r7, #0
   1dce0:	beq	1d720 <__assert_fail@plt+0xc238>
   1dce4:	ldr	r1, [pc, #136]	; 1dd74 <__assert_fail@plt+0xc88c>
   1dce8:	mov	r0, r7
   1dcec:	bl	148b4 <__assert_fail@plt+0x33cc>
   1dcf0:	b	1d720 <__assert_fail@plt+0xc238>
   1dcf4:	mov	r6, r7
   1dcf8:	b	1ce1c <__assert_fail@plt+0xb934>
   1dcfc:	mov	r3, #3
   1dd00:	mov	r2, #0
   1dd04:	mov	r1, r2
   1dd08:	mov	r0, r4
   1dd0c:	strb	r3, [sp, #116]	; 0x74
   1dd10:	ldr	r3, [sp, #12]
   1dd14:	str	r3, [sp, #112]	; 0x70
   1dd18:	add	r3, sp, #112	; 0x70
   1dd1c:	bl	14ed4 <__assert_fail@plt+0x39ec>
   1dd20:	subs	r1, r0, #0
   1dd24:	beq	1dd40 <__assert_fail@plt+0xc858>
   1dd28:	mov	r3, #10
   1dd2c:	mov	r2, r6
   1dd30:	mov	r0, r4
   1dd34:	bl	15028 <__assert_fail@plt+0x3b40>
   1dd38:	subs	r6, r0, #0
   1dd3c:	bne	1cfe8 <__assert_fail@plt+0xbb00>
   1dd40:	mov	r3, #12
   1dd44:	b	1d08c <__assert_fail@plt+0xbba4>
   1dd48:	cmp	r8, #3
   1dd4c:	bne	1d41c <__assert_fail@plt+0xbf34>
   1dd50:	b	1d2d8 <__assert_fail@plt+0xbdf0>
   1dd54:	cmp	r2, #0
   1dd58:	beq	1d2f8 <__assert_fail@plt+0xbe10>
   1dd5c:	cmp	r8, #0
   1dd60:	movne	r6, #0
   1dd64:	bne	1d440 <__assert_fail@plt+0xbf58>
   1dd68:	mov	r6, r8
   1dd6c:	b	1d304 <__assert_fail@plt+0xbe1c>
   1dd70:	addeq	r0, ip, r0, lsl #16
   1dd74:	strdeq	r5, [r1], -ip
   1dd78:	mvnseq	r0, #0
   1dd7c:	andeq	r1, r2, r6, asr #8
   1dd80:	andeq	r0, r2, r0, lsr lr
   1dd84:	andeq	r1, r2, r2, asr r4
   1dd88:	andeq	r0, r2, r6, asr #29
   1dd8c:	andeq	r4, r1, ip, ror #20
   1dd90:	ldr	ip, [r1]
   1dd94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd98:	sub	sp, sp, #20
   1dd9c:	mov	fp, r3
   1dda0:	mov	sl, r0
   1dda4:	mov	r7, r1
   1dda8:	mov	r8, r2
   1ddac:	ldr	r5, [sp, #60]	; 0x3c
   1ddb0:	str	ip, [sp, #12]
   1ddb4:	ldr	ip, [sp, #56]	; 0x38
   1ddb8:	str	ip, [sp]
   1ddbc:	str	r5, [sp, #4]
   1ddc0:	bl	1cd08 <__assert_fail@plt+0xb820>
   1ddc4:	ldr	r3, [r5]
   1ddc8:	mov	r4, r0
   1ddcc:	clz	r0, r0
   1ddd0:	lsr	r0, r0, #5
   1ddd4:	cmp	r3, #0
   1ddd8:	moveq	r0, #0
   1dddc:	cmp	r0, #0
   1dde0:	beq	1de50 <__assert_fail@plt+0xc968>
   1dde4:	mov	r4, #0
   1dde8:	mov	r0, r4
   1ddec:	add	sp, sp, #20
   1ddf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddf4:	cmp	r4, #0
   1ddf8:	cmpne	r6, #0
   1ddfc:	beq	1de48 <__assert_fail@plt+0xc960>
   1de00:	mov	r3, #16
   1de04:	mov	r2, r6
   1de08:	ldr	r0, [sp, #12]
   1de0c:	mov	r1, r4
   1de10:	bl	15028 <__assert_fail@plt+0x3b40>
   1de14:	subs	r9, r0, #0
   1de18:	bne	1ded4 <__assert_fail@plt+0xc9ec>
   1de1c:	mov	r2, r9
   1de20:	ldr	r1, [pc, #180]	; 1dedc <__assert_fail@plt+0xc9f4>
   1de24:	mov	r0, r6
   1de28:	bl	148b4 <__assert_fail@plt+0x33cc>
   1de2c:	mov	r2, r9
   1de30:	ldr	r1, [pc, #164]	; 1dedc <__assert_fail@plt+0xc9f4>
   1de34:	mov	r0, r4
   1de38:	bl	148b4 <__assert_fail@plt+0x33cc>
   1de3c:	mov	r2, #12
   1de40:	str	r2, [r5]
   1de44:	b	1dde4 <__assert_fail@plt+0xc8fc>
   1de48:	cmp	r4, #0
   1de4c:	moveq	r4, r6
   1de50:	ldrb	r2, [r8, #4]
   1de54:	and	r3, r2, #247	; 0xf7
   1de58:	cmp	r3, #2
   1de5c:	beq	1dde8 <__assert_fail@plt+0xc900>
   1de60:	ldr	r3, [sp, #56]	; 0x38
   1de64:	clz	r3, r3
   1de68:	lsr	r3, r3, #5
   1de6c:	cmp	r2, #9
   1de70:	orrne	r3, r3, #1
   1de74:	cmp	r3, #0
   1de78:	beq	1dde8 <__assert_fail@plt+0xc900>
   1de7c:	ldr	r3, [sp, #56]	; 0x38
   1de80:	mov	r2, r8
   1de84:	mov	r1, r7
   1de88:	mov	r0, sl
   1de8c:	stm	sp, {r3, r5}
   1de90:	mov	r3, fp
   1de94:	bl	1cd08 <__assert_fail@plt+0xb820>
   1de98:	ldr	r3, [r5]
   1de9c:	mov	r6, r0
   1dea0:	clz	r0, r0
   1dea4:	lsr	r0, r0, #5
   1dea8:	cmp	r3, #0
   1deac:	moveq	r0, #0
   1deb0:	cmp	r0, #0
   1deb4:	beq	1ddf4 <__assert_fail@plt+0xc90c>
   1deb8:	cmp	r4, #0
   1debc:	beq	1dde4 <__assert_fail@plt+0xc8fc>
   1dec0:	mov	r2, #0
   1dec4:	ldr	r1, [pc, #16]	; 1dedc <__assert_fail@plt+0xc9f4>
   1dec8:	mov	r0, r4
   1decc:	bl	148b4 <__assert_fail@plt+0x33cc>
   1ded0:	b	1dde4 <__assert_fail@plt+0xc8fc>
   1ded4:	mov	r4, r9
   1ded8:	b	1de50 <__assert_fail@plt+0xc968>
   1dedc:	strdeq	r5, [r1], -ip
   1dee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dee4:	sub	sp, sp, #20
   1dee8:	mov	sl, r3
   1deec:	mov	r8, r0
   1def0:	mov	r9, r1
   1def4:	mov	r7, r2
   1def8:	ldr	r5, [r1]
   1defc:	ldr	r6, [sp, #60]	; 0x3c
   1df00:	ldr	ip, [r5, #84]	; 0x54
   1df04:	stmib	sp, {r6, ip}
   1df08:	ldr	ip, [sp, #56]	; 0x38
   1df0c:	str	ip, [sp]
   1df10:	bl	1dd90 <__assert_fail@plt+0xc8a8>
   1df14:	ldr	r3, [r6]
   1df18:	mov	r4, r0
   1df1c:	clz	r0, r0
   1df20:	lsr	r0, r0, #5
   1df24:	cmp	r3, #0
   1df28:	moveq	r0, #0
   1df2c:	cmp	r0, #0
   1df30:	orreq	r3, sl, #8388608	; 0x800000
   1df34:	streq	r3, [sp, #12]
   1df38:	beq	1df84 <__assert_fail@plt+0xca9c>
   1df3c:	mov	r4, #0
   1df40:	mov	r0, r4
   1df44:	add	sp, sp, #20
   1df48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df4c:	ldr	r3, [r5, #84]	; 0x54
   1df50:	orr	fp, r3, fp
   1df54:	str	fp, [r5, #84]	; 0x54
   1df58:	mov	r1, r4
   1df5c:	mov	r3, #10
   1df60:	mov	r0, r5
   1df64:	bl	15028 <__assert_fail@plt+0x3b40>
   1df68:	subs	r4, r0, #0
   1df6c:	bne	1df84 <__assert_fail@plt+0xca9c>
   1df70:	mov	r3, #12
   1df74:	str	r3, [r6]
   1df78:	b	1df40 <__assert_fail@plt+0xca58>
   1df7c:	mov	r2, #0
   1df80:	b	1df58 <__assert_fail@plt+0xca70>
   1df84:	ldrb	r3, [r7, #4]
   1df88:	cmp	r3, #10
   1df8c:	bne	1df40 <__assert_fail@plt+0xca58>
   1df90:	mov	r1, r8
   1df94:	mov	r0, r7
   1df98:	ldr	r2, [sp, #12]
   1df9c:	bl	19150 <__assert_fail@plt+0x7c68>
   1dfa0:	ldrb	r3, [r7, #4]
   1dfa4:	and	r2, r3, #247	; 0xf7
   1dfa8:	cmp	r2, #2
   1dfac:	beq	1df7c <__assert_fail@plt+0xca94>
   1dfb0:	ldr	r2, [sp, #56]	; 0x38
   1dfb4:	clz	r2, r2
   1dfb8:	lsr	r2, r2, #5
   1dfbc:	cmp	r3, #9
   1dfc0:	orrne	r2, r2, #1
   1dfc4:	cmp	r2, #0
   1dfc8:	beq	1df58 <__assert_fail@plt+0xca70>
   1dfcc:	ldr	r3, [sp, #8]
   1dfd0:	mov	r2, r7
   1dfd4:	mov	r1, r9
   1dfd8:	mov	r0, r8
   1dfdc:	ldr	fp, [r5, #84]	; 0x54
   1dfe0:	str	r3, [r5, #84]	; 0x54
   1dfe4:	ldr	r3, [sp, #56]	; 0x38
   1dfe8:	str	r3, [sp]
   1dfec:	mov	r3, sl
   1dff0:	str	r6, [sp, #4]
   1dff4:	bl	1dd90 <__assert_fail@plt+0xc8a8>
   1dff8:	ldr	r3, [r6]
   1dffc:	mov	r2, r0
   1e000:	clz	r0, r0
   1e004:	lsr	r0, r0, #5
   1e008:	cmp	r3, #0
   1e00c:	moveq	r0, #0
   1e010:	cmp	r0, #0
   1e014:	beq	1df4c <__assert_fail@plt+0xca64>
   1e018:	cmp	r4, #0
   1e01c:	beq	1df3c <__assert_fail@plt+0xca54>
   1e020:	mov	r2, #0
   1e024:	ldr	r1, [pc, #8]	; 1e034 <__assert_fail@plt+0xcb4c>
   1e028:	mov	r0, r4
   1e02c:	bl	148b4 <__assert_fail@plt+0x33cc>
   1e030:	b	1df3c <__assert_fail@plt+0xca54>
   1e034:	strdeq	r5, [r1], -ip
   1e038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e03c:	mov	r8, r3
   1e040:	sub	sp, sp, #132	; 0x84
   1e044:	mov	r3, #0
   1e048:	mov	r6, r0
   1e04c:	mov	r9, r1
   1e050:	mov	r5, r2
   1e054:	str	r3, [r0, #8]
   1e058:	str	r3, [sp, #24]
   1e05c:	str	r3, [r0, #24]
   1e060:	ldrb	r3, [r0, #28]
   1e064:	str	r8, [r0, #12]
   1e068:	ldr	r4, [r0]
   1e06c:	bic	r3, r3, #111	; 0x6f
   1e070:	strb	r3, [r0, #28]
   1e074:	ldr	r3, [r0, #4]
   1e078:	cmp	r3, #159	; 0x9f
   1e07c:	bhi	1e0a0 <__assert_fail@plt+0xcbb8>
   1e080:	mov	r0, r4
   1e084:	mov	r1, #160	; 0xa0
   1e088:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1e08c:	subs	r4, r0, #0
   1e090:	beq	1eb94 <__assert_fail@plt+0xd6ac>
   1e094:	mov	r3, #160	; 0xa0
   1e098:	str	r4, [r6]
   1e09c:	str	r3, [r6, #4]
   1e0a0:	mov	r2, #160	; 0xa0
   1e0a4:	mov	r1, #0
   1e0a8:	mov	r0, r4
   1e0ac:	str	r2, [r6, #8]
   1e0b0:	bl	113ec <memset@plt>
   1e0b4:	mov	r3, #31
   1e0b8:	str	r3, [r4, #64]	; 0x40
   1e0bc:	ldr	r3, [pc, #2780]	; 1eba0 <__assert_fail@plt+0xd6b8>
   1e0c0:	cmp	r5, r3
   1e0c4:	bhi	1e238 <__assert_fail@plt+0xcd50>
   1e0c8:	add	sl, r5, #1
   1e0cc:	mov	r7, #1
   1e0d0:	lsl	r0, sl, #3
   1e0d4:	str	sl, [r4, #4]
   1e0d8:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e0dc:	str	r0, [r4]
   1e0e0:	cmp	r5, r7
   1e0e4:	lslcs	r7, r7, #1
   1e0e8:	bcs	1e0e0 <__assert_fail@plt+0xcbf8>
   1e0ec:	mov	r1, r7
   1e0f0:	mov	r0, #12
   1e0f4:	sub	r7, r7, #1
   1e0f8:	bl	1ff70 <__assert_fail@plt+0xea88>
   1e0fc:	str	r0, [r4, #32]
   1e100:	str	r7, [r4, #68]	; 0x44
   1e104:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   1e108:	str	r0, [r4, #92]	; 0x5c
   1e10c:	mov	r0, #14
   1e110:	bl	1147c <nl_langinfo@plt>
   1e114:	ldrb	r3, [r0]
   1e118:	and	r3, r3, #223	; 0xdf
   1e11c:	cmp	r3, #85	; 0x55
   1e120:	bne	1e170 <__assert_fail@plt+0xcc88>
   1e124:	ldrb	r3, [r0, #1]
   1e128:	and	r3, r3, #223	; 0xdf
   1e12c:	cmp	r3, #84	; 0x54
   1e130:	bne	1e170 <__assert_fail@plt+0xcc88>
   1e134:	ldrb	r3, [r0, #2]
   1e138:	and	r3, r3, #223	; 0xdf
   1e13c:	cmp	r3, #70	; 0x46
   1e140:	bne	1e170 <__assert_fail@plt+0xcc88>
   1e144:	ldrb	r3, [r0, #3]
   1e148:	ldr	r1, [pc, #2644]	; 1eba4 <__assert_fail@plt+0xd6bc>
   1e14c:	cmp	r3, #45	; 0x2d
   1e150:	moveq	r3, #4
   1e154:	movne	r3, #3
   1e158:	add	r0, r0, r3
   1e15c:	bl	111a0 <strcmp@plt>
   1e160:	cmp	r0, #0
   1e164:	ldrbeq	r3, [r4, #88]	; 0x58
   1e168:	orreq	r3, r3, #4
   1e16c:	strbeq	r3, [r4, #88]	; 0x58
   1e170:	ldrb	r3, [r4, #88]	; 0x58
   1e174:	bfc	r3, #3, #1
   1e178:	strb	r3, [r4, #88]	; 0x58
   1e17c:	ldr	r3, [r4, #92]	; 0x5c
   1e180:	cmp	r3, #1
   1e184:	ble	1e220 <__assert_fail@plt+0xcd38>
   1e188:	ldrb	r7, [r4, #88]	; 0x58
   1e18c:	ands	r7, r7, #4
   1e190:	ldrne	r3, [pc, #2576]	; 1eba8 <__assert_fail@plt+0xd6c0>
   1e194:	strne	r3, [r4, #60]	; 0x3c
   1e198:	bne	1e220 <__assert_fail@plt+0xcd38>
   1e19c:	mov	r1, #1
   1e1a0:	mov	r0, #32
   1e1a4:	bl	1ff70 <__assert_fail@plt+0xea88>
   1e1a8:	cmp	r0, #0
   1e1ac:	str	r0, [r4, #60]	; 0x3c
   1e1b0:	beq	1e238 <__assert_fail@plt+0xcd50>
   1e1b4:	lsl	r2, r7, #3
   1e1b8:	mov	fp, #0
   1e1bc:	add	r3, fp, r2
   1e1c0:	mov	r0, r3
   1e1c4:	str	r3, [sp, #12]
   1e1c8:	str	r2, [sp, #16]
   1e1cc:	bl	113f8 <btowc@plt>
   1e1d0:	cmn	r0, #1
   1e1d4:	ldr	r3, [sp, #12]
   1e1d8:	mov	r1, #1
   1e1dc:	ldrne	lr, [r4, #60]	; 0x3c
   1e1e0:	ldr	r2, [sp, #16]
   1e1e4:	ldrne	ip, [lr, r7]
   1e1e8:	orrne	ip, ip, r1, lsl fp
   1e1ec:	strne	ip, [lr, r7]
   1e1f0:	bics	ip, r3, #127	; 0x7f
   1e1f4:	bne	1e208 <__assert_fail@plt+0xcd20>
   1e1f8:	cmp	r0, r3
   1e1fc:	ldrbne	r3, [r4, #88]	; 0x58
   1e200:	orrne	r3, r3, #8
   1e204:	strbne	r3, [r4, #88]	; 0x58
   1e208:	add	fp, fp, #1
   1e20c:	cmp	fp, #32
   1e210:	bne	1e1bc <__assert_fail@plt+0xccd4>
   1e214:	add	r7, r7, #4
   1e218:	cmp	r7, #32
   1e21c:	bne	1e1b4 <__assert_fail@plt+0xcccc>
   1e220:	ldr	r3, [r4]
   1e224:	cmp	r3, #0
   1e228:	beq	1e238 <__assert_fail@plt+0xcd50>
   1e22c:	ldr	r3, [r4, #32]
   1e230:	cmp	r3, #0
   1e234:	bne	1e258 <__assert_fail@plt+0xcd70>
   1e238:	mov	r3, #12
   1e23c:	str	r3, [sp, #24]
   1e240:	mov	r0, r4
   1e244:	bl	174d4 <__assert_fail@plt+0x5fec>
   1e248:	mov	r3, #0
   1e24c:	str	r3, [r6]
   1e250:	str	r3, [r6, #4]
   1e254:	b	1e80c <__assert_fail@plt+0xd324>
   1e258:	ldr	r2, [pc, #2380]	; 1ebac <__assert_fail@plt+0xd6c4>
   1e25c:	mov	r3, #0
   1e260:	ldr	r1, [pc, #2376]	; 1ebb0 <__assert_fail@plt+0xd6c8>
   1e264:	str	r3, [sp, #24]
   1e268:	mov	r3, #1
   1e26c:	cmp	r2, #0
   1e270:	moveq	r3, r2
   1e274:	mov	r2, #1
   1e278:	cmp	r1, #0
   1e27c:	moveq	r2, r1
   1e280:	orr	r3, r3, r2
   1e284:	ands	r3, r3, #255	; 0xff
   1e288:	str	r3, [sp, #16]
   1e28c:	beq	1e2b0 <__assert_fail@plt+0xcdc8>
   1e290:	mov	r1, #0
   1e294:	add	r0, r4, #136	; 0x88
   1e298:	bl	1123c <pthread_mutex_init@plt>
   1e29c:	cmp	r0, #0
   1e2a0:	bne	1e238 <__assert_fail@plt+0xcd50>
   1e2a4:	ldr	r3, [sp, #24]
   1e2a8:	cmp	r3, #0
   1e2ac:	bne	1e240 <__assert_fail@plt+0xcd58>
   1e2b0:	ldr	r3, [r6, #20]
   1e2b4:	and	r7, r8, #4194304	; 0x400000
   1e2b8:	mov	r2, #76	; 0x4c
   1e2bc:	mov	r1, #0
   1e2c0:	add	r0, sp, #48	; 0x30
   1e2c4:	orr	fp, r3, r7
   1e2c8:	str	r3, [sp, #12]
   1e2cc:	bl	113ec <memset@plt>
   1e2d0:	ldr	r3, [sp, #12]
   1e2d4:	str	r9, [sp, #44]	; 0x2c
   1e2d8:	str	r5, [sp, #88]	; 0x58
   1e2dc:	str	r5, [sp, #92]	; 0x5c
   1e2e0:	str	r5, [sp, #96]	; 0x60
   1e2e4:	str	r5, [sp, #100]	; 0x64
   1e2e8:	str	r3, [sp, #108]	; 0x6c
   1e2ec:	adds	r3, r7, #0
   1e2f0:	movne	r3, #1
   1e2f4:	strb	r3, [sp, #116]	; 0x74
   1e2f8:	adds	r3, fp, #0
   1e2fc:	movne	r3, #1
   1e300:	cmp	r5, #0
   1e304:	strb	r3, [sp, #119]	; 0x77
   1e308:	ldr	r3, [r4, #92]	; 0x5c
   1e30c:	str	r3, [sp, #124]	; 0x7c
   1e310:	ldrb	r3, [r4, #88]	; 0x58
   1e314:	ubfx	r2, r3, #2, #1
   1e318:	ubfx	r3, r3, #3, #1
   1e31c:	strb	r2, [sp, #117]	; 0x75
   1e320:	strb	r3, [sp, #118]	; 0x76
   1e324:	bne	1e398 <__assert_fail@plt+0xceb0>
   1e328:	ldrb	r3, [sp, #119]	; 0x77
   1e32c:	cmp	r3, #0
   1e330:	ldr	r3, [r4, #92]	; 0x5c
   1e334:	ldrne	r9, [sp, #48]	; 0x30
   1e338:	cmp	r7, #0
   1e33c:	str	r9, [sp, #48]	; 0x30
   1e340:	beq	1e4cc <__assert_fail@plt+0xcfe4>
   1e344:	cmp	r3, #1
   1e348:	ble	1e404 <__assert_fail@plt+0xcf1c>
   1e34c:	add	r0, sp, #44	; 0x2c
   1e350:	bl	153a4 <__assert_fail@plt+0x3ebc>
   1e354:	cmp	r0, #0
   1e358:	bne	1e3ac <__assert_fail@plt+0xcec4>
   1e35c:	ldr	r3, [sp, #76]	; 0x4c
   1e360:	cmp	r5, r3
   1e364:	ble	1e3ac <__assert_fail@plt+0xcec4>
   1e368:	ldr	r3, [sp, #72]	; 0x48
   1e36c:	ldr	r2, [r4, #92]	; 0x5c
   1e370:	ldr	r1, [sp, #80]	; 0x50
   1e374:	add	r3, r3, r2
   1e378:	cmp	r1, r3
   1e37c:	bgt	1e3ac <__assert_fail@plt+0xcec4>
   1e380:	lsl	r1, r1, #1
   1e384:	add	r0, sp, #44	; 0x2c
   1e388:	bl	14de8 <__assert_fail@plt+0x3900>
   1e38c:	cmp	r0, #0
   1e390:	beq	1e34c <__assert_fail@plt+0xce64>
   1e394:	b	1e3ac <__assert_fail@plt+0xcec4>
   1e398:	mov	r1, sl
   1e39c:	add	r0, sp, #44	; 0x2c
   1e3a0:	bl	14de8 <__assert_fail@plt+0x3900>
   1e3a4:	cmp	r0, #0
   1e3a8:	beq	1e328 <__assert_fail@plt+0xce40>
   1e3ac:	cmp	r0, #0
   1e3b0:	str	r0, [sp, #24]
   1e3b4:	beq	1e414 <__assert_fail@plt+0xcf2c>
   1e3b8:	ldr	r7, [r6]
   1e3bc:	ldr	r5, [r7, #56]	; 0x38
   1e3c0:	cmp	r5, #0
   1e3c4:	bne	1e504 <__assert_fail@plt+0xd01c>
   1e3c8:	mov	r3, #31
   1e3cc:	str	r5, [r7, #52]	; 0x34
   1e3d0:	str	r5, [r7, #56]	; 0x38
   1e3d4:	str	r3, [r7, #64]	; 0x40
   1e3d8:	ldr	r0, [r7, #16]
   1e3dc:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1e3e0:	add	r0, sp, #44	; 0x2c
   1e3e4:	str	r5, [r7, #16]
   1e3e8:	bl	15c84 <__assert_fail@plt+0x479c>
   1e3ec:	ldr	r3, [sp, #16]
   1e3f0:	cmp	r3, #0
   1e3f4:	beq	1e240 <__assert_fail@plt+0xcd58>
   1e3f8:	add	r0, r4, #136	; 0x88
   1e3fc:	bl	111c4 <pthread_mutex_destroy@plt>
   1e400:	b	1e240 <__assert_fail@plt+0xcd58>
   1e404:	add	r0, sp, #44	; 0x2c
   1e408:	bl	15874 <__assert_fail@plt+0x438c>
   1e40c:	mov	r3, #0
   1e410:	str	r3, [sp, #24]
   1e414:	ldr	r9, [r6]
   1e418:	mov	r5, #0
   1e41c:	orr	r2, r8, #8388608	; 0x800000
   1e420:	add	r1, sp, #44	; 0x2c
   1e424:	add	r0, sp, #32
   1e428:	str	r5, [r6, #24]
   1e42c:	str	r8, [r9, #128]	; 0x80
   1e430:	bl	19150 <__assert_fail@plt+0x7c68>
   1e434:	add	r3, sp, #24
   1e438:	add	r2, sp, #32
   1e43c:	str	r5, [sp]
   1e440:	mov	r1, r6
   1e444:	add	r0, sp, #44	; 0x2c
   1e448:	str	r3, [sp, #4]
   1e44c:	mov	r3, r8
   1e450:	bl	1dee0 <__assert_fail@plt+0xc9f8>
   1e454:	ldr	r2, [sp, #24]
   1e458:	mov	sl, r0
   1e45c:	clz	r0, r0
   1e460:	lsr	r0, r0, #5
   1e464:	cmp	r2, r5
   1e468:	movne	r2, r0
   1e46c:	moveq	r2, r5
   1e470:	cmp	r2, r5
   1e474:	bne	1e518 <__assert_fail@plt+0xd030>
   1e478:	mov	r3, #2
   1e47c:	mov	r1, r2
   1e480:	mov	r0, r9
   1e484:	bl	15028 <__assert_fail@plt+0x3b40>
   1e488:	cmp	sl, r5
   1e48c:	mov	r8, r0
   1e490:	beq	1e4a8 <__assert_fail@plt+0xcfc0>
   1e494:	mov	r3, #16
   1e498:	mov	r2, r8
   1e49c:	mov	r1, sl
   1e4a0:	mov	r0, r9
   1e4a4:	bl	15028 <__assert_fail@plt+0x3b40>
   1e4a8:	cmp	r0, #0
   1e4ac:	cmpne	r8, #0
   1e4b0:	ldr	r5, [r6]
   1e4b4:	bne	1e520 <__assert_fail@plt+0xd038>
   1e4b8:	mov	r3, #12
   1e4bc:	str	r3, [sp, #24]
   1e4c0:	mov	r3, #0
   1e4c4:	str	r3, [r4, #52]	; 0x34
   1e4c8:	b	1e3b8 <__assert_fail@plt+0xced0>
   1e4cc:	cmp	r3, #1
   1e4d0:	ble	1e4e4 <__assert_fail@plt+0xcffc>
   1e4d4:	add	r0, sp, #44	; 0x2c
   1e4d8:	bl	15250 <__assert_fail@plt+0x3d68>
   1e4dc:	str	r7, [sp, #24]
   1e4e0:	b	1e414 <__assert_fail@plt+0xcf2c>
   1e4e4:	cmp	fp, #0
   1e4e8:	ldreq	r3, [sp, #80]	; 0x50
   1e4ec:	streq	r3, [sp, #72]	; 0x48
   1e4f0:	streq	r3, [sp, #76]	; 0x4c
   1e4f4:	beq	1e4dc <__assert_fail@plt+0xcff4>
   1e4f8:	add	r0, sp, #44	; 0x2c
   1e4fc:	bl	14778 <__assert_fail@plt+0x3290>
   1e500:	b	1e4dc <__assert_fail@plt+0xcff4>
   1e504:	ldr	r8, [r5]
   1e508:	mov	r0, r5
   1e50c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1e510:	mov	r5, r8
   1e514:	b	1e3c0 <__assert_fail@plt+0xced8>
   1e518:	str	r5, [r4, #52]	; 0x34
   1e51c:	b	1e3b8 <__assert_fail@plt+0xced0>
   1e520:	str	r0, [r4, #52]	; 0x34
   1e524:	mov	r8, #12
   1e528:	ldr	r0, [r5, #4]
   1e52c:	lsl	r0, r0, #2
   1e530:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e534:	str	r0, [r5, #12]
   1e538:	ldr	r0, [r5, #4]
   1e53c:	lsl	r0, r0, #2
   1e540:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e544:	str	r0, [r5, #16]
   1e548:	ldr	r0, [r5, #4]
   1e54c:	mul	r0, r8, r0
   1e550:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e554:	str	r0, [r5, #20]
   1e558:	ldr	r0, [r5, #4]
   1e55c:	mul	r0, r8, r0
   1e560:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e564:	ldr	r3, [r5, #12]
   1e568:	str	r0, [r5, #24]
   1e56c:	cmp	r3, #0
   1e570:	bne	1e580 <__assert_fail@plt+0xd098>
   1e574:	mov	r3, #12
   1e578:	str	r3, [sp, #24]
   1e57c:	b	1e3b8 <__assert_fail@plt+0xced0>
   1e580:	ldr	r3, [r5, #16]
   1e584:	cmp	r3, #0
   1e588:	beq	1e574 <__assert_fail@plt+0xd08c>
   1e58c:	ldr	r3, [r5, #20]
   1e590:	clz	r0, r0
   1e594:	lsr	r0, r0, #5
   1e598:	cmp	r3, #0
   1e59c:	moveq	r0, #1
   1e5a0:	cmp	r0, #0
   1e5a4:	str	r0, [sp, #12]
   1e5a8:	bne	1e574 <__assert_fail@plt+0xd08c>
   1e5ac:	ldr	r0, [r6, #24]
   1e5b0:	lsl	r0, r0, #2
   1e5b4:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e5b8:	cmp	r0, #0
   1e5bc:	str	r0, [r5, #132]	; 0x84
   1e5c0:	ldrne	r2, [r6, #24]
   1e5c4:	ldrne	r3, [sp, #12]
   1e5c8:	bne	1e69c <__assert_fail@plt+0xd1b4>
   1e5cc:	mov	r2, r6
   1e5d0:	ldr	r1, [pc, #1500]	; 1ebb4 <__assert_fail@plt+0xd6cc>
   1e5d4:	ldr	r0, [r5, #52]	; 0x34
   1e5d8:	bl	148b4 <__assert_fail@plt+0x33cc>
   1e5dc:	subs	r8, r0, #0
   1e5e0:	bne	1e684 <__assert_fail@plt+0xd19c>
   1e5e4:	mov	r2, r5
   1e5e8:	ldr	r1, [pc, #1480]	; 1ebb8 <__assert_fail@plt+0xd6d0>
   1e5ec:	ldr	r0, [r5, #52]	; 0x34
   1e5f0:	bl	148b4 <__assert_fail@plt+0x33cc>
   1e5f4:	subs	r8, r0, #0
   1e5f8:	bne	1e684 <__assert_fail@plt+0xd19c>
   1e5fc:	mov	r2, r5
   1e600:	ldr	r1, [pc, #1460]	; 1ebbc <__assert_fail@plt+0xd6d4>
   1e604:	ldr	r0, [r5, #52]	; 0x34
   1e608:	bl	16d7c <__assert_fail@plt+0x5894>
   1e60c:	mov	r2, r5
   1e610:	ldr	r1, [pc, #1448]	; 1ebc0 <__assert_fail@plt+0xd6d8>
   1e614:	ldr	r0, [r5, #52]	; 0x34
   1e618:	bl	16d7c <__assert_fail@plt+0x5894>
   1e61c:	subs	r8, r0, #0
   1e620:	bne	1e684 <__assert_fail@plt+0xd19c>
   1e624:	mov	sl, r8
   1e628:	mov	r9, r8
   1e62c:	ldr	r3, [r5, #8]
   1e630:	cmp	r3, r9
   1e634:	bne	1e648 <__assert_fail@plt+0xd160>
   1e638:	cmp	sl, #0
   1e63c:	beq	1e718 <__assert_fail@plt+0xd230>
   1e640:	mov	sl, #0
   1e644:	mov	r9, sl
   1e648:	mov	r3, #12
   1e64c:	mul	fp, r3, r9
   1e650:	ldr	r3, [r5, #24]
   1e654:	add	r3, r3, fp
   1e658:	ldr	r3, [r3, #4]
   1e65c:	cmp	r3, #0
   1e660:	bne	1e710 <__assert_fail@plt+0xd228>
   1e664:	mov	r3, #1
   1e668:	mov	r2, r9
   1e66c:	mov	r1, r5
   1e670:	add	r0, sp, #32
   1e674:	bl	1807c <__assert_fail@plt+0x6b94>
   1e678:	cmp	r0, #0
   1e67c:	beq	1e6f0 <__assert_fail@plt+0xd208>
   1e680:	mov	r8, r0
   1e684:	cmp	r8, #0
   1e688:	str	r8, [sp, #24]
   1e68c:	beq	1e734 <__assert_fail@plt+0xd24c>
   1e690:	b	1e3b8 <__assert_fail@plt+0xced0>
   1e694:	str	r3, [r0, r3, lsl #2]
   1e698:	add	r3, r3, #1
   1e69c:	cmp	r3, r2
   1e6a0:	bne	1e694 <__assert_fail@plt+0xd1ac>
   1e6a4:	mov	r2, r5
   1e6a8:	ldr	r1, [pc, #1300]	; 1ebc4 <__assert_fail@plt+0xd6dc>
   1e6ac:	ldr	r0, [r5, #52]	; 0x34
   1e6b0:	bl	16d7c <__assert_fail@plt+0x5894>
   1e6b4:	ldr	r2, [r6, #24]
   1e6b8:	mov	r3, #0
   1e6bc:	cmp	r3, r2
   1e6c0:	bne	1e6d8 <__assert_fail@plt+0xd1f0>
   1e6c4:	ldr	r0, [r5, #132]	; 0x84
   1e6c8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1e6cc:	mov	r3, #0
   1e6d0:	str	r3, [r5, #132]	; 0x84
   1e6d4:	b	1e5cc <__assert_fail@plt+0xd0e4>
   1e6d8:	ldr	r1, [r5, #132]	; 0x84
   1e6dc:	ldr	r1, [r1, r3, lsl #2]
   1e6e0:	cmp	r1, r3
   1e6e4:	bne	1e5cc <__assert_fail@plt+0xd0e4>
   1e6e8:	add	r3, r3, #1
   1e6ec:	b	1e6bc <__assert_fail@plt+0xd1d4>
   1e6f0:	ldr	r3, [r5, #24]
   1e6f4:	add	fp, r3, fp
   1e6f8:	ldr	r3, [fp, #4]
   1e6fc:	cmp	r3, #0
   1e700:	bne	1e710 <__assert_fail@plt+0xd228>
   1e704:	ldr	r0, [sp, #40]	; 0x28
   1e708:	mov	sl, #1
   1e70c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1e710:	add	r9, r9, #1
   1e714:	b	1e62c <__assert_fail@plt+0xd144>
   1e718:	ldrb	r3, [r6, #28]
   1e71c:	tst	r3, #16
   1e720:	beq	1e814 <__assert_fail@plt+0xd32c>
   1e724:	ldr	r3, [r5, #76]	; 0x4c
   1e728:	cmp	r3, #0
   1e72c:	streq	r3, [sp, #24]
   1e730:	bne	1e82c <__assert_fail@plt+0xd344>
   1e734:	ldrb	r3, [r4, #88]	; 0x58
   1e738:	clz	r7, r7
   1e73c:	lsr	r7, r7, #5
   1e740:	ands	r7, r7, r3, lsr #2
   1e744:	beq	1e75c <__assert_fail@plt+0xd274>
   1e748:	ldr	r3, [r6, #20]
   1e74c:	cmp	r3, #0
   1e750:	moveq	r2, r3
   1e754:	ldreq	ip, [r4, #8]
   1e758:	beq	1e94c <__assert_fail@plt+0xd464>
   1e75c:	mov	r8, #12
   1e760:	add	r0, sp, #32
   1e764:	ldr	r1, [r4, #24]
   1e768:	ldr	r3, [r4, #52]	; 0x34
   1e76c:	ldr	r3, [r3, #12]
   1e770:	ldr	r3, [r3, #28]
   1e774:	mla	r1, r8, r3, r1
   1e778:	str	r3, [r4, #72]	; 0x48
   1e77c:	bl	17024 <__assert_fail@plt+0x5b3c>
   1e780:	cmp	r0, #0
   1e784:	mov	r5, r0
   1e788:	str	r0, [sp, #28]
   1e78c:	bne	1e7c8 <__assert_fail@plt+0xd2e0>
   1e790:	ldr	r3, [r4, #76]	; 0x4c
   1e794:	cmp	r3, #0
   1e798:	movgt	r7, r0
   1e79c:	addgt	r9, sp, #32
   1e7a0:	bgt	1ea70 <__assert_fail@plt+0xd588>
   1e7a4:	mov	r3, #0
   1e7a8:	add	r2, sp, #32
   1e7ac:	mov	r1, r4
   1e7b0:	add	r0, sp, #28
   1e7b4:	bl	171dc <__assert_fail@plt+0x5cf4>
   1e7b8:	cmp	r0, #0
   1e7bc:	str	r0, [r4, #36]	; 0x24
   1e7c0:	bne	1eaf8 <__assert_fail@plt+0xd610>
   1e7c4:	ldr	r5, [sp, #28]
   1e7c8:	str	r5, [sp, #24]
   1e7cc:	ldr	r7, [r6]
   1e7d0:	ldr	r5, [r7, #56]	; 0x38
   1e7d4:	cmp	r5, #0
   1e7d8:	bne	1eb80 <__assert_fail@plt+0xd698>
   1e7dc:	mov	r3, #31
   1e7e0:	str	r5, [r7, #52]	; 0x34
   1e7e4:	str	r5, [r7, #56]	; 0x38
   1e7e8:	str	r3, [r7, #64]	; 0x40
   1e7ec:	ldr	r0, [r7, #16]
   1e7f0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1e7f4:	add	r0, sp, #44	; 0x2c
   1e7f8:	str	r5, [r7, #16]
   1e7fc:	bl	15c84 <__assert_fail@plt+0x479c>
   1e800:	ldr	r3, [sp, #24]
   1e804:	cmp	r3, #0
   1e808:	bne	1e3ec <__assert_fail@plt+0xcf04>
   1e80c:	ldr	r0, [sp, #24]
   1e810:	b	1eb98 <__assert_fail@plt+0xd6b0>
   1e814:	ldr	r3, [r6, #24]
   1e818:	cmp	r3, #0
   1e81c:	beq	1e724 <__assert_fail@plt+0xd23c>
   1e820:	ldrb	r3, [r5, #88]	; 0x58
   1e824:	tst	r3, #1
   1e828:	beq	1e724 <__assert_fail@plt+0xd23c>
   1e82c:	mov	sl, #12
   1e830:	mul	r0, sl, r9
   1e834:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1e838:	cmp	r0, #0
   1e83c:	str	r0, [r5, #28]
   1e840:	movne	r3, #0
   1e844:	movne	ip, r3
   1e848:	beq	1e574 <__assert_fail@plt+0xd08c>
   1e84c:	ldr	r2, [r5, #8]
   1e850:	cmp	r2, r3
   1e854:	bhi	1e89c <__assert_fail@plt+0xd3b4>
   1e858:	mov	r9, #0
   1e85c:	mov	r2, #12
   1e860:	ldr	r3, [r5, #8]
   1e864:	cmp	r3, r9
   1e868:	bls	1e684 <__assert_fail@plt+0xd19c>
   1e86c:	ldr	r3, [r5, #24]
   1e870:	mul	fp, r2, r9
   1e874:	mov	sl, #0
   1e878:	add	r3, r3, fp
   1e87c:	ldr	r3, [r3, #8]
   1e880:	ldr	r1, [r5, #24]
   1e884:	add	r1, r1, fp
   1e888:	ldr	r1, [r1, #4]
   1e88c:	cmp	sl, r1
   1e890:	blt	1e8bc <__assert_fail@plt+0xd3d4>
   1e894:	add	r9, r9, #1
   1e898:	b	1e860 <__assert_fail@plt+0xd378>
   1e89c:	ldr	r0, [r5, #28]
   1e8a0:	mul	r1, sl, r3
   1e8a4:	add	r3, r3, #1
   1e8a8:	add	r2, r0, r1
   1e8ac:	str	ip, [r0, r1]
   1e8b0:	str	ip, [r2, #4]
   1e8b4:	str	ip, [r2, #8]
   1e8b8:	b	1e84c <__assert_fail@plt+0xd364>
   1e8bc:	ldr	ip, [r3, sl, lsl #2]
   1e8c0:	mov	r1, r9
   1e8c4:	str	r3, [sp, #20]
   1e8c8:	ldr	r0, [r5, #28]
   1e8cc:	mla	r0, r2, ip, r0
   1e8d0:	bl	14e7c <__assert_fail@plt+0x3994>
   1e8d4:	cmp	r0, #0
   1e8d8:	beq	1e8ec <__assert_fail@plt+0xd404>
   1e8dc:	add	sl, sl, #1
   1e8e0:	mov	r2, #12
   1e8e4:	ldr	r3, [sp, #20]
   1e8e8:	b	1e880 <__assert_fail@plt+0xd398>
   1e8ec:	mov	r8, #12
   1e8f0:	b	1e684 <__assert_fail@plt+0xd19c>
   1e8f4:	ldr	r1, [r4]
   1e8f8:	lsl	lr, r2, #3
   1e8fc:	add	r0, r1, lr
   1e900:	ldrb	r0, [r0, #4]
   1e904:	sub	r0, r0, #1
   1e908:	cmp	r0, #11
   1e90c:	ldrls	pc, [pc, r0, lsl #2]
   1e910:	b	1e9f4 <__assert_fail@plt+0xd50c>
   1e914:	andeq	lr, r1, ip, lsl #19
   1e918:	andeq	lr, r1, r8, asr #18
   1e91c:	ldrdeq	lr, [r1], -r0
   1e920:	andeq	lr, r1, r8, asr #18
   1e924:	andeq	lr, r1, r4, asr #18
   1e928:	andeq	lr, r1, ip, asr r7
   1e92c:	strdeq	lr, [r1], -r4
   1e930:	andeq	lr, r1, r8, asr #18
   1e934:	andeq	lr, r1, r8, asr #18
   1e938:	andeq	lr, r1, r8, asr #18
   1e93c:	andeq	lr, r1, r8, asr #18
   1e940:	andeq	lr, r1, r4, lsr #19
   1e944:	mov	r3, r7
   1e948:	add	r2, r2, #1
   1e94c:	cmp	r2, ip
   1e950:	bne	1e8f4 <__assert_fail@plt+0xd40c>
   1e954:	ldr	r2, [sp, #12]
   1e958:	orr	r0, r2, r3
   1e95c:	tst	r0, #255	; 0xff
   1e960:	bne	1ea40 <__assert_fail@plt+0xd558>
   1e964:	mov	r2, #1
   1e968:	ldr	r1, [r4, #76]	; 0x4c
   1e96c:	str	r2, [r4, #92]	; 0x5c
   1e970:	ldrb	r2, [r4, #88]	; 0x58
   1e974:	cmp	r1, #0
   1e978:	orrgt	r3, r3, #1
   1e97c:	and	r2, r2, #251	; 0xfb
   1e980:	bfi	r2, r3, #1, #1
   1e984:	strb	r2, [r4, #88]	; 0x58
   1e988:	b	1e75c <__assert_fail@plt+0xd274>
   1e98c:	ldrsb	r1, [r1, lr]
   1e990:	ldr	r0, [sp, #12]
   1e994:	cmp	r1, #0
   1e998:	movlt	r0, r7
   1e99c:	str	r0, [sp, #12]
   1e9a0:	b	1e948 <__assert_fail@plt+0xd460>
   1e9a4:	ldr	r1, [r1, r2, lsl #3]
   1e9a8:	cmp	r1, #32
   1e9ac:	beq	1e948 <__assert_fail@plt+0xd460>
   1e9b0:	bhi	1e9c0 <__assert_fail@plt+0xd4d8>
   1e9b4:	cmp	r1, #16
   1e9b8:	beq	1e948 <__assert_fail@plt+0xd460>
   1e9bc:	b	1e75c <__assert_fail@plt+0xd274>
   1e9c0:	cmp	r1, #64	; 0x40
   1e9c4:	beq	1e948 <__assert_fail@plt+0xd460>
   1e9c8:	cmp	r1, #128	; 0x80
   1e9cc:	b	1e9b8 <__assert_fail@plt+0xd4d0>
   1e9d0:	ldr	r1, [r1, r2, lsl #3]
   1e9d4:	add	r0, r1, #12
   1e9d8:	add	r1, r1, #28
   1e9dc:	ldr	lr, [r0, #4]!
   1e9e0:	cmp	lr, #0
   1e9e4:	bne	1e75c <__assert_fail@plt+0xd274>
   1e9e8:	cmp	r1, r0
   1e9ec:	bne	1e9dc <__assert_fail@plt+0xd4f4>
   1e9f0:	b	1e948 <__assert_fail@plt+0xd460>
   1e9f4:	bl	114d0 <abort@plt>
   1e9f8:	ldr	r5, [r4]
   1e9fc:	lsl	lr, r2, #3
   1ea00:	add	r1, r5, lr
   1ea04:	ldrb	r0, [r1, #4]
   1ea08:	cmp	r0, #1
   1ea0c:	bne	1ea34 <__assert_fail@plt+0xd54c>
   1ea10:	ldrsb	r0, [r5, lr]
   1ea14:	cmp	r0, #0
   1ea18:	ldrblt	r0, [r1, #6]
   1ea1c:	bfclt	r0, #5, #1
   1ea20:	strblt	r0, [r1, #6]
   1ea24:	add	r2, r2, #1
   1ea28:	cmp	r2, ip
   1ea2c:	bne	1e9f8 <__assert_fail@plt+0xd510>
   1ea30:	b	1e964 <__assert_fail@plt+0xd47c>
   1ea34:	cmp	r0, #5
   1ea38:	strbeq	r7, [r1, #4]
   1ea3c:	b	1ea24 <__assert_fail@plt+0xd53c>
   1ea40:	mov	r2, #0
   1ea44:	mov	r7, #7
   1ea48:	b	1ea28 <__assert_fail@plt+0xd540>
   1ea4c:	ldr	r0, [sp, #40]	; 0x28
   1ea50:	ldr	r1, [r4]
   1ea54:	ldr	r3, [r0, r7, lsl #2]
   1ea58:	add	ip, r1, r3, lsl #3
   1ea5c:	ldrb	r2, [ip, #4]
   1ea60:	cmp	r2, #4
   1ea64:	moveq	r2, #0
   1ea68:	beq	1eaa8 <__assert_fail@plt+0xd5c0>
   1ea6c:	add	r7, r7, #1
   1ea70:	ldr	fp, [sp, #36]	; 0x24
   1ea74:	cmp	r7, fp
   1ea78:	blt	1ea4c <__assert_fail@plt+0xd564>
   1ea7c:	b	1e7a4 <__assert_fail@plt+0xd2bc>
   1ea80:	ldr	lr, [r0, r2, lsl #2]
   1ea84:	add	sl, r1, lr, lsl #3
   1ea88:	ldrb	sl, [sl, #4]
   1ea8c:	cmp	sl, #9
   1ea90:	bne	1eaa4 <__assert_fail@plt+0xd5bc>
   1ea94:	ldr	sl, [r1, lr, lsl #3]
   1ea98:	ldr	lr, [ip]
   1ea9c:	cmp	sl, lr
   1eaa0:	beq	1eab4 <__assert_fail@plt+0xd5cc>
   1eaa4:	add	r2, r2, #1
   1eaa8:	cmp	r2, fp
   1eaac:	blt	1ea80 <__assert_fail@plt+0xd598>
   1eab0:	beq	1ea6c <__assert_fail@plt+0xd584>
   1eab4:	ldr	r2, [r4, #20]
   1eab8:	mov	r0, r9
   1eabc:	mla	r3, r8, r3, r2
   1eac0:	ldr	r3, [r3, #8]
   1eac4:	ldr	sl, [r3]
   1eac8:	mov	r1, sl
   1eacc:	bl	14840 <__assert_fail@plt+0x3358>
   1ead0:	cmp	r0, #0
   1ead4:	bne	1ea6c <__assert_fail@plt+0xd584>
   1ead8:	ldr	r1, [r4, #24]
   1eadc:	mov	r0, r9
   1eae0:	mla	r1, r8, sl, r1
   1eae4:	bl	17f1c <__assert_fail@plt+0x6a34>
   1eae8:	subs	r7, r0, #0
   1eaec:	beq	1ea6c <__assert_fail@plt+0xd584>
   1eaf0:	mov	r5, r7
   1eaf4:	b	1e7c8 <__assert_fail@plt+0xd2e0>
   1eaf8:	ldrsb	r3, [r0, #52]	; 0x34
   1eafc:	cmp	r3, #0
   1eb00:	strge	r0, [r4, #40]	; 0x28
   1eb04:	strge	r0, [r4, #44]	; 0x2c
   1eb08:	strge	r0, [r4, #48]	; 0x30
   1eb0c:	bge	1eb74 <__assert_fail@plt+0xd68c>
   1eb10:	mov	r3, #1
   1eb14:	add	r2, sp, #32
   1eb18:	mov	r1, r4
   1eb1c:	add	r0, sp, #28
   1eb20:	bl	171dc <__assert_fail@plt+0x5cf4>
   1eb24:	mov	r3, #2
   1eb28:	add	r2, sp, #32
   1eb2c:	str	r0, [r4, #40]	; 0x28
   1eb30:	mov	r1, r4
   1eb34:	add	r0, sp, #28
   1eb38:	bl	171dc <__assert_fail@plt+0x5cf4>
   1eb3c:	mov	r3, #6
   1eb40:	add	r2, sp, #32
   1eb44:	str	r0, [r4, #44]	; 0x2c
   1eb48:	mov	r1, r4
   1eb4c:	add	r0, sp, #28
   1eb50:	bl	171dc <__assert_fail@plt+0x5cf4>
   1eb54:	ldr	r3, [r4, #40]	; 0x28
   1eb58:	str	r0, [r4, #48]	; 0x30
   1eb5c:	cmp	r3, #0
   1eb60:	beq	1e7c4 <__assert_fail@plt+0xd2dc>
   1eb64:	ldr	r3, [r4, #44]	; 0x2c
   1eb68:	cmp	r0, #0
   1eb6c:	cmpne	r3, #0
   1eb70:	beq	1e7c4 <__assert_fail@plt+0xd2dc>
   1eb74:	ldr	r0, [sp, #40]	; 0x28
   1eb78:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1eb7c:	b	1e7c8 <__assert_fail@plt+0xd2e0>
   1eb80:	ldr	r8, [r5]
   1eb84:	mov	r0, r5
   1eb88:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1eb8c:	mov	r5, r8
   1eb90:	b	1e7d4 <__assert_fail@plt+0xd2ec>
   1eb94:	mov	r0, #12
   1eb98:	add	sp, sp, #132	; 0x84
   1eb9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eba0:	beq	feac964c <opterr@@GLIBC_2.4+0xfea974a4>
   1eba4:	andeq	r1, r2, r7, ror r4
   1eba8:	andeq	r1, r2, r0, asr r2
	...
   1ebb4:	andeq	r5, r1, r8, asr r1
   1ebb8:	andeq	r7, r1, r0, asr r4
   1ebbc:	andeq	r6, r1, ip, lsr #26
   1ebc0:	andeq	r5, r1, r8, ror sp
   1ebc4:	muleq	r1, r4, ip
   1ebc8:	ldr	r3, [pc, #92]	; 1ec2c <__assert_fail@plt+0xd744>
   1ebcc:	mov	ip, r2
   1ebd0:	push	{r4, lr}
   1ebd4:	ldrb	r2, [r2, #28]
   1ebd8:	ldr	r3, [r3]
   1ebdc:	ubfx	lr, r3, #25, #1
   1ebe0:	bfi	r2, lr, #4, #1
   1ebe4:	mvn	r2, r2, lsl #25
   1ebe8:	mvn	r2, r2, lsr #25
   1ebec:	strb	r2, [ip, #28]
   1ebf0:	mov	r2, r1
   1ebf4:	mov	r1, r0
   1ebf8:	mov	r0, ip
   1ebfc:	bl	1e038 <__assert_fail@plt+0xcb50>
   1ec00:	subs	r2, r0, #0
   1ec04:	popeq	{r4, pc}
   1ec08:	mov	r0, #0
   1ec0c:	pop	{r4, lr}
   1ec10:	ldr	r3, [pc, #24]	; 1ec30 <__assert_fail@plt+0xd748>
   1ec14:	add	r1, r3, #32
   1ec18:	add	r3, r3, r2, lsl #2
   1ec1c:	mov	r2, #5
   1ec20:	ldr	r3, [r3, #416]	; 0x1a0
   1ec24:	add	r1, r1, r3
   1ec28:	b	11278 <dcgettext@plt>
   1ec2c:	strdeq	r2, [r3], -r0
   1ec30:	andeq	r1, r2, r0, asr r2
   1ec34:	ldr	r3, [pc, #12]	; 1ec48 <__assert_fail@plt+0xd760>
   1ec38:	ldr	r2, [r3]
   1ec3c:	str	r0, [r3]
   1ec40:	mov	r0, r2
   1ec44:	bx	lr
   1ec48:	strdeq	r2, [r3], -r0
   1ec4c:	push	{r4, r5, r6, lr}
   1ec50:	mov	r2, #256	; 0x100
   1ec54:	mov	r4, r0
   1ec58:	mov	r1, #0
   1ec5c:	ldr	r5, [r0]
   1ec60:	ldr	r6, [r0, #16]
   1ec64:	mov	r0, r6
   1ec68:	bl	113ec <memset@plt>
   1ec6c:	mov	r2, r6
   1ec70:	mov	r0, r4
   1ec74:	ldr	r1, [r5, #36]	; 0x24
   1ec78:	bl	1779c <__assert_fail@plt+0x62b4>
   1ec7c:	ldr	r3, [r5, #36]	; 0x24
   1ec80:	ldr	r1, [r5, #40]	; 0x28
   1ec84:	cmp	r3, r1
   1ec88:	beq	1ec98 <__assert_fail@plt+0xd7b0>
   1ec8c:	mov	r2, r6
   1ec90:	mov	r0, r4
   1ec94:	bl	1779c <__assert_fail@plt+0x62b4>
   1ec98:	ldr	r3, [r5, #36]	; 0x24
   1ec9c:	ldr	r1, [r5, #44]	; 0x2c
   1eca0:	cmp	r3, r1
   1eca4:	beq	1ecb4 <__assert_fail@plt+0xd7cc>
   1eca8:	mov	r2, r6
   1ecac:	mov	r0, r4
   1ecb0:	bl	1779c <__assert_fail@plt+0x62b4>
   1ecb4:	ldr	r3, [r5, #36]	; 0x24
   1ecb8:	ldr	r1, [r5, #48]	; 0x30
   1ecbc:	cmp	r3, r1
   1ecc0:	beq	1ecd0 <__assert_fail@plt+0xd7e8>
   1ecc4:	mov	r2, r6
   1ecc8:	mov	r0, r4
   1eccc:	bl	1779c <__assert_fail@plt+0x62b4>
   1ecd0:	ldrb	r3, [r4, #28]
   1ecd4:	mov	r0, #0
   1ecd8:	orr	r3, r3, #8
   1ecdc:	strb	r3, [r4, #28]
   1ece0:	pop	{r4, r5, r6, pc}
   1ece4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ece8:	sub	sp, sp, #44	; 0x2c
   1ecec:	cmp	r3, r2
   1ecf0:	ldr	lr, [r0]
   1ecf4:	ldr	ip, [sp, #80]	; 0x50
   1ecf8:	ldr	r4, [sp, #88]	; 0x58
   1ecfc:	str	lr, [sp, #24]
   1ed00:	movle	lr, #0
   1ed04:	movgt	lr, #1
   1ed08:	orrs	lr, lr, r3, lsr #31
   1ed0c:	add	r6, r3, ip
   1ed10:	mvnne	r4, #0
   1ed14:	bne	1ee80 <__assert_fail@plt+0xd998>
   1ed18:	cmp	r6, r2
   1ed1c:	bgt	1ee8c <__assert_fail@plt+0xd9a4>
   1ed20:	cmp	ip, #0
   1ed24:	cmpge	r3, r6
   1ed28:	movgt	lr, #1
   1ed2c:	movle	lr, #0
   1ed30:	bgt	1ee8c <__assert_fail@plt+0xd9a4>
   1ed34:	cmp	r6, #0
   1ed38:	movlt	r6, lr
   1ed3c:	blt	1ed54 <__assert_fail@plt+0xd86c>
   1ed40:	cmp	r3, r6
   1ed44:	movgt	lr, #0
   1ed48:	movle	lr, #1
   1ed4c:	ands	ip, lr, ip, lsr #31
   1ed50:	movne	r6, #0
   1ed54:	ldr	lr, [pc, #672]	; 1effc <__assert_fail@plt+0xdb14>
   1ed58:	mov	ip, #1
   1ed5c:	mov	r8, r3
   1ed60:	mov	r9, r1
   1ed64:	mov	r7, r0
   1ed68:	str	r2, [sp, #32]
   1ed6c:	ldr	r5, [pc, #652]	; 1f000 <__assert_fail@plt+0xdb18>
   1ed70:	cmp	lr, #0
   1ed74:	moveq	ip, lr
   1ed78:	mov	lr, #1
   1ed7c:	cmp	r5, #0
   1ed80:	moveq	lr, r5
   1ed84:	orr	ip, ip, lr
   1ed88:	ands	r3, ip, #255	; 0xff
   1ed8c:	str	r3, [sp, #28]
   1ed90:	beq	1eda0 <__assert_fail@plt+0xd8b8>
   1ed94:	ldr	r3, [sp, #24]
   1ed98:	add	r0, r3, #136	; 0x88
   1ed9c:	bl	11200 <pthread_mutex_lock@plt>
   1eda0:	ldrb	r2, [r7, #28]
   1eda4:	cmp	r6, r8
   1eda8:	ubfx	fp, r2, #5, #2
   1edac:	ble	1edcc <__assert_fail@plt+0xd8e4>
   1edb0:	ldr	r1, [r7, #16]
   1edb4:	cmp	r1, #0
   1edb8:	beq	1edcc <__assert_fail@plt+0xd8e4>
   1edbc:	tst	r2, #8
   1edc0:	bne	1edcc <__assert_fail@plt+0xd8e4>
   1edc4:	mov	r0, r7
   1edc8:	bl	1ec4c <__assert_fail@plt+0xd764>
   1edcc:	ldrb	r1, [r7, #28]
   1edd0:	ubfx	r2, r1, #4, #1
   1edd4:	cmp	r4, #0
   1edd8:	orreq	r2, r2, #1
   1eddc:	ands	r2, r2, #255	; 0xff
   1ede0:	movne	r5, #1
   1ede4:	movne	r4, #0
   1ede8:	bne	1ee14 <__assert_fail@plt+0xd92c>
   1edec:	and	r1, r1, #6
   1edf0:	ldr	r5, [r7, #24]
   1edf4:	cmp	r1, #4
   1edf8:	bne	1ee94 <__assert_fail@plt+0xd9ac>
   1edfc:	ldr	r1, [r4]
   1ee00:	cmp	r5, r1
   1ee04:	bcc	1ee94 <__assert_fail@plt+0xd9ac>
   1ee08:	subs	r5, r1, #0
   1ee0c:	movle	r5, #1
   1ee10:	movle	r4, r2
   1ee14:	lsl	r0, r5, #3
   1ee18:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1ee1c:	subs	sl, r0, #0
   1ee20:	mvneq	r4, #1
   1ee24:	beq	1ee68 <__assert_fail@plt+0xd980>
   1ee28:	ldr	r2, [sp, #84]	; 0x54
   1ee2c:	mov	r1, r9
   1ee30:	mov	r3, r8
   1ee34:	mov	r0, r7
   1ee38:	str	r6, [sp]
   1ee3c:	stmib	sp, {r2, r5, sl, fp}
   1ee40:	ldr	r2, [sp, #32]
   1ee44:	bl	1b6f0 <__assert_fail@plt+0xa208>
   1ee48:	subs	r9, r0, #0
   1ee4c:	beq	1ee9c <__assert_fail@plt+0xd9b4>
   1ee50:	cmp	r9, #1
   1ee54:	mvneq	r4, #0
   1ee58:	beq	1ee60 <__assert_fail@plt+0xd978>
   1ee5c:	mvn	r4, #1
   1ee60:	mov	r0, sl
   1ee64:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1ee68:	ldr	r3, [sp, #28]
   1ee6c:	cmp	r3, #0
   1ee70:	beq	1ee80 <__assert_fail@plt+0xd998>
   1ee74:	ldr	r3, [sp, #24]
   1ee78:	add	r0, r3, #136	; 0x88
   1ee7c:	bl	11158 <pthread_mutex_unlock@plt>
   1ee80:	mov	r0, r4
   1ee84:	add	sp, sp, #44	; 0x2c
   1ee88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee8c:	mov	r6, r2
   1ee90:	b	1ed54 <__assert_fail@plt+0xd86c>
   1ee94:	add	r5, r5, #1
   1ee98:	b	1ee14 <__assert_fail@plt+0xd92c>
   1ee9c:	cmp	r4, #0
   1eea0:	bne	1eebc <__assert_fail@plt+0xd9d4>
   1eea4:	ldrb	r3, [sp, #92]	; 0x5c
   1eea8:	ldr	r4, [sl]
   1eeac:	cmp	r3, #0
   1eeb0:	ldrne	r4, [sl, #4]
   1eeb4:	subne	r4, r4, r8
   1eeb8:	b	1ee60 <__assert_fail@plt+0xd978>
   1eebc:	ldrb	r6, [r7, #28]
   1eec0:	add	fp, r5, #1
   1eec4:	ubfx	r6, r6, #1, #2
   1eec8:	cmp	r6, #0
   1eecc:	bne	1ef34 <__assert_fail@plt+0xda4c>
   1eed0:	lsl	r6, fp, #2
   1eed4:	mov	r0, r6
   1eed8:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1eedc:	cmp	r0, #0
   1eee0:	str	r0, [r4, #4]
   1eee4:	bne	1ef08 <__assert_fail@plt+0xda20>
   1eee8:	mov	r6, #0
   1eeec:	ldrb	r3, [r7, #28]
   1eef0:	bfi	r3, r6, #1, #2
   1eef4:	strb	r3, [r7, #28]
   1eef8:	and	r3, r3, #6
   1eefc:	cmp	r3, #0
   1ef00:	bne	1eea4 <__assert_fail@plt+0xd9bc>
   1ef04:	b	1ee5c <__assert_fail@plt+0xd974>
   1ef08:	mov	r0, r6
   1ef0c:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1ef10:	cmp	r0, #0
   1ef14:	mov	r6, r0
   1ef18:	str	r0, [r4, #8]
   1ef1c:	movne	r6, #1
   1ef20:	strne	fp, [r4]
   1ef24:	bne	1efa4 <__assert_fail@plt+0xdabc>
   1ef28:	ldr	r0, [r4, #4]
   1ef2c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1ef30:	b	1eeec <__assert_fail@plt+0xda04>
   1ef34:	cmp	r6, #1
   1ef38:	movne	r6, #2
   1ef3c:	bne	1efa4 <__assert_fail@plt+0xdabc>
   1ef40:	ldr	r3, [r4]
   1ef44:	cmp	r3, fp
   1ef48:	bcs	1efa4 <__assert_fail@plt+0xdabc>
   1ef4c:	lsl	r2, fp, #2
   1ef50:	ldr	r0, [r4, #4]
   1ef54:	mov	r1, r2
   1ef58:	str	r2, [sp, #36]	; 0x24
   1ef5c:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1ef60:	subs	r3, r0, #0
   1ef64:	str	r3, [sp, #32]
   1ef68:	beq	1eee8 <__assert_fail@plt+0xda00>
   1ef6c:	ldr	r2, [sp, #36]	; 0x24
   1ef70:	ldr	r0, [r4, #8]
   1ef74:	mov	r1, r2
   1ef78:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1ef7c:	ldr	r3, [sp, #32]
   1ef80:	subs	r2, r0, #0
   1ef84:	strne	fp, [r4]
   1ef88:	strne	r2, [r4, #8]
   1ef8c:	strne	r3, [r4, #4]
   1ef90:	bne	1efa4 <__assert_fail@plt+0xdabc>
   1ef94:	mov	r0, r3
   1ef98:	str	r2, [sp, #32]
   1ef9c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1efa0:	b	1eee8 <__assert_fail@plt+0xda00>
   1efa4:	add	r3, sl, #4
   1efa8:	cmp	r5, r9
   1efac:	bgt	1efdc <__assert_fail@plt+0xdaf4>
   1efb0:	bic	r5, r5, r5, asr #31
   1efb4:	mvn	r3, #0
   1efb8:	ldr	r2, [r4]
   1efbc:	cmp	r5, r2
   1efc0:	bcs	1eeec <__assert_fail@plt+0xda04>
   1efc4:	ldr	r2, [r4, #8]
   1efc8:	str	r3, [r2, r5, lsl #2]
   1efcc:	ldr	r2, [r4, #4]
   1efd0:	str	r3, [r2, r5, lsl #2]
   1efd4:	add	r5, r5, #1
   1efd8:	b	1efb8 <__assert_fail@plt+0xdad0>
   1efdc:	ldr	r1, [sl, r9, lsl #3]
   1efe0:	ldr	r2, [r4, #4]
   1efe4:	str	r1, [r2, r9, lsl #2]
   1efe8:	ldr	r1, [r3, r9, lsl #3]
   1efec:	ldr	r2, [r4, #8]
   1eff0:	str	r1, [r2, r9, lsl #2]
   1eff4:	add	r9, r9, #1
   1eff8:	b	1efa8 <__assert_fail@plt+0xdac0>
	...
   1f004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f008:	sub	sp, sp, #20
   1f00c:	mov	sl, r3
   1f010:	ldr	r5, [sp, #56]	; 0x38
   1f014:	ldr	r9, [sp, #72]	; 0x48
   1f018:	orr	r3, r5, r2
   1f01c:	orrs	r3, r3, r9
   1f020:	bpl	1f034 <__assert_fail@plt+0xdb4c>
   1f024:	mvn	r4, #1
   1f028:	mov	r0, r4
   1f02c:	add	sp, sp, #20
   1f030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f034:	adds	r8, r2, r5
   1f038:	mov	r4, r2
   1f03c:	bvs	1f024 <__assert_fail@plt+0xdb3c>
   1f040:	cmp	r5, #0
   1f044:	mov	fp, r0
   1f048:	mov	r7, r1
   1f04c:	beq	1f0d0 <__assert_fail@plt+0xdbe8>
   1f050:	cmp	r2, #0
   1f054:	moveq	r7, sl
   1f058:	moveq	r6, r2
   1f05c:	beq	1f090 <__assert_fail@plt+0xdba8>
   1f060:	mov	r0, r8
   1f064:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1f068:	subs	r6, r0, #0
   1f06c:	beq	1f024 <__assert_fail@plt+0xdb3c>
   1f070:	mov	r1, r7
   1f074:	mov	r2, r4
   1f078:	bl	11218 <memcpy@plt>
   1f07c:	mov	r7, r6
   1f080:	mov	r2, r5
   1f084:	mov	r1, sl
   1f088:	add	r0, r6, r4
   1f08c:	bl	11218 <memcpy@plt>
   1f090:	ldrb	r3, [sp, #76]	; 0x4c
   1f094:	mov	r2, r8
   1f098:	mov	r1, r7
   1f09c:	mov	r0, fp
   1f0a0:	str	r9, [sp, #4]
   1f0a4:	str	r3, [sp, #12]
   1f0a8:	ldr	r3, [sp, #68]	; 0x44
   1f0ac:	str	r3, [sp, #8]
   1f0b0:	ldr	r3, [sp, #64]	; 0x40
   1f0b4:	str	r3, [sp]
   1f0b8:	ldr	r3, [sp, #60]	; 0x3c
   1f0bc:	bl	1ece4 <__assert_fail@plt+0xd7fc>
   1f0c0:	mov	r4, r0
   1f0c4:	mov	r0, r6
   1f0c8:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1f0cc:	b	1f028 <__assert_fail@plt+0xdb40>
   1f0d0:	mov	r6, r5
   1f0d4:	b	1f090 <__assert_fail@plt+0xdba8>
   1f0d8:	push	{r4, r5, r6, r7, r8, lr}
   1f0dc:	mov	r3, #0
   1f0e0:	tst	r2, #1
   1f0e4:	mov	r4, r0
   1f0e8:	mov	r7, r1
   1f0ec:	mov	r6, r2
   1f0f0:	ldr	r5, [pc, #184]	; 1f1b0 <__assert_fail@plt+0xdcc8>
   1f0f4:	str	r3, [r0]
   1f0f8:	str	r3, [r0, #4]
   1f0fc:	str	r3, [r0, #8]
   1f100:	mov	r0, #256	; 0x100
   1f104:	ldr	r8, [pc, #168]	; 1f1b4 <__assert_fail@plt+0xdccc>
   1f108:	movne	r8, r5
   1f10c:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1f110:	cmp	r0, #0
   1f114:	str	r0, [r4, #16]
   1f118:	moveq	r5, #12
   1f11c:	beq	1f190 <__assert_fail@plt+0xdca8>
   1f120:	ldrb	r3, [r4, #28]
   1f124:	ands	r2, r6, #4
   1f128:	lsl	r5, r6, #21
   1f12c:	movne	r2, #1
   1f130:	ubfx	r6, r6, #3, #1
   1f134:	mov	r0, r7
   1f138:	and	r5, r5, #4194304	; 0x400000
   1f13c:	orr	r5, r5, r8
   1f140:	bicne	r5, r5, #64	; 0x40
   1f144:	bfi	r3, r2, #7, #1
   1f148:	orrne	r5, r5, #256	; 0x100
   1f14c:	bfi	r3, r6, #4, #1
   1f150:	strb	r3, [r4, #28]
   1f154:	mov	r3, #0
   1f158:	str	r3, [r4, #20]
   1f15c:	bl	11398 <strlen@plt>
   1f160:	mov	r2, r0
   1f164:	mov	r3, r5
   1f168:	mov	r1, r7
   1f16c:	mov	r0, r4
   1f170:	bl	1e038 <__assert_fail@plt+0xcb50>
   1f174:	cmp	r0, #16
   1f178:	mov	r5, r0
   1f17c:	beq	1f198 <__assert_fail@plt+0xdcb0>
   1f180:	cmp	r0, #0
   1f184:	bne	1f19c <__assert_fail@plt+0xdcb4>
   1f188:	mov	r0, r4
   1f18c:	bl	1ec4c <__assert_fail@plt+0xd764>
   1f190:	mov	r0, r5
   1f194:	pop	{r4, r5, r6, r7, r8, pc}
   1f198:	mov	r5, #8
   1f19c:	ldr	r0, [r4, #16]
   1f1a0:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1f1a4:	mov	r3, #0
   1f1a8:	str	r3, [r4, #16]
   1f1ac:	b	1f190 <__assert_fail@plt+0xdca8>
   1f1b0:	strdeq	fp, [r3], -ip
   1f1b4:	smlabteq	r1, r6, r2, r0
   1f1b8:	cmp	r0, #16
   1f1bc:	push	{r4, r5, r6, r7, r8, lr}
   1f1c0:	bls	1f1c8 <__assert_fail@plt+0xdce0>
   1f1c4:	bl	114d0 <abort@plt>
   1f1c8:	mov	r4, r3
   1f1cc:	ldr	r3, [pc, #88]	; 1f22c <__assert_fail@plt+0xdd44>
   1f1d0:	mov	r6, r2
   1f1d4:	mov	r2, #5
   1f1d8:	add	r1, r3, #32
   1f1dc:	add	r3, r3, r0, lsl #2
   1f1e0:	mov	r0, #0
   1f1e4:	ldr	r3, [r3, #416]	; 0x1a0
   1f1e8:	add	r1, r1, r3
   1f1ec:	bl	11278 <dcgettext@plt>
   1f1f0:	mov	r7, r0
   1f1f4:	bl	11398 <strlen@plt>
   1f1f8:	cmp	r4, #0
   1f1fc:	add	r5, r0, #1
   1f200:	beq	1f224 <__assert_fail@plt+0xdd3c>
   1f204:	cmp	r5, r4
   1f208:	mov	r1, r7
   1f20c:	subhi	r2, r4, #1
   1f210:	movhi	r3, #0
   1f214:	movls	r2, r5
   1f218:	mov	r0, r6
   1f21c:	strbhi	r3, [r6, r2]
   1f220:	bl	11218 <memcpy@plt>
   1f224:	mov	r0, r5
   1f228:	pop	{r4, r5, r6, r7, r8, pc}
   1f22c:	andeq	r1, r2, r0, asr r2
   1f230:	push	{r4, r5, r6, lr}
   1f234:	mov	r4, r0
   1f238:	ldr	r5, [r0]
   1f23c:	cmp	r5, #0
   1f240:	beq	1f280 <__assert_fail@plt+0xdd98>
   1f244:	ldr	r2, [pc, #92]	; 1f2a8 <__assert_fail@plt+0xddc0>
   1f248:	mov	r3, #1
   1f24c:	ldr	r1, [pc, #88]	; 1f2ac <__assert_fail@plt+0xddc4>
   1f250:	cmp	r2, #0
   1f254:	moveq	r3, r2
   1f258:	mov	r2, #1
   1f25c:	cmp	r1, #0
   1f260:	moveq	r2, r1
   1f264:	orr	r3, r3, r2
   1f268:	tst	r3, #1
   1f26c:	beq	1f278 <__assert_fail@plt+0xdd90>
   1f270:	add	r0, r5, #136	; 0x88
   1f274:	bl	111c4 <pthread_mutex_destroy@plt>
   1f278:	mov	r0, r5
   1f27c:	bl	174d4 <__assert_fail@plt+0x5fec>
   1f280:	mov	r5, #0
   1f284:	ldr	r0, [r4, #16]
   1f288:	str	r5, [r4]
   1f28c:	str	r5, [r4, #4]
   1f290:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1f294:	str	r5, [r4, #16]
   1f298:	ldr	r0, [r4, #20]
   1f29c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   1f2a0:	str	r5, [r4, #20]
   1f2a4:	pop	{r4, r5, r6, pc}
	...
   1f2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2b4:	sub	sp, sp, #36	; 0x24
   1f2b8:	ldr	r9, [sp, #72]	; 0x48
   1f2bc:	bics	ip, r9, #7
   1f2c0:	movne	r0, #2
   1f2c4:	bne	1f388 <__assert_fail@plt+0xdea0>
   1f2c8:	ands	fp, r9, #4
   1f2cc:	mov	r8, r3
   1f2d0:	str	r2, [sp, #28]
   1f2d4:	mov	r7, r1
   1f2d8:	mov	r6, r0
   1f2dc:	ldrne	fp, [r3]
   1f2e0:	ldrne	r5, [r3, #4]
   1f2e4:	bne	1f2f4 <__assert_fail@plt+0xde0c>
   1f2e8:	mov	r0, r1
   1f2ec:	bl	11398 <strlen@plt>
   1f2f0:	mov	r5, r0
   1f2f4:	ldr	r2, [pc, #148]	; 1f390 <__assert_fail@plt+0xdea8>
   1f2f8:	mov	r4, #1
   1f2fc:	ldr	r1, [pc, #144]	; 1f394 <__assert_fail@plt+0xdeac>
   1f300:	ldr	sl, [r6]
   1f304:	cmp	r2, #0
   1f308:	moveq	r4, r2
   1f30c:	mov	r2, #1
   1f310:	cmp	r1, #0
   1f314:	moveq	r2, r1
   1f318:	orr	r4, r4, r2
   1f31c:	ands	r4, r4, #255	; 0xff
   1f320:	beq	1f32c <__assert_fail@plt+0xde44>
   1f324:	add	r0, sl, #136	; 0x88
   1f328:	bl	11200 <pthread_mutex_lock@plt>
   1f32c:	ldrb	r2, [r6, #28]
   1f330:	mov	r1, r7
   1f334:	mov	r0, r6
   1f338:	str	r5, [sp]
   1f33c:	str	r5, [sp, #4]
   1f340:	str	r9, [sp, #16]
   1f344:	tst	r2, #16
   1f348:	ldreq	r3, [sp, #28]
   1f34c:	movne	r2, #0
   1f350:	streq	r8, [sp, #12]
   1f354:	strne	r2, [sp, #8]
   1f358:	strne	r2, [sp, #12]
   1f35c:	mov	r2, r5
   1f360:	streq	r3, [sp, #8]
   1f364:	mov	r3, fp
   1f368:	bl	1b6f0 <__assert_fail@plt+0xa208>
   1f36c:	cmp	r4, #0
   1f370:	mov	r5, r0
   1f374:	beq	1f380 <__assert_fail@plt+0xde98>
   1f378:	add	r0, sl, #136	; 0x88
   1f37c:	bl	11158 <pthread_mutex_unlock@plt>
   1f380:	adds	r0, r5, #0
   1f384:	movne	r0, #1
   1f388:	add	sp, sp, #36	; 0x24
   1f38c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1f398:	mov	ip, #1
   1f39c:	push	{r0, r1, r2, r3, r4, lr}
   1f3a0:	str	r2, [sp, #4]
   1f3a4:	str	ip, [sp, #12]
   1f3a8:	ldr	ip, [sp, #24]
   1f3ac:	str	ip, [sp, #8]
   1f3b0:	mov	ip, #0
   1f3b4:	str	ip, [sp]
   1f3b8:	bl	1ece4 <__assert_fail@plt+0xd7fc>
   1f3bc:	add	sp, sp, #20
   1f3c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3c4:	mov	ip, #0
   1f3c8:	push	{r0, r1, r2, r3, r4, lr}
   1f3cc:	str	r2, [sp, #4]
   1f3d0:	str	ip, [sp, #12]
   1f3d4:	ldr	ip, [sp, #28]
   1f3d8:	str	ip, [sp, #8]
   1f3dc:	ldr	ip, [sp, #24]
   1f3e0:	str	ip, [sp]
   1f3e4:	bl	1ece4 <__assert_fail@plt+0xd7fc>
   1f3e8:	add	sp, sp, #20
   1f3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3f0:	mov	ip, #1
   1f3f4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f3f8:	str	ip, [sp, #20]
   1f3fc:	ldr	ip, [sp, #44]	; 0x2c
   1f400:	str	ip, [sp, #16]
   1f404:	ldr	ip, [sp, #40]	; 0x28
   1f408:	str	ip, [sp, #12]
   1f40c:	mov	ip, #0
   1f410:	str	ip, [sp, #8]
   1f414:	ldr	ip, [sp, #36]	; 0x24
   1f418:	str	ip, [sp, #4]
   1f41c:	ldr	ip, [sp, #32]
   1f420:	str	ip, [sp]
   1f424:	bl	1f004 <__assert_fail@plt+0xdb1c>
   1f428:	add	sp, sp, #28
   1f42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f430:	mov	ip, #0
   1f434:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f438:	str	ip, [sp, #20]
   1f43c:	ldr	ip, [sp, #48]	; 0x30
   1f440:	str	ip, [sp, #16]
   1f444:	ldr	ip, [sp, #44]	; 0x2c
   1f448:	str	ip, [sp, #12]
   1f44c:	ldr	ip, [sp, #40]	; 0x28
   1f450:	str	ip, [sp, #8]
   1f454:	ldr	ip, [sp, #36]	; 0x24
   1f458:	str	ip, [sp, #4]
   1f45c:	ldr	ip, [sp, #32]
   1f460:	str	ip, [sp]
   1f464:	bl	1f004 <__assert_fail@plt+0xdb1c>
   1f468:	add	sp, sp, #28
   1f46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f470:	cmp	r2, #0
   1f474:	ldrb	ip, [r0, #28]
   1f478:	beq	1f49c <__assert_fail@plt+0xdfb4>
   1f47c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f480:	mov	lr, #1
   1f484:	bfi	ip, lr, #1, #2
   1f488:	strb	ip, [r0, #28]
   1f48c:	strd	r2, [r1]
   1f490:	ldr	r3, [sp, #4]
   1f494:	str	r3, [r1, #8]
   1f498:	pop	{pc}		; (ldr pc, [sp], #4)
   1f49c:	bfi	ip, r2, #1, #2
   1f4a0:	strb	ip, [r0, #28]
   1f4a4:	str	r2, [r1]
   1f4a8:	str	r2, [r1, #4]
   1f4ac:	str	r2, [r1, #8]
   1f4b0:	bx	lr
   1f4b4:	push	{r4, r5, r6, lr}
   1f4b8:	mov	r2, r1
   1f4bc:	mov	r4, r1
   1f4c0:	mov	r1, #0
   1f4c4:	mov	r5, r0
   1f4c8:	bl	11428 <memchr@plt>
   1f4cc:	cmp	r0, #0
   1f4d0:	subne	r4, r0, r5
   1f4d4:	addne	r4, r4, #1
   1f4d8:	mov	r0, r4
   1f4dc:	pop	{r4, r5, r6, pc}
   1f4e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1f4e4:	ldrb	ip, [r0]
   1f4e8:	ldrb	r3, [r1]
   1f4ec:	cmp	ip, r2
   1f4f0:	bne	1f590 <__assert_fail@plt+0xe0a8>
   1f4f4:	cmp	r3, ip
   1f4f8:	addne	r0, r0, #1
   1f4fc:	bne	1f528 <__assert_fail@plt+0xe040>
   1f500:	ldrb	r3, [r0, #1]!
   1f504:	ldrb	r2, [r1, #1]!
   1f508:	sub	lr, r3, #48	; 0x30
   1f50c:	cmp	r3, r2
   1f510:	beq	1f54c <__assert_fail@plt+0xe064>
   1f514:	cmp	lr, #9
   1f518:	sub	ip, r2, #48	; 0x30
   1f51c:	bhi	1f564 <__assert_fail@plt+0xe07c>
   1f520:	cmp	ip, #9
   1f524:	bls	1f55c <__assert_fail@plt+0xe074>
   1f528:	sub	r3, r0, #1
   1f52c:	ldrb	r0, [r3, #1]!
   1f530:	cmp	r0, #48	; 0x30
   1f534:	beq	1f52c <__assert_fail@plt+0xe044>
   1f538:	sub	r0, r0, #48	; 0x30
   1f53c:	cmp	r0, #9
   1f540:	movhi	r0, #0
   1f544:	movls	r0, #1
   1f548:	pop	{pc}		; (ldr pc, [sp], #4)
   1f54c:	cmp	lr, #9
   1f550:	bls	1f500 <__assert_fail@plt+0xe018>
   1f554:	mov	r0, #0
   1f558:	pop	{pc}		; (ldr pc, [sp], #4)
   1f55c:	sub	r0, r3, r2
   1f560:	pop	{pc}		; (ldr pc, [sp], #4)
   1f564:	cmp	ip, #9
   1f568:	bhi	1f554 <__assert_fail@plt+0xe06c>
   1f56c:	sub	r1, r1, #1
   1f570:	ldrb	r0, [r1, #1]!
   1f574:	cmp	r0, #48	; 0x30
   1f578:	beq	1f570 <__assert_fail@plt+0xe088>
   1f57c:	sub	r0, r0, #48	; 0x30
   1f580:	cmp	r0, #9
   1f584:	movhi	r0, #0
   1f588:	mvnls	r0, #0
   1f58c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f590:	cmp	r3, r2
   1f594:	addeq	r1, r1, #1
   1f598:	bne	1f554 <__assert_fail@plt+0xe06c>
   1f59c:	b	1f56c <__assert_fail@plt+0xe084>
   1f5a0:	push	{r4, lr}
   1f5a4:	ldrb	r2, [r0]
   1f5a8:	ldrb	ip, [r1]
   1f5ac:	cmp	r2, #45	; 0x2d
   1f5b0:	bne	1f68c <__assert_fail@plt+0xe1a4>
   1f5b4:	ldrb	r2, [r0, #1]!
   1f5b8:	cmp	r2, #48	; 0x30
   1f5bc:	beq	1f5b4 <__assert_fail@plt+0xe0cc>
   1f5c0:	cmp	ip, #45	; 0x2d
   1f5c4:	beq	1f5fc <__assert_fail@plt+0xe114>
   1f5c8:	sub	r0, r2, #48	; 0x30
   1f5cc:	cmp	r0, #9
   1f5d0:	bhi	1f5e0 <__assert_fail@plt+0xe0f8>
   1f5d4:	mvn	r0, #0
   1f5d8:	pop	{r4, pc}
   1f5dc:	ldrb	ip, [r1, #1]!
   1f5e0:	cmp	ip, #48	; 0x30
   1f5e4:	beq	1f5dc <__assert_fail@plt+0xe0f4>
   1f5e8:	sub	r0, ip, #48	; 0x30
   1f5ec:	cmp	r0, #9
   1f5f0:	movhi	r0, #0
   1f5f4:	mvnls	r0, #0
   1f5f8:	pop	{r4, pc}
   1f5fc:	ldrb	ip, [r1, #1]!
   1f600:	cmp	ip, #48	; 0x30
   1f604:	beq	1f5fc <__assert_fail@plt+0xe114>
   1f608:	cmp	r2, ip
   1f60c:	sub	r3, r2, #48	; 0x30
   1f610:	bne	1f61c <__assert_fail@plt+0xe134>
   1f614:	cmp	r3, #9
   1f618:	bls	1f660 <__assert_fail@plt+0xe178>
   1f61c:	mov	lr, r2
   1f620:	mov	r4, r0
   1f624:	sub	lr, lr, #48	; 0x30
   1f628:	sub	r3, r4, r0
   1f62c:	cmp	lr, #9
   1f630:	bls	1f66c <__assert_fail@plt+0xe184>
   1f634:	mov	r0, ip
   1f638:	mov	lr, r1
   1f63c:	sub	r0, r0, #48	; 0x30
   1f640:	sub	r4, lr, r1
   1f644:	cmp	r0, #9
   1f648:	bls	1f674 <__assert_fail@plt+0xe18c>
   1f64c:	cmp	r3, r4
   1f650:	beq	1f67c <__assert_fail@plt+0xe194>
   1f654:	bcs	1f5d4 <__assert_fail@plt+0xe0ec>
   1f658:	mov	r0, #1
   1f65c:	pop	{r4, pc}
   1f660:	ldrb	r2, [r0, #1]!
   1f664:	ldrb	ip, [r1, #1]!
   1f668:	b	1f608 <__assert_fail@plt+0xe120>
   1f66c:	ldrb	lr, [r4, #1]!
   1f670:	b	1f624 <__assert_fail@plt+0xe13c>
   1f674:	ldrb	r0, [lr, #1]!
   1f678:	b	1f63c <__assert_fail@plt+0xe154>
   1f67c:	cmp	r3, #0
   1f680:	beq	1f768 <__assert_fail@plt+0xe280>
   1f684:	sub	r0, ip, r2
   1f688:	pop	{r4, pc}
   1f68c:	cmp	ip, #45	; 0x2d
   1f690:	bne	1f6d4 <__assert_fail@plt+0xe1ec>
   1f694:	ldrb	r3, [r1, #1]!
   1f698:	cmp	r3, #48	; 0x30
   1f69c:	beq	1f694 <__assert_fail@plt+0xe1ac>
   1f6a0:	sub	r3, r3, #48	; 0x30
   1f6a4:	cmp	r3, #9
   1f6a8:	bls	1f658 <__assert_fail@plt+0xe170>
   1f6ac:	cmp	r2, #48	; 0x30
   1f6b0:	beq	1f6c8 <__assert_fail@plt+0xe1e0>
   1f6b4:	sub	r0, r2, #48	; 0x30
   1f6b8:	cmp	r0, #9
   1f6bc:	movhi	r0, #0
   1f6c0:	movls	r0, #1
   1f6c4:	pop	{r4, pc}
   1f6c8:	ldrb	r2, [r0, #1]!
   1f6cc:	b	1f6ac <__assert_fail@plt+0xe1c4>
   1f6d0:	ldrb	r2, [r0, #1]!
   1f6d4:	cmp	r2, #48	; 0x30
   1f6d8:	beq	1f6d0 <__assert_fail@plt+0xe1e8>
   1f6dc:	cmp	ip, #48	; 0x30
   1f6e0:	bne	1f6f4 <__assert_fail@plt+0xe20c>
   1f6e4:	ldrb	ip, [r1, #1]!
   1f6e8:	b	1f6dc <__assert_fail@plt+0xe1f4>
   1f6ec:	ldrb	r2, [r0, #1]!
   1f6f0:	ldrb	ip, [r1, #1]!
   1f6f4:	cmp	r2, ip
   1f6f8:	sub	r3, r2, #48	; 0x30
   1f6fc:	bne	1f708 <__assert_fail@plt+0xe220>
   1f700:	cmp	r3, #9
   1f704:	bls	1f6ec <__assert_fail@plt+0xe204>
   1f708:	mov	lr, r2
   1f70c:	mov	r4, r0
   1f710:	sub	lr, lr, #48	; 0x30
   1f714:	sub	r3, r4, r0
   1f718:	cmp	lr, #9
   1f71c:	bls	1f748 <__assert_fail@plt+0xe260>
   1f720:	mov	r0, ip
   1f724:	mov	lr, r1
   1f728:	sub	r0, r0, #48	; 0x30
   1f72c:	sub	r4, lr, r1
   1f730:	cmp	r0, #9
   1f734:	bls	1f750 <__assert_fail@plt+0xe268>
   1f738:	cmp	r3, r4
   1f73c:	beq	1f758 <__assert_fail@plt+0xe270>
   1f740:	bcs	1f658 <__assert_fail@plt+0xe170>
   1f744:	b	1f5d4 <__assert_fail@plt+0xe0ec>
   1f748:	ldrb	lr, [r4, #1]!
   1f74c:	b	1f710 <__assert_fail@plt+0xe228>
   1f750:	ldrb	r0, [lr, #1]!
   1f754:	b	1f728 <__assert_fail@plt+0xe240>
   1f758:	cmp	r3, #0
   1f75c:	beq	1f768 <__assert_fail@plt+0xe280>
   1f760:	sub	r0, r2, ip
   1f764:	pop	{r4, pc}
   1f768:	mov	r0, r3
   1f76c:	pop	{r4, pc}
   1f770:	push	{r4, r5, r6, lr}
   1f774:	cmp	r1, #0
   1f778:	sub	sp, sp, #32
   1f77c:	mov	r5, r0
   1f780:	ldr	r4, [sp, #48]	; 0x30
   1f784:	ldr	r6, [sp, #52]	; 0x34
   1f788:	beq	1f83c <__assert_fail@plt+0xe354>
   1f78c:	strd	r2, [sp]
   1f790:	mov	r3, r1
   1f794:	mov	r1, #1
   1f798:	ldr	r2, [pc, #856]	; 1faf8 <__assert_fail@plt+0xe610>
   1f79c:	bl	1141c <__fprintf_chk@plt>
   1f7a0:	mov	r2, #5
   1f7a4:	ldr	r1, [pc, #848]	; 1fafc <__assert_fail@plt+0xe614>
   1f7a8:	mov	r0, #0
   1f7ac:	bl	11278 <dcgettext@plt>
   1f7b0:	movw	r3, #2022	; 0x7e6
   1f7b4:	ldr	r2, [pc, #836]	; 1fb00 <__assert_fail@plt+0xe618>
   1f7b8:	mov	r1, #1
   1f7bc:	str	r3, [sp]
   1f7c0:	mov	r3, r0
   1f7c4:	mov	r0, r5
   1f7c8:	bl	1141c <__fprintf_chk@plt>
   1f7cc:	mov	r1, r5
   1f7d0:	mov	r0, #10
   1f7d4:	bl	1126c <fputc_unlocked@plt>
   1f7d8:	mov	r2, #5
   1f7dc:	ldr	r1, [pc, #800]	; 1fb04 <__assert_fail@plt+0xe61c>
   1f7e0:	mov	r0, #0
   1f7e4:	bl	11278 <dcgettext@plt>
   1f7e8:	mov	r2, r0
   1f7ec:	mov	r1, #1
   1f7f0:	ldr	r3, [pc, #784]	; 1fb08 <__assert_fail@plt+0xe620>
   1f7f4:	mov	r0, r5
   1f7f8:	bl	1141c <__fprintf_chk@plt>
   1f7fc:	mov	r1, r5
   1f800:	mov	r0, #10
   1f804:	bl	1126c <fputc_unlocked@plt>
   1f808:	cmp	r6, #9
   1f80c:	ldrls	pc, [pc, r6, lsl #2]
   1f810:	b	1faec <__assert_fail@plt+0xe604>
   1f814:	andeq	pc, r1, ip, lsr #18
   1f818:	andeq	pc, r1, r4, asr r8	; <UNPREDICTABLE>
   1f81c:	andeq	pc, r1, r0, lsl #17
   1f820:			; <UNDEFINED> instruction: 0x0001f8b4
   1f824:	strdeq	pc, [r1], -r0
   1f828:	andeq	pc, r1, r4, lsr r9	; <UNPREDICTABLE>
   1f82c:	andeq	pc, r1, ip, ror r9	; <UNPREDICTABLE>
   1f830:	andeq	pc, r1, ip, asr #19
   1f834:	andeq	pc, r1, r4, lsr #20
   1f838:	andeq	pc, r1, r4, lsl #21
   1f83c:	mov	r1, #1
   1f840:	str	r3, [sp]
   1f844:	mov	r3, r2
   1f848:	ldr	r2, [pc, #700]	; 1fb0c <__assert_fail@plt+0xe624>
   1f84c:	bl	1141c <__fprintf_chk@plt>
   1f850:	b	1f7a0 <__assert_fail@plt+0xe2b8>
   1f854:	mov	r2, #5
   1f858:	ldr	r1, [pc, #688]	; 1fb10 <__assert_fail@plt+0xe628>
   1f85c:	mov	r0, #0
   1f860:	bl	11278 <dcgettext@plt>
   1f864:	ldr	r3, [r4]
   1f868:	mov	r2, r0
   1f86c:	mov	r1, #1
   1f870:	mov	r0, r5
   1f874:	add	sp, sp, #32
   1f878:	pop	{r4, r5, r6, lr}
   1f87c:	b	1141c <__fprintf_chk@plt>
   1f880:	mov	r2, #5
   1f884:	ldr	r1, [pc, #648]	; 1fb14 <__assert_fail@plt+0xe62c>
   1f888:	mov	r0, #0
   1f88c:	bl	11278 <dcgettext@plt>
   1f890:	ldr	r3, [r4, #4]
   1f894:	mov	r2, r0
   1f898:	mov	r1, #1
   1f89c:	mov	r0, r5
   1f8a0:	str	r3, [sp, #48]	; 0x30
   1f8a4:	ldr	r3, [r4]
   1f8a8:	add	sp, sp, #32
   1f8ac:	pop	{r4, r5, r6, lr}
   1f8b0:	b	1141c <__fprintf_chk@plt>
   1f8b4:	mov	r2, #5
   1f8b8:	ldr	r1, [pc, #600]	; 1fb18 <__assert_fail@plt+0xe630>
   1f8bc:	mov	r0, #0
   1f8c0:	bl	11278 <dcgettext@plt>
   1f8c4:	ldr	r3, [r4, #8]
   1f8c8:	mov	r2, r0
   1f8cc:	mov	r1, #1
   1f8d0:	mov	r0, r5
   1f8d4:	str	r3, [sp, #52]	; 0x34
   1f8d8:	ldr	r3, [r4, #4]
   1f8dc:	str	r3, [sp, #48]	; 0x30
   1f8e0:	ldr	r3, [r4]
   1f8e4:	add	sp, sp, #32
   1f8e8:	pop	{r4, r5, r6, lr}
   1f8ec:	b	1141c <__fprintf_chk@plt>
   1f8f0:	mov	r2, #5
   1f8f4:	ldr	r1, [pc, #544]	; 1fb1c <__assert_fail@plt+0xe634>
   1f8f8:	mov	r0, #0
   1f8fc:	bl	11278 <dcgettext@plt>
   1f900:	ldr	r3, [r4, #12]
   1f904:	mov	r2, r0
   1f908:	mov	r1, #1
   1f90c:	mov	r0, r5
   1f910:	str	r3, [sp, #8]
   1f914:	ldr	r3, [r4, #8]
   1f918:	str	r3, [sp, #4]
   1f91c:	ldr	r3, [r4, #4]
   1f920:	str	r3, [sp]
   1f924:	ldr	r3, [r4]
   1f928:	bl	1141c <__fprintf_chk@plt>
   1f92c:	add	sp, sp, #32
   1f930:	pop	{r4, r5, r6, pc}
   1f934:	mov	r2, #5
   1f938:	ldr	r1, [pc, #480]	; 1fb20 <__assert_fail@plt+0xe638>
   1f93c:	mov	r0, #0
   1f940:	bl	11278 <dcgettext@plt>
   1f944:	ldr	r3, [r4, #16]
   1f948:	mov	r2, r0
   1f94c:	mov	r1, #1
   1f950:	mov	r0, r5
   1f954:	str	r3, [sp, #12]
   1f958:	ldr	r3, [r4, #12]
   1f95c:	str	r3, [sp, #8]
   1f960:	ldr	r3, [r4, #8]
   1f964:	str	r3, [sp, #4]
   1f968:	ldr	r3, [r4, #4]
   1f96c:	str	r3, [sp]
   1f970:	ldr	r3, [r4]
   1f974:	bl	1141c <__fprintf_chk@plt>
   1f978:	b	1f92c <__assert_fail@plt+0xe444>
   1f97c:	mov	r2, #5
   1f980:	ldr	r1, [pc, #412]	; 1fb24 <__assert_fail@plt+0xe63c>
   1f984:	mov	r0, #0
   1f988:	bl	11278 <dcgettext@plt>
   1f98c:	ldr	r3, [r4, #20]
   1f990:	mov	r2, r0
   1f994:	mov	r1, #1
   1f998:	mov	r0, r5
   1f99c:	str	r3, [sp, #16]
   1f9a0:	ldr	r3, [r4, #16]
   1f9a4:	str	r3, [sp, #12]
   1f9a8:	ldr	r3, [r4, #12]
   1f9ac:	str	r3, [sp, #8]
   1f9b0:	ldr	r3, [r4, #8]
   1f9b4:	str	r3, [sp, #4]
   1f9b8:	ldr	r3, [r4, #4]
   1f9bc:	str	r3, [sp]
   1f9c0:	ldr	r3, [r4]
   1f9c4:	bl	1141c <__fprintf_chk@plt>
   1f9c8:	b	1f92c <__assert_fail@plt+0xe444>
   1f9cc:	mov	r2, #5
   1f9d0:	ldr	r1, [pc, #336]	; 1fb28 <__assert_fail@plt+0xe640>
   1f9d4:	mov	r0, #0
   1f9d8:	bl	11278 <dcgettext@plt>
   1f9dc:	ldr	r3, [r4, #24]
   1f9e0:	mov	r2, r0
   1f9e4:	mov	r1, #1
   1f9e8:	mov	r0, r5
   1f9ec:	str	r3, [sp, #20]
   1f9f0:	ldr	r3, [r4, #20]
   1f9f4:	str	r3, [sp, #16]
   1f9f8:	ldr	r3, [r4, #16]
   1f9fc:	str	r3, [sp, #12]
   1fa00:	ldr	r3, [r4, #12]
   1fa04:	str	r3, [sp, #8]
   1fa08:	ldr	r3, [r4, #8]
   1fa0c:	str	r3, [sp, #4]
   1fa10:	ldr	r3, [r4, #4]
   1fa14:	str	r3, [sp]
   1fa18:	ldr	r3, [r4]
   1fa1c:	bl	1141c <__fprintf_chk@plt>
   1fa20:	b	1f92c <__assert_fail@plt+0xe444>
   1fa24:	mov	r2, #5
   1fa28:	ldr	r1, [pc, #252]	; 1fb2c <__assert_fail@plt+0xe644>
   1fa2c:	mov	r0, #0
   1fa30:	bl	11278 <dcgettext@plt>
   1fa34:	ldr	r3, [r4, #28]
   1fa38:	mov	r2, r0
   1fa3c:	mov	r1, #1
   1fa40:	mov	r0, r5
   1fa44:	str	r3, [sp, #24]
   1fa48:	ldr	r3, [r4, #24]
   1fa4c:	str	r3, [sp, #20]
   1fa50:	ldr	r3, [r4, #20]
   1fa54:	str	r3, [sp, #16]
   1fa58:	ldr	r3, [r4, #16]
   1fa5c:	str	r3, [sp, #12]
   1fa60:	ldr	r3, [r4, #12]
   1fa64:	str	r3, [sp, #8]
   1fa68:	ldr	r3, [r4, #8]
   1fa6c:	str	r3, [sp, #4]
   1fa70:	ldr	r3, [r4, #4]
   1fa74:	str	r3, [sp]
   1fa78:	ldr	r3, [r4]
   1fa7c:	bl	1141c <__fprintf_chk@plt>
   1fa80:	b	1f92c <__assert_fail@plt+0xe444>
   1fa84:	ldr	r1, [pc, #164]	; 1fb30 <__assert_fail@plt+0xe648>
   1fa88:	mov	r2, #5
   1fa8c:	mov	r0, #0
   1fa90:	bl	11278 <dcgettext@plt>
   1fa94:	ldr	r3, [r4, #32]
   1fa98:	mov	r2, r0
   1fa9c:	mov	r1, #1
   1faa0:	mov	r0, r5
   1faa4:	str	r3, [sp, #28]
   1faa8:	ldr	r3, [r4, #28]
   1faac:	str	r3, [sp, #24]
   1fab0:	ldr	r3, [r4, #24]
   1fab4:	str	r3, [sp, #20]
   1fab8:	ldr	r3, [r4, #20]
   1fabc:	str	r3, [sp, #16]
   1fac0:	ldr	r3, [r4, #16]
   1fac4:	str	r3, [sp, #12]
   1fac8:	ldr	r3, [r4, #12]
   1facc:	str	r3, [sp, #8]
   1fad0:	ldr	r3, [r4, #8]
   1fad4:	str	r3, [sp, #4]
   1fad8:	ldr	r3, [r4, #4]
   1fadc:	str	r3, [sp]
   1fae0:	ldr	r3, [r4]
   1fae4:	bl	1141c <__fprintf_chk@plt>
   1fae8:	b	1f92c <__assert_fail@plt+0xe444>
   1faec:	mov	r2, #5
   1faf0:	ldr	r1, [pc, #60]	; 1fb34 <__assert_fail@plt+0xe64c>
   1faf4:	b	1fa8c <__assert_fail@plt+0xe5a4>
   1faf8:	andeq	r1, r2, r9, ror r4
   1fafc:	andeq	r1, r2, ip, lsl #9
   1fb00:	andeq	r1, r2, sl, asr r7
   1fb04:	muleq	r2, r0, r4
   1fb08:	andeq	r1, r2, fp, lsr r5
   1fb0c:	andeq	r1, r2, r5, lsl #9
   1fb10:	andeq	r1, r2, sp, asr r5
   1fb14:	andeq	r1, r2, sp, ror #10
   1fb18:	andeq	r1, r2, r4, lsl #11
   1fb1c:	andeq	r1, r2, r0, lsr #11
   1fb20:	andeq	r1, r2, r0, asr #11
   1fb24:	andeq	r1, r2, r4, ror #11
   1fb28:	andeq	r1, r2, ip, lsl #12
   1fb2c:	andeq	r1, r2, r8, lsr r6
   1fb30:	andeq	r1, r2, r8, ror #12
   1fb34:	muleq	r2, ip, r6
   1fb38:	push	{r0, r1, r4, lr}
   1fb3c:	mov	ip, #0
   1fb40:	ldr	lr, [sp, #16]
   1fb44:	ldr	r4, [lr, ip, lsl #2]
   1fb48:	cmp	r4, #0
   1fb4c:	bne	1fb64 <__assert_fail@plt+0xe67c>
   1fb50:	str	lr, [sp]
   1fb54:	str	ip, [sp, #4]
   1fb58:	bl	1f770 <__assert_fail@plt+0xe288>
   1fb5c:	add	sp, sp, #8
   1fb60:	pop	{r4, pc}
   1fb64:	add	ip, ip, #1
   1fb68:	b	1fb44 <__assert_fail@plt+0xe65c>
   1fb6c:	push	{r4, r5, r6, lr}
   1fb70:	sub	sp, sp, #48	; 0x30
   1fb74:	mov	ip, #0
   1fb78:	add	lr, sp, #8
   1fb7c:	mov	r5, lr
   1fb80:	ldr	r6, [sp, #64]	; 0x40
   1fb84:	ldr	r4, [r6, ip, lsl #2]
   1fb88:	cmp	r4, #0
   1fb8c:	str	r4, [lr], #4
   1fb90:	beq	1fba0 <__assert_fail@plt+0xe6b8>
   1fb94:	add	ip, ip, #1
   1fb98:	cmp	ip, #10
   1fb9c:	bne	1fb84 <__assert_fail@plt+0xe69c>
   1fba0:	stm	sp, {r5, ip}
   1fba4:	bl	1f770 <__assert_fail@plt+0xe288>
   1fba8:	add	sp, sp, #48	; 0x30
   1fbac:	pop	{r4, r5, r6, pc}
   1fbb0:	push	{r3}		; (str r3, [sp, #-4]!)
   1fbb4:	push	{r0, r1, r2, r3, lr}
   1fbb8:	add	r3, sp, #24
   1fbbc:	str	r3, [sp]
   1fbc0:	str	r3, [sp, #12]
   1fbc4:	ldr	r3, [sp, #20]
   1fbc8:	bl	1fb6c <__assert_fail@plt+0xe684>
   1fbcc:	add	sp, sp, #16
   1fbd0:	pop	{lr}		; (ldr lr, [sp], #4)
   1fbd4:	add	sp, sp, #4
   1fbd8:	bx	lr
   1fbdc:	ldr	r3, [pc, #116]	; 1fc58 <__assert_fail@plt+0xe770>
   1fbe0:	mov	r0, #10
   1fbe4:	push	{r4, lr}
   1fbe8:	ldr	r1, [r3]
   1fbec:	bl	1126c <fputc_unlocked@plt>
   1fbf0:	mov	r2, #5
   1fbf4:	ldr	r1, [pc, #96]	; 1fc5c <__assert_fail@plt+0xe774>
   1fbf8:	mov	r0, #0
   1fbfc:	bl	11278 <dcgettext@plt>
   1fc00:	mov	r1, r0
   1fc04:	ldr	r2, [pc, #84]	; 1fc60 <__assert_fail@plt+0xe778>
   1fc08:	mov	r0, #1
   1fc0c:	bl	11404 <__printf_chk@plt>
   1fc10:	mov	r2, #5
   1fc14:	ldr	r1, [pc, #72]	; 1fc64 <__assert_fail@plt+0xe77c>
   1fc18:	mov	r0, #0
   1fc1c:	bl	11278 <dcgettext@plt>
   1fc20:	mov	r1, r0
   1fc24:	ldr	r3, [pc, #60]	; 1fc68 <__assert_fail@plt+0xe780>
   1fc28:	mov	r0, #1
   1fc2c:	ldr	r2, [pc, #56]	; 1fc6c <__assert_fail@plt+0xe784>
   1fc30:	bl	11404 <__printf_chk@plt>
   1fc34:	mov	r2, #5
   1fc38:	ldr	r1, [pc, #48]	; 1fc70 <__assert_fail@plt+0xe788>
   1fc3c:	mov	r0, #0
   1fc40:	bl	11278 <dcgettext@plt>
   1fc44:	mov	r1, r0
   1fc48:	ldr	r2, [pc, #36]	; 1fc74 <__assert_fail@plt+0xe78c>
   1fc4c:	mov	r0, #1
   1fc50:	pop	{r4, lr}
   1fc54:	b	11404 <__printf_chk@plt>
   1fc58:	andeq	r2, r3, r4, lsr #3
   1fc5c:	ldrdeq	r1, [r2], -r8
   1fc60:	andeq	r1, r2, ip, ror #13
   1fc64:	andeq	r1, r2, r2, lsl #14
   1fc68:	strdeq	r0, [r2], -r8
   1fc6c:	andeq	r0, r2, r0, lsr #28
   1fc70:	andeq	r1, r2, r6, lsl r7
   1fc74:	andeq	r1, r2, sp, lsr r7
   1fc78:	push	{r4, lr}
   1fc7c:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1fc80:	cmp	r0, #0
   1fc84:	popne	{r4, pc}
   1fc88:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fc8c:	push	{r4, lr}
   1fc90:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   1fc94:	cmp	r0, #0
   1fc98:	popne	{r4, pc}
   1fc9c:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fca0:	b	1fc78 <__assert_fail@plt+0xe790>
   1fca4:	push	{r4, r5, r6, lr}
   1fca8:	mov	r5, r0
   1fcac:	mov	r4, r1
   1fcb0:	bl	1fff0 <__assert_fail@plt+0xeb08>
   1fcb4:	cmp	r0, #0
   1fcb8:	popne	{r4, r5, r6, pc}
   1fcbc:	adds	r4, r4, #0
   1fcc0:	movne	r4, #1
   1fcc4:	cmp	r5, #0
   1fcc8:	moveq	r4, #1
   1fccc:	cmp	r4, #0
   1fcd0:	popeq	{r4, r5, r6, pc}
   1fcd4:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fcd8:	push	{r4, lr}
   1fcdc:	bl	202d8 <__assert_fail@plt+0xedf0>
   1fce0:	cmp	r0, #0
   1fce4:	popne	{r4, pc}
   1fce8:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fcec:	push	{r4, r5, r6, lr}
   1fcf0:	mov	r6, r0
   1fcf4:	mov	r5, r1
   1fcf8:	mov	r4, r2
   1fcfc:	bl	2041c <__assert_fail@plt+0xef34>
   1fd00:	cmp	r0, #0
   1fd04:	popne	{r4, r5, r6, pc}
   1fd08:	cmp	r6, #0
   1fd0c:	beq	1fd1c <__assert_fail@plt+0xe834>
   1fd10:	cmp	r5, #0
   1fd14:	cmpne	r4, #0
   1fd18:	popeq	{r4, r5, r6, pc}
   1fd1c:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fd20:	b	1fcec <__assert_fail@plt+0xe804>
   1fd24:	push	{r4, lr}
   1fd28:	bl	202e8 <__assert_fail@plt+0xee00>
   1fd2c:	cmp	r0, #0
   1fd30:	popne	{r4, pc}
   1fd34:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fd38:	mov	r2, r1
   1fd3c:	mov	r1, r0
   1fd40:	mov	r0, #0
   1fd44:	b	1fcec <__assert_fail@plt+0xe804>
   1fd48:	mov	r2, r1
   1fd4c:	mov	r1, r0
   1fd50:	mov	r0, #0
   1fd54:	b	1fd24 <__assert_fail@plt+0xe83c>
   1fd58:	cmp	r0, #0
   1fd5c:	push	{r4, r5, r6, lr}
   1fd60:	mov	r5, r1
   1fd64:	ldr	r4, [r1]
   1fd68:	bne	1fd94 <__assert_fail@plt+0xe8ac>
   1fd6c:	cmp	r4, #0
   1fd70:	bne	1fd84 <__assert_fail@plt+0xe89c>
   1fd74:	mov	r4, #64	; 0x40
   1fd78:	udiv	r4, r4, r2
   1fd7c:	cmp	r2, #64	; 0x40
   1fd80:	addhi	r4, r4, #1
   1fd84:	mov	r1, r4
   1fd88:	bl	1fcec <__assert_fail@plt+0xe804>
   1fd8c:	str	r4, [r5]
   1fd90:	pop	{r4, r5, r6, pc}
   1fd94:	lsr	r3, r4, #1
   1fd98:	add	r3, r3, #1
   1fd9c:	adds	r4, r4, r3
   1fda0:	bcc	1fd84 <__assert_fail@plt+0xe89c>
   1fda4:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fda8:	mov	r2, #1
   1fdac:	b	1fd58 <__assert_fail@plt+0xe870>
   1fdb0:	ldr	ip, [r1]
   1fdb4:	push	{r4, r5, r6, r7, r8, lr}
   1fdb8:	mov	r5, r1
   1fdbc:	mvn	r8, r3
   1fdc0:	lsr	r8, r8, #31
   1fdc4:	ldr	lr, [sp, #24]
   1fdc8:	asr	r1, ip, #1
   1fdcc:	adds	r4, ip, r1
   1fdd0:	mvnvs	r4, #-2147483648	; 0x80000000
   1fdd4:	cmp	r3, r4
   1fdd8:	movge	r1, #0
   1fddc:	andlt	r1, r8, #1
   1fde0:	cmp	r1, #0
   1fde4:	movne	r4, r3
   1fde8:	smull	r6, r7, r4, lr
   1fdec:	cmp	r7, r6, asr #31
   1fdf0:	bne	1fe08 <__assert_fail@plt+0xe920>
   1fdf4:	cmp	r6, #63	; 0x3f
   1fdf8:	mov	r1, r6
   1fdfc:	bgt	1fe18 <__assert_fail@plt+0xe930>
   1fe00:	mov	r1, #64	; 0x40
   1fe04:	b	1fe0c <__assert_fail@plt+0xe924>
   1fe08:	mvn	r1, #-2147483648	; 0x80000000
   1fe0c:	sdiv	r4, r1, lr
   1fe10:	mls	r6, lr, r4, r1
   1fe14:	sub	r1, r1, r6
   1fe18:	cmp	r0, #0
   1fe1c:	sub	r6, r4, ip
   1fe20:	streq	r0, [r5]
   1fe24:	cmp	r6, r2
   1fe28:	bge	1fe5c <__assert_fail@plt+0xe974>
   1fe2c:	adds	r4, ip, r2
   1fe30:	bvs	1fe58 <__assert_fail@plt+0xe970>
   1fe34:	cmp	r4, r3
   1fe38:	movle	r3, #0
   1fe3c:	andgt	r3, r8, #1
   1fe40:	cmp	r3, #0
   1fe44:	bne	1fe58 <__assert_fail@plt+0xe970>
   1fe48:	smull	r2, r3, r4, lr
   1fe4c:	cmp	r3, r2, asr #31
   1fe50:	mov	r1, r2
   1fe54:	beq	1fe5c <__assert_fail@plt+0xe974>
   1fe58:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fe5c:	bl	1fca4 <__assert_fail@plt+0xe7bc>
   1fe60:	str	r4, [r5]
   1fe64:	pop	{r4, r5, r6, r7, r8, pc}
   1fe68:	push	{r4, lr}
   1fe6c:	bl	1ff70 <__assert_fail@plt+0xea88>
   1fe70:	cmp	r0, #0
   1fe74:	popne	{r4, pc}
   1fe78:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fe7c:	mov	r1, #1
   1fe80:	b	1fe68 <__assert_fail@plt+0xe980>
   1fe84:	push	{r4, lr}
   1fe88:	bl	1ff70 <__assert_fail@plt+0xea88>
   1fe8c:	cmp	r0, #0
   1fe90:	popne	{r4, pc}
   1fe94:	bl	1ff30 <__assert_fail@plt+0xea48>
   1fe98:	mov	r1, #1
   1fe9c:	b	1fe84 <__assert_fail@plt+0xe99c>
   1fea0:	push	{r4, r5, r6, lr}
   1fea4:	mov	r4, r1
   1fea8:	mov	r5, r0
   1feac:	mov	r0, r1
   1feb0:	bl	1fc78 <__assert_fail@plt+0xe790>
   1feb4:	mov	r2, r4
   1feb8:	mov	r1, r5
   1febc:	pop	{r4, r5, r6, lr}
   1fec0:	b	11218 <memcpy@plt>
   1fec4:	push	{r4, r5, r6, lr}
   1fec8:	mov	r4, r1
   1fecc:	mov	r5, r0
   1fed0:	mov	r0, r1
   1fed4:	bl	1fc8c <__assert_fail@plt+0xe7a4>
   1fed8:	mov	r2, r4
   1fedc:	mov	r1, r5
   1fee0:	pop	{r4, r5, r6, lr}
   1fee4:	b	11218 <memcpy@plt>
   1fee8:	push	{r4, r5, r6, lr}
   1feec:	mov	r5, r0
   1fef0:	add	r0, r1, #1
   1fef4:	mov	r4, r1
   1fef8:	bl	1fc8c <__assert_fail@plt+0xe7a4>
   1fefc:	mov	r2, #0
   1ff00:	mov	r1, r5
   1ff04:	strb	r2, [r0, r4]
   1ff08:	mov	r2, r4
   1ff0c:	pop	{r4, r5, r6, lr}
   1ff10:	b	11218 <memcpy@plt>
   1ff14:	push	{r4, lr}
   1ff18:	mov	r4, r0
   1ff1c:	bl	11398 <strlen@plt>
   1ff20:	add	r1, r0, #1
   1ff24:	mov	r0, r4
   1ff28:	pop	{r4, lr}
   1ff2c:	b	1fea0 <__assert_fail@plt+0xe9b8>
   1ff30:	ldr	r3, [pc, #44]	; 1ff64 <__assert_fail@plt+0xea7c>
   1ff34:	mov	r2, #5
   1ff38:	mov	r0, #0
   1ff3c:	push	{r4, lr}
   1ff40:	ldr	r1, [pc, #32]	; 1ff68 <__assert_fail@plt+0xea80>
   1ff44:	ldr	r4, [r3]
   1ff48:	bl	11278 <dcgettext@plt>
   1ff4c:	mov	r3, r0
   1ff50:	ldr	r2, [pc, #20]	; 1ff6c <__assert_fail@plt+0xea84>
   1ff54:	mov	r1, #0
   1ff58:	mov	r0, r4
   1ff5c:	bl	11314 <error@plt>
   1ff60:	bl	114d0 <abort@plt>
   1ff64:	andeq	r2, r3, ip, asr #2
   1ff68:	andeq	r1, r2, r9, lsl #15
   1ff6c:	andeq	r1, r2, lr, lsr #1
   1ff70:	cmp	r1, #0
   1ff74:	cmpne	r0, #0
   1ff78:	beq	1ffb0 <__assert_fail@plt+0xeac8>
   1ff7c:	push	{r4, r5, r6, lr}
   1ff80:	umull	r4, r5, r0, r1
   1ff84:	adds	r3, r5, #0
   1ff88:	movne	r3, #1
   1ff8c:	cmp	r4, #0
   1ff90:	blt	1ff9c <__assert_fail@plt+0xeab4>
   1ff94:	cmp	r3, #0
   1ff98:	beq	1ffbc <__assert_fail@plt+0xead4>
   1ff9c:	bl	113c8 <__errno_location@plt>
   1ffa0:	mov	r3, #12
   1ffa4:	str	r3, [r0]
   1ffa8:	mov	r0, #0
   1ffac:	pop	{r4, r5, r6, pc}
   1ffb0:	mov	r1, #1
   1ffb4:	mov	r0, r1
   1ffb8:	b	11164 <calloc@plt>
   1ffbc:	pop	{r4, r5, r6, lr}
   1ffc0:	b	1ffb8 <__assert_fail@plt+0xead0>
   1ffc4:	cmp	r0, #0
   1ffc8:	beq	1ffe8 <__assert_fail@plt+0xeb00>
   1ffcc:	bge	1ffec <__assert_fail@plt+0xeb04>
   1ffd0:	push	{r4, lr}
   1ffd4:	bl	113c8 <__errno_location@plt>
   1ffd8:	mov	r3, #12
   1ffdc:	str	r3, [r0]
   1ffe0:	mov	r0, #0
   1ffe4:	pop	{r4, pc}
   1ffe8:	mov	r0, #1
   1ffec:	b	11338 <malloc@plt>
   1fff0:	cmp	r0, #0
   1fff4:	bne	20000 <__assert_fail@plt+0xeb18>
   1fff8:	mov	r0, r1
   1fffc:	b	1ffc4 <__assert_fail@plt+0xeadc>
   20000:	cmp	r1, #0
   20004:	push	{r4, lr}
   20008:	bne	20018 <__assert_fail@plt+0xeb30>
   2000c:	bl	12bd8 <__assert_fail@plt+0x16f0>
   20010:	mov	r0, #0
   20014:	pop	{r4, pc}
   20018:	blt	20024 <__assert_fail@plt+0xeb3c>
   2001c:	pop	{r4, lr}
   20020:	b	11290 <realloc@plt>
   20024:	bl	113c8 <__errno_location@plt>
   20028:	mov	r3, #12
   2002c:	str	r3, [r0]
   20030:	b	20010 <__assert_fail@plt+0xeb28>
   20034:	push	{r4, r5, r6, lr}
   20038:	mov	r4, r0
   2003c:	bl	112f0 <__fpending@plt>
   20040:	mov	r5, r0
   20044:	mov	r0, r4
   20048:	bl	112fc <ferror_unlocked@plt>
   2004c:	mov	r6, r0
   20050:	mov	r0, r4
   20054:	bl	20144 <__assert_fail@plt+0xec5c>
   20058:	cmp	r6, #0
   2005c:	mov	r4, r0
   20060:	bne	2008c <__assert_fail@plt+0xeba4>
   20064:	cmp	r0, #0
   20068:	beq	20084 <__assert_fail@plt+0xeb9c>
   2006c:	cmp	r5, #0
   20070:	bne	2009c <__assert_fail@plt+0xebb4>
   20074:	bl	113c8 <__errno_location@plt>
   20078:	ldr	r4, [r0]
   2007c:	subs	r4, r4, #9
   20080:	mvnne	r4, #0
   20084:	mov	r0, r4
   20088:	pop	{r4, r5, r6, pc}
   2008c:	cmp	r0, #0
   20090:	bne	2009c <__assert_fail@plt+0xebb4>
   20094:	bl	113c8 <__errno_location@plt>
   20098:	str	r4, [r0]
   2009c:	mvn	r4, #0
   200a0:	b	20084 <__assert_fail@plt+0xeb9c>
   200a4:	ldr	ip, [r0, #4]
   200a8:	cmp	ip, r1
   200ac:	bcc	200bc <__assert_fail@plt+0xebd4>
   200b0:	str	r1, [r0]
   200b4:	mov	r0, #1
   200b8:	bx	lr
   200bc:	push	{r4, r5, r6, r7, r8, lr}
   200c0:	umull	r6, r7, r1, r3
   200c4:	mov	r8, r3
   200c8:	mov	r5, r1
   200cc:	mov	r4, r0
   200d0:	cmp	r7, #0
   200d4:	bne	2011c <__assert_fail@plt+0xec34>
   200d8:	ldr	r0, [r0, #8]
   200dc:	cmp	r0, r2
   200e0:	bne	20130 <__assert_fail@plt+0xec48>
   200e4:	mov	r0, r6
   200e8:	bl	1ffc4 <__assert_fail@plt+0xeadc>
   200ec:	subs	r6, r0, #0
   200f0:	beq	20128 <__assert_fail@plt+0xec40>
   200f4:	ldr	r1, [r4, #8]
   200f8:	cmp	r1, #0
   200fc:	beq	2010c <__assert_fail@plt+0xec24>
   20100:	ldr	r2, [r4]
   20104:	mul	r2, r2, r8
   20108:	bl	11218 <memcpy@plt>
   2010c:	mov	r0, #1
   20110:	str	r5, [r4]
   20114:	stmib	r4, {r5, r6}
   20118:	pop	{r4, r5, r6, r7, r8, pc}
   2011c:	bl	113c8 <__errno_location@plt>
   20120:	mov	r3, #12
   20124:	str	r3, [r0]
   20128:	mov	r0, #0
   2012c:	pop	{r4, r5, r6, r7, r8, pc}
   20130:	mov	r1, r6
   20134:	bl	1fff0 <__assert_fail@plt+0xeb08>
   20138:	subs	r6, r0, #0
   2013c:	bne	2010c <__assert_fail@plt+0xec24>
   20140:	b	20128 <__assert_fail@plt+0xec40>
   20144:	push	{r0, r1, r2, r4, r5, lr}
   20148:	mov	r4, r0
   2014c:	bl	11410 <fileno@plt>
   20150:	cmp	r0, #0
   20154:	mov	r0, r4
   20158:	bge	20168 <__assert_fail@plt+0xec80>
   2015c:	add	sp, sp, #12
   20160:	pop	{r4, r5, lr}
   20164:	b	11434 <fclose@plt>
   20168:	bl	11350 <__freading@plt>
   2016c:	cmp	r0, #0
   20170:	bne	201ac <__assert_fail@plt+0xecc4>
   20174:	mov	r0, r4
   20178:	bl	201ec <__assert_fail@plt+0xed04>
   2017c:	cmp	r0, #0
   20180:	bne	201e0 <__assert_fail@plt+0xecf8>
   20184:	mov	r5, #0
   20188:	mov	r0, r4
   2018c:	bl	11434 <fclose@plt>
   20190:	cmp	r5, #0
   20194:	beq	201a4 <__assert_fail@plt+0xecbc>
   20198:	bl	113c8 <__errno_location@plt>
   2019c:	str	r5, [r0]
   201a0:	mvn	r0, #0
   201a4:	add	sp, sp, #12
   201a8:	pop	{r4, r5, pc}
   201ac:	mov	r0, r4
   201b0:	bl	11410 <fileno@plt>
   201b4:	mov	r3, #1
   201b8:	mov	r2, #0
   201bc:	str	r3, [sp]
   201c0:	mov	r3, #0
   201c4:	bl	112d8 <lseek64@plt>
   201c8:	mvn	r3, #0
   201cc:	mvn	r2, #0
   201d0:	cmp	r1, r3
   201d4:	cmpeq	r0, r2
   201d8:	bne	20174 <__assert_fail@plt+0xec8c>
   201dc:	b	20184 <__assert_fail@plt+0xec9c>
   201e0:	bl	113c8 <__errno_location@plt>
   201e4:	ldr	r5, [r0]
   201e8:	b	20188 <__assert_fail@plt+0xeca0>
   201ec:	push	{r0, r1, r4, lr}
   201f0:	subs	r4, r0, #0
   201f4:	bne	20208 <__assert_fail@plt+0xed20>
   201f8:	mov	r0, r4
   201fc:	add	sp, sp, #8
   20200:	pop	{r4, lr}
   20204:	b	111d0 <fflush@plt>
   20208:	bl	11350 <__freading@plt>
   2020c:	cmp	r0, #0
   20210:	beq	201f8 <__assert_fail@plt+0xed10>
   20214:	ldr	r3, [r4]
   20218:	tst	r3, #256	; 0x100
   2021c:	beq	201f8 <__assert_fail@plt+0xed10>
   20220:	mov	r3, #1
   20224:	mov	r2, #0
   20228:	mov	r0, r4
   2022c:	str	r3, [sp]
   20230:	mov	r3, #0
   20234:	bl	2023c <__assert_fail@plt+0xed54>
   20238:	b	201f8 <__assert_fail@plt+0xed10>
   2023c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   20240:	mov	r4, r0
   20244:	ldmib	r0, {ip, lr}
   20248:	ldr	r8, [sp, #32]
   2024c:	cmp	lr, ip
   20250:	bne	202c0 <__assert_fail@plt+0xedd8>
   20254:	ldr	ip, [r0, #16]
   20258:	ldr	lr, [r0, #20]
   2025c:	cmp	lr, ip
   20260:	bne	202c0 <__assert_fail@plt+0xedd8>
   20264:	ldr	r5, [r0, #36]	; 0x24
   20268:	cmp	r5, #0
   2026c:	bne	202c0 <__assert_fail@plt+0xedd8>
   20270:	mov	r6, r2
   20274:	mov	r7, r3
   20278:	bl	11410 <fileno@plt>
   2027c:	mov	r2, r6
   20280:	mov	r3, r7
   20284:	str	r8, [sp]
   20288:	bl	112d8 <lseek64@plt>
   2028c:	mvn	r3, #0
   20290:	mvn	r2, #0
   20294:	cmp	r1, r3
   20298:	cmpeq	r0, r2
   2029c:	mvneq	r0, #0
   202a0:	beq	202b8 <__assert_fail@plt+0xedd0>
   202a4:	ldr	r3, [r4]
   202a8:	strd	r0, [r4, #80]	; 0x50
   202ac:	mov	r0, r5
   202b0:	bic	r3, r3, #16
   202b4:	str	r3, [r4]
   202b8:	add	sp, sp, #8
   202bc:	pop	{r4, r5, r6, r7, r8, pc}
   202c0:	mov	r0, r4
   202c4:	str	r8, [sp, #32]
   202c8:	add	sp, sp, #8
   202cc:	pop	{r4, r5, r6, r7, r8, lr}
   202d0:	b	11440 <fseeko64@plt>
   202d4:	b	1ffc4 <__assert_fail@plt+0xeadc>
   202d8:	cmp	r1, #0
   202dc:	orreq	r1, r1, #1
   202e0:	b	1fff0 <__assert_fail@plt+0xeb08>
   202e4:	b	1ff70 <__assert_fail@plt+0xea88>
   202e8:	cmp	r2, #0
   202ec:	cmpne	r1, #0
   202f0:	moveq	r2, #1
   202f4:	moveq	r1, r2
   202f8:	b	2041c <__assert_fail@plt+0xef34>
   202fc:	push	{r4, lr}
   20300:	mov	r0, #14
   20304:	bl	1147c <nl_langinfo@plt>
   20308:	cmp	r0, #0
   2030c:	beq	20324 <__assert_fail@plt+0xee3c>
   20310:	ldrb	r2, [r0]
   20314:	ldr	r3, [pc, #16]	; 2032c <__assert_fail@plt+0xee44>
   20318:	cmp	r2, #0
   2031c:	moveq	r0, r3
   20320:	pop	{r4, pc}
   20324:	ldr	r0, [pc]	; 2032c <__assert_fail@plt+0xee44>
   20328:	pop	{r4, pc}
   2032c:	muleq	r2, sl, r7
   20330:	push	{r4, lr}
   20334:	mov	r4, r0
   20338:	bl	111dc <wcwidth@plt>
   2033c:	cmp	r0, #0
   20340:	popge	{r4, pc}
   20344:	mov	r0, r4
   20348:	bl	112b4 <iswcntrl@plt>
   2034c:	clz	r0, r0
   20350:	lsr	r0, r0, #5
   20354:	pop	{r4, pc}
   20358:	mov	r3, r1
   2035c:	push	{r4, r5, r6, lr}
   20360:	mov	r5, r1
   20364:	mov	r4, r0
   20368:	ldr	r1, [r3], #16
   2036c:	cmp	r1, r3
   20370:	strne	r1, [r0]
   20374:	bne	2038c <__assert_fail@plt+0xeea4>
   20378:	add	r3, r0, #16
   2037c:	ldr	r2, [r5, #4]
   20380:	mov	r0, r3
   20384:	bl	11218 <memcpy@plt>
   20388:	str	r0, [r4]
   2038c:	ldr	r3, [r5, #4]
   20390:	str	r3, [r4, #4]
   20394:	ldrb	r3, [r5, #8]
   20398:	cmp	r3, #0
   2039c:	strb	r3, [r4, #8]
   203a0:	ldrne	r3, [r5, #12]
   203a4:	strne	r3, [r4, #12]
   203a8:	pop	{r4, r5, r6, pc}
   203ac:	ldr	r3, [pc, #20]	; 203c8 <__assert_fail@plt+0xeee0>
   203b0:	lsr	r2, r0, #5
   203b4:	and	r0, r0, #31
   203b8:	ldr	r3, [r3, r2, lsl #2]
   203bc:	lsr	r0, r3, r0
   203c0:	and	r0, r0, #1
   203c4:	bx	lr
   203c8:	andeq	r1, r2, r0, lsr #15
   203cc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   203d0:	subs	r5, r0, #0
   203d4:	mov	r7, r2
   203d8:	addeq	r5, sp, #4
   203dc:	mov	r6, r1
   203e0:	mov	r0, r5
   203e4:	bl	11308 <mbrtowc@plt>
   203e8:	cmp	r7, #0
   203ec:	cmnne	r0, #3
   203f0:	mov	r4, r0
   203f4:	bls	20410 <__assert_fail@plt+0xef28>
   203f8:	mov	r0, #0
   203fc:	bl	20448 <__assert_fail@plt+0xef60>
   20400:	cmp	r0, #0
   20404:	ldrbeq	r3, [r6]
   20408:	moveq	r4, #1
   2040c:	streq	r3, [r5]
   20410:	mov	r0, r4
   20414:	add	sp, sp, #12
   20418:	pop	{r4, r5, r6, r7, pc}
   2041c:	umull	r2, r3, r1, r2
   20420:	cmp	r3, #0
   20424:	bne	20430 <__assert_fail@plt+0xef48>
   20428:	mov	r1, r2
   2042c:	b	1fff0 <__assert_fail@plt+0xeb08>
   20430:	push	{r4, lr}
   20434:	bl	113c8 <__errno_location@plt>
   20438:	mov	r3, #12
   2043c:	str	r3, [r0]
   20440:	mov	r0, #0
   20444:	pop	{r4, pc}
   20448:	push	{lr}		; (str lr, [sp, #-4]!)
   2044c:	sub	sp, sp, #268	; 0x10c
   20450:	movw	r2, #257	; 0x101
   20454:	add	r1, sp, #4
   20458:	bl	204a4 <__assert_fail@plt+0xefbc>
   2045c:	cmp	r0, #0
   20460:	movne	r0, #0
   20464:	bne	20494 <__assert_fail@plt+0xefac>
   20468:	ldr	r1, [pc, #44]	; 2049c <__assert_fail@plt+0xefb4>
   2046c:	add	r0, sp, #4
   20470:	bl	111a0 <strcmp@plt>
   20474:	cmp	r0, #0
   20478:	beq	20490 <__assert_fail@plt+0xefa8>
   2047c:	ldr	r1, [pc, #28]	; 204a0 <__assert_fail@plt+0xefb8>
   20480:	add	r0, sp, #4
   20484:	bl	111a0 <strcmp@plt>
   20488:	adds	r0, r0, #0
   2048c:	movne	r0, #1
   20490:	and	r0, r0, #1
   20494:	add	sp, sp, #268	; 0x10c
   20498:	pop	{pc}		; (ldr pc, [sp], #4)
   2049c:	andeq	r1, r2, r0, asr #15
   204a0:	andeq	r1, r2, r2, asr #15
   204a4:	push	{r4, r5, r6, lr}
   204a8:	mov	r5, r1
   204ac:	mov	r1, #0
   204b0:	mov	r4, r2
   204b4:	bl	11458 <setlocale@plt>
   204b8:	subs	r6, r0, #0
   204bc:	bne	204d0 <__assert_fail@plt+0xefe8>
   204c0:	cmp	r4, #0
   204c4:	mov	r0, #22
   204c8:	strbne	r6, [r5]
   204cc:	pop	{r4, r5, r6, pc}
   204d0:	bl	11398 <strlen@plt>
   204d4:	cmp	r4, r0
   204d8:	bls	204f4 <__assert_fail@plt+0xf00c>
   204dc:	add	r2, r0, #1
   204e0:	mov	r1, r6
   204e4:	mov	r0, r5
   204e8:	bl	11218 <memcpy@plt>
   204ec:	mov	r0, #0
   204f0:	pop	{r4, r5, r6, pc}
   204f4:	cmp	r4, #0
   204f8:	beq	20518 <__assert_fail@plt+0xf030>
   204fc:	sub	r4, r4, #1
   20500:	mov	r1, r6
   20504:	mov	r2, r4
   20508:	mov	r0, r5
   2050c:	bl	11218 <memcpy@plt>
   20510:	mov	r3, #0
   20514:	strb	r3, [r5, r4]
   20518:	mov	r0, #34	; 0x22
   2051c:	pop	{r4, r5, r6, pc}
   20520:	mov	r1, #0
   20524:	b	11458 <setlocale@plt>
   20528:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2052c:	mov	r7, r0
   20530:	ldr	r6, [pc, #72]	; 20580 <__assert_fail@plt+0xf098>
   20534:	ldr	r5, [pc, #72]	; 20584 <__assert_fail@plt+0xf09c>
   20538:	add	r6, pc, r6
   2053c:	add	r5, pc, r5
   20540:	sub	r6, r6, r5
   20544:	mov	r8, r1
   20548:	mov	r9, r2
   2054c:	bl	11138 <pthread_mutex_unlock@plt-0x20>
   20550:	asrs	r6, r6, #2
   20554:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   20558:	mov	r4, #0
   2055c:	add	r4, r4, #1
   20560:	ldr	r3, [r5], #4
   20564:	mov	r2, r9
   20568:	mov	r1, r8
   2056c:	mov	r0, r7
   20570:	blx	r3
   20574:	cmp	r6, r4
   20578:	bne	2055c <__assert_fail@plt+0xf074>
   2057c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20580:	andeq	r1, r1, ip, asr #19
   20584:	andeq	r1, r1, r4, asr #19
   20588:	bx	lr
   2058c:	ldr	r3, [pc, #12]	; 205a0 <__assert_fail@plt+0xf0b8>
   20590:	mov	r1, #0
   20594:	add	r3, pc, r3
   20598:	ldr	r2, [r3]
   2059c:	b	113e0 <__cxa_atexit@plt>
   205a0:	andeq	r1, r1, ip, lsr #23

Disassembly of section .fini:

000205a4 <.fini>:
   205a4:	push	{r3, lr}
   205a8:	pop	{r3, pc}
