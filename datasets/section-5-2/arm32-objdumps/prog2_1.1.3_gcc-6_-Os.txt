
../repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

000105c0 <.init>:
   105c0:	push	{r3, lr}
   105c4:	bl	10784 <_start@@Base+0x3c>
   105c8:	pop	{r3, pc}

Disassembly of section .plt:

000105cc <printf@plt-0x14>:
   105cc:	push	{lr}		; (str lr, [sp, #-4]!)
   105d0:	ldr	lr, [pc, #4]	; 105dc <printf@plt-0x4>
   105d4:	add	lr, pc, lr
   105d8:	ldr	pc, [lr, #8]!
   105dc:	andeq	r0, r1, r4, lsr #20

000105e0 <printf@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2596]!	; 0xa24

000105ec <fopen@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2588]!	; 0xa1c

000105f8 <__libc_start_main@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2580]!	; 0xa14

00010604 <__gmon_start__@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2572]!	; 0xa0c

00010610 <fclose@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2564]!	; 0xa04

0001061c <abort@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2556]!	; 0x9fc

00010628 <getc@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00010634 <main@@Base>:
   10634:	push	{r4, r5, r6, r7, r8, lr}
   10638:	mov	r0, #131	; 0x83
   1063c:	sub	sp, sp, #24
   10640:	mov	r1, #163	; 0xa3
   10644:	mov	r2, #149	; 0x95
   10648:	mov	r3, #181	; 0xb5
   1064c:	mov	r4, #0
   10650:	stm	sp, {r0, r1, r2, r3}
   10654:	mov	r3, #135	; 0x87
   10658:	str	r3, [sp, #16]
   1065c:	ldr	r1, [pc, #212]	; 10738 <main@@Base+0x104>
   10660:	mov	r3, #167	; 0xa7
   10664:	ldr	r0, [pc, #208]	; 1073c <main@@Base+0x108>
   10668:	str	r3, [sp, #20]
   1066c:	bl	105ec <fopen@plt>
   10670:	mov	r6, r4
   10674:	mov	r7, r4
   10678:	mov	r5, r4
   1067c:	mov	r8, r0
   10680:	cmn	r5, #1
   10684:	mov	r0, r8
   10688:	bne	106cc <main@@Base+0x98>
   1068c:	bl	10610 <fclose@plt>
   10690:	mov	r2, r7
   10694:	mov	r1, #65	; 0x41
   10698:	ldr	r0, [pc, #160]	; 10740 <main@@Base+0x10c>
   1069c:	bl	105e0 <printf@plt>
   106a0:	mov	r2, r6
   106a4:	mov	r1, #79	; 0x4f
   106a8:	ldr	r0, [pc, #144]	; 10740 <main@@Base+0x10c>
   106ac:	bl	105e0 <printf@plt>
   106b0:	mov	r2, r4
   106b4:	mov	r1, #67	; 0x43
   106b8:	ldr	r0, [pc, #132]	; 10744 <main@@Base+0x110>
   106bc:	bl	105e0 <printf@plt>
   106c0:	mov	r0, #0
   106c4:	add	sp, sp, #24
   106c8:	pop	{r4, r5, r6, r7, r8, pc}
   106cc:	bl	10628 <getc@plt>
   106d0:	cmp	r0, #195	; 0xc3
   106d4:	mov	r5, r0
   106d8:	bne	10680 <main@@Base+0x4c>
   106dc:	mov	r0, r8
   106e0:	bl	10628 <getc@plt>
   106e4:	mov	r2, #2
   106e8:	mov	r1, sp
   106ec:	mov	r5, r0
   106f0:	bl	10870 <in_array@@Base>
   106f4:	cmp	r0, #0
   106f8:	addne	r7, r7, #1
   106fc:	bne	10680 <main@@Base+0x4c>
   10700:	mov	r2, #2
   10704:	add	r1, sp, #8
   10708:	mov	r0, r5
   1070c:	bl	10870 <in_array@@Base>
   10710:	cmp	r0, #0
   10714:	addne	r6, r6, #1
   10718:	bne	10680 <main@@Base+0x4c>
   1071c:	mov	r2, #2
   10720:	add	r1, sp, #16
   10724:	mov	r0, r5
   10728:	bl	10870 <in_array@@Base>
   1072c:	cmp	r0, #0
   10730:	addne	r4, r4, #1
   10734:	b	10680 <main@@Base+0x4c>
   10738:	andeq	r0, r1, ip, lsl #18
   1073c:	andeq	r0, r1, lr, lsl #18
   10740:	andeq	r0, r1, sl, lsr #18
   10744:	andeq	r0, r1, r1, asr #18

00010748 <_start@@Base>:
   10748:	mov	fp, #0
   1074c:	mov	lr, #0
   10750:	pop	{r1}		; (ldr r1, [sp], #4)
   10754:	mov	r2, sp
   10758:	push	{r2}		; (str r2, [sp, #-4]!)
   1075c:	push	{r0}		; (str r0, [sp, #-4]!)
   10760:	ldr	ip, [pc, #16]	; 10778 <_start@@Base+0x30>
   10764:	push	{ip}		; (str ip, [sp, #-4]!)
   10768:	ldr	r0, [pc, #12]	; 1077c <_start@@Base+0x34>
   1076c:	ldr	r3, [pc, #12]	; 10780 <_start@@Base+0x38>
   10770:	bl	105f8 <__libc_start_main@plt>
   10774:	bl	1061c <abort@plt>
   10778:	strdeq	r0, [r1], -ip
   1077c:	andeq	r0, r1, r4, lsr r6
   10780:	muleq	r1, ip, r8
   10784:	ldr	r3, [pc, #20]	; 107a0 <_start@@Base+0x58>
   10788:	ldr	r2, [pc, #20]	; 107a4 <_start@@Base+0x5c>
   1078c:	add	r3, pc, r3
   10790:	ldr	r2, [r3, r2]
   10794:	cmp	r2, #0
   10798:	bxeq	lr
   1079c:	b	10604 <__gmon_start__@plt>
   107a0:	andeq	r0, r1, ip, ror #16
   107a4:	andeq	r0, r0, r8, lsr #32
   107a8:	ldr	r3, [pc, #28]	; 107cc <_start@@Base+0x84>
   107ac:	ldr	r0, [pc, #28]	; 107d0 <_start@@Base+0x88>
   107b0:	sub	r3, r3, r0
   107b4:	cmp	r3, #6
   107b8:	bxls	lr
   107bc:	ldr	r3, [pc, #16]	; 107d4 <_start@@Base+0x8c>
   107c0:	cmp	r3, #0
   107c4:	bxeq	lr
   107c8:	bx	r3
   107cc:	andeq	r1, r2, r7, lsr r0
   107d0:	andeq	r1, r2, r4, lsr r0
   107d4:	andeq	r0, r0, r0
   107d8:	ldr	r1, [pc, #36]	; 10804 <_start@@Base+0xbc>
   107dc:	ldr	r0, [pc, #36]	; 10808 <_start@@Base+0xc0>
   107e0:	sub	r1, r1, r0
   107e4:	asr	r1, r1, #2
   107e8:	add	r1, r1, r1, lsr #31
   107ec:	asrs	r1, r1, #1
   107f0:	bxeq	lr
   107f4:	ldr	r3, [pc, #16]	; 1080c <_start@@Base+0xc4>
   107f8:	cmp	r3, #0
   107fc:	bxeq	lr
   10800:	bx	r3
   10804:	andeq	r1, r2, r4, lsr r0
   10808:	andeq	r1, r2, r4, lsr r0
   1080c:	andeq	r0, r0, r0
   10810:	push	{r4, lr}
   10814:	ldr	r4, [pc, #24]	; 10834 <_start@@Base+0xec>
   10818:	ldrb	r3, [r4]
   1081c:	cmp	r3, #0
   10820:	popne	{r4, pc}
   10824:	bl	107a8 <_start@@Base+0x60>
   10828:	mov	r3, #1
   1082c:	strb	r3, [r4]
   10830:	pop	{r4, pc}
   10834:	andeq	r1, r2, r4, lsr r0
   10838:	ldr	r0, [pc, #40]	; 10868 <_start@@Base+0x120>
   1083c:	ldr	r3, [r0]
   10840:	cmp	r3, #0
   10844:	bne	1084c <_start@@Base+0x104>
   10848:	b	107d8 <_start@@Base+0x90>
   1084c:	ldr	r3, [pc, #24]	; 1086c <_start@@Base+0x124>
   10850:	cmp	r3, #0
   10854:	beq	10848 <_start@@Base+0x100>
   10858:	push	{r4, lr}
   1085c:	blx	r3
   10860:	pop	{r4, lr}
   10864:	b	107d8 <_start@@Base+0x90>
   10868:	andeq	r0, r2, r4, lsl pc
   1086c:	andeq	r0, r0, r0

00010870 <in_array@@Base>:
   10870:	mov	r3, #0
   10874:	cmp	r3, r2
   10878:	ble	10884 <in_array@@Base+0x14>
   1087c:	mov	r0, #0
   10880:	bx	lr
   10884:	ldr	ip, [r1, r3, lsl #2]
   10888:	cmp	ip, r0
   1088c:	addne	r3, r3, #1
   10890:	bne	10874 <in_array@@Base+0x4>
   10894:	mov	r0, #1
   10898:	bx	lr

0001089c <__libc_csu_init@@Base>:
   1089c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108a0:	mov	r7, r0
   108a4:	ldr	r6, [pc, #72]	; 108f4 <__libc_csu_init@@Base+0x58>
   108a8:	ldr	r5, [pc, #72]	; 108f8 <__libc_csu_init@@Base+0x5c>
   108ac:	add	r6, pc, r6
   108b0:	add	r5, pc, r5
   108b4:	sub	r6, r6, r5
   108b8:	mov	r8, r1
   108bc:	mov	r9, r2
   108c0:	bl	105c0 <printf@plt-0x20>
   108c4:	asrs	r6, r6, #2
   108c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108cc:	mov	r4, #0
   108d0:	add	r4, r4, #1
   108d4:	ldr	r3, [r5], #4
   108d8:	mov	r2, r9
   108dc:	mov	r1, r8
   108e0:	mov	r0, r7
   108e4:	blx	r3
   108e8:	cmp	r6, r4
   108ec:	bne	108d0 <__libc_csu_init@@Base+0x34>
   108f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108f4:	andeq	r0, r1, ip, asr r6
   108f8:	andeq	r0, r1, r4, asr r6

000108fc <__libc_csu_fini@@Base>:
   108fc:	bx	lr

Disassembly of section .fini:

00010900 <.fini>:
   10900:	push	{r3, lr}
   10904:	pop	{r3, pc}
