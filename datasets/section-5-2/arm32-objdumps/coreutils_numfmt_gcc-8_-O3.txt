
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010df4 <.init>:
   10df4:	push	{r3, lr}
   10df8:	bl	11df0 <__assert_fail@plt+0xd24>
   10dfc:	pop	{r3, pc}

Disassembly of section .plt:

00010e00 <calloc@plt-0x14>:
   10e00:	push	{lr}		; (str lr, [sp, #-4]!)
   10e04:	ldr	lr, [pc, #4]	; 10e10 <calloc@plt-0x4>
   10e08:	add	lr, pc, lr
   10e0c:	ldr	pc, [lr, #8]!
   10e10:	strdeq	lr, [r1], -r0

00010e14 <calloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #122880	; 0x1e000
   10e1c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e20 <fputs_unlocked@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #122880	; 0x1e000
   10e28:	ldr	pc, [ip, #488]!	; 0x1e8

00010e2c <__strncat_chk@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #122880	; 0x1e000
   10e34:	ldr	pc, [ip, #480]!	; 0x1e0

00010e38 <strcmp@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #122880	; 0x1e000
   10e40:	ldr	pc, [ip, #472]!	; 0x1d8

00010e44 <strtol@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #122880	; 0x1e000
   10e4c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e50 <fflush@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #122880	; 0x1e000
   10e58:	ldr	pc, [ip, #456]!	; 0x1c8

00010e5c <wcwidth@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #122880	; 0x1e000
   10e64:	ldr	pc, [ip, #448]!	; 0x1c0

00010e68 <memmove@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #122880	; 0x1e000
   10e70:	ldr	pc, [ip, #440]!	; 0x1b8

00010e74 <free@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #122880	; 0x1e000
   10e7c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e80 <_exit@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #122880	; 0x1e000
   10e88:	ldr	pc, [ip, #424]!	; 0x1a8

00010e8c <memcpy@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #122880	; 0x1e000
   10e94:	ldr	pc, [ip, #416]!	; 0x1a0

00010e98 <__strtoull_internal@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #122880	; 0x1e000
   10ea0:	ldr	pc, [ip, #408]!	; 0x198

00010ea4 <mbsinit@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #122880	; 0x1e000
   10eac:	ldr	pc, [ip, #400]!	; 0x190

00010eb0 <memcmp@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #122880	; 0x1e000
   10eb8:	ldr	pc, [ip, #392]!	; 0x188

00010ebc <fputc_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #122880	; 0x1e000
   10ec4:	ldr	pc, [ip, #384]!	; 0x180

00010ec8 <dcgettext@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #122880	; 0x1e000
   10ed0:	ldr	pc, [ip, #376]!	; 0x178

00010ed4 <realloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #122880	; 0x1e000
   10edc:	ldr	pc, [ip, #368]!	; 0x170

00010ee0 <textdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #122880	; 0x1e000
   10ee8:	ldr	pc, [ip, #360]!	; 0x168

00010eec <iswprint@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #122880	; 0x1e000
   10ef4:	ldr	pc, [ip, #352]!	; 0x160

00010ef8 <fwrite@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #122880	; 0x1e000
   10f00:	ldr	pc, [ip, #344]!	; 0x158

00010f04 <lseek64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #122880	; 0x1e000
   10f0c:	ldr	pc, [ip, #336]!	; 0x150

00010f10 <__ctype_get_mb_cur_max@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #122880	; 0x1e000
   10f18:	ldr	pc, [ip, #328]!	; 0x148

00010f1c <strcpy@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #122880	; 0x1e000
   10f24:	ldr	pc, [ip, #320]!	; 0x140

00010f28 <__fpending@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #122880	; 0x1e000
   10f30:	ldr	pc, [ip, #312]!	; 0x138

00010f34 <mbrtowc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #122880	; 0x1e000
   10f3c:	ldr	pc, [ip, #304]!	; 0x130

00010f40 <wcstombs@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #122880	; 0x1e000
   10f48:	ldr	pc, [ip, #296]!	; 0x128

00010f4c <error@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #122880	; 0x1e000
   10f54:	ldr	pc, [ip, #288]!	; 0x120

00010f58 <malloc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #122880	; 0x1e000
   10f60:	ldr	pc, [ip, #280]!	; 0x118

00010f64 <__libc_start_main@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #122880	; 0x1e000
   10f6c:	ldr	pc, [ip, #272]!	; 0x110

00010f70 <__freading@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #122880	; 0x1e000
   10f78:	ldr	pc, [ip, #264]!	; 0x108

00010f7c <__gmon_start__@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #122880	; 0x1e000
   10f84:	ldr	pc, [ip, #256]!	; 0x100

00010f88 <mempcpy@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #122880	; 0x1e000
   10f90:	ldr	pc, [ip, #248]!	; 0xf8

00010f94 <getopt_long@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #122880	; 0x1e000
   10f9c:	ldr	pc, [ip, #240]!	; 0xf0

00010fa0 <__ctype_b_loc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #122880	; 0x1e000
   10fa8:	ldr	pc, [ip, #232]!	; 0xe8

00010fac <exit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #122880	; 0x1e000
   10fb4:	ldr	pc, [ip, #224]!	; 0xe0

00010fb8 <strlen@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #122880	; 0x1e000
   10fc0:	ldr	pc, [ip, #216]!	; 0xd8

00010fc4 <strchr@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #122880	; 0x1e000
   10fcc:	ldr	pc, [ip, #208]!	; 0xd0

00010fd0 <__errno_location@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #122880	; 0x1e000
   10fd8:	ldr	pc, [ip, #200]!	; 0xc8

00010fdc <__cxa_atexit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #122880	; 0x1e000
   10fe4:	ldr	pc, [ip, #192]!	; 0xc0

00010fe8 <memset@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #122880	; 0x1e000
   10ff0:	ldr	pc, [ip, #184]!	; 0xb8

00010ff4 <__printf_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #122880	; 0x1e000
   10ffc:	ldr	pc, [ip, #176]!	; 0xb0

00011000 <fileno@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #122880	; 0x1e000
   11008:	ldr	pc, [ip, #168]!	; 0xa8

0001100c <__fprintf_chk@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #122880	; 0x1e000
   11014:	ldr	pc, [ip, #160]!	; 0xa0

00011018 <fclose@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #122880	; 0x1e000
   11020:	ldr	pc, [ip, #152]!	; 0x98

00011024 <fseeko64@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #122880	; 0x1e000
   1102c:	ldr	pc, [ip, #144]!	; 0x90

00011030 <__overflow@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #122880	; 0x1e000
   11038:	ldr	pc, [ip, #136]!	; 0x88

0001103c <setlocale@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #122880	; 0x1e000
   11044:	ldr	pc, [ip, #128]!	; 0x80

00011048 <wcswidth@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #122880	; 0x1e000
   11050:	ldr	pc, [ip, #120]!	; 0x78

00011054 <strrchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #122880	; 0x1e000
   1105c:	ldr	pc, [ip, #112]!	; 0x70

00011060 <nl_langinfo@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #122880	; 0x1e000
   11068:	ldr	pc, [ip, #104]!	; 0x68

0001106c <mbstowcs@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #122880	; 0x1e000
   11074:	ldr	pc, [ip, #96]!	; 0x60

00011078 <qsort@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #122880	; 0x1e000
   11080:	ldr	pc, [ip, #88]!	; 0x58

00011084 <bindtextdomain@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #122880	; 0x1e000
   1108c:	ldr	pc, [ip, #80]!	; 0x50

00011090 <getdelim@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #122880	; 0x1e000
   11098:	ldr	pc, [ip, #72]!	; 0x48

0001109c <strncmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #122880	; 0x1e000
   110a4:	ldr	pc, [ip, #64]!	; 0x40

000110a8 <abort@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #122880	; 0x1e000
   110b0:	ldr	pc, [ip, #56]!	; 0x38

000110b4 <__snprintf_chk@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #48]!	; 0x30

000110c0 <strspn@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #40]!	; 0x28

000110cc <__assert_fail@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110d8 <.text>:
   110d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   110dc:	movw	r4, #61864	; 0xf1a8
   110e0:	movt	r4, #2
   110e4:	strd	r6, [sp, #8]
   110e8:	mov	r7, r1
   110ec:	strd	r8, [sp, #16]
   110f0:	mov	r8, r0
   110f4:	strd	sl, [sp, #24]
   110f8:	str	lr, [sp, #32]
   110fc:	sub	sp, sp, #52	; 0x34
   11100:	ldr	r0, [r1]
   11104:	bl	154f8 <__assert_fail@plt+0x442c>
   11108:	movw	r1, #52576	; 0xcd60
   1110c:	movt	r1, #1
   11110:	mov	r0, #6
   11114:	bl	1103c <setlocale@plt>
   11118:	movw	r1, #54348	; 0xd44c
   1111c:	movt	r1, #1
   11120:	str	r0, [sp, #32]
   11124:	movw	r0, #54156	; 0xd38c
   11128:	movt	r0, #1
   1112c:	bl	11084 <bindtextdomain@plt>
   11130:	movw	r0, #54156	; 0xd38c
   11134:	movt	r0, #1
   11138:	bl	10ee0 <textdomain@plt>
   1113c:	mov	r0, #65536	; 0x10000
   11140:	bl	11060 <nl_langinfo@plt>
   11144:	cmp	r0, #0
   11148:	str	r0, [r4, #4]
   1114c:	beq	11220 <__assert_fail@plt+0x154>
   11150:	ldrb	r3, [r0]
   11154:	cmp	r3, #0
   11158:	beq	11220 <__assert_fail@plt+0x154>
   1115c:	movw	r3, #47904	; 0xbb20
   11160:	movt	r3, #1
   11164:	ldr	r0, [r4, #4]
   11168:	mov	r5, r3
   1116c:	movw	r6, #54376	; 0xd468
   11170:	movt	r6, #1
   11174:	str	r3, [sp, #28]
   11178:	movw	sl, #61856	; 0xf1a0
   1117c:	movt	sl, #2
   11180:	add	r9, r5, #180	; 0xb4
   11184:	bl	10fb8 <strlen@plt>
   11188:	str	r0, [r4]
   1118c:	movw	r0, #19324	; 0x4b7c
   11190:	movt	r0, #1
   11194:	bl	1bafc <__assert_fail@plt+0xaa30>
   11198:	mov	r5, #0
   1119c:	mov	r3, r9
   111a0:	mov	r2, r6
   111a4:	mov	r1, r7
   111a8:	mov	r0, r8
   111ac:	str	r5, [sp]
   111b0:	bl	10f94 <getopt_long@plt>
   111b4:	cmn	r0, #1
   111b8:	beq	1158c <__assert_fail@plt+0x4c0>
   111bc:	cmp	r0, #260	; 0x104
   111c0:	beq	11384 <__assert_fail@plt+0x2b8>
   111c4:	ble	112a0 <__assert_fail@plt+0x1d4>
   111c8:	movw	r3, #265	; 0x109
   111cc:	cmp	r0, r3
   111d0:	beq	11378 <__assert_fail@plt+0x2ac>
   111d4:	bgt	11230 <__assert_fail@plt+0x164>
   111d8:	movw	r3, #262	; 0x106
   111dc:	cmp	r0, r3
   111e0:	beq	1136c <__assert_fail@plt+0x2a0>
   111e4:	blt	11360 <__assert_fail@plt+0x294>
   111e8:	movw	r3, #263	; 0x107
   111ec:	cmp	r0, r3
   111f0:	beq	114d8 <__assert_fail@plt+0x40c>
   111f4:	cmp	r0, #264	; 0x108
   111f8:	bne	11304 <__assert_fail@plt+0x238>
   111fc:	movw	r3, #61940	; 0xf1f4
   11200:	movt	r3, #2
   11204:	ldr	r3, [r3]
   11208:	cmp	r3, #0
   1120c:	bne	11d60 <__assert_fail@plt+0xc94>
   11210:	mov	r1, #1
   11214:	ldr	r0, [sl]
   11218:	bl	13e14 <__assert_fail@plt+0x2d48>
   1121c:	b	11198 <__assert_fail@plt+0xcc>
   11220:	movw	r3, #54372	; 0xd464
   11224:	movt	r3, #1
   11228:	str	r3, [r4, #4]
   1122c:	b	1115c <__assert_fail@plt+0x90>
   11230:	movw	r3, #267	; 0x10b
   11234:	cmp	r0, r3
   11238:	beq	11418 <__assert_fail@plt+0x34c>
   1123c:	blt	11408 <__assert_fail@plt+0x33c>
   11240:	cmp	r0, #268	; 0x10c
   11244:	beq	114cc <__assert_fail@plt+0x400>
   11248:	movw	r3, #269	; 0x10d
   1124c:	cmp	r0, r3
   11250:	bne	11304 <__assert_fail@plt+0x238>
   11254:	movw	r2, #61752	; 0xf138
   11258:	movt	r2, #2
   1125c:	ldr	r3, [pc, #2872]	; 11d9c <__assert_fail@plt+0xcd0>
   11260:	mov	r1, #1
   11264:	mov	lr, #4
   11268:	ldr	ip, [r2]
   1126c:	movw	r0, #54532	; 0xd504
   11270:	movt	r0, #1
   11274:	str	lr, [sp]
   11278:	str	r1, [sp, #8]
   1127c:	add	r2, r3, #16
   11280:	ldr	r1, [sl]
   11284:	str	ip, [sp, #4]
   11288:	bl	149bc <__assert_fail@plt+0x38f0>
   1128c:	ldr	r3, [sp, #28]
   11290:	add	r0, r3, r0, lsl #2
   11294:	ldr	r3, [r0, #608]	; 0x260
   11298:	str	r3, [r4, #36]	; 0x24
   1129c:	b	11198 <__assert_fail@plt+0xcc>
   112a0:	cmp	r0, #122	; 0x7a
   112a4:	beq	113f8 <__assert_fail@plt+0x32c>
   112a8:	ble	112ec <__assert_fail@plt+0x220>
   112ac:	movw	r3, #257	; 0x101
   112b0:	cmp	r0, r3
   112b4:	beq	113e0 <__assert_fail@plt+0x314>
   112b8:	ble	1130c <__assert_fail@plt+0x240>
   112bc:	movw	r3, #258	; 0x102
   112c0:	cmp	r0, r3
   112c4:	beq	11530 <__assert_fail@plt+0x464>
   112c8:	movw	r3, #259	; 0x103
   112cc:	cmp	r0, r3
   112d0:	bne	11304 <__assert_fail@plt+0x238>
   112d4:	movw	fp, #61704	; 0xf108
   112d8:	movt	fp, #2
   112dc:	ldr	r0, [sl]
   112e0:	bl	11ea8 <__assert_fail@plt+0xddc>
   112e4:	strd	r0, [fp, #16]
   112e8:	b	11198 <__assert_fail@plt+0xcc>
   112ec:	cmn	r0, #2
   112f0:	beq	113d8 <__assert_fail@plt+0x30c>
   112f4:	cmp	r0, #100	; 0x64
   112f8:	beq	11460 <__assert_fail@plt+0x394>
   112fc:	cmn	r0, #3
   11300:	beq	1148c <__assert_fail@plt+0x3c0>
   11304:	mov	r0, #1
   11308:	bl	137cc <__assert_fail@plt+0x2700>
   1130c:	cmp	r0, #256	; 0x100
   11310:	bne	11304 <__assert_fail@plt+0x238>
   11314:	movw	r2, #61752	; 0xf138
   11318:	movt	r2, #2
   1131c:	ldr	r3, [pc, #2684]	; 11da0 <__assert_fail@plt+0xcd4>
   11320:	mov	r1, #1
   11324:	mov	lr, #4
   11328:	ldr	ip, [r2]
   1132c:	movw	r0, #54380	; 0xd46c
   11330:	movt	r0, #1
   11334:	str	lr, [sp]
   11338:	str	r1, [sp, #8]
   1133c:	add	r2, r3, #20
   11340:	ldr	r1, [sl]
   11344:	str	ip, [sp, #4]
   11348:	bl	149bc <__assert_fail@plt+0x38f0>
   1134c:	ldr	r3, [sp, #28]
   11350:	add	r0, r3, r0, lsl #2
   11354:	ldr	r3, [r0, #484]	; 0x1e4
   11358:	str	r3, [r4, #32]
   1135c:	b	11198 <__assert_fail@plt+0xcc>
   11360:	ldr	r3, [sl]
   11364:	str	r3, [r4, #8]
   11368:	b	11198 <__assert_fail@plt+0xcc>
   1136c:	mov	r3, #1
   11370:	str	r3, [r4, #48]	; 0x30
   11374:	b	11198 <__assert_fail@plt+0xcc>
   11378:	mov	r3, #1
   1137c:	strb	r3, [r4, #40]	; 0x28
   11380:	b	11198 <__assert_fail@plt+0xcc>
   11384:	movw	r2, #61752	; 0xf138
   11388:	movt	r2, #2
   1138c:	ldr	r3, [pc, #2576]	; 11da4 <__assert_fail@plt+0xcd8>
   11390:	mov	r1, #1
   11394:	mov	lr, #4
   11398:	ldr	ip, [r2]
   1139c:	movw	r0, #54396	; 0xd47c
   113a0:	movt	r0, #1
   113a4:	str	lr, [sp]
   113a8:	movw	fp, #61704	; 0xf108
   113ac:	movt	fp, #2
   113b0:	str	r1, [sp, #8]
   113b4:	add	r2, r3, #20
   113b8:	ldr	r1, [sl]
   113bc:	str	ip, [sp, #4]
   113c0:	bl	149bc <__assert_fail@plt+0x38f0>
   113c4:	ldr	r3, [sp, #28]
   113c8:	add	r0, r3, r0, lsl #2
   113cc:	ldr	r3, [r0, #564]	; 0x234
   113d0:	str	r3, [fp, #28]
   113d4:	b	11198 <__assert_fail@plt+0xcc>
   113d8:	mov	r0, r5
   113dc:	bl	137cc <__assert_fail@plt+0x2700>
   113e0:	movw	fp, #61704	; 0xf108
   113e4:	movt	fp, #2
   113e8:	ldr	r0, [sl]
   113ec:	bl	11ea8 <__assert_fail@plt+0xddc>
   113f0:	strd	r0, [fp, #8]
   113f4:	b	11198 <__assert_fail@plt+0xcc>
   113f8:	movw	fp, #61704	; 0xf108
   113fc:	movt	fp, #2
   11400:	strb	r5, [fp, #40]	; 0x28
   11404:	b	11198 <__assert_fail@plt+0xcc>
   11408:	mov	r3, #1
   1140c:	strb	r3, [r4, #12]
   11410:	strb	r3, [r4, #40]	; 0x28
   11414:	b	11198 <__assert_fail@plt+0xcc>
   11418:	ldr	r0, [sl]
   1141c:	cmp	r0, #0
   11420:	beq	1157c <__assert_fail@plt+0x4b0>
   11424:	movw	r2, #52576	; 0xcd60
   11428:	movt	r2, #1
   1142c:	ldr	r3, [pc, #2420]	; 11da8 <__assert_fail@plt+0xcdc>
   11430:	mov	r1, r5
   11434:	str	r2, [sp]
   11438:	mov	r2, #10
   1143c:	bl	1a388 <__assert_fail@plt+0x92bc>
   11440:	cmp	r0, #0
   11444:	bne	11454 <__assert_fail@plt+0x388>
   11448:	ldrd	r2, [r4, #64]	; 0x40
   1144c:	orrs	r3, r2, r3
   11450:	bne	11198 <__assert_fail@plt+0xcc>
   11454:	movw	r1, #54508	; 0xd4ec
   11458:	movt	r1, #1
   1145c:	b	11d48 <__assert_fail@plt+0xc7c>
   11460:	ldr	r2, [sl]
   11464:	ldrb	r3, [r2]
   11468:	cmp	r3, #0
   1146c:	beq	1147c <__assert_fail@plt+0x3b0>
   11470:	ldrb	r2, [r2, #1]
   11474:	cmp	r2, #0
   11478:	bne	11d90 <__assert_fail@plt+0xcc4>
   1147c:	movw	fp, #61704	; 0xf108
   11480:	movt	fp, #2
   11484:	str	r3, [fp, #36]	; 0x24
   11488:	b	11198 <__assert_fail@plt+0xcc>
   1148c:	movw	r2, #54544	; 0xd510
   11490:	movt	r2, #1
   11494:	movw	r3, #61748	; 0xf134
   11498:	movt	r3, #2
   1149c:	movw	r0, #61852	; 0xf19c
   114a0:	movt	r0, #2
   114a4:	stm	sp, {r2, r5}
   114a8:	movw	r1, #49780	; 0xc274
   114ac:	movt	r1, #1
   114b0:	ldr	r0, [r0]
   114b4:	movw	r2, #54152	; 0xd388
   114b8:	movt	r2, #1
   114bc:	ldr	r3, [r3]
   114c0:	bl	1952c <__assert_fail@plt+0x8460>
   114c4:	mov	r0, r5
   114c8:	bl	10fac <exit@plt>
   114cc:	ldr	r3, [sl]
   114d0:	str	r3, [r4, #72]	; 0x48
   114d4:	b	11198 <__assert_fail@plt+0xcc>
   114d8:	movw	r0, #52576	; 0xcd60
   114dc:	movt	r0, #1
   114e0:	ldr	r3, [pc, #2244]	; 11dac <__assert_fail@plt+0xce0>
   114e4:	mov	r1, r5
   114e8:	mov	r2, #10
   114ec:	str	r0, [sp]
   114f0:	ldr	r0, [sl]
   114f4:	bl	19d38 <__assert_fail@plt+0x8c6c>
   114f8:	cmp	r0, #0
   114fc:	bne	11d40 <__assert_fail@plt+0xc74>
   11500:	ldr	r3, [r4, #20]
   11504:	bics	r2, r3, #-2147483648	; 0x80000000
   11508:	beq	11d40 <__assert_fail@plt+0xc74>
   1150c:	cmp	r3, #0
   11510:	bge	11198 <__assert_fail@plt+0xcc>
   11514:	rsb	r3, r3, #0
   11518:	movw	fp, #61704	; 0xf108
   1151c:	movt	fp, #2
   11520:	mov	r2, #0
   11524:	str	r3, [r4, #20]
   11528:	str	r2, [fp, #32]
   1152c:	b	11198 <__assert_fail@plt+0xcc>
   11530:	movw	r2, #61752	; 0xf138
   11534:	movt	r2, #2
   11538:	ldr	r3, [pc, #2160]	; 11db0 <__assert_fail@plt+0xce4>
   1153c:	mov	r1, #1
   11540:	mov	lr, #4
   11544:	ldr	ip, [r2]
   11548:	movw	r0, #54388	; 0xd474
   1154c:	movt	r0, #1
   11550:	str	lr, [sp]
   11554:	str	r1, [sp, #8]
   11558:	add	r2, r3, #16
   1155c:	ldr	r1, [sl]
   11560:	str	ip, [sp, #4]
   11564:	bl	149bc <__assert_fail@plt+0x38f0>
   11568:	ldr	r3, [sp, #28]
   1156c:	add	r0, r3, r0, lsl #2
   11570:	ldr	r3, [r0, #528]	; 0x210
   11574:	str	r3, [r4, #44]	; 0x2c
   11578:	b	11198 <__assert_fail@plt+0xcc>
   1157c:	mov	r2, #1
   11580:	mov	r3, #0
   11584:	strd	r2, [r4, #64]	; 0x40
   11588:	b	11198 <__assert_fail@plt+0xcc>
   1158c:	ldr	r3, [r4, #72]	; 0x48
   11590:	cmp	r3, #0
   11594:	beq	115ac <__assert_fail@plt+0x4e0>
   11598:	ldr	r3, [r4, #48]	; 0x30
   1159c:	cmp	r3, #0
   115a0:	movwne	r1, #54560	; 0xd520
   115a4:	movtne	r1, #1
   115a8:	bne	11d68 <__assert_fail@plt+0xc9c>
   115ac:	ldrb	r3, [r4, #40]	; 0x28
   115b0:	ldr	r2, [sp, #32]
   115b4:	cmp	r2, #0
   115b8:	movne	r3, #0
   115bc:	andeq	r3, r3, #1
   115c0:	cmp	r3, #0
   115c4:	bne	11ccc <__assert_fail@plt+0xc00>
   115c8:	ldrb	r3, [r4, #40]	; 0x28
   115cc:	cmp	r3, #0
   115d0:	beq	115e4 <__assert_fail@plt+0x518>
   115d4:	ldr	r2, [r4, #32]
   115d8:	ldr	r3, [r4, #44]	; 0x2c
   115dc:	orrs	r3, r2, r3
   115e0:	beq	11ab4 <__assert_fail@plt+0x9e8>
   115e4:	ldr	r5, [r4, #72]	; 0x48
   115e8:	cmp	r5, #0
   115ec:	beq	1172c <__assert_fail@plt+0x660>
   115f0:	mov	r3, #0
   115f4:	mov	r6, r3
   115f8:	str	r3, [sp, #44]	; 0x2c
   115fc:	b	11614 <__assert_fail@plt+0x548>
   11600:	cmp	r9, #0
   11604:	beq	11d34 <__assert_fail@plt+0xc68>
   11608:	mov	r2, #1
   1160c:	add	r3, r3, r2
   11610:	add	r6, r6, #1
   11614:	ldrb	r9, [r5, r3]
   11618:	cmp	r9, #37	; 0x25
   1161c:	bne	11600 <__assert_fail@plt+0x534>
   11620:	add	fp, r3, #1
   11624:	ldrb	r2, [r5, fp]
   11628:	cmp	r2, #37	; 0x25
   1162c:	bne	11834 <__assert_fail@plt+0x768>
   11630:	mov	r2, #2
   11634:	b	1160c <__assert_fail@plt+0x540>
   11638:	cmp	r6, #0
   1163c:	beq	11b6c <__assert_fail@plt+0xaa0>
   11640:	mov	r1, r6
   11644:	mov	r0, r5
   11648:	bl	19c58 <__assert_fail@plt+0x8b8c>
   1164c:	ldrb	r3, [r9]
   11650:	str	r0, [r4, #56]	; 0x38
   11654:	cmp	r3, #0
   11658:	bne	11b6c <__assert_fail@plt+0xaa0>
   1165c:	ldrb	r3, [r4, #12]
   11660:	cmp	r3, #0
   11664:	beq	1172c <__assert_fail@plt+0x660>
   11668:	mov	r1, r5
   1166c:	movw	r3, #61840	; 0xf190
   11670:	movt	r3, #2
   11674:	mov	r0, #0
   11678:	movw	r9, #61704	; 0xf108
   1167c:	movt	r9, #2
   11680:	ldr	sl, [r3]
   11684:	bl	18e58 <__assert_fail@plt+0x7d8c>
   11688:	ldr	r9, [r9, #32]
   1168c:	movw	r2, #52576	; 0xcd60
   11690:	movt	r2, #1
   11694:	mov	r3, r0
   11698:	movw	r0, #54340	; 0xd444
   1169c:	movt	r0, #1
   116a0:	ldr	r1, [r4, #56]	; 0x38
   116a4:	movw	r5, #54332	; 0xd43c
   116a8:	movt	r5, #1
   116ac:	movw	ip, #54328	; 0xd438
   116b0:	movt	ip, #1
   116b4:	movw	r6, #54324	; 0xd434
   116b8:	movt	r6, #1
   116bc:	ldr	lr, [r4, #48]	; 0x30
   116c0:	strd	r2, [sp, #28]
   116c4:	cmp	r1, #0
   116c8:	ldr	fp, [r4, #20]
   116cc:	moveq	r1, r2
   116d0:	cmp	r9, #0
   116d4:	movne	r5, r0
   116d8:	mov	r0, #1
   116dc:	cmp	lr, #0
   116e0:	moveq	r6, ip
   116e4:	bl	18e58 <__assert_fail@plt+0x7d8c>
   116e8:	ldr	r1, [r4, #60]	; 0x3c
   116ec:	mov	r9, r0
   116f0:	mov	r0, #2
   116f4:	ldr	r2, [sp, #28]
   116f8:	cmp	r1, #0
   116fc:	moveq	r1, r2
   11700:	bl	18e58 <__assert_fail@plt+0x7d8c>
   11704:	movw	r2, #54928	; 0xd690
   11708:	movt	r2, #1
   1170c:	stm	sp, {r6, fp}
   11710:	mov	r1, #1
   11714:	str	r5, [sp, #8]
   11718:	str	r9, [sp, #12]
   1171c:	str	r0, [sp, #16]
   11720:	mov	r0, sl
   11724:	ldr	r3, [sp, #32]
   11728:	bl	1100c <__fprintf_chk@plt>
   1172c:	ldr	r3, [r4, #48]	; 0x30
   11730:	cmp	r3, #0
   11734:	beq	11758 <__assert_fail@plt+0x68c>
   11738:	ldr	r3, [r4, #44]	; 0x2c
   1173c:	cmp	r3, #0
   11740:	movwne	r1, #55036	; 0xd6fc
   11744:	movtne	r1, #1
   11748:	bne	11d68 <__assert_fail@plt+0xc9c>
   1174c:	ldrb	r3, [r4, #40]	; 0x28
   11750:	cmp	r3, #0
   11754:	bne	11b7c <__assert_fail@plt+0xab0>
   11758:	ldr	r3, [r4, #20]
   1175c:	ldr	r2, [r4, #24]
   11760:	cmp	r3, r2
   11764:	bcc	11780 <__assert_fail@plt+0x6b4>
   11768:	add	r3, r3, #1
   1176c:	ldr	r0, [r4, #28]
   11770:	mov	r1, r3
   11774:	str	r3, [r4, #24]
   11778:	bl	197a8 <__assert_fail@plt+0x86dc>
   1177c:	str	r0, [r4, #28]
   11780:	ldr	r3, [r4, #20]
   11784:	cmp	r3, #0
   11788:	movne	r3, #0
   1178c:	bne	117a8 <__assert_fail@plt+0x6dc>
   11790:	movw	r9, #61704	; 0xf108
   11794:	movt	r9, #2
   11798:	ldr	r3, [r9, #36]	; 0x24
   1179c:	sub	r3, r3, #256	; 0x100
   117a0:	clz	r3, r3
   117a4:	lsr	r3, r3, #5
   117a8:	ldr	r2, [r4, #36]	; 0x24
   117ac:	str	r3, [r4, #16]
   117b0:	cmp	r2, #0
   117b4:	beq	117c8 <__assert_fail@plt+0x6fc>
   117b8:	movw	r9, #61704	; 0xf108
   117bc:	movt	r9, #2
   117c0:	mov	r3, #0
   117c4:	str	r3, [r9]
   117c8:	movw	r6, #61832	; 0xf188
   117cc:	movt	r6, #2
   117d0:	ldr	r3, [r6]
   117d4:	cmp	r3, r8
   117d8:	bge	119b0 <__assert_fail@plt+0x8e4>
   117dc:	ldrb	r3, [r4, #40]	; 0x28
   117e0:	cmp	r3, #0
   117e4:	bne	11b00 <__assert_fail@plt+0xa34>
   117e8:	mov	r5, #1
   117ec:	b	1180c <__assert_fail@plt+0x740>
   117f0:	mov	r1, #1
   117f4:	ldr	r0, [r7, r3, lsl #2]
   117f8:	bl	135dc <__assert_fail@plt+0x2510>
   117fc:	ldr	r3, [r6]
   11800:	and	r5, r5, r0
   11804:	add	r3, r3, #1
   11808:	str	r3, [r6]
   1180c:	ldr	r3, [r6]
   11810:	cmp	r3, r8
   11814:	blt	117f0 <__assert_fail@plt+0x724>
   11818:	ldrb	r3, [r4, #40]	; 0x28
   1181c:	cmp	r3, #0
   11820:	beq	11990 <__assert_fail@plt+0x8c4>
   11824:	cmp	r5, #0
   11828:	beq	11bbc <__assert_fail@plt+0xaf0>
   1182c:	mov	r0, #0
   11830:	bl	10fac <exit@plt>
   11834:	mov	r3, #0
   11838:	movw	sl, #54692	; 0xd5a4
   1183c:	movt	sl, #1
   11840:	str	r3, [sp, #28]
   11844:	add	r3, r5, fp
   11848:	mov	r0, r3
   1184c:	mov	r1, sl
   11850:	bl	110c0 <strspn@plt>
   11854:	add	fp, fp, r0
   11858:	ldrb	r2, [r5, fp]
   1185c:	add	r3, r5, fp
   11860:	cmp	r2, #39	; 0x27
   11864:	beq	11968 <__assert_fail@plt+0x89c>
   11868:	cmp	r2, #48	; 0x30
   1186c:	beq	1197c <__assert_fail@plt+0x8b0>
   11870:	cmp	r0, #0
   11874:	bne	11848 <__assert_fail@plt+0x77c>
   11878:	mov	r9, r0
   1187c:	str	r3, [sp, #32]
   11880:	add	sl, sp, #44	; 0x2c
   11884:	bl	10fd0 <__errno_location@plt>
   11888:	ldr	r3, [sp, #32]
   1188c:	mov	ip, r0
   11890:	mov	r1, sl
   11894:	mov	r2, #10
   11898:	str	r9, [ip]
   1189c:	str	ip, [sp, #32]
   118a0:	mov	r0, r3
   118a4:	str	r3, [sp, #36]	; 0x24
   118a8:	bl	10e44 <strtol@plt>
   118ac:	ldr	ip, [sp, #32]
   118b0:	mov	fp, r0
   118b4:	ldr	r2, [ip]
   118b8:	cmp	r0, #-2147483648	; 0x80000000
   118bc:	cmpne	r2, #34	; 0x22
   118c0:	moveq	r3, #1
   118c4:	movne	r3, #0
   118c8:	movweq	r1, #54696	; 0xd5a8
   118cc:	mov	r0, r3
   118d0:	ldr	r3, [sp, #36]	; 0x24
   118d4:	movteq	r1, #1
   118d8:	beq	11c5c <__assert_fail@plt+0xb90>
   118dc:	ldr	r2, [sp, #44]	; 0x2c
   118e0:	cmp	r2, r3
   118e4:	cmpne	fp, #0
   118e8:	bne	11b34 <__assert_fail@plt+0xa68>
   118ec:	ldrb	r9, [r2]
   118f0:	sub	r2, r2, r5
   118f4:	cmp	r9, #0
   118f8:	movweq	r1, #54772	; 0xd5f4
   118fc:	movteq	r1, #1
   11900:	beq	11c5c <__assert_fail@plt+0xb90>
   11904:	cmp	r9, #46	; 0x2e
   11908:	beq	11be4 <__assert_fail@plt+0xb18>
   1190c:	ldrb	r3, [r5, r2]
   11910:	cmp	r3, #102	; 0x66
   11914:	movwne	r1, #54828	; 0xd62c
   11918:	movtne	r1, #1
   1191c:	bne	11c5c <__assert_fail@plt+0xb90>
   11920:	add	r1, r2, #1
   11924:	ldrb	r3, [r5, r1]
   11928:	add	r9, r5, r1
   1192c:	cmp	r3, #0
   11930:	bne	11944 <__assert_fail@plt+0x878>
   11934:	b	11d28 <__assert_fail@plt+0xc5c>
   11938:	cmp	r3, #0
   1193c:	mov	r1, r2
   11940:	beq	11638 <__assert_fail@plt+0x56c>
   11944:	cmp	r3, #37	; 0x25
   11948:	add	r2, r1, #1
   1194c:	ldrb	r3, [r5, r2]
   11950:	bne	11938 <__assert_fail@plt+0x86c>
   11954:	cmp	r3, #37	; 0x25
   11958:	bne	11d84 <__assert_fail@plt+0xcb8>
   1195c:	add	r2, r1, #2
   11960:	ldrb	r3, [r5, r2]
   11964:	b	11938 <__assert_fail@plt+0x86c>
   11968:	mov	r3, #1
   1196c:	add	fp, fp, #1
   11970:	str	r3, [r4, #48]	; 0x30
   11974:	add	r3, r5, fp
   11978:	b	11848 <__assert_fail@plt+0x77c>
   1197c:	mov	r3, #1
   11980:	add	fp, fp, #1
   11984:	str	r3, [sp, #28]
   11988:	add	r3, r5, fp
   1198c:	b	11848 <__assert_fail@plt+0x77c>
   11990:	cmp	r5, #0
   11994:	bne	1182c <__assert_fail@plt+0x760>
   11998:	ldr	r3, [r4, #36]	; 0x24
   1199c:	sub	r3, r3, #2
   119a0:	cmp	r3, #1
   119a4:	movhi	r0, #2
   119a8:	bls	1182c <__assert_fail@plt+0x760>
   119ac:	b	11830 <__assert_fail@plt+0x764>
   119b0:	mov	r3, #0
   119b4:	movw	r9, #61704	; 0xf108
   119b8:	movt	r9, #2
   119bc:	movw	r6, #61848	; 0xf198
   119c0:	movt	r6, #2
   119c4:	movw	r5, #61852	; 0xf19c
   119c8:	movt	r5, #2
   119cc:	add	sl, sp, #44	; 0x2c
   119d0:	str	r3, [sp, #40]	; 0x28
   119d4:	str	r3, [sp, #44]	; 0x2c
   119d8:	b	119fc <__assert_fail@plt+0x930>
   119dc:	mov	r1, sl
   119e0:	add	r0, sp, #40	; 0x28
   119e4:	bl	11090 <getdelim@plt>
   119e8:	cmp	r0, #0
   119ec:	ble	11a20 <__assert_fail@plt+0x954>
   119f0:	ldr	r1, [r5]
   119f4:	ldr	r0, [sp, #40]	; 0x28
   119f8:	bl	10e20 <fputs_unlocked@plt>
   119fc:	ldrd	r0, [r4, #64]	; 0x40
   11a00:	ldrb	r2, [r9, #40]	; 0x28
   11a04:	ldr	r3, [r6]
   11a08:	subs	lr, r0, #1
   11a0c:	sbc	ip, r1, #0
   11a10:	orrs	r1, r0, r1
   11a14:	str	lr, [r4, #64]	; 0x40
   11a18:	str	ip, [r4, #68]	; 0x44
   11a1c:	bne	119dc <__assert_fail@plt+0x910>
   11a20:	mov	r5, #1
   11a24:	mov	r7, #0
   11a28:	b	11a58 <__assert_fail@plt+0x98c>
   11a2c:	ldr	r3, [sp, #40]	; 0x28
   11a30:	sub	r0, r0, #1
   11a34:	ldrb	r2, [r9, #40]	; 0x28
   11a38:	ldrb	r1, [r3, r0]
   11a3c:	cmp	r1, r2
   11a40:	moveq	r1, #1
   11a44:	movne	r1, #0
   11a48:	strbeq	r7, [r3, r0]
   11a4c:	ldr	r0, [sp, #40]	; 0x28
   11a50:	bl	135dc <__assert_fail@plt+0x2510>
   11a54:	and	r5, r5, r0
   11a58:	ldrb	r2, [r9, #40]	; 0x28
   11a5c:	mov	r1, sl
   11a60:	add	r0, sp, #40	; 0x28
   11a64:	ldr	r3, [r6]
   11a68:	bl	11090 <getdelim@plt>
   11a6c:	cmp	r0, #0
   11a70:	bgt	11a2c <__assert_fail@plt+0x960>
   11a74:	ldr	r3, [r6]
   11a78:	ldr	r3, [r3]
   11a7c:	tst	r3, #32
   11a80:	beq	11818 <__assert_fail@plt+0x74c>
   11a84:	bl	10fd0 <__errno_location@plt>
   11a88:	ldr	r6, [r0]
   11a8c:	mov	r2, #5
   11a90:	movw	r1, #55160	; 0xd778
   11a94:	movt	r1, #1
   11a98:	mov	r0, #0
   11a9c:	bl	10ec8 <dcgettext@plt>
   11aa0:	mov	r2, r0
   11aa4:	mov	r0, #0
   11aa8:	mov	r1, r6
   11aac:	bl	10f4c <error@plt>
   11ab0:	b	11818 <__assert_fail@plt+0x74c>
   11ab4:	ldr	r3, [r4, #48]	; 0x30
   11ab8:	ldr	r5, [r4, #72]	; 0x48
   11abc:	cmp	r3, #0
   11ac0:	bne	11d10 <__assert_fail@plt+0xc44>
   11ac4:	ldr	r3, [r4, #20]
   11ac8:	cmp	r3, #0
   11acc:	bne	11d1c <__assert_fail@plt+0xc50>
   11ad0:	cmp	r5, #0
   11ad4:	bne	115f0 <__assert_fail@plt+0x524>
   11ad8:	mov	r2, #5
   11adc:	mov	r0, r5
   11ae0:	movw	r1, #54628	; 0xd564
   11ae4:	movt	r1, #1
   11ae8:	bl	10ec8 <dcgettext@plt>
   11aec:	mov	r2, r0
   11af0:	mov	r1, r5
   11af4:	mov	r0, r5
   11af8:	bl	10f4c <error@plt>
   11afc:	b	115e4 <__assert_fail@plt+0x518>
   11b00:	ldrd	r2, [r4, #64]	; 0x40
   11b04:	orrs	r3, r2, r3
   11b08:	beq	117e8 <__assert_fail@plt+0x71c>
   11b0c:	mov	r2, #5
   11b10:	movw	r1, #55116	; 0xd74c
   11b14:	movt	r1, #1
   11b18:	mov	r0, #0
   11b1c:	bl	10ec8 <dcgettext@plt>
   11b20:	mov	r1, #0
   11b24:	mov	r2, r0
   11b28:	mov	r0, r1
   11b2c:	bl	10f4c <error@plt>
   11b30:	b	117e8 <__assert_fail@plt+0x71c>
   11b34:	ldrb	r3, [r4, #40]	; 0x28
   11b38:	cmp	r3, #0
   11b3c:	beq	11cb0 <__assert_fail@plt+0xbe4>
   11b40:	ldr	r3, [r4, #20]
   11b44:	cmp	r3, #0
   11b48:	beq	11cb0 <__assert_fail@plt+0xbe4>
   11b4c:	ldr	r3, [sp, #28]
   11b50:	eor	r3, r3, #1
   11b54:	cmp	fp, #0
   11b58:	orrle	r3, r3, #1
   11b5c:	cmp	r3, #0
   11b60:	bne	11c88 <__assert_fail@plt+0xbbc>
   11b64:	str	fp, [r4, #52]	; 0x34
   11b68:	b	118ec <__assert_fail@plt+0x820>
   11b6c:	mov	r0, r9
   11b70:	bl	19ca8 <__assert_fail@plt+0x8bdc>
   11b74:	str	r0, [r4, #60]	; 0x3c
   11b78:	b	1165c <__assert_fail@plt+0x590>
   11b7c:	mov	r0, #1
   11b80:	movt	r0, #1
   11b84:	bl	11060 <nl_langinfo@plt>
   11b88:	ldrb	r5, [r0]
   11b8c:	cmp	r5, #0
   11b90:	bne	11758 <__assert_fail@plt+0x68c>
   11b94:	mov	r2, #5
   11b98:	mov	r0, r5
   11b9c:	movw	r1, #55076	; 0xd724
   11ba0:	movt	r1, #1
   11ba4:	bl	10ec8 <dcgettext@plt>
   11ba8:	mov	r2, r0
   11bac:	mov	r1, r5
   11bb0:	mov	r0, r5
   11bb4:	bl	10f4c <error@plt>
   11bb8:	b	11758 <__assert_fail@plt+0x68c>
   11bbc:	mov	r2, #5
   11bc0:	mov	r0, r5
   11bc4:	movw	r1, #55180	; 0xd78c
   11bc8:	movt	r1, #1
   11bcc:	bl	10ec8 <dcgettext@plt>
   11bd0:	mov	r2, r0
   11bd4:	mov	r1, r5
   11bd8:	mov	r0, r5
   11bdc:	bl	10f4c <error@plt>
   11be0:	b	11998 <__assert_fail@plt+0x8cc>
   11be4:	mov	r1, sl
   11be8:	ldr	sl, [sp, #32]
   11bec:	mov	r3, #0
   11bf0:	add	fp, r2, #1
   11bf4:	mov	r2, #10
   11bf8:	add	r0, r5, fp
   11bfc:	movw	r9, #61704	; 0xf108
   11c00:	movt	r9, #2
   11c04:	str	r3, [sl]
   11c08:	bl	10e44 <strtol@plt>
   11c0c:	ldr	r3, [sl]
   11c10:	str	r0, [r9, #24]
   11c14:	sub	r3, r3, #34	; 0x22
   11c18:	clz	r3, r3
   11c1c:	lsr	r3, r3, #5
   11c20:	orrs	r3, r3, r0, lsr #31
   11c24:	bne	11c54 <__assert_fail@plt+0xb88>
   11c28:	bl	10fa0 <__ctype_b_loc@plt>
   11c2c:	ldrb	r2, [r5, fp]
   11c30:	ldr	r1, [r0]
   11c34:	lsl	r3, r2, #1
   11c38:	ldrh	r3, [r1, r3]
   11c3c:	cmp	r2, #43	; 0x2b
   11c40:	orreq	r3, r3, #1
   11c44:	tst	r3, #1
   11c48:	ldreq	r2, [sp, #44]	; 0x2c
   11c4c:	subeq	r2, r2, r5
   11c50:	beq	1190c <__assert_fail@plt+0x840>
   11c54:	movw	r1, #54796	; 0xd60c
   11c58:	movt	r1, #1
   11c5c:	mov	r2, #5
   11c60:	mov	r0, #0
   11c64:	bl	10ec8 <dcgettext@plt>
   11c68:	mov	r4, r0
   11c6c:	mov	r0, r5
   11c70:	bl	18e68 <__assert_fail@plt+0x7d9c>
   11c74:	mov	r3, r0
   11c78:	mov	r2, r4
   11c7c:	mov	r1, #0
   11c80:	mov	r0, #1
   11c84:	bl	10f4c <error@plt>
   11c88:	mov	r2, #5
   11c8c:	movw	r1, #54732	; 0xd5cc
   11c90:	movt	r1, #1
   11c94:	mov	r9, r0
   11c98:	bl	10ec8 <dcgettext@plt>
   11c9c:	mov	r2, r0
   11ca0:	mov	r1, r9
   11ca4:	mov	r0, r9
   11ca8:	bl	10f4c <error@plt>
   11cac:	ldr	r2, [sp, #44]	; 0x2c
   11cb0:	cmp	fp, #0
   11cb4:	blt	11cf4 <__assert_fail@plt+0xc28>
   11cb8:	ldr	r3, [sp, #28]
   11cbc:	cmp	r3, #0
   11cc0:	bne	11b64 <__assert_fail@plt+0xa98>
   11cc4:	str	fp, [r4, #20]
   11cc8:	b	118ec <__assert_fail@plt+0x820>
   11ccc:	mov	r2, #5
   11cd0:	movw	r1, #54604	; 0xd54c
   11cd4:	movt	r1, #1
   11cd8:	mov	r0, #0
   11cdc:	bl	10ec8 <dcgettext@plt>
   11ce0:	mov	r1, #0
   11ce4:	mov	r2, r0
   11ce8:	mov	r0, r1
   11cec:	bl	10f4c <error@plt>
   11cf0:	b	115c8 <__assert_fail@plt+0x4fc>
   11cf4:	rsb	fp, fp, #0
   11cf8:	movw	r9, #61704	; 0xf108
   11cfc:	movt	r9, #2
   11d00:	mov	r3, #0
   11d04:	str	fp, [r4, #20]
   11d08:	str	r3, [r9, #32]
   11d0c:	b	118ec <__assert_fail@plt+0x820>
   11d10:	cmp	r5, #0
   11d14:	bne	115f0 <__assert_fail@plt+0x524>
   11d18:	b	1174c <__assert_fail@plt+0x680>
   11d1c:	cmp	r5, #0
   11d20:	bne	115f0 <__assert_fail@plt+0x524>
   11d24:	b	11758 <__assert_fail@plt+0x68c>
   11d28:	cmp	r6, #0
   11d2c:	beq	1165c <__assert_fail@plt+0x590>
   11d30:	b	11640 <__assert_fail@plt+0x574>
   11d34:	movw	r1, #54660	; 0xd584
   11d38:	movt	r1, #1
   11d3c:	b	11c5c <__assert_fail@plt+0xb90>
   11d40:	movw	r1, #54404	; 0xd484
   11d44:	movt	r1, #1
   11d48:	mov	r2, #5
   11d4c:	mov	r0, #0
   11d50:	bl	10ec8 <dcgettext@plt>
   11d54:	mov	r4, r0
   11d58:	ldr	r0, [sl]
   11d5c:	b	11c70 <__assert_fail@plt+0xba4>
   11d60:	movw	r1, #54432	; 0xd4a0
   11d64:	movt	r1, #1
   11d68:	mov	r2, #5
   11d6c:	mov	r0, #0
   11d70:	bl	10ec8 <dcgettext@plt>
   11d74:	mov	r2, r0
   11d78:	mov	r1, #0
   11d7c:	mov	r0, #1
   11d80:	bl	10f4c <error@plt>
   11d84:	movw	r1, #54888	; 0xd668
   11d88:	movt	r1, #1
   11d8c:	b	11c5c <__assert_fail@plt+0xb90>
   11d90:	movw	r1, #54464	; 0xd4c0
   11d94:	movt	r1, #1
   11d98:	b	11d68 <__assert_fail@plt+0xc9c>
   11d9c:	andeq	fp, r1, r0, lsl #27
   11da0:	andeq	fp, r1, r4, lsl #26
   11da4:	andeq	fp, r1, r4, asr sp
   11da8:	andeq	pc, r2, r8, ror #3
   11dac:			; <UNDEFINED> instruction: 0x0002f1bc
   11db0:	andeq	fp, r1, r0, lsr sp
   11db4:	mov	fp, #0
   11db8:	mov	lr, #0
   11dbc:	pop	{r1}		; (ldr r1, [sp], #4)
   11dc0:	mov	r2, sp
   11dc4:	push	{r2}		; (str r2, [sp, #-4]!)
   11dc8:	push	{r0}		; (str r0, [sp, #-4]!)
   11dcc:	ldr	ip, [pc, #16]	; 11de4 <__assert_fail@plt+0xd18>
   11dd0:	push	{ip}		; (str ip, [sp, #-4]!)
   11dd4:	ldr	r0, [pc, #12]	; 11de8 <__assert_fail@plt+0xd1c>
   11dd8:	ldr	r3, [pc, #12]	; 11dec <__assert_fail@plt+0xd20>
   11ddc:	bl	10f64 <__libc_start_main@plt>
   11de0:	bl	110a8 <abort@plt>
   11de4:	strdeq	fp, [r1], -r8
   11de8:	ldrdeq	r1, [r1], -r8
   11dec:	muleq	r1, r8, sl
   11df0:	ldr	r3, [pc, #20]	; 11e0c <__assert_fail@plt+0xd40>
   11df4:	ldr	r2, [pc, #20]	; 11e10 <__assert_fail@plt+0xd44>
   11df8:	add	r3, pc, r3
   11dfc:	ldr	r2, [r3, r2]
   11e00:	cmp	r2, #0
   11e04:	bxeq	lr
   11e08:	b	10f7c <__gmon_start__@plt>
   11e0c:	andeq	sp, r1, r0, lsl #4
   11e10:	strdeq	r0, [r0], -r8
   11e14:	ldr	r0, [pc, #24]	; 11e34 <__assert_fail@plt+0xd68>
   11e18:	ldr	r3, [pc, #24]	; 11e38 <__assert_fail@plt+0xd6c>
   11e1c:	cmp	r3, r0
   11e20:	bxeq	lr
   11e24:	ldr	r3, [pc, #16]	; 11e3c <__assert_fail@plt+0xd70>
   11e28:	cmp	r3, #0
   11e2c:	bxeq	lr
   11e30:	bx	r3
   11e34:	andeq	pc, r2, r0, lsl #3
   11e38:	andeq	pc, r2, r0, lsl #3
   11e3c:	andeq	r0, r0, r0
   11e40:	ldr	r0, [pc, #36]	; 11e6c <__assert_fail@plt+0xda0>
   11e44:	ldr	r1, [pc, #36]	; 11e70 <__assert_fail@plt+0xda4>
   11e48:	sub	r1, r1, r0
   11e4c:	asr	r1, r1, #2
   11e50:	add	r1, r1, r1, lsr #31
   11e54:	asrs	r1, r1, #1
   11e58:	bxeq	lr
   11e5c:	ldr	r3, [pc, #16]	; 11e74 <__assert_fail@plt+0xda8>
   11e60:	cmp	r3, #0
   11e64:	bxeq	lr
   11e68:	bx	r3
   11e6c:	andeq	pc, r2, r0, lsl #3
   11e70:	andeq	pc, r2, r0, lsl #3
   11e74:	andeq	r0, r0, r0
   11e78:	push	{r4, lr}
   11e7c:	ldr	r4, [pc, #24]	; 11e9c <__assert_fail@plt+0xdd0>
   11e80:	ldrb	r3, [r4]
   11e84:	cmp	r3, #0
   11e88:	popne	{r4, pc}
   11e8c:	bl	11e14 <__assert_fail@plt+0xd48>
   11e90:	mov	r3, #1
   11e94:	strb	r3, [r4]
   11e98:	pop	{r4, pc}
   11e9c:	andeq	pc, r2, r4, lsr #3
   11ea0:	b	11e40 <__assert_fail@plt+0xd74>
   11ea4:	andeq	r0, r0, r0
   11ea8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11eac:	mov	r5, r0
   11eb0:	strd	r6, [sp, #8]
   11eb4:	mov	r6, #0
   11eb8:	str	r8, [sp, #16]
   11ebc:	str	lr, [sp, #20]
   11ec0:	sub	sp, sp, #24
   11ec4:	bl	10fb8 <strlen@plt>
   11ec8:	subs	r4, r0, #0
   11ecc:	str	r6, [sp, #12]
   11ed0:	beq	11f54 <__assert_fail@plt+0xe88>
   11ed4:	sub	r7, r4, #1
   11ed8:	ldrb	r3, [r5, r7]
   11edc:	sub	r3, r3, #48	; 0x30
   11ee0:	cmp	r3, #9
   11ee4:	bls	11f50 <__assert_fail@plt+0xe84>
   11ee8:	add	r0, r4, #2
   11eec:	bl	1973c <__assert_fail@plt+0x8670>
   11ef0:	add	r8, r0, r7
   11ef4:	mov	r2, r4
   11ef8:	mov	r1, r5
   11efc:	str	r8, [sp, #12]
   11f00:	bl	10e8c <memcpy@plt>
   11f04:	ldrb	r1, [r0, r7]
   11f08:	cmp	r4, #1
   11f0c:	mov	r3, r0
   11f10:	sub	r2, r1, #105	; 0x69
   11f14:	clz	r2, r2
   11f18:	lsr	r2, r2, #5
   11f1c:	moveq	r2, #0
   11f20:	cmp	r2, r6
   11f24:	bne	11fc0 <__assert_fail@plt+0xef4>
   11f28:	add	r1, r8, #2
   11f2c:	mov	r0, #66	; 0x42
   11f30:	mov	r2, #0
   11f34:	mov	r4, r3
   11f38:	strb	r0, [r8, #1]
   11f3c:	strb	r2, [r8, #2]
   11f40:	str	r1, [sp, #12]
   11f44:	movw	r1, #48560	; 0xbdb0
   11f48:	movt	r1, #1
   11f4c:	b	11f60 <__assert_fail@plt+0xe94>
   11f50:	mov	r4, r6
   11f54:	movw	r1, #48548	; 0xbda4
   11f58:	movt	r1, #1
   11f5c:	mov	r3, r5
   11f60:	mov	r0, r3
   11f64:	mov	r2, #10
   11f68:	str	r1, [sp]
   11f6c:	add	r3, sp, #16
   11f70:	add	r1, sp, #12
   11f74:	bl	1a388 <__assert_fail@plt+0x92bc>
   11f78:	cmp	r0, #0
   11f7c:	bne	11fe4 <__assert_fail@plt+0xf18>
   11f80:	ldr	r3, [sp, #12]
   11f84:	ldrb	r3, [r3]
   11f88:	cmp	r3, #0
   11f8c:	bne	11fe4 <__assert_fail@plt+0xf18>
   11f90:	ldrd	r2, [sp, #16]
   11f94:	orrs	r3, r2, r3
   11f98:	beq	11fe4 <__assert_fail@plt+0xf18>
   11f9c:	mov	r0, r4
   11fa0:	bl	14c68 <__assert_fail@plt+0x3b9c>
   11fa4:	ldrd	r0, [sp, #16]
   11fa8:	add	sp, sp, #24
   11fac:	ldrd	r4, [sp]
   11fb0:	ldrd	r6, [sp, #8]
   11fb4:	ldr	r8, [sp, #16]
   11fb8:	add	sp, sp, #20
   11fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11fc0:	ldrb	r2, [r8, #-1]
   11fc4:	sub	r2, r2, #48	; 0x30
   11fc8:	cmp	r2, #9
   11fcc:	bls	11f28 <__assert_fail@plt+0xe5c>
   11fd0:	movw	r1, #48548	; 0xbda4
   11fd4:	movt	r1, #1
   11fd8:	strb	r6, [r8]
   11fdc:	mov	r4, r0
   11fe0:	b	11f60 <__assert_fail@plt+0xe94>
   11fe4:	mov	r0, r4
   11fe8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   11fec:	mov	r2, #5
   11ff0:	movw	r1, #48572	; 0xbdbc
   11ff4:	movt	r1, #1
   11ff8:	mov	r0, #0
   11ffc:	bl	10ec8 <dcgettext@plt>
   12000:	mov	r4, r0
   12004:	mov	r0, r5
   12008:	bl	18e68 <__assert_fail@plt+0x7d9c>
   1200c:	mov	r3, r0
   12010:	mov	r2, r4
   12014:	mov	r1, #0
   12018:	mov	r0, #1
   1201c:	bl	10f4c <error@plt>
   12020:	strd	r4, [sp, #-16]!
   12024:	mov	r5, r1
   12028:	mov	r4, r2
   1202c:	ldr	r1, [r0]
   12030:	str	r6, [sp, #8]
   12034:	str	lr, [sp, #12]
   12038:	ldrb	r3, [r1]
   1203c:	sub	r3, r3, #48	; 0x30
   12040:	cmp	r3, #9
   12044:	bhi	120d8 <__assert_fail@plt+0x100c>
   12048:	vldr	d7, [pc, #192]	; 12110 <__assert_fail@plt+0x1044>
   1204c:	mov	ip, r0
   12050:	mov	r0, #0
   12054:	mov	lr, r0
   12058:	vldr	d5, [pc, #184]	; 12118 <__assert_fail@plt+0x104c>
   1205c:	vcmp.f64	d7, #0.0
   12060:	add	r1, r1, #1
   12064:	vmrs	APSR_nzcv, fpscr
   12068:	movne	r2, #1
   1206c:	moveq	r2, #0
   12070:	cmp	r3, #0
   12074:	movne	r2, #1
   12078:	cmp	r2, #0
   1207c:	addne	lr, lr, #1
   12080:	cmp	lr, #15
   12084:	bls	12094 <__assert_fail@plt+0xfc8>
   12088:	cmp	lr, #27
   1208c:	mov	r0, #1
   12090:	bhi	12104 <__assert_fail@plt+0x1038>
   12094:	vmov	s13, r3
   12098:	str	r1, [ip]
   1209c:	ldrb	r3, [r1]
   120a0:	sub	r3, r3, #48	; 0x30
   120a4:	cmp	r3, #9
   120a8:	vcvt.f64.s32	d6, s13
   120ac:	vmla.f64	d6, d7, d5
   120b0:	vmov.f64	d7, d6
   120b4:	bls	1205c <__assert_fail@plt+0xf90>
   120b8:	ldrb	r3, [r4]
   120bc:	cmp	r3, #0
   120c0:	vnegne.f64	d7, d7
   120c4:	vstr	d7, [r5]
   120c8:	ldrd	r4, [sp]
   120cc:	ldr	r6, [sp, #8]
   120d0:	add	sp, sp, #12
   120d4:	pop	{pc}		; (ldr pc, [sp], #4)
   120d8:	movw	r3, #61864	; 0xf1a8
   120dc:	movt	r3, #2
   120e0:	mov	r0, r1
   120e4:	ldr	r2, [r3]
   120e8:	ldr	r1, [r3, #4]
   120ec:	bl	1109c <strncmp@plt>
   120f0:	cmp	r0, #0
   120f4:	movne	r0, #3
   120f8:	bne	120c8 <__assert_fail@plt+0xffc>
   120fc:	vldr	d7, [pc, #12]	; 12110 <__assert_fail@plt+0x1044>
   12100:	b	120b8 <__assert_fail@plt+0xfec>
   12104:	mov	r0, #2
   12108:	b	120c8 <__assert_fail@plt+0xffc>
   1210c:	nop	{0}
	...
   1211c:	eormi	r0, r4, r0
   12120:	movw	r1, #61944	; 0xf1f8
   12124:	movt	r1, #2
   12128:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1212c:	ldr	ip, [r1]
   12130:	strd	r6, [sp, #8]
   12134:	mov	r6, r2
   12138:	mov	r7, r3
   1213c:	strd	r8, [sp, #16]
   12140:	mov	r8, r0
   12144:	strd	sl, [sp, #24]
   12148:	str	lr, [sp, #32]
   1214c:	cmp	ip, #0
   12150:	vpush	{d8-d11}
   12154:	sub	sp, sp, #252	; 0xfc
   12158:	beq	121d8 <__assert_fail@plt+0x110c>
   1215c:	ldrd	r2, [ip]
   12160:	mvn	r1, #0
   12164:	mvn	r0, #0
   12168:	cmp	r3, r1
   1216c:	cmpeq	r2, r0
   12170:	beq	121a0 <__assert_fail@plt+0x10d4>
   12174:	cmp	r7, r3
   12178:	cmpeq	r6, r2
   1217c:	bcc	12190 <__assert_fail@plt+0x10c4>
   12180:	ldrd	r2, [ip, #8]
   12184:	cmp	r7, r3
   12188:	cmpeq	r6, r2
   1218c:	bls	121e4 <__assert_fail@plt+0x1118>
   12190:	ldrd	r2, [ip, #16]!
   12194:	cmp	r3, r1
   12198:	cmpeq	r2, r0
   1219c:	bne	12174 <__assert_fail@plt+0x10a8>
   121a0:	movw	r3, #61852	; 0xf19c
   121a4:	movt	r3, #2
   121a8:	mov	r0, r8
   121ac:	ldr	r1, [r3]
   121b0:	bl	10e20 <fputs_unlocked@plt>
   121b4:	mov	r0, #1
   121b8:	add	sp, sp, #252	; 0xfc
   121bc:	vpop	{d8-d11}
   121c0:	ldrd	r4, [sp]
   121c4:	ldrd	r6, [sp, #8]
   121c8:	ldrd	r8, [sp, #16]
   121cc:	ldrd	sl, [sp, #24]
   121d0:	add	sp, sp, #32
   121d4:	pop	{pc}		; (ldr pc, [sp], #4)
   121d8:	cmp	r3, #0
   121dc:	cmpeq	r2, #1
   121e0:	bne	121a0 <__assert_fail@plt+0x10d4>
   121e4:	movw	r5, #61864	; 0xf1a8
   121e8:	movt	r5, #2
   121ec:	ldr	r4, [r5, #8]
   121f0:	cmp	r4, #0
   121f4:	beq	1223c <__assert_fail@plt+0x1170>
   121f8:	mov	r0, r8
   121fc:	bl	10fb8 <strlen@plt>
   12200:	mov	r9, r0
   12204:	mov	r0, r4
   12208:	bl	10fb8 <strlen@plt>
   1220c:	cmp	r9, r0
   12210:	bls	1223c <__assert_fail@plt+0x1170>
   12214:	sub	r9, r9, r0
   12218:	mov	r0, r4
   1221c:	add	r1, r8, r9
   12220:	bl	10e38 <strcmp@plt>
   12224:	cmp	r0, #0
   12228:	ldrb	r3, [r5, #12]
   1222c:	bne	12938 <__assert_fail@plt+0x186c>
   12230:	cmp	r3, #0
   12234:	strb	r0, [r8, r9]
   12238:	bne	12bcc <__assert_fail@plt+0x1b00>
   1223c:	ldrb	r9, [r8]
   12240:	cmp	r9, #0
   12244:	beq	12bfc <__assert_fail@plt+0x1b30>
   12248:	bl	10fa0 <__ctype_b_loc@plt>
   1224c:	mov	r4, r8
   12250:	ldr	r2, [r0]
   12254:	b	12264 <__assert_fail@plt+0x1198>
   12258:	ldrb	r9, [r4, #1]!
   1225c:	cmp	r9, #0
   12260:	beq	12274 <__assert_fail@plt+0x11a8>
   12264:	lsl	r9, r9, #1
   12268:	ldrh	r3, [r2, r9]
   1226c:	tst	r3, #1
   12270:	bne	12258 <__assert_fail@plt+0x118c>
   12274:	ldr	r3, [r5, #16]
   12278:	cmp	r3, #0
   1227c:	beq	12568 <__assert_fail@plt+0x149c>
   12280:	cmp	r6, #1
   12284:	cmple	r8, r4
   12288:	moveq	r6, #0
   1228c:	movne	r6, #1
   12290:	streq	r6, [r5, #20]
   12294:	beq	122c8 <__assert_fail@plt+0x11fc>
   12298:	mov	r0, r8
   1229c:	bl	10fb8 <strlen@plt>
   122a0:	ldr	r3, [r5, #24]
   122a4:	str	r0, [r5, #20]
   122a8:	cmp	r0, r3
   122ac:	bcc	122c8 <__assert_fail@plt+0x11fc>
   122b0:	add	r3, r0, #1
   122b4:	ldr	r0, [r5, #28]
   122b8:	mov	r1, r3
   122bc:	str	r3, [r5, #24]
   122c0:	bl	197a8 <__assert_fail@plt+0x86dc>
   122c4:	str	r0, [r5, #28]
   122c8:	ldrb	r3, [r5, #12]
   122cc:	cmp	r3, #0
   122d0:	bne	12548 <__assert_fail@plt+0x147c>
   122d4:	ldr	fp, [r5, #32]
   122d8:	mov	r2, #0
   122dc:	mov	r3, #0
   122e0:	strd	r2, [sp, #56]	; 0x38
   122e4:	sub	r1, fp, #3
   122e8:	cmp	r1, #2
   122ec:	movcc	r1, #1024	; 0x400
   122f0:	movcs	r1, #1000	; 0x3e8
   122f4:	str	r1, [sp, #24]
   122f8:	ldrb	r3, [r4]
   122fc:	add	r2, sp, #46	; 0x2e
   12300:	add	r0, sp, #48	; 0x30
   12304:	cmp	r3, #45	; 0x2d
   12308:	moveq	r1, #1
   1230c:	movne	r1, #0
   12310:	addeq	r3, r4, #1
   12314:	movne	r3, r4
   12318:	strb	r1, [sp, #46]	; 0x2e
   1231c:	add	r1, sp, #56	; 0x38
   12320:	str	r3, [sp, #48]	; 0x30
   12324:	bl	12020 <__assert_fail@plt+0xf54>
   12328:	cmp	r0, #1
   1232c:	mov	r9, r0
   12330:	bhi	126b8 <__assert_fail@plt+0x15ec>
   12334:	ldr	r6, [r5]
   12338:	ldr	r3, [sp, #48]	; 0x30
   1233c:	ldr	r1, [r5, #4]
   12340:	mov	r2, r6
   12344:	mov	r0, r3
   12348:	str	r3, [sp, #36]	; 0x24
   1234c:	bl	1109c <strncmp@plt>
   12350:	cmp	r0, #0
   12354:	ldr	r3, [sp, #36]	; 0x24
   12358:	beq	125e8 <__assert_fail@plt+0x151c>
   1235c:	mov	sl, #0
   12360:	mov	r7, sl
   12364:	ldrb	r2, [r5, #12]
   12368:	cmp	r2, #0
   1236c:	bne	12908 <__assert_fail@plt+0x183c>
   12370:	ldrb	r6, [r3]
   12374:	str	r3, [sp, #36]	; 0x24
   12378:	cmp	r6, #0
   1237c:	beq	128f4 <__assert_fail@plt+0x1828>
   12380:	bl	10fa0 <__ctype_b_loc@plt>
   12384:	ldr	r1, [r0]
   12388:	lsl	r2, r6, #1
   1238c:	ldr	r3, [sp, #36]	; 0x24
   12390:	ldrh	r2, [r1, r2]
   12394:	tst	r2, #1
   12398:	beq	123b8 <__assert_fail@plt+0x12ec>
   1239c:	add	r3, r3, #1
   123a0:	str	r3, [sp, #48]	; 0x30
   123a4:	ldrb	r6, [r3]
   123a8:	lsl	r2, r6, #1
   123ac:	ldrh	r2, [r1, r2]
   123b0:	tst	r2, #1
   123b4:	bne	1239c <__assert_fail@plt+0x12d0>
   123b8:	movw	r0, #48548	; 0xbda4
   123bc:	movt	r0, #1
   123c0:	str	r3, [sp, #36]	; 0x24
   123c4:	mov	r1, r6
   123c8:	bl	10fc4 <strchr@plt>
   123cc:	cmp	r0, #0
   123d0:	beq	1316c <__assert_fail@plt+0x20a0>
   123d4:	cmp	fp, #0
   123d8:	beq	13150 <__assert_fail@plt+0x2084>
   123dc:	sub	r6, r6, #69	; 0x45
   123e0:	ldr	r3, [sp, #36]	; 0x24
   123e4:	uxtb	r2, r6
   123e8:	cmp	r2, #21
   123ec:	movwls	r1, #47904	; 0xbb20
   123f0:	movhi	r6, #0
   123f4:	movtls	r1, #1
   123f8:	ldrls	r6, [r1, r2, lsl #2]
   123fc:	add	r2, r3, #1
   12400:	cmp	fp, #1
   12404:	str	r2, [sp, #48]	; 0x30
   12408:	beq	13134 <__assert_fail@plt+0x2068>
   1240c:	cmp	fp, #4
   12410:	beq	12ab0 <__assert_fail@plt+0x19e4>
   12414:	vldr	s15, [sp, #24]
   12418:	ldrb	r2, [r5, #12]
   1241c:	vcvt.f64.s32	d7, s15
   12420:	cmp	r6, #0
   12424:	mov	r7, r6
   12428:	beq	135a0 <__assert_fail@plt+0x24d4>
   1242c:	subs	r7, r6, #1
   12430:	vmov.f64	d8, d7
   12434:	beq	13160 <__assert_fail@plt+0x2094>
   12438:	subs	r7, r7, #1
   1243c:	vmul.f64	d8, d8, d7
   12440:	bne	12438 <__assert_fail@plt+0x136c>
   12444:	mov	sl, r7
   12448:	cmp	r2, #0
   1244c:	bne	12a10 <__assert_fail@plt+0x1944>
   12450:	vldr	d7, [sp, #56]	; 0x38
   12454:	vmul.f64	d7, d7, d8
   12458:	vstr	d7, [sp, #56]	; 0x38
   1245c:	ldr	r3, [sp, #48]	; 0x30
   12460:	cmp	r3, #0
   12464:	beq	12694 <__assert_fail@plt+0x15c8>
   12468:	ldrb	r3, [r3]
   1246c:	cmp	r3, #0
   12470:	beq	12694 <__assert_fail@plt+0x15c8>
   12474:	ldr	r3, [r5, #36]	; 0x24
   12478:	movw	r6, #61704	; 0xf108
   1247c:	movt	r6, #2
   12480:	cmp	r3, #3
   12484:	moveq	r9, #5
   12488:	beq	124e4 <__assert_fail@plt+0x1418>
   1248c:	mov	r2, #5
   12490:	movw	r1, #49228	; 0xc04c
   12494:	movt	r1, #1
   12498:	mov	r0, #0
   1249c:	ldr	fp, [r6]
   124a0:	bl	10ec8 <dcgettext@plt>
   124a4:	mov	r2, r0
   124a8:	mov	r1, r4
   124ac:	mov	r0, #0
   124b0:	mov	r9, #5
   124b4:	str	r2, [sp, #24]
   124b8:	bl	18e58 <__assert_fail@plt+0x7d8c>
   124bc:	mov	r4, r0
   124c0:	mov	r0, #1
   124c4:	ldr	r1, [sp, #48]	; 0x30
   124c8:	bl	18e58 <__assert_fail@plt+0x7d8c>
   124cc:	mov	r3, r4
   124d0:	mov	r1, #0
   124d4:	str	r0, [sp]
   124d8:	mov	r0, fp
   124dc:	ldr	r2, [sp, #24]
   124e0:	bl	10f4c <error@plt>
   124e4:	ldrd	r0, [r6, #8]
   124e8:	ldrd	r2, [r6, #16]
   124ec:	vldr	d8, [sp, #56]	; 0x38
   124f0:	cmp	r1, #0
   124f4:	cmpeq	r0, #1
   124f8:	beq	126dc <__assert_fail@plt+0x1610>
   124fc:	strd	r2, [sp, #24]
   12500:	bl	1b9b4 <__assert_fail@plt+0xa8e8>
   12504:	vmov	d7, r0, r1
   12508:	ldrd	r2, [sp, #24]
   1250c:	mov	r0, r2
   12510:	mov	r1, r3
   12514:	vmul.f64	d9, d7, d8
   12518:	bl	1b9b4 <__assert_fail@plt+0xa8e8>
   1251c:	vmov	d7, r0, r1
   12520:	vdiv.f64	d8, d9, d7
   12524:	cmp	r9, #1
   12528:	bls	126ec <__assert_fail@plt+0x1620>
   1252c:	movw	r3, #61852	; 0xf19c
   12530:	movt	r3, #2
   12534:	mov	r0, r8
   12538:	ldr	r1, [r3]
   1253c:	bl	10e20 <fputs_unlocked@plt>
   12540:	mov	r0, #0
   12544:	b	121b8 <__assert_fail@plt+0x10ec>
   12548:	movw	r0, #61840	; 0xf190
   1254c:	movt	r0, #2
   12550:	ldr	r3, [r5, #20]
   12554:	movw	r2, #48928	; 0xbf20
   12558:	movt	r2, #1
   1255c:	mov	r1, #1
   12560:	ldr	r0, [r0]
   12564:	bl	1100c <__fprintf_chk@plt>
   12568:	ldr	fp, [r5, #32]
   1256c:	mov	r0, #0
   12570:	mov	r2, #0
   12574:	mov	r3, #0
   12578:	ldrb	r1, [r5, #12]
   1257c:	str	r0, [sp, #48]	; 0x30
   12580:	strd	r2, [sp, #56]	; 0x38
   12584:	sub	ip, fp, #3
   12588:	cmp	ip, #2
   1258c:	movcc	ip, #1024	; 0x400
   12590:	movcs	ip, #1000	; 0x3e8
   12594:	cmp	r1, r0
   12598:	str	ip, [sp, #24]
   1259c:	beq	122f8 <__assert_fail@plt+0x122c>
   125a0:	movw	r3, #61840	; 0xf190
   125a4:	movt	r3, #2
   125a8:	mov	r1, r4
   125ac:	ldr	r6, [r3]
   125b0:	bl	18e58 <__assert_fail@plt+0x7d8c>
   125b4:	mov	r7, r0
   125b8:	mov	r0, #1
   125bc:	ldr	r1, [r5, #4]
   125c0:	bl	18e58 <__assert_fail@plt+0x7d8c>
   125c4:	mov	r1, #15
   125c8:	mov	r3, r7
   125cc:	movw	r2, #48968	; 0xbf48
   125d0:	movt	r2, #1
   125d4:	strd	r0, [sp]
   125d8:	mov	r0, r6
   125dc:	mov	r1, #1
   125e0:	bl	1100c <__fprintf_chk@plt>
   125e4:	b	122f8 <__assert_fail@plt+0x122c>
   125e8:	vldr	d7, [pc, #976]	; 129c0 <__assert_fail@plt+0x18f4>
   125ec:	add	ip, r3, r6
   125f0:	add	r2, sp, #47	; 0x2f
   125f4:	add	r1, sp, #120	; 0x78
   125f8:	str	ip, [sp, #48]	; 0x30
   125fc:	vstr	d7, [sp, #120]	; 0x78
   12600:	ldrb	r3, [r3, r6]
   12604:	cmp	r3, #45	; 0x2d
   12608:	moveq	r0, #1
   1260c:	addeq	ip, ip, #1
   12610:	strb	r0, [sp, #47]	; 0x2f
   12614:	add	r0, sp, #52	; 0x34
   12618:	str	ip, [sp, #52]	; 0x34
   1261c:	bl	12020 <__assert_fail@plt+0xf54>
   12620:	cmp	r0, #1
   12624:	bhi	126b4 <__assert_fail@plt+0x15e8>
   12628:	ldrb	r3, [sp, #47]	; 0x2f
   1262c:	moveq	r9, r0
   12630:	cmp	r3, #0
   12634:	bne	12ca4 <__assert_fail@plt+0x1bd8>
   12638:	ldr	sl, [sp, #48]	; 0x30
   1263c:	ldr	r3, [sp, #52]	; 0x34
   12640:	vldr	d5, [sp, #120]	; 0x78
   12644:	sub	sl, r3, sl
   12648:	cmp	sl, #0
   1264c:	mov	r7, sl
   12650:	beq	12674 <__assert_fail@plt+0x15a8>
   12654:	vldr	d7, [pc, #940]	; 12a08 <__assert_fail@plt+0x193c>
   12658:	subs	r2, sl, #1
   1265c:	vmovne.f64	d6, d7
   12660:	beq	12670 <__assert_fail@plt+0x15a4>
   12664:	subs	r2, r2, #1
   12668:	vmul.f64	d7, d7, d6
   1266c:	bne	12664 <__assert_fail@plt+0x1598>
   12670:	vdiv.f64	d5, d5, d7
   12674:	ldrb	r2, [sp, #46]	; 0x2e
   12678:	str	r3, [sp, #48]	; 0x30
   1267c:	vldr	d7, [sp, #56]	; 0x38
   12680:	cmp	r2, #0
   12684:	vsubne.f64	d5, d7, d5
   12688:	vaddeq.f64	d5, d5, d7
   1268c:	vstr	d5, [sp, #56]	; 0x38
   12690:	b	12364 <__assert_fail@plt+0x1298>
   12694:	cmp	r9, #1
   12698:	bne	126a8 <__assert_fail@plt+0x15dc>
   1269c:	ldrb	r3, [r5, #40]	; 0x28
   126a0:	cmp	r3, #0
   126a4:	bne	12a70 <__assert_fail@plt+0x19a4>
   126a8:	movw	r6, #61704	; 0xf108
   126ac:	movt	r6, #2
   126b0:	b	124e4 <__assert_fail@plt+0x1418>
   126b4:	mov	r9, r0
   126b8:	sub	r3, r9, #2
   126bc:	cmp	r3, #4
   126c0:	ldrls	pc, [pc, r3, lsl #2]
   126c4:	b	135c4 <__assert_fail@plt+0x24f8>
   126c8:	ldrdeq	r2, [r1], -r4
   126cc:	andeq	r2, r1, r4, lsr #25
   126d0:	strdeq	r2, [r1], -ip
   126d4:	andeq	r2, r1, r8, ror #21
   126d8:	andeq	r2, r1, r0, lsl fp
   126dc:	cmp	r3, #0
   126e0:	cmpeq	r2, #1
   126e4:	bne	124fc <__assert_fail@plt+0x1430>
   126e8:	b	12524 <__assert_fail@plt+0x1458>
   126ec:	vldr	d7, [pc, #724]	; 129c8 <__assert_fail@plt+0x18fc>
   126f0:	ldr	r3, [r6, #24]
   126f4:	vcmpe.f64	d8, d7
   126f8:	cmn	r3, #1
   126fc:	movne	r7, r3
   12700:	movne	sl, r7
   12704:	vmrs	APSR_nzcv, fpscr
   12708:	blt	127b8 <__assert_fail@plt+0x16ec>
   1270c:	vldr	d7, [pc, #700]	; 129d0 <__assert_fail@plt+0x1904>
   12710:	vcmpe.f64	d8, d7
   12714:	vmrs	APSR_nzcv, fpscr
   12718:	bhi	127b8 <__assert_fail@plt+0x16ec>
   1271c:	vmov.f64	d7, d8
   12720:	mov	r3, #0
   12724:	vldr	d6, [pc, #732]	; 12a08 <__assert_fail@plt+0x193c>
   12728:	vldr	d5, [pc, #680]	; 129d8 <__assert_fail@plt+0x190c>
   1272c:	b	12744 <__assert_fail@plt+0x1678>
   12730:	vcmpe.f64	d7, d6
   12734:	vmrs	APSR_nzcv, fpscr
   12738:	blt	1275c <__assert_fail@plt+0x1690>
   1273c:	vdiv.f64	d7, d7, d6
   12740:	add	r3, r3, #1
   12744:	vcmpe.f64	d7, #0.0
   12748:	vmrs	APSR_nzcv, fpscr
   1274c:	bpl	12730 <__assert_fail@plt+0x1664>
   12750:	vcmpe.f64	d7, d5
   12754:	vmrs	APSR_nzcv, fpscr
   12758:	bls	1273c <__assert_fail@plt+0x1670>
   1275c:	ldr	r2, [r5, #44]	; 0x2c
   12760:	subs	r4, r2, #0
   12764:	bne	12774 <__assert_fail@plt+0x16a8>
   12768:	add	r2, r3, r7
   1276c:	cmp	r2, #15
   12770:	bhi	12c54 <__assert_fail@plt+0x1b88>
   12774:	cmp	r3, #26
   12778:	bls	127cc <__assert_fail@plt+0x1700>
   1277c:	ldr	r3, [r5, #36]	; 0x24
   12780:	cmp	r3, #3
   12784:	beq	1252c <__assert_fail@plt+0x1460>
   12788:	ldr	r4, [r6]
   1278c:	movw	r1, #49444	; 0xc124
   12790:	movt	r1, #1
   12794:	mov	r2, #5
   12798:	mov	r0, #0
   1279c:	bl	10ec8 <dcgettext@plt>
   127a0:	mov	r2, r0
   127a4:	mov	r1, #0
   127a8:	vstr	d8, [sp]
   127ac:	mov	r0, r4
   127b0:	bl	10f4c <error@plt>
   127b4:	b	1252c <__assert_fail@plt+0x1460>
   127b8:	ldr	r3, [r5, #44]	; 0x2c
   127bc:	subs	r4, r3, #0
   127c0:	bne	127cc <__assert_fail@plt+0x1700>
   127c4:	cmp	r7, #15
   127c8:	bhi	12c54 <__assert_fail@plt+0x1b88>
   127cc:	mov	r3, #37	; 0x25
   127d0:	ldr	fp, [r5, #48]	; 0x30
   127d4:	strb	r3, [sp, #56]	; 0x38
   127d8:	ldr	r3, [r6, #28]
   127dc:	cmp	fp, #0
   127e0:	addne	r8, sp, #58	; 0x3a
   127e4:	addeq	r8, sp, #57	; 0x39
   127e8:	str	r3, [sp, #24]
   127ec:	movne	r3, #39	; 0x27
   127f0:	strbne	r3, [sp, #57]	; 0x39
   127f4:	ldr	r3, [r5, #52]	; 0x34
   127f8:	cmp	r3, #0
   127fc:	bne	12c2c <__assert_fail@plt+0x1b60>
   12800:	ldrb	r9, [r5, #12]
   12804:	cmp	r9, #0
   12808:	bne	12c04 <__assert_fail@plt+0x1b38>
   1280c:	cmp	r4, #0
   12810:	beq	12b58 <__assert_fail@plt+0x1a8c>
   12814:	vldr	d6, [pc, #428]	; 129c8 <__assert_fail@plt+0x18fc>
   12818:	sub	r3, r4, #3
   1281c:	cmp	r3, #2
   12820:	vldr	d10, [pc, #440]	; 129e0 <__assert_fail@plt+0x1914>
   12824:	vldr	d7, [pc, #444]	; 129e8 <__assert_fail@plt+0x191c>
   12828:	vcmpe.f64	d8, d6
   1282c:	vmovcs.f64	d10, d7
   12830:	vmrs	APSR_nzcv, fpscr
   12834:	vmovlt.f64	d9, d8
   12838:	movlt	r7, #0
   1283c:	blt	12858 <__assert_fail@plt+0x178c>
   12840:	vldr	d7, [pc, #392]	; 129d0 <__assert_fail@plt+0x1904>
   12844:	vmov.f64	d9, d8
   12848:	mov	r7, #0
   1284c:	vcmpe.f64	d8, d7
   12850:	vmrs	APSR_nzcv, fpscr
   12854:	bls	12b38 <__assert_fail@plt+0x1a6c>
   12858:	cmp	r9, #0
   1285c:	bne	132a8 <__assert_fail@plt+0x21dc>
   12860:	ldr	fp, [r6, #24]
   12864:	cmn	fp, #1
   12868:	beq	13238 <__assert_fail@plt+0x216c>
   1286c:	add	sl, r7, r7, lsl #1
   12870:	cmp	sl, fp
   12874:	movcs	sl, fp
   12878:	cmp	sl, #0
   1287c:	beq	131b8 <__assert_fail@plt+0x20ec>
   12880:	subs	r3, sl, #1
   12884:	beq	13258 <__assert_fail@plt+0x218c>
   12888:	vldr	d7, [pc, #376]	; 12a08 <__assert_fail@plt+0x193c>
   1288c:	mov	r2, r3
   12890:	vmov.f64	d6, d7
   12894:	subs	r2, r2, #1
   12898:	vmul.f64	d7, d7, d6
   1289c:	bne	12894 <__assert_fail@plt+0x17c8>
   128a0:	vmul.f64	d9, d9, d7
   128a4:	vldr	d7, [pc, #332]	; 129f8 <__assert_fail@plt+0x192c>
   128a8:	str	r3, [sp, #36]	; 0x24
   128ac:	vldr	d11, [pc, #332]	; 12a00 <__assert_fail@plt+0x1934>
   128b0:	vmul.f64	d7, d9, d7
   128b4:	vmov	r0, r1, d7
   128b8:	bl	1ba28 <__assert_fail@plt+0xa95c>
   128bc:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   128c0:	vmov	d7, r0, r1
   128c4:	ldr	r2, [sp, #24]
   128c8:	ldr	r3, [sp, #36]	; 0x24
   128cc:	vmul.f64	d11, d7, d11
   128d0:	vsub.f64	d9, d9, d11
   128d4:	cmp	r2, #4
   128d8:	ldrls	pc, [pc, r2, lsl #2]
   128dc:	b	135bc <__assert_fail@plt+0x24f0>
   128e0:	andeq	r2, r1, ip, lsr #29
   128e4:	andeq	r3, r1, r0
   128e8:	andeq	r3, r1, r4, lsl #2
   128ec:	andeq	r3, r1, r4, lsl r1
   128f0:	ldrdeq	r3, [r1], -r8
   128f4:	cmp	fp, #4
   128f8:	beq	12964 <__assert_fail@plt+0x1898>
   128fc:	ldrb	r2, [r5, #12]
   12900:	vldr	d8, [pc, #232]	; 129f0 <__assert_fail@plt+0x1924>
   12904:	b	12448 <__assert_fail@plt+0x137c>
   12908:	vldr	d7, [sp, #56]	; 0x38
   1290c:	movw	r3, #61840	; 0xf190
   12910:	movt	r3, #2
   12914:	movw	r2, #49064	; 0xbfa8
   12918:	movt	r2, #1
   1291c:	str	sl, [sp, #8]
   12920:	mov	r1, #1
   12924:	ldr	r0, [r3]
   12928:	vstr	d7, [sp]
   1292c:	bl	1100c <__fprintf_chk@plt>
   12930:	ldr	r3, [sp, #48]	; 0x30
   12934:	b	12370 <__assert_fail@plt+0x12a4>
   12938:	cmp	r3, #0
   1293c:	beq	1223c <__assert_fail@plt+0x1170>
   12940:	movw	r3, #61840	; 0xf190
   12944:	movt	r3, #2
   12948:	movw	r0, #48904	; 0xbf08
   1294c:	movt	r0, #1
   12950:	ldr	r3, [r3]
   12954:	mov	r2, #22
   12958:	mov	r1, #1
   1295c:	bl	10ef8 <fwrite@plt>
   12960:	b	1223c <__assert_fail@plt+0x1170>
   12964:	movw	r1, #48596	; 0xbdd4
   12968:	movt	r1, #1
   1296c:	mov	r9, #6
   12970:	ldr	r3, [r5, #36]	; 0x24
   12974:	movw	r6, #61704	; 0xf108
   12978:	movt	r6, #2
   1297c:	cmp	r3, #3
   12980:	beq	124e4 <__assert_fail@plt+0x1418>
   12984:	mov	r2, #5
   12988:	mov	r0, #0
   1298c:	ldr	fp, [r6]
   12990:	bl	10ec8 <dcgettext@plt>
   12994:	mov	r2, r0
   12998:	mov	r0, r4
   1299c:	str	r2, [sp, #24]
   129a0:	bl	18e68 <__assert_fail@plt+0x7d9c>
   129a4:	mov	r3, r0
   129a8:	mov	r1, #0
   129ac:	ldr	r2, [sp, #24]
   129b0:	mov	r0, fp
   129b4:	bl	10f4c <error@plt>
   129b8:	b	124e4 <__assert_fail@plt+0x1418>
   129bc:	nop	{0}
	...
   129c8:			; <UNDEFINED> instruction: 0xffffffff
   129cc:			; <UNDEFINED> instruction: 0xffefffff
   129d0:			; <UNDEFINED> instruction: 0xffffffff
   129d4:	svcvc	0x00efffff
   129d8:	andeq	r0, r0, r0
   129dc:	eorgt	r0, r4, r0
   129e0:	andeq	r0, r0, r0
   129e4:	addsmi	r0, r0, r0
   129e8:	andeq	r0, r0, r0
   129ec:	addmi	r4, pc, r0
   129f0:	andeq	r0, r0, r0
   129f4:	svccc	0x00f00000	; IMB
   129f8:	andeq	r0, r0, r0
   129fc:	stccc	0, cr0, [r0], {-0}
   12a00:	andeq	r0, r0, r0
   12a04:	mvnmi	r0, #0
   12a08:	andeq	r0, r0, r0
   12a0c:	eormi	r0, r4, r0
   12a10:	movw	fp, #61840	; 0xf190
   12a14:	movt	fp, #2
   12a18:	str	r6, [sp]
   12a1c:	vstr	d8, [sp, #8]
   12a20:	movw	r2, #49168	; 0xc010
   12a24:	movt	r2, #1
   12a28:	mov	r1, #1
   12a2c:	ldr	r0, [fp]
   12a30:	ldr	r3, [sp, #24]
   12a34:	bl	1100c <__fprintf_chk@plt>
   12a38:	vldr	d7, [sp, #56]	; 0x38
   12a3c:	ldrb	r3, [r5, #12]
   12a40:	vmul.f64	d8, d8, d7
   12a44:	cmp	r3, #0
   12a48:	vstr	d8, [sp, #56]	; 0x38
   12a4c:	beq	1245c <__assert_fail@plt+0x1390>
   12a50:	vstr	d8, [sp]
   12a54:	movw	r2, #49196	; 0xc02c
   12a58:	movt	r2, #1
   12a5c:	vstr	d8, [sp, #8]
   12a60:	mov	r1, #1
   12a64:	ldr	r0, [fp]
   12a68:	bl	1100c <__fprintf_chk@plt>
   12a6c:	b	1245c <__assert_fail@plt+0x1390>
   12a70:	mov	r2, #5
   12a74:	movw	r1, #49260	; 0xc06c
   12a78:	movt	r1, #1
   12a7c:	mov	r0, #0
   12a80:	bl	10ec8 <dcgettext@plt>
   12a84:	mov	r6, r0
   12a88:	mov	r0, r4
   12a8c:	bl	18e68 <__assert_fail@plt+0x7d9c>
   12a90:	mov	r1, #0
   12a94:	mov	r3, r0
   12a98:	mov	r2, r6
   12a9c:	mov	r0, r1
   12aa0:	movw	r6, #61704	; 0xf108
   12aa4:	movt	r6, #2
   12aa8:	bl	10f4c <error@plt>
   12aac:	b	124e4 <__assert_fail@plt+0x1418>
   12ab0:	ldrb	r2, [r3, #1]
   12ab4:	cmp	r2, #105	; 0x69
   12ab8:	bne	13588 <__assert_fail@plt+0x24bc>
   12abc:	vldr	s15, [sp, #24]
   12ac0:	add	r3, r3, #2
   12ac4:	ldrb	r2, [r5, #12]
   12ac8:	str	r3, [sp, #48]	; 0x30
   12acc:	vcvt.f64.s32	d7, s15
   12ad0:	b	12420 <__assert_fail@plt+0x1354>
   12ad4:	mov	sl, #0
   12ad8:	movw	r1, #48748	; 0xbe6c
   12adc:	movt	r1, #1
   12ae0:	mov	r7, sl
   12ae4:	b	12970 <__assert_fail@plt+0x18a4>
   12ae8:	mov	sl, #0
   12aec:	movw	r1, #48644	; 0xbe04
   12af0:	movt	r1, #1
   12af4:	mov	r7, sl
   12af8:	b	12970 <__assert_fail@plt+0x18a4>
   12afc:	mov	sl, #0
   12b00:	movw	r1, #48692	; 0xbe34
   12b04:	movt	r1, #1
   12b08:	mov	r7, sl
   12b0c:	b	12970 <__assert_fail@plt+0x18a4>
   12b10:	mov	sl, #0
   12b14:	movw	r1, #48596	; 0xbdd4
   12b18:	movt	r1, #1
   12b1c:	mov	r7, sl
   12b20:	b	12970 <__assert_fail@plt+0x18a4>
   12b24:	vcmpe.f64	d9, d10
   12b28:	vmrs	APSR_nzcv, fpscr
   12b2c:	blt	12858 <__assert_fail@plt+0x178c>
   12b30:	vdiv.f64	d9, d9, d10
   12b34:	add	r7, r7, #1
   12b38:	vcmpe.f64	d9, #0.0
   12b3c:	vmrs	APSR_nzcv, fpscr
   12b40:	bpl	12b24 <__assert_fail@plt+0x1a58>
   12b44:	vneg.f64	d7, d9
   12b48:	vcmpe.f64	d7, d10
   12b4c:	vmrs	APSR_nzcv, fpscr
   12b50:	bge	12b30 <__assert_fail@plt+0x1a64>
   12b54:	b	12858 <__assert_fail@plt+0x178c>
   12b58:	cmp	r7, #0
   12b5c:	beq	13318 <__assert_fail@plt+0x224c>
   12b60:	subs	r4, r7, #1
   12b64:	vldr	d9, [pc, #-356]	; 12a08 <__assert_fail@plt+0x193c>
   12b68:	beq	134c0 <__assert_fail@plt+0x23f4>
   12b6c:	vmov.f64	d6, d9
   12b70:	mov	r3, r4
   12b74:	subs	r3, r3, #1
   12b78:	vmul.f64	d9, d9, d6
   12b7c:	bne	12b74 <__assert_fail@plt+0x1aa8>
   12b80:	vmul.f64	d9, d9, d8
   12b84:	vldr	d7, [pc, #-404]	; 129f8 <__assert_fail@plt+0x192c>
   12b88:	vldr	d10, [pc, #-400]	; 12a00 <__assert_fail@plt+0x1934>
   12b8c:	vmul.f64	d7, d9, d7
   12b90:	vmov	r0, r1, d7
   12b94:	bl	1ba28 <__assert_fail@plt+0xa95c>
   12b98:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   12b9c:	vmov	d7, r0, r1
   12ba0:	ldr	r3, [sp, #24]
   12ba4:	vmul.f64	d10, d7, d10
   12ba8:	vsub.f64	d9, d9, d10
   12bac:	cmp	r3, #4
   12bb0:	ldrls	pc, [pc, r3, lsl #2]
   12bb4:	b	135b4 <__assert_fail@plt+0x24e8>
   12bb8:	andeq	r2, r1, r8, asr #25
   12bbc:	andeq	r3, r1, ip, asr #32
   12bc0:			; <UNDEFINED> instruction: 0x00012cbc
   12bc4:	andeq	r3, r1, r0, asr #1
   12bc8:	muleq	r1, r8, r0
   12bcc:	movw	r3, #61840	; 0xf190
   12bd0:	movt	r3, #2
   12bd4:	ldr	r9, [r3]
   12bd8:	mov	r0, r4
   12bdc:	bl	18e68 <__assert_fail@plt+0x7d9c>
   12be0:	mov	r3, r0
   12be4:	movw	r2, #48884	; 0xbef4
   12be8:	movt	r2, #1
   12bec:	mov	r1, #1
   12bf0:	mov	r0, r9
   12bf4:	bl	1100c <__fprintf_chk@plt>
   12bf8:	b	1223c <__assert_fail@plt+0x1170>
   12bfc:	mov	r4, r8
   12c00:	b	12274 <__assert_fail@plt+0x11a8>
   12c04:	movw	r3, #61840	; 0xf190
   12c08:	movt	r3, #2
   12c0c:	movw	r0, #49520	; 0xc170
   12c10:	movt	r0, #1
   12c14:	ldr	r3, [r3]
   12c18:	mov	r2, #17
   12c1c:	mov	r1, #1
   12c20:	bl	10ef8 <fwrite@plt>
   12c24:	ldrb	r9, [r5, #12]
   12c28:	b	1280c <__assert_fail@plt+0x1740>
   12c2c:	movw	r0, #49512	; 0xc168
   12c30:	movt	r0, #1
   12c34:	mov	r2, #1
   12c38:	mov	r1, #62	; 0x3e
   12c3c:	stm	sp, {r0, r3}
   12c40:	mov	r0, r8
   12c44:	mov	r3, #63	; 0x3f
   12c48:	bl	110b4 <__snprintf_chk@plt>
   12c4c:	add	r8, r8, r0
   12c50:	b	12800 <__assert_fail@plt+0x1734>
   12c54:	ldr	r3, [r5, #36]	; 0x24
   12c58:	cmp	r3, #3
   12c5c:	beq	1252c <__assert_fail@plt+0x1460>
   12c60:	cmp	r7, #0
   12c64:	ldr	r4, [r6]
   12c68:	beq	13434 <__assert_fail@plt+0x2368>
   12c6c:	mov	r2, #5
   12c70:	movw	r1, #49308	; 0xc09c
   12c74:	movt	r1, #1
   12c78:	mov	r0, #0
   12c7c:	bl	10ec8 <dcgettext@plt>
   12c80:	mov	r3, #0
   12c84:	mov	r2, r0
   12c88:	vstr	d8, [sp]
   12c8c:	mov	r0, r4
   12c90:	mov	r1, r3
   12c94:	str	r7, [sp, #8]
   12c98:	str	r3, [sp, #12]
   12c9c:	bl	10f4c <error@plt>
   12ca0:	b	1252c <__assert_fail@plt+0x1460>
   12ca4:	mov	sl, #0
   12ca8:	movw	r1, #48672	; 0xbe20
   12cac:	movt	r1, #1
   12cb0:	mov	r7, sl
   12cb4:	mov	r9, #3
   12cb8:	b	12970 <__assert_fail@plt+0x18a4>
   12cbc:	vcmpe.f64	d9, #0.0
   12cc0:	vmrs	APSR_nzcv, fpscr
   12cc4:	bmi	1304c <__assert_fail@plt+0x1f80>
   12cc8:	vmov	r0, r1, d9
   12ccc:	bl	1ba28 <__assert_fail@plt+0xa95c>
   12cd0:	mov	r4, r0
   12cd4:	str	r1, [sp, #24]
   12cd8:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   12cdc:	vmov	d7, r0, r1
   12ce0:	vcmpe.f64	d7, d9
   12ce4:	vmrs	APSR_nzcv, fpscr
   12ce8:	bpl	12d00 <__assert_fail@plt+0x1c34>
   12cec:	ldr	r3, [sp, #24]
   12cf0:	adds	r0, r4, #1
   12cf4:	adc	r1, r3, #0
   12cf8:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   12cfc:	vmov	d7, r0, r1
   12d00:	cmp	r7, #0
   12d04:	vadd.f64	d10, d10, d7
   12d08:	beq	12d2c <__assert_fail@plt+0x1c60>
   12d0c:	subs	r4, r7, #1
   12d10:	beq	1350c <__assert_fail@plt+0x2440>
   12d14:	vldr	d7, [pc, #-788]	; 12a08 <__assert_fail@plt+0x193c>
   12d18:	vmov.f64	d6, d7
   12d1c:	subs	r4, r4, #1
   12d20:	vmul.f64	d7, d7, d6
   12d24:	bne	12d1c <__assert_fail@plt+0x1c50>
   12d28:	vdiv.f64	d10, d10, d7
   12d2c:	cmp	r9, #0
   12d30:	beq	12d68 <__assert_fail@plt+0x1c9c>
   12d34:	movw	r3, #61840	; 0xf190
   12d38:	movt	r3, #2
   12d3c:	vstr	d10, [sp]
   12d40:	cmp	fp, #0
   12d44:	ldr	r0, [r3]
   12d48:	movw	r3, #48836	; 0xbec4
   12d4c:	movt	r3, #1
   12d50:	movw	r2, #48784	; 0xbe90
   12d54:	movt	r2, #1
   12d58:	mov	r1, #1
   12d5c:	moveq	r2, r3
   12d60:	mov	r3, sl
   12d64:	bl	1100c <__fprintf_chk@plt>
   12d68:	movw	r2, #49540	; 0xc184
   12d6c:	movt	r2, #1
   12d70:	vstr	d10, [sp, #8]
   12d74:	ldrb	lr, [r2, #4]
   12d78:	add	r3, sp, #56	; 0x38
   12d7c:	add	r9, sp, #120	; 0x78
   12d80:	mov	r0, r9
   12d84:	ldr	ip, [r2]
   12d88:	mov	r2, #1
   12d8c:	stm	sp, {r3, sl}
   12d90:	mov	r3, #128	; 0x80
   12d94:	mov	r1, r3
   12d98:	str	ip, [r8]
   12d9c:	strb	lr, [r8, #4]
   12da0:	bl	110b4 <__snprintf_chk@plt>
   12da4:	cmp	r0, #127	; 0x7f
   12da8:	bhi	13560 <__assert_fail@plt+0x2494>
   12dac:	ldr	r4, [r5, #8]
   12db0:	ldrb	r7, [r5, #12]
   12db4:	cmp	r4, #0
   12db8:	beq	12dd8 <__assert_fail@plt+0x1d0c>
   12dbc:	mov	r0, r9
   12dc0:	bl	10fb8 <strlen@plt>
   12dc4:	rsb	r2, r0, #127	; 0x7f
   12dc8:	mov	r1, r4
   12dcc:	mov	r3, #128	; 0x80
   12dd0:	mov	r0, r9
   12dd4:	bl	10e2c <__strncat_chk@plt>
   12dd8:	cmp	r7, #0
   12ddc:	beq	12e10 <__assert_fail@plt+0x1d44>
   12de0:	movw	r3, #61840	; 0xf190
   12de4:	movt	r3, #2
   12de8:	ldr	r4, [r3]
   12dec:	mov	r0, r9
   12df0:	bl	18e68 <__assert_fail@plt+0x7d9c>
   12df4:	movw	r2, #49704	; 0xc228
   12df8:	movt	r2, #1
   12dfc:	vstr	d8, [sp]
   12e00:	mov	r1, #1
   12e04:	str	r0, [sp, #8]
   12e08:	mov	r0, r4
   12e0c:	bl	1100c <__fprintf_chk@plt>
   12e10:	mov	r0, r9
   12e14:	bl	10fb8 <strlen@plt>
   12e18:	ldr	r4, [r5, #20]
   12e1c:	mov	r3, r0
   12e20:	ldr	r2, [r5, #24]
   12e24:	ldr	r0, [r5, #28]
   12e28:	cmp	r4, #0
   12e2c:	beq	12e38 <__assert_fail@plt+0x1d6c>
   12e30:	cmp	r4, r3
   12e34:	bhi	13380 <__assert_fail@plt+0x22b4>
   12e38:	add	r1, r3, #1
   12e3c:	cmp	r1, r2
   12e40:	bcc	12e58 <__assert_fail@plt+0x1d8c>
   12e44:	add	r3, r3, #2
   12e48:	mov	r1, r3
   12e4c:	str	r3, [r5, #24]
   12e50:	bl	197a8 <__assert_fail@plt+0x86dc>
   12e54:	str	r0, [r5, #28]
   12e58:	mov	r1, r9
   12e5c:	movw	r4, #61852	; 0xf19c
   12e60:	movt	r4, #2
   12e64:	bl	10f1c <strcpy@plt>
   12e68:	ldr	r1, [r4]
   12e6c:	ldr	r0, [r5, #56]	; 0x38
   12e70:	cmp	r0, #0
   12e74:	beq	12e80 <__assert_fail@plt+0x1db4>
   12e78:	bl	10e20 <fputs_unlocked@plt>
   12e7c:	ldr	r1, [r4]
   12e80:	ldr	r0, [r5, #28]
   12e84:	bl	10e20 <fputs_unlocked@plt>
   12e88:	ldr	r0, [r5, #60]	; 0x3c
   12e8c:	cmp	r0, #0
   12e90:	moveq	r0, #1
   12e94:	beq	121b8 <__assert_fail@plt+0x10ec>
   12e98:	ldr	r1, [r4]
   12e9c:	bl	10e20 <fputs_unlocked@plt>
   12ea0:	mov	r0, #1
   12ea4:	b	121b8 <__assert_fail@plt+0x10ec>
   12ea8:	mov	sl, #1
   12eac:	vmov	r0, r1, d9
   12eb0:	bl	1ba28 <__assert_fail@plt+0xa95c>
   12eb4:	str	r1, [sp, #24]
   12eb8:	str	r0, [sp, #36]	; 0x24
   12ebc:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   12ec0:	vmov	d7, r0, r1
   12ec4:	vcmpe.f64	d7, d9
   12ec8:	vmrs	APSR_nzcv, fpscr
   12ecc:	bpl	12ee8 <__assert_fail@plt+0x1e1c>
   12ed0:	ldr	r2, [sp, #24]
   12ed4:	ldr	r3, [sp, #36]	; 0x24
   12ed8:	adds	r0, r3, #1
   12edc:	adc	r1, r2, #0
   12ee0:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   12ee4:	vmov	d7, r0, r1
   12ee8:	cmp	sl, #0
   12eec:	vadd.f64	d11, d11, d7
   12ef0:	beq	12f14 <__assert_fail@plt+0x1e48>
   12ef4:	subs	r3, sl, #1
   12ef8:	beq	1352c <__assert_fail@plt+0x2460>
   12efc:	vldr	d7, [pc, #980]	; 132d8 <__assert_fail@plt+0x220c>
   12f00:	vmov.f64	d6, d7
   12f04:	subs	r3, r3, #1
   12f08:	vmul.f64	d7, d7, d6
   12f0c:	bne	12f04 <__assert_fail@plt+0x1e38>
   12f10:	vdiv.f64	d11, d11, d7
   12f14:	vcmpe.f64	d11, #0.0
   12f18:	vmrs	APSR_nzcv, fpscr
   12f1c:	bmi	1317c <__assert_fail@plt+0x20b0>
   12f20:	vcmpe.f64	d11, d10
   12f24:	vmrs	APSR_nzcv, fpscr
   12f28:	blt	12f34 <__assert_fail@plt+0x1e68>
   12f2c:	vdiv.f64	d11, d11, d10
   12f30:	add	r7, r7, #1
   12f34:	vcmp.f64	d11, #0.0
   12f38:	vmrs	APSR_nzcv, fpscr
   12f3c:	moveq	sl, #0
   12f40:	bne	1341c <__assert_fail@plt+0x2350>
   12f44:	cmp	r9, #0
   12f48:	bne	133ec <__assert_fail@plt+0x2320>
   12f4c:	movw	r3, #49672	; 0xc208
   12f50:	movt	r3, #1
   12f54:	ldrh	r1, [r3, #4]
   12f58:	cmn	fp, #1
   12f5c:	moveq	fp, sl
   12f60:	cmp	r7, #8
   12f64:	ldr	r2, [r3]
   12f68:	movwhi	ip, #48876	; 0xbeec
   12f6c:	movthi	ip, #1
   12f70:	ldrb	r3, [r3, #6]
   12f74:	str	r2, [r8]
   12f78:	strh	r1, [r8, #4]
   12f7c:	strb	r3, [r8, #6]
   12f80:	bhi	12f94 <__assert_fail@plt+0x1ec8>
   12f84:	movw	r3, #47904	; 0xbb20
   12f88:	movt	r3, #1
   12f8c:	add	r3, r3, r7, lsl #2
   12f90:	ldr	ip, [r3, #88]	; 0x58
   12f94:	add	r2, sp, #56	; 0x38
   12f98:	add	r9, sp, #120	; 0x78
   12f9c:	mov	r3, #128	; 0x80
   12fa0:	mov	r0, r9
   12fa4:	mov	r1, #127	; 0x7f
   12fa8:	stm	sp, {r2, fp}
   12fac:	mov	r2, #1
   12fb0:	vstr	d11, [sp, #8]
   12fb4:	str	ip, [sp, #16]
   12fb8:	bl	110b4 <__snprintf_chk@plt>
   12fbc:	cmp	r0, #126	; 0x7e
   12fc0:	bhi	13538 <__assert_fail@plt+0x246c>
   12fc4:	sub	r4, r4, #4
   12fc8:	cmp	r7, #0
   12fcc:	clz	r4, r4
   12fd0:	lsr	r4, r4, #5
   12fd4:	moveq	r4, #0
   12fd8:	cmp	r4, #0
   12fdc:	bne	134a4 <__assert_fail@plt+0x23d8>
   12fe0:	ldrb	r7, [r5, #12]
   12fe4:	cmp	r7, #0
   12fe8:	bne	133bc <__assert_fail@plt+0x22f0>
   12fec:	ldr	r4, [r5, #8]
   12ff0:	cmp	r4, #0
   12ff4:	bne	12dbc <__assert_fail@plt+0x1cf0>
   12ff8:	b	12e10 <__assert_fail@plt+0x1d44>
   12ffc:	ldr	sl, [sp, #24]
   13000:	vneg.f64	d9, d9
   13004:	vmov	r0, r1, d9
   13008:	bl	1ba28 <__assert_fail@plt+0xa95c>
   1300c:	mov	r2, r0
   13010:	mov	r3, r1
   13014:	strd	r2, [sp, #24]
   13018:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   1301c:	vmov	d7, r0, r1
   13020:	ldrd	r2, [sp, #24]
   13024:	vcmpe.f64	d9, d7
   13028:	vmrs	APSR_nzcv, fpscr
   1302c:	ble	13038 <__assert_fail@plt+0x1f6c>
   13030:	adds	r2, r2, #1
   13034:	adc	r3, r3, #0
   13038:	rsbs	r0, r2, #0
   1303c:	rsc	r1, r3, #0
   13040:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13044:	vmov	d7, r0, r1
   13048:	b	12ee8 <__assert_fail@plt+0x1e1c>
   1304c:	vneg.f64	d9, d9
   13050:	vmov	r0, r1, d9
   13054:	bl	1ba28 <__assert_fail@plt+0xa95c>
   13058:	mov	r2, r0
   1305c:	mov	r3, r1
   13060:	strd	r2, [sp, #24]
   13064:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13068:	vmov	d7, r0, r1
   1306c:	ldrd	r2, [sp, #24]
   13070:	vcmpe.f64	d9, d7
   13074:	vmrs	APSR_nzcv, fpscr
   13078:	ble	13084 <__assert_fail@plt+0x1fb8>
   1307c:	adds	r2, r2, #1
   13080:	adc	r3, r3, #0
   13084:	rsbs	r0, r2, #0
   13088:	rsc	r1, r3, #0
   1308c:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13090:	vmov	d7, r0, r1
   13094:	b	12d00 <__assert_fail@plt+0x1c34>
   13098:	vcmpe.f64	d9, #0.0
   1309c:	vldr	d7, [pc, #572]	; 132e0 <__assert_fail@plt+0x2214>
   130a0:	vmrs	APSR_nzcv, fpscr
   130a4:	vsubmi.f64	d7, d9, d7
   130a8:	vaddpl.f64	d7, d9, d7
   130ac:	vmov	r0, r1, d7
   130b0:	bl	1ba28 <__assert_fail@plt+0xa95c>
   130b4:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   130b8:	vmov	d7, r0, r1
   130bc:	b	12d00 <__assert_fail@plt+0x1c34>
   130c0:	vmov	r0, r1, d9
   130c4:	bl	1ba28 <__assert_fail@plt+0xa95c>
   130c8:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   130cc:	vmov	d7, r0, r1
   130d0:	b	12d00 <__assert_fail@plt+0x1c34>
   130d4:	mov	sl, #1
   130d8:	vcmpe.f64	d9, #0.0
   130dc:	vldr	d7, [pc, #508]	; 132e0 <__assert_fail@plt+0x2214>
   130e0:	vmrs	APSR_nzcv, fpscr
   130e4:	vsubmi.f64	d7, d9, d7
   130e8:	vaddpl.f64	d7, d9, d7
   130ec:	vmov	r0, r1, d7
   130f0:	bl	1ba28 <__assert_fail@plt+0xa95c>
   130f4:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   130f8:	vmov	d7, r0, r1
   130fc:	b	12ee8 <__assert_fail@plt+0x1e1c>
   13100:	mov	sl, #1
   13104:	vcmpe.f64	d9, #0.0
   13108:	vmrs	APSR_nzcv, fpscr
   1310c:	bpl	12eac <__assert_fail@plt+0x1de0>
   13110:	b	13000 <__assert_fail@plt+0x1f34>
   13114:	vmov	r0, r1, d9
   13118:	str	r3, [sp, #24]
   1311c:	bl	1ba28 <__assert_fail@plt+0xa95c>
   13120:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13124:	vmov	d7, r0, r1
   13128:	ldr	r3, [sp, #24]
   1312c:	vadd.f64	d11, d7, d11
   13130:	b	12efc <__assert_fail@plt+0x1e30>
   13134:	ldrb	r1, [r3, #1]
   13138:	ldrb	r2, [r5, #12]
   1313c:	cmp	r1, #105	; 0x69
   13140:	beq	13360 <__assert_fail@plt+0x2294>
   13144:	vldr	s15, [sp, #24]
   13148:	vcvt.f64.s32	d7, s15
   1314c:	b	12420 <__assert_fail@plt+0x1354>
   13150:	movw	r1, #48692	; 0xbe34
   13154:	movt	r1, #1
   13158:	mov	r9, #4
   1315c:	b	12970 <__assert_fail@plt+0x18a4>
   13160:	mov	sl, r7
   13164:	mov	r6, #1
   13168:	b	12448 <__assert_fail@plt+0x137c>
   1316c:	movw	r1, #48644	; 0xbe04
   13170:	movt	r1, #1
   13174:	mov	r9, #5
   13178:	b	12970 <__assert_fail@plt+0x18a4>
   1317c:	vneg.f64	d7, d11
   13180:	vcmpe.f64	d7, d10
   13184:	vmrs	APSR_nzcv, fpscr
   13188:	bge	12f2c <__assert_fail@plt+0x1e60>
   1318c:	vmov.f64	d6, d11
   13190:	vmov.f64	d11, d7
   13194:	vldr	d7, [pc, #316]	; 132d8 <__assert_fail@plt+0x220c>
   13198:	vcmpe.f64	d11, d7
   1319c:	vmov.f64	d11, d6
   131a0:	vmrs	APSR_nzcv, fpscr
   131a4:	movmi	sl, #1
   131a8:	movpl	sl, #0
   131ac:	cmp	r7, #0
   131b0:	moveq	sl, #0
   131b4:	b	12f44 <__assert_fail@plt+0x1e78>
   131b8:	vldr	d7, [pc, #304]	; 132f0 <__assert_fail@plt+0x2224>
   131bc:	vldr	d11, [pc, #308]	; 132f8 <__assert_fail@plt+0x222c>
   131c0:	vmul.f64	d7, d9, d7
   131c4:	vmov	r0, r1, d7
   131c8:	bl	1ba28 <__assert_fail@plt+0xa95c>
   131cc:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   131d0:	vmov	d7, r0, r1
   131d4:	ldr	r3, [sp, #24]
   131d8:	vmul.f64	d11, d7, d11
   131dc:	vsub.f64	d9, d9, d11
   131e0:	cmp	r3, #4
   131e4:	ldrls	pc, [pc, r3, lsl #2]
   131e8:	b	135ac <__assert_fail@plt+0x24e0>
   131ec:	andeq	r3, r1, r8, lsl r2
   131f0:	andeq	r3, r1, r0, lsl r2
   131f4:	andeq	r3, r1, r8, lsl #4
   131f8:	andeq	r3, r1, r0, lsr #4
   131fc:	andeq	r3, r1, r0, lsl #4
   13200:	mov	sl, #0
   13204:	b	130d8 <__assert_fail@plt+0x200c>
   13208:	mov	sl, #0
   1320c:	b	13104 <__assert_fail@plt+0x2038>
   13210:	mov	sl, #0
   13214:	b	13000 <__assert_fail@plt+0x1f34>
   13218:	ldr	sl, [sp, #24]
   1321c:	b	12eac <__assert_fail@plt+0x1de0>
   13220:	vmov	r0, r1, d9
   13224:	bl	1ba28 <__assert_fail@plt+0xa95c>
   13228:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   1322c:	vmov	d7, r0, r1
   13230:	vadd.f64	d11, d7, d11
   13234:	b	12f14 <__assert_fail@plt+0x1e48>
   13238:	vcmpe.f64	d9, #0.0
   1323c:	vldr	d6, [pc, #148]	; 132d8 <__assert_fail@plt+0x220c>
   13240:	vmrs	APSR_nzcv, fpscr
   13244:	vnegmi.f64	d7, d9
   13248:	vmovpl.f64	d7, d9
   1324c:	vcmpe.f64	d7, d6
   13250:	vmrs	APSR_nzcv, fpscr
   13254:	bpl	131b8 <__assert_fail@plt+0x20ec>
   13258:	vldr	d6, [pc, #120]	; 132d8 <__assert_fail@plt+0x220c>
   1325c:	vldr	d7, [pc, #140]	; 132f0 <__assert_fail@plt+0x2224>
   13260:	vldr	d11, [pc, #144]	; 132f8 <__assert_fail@plt+0x222c>
   13264:	vmul.f64	d9, d9, d6
   13268:	vmul.f64	d7, d9, d7
   1326c:	vmov	r0, r1, d7
   13270:	bl	1ba28 <__assert_fail@plt+0xa95c>
   13274:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13278:	vmov	d7, r0, r1
   1327c:	ldr	r3, [sp, #24]
   13280:	vmul.f64	d11, d7, d11
   13284:	vsub.f64	d9, d9, d11
   13288:	cmp	r3, #4
   1328c:	ldrls	pc, [pc, r3, lsl #2]
   13290:	b	135ac <__assert_fail@plt+0x24e0>
   13294:	andeq	r2, r1, r8, lsr #29
   13298:	strdeq	r2, [r1], -ip
   1329c:	andeq	r3, r1, r0, lsl #2
   132a0:	andeq	r3, r1, r8, lsl r5
   132a4:	ldrdeq	r3, [r1], -r4
   132a8:	movw	r3, #61840	; 0xf190
   132ac:	movt	r3, #2
   132b0:	vstr	d9, [sp]
   132b4:	movw	r2, #49592	; 0xc1b8
   132b8:	movt	r2, #1
   132bc:	vstr	d10, [sp, #8]
   132c0:	mov	r1, #1
   132c4:	str	r7, [sp, #16]
   132c8:	ldr	r0, [r3]
   132cc:	bl	1100c <__fprintf_chk@plt>
   132d0:	ldrb	r9, [r5, #12]
   132d4:	b	12860 <__assert_fail@plt+0x1794>
   132d8:	andeq	r0, r0, r0
   132dc:	eormi	r0, r4, r0
   132e0:	andeq	r0, r0, r0
   132e4:	svccc	0x00e00000
   132e8:	andeq	r0, r0, r0
   132ec:	addsmi	r0, r0, r0
   132f0:	andeq	r0, r0, r0
   132f4:	stccc	0, cr0, [r0], {-0}
   132f8:	andeq	r0, r0, r0
   132fc:	mvnmi	r0, #0
   13300:	andeq	r0, r0, r0
   13304:	eormi	r0, r4, r0
   13308:	andeq	r0, r0, r0
   1330c:	svccc	0x00f00000	; IMB
	...
   13318:	vldr	d7, [pc, #-48]	; 132f0 <__assert_fail@plt+0x2224>
   1331c:	vldr	d10, [pc, #-44]	; 132f8 <__assert_fail@plt+0x222c>
   13320:	vmul.f64	d7, d8, d7
   13324:	vmov	r0, r1, d7
   13328:	bl	1ba28 <__assert_fail@plt+0xa95c>
   1332c:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13330:	vmov	d7, r0, r1
   13334:	ldr	r3, [sp, #24]
   13338:	vmul.f64	d10, d7, d10
   1333c:	vsub.f64	d9, d8, d10
   13340:	cmp	r3, #4
   13344:	ldrls	pc, [pc, r3, lsl #2]
   13348:	b	135d4 <__assert_fail@plt+0x2508>
   1334c:	andeq	r2, r1, r8, asr #25
   13350:	andeq	r3, r1, ip, asr #32
   13354:			; <UNDEFINED> instruction: 0x00012cbc
   13358:	andeq	r3, r1, r0, asr #1
   1335c:	muleq	r1, r8, r0
   13360:	add	r3, r3, #2
   13364:	cmp	r2, #0
   13368:	str	r3, [sp, #48]	; 0x30
   1336c:	bne	13470 <__assert_fail@plt+0x23a4>
   13370:	mov	r3, #1024	; 0x400
   13374:	vldr	d7, [pc, #-148]	; 132e8 <__assert_fail@plt+0x221c>
   13378:	str	r3, [sp, #24]
   1337c:	b	12420 <__assert_fail@plt+0x1354>
   13380:	ldr	ip, [r6, #32]
   13384:	mov	lr, #2
   13388:	add	r3, sp, #56	; 0x38
   1338c:	mov	r1, r0
   13390:	mov	r0, r9
   13394:	stm	sp, {ip, lr}
   13398:	str	r4, [sp, #56]	; 0x38
   1339c:	bl	14cc8 <__assert_fail@plt+0x3bfc>
   133a0:	ldrb	r3, [r5, #12]
   133a4:	cmp	r3, #0
   133a8:	bne	13440 <__assert_fail@plt+0x2374>
   133ac:	movw	r4, #61852	; 0xf19c
   133b0:	movt	r4, #2
   133b4:	ldr	r1, [r4]
   133b8:	b	12e6c <__assert_fail@plt+0x1da0>
   133bc:	movw	r3, #61840	; 0xf190
   133c0:	movt	r3, #2
   133c4:	ldr	r4, [r3]
   133c8:	mov	r0, r9
   133cc:	bl	18e68 <__assert_fail@plt+0x7d9c>
   133d0:	mov	r3, r0
   133d4:	movw	r2, #49680	; 0xc210
   133d8:	movt	r2, #1
   133dc:	mov	r1, #1
   133e0:	mov	r0, r4
   133e4:	bl	1100c <__fprintf_chk@plt>
   133e8:	b	12dac <__assert_fail@plt+0x1ce0>
   133ec:	movw	r3, #61840	; 0xf190
   133f0:	movt	r3, #2
   133f4:	vstr	d11, [sp]
   133f8:	movw	r2, #49628	; 0xc1dc
   133fc:	movt	r2, #1
   13400:	vstr	d10, [sp, #8]
   13404:	mov	r1, #1
   13408:	str	r7, [sp, #16]
   1340c:	ldr	r0, [r3]
   13410:	bl	1100c <__fprintf_chk@plt>
   13414:	ldr	fp, [r6, #24]
   13418:	b	12f4c <__assert_fail@plt+0x1e80>
   1341c:	vcmpe.f64	d11, #0.0
   13420:	vmrs	APSR_nzcv, fpscr
   13424:	vmovpl.f64	d6, d11
   13428:	bpl	13194 <__assert_fail@plt+0x20c8>
   1342c:	vneg.f64	d7, d11
   13430:	b	1318c <__assert_fail@plt+0x20c0>
   13434:	movw	r1, #49384	; 0xc0e8
   13438:	movt	r1, #1
   1343c:	b	12794 <__assert_fail@plt+0x16c8>
   13440:	movw	r3, #61840	; 0xf190
   13444:	movt	r3, #2
   13448:	ldr	r0, [r5, #28]
   1344c:	ldr	r4, [r3]
   13450:	bl	18e68 <__assert_fail@plt+0x7d9c>
   13454:	mov	r3, r0
   13458:	movw	r2, #49756	; 0xc25c
   1345c:	movt	r2, #1
   13460:	mov	r1, #1
   13464:	mov	r0, r4
   13468:	bl	1100c <__fprintf_chk@plt>
   1346c:	b	133ac <__assert_fail@plt+0x22e0>
   13470:	movw	r0, #61840	; 0xf190
   13474:	movt	r0, #2
   13478:	mov	r3, #1024	; 0x400
   1347c:	mov	r1, fp
   13480:	ldr	r0, [r0]
   13484:	movw	r2, #49116	; 0xbfdc
   13488:	movt	r2, #1
   1348c:	bl	1100c <__fprintf_chk@plt>
   13490:	mov	r3, #1024	; 0x400
   13494:	ldrb	r2, [r5, #12]
   13498:	vldr	d7, [pc, #-440]	; 132e8 <__assert_fail@plt+0x221c>
   1349c:	str	r3, [sp, #24]
   134a0:	b	12420 <__assert_fail@plt+0x1354>
   134a4:	rsb	r2, r0, #127	; 0x7f
   134a8:	movw	r1, #55624	; 0xd948
   134ac:	movt	r1, #1
   134b0:	mov	r3, #128	; 0x80
   134b4:	mov	r0, r9
   134b8:	bl	10e2c <__strncat_chk@plt>
   134bc:	b	12fe0 <__assert_fail@plt+0x1f14>
   134c0:	vmul.f64	d9, d8, d9
   134c4:	vldr	d7, [pc, #-476]	; 132f0 <__assert_fail@plt+0x2224>
   134c8:	vldr	d10, [pc, #-472]	; 132f8 <__assert_fail@plt+0x222c>
   134cc:	vmul.f64	d7, d9, d7
   134d0:	vmov	r0, r1, d7
   134d4:	bl	1ba28 <__assert_fail@plt+0xa95c>
   134d8:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   134dc:	vmov	d7, r0, r1
   134e0:	ldr	r3, [sp, #24]
   134e4:	vmul.f64	d10, d7, d10
   134e8:	vsub.f64	d9, d9, d10
   134ec:	cmp	r3, #4
   134f0:	ldrls	pc, [pc, r3, lsl #2]
   134f4:	b	135d4 <__assert_fail@plt+0x2508>
   134f8:	andeq	r2, r1, r8, asr #25
   134fc:	andeq	r3, r1, ip, asr #32
   13500:			; <UNDEFINED> instruction: 0x00012cbc
   13504:	andeq	r3, r1, r0, asr #1
   13508:	muleq	r1, r8, r0
   1350c:	vldr	d7, [pc, #-532]	; 13300 <__assert_fail@plt+0x2234>
   13510:	vdiv.f64	d10, d10, d7
   13514:	b	12d2c <__assert_fail@plt+0x1c60>
   13518:	vmov	r0, r1, d9
   1351c:	bl	1ba28 <__assert_fail@plt+0xa95c>
   13520:	bl	1b9c8 <__assert_fail@plt+0xa8fc>
   13524:	vmov	d7, r0, r1
   13528:	vadd.f64	d11, d7, d11
   1352c:	vldr	d7, [pc, #-564]	; 13300 <__assert_fail@plt+0x2234>
   13530:	vdiv.f64	d11, d11, d7
   13534:	b	12f14 <__assert_fail@plt+0x1e48>
   13538:	mov	r2, #5
   1353c:	movw	r1, #49548	; 0xc18c
   13540:	movt	r1, #1
   13544:	mov	r0, #0
   13548:	bl	10ec8 <dcgettext@plt>
   1354c:	mov	r2, r0
   13550:	mov	r1, #0
   13554:	vstr	d11, [sp]
   13558:	mov	r0, #1
   1355c:	bl	10f4c <error@plt>
   13560:	mov	r2, #5
   13564:	movw	r1, #49548	; 0xc18c
   13568:	movt	r1, #1
   1356c:	mov	r0, #0
   13570:	bl	10ec8 <dcgettext@plt>
   13574:	mov	r2, r0
   13578:	mov	r1, #0
   1357c:	vstr	d10, [sp]
   13580:	mov	r0, #1
   13584:	bl	10f4c <error@plt>
   13588:	mov	sl, #0
   1358c:	movw	r1, #48596	; 0xbdd4
   13590:	movt	r1, #1
   13594:	mov	r7, sl
   13598:	mov	r9, #6
   1359c:	b	12970 <__assert_fail@plt+0x18a4>
   135a0:	mov	sl, r6
   135a4:	vldr	d8, [pc, #-676]	; 13308 <__assert_fail@plt+0x223c>
   135a8:	b	12448 <__assert_fail@plt+0x137c>
   135ac:	vldr	d11, [pc, #-676]	; 13310 <__assert_fail@plt+0x2244>
   135b0:	b	12f20 <__assert_fail@plt+0x1e54>
   135b4:	vldr	d10, [pc, #-684]	; 13310 <__assert_fail@plt+0x2244>
   135b8:	b	12d14 <__assert_fail@plt+0x1c48>
   135bc:	vldr	d11, [pc, #-692]	; 13310 <__assert_fail@plt+0x2244>
   135c0:	b	12efc <__assert_fail@plt+0x1e30>
   135c4:	mov	sl, #0
   135c8:	mov	r7, sl
   135cc:	mov	r1, sl
   135d0:	b	12970 <__assert_fail@plt+0x18a4>
   135d4:	vldr	d10, [pc, #-716]	; 13310 <__assert_fail@plt+0x2244>
   135d8:	b	12d2c <__assert_fail@plt+0x1c60>
   135dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135e0:	mov	r5, #0
   135e4:	strd	r6, [sp, #8]
   135e8:	mov	r6, r0
   135ec:	mov	r7, r5
   135f0:	strd	r8, [sp, #16]
   135f4:	movw	r9, #61704	; 0xf108
   135f8:	movt	r9, #2
   135fc:	ldr	r2, [r9, #36]	; 0x24
   13600:	mov	r8, #1
   13604:	strd	sl, [sp, #24]
   13608:	movw	sl, #61852	; 0xf19c
   1360c:	movt	sl, #2
   13610:	mov	fp, r5
   13614:	str	lr, [sp, #32]
   13618:	sub	sp, sp, #12
   1361c:	str	r1, [sp, #4]
   13620:	adds	r5, r5, #1
   13624:	ldrb	r3, [r6]
   13628:	adc	r7, r7, #0
   1362c:	cmp	r2, #256	; 0x100
   13630:	beq	1375c <__assert_fail@plt+0x2690>
   13634:	cmp	r3, r2
   13638:	beq	137a8 <__assert_fail@plt+0x26dc>
   1363c:	cmp	r3, #0
   13640:	beq	13660 <__assert_fail@plt+0x2594>
   13644:	mov	r4, r6
   13648:	b	13654 <__assert_fail@plt+0x2588>
   1364c:	cmp	r3, r2
   13650:	beq	13708 <__assert_fail@plt+0x263c>
   13654:	ldrb	r3, [r4, #1]!
   13658:	cmp	r3, #0
   1365c:	bne	1364c <__assert_fail@plt+0x2580>
   13660:	mov	r3, r7
   13664:	mov	r2, r5
   13668:	mov	r0, r6
   1366c:	bl	12120 <__assert_fail@plt+0x1054>
   13670:	ldr	r3, [sp, #4]
   13674:	cmp	r0, #0
   13678:	moveq	r8, #0
   1367c:	cmp	r3, #0
   13680:	beq	136b0 <__assert_fail@plt+0x25e4>
   13684:	movw	r3, #61852	; 0xf19c
   13688:	movt	r3, #2
   1368c:	ldrb	r1, [r9, #40]	; 0x28
   13690:	ldr	r0, [r3]
   13694:	ldr	r3, [r0, #20]
   13698:	ldr	r2, [r0, #24]
   1369c:	cmp	r3, r2
   136a0:	addcc	r2, r3, #1
   136a4:	strcc	r2, [r0, #20]
   136a8:	strbcc	r1, [r3]
   136ac:	bcs	137c4 <__assert_fail@plt+0x26f8>
   136b0:	mov	r0, r8
   136b4:	add	sp, sp, #12
   136b8:	ldrd	r4, [sp]
   136bc:	ldrd	r6, [sp, #8]
   136c0:	ldrd	r8, [sp, #16]
   136c4:	ldrd	sl, [sp, #24]
   136c8:	add	sp, sp, #32
   136cc:	pop	{pc}		; (ldr pc, [sp], #4)
   136d0:	ldrb	r3, [r4, #1]!
   136d4:	cmp	r3, #0
   136d8:	sxth	r2, r3
   136dc:	beq	13660 <__assert_fail@plt+0x2594>
   136e0:	lsl	r2, r2, #1
   136e4:	ldrh	r2, [r1, r2]
   136e8:	cmp	r3, #10
   136ec:	movne	r3, r2
   136f0:	orreq	r3, r2, #1
   136f4:	tst	r3, #1
   136f8:	beq	136d0 <__assert_fail@plt+0x2604>
   136fc:	ldrb	r3, [r4]
   13700:	cmp	r3, #0
   13704:	beq	13660 <__assert_fail@plt+0x2594>
   13708:	mov	r2, r5
   1370c:	mov	r3, r7
   13710:	strb	fp, [r4]
   13714:	mov	r0, r6
   13718:	bl	12120 <__assert_fail@plt+0x1054>
   1371c:	ldr	r3, [sl]
   13720:	cmp	r0, #0
   13724:	moveq	r8, #0
   13728:	ldr	r2, [r9, #36]	; 0x24
   1372c:	ldr	r0, [r3, #20]
   13730:	ldr	ip, [r3, #24]
   13734:	cmp	r2, #256	; 0x100
   13738:	movne	r1, r2
   1373c:	moveq	r1, #32
   13740:	cmp	r0, ip
   13744:	addcc	ip, r0, #1
   13748:	strcc	ip, [r3, #20]
   1374c:	strbcc	r1, [r0]
   13750:	bcs	137b0 <__assert_fail@plt+0x26e4>
   13754:	add	r6, r4, #1
   13758:	b	13620 <__assert_fail@plt+0x2554>
   1375c:	cmp	r3, #0
   13760:	str	r3, [sp]
   13764:	beq	13660 <__assert_fail@plt+0x2594>
   13768:	bl	10fa0 <__ctype_b_loc@plt>
   1376c:	mov	r4, r6
   13770:	ldr	r1, [r0]
   13774:	ldr	r3, [sp]
   13778:	b	13788 <__assert_fail@plt+0x26bc>
   1377c:	ldrb	r3, [r4, #1]!
   13780:	cmp	r3, #0
   13784:	beq	13660 <__assert_fail@plt+0x2594>
   13788:	sxth	r2, r3
   1378c:	lsl	r0, r2, #1
   13790:	ldrh	r0, [r1, r0]
   13794:	cmp	r3, #10
   13798:	orreq	r0, r0, #1
   1379c:	tst	r0, #1
   137a0:	bne	1377c <__assert_fail@plt+0x26b0>
   137a4:	b	136e0 <__assert_fail@plt+0x2614>
   137a8:	mov	r4, r6
   137ac:	b	13700 <__assert_fail@plt+0x2634>
   137b0:	uxtb	r1, r1
   137b4:	mov	r0, r3
   137b8:	bl	11030 <__overflow@plt>
   137bc:	ldr	r2, [r9, #36]	; 0x24
   137c0:	b	13754 <__assert_fail@plt+0x2688>
   137c4:	bl	11030 <__overflow@plt>
   137c8:	b	136b0 <__assert_fail@plt+0x25e4>
   137cc:	subs	r4, r0, #0
   137d0:	str	r7, [sp, #-8]!
   137d4:	str	lr, [sp, #4]
   137d8:	sub	sp, sp, #88	; 0x58
   137dc:	beq	13824 <__assert_fail@plt+0x2758>
   137e0:	movw	r3, #61840	; 0xf190
   137e4:	movt	r3, #2
   137e8:	ldr	r5, [r3]
   137ec:	mov	r2, #5
   137f0:	movw	r1, #49788	; 0xc27c
   137f4:	movt	r1, #1
   137f8:	mov	r0, #0
   137fc:	bl	10ec8 <dcgettext@plt>
   13800:	movw	r3, #61964	; 0xf20c
   13804:	movt	r3, #2
   13808:	mov	r2, r0
   1380c:	mov	r1, #1
   13810:	ldr	r3, [r3]
   13814:	mov	r0, r5
   13818:	bl	1100c <__fprintf_chk@plt>
   1381c:	mov	r0, r4
   13820:	bl	10fac <exit@plt>
   13824:	mov	r2, #5
   13828:	movw	r1, #49828	; 0xc2a4
   1382c:	movt	r1, #1
   13830:	movw	r6, #61964	; 0xf20c
   13834:	movt	r6, #2
   13838:	movw	r5, #61852	; 0xf19c
   1383c:	movt	r5, #2
   13840:	bl	10ec8 <dcgettext@plt>
   13844:	mov	r1, r0
   13848:	mov	r0, #1
   1384c:	ldr	r2, [r6]
   13850:	bl	10ff4 <__printf_chk@plt>
   13854:	mov	r2, #5
   13858:	movw	r1, #49864	; 0xc2c8
   1385c:	movt	r1, #1
   13860:	mov	r0, r4
   13864:	bl	10ec8 <dcgettext@plt>
   13868:	ldr	r1, [r5]
   1386c:	bl	10e20 <fputs_unlocked@plt>
   13870:	mov	r2, #5
   13874:	movw	r1, #49944	; 0xc318
   13878:	movt	r1, #1
   1387c:	mov	r0, r4
   13880:	bl	10ec8 <dcgettext@plt>
   13884:	ldr	r1, [r5]
   13888:	bl	10e20 <fputs_unlocked@plt>
   1388c:	mov	r2, #5
   13890:	movw	r1, #50020	; 0xc364
   13894:	movt	r1, #1
   13898:	mov	r0, r4
   1389c:	bl	10ec8 <dcgettext@plt>
   138a0:	ldr	r1, [r5]
   138a4:	bl	10e20 <fputs_unlocked@plt>
   138a8:	mov	r2, #5
   138ac:	movw	r1, #50080	; 0xc3a0
   138b0:	movt	r1, #1
   138b4:	mov	r0, r4
   138b8:	bl	10ec8 <dcgettext@plt>
   138bc:	ldr	r1, [r5]
   138c0:	bl	10e20 <fputs_unlocked@plt>
   138c4:	mov	r2, #5
   138c8:	movw	r1, #50152	; 0xc3e8
   138cc:	movt	r1, #1
   138d0:	mov	r0, r4
   138d4:	bl	10ec8 <dcgettext@plt>
   138d8:	ldr	r1, [r5]
   138dc:	bl	10e20 <fputs_unlocked@plt>
   138e0:	mov	r2, #5
   138e4:	movw	r1, #50276	; 0xc464
   138e8:	movt	r1, #1
   138ec:	mov	r0, r4
   138f0:	bl	10ec8 <dcgettext@plt>
   138f4:	ldr	r1, [r5]
   138f8:	bl	10e20 <fputs_unlocked@plt>
   138fc:	mov	r2, #5
   13900:	movw	r1, #50396	; 0xc4dc
   13904:	movt	r1, #1
   13908:	mov	r0, r4
   1390c:	bl	10ec8 <dcgettext@plt>
   13910:	ldr	r1, [r5]
   13914:	bl	10e20 <fputs_unlocked@plt>
   13918:	mov	r2, #5
   1391c:	movw	r1, #50516	; 0xc554
   13920:	movt	r1, #1
   13924:	mov	r0, r4
   13928:	bl	10ec8 <dcgettext@plt>
   1392c:	ldr	r1, [r5]
   13930:	bl	10e20 <fputs_unlocked@plt>
   13934:	mov	r2, #5
   13938:	movw	r1, #50596	; 0xc5a4
   1393c:	movt	r1, #1
   13940:	mov	r0, r4
   13944:	bl	10ec8 <dcgettext@plt>
   13948:	ldr	r1, [r5]
   1394c:	bl	10e20 <fputs_unlocked@plt>
   13950:	mov	r2, #5
   13954:	movw	r1, #50752	; 0xc640
   13958:	movt	r1, #1
   1395c:	mov	r0, r4
   13960:	bl	10ec8 <dcgettext@plt>
   13964:	ldr	r1, [r5]
   13968:	bl	10e20 <fputs_unlocked@plt>
   1396c:	mov	r2, #5
   13970:	movw	r1, #50888	; 0xc6c8
   13974:	movt	r1, #1
   13978:	mov	r0, r4
   1397c:	bl	10ec8 <dcgettext@plt>
   13980:	ldr	r1, [r5]
   13984:	bl	10e20 <fputs_unlocked@plt>
   13988:	mov	r2, #5
   1398c:	movw	r1, #51020	; 0xc74c
   13990:	movt	r1, #1
   13994:	mov	r0, r4
   13998:	bl	10ec8 <dcgettext@plt>
   1399c:	ldr	r1, [r5]
   139a0:	bl	10e20 <fputs_unlocked@plt>
   139a4:	mov	r2, #5
   139a8:	movw	r1, #51344	; 0xc890
   139ac:	movt	r1, #1
   139b0:	mov	r0, r4
   139b4:	bl	10ec8 <dcgettext@plt>
   139b8:	ldr	r1, [r5]
   139bc:	bl	10e20 <fputs_unlocked@plt>
   139c0:	mov	r2, #5
   139c4:	movw	r1, #51500	; 0xc92c
   139c8:	movt	r1, #1
   139cc:	mov	r0, r4
   139d0:	bl	10ec8 <dcgettext@plt>
   139d4:	ldr	r1, [r5]
   139d8:	bl	10e20 <fputs_unlocked@plt>
   139dc:	mov	r2, #5
   139e0:	movw	r1, #51624	; 0xc9a8
   139e4:	movt	r1, #1
   139e8:	mov	r0, r4
   139ec:	bl	10ec8 <dcgettext@plt>
   139f0:	ldr	r1, [r5]
   139f4:	bl	10e20 <fputs_unlocked@plt>
   139f8:	mov	r2, #5
   139fc:	movw	r1, #51700	; 0xc9f4
   13a00:	movt	r1, #1
   13a04:	mov	r0, r4
   13a08:	bl	10ec8 <dcgettext@plt>
   13a0c:	ldr	r1, [r5]
   13a10:	bl	10e20 <fputs_unlocked@plt>
   13a14:	mov	r2, #5
   13a18:	movw	r1, #51772	; 0xca3c
   13a1c:	movt	r1, #1
   13a20:	mov	r0, r4
   13a24:	bl	10ec8 <dcgettext@plt>
   13a28:	ldr	r1, [r5]
   13a2c:	bl	10e20 <fputs_unlocked@plt>
   13a30:	mov	r2, #5
   13a34:	movw	r1, #51836	; 0xca7c
   13a38:	movt	r1, #1
   13a3c:	mov	r0, r4
   13a40:	bl	10ec8 <dcgettext@plt>
   13a44:	ldr	r1, [r5]
   13a48:	bl	10e20 <fputs_unlocked@plt>
   13a4c:	mov	r2, #5
   13a50:	movw	r1, #51884	; 0xcaac
   13a54:	movt	r1, #1
   13a58:	mov	r0, r4
   13a5c:	bl	10ec8 <dcgettext@plt>
   13a60:	ldr	r1, [r5]
   13a64:	bl	10e20 <fputs_unlocked@plt>
   13a68:	mov	r2, #5
   13a6c:	movw	r1, #51940	; 0xcae4
   13a70:	movt	r1, #1
   13a74:	mov	r0, r4
   13a78:	bl	10ec8 <dcgettext@plt>
   13a7c:	ldr	r1, [r5]
   13a80:	bl	10e20 <fputs_unlocked@plt>
   13a84:	mov	r2, #5
   13a88:	movw	r1, #51956	; 0xcaf4
   13a8c:	movt	r1, #1
   13a90:	mov	r0, r4
   13a94:	bl	10ec8 <dcgettext@plt>
   13a98:	ldr	r1, [r5]
   13a9c:	bl	10e20 <fputs_unlocked@plt>
   13aa0:	mov	r2, #5
   13aa4:	movw	r1, #52028	; 0xcb3c
   13aa8:	movt	r1, #1
   13aac:	mov	r0, r4
   13ab0:	bl	10ec8 <dcgettext@plt>
   13ab4:	ldr	r1, [r5]
   13ab8:	bl	10e20 <fputs_unlocked@plt>
   13abc:	mov	r2, #5
   13ac0:	movw	r1, #52196	; 0xcbe4
   13ac4:	movt	r1, #1
   13ac8:	mov	r0, r4
   13acc:	bl	10ec8 <dcgettext@plt>
   13ad0:	ldr	r1, [r5]
   13ad4:	bl	10e20 <fputs_unlocked@plt>
   13ad8:	mov	r2, #5
   13adc:	movw	r1, #52324	; 0xcc64
   13ae0:	movt	r1, #1
   13ae4:	mov	r0, r4
   13ae8:	bl	10ec8 <dcgettext@plt>
   13aec:	ldr	r1, [r5]
   13af0:	bl	10e20 <fputs_unlocked@plt>
   13af4:	mov	r2, #5
   13af8:	movw	r1, #52452	; 0xcce4
   13afc:	movt	r1, #1
   13b00:	mov	r0, r4
   13b04:	bl	10ec8 <dcgettext@plt>
   13b08:	ldr	r1, [r5]
   13b0c:	bl	10e20 <fputs_unlocked@plt>
   13b10:	mov	r2, #5
   13b14:	movw	r1, #52580	; 0xcd64
   13b18:	movt	r1, #1
   13b1c:	mov	r0, r4
   13b20:	bl	10ec8 <dcgettext@plt>
   13b24:	ldr	r1, [r5]
   13b28:	bl	10e20 <fputs_unlocked@plt>
   13b2c:	mov	r2, #5
   13b30:	movw	r1, #52856	; 0xce78
   13b34:	movt	r1, #1
   13b38:	mov	r0, r4
   13b3c:	bl	10ec8 <dcgettext@plt>
   13b40:	ldr	r1, [r5]
   13b44:	bl	10e20 <fputs_unlocked@plt>
   13b48:	mov	r2, #5
   13b4c:	movw	r1, #53228	; 0xcfec
   13b50:	movt	r1, #1
   13b54:	mov	r0, r4
   13b58:	bl	10ec8 <dcgettext@plt>
   13b5c:	mov	r1, r0
   13b60:	mov	r0, #1
   13b64:	ldr	r2, [r6]
   13b68:	bl	10ff4 <__printf_chk@plt>
   13b6c:	mov	r2, #5
   13b70:	movw	r1, #53640	; 0xd188
   13b74:	movt	r1, #1
   13b78:	mov	r0, r4
   13b7c:	bl	10ec8 <dcgettext@plt>
   13b80:	ldr	ip, [r6]
   13b84:	mov	r1, r0
   13b88:	mov	r0, #1
   13b8c:	mov	r3, ip
   13b90:	mov	r2, ip
   13b94:	str	ip, [sp]
   13b98:	str	ip, [sp, #4]
   13b9c:	str	ip, [sp, #8]
   13ba0:	str	ip, [sp, #12]
   13ba4:	str	ip, [sp, #16]
   13ba8:	str	ip, [sp, #20]
   13bac:	str	ip, [sp, #24]
   13bb0:	bl	10ff4 <__printf_chk@plt>
   13bb4:	movw	r0, #47904	; 0xbb20
   13bb8:	movt	r0, #1
   13bbc:	ldr	ip, [r0, #124]	; 0x7c
   13bc0:	ldrd	r2, [r0, #132]	; 0x84
   13bc4:	ldr	r6, [r0, #128]	; 0x80
   13bc8:	subs	r1, ip, #0
   13bcc:	str	ip, [sp, #32]
   13bd0:	ldrd	r8, [r0, #140]	; 0x8c
   13bd4:	strd	r2, [sp, #40]	; 0x28
   13bd8:	ldrd	r2, [r0, #148]	; 0x94
   13bdc:	str	r6, [sp, #36]	; 0x24
   13be0:	ldrd	r6, [r0, #156]	; 0x9c
   13be4:	strd	r8, [sp, #48]	; 0x30
   13be8:	ldrd	r8, [r0, #164]	; 0xa4
   13bec:	strd	r2, [sp, #56]	; 0x38
   13bf0:	ldrd	r2, [r0, #172]	; 0xac
   13bf4:	strd	r6, [sp, #64]	; 0x40
   13bf8:	movwne	r7, #49780	; 0xc274
   13bfc:	add	r6, sp, #32
   13c00:	movtne	r7, #1
   13c04:	strd	r8, [sp, #72]	; 0x48
   13c08:	strd	r2, [sp, #80]	; 0x50
   13c0c:	bne	13d04 <__assert_fail@plt+0x2c38>
   13c10:	ldr	r6, [r6, #4]
   13c14:	movw	r1, #54088	; 0xd348
   13c18:	movt	r1, #1
   13c1c:	mov	r2, #5
   13c20:	cmp	r6, #0
   13c24:	beq	13d18 <__assert_fail@plt+0x2c4c>
   13c28:	mov	r0, #0
   13c2c:	bl	10ec8 <dcgettext@plt>
   13c30:	mov	r1, r0
   13c34:	movw	r3, #54112	; 0xd360
   13c38:	movt	r3, #1
   13c3c:	movw	r2, #54152	; 0xd388
   13c40:	movt	r2, #1
   13c44:	mov	r0, #1
   13c48:	bl	10ff4 <__printf_chk@plt>
   13c4c:	mov	r1, #0
   13c50:	mov	r0, #5
   13c54:	bl	1103c <setlocale@plt>
   13c58:	cmp	r0, #0
   13c5c:	movweq	r7, #49780	; 0xc274
   13c60:	movteq	r7, #1
   13c64:	beq	13c88 <__assert_fail@plt+0x2bbc>
   13c68:	movw	r1, #54168	; 0xd398
   13c6c:	movt	r1, #1
   13c70:	mov	r2, #3
   13c74:	movw	r7, #49780	; 0xc274
   13c78:	movt	r7, #1
   13c7c:	bl	1109c <strncmp@plt>
   13c80:	cmp	r0, #0
   13c84:	bne	13dd0 <__assert_fail@plt+0x2d04>
   13c88:	mov	r2, #5
   13c8c:	movw	r1, #54244	; 0xd3e4
   13c90:	movt	r1, #1
   13c94:	mov	r0, #0
   13c98:	bl	10ec8 <dcgettext@plt>
   13c9c:	mov	r1, r0
   13ca0:	movw	r3, #49780	; 0xc274
   13ca4:	movt	r3, #1
   13ca8:	movw	r2, #54112	; 0xd360
   13cac:	movt	r2, #1
   13cb0:	mov	r0, #1
   13cb4:	bl	10ff4 <__printf_chk@plt>
   13cb8:	mov	r2, #5
   13cbc:	movw	r1, #54272	; 0xd400
   13cc0:	movt	r1, #1
   13cc4:	mov	r0, #0
   13cc8:	bl	10ec8 <dcgettext@plt>
   13ccc:	movw	r2, #55264	; 0xd7e0
   13cd0:	movt	r2, #1
   13cd4:	cmp	r6, r7
   13cd8:	movw	r3, #52576	; 0xcd60
   13cdc:	movt	r3, #1
   13ce0:	mov	r1, r0
   13ce4:	moveq	r3, r2
   13ce8:	mov	r2, r6
   13cec:	mov	r0, #1
   13cf0:	bl	10ff4 <__printf_chk@plt>
   13cf4:	b	1381c <__assert_fail@plt+0x2750>
   13cf8:	ldr	r1, [r6, #8]!
   13cfc:	cmp	r1, #0
   13d00:	beq	13c10 <__assert_fail@plt+0x2b44>
   13d04:	mov	r0, r7
   13d08:	bl	10e38 <strcmp@plt>
   13d0c:	cmp	r0, #0
   13d10:	bne	13cf8 <__assert_fail@plt+0x2c2c>
   13d14:	b	13c10 <__assert_fail@plt+0x2b44>
   13d18:	mov	r0, r6
   13d1c:	bl	10ec8 <dcgettext@plt>
   13d20:	mov	r1, r0
   13d24:	movw	r3, #54112	; 0xd360
   13d28:	movt	r3, #1
   13d2c:	movw	r2, #54152	; 0xd388
   13d30:	movt	r2, #1
   13d34:	mov	r0, #1
   13d38:	bl	10ff4 <__printf_chk@plt>
   13d3c:	mov	r1, r6
   13d40:	mov	r0, #5
   13d44:	bl	1103c <setlocale@plt>
   13d48:	cmp	r0, #0
   13d4c:	beq	13d68 <__assert_fail@plt+0x2c9c>
   13d50:	movw	r1, #54168	; 0xd398
   13d54:	movt	r1, #1
   13d58:	mov	r2, #3
   13d5c:	bl	1109c <strncmp@plt>
   13d60:	cmp	r0, #0
   13d64:	bne	13dc4 <__assert_fail@plt+0x2cf8>
   13d68:	mov	r2, #5
   13d6c:	movw	r1, #54244	; 0xd3e4
   13d70:	movt	r1, #1
   13d74:	mov	r0, #0
   13d78:	bl	10ec8 <dcgettext@plt>
   13d7c:	mov	r1, r0
   13d80:	movw	r3, #49780	; 0xc274
   13d84:	movt	r3, #1
   13d88:	movw	r2, #54112	; 0xd360
   13d8c:	movt	r2, #1
   13d90:	mov	r0, #1
   13d94:	bl	10ff4 <__printf_chk@plt>
   13d98:	movw	r1, #54272	; 0xd400
   13d9c:	movt	r1, #1
   13da0:	mov	r2, #5
   13da4:	mov	r0, #0
   13da8:	bl	10ec8 <dcgettext@plt>
   13dac:	movw	r6, #49780	; 0xc274
   13db0:	movt	r6, #1
   13db4:	movw	r3, #55264	; 0xd7e0
   13db8:	movt	r3, #1
   13dbc:	mov	r1, r0
   13dc0:	b	13ce8 <__assert_fail@plt+0x2c1c>
   13dc4:	movw	r7, #49780	; 0xc274
   13dc8:	movt	r7, #1
   13dcc:	mov	r6, r7
   13dd0:	mov	r2, #5
   13dd4:	movw	r1, #54172	; 0xd39c
   13dd8:	movt	r1, #1
   13ddc:	mov	r0, #0
   13de0:	bl	10ec8 <dcgettext@plt>
   13de4:	ldr	r1, [r5]
   13de8:	bl	10e20 <fputs_unlocked@plt>
   13dec:	b	13c88 <__assert_fail@plt+0x2bbc>
   13df0:	ldr	r2, [r0]
   13df4:	ldr	r3, [r1]
   13df8:	cmp	r2, r3
   13dfc:	blt	13e0c <__assert_fail@plt+0x2d40>
   13e00:	movgt	r0, #1
   13e04:	movle	r0, #0
   13e08:	bx	lr
   13e0c:	mvn	r0, #0
   13e10:	bx	lr
   13e14:	ands	r3, r1, #1
   13e18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e1c:	mov	r5, r0
   13e20:	strd	r6, [sp, #8]
   13e24:	strd	r8, [sp, #16]
   13e28:	strd	sl, [sp, #24]
   13e2c:	str	lr, [sp, #32]
   13e30:	sub	sp, sp, #44	; 0x2c
   13e34:	str	r3, [sp, #24]
   13e38:	str	r1, [sp, #28]
   13e3c:	beq	13e68 <__assert_fail@plt+0x2d9c>
   13e40:	movw	r1, #55796	; 0xd9f4
   13e44:	movt	r1, #1
   13e48:	bl	10e38 <strcmp@plt>
   13e4c:	cmp	r0, #0
   13e50:	bne	14354 <__assert_fail@plt+0x3288>
   13e54:	add	r5, r5, #1
   13e58:	mov	r6, #1
   13e5c:	mov	r7, #0
   13e60:	mov	r9, #1
   13e64:	b	13e74 <__assert_fail@plt+0x2da8>
   13e68:	mov	r9, r3
   13e6c:	mov	r6, #0
   13e70:	mov	r7, #0
   13e74:	mov	r8, #0
   13e78:	movw	fp, #61940	; 0xf1f4
   13e7c:	movt	fp, #2
   13e80:	mov	r0, #1
   13e84:	mov	r1, #0
   13e88:	mov	r3, r8
   13e8c:	mov	sl, r9
   13e90:	strd	r0, [sp]
   13e94:	mov	r1, r5
   13e98:	ldrb	r4, [r5], #1
   13e9c:	cmp	r4, #45	; 0x2d
   13ea0:	beq	13f74 <__assert_fail@plt+0x2ea8>
   13ea4:	cmp	r4, #44	; 0x2c
   13ea8:	str	r1, [sp, #8]
   13eac:	beq	13ee0 <__assert_fail@plt+0x2e14>
   13eb0:	str	r3, [sp, #12]
   13eb4:	bl	10fa0 <__ctype_b_loc@plt>
   13eb8:	ldr	r0, [r0]
   13ebc:	lsl	r2, r4, #1
   13ec0:	cmp	r4, #0
   13ec4:	ldr	r1, [sp, #8]
   13ec8:	ldr	r3, [sp, #12]
   13ecc:	ldrh	r2, [r0, r2]
   13ed0:	moveq	r2, #1
   13ed4:	andne	r2, r2, #1
   13ed8:	cmp	r2, #0
   13edc:	beq	14178 <__assert_fail@plt+0x30ac>
   13ee0:	cmp	sl, #0
   13ee4:	beq	13fac <__assert_fail@plt+0x2ee0>
   13ee8:	orr	r9, r9, r3
   13eec:	tst	r9, #255	; 0xff
   13ef0:	bne	14124 <__assert_fail@plt+0x3058>
   13ef4:	ldr	r3, [sp, #24]
   13ef8:	cmp	r3, #0
   13efc:	beq	144b0 <__assert_fail@plt+0x33e4>
   13f00:	mov	r2, #1
   13f04:	mov	r3, #0
   13f08:	strd	r2, [sp]
   13f0c:	ldr	r3, [fp]
   13f10:	ldmib	fp, {r0, r2}
   13f14:	cmp	r3, r2
   13f18:	beq	1425c <__assert_fail@plt+0x3190>
   13f1c:	lsl	r2, r3, #4
   13f20:	mvn	r6, #0
   13f24:	add	r3, r3, #1
   13f28:	mvn	r7, #0
   13f2c:	ldrd	r8, [sp]
   13f30:	add	r1, r0, r2
   13f34:	strd	r8, [r0, r2]
   13f38:	str	r3, [fp]
   13f3c:	strd	r6, [r1, #8]
   13f40:	ldrb	r7, [r5, #-1]
   13f44:	cmp	r7, #0
   13f48:	beq	13fe8 <__assert_fail@plt+0x2f1c>
   13f4c:	mov	r1, r5
   13f50:	ldrb	r4, [r5], #1
   13f54:	mov	r8, #0
   13f58:	mov	r6, #0
   13f5c:	mov	r7, #0
   13f60:	mov	sl, r8
   13f64:	mov	r3, r8
   13f68:	mov	r9, r8
   13f6c:	cmp	r4, #45	; 0x2d
   13f70:	bne	13ea4 <__assert_fail@plt+0x2dd8>
   13f74:	cmp	sl, #0
   13f78:	bne	144c0 <__assert_fail@plt+0x33f4>
   13f7c:	orrs	r2, r6, r7
   13f80:	movne	r8, #0
   13f84:	andeq	r8, r9, #1
   13f88:	cmp	r8, #0
   13f8c:	bne	14448 <__assert_fail@plt+0x337c>
   13f90:	cmp	r9, #0
   13f94:	beq	14158 <__assert_fail@plt+0x308c>
   13f98:	mov	sl, r9
   13f9c:	strd	r6, [sp]
   13fa0:	mov	r6, #0
   13fa4:	mov	r7, #0
   13fa8:	b	13e94 <__assert_fail@plt+0x2dc8>
   13fac:	orrs	r3, r6, r7
   13fb0:	beq	14448 <__assert_fail@plt+0x337c>
   13fb4:	ldr	r3, [fp]
   13fb8:	ldmib	fp, {r0, r2}
   13fbc:	cmp	r3, r2
   13fc0:	beq	1422c <__assert_fail@plt+0x3160>
   13fc4:	lsl	r2, r3, #4
   13fc8:	add	r3, r3, #1
   13fcc:	add	r1, r0, r2
   13fd0:	strd	r6, [r0, r2]
   13fd4:	str	r3, [fp]
   13fd8:	strd	r6, [r1, #8]
   13fdc:	ldrb	r7, [r5, #-1]
   13fe0:	cmp	r7, #0
   13fe4:	bne	13f4c <__assert_fail@plt+0x2e80>
   13fe8:	cmp	r3, #0
   13fec:	mov	r1, r3
   13ff0:	beq	145d8 <__assert_fail@plt+0x350c>
   13ff4:	movw	r3, #15856	; 0x3df0
   13ff8:	movt	r3, #1
   13ffc:	mov	r2, #16
   14000:	bl	11078 <qsort@plt>
   14004:	ldr	sl, [fp]
   14008:	ldr	r9, [fp, #4]
   1400c:	cmp	sl, #0
   14010:	beq	140c4 <__assert_fail@plt+0x2ff8>
   14014:	add	r7, r7, #1
   14018:	mov	r8, #16
   1401c:	cmp	r7, sl
   14020:	mov	r1, r9
   14024:	bcs	14284 <__assert_fail@plt+0x31b8>
   14028:	sub	r6, r8, #16
   1402c:	ldrd	r4, [r1, r8]
   14030:	add	r0, r1, r8
   14034:	add	ip, r1, r6
   14038:	add	r9, r8, #16
   1403c:	ldrd	r2, [ip, #8]
   14040:	cmp	r3, r5
   14044:	cmpeq	r2, r4
   14048:	movwcs	lr, #65535	; 0xffff
   1404c:	movtcs	lr, #4095	; 0xfff
   14050:	subcs	lr, lr, r7
   14054:	strcs	lr, [sp, #8]
   14058:	bcs	14080 <__assert_fail@plt+0x2fb4>
   1405c:	b	14274 <__assert_fail@plt+0x31a8>
   14060:	ldr	r1, [fp, #4]
   14064:	add	ip, r1, r6
   14068:	ldrd	r4, [r1, r8]
   1406c:	add	r0, r1, r8
   14070:	ldrd	r2, [ip, #8]
   14074:	cmp	r5, r3
   14078:	cmpeq	r4, r2
   1407c:	bhi	14274 <__assert_fail@plt+0x31a8>
   14080:	ldrd	r4, [r0, #8]
   14084:	add	r1, r1, r9
   14088:	cmp	r5, r3
   1408c:	cmpeq	r4, r2
   14090:	movcc	r5, r3
   14094:	ldr	r3, [sp, #8]
   14098:	movcc	r4, r2
   1409c:	strd	r4, [ip, #8]
   140a0:	add	r2, sl, r3
   140a4:	lsl	r2, r2, #4
   140a8:	bl	10e68 <memmove@plt>
   140ac:	ldr	sl, [fp]
   140b0:	sub	sl, sl, #1
   140b4:	cmp	sl, r7
   140b8:	str	sl, [fp]
   140bc:	bhi	14060 <__assert_fail@plt+0x2f94>
   140c0:	ldr	r9, [fp, #4]
   140c4:	ldr	r3, [sp, #28]
   140c8:	tst	r3, #2
   140cc:	bne	14294 <__assert_fail@plt+0x31c8>
   140d0:	add	sl, sl, #1
   140d4:	mov	r0, r9
   140d8:	lsl	r1, sl, #4
   140dc:	mvn	r4, #0
   140e0:	mvn	r5, #0
   140e4:	str	sl, [fp]
   140e8:	bl	197a8 <__assert_fail@plt+0x86dc>
   140ec:	ldr	r3, [fp]
   140f0:	str	r0, [fp, #4]
   140f4:	sub	r3, r3, #-268435455	; 0xf0000001
   140f8:	lsl	r3, r3, #4
   140fc:	add	r2, r0, r3
   14100:	strd	r4, [r2, #8]
   14104:	strd	r4, [r0, r3]
   14108:	add	sp, sp, #44	; 0x2c
   1410c:	ldrd	r4, [sp]
   14110:	ldrd	r6, [sp, #8]
   14114:	ldrd	r8, [sp, #16]
   14118:	ldrd	sl, [sp, #24]
   1411c:	add	sp, sp, #32
   14120:	pop	{pc}		; (ldr pc, [sp], #4)
   14124:	cmp	r3, #0
   14128:	beq	13f0c <__assert_fail@plt+0x2e40>
   1412c:	ldrd	r2, [sp]
   14130:	cmp	r3, r7
   14134:	cmpeq	r2, r6
   14138:	bhi	14484 <__assert_fail@plt+0x33b8>
   1413c:	ldr	r3, [fp]
   14140:	ldmib	fp, {r0, r2}
   14144:	cmp	r3, r2
   14148:	beq	14244 <__assert_fail@plt+0x3178>
   1414c:	lsl	r2, r3, #4
   14150:	add	r3, r3, #1
   14154:	b	13f2c <__assert_fail@plt+0x2e60>
   14158:	mov	r0, #1
   1415c:	mov	r1, #0
   14160:	mov	r8, r9
   14164:	mov	r6, #0
   14168:	mov	r7, #0
   1416c:	mov	sl, #1
   14170:	strd	r0, [sp]
   14174:	b	13e94 <__assert_fail@plt+0x2dc8>
   14178:	sub	r4, r4, #48	; 0x30
   1417c:	cmp	r4, #9
   14180:	bhi	1458c <__assert_fail@plt+0x34c0>
   14184:	cmp	r8, #0
   14188:	beq	14220 <__assert_fail@plt+0x3154>
   1418c:	ldr	r8, [fp, #12]
   14190:	cmp	r8, #0
   14194:	beq	14220 <__assert_fail@plt+0x3154>
   14198:	add	r1, pc, #992	; 0x3e0
   1419c:	ldrd	r0, [r1]
   141a0:	cmp	sl, #0
   141a4:	moveq	r9, #1
   141a8:	movne	r3, sl
   141ac:	cmp	r7, r1
   141b0:	cmpeq	r6, r0
   141b4:	bhi	144e4 <__assert_fail@plt+0x3418>
   141b8:	lsl	r1, r7, #2
   141bc:	lsl	r2, r6, #2
   141c0:	orr	r1, r1, r6, lsr #30
   141c4:	adds	r2, r2, r6
   141c8:	adc	r1, r1, r7
   141cc:	adds	r2, r2, r2
   141d0:	str	r2, [sp, #16]
   141d4:	adc	r2, r1, r1
   141d8:	str	r2, [sp, #20]
   141dc:	ldrd	r0, [sp, #16]
   141e0:	adds	r0, r0, r4
   141e4:	adc	r1, r1, r4, asr #31
   141e8:	cmp	r1, r7
   141ec:	and	r2, r0, r1
   141f0:	cmpeq	r0, r6
   141f4:	movcc	ip, #1
   141f8:	movcs	ip, #0
   141fc:	cmn	r2, #1
   14200:	movne	r2, #0
   14204:	moveq	r2, #1
   14208:	orrs	r2, ip, r2
   1420c:	bne	144e4 <__assert_fail@plt+0x3418>
   14210:	mov	r6, r0
   14214:	mov	r7, r1
   14218:	mov	r8, #1
   1421c:	b	13e94 <__assert_fail@plt+0x2dc8>
   14220:	mov	r8, r1
   14224:	str	r1, [fp, #12]
   14228:	b	14198 <__assert_fail@plt+0x30cc>
   1422c:	mov	r2, #16
   14230:	ldr	r1, [pc, #848]	; 14588 <__assert_fail@plt+0x34bc>
   14234:	bl	19990 <__assert_fail@plt+0x88c4>
   14238:	str	r0, [fp, #4]
   1423c:	ldr	r3, [fp]
   14240:	b	13fc4 <__assert_fail@plt+0x2ef8>
   14244:	mov	r2, #16
   14248:	ldr	r1, [pc, #824]	; 14588 <__assert_fail@plt+0x34bc>
   1424c:	bl	19990 <__assert_fail@plt+0x88c4>
   14250:	str	r0, [fp, #4]
   14254:	ldr	r3, [fp]
   14258:	b	1414c <__assert_fail@plt+0x3080>
   1425c:	mov	r2, #16
   14260:	ldr	r1, [pc, #800]	; 14588 <__assert_fail@plt+0x34bc>
   14264:	bl	19990 <__assert_fail@plt+0x88c4>
   14268:	str	r0, [fp, #4]
   1426c:	ldr	r3, [fp]
   14270:	b	13f1c <__assert_fail@plt+0x2e50>
   14274:	add	r7, r7, #1
   14278:	mov	r8, r9
   1427c:	cmp	r7, sl
   14280:	bcc	14028 <__assert_fail@plt+0x2f5c>
   14284:	ldr	r3, [sp, #28]
   14288:	mov	r9, r1
   1428c:	tst	r3, #2
   14290:	beq	140d0 <__assert_fail@plt+0x3004>
   14294:	ldrd	r4, [r9]
   14298:	mov	r0, #0
   1429c:	str	r0, [fp]
   142a0:	str	r0, [fp, #4]
   142a4:	str	r0, [fp, #8]
   142a8:	cmp	r5, #0
   142ac:	cmpeq	r4, #1
   142b0:	bhi	143ec <__assert_fail@plt+0x3320>
   142b4:	cmp	sl, #1
   142b8:	bls	1436c <__assert_fail@plt+0x32a0>
   142bc:	add	r5, r9, sl, lsl #4
   142c0:	ldr	r8, [pc, #704]	; 14588 <__assert_fail@plt+0x34bc>
   142c4:	mov	r4, r9
   142c8:	str	sl, [sp]
   142cc:	sub	r5, r5, #16
   142d0:	str	r9, [sp, #8]
   142d4:	mov	sl, r5
   142d8:	b	14304 <__assert_fail@plt+0x3238>
   142dc:	lsl	ip, r2, #4
   142e0:	add	r2, r2, #1
   142e4:	add	r1, r0, ip
   142e8:	strd	r6, [r0, ip]
   142ec:	str	r2, [fp]
   142f0:	str	r5, [r1, #8]
   142f4:	str	r9, [r1, #12]
   142f8:	add	r4, r4, #16
   142fc:	cmp	sl, r4
   14300:	beq	14364 <__assert_fail@plt+0x3298>
   14304:	ldr	r2, [r4, #8]
   14308:	ldr	ip, [r4, #12]
   1430c:	ldrd	r0, [r4, #16]
   14310:	adds	r6, r2, #1
   14314:	adc	r7, ip, #0
   14318:	cmp	r7, r1
   1431c:	cmpeq	r6, r0
   14320:	beq	142f8 <__assert_fail@plt+0x322c>
   14324:	subs	r5, r0, #1
   14328:	ldr	r2, [fp]
   1432c:	sbc	r9, r1, #0
   14330:	ldrd	r0, [fp, #4]
   14334:	cmp	r2, r1
   14338:	bne	142dc <__assert_fail@plt+0x3210>
   1433c:	mov	r2, #16
   14340:	mov	r1, r8
   14344:	bl	19990 <__assert_fail@plt+0x88c4>
   14348:	str	r0, [fp, #4]
   1434c:	ldr	r2, [fp]
   14350:	b	142dc <__assert_fail@plt+0x3210>
   14354:	mov	r6, #0
   14358:	mov	r7, #0
   1435c:	mov	r9, #0
   14360:	b	13e74 <__assert_fail@plt+0x2da8>
   14364:	ldr	sl, [sp]
   14368:	ldr	r9, [sp, #8]
   1436c:	add	sl, r9, sl, lsl #4
   14370:	mvn	r1, #0
   14374:	mvn	r0, #0
   14378:	ldrd	r2, [sl, #-8]
   1437c:	cmp	r3, r1
   14380:	cmpeq	r2, r0
   14384:	bne	1439c <__assert_fail@plt+0x32d0>
   14388:	mov	r0, r9
   1438c:	bl	14c68 <__assert_fail@plt+0x3b9c>
   14390:	ldr	sl, [fp]
   14394:	ldr	r9, [fp, #4]
   14398:	b	140d0 <__assert_fail@plt+0x3004>
   1439c:	adds	r5, r2, #1
   143a0:	ldr	r1, [fp]
   143a4:	adc	r4, r3, #0
   143a8:	ldmib	fp, {r0, r3}
   143ac:	cmp	r1, r3
   143b0:	beq	14430 <__assert_fail@plt+0x3364>
   143b4:	lsl	ip, r1, #4
   143b8:	mvn	r2, #0
   143bc:	mvn	r3, #0
   143c0:	add	r1, r1, #1
   143c4:	add	lr, r0, ip
   143c8:	str	r5, [r0, ip]
   143cc:	mov	r0, r9
   143d0:	str	r4, [lr, #4]
   143d4:	strd	r2, [lr, #8]
   143d8:	str	r1, [fp]
   143dc:	bl	14c68 <__assert_fail@plt+0x3b9c>
   143e0:	ldr	sl, [fp]
   143e4:	ldr	r9, [fp, #4]
   143e8:	b	140d0 <__assert_fail@plt+0x3004>
   143ec:	mov	r2, #16
   143f0:	ldr	r1, [pc, #400]	; 14588 <__assert_fail@plt+0x34bc>
   143f4:	mov	r6, #1
   143f8:	bl	19990 <__assert_fail@plt+0x88c4>
   143fc:	ldr	r3, [fp]
   14400:	subs	ip, r4, #1
   14404:	mov	r7, #0
   14408:	sbc	lr, r5, #0
   1440c:	str	r0, [fp, #4]
   14410:	lsl	r1, r3, #4
   14414:	add	r3, r3, #1
   14418:	add	r2, r0, r1
   1441c:	strd	r6, [r0, r1]
   14420:	str	r3, [fp]
   14424:	str	ip, [r2, #8]
   14428:	str	lr, [r2, #12]
   1442c:	b	142b4 <__assert_fail@plt+0x31e8>
   14430:	ldr	r1, [pc, #336]	; 14588 <__assert_fail@plt+0x34bc>
   14434:	mov	r2, #16
   14438:	bl	19990 <__assert_fail@plt+0x88c4>
   1443c:	str	r0, [fp, #4]
   14440:	ldr	r1, [fp]
   14444:	b	143b4 <__assert_fail@plt+0x32e8>
   14448:	ldr	r3, [sp, #28]
   1444c:	mov	r0, sl
   14450:	mov	r2, #5
   14454:	tst	r3, #4
   14458:	movwne	r1, #55688	; 0xd988
   1445c:	movweq	r1, #55736	; 0xd9b8
   14460:	movtne	r1, #1
   14464:	movteq	r1, #1
   14468:	bl	10ec8 <dcgettext@plt>
   1446c:	mov	r1, #0
   14470:	mov	r2, r0
   14474:	mov	r0, r1
   14478:	bl	10f4c <error@plt>
   1447c:	mov	r0, #1
   14480:	bl	137cc <__assert_fail@plt+0x2700>
   14484:	movw	r1, #55800	; 0xd9f8
   14488:	movt	r1, #1
   1448c:	mov	r2, #5
   14490:	mov	r0, #0
   14494:	bl	10ec8 <dcgettext@plt>
   14498:	mov	r1, #0
   1449c:	mov	r2, r0
   144a0:	mov	r0, r1
   144a4:	bl	10f4c <error@plt>
   144a8:	mov	r0, #1
   144ac:	bl	137cc <__assert_fail@plt+0x2700>
   144b0:	movw	r1, #55764	; 0xd9d4
   144b4:	movt	r1, #1
   144b8:	mov	r2, #5
   144bc:	b	14490 <__assert_fail@plt+0x33c4>
   144c0:	ldr	r3, [sp, #28]
   144c4:	ands	r0, r3, #4
   144c8:	beq	14554 <__assert_fail@plt+0x3488>
   144cc:	movw	r1, #55636	; 0xd954
   144d0:	movt	r1, #1
   144d4:	mov	r2, #5
   144d8:	mov	r0, #0
   144dc:	bl	10ec8 <dcgettext@plt>
   144e0:	b	1446c <__assert_fail@plt+0x33a0>
   144e4:	movw	r1, #55828	; 0xda14
   144e8:	movt	r1, #1
   144ec:	mov	r0, r8
   144f0:	bl	110c0 <strspn@plt>
   144f4:	mov	r1, r0
   144f8:	mov	r0, r8
   144fc:	bl	19c58 <__assert_fail@plt+0x8b8c>
   14500:	ldr	r3, [sp, #28]
   14504:	mov	r4, r0
   14508:	ands	r0, r3, #4
   1450c:	beq	14568 <__assert_fail@plt+0x349c>
   14510:	movw	r1, #55840	; 0xda20
   14514:	movt	r1, #1
   14518:	mov	r2, #5
   1451c:	mov	r0, #0
   14520:	bl	10ec8 <dcgettext@plt>
   14524:	mov	r5, r0
   14528:	mov	r0, r4
   1452c:	bl	18e68 <__assert_fail@plt+0x7d9c>
   14530:	mov	r1, #0
   14534:	mov	r3, r0
   14538:	mov	r2, r5
   1453c:	mov	r0, r1
   14540:	bl	10f4c <error@plt>
   14544:	mov	r0, r4
   14548:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1454c:	mov	r0, #1
   14550:	bl	137cc <__assert_fail@plt+0x2700>
   14554:	movw	r1, #55668	; 0xd974
   14558:	movt	r1, #1
   1455c:	mov	r2, #5
   14560:	bl	10ec8 <dcgettext@plt>
   14564:	b	1446c <__assert_fail@plt+0x33a0>
   14568:	movw	r1, #55880	; 0xda48
   1456c:	movt	r1, #1
   14570:	mov	r2, #5
   14574:	bl	10ec8 <dcgettext@plt>
   14578:	mov	r5, r0
   1457c:	b	14528 <__assert_fail@plt+0x345c>
   14580:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   14584:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   14588:	strdeq	pc, [r2], -ip
   1458c:	ldr	r3, [sp, #28]
   14590:	mov	r5, r1
   14594:	ands	r0, r3, #4
   14598:	beq	14600 <__assert_fail@plt+0x3534>
   1459c:	mov	r0, r2
   145a0:	movw	r1, #55912	; 0xda68
   145a4:	movt	r1, #1
   145a8:	mov	r2, #5
   145ac:	bl	10ec8 <dcgettext@plt>
   145b0:	mov	r4, r0
   145b4:	mov	r0, r5
   145b8:	bl	18e68 <__assert_fail@plt+0x7d9c>
   145bc:	mov	r1, #0
   145c0:	mov	r3, r0
   145c4:	mov	r2, r4
   145c8:	mov	r0, r1
   145cc:	bl	10f4c <error@plt>
   145d0:	mov	r0, #1
   145d4:	bl	137cc <__assert_fail@plt+0x2700>
   145d8:	mov	r0, r3
   145dc:	ldr	r3, [sp, #28]
   145e0:	mov	r2, #5
   145e4:	tst	r3, #4
   145e8:	movwne	r1, #55972	; 0xdaa4
   145ec:	movweq	r1, #56016	; 0xdad0
   145f0:	movtne	r1, #1
   145f4:	movteq	r1, #1
   145f8:	bl	10ec8 <dcgettext@plt>
   145fc:	b	1446c <__assert_fail@plt+0x33a0>
   14600:	movw	r1, #55948	; 0xda8c
   14604:	movt	r1, #1
   14608:	mov	r2, #5
   1460c:	bl	10ec8 <dcgettext@plt>
   14610:	mov	r4, r0
   14614:	b	145b4 <__assert_fail@plt+0x34e8>
   14618:	mov	r0, #1
   1461c:	b	137cc <__assert_fail@plt+0x2700>
   14620:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14624:	mov	r4, r1
   14628:	strd	r6, [sp, #8]
   1462c:	mov	r6, r2
   14630:	strd	r8, [sp, #16]
   14634:	mov	r8, r3
   14638:	strd	sl, [sp, #24]
   1463c:	mov	sl, r0
   14640:	str	lr, [sp, #32]
   14644:	sub	sp, sp, #12
   14648:	str	r2, [sp]
   1464c:	bl	10fb8 <strlen@plt>
   14650:	ldr	fp, [r4]
   14654:	cmp	fp, #0
   14658:	beq	14768 <__assert_fail@plt+0x369c>
   1465c:	cmp	r6, #0
   14660:	mov	r7, r0
   14664:	beq	14714 <__assert_fail@plt+0x3648>
   14668:	mov	r5, #0
   1466c:	mvn	r9, #0
   14670:	str	r5, [sp, #4]
   14674:	mov	r2, r7
   14678:	mov	r1, sl
   1467c:	mov	r0, fp
   14680:	bl	1109c <strncmp@plt>
   14684:	cmp	r0, #0
   14688:	mov	r0, fp
   1468c:	bne	146cc <__assert_fail@plt+0x3600>
   14690:	bl	10fb8 <strlen@plt>
   14694:	ldr	r3, [sp]
   14698:	cmp	r0, r7
   1469c:	mov	r2, r8
   146a0:	mov	r1, r6
   146a4:	mla	r0, r8, r9, r3
   146a8:	beq	1470c <__assert_fail@plt+0x3640>
   146ac:	cmn	r9, #1
   146b0:	moveq	r9, r5
   146b4:	beq	146cc <__assert_fail@plt+0x3600>
   146b8:	bl	10eb0 <memcmp@plt>
   146bc:	ldr	r3, [sp, #4]
   146c0:	cmp	r0, #0
   146c4:	movne	r3, #1
   146c8:	str	r3, [sp, #4]
   146cc:	ldr	fp, [r4, #4]!
   146d0:	add	r5, r5, #1
   146d4:	add	r6, r6, r8
   146d8:	cmp	fp, #0
   146dc:	bne	14674 <__assert_fail@plt+0x35a8>
   146e0:	ldr	r3, [sp, #4]
   146e4:	cmp	r3, #0
   146e8:	mvnne	r9, #1
   146ec:	mov	r0, r9
   146f0:	add	sp, sp, #12
   146f4:	ldrd	r4, [sp]
   146f8:	ldrd	r6, [sp, #8]
   146fc:	ldrd	r8, [sp, #16]
   14700:	ldrd	sl, [sp, #24]
   14704:	add	sp, sp, #32
   14708:	pop	{pc}		; (ldr pc, [sp], #4)
   1470c:	mov	r9, r5
   14710:	b	146ec <__assert_fail@plt+0x3620>
   14714:	mov	r5, r6
   14718:	mvn	r9, #0
   1471c:	mov	r2, r7
   14720:	mov	r1, sl
   14724:	mov	r0, fp
   14728:	bl	1109c <strncmp@plt>
   1472c:	cmp	r0, #0
   14730:	mov	r0, fp
   14734:	bne	14750 <__assert_fail@plt+0x3684>
   14738:	bl	10fb8 <strlen@plt>
   1473c:	cmp	r0, r7
   14740:	beq	1470c <__assert_fail@plt+0x3640>
   14744:	cmn	r9, #1
   14748:	moveq	r9, r5
   1474c:	movne	r6, #1
   14750:	ldr	fp, [r4, #4]!
   14754:	add	r5, r5, #1
   14758:	cmp	fp, #0
   1475c:	bne	1471c <__assert_fail@plt+0x3650>
   14760:	str	r6, [sp, #4]
   14764:	b	146e0 <__assert_fail@plt+0x3614>
   14768:	mvn	r9, #0
   1476c:	b	146ec <__assert_fail@plt+0x3620>
   14770:	strd	r4, [sp, #-16]!
   14774:	str	r6, [sp, #8]
   14778:	mov	r6, r0
   1477c:	ldr	r0, [r1]
   14780:	str	lr, [sp, #12]
   14784:	cmp	r0, #0
   14788:	beq	147cc <__assert_fail@plt+0x3700>
   1478c:	mov	r4, r1
   14790:	mov	r5, #0
   14794:	b	147a8 <__assert_fail@plt+0x36dc>
   14798:	ldr	r0, [r4, #4]!
   1479c:	add	r5, r5, #1
   147a0:	cmp	r0, #0
   147a4:	beq	147cc <__assert_fail@plt+0x3700>
   147a8:	mov	r1, r6
   147ac:	bl	10e38 <strcmp@plt>
   147b0:	cmp	r0, #0
   147b4:	bne	14798 <__assert_fail@plt+0x36cc>
   147b8:	mov	r0, r5
   147bc:	ldrd	r4, [sp]
   147c0:	ldr	r6, [sp, #8]
   147c4:	add	sp, sp, #12
   147c8:	pop	{pc}		; (ldr pc, [sp], #4)
   147cc:	ldrd	r4, [sp]
   147d0:	mvn	r0, #0
   147d4:	ldr	r6, [sp, #8]
   147d8:	add	sp, sp, #12
   147dc:	pop	{pc}		; (ldr pc, [sp], #4)
   147e0:	cmn	r2, #1
   147e4:	strd	r4, [sp, #-16]!
   147e8:	mov	r5, r1
   147ec:	movweq	r1, #56056	; 0xdaf8
   147f0:	movwne	r1, #56084	; 0xdb14
   147f4:	str	r6, [sp, #8]
   147f8:	movteq	r1, #1
   147fc:	movtne	r1, #1
   14800:	str	lr, [sp, #12]
   14804:	mov	r6, r0
   14808:	sub	sp, sp, #8
   1480c:	mov	r2, #5
   14810:	mov	r0, #0
   14814:	bl	10ec8 <dcgettext@plt>
   14818:	mov	r4, r0
   1481c:	mov	r2, r5
   14820:	mov	r1, #8
   14824:	mov	r0, #0
   14828:	bl	17a60 <__assert_fail@plt+0x6994>
   1482c:	mov	r5, r0
   14830:	mov	r1, r6
   14834:	mov	r0, #1
   14838:	bl	18e58 <__assert_fail@plt+0x7d8c>
   1483c:	mov	r1, #0
   14840:	mov	r3, r5
   14844:	str	r0, [sp]
   14848:	mov	r2, r4
   1484c:	mov	r0, r1
   14850:	bl	10f4c <error@plt>
   14854:	add	sp, sp, #8
   14858:	ldrd	r4, [sp]
   1485c:	ldr	r6, [sp, #8]
   14860:	add	sp, sp, #12
   14864:	pop	{pc}		; (ldr pc, [sp], #4)
   14868:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1486c:	mov	r4, r1
   14870:	movw	r1, #56116	; 0xdb34
   14874:	movt	r1, #1
   14878:	strd	r6, [sp, #8]
   1487c:	mov	r6, r0
   14880:	mov	r7, r2
   14884:	mov	r0, #0
   14888:	strd	r8, [sp, #16]
   1488c:	mov	r2, #5
   14890:	strd	sl, [sp, #24]
   14894:	movw	sl, #61840	; 0xf190
   14898:	movt	sl, #2
   1489c:	str	lr, [sp, #32]
   148a0:	sub	sp, sp, #12
   148a4:	bl	10ec8 <dcgettext@plt>
   148a8:	ldr	r1, [sl]
   148ac:	bl	10e20 <fputs_unlocked@plt>
   148b0:	ldr	fp, [r6]
   148b4:	cmp	fp, #0
   148b8:	beq	14958 <__assert_fail@plt+0x388c>
   148bc:	movw	r3, #56140	; 0xdb4c
   148c0:	movt	r3, #1
   148c4:	mov	r9, #0
   148c8:	str	r3, [sp]
   148cc:	movw	r3, #56148	; 0xdb54
   148d0:	movt	r3, #1
   148d4:	mov	r5, r9
   148d8:	str	r3, [sp, #4]
   148dc:	b	14914 <__assert_fail@plt+0x3848>
   148e0:	mov	r0, fp
   148e4:	mov	r9, r4
   148e8:	bl	18e68 <__assert_fail@plt+0x7d9c>
   148ec:	mov	r3, r0
   148f0:	mov	r1, #1
   148f4:	ldr	r2, [sp]
   148f8:	mov	r0, r8
   148fc:	bl	1100c <__fprintf_chk@plt>
   14900:	ldr	fp, [r6, #4]!
   14904:	add	r5, r5, #1
   14908:	add	r4, r4, r7
   1490c:	cmp	fp, #0
   14910:	beq	14958 <__assert_fail@plt+0x388c>
   14914:	cmp	r5, #0
   14918:	mov	r1, r4
   1491c:	ldr	r8, [sl]
   14920:	mov	r2, r7
   14924:	mov	r0, r9
   14928:	beq	148e0 <__assert_fail@plt+0x3814>
   1492c:	bl	10eb0 <memcmp@plt>
   14930:	cmp	r0, #0
   14934:	bne	148e0 <__assert_fail@plt+0x3814>
   14938:	mov	r0, fp
   1493c:	bl	18e68 <__assert_fail@plt+0x7d9c>
   14940:	mov	r3, r0
   14944:	mov	r1, #1
   14948:	ldr	r2, [sp, #4]
   1494c:	mov	r0, r8
   14950:	bl	1100c <__fprintf_chk@plt>
   14954:	b	14900 <__assert_fail@plt+0x3834>
   14958:	ldr	r0, [sl]
   1495c:	ldr	r3, [r0, #20]
   14960:	ldr	r2, [r0, #24]
   14964:	cmp	r3, r2
   14968:	bcs	14998 <__assert_fail@plt+0x38cc>
   1496c:	add	r1, r3, #1
   14970:	mov	r2, #10
   14974:	str	r1, [r0, #20]
   14978:	strb	r2, [r3]
   1497c:	add	sp, sp, #12
   14980:	ldrd	r4, [sp]
   14984:	ldrd	r6, [sp, #8]
   14988:	ldrd	r8, [sp, #16]
   1498c:	ldrd	sl, [sp, #24]
   14990:	add	sp, sp, #32
   14994:	pop	{pc}		; (ldr pc, [sp], #4)
   14998:	mov	r1, #10
   1499c:	add	sp, sp, #12
   149a0:	ldrd	r4, [sp]
   149a4:	ldrd	r6, [sp, #8]
   149a8:	ldrd	r8, [sp, #16]
   149ac:	ldrd	sl, [sp, #24]
   149b0:	ldr	lr, [sp, #32]
   149b4:	add	sp, sp, #36	; 0x24
   149b8:	b	11030 <__overflow@plt>
   149bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   149c0:	mov	r5, r1
   149c4:	strd	r6, [sp, #8]
   149c8:	mov	r6, r2
   149cc:	mov	r7, r3
   149d0:	strd	r8, [sp, #16]
   149d4:	mov	r8, r0
   149d8:	str	lr, [sp, #24]
   149dc:	sub	sp, sp, #12
   149e0:	ldrb	r4, [sp, #48]	; 0x30
   149e4:	cmp	r4, #0
   149e8:	bne	14a94 <__assert_fail@plt+0x39c8>
   149ec:	ldr	r0, [r2]
   149f0:	cmp	r0, #0
   149f4:	movne	r9, r2
   149f8:	bne	14a7c <__assert_fail@plt+0x39b0>
   149fc:	movw	r1, #56056	; 0xdaf8
   14a00:	movt	r1, #1
   14a04:	mov	r2, #5
   14a08:	mov	r0, #0
   14a0c:	bl	10ec8 <dcgettext@plt>
   14a10:	mov	r9, r0
   14a14:	mov	r2, r5
   14a18:	mov	r1, #8
   14a1c:	mov	r0, #0
   14a20:	bl	17a60 <__assert_fail@plt+0x6994>
   14a24:	mov	r4, r0
   14a28:	mov	r1, r8
   14a2c:	mov	r0, #1
   14a30:	bl	18e58 <__assert_fail@plt+0x7d8c>
   14a34:	mov	r1, #0
   14a38:	mov	r3, r4
   14a3c:	str	r0, [sp]
   14a40:	mov	r2, r9
   14a44:	mov	r0, r1
   14a48:	bl	10f4c <error@plt>
   14a4c:	mov	r0, r6
   14a50:	mov	r1, r7
   14a54:	ldr	r2, [sp, #40]	; 0x28
   14a58:	bl	14868 <__assert_fail@plt+0x379c>
   14a5c:	ldr	r3, [sp, #44]	; 0x2c
   14a60:	blx	r3
   14a64:	mvn	r0, #0
   14a68:	b	14ab0 <__assert_fail@plt+0x39e4>
   14a6c:	ldr	r0, [r9, #4]!
   14a70:	add	r4, r4, #1
   14a74:	cmp	r0, #0
   14a78:	beq	149fc <__assert_fail@plt+0x3930>
   14a7c:	mov	r1, r5
   14a80:	bl	10e38 <strcmp@plt>
   14a84:	cmp	r0, #0
   14a88:	bne	14a6c <__assert_fail@plt+0x39a0>
   14a8c:	mov	r0, r4
   14a90:	b	14ab0 <__assert_fail@plt+0x39e4>
   14a94:	mov	r2, r3
   14a98:	mov	r1, r6
   14a9c:	ldr	r3, [sp, #40]	; 0x28
   14aa0:	mov	r0, r5
   14aa4:	bl	14620 <__assert_fail@plt+0x3554>
   14aa8:	cmp	r0, #0
   14aac:	blt	14ac8 <__assert_fail@plt+0x39fc>
   14ab0:	add	sp, sp, #12
   14ab4:	ldrd	r4, [sp]
   14ab8:	ldrd	r6, [sp, #8]
   14abc:	ldrd	r8, [sp, #16]
   14ac0:	add	sp, sp, #24
   14ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac8:	cmn	r0, #1
   14acc:	beq	149fc <__assert_fail@plt+0x3930>
   14ad0:	movw	r1, #56084	; 0xdb14
   14ad4:	movt	r1, #1
   14ad8:	mov	r2, #5
   14adc:	mov	r0, #0
   14ae0:	bl	10ec8 <dcgettext@plt>
   14ae4:	mov	r9, r0
   14ae8:	b	14a14 <__assert_fail@plt+0x3948>
   14aec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14af0:	strd	r6, [sp, #8]
   14af4:	ldr	r7, [r1]
   14af8:	str	r8, [sp, #16]
   14afc:	str	lr, [sp, #20]
   14b00:	cmp	r7, #0
   14b04:	beq	14b44 <__assert_fail@plt+0x3a78>
   14b08:	mov	r6, r3
   14b0c:	mov	r8, r0
   14b10:	mov	r4, r2
   14b14:	mov	r5, r1
   14b18:	b	14b28 <__assert_fail@plt+0x3a5c>
   14b1c:	ldr	r7, [r5, #4]!
   14b20:	cmp	r7, #0
   14b24:	beq	14b44 <__assert_fail@plt+0x3a78>
   14b28:	mov	r1, r4
   14b2c:	mov	r2, r6
   14b30:	mov	r0, r8
   14b34:	add	r4, r4, r6
   14b38:	bl	10eb0 <memcmp@plt>
   14b3c:	cmp	r0, #0
   14b40:	bne	14b1c <__assert_fail@plt+0x3a50>
   14b44:	mov	r0, r7
   14b48:	ldrd	r4, [sp]
   14b4c:	ldrd	r6, [sp, #8]
   14b50:	ldr	r8, [sp, #16]
   14b54:	add	sp, sp, #20
   14b58:	pop	{pc}		; (ldr pc, [sp], #4)
   14b5c:	movw	r3, #61956	; 0xf204
   14b60:	movt	r3, #2
   14b64:	str	r0, [r3]
   14b68:	bx	lr
   14b6c:	movw	r3, #61956	; 0xf204
   14b70:	movt	r3, #2
   14b74:	strb	r0, [r3, #4]
   14b78:	bx	lr
   14b7c:	movw	r3, #61852	; 0xf19c
   14b80:	movt	r3, #2
   14b84:	strd	r4, [sp, #-16]!
   14b88:	ldr	r0, [r3]
   14b8c:	str	r6, [sp, #8]
   14b90:	str	lr, [sp, #12]
   14b94:	sub	sp, sp, #8
   14b98:	bl	1b1ec <__assert_fail@plt+0xa120>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14bcc <__assert_fail@plt+0x3b00>
   14ba4:	movw	r4, #61956	; 0xf204
   14ba8:	movt	r4, #2
   14bac:	ldrb	r6, [r4, #4]
   14bb0:	bl	10fd0 <__errno_location@plt>
   14bb4:	mov	r5, r0
   14bb8:	cmp	r6, #0
   14bbc:	beq	14bf8 <__assert_fail@plt+0x3b2c>
   14bc0:	ldr	r3, [r0]
   14bc4:	cmp	r3, #32
   14bc8:	bne	14bf8 <__assert_fail@plt+0x3b2c>
   14bcc:	movw	r3, #61840	; 0xf190
   14bd0:	movt	r3, #2
   14bd4:	ldr	r0, [r3]
   14bd8:	bl	1b1ec <__assert_fail@plt+0xa120>
   14bdc:	cmp	r0, #0
   14be0:	bne	14c40 <__assert_fail@plt+0x3b74>
   14be4:	add	sp, sp, #8
   14be8:	ldrd	r4, [sp]
   14bec:	ldr	r6, [sp, #8]
   14bf0:	add	sp, sp, #12
   14bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf8:	movw	r1, #56156	; 0xdb5c
   14bfc:	movt	r1, #1
   14c00:	mov	r2, #5
   14c04:	mov	r0, #0
   14c08:	bl	10ec8 <dcgettext@plt>
   14c0c:	mov	r6, r0
   14c10:	ldr	r0, [r4]
   14c14:	cmp	r0, #0
   14c18:	beq	14c50 <__assert_fail@plt+0x3b84>
   14c1c:	ldr	r4, [r5]
   14c20:	bl	182ec <__assert_fail@plt+0x7220>
   14c24:	mov	r3, r0
   14c28:	movw	r2, #49252	; 0xc064
   14c2c:	movt	r2, #1
   14c30:	mov	r0, #0
   14c34:	str	r6, [sp]
   14c38:	mov	r1, r4
   14c3c:	bl	10f4c <error@plt>
   14c40:	movw	r3, #61756	; 0xf13c
   14c44:	movt	r3, #2
   14c48:	ldr	r0, [r3]
   14c4c:	bl	10e80 <_exit@plt>
   14c50:	mov	r3, r6
   14c54:	movw	r2, #48688	; 0xbe30
   14c58:	movt	r2, #1
   14c5c:	ldr	r1, [r5]
   14c60:	bl	10f4c <error@plt>
   14c64:	b	14c40 <__assert_fail@plt+0x3b74>
   14c68:	strd	r4, [sp, #-12]!
   14c6c:	mov	r5, r0
   14c70:	str	lr, [sp, #8]
   14c74:	sub	sp, sp, #12
   14c78:	bl	10fd0 <__errno_location@plt>
   14c7c:	mov	r4, r0
   14c80:	mov	r2, #0
   14c84:	ldr	r3, [r4]
   14c88:	mov	r0, r5
   14c8c:	str	r2, [r4]
   14c90:	str	r3, [sp]
   14c94:	str	r3, [sp, #4]
   14c98:	bl	10e74 <free@plt>
   14c9c:	ldr	r3, [r4]
   14ca0:	add	r2, sp, #8
   14ca4:	clz	r3, r3
   14ca8:	lsr	r3, r3, #5
   14cac:	add	r3, r2, r3, lsl #2
   14cb0:	ldr	r3, [r3, #-8]
   14cb4:	str	r3, [r4]
   14cb8:	add	sp, sp, #12
   14cbc:	ldrd	r4, [sp]
   14cc0:	add	sp, sp, #8
   14cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14ccc:	mov	r4, r2
   14cd0:	strd	r6, [sp, #8]
   14cd4:	mov	r6, r1
   14cd8:	strd	r8, [sp, #16]
   14cdc:	mov	r9, r3
   14ce0:	strd	sl, [sp, #24]
   14ce4:	str	lr, [sp, #32]
   14ce8:	sub	sp, sp, #12
   14cec:	ldr	r7, [sp, #52]	; 0x34
   14cf0:	str	r0, [sp]
   14cf4:	bl	10fb8 <strlen@plt>
   14cf8:	mov	fp, r0
   14cfc:	ands	sl, r7, #2
   14d00:	beq	14e54 <__assert_fail@plt+0x3d88>
   14d04:	mov	r8, #0
   14d08:	mov	r5, fp
   14d0c:	mov	sl, r8
   14d10:	ldr	r2, [r9]
   14d14:	cmp	r2, r5
   14d18:	movcc	fp, r2
   14d1c:	movcc	r1, #0
   14d20:	bcs	14e24 <__assert_fail@plt+0x3d58>
   14d24:	ldr	r3, [sp, #48]	; 0x30
   14d28:	str	r2, [r9]
   14d2c:	cmp	r3, #0
   14d30:	beq	14e48 <__assert_fail@plt+0x3d7c>
   14d34:	cmp	r3, #1
   14d38:	moveq	r5, #0
   14d3c:	beq	14d4c <__assert_fail@plt+0x3c80>
   14d40:	lsr	r5, r1, #1
   14d44:	and	r1, r1, #1
   14d48:	add	r1, r1, r5
   14d4c:	tst	r7, #4
   14d50:	addeq	r9, r1, fp
   14d54:	movne	r9, fp
   14d58:	movne	r1, #0
   14d5c:	tst	r7, #8
   14d60:	addeq	r9, r9, r5
   14d64:	movne	r5, #0
   14d68:	cmp	r4, #0
   14d6c:	beq	14df0 <__assert_fail@plt+0x3d24>
   14d70:	sub	r4, r4, #1
   14d74:	mov	r0, r6
   14d78:	add	r4, r6, r4
   14d7c:	cmp	r1, #0
   14d80:	cmpne	r6, r4
   14d84:	bcs	14da4 <__assert_fail@plt+0x3cd8>
   14d88:	mov	lr, #32
   14d8c:	rsb	r3, r1, #0
   14d90:	strb	lr, [r0], #1
   14d94:	sub	r2, r6, r0
   14d98:	cmp	r3, r2
   14d9c:	cmpne	r4, r0
   14da0:	bhi	14d8c <__assert_fail@plt+0x3cc0>
   14da4:	sub	r2, r4, r0
   14da8:	mov	ip, #0
   14dac:	ldr	r1, [sp]
   14db0:	cmp	r2, fp
   14db4:	movcs	r2, fp
   14db8:	strb	ip, [r0]
   14dbc:	bl	10f88 <mempcpy@plt>
   14dc0:	cmp	r5, #0
   14dc4:	cmpne	r4, r0
   14dc8:	mov	r3, r0
   14dcc:	bls	14de8 <__assert_fail@plt+0x3d1c>
   14dd0:	mov	r1, #32
   14dd4:	strb	r1, [r3], #1
   14dd8:	sub	r2, r3, r5
   14ddc:	cmp	r0, r2
   14de0:	cmpne	r4, r3
   14de4:	bhi	14dd4 <__assert_fail@plt+0x3d08>
   14de8:	mov	r2, #0
   14dec:	strb	r2, [r3]
   14df0:	mov	r0, r8
   14df4:	bl	14c68 <__assert_fail@plt+0x3b9c>
   14df8:	mov	r0, sl
   14dfc:	bl	14c68 <__assert_fail@plt+0x3b9c>
   14e00:	mov	r0, r9
   14e04:	add	sp, sp, #12
   14e08:	ldrd	r4, [sp]
   14e0c:	ldrd	r6, [sp, #8]
   14e10:	ldrd	r8, [sp, #16]
   14e14:	ldrd	sl, [sp, #24]
   14e18:	add	sp, sp, #32
   14e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e20:	mov	sl, #0
   14e24:	ldr	r3, [sp, #48]	; 0x30
   14e28:	cmp	r2, r5
   14e2c:	subhi	r1, r2, r5
   14e30:	movls	r2, r5
   14e34:	movhi	r2, r5
   14e38:	movls	r1, #0
   14e3c:	str	r2, [r9]
   14e40:	cmp	r3, #0
   14e44:	bne	14d34 <__assert_fail@plt+0x3c68>
   14e48:	mov	r5, r1
   14e4c:	ldr	r1, [sp, #48]	; 0x30
   14e50:	b	14d4c <__assert_fail@plt+0x3c80>
   14e54:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   14e58:	cmp	r0, #1
   14e5c:	bls	14d04 <__assert_fail@plt+0x3c38>
   14e60:	mov	r2, sl
   14e64:	mov	r0, sl
   14e68:	ldr	r1, [sp]
   14e6c:	bl	1106c <mbstowcs@plt>
   14e70:	cmn	r0, #1
   14e74:	bne	14e90 <__assert_fail@plt+0x3dc4>
   14e78:	tst	r7, #1
   14e7c:	bne	14d04 <__assert_fail@plt+0x3c38>
   14e80:	mov	r8, #0
   14e84:	mvn	r9, #0
   14e88:	mov	sl, r8
   14e8c:	b	14df0 <__assert_fail@plt+0x3d24>
   14e90:	add	r5, r0, #1
   14e94:	lsl	r3, r5, #2
   14e98:	mov	r0, r3
   14e9c:	str	r3, [sp, #4]
   14ea0:	bl	1b158 <__assert_fail@plt+0xa08c>
   14ea4:	subs	r8, r0, #0
   14ea8:	beq	14fc0 <__assert_fail@plt+0x3ef4>
   14eac:	mov	r2, r5
   14eb0:	ldr	r1, [sp]
   14eb4:	bl	1106c <mbstowcs@plt>
   14eb8:	cmp	r0, #0
   14ebc:	beq	15028 <__assert_fail@plt+0x3f5c>
   14ec0:	ldr	r3, [sp, #4]
   14ec4:	add	r3, r8, r3
   14ec8:	str	sl, [r3, #-4]
   14ecc:	ldr	r0, [r8]
   14ed0:	cmp	r0, #0
   14ed4:	beq	15040 <__assert_fail@plt+0x3f74>
   14ed8:	str	r4, [sp, #4]
   14edc:	mov	r4, r8
   14ee0:	bl	10eec <iswprint@plt>
   14ee4:	cmp	r0, #0
   14ee8:	bne	14fe4 <__assert_fail@plt+0x3f18>
   14eec:	movw	r3, #65533	; 0xfffd
   14ef0:	mov	sl, #1
   14ef4:	str	r3, [r4]
   14ef8:	ldr	r0, [r4, #4]!
   14efc:	cmp	r0, #0
   14f00:	bne	14ee0 <__assert_fail@plt+0x3e14>
   14f04:	mov	r1, r5
   14f08:	mov	r0, r8
   14f0c:	ldr	r4, [sp, #4]
   14f10:	bl	11048 <wcswidth@plt>
   14f14:	mov	r5, r0
   14f18:	mov	r2, #0
   14f1c:	mov	r1, r8
   14f20:	mov	r0, r2
   14f24:	bl	10f40 <wcstombs@plt>
   14f28:	add	r3, r0, #1
   14f2c:	mov	r0, r3
   14f30:	str	r3, [sp, #4]
   14f34:	bl	1b158 <__assert_fail@plt+0xa08c>
   14f38:	subs	sl, r0, #0
   14f3c:	beq	14fd4 <__assert_fail@plt+0x3f08>
   14f40:	ldr	r0, [r8]
   14f44:	ldr	r3, [r9]
   14f48:	cmp	r0, #0
   14f4c:	beq	15034 <__assert_fail@plt+0x3f68>
   14f50:	mov	fp, r8
   14f54:	mov	r5, #0
   14f58:	str	r4, [sp]
   14f5c:	mov	r4, r3
   14f60:	b	14f74 <__assert_fail@plt+0x3ea8>
   14f64:	ldr	r0, [fp, #4]!
   14f68:	mov	r5, r3
   14f6c:	cmp	r0, #0
   14f70:	beq	14f98 <__assert_fail@plt+0x3ecc>
   14f74:	bl	10e5c <wcwidth@plt>
   14f78:	cmn	r0, #1
   14f7c:	bne	14f8c <__assert_fail@plt+0x3ec0>
   14f80:	movw	r3, #65533	; 0xfffd
   14f84:	mov	r0, #1
   14f88:	str	r3, [fp]
   14f8c:	add	r3, r0, r5
   14f90:	cmp	r4, r3
   14f94:	bcs	14f64 <__assert_fail@plt+0x3e98>
   14f98:	ldr	r4, [sp]
   14f9c:	mov	r0, #0
   14fa0:	mov	r1, r8
   14fa4:	str	sl, [sp]
   14fa8:	ldr	r2, [sp, #4]
   14fac:	str	r0, [fp]
   14fb0:	mov	r0, sl
   14fb4:	bl	10f40 <wcstombs@plt>
   14fb8:	mov	fp, r0
   14fbc:	b	14d10 <__assert_fail@plt+0x3c44>
   14fc0:	tst	r7, #1
   14fc4:	movne	r5, fp
   14fc8:	movne	sl, r8
   14fcc:	bne	14d10 <__assert_fail@plt+0x3c44>
   14fd0:	b	14e80 <__assert_fail@plt+0x3db4>
   14fd4:	tst	r7, #1
   14fd8:	mvneq	r9, #0
   14fdc:	bne	14d10 <__assert_fail@plt+0x3c44>
   14fe0:	b	14df0 <__assert_fail@plt+0x3d24>
   14fe4:	ldr	r0, [r4, #4]!
   14fe8:	cmp	r0, #0
   14fec:	bne	14ee0 <__assert_fail@plt+0x3e14>
   14ff0:	mov	r1, r5
   14ff4:	mov	r0, r8
   14ff8:	ldr	r4, [sp, #4]
   14ffc:	bl	11048 <wcswidth@plt>
   15000:	cmp	sl, #0
   15004:	mov	r5, r0
   15008:	bne	14f18 <__assert_fail@plt+0x3e4c>
   1500c:	ldr	r2, [r9]
   15010:	cmp	r2, r5
   15014:	bcs	14e20 <__assert_fail@plt+0x3d54>
   15018:	add	r3, fp, #1
   1501c:	mov	r0, r3
   15020:	str	r3, [sp, #4]
   15024:	b	14f34 <__assert_fail@plt+0x3e68>
   15028:	mov	sl, r0
   1502c:	mov	r5, fp
   15030:	b	14d10 <__assert_fail@plt+0x3c44>
   15034:	mov	r5, r0
   15038:	mov	fp, r8
   1503c:	b	14f9c <__assert_fail@plt+0x3ed0>
   15040:	mov	r1, r5
   15044:	mov	r0, r8
   15048:	bl	11048 <wcswidth@plt>
   1504c:	mov	r5, r0
   15050:	b	1500c <__assert_fail@plt+0x3f40>
   15054:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15058:	strd	r6, [sp, #8]
   1505c:	mov	r6, #0
   15060:	strd	r8, [sp, #16]
   15064:	strd	sl, [sp, #24]
   15068:	str	lr, [sp, #32]
   1506c:	sub	sp, sp, #44	; 0x2c
   15070:	ldr	sl, [r1]
   15074:	str	r1, [sp, #4]
   15078:	str	r2, [sp, #20]
   1507c:	and	r2, r3, #2
   15080:	str	r0, [sp, #8]
   15084:	str	r2, [sp, #16]
   15088:	and	r2, r3, #1
   1508c:	mov	fp, sl
   15090:	str	sl, [sp, #12]
   15094:	str	r2, [sp, #36]	; 0x24
   15098:	and	r2, r3, #4
   1509c:	and	r3, r3, #8
   150a0:	strd	r2, [sp, #24]
   150a4:	add	r8, fp, #1
   150a8:	mov	r0, r6
   150ac:	mov	r1, r8
   150b0:	bl	1b194 <__assert_fail@plt+0xa0c8>
   150b4:	subs	r5, r0, #0
   150b8:	beq	15338 <__assert_fail@plt+0x426c>
   150bc:	ldr	r3, [sp, #4]
   150c0:	ldr	r0, [sp, #8]
   150c4:	ldr	r2, [sp, #12]
   150c8:	str	r2, [r3]
   150cc:	bl	10fb8 <strlen@plt>
   150d0:	ldr	r3, [sp, #16]
   150d4:	mov	r9, r0
   150d8:	cmp	r3, #0
   150dc:	beq	1523c <__assert_fail@plt+0x4170>
   150e0:	ldr	r1, [sp, #8]
   150e4:	mov	r7, #0
   150e8:	mov	r4, r0
   150ec:	mov	r6, r7
   150f0:	ldr	r2, [sp, #12]
   150f4:	cmp	r4, r2
   150f8:	movhi	r9, r2
   150fc:	movhi	r3, #0
   15100:	bls	15224 <__assert_fail@plt+0x4158>
   15104:	ldr	ip, [sp, #4]
   15108:	ldr	r0, [sp, #20]
   1510c:	str	r2, [ip]
   15110:	cmp	r0, #0
   15114:	beq	15264 <__assert_fail@plt+0x4198>
   15118:	cmp	r0, #1
   1511c:	moveq	sl, #0
   15120:	beq	15130 <__assert_fail@plt+0x4064>
   15124:	lsr	sl, r3, #1
   15128:	and	r3, r3, #1
   1512c:	add	r3, r3, sl
   15130:	ldr	r2, [sp, #24]
   15134:	cmp	r2, #0
   15138:	ldr	r2, [sp, #28]
   1513c:	addeq	r4, r3, r9
   15140:	movne	r4, r9
   15144:	movne	r3, #0
   15148:	cmp	r2, #0
   1514c:	addeq	r4, r4, sl
   15150:	movne	sl, #0
   15154:	cmp	r8, #0
   15158:	beq	15200 <__assert_fail@plt+0x4134>
   1515c:	add	fp, r5, fp
   15160:	mov	r0, r5
   15164:	cmp	r3, #0
   15168:	cmpne	r5, fp
   1516c:	bcs	1518c <__assert_fail@plt+0x40c0>
   15170:	mov	lr, #32
   15174:	rsb	r2, r3, #0
   15178:	strb	lr, [r0], #1
   1517c:	sub	ip, r5, r0
   15180:	cmp	r2, ip
   15184:	cmpne	fp, r0
   15188:	bhi	15174 <__assert_fail@plt+0x40a8>
   1518c:	sub	r2, fp, r0
   15190:	mov	r3, #0
   15194:	cmp	r2, r9
   15198:	movcs	r2, r9
   1519c:	strb	r3, [r0]
   151a0:	bl	10f88 <mempcpy@plt>
   151a4:	cmp	sl, #0
   151a8:	cmpne	fp, r0
   151ac:	mov	r3, r0
   151b0:	bls	151cc <__assert_fail@plt+0x4100>
   151b4:	mov	r1, #32
   151b8:	strb	r1, [r3], #1
   151bc:	sub	r2, r3, sl
   151c0:	cmp	r0, r2
   151c4:	cmpne	fp, r3
   151c8:	bhi	151b8 <__assert_fail@plt+0x40ec>
   151cc:	mov	r2, #0
   151d0:	mov	r0, r7
   151d4:	strb	r2, [r3]
   151d8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   151dc:	mov	r0, r6
   151e0:	bl	14c68 <__assert_fail@plt+0x3b9c>
   151e4:	cmn	r4, #1
   151e8:	beq	152c4 <__assert_fail@plt+0x41f8>
   151ec:	cmp	r8, r4
   151f0:	bhi	152d0 <__assert_fail@plt+0x4204>
   151f4:	mov	r6, r5
   151f8:	mov	fp, r4
   151fc:	b	150a4 <__assert_fail@plt+0x3fd8>
   15200:	mov	r0, r7
   15204:	bl	14c68 <__assert_fail@plt+0x3b9c>
   15208:	mov	r0, r6
   1520c:	bl	14c68 <__assert_fail@plt+0x3b9c>
   15210:	cmn	r4, #1
   15214:	bne	151f4 <__assert_fail@plt+0x4128>
   15218:	b	152c4 <__assert_fail@plt+0x41f8>
   1521c:	ldr	r1, [sp, #8]
   15220:	mov	r6, #0
   15224:	cmp	r4, r2
   15228:	subcc	r3, r2, r4
   1522c:	movcs	r2, r4
   15230:	movcc	r2, r4
   15234:	movcs	r3, #0
   15238:	b	15104 <__assert_fail@plt+0x4038>
   1523c:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   15240:	cmp	r0, #1
   15244:	bhi	15270 <__assert_fail@plt+0x41a4>
   15248:	ldr	r3, [sp, #4]
   1524c:	mov	r4, r9
   15250:	ldr	r1, [sp, #8]
   15254:	ldr	r6, [sp, #16]
   15258:	ldr	r2, [r3]
   1525c:	mov	r7, r6
   15260:	b	150f4 <__assert_fail@plt+0x4028>
   15264:	mov	sl, r3
   15268:	ldr	r3, [sp, #20]
   1526c:	b	15130 <__assert_fail@plt+0x4064>
   15270:	ldr	r7, [sp, #8]
   15274:	ldr	r6, [sp, #16]
   15278:	mov	r1, r7
   1527c:	mov	r2, r6
   15280:	mov	r0, r6
   15284:	bl	1106c <mbstowcs@plt>
   15288:	cmn	r0, #1
   1528c:	bne	152f0 <__assert_fail@plt+0x4224>
   15290:	ldr	r3, [sp, #36]	; 0x24
   15294:	cmp	r3, #0
   15298:	beq	152b4 <__assert_fail@plt+0x41e8>
   1529c:	ldr	r3, [sp, #4]
   152a0:	mov	r1, r7
   152a4:	mov	r4, r9
   152a8:	mov	r7, r6
   152ac:	ldr	r2, [r3]
   152b0:	b	150f4 <__assert_fail@plt+0x4028>
   152b4:	mov	r0, #0
   152b8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   152bc:	mov	r0, #0
   152c0:	bl	14c68 <__assert_fail@plt+0x3b9c>
   152c4:	mov	r0, r5
   152c8:	mov	r5, #0
   152cc:	bl	14c68 <__assert_fail@plt+0x3b9c>
   152d0:	mov	r0, r5
   152d4:	add	sp, sp, #44	; 0x2c
   152d8:	ldrd	r4, [sp]
   152dc:	ldrd	r6, [sp, #8]
   152e0:	ldrd	r8, [sp, #16]
   152e4:	ldrd	sl, [sp, #24]
   152e8:	add	sp, sp, #32
   152ec:	pop	{pc}		; (ldr pc, [sp], #4)
   152f0:	add	r4, r0, #1
   152f4:	lsl	r6, r4, #2
   152f8:	mov	r0, r6
   152fc:	bl	1b158 <__assert_fail@plt+0xa08c>
   15300:	subs	r7, r0, #0
   15304:	beq	15440 <__assert_fail@plt+0x4374>
   15308:	ldr	sl, [sp, #8]
   1530c:	mov	r2, r4
   15310:	mov	r1, sl
   15314:	bl	1106c <mbstowcs@plt>
   15318:	cmp	r0, #0
   1531c:	bne	15344 <__assert_fail@plt+0x4278>
   15320:	ldr	r3, [sp, #4]
   15324:	mov	r4, r9
   15328:	mov	r1, sl
   1532c:	ldr	r6, [sp, #16]
   15330:	ldr	r2, [r3]
   15334:	b	150f4 <__assert_fail@plt+0x4028>
   15338:	mov	r0, r6
   1533c:	bl	14c68 <__assert_fail@plt+0x3b9c>
   15340:	b	152d0 <__assert_fail@plt+0x4204>
   15344:	ldr	r3, [sp, #16]
   15348:	add	r6, r7, r6
   1534c:	str	r3, [r6, #-4]
   15350:	ldr	r0, [r7]
   15354:	cmp	r0, #0
   15358:	beq	154e4 <__assert_fail@plt+0x4418>
   1535c:	mov	sl, r7
   15360:	mov	r6, r3
   15364:	bl	10eec <iswprint@plt>
   15368:	cmp	r0, #0
   1536c:	bne	15480 <__assert_fail@plt+0x43b4>
   15370:	movw	r3, #65533	; 0xfffd
   15374:	mov	r6, #1
   15378:	str	r3, [sl]
   1537c:	ldr	r0, [sl, #4]!
   15380:	cmp	r0, #0
   15384:	bne	15364 <__assert_fail@plt+0x4298>
   15388:	mov	r1, r4
   1538c:	mov	r0, r7
   15390:	bl	11048 <wcswidth@plt>
   15394:	mov	r4, r0
   15398:	mov	r2, #0
   1539c:	mov	r1, r7
   153a0:	mov	r0, r2
   153a4:	bl	10f40 <wcstombs@plt>
   153a8:	add	r3, r0, #1
   153ac:	mov	r0, r3
   153b0:	str	r3, [sp, #32]
   153b4:	bl	1b158 <__assert_fail@plt+0xa08c>
   153b8:	subs	r6, r0, #0
   153bc:	beq	15464 <__assert_fail@plt+0x4398>
   153c0:	ldr	r0, [r7]
   153c4:	ldr	r3, [sp, #4]
   153c8:	cmp	r0, #0
   153cc:	ldr	r9, [r3]
   153d0:	beq	154d8 <__assert_fail@plt+0x440c>
   153d4:	mov	sl, r7
   153d8:	mov	r4, #0
   153dc:	b	153f0 <__assert_fail@plt+0x4324>
   153e0:	ldr	r0, [sl, #4]!
   153e4:	mov	r4, r3
   153e8:	cmp	r0, #0
   153ec:	beq	15414 <__assert_fail@plt+0x4348>
   153f0:	bl	10e5c <wcwidth@plt>
   153f4:	cmn	r0, #1
   153f8:	bne	15408 <__assert_fail@plt+0x433c>
   153fc:	movw	r3, #65533	; 0xfffd
   15400:	mov	r0, #1
   15404:	str	r3, [sl]
   15408:	add	r3, r4, r0
   1540c:	cmp	r9, r3
   15410:	bcs	153e0 <__assert_fail@plt+0x4314>
   15414:	mov	r3, #0
   15418:	mov	r1, r7
   1541c:	ldr	r2, [sp, #32]
   15420:	mov	r0, r6
   15424:	str	r3, [sl]
   15428:	bl	10f40 <wcstombs@plt>
   1542c:	ldr	r3, [sp, #4]
   15430:	mov	r9, r0
   15434:	mov	r1, r6
   15438:	ldr	r2, [r3]
   1543c:	b	150f4 <__assert_fail@plt+0x4028>
   15440:	ldr	r3, [sp, #36]	; 0x24
   15444:	cmp	r3, #0
   15448:	beq	152b4 <__assert_fail@plt+0x41e8>
   1544c:	ldr	r3, [sp, #4]
   15450:	mov	r4, r9
   15454:	ldr	r1, [sp, #8]
   15458:	ldr	r6, [sp, #16]
   1545c:	ldr	r2, [r3]
   15460:	b	150f4 <__assert_fail@plt+0x4028>
   15464:	ldr	r3, [sp, #36]	; 0x24
   15468:	cmp	r3, #0
   1546c:	beq	154c4 <__assert_fail@plt+0x43f8>
   15470:	ldr	r3, [sp, #4]
   15474:	ldr	r1, [sp, #8]
   15478:	ldr	r2, [r3]
   1547c:	b	150f4 <__assert_fail@plt+0x4028>
   15480:	ldr	r0, [sl, #4]!
   15484:	cmp	r0, #0
   15488:	bne	15364 <__assert_fail@plt+0x4298>
   1548c:	mov	r1, r4
   15490:	mov	r0, r7
   15494:	bl	11048 <wcswidth@plt>
   15498:	cmp	r6, #0
   1549c:	mov	r4, r0
   154a0:	bne	15398 <__assert_fail@plt+0x42cc>
   154a4:	ldr	r3, [sp, #4]
   154a8:	ldr	r2, [r3]
   154ac:	cmp	r2, r4
   154b0:	bcs	1521c <__assert_fail@plt+0x4150>
   154b4:	add	r3, r9, #1
   154b8:	mov	r0, r3
   154bc:	str	r3, [sp, #32]
   154c0:	b	153b4 <__assert_fail@plt+0x42e8>
   154c4:	mov	r0, r7
   154c8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   154cc:	ldr	r0, [sp, #36]	; 0x24
   154d0:	bl	14c68 <__assert_fail@plt+0x3b9c>
   154d4:	b	152c4 <__assert_fail@plt+0x41f8>
   154d8:	mov	r4, r0
   154dc:	mov	sl, r7
   154e0:	b	15414 <__assert_fail@plt+0x4348>
   154e4:	mov	r1, r4
   154e8:	mov	r0, r7
   154ec:	bl	11048 <wcswidth@plt>
   154f0:	mov	r4, r0
   154f4:	b	154a4 <__assert_fail@plt+0x43d8>
   154f8:	strd	r4, [sp, #-16]!
   154fc:	subs	r4, r0, #0
   15500:	str	r6, [sp, #8]
   15504:	str	lr, [sp, #12]
   15508:	beq	155a0 <__assert_fail@plt+0x44d4>
   1550c:	mov	r1, #47	; 0x2f
   15510:	bl	11054 <strrchr@plt>
   15514:	subs	r5, r0, #0
   15518:	beq	15578 <__assert_fail@plt+0x44ac>
   1551c:	add	r6, r5, #1
   15520:	sub	r3, r6, r4
   15524:	cmp	r3, #6
   15528:	ble	15578 <__assert_fail@plt+0x44ac>
   1552c:	movw	r1, #56224	; 0xdba0
   15530:	movt	r1, #1
   15534:	mov	r2, #7
   15538:	sub	r0, r5, #6
   1553c:	bl	1109c <strncmp@plt>
   15540:	cmp	r0, #0
   15544:	bne	15578 <__assert_fail@plt+0x44ac>
   15548:	movw	r1, #56232	; 0xdba8
   1554c:	movt	r1, #1
   15550:	mov	r2, #3
   15554:	mov	r0, r6
   15558:	bl	1109c <strncmp@plt>
   1555c:	cmp	r0, #0
   15560:	movne	r4, r6
   15564:	bne	15578 <__assert_fail@plt+0x44ac>
   15568:	add	r4, r5, #4
   1556c:	movw	r3, #61824	; 0xf180
   15570:	movt	r3, #2
   15574:	str	r4, [r3]
   15578:	movw	r2, #61964	; 0xf20c
   1557c:	movt	r2, #2
   15580:	ldr	r6, [sp, #8]
   15584:	movw	r3, #61828	; 0xf184
   15588:	movt	r3, #2
   1558c:	str	r4, [r2]
   15590:	str	r4, [r3]
   15594:	ldrd	r4, [sp]
   15598:	add	sp, sp, #12
   1559c:	pop	{pc}		; (ldr pc, [sp], #4)
   155a0:	movw	r3, #61840	; 0xf190
   155a4:	movt	r3, #2
   155a8:	movw	r0, #56168	; 0xdb68
   155ac:	movt	r0, #1
   155b0:	ldr	r3, [r3]
   155b4:	mov	r2, #55	; 0x37
   155b8:	mov	r1, #1
   155bc:	bl	10ef8 <fwrite@plt>
   155c0:	bl	110a8 <abort@plt>
   155c4:	mov	r2, #5
   155c8:	strd	r4, [sp, #-16]!
   155cc:	mov	r5, r0
   155d0:	str	r6, [sp, #8]
   155d4:	mov	r6, r1
   155d8:	mov	r1, r0
   155dc:	mov	r0, #0
   155e0:	str	lr, [sp, #12]
   155e4:	bl	10ec8 <dcgettext@plt>
   155e8:	cmp	r5, r0
   155ec:	mov	r4, r0
   155f0:	beq	15608 <__assert_fail@plt+0x453c>
   155f4:	mov	r0, r4
   155f8:	ldrd	r4, [sp]
   155fc:	ldr	r6, [sp, #8]
   15600:	add	sp, sp, #12
   15604:	pop	{pc}		; (ldr pc, [sp], #4)
   15608:	bl	1b458 <__assert_fail@plt+0xa38c>
   1560c:	ldrb	r3, [r0]
   15610:	bic	r3, r3, #32
   15614:	cmp	r3, #85	; 0x55
   15618:	bne	15680 <__assert_fail@plt+0x45b4>
   1561c:	ldrb	r3, [r0, #1]
   15620:	bic	r3, r3, #32
   15624:	cmp	r3, #84	; 0x54
   15628:	bne	15700 <__assert_fail@plt+0x4634>
   1562c:	ldrb	r3, [r0, #2]
   15630:	bic	r3, r3, #32
   15634:	cmp	r3, #70	; 0x46
   15638:	bne	15700 <__assert_fail@plt+0x4634>
   1563c:	ldrb	r3, [r0, #3]
   15640:	cmp	r3, #45	; 0x2d
   15644:	bne	15700 <__assert_fail@plt+0x4634>
   15648:	ldrb	r3, [r0, #4]
   1564c:	cmp	r3, #56	; 0x38
   15650:	bne	15700 <__assert_fail@plt+0x4634>
   15654:	ldrb	r3, [r0, #5]
   15658:	cmp	r3, #0
   1565c:	bne	15700 <__assert_fail@plt+0x4634>
   15660:	ldrb	r2, [r4]
   15664:	movw	r3, #56324	; 0xdc04
   15668:	movt	r3, #1
   1566c:	movw	r4, #56336	; 0xdc10
   15670:	movt	r4, #1
   15674:	cmp	r2, #96	; 0x60
   15678:	movne	r4, r3
   1567c:	b	155f4 <__assert_fail@plt+0x4528>
   15680:	cmp	r3, #71	; 0x47
   15684:	bne	15700 <__assert_fail@plt+0x4634>
   15688:	ldrb	r3, [r0, #1]
   1568c:	bic	r3, r3, #32
   15690:	cmp	r3, #66	; 0x42
   15694:	bne	15700 <__assert_fail@plt+0x4634>
   15698:	ldrb	r3, [r0, #2]
   1569c:	cmp	r3, #49	; 0x31
   156a0:	bne	15700 <__assert_fail@plt+0x4634>
   156a4:	ldrb	r3, [r0, #3]
   156a8:	cmp	r3, #56	; 0x38
   156ac:	bne	15700 <__assert_fail@plt+0x4634>
   156b0:	ldrb	r3, [r0, #4]
   156b4:	cmp	r3, #48	; 0x30
   156b8:	bne	15700 <__assert_fail@plt+0x4634>
   156bc:	ldrb	r3, [r0, #5]
   156c0:	cmp	r3, #51	; 0x33
   156c4:	bne	15700 <__assert_fail@plt+0x4634>
   156c8:	ldrb	r3, [r0, #6]
   156cc:	cmp	r3, #48	; 0x30
   156d0:	bne	15700 <__assert_fail@plt+0x4634>
   156d4:	ldrb	r3, [r0, #7]
   156d8:	cmp	r3, #0
   156dc:	bne	15700 <__assert_fail@plt+0x4634>
   156e0:	ldrb	r2, [r4]
   156e4:	movw	r3, #56328	; 0xdc08
   156e8:	movt	r3, #1
   156ec:	movw	r4, #56332	; 0xdc0c
   156f0:	movt	r4, #1
   156f4:	cmp	r2, #96	; 0x60
   156f8:	movne	r4, r3
   156fc:	b	155f4 <__assert_fail@plt+0x4528>
   15700:	movw	r3, #56340	; 0xdc14
   15704:	movt	r3, #1
   15708:	cmp	r6, #9
   1570c:	movw	r4, #56320	; 0xdc00
   15710:	movt	r4, #1
   15714:	movne	r4, r3
   15718:	b	155f4 <__assert_fail@plt+0x4528>
   1571c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15720:	strd	r6, [sp, #8]
   15724:	strd	r8, [sp, #16]
   15728:	mov	r8, r3
   1572c:	strd	sl, [sp, #24]
   15730:	mov	fp, r0
   15734:	mov	sl, r1
   15738:	str	lr, [sp, #32]
   1573c:	sub	sp, sp, #140	; 0x8c
   15740:	ldr	r3, [sp, #180]	; 0xb4
   15744:	str	r2, [sp, #28]
   15748:	and	r4, r3, #2
   1574c:	ubfx	r3, r3, #1, #1
   15750:	str	r3, [sp, #44]	; 0x2c
   15754:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   15758:	ldr	r3, [sp, #176]	; 0xb0
   1575c:	str	r0, [sp, #76]	; 0x4c
   15760:	cmp	r3, #10
   15764:	ldrls	pc, [pc, r3, lsl #2]
   15768:	b	17104 <__assert_fail@plt+0x6038>
   1576c:	andeq	r5, r1, ip, ror #23
   15770:	andeq	r5, r1, r8, lsl #26
   15774:	andeq	r6, r1, r4, lsl #5
   15778:	andeq	r5, r1, r4, ror sp
   1577c:	strdeq	r5, [r1], -r4
   15780:	andeq	r5, r1, r0, ror fp
   15784:	andeq	r5, r1, r8, asr #24
   15788:			; <UNDEFINED> instruction: 0x00015cb0
   1578c:	muleq	r1, r8, r7
   15790:	muleq	r1, r8, r7
   15794:	muleq	r1, r8, r7
   15798:	ldr	r3, [sp, #176]	; 0xb0
   1579c:	cmp	r3, #10
   157a0:	beq	157cc <__assert_fail@plt+0x4700>
   157a4:	mov	r1, r3
   157a8:	movw	r0, #56344	; 0xdc18
   157ac:	movt	r0, #1
   157b0:	bl	155c4 <__assert_fail@plt+0x44f8>
   157b4:	str	r0, [sp, #188]	; 0xbc
   157b8:	movw	r0, #56340	; 0xdc14
   157bc:	movt	r0, #1
   157c0:	ldr	r1, [sp, #176]	; 0xb0
   157c4:	bl	155c4 <__assert_fail@plt+0x44f8>
   157c8:	str	r0, [sp, #192]	; 0xc0
   157cc:	cmp	r4, #0
   157d0:	movne	r4, #0
   157d4:	beq	16e90 <__assert_fail@plt+0x5dc4>
   157d8:	mov	r5, #0
   157dc:	ldr	r0, [sp, #192]	; 0xc0
   157e0:	mov	r9, r5
   157e4:	str	r5, [sp, #64]	; 0x40
   157e8:	bl	10fb8 <strlen@plt>
   157ec:	mov	r3, #1
   157f0:	ldr	r2, [sp, #44]	; 0x2c
   157f4:	cmp	r0, r5
   157f8:	moveq	r2, r5
   157fc:	str	r3, [sp, #32]
   15800:	str	r3, [sp, #48]	; 0x30
   15804:	str	r5, [sp, #52]	; 0x34
   15808:	str	r3, [sp, #60]	; 0x3c
   1580c:	ldr	r3, [sp, #180]	; 0xb4
   15810:	str	r0, [sp, #56]	; 0x38
   15814:	str	r5, [sp, #68]	; 0x44
   15818:	str	r5, [sp, #80]	; 0x50
   1581c:	str	r5, [sp, #84]	; 0x54
   15820:	and	r3, r3, #1
   15824:	str	r2, [sp, #88]	; 0x58
   15828:	str	r3, [sp, #92]	; 0x5c
   1582c:	ldr	r3, [sp, #180]	; 0xb4
   15830:	and	r3, r3, #4
   15834:	str	r3, [sp, #96]	; 0x60
   15838:	ldr	r3, [sp, #192]	; 0xc0
   1583c:	str	r3, [sp, #72]	; 0x48
   15840:	mov	r3, fp
   15844:	mov	r7, #0
   15848:	mov	fp, r9
   1584c:	mov	r9, r3
   15850:	cmn	r8, #1
   15854:	beq	15e58 <__assert_fail@plt+0x4d8c>
   15858:	subs	r6, r8, r7
   1585c:	movne	r6, #1
   15860:	cmp	r6, #0
   15864:	beq	15e70 <__assert_fail@plt+0x4da4>
   15868:	ldr	r0, [sp, #28]
   1586c:	ldr	r3, [sp, #48]	; 0x30
   15870:	cmp	r3, #0
   15874:	add	r3, r0, r7
   15878:	str	r3, [sp, #36]	; 0x24
   1587c:	beq	162fc <__assert_fail@plt+0x5230>
   15880:	ldr	r2, [sp, #56]	; 0x38
   15884:	cmp	r2, #0
   15888:	beq	167fc <__assert_fail@plt+0x5730>
   1588c:	cmp	r2, #1
   15890:	mov	r3, r2
   15894:	movls	r3, #0
   15898:	movhi	r3, #1
   1589c:	cmn	r8, #1
   158a0:	add	r5, r7, r2
   158a4:	movne	r3, #0
   158a8:	cmp	r3, #0
   158ac:	beq	158b8 <__assert_fail@plt+0x47ec>
   158b0:	bl	10fb8 <strlen@plt>
   158b4:	mov	r8, r0
   158b8:	cmp	r5, r8
   158bc:	bhi	167fc <__assert_fail@plt+0x5730>
   158c0:	ldr	r0, [sp, #36]	; 0x24
   158c4:	ldr	r2, [sp, #56]	; 0x38
   158c8:	ldr	r1, [sp, #72]	; 0x48
   158cc:	bl	10eb0 <memcmp@plt>
   158d0:	cmp	r0, #0
   158d4:	bne	167fc <__assert_fail@plt+0x5730>
   158d8:	ldr	r3, [sp, #44]	; 0x2c
   158dc:	cmp	r3, #0
   158e0:	bne	16fa8 <__assert_fail@plt+0x5edc>
   158e4:	ldr	r3, [sp, #36]	; 0x24
   158e8:	ldrb	r5, [r3]
   158ec:	cmp	r5, #126	; 0x7e
   158f0:	ldrls	pc, [pc, r5, lsl #2]
   158f4:	b	16d90 <__assert_fail@plt+0x5cc4>
   158f8:	andeq	r5, r1, ip, asr #31
   158fc:	muleq	r1, r0, sp
   15900:	muleq	r1, r0, sp
   15904:	muleq	r1, r0, sp
   15908:	muleq	r1, r0, sp
   1590c:	muleq	r1, r0, sp
   15910:	muleq	r1, r0, sp
   15914:	andeq	r5, r1, r4, lsr #30
   15918:	andeq	r5, r1, ip, lsl pc
   1591c:	andeq	r5, r1, ip, lsr #30
   15920:	strheq	r6, [r1], -r0
   15924:	andeq	r6, r1, r0, lsr #1
   15928:	andeq	r5, r1, r8, asr #27
   1592c:	andeq	r6, r1, ip, ror r0
   15930:	muleq	r1, r0, sp
   15934:	muleq	r1, r0, sp
   15938:	muleq	r1, r0, sp
   1593c:	muleq	r1, r0, sp
   15940:	muleq	r1, r0, sp
   15944:	muleq	r1, r0, sp
   15948:	muleq	r1, r0, sp
   1594c:	muleq	r1, r0, sp
   15950:	muleq	r1, r0, sp
   15954:	muleq	r1, r0, sp
   15958:	muleq	r1, r0, sp
   1595c:	muleq	r1, r0, sp
   15960:	muleq	r1, r0, sp
   15964:	muleq	r1, r0, sp
   15968:	muleq	r1, r0, sp
   1596c:	muleq	r1, r0, sp
   15970:	muleq	r1, r0, sp
   15974:	muleq	r1, r0, sp
   15978:	andeq	r6, r1, r8, lsr #2
   1597c:	andeq	r6, r1, ip, lsl r1
   15980:	andeq	r6, r1, ip, lsl r1
   15984:	andeq	r6, r1, r0, lsl r1
   15988:	andeq	r6, r1, ip, lsl r1
   1598c:	strdeq	r6, [r1], -r4
   15990:	andeq	r6, r1, ip, lsl r1
   15994:	andeq	r6, r1, r4, ror #4
   15998:	andeq	r6, r1, ip, lsl r1
   1599c:	andeq	r6, r1, ip, lsl r1
   159a0:	andeq	r6, r1, ip, lsl r1
   159a4:	strdeq	r6, [r1], -r4
   159a8:	strdeq	r6, [r1], -r4
   159ac:	strdeq	r6, [r1], -r4
   159b0:	strdeq	r6, [r1], -r4
   159b4:	strdeq	r6, [r1], -r4
   159b8:	strdeq	r6, [r1], -r4
   159bc:	strdeq	r6, [r1], -r4
   159c0:	strdeq	r6, [r1], -r4
   159c4:	strdeq	r6, [r1], -r4
   159c8:	strdeq	r6, [r1], -r4
   159cc:	strdeq	r6, [r1], -r4
   159d0:	strdeq	r6, [r1], -r4
   159d4:	strdeq	r6, [r1], -r4
   159d8:	strdeq	r6, [r1], -r4
   159dc:	strdeq	r6, [r1], -r4
   159e0:	strdeq	r6, [r1], -r4
   159e4:	andeq	r6, r1, ip, lsl r1
   159e8:	andeq	r6, r1, ip, lsl r1
   159ec:	andeq	r6, r1, ip, lsl r1
   159f0:	andeq	r6, r1, ip, lsl r1
   159f4:	andeq	r6, r1, r4, lsl r2
   159f8:	muleq	r1, r0, sp
   159fc:	strdeq	r6, [r1], -r4
   15a00:	strdeq	r6, [r1], -r4
   15a04:	strdeq	r6, [r1], -r4
   15a08:	strdeq	r6, [r1], -r4
   15a0c:	strdeq	r6, [r1], -r4
   15a10:	strdeq	r6, [r1], -r4
   15a14:	strdeq	r6, [r1], -r4
   15a18:	strdeq	r6, [r1], -r4
   15a1c:	strdeq	r6, [r1], -r4
   15a20:	strdeq	r6, [r1], -r4
   15a24:	strdeq	r6, [r1], -r4
   15a28:	strdeq	r6, [r1], -r4
   15a2c:	strdeq	r6, [r1], -r4
   15a30:	strdeq	r6, [r1], -r4
   15a34:	strdeq	r6, [r1], -r4
   15a38:	strdeq	r6, [r1], -r4
   15a3c:	strdeq	r6, [r1], -r4
   15a40:	strdeq	r6, [r1], -r4
   15a44:	strdeq	r6, [r1], -r4
   15a48:	strdeq	r6, [r1], -r4
   15a4c:	strdeq	r6, [r1], -r4
   15a50:	strdeq	r6, [r1], -r4
   15a54:	strdeq	r6, [r1], -r4
   15a58:	strdeq	r6, [r1], -r4
   15a5c:	strdeq	r6, [r1], -r4
   15a60:	strdeq	r6, [r1], -r4
   15a64:	andeq	r6, r1, ip, lsl r1
   15a68:			; <UNDEFINED> instruction: 0x000161b8
   15a6c:	strdeq	r6, [r1], -r4
   15a70:	andeq	r6, r1, ip, lsl r1
   15a74:	strdeq	r6, [r1], -r4
   15a78:	andeq	r6, r1, ip, lsl r1
   15a7c:	strdeq	r6, [r1], -r4
   15a80:	strdeq	r6, [r1], -r4
   15a84:	strdeq	r6, [r1], -r4
   15a88:	strdeq	r6, [r1], -r4
   15a8c:	strdeq	r6, [r1], -r4
   15a90:	strdeq	r6, [r1], -r4
   15a94:	strdeq	r6, [r1], -r4
   15a98:	strdeq	r6, [r1], -r4
   15a9c:	strdeq	r6, [r1], -r4
   15aa0:	strdeq	r6, [r1], -r4
   15aa4:	strdeq	r6, [r1], -r4
   15aa8:	strdeq	r6, [r1], -r4
   15aac:	strdeq	r6, [r1], -r4
   15ab0:	strdeq	r6, [r1], -r4
   15ab4:	strdeq	r6, [r1], -r4
   15ab8:	strdeq	r6, [r1], -r4
   15abc:	strdeq	r6, [r1], -r4
   15ac0:	strdeq	r6, [r1], -r4
   15ac4:	strdeq	r6, [r1], -r4
   15ac8:	strdeq	r6, [r1], -r4
   15acc:	strdeq	r6, [r1], -r4
   15ad0:	strdeq	r6, [r1], -r4
   15ad4:	strdeq	r6, [r1], -r4
   15ad8:	strdeq	r6, [r1], -r4
   15adc:	strdeq	r6, [r1], -r4
   15ae0:	strdeq	r6, [r1], -r4
   15ae4:	andeq	r6, r1, r4, asr #1
   15ae8:	andeq	r6, r1, ip, lsl r1
   15aec:	andeq	r6, r1, r4, asr #1
   15af0:	andeq	r6, r1, r0, lsl r1
   15af4:	ldr	r3, [sp, #180]	; 0xb4
   15af8:	cmp	r4, #0
   15afc:	and	r3, r3, #1
   15b00:	str	r3, [sp, #92]	; 0x5c
   15b04:	ldr	r3, [sp, #180]	; 0xb4
   15b08:	and	r3, r3, #4
   15b0c:	str	r3, [sp, #96]	; 0x60
   15b10:	moveq	r3, #1
   15b14:	streq	r3, [sp, #60]	; 0x3c
   15b18:	beq	162a8 <__assert_fail@plt+0x51dc>
   15b1c:	mov	r3, #0
   15b20:	mov	r2, #1
   15b24:	mov	r4, r3
   15b28:	mov	r9, r3
   15b2c:	str	r2, [sp, #32]
   15b30:	str	r2, [sp, #44]	; 0x2c
   15b34:	str	r3, [sp, #48]	; 0x30
   15b38:	str	r2, [sp, #52]	; 0x34
   15b3c:	str	r2, [sp, #56]	; 0x38
   15b40:	str	r3, [sp, #60]	; 0x3c
   15b44:	str	r2, [sp, #64]	; 0x40
   15b48:	str	r2, [sp, #68]	; 0x44
   15b4c:	str	r3, [sp, #80]	; 0x50
   15b50:	str	r3, [sp, #84]	; 0x54
   15b54:	str	r3, [sp, #88]	; 0x58
   15b58:	movw	r3, #56340	; 0xdc14
   15b5c:	movt	r3, #1
   15b60:	str	r3, [sp, #72]	; 0x48
   15b64:	mov	r3, #2
   15b68:	str	r3, [sp, #176]	; 0xb0
   15b6c:	b	15840 <__assert_fail@plt+0x4774>
   15b70:	ldr	r3, [sp, #180]	; 0xb4
   15b74:	cmp	r4, #0
   15b78:	and	r3, r3, #1
   15b7c:	str	r3, [sp, #92]	; 0x5c
   15b80:	ldr	r3, [sp, #180]	; 0xb4
   15b84:	and	r3, r3, #4
   15b88:	str	r3, [sp, #96]	; 0x60
   15b8c:	bne	16f60 <__assert_fail@plt+0x5e94>
   15b90:	cmp	sl, #0
   15b94:	beq	16d0c <__assert_fail@plt+0x5c40>
   15b98:	mov	r3, #34	; 0x22
   15b9c:	mov	r2, r4
   15ba0:	mov	r1, #1
   15ba4:	mov	r9, r2
   15ba8:	strb	r3, [fp]
   15bac:	movw	r3, #56320	; 0xdc00
   15bb0:	movt	r3, #1
   15bb4:	mov	r4, r1
   15bb8:	str	r1, [sp, #32]
   15bbc:	str	r2, [sp, #44]	; 0x2c
   15bc0:	str	r1, [sp, #48]	; 0x30
   15bc4:	str	r2, [sp, #52]	; 0x34
   15bc8:	str	r1, [sp, #56]	; 0x38
   15bcc:	str	r1, [sp, #60]	; 0x3c
   15bd0:	str	r2, [sp, #64]	; 0x40
   15bd4:	str	r2, [sp, #68]	; 0x44
   15bd8:	str	r3, [sp, #72]	; 0x48
   15bdc:	str	r2, [sp, #80]	; 0x50
   15be0:	str	r2, [sp, #84]	; 0x54
   15be4:	str	r2, [sp, #88]	; 0x58
   15be8:	b	15840 <__assert_fail@plt+0x4774>
   15bec:	mov	r3, #0
   15bf0:	mov	r2, #1
   15bf4:	mov	r9, r3
   15bf8:	str	r2, [sp, #32]
   15bfc:	str	r3, [sp, #44]	; 0x2c
   15c00:	str	r3, [sp, #48]	; 0x30
   15c04:	str	r3, [sp, #52]	; 0x34
   15c08:	str	r3, [sp, #60]	; 0x3c
   15c0c:	strd	r2, [sp, #64]	; 0x40
   15c10:	str	r3, [sp, #72]	; 0x48
   15c14:	str	r3, [sp, #80]	; 0x50
   15c18:	str	r3, [sp, #88]	; 0x58
   15c1c:	ldr	r3, [sp, #180]	; 0xb4
   15c20:	and	r3, r3, r2
   15c24:	str	r3, [sp, #92]	; 0x5c
   15c28:	ldr	r3, [sp, #180]	; 0xb4
   15c2c:	and	r3, r3, #4
   15c30:	str	r3, [sp, #96]	; 0x60
   15c34:	ldr	r3, [sp, #176]	; 0xb0
   15c38:	mov	r4, r3
   15c3c:	str	r3, [sp, #56]	; 0x38
   15c40:	str	r3, [sp, #84]	; 0x54
   15c44:	b	15840 <__assert_fail@plt+0x4774>
   15c48:	mov	r3, #1
   15c4c:	mov	r4, #0
   15c50:	mov	r9, r4
   15c54:	str	r3, [sp, #32]
   15c58:	str	r3, [sp, #44]	; 0x2c
   15c5c:	str	r3, [sp, #48]	; 0x30
   15c60:	str	r4, [sp, #52]	; 0x34
   15c64:	str	r3, [sp, #56]	; 0x38
   15c68:	str	r3, [sp, #60]	; 0x3c
   15c6c:	str	r3, [sp, #88]	; 0x58
   15c70:	movw	r3, #56320	; 0xdc00
   15c74:	movt	r3, #1
   15c78:	str	r4, [sp, #64]	; 0x40
   15c7c:	str	r4, [sp, #68]	; 0x44
   15c80:	str	r3, [sp, #72]	; 0x48
   15c84:	ldr	r3, [sp, #180]	; 0xb4
   15c88:	str	r4, [sp, #80]	; 0x50
   15c8c:	str	r4, [sp, #84]	; 0x54
   15c90:	and	r3, r3, #1
   15c94:	str	r3, [sp, #92]	; 0x5c
   15c98:	ldr	r3, [sp, #180]	; 0xb4
   15c9c:	and	r3, r3, #4
   15ca0:	str	r3, [sp, #96]	; 0x60
   15ca4:	mov	r3, #5
   15ca8:	str	r3, [sp, #176]	; 0xb0
   15cac:	b	15840 <__assert_fail@plt+0x4774>
   15cb0:	mov	r3, #1
   15cb4:	mov	r4, #0
   15cb8:	mov	r9, r4
   15cbc:	str	r3, [sp, #32]
   15cc0:	str	r4, [sp, #44]	; 0x2c
   15cc4:	str	r3, [sp, #48]	; 0x30
   15cc8:	str	r3, [sp, #60]	; 0x3c
   15ccc:	ldr	r3, [sp, #180]	; 0xb4
   15cd0:	str	r4, [sp, #52]	; 0x34
   15cd4:	str	r4, [sp, #56]	; 0x38
   15cd8:	str	r4, [sp, #64]	; 0x40
   15cdc:	str	r4, [sp, #68]	; 0x44
   15ce0:	and	r3, r3, #1
   15ce4:	str	r4, [sp, #72]	; 0x48
   15ce8:	str	r4, [sp, #80]	; 0x50
   15cec:	str	r4, [sp, #84]	; 0x54
   15cf0:	str	r3, [sp, #92]	; 0x5c
   15cf4:	ldr	r3, [sp, #180]	; 0xb4
   15cf8:	str	r4, [sp, #88]	; 0x58
   15cfc:	and	r3, r3, #4
   15d00:	str	r3, [sp, #96]	; 0x60
   15d04:	b	15840 <__assert_fail@plt+0x4774>
   15d08:	mov	r3, #0
   15d0c:	mov	r2, #1
   15d10:	ldr	r1, [sp, #176]	; 0xb0
   15d14:	mov	r4, r3
   15d18:	mov	r9, r3
   15d1c:	movw	r3, #56340	; 0xdc14
   15d20:	movt	r3, #1
   15d24:	str	r2, [sp, #32]
   15d28:	str	r2, [sp, #44]	; 0x2c
   15d2c:	str	r4, [sp, #48]	; 0x30
   15d30:	strd	r2, [sp, #68]	; 0x44
   15d34:	ldr	r3, [sp, #180]	; 0xb4
   15d38:	str	r2, [sp, #52]	; 0x34
   15d3c:	str	r1, [sp, #56]	; 0x38
   15d40:	str	r4, [sp, #60]	; 0x3c
   15d44:	str	r2, [sp, #64]	; 0x40
   15d48:	and	r3, r3, r2
   15d4c:	str	r4, [sp, #80]	; 0x50
   15d50:	str	r4, [sp, #84]	; 0x54
   15d54:	str	r4, [sp, #88]	; 0x58
   15d58:	str	r3, [sp, #92]	; 0x5c
   15d5c:	ldr	r3, [sp, #180]	; 0xb4
   15d60:	and	r3, r3, #4
   15d64:	str	r3, [sp, #96]	; 0x60
   15d68:	mov	r3, #2
   15d6c:	str	r3, [sp, #176]	; 0xb0
   15d70:	b	15840 <__assert_fail@plt+0x4774>
   15d74:	mov	r3, #1
   15d78:	mov	r2, #0
   15d7c:	mov	r4, r2
   15d80:	mov	r9, r2
   15d84:	str	r3, [sp, #32]
   15d88:	str	r3, [sp, #44]	; 0x2c
   15d8c:	str	r2, [sp, #48]	; 0x30
   15d90:	str	r3, [sp, #52]	; 0x34
   15d94:	str	r3, [sp, #56]	; 0x38
   15d98:	str	r3, [sp, #60]	; 0x3c
   15d9c:	str	r3, [sp, #64]	; 0x40
   15da0:	str	r3, [sp, #68]	; 0x44
   15da4:	str	r3, [sp, #88]	; 0x58
   15da8:	movw	r3, #56340	; 0xdc14
   15dac:	movt	r3, #1
   15db0:	str	r3, [sp, #72]	; 0x48
   15db4:	ldr	r3, [sp, #180]	; 0xb4
   15db8:	str	r2, [sp, #80]	; 0x50
   15dbc:	str	r2, [sp, #84]	; 0x54
   15dc0:	and	r3, r3, #1
   15dc4:	b	15d58 <__assert_fail@plt+0x4c8c>
   15dc8:	mov	r5, #102	; 0x66
   15dcc:	mov	r6, #0
   15dd0:	ldr	r3, [sp, #44]	; 0x2c
   15dd4:	cmp	r3, #0
   15dd8:	bne	16c88 <__assert_fail@plt+0x5bbc>
   15ddc:	ldr	r2, [sp, #52]	; 0x34
   15de0:	eor	r3, fp, #1
   15de4:	ands	r3, r2, r3
   15de8:	beq	15e20 <__assert_fail@plt+0x4d54>
   15dec:	cmp	sl, r4
   15df0:	mov	fp, r3
   15df4:	movhi	r2, #39	; 0x27
   15df8:	strbhi	r2, [r9, r4]
   15dfc:	add	r2, r4, #1
   15e00:	cmp	sl, r2
   15e04:	movhi	r1, #36	; 0x24
   15e08:	strbhi	r1, [r9, r2]
   15e0c:	add	r2, r4, #2
   15e10:	add	r4, r4, #3
   15e14:	cmp	sl, r2
   15e18:	movhi	r1, #39	; 0x27
   15e1c:	strbhi	r1, [r9, r2]
   15e20:	cmp	sl, r4
   15e24:	add	r7, r7, #1
   15e28:	movhi	r3, #92	; 0x5c
   15e2c:	strbhi	r3, [r9, r4]
   15e30:	add	r4, r4, #1
   15e34:	cmp	r4, sl
   15e38:	ldr	r3, [sp, #32]
   15e3c:	strbcc	r5, [r9, r4]
   15e40:	cmp	r6, #0
   15e44:	add	r4, r4, #1
   15e48:	moveq	r3, #0
   15e4c:	cmn	r8, #1
   15e50:	str	r3, [sp, #32]
   15e54:	bne	15858 <__assert_fail@plt+0x478c>
   15e58:	ldr	r3, [sp, #28]
   15e5c:	ldrb	r6, [r3, r7]
   15e60:	adds	r6, r6, #0
   15e64:	movne	r6, #1
   15e68:	cmp	r6, #0
   15e6c:	bne	15868 <__assert_fail@plt+0x479c>
   15e70:	mov	r3, r9
   15e74:	mov	r9, fp
   15e78:	mov	fp, r3
   15e7c:	ldr	r3, [sp, #68]	; 0x44
   15e80:	cmp	r4, #0
   15e84:	movne	r3, #0
   15e88:	cmp	r3, #0
   15e8c:	bne	17080 <__assert_fail@plt+0x5fb4>
   15e90:	ldr	r3, [sp, #44]	; 0x2c
   15e94:	ldr	r2, [sp, #52]	; 0x34
   15e98:	eor	r3, r3, #1
   15e9c:	ands	r2, r3, r2
   15ea0:	beq	16fb8 <__assert_fail@plt+0x5eec>
   15ea4:	ldr	r3, [sp, #80]	; 0x50
   15ea8:	cmp	r3, #0
   15eac:	beq	16fbc <__assert_fail@plt+0x5ef0>
   15eb0:	ldr	r3, [sp, #32]
   15eb4:	cmp	r3, #0
   15eb8:	bne	17030 <__assert_fail@plt+0x5f64>
   15ebc:	ldr	r3, [sp, #84]	; 0x54
   15ec0:	adds	r3, r3, #0
   15ec4:	movne	r3, #1
   15ec8:	cmp	sl, #0
   15ecc:	movne	r3, #0
   15ed0:	cmp	r3, #0
   15ed4:	ldreq	r2, [sp, #80]	; 0x50
   15ed8:	beq	16fbc <__assert_fail@plt+0x5ef0>
   15edc:	ldr	r2, [sp, #84]	; 0x54
   15ee0:	mov	sl, r2
   15ee4:	mov	r0, #0
   15ee8:	mov	r4, #1
   15eec:	mov	r1, #39	; 0x27
   15ef0:	str	r0, [sp, #44]	; 0x2c
   15ef4:	strb	r1, [fp]
   15ef8:	str	r0, [sp, #48]	; 0x30
   15efc:	str	r4, [sp, #52]	; 0x34
   15f00:	str	r4, [sp, #56]	; 0x38
   15f04:	str	r4, [sp, #64]	; 0x40
   15f08:	str	r0, [sp, #68]	; 0x44
   15f0c:	str	r3, [sp, #80]	; 0x50
   15f10:	str	r2, [sp, #84]	; 0x54
   15f14:	str	r0, [sp, #88]	; 0x58
   15f18:	b	15b58 <__assert_fail@plt+0x4a8c>
   15f1c:	mov	r5, #98	; 0x62
   15f20:	b	15dcc <__assert_fail@plt+0x4d00>
   15f24:	mov	r5, #97	; 0x61
   15f28:	b	15dcc <__assert_fail@plt+0x4d00>
   15f2c:	ldr	r3, [sp, #48]	; 0x30
   15f30:	str	r3, [sp, #40]	; 0x28
   15f34:	mov	r3, #116	; 0x74
   15f38:	ldr	r2, [sp, #68]	; 0x44
   15f3c:	cmp	r2, #0
   15f40:	bne	1613c <__assert_fail@plt+0x5070>
   15f44:	ldr	r2, [sp, #60]	; 0x3c
   15f48:	cmp	r2, #0
   15f4c:	bne	16098 <__assert_fail@plt+0x4fcc>
   15f50:	ldr	r3, [sp, #44]	; 0x2c
   15f54:	mov	r6, #0
   15f58:	cmp	r3, #0
   15f5c:	beq	16108 <__assert_fail@plt+0x503c>
   15f60:	mov	r3, fp
   15f64:	ldr	r2, [sp, #184]	; 0xb8
   15f68:	cmp	r2, #0
   15f6c:	beq	15f8c <__assert_fail@plt+0x4ec0>
   15f70:	ubfx	r1, r5, #5, #8
   15f74:	mov	r0, r2
   15f78:	and	r2, r5, #31
   15f7c:	ldr	r1, [r0, r1, lsl #2]
   15f80:	lsr	r2, r1, r2
   15f84:	tst	r2, #1
   15f88:	bne	15dd0 <__assert_fail@plt+0x4d04>
   15f8c:	ldr	r2, [sp, #40]	; 0x28
   15f90:	cmp	r2, #0
   15f94:	addeq	r7, r7, #1
   15f98:	bne	15dd0 <__assert_fail@plt+0x4d04>
   15f9c:	cmp	r3, #0
   15fa0:	beq	15e34 <__assert_fail@plt+0x4d68>
   15fa4:	cmp	sl, r4
   15fa8:	mov	fp, #0
   15fac:	movhi	r3, #39	; 0x27
   15fb0:	strbhi	r3, [r9, r4]
   15fb4:	add	r3, r4, #1
   15fb8:	add	r4, r4, #2
   15fbc:	cmp	sl, r3
   15fc0:	movhi	r2, #39	; 0x27
   15fc4:	strbhi	r2, [r9, r3]
   15fc8:	b	15e34 <__assert_fail@plt+0x4d68>
   15fcc:	ldr	r3, [sp, #48]	; 0x30
   15fd0:	str	r3, [sp, #40]	; 0x28
   15fd4:	eor	r3, fp, #1
   15fd8:	ldr	r2, [sp, #52]	; 0x34
   15fdc:	ands	r2, r2, r3
   15fe0:	beq	16ca0 <__assert_fail@plt+0x5bd4>
   15fe4:	cmp	sl, r4
   15fe8:	movhi	r3, #39	; 0x27
   15fec:	strbhi	r3, [r9, r4]
   15ff0:	add	r3, r4, #1
   15ff4:	cmp	sl, r3
   15ff8:	movhi	r1, #36	; 0x24
   15ffc:	strbhi	r1, [r9, r3]
   16000:	add	r3, r4, #2
   16004:	cmp	sl, r3
   16008:	movhi	r1, #39	; 0x27
   1600c:	strbhi	r1, [r9, r3]
   16010:	add	r3, r4, #3
   16014:	cmp	sl, r3
   16018:	bls	16cec <__assert_fail@plt+0x5c20>
   1601c:	mov	r4, r3
   16020:	mov	r3, #92	; 0x5c
   16024:	mov	fp, r2
   16028:	mov	r2, r4
   1602c:	strb	r3, [r9, r4]
   16030:	ldr	r3, [sp, #176]	; 0xb0
   16034:	add	r4, r4, #1
   16038:	cmp	r3, #2
   1603c:	beq	16d54 <__assert_fail@plt+0x5c88>
   16040:	add	r3, r7, #1
   16044:	cmp	r3, r8
   16048:	bcs	16060 <__assert_fail@plt+0x4f94>
   1604c:	ldr	r1, [sp, #28]
   16050:	ldrb	r3, [r1, r3]
   16054:	sub	r3, r3, #48	; 0x30
   16058:	cmp	r3, #9
   1605c:	bls	16d64 <__assert_fail@plt+0x5c98>
   16060:	mov	r3, #0
   16064:	mov	r5, #48	; 0x30
   16068:	ldr	r6, [sp, #64]	; 0x40
   1606c:	cmp	r6, #0
   16070:	beq	15f64 <__assert_fail@plt+0x4e98>
   16074:	mov	r6, #0
   16078:	b	15f8c <__assert_fail@plt+0x4ec0>
   1607c:	ldr	r3, [sp, #48]	; 0x30
   16080:	str	r3, [sp, #40]	; 0x28
   16084:	ldr	r2, [sp, #60]	; 0x3c
   16088:	mov	r5, #13
   1608c:	mov	r3, #114	; 0x72
   16090:	cmp	r2, #0
   16094:	beq	15f50 <__assert_fail@plt+0x4e84>
   16098:	mov	r5, r3
   1609c:	b	15dcc <__assert_fail@plt+0x4d00>
   160a0:	ldr	r3, [sp, #48]	; 0x30
   160a4:	str	r3, [sp, #40]	; 0x28
   160a8:	mov	r3, #118	; 0x76
   160ac:	b	15f44 <__assert_fail@plt+0x4e78>
   160b0:	ldr	r3, [sp, #48]	; 0x30
   160b4:	str	r3, [sp, #40]	; 0x28
   160b8:	mov	r5, #10
   160bc:	mov	r3, #110	; 0x6e
   160c0:	b	15f44 <__assert_fail@plt+0x4e78>
   160c4:	ldr	r3, [sp, #48]	; 0x30
   160c8:	cmn	r8, #1
   160cc:	str	r3, [sp, #40]	; 0x28
   160d0:	beq	16518 <__assert_fail@plt+0x544c>
   160d4:	subs	r3, r8, #1
   160d8:	movne	r3, #1
   160dc:	cmp	r3, #0
   160e0:	bne	160ec <__assert_fail@plt+0x5020>
   160e4:	cmp	r7, #0
   160e8:	beq	16130 <__assert_fail@plt+0x5064>
   160ec:	mov	r6, #0
   160f0:	ldr	r3, [sp, #64]	; 0x40
   160f4:	cmp	r3, #0
   160f8:	beq	15f60 <__assert_fail@plt+0x4e94>
   160fc:	ldr	r3, [sp, #44]	; 0x2c
   16100:	cmp	r3, #0
   16104:	bne	15f60 <__assert_fail@plt+0x4e94>
   16108:	mov	r3, fp
   1610c:	b	15f8c <__assert_fail@plt+0x4ec0>
   16110:	ldr	r3, [sp, #48]	; 0x30
   16114:	str	r3, [sp, #40]	; 0x28
   16118:	b	160e4 <__assert_fail@plt+0x5018>
   1611c:	ldr	r3, [sp, #48]	; 0x30
   16120:	str	r3, [sp, #40]	; 0x28
   16124:	b	160ec <__assert_fail@plt+0x5020>
   16128:	ldr	r6, [sp, #48]	; 0x30
   1612c:	str	r6, [sp, #40]	; 0x28
   16130:	ldr	r3, [sp, #68]	; 0x44
   16134:	cmp	r3, #0
   16138:	beq	160f0 <__assert_fail@plt+0x5024>
   1613c:	mov	r3, #2
   16140:	mov	fp, r9
   16144:	str	r3, [sp, #176]	; 0xb0
   16148:	ldr	r3, [sp, #60]	; 0x3c
   1614c:	cmp	r3, #0
   16150:	ldr	r3, [sp, #176]	; 0xb0
   16154:	movne	r3, #4
   16158:	str	r3, [sp, #176]	; 0xb0
   1615c:	mov	lr, #0
   16160:	mov	r0, fp
   16164:	ldr	r2, [sp, #28]
   16168:	ldr	r3, [sp, #180]	; 0xb4
   1616c:	ldr	r1, [sp, #188]	; 0xbc
   16170:	bic	ip, r3, #2
   16174:	ldr	r3, [sp, #176]	; 0xb0
   16178:	stm	sp, {r3, ip, lr}
   1617c:	mov	r3, r8
   16180:	ldr	ip, [sp, #192]	; 0xc0
   16184:	str	r1, [sp, #12]
   16188:	mov	r1, sl
   1618c:	str	ip, [sp, #16]
   16190:	bl	1571c <__assert_fail@plt+0x4650>
   16194:	mov	r4, r0
   16198:	mov	r0, r4
   1619c:	add	sp, sp, #140	; 0x8c
   161a0:	ldrd	r4, [sp]
   161a4:	ldrd	r6, [sp, #8]
   161a8:	ldrd	r8, [sp, #16]
   161ac:	ldrd	sl, [sp, #24]
   161b0:	add	sp, sp, #32
   161b4:	pop	{pc}		; (ldr pc, [sp], #4)
   161b8:	ldr	r3, [sp, #48]	; 0x30
   161bc:	str	r3, [sp, #40]	; 0x28
   161c0:	ldr	r3, [sp, #176]	; 0xb0
   161c4:	cmp	r3, #2
   161c8:	beq	16540 <__assert_fail@plt+0x5474>
   161cc:	ldr	r3, [sp, #88]	; 0x58
   161d0:	cmp	r3, #0
   161d4:	moveq	r5, #92	; 0x5c
   161d8:	moveq	r3, r5
   161dc:	beq	15f44 <__assert_fail@plt+0x4e78>
   161e0:	add	r7, r7, #1
   161e4:	mov	r3, fp
   161e8:	mov	r6, #0
   161ec:	mov	r5, #92	; 0x5c
   161f0:	b	15f9c <__assert_fail@plt+0x4ed0>
   161f4:	ldr	r3, [sp, #64]	; 0x40
   161f8:	cmp	r3, #0
   161fc:	bne	17074 <__assert_fail@plt+0x5fa8>
   16200:	ldr	r2, [sp, #48]	; 0x30
   16204:	mov	r3, fp
   16208:	mov	r6, r2
   1620c:	str	r2, [sp, #40]	; 0x28
   16210:	b	15f64 <__assert_fail@plt+0x4e98>
   16214:	ldr	r3, [sp, #176]	; 0xb0
   16218:	cmp	r3, #2
   1621c:	beq	16fb0 <__assert_fail@plt+0x5ee4>
   16220:	cmp	r3, #5
   16224:	ldr	r3, [sp, #48]	; 0x30
   16228:	str	r3, [sp, #40]	; 0x28
   1622c:	bne	16258 <__assert_fail@plt+0x518c>
   16230:	ldr	r3, [sp, #96]	; 0x60
   16234:	cmp	r3, #0
   16238:	beq	16cb4 <__assert_fail@plt+0x5be8>
   1623c:	add	r3, r7, #2
   16240:	cmp	r3, r8
   16244:	bcs	16258 <__assert_fail@plt+0x518c>
   16248:	ldr	r2, [sp, #36]	; 0x24
   1624c:	ldrb	r5, [r2, #1]
   16250:	cmp	r5, #63	; 0x3f
   16254:	beq	16d9c <__assert_fail@plt+0x5cd0>
   16258:	mov	r6, #0
   1625c:	mov	r5, #63	; 0x3f
   16260:	b	160f0 <__assert_fail@plt+0x5024>
   16264:	ldr	r3, [sp, #176]	; 0xb0
   16268:	cmp	r3, #2
   1626c:	ldr	r3, [sp, #48]	; 0x30
   16270:	beq	16a58 <__assert_fail@plt+0x598c>
   16274:	mov	r5, #39	; 0x27
   16278:	str	r3, [sp, #40]	; 0x28
   1627c:	str	r6, [sp, #80]	; 0x50
   16280:	b	160f0 <__assert_fail@plt+0x5024>
   16284:	ldr	r3, [sp, #180]	; 0xb4
   16288:	cmp	r4, #0
   1628c:	and	r3, r3, #1
   16290:	str	r3, [sp, #92]	; 0x5c
   16294:	ldr	r3, [sp, #180]	; 0xb4
   16298:	and	r3, r3, #4
   1629c:	str	r3, [sp, #96]	; 0x60
   162a0:	bne	170c0 <__assert_fail@plt+0x5ff4>
   162a4:	str	r4, [sp, #60]	; 0x3c
   162a8:	cmp	sl, #0
   162ac:	bne	170a4 <__assert_fail@plt+0x5fd8>
   162b0:	mov	r3, #1
   162b4:	movw	r2, #56340	; 0xdc14
   162b8:	movt	r2, #1
   162bc:	mov	r4, r3
   162c0:	mov	r3, #2
   162c4:	mov	r9, sl
   162c8:	str	r4, [sp, #32]
   162cc:	str	sl, [sp, #44]	; 0x2c
   162d0:	str	sl, [sp, #48]	; 0x30
   162d4:	str	r4, [sp, #52]	; 0x34
   162d8:	str	r4, [sp, #56]	; 0x38
   162dc:	str	r4, [sp, #64]	; 0x40
   162e0:	str	sl, [sp, #68]	; 0x44
   162e4:	str	r2, [sp, #72]	; 0x48
   162e8:	str	sl, [sp, #80]	; 0x50
   162ec:	str	sl, [sp, #84]	; 0x54
   162f0:	str	sl, [sp, #88]	; 0x58
   162f4:	str	r3, [sp, #176]	; 0xb0
   162f8:	b	15840 <__assert_fail@plt+0x4774>
   162fc:	ldrb	r5, [r0, r7]
   16300:	cmp	r5, #126	; 0x7e
   16304:	ldrls	pc, [pc, r5, lsl #2]
   16308:	b	1666c <__assert_fail@plt+0x55a0>
   1630c:	andeq	r6, r1, r8, lsr r6
   16310:	andeq	r6, r1, ip, ror #12
   16314:	andeq	r6, r1, ip, ror #12
   16318:	andeq	r6, r1, ip, ror #12
   1631c:	andeq	r6, r1, ip, ror #12
   16320:	andeq	r6, r1, ip, ror #12
   16324:	andeq	r6, r1, ip, ror #12
   16328:	andeq	r6, r1, r8, lsr #12
   1632c:	andeq	r6, r1, r8, lsl r6
   16330:	muleq	r1, ip, r5
   16334:	andeq	r6, r1, r8, lsl #12
   16338:	andeq	r6, r1, ip, ror r5
   1633c:	andeq	r6, r1, ip, asr r6
   16340:	andeq	r6, r1, r8, ror #11
   16344:	andeq	r6, r1, ip, ror #12
   16348:	andeq	r6, r1, ip, ror #12
   1634c:	andeq	r6, r1, ip, ror #12
   16350:	andeq	r6, r1, ip, ror #12
   16354:	andeq	r6, r1, ip, ror #12
   16358:	andeq	r6, r1, ip, ror #12
   1635c:	andeq	r6, r1, ip, ror #12
   16360:	andeq	r6, r1, ip, ror #12
   16364:	andeq	r6, r1, ip, ror #12
   16368:	andeq	r6, r1, ip, ror #12
   1636c:	andeq	r6, r1, ip, ror #12
   16370:	andeq	r6, r1, ip, ror #12
   16374:	andeq	r6, r1, ip, ror #12
   16378:	andeq	r6, r1, ip, ror #12
   1637c:	andeq	r6, r1, ip, ror #12
   16380:	andeq	r6, r1, ip, ror #12
   16384:	andeq	r6, r1, ip, ror #12
   16388:	andeq	r6, r1, ip, ror #12
   1638c:	muleq	r1, r0, r5
   16390:	strdeq	r6, [r1], -r8
   16394:	strdeq	r6, [r1], -r8
   16398:	andeq	r6, r1, r0, ror r5
   1639c:	strdeq	r6, [r1], -r8
   163a0:	andeq	r6, r1, r4, ror #10
   163a4:	strdeq	r6, [r1], -r8
   163a8:	ldrdeq	r6, [r1], -r4
   163ac:	strdeq	r6, [r1], -r8
   163b0:	strdeq	r6, [r1], -r8
   163b4:	strdeq	r6, [r1], -r8
   163b8:	andeq	r6, r1, r4, ror #10
   163bc:	andeq	r6, r1, r4, ror #10
   163c0:	andeq	r6, r1, r4, ror #10
   163c4:	andeq	r6, r1, r4, ror #10
   163c8:	andeq	r6, r1, r4, ror #10
   163cc:	andeq	r6, r1, r4, ror #10
   163d0:	andeq	r6, r1, r4, ror #10
   163d4:	andeq	r6, r1, r4, ror #10
   163d8:	andeq	r6, r1, r4, ror #10
   163dc:	andeq	r6, r1, r4, ror #10
   163e0:	andeq	r6, r1, r4, ror #10
   163e4:	andeq	r6, r1, r4, ror #10
   163e8:	andeq	r6, r1, r4, ror #10
   163ec:	andeq	r6, r1, r4, ror #10
   163f0:	andeq	r6, r1, r4, ror #10
   163f4:	andeq	r6, r1, r4, ror #10
   163f8:	strdeq	r6, [r1], -r8
   163fc:	strdeq	r6, [r1], -r8
   16400:	strdeq	r6, [r1], -r8
   16404:	strdeq	r6, [r1], -r8
   16408:	andeq	r6, r1, ip, lsr #11
   1640c:	andeq	r6, r1, ip, ror #12
   16410:	andeq	r6, r1, r4, ror #10
   16414:	andeq	r6, r1, r4, ror #10
   16418:	andeq	r6, r1, r4, ror #10
   1641c:	andeq	r6, r1, r4, ror #10
   16420:	andeq	r6, r1, r4, ror #10
   16424:	andeq	r6, r1, r4, ror #10
   16428:	andeq	r6, r1, r4, ror #10
   1642c:	andeq	r6, r1, r4, ror #10
   16430:	andeq	r6, r1, r4, ror #10
   16434:	andeq	r6, r1, r4, ror #10
   16438:	andeq	r6, r1, r4, ror #10
   1643c:	andeq	r6, r1, r4, ror #10
   16440:	andeq	r6, r1, r4, ror #10
   16444:	andeq	r6, r1, r4, ror #10
   16448:	andeq	r6, r1, r4, ror #10
   1644c:	andeq	r6, r1, r4, ror #10
   16450:	andeq	r6, r1, r4, ror #10
   16454:	andeq	r6, r1, r4, ror #10
   16458:	andeq	r6, r1, r4, ror #10
   1645c:	andeq	r6, r1, r4, ror #10
   16460:	andeq	r6, r1, r4, ror #10
   16464:	andeq	r6, r1, r4, ror #10
   16468:	andeq	r6, r1, r4, ror #10
   1646c:	andeq	r6, r1, r4, ror #10
   16470:	andeq	r6, r1, r4, ror #10
   16474:	andeq	r6, r1, r4, ror #10
   16478:	strdeq	r6, [r1], -r8
   1647c:	andeq	r6, r1, ip, lsr #10
   16480:	andeq	r6, r1, r4, ror #10
   16484:	strdeq	r6, [r1], -r8
   16488:	andeq	r6, r1, r4, ror #10
   1648c:	strdeq	r6, [r1], -r8
   16490:	andeq	r6, r1, r4, ror #10
   16494:	andeq	r6, r1, r4, ror #10
   16498:	andeq	r6, r1, r4, ror #10
   1649c:	andeq	r6, r1, r4, ror #10
   164a0:	andeq	r6, r1, r4, ror #10
   164a4:	andeq	r6, r1, r4, ror #10
   164a8:	andeq	r6, r1, r4, ror #10
   164ac:	andeq	r6, r1, r4, ror #10
   164b0:	andeq	r6, r1, r4, ror #10
   164b4:	andeq	r6, r1, r4, ror #10
   164b8:	andeq	r6, r1, r4, ror #10
   164bc:	andeq	r6, r1, r4, ror #10
   164c0:	andeq	r6, r1, r4, ror #10
   164c4:	andeq	r6, r1, r4, ror #10
   164c8:	andeq	r6, r1, r4, ror #10
   164cc:	andeq	r6, r1, r4, ror #10
   164d0:	andeq	r6, r1, r4, ror #10
   164d4:	andeq	r6, r1, r4, ror #10
   164d8:	andeq	r6, r1, r4, ror #10
   164dc:	andeq	r6, r1, r4, ror #10
   164e0:	andeq	r6, r1, r4, ror #10
   164e4:	andeq	r6, r1, r4, ror #10
   164e8:	andeq	r6, r1, r4, ror #10
   164ec:	andeq	r6, r1, r4, ror #10
   164f0:	andeq	r6, r1, r4, ror #10
   164f4:	andeq	r6, r1, r4, ror #10
   164f8:	andeq	r6, r1, r8, lsl #10
   164fc:	strdeq	r6, [r1], -r8
   16500:	andeq	r6, r1, r8, lsl #10
   16504:	andeq	r6, r1, r0, ror r5
   16508:	mov	r3, #0
   1650c:	cmn	r8, #1
   16510:	str	r3, [sp, #40]	; 0x28
   16514:	bne	160d4 <__assert_fail@plt+0x5008>
   16518:	ldr	r3, [sp, #28]
   1651c:	ldrb	r3, [r3, #1]
   16520:	adds	r3, r3, #0
   16524:	movne	r3, #1
   16528:	b	160dc <__assert_fail@plt+0x5010>
   1652c:	mov	r3, #0
   16530:	str	r3, [sp, #40]	; 0x28
   16534:	ldr	r3, [sp, #176]	; 0xb0
   16538:	cmp	r3, #2
   1653c:	bne	161cc <__assert_fail@plt+0x5100>
   16540:	ldr	r3, [sp, #44]	; 0x2c
   16544:	cmp	r3, #0
   16548:	bne	16e88 <__assert_fail@plt+0x5dbc>
   1654c:	mov	r6, r3
   16550:	add	r7, r7, #1
   16554:	mov	r3, fp
   16558:	mov	r5, #92	; 0x5c
   1655c:	b	15f9c <__assert_fail@plt+0x4ed0>
   16560:	ldr	r6, [sp, #48]	; 0x30
   16564:	mov	r3, #0
   16568:	str	r3, [sp, #40]	; 0x28
   1656c:	b	160f0 <__assert_fail@plt+0x5024>
   16570:	mov	r3, #0
   16574:	str	r3, [sp, #40]	; 0x28
   16578:	b	160e4 <__assert_fail@plt+0x5018>
   1657c:	mov	r3, #0
   16580:	str	r3, [sp, #40]	; 0x28
   16584:	mov	r3, #118	; 0x76
   16588:	b	15f44 <__assert_fail@plt+0x4e78>
   1658c:	ldr	r6, [sp, #48]	; 0x30
   16590:	mov	r3, #0
   16594:	str	r3, [sp, #40]	; 0x28
   16598:	b	16130 <__assert_fail@plt+0x5064>
   1659c:	mov	r3, #0
   165a0:	str	r3, [sp, #40]	; 0x28
   165a4:	mov	r3, #116	; 0x74
   165a8:	b	15f38 <__assert_fail@plt+0x4e6c>
   165ac:	ldr	r3, [sp, #176]	; 0xb0
   165b0:	cmp	r3, #2
   165b4:	beq	16ac4 <__assert_fail@plt+0x59f8>
   165b8:	cmp	r3, #5
   165bc:	mov	r3, #0
   165c0:	str	r3, [sp, #40]	; 0x28
   165c4:	beq	16230 <__assert_fail@plt+0x5164>
   165c8:	mov	r6, #0
   165cc:	mov	r5, #63	; 0x3f
   165d0:	b	160f0 <__assert_fail@plt+0x5024>
   165d4:	ldr	r3, [sp, #176]	; 0xb0
   165d8:	cmp	r3, #2
   165dc:	beq	16a4c <__assert_fail@plt+0x5980>
   165e0:	mov	r3, #0
   165e4:	b	16274 <__assert_fail@plt+0x51a8>
   165e8:	mov	r3, #0
   165ec:	str	r3, [sp, #40]	; 0x28
   165f0:	mov	r3, #114	; 0x72
   165f4:	b	15f38 <__assert_fail@plt+0x4e6c>
   165f8:	mov	r3, #0
   165fc:	mov	r6, r3
   16600:	str	r3, [sp, #40]	; 0x28
   16604:	b	16130 <__assert_fail@plt+0x5064>
   16608:	mov	r3, #0
   1660c:	str	r3, [sp, #40]	; 0x28
   16610:	mov	r3, #110	; 0x6e
   16614:	b	15f38 <__assert_fail@plt+0x4e6c>
   16618:	mov	r3, #0
   1661c:	str	r3, [sp, #40]	; 0x28
   16620:	mov	r3, #98	; 0x62
   16624:	b	15f44 <__assert_fail@plt+0x4e78>
   16628:	mov	r3, #0
   1662c:	str	r3, [sp, #40]	; 0x28
   16630:	mov	r3, #97	; 0x61
   16634:	b	15f44 <__assert_fail@plt+0x4e78>
   16638:	ldr	r3, [sp, #60]	; 0x3c
   1663c:	cmp	r3, #0
   16640:	bne	16a30 <__assert_fail@plt+0x5964>
   16644:	ldr	r3, [sp, #92]	; 0x5c
   16648:	cmp	r3, #0
   1664c:	addne	r7, r7, #1
   16650:	bne	15850 <__assert_fail@plt+0x4784>
   16654:	str	r3, [sp, #40]	; 0x28
   16658:	b	15f50 <__assert_fail@plt+0x4e84>
   1665c:	mov	r3, #0
   16660:	str	r3, [sp, #40]	; 0x28
   16664:	mov	r3, #102	; 0x66
   16668:	b	15f44 <__assert_fail@plt+0x4e78>
   1666c:	mov	r3, #0
   16670:	str	r3, [sp, #40]	; 0x28
   16674:	ldr	r3, [sp, #76]	; 0x4c
   16678:	cmp	r3, #1
   1667c:	bne	16ae4 <__assert_fail@plt+0x5a18>
   16680:	bl	10fa0 <__ctype_b_loc@plt>
   16684:	ldr	r2, [r0]
   16688:	sxth	r3, r5
   1668c:	lsl	r3, r3, #1
   16690:	ldr	r1, [sp, #76]	; 0x4c
   16694:	ldrh	r3, [r2, r3]
   16698:	mov	r0, r1
   1669c:	and	r3, r3, #16384	; 0x4000
   166a0:	cmp	r3, #0
   166a4:	ldr	r3, [sp, #60]	; 0x3c
   166a8:	movne	r6, #1
   166ac:	moveq	r6, #0
   166b0:	movne	r2, #0
   166b4:	andeq	r2, r3, #1
   166b8:	cmp	r2, #0
   166bc:	beq	160f0 <__assert_fail@plt+0x5024>
   166c0:	ldr	r2, [sp, #60]	; 0x3c
   166c4:	mov	r6, #0
   166c8:	add	r1, r0, r7
   166cc:	mov	ip, #39	; 0x27
   166d0:	str	r6, [sp, #100]	; 0x64
   166d4:	mov	r0, #0
   166d8:	ldr	lr, [sp, #36]	; 0x24
   166dc:	str	r8, [sp, #36]	; 0x24
   166e0:	ldr	r6, [sp, #40]	; 0x28
   166e4:	ldr	r8, [sp, #44]	; 0x2c
   166e8:	b	16798 <__assert_fail@plt+0x56cc>
   166ec:	cmp	r8, #0
   166f0:	bne	16ccc <__assert_fail@plt+0x5c00>
   166f4:	ldr	r0, [sp, #52]	; 0x34
   166f8:	eor	r3, fp, #1
   166fc:	ands	r3, r0, r3
   16700:	beq	16730 <__assert_fail@plt+0x5664>
   16704:	cmp	sl, r4
   16708:	add	r0, r4, #1
   1670c:	strbhi	ip, [r9, r4]
   16710:	cmp	sl, r0
   16714:	movhi	fp, #36	; 0x24
   16718:	strbhi	fp, [r9, r0]
   1671c:	add	r0, r4, #2
   16720:	mov	fp, r3
   16724:	cmp	sl, r0
   16728:	add	r4, r4, #3
   1672c:	strbhi	ip, [r9, r0]
   16730:	cmp	sl, r4
   16734:	movhi	r3, #92	; 0x5c
   16738:	strbhi	r3, [r9, r4]
   1673c:	add	r3, r4, #1
   16740:	cmp	sl, r3
   16744:	bls	16754 <__assert_fail@plt+0x5688>
   16748:	lsr	r0, r5, #6
   1674c:	add	r0, r0, #48	; 0x30
   16750:	strb	r0, [r9, r3]
   16754:	add	r3, r4, #2
   16758:	cmp	sl, r3
   1675c:	bls	1676c <__assert_fail@plt+0x56a0>
   16760:	ubfx	r0, r5, #3, #3
   16764:	add	r0, r0, #48	; 0x30
   16768:	strb	r0, [r9, r3]
   1676c:	add	r7, r7, #1
   16770:	and	r5, r5, #7
   16774:	cmp	r1, r7
   16778:	add	r5, r5, #48	; 0x30
   1677c:	add	r4, r4, #3
   16780:	bls	16ce0 <__assert_fail@plt+0x5c14>
   16784:	mov	r0, r2
   16788:	cmp	sl, r4
   1678c:	strbhi	r5, [r9, r4]
   16790:	add	r4, r4, #1
   16794:	ldrb	r5, [lr, #1]!
   16798:	cmp	r2, #0
   1679c:	bne	166ec <__assert_fail@plt+0x5620>
   167a0:	eor	r3, r0, #1
   167a4:	cmp	r6, #0
   167a8:	and	r3, r3, fp
   167ac:	uxtb	r3, r3
   167b0:	beq	167c4 <__assert_fail@plt+0x56f8>
   167b4:	cmp	sl, r4
   167b8:	movhi	r6, #92	; 0x5c
   167bc:	strbhi	r6, [r9, r4]
   167c0:	add	r4, r4, #1
   167c4:	add	r7, r7, #1
   167c8:	cmp	r7, r1
   167cc:	bcs	16cc0 <__assert_fail@plt+0x5bf4>
   167d0:	cmp	r3, #0
   167d4:	beq	16d04 <__assert_fail@plt+0x5c38>
   167d8:	cmp	sl, r4
   167dc:	add	r3, r4, #1
   167e0:	mov	r6, #0
   167e4:	strbhi	ip, [r9, r4]
   167e8:	cmp	sl, r3
   167ec:	add	r4, r4, #2
   167f0:	mov	fp, r6
   167f4:	strbhi	ip, [r9, r3]
   167f8:	b	16788 <__assert_fail@plt+0x56bc>
   167fc:	ldr	r3, [sp, #36]	; 0x24
   16800:	ldrb	r5, [r3]
   16804:	cmp	r5, #126	; 0x7e
   16808:	ldrls	pc, [pc, r5, lsl #2]
   1680c:	b	1666c <__assert_fail@plt+0x55a0>
   16810:	andeq	r6, r1, r0, lsr sl
   16814:	andeq	r6, r1, ip, ror #12
   16818:	andeq	r6, r1, ip, ror #12
   1681c:	andeq	r6, r1, ip, ror #12
   16820:	andeq	r6, r1, ip, ror #12
   16824:	andeq	r6, r1, ip, ror #12
   16828:	andeq	r6, r1, ip, ror #12
   1682c:	andeq	r5, r1, r4, lsr #30
   16830:	andeq	r5, r1, ip, lsl pc
   16834:	muleq	r1, ip, r5
   16838:	andeq	r6, r1, r4, lsr #20
   1683c:	andeq	r6, r1, ip, ror r5
   16840:	andeq	r5, r1, r8, asr #27
   16844:	andeq	r6, r1, r8, lsl sl
   16848:	andeq	r6, r1, ip, ror #12
   1684c:	andeq	r6, r1, ip, ror #12
   16850:	andeq	r6, r1, ip, ror #12
   16854:	andeq	r6, r1, ip, ror #12
   16858:	andeq	r6, r1, ip, ror #12
   1685c:	andeq	r6, r1, ip, ror #12
   16860:	andeq	r6, r1, ip, ror #12
   16864:	andeq	r6, r1, ip, ror #12
   16868:	andeq	r6, r1, ip, ror #12
   1686c:	andeq	r6, r1, ip, ror #12
   16870:	andeq	r6, r1, ip, ror #12
   16874:	andeq	r6, r1, ip, ror #12
   16878:	andeq	r6, r1, ip, ror #12
   1687c:	andeq	r6, r1, ip, ror #12
   16880:	andeq	r6, r1, ip, ror #12
   16884:	andeq	r6, r1, ip, ror #12
   16888:	andeq	r6, r1, ip, ror #12
   1688c:	andeq	r6, r1, ip, ror #12
   16890:	andeq	r6, r1, ip, lsl #11
   16894:	andeq	r6, r1, ip, lsl #20
   16898:	andeq	r6, r1, ip, lsl #20
   1689c:	andeq	r6, r1, r0, ror r5
   168a0:	andeq	r6, r1, ip, lsl #20
   168a4:	andeq	r6, r1, r0, ror #10
   168a8:	andeq	r6, r1, ip, lsl #20
   168ac:	ldrdeq	r6, [r1], -r4
   168b0:	andeq	r6, r1, ip, lsl #20
   168b4:	andeq	r6, r1, ip, lsl #20
   168b8:	andeq	r6, r1, ip, lsl #20
   168bc:	andeq	r6, r1, r0, ror #10
   168c0:	andeq	r6, r1, r0, ror #10
   168c4:	andeq	r6, r1, r0, ror #10
   168c8:	andeq	r6, r1, r0, ror #10
   168cc:	andeq	r6, r1, r0, ror #10
   168d0:	andeq	r6, r1, r0, ror #10
   168d4:	andeq	r6, r1, r0, ror #10
   168d8:	andeq	r6, r1, r0, ror #10
   168dc:	andeq	r6, r1, r0, ror #10
   168e0:	andeq	r6, r1, r0, ror #10
   168e4:	andeq	r6, r1, r0, ror #10
   168e8:	andeq	r6, r1, r0, ror #10
   168ec:	andeq	r6, r1, r0, ror #10
   168f0:	andeq	r6, r1, r0, ror #10
   168f4:	andeq	r6, r1, r0, ror #10
   168f8:	andeq	r6, r1, r0, ror #10
   168fc:	andeq	r6, r1, ip, lsl #20
   16900:	andeq	r6, r1, ip, lsl #20
   16904:	andeq	r6, r1, ip, lsl #20
   16908:	andeq	r6, r1, ip, lsl #20
   1690c:	andeq	r6, r1, ip, lsr #11
   16910:	andeq	r6, r1, ip, ror #12
   16914:	andeq	r6, r1, r0, ror #10
   16918:	andeq	r6, r1, r0, ror #10
   1691c:	andeq	r6, r1, r0, ror #10
   16920:	andeq	r6, r1, r0, ror #10
   16924:	andeq	r6, r1, r0, ror #10
   16928:	andeq	r6, r1, r0, ror #10
   1692c:	andeq	r6, r1, r0, ror #10
   16930:	andeq	r6, r1, r0, ror #10
   16934:	andeq	r6, r1, r0, ror #10
   16938:	andeq	r6, r1, r0, ror #10
   1693c:	andeq	r6, r1, r0, ror #10
   16940:	andeq	r6, r1, r0, ror #10
   16944:	andeq	r6, r1, r0, ror #10
   16948:	andeq	r6, r1, r0, ror #10
   1694c:	andeq	r6, r1, r0, ror #10
   16950:	andeq	r6, r1, r0, ror #10
   16954:	andeq	r6, r1, r0, ror #10
   16958:	andeq	r6, r1, r0, ror #10
   1695c:	andeq	r6, r1, r0, ror #10
   16960:	andeq	r6, r1, r0, ror #10
   16964:	andeq	r6, r1, r0, ror #10
   16968:	andeq	r6, r1, r0, ror #10
   1696c:	andeq	r6, r1, r0, ror #10
   16970:	andeq	r6, r1, r0, ror #10
   16974:	andeq	r6, r1, r0, ror #10
   16978:	andeq	r6, r1, r0, ror #10
   1697c:	andeq	r6, r1, ip, lsl #20
   16980:	andeq	r6, r1, ip, lsr #10
   16984:	andeq	r6, r1, r0, ror #10
   16988:	andeq	r6, r1, ip, lsl #20
   1698c:	andeq	r6, r1, r0, ror #10
   16990:	andeq	r6, r1, ip, lsl #20
   16994:	andeq	r6, r1, r0, ror #10
   16998:	andeq	r6, r1, r0, ror #10
   1699c:	andeq	r6, r1, r0, ror #10
   169a0:	andeq	r6, r1, r0, ror #10
   169a4:	andeq	r6, r1, r0, ror #10
   169a8:	andeq	r6, r1, r0, ror #10
   169ac:	andeq	r6, r1, r0, ror #10
   169b0:	andeq	r6, r1, r0, ror #10
   169b4:	andeq	r6, r1, r0, ror #10
   169b8:	andeq	r6, r1, r0, ror #10
   169bc:	andeq	r6, r1, r0, ror #10
   169c0:	andeq	r6, r1, r0, ror #10
   169c4:	andeq	r6, r1, r0, ror #10
   169c8:	andeq	r6, r1, r0, ror #10
   169cc:	andeq	r6, r1, r0, ror #10
   169d0:	andeq	r6, r1, r0, ror #10
   169d4:	andeq	r6, r1, r0, ror #10
   169d8:	andeq	r6, r1, r0, ror #10
   169dc:	andeq	r6, r1, r0, ror #10
   169e0:	andeq	r6, r1, r0, ror #10
   169e4:	andeq	r6, r1, r0, ror #10
   169e8:	andeq	r6, r1, r0, ror #10
   169ec:	andeq	r6, r1, r0, ror #10
   169f0:	andeq	r6, r1, r0, ror #10
   169f4:	andeq	r6, r1, r0, ror #10
   169f8:	andeq	r6, r1, r0, ror #10
   169fc:	andeq	r6, r1, r8, lsl #10
   16a00:	andeq	r6, r1, ip, lsl #20
   16a04:	andeq	r6, r1, r8, lsl #10
   16a08:	andeq	r6, r1, r0, ror r5
   16a0c:	mov	r3, #0
   16a10:	str	r3, [sp, #40]	; 0x28
   16a14:	b	160ec <__assert_fail@plt+0x5020>
   16a18:	mov	r3, #0
   16a1c:	str	r3, [sp, #40]	; 0x28
   16a20:	b	16084 <__assert_fail@plt+0x4fb8>
   16a24:	mov	r3, #0
   16a28:	str	r3, [sp, #40]	; 0x28
   16a2c:	b	160b8 <__assert_fail@plt+0x4fec>
   16a30:	ldr	r3, [sp, #44]	; 0x2c
   16a34:	cmp	r3, #0
   16a38:	beq	15fd0 <__assert_fail@plt+0x4f04>
   16a3c:	ldr	r3, [sp, #52]	; 0x34
   16a40:	mov	fp, r9
   16a44:	str	r3, [sp, #60]	; 0x3c
   16a48:	b	16148 <__assert_fail@plt+0x507c>
   16a4c:	ldr	r3, [sp, #44]	; 0x2c
   16a50:	cmp	r3, #0
   16a54:	bne	16e88 <__assert_fail@plt+0x5dbc>
   16a58:	str	r3, [sp, #40]	; 0x28
   16a5c:	cmp	sl, #0
   16a60:	ldr	r3, [sp, #84]	; 0x54
   16a64:	clz	r3, r3
   16a68:	lsr	r3, r3, #5
   16a6c:	moveq	r3, #0
   16a70:	cmp	r3, #0
   16a74:	strne	sl, [sp, #84]	; 0x54
   16a78:	movne	sl, #0
   16a7c:	bne	16aac <__assert_fail@plt+0x59e0>
   16a80:	cmp	sl, r4
   16a84:	movhi	r3, #39	; 0x27
   16a88:	strbhi	r3, [r9, r4]
   16a8c:	add	r3, r4, #1
   16a90:	cmp	sl, r3
   16a94:	movhi	r2, #92	; 0x5c
   16a98:	strbhi	r2, [r9, r3]
   16a9c:	add	r3, r4, #2
   16aa0:	cmp	sl, r3
   16aa4:	movhi	r2, #39	; 0x27
   16aa8:	strbhi	r2, [r9, r3]
   16aac:	mov	r3, #0
   16ab0:	add	r4, r4, #3
   16ab4:	str	r6, [sp, #80]	; 0x50
   16ab8:	mov	fp, r3
   16abc:	mov	r5, #39	; 0x27
   16ac0:	b	15f8c <__assert_fail@plt+0x4ec0>
   16ac4:	ldr	r3, [sp, #44]	; 0x2c
   16ac8:	cmp	r3, #0
   16acc:	bne	16e88 <__assert_fail@plt+0x5dbc>
   16ad0:	mov	r6, #0
   16ad4:	mov	r5, #63	; 0x3f
   16ad8:	str	r3, [sp, #40]	; 0x28
   16adc:	mov	r3, fp
   16ae0:	b	15f8c <__assert_fail@plt+0x4ec0>
   16ae4:	mov	r2, #0
   16ae8:	mov	r3, #0
   16aec:	cmn	r8, #1
   16af0:	strd	r2, [sp, #128]	; 0x80
   16af4:	bne	16b04 <__assert_fail@plt+0x5a38>
   16af8:	ldr	r0, [sp, #28]
   16afc:	bl	10fb8 <strlen@plt>
   16b00:	mov	r8, r0
   16b04:	str	r9, [sp, #100]	; 0x64
   16b08:	mov	r3, #0
   16b0c:	strd	sl, [sp, #104]	; 0x68
   16b10:	ldr	sl, [sp, #28]
   16b14:	str	r5, [sp, #112]	; 0x70
   16b18:	mov	r5, r3
   16b1c:	ldr	r9, [sp, #68]	; 0x44
   16b20:	str	r4, [sp, #116]	; 0x74
   16b24:	add	r4, r7, r5
   16b28:	add	r3, sp, #128	; 0x80
   16b2c:	add	fp, sl, r4
   16b30:	sub	r2, r8, r4
   16b34:	mov	r1, fp
   16b38:	add	r0, sp, #124	; 0x7c
   16b3c:	bl	1b4a4 <__assert_fail@plt+0xa3d8>
   16b40:	subs	r1, r0, #0
   16b44:	beq	16b84 <__assert_fail@plt+0x5ab8>
   16b48:	cmn	r1, #1
   16b4c:	beq	16edc <__assert_fail@plt+0x5e10>
   16b50:	cmn	r1, #2
   16b54:	beq	16efc <__assert_fail@plt+0x5e30>
   16b58:	cmp	r9, #0
   16b5c:	bne	16bb4 <__assert_fail@plt+0x5ae8>
   16b60:	ldr	r0, [sp, #124]	; 0x7c
   16b64:	add	r5, r5, r1
   16b68:	bl	10eec <iswprint@plt>
   16b6c:	cmp	r0, #0
   16b70:	add	r0, sp, #128	; 0x80
   16b74:	moveq	r6, #0
   16b78:	bl	10ea4 <mbsinit@plt>
   16b7c:	cmp	r0, #0
   16b80:	beq	16b24 <__assert_fail@plt+0x5a58>
   16b84:	ldr	r3, [sp, #60]	; 0x3c
   16b88:	add	r9, sp, #100	; 0x64
   16b8c:	mov	r0, r5
   16b90:	ldm	r9, {r9, sl, fp}
   16b94:	eor	r2, r6, #1
   16b98:	ldr	r5, [sp, #112]	; 0x70
   16b9c:	and	r2, r2, r3
   16ba0:	uxtb	r2, r2
   16ba4:	ldr	r4, [sp, #116]	; 0x74
   16ba8:	cmp	r0, #1
   16bac:	bhi	166c8 <__assert_fail@plt+0x55fc>
   16bb0:	b	166b8 <__assert_fail@plt+0x55ec>
   16bb4:	cmp	r1, #1
   16bb8:	beq	16b60 <__assert_fail@plt+0x5a94>
   16bbc:	add	r2, r4, #1
   16bc0:	add	r3, sl, r1
   16bc4:	add	r2, sl, r2
   16bc8:	add	r4, r3, r4
   16bcc:	ldrb	r3, [r2], #1
   16bd0:	sub	r3, r3, #91	; 0x5b
   16bd4:	cmp	r3, #33	; 0x21
   16bd8:	ldrls	pc, [pc, r3, lsl #2]
   16bdc:	b	16c68 <__assert_fail@plt+0x5b9c>
   16be0:	andeq	r6, r1, r4, ror ip
   16be4:	andeq	r6, r1, r4, ror ip
   16be8:	andeq	r6, r1, r8, ror #24
   16bec:	andeq	r6, r1, r4, ror ip
   16bf0:	andeq	r6, r1, r8, ror #24
   16bf4:	andeq	r6, r1, r4, ror ip
   16bf8:	andeq	r6, r1, r8, ror #24
   16bfc:	andeq	r6, r1, r8, ror #24
   16c00:	andeq	r6, r1, r8, ror #24
   16c04:	andeq	r6, r1, r8, ror #24
   16c08:	andeq	r6, r1, r8, ror #24
   16c0c:	andeq	r6, r1, r8, ror #24
   16c10:	andeq	r6, r1, r8, ror #24
   16c14:	andeq	r6, r1, r8, ror #24
   16c18:	andeq	r6, r1, r8, ror #24
   16c1c:	andeq	r6, r1, r8, ror #24
   16c20:	andeq	r6, r1, r8, ror #24
   16c24:	andeq	r6, r1, r8, ror #24
   16c28:	andeq	r6, r1, r8, ror #24
   16c2c:	andeq	r6, r1, r8, ror #24
   16c30:	andeq	r6, r1, r8, ror #24
   16c34:	andeq	r6, r1, r8, ror #24
   16c38:	andeq	r6, r1, r8, ror #24
   16c3c:	andeq	r6, r1, r8, ror #24
   16c40:	andeq	r6, r1, r8, ror #24
   16c44:	andeq	r6, r1, r8, ror #24
   16c48:	andeq	r6, r1, r8, ror #24
   16c4c:	andeq	r6, r1, r8, ror #24
   16c50:	andeq	r6, r1, r8, ror #24
   16c54:	andeq	r6, r1, r8, ror #24
   16c58:	andeq	r6, r1, r8, ror #24
   16c5c:	andeq	r6, r1, r8, ror #24
   16c60:	andeq	r6, r1, r8, ror #24
   16c64:	andeq	r6, r1, r4, ror ip
   16c68:	cmp	r4, r2
   16c6c:	bne	16bcc <__assert_fail@plt+0x5b00>
   16c70:	b	16b60 <__assert_fail@plt+0x5a94>
   16c74:	mov	r3, #2
   16c78:	ldr	fp, [sp, #100]	; 0x64
   16c7c:	str	r3, [sp, #176]	; 0xb0
   16c80:	ldr	sl, [sp, #104]	; 0x68
   16c84:	b	16148 <__assert_fail@plt+0x507c>
   16c88:	ldr	r2, [sp, #52]	; 0x34
   16c8c:	mov	fp, r9
   16c90:	ldr	r3, [sp, #60]	; 0x3c
   16c94:	and	r3, r3, r2
   16c98:	str	r3, [sp, #60]	; 0x3c
   16c9c:	b	16148 <__assert_fail@plt+0x507c>
   16ca0:	cmp	sl, r4
   16ca4:	movhi	r2, fp
   16ca8:	bhi	16020 <__assert_fail@plt+0x4f54>
   16cac:	mov	r2, r4
   16cb0:	b	16030 <__assert_fail@plt+0x4f64>
   16cb4:	mov	r6, r3
   16cb8:	mov	r5, #63	; 0x3f
   16cbc:	b	160f0 <__assert_fail@plt+0x5024>
   16cc0:	ldr	r8, [sp, #36]	; 0x24
   16cc4:	ldr	r6, [sp, #100]	; 0x64
   16cc8:	b	15f9c <__assert_fail@plt+0x4ed0>
   16ccc:	mov	fp, r9
   16cd0:	ldr	r8, [sp, #36]	; 0x24
   16cd4:	ldr	r3, [sp, #52]	; 0x34
   16cd8:	str	r3, [sp, #60]	; 0x3c
   16cdc:	b	16148 <__assert_fail@plt+0x507c>
   16ce0:	ldr	r8, [sp, #36]	; 0x24
   16ce4:	ldr	r6, [sp, #100]	; 0x64
   16ce8:	b	15e34 <__assert_fail@plt+0x4d68>
   16cec:	mov	r3, #0
   16cf0:	add	r4, r4, #4
   16cf4:	mov	fp, r2
   16cf8:	mov	r6, r3
   16cfc:	mov	r5, #48	; 0x30
   16d00:	b	15f8c <__assert_fail@plt+0x4ec0>
   16d04:	mov	r6, r3
   16d08:	b	16788 <__assert_fail@plt+0x56bc>
   16d0c:	mov	r3, #1
   16d10:	movw	r2, #56320	; 0xdc00
   16d14:	movt	r2, #1
   16d18:	mov	r4, r3
   16d1c:	mov	r9, sl
   16d20:	str	r3, [sp, #32]
   16d24:	str	sl, [sp, #44]	; 0x2c
   16d28:	str	r3, [sp, #48]	; 0x30
   16d2c:	str	sl, [sp, #52]	; 0x34
   16d30:	str	r3, [sp, #56]	; 0x38
   16d34:	str	r3, [sp, #60]	; 0x3c
   16d38:	str	sl, [sp, #64]	; 0x40
   16d3c:	str	sl, [sp, #68]	; 0x44
   16d40:	str	r2, [sp, #72]	; 0x48
   16d44:	str	sl, [sp, #80]	; 0x50
   16d48:	str	sl, [sp, #84]	; 0x54
   16d4c:	str	sl, [sp, #88]	; 0x58
   16d50:	b	15840 <__assert_fail@plt+0x4774>
   16d54:	mov	r3, #0
   16d58:	mov	r5, #48	; 0x30
   16d5c:	mov	r6, r3
   16d60:	b	15f8c <__assert_fail@plt+0x4ec0>
   16d64:	cmp	sl, r4
   16d68:	mov	r5, #48	; 0x30
   16d6c:	movhi	r3, #48	; 0x30
   16d70:	strbhi	r3, [r9, r4]
   16d74:	add	r3, r2, #2
   16d78:	add	r4, r2, #3
   16d7c:	cmp	sl, r3
   16d80:	movhi	r1, #48	; 0x30
   16d84:	strbhi	r1, [r9, r3]
   16d88:	mov	r3, #0
   16d8c:	b	16068 <__assert_fail@plt+0x4f9c>
   16d90:	ldr	r3, [sp, #48]	; 0x30
   16d94:	str	r3, [sp, #40]	; 0x28
   16d98:	b	16674 <__assert_fail@plt+0x55a8>
   16d9c:	ldr	r2, [sp, #28]
   16da0:	ldrb	r2, [r2, r3]
   16da4:	sub	r1, r2, #33	; 0x21
   16da8:	cmp	r1, #29
   16dac:	ldrls	pc, [pc, r1, lsl #2]
   16db0:	b	160ec <__assert_fail@plt+0x5020>
   16db4:	andeq	r6, r1, ip, lsr #28
   16db8:	andeq	r6, r1, ip, ror #1
   16dbc:	andeq	r6, r1, ip, ror #1
   16dc0:	andeq	r6, r1, ip, ror #1
   16dc4:	andeq	r6, r1, ip, ror #1
   16dc8:	andeq	r6, r1, ip, ror #1
   16dcc:	andeq	r6, r1, ip, lsr #28
   16dd0:	andeq	r6, r1, ip, lsr #28
   16dd4:	andeq	r6, r1, ip, lsr #28
   16dd8:	andeq	r6, r1, ip, ror #1
   16ddc:	andeq	r6, r1, ip, ror #1
   16de0:	andeq	r6, r1, ip, ror #1
   16de4:	andeq	r6, r1, ip, lsr #28
   16de8:	andeq	r6, r1, ip, ror #1
   16dec:	andeq	r6, r1, ip, lsr #28
   16df0:	andeq	r6, r1, ip, ror #1
   16df4:	andeq	r6, r1, ip, ror #1
   16df8:	andeq	r6, r1, ip, ror #1
   16dfc:	andeq	r6, r1, ip, ror #1
   16e00:	andeq	r6, r1, ip, ror #1
   16e04:	andeq	r6, r1, ip, ror #1
   16e08:	andeq	r6, r1, ip, ror #1
   16e0c:	andeq	r6, r1, ip, ror #1
   16e10:	andeq	r6, r1, ip, ror #1
   16e14:	andeq	r6, r1, ip, ror #1
   16e18:	andeq	r6, r1, ip, ror #1
   16e1c:	andeq	r6, r1, ip, ror #1
   16e20:	andeq	r6, r1, ip, lsr #28
   16e24:	andeq	r6, r1, ip, lsr #28
   16e28:	andeq	r6, r1, ip, lsr #28
   16e2c:	ldr	r1, [sp, #44]	; 0x2c
   16e30:	cmp	r1, #0
   16e34:	bne	17094 <__assert_fail@plt+0x5fc8>
   16e38:	cmp	sl, r4
   16e3c:	mov	r7, r3
   16e40:	movhi	r1, #63	; 0x3f
   16e44:	mov	r5, r2
   16e48:	mov	r3, fp
   16e4c:	strbhi	r1, [r9, r4]
   16e50:	add	r1, r4, #1
   16e54:	cmp	sl, r1
   16e58:	movhi	r0, #34	; 0x22
   16e5c:	strbhi	r0, [r9, r1]
   16e60:	add	r1, r4, #2
   16e64:	cmp	sl, r1
   16e68:	movhi	r0, #34	; 0x22
   16e6c:	strbhi	r0, [r9, r1]
   16e70:	add	r1, r4, #3
   16e74:	add	r4, r4, #4
   16e78:	cmp	sl, r1
   16e7c:	movhi	r0, #63	; 0x3f
   16e80:	strbhi	r0, [r9, r1]
   16e84:	b	16068 <__assert_fail@plt+0x4f9c>
   16e88:	mov	fp, r9
   16e8c:	b	16148 <__assert_fail@plt+0x507c>
   16e90:	ldr	r3, [sp, #188]	; 0xbc
   16e94:	ldrb	r3, [r3]
   16e98:	cmp	r3, #0
   16e9c:	beq	157d8 <__assert_fail@plt+0x470c>
   16ea0:	ldr	r2, [sp, #188]	; 0xbc
   16ea4:	cmp	sl, r4
   16ea8:	bls	16ec8 <__assert_fail@plt+0x5dfc>
   16eac:	strb	r3, [fp, r4]
   16eb0:	add	r4, r4, #1
   16eb4:	ldrb	r3, [r2, #1]!
   16eb8:	cmp	r3, #0
   16ebc:	beq	157d8 <__assert_fail@plt+0x470c>
   16ec0:	cmp	sl, r4
   16ec4:	bhi	16eac <__assert_fail@plt+0x5de0>
   16ec8:	ldrb	r3, [r2, #1]!
   16ecc:	add	r4, r4, #1
   16ed0:	cmp	r3, #0
   16ed4:	bne	16ea4 <__assert_fail@plt+0x5dd8>
   16ed8:	b	157d8 <__assert_fail@plt+0x470c>
   16edc:	add	r9, sp, #100	; 0x64
   16ee0:	mov	r0, r5
   16ee4:	ldr	r2, [sp, #60]	; 0x3c
   16ee8:	mov	r6, #0
   16eec:	ldm	r9, {r9, sl, fp}
   16ef0:	ldr	r5, [sp, #112]	; 0x70
   16ef4:	ldr	r4, [sp, #116]	; 0x74
   16ef8:	b	16ba8 <__assert_fail@plt+0x5adc>
   16efc:	cmp	r4, r8
   16f00:	add	r9, sp, #100	; 0x64
   16f04:	mov	r1, r4
   16f08:	mov	r2, fp
   16f0c:	ldm	r9, {r9, sl, fp}
   16f10:	mov	r3, r5
   16f14:	mov	r0, r5
   16f18:	ldr	r5, [sp, #112]	; 0x70
   16f1c:	ldr	r4, [sp, #116]	; 0x74
   16f20:	bcs	16f54 <__assert_fail@plt+0x5e88>
   16f24:	ldrb	r6, [r2]
   16f28:	cmp	r6, #0
   16f2c:	bne	16f40 <__assert_fail@plt+0x5e74>
   16f30:	b	1708c <__assert_fail@plt+0x5fc0>
   16f34:	ldrb	r6, [r2, #1]!
   16f38:	cmp	r6, #0
   16f3c:	beq	17024 <__assert_fail@plt+0x5f58>
   16f40:	add	r3, r3, #1
   16f44:	add	r1, r7, r3
   16f48:	cmp	r8, r1
   16f4c:	bhi	16f34 <__assert_fail@plt+0x5e68>
   16f50:	mov	r0, r3
   16f54:	mov	r6, #0
   16f58:	ldr	r2, [sp, #60]	; 0x3c
   16f5c:	b	16ba8 <__assert_fail@plt+0x5adc>
   16f60:	mov	r3, #1
   16f64:	mov	r4, #0
   16f68:	mov	r9, r4
   16f6c:	str	r3, [sp, #32]
   16f70:	str	r3, [sp, #44]	; 0x2c
   16f74:	str	r3, [sp, #48]	; 0x30
   16f78:	str	r4, [sp, #52]	; 0x34
   16f7c:	str	r3, [sp, #56]	; 0x38
   16f80:	str	r3, [sp, #60]	; 0x3c
   16f84:	str	r3, [sp, #88]	; 0x58
   16f88:	movw	r3, #56320	; 0xdc00
   16f8c:	movt	r3, #1
   16f90:	str	r4, [sp, #64]	; 0x40
   16f94:	str	r4, [sp, #68]	; 0x44
   16f98:	str	r3, [sp, #72]	; 0x48
   16f9c:	str	r4, [sp, #80]	; 0x50
   16fa0:	str	r4, [sp, #84]	; 0x54
   16fa4:	b	15840 <__assert_fail@plt+0x4774>
   16fa8:	mov	fp, r9
   16fac:	b	1615c <__assert_fail@plt+0x5090>
   16fb0:	ldr	r3, [sp, #48]	; 0x30
   16fb4:	b	16ad0 <__assert_fail@plt+0x5a04>
   16fb8:	mov	r2, r3
   16fbc:	ldr	r3, [sp, #72]	; 0x48
   16fc0:	cmp	r3, #0
   16fc4:	moveq	r2, #0
   16fc8:	andne	r2, r2, #1
   16fcc:	cmp	r2, #0
   16fd0:	beq	17000 <__assert_fail@plt+0x5f34>
   16fd4:	mov	r2, r3
   16fd8:	ldrb	r3, [r3]
   16fdc:	cmp	r3, #0
   16fe0:	beq	17000 <__assert_fail@plt+0x5f34>
   16fe4:	cmp	sl, r4
   16fe8:	bls	17010 <__assert_fail@plt+0x5f44>
   16fec:	strb	r3, [fp, r4]
   16ff0:	add	r4, r4, #1
   16ff4:	ldrb	r3, [r2, #1]!
   16ff8:	cmp	r3, #0
   16ffc:	bne	16fe4 <__assert_fail@plt+0x5f18>
   17000:	cmp	sl, r4
   17004:	movhi	r3, #0
   17008:	strbhi	r3, [fp, r4]
   1700c:	b	16198 <__assert_fail@plt+0x50cc>
   17010:	ldrb	r3, [r2, #1]!
   17014:	add	r4, r4, #1
   17018:	cmp	r3, #0
   1701c:	bne	16fe4 <__assert_fail@plt+0x5f18>
   17020:	b	17000 <__assert_fail@plt+0x5f34>
   17024:	mov	r0, r3
   17028:	ldr	r2, [sp, #60]	; 0x3c
   1702c:	b	16ba8 <__assert_fail@plt+0x5adc>
   17030:	mov	ip, #5
   17034:	mov	r3, r8
   17038:	ldr	r1, [sp, #84]	; 0x54
   1703c:	str	ip, [sp]
   17040:	ldr	r2, [sp, #180]	; 0xb4
   17044:	ldr	ip, [sp, #188]	; 0xbc
   17048:	ldr	r0, [sp, #184]	; 0xb8
   1704c:	str	r2, [sp, #4]
   17050:	ldr	r2, [sp, #28]
   17054:	str	ip, [sp, #12]
   17058:	ldr	ip, [sp, #192]	; 0xc0
   1705c:	str	r0, [sp, #8]
   17060:	mov	r0, fp
   17064:	str	ip, [sp, #16]
   17068:	bl	1571c <__assert_fail@plt+0x4650>
   1706c:	mov	r4, r0
   17070:	b	16198 <__assert_fail@plt+0x50cc>
   17074:	mov	r6, r3
   17078:	str	r3, [sp, #40]	; 0x28
   1707c:	b	16108 <__assert_fail@plt+0x503c>
   17080:	mov	r3, #2
   17084:	str	r3, [sp, #176]	; 0xb0
   17088:	b	16148 <__assert_fail@plt+0x507c>
   1708c:	ldr	r2, [sp, #60]	; 0x3c
   17090:	b	16ba8 <__assert_fail@plt+0x5adc>
   17094:	mov	r3, #5
   17098:	mov	fp, r9
   1709c:	str	r3, [sp, #176]	; 0xb0
   170a0:	b	1615c <__assert_fail@plt+0x5090>
   170a4:	mov	r1, #1
   170a8:	mov	r9, #0
   170ac:	mov	r3, r9
   170b0:	mov	r2, r9
   170b4:	str	r1, [sp, #32]
   170b8:	str	sl, [sp, #84]	; 0x54
   170bc:	b	15ee4 <__assert_fail@plt+0x4e18>
   170c0:	mov	r3, #0
   170c4:	mov	r2, #1
   170c8:	mov	r9, r3
   170cc:	mov	r4, r3
   170d0:	str	r2, [sp, #32]
   170d4:	strd	r2, [sp, #44]	; 0x2c
   170d8:	strd	r2, [sp, #56]	; 0x38
   170dc:	str	r3, [sp, #80]	; 0x50
   170e0:	str	r3, [sp, #84]	; 0x54
   170e4:	str	r3, [sp, #88]	; 0x58
   170e8:	movw	r3, #56340	; 0xdc14
   170ec:	movt	r3, #1
   170f0:	str	r2, [sp, #52]	; 0x34
   170f4:	str	r2, [sp, #64]	; 0x40
   170f8:	str	r2, [sp, #68]	; 0x44
   170fc:	str	r3, [sp, #72]	; 0x48
   17100:	b	15840 <__assert_fail@plt+0x4774>
   17104:	bl	110a8 <abort@plt>
   17108:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1710c:	mov	r4, r0
   17110:	mov	r5, r3
   17114:	strd	r6, [sp, #8]
   17118:	movw	r7, #61760	; 0xf140
   1711c:	movt	r7, #2
   17120:	strd	r8, [sp, #16]
   17124:	strd	sl, [sp, #24]
   17128:	mov	sl, r1
   1712c:	mov	fp, r2
   17130:	str	lr, [sp, #32]
   17134:	sub	sp, sp, #60	; 0x3c
   17138:	bl	10fd0 <__errno_location@plt>
   1713c:	mov	r8, r0
   17140:	cmn	r4, #-2147483647	; 0x80000001
   17144:	ldr	r6, [r7]
   17148:	movne	r0, #0
   1714c:	moveq	r0, #1
   17150:	ldr	r3, [r8]
   17154:	orrs	r0, r0, r4, lsr #31
   17158:	str	r3, [sp, #28]
   1715c:	bne	172ec <__assert_fail@plt+0x6220>
   17160:	ldr	r3, [r7, #4]
   17164:	cmp	r3, r4
   17168:	bgt	171c8 <__assert_fail@plt+0x60fc>
   1716c:	add	r1, r7, #8
   17170:	sub	r2, r4, r3
   17174:	str	r3, [sp, #52]	; 0x34
   17178:	cmp	r6, r1
   1717c:	add	r2, r2, #1
   17180:	beq	172c4 <__assert_fail@plt+0x61f8>
   17184:	mov	r1, #8
   17188:	mov	r0, r6
   1718c:	mvn	r3, #-2147483648	; 0x80000000
   17190:	str	r1, [sp]
   17194:	add	r1, sp, #52	; 0x34
   17198:	bl	19a28 <__assert_fail@plt+0x895c>
   1719c:	mov	r6, r0
   171a0:	str	r0, [r7]
   171a4:	ldr	r0, [r7, #4]
   171a8:	mov	r1, #0
   171ac:	ldr	r2, [sp, #52]	; 0x34
   171b0:	sub	r2, r2, r0
   171b4:	add	r0, r6, r0, lsl #3
   171b8:	lsl	r2, r2, #3
   171bc:	bl	10fe8 <memset@plt>
   171c0:	ldr	r3, [sp, #52]	; 0x34
   171c4:	str	r3, [r7, #4]
   171c8:	ldr	r1, [r5, #4]
   171cc:	add	r0, r6, r4, lsl #3
   171d0:	add	ip, r5, #8
   171d4:	mov	r3, fp
   171d8:	mov	r2, sl
   171dc:	ldr	r7, [r0, #4]
   171e0:	str	r0, [sp, #36]	; 0x24
   171e4:	str	ip, [sp, #40]	; 0x28
   171e8:	orr	r0, r1, #1
   171ec:	ldr	r9, [r6, r4, lsl #3]
   171f0:	str	ip, [sp, #8]
   171f4:	ldr	lr, [r5, #44]	; 0x2c
   171f8:	str	r0, [sp, #4]
   171fc:	ldr	ip, [r5]
   17200:	mov	r1, r9
   17204:	str	ip, [sp, #32]
   17208:	ldr	ip, [r5, #40]	; 0x28
   1720c:	str	ip, [sp, #12]
   17210:	ldr	ip, [sp, #32]
   17214:	str	lr, [sp, #16]
   17218:	str	r0, [sp, #44]	; 0x2c
   1721c:	mov	r0, r7
   17220:	str	ip, [sp]
   17224:	bl	1571c <__assert_fail@plt+0x4650>
   17228:	cmp	r9, r0
   1722c:	bhi	1729c <__assert_fail@plt+0x61d0>
   17230:	add	r9, r0, #1
   17234:	movw	r3, #61968	; 0xf210
   17238:	movt	r3, #2
   1723c:	cmp	r7, r3
   17240:	str	r9, [r6, r4, lsl #3]
   17244:	beq	17250 <__assert_fail@plt+0x6184>
   17248:	mov	r0, r7
   1724c:	bl	14c68 <__assert_fail@plt+0x3b9c>
   17250:	mov	r0, r9
   17254:	bl	19784 <__assert_fail@plt+0x86b8>
   17258:	ldr	ip, [r5]
   1725c:	mov	r3, fp
   17260:	mov	r2, sl
   17264:	mov	r1, r9
   17268:	mov	r7, r0
   1726c:	ldr	lr, [sp, #36]	; 0x24
   17270:	ldr	r4, [r5, #40]	; 0x28
   17274:	str	r0, [lr, #4]
   17278:	ldr	lr, [r5, #44]	; 0x2c
   1727c:	str	ip, [sp]
   17280:	ldr	ip, [sp, #44]	; 0x2c
   17284:	str	ip, [sp, #4]
   17288:	ldr	ip, [sp, #40]	; 0x28
   1728c:	str	r4, [sp, #12]
   17290:	str	lr, [sp, #16]
   17294:	str	ip, [sp, #8]
   17298:	bl	1571c <__assert_fail@plt+0x4650>
   1729c:	ldr	r3, [sp, #28]
   172a0:	mov	r0, r7
   172a4:	str	r3, [r8]
   172a8:	add	sp, sp, #60	; 0x3c
   172ac:	ldrd	r4, [sp]
   172b0:	ldrd	r6, [sp, #8]
   172b4:	ldrd	r8, [sp, #16]
   172b8:	ldrd	sl, [sp, #24]
   172bc:	add	sp, sp, #32
   172c0:	pop	{pc}		; (ldr pc, [sp], #4)
   172c4:	mov	r1, #8
   172c8:	mvn	r3, #-2147483648	; 0x80000000
   172cc:	str	r1, [sp]
   172d0:	add	r1, sp, #52	; 0x34
   172d4:	bl	19a28 <__assert_fail@plt+0x895c>
   172d8:	ldrd	r2, [r7, #8]
   172dc:	mov	r6, r0
   172e0:	str	r0, [r7]
   172e4:	strd	r2, [r0]
   172e8:	b	171a4 <__assert_fail@plt+0x60d8>
   172ec:	bl	110a8 <abort@plt>
   172f0:	strd	r4, [sp, #-16]!
   172f4:	mov	r5, r0
   172f8:	str	r6, [sp, #8]
   172fc:	str	lr, [sp, #12]
   17300:	bl	10fd0 <__errno_location@plt>
   17304:	mov	r4, r0
   17308:	cmp	r5, #0
   1730c:	ldr	r0, [pc, #32]	; 17334 <__assert_fail@plt+0x6268>
   17310:	mov	r1, #48	; 0x30
   17314:	movne	r0, r5
   17318:	ldr	r6, [r4]
   1731c:	bl	19bc8 <__assert_fail@plt+0x8afc>
   17320:	str	r6, [r4]
   17324:	ldrd	r4, [sp]
   17328:	ldr	r6, [sp, #8]
   1732c:	add	sp, sp, #12
   17330:	pop	{pc}		; (ldr pc, [sp], #4)
   17334:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17338:	ldr	r3, [pc, #12]	; 1734c <__assert_fail@plt+0x6280>
   1733c:	cmp	r0, #0
   17340:	moveq	r0, r3
   17344:	ldr	r0, [r0]
   17348:	bx	lr
   1734c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17350:	ldr	r3, [pc, #12]	; 17364 <__assert_fail@plt+0x6298>
   17354:	cmp	r0, #0
   17358:	moveq	r0, r3
   1735c:	str	r1, [r0]
   17360:	bx	lr
   17364:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17368:	ldr	r3, [pc, #52]	; 173a4 <__assert_fail@plt+0x62d8>
   1736c:	cmp	r0, #0
   17370:	push	{lr}		; (str lr, [sp, #-4]!)
   17374:	lsr	lr, r1, #5
   17378:	and	r1, r1, #31
   1737c:	moveq	r0, r3
   17380:	add	r3, r0, #8
   17384:	ldr	ip, [r3, lr, lsl #2]
   17388:	lsr	r0, ip, r1
   1738c:	eor	r2, r2, r0
   17390:	and	r0, r0, #1
   17394:	and	r2, r2, #1
   17398:	eor	r1, ip, r2, lsl r1
   1739c:	str	r1, [r3, lr, lsl #2]
   173a0:	pop	{pc}		; (ldr pc, [sp], #4)
   173a4:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   173a8:	ldr	r3, [pc, #16]	; 173c0 <__assert_fail@plt+0x62f4>
   173ac:	cmp	r0, #0
   173b0:	movne	r3, r0
   173b4:	ldr	r0, [r3, #4]
   173b8:	str	r1, [r3, #4]
   173bc:	bx	lr
   173c0:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   173c4:	ldr	r3, [pc, #48]	; 173fc <__assert_fail@plt+0x6330>
   173c8:	cmp	r0, #0
   173cc:	mov	ip, #10
   173d0:	moveq	r0, r3
   173d4:	cmp	r2, #0
   173d8:	cmpne	r1, #0
   173dc:	str	ip, [r0]
   173e0:	beq	173f0 <__assert_fail@plt+0x6324>
   173e4:	str	r1, [r0, #40]	; 0x28
   173e8:	str	r2, [r0, #44]	; 0x2c
   173ec:	bx	lr
   173f0:	str	r4, [sp, #-8]!
   173f4:	str	lr, [sp, #4]
   173f8:	bl	110a8 <abort@plt>
   173fc:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17400:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17404:	strd	r6, [sp, #8]
   17408:	mov	r7, r0
   1740c:	mov	r6, r1
   17410:	strd	r8, [sp, #16]
   17414:	mov	r8, r2
   17418:	mov	r9, r3
   1741c:	str	lr, [sp, #24]
   17420:	sub	sp, sp, #28
   17424:	ldr	r4, [sp, #56]	; 0x38
   17428:	ldr	ip, [pc, #104]	; 17498 <__assert_fail@plt+0x63cc>
   1742c:	cmp	r4, #0
   17430:	moveq	r4, ip
   17434:	bl	10fd0 <__errno_location@plt>
   17438:	ldr	ip, [r4, #44]	; 0x2c
   1743c:	mov	r5, r0
   17440:	mov	r1, r6
   17444:	add	lr, r4, #8
   17448:	mov	r3, r9
   1744c:	ldr	r6, [r5]
   17450:	mov	r2, r8
   17454:	mov	r0, r7
   17458:	str	ip, [sp, #16]
   1745c:	ldr	ip, [r4, #40]	; 0x28
   17460:	str	lr, [sp, #8]
   17464:	str	ip, [sp, #12]
   17468:	ldr	ip, [r4, #4]
   1746c:	str	ip, [sp, #4]
   17470:	ldr	ip, [r4]
   17474:	str	ip, [sp]
   17478:	bl	1571c <__assert_fail@plt+0x4650>
   1747c:	str	r6, [r5]
   17480:	add	sp, sp, #28
   17484:	ldrd	r4, [sp]
   17488:	ldrd	r6, [sp, #8]
   1748c:	ldrd	r8, [sp, #16]
   17490:	add	sp, sp, #24
   17494:	pop	{pc}		; (ldr pc, [sp], #4)
   17498:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   1749c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   174a0:	cmp	r2, #0
   174a4:	ldr	r4, [pc, #192]	; 1756c <__assert_fail@plt+0x64a0>
   174a8:	movne	r4, r2
   174ac:	strd	r6, [sp, #8]
   174b0:	strd	r8, [sp, #16]
   174b4:	mov	r9, r1
   174b8:	mov	r8, r0
   174bc:	strd	sl, [sp, #24]
   174c0:	str	lr, [sp, #32]
   174c4:	sub	sp, sp, #36	; 0x24
   174c8:	bl	10fd0 <__errno_location@plt>
   174cc:	ldr	r5, [r4, #4]
   174d0:	mov	r6, r0
   174d4:	add	r7, r4, #8
   174d8:	mov	r1, #0
   174dc:	mov	r3, r9
   174e0:	ldr	ip, [r4, #44]	; 0x2c
   174e4:	mov	r2, r8
   174e8:	mov	r0, r1
   174ec:	ldr	sl, [r6]
   174f0:	orr	r5, r5, #1
   174f4:	str	ip, [sp, #16]
   174f8:	ldr	ip, [r4, #40]	; 0x28
   174fc:	stmib	sp, {r5, r7, ip}
   17500:	ldr	ip, [r4]
   17504:	str	ip, [sp]
   17508:	bl	1571c <__assert_fail@plt+0x4650>
   1750c:	add	r1, r0, #1
   17510:	mov	r0, r1
   17514:	str	r1, [sp, #28]
   17518:	bl	19784 <__assert_fail@plt+0x86b8>
   1751c:	ldr	ip, [r4, #44]	; 0x2c
   17520:	mov	fp, r0
   17524:	mov	r3, r9
   17528:	mov	r2, r8
   1752c:	ldr	r1, [sp, #28]
   17530:	str	ip, [sp, #16]
   17534:	ldr	ip, [r4, #40]	; 0x28
   17538:	stmib	sp, {r5, r7, ip}
   1753c:	ldr	ip, [r4]
   17540:	str	ip, [sp]
   17544:	bl	1571c <__assert_fail@plt+0x4650>
   17548:	mov	r0, fp
   1754c:	str	sl, [r6]
   17550:	add	sp, sp, #36	; 0x24
   17554:	ldrd	r4, [sp]
   17558:	ldrd	r6, [sp, #8]
   1755c:	ldrd	r8, [sp, #16]
   17560:	ldrd	sl, [sp, #24]
   17564:	add	sp, sp, #32
   17568:	pop	{pc}		; (ldr pc, [sp], #4)
   1756c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17570:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17574:	cmp	r3, #0
   17578:	ldr	r4, [pc, #220]	; 1765c <__assert_fail@plt+0x6590>
   1757c:	movne	r4, r3
   17580:	strd	r6, [sp, #8]
   17584:	mov	r6, r2
   17588:	strd	r8, [sp, #16]
   1758c:	mov	r9, r0
   17590:	strd	sl, [sp, #24]
   17594:	mov	sl, r1
   17598:	str	lr, [sp, #32]
   1759c:	sub	sp, sp, #44	; 0x2c
   175a0:	bl	10fd0 <__errno_location@plt>
   175a4:	ldr	r5, [r4, #4]
   175a8:	mov	r7, r0
   175ac:	mov	r1, #0
   175b0:	add	r8, r4, #8
   175b4:	mov	r3, sl
   175b8:	ldr	ip, [r4, #44]	; 0x2c
   175bc:	mov	r2, r9
   175c0:	mov	r0, r1
   175c4:	ldr	lr, [r7]
   175c8:	cmp	r6, r1
   175cc:	orreq	r5, r5, #1
   175d0:	str	ip, [sp, #16]
   175d4:	ldr	ip, [r4, #40]	; 0x28
   175d8:	stmib	sp, {r5, r8, ip}
   175dc:	ldr	ip, [r4]
   175e0:	str	lr, [sp, #28]
   175e4:	str	ip, [sp]
   175e8:	bl	1571c <__assert_fail@plt+0x4650>
   175ec:	add	r1, r0, #1
   175f0:	mov	fp, r0
   175f4:	mov	r0, r1
   175f8:	str	r1, [sp, #36]	; 0x24
   175fc:	bl	19784 <__assert_fail@plt+0x86b8>
   17600:	ldr	ip, [r4, #44]	; 0x2c
   17604:	mov	r3, sl
   17608:	mov	r2, r9
   1760c:	ldr	r1, [sp, #36]	; 0x24
   17610:	str	ip, [sp, #16]
   17614:	ldr	ip, [r4, #40]	; 0x28
   17618:	str	r0, [sp, #32]
   1761c:	stmib	sp, {r5, r8, ip}
   17620:	ldr	ip, [r4]
   17624:	str	ip, [sp]
   17628:	bl	1571c <__assert_fail@plt+0x4650>
   1762c:	ldr	lr, [sp, #28]
   17630:	cmp	r6, #0
   17634:	ldr	r0, [sp, #32]
   17638:	str	lr, [r7]
   1763c:	strne	fp, [r6]
   17640:	add	sp, sp, #44	; 0x2c
   17644:	ldrd	r4, [sp]
   17648:	ldrd	r6, [sp, #8]
   1764c:	ldrd	r8, [sp, #16]
   17650:	ldrd	sl, [sp, #24]
   17654:	add	sp, sp, #32
   17658:	pop	{pc}		; (ldr pc, [sp], #4)
   1765c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17660:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17664:	movw	r5, #61760	; 0xf140
   17668:	movt	r5, #2
   1766c:	ldr	r3, [r5, #4]
   17670:	strd	r6, [sp, #8]
   17674:	str	r8, [sp, #16]
   17678:	str	lr, [sp, #20]
   1767c:	ldr	r7, [r5]
   17680:	cmp	r3, #1
   17684:	ble	176a8 <__assert_fail@plt+0x65dc>
   17688:	mov	r4, #1
   1768c:	add	r6, r7, #4
   17690:	ldr	r0, [r6, r4, lsl #3]
   17694:	add	r4, r4, #1
   17698:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1769c:	ldr	r3, [r5, #4]
   176a0:	cmp	r3, r4
   176a4:	bgt	17690 <__assert_fail@plt+0x65c4>
   176a8:	ldr	r0, [r7, #4]
   176ac:	movw	r4, #61968	; 0xf210
   176b0:	movt	r4, #2
   176b4:	cmp	r0, r4
   176b8:	beq	176cc <__assert_fail@plt+0x6600>
   176bc:	bl	14c68 <__assert_fail@plt+0x3b9c>
   176c0:	mov	r3, #256	; 0x100
   176c4:	str	r3, [r5, #8]
   176c8:	str	r4, [r5, #12]
   176cc:	ldr	r4, [pc, #44]	; 17700 <__assert_fail@plt+0x6634>
   176d0:	cmp	r7, r4
   176d4:	beq	176e4 <__assert_fail@plt+0x6618>
   176d8:	mov	r0, r7
   176dc:	bl	14c68 <__assert_fail@plt+0x3b9c>
   176e0:	str	r4, [r5]
   176e4:	mov	r3, #1
   176e8:	ldrd	r6, [sp, #8]
   176ec:	str	r3, [r5, #4]
   176f0:	ldrd	r4, [sp]
   176f4:	ldr	r8, [sp, #16]
   176f8:	add	sp, sp, #20
   176fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17700:	andeq	pc, r2, r8, asr #2
   17704:	ldr	r3, [pc, #4]	; 17710 <__assert_fail@plt+0x6644>
   17708:	mvn	r2, #0
   1770c:	b	17108 <__assert_fail@plt+0x603c>
   17710:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17714:	ldr	r3, [pc]	; 1771c <__assert_fail@plt+0x6650>
   17718:	b	17108 <__assert_fail@plt+0x603c>
   1771c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   17720:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17724:	movw	r4, #61760	; 0xf140
   17728:	movt	r4, #2
   1772c:	strd	r6, [sp, #8]
   17730:	strd	r8, [sp, #16]
   17734:	strd	sl, [sp, #24]
   17738:	mov	sl, r0
   1773c:	str	lr, [sp, #32]
   17740:	sub	sp, sp, #44	; 0x2c
   17744:	bl	10fd0 <__errno_location@plt>
   17748:	ldr	r3, [r0]
   1774c:	mov	r8, r0
   17750:	ldr	r2, [r4, #4]
   17754:	ldr	r5, [r4]
   17758:	str	r3, [sp, #28]
   1775c:	cmp	r2, #0
   17760:	bgt	177bc <__assert_fail@plt+0x66f0>
   17764:	add	r3, r4, #8
   17768:	str	r2, [sp, #36]	; 0x24
   1776c:	rsb	r2, r2, #1
   17770:	cmp	r5, r3
   17774:	beq	17888 <__assert_fail@plt+0x67bc>
   17778:	mov	r1, #8
   1777c:	mov	r0, r5
   17780:	mvn	r3, #-2147483648	; 0x80000000
   17784:	str	r1, [sp]
   17788:	add	r1, sp, #36	; 0x24
   1778c:	bl	19a28 <__assert_fail@plt+0x895c>
   17790:	mov	r5, r0
   17794:	str	r0, [r4]
   17798:	ldr	r0, [r4, #4]
   1779c:	mov	r1, #0
   177a0:	ldr	r2, [sp, #36]	; 0x24
   177a4:	sub	r2, r2, r0
   177a8:	add	r0, r5, r0, lsl #3
   177ac:	lsl	r2, r2, #3
   177b0:	bl	10fe8 <memset@plt>
   177b4:	ldr	r3, [sp, #36]	; 0x24
   177b8:	str	r3, [r4, #4]
   177bc:	movw	r4, #61968	; 0xf210
   177c0:	movt	r4, #2
   177c4:	ldr	r9, [r5]
   177c8:	add	fp, r4, #264	; 0x108
   177cc:	mvn	r3, #0
   177d0:	ldr	r7, [r4, #260]	; 0x104
   177d4:	mov	r2, sl
   177d8:	ldr	r6, [r5, #4]
   177dc:	str	fp, [sp, #8]
   177e0:	mov	r1, r9
   177e4:	ldr	ip, [r4, #256]	; 0x100
   177e8:	orr	r7, r7, #1
   177ec:	ldr	lr, [r4, #300]	; 0x12c
   177f0:	mov	r0, r6
   177f4:	str	ip, [sp]
   177f8:	str	r7, [sp, #4]
   177fc:	str	lr, [sp, #16]
   17800:	ldr	ip, [r4, #296]	; 0x128
   17804:	str	ip, [sp, #12]
   17808:	bl	1571c <__assert_fail@plt+0x4650>
   1780c:	cmp	r9, r0
   17810:	bhi	17860 <__assert_fail@plt+0x6794>
   17814:	add	r9, r0, #1
   17818:	cmp	r6, r4
   1781c:	str	r9, [r5]
   17820:	beq	1782c <__assert_fail@plt+0x6760>
   17824:	mov	r0, r6
   17828:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1782c:	mov	r0, r9
   17830:	bl	19784 <__assert_fail@plt+0x86b8>
   17834:	ldr	r3, [r4, #256]	; 0x100
   17838:	mov	r2, sl
   1783c:	mov	r1, r9
   17840:	mov	r6, r0
   17844:	ldr	lr, [r4, #296]	; 0x128
   17848:	ldr	ip, [r4, #300]	; 0x12c
   1784c:	str	r0, [r5, #4]
   17850:	stm	sp, {r3, r7, fp, lr}
   17854:	mvn	r3, #0
   17858:	str	ip, [sp, #16]
   1785c:	bl	1571c <__assert_fail@plt+0x4650>
   17860:	ldr	r3, [sp, #28]
   17864:	mov	r0, r6
   17868:	str	r3, [r8]
   1786c:	add	sp, sp, #44	; 0x2c
   17870:	ldrd	r4, [sp]
   17874:	ldrd	r6, [sp, #8]
   17878:	ldrd	r8, [sp, #16]
   1787c:	ldrd	sl, [sp, #24]
   17880:	add	sp, sp, #32
   17884:	pop	{pc}		; (ldr pc, [sp], #4)
   17888:	mov	r0, #8
   1788c:	mvn	r3, #-2147483648	; 0x80000000
   17890:	add	r1, sp, #36	; 0x24
   17894:	str	r0, [sp]
   17898:	mov	r0, #0
   1789c:	bl	19a28 <__assert_fail@plt+0x895c>
   178a0:	ldrd	r2, [r4, #8]
   178a4:	mov	r5, r0
   178a8:	str	r0, [r4]
   178ac:	strd	r2, [r0]
   178b0:	b	17798 <__assert_fail@plt+0x66cc>
   178b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178b8:	movw	r4, #61760	; 0xf140
   178bc:	movt	r4, #2
   178c0:	strd	r6, [sp, #8]
   178c4:	strd	r8, [sp, #16]
   178c8:	strd	sl, [sp, #24]
   178cc:	mov	sl, r0
   178d0:	mov	fp, r1
   178d4:	str	lr, [sp, #32]
   178d8:	sub	sp, sp, #44	; 0x2c
   178dc:	bl	10fd0 <__errno_location@plt>
   178e0:	ldr	r3, [r0]
   178e4:	mov	r8, r0
   178e8:	ldr	r2, [r4, #4]
   178ec:	ldr	r5, [r4]
   178f0:	str	r3, [sp, #28]
   178f4:	cmp	r2, #0
   178f8:	bgt	17954 <__assert_fail@plt+0x6888>
   178fc:	add	r3, r4, #8
   17900:	str	r2, [sp, #36]	; 0x24
   17904:	rsb	r2, r2, #1
   17908:	cmp	r5, r3
   1790c:	beq	17a30 <__assert_fail@plt+0x6964>
   17910:	mov	r1, #8
   17914:	mov	r0, r5
   17918:	mvn	r3, #-2147483648	; 0x80000000
   1791c:	str	r1, [sp]
   17920:	add	r1, sp, #36	; 0x24
   17924:	bl	19a28 <__assert_fail@plt+0x895c>
   17928:	mov	r5, r0
   1792c:	str	r0, [r4]
   17930:	ldr	r0, [r4, #4]
   17934:	mov	r1, #0
   17938:	ldr	r2, [sp, #36]	; 0x24
   1793c:	sub	r2, r2, r0
   17940:	add	r0, r5, r0, lsl #3
   17944:	lsl	r2, r2, #3
   17948:	bl	10fe8 <memset@plt>
   1794c:	ldr	r3, [sp, #36]	; 0x24
   17950:	str	r3, [r4, #4]
   17954:	movw	r4, #61968	; 0xf210
   17958:	movt	r4, #2
   1795c:	ldr	r9, [r5]
   17960:	add	r0, r4, #264	; 0x108
   17964:	mov	r3, fp
   17968:	ldr	r7, [r4, #260]	; 0x104
   1796c:	mov	r2, sl
   17970:	ldr	r6, [r5, #4]
   17974:	str	r0, [sp, #8]
   17978:	mov	r1, r9
   1797c:	ldr	ip, [r4, #256]	; 0x100
   17980:	orr	r7, r7, #1
   17984:	ldr	lr, [r4, #300]	; 0x12c
   17988:	mov	r0, r6
   1798c:	str	ip, [sp]
   17990:	str	r7, [sp, #4]
   17994:	str	lr, [sp, #16]
   17998:	ldr	ip, [r4, #296]	; 0x128
   1799c:	str	ip, [sp, #12]
   179a0:	bl	1571c <__assert_fail@plt+0x4650>
   179a4:	cmp	r9, r0
   179a8:	bhi	17a08 <__assert_fail@plt+0x693c>
   179ac:	add	r9, r0, #1
   179b0:	cmp	r6, r4
   179b4:	str	r9, [r5]
   179b8:	beq	179c4 <__assert_fail@plt+0x68f8>
   179bc:	mov	r0, r6
   179c0:	bl	14c68 <__assert_fail@plt+0x3b9c>
   179c4:	mov	r0, r9
   179c8:	bl	19784 <__assert_fail@plt+0x86b8>
   179cc:	ldr	ip, [r4, #256]	; 0x100
   179d0:	mov	r1, r9
   179d4:	mov	r3, fp
   179d8:	mov	r2, sl
   179dc:	mov	r6, r0
   179e0:	ldr	r9, [r4, #296]	; 0x128
   179e4:	ldr	lr, [r4, #300]	; 0x12c
   179e8:	str	r0, [r5, #4]
   179ec:	str	ip, [sp]
   179f0:	ldr	ip, [pc, #100]	; 17a5c <__assert_fail@plt+0x6990>
   179f4:	str	r7, [sp, #4]
   179f8:	str	ip, [sp, #8]
   179fc:	str	r9, [sp, #12]
   17a00:	str	lr, [sp, #16]
   17a04:	bl	1571c <__assert_fail@plt+0x4650>
   17a08:	ldr	r3, [sp, #28]
   17a0c:	mov	r0, r6
   17a10:	str	r3, [r8]
   17a14:	add	sp, sp, #44	; 0x2c
   17a18:	ldrd	r4, [sp]
   17a1c:	ldrd	r6, [sp, #8]
   17a20:	ldrd	r8, [sp, #16]
   17a24:	ldrd	sl, [sp, #24]
   17a28:	add	sp, sp, #32
   17a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a30:	mov	r0, #8
   17a34:	mvn	r3, #-2147483648	; 0x80000000
   17a38:	add	r1, sp, #36	; 0x24
   17a3c:	str	r0, [sp]
   17a40:	mov	r0, #0
   17a44:	bl	19a28 <__assert_fail@plt+0x895c>
   17a48:	ldrd	r2, [r4, #8]
   17a4c:	mov	r5, r0
   17a50:	str	r0, [r4]
   17a54:	strd	r2, [r0]
   17a58:	b	17930 <__assert_fail@plt+0x6864>
   17a5c:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   17a60:	strd	r4, [sp, #-20]!	; 0xffffffec
   17a64:	mov	r4, #0
   17a68:	mov	r5, #0
   17a6c:	strd	r6, [sp, #8]
   17a70:	cmp	r1, #10
   17a74:	str	lr, [sp, #16]
   17a78:	sub	sp, sp, #100	; 0x64
   17a7c:	strd	r4, [sp, #48]	; 0x30
   17a80:	beq	17ac8 <__assert_fail@plt+0x69fc>
   17a84:	mov	r3, sp
   17a88:	strd	r4, [sp, #8]
   17a8c:	str	r1, [sp, #48]	; 0x30
   17a90:	mov	r1, r2
   17a94:	mvn	r2, #0
   17a98:	ldrd	r6, [sp, #48]	; 0x30
   17a9c:	strd	r6, [sp]
   17aa0:	strd	r4, [sp, #16]
   17aa4:	strd	r4, [sp, #24]
   17aa8:	strd	r4, [sp, #32]
   17aac:	strd	r4, [sp, #40]	; 0x28
   17ab0:	bl	17108 <__assert_fail@plt+0x603c>
   17ab4:	add	sp, sp, #100	; 0x64
   17ab8:	ldrd	r4, [sp]
   17abc:	ldrd	r6, [sp, #8]
   17ac0:	add	sp, sp, #16
   17ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ac8:	bl	110a8 <abort@plt>
   17acc:	strd	r4, [sp, #-20]!	; 0xffffffec
   17ad0:	mov	r4, #0
   17ad4:	mov	r5, #0
   17ad8:	strd	r6, [sp, #8]
   17adc:	cmp	r1, #10
   17ae0:	str	lr, [sp, #16]
   17ae4:	sub	sp, sp, #100	; 0x64
   17ae8:	strd	r4, [sp, #48]	; 0x30
   17aec:	beq	17b38 <__assert_fail@plt+0x6a6c>
   17af0:	mov	ip, r2
   17af4:	mov	r2, r3
   17af8:	strd	r4, [sp, #8]
   17afc:	str	r1, [sp, #48]	; 0x30
   17b00:	mov	r3, sp
   17b04:	mov	r1, ip
   17b08:	ldrd	r6, [sp, #48]	; 0x30
   17b0c:	strd	r6, [sp]
   17b10:	strd	r4, [sp, #16]
   17b14:	strd	r4, [sp, #24]
   17b18:	strd	r4, [sp, #32]
   17b1c:	strd	r4, [sp, #40]	; 0x28
   17b20:	bl	17108 <__assert_fail@plt+0x603c>
   17b24:	add	sp, sp, #100	; 0x64
   17b28:	ldrd	r4, [sp]
   17b2c:	ldrd	r6, [sp, #8]
   17b30:	add	sp, sp, #16
   17b34:	pop	{pc}		; (ldr pc, [sp], #4)
   17b38:	bl	110a8 <abort@plt>
   17b3c:	mov	r2, #0
   17b40:	mov	r3, #0
   17b44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17b48:	strd	r6, [sp, #8]
   17b4c:	cmp	r0, #10
   17b50:	strd	r8, [sp, #16]
   17b54:	strd	sl, [sp, #24]
   17b58:	str	lr, [sp, #32]
   17b5c:	sub	sp, sp, #124	; 0x7c
   17b60:	strd	r2, [sp, #72]	; 0x48
   17b64:	strd	r2, [sp, #80]	; 0x50
   17b68:	strd	r2, [sp, #88]	; 0x58
   17b6c:	strd	r2, [sp, #96]	; 0x60
   17b70:	strd	r2, [sp, #104]	; 0x68
   17b74:	strd	r2, [sp, #112]	; 0x70
   17b78:	beq	17d1c <__assert_fail@plt+0x6c50>
   17b7c:	mov	r6, r1
   17b80:	movw	r4, #61760	; 0xf140
   17b84:	movt	r4, #2
   17b88:	str	r0, [sp, #72]	; 0x48
   17b8c:	ldrd	r0, [sp, #72]	; 0x48
   17b90:	strd	r0, [sp, #24]
   17b94:	strd	r2, [sp, #32]
   17b98:	strd	r2, [sp, #40]	; 0x28
   17b9c:	strd	r2, [sp, #48]	; 0x30
   17ba0:	strd	r2, [sp, #56]	; 0x38
   17ba4:	strd	r2, [sp, #64]	; 0x40
   17ba8:	bl	10fd0 <__errno_location@plt>
   17bac:	mov	r8, r0
   17bb0:	ldr	r5, [r4]
   17bb4:	ldr	r2, [r4, #4]
   17bb8:	ldr	r9, [r0]
   17bbc:	cmp	r2, #0
   17bc0:	bgt	17c1c <__assert_fail@plt+0x6b50>
   17bc4:	add	r3, r4, #8
   17bc8:	str	r2, [sp, #72]	; 0x48
   17bcc:	rsb	r2, r2, #1
   17bd0:	cmp	r5, r3
   17bd4:	beq	17cf0 <__assert_fail@plt+0x6c24>
   17bd8:	mov	r3, #8
   17bdc:	mov	r0, r5
   17be0:	add	r1, sp, #72	; 0x48
   17be4:	str	r3, [sp]
   17be8:	mvn	r3, #-2147483648	; 0x80000000
   17bec:	bl	19a28 <__assert_fail@plt+0x895c>
   17bf0:	mov	r5, r0
   17bf4:	str	r0, [r4]
   17bf8:	ldr	r0, [r4, #4]
   17bfc:	mov	r1, #0
   17c00:	ldr	r2, [sp, #72]	; 0x48
   17c04:	sub	r2, r2, r0
   17c08:	add	r0, r5, r0, lsl #3
   17c0c:	lsl	r2, r2, #3
   17c10:	bl	10fe8 <memset@plt>
   17c14:	ldr	r3, [sp, #72]	; 0x48
   17c18:	str	r3, [r4, #4]
   17c1c:	ldr	sl, [r5]
   17c20:	add	r0, sp, #32
   17c24:	mvn	r3, #0
   17c28:	mov	r2, r6
   17c2c:	ldr	r7, [sp, #28]
   17c30:	ldr	r4, [r5, #4]
   17c34:	mov	r1, sl
   17c38:	str	r0, [sp, #8]
   17c3c:	ldr	lr, [sp, #24]
   17c40:	orr	r7, r7, #1
   17c44:	ldr	ip, [sp, #64]	; 0x40
   17c48:	mov	r0, r4
   17c4c:	ldr	fp, [sp, #68]	; 0x44
   17c50:	str	lr, [sp]
   17c54:	str	r7, [sp, #4]
   17c58:	str	ip, [sp, #12]
   17c5c:	str	fp, [sp, #16]
   17c60:	bl	1571c <__assert_fail@plt+0x4650>
   17c64:	cmp	sl, r0
   17c68:	bhi	17ccc <__assert_fail@plt+0x6c00>
   17c6c:	add	sl, r0, #1
   17c70:	movw	r3, #61968	; 0xf210
   17c74:	movt	r3, #2
   17c78:	cmp	r4, r3
   17c7c:	str	sl, [r5]
   17c80:	beq	17c8c <__assert_fail@plt+0x6bc0>
   17c84:	mov	r0, r4
   17c88:	bl	14c68 <__assert_fail@plt+0x3b9c>
   17c8c:	mov	r0, sl
   17c90:	bl	19784 <__assert_fail@plt+0x86b8>
   17c94:	ldr	r3, [sp, #24]
   17c98:	mov	r2, r6
   17c9c:	mov	r1, sl
   17ca0:	mov	r4, r0
   17ca4:	ldr	lr, [sp, #64]	; 0x40
   17ca8:	ldr	ip, [sp, #68]	; 0x44
   17cac:	str	r0, [r5, #4]
   17cb0:	add	r5, sp, #32
   17cb4:	stm	sp, {r3, r7}
   17cb8:	mvn	r3, #0
   17cbc:	str	r5, [sp, #8]
   17cc0:	str	lr, [sp, #12]
   17cc4:	str	ip, [sp, #16]
   17cc8:	bl	1571c <__assert_fail@plt+0x4650>
   17ccc:	mov	r0, r4
   17cd0:	str	r9, [r8]
   17cd4:	add	sp, sp, #124	; 0x7c
   17cd8:	ldrd	r4, [sp]
   17cdc:	ldrd	r6, [sp, #8]
   17ce0:	ldrd	r8, [sp, #16]
   17ce4:	ldrd	sl, [sp, #24]
   17ce8:	add	sp, sp, #32
   17cec:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf0:	mov	r0, #8
   17cf4:	mvn	r3, #-2147483648	; 0x80000000
   17cf8:	add	r1, sp, #72	; 0x48
   17cfc:	str	r0, [sp]
   17d00:	mov	r0, #0
   17d04:	bl	19a28 <__assert_fail@plt+0x895c>
   17d08:	ldrd	r2, [r4, #8]
   17d0c:	mov	r5, r0
   17d10:	str	r0, [r4]
   17d14:	strd	r2, [r0]
   17d18:	b	17bf8 <__assert_fail@plt+0x6b2c>
   17d1c:	bl	110a8 <abort@plt>
   17d20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17d24:	cmp	r0, #10
   17d28:	strd	r6, [sp, #8]
   17d2c:	mov	r6, #0
   17d30:	mov	r7, #0
   17d34:	strd	r8, [sp, #16]
   17d38:	strd	sl, [sp, #24]
   17d3c:	str	lr, [sp, #32]
   17d40:	sub	sp, sp, #124	; 0x7c
   17d44:	strd	r6, [sp, #72]	; 0x48
   17d48:	strd	r6, [sp, #80]	; 0x50
   17d4c:	strd	r6, [sp, #88]	; 0x58
   17d50:	strd	r6, [sp, #96]	; 0x60
   17d54:	strd	r6, [sp, #104]	; 0x68
   17d58:	strd	r6, [sp, #112]	; 0x70
   17d5c:	beq	17f08 <__assert_fail@plt+0x6e3c>
   17d60:	mov	sl, r2
   17d64:	movw	r5, #61760	; 0xf140
   17d68:	movt	r5, #2
   17d6c:	str	r0, [sp, #72]	; 0x48
   17d70:	mov	r9, r1
   17d74:	ldrd	r2, [sp, #72]	; 0x48
   17d78:	strd	r2, [sp, #24]
   17d7c:	strd	r6, [sp, #32]
   17d80:	strd	r6, [sp, #40]	; 0x28
   17d84:	strd	r6, [sp, #48]	; 0x30
   17d88:	strd	r6, [sp, #56]	; 0x38
   17d8c:	strd	r6, [sp, #64]	; 0x40
   17d90:	bl	10fd0 <__errno_location@plt>
   17d94:	mov	r7, r0
   17d98:	ldr	r4, [r5]
   17d9c:	ldr	r2, [r5, #4]
   17da0:	ldr	fp, [r0]
   17da4:	cmp	r2, #0
   17da8:	bgt	17e04 <__assert_fail@plt+0x6d38>
   17dac:	add	r3, r5, #8
   17db0:	str	r2, [sp, #72]	; 0x48
   17db4:	rsb	r2, r2, #1
   17db8:	cmp	r4, r3
   17dbc:	beq	17edc <__assert_fail@plt+0x6e10>
   17dc0:	mov	r3, #8
   17dc4:	mov	r0, r4
   17dc8:	add	r1, sp, #72	; 0x48
   17dcc:	str	r3, [sp]
   17dd0:	mvn	r3, #-2147483648	; 0x80000000
   17dd4:	bl	19a28 <__assert_fail@plt+0x895c>
   17dd8:	mov	r4, r0
   17ddc:	str	r0, [r5]
   17de0:	ldr	r0, [r5, #4]
   17de4:	mov	r1, #0
   17de8:	ldr	r2, [sp, #72]	; 0x48
   17dec:	sub	r2, r2, r0
   17df0:	add	r0, r4, r0, lsl #3
   17df4:	lsl	r2, r2, #3
   17df8:	bl	10fe8 <memset@plt>
   17dfc:	ldr	r3, [sp, #72]	; 0x48
   17e00:	str	r3, [r5, #4]
   17e04:	ldr	ip, [sp, #24]
   17e08:	add	r0, sp, #32
   17e0c:	mov	r3, sl
   17e10:	mov	r2, r9
   17e14:	ldr	r6, [sp, #28]
   17e18:	ldr	r8, [r4]
   17e1c:	ldr	r5, [r4, #4]
   17e20:	str	ip, [sp]
   17e24:	orr	r6, r6, #1
   17e28:	ldr	ip, [sp, #64]	; 0x40
   17e2c:	mov	r1, r8
   17e30:	str	r6, [sp, #4]
   17e34:	ldr	lr, [sp, #68]	; 0x44
   17e38:	str	r0, [sp, #8]
   17e3c:	mov	r0, r5
   17e40:	str	ip, [sp, #12]
   17e44:	str	lr, [sp, #16]
   17e48:	bl	1571c <__assert_fail@plt+0x4650>
   17e4c:	cmp	r8, r0
   17e50:	bhi	17eb8 <__assert_fail@plt+0x6dec>
   17e54:	add	r8, r0, #1
   17e58:	movw	r3, #61968	; 0xf210
   17e5c:	movt	r3, #2
   17e60:	cmp	r5, r3
   17e64:	str	r8, [r4]
   17e68:	beq	17e74 <__assert_fail@plt+0x6da8>
   17e6c:	mov	r0, r5
   17e70:	bl	14c68 <__assert_fail@plt+0x3b9c>
   17e74:	mov	r0, r8
   17e78:	bl	19784 <__assert_fail@plt+0x86b8>
   17e7c:	ldr	lr, [sp, #24]
   17e80:	mov	r1, r8
   17e84:	mov	r3, sl
   17e88:	mov	r2, r9
   17e8c:	mov	r5, r0
   17e90:	ldr	r8, [sp, #64]	; 0x40
   17e94:	ldr	ip, [sp, #68]	; 0x44
   17e98:	str	r0, [r4, #4]
   17e9c:	str	lr, [sp]
   17ea0:	add	lr, sp, #32
   17ea4:	str	r6, [sp, #4]
   17ea8:	str	lr, [sp, #8]
   17eac:	str	r8, [sp, #12]
   17eb0:	str	ip, [sp, #16]
   17eb4:	bl	1571c <__assert_fail@plt+0x4650>
   17eb8:	mov	r0, r5
   17ebc:	str	fp, [r7]
   17ec0:	add	sp, sp, #124	; 0x7c
   17ec4:	ldrd	r4, [sp]
   17ec8:	ldrd	r6, [sp, #8]
   17ecc:	ldrd	r8, [sp, #16]
   17ed0:	ldrd	sl, [sp, #24]
   17ed4:	add	sp, sp, #32
   17ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   17edc:	mov	r0, #8
   17ee0:	mvn	r3, #-2147483648	; 0x80000000
   17ee4:	add	r1, sp, #72	; 0x48
   17ee8:	str	r0, [sp]
   17eec:	mov	r0, #0
   17ef0:	bl	19a28 <__assert_fail@plt+0x895c>
   17ef4:	ldrd	r2, [r5, #8]
   17ef8:	mov	r4, r0
   17efc:	str	r0, [r5]
   17f00:	strd	r2, [r0]
   17f04:	b	17de0 <__assert_fail@plt+0x6d14>
   17f08:	bl	110a8 <abort@plt>
   17f0c:	ldr	r3, [pc, #492]	; 18100 <__assert_fail@plt+0x7034>
   17f10:	lsr	ip, r2, #5
   17f14:	and	r2, r2, #31
   17f18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17f1c:	movw	r5, #61760	; 0xf140
   17f20:	movt	r5, #2
   17f24:	strd	r6, [sp, #8]
   17f28:	strd	r8, [sp, #16]
   17f2c:	strd	sl, [sp, #24]
   17f30:	mov	sl, r0
   17f34:	mov	fp, r1
   17f38:	ldrd	r0, [r3]
   17f3c:	str	lr, [sp, #32]
   17f40:	sub	sp, sp, #92	; 0x5c
   17f44:	ldrd	r8, [r3, #8]
   17f48:	add	r6, sp, #48	; 0x30
   17f4c:	strd	r0, [sp, #40]	; 0x28
   17f50:	ldrd	r0, [r3, #16]
   17f54:	strd	r8, [sp, #48]	; 0x30
   17f58:	ldrd	r8, [r3, #24]
   17f5c:	strd	r0, [sp, #56]	; 0x38
   17f60:	ldrd	r0, [r3, #32]
   17f64:	strd	r8, [sp, #64]	; 0x40
   17f68:	ldrd	r8, [r3, #40]	; 0x28
   17f6c:	strd	r0, [sp, #72]	; 0x48
   17f70:	strd	r8, [sp, #80]	; 0x50
   17f74:	ldr	r3, [r6, ip, lsl #2]
   17f78:	mvn	r1, r3, lsr r2
   17f7c:	and	r1, r1, #1
   17f80:	eor	r2, r3, r1, lsl r2
   17f84:	str	r2, [r6, ip, lsl #2]
   17f88:	bl	10fd0 <__errno_location@plt>
   17f8c:	ldr	r3, [r0]
   17f90:	mov	r8, r0
   17f94:	ldr	r2, [r5, #4]
   17f98:	ldr	r4, [r5]
   17f9c:	str	r3, [sp, #28]
   17fa0:	cmp	r2, #0
   17fa4:	bgt	18000 <__assert_fail@plt+0x6f34>
   17fa8:	add	r3, r5, #8
   17fac:	str	r2, [sp, #36]	; 0x24
   17fb0:	rsb	r2, r2, #1
   17fb4:	cmp	r4, r3
   17fb8:	beq	180d4 <__assert_fail@plt+0x7008>
   17fbc:	mov	r1, #8
   17fc0:	mov	r0, r4
   17fc4:	mvn	r3, #-2147483648	; 0x80000000
   17fc8:	str	r1, [sp]
   17fcc:	add	r1, sp, #36	; 0x24
   17fd0:	bl	19a28 <__assert_fail@plt+0x895c>
   17fd4:	mov	r4, r0
   17fd8:	str	r0, [r5]
   17fdc:	ldr	r0, [r5, #4]
   17fe0:	mov	r1, #0
   17fe4:	ldr	r2, [sp, #36]	; 0x24
   17fe8:	sub	r2, r2, r0
   17fec:	add	r0, r4, r0, lsl #3
   17ff0:	lsl	r2, r2, #3
   17ff4:	bl	10fe8 <memset@plt>
   17ff8:	ldr	r3, [sp, #36]	; 0x24
   17ffc:	str	r3, [r5, #4]
   18000:	ldr	ip, [sp, #40]	; 0x28
   18004:	mov	r3, fp
   18008:	mov	r2, sl
   1800c:	ldr	r7, [sp, #44]	; 0x2c
   18010:	ldr	r9, [r4]
   18014:	ldr	r5, [r4, #4]
   18018:	str	ip, [sp]
   1801c:	orr	r7, r7, #1
   18020:	ldr	ip, [sp, #80]	; 0x50
   18024:	mov	r1, r9
   18028:	str	r7, [sp, #4]
   1802c:	ldr	lr, [sp, #84]	; 0x54
   18030:	mov	r0, r5
   18034:	str	r6, [sp, #8]
   18038:	str	ip, [sp, #12]
   1803c:	str	lr, [sp, #16]
   18040:	bl	1571c <__assert_fail@plt+0x4650>
   18044:	cmp	r9, r0
   18048:	bhi	180ac <__assert_fail@plt+0x6fe0>
   1804c:	add	r9, r0, #1
   18050:	movw	r3, #61968	; 0xf210
   18054:	movt	r3, #2
   18058:	cmp	r5, r3
   1805c:	str	r9, [r4]
   18060:	beq	1806c <__assert_fail@plt+0x6fa0>
   18064:	mov	r0, r5
   18068:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1806c:	mov	r0, r9
   18070:	bl	19784 <__assert_fail@plt+0x86b8>
   18074:	mov	r1, r9
   18078:	ldr	ip, [sp, #40]	; 0x28
   1807c:	mov	r3, fp
   18080:	mov	r2, sl
   18084:	mov	r5, r0
   18088:	ldr	r9, [sp, #80]	; 0x50
   1808c:	ldr	lr, [sp, #84]	; 0x54
   18090:	str	r0, [r4, #4]
   18094:	str	ip, [sp]
   18098:	str	r7, [sp, #4]
   1809c:	str	r6, [sp, #8]
   180a0:	str	r9, [sp, #12]
   180a4:	str	lr, [sp, #16]
   180a8:	bl	1571c <__assert_fail@plt+0x4650>
   180ac:	ldr	r3, [sp, #28]
   180b0:	mov	r0, r5
   180b4:	str	r3, [r8]
   180b8:	add	sp, sp, #92	; 0x5c
   180bc:	ldrd	r4, [sp]
   180c0:	ldrd	r6, [sp, #8]
   180c4:	ldrd	r8, [sp, #16]
   180c8:	ldrd	sl, [sp, #24]
   180cc:	add	sp, sp, #32
   180d0:	pop	{pc}		; (ldr pc, [sp], #4)
   180d4:	mov	r0, #8
   180d8:	mvn	r3, #-2147483648	; 0x80000000
   180dc:	add	r1, sp, #36	; 0x24
   180e0:	str	r0, [sp]
   180e4:	mov	r0, #0
   180e8:	bl	19a28 <__assert_fail@plt+0x895c>
   180ec:	ldrd	r2, [r5, #8]
   180f0:	mov	r4, r0
   180f4:	str	r0, [r5]
   180f8:	strd	r2, [r0]
   180fc:	b	17fdc <__assert_fail@plt+0x6f10>
   18100:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18104:	ldr	ip, [pc, #476]	; 182e8 <__assert_fail@plt+0x721c>
   18108:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1810c:	movw	r4, #61760	; 0xf140
   18110:	movt	r4, #2
   18114:	ldrd	r2, [ip, #8]
   18118:	strd	r6, [sp, #8]
   1811c:	lsr	r7, r1, #5
   18120:	mov	r6, r0
   18124:	strd	r8, [sp, #16]
   18128:	str	lr, [sp, #32]
   1812c:	and	lr, r1, #31
   18130:	ldrd	r0, [ip]
   18134:	strd	sl, [sp, #24]
   18138:	sub	sp, sp, #84	; 0x54
   1813c:	add	r5, sp, #40	; 0x28
   18140:	strd	r0, [sp, #32]
   18144:	strd	r2, [sp, #40]	; 0x28
   18148:	ldrd	r0, [ip, #16]
   1814c:	ldrd	r2, [ip, #24]
   18150:	strd	r0, [sp, #48]	; 0x30
   18154:	ldrd	r0, [ip, #32]
   18158:	strd	r2, [sp, #56]	; 0x38
   1815c:	ldrd	r2, [ip, #40]	; 0x28
   18160:	strd	r0, [sp, #64]	; 0x40
   18164:	strd	r2, [sp, #72]	; 0x48
   18168:	ldr	r1, [r5, r7, lsl #2]
   1816c:	mvn	r3, r1, lsr lr
   18170:	and	r3, r3, #1
   18174:	eor	r1, r1, r3, lsl lr
   18178:	str	r1, [r5, r7, lsl #2]
   1817c:	bl	10fd0 <__errno_location@plt>
   18180:	mov	r9, r0
   18184:	ldr	sl, [r0]
   18188:	ldr	r2, [r4, #4]
   1818c:	ldr	r7, [r4]
   18190:	cmp	r2, #0
   18194:	bgt	181f0 <__assert_fail@plt+0x7124>
   18198:	add	r3, r4, #8
   1819c:	str	r2, [sp, #28]
   181a0:	rsb	r2, r2, #1
   181a4:	cmp	r7, r3
   181a8:	beq	182bc <__assert_fail@plt+0x71f0>
   181ac:	mov	r1, #8
   181b0:	mov	r0, r7
   181b4:	mvn	r3, #-2147483648	; 0x80000000
   181b8:	str	r1, [sp]
   181bc:	add	r1, sp, #28
   181c0:	bl	19a28 <__assert_fail@plt+0x895c>
   181c4:	mov	r7, r0
   181c8:	str	r0, [r4]
   181cc:	ldr	r0, [r4, #4]
   181d0:	mov	r1, #0
   181d4:	ldr	r2, [sp, #28]
   181d8:	sub	r2, r2, r0
   181dc:	add	r0, r7, r0, lsl #3
   181e0:	lsl	r2, r2, #3
   181e4:	bl	10fe8 <memset@plt>
   181e8:	ldr	r3, [sp, #28]
   181ec:	str	r3, [r4, #4]
   181f0:	ldr	ip, [sp, #32]
   181f4:	mvn	r3, #0
   181f8:	mov	r2, r6
   181fc:	ldr	r8, [sp, #36]	; 0x24
   18200:	ldr	fp, [r7]
   18204:	ldr	r4, [r7, #4]
   18208:	str	ip, [sp]
   1820c:	orr	r8, r8, #1
   18210:	ldr	ip, [sp, #72]	; 0x48
   18214:	mov	r1, fp
   18218:	str	r8, [sp, #4]
   1821c:	ldr	lr, [sp, #76]	; 0x4c
   18220:	mov	r0, r4
   18224:	str	r5, [sp, #8]
   18228:	str	ip, [sp, #12]
   1822c:	str	lr, [sp, #16]
   18230:	bl	1571c <__assert_fail@plt+0x4650>
   18234:	cmp	fp, r0
   18238:	bhi	18298 <__assert_fail@plt+0x71cc>
   1823c:	add	fp, r0, #1
   18240:	movw	r3, #61968	; 0xf210
   18244:	movt	r3, #2
   18248:	cmp	r4, r3
   1824c:	str	fp, [r7]
   18250:	beq	1825c <__assert_fail@plt+0x7190>
   18254:	mov	r0, r4
   18258:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1825c:	mov	r0, fp
   18260:	bl	19784 <__assert_fail@plt+0x86b8>
   18264:	ldr	r3, [sp, #32]
   18268:	mov	r2, r6
   1826c:	mov	r1, fp
   18270:	mov	r4, r0
   18274:	ldr	lr, [sp, #72]	; 0x48
   18278:	ldr	ip, [sp, #76]	; 0x4c
   1827c:	str	r0, [r7, #4]
   18280:	stm	sp, {r3, r8}
   18284:	mvn	r3, #0
   18288:	str	r5, [sp, #8]
   1828c:	str	lr, [sp, #12]
   18290:	str	ip, [sp, #16]
   18294:	bl	1571c <__assert_fail@plt+0x4650>
   18298:	mov	r0, r4
   1829c:	str	sl, [r9]
   182a0:	add	sp, sp, #84	; 0x54
   182a4:	ldrd	r4, [sp]
   182a8:	ldrd	r6, [sp, #8]
   182ac:	ldrd	r8, [sp, #16]
   182b0:	ldrd	sl, [sp, #24]
   182b4:	add	sp, sp, #32
   182b8:	pop	{pc}		; (ldr pc, [sp], #4)
   182bc:	mov	r0, #8
   182c0:	mvn	r3, #-2147483648	; 0x80000000
   182c4:	add	r1, sp, #28
   182c8:	str	r0, [sp]
   182cc:	mov	r0, #0
   182d0:	bl	19a28 <__assert_fail@plt+0x895c>
   182d4:	ldrd	r2, [r4, #8]
   182d8:	mov	r7, r0
   182dc:	str	r0, [r4]
   182e0:	strd	r2, [r0]
   182e4:	b	181cc <__assert_fail@plt+0x7100>
   182e8:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   182ec:	ldr	ip, [pc, #472]	; 184cc <__assert_fail@plt+0x7400>
   182f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   182f4:	mov	r5, r0
   182f8:	movw	r4, #61760	; 0xf140
   182fc:	movt	r4, #2
   18300:	ldrd	r2, [ip]
   18304:	ldrd	r0, [ip, #8]
   18308:	strd	r6, [sp, #8]
   1830c:	strd	r8, [sp, #16]
   18310:	strd	sl, [sp, #24]
   18314:	str	lr, [sp, #32]
   18318:	sub	sp, sp, #84	; 0x54
   1831c:	strd	r2, [sp, #32]
   18320:	strd	r0, [sp, #40]	; 0x28
   18324:	ldr	r6, [sp, #44]	; 0x2c
   18328:	ldrd	r2, [ip, #16]
   1832c:	ldrd	r0, [ip, #24]
   18330:	mvn	lr, r6
   18334:	and	lr, lr, #67108864	; 0x4000000
   18338:	eor	lr, lr, r6
   1833c:	ldrd	r6, [ip, #40]	; 0x28
   18340:	strd	r2, [sp, #48]	; 0x30
   18344:	ldrd	r2, [ip, #32]
   18348:	str	lr, [sp, #44]	; 0x2c
   1834c:	strd	r0, [sp, #56]	; 0x38
   18350:	strd	r2, [sp, #64]	; 0x40
   18354:	strd	r6, [sp, #72]	; 0x48
   18358:	bl	10fd0 <__errno_location@plt>
   1835c:	mov	r8, r0
   18360:	ldr	r9, [r0]
   18364:	ldr	r2, [r4, #4]
   18368:	ldr	r6, [r4]
   1836c:	cmp	r2, #0
   18370:	bgt	183cc <__assert_fail@plt+0x7300>
   18374:	add	r3, r4, #8
   18378:	str	r2, [sp, #28]
   1837c:	rsb	r2, r2, #1
   18380:	cmp	r6, r3
   18384:	beq	184a0 <__assert_fail@plt+0x73d4>
   18388:	mov	r1, #8
   1838c:	mov	r0, r6
   18390:	mvn	r3, #-2147483648	; 0x80000000
   18394:	str	r1, [sp]
   18398:	add	r1, sp, #28
   1839c:	bl	19a28 <__assert_fail@plt+0x895c>
   183a0:	mov	r6, r0
   183a4:	str	r0, [r4]
   183a8:	ldr	r0, [r4, #4]
   183ac:	mov	r1, #0
   183b0:	ldr	r2, [sp, #28]
   183b4:	sub	r2, r2, r0
   183b8:	add	r0, r6, r0, lsl #3
   183bc:	lsl	r2, r2, #3
   183c0:	bl	10fe8 <memset@plt>
   183c4:	ldr	r3, [sp, #28]
   183c8:	str	r3, [r4, #4]
   183cc:	ldr	sl, [r6]
   183d0:	add	r0, sp, #40	; 0x28
   183d4:	mvn	r3, #0
   183d8:	mov	r2, r5
   183dc:	ldr	r7, [sp, #36]	; 0x24
   183e0:	ldr	r4, [r6, #4]
   183e4:	mov	r1, sl
   183e8:	str	r0, [sp, #8]
   183ec:	ldr	lr, [sp, #32]
   183f0:	orr	r7, r7, #1
   183f4:	ldr	ip, [sp, #72]	; 0x48
   183f8:	mov	r0, r4
   183fc:	ldr	fp, [sp, #76]	; 0x4c
   18400:	str	lr, [sp]
   18404:	str	r7, [sp, #4]
   18408:	str	ip, [sp, #12]
   1840c:	str	fp, [sp, #16]
   18410:	bl	1571c <__assert_fail@plt+0x4650>
   18414:	cmp	sl, r0
   18418:	bhi	1847c <__assert_fail@plt+0x73b0>
   1841c:	add	sl, r0, #1
   18420:	movw	r3, #61968	; 0xf210
   18424:	movt	r3, #2
   18428:	cmp	r4, r3
   1842c:	str	sl, [r6]
   18430:	beq	1843c <__assert_fail@plt+0x7370>
   18434:	mov	r0, r4
   18438:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1843c:	mov	r0, sl
   18440:	bl	19784 <__assert_fail@plt+0x86b8>
   18444:	ldr	r3, [sp, #32]
   18448:	mov	r2, r5
   1844c:	add	r5, sp, #40	; 0x28
   18450:	mov	r1, sl
   18454:	mov	r4, r0
   18458:	ldr	lr, [sp, #72]	; 0x48
   1845c:	ldr	ip, [sp, #76]	; 0x4c
   18460:	str	r0, [r6, #4]
   18464:	stm	sp, {r3, r7}
   18468:	mvn	r3, #0
   1846c:	str	r5, [sp, #8]
   18470:	str	lr, [sp, #12]
   18474:	str	ip, [sp, #16]
   18478:	bl	1571c <__assert_fail@plt+0x4650>
   1847c:	mov	r0, r4
   18480:	str	r9, [r8]
   18484:	add	sp, sp, #84	; 0x54
   18488:	ldrd	r4, [sp]
   1848c:	ldrd	r6, [sp, #8]
   18490:	ldrd	r8, [sp, #16]
   18494:	ldrd	sl, [sp, #24]
   18498:	add	sp, sp, #32
   1849c:	pop	{pc}		; (ldr pc, [sp], #4)
   184a0:	mov	r0, #8
   184a4:	mvn	r3, #-2147483648	; 0x80000000
   184a8:	add	r1, sp, #28
   184ac:	str	r0, [sp]
   184b0:	mov	r0, #0
   184b4:	bl	19a28 <__assert_fail@plt+0x895c>
   184b8:	ldrd	r2, [r4, #8]
   184bc:	mov	r6, r0
   184c0:	str	r0, [r4]
   184c4:	strd	r2, [r0]
   184c8:	b	183a8 <__assert_fail@plt+0x72dc>
   184cc:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   184d0:	ldr	ip, [pc, #480]	; 186b8 <__assert_fail@plt+0x75ec>
   184d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   184d8:	mov	r5, r0
   184dc:	movw	r4, #61760	; 0xf140
   184e0:	movt	r4, #2
   184e4:	ldrd	r2, [ip]
   184e8:	strd	r6, [sp, #8]
   184ec:	mov	r6, r1
   184f0:	ldrd	r0, [ip, #8]
   184f4:	strd	r8, [sp, #16]
   184f8:	strd	sl, [sp, #24]
   184fc:	str	lr, [sp, #32]
   18500:	sub	sp, sp, #84	; 0x54
   18504:	ldrd	r8, [ip, #40]	; 0x28
   18508:	strd	r2, [sp, #32]
   1850c:	strd	r0, [sp, #40]	; 0x28
   18510:	ldrd	r2, [ip, #16]
   18514:	ldr	r7, [sp, #44]	; 0x2c
   18518:	ldrd	r0, [ip, #24]
   1851c:	strd	r2, [sp, #48]	; 0x30
   18520:	ldrd	r2, [ip, #32]
   18524:	mvn	lr, r7
   18528:	and	lr, lr, #67108864	; 0x4000000
   1852c:	eor	lr, lr, r7
   18530:	str	lr, [sp, #44]	; 0x2c
   18534:	strd	r0, [sp, #56]	; 0x38
   18538:	strd	r2, [sp, #64]	; 0x40
   1853c:	strd	r8, [sp, #72]	; 0x48
   18540:	bl	10fd0 <__errno_location@plt>
   18544:	mov	r9, r0
   18548:	ldr	sl, [r0]
   1854c:	ldr	r2, [r4, #4]
   18550:	ldr	r7, [r4]
   18554:	cmp	r2, #0
   18558:	bgt	185b4 <__assert_fail@plt+0x74e8>
   1855c:	add	r3, r4, #8
   18560:	str	r2, [sp, #28]
   18564:	rsb	r2, r2, #1
   18568:	cmp	r7, r3
   1856c:	beq	1868c <__assert_fail@plt+0x75c0>
   18570:	mov	r1, #8
   18574:	mov	r0, r7
   18578:	mvn	r3, #-2147483648	; 0x80000000
   1857c:	str	r1, [sp]
   18580:	add	r1, sp, #28
   18584:	bl	19a28 <__assert_fail@plt+0x895c>
   18588:	mov	r7, r0
   1858c:	str	r0, [r4]
   18590:	ldr	r0, [r4, #4]
   18594:	mov	r1, #0
   18598:	ldr	r2, [sp, #28]
   1859c:	sub	r2, r2, r0
   185a0:	add	r0, r7, r0, lsl #3
   185a4:	lsl	r2, r2, #3
   185a8:	bl	10fe8 <memset@plt>
   185ac:	ldr	r3, [sp, #28]
   185b0:	str	r3, [r4, #4]
   185b4:	ldr	ip, [sp, #32]
   185b8:	add	r0, sp, #40	; 0x28
   185bc:	mov	r3, r6
   185c0:	mov	r2, r5
   185c4:	ldr	r8, [sp, #36]	; 0x24
   185c8:	ldr	fp, [r7]
   185cc:	ldr	r4, [r7, #4]
   185d0:	str	ip, [sp]
   185d4:	orr	r8, r8, #1
   185d8:	ldr	ip, [sp, #72]	; 0x48
   185dc:	mov	r1, fp
   185e0:	str	r8, [sp, #4]
   185e4:	ldr	lr, [sp, #76]	; 0x4c
   185e8:	str	r0, [sp, #8]
   185ec:	mov	r0, r4
   185f0:	str	ip, [sp, #12]
   185f4:	str	lr, [sp, #16]
   185f8:	bl	1571c <__assert_fail@plt+0x4650>
   185fc:	cmp	fp, r0
   18600:	bhi	18668 <__assert_fail@plt+0x759c>
   18604:	add	fp, r0, #1
   18608:	movw	r3, #61968	; 0xf210
   1860c:	movt	r3, #2
   18610:	cmp	r4, r3
   18614:	str	fp, [r7]
   18618:	beq	18624 <__assert_fail@plt+0x7558>
   1861c:	mov	r0, r4
   18620:	bl	14c68 <__assert_fail@plt+0x3b9c>
   18624:	mov	r0, fp
   18628:	bl	19784 <__assert_fail@plt+0x86b8>
   1862c:	ldr	lr, [sp, #32]
   18630:	mov	r2, r5
   18634:	mov	r3, r6
   18638:	mov	r1, fp
   1863c:	mov	r4, r0
   18640:	ldr	r5, [sp, #72]	; 0x48
   18644:	ldr	ip, [sp, #76]	; 0x4c
   18648:	str	r0, [r7, #4]
   1864c:	str	lr, [sp]
   18650:	add	lr, sp, #40	; 0x28
   18654:	str	r8, [sp, #4]
   18658:	str	lr, [sp, #8]
   1865c:	str	r5, [sp, #12]
   18660:	str	ip, [sp, #16]
   18664:	bl	1571c <__assert_fail@plt+0x4650>
   18668:	mov	r0, r4
   1866c:	str	sl, [r9]
   18670:	add	sp, sp, #84	; 0x54
   18674:	ldrd	r4, [sp]
   18678:	ldrd	r6, [sp, #8]
   1867c:	ldrd	r8, [sp, #16]
   18680:	ldrd	sl, [sp, #24]
   18684:	add	sp, sp, #32
   18688:	pop	{pc}		; (ldr pc, [sp], #4)
   1868c:	mov	r0, #8
   18690:	mvn	r3, #-2147483648	; 0x80000000
   18694:	add	r1, sp, #28
   18698:	str	r0, [sp]
   1869c:	mov	r0, #0
   186a0:	bl	19a28 <__assert_fail@plt+0x895c>
   186a4:	ldrd	r2, [r4, #8]
   186a8:	mov	r7, r0
   186ac:	str	r0, [r4]
   186b0:	strd	r2, [r0]
   186b4:	b	18590 <__assert_fail@plt+0x74c4>
   186b8:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   186bc:	strd	r4, [sp, #-12]!
   186c0:	mov	r4, #0
   186c4:	mov	r5, #0
   186c8:	str	lr, [sp, #8]
   186cc:	sub	sp, sp, #100	; 0x64
   186d0:	cmp	r1, #10
   186d4:	strd	r4, [sp]
   186d8:	strd	r4, [sp, #8]
   186dc:	strd	r4, [sp, #16]
   186e0:	strd	r4, [sp, #24]
   186e4:	strd	r4, [sp, #32]
   186e8:	strd	r4, [sp, #40]	; 0x28
   186ec:	beq	1871c <__assert_fail@plt+0x7650>
   186f0:	mov	ip, #67108864	; 0x4000000
   186f4:	mov	r3, sp
   186f8:	str	r1, [sp]
   186fc:	mov	r1, r2
   18700:	mvn	r2, #0
   18704:	str	ip, [sp, #12]
   18708:	bl	17108 <__assert_fail@plt+0x603c>
   1870c:	add	sp, sp, #100	; 0x64
   18710:	ldrd	r4, [sp]
   18714:	add	sp, sp, #8
   18718:	pop	{pc}		; (ldr pc, [sp], #4)
   1871c:	bl	110a8 <abort@plt>
   18720:	ldr	ip, [pc, #156]	; 187c4 <__assert_fail@plt+0x76f8>
   18724:	cmp	r2, #0
   18728:	cmpne	r1, #0
   1872c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18730:	strd	r6, [sp, #8]
   18734:	mov	r6, r2
   18738:	str	r8, [sp, #16]
   1873c:	mov	r8, r3
   18740:	strd	sl, [sp, #20]
   18744:	ldrd	r4, [ip]
   18748:	str	lr, [sp, #28]
   1874c:	sub	sp, sp, #48	; 0x30
   18750:	mov	lr, #10
   18754:	ldrd	r2, [ip, #8]
   18758:	ldrd	sl, [ip, #16]
   1875c:	strd	r4, [sp]
   18760:	ldrd	r4, [ip, #32]
   18764:	str	lr, [sp]
   18768:	strd	r2, [sp, #8]
   1876c:	strd	sl, [sp, #16]
   18770:	ldrd	r2, [ip, #24]
   18774:	ldrd	sl, [ip, #40]	; 0x28
   18778:	strd	r2, [sp, #24]
   1877c:	strd	r4, [sp, #32]
   18780:	strd	sl, [sp, #40]	; 0x28
   18784:	beq	187c0 <__assert_fail@plt+0x76f4>
   18788:	mov	r7, r1
   1878c:	mov	r3, sp
   18790:	mov	r1, r8
   18794:	mvn	r2, #0
   18798:	str	r7, [sp, #40]	; 0x28
   1879c:	str	r6, [sp, #44]	; 0x2c
   187a0:	bl	17108 <__assert_fail@plt+0x603c>
   187a4:	add	sp, sp, #48	; 0x30
   187a8:	ldrd	r4, [sp]
   187ac:	ldrd	r6, [sp, #8]
   187b0:	ldr	r8, [sp, #16]
   187b4:	ldrd	sl, [sp, #20]
   187b8:	add	sp, sp, #28
   187bc:	pop	{pc}		; (ldr pc, [sp], #4)
   187c0:	bl	110a8 <abort@plt>
   187c4:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   187c8:	ldr	ip, [pc, #156]	; 1886c <__assert_fail@plt+0x77a0>
   187cc:	cmp	r2, #0
   187d0:	cmpne	r1, #0
   187d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   187d8:	strd	r6, [sp, #8]
   187dc:	mov	r6, r2
   187e0:	str	r8, [sp, #16]
   187e4:	mov	r8, r3
   187e8:	strd	sl, [sp, #20]
   187ec:	ldrd	r4, [ip]
   187f0:	str	lr, [sp, #28]
   187f4:	sub	sp, sp, #48	; 0x30
   187f8:	mov	lr, #10
   187fc:	ldrd	r2, [ip, #8]
   18800:	ldrd	sl, [ip, #16]
   18804:	strd	r4, [sp]
   18808:	ldrd	r4, [ip, #32]
   1880c:	str	lr, [sp]
   18810:	strd	r2, [sp, #8]
   18814:	strd	sl, [sp, #16]
   18818:	ldrd	r2, [ip, #24]
   1881c:	ldrd	sl, [ip, #40]	; 0x28
   18820:	strd	r2, [sp, #24]
   18824:	strd	r4, [sp, #32]
   18828:	strd	sl, [sp, #40]	; 0x28
   1882c:	beq	18868 <__assert_fail@plt+0x779c>
   18830:	ldr	r2, [sp, #80]	; 0x50
   18834:	mov	r7, r1
   18838:	mov	r3, sp
   1883c:	mov	r1, r8
   18840:	str	r7, [sp, #40]	; 0x28
   18844:	str	r6, [sp, #44]	; 0x2c
   18848:	bl	17108 <__assert_fail@plt+0x603c>
   1884c:	add	sp, sp, #48	; 0x30
   18850:	ldrd	r4, [sp]
   18854:	ldrd	r6, [sp, #8]
   18858:	ldr	r8, [sp, #16]
   1885c:	ldrd	sl, [sp, #20]
   18860:	add	sp, sp, #28
   18864:	pop	{pc}		; (ldr pc, [sp], #4)
   18868:	bl	110a8 <abort@plt>
   1886c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18870:	ldr	ip, [pc, #512]	; 18a78 <__assert_fail@plt+0x79ac>
   18874:	cmp	r0, #0
   18878:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1887c:	ldrd	r4, [ip, #16]
   18880:	strd	r6, [sp, #8]
   18884:	clz	r6, r1
   18888:	mov	r7, r1
   1888c:	strd	r8, [sp, #16]
   18890:	mov	r8, r0
   18894:	lsr	r6, r6, #5
   18898:	strd	sl, [sp, #24]
   1889c:	mov	fp, r2
   188a0:	mov	sl, #10
   188a4:	ldrd	r2, [ip]
   188a8:	moveq	r6, #1
   188ac:	str	lr, [sp, #32]
   188b0:	sub	sp, sp, #92	; 0x5c
   188b4:	cmp	r6, #0
   188b8:	ldrd	r0, [ip, #8]
   188bc:	strd	r2, [sp, #40]	; 0x28
   188c0:	strd	r4, [sp, #56]	; 0x38
   188c4:	ldrd	r2, [ip, #24]
   188c8:	strd	r0, [sp, #48]	; 0x30
   188cc:	ldrd	r0, [ip, #32]
   188d0:	str	sl, [sp, #40]	; 0x28
   188d4:	ldrd	r4, [ip, #40]	; 0x28
   188d8:	strd	r2, [sp, #64]	; 0x40
   188dc:	strd	r0, [sp, #72]	; 0x48
   188e0:	strd	r4, [sp, #80]	; 0x50
   188e4:	bne	18a74 <__assert_fail@plt+0x79a8>
   188e8:	movw	r5, #61760	; 0xf140
   188ec:	movt	r5, #2
   188f0:	str	r8, [sp, #80]	; 0x50
   188f4:	str	r7, [sp, #84]	; 0x54
   188f8:	bl	10fd0 <__errno_location@plt>
   188fc:	ldr	r3, [r0]
   18900:	mov	r9, r0
   18904:	ldr	r2, [r5, #4]
   18908:	ldr	r4, [r5]
   1890c:	str	r3, [sp, #28]
   18910:	cmp	r2, #0
   18914:	movgt	r1, sl
   18918:	bgt	18980 <__assert_fail@plt+0x78b4>
   1891c:	add	r3, r5, #8
   18920:	str	r2, [sp, #36]	; 0x24
   18924:	rsb	r2, r2, #1
   18928:	cmp	r4, r3
   1892c:	beq	18a48 <__assert_fail@plt+0x797c>
   18930:	mov	r1, #8
   18934:	mov	r0, r4
   18938:	mvn	r3, #-2147483648	; 0x80000000
   1893c:	str	r1, [sp]
   18940:	add	r1, sp, #36	; 0x24
   18944:	bl	19a28 <__assert_fail@plt+0x895c>
   18948:	mov	r4, r0
   1894c:	str	r0, [r5]
   18950:	ldr	r0, [r5, #4]
   18954:	mov	r1, #0
   18958:	ldr	r2, [sp, #36]	; 0x24
   1895c:	sub	r2, r2, r0
   18960:	add	r0, r4, r0, lsl #3
   18964:	lsl	r2, r2, #3
   18968:	bl	10fe8 <memset@plt>
   1896c:	ldr	r3, [sp, #36]	; 0x24
   18970:	ldr	r1, [sp, #40]	; 0x28
   18974:	ldr	r8, [sp, #80]	; 0x50
   18978:	str	r3, [r5, #4]
   1897c:	ldr	r7, [sp, #84]	; 0x54
   18980:	mvn	r3, #0
   18984:	mov	r2, fp
   18988:	ldr	r6, [sp, #44]	; 0x2c
   1898c:	ldr	sl, [r4]
   18990:	ldr	r5, [r4, #4]
   18994:	orr	r6, r6, #1
   18998:	stm	sp, {r1, r6}
   1899c:	add	r1, sp, #48	; 0x30
   189a0:	str	r8, [sp, #12]
   189a4:	mov	r0, r5
   189a8:	str	r1, [sp, #8]
   189ac:	mov	r1, sl
   189b0:	str	r7, [sp, #16]
   189b4:	bl	1571c <__assert_fail@plt+0x4650>
   189b8:	cmp	sl, r0
   189bc:	bhi	18a20 <__assert_fail@plt+0x7954>
   189c0:	add	r7, r0, #1
   189c4:	movw	r3, #61968	; 0xf210
   189c8:	movt	r3, #2
   189cc:	cmp	r5, r3
   189d0:	str	r7, [r4]
   189d4:	beq	189e0 <__assert_fail@plt+0x7914>
   189d8:	mov	r0, r5
   189dc:	bl	14c68 <__assert_fail@plt+0x3b9c>
   189e0:	mov	r0, r7
   189e4:	bl	19784 <__assert_fail@plt+0x86b8>
   189e8:	ldr	r3, [sp, #40]	; 0x28
   189ec:	mov	r2, fp
   189f0:	mov	r1, r7
   189f4:	mov	r5, r0
   189f8:	ldr	lr, [sp, #80]	; 0x50
   189fc:	ldr	ip, [sp, #84]	; 0x54
   18a00:	str	r0, [r4, #4]
   18a04:	add	r4, sp, #48	; 0x30
   18a08:	stm	sp, {r3, r6}
   18a0c:	mvn	r3, #0
   18a10:	str	r4, [sp, #8]
   18a14:	str	lr, [sp, #12]
   18a18:	str	ip, [sp, #16]
   18a1c:	bl	1571c <__assert_fail@plt+0x4650>
   18a20:	ldr	r3, [sp, #28]
   18a24:	mov	r0, r5
   18a28:	str	r3, [r9]
   18a2c:	add	sp, sp, #92	; 0x5c
   18a30:	ldrd	r4, [sp]
   18a34:	ldrd	r6, [sp, #8]
   18a38:	ldrd	r8, [sp, #16]
   18a3c:	ldrd	sl, [sp, #24]
   18a40:	add	sp, sp, #32
   18a44:	pop	{pc}		; (ldr pc, [sp], #4)
   18a48:	mov	r1, #8
   18a4c:	mvn	r3, #-2147483648	; 0x80000000
   18a50:	mov	r0, r6
   18a54:	str	r1, [sp]
   18a58:	add	r1, sp, #36	; 0x24
   18a5c:	bl	19a28 <__assert_fail@plt+0x895c>
   18a60:	ldrd	r2, [r5, #8]
   18a64:	mov	r4, r0
   18a68:	str	r0, [r5]
   18a6c:	strd	r2, [r0]
   18a70:	b	18950 <__assert_fail@plt+0x7884>
   18a74:	bl	110a8 <abort@plt>
   18a78:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18a7c:	ldr	ip, [pc, #536]	; 18c9c <__assert_fail@plt+0x7bd0>
   18a80:	cmp	r0, #0
   18a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a88:	ldrd	r4, [ip, #16]
   18a8c:	strd	r6, [sp, #8]
   18a90:	mov	r6, r1
   18a94:	mov	r7, r0
   18a98:	strd	r8, [sp, #16]
   18a9c:	mov	r9, #10
   18aa0:	strd	sl, [sp, #24]
   18aa4:	mov	sl, r2
   18aa8:	mov	fp, r3
   18aac:	str	lr, [sp, #32]
   18ab0:	clz	lr, r1
   18ab4:	sub	sp, sp, #92	; 0x5c
   18ab8:	ldrd	r2, [ip]
   18abc:	lsr	lr, lr, #5
   18ac0:	moveq	lr, #1
   18ac4:	ldrd	r0, [ip, #8]
   18ac8:	cmp	lr, #0
   18acc:	strd	r4, [sp, #56]	; 0x38
   18ad0:	ldrd	r4, [ip, #40]	; 0x28
   18ad4:	str	lr, [sp, #28]
   18ad8:	strd	r2, [sp, #40]	; 0x28
   18adc:	ldrd	r2, [ip, #24]
   18ae0:	strd	r0, [sp, #48]	; 0x30
   18ae4:	ldrd	r0, [ip, #32]
   18ae8:	str	r9, [sp, #40]	; 0x28
   18aec:	strd	r2, [sp, #64]	; 0x40
   18af0:	strd	r4, [sp, #80]	; 0x50
   18af4:	strd	r0, [sp, #72]	; 0x48
   18af8:	bne	18c98 <__assert_fail@plt+0x7bcc>
   18afc:	movw	r5, #61760	; 0xf140
   18b00:	movt	r5, #2
   18b04:	str	r7, [sp, #80]	; 0x50
   18b08:	str	r6, [sp, #84]	; 0x54
   18b0c:	bl	10fd0 <__errno_location@plt>
   18b10:	ldr	r3, [r0]
   18b14:	mov	r8, r0
   18b18:	ldr	r2, [r5, #4]
   18b1c:	ldr	r4, [r5]
   18b20:	str	r3, [sp, #24]
   18b24:	cmp	r2, #0
   18b28:	movgt	r1, r9
   18b2c:	bgt	18b94 <__assert_fail@plt+0x7ac8>
   18b30:	add	r3, r5, #8
   18b34:	str	r2, [sp, #36]	; 0x24
   18b38:	rsb	r2, r2, #1
   18b3c:	cmp	r4, r3
   18b40:	beq	18c6c <__assert_fail@plt+0x7ba0>
   18b44:	mov	r1, #8
   18b48:	mov	r0, r4
   18b4c:	mvn	r3, #-2147483648	; 0x80000000
   18b50:	str	r1, [sp]
   18b54:	add	r1, sp, #36	; 0x24
   18b58:	bl	19a28 <__assert_fail@plt+0x895c>
   18b5c:	mov	r4, r0
   18b60:	str	r0, [r5]
   18b64:	ldr	r0, [r5, #4]
   18b68:	mov	r1, #0
   18b6c:	ldr	r2, [sp, #36]	; 0x24
   18b70:	sub	r2, r2, r0
   18b74:	add	r0, r4, r0, lsl #3
   18b78:	lsl	r2, r2, #3
   18b7c:	bl	10fe8 <memset@plt>
   18b80:	ldr	r3, [sp, #36]	; 0x24
   18b84:	ldr	r1, [sp, #40]	; 0x28
   18b88:	ldr	r7, [sp, #80]	; 0x50
   18b8c:	str	r3, [r5, #4]
   18b90:	ldr	r6, [sp, #84]	; 0x54
   18b94:	mov	r3, fp
   18b98:	mov	r2, sl
   18b9c:	ldr	r0, [sp, #44]	; 0x2c
   18ba0:	ldr	r9, [r4]
   18ba4:	ldr	r5, [r4, #4]
   18ba8:	orr	r0, r0, #1
   18bac:	str	r1, [sp]
   18bb0:	add	r1, sp, #48	; 0x30
   18bb4:	str	r0, [sp, #4]
   18bb8:	str	r1, [sp, #8]
   18bbc:	mov	r1, r9
   18bc0:	str	r7, [sp, #12]
   18bc4:	str	r6, [sp, #16]
   18bc8:	str	r0, [sp, #28]
   18bcc:	mov	r0, r5
   18bd0:	bl	1571c <__assert_fail@plt+0x4650>
   18bd4:	cmp	r9, r0
   18bd8:	bhi	18c44 <__assert_fail@plt+0x7b78>
   18bdc:	add	r6, r0, #1
   18be0:	movw	r3, #61968	; 0xf210
   18be4:	movt	r3, #2
   18be8:	cmp	r5, r3
   18bec:	str	r6, [r4]
   18bf0:	beq	18bfc <__assert_fail@plt+0x7b30>
   18bf4:	mov	r0, r5
   18bf8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   18bfc:	mov	r0, r6
   18c00:	bl	19784 <__assert_fail@plt+0x86b8>
   18c04:	ldr	lr, [sp, #40]	; 0x28
   18c08:	mov	r1, r6
   18c0c:	mov	r3, fp
   18c10:	mov	r2, sl
   18c14:	mov	r5, r0
   18c18:	ldr	r6, [sp, #80]	; 0x50
   18c1c:	ldr	ip, [sp, #84]	; 0x54
   18c20:	str	r0, [r4, #4]
   18c24:	str	lr, [sp]
   18c28:	ldr	lr, [sp, #28]
   18c2c:	str	lr, [sp, #4]
   18c30:	add	lr, sp, #48	; 0x30
   18c34:	str	r6, [sp, #12]
   18c38:	str	lr, [sp, #8]
   18c3c:	str	ip, [sp, #16]
   18c40:	bl	1571c <__assert_fail@plt+0x4650>
   18c44:	ldr	r3, [sp, #24]
   18c48:	mov	r0, r5
   18c4c:	str	r3, [r8]
   18c50:	add	sp, sp, #92	; 0x5c
   18c54:	ldrd	r4, [sp]
   18c58:	ldrd	r6, [sp, #8]
   18c5c:	ldrd	r8, [sp, #16]
   18c60:	ldrd	sl, [sp, #24]
   18c64:	add	sp, sp, #32
   18c68:	pop	{pc}		; (ldr pc, [sp], #4)
   18c6c:	mov	r1, #8
   18c70:	mvn	r3, #-2147483648	; 0x80000000
   18c74:	ldr	r0, [sp, #28]
   18c78:	str	r1, [sp]
   18c7c:	add	r1, sp, #36	; 0x24
   18c80:	bl	19a28 <__assert_fail@plt+0x895c>
   18c84:	ldrd	r2, [r5, #8]
   18c88:	mov	r4, r0
   18c8c:	str	r0, [r5]
   18c90:	strd	r2, [r0]
   18c94:	b	18b64 <__assert_fail@plt+0x7a98>
   18c98:	bl	110a8 <abort@plt>
   18c9c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18ca0:	ldr	r3, [pc]	; 18ca8 <__assert_fail@plt+0x7bdc>
   18ca4:	b	17108 <__assert_fail@plt+0x603c>
   18ca8:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   18cac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18cb0:	movw	r4, #61760	; 0xf140
   18cb4:	movt	r4, #2
   18cb8:	strd	r6, [sp, #8]
   18cbc:	strd	r8, [sp, #16]
   18cc0:	strd	sl, [sp, #24]
   18cc4:	mov	sl, r0
   18cc8:	mov	fp, r1
   18ccc:	str	lr, [sp, #32]
   18cd0:	sub	sp, sp, #44	; 0x2c
   18cd4:	bl	10fd0 <__errno_location@plt>
   18cd8:	ldr	r3, [r0]
   18cdc:	mov	r8, r0
   18ce0:	ldr	r2, [r4, #4]
   18ce4:	ldr	r5, [r4]
   18ce8:	str	r3, [sp, #28]
   18cec:	cmp	r2, #0
   18cf0:	bgt	18d4c <__assert_fail@plt+0x7c80>
   18cf4:	add	r3, r4, #8
   18cf8:	str	r2, [sp, #36]	; 0x24
   18cfc:	rsb	r2, r2, #1
   18d00:	cmp	r5, r3
   18d04:	beq	18e28 <__assert_fail@plt+0x7d5c>
   18d08:	mov	r1, #8
   18d0c:	mov	r0, r5
   18d10:	mvn	r3, #-2147483648	; 0x80000000
   18d14:	str	r1, [sp]
   18d18:	add	r1, sp, #36	; 0x24
   18d1c:	bl	19a28 <__assert_fail@plt+0x895c>
   18d20:	mov	r5, r0
   18d24:	str	r0, [r4]
   18d28:	ldr	r0, [r4, #4]
   18d2c:	mov	r1, #0
   18d30:	ldr	r2, [sp, #36]	; 0x24
   18d34:	sub	r2, r2, r0
   18d38:	add	r0, r5, r0, lsl #3
   18d3c:	lsl	r2, r2, #3
   18d40:	bl	10fe8 <memset@plt>
   18d44:	ldr	r3, [sp, #36]	; 0x24
   18d48:	str	r3, [r4, #4]
   18d4c:	ldr	ip, [r4, #16]
   18d50:	mov	r3, fp
   18d54:	mov	r2, sl
   18d58:	ldr	r7, [r4, #20]
   18d5c:	ldr	r0, [pc, #240]	; 18e54 <__assert_fail@plt+0x7d88>
   18d60:	ldr	r9, [r5]
   18d64:	orr	r7, r7, #1
   18d68:	ldr	r6, [r5, #4]
   18d6c:	str	ip, [sp]
   18d70:	ldr	ip, [r4, #56]	; 0x38
   18d74:	mov	r1, r9
   18d78:	str	r7, [sp, #4]
   18d7c:	ldr	lr, [r4, #60]	; 0x3c
   18d80:	str	r0, [sp, #8]
   18d84:	mov	r0, r6
   18d88:	str	ip, [sp, #12]
   18d8c:	str	lr, [sp, #16]
   18d90:	bl	1571c <__assert_fail@plt+0x4650>
   18d94:	cmp	r9, r0
   18d98:	bhi	18e00 <__assert_fail@plt+0x7d34>
   18d9c:	add	r9, r0, #1
   18da0:	movw	r3, #61968	; 0xf210
   18da4:	movt	r3, #2
   18da8:	cmp	r6, r3
   18dac:	str	r9, [r5]
   18db0:	beq	18dbc <__assert_fail@plt+0x7cf0>
   18db4:	mov	r0, r6
   18db8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   18dbc:	mov	r0, r9
   18dc0:	bl	19784 <__assert_fail@plt+0x86b8>
   18dc4:	ldr	ip, [r4, #16]
   18dc8:	mov	r1, r9
   18dcc:	mov	r3, fp
   18dd0:	mov	r2, sl
   18dd4:	mov	r6, r0
   18dd8:	ldr	r9, [r4, #56]	; 0x38
   18ddc:	ldr	lr, [r4, #60]	; 0x3c
   18de0:	str	r0, [r5, #4]
   18de4:	str	ip, [sp]
   18de8:	ldr	ip, [pc, #100]	; 18e54 <__assert_fail@plt+0x7d88>
   18dec:	str	r7, [sp, #4]
   18df0:	str	ip, [sp, #8]
   18df4:	str	r9, [sp, #12]
   18df8:	str	lr, [sp, #16]
   18dfc:	bl	1571c <__assert_fail@plt+0x4650>
   18e00:	ldr	r3, [sp, #28]
   18e04:	mov	r0, r6
   18e08:	str	r3, [r8]
   18e0c:	add	sp, sp, #44	; 0x2c
   18e10:	ldrd	r4, [sp]
   18e14:	ldrd	r6, [sp, #8]
   18e18:	ldrd	r8, [sp, #16]
   18e1c:	ldrd	sl, [sp, #24]
   18e20:	add	sp, sp, #32
   18e24:	pop	{pc}		; (ldr pc, [sp], #4)
   18e28:	mov	r0, #8
   18e2c:	mvn	r3, #-2147483648	; 0x80000000
   18e30:	add	r1, sp, #36	; 0x24
   18e34:	str	r0, [sp]
   18e38:	mov	r0, #0
   18e3c:	bl	19a28 <__assert_fail@plt+0x895c>
   18e40:	ldrd	r2, [r4, #8]
   18e44:	mov	r5, r0
   18e48:	str	r0, [r4]
   18e4c:	strd	r2, [r0]
   18e50:	b	18d28 <__assert_fail@plt+0x7c5c>
   18e54:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   18e58:	ldr	r3, [pc, #4]	; 18e64 <__assert_fail@plt+0x7d98>
   18e5c:	mvn	r2, #0
   18e60:	b	17108 <__assert_fail@plt+0x603c>
   18e64:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   18e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e6c:	movw	r4, #61760	; 0xf140
   18e70:	movt	r4, #2
   18e74:	strd	r6, [sp, #8]
   18e78:	strd	r8, [sp, #16]
   18e7c:	strd	sl, [sp, #24]
   18e80:	mov	sl, r0
   18e84:	str	lr, [sp, #32]
   18e88:	sub	sp, sp, #44	; 0x2c
   18e8c:	bl	10fd0 <__errno_location@plt>
   18e90:	ldr	r3, [r0]
   18e94:	mov	r8, r0
   18e98:	ldr	r2, [r4, #4]
   18e9c:	ldr	r5, [r4]
   18ea0:	str	r3, [sp, #28]
   18ea4:	cmp	r2, #0
   18ea8:	bgt	18f04 <__assert_fail@plt+0x7e38>
   18eac:	add	r3, r4, #8
   18eb0:	str	r2, [sp, #36]	; 0x24
   18eb4:	rsb	r2, r2, #1
   18eb8:	cmp	r5, r3
   18ebc:	beq	18fcc <__assert_fail@plt+0x7f00>
   18ec0:	mov	r1, #8
   18ec4:	mov	r0, r5
   18ec8:	mvn	r3, #-2147483648	; 0x80000000
   18ecc:	str	r1, [sp]
   18ed0:	add	r1, sp, #36	; 0x24
   18ed4:	bl	19a28 <__assert_fail@plt+0x895c>
   18ed8:	mov	r5, r0
   18edc:	str	r0, [r4]
   18ee0:	ldr	r0, [r4, #4]
   18ee4:	mov	r1, #0
   18ee8:	ldr	r2, [sp, #36]	; 0x24
   18eec:	sub	r2, r2, r0
   18ef0:	add	r0, r5, r0, lsl #3
   18ef4:	lsl	r2, r2, #3
   18ef8:	bl	10fe8 <memset@plt>
   18efc:	ldr	r3, [sp, #36]	; 0x24
   18f00:	str	r3, [r4, #4]
   18f04:	ldr	ip, [r4, #16]
   18f08:	mvn	r3, #0
   18f0c:	mov	r2, sl
   18f10:	ldr	r7, [r4, #20]
   18f14:	ldr	fp, [pc, #220]	; 18ff8 <__assert_fail@plt+0x7f2c>
   18f18:	ldr	r9, [r5]
   18f1c:	orr	r7, r7, #1
   18f20:	ldr	r6, [r5, #4]
   18f24:	str	ip, [sp]
   18f28:	ldr	ip, [r4, #56]	; 0x38
   18f2c:	mov	r1, r9
   18f30:	stmib	sp, {r7, fp}
   18f34:	ldr	lr, [r4, #60]	; 0x3c
   18f38:	mov	r0, r6
   18f3c:	str	ip, [sp, #12]
   18f40:	str	lr, [sp, #16]
   18f44:	bl	1571c <__assert_fail@plt+0x4650>
   18f48:	cmp	r9, r0
   18f4c:	bhi	18fa4 <__assert_fail@plt+0x7ed8>
   18f50:	add	r9, r0, #1
   18f54:	movw	r3, #61968	; 0xf210
   18f58:	movt	r3, #2
   18f5c:	cmp	r6, r3
   18f60:	str	r9, [r5]
   18f64:	beq	18f70 <__assert_fail@plt+0x7ea4>
   18f68:	mov	r0, r6
   18f6c:	bl	14c68 <__assert_fail@plt+0x3b9c>
   18f70:	mov	r0, r9
   18f74:	bl	19784 <__assert_fail@plt+0x86b8>
   18f78:	ldr	r3, [r4, #16]
   18f7c:	mov	r2, sl
   18f80:	mov	r1, r9
   18f84:	mov	r6, r0
   18f88:	ldr	lr, [r4, #56]	; 0x38
   18f8c:	ldr	ip, [r4, #60]	; 0x3c
   18f90:	str	r0, [r5, #4]
   18f94:	stm	sp, {r3, r7, fp, lr}
   18f98:	mvn	r3, #0
   18f9c:	str	ip, [sp, #16]
   18fa0:	bl	1571c <__assert_fail@plt+0x4650>
   18fa4:	ldr	r3, [sp, #28]
   18fa8:	mov	r0, r6
   18fac:	str	r3, [r8]
   18fb0:	add	sp, sp, #44	; 0x2c
   18fb4:	ldrd	r4, [sp]
   18fb8:	ldrd	r6, [sp, #8]
   18fbc:	ldrd	r8, [sp, #16]
   18fc0:	ldrd	sl, [sp, #24]
   18fc4:	add	sp, sp, #32
   18fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fcc:	mov	r0, #8
   18fd0:	mvn	r3, #-2147483648	; 0x80000000
   18fd4:	add	r1, sp, #36	; 0x24
   18fd8:	str	r0, [sp]
   18fdc:	mov	r0, #0
   18fe0:	bl	19a28 <__assert_fail@plt+0x895c>
   18fe4:	ldrd	r2, [r4, #8]
   18fe8:	mov	r5, r0
   18fec:	str	r0, [r4]
   18ff0:	strd	r2, [r0]
   18ff4:	b	18ee0 <__assert_fail@plt+0x7e14>
   18ff8:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   18ffc:	cmp	r1, #0
   19000:	strd	r4, [sp, #-16]!
   19004:	mov	ip, r3
   19008:	str	r6, [sp, #8]
   1900c:	mov	r4, r0
   19010:	str	lr, [sp, #12]
   19014:	sub	sp, sp, #32
   19018:	ldr	r5, [sp, #48]	; 0x30
   1901c:	ldr	r6, [sp, #52]	; 0x34
   19020:	beq	19164 <__assert_fail@plt+0x8098>
   19024:	mov	r3, r1
   19028:	mov	r1, #1
   1902c:	stm	sp, {r2, ip}
   19030:	movw	r2, #56448	; 0xdc80
   19034:	movt	r2, #1
   19038:	bl	1100c <__fprintf_chk@plt>
   1903c:	mov	r2, #5
   19040:	movw	r1, #56468	; 0xdc94
   19044:	movt	r1, #1
   19048:	mov	r0, #0
   1904c:	bl	10ec8 <dcgettext@plt>
   19050:	movw	ip, #2022	; 0x7e6
   19054:	mov	r3, r0
   19058:	mov	r1, #1
   1905c:	movw	r2, #57196	; 0xdf6c
   19060:	movt	r2, #1
   19064:	mov	r0, r4
   19068:	str	ip, [sp]
   1906c:	bl	1100c <__fprintf_chk@plt>
   19070:	mov	r1, r4
   19074:	mov	r0, #10
   19078:	bl	10ebc <fputc_unlocked@plt>
   1907c:	mov	r2, #5
   19080:	movw	r1, #56472	; 0xdc98
   19084:	movt	r1, #1
   19088:	mov	r0, #0
   1908c:	bl	10ec8 <dcgettext@plt>
   19090:	mov	r2, r0
   19094:	mov	r1, #1
   19098:	movw	r3, #56644	; 0xdd44
   1909c:	movt	r3, #1
   190a0:	mov	r0, r4
   190a4:	bl	1100c <__fprintf_chk@plt>
   190a8:	mov	r1, r4
   190ac:	mov	r0, #10
   190b0:	bl	10ebc <fputc_unlocked@plt>
   190b4:	cmp	r6, #9
   190b8:	ldrls	pc, [pc, r6, lsl #2]
   190bc:	b	193d0 <__assert_fail@plt+0x8304>
   190c0:	andeq	r9, r1, r0, asr r1
   190c4:	andeq	r9, r1, r0, lsl #3
   190c8:			; <UNDEFINED> instruction: 0x000191bc
   190cc:	strdeq	r9, [r1], -ip
   190d0:	andeq	r9, r1, r4, asr #4
   190d4:	andeq	r9, r1, ip, ror r2
   190d8:	andeq	r9, r1, r4, asr #5
   190dc:	andeq	r9, r1, r8, lsl r3
   190e0:	andeq	r9, r1, r0, ror r3
   190e4:	andeq	r9, r1, r8, ror #1
   190e8:	movw	r1, #56948	; 0xde74
   190ec:	movt	r1, #1
   190f0:	mov	r2, #5
   190f4:	mov	r0, #0
   190f8:	bl	10ec8 <dcgettext@plt>
   190fc:	ldr	lr, [r5, #4]
   19100:	mov	r2, r0
   19104:	mov	r1, #1
   19108:	mov	r0, r4
   1910c:	ldr	r3, [r5, #8]
   19110:	ldr	ip, [r5, #32]
   19114:	str	lr, [sp]
   19118:	ldr	lr, [r5, #12]
   1911c:	str	ip, [sp, #28]
   19120:	ldr	ip, [r5, #28]
   19124:	str	r3, [sp, #4]
   19128:	ldr	r3, [r5, #16]
   1912c:	str	lr, [sp, #8]
   19130:	ldr	lr, [r5, #20]
   19134:	str	ip, [sp, #24]
   19138:	ldr	ip, [r5, #24]
   1913c:	str	r3, [sp, #12]
   19140:	ldr	r3, [r5]
   19144:	str	lr, [sp, #16]
   19148:	str	ip, [sp, #20]
   1914c:	bl	1100c <__fprintf_chk@plt>
   19150:	add	sp, sp, #32
   19154:	ldrd	r4, [sp]
   19158:	ldr	r6, [sp, #8]
   1915c:	add	sp, sp, #12
   19160:	pop	{pc}		; (ldr pc, [sp], #4)
   19164:	mov	r3, r2
   19168:	mov	r1, #1
   1916c:	str	ip, [sp]
   19170:	movw	r2, #56460	; 0xdc8c
   19174:	movt	r2, #1
   19178:	bl	1100c <__fprintf_chk@plt>
   1917c:	b	1903c <__assert_fail@plt+0x7f70>
   19180:	mov	r2, #5
   19184:	movw	r1, #56680	; 0xdd68
   19188:	movt	r1, #1
   1918c:	mov	r0, #0
   19190:	bl	10ec8 <dcgettext@plt>
   19194:	ldr	r3, [r5]
   19198:	mov	r2, r0
   1919c:	mov	r1, #1
   191a0:	mov	r0, r4
   191a4:	add	sp, sp, #32
   191a8:	ldrd	r4, [sp]
   191ac:	ldr	r6, [sp, #8]
   191b0:	ldr	lr, [sp, #12]
   191b4:	add	sp, sp, #16
   191b8:	b	1100c <__fprintf_chk@plt>
   191bc:	mov	r2, #5
   191c0:	movw	r1, #56696	; 0xdd78
   191c4:	movt	r1, #1
   191c8:	mov	r0, #0
   191cc:	bl	10ec8 <dcgettext@plt>
   191d0:	ldm	r5, {r3, ip}
   191d4:	mov	r2, r0
   191d8:	mov	r1, #1
   191dc:	mov	r0, r4
   191e0:	str	ip, [sp, #48]	; 0x30
   191e4:	add	sp, sp, #32
   191e8:	ldrd	r4, [sp]
   191ec:	ldr	r6, [sp, #8]
   191f0:	ldr	lr, [sp, #12]
   191f4:	add	sp, sp, #16
   191f8:	b	1100c <__fprintf_chk@plt>
   191fc:	mov	r2, #5
   19200:	movw	r1, #56720	; 0xdd90
   19204:	movt	r1, #1
   19208:	mov	r0, #0
   1920c:	bl	10ec8 <dcgettext@plt>
   19210:	ldm	r5, {r3, lr}
   19214:	mov	r2, r0
   19218:	mov	r1, #1
   1921c:	mov	r0, r4
   19220:	ldr	ip, [r5, #8]
   19224:	str	lr, [sp, #48]	; 0x30
   19228:	str	ip, [sp, #52]	; 0x34
   1922c:	add	sp, sp, #32
   19230:	ldrd	r4, [sp]
   19234:	ldr	r6, [sp, #8]
   19238:	ldr	lr, [sp, #12]
   1923c:	add	sp, sp, #16
   19240:	b	1100c <__fprintf_chk@plt>
   19244:	mov	r2, #5
   19248:	movw	r1, #56748	; 0xddac
   1924c:	movt	r1, #1
   19250:	mov	r0, #0
   19254:	bl	10ec8 <dcgettext@plt>
   19258:	ldmib	r5, {r3, ip, lr}
   1925c:	mov	r2, r0
   19260:	mov	r1, #1
   19264:	mov	r0, r4
   19268:	str	r3, [sp]
   1926c:	ldr	r3, [r5]
   19270:	stmib	sp, {ip, lr}
   19274:	bl	1100c <__fprintf_chk@plt>
   19278:	b	19150 <__assert_fail@plt+0x8084>
   1927c:	mov	r2, #5
   19280:	movw	r1, #56780	; 0xddcc
   19284:	movt	r1, #1
   19288:	mov	r0, #0
   1928c:	bl	10ec8 <dcgettext@plt>
   19290:	ldmib	r5, {ip, lr}
   19294:	mov	r2, r0
   19298:	mov	r1, #1
   1929c:	mov	r0, r4
   192a0:	ldr	r3, [r5, #16]
   192a4:	str	ip, [sp]
   192a8:	ldr	ip, [r5, #12]
   192ac:	str	r3, [sp, #12]
   192b0:	ldr	r3, [r5]
   192b4:	str	lr, [sp, #4]
   192b8:	str	ip, [sp, #8]
   192bc:	bl	1100c <__fprintf_chk@plt>
   192c0:	b	19150 <__assert_fail@plt+0x8084>
   192c4:	mov	r2, #5
   192c8:	movw	r1, #56816	; 0xddf0
   192cc:	movt	r1, #1
   192d0:	mov	r0, #0
   192d4:	bl	10ec8 <dcgettext@plt>
   192d8:	ldr	lr, [r5, #4]
   192dc:	mov	r2, r0
   192e0:	mov	r1, #1
   192e4:	mov	r0, r4
   192e8:	ldr	r3, [r5, #8]
   192ec:	ldr	ip, [r5, #20]
   192f0:	str	lr, [sp]
   192f4:	ldr	lr, [r5, #12]
   192f8:	str	ip, [sp, #16]
   192fc:	ldr	ip, [r5, #16]
   19300:	str	r3, [sp, #4]
   19304:	ldr	r3, [r5]
   19308:	str	lr, [sp, #8]
   1930c:	str	ip, [sp, #12]
   19310:	bl	1100c <__fprintf_chk@plt>
   19314:	b	19150 <__assert_fail@plt+0x8084>
   19318:	mov	r2, #5
   1931c:	movw	r1, #56856	; 0xde18
   19320:	movt	r1, #1
   19324:	mov	r0, #0
   19328:	bl	10ec8 <dcgettext@plt>
   1932c:	ldmib	r5, {r3, ip}
   19330:	mov	r2, r0
   19334:	mov	r1, #1
   19338:	mov	r0, r4
   1933c:	ldr	lr, [r5, #24]
   19340:	str	r3, [sp]
   19344:	ldr	r3, [r5, #12]
   19348:	str	lr, [sp, #20]
   1934c:	ldr	lr, [r5, #20]
   19350:	str	ip, [sp, #4]
   19354:	ldr	ip, [r5, #16]
   19358:	str	r3, [sp, #8]
   1935c:	ldr	r3, [r5]
   19360:	str	ip, [sp, #12]
   19364:	str	lr, [sp, #16]
   19368:	bl	1100c <__fprintf_chk@plt>
   1936c:	b	19150 <__assert_fail@plt+0x8084>
   19370:	mov	r2, #5
   19374:	movw	r1, #56900	; 0xde44
   19378:	movt	r1, #1
   1937c:	mov	r0, #0
   19380:	bl	10ec8 <dcgettext@plt>
   19384:	ldmib	r5, {ip, lr}
   19388:	mov	r2, r0
   1938c:	mov	r1, #1
   19390:	mov	r0, r4
   19394:	ldr	r3, [r5, #28]
   19398:	str	ip, [sp]
   1939c:	ldr	ip, [r5, #12]
   193a0:	str	r3, [sp, #24]
   193a4:	ldr	r3, [r5, #24]
   193a8:	str	lr, [sp, #4]
   193ac:	ldr	lr, [r5, #16]
   193b0:	str	ip, [sp, #8]
   193b4:	ldr	ip, [r5, #20]
   193b8:	str	r3, [sp, #20]
   193bc:	ldr	r3, [r5]
   193c0:	str	lr, [sp, #12]
   193c4:	str	ip, [sp, #16]
   193c8:	bl	1100c <__fprintf_chk@plt>
   193cc:	b	19150 <__assert_fail@plt+0x8084>
   193d0:	movw	r1, #57000	; 0xdea8
   193d4:	movt	r1, #1
   193d8:	b	190f0 <__assert_fail@plt+0x8024>
   193dc:	strd	r4, [sp, #-12]!
   193e0:	str	lr, [sp, #8]
   193e4:	sub	sp, sp, #12
   193e8:	ldr	r5, [sp, #24]
   193ec:	ldr	ip, [r5]
   193f0:	cmp	ip, #0
   193f4:	beq	19410 <__assert_fail@plt+0x8344>
   193f8:	mov	lr, r5
   193fc:	mov	ip, #0
   19400:	ldr	r4, [lr, #4]!
   19404:	add	ip, ip, #1
   19408:	cmp	r4, #0
   1940c:	bne	19400 <__assert_fail@plt+0x8334>
   19410:	stm	sp, {r5, ip}
   19414:	bl	18ffc <__assert_fail@plt+0x7f30>
   19418:	add	sp, sp, #12
   1941c:	ldrd	r4, [sp]
   19420:	add	sp, sp, #8
   19424:	pop	{pc}		; (ldr pc, [sp], #4)
   19428:	push	{lr}		; (str lr, [sp, #-4]!)
   1942c:	sub	sp, sp, #52	; 0x34
   19430:	ldr	ip, [sp, #56]	; 0x38
   19434:	ldr	lr, [ip]
   19438:	cmp	lr, #0
   1943c:	str	lr, [sp, #8]
   19440:	beq	194d8 <__assert_fail@plt+0x840c>
   19444:	ldr	lr, [ip, #4]
   19448:	cmp	lr, #0
   1944c:	str	lr, [sp, #12]
   19450:	beq	194ec <__assert_fail@plt+0x8420>
   19454:	ldr	lr, [ip, #8]
   19458:	cmp	lr, #0
   1945c:	str	lr, [sp, #16]
   19460:	beq	194f4 <__assert_fail@plt+0x8428>
   19464:	ldr	lr, [ip, #12]
   19468:	cmp	lr, #0
   1946c:	str	lr, [sp, #20]
   19470:	beq	194fc <__assert_fail@plt+0x8430>
   19474:	ldr	lr, [ip, #16]
   19478:	cmp	lr, #0
   1947c:	str	lr, [sp, #24]
   19480:	beq	19504 <__assert_fail@plt+0x8438>
   19484:	ldr	lr, [ip, #20]
   19488:	cmp	lr, #0
   1948c:	str	lr, [sp, #28]
   19490:	beq	1950c <__assert_fail@plt+0x8440>
   19494:	ldr	lr, [ip, #24]
   19498:	cmp	lr, #0
   1949c:	str	lr, [sp, #32]
   194a0:	beq	19514 <__assert_fail@plt+0x8448>
   194a4:	ldr	lr, [ip, #28]
   194a8:	cmp	lr, #0
   194ac:	str	lr, [sp, #36]	; 0x24
   194b0:	beq	1951c <__assert_fail@plt+0x8450>
   194b4:	ldr	lr, [ip, #32]
   194b8:	cmp	lr, #0
   194bc:	str	lr, [sp, #40]	; 0x28
   194c0:	beq	19524 <__assert_fail@plt+0x8458>
   194c4:	ldr	ip, [ip, #36]	; 0x24
   194c8:	cmp	ip, #0
   194cc:	str	ip, [sp, #44]	; 0x2c
   194d0:	movne	lr, #10
   194d4:	moveq	lr, #9
   194d8:	add	ip, sp, #8
   194dc:	stm	sp, {ip, lr}
   194e0:	bl	18ffc <__assert_fail@plt+0x7f30>
   194e4:	add	sp, sp, #52	; 0x34
   194e8:	pop	{pc}		; (ldr pc, [sp], #4)
   194ec:	mov	lr, #1
   194f0:	b	194d8 <__assert_fail@plt+0x840c>
   194f4:	mov	lr, #2
   194f8:	b	194d8 <__assert_fail@plt+0x840c>
   194fc:	mov	lr, #3
   19500:	b	194d8 <__assert_fail@plt+0x840c>
   19504:	mov	lr, #4
   19508:	b	194d8 <__assert_fail@plt+0x840c>
   1950c:	mov	lr, #5
   19510:	b	194d8 <__assert_fail@plt+0x840c>
   19514:	mov	lr, #6
   19518:	b	194d8 <__assert_fail@plt+0x840c>
   1951c:	mov	lr, #7
   19520:	b	194d8 <__assert_fail@plt+0x840c>
   19524:	mov	lr, #8
   19528:	b	194d8 <__assert_fail@plt+0x840c>
   1952c:	push	{r3}		; (str r3, [sp, #-4]!)
   19530:	push	{lr}		; (str lr, [sp, #-4]!)
   19534:	sub	sp, sp, #56	; 0x38
   19538:	ldr	ip, [sp, #64]	; 0x40
   1953c:	add	r3, sp, #64	; 0x40
   19540:	str	r3, [sp, #12]
   19544:	cmp	ip, #0
   19548:	str	ip, [sp, #16]
   1954c:	beq	195e4 <__assert_fail@plt+0x8518>
   19550:	ldr	ip, [sp, #68]	; 0x44
   19554:	cmp	ip, #0
   19558:	str	ip, [sp, #20]
   1955c:	beq	19608 <__assert_fail@plt+0x853c>
   19560:	ldr	ip, [sp, #72]	; 0x48
   19564:	cmp	ip, #0
   19568:	str	ip, [sp, #24]
   1956c:	beq	19610 <__assert_fail@plt+0x8544>
   19570:	ldr	ip, [sp, #76]	; 0x4c
   19574:	cmp	ip, #0
   19578:	str	ip, [sp, #28]
   1957c:	beq	19618 <__assert_fail@plt+0x854c>
   19580:	ldr	ip, [sp, #80]	; 0x50
   19584:	cmp	ip, #0
   19588:	str	ip, [sp, #32]
   1958c:	beq	19620 <__assert_fail@plt+0x8554>
   19590:	ldr	ip, [sp, #84]	; 0x54
   19594:	cmp	ip, #0
   19598:	str	ip, [sp, #36]	; 0x24
   1959c:	beq	19628 <__assert_fail@plt+0x855c>
   195a0:	ldr	ip, [sp, #88]	; 0x58
   195a4:	cmp	ip, #0
   195a8:	str	ip, [sp, #40]	; 0x28
   195ac:	beq	19630 <__assert_fail@plt+0x8564>
   195b0:	ldr	ip, [sp, #92]	; 0x5c
   195b4:	cmp	ip, #0
   195b8:	str	ip, [sp, #44]	; 0x2c
   195bc:	beq	19638 <__assert_fail@plt+0x856c>
   195c0:	ldr	ip, [sp, #96]	; 0x60
   195c4:	cmp	ip, #0
   195c8:	str	ip, [sp, #48]	; 0x30
   195cc:	beq	19640 <__assert_fail@plt+0x8574>
   195d0:	ldr	r3, [sp, #100]	; 0x64
   195d4:	cmp	r3, #0
   195d8:	str	r3, [sp, #52]	; 0x34
   195dc:	movne	ip, #10
   195e0:	moveq	ip, #9
   195e4:	ldr	r3, [sp, #60]	; 0x3c
   195e8:	add	lr, sp, #16
   195ec:	str	lr, [sp]
   195f0:	str	ip, [sp, #4]
   195f4:	bl	18ffc <__assert_fail@plt+0x7f30>
   195f8:	add	sp, sp, #56	; 0x38
   195fc:	pop	{lr}		; (ldr lr, [sp], #4)
   19600:	add	sp, sp, #4
   19604:	bx	lr
   19608:	mov	ip, #1
   1960c:	b	195e4 <__assert_fail@plt+0x8518>
   19610:	mov	ip, #2
   19614:	b	195e4 <__assert_fail@plt+0x8518>
   19618:	mov	ip, #3
   1961c:	b	195e4 <__assert_fail@plt+0x8518>
   19620:	mov	ip, #4
   19624:	b	195e4 <__assert_fail@plt+0x8518>
   19628:	mov	ip, #5
   1962c:	b	195e4 <__assert_fail@plt+0x8518>
   19630:	mov	ip, #6
   19634:	b	195e4 <__assert_fail@plt+0x8518>
   19638:	mov	ip, #7
   1963c:	b	195e4 <__assert_fail@plt+0x8518>
   19640:	mov	ip, #8
   19644:	b	195e4 <__assert_fail@plt+0x8518>
   19648:	movw	r3, #61852	; 0xf19c
   1964c:	movt	r3, #2
   19650:	str	r4, [sp, #-8]!
   19654:	mov	r0, #10
   19658:	ldr	r1, [r3]
   1965c:	str	lr, [sp, #4]
   19660:	bl	10ebc <fputc_unlocked@plt>
   19664:	mov	r2, #5
   19668:	movw	r1, #57060	; 0xdee4
   1966c:	movt	r1, #1
   19670:	mov	r0, #0
   19674:	bl	10ec8 <dcgettext@plt>
   19678:	mov	r1, r0
   1967c:	movw	r2, #57080	; 0xdef8
   19680:	movt	r2, #1
   19684:	mov	r0, #1
   19688:	bl	10ff4 <__printf_chk@plt>
   1968c:	mov	r2, #5
   19690:	movw	r1, #57104	; 0xdf10
   19694:	movt	r1, #1
   19698:	mov	r0, #0
   1969c:	bl	10ec8 <dcgettext@plt>
   196a0:	mov	r1, r0
   196a4:	movw	r3, #54112	; 0xd360
   196a8:	movt	r3, #1
   196ac:	movw	r2, #54152	; 0xd388
   196b0:	movt	r2, #1
   196b4:	mov	r0, #1
   196b8:	bl	10ff4 <__printf_chk@plt>
   196bc:	mov	r2, #5
   196c0:	movw	r1, #57124	; 0xdf24
   196c4:	movt	r1, #1
   196c8:	mov	r0, #0
   196cc:	bl	10ec8 <dcgettext@plt>
   196d0:	mov	r1, r0
   196d4:	movw	r2, #57164	; 0xdf4c
   196d8:	movt	r2, #1
   196dc:	mov	r0, #1
   196e0:	ldr	r4, [sp]
   196e4:	ldr	lr, [sp, #4]
   196e8:	add	sp, sp, #8
   196ec:	b	10ff4 <__printf_chk@plt>
   196f0:	strd	r4, [sp, #-16]!
   196f4:	mov	r4, r0
   196f8:	mov	r5, r2
   196fc:	str	r6, [sp, #8]
   19700:	mov	r6, r1
   19704:	str	lr, [sp, #12]
   19708:	bl	1b514 <__assert_fail@plt+0xa448>
   1970c:	cmp	r0, #0
   19710:	beq	19724 <__assert_fail@plt+0x8658>
   19714:	ldrd	r4, [sp]
   19718:	ldr	r6, [sp, #8]
   1971c:	add	sp, sp, #12
   19720:	pop	{pc}		; (ldr pc, [sp], #4)
   19724:	cmp	r4, #0
   19728:	beq	19738 <__assert_fail@plt+0x866c>
   1972c:	cmp	r6, #0
   19730:	cmpne	r5, #0
   19734:	beq	19714 <__assert_fail@plt+0x8648>
   19738:	bl	19cf4 <__assert_fail@plt+0x8c28>
   1973c:	str	r4, [sp, #-8]!
   19740:	str	lr, [sp, #4]
   19744:	bl	1b158 <__assert_fail@plt+0xa08c>
   19748:	cmp	r0, #0
   1974c:	beq	1975c <__assert_fail@plt+0x8690>
   19750:	ldr	r4, [sp]
   19754:	add	sp, sp, #4
   19758:	pop	{pc}		; (ldr pc, [sp], #4)
   1975c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19760:	str	r4, [sp, #-8]!
   19764:	str	lr, [sp, #4]
   19768:	bl	1b158 <__assert_fail@plt+0xa08c>
   1976c:	cmp	r0, #0
   19770:	beq	19780 <__assert_fail@plt+0x86b4>
   19774:	ldr	r4, [sp]
   19778:	add	sp, sp, #4
   1977c:	pop	{pc}		; (ldr pc, [sp], #4)
   19780:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19784:	str	r4, [sp, #-8]!
   19788:	str	lr, [sp, #4]
   1978c:	bl	1b158 <__assert_fail@plt+0xa08c>
   19790:	cmp	r0, #0
   19794:	beq	197a4 <__assert_fail@plt+0x86d8>
   19798:	ldr	r4, [sp]
   1979c:	add	sp, sp, #4
   197a0:	pop	{pc}		; (ldr pc, [sp], #4)
   197a4:	bl	19cf4 <__assert_fail@plt+0x8c28>
   197a8:	strd	r4, [sp, #-16]!
   197ac:	mov	r5, r0
   197b0:	mov	r4, r1
   197b4:	str	r6, [sp, #8]
   197b8:	str	lr, [sp, #12]
   197bc:	bl	1b194 <__assert_fail@plt+0xa0c8>
   197c0:	cmp	r0, #0
   197c4:	beq	197d8 <__assert_fail@plt+0x870c>
   197c8:	ldrd	r4, [sp]
   197cc:	ldr	r6, [sp, #8]
   197d0:	add	sp, sp, #12
   197d4:	pop	{pc}		; (ldr pc, [sp], #4)
   197d8:	adds	r4, r4, #0
   197dc:	movne	r4, #1
   197e0:	cmp	r5, #0
   197e4:	moveq	r4, #1
   197e8:	cmp	r4, #0
   197ec:	beq	197c8 <__assert_fail@plt+0x86fc>
   197f0:	bl	19cf4 <__assert_fail@plt+0x8c28>
   197f4:	cmp	r1, #0
   197f8:	orreq	r1, r1, #1
   197fc:	str	r4, [sp, #-8]!
   19800:	str	lr, [sp, #4]
   19804:	bl	1b194 <__assert_fail@plt+0xa0c8>
   19808:	cmp	r0, #0
   1980c:	beq	1981c <__assert_fail@plt+0x8750>
   19810:	ldr	r4, [sp]
   19814:	add	sp, sp, #4
   19818:	pop	{pc}		; (ldr pc, [sp], #4)
   1981c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19820:	strd	r4, [sp, #-16]!
   19824:	mov	r4, r0
   19828:	mov	r5, r2
   1982c:	str	r6, [sp, #8]
   19830:	mov	r6, r1
   19834:	str	lr, [sp, #12]
   19838:	bl	1b514 <__assert_fail@plt+0xa448>
   1983c:	cmp	r0, #0
   19840:	beq	19854 <__assert_fail@plt+0x8788>
   19844:	ldrd	r4, [sp]
   19848:	ldr	r6, [sp, #8]
   1984c:	add	sp, sp, #12
   19850:	pop	{pc}		; (ldr pc, [sp], #4)
   19854:	cmp	r4, #0
   19858:	beq	19868 <__assert_fail@plt+0x879c>
   1985c:	cmp	r6, #0
   19860:	cmpne	r5, #0
   19864:	beq	19844 <__assert_fail@plt+0x8778>
   19868:	bl	19cf4 <__assert_fail@plt+0x8c28>
   1986c:	cmp	r2, #0
   19870:	cmpne	r1, #0
   19874:	str	r4, [sp, #-8]!
   19878:	moveq	r2, #1
   1987c:	str	lr, [sp, #4]
   19880:	moveq	r1, r2
   19884:	bl	1b514 <__assert_fail@plt+0xa448>
   19888:	cmp	r0, #0
   1988c:	beq	1989c <__assert_fail@plt+0x87d0>
   19890:	ldr	r4, [sp]
   19894:	add	sp, sp, #4
   19898:	pop	{pc}		; (ldr pc, [sp], #4)
   1989c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   198a0:	mov	r2, r1
   198a4:	mov	r1, r0
   198a8:	str	r4, [sp, #-8]!
   198ac:	mov	r0, #0
   198b0:	str	lr, [sp, #4]
   198b4:	bl	1b514 <__assert_fail@plt+0xa448>
   198b8:	cmp	r0, #0
   198bc:	beq	198cc <__assert_fail@plt+0x8800>
   198c0:	ldr	r4, [sp]
   198c4:	add	sp, sp, #4
   198c8:	pop	{pc}		; (ldr pc, [sp], #4)
   198cc:	bl	19cf4 <__assert_fail@plt+0x8c28>
   198d0:	cmp	r1, #0
   198d4:	cmpne	r0, #0
   198d8:	str	r4, [sp, #-8]!
   198dc:	moveq	r2, #1
   198e0:	movne	r2, r1
   198e4:	str	lr, [sp, #4]
   198e8:	movne	r1, r0
   198ec:	moveq	r1, r2
   198f0:	mov	r0, #0
   198f4:	bl	1b514 <__assert_fail@plt+0xa448>
   198f8:	cmp	r0, #0
   198fc:	beq	1990c <__assert_fail@plt+0x8840>
   19900:	ldr	r4, [sp]
   19904:	add	sp, sp, #4
   19908:	pop	{pc}		; (ldr pc, [sp], #4)
   1990c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19910:	cmp	r0, #0
   19914:	strd	r4, [sp, #-16]!
   19918:	mov	r5, r1
   1991c:	ldr	r4, [r1]
   19920:	str	r6, [sp, #8]
   19924:	str	lr, [sp, #12]
   19928:	beq	19970 <__assert_fail@plt+0x88a4>
   1992c:	lsr	r3, r4, #1
   19930:	add	r3, r3, #1
   19934:	adds	r4, r4, r3
   19938:	bcs	1996c <__assert_fail@plt+0x88a0>
   1993c:	mov	r2, #1
   19940:	mov	r1, r4
   19944:	bl	1b514 <__assert_fail@plt+0xa448>
   19948:	cmp	r0, #0
   1994c:	beq	19964 <__assert_fail@plt+0x8898>
   19950:	ldr	r6, [sp, #8]
   19954:	str	r4, [r5]
   19958:	ldrd	r4, [sp]
   1995c:	add	sp, sp, #12
   19960:	pop	{pc}		; (ldr pc, [sp], #4)
   19964:	cmp	r4, #0
   19968:	beq	19950 <__assert_fail@plt+0x8884>
   1996c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19970:	cmp	r4, #0
   19974:	mov	r2, #1
   19978:	moveq	r4, #64	; 0x40
   1997c:	mov	r1, r4
   19980:	bl	1b514 <__assert_fail@plt+0xa448>
   19984:	cmp	r0, #0
   19988:	bne	19950 <__assert_fail@plt+0x8884>
   1998c:	b	1996c <__assert_fail@plt+0x88a0>
   19990:	cmp	r0, #0
   19994:	strd	r4, [sp, #-16]!
   19998:	mov	r5, r1
   1999c:	ldr	r4, [r1]
   199a0:	str	r6, [sp, #8]
   199a4:	mov	r6, r2
   199a8:	str	lr, [sp, #12]
   199ac:	beq	199f4 <__assert_fail@plt+0x8928>
   199b0:	lsr	r3, r4, #1
   199b4:	add	r3, r3, #1
   199b8:	adds	r4, r4, r3
   199bc:	bcs	199f0 <__assert_fail@plt+0x8924>
   199c0:	mov	r1, r4
   199c4:	bl	1b514 <__assert_fail@plt+0xa448>
   199c8:	cmp	r0, #0
   199cc:	beq	199e4 <__assert_fail@plt+0x8918>
   199d0:	ldr	r6, [sp, #8]
   199d4:	str	r4, [r5]
   199d8:	ldrd	r4, [sp]
   199dc:	add	sp, sp, #12
   199e0:	pop	{pc}		; (ldr pc, [sp], #4)
   199e4:	cmp	r4, #0
   199e8:	cmpne	r6, #0
   199ec:	beq	199d0 <__assert_fail@plt+0x8904>
   199f0:	bl	19cf4 <__assert_fail@plt+0x8c28>
   199f4:	cmp	r4, #0
   199f8:	bne	19a0c <__assert_fail@plt+0x8940>
   199fc:	mov	r4, #64	; 0x40
   19a00:	udiv	r4, r4, r2
   19a04:	cmp	r2, #64	; 0x40
   19a08:	addhi	r4, r4, #1
   19a0c:	mov	r2, r6
   19a10:	mov	r1, r4
   19a14:	mov	r0, #0
   19a18:	bl	1b514 <__assert_fail@plt+0xa448>
   19a1c:	cmp	r0, #0
   19a20:	bne	199d0 <__assert_fail@plt+0x8904>
   19a24:	b	199f0 <__assert_fail@plt+0x8924>
   19a28:	ldr	ip, [r1]
   19a2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a30:	strd	r6, [sp, #8]
   19a34:	mov	r7, r1
   19a38:	mov	r6, r0
   19a3c:	str	r8, [sp, #16]
   19a40:	mvn	r8, r3
   19a44:	lsr	r8, r8, #31
   19a48:	str	lr, [sp, #20]
   19a4c:	asr	r1, ip, #1
   19a50:	ldr	lr, [sp, #24]
   19a54:	adds	r4, ip, r1
   19a58:	mvnvs	r4, #-2147483648	; 0x80000000
   19a5c:	cmp	r3, r4
   19a60:	movge	r1, #0
   19a64:	andlt	r1, r8, #1
   19a68:	cmp	r1, #0
   19a6c:	movne	r4, r3
   19a70:	smull	r0, r1, r4, lr
   19a74:	cmp	r1, r0, asr #31
   19a78:	bne	19b28 <__assert_fail@plt+0x8a5c>
   19a7c:	cmp	r0, #63	; 0x3f
   19a80:	mov	r5, r0
   19a84:	ble	19af4 <__assert_fail@plt+0x8a28>
   19a88:	cmp	r6, #0
   19a8c:	sub	r1, r4, ip
   19a90:	streq	r6, [r7]
   19a94:	cmp	r1, r2
   19a98:	bge	19ac8 <__assert_fail@plt+0x89fc>
   19a9c:	adds	r4, ip, r2
   19aa0:	bvs	19b24 <__assert_fail@plt+0x8a58>
   19aa4:	cmp	r4, r3
   19aa8:	movle	r3, #0
   19aac:	andgt	r3, r8, #1
   19ab0:	cmp	r3, #0
   19ab4:	bne	19b24 <__assert_fail@plt+0x8a58>
   19ab8:	smull	r0, r1, r4, lr
   19abc:	cmp	r1, r0, asr #31
   19ac0:	mov	r5, r0
   19ac4:	bne	19b24 <__assert_fail@plt+0x8a58>
   19ac8:	mov	r1, r5
   19acc:	mov	r0, r6
   19ad0:	bl	1b194 <__assert_fail@plt+0xa0c8>
   19ad4:	cmp	r0, #0
   19ad8:	beq	19b08 <__assert_fail@plt+0x8a3c>
   19adc:	ldr	r8, [sp, #16]
   19ae0:	str	r4, [r7]
   19ae4:	ldrd	r4, [sp]
   19ae8:	ldrd	r6, [sp, #8]
   19aec:	add	sp, sp, #20
   19af0:	pop	{pc}		; (ldr pc, [sp], #4)
   19af4:	mov	r0, #64	; 0x40
   19af8:	sdiv	r4, r0, lr
   19afc:	mls	r5, lr, r4, r0
   19b00:	sub	r5, r0, r5
   19b04:	b	19a88 <__assert_fail@plt+0x89bc>
   19b08:	adds	r5, r5, #0
   19b0c:	movne	r5, #1
   19b10:	cmp	r6, #0
   19b14:	movne	r6, r5
   19b18:	moveq	r6, #1
   19b1c:	cmp	r6, #0
   19b20:	beq	19adc <__assert_fail@plt+0x8a10>
   19b24:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19b28:	mvn	r0, #-2147483648	; 0x80000000
   19b2c:	b	19af8 <__assert_fail@plt+0x8a2c>
   19b30:	mov	r1, #1
   19b34:	str	r4, [sp, #-8]!
   19b38:	str	lr, [sp, #4]
   19b3c:	bl	1b0e4 <__assert_fail@plt+0xa018>
   19b40:	cmp	r0, #0
   19b44:	beq	19b54 <__assert_fail@plt+0x8a88>
   19b48:	ldr	r4, [sp]
   19b4c:	add	sp, sp, #4
   19b50:	pop	{pc}		; (ldr pc, [sp], #4)
   19b54:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19b58:	mov	r1, #1
   19b5c:	str	r4, [sp, #-8]!
   19b60:	str	lr, [sp, #4]
   19b64:	bl	1b0e4 <__assert_fail@plt+0xa018>
   19b68:	cmp	r0, #0
   19b6c:	beq	19b7c <__assert_fail@plt+0x8ab0>
   19b70:	ldr	r4, [sp]
   19b74:	add	sp, sp, #4
   19b78:	pop	{pc}		; (ldr pc, [sp], #4)
   19b7c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19b80:	str	r4, [sp, #-8]!
   19b84:	str	lr, [sp, #4]
   19b88:	bl	1b0e4 <__assert_fail@plt+0xa018>
   19b8c:	cmp	r0, #0
   19b90:	beq	19ba0 <__assert_fail@plt+0x8ad4>
   19b94:	ldr	r4, [sp]
   19b98:	add	sp, sp, #4
   19b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   19ba0:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19ba4:	str	r4, [sp, #-8]!
   19ba8:	str	lr, [sp, #4]
   19bac:	bl	1b0e4 <__assert_fail@plt+0xa018>
   19bb0:	cmp	r0, #0
   19bb4:	beq	19bc4 <__assert_fail@plt+0x8af8>
   19bb8:	ldr	r4, [sp]
   19bbc:	add	sp, sp, #4
   19bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   19bc4:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19bc8:	strd	r4, [sp, #-16]!
   19bcc:	mov	r4, r1
   19bd0:	str	r6, [sp, #8]
   19bd4:	mov	r6, r0
   19bd8:	mov	r0, r1
   19bdc:	str	lr, [sp, #12]
   19be0:	bl	1b158 <__assert_fail@plt+0xa08c>
   19be4:	subs	r5, r0, #0
   19be8:	beq	19c0c <__assert_fail@plt+0x8b40>
   19bec:	mov	r2, r4
   19bf0:	mov	r1, r6
   19bf4:	bl	10e8c <memcpy@plt>
   19bf8:	mov	r0, r5
   19bfc:	ldrd	r4, [sp]
   19c00:	ldr	r6, [sp, #8]
   19c04:	add	sp, sp, #12
   19c08:	pop	{pc}		; (ldr pc, [sp], #4)
   19c0c:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19c10:	strd	r4, [sp, #-16]!
   19c14:	mov	r4, r1
   19c18:	str	r6, [sp, #8]
   19c1c:	mov	r6, r0
   19c20:	mov	r0, r1
   19c24:	str	lr, [sp, #12]
   19c28:	bl	1b158 <__assert_fail@plt+0xa08c>
   19c2c:	subs	r5, r0, #0
   19c30:	beq	19c54 <__assert_fail@plt+0x8b88>
   19c34:	mov	r2, r4
   19c38:	mov	r1, r6
   19c3c:	bl	10e8c <memcpy@plt>
   19c40:	mov	r0, r5
   19c44:	ldrd	r4, [sp]
   19c48:	ldr	r6, [sp, #8]
   19c4c:	add	sp, sp, #12
   19c50:	pop	{pc}		; (ldr pc, [sp], #4)
   19c54:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19c58:	strd	r4, [sp, #-16]!
   19c5c:	mov	r4, r1
   19c60:	str	r6, [sp, #8]
   19c64:	mov	r6, r0
   19c68:	add	r0, r1, #1
   19c6c:	str	lr, [sp, #12]
   19c70:	bl	1b158 <__assert_fail@plt+0xa08c>
   19c74:	subs	r5, r0, #0
   19c78:	beq	19ca4 <__assert_fail@plt+0x8bd8>
   19c7c:	mov	r3, #0
   19c80:	mov	r1, r6
   19c84:	mov	r2, r4
   19c88:	strb	r3, [r5, r4]
   19c8c:	bl	10e8c <memcpy@plt>
   19c90:	mov	r0, r5
   19c94:	ldrd	r4, [sp]
   19c98:	ldr	r6, [sp, #8]
   19c9c:	add	sp, sp, #12
   19ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ca4:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19ca8:	strd	r4, [sp, #-16]!
   19cac:	str	r6, [sp, #8]
   19cb0:	mov	r6, r0
   19cb4:	str	lr, [sp, #12]
   19cb8:	bl	10fb8 <strlen@plt>
   19cbc:	add	r4, r0, #1
   19cc0:	mov	r0, r4
   19cc4:	bl	1b158 <__assert_fail@plt+0xa08c>
   19cc8:	subs	r5, r0, #0
   19ccc:	beq	19cf0 <__assert_fail@plt+0x8c24>
   19cd0:	mov	r2, r4
   19cd4:	mov	r1, r6
   19cd8:	bl	10e8c <memcpy@plt>
   19cdc:	mov	r0, r5
   19ce0:	ldrd	r4, [sp]
   19ce4:	ldr	r6, [sp, #8]
   19ce8:	add	sp, sp, #12
   19cec:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf0:	bl	19cf4 <__assert_fail@plt+0x8c28>
   19cf4:	movw	r3, #61756	; 0xf13c
   19cf8:	movt	r3, #2
   19cfc:	str	r4, [sp, #-8]!
   19d00:	ldr	r4, [r3]
   19d04:	mov	r2, #5
   19d08:	movw	r1, #57244	; 0xdf9c
   19d0c:	movt	r1, #1
   19d10:	mov	r0, #0
   19d14:	str	lr, [sp, #4]
   19d18:	bl	10ec8 <dcgettext@plt>
   19d1c:	mov	r3, r0
   19d20:	movw	r2, #48688	; 0xbe30
   19d24:	movt	r2, #1
   19d28:	mov	r1, #0
   19d2c:	mov	r0, r4
   19d30:	bl	10f4c <error@plt>
   19d34:	bl	110a8 <abort@plt>
   19d38:	cmp	r2, #36	; 0x24
   19d3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d40:	strd	r6, [sp, #8]
   19d44:	strd	r8, [sp, #16]
   19d48:	strd	sl, [sp, #24]
   19d4c:	str	lr, [sp, #32]
   19d50:	sub	sp, sp, #12
   19d54:	bhi	1a354 <__assert_fail@plt+0x9288>
   19d58:	cmp	r1, #0
   19d5c:	mov	r5, r1
   19d60:	mov	r6, r2
   19d64:	addeq	r5, sp, #4
   19d68:	mov	r9, r0
   19d6c:	mov	r8, r3
   19d70:	bl	10fd0 <__errno_location@plt>
   19d74:	mov	sl, r0
   19d78:	mov	r4, #0
   19d7c:	mov	r2, r6
   19d80:	mov	r1, r5
   19d84:	mov	r0, r9
   19d88:	str	r4, [sl]
   19d8c:	bl	10e44 <strtol@plt>
   19d90:	ldr	r6, [r5]
   19d94:	mov	r7, r0
   19d98:	cmp	r6, r9
   19d9c:	beq	19df4 <__assert_fail@plt+0x8d28>
   19da0:	ldr	r4, [sl]
   19da4:	cmp	r4, #0
   19da8:	beq	19db8 <__assert_fail@plt+0x8cec>
   19dac:	cmp	r4, #34	; 0x22
   19db0:	bne	19ef4 <__assert_fail@plt+0x8e28>
   19db4:	mov	r4, #1
   19db8:	ldr	r3, [sp, #48]	; 0x30
   19dbc:	cmp	r3, #0
   19dc0:	beq	19dd0 <__assert_fail@plt+0x8d04>
   19dc4:	ldrb	r9, [r6]
   19dc8:	cmp	r9, #0
   19dcc:	bne	19ff8 <__assert_fail@plt+0x8f2c>
   19dd0:	str	r7, [r8]
   19dd4:	mov	r0, r4
   19dd8:	add	sp, sp, #12
   19ddc:	ldrd	r4, [sp]
   19de0:	ldrd	r6, [sp, #8]
   19de4:	ldrd	r8, [sp, #16]
   19de8:	ldrd	sl, [sp, #24]
   19dec:	add	sp, sp, #32
   19df0:	pop	{pc}		; (ldr pc, [sp], #4)
   19df4:	ldr	r3, [sp, #48]	; 0x30
   19df8:	cmp	r3, r4
   19dfc:	beq	19ef4 <__assert_fail@plt+0x8e28>
   19e00:	ldrb	r9, [r9]
   19e04:	cmp	r9, r4
   19e08:	beq	19ef4 <__assert_fail@plt+0x8e28>
   19e0c:	mov	r1, r9
   19e10:	mov	r0, r3
   19e14:	bl	10fc4 <strchr@plt>
   19e18:	cmp	r0, r4
   19e1c:	movne	r7, #1
   19e20:	beq	19ef4 <__assert_fail@plt+0x8e28>
   19e24:	sub	sl, r9, #69	; 0x45
   19e28:	cmp	sl, #47	; 0x2f
   19e2c:	ldrls	pc, [pc, sl, lsl #2]
   19e30:	b	1a014 <__assert_fail@plt+0x8f48>
   19e34:	strdeq	r9, [r1], -ip
   19e38:	andeq	sl, r1, r4, lsl r0
   19e3c:	strdeq	r9, [r1], -ip
   19e40:	andeq	sl, r1, r4, lsl r0
   19e44:	andeq	sl, r1, r4, lsl r0
   19e48:	andeq	sl, r1, r4, lsl r0
   19e4c:	strdeq	r9, [r1], -ip
   19e50:	andeq	sl, r1, r4, lsl r0
   19e54:	strdeq	r9, [r1], -ip
   19e58:	andeq	sl, r1, r4, lsl r0
   19e5c:	andeq	sl, r1, r4, lsl r0
   19e60:	strdeq	r9, [r1], -ip
   19e64:	andeq	sl, r1, r4, lsl r0
   19e68:	andeq	sl, r1, r4, lsl r0
   19e6c:	andeq	sl, r1, r4, lsl r0
   19e70:	strdeq	r9, [r1], -ip
   19e74:	andeq	sl, r1, r4, lsl r0
   19e78:	andeq	sl, r1, r4, lsl r0
   19e7c:	andeq	sl, r1, r4, lsl r0
   19e80:	andeq	sl, r1, r4, lsl r0
   19e84:	strdeq	r9, [r1], -ip
   19e88:	strdeq	r9, [r1], -ip
   19e8c:	andeq	sl, r1, r4, lsl r0
   19e90:	andeq	sl, r1, r4, lsl r0
   19e94:	andeq	sl, r1, r4, lsl r0
   19e98:	andeq	sl, r1, r4, lsl r0
   19e9c:	andeq	sl, r1, r4, lsl r0
   19ea0:	andeq	sl, r1, r4, lsl r0
   19ea4:	andeq	sl, r1, r4, lsl r0
   19ea8:	andeq	sl, r1, r4, lsl r0
   19eac:	andeq	sl, r1, r4, lsl r0
   19eb0:	andeq	sl, r1, r4, lsl r0
   19eb4:	andeq	sl, r1, r4, lsl r0
   19eb8:	andeq	sl, r1, r4, lsl r0
   19ebc:	strdeq	r9, [r1], -ip
   19ec0:	andeq	sl, r1, r4, lsl r0
   19ec4:	andeq	sl, r1, r4, lsl r0
   19ec8:	andeq	sl, r1, r4, lsl r0
   19ecc:	strdeq	r9, [r1], -ip
   19ed0:	andeq	sl, r1, r4, lsl r0
   19ed4:	strdeq	r9, [r1], -ip
   19ed8:	andeq	sl, r1, r4, lsl r0
   19edc:	andeq	sl, r1, r4, lsl r0
   19ee0:	andeq	sl, r1, r4, lsl r0
   19ee4:	andeq	sl, r1, r4, lsl r0
   19ee8:	andeq	sl, r1, r4, lsl r0
   19eec:	andeq	sl, r1, r4, lsl r0
   19ef0:	strdeq	r9, [r1], -ip
   19ef4:	mov	r4, #4
   19ef8:	b	19dd4 <__assert_fail@plt+0x8d08>
   19efc:	mov	r1, #48	; 0x30
   19f00:	ldr	r0, [sp, #48]	; 0x30
   19f04:	bl	10fc4 <strchr@plt>
   19f08:	cmp	r0, #0
   19f0c:	beq	1a014 <__assert_fail@plt+0x8f48>
   19f10:	ldrb	r3, [r6, #1]
   19f14:	cmp	r3, #68	; 0x44
   19f18:	beq	1a330 <__assert_fail@plt+0x9264>
   19f1c:	cmp	r3, #105	; 0x69
   19f20:	beq	1a33c <__assert_fail@plt+0x9270>
   19f24:	cmp	r3, #66	; 0x42
   19f28:	beq	1a330 <__assert_fail@plt+0x9264>
   19f2c:	cmp	sl, #47	; 0x2f
   19f30:	ldrls	pc, [pc, sl, lsl #2]
   19f34:	b	1a00c <__assert_fail@plt+0x8f40>
   19f38:	strdeq	sl, [r1], -r4
   19f3c:	andeq	sl, r1, ip
   19f40:	ldrdeq	sl, [r1], -ip
   19f44:	andeq	sl, r1, ip
   19f48:	andeq	sl, r1, ip
   19f4c:	andeq	sl, r1, ip
   19f50:	andeq	sl, r1, r4, lsl #3
   19f54:	andeq	sl, r1, ip
   19f58:	andeq	sl, r1, r8, lsr #5
   19f5c:	andeq	sl, r1, ip
   19f60:	andeq	sl, r1, ip
   19f64:	muleq	r1, r0, r2
   19f68:	andeq	sl, r1, ip
   19f6c:	andeq	sl, r1, ip
   19f70:	andeq	sl, r1, ip
   19f74:	andeq	sl, r1, r8, ror #4
   19f78:	andeq	sl, r1, ip
   19f7c:	andeq	sl, r1, ip
   19f80:	andeq	sl, r1, ip
   19f84:	andeq	sl, r1, ip
   19f88:	andeq	sl, r1, ip, ror #3
   19f8c:	andeq	sl, r1, r4, lsl #2
   19f90:	andeq	sl, r1, ip
   19f94:	andeq	sl, r1, ip
   19f98:	andeq	sl, r1, ip
   19f9c:	andeq	sl, r1, ip
   19fa0:	andeq	sl, r1, ip
   19fa4:	andeq	sl, r1, ip
   19fa8:	andeq	sl, r1, ip
   19fac:	andeq	sl, r1, r8, asr #3
   19fb0:	andeq	sl, r1, r8, lsr #6
   19fb4:	andeq	sl, r1, ip
   19fb8:	andeq	sl, r1, ip
   19fbc:	andeq	sl, r1, ip
   19fc0:	ldrdeq	sl, [r1], -ip
   19fc4:	andeq	sl, r1, ip
   19fc8:	andeq	sl, r1, ip
   19fcc:	andeq	sl, r1, ip
   19fd0:	andeq	sl, r1, r4, lsl #3
   19fd4:	andeq	sl, r1, ip
   19fd8:	andeq	sl, r1, r8, lsr #5
   19fdc:	andeq	sl, r1, ip
   19fe0:	andeq	sl, r1, ip
   19fe4:	andeq	sl, r1, ip
   19fe8:	andeq	sl, r1, ip
   19fec:	andeq	sl, r1, ip
   19ff0:	andeq	sl, r1, ip
   19ff4:	andeq	sl, r1, r8, ror #4
   19ff8:	mov	r0, r3
   19ffc:	mov	r1, r9
   1a000:	bl	10fc4 <strchr@plt>
   1a004:	cmp	r0, #0
   1a008:	bne	19e24 <__assert_fail@plt+0x8d58>
   1a00c:	orr	r4, r4, #2
   1a010:	b	19dd0 <__assert_fail@plt+0x8d04>
   1a014:	mov	ip, #1
   1a018:	mov	r2, #1024	; 0x400
   1a01c:	sub	r9, r9, #66	; 0x42
   1a020:	cmp	r9, #53	; 0x35
   1a024:	ldrls	pc, [pc, r9, lsl #2]
   1a028:	b	1a00c <__assert_fail@plt+0x8f40>
   1a02c:	andeq	sl, r1, ip, lsl #6
   1a030:	andeq	sl, r1, ip
   1a034:	andeq	sl, r1, ip
   1a038:	strdeq	sl, [r1], -ip
   1a03c:	andeq	sl, r1, ip
   1a040:	andeq	sl, r1, r4, ror #5
   1a044:	andeq	sl, r1, ip
   1a048:	andeq	sl, r1, ip
   1a04c:	andeq	sl, r1, ip
   1a050:	andeq	sl, r1, ip, lsl #3
   1a054:	andeq	sl, r1, ip
   1a058:			; <UNDEFINED> instruction: 0x0001a2b0
   1a05c:	andeq	sl, r1, ip
   1a060:	andeq	sl, r1, ip
   1a064:	muleq	r1, r8, r2
   1a068:	andeq	sl, r1, ip
   1a06c:	andeq	sl, r1, ip
   1a070:	andeq	sl, r1, ip
   1a074:	andeq	sl, r1, r0, ror r2
   1a078:	andeq	sl, r1, ip
   1a07c:	andeq	sl, r1, ip
   1a080:	andeq	sl, r1, ip
   1a084:	andeq	sl, r1, ip
   1a088:	strdeq	sl, [r1], -r4
   1a08c:	andeq	sl, r1, ip, lsl #2
   1a090:	andeq	sl, r1, ip
   1a094:	andeq	sl, r1, ip
   1a098:	andeq	sl, r1, ip
   1a09c:	andeq	sl, r1, ip
   1a0a0:	andeq	sl, r1, ip
   1a0a4:	andeq	sl, r1, ip
   1a0a8:	andeq	sl, r1, ip
   1a0ac:	andeq	sl, r1, ip, asr #3
   1a0b0:	andeq	sl, r1, ip, ror #2
   1a0b4:	andeq	sl, r1, ip
   1a0b8:	andeq	sl, r1, ip
   1a0bc:	andeq	sl, r1, ip
   1a0c0:	andeq	sl, r1, r4, ror #5
   1a0c4:	andeq	sl, r1, ip
   1a0c8:	andeq	sl, r1, ip
   1a0cc:	andeq	sl, r1, ip
   1a0d0:	andeq	sl, r1, ip, lsl #3
   1a0d4:	andeq	sl, r1, ip
   1a0d8:			; <UNDEFINED> instruction: 0x0001a2b0
   1a0dc:	andeq	sl, r1, ip
   1a0e0:	andeq	sl, r1, ip
   1a0e4:	andeq	sl, r1, ip
   1a0e8:	andeq	sl, r1, ip
   1a0ec:	andeq	sl, r1, ip
   1a0f0:	andeq	sl, r1, ip
   1a0f4:	andeq	sl, r1, r0, ror r2
   1a0f8:	andeq	sl, r1, ip
   1a0fc:	andeq	sl, r1, ip
   1a100:	andeq	sl, r1, r0, lsr #3
   1a104:	mov	ip, #1
   1a108:	mov	r2, #1024	; 0x400
   1a10c:	smull	sl, fp, r7, r2
   1a110:	cmp	fp, sl, asr #31
   1a114:	bne	1a27c <__assert_fail@plt+0x91b0>
   1a118:	smull	r0, r1, sl, r2
   1a11c:	cmp	r1, r0, asr #31
   1a120:	bne	1a254 <__assert_fail@plt+0x9188>
   1a124:	smull	sl, fp, r0, r2
   1a128:	cmp	fp, sl, asr #31
   1a12c:	bne	1a374 <__assert_fail@plt+0x92a8>
   1a130:	smull	r0, r1, sl, r2
   1a134:	cmp	r1, r0, asr #31
   1a138:	bne	1a254 <__assert_fail@plt+0x9188>
   1a13c:	smull	sl, fp, r0, r2
   1a140:	cmp	fp, sl, asr #31
   1a144:	bne	1a374 <__assert_fail@plt+0x92a8>
   1a148:	smull	r0, r1, sl, r2
   1a14c:	cmp	r1, r0, asr #31
   1a150:	bne	1a254 <__assert_fail@plt+0x9188>
   1a154:	smull	r2, r3, r0, r2
   1a158:	cmp	r3, r2, asr #31
   1a15c:	bne	1a374 <__assert_fail@plt+0x92a8>
   1a160:	mov	r7, r2
   1a164:	mov	r3, #0
   1a168:	orr	r4, r4, r3
   1a16c:	add	r3, r6, ip
   1a170:	str	r3, [r5]
   1a174:	ldrb	r3, [r6, ip]
   1a178:	cmp	r3, #0
   1a17c:	beq	19dd0 <__assert_fail@plt+0x8d04>
   1a180:	b	1a00c <__assert_fail@plt+0x8f40>
   1a184:	mov	ip, #1
   1a188:	mov	r2, #1024	; 0x400
   1a18c:	smull	r2, r3, r7, r2
   1a190:	cmp	r3, r2, asr #31
   1a194:	bne	1a1b4 <__assert_fail@plt+0x90e8>
   1a198:	mov	r7, r2
   1a19c:	b	1a16c <__assert_fail@plt+0x90a0>
   1a1a0:	asr	r1, r7, #31
   1a1a4:	adds	r2, r7, r7
   1a1a8:	adc	r3, r1, r1
   1a1ac:	cmp	r3, r2, asr #31
   1a1b0:	beq	1a198 <__assert_fail@plt+0x90cc>
   1a1b4:	cmp	r7, #0
   1a1b8:	mov	r4, #1
   1a1bc:	mvnge	r7, #-2147483648	; 0x80000000
   1a1c0:	movlt	r7, #-2147483648	; 0x80000000
   1a1c4:	b	1a16c <__assert_fail@plt+0x90a0>
   1a1c8:	mov	ip, #1
   1a1cc:	asr	r3, r7, #31
   1a1d0:	lsl	r1, r7, #9
   1a1d4:	lsl	r3, r3, #9
   1a1d8:	orr	r3, r3, r7, lsr #23
   1a1dc:	cmp	r3, r1, asr #31
   1a1e0:	bne	1a1b4 <__assert_fail@plt+0x90e8>
   1a1e4:	mov	r7, r1
   1a1e8:	b	1a16c <__assert_fail@plt+0x90a0>
   1a1ec:	mov	ip, #1
   1a1f0:	mov	r2, #1024	; 0x400
   1a1f4:	smull	sl, fp, r7, r2
   1a1f8:	cmp	fp, sl, asr #31
   1a1fc:	bne	1a27c <__assert_fail@plt+0x91b0>
   1a200:	smull	r0, r1, sl, r2
   1a204:	cmp	r1, r0, asr #31
   1a208:	bne	1a254 <__assert_fail@plt+0x9188>
   1a20c:	smull	sl, fp, r0, r2
   1a210:	cmp	fp, sl, asr #31
   1a214:	bne	1a374 <__assert_fail@plt+0x92a8>
   1a218:	smull	r0, r1, sl, r2
   1a21c:	cmp	r1, r0, asr #31
   1a220:	bne	1a254 <__assert_fail@plt+0x9188>
   1a224:	smull	sl, fp, r0, r2
   1a228:	cmp	fp, sl, asr #31
   1a22c:	bne	1a374 <__assert_fail@plt+0x92a8>
   1a230:	smull	r0, r1, sl, r2
   1a234:	cmp	r1, r0, asr #31
   1a238:	bne	1a254 <__assert_fail@plt+0x9188>
   1a23c:	smull	sl, fp, r0, r2
   1a240:	cmp	fp, sl, asr #31
   1a244:	bne	1a374 <__assert_fail@plt+0x92a8>
   1a248:	smull	r2, r3, sl, r2
   1a24c:	cmp	r3, r2, asr #31
   1a250:	beq	1a160 <__assert_fail@plt+0x9094>
   1a254:	cmp	sl, #0
   1a258:	mov	r3, #1
   1a25c:	movlt	r7, #-2147483648	; 0x80000000
   1a260:	mvnge	r7, #-2147483648	; 0x80000000
   1a264:	b	1a168 <__assert_fail@plt+0x909c>
   1a268:	mov	ip, #1
   1a26c:	mov	r2, #1024	; 0x400
   1a270:	smull	sl, fp, r7, r2
   1a274:	cmp	fp, sl, asr #31
   1a278:	beq	1a230 <__assert_fail@plt+0x9164>
   1a27c:	cmp	r7, #0
   1a280:	mov	r3, #1
   1a284:	mvnge	r7, #-2147483648	; 0x80000000
   1a288:	movlt	r7, #-2147483648	; 0x80000000
   1a28c:	b	1a168 <__assert_fail@plt+0x909c>
   1a290:	mov	ip, #1
   1a294:	mov	r2, #1024	; 0x400
   1a298:	smull	sl, fp, r7, r2
   1a29c:	cmp	fp, sl, asr #31
   1a2a0:	beq	1a130 <__assert_fail@plt+0x9064>
   1a2a4:	b	1a27c <__assert_fail@plt+0x91b0>
   1a2a8:	mov	ip, #1
   1a2ac:	mov	r2, #1024	; 0x400
   1a2b0:	smull	r0, r1, r7, r2
   1a2b4:	cmp	r1, r0, asr #31
   1a2b8:	bne	1a1b4 <__assert_fail@plt+0x90e8>
   1a2bc:	smull	r2, r3, r0, r2
   1a2c0:	cmp	r3, r2, asr #31
   1a2c4:	beq	1a198 <__assert_fail@plt+0x90cc>
   1a2c8:	cmp	r0, #0
   1a2cc:	mov	r4, #1
   1a2d0:	movlt	r7, #-2147483648	; 0x80000000
   1a2d4:	mvnge	r7, #-2147483648	; 0x80000000
   1a2d8:	b	1a16c <__assert_fail@plt+0x90a0>
   1a2dc:	mov	ip, #1
   1a2e0:	mov	r2, #1024	; 0x400
   1a2e4:	smull	r0, r1, r7, r2
   1a2e8:	cmp	r1, r0, asr #31
   1a2ec:	beq	1a23c <__assert_fail@plt+0x9170>
   1a2f0:	b	1a27c <__assert_fail@plt+0x91b0>
   1a2f4:	mov	ip, #1
   1a2f8:	mov	r2, #1024	; 0x400
   1a2fc:	smull	sl, fp, r7, r2
   1a300:	cmp	fp, sl, asr #31
   1a304:	beq	1a218 <__assert_fail@plt+0x914c>
   1a308:	b	1a27c <__assert_fail@plt+0x91b0>
   1a30c:	asr	r3, r7, #31
   1a310:	lsl	r1, r7, #10
   1a314:	lsl	r3, r3, #10
   1a318:	orr	r3, r3, r7, lsr #22
   1a31c:	cmp	r3, r1, asr #31
   1a320:	beq	1a1e4 <__assert_fail@plt+0x9118>
   1a324:	b	1a1b4 <__assert_fail@plt+0x90e8>
   1a328:	mov	ip, #1
   1a32c:	b	1a16c <__assert_fail@plt+0x90a0>
   1a330:	mov	ip, #2
   1a334:	mov	r2, #1000	; 0x3e8
   1a338:	b	1a01c <__assert_fail@plt+0x8f50>
   1a33c:	ldrb	r3, [r6, #2]
   1a340:	mov	r2, #1024	; 0x400
   1a344:	cmp	r3, #66	; 0x42
   1a348:	movne	ip, #1
   1a34c:	moveq	ip, #3
   1a350:	b	1a01c <__assert_fail@plt+0x8f50>
   1a354:	movw	r3, #57264	; 0xdfb0
   1a358:	movt	r3, #1
   1a35c:	movw	r1, #57272	; 0xdfb8
   1a360:	movt	r1, #1
   1a364:	movw	r0, #57288	; 0xdfc8
   1a368:	movt	r0, #1
   1a36c:	mov	r2, #85	; 0x55
   1a370:	bl	110cc <__assert_fail@plt>
   1a374:	cmp	r0, #0
   1a378:	mov	r3, #1
   1a37c:	movlt	r7, #-2147483648	; 0x80000000
   1a380:	mvnge	r7, #-2147483648	; 0x80000000
   1a384:	b	1a168 <__assert_fail@plt+0x909c>
   1a388:	cmp	r2, #36	; 0x24
   1a38c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a390:	strd	r6, [sp, #8]
   1a394:	strd	r8, [sp, #16]
   1a398:	strd	sl, [sp, #24]
   1a39c:	str	lr, [sp, #32]
   1a3a0:	sub	sp, sp, #36	; 0x24
   1a3a4:	bhi	1b01c <__assert_fail@plt+0x9f50>
   1a3a8:	cmp	r1, #0
   1a3ac:	mov	r6, r2
   1a3b0:	mov	r5, r1
   1a3b4:	mov	sl, r0
   1a3b8:	addeq	r5, sp, #28
   1a3bc:	mov	r9, r3
   1a3c0:	bl	10fd0 <__errno_location@plt>
   1a3c4:	mov	r3, #0
   1a3c8:	mov	fp, r0
   1a3cc:	str	r3, [r0]
   1a3d0:	ldrb	r4, [sl]
   1a3d4:	bl	10fa0 <__ctype_b_loc@plt>
   1a3d8:	ldr	r2, [r0]
   1a3dc:	lsl	r3, r4, #1
   1a3e0:	ldrh	r3, [r2, r3]
   1a3e4:	tst	r3, #8192	; 0x2000
   1a3e8:	beq	1a404 <__assert_fail@plt+0x9338>
   1a3ec:	mov	r3, sl
   1a3f0:	ldrb	r4, [r3, #1]!
   1a3f4:	lsl	r1, r4, #1
   1a3f8:	ldrh	r1, [r2, r1]
   1a3fc:	tst	r1, #8192	; 0x2000
   1a400:	bne	1a3f0 <__assert_fail@plt+0x9324>
   1a404:	cmp	r4, #45	; 0x2d
   1a408:	beq	1a4a4 <__assert_fail@plt+0x93d8>
   1a40c:	mov	r2, r6
   1a410:	mov	r3, #0
   1a414:	mov	r1, r5
   1a418:	mov	r0, sl
   1a41c:	bl	10e98 <__strtoull_internal@plt>
   1a420:	ldr	r8, [r5]
   1a424:	mov	r6, r0
   1a428:	mov	r7, r1
   1a42c:	cmp	r8, sl
   1a430:	beq	1a48c <__assert_fail@plt+0x93c0>
   1a434:	ldr	r4, [fp]
   1a438:	cmp	r4, #0
   1a43c:	bne	1a47c <__assert_fail@plt+0x93b0>
   1a440:	ldr	r3, [sp, #72]	; 0x48
   1a444:	cmp	r3, #0
   1a448:	beq	1a458 <__assert_fail@plt+0x938c>
   1a44c:	ldrb	sl, [r8]
   1a450:	cmp	sl, #0
   1a454:	bne	1a810 <__assert_fail@plt+0x9744>
   1a458:	strd	r6, [r9]
   1a45c:	mov	r0, r4
   1a460:	add	sp, sp, #36	; 0x24
   1a464:	ldrd	r4, [sp]
   1a468:	ldrd	r6, [sp, #8]
   1a46c:	ldrd	r8, [sp, #16]
   1a470:	ldrd	sl, [sp, #24]
   1a474:	add	sp, sp, #32
   1a478:	pop	{pc}		; (ldr pc, [sp], #4)
   1a47c:	cmp	r4, #34	; 0x22
   1a480:	bne	1a4a4 <__assert_fail@plt+0x93d8>
   1a484:	mov	r4, #1
   1a488:	b	1a440 <__assert_fail@plt+0x9374>
   1a48c:	ldr	r3, [sp, #72]	; 0x48
   1a490:	cmp	r3, #0
   1a494:	beq	1a4a4 <__assert_fail@plt+0x93d8>
   1a498:	ldrb	sl, [sl]
   1a49c:	cmp	sl, #0
   1a4a0:	bne	1a4ac <__assert_fail@plt+0x93e0>
   1a4a4:	mov	r4, #4
   1a4a8:	b	1a45c <__assert_fail@plt+0x9390>
   1a4ac:	mov	r1, sl
   1a4b0:	mov	r0, r3
   1a4b4:	bl	10fc4 <strchr@plt>
   1a4b8:	cmp	r0, #0
   1a4bc:	movne	r4, #0
   1a4c0:	movne	r6, #1
   1a4c4:	movne	r7, r4
   1a4c8:	beq	1a4a4 <__assert_fail@plt+0x93d8>
   1a4cc:	sub	r3, sl, #69	; 0x45
   1a4d0:	cmp	r3, #47	; 0x2f
   1a4d4:	ldrls	pc, [pc, r3, lsl #2]
   1a4d8:	b	1a5e0 <__assert_fail@plt+0x9514>
   1a4dc:	muleq	r1, ip, r5
   1a4e0:	andeq	sl, r1, r0, ror #11
   1a4e4:	muleq	r1, ip, r5
   1a4e8:	andeq	sl, r1, r0, ror #11
   1a4ec:	andeq	sl, r1, r0, ror #11
   1a4f0:	andeq	sl, r1, r0, ror #11
   1a4f4:	muleq	r1, ip, r5
   1a4f8:	andeq	sl, r1, r0, ror #11
   1a4fc:	muleq	r1, ip, r5
   1a500:	andeq	sl, r1, r0, ror #11
   1a504:	andeq	sl, r1, r0, ror #11
   1a508:	muleq	r1, ip, r5
   1a50c:	andeq	sl, r1, r0, ror #11
   1a510:	andeq	sl, r1, r0, ror #11
   1a514:	andeq	sl, r1, r0, ror #11
   1a518:	muleq	r1, ip, r5
   1a51c:	andeq	sl, r1, r0, ror #11
   1a520:	andeq	sl, r1, r0, ror #11
   1a524:	andeq	sl, r1, r0, ror #11
   1a528:	andeq	sl, r1, r0, ror #11
   1a52c:	muleq	r1, ip, r5
   1a530:	muleq	r1, ip, r5
   1a534:	andeq	sl, r1, r0, ror #11
   1a538:	andeq	sl, r1, r0, ror #11
   1a53c:	andeq	sl, r1, r0, ror #11
   1a540:	andeq	sl, r1, r0, ror #11
   1a544:	andeq	sl, r1, r0, ror #11
   1a548:	andeq	sl, r1, r0, ror #11
   1a54c:	andeq	sl, r1, r0, ror #11
   1a550:	andeq	sl, r1, r0, ror #11
   1a554:	andeq	sl, r1, r0, ror #11
   1a558:	andeq	sl, r1, r0, ror #11
   1a55c:	andeq	sl, r1, r0, ror #11
   1a560:	andeq	sl, r1, r0, ror #11
   1a564:	muleq	r1, ip, r5
   1a568:	andeq	sl, r1, r0, ror #11
   1a56c:	andeq	sl, r1, r0, ror #11
   1a570:	andeq	sl, r1, r0, ror #11
   1a574:	muleq	r1, ip, r5
   1a578:	andeq	sl, r1, r0, ror #11
   1a57c:	muleq	r1, ip, r5
   1a580:	andeq	sl, r1, r0, ror #11
   1a584:	andeq	sl, r1, r0, ror #11
   1a588:	andeq	sl, r1, r0, ror #11
   1a58c:	andeq	sl, r1, r0, ror #11
   1a590:	andeq	sl, r1, r0, ror #11
   1a594:	andeq	sl, r1, r0, ror #11
   1a598:	muleq	r1, ip, r5
   1a59c:	mov	r1, #48	; 0x30
   1a5a0:	ldr	r0, [sp, #72]	; 0x48
   1a5a4:	bl	10fc4 <strchr@plt>
   1a5a8:	cmp	r0, #0
   1a5ac:	beq	1a5e0 <__assert_fail@plt+0x9514>
   1a5b0:	ldrb	r3, [r8, #1]
   1a5b4:	cmp	r3, #68	; 0x44
   1a5b8:	beq	1ab70 <__assert_fail@plt+0x9aa4>
   1a5bc:	cmp	r3, #105	; 0x69
   1a5c0:	beq	1a828 <__assert_fail@plt+0x975c>
   1a5c4:	cmp	r3, #66	; 0x42
   1a5c8:	moveq	r3, #2
   1a5cc:	movne	r3, #1
   1a5d0:	moveq	ip, #1000	; 0x3e8
   1a5d4:	movne	ip, #1024	; 0x400
   1a5d8:	str	r3, [sp, #12]
   1a5dc:	b	1a5ec <__assert_fail@plt+0x9520>
   1a5e0:	mov	r3, #1
   1a5e4:	mov	ip, #1024	; 0x400
   1a5e8:	str	r3, [sp, #12]
   1a5ec:	sub	sl, sl, #66	; 0x42
   1a5f0:	cmp	sl, #53	; 0x35
   1a5f4:	ldrls	pc, [pc, sl, lsl #2]
   1a5f8:	b	1a7d4 <__assert_fail@plt+0x9708>
   1a5fc:			; <UNDEFINED> instruction: 0x0001aabc
   1a600:	ldrdeq	sl, [r1], -r4
   1a604:	ldrdeq	sl, [r1], -r4
   1a608:	andeq	sl, r1, ip, asr sl
   1a60c:	ldrdeq	sl, [r1], -r4
   1a610:	ldrdeq	sl, [r1], -r8
   1a614:	ldrdeq	sl, [r1], -r4
   1a618:	ldrdeq	sl, [r1], -r4
   1a61c:	ldrdeq	sl, [r1], -r4
   1a620:	ldrdeq	sl, [r1], -ip
   1a624:	ldrdeq	sl, [r1], -r4
   1a628:	andeq	sl, r1, r4, lsl #20
   1a62c:	ldrdeq	sl, [r1], -r4
   1a630:	ldrdeq	sl, [r1], -r4
   1a634:	andeq	sl, r1, r8, lsr #19
   1a638:	ldrdeq	sl, [r1], -r4
   1a63c:	ldrdeq	sl, [r1], -r4
   1a640:	ldrdeq	sl, [r1], -r4
   1a644:	andeq	sl, r1, r8, asr #18
   1a648:	ldrdeq	sl, [r1], -r4
   1a64c:	ldrdeq	sl, [r1], -r4
   1a650:	ldrdeq	sl, [r1], -r4
   1a654:	ldrdeq	sl, [r1], -r4
   1a658:	andeq	sl, r1, ip, ror r8
   1a65c:	ldrdeq	sl, [r1], -r4
   1a660:	ldrdeq	sl, [r1], -r4
   1a664:	ldrdeq	sl, [r1], -r4
   1a668:	ldrdeq	sl, [r1], -r4
   1a66c:	ldrdeq	sl, [r1], -r4
   1a670:	ldrdeq	sl, [r1], -r4
   1a674:	ldrdeq	sl, [r1], -r4
   1a678:	ldrdeq	sl, [r1], -r4
   1a67c:	andeq	sl, r1, ip, asr r8
   1a680:			; <UNDEFINED> instruction: 0x0001a7bc
   1a684:	ldrdeq	sl, [r1], -r4
   1a688:	ldrdeq	sl, [r1], -r4
   1a68c:	ldrdeq	sl, [r1], -r4
   1a690:	ldrdeq	sl, [r1], -r8
   1a694:	ldrdeq	sl, [r1], -r4
   1a698:	ldrdeq	sl, [r1], -r4
   1a69c:	ldrdeq	sl, [r1], -r4
   1a6a0:	ldrdeq	sl, [r1], -ip
   1a6a4:	ldrdeq	sl, [r1], -r4
   1a6a8:	andeq	sl, r1, r4, lsl #20
   1a6ac:	ldrdeq	sl, [r1], -r4
   1a6b0:	ldrdeq	sl, [r1], -r4
   1a6b4:	ldrdeq	sl, [r1], -r4
   1a6b8:	ldrdeq	sl, [r1], -r4
   1a6bc:	ldrdeq	sl, [r1], -r4
   1a6c0:	ldrdeq	sl, [r1], -r4
   1a6c4:	andeq	sl, r1, r8, asr #18
   1a6c8:	ldrdeq	sl, [r1], -r4
   1a6cc:	ldrdeq	sl, [r1], -r4
   1a6d0:	andeq	sl, r1, r4, asr #16
   1a6d4:	asr	r3, ip, #31
   1a6d8:	mov	r2, ip
   1a6dc:	cmp	r7, #0
   1a6e0:	mov	r1, #0
   1a6e4:	strd	r2, [sp]
   1a6e8:	bne	1ac28 <__assert_fail@plt+0x9b5c>
   1a6ec:	umull	r6, r7, r6, ip
   1a6f0:	mov	r2, r6
   1a6f4:	mov	r3, r7
   1a6f8:	cmp	r1, #0
   1a6fc:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a700:	cmp	r3, #0
   1a704:	mov	lr, r1
   1a708:	bne	1ad54 <__assert_fail@plt+0x9c88>
   1a70c:	umull	r2, r3, r2, ip
   1a710:	mov	r0, r2
   1a714:	mov	r1, r3
   1a718:	cmp	lr, #0
   1a71c:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a720:	cmp	r1, #0
   1a724:	bne	1ad30 <__assert_fail@plt+0x9c64>
   1a728:	umull	r0, r1, r0, ip
   1a72c:	mov	r2, r0
   1a730:	mov	r3, r1
   1a734:	cmp	lr, #0
   1a738:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a73c:	cmp	r3, #0
   1a740:	bne	1a9e0 <__assert_fail@plt+0x9914>
   1a744:	umull	r2, r3, r2, ip
   1a748:	mov	r0, r2
   1a74c:	mov	r1, r3
   1a750:	cmp	lr, #0
   1a754:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a758:	cmp	r1, #0
   1a75c:	bne	1abe0 <__assert_fail@plt+0x9b14>
   1a760:	umull	r0, r1, r0, ip
   1a764:	mov	r2, r0
   1a768:	mov	r3, r1
   1a76c:	cmp	lr, #0
   1a770:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a774:	cmp	r3, #0
   1a778:	mov	r7, lr
   1a77c:	bne	1abbc <__assert_fail@plt+0x9af0>
   1a780:	umull	r2, r3, r2, ip
   1a784:	mov	r6, r2
   1a788:	mov	lr, r3
   1a78c:	cmp	r7, #0
   1a790:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a794:	cmp	lr, #0
   1a798:	bne	1ab80 <__assert_fail@plt+0x9ab4>
   1a79c:	umull	r2, r3, r6, ip
   1a7a0:	mov	r0, r2
   1a7a4:	mov	r2, r3
   1a7a8:	subs	r3, r7, #0
   1a7ac:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a7b0:	mov	r6, r0
   1a7b4:	mov	r7, r2
   1a7b8:	orr	r4, r4, r3
   1a7bc:	ldr	r2, [sp, #12]
   1a7c0:	add	r3, r8, r2
   1a7c4:	str	r3, [r5]
   1a7c8:	ldrb	r3, [r8, r2]
   1a7cc:	cmp	r3, #0
   1a7d0:	beq	1a458 <__assert_fail@plt+0x938c>
   1a7d4:	orr	r4, r4, #2
   1a7d8:	b	1a458 <__assert_fail@plt+0x938c>
   1a7dc:	cmp	r7, #0
   1a7e0:	asr	r1, ip, #31
   1a7e4:	mov	lr, #0
   1a7e8:	bne	1ab4c <__assert_fail@plt+0x9a80>
   1a7ec:	umull	r2, r3, r6, ip
   1a7f0:	mov	r6, r2
   1a7f4:	mov	r7, r3
   1a7f8:	cmp	lr, #0
   1a7fc:	beq	1a7bc <__assert_fail@plt+0x96f0>
   1a800:	mvn	r6, #0
   1a804:	mov	r4, #1
   1a808:	mov	r7, r6
   1a80c:	b	1a7bc <__assert_fail@plt+0x96f0>
   1a810:	mov	r0, r3
   1a814:	mov	r1, sl
   1a818:	bl	10fc4 <strchr@plt>
   1a81c:	cmp	r0, #0
   1a820:	bne	1a4cc <__assert_fail@plt+0x9400>
   1a824:	b	1a7d4 <__assert_fail@plt+0x9708>
   1a828:	ldrb	r3, [r8, #2]
   1a82c:	mov	ip, #1024	; 0x400
   1a830:	cmp	r3, #66	; 0x42
   1a834:	movne	r3, #1
   1a838:	moveq	r3, #3
   1a83c:	str	r3, [sp, #12]
   1a840:	b	1a5ec <__assert_fail@plt+0x9520>
   1a844:	lsr	r3, r7, #31
   1a848:	adds	r6, r6, r6
   1a84c:	adc	r7, r7, r7
   1a850:	cmp	r3, #0
   1a854:	beq	1a7bc <__assert_fail@plt+0x96f0>
   1a858:	b	1a800 <__assert_fail@plt+0x9734>
   1a85c:	lsr	r3, r7, #23
   1a860:	lsl	r7, r7, #9
   1a864:	cmp	r3, #0
   1a868:	lsl	r3, r6, #9
   1a86c:	orr	r7, r7, r6, lsr #23
   1a870:	bne	1a800 <__assert_fail@plt+0x9734>
   1a874:	mov	r6, r3
   1a878:	b	1a7bc <__assert_fail@plt+0x96f0>
   1a87c:	asr	r3, ip, #31
   1a880:	mov	r2, ip
   1a884:	cmp	r7, #0
   1a888:	mov	r1, #0
   1a88c:	strd	r2, [sp]
   1a890:	bne	1ac9c <__assert_fail@plt+0x9bd0>
   1a894:	umull	r6, r7, r6, ip
   1a898:	mov	r0, r6
   1a89c:	mov	fp, r7
   1a8a0:	cmp	r1, #0
   1a8a4:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a8a8:	cmp	fp, #0
   1a8ac:	mov	lr, r1
   1a8b0:	bne	1ae2c <__assert_fail@plt+0x9d60>
   1a8b4:	umull	r0, r1, r0, ip
   1a8b8:	mov	r2, r0
   1a8bc:	mov	r3, r1
   1a8c0:	cmp	lr, #0
   1a8c4:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a8c8:	cmp	r3, #0
   1a8cc:	bne	1ae54 <__assert_fail@plt+0x9d88>
   1a8d0:	umull	r2, r3, r2, ip
   1a8d4:	mov	r0, r2
   1a8d8:	mov	r1, r3
   1a8dc:	cmp	lr, #0
   1a8e0:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a8e4:	cmp	r1, #0
   1a8e8:	bne	1add4 <__assert_fail@plt+0x9d08>
   1a8ec:	umull	r0, r1, r0, ip
   1a8f0:	mov	r2, r0
   1a8f4:	mov	r3, r1
   1a8f8:	cmp	lr, #0
   1a8fc:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a900:	cmp	r3, #0
   1a904:	bne	1ac04 <__assert_fail@plt+0x9b38>
   1a908:	umull	r2, r3, r2, ip
   1a90c:	mov	r0, r2
   1a910:	mov	r1, r3
   1a914:	cmp	lr, #0
   1a918:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a91c:	cmp	r1, #0
   1a920:	beq	1a760 <__assert_fail@plt+0x9694>
   1a924:	umull	r6, r7, r0, ip
   1a928:	mov	fp, lr
   1a92c:	mov	sl, r7
   1a930:	umlal	sl, fp, r1, ip
   1a934:	cmp	fp, #0
   1a938:	bne	1b03c <__assert_fail@plt+0x9f70>
   1a93c:	mov	r2, r6
   1a940:	mov	r3, sl
   1a944:	b	1a76c <__assert_fail@plt+0x96a0>
   1a948:	asr	r3, ip, #31
   1a94c:	mov	r2, ip
   1a950:	cmp	r7, #0
   1a954:	mov	r1, #0
   1a958:	strd	r2, [sp]
   1a95c:	bne	1acc0 <__assert_fail@plt+0x9bf4>
   1a960:	umull	r6, r7, r6, ip
   1a964:	mov	r0, r6
   1a968:	mov	fp, r7
   1a96c:	cmp	r1, #0
   1a970:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a974:	cmp	fp, #0
   1a978:	mov	lr, r1
   1a97c:	beq	1a760 <__assert_fail@plt+0x9694>
   1a980:	umull	r6, r7, r0, ip
   1a984:	mov	r3, r1
   1a988:	mov	r2, r7
   1a98c:	umlal	r2, r3, fp, ip
   1a990:	cmp	r3, #0
   1a994:	strd	r2, [sp, #16]
   1a998:	bne	1af20 <__assert_fail@plt+0x9e54>
   1a99c:	mov	r2, r6
   1a9a0:	ldr	r3, [sp, #16]
   1a9a4:	b	1a76c <__assert_fail@plt+0x96a0>
   1a9a8:	asr	r3, ip, #31
   1a9ac:	mov	r2, ip
   1a9b0:	cmp	r7, #0
   1a9b4:	mov	r1, #0
   1a9b8:	strd	r2, [sp]
   1a9bc:	bne	1ad08 <__assert_fail@plt+0x9c3c>
   1a9c0:	umull	r6, r7, r6, ip
   1a9c4:	mov	r2, r6
   1a9c8:	mov	r3, r7
   1a9cc:	cmp	r1, #0
   1a9d0:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1a9d4:	cmp	r3, #0
   1a9d8:	mov	lr, r1
   1a9dc:	beq	1a744 <__assert_fail@plt+0x9678>
   1a9e0:	umull	r6, r7, r2, ip
   1a9e4:	mov	fp, lr
   1a9e8:	mov	sl, r7
   1a9ec:	umlal	sl, fp, r3, ip
   1a9f0:	cmp	fp, #0
   1a9f4:	bne	1b000 <__assert_fail@plt+0x9f34>
   1a9f8:	mov	r0, r6
   1a9fc:	mov	r1, sl
   1aa00:	b	1a750 <__assert_fail@plt+0x9684>
   1aa04:	asr	r3, ip, #31
   1aa08:	mov	r2, ip
   1aa0c:	cmp	r7, #0
   1aa10:	mov	r1, #0
   1aa14:	strd	r2, [sp]
   1aa18:	bne	1ace4 <__assert_fail@plt+0x9c18>
   1aa1c:	umull	r6, r7, r6, ip
   1aa20:	mov	sl, r6
   1aa24:	mov	lr, r7
   1aa28:	cmp	r1, #0
   1aa2c:	bne	1a800 <__assert_fail@plt+0x9734>
   1aa30:	cmp	lr, #0
   1aa34:	mov	r7, r1
   1aa38:	bne	1adf8 <__assert_fail@plt+0x9d2c>
   1aa3c:	umull	sl, fp, sl, ip
   1aa40:	mov	r0, sl
   1aa44:	mov	r2, fp
   1aa48:	cmp	r7, #0
   1aa4c:	mov	r6, r0
   1aa50:	mov	r7, r2
   1aa54:	beq	1a7bc <__assert_fail@plt+0x96f0>
   1aa58:	b	1a800 <__assert_fail@plt+0x9734>
   1aa5c:	asr	r3, ip, #31
   1aa60:	mov	r2, ip
   1aa64:	cmp	r7, #0
   1aa68:	mov	r1, #0
   1aa6c:	strd	r2, [sp]
   1aa70:	bne	1ac78 <__assert_fail@plt+0x9bac>
   1aa74:	umull	r6, r7, r6, ip
   1aa78:	mov	r0, r6
   1aa7c:	mov	fp, r7
   1aa80:	cmp	r1, #0
   1aa84:	bne	1ab3c <__assert_fail@plt+0x9a70>
   1aa88:	cmp	fp, #0
   1aa8c:	mov	lr, r1
   1aa90:	beq	1a8ec <__assert_fail@plt+0x9820>
   1aa94:	umull	r6, r7, r0, ip
   1aa98:	mov	r3, r1
   1aa9c:	mov	r2, r7
   1aaa0:	umlal	r2, r3, fp, ip
   1aaa4:	cmp	r3, #0
   1aaa8:	strd	r2, [sp, #16]
   1aaac:	bne	1af90 <__assert_fail@plt+0x9ec4>
   1aab0:	mov	r2, r6
   1aab4:	ldr	r3, [sp, #16]
   1aab8:	b	1a8f8 <__assert_fail@plt+0x982c>
   1aabc:	lsr	r3, r7, #22
   1aac0:	lsl	r7, r7, #10
   1aac4:	cmp	r3, #0
   1aac8:	lsl	r3, r6, #10
   1aacc:	orr	r7, r7, r6, lsr #22
   1aad0:	beq	1a874 <__assert_fail@plt+0x97a8>
   1aad4:	b	1a800 <__assert_fail@plt+0x9734>
   1aad8:	asr	r3, ip, #31
   1aadc:	mov	r2, ip
   1aae0:	cmp	r7, #0
   1aae4:	mov	r1, #0
   1aae8:	strd	r2, [sp]
   1aaec:	bne	1ac50 <__assert_fail@plt+0x9b84>
   1aaf0:	umull	r6, r7, r6, ip
   1aaf4:	mov	r2, r6
   1aaf8:	mov	r3, r7
   1aafc:	cmp	r1, #0
   1ab00:	bne	1a800 <__assert_fail@plt+0x9734>
   1ab04:	cmp	r3, #0
   1ab08:	mov	r7, r1
   1ab0c:	bne	1adb4 <__assert_fail@plt+0x9ce8>
   1ab10:	umull	r2, r3, r2, ip
   1ab14:	mov	r6, r2
   1ab18:	mov	lr, r3
   1ab1c:	cmp	r7, #0
   1ab20:	bne	1a800 <__assert_fail@plt+0x9734>
   1ab24:	cmp	lr, #0
   1ab28:	bne	1ad78 <__assert_fail@plt+0x9cac>
   1ab2c:	umull	r2, r3, r6, ip
   1ab30:	mov	r0, r2
   1ab34:	mov	r2, r3
   1ab38:	b	1aa48 <__assert_fail@plt+0x997c>
   1ab3c:	mvn	r6, #0
   1ab40:	mov	r3, #1
   1ab44:	mov	r7, r6
   1ab48:	b	1a7b8 <__assert_fail@plt+0x96ec>
   1ab4c:	umull	sl, fp, r6, ip
   1ab50:	mov	r3, lr
   1ab54:	mov	r2, fp
   1ab58:	umlal	r2, r3, r7, ip
   1ab5c:	cmp	r3, #0
   1ab60:	bne	1af58 <__assert_fail@plt+0x9e8c>
   1ab64:	mov	r6, sl
   1ab68:	mov	r7, r2
   1ab6c:	b	1a7f8 <__assert_fail@plt+0x972c>
   1ab70:	mov	r3, #2
   1ab74:	mov	ip, #1000	; 0x3e8
   1ab78:	str	r3, [sp, #12]
   1ab7c:	b	1a5ec <__assert_fail@plt+0x9520>
   1ab80:	umull	r0, r1, r6, ip
   1ab84:	mov	r3, r7
   1ab88:	mov	r2, r1
   1ab8c:	strd	r0, [sp, #16]
   1ab90:	umlal	r2, r3, lr, ip
   1ab94:	cmp	r3, #0
   1ab98:	beq	1a7a8 <__assert_fail@plt+0x96dc>
   1ab9c:	ldrd	sl, [sp]
   1aba0:	mov	r7, #1
   1aba4:	ldr	r0, [sp, #16]
   1aba8:	ldr	r3, [sp, #20]
   1abac:	mul	r2, r6, fp
   1abb0:	mla	r2, lr, sl, r2
   1abb4:	add	r2, r2, r3
   1abb8:	b	1a7a8 <__assert_fail@plt+0x96dc>
   1abbc:	umull	sl, fp, r2, ip
   1abc0:	mov	r1, lr
   1abc4:	mov	r0, fp
   1abc8:	umlal	r0, r1, r3, ip
   1abcc:	cmp	r1, #0
   1abd0:	bne	1aeb0 <__assert_fail@plt+0x9de4>
   1abd4:	mov	r6, sl
   1abd8:	mov	lr, r0
   1abdc:	b	1a78c <__assert_fail@plt+0x96c0>
   1abe0:	umull	sl, fp, r0, ip
   1abe4:	mov	r7, lr
   1abe8:	mov	r6, fp
   1abec:	umlal	r6, r7, r1, ip
   1abf0:	cmp	r7, #0
   1abf4:	bne	1b058 <__assert_fail@plt+0x9f8c>
   1abf8:	mov	r2, sl
   1abfc:	mov	r3, r6
   1ac00:	b	1a76c <__assert_fail@plt+0x96a0>
   1ac04:	umull	sl, fp, r2, ip
   1ac08:	mov	r7, lr
   1ac0c:	mov	r6, fp
   1ac10:	umlal	r6, r7, r3, ip
   1ac14:	cmp	r7, #0
   1ac18:	bne	1aee8 <__assert_fail@plt+0x9e1c>
   1ac1c:	mov	r0, sl
   1ac20:	mov	r1, r6
   1ac24:	b	1a914 <__assert_fail@plt+0x9848>
   1ac28:	umull	sl, fp, r6, ip
   1ac2c:	mov	r3, r1
   1ac30:	mov	r2, fp
   1ac34:	umlal	r2, r3, r7, ip
   1ac38:	cmp	r3, #0
   1ac3c:	strd	r2, [sp, #16]
   1ac40:	bne	1aecc <__assert_fail@plt+0x9e00>
   1ac44:	mov	r2, sl
   1ac48:	ldr	r3, [sp, #16]
   1ac4c:	b	1a6f8 <__assert_fail@plt+0x962c>
   1ac50:	umull	sl, fp, r6, ip
   1ac54:	mov	r3, r1
   1ac58:	mov	r2, fp
   1ac5c:	umlal	r2, r3, r7, ip
   1ac60:	cmp	r3, #0
   1ac64:	strd	r2, [sp, #16]
   1ac68:	bne	1afac <__assert_fail@plt+0x9ee0>
   1ac6c:	mov	r2, sl
   1ac70:	ldr	r3, [sp, #16]
   1ac74:	b	1aafc <__assert_fail@plt+0x9a30>
   1ac78:	umull	sl, fp, r6, ip
   1ac7c:	mov	r3, r1
   1ac80:	mov	r2, fp
   1ac84:	umlal	r2, r3, r7, ip
   1ac88:	cmp	r3, #0
   1ac8c:	bne	1ae78 <__assert_fail@plt+0x9dac>
   1ac90:	mov	r0, sl
   1ac94:	mov	fp, r2
   1ac98:	b	1aa80 <__assert_fail@plt+0x99b4>
   1ac9c:	umull	sl, fp, r6, ip
   1aca0:	mov	r3, r1
   1aca4:	mov	r2, fp
   1aca8:	umlal	r2, r3, r7, ip
   1acac:	cmp	r3, #0
   1acb0:	bne	1af3c <__assert_fail@plt+0x9e70>
   1acb4:	mov	r0, sl
   1acb8:	mov	fp, r2
   1acbc:	b	1a8a0 <__assert_fail@plt+0x97d4>
   1acc0:	umull	sl, fp, r6, ip
   1acc4:	mov	r3, r1
   1acc8:	mov	r2, fp
   1accc:	umlal	r2, r3, r7, ip
   1acd0:	cmp	r3, #0
   1acd4:	bne	1afc8 <__assert_fail@plt+0x9efc>
   1acd8:	mov	r0, sl
   1acdc:	mov	fp, r2
   1ace0:	b	1a96c <__assert_fail@plt+0x98a0>
   1ace4:	umull	sl, fp, r6, ip
   1ace8:	mov	r3, r1
   1acec:	mov	r2, fp
   1acf0:	strd	sl, [sp, #16]
   1acf4:	umlal	r2, r3, r7, ip
   1acf8:	cmp	r3, #0
   1acfc:	bne	1af70 <__assert_fail@plt+0x9ea4>
   1ad00:	mov	lr, r2
   1ad04:	b	1aa28 <__assert_fail@plt+0x995c>
   1ad08:	umull	sl, fp, r6, ip
   1ad0c:	mov	r3, r1
   1ad10:	mov	r2, fp
   1ad14:	umlal	r2, r3, r7, ip
   1ad18:	cmp	r3, #0
   1ad1c:	strd	r2, [sp, #16]
   1ad20:	bne	1b074 <__assert_fail@plt+0x9fa8>
   1ad24:	mov	r2, sl
   1ad28:	ldr	r3, [sp, #16]
   1ad2c:	b	1a9cc <__assert_fail@plt+0x9900>
   1ad30:	umull	sl, fp, r0, ip
   1ad34:	mov	r7, lr
   1ad38:	mov	r6, fp
   1ad3c:	umlal	r6, r7, r1, ip
   1ad40:	cmp	r7, #0
   1ad44:	bne	1b090 <__assert_fail@plt+0x9fc4>
   1ad48:	mov	r2, sl
   1ad4c:	mov	r3, r6
   1ad50:	b	1a734 <__assert_fail@plt+0x9668>
   1ad54:	umull	r6, r7, r2, ip
   1ad58:	mov	fp, r1
   1ad5c:	mov	sl, r7
   1ad60:	umlal	sl, fp, r3, ip
   1ad64:	cmp	fp, #0
   1ad68:	bne	1af04 <__assert_fail@plt+0x9e38>
   1ad6c:	mov	r0, r6
   1ad70:	mov	r1, sl
   1ad74:	b	1a718 <__assert_fail@plt+0x964c>
   1ad78:	umull	r0, r1, r6, ip
   1ad7c:	mov	r3, r7
   1ad80:	mov	r2, r1
   1ad84:	strd	r0, [sp, #16]
   1ad88:	umlal	r2, r3, lr, ip
   1ad8c:	cmp	r3, #0
   1ad90:	beq	1aa48 <__assert_fail@plt+0x997c>
   1ad94:	ldrd	sl, [sp]
   1ad98:	mov	r7, #1
   1ad9c:	ldr	r0, [sp, #16]
   1ada0:	ldr	r3, [sp, #20]
   1ada4:	mul	r2, r6, fp
   1ada8:	mla	r2, lr, sl, r2
   1adac:	add	r2, r2, r3
   1adb0:	b	1aa48 <__assert_fail@plt+0x997c>
   1adb4:	umull	sl, fp, r2, ip
   1adb8:	mov	r0, fp
   1adbc:	umlal	r0, r1, r3, ip
   1adc0:	cmp	r1, #0
   1adc4:	bne	1b0ac <__assert_fail@plt+0x9fe0>
   1adc8:	mov	r6, sl
   1adcc:	mov	lr, r0
   1add0:	b	1ab1c <__assert_fail@plt+0x9a50>
   1add4:	umull	r6, r7, r0, ip
   1add8:	mov	fp, lr
   1addc:	mov	sl, r7
   1ade0:	umlal	sl, fp, r1, ip
   1ade4:	cmp	fp, #0
   1ade8:	bne	1afe4 <__assert_fail@plt+0x9f18>
   1adec:	mov	r2, r6
   1adf0:	mov	r3, sl
   1adf4:	b	1a8f8 <__assert_fail@plt+0x982c>
   1adf8:	umull	r0, r1, sl, ip
   1adfc:	mov	r3, r7
   1ae00:	mov	r2, r1
   1ae04:	umlal	r2, r3, lr, ip
   1ae08:	cmp	r3, #0
   1ae0c:	beq	1aa48 <__assert_fail@plt+0x997c>
   1ae10:	ldr	r3, [sp, #4]
   1ae14:	mov	r7, #1
   1ae18:	mul	r2, sl, r3
   1ae1c:	ldr	r3, [sp]
   1ae20:	mla	r2, lr, r3, r2
   1ae24:	add	r2, r2, r1
   1ae28:	b	1aa48 <__assert_fail@plt+0x997c>
   1ae2c:	umull	r6, r7, r0, ip
   1ae30:	mov	r3, r1
   1ae34:	mov	r2, r7
   1ae38:	umlal	r2, r3, fp, ip
   1ae3c:	cmp	r3, #0
   1ae40:	strd	r2, [sp, #16]
   1ae44:	bne	1b0c8 <__assert_fail@plt+0x9ffc>
   1ae48:	mov	r2, r6
   1ae4c:	ldr	r3, [sp, #16]
   1ae50:	b	1a8c0 <__assert_fail@plt+0x97f4>
   1ae54:	umull	sl, fp, r2, ip
   1ae58:	mov	r7, lr
   1ae5c:	mov	r6, fp
   1ae60:	umlal	r6, r7, r3, ip
   1ae64:	cmp	r7, #0
   1ae68:	bne	1ae94 <__assert_fail@plt+0x9dc8>
   1ae6c:	mov	r0, sl
   1ae70:	mov	r1, r6
   1ae74:	b	1a8dc <__assert_fail@plt+0x9810>
   1ae78:	ldrd	r2, [sp]
   1ae7c:	mov	r0, sl
   1ae80:	mov	r1, #1
   1ae84:	mul	r6, r6, r3
   1ae88:	mla	r7, r2, r7, r6
   1ae8c:	add	fp, r7, fp
   1ae90:	b	1aa80 <__assert_fail@plt+0x99b4>
   1ae94:	ldrd	r6, [sp]
   1ae98:	mov	r0, sl
   1ae9c:	mov	lr, #1
   1aea0:	mul	r2, r2, r7
   1aea4:	mla	r1, r3, r6, r2
   1aea8:	add	r1, r1, fp
   1aeac:	b	1a8dc <__assert_fail@plt+0x9810>
   1aeb0:	ldrd	r0, [sp]
   1aeb4:	mov	r6, sl
   1aeb8:	mov	r7, #1
   1aebc:	mul	r2, r2, r1
   1aec0:	mla	lr, r3, r0, r2
   1aec4:	add	lr, lr, fp
   1aec8:	b	1a78c <__assert_fail@plt+0x96c0>
   1aecc:	ldm	sp, {r0, r3}
   1aed0:	mov	r2, sl
   1aed4:	mov	r1, #1
   1aed8:	mul	r3, r6, r3
   1aedc:	mla	r3, r0, r7, r3
   1aee0:	add	r3, r3, fp
   1aee4:	b	1a6f8 <__assert_fail@plt+0x962c>
   1aee8:	ldrd	r6, [sp]
   1aeec:	mov	r0, sl
   1aef0:	mov	lr, #1
   1aef4:	mul	r2, r2, r7
   1aef8:	mla	r1, r3, r6, r2
   1aefc:	add	r1, r1, fp
   1af00:	b	1a914 <__assert_fail@plt+0x9848>
   1af04:	ldrd	sl, [sp]
   1af08:	mov	r0, r6
   1af0c:	mov	lr, #1
   1af10:	mul	r2, r2, fp
   1af14:	mla	r1, r3, sl, r2
   1af18:	add	r1, r1, r7
   1af1c:	b	1a718 <__assert_fail@plt+0x964c>
   1af20:	ldm	sp, {r1, r3}
   1af24:	mov	r2, r6
   1af28:	mov	lr, #1
   1af2c:	mul	r3, r0, r3
   1af30:	mla	r3, fp, r1, r3
   1af34:	add	r3, r3, r7
   1af38:	b	1a76c <__assert_fail@plt+0x96a0>
   1af3c:	ldrd	r2, [sp]
   1af40:	mov	r0, sl
   1af44:	mov	r1, #1
   1af48:	mul	r6, r6, r3
   1af4c:	mla	r7, r2, r7, r6
   1af50:	add	fp, r7, fp
   1af54:	b	1a8a0 <__assert_fail@plt+0x97d4>
   1af58:	mul	r3, r6, r1
   1af5c:	mov	lr, #1
   1af60:	mov	r6, sl
   1af64:	mla	r7, ip, r7, r3
   1af68:	add	r7, r7, fp
   1af6c:	b	1a7f8 <__assert_fail@plt+0x972c>
   1af70:	ldrd	r2, [sp]
   1af74:	mov	r1, #1
   1af78:	ldr	sl, [sp, #16]
   1af7c:	mul	lr, r6, r3
   1af80:	ldr	r3, [sp, #20]
   1af84:	mla	lr, r2, r7, lr
   1af88:	add	lr, lr, r3
   1af8c:	b	1aa28 <__assert_fail@plt+0x995c>
   1af90:	ldm	sp, {r1, r3}
   1af94:	mov	r2, r6
   1af98:	mov	lr, #1
   1af9c:	mul	r3, r0, r3
   1afa0:	mla	r3, fp, r1, r3
   1afa4:	add	r3, r3, r7
   1afa8:	b	1a8f8 <__assert_fail@plt+0x982c>
   1afac:	ldm	sp, {r0, r3}
   1afb0:	mov	r2, sl
   1afb4:	mov	r1, #1
   1afb8:	mul	r3, r6, r3
   1afbc:	mla	r3, r0, r7, r3
   1afc0:	add	r3, r3, fp
   1afc4:	b	1aafc <__assert_fail@plt+0x9a30>
   1afc8:	ldrd	r2, [sp]
   1afcc:	mov	r0, sl
   1afd0:	mov	r1, #1
   1afd4:	mul	r6, r6, r3
   1afd8:	mla	r7, r2, r7, r6
   1afdc:	add	fp, r7, fp
   1afe0:	b	1a96c <__assert_fail@plt+0x98a0>
   1afe4:	ldrd	sl, [sp]
   1afe8:	mov	r2, r6
   1afec:	mov	lr, #1
   1aff0:	mul	r3, r0, fp
   1aff4:	mla	r3, r1, sl, r3
   1aff8:	add	r3, r3, r7
   1affc:	b	1a8f8 <__assert_fail@plt+0x982c>
   1b000:	ldrd	sl, [sp]
   1b004:	mov	r0, r6
   1b008:	mov	lr, #1
   1b00c:	mul	r2, r2, fp
   1b010:	mla	r1, r3, sl, r2
   1b014:	add	r1, r1, r7
   1b018:	b	1a750 <__assert_fail@plt+0x9684>
   1b01c:	movw	r3, #57328	; 0xdff0
   1b020:	movt	r3, #1
   1b024:	movw	r1, #57272	; 0xdfb8
   1b028:	movt	r1, #1
   1b02c:	movw	r0, #57288	; 0xdfc8
   1b030:	movt	r0, #1
   1b034:	mov	r2, #85	; 0x55
   1b038:	bl	110cc <__assert_fail@plt>
   1b03c:	ldrd	sl, [sp]
   1b040:	mov	r2, r6
   1b044:	mov	lr, #1
   1b048:	mul	r3, r0, fp
   1b04c:	mla	r3, r1, sl, r3
   1b050:	add	r3, r3, r7
   1b054:	b	1a76c <__assert_fail@plt+0x96a0>
   1b058:	ldrd	r6, [sp]
   1b05c:	mov	r2, sl
   1b060:	mov	lr, #1
   1b064:	mul	r3, r0, r7
   1b068:	mla	r3, r1, r6, r3
   1b06c:	add	r3, r3, fp
   1b070:	b	1a76c <__assert_fail@plt+0x96a0>
   1b074:	ldm	sp, {r0, r3}
   1b078:	mov	r2, sl
   1b07c:	mov	r1, #1
   1b080:	mul	r3, r6, r3
   1b084:	mla	r3, r0, r7, r3
   1b088:	add	r3, r3, fp
   1b08c:	b	1a9cc <__assert_fail@plt+0x9900>
   1b090:	ldrd	r6, [sp]
   1b094:	mov	r2, sl
   1b098:	mov	lr, #1
   1b09c:	mul	r3, r0, r7
   1b0a0:	mla	r3, r1, r6, r3
   1b0a4:	add	r3, r3, fp
   1b0a8:	b	1a734 <__assert_fail@plt+0x9668>
   1b0ac:	ldrd	r0, [sp]
   1b0b0:	mov	r6, sl
   1b0b4:	mov	r7, #1
   1b0b8:	mul	r2, r2, r1
   1b0bc:	mla	lr, r3, r0, r2
   1b0c0:	add	lr, lr, fp
   1b0c4:	b	1ab1c <__assert_fail@plt+0x9a50>
   1b0c8:	ldm	sp, {r1, r3}
   1b0cc:	mov	r2, r6
   1b0d0:	mov	lr, #1
   1b0d4:	mul	r3, r0, r3
   1b0d8:	mla	r3, fp, r1, r3
   1b0dc:	add	r3, r3, r7
   1b0e0:	b	1a8c0 <__assert_fail@plt+0x97f4>
   1b0e4:	cmp	r1, #0
   1b0e8:	cmpne	r0, #0
   1b0ec:	beq	1b138 <__assert_fail@plt+0xa06c>
   1b0f0:	strd	r4, [sp, #-16]!
   1b0f4:	umull	r4, r5, r0, r1
   1b0f8:	str	r6, [sp, #8]
   1b0fc:	str	lr, [sp, #12]
   1b100:	adds	r3, r5, #0
   1b104:	movne	r3, #1
   1b108:	cmp	r4, #0
   1b10c:	blt	1b118 <__assert_fail@plt+0xa04c>
   1b110:	cmp	r3, #0
   1b114:	beq	1b144 <__assert_fail@plt+0xa078>
   1b118:	bl	10fd0 <__errno_location@plt>
   1b11c:	mov	r3, #12
   1b120:	ldrd	r4, [sp]
   1b124:	ldr	r6, [sp, #8]
   1b128:	add	sp, sp, #12
   1b12c:	str	r3, [r0]
   1b130:	mov	r0, #0
   1b134:	pop	{pc}		; (ldr pc, [sp], #4)
   1b138:	mov	r1, #1
   1b13c:	mov	r0, r1
   1b140:	b	10e14 <calloc@plt>
   1b144:	ldrd	r4, [sp]
   1b148:	ldr	r6, [sp, #8]
   1b14c:	ldr	lr, [sp, #12]
   1b150:	add	sp, sp, #16
   1b154:	b	10e14 <calloc@plt>
   1b158:	cmp	r0, #0
   1b15c:	beq	1b168 <__assert_fail@plt+0xa09c>
   1b160:	blt	1b170 <__assert_fail@plt+0xa0a4>
   1b164:	b	10f58 <malloc@plt>
   1b168:	mov	r0, #1
   1b16c:	b	10f58 <malloc@plt>
   1b170:	str	r4, [sp, #-8]!
   1b174:	str	lr, [sp, #4]
   1b178:	bl	10fd0 <__errno_location@plt>
   1b17c:	mov	r3, #12
   1b180:	ldr	r4, [sp]
   1b184:	add	sp, sp, #4
   1b188:	str	r3, [r0]
   1b18c:	mov	r0, #0
   1b190:	pop	{pc}		; (ldr pc, [sp], #4)
   1b194:	cmp	r0, #0
   1b198:	beq	1b1c0 <__assert_fail@plt+0xa0f4>
   1b19c:	cmp	r1, #0
   1b1a0:	str	r4, [sp, #-8]!
   1b1a4:	str	lr, [sp, #4]
   1b1a8:	beq	1b1c8 <__assert_fail@plt+0xa0fc>
   1b1ac:	blt	1b1dc <__assert_fail@plt+0xa110>
   1b1b0:	ldr	r4, [sp]
   1b1b4:	ldr	lr, [sp, #4]
   1b1b8:	add	sp, sp, #8
   1b1bc:	b	10ed4 <realloc@plt>
   1b1c0:	mov	r0, r1
   1b1c4:	b	1b158 <__assert_fail@plt+0xa08c>
   1b1c8:	bl	14c68 <__assert_fail@plt+0x3b9c>
   1b1cc:	ldr	r4, [sp]
   1b1d0:	add	sp, sp, #4
   1b1d4:	mov	r0, #0
   1b1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1dc:	bl	10fd0 <__errno_location@plt>
   1b1e0:	mov	r3, #12
   1b1e4:	str	r3, [r0]
   1b1e8:	b	1b1cc <__assert_fail@plt+0xa100>
   1b1ec:	strd	r4, [sp, #-16]!
   1b1f0:	mov	r4, r0
   1b1f4:	str	r6, [sp, #8]
   1b1f8:	str	lr, [sp, #12]
   1b1fc:	bl	10f28 <__fpending@plt>
   1b200:	ldr	r5, [r4]
   1b204:	mov	r6, r0
   1b208:	mov	r0, r4
   1b20c:	bl	1b274 <__assert_fail@plt+0xa1a8>
   1b210:	mov	r4, r0
   1b214:	and	r5, r5, #32
   1b218:	cmp	r5, #0
   1b21c:	bne	1b254 <__assert_fail@plt+0xa188>
   1b220:	cmp	r0, #0
   1b224:	beq	1b240 <__assert_fail@plt+0xa174>
   1b228:	cmp	r6, #0
   1b22c:	bne	1b26c <__assert_fail@plt+0xa1a0>
   1b230:	bl	10fd0 <__errno_location@plt>
   1b234:	ldr	r4, [r0]
   1b238:	subs	r4, r4, #9
   1b23c:	mvnne	r4, #0
   1b240:	mov	r0, r4
   1b244:	ldrd	r4, [sp]
   1b248:	ldr	r6, [sp, #8]
   1b24c:	add	sp, sp, #12
   1b250:	pop	{pc}		; (ldr pc, [sp], #4)
   1b254:	cmp	r0, #0
   1b258:	bne	1b26c <__assert_fail@plt+0xa1a0>
   1b25c:	bl	10fd0 <__errno_location@plt>
   1b260:	str	r4, [r0]
   1b264:	mvn	r4, #0
   1b268:	b	1b240 <__assert_fail@plt+0xa174>
   1b26c:	mvn	r4, #0
   1b270:	b	1b240 <__assert_fail@plt+0xa174>
   1b274:	strd	r4, [sp, #-12]!
   1b278:	mov	r4, r0
   1b27c:	str	lr, [sp, #8]
   1b280:	sub	sp, sp, #12
   1b284:	bl	11000 <fileno@plt>
   1b288:	cmp	r0, #0
   1b28c:	mov	r0, r4
   1b290:	blt	1b314 <__assert_fail@plt+0xa248>
   1b294:	bl	10f70 <__freading@plt>
   1b298:	cmp	r0, #0
   1b29c:	bne	1b2e0 <__assert_fail@plt+0xa214>
   1b2a0:	mov	r0, r4
   1b2a4:	bl	1b328 <__assert_fail@plt+0xa25c>
   1b2a8:	cmp	r0, #0
   1b2ac:	beq	1b310 <__assert_fail@plt+0xa244>
   1b2b0:	bl	10fd0 <__errno_location@plt>
   1b2b4:	mov	r5, r0
   1b2b8:	mov	r0, r4
   1b2bc:	ldr	r4, [r5]
   1b2c0:	bl	11018 <fclose@plt>
   1b2c4:	cmp	r4, #0
   1b2c8:	mvnne	r0, #0
   1b2cc:	strne	r4, [r5]
   1b2d0:	add	sp, sp, #12
   1b2d4:	ldrd	r4, [sp]
   1b2d8:	add	sp, sp, #8
   1b2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2e0:	mov	r0, r4
   1b2e4:	bl	11000 <fileno@plt>
   1b2e8:	mov	r1, #1
   1b2ec:	mov	r2, #0
   1b2f0:	mov	r3, #0
   1b2f4:	str	r1, [sp]
   1b2f8:	bl	10f04 <lseek64@plt>
   1b2fc:	mvn	r3, #0
   1b300:	mvn	r2, #0
   1b304:	cmp	r1, r3
   1b308:	cmpeq	r0, r2
   1b30c:	bne	1b2a0 <__assert_fail@plt+0xa1d4>
   1b310:	mov	r0, r4
   1b314:	add	sp, sp, #12
   1b318:	ldrd	r4, [sp]
   1b31c:	ldr	lr, [sp, #8]
   1b320:	add	sp, sp, #12
   1b324:	b	11018 <fclose@plt>
   1b328:	str	r4, [sp, #-8]!
   1b32c:	subs	r4, r0, #0
   1b330:	str	lr, [sp, #4]
   1b334:	sub	sp, sp, #8
   1b338:	beq	1b354 <__assert_fail@plt+0xa288>
   1b33c:	bl	10f70 <__freading@plt>
   1b340:	cmp	r0, #0
   1b344:	beq	1b354 <__assert_fail@plt+0xa288>
   1b348:	ldr	r3, [r4]
   1b34c:	tst	r3, #256	; 0x100
   1b350:	bne	1b36c <__assert_fail@plt+0xa2a0>
   1b354:	mov	r0, r4
   1b358:	add	sp, sp, #8
   1b35c:	ldr	r4, [sp]
   1b360:	ldr	lr, [sp, #4]
   1b364:	add	sp, sp, #8
   1b368:	b	10e50 <fflush@plt>
   1b36c:	mov	r1, #1
   1b370:	mov	r2, #0
   1b374:	mov	r3, #0
   1b378:	mov	r0, r4
   1b37c:	str	r1, [sp]
   1b380:	bl	1b388 <__assert_fail@plt+0xa2bc>
   1b384:	b	1b354 <__assert_fail@plt+0xa288>
   1b388:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b38c:	mov	r4, r0
   1b390:	ldr	ip, [r0, #4]
   1b394:	strd	r6, [sp, #8]
   1b398:	str	lr, [sp, #20]
   1b39c:	ldr	lr, [r0, #8]
   1b3a0:	str	r8, [sp, #16]
   1b3a4:	sub	sp, sp, #8
   1b3a8:	ldr	r5, [sp, #32]
   1b3ac:	cmp	lr, ip
   1b3b0:	beq	1b3d8 <__assert_fail@plt+0xa30c>
   1b3b4:	mov	r0, r4
   1b3b8:	str	r5, [sp, #32]
   1b3bc:	add	sp, sp, #8
   1b3c0:	ldrd	r4, [sp]
   1b3c4:	ldrd	r6, [sp, #8]
   1b3c8:	ldr	r8, [sp, #16]
   1b3cc:	ldr	lr, [sp, #20]
   1b3d0:	add	sp, sp, #24
   1b3d4:	b	11024 <fseeko64@plt>
   1b3d8:	ldr	ip, [r0, #16]
   1b3dc:	ldr	lr, [r0, #20]
   1b3e0:	cmp	lr, ip
   1b3e4:	bne	1b3b4 <__assert_fail@plt+0xa2e8>
   1b3e8:	ldr	r8, [r0, #36]	; 0x24
   1b3ec:	cmp	r8, #0
   1b3f0:	bne	1b3b4 <__assert_fail@plt+0xa2e8>
   1b3f4:	mov	r6, r2
   1b3f8:	mov	r7, r3
   1b3fc:	bl	11000 <fileno@plt>
   1b400:	mov	r2, r6
   1b404:	mov	r3, r7
   1b408:	str	r5, [sp]
   1b40c:	bl	10f04 <lseek64@plt>
   1b410:	mvn	r3, #0
   1b414:	mvn	r2, #0
   1b418:	cmp	r1, r3
   1b41c:	cmpeq	r0, r2
   1b420:	beq	1b450 <__assert_fail@plt+0xa384>
   1b424:	ldr	r3, [r4]
   1b428:	strd	r0, [r4, #80]	; 0x50
   1b42c:	bic	r3, r3, #16
   1b430:	str	r3, [r4]
   1b434:	mov	r0, r8
   1b438:	add	sp, sp, #8
   1b43c:	ldrd	r4, [sp]
   1b440:	ldrd	r6, [sp, #8]
   1b444:	ldr	r8, [sp, #16]
   1b448:	add	sp, sp, #20
   1b44c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b450:	mvn	r8, #0
   1b454:	b	1b434 <__assert_fail@plt+0xa368>
   1b458:	mov	r0, #14
   1b45c:	str	r4, [sp, #-8]!
   1b460:	str	lr, [sp, #4]
   1b464:	bl	11060 <nl_langinfo@plt>
   1b468:	cmp	r0, #0
   1b46c:	beq	1b490 <__assert_fail@plt+0xa3c4>
   1b470:	ldrb	r2, [r0]
   1b474:	movw	r3, #57340	; 0xdffc
   1b478:	movt	r3, #1
   1b47c:	ldr	r4, [sp]
   1b480:	add	sp, sp, #4
   1b484:	cmp	r2, #0
   1b488:	moveq	r0, r3
   1b48c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b490:	ldr	r4, [sp]
   1b494:	add	sp, sp, #4
   1b498:	movw	r0, #57340	; 0xdffc
   1b49c:	movt	r0, #1
   1b4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b4a8:	mov	r5, r2
   1b4ac:	strd	r6, [sp, #8]
   1b4b0:	subs	r6, r0, #0
   1b4b4:	mov	r7, r1
   1b4b8:	str	lr, [sp, #16]
   1b4bc:	sub	sp, sp, #12
   1b4c0:	addeq	r6, sp, #4
   1b4c4:	mov	r0, r6
   1b4c8:	bl	10f34 <mbrtowc@plt>
   1b4cc:	cmp	r5, #0
   1b4d0:	cmnne	r0, #3
   1b4d4:	mov	r4, r0
   1b4d8:	bhi	1b4f4 <__assert_fail@plt+0xa428>
   1b4dc:	mov	r0, r4
   1b4e0:	add	sp, sp, #12
   1b4e4:	ldrd	r4, [sp]
   1b4e8:	ldrd	r6, [sp, #8]
   1b4ec:	add	sp, sp, #16
   1b4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4f4:	mov	r0, #0
   1b4f8:	bl	1b54c <__assert_fail@plt+0xa480>
   1b4fc:	cmp	r0, #0
   1b500:	bne	1b4dc <__assert_fail@plt+0xa410>
   1b504:	ldrb	r3, [r7]
   1b508:	mov	r4, #1
   1b50c:	str	r3, [r6]
   1b510:	b	1b4dc <__assert_fail@plt+0xa410>
   1b514:	umull	r2, r3, r1, r2
   1b518:	cmp	r3, #0
   1b51c:	bne	1b528 <__assert_fail@plt+0xa45c>
   1b520:	mov	r1, r2
   1b524:	b	1b194 <__assert_fail@plt+0xa0c8>
   1b528:	str	r4, [sp, #-8]!
   1b52c:	str	lr, [sp, #4]
   1b530:	bl	10fd0 <__errno_location@plt>
   1b534:	mov	r3, #12
   1b538:	ldr	r4, [sp]
   1b53c:	add	sp, sp, #4
   1b540:	str	r3, [r0]
   1b544:	mov	r0, #0
   1b548:	pop	{pc}		; (ldr pc, [sp], #4)
   1b54c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b550:	sub	sp, sp, #268	; 0x10c
   1b554:	movw	r2, #257	; 0x101
   1b558:	add	r1, sp, #4
   1b55c:	bl	1b5a4 <__assert_fail@plt+0xa4d8>
   1b560:	cmp	r0, #0
   1b564:	movne	r0, #0
   1b568:	bne	1b59c <__assert_fail@plt+0xa4d0>
   1b56c:	movw	r1, #57348	; 0xe004
   1b570:	movt	r1, #1
   1b574:	add	r0, sp, #4
   1b578:	bl	10e38 <strcmp@plt>
   1b57c:	cmp	r0, #0
   1b580:	beq	1b59c <__assert_fail@plt+0xa4d0>
   1b584:	add	r0, sp, #4
   1b588:	movw	r1, #57352	; 0xe008
   1b58c:	movt	r1, #1
   1b590:	bl	10e38 <strcmp@plt>
   1b594:	adds	r0, r0, #0
   1b598:	movne	r0, #1
   1b59c:	add	sp, sp, #268	; 0x10c
   1b5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5a4:	strd	r4, [sp, #-16]!
   1b5a8:	mov	r5, r1
   1b5ac:	mov	r1, #0
   1b5b0:	mov	r4, r2
   1b5b4:	str	r6, [sp, #8]
   1b5b8:	str	lr, [sp, #12]
   1b5bc:	bl	1103c <setlocale@plt>
   1b5c0:	subs	r6, r0, #0
   1b5c4:	beq	1b644 <__assert_fail@plt+0xa578>
   1b5c8:	bl	10fb8 <strlen@plt>
   1b5cc:	cmp	r4, r0
   1b5d0:	bhi	1b5f0 <__assert_fail@plt+0xa524>
   1b5d4:	cmp	r4, #0
   1b5d8:	moveq	r0, #34	; 0x22
   1b5dc:	bne	1b614 <__assert_fail@plt+0xa548>
   1b5e0:	ldrd	r4, [sp]
   1b5e4:	ldr	r6, [sp, #8]
   1b5e8:	add	sp, sp, #12
   1b5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5f0:	add	r2, r0, #1
   1b5f4:	mov	r1, r6
   1b5f8:	mov	r0, r5
   1b5fc:	bl	10e8c <memcpy@plt>
   1b600:	ldrd	r4, [sp]
   1b604:	mov	r0, #0
   1b608:	ldr	r6, [sp, #8]
   1b60c:	add	sp, sp, #12
   1b610:	pop	{pc}		; (ldr pc, [sp], #4)
   1b614:	sub	r4, r4, #1
   1b618:	mov	r1, r6
   1b61c:	mov	r2, r4
   1b620:	mov	r0, r5
   1b624:	bl	10e8c <memcpy@plt>
   1b628:	mov	r3, #0
   1b62c:	mov	r0, #34	; 0x22
   1b630:	strb	r3, [r5, r4]
   1b634:	ldrd	r4, [sp]
   1b638:	ldr	r6, [sp, #8]
   1b63c:	add	sp, sp, #12
   1b640:	pop	{pc}		; (ldr pc, [sp], #4)
   1b644:	cmp	r4, #0
   1b648:	mov	r0, #22
   1b64c:	strbne	r6, [r5]
   1b650:	ldrd	r4, [sp]
   1b654:	ldr	r6, [sp, #8]
   1b658:	add	sp, sp, #12
   1b65c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b660:	mov	r1, #0
   1b664:	b	1103c <setlocale@plt>
   1b668:	eor	r1, r1, #-2147483648	; 0x80000000
   1b66c:	b	1b674 <__assert_fail@plt+0xa5a8>
   1b670:	eor	r3, r3, #-2147483648	; 0x80000000
   1b674:	push	{r4, r5, lr}
   1b678:	lsl	r4, r1, #1
   1b67c:	lsl	r5, r3, #1
   1b680:	teq	r4, r5
   1b684:	teqeq	r0, r2
   1b688:	orrsne	ip, r4, r0
   1b68c:	orrsne	ip, r5, r2
   1b690:	mvnsne	ip, r4, asr #21
   1b694:	mvnsne	ip, r5, asr #21
   1b698:	beq	1b884 <__assert_fail@plt+0xa7b8>
   1b69c:	lsr	r4, r4, #21
   1b6a0:	rsbs	r5, r4, r5, lsr #21
   1b6a4:	rsblt	r5, r5, #0
   1b6a8:	ble	1b6c8 <__assert_fail@plt+0xa5fc>
   1b6ac:	add	r4, r4, r5
   1b6b0:	eor	r2, r0, r2
   1b6b4:	eor	r3, r1, r3
   1b6b8:	eor	r0, r2, r0
   1b6bc:	eor	r1, r3, r1
   1b6c0:	eor	r2, r0, r2
   1b6c4:	eor	r3, r1, r3
   1b6c8:	cmp	r5, #54	; 0x36
   1b6cc:	pophi	{r4, r5, pc}
   1b6d0:	tst	r1, #-2147483648	; 0x80000000
   1b6d4:	lsl	r1, r1, #12
   1b6d8:	mov	ip, #1048576	; 0x100000
   1b6dc:	orr	r1, ip, r1, lsr #12
   1b6e0:	beq	1b6ec <__assert_fail@plt+0xa620>
   1b6e4:	rsbs	r0, r0, #0
   1b6e8:	rsc	r1, r1, #0
   1b6ec:	tst	r3, #-2147483648	; 0x80000000
   1b6f0:	lsl	r3, r3, #12
   1b6f4:	orr	r3, ip, r3, lsr #12
   1b6f8:	beq	1b704 <__assert_fail@plt+0xa638>
   1b6fc:	rsbs	r2, r2, #0
   1b700:	rsc	r3, r3, #0
   1b704:	teq	r4, r5
   1b708:	beq	1b86c <__assert_fail@plt+0xa7a0>
   1b70c:	sub	r4, r4, #1
   1b710:	rsbs	lr, r5, #32
   1b714:	blt	1b730 <__assert_fail@plt+0xa664>
   1b718:	lsl	ip, r2, lr
   1b71c:	adds	r0, r0, r2, lsr r5
   1b720:	adc	r1, r1, #0
   1b724:	adds	r0, r0, r3, lsl lr
   1b728:	adcs	r1, r1, r3, asr r5
   1b72c:	b	1b74c <__assert_fail@plt+0xa680>
   1b730:	sub	r5, r5, #32
   1b734:	add	lr, lr, #32
   1b738:	cmp	r2, #1
   1b73c:	lsl	ip, r3, lr
   1b740:	orrcs	ip, ip, #2
   1b744:	adds	r0, r0, r3, asr r5
   1b748:	adcs	r1, r1, r3, asr #31
   1b74c:	and	r5, r1, #-2147483648	; 0x80000000
   1b750:	bpl	1b760 <__assert_fail@plt+0xa694>
   1b754:	rsbs	ip, ip, #0
   1b758:	rscs	r0, r0, #0
   1b75c:	rsc	r1, r1, #0
   1b760:	cmp	r1, #1048576	; 0x100000
   1b764:	bcc	1b7a4 <__assert_fail@plt+0xa6d8>
   1b768:	cmp	r1, #2097152	; 0x200000
   1b76c:	bcc	1b78c <__assert_fail@plt+0xa6c0>
   1b770:	lsrs	r1, r1, #1
   1b774:	rrxs	r0, r0
   1b778:	rrx	ip, ip
   1b77c:	add	r4, r4, #1
   1b780:	lsl	r2, r4, #21
   1b784:	cmn	r2, #4194304	; 0x400000
   1b788:	bcs	1b8e4 <__assert_fail@plt+0xa818>
   1b78c:	cmp	ip, #-2147483648	; 0x80000000
   1b790:	lsrseq	ip, r0, #1
   1b794:	adcs	r0, r0, #0
   1b798:	adc	r1, r1, r4, lsl #20
   1b79c:	orr	r1, r1, r5
   1b7a0:	pop	{r4, r5, pc}
   1b7a4:	lsls	ip, ip, #1
   1b7a8:	adcs	r0, r0, r0
   1b7ac:	adc	r1, r1, r1
   1b7b0:	tst	r1, #1048576	; 0x100000
   1b7b4:	sub	r4, r4, #1
   1b7b8:	bne	1b78c <__assert_fail@plt+0xa6c0>
   1b7bc:	teq	r1, #0
   1b7c0:	moveq	r1, r0
   1b7c4:	moveq	r0, #0
   1b7c8:	clz	r3, r1
   1b7cc:	addeq	r3, r3, #32
   1b7d0:	sub	r3, r3, #11
   1b7d4:	subs	r2, r3, #32
   1b7d8:	bge	1b7fc <__assert_fail@plt+0xa730>
   1b7dc:	adds	r2, r2, #12
   1b7e0:	ble	1b7f8 <__assert_fail@plt+0xa72c>
   1b7e4:	add	ip, r2, #20
   1b7e8:	rsb	r2, r2, #12
   1b7ec:	lsl	r0, r1, ip
   1b7f0:	lsr	r1, r1, r2
   1b7f4:	b	1b80c <__assert_fail@plt+0xa740>
   1b7f8:	add	r2, r2, #20
   1b7fc:	rsble	ip, r2, #32
   1b800:	lsl	r1, r1, r2
   1b804:	orrle	r1, r1, r0, lsr ip
   1b808:	lslle	r0, r0, r2
   1b80c:	subs	r4, r4, r3
   1b810:	addge	r1, r1, r4, lsl #20
   1b814:	orrge	r1, r1, r5
   1b818:	popge	{r4, r5, pc}
   1b81c:	mvn	r4, r4
   1b820:	subs	r4, r4, #31
   1b824:	bge	1b860 <__assert_fail@plt+0xa794>
   1b828:	adds	r4, r4, #12
   1b82c:	bgt	1b848 <__assert_fail@plt+0xa77c>
   1b830:	add	r4, r4, #20
   1b834:	rsb	r2, r4, #32
   1b838:	lsr	r0, r0, r4
   1b83c:	orr	r0, r0, r1, lsl r2
   1b840:	orr	r1, r5, r1, lsr r4
   1b844:	pop	{r4, r5, pc}
   1b848:	rsb	r4, r4, #12
   1b84c:	rsb	r2, r4, #32
   1b850:	lsr	r0, r0, r2
   1b854:	orr	r0, r0, r1, lsl r4
   1b858:	mov	r1, r5
   1b85c:	pop	{r4, r5, pc}
   1b860:	lsr	r0, r1, r4
   1b864:	mov	r1, r5
   1b868:	pop	{r4, r5, pc}
   1b86c:	teq	r4, #0
   1b870:	eor	r3, r3, #1048576	; 0x100000
   1b874:	eoreq	r1, r1, #1048576	; 0x100000
   1b878:	addeq	r4, r4, #1
   1b87c:	subne	r5, r5, #1
   1b880:	b	1b70c <__assert_fail@plt+0xa640>
   1b884:	mvns	ip, r4, asr #21
   1b888:	mvnsne	ip, r5, asr #21
   1b88c:	beq	1b8f4 <__assert_fail@plt+0xa828>
   1b890:	teq	r4, r5
   1b894:	teqeq	r0, r2
   1b898:	beq	1b8ac <__assert_fail@plt+0xa7e0>
   1b89c:	orrs	ip, r4, r0
   1b8a0:	moveq	r1, r3
   1b8a4:	moveq	r0, r2
   1b8a8:	pop	{r4, r5, pc}
   1b8ac:	teq	r1, r3
   1b8b0:	movne	r1, #0
   1b8b4:	movne	r0, #0
   1b8b8:	popne	{r4, r5, pc}
   1b8bc:	lsrs	ip, r4, #21
   1b8c0:	bne	1b8d4 <__assert_fail@plt+0xa808>
   1b8c4:	lsls	r0, r0, #1
   1b8c8:	adcs	r1, r1, r1
   1b8cc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1b8d0:	pop	{r4, r5, pc}
   1b8d4:	adds	r4, r4, #4194304	; 0x400000
   1b8d8:	addcc	r1, r1, #1048576	; 0x100000
   1b8dc:	popcc	{r4, r5, pc}
   1b8e0:	and	r5, r1, #-2147483648	; 0x80000000
   1b8e4:	orr	r1, r5, #2130706432	; 0x7f000000
   1b8e8:	orr	r1, r1, #15728640	; 0xf00000
   1b8ec:	mov	r0, #0
   1b8f0:	pop	{r4, r5, pc}
   1b8f4:	mvns	ip, r4, asr #21
   1b8f8:	movne	r1, r3
   1b8fc:	movne	r0, r2
   1b900:	mvnseq	ip, r5, asr #21
   1b904:	movne	r3, r1
   1b908:	movne	r2, r0
   1b90c:	orrs	r4, r0, r1, lsl #12
   1b910:	orrseq	r5, r2, r3, lsl #12
   1b914:	teqeq	r1, r3
   1b918:	orrne	r1, r1, #524288	; 0x80000
   1b91c:	pop	{r4, r5, pc}
   1b920:	teq	r0, #0
   1b924:	moveq	r1, #0
   1b928:	bxeq	lr
   1b92c:	push	{r4, r5, lr}
   1b930:	mov	r4, #1024	; 0x400
   1b934:	add	r4, r4, #50	; 0x32
   1b938:	mov	r5, #0
   1b93c:	mov	r1, #0
   1b940:	b	1b7bc <__assert_fail@plt+0xa6f0>
   1b944:	teq	r0, #0
   1b948:	moveq	r1, #0
   1b94c:	bxeq	lr
   1b950:	push	{r4, r5, lr}
   1b954:	mov	r4, #1024	; 0x400
   1b958:	add	r4, r4, #50	; 0x32
   1b95c:	ands	r5, r0, #-2147483648	; 0x80000000
   1b960:	rsbmi	r0, r0, #0
   1b964:	mov	r1, #0
   1b968:	b	1b7bc <__assert_fail@plt+0xa6f0>
   1b96c:	lsls	r2, r0, #1
   1b970:	asr	r1, r2, #3
   1b974:	rrx	r1, r1
   1b978:	lsl	r0, r2, #28
   1b97c:	andsne	r3, r2, #-16777216	; 0xff000000
   1b980:	teqne	r3, #-16777216	; 0xff000000
   1b984:	eorne	r1, r1, #939524096	; 0x38000000
   1b988:	bxne	lr
   1b98c:	bics	r2, r2, #-16777216	; 0xff000000
   1b990:	bxeq	lr
   1b994:	teq	r3, #-16777216	; 0xff000000
   1b998:	orreq	r1, r1, #524288	; 0x80000
   1b99c:	bxeq	lr
   1b9a0:	push	{r4, r5, lr}
   1b9a4:	mov	r4, #896	; 0x380
   1b9a8:	and	r5, r1, #-2147483648	; 0x80000000
   1b9ac:	bic	r1, r1, #-2147483648	; 0x80000000
   1b9b0:	b	1b7bc <__assert_fail@plt+0xa6f0>
   1b9b4:	orrs	r2, r0, r1
   1b9b8:	bxeq	lr
   1b9bc:	push	{r4, r5, lr}
   1b9c0:	mov	r5, #0
   1b9c4:	b	1b9e4 <__assert_fail@plt+0xa918>
   1b9c8:	orrs	r2, r0, r1
   1b9cc:	bxeq	lr
   1b9d0:	push	{r4, r5, lr}
   1b9d4:	ands	r5, r1, #-2147483648	; 0x80000000
   1b9d8:	bpl	1b9e4 <__assert_fail@plt+0xa918>
   1b9dc:	rsbs	r0, r0, #0
   1b9e0:	rsc	r1, r1, #0
   1b9e4:	mov	r4, #1024	; 0x400
   1b9e8:	add	r4, r4, #50	; 0x32
   1b9ec:	lsrs	ip, r1, #22
   1b9f0:	beq	1b760 <__assert_fail@plt+0xa694>
   1b9f4:	mov	r2, #3
   1b9f8:	lsrs	ip, ip, #3
   1b9fc:	addne	r2, r2, #3
   1ba00:	lsrs	ip, ip, #3
   1ba04:	addne	r2, r2, #3
   1ba08:	add	r2, r2, ip, lsr #3
   1ba0c:	rsb	r3, r2, #32
   1ba10:	lsl	ip, r0, r3
   1ba14:	lsr	r0, r0, r2
   1ba18:	orr	r0, r0, r1, lsl r3
   1ba1c:	lsr	r1, r1, r2
   1ba20:	add	r4, r4, r2
   1ba24:	b	1b760 <__assert_fail@plt+0xa694>
   1ba28:	vmov	d7, r0, r1
   1ba2c:	vcmpe.f64	d7, #0.0
   1ba30:	vmrs	APSR_nzcv, fpscr
   1ba34:	bmi	1ba3c <__assert_fail@plt+0xa970>
   1ba38:	b	1ba58 <__assert_fail@plt+0xa98c>
   1ba3c:	push	{r4, lr}
   1ba40:	eor	r1, r1, #-2147483648	; 0x80000000
   1ba44:	bl	1ba58 <__assert_fail@plt+0xa98c>
   1ba48:	rsbs	r0, r0, #0
   1ba4c:	rsc	r1, r1, #0
   1ba50:	pop	{r4, pc}
   1ba54:	andeq	r0, r0, r0
   1ba58:	vmov	d6, r0, r1
   1ba5c:	vldr	d7, [pc, #36]	; 1ba88 <__assert_fail@plt+0xa9bc>
   1ba60:	vldr	d5, [pc, #40]	; 1ba90 <__assert_fail@plt+0xa9c4>
   1ba64:	vmul.f64	d7, d6, d7
   1ba68:	vcvt.u32.f64	s14, d7
   1ba6c:	vcvt.f64.u32	d4, s14
   1ba70:	vmov	r1, s14
   1ba74:	vmls.f64	d6, d4, d5
   1ba78:	vcvt.u32.f64	s15, d6
   1ba7c:	vmov	r0, s15
   1ba80:	bx	lr
   1ba84:	nop			; (mov r0, r0)
   1ba88:	andeq	r0, r0, r0
   1ba8c:	ldclcc	0, cr0, [r0]
   1ba90:	andeq	r0, r0, r0
   1ba94:	mvnsmi	r0, r0
   1ba98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ba9c:	mov	r7, r0
   1baa0:	ldr	r6, [pc, #72]	; 1baf0 <__assert_fail@plt+0xaa24>
   1baa4:	ldr	r5, [pc, #72]	; 1baf4 <__assert_fail@plt+0xaa28>
   1baa8:	add	r6, pc, r6
   1baac:	add	r5, pc, r5
   1bab0:	sub	r6, r6, r5
   1bab4:	mov	r8, r1
   1bab8:	mov	r9, r2
   1babc:	bl	10df4 <calloc@plt-0x20>
   1bac0:	asrs	r6, r6, #2
   1bac4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bac8:	mov	r4, #0
   1bacc:	add	r4, r4, #1
   1bad0:	ldr	r3, [r5], #4
   1bad4:	mov	r2, r9
   1bad8:	mov	r1, r8
   1badc:	mov	r0, r7
   1bae0:	blx	r3
   1bae4:	cmp	r6, r4
   1bae8:	bne	1bacc <__assert_fail@plt+0xaa00>
   1baec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1baf0:	andeq	r3, r1, r4, ror #8
   1baf4:	andeq	r3, r1, ip, asr r4
   1baf8:	bx	lr
   1bafc:	ldr	r3, [pc, #12]	; 1bb10 <__assert_fail@plt+0xaa44>
   1bb00:	mov	r1, #0
   1bb04:	add	r3, pc, r3
   1bb08:	ldr	r2, [r3]
   1bb0c:	b	10fdc <__cxa_atexit@plt>
   1bb10:	strdeq	r3, [r1], -r8

Disassembly of section .fini:

0001bb14 <.fini>:
   1bb14:	push	{r3, lr}
   1bb18:	pop	{r3, pc}
