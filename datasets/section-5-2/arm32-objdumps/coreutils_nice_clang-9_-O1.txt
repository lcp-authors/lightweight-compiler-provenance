
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010d20 <.init>:
   10d20:	push	{r3, lr}
   10d24:	bl	10fbc <__assert_fail@plt+0x48>
   10d28:	pop	{r3, pc}

Disassembly of section .plt:

00010d2c <calloc@plt-0x14>:
   10d2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d30:	ldr	lr, [pc, #4]	; 10d3c <calloc@plt-0x4>
   10d34:	add	lr, pc, lr
   10d38:	ldr	pc, [lr, #8]!
   10d3c:	andeq	r5, r1, r4, asr #5

00010d40 <calloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #708]!	; 0x2c4

00010d4c <fputs_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #700]!	; 0x2bc

00010d58 <strcmp@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #692]!	; 0x2b4

00010d64 <strtol@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d70 <fflush@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #676]!	; 0x2a4

00010d7c <free@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #668]!	; 0x29c

00010d88 <_exit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #660]!	; 0x294

00010d94 <memcpy@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #652]!	; 0x28c

00010da0 <execvp@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #644]!	; 0x284

00010dac <mbsinit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #636]!	; 0x27c

00010db8 <dcgettext@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #628]!	; 0x274

00010dc4 <realloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #620]!	; 0x26c

00010dd0 <getpriority@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #612]!	; 0x264

00010ddc <textdomain@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #604]!	; 0x25c

00010de8 <iswprint@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #596]!	; 0x254

00010df4 <fwrite@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #588]!	; 0x24c

00010e00 <lseek64@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #580]!	; 0x244

00010e0c <__ctype_get_mb_cur_max@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #572]!	; 0x23c

00010e18 <__fpending@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #564]!	; 0x234

00010e24 <ferror_unlocked@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #556]!	; 0x22c

00010e30 <mbrtowc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #548]!	; 0x224

00010e3c <error@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #540]!	; 0x21c

00010e48 <setpriority@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #532]!	; 0x214

00010e54 <malloc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #524]!	; 0x20c

00010e60 <__libc_start_main@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #516]!	; 0x204

00010e6c <__freading@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #508]!	; 0x1fc

00010e78 <__gmon_start__@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #500]!	; 0x1f4

00010e84 <getopt_long@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #492]!	; 0x1ec

00010e90 <__ctype_b_loc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #484]!	; 0x1e4

00010e9c <exit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ea8 <bcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #468]!	; 0x1d4

00010eb4 <strlen@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec0 <strchr@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #452]!	; 0x1c4

00010ecc <__errno_location@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ed8 <__cxa_atexit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ee4 <memset@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef0 <__printf_chk@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #420]!	; 0x1a4

00010efc <fileno@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #412]!	; 0x19c

00010f08 <__fprintf_chk@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #404]!	; 0x194

00010f14 <fclose@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #396]!	; 0x18c

00010f20 <fseeko64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #388]!	; 0x184

00010f2c <setlocale@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #380]!	; 0x17c

00010f38 <strrchr@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #372]!	; 0x174

00010f44 <nl_langinfo@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #364]!	; 0x16c

00010f50 <bindtextdomain@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #356]!	; 0x164

00010f5c <strncmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #348]!	; 0x15c

00010f68 <abort@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #340]!	; 0x154

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #332]!	; 0x14c

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e60 <__libc_start_main@plt>
   10fac:	bl	10f68 <abort@plt>
   10fb0:	andeq	r4, r1, r4, lsl #23
   10fb4:	andeq	r1, r1, r8, ror #6
   10fb8:	andeq	r4, r1, r4, lsr #22
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e78 <__gmon_start__@plt>
   10fd8:	andeq	r5, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, ip, asr #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r6, r2, r0, lsr #2
   11004:	andeq	r6, r2, r0, lsr #2
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	r6, r2, r0, lsr #2
   1103c:	andeq	r6, r2, r0, lsr #2
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	r6, r2, ip, lsr r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	push	{fp, lr}
   11074:	mov	fp, sp
   11078:	mov	r4, r0
   1107c:	cmp	r0, #0
   11080:	bne	1116c <__assert_fail@plt+0x1f8>
   11084:	movw	r1, #19411	; 0x4bd3
   11088:	movt	r1, #1
   1108c:	mov	r0, #0
   11090:	mov	r2, #5
   11094:	bl	10db8 <dcgettext@plt>
   11098:	mov	r1, r0
   1109c:	movw	r0, #24904	; 0x6148
   110a0:	movt	r0, #2
   110a4:	ldr	r2, [r0]
   110a8:	mov	r0, #1
   110ac:	bl	10ef0 <__printf_chk@plt>
   110b0:	movw	r1, #19450	; 0x4bfa
   110b4:	movt	r1, #1
   110b8:	mov	r0, #0
   110bc:	mov	r2, #5
   110c0:	bl	10db8 <dcgettext@plt>
   110c4:	mov	r1, r0
   110c8:	mov	r0, #1
   110cc:	mvn	r2, #19
   110d0:	mov	r3, #19
   110d4:	bl	10ef0 <__printf_chk@plt>
   110d8:	bl	111b0 <__assert_fail@plt+0x23c>
   110dc:	movw	r1, #19672	; 0x4cd8
   110e0:	movt	r1, #1
   110e4:	mov	r0, #0
   110e8:	mov	r2, #5
   110ec:	bl	10db8 <dcgettext@plt>
   110f0:	movw	r5, #24884	; 0x6134
   110f4:	movt	r5, #2
   110f8:	ldr	r1, [r5]
   110fc:	bl	10d4c <fputs_unlocked@plt>
   11100:	movw	r1, #19739	; 0x4d1b
   11104:	movt	r1, #1
   11108:	mov	r0, #0
   1110c:	mov	r2, #5
   11110:	bl	10db8 <dcgettext@plt>
   11114:	ldr	r1, [r5]
   11118:	bl	10d4c <fputs_unlocked@plt>
   1111c:	movw	r1, #19784	; 0x4d48
   11120:	movt	r1, #1
   11124:	mov	r0, #0
   11128:	mov	r2, #5
   1112c:	bl	10db8 <dcgettext@plt>
   11130:	ldr	r1, [r5]
   11134:	bl	10d4c <fputs_unlocked@plt>
   11138:	movw	r1, #19838	; 0x4d7e
   1113c:	movt	r1, #1
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	bl	10db8 <dcgettext@plt>
   1114c:	mov	r1, r0
   11150:	movw	r2, #20029	; 0x4e3d
   11154:	movt	r2, #1
   11158:	mov	r0, #1
   1115c:	bl	10ef0 <__printf_chk@plt>
   11160:	bl	111e0 <__assert_fail@plt+0x26c>
   11164:	mov	r0, r4
   11168:	bl	10e9c <exit@plt>
   1116c:	movw	r0, #24880	; 0x6130
   11170:	movt	r0, #2
   11174:	ldr	r5, [r0]
   11178:	movw	r1, #19372	; 0x4bac
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	bl	10db8 <dcgettext@plt>
   1118c:	mov	r2, r0
   11190:	movw	r0, #24904	; 0x6148
   11194:	movt	r0, #2
   11198:	ldr	r3, [r0]
   1119c:	mov	r0, r5
   111a0:	mov	r1, #1
   111a4:	bl	10f08 <__fprintf_chk@plt>
   111a8:	mov	r0, r4
   111ac:	bl	10e9c <exit@plt>
   111b0:	push	{fp, lr}
   111b4:	mov	fp, sp
   111b8:	movw	r1, #20201	; 0x4ee9
   111bc:	movt	r1, #1
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	bl	10db8 <dcgettext@plt>
   111cc:	movw	r1, #24884	; 0x6134
   111d0:	movt	r1, #2
   111d4:	ldr	r1, [r1]
   111d8:	pop	{fp, lr}
   111dc:	b	10d4c <fputs_unlocked@plt>
   111e0:	push	{r4, r5, r6, sl, fp, lr}
   111e4:	add	fp, sp, #16
   111e8:	sub	sp, sp, #56	; 0x38
   111ec:	movw	r0, #20664	; 0x50b8
   111f0:	movt	r0, #1
   111f4:	add	r1, r0, #32
   111f8:	mov	r2, #48	; 0x30
   111fc:	vld1.64	{d16-d17}, [r1]
   11200:	mov	r6, sp
   11204:	add	r1, r6, #32
   11208:	add	r3, r0, #16
   1120c:	vld1.64	{d18-d19}, [r0], r2
   11210:	vld1.64	{d20-d21}, [r3]
   11214:	vldr	d22, [r0]
   11218:	vst1.64	{d16-d17}, [r1]
   1121c:	add	r0, r6, #16
   11220:	vst1.64	{d20-d21}, [r0]
   11224:	mov	r0, r6
   11228:	vst1.64	{d18-d19}, [r0], r2
   1122c:	vstr	d22, [r0]
   11230:	ldr	r1, [sp]
   11234:	cmp	r1, #0
   11238:	movw	r4, #20029	; 0x4e3d
   1123c:	movt	r4, #1
   11240:	beq	11268 <__assert_fail@plt+0x2f4>
   11244:	mov	r6, sp
   11248:	movw	r5, #20029	; 0x4e3d
   1124c:	movt	r5, #1
   11250:	mov	r0, r5
   11254:	bl	10d58 <strcmp@plt>
   11258:	cmp	r0, #0
   1125c:	ldrne	r1, [r6, #8]!
   11260:	cmpne	r1, #0
   11264:	bne	11250 <__assert_fail@plt+0x2dc>
   11268:	ldr	r5, [r6, #4]
   1126c:	movw	r1, #20371	; 0x4f93
   11270:	movt	r1, #1
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	bl	10db8 <dcgettext@plt>
   11280:	mov	r1, r0
   11284:	movw	r2, #20062	; 0x4e5e
   11288:	movt	r2, #1
   1128c:	movw	r3, #20394	; 0x4faa
   11290:	movt	r3, #1
   11294:	mov	r0, #1
   11298:	bl	10ef0 <__printf_chk@plt>
   1129c:	cmp	r5, #0
   112a0:	moveq	r5, r4
   112a4:	mov	r0, #5
   112a8:	mov	r1, #0
   112ac:	bl	10f2c <setlocale@plt>
   112b0:	cmp	r0, #0
   112b4:	beq	112f4 <__assert_fail@plt+0x380>
   112b8:	movw	r1, #20434	; 0x4fd2
   112bc:	movt	r1, #1
   112c0:	mov	r2, #3
   112c4:	bl	10f5c <strncmp@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	112f4 <__assert_fail@plt+0x380>
   112d0:	movw	r1, #20438	; 0x4fd6
   112d4:	movt	r1, #1
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	bl	10db8 <dcgettext@plt>
   112e4:	movw	r1, #24884	; 0x6134
   112e8:	movt	r1, #2
   112ec:	ldr	r1, [r1]
   112f0:	bl	10d4c <fputs_unlocked@plt>
   112f4:	movw	r1, #20509	; 0x501d
   112f8:	movt	r1, #1
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	bl	10db8 <dcgettext@plt>
   11308:	mov	r1, r0
   1130c:	movw	r2, #20394	; 0x4faa
   11310:	movt	r2, #1
   11314:	mov	r0, #1
   11318:	mov	r3, r4
   1131c:	bl	10ef0 <__printf_chk@plt>
   11320:	movw	r0, #20304	; 0x4f50
   11324:	movt	r0, #1
   11328:	movw	r6, #20586	; 0x506a
   1132c:	movt	r6, #1
   11330:	cmp	r5, r4
   11334:	moveq	r6, r0
   11338:	movw	r1, #20536	; 0x5038
   1133c:	movt	r1, #1
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	bl	10db8 <dcgettext@plt>
   1134c:	mov	r1, r0
   11350:	mov	r0, #1
   11354:	mov	r2, r5
   11358:	mov	r3, r6
   1135c:	sub	sp, fp, #16
   11360:	pop	{r4, r5, r6, sl, fp, lr}
   11364:	b	10ef0 <__printf_chk@plt>
   11368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1136c:	add	fp, sp, #28
   11370:	sub	sp, sp, #12
   11374:	mov	r5, r1
   11378:	mov	r8, r0
   1137c:	ldr	r0, [r1]
   11380:	bl	118c4 <__assert_fail@plt+0x950>
   11384:	movw	r1, #20586	; 0x506a
   11388:	movt	r1, #1
   1138c:	mov	r0, #6
   11390:	bl	10f2c <setlocale@plt>
   11394:	movw	r7, #20066	; 0x4e62
   11398:	movt	r7, #1
   1139c:	movw	r1, #20034	; 0x4e42
   113a0:	movt	r1, #1
   113a4:	mov	r0, r7
   113a8:	bl	10f50 <bindtextdomain@plt>
   113ac:	mov	r0, r7
   113b0:	bl	10ddc <textdomain@plt>
   113b4:	bl	11788 <__assert_fail@plt+0x814>
   113b8:	movw	r0, #6108	; 0x17dc
   113bc:	movt	r0, #1
   113c0:	bl	14b88 <__assert_fail@plt+0x3c14>
   113c4:	mov	r4, #10
   113c8:	mov	r7, #1
   113cc:	cmp	r8, #2
   113d0:	blt	114b8 <__assert_fail@plt+0x544>
   113d4:	mov	ip, #0
   113d8:	movw	r2, #20058	; 0x4e5a
   113dc:	movt	r2, #1
   113e0:	movw	r3, #20600	; 0x5078
   113e4:	movt	r3, #1
   113e8:	mov	sl, #0
   113ec:	ldr	r1, [r5, r7, lsl #2]
   113f0:	ldrb	r0, [r1]
   113f4:	cmp	r0, #45	; 0x2d
   113f8:	bne	11440 <__assert_fail@plt+0x4cc>
   113fc:	mov	r0, r1
   11400:	mov	r4, r5
   11404:	ldrb	r5, [r0, #1]!
   11408:	sub	r5, r5, #43	; 0x2b
   1140c:	tst	r5, #253	; 0xfd
   11410:	mov	r5, #1
   11414:	movweq	r5, #2
   11418:	ldrb	r1, [r1, r5]
   1141c:	mov	r5, r4
   11420:	sub	r1, r1, #48	; 0x30
   11424:	cmp	r1, #9
   11428:	bhi	11440 <__assert_fail@plt+0x4cc>
   1142c:	add	r7, r7, #1
   11430:	mov	sl, r0
   11434:	cmp	r7, r8
   11438:	blt	113ec <__assert_fail@plt+0x478>
   1143c:	b	11524 <__assert_fail@plt+0x5b0>
   11440:	mov	r4, sl
   11444:	ldr	r0, [r5]
   11448:	sub	r7, r7, #1
   1144c:	mov	r1, r5
   11450:	str	r0, [r1, r7, lsl #2]!
   11454:	movw	sl, #24872	; 0x6128
   11458:	movt	sl, #2
   1145c:	str	ip, [sl]
   11460:	str	ip, [sp]
   11464:	mov	r6, r8
   11468:	sub	r0, r8, r7
   1146c:	mov	r9, r2
   11470:	mov	r8, r3
   11474:	bl	10e84 <getopt_long@plt>
   11478:	ldr	r1, [sl]
   1147c:	add	r7, r7, r1
   11480:	cmp	r0, #109	; 0x6d
   11484:	ble	11514 <__assert_fail@plt+0x5a0>
   11488:	cmp	r0, #110	; 0x6e
   1148c:	bne	116d8 <__assert_fail@plt+0x764>
   11490:	movw	r0, #24888	; 0x6138
   11494:	movt	r0, #2
   11498:	ldr	sl, [r0]
   1149c:	mov	r2, r9
   114a0:	mov	ip, #0
   114a4:	mov	r3, r8
   114a8:	mov	r8, r6
   114ac:	cmp	r7, r8
   114b0:	blt	113ec <__assert_fail@plt+0x478>
   114b4:	b	11524 <__assert_fail@plt+0x5b0>
   114b8:	mov	r0, #0
   114bc:	cmp	r7, r8
   114c0:	bne	11574 <__assert_fail@plt+0x600>
   114c4:	cmp	r0, #0
   114c8:	bne	116e0 <__assert_fail@plt+0x76c>
   114cc:	bl	10ecc <__errno_location@plt>
   114d0:	mov	r4, r0
   114d4:	mov	r6, #0
   114d8:	str	r6, [r0]
   114dc:	mov	r0, #0
   114e0:	mov	r1, #0
   114e4:	bl	10dd0 <getpriority@plt>
   114e8:	mov	r2, r0
   114ec:	cmn	r0, #1
   114f0:	bne	11500 <__assert_fail@plt+0x58c>
   114f4:	ldr	r4, [r4]
   114f8:	cmp	r4, #0
   114fc:	bne	11740 <__assert_fail@plt+0x7cc>
   11500:	movw	r1, #20177	; 0x4ed1
   11504:	movt	r1, #1
   11508:	mov	r0, #1
   1150c:	bl	10ef0 <__printf_chk@plt>
   11510:	b	11658 <__assert_fail@plt+0x6e4>
   11514:	cmn	r0, #1
   11518:	mov	sl, r4
   1151c:	mov	r8, r6
   11520:	bne	11678 <__assert_fail@plt+0x704>
   11524:	cmp	sl, #0
   11528:	beq	11664 <__assert_fail@plt+0x6f0>
   1152c:	movw	r0, #20586	; 0x506a
   11530:	movt	r0, #1
   11534:	str	r0, [sp]
   11538:	add	r3, sp, #8
   1153c:	mov	r0, sl
   11540:	mov	r1, #0
   11544:	mov	r2, #10
   11548:	bl	13d64 <__assert_fail@plt+0x2df0>
   1154c:	cmp	r0, #2
   11550:	bcs	1170c <__assert_fail@plt+0x798>
   11554:	ldr	r4, [sp, #8]
   11558:	cmp	r4, #39	; 0x27
   1155c:	movge	r4, #39	; 0x27
   11560:	cmn	r4, #39	; 0x27
   11564:	mvnle	r4, #38	; 0x26
   11568:	mov	r0, #1
   1156c:	cmp	r7, r8
   11570:	beq	114c4 <__assert_fail@plt+0x550>
   11574:	bl	10ecc <__errno_location@plt>
   11578:	mov	r9, r0
   1157c:	mov	r0, #0
   11580:	str	r0, [r9]
   11584:	mov	r0, #0
   11588:	mov	r1, #0
   1158c:	bl	10dd0 <getpriority@plt>
   11590:	cmn	r0, #1
   11594:	bne	115a4 <__assert_fail@plt+0x630>
   11598:	ldr	r6, [r9]
   1159c:	cmp	r6, #0
   115a0:	bne	11764 <__assert_fail@plt+0x7f0>
   115a4:	add	r2, r0, r4
   115a8:	mov	r0, #0
   115ac:	mov	r1, #0
   115b0:	bl	10e48 <setpriority@plt>
   115b4:	cmp	r0, #0
   115b8:	beq	1161c <__assert_fail@plt+0x6a8>
   115bc:	mov	r8, r5
   115c0:	ldr	r5, [r9]
   115c4:	mov	r0, r5
   115c8:	bl	1179c <__assert_fail@plt+0x828>
   115cc:	mov	r4, r0
   115d0:	movw	r1, #20181	; 0x4ed5
   115d4:	movt	r1, #1
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	bl	10db8 <dcgettext@plt>
   115e4:	mov	r2, r0
   115e8:	mov	r6, #125	; 0x7d
   115ec:	cmp	r4, #0
   115f0:	mov	r0, #125	; 0x7d
   115f4:	movwne	r0, #0
   115f8:	mov	r1, r5
   115fc:	mov	r5, r8
   11600:	bl	10e3c <error@plt>
   11604:	movw	r0, #24880	; 0x6130
   11608:	movt	r0, #2
   1160c:	ldr	r0, [r0]
   11610:	bl	10e24 <ferror_unlocked@plt>
   11614:	cmp	r0, #0
   11618:	bne	11658 <__assert_fail@plt+0x6e4>
   1161c:	ldr	r0, [r5, r7, lsl #2]!
   11620:	mov	r1, r5
   11624:	bl	10da0 <execvp@plt>
   11628:	ldr	r0, [r5]
   1162c:	ldr	r4, [r9]
   11630:	bl	130b8 <__assert_fail@plt+0x2144>
   11634:	mov	r3, r0
   11638:	movw	r2, #20751	; 0x510f
   1163c:	movt	r2, #1
   11640:	mov	r0, #0
   11644:	mov	r1, r4
   11648:	bl	10e3c <error@plt>
   1164c:	mov	r6, #126	; 0x7e
   11650:	cmp	r4, #2
   11654:	movweq	r6, #127	; 0x7f
   11658:	mov	r0, r6
   1165c:	sub	sp, fp, #28
   11660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11664:	mov	r0, #0
   11668:	mov	r4, #10
   1166c:	cmp	r7, r8
   11670:	beq	114c4 <__assert_fail@plt+0x550>
   11674:	b	11574 <__assert_fail@plt+0x600>
   11678:	cmn	r0, #3
   1167c:	bne	116c8 <__assert_fail@plt+0x754>
   11680:	movw	r0, #24792	; 0x60d8
   11684:	movt	r0, #2
   11688:	ldr	r3, [r0]
   1168c:	movw	r0, #24884	; 0x6134
   11690:	movt	r0, #2
   11694:	ldr	r0, [r0]
   11698:	mov	r1, #0
   1169c:	movw	r2, #20076	; 0x4e6c
   116a0:	movt	r2, #1
   116a4:	str	r2, [sp]
   116a8:	str	r1, [sp, #4]
   116ac:	movw	r1, #20029	; 0x4e3d
   116b0:	movt	r1, #1
   116b4:	movw	r2, #20062	; 0x4e5e
   116b8:	movt	r2, #1
   116bc:	bl	13890 <__assert_fail@plt+0x291c>
   116c0:	mov	r0, #0
   116c4:	bl	10e9c <exit@plt>
   116c8:	cmn	r0, #2
   116cc:	bne	116d8 <__assert_fail@plt+0x764>
   116d0:	mov	r0, #0
   116d4:	bl	11070 <__assert_fail@plt+0xfc>
   116d8:	mov	r0, #125	; 0x7d
   116dc:	bl	11070 <__assert_fail@plt+0xfc>
   116e0:	movw	r1, #20114	; 0x4e92
   116e4:	movt	r1, #1
   116e8:	mov	r0, #0
   116ec:	mov	r2, #5
   116f0:	bl	10db8 <dcgettext@plt>
   116f4:	mov	r2, r0
   116f8:	mov	r0, #0
   116fc:	mov	r1, #0
   11700:	bl	10e3c <error@plt>
   11704:	mov	r0, #125	; 0x7d
   11708:	bl	11070 <__assert_fail@plt+0xfc>
   1170c:	movw	r1, #20092	; 0x4e7c
   11710:	movt	r1, #1
   11714:	mov	r0, #0
   11718:	mov	r2, #5
   1171c:	bl	10db8 <dcgettext@plt>
   11720:	mov	r5, r0
   11724:	mov	r0, sl
   11728:	bl	130b8 <__assert_fail@plt+0x2144>
   1172c:	mov	r3, r0
   11730:	mov	r0, #125	; 0x7d
   11734:	mov	r1, #0
   11738:	mov	r2, r5
   1173c:	bl	10e3c <error@plt>
   11740:	movw	r1, #20157	; 0x4ebd
   11744:	movt	r1, #1
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	bl	10db8 <dcgettext@plt>
   11754:	mov	r2, r0
   11758:	mov	r0, #125	; 0x7d
   1175c:	mov	r1, r4
   11760:	bl	10e3c <error@plt>
   11764:	movw	r1, #20157	; 0x4ebd
   11768:	movt	r1, #1
   1176c:	mov	r0, #0
   11770:	mov	r2, #5
   11774:	bl	10db8 <dcgettext@plt>
   11778:	mov	r2, r0
   1177c:	mov	r0, #125	; 0x7d
   11780:	mov	r1, r6
   11784:	bl	10e3c <error@plt>
   11788:	movw	r0, #24796	; 0x60dc
   1178c:	movt	r0, #2
   11790:	mov	r1, #125	; 0x7d
   11794:	str	r1, [r0]
   11798:	bx	lr
   1179c:	sub	r1, r0, #1
   117a0:	clz	r1, r1
   117a4:	lsr	r1, r1, #5
   117a8:	sub	r0, r0, #13
   117ac:	clz	r0, r0
   117b0:	lsr	r0, r0, #5
   117b4:	orr	r0, r0, r1
   117b8:	bx	lr
   117bc:	movw	r1, #24896	; 0x6140
   117c0:	movt	r1, #2
   117c4:	str	r0, [r1]
   117c8:	bx	lr
   117cc:	movw	r1, #24900	; 0x6144
   117d0:	movt	r1, #2
   117d4:	strb	r0, [r1]
   117d8:	bx	lr
   117dc:	push	{r4, r5, r6, sl, fp, lr}
   117e0:	add	fp, sp, #16
   117e4:	sub	sp, sp, #8
   117e8:	movw	r0, #24884	; 0x6134
   117ec:	movt	r0, #2
   117f0:	ldr	r0, [r0]
   117f4:	bl	14690 <__assert_fail@plt+0x371c>
   117f8:	cmp	r0, #0
   117fc:	beq	11824 <__assert_fail@plt+0x8b0>
   11800:	movw	r0, #24900	; 0x6144
   11804:	movt	r0, #2
   11808:	ldrb	r0, [r0]
   1180c:	cmp	r0, #0
   11810:	beq	11844 <__assert_fail@plt+0x8d0>
   11814:	bl	10ecc <__errno_location@plt>
   11818:	ldr	r0, [r0]
   1181c:	cmp	r0, #32
   11820:	bne	11844 <__assert_fail@plt+0x8d0>
   11824:	movw	r0, #24880	; 0x6130
   11828:	movt	r0, #2
   1182c:	ldr	r0, [r0]
   11830:	bl	14690 <__assert_fail@plt+0x371c>
   11834:	cmp	r0, #0
   11838:	subeq	sp, fp, #16
   1183c:	popeq	{r4, r5, r6, sl, fp, pc}
   11840:	b	118b4 <__assert_fail@plt+0x940>
   11844:	movw	r1, #20735	; 0x50ff
   11848:	movt	r1, #1
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	bl	10db8 <dcgettext@plt>
   11858:	mov	r4, r0
   1185c:	movw	r0, #24896	; 0x6140
   11860:	movt	r0, #2
   11864:	ldr	r6, [r0]
   11868:	bl	10ecc <__errno_location@plt>
   1186c:	ldr	r5, [r0]
   11870:	cmp	r6, #0
   11874:	bne	11890 <__assert_fail@plt+0x91c>
   11878:	movw	r2, #20751	; 0x510f
   1187c:	movt	r2, #1
   11880:	mov	r0, #0
   11884:	mov	r1, r5
   11888:	mov	r3, r4
   1188c:	b	118b0 <__assert_fail@plt+0x93c>
   11890:	mov	r0, r6
   11894:	bl	12f68 <__assert_fail@plt+0x1ff4>
   11898:	mov	r3, r0
   1189c:	str	r4, [sp]
   118a0:	movw	r2, #20747	; 0x510b
   118a4:	movt	r2, #1
   118a8:	mov	r0, #0
   118ac:	mov	r1, r5
   118b0:	bl	10e3c <error@plt>
   118b4:	movw	r0, #24796	; 0x60dc
   118b8:	movt	r0, #2
   118bc:	ldr	r0, [r0]
   118c0:	bl	10d88 <_exit@plt>
   118c4:	push	{r4, r5, fp, lr}
   118c8:	add	fp, sp, #8
   118cc:	cmp	r0, #0
   118d0:	beq	11964 <__assert_fail@plt+0x9f0>
   118d4:	mov	r4, r0
   118d8:	mov	r1, #47	; 0x2f
   118dc:	bl	10f38 <strrchr@plt>
   118e0:	cmp	r0, #0
   118e4:	mov	r5, r4
   118e8:	addne	r5, r0, #1
   118ec:	sub	r0, r5, r4
   118f0:	cmp	r0, #7
   118f4:	blt	11948 <__assert_fail@plt+0x9d4>
   118f8:	sub	r0, r5, #7
   118fc:	movw	r1, #20810	; 0x514a
   11900:	movt	r1, #1
   11904:	mov	r2, #7
   11908:	bl	10f5c <strncmp@plt>
   1190c:	cmp	r0, #0
   11910:	bne	11948 <__assert_fail@plt+0x9d4>
   11914:	movw	r1, #20818	; 0x5152
   11918:	movt	r1, #1
   1191c:	mov	r0, r5
   11920:	mov	r2, #3
   11924:	bl	10f5c <strncmp@plt>
   11928:	cmp	r0, #0
   1192c:	beq	11938 <__assert_fail@plt+0x9c4>
   11930:	mov	r4, r5
   11934:	b	11948 <__assert_fail@plt+0x9d4>
   11938:	add	r4, r5, #3
   1193c:	movw	r0, #24864	; 0x6120
   11940:	movt	r0, #2
   11944:	str	r4, [r0]
   11948:	movw	r0, #24868	; 0x6124
   1194c:	movt	r0, #2
   11950:	str	r4, [r0]
   11954:	movw	r0, #24904	; 0x6148
   11958:	movt	r0, #2
   1195c:	str	r4, [r0]
   11960:	pop	{r4, r5, fp, pc}
   11964:	movw	r0, #24880	; 0x6130
   11968:	movt	r0, #2
   1196c:	ldr	r3, [r0]
   11970:	movw	r0, #20754	; 0x5112
   11974:	movt	r0, #1
   11978:	mov	r1, #55	; 0x37
   1197c:	mov	r2, #1
   11980:	bl	10df4 <fwrite@plt>
   11984:	bl	10f68 <abort@plt>
   11988:	push	{r4, r5, r6, sl, fp, lr}
   1198c:	add	fp, sp, #16
   11990:	mov	r4, r0
   11994:	movw	r0, #24912	; 0x6150
   11998:	movt	r0, #2
   1199c:	cmp	r4, #0
   119a0:	moveq	r4, r0
   119a4:	bl	10ecc <__errno_location@plt>
   119a8:	mov	r5, r0
   119ac:	ldr	r6, [r0]
   119b0:	mov	r0, r4
   119b4:	mov	r1, #48	; 0x30
   119b8:	bl	13c80 <__assert_fail@plt+0x2d0c>
   119bc:	str	r6, [r5]
   119c0:	pop	{r4, r5, r6, sl, fp, pc}
   119c4:	movw	r1, #24912	; 0x6150
   119c8:	movt	r1, #2
   119cc:	cmp	r0, #0
   119d0:	movne	r1, r0
   119d4:	ldr	r0, [r1]
   119d8:	bx	lr
   119dc:	movw	r2, #24912	; 0x6150
   119e0:	movt	r2, #2
   119e4:	cmp	r0, #0
   119e8:	movne	r2, r0
   119ec:	str	r1, [r2]
   119f0:	bx	lr
   119f4:	movw	r3, #24912	; 0x6150
   119f8:	movt	r3, #2
   119fc:	cmp	r0, #0
   11a00:	movne	r3, r0
   11a04:	ubfx	r0, r1, #5, #3
   11a08:	add	ip, r3, r0, lsl #2
   11a0c:	ldr	r3, [ip, #8]
   11a10:	and	r1, r1, #31
   11a14:	mov	r0, #1
   11a18:	and	r0, r0, r3, lsr r1
   11a1c:	and	r2, r2, #1
   11a20:	eor	r2, r0, r2
   11a24:	eor	r1, r3, r2, lsl r1
   11a28:	str	r1, [ip, #8]
   11a2c:	bx	lr
   11a30:	movw	r2, #24912	; 0x6150
   11a34:	movt	r2, #2
   11a38:	cmp	r0, #0
   11a3c:	movne	r2, r0
   11a40:	ldr	r0, [r2, #4]
   11a44:	str	r1, [r2, #4]
   11a48:	bx	lr
   11a4c:	push	{fp, lr}
   11a50:	mov	fp, sp
   11a54:	movw	r3, #24912	; 0x6150
   11a58:	movt	r3, #2
   11a5c:	cmp	r0, #0
   11a60:	movne	r3, r0
   11a64:	mov	r0, #10
   11a68:	str	r0, [r3]
   11a6c:	cmp	r1, #0
   11a70:	cmpne	r2, #0
   11a74:	bne	11a7c <__assert_fail@plt+0xb08>
   11a78:	bl	10f68 <abort@plt>
   11a7c:	str	r1, [r3, #40]	; 0x28
   11a80:	str	r2, [r3, #44]	; 0x2c
   11a84:	pop	{fp, pc}
   11a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a8c:	add	fp, sp, #28
   11a90:	sub	sp, sp, #20
   11a94:	mov	r8, r3
   11a98:	mov	r9, r2
   11a9c:	mov	sl, r1
   11aa0:	mov	r7, r0
   11aa4:	ldr	r0, [fp, #8]
   11aa8:	movw	r5, #24912	; 0x6150
   11aac:	movt	r5, #2
   11ab0:	cmp	r0, #0
   11ab4:	movne	r5, r0
   11ab8:	bl	10ecc <__errno_location@plt>
   11abc:	mov	r4, r0
   11ac0:	ldm	r5, {r0, r1}
   11ac4:	ldr	r2, [r5, #40]	; 0x28
   11ac8:	ldr	r3, [r5, #44]	; 0x2c
   11acc:	ldr	r6, [r4]
   11ad0:	add	r5, r5, #8
   11ad4:	stm	sp, {r0, r1, r5}
   11ad8:	str	r2, [sp, #12]
   11adc:	str	r3, [sp, #16]
   11ae0:	mov	r0, r7
   11ae4:	mov	r1, sl
   11ae8:	mov	r2, r9
   11aec:	mov	r3, r8
   11af0:	bl	11b00 <__assert_fail@plt+0xb8c>
   11af4:	str	r6, [r4]
   11af8:	sub	sp, fp, #28
   11afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b04:	add	fp, sp, #28
   11b08:	sub	sp, sp, #156	; 0x9c
   11b0c:	mov	r9, r3
   11b10:	mov	r7, r1
   11b14:	mov	r6, r0
   11b18:	str	r2, [fp, #-80]	; 0xffffffb0
   11b1c:	add	r0, r2, #1
   11b20:	str	r0, [sp, #76]	; 0x4c
   11b24:	ldr	r0, [fp, #12]
   11b28:	and	r1, r0, #1
   11b2c:	str	r1, [sp, #40]	; 0x28
   11b30:	and	r1, r0, #4
   11b34:	str	r1, [sp, #36]	; 0x24
   11b38:	ubfx	r4, r0, #1, #1
   11b3c:	bl	10e0c <__ctype_get_mb_cur_max@plt>
   11b40:	str	r0, [sp, #44]	; 0x2c
   11b44:	ldr	r0, [fp, #24]
   11b48:	str	r0, [sp, #88]	; 0x58
   11b4c:	ldr	r0, [fp, #20]
   11b50:	str	r0, [sp, #80]	; 0x50
   11b54:	ldr	r1, [fp, #8]
   11b58:	mov	r0, #0
   11b5c:	str	r0, [sp, #84]	; 0x54
   11b60:	mov	r0, #0
   11b64:	str	r0, [fp, #-84]	; 0xffffffac
   11b68:	mov	r0, #0
   11b6c:	str	r0, [fp, #-72]	; 0xffffffb8
   11b70:	mov	r0, #0
   11b74:	mov	r2, #0
   11b78:	str	r2, [fp, #-56]	; 0xffffffc8
   11b7c:	mov	r2, #0
   11b80:	str	r2, [sp, #64]	; 0x40
   11b84:	mov	r2, #1
   11b88:	str	r2, [fp, #-48]	; 0xffffffd0
   11b8c:	cmp	r1, #10
   11b90:	bhi	12abc <__assert_fail@plt+0x1b48>
   11b94:	mov	sl, r7
   11b98:	mov	r7, r1
   11b9c:	add	r1, pc, #24
   11ba0:	mov	r8, #0
   11ba4:	mov	r2, #1
   11ba8:	mov	r3, #0
   11bac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11bb0:	mov	lr, r9
   11bb4:	mov	r5, r6
   11bb8:	ldr	pc, [r1, r7, lsl #2]
   11bbc:	muleq	r1, r0, ip
   11bc0:	ldrdeq	r1, [r1], -r0
   11bc4:	andeq	r1, r1, r0, lsr #25
   11bc8:	andeq	r1, r1, r8, lsl #25
   11bcc:	andeq	r1, r1, r4, asr #25
   11bd0:	andeq	r1, r1, r4, lsr #26
   11bd4:			; <UNDEFINED> instruction: 0x00011cb0
   11bd8:	andeq	r1, r1, r0, lsl #27
   11bdc:	andeq	r1, r1, r8, ror #23
   11be0:	andeq	r1, r1, r8, ror #23
   11be4:	andeq	r1, r1, r4, lsl ip
   11be8:	movw	r0, #20900	; 0x51a4
   11bec:	movt	r0, #1
   11bf0:	mov	r1, r7
   11bf4:	bl	130c4 <__assert_fail@plt+0x2150>
   11bf8:	str	r0, [sp, #80]	; 0x50
   11bfc:	movw	r0, #20902	; 0x51a6
   11c00:	movt	r0, #1
   11c04:	mov	r1, r7
   11c08:	bl	130c4 <__assert_fail@plt+0x2150>
   11c0c:	mov	r5, r6
   11c10:	str	r0, [sp, #88]	; 0x58
   11c14:	mov	r8, #0
   11c18:	tst	r4, #1
   11c1c:	str	r7, [fp, #-64]	; 0xffffffc0
   11c20:	bne	11c58 <__assert_fail@plt+0xce4>
   11c24:	ldr	r0, [sp, #80]	; 0x50
   11c28:	ldrb	r0, [r0]
   11c2c:	cmp	r0, #0
   11c30:	beq	11c58 <__assert_fail@plt+0xce4>
   11c34:	ldr	r1, [sp, #80]	; 0x50
   11c38:	add	r1, r1, #1
   11c3c:	mov	r8, #0
   11c40:	cmp	r8, sl
   11c44:	strbcc	r0, [r5, r8]
   11c48:	ldrb	r0, [r1, r8]
   11c4c:	add	r8, r8, #1
   11c50:	cmp	r0, #0
   11c54:	bne	11c40 <__assert_fail@plt+0xccc>
   11c58:	ldr	r7, [sp, #88]	; 0x58
   11c5c:	mov	r0, r7
   11c60:	bl	10eb4 <strlen@plt>
   11c64:	mov	r5, r6
   11c68:	str	r0, [fp, #-72]	; 0xffffffb8
   11c6c:	str	r7, [fp, #-84]	; 0xffffffac
   11c70:	mov	r2, #1
   11c74:	mov	r3, r4
   11c78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11c7c:	mov	lr, r9
   11c80:	ldr	r7, [fp, #-64]	; 0xffffffc0
   11c84:	b	11d80 <__assert_fail@plt+0xe0c>
   11c88:	mov	r0, #1
   11c8c:	b	11cd0 <__assert_fail@plt+0xd5c>
   11c90:	mov	r7, #0
   11c94:	mov	r8, #0
   11c98:	mov	r2, r0
   11c9c:	b	11d7c <__assert_fail@plt+0xe08>
   11ca0:	tst	r4, #1
   11ca4:	bne	11cd0 <__assert_fail@plt+0xd5c>
   11ca8:	mov	r2, r0
   11cac:	b	11cf8 <__assert_fail@plt+0xd84>
   11cb0:	mov	r0, #1
   11cb4:	str	r0, [fp, #-72]	; 0xffffffb8
   11cb8:	mov	r8, #0
   11cbc:	mov	r7, #5
   11cc0:	b	11d3c <__assert_fail@plt+0xdc8>
   11cc4:	mov	r2, #1
   11cc8:	tst	r4, #1
   11ccc:	beq	11cf8 <__assert_fail@plt+0xd84>
   11cd0:	mov	r1, #1
   11cd4:	str	r1, [fp, #-72]	; 0xffffffb8
   11cd8:	mov	r8, #0
   11cdc:	mov	r7, #2
   11ce0:	movw	r1, #20902	; 0x51a6
   11ce4:	movt	r1, #1
   11ce8:	str	r1, [fp, #-84]	; 0xffffffac
   11cec:	mov	r2, r0
   11cf0:	mov	r3, #1
   11cf4:	b	11d80 <__assert_fail@plt+0xe0c>
   11cf8:	mov	r8, #1
   11cfc:	mov	r7, #2
   11d00:	cmp	sl, #0
   11d04:	movne	r0, #39	; 0x27
   11d08:	strbne	r0, [r5]
   11d0c:	movw	r0, #20902	; 0x51a6
   11d10:	movt	r0, #1
   11d14:	str	r0, [fp, #-84]	; 0xffffffac
   11d18:	mov	r0, #1
   11d1c:	str	r0, [fp, #-72]	; 0xffffffb8
   11d20:	b	11d7c <__assert_fail@plt+0xe08>
   11d24:	mov	r7, #5
   11d28:	tst	r4, #1
   11d2c:	beq	11d54 <__assert_fail@plt+0xde0>
   11d30:	mov	r0, #1
   11d34:	str	r0, [fp, #-72]	; 0xffffffb8
   11d38:	mov	r8, #0
   11d3c:	movw	r0, #20898	; 0x51a2
   11d40:	movt	r0, #1
   11d44:	str	r0, [fp, #-84]	; 0xffffffac
   11d48:	mov	r2, #1
   11d4c:	mov	r3, #1
   11d50:	b	11d80 <__assert_fail@plt+0xe0c>
   11d54:	cmp	sl, #0
   11d58:	movne	r0, #34	; 0x22
   11d5c:	strbne	r0, [r5]
   11d60:	mov	r8, #1
   11d64:	movw	r0, #20898	; 0x51a2
   11d68:	movt	r0, #1
   11d6c:	str	r0, [fp, #-84]	; 0xffffffac
   11d70:	mov	r0, #1
   11d74:	str	r0, [fp, #-72]	; 0xffffffb8
   11d78:	mov	r2, #1
   11d7c:	mov	r3, #0
   11d80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d84:	cmp	r0, #0
   11d88:	movwne	r0, #1
   11d8c:	and	r1, r0, r3
   11d90:	and	r1, r2, r1
   11d94:	str	r1, [sp, #56]	; 0x38
   11d98:	sub	r1, r7, #2
   11d9c:	clz	r1, r1
   11da0:	lsr	r1, r1, #5
   11da4:	and	r1, r1, r3
   11da8:	str	r1, [sp, #68]	; 0x44
   11dac:	str	r7, [fp, #-64]	; 0xffffffc0
   11db0:	subs	r1, r7, #2
   11db4:	movwne	r1, #1
   11db8:	eor	r4, r3, #1
   11dbc:	str	r4, [fp, #-88]	; 0xffffffa8
   11dc0:	orr	r4, r1, r4
   11dc4:	str	r4, [sp, #72]	; 0x48
   11dc8:	and	r1, r1, r2
   11dcc:	and	r0, r0, r1
   11dd0:	str	r0, [fp, #-60]	; 0xffffffc4
   11dd4:	str	r3, [fp, #-76]	; 0xffffffb4
   11dd8:	orr	r0, r1, r3
   11ddc:	eor	r0, r0, #1
   11de0:	ldr	r1, [fp, #16]
   11de4:	clz	r1, r1
   11de8:	lsr	r1, r1, #5
   11dec:	orr	r0, r1, r0
   11df0:	str	r0, [fp, #-68]	; 0xffffffbc
   11df4:	str	r2, [sp, #92]	; 0x5c
   11df8:	eor	r0, r2, #1
   11dfc:	str	r0, [sp, #60]	; 0x3c
   11e00:	mov	r7, #0
   11e04:	cmn	lr, #1
   11e08:	beq	11e18 <__assert_fail@plt+0xea4>
   11e0c:	cmp	r7, lr
   11e10:	bne	11e24 <__assert_fail@plt+0xeb0>
   11e14:	b	12930 <__assert_fail@plt+0x19bc>
   11e18:	ldrb	r0, [ip, r7]
   11e1c:	cmp	r0, #0
   11e20:	beq	12930 <__assert_fail@plt+0x19bc>
   11e24:	mov	r9, #0
   11e28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11e2c:	cmp	r0, #0
   11e30:	beq	11e64 <__assert_fail@plt+0xef0>
   11e34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11e38:	add	r4, r7, r0
   11e3c:	cmp	r0, #2
   11e40:	bcc	11e5c <__assert_fail@plt+0xee8>
   11e44:	cmn	lr, #1
   11e48:	bne	11e5c <__assert_fail@plt+0xee8>
   11e4c:	mov	r0, ip
   11e50:	bl	10eb4 <strlen@plt>
   11e54:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11e58:	mov	lr, r0
   11e5c:	cmp	r4, lr
   11e60:	bls	11e70 <__assert_fail@plt+0xefc>
   11e64:	mov	r0, #0
   11e68:	str	r0, [fp, #-52]	; 0xffffffcc
   11e6c:	b	11eb4 <__assert_fail@plt+0xf40>
   11e70:	mov	r4, lr
   11e74:	add	r0, ip, r7
   11e78:	ldr	r1, [fp, #-84]	; 0xffffffac
   11e7c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11e80:	bl	10ea8 <bcmp@plt>
   11e84:	cmp	r0, #0
   11e88:	mov	r1, r0
   11e8c:	movwne	r1, #1
   11e90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   11e94:	orr	r1, r1, r2
   11e98:	tst	r1, #1
   11e9c:	beq	12a04 <__assert_fail@plt+0x1a90>
   11ea0:	clz	r0, r0
   11ea4:	lsr	r0, r0, #5
   11ea8:	str	r0, [fp, #-52]	; 0xffffffcc
   11eac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11eb0:	mov	lr, r4
   11eb4:	ldrb	r4, [ip, r7]
   11eb8:	cmp	r4, #126	; 0x7e
   11ebc:	bhi	123ec <__assert_fail@plt+0x1478>
   11ec0:	mov	r6, #1
   11ec4:	mov	r2, #110	; 0x6e
   11ec8:	mov	r0, #97	; 0x61
   11ecc:	add	r3, pc, #4
   11ed0:	mov	r1, #0
   11ed4:	ldr	pc, [r3, r4, lsl #2]
   11ed8:	andeq	r2, r1, ip, asr #4
   11edc:	andeq	r2, r1, ip, ror #7
   11ee0:	andeq	r2, r1, ip, ror #7
   11ee4:	andeq	r2, r1, ip, ror #7
   11ee8:	andeq	r2, r1, ip, ror #7
   11eec:	andeq	r2, r1, ip, ror #7
   11ef0:	andeq	r2, r1, ip, ror #7
   11ef4:	andeq	r2, r1, r0, asr #9
   11ef8:	andeq	r2, r1, ip, lsr #4
   11efc:	andeq	r2, r1, r4, lsr #4
   11f00:	andeq	r2, r1, r8, lsr r2
   11f04:	andeq	r2, r1, r4, asr r3
   11f08:	andeq	r2, r1, ip, lsl r2
   11f0c:	andeq	r2, r1, r4, lsr r2
   11f10:	andeq	r2, r1, ip, ror #7
   11f14:	andeq	r2, r1, ip, ror #7
   11f18:	andeq	r2, r1, ip, ror #7
   11f1c:	andeq	r2, r1, ip, ror #7
   11f20:	andeq	r2, r1, ip, ror #7
   11f24:	andeq	r2, r1, ip, ror #7
   11f28:	andeq	r2, r1, ip, ror #7
   11f2c:	andeq	r2, r1, ip, ror #7
   11f30:	andeq	r2, r1, ip, ror #7
   11f34:	andeq	r2, r1, ip, ror #7
   11f38:	andeq	r2, r1, ip, ror #7
   11f3c:	andeq	r2, r1, ip, ror #7
   11f40:	andeq	r2, r1, ip, ror #7
   11f44:	andeq	r2, r1, ip, ror #7
   11f48:	andeq	r2, r1, ip, ror #7
   11f4c:	andeq	r2, r1, ip, ror #7
   11f50:	andeq	r2, r1, ip, ror #7
   11f54:	andeq	r2, r1, ip, ror #7
   11f58:	ldrdeq	r2, [r1], -r0
   11f5c:	ldrdeq	r2, [r1], -r4
   11f60:	ldrdeq	r2, [r1], -r4
   11f64:			; <UNDEFINED> instruction: 0x000121bc
   11f68:	ldrdeq	r2, [r1], -r4
   11f6c:	ldrdeq	r2, [r1], -r4
   11f70:	ldrdeq	r2, [r1], -r4
   11f74:	andeq	r2, r1, ip, asr r3
   11f78:	ldrdeq	r2, [r1], -r4
   11f7c:	ldrdeq	r2, [r1], -r4
   11f80:	ldrdeq	r2, [r1], -r4
   11f84:	ldrdeq	r2, [r1], -r4
   11f88:	ldrdeq	r2, [r1], -r4
   11f8c:	ldrdeq	r2, [r1], -r4
   11f90:	ldrdeq	r2, [r1], -r4
   11f94:	ldrdeq	r2, [r1], -r4
   11f98:	ldrdeq	r2, [r1], -r4
   11f9c:	ldrdeq	r2, [r1], -r4
   11fa0:	ldrdeq	r2, [r1], -r4
   11fa4:	ldrdeq	r2, [r1], -r4
   11fa8:	ldrdeq	r2, [r1], -r4
   11fac:	ldrdeq	r2, [r1], -r4
   11fb0:	ldrdeq	r2, [r1], -r4
   11fb4:	ldrdeq	r2, [r1], -r4
   11fb8:	ldrdeq	r2, [r1], -r4
   11fbc:	ldrdeq	r2, [r1], -r4
   11fc0:	ldrdeq	r2, [r1], -r4
   11fc4:	ldrdeq	r2, [r1], -r4
   11fc8:	ldrdeq	r2, [r1], -r4
   11fcc:	ldrdeq	r2, [r1], -r4
   11fd0:	ldrdeq	r2, [r1], -r4
   11fd4:	andeq	r2, r1, r4, lsr #6
   11fd8:	andeq	r2, r1, ip, ror #7
   11fdc:	ldrdeq	r2, [r1], -r4
   11fe0:	ldrdeq	r2, [r1], -r4
   11fe4:	ldrdeq	r2, [r1], -r4
   11fe8:	ldrdeq	r2, [r1], -r4
   11fec:	ldrdeq	r2, [r1], -r4
   11ff0:	ldrdeq	r2, [r1], -r4
   11ff4:	ldrdeq	r2, [r1], -r4
   11ff8:	ldrdeq	r2, [r1], -r4
   11ffc:	ldrdeq	r2, [r1], -r4
   12000:	ldrdeq	r2, [r1], -r4
   12004:	ldrdeq	r2, [r1], -r4
   12008:	ldrdeq	r2, [r1], -r4
   1200c:	ldrdeq	r2, [r1], -r4
   12010:	ldrdeq	r2, [r1], -r4
   12014:	ldrdeq	r2, [r1], -r4
   12018:	ldrdeq	r2, [r1], -r4
   1201c:	ldrdeq	r2, [r1], -r4
   12020:	ldrdeq	r2, [r1], -r4
   12024:	ldrdeq	r2, [r1], -r4
   12028:	ldrdeq	r2, [r1], -r4
   1202c:	ldrdeq	r2, [r1], -r4
   12030:	ldrdeq	r2, [r1], -r4
   12034:	ldrdeq	r2, [r1], -r4
   12038:	ldrdeq	r2, [r1], -r4
   1203c:	ldrdeq	r2, [r1], -r4
   12040:	ldrdeq	r2, [r1], -r4
   12044:	ldrdeq	r2, [r1], -r4
   12048:	strdeq	r2, [r1], -ip
   1204c:	ldrdeq	r2, [r1], -r4
   12050:	ldrdeq	r2, [r1], -r4
   12054:	ldrdeq	r2, [r1], -r4
   12058:	ldrdeq	r2, [r1], -r4
   1205c:	ldrdeq	r2, [r1], -r4
   12060:	ldrdeq	r2, [r1], -r4
   12064:	ldrdeq	r2, [r1], -r4
   12068:	ldrdeq	r2, [r1], -r4
   1206c:	ldrdeq	r2, [r1], -r4
   12070:	ldrdeq	r2, [r1], -r4
   12074:	ldrdeq	r2, [r1], -r4
   12078:	ldrdeq	r2, [r1], -r4
   1207c:	ldrdeq	r2, [r1], -r4
   12080:	ldrdeq	r2, [r1], -r4
   12084:	ldrdeq	r2, [r1], -r4
   12088:	ldrdeq	r2, [r1], -r4
   1208c:	ldrdeq	r2, [r1], -r4
   12090:	ldrdeq	r2, [r1], -r4
   12094:	ldrdeq	r2, [r1], -r4
   12098:	ldrdeq	r2, [r1], -r4
   1209c:	ldrdeq	r2, [r1], -r4
   120a0:	ldrdeq	r2, [r1], -r4
   120a4:	ldrdeq	r2, [r1], -r4
   120a8:	ldrdeq	r2, [r1], -r4
   120ac:	ldrdeq	r2, [r1], -r4
   120b0:	ldrdeq	r2, [r1], -r4
   120b4:	ldrdeq	r2, [r1], -r4
   120b8:	ldrdeq	r2, [r1], -r4
   120bc:	ldrdeq	r2, [r1], -r4
   120c0:	ldrdeq	r2, [r1], -r4
   120c4:	muleq	r1, r0, r1
   120c8:	ldrdeq	r2, [r1], -r4
   120cc:	muleq	r1, r0, r1
   120d0:			; <UNDEFINED> instruction: 0x000121bc
   120d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   120d8:	tst	r0, #1
   120dc:	bne	12108 <__assert_fail@plt+0x1194>
   120e0:	ubfx	r0, r4, #5, #3
   120e4:	ldr	r1, [fp, #16]
   120e8:	ldr	r0, [r1, r0, lsl #2]
   120ec:	and	r1, r4, #31
   120f0:	mov	r2, #1
   120f4:	tst	r0, r2, lsl r1
   120f8:	beq	12108 <__assert_fail@plt+0x1194>
   120fc:	mov	r0, r4
   12100:	mov	r1, r6
   12104:	b	1211c <__assert_fail@plt+0x11a8>
   12108:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1210c:	cmp	r0, #0
   12110:	mov	r0, r4
   12114:	mov	r1, r6
   12118:	beq	12454 <__assert_fail@plt+0x14e0>
   1211c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12120:	tst	r2, #1
   12124:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12128:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1212c:	subs	r2, r2, #2
   12130:	movwne	r2, #1
   12134:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12138:	orr	r2, r2, r3
   1213c:	tst	r2, #1
   12140:	bne	1217c <__assert_fail@plt+0x1208>
   12144:	cmp	r8, sl
   12148:	movcc	r2, #39	; 0x27
   1214c:	strbcc	r2, [r5, r8]
   12150:	add	r2, r8, #1
   12154:	cmp	r2, sl
   12158:	movcc	r3, #36	; 0x24
   1215c:	strbcc	r3, [r5, r2]
   12160:	add	r2, r8, #2
   12164:	cmp	r2, sl
   12168:	movcc	r3, #39	; 0x27
   1216c:	strbcc	r3, [r5, r2]
   12170:	add	r8, r8, #3
   12174:	mov	r2, #1
   12178:	str	r2, [fp, #-56]	; 0xffffffc8
   1217c:	cmp	r8, sl
   12180:	movcc	r2, #92	; 0x5c
   12184:	strbcc	r2, [r5, r8]
   12188:	add	r8, r8, #1
   1218c:	b	12498 <__assert_fail@plt+0x1524>
   12190:	cmp	lr, #1
   12194:	beq	121bc <__assert_fail@plt+0x1248>
   12198:	mov	r6, #0
   1219c:	cmn	lr, #1
   121a0:	bne	121c8 <__assert_fail@plt+0x1254>
   121a4:	ldrb	r0, [ip, #1]
   121a8:	cmp	r0, #0
   121ac:	beq	121bc <__assert_fail@plt+0x1248>
   121b0:	mvn	lr, #0
   121b4:	mov	r9, #0
   121b8:	b	120d4 <__assert_fail@plt+0x1160>
   121bc:	mov	r6, #0
   121c0:	cmp	r7, #0
   121c4:	beq	121d0 <__assert_fail@plt+0x125c>
   121c8:	mov	r9, #0
   121cc:	b	120d4 <__assert_fail@plt+0x1160>
   121d0:	mov	r1, #1
   121d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121d8:	cmp	r0, #2
   121dc:	bne	121f4 <__assert_fail@plt+0x1280>
   121e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121e4:	tst	r0, #1
   121e8:	mov	r6, r1
   121ec:	beq	120d4 <__assert_fail@plt+0x1160>
   121f0:	b	12a18 <__assert_fail@plt+0x1aa4>
   121f4:	mov	r6, r1
   121f8:	b	120d4 <__assert_fail@plt+0x1160>
   121fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12200:	cmp	r0, #2
   12204:	bne	12438 <__assert_fail@plt+0x14c4>
   12208:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1220c:	tst	r0, #1
   12210:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12214:	mov	r9, #0
   12218:	b	1244c <__assert_fail@plt+0x14d8>
   1221c:	mov	r0, #102	; 0x66
   12220:	b	124c0 <__assert_fail@plt+0x154c>
   12224:	mov	r2, #116	; 0x74
   12228:	b	12238 <__assert_fail@plt+0x12c4>
   1222c:	mov	r0, #98	; 0x62
   12230:	b	124c0 <__assert_fail@plt+0x154c>
   12234:	mov	r2, #114	; 0x72
   12238:	ldr	r0, [sp, #72]	; 0x48
   1223c:	tst	r0, #1
   12240:	mov	r0, r2
   12244:	bne	124c0 <__assert_fail@plt+0x154c>
   12248:	b	12a18 <__assert_fail@plt+0x1aa4>
   1224c:	ldr	r0, [sp, #92]	; 0x5c
   12250:	tst	r0, #1
   12254:	beq	124dc <__assert_fail@plt+0x1568>
   12258:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1225c:	tst	r0, #1
   12260:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12264:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12268:	subs	r0, r0, #2
   1226c:	movwne	r0, #1
   12270:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12274:	orr	r0, r0, r1
   12278:	tst	r0, #1
   1227c:	bne	122b8 <__assert_fail@plt+0x1344>
   12280:	cmp	r8, sl
   12284:	movcc	r0, #39	; 0x27
   12288:	strbcc	r0, [r5, r8]
   1228c:	add	r0, r8, #1
   12290:	cmp	r0, sl
   12294:	movcc	r1, #36	; 0x24
   12298:	strbcc	r1, [r5, r0]
   1229c:	add	r0, r8, #2
   122a0:	cmp	r0, sl
   122a4:	movcc	r1, #39	; 0x27
   122a8:	strbcc	r1, [r5, r0]
   122ac:	add	r8, r8, #3
   122b0:	mov	r0, #1
   122b4:	str	r0, [fp, #-56]	; 0xffffffc8
   122b8:	cmp	r8, sl
   122bc:	movcc	r0, #92	; 0x5c
   122c0:	strbcc	r0, [r5, r8]
   122c4:	add	r0, r8, #1
   122c8:	mov	r6, #0
   122cc:	mov	r9, #1
   122d0:	mov	r4, #48	; 0x30
   122d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122d8:	cmp	r1, #2
   122dc:	beq	126a0 <__assert_fail@plt+0x172c>
   122e0:	add	r1, r7, #1
   122e4:	cmp	r1, lr
   122e8:	bcs	126a0 <__assert_fail@plt+0x172c>
   122ec:	ldrb	r1, [ip, r1]
   122f0:	sub	r1, r1, #48	; 0x30
   122f4:	uxtb	r1, r1
   122f8:	cmp	r1, #9
   122fc:	bhi	126a0 <__assert_fail@plt+0x172c>
   12300:	cmp	r0, sl
   12304:	movcc	r1, #48	; 0x30
   12308:	strbcc	r1, [r5, r0]
   1230c:	add	r0, r8, #2
   12310:	cmp	r0, sl
   12314:	movcc	r1, #48	; 0x30
   12318:	strbcc	r1, [r5, r0]
   1231c:	add	r8, r8, #3
   12320:	b	120d4 <__assert_fail@plt+0x1160>
   12324:	mov	r9, #0
   12328:	mov	r4, #63	; 0x3f
   1232c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12330:	cmp	r0, #5
   12334:	beq	126a8 <__assert_fail@plt+0x1734>
   12338:	cmp	r0, #2
   1233c:	bne	12750 <__assert_fail@plt+0x17dc>
   12340:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12344:	tst	r0, #1
   12348:	mov	r6, #0
   1234c:	beq	120d4 <__assert_fail@plt+0x1160>
   12350:	b	12a18 <__assert_fail@plt+0x1aa4>
   12354:	mov	r0, #118	; 0x76
   12358:	b	124c0 <__assert_fail@plt+0x154c>
   1235c:	mov	r4, #39	; 0x27
   12360:	mov	r0, #1
   12364:	str	r0, [sp, #64]	; 0x40
   12368:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1236c:	cmp	r0, #2
   12370:	bne	124f8 <__assert_fail@plt+0x1584>
   12374:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12378:	tst	r0, #1
   1237c:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12380:	ldr	r2, [sp, #84]	; 0x54
   12384:	cmp	r2, #0
   12388:	mov	r0, r2
   1238c:	movwne	r0, #1
   12390:	clz	r1, sl
   12394:	lsr	r1, r1, #5
   12398:	orrs	r0, r0, r1
   1239c:	moveq	r2, sl
   123a0:	str	r2, [sp, #84]	; 0x54
   123a4:	moveq	sl, r0
   123a8:	cmp	r8, sl
   123ac:	movcc	r0, #39	; 0x27
   123b0:	strbcc	r0, [r5, r8]
   123b4:	add	r0, r8, #1
   123b8:	cmp	r0, sl
   123bc:	movcc	r1, #92	; 0x5c
   123c0:	strbcc	r1, [r5, r0]
   123c4:	add	r0, r8, #2
   123c8:	cmp	r0, sl
   123cc:	movcc	r1, #39	; 0x27
   123d0:	strbcc	r1, [r5, r0]
   123d4:	add	r8, r8, #3
   123d8:	mov	r0, #0
   123dc:	str	r0, [fp, #-56]	; 0xffffffc8
   123e0:	mov	r9, #0
   123e4:	mov	r6, #1
   123e8:	b	120d4 <__assert_fail@plt+0x1160>
   123ec:	ldr	r0, [sp, #44]	; 0x2c
   123f0:	cmp	r0, #1
   123f4:	bne	12500 <__assert_fail@plt+0x158c>
   123f8:	str	lr, [sp, #32]
   123fc:	bl	10e90 <__ctype_b_loc@plt>
   12400:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12404:	ldr	r0, [r0]
   12408:	add	r0, r0, r4, lsl #1
   1240c:	ldrb	r0, [r0, #1]
   12410:	ubfx	r6, r0, #6, #1
   12414:	mov	r2, #1
   12418:	ldr	r0, [sp, #60]	; 0x3c
   1241c:	orr	r1, r6, r0
   12420:	cmp	r2, #1
   12424:	bhi	12758 <__assert_fail@plt+0x17e4>
   12428:	tst	r1, #1
   1242c:	beq	12758 <__assert_fail@plt+0x17e4>
   12430:	ldr	lr, [sp, #32]
   12434:	b	120d4 <__assert_fail@plt+0x1160>
   12438:	mov	r9, #0
   1243c:	mov	r0, #92	; 0x5c
   12440:	ldr	r1, [sp, #56]	; 0x38
   12444:	cmp	r1, #0
   12448:	beq	124c0 <__assert_fail@plt+0x154c>
   1244c:	mov	r4, #92	; 0x5c
   12450:	mov	r6, #0
   12454:	cmp	r9, #0
   12458:	bne	12490 <__assert_fail@plt+0x151c>
   1245c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12460:	tst	r0, #1
   12464:	beq	12490 <__assert_fail@plt+0x151c>
   12468:	cmp	r8, sl
   1246c:	movcc	r0, #39	; 0x27
   12470:	strbcc	r0, [r5, r8]
   12474:	add	r0, r8, #1
   12478:	cmp	r0, sl
   1247c:	movcc	r1, #39	; 0x27
   12480:	strbcc	r1, [r5, r0]
   12484:	add	r8, r8, #2
   12488:	mov	r0, #0
   1248c:	str	r0, [fp, #-56]	; 0xffffffc8
   12490:	mov	r1, r6
   12494:	mov	r0, r4
   12498:	cmp	r8, sl
   1249c:	strbcc	r0, [r5, r8]
   124a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   124a4:	and	r0, r0, r1
   124a8:	str	r0, [fp, #-48]	; 0xffffffd0
   124ac:	add	r8, r8, #1
   124b0:	add	r7, r7, #1
   124b4:	cmn	lr, #1
   124b8:	bne	11e0c <__assert_fail@plt+0xe98>
   124bc:	b	11e18 <__assert_fail@plt+0xea4>
   124c0:	mov	r9, #0
   124c4:	ldr	r1, [sp, #92]	; 0x5c
   124c8:	tst	r1, #1
   124cc:	mov	r6, #0
   124d0:	mov	r1, #0
   124d4:	beq	120d4 <__assert_fail@plt+0x1160>
   124d8:	b	1211c <__assert_fail@plt+0x11a8>
   124dc:	mov	r4, #0
   124e0:	ldr	r0, [sp, #40]	; 0x28
   124e4:	cmp	r0, #0
   124e8:	mov	r9, #0
   124ec:	mov	r6, #0
   124f0:	beq	120d4 <__assert_fail@plt+0x1160>
   124f4:	b	124b0 <__assert_fail@plt+0x153c>
   124f8:	mov	r6, #1
   124fc:	b	120d4 <__assert_fail@plt+0x1160>
   12500:	mov	r0, #0
   12504:	str	r0, [fp, #-36]	; 0xffffffdc
   12508:	str	r0, [fp, #-40]	; 0xffffffd8
   1250c:	cmn	lr, #1
   12510:	bne	12524 <__assert_fail@plt+0x15b0>
   12514:	mov	r0, ip
   12518:	bl	10eb4 <strlen@plt>
   1251c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12520:	mov	lr, r0
   12524:	ldr	r0, [sp, #76]	; 0x4c
   12528:	add	r0, r0, r7
   1252c:	str	r0, [sp, #24]
   12530:	mov	r6, #1
   12534:	mov	r2, #0
   12538:	sub	r0, fp, #40	; 0x28
   1253c:	mov	r3, r0
   12540:	str	r5, [sp, #28]
   12544:	str	lr, [sp, #32]
   12548:	b	1258c <__assert_fail@plt+0x1618>
   1254c:	ldr	r5, [sp, #52]	; 0x34
   12550:	add	r5, r0, r5
   12554:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12558:	bl	10de8 <iswprint@plt>
   1255c:	cmp	r0, #0
   12560:	movwne	r0, #1
   12564:	and	r6, r6, r0
   12568:	sub	r0, fp, #40	; 0x28
   1256c:	bl	10dac <mbsinit@plt>
   12570:	sub	r3, fp, #40	; 0x28
   12574:	mov	r2, r5
   12578:	ldr	lr, [sp, #32]
   1257c:	cmp	r0, #0
   12580:	ldr	r5, [sp, #28]
   12584:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12588:	bne	12418 <__assert_fail@plt+0x14a4>
   1258c:	str	r2, [sp, #52]	; 0x34
   12590:	add	r0, r2, r7
   12594:	add	r1, ip, r0
   12598:	str	r0, [sp, #48]	; 0x30
   1259c:	sub	r2, lr, r0
   125a0:	sub	r0, fp, #44	; 0x2c
   125a4:	bl	14974 <__assert_fail@plt+0x3a00>
   125a8:	cmp	r0, #0
   125ac:	beq	12924 <__assert_fail@plt+0x19b0>
   125b0:	cmn	r0, #1
   125b4:	beq	128e0 <__assert_fail@plt+0x196c>
   125b8:	cmn	r0, #2
   125bc:	ldr	lr, [sp, #32]
   125c0:	beq	128e8 <__assert_fail@plt+0x1974>
   125c4:	cmp	r0, #2
   125c8:	mov	r1, #0
   125cc:	movwcc	r1, #1
   125d0:	ldr	r2, [sp, #68]	; 0x44
   125d4:	eor	r2, r2, #1
   125d8:	orrs	r1, r2, r1
   125dc:	bne	1254c <__assert_fail@plt+0x15d8>
   125e0:	ldr	r1, [sp, #52]	; 0x34
   125e4:	ldr	r2, [sp, #24]
   125e8:	add	r1, r2, r1
   125ec:	sub	r2, r0, #1
   125f0:	b	12600 <__assert_fail@plt+0x168c>
   125f4:	add	r1, r1, #1
   125f8:	subs	r2, r2, #1
   125fc:	beq	1254c <__assert_fail@plt+0x15d8>
   12600:	ldrb	r3, [r1]
   12604:	sub	r3, r3, #91	; 0x5b
   12608:	cmp	r3, #33	; 0x21
   1260c:	bhi	125f4 <__assert_fail@plt+0x1680>
   12610:	add	r5, pc, #0
   12614:	ldr	pc, [r5, r3, lsl #2]
   12618:	andeq	r2, r1, r0, lsl sl
   1261c:	andeq	r2, r1, r0, lsl sl
   12620:	strdeq	r2, [r1], -r4
   12624:	andeq	r2, r1, r0, lsl sl
   12628:	strdeq	r2, [r1], -r4
   1262c:	andeq	r2, r1, r0, lsl sl
   12630:	strdeq	r2, [r1], -r4
   12634:	strdeq	r2, [r1], -r4
   12638:	strdeq	r2, [r1], -r4
   1263c:	strdeq	r2, [r1], -r4
   12640:	strdeq	r2, [r1], -r4
   12644:	strdeq	r2, [r1], -r4
   12648:	strdeq	r2, [r1], -r4
   1264c:	strdeq	r2, [r1], -r4
   12650:	strdeq	r2, [r1], -r4
   12654:	strdeq	r2, [r1], -r4
   12658:	strdeq	r2, [r1], -r4
   1265c:	strdeq	r2, [r1], -r4
   12660:	strdeq	r2, [r1], -r4
   12664:	strdeq	r2, [r1], -r4
   12668:	strdeq	r2, [r1], -r4
   1266c:	strdeq	r2, [r1], -r4
   12670:	strdeq	r2, [r1], -r4
   12674:	strdeq	r2, [r1], -r4
   12678:	strdeq	r2, [r1], -r4
   1267c:	strdeq	r2, [r1], -r4
   12680:	strdeq	r2, [r1], -r4
   12684:	strdeq	r2, [r1], -r4
   12688:	strdeq	r2, [r1], -r4
   1268c:	strdeq	r2, [r1], -r4
   12690:	strdeq	r2, [r1], -r4
   12694:	strdeq	r2, [r1], -r4
   12698:	strdeq	r2, [r1], -r4
   1269c:	andeq	r2, r1, r0, lsl sl
   126a0:	mov	r8, r0
   126a4:	b	120d4 <__assert_fail@plt+0x1160>
   126a8:	ldr	r0, [sp, #36]	; 0x24
   126ac:	cmp	r0, #0
   126b0:	beq	12750 <__assert_fail@plt+0x17dc>
   126b4:	add	r0, r7, #2
   126b8:	cmp	r0, lr
   126bc:	bcs	12750 <__assert_fail@plt+0x17dc>
   126c0:	add	r1, r7, ip
   126c4:	ldrb	r1, [r1, #1]
   126c8:	cmp	r1, #63	; 0x3f
   126cc:	bne	12750 <__assert_fail@plt+0x17dc>
   126d0:	ldrb	r1, [ip, r0]
   126d4:	sub	r2, r1, #33	; 0x21
   126d8:	cmp	r2, #29
   126dc:	bhi	12750 <__assert_fail@plt+0x17dc>
   126e0:	mov	r3, #1
   126e4:	movw	r6, #20929	; 0x51c1
   126e8:	movt	r6, #14336	; 0x3800
   126ec:	tst	r6, r3, lsl r2
   126f0:	beq	12750 <__assert_fail@plt+0x17dc>
   126f4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   126f8:	tst	r2, #1
   126fc:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12700:	cmp	r8, sl
   12704:	movcc	r2, #63	; 0x3f
   12708:	strbcc	r2, [r5, r8]
   1270c:	add	r2, r8, #1
   12710:	cmp	r2, sl
   12714:	movcc	r3, #34	; 0x22
   12718:	strbcc	r3, [r5, r2]
   1271c:	add	r2, r8, #2
   12720:	cmp	r2, sl
   12724:	movcc	r3, #34	; 0x22
   12728:	strbcc	r3, [r5, r2]
   1272c:	add	r2, r8, #3
   12730:	cmp	r2, sl
   12734:	movcc	r3, #63	; 0x3f
   12738:	strbcc	r3, [r5, r2]
   1273c:	add	r8, r8, #4
   12740:	mov	r7, r0
   12744:	mov	r4, r1
   12748:	mov	r6, #0
   1274c:	b	120d4 <__assert_fail@plt+0x1160>
   12750:	mov	r6, #0
   12754:	b	120d4 <__assert_fail@plt+0x1160>
   12758:	add	r0, r2, r7
   1275c:	str	r0, [sp, #52]	; 0x34
   12760:	mov	r2, #0
   12764:	ldr	lr, [sp, #32]
   12768:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1276c:	str	r1, [sp, #48]	; 0x30
   12770:	tst	r1, #1
   12774:	bne	12850 <__assert_fail@plt+0x18dc>
   12778:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1277c:	tst	r1, #1
   12780:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12784:	mov	r3, r0
   12788:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1278c:	subs	r1, r0, #2
   12790:	movwne	r1, #1
   12794:	orr	r1, r1, r3
   12798:	tst	r1, #1
   1279c:	bne	127d4 <__assert_fail@plt+0x1860>
   127a0:	cmp	r8, sl
   127a4:	movcc	r0, #39	; 0x27
   127a8:	strbcc	r0, [r5, r8]
   127ac:	add	r2, r8, #1
   127b0:	cmp	r2, sl
   127b4:	movcc	r0, #36	; 0x24
   127b8:	strbcc	r0, [r5, r2]
   127bc:	add	r2, r8, #2
   127c0:	cmp	r2, sl
   127c4:	movcc	r0, #39	; 0x27
   127c8:	strbcc	r0, [r5, r2]
   127cc:	add	r8, r8, #3
   127d0:	mov	r3, #1
   127d4:	cmp	r8, sl
   127d8:	movcc	r1, #92	; 0x5c
   127dc:	strbcc	r1, [r5, r8]
   127e0:	add	r2, r8, #1
   127e4:	cmp	r2, sl
   127e8:	bcs	127fc <__assert_fail@plt+0x1888>
   127ec:	uxtb	r1, r4
   127f0:	mov	r0, #48	; 0x30
   127f4:	orr	r1, r0, r1, lsr #6
   127f8:	strb	r1, [r5, r2]
   127fc:	add	r2, r8, #2
   12800:	cmp	r2, sl
   12804:	lsrcc	r1, r4, #3
   12808:	movcc	r0, #6
   1280c:	bficc	r1, r0, #3, #29
   12810:	strbcc	r1, [r5, r2]
   12814:	mov	r0, #6
   12818:	bfi	r4, r0, #3, #29
   1281c:	add	r8, r8, #3
   12820:	mov	r2, #1
   12824:	mov	r0, r3
   12828:	b	12874 <__assert_fail@plt+0x1900>
   1282c:	cmp	r8, sl
   12830:	strbcc	r4, [r5, r8]
   12834:	ldr	r1, [sp, #76]	; 0x4c
   12838:	ldrb	r4, [r1, r7]
   1283c:	add	r8, r8, #1
   12840:	mov	r7, r3
   12844:	ldr	r1, [sp, #48]	; 0x30
   12848:	tst	r1, #1
   1284c:	beq	12778 <__assert_fail@plt+0x1804>
   12850:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12854:	tst	r1, #1
   12858:	beq	1286c <__assert_fail@plt+0x18f8>
   1285c:	cmp	r8, sl
   12860:	movcc	r1, #92	; 0x5c
   12864:	strbcc	r1, [r5, r8]
   12868:	add	r8, r8, #1
   1286c:	mov	r1, #0
   12870:	str	r1, [fp, #-52]	; 0xffffffcc
   12874:	and	r9, r2, #1
   12878:	add	r3, r7, #1
   1287c:	ldr	r1, [sp, #52]	; 0x34
   12880:	cmp	r1, r3
   12884:	bls	128c8 <__assert_fail@plt+0x1954>
   12888:	cmp	r9, #0
   1288c:	movwne	r9, #1
   12890:	mvn	r1, r0
   12894:	orr	r1, r1, r9
   12898:	tst	r1, #1
   1289c:	bne	1282c <__assert_fail@plt+0x18b8>
   128a0:	cmp	r8, sl
   128a4:	movcc	r1, #39	; 0x27
   128a8:	strbcc	r1, [r5, r8]
   128ac:	add	r1, r8, #1
   128b0:	cmp	r1, sl
   128b4:	movcc	r0, #39	; 0x27
   128b8:	strbcc	r0, [r5, r1]
   128bc:	add	r8, r8, #2
   128c0:	mov	r0, #0
   128c4:	b	1282c <__assert_fail@plt+0x18b8>
   128c8:	str	r0, [fp, #-56]	; 0xffffffc8
   128cc:	cmp	r9, #0
   128d0:	movwne	r9, #1
   128d4:	cmp	r9, #0
   128d8:	beq	1245c <__assert_fail@plt+0x14e8>
   128dc:	b	12490 <__assert_fail@plt+0x151c>
   128e0:	mov	r6, #0
   128e4:	b	12924 <__assert_fail@plt+0x19b0>
   128e8:	mov	r6, #0
   128ec:	ldr	r0, [sp, #48]	; 0x30
   128f0:	cmp	r0, lr
   128f4:	bcs	12924 <__assert_fail@plt+0x19b0>
   128f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128fc:	add	r0, ip, r7
   12900:	ldr	r2, [sp, #52]	; 0x34
   12904:	ldrb	r1, [r0, r2]
   12908:	cmp	r1, #0
   1290c:	beq	12418 <__assert_fail@plt+0x14a4>
   12910:	add	r2, r2, #1
   12914:	add	r1, r7, r2
   12918:	cmp	r1, lr
   1291c:	bcc	12904 <__assert_fail@plt+0x1990>
   12920:	b	12418 <__assert_fail@plt+0x14a4>
   12924:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12928:	ldr	r2, [sp, #52]	; 0x34
   1292c:	b	12418 <__assert_fail@plt+0x14a4>
   12930:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12934:	eor	r0, r1, #2
   12938:	orr	r0, r0, r8
   1293c:	clz	r0, r0
   12940:	lsr	r0, r0, #5
   12944:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12948:	tst	r3, r0
   1294c:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12950:	mov	r6, r5
   12954:	subs	r0, r1, #2
   12958:	movwne	r0, #1
   1295c:	orr	r0, r3, r0
   12960:	tst	r0, #1
   12964:	ldr	r2, [sp, #92]	; 0x5c
   12968:	ldreq	r0, [sp, #64]	; 0x40
   1296c:	eoreq	r0, r0, #1
   12970:	tsteq	r0, #1
   12974:	bne	129b4 <__assert_fail@plt+0x1a40>
   12978:	mov	r9, lr
   1297c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12980:	tst	r0, #1
   12984:	bne	12a80 <__assert_fail@plt+0x1b0c>
   12988:	ldr	r0, [sp, #84]	; 0x54
   1298c:	cmp	r0, #0
   12990:	beq	129b4 <__assert_fail@plt+0x1a40>
   12994:	mov	r0, #0
   12998:	str	r0, [fp, #-48]	; 0xffffffd0
   1299c:	mov	r1, #2
   129a0:	cmp	sl, #0
   129a4:	mov	r0, r2
   129a8:	mov	r4, r3
   129ac:	ldr	r7, [sp, #84]	; 0x54
   129b0:	beq	11b8c <__assert_fail@plt+0xc18>
   129b4:	ldr	r1, [fp, #-84]	; 0xffffffac
   129b8:	clz	r0, r1
   129bc:	lsr	r0, r0, #5
   129c0:	orr	r0, r0, r3
   129c4:	tst	r0, #1
   129c8:	bne	129f4 <__assert_fail@plt+0x1a80>
   129cc:	ldrb	r0, [r1]
   129d0:	cmp	r0, #0
   129d4:	beq	129f4 <__assert_fail@plt+0x1a80>
   129d8:	add	r1, r1, #1
   129dc:	cmp	r8, sl
   129e0:	strbcc	r0, [r6, r8]
   129e4:	add	r8, r8, #1
   129e8:	ldrb	r0, [r1], #1
   129ec:	cmp	r0, #0
   129f0:	bne	129dc <__assert_fail@plt+0x1a68>
   129f4:	cmp	r8, sl
   129f8:	movcc	r0, #0
   129fc:	strbcc	r0, [r6, r8]
   12a00:	b	12a74 <__assert_fail@plt+0x1b00>
   12a04:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a08:	mov	lr, r4
   12a0c:	b	12a18 <__assert_fail@plt+0x1aa4>
   12a10:	ldr	r5, [sp, #28]
   12a14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a18:	mov	r0, #0
   12a1c:	ldr	r1, [fp, #12]
   12a20:	bic	r1, r1, #2
   12a24:	mov	r2, #2
   12a28:	ldr	r3, [sp, #92]	; 0x5c
   12a2c:	tst	r3, #1
   12a30:	movwne	r2, #4
   12a34:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12a38:	cmp	r3, #2
   12a3c:	movne	r2, r3
   12a40:	str	r2, [sp]
   12a44:	str	r1, [sp, #4]
   12a48:	str	r0, [sp, #8]
   12a4c:	ldr	r0, [sp, #80]	; 0x50
   12a50:	str	r0, [sp, #12]
   12a54:	ldr	r0, [sp, #88]	; 0x58
   12a58:	str	r0, [sp, #16]
   12a5c:	mov	r0, r5
   12a60:	mov	r1, sl
   12a64:	mov	r2, ip
   12a68:	mov	r3, lr
   12a6c:	bl	11b00 <__assert_fail@plt+0xb8c>
   12a70:	mov	r8, r0
   12a74:	mov	r0, r8
   12a78:	sub	sp, fp, #28
   12a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a80:	mov	r0, #5
   12a84:	str	r0, [sp]
   12a88:	ldr	r0, [fp, #12]
   12a8c:	str	r0, [sp, #4]
   12a90:	ldr	r0, [fp, #16]
   12a94:	str	r0, [sp, #8]
   12a98:	ldr	r0, [sp, #80]	; 0x50
   12a9c:	str	r0, [sp, #12]
   12aa0:	ldr	r0, [sp, #88]	; 0x58
   12aa4:	str	r0, [sp, #16]
   12aa8:	mov	r0, r6
   12aac:	ldr	r1, [sp, #84]	; 0x54
   12ab0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12ab4:	mov	r3, r9
   12ab8:	b	12a6c <__assert_fail@plt+0x1af8>
   12abc:	bl	10f68 <abort@plt>
   12ac0:	mov	r3, r2
   12ac4:	mov	r2, #0
   12ac8:	b	12acc <__assert_fail@plt+0x1b58>
   12acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad0:	add	fp, sp, #28
   12ad4:	sub	sp, sp, #36	; 0x24
   12ad8:	mov	r4, r2
   12adc:	str	r2, [sp, #24]
   12ae0:	mov	r5, r1
   12ae4:	mov	r6, r0
   12ae8:	str	r0, [sp, #20]
   12aec:	movw	r8, #24912	; 0x6150
   12af0:	movt	r8, #2
   12af4:	cmp	r3, #0
   12af8:	movne	r8, r3
   12afc:	bl	10ecc <__errno_location@plt>
   12b00:	str	r0, [sp, #28]
   12b04:	ldm	r8, {r3, r9}
   12b08:	ldr	r1, [r8, #40]	; 0x28
   12b0c:	ldr	r2, [r8, #44]	; 0x2c
   12b10:	ldr	r7, [r0]
   12b14:	str	r7, [sp, #32]
   12b18:	add	sl, r8, #8
   12b1c:	cmp	r4, #0
   12b20:	orreq	r9, r9, #1
   12b24:	stm	sp, {r3, r9, sl}
   12b28:	str	r1, [sp, #12]
   12b2c:	str	r2, [sp, #16]
   12b30:	mov	r0, #0
   12b34:	mov	r1, #0
   12b38:	mov	r2, r6
   12b3c:	mov	r3, r5
   12b40:	mov	r7, r5
   12b44:	bl	11b00 <__assert_fail@plt+0xb8c>
   12b48:	mov	r5, r0
   12b4c:	add	r4, r0, #1
   12b50:	mov	r0, r4
   12b54:	bl	139d4 <__assert_fail@plt+0x2a60>
   12b58:	mov	r6, r0
   12b5c:	ldr	r0, [r8]
   12b60:	ldr	r1, [r8, #40]	; 0x28
   12b64:	ldr	r2, [r8, #44]	; 0x2c
   12b68:	stm	sp, {r0, r9, sl}
   12b6c:	str	r1, [sp, #12]
   12b70:	str	r2, [sp, #16]
   12b74:	mov	r0, r6
   12b78:	mov	r1, r4
   12b7c:	ldr	r2, [sp, #20]
   12b80:	mov	r3, r7
   12b84:	bl	11b00 <__assert_fail@plt+0xb8c>
   12b88:	ldr	r0, [sp, #24]
   12b8c:	ldr	r1, [sp, #32]
   12b90:	ldr	r2, [sp, #28]
   12b94:	str	r1, [r2]
   12b98:	cmp	r0, #0
   12b9c:	strne	r5, [r0]
   12ba0:	mov	r0, r6
   12ba4:	sub	sp, fp, #28
   12ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bb0:	add	fp, sp, #24
   12bb4:	movw	r8, #24800	; 0x60e0
   12bb8:	movt	r8, #2
   12bbc:	ldr	r4, [r8]
   12bc0:	movw	r5, #24804	; 0x60e4
   12bc4:	movt	r5, #2
   12bc8:	ldr	r0, [r5]
   12bcc:	cmp	r0, #2
   12bd0:	blt	12bfc <__assert_fail@plt+0x1c88>
   12bd4:	add	r7, r4, #12
   12bd8:	mov	r6, #0
   12bdc:	ldr	r0, [r7, r6, lsl #3]
   12be0:	bl	1481c <__assert_fail@plt+0x38a8>
   12be4:	add	r0, r6, #1
   12be8:	ldr	r1, [r5]
   12bec:	add	r2, r6, #2
   12bf0:	cmp	r2, r1
   12bf4:	mov	r6, r0
   12bf8:	blt	12bdc <__assert_fail@plt+0x1c68>
   12bfc:	ldr	r0, [r4, #4]
   12c00:	movw	r9, #24960	; 0x6180
   12c04:	movt	r9, #2
   12c08:	cmp	r0, r9
   12c0c:	movw	r7, #24808	; 0x60e8
   12c10:	movt	r7, #2
   12c14:	beq	12c24 <__assert_fail@plt+0x1cb0>
   12c18:	bl	1481c <__assert_fail@plt+0x38a8>
   12c1c:	mov	r0, #256	; 0x100
   12c20:	stm	r7, {r0, r9}
   12c24:	cmp	r4, r7
   12c28:	beq	12c38 <__assert_fail@plt+0x1cc4>
   12c2c:	mov	r0, r4
   12c30:	bl	1481c <__assert_fail@plt+0x38a8>
   12c34:	str	r7, [r8]
   12c38:	mov	r0, #1
   12c3c:	str	r0, [r5]
   12c40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c44:	movw	r3, #24912	; 0x6150
   12c48:	movt	r3, #2
   12c4c:	mvn	r2, #0
   12c50:	b	12c54 <__assert_fail@plt+0x1ce0>
   12c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c58:	add	fp, sp, #28
   12c5c:	sub	sp, sp, #44	; 0x2c
   12c60:	mov	r7, r3
   12c64:	str	r2, [sp, #36]	; 0x24
   12c68:	str	r1, [sp, #32]
   12c6c:	mov	r5, r0
   12c70:	bl	10ecc <__errno_location@plt>
   12c74:	cmp	r5, #0
   12c78:	bmi	12de8 <__assert_fail@plt+0x1e74>
   12c7c:	cmn	r5, #-2147483647	; 0x80000001
   12c80:	beq	12de8 <__assert_fail@plt+0x1e74>
   12c84:	movw	r4, #24800	; 0x60e0
   12c88:	movt	r4, #2
   12c8c:	ldr	r6, [r4]
   12c90:	str	r0, [sp, #28]
   12c94:	ldr	r0, [r0]
   12c98:	str	r0, [sp, #24]
   12c9c:	movw	r8, #24804	; 0x60e4
   12ca0:	movt	r8, #2
   12ca4:	ldr	r1, [r8]
   12ca8:	cmp	r1, r5
   12cac:	ble	12cb8 <__assert_fail@plt+0x1d44>
   12cb0:	mov	sl, r6
   12cb4:	b	12d24 <__assert_fail@plt+0x1db0>
   12cb8:	str	r1, [fp, #-32]	; 0xffffffe0
   12cbc:	mov	r0, #8
   12cc0:	str	r0, [sp]
   12cc4:	movw	r9, #24808	; 0x60e8
   12cc8:	movt	r9, #2
   12ccc:	subs	r0, r6, r9
   12cd0:	movne	r0, r6
   12cd4:	sub	r1, r5, r1
   12cd8:	add	r2, r1, #1
   12cdc:	sub	r1, fp, #32
   12ce0:	mvn	r3, #-2147483648	; 0x80000000
   12ce4:	bl	13ab0 <__assert_fail@plt+0x2b3c>
   12ce8:	mov	sl, r0
   12cec:	str	r0, [r4]
   12cf0:	cmp	r6, r9
   12cf4:	bne	12d00 <__assert_fail@plt+0x1d8c>
   12cf8:	ldrd	r0, [r9]
   12cfc:	stm	sl, {r0, r1}
   12d00:	ldr	r1, [r8]
   12d04:	add	r0, sl, r1, lsl #3
   12d08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d0c:	sub	r1, r2, r1
   12d10:	lsl	r2, r1, #3
   12d14:	mov	r1, #0
   12d18:	bl	10ee4 <memset@plt>
   12d1c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d20:	str	r0, [r8]
   12d24:	mov	r9, sl
   12d28:	ldr	r6, [r9, r5, lsl #3]!
   12d2c:	ldr	r4, [r9, #4]!
   12d30:	ldm	r7, {r0, r1}
   12d34:	ldr	r2, [r7, #40]	; 0x28
   12d38:	ldr	r3, [r7, #44]	; 0x2c
   12d3c:	orr	r8, r1, #1
   12d40:	add	r1, r7, #8
   12d44:	stm	sp, {r0, r8}
   12d48:	str	r1, [sp, #20]
   12d4c:	add	r0, sp, #8
   12d50:	stm	r0, {r1, r2, r3}
   12d54:	mov	r0, r4
   12d58:	mov	r1, r6
   12d5c:	ldr	r2, [sp, #32]
   12d60:	ldr	r3, [sp, #36]	; 0x24
   12d64:	bl	11b00 <__assert_fail@plt+0xb8c>
   12d68:	cmp	r6, r0
   12d6c:	bhi	12dd0 <__assert_fail@plt+0x1e5c>
   12d70:	add	r6, r0, #1
   12d74:	str	r6, [sl, r5, lsl #3]
   12d78:	movw	r0, #24960	; 0x6180
   12d7c:	movt	r0, #2
   12d80:	cmp	r4, r0
   12d84:	beq	12d90 <__assert_fail@plt+0x1e1c>
   12d88:	mov	r0, r4
   12d8c:	bl	1481c <__assert_fail@plt+0x38a8>
   12d90:	mov	r0, r6
   12d94:	bl	139d4 <__assert_fail@plt+0x2a60>
   12d98:	mov	r4, r0
   12d9c:	str	r0, [r9]
   12da0:	ldr	r0, [r7]
   12da4:	ldr	r1, [r7, #40]	; 0x28
   12da8:	ldr	r2, [r7, #44]	; 0x2c
   12dac:	stm	sp, {r0, r8}
   12db0:	ldr	r0, [sp, #20]
   12db4:	add	r3, sp, #8
   12db8:	stm	r3, {r0, r1, r2}
   12dbc:	mov	r0, r4
   12dc0:	mov	r1, r6
   12dc4:	ldr	r2, [sp, #32]
   12dc8:	ldr	r3, [sp, #36]	; 0x24
   12dcc:	bl	11b00 <__assert_fail@plt+0xb8c>
   12dd0:	ldr	r0, [sp, #28]
   12dd4:	ldr	r1, [sp, #24]
   12dd8:	str	r1, [r0]
   12ddc:	mov	r0, r4
   12de0:	sub	sp, fp, #28
   12de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de8:	bl	10f68 <abort@plt>
   12dec:	movw	r3, #24912	; 0x6150
   12df0:	movt	r3, #2
   12df4:	b	12c54 <__assert_fail@plt+0x1ce0>
   12df8:	mov	r1, r0
   12dfc:	mov	r0, #0
   12e00:	b	12c44 <__assert_fail@plt+0x1cd0>
   12e04:	mov	r2, r1
   12e08:	mov	r1, r0
   12e0c:	mov	r0, #0
   12e10:	b	12dec <__assert_fail@plt+0x1e78>
   12e14:	push	{r4, r5, r6, sl, fp, lr}
   12e18:	add	fp, sp, #16
   12e1c:	sub	sp, sp, #48	; 0x30
   12e20:	mov	r4, r2
   12e24:	mov	r5, r0
   12e28:	mov	r6, sp
   12e2c:	mov	r0, r6
   12e30:	bl	12e50 <__assert_fail@plt+0x1edc>
   12e34:	mov	r0, r5
   12e38:	mov	r1, r4
   12e3c:	mvn	r2, #0
   12e40:	mov	r3, r6
   12e44:	bl	12c54 <__assert_fail@plt+0x1ce0>
   12e48:	sub	sp, fp, #16
   12e4c:	pop	{r4, r5, r6, sl, fp, pc}
   12e50:	push	{fp, lr}
   12e54:	mov	fp, sp
   12e58:	vmov.i32	q8, #0	; 0x00000000
   12e5c:	mov	r2, #32
   12e60:	mov	r3, r0
   12e64:	vst1.32	{d16-d17}, [r3], r2
   12e68:	vst1.32	{d16-d17}, [r3]
   12e6c:	add	r2, r0, #16
   12e70:	vst1.32	{d16-d17}, [r2]
   12e74:	cmp	r1, #10
   12e78:	strne	r1, [r0]
   12e7c:	popne	{fp, pc}
   12e80:	bl	10f68 <abort@plt>
   12e84:	push	{r4, r5, r6, r7, fp, lr}
   12e88:	add	fp, sp, #16
   12e8c:	sub	sp, sp, #48	; 0x30
   12e90:	mov	r4, r3
   12e94:	mov	r5, r2
   12e98:	mov	r6, r0
   12e9c:	mov	r7, sp
   12ea0:	mov	r0, r7
   12ea4:	bl	12e50 <__assert_fail@plt+0x1edc>
   12ea8:	mov	r0, r6
   12eac:	mov	r1, r5
   12eb0:	mov	r2, r4
   12eb4:	mov	r3, r7
   12eb8:	bl	12c54 <__assert_fail@plt+0x1ce0>
   12ebc:	sub	sp, fp, #16
   12ec0:	pop	{r4, r5, r6, r7, fp, pc}
   12ec4:	mov	r2, r1
   12ec8:	mov	r1, r0
   12ecc:	mov	r0, #0
   12ed0:	b	12e14 <__assert_fail@plt+0x1ea0>
   12ed4:	mov	r3, r2
   12ed8:	mov	r2, r1
   12edc:	mov	r1, r0
   12ee0:	mov	r0, #0
   12ee4:	b	12e84 <__assert_fail@plt+0x1f10>
   12ee8:	push	{r4, r5, r6, sl, fp, lr}
   12eec:	add	fp, sp, #16
   12ef0:	sub	sp, sp, #48	; 0x30
   12ef4:	mov	r4, r1
   12ef8:	mov	r5, r0
   12efc:	movw	r0, #24912	; 0x6150
   12f00:	movt	r0, #2
   12f04:	add	r1, r0, #16
   12f08:	mov	r3, #32
   12f0c:	vld1.64	{d16-d17}, [r0], r3
   12f10:	vld1.64	{d18-d19}, [r1]
   12f14:	mov	r6, sp
   12f18:	add	r1, r6, #16
   12f1c:	vld1.64	{d20-d21}, [r0]
   12f20:	vst1.64	{d18-d19}, [r1]
   12f24:	mov	r0, r6
   12f28:	vst1.64	{d16-d17}, [r0], r3
   12f2c:	vst1.64	{d20-d21}, [r0]
   12f30:	mov	r0, r6
   12f34:	mov	r1, r2
   12f38:	mov	r2, #1
   12f3c:	bl	119f4 <__assert_fail@plt+0xa80>
   12f40:	mov	r0, #0
   12f44:	mov	r1, r5
   12f48:	mov	r2, r4
   12f4c:	mov	r3, r6
   12f50:	bl	12c54 <__assert_fail@plt+0x1ce0>
   12f54:	sub	sp, fp, #16
   12f58:	pop	{r4, r5, r6, sl, fp, pc}
   12f5c:	mov	r2, r1
   12f60:	mvn	r1, #0
   12f64:	b	12ee8 <__assert_fail@plt+0x1f74>
   12f68:	mov	r1, #58	; 0x3a
   12f6c:	b	12f5c <__assert_fail@plt+0x1fe8>
   12f70:	mov	r2, #58	; 0x3a
   12f74:	b	12ee8 <__assert_fail@plt+0x1f74>
   12f78:	push	{r4, r5, r6, sl, fp, lr}
   12f7c:	add	fp, sp, #16
   12f80:	sub	sp, sp, #48	; 0x30
   12f84:	mov	r4, r2
   12f88:	mov	r5, r0
   12f8c:	mov	r6, sp
   12f90:	mov	r0, r6
   12f94:	bl	12e50 <__assert_fail@plt+0x1edc>
   12f98:	mov	r0, r6
   12f9c:	mov	r1, #58	; 0x3a
   12fa0:	mov	r2, #1
   12fa4:	bl	119f4 <__assert_fail@plt+0xa80>
   12fa8:	mov	r0, r5
   12fac:	mov	r1, r4
   12fb0:	mvn	r2, #0
   12fb4:	mov	r3, r6
   12fb8:	bl	12c54 <__assert_fail@plt+0x1ce0>
   12fbc:	sub	sp, fp, #16
   12fc0:	pop	{r4, r5, r6, sl, fp, pc}
   12fc4:	push	{fp, lr}
   12fc8:	mov	fp, sp
   12fcc:	sub	sp, sp, #8
   12fd0:	mvn	ip, #0
   12fd4:	str	ip, [sp]
   12fd8:	bl	12fe4 <__assert_fail@plt+0x2070>
   12fdc:	mov	sp, fp
   12fe0:	pop	{fp, pc}
   12fe4:	push	{r4, r5, r6, r7, fp, lr}
   12fe8:	add	fp, sp, #16
   12fec:	sub	sp, sp, #48	; 0x30
   12ff0:	mov	r7, r3
   12ff4:	mov	r5, r0
   12ff8:	movw	r0, #24912	; 0x6150
   12ffc:	movt	r0, #2
   13000:	add	r3, r0, #16
   13004:	mov	r4, #32
   13008:	vld1.64	{d16-d17}, [r0], r4
   1300c:	vld1.64	{d18-d19}, [r3]
   13010:	mov	r6, sp
   13014:	add	r3, r6, #16
   13018:	vld1.64	{d20-d21}, [r0]
   1301c:	vst1.64	{d18-d19}, [r3]
   13020:	mov	r0, r6
   13024:	vst1.64	{d16-d17}, [r0], r4
   13028:	vst1.64	{d20-d21}, [r0]
   1302c:	mov	r0, r6
   13030:	bl	11a4c <__assert_fail@plt+0xad8>
   13034:	ldr	r2, [fp, #8]
   13038:	mov	r0, r5
   1303c:	mov	r1, r7
   13040:	mov	r3, r6
   13044:	bl	12c54 <__assert_fail@plt+0x1ce0>
   13048:	sub	sp, fp, #16
   1304c:	pop	{r4, r5, r6, r7, fp, pc}
   13050:	mov	r3, r2
   13054:	mov	r2, r1
   13058:	mov	r1, r0
   1305c:	mov	r0, #0
   13060:	b	12fc4 <__assert_fail@plt+0x2050>
   13064:	push	{fp, lr}
   13068:	mov	fp, sp
   1306c:	sub	sp, sp, #8
   13070:	mov	ip, r2
   13074:	mov	r2, r1
   13078:	mov	r1, r0
   1307c:	str	r3, [sp]
   13080:	mov	r0, #0
   13084:	mov	r3, ip
   13088:	bl	12fe4 <__assert_fail@plt+0x2070>
   1308c:	mov	sp, fp
   13090:	pop	{fp, pc}
   13094:	movw	r3, #24816	; 0x60f0
   13098:	movt	r3, #2
   1309c:	b	12c54 <__assert_fail@plt+0x1ce0>
   130a0:	mov	r2, r1
   130a4:	mov	r1, r0
   130a8:	mov	r0, #0
   130ac:	b	13094 <__assert_fail@plt+0x2120>
   130b0:	mvn	r2, #0
   130b4:	b	13094 <__assert_fail@plt+0x2120>
   130b8:	mov	r1, r0
   130bc:	mov	r0, #0
   130c0:	b	130b0 <__assert_fail@plt+0x213c>
   130c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130c8:	add	fp, sp, #24
   130cc:	sub	sp, sp, #16
   130d0:	mov	r4, r1
   130d4:	mov	r5, r0
   130d8:	mov	r7, #0
   130dc:	mov	r0, #0
   130e0:	mov	r1, r5
   130e4:	mov	r2, #5
   130e8:	bl	10db8 <dcgettext@plt>
   130ec:	cmp	r0, r5
   130f0:	beq	130fc <__assert_fail@plt+0x2188>
   130f4:	sub	sp, fp, #24
   130f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130fc:	bl	1493c <__assert_fail@plt+0x39c8>
   13100:	mov	r6, r0
   13104:	mov	r8, #56	; 0x38
   13108:	mov	r0, #45	; 0x2d
   1310c:	stm	sp, {r0, r8}
   13110:	str	r7, [sp, #8]
   13114:	str	r7, [sp, #12]
   13118:	mov	r0, r6
   1311c:	mov	r1, #85	; 0x55
   13120:	mov	r2, #84	; 0x54
   13124:	mov	r3, #70	; 0x46
   13128:	bl	131c0 <__assert_fail@plt+0x224c>
   1312c:	cmp	r0, #0
   13130:	beq	1314c <__assert_fail@plt+0x21d8>
   13134:	ldrb	r1, [r5]
   13138:	movw	r2, #20904	; 0x51a8
   1313c:	movt	r2, #1
   13140:	movw	r0, #20908	; 0x51ac
   13144:	movt	r0, #1
   13148:	b	13190 <__assert_fail@plt+0x221c>
   1314c:	mov	r0, #48	; 0x30
   13150:	mov	r1, #51	; 0x33
   13154:	str	r8, [sp]
   13158:	stmib	sp, {r0, r1}
   1315c:	str	r0, [sp, #12]
   13160:	mov	r0, r6
   13164:	mov	r1, #71	; 0x47
   13168:	mov	r2, #66	; 0x42
   1316c:	mov	r3, #49	; 0x31
   13170:	bl	131c0 <__assert_fail@plt+0x224c>
   13174:	cmp	r0, #0
   13178:	beq	131a0 <__assert_fail@plt+0x222c>
   1317c:	ldrb	r1, [r5]
   13180:	movw	r2, #20912	; 0x51b0
   13184:	movt	r2, #1
   13188:	movw	r0, #20916	; 0x51b4
   1318c:	movt	r0, #1
   13190:	cmp	r1, #96	; 0x60
   13194:	moveq	r0, r2
   13198:	sub	sp, fp, #24
   1319c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131a0:	movw	r1, #20898	; 0x51a2
   131a4:	movt	r1, #1
   131a8:	movw	r0, #20902	; 0x51a6
   131ac:	movt	r0, #1
   131b0:	cmp	r4, #9
   131b4:	moveq	r0, r1
   131b8:	sub	sp, fp, #24
   131bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131c0:	push	{r4, r5, r6, r7, fp, lr}
   131c4:	add	fp, sp, #16
   131c8:	sub	sp, sp, #16
   131cc:	mov	r4, r3
   131d0:	mov	r5, r2
   131d4:	mov	r7, r1
   131d8:	mov	r6, r0
   131dc:	mov	r0, r1
   131e0:	bl	14620 <__assert_fail@plt+0x36ac>
   131e4:	ldrb	r1, [r6]
   131e8:	cmp	r0, #0
   131ec:	andne	r1, r1, #223	; 0xdf
   131f0:	mov	r0, #0
   131f4:	cmp	r1, r7
   131f8:	bne	13230 <__assert_fail@plt+0x22bc>
   131fc:	cmp	r7, #0
   13200:	beq	13238 <__assert_fail@plt+0x22c4>
   13204:	ldr	r0, [fp, #20]
   13208:	ldr	r1, [fp, #16]
   1320c:	ldr	r2, [fp, #12]
   13210:	ldr	r3, [fp, #8]
   13214:	str	r2, [sp]
   13218:	str	r1, [sp, #4]
   1321c:	str	r0, [sp, #8]
   13220:	mov	r0, r6
   13224:	mov	r1, r5
   13228:	mov	r2, r4
   1322c:	bl	13244 <__assert_fail@plt+0x22d0>
   13230:	sub	sp, fp, #16
   13234:	pop	{r4, r5, r6, r7, fp, pc}
   13238:	mov	r0, #1
   1323c:	sub	sp, fp, #16
   13240:	pop	{r4, r5, r6, r7, fp, pc}
   13244:	push	{r4, r5, r6, r7, fp, lr}
   13248:	add	fp, sp, #16
   1324c:	sub	sp, sp, #8
   13250:	mov	r4, r3
   13254:	mov	r5, r2
   13258:	mov	r7, r1
   1325c:	mov	r6, r0
   13260:	mov	r0, r1
   13264:	bl	14620 <__assert_fail@plt+0x36ac>
   13268:	ldrb	r1, [r6, #1]
   1326c:	cmp	r0, #0
   13270:	andne	r1, r1, #223	; 0xdf
   13274:	mov	r0, #0
   13278:	cmp	r1, r7
   1327c:	bne	132ac <__assert_fail@plt+0x2338>
   13280:	cmp	r7, #0
   13284:	beq	132b4 <__assert_fail@plt+0x2340>
   13288:	ldr	r0, [fp, #16]
   1328c:	ldr	r1, [fp, #12]
   13290:	ldr	r3, [fp, #8]
   13294:	str	r1, [sp]
   13298:	str	r0, [sp, #4]
   1329c:	mov	r0, r6
   132a0:	mov	r1, r5
   132a4:	mov	r2, r4
   132a8:	bl	132c0 <__assert_fail@plt+0x234c>
   132ac:	sub	sp, fp, #16
   132b0:	pop	{r4, r5, r6, r7, fp, pc}
   132b4:	mov	r0, #1
   132b8:	sub	sp, fp, #16
   132bc:	pop	{r4, r5, r6, r7, fp, pc}
   132c0:	push	{r4, r5, r6, r7, fp, lr}
   132c4:	add	fp, sp, #16
   132c8:	sub	sp, sp, #8
   132cc:	mov	r4, r3
   132d0:	mov	r5, r2
   132d4:	mov	r7, r1
   132d8:	mov	r6, r0
   132dc:	mov	r0, r1
   132e0:	bl	14620 <__assert_fail@plt+0x36ac>
   132e4:	ldrb	r1, [r6, #2]
   132e8:	cmp	r0, #0
   132ec:	andne	r1, r1, #223	; 0xdf
   132f0:	mov	r0, #0
   132f4:	cmp	r1, r7
   132f8:	bne	13320 <__assert_fail@plt+0x23ac>
   132fc:	cmp	r7, #0
   13300:	beq	13328 <__assert_fail@plt+0x23b4>
   13304:	ldr	r0, [fp, #12]
   13308:	ldr	r3, [fp, #8]
   1330c:	str	r0, [sp]
   13310:	mov	r0, r6
   13314:	mov	r1, r5
   13318:	mov	r2, r4
   1331c:	bl	13334 <__assert_fail@plt+0x23c0>
   13320:	sub	sp, fp, #16
   13324:	pop	{r4, r5, r6, r7, fp, pc}
   13328:	mov	r0, #1
   1332c:	sub	sp, fp, #16
   13330:	pop	{r4, r5, r6, r7, fp, pc}
   13334:	push	{r4, r5, r6, r7, fp, lr}
   13338:	add	fp, sp, #16
   1333c:	mov	r4, r3
   13340:	mov	r5, r2
   13344:	mov	r7, r1
   13348:	mov	r6, r0
   1334c:	mov	r0, r1
   13350:	bl	14620 <__assert_fail@plt+0x36ac>
   13354:	ldrb	r1, [r6, #3]
   13358:	ldr	r3, [fp, #8]
   1335c:	cmp	r0, #0
   13360:	andne	r1, r1, #223	; 0xdf
   13364:	mov	r0, #0
   13368:	cmp	r1, r7
   1336c:	bne	13390 <__assert_fail@plt+0x241c>
   13370:	cmp	r7, #0
   13374:	beq	1338c <__assert_fail@plt+0x2418>
   13378:	mov	r0, r6
   1337c:	mov	r1, r5
   13380:	mov	r2, r4
   13384:	pop	{r4, r5, r6, r7, fp, lr}
   13388:	b	13394 <__assert_fail@plt+0x2420>
   1338c:	mov	r0, #1
   13390:	pop	{r4, r5, r6, r7, fp, pc}
   13394:	push	{r4, r5, r6, r7, fp, lr}
   13398:	add	fp, sp, #16
   1339c:	mov	r4, r3
   133a0:	mov	r5, r2
   133a4:	mov	r7, r1
   133a8:	mov	r6, r0
   133ac:	mov	r0, r1
   133b0:	bl	14620 <__assert_fail@plt+0x36ac>
   133b4:	ldrb	r1, [r6, #4]
   133b8:	cmp	r0, #0
   133bc:	andne	r1, r1, #223	; 0xdf
   133c0:	mov	r0, #0
   133c4:	cmp	r1, r7
   133c8:	bne	133ec <__assert_fail@plt+0x2478>
   133cc:	cmp	r7, #0
   133d0:	beq	133e8 <__assert_fail@plt+0x2474>
   133d4:	mov	r0, r6
   133d8:	mov	r1, r5
   133dc:	mov	r2, r4
   133e0:	pop	{r4, r5, r6, r7, fp, lr}
   133e4:	b	133f0 <__assert_fail@plt+0x247c>
   133e8:	mov	r0, #1
   133ec:	pop	{r4, r5, r6, r7, fp, pc}
   133f0:	push	{r4, r5, r6, sl, fp, lr}
   133f4:	add	fp, sp, #16
   133f8:	mov	r4, r2
   133fc:	mov	r6, r1
   13400:	mov	r5, r0
   13404:	mov	r0, r1
   13408:	bl	14620 <__assert_fail@plt+0x36ac>
   1340c:	ldrb	r1, [r5, #5]
   13410:	cmp	r0, #0
   13414:	andne	r1, r1, #223	; 0xdf
   13418:	mov	r0, #0
   1341c:	cmp	r1, r6
   13420:	bne	13440 <__assert_fail@plt+0x24cc>
   13424:	cmp	r6, #0
   13428:	beq	1343c <__assert_fail@plt+0x24c8>
   1342c:	mov	r0, r5
   13430:	mov	r1, r4
   13434:	pop	{r4, r5, r6, sl, fp, lr}
   13438:	b	13444 <__assert_fail@plt+0x24d0>
   1343c:	mov	r0, #1
   13440:	pop	{r4, r5, r6, sl, fp, pc}
   13444:	push	{r4, r5, fp, lr}
   13448:	add	fp, sp, #8
   1344c:	mov	r5, r1
   13450:	mov	r4, r0
   13454:	mov	r0, r1
   13458:	bl	14620 <__assert_fail@plt+0x36ac>
   1345c:	ldrb	r1, [r4, #6]
   13460:	cmp	r0, #0
   13464:	andne	r1, r1, #223	; 0xdf
   13468:	mov	r0, #0
   1346c:	cmp	r1, r5
   13470:	popne	{r4, r5, fp, pc}
   13474:	cmp	r5, #0
   13478:	beq	13488 <__assert_fail@plt+0x2514>
   1347c:	mov	r0, r4
   13480:	pop	{r4, r5, fp, lr}
   13484:	b	13490 <__assert_fail@plt+0x251c>
   13488:	mov	r0, #1
   1348c:	pop	{r4, r5, fp, pc}
   13490:	push	{r4, sl, fp, lr}
   13494:	add	fp, sp, #8
   13498:	mov	r4, r0
   1349c:	mov	r0, #0
   134a0:	bl	14620 <__assert_fail@plt+0x36ac>
   134a4:	ldrb	r1, [r4, #7]
   134a8:	cmp	r0, #0
   134ac:	beq	134c0 <__assert_fail@plt+0x254c>
   134b0:	tst	r1, #223	; 0xdf
   134b4:	bne	134c8 <__assert_fail@plt+0x2554>
   134b8:	mov	r0, #1
   134bc:	pop	{r4, sl, fp, pc}
   134c0:	cmp	r1, #0
   134c4:	beq	134b8 <__assert_fail@plt+0x2544>
   134c8:	mov	r0, #0
   134cc:	pop	{r4, sl, fp, pc}
   134d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134d4:	add	fp, sp, #24
   134d8:	sub	sp, sp, #32
   134dc:	mov	r4, r2
   134e0:	mov	r8, r0
   134e4:	ldr	r6, [fp, #12]
   134e8:	ldr	r7, [fp, #8]
   134ec:	cmp	r1, #0
   134f0:	beq	13518 <__assert_fail@plt+0x25a4>
   134f4:	mov	r5, r1
   134f8:	str	r4, [sp]
   134fc:	str	r3, [sp, #4]
   13500:	movw	r2, #21004	; 0x520c
   13504:	movt	r2, #1
   13508:	mov	r0, r8
   1350c:	mov	r1, #1
   13510:	mov	r3, r5
   13514:	b	13530 <__assert_fail@plt+0x25bc>
   13518:	str	r3, [sp]
   1351c:	movw	r2, #21016	; 0x5218
   13520:	movt	r2, #1
   13524:	mov	r0, r8
   13528:	mov	r1, #1
   1352c:	mov	r3, r4
   13530:	bl	10f08 <__fprintf_chk@plt>
   13534:	movw	r1, #21023	; 0x521f
   13538:	movt	r1, #1
   1353c:	mov	r0, #0
   13540:	mov	r2, #5
   13544:	bl	10db8 <dcgettext@plt>
   13548:	mov	r3, r0
   1354c:	movw	r0, #2022	; 0x7e6
   13550:	str	r0, [sp]
   13554:	movw	r2, #21741	; 0x54ed
   13558:	movt	r2, #1
   1355c:	mov	r0, r8
   13560:	mov	r1, #1
   13564:	bl	10f08 <__fprintf_chk@plt>
   13568:	movw	r4, #20585	; 0x5069
   1356c:	movt	r4, #1
   13570:	mov	r0, r4
   13574:	mov	r1, r8
   13578:	bl	10d4c <fputs_unlocked@plt>
   1357c:	movw	r1, #21027	; 0x5223
   13580:	movt	r1, #1
   13584:	mov	r0, #0
   13588:	mov	r2, #5
   1358c:	bl	10db8 <dcgettext@plt>
   13590:	mov	r2, r0
   13594:	movw	r3, #21198	; 0x52ce
   13598:	movt	r3, #1
   1359c:	mov	r0, r8
   135a0:	mov	r1, #1
   135a4:	bl	10f08 <__fprintf_chk@plt>
   135a8:	mov	r0, r4
   135ac:	mov	r1, r8
   135b0:	bl	10d4c <fputs_unlocked@plt>
   135b4:	cmp	r6, #9
   135b8:	bhi	135f4 <__assert_fail@plt+0x2680>
   135bc:	add	r0, pc, #0
   135c0:	ldr	pc, [r0, r6, lsl #2]
   135c4:	andeq	r3, r1, ip, ror #11
   135c8:	andeq	r3, r1, r0, lsl #12
   135cc:	andeq	r3, r1, r0, lsr r6
   135d0:	andeq	r3, r1, r8, asr r6
   135d4:	andeq	r3, r1, r0, lsl #13
   135d8:	andeq	r3, r1, r8, lsr #13
   135dc:	ldrdeq	r3, [r1], -r0
   135e0:	andeq	r3, r1, r8, lsl #14
   135e4:	andeq	r3, r1, r8, lsr #15
   135e8:	andeq	r3, r1, r0, asr r7
   135ec:	sub	sp, fp, #24
   135f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135f4:	movw	r1, #21551	; 0x542f
   135f8:	movt	r1, #1
   135fc:	b	13758 <__assert_fail@plt+0x27e4>
   13600:	movw	r1, #21232	; 0x52f0
   13604:	movt	r1, #1
   13608:	mov	r0, #0
   1360c:	mov	r2, #5
   13610:	bl	10db8 <dcgettext@plt>
   13614:	mov	r2, r0
   13618:	ldr	r3, [r7]
   1361c:	mov	r0, r8
   13620:	mov	r1, #1
   13624:	sub	sp, fp, #24
   13628:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1362c:	b	10f08 <__fprintf_chk@plt>
   13630:	movw	r1, #21248	; 0x5300
   13634:	movt	r1, #1
   13638:	mov	r0, #0
   1363c:	mov	r2, #5
   13640:	bl	10db8 <dcgettext@plt>
   13644:	mov	r2, r0
   13648:	ldr	r3, [r7]
   1364c:	ldr	r0, [r7, #4]
   13650:	str	r0, [sp]
   13654:	b	13744 <__assert_fail@plt+0x27d0>
   13658:	movw	r1, #21271	; 0x5317
   1365c:	movt	r1, #1
   13660:	mov	r0, #0
   13664:	mov	r2, #5
   13668:	bl	10db8 <dcgettext@plt>
   1366c:	mov	r2, r0
   13670:	ldr	r3, [r7]
   13674:	ldmib	r7, {r0, r1}
   13678:	stm	sp, {r0, r1}
   1367c:	b	13744 <__assert_fail@plt+0x27d0>
   13680:	movw	r1, #21299	; 0x5333
   13684:	movt	r1, #1
   13688:	mov	r0, #0
   1368c:	mov	r2, #5
   13690:	bl	10db8 <dcgettext@plt>
   13694:	mov	r2, r0
   13698:	ldr	r3, [r7]
   1369c:	ldmib	r7, {r0, r1, r7}
   136a0:	stm	sp, {r0, r1, r7}
   136a4:	b	13744 <__assert_fail@plt+0x27d0>
   136a8:	movw	r1, #21331	; 0x5353
   136ac:	movt	r1, #1
   136b0:	mov	r0, #0
   136b4:	mov	r2, #5
   136b8:	bl	10db8 <dcgettext@plt>
   136bc:	mov	r2, r0
   136c0:	ldr	r3, [r7]
   136c4:	ldmib	r7, {r0, r1, r6, r7}
   136c8:	stm	sp, {r0, r1, r6, r7}
   136cc:	b	13744 <__assert_fail@plt+0x27d0>
   136d0:	movw	r1, #21367	; 0x5377
   136d4:	movt	r1, #1
   136d8:	mov	r0, #0
   136dc:	mov	r2, #5
   136e0:	bl	10db8 <dcgettext@plt>
   136e4:	mov	r2, r0
   136e8:	ldr	r3, [r7]
   136ec:	ldmib	r7, {r0, r1, r6}
   136f0:	ldr	r5, [r7, #16]
   136f4:	ldr	r7, [r7, #20]
   136f8:	stm	sp, {r0, r1, r6}
   136fc:	str	r5, [sp, #12]
   13700:	str	r7, [sp, #16]
   13704:	b	13744 <__assert_fail@plt+0x27d0>
   13708:	movw	r1, #21407	; 0x539f
   1370c:	movt	r1, #1
   13710:	mov	r0, #0
   13714:	mov	r2, #5
   13718:	bl	10db8 <dcgettext@plt>
   1371c:	mov	r2, r0
   13720:	ldr	r3, [r7]
   13724:	ldmib	r7, {r0, r1, r6}
   13728:	ldr	r5, [r7, #16]
   1372c:	ldr	r4, [r7, #20]
   13730:	ldr	r7, [r7, #24]
   13734:	stm	sp, {r0, r1, r6}
   13738:	str	r5, [sp, #12]
   1373c:	str	r4, [sp, #16]
   13740:	str	r7, [sp, #20]
   13744:	mov	r0, r8
   13748:	mov	r1, #1
   1374c:	b	137f8 <__assert_fail@plt+0x2884>
   13750:	movw	r1, #21499	; 0x53fb
   13754:	movt	r1, #1
   13758:	mov	r0, #0
   1375c:	mov	r2, #5
   13760:	bl	10db8 <dcgettext@plt>
   13764:	mov	ip, r0
   13768:	ldr	r3, [r7]
   1376c:	ldr	r0, [r7, #4]
   13770:	ldr	r1, [r7, #8]
   13774:	ldr	r6, [r7, #12]
   13778:	ldr	r5, [r7, #16]
   1377c:	ldr	r4, [r7, #20]
   13780:	ldr	r2, [r7, #24]
   13784:	ldr	lr, [r7, #28]
   13788:	ldr	r7, [r7, #32]
   1378c:	stm	sp, {r0, r1, r6}
   13790:	str	r5, [sp, #12]
   13794:	str	r4, [sp, #16]
   13798:	str	r2, [sp, #20]
   1379c:	str	lr, [sp, #24]
   137a0:	str	r7, [sp, #28]
   137a4:	b	137ec <__assert_fail@plt+0x2878>
   137a8:	movw	r1, #21451	; 0x53cb
   137ac:	movt	r1, #1
   137b0:	mov	r0, #0
   137b4:	mov	r2, #5
   137b8:	bl	10db8 <dcgettext@plt>
   137bc:	mov	ip, r0
   137c0:	ldr	r3, [r7]
   137c4:	ldmib	r7, {r0, r1, r6}
   137c8:	ldr	r5, [r7, #16]
   137cc:	ldr	r4, [r7, #20]
   137d0:	ldr	r2, [r7, #24]
   137d4:	ldr	r7, [r7, #28]
   137d8:	stm	sp, {r0, r1, r6}
   137dc:	str	r5, [sp, #12]
   137e0:	str	r4, [sp, #16]
   137e4:	str	r2, [sp, #20]
   137e8:	str	r7, [sp, #24]
   137ec:	mov	r0, r8
   137f0:	mov	r1, #1
   137f4:	mov	r2, ip
   137f8:	bl	10f08 <__fprintf_chk@plt>
   137fc:	sub	sp, fp, #24
   13800:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13804:	push	{r4, sl, fp, lr}
   13808:	add	fp, sp, #8
   1380c:	sub	sp, sp, #8
   13810:	mov	lr, #0
   13814:	ldr	ip, [fp, #8]
   13818:	ldr	r4, [ip, lr, lsl #2]
   1381c:	add	lr, lr, #1
   13820:	cmp	r4, #0
   13824:	bne	13818 <__assert_fail@plt+0x28a4>
   13828:	sub	r4, lr, #1
   1382c:	str	ip, [sp]
   13830:	str	r4, [sp, #4]
   13834:	bl	134d0 <__assert_fail@plt+0x255c>
   13838:	sub	sp, fp, #8
   1383c:	pop	{r4, sl, fp, pc}
   13840:	push	{r4, r5, fp, lr}
   13844:	add	fp, sp, #8
   13848:	sub	sp, sp, #48	; 0x30
   1384c:	mov	ip, #0
   13850:	ldr	r4, [fp, #8]
   13854:	add	lr, sp, #8
   13858:	ldr	r5, [r4]
   1385c:	str	r5, [lr, ip, lsl #2]
   13860:	cmp	r5, #0
   13864:	beq	1387c <__assert_fail@plt+0x2908>
   13868:	add	ip, ip, #1
   1386c:	add	r4, r4, #4
   13870:	cmp	ip, #10
   13874:	bne	13858 <__assert_fail@plt+0x28e4>
   13878:	mov	ip, #10
   1387c:	str	lr, [sp]
   13880:	str	ip, [sp, #4]
   13884:	bl	134d0 <__assert_fail@plt+0x255c>
   13888:	sub	sp, fp, #8
   1388c:	pop	{r4, r5, fp, pc}
   13890:	push	{fp, lr}
   13894:	mov	fp, sp
   13898:	sub	sp, sp, #8
   1389c:	add	ip, fp, #8
   138a0:	str	ip, [sp, #4]
   138a4:	str	ip, [sp]
   138a8:	bl	13840 <__assert_fail@plt+0x28cc>
   138ac:	mov	sp, fp
   138b0:	pop	{fp, pc}
   138b4:	push	{fp, lr}
   138b8:	mov	fp, sp
   138bc:	movw	r0, #24884	; 0x6134
   138c0:	movt	r0, #2
   138c4:	ldr	r1, [r0]
   138c8:	movw	r0, #20585	; 0x5069
   138cc:	movt	r0, #1
   138d0:	bl	10d4c <fputs_unlocked@plt>
   138d4:	movw	r1, #21611	; 0x546b
   138d8:	movt	r1, #1
   138dc:	mov	r0, #0
   138e0:	mov	r2, #5
   138e4:	bl	10db8 <dcgettext@plt>
   138e8:	mov	r1, r0
   138ec:	movw	r2, #21631	; 0x547f
   138f0:	movt	r2, #1
   138f4:	mov	r0, #1
   138f8:	bl	10ef0 <__printf_chk@plt>
   138fc:	movw	r1, #21653	; 0x5495
   13900:	movt	r1, #1
   13904:	mov	r0, #0
   13908:	mov	r2, #5
   1390c:	bl	10db8 <dcgettext@plt>
   13910:	mov	r1, r0
   13914:	movw	r2, #20062	; 0x4e5e
   13918:	movt	r2, #1
   1391c:	movw	r3, #20394	; 0x4faa
   13920:	movt	r3, #1
   13924:	mov	r0, #1
   13928:	bl	10ef0 <__printf_chk@plt>
   1392c:	movw	r1, #21673	; 0x54a9
   13930:	movt	r1, #1
   13934:	mov	r0, #0
   13938:	mov	r2, #5
   1393c:	bl	10db8 <dcgettext@plt>
   13940:	mov	r1, r0
   13944:	movw	r2, #21712	; 0x54d0
   13948:	movt	r2, #1
   1394c:	mov	r0, #1
   13950:	pop	{fp, lr}
   13954:	b	10ef0 <__printf_chk@plt>
   13958:	b	1395c <__assert_fail@plt+0x29e8>
   1395c:	push	{r4, r5, r6, sl, fp, lr}
   13960:	add	fp, sp, #16
   13964:	mov	r4, r2
   13968:	mov	r5, r1
   1396c:	mov	r6, r0
   13970:	bl	149d8 <__assert_fail@plt+0x3a64>
   13974:	cmp	r0, #0
   13978:	popne	{r4, r5, r6, sl, fp, pc}
   1397c:	cmp	r6, #0
   13980:	beq	13994 <__assert_fail@plt+0x2a20>
   13984:	cmp	r5, #0
   13988:	cmpne	r4, #0
   1398c:	bne	13994 <__assert_fail@plt+0x2a20>
   13990:	pop	{r4, r5, r6, sl, fp, pc}
   13994:	bl	13d20 <__assert_fail@plt+0x2dac>
   13998:	push	{fp, lr}
   1399c:	mov	fp, sp
   139a0:	bl	142e8 <__assert_fail@plt+0x3374>
   139a4:	pop	{fp, lr}
   139a8:	b	139ac <__assert_fail@plt+0x2a38>
   139ac:	cmp	r0, #0
   139b0:	bxne	lr
   139b4:	push	{fp, lr}
   139b8:	mov	fp, sp
   139bc:	bl	13d20 <__assert_fail@plt+0x2dac>
   139c0:	push	{fp, lr}
   139c4:	mov	fp, sp
   139c8:	bl	14908 <__assert_fail@plt+0x3994>
   139cc:	pop	{fp, lr}
   139d0:	b	139ac <__assert_fail@plt+0x2a38>
   139d4:	b	13998 <__assert_fail@plt+0x2a24>
   139d8:	push	{r4, r5, fp, lr}
   139dc:	add	fp, sp, #8
   139e0:	mov	r4, r1
   139e4:	mov	r5, r0
   139e8:	bl	14318 <__assert_fail@plt+0x33a4>
   139ec:	cmp	r0, #0
   139f0:	popne	{r4, r5, fp, pc}
   139f4:	cmp	r5, #0
   139f8:	beq	13a08 <__assert_fail@plt+0x2a94>
   139fc:	cmp	r4, #0
   13a00:	bne	13a08 <__assert_fail@plt+0x2a94>
   13a04:	pop	{r4, r5, fp, pc}
   13a08:	bl	13d20 <__assert_fail@plt+0x2dac>
   13a0c:	push	{fp, lr}
   13a10:	mov	fp, sp
   13a14:	bl	1490c <__assert_fail@plt+0x3998>
   13a18:	pop	{fp, lr}
   13a1c:	b	139ac <__assert_fail@plt+0x2a38>
   13a20:	push	{fp, lr}
   13a24:	mov	fp, sp
   13a28:	bl	1491c <__assert_fail@plt+0x39a8>
   13a2c:	pop	{fp, lr}
   13a30:	b	139ac <__assert_fail@plt+0x2a38>
   13a34:	mov	r2, r1
   13a38:	mov	r1, r0
   13a3c:	mov	r0, #0
   13a40:	b	1395c <__assert_fail@plt+0x29e8>
   13a44:	mov	r2, r1
   13a48:	mov	r1, r0
   13a4c:	mov	r0, #0
   13a50:	b	13a20 <__assert_fail@plt+0x2aac>
   13a54:	mov	r2, #1
   13a58:	b	13a5c <__assert_fail@plt+0x2ae8>
   13a5c:	push	{r4, r5, fp, lr}
   13a60:	add	fp, sp, #8
   13a64:	mov	r4, r1
   13a68:	ldr	r5, [r1]
   13a6c:	cmp	r0, #0
   13a70:	beq	13a88 <__assert_fail@plt+0x2b14>
   13a74:	mov	r1, #1
   13a78:	add	r1, r1, r5, lsr #1
   13a7c:	adds	r5, r5, r1
   13a80:	bcc	13aa0 <__assert_fail@plt+0x2b2c>
   13a84:	bl	13d20 <__assert_fail@plt+0x2dac>
   13a88:	cmp	r5, #0
   13a8c:	bne	13aa0 <__assert_fail@plt+0x2b2c>
   13a90:	mov	r1, #64	; 0x40
   13a94:	udiv	r5, r1, r2
   13a98:	cmp	r2, #64	; 0x40
   13a9c:	addhi	r5, r5, #1
   13aa0:	mov	r1, r5
   13aa4:	bl	1395c <__assert_fail@plt+0x29e8>
   13aa8:	str	r5, [r4]
   13aac:	pop	{r4, r5, fp, pc}
   13ab0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ab4:	add	fp, sp, #24
   13ab8:	mov	r8, r1
   13abc:	ldr	r6, [r1]
   13ac0:	add	r1, r6, r6, asr #1
   13ac4:	cmp	r1, r6
   13ac8:	mvnvs	r1, #-2147483648	; 0x80000000
   13acc:	cmp	r1, r3
   13ad0:	mov	r5, r1
   13ad4:	movgt	r5, r3
   13ad8:	cmn	r3, #1
   13adc:	movle	r5, r1
   13ae0:	ldr	r4, [fp, #8]
   13ae4:	cmn	r4, #1
   13ae8:	ble	13b10 <__assert_fail@plt+0x2b9c>
   13aec:	cmp	r4, #0
   13af0:	beq	13b64 <__assert_fail@plt+0x2bf0>
   13af4:	cmn	r5, #1
   13af8:	ble	13b38 <__assert_fail@plt+0x2bc4>
   13afc:	mvn	r7, #-2147483648	; 0x80000000
   13b00:	udiv	r1, r7, r4
   13b04:	cmp	r1, r5
   13b08:	bge	13b64 <__assert_fail@plt+0x2bf0>
   13b0c:	b	13b74 <__assert_fail@plt+0x2c00>
   13b10:	cmn	r5, #1
   13b14:	ble	13b54 <__assert_fail@plt+0x2be0>
   13b18:	cmn	r4, #1
   13b1c:	beq	13b64 <__assert_fail@plt+0x2bf0>
   13b20:	mov	r1, #-2147483648	; 0x80000000
   13b24:	sdiv	r1, r1, r4
   13b28:	mvn	r7, #-2147483648	; 0x80000000
   13b2c:	cmp	r1, r5
   13b30:	bge	13b64 <__assert_fail@plt+0x2bf0>
   13b34:	b	13b74 <__assert_fail@plt+0x2c00>
   13b38:	beq	13b64 <__assert_fail@plt+0x2bf0>
   13b3c:	mov	r1, #-2147483648	; 0x80000000
   13b40:	sdiv	r1, r1, r5
   13b44:	mvn	r7, #-2147483648	; 0x80000000
   13b48:	cmp	r1, r4
   13b4c:	bge	13b64 <__assert_fail@plt+0x2bf0>
   13b50:	b	13b74 <__assert_fail@plt+0x2c00>
   13b54:	mvn	r7, #-2147483648	; 0x80000000
   13b58:	sdiv	r1, r7, r4
   13b5c:	cmp	r5, r1
   13b60:	blt	13b74 <__assert_fail@plt+0x2c00>
   13b64:	mul	r1, r5, r4
   13b68:	mov	r7, #64	; 0x40
   13b6c:	cmp	r1, #63	; 0x3f
   13b70:	bgt	13b7c <__assert_fail@plt+0x2c08>
   13b74:	sdiv	r5, r7, r4
   13b78:	mul	r1, r5, r4
   13b7c:	cmp	r0, #0
   13b80:	moveq	r7, #0
   13b84:	streq	r7, [r8]
   13b88:	sub	r7, r5, r6
   13b8c:	cmp	r7, r2
   13b90:	bge	13c3c <__assert_fail@plt+0x2cc8>
   13b94:	add	r5, r6, r2
   13b98:	mov	r1, #0
   13b9c:	cmp	r5, r3
   13ba0:	mov	r2, #0
   13ba4:	movwgt	r2, #1
   13ba8:	cmn	r3, #1
   13bac:	movwgt	r1, #1
   13bb0:	cmp	r5, r6
   13bb4:	bvs	13c24 <__assert_fail@plt+0x2cb0>
   13bb8:	ands	r1, r1, r2
   13bbc:	bne	13c24 <__assert_fail@plt+0x2cb0>
   13bc0:	cmn	r4, #1
   13bc4:	ble	13bec <__assert_fail@plt+0x2c78>
   13bc8:	cmp	r4, #0
   13bcc:	beq	13c38 <__assert_fail@plt+0x2cc4>
   13bd0:	cmn	r5, #1
   13bd4:	ble	13c10 <__assert_fail@plt+0x2c9c>
   13bd8:	mvn	r1, #-2147483648	; 0x80000000
   13bdc:	udiv	r1, r1, r4
   13be0:	cmp	r1, r5
   13be4:	bge	13c38 <__assert_fail@plt+0x2cc4>
   13be8:	b	13c24 <__assert_fail@plt+0x2cb0>
   13bec:	cmn	r5, #1
   13bf0:	ble	13c28 <__assert_fail@plt+0x2cb4>
   13bf4:	cmn	r4, #1
   13bf8:	beq	13c38 <__assert_fail@plt+0x2cc4>
   13bfc:	mov	r1, #-2147483648	; 0x80000000
   13c00:	sdiv	r1, r1, r4
   13c04:	cmp	r1, r5
   13c08:	bge	13c38 <__assert_fail@plt+0x2cc4>
   13c0c:	b	13c24 <__assert_fail@plt+0x2cb0>
   13c10:	beq	13c38 <__assert_fail@plt+0x2cc4>
   13c14:	mov	r1, #-2147483648	; 0x80000000
   13c18:	sdiv	r1, r1, r5
   13c1c:	cmp	r1, r4
   13c20:	bge	13c38 <__assert_fail@plt+0x2cc4>
   13c24:	bl	13d20 <__assert_fail@plt+0x2dac>
   13c28:	mvn	r1, #-2147483648	; 0x80000000
   13c2c:	sdiv	r1, r1, r4
   13c30:	cmp	r5, r1
   13c34:	blt	13c24 <__assert_fail@plt+0x2cb0>
   13c38:	mul	r1, r5, r4
   13c3c:	bl	139d8 <__assert_fail@plt+0x2a64>
   13c40:	str	r5, [r8]
   13c44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c48:	mov	r1, #1
   13c4c:	b	13c50 <__assert_fail@plt+0x2cdc>
   13c50:	push	{fp, lr}
   13c54:	mov	fp, sp
   13c58:	bl	14294 <__assert_fail@plt+0x3320>
   13c5c:	pop	{fp, lr}
   13c60:	b	139ac <__assert_fail@plt+0x2a38>
   13c64:	mov	r1, #1
   13c68:	b	13c6c <__assert_fail@plt+0x2cf8>
   13c6c:	push	{fp, lr}
   13c70:	mov	fp, sp
   13c74:	bl	14918 <__assert_fail@plt+0x39a4>
   13c78:	pop	{fp, lr}
   13c7c:	b	139ac <__assert_fail@plt+0x2a38>
   13c80:	push	{r4, r5, fp, lr}
   13c84:	add	fp, sp, #8
   13c88:	mov	r4, r1
   13c8c:	mov	r5, r0
   13c90:	mov	r0, r1
   13c94:	bl	13998 <__assert_fail@plt+0x2a24>
   13c98:	mov	r1, r5
   13c9c:	mov	r2, r4
   13ca0:	pop	{r4, r5, fp, lr}
   13ca4:	b	10d94 <memcpy@plt>
   13ca8:	push	{r4, r5, fp, lr}
   13cac:	add	fp, sp, #8
   13cb0:	mov	r4, r1
   13cb4:	mov	r5, r0
   13cb8:	mov	r0, r1
   13cbc:	bl	139c0 <__assert_fail@plt+0x2a4c>
   13cc0:	mov	r1, r5
   13cc4:	mov	r2, r4
   13cc8:	pop	{r4, r5, fp, lr}
   13ccc:	b	10d94 <memcpy@plt>
   13cd0:	push	{r4, r5, fp, lr}
   13cd4:	add	fp, sp, #8
   13cd8:	mov	r4, r1
   13cdc:	mov	r5, r0
   13ce0:	add	r0, r1, #1
   13ce4:	bl	139c0 <__assert_fail@plt+0x2a4c>
   13ce8:	mov	r1, #0
   13cec:	strb	r1, [r0, r4]
   13cf0:	mov	r1, r5
   13cf4:	mov	r2, r4
   13cf8:	pop	{r4, r5, fp, lr}
   13cfc:	b	10d94 <memcpy@plt>
   13d00:	push	{r4, sl, fp, lr}
   13d04:	add	fp, sp, #8
   13d08:	mov	r4, r0
   13d0c:	bl	10eb4 <strlen@plt>
   13d10:	add	r1, r0, #1
   13d14:	mov	r0, r4
   13d18:	pop	{r4, sl, fp, lr}
   13d1c:	b	13c80 <__assert_fail@plt+0x2d0c>
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	movw	r0, #24796	; 0x60dc
   13d2c:	movt	r0, #2
   13d30:	ldr	r4, [r0]
   13d34:	movw	r1, #21788	; 0x551c
   13d38:	movt	r1, #1
   13d3c:	mov	r0, #0
   13d40:	mov	r2, #5
   13d44:	bl	10db8 <dcgettext@plt>
   13d48:	mov	r3, r0
   13d4c:	movw	r2, #20751	; 0x510f
   13d50:	movt	r2, #1
   13d54:	mov	r0, r4
   13d58:	mov	r1, #0
   13d5c:	bl	10e3c <error@plt>
   13d60:	bl	10f68 <abort@plt>
   13d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d68:	add	fp, sp, #28
   13d6c:	sub	sp, sp, #12
   13d70:	cmp	r2, #37	; 0x25
   13d74:	bcs	1417c <__assert_fail@plt+0x3208>
   13d78:	mov	r9, r3
   13d7c:	mov	r5, r2
   13d80:	mov	r6, r1
   13d84:	mov	r4, r0
   13d88:	ldr	sl, [fp, #8]
   13d8c:	bl	10ecc <__errno_location@plt>
   13d90:	mov	r7, r0
   13d94:	mov	r0, #0
   13d98:	str	r0, [r7]
   13d9c:	add	r8, sp, #8
   13da0:	cmp	r6, #0
   13da4:	movne	r8, r6
   13da8:	mov	r0, r4
   13dac:	mov	r1, r8
   13db0:	mov	r2, r5
   13db4:	bl	10d64 <strtol@plt>
   13db8:	str	r0, [sp, #4]
   13dbc:	ldr	r6, [r8]
   13dc0:	cmp	r6, r4
   13dc4:	beq	13df0 <__assert_fail@plt+0x2e7c>
   13dc8:	ldr	r0, [r7]
   13dcc:	cmp	r0, #0
   13dd0:	beq	13e28 <__assert_fail@plt+0x2eb4>
   13dd4:	mov	r5, #4
   13dd8:	cmp	r0, #34	; 0x22
   13ddc:	bne	14170 <__assert_fail@plt+0x31fc>
   13de0:	mov	r5, #1
   13de4:	cmp	sl, #0
   13de8:	bne	13e34 <__assert_fail@plt+0x2ec0>
   13dec:	b	14168 <__assert_fail@plt+0x31f4>
   13df0:	mov	r5, #4
   13df4:	cmp	sl, #0
   13df8:	beq	14170 <__assert_fail@plt+0x31fc>
   13dfc:	ldrb	r1, [r6]
   13e00:	cmp	r1, #0
   13e04:	beq	14170 <__assert_fail@plt+0x31fc>
   13e08:	mov	r0, sl
   13e0c:	bl	10ec0 <strchr@plt>
   13e10:	cmp	r0, #0
   13e14:	beq	14170 <__assert_fail@plt+0x31fc>
   13e18:	mov	r0, #1
   13e1c:	str	r0, [sp, #4]
   13e20:	mov	r5, #0
   13e24:	b	13e34 <__assert_fail@plt+0x2ec0>
   13e28:	mov	r5, r0
   13e2c:	cmp	sl, #0
   13e30:	beq	14168 <__assert_fail@plt+0x31f4>
   13e34:	ldrb	r4, [r6]
   13e38:	cmp	r4, #0
   13e3c:	beq	14168 <__assert_fail@plt+0x31f4>
   13e40:	mov	r0, sl
   13e44:	mov	r1, r4
   13e48:	bl	10ec0 <strchr@plt>
   13e4c:	cmp	r0, #0
   13e50:	beq	14088 <__assert_fail@plt+0x3114>
   13e54:	sub	r0, r4, #69	; 0x45
   13e58:	mov	r1, #1
   13e5c:	str	r1, [sp]
   13e60:	mov	r7, #1024	; 0x400
   13e64:	cmp	r0, #47	; 0x2f
   13e68:	bhi	13f84 <__assert_fail@plt+0x3010>
   13e6c:	add	r1, pc, #0
   13e70:	ldr	pc, [r1, r0, lsl #2]
   13e74:	andeq	r3, r1, r4, lsr pc
   13e78:	andeq	r3, r1, r4, lsl #31
   13e7c:	andeq	r3, r1, r4, lsr pc
   13e80:	andeq	r3, r1, r4, lsl #31
   13e84:	andeq	r3, r1, r4, lsl #31
   13e88:	andeq	r3, r1, r4, lsl #31
   13e8c:	andeq	r3, r1, r4, lsr pc
   13e90:	andeq	r3, r1, r4, lsl #31
   13e94:	andeq	r3, r1, r4, lsr pc
   13e98:	andeq	r3, r1, r4, lsl #31
   13e9c:	andeq	r3, r1, r4, lsl #31
   13ea0:	andeq	r3, r1, r4, lsr pc
   13ea4:	andeq	r3, r1, r4, lsl #31
   13ea8:	andeq	r3, r1, r4, lsl #31
   13eac:	andeq	r3, r1, r4, lsl #31
   13eb0:	andeq	r3, r1, r4, lsr pc
   13eb4:	andeq	r3, r1, r4, lsl #31
   13eb8:	andeq	r3, r1, r4, lsl #31
   13ebc:	andeq	r3, r1, r4, lsl #31
   13ec0:	andeq	r3, r1, r4, lsl #31
   13ec4:	andeq	r3, r1, r4, lsr pc
   13ec8:	andeq	r3, r1, r4, lsr pc
   13ecc:	andeq	r3, r1, r4, lsl #31
   13ed0:	andeq	r3, r1, r4, lsl #31
   13ed4:	andeq	r3, r1, r4, lsl #31
   13ed8:	andeq	r3, r1, r4, lsl #31
   13edc:	andeq	r3, r1, r4, lsl #31
   13ee0:	andeq	r3, r1, r4, lsl #31
   13ee4:	andeq	r3, r1, r4, lsl #31
   13ee8:	andeq	r3, r1, r4, lsl #31
   13eec:	andeq	r3, r1, r4, lsl #31
   13ef0:	andeq	r3, r1, r4, lsl #31
   13ef4:	andeq	r3, r1, r4, lsl #31
   13ef8:	andeq	r3, r1, r4, lsl #31
   13efc:	andeq	r3, r1, r4, lsr pc
   13f00:	andeq	r3, r1, r4, lsl #31
   13f04:	andeq	r3, r1, r4, lsl #31
   13f08:	andeq	r3, r1, r4, lsl #31
   13f0c:	andeq	r3, r1, r4, lsr pc
   13f10:	andeq	r3, r1, r4, lsl #31
   13f14:	andeq	r3, r1, r4, lsr pc
   13f18:	andeq	r3, r1, r4, lsl #31
   13f1c:	andeq	r3, r1, r4, lsl #31
   13f20:	andeq	r3, r1, r4, lsl #31
   13f24:	andeq	r3, r1, r4, lsl #31
   13f28:	andeq	r3, r1, r4, lsl #31
   13f2c:	andeq	r3, r1, r4, lsl #31
   13f30:	andeq	r3, r1, r4, lsr pc
   13f34:	mov	r0, sl
   13f38:	mov	r1, #48	; 0x30
   13f3c:	bl	10ec0 <strchr@plt>
   13f40:	cmp	r0, #0
   13f44:	beq	13f84 <__assert_fail@plt+0x3010>
   13f48:	ldrb	r0, [r6, #1]
   13f4c:	cmp	r0, #66	; 0x42
   13f50:	cmpne	r0, #68	; 0x44
   13f54:	bne	13f68 <__assert_fail@plt+0x2ff4>
   13f58:	mov	r0, #2
   13f5c:	str	r0, [sp]
   13f60:	mov	r7, #1000	; 0x3e8
   13f64:	b	13f84 <__assert_fail@plt+0x3010>
   13f68:	cmp	r0, #105	; 0x69
   13f6c:	bne	13f84 <__assert_fail@plt+0x3010>
   13f70:	ldrb	r0, [r6, #2]
   13f74:	mov	r1, #1
   13f78:	cmp	r0, #66	; 0x42
   13f7c:	movweq	r1, #3
   13f80:	str	r1, [sp]
   13f84:	sub	r1, r4, #66	; 0x42
   13f88:	cmp	r1, #53	; 0x35
   13f8c:	bhi	14088 <__assert_fail@plt+0x3114>
   13f90:	mov	r0, #0
   13f94:	add	r2, pc, #0
   13f98:	ldr	pc, [r2, r1, lsl #2]
   13f9c:	andeq	r4, r1, r8, ror #1
   13fa0:	andeq	r4, r1, r8, lsl #1
   13fa4:	andeq	r4, r1, r8, lsl #1
   13fa8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fac:	andeq	r4, r1, r8, lsl #1
   13fb0:	andeq	r4, r1, r4, ror r0
   13fb4:	andeq	r4, r1, r8, lsl #1
   13fb8:	andeq	r4, r1, r8, lsl #1
   13fbc:	andeq	r4, r1, r8, lsl #1
   13fc0:	muleq	r1, r8, r0
   13fc4:	andeq	r4, r1, r8, lsl #1
   13fc8:	andeq	r4, r1, ip, lsr #1
   13fcc:	andeq	r4, r1, r8, lsl #1
   13fd0:	andeq	r4, r1, r8, lsl #1
   13fd4:	andeq	r4, r1, r8, lsl #2
   13fd8:	andeq	r4, r1, r8, lsl #1
   13fdc:	andeq	r4, r1, r8, lsl #1
   13fe0:	andeq	r4, r1, r8, lsl #1
   13fe4:	andeq	r4, r1, r0, asr #1
   13fe8:	andeq	r4, r1, r8, lsl #1
   13fec:	andeq	r4, r1, r8, lsl #1
   13ff0:	andeq	r4, r1, r8, lsl #1
   13ff4:	andeq	r4, r1, r8, lsl #1
   13ff8:	andeq	r4, r1, ip, lsl r1
   13ffc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14000:	andeq	r4, r1, r8, lsl #1
   14004:	andeq	r4, r1, r8, lsl #1
   14008:	andeq	r4, r1, r8, lsl #1
   1400c:	andeq	r4, r1, r8, lsl #1
   14010:	andeq	r4, r1, r8, lsl #1
   14014:	andeq	r4, r1, r8, lsl #1
   14018:	andeq	r4, r1, r8, lsl #1
   1401c:	andeq	r4, r1, r0, lsr r1
   14020:	andeq	r4, r1, r8, asr #2
   14024:	andeq	r4, r1, r8, lsl #1
   14028:	andeq	r4, r1, r8, lsl #1
   1402c:	andeq	r4, r1, r8, lsl #1
   14030:	andeq	r4, r1, r4, ror r0
   14034:	andeq	r4, r1, r8, lsl #1
   14038:	andeq	r4, r1, r8, lsl #1
   1403c:	andeq	r4, r1, r8, lsl #1
   14040:	muleq	r1, r8, r0
   14044:	andeq	r4, r1, r8, lsl #1
   14048:	andeq	r4, r1, ip, lsr #1
   1404c:	andeq	r4, r1, r8, lsl #1
   14050:	andeq	r4, r1, r8, lsl #1
   14054:	andeq	r4, r1, r8, lsl #1
   14058:	andeq	r4, r1, r8, lsl #1
   1405c:	andeq	r4, r1, r8, lsl #1
   14060:	andeq	r4, r1, r8, lsl #1
   14064:	andeq	r4, r1, r0, asr #1
   14068:	andeq	r4, r1, r8, lsl #1
   1406c:	andeq	r4, r1, r8, lsl #1
   14070:	andeq	r4, r1, ip, lsr r1
   14074:	add	r0, sp, #4
   14078:	mov	r1, r7
   1407c:	mov	r2, #3
   14080:	bl	14248 <__assert_fail@plt+0x32d4>
   14084:	b	14148 <__assert_fail@plt+0x31d4>
   14088:	ldr	r0, [sp, #4]
   1408c:	str	r0, [r9]
   14090:	orr	r5, r5, #2
   14094:	b	14170 <__assert_fail@plt+0x31fc>
   14098:	add	r0, sp, #4
   1409c:	mov	r1, r7
   140a0:	mov	r2, #1
   140a4:	bl	14248 <__assert_fail@plt+0x32d4>
   140a8:	b	14148 <__assert_fail@plt+0x31d4>
   140ac:	add	r0, sp, #4
   140b0:	mov	r1, r7
   140b4:	mov	r2, #2
   140b8:	bl	14248 <__assert_fail@plt+0x32d4>
   140bc:	b	14148 <__assert_fail@plt+0x31d4>
   140c0:	add	r0, sp, #4
   140c4:	mov	r1, r7
   140c8:	mov	r2, #4
   140cc:	bl	14248 <__assert_fail@plt+0x32d4>
   140d0:	b	14148 <__assert_fail@plt+0x31d4>
   140d4:	add	r0, sp, #4
   140d8:	mov	r1, r7
   140dc:	mov	r2, #7
   140e0:	bl	14248 <__assert_fail@plt+0x32d4>
   140e4:	b	14148 <__assert_fail@plt+0x31d4>
   140e8:	add	r0, sp, #4
   140ec:	mov	r1, #1024	; 0x400
   140f0:	b	14144 <__assert_fail@plt+0x31d0>
   140f4:	add	r0, sp, #4
   140f8:	mov	r1, r7
   140fc:	mov	r2, #6
   14100:	bl	14248 <__assert_fail@plt+0x32d4>
   14104:	b	14148 <__assert_fail@plt+0x31d4>
   14108:	add	r0, sp, #4
   1410c:	mov	r1, r7
   14110:	mov	r2, #5
   14114:	bl	14248 <__assert_fail@plt+0x32d4>
   14118:	b	14148 <__assert_fail@plt+0x31d4>
   1411c:	add	r0, sp, #4
   14120:	mov	r1, r7
   14124:	mov	r2, #8
   14128:	bl	14248 <__assert_fail@plt+0x32d4>
   1412c:	b	14148 <__assert_fail@plt+0x31d4>
   14130:	add	r0, sp, #4
   14134:	mov	r1, #512	; 0x200
   14138:	b	14144 <__assert_fail@plt+0x31d0>
   1413c:	add	r0, sp, #4
   14140:	mov	r1, #2
   14144:	bl	1419c <__assert_fail@plt+0x3228>
   14148:	ldr	r1, [r8]
   1414c:	ldr	r3, [sp]
   14150:	add	r2, r1, r3
   14154:	str	r2, [r8]
   14158:	ldrb	r1, [r1, r3]
   1415c:	orr	r5, r0, r5
   14160:	cmp	r1, #0
   14164:	orrne	r5, r5, #2
   14168:	ldr	r0, [sp, #4]
   1416c:	str	r0, [r9]
   14170:	mov	r0, r5
   14174:	sub	sp, fp, #28
   14178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1417c:	movw	r0, #21805	; 0x552d
   14180:	movt	r0, #1
   14184:	movw	r1, #21843	; 0x5553
   14188:	movt	r1, #1
   1418c:	movw	r3, #21857	; 0x5561
   14190:	movt	r3, #1
   14194:	mov	r2, #85	; 0x55
   14198:	bl	10f74 <__assert_fail@plt>
   1419c:	cmn	r1, #1
   141a0:	ble	141cc <__assert_fail@plt+0x3258>
   141a4:	cmp	r1, #0
   141a8:	beq	14208 <__assert_fail@plt+0x3294>
   141ac:	ldr	r2, [r0]
   141b0:	cmn	r2, #1
   141b4:	ble	141f4 <__assert_fail@plt+0x3280>
   141b8:	mvn	r3, #-2147483648	; 0x80000000
   141bc:	udiv	r3, r3, r1
   141c0:	cmp	r3, r2
   141c4:	bge	14208 <__assert_fail@plt+0x3294>
   141c8:	b	14228 <__assert_fail@plt+0x32b4>
   141cc:	ldr	r2, [r0]
   141d0:	cmn	r2, #1
   141d4:	ble	14218 <__assert_fail@plt+0x32a4>
   141d8:	cmn	r1, #1
   141dc:	beq	14208 <__assert_fail@plt+0x3294>
   141e0:	mov	r3, #-2147483648	; 0x80000000
   141e4:	sdiv	r3, r3, r1
   141e8:	cmp	r3, r2
   141ec:	bge	14208 <__assert_fail@plt+0x3294>
   141f0:	b	14228 <__assert_fail@plt+0x32b4>
   141f4:	beq	14208 <__assert_fail@plt+0x3294>
   141f8:	mov	r3, #-2147483648	; 0x80000000
   141fc:	sdiv	r2, r3, r2
   14200:	cmp	r2, r1
   14204:	blt	14228 <__assert_fail@plt+0x32b4>
   14208:	ldr	r2, [r0]
   1420c:	mul	r2, r2, r1
   14210:	mov	r1, #0
   14214:	b	1423c <__assert_fail@plt+0x32c8>
   14218:	mvn	r3, #-2147483648	; 0x80000000
   1421c:	sdiv	r3, r3, r1
   14220:	cmp	r2, r3
   14224:	bge	14208 <__assert_fail@plt+0x3294>
   14228:	ldr	r1, [r0]
   1422c:	mvn	r2, #-2147483648	; 0x80000000
   14230:	cmp	r1, #0
   14234:	movmi	r2, #-2147483648	; 0x80000000
   14238:	mov	r1, #1
   1423c:	str	r2, [r0]
   14240:	mov	r0, r1
   14244:	bx	lr
   14248:	push	{r4, r5, r6, r7, fp, lr}
   1424c:	add	fp, sp, #16
   14250:	cmp	r2, #0
   14254:	beq	14288 <__assert_fail@plt+0x3314>
   14258:	mov	r4, r2
   1425c:	mov	r5, r1
   14260:	mov	r7, r0
   14264:	mov	r6, #0
   14268:	mov	r0, r7
   1426c:	mov	r1, r5
   14270:	bl	1419c <__assert_fail@plt+0x3228>
   14274:	orr	r6, r0, r6
   14278:	subs	r4, r4, #1
   1427c:	bne	14268 <__assert_fail@plt+0x32f4>
   14280:	mov	r0, r6
   14284:	pop	{r4, r5, r6, r7, fp, pc}
   14288:	mov	r6, #0
   1428c:	mov	r0, r6
   14290:	pop	{r4, r5, r6, r7, fp, pc}
   14294:	clz	r2, r1
   14298:	lsr	r2, r2, #5
   1429c:	clz	r3, r0
   142a0:	lsr	r3, r3, #5
   142a4:	orrs	r2, r3, r2
   142a8:	movwne	r1, #1
   142ac:	movwne	r0, #1
   142b0:	cmp	r1, #0
   142b4:	beq	142e4 <__assert_fail@plt+0x3370>
   142b8:	mvn	r2, #-2147483648	; 0x80000000
   142bc:	udiv	r2, r2, r1
   142c0:	cmp	r2, r0
   142c4:	bcs	142e4 <__assert_fail@plt+0x3370>
   142c8:	push	{fp, lr}
   142cc:	mov	fp, sp
   142d0:	bl	10ecc <__errno_location@plt>
   142d4:	mov	r1, #12
   142d8:	str	r1, [r0]
   142dc:	mov	r0, #0
   142e0:	pop	{fp, pc}
   142e4:	b	10d40 <calloc@plt>
   142e8:	cmp	r0, #0
   142ec:	movweq	r0, #1
   142f0:	cmn	r0, #1
   142f4:	ble	142fc <__assert_fail@plt+0x3388>
   142f8:	b	10e54 <malloc@plt>
   142fc:	push	{fp, lr}
   14300:	mov	fp, sp
   14304:	bl	10ecc <__errno_location@plt>
   14308:	mov	r1, #12
   1430c:	str	r1, [r0]
   14310:	mov	r0, #0
   14314:	pop	{fp, pc}
   14318:	push	{fp, lr}
   1431c:	mov	fp, sp
   14320:	cmp	r0, #0
   14324:	beq	14340 <__assert_fail@plt+0x33cc>
   14328:	cmp	r1, #0
   1432c:	beq	1434c <__assert_fail@plt+0x33d8>
   14330:	cmn	r1, #1
   14334:	ble	14358 <__assert_fail@plt+0x33e4>
   14338:	pop	{fp, lr}
   1433c:	b	10dc4 <realloc@plt>
   14340:	mov	r0, r1
   14344:	pop	{fp, lr}
   14348:	b	142e8 <__assert_fail@plt+0x3374>
   1434c:	bl	1481c <__assert_fail@plt+0x38a8>
   14350:	mov	r0, #0
   14354:	pop	{fp, pc}
   14358:	bl	10ecc <__errno_location@plt>
   1435c:	mov	r1, #12
   14360:	str	r1, [r0]
   14364:	mov	r0, #0
   14368:	pop	{fp, pc}
   1436c:	mov	r1, r0
   14370:	sub	r2, r0, #65	; 0x41
   14374:	mov	r0, #1
   14378:	cmp	r2, #26
   1437c:	subcs	r2, r1, #97	; 0x61
   14380:	cmpcs	r2, #26
   14384:	bcs	1438c <__assert_fail@plt+0x3418>
   14388:	bx	lr
   1438c:	sub	r1, r1, #48	; 0x30
   14390:	cmp	r1, #10
   14394:	movcs	r0, #0
   14398:	bx	lr
   1439c:	mov	r1, r0
   143a0:	sub	r2, r0, #65	; 0x41
   143a4:	mov	r0, #1
   143a8:	cmp	r2, #26
   143ac:	subcs	r1, r1, #97	; 0x61
   143b0:	cmpcs	r1, #26
   143b4:	movcs	r0, #0
   143b8:	bx	lr
   143bc:	mov	r1, #0
   143c0:	cmp	r0, #128	; 0x80
   143c4:	movwcc	r1, #1
   143c8:	mov	r0, r1
   143cc:	bx	lr
   143d0:	sub	r1, r0, #9
   143d4:	clz	r1, r1
   143d8:	lsr	r1, r1, #5
   143dc:	sub	r0, r0, #32
   143e0:	clz	r0, r0
   143e4:	lsr	r0, r0, #5
   143e8:	orr	r0, r0, r1
   143ec:	bx	lr
   143f0:	mov	r1, r0
   143f4:	mov	r0, #1
   143f8:	cmp	r1, #32
   143fc:	bxcc	lr
   14400:	cmp	r1, #127	; 0x7f
   14404:	movne	r0, #0
   14408:	bx	lr
   1440c:	sub	r1, r0, #48	; 0x30
   14410:	mov	r0, #0
   14414:	cmp	r1, #10
   14418:	movwcc	r0, #1
   1441c:	bx	lr
   14420:	sub	r1, r0, #33	; 0x21
   14424:	mov	r0, #0
   14428:	cmp	r1, #94	; 0x5e
   1442c:	movwcc	r0, #1
   14430:	bx	lr
   14434:	sub	r1, r0, #97	; 0x61
   14438:	mov	r0, #0
   1443c:	cmp	r1, #26
   14440:	movwcc	r0, #1
   14444:	bx	lr
   14448:	sub	r1, r0, #32
   1444c:	mov	r0, #0
   14450:	cmp	r1, #95	; 0x5f
   14454:	movwcc	r0, #1
   14458:	bx	lr
   1445c:	sub	r1, r0, #33	; 0x21
   14460:	cmp	r1, #93	; 0x5d
   14464:	bhi	145f0 <__assert_fail@plt+0x367c>
   14468:	mov	r0, #1
   1446c:	add	r2, pc, #0
   14470:	ldr	pc, [r2, r1, lsl #2]
   14474:	andeq	r4, r1, ip, ror #11
   14478:	andeq	r4, r1, ip, ror #11
   1447c:	andeq	r4, r1, ip, ror #11
   14480:	andeq	r4, r1, ip, ror #11
   14484:	andeq	r4, r1, ip, ror #11
   14488:	andeq	r4, r1, ip, ror #11
   1448c:	andeq	r4, r1, ip, ror #11
   14490:	andeq	r4, r1, ip, ror #11
   14494:	andeq	r4, r1, ip, ror #11
   14498:	andeq	r4, r1, ip, ror #11
   1449c:	andeq	r4, r1, ip, ror #11
   144a0:	andeq	r4, r1, ip, ror #11
   144a4:	andeq	r4, r1, ip, ror #11
   144a8:	andeq	r4, r1, ip, ror #11
   144ac:	andeq	r4, r1, ip, ror #11
   144b0:	strdeq	r4, [r1], -r0
   144b4:	strdeq	r4, [r1], -r0
   144b8:	strdeq	r4, [r1], -r0
   144bc:	strdeq	r4, [r1], -r0
   144c0:	strdeq	r4, [r1], -r0
   144c4:	strdeq	r4, [r1], -r0
   144c8:	strdeq	r4, [r1], -r0
   144cc:	strdeq	r4, [r1], -r0
   144d0:	strdeq	r4, [r1], -r0
   144d4:	strdeq	r4, [r1], -r0
   144d8:	andeq	r4, r1, ip, ror #11
   144dc:	andeq	r4, r1, ip, ror #11
   144e0:	andeq	r4, r1, ip, ror #11
   144e4:	andeq	r4, r1, ip, ror #11
   144e8:	andeq	r4, r1, ip, ror #11
   144ec:	andeq	r4, r1, ip, ror #11
   144f0:	andeq	r4, r1, ip, ror #11
   144f4:	strdeq	r4, [r1], -r0
   144f8:	strdeq	r4, [r1], -r0
   144fc:	strdeq	r4, [r1], -r0
   14500:	strdeq	r4, [r1], -r0
   14504:	strdeq	r4, [r1], -r0
   14508:	strdeq	r4, [r1], -r0
   1450c:	strdeq	r4, [r1], -r0
   14510:	strdeq	r4, [r1], -r0
   14514:	strdeq	r4, [r1], -r0
   14518:	strdeq	r4, [r1], -r0
   1451c:	strdeq	r4, [r1], -r0
   14520:	strdeq	r4, [r1], -r0
   14524:	strdeq	r4, [r1], -r0
   14528:	strdeq	r4, [r1], -r0
   1452c:	strdeq	r4, [r1], -r0
   14530:	strdeq	r4, [r1], -r0
   14534:	strdeq	r4, [r1], -r0
   14538:	strdeq	r4, [r1], -r0
   1453c:	strdeq	r4, [r1], -r0
   14540:	strdeq	r4, [r1], -r0
   14544:	strdeq	r4, [r1], -r0
   14548:	strdeq	r4, [r1], -r0
   1454c:	strdeq	r4, [r1], -r0
   14550:	strdeq	r4, [r1], -r0
   14554:	strdeq	r4, [r1], -r0
   14558:	strdeq	r4, [r1], -r0
   1455c:	andeq	r4, r1, ip, ror #11
   14560:	andeq	r4, r1, ip, ror #11
   14564:	andeq	r4, r1, ip, ror #11
   14568:	andeq	r4, r1, ip, ror #11
   1456c:	andeq	r4, r1, ip, ror #11
   14570:	andeq	r4, r1, ip, ror #11
   14574:	strdeq	r4, [r1], -r0
   14578:	strdeq	r4, [r1], -r0
   1457c:	strdeq	r4, [r1], -r0
   14580:	strdeq	r4, [r1], -r0
   14584:	strdeq	r4, [r1], -r0
   14588:	strdeq	r4, [r1], -r0
   1458c:	strdeq	r4, [r1], -r0
   14590:	strdeq	r4, [r1], -r0
   14594:	strdeq	r4, [r1], -r0
   14598:	strdeq	r4, [r1], -r0
   1459c:	strdeq	r4, [r1], -r0
   145a0:	strdeq	r4, [r1], -r0
   145a4:	strdeq	r4, [r1], -r0
   145a8:	strdeq	r4, [r1], -r0
   145ac:	strdeq	r4, [r1], -r0
   145b0:	strdeq	r4, [r1], -r0
   145b4:	strdeq	r4, [r1], -r0
   145b8:	strdeq	r4, [r1], -r0
   145bc:	strdeq	r4, [r1], -r0
   145c0:	strdeq	r4, [r1], -r0
   145c4:	strdeq	r4, [r1], -r0
   145c8:	strdeq	r4, [r1], -r0
   145cc:	strdeq	r4, [r1], -r0
   145d0:	strdeq	r4, [r1], -r0
   145d4:	strdeq	r4, [r1], -r0
   145d8:	strdeq	r4, [r1], -r0
   145dc:	andeq	r4, r1, ip, ror #11
   145e0:	andeq	r4, r1, ip, ror #11
   145e4:	andeq	r4, r1, ip, ror #11
   145e8:	andeq	r4, r1, ip, ror #11
   145ec:	bx	lr
   145f0:	mov	r0, #0
   145f4:	bx	lr
   145f8:	sub	r0, r0, #9
   145fc:	cmp	r0, #23
   14600:	movhi	r0, #0
   14604:	bxhi	lr
   14608:	bic	r0, r0, #-16777216	; 0xff000000
   1460c:	movw	r1, #31
   14610:	movt	r1, #128	; 0x80
   14614:	mov	r2, #1
   14618:	and	r0, r2, r1, lsr r0
   1461c:	bx	lr
   14620:	sub	r1, r0, #65	; 0x41
   14624:	mov	r0, #0
   14628:	cmp	r1, #26
   1462c:	movwcc	r0, #1
   14630:	bx	lr
   14634:	mov	r1, r0
   14638:	sub	r2, r0, #48	; 0x30
   1463c:	mov	r0, #1
   14640:	cmp	r2, #22
   14644:	bhi	1465c <__assert_fail@plt+0x36e8>
   14648:	mov	ip, #1
   1464c:	movw	r3, #1023	; 0x3ff
   14650:	movt	r3, #126	; 0x7e
   14654:	tst	r3, ip, lsl r2
   14658:	bxne	lr
   1465c:	sub	r1, r1, #97	; 0x61
   14660:	cmp	r1, #6
   14664:	movcs	r0, #0
   14668:	bxcs	lr
   1466c:	bx	lr
   14670:	sub	r1, r0, #65	; 0x41
   14674:	cmp	r1, #26
   14678:	addcc	r0, r0, #32
   1467c:	bx	lr
   14680:	sub	r1, r0, #97	; 0x61
   14684:	cmp	r1, #26
   14688:	subcc	r0, r0, #32
   1468c:	bx	lr
   14690:	push	{r4, r5, r6, sl, fp, lr}
   14694:	add	fp, sp, #16
   14698:	mov	r4, r0
   1469c:	bl	10e18 <__fpending@plt>
   146a0:	mov	r5, r0
   146a4:	mov	r0, r4
   146a8:	bl	10e24 <ferror_unlocked@plt>
   146ac:	mov	r6, r0
   146b0:	mov	r0, r4
   146b4:	bl	14714 <__assert_fail@plt+0x37a0>
   146b8:	cmp	r6, #0
   146bc:	beq	146e0 <__assert_fail@plt+0x376c>
   146c0:	mvn	r4, #0
   146c4:	cmp	r0, #0
   146c8:	bne	1470c <__assert_fail@plt+0x3798>
   146cc:	bl	10ecc <__errno_location@plt>
   146d0:	mov	r1, #0
   146d4:	str	r1, [r0]
   146d8:	mov	r0, r4
   146dc:	pop	{r4, r5, r6, sl, fp, pc}
   146e0:	cmp	r0, #0
   146e4:	mov	r4, r0
   146e8:	mvnne	r4, #0
   146ec:	cmp	r5, #0
   146f0:	bne	1470c <__assert_fail@plt+0x3798>
   146f4:	cmp	r0, #0
   146f8:	beq	1470c <__assert_fail@plt+0x3798>
   146fc:	bl	10ecc <__errno_location@plt>
   14700:	ldr	r0, [r0]
   14704:	subs	r4, r0, #9
   14708:	mvnne	r4, #0
   1470c:	mov	r0, r4
   14710:	pop	{r4, r5, r6, sl, fp, pc}
   14714:	push	{r4, r5, fp, lr}
   14718:	add	fp, sp, #8
   1471c:	sub	sp, sp, #8
   14720:	mov	r4, r0
   14724:	bl	10efc <fileno@plt>
   14728:	cmn	r0, #1
   1472c:	ble	147a4 <__assert_fail@plt+0x3830>
   14730:	mov	r0, r4
   14734:	bl	10e6c <__freading@plt>
   14738:	cmp	r0, #0
   1473c:	beq	14768 <__assert_fail@plt+0x37f4>
   14740:	mov	r0, r4
   14744:	bl	10efc <fileno@plt>
   14748:	mov	r1, #1
   1474c:	str	r1, [sp]
   14750:	mov	r2, #0
   14754:	mov	r3, #0
   14758:	bl	10e00 <lseek64@plt>
   1475c:	and	r0, r0, r1
   14760:	cmn	r0, #1
   14764:	beq	147a4 <__assert_fail@plt+0x3830>
   14768:	mov	r0, r4
   1476c:	bl	147b4 <__assert_fail@plt+0x3840>
   14770:	cmp	r0, #0
   14774:	beq	147a4 <__assert_fail@plt+0x3830>
   14778:	bl	10ecc <__errno_location@plt>
   1477c:	ldr	r5, [r0]
   14780:	mov	r0, r4
   14784:	bl	10f14 <fclose@plt>
   14788:	cmp	r5, #0
   1478c:	beq	1479c <__assert_fail@plt+0x3828>
   14790:	bl	10ecc <__errno_location@plt>
   14794:	str	r5, [r0]
   14798:	mvn	r0, #0
   1479c:	sub	sp, fp, #8
   147a0:	pop	{r4, r5, fp, pc}
   147a4:	mov	r0, r4
   147a8:	sub	sp, fp, #8
   147ac:	pop	{r4, r5, fp, lr}
   147b0:	b	10f14 <fclose@plt>
   147b4:	push	{r4, sl, fp, lr}
   147b8:	add	fp, sp, #8
   147bc:	mov	r4, r0
   147c0:	cmp	r0, #0
   147c4:	beq	147dc <__assert_fail@plt+0x3868>
   147c8:	mov	r0, r4
   147cc:	bl	10e6c <__freading@plt>
   147d0:	cmp	r0, #0
   147d4:	movne	r0, r4
   147d8:	blne	147e8 <__assert_fail@plt+0x3874>
   147dc:	mov	r0, r4
   147e0:	pop	{r4, sl, fp, lr}
   147e4:	b	10d70 <fflush@plt>
   147e8:	push	{fp, lr}
   147ec:	mov	fp, sp
   147f0:	sub	sp, sp, #8
   147f4:	ldrb	r1, [r0, #1]
   147f8:	tst	r1, #1
   147fc:	beq	14814 <__assert_fail@plt+0x38a0>
   14800:	mov	r1, #1
   14804:	str	r1, [sp]
   14808:	mov	r2, #0
   1480c:	mov	r3, #0
   14810:	bl	14844 <__assert_fail@plt+0x38d0>
   14814:	mov	sp, fp
   14818:	pop	{fp, pc}
   1481c:	push	{r4, r5, r6, sl, fp, lr}
   14820:	add	fp, sp, #16
   14824:	mov	r4, r0
   14828:	bl	10ecc <__errno_location@plt>
   1482c:	mov	r5, r0
   14830:	ldr	r6, [r0]
   14834:	mov	r0, r4
   14838:	bl	10d7c <free@plt>
   1483c:	str	r6, [r5]
   14840:	pop	{r4, r5, r6, sl, fp, pc}
   14844:	push	{r4, r5, r6, r7, fp, lr}
   14848:	add	fp, sp, #16
   1484c:	sub	sp, sp, #8
   14850:	mov	r5, r3
   14854:	mov	r6, r2
   14858:	mov	r4, r0
   1485c:	ldr	r0, [r0, #4]
   14860:	ldr	r1, [r4, #8]
   14864:	cmp	r1, r0
   14868:	bne	14884 <__assert_fail@plt+0x3910>
   1486c:	ldrd	r0, [r4, #16]
   14870:	cmp	r1, r0
   14874:	bne	14884 <__assert_fail@plt+0x3910>
   14878:	ldr	r0, [r4, #36]	; 0x24
   1487c:	cmp	r0, #0
   14880:	beq	1489c <__assert_fail@plt+0x3928>
   14884:	mov	r0, r4
   14888:	mov	r2, r6
   1488c:	mov	r3, r5
   14890:	sub	sp, fp, #16
   14894:	pop	{r4, r5, r6, r7, fp, lr}
   14898:	b	10f20 <fseeko64@plt>
   1489c:	ldr	r7, [fp, #8]
   148a0:	mov	r0, r4
   148a4:	bl	10efc <fileno@plt>
   148a8:	str	r7, [sp]
   148ac:	mov	r2, r6
   148b0:	mov	r3, r5
   148b4:	bl	10e00 <lseek64@plt>
   148b8:	and	r2, r0, r1
   148bc:	cmn	r2, #1
   148c0:	beq	148e0 <__assert_fail@plt+0x396c>
   148c4:	strd	r0, [r4, #80]	; 0x50
   148c8:	ldr	r0, [r4]
   148cc:	bic	r0, r0, #16
   148d0:	str	r0, [r4]
   148d4:	mov	r0, #0
   148d8:	sub	sp, fp, #16
   148dc:	pop	{r4, r5, r6, r7, fp, pc}
   148e0:	mvn	r0, #0
   148e4:	sub	sp, fp, #16
   148e8:	pop	{r4, r5, r6, r7, fp, pc}
   148ec:	push	{fp, lr}
   148f0:	mov	fp, sp
   148f4:	bl	10ecc <__errno_location@plt>
   148f8:	mov	r1, #12
   148fc:	str	r1, [r0]
   14900:	mov	r0, #0
   14904:	pop	{fp, pc}
   14908:	b	142e8 <__assert_fail@plt+0x3374>
   1490c:	cmp	r1, #0
   14910:	orreq	r1, r1, #1
   14914:	b	14318 <__assert_fail@plt+0x33a4>
   14918:	b	14294 <__assert_fail@plt+0x3320>
   1491c:	clz	r3, r2
   14920:	lsr	ip, r3, #5
   14924:	clz	r3, r1
   14928:	lsr	r3, r3, #5
   1492c:	orrs	r3, r3, ip
   14930:	movwne	r1, #1
   14934:	movwne	r2, #1
   14938:	b	149d8 <__assert_fail@plt+0x3a64>
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	mov	r0, #14
   14948:	bl	10f44 <nl_langinfo@plt>
   1494c:	movw	r1, #20586	; 0x506a
   14950:	movt	r1, #1
   14954:	cmp	r0, #0
   14958:	movne	r1, r0
   1495c:	ldrb	r2, [r1]
   14960:	movw	r0, #21928	; 0x55a8
   14964:	movt	r0, #1
   14968:	cmp	r2, #0
   1496c:	movne	r0, r1
   14970:	pop	{fp, pc}
   14974:	push	{r4, r5, r6, r7, fp, lr}
   14978:	add	fp, sp, #16
   1497c:	sub	sp, sp, #8
   14980:	mov	r7, r2
   14984:	mov	r4, r1
   14988:	add	r5, sp, #4
   1498c:	cmp	r0, #0
   14990:	movne	r5, r0
   14994:	mov	r0, r5
   14998:	bl	10e30 <mbrtowc@plt>
   1499c:	mov	r6, r0
   149a0:	cmp	r7, #0
   149a4:	beq	149cc <__assert_fail@plt+0x3a58>
   149a8:	cmn	r6, #2
   149ac:	bcc	149cc <__assert_fail@plt+0x3a58>
   149b0:	mov	r0, #0
   149b4:	bl	14a14 <__assert_fail@plt+0x3aa0>
   149b8:	cmp	r0, #0
   149bc:	bne	149cc <__assert_fail@plt+0x3a58>
   149c0:	ldrb	r0, [r4]
   149c4:	str	r0, [r5]
   149c8:	mov	r6, #1
   149cc:	mov	r0, r6
   149d0:	sub	sp, fp, #16
   149d4:	pop	{r4, r5, r6, r7, fp, pc}
   149d8:	cmp	r2, #0
   149dc:	beq	14a0c <__assert_fail@plt+0x3a98>
   149e0:	mvn	r3, #0
   149e4:	udiv	r3, r3, r2
   149e8:	cmp	r3, r1
   149ec:	bcs	14a0c <__assert_fail@plt+0x3a98>
   149f0:	push	{fp, lr}
   149f4:	mov	fp, sp
   149f8:	bl	10ecc <__errno_location@plt>
   149fc:	mov	r1, #12
   14a00:	str	r1, [r0]
   14a04:	mov	r0, #0
   14a08:	pop	{fp, pc}
   14a0c:	mul	r1, r2, r1
   14a10:	b	14318 <__assert_fail@plt+0x33a4>
   14a14:	push	{r4, sl, fp, lr}
   14a18:	add	fp, sp, #8
   14a1c:	sub	sp, sp, #264	; 0x108
   14a20:	add	r1, sp, #7
   14a24:	movw	r2, #257	; 0x101
   14a28:	bl	14a80 <__assert_fail@plt+0x3b0c>
   14a2c:	mov	r4, #0
   14a30:	cmp	r0, #0
   14a34:	bne	14a74 <__assert_fail@plt+0x3b00>
   14a38:	add	r0, sp, #7
   14a3c:	movw	r1, #21934	; 0x55ae
   14a40:	movt	r1, #1
   14a44:	mov	r2, #2
   14a48:	bl	10ea8 <bcmp@plt>
   14a4c:	cmp	r0, #0
   14a50:	beq	14a74 <__assert_fail@plt+0x3b00>
   14a54:	add	r0, sp, #7
   14a58:	movw	r1, #21936	; 0x55b0
   14a5c:	movt	r1, #1
   14a60:	mov	r2, #6
   14a64:	bl	10ea8 <bcmp@plt>
   14a68:	mov	r4, r0
   14a6c:	cmp	r0, #0
   14a70:	movwne	r4, #1
   14a74:	mov	r0, r4
   14a78:	sub	sp, fp, #8
   14a7c:	pop	{r4, sl, fp, pc}
   14a80:	b	14a84 <__assert_fail@plt+0x3b10>
   14a84:	push	{r4, r5, r6, r7, fp, lr}
   14a88:	add	fp, sp, #16
   14a8c:	mov	r6, r2
   14a90:	mov	r4, r1
   14a94:	bl	14b1c <__assert_fail@plt+0x3ba8>
   14a98:	cmp	r0, #0
   14a9c:	beq	14acc <__assert_fail@plt+0x3b58>
   14aa0:	mov	r7, r0
   14aa4:	bl	10eb4 <strlen@plt>
   14aa8:	cmp	r0, r6
   14aac:	bcs	14ae8 <__assert_fail@plt+0x3b74>
   14ab0:	add	r2, r0, #1
   14ab4:	mov	r0, r4
   14ab8:	mov	r1, r7
   14abc:	bl	10d94 <memcpy@plt>
   14ac0:	mov	r5, #0
   14ac4:	mov	r0, r5
   14ac8:	pop	{r4, r5, r6, r7, fp, pc}
   14acc:	mov	r5, #22
   14ad0:	cmp	r6, #0
   14ad4:	beq	14b10 <__assert_fail@plt+0x3b9c>
   14ad8:	mov	r0, #0
   14adc:	strb	r0, [r4]
   14ae0:	mov	r0, r5
   14ae4:	pop	{r4, r5, r6, r7, fp, pc}
   14ae8:	mov	r5, #34	; 0x22
   14aec:	cmp	r6, #0
   14af0:	beq	14b10 <__assert_fail@plt+0x3b9c>
   14af4:	sub	r6, r6, #1
   14af8:	mov	r0, r4
   14afc:	mov	r1, r7
   14b00:	mov	r2, r6
   14b04:	bl	10d94 <memcpy@plt>
   14b08:	mov	r0, #0
   14b0c:	strb	r0, [r4, r6]
   14b10:	mov	r0, r5
   14b14:	pop	{r4, r5, r6, r7, fp, pc}
   14b18:	b	14b1c <__assert_fail@plt+0x3ba8>
   14b1c:	mov	r1, #0
   14b20:	b	10f2c <setlocale@plt>
   14b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b28:	mov	r7, r0
   14b2c:	ldr	r6, [pc, #72]	; 14b7c <__assert_fail@plt+0x3c08>
   14b30:	ldr	r5, [pc, #72]	; 14b80 <__assert_fail@plt+0x3c0c>
   14b34:	add	r6, pc, r6
   14b38:	add	r5, pc, r5
   14b3c:	sub	r6, r6, r5
   14b40:	mov	r8, r1
   14b44:	mov	r9, r2
   14b48:	bl	10d20 <calloc@plt-0x20>
   14b4c:	asrs	r6, r6, #2
   14b50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b54:	mov	r4, #0
   14b58:	add	r4, r4, #1
   14b5c:	ldr	r3, [r5], #4
   14b60:	mov	r2, r9
   14b64:	mov	r1, r8
   14b68:	mov	r0, r7
   14b6c:	blx	r3
   14b70:	cmp	r6, r4
   14b74:	bne	14b58 <__assert_fail@plt+0x3be4>
   14b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b7c:	ldrdeq	r1, [r1], -r0
   14b80:	andeq	r1, r1, r8, asr #7
   14b84:	bx	lr
   14b88:	ldr	r3, [pc, #12]	; 14b9c <__assert_fail@plt+0x3c28>
   14b8c:	mov	r1, #0
   14b90:	add	r3, pc, r3
   14b94:	ldr	r2, [r3]
   14b98:	b	10ed8 <__cxa_atexit@plt>
   14b9c:	andeq	r1, r1, ip, lsr r5

Disassembly of section .fini:

00014ba0 <.fini>:
   14ba0:	push	{r3, lr}
   14ba4:	pop	{r3, pc}
