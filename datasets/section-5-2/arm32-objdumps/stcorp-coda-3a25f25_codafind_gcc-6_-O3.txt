
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000108a4 <.init>:
   108a4:	push	{r3, lr}
   108a8:	bl	10cec <_start@@Base+0x3c>
   108ac:	pop	{r3, pc}

Disassembly of section .plt:

000108b0 <coda_match_filefilter@plt-0x14>:
   108b0:	push	{lr}		; (str lr, [sp, #-4]!)
   108b4:	ldr	lr, [pc, #4]	; 108c0 <coda_match_filefilter@plt-0x4>
   108b8:	add	lr, pc, lr
   108bc:	ldr	pc, [lr, #8]!
   108c0:	andeq	r1, r1, r0, asr #14

000108c4 <coda_match_filefilter@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #69632	; 0x11000
   108cc:	ldr	pc, [ip, #1856]!	; 0x740

000108d0 <strcmp@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #69632	; 0x11000
   108d8:	ldr	pc, [ip, #1848]!	; 0x738

000108dc <printf@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #69632	; 0x11000
   108e4:	ldr	pc, [ip, #1840]!	; 0x730

000108e8 <coda_set_definition_path_conditional@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #69632	; 0x11000
   108f0:	ldr	pc, [ip, #1832]!	; 0x728

000108f4 <coda_set_definition_path@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #69632	; 0x11000
   108fc:	ldr	pc, [ip, #1824]!	; 0x720

00010900 <fwrite@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #69632	; 0x11000
   10908:	ldr	pc, [ip, #1816]!	; 0x718

0001090c <coda_done@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #69632	; 0x11000
   10914:	ldr	pc, [ip, #1808]!	; 0x710

00010918 <puts@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #69632	; 0x11000
   10920:	ldr	pc, [ip, #1800]!	; 0x708

00010924 <__libc_start_main@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #69632	; 0x11000
   1092c:	ldr	pc, [ip, #1792]!	; 0x700

00010930 <__gmon_start__@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #69632	; 0x11000
   10938:	ldr	pc, [ip, #1784]!	; 0x6f8

0001093c <exit@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #69632	; 0x11000
   10944:	ldr	pc, [ip, #1776]!	; 0x6f0

00010948 <fprintf@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #69632	; 0x11000
   10950:	ldr	pc, [ip, #1768]!	; 0x6e8

00010954 <coda_init@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #69632	; 0x11000
   1095c:	ldr	pc, [ip, #1760]!	; 0x6e0

00010960 <coda_set_option_perform_conversions@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #69632	; 0x11000
   10968:	ldr	pc, [ip, #1752]!	; 0x6d8

0001096c <putchar@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #69632	; 0x11000
   10974:	ldr	pc, [ip, #1744]!	; 0x6d0

00010978 <coda_errno_to_string@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #69632	; 0x11000
   10980:	ldr	pc, [ip, #1736]!	; 0x6c8

00010984 <coda_get_libcoda_version@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #69632	; 0x11000
   1098c:	ldr	pc, [ip, #1728]!	; 0x6c0

00010990 <coda_get_errno@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #69632	; 0x11000
   10998:	ldr	pc, [ip, #1720]!	; 0x6b8

0001099c <abort@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #69632	; 0x11000
   109a4:	ldr	pc, [ip, #1712]!	; 0x6b0

000109a8 <__assert_fail@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #69632	; 0x11000
   109b0:	ldr	pc, [ip, #1704]!	; 0x6a8

Disassembly of section .text:

000109b4 <main@@Base>:
   109b4:	ldr	r2, [pc, #680]	; 10c64 <main@@Base+0x2b0>
   109b8:	mov	r3, #0
   109bc:	cmp	r0, #1
   109c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109c4:	sub	sp, sp, #20
   109c8:	str	r3, [r2]
   109cc:	beq	10c04 <main@@Base+0x250>
   109d0:	ldr	r4, [r1, #4]
   109d4:	mov	r5, r0
   109d8:	mov	r6, r1
   109dc:	mov	r0, r4
   109e0:	ldr	r1, [pc, #640]	; 10c68 <main@@Base+0x2b4>
   109e4:	bl	108d0 <strcmp@plt>
   109e8:	cmp	r0, #0
   109ec:	beq	10c04 <main@@Base+0x250>
   109f0:	ldr	r1, [pc, #628]	; 10c6c <main@@Base+0x2b8>
   109f4:	mov	r0, r4
   109f8:	bl	108d0 <strcmp@plt>
   109fc:	cmp	r0, #0
   10a00:	beq	10c04 <main@@Base+0x250>
   10a04:	ldr	r1, [pc, #612]	; 10c70 <main@@Base+0x2bc>
   10a08:	mov	r0, r4
   10a0c:	bl	108d0 <strcmp@plt>
   10a10:	cmp	r0, #0
   10a14:	beq	10c10 <main@@Base+0x25c>
   10a18:	ldr	r1, [pc, #596]	; 10c74 <main@@Base+0x2c0>
   10a1c:	mov	r0, r4
   10a20:	bl	108d0 <strcmp@plt>
   10a24:	cmp	r0, #0
   10a28:	beq	10c10 <main@@Base+0x25c>
   10a2c:	cmp	r5, #2
   10a30:	ble	10a48 <main@@Base+0x94>
   10a34:	mov	r0, r4
   10a38:	ldr	r1, [pc, #568]	; 10c78 <main@@Base+0x2c4>
   10a3c:	bl	108d0 <strcmp@plt>
   10a40:	subs	r4, r0, #0
   10a44:	beq	10bb0 <main@@Base+0x1fc>
   10a48:	ldr	r2, [pc, #556]	; 10c7c <main@@Base+0x2c8>
   10a4c:	mov	r1, #0
   10a50:	ldr	r0, [r6]
   10a54:	bl	108e8 <coda_set_definition_path_conditional@plt>
   10a58:	cmp	r0, #0
   10a5c:	bne	10c38 <main@@Base+0x284>
   10a60:	cmp	r5, #1
   10a64:	movle	r9, #1
   10a68:	strle	r0, [sp, #12]
   10a6c:	movle	fp, r9
   10a70:	ble	10b34 <main@@Base+0x180>
   10a74:	mov	fp, #1
   10a78:	mov	r3, #0
   10a7c:	mov	r9, #1
   10a80:	str	r3, [sp, #12]
   10a84:	ldr	r8, [pc, #500]	; 10c80 <main@@Base+0x2cc>
   10a88:	mov	sl, r3
   10a8c:	b	10b00 <main@@Base+0x14c>
   10a90:	ldr	r1, [pc, #492]	; 10c84 <main@@Base+0x2d0>
   10a94:	mov	r0, r4
   10a98:	bl	108d0 <strcmp@plt>
   10a9c:	cmp	r0, #0
   10aa0:	beq	10b1c <main@@Base+0x168>
   10aa4:	ldr	r1, [pc, #476]	; 10c88 <main@@Base+0x2d4>
   10aa8:	mov	r0, r4
   10aac:	bl	108d0 <strcmp@plt>
   10ab0:	cmp	r0, #0
   10ab4:	beq	10acc <main@@Base+0x118>
   10ab8:	ldr	r1, [pc, #460]	; 10c8c <main@@Base+0x2d8>
   10abc:	mov	r0, r4
   10ac0:	bl	108d0 <strcmp@plt>
   10ac4:	cmp	r0, #0
   10ac8:	bne	10b78 <main@@Base+0x1c4>
   10acc:	add	r3, fp, #1
   10ad0:	cmp	r5, r3
   10ad4:	ble	10b78 <main@@Base+0x1c4>
   10ad8:	add	r7, r6, r7
   10adc:	ldr	r2, [r7, #4]
   10ae0:	ldrb	r1, [r2]
   10ae4:	cmp	r1, #45	; 0x2d
   10ae8:	movne	fp, r3
   10aec:	strne	r2, [sp, #12]
   10af0:	beq	10b78 <main@@Base+0x1c4>
   10af4:	add	fp, fp, #1
   10af8:	cmp	r5, fp
   10afc:	ble	10b2c <main@@Base+0x178>
   10b00:	ldr	r4, [r6, fp, lsl #2]
   10b04:	mov	r1, r8
   10b08:	mov	r0, r4
   10b0c:	bl	108d0 <strcmp@plt>
   10b10:	lsl	r7, fp, #2
   10b14:	cmp	r0, #0
   10b18:	bne	10a90 <main@@Base+0xdc>
   10b1c:	add	fp, fp, #1
   10b20:	cmp	r5, fp
   10b24:	mov	r9, sl
   10b28:	bgt	10b00 <main@@Base+0x14c>
   10b2c:	cmp	r5, fp
   10b30:	beq	10be0 <main@@Base+0x22c>
   10b34:	bl	10954 <coda_init@plt>
   10b38:	subs	r4, r0, #0
   10b3c:	bne	10c38 <main@@Base+0x284>
   10b40:	mov	r0, r9
   10b44:	bl	10960 <coda_set_option_perform_conversions@plt>
   10b48:	str	r4, [sp]
   10b4c:	add	r2, r6, fp, lsl #2
   10b50:	sub	r1, r5, fp
   10b54:	ldr	r0, [sp, #12]
   10b58:	ldr	r3, [pc, #304]	; 10c90 <main@@Base+0x2dc>
   10b5c:	bl	108c4 <coda_match_filefilter@plt>
   10b60:	subs	r4, r0, #0
   10b64:	bne	10c38 <main@@Base+0x284>
   10b68:	bl	1090c <coda_done@plt>
   10b6c:	mov	r0, r4
   10b70:	add	sp, sp, #20
   10b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b78:	ldr	r1, [pc, #276]	; 10c94 <main@@Base+0x2e0>
   10b7c:	mov	r0, r4
   10b80:	bl	108d0 <strcmp@plt>
   10b84:	cmp	r0, #0
   10b88:	beq	10ba0 <main@@Base+0x1ec>
   10b8c:	ldr	r1, [pc, #260]	; 10c98 <main@@Base+0x2e4>
   10b90:	mov	r0, r4
   10b94:	bl	108d0 <strcmp@plt>
   10b98:	cmp	r0, #0
   10b9c:	bne	10bd4 <main@@Base+0x220>
   10ba0:	ldr	r3, [pc, #188]	; 10c64 <main@@Base+0x2b0>
   10ba4:	mov	r2, #1
   10ba8:	str	r2, [r3]
   10bac:	b	10af4 <main@@Base+0x140>
   10bb0:	ldr	r0, [r6, #8]
   10bb4:	bl	108f4 <coda_set_definition_path@plt>
   10bb8:	cmp	r5, #3
   10bbc:	streq	r4, [sp, #12]
   10bc0:	moveq	fp, r5
   10bc4:	moveq	r9, #1
   10bc8:	beq	10b2c <main@@Base+0x178>
   10bcc:	mov	fp, #3
   10bd0:	b	10a78 <main@@Base+0xc4>
   10bd4:	ldrb	r2, [r4]
   10bd8:	cmp	r2, #45	; 0x2d
   10bdc:	bne	10b2c <main@@Base+0x178>
   10be0:	ldr	r3, [pc, #180]	; 10c9c <main@@Base+0x2e8>
   10be4:	mov	r2, #25
   10be8:	mov	r1, #1
   10bec:	ldr	r3, [r3]
   10bf0:	ldr	r0, [pc, #168]	; 10ca0 <main@@Base+0x2ec>
   10bf4:	bl	10900 <fwrite@plt>
   10bf8:	bl	10dd8 <_start@@Base+0x128>
   10bfc:	mov	r0, #1
   10c00:	bl	1093c <exit@plt>
   10c04:	bl	10dd8 <_start@@Base+0x128>
   10c08:	mov	r0, #0
   10c0c:	bl	1093c <exit@plt>
   10c10:	bl	10984 <coda_get_libcoda_version@plt>
   10c14:	mov	r1, r0
   10c18:	ldr	r0, [pc, #132]	; 10ca4 <main@@Base+0x2f0>
   10c1c:	bl	108dc <printf@plt>
   10c20:	ldr	r0, [pc, #128]	; 10ca8 <main@@Base+0x2f4>
   10c24:	bl	10918 <puts@plt>
   10c28:	mov	r0, #10
   10c2c:	bl	1096c <putchar@plt>
   10c30:	mov	r0, #0
   10c34:	bl	1093c <exit@plt>
   10c38:	ldr	r3, [pc, #92]	; 10c9c <main@@Base+0x2e8>
   10c3c:	ldr	r4, [r3]
   10c40:	bl	10990 <coda_get_errno@plt>
   10c44:	ldr	r0, [r0]
   10c48:	bl	10978 <coda_errno_to_string@plt>
   10c4c:	ldr	r1, [pc, #88]	; 10cac <main@@Base+0x2f8>
   10c50:	mov	r2, r0
   10c54:	mov	r0, r4
   10c58:	bl	10948 <fprintf@plt>
   10c5c:	mov	r0, #1
   10c60:	bl	1093c <exit@plt>
   10c64:	andeq	r2, r2, r0, ror r0
   10c68:	andeq	r1, r1, r0, ror r6
   10c6c:	andeq	r1, r1, r4, ror r6
   10c70:	andeq	r1, r1, ip, ror r6
   10c74:	andeq	r1, r1, r0, lsl #13
   10c78:	andeq	r1, r1, ip, asr #13
   10c7c:	ldrdeq	r1, [r1], -r0
   10c80:	strdeq	r1, [r1], -r8
   10c84:	andeq	r1, r1, ip, lsr #3
   10c88:	strdeq	r1, [r1], -ip
   10c8c:	andeq	r1, r1, r0, lsl #14
   10c90:	andeq	r0, r1, r8, lsr #30
   10c94:	andeq	r1, r1, ip, lsl #14
   10c98:	andeq	r1, r1, r0, lsl r7
   10c9c:	andeq	r2, r2, r8, rrx
   10ca0:	andeq	r1, r1, ip, lsl r7
   10ca4:	andeq	r1, r1, ip, lsl #13
   10ca8:	muleq	r1, ip, r6
   10cac:	andeq	r1, r1, ip, ror #13

00010cb0 <_start@@Base>:
   10cb0:	mov	fp, #0
   10cb4:	mov	lr, #0
   10cb8:	pop	{r1}		; (ldr r1, [sp], #4)
   10cbc:	mov	r2, sp
   10cc0:	push	{r2}		; (str r2, [sp, #-4]!)
   10cc4:	push	{r0}		; (str r0, [sp, #-4]!)
   10cc8:	ldr	ip, [pc, #16]	; 10ce0 <_start@@Base+0x30>
   10ccc:	push	{ip}		; (str ip, [sp, #-4]!)
   10cd0:	ldr	r0, [pc, #12]	; 10ce4 <_start@@Base+0x34>
   10cd4:	ldr	r3, [pc, #12]	; 10ce8 <_start@@Base+0x38>
   10cd8:	bl	10924 <__libc_start_main@plt>
   10cdc:	bl	1099c <abort@plt>
   10ce0:	strheq	r1, [r1], -r8
   10ce4:			; <UNDEFINED> instruction: 0x000109b4
   10ce8:	andeq	r1, r1, r8, asr r0
   10cec:	ldr	r3, [pc, #20]	; 10d08 <_start@@Base+0x58>
   10cf0:	ldr	r2, [pc, #20]	; 10d0c <_start@@Base+0x5c>
   10cf4:	add	r3, pc, r3
   10cf8:	ldr	r2, [r3, r2]
   10cfc:	cmp	r2, #0
   10d00:	bxeq	lr
   10d04:	b	10930 <__gmon_start__@plt>
   10d08:	andeq	r1, r1, r4, lsl #6
   10d0c:	andeq	r0, r0, ip, asr r0
   10d10:	ldr	r3, [pc, #28]	; 10d34 <_start@@Base+0x84>
   10d14:	ldr	r0, [pc, #28]	; 10d38 <_start@@Base+0x88>
   10d18:	sub	r3, r3, r0
   10d1c:	cmp	r3, #6
   10d20:	bxls	lr
   10d24:	ldr	r3, [pc, #16]	; 10d3c <_start@@Base+0x8c>
   10d28:	cmp	r3, #0
   10d2c:	bxeq	lr
   10d30:	bx	r3
   10d34:	andeq	r2, r2, fp, rrx
   10d38:	andeq	r2, r2, r8, rrx
   10d3c:	andeq	r0, r0, r0
   10d40:	ldr	r1, [pc, #36]	; 10d6c <_start@@Base+0xbc>
   10d44:	ldr	r0, [pc, #36]	; 10d70 <_start@@Base+0xc0>
   10d48:	sub	r1, r1, r0
   10d4c:	asr	r1, r1, #2
   10d50:	add	r1, r1, r1, lsr #31
   10d54:	asrs	r1, r1, #1
   10d58:	bxeq	lr
   10d5c:	ldr	r3, [pc, #16]	; 10d74 <_start@@Base+0xc4>
   10d60:	cmp	r3, #0
   10d64:	bxeq	lr
   10d68:	bx	r3
   10d6c:	andeq	r2, r2, r8, rrx
   10d70:	andeq	r2, r2, r8, rrx
   10d74:	andeq	r0, r0, r0
   10d78:	push	{r4, lr}
   10d7c:	ldr	r4, [pc, #24]	; 10d9c <_start@@Base+0xec>
   10d80:	ldrb	r3, [r4]
   10d84:	cmp	r3, #0
   10d88:	popne	{r4, pc}
   10d8c:	bl	10d10 <_start@@Base+0x60>
   10d90:	mov	r3, #1
   10d94:	strb	r3, [r4]
   10d98:	pop	{r4, pc}
   10d9c:	andeq	r2, r2, ip, rrx
   10da0:	ldr	r0, [pc, #40]	; 10dd0 <_start@@Base+0x120>
   10da4:	ldr	r3, [r0]
   10da8:	cmp	r3, #0
   10dac:	bne	10db4 <_start@@Base+0x104>
   10db0:	b	10d40 <_start@@Base+0x90>
   10db4:	ldr	r3, [pc, #24]	; 10dd4 <_start@@Base+0x124>
   10db8:	cmp	r3, #0
   10dbc:	beq	10db0 <_start@@Base+0x100>
   10dc0:	push	{r4, lr}
   10dc4:	blx	r3
   10dc8:	pop	{r4, lr}
   10dcc:	b	10d40 <_start@@Base+0x90>
   10dd0:	strdeq	r1, [r2], -ip
   10dd4:	andeq	r0, r0, r0
   10dd8:	push	{r4, lr}
   10ddc:	ldr	r0, [pc, #228]	; 10ec8 <_start@@Base+0x218>
   10de0:	bl	10918 <puts@plt>
   10de4:	ldr	r0, [pc, #224]	; 10ecc <_start@@Base+0x21c>
   10de8:	bl	10918 <puts@plt>
   10dec:	ldr	r0, [pc, #220]	; 10ed0 <_start@@Base+0x220>
   10df0:	bl	10918 <puts@plt>
   10df4:	ldr	r0, [pc, #216]	; 10ed4 <_start@@Base+0x224>
   10df8:	bl	10918 <puts@plt>
   10dfc:	mov	r0, #10
   10e00:	bl	1096c <putchar@plt>
   10e04:	ldr	r0, [pc, #204]	; 10ed8 <_start@@Base+0x228>
   10e08:	bl	10918 <puts@plt>
   10e0c:	ldr	r0, [pc, #200]	; 10edc <_start@@Base+0x22c>
   10e10:	bl	10918 <puts@plt>
   10e14:	ldr	r0, [pc, #196]	; 10ee0 <_start@@Base+0x230>
   10e18:	bl	10918 <puts@plt>
   10e1c:	ldr	r0, [pc, #192]	; 10ee4 <_start@@Base+0x234>
   10e20:	bl	10918 <puts@plt>
   10e24:	ldr	r0, [pc, #188]	; 10ee8 <_start@@Base+0x238>
   10e28:	bl	10918 <puts@plt>
   10e2c:	ldr	r0, [pc, #184]	; 10eec <_start@@Base+0x23c>
   10e30:	bl	10918 <puts@plt>
   10e34:	ldr	r0, [pc, #180]	; 10ef0 <_start@@Base+0x240>
   10e38:	bl	10918 <puts@plt>
   10e3c:	ldr	r0, [pc, #176]	; 10ef4 <_start@@Base+0x244>
   10e40:	bl	10918 <puts@plt>
   10e44:	ldr	r0, [pc, #172]	; 10ef8 <_start@@Base+0x248>
   10e48:	bl	10918 <puts@plt>
   10e4c:	mov	r0, #10
   10e50:	bl	1096c <putchar@plt>
   10e54:	ldr	r0, [pc, #160]	; 10efc <_start@@Base+0x24c>
   10e58:	bl	10918 <puts@plt>
   10e5c:	ldr	r0, [pc, #156]	; 10f00 <_start@@Base+0x250>
   10e60:	bl	10918 <puts@plt>
   10e64:	mov	r0, #10
   10e68:	bl	1096c <putchar@plt>
   10e6c:	ldr	r0, [pc, #144]	; 10f04 <_start@@Base+0x254>
   10e70:	bl	10918 <puts@plt>
   10e74:	ldr	r0, [pc, #140]	; 10f08 <_start@@Base+0x258>
   10e78:	bl	10918 <puts@plt>
   10e7c:	mov	r0, #10
   10e80:	bl	1096c <putchar@plt>
   10e84:	ldr	r0, [pc, #128]	; 10f0c <_start@@Base+0x25c>
   10e88:	bl	10918 <puts@plt>
   10e8c:	ldr	r0, [pc, #124]	; 10f10 <_start@@Base+0x260>
   10e90:	bl	10918 <puts@plt>
   10e94:	ldr	r0, [pc, #120]	; 10f14 <_start@@Base+0x264>
   10e98:	bl	10918 <puts@plt>
   10e9c:	ldr	r0, [pc, #116]	; 10f18 <_start@@Base+0x268>
   10ea0:	bl	10918 <puts@plt>
   10ea4:	ldr	r0, [pc, #112]	; 10f1c <_start@@Base+0x26c>
   10ea8:	bl	10918 <puts@plt>
   10eac:	ldr	r0, [pc, #108]	; 10f20 <_start@@Base+0x270>
   10eb0:	bl	10918 <puts@plt>
   10eb4:	ldr	r0, [pc, #104]	; 10f24 <_start@@Base+0x274>
   10eb8:	bl	10918 <puts@plt>
   10ebc:	mov	r0, #10
   10ec0:	pop	{r4, lr}
   10ec4:	b	1096c <putchar@plt>
   10ec8:	ldrdeq	r1, [r1], -r4
   10ecc:	ldrdeq	r1, [r1], -ip
   10ed0:	andeq	r1, r1, r0, lsr #2
   10ed4:	andeq	r1, r1, r0, ror r1
   10ed8:	andeq	r1, r1, r8, lsl #3
   10edc:	muleq	r1, ip, r1
   10ee0:	andeq	r1, r1, r4, asr #3
   10ee4:	andeq	r1, r1, r0, lsl #4
   10ee8:	andeq	r1, r1, r0, lsr r2
   10eec:	andeq	r1, r1, r8, ror r2
   10ef0:	andeq	r1, r1, r8, asr #5
   10ef4:	strdeq	r1, [r1], -r4
   10ef8:	andeq	r1, r1, r0, lsl r3
   10efc:	andeq	r1, r1, r8, asr #6
   10f00:	andeq	r1, r1, r0, ror #6
   10f04:	andeq	r1, r1, r0, lsl #7
   10f08:	muleq	r1, ip, r3
   10f0c:	ldrdeq	r1, [r1], -r0
   10f10:	andeq	r1, r1, r0, lsr #8
   10f14:	andeq	r1, r1, ip, ror #8
   10f18:	muleq	r1, r8, r4
   10f1c:	andeq	r1, r1, r4, ror #9
   10f20:	andeq	r1, r1, ip, lsr #10
   10f24:	andeq	r1, r1, ip, ror #10

00010f28 <callback@@Base>:
   10f28:	push	{r4, lr}
   10f2c:	subs	r4, r1, #0
   10f30:	mov	r1, r0
   10f34:	beq	10f68 <callback@@Base+0x40>
   10f38:	cmp	r4, #2
   10f3c:	beq	10fbc <callback@@Base+0x94>
   10f40:	cmp	r4, #1
   10f44:	beq	10fd4 <callback@@Base+0xac>
   10f48:	ldr	r3, [pc, #216]	; 11028 <callback@@Base+0x100>
   10f4c:	ldr	r3, [r3]
   10f50:	cmp	r3, #0
   10f54:	bne	10f88 <callback@@Base+0x60>
   10f58:	cmp	r4, #4
   10f5c:	beq	10fb4 <callback@@Base+0x8c>
   10f60:	mov	r0, #0
   10f64:	pop	{r4, pc}
   10f68:	ldr	r0, [pc, #188]	; 1102c <callback@@Base+0x104>
   10f6c:	mov	r3, r2
   10f70:	mov	r2, r1
   10f74:	ldr	r0, [r0]
   10f78:	ldr	r1, [pc, #176]	; 11030 <callback@@Base+0x108>
   10f7c:	bl	10948 <fprintf@plt>
   10f80:	mov	r0, #0
   10f84:	pop	{r4, pc}
   10f88:	ldr	r0, [pc, #164]	; 11034 <callback@@Base+0x10c>
   10f8c:	bl	108dc <printf@plt>
   10f90:	cmp	r4, #5
   10f94:	ldrls	pc, [pc, r4, lsl #2]
   10f98:	b	10f60 <callback@@Base+0x38>
   10f9c:	andeq	r1, r1, r4, lsl r0
   10fa0:	andeq	r1, r1, r4, lsl r0
   10fa4:	andeq	r1, r1, r4, lsl r0
   10fa8:	andeq	r1, r1, r8
   10fac:	strdeq	r0, [r1], -ip
   10fb0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10fb4:	bl	10918 <puts@plt>
   10fb8:	b	10f60 <callback@@Base+0x38>
   10fbc:	ldr	r3, [pc, #104]	; 1102c <callback@@Base+0x104>
   10fc0:	mov	r2, r0
   10fc4:	ldr	r1, [pc, #108]	; 11038 <callback@@Base+0x110>
   10fc8:	ldr	r0, [r3]
   10fcc:	bl	10948 <fprintf@plt>
   10fd0:	b	10f60 <callback@@Base+0x38>
   10fd4:	ldr	r0, [pc, #80]	; 1102c <callback@@Base+0x104>
   10fd8:	mov	r3, r2
   10fdc:	mov	r2, r1
   10fe0:	ldr	r0, [r0]
   10fe4:	ldr	r1, [pc, #80]	; 1103c <callback@@Base+0x114>
   10fe8:	bl	10948 <fprintf@plt>
   10fec:	b	10f60 <callback@@Base+0x38>
   10ff0:	ldr	r0, [pc, #72]	; 11040 <callback@@Base+0x118>
   10ff4:	bl	10918 <puts@plt>
   10ff8:	b	10f60 <callback@@Base+0x38>
   10ffc:	ldr	r0, [pc, #64]	; 11044 <callback@@Base+0x11c>
   11000:	bl	10918 <puts@plt>
   11004:	b	10f60 <callback@@Base+0x38>
   11008:	ldr	r0, [pc, #56]	; 11048 <callback@@Base+0x120>
   1100c:	bl	10918 <puts@plt>
   11010:	b	10f60 <callback@@Base+0x38>
   11014:	ldr	r3, [pc, #48]	; 1104c <callback@@Base+0x124>
   11018:	mov	r2, #110	; 0x6e
   1101c:	ldr	r1, [pc, #44]	; 11050 <callback@@Base+0x128>
   11020:	ldr	r0, [pc, #44]	; 11054 <callback@@Base+0x12c>
   11024:	bl	109a8 <__assert_fail@plt>
   11028:	andeq	r2, r2, r0, ror r0
   1102c:	andeq	r2, r2, r8, rrx
   11030:	andeq	r1, r1, ip, lsr #11
   11034:	strdeq	r1, [r1], -r4
   11038:			; <UNDEFINED> instruction: 0x000115b4
   1103c:	ldrdeq	r1, [r1], -r4
   11040:	andeq	r1, r1, ip, asr r6
   11044:	andeq	r1, r1, r8, ror #12
   11048:	andeq	r1, r1, r8, asr #12
   1104c:	andeq	r1, r1, r8, asr #1
   11050:	strdeq	r1, [r1], -ip
   11054:	andeq	r1, r1, r4, asr #12

00011058 <__libc_csu_init@@Base>:
   11058:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1105c:	mov	r7, r0
   11060:	ldr	r6, [pc, #72]	; 110b0 <__libc_csu_init@@Base+0x58>
   11064:	ldr	r5, [pc, #72]	; 110b4 <__libc_csu_init@@Base+0x5c>
   11068:	add	r6, pc, r6
   1106c:	add	r5, pc, r5
   11070:	sub	r6, r6, r5
   11074:	mov	r8, r1
   11078:	mov	r9, r2
   1107c:	bl	108a4 <coda_match_filefilter@plt-0x20>
   11080:	asrs	r6, r6, #2
   11084:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11088:	mov	r4, #0
   1108c:	add	r4, r4, #1
   11090:	ldr	r3, [r5], #4
   11094:	mov	r2, r9
   11098:	mov	r1, r8
   1109c:	mov	r0, r7
   110a0:	blx	r3
   110a4:	cmp	r6, r4
   110a8:	bne	1108c <__libc_csu_init@@Base+0x34>
   110ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110b0:	andeq	r0, r1, r8, lsl #29
   110b4:	andeq	r0, r1, r0, lsl #29

000110b8 <__libc_csu_fini@@Base>:
   110b8:	bx	lr

Disassembly of section .fini:

000110bc <.fini>:
   110bc:	push	{r3, lr}
   110c0:	pop	{r3, pc}
