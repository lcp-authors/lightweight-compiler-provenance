
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

0001063c <.init>:
   1063c:	push	{r3, lr}
   10640:	bl	10924 <_start@@Base+0x3c>
   10644:	pop	{r3, pc}

Disassembly of section .plt:

00010648 <printf@plt-0x14>:
   10648:	push	{lr}		; (str lr, [sp, #-4]!)
   1064c:	ldr	lr, [pc, #4]	; 10658 <printf@plt-0x4>
   10650:	add	lr, pc, lr
   10654:	ldr	pc, [lr, #8]!
   10658:	andeq	r0, r1, r8, lsr #19

0001065c <printf@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2472]!	; 0x9a8

00010668 <fopen@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2464]!	; 0x9a0

00010674 <tolower@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2456]!	; 0x998

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2448]!	; 0x990

0001068c <__libc_start_main@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2440]!	; 0x988

00010698 <__gmon_start__@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2432]!	; 0x980

000106a4 <memset@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2424]!	; 0x978

000106b0 <fclose@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2416]!	; 0x970

000106bc <abort@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2408]!	; 0x968

000106c8 <getc@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2400]!	; 0x960

Disassembly of section .text:

000106d4 <main@@Base>:
   106d4:	push	{r4, r5, r6, r7, r8, lr}
   106d8:	vpush	{d8}
   106dc:	ldr	ip, [pc, #492]	; 108d0 <main@@Base+0x1fc>
   106e0:	mov	r5, #0
   106e4:	ldm	ip!, {r0, r1, r2, r3}
   106e8:	sub	sp, sp, #200	; 0xc8
   106ec:	add	lr, sp, #64	; 0x40
   106f0:	add	r6, sp, #24
   106f4:	stmia	lr!, {r0, r1, r2, r3}
   106f8:	add	r7, sp, #96	; 0x60
   106fc:	ldm	ip, {r0, r1, r2, r3}
   10700:	stm	lr, {r0, r1, r2, r3}
   10704:	add	r3, ip, #16
   10708:	add	ip, ip, #32
   1070c:	ldm	r3, {r0, r1, r2, r3}
   10710:	add	lr, sp, #40	; 0x28
   10714:	stm	r6, {r0, r1, r2, r3}
   10718:	mov	r2, #205	; 0xcd
   1071c:	mov	r3, #237	; 0xed
   10720:	stm	sp, {r2, r3}
   10724:	ldm	ip!, {r0, r1, r2, r3}
   10728:	stmia	lr!, {r0, r1, r2, r3}
   1072c:	mov	r3, #218	; 0xda
   10730:	ldm	ip, {r0, r1}
   10734:	str	r3, [sp, #8]
   10738:	mov	r3, #250	; 0xfa
   1073c:	str	r3, [sp, #12]
   10740:	mov	r3, #199	; 0xc7
   10744:	stm	lr, {r0, r1}
   10748:	str	r3, [sp, #16]
   1074c:	ldr	r1, [pc, #384]	; 108d4 <main@@Base+0x200>
   10750:	mov	r3, #231	; 0xe7
   10754:	ldr	r0, [pc, #380]	; 108d8 <main@@Base+0x204>
   10758:	str	r3, [sp, #20]
   1075c:	bl	10668 <fopen@plt>
   10760:	mov	r2, #104	; 0x68
   10764:	mov	r1, #0
   10768:	mov	r8, r0
   1076c:	mov	r0, r7
   10770:	bl	106a4 <memset@plt>
   10774:	mov	r0, r8
   10778:	bl	106c8 <getc@plt>
   1077c:	cmn	r0, #1
   10780:	mov	r4, r0
   10784:	beq	10858 <main@@Base+0x184>
   10788:	mov	r2, #8
   1078c:	add	r1, sp, #64	; 0x40
   10790:	bl	10a10 <in_array@@Base>
   10794:	cmp	r0, #0
   10798:	movne	r4, #97	; 0x61
   1079c:	bne	10828 <main@@Base+0x154>
   107a0:	mov	r0, r4
   107a4:	mov	r2, #4
   107a8:	mov	r1, r6
   107ac:	bl	10a10 <in_array@@Base>
   107b0:	cmp	r0, #0
   107b4:	movne	r4, #101	; 0x65
   107b8:	bne	10828 <main@@Base+0x154>
   107bc:	mov	r0, r4
   107c0:	mov	r2, #2
   107c4:	mov	r1, sp
   107c8:	bl	10a10 <in_array@@Base>
   107cc:	cmp	r0, #0
   107d0:	movne	r4, #105	; 0x69
   107d4:	bne	10828 <main@@Base+0x154>
   107d8:	mov	r0, r4
   107dc:	mov	r2, #6
   107e0:	add	r1, sp, #40	; 0x28
   107e4:	bl	10a10 <in_array@@Base>
   107e8:	cmp	r0, #0
   107ec:	movne	r4, #111	; 0x6f
   107f0:	bne	10828 <main@@Base+0x154>
   107f4:	mov	r0, r4
   107f8:	mov	r2, #2
   107fc:	add	r1, sp, #8
   10800:	bl	10a10 <in_array@@Base>
   10804:	cmp	r0, #0
   10808:	movne	r4, #117	; 0x75
   1080c:	bne	10828 <main@@Base+0x154>
   10810:	mov	r0, r4
   10814:	mov	r2, #2
   10818:	add	r1, sp, #16
   1081c:	bl	10a10 <in_array@@Base>
   10820:	cmp	r0, #0
   10824:	movne	r4, #99	; 0x63
   10828:	mov	r0, r4
   1082c:	bl	10674 <tolower@plt>
   10830:	sub	r0, r0, #97	; 0x61
   10834:	cmp	r0, #25
   10838:	bhi	10774 <main@@Base+0xa0>
   1083c:	add	r3, sp, #200	; 0xc8
   10840:	add	r0, r3, r0, lsl #2
   10844:	add	r5, r5, #1
   10848:	ldr	r3, [r0, #-104]	; 0xffffff98
   1084c:	add	r3, r3, #1
   10850:	str	r3, [r0, #-104]	; 0xffffff98
   10854:	b	10774 <main@@Base+0xa0>
   10858:	mov	r0, r8
   1085c:	bl	106b0 <fclose@plt>
   10860:	ldr	r0, [pc, #116]	; 108dc <main@@Base+0x208>
   10864:	bl	10680 <puts@plt>
   10868:	mov	r1, r5
   1086c:	ldr	r0, [pc, #108]	; 108e0 <main@@Base+0x20c>
   10870:	bl	1065c <printf@plt>
   10874:	vmov	s15, r5
   10878:	vldr	s17, [pc, #76]	; 108cc <main@@Base+0x1f8>
   1087c:	ldr	r5, [pc, #96]	; 108e4 <main@@Base+0x210>
   10880:	mov	r4, #0
   10884:	vcvt.f32.s32	s16, s15
   10888:	ldr	r3, [r7, r4, lsl #2]
   1088c:	add	r1, r4, #97	; 0x61
   10890:	mov	r0, r5
   10894:	vmov	s15, r3
   10898:	add	r4, r4, #1
   1089c:	vcvt.f32.s32	s14, s15
   108a0:	vdiv.f32	s15, s14, s16
   108a4:	vmul.f32	s15, s15, s17
   108a8:	vcvt.f64.f32	d7, s15
   108ac:	vmov	r2, r3, d7
   108b0:	bl	1065c <printf@plt>
   108b4:	cmp	r4, #26
   108b8:	bne	10888 <main@@Base+0x1b4>
   108bc:	mov	r0, #0
   108c0:	add	sp, sp, #200	; 0xc8
   108c4:	vpop	{d8}
   108c8:	pop	{r4, r5, r6, r7, r8, pc}
   108cc:	sbcmi	r0, r8, #0
   108d0:	andeq	r0, r1, ip, lsr #21
   108d4:	strdeq	r0, [r1], -r4
   108d8:	strdeq	r0, [r1], -r6
   108dc:	andeq	r0, r1, r1, asr #22
   108e0:	andeq	r0, r1, sp, lsl #22
   108e4:	andeq	r0, r1, sp, lsr #22

000108e8 <_start@@Base>:
   108e8:	mov	fp, #0
   108ec:	mov	lr, #0
   108f0:	pop	{r1}		; (ldr r1, [sp], #4)
   108f4:	mov	r2, sp
   108f8:	push	{r2}		; (str r2, [sp, #-4]!)
   108fc:	push	{r0}		; (str r0, [sp, #-4]!)
   10900:	ldr	ip, [pc, #16]	; 10918 <_start@@Base+0x30>
   10904:	push	{ip}		; (str ip, [sp, #-4]!)
   10908:	ldr	r0, [pc, #12]	; 1091c <_start@@Base+0x34>
   1090c:	ldr	r3, [pc, #12]	; 10920 <_start@@Base+0x38>
   10910:	bl	1068c <__libc_start_main@plt>
   10914:	bl	106bc <abort@plt>
   10918:	muleq	r1, ip, sl
   1091c:	ldrdeq	r0, [r1], -r4
   10920:	andeq	r0, r1, ip, lsr sl
   10924:	ldr	r3, [pc, #20]	; 10940 <_start@@Base+0x58>
   10928:	ldr	r2, [pc, #20]	; 10944 <_start@@Base+0x5c>
   1092c:	add	r3, pc, r3
   10930:	ldr	r2, [r3, r2]
   10934:	cmp	r2, #0
   10938:	bxeq	lr
   1093c:	b	10698 <__gmon_start__@plt>
   10940:	andeq	r0, r1, ip, asr #13
   10944:	andeq	r0, r0, r4, lsr r0
   10948:	ldr	r3, [pc, #28]	; 1096c <_start@@Base+0x84>
   1094c:	ldr	r0, [pc, #28]	; 10970 <_start@@Base+0x88>
   10950:	sub	r3, r3, r0
   10954:	cmp	r3, #6
   10958:	bxls	lr
   1095c:	ldr	r3, [pc, #16]	; 10974 <_start@@Base+0x8c>
   10960:	cmp	r3, #0
   10964:	bxeq	lr
   10968:	bx	r3
   1096c:	andeq	r1, r2, r3, asr #32
   10970:	andeq	r1, r2, r0, asr #32
   10974:	andeq	r0, r0, r0
   10978:	ldr	r1, [pc, #36]	; 109a4 <_start@@Base+0xbc>
   1097c:	ldr	r0, [pc, #36]	; 109a8 <_start@@Base+0xc0>
   10980:	sub	r1, r1, r0
   10984:	asr	r1, r1, #2
   10988:	add	r1, r1, r1, lsr #31
   1098c:	asrs	r1, r1, #1
   10990:	bxeq	lr
   10994:	ldr	r3, [pc, #16]	; 109ac <_start@@Base+0xc4>
   10998:	cmp	r3, #0
   1099c:	bxeq	lr
   109a0:	bx	r3
   109a4:	andeq	r1, r2, r0, asr #32
   109a8:	andeq	r1, r2, r0, asr #32
   109ac:	andeq	r0, r0, r0
   109b0:	push	{r4, lr}
   109b4:	ldr	r4, [pc, #24]	; 109d4 <_start@@Base+0xec>
   109b8:	ldrb	r3, [r4]
   109bc:	cmp	r3, #0
   109c0:	popne	{r4, pc}
   109c4:	bl	10948 <_start@@Base+0x60>
   109c8:	mov	r3, #1
   109cc:	strb	r3, [r4]
   109d0:	pop	{r4, pc}
   109d4:	andeq	r1, r2, r0, asr #32
   109d8:	ldr	r0, [pc, #40]	; 10a08 <_start@@Base+0x120>
   109dc:	ldr	r3, [r0]
   109e0:	cmp	r3, #0
   109e4:	bne	109ec <_start@@Base+0x104>
   109e8:	b	10978 <_start@@Base+0x90>
   109ec:	ldr	r3, [pc, #24]	; 10a0c <_start@@Base+0x124>
   109f0:	cmp	r3, #0
   109f4:	beq	109e8 <_start@@Base+0x100>
   109f8:	push	{r4, lr}
   109fc:	blx	r3
   10a00:	pop	{r4, lr}
   10a04:	b	10978 <_start@@Base+0x90>
   10a08:	andeq	r0, r2, r4, lsl pc
   10a0c:	andeq	r0, r0, r0

00010a10 <in_array@@Base>:
   10a10:	mov	r3, #0
   10a14:	cmp	r3, r2
   10a18:	ble	10a24 <in_array@@Base+0x14>
   10a1c:	mov	r0, #0
   10a20:	bx	lr
   10a24:	ldr	ip, [r1, r3, lsl #2]
   10a28:	cmp	ip, r0
   10a2c:	addne	r3, r3, #1
   10a30:	bne	10a14 <in_array@@Base+0x4>
   10a34:	mov	r0, #1
   10a38:	bx	lr

00010a3c <__libc_csu_init@@Base>:
   10a3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a40:	mov	r7, r0
   10a44:	ldr	r6, [pc, #72]	; 10a94 <__libc_csu_init@@Base+0x58>
   10a48:	ldr	r5, [pc, #72]	; 10a98 <__libc_csu_init@@Base+0x5c>
   10a4c:	add	r6, pc, r6
   10a50:	add	r5, pc, r5
   10a54:	sub	r6, r6, r5
   10a58:	mov	r8, r1
   10a5c:	mov	r9, r2
   10a60:	bl	1063c <printf@plt-0x20>
   10a64:	asrs	r6, r6, #2
   10a68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a6c:	mov	r4, #0
   10a70:	add	r4, r4, #1
   10a74:	ldr	r3, [r5], #4
   10a78:	mov	r2, r9
   10a7c:	mov	r1, r8
   10a80:	mov	r0, r7
   10a84:	blx	r3
   10a88:	cmp	r6, r4
   10a8c:	bne	10a70 <__libc_csu_init@@Base+0x34>
   10a90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a94:			; <UNDEFINED> instruction: 0x000104bc
   10a98:			; <UNDEFINED> instruction: 0x000104b4

00010a9c <__libc_csu_fini@@Base>:
   10a9c:	bx	lr

Disassembly of section .fini:

00010aa0 <.fini>:
   10aa0:	push	{r3, lr}
   10aa4:	pop	{r3, pc}
