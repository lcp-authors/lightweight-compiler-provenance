
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012970 <.init>:
   12970:	push	{r3, lr}
   12974:	bl	1334c <_start@@Base+0x3c>
   12978:	pop	{r3, pc}

Disassembly of section .plt:

0001297c <strcmp@plt-0x14>:
   1297c:	push	{lr}		; (str lr, [sp, #-4]!)
   12980:	ldr	lr, [pc, #4]	; 1298c <strcmp@plt-0x4>
   12984:	add	lr, pc, lr
   12988:	ldr	pc, [lr, #8]!
   1298c:	andeq	r7, r2, r4, ror r6

00012990 <strcmp@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #159744	; 0x27000
   12998:	ldr	pc, [ip, #1652]!	; 0x674

0001299c <printf@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #159744	; 0x27000
   129a4:	ldr	pc, [ip, #1644]!	; 0x66c

000129a8 <free@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #159744	; 0x27000
   129b0:	ldr	pc, [ip, #1636]!	; 0x664

000129b4 <memcpy@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #159744	; 0x27000
   129bc:	ldr	pc, [ip, #1628]!	; 0x65c

000129c0 <memcmp@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #159744	; 0x27000
   129c8:	ldr	pc, [ip, #1620]!	; 0x654

000129cc <realloc@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #159744	; 0x27000
   129d4:	ldr	pc, [ip, #1612]!	; 0x64c

000129d8 <fwrite@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #159744	; 0x27000
   129e0:	ldr	pc, [ip, #1604]!	; 0x644

000129e4 <gettimeofday@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #159744	; 0x27000
   129ec:	ldr	pc, [ip, #1596]!	; 0x63c

000129f0 <puts@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #159744	; 0x27000
   129f8:	ldr	pc, [ip, #1588]!	; 0x634

000129fc <malloc@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #159744	; 0x27000
   12a04:	ldr	pc, [ip, #1580]!	; 0x62c

00012a08 <__libc_start_main@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #159744	; 0x27000
   12a10:	ldr	pc, [ip, #1572]!	; 0x624

00012a14 <__gmon_start__@plt>:
   12a14:	add	ip, pc, #0, 12
   12a18:	add	ip, ip, #159744	; 0x27000
   12a1c:	ldr	pc, [ip, #1564]!	; 0x61c

00012a20 <strlen@plt>:
   12a20:	add	ip, pc, #0, 12
   12a24:	add	ip, ip, #159744	; 0x27000
   12a28:	ldr	pc, [ip, #1556]!	; 0x614

00012a2c <fprintf@plt>:
   12a2c:	add	ip, pc, #0, 12
   12a30:	add	ip, ip, #159744	; 0x27000
   12a34:	ldr	pc, [ip, #1548]!	; 0x60c

00012a38 <posix_memalign@plt>:
   12a38:	add	ip, pc, #0, 12
   12a3c:	add	ip, ip, #159744	; 0x27000
   12a40:	ldr	pc, [ip, #1540]!	; 0x604

00012a44 <memset@plt>:
   12a44:	add	ip, pc, #0, 12
   12a48:	add	ip, ip, #159744	; 0x27000
   12a4c:	ldr	pc, [ip, #1532]!	; 0x5fc

00012a50 <strncpy@plt>:
   12a50:	add	ip, pc, #0, 12
   12a54:	add	ip, ip, #159744	; 0x27000
   12a58:	ldr	pc, [ip, #1524]!	; 0x5f4

00012a5c <memchr@plt>:
   12a5c:	add	ip, pc, #0, 12
   12a60:	add	ip, ip, #159744	; 0x27000
   12a64:	ldr	pc, [ip, #1516]!	; 0x5ec

00012a68 <fputc@plt>:
   12a68:	add	ip, pc, #0, 12
   12a6c:	add	ip, ip, #159744	; 0x27000
   12a70:	ldr	pc, [ip, #1508]!	; 0x5e4

00012a74 <strncmp@plt>:
   12a74:	add	ip, pc, #0, 12
   12a78:	add	ip, ip, #159744	; 0x27000
   12a7c:	ldr	pc, [ip, #1500]!	; 0x5dc

00012a80 <abort@plt>:
   12a80:	add	ip, pc, #0, 12
   12a84:	add	ip, ip, #159744	; 0x27000
   12a88:	ldr	pc, [ip, #1492]!	; 0x5d4

00012a8c <__assert_fail@plt>:
   12a8c:	add	ip, pc, #0, 12
   12a90:	add	ip, ip, #159744	; 0x27000
   12a94:	ldr	pc, [ip, #1484]!	; 0x5cc

Disassembly of section .text:

00012a98 <main@@Base-0x6e4>:
   12a98:	push	{r4, lr}
   12a9c:	ldr	r3, [pc, #12]	; 12ab0 <__assert_fail@plt+0x24>
   12aa0:	ldr	r2, [pc, #12]	; 12ab4 <__assert_fail@plt+0x28>
   12aa4:	ldr	r1, [pc, #12]	; 12ab8 <__assert_fail@plt+0x2c>
   12aa8:	ldr	r0, [pc, #12]	; 12abc <__assert_fail@plt+0x30>
   12aac:	bl	12a8c <__assert_fail@plt>
   12ab0:			; <UNDEFINED> instruction: 0x00024fbc
   12ab4:			; <UNDEFINED> instruction: 0x000002b9
   12ab8:	andeq	r5, r2, r4, asr #13
   12abc:	andeq	r5, r2, r8, lsr #14
   12ac0:	push	{r4, lr}
   12ac4:	ldr	r3, [pc, #12]	; 12ad8 <__assert_fail@plt+0x4c>
   12ac8:	ldr	r2, [pc, #12]	; 12adc <__assert_fail@plt+0x50>
   12acc:	ldr	r1, [pc, #12]	; 12ae0 <__assert_fail@plt+0x54>
   12ad0:	ldr	r0, [pc, #12]	; 12ae4 <__assert_fail@plt+0x58>
   12ad4:	bl	12a8c <__assert_fail@plt>
   12ad8:	ldrdeq	r4, [r2], -r8
   12adc:			; <UNDEFINED> instruction: 0x000002b9
   12ae0:	andeq	r5, r2, r4, asr #13
   12ae4:	andeq	r5, r2, r8, lsr #14
   12ae8:	push	{r4, lr}
   12aec:	mov	r2, #696	; 0x2b8
   12af0:	ldr	r3, [pc, #8]	; 12b00 <__assert_fail@plt+0x74>
   12af4:	ldr	r1, [pc, #8]	; 12b04 <__assert_fail@plt+0x78>
   12af8:	ldr	r0, [pc, #8]	; 12b08 <__assert_fail@plt+0x7c>
   12afc:	bl	12a8c <__assert_fail@plt>
   12b00:	andeq	r5, r2, r0
   12b04:	andeq	r5, r2, r4, asr #13
   12b08:	andeq	r5, r2, r8, lsr #14
   12b0c:	push	{r4, lr}
   12b10:	mov	r2, #696	; 0x2b8
   12b14:	ldr	r3, [pc, #8]	; 12b24 <__assert_fail@plt+0x98>
   12b18:	ldr	r1, [pc, #8]	; 12b28 <__assert_fail@plt+0x9c>
   12b1c:	ldr	r0, [pc, #8]	; 12b2c <__assert_fail@plt+0xa0>
   12b20:	bl	12a8c <__assert_fail@plt>
   12b24:	andeq	r5, r2, r8, lsr #32
   12b28:	andeq	r5, r2, r4, asr #13
   12b2c:	andeq	r5, r2, r8, lsr #14
   12b30:	push	{r4, lr}
   12b34:	ldr	r3, [pc, #12]	; 12b48 <__assert_fail@plt+0xbc>
   12b38:	ldr	r2, [pc, #12]	; 12b4c <__assert_fail@plt+0xc0>
   12b3c:	ldr	r1, [pc, #12]	; 12b50 <__assert_fail@plt+0xc4>
   12b40:	ldr	r0, [pc, #12]	; 12b54 <__assert_fail@plt+0xc8>
   12b44:	bl	12a8c <__assert_fail@plt>
   12b48:	andeq	r5, r2, r4, asr #32
   12b4c:	andeq	r0, r0, r2, asr #5
   12b50:	andeq	r5, r2, r4, asr #13
   12b54:	andeq	r5, r2, r8, lsr #14
   12b58:	push	{r4, lr}
   12b5c:	ldr	r3, [pc, #12]	; 12b70 <__assert_fail@plt+0xe4>
   12b60:	ldr	r2, [pc, #12]	; 12b74 <__assert_fail@plt+0xe8>
   12b64:	ldr	r1, [pc, #12]	; 12b78 <__assert_fail@plt+0xec>
   12b68:	ldr	r0, [pc, #12]	; 12b7c <__assert_fail@plt+0xf0>
   12b6c:	bl	12a8c <__assert_fail@plt>
   12b70:	andeq	r5, r2, r8, rrx
   12b74:	andeq	r0, r0, fp, lsl #3
   12b78:	andeq	r5, r2, r0, asr r7
   12b7c:			; <UNDEFINED> instruction: 0x000257b8
   12b80:	push	{r4, lr}
   12b84:	ldr	r3, [pc, #12]	; 12b98 <__assert_fail@plt+0x10c>
   12b88:	ldr	r2, [pc, #12]	; 12b9c <__assert_fail@plt+0x110>
   12b8c:	ldr	r1, [pc, #12]	; 12ba0 <__assert_fail@plt+0x114>
   12b90:	ldr	r0, [pc, #12]	; 12ba4 <__assert_fail@plt+0x118>
   12b94:	bl	12a8c <__assert_fail@plt>
   12b98:	andeq	r5, r2, r4, lsl #1
   12b9c:			; <UNDEFINED> instruction: 0x000002ba
   12ba0:	andeq	r5, r2, r4, asr #13
   12ba4:	andeq	r5, r2, r8, lsr #14
   12ba8:	push	{r4, lr}
   12bac:	ldr	r3, [pc, #12]	; 12bc0 <__assert_fail@plt+0x134>
   12bb0:	ldr	r2, [pc, #12]	; 12bc4 <__assert_fail@plt+0x138>
   12bb4:	ldr	r1, [pc, #12]	; 12bc8 <__assert_fail@plt+0x13c>
   12bb8:	ldr	r0, [pc, #12]	; 12bcc <__assert_fail@plt+0x140>
   12bbc:	bl	12a8c <__assert_fail@plt>
   12bc0:	andeq	r5, r2, r0, lsr #1
   12bc4:			; <UNDEFINED> instruction: 0x000002ba
   12bc8:	andeq	r5, r2, r4, asr #13
   12bcc:	andeq	r5, r2, r8, lsr #14
   12bd0:	push	{r4, lr}
   12bd4:	ldr	r3, [pc, #12]	; 12be8 <__assert_fail@plt+0x15c>
   12bd8:	ldr	r2, [pc, #12]	; 12bec <__assert_fail@plt+0x160>
   12bdc:	ldr	r1, [pc, #12]	; 12bf0 <__assert_fail@plt+0x164>
   12be0:	ldr	r0, [pc, #12]	; 12bf4 <__assert_fail@plt+0x168>
   12be4:	bl	12a8c <__assert_fail@plt>
   12be8:	andeq	r5, r2, r8, asr #1
   12bec:	andeq	r0, r0, lr, asr #5
   12bf0:	andeq	r5, r2, r4, asr #13
   12bf4:	andeq	r5, r2, r8, lsr #14
   12bf8:	push	{r4, lr}
   12bfc:	mov	r2, #380	; 0x17c
   12c00:	ldr	r3, [pc, #8]	; 12c10 <__assert_fail@plt+0x184>
   12c04:	ldr	r1, [pc, #8]	; 12c14 <__assert_fail@plt+0x188>
   12c08:	ldr	r0, [pc, #8]	; 12c18 <__assert_fail@plt+0x18c>
   12c0c:	bl	12a8c <__assert_fail@plt>
   12c10:	andeq	r5, r2, r8, ror #1
   12c14:	andeq	r5, r2, r4, asr #13
   12c18:			; <UNDEFINED> instruction: 0x000257b8
   12c1c:	push	{r4, lr}
   12c20:	mov	r2, #712	; 0x2c8
   12c24:	ldr	r3, [pc, #8]	; 12c34 <__assert_fail@plt+0x1a8>
   12c28:	ldr	r1, [pc, #8]	; 12c38 <__assert_fail@plt+0x1ac>
   12c2c:	ldr	r0, [pc, #8]	; 12c3c <__assert_fail@plt+0x1b0>
   12c30:	bl	12a8c <__assert_fail@plt>
   12c34:	andeq	r5, r2, r4, lsl #2
   12c38:	andeq	r5, r2, r4, asr #13
   12c3c:	andeq	r5, r2, r8, lsr #14
   12c40:	push	{r4, lr}
   12c44:	mov	r2, #108	; 0x6c
   12c48:	ldr	r3, [pc, #8]	; 12c58 <__assert_fail@plt+0x1cc>
   12c4c:	ldr	r1, [pc, #8]	; 12c5c <__assert_fail@plt+0x1d0>
   12c50:	ldr	r0, [pc, #8]	; 12c60 <__assert_fail@plt+0x1d4>
   12c54:	bl	12a8c <__assert_fail@plt>
   12c58:	andeq	r5, r2, r0, lsr r1
   12c5c:	andeq	r5, r2, r0, asr r7
   12c60:			; <UNDEFINED> instruction: 0x000257b8
   12c64:	push	{r4, lr}
   12c68:	ldr	r3, [pc, #12]	; 12c7c <__assert_fail@plt+0x1f0>
   12c6c:	ldr	r2, [pc, #12]	; 12c80 <__assert_fail@plt+0x1f4>
   12c70:	ldr	r1, [pc, #12]	; 12c84 <__assert_fail@plt+0x1f8>
   12c74:	ldr	r0, [pc, #12]	; 12c88 <__assert_fail@plt+0x1fc>
   12c78:	bl	12a8c <__assert_fail@plt>
   12c7c:	andeq	r5, r2, ip, asr #2
   12c80:	andeq	r0, r0, sl, asr #5
   12c84:	andeq	r5, r2, r4, asr #13
   12c88:	andeq	r5, r2, r8, lsr #14
   12c8c:	push	{r4, lr}
   12c90:	ldr	r3, [pc, #12]	; 12ca4 <__assert_fail@plt+0x218>
   12c94:	ldr	r2, [pc, #12]	; 12ca8 <__assert_fail@plt+0x21c>
   12c98:	ldr	r1, [pc, #12]	; 12cac <__assert_fail@plt+0x220>
   12c9c:	ldr	r0, [pc, #12]	; 12cb0 <__assert_fail@plt+0x224>
   12ca0:	bl	12a8c <__assert_fail@plt>
   12ca4:	andeq	r5, r2, r4, ror r1
   12ca8:	andeq	r0, r0, r7, asr #5
   12cac:	andeq	r5, r2, r4, asr #13
   12cb0:	andeq	r5, r2, r8, lsr #14
   12cb4:	push	{r4, lr}
   12cb8:	ldr	r3, [pc, #12]	; 12ccc <__assert_fail@plt+0x240>
   12cbc:	ldr	r2, [pc, #12]	; 12cd0 <__assert_fail@plt+0x244>
   12cc0:	ldr	r1, [pc, #12]	; 12cd4 <__assert_fail@plt+0x248>
   12cc4:	ldr	r0, [pc, #12]	; 12cd8 <__assert_fail@plt+0x24c>
   12cc8:	bl	12a8c <__assert_fail@plt>
   12ccc:	andeq	r5, r2, r0, asr #3
   12cd0:	andeq	r0, r0, sp, asr #5
   12cd4:	andeq	r5, r2, r4, asr #13
   12cd8:	andeq	r5, r2, r8, lsr #14
   12cdc:	push	{r4, lr}
   12ce0:	ldr	r3, [pc, #12]	; 12cf4 <__assert_fail@plt+0x268>
   12ce4:	ldr	r2, [pc, #12]	; 12cf8 <__assert_fail@plt+0x26c>
   12ce8:	ldr	r1, [pc, #12]	; 12cfc <__assert_fail@plt+0x270>
   12cec:	ldr	r0, [pc, #12]	; 12d00 <__assert_fail@plt+0x274>
   12cf0:	bl	12a8c <__assert_fail@plt>
   12cf4:	andeq	r5, r2, r4, ror #3
   12cf8:	andeq	r0, r0, sp, asr #5
   12cfc:	andeq	r5, r2, r4, asr #13
   12d00:	andeq	r5, r2, r8, lsr #14
   12d04:	push	{r4, lr}
   12d08:	ldr	r3, [pc, #12]	; 12d1c <__assert_fail@plt+0x290>
   12d0c:	ldr	r2, [pc, #12]	; 12d20 <__assert_fail@plt+0x294>
   12d10:	ldr	r1, [pc, #12]	; 12d24 <__assert_fail@plt+0x298>
   12d14:	ldr	r0, [pc, #12]	; 12d28 <__assert_fail@plt+0x29c>
   12d18:	bl	12a8c <__assert_fail@plt>
   12d1c:	andeq	r5, r2, r0, lsl #4
   12d20:			; <UNDEFINED> instruction: 0x000002bb
   12d24:	andeq	r5, r2, r4, asr #13
   12d28:	andeq	r5, r2, r8, lsr #14
   12d2c:	push	{r4, lr}
   12d30:	ldr	r3, [pc, #12]	; 12d44 <__assert_fail@plt+0x2b8>
   12d34:	ldr	r2, [pc, #12]	; 12d48 <__assert_fail@plt+0x2bc>
   12d38:	ldr	r1, [pc, #12]	; 12d4c <__assert_fail@plt+0x2c0>
   12d3c:	ldr	r0, [pc, #12]	; 12d50 <__assert_fail@plt+0x2c4>
   12d40:	bl	12a8c <__assert_fail@plt>
   12d44:	andeq	r5, r2, ip, lsl r2
   12d48:	ldrdeq	r0, [r0], -r2
   12d4c:	andeq	r5, r2, r4, asr #13
   12d50:	andeq	r5, r2, r8, lsr #14
   12d54:	push	{r4, lr}
   12d58:	ldr	r3, [pc, #12]	; 12d6c <__assert_fail@plt+0x2e0>
   12d5c:	ldr	r2, [pc, #12]	; 12d70 <__assert_fail@plt+0x2e4>
   12d60:	ldr	r1, [pc, #12]	; 12d74 <__assert_fail@plt+0x2e8>
   12d64:	ldr	r0, [pc, #12]	; 12d78 <__assert_fail@plt+0x2ec>
   12d68:	bl	12a8c <__assert_fail@plt>
   12d6c:	andeq	r5, r2, r0, asr #4
   12d70:	andeq	r0, r0, sp, ror #4
   12d74:	andeq	r5, r2, r4, asr #13
   12d78:	andeq	r5, r2, r8, lsr #14
   12d7c:	push	{r4, lr}
   12d80:	ldr	r3, [pc, #12]	; 12d94 <__assert_fail@plt+0x308>
   12d84:	ldr	r2, [pc, #12]	; 12d98 <__assert_fail@plt+0x30c>
   12d88:	ldr	r1, [pc, #12]	; 12d9c <__assert_fail@plt+0x310>
   12d8c:	ldr	r0, [pc, #12]	; 12da0 <__assert_fail@plt+0x314>
   12d90:	bl	12a8c <__assert_fail@plt>
   12d94:	andeq	r5, r2, r0, ror #4
   12d98:	andeq	r0, r0, sp, ror #4
   12d9c:	andeq	r5, r2, r4, asr #13
   12da0:	andeq	r5, r2, r8, lsr #14
   12da4:	push	{r4, lr}
   12da8:	mov	r2, #117	; 0x75
   12dac:	ldr	r3, [pc, #8]	; 12dbc <__assert_fail@plt+0x330>
   12db0:	ldr	r1, [pc, #8]	; 12dc0 <__assert_fail@plt+0x334>
   12db4:	ldr	r0, [pc, #8]	; 12dc4 <__assert_fail@plt+0x338>
   12db8:	bl	12a8c <__assert_fail@plt>
   12dbc:	andeq	r5, r2, ip, ror r2
   12dc0:	andeq	r5, r2, r0, asr r7
   12dc4:			; <UNDEFINED> instruction: 0x000257b8
   12dc8:	push	{r4, lr}
   12dcc:	ldr	r3, [pc, #12]	; 12de0 <__assert_fail@plt+0x354>
   12dd0:	ldr	r2, [pc, #12]	; 12de4 <__assert_fail@plt+0x358>
   12dd4:	ldr	r1, [pc, #12]	; 12de8 <__assert_fail@plt+0x35c>
   12dd8:	ldr	r0, [pc, #12]	; 12dec <__assert_fail@plt+0x360>
   12ddc:	bl	12a8c <__assert_fail@plt>
   12de0:	muleq	r2, r8, r2
   12de4:	muleq	r0, r5, r1
   12de8:	andeq	r5, r2, r0, asr r7
   12dec:			; <UNDEFINED> instruction: 0x000257b8
   12df0:	subs	r2, r0, #0
   12df4:	bne	12e10 <__assert_fail@plt+0x384>
   12df8:	push	{r4, lr}
   12dfc:	ldr	r3, [pc, #52]	; 12e38 <__assert_fail@plt+0x3ac>
   12e00:	ldr	r2, [pc, #52]	; 12e3c <__assert_fail@plt+0x3b0>
   12e04:	ldr	r1, [pc, #52]	; 12e40 <__assert_fail@plt+0x3b4>
   12e08:	ldr	r0, [pc, #52]	; 12e44 <__assert_fail@plt+0x3b8>
   12e0c:	bl	12a8c <__assert_fail@plt>
   12e10:	ldr	r3, [r2]
   12e14:	sub	r3, r2, r3
   12e18:	ldrh	r1, [r3]
   12e1c:	cmp	r1, #13
   12e20:	movls	r0, #0
   12e24:	bls	12e34 <__assert_fail@plt+0x3a8>
   12e28:	ldrh	r0, [r3, #12]
   12e2c:	cmp	r0, #0
   12e30:	ldrbne	r0, [r2, r0]
   12e34:	bx	lr
   12e38:			; <UNDEFINED> instruction: 0x000252b8
   12e3c:	andeq	r0, r0, r5, lsr r3
   12e40:	andeq	r5, r2, r4, asr #13
   12e44:	andeq	r5, r2, r8, lsr #14
   12e48:	subs	r3, r0, #0
   12e4c:	bne	12e68 <__assert_fail@plt+0x3dc>
   12e50:	push	{r4, lr}
   12e54:	ldr	r3, [pc, #60]	; 12e98 <__assert_fail@plt+0x40c>
   12e58:	ldr	r2, [pc, #60]	; 12e9c <__assert_fail@plt+0x410>
   12e5c:	ldr	r1, [pc, #60]	; 12ea0 <__assert_fail@plt+0x414>
   12e60:	ldr	r0, [pc, #60]	; 12ea4 <__assert_fail@plt+0x418>
   12e64:	bl	12a8c <__assert_fail@plt>
   12e68:	ldr	r2, [r3]
   12e6c:	sub	r2, r3, r2
   12e70:	ldrh	r1, [r2]
   12e74:	cmp	r1, #15
   12e78:	movls	r0, #0
   12e7c:	bls	12e94 <__assert_fail@plt+0x408>
   12e80:	ldrh	r0, [r2, #14]
   12e84:	cmp	r0, #0
   12e88:	ldrne	r2, [r3, r0]
   12e8c:	addne	r0, r3, r0
   12e90:	addne	r0, r0, r2
   12e94:	bx	lr
   12e98:	ldrdeq	r5, [r2], -r8
   12e9c:	andeq	r0, r0, r5, lsr r3
   12ea0:	andeq	r5, r2, r4, asr #13
   12ea4:	andeq	r5, r2, r8, lsr #14
   12ea8:	subs	r2, r0, #0
   12eac:	bne	12ec8 <__assert_fail@plt+0x43c>
   12eb0:	push	{r4, lr}
   12eb4:	ldr	r3, [pc, #52]	; 12ef0 <__assert_fail@plt+0x464>
   12eb8:	ldr	r2, [pc, #52]	; 12ef4 <__assert_fail@plt+0x468>
   12ebc:	ldr	r1, [pc, #52]	; 12ef8 <__assert_fail@plt+0x46c>
   12ec0:	ldr	r0, [pc, #52]	; 12efc <__assert_fail@plt+0x470>
   12ec4:	bl	12a8c <__assert_fail@plt>
   12ec8:	ldr	r3, [r2]
   12ecc:	sub	r3, r2, r3
   12ed0:	ldrh	r1, [r3]
   12ed4:	cmp	r1, #5
   12ed8:	movls	r0, #0
   12edc:	bls	12eec <__assert_fail@plt+0x460>
   12ee0:	ldrh	r0, [r3, #4]
   12ee4:	cmp	r0, #0
   12ee8:	ldrne	r0, [r2, r0]
   12eec:	bx	lr
   12ef0:	strdeq	r5, [r2], -r0
   12ef4:	andeq	r0, r0, r2, lsl #6
   12ef8:	andeq	r5, r2, r4, asr #13
   12efc:	andeq	r5, r2, r8, lsr #14
   12f00:	subs	r3, r0, #0
   12f04:	bne	12f20 <__assert_fail@plt+0x494>
   12f08:	push	{r4, lr}
   12f0c:	ldr	r3, [pc, #64]	; 12f54 <__assert_fail@plt+0x4c8>
   12f10:	ldr	r2, [pc, #64]	; 12f58 <__assert_fail@plt+0x4cc>
   12f14:	ldr	r1, [pc, #64]	; 12f5c <__assert_fail@plt+0x4d0>
   12f18:	ldr	r0, [pc, #64]	; 12f60 <__assert_fail@plt+0x4d4>
   12f1c:	bl	12a8c <__assert_fail@plt>
   12f20:	ldr	r2, [r3]
   12f24:	sub	r2, r3, r2
   12f28:	ldrh	r1, [r2]
   12f2c:	cmp	r1, #21
   12f30:	movls	r0, #0
   12f34:	bls	12f50 <__assert_fail@plt+0x4c4>
   12f38:	ldrh	r0, [r2, #20]
   12f3c:	cmp	r0, #0
   12f40:	ldrne	r2, [r3, r0]
   12f44:	addne	r0, r3, r0
   12f48:	addne	r3, r2, #4
   12f4c:	addne	r0, r0, r3
   12f50:	bx	lr
   12f54:	andeq	r5, r2, r8, lsl r3
   12f58:	andeq	r0, r0, r7, lsr r3
   12f5c:	andeq	r5, r2, r4, asr #13
   12f60:	andeq	r5, r2, r8, lsr #14
   12f64:	push	{lr}		; (str lr, [sp, #-4]!)
   12f68:	sub	sp, sp, #12
   12f6c:	add	ip, sp, #8
   12f70:	stmdb	ip, {r1, r2}
   12f74:	ldr	r2, [sp]
   12f78:	cmp	r2, #0
   12f7c:	beq	12f8c <__assert_fail@plt+0x500>
   12f80:	ldr	r1, [r2, #-4]
   12f84:	cmp	r3, r1
   12f88:	bcc	12fa0 <__assert_fail@plt+0x514>
   12f8c:	ldr	r3, [pc, #88]	; 12fec <__assert_fail@plt+0x560>
   12f90:	ldr	r2, [pc, #88]	; 12ff0 <__assert_fail@plt+0x564>
   12f94:	ldr	r1, [pc, #88]	; 12ff4 <__assert_fail@plt+0x568>
   12f98:	ldr	r0, [pc, #88]	; 12ff8 <__assert_fail@plt+0x56c>
   12f9c:	bl	12a8c <__assert_fail@plt>
   12fa0:	ldrb	r2, [r2, r3]
   12fa4:	cmp	r2, #0
   12fa8:	strbeq	r2, [r0]
   12fac:	streq	r2, [r0, #4]
   12fb0:	beq	12fe4 <__assert_fail@plt+0x558>
   12fb4:	ldr	r1, [sp, #4]
   12fb8:	cmp	r1, #0
   12fbc:	add	ip, r1, r3, lsl #2
   12fc0:	beq	12fd0 <__assert_fail@plt+0x544>
   12fc4:	ldr	lr, [r1, #-4]
   12fc8:	cmp	r3, lr
   12fcc:	bcc	12fd4 <__assert_fail@plt+0x548>
   12fd0:	bl	12da4 <__assert_fail@plt+0x318>
   12fd4:	ldr	r3, [r1, r3, lsl #2]
   12fd8:	strb	r2, [r0]
   12fdc:	add	r3, ip, r3
   12fe0:	str	r3, [r0, #4]
   12fe4:	add	sp, sp, #12
   12fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fec:	andeq	r5, r2, r8, lsr r3
   12ff0:	andeq	r0, r0, r5, lsl #6
   12ff4:	andeq	r5, r2, r4, asr #13
   12ff8:	andeq	r5, r2, r4, lsl r8
   12ffc:	push	{r4, lr}
   13000:	ldr	r3, [pc, #12]	; 13014 <__assert_fail@plt+0x588>
   13004:	ldr	r2, [pc, #12]	; 13018 <__assert_fail@plt+0x58c>
   13008:	ldr	r1, [pc, #12]	; 1301c <__assert_fail@plt+0x590>
   1300c:	ldr	r0, [pc, #12]	; 13020 <__assert_fail@plt+0x594>
   13010:	bl	12a8c <__assert_fail@plt>
   13014:	andeq	r5, r2, r8, asr r3
   13018:	andeq	r0, r0, r1, asr #5
   1301c:	andeq	r5, r2, r4, asr #13
   13020:	andeq	r5, r2, r8, lsr #14
   13024:	push	{r4, lr}
   13028:	mov	r2, #235	; 0xeb
   1302c:	ldr	r3, [pc, #8]	; 1303c <__assert_fail@plt+0x5b0>
   13030:	ldr	r1, [pc, #8]	; 13040 <__assert_fail@plt+0x5b4>
   13034:	ldr	r0, [pc, #8]	; 13044 <__assert_fail@plt+0x5b8>
   13038:	bl	12a8c <__assert_fail@plt>
   1303c:	andeq	r5, r2, r0, lsl #7
   13040:	andeq	r5, r2, r4, lsr r8
   13044:	muleq	r2, r8, r8
   13048:	push	{r4, lr}
   1304c:	mov	r2, #221	; 0xdd
   13050:	ldr	r3, [pc, #8]	; 13060 <__assert_fail@plt+0x5d4>
   13054:	ldr	r1, [pc, #8]	; 13064 <__assert_fail@plt+0x5d8>
   13058:	ldr	r0, [pc, #8]	; 13068 <__assert_fail@plt+0x5dc>
   1305c:	bl	12a8c <__assert_fail@plt>
   13060:	muleq	r2, ip, r3
   13064:	andeq	r5, r2, r4, lsr r8
   13068:	andeq	r5, r2, ip, lsr r9
   1306c:	push	{r4, lr}
   13070:	mov	r2, #308	; 0x134
   13074:	ldr	r3, [pc, #8]	; 13084 <__assert_fail@plt+0x5f8>
   13078:	ldr	r1, [pc, #8]	; 13088 <__assert_fail@plt+0x5fc>
   1307c:	ldr	r0, [pc, #8]	; 1308c <__assert_fail@plt+0x600>
   13080:	bl	12a8c <__assert_fail@plt>
   13084:	andeq	r8, r2, r8, lsl #5
   13088:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1308c:	muleq	r2, r0, sl
   13090:	push	{r4, lr}
   13094:	ldr	r3, [pc, #12]	; 130a8 <__assert_fail@plt+0x61c>
   13098:	ldr	r2, [pc, #12]	; 130ac <__assert_fail@plt+0x620>
   1309c:	ldr	r1, [pc, #12]	; 130b0 <__assert_fail@plt+0x624>
   130a0:	ldr	r0, [pc, #12]	; 130b4 <__assert_fail@plt+0x628>
   130a4:	bl	12a8c <__assert_fail@plt>
   130a8:	muleq	r2, r8, r2
   130ac:	andeq	r0, r0, r1, lsr #5
   130b0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   130b4:	muleq	r2, r0, sl
   130b8:	push	{r4, lr}
   130bc:	ldr	r3, [pc, #12]	; 130d0 <__assert_fail@plt+0x644>
   130c0:	ldr	r2, [pc, #12]	; 130d4 <__assert_fail@plt+0x648>
   130c4:	ldr	r1, [pc, #12]	; 130d8 <__assert_fail@plt+0x64c>
   130c8:	ldr	r0, [pc, #12]	; 130dc <__assert_fail@plt+0x650>
   130cc:	bl	12a8c <__assert_fail@plt>
   130d0:	andeq	r8, r2, r4, lsr #5
   130d4:	andeq	r0, r0, r7, lsl #5
   130d8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   130dc:	muleq	r2, r0, sl
   130e0:	push	{r4, lr}
   130e4:	mov	r2, #892	; 0x37c
   130e8:	ldr	r3, [pc, #8]	; 130f8 <__assert_fail@plt+0x66c>
   130ec:	ldr	r1, [pc, #8]	; 130fc <__assert_fail@plt+0x670>
   130f0:	ldr	r0, [pc, #8]	; 13100 <__assert_fail@plt+0x674>
   130f4:	bl	12a8c <__assert_fail@plt>
   130f8:			; <UNDEFINED> instruction: 0x000282b0
   130fc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13100:	andeq	r8, r2, r0, lsr #20
   13104:	push	{r4, lr}
   13108:	ldr	r3, [pc, #12]	; 1311c <__assert_fail@plt+0x690>
   1310c:	ldr	r2, [pc, #12]	; 13120 <__assert_fail@plt+0x694>
   13110:	ldr	r1, [pc, #12]	; 13124 <__assert_fail@plt+0x698>
   13114:	ldr	r0, [pc, #12]	; 13128 <__assert_fail@plt+0x69c>
   13118:	bl	12a8c <__assert_fail@plt>
   1311c:	andeq	r8, r2, r4, asr #5
   13120:	andeq	r0, r0, lr, lsl r2
   13124:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13128:	andeq	r8, r2, ip, lsr sl
   1312c:	push	{r4, lr}
   13130:	ldr	r3, [pc, #12]	; 13144 <__assert_fail@plt+0x6b8>
   13134:	ldr	r2, [pc, #12]	; 13148 <__assert_fail@plt+0x6bc>
   13138:	ldr	r1, [pc, #12]	; 1314c <__assert_fail@plt+0x6c0>
   1313c:	ldr	r0, [pc, #12]	; 13150 <__assert_fail@plt+0x6c4>
   13140:	bl	12a8c <__assert_fail@plt>
   13144:	andeq	r8, r2, r4, ror #5
   13148:	andeq	r0, r0, r6, asr #7
   1314c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13150:	andeq	r8, r2, r8, asr sl
   13154:	push	{r4, lr}
   13158:	ldr	r3, [pc, #12]	; 1316c <__assert_fail@plt+0x6e0>
   1315c:	ldr	r2, [pc, #12]	; 13170 <__assert_fail@plt+0x6e4>
   13160:	ldr	r1, [pc, #12]	; 13174 <__assert_fail@plt+0x6e8>
   13164:	ldr	r0, [pc, #12]	; 13178 <__assert_fail@plt+0x6ec>
   13168:	bl	12a8c <__assert_fail@plt>
   1316c:	andeq	r8, r2, r4, lsl #6
   13170:	andeq	r0, r0, r6, lsl #15
   13174:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13178:	muleq	r2, r4, ip

0001317c <main@@Base>:
   1317c:	push	{r4, lr}
   13180:	sub	sp, sp, #232	; 0xe8
   13184:	mov	r0, sp
   13188:	bl	1dcfc <flatcc_builder_init@@Base>
   1318c:	ldr	r0, [pc, #372]	; 13308 <main@@Base+0x18c>
   13190:	bl	129f0 <puts@plt>
   13194:	mov	r0, sp
   13198:	bl	15188 <test_table_with_emptystruct@@Base>
   1319c:	cmp	r0, #0
   131a0:	bne	132f0 <main@@Base+0x174>
   131a4:	mov	r0, sp
   131a8:	bl	14ce8 <test_empty_monster@@Base>
   131ac:	cmp	r0, #0
   131b0:	bne	132f0 <main@@Base+0x174>
   131b4:	mov	r0, sp
   131b8:	bl	16ba0 <test_monster@@Base>
   131bc:	cmp	r0, #0
   131c0:	bne	132f0 <main@@Base+0x174>
   131c4:	mov	r0, sp
   131c8:	bl	16c44 <test_monster_with_size@@Base>
   131cc:	cmp	r0, #0
   131d0:	bne	132f0 <main@@Base+0x174>
   131d4:	mov	r0, sp
   131d8:	bl	16d44 <test_string@@Base>
   131dc:	cmp	r0, #0
   131e0:	bne	132f0 <main@@Base+0x174>
   131e4:	mov	r0, sp
   131e8:	bl	1cbb4 <test_struct_buffer@@Base>
   131ec:	cmp	r0, #0
   131f0:	bne	132f0 <main@@Base+0x174>
   131f4:	mov	r0, sp
   131f8:	bl	14e40 <test_typed_empty_monster@@Base>
   131fc:	cmp	r0, #0
   13200:	bne	132f0 <main@@Base+0x174>
   13204:	mov	r0, sp
   13208:	bl	15304 <test_typed_table_with_emptystruct@@Base>
   1320c:	cmp	r0, #0
   13210:	bne	132f0 <main@@Base+0x174>
   13214:	mov	r0, sp
   13218:	bl	1cdf0 <test_typed_struct_buffer@@Base>
   1321c:	cmp	r0, #0
   13220:	bne	132f0 <main@@Base+0x174>
   13224:	mov	r0, sp
   13228:	bl	1a158 <test_clone_slice@@Base>
   1322c:	cmp	r0, #0
   13230:	bne	132f0 <main@@Base+0x174>
   13234:	mov	r0, sp
   13238:	bl	1be34 <test_add_set_defaults@@Base>
   1323c:	cmp	r0, #0
   13240:	bne	132f0 <main@@Base+0x174>
   13244:	mov	r0, sp
   13248:	bl	1ac10 <test_create_add_field@@Base>
   1324c:	cmp	r0, #0
   13250:	bne	132f0 <main@@Base+0x174>
   13254:	mov	r0, sp
   13258:	bl	1aeb0 <test_union_vector@@Base>
   1325c:	cmp	r0, #0
   13260:	bne	132f0 <main@@Base+0x174>
   13264:	mov	r0, sp
   13268:	bl	19cac <test_basic_sort@@Base>
   1326c:	cmp	r0, #0
   13270:	bne	132f0 <main@@Base+0x174>
   13274:	mov	r0, sp
   13278:	bl	16fdc <test_sort_find@@Base>
   1327c:	cmp	r0, #0
   13280:	bne	132f0 <main@@Base+0x174>
   13284:	mov	r0, sp
   13288:	bl	18510 <test_scan@@Base>
   1328c:	cmp	r0, #0
   13290:	bne	132f0 <main@@Base+0x174>
   13294:	mov	r0, sp
   13298:	bl	1c14c <test_nested_buffer@@Base>
   1329c:	cmp	r0, #0
   132a0:	bne	132f0 <main@@Base+0x174>
   132a4:	mov	r0, sp
   132a8:	bl	1c484 <test_nested_buffer_first@@Base>
   132ac:	cmp	r0, #0
   132b0:	bne	132f0 <main@@Base+0x174>
   132b4:	mov	r0, sp
   132b8:	bl	1c7bc <test_nested_buffer_using_nest@@Base>
   132bc:	cmp	r0, #0
   132c0:	bne	132f0 <main@@Base+0x174>
   132c4:	mov	r0, sp
   132c8:	bl	14800 <test_type_aliases@@Base>
   132cc:	cmp	r0, #0
   132d0:	bne	132f0 <main@@Base+0x174>
   132d4:	mov	r0, sp
   132d8:	bl	1b228 <test_mixed_type_union@@Base>
   132dc:	subs	r4, r0, #0
   132e0:	bne	132f0 <main@@Base+0x174>
   132e4:	mov	r0, sp
   132e8:	bl	1df68 <flatcc_builder_clear@@Base>
   132ec:	b	132fc <main@@Base+0x180>
   132f0:	ldr	r0, [pc, #20]	; 1330c <main@@Base+0x190>
   132f4:	bl	129f0 <puts@plt>
   132f8:	mvn	r4, #0
   132fc:	mov	r0, r4
   13300:	add	sp, sp, #232	; 0xe8
   13304:	pop	{r4, pc}
   13308:	andeq	r8, r2, r0, ror #4
   1330c:	andeq	r8, r2, ip, ror r2

00013310 <_start@@Base>:
   13310:	mov	fp, #0
   13314:	mov	lr, #0
   13318:	pop	{r1}		; (ldr r1, [sp], #4)
   1331c:	mov	r2, sp
   13320:	push	{r2}		; (str r2, [sp, #-4]!)
   13324:	push	{r0}		; (str r0, [sp, #-4]!)
   13328:	ldr	ip, [pc, #16]	; 13340 <_start@@Base+0x30>
   1332c:	push	{ip}		; (str ip, [sp, #-4]!)
   13330:	ldr	r0, [pc, #12]	; 13344 <_start@@Base+0x34>
   13334:	ldr	r3, [pc, #12]	; 13348 <_start@@Base+0x38>
   13338:	bl	12a08 <__libc_start_main@plt>
   1333c:	bl	12a80 <abort@plt>
   13340:	andeq	r4, r2, ip, lsr #31
   13344:	andeq	r3, r1, ip, ror r1
   13348:	andeq	r4, r2, ip, asr #30
   1334c:	ldr	r3, [pc, #20]	; 13368 <_start@@Base+0x58>
   13350:	ldr	r2, [pc, #20]	; 1336c <_start@@Base+0x5c>
   13354:	add	r3, pc, r3
   13358:	ldr	r2, [r3, r2]
   1335c:	cmp	r2, #0
   13360:	bxeq	lr
   13364:	b	12a14 <__gmon_start__@plt>
   13368:	andeq	r6, r2, r4, lsr #25
   1336c:	andeq	r0, r0, r4, rrx
   13370:	ldr	r3, [pc, #28]	; 13394 <_start@@Base+0x84>
   13374:	ldr	r0, [pc, #28]	; 13398 <_start@@Base+0x88>
   13378:	sub	r3, r3, r0
   1337c:	cmp	r3, #6
   13380:	bxls	lr
   13384:	ldr	r3, [pc, #16]	; 1339c <_start@@Base+0x8c>
   13388:	cmp	r3, #0
   1338c:	bxeq	lr
   13390:	bx	r3
   13394:	andeq	sl, r3, r3, ror r0
   13398:	andeq	sl, r3, r0, ror r0
   1339c:	andeq	r0, r0, r0
   133a0:	ldr	r1, [pc, #36]	; 133cc <_start@@Base+0xbc>
   133a4:	ldr	r0, [pc, #36]	; 133d0 <_start@@Base+0xc0>
   133a8:	sub	r1, r1, r0
   133ac:	asr	r1, r1, #2
   133b0:	add	r1, r1, r1, lsr #31
   133b4:	asrs	r1, r1, #1
   133b8:	bxeq	lr
   133bc:	ldr	r3, [pc, #16]	; 133d4 <_start@@Base+0xc4>
   133c0:	cmp	r3, #0
   133c4:	bxeq	lr
   133c8:	bx	r3
   133cc:	andeq	sl, r3, r0, ror r0
   133d0:	andeq	sl, r3, r0, ror r0
   133d4:	andeq	r0, r0, r0
   133d8:	push	{r4, lr}
   133dc:	ldr	r4, [pc, #24]	; 133fc <_start@@Base+0xec>
   133e0:	ldrb	r3, [r4]
   133e4:	cmp	r3, #0
   133e8:	popne	{r4, pc}
   133ec:	bl	13370 <_start@@Base+0x60>
   133f0:	mov	r3, #1
   133f4:	strb	r3, [r4]
   133f8:	pop	{r4, pc}
   133fc:	andeq	sl, r3, r4, ror r0
   13400:	ldr	r0, [pc, #40]	; 13430 <_start@@Base+0x120>
   13404:	ldr	r3, [r0]
   13408:	cmp	r3, #0
   1340c:	bne	13414 <_start@@Base+0x104>
   13410:	b	133a0 <_start@@Base+0x90>
   13414:	ldr	r3, [pc, #24]	; 13434 <_start@@Base+0x124>
   13418:	cmp	r3, #0
   1341c:	beq	13410 <_start@@Base+0x100>
   13420:	push	{r4, lr}
   13424:	blx	r3
   13428:	pop	{r4, lr}
   1342c:	b	133a0 <_start@@Base+0x90>
   13430:	andeq	r9, r3, r4, lsl pc
   13434:	andeq	r0, r0, r0
   13438:	mov	r3, #4
   1343c:	mov	r2, r3
   13440:	mov	r1, #0
   13444:	b	236a8 <flatcc_verify_field@@Base>
   13448:	mov	r2, #0
   1344c:	mov	r1, r2
   13450:	mov	r3, #1
   13454:	b	236a8 <flatcc_verify_field@@Base>
   13458:	cmp	r0, #0
   1345c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13460:	mov	r7, r1
   13464:	sub	sp, sp, #28
   13468:	mov	r8, r2
   1346c:	mov	r6, r3
   13470:	beq	13484 <_start@@Base+0x174>
   13474:	mov	r2, r0
   13478:	ldr	r1, [pc, #256]	; 13580 <_start@@Base+0x270>
   1347c:	mov	r0, r3
   13480:	bl	12a2c <fprintf@plt>
   13484:	cmp	r8, #0
   13488:	beq	13578 <_start@@Base+0x268>
   1348c:	mov	r4, #0
   13490:	ldr	fp, [pc, #236]	; 13584 <_start@@Base+0x274>
   13494:	ldr	sl, [pc, #236]	; 13588 <_start@@Base+0x278>
   13498:	sub	r7, r7, #1
   1349c:	add	r9, sp, #4
   134a0:	b	13500 <_start@@Base+0x1f0>
   134a4:	cmp	r4, #0
   134a8:	beq	134b0 <_start@@Base+0x1a0>
   134ac:	bl	12a2c <fprintf@plt>
   134b0:	mov	r2, r4
   134b4:	ldr	r1, [pc, #208]	; 1358c <_start@@Base+0x27c>
   134b8:	mov	r0, r6
   134bc:	bl	12a2c <fprintf@plt>
   134c0:	ldrb	r2, [r7, #1]
   134c4:	mov	r1, sl
   134c8:	mov	r0, r6
   134cc:	bl	12a2c <fprintf@plt>
   134d0:	ldrb	r2, [r7, #1]!
   134d4:	add	r3, sp, #24
   134d8:	add	r3, r3, r5
   134dc:	sub	r1, r2, #32
   134e0:	cmp	r1, #94	; 0x5e
   134e4:	add	r4, r4, #1
   134e8:	movhi	r2, #46	; 0x2e
   134ec:	mov	r1, #0
   134f0:	cmp	r8, r4
   134f4:	strb	r1, [r3, #-19]	; 0xffffffed
   134f8:	strb	r2, [r3, #-20]	; 0xffffffec
   134fc:	beq	1352c <_start@@Base+0x21c>
   13500:	ands	r5, r4, #15
   13504:	mov	r2, r9
   13508:	mov	r1, fp
   1350c:	mov	r0, r6
   13510:	beq	134a4 <_start@@Base+0x194>
   13514:	tst	r4, #7
   13518:	bne	134c0 <_start@@Base+0x1b0>
   1351c:	mov	r1, r6
   13520:	mov	r0, #32
   13524:	bl	12a68 <fputc@plt>
   13528:	b	134c0 <_start@@Base+0x1b0>
   1352c:	tst	r4, #15
   13530:	beq	13560 <_start@@Base+0x250>
   13534:	ldr	r8, [pc, #84]	; 13590 <_start@@Base+0x280>
   13538:	mov	r7, #3
   1353c:	mov	r5, #1
   13540:	add	r4, r4, #1
   13544:	mov	r3, r6
   13548:	mov	r2, r7
   1354c:	mov	r1, r5
   13550:	mov	r0, r8
   13554:	bl	129d8 <fwrite@plt>
   13558:	tst	r4, #15
   1355c:	bne	13540 <_start@@Base+0x230>
   13560:	mov	r2, r9
   13564:	mov	r0, r6
   13568:	ldr	r1, [pc, #20]	; 13584 <_start@@Base+0x274>
   1356c:	bl	12a2c <fprintf@plt>
   13570:	add	sp, sp, #28
   13574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13578:	add	r9, sp, #4
   1357c:	b	13560 <_start@@Base+0x250>
   13580:	andeq	r5, r2, r0, lsr #13
   13584:	andeq	r5, r2, r8, lsr #13
   13588:			; <UNDEFINED> instruction: 0x000256b8
   1358c:			; <UNDEFINED> instruction: 0x000256b0
   13590:	andeq	r5, r2, r0, asr #13
   13594:	push	{r4, lr}
   13598:	ldr	r3, [pc, #12]	; 135ac <_start@@Base+0x29c>
   1359c:	ldr	r2, [pc, #12]	; 135b0 <_start@@Base+0x2a0>
   135a0:	ldr	r1, [pc, #12]	; 135b4 <_start@@Base+0x2a4>
   135a4:	ldr	r0, [pc, #12]	; 135b8 <_start@@Base+0x2a8>
   135a8:	bl	12a8c <__assert_fail@plt>
   135ac:	andeq	r5, r2, r0, lsr #3
   135b0:			; <UNDEFINED> instruction: 0x000002b5
   135b4:	andeq	r5, r2, r4, asr #13
   135b8:			; <UNDEFINED> instruction: 0x000257b8
   135bc:	cmp	r0, #0
   135c0:	push	{r4, lr}
   135c4:	beq	13610 <_start@@Base+0x300>
   135c8:	ldr	r3, [r0]
   135cc:	sub	r3, r0, r3
   135d0:	ldrh	r2, [r3]
   135d4:	cmp	r2, #11
   135d8:	bls	135fc <_start@@Base+0x2ec>
   135dc:	ldrh	r2, [r3, #10]
   135e0:	cmp	r2, #0
   135e4:	beq	135fc <_start@@Base+0x2ec>
   135e8:	ldr	r3, [r0, r2]
   135ec:	add	r0, r0, r2
   135f0:	add	r3, r3, #4
   135f4:	add	r0, r0, r3
   135f8:	pop	{r4, pc}
   135fc:	ldr	r3, [pc, #16]	; 13614 <_start@@Base+0x304>
   13600:	ldr	r2, [pc, #16]	; 13618 <_start@@Base+0x308>
   13604:	ldr	r1, [pc, #16]	; 1361c <_start@@Base+0x30c>
   13608:	ldr	r0, [pc, #16]	; 13620 <_start@@Base+0x310>
   1360c:	bl	12a8c <__assert_fail@plt>
   13610:	bl	12d04 <__assert_fail@plt+0x278>
   13614:	andeq	r5, r2, r0, lsl #4
   13618:			; <UNDEFINED> instruction: 0x000002bb
   1361c:	andeq	r5, r2, r4, asr #13
   13620:	strdeq	r5, [r2], -r0
   13624:	mov	r3, #8
   13628:	push	{r4, lr}
   1362c:	mov	r2, r3
   13630:	mov	r1, #0
   13634:	mov	r4, r0
   13638:	bl	236a8 <flatcc_verify_field@@Base>
   1363c:	cmp	r0, #0
   13640:	popne	{r4, pc}
   13644:	mov	r3, #4
   13648:	mov	r0, r4
   1364c:	mov	r2, r3
   13650:	mov	r1, #1
   13654:	pop	{r4, lr}
   13658:	b	236a8 <flatcc_verify_field@@Base>
   1365c:	mov	r3, #1
   13660:	push	{r4, lr}
   13664:	mov	r2, r3
   13668:	mov	r1, #0
   1366c:	mov	r4, r0
   13670:	bl	236a8 <flatcc_verify_field@@Base>
   13674:	cmp	r0, #0
   13678:	popne	{r4, pc}
   1367c:	mov	r3, #1
   13680:	mov	r2, r3
   13684:	mov	r1, r3
   13688:	mov	r0, r4
   1368c:	bl	236a8 <flatcc_verify_field@@Base>
   13690:	cmp	r0, #0
   13694:	popne	{r4, pc}
   13698:	mov	r3, #1
   1369c:	mov	r2, r3
   136a0:	mov	r1, #2
   136a4:	mov	r0, r4
   136a8:	bl	236a8 <flatcc_verify_field@@Base>
   136ac:	cmp	r0, #0
   136b0:	popne	{r4, pc}
   136b4:	mov	r3, #1
   136b8:	mov	r0, r4
   136bc:	mov	r2, r3
   136c0:	mov	r1, #3
   136c4:	pop	{r4, lr}
   136c8:	b	236a8 <flatcc_verify_field@@Base>
   136cc:	mov	r3, #1
   136d0:	push	{r4, lr}
   136d4:	mov	r2, r3
   136d8:	sub	sp, sp, #8
   136dc:	mov	r1, #0
   136e0:	mov	r4, r0
   136e4:	bl	236a8 <flatcc_verify_field@@Base>
   136e8:	cmp	r0, #0
   136ec:	beq	136f8 <_start@@Base+0x3e8>
   136f0:	add	sp, sp, #8
   136f4:	pop	{r4, pc}
   136f8:	mov	r3, #1
   136fc:	mov	r2, r3
   13700:	mov	r1, r3
   13704:	mov	r0, r4
   13708:	bl	236a8 <flatcc_verify_field@@Base>
   1370c:	cmp	r0, #0
   13710:	bne	136f0 <_start@@Base+0x3e0>
   13714:	mov	r3, #2
   13718:	mov	r2, r3
   1371c:	mov	r1, r3
   13720:	mov	r0, r4
   13724:	bl	236a8 <flatcc_verify_field@@Base>
   13728:	cmp	r0, #0
   1372c:	bne	136f0 <_start@@Base+0x3e0>
   13730:	mov	r3, #2
   13734:	mov	r2, r3
   13738:	mov	r1, #3
   1373c:	mov	r0, r4
   13740:	bl	236a8 <flatcc_verify_field@@Base>
   13744:	cmp	r0, #0
   13748:	bne	136f0 <_start@@Base+0x3e0>
   1374c:	mov	r3, #4
   13750:	mov	r2, r3
   13754:	mov	r1, r3
   13758:	mov	r0, r4
   1375c:	bl	236a8 <flatcc_verify_field@@Base>
   13760:	cmp	r0, #0
   13764:	bne	136f0 <_start@@Base+0x3e0>
   13768:	mov	r3, #4
   1376c:	mov	r2, r3
   13770:	mov	r1, #5
   13774:	mov	r0, r4
   13778:	bl	236a8 <flatcc_verify_field@@Base>
   1377c:	cmp	r0, #0
   13780:	bne	136f0 <_start@@Base+0x3e0>
   13784:	mov	r3, #8
   13788:	mov	r2, r3
   1378c:	mov	r1, #6
   13790:	mov	r0, r4
   13794:	bl	236a8 <flatcc_verify_field@@Base>
   13798:	cmp	r0, #0
   1379c:	bne	136f0 <_start@@Base+0x3e0>
   137a0:	mov	r3, #8
   137a4:	mov	r2, r3
   137a8:	mov	r1, #7
   137ac:	mov	r0, r4
   137b0:	bl	236a8 <flatcc_verify_field@@Base>
   137b4:	cmp	r0, #0
   137b8:	bne	136f0 <_start@@Base+0x3e0>
   137bc:	mov	r3, #4
   137c0:	mov	r2, r3
   137c4:	mov	r1, #8
   137c8:	mov	r0, r4
   137cc:	bl	236a8 <flatcc_verify_field@@Base>
   137d0:	cmp	r0, #0
   137d4:	bne	136f0 <_start@@Base+0x3e0>
   137d8:	mov	r3, #8
   137dc:	mov	r2, r3
   137e0:	mov	r1, #9
   137e4:	mov	r0, r4
   137e8:	bl	236a8 <flatcc_verify_field@@Base>
   137ec:	cmp	r0, #0
   137f0:	bne	136f0 <_start@@Base+0x3e0>
   137f4:	mvn	r2, #0
   137f8:	mov	r3, #1
   137fc:	str	r2, [sp, #4]
   13800:	str	r3, [sp]
   13804:	mov	r2, #0
   13808:	mov	r1, #10
   1380c:	mov	r0, r4
   13810:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13814:	cmp	r0, #0
   13818:	bne	136f0 <_start@@Base+0x3e0>
   1381c:	mvn	r1, #-536870912	; 0xe0000000
   13820:	mov	r3, #8
   13824:	mov	r2, r0
   13828:	str	r1, [sp, #4]
   1382c:	mov	r0, r4
   13830:	str	r3, [sp]
   13834:	mov	r1, #11
   13838:	bl	237f8 <flatcc_verify_vector_field@@Base>
   1383c:	b	136f0 <_start@@Base+0x3e0>
   13840:	mov	r2, #0
   13844:	push	{r4, lr}
   13848:	mov	r1, r2
   1384c:	mov	r4, r0
   13850:	bl	23718 <flatcc_verify_string_field@@Base>
   13854:	cmp	r0, #0
   13858:	popne	{r4, pc}
   1385c:	mov	r3, #8
   13860:	mov	r2, r3
   13864:	mov	r1, #1
   13868:	mov	r0, r4
   1386c:	bl	236a8 <flatcc_verify_field@@Base>
   13870:	cmp	r0, #0
   13874:	popne	{r4, pc}
   13878:	mov	r3, #2
   1387c:	mov	r0, r4
   13880:	mov	r2, r3
   13884:	mov	r1, r3
   13888:	pop	{r4, lr}
   1388c:	b	236a8 <flatcc_verify_field@@Base>
   13890:	mov	r2, #0
   13894:	push	{r4, lr}
   13898:	mov	r1, r2
   1389c:	mov	r4, r0
   138a0:	bl	23718 <flatcc_verify_string_field@@Base>
   138a4:	cmp	r0, #0
   138a8:	popne	{r4, pc}
   138ac:	mov	r3, #4
   138b0:	mov	r2, r3
   138b4:	mov	r1, #1
   138b8:	mov	r0, r4
   138bc:	bl	236a8 <flatcc_verify_field@@Base>
   138c0:	cmp	r0, #0
   138c4:	popne	{r4, pc}
   138c8:	mov	r2, r0
   138cc:	mov	r1, #2
   138d0:	mov	r0, r4
   138d4:	bl	23718 <flatcc_verify_string_field@@Base>
   138d8:	cmp	r0, #0
   138dc:	popne	{r4, pc}
   138e0:	mov	r3, #8
   138e4:	mov	r2, r3
   138e8:	mov	r1, #3
   138ec:	mov	r0, r4
   138f0:	bl	236a8 <flatcc_verify_field@@Base>
   138f4:	cmp	r0, #0
   138f8:	popne	{r4, pc}
   138fc:	mov	r2, r0
   13900:	mov	r1, #4
   13904:	mov	r0, r4
   13908:	bl	23718 <flatcc_verify_string_field@@Base>
   1390c:	cmp	r0, #0
   13910:	popne	{r4, pc}
   13914:	mov	r3, #8
   13918:	mov	r2, r3
   1391c:	mov	r1, #5
   13920:	mov	r0, r4
   13924:	bl	236a8 <flatcc_verify_field@@Base>
   13928:	cmp	r0, #0
   1392c:	popne	{r4, pc}
   13930:	mov	r3, #4
   13934:	mov	r2, r3
   13938:	mov	r1, #6
   1393c:	mov	r0, r4
   13940:	bl	236a8 <flatcc_verify_field@@Base>
   13944:	cmp	r0, #0
   13948:	popne	{r4, pc}
   1394c:	mov	r3, #8
   13950:	mov	r2, r3
   13954:	mov	r1, #7
   13958:	mov	r0, r4
   1395c:	bl	236a8 <flatcc_verify_field@@Base>
   13960:	cmp	r0, #0
   13964:	popne	{r4, pc}
   13968:	mov	r3, #4
   1396c:	mov	r0, r4
   13970:	mov	r2, r3
   13974:	mov	r1, #8
   13978:	pop	{r4, lr}
   1397c:	b	236a8 <flatcc_verify_field@@Base>
   13980:	mov	r2, #0
   13984:	push	{r4, lr}
   13988:	mov	r1, r2
   1398c:	ldr	r3, [pc, #64]	; 139d4 <_start@@Base+0x6c4>
   13990:	mov	r4, r0
   13994:	bl	23aa0 <flatcc_verify_table_field@@Base>
   13998:	cmp	r0, #0
   1399c:	popne	{r4, pc}
   139a0:	mov	r2, r0
   139a4:	ldr	r3, [pc, #44]	; 139d8 <_start@@Base+0x6c8>
   139a8:	mov	r1, #1
   139ac:	mov	r0, r4
   139b0:	bl	23aa0 <flatcc_verify_table_field@@Base>
   139b4:	cmp	r0, #0
   139b8:	popne	{r4, pc}
   139bc:	mov	r2, r0
   139c0:	ldr	r3, [pc, #20]	; 139dc <_start@@Base+0x6cc>
   139c4:	mov	r0, r4
   139c8:	mov	r1, #2
   139cc:	pop	{r4, lr}
   139d0:	b	23aa0 <flatcc_verify_table_field@@Base>
   139d4:	muleq	r1, r0, r8
   139d8:	andeq	r4, r1, ip, asr #3
   139dc:	andeq	r3, r1, r4, lsr #12
   139e0:	push	{r4, r5, r6, r7, r8, lr}
   139e4:	mov	r3, #16
   139e8:	sub	sp, sp, #8
   139ec:	mov	r2, #32
   139f0:	mov	r1, #0
   139f4:	mov	r4, r0
   139f8:	bl	236a8 <flatcc_verify_field@@Base>
   139fc:	cmp	r0, #0
   13a00:	beq	13a0c <_start@@Base+0x6fc>
   13a04:	add	sp, sp, #8
   13a08:	pop	{r4, r5, r6, r7, r8, pc}
   13a0c:	mov	r3, #2
   13a10:	mov	r2, r3
   13a14:	mov	r1, r3
   13a18:	mov	r0, r4
   13a1c:	bl	236a8 <flatcc_verify_field@@Base>
   13a20:	cmp	r0, #0
   13a24:	bne	13a04 <_start@@Base+0x6f4>
   13a28:	mov	r3, #2
   13a2c:	mov	r2, r3
   13a30:	mov	r1, #1
   13a34:	mov	r0, r4
   13a38:	bl	236a8 <flatcc_verify_field@@Base>
   13a3c:	cmp	r0, #0
   13a40:	bne	13a04 <_start@@Base+0x6f4>
   13a44:	mov	r2, #1
   13a48:	mov	r1, #3
   13a4c:	mov	r0, r4
   13a50:	bl	23718 <flatcc_verify_string_field@@Base>
   13a54:	cmp	r0, #0
   13a58:	bne	13a04 <_start@@Base+0x6f4>
   13a5c:	mov	r3, #1
   13a60:	mov	r2, r3
   13a64:	mov	r1, #6
   13a68:	mov	r0, r4
   13a6c:	bl	236a8 <flatcc_verify_field@@Base>
   13a70:	cmp	r0, #0
   13a74:	bne	13a04 <_start@@Base+0x6f4>
   13a78:	mov	r5, #1
   13a7c:	mvn	r6, #0
   13a80:	mov	r2, r0
   13a84:	stm	sp, {r5, r6}
   13a88:	mov	r3, r5
   13a8c:	mov	r1, #5
   13a90:	mov	r0, r4
   13a94:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13a98:	cmp	r0, #0
   13a9c:	bne	13a04 <_start@@Base+0x6f4>
   13aa0:	mov	r2, r0
   13aa4:	ldr	r3, [pc, #840]	; 13df4 <_start@@Base+0xae4>
   13aa8:	mov	r1, #11
   13aac:	mov	r0, r4
   13ab0:	bl	23c04 <flatcc_verify_table_vector_field@@Base>
   13ab4:	cmp	r0, #0
   13ab8:	bne	13a04 <_start@@Base+0x6f4>
   13abc:	mov	r2, r0
   13ac0:	mov	r1, #10
   13ac4:	mov	r0, r4
   13ac8:	bl	238ec <flatcc_verify_string_vector_field@@Base>
   13acc:	cmp	r0, #0
   13ad0:	bne	13a04 <_start@@Base+0x6f4>
   13ad4:	mov	r2, r0
   13ad8:	mov	r1, #28
   13adc:	mov	r0, r4
   13ae0:	bl	238ec <flatcc_verify_string_vector_field@@Base>
   13ae4:	cmp	r0, #0
   13ae8:	bne	13a04 <_start@@Base+0x6f4>
   13aec:	mov	r2, r0
   13af0:	stm	sp, {r5, r6}
   13af4:	mov	r3, r5
   13af8:	mov	r1, #24
   13afc:	mov	r0, r4
   13b00:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13b04:	cmp	r0, #0
   13b08:	bne	13a04 <_start@@Base+0x6f4>
   13b0c:	mvn	r3, #-536870912	; 0xe0000000
   13b10:	mov	r5, #4
   13b14:	str	r3, [sp, #4]
   13b18:	str	r5, [sp]
   13b1c:	mov	r3, #8
   13b20:	mov	r2, #0
   13b24:	mov	r1, #29
   13b28:	mov	r0, r4
   13b2c:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13b30:	cmp	r0, #0
   13b34:	bne	13a04 <_start@@Base+0x6f4>
   13b38:	ldr	r7, [pc, #692]	; 13df4 <_start@@Base+0xae4>
   13b3c:	mov	r2, r0
   13b40:	mov	r3, r7
   13b44:	mov	r1, #12
   13b48:	mov	r0, r4
   13b4c:	bl	23aa0 <flatcc_verify_table_field@@Base>
   13b50:	cmp	r0, #0
   13b54:	bne	13a04 <_start@@Base+0x6f4>
   13b58:	mov	r2, r0
   13b5c:	ldr	r3, [pc, #660]	; 13df8 <_start@@Base+0xae8>
   13b60:	mov	r1, #8
   13b64:	mov	r0, r4
   13b68:	bl	24b34 <flatcc_verify_union_field@@Base>
   13b6c:	cmp	r0, #0
   13b70:	bne	13a04 <_start@@Base+0x6f4>
   13b74:	mvn	r8, #-1073741824	; 0xc0000000
   13b78:	mov	r6, #2
   13b7c:	mov	r2, r0
   13b80:	stm	sp, {r6, r8}
   13b84:	mov	r3, r5
   13b88:	mov	r1, #9
   13b8c:	mov	r0, r4
   13b90:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13b94:	cmp	r0, #0
   13b98:	bne	13a04 <_start@@Base+0x6f4>
   13b9c:	mov	r2, r0
   13ba0:	stm	sp, {r6, r8}
   13ba4:	mov	r3, r5
   13ba8:	mov	r1, #31
   13bac:	mov	r0, r4
   13bb0:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13bb4:	cmp	r0, #0
   13bb8:	bne	13a04 <_start@@Base+0x6f4>
   13bbc:	mov	r6, #1
   13bc0:	mov	r3, r0
   13bc4:	mov	r2, r0
   13bc8:	stm	sp, {r6, r7}
   13bcc:	mov	r1, #13
   13bd0:	mov	r0, r4
   13bd4:	bl	248a4 <flatcc_verify_table_as_nested_root@@Base>
   13bd8:	cmp	r0, #0
   13bdc:	bne	13a04 <_start@@Base+0x6f4>
   13be0:	mov	r2, r0
   13be4:	ldr	r3, [pc, #528]	; 13dfc <_start@@Base+0xaec>
   13be8:	mov	r1, #14
   13bec:	mov	r0, r4
   13bf0:	bl	23aa0 <flatcc_verify_table_field@@Base>
   13bf4:	cmp	r0, #0
   13bf8:	bne	13a04 <_start@@Base+0x6f4>
   13bfc:	mov	r3, r6
   13c00:	mov	r2, r6
   13c04:	mov	r1, #15
   13c08:	mov	r0, r4
   13c0c:	bl	236a8 <flatcc_verify_field@@Base>
   13c10:	cmp	r0, #0
   13c14:	bne	13a04 <_start@@Base+0x6f4>
   13c18:	mov	r3, r5
   13c1c:	mov	r2, r5
   13c20:	mov	r1, #16
   13c24:	mov	r0, r4
   13c28:	bl	236a8 <flatcc_verify_field@@Base>
   13c2c:	cmp	r0, #0
   13c30:	bne	13a04 <_start@@Base+0x6f4>
   13c34:	mov	r3, r5
   13c38:	mov	r2, r5
   13c3c:	mov	r1, #17
   13c40:	mov	r0, r4
   13c44:	bl	236a8 <flatcc_verify_field@@Base>
   13c48:	cmp	r0, #0
   13c4c:	bne	13a04 <_start@@Base+0x6f4>
   13c50:	mov	r3, #8
   13c54:	mov	r2, r3
   13c58:	mov	r1, #18
   13c5c:	mov	r0, r4
   13c60:	bl	236a8 <flatcc_verify_field@@Base>
   13c64:	cmp	r0, #0
   13c68:	bne	13a04 <_start@@Base+0x6f4>
   13c6c:	mov	r3, #8
   13c70:	mov	r2, r3
   13c74:	mov	r1, #19
   13c78:	mov	r0, r4
   13c7c:	bl	236a8 <flatcc_verify_field@@Base>
   13c80:	cmp	r0, #0
   13c84:	bne	13a04 <_start@@Base+0x6f4>
   13c88:	mov	r3, r5
   13c8c:	mov	r2, r5
   13c90:	mov	r1, #20
   13c94:	mov	r0, r4
   13c98:	bl	236a8 <flatcc_verify_field@@Base>
   13c9c:	cmp	r0, #0
   13ca0:	bne	13a04 <_start@@Base+0x6f4>
   13ca4:	mov	r3, r5
   13ca8:	mov	r2, r5
   13cac:	mov	r1, #21
   13cb0:	mov	r0, r4
   13cb4:	bl	236a8 <flatcc_verify_field@@Base>
   13cb8:	cmp	r0, #0
   13cbc:	bne	13a04 <_start@@Base+0x6f4>
   13cc0:	mov	r3, #8
   13cc4:	mov	r2, r3
   13cc8:	mov	r1, #22
   13ccc:	mov	r0, r4
   13cd0:	bl	236a8 <flatcc_verify_field@@Base>
   13cd4:	cmp	r0, #0
   13cd8:	bne	13a04 <_start@@Base+0x6f4>
   13cdc:	mov	r3, #8
   13ce0:	mov	r2, r3
   13ce4:	mov	r1, #23
   13ce8:	mov	r0, r4
   13cec:	bl	236a8 <flatcc_verify_field@@Base>
   13cf0:	cmp	r0, #0
   13cf4:	bne	13a04 <_start@@Base+0x6f4>
   13cf8:	mov	r3, r5
   13cfc:	mov	r2, r5
   13d00:	mov	r1, #25
   13d04:	mov	r0, r4
   13d08:	bl	236a8 <flatcc_verify_field@@Base>
   13d0c:	cmp	r0, #0
   13d10:	bne	13a04 <_start@@Base+0x6f4>
   13d14:	mov	r3, r5
   13d18:	mov	r2, r5
   13d1c:	mov	r1, #26
   13d20:	mov	r0, r4
   13d24:	bl	236a8 <flatcc_verify_field@@Base>
   13d28:	cmp	r0, #0
   13d2c:	bne	13a04 <_start@@Base+0x6f4>
   13d30:	mov	r3, r5
   13d34:	mov	r2, r5
   13d38:	mov	r1, #27
   13d3c:	mov	r0, r4
   13d40:	bl	236a8 <flatcc_verify_field@@Base>
   13d44:	cmp	r0, #0
   13d48:	bne	13a04 <_start@@Base+0x6f4>
   13d4c:	mvn	r1, #0
   13d50:	mov	r2, r0
   13d54:	str	r1, [sp, #4]
   13d58:	mov	r3, r6
   13d5c:	str	r6, [sp]
   13d60:	mov	r1, #30
   13d64:	mov	r0, r4
   13d68:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13d6c:	cmp	r0, #0
   13d70:	bne	13a04 <_start@@Base+0x6f4>
   13d74:	mov	r5, #8
   13d78:	mvn	r6, #-536870912	; 0xe0000000
   13d7c:	mov	r3, r5
   13d80:	stm	sp, {r5, r6}
   13d84:	mov	r2, #0
   13d88:	mov	r1, #32
   13d8c:	mov	r0, r4
   13d90:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13d94:	cmp	r0, #0
   13d98:	bne	13a04 <_start@@Base+0x6f4>
   13d9c:	mov	r2, r0
   13da0:	stm	sp, {r5, r6}
   13da4:	mov	r3, r5
   13da8:	mov	r1, #33	; 0x21
   13dac:	mov	r0, r4
   13db0:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13db4:	cmp	r0, #0
   13db8:	bne	13a04 <_start@@Base+0x6f4>
   13dbc:	mov	r2, r0
   13dc0:	ldr	r3, [pc, #56]	; 13e00 <_start@@Base+0xaf0>
   13dc4:	mov	r1, #34	; 0x22
   13dc8:	mov	r0, r4
   13dcc:	bl	23aa0 <flatcc_verify_table_field@@Base>
   13dd0:	cmp	r0, #0
   13dd4:	bne	13a04 <_start@@Base+0x6f4>
   13dd8:	mov	r2, r0
   13ddc:	ldr	r3, [pc, #32]	; 13e04 <_start@@Base+0xaf4>
   13de0:	mov	r0, r4
   13de4:	mov	r1, #35	; 0x23
   13de8:	add	sp, sp, #8
   13dec:	pop	{r4, r5, r6, r7, r8, lr}
   13df0:	b	23aa0 <flatcc_verify_table_field@@Base>
   13df4:	andeq	r3, r1, r0, ror #19
   13df8:	muleq	r1, r0, lr
   13dfc:	andeq	r3, r1, r0, asr #16
   13e00:	andeq	r4, r1, r4, asr #3
   13e04:	andeq	r3, r1, r8, lsl #28
   13e08:	push	{r4, r5, r6, lr}
   13e0c:	mov	r4, #1
   13e10:	sub	sp, sp, #8
   13e14:	mvn	r5, #0
   13e18:	mov	r2, #0
   13e1c:	mov	r1, r2
   13e20:	stm	sp, {r4, r5}
   13e24:	mov	r3, r4
   13e28:	mov	r6, r0
   13e2c:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13e30:	subs	r2, r0, #0
   13e34:	beq	13e44 <_start@@Base+0xb34>
   13e38:	mov	r0, r2
   13e3c:	add	sp, sp, #8
   13e40:	pop	{r4, r5, r6, pc}
   13e44:	stm	sp, {r4, r5}
   13e48:	mov	r3, r4
   13e4c:	mov	r1, r4
   13e50:	mov	r0, r6
   13e54:	bl	237f8 <flatcc_verify_vector_field@@Base>
   13e58:	subs	r2, r0, #0
   13e5c:	bne	13e38 <_start@@Base+0xb28>
   13e60:	ldr	r3, [pc, #36]	; 13e8c <_start@@Base+0xb7c>
   13e64:	str	r4, [sp]
   13e68:	str	r3, [sp, #4]
   13e6c:	mov	r0, r6
   13e70:	mov	r3, r2
   13e74:	mov	r1, #2
   13e78:	bl	248a4 <flatcc_verify_table_as_nested_root@@Base>
   13e7c:	mov	r2, r0
   13e80:	mov	r0, r2
   13e84:	add	sp, sp, #8
   13e88:	pop	{r4, r5, r6, pc}
   13e8c:	andeq	r3, r1, r0, ror #19
   13e90:	ldrb	r3, [r0, #12]
   13e94:	sub	r3, r3, #1
   13e98:	cmp	r3, #3
   13e9c:	ldrls	pc, [pc, r3, lsl #2]
   13ea0:	b	13ed4 <_start@@Base+0xbc4>
   13ea4:	andeq	r3, r1, ip, asr #29
   13ea8:	andeq	r3, r1, r4, asr #29
   13eac:			; <UNDEFINED> instruction: 0x00013ebc
   13eb0:			; <UNDEFINED> instruction: 0x00013eb4
   13eb4:	ldr	r1, [pc, #32]	; 13edc <_start@@Base+0xbcc>
   13eb8:	b	23ef4 <flatcc_verify_union_table@@Base>
   13ebc:	ldr	r1, [pc, #28]	; 13ee0 <_start@@Base+0xbd0>
   13ec0:	b	23ef4 <flatcc_verify_union_table@@Base>
   13ec4:	ldr	r1, [pc, #24]	; 13ee4 <_start@@Base+0xbd4>
   13ec8:	b	23ef4 <flatcc_verify_union_table@@Base>
   13ecc:	ldr	r1, [pc, #20]	; 13ee8 <_start@@Base+0xbd8>
   13ed0:	b	23ef4 <flatcc_verify_union_table@@Base>
   13ed4:	mov	r0, #0
   13ed8:	bx	lr
   13edc:	andeq	r3, r1, ip, ror #29
   13ee0:			; <UNDEFINED> instruction: 0x000141bc
   13ee4:	andeq	r3, r1, ip, asr r6
   13ee8:	andeq	r3, r1, r0, ror #19
   13eec:	mov	r2, #0
   13ef0:	push	{r4, lr}
   13ef4:	mov	r1, r2
   13ef8:	ldr	r3, [pc, #64]	; 13f40 <_start@@Base+0xc30>
   13efc:	mov	r4, r0
   13f00:	bl	23aa0 <flatcc_verify_table_field@@Base>
   13f04:	cmp	r0, #0
   13f08:	popne	{r4, pc}
   13f0c:	mov	r2, r0
   13f10:	ldr	r3, [pc, #44]	; 13f44 <_start@@Base+0xc34>
   13f14:	mov	r1, #1
   13f18:	mov	r0, r4
   13f1c:	bl	23aa0 <flatcc_verify_table_field@@Base>
   13f20:	cmp	r0, #0
   13f24:	popne	{r4, pc}
   13f28:	mov	r2, r0
   13f2c:	ldr	r3, [pc, #20]	; 13f48 <_start@@Base+0xc38>
   13f30:	mov	r0, r4
   13f34:	mov	r1, #3
   13f38:	pop	{r4, lr}
   13f3c:	b	24ca0 <flatcc_verify_union_vector_field@@Base>
   13f40:	andeq	r3, r1, r0, lsl #19
   13f44:	andeq	r3, r1, ip, asr #30
   13f48:	muleq	r1, r0, lr
   13f4c:	push	{r4, lr}
   13f50:	mov	r2, #0
   13f54:	ldr	r3, [pc, #124]	; 13fd8 <_start@@Base+0xcc8>
   13f58:	mov	r1, #1
   13f5c:	mov	r4, r0
   13f60:	bl	24b34 <flatcc_verify_union_field@@Base>
   13f64:	cmp	r0, #0
   13f68:	popne	{r4, pc}
   13f6c:	mov	r2, r0
   13f70:	ldr	r3, [pc, #96]	; 13fd8 <_start@@Base+0xcc8>
   13f74:	mov	r1, #3
   13f78:	mov	r0, r4
   13f7c:	bl	24b34 <flatcc_verify_union_field@@Base>
   13f80:	cmp	r0, #0
   13f84:	popne	{r4, pc}
   13f88:	mov	r2, r0
   13f8c:	ldr	r3, [pc, #68]	; 13fd8 <_start@@Base+0xcc8>
   13f90:	mov	r1, #5
   13f94:	mov	r0, r4
   13f98:	bl	24b34 <flatcc_verify_union_field@@Base>
   13f9c:	cmp	r0, #0
   13fa0:	popne	{r4, pc}
   13fa4:	mov	r2, r0
   13fa8:	ldr	r3, [pc, #40]	; 13fd8 <_start@@Base+0xcc8>
   13fac:	mov	r1, #7
   13fb0:	mov	r0, r4
   13fb4:	bl	24b34 <flatcc_verify_union_field@@Base>
   13fb8:	cmp	r0, #0
   13fbc:	popne	{r4, pc}
   13fc0:	mov	r2, r0
   13fc4:	ldr	r3, [pc, #12]	; 13fd8 <_start@@Base+0xcc8>
   13fc8:	mov	r0, r4
   13fcc:	mov	r1, #9
   13fd0:	pop	{r4, lr}
   13fd4:	b	24ca0 <flatcc_verify_union_vector_field@@Base>
   13fd8:	ldrdeq	r3, [r1], -ip
   13fdc:	ldrb	r3, [r0, #12]
   13fe0:	cmp	r3, #9
   13fe4:	beq	14020 <_start@@Base+0xd10>
   13fe8:	bls	14004 <_start@@Base+0xcf4>
   13fec:	cmp	r3, #11
   13ff0:	beq	14000 <_start@@Base+0xcf0>
   13ff4:	bcc	14020 <_start@@Base+0xd10>
   13ff8:	cmp	r3, #255	; 0xff
   13ffc:	bne	1402c <_start@@Base+0xd1c>
   14000:	b	24048 <flatcc_verify_union_string@@Base>
   14004:	cmp	r3, #2
   14008:	beq	14034 <_start@@Base+0xd24>
   1400c:	cmp	r3, #8
   14010:	bne	1402c <_start@@Base+0xd1c>
   14014:	mov	r2, #2
   14018:	mov	r1, r2
   1401c:	b	23fec <flatcc_verify_union_struct@@Base>
   14020:	mov	r2, #4
   14024:	mov	r1, r2
   14028:	b	23fec <flatcc_verify_union_struct@@Base>
   1402c:	mov	r0, #0
   14030:	bx	lr
   14034:	ldr	r1, [pc]	; 1403c <_start@@Base+0xd2c>
   14038:	b	23ef4 <flatcc_verify_union_table@@Base>
   1403c:	andeq	r3, r1, r8, lsr r4
   14040:	push	{lr}		; (str lr, [sp, #-4]!)
   14044:	vpush	{d8-d9}
   14048:	vsub.f64	d8, d1, d0
   1404c:	vldr	d9, [pc, #276]	; 14168 <_start@@Base+0xe58>
   14050:	sub	sp, sp, #12
   14054:	str	r1, [sp, #4]
   14058:	mov	r1, r0
   1405c:	ldr	r0, [pc, #292]	; 14188 <_start@@Base+0xe78>
   14060:	bl	1299c <printf@plt>
   14064:	vmov	r2, r3, d8
   14068:	ldr	r0, [pc, #284]	; 1418c <_start@@Base+0xe7c>
   1406c:	bl	1299c <printf@plt>
   14070:	ldr	r1, [pc, #280]	; 14190 <_start@@Base+0xe80>
   14074:	ldr	r0, [pc, #280]	; 14194 <_start@@Base+0xe84>
   14078:	bl	1299c <printf@plt>
   1407c:	ldr	r1, [sp, #4]
   14080:	ldr	r0, [pc, #272]	; 14198 <_start@@Base+0xe88>
   14084:	bl	1299c <printf@plt>
   14088:	vldr	s15, [sp, #4]
   1408c:	ldr	r0, [pc, #264]	; 1419c <_start@@Base+0xe8c>
   14090:	vcvt.f64.u32	d7, s15
   14094:	vmul.f64	d7, d7, d9
   14098:	vdiv.f64	d6, d7, d9
   1409c:	vdiv.f64	d7, d6, d8
   140a0:	vmov	r2, r3, d7
   140a4:	bl	1299c <printf@plt>
   140a8:	vdiv.f64	d7, d9, d8
   140ac:	ldr	r0, [pc, #236]	; 141a0 <_start@@Base+0xe90>
   140b0:	vmov	r2, r3, d7
   140b4:	bl	1299c <printf@plt>
   140b8:	vldr	d7, [pc, #176]	; 14170 <_start@@Base+0xe60>
   140bc:	ldr	r1, [pc, #224]	; 141a4 <_start@@Base+0xe94>
   140c0:	ldr	r0, [pc, #224]	; 141a8 <_start@@Base+0xe98>
   140c4:	vdiv.f64	d6, d7, d8
   140c8:	vmov	r2, r3, d6
   140cc:	bl	1299c <printf@plt>
   140d0:	vldr	d6, [pc, #160]	; 14178 <_start@@Base+0xe68>
   140d4:	vldr	d5, [pc, #164]	; 14180 <_start@@Base+0xe70>
   140d8:	vmul.f64	d8, d8, d6
   140dc:	vdiv.f64	d7, d8, d9
   140e0:	vcmpe.f64	d7, d5
   140e4:	vmrs	APSR_nzcv, fpscr
   140e8:	bmi	1412c <_start@@Base+0xe1c>
   140ec:	vcmpe.f64	d7, d9
   140f0:	vmrs	APSR_nzcv, fpscr
   140f4:	bmi	14148 <_start@@Base+0xe38>
   140f8:	vcmpe.f64	d7, d6
   140fc:	vmrs	APSR_nzcv, fpscr
   14100:	vdivmi.f64	d6, d7, d9
   14104:	ldrmi	r0, [pc, #160]	; 141ac <_start@@Base+0xe9c>
   14108:	ldrpl	r0, [pc, #160]	; 141b0 <_start@@Base+0xea0>
   1410c:	vdivpl.f64	d5, d7, d6
   14110:	vmovmi	r2, r3, d6
   14114:	vmovpl	r2, r3, d5
   14118:	bl	1299c <printf@plt>
   1411c:	mov	r0, #0
   14120:	add	sp, sp, #12
   14124:	vpop	{d8-d9}
   14128:	pop	{pc}		; (ldr pc, [sp], #4)
   1412c:	vmov	r2, r3, d7
   14130:	ldr	r0, [pc, #124]	; 141b4 <_start@@Base+0xea4>
   14134:	bl	1299c <printf@plt>
   14138:	mov	r0, #0
   1413c:	add	sp, sp, #12
   14140:	vpop	{d8-d9}
   14144:	pop	{pc}		; (ldr pc, [sp], #4)
   14148:	vdiv.f64	d6, d7, d5
   1414c:	ldr	r0, [pc, #100]	; 141b8 <_start@@Base+0xea8>
   14150:	vmov	r2, r3, d6
   14154:	bl	1299c <printf@plt>
   14158:	mov	r0, #0
   1415c:	add	sp, sp, #12
   14160:	vpop	{d8-d9}
   14164:	pop	{pc}		; (ldr pc, [sp], #4)
   14168:	andeq	r0, r0, r0
   1416c:	smlawbmi	lr, r0, r4, r8
   14170:	andeq	r0, r0, r0
   14174:	svccc	0x00f00000	; IMB
   14178:	andeq	r0, r0, r0
   1417c:	bicmi	ip, sp, r5, ror #26
   14180:	andeq	r0, r0, r0
   14184:	addmi	r4, pc, r0
   14188:	ldrdeq	r5, [r2], -r8
   1418c:	andeq	r5, r2, r8, ror #19
   14190:	andeq	r4, pc, r0, asr #4
   14194:	andeq	r5, r2, r0, lsl #20
   14198:	andeq	r5, r2, r0, lsl sl
   1419c:	andeq	r5, r2, r4, lsr #20
   141a0:	andeq	r5, r2, ip, lsr sl
   141a4:	andeq	r5, r2, r0, ror #20
   141a8:	andeq	r5, r2, r8, ror #20
   141ac:			; <UNDEFINED> instruction: 0x00025abc
   141b0:	ldrdeq	r5, [r2], -r4
   141b4:	andeq	r5, r2, ip, lsl #21
   141b8:	andeq	r5, r2, r4, lsr #21
   141bc:	mov	r0, #0
   141c0:	bx	lr
   141c4:	mov	r0, #0
   141c8:	bx	lr
   141cc:	mov	r3, #8
   141d0:	push	{r4, lr}
   141d4:	mov	r2, r3
   141d8:	mov	r1, #0
   141dc:	mov	r4, r0
   141e0:	bl	236a8 <flatcc_verify_field@@Base>
   141e4:	cmp	r0, #0
   141e8:	popne	{r4, pc}
   141ec:	mov	r3, #4
   141f0:	mov	r0, r4
   141f4:	mov	r2, r3
   141f8:	mov	r1, #1
   141fc:	pop	{r4, lr}
   14200:	b	236a8 <flatcc_verify_field@@Base>
   14204:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14208:	subs	r7, r0, #0
   1420c:	beq	1438c <_start@@Base+0x107c>
   14210:	ldr	r4, [r7, #-4]
   14214:	cmp	r4, #0
   14218:	beq	1439c <_start@@Base+0x108c>
   1421c:	ldr	r3, [r7]
   14220:	mov	r5, r1
   14224:	adds	r2, r7, r3
   14228:	beq	14398 <_start@@Base+0x1088>
   1422c:	ldr	r3, [r7, r3]
   14230:	sub	r3, r2, r3
   14234:	ldrh	r1, [r3]
   14238:	cmp	r1, #11
   1423c:	bls	142b4 <_start@@Base+0xfa4>
   14240:	ldrh	r0, [r3, #10]
   14244:	cmp	r0, #0
   14248:	beq	142b4 <_start@@Base+0xfa4>
   1424c:	add	r9, r7, #4
   14250:	mov	r8, #0
   14254:	ldr	r3, [r2, r0]
   14258:	add	r0, r2, r0
   1425c:	add	r3, r3, #4
   14260:	add	r0, r0, r3
   14264:	mov	r1, r5
   14268:	bl	12990 <strcmp@plt>
   1426c:	cmp	r0, #0
   14270:	beq	142c8 <_start@@Base+0xfb8>
   14274:	add	r8, r8, #1
   14278:	cmp	r8, r4
   1427c:	beq	1438c <_start@@Base+0x107c>
   14280:	mov	r3, r9
   14284:	add	r9, r9, #4
   14288:	ldr	r1, [r3]
   1428c:	adds	r2, r3, r1
   14290:	beq	14398 <_start@@Base+0x1088>
   14294:	ldr	r3, [r3, r1]
   14298:	sub	r3, r2, r3
   1429c:	ldrh	r1, [r3]
   142a0:	cmp	r1, #11
   142a4:	bls	142b4 <_start@@Base+0xfa4>
   142a8:	ldrh	r0, [r3, #10]
   142ac:	cmp	r0, #0
   142b0:	bne	14254 <_start@@Base+0xf44>
   142b4:	ldr	r3, [pc, #232]	; 143a4 <_start@@Base+0x1094>
   142b8:	ldr	r2, [pc, #232]	; 143a8 <_start@@Base+0x1098>
   142bc:	ldr	r1, [pc, #232]	; 143ac <_start@@Base+0x109c>
   142c0:	ldr	r0, [pc, #232]	; 143b0 <_start@@Base+0x10a0>
   142c4:	bl	12a8c <__assert_fail@plt>
   142c8:	mov	r6, r0
   142cc:	add	r8, r8, #1
   142d0:	cmp	r8, r4
   142d4:	add	r6, r6, #1
   142d8:	bcs	14384 <_start@@Base+0x1074>
   142dc:	lsl	r9, r8, #2
   142e0:	ldr	r3, [r7, r8, lsl #2]
   142e4:	add	r1, r7, r9
   142e8:	adds	r2, r1, r3
   142ec:	beq	14398 <_start@@Base+0x1088>
   142f0:	ldr	r3, [r1, r3]
   142f4:	sub	r3, r2, r3
   142f8:	ldrh	r1, [r3]
   142fc:	cmp	r1, #11
   14300:	bls	142b4 <_start@@Base+0xfa4>
   14304:	ldrh	r0, [r3, #10]
   14308:	cmp	r0, #0
   1430c:	beq	142b4 <_start@@Base+0xfa4>
   14310:	add	r9, r9, #4
   14314:	add	r9, r7, r9
   14318:	ldr	r3, [r2, r0]
   1431c:	add	r0, r2, r0
   14320:	add	r3, r3, #4
   14324:	add	r0, r0, r3
   14328:	mov	r1, r5
   1432c:	bl	12990 <strcmp@plt>
   14330:	cmp	r0, #0
   14334:	beq	1437c <_start@@Base+0x106c>
   14338:	add	r8, r8, #1
   1433c:	cmp	r8, r4
   14340:	bcs	14384 <_start@@Base+0x1074>
   14344:	mov	r3, r9
   14348:	add	r9, r9, #4
   1434c:	ldr	r1, [r3]
   14350:	adds	r2, r3, r1
   14354:	beq	14398 <_start@@Base+0x1088>
   14358:	ldr	r3, [r3, r1]
   1435c:	sub	r3, r2, r3
   14360:	ldrh	r1, [r3]
   14364:	cmp	r1, #11
   14368:	bls	142b4 <_start@@Base+0xfa4>
   1436c:	ldrh	r0, [r3, #10]
   14370:	cmp	r0, #0
   14374:	bne	14318 <_start@@Base+0x1008>
   14378:	b	142b4 <_start@@Base+0xfa4>
   1437c:	cmn	r8, #1
   14380:	bne	142cc <_start@@Base+0xfbc>
   14384:	mov	r0, r6
   14388:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1438c:	mov	r6, #0
   14390:	mov	r0, r6
   14394:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14398:	bl	12d04 <__assert_fail@plt+0x278>
   1439c:	mov	r6, r4
   143a0:	b	14384 <_start@@Base+0x1074>
   143a4:	andeq	r5, r2, r0, lsl #4
   143a8:			; <UNDEFINED> instruction: 0x000002bb
   143ac:	andeq	r5, r2, r4, asr #13
   143b0:	strdeq	r5, [r2], -r0
   143b4:	cmp	r0, #0
   143b8:	beq	14460 <_start@@Base+0x1150>
   143bc:	push	{r4, r5, r6, r7, r8, lr}
   143c0:	mov	r4, r1
   143c4:	ldr	r6, [r0, #-4]
   143c8:	mov	r7, r3
   143cc:	cmp	r2, r6
   143d0:	add	r8, r0, r1, lsl #2
   143d4:	movcc	r5, r2
   143d8:	movcs	r5, r6
   143dc:	cmp	r4, r5
   143e0:	bcs	14480 <_start@@Base+0x1170>
   143e4:	cmp	r4, r6
   143e8:	mov	r3, r8
   143ec:	bcs	14468 <_start@@Base+0x1158>
   143f0:	ldr	r2, [r8]
   143f4:	add	r8, r8, #4
   143f8:	adds	r0, r3, r2
   143fc:	beq	1447c <_start@@Base+0x116c>
   14400:	ldr	r3, [r3, r2]
   14404:	sub	r3, r0, r3
   14408:	ldrh	r2, [r3]
   1440c:	cmp	r2, #11
   14410:	bhi	14428 <_start@@Base+0x1118>
   14414:	ldr	r3, [pc, #108]	; 14488 <_start@@Base+0x1178>
   14418:	ldr	r2, [pc, #108]	; 1448c <_start@@Base+0x117c>
   1441c:	ldr	r1, [pc, #108]	; 14490 <_start@@Base+0x1180>
   14420:	ldr	r0, [pc, #108]	; 14494 <_start@@Base+0x1184>
   14424:	bl	12a8c <__assert_fail@plt>
   14428:	ldrh	r2, [r3, #10]
   1442c:	cmp	r2, #0
   14430:	beq	14414 <_start@@Base+0x1104>
   14434:	ldr	r3, [r0, r2]
   14438:	add	r0, r0, r2
   1443c:	add	r3, r3, #4
   14440:	add	r0, r0, r3
   14444:	mov	r1, r7
   14448:	bl	12990 <strcmp@plt>
   1444c:	cmp	r0, #0
   14450:	addne	r4, r4, #1
   14454:	bne	143dc <_start@@Base+0x10cc>
   14458:	mov	r0, r4
   1445c:	pop	{r4, r5, r6, r7, r8, pc}
   14460:	mvn	r0, #0
   14464:	bx	lr
   14468:	ldr	r3, [pc, #40]	; 14498 <_start@@Base+0x1188>
   1446c:	ldr	r2, [pc, #40]	; 1449c <_start@@Base+0x118c>
   14470:	ldr	r1, [pc, #24]	; 14490 <_start@@Base+0x1180>
   14474:	ldr	r0, [pc, #36]	; 144a0 <_start@@Base+0x1190>
   14478:	bl	12a8c <__assert_fail@plt>
   1447c:	bl	12d04 <__assert_fail@plt+0x278>
   14480:	mvn	r0, #0
   14484:	pop	{r4, r5, r6, r7, r8, pc}
   14488:	andeq	r5, r2, r0, lsl #4
   1448c:			; <UNDEFINED> instruction: 0x000002bb
   14490:	andeq	r5, r2, r4, asr #13
   14494:	strdeq	r5, [r2], -r0
   14498:	andeq	r5, r2, r0, lsr #3
   1449c:			; <UNDEFINED> instruction: 0x000002b5
   144a0:			; <UNDEFINED> instruction: 0x000257b8
   144a4:	cmp	r0, #0
   144a8:	push	{r4, r5, r6, r7, r8, lr}
   144ac:	beq	14558 <_start@@Base+0x1248>
   144b0:	ldr	r6, [r0, #-4]
   144b4:	mov	r5, r3
   144b8:	cmp	r2, r6
   144bc:	movcc	r3, r2
   144c0:	movcs	r3, r6
   144c4:	sub	r7, r3, #-1073741823	; 0xc0000001
   144c8:	mov	r4, r1
   144cc:	add	r7, r0, r7, lsl #2
   144d0:	cmp	r3, r4
   144d4:	sub	r8, r3, #1
   144d8:	bls	14558 <_start@@Base+0x1248>
   144dc:	cmp	r8, r6
   144e0:	mov	r2, r7
   144e4:	bcs	14568 <_start@@Base+0x1258>
   144e8:	ldr	r3, [r7]
   144ec:	sub	r7, r7, #4
   144f0:	adds	r0, r2, r3
   144f4:	beq	14564 <_start@@Base+0x1254>
   144f8:	ldr	r2, [r2, r3]
   144fc:	sub	r2, r0, r2
   14500:	ldrh	r3, [r2]
   14504:	cmp	r3, #11
   14508:	bhi	14520 <_start@@Base+0x1210>
   1450c:	ldr	r3, [pc, #104]	; 1457c <_start@@Base+0x126c>
   14510:	ldr	r2, [pc, #104]	; 14580 <_start@@Base+0x1270>
   14514:	ldr	r1, [pc, #104]	; 14584 <_start@@Base+0x1274>
   14518:	ldr	r0, [pc, #104]	; 14588 <_start@@Base+0x1278>
   1451c:	bl	12a8c <__assert_fail@plt>
   14520:	ldrh	r2, [r2, #10]
   14524:	cmp	r2, #0
   14528:	beq	1450c <_start@@Base+0x11fc>
   1452c:	ldr	r3, [r0, r2]
   14530:	add	r0, r0, r2
   14534:	add	r3, r3, #4
   14538:	add	r0, r0, r3
   1453c:	mov	r1, r5
   14540:	bl	12990 <strcmp@plt>
   14544:	mov	r3, r8
   14548:	cmp	r0, #0
   1454c:	bne	144d0 <_start@@Base+0x11c0>
   14550:	mov	r0, r8
   14554:	pop	{r4, r5, r6, r7, r8, pc}
   14558:	mvn	r8, #0
   1455c:	mov	r0, r8
   14560:	pop	{r4, r5, r6, r7, r8, pc}
   14564:	bl	12d04 <__assert_fail@plt+0x278>
   14568:	ldr	r3, [pc, #28]	; 1458c <_start@@Base+0x127c>
   1456c:	ldr	r2, [pc, #28]	; 14590 <_start@@Base+0x1280>
   14570:	ldr	r1, [pc, #12]	; 14584 <_start@@Base+0x1274>
   14574:	ldr	r0, [pc, #24]	; 14594 <_start@@Base+0x1284>
   14578:	bl	12a8c <__assert_fail@plt>
   1457c:	andeq	r5, r2, r0, lsl #4
   14580:			; <UNDEFINED> instruction: 0x000002bb
   14584:	andeq	r5, r2, r4, asr #13
   14588:	strdeq	r5, [r2], -r0
   1458c:	andeq	r5, r2, r0, lsr #3
   14590:			; <UNDEFINED> instruction: 0x000002b5
   14594:			; <UNDEFINED> instruction: 0x000257b8
   14598:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1459c:	subs	r9, r0, #0
   145a0:	beq	1468c <_start@@Base+0x137c>
   145a4:	ldr	r6, [r9, #-4]
   145a8:	cmp	r6, #0
   145ac:	beq	1468c <_start@@Base+0x137c>
   145b0:	mov	r7, r1
   145b4:	sub	r8, r6, #1
   145b8:	mov	r5, #0
   145bc:	cmp	r5, r8
   145c0:	bcs	14680 <_start@@Base+0x1370>
   145c4:	sub	r4, r8, r5
   145c8:	add	r4, r5, r4, lsr #1
   145cc:	cmp	r6, r4
   145d0:	add	r2, r9, r4, lsl #2
   145d4:	bls	14700 <_start@@Base+0x13f0>
   145d8:	ldr	r3, [r9, r4, lsl #2]
   145dc:	adds	r1, r2, r3
   145e0:	beq	146fc <_start@@Base+0x13ec>
   145e4:	ldr	r2, [r2, r3]
   145e8:	sub	r2, r1, r2
   145ec:	ldrh	r3, [r2]
   145f0:	cmp	r3, #11
   145f4:	bhi	14604 <_start@@Base+0x12f4>
   145f8:	b	1466c <_start@@Base+0x135c>
   145fc:	mov	r8, r4
   14600:	mov	r4, r3
   14604:	ldrh	r0, [r2, #10]
   14608:	cmp	r0, #0
   1460c:	beq	1466c <_start@@Base+0x135c>
   14610:	ldr	r3, [r1, r0]
   14614:	add	r0, r1, r0
   14618:	add	r3, r3, #4
   1461c:	add	r0, r0, r3
   14620:	mov	r1, r7
   14624:	bl	12990 <strcmp@plt>
   14628:	cmp	r0, #0
   1462c:	blt	14698 <_start@@Base+0x1388>
   14630:	cmp	r5, r4
   14634:	bcs	14684 <_start@@Base+0x1374>
   14638:	sub	r3, r4, r5
   1463c:	add	r3, r5, r3, lsr #1
   14640:	cmp	r3, r6
   14644:	add	r0, r9, r3, lsl #2
   14648:	bcs	14700 <_start@@Base+0x13f0>
   1464c:	ldr	r2, [r9, r3, lsl #2]
   14650:	adds	r1, r0, r2
   14654:	beq	146fc <_start@@Base+0x13ec>
   14658:	ldr	r2, [r0, r2]
   1465c:	sub	r2, r1, r2
   14660:	ldrh	r0, [r2]
   14664:	cmp	r0, #11
   14668:	bhi	145fc <_start@@Base+0x12ec>
   1466c:	ldr	r3, [pc, #164]	; 14718 <_start@@Base+0x1408>
   14670:	ldr	r2, [pc, #164]	; 1471c <_start@@Base+0x140c>
   14674:	ldr	r1, [pc, #164]	; 14720 <_start@@Base+0x1410>
   14678:	ldr	r0, [pc, #164]	; 14724 <_start@@Base+0x1414>
   1467c:	bl	12a8c <__assert_fail@plt>
   14680:	mov	r4, r8
   14684:	cmp	r5, r4
   14688:	beq	146a0 <_start@@Base+0x1390>
   1468c:	mvn	r5, #0
   14690:	mov	r0, r5
   14694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14698:	add	r5, r4, #1
   1469c:	b	145bc <_start@@Base+0x12ac>
   146a0:	cmp	r5, r6
   146a4:	add	r1, r9, r5, lsl #2
   146a8:	bcs	14714 <_start@@Base+0x1404>
   146ac:	ldr	r2, [r9, r5, lsl #2]
   146b0:	adds	r3, r1, r2
   146b4:	beq	146fc <_start@@Base+0x13ec>
   146b8:	ldr	r2, [r1, r2]
   146bc:	sub	r2, r3, r2
   146c0:	ldrh	r1, [r2]
   146c4:	cmp	r1, #11
   146c8:	bls	1466c <_start@@Base+0x135c>
   146cc:	ldrh	r2, [r2, #10]
   146d0:	cmp	r2, #0
   146d4:	beq	1466c <_start@@Base+0x135c>
   146d8:	ldr	r0, [r3, r2]
   146dc:	add	r3, r3, r2
   146e0:	add	r0, r0, #4
   146e4:	mov	r1, r7
   146e8:	add	r0, r3, r0
   146ec:	bl	12990 <strcmp@plt>
   146f0:	cmp	r0, #0
   146f4:	bne	1468c <_start@@Base+0x137c>
   146f8:	b	14690 <_start@@Base+0x1380>
   146fc:	bl	12d04 <__assert_fail@plt+0x278>
   14700:	ldr	r3, [pc, #32]	; 14728 <_start@@Base+0x1418>
   14704:	ldr	r2, [pc, #32]	; 1472c <_start@@Base+0x141c>
   14708:	ldr	r1, [pc, #16]	; 14720 <_start@@Base+0x1410>
   1470c:	ldr	r0, [pc, #28]	; 14730 <_start@@Base+0x1420>
   14710:	bl	12a8c <__assert_fail@plt>
   14714:	bl	13594 <_start@@Base+0x284>
   14718:	andeq	r5, r2, r0, lsl #4
   1471c:			; <UNDEFINED> instruction: 0x000002bb
   14720:	andeq	r5, r2, r4, asr #13
   14724:	strdeq	r5, [r2], -r0
   14728:	andeq	r5, r2, r0, lsr #3
   1472c:			; <UNDEFINED> instruction: 0x000002b5
   14730:			; <UNDEFINED> instruction: 0x000257b8

00014734 <verify_empty_monster@@Base>:
   14734:	cmp	r0, #0
   14738:	push	{r4, lr}
   1473c:	beq	14750 <verify_empty_monster@@Base+0x1c>
   14740:	ldr	r2, [r0, #4]
   14744:	ldr	r3, [pc, #152]	; 147e4 <verify_empty_monster@@Base+0xb0>
   14748:	cmp	r2, r3
   1474c:	beq	14760 <verify_empty_monster@@Base+0x2c>
   14750:	ldr	r0, [pc, #144]	; 147e8 <verify_empty_monster@@Base+0xb4>
   14754:	bl	129f0 <puts@plt>
   14758:	mvn	r0, #0
   1475c:	pop	{r4, pc}
   14760:	ldr	r3, [r0]
   14764:	adds	r0, r0, r3
   14768:	beq	14750 <verify_empty_monster@@Base+0x1c>
   1476c:	ldr	r3, [r0]
   14770:	sub	r3, r0, r3
   14774:	ldrh	r2, [r3]
   14778:	cmp	r2, #9
   1477c:	bls	147a8 <verify_empty_monster@@Base+0x74>
   14780:	ldrh	r2, [r3, #8]
   14784:	cmp	r2, #0
   14788:	beq	147b8 <verify_empty_monster@@Base+0x84>
   1478c:	ldrsh	r3, [r0, r2]
   14790:	cmp	r3, #100	; 0x64
   14794:	bne	147d4 <verify_empty_monster@@Base+0xa0>
   14798:	ldr	r0, [pc, #76]	; 147ec <verify_empty_monster@@Base+0xb8>
   1479c:	bl	129f0 <puts@plt>
   147a0:	mvn	r0, #0
   147a4:	pop	{r4, pc}
   147a8:	cmp	r2, #5
   147ac:	bhi	147b8 <verify_empty_monster@@Base+0x84>
   147b0:	mov	r0, #0
   147b4:	pop	{r4, pc}
   147b8:	ldrh	r0, [r3, #4]
   147bc:	cmp	r0, #0
   147c0:	popeq	{r4, pc}
   147c4:	ldr	r0, [pc, #36]	; 147f0 <verify_empty_monster@@Base+0xbc>
   147c8:	bl	129f0 <puts@plt>
   147cc:	mvn	r0, #0
   147d0:	pop	{r4, pc}
   147d4:	ldr	r0, [pc, #24]	; 147f4 <verify_empty_monster@@Base+0xc0>
   147d8:	bl	129f0 <puts@plt>
   147dc:	mvn	r0, #0
   147e0:	pop	{r4, pc}
   147e4:	movtpl	r4, #61261	; 0xef4d
   147e8:	andeq	r5, r2, ip, ror #21
   147ec:			; <UNDEFINED> instruction: 0x00025bb0
   147f0:	muleq	r2, r4, fp
   147f4:	andeq	r5, r2, r0, ror fp

000147f8 <test_enums@@Base>:
   147f8:	mov	r0, #0
   147fc:	bx	lr

00014800 <test_type_aliases@@Base>:
   14800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14804:	sub	sp, sp, #16
   14808:	mov	r4, r0
   1480c:	mvn	r6, #0
   14810:	bl	1de88 <flatcc_builder_reset@@Base>
   14814:	mov	r3, #1
   14818:	mov	r2, #0
   1481c:	mov	r1, r2
   14820:	stm	sp, {r3, r6}
   14824:	mov	r0, r4
   14828:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1482c:	mov	r5, #8
   14830:	mov	r2, #0
   14834:	mvn	r3, #-536870912	; 0xe0000000
   14838:	mov	r1, r2
   1483c:	str	r3, [sp, #4]
   14840:	str	r5, [sp]
   14844:	mov	r3, r5
   14848:	mov	r7, r0
   1484c:	mov	r0, r4
   14850:	bl	20fcc <flatcc_builder_create_vector@@Base>
   14854:	mov	r3, #0
   14858:	mov	r2, r3
   1485c:	ldr	r1, [pc, #1080]	; 14c9c <test_type_aliases@@Base+0x49c>
   14860:	mov	r8, r0
   14864:	mov	r0, r4
   14868:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1486c:	cmp	r0, #0
   14870:	beq	14a54 <test_type_aliases@@Base+0x254>
   14874:	mov	r0, r4
   14878:	add	r1, sp, #12
   1487c:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   14880:	ldr	r3, [pc, #1048]	; 14ca0 <test_type_aliases@@Base+0x4a0>
   14884:	ldr	r2, [pc, #1040]	; 14c9c <test_type_aliases@@Base+0x49c>
   14888:	ldr	r1, [sp, #12]
   1488c:	mov	r4, r0
   14890:	bl	243ac <flatcc_verify_table_as_root@@Base>
   14894:	subs	r5, r0, #0
   14898:	bne	14c4c <test_type_aliases@@Base+0x44c>
   1489c:	cmp	r4, #0
   148a0:	beq	148b4 <test_type_aliases@@Base+0xb4>
   148a4:	ldr	r3, [pc, #1016]	; 14ca4 <test_type_aliases@@Base+0x4a4>
   148a8:	ldr	r2, [r4, #4]
   148ac:	cmp	r2, r3
   148b0:	beq	148c8 <test_type_aliases@@Base+0xc8>
   148b4:	ldr	r3, [pc, #1004]	; 14ca8 <test_type_aliases@@Base+0x4a8>
   148b8:	ldr	r2, [pc, #1004]	; 14cac <test_type_aliases@@Base+0x4ac>
   148bc:	ldr	r1, [pc, #1004]	; 14cb0 <test_type_aliases@@Base+0x4b0>
   148c0:	ldr	r0, [pc, #1004]	; 14cb4 <test_type_aliases@@Base+0x4b4>
   148c4:	bl	12a8c <__assert_fail@plt>
   148c8:	ldr	r3, [r4]
   148cc:	adds	ip, r4, r3
   148d0:	beq	148b4 <test_type_aliases@@Base+0xb4>
   148d4:	ldr	r3, [r4, r3]
   148d8:	sub	r3, ip, r3
   148dc:	ldrh	r2, [r3]
   148e0:	cmp	r2, #5
   148e4:	bls	14a34 <test_type_aliases@@Base+0x234>
   148e8:	ldrh	r1, [r3, #4]
   148ec:	cmp	r1, #0
   148f0:	beq	14a34 <test_type_aliases@@Base+0x234>
   148f4:	ldrsb	r1, [ip, r1]
   148f8:	cmn	r1, #128	; 0x80
   148fc:	bne	14a34 <test_type_aliases@@Base+0x234>
   14900:	cmp	r2, #9
   14904:	bls	14a34 <test_type_aliases@@Base+0x234>
   14908:	ldrh	r1, [r3, #8]
   1490c:	cmp	r1, #0
   14910:	beq	14a34 <test_type_aliases@@Base+0x234>
   14914:	ldrsh	r1, [ip, r1]
   14918:	cmn	r1, #32768	; 0x8000
   1491c:	bne	14a34 <test_type_aliases@@Base+0x234>
   14920:	cmp	r2, #13
   14924:	bls	14a34 <test_type_aliases@@Base+0x234>
   14928:	ldrh	r1, [r3, #12]
   1492c:	cmp	r1, #0
   14930:	beq	14a34 <test_type_aliases@@Base+0x234>
   14934:	ldr	r1, [ip, r1]
   14938:	cmp	r1, #-2147483648	; 0x80000000
   1493c:	bne	14a34 <test_type_aliases@@Base+0x234>
   14940:	cmp	r2, #17
   14944:	bls	14a34 <test_type_aliases@@Base+0x234>
   14948:	ldrh	r1, [r3, #16]
   1494c:	cmp	r1, #0
   14950:	beq	14a34 <test_type_aliases@@Base+0x234>
   14954:	ldrd	r0, [r1, ip]
   14958:	cmp	r1, #-2147483648	; 0x80000000
   1495c:	cmpeq	r0, #0
   14960:	bne	14a34 <test_type_aliases@@Base+0x234>
   14964:	ldrh	r1, [r3, #6]
   14968:	cmp	r1, #0
   1496c:	beq	14a34 <test_type_aliases@@Base+0x234>
   14970:	ldrb	r1, [ip, r1]
   14974:	cmp	r1, #255	; 0xff
   14978:	bne	14a34 <test_type_aliases@@Base+0x234>
   1497c:	ldrh	r1, [r3, #10]
   14980:	cmp	r1, #0
   14984:	beq	14a34 <test_type_aliases@@Base+0x234>
   14988:	ldrh	r0, [ip, r1]
   1498c:	ldr	r1, [pc, #804]	; 14cb8 <test_type_aliases@@Base+0x4b8>
   14990:	cmp	r0, r1
   14994:	bne	14a34 <test_type_aliases@@Base+0x234>
   14998:	ldrh	r1, [r3, #14]
   1499c:	cmp	r1, #0
   149a0:	beq	14a34 <test_type_aliases@@Base+0x234>
   149a4:	ldr	r1, [ip, r1]
   149a8:	cmn	r1, #1
   149ac:	bne	14a34 <test_type_aliases@@Base+0x234>
   149b0:	cmp	r2, #19
   149b4:	bls	14a34 <test_type_aliases@@Base+0x234>
   149b8:	ldrh	r1, [r3, #18]
   149bc:	cmp	r1, #0
   149c0:	beq	14a34 <test_type_aliases@@Base+0x234>
   149c4:	ldrd	r6, [ip, r1]
   149c8:	mvn	r1, #0
   149cc:	mvn	r0, #0
   149d0:	cmp	r7, r1
   149d4:	cmpeq	r6, r0
   149d8:	bne	14a34 <test_type_aliases@@Base+0x234>
   149dc:	cmp	r2, #21
   149e0:	bls	14a34 <test_type_aliases@@Base+0x234>
   149e4:	ldrh	r1, [r3, #20]
   149e8:	cmp	r1, #0
   149ec:	beq	14a34 <test_type_aliases@@Base+0x234>
   149f0:	add	r1, ip, r1
   149f4:	vldr	s15, [pc, #668]	; 14c98 <test_type_aliases@@Base+0x498>
   149f8:	vldr	s14, [r1]
   149fc:	vcmp.f32	s14, s15
   14a00:	vmrs	APSR_nzcv, fpscr
   14a04:	bne	14a34 <test_type_aliases@@Base+0x234>
   14a08:	cmp	r2, #23
   14a0c:	bls	14a34 <test_type_aliases@@Base+0x234>
   14a10:	ldrh	r3, [r3, #22]
   14a14:	cmp	r3, #0
   14a18:	beq	14a34 <test_type_aliases@@Base+0x234>
   14a1c:	add	ip, ip, r3
   14a20:	vldr	d7, [pc, #616]	; 14c90 <test_type_aliases@@Base+0x490>
   14a24:	vldr	d6, [ip]
   14a28:	vcmp.f64	d6, d7
   14a2c:	vmrs	APSR_nzcv, fpscr
   14a30:	beq	14a40 <test_type_aliases@@Base+0x240>
   14a34:	ldr	r0, [pc, #640]	; 14cbc <test_type_aliases@@Base+0x4bc>
   14a38:	bl	129f0 <puts@plt>
   14a3c:	mvn	r5, #0
   14a40:	mov	r0, r4
   14a44:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   14a48:	mov	r0, r5
   14a4c:	add	sp, sp, #16
   14a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a54:	mov	r1, #12
   14a58:	mov	r0, r4
   14a5c:	bl	203cc <flatcc_builder_start_table@@Base>
   14a60:	cmp	r0, #0
   14a64:	bne	14c3c <test_type_aliases@@Base+0x43c>
   14a68:	mov	r3, r5
   14a6c:	mov	r2, r5
   14a70:	mov	r1, #6
   14a74:	mov	r0, r4
   14a78:	bl	22538 <flatcc_builder_table_add@@Base>
   14a7c:	cmp	r0, #0
   14a80:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14a84:	mov	sl, #0
   14a88:	mov	fp, #-2147483648	; 0x80000000
   14a8c:	mov	r3, r5
   14a90:	strd	sl, [r0]
   14a94:	mov	r2, r5
   14a98:	mov	r1, #7
   14a9c:	mov	r0, r4
   14aa0:	bl	22538 <flatcc_builder_table_add@@Base>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14aac:	mvn	sl, #0
   14ab0:	mvn	fp, #0
   14ab4:	mov	r3, r5
   14ab8:	strd	sl, [r0]
   14abc:	mov	r2, r5
   14ac0:	mov	r1, #9
   14ac4:	mov	r0, r4
   14ac8:	bl	22538 <flatcc_builder_table_add@@Base>
   14acc:	cmp	r0, #0
   14ad0:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14ad4:	ldr	sl, [pc, #484]	; 14cc0 <test_type_aliases@@Base+0x4c0>
   14ad8:	ldr	fp, [pc, #484]	; 14cc4 <test_type_aliases@@Base+0x4c4>
   14adc:	mov	r3, #4
   14ae0:	mov	r2, r3
   14ae4:	strd	sl, [r0]
   14ae8:	mov	r1, r3
   14aec:	mov	r0, r4
   14af0:	bl	22538 <flatcc_builder_table_add@@Base>
   14af4:	cmp	r0, #0
   14af8:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14afc:	mov	r2, #-2147483648	; 0x80000000
   14b00:	mov	r3, #4
   14b04:	str	r2, [r0]
   14b08:	mov	r1, #5
   14b0c:	mov	r2, r3
   14b10:	mov	r0, r4
   14b14:	bl	22538 <flatcc_builder_table_add@@Base>
   14b18:	cmp	r0, #0
   14b1c:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14b20:	mov	r3, #4
   14b24:	str	r6, [r0]
   14b28:	mov	r1, r5
   14b2c:	mov	r2, r3
   14b30:	mov	r0, r4
   14b34:	bl	22538 <flatcc_builder_table_add@@Base>
   14b38:	cmp	r0, #0
   14b3c:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14b40:	ldr	r3, [pc, #384]	; 14cc8 <test_type_aliases@@Base+0x4c8>
   14b44:	cmp	r7, #0
   14b48:	str	r3, [r0]
   14b4c:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14b50:	mov	r1, #10
   14b54:	mov	r0, r4
   14b58:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   14b5c:	cmp	r0, #0
   14b60:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14b64:	cmp	r8, #0
   14b68:	str	r7, [r0]
   14b6c:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14b70:	mov	r1, #11
   14b74:	mov	r0, r4
   14b78:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   14b7c:	cmp	r0, #0
   14b80:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14b84:	mov	r3, #2
   14b88:	str	r8, [r0]
   14b8c:	mov	r2, r3
   14b90:	mov	r1, r3
   14b94:	mov	r0, r4
   14b98:	bl	22538 <flatcc_builder_table_add@@Base>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14ba4:	mov	r2, #32768	; 0x8000
   14ba8:	mov	r3, #2
   14bac:	strh	r2, [r0]
   14bb0:	mov	r1, #3
   14bb4:	mov	r2, r3
   14bb8:	mov	r0, r4
   14bbc:	bl	22538 <flatcc_builder_table_add@@Base>
   14bc0:	cmp	r0, #0
   14bc4:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14bc8:	mov	r3, #1
   14bcc:	mvn	r5, #0
   14bd0:	strh	r5, [r0]
   14bd4:	mov	r2, r3
   14bd8:	mov	r1, #0
   14bdc:	mov	r0, r4
   14be0:	bl	22538 <flatcc_builder_table_add@@Base>
   14be4:	cmp	r0, #0
   14be8:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14bec:	mov	r3, #1
   14bf0:	mvn	r2, #127	; 0x7f
   14bf4:	strb	r2, [r0]
   14bf8:	mov	r1, r3
   14bfc:	mov	r2, r3
   14c00:	mov	r0, r4
   14c04:	bl	22538 <flatcc_builder_table_add@@Base>
   14c08:	cmp	r0, #0
   14c0c:	beq	14c3c <test_type_aliases@@Base+0x43c>
   14c10:	strb	r5, [r0]
   14c14:	mov	r2, #0
   14c18:	ldr	r1, [pc, #172]	; 14ccc <test_type_aliases@@Base+0x4cc>
   14c1c:	mov	r0, r4
   14c20:	bl	20d74 <flatcc_builder_check_required@@Base>
   14c24:	cmp	r0, #0
   14c28:	beq	14c7c <test_type_aliases@@Base+0x47c>
   14c2c:	mov	r0, r4
   14c30:	bl	20e0c <flatcc_builder_end_table@@Base>
   14c34:	mov	r1, r0
   14c38:	b	14c40 <test_type_aliases@@Base+0x440>
   14c3c:	mov	r1, #0
   14c40:	mov	r0, r4
   14c44:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   14c48:	b	14874 <test_type_aliases@@Base+0x74>
   14c4c:	ldr	r3, [pc, #124]	; 14cd0 <test_type_aliases@@Base+0x4d0>
   14c50:	mov	r1, r4
   14c54:	ldr	r2, [sp, #12]
   14c58:	ldr	r3, [r3]
   14c5c:	ldr	r0, [pc, #112]	; 14cd4 <test_type_aliases@@Base+0x4d4>
   14c60:	bl	13458 <_start@@Base+0x148>
   14c64:	mov	r0, r5
   14c68:	bl	2368c <flatcc_verify_error_string@@Base>
   14c6c:	mov	r1, r0
   14c70:	ldr	r0, [pc, #96]	; 14cd8 <test_type_aliases@@Base+0x4d8>
   14c74:	bl	1299c <printf@plt>
   14c78:	b	14a40 <test_type_aliases@@Base+0x240>
   14c7c:	ldr	r3, [pc, #88]	; 14cdc <test_type_aliases@@Base+0x4dc>
   14c80:	mov	r2, #237	; 0xed
   14c84:	ldr	r1, [pc, #84]	; 14ce0 <test_type_aliases@@Base+0x4e0>
   14c88:	ldr	r0, [pc, #84]	; 14ce4 <test_type_aliases@@Base+0x4e4>
   14c8c:	bl	12a8c <__assert_fail@plt>
   14c90:	strbtvs	r6, [r6], -r6, ror #12
   14c94:	andmi	r6, r2, r6, ror #12
   14c98:	andsmi	r3, r3, r3, lsr r3
   14c9c:	ldrdeq	r5, [r2], -r0
   14ca0:	andeq	r3, r1, ip, asr #13
   14ca4:	movtpl	r4, #61261	; 0xef4d
   14ca8:	ldrdeq	r5, [r2], -r8
   14cac:	andeq	r0, r0, sp, ror #5
   14cb0:	andeq	r5, r2, r4, asr #13
   14cb4:	andeq	r5, r2, r8, lsr #14
   14cb8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14cbc:	andeq	r5, r2, r8, asr #25
   14cc0:	strbtvs	r6, [r6], -r6, ror #12
   14cc4:	andmi	r6, r2, r6, ror #12
   14cc8:	andsmi	r3, r3, r3, lsr r3
   14ccc:			; <UNDEFINED> instruction: 0x000253b4
   14cd0:	andeq	sl, r3, r0, ror r0
   14cd4:	andeq	r5, r2, r8, lsl #25
   14cd8:	muleq	r2, ip, ip
   14cdc:			; <UNDEFINED> instruction: 0x000253b8
   14ce0:	andeq	r5, r2, r4, lsr r8
   14ce4:	ldrdeq	r5, [r2], -r8

00014ce8 <test_empty_monster@@Base>:
   14ce8:	push	{r4, r5, lr}
   14cec:	sub	sp, sp, #12
   14cf0:	mov	r4, r0
   14cf4:	bl	1de88 <flatcc_builder_reset@@Base>
   14cf8:	mov	r3, #0
   14cfc:	mov	r2, r3
   14d00:	ldr	r1, [pc, #280]	; 14e20 <test_empty_monster@@Base+0x138>
   14d04:	mov	r0, r4
   14d08:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   14d0c:	mov	r1, #36	; 0x24
   14d10:	mov	r0, r4
   14d14:	bl	203cc <flatcc_builder_start_table@@Base>
   14d18:	mov	r0, r4
   14d1c:	ldr	r1, [pc, #256]	; 14e24 <test_empty_monster@@Base+0x13c>
   14d20:	bl	2217c <flatcc_builder_create_string_str@@Base>
   14d24:	subs	r5, r0, #0
   14d28:	beq	14d40 <test_empty_monster@@Base+0x58>
   14d2c:	mov	r1, #3
   14d30:	mov	r0, r4
   14d34:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   14d38:	cmp	r0, #0
   14d3c:	strne	r5, [r0]
   14d40:	mov	r2, #1
   14d44:	ldr	r1, [pc, #220]	; 14e28 <test_empty_monster@@Base+0x140>
   14d48:	mov	r0, r4
   14d4c:	bl	20d74 <flatcc_builder_check_required@@Base>
   14d50:	cmp	r0, #0
   14d54:	beq	14e1c <test_empty_monster@@Base+0x134>
   14d58:	mov	r0, r4
   14d5c:	bl	20e0c <flatcc_builder_end_table@@Base>
   14d60:	mov	r1, r0
   14d64:	mov	r0, r4
   14d68:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   14d6c:	mov	r0, r4
   14d70:	add	r1, sp, #4
   14d74:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   14d78:	ldr	r3, [pc, #172]	; 14e2c <test_empty_monster@@Base+0x144>
   14d7c:	ldr	r2, [sp, #4]
   14d80:	ldr	r3, [r3]
   14d84:	mov	r1, r0
   14d88:	mov	r4, r0
   14d8c:	ldr	r0, [pc, #156]	; 14e30 <test_empty_monster@@Base+0x148>
   14d90:	bl	13458 <_start@@Base+0x148>
   14d94:	mov	r0, r4
   14d98:	bl	14734 <verify_empty_monster@@Base>
   14d9c:	subs	r5, r0, #0
   14da0:	beq	14db8 <test_empty_monster@@Base+0xd0>
   14da4:	mov	r0, r4
   14da8:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   14dac:	mov	r0, r5
   14db0:	add	sp, sp, #12
   14db4:	pop	{r4, r5, pc}
   14db8:	ldr	r3, [pc, #116]	; 14e34 <test_empty_monster@@Base+0x14c>
   14dbc:	ldr	r2, [pc, #92]	; 14e20 <test_empty_monster@@Base+0x138>
   14dc0:	ldr	r1, [sp, #4]
   14dc4:	mov	r0, r4
   14dc8:	bl	243ac <flatcc_verify_table_as_root@@Base>
   14dcc:	subs	r5, r0, #0
   14dd0:	bne	14e04 <test_empty_monster@@Base+0x11c>
   14dd4:	ldr	r1, [sp, #4]
   14dd8:	ldr	r3, [pc, #84]	; 14e34 <test_empty_monster@@Base+0x14c>
   14ddc:	sub	r1, r1, #1
   14de0:	ldr	r2, [pc, #56]	; 14e20 <test_empty_monster@@Base+0x138>
   14de4:	mov	r0, r4
   14de8:	bl	243ac <flatcc_verify_table_as_root@@Base>
   14dec:	cmp	r0, #0
   14df0:	bne	14da4 <test_empty_monster@@Base+0xbc>
   14df4:	ldr	r0, [pc, #60]	; 14e38 <test_empty_monster@@Base+0x150>
   14df8:	bl	129f0 <puts@plt>
   14dfc:	mvn	r5, #0
   14e00:	b	14dac <test_empty_monster@@Base+0xc4>
   14e04:	bl	2368c <flatcc_verify_error_string@@Base>
   14e08:	mvn	r5, #0
   14e0c:	mov	r1, r0
   14e10:	ldr	r0, [pc, #36]	; 14e3c <test_empty_monster@@Base+0x154>
   14e14:	bl	1299c <printf@plt>
   14e18:	b	14dac <test_empty_monster@@Base+0xc4>
   14e1c:	bl	13024 <__assert_fail@plt+0x598>
   14e20:	ldrdeq	r5, [r2], -r0
   14e24:	strdeq	r5, [r2], -r8
   14e28:	strdeq	r5, [r2], -r8
   14e2c:	andeq	sl, r3, r0, ror r0
   14e30:	andeq	r5, r2, r4, lsl #26
   14e34:	andeq	r3, r1, r0, ror #19
   14e38:	andeq	r5, r2, r0, asr #26
   14e3c:	andeq	r5, r2, r8, lsl sp

00014e40 <test_typed_empty_monster@@Base>:
   14e40:	push	{r4, r5, r6, lr}
   14e44:	sub	sp, sp, #8
   14e48:	mov	r5, #0
   14e4c:	mov	r4, r0
   14e50:	str	r5, [sp, #4]
   14e54:	bl	1de88 <flatcc_builder_reset@@Base>
   14e58:	mov	r3, r5
   14e5c:	mov	r2, r5
   14e60:	ldr	r1, [pc, #596]	; 150bc <test_typed_empty_monster@@Base+0x27c>
   14e64:	mov	r0, r4
   14e68:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   14e6c:	mov	r1, #36	; 0x24
   14e70:	mov	r0, r4
   14e74:	bl	203cc <flatcc_builder_start_table@@Base>
   14e78:	mov	r0, r4
   14e7c:	ldr	r1, [pc, #572]	; 150c0 <test_typed_empty_monster@@Base+0x280>
   14e80:	bl	2217c <flatcc_builder_create_string_str@@Base>
   14e84:	subs	r5, r0, #0
   14e88:	beq	14ea0 <test_typed_empty_monster@@Base+0x60>
   14e8c:	mov	r1, #3
   14e90:	mov	r0, r4
   14e94:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   14e98:	cmp	r0, #0
   14e9c:	strne	r5, [r0]
   14ea0:	mov	r2, #1
   14ea4:	ldr	r1, [pc, #536]	; 150c4 <test_typed_empty_monster@@Base+0x284>
   14ea8:	mov	r0, r4
   14eac:	bl	20d74 <flatcc_builder_check_required@@Base>
   14eb0:	cmp	r0, #0
   14eb4:	beq	150b8 <test_typed_empty_monster@@Base+0x278>
   14eb8:	mov	r0, r4
   14ebc:	bl	20e0c <flatcc_builder_end_table@@Base>
   14ec0:	mov	r1, r0
   14ec4:	mov	r0, r4
   14ec8:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   14ecc:	mov	r0, r4
   14ed0:	mov	r1, sp
   14ed4:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   14ed8:	ldr	r3, [pc, #488]	; 150c8 <test_typed_empty_monster@@Base+0x288>
   14edc:	ldr	r2, [sp]
   14ee0:	ldr	r4, [pc, #484]	; 150cc <test_typed_empty_monster@@Base+0x28c>
   14ee4:	ldr	r3, [r3]
   14ee8:	mov	r5, r0
   14eec:	mov	r1, r0
   14ef0:	ldr	r0, [pc, #472]	; 150d0 <test_typed_empty_monster@@Base+0x290>
   14ef4:	bl	13458 <_start@@Base+0x148>
   14ef8:	ldr	r1, [r5, #4]
   14efc:	ldr	r2, [pc, #464]	; 150d4 <test_typed_empty_monster@@Base+0x294>
   14f00:	ldr	r0, [pc, #464]	; 150d8 <test_typed_empty_monster@@Base+0x298>
   14f04:	mov	r3, #77	; 0x4d
   14f08:	eor	r4, r4, r3
   14f0c:	ldrb	r3, [r2, #1]!
   14f10:	mul	r4, r0, r4
   14f14:	cmp	r3, #0
   14f18:	bne	14f08 <test_typed_empty_monster@@Base+0xc8>
   14f1c:	cmp	r4, #0
   14f20:	beq	15030 <test_typed_empty_monster@@Base+0x1f0>
   14f24:	cmp	r4, r1
   14f28:	bne	15098 <test_typed_empty_monster@@Base+0x258>
   14f2c:	ldr	r3, [pc, #424]	; 150dc <test_typed_empty_monster@@Base+0x29c>
   14f30:	cmp	r4, r3
   14f34:	bne	1503c <test_typed_empty_monster@@Base+0x1fc>
   14f38:	mov	r0, r5
   14f3c:	bl	14734 <verify_empty_monster@@Base>
   14f40:	cmp	r0, #0
   14f44:	beq	150a8 <test_typed_empty_monster@@Base+0x268>
   14f48:	ldr	r3, [pc, #400]	; 150e0 <test_typed_empty_monster@@Base+0x2a0>
   14f4c:	ldr	r2, [pc, #360]	; 150bc <test_typed_empty_monster@@Base+0x27c>
   14f50:	ldr	r1, [sp]
   14f54:	mov	r0, r5
   14f58:	bl	243ac <flatcc_verify_table_as_root@@Base>
   14f5c:	subs	r6, r0, #0
   14f60:	bne	1505c <test_typed_empty_monster@@Base+0x21c>
   14f64:	ldr	r3, [pc, #372]	; 150e0 <test_typed_empty_monster@@Base+0x2a0>
   14f68:	ldr	r2, [pc, #332]	; 150bc <test_typed_empty_monster@@Base+0x27c>
   14f6c:	ldr	r1, [sp]
   14f70:	mov	r0, r5
   14f74:	bl	243ac <flatcc_verify_table_as_root@@Base>
   14f78:	subs	r6, r0, #0
   14f7c:	bne	1505c <test_typed_empty_monster@@Base+0x21c>
   14f80:	mov	r2, r4
   14f84:	ldr	r3, [pc, #340]	; 150e0 <test_typed_empty_monster@@Base+0x2a0>
   14f88:	ldr	r1, [sp]
   14f8c:	mov	r0, r5
   14f90:	bl	24550 <flatcc_verify_table_as_typed_root@@Base>
   14f94:	subs	r6, r0, #0
   14f98:	bne	15084 <test_typed_empty_monster@@Base+0x244>
   14f9c:	ldr	r1, [sp]
   14fa0:	ldr	r0, [pc, #300]	; 150d4 <test_typed_empty_monster@@Base+0x294>
   14fa4:	ldr	r2, [pc, #288]	; 150cc <test_typed_empty_monster@@Base+0x28c>
   14fa8:	ldr	ip, [pc, #296]	; 150d8 <test_typed_empty_monster@@Base+0x298>
   14fac:	mov	r3, #77	; 0x4d
   14fb0:	eor	r2, r2, r3
   14fb4:	ldrb	r3, [r0, #1]!
   14fb8:	mul	r2, ip, r2
   14fbc:	cmp	r3, #0
   14fc0:	bne	14fb0 <test_typed_empty_monster@@Base+0x170>
   14fc4:	ldr	r3, [pc, #256]	; 150cc <test_typed_empty_monster@@Base+0x28c>
   14fc8:	cmp	r2, #0
   14fcc:	moveq	r2, r3
   14fd0:	mov	r0, r5
   14fd4:	ldr	r3, [pc, #260]	; 150e0 <test_typed_empty_monster@@Base+0x2a0>
   14fd8:	bl	24550 <flatcc_verify_table_as_typed_root@@Base>
   14fdc:	subs	r6, r0, #0
   14fe0:	bne	15070 <test_typed_empty_monster@@Base+0x230>
   14fe4:	ldr	r1, [pc, #240]	; 150dc <test_typed_empty_monster@@Base+0x29c>
   14fe8:	add	r2, sp, #8
   14fec:	ldr	r3, [pc, #236]	; 150e0 <test_typed_empty_monster@@Base+0x2a0>
   14ff0:	str	r1, [r2, #-4]!
   14ff4:	mov	r0, r5
   14ff8:	ldr	r1, [sp]
   14ffc:	bl	243ac <flatcc_verify_table_as_root@@Base>
   15000:	subs	r6, r0, #0
   15004:	bne	1505c <test_typed_empty_monster@@Base+0x21c>
   15008:	ldr	r3, [pc, #208]	; 150e0 <test_typed_empty_monster@@Base+0x2a0>
   1500c:	ldr	r2, [pc, #208]	; 150e4 <test_typed_empty_monster@@Base+0x2a4>
   15010:	ldr	r1, [sp]
   15014:	mov	r0, r5
   15018:	bl	243ac <flatcc_verify_table_as_root@@Base>
   1501c:	cmp	r0, #0
   15020:	bne	15048 <test_typed_empty_monster@@Base+0x208>
   15024:	ldr	r0, [pc, #188]	; 150e8 <test_typed_empty_monster@@Base+0x2a8>
   15028:	bl	129f0 <puts@plt>
   1502c:	b	15048 <test_typed_empty_monster@@Base+0x208>
   15030:	ldr	r3, [pc, #148]	; 150cc <test_typed_empty_monster@@Base+0x28c>
   15034:	cmp	r1, r3
   15038:	bne	15098 <test_typed_empty_monster@@Base+0x258>
   1503c:	ldr	r0, [pc, #168]	; 150ec <test_typed_empty_monster@@Base+0x2ac>
   15040:	bl	129f0 <puts@plt>
   15044:	mvn	r6, #0
   15048:	mov	r0, r5
   1504c:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   15050:	mov	r0, r6
   15054:	add	sp, sp, #8
   15058:	pop	{r4, r5, r6, pc}
   1505c:	bl	2368c <flatcc_verify_error_string@@Base>
   15060:	mov	r1, r0
   15064:	ldr	r0, [pc, #132]	; 150f0 <test_typed_empty_monster@@Base+0x2b0>
   15068:	bl	1299c <printf@plt>
   1506c:	b	15048 <test_typed_empty_monster@@Base+0x208>
   15070:	bl	2368c <flatcc_verify_error_string@@Base>
   15074:	mov	r1, r0
   15078:	ldr	r0, [pc, #116]	; 150f4 <test_typed_empty_monster@@Base+0x2b4>
   1507c:	bl	1299c <printf@plt>
   15080:	b	15048 <test_typed_empty_monster@@Base+0x208>
   15084:	bl	2368c <flatcc_verify_error_string@@Base>
   15088:	mov	r1, r0
   1508c:	ldr	r0, [pc, #100]	; 150f8 <test_typed_empty_monster@@Base+0x2b8>
   15090:	bl	1299c <printf@plt>
   15094:	b	15048 <test_typed_empty_monster@@Base+0x208>
   15098:	ldr	r0, [pc, #92]	; 150fc <test_typed_empty_monster@@Base+0x2bc>
   1509c:	bl	1299c <printf@plt>
   150a0:	mvn	r6, #0
   150a4:	b	15048 <test_typed_empty_monster@@Base+0x208>
   150a8:	ldr	r0, [pc, #80]	; 15100 <test_typed_empty_monster@@Base+0x2c0>
   150ac:	bl	129f0 <puts@plt>
   150b0:	mvn	r6, #0
   150b4:	b	15048 <test_typed_empty_monster@@Base+0x208>
   150b8:	bl	13024 <__assert_fail@plt+0x598>
   150bc:	andeq	r5, r2, r8, lsl #27
   150c0:	strdeq	r5, [r2], -r8
   150c4:	strdeq	r5, [r2], -r8
   150c8:	andeq	sl, r3, r0, ror r0
   150cc:	tsthi	ip, r5, asr #27
   150d0:	muleq	r2, r0, sp
   150d4:	andeq	r5, r2, r0, ror sp
   150d8:			; <UNDEFINED> instruction: 0x01000193
   150dc:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   150e0:	andeq	r3, r1, r0, ror #19
   150e4:	ldrdeq	r5, [r2], -r0
   150e8:	andeq	r5, r2, r8, asr #29
   150ec:	andeq	r5, r2, r4, lsl pc
   150f0:	andeq	r5, r2, r0, lsr #28
   150f4:	andeq	r5, r2, r8, lsl #29
   150f8:	andeq	r5, r2, r0, asr lr
   150fc:	andeq	r5, r2, ip, lsr #27
   15100:	andeq	r5, r2, r0, ror #27

00015104 <verify_table_with_emptystruct@@Base>:
   15104:	cmp	r0, #0
   15108:	push	{r4, lr}
   1510c:	beq	15120 <verify_table_with_emptystruct@@Base+0x1c>
   15110:	ldr	r3, [pc, #100]	; 1517c <verify_table_with_emptystruct@@Base+0x78>
   15114:	ldr	r2, [r0, #4]
   15118:	cmp	r2, r3
   1511c:	beq	15130 <verify_table_with_emptystruct@@Base+0x2c>
   15120:	ldr	r0, [pc, #88]	; 15180 <verify_table_with_emptystruct@@Base+0x7c>
   15124:	bl	129f0 <puts@plt>
   15128:	mvn	r0, #0
   1512c:	pop	{r4, pc}
   15130:	ldr	r3, [r0]
   15134:	adds	r2, r0, r3
   15138:	beq	15120 <verify_table_with_emptystruct@@Base+0x1c>
   1513c:	ldr	r3, [r0, r3]
   15140:	sub	r3, r2, r3
   15144:	ldrh	r1, [r3]
   15148:	cmp	r1, #5
   1514c:	bhi	15160 <verify_table_with_emptystruct@@Base+0x5c>
   15150:	ldr	r0, [pc, #44]	; 15184 <verify_table_with_emptystruct@@Base+0x80>
   15154:	bl	129f0 <puts@plt>
   15158:	mvn	r0, #0
   1515c:	pop	{r4, pc}
   15160:	ldrh	r3, [r3, #4]
   15164:	cmp	r3, #0
   15168:	beq	15150 <verify_table_with_emptystruct@@Base+0x4c>
   1516c:	cmn	r2, r3
   15170:	beq	15150 <verify_table_with_emptystruct@@Base+0x4c>
   15174:	mov	r0, #0
   15178:	pop	{r4, pc}
   1517c:	movtpl	r4, #61261	; 0xef4d
   15180:	andeq	r5, r2, ip, lsr pc
   15184:	andeq	r5, r2, r4, ror #30

00015188 <test_table_with_emptystruct@@Base>:
   15188:	push	{r4, r5, lr}
   1518c:	sub	sp, sp, #12
   15190:	mov	r4, r0
   15194:	bl	1de88 <flatcc_builder_reset@@Base>
   15198:	mov	r3, #0
   1519c:	mov	r0, r4
   151a0:	mov	r2, r3
   151a4:	ldr	r1, [pc, #304]	; 152dc <test_table_with_emptystruct@@Base+0x154>
   151a8:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   151ac:	cmp	r0, #0
   151b0:	beq	15214 <test_table_with_emptystruct@@Base+0x8c>
   151b4:	mov	r0, r4
   151b8:	add	r1, sp, #4
   151bc:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   151c0:	ldr	r3, [pc, #280]	; 152e0 <test_table_with_emptystruct@@Base+0x158>
   151c4:	ldr	r2, [sp, #4]
   151c8:	ldr	r3, [r3]
   151cc:	mov	r4, r0
   151d0:	mov	r1, r0
   151d4:	ldr	r0, [pc, #264]	; 152e4 <test_table_with_emptystruct@@Base+0x15c>
   151d8:	bl	13458 <_start@@Base+0x148>
   151dc:	cmp	r4, #0
   151e0:	beq	151f4 <test_table_with_emptystruct@@Base+0x6c>
   151e4:	ldr	r3, [pc, #252]	; 152e8 <test_table_with_emptystruct@@Base+0x160>
   151e8:	ldr	r2, [r4, #4]
   151ec:	cmp	r2, r3
   151f0:	beq	15238 <test_table_with_emptystruct@@Base+0xb0>
   151f4:	ldr	r0, [pc, #240]	; 152ec <test_table_with_emptystruct@@Base+0x164>
   151f8:	bl	129f0 <puts@plt>
   151fc:	mvn	r5, #0
   15200:	mov	r0, r4
   15204:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   15208:	mov	r0, r5
   1520c:	add	sp, sp, #12
   15210:	pop	{r4, r5, pc}
   15214:	mov	r1, #1
   15218:	mov	r0, r4
   1521c:	bl	203cc <flatcc_builder_start_table@@Base>
   15220:	subs	r5, r0, #0
   15224:	beq	15284 <test_table_with_emptystruct@@Base+0xfc>
   15228:	mov	r1, #0
   1522c:	mov	r0, r4
   15230:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   15234:	b	151b4 <test_table_with_emptystruct@@Base+0x2c>
   15238:	ldr	r3, [r4]
   1523c:	adds	r2, r4, r3
   15240:	beq	151f4 <test_table_with_emptystruct@@Base+0x6c>
   15244:	ldr	r3, [r4, r3]
   15248:	sub	r3, r2, r3
   1524c:	ldrh	r1, [r3]
   15250:	cmp	r1, #5
   15254:	bhi	15268 <test_table_with_emptystruct@@Base+0xe0>
   15258:	ldr	r0, [pc, #144]	; 152f0 <test_table_with_emptystruct@@Base+0x168>
   1525c:	bl	129f0 <puts@plt>
   15260:	mvn	r5, #0
   15264:	b	15200 <test_table_with_emptystruct@@Base+0x78>
   15268:	ldrh	r3, [r3, #4]
   1526c:	cmp	r3, #0
   15270:	beq	15258 <test_table_with_emptystruct@@Base+0xd0>
   15274:	cmn	r2, r3
   15278:	movne	r5, #0
   1527c:	bne	15200 <test_table_with_emptystruct@@Base+0x78>
   15280:	b	15258 <test_table_with_emptystruct@@Base+0xd0>
   15284:	mov	r3, #1
   15288:	mov	r2, r5
   1528c:	mov	r1, r5
   15290:	mov	r0, r4
   15294:	bl	22538 <flatcc_builder_table_add@@Base>
   15298:	cmp	r0, #0
   1529c:	beq	15228 <test_table_with_emptystruct@@Base+0xa0>
   152a0:	mov	r2, r5
   152a4:	ldr	r1, [pc, #72]	; 152f4 <test_table_with_emptystruct@@Base+0x16c>
   152a8:	mov	r0, r4
   152ac:	bl	20d74 <flatcc_builder_check_required@@Base>
   152b0:	cmp	r0, #0
   152b4:	beq	152c8 <test_table_with_emptystruct@@Base+0x140>
   152b8:	mov	r0, r4
   152bc:	bl	20e0c <flatcc_builder_end_table@@Base>
   152c0:	mov	r1, r0
   152c4:	b	1522c <test_table_with_emptystruct@@Base+0xa4>
   152c8:	ldr	r3, [pc, #40]	; 152f8 <test_table_with_emptystruct@@Base+0x170>
   152cc:	mov	r2, #215	; 0xd7
   152d0:	ldr	r1, [pc, #36]	; 152fc <test_table_with_emptystruct@@Base+0x174>
   152d4:	ldr	r0, [pc, #36]	; 15300 <test_table_with_emptystruct@@Base+0x178>
   152d8:	bl	12a8c <__assert_fail@plt>
   152dc:	ldrdeq	r5, [r2], -r0
   152e0:	andeq	sl, r3, r0, ror r0
   152e4:	andeq	r6, r2, r0, asr #32
   152e8:	movtpl	r4, #61261	; 0xef4d
   152ec:	andeq	r5, r2, ip, lsr pc
   152f0:	andeq	r5, r2, r4, ror #30
   152f4:	andeq	r5, r2, r0, lsr #8
   152f8:	strdeq	r5, [r2], -ip
   152fc:	andeq	r5, r2, r4, lsr r8
   15300:	andeq	r5, r2, r0, lsl #31

00015304 <test_typed_table_with_emptystruct@@Base>:
   15304:	push	{r4, r5, lr}
   15308:	sub	sp, sp, #12
   1530c:	mov	r4, r0
   15310:	bl	1de88 <flatcc_builder_reset@@Base>
   15314:	mov	r3, #0
   15318:	mov	r0, r4
   1531c:	mov	r2, r3
   15320:	ldr	r1, [pc, #392]	; 154b0 <test_typed_table_with_emptystruct@@Base+0x1ac>
   15324:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   15328:	cmp	r0, #0
   1532c:	beq	153f4 <test_typed_table_with_emptystruct@@Base+0xf0>
   15330:	mov	r0, r4
   15334:	add	r1, sp, #4
   15338:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1533c:	ldr	r3, [pc, #368]	; 154b4 <test_typed_table_with_emptystruct@@Base+0x1b0>
   15340:	ldr	r2, [sp, #4]
   15344:	ldr	r3, [r3]
   15348:	mov	r1, r0
   1534c:	mov	r4, r0
   15350:	ldr	r0, [pc, #352]	; 154b8 <test_typed_table_with_emptystruct@@Base+0x1b4>
   15354:	bl	13458 <_start@@Base+0x148>
   15358:	mov	r0, r4
   1535c:	ldr	r3, [pc, #344]	; 154bc <test_typed_table_with_emptystruct@@Base+0x1b8>
   15360:	ldr	r2, [pc, #328]	; 154b0 <test_typed_table_with_emptystruct@@Base+0x1ac>
   15364:	ldr	r1, [sp, #4]
   15368:	bl	243ac <flatcc_verify_table_as_root@@Base>
   1536c:	cmp	r0, #0
   15370:	bne	1545c <test_typed_table_with_emptystruct@@Base+0x158>
   15374:	ldr	r3, [pc, #320]	; 154bc <test_typed_table_with_emptystruct@@Base+0x1b8>
   15378:	ldr	r2, [pc, #304]	; 154b0 <test_typed_table_with_emptystruct@@Base+0x1ac>
   1537c:	ldr	r1, [sp, #4]
   15380:	mov	r0, r4
   15384:	bl	243ac <flatcc_verify_table_as_root@@Base>
   15388:	cmp	r0, #0
   1538c:	bne	1546c <test_typed_table_with_emptystruct@@Base+0x168>
   15390:	ldr	r5, [pc, #296]	; 154c0 <test_typed_table_with_emptystruct@@Base+0x1bc>
   15394:	ldr	r3, [pc, #288]	; 154bc <test_typed_table_with_emptystruct@@Base+0x1b8>
   15398:	mov	r2, r5
   1539c:	ldr	r1, [sp, #4]
   153a0:	mov	r0, r4
   153a4:	bl	24550 <flatcc_verify_table_as_typed_root@@Base>
   153a8:	cmp	r0, #0
   153ac:	bne	1547c <test_typed_table_with_emptystruct@@Base+0x178>
   153b0:	cmp	r4, #0
   153b4:	beq	1548c <test_typed_table_with_emptystruct@@Base+0x188>
   153b8:	ldr	r3, [r4, #4]
   153bc:	cmp	r3, r5
   153c0:	beq	153d8 <test_typed_table_with_emptystruct@@Base+0xd4>
   153c4:	ldr	r0, [pc, #248]	; 154c4 <test_typed_table_with_emptystruct@@Base+0x1c0>
   153c8:	bl	129f0 <puts@plt>
   153cc:	mvn	r0, #0
   153d0:	add	sp, sp, #12
   153d4:	pop	{r4, r5, pc}
   153d8:	ldr	r3, [r4]
   153dc:	cmn	r4, r3
   153e0:	bne	153d0 <test_typed_table_with_emptystruct@@Base+0xcc>
   153e4:	ldr	r0, [pc, #220]	; 154c8 <test_typed_table_with_emptystruct@@Base+0x1c4>
   153e8:	bl	129f0 <puts@plt>
   153ec:	mvn	r0, #0
   153f0:	b	153d0 <test_typed_table_with_emptystruct@@Base+0xcc>
   153f4:	mov	r1, #1
   153f8:	mov	r0, r4
   153fc:	bl	203cc <flatcc_builder_start_table@@Base>
   15400:	subs	r5, r0, #0
   15404:	beq	15418 <test_typed_table_with_emptystruct@@Base+0x114>
   15408:	mov	r1, #0
   1540c:	mov	r0, r4
   15410:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   15414:	b	15330 <test_typed_table_with_emptystruct@@Base+0x2c>
   15418:	mov	r3, #1
   1541c:	mov	r2, r5
   15420:	mov	r1, r5
   15424:	mov	r0, r4
   15428:	bl	22538 <flatcc_builder_table_add@@Base>
   1542c:	cmp	r0, #0
   15430:	beq	15408 <test_typed_table_with_emptystruct@@Base+0x104>
   15434:	mov	r2, r5
   15438:	ldr	r1, [pc, #140]	; 154cc <test_typed_table_with_emptystruct@@Base+0x1c8>
   1543c:	mov	r0, r4
   15440:	bl	20d74 <flatcc_builder_check_required@@Base>
   15444:	cmp	r0, #0
   15448:	beq	1549c <test_typed_table_with_emptystruct@@Base+0x198>
   1544c:	mov	r0, r4
   15450:	bl	20e0c <flatcc_builder_end_table@@Base>
   15454:	mov	r1, r0
   15458:	b	1540c <test_typed_table_with_emptystruct@@Base+0x108>
   1545c:	ldr	r0, [pc, #108]	; 154d0 <test_typed_table_with_emptystruct@@Base+0x1cc>
   15460:	bl	129f0 <puts@plt>
   15464:	mvn	r0, #0
   15468:	b	153d0 <test_typed_table_with_emptystruct@@Base+0xcc>
   1546c:	ldr	r0, [pc, #96]	; 154d4 <test_typed_table_with_emptystruct@@Base+0x1d0>
   15470:	bl	129f0 <puts@plt>
   15474:	mvn	r0, #0
   15478:	b	153d0 <test_typed_table_with_emptystruct@@Base+0xcc>
   1547c:	ldr	r0, [pc, #84]	; 154d8 <test_typed_table_with_emptystruct@@Base+0x1d4>
   15480:	bl	129f0 <puts@plt>
   15484:	mvn	r0, #0
   15488:	b	153d0 <test_typed_table_with_emptystruct@@Base+0xcc>
   1548c:	ldr	r0, [pc, #72]	; 154dc <test_typed_table_with_emptystruct@@Base+0x1d8>
   15490:	bl	129f0 <puts@plt>
   15494:	mvn	r0, #0
   15498:	b	153d0 <test_typed_table_with_emptystruct@@Base+0xcc>
   1549c:	ldr	r3, [pc, #60]	; 154e0 <test_typed_table_with_emptystruct@@Base+0x1dc>
   154a0:	mov	r2, #215	; 0xd7
   154a4:	ldr	r1, [pc, #56]	; 154e4 <test_typed_table_with_emptystruct@@Base+0x1e0>
   154a8:	ldr	r0, [pc, #56]	; 154e8 <test_typed_table_with_emptystruct@@Base+0x1e4>
   154ac:	bl	12a8c <__assert_fail@plt>
   154b0:	andeq	r6, r2, r8, asr r0
   154b4:	andeq	sl, r3, r0, ror r0
   154b8:	andeq	r6, r2, r0, rrx
   154bc:	andeq	r3, r1, r8, asr #8
   154c0:	ldrhlt	r3, [sp], #118	; 0x76
   154c4:	andeq	r6, r2, r4, lsr r1
   154c8:	strdeq	r6, [r2], -ip
   154cc:	andeq	r5, r2, r0, lsr #8
   154d0:	andeq	r6, r2, r0, lsl #1
   154d4:	andeq	r6, r2, r0, lsr #1
   154d8:	strheq	r6, [r2], -ip
   154dc:	andeq	r6, r2, r4, ror #1
   154e0:	strdeq	r5, [r2], -ip
   154e4:	andeq	r5, r2, r4, lsr r8
   154e8:	andeq	r5, r2, r0, lsl #31

000154ec <verify_monster@@Base>:
   154ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f0:	vpush	{d8-d9}
   154f4:	ldr	r4, [pc, #1104]	; 1594c <verify_monster@@Base+0x460>
   154f8:	mov	r7, r0
   154fc:	add	lr, r4, #8
   15500:	add	fp, sp, #48	; 0x30
   15504:	sub	sp, sp, #44	; 0x2c
   15508:	ldm	lr!, {r0, r1, r2, r3}
   1550c:	add	r4, r4, #28
   15510:	sub	ip, fp, #72	; 0x48
   15514:	ldr	r5, [r7, #4]
   15518:	stmia	ip!, {r0, r1, r2, r3}
   1551c:	sub	r6, fp, #88	; 0x58
   15520:	ldm	r4, {r0, r1, r2, r3}
   15524:	sub	sp, sp, #48	; 0x30
   15528:	ldr	r4, [lr]
   1552c:	ldr	lr, [pc, #1052]	; 15950 <verify_monster@@Base+0x464>
   15530:	str	r4, [ip]
   15534:	cmp	r5, lr
   15538:	stm	r6, {r0, r1, r2, r3}
   1553c:	beq	15558 <verify_monster@@Base+0x6c>
   15540:	ldr	r0, [pc, #1036]	; 15954 <verify_monster@@Base+0x468>
   15544:	bl	129f0 <puts@plt>
   15548:	mvn	r0, #0
   1554c:	sub	sp, fp, #48	; 0x30
   15550:	vpop	{d8-d9}
   15554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15558:	ldr	r8, [r7]
   1555c:	adds	r6, r7, r8
   15560:	beq	16034 <verify_monster@@Base+0xb48>
   15564:	ldr	r3, [r7, r8]
   15568:	sub	r3, r6, r3
   1556c:	ldrh	r2, [r3]
   15570:	cmp	r2, #9
   15574:	bls	157c0 <verify_monster@@Base+0x2d4>
   15578:	ldrh	r2, [r3, #8]
   1557c:	cmp	r2, #0
   15580:	beq	157c0 <verify_monster@@Base+0x2d4>
   15584:	ldrsh	r2, [r6, r2]
   15588:	cmp	r2, #80	; 0x50
   1558c:	bne	157c0 <verify_monster@@Base+0x2d4>
   15590:	ldrh	r4, [r3, #4]
   15594:	cmp	r4, #0
   15598:	beq	160b0 <verify_monster@@Base+0xbc4>
   1559c:	adds	r4, r6, r4
   155a0:	beq	160b0 <verify_monster@@Base+0xbc4>
   155a4:	add	r5, sp, #15
   155a8:	tst	r4, #15
   155ac:	bic	r5, r5, #15
   155b0:	bne	157b4 <verify_monster@@Base+0x2c8>
   155b4:	vldr	s16, [pc, #900]	; 15940 <verify_monster@@Base+0x454>
   155b8:	vldr	s15, [r4, #8]
   155bc:	vcmp.f32	s15, s16
   155c0:	vmrs	APSR_nzcv, fpscr
   155c4:	bne	15f88 <verify_monster@@Base+0xa9c>
   155c8:	vldr	s17, [pc, #884]	; 15944 <verify_monster@@Base+0x458>
   155cc:	vldr	s15, [r4]
   155d0:	vcmp.f32	s15, s17
   155d4:	vmrs	APSR_nzcv, fpscr
   155d8:	bne	15920 <verify_monster@@Base+0x434>
   155dc:	vldr	s18, [pc, #868]	; 15948 <verify_monster@@Base+0x45c>
   155e0:	vldr	s15, [r4, #4]
   155e4:	vcmp.f32	s15, s18
   155e8:	vmrs	APSR_nzcv, fpscr
   155ec:	bne	15920 <verify_monster@@Base+0x434>
   155f0:	mov	r2, #32
   155f4:	mov	r1, #0
   155f8:	mov	r0, r5
   155fc:	bl	12a44 <memset@plt>
   15600:	vldr	d7, [r4, #16]
   15604:	ldrb	r1, [r4, #24]
   15608:	ldrh	r2, [r4, #26]
   1560c:	ldrb	r3, [r4, #28]
   15610:	vcmp.f64	d7, #0.0
   15614:	vstr	s17, [r5]
   15618:	vstr	s18, [r5, #4]
   1561c:	vstr	s16, [r5, #8]
   15620:	vmrs	APSR_nzcv, fpscr
   15624:	strb	r1, [r5, #24]
   15628:	strh	r2, [r5, #26]
   1562c:	strb	r3, [r5, #28]
   15630:	vstr	d7, [r5, #16]
   15634:	bne	15930 <verify_monster@@Base+0x444>
   15638:	add	r0, r4, #26
   1563c:	mov	r2, #4
   15640:	ldr	r1, [pc, #784]	; 15958 <verify_monster@@Base+0x46c>
   15644:	bl	129c0 <memcmp@plt>
   15648:	cmp	r0, #0
   1564c:	bne	15930 <verify_monster@@Base+0x444>
   15650:	ldr	r5, [r7, r8]
   15654:	sub	r5, r6, r5
   15658:	ldrh	r7, [r5]
   1565c:	cmp	r7, #11
   15660:	bhi	15678 <verify_monster@@Base+0x18c>
   15664:	ldr	r3, [pc, #752]	; 1595c <verify_monster@@Base+0x470>
   15668:	ldr	r2, [pc, #752]	; 15960 <verify_monster@@Base+0x474>
   1566c:	ldr	r1, [pc, #980]	; 15a48 <verify_monster@@Base+0x55c>
   15670:	ldr	r0, [pc, #748]	; 15964 <verify_monster@@Base+0x478>
   15674:	bl	12a8c <__assert_fail@plt>
   15678:	ldrh	r3, [r5, #10]
   1567c:	cmp	r3, #0
   15680:	beq	15664 <verify_monster@@Base+0x178>
   15684:	ldr	r4, [r6, r3]
   15688:	add	r3, r6, r3
   1568c:	add	r4, r4, #4
   15690:	adds	r4, r3, r4
   15694:	beq	15dd4 <verify_monster@@Base+0x8e8>
   15698:	ldr	r1, [pc, #712]	; 15968 <verify_monster@@Base+0x47c>
   1569c:	mov	r0, r4
   156a0:	bl	12990 <strcmp@plt>
   156a4:	cmp	r0, #0
   156a8:	bne	15dd4 <verify_monster@@Base+0x8e8>
   156ac:	ldr	r1, [r4, #-4]
   156b0:	cmp	r1, #9
   156b4:	bne	15cf8 <verify_monster@@Base+0x80c>
   156b8:	cmp	r7, #17
   156bc:	bhi	156d0 <verify_monster@@Base+0x1e4>
   156c0:	ldr	r0, [pc, #676]	; 1596c <verify_monster@@Base+0x480>
   156c4:	bl	129f0 <puts@plt>
   156c8:	mvn	r0, #0
   156cc:	b	1554c <verify_monster@@Base+0x60>
   156d0:	ldrh	r3, [r5, #16]
   156d4:	cmp	r3, #0
   156d8:	beq	156c0 <verify_monster@@Base+0x1d4>
   156dc:	ldrsb	lr, [r6, r3]
   156e0:	cmp	lr, #2
   156e4:	bne	156c0 <verify_monster@@Base+0x1d4>
   156e8:	ldrh	r2, [r5, #14]
   156ec:	cmp	r2, #0
   156f0:	beq	15df4 <verify_monster@@Base+0x908>
   156f4:	ldr	r0, [r6, r2]
   156f8:	add	r2, r6, r2
   156fc:	add	r0, r0, #4
   15700:	adds	r3, r2, r0
   15704:	beq	15df4 <verify_monster@@Base+0x908>
   15708:	ldr	ip, [r3, #-4]
   1570c:	cmp	ip, #10
   15710:	bne	15df4 <verify_monster@@Base+0x908>
   15714:	ldrb	r2, [r2, r0]
   15718:	cmp	r2, #0
   1571c:	bne	15ec4 <verify_monster@@Base+0x9d8>
   15720:	ldrb	r2, [r3, #1]
   15724:	cmp	r2, #1
   15728:	bne	15ecc <verify_monster@@Base+0x9e0>
   1572c:	ldrb	r2, [r3, #2]
   15730:	cmp	r2, #2
   15734:	bne	15ed4 <verify_monster@@Base+0x9e8>
   15738:	ldrb	r2, [r3, #3]
   1573c:	cmp	r2, #3
   15740:	bne	15f68 <verify_monster@@Base+0xa7c>
   15744:	ldrb	r2, [r3, #4]
   15748:	cmp	r2, #4
   1574c:	bne	15f70 <verify_monster@@Base+0xa84>
   15750:	ldrb	r2, [r3, #5]
   15754:	cmp	r2, #5
   15758:	bne	15f78 <verify_monster@@Base+0xa8c>
   1575c:	ldrb	r2, [r3, #6]
   15760:	cmp	r2, #6
   15764:	bne	15f80 <verify_monster@@Base+0xa94>
   15768:	ldrb	r2, [r3, #7]
   1576c:	cmp	r2, #7
   15770:	bne	15f98 <verify_monster@@Base+0xaac>
   15774:	ldrb	r2, [r3, #8]
   15778:	cmp	r2, #8
   1577c:	bne	157d0 <verify_monster@@Base+0x2e4>
   15780:	ldrb	r3, [r3, #9]
   15784:	cmp	r3, #9
   15788:	bne	157d4 <verify_monster@@Base+0x2e8>
   1578c:	ldrh	r3, [r5, #6]
   15790:	cmp	r3, #0
   15794:	beq	157ec <verify_monster@@Base+0x300>
   15798:	ldrsh	r3, [r6, r3]
   1579c:	cmp	r3, #150	; 0x96
   157a0:	bne	15de4 <verify_monster@@Base+0x8f8>
   157a4:	ldr	r0, [pc, #452]	; 15970 <verify_monster@@Base+0x484>
   157a8:	bl	129f0 <puts@plt>
   157ac:	mvn	r0, #0
   157b0:	b	1554c <verify_monster@@Base+0x60>
   157b4:	ldr	r0, [pc, #440]	; 15974 <verify_monster@@Base+0x488>
   157b8:	bl	129f0 <puts@plt>
   157bc:	b	155b4 <verify_monster@@Base+0xc8>
   157c0:	ldr	r0, [pc, #432]	; 15978 <verify_monster@@Base+0x48c>
   157c4:	bl	129f0 <puts@plt>
   157c8:	mvn	r0, #0
   157cc:	b	1554c <verify_monster@@Base+0x60>
   157d0:	mov	r1, #8
   157d4:	ldr	r0, [pc, #416]	; 1597c <verify_monster@@Base+0x490>
   157d8:	bl	1299c <printf@plt>
   157dc:	mvn	r0, #0
   157e0:	sub	sp, fp, #48	; 0x30
   157e4:	vpop	{d8-d9}
   157e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157ec:	ldrh	r3, [r5, #8]
   157f0:	cmp	r3, #0
   157f4:	beq	15fc8 <verify_monster@@Base+0xadc>
   157f8:	ldrh	r3, [r5, #4]
   157fc:	cmp	r3, #0
   15800:	beq	15fd8 <verify_monster@@Base+0xaec>
   15804:	cmp	r7, #23
   15808:	bhi	1581c <verify_monster@@Base+0x330>
   1580c:	ldr	r0, [pc, #364]	; 15980 <verify_monster@@Base+0x494>
   15810:	bl	129f0 <puts@plt>
   15814:	mvn	r0, #0
   15818:	b	1554c <verify_monster@@Base+0x60>
   1581c:	ldrh	r2, [r5, #22]
   15820:	cmp	r2, #0
   15824:	beq	1580c <verify_monster@@Base+0x320>
   15828:	ldr	r1, [r6, r2]
   1582c:	add	r2, r6, r2
   15830:	add	r1, r1, #4
   15834:	adds	r3, r2, r1
   15838:	beq	1580c <verify_monster@@Base+0x320>
   1583c:	ldr	r0, [r3, #-4]
   15840:	cmp	r0, #5
   15844:	bne	1580c <verify_monster@@Base+0x320>
   15848:	ldrsh	r1, [r2, r1]
   1584c:	ldrsh	r2, [fp, #-72]	; 0xffffffb8
   15850:	cmp	r1, r2
   15854:	bne	15fe8 <verify_monster@@Base+0xafc>
   15858:	ldrsb	r1, [r3, #2]
   1585c:	ldrsb	r2, [fp, #-70]	; 0xffffffba
   15860:	cmp	r1, r2
   15864:	bne	15fe8 <verify_monster@@Base+0xafc>
   15868:	cmn	r3, #4
   1586c:	ldrsh	r2, [fp, #-68]	; 0xffffffbc
   15870:	beq	16190 <verify_monster@@Base+0xca4>
   15874:	ldrsh	r1, [r3, #4]
   15878:	cmp	r1, r2
   1587c:	bne	15ffc <verify_monster@@Base+0xb10>
   15880:	ldrsb	r1, [fp, #-66]	; 0xffffffbe
   15884:	ldrsb	r2, [r3, #6]
   15888:	cmp	r1, r2
   1588c:	bne	15ffc <verify_monster@@Base+0xb10>
   15890:	cmn	r3, #8
   15894:	ldrsh	r2, [fp, #-64]	; 0xffffffc0
   15898:	beq	161c8 <verify_monster@@Base+0xcdc>
   1589c:	ldrsh	r1, [r3, #8]
   158a0:	cmp	r1, r2
   158a4:	bne	1601c <verify_monster@@Base+0xb30>
   158a8:	ldrsb	r1, [fp, #-62]	; 0xffffffc2
   158ac:	ldrsb	r2, [r3, #10]
   158b0:	cmp	r1, r2
   158b4:	bne	1601c <verify_monster@@Base+0xb30>
   158b8:	cmn	r3, #12
   158bc:	ldrsh	r2, [fp, #-60]	; 0xffffffc4
   158c0:	beq	161a0 <verify_monster@@Base+0xcb4>
   158c4:	ldrsh	r1, [r3, #12]
   158c8:	cmp	r1, r2
   158cc:	bne	16014 <verify_monster@@Base+0xb28>
   158d0:	ldrsb	r1, [fp, #-58]	; 0xffffffc6
   158d4:	ldrsb	r2, [r3, #14]
   158d8:	cmp	r1, r2
   158dc:	bne	16014 <verify_monster@@Base+0xb28>
   158e0:	cmn	r3, #16
   158e4:	ldrsh	r2, [fp, #-56]	; 0xffffffc8
   158e8:	beq	16024 <verify_monster@@Base+0xb38>
   158ec:	ldrsh	r1, [r3, #16]
   158f0:	cmp	r1, r2
   158f4:	ldrsbeq	r2, [r3, #18]
   158f8:	bne	1602c <verify_monster@@Base+0xb40>
   158fc:	ldrsb	r3, [fp, #-54]	; 0xffffffca
   15900:	cmp	r2, r3
   15904:	bne	1602c <verify_monster@@Base+0xb40>
   15908:	cmp	r7, #27
   1590c:	bhi	15a5c <verify_monster@@Base+0x570>
   15910:	ldr	r0, [pc, #108]	; 15984 <verify_monster@@Base+0x498>
   15914:	bl	129f0 <puts@plt>
   15918:	mvn	r0, #0
   1591c:	b	1554c <verify_monster@@Base+0x60>
   15920:	ldr	r0, [pc, #96]	; 15988 <verify_monster@@Base+0x49c>
   15924:	bl	129f0 <puts@plt>
   15928:	mvn	r0, #0
   1592c:	b	1554c <verify_monster@@Base+0x60>
   15930:	ldr	r0, [pc, #84]	; 1598c <verify_monster@@Base+0x4a0>
   15934:	bl	129f0 <puts@plt>
   15938:	mvn	r0, #0
   1593c:	b	1554c <verify_monster@@Base+0x60>
   15940:	subgt	ip, ip, sp, asr #25
   15944:	svccc	0x00800000
   15948:	andmi	r0, r0, r0
   1594c:	andeq	r5, r2, ip, lsl r4
   15950:	movtpl	r4, #61261	; 0xef4d
   15954:	andeq	r6, r2, r0, asr #14
   15958:	andeq	sl, r3, r8, ror r0
   1595c:	andeq	r5, r2, r0, lsl #4
   15960:			; <UNDEFINED> instruction: 0x000002bb
   15964:	strdeq	r5, [r2], -r0
   15968:	strdeq	r5, [r2], -r8
   1596c:	andeq	r6, r2, r0, lsl r2
   15970:	andeq	r6, r2, ip, ror #14
   15974:	andeq	r6, r2, r8, asr r1
   15978:	andeq	r5, r2, r0, ror fp
   1597c:	andeq	r6, r2, ip, asr #4
   15980:	andeq	r6, r2, r0, lsr #5
   15984:	strdeq	r6, [r2], -r0
   15988:	andeq	r6, r2, r4, lsr #3
   1598c:			; <UNDEFINED> instruction: 0x000261bc
   15990:	andeq	r6, r2, r8, ror #7
   15994:			; <UNDEFINED> instruction: 0x000263bc
   15998:	andeq	r6, r2, r0, ror #9
   1599c:	andeq	r5, r2, r8, asr r4
   159a0:	andeq	r6, r2, ip, lsr r5
   159a4:	andeq	r6, r2, r4, ror #11
   159a8:	strdeq	r6, [r2], -r4
   159ac:	andeq	r6, r2, r4, lsl #12
   159b0:	andeq	r6, r2, r0, lsl r6
   159b4:	andeq	r6, r2, r0, lsr r6
   159b8:	andeq	r6, r2, r4, lsl #7
   159bc:	andeq	r6, r2, r0, ror #3
   159c0:	andeq	r6, r2, ip, ror #4
   159c4:	andeq	r6, r2, r0, lsr r2
   159c8:	andeq	r6, r2, r4, ror r6
   159cc:	andeq	r6, r2, ip, ror r3
   159d0:			; <UNDEFINED> instruction: 0x000266b8
   159d4:	andeq	r6, r2, r8, lsr #14
   159d8:	andeq	r6, r2, r0, lsl #3
   159dc:	muleq	r2, r8, r5
   159e0:	andeq	r6, r2, r4, asr r6
   159e4:	andeq	r6, r2, r0, lsl #5
   159e8:	muleq	r2, r4, fp
   159ec:	andeq	r6, r2, r8, asr #5
   159f0:			; <UNDEFINED> instruction: 0x000265b8
   159f4:	andeq	r5, r2, ip, ror #21
   159f8:			; <UNDEFINED> instruction: 0x000264b4
   159fc:	andeq	r6, r2, ip, lsl #9
   15a00:	andeq	r6, r2, r4, asr #10
   15a04:	andeq	r6, r2, r0, lsl #10
   15a08:	andeq	r6, r2, r8, ror r5
   15a0c:	andeq	r6, r2, ip, asr r5
   15a10:	andeq	r6, r2, r4, asr #2
   15a14:	andeq	r6, r2, ip, ror #6
   15a18:	andeq	r6, r2, r4, asr #7
   15a1c:	andeq	r6, r2, r4, ror #8
   15a20:	andeq	r6, r2, r0, asr #8
   15a24:	andeq	r6, r2, ip, lsl r5
   15a28:	andeq	r6, r2, r8, ror #9
   15a2c:	andeq	r6, r2, ip, lsl r4
   15a30:	strdeq	r6, [r2], -r4
   15a34:	andeq	r6, r2, r8, lsl #14
   15a38:	strdeq	r6, [r2], -r4
   15a3c:	andeq	r5, r2, ip, asr r4
   15a40:	andeq	r0, r0, pc, asr r2
   15a44:	andeq	r5, r2, r8, lsr #14
   15a48:	andeq	r5, r2, r4, asr #13
   15a4c:	andeq	r5, r2, r8, asr #8
   15a50:	muleq	r0, r6, r2
   15a54:	andeq	r6, r2, r4, lsl r3
   15a58:	andeq	r6, r2, r8, ror #6
   15a5c:	ldrh	r9, [r5, #26]
   15a60:	cmp	r9, #0
   15a64:	beq	15910 <verify_monster@@Base+0x424>
   15a68:	ldr	sl, [r6, r9]
   15a6c:	add	r9, r6, r9
   15a70:	add	sl, sl, #4
   15a74:	adds	r4, r9, sl
   15a78:	beq	15910 <verify_monster@@Base+0x424>
   15a7c:	ldr	r3, [r4, #-4]
   15a80:	cmp	r3, #8
   15a84:	bne	15910 <verify_monster@@Base+0x424>
   15a88:	ldr	r8, [r4, #20]
   15a8c:	add	r8, r8, #20
   15a90:	adds	r8, r4, r8
   15a94:	beq	161b4 <verify_monster@@Base+0xcc8>
   15a98:	mov	r0, r8
   15a9c:	bl	135bc <_start@@Base+0x2ac>
   15aa0:	ldr	r1, [pc, #-220]	; 159cc <verify_monster@@Base+0x4e0>
   15aa4:	bl	12990 <strcmp@plt>
   15aa8:	cmp	r0, #0
   15aac:	bne	160c8 <verify_monster@@Base+0xbdc>
   15ab0:	ldr	r3, [r4, #4]
   15ab4:	add	r3, r3, #4
   15ab8:	add	r3, r4, r3
   15abc:	cmp	r8, r3
   15ac0:	bne	15dc4 <verify_monster@@Base+0x8d8>
   15ac4:	ldr	r0, [r4, #8]
   15ac8:	add	r0, r0, #8
   15acc:	add	r0, r4, r0
   15ad0:	bl	135bc <_start@@Base+0x2ac>
   15ad4:	ldr	r1, [pc, #-328]	; 15994 <verify_monster@@Base+0x4a8>
   15ad8:	mov	r8, r0
   15adc:	bl	12990 <strcmp@plt>
   15ae0:	cmp	r0, #0
   15ae4:	bne	160d8 <verify_monster@@Base+0xbec>
   15ae8:	ldr	r0, [r9, sl]
   15aec:	add	r0, r4, r0
   15af0:	bl	135bc <_start@@Base+0x2ac>
   15af4:	ldr	r1, [pc, #-364]	; 15990 <verify_monster@@Base+0x4a4>
   15af8:	mov	r8, r0
   15afc:	bl	12990 <strcmp@plt>
   15b00:	cmp	r0, #0
   15b04:	bne	16148 <verify_monster@@Base+0xc5c>
   15b08:	ldr	r0, [r4, #12]
   15b0c:	add	r0, r0, #12
   15b10:	add	r0, r4, r0
   15b14:	bl	135bc <_start@@Base+0x2ac>
   15b18:	ldr	r1, [pc, #-340]	; 159cc <verify_monster@@Base+0x4e0>
   15b1c:	mov	r8, r0
   15b20:	bl	12990 <strcmp@plt>
   15b24:	cmp	r0, #0
   15b28:	bne	16134 <verify_monster@@Base+0xc48>
   15b2c:	ldr	r0, [r4, #16]
   15b30:	add	r0, r0, #16
   15b34:	add	r0, r4, r0
   15b38:	bl	135bc <_start@@Base+0x2ac>
   15b3c:	ldr	r1, [pc, #-432]	; 15994 <verify_monster@@Base+0x4a8>
   15b40:	mov	r8, r0
   15b44:	bl	12990 <strcmp@plt>
   15b48:	cmp	r0, #0
   15b4c:	bne	16100 <verify_monster@@Base+0xc14>
   15b50:	ldr	r0, [r4, #24]
   15b54:	add	r0, r0, #24
   15b58:	add	r0, r4, r0
   15b5c:	bl	135bc <_start@@Base+0x2ac>
   15b60:	ldr	r1, [pc, #-472]	; 15990 <verify_monster@@Base+0x4a4>
   15b64:	mov	r8, r0
   15b68:	bl	12990 <strcmp@plt>
   15b6c:	cmp	r0, #0
   15b70:	bne	160ec <verify_monster@@Base+0xc00>
   15b74:	ldr	r0, [r4, #28]
   15b78:	add	r0, r0, #28
   15b7c:	add	r0, r4, r0
   15b80:	bl	135bc <_start@@Base+0x2ac>
   15b84:	ldr	r1, [pc, #-504]	; 15994 <verify_monster@@Base+0x4a8>
   15b88:	mov	r4, r0
   15b8c:	bl	12990 <strcmp@plt>
   15b90:	cmp	r0, #0
   15b94:	bne	16054 <verify_monster@@Base+0xb68>
   15b98:	ldrh	r3, [r5, #24]
   15b9c:	cmp	r3, #0
   15ba0:	beq	16044 <verify_monster@@Base+0xb58>
   15ba4:	ldr	r2, [r6, r3]
   15ba8:	add	r3, r6, r3
   15bac:	add	r2, r2, #4
   15bb0:	adds	r8, r3, r2
   15bb4:	beq	16044 <verify_monster@@Base+0xb58>
   15bb8:	ldr	r4, [r8, #-4]
   15bbc:	cmp	r4, #3
   15bc0:	bne	16044 <verify_monster@@Base+0xb58>
   15bc4:	ldr	r0, [r3, r2]
   15bc8:	ldr	r1, [pc, #-568]	; 15998 <verify_monster@@Base+0x4ac>
   15bcc:	add	r0, r0, #4
   15bd0:	add	r0, r8, r0
   15bd4:	bl	12990 <strcmp@plt>
   15bd8:	cmp	r0, #0
   15bdc:	bne	16124 <verify_monster@@Base+0xc38>
   15be0:	ldr	r0, [r8, #4]
   15be4:	add	r0, r0, #8
   15be8:	adds	r0, r8, r0
   15bec:	beq	16078 <verify_monster@@Base+0xb8c>
   15bf0:	ldr	r9, [r0, #-4]
   15bf4:	cmp	r9, #2
   15bf8:	bne	16078 <verify_monster@@Base+0xb8c>
   15bfc:	mov	r2, #2
   15c00:	ldr	r1, [pc, #-620]	; 1599c <verify_monster@@Base+0x4b0>
   15c04:	bl	129c0 <memcmp@plt>
   15c08:	cmp	r0, #0
   15c0c:	bne	16114 <verify_monster@@Base+0xc28>
   15c10:	ldr	r0, [r8, #8]
   15c14:	ldr	r1, [pc, #-636]	; 159a0 <verify_monster@@Base+0x4b4>
   15c18:	add	r0, r0, #12
   15c1c:	add	r0, r8, r0
   15c20:	bl	12990 <strcmp@plt>
   15c24:	cmp	r0, #0
   15c28:	bne	16068 <verify_monster@@Base+0xb7c>
   15c2c:	cmp	r7, #53	; 0x35
   15c30:	bls	160a0 <verify_monster@@Base+0xbb4>
   15c34:	ldrh	r3, [r5, #52]	; 0x34
   15c38:	cmp	r3, #0
   15c3c:	beq	160a0 <verify_monster@@Base+0xbb4>
   15c40:	ldr	r2, [r6, r3]
   15c44:	add	r3, r6, r3
   15c48:	add	r2, r2, #4
   15c4c:	adds	r1, r3, r2
   15c50:	beq	16090 <verify_monster@@Base+0xba4>
   15c54:	ldr	ip, [r1, #-4]
   15c58:	cmp	ip, #4
   15c5c:	bne	16090 <verify_monster@@Base+0xba4>
   15c60:	ldrb	r3, [r3, r2]
   15c64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c68:	cmp	r2, r3
   15c6c:	bne	16088 <verify_monster@@Base+0xb9c>
   15c70:	ldrb	r3, [r1, #1]
   15c74:	ldr	r2, [fp, #-84]	; 0xffffffac
   15c78:	cmp	r2, r3
   15c7c:	bne	160c0 <verify_monster@@Base+0xbd4>
   15c80:	ldrb	r3, [r1, #2]
   15c84:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15c88:	cmp	r2, r3
   15c8c:	bne	15fa0 <verify_monster@@Base+0xab4>
   15c90:	ldrb	r2, [r1, #3]
   15c94:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15c98:	cmp	r2, r3
   15c9c:	bne	15fa4 <verify_monster@@Base+0xab8>
   15ca0:	ldrh	r3, [r5, #18]
   15ca4:	cmp	r3, #0
   15ca8:	beq	16004 <verify_monster@@Base+0xb18>
   15cac:	ldrb	r3, [r6, r3]
   15cb0:	cmp	r3, #1
   15cb4:	bne	16004 <verify_monster@@Base+0xb18>
   15cb8:	ldrh	r7, [r5, #20]
   15cbc:	cmp	r7, #0
   15cc0:	moveq	r9, r7
   15cc4:	ldrne	r3, [r6, r7]
   15cc8:	addne	r9, r6, r7
   15ccc:	addne	r9, r9, r3
   15cd0:	mov	r0, r9
   15cd4:	bl	135bc <_start@@Base+0x2ac>
   15cd8:	ldr	r1, [pc, #-788]	; 159cc <verify_monster@@Base+0x4e0>
   15cdc:	bl	12990 <strcmp@plt>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d08 <verify_monster@@Base+0x81c>
   15ce8:	ldr	r0, [pc, #-844]	; 159a4 <verify_monster@@Base+0x4b8>
   15cec:	bl	129f0 <puts@plt>
   15cf0:	mvn	r0, #0
   15cf4:	b	1554c <verify_monster@@Base+0x60>
   15cf8:	ldr	r0, [pc, #-856]	; 159a8 <verify_monster@@Base+0x4bc>
   15cfc:	bl	129f0 <puts@plt>
   15d00:	mvn	r0, #0
   15d04:	b	1554c <verify_monster@@Base+0x60>
   15d08:	ldrh	r8, [r5, #28]
   15d0c:	cmp	r8, #0
   15d10:	beq	15d78 <verify_monster@@Base+0x88c>
   15d14:	ldr	sl, [r6, r8]
   15d18:	add	r8, r6, r8
   15d1c:	add	r4, r8, sl
   15d20:	mov	r0, r4
   15d24:	bl	135bc <_start@@Base+0x2ac>
   15d28:	ldr	r1, [pc, #-900]	; 159ac <verify_monster@@Base+0x4c0>
   15d2c:	bl	12990 <strcmp@plt>
   15d30:	cmp	r0, #0
   15d34:	bne	15d8c <verify_monster@@Base+0x8a0>
   15d38:	cmp	r4, #0
   15d3c:	beq	161b0 <verify_monster@@Base+0xcc4>
   15d40:	ldr	r3, [r8, sl]
   15d44:	sub	r3, r4, r3
   15d48:	ldrh	r2, [r3]
   15d4c:	cmp	r2, #19
   15d50:	bhi	15d9c <verify_monster@@Base+0x8b0>
   15d54:	cmp	r7, #0
   15d58:	ldrne	r1, [r6, r7]
   15d5c:	addne	r7, r6, r7
   15d60:	addne	r7, r7, r1
   15d64:	cmp	r9, r7
   15d68:	bne	15fb8 <verify_monster@@Base+0xacc>
   15d6c:	cmp	r2, #27
   15d70:	bhi	15e04 <verify_monster@@Base+0x918>
   15d74:	bl	13594 <_start@@Base+0x284>
   15d78:	bl	135bc <_start@@Base+0x2ac>
   15d7c:	ldr	r1, [pc, #-984]	; 159ac <verify_monster@@Base+0x4c0>
   15d80:	bl	12990 <strcmp@plt>
   15d84:	cmp	r0, #0
   15d88:	beq	161b0 <verify_monster@@Base+0xcc4>
   15d8c:	ldr	r0, [pc, #-996]	; 159b0 <verify_monster@@Base+0x4c4>
   15d90:	bl	129f0 <puts@plt>
   15d94:	mvn	r0, #0
   15d98:	b	1554c <verify_monster@@Base+0x60>
   15d9c:	ldrh	r1, [r3, #18]
   15da0:	cmp	r1, #0
   15da4:	beq	15d54 <verify_monster@@Base+0x868>
   15da8:	ldrb	r1, [r4, r1]
   15dac:	cmp	r1, #0
   15db0:	beq	15d54 <verify_monster@@Base+0x868>
   15db4:	ldr	r0, [pc, #-1032]	; 159b4 <verify_monster@@Base+0x4c8>
   15db8:	bl	129f0 <puts@plt>
   15dbc:	mvn	r0, #0
   15dc0:	b	1554c <verify_monster@@Base+0x60>
   15dc4:	ldr	r0, [pc, #-1044]	; 159b8 <verify_monster@@Base+0x4cc>
   15dc8:	bl	129f0 <puts@plt>
   15dcc:	mvn	r0, #0
   15dd0:	b	1554c <verify_monster@@Base+0x60>
   15dd4:	ldr	r0, [pc, #-1056]	; 159bc <verify_monster@@Base+0x4d0>
   15dd8:	bl	129f0 <puts@plt>
   15ddc:	mvn	r0, #0
   15de0:	b	1554c <verify_monster@@Base+0x60>
   15de4:	ldr	r0, [pc, #-1068]	; 159c0 <verify_monster@@Base+0x4d4>
   15de8:	bl	129f0 <puts@plt>
   15dec:	mvn	r0, #0
   15df0:	b	1554c <verify_monster@@Base+0x60>
   15df4:	ldr	r0, [pc, #-1080]	; 159c4 <verify_monster@@Base+0x4d8>
   15df8:	bl	129f0 <puts@plt>
   15dfc:	mvn	r0, #0
   15e00:	b	1554c <verify_monster@@Base+0x60>
   15e04:	ldrh	r3, [r3, #26]
   15e08:	cmp	r3, #0
   15e0c:	beq	15d74 <verify_monster@@Base+0x888>
   15e10:	ldr	r2, [r4, r3]
   15e14:	add	r3, r4, r3
   15e18:	add	r2, r2, #4
   15e1c:	adds	r3, r3, r2
   15e20:	beq	15d74 <verify_monster@@Base+0x888>
   15e24:	ldr	r1, [r3, #-4]
   15e28:	sub	r2, r1, #1
   15e2c:	cmp	r2, r1
   15e30:	add	r1, r3, r2, lsl #2
   15e34:	bcs	15d74 <verify_monster@@Base+0x888>
   15e38:	ldr	r2, [r3, r2, lsl #2]
   15e3c:	adds	r3, r1, r2
   15e40:	beq	161b0 <verify_monster@@Base+0xcc4>
   15e44:	ldr	r2, [r1, r2]
   15e48:	sub	r2, r3, r2
   15e4c:	ldrh	r1, [r2]
   15e50:	cmp	r1, #19
   15e54:	bhi	15e68 <verify_monster@@Base+0x97c>
   15e58:	ldr	r0, [pc, #-1176]	; 159c8 <verify_monster@@Base+0x4dc>
   15e5c:	bl	129f0 <puts@plt>
   15e60:	mvn	r0, #0
   15e64:	b	1554c <verify_monster@@Base+0x60>
   15e68:	ldrh	r0, [r2, #18]
   15e6c:	cmp	r0, #0
   15e70:	beq	15e58 <verify_monster@@Base+0x96c>
   15e74:	ldrb	r0, [r3, r0]
   15e78:	cmp	r0, #1
   15e7c:	bne	15e58 <verify_monster@@Base+0x96c>
   15e80:	cmp	r1, #21
   15e84:	movls	r0, #0
   15e88:	bls	15ea0 <verify_monster@@Base+0x9b4>
   15e8c:	ldrh	r0, [r2, #20]
   15e90:	cmp	r0, #0
   15e94:	ldrne	r2, [r3, r0]
   15e98:	addne	r3, r3, r0
   15e9c:	addne	r0, r3, r2
   15ea0:	bl	135bc <_start@@Base+0x2ac>
   15ea4:	ldr	r1, [pc, #-1248]	; 159cc <verify_monster@@Base+0x4e0>
   15ea8:	bl	12990 <strcmp@plt>
   15eac:	cmp	r0, #0
   15eb0:	beq	15edc <verify_monster@@Base+0x9f0>
   15eb4:	ldr	r0, [pc, #-1260]	; 159d0 <verify_monster@@Base+0x4e4>
   15eb8:	bl	129f0 <puts@plt>
   15ebc:	mvn	r0, #0
   15ec0:	b	1554c <verify_monster@@Base+0x60>
   15ec4:	mov	r1, #0
   15ec8:	b	157d4 <verify_monster@@Base+0x2e8>
   15ecc:	mov	r1, #1
   15ed0:	b	157d4 <verify_monster@@Base+0x2e8>
   15ed4:	mov	r1, lr
   15ed8:	b	157d4 <verify_monster@@Base+0x2e8>
   15edc:	ldrh	r3, [r5, #34]	; 0x22
   15ee0:	cmp	r3, #0
   15ee4:	beq	1616c <verify_monster@@Base+0xc80>
   15ee8:	ldrb	r3, [r6, r3]
   15eec:	cmp	r3, #0
   15ef0:	bne	1616c <verify_monster@@Base+0xc80>
   15ef4:	ldrh	r3, [r5, #32]
   15ef8:	cmp	r3, #0
   15efc:	beq	1615c <verify_monster@@Base+0xc70>
   15f00:	ldr	r2, [r6, r3]
   15f04:	add	r6, r6, r3
   15f08:	adds	r3, r6, r2
   15f0c:	beq	1617c <verify_monster@@Base+0xc90>
   15f10:	ldr	r2, [r6, r2]
   15f14:	sub	r3, r3, r2
   15f18:	ldrh	r2, [r3]
   15f1c:	cmp	r2, #5
   15f20:	bls	1554c <verify_monster@@Base+0x60>
   15f24:	ldrh	r1, [r3, #4]
   15f28:	cmp	r1, #0
   15f2c:	bne	15f58 <verify_monster@@Base+0xa6c>
   15f30:	cmp	r2, #7
   15f34:	bls	1554c <verify_monster@@Base+0x60>
   15f38:	ldrh	r1, [r3, #6]
   15f3c:	cmp	r1, #0
   15f40:	bne	15f58 <verify_monster@@Base+0xa6c>
   15f44:	cmp	r2, #9
   15f48:	bls	1554c <verify_monster@@Base+0x60>
   15f4c:	ldrh	r3, [r3, #8]
   15f50:	cmp	r3, #0
   15f54:	beq	1554c <verify_monster@@Base+0x60>
   15f58:	ldr	r0, [pc, #-1420]	; 159d4 <verify_monster@@Base+0x4e8>
   15f5c:	bl	129f0 <puts@plt>
   15f60:	mvn	r0, #0
   15f64:	b	1554c <verify_monster@@Base+0x60>
   15f68:	mov	r1, #3
   15f6c:	b	157d4 <verify_monster@@Base+0x2e8>
   15f70:	mov	r1, #4
   15f74:	b	157d4 <verify_monster@@Base+0x2e8>
   15f78:	mov	r1, #5
   15f7c:	b	157d4 <verify_monster@@Base+0x2e8>
   15f80:	mov	r1, #6
   15f84:	b	157d4 <verify_monster@@Base+0x2e8>
   15f88:	ldr	r0, [pc, #-1464]	; 159d8 <verify_monster@@Base+0x4ec>
   15f8c:	bl	129f0 <puts@plt>
   15f90:	mvn	r0, #0
   15f94:	b	1554c <verify_monster@@Base+0x60>
   15f98:	mov	r1, #7
   15f9c:	b	157d4 <verify_monster@@Base+0x2e8>
   15fa0:	mov	r4, r9
   15fa4:	mov	r1, r4
   15fa8:	ldr	r0, [pc, #-1492]	; 159dc <verify_monster@@Base+0x4f0>
   15fac:	bl	1299c <printf@plt>
   15fb0:	mvn	r0, #0
   15fb4:	b	1554c <verify_monster@@Base+0x60>
   15fb8:	ldr	r0, [pc, #-1504]	; 159e0 <verify_monster@@Base+0x4f4>
   15fbc:	bl	129f0 <puts@plt>
   15fc0:	mvn	r0, #0
   15fc4:	b	1554c <verify_monster@@Base+0x60>
   15fc8:	ldr	r0, [pc, #-1516]	; 159e4 <verify_monster@@Base+0x4f8>
   15fcc:	bl	129f0 <puts@plt>
   15fd0:	mvn	r0, #0
   15fd4:	b	1554c <verify_monster@@Base+0x60>
   15fd8:	ldr	r0, [pc, #-1528]	; 159e8 <verify_monster@@Base+0x4fc>
   15fdc:	bl	129f0 <puts@plt>
   15fe0:	mvn	r0, #0
   15fe4:	b	1554c <verify_monster@@Base+0x60>
   15fe8:	mov	r1, #0
   15fec:	ldr	r0, [pc, #-1544]	; 159ec <verify_monster@@Base+0x500>
   15ff0:	bl	1299c <printf@plt>
   15ff4:	mvn	r0, #0
   15ff8:	b	1554c <verify_monster@@Base+0x60>
   15ffc:	mov	r1, #1
   16000:	b	15fec <verify_monster@@Base+0xb00>
   16004:	ldr	r0, [pc, #-1564]	; 159f0 <verify_monster@@Base+0x504>
   16008:	bl	129f0 <puts@plt>
   1600c:	mvn	r0, #0
   16010:	b	1554c <verify_monster@@Base+0x60>
   16014:	mov	r1, #3
   16018:	b	15fec <verify_monster@@Base+0xb00>
   1601c:	mov	r1, #2
   16020:	b	15fec <verify_monster@@Base+0xb00>
   16024:	cmp	r2, #0
   16028:	beq	158fc <verify_monster@@Base+0x410>
   1602c:	mov	r1, #4
   16030:	b	15fec <verify_monster@@Base+0xb00>
   16034:	ldr	r0, [pc, #-1608]	; 159f4 <verify_monster@@Base+0x508>
   16038:	bl	129f0 <puts@plt>
   1603c:	mvn	r0, #0
   16040:	b	1554c <verify_monster@@Base+0x60>
   16044:	ldr	r0, [pc, #-1620]	; 159f8 <verify_monster@@Base+0x50c>
   16048:	bl	129f0 <puts@plt>
   1604c:	mvn	r0, #0
   16050:	b	1554c <verify_monster@@Base+0x60>
   16054:	mov	r1, r4
   16058:	ldr	r0, [pc, #-1636]	; 159fc <verify_monster@@Base+0x510>
   1605c:	bl	1299c <printf@plt>
   16060:	mvn	r0, #0
   16064:	b	1554c <verify_monster@@Base+0x60>
   16068:	ldr	r0, [pc, #-1648]	; 15a00 <verify_monster@@Base+0x514>
   1606c:	bl	129f0 <puts@plt>
   16070:	mvn	r0, #0
   16074:	b	1554c <verify_monster@@Base+0x60>
   16078:	ldr	r0, [pc, #-1660]	; 15a04 <verify_monster@@Base+0x518>
   1607c:	bl	1299c <printf@plt>
   16080:	mvn	r0, #0
   16084:	b	1554c <verify_monster@@Base+0x60>
   16088:	mov	r4, r0
   1608c:	b	15fa4 <verify_monster@@Base+0xab8>
   16090:	ldr	r0, [pc, #-1680]	; 15a08 <verify_monster@@Base+0x51c>
   16094:	bl	129f0 <puts@plt>
   16098:	mvn	r0, #0
   1609c:	b	1554c <verify_monster@@Base+0x60>
   160a0:	ldr	r0, [pc, #-1692]	; 15a0c <verify_monster@@Base+0x520>
   160a4:	bl	129f0 <puts@plt>
   160a8:	mvn	r0, #0
   160ac:	b	1554c <verify_monster@@Base+0x60>
   160b0:	ldr	r0, [pc, #-1704]	; 15a10 <verify_monster@@Base+0x524>
   160b4:	bl	129f0 <puts@plt>
   160b8:	mvn	r0, #0
   160bc:	b	1554c <verify_monster@@Base+0x60>
   160c0:	mov	r4, #1
   160c4:	b	15fa4 <verify_monster@@Base+0xab8>
   160c8:	ldr	r0, [pc, #-1724]	; 15a14 <verify_monster@@Base+0x528>
   160cc:	bl	1299c <printf@plt>
   160d0:	mvn	r0, #0
   160d4:	b	1554c <verify_monster@@Base+0x60>
   160d8:	mov	r1, r8
   160dc:	ldr	r0, [pc, #-1740]	; 15a18 <verify_monster@@Base+0x52c>
   160e0:	bl	1299c <printf@plt>
   160e4:	mvn	r0, #0
   160e8:	b	1554c <verify_monster@@Base+0x60>
   160ec:	mov	r1, r8
   160f0:	ldr	r0, [pc, #-1756]	; 15a1c <verify_monster@@Base+0x530>
   160f4:	bl	1299c <printf@plt>
   160f8:	mvn	r0, #0
   160fc:	b	1554c <verify_monster@@Base+0x60>
   16100:	mov	r1, r8
   16104:	ldr	r0, [pc, #-1772]	; 15a20 <verify_monster@@Base+0x534>
   16108:	bl	1299c <printf@plt>
   1610c:	mvn	r0, #0
   16110:	b	1554c <verify_monster@@Base+0x60>
   16114:	ldr	r0, [pc, #-1784]	; 15a24 <verify_monster@@Base+0x538>
   16118:	bl	129f0 <puts@plt>
   1611c:	mvn	r0, #0
   16120:	b	1554c <verify_monster@@Base+0x60>
   16124:	ldr	r0, [pc, #-1796]	; 15a28 <verify_monster@@Base+0x53c>
   16128:	bl	129f0 <puts@plt>
   1612c:	mvn	r0, #0
   16130:	b	1554c <verify_monster@@Base+0x60>
   16134:	mov	r1, r8
   16138:	ldr	r0, [pc, #-1812]	; 15a2c <verify_monster@@Base+0x540>
   1613c:	bl	1299c <printf@plt>
   16140:	mvn	r0, #0
   16144:	b	1554c <verify_monster@@Base+0x60>
   16148:	mov	r1, r8
   1614c:	ldr	r0, [pc, #-1828]	; 15a30 <verify_monster@@Base+0x544>
   16150:	bl	1299c <printf@plt>
   16154:	mvn	r0, #0
   16158:	b	1554c <verify_monster@@Base+0x60>
   1615c:	ldr	r0, [pc, #-1840]	; 15a34 <verify_monster@@Base+0x548>
   16160:	bl	129f0 <puts@plt>
   16164:	mvn	r0, #0
   16168:	b	1554c <verify_monster@@Base+0x60>
   1616c:	ldr	r0, [pc, #-1852]	; 15a38 <verify_monster@@Base+0x54c>
   16170:	bl	129f0 <puts@plt>
   16174:	mvn	r0, #0
   16178:	b	1554c <verify_monster@@Base+0x60>
   1617c:	ldr	r3, [pc, #-1864]	; 15a3c <verify_monster@@Base+0x550>
   16180:	ldr	r2, [pc, #-1864]	; 15a40 <verify_monster@@Base+0x554>
   16184:	ldr	r1, [pc, #-1860]	; 15a48 <verify_monster@@Base+0x55c>
   16188:	ldr	r0, [pc, #-1868]	; 15a44 <verify_monster@@Base+0x558>
   1618c:	bl	12a8c <__assert_fail@plt>
   16190:	cmp	r2, #0
   16194:	bne	15ffc <verify_monster@@Base+0xb10>
   16198:	ldrsb	r1, [fp, #-66]	; 0xffffffbe
   1619c:	b	15888 <verify_monster@@Base+0x39c>
   161a0:	cmp	r2, #0
   161a4:	bne	16014 <verify_monster@@Base+0xb28>
   161a8:	ldrsb	r1, [fp, #-58]	; 0xffffffc6
   161ac:	b	158d8 <verify_monster@@Base+0x3ec>
   161b0:	bl	12cb4 <__assert_fail@plt+0x228>
   161b4:	ldr	r3, [pc, #-1904]	; 15a4c <verify_monster@@Base+0x560>
   161b8:	ldr	r2, [pc, #-1904]	; 15a50 <verify_monster@@Base+0x564>
   161bc:	ldr	r1, [pc, #-1904]	; 15a54 <verify_monster@@Base+0x568>
   161c0:	ldr	r0, [pc, #-1904]	; 15a58 <verify_monster@@Base+0x56c>
   161c4:	bl	12a8c <__assert_fail@plt>
   161c8:	cmp	r2, #0
   161cc:	bne	1601c <verify_monster@@Base+0xb30>
   161d0:	ldrsb	r1, [fp, #-62]	; 0xffffffc2
   161d4:	b	158b0 <verify_monster@@Base+0x3c4>

000161d8 <gen_monster@@Base>:
   161d8:	ldr	r2, [pc, #2400]	; 16b40 <gen_monster@@Base+0x968>
   161dc:	push	{r4, r5, r6, r7, lr}
   161e0:	mov	r4, r0
   161e4:	mov	r6, r1
   161e8:	ldm	r2, {r0, r1, r2}
   161ec:	sub	sp, sp, #52	; 0x34
   161f0:	add	ip, sp, #24
   161f4:	mov	r5, #0
   161f8:	stmia	ip!, {r0, r1}
   161fc:	mov	r1, #1
   16200:	mov	r0, r4
   16204:	strh	r2, [ip]
   16208:	strb	r5, [sp, #12]
   1620c:	strb	r5, [sp, #15]
   16210:	strb	r1, [sp, #13]
   16214:	strb	r1, [sp, #14]
   16218:	bl	1de88 <flatcc_builder_reset@@Base>
   1621c:	cmp	r6, r5
   16220:	beq	16a48 <gen_monster@@Base+0x870>
   16224:	mov	r2, r5
   16228:	mov	r3, #2
   1622c:	ldr	r1, [pc, #2320]	; 16b44 <gen_monster@@Base+0x96c>
   16230:	mov	r0, r4
   16234:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   16238:	cmp	r0, r5
   1623c:	bne	1624c <gen_monster@@Base+0x74>
   16240:	mov	r1, #36	; 0x24
   16244:	mov	r0, r4
   16248:	bl	203cc <flatcc_builder_start_table@@Base>
   1624c:	mov	r3, #2
   16250:	mov	r2, r3
   16254:	mov	r1, r3
   16258:	mov	r0, r4
   1625c:	bl	22538 <flatcc_builder_table_add@@Base>
   16260:	mov	r2, #32
   16264:	mov	r1, #0
   16268:	cmp	r0, #0
   1626c:	movne	r3, #80	; 0x50
   16270:	strhne	r3, [r0]
   16274:	mov	r3, #16
   16278:	mov	r0, r4
   1627c:	bl	22538 <flatcc_builder_table_add@@Base>
   16280:	ldr	r3, [pc, #2240]	; 16b48 <gen_monster@@Base+0x970>
   16284:	mov	ip, #1065353216	; 0x3f800000
   16288:	mov	r2, #1073741824	; 0x40000000
   1628c:	ldr	r1, [pc, #2232]	; 16b4c <gen_monster@@Base+0x974>
   16290:	str	ip, [r0]
   16294:	str	r2, [r0, #4]
   16298:	str	r3, [r0, #8]
   1629c:	mov	r0, r4
   162a0:	bl	2217c <flatcc_builder_create_string_str@@Base>
   162a4:	subs	r5, r0, #0
   162a8:	beq	162c0 <gen_monster@@Base+0xe8>
   162ac:	mov	r1, #3
   162b0:	mov	r0, r4
   162b4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   162b8:	cmp	r0, #0
   162bc:	strne	r5, [r0]
   162c0:	mov	r3, #1
   162c4:	mov	r2, r3
   162c8:	mov	r1, #6
   162cc:	mov	r0, r4
   162d0:	bl	22538 <flatcc_builder_table_add@@Base>
   162d4:	mvn	r2, #0
   162d8:	add	r1, sp, #24
   162dc:	cmp	r0, #0
   162e0:	movne	r3, #2
   162e4:	strbne	r3, [r0]
   162e8:	mov	r3, #1
   162ec:	str	r2, [sp, #4]
   162f0:	str	r3, [sp]
   162f4:	mov	r2, #10
   162f8:	mov	r0, r4
   162fc:	bl	20fcc <flatcc_builder_create_vector@@Base>
   16300:	subs	r5, r0, #0
   16304:	beq	1631c <gen_monster@@Base+0x144>
   16308:	mov	r1, #5
   1630c:	mov	r0, r4
   16310:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16314:	cmp	r0, #0
   16318:	strne	r5, [r0]
   1631c:	mvn	r3, #-1073741824	; 0xc0000000
   16320:	mov	r2, #2
   16324:	mov	r1, #4
   16328:	mov	r0, r4
   1632c:	bl	1fc2c <flatcc_builder_start_vector@@Base>
   16330:	mov	r1, #1
   16334:	mov	r0, r4
   16338:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   1633c:	mov	r2, #16
   16340:	mov	r3, #32
   16344:	mov	r1, #2
   16348:	strh	r2, [r0]
   1634c:	strb	r3, [r0, #2]
   16350:	mov	r0, r4
   16354:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   16358:	mov	ip, #48	; 0x30
   1635c:	mov	r2, #80	; 0x50
   16360:	mov	r3, #96	; 0x60
   16364:	mov	r1, #64	; 0x40
   16368:	strh	ip, [r0]
   1636c:	strh	r2, [r0, #4]
   16370:	strb	r3, [r0, #6]
   16374:	strb	r1, [r0, #2]
   16378:	mov	r1, #1
   1637c:	mov	r0, r4
   16380:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   16384:	mov	r1, #1
   16388:	cmp	r0, #0
   1638c:	movne	r2, #112	; 0x70
   16390:	mvnne	r3, #127	; 0x7f
   16394:	strhne	r2, [r0]
   16398:	strbne	r3, [r0, #2]
   1639c:	mov	r2, #400	; 0x190
   163a0:	mvn	r3, #110	; 0x6e
   163a4:	mov	r0, r4
   163a8:	strb	r3, [sp, #10]
   163ac:	strh	r2, [sp, #8]
   163b0:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   163b4:	mov	r1, #1
   163b8:	cmp	r0, #0
   163bc:	ldrne	r3, [sp, #8]
   163c0:	strne	r3, [r0]
   163c4:	mov	r0, r4
   163c8:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   163cc:	mov	r1, #1
   163d0:	cmp	r0, #0
   163d4:	ldrne	r3, [sp, #8]
   163d8:	strne	r3, [r0]
   163dc:	mov	r0, r4
   163e0:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   163e4:	cmp	r0, #0
   163e8:	ldrne	r3, [sp, #8]
   163ec:	strne	r3, [r0]
   163f0:	mov	r0, r4
   163f4:	bl	21304 <flatcc_builder_vector_count@@Base>
   163f8:	cmp	r0, #7
   163fc:	bne	16afc <gen_monster@@Base+0x924>
   16400:	mov	r1, #2
   16404:	mov	r0, r4
   16408:	bl	1fa78 <flatcc_builder_truncate_vector@@Base>
   1640c:	mov	r0, r4
   16410:	bl	21304 <flatcc_builder_vector_count@@Base>
   16414:	cmp	r0, #5
   16418:	bne	16b14 <gen_monster@@Base+0x93c>
   1641c:	mov	r0, r4
   16420:	bl	21310 <flatcc_builder_vector_edit@@Base>
   16424:	mov	r2, r0
   16428:	mov	r0, r4
   1642c:	ldrh	r3, [r2, #16]
   16430:	add	r3, r3, #1
   16434:	strh	r3, [r2, #16]
   16438:	bl	2110c <flatcc_builder_end_vector@@Base>
   1643c:	subs	r5, r0, #0
   16440:	beq	16458 <gen_monster@@Base+0x280>
   16444:	mov	r1, #9
   16448:	mov	r0, r4
   1644c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16450:	cmp	r0, #0
   16454:	strne	r5, [r0]
   16458:	mov	r1, #36	; 0x24
   1645c:	mov	r0, r4
   16460:	bl	203cc <flatcc_builder_start_table@@Base>
   16464:	mov	r2, #7
   16468:	ldr	r1, [pc, #1760]	; 16b50 <gen_monster@@Base+0x978>
   1646c:	mov	r0, r4
   16470:	bl	22098 <flatcc_builder_create_string@@Base>
   16474:	subs	r5, r0, #0
   16478:	bne	16a68 <gen_monster@@Base+0x890>
   1647c:	ldr	r6, [pc, #1744]	; 16b54 <gen_monster@@Base+0x97c>
   16480:	mov	r2, #1
   16484:	add	r1, r6, #12
   16488:	mov	r0, r4
   1648c:	bl	20d74 <flatcc_builder_check_required@@Base>
   16490:	cmp	r0, #0
   16494:	beq	16ad0 <gen_monster@@Base+0x8f8>
   16498:	mov	r0, r4
   1649c:	bl	20e0c <flatcc_builder_end_table@@Base>
   164a0:	mov	r5, r0
   164a4:	mov	r0, r4
   164a8:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   164ac:	mov	r1, #2
   164b0:	mov	r0, r4
   164b4:	bl	1f3e8 <flatcc_builder_extend_offset_vector@@Base>
   164b8:	mov	r1, #36	; 0x24
   164bc:	str	r5, [r0]
   164c0:	str	r5, [r0, #4]
   164c4:	mov	r0, r4
   164c8:	bl	203cc <flatcc_builder_start_table@@Base>
   164cc:	mov	r2, #30
   164d0:	ldr	r1, [pc, #1664]	; 16b58 <gen_monster@@Base+0x980>
   164d4:	mov	r0, r4
   164d8:	bl	2226c <flatcc_builder_create_string_strn@@Base>
   164dc:	subs	r7, r0, #0
   164e0:	beq	164f8 <gen_monster@@Base+0x320>
   164e4:	mov	r1, #3
   164e8:	mov	r0, r4
   164ec:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   164f0:	cmp	r0, #0
   164f4:	strne	r7, [r0]
   164f8:	mov	r2, #1
   164fc:	add	r1, r6, #12
   16500:	mov	r0, r4
   16504:	bl	20d74 <flatcc_builder_check_required@@Base>
   16508:	cmp	r0, #0
   1650c:	beq	16ad0 <gen_monster@@Base+0x8f8>
   16510:	mov	r0, r4
   16514:	bl	20e0c <flatcc_builder_end_table@@Base>
   16518:	subs	r1, r0, #0
   1651c:	beq	16a40 <gen_monster@@Base+0x868>
   16520:	mov	r0, r4
   16524:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   16528:	mov	r1, #3
   1652c:	ldr	r7, [r0]
   16530:	mov	r0, r4
   16534:	bl	1f3e8 <flatcc_builder_extend_offset_vector@@Base>
   16538:	mov	r1, #1
   1653c:	stm	r0, {r5, r7}
   16540:	mov	r0, r4
   16544:	bl	1fb0c <flatcc_builder_truncate_offset_vector@@Base>
   16548:	mov	r0, r4
   1654c:	bl	21500 <flatcc_builder_offset_vector_count@@Base>
   16550:	cmp	r0, #5
   16554:	bne	16ad4 <gen_monster@@Base+0x8fc>
   16558:	mov	r1, #36	; 0x24
   1655c:	mov	r0, r4
   16560:	bl	203cc <flatcc_builder_start_table@@Base>
   16564:	mov	r2, #8
   16568:	ldr	r1, [pc, #1516]	; 16b5c <gen_monster@@Base+0x984>
   1656c:	mov	r0, r4
   16570:	bl	2226c <flatcc_builder_create_string_strn@@Base>
   16574:	subs	r7, r0, #0
   16578:	beq	16590 <gen_monster@@Base+0x3b8>
   1657c:	mov	r1, #3
   16580:	mov	r0, r4
   16584:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16588:	cmp	r0, #0
   1658c:	strne	r7, [r0]
   16590:	mov	r2, #1
   16594:	add	r1, r6, #12
   16598:	mov	r0, r4
   1659c:	bl	20d74 <flatcc_builder_check_required@@Base>
   165a0:	cmp	r0, #0
   165a4:	beq	16ad0 <gen_monster@@Base+0x8f8>
   165a8:	mov	r0, r4
   165ac:	bl	20e0c <flatcc_builder_end_table@@Base>
   165b0:	subs	r1, r0, #0
   165b4:	beq	16a40 <gen_monster@@Base+0x868>
   165b8:	mov	r0, r4
   165bc:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   165c0:	ldr	r3, [r0]
   165c4:	mov	r0, r4
   165c8:	str	r3, [sp, #16]
   165cc:	bl	21500 <flatcc_builder_offset_vector_count@@Base>
   165d0:	cmp	r0, #6
   165d4:	bne	16ae8 <gen_monster@@Base+0x910>
   165d8:	mov	r0, r4
   165dc:	bl	214f8 <flatcc_builder_offset_vector_edit@@Base>
   165e0:	mov	r2, #2
   165e4:	ldr	r3, [r0, #20]
   165e8:	ldr	r1, [r0, #8]
   165ec:	str	r5, [r0, #20]
   165f0:	str	r1, [sp, #20]
   165f4:	str	r3, [r0]
   165f8:	add	r1, sp, #16
   165fc:	mov	r0, r4
   16600:	bl	1f5a4 <flatcc_builder_append_offset_vector@@Base>
   16604:	mov	r0, r4
   16608:	bl	2132c <flatcc_builder_end_offset_vector@@Base>
   1660c:	subs	r7, r0, #0
   16610:	beq	16628 <gen_monster@@Base+0x450>
   16614:	mov	r1, #11
   16618:	mov	r0, r4
   1661c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16620:	cmp	r0, #0
   16624:	strne	r7, [r0]
   16628:	ldr	r1, [pc, #1328]	; 16b60 <gen_monster@@Base+0x988>
   1662c:	mov	r0, r4
   16630:	bl	2217c <flatcc_builder_create_string_str@@Base>
   16634:	mov	r2, #2
   16638:	ldr	r1, [pc, #1316]	; 16b64 <gen_monster@@Base+0x98c>
   1663c:	str	r0, [sp, #36]	; 0x24
   16640:	mov	r0, r4
   16644:	bl	22098 <flatcc_builder_create_string@@Base>
   16648:	ldr	r1, [pc, #1304]	; 16b68 <gen_monster@@Base+0x990>
   1664c:	str	r0, [sp, #40]	; 0x28
   16650:	mov	r0, r4
   16654:	bl	2217c <flatcc_builder_create_string_str@@Base>
   16658:	mov	r2, #3
   1665c:	add	r1, sp, #36	; 0x24
   16660:	str	r0, [sp, #44]	; 0x2c
   16664:	mov	r0, r4
   16668:	bl	1fec8 <flatcc_builder_create_offset_vector@@Base>
   1666c:	subs	r7, r0, #0
   16670:	beq	16688 <gen_monster@@Base+0x4b0>
   16674:	mov	r1, #10
   16678:	mov	r0, r4
   1667c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16680:	cmp	r0, #0
   16684:	strne	r7, [r0]
   16688:	mov	r2, #1
   1668c:	mvn	r3, #0
   16690:	mov	r1, r2
   16694:	mov	r0, r4
   16698:	bl	1fc2c <flatcc_builder_start_vector@@Base>
   1669c:	mov	r2, #1
   166a0:	add	r1, sp, #12
   166a4:	mov	r0, r4
   166a8:	bl	1f2bc <flatcc_builder_append_vector@@Base>
   166ac:	mov	r2, #3
   166b0:	add	r1, sp, #13
   166b4:	mov	r0, r4
   166b8:	bl	1f2bc <flatcc_builder_append_vector@@Base>
   166bc:	mov	r0, r4
   166c0:	bl	2110c <flatcc_builder_end_vector@@Base>
   166c4:	subs	r7, r0, #0
   166c8:	beq	166e0 <gen_monster@@Base+0x508>
   166cc:	mov	r1, #24
   166d0:	mov	r0, r4
   166d4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   166d8:	cmp	r0, #0
   166dc:	strne	r7, [r0]
   166e0:	cmp	r5, #0
   166e4:	beq	16a80 <gen_monster@@Base+0x8a8>
   166e8:	mov	r3, #1
   166ec:	mov	r2, r3
   166f0:	mov	r1, #7
   166f4:	mov	r0, r4
   166f8:	bl	22538 <flatcc_builder_table_add@@Base>
   166fc:	subs	r7, r0, #0
   16700:	beq	16720 <gen_monster@@Base+0x548>
   16704:	mov	r1, #8
   16708:	mov	r0, r4
   1670c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16710:	cmp	r0, #0
   16714:	movne	r3, #1
   16718:	strbne	r3, [r7]
   1671c:	strne	r5, [r0]
   16720:	mov	r1, #36	; 0x24
   16724:	mov	r0, r4
   16728:	bl	203cc <flatcc_builder_start_table@@Base>
   1672c:	ldr	r1, [pc, #1080]	; 16b6c <gen_monster@@Base+0x994>
   16730:	mov	r0, r4
   16734:	bl	2217c <flatcc_builder_create_string_str@@Base>
   16738:	subs	r7, r0, #0
   1673c:	beq	16ab8 <gen_monster@@Base+0x8e0>
   16740:	mov	r1, #3
   16744:	mov	r0, r4
   16748:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1674c:	cmp	r0, #0
   16750:	beq	16ab8 <gen_monster@@Base+0x8e0>
   16754:	str	r7, [r0]
   16758:	mov	r0, r4
   1675c:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   16760:	mov	r1, #36	; 0x24
   16764:	mov	r0, r4
   16768:	bl	203cc <flatcc_builder_start_table@@Base>
   1676c:	cmp	r5, #0
   16770:	beq	167ac <gen_monster@@Base+0x5d4>
   16774:	mov	r3, #1
   16778:	mov	r2, r3
   1677c:	mov	r1, #7
   16780:	mov	r0, r4
   16784:	bl	22538 <flatcc_builder_table_add@@Base>
   16788:	subs	r7, r0, #0
   1678c:	beq	167ac <gen_monster@@Base+0x5d4>
   16790:	mov	r1, #8
   16794:	mov	r0, r4
   16798:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1679c:	cmp	r0, #0
   167a0:	movne	r3, #1
   167a4:	strbne	r3, [r7]
   167a8:	strne	r5, [r0]
   167ac:	ldr	r1, [pc, #956]	; 16b70 <gen_monster@@Base+0x998>
   167b0:	mov	r0, r4
   167b4:	bl	2217c <flatcc_builder_create_string_str@@Base>
   167b8:	subs	r7, r0, #0
   167bc:	beq	167d4 <gen_monster@@Base+0x5fc>
   167c0:	mov	r1, #3
   167c4:	mov	r0, r4
   167c8:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   167cc:	cmp	r0, #0
   167d0:	strne	r7, [r0]
   167d4:	mov	r2, #1
   167d8:	add	r1, r6, #12
   167dc:	mov	r0, r4
   167e0:	bl	20d74 <flatcc_builder_check_required@@Base>
   167e4:	cmp	r0, #0
   167e8:	beq	16ad0 <gen_monster@@Base+0x8f8>
   167ec:	mov	r0, r4
   167f0:	bl	20e0c <flatcc_builder_end_table@@Base>
   167f4:	subs	r1, r0, #0
   167f8:	beq	16804 <gen_monster@@Base+0x62c>
   167fc:	mov	r0, r4
   16800:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   16804:	mov	r1, #36	; 0x24
   16808:	mov	r0, r4
   1680c:	bl	203cc <flatcc_builder_start_table@@Base>
   16810:	cmp	r5, #0
   16814:	beq	16850 <gen_monster@@Base+0x678>
   16818:	mov	r3, #1
   1681c:	mov	r2, r3
   16820:	mov	r1, #7
   16824:	mov	r0, r4
   16828:	bl	22538 <flatcc_builder_table_add@@Base>
   1682c:	subs	r7, r0, #0
   16830:	beq	16850 <gen_monster@@Base+0x678>
   16834:	mov	r1, #8
   16838:	mov	r0, r4
   1683c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16840:	cmp	r0, #0
   16844:	movne	r3, #1
   16848:	strbne	r3, [r7]
   1684c:	strne	r5, [r0]
   16850:	ldr	r1, [pc, #792]	; 16b70 <gen_monster@@Base+0x998>
   16854:	mov	r0, r4
   16858:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1685c:	subs	r7, r0, #0
   16860:	beq	16878 <gen_monster@@Base+0x6a0>
   16864:	mov	r1, #3
   16868:	mov	r0, r4
   1686c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16870:	cmp	r0, #0
   16874:	strne	r7, [r0]
   16878:	mov	r2, #1
   1687c:	add	r1, r6, #12
   16880:	mov	r0, r4
   16884:	bl	20d74 <flatcc_builder_check_required@@Base>
   16888:	cmp	r0, #0
   1688c:	beq	16ad0 <gen_monster@@Base+0x8f8>
   16890:	mov	r0, r4
   16894:	bl	20e0c <flatcc_builder_end_table@@Base>
   16898:	subs	r1, r0, #0
   1689c:	beq	168a8 <gen_monster@@Base+0x6d0>
   168a0:	mov	r0, r4
   168a4:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   168a8:	mov	r1, #36	; 0x24
   168ac:	mov	r0, r4
   168b0:	bl	203cc <flatcc_builder_start_table@@Base>
   168b4:	mov	r1, #8
   168b8:	mov	r0, r4
   168bc:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   168c0:	ldr	r1, [pc, #680]	; 16b70 <gen_monster@@Base+0x998>
   168c4:	cmp	r0, #0
   168c8:	strne	r5, [r0]
   168cc:	mov	r0, r4
   168d0:	bl	2217c <flatcc_builder_create_string_str@@Base>
   168d4:	subs	r5, r0, #0
   168d8:	beq	168f0 <gen_monster@@Base+0x718>
   168dc:	mov	r1, #3
   168e0:	mov	r0, r4
   168e4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   168e8:	cmp	r0, #0
   168ec:	strne	r5, [r0]
   168f0:	mov	r3, #1
   168f4:	mov	r2, r3
   168f8:	mov	r1, #7
   168fc:	mov	r0, r4
   16900:	bl	22538 <flatcc_builder_table_add@@Base>
   16904:	mov	r2, #1
   16908:	add	r1, r6, #12
   1690c:	cmp	r0, #0
   16910:	movne	r3, #1
   16914:	strbne	r3, [r0]
   16918:	mov	r0, r4
   1691c:	bl	20d74 <flatcc_builder_check_required@@Base>
   16920:	cmp	r0, #0
   16924:	beq	16ad0 <gen_monster@@Base+0x8f8>
   16928:	mov	r0, r4
   1692c:	bl	20e0c <flatcc_builder_end_table@@Base>
   16930:	subs	r1, r0, #0
   16934:	beq	16940 <gen_monster@@Base+0x768>
   16938:	mov	r0, r4
   1693c:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   16940:	mov	r0, r4
   16944:	bl	2132c <flatcc_builder_end_offset_vector@@Base>
   16948:	subs	r5, r0, #0
   1694c:	beq	16964 <gen_monster@@Base+0x78c>
   16950:	mov	r1, #11
   16954:	mov	r0, r4
   16958:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1695c:	cmp	r0, #0
   16960:	strne	r5, [r0]
   16964:	mov	r2, #1
   16968:	add	r1, r6, #12
   1696c:	mov	r0, r4
   16970:	bl	20d74 <flatcc_builder_check_required@@Base>
   16974:	cmp	r0, #0
   16978:	beq	16ad0 <gen_monster@@Base+0x8f8>
   1697c:	mov	r0, r4
   16980:	bl	20e0c <flatcc_builder_end_table@@Base>
   16984:	subs	r5, r0, #0
   16988:	beq	169a0 <gen_monster@@Base+0x7c8>
   1698c:	mov	r1, #12
   16990:	mov	r0, r4
   16994:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16998:	cmp	r0, #0
   1699c:	strne	r5, [r0]
   169a0:	mov	r3, #1
   169a4:	mov	r2, r3
   169a8:	mov	r1, #15
   169ac:	mov	r0, r4
   169b0:	bl	22538 <flatcc_builder_table_add@@Base>
   169b4:	mov	r1, #3
   169b8:	cmp	r0, #0
   169bc:	movne	r3, #0
   169c0:	strbne	r3, [r0]
   169c4:	mov	r0, r4
   169c8:	bl	203cc <flatcc_builder_start_table@@Base>
   169cc:	mov	r2, #0
   169d0:	ldr	r1, [pc, #412]	; 16b74 <gen_monster@@Base+0x99c>
   169d4:	mov	r0, r4
   169d8:	bl	20d74 <flatcc_builder_check_required@@Base>
   169dc:	cmp	r0, #0
   169e0:	beq	16b10 <gen_monster@@Base+0x938>
   169e4:	mov	r0, r4
   169e8:	bl	20e0c <flatcc_builder_end_table@@Base>
   169ec:	subs	r5, r0, #0
   169f0:	beq	16a08 <gen_monster@@Base+0x830>
   169f4:	mov	r1, #14
   169f8:	mov	r0, r4
   169fc:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16a00:	cmp	r0, #0
   16a04:	strne	r5, [r0]
   16a08:	add	r1, r6, #12
   16a0c:	mov	r2, #1
   16a10:	mov	r0, r4
   16a14:	bl	20d74 <flatcc_builder_check_required@@Base>
   16a18:	cmp	r0, #0
   16a1c:	beq	16ad0 <gen_monster@@Base+0x8f8>
   16a20:	mov	r0, r4
   16a24:	bl	20e0c <flatcc_builder_end_table@@Base>
   16a28:	mov	r1, r0
   16a2c:	mov	r0, r4
   16a30:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   16a34:	mov	r0, #0
   16a38:	add	sp, sp, #52	; 0x34
   16a3c:	pop	{r4, r5, r6, r7, pc}
   16a40:	ldr	r3, [r1]
   16a44:	udf	#0
   16a48:	mov	r3, r6
   16a4c:	mov	r2, r6
   16a50:	ldr	r1, [pc, #236]	; 16b44 <gen_monster@@Base+0x96c>
   16a54:	mov	r0, r4
   16a58:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   16a5c:	cmp	r0, #0
   16a60:	beq	16240 <gen_monster@@Base+0x68>
   16a64:	b	1624c <gen_monster@@Base+0x74>
   16a68:	mov	r1, #3
   16a6c:	mov	r0, r4
   16a70:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16a74:	cmp	r0, #0
   16a78:	strne	r5, [r0]
   16a7c:	b	1647c <gen_monster@@Base+0x2a4>
   16a80:	mov	r1, #36	; 0x24
   16a84:	mov	r0, r4
   16a88:	bl	203cc <flatcc_builder_start_table@@Base>
   16a8c:	ldr	r1, [pc, #216]	; 16b6c <gen_monster@@Base+0x994>
   16a90:	mov	r0, r4
   16a94:	bl	2217c <flatcc_builder_create_string_str@@Base>
   16a98:	subs	r7, r0, #0
   16a9c:	bne	16b28 <gen_monster@@Base+0x950>
   16aa0:	mov	r0, r4
   16aa4:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   16aa8:	mov	r1, #36	; 0x24
   16aac:	mov	r0, r4
   16ab0:	bl	203cc <flatcc_builder_start_table@@Base>
   16ab4:	b	167ac <gen_monster@@Base+0x5d4>
   16ab8:	mov	r0, r4
   16abc:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   16ac0:	mov	r1, #36	; 0x24
   16ac4:	mov	r0, r4
   16ac8:	bl	203cc <flatcc_builder_start_table@@Base>
   16acc:	b	16774 <gen_monster@@Base+0x59c>
   16ad0:	bl	13024 <__assert_fail@plt+0x598>
   16ad4:	ldr	r3, [pc, #156]	; 16b78 <gen_monster@@Base+0x9a0>
   16ad8:	ldr	r2, [pc, #156]	; 16b7c <gen_monster@@Base+0x9a4>
   16adc:	ldr	r1, [pc, #156]	; 16b80 <gen_monster@@Base+0x9a8>
   16ae0:	ldr	r0, [pc, #156]	; 16b84 <gen_monster@@Base+0x9ac>
   16ae4:	bl	12a8c <__assert_fail@plt>
   16ae8:	ldr	r3, [pc, #136]	; 16b78 <gen_monster@@Base+0x9a0>
   16aec:	ldr	r2, [pc, #148]	; 16b88 <gen_monster@@Base+0x9b0>
   16af0:	ldr	r1, [pc, #136]	; 16b80 <gen_monster@@Base+0x9a8>
   16af4:	ldr	r0, [pc, #144]	; 16b8c <gen_monster@@Base+0x9b4>
   16af8:	bl	12a8c <__assert_fail@plt>
   16afc:	ldr	r3, [pc, #116]	; 16b78 <gen_monster@@Base+0x9a0>
   16b00:	ldr	r2, [pc, #136]	; 16b90 <gen_monster@@Base+0x9b8>
   16b04:	ldr	r1, [pc, #116]	; 16b80 <gen_monster@@Base+0x9a8>
   16b08:	ldr	r0, [pc, #132]	; 16b94 <gen_monster@@Base+0x9bc>
   16b0c:	bl	12a8c <__assert_fail@plt>
   16b10:	bl	13048 <__assert_fail@plt+0x5bc>
   16b14:	ldr	r3, [pc, #92]	; 16b78 <gen_monster@@Base+0x9a0>
   16b18:	ldr	r2, [pc, #120]	; 16b98 <gen_monster@@Base+0x9c0>
   16b1c:	ldr	r1, [pc, #92]	; 16b80 <gen_monster@@Base+0x9a8>
   16b20:	ldr	r0, [pc, #116]	; 16b9c <gen_monster@@Base+0x9c4>
   16b24:	bl	12a8c <__assert_fail@plt>
   16b28:	mov	r1, #3
   16b2c:	mov	r0, r4
   16b30:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16b34:	cmp	r0, #0
   16b38:	bne	16754 <gen_monster@@Base+0x57c>
   16b3c:	b	16aa0 <gen_monster@@Base+0x8c8>
   16b40:	andeq	r5, r2, r0, lsl #9
   16b44:	ldrdeq	r5, [r2], -r0
   16b48:	subgt	ip, ip, sp, asr #25
   16b4c:	strdeq	r5, [r2], -r8
   16b50:	andeq	r6, r2, ip, ror r3
   16b54:	andeq	r5, r2, ip, ror #7
   16b58:			; <UNDEFINED> instruction: 0x000263bc
   16b5c:	andeq	r6, r2, r4, lsl #16
   16b60:	andeq	r6, r2, r0, ror #9
   16b64:	andeq	r5, r2, r8, asr r4
   16b68:	andeq	r6, r2, ip, lsr r5
   16b6c:	andeq	r6, r2, r4, lsl #12
   16b70:	andeq	r6, r2, r4, asr r8
   16b74:	muleq	r2, r8, r4
   16b78:	andeq	r5, r2, ip, lsl #9
   16b7c:	muleq	r0, fp, r3
   16b80:	andeq	r6, r2, r4, lsl r3
   16b84:	ldrdeq	r6, [r2], -r0
   16b88:	andeq	r0, r0, r1, lsr #7
   16b8c:	andeq	r6, r2, r0, lsr #16
   16b90:	andeq	r0, r0, r1, ror r3
   16b94:	andeq	r6, r2, r0, lsl #15
   16b98:	andeq	r0, r0, r3, ror r3
   16b9c:	andeq	r6, r2, r8, lsr #15

00016ba0 <test_monster@@Base>:
   16ba0:	push	{r4, r5, lr}
   16ba4:	mov	r1, #0
   16ba8:	sub	sp, sp, #12
   16bac:	mov	r4, r0
   16bb0:	bl	161d8 <gen_monster@@Base>
   16bb4:	mov	r0, r4
   16bb8:	add	r1, sp, #4
   16bbc:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   16bc0:	ldr	r3, [pc, #104]	; 16c30 <test_monster@@Base+0x90>
   16bc4:	ldr	r2, [sp, #4]
   16bc8:	ldr	r3, [r3]
   16bcc:	mov	r1, r0
   16bd0:	mov	r4, r0
   16bd4:	ldr	r0, [pc, #88]	; 16c34 <test_monster@@Base+0x94>
   16bd8:	bl	13458 <_start@@Base+0x148>
   16bdc:	mov	r0, r4
   16be0:	ldr	r3, [pc, #80]	; 16c38 <test_monster@@Base+0x98>
   16be4:	ldr	r2, [pc, #80]	; 16c3c <test_monster@@Base+0x9c>
   16be8:	ldr	r1, [sp, #4]
   16bec:	bl	243ac <flatcc_verify_table_as_root@@Base>
   16bf0:	cmp	r0, #0
   16bf4:	bne	16c18 <test_monster@@Base+0x78>
   16bf8:	mov	r0, r4
   16bfc:	bl	154ec <verify_monster@@Base>
   16c00:	mov	r5, r0
   16c04:	mov	r0, r4
   16c08:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   16c0c:	mov	r0, r5
   16c10:	add	sp, sp, #12
   16c14:	pop	{r4, r5, pc}
   16c18:	bl	2368c <flatcc_verify_error_string@@Base>
   16c1c:	mvn	r5, #0
   16c20:	mov	r1, r0
   16c24:	ldr	r0, [pc, #20]	; 16c40 <test_monster@@Base+0xa0>
   16c28:	bl	1299c <printf@plt>
   16c2c:	b	16c0c <test_monster@@Base+0x6c>
   16c30:	andeq	sl, r3, r0, ror r0
   16c34:	muleq	r2, ip, sp
   16c38:	andeq	r3, r1, r0, ror #19
   16c3c:	ldrdeq	r5, [r2], -r0
   16c40:	andeq	r6, r2, r0, ror #16

00016c44 <test_monster_with_size@@Base>:
   16c44:	push	{r4, r5, lr}
   16c48:	mov	r1, #1
   16c4c:	sub	sp, sp, #12
   16c50:	mov	r4, r0
   16c54:	bl	161d8 <gen_monster@@Base>
   16c58:	mov	r0, r4
   16c5c:	add	r1, sp, #4
   16c60:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   16c64:	ldr	r3, [pc, #184]	; 16d24 <test_monster_with_size@@Base+0xe0>
   16c68:	ldr	r2, [sp, #4]
   16c6c:	ldr	r3, [r3]
   16c70:	mov	r4, r0
   16c74:	mov	r1, r0
   16c78:	ldr	r0, [pc, #168]	; 16d28 <test_monster_with_size@@Base+0xe4>
   16c7c:	bl	13458 <_start@@Base+0x148>
   16c80:	tst	r4, #15
   16c84:	bne	16d08 <test_monster_with_size@@Base+0xc4>
   16c88:	mov	r5, r4
   16c8c:	ldr	r2, [sp, #4]
   16c90:	ldr	r3, [r5], #4
   16c94:	sub	r1, r2, #4
   16c98:	cmp	r1, r3
   16c9c:	bne	16cd8 <test_monster_with_size@@Base+0x94>
   16ca0:	ldr	r3, [pc, #132]	; 16d2c <test_monster_with_size@@Base+0xe8>
   16ca4:	ldr	r2, [pc, #132]	; 16d30 <test_monster_with_size@@Base+0xec>
   16ca8:	mov	r0, r5
   16cac:	bl	243ac <flatcc_verify_table_as_root@@Base>
   16cb0:	cmp	r0, #0
   16cb4:	bne	16cf0 <test_monster_with_size@@Base+0xac>
   16cb8:	mov	r0, r5
   16cbc:	bl	154ec <verify_monster@@Base>
   16cc0:	mov	r5, r0
   16cc4:	mov	r0, r4
   16cc8:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   16ccc:	mov	r0, r5
   16cd0:	add	sp, sp, #12
   16cd4:	pop	{r4, r5, pc}
   16cd8:	mov	r2, r1
   16cdc:	ldr	r0, [pc, #80]	; 16d34 <test_monster_with_size@@Base+0xf0>
   16ce0:	mov	r1, r3
   16ce4:	bl	1299c <printf@plt>
   16ce8:	mvn	r5, #0
   16cec:	b	16ccc <test_monster_with_size@@Base+0x88>
   16cf0:	bl	2368c <flatcc_verify_error_string@@Base>
   16cf4:	mvn	r5, #0
   16cf8:	mov	r1, r0
   16cfc:	ldr	r0, [pc, #52]	; 16d38 <test_monster_with_size@@Base+0xf4>
   16d00:	bl	1299c <printf@plt>
   16d04:	b	16ccc <test_monster_with_size@@Base+0x88>
   16d08:	ldr	r0, [pc, #44]	; 16d3c <test_monster_with_size@@Base+0xf8>
   16d0c:	bl	1299c <printf@plt>
   16d10:	mov	r1, r4
   16d14:	ldr	r0, [pc, #36]	; 16d40 <test_monster_with_size@@Base+0xfc>
   16d18:	bl	1299c <printf@plt>
   16d1c:	mvn	r5, #0
   16d20:	b	16ccc <test_monster_with_size@@Base+0x88>
   16d24:	andeq	sl, r3, r0, ror r0
   16d28:	andeq	r6, r2, ip, lsl #17
   16d2c:	andeq	r3, r1, r0, ror #19
   16d30:	ldrdeq	r5, [r2], -r0
   16d34:	andeq	r6, r2, ip, lsl #18
   16d38:	andeq	r6, r2, r4, asr #18
   16d3c:	andeq	r6, r2, r4, lsr #17
   16d40:	strdeq	r6, [r2], -r8

00016d44 <test_string@@Base>:
   16d44:	push	{r4, r5, r6, lr}
   16d48:	mov	r4, r0
   16d4c:	bl	1de88 <flatcc_builder_reset@@Base>
   16d50:	mov	r3, #0
   16d54:	mov	r0, r4
   16d58:	mov	r2, r3
   16d5c:	ldr	r1, [pc, #536]	; 16f7c <test_string@@Base+0x238>
   16d60:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   16d64:	cmp	r0, #0
   16d68:	bne	16d78 <test_string@@Base+0x34>
   16d6c:	mov	r1, #36	; 0x24
   16d70:	mov	r0, r4
   16d74:	bl	203cc <flatcc_builder_start_table@@Base>
   16d78:	mov	r0, r4
   16d7c:	bl	20180 <flatcc_builder_start_string@@Base>
   16d80:	mov	r1, #3
   16d84:	mov	r0, r4
   16d88:	bl	1f6c0 <flatcc_builder_extend_string@@Base>
   16d8c:	mov	r2, #50	; 0x32
   16d90:	mov	r3, #51	; 0x33
   16d94:	mov	r1, #49	; 0x31
   16d98:	strb	r1, [r0]
   16d9c:	strb	r2, [r0, #1]
   16da0:	strb	r3, [r0, #2]
   16da4:	ldr	r1, [pc, #468]	; 16f80 <test_string@@Base+0x23c>
   16da8:	mov	r0, r4
   16dac:	bl	1f88c <flatcc_builder_append_string_str@@Base>
   16db0:	mov	r0, r4
   16db4:	bl	2252c <flatcc_builder_string_len@@Base>
   16db8:	cmp	r0, #4
   16dbc:	bne	16f68 <test_string@@Base+0x224>
   16dc0:	mov	r2, #30
   16dc4:	ldr	r1, [pc, #440]	; 16f84 <test_string@@Base+0x240>
   16dc8:	mov	r0, r4
   16dcc:	bl	1f97c <flatcc_builder_append_string_strn@@Base>
   16dd0:	mov	r0, r4
   16dd4:	bl	2252c <flatcc_builder_string_len@@Base>
   16dd8:	cmp	r0, #8
   16ddc:	bne	16f54 <test_string@@Base+0x210>
   16de0:	mov	r2, #2
   16de4:	ldr	r1, [pc, #412]	; 16f88 <test_string@@Base+0x244>
   16de8:	mov	r0, r4
   16dec:	bl	1f7a4 <flatcc_builder_append_string@@Base>
   16df0:	mov	r0, r4
   16df4:	bl	2252c <flatcc_builder_string_len@@Base>
   16df8:	cmp	r0, #10
   16dfc:	bne	16f40 <test_string@@Base+0x1fc>
   16e00:	mov	r1, #3
   16e04:	mov	r0, r4
   16e08:	bl	1fba0 <flatcc_builder_truncate_string@@Base>
   16e0c:	mov	r0, r4
   16e10:	bl	2252c <flatcc_builder_string_len@@Base>
   16e14:	cmp	r0, #7
   16e18:	bne	16f2c <test_string@@Base+0x1e8>
   16e1c:	mov	r0, r4
   16e20:	bl	22524 <flatcc_builder_string_edit@@Base>
   16e24:	mov	r3, #46	; 0x2e
   16e28:	strb	r3, [r0, #4]
   16e2c:	mov	r0, r4
   16e30:	bl	22368 <flatcc_builder_end_string@@Base>
   16e34:	subs	r5, r0, #0
   16e38:	beq	16e50 <test_string@@Base+0x10c>
   16e3c:	mov	r1, #3
   16e40:	mov	r0, r4
   16e44:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   16e48:	cmp	r0, #0
   16e4c:	strne	r5, [r0]
   16e50:	mov	r2, #1
   16e54:	ldr	r1, [pc, #304]	; 16f8c <test_string@@Base+0x248>
   16e58:	mov	r0, r4
   16e5c:	bl	20d74 <flatcc_builder_check_required@@Base>
   16e60:	cmp	r0, #0
   16e64:	beq	16f28 <test_string@@Base+0x1e4>
   16e68:	mov	r0, r4
   16e6c:	bl	20e0c <flatcc_builder_end_table@@Base>
   16e70:	mov	r1, r0
   16e74:	mov	r0, r4
   16e78:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   16e7c:	mov	r0, r4
   16e80:	mov	r1, #0
   16e84:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   16e88:	cmp	r0, #0
   16e8c:	beq	16f14 <test_string@@Base+0x1d0>
   16e90:	ldr	r3, [pc, #248]	; 16f90 <test_string@@Base+0x24c>
   16e94:	ldr	r2, [r0, #4]
   16e98:	cmp	r2, r3
   16e9c:	beq	16ea4 <test_string@@Base+0x160>
   16ea0:	bl	12d04 <__assert_fail@plt+0x278>
   16ea4:	ldr	r2, [r0]
   16ea8:	adds	r3, r0, r2
   16eac:	beq	16ea0 <test_string@@Base+0x15c>
   16eb0:	ldr	r2, [r0, r2]
   16eb4:	sub	r2, r3, r2
   16eb8:	ldrh	r1, [r2]
   16ebc:	cmp	r1, #11
   16ec0:	bhi	16ed8 <test_string@@Base+0x194>
   16ec4:	ldr	r3, [pc, #200]	; 16f94 <test_string@@Base+0x250>
   16ec8:	ldr	r2, [pc, #200]	; 16f98 <test_string@@Base+0x254>
   16ecc:	ldr	r1, [pc, #200]	; 16f9c <test_string@@Base+0x258>
   16ed0:	ldr	r0, [pc, #200]	; 16fa0 <test_string@@Base+0x25c>
   16ed4:	bl	12a8c <__assert_fail@plt>
   16ed8:	ldrh	r2, [r2, #10]
   16edc:	cmp	r2, #0
   16ee0:	beq	16ec4 <test_string@@Base+0x180>
   16ee4:	ldr	r0, [r3, r2]
   16ee8:	add	r3, r3, r2
   16eec:	add	r0, r0, #4
   16ef0:	add	r0, r3, r0
   16ef4:	ldr	r1, [pc, #168]	; 16fa4 <test_string@@Base+0x260>
   16ef8:	bl	12990 <strcmp@plt>
   16efc:	cmp	r0, #0
   16f00:	popeq	{r4, r5, r6, pc}
   16f04:	ldr	r0, [pc, #156]	; 16fa8 <test_string@@Base+0x264>
   16f08:	bl	129f0 <puts@plt>
   16f0c:	mvn	r0, #0
   16f10:	pop	{r4, r5, r6, pc}
   16f14:	ldr	r3, [pc, #144]	; 16fac <test_string@@Base+0x268>
   16f18:	ldr	r2, [pc, #144]	; 16fb0 <test_string@@Base+0x26c>
   16f1c:	ldr	r1, [pc, #144]	; 16fb4 <test_string@@Base+0x270>
   16f20:	ldr	r0, [pc, #144]	; 16fb8 <test_string@@Base+0x274>
   16f24:	bl	12a8c <__assert_fail@plt>
   16f28:	bl	13024 <__assert_fail@plt+0x598>
   16f2c:	ldr	r3, [pc, #120]	; 16fac <test_string@@Base+0x268>
   16f30:	ldr	r2, [pc, #132]	; 16fbc <test_string@@Base+0x278>
   16f34:	ldr	r1, [pc, #120]	; 16fb4 <test_string@@Base+0x270>
   16f38:	ldr	r0, [pc, #128]	; 16fc0 <test_string@@Base+0x27c>
   16f3c:	bl	12a8c <__assert_fail@plt>
   16f40:	ldr	r3, [pc, #100]	; 16fac <test_string@@Base+0x268>
   16f44:	ldr	r2, [pc, #120]	; 16fc4 <test_string@@Base+0x280>
   16f48:	ldr	r1, [pc, #100]	; 16fb4 <test_string@@Base+0x270>
   16f4c:	ldr	r0, [pc, #116]	; 16fc8 <test_string@@Base+0x284>
   16f50:	bl	12a8c <__assert_fail@plt>
   16f54:	ldr	r3, [pc, #80]	; 16fac <test_string@@Base+0x268>
   16f58:	ldr	r2, [pc, #108]	; 16fcc <test_string@@Base+0x288>
   16f5c:	ldr	r1, [pc, #80]	; 16fb4 <test_string@@Base+0x270>
   16f60:	ldr	r0, [pc, #104]	; 16fd0 <test_string@@Base+0x28c>
   16f64:	bl	12a8c <__assert_fail@plt>
   16f68:	ldr	r3, [pc, #60]	; 16fac <test_string@@Base+0x268>
   16f6c:	ldr	r2, [pc, #96]	; 16fd4 <test_string@@Base+0x290>
   16f70:	ldr	r1, [pc, #60]	; 16fb4 <test_string@@Base+0x270>
   16f74:	ldr	r0, [pc, #92]	; 16fd8 <test_string@@Base+0x294>
   16f78:	bl	12a8c <__assert_fail@plt>
   16f7c:	ldrdeq	r5, [r2], -r0
   16f80:	andeq	r6, r2, r4, lsr #19
   16f84:	andeq	r6, r2, r8, lsr #19
   16f88:	ldrdeq	r6, [r2], -r8
   16f8c:	strdeq	r5, [r2], -r8
   16f90:	movtpl	r4, #61261	; 0xef4d
   16f94:	andeq	r5, r2, r0, lsl #4
   16f98:			; <UNDEFINED> instruction: 0x000002bb
   16f9c:	andeq	r5, r2, r4, asr #13
   16fa0:	strdeq	r5, [r2], -r0
   16fa4:	andeq	r6, r2, ip, lsr #20
   16fa8:	andeq	r6, r2, r4, lsr sl
   16fac:	muleq	r2, ip, r4
   16fb0:	andeq	r0, r0, r5, asr #8
   16fb4:	andeq	r6, r2, r4, lsl r3
   16fb8:	muleq	r2, r4, ip
   16fbc:	andeq	r0, r0, lr, lsr r4
   16fc0:	andeq	r6, r2, r4, lsl #20
   16fc4:	andeq	r0, r0, ip, lsr r4
   16fc8:	ldrdeq	r6, [r2], -ip
   16fcc:	andeq	r0, r0, sl, lsr r4
   16fd0:			; <UNDEFINED> instruction: 0x000269b0
   16fd4:	andeq	r0, r0, r8, lsr r4
   16fd8:	andeq	r6, r2, r0, lsl #19

00016fdc <test_sort_find@@Base>:
   16fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fe0:	sub	sp, sp, #44	; 0x2c
   16fe4:	mov	r4, r0
   16fe8:	bl	1de88 <flatcc_builder_reset@@Base>
   16fec:	mov	r3, #0
   16ff0:	mov	r0, r4
   16ff4:	mov	r2, r3
   16ff8:	ldr	r1, [pc, #3744]	; 17ea0 <test_sort_find@@Base+0xec4>
   16ffc:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   17000:	cmp	r0, #0
   17004:	bne	17014 <test_sort_find@@Base+0x38>
   17008:	mov	r1, #36	; 0x24
   1700c:	mov	r0, r4
   17010:	bl	203cc <flatcc_builder_start_table@@Base>
   17014:	ldr	r1, [pc, #3720]	; 17ea4 <test_sort_find@@Base+0xec8>
   17018:	mov	r0, r4
   1701c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   17020:	subs	r5, r0, #0
   17024:	beq	1703c <test_sort_find@@Base+0x60>
   17028:	mov	r1, #3
   1702c:	mov	r0, r4
   17030:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   17034:	cmp	r0, #0
   17038:	strne	r5, [r0]
   1703c:	mov	r0, r4
   17040:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   17044:	mov	r1, #36	; 0x24
   17048:	mov	r0, r4
   1704c:	bl	203cc <flatcc_builder_start_table@@Base>
   17050:	ldr	r1, [pc, #3664]	; 17ea8 <test_sort_find@@Base+0xecc>
   17054:	mov	r0, r4
   17058:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1705c:	subs	r5, r0, #0
   17060:	beq	17078 <test_sort_find@@Base+0x9c>
   17064:	mov	r1, #3
   17068:	mov	r0, r4
   1706c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   17070:	cmp	r0, #0
   17074:	strne	r5, [r0]
   17078:	ldr	r5, [pc, #3628]	; 17eac <test_sort_find@@Base+0xed0>
   1707c:	mov	r2, #1
   17080:	add	r1, r5, #12
   17084:	mov	r0, r4
   17088:	bl	20d74 <flatcc_builder_check_required@@Base>
   1708c:	cmp	r0, #0
   17090:	beq	1850c <test_sort_find@@Base+0x1530>
   17094:	mov	r0, r4
   17098:	bl	20e0c <flatcc_builder_end_table@@Base>
   1709c:	subs	r1, r0, #0
   170a0:	beq	170ac <test_sort_find@@Base+0xd0>
   170a4:	mov	r0, r4
   170a8:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   170ac:	mov	r1, #36	; 0x24
   170b0:	mov	r0, r4
   170b4:	bl	203cc <flatcc_builder_start_table@@Base>
   170b8:	ldr	r1, [pc, #3568]	; 17eb0 <test_sort_find@@Base+0xed4>
   170bc:	mov	r0, r4
   170c0:	bl	2217c <flatcc_builder_create_string_str@@Base>
   170c4:	subs	r6, r0, #0
   170c8:	beq	170e0 <test_sort_find@@Base+0x104>
   170cc:	mov	r1, #3
   170d0:	mov	r0, r4
   170d4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   170d8:	cmp	r0, #0
   170dc:	strne	r6, [r0]
   170e0:	mov	r2, #1
   170e4:	add	r1, r5, #12
   170e8:	mov	r0, r4
   170ec:	bl	20d74 <flatcc_builder_check_required@@Base>
   170f0:	cmp	r0, #0
   170f4:	beq	1850c <test_sort_find@@Base+0x1530>
   170f8:	mov	r0, r4
   170fc:	bl	20e0c <flatcc_builder_end_table@@Base>
   17100:	subs	r1, r0, #0
   17104:	beq	17110 <test_sort_find@@Base+0x134>
   17108:	mov	r0, r4
   1710c:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   17110:	mov	r1, #36	; 0x24
   17114:	mov	r0, r4
   17118:	bl	203cc <flatcc_builder_start_table@@Base>
   1711c:	ldr	r1, [pc, #3472]	; 17eb4 <test_sort_find@@Base+0xed8>
   17120:	mov	r0, r4
   17124:	bl	2217c <flatcc_builder_create_string_str@@Base>
   17128:	subs	r6, r0, #0
   1712c:	beq	17144 <test_sort_find@@Base+0x168>
   17130:	mov	r1, #3
   17134:	mov	r0, r4
   17138:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1713c:	cmp	r0, #0
   17140:	strne	r6, [r0]
   17144:	mov	r2, #1
   17148:	add	r1, r5, #12
   1714c:	mov	r0, r4
   17150:	bl	20d74 <flatcc_builder_check_required@@Base>
   17154:	cmp	r0, #0
   17158:	beq	1850c <test_sort_find@@Base+0x1530>
   1715c:	mov	r0, r4
   17160:	bl	20e0c <flatcc_builder_end_table@@Base>
   17164:	subs	r1, r0, #0
   17168:	beq	17174 <test_sort_find@@Base+0x198>
   1716c:	mov	r0, r4
   17170:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   17174:	mov	r1, #36	; 0x24
   17178:	mov	r0, r4
   1717c:	bl	203cc <flatcc_builder_start_table@@Base>
   17180:	ldr	r1, [pc, #3376]	; 17eb8 <test_sort_find@@Base+0xedc>
   17184:	mov	r0, r4
   17188:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1718c:	subs	r6, r0, #0
   17190:	beq	171a8 <test_sort_find@@Base+0x1cc>
   17194:	mov	r1, #3
   17198:	mov	r0, r4
   1719c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   171a0:	cmp	r0, #0
   171a4:	strne	r6, [r0]
   171a8:	mov	r2, #1
   171ac:	add	r1, r5, #12
   171b0:	mov	r0, r4
   171b4:	bl	20d74 <flatcc_builder_check_required@@Base>
   171b8:	cmp	r0, #0
   171bc:	beq	1850c <test_sort_find@@Base+0x1530>
   171c0:	mov	r0, r4
   171c4:	bl	20e0c <flatcc_builder_end_table@@Base>
   171c8:	subs	r1, r0, #0
   171cc:	beq	171d8 <test_sort_find@@Base+0x1fc>
   171d0:	mov	r0, r4
   171d4:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   171d8:	mov	r1, #36	; 0x24
   171dc:	mov	r0, r4
   171e0:	bl	203cc <flatcc_builder_start_table@@Base>
   171e4:	ldr	r1, [pc, #3272]	; 17eb4 <test_sort_find@@Base+0xed8>
   171e8:	mov	r0, r4
   171ec:	bl	2217c <flatcc_builder_create_string_str@@Base>
   171f0:	subs	r6, r0, #0
   171f4:	beq	1720c <test_sort_find@@Base+0x230>
   171f8:	mov	r1, #3
   171fc:	mov	r0, r4
   17200:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   17204:	cmp	r0, #0
   17208:	strne	r6, [r0]
   1720c:	mov	r2, #1
   17210:	add	r1, r5, #12
   17214:	mov	r0, r4
   17218:	bl	20d74 <flatcc_builder_check_required@@Base>
   1721c:	cmp	r0, #0
   17220:	beq	1850c <test_sort_find@@Base+0x1530>
   17224:	mov	r0, r4
   17228:	bl	20e0c <flatcc_builder_end_table@@Base>
   1722c:	subs	r1, r0, #0
   17230:	beq	1723c <test_sort_find@@Base+0x260>
   17234:	mov	r0, r4
   17238:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   1723c:	mov	r0, r4
   17240:	bl	2132c <flatcc_builder_end_offset_vector@@Base>
   17244:	subs	r6, r0, #0
   17248:	beq	17260 <test_sort_find@@Base+0x284>
   1724c:	mov	r1, #11
   17250:	mov	r0, r4
   17254:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   17258:	cmp	r0, #0
   1725c:	strne	r6, [r0]
   17260:	add	r1, r5, #12
   17264:	mov	r2, #1
   17268:	mov	r0, r4
   1726c:	bl	20d74 <flatcc_builder_check_required@@Base>
   17270:	cmp	r0, #0
   17274:	beq	1850c <test_sort_find@@Base+0x1530>
   17278:	mov	r0, r4
   1727c:	bl	20e0c <flatcc_builder_end_table@@Base>
   17280:	mov	r1, r0
   17284:	mov	r0, r4
   17288:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1728c:	mov	r0, r4
   17290:	add	r1, sp, #36	; 0x24
   17294:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   17298:	ldr	r3, [pc, #3100]	; 17ebc <test_sort_find@@Base+0xee0>
   1729c:	ldr	r2, [sp, #36]	; 0x24
   172a0:	ldr	r3, [r3]
   172a4:	mov	r4, r0
   172a8:	str	r0, [sp, #24]
   172ac:	mov	r1, r0
   172b0:	ldr	r0, [pc, #3080]	; 17ec0 <test_sort_find@@Base+0xee4>
   172b4:	bl	13458 <_start@@Base+0x148>
   172b8:	cmp	r4, #0
   172bc:	beq	172d0 <test_sort_find@@Base+0x2f4>
   172c0:	ldr	r3, [pc, #3068]	; 17ec4 <test_sort_find@@Base+0xee8>
   172c4:	ldr	r2, [r4, #4]
   172c8:	cmp	r2, r3
   172cc:	beq	172d4 <test_sort_find@@Base+0x2f8>
   172d0:	bl	12c8c <__assert_fail@plt+0x200>
   172d4:	ldr	r2, [sp, #24]
   172d8:	ldr	r3, [r2]
   172dc:	adds	r2, r2, r3
   172e0:	beq	172d0 <test_sort_find@@Base+0x2f4>
   172e4:	ldr	r1, [sp, #24]
   172e8:	ldr	r3, [r1, r3]
   172ec:	sub	r3, r2, r3
   172f0:	ldrh	r1, [r3]
   172f4:	cmp	r1, #27
   172f8:	bhi	17310 <test_sort_find@@Base+0x334>
   172fc:	ldr	r3, [pc, #3012]	; 17ec8 <test_sort_find@@Base+0xeec>
   17300:	ldr	r2, [pc, #3012]	; 17ecc <test_sort_find@@Base+0xef0>
   17304:	ldr	r1, [pc, #3012]	; 17ed0 <test_sort_find@@Base+0xef4>
   17308:	ldr	r0, [pc, #3012]	; 17ed4 <test_sort_find@@Base+0xef8>
   1730c:	bl	12a8c <__assert_fail@plt>
   17310:	ldrh	r3, [r3, #26]
   17314:	cmp	r3, #0
   17318:	beq	172fc <test_sort_find@@Base+0x320>
   1731c:	ldr	r1, [r2, r3]
   17320:	add	r3, r2, r3
   17324:	add	r2, r1, #4
   17328:	adds	r6, r3, r2
   1732c:	str	r3, [sp, #16]
   17330:	str	r2, [sp, #20]
   17334:	beq	172fc <test_sort_find@@Base+0x320>
   17338:	ldr	r3, [r6, #-4]
   1733c:	cmp	r3, #0
   17340:	str	r3, [sp, #28]
   17344:	beq	1755c <test_sort_find@@Base+0x580>
   17348:	lsr	r2, r3, #1
   1734c:	sub	r3, r3, #1
   17350:	str	r3, [sp]
   17354:	lsl	r3, r2, #1
   17358:	str	r2, [sp, #12]
   1735c:	str	r3, [sp, #8]
   17360:	b	17460 <test_sort_find@@Base+0x484>
   17364:	ldr	r8, [r6, #-4]
   17368:	mov	r5, r9
   1736c:	lsl	fp, r4, #2
   17370:	cmp	r8, r4
   17374:	add	r2, r6, fp
   17378:	bls	17af8 <test_sort_find@@Base+0xb1c>
   1737c:	ldr	r7, [r6, r4, lsl #2]
   17380:	adds	r3, r2, r7
   17384:	beq	17af4 <test_sort_find@@Base+0xb18>
   17388:	ldr	r2, [r2, r7]
   1738c:	sub	r2, r3, r2
   17390:	ldrh	r1, [r2]
   17394:	cmp	r1, #11
   17398:	bls	177cc <test_sort_find@@Base+0x7f0>
   1739c:	ldrh	r0, [r2, #10]
   173a0:	cmp	r0, #0
   173a4:	beq	177cc <test_sort_find@@Base+0x7f0>
   173a8:	ldr	r2, [r3, r0]
   173ac:	cmp	r5, r8
   173b0:	add	r2, r2, #4
   173b4:	add	r0, r3, r0
   173b8:	lsl	r3, r5, #2
   173bc:	add	r0, r0, r2
   173c0:	add	r2, r6, r3
   173c4:	bcs	17af8 <test_sort_find@@Base+0xb1c>
   173c8:	ldr	r8, [r6, r5, lsl #2]
   173cc:	adds	r1, r2, r8
   173d0:	beq	17af4 <test_sort_find@@Base+0xb18>
   173d4:	ldr	r2, [r2, r8]
   173d8:	sub	r2, r1, r2
   173dc:	ldrh	ip, [r2]
   173e0:	cmp	ip, #11
   173e4:	bls	177cc <test_sort_find@@Base+0x7f0>
   173e8:	ldrh	ip, [r2, #10]
   173ec:	cmp	ip, #0
   173f0:	beq	177cc <test_sort_find@@Base+0x7f0>
   173f4:	ldr	r2, [r1, ip]
   173f8:	add	r1, r1, ip
   173fc:	add	r2, r2, #4
   17400:	adds	r1, r1, r2
   17404:	moveq	sl, #0
   17408:	ldrne	sl, [r1, #-4]
   1740c:	cmp	r0, #0
   17410:	beq	1781c <test_sort_find@@Base+0x840>
   17414:	ldr	r9, [r0, #-4]
   17418:	str	r3, [sp, #4]
   1741c:	cmp	sl, r9
   17420:	movcc	r2, sl
   17424:	movcs	r2, r9
   17428:	bl	12a74 <strncmp@plt>
   1742c:	ldr	r3, [sp, #4]
   17430:	cmp	r0, #0
   17434:	bne	177e0 <test_sort_find@@Base+0x804>
   17438:	cmp	sl, r9
   1743c:	bhi	177e4 <test_sort_find@@Base+0x808>
   17440:	ldr	r3, [sp, #12]
   17444:	sub	r3, r3, #1
   17448:	str	r3, [sp, #12]
   1744c:	cmn	r3, #1
   17450:	ldr	r3, [sp, #8]
   17454:	sub	r3, r3, #2
   17458:	str	r3, [sp, #8]
   1745c:	beq	1782c <test_sort_find@@Base+0x850>
   17460:	ldr	r2, [sp, #8]
   17464:	ldr	r3, [sp]
   17468:	cmp	r3, r2
   1746c:	movcs	r9, r2
   17470:	ldrcs	r4, [sp, #12]
   17474:	bcc	17440 <test_sort_find@@Base+0x464>
   17478:	ldr	r3, [sp]
   1747c:	cmp	r9, r3
   17480:	bcs	17364 <test_sort_find@@Base+0x388>
   17484:	ldr	r8, [r6, #-4]
   17488:	lsl	r3, r9, #2
   1748c:	cmp	r9, r8
   17490:	add	r1, r6, r3
   17494:	bcs	17af8 <test_sort_find@@Base+0xb1c>
   17498:	ldr	r0, [r6, r9, lsl #2]
   1749c:	adds	r2, r1, r0
   174a0:	beq	17af4 <test_sort_find@@Base+0xb18>
   174a4:	ldr	r1, [r1, r0]
   174a8:	sub	r1, r2, r1
   174ac:	ldrh	r0, [r1]
   174b0:	cmp	r0, #11
   174b4:	bls	177cc <test_sort_find@@Base+0x7f0>
   174b8:	ldrh	r1, [r1, #10]
   174bc:	cmp	r1, #0
   174c0:	beq	177cc <test_sort_find@@Base+0x7f0>
   174c4:	ldr	r0, [r2, r1]
   174c8:	add	r5, r9, #1
   174cc:	add	r2, r2, r1
   174d0:	add	r3, r3, #4
   174d4:	add	r0, r0, #4
   174d8:	cmp	r8, r5
   174dc:	add	r0, r2, r0
   174e0:	add	r2, r6, r3
   174e4:	bls	17af8 <test_sort_find@@Base+0xb1c>
   174e8:	ldr	r3, [r6, r3]
   174ec:	adds	r1, r2, r3
   174f0:	beq	17af4 <test_sort_find@@Base+0xb18>
   174f4:	ldr	r3, [r2, r3]
   174f8:	sub	r3, r1, r3
   174fc:	ldrh	r2, [r3]
   17500:	cmp	r2, #11
   17504:	bls	177cc <test_sort_find@@Base+0x7f0>
   17508:	ldrh	r2, [r3, #10]
   1750c:	cmp	r2, #0
   17510:	beq	177cc <test_sort_find@@Base+0x7f0>
   17514:	ldr	r3, [r1, r2]
   17518:	add	r1, r1, r2
   1751c:	add	r3, r3, #4
   17520:	adds	r1, r1, r3
   17524:	moveq	sl, #0
   17528:	ldrne	sl, [r1, #-4]
   1752c:	cmp	r0, #0
   17530:	beq	17824 <test_sort_find@@Base+0x848>
   17534:	ldr	r7, [r0, #-4]
   17538:	cmp	sl, r7
   1753c:	movcc	r2, sl
   17540:	movcs	r2, r7
   17544:	bl	12a74 <strncmp@plt>
   17548:	cmp	r0, #0
   1754c:	bne	17814 <test_sort_find@@Base+0x838>
   17550:	cmp	sl, r7
   17554:	movls	r5, r9
   17558:	b	1736c <test_sort_find@@Base+0x390>
   1755c:	ldr	r3, [pc, #2392]	; 17ebc <test_sort_find@@Base+0xee0>
   17560:	ldr	r2, [sp, #36]	; 0x24
   17564:	ldr	r1, [sp, #24]
   17568:	ldr	r3, [r3]
   1756c:	ldr	r0, [pc, #2404]	; 17ed8 <test_sort_find@@Base+0xefc>
   17570:	bl	13458 <_start@@Base+0x148>
   17574:	ldr	r3, [r6, #-4]
   17578:	cmp	r3, #5
   1757c:	bne	18470 <test_sort_find@@Base+0x1494>
   17580:	ldr	r3, [sp, #16]
   17584:	ldr	r2, [sp, #20]
   17588:	ldr	r2, [r3, r2]
   1758c:	adds	r3, r6, r2
   17590:	beq	17af4 <test_sort_find@@Base+0xb18>
   17594:	ldr	r2, [r6, r2]
   17598:	sub	r2, r3, r2
   1759c:	ldrh	r1, [r2]
   175a0:	cmp	r1, #11
   175a4:	bls	177cc <test_sort_find@@Base+0x7f0>
   175a8:	ldrh	r2, [r2, #10]
   175ac:	cmp	r2, #0
   175b0:	beq	177cc <test_sort_find@@Base+0x7f0>
   175b4:	ldr	r0, [r3, r2]
   175b8:	add	r3, r3, r2
   175bc:	add	r0, r0, #4
   175c0:	add	r0, r3, r0
   175c4:	ldr	r1, [pc, #2284]	; 17eb8 <test_sort_find@@Base+0xedc>
   175c8:	bl	12990 <strcmp@plt>
   175cc:	cmp	r0, #0
   175d0:	bne	184d0 <test_sort_find@@Base+0x14f4>
   175d4:	ldr	r5, [r6, #4]
   175d8:	add	r5, r5, #4
   175dc:	adds	r3, r6, r5
   175e0:	beq	17af4 <test_sort_find@@Base+0xb18>
   175e4:	ldr	r2, [r6, r5]
   175e8:	sub	r2, r3, r2
   175ec:	ldrh	r1, [r2]
   175f0:	cmp	r1, #11
   175f4:	bls	177cc <test_sort_find@@Base+0x7f0>
   175f8:	ldrh	r2, [r2, #10]
   175fc:	cmp	r2, #0
   17600:	beq	177cc <test_sort_find@@Base+0x7f0>
   17604:	ldr	r0, [r3, r2]
   17608:	add	r3, r3, r2
   1760c:	add	r0, r0, #4
   17610:	add	r0, r3, r0
   17614:	ldr	r1, [pc, #2200]	; 17eb4 <test_sort_find@@Base+0xed8>
   17618:	bl	12990 <strcmp@plt>
   1761c:	cmp	r0, #0
   17620:	bne	184e4 <test_sort_find@@Base+0x1508>
   17624:	ldr	r4, [r6, #8]
   17628:	add	r4, r4, #8
   1762c:	adds	r3, r6, r4
   17630:	beq	17af4 <test_sort_find@@Base+0xb18>
   17634:	ldr	r2, [r6, r4]
   17638:	sub	r2, r3, r2
   1763c:	ldrh	r1, [r2]
   17640:	cmp	r1, #11
   17644:	bls	177cc <test_sort_find@@Base+0x7f0>
   17648:	ldrh	r2, [r2, #10]
   1764c:	cmp	r2, #0
   17650:	beq	177cc <test_sort_find@@Base+0x7f0>
   17654:	ldr	r0, [r3, r2]
   17658:	add	r3, r3, r2
   1765c:	add	r0, r0, #4
   17660:	add	r0, r3, r0
   17664:	ldr	r1, [pc, #2120]	; 17eb4 <test_sort_find@@Base+0xed8>
   17668:	bl	12990 <strcmp@plt>
   1766c:	cmp	r0, #0
   17670:	bne	184f8 <test_sort_find@@Base+0x151c>
   17674:	ldr	r2, [r6, #12]
   17678:	add	r2, r2, #12
   1767c:	adds	r3, r6, r2
   17680:	beq	17af4 <test_sort_find@@Base+0xb18>
   17684:	ldr	r2, [r6, r2]
   17688:	sub	r2, r3, r2
   1768c:	ldrh	r1, [r2]
   17690:	cmp	r1, #11
   17694:	bls	177cc <test_sort_find@@Base+0x7f0>
   17698:	ldrh	r2, [r2, #10]
   1769c:	cmp	r2, #0
   176a0:	beq	177cc <test_sort_find@@Base+0x7f0>
   176a4:	ldr	r0, [r3, r2]
   176a8:	add	r3, r3, r2
   176ac:	add	r0, r0, #4
   176b0:	add	r0, r3, r0
   176b4:	ldr	r1, [pc, #2036]	; 17eb0 <test_sort_find@@Base+0xed4>
   176b8:	bl	12990 <strcmp@plt>
   176bc:	cmp	r0, #0
   176c0:	bne	184a8 <test_sort_find@@Base+0x14cc>
   176c4:	ldr	r2, [r6, #16]
   176c8:	add	r2, r2, #16
   176cc:	adds	r3, r6, r2
   176d0:	beq	17af4 <test_sort_find@@Base+0xb18>
   176d4:	ldr	r2, [r6, r2]
   176d8:	sub	r2, r3, r2
   176dc:	ldrh	r1, [r2]
   176e0:	cmp	r1, #11
   176e4:	bls	177cc <test_sort_find@@Base+0x7f0>
   176e8:	ldrh	r2, [r2, #10]
   176ec:	cmp	r2, #0
   176f0:	beq	177cc <test_sort_find@@Base+0x7f0>
   176f4:	ldr	r0, [r3, r2]
   176f8:	add	r3, r3, r2
   176fc:	add	r0, r0, #4
   17700:	add	r0, r3, r0
   17704:	ldr	r1, [pc, #1948]	; 17ea8 <test_sort_find@@Base+0xecc>
   17708:	bl	12990 <strcmp@plt>
   1770c:	subs	r8, r0, #0
   17710:	bne	184bc <test_sort_find@@Base+0x14e0>
   17714:	cmp	r5, r4
   17718:	movne	r7, #4
   1771c:	ldrne	r5, [pc, #1932]	; 17eb0 <test_sort_find@@Base+0xed4>
   17720:	beq	18494 <test_sort_find@@Base+0x14b8>
   17724:	sub	r4, r7, r8
   17728:	add	r4, r8, r4, lsr #1
   1772c:	cmp	r4, #4
   17730:	add	r2, r6, r4, lsl #2
   17734:	bhi	17af8 <test_sort_find@@Base+0xb1c>
   17738:	ldr	r3, [r6, r4, lsl #2]
   1773c:	adds	r1, r2, r3
   17740:	beq	17af4 <test_sort_find@@Base+0xb18>
   17744:	ldr	r2, [r2, r3]
   17748:	sub	r2, r1, r2
   1774c:	ldrh	r3, [r2]
   17750:	cmp	r3, #11
   17754:	bhi	17760 <test_sort_find@@Base+0x784>
   17758:	b	177cc <test_sort_find@@Base+0x7f0>
   1775c:	mov	r4, r3
   17760:	ldrh	r0, [r2, #10]
   17764:	cmp	r0, #0
   17768:	beq	177cc <test_sort_find@@Base+0x7f0>
   1776c:	ldr	r3, [r1, r0]
   17770:	add	r0, r1, r0
   17774:	add	r3, r3, #4
   17778:	add	r0, r0, r3
   1777c:	mov	r1, r5
   17780:	bl	12990 <strcmp@plt>
   17784:	cmp	r0, #0
   17788:	blt	17ab8 <test_sort_find@@Base+0xadc>
   1778c:	cmp	r8, r4
   17790:	bcs	17ac8 <test_sort_find@@Base+0xaec>
   17794:	sub	r3, r4, r8
   17798:	add	r3, r8, r3, lsr #1
   1779c:	cmp	r3, #4
   177a0:	add	r0, r6, r3, lsl #2
   177a4:	bhi	17af8 <test_sort_find@@Base+0xb1c>
   177a8:	ldr	r2, [r6, r3, lsl #2]
   177ac:	adds	r1, r0, r2
   177b0:	beq	17af4 <test_sort_find@@Base+0xb18>
   177b4:	ldr	r2, [r0, r2]
   177b8:	mov	r7, r4
   177bc:	sub	r2, r1, r2
   177c0:	ldrh	r0, [r2]
   177c4:	cmp	r0, #11
   177c8:	bhi	1775c <test_sort_find@@Base+0x780>
   177cc:	ldr	r3, [pc, #1800]	; 17edc <test_sort_find@@Base+0xf00>
   177d0:	ldr	r2, [pc, #1800]	; 17ee0 <test_sort_find@@Base+0xf04>
   177d4:	ldr	r1, [pc, #1800]	; 17ee4 <test_sort_find@@Base+0xf08>
   177d8:	ldr	r0, [pc, #1800]	; 17ee8 <test_sort_find@@Base+0xf0c>
   177dc:	bl	12a8c <__assert_fail@plt>
   177e0:	bge	17440 <test_sort_find@@Base+0x464>
   177e4:	sub	r4, r4, r5
   177e8:	ldr	r2, [sp]
   177ec:	lsl	r4, r4, #2
   177f0:	lsl	r9, r5, #1
   177f4:	sub	r8, r8, r4
   177f8:	add	r7, r7, r4
   177fc:	cmp	r2, r9
   17800:	str	r8, [r6, fp]
   17804:	mov	r4, r5
   17808:	str	r7, [r6, r3]
   1780c:	bcs	17478 <test_sort_find@@Base+0x49c>
   17810:	b	17440 <test_sort_find@@Base+0x464>
   17814:	movge	r5, r9
   17818:	b	1736c <test_sort_find@@Base+0x390>
   1781c:	mov	r9, #0
   17820:	b	17438 <test_sort_find@@Base+0x45c>
   17824:	mov	r7, #0
   17828:	b	17550 <test_sort_find@@Base+0x574>
   1782c:	ldr	r3, [sp]
   17830:	cmp	r3, #0
   17834:	beq	1755c <test_sort_find@@Base+0x580>
   17838:	ldr	r2, [sp, #28]
   1783c:	rsb	r3, r2, r2, lsl #30
   17840:	add	r2, r6, r2, lsl #2
   17844:	lsl	r3, r3, #2
   17848:	add	r3, r3, #4
   1784c:	str	r2, [sp, #12]
   17850:	str	r3, [sp, #8]
   17854:	b	1794c <test_sort_find@@Base+0x970>
   17858:	ldr	r8, [r6, #-4]
   1785c:	mov	r5, r9
   17860:	lsl	r3, r4, #2
   17864:	cmp	r8, r4
   17868:	add	r1, r6, r3
   1786c:	bls	17af8 <test_sort_find@@Base+0xb1c>
   17870:	ldr	r7, [r6, r4, lsl #2]
   17874:	adds	r2, r1, r7
   17878:	beq	17af4 <test_sort_find@@Base+0xb18>
   1787c:	ldr	r1, [r1, r7]
   17880:	sub	r1, r2, r1
   17884:	ldrh	r0, [r1]
   17888:	cmp	r0, #11
   1788c:	bls	177cc <test_sort_find@@Base+0x7f0>
   17890:	ldrh	r1, [r1, #10]
   17894:	cmp	r1, #0
   17898:	beq	177cc <test_sort_find@@Base+0x7f0>
   1789c:	ldr	r0, [r2, r1]
   178a0:	lsl	fp, r5, #2
   178a4:	add	r2, r2, r1
   178a8:	add	r0, r0, #4
   178ac:	cmp	r5, r8
   178b0:	add	r0, r2, r0
   178b4:	add	r2, r6, fp
   178b8:	bcs	17af8 <test_sort_find@@Base+0xb1c>
   178bc:	ldr	r8, [r6, r5, lsl #2]
   178c0:	adds	r1, r2, r8
   178c4:	beq	17af4 <test_sort_find@@Base+0xb18>
   178c8:	ldr	r2, [r2, r8]
   178cc:	sub	r2, r1, r2
   178d0:	ldrh	ip, [r2]
   178d4:	cmp	ip, #11
   178d8:	bls	177cc <test_sort_find@@Base+0x7f0>
   178dc:	ldrh	ip, [r2, #10]
   178e0:	cmp	ip, #0
   178e4:	beq	177cc <test_sort_find@@Base+0x7f0>
   178e8:	ldr	r2, [r1, ip]
   178ec:	add	r1, r1, ip
   178f0:	add	r2, r2, #4
   178f4:	adds	r1, r1, r2
   178f8:	moveq	sl, #0
   178fc:	ldrne	sl, [r1, #-4]
   17900:	cmp	r0, #0
   17904:	beq	17aa8 <test_sort_find@@Base+0xacc>
   17908:	ldr	r9, [r0, #-4]
   1790c:	str	r3, [sp, #4]
   17910:	cmp	sl, r9
   17914:	movcc	r2, sl
   17918:	movcs	r2, r9
   1791c:	bl	12a74 <strncmp@plt>
   17920:	ldr	r3, [sp, #4]
   17924:	cmp	r0, #0
   17928:	bne	17a6c <test_sort_find@@Base+0xa90>
   1792c:	cmp	sl, r9
   17930:	bhi	17a70 <test_sort_find@@Base+0xa94>
   17934:	ldr	r3, [sp]
   17938:	cmp	r3, #0
   1793c:	ldr	r3, [sp, #8]
   17940:	add	r3, r3, #4
   17944:	str	r3, [sp, #8]
   17948:	beq	1755c <test_sort_find@@Base+0x580>
   1794c:	ldr	r1, [sp, #12]
   17950:	ldr	r0, [sp]
   17954:	ldr	r3, [r6]
   17958:	sub	r0, r0, #1
   1795c:	ldr	r2, [r1, #-4]
   17960:	str	r0, [sp]
   17964:	ldr	r0, [sp, #8]
   17968:	mov	r4, #0
   1796c:	sub	r2, r2, r0
   17970:	str	r2, [r6]
   17974:	mov	r9, r4
   17978:	mov	r2, r1
   1797c:	add	r3, r0, r3
   17980:	str	r3, [r2, #-4]!
   17984:	str	r2, [sp, #12]
   17988:	ldr	r3, [sp]
   1798c:	cmp	r3, r9
   17990:	bls	17858 <test_sort_find@@Base+0x87c>
   17994:	ldr	r8, [r6, #-4]
   17998:	lsl	r3, r9, #2
   1799c:	cmp	r8, r9
   179a0:	add	r0, r6, r3
   179a4:	bls	17af8 <test_sort_find@@Base+0xb1c>
   179a8:	ldr	r1, [r6, r9, lsl #2]
   179ac:	adds	r2, r0, r1
   179b0:	beq	17af4 <test_sort_find@@Base+0xb18>
   179b4:	ldr	r1, [r0, r1]
   179b8:	sub	r1, r2, r1
   179bc:	ldrh	r0, [r1]
   179c0:	cmp	r0, #11
   179c4:	bls	177cc <test_sort_find@@Base+0x7f0>
   179c8:	ldrh	r1, [r1, #10]
   179cc:	cmp	r1, #0
   179d0:	beq	177cc <test_sort_find@@Base+0x7f0>
   179d4:	ldr	r0, [r2, r1]
   179d8:	add	r5, r9, #1
   179dc:	add	r2, r2, r1
   179e0:	add	r3, r3, #4
   179e4:	add	r0, r0, #4
   179e8:	cmp	r8, r5
   179ec:	add	r0, r2, r0
   179f0:	add	r2, r6, r3
   179f4:	bls	17af8 <test_sort_find@@Base+0xb1c>
   179f8:	ldr	r3, [r6, r3]
   179fc:	adds	r1, r2, r3
   17a00:	beq	17af4 <test_sort_find@@Base+0xb18>
   17a04:	ldr	r3, [r2, r3]
   17a08:	sub	r3, r1, r3
   17a0c:	ldrh	r2, [r3]
   17a10:	cmp	r2, #11
   17a14:	bls	177cc <test_sort_find@@Base+0x7f0>
   17a18:	ldrh	r2, [r3, #10]
   17a1c:	cmp	r2, #0
   17a20:	beq	177cc <test_sort_find@@Base+0x7f0>
   17a24:	ldr	r3, [r1, r2]
   17a28:	add	r1, r1, r2
   17a2c:	add	r3, r3, #4
   17a30:	adds	r1, r1, r3
   17a34:	moveq	sl, #0
   17a38:	ldrne	sl, [r1, #-4]
   17a3c:	cmp	r0, #0
   17a40:	beq	17ab0 <test_sort_find@@Base+0xad4>
   17a44:	ldr	r7, [r0, #-4]
   17a48:	cmp	sl, r7
   17a4c:	movcc	r2, sl
   17a50:	movcs	r2, r7
   17a54:	bl	12a74 <strncmp@plt>
   17a58:	cmp	r0, #0
   17a5c:	bne	17aa0 <test_sort_find@@Base+0xac4>
   17a60:	cmp	sl, r7
   17a64:	movls	r5, r9
   17a68:	b	17860 <test_sort_find@@Base+0x884>
   17a6c:	bge	17934 <test_sort_find@@Base+0x958>
   17a70:	sub	r4, r4, r5
   17a74:	ldr	r2, [sp]
   17a78:	lsl	r4, r4, #2
   17a7c:	lsl	r9, r5, #1
   17a80:	sub	r8, r8, r4
   17a84:	add	r7, r7, r4
   17a88:	cmp	r2, r9
   17a8c:	str	r8, [r6, r3]
   17a90:	mov	r4, r5
   17a94:	str	r7, [r6, fp]
   17a98:	bcs	17988 <test_sort_find@@Base+0x9ac>
   17a9c:	b	17934 <test_sort_find@@Base+0x958>
   17aa0:	movge	r5, r9
   17aa4:	b	17860 <test_sort_find@@Base+0x884>
   17aa8:	mov	r9, #0
   17aac:	b	1792c <test_sort_find@@Base+0x950>
   17ab0:	mov	r7, #0
   17ab4:	b	17a60 <test_sort_find@@Base+0xa84>
   17ab8:	add	r8, r4, #1
   17abc:	cmp	r8, r7
   17ac0:	bcc	17724 <test_sort_find@@Base+0x748>
   17ac4:	mov	r4, r7
   17ac8:	cmp	r8, r4
   17acc:	beq	17b0c <test_sort_find@@Base+0xb30>
   17ad0:	ldr	r0, [pc, #1044]	; 17eec <test_sort_find@@Base+0xf10>
   17ad4:	bl	129f0 <puts@plt>
   17ad8:	mvn	r3, #0
   17adc:	str	r3, [sp, #28]
   17ae0:	ldr	r0, [sp, #24]
   17ae4:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   17ae8:	ldr	r0, [sp, #28]
   17aec:	add	sp, sp, #44	; 0x2c
   17af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17af4:	bl	12d04 <__assert_fail@plt+0x278>
   17af8:	ldr	r3, [pc, #1008]	; 17ef0 <test_sort_find@@Base+0xf14>
   17afc:	ldr	r2, [pc, #1008]	; 17ef4 <test_sort_find@@Base+0xf18>
   17b00:	ldr	r1, [pc, #988]	; 17ee4 <test_sort_find@@Base+0xf08>
   17b04:	ldr	r0, [pc, #1004]	; 17ef8 <test_sort_find@@Base+0xf1c>
   17b08:	bl	12a8c <__assert_fail@plt>
   17b0c:	ldr	r2, [r6, r8, lsl #2]
   17b10:	add	r1, r6, r8, lsl #2
   17b14:	adds	r3, r1, r2
   17b18:	beq	17af4 <test_sort_find@@Base+0xb18>
   17b1c:	ldr	r2, [r1, r2]
   17b20:	sub	r2, r3, r2
   17b24:	ldrh	r1, [r2]
   17b28:	cmp	r1, #11
   17b2c:	bls	177cc <test_sort_find@@Base+0x7f0>
   17b30:	ldrh	r2, [r2, #10]
   17b34:	cmp	r2, #0
   17b38:	beq	177cc <test_sort_find@@Base+0x7f0>
   17b3c:	ldr	r0, [r3, r2]
   17b40:	add	r3, r3, r2
   17b44:	add	r0, r0, #4
   17b48:	add	r0, r3, r0
   17b4c:	ldr	r1, [pc, #860]	; 17eb0 <test_sort_find@@Base+0xed4>
   17b50:	bl	12990 <strcmp@plt>
   17b54:	cmp	r0, #0
   17b58:	cmpeq	r8, #3
   17b5c:	movne	r4, #1
   17b60:	moveq	r4, #0
   17b64:	ldreq	r5, [pc, #912]	; 17efc <test_sort_find@@Base+0xf20>
   17b68:	moveq	r7, #4
   17b6c:	bne	17ad0 <test_sort_find@@Base+0xaf4>
   17b70:	sub	r8, r7, r4
   17b74:	add	r8, r4, r8, lsr #1
   17b78:	cmp	r8, #4
   17b7c:	add	r2, r6, r8, lsl #2
   17b80:	bhi	17af8 <test_sort_find@@Base+0xb1c>
   17b84:	ldr	r3, [r6, r8, lsl #2]
   17b88:	adds	r1, r2, r3
   17b8c:	beq	17af4 <test_sort_find@@Base+0xb18>
   17b90:	ldr	r2, [r2, r3]
   17b94:	sub	r2, r1, r2
   17b98:	ldrh	r3, [r2]
   17b9c:	cmp	r3, #11
   17ba0:	bhi	17bb0 <test_sort_find@@Base+0xbd4>
   17ba4:	b	177cc <test_sort_find@@Base+0x7f0>
   17ba8:	mov	r7, r8
   17bac:	mov	r8, r3
   17bb0:	ldrh	r0, [r2, #10]
   17bb4:	cmp	r0, #0
   17bb8:	beq	177cc <test_sort_find@@Base+0x7f0>
   17bbc:	ldr	r3, [r1, r0]
   17bc0:	add	r0, r1, r0
   17bc4:	add	r3, r3, #4
   17bc8:	adds	r0, r0, r3
   17bcc:	beq	17c3c <test_sort_find@@Base+0xc60>
   17bd0:	ldr	r9, [r0, #-4]
   17bd4:	mov	r1, r5
   17bd8:	cmp	r9, #5
   17bdc:	movcc	r2, r9
   17be0:	movcs	r2, #5
   17be4:	bl	12a74 <strncmp@plt>
   17be8:	cmp	r0, #0
   17bec:	bne	17c38 <test_sort_find@@Base+0xc5c>
   17bf0:	cmp	r9, #4
   17bf4:	bls	17c3c <test_sort_find@@Base+0xc60>
   17bf8:	cmp	r4, r8
   17bfc:	bcs	17c4c <test_sort_find@@Base+0xc70>
   17c00:	sub	r3, r8, r4
   17c04:	add	r3, r4, r3, lsr #1
   17c08:	cmp	r3, #4
   17c0c:	add	r0, r6, r3, lsl #2
   17c10:	bhi	17af8 <test_sort_find@@Base+0xb1c>
   17c14:	ldr	r2, [r6, r3, lsl #2]
   17c18:	adds	r1, r0, r2
   17c1c:	beq	17af4 <test_sort_find@@Base+0xb18>
   17c20:	ldr	r2, [r0, r2]
   17c24:	sub	r2, r1, r2
   17c28:	ldrh	r0, [r2]
   17c2c:	cmp	r0, #11
   17c30:	bls	177cc <test_sort_find@@Base+0x7f0>
   17c34:	b	17ba8 <test_sort_find@@Base+0xbcc>
   17c38:	bge	17bf8 <test_sort_find@@Base+0xc1c>
   17c3c:	add	r4, r8, #1
   17c40:	cmp	r4, r7
   17c44:	bcc	17b70 <test_sort_find@@Base+0xb94>
   17c48:	mov	r8, r7
   17c4c:	cmp	r4, r8
   17c50:	beq	17c68 <test_sort_find@@Base+0xc8c>
   17c54:	ldr	r0, [pc, #676]	; 17f00 <test_sort_find@@Base+0xf24>
   17c58:	bl	129f0 <puts@plt>
   17c5c:	mvn	r3, #0
   17c60:	str	r3, [sp, #28]
   17c64:	b	17ae0 <test_sort_find@@Base+0xb04>
   17c68:	ldr	r2, [r6, r4, lsl #2]
   17c6c:	add	r1, r6, r4, lsl #2
   17c70:	adds	r3, r1, r2
   17c74:	beq	17af4 <test_sort_find@@Base+0xb18>
   17c78:	ldr	r2, [r1, r2]
   17c7c:	sub	r2, r3, r2
   17c80:	ldrh	r1, [r2]
   17c84:	cmp	r1, #11
   17c88:	bls	177cc <test_sort_find@@Base+0x7f0>
   17c8c:	ldrh	r2, [r2, #10]
   17c90:	cmp	r2, #0
   17c94:	beq	177cc <test_sort_find@@Base+0x7f0>
   17c98:	ldr	r0, [r3, r2]
   17c9c:	add	r3, r3, r2
   17ca0:	add	r0, r0, #4
   17ca4:	adds	r0, r3, r0
   17ca8:	beq	17c54 <test_sort_find@@Base+0xc78>
   17cac:	ldr	r5, [r0, #-4]
   17cb0:	ldr	r1, [pc, #580]	; 17efc <test_sort_find@@Base+0xf20>
   17cb4:	cmp	r5, #5
   17cb8:	movcc	r2, r5
   17cbc:	movcs	r2, #5
   17cc0:	bl	12a74 <strncmp@plt>
   17cc4:	cmp	r0, #0
   17cc8:	bne	17c54 <test_sort_find@@Base+0xc78>
   17ccc:	cmp	r5, #5
   17cd0:	bne	17c54 <test_sort_find@@Base+0xc78>
   17cd4:	cmp	r4, #3
   17cd8:	bne	17c54 <test_sort_find@@Base+0xc78>
   17cdc:	ldr	r7, [pc, #544]	; 17f04 <test_sort_find@@Base+0xf28>
   17ce0:	mov	r4, r0
   17ce4:	mov	r5, #4
   17ce8:	sub	r8, r5, r4
   17cec:	add	r8, r4, r8, lsr #1
   17cf0:	cmp	r8, #4
   17cf4:	add	r3, r6, r8, lsl #2
   17cf8:	bhi	17af8 <test_sort_find@@Base+0xb1c>
   17cfc:	ldr	r2, [r6, r8, lsl #2]
   17d00:	adds	r1, r3, r2
   17d04:	beq	17af4 <test_sort_find@@Base+0xb18>
   17d08:	ldr	r2, [r3, r2]
   17d0c:	sub	r2, r1, r2
   17d10:	ldrh	r3, [r2]
   17d14:	cmp	r3, #11
   17d18:	bhi	17d24 <test_sort_find@@Base+0xd48>
   17d1c:	b	177cc <test_sort_find@@Base+0x7f0>
   17d20:	mov	r8, r3
   17d24:	ldrh	r0, [r2, #10]
   17d28:	cmp	r0, #0
   17d2c:	beq	177cc <test_sort_find@@Base+0x7f0>
   17d30:	ldr	r3, [r1, r0]
   17d34:	add	r0, r1, r0
   17d38:	add	r3, r3, #4
   17d3c:	adds	r0, r0, r3
   17d40:	beq	17db4 <test_sort_find@@Base+0xdd8>
   17d44:	ldr	r9, [r0, #-4]
   17d48:	mov	r1, r7
   17d4c:	cmp	r9, #5
   17d50:	movcc	r2, r9
   17d54:	movcs	r2, #5
   17d58:	bl	12a74 <strncmp@plt>
   17d5c:	cmp	r0, #0
   17d60:	bne	17db0 <test_sort_find@@Base+0xdd4>
   17d64:	cmp	r9, #4
   17d68:	bls	17db4 <test_sort_find@@Base+0xdd8>
   17d6c:	cmp	r4, r8
   17d70:	bcs	17dc4 <test_sort_find@@Base+0xde8>
   17d74:	sub	r3, r8, r4
   17d78:	add	r3, r4, r3, lsr #1
   17d7c:	cmp	r3, #4
   17d80:	add	r0, r6, r3, lsl #2
   17d84:	bhi	17af8 <test_sort_find@@Base+0xb1c>
   17d88:	ldr	r2, [r6, r3, lsl #2]
   17d8c:	adds	r1, r0, r2
   17d90:	beq	17af4 <test_sort_find@@Base+0xb18>
   17d94:	ldr	r2, [r0, r2]
   17d98:	mov	r5, r8
   17d9c:	sub	r2, r1, r2
   17da0:	ldrh	r0, [r2]
   17da4:	cmp	r0, #11
   17da8:	bls	177cc <test_sort_find@@Base+0x7f0>
   17dac:	b	17d20 <test_sort_find@@Base+0xd44>
   17db0:	bge	17d6c <test_sort_find@@Base+0xd90>
   17db4:	add	r4, r8, #1
   17db8:	cmp	r4, r5
   17dbc:	bcc	17ce8 <test_sort_find@@Base+0xd0c>
   17dc0:	mov	r8, r5
   17dc4:	cmp	r4, r8
   17dc8:	beq	17de0 <test_sort_find@@Base+0xe04>
   17dcc:	ldr	r0, [pc, #308]	; 17f08 <test_sort_find@@Base+0xf2c>
   17dd0:	bl	129f0 <puts@plt>
   17dd4:	mvn	r3, #0
   17dd8:	str	r3, [sp, #28]
   17ddc:	b	17ae0 <test_sort_find@@Base+0xb04>
   17de0:	ldr	r3, [r6, r4, lsl #2]
   17de4:	add	r0, r6, r4, lsl #2
   17de8:	add	r0, r0, r3
   17dec:	bl	135bc <_start@@Base+0x2ac>
   17df0:	subs	r3, r0, #0
   17df4:	beq	17dcc <test_sort_find@@Base+0xdf0>
   17df8:	ldr	r5, [r3, #-4]
   17dfc:	ldr	r1, [pc, #256]	; 17f04 <test_sort_find@@Base+0xf28>
   17e00:	cmp	r5, #5
   17e04:	movcc	r2, r5
   17e08:	movcs	r2, #5
   17e0c:	bl	12a74 <strncmp@plt>
   17e10:	subs	r3, r0, #0
   17e14:	str	r3, [sp, #28]
   17e18:	bne	17dcc <test_sort_find@@Base+0xdf0>
   17e1c:	cmp	r5, #5
   17e20:	bne	17dcc <test_sort_find@@Base+0xdf0>
   17e24:	cmp	r4, #3
   17e28:	bne	17dcc <test_sort_find@@Base+0xdf0>
   17e2c:	ldr	r1, [pc, #216]	; 17f0c <test_sort_find@@Base+0xf30>
   17e30:	mov	r0, r6
   17e34:	bl	14598 <_start@@Base+0x1288>
   17e38:	cmn	r0, #1
   17e3c:	mov	r4, r0
   17e40:	bne	18424 <test_sort_find@@Base+0x1448>
   17e44:	ldr	r1, [pc, #108]	; 17eb8 <test_sort_find@@Base+0xedc>
   17e48:	mov	r0, r6
   17e4c:	bl	14598 <_start@@Base+0x1288>
   17e50:	subs	r3, r0, #0
   17e54:	str	r3, [sp, #16]
   17e58:	bne	18484 <test_sort_find@@Base+0x14a8>
   17e5c:	ldr	r1, [pc, #80]	; 17eb4 <test_sort_find@@Base+0xed8>
   17e60:	mov	r0, r6
   17e64:	bl	14598 <_start@@Base+0x1288>
   17e68:	cmp	r0, #1
   17e6c:	mov	r5, r0
   17e70:	bne	18454 <test_sort_find@@Base+0x1478>
   17e74:	ldr	r1, [pc, #44]	; 17ea8 <test_sort_find@@Base+0xecc>
   17e78:	mov	r0, r6
   17e7c:	bl	14598 <_start@@Base+0x1288>
   17e80:	cmp	r0, #4
   17e84:	str	r0, [sp, #4]
   17e88:	bne	18438 <test_sort_find@@Base+0x145c>
   17e8c:	mov	r3, #2
   17e90:	str	r0, [sp, #8]
   17e94:	str	r3, [sp, #12]
   17e98:	ldr	r3, [sp, #8]
   17e9c:	b	18038 <test_sort_find@@Base+0x105c>
   17ea0:	ldrdeq	r5, [r2], -r0
   17ea4:	strdeq	r5, [r2], -r8
   17ea8:	andeq	r6, r2, ip, ror r3
   17eac:	andeq	r5, r2, ip, ror #7
   17eb0:			; <UNDEFINED> instruction: 0x000263bc
   17eb4:	andeq	r6, r2, r8, ror #7
   17eb8:	andeq	r6, r2, r8, asr #20
   17ebc:	andeq	sl, r3, r0, ror r0
   17ec0:	andeq	r6, r2, r0, asr sl
   17ec4:	movtpl	r4, #61261	; 0xef4d
   17ec8:	andeq	r5, r2, r8, lsr #9
   17ecc:	andeq	r0, r0, fp, ror r4
   17ed0:	andeq	r6, r2, r4, lsl r3
   17ed4:	andeq	r6, r2, r8, ror #20
   17ed8:	andeq	r6, r2, r4, ror #24
   17edc:	andeq	r5, r2, r0, lsl #4
   17ee0:			; <UNDEFINED> instruction: 0x000002bb
   17ee4:	andeq	r5, r2, r4, asr #13
   17ee8:	strdeq	r5, [r2], -r0
   17eec:	andeq	r6, r2, r4, lsl #23
   17ef0:	andeq	r5, r2, r0, lsr #3
   17ef4:			; <UNDEFINED> instruction: 0x000002b5
   17ef8:			; <UNDEFINED> instruction: 0x000257b8
   17efc:			; <UNDEFINED> instruction: 0x00026bb0
   17f00:			; <UNDEFINED> instruction: 0x00026bb8
   17f04:	andeq	r6, r2, ip, ror #23
   17f08:	strdeq	r6, [r2], -r4
   17f0c:	andeq	r6, r2, r8, lsl ip
   17f10:	andeq	r6, r2, r0, lsr #24
   17f14:	andeq	r6, r2, r0, asr ip
   17f18:	andeq	r6, r2, ip, asr #26
   17f1c:	andeq	r6, r2, r8, asr #24
   17f20:	andeq	r6, r2, r4, ror sl
   17f24:	andeq	r6, r2, r8, lsr ip
   17f28:	andeq	r6, r2, ip, lsr fp
   17f2c:	strdeq	r6, [r2], -ip
   17f30:	andeq	r6, r2, ip, lsl fp
   17f34:	muleq	r2, ip, sl
   17f38:			; <UNDEFINED> instruction: 0x00026abc
   17f3c:	ldrdeq	r6, [r2], -ip
   17f40:	ldr	r7, [sp, #4]
   17f44:	mov	r5, #16
   17f48:	lsl	fp, r4, #2
   17f4c:	cmp	sl, r4
   17f50:	add	r2, r6, fp
   17f54:	bls	17af8 <test_sort_find@@Base+0xb1c>
   17f58:	ldr	r8, [r6, r4, lsl #2]
   17f5c:	adds	r3, r2, r8
   17f60:	beq	17af4 <test_sort_find@@Base+0xb18>
   17f64:	ldr	r2, [r2, r8]
   17f68:	sub	r2, r3, r2
   17f6c:	ldrh	r1, [r2]
   17f70:	cmp	r1, #11
   17f74:	bls	177cc <test_sort_find@@Base+0x7f0>
   17f78:	ldrh	r2, [r2, #10]
   17f7c:	cmp	r2, #0
   17f80:	beq	177cc <test_sort_find@@Base+0x7f0>
   17f84:	ldr	r0, [r3, r2]
   17f88:	cmp	r7, sl
   17f8c:	add	r0, r0, #4
   17f90:	add	r3, r3, r2
   17f94:	add	r0, r3, r0
   17f98:	add	sl, r6, r5
   17f9c:	bcs	17af8 <test_sort_find@@Base+0xb1c>
   17fa0:	ldr	r5, [r6, r5]
   17fa4:	adds	r1, sl, r5
   17fa8:	beq	17af4 <test_sort_find@@Base+0xb18>
   17fac:	ldr	r3, [sl, r5]
   17fb0:	sub	r3, r1, r3
   17fb4:	ldrh	r2, [r3]
   17fb8:	cmp	r2, #11
   17fbc:	bls	177cc <test_sort_find@@Base+0x7f0>
   17fc0:	ldrh	r2, [r3, #10]
   17fc4:	cmp	r2, #0
   17fc8:	beq	177cc <test_sort_find@@Base+0x7f0>
   17fcc:	ldr	r3, [r1, r2]
   17fd0:	add	r1, r1, r2
   17fd4:	add	r3, r3, #4
   17fd8:	adds	r1, r1, r3
   17fdc:	beq	18174 <test_sort_find@@Base+0x1198>
   17fe0:	cmp	r0, #0
   17fe4:	ldr	r3, [r1, #-4]
   17fe8:	beq	18184 <test_sort_find@@Base+0x11a8>
   17fec:	ldr	r9, [r0, #-4]
   17ff0:	str	r3, [sp]
   17ff4:	cmp	r9, r3
   17ff8:	movcs	r2, r3
   17ffc:	movcc	r2, r9
   18000:	bl	12a74 <strncmp@plt>
   18004:	ldr	r3, [sp]
   18008:	cmp	r0, #0
   1800c:	bne	18134 <test_sort_find@@Base+0x1158>
   18010:	cmp	r3, r9
   18014:	bhi	18138 <test_sort_find@@Base+0x115c>
   18018:	ldr	r3, [sp, #12]
   1801c:	sub	r3, r3, #1
   18020:	str	r3, [sp, #12]
   18024:	cmn	r3, #1
   18028:	ldr	r3, [sp, #8]
   1802c:	sub	r3, r3, #2
   18030:	str	r3, [sp, #8]
   18034:	beq	181a4 <test_sort_find@@Base+0x11c8>
   18038:	cmp	r3, #4
   1803c:	movls	r9, r3
   18040:	ldrls	r4, [sp, #12]
   18044:	bhi	18018 <test_sort_find@@Base+0x103c>
   18048:	cmp	r9, #4
   1804c:	ldr	sl, [r6, #-4]
   18050:	beq	17f40 <test_sort_find@@Base+0xf64>
   18054:	lsl	r5, r9, #2
   18058:	cmp	sl, r9
   1805c:	add	r1, r6, r5
   18060:	bls	17af8 <test_sort_find@@Base+0xb1c>
   18064:	ldr	r2, [r6, r9, lsl #2]
   18068:	adds	r3, r1, r2
   1806c:	beq	17af4 <test_sort_find@@Base+0xb18>
   18070:	ldr	r2, [r1, r2]
   18074:	sub	r2, r3, r2
   18078:	ldrh	r1, [r2]
   1807c:	cmp	r1, #11
   18080:	bls	177cc <test_sort_find@@Base+0x7f0>
   18084:	ldrh	r2, [r2, #10]
   18088:	cmp	r2, #0
   1808c:	beq	177cc <test_sort_find@@Base+0x7f0>
   18090:	ldr	r0, [r3, r2]
   18094:	add	r7, r9, #1
   18098:	add	r3, r3, r2
   1809c:	add	r0, r0, #4
   180a0:	add	r8, r5, #4
   180a4:	cmp	sl, r7
   180a8:	add	r0, r3, r0
   180ac:	add	r2, r6, r8
   180b0:	bls	17af8 <test_sort_find@@Base+0xb1c>
   180b4:	ldr	r3, [r6, r8]
   180b8:	adds	r1, r2, r3
   180bc:	beq	17af4 <test_sort_find@@Base+0xb18>
   180c0:	ldr	r3, [r2, r3]
   180c4:	sub	r3, r1, r3
   180c8:	ldrh	r2, [r3]
   180cc:	cmp	r2, #11
   180d0:	bls	177cc <test_sort_find@@Base+0x7f0>
   180d4:	ldrh	r2, [r3, #10]
   180d8:	cmp	r2, #0
   180dc:	beq	177cc <test_sort_find@@Base+0x7f0>
   180e0:	ldr	r3, [r1, r2]
   180e4:	add	r1, r1, r2
   180e8:	add	r3, r3, #4
   180ec:	adds	r1, r1, r3
   180f0:	beq	1818c <test_sort_find@@Base+0x11b0>
   180f4:	cmp	r0, #0
   180f8:	ldr	r3, [r1, #-4]
   180fc:	beq	1819c <test_sort_find@@Base+0x11c0>
   18100:	ldr	fp, [r0, #-4]
   18104:	str	r3, [sp]
   18108:	cmp	r3, fp
   1810c:	movcc	r2, r3
   18110:	movcs	r2, fp
   18114:	bl	12a74 <strncmp@plt>
   18118:	ldr	r3, [sp]
   1811c:	cmp	r0, #0
   18120:	bne	18164 <test_sort_find@@Base+0x1188>
   18124:	cmp	r3, fp
   18128:	movls	r7, r9
   1812c:	movhi	r5, r8
   18130:	b	17f48 <test_sort_find@@Base+0xf6c>
   18134:	bge	18018 <test_sort_find@@Base+0x103c>
   18138:	sub	r4, r4, r7
   1813c:	lsl	r9, r7, #1
   18140:	lsl	r4, r4, #2
   18144:	sub	r5, r5, r4
   18148:	add	r8, r8, r4
   1814c:	cmp	r9, #4
   18150:	str	r5, [r6, fp]
   18154:	mov	r4, r7
   18158:	str	r8, [sl]
   1815c:	bls	18048 <test_sort_find@@Base+0x106c>
   18160:	b	18018 <test_sort_find@@Base+0x103c>
   18164:	movlt	r5, r8
   18168:	blt	17f48 <test_sort_find@@Base+0xf6c>
   1816c:	mov	r7, r9
   18170:	b	17f48 <test_sort_find@@Base+0xf6c>
   18174:	cmp	r0, #0
   18178:	beq	18018 <test_sort_find@@Base+0x103c>
   1817c:	ldr	r3, [sp, #16]
   18180:	b	17fec <test_sort_find@@Base+0x1010>
   18184:	ldr	r9, [sp, #16]
   18188:	b	18010 <test_sort_find@@Base+0x1034>
   1818c:	cmp	r0, #0
   18190:	ldrne	r3, [sp, #16]
   18194:	bne	18100 <test_sort_find@@Base+0x1124>
   18198:	b	1816c <test_sort_find@@Base+0x1190>
   1819c:	ldr	fp, [sp, #16]
   181a0:	b	18124 <test_sort_find@@Base+0x1148>
   181a4:	add	r3, r6, #20
   181a8:	str	r3, [sp, #12]
   181ac:	add	r3, r6, #4
   181b0:	str	r3, [sp, #20]
   181b4:	mvn	r3, #15
   181b8:	str	r3, [sp]
   181bc:	ldr	r1, [sp, #12]
   181c0:	ldr	r0, [sp, #4]
   181c4:	ldr	r3, [r6]
   181c8:	sub	r0, r0, #1
   181cc:	ldr	r2, [r1, #-4]
   181d0:	str	r0, [sp, #4]
   181d4:	ldr	r0, [sp]
   181d8:	ldr	fp, [sp, #16]
   181dc:	sub	r2, r2, r0
   181e0:	str	r2, [r6]
   181e4:	mov	r2, r1
   181e8:	add	r3, r0, r3
   181ec:	str	r3, [r2, #-4]!
   181f0:	mov	r4, fp
   181f4:	str	r2, [sp, #12]
   181f8:	ldr	r3, [sp, #4]
   181fc:	b	18300 <test_sort_find@@Base+0x1324>
   18200:	ldr	r8, [r6, #-4]
   18204:	mov	r5, fp
   18208:	lsl	sl, r4, #2
   1820c:	cmp	r8, r4
   18210:	add	r2, r6, sl
   18214:	bls	17af8 <test_sort_find@@Base+0xb1c>
   18218:	ldr	r7, [r6, r4, lsl #2]
   1821c:	adds	r3, r2, r7
   18220:	beq	17af4 <test_sort_find@@Base+0xb18>
   18224:	ldr	r2, [r2, r7]
   18228:	sub	r2, r3, r2
   1822c:	ldrh	r1, [r2]
   18230:	cmp	r1, #11
   18234:	bls	177cc <test_sort_find@@Base+0x7f0>
   18238:	ldrh	r2, [r2, #10]
   1823c:	cmp	r2, #0
   18240:	beq	177cc <test_sort_find@@Base+0x7f0>
   18244:	ldr	r0, [r3, r2]
   18248:	lsl	r9, r5, #2
   1824c:	add	r3, r3, r2
   18250:	add	r0, r0, #4
   18254:	cmp	r5, r8
   18258:	add	r0, r3, r0
   1825c:	add	r3, r6, r9
   18260:	bcs	17af8 <test_sort_find@@Base+0xb1c>
   18264:	ldr	r8, [r6, r5, lsl #2]
   18268:	adds	r1, r3, r8
   1826c:	beq	17af4 <test_sort_find@@Base+0xb18>
   18270:	ldr	r3, [r3, r8]
   18274:	sub	r3, r1, r3
   18278:	ldrh	r2, [r3]
   1827c:	cmp	r2, #11
   18280:	bls	177cc <test_sort_find@@Base+0x7f0>
   18284:	ldrh	r2, [r3, #10]
   18288:	cmp	r2, #0
   1828c:	beq	177cc <test_sort_find@@Base+0x7f0>
   18290:	ldr	r3, [r1, r2]
   18294:	add	r1, r1, r2
   18298:	add	r3, r3, #4
   1829c:	adds	r1, r1, r3
   182a0:	beq	183ec <test_sort_find@@Base+0x1410>
   182a4:	cmp	r0, #0
   182a8:	ldr	r3, [r1, #-4]
   182ac:	beq	1841c <test_sort_find@@Base+0x1440>
   182b0:	ldr	fp, [r0, #-4]
   182b4:	str	r3, [sp, #8]
   182b8:	cmp	r3, fp
   182bc:	movcc	r2, r3
   182c0:	movcs	r2, fp
   182c4:	bl	12a74 <strncmp@plt>
   182c8:	cmp	r0, #0
   182cc:	beq	183e0 <test_sort_find@@Base+0x1404>
   182d0:	bge	183ec <test_sort_find@@Base+0x1410>
   182d4:	sub	r4, r4, r5
   182d8:	ldr	r3, [sp, #4]
   182dc:	lsl	r4, r4, #2
   182e0:	lsl	fp, r5, #1
   182e4:	sub	r8, r8, r4
   182e8:	add	r7, r7, r4
   182ec:	cmp	r3, fp
   182f0:	str	r8, [r6, sl]
   182f4:	mov	r4, r5
   182f8:	str	r7, [r6, r9]
   182fc:	bcc	183ec <test_sort_find@@Base+0x1410>
   18300:	cmp	r3, fp
   18304:	bls	18200 <test_sort_find@@Base+0x1224>
   18308:	ldr	r8, [r6, #-4]
   1830c:	lsl	r3, fp, #2
   18310:	cmp	r8, fp
   18314:	add	r0, r6, r3
   18318:	bls	17af8 <test_sort_find@@Base+0xb1c>
   1831c:	ldr	r1, [r6, fp, lsl #2]
   18320:	adds	r2, r0, r1
   18324:	beq	17af4 <test_sort_find@@Base+0xb18>
   18328:	ldr	r1, [r0, r1]
   1832c:	sub	r1, r2, r1
   18330:	ldrh	r0, [r1]
   18334:	cmp	r0, #11
   18338:	bls	177cc <test_sort_find@@Base+0x7f0>
   1833c:	ldrh	r1, [r1, #10]
   18340:	cmp	r1, #0
   18344:	beq	177cc <test_sort_find@@Base+0x7f0>
   18348:	ldr	r0, [r2, r1]
   1834c:	add	r5, fp, #1
   18350:	add	r2, r2, r1
   18354:	add	r3, r3, #4
   18358:	add	r0, r0, #4
   1835c:	cmp	r8, r5
   18360:	add	r0, r2, r0
   18364:	add	r1, r6, r3
   18368:	bls	17af8 <test_sort_find@@Base+0xb1c>
   1836c:	ldr	r2, [r6, r3]
   18370:	adds	r3, r1, r2
   18374:	beq	17af4 <test_sort_find@@Base+0xb18>
   18378:	ldr	r2, [r1, r2]
   1837c:	sub	r2, r3, r2
   18380:	ldrh	r1, [r2]
   18384:	cmp	r1, #11
   18388:	bls	177cc <test_sort_find@@Base+0x7f0>
   1838c:	ldrh	r2, [r2, #10]
   18390:	cmp	r2, #0
   18394:	beq	177cc <test_sort_find@@Base+0x7f0>
   18398:	ldr	r1, [r3, r2]
   1839c:	add	r3, r3, r2
   183a0:	add	r1, r1, #4
   183a4:	adds	r1, r3, r1
   183a8:	beq	183d8 <test_sort_find@@Base+0x13fc>
   183ac:	cmp	r0, #0
   183b0:	ldr	r7, [r1, #-4]
   183b4:	beq	1840c <test_sort_find@@Base+0x1430>
   183b8:	ldr	r9, [r0, #-4]
   183bc:	cmp	r7, r9
   183c0:	movcc	r2, r7
   183c4:	movcs	r2, r9
   183c8:	bl	12a74 <strncmp@plt>
   183cc:	cmp	r0, #0
   183d0:	beq	18410 <test_sort_find@@Base+0x1434>
   183d4:	blt	18208 <test_sort_find@@Base+0x122c>
   183d8:	mov	r5, fp
   183dc:	b	18208 <test_sort_find@@Base+0x122c>
   183e0:	ldr	r3, [sp, #8]
   183e4:	cmp	r3, fp
   183e8:	bhi	182d4 <test_sort_find@@Base+0x12f8>
   183ec:	ldr	r3, [sp, #12]
   183f0:	ldr	r2, [sp, #20]
   183f4:	cmp	r3, r2
   183f8:	ldr	r3, [sp]
   183fc:	add	r3, r3, #4
   18400:	str	r3, [sp]
   18404:	bne	181bc <test_sort_find@@Base+0x11e0>
   18408:	b	17ae0 <test_sort_find@@Base+0xb04>
   1840c:	ldr	r9, [sp, #16]
   18410:	cmp	r7, r9
   18414:	movls	r5, fp
   18418:	b	18208 <test_sort_find@@Base+0x122c>
   1841c:	ldr	fp, [sp, #16]
   18420:	b	183e4 <test_sort_find@@Base+0x1408>
   18424:	ldr	r0, [pc, #-1308]	; 17f10 <test_sort_find@@Base+0xf34>
   18428:	bl	129f0 <puts@plt>
   1842c:	mvn	r3, #0
   18430:	str	r3, [sp, #28]
   18434:	b	17ae0 <test_sort_find@@Base+0xb04>
   18438:	ldr	r0, [pc, #-1324]	; 17f14 <test_sort_find@@Base+0xf38>
   1843c:	bl	129f0 <puts@plt>
   18440:	ldr	r1, [sp, #4]
   18444:	ldr	r0, [pc, #-1328]	; 17f1c <test_sort_find@@Base+0xf40>
   18448:	str	r4, [sp, #28]
   1844c:	bl	1299c <printf@plt>
   18450:	b	17ae0 <test_sort_find@@Base+0xb04>
   18454:	ldr	r0, [pc, #-1348]	; 17f18 <test_sort_find@@Base+0xf3c>
   18458:	bl	129f0 <puts@plt>
   1845c:	mov	r1, r5
   18460:	ldr	r0, [pc, #-1356]	; 17f1c <test_sort_find@@Base+0xf40>
   18464:	str	r4, [sp, #28]
   18468:	bl	1299c <printf@plt>
   1846c:	b	17ae0 <test_sort_find@@Base+0xb04>
   18470:	ldr	r0, [pc, #-1368]	; 17f20 <test_sort_find@@Base+0xf44>
   18474:	bl	129f0 <puts@plt>
   18478:	mvn	r3, #0
   1847c:	str	r3, [sp, #28]
   18480:	b	17ae0 <test_sort_find@@Base+0xb04>
   18484:	ldr	r0, [pc, #-1384]	; 17f24 <test_sort_find@@Base+0xf48>
   18488:	str	r4, [sp, #28]
   1848c:	bl	129f0 <puts@plt>
   18490:	b	17ae0 <test_sort_find@@Base+0xb04>
   18494:	ldr	r0, [pc, #-1396]	; 17f28 <test_sort_find@@Base+0xf4c>
   18498:	bl	129f0 <puts@plt>
   1849c:	mvn	r3, #0
   184a0:	str	r3, [sp, #28]
   184a4:	b	17ae0 <test_sort_find@@Base+0xb04>
   184a8:	ldr	r0, [pc, #-1412]	; 17f2c <test_sort_find@@Base+0xf50>
   184ac:	bl	129f0 <puts@plt>
   184b0:	mvn	r3, #0
   184b4:	str	r3, [sp, #28]
   184b8:	b	17ae0 <test_sort_find@@Base+0xb04>
   184bc:	ldr	r0, [pc, #-1428]	; 17f30 <test_sort_find@@Base+0xf54>
   184c0:	bl	129f0 <puts@plt>
   184c4:	mvn	r3, #0
   184c8:	str	r3, [sp, #28]
   184cc:	b	17ae0 <test_sort_find@@Base+0xb04>
   184d0:	ldr	r0, [pc, #-1444]	; 17f34 <test_sort_find@@Base+0xf58>
   184d4:	bl	129f0 <puts@plt>
   184d8:	mvn	r3, #0
   184dc:	str	r3, [sp, #28]
   184e0:	b	17ae0 <test_sort_find@@Base+0xb04>
   184e4:	ldr	r0, [pc, #-1460]	; 17f38 <test_sort_find@@Base+0xf5c>
   184e8:	bl	129f0 <puts@plt>
   184ec:	mvn	r3, #0
   184f0:	str	r3, [sp, #28]
   184f4:	b	17ae0 <test_sort_find@@Base+0xb04>
   184f8:	ldr	r0, [pc, #-1476]	; 17f3c <test_sort_find@@Base+0xf60>
   184fc:	bl	129f0 <puts@plt>
   18500:	mvn	r3, #0
   18504:	str	r3, [sp, #28]
   18508:	b	17ae0 <test_sort_find@@Base+0xb04>
   1850c:	bl	13024 <__assert_fail@plt+0x598>

00018510 <test_scan@@Base>:
   18510:	ldr	r3, [pc, #4076]	; 19504 <test_scan@@Base+0xff4>
   18514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18518:	mov	r4, r0
   1851c:	ldm	r3, {r0, r1}
   18520:	sub	sp, sp, #84	; 0x54
   18524:	lsr	r3, r1, #16
   18528:	str	r0, [sp, #72]	; 0x48
   1852c:	mov	r0, r4
   18530:	strh	r1, [sp, #76]	; 0x4c
   18534:	strb	r3, [sp, #78]	; 0x4e
   18538:	bl	1de88 <flatcc_builder_reset@@Base>
   1853c:	mov	r3, #0
   18540:	mov	r0, r4
   18544:	mov	r2, r3
   18548:	ldr	r1, [pc, #4024]	; 19508 <test_scan@@Base+0xff8>
   1854c:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   18550:	cmp	r0, #0
   18554:	bne	18564 <test_scan@@Base+0x54>
   18558:	mov	r1, #36	; 0x24
   1855c:	mov	r0, r4
   18560:	bl	203cc <flatcc_builder_start_table@@Base>
   18564:	ldr	r1, [pc, #4000]	; 1950c <test_scan@@Base+0xffc>
   18568:	mov	r0, r4
   1856c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   18570:	subs	r5, r0, #0
   18574:	beq	1858c <test_scan@@Base+0x7c>
   18578:	mov	r1, #3
   1857c:	mov	r0, r4
   18580:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   18584:	cmp	r0, #0
   18588:	strne	r5, [r0]
   1858c:	mvn	r2, #0
   18590:	mov	r3, #1
   18594:	str	r2, [sp, #4]
   18598:	str	r3, [sp]
   1859c:	mov	r2, #7
   185a0:	add	r1, sp, #72	; 0x48
   185a4:	mov	r0, r4
   185a8:	bl	20fcc <flatcc_builder_create_vector@@Base>
   185ac:	subs	r5, r0, #0
   185b0:	beq	185c8 <test_scan@@Base+0xb8>
   185b4:	mov	r1, #5
   185b8:	mov	r0, r4
   185bc:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   185c0:	cmp	r0, #0
   185c4:	strne	r5, [r0]
   185c8:	mov	r0, r4
   185cc:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   185d0:	mov	r0, r4
   185d4:	bl	2132c <flatcc_builder_end_offset_vector@@Base>
   185d8:	subs	r5, r0, #0
   185dc:	beq	185f4 <test_scan@@Base+0xe4>
   185e0:	mov	r1, #10
   185e4:	mov	r0, r4
   185e8:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   185ec:	cmp	r0, #0
   185f0:	strne	r5, [r0]
   185f4:	mov	r0, r4
   185f8:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   185fc:	mov	r1, #36	; 0x24
   18600:	mov	r0, r4
   18604:	bl	203cc <flatcc_builder_start_table@@Base>
   18608:	ldr	r1, [pc, #3840]	; 19510 <test_scan@@Base+0x1000>
   1860c:	mov	r0, r4
   18610:	bl	2217c <flatcc_builder_create_string_str@@Base>
   18614:	subs	r5, r0, #0
   18618:	beq	18630 <test_scan@@Base+0x120>
   1861c:	mov	r1, #3
   18620:	mov	r0, r4
   18624:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   18628:	cmp	r0, #0
   1862c:	strne	r5, [r0]
   18630:	ldr	r5, [pc, #3804]	; 19514 <test_scan@@Base+0x1004>
   18634:	mov	r2, #1
   18638:	add	r1, r5, #12
   1863c:	mov	r0, r4
   18640:	bl	20d74 <flatcc_builder_check_required@@Base>
   18644:	cmp	r0, #0
   18648:	beq	19ca4 <test_scan@@Base+0x1794>
   1864c:	mov	r0, r4
   18650:	bl	20e0c <flatcc_builder_end_table@@Base>
   18654:	subs	r1, r0, #0
   18658:	beq	18664 <test_scan@@Base+0x154>
   1865c:	mov	r0, r4
   18660:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   18664:	mov	r1, #36	; 0x24
   18668:	mov	r0, r4
   1866c:	bl	203cc <flatcc_builder_start_table@@Base>
   18670:	ldr	r1, [pc, #3744]	; 19518 <test_scan@@Base+0x1008>
   18674:	mov	r0, r4
   18678:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1867c:	subs	r6, r0, #0
   18680:	beq	18698 <test_scan@@Base+0x188>
   18684:	mov	r1, #3
   18688:	mov	r0, r4
   1868c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   18690:	cmp	r0, #0
   18694:	strne	r6, [r0]
   18698:	mov	r2, #1
   1869c:	add	r1, r5, #12
   186a0:	mov	r0, r4
   186a4:	bl	20d74 <flatcc_builder_check_required@@Base>
   186a8:	cmp	r0, #0
   186ac:	beq	19ca4 <test_scan@@Base+0x1794>
   186b0:	mov	r0, r4
   186b4:	bl	20e0c <flatcc_builder_end_table@@Base>
   186b8:	subs	r1, r0, #0
   186bc:	beq	186c8 <test_scan@@Base+0x1b8>
   186c0:	mov	r0, r4
   186c4:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   186c8:	mov	r1, #36	; 0x24
   186cc:	mov	r0, r4
   186d0:	bl	203cc <flatcc_builder_start_table@@Base>
   186d4:	ldr	r1, [pc, #3648]	; 1951c <test_scan@@Base+0x100c>
   186d8:	mov	r0, r4
   186dc:	bl	2217c <flatcc_builder_create_string_str@@Base>
   186e0:	subs	r6, r0, #0
   186e4:	beq	186fc <test_scan@@Base+0x1ec>
   186e8:	mov	r1, #3
   186ec:	mov	r0, r4
   186f0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   186f4:	cmp	r0, #0
   186f8:	strne	r6, [r0]
   186fc:	mov	r2, #1
   18700:	add	r1, r5, #12
   18704:	mov	r0, r4
   18708:	bl	20d74 <flatcc_builder_check_required@@Base>
   1870c:	cmp	r0, #0
   18710:	beq	19ca4 <test_scan@@Base+0x1794>
   18714:	mov	r0, r4
   18718:	bl	20e0c <flatcc_builder_end_table@@Base>
   1871c:	subs	r1, r0, #0
   18720:	beq	1872c <test_scan@@Base+0x21c>
   18724:	mov	r0, r4
   18728:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   1872c:	mov	r1, #36	; 0x24
   18730:	mov	r0, r4
   18734:	bl	203cc <flatcc_builder_start_table@@Base>
   18738:	ldr	r1, [pc, #3552]	; 19520 <test_scan@@Base+0x1010>
   1873c:	mov	r0, r4
   18740:	bl	2217c <flatcc_builder_create_string_str@@Base>
   18744:	subs	r6, r0, #0
   18748:	beq	18760 <test_scan@@Base+0x250>
   1874c:	mov	r1, #3
   18750:	mov	r0, r4
   18754:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   18758:	cmp	r0, #0
   1875c:	strne	r6, [r0]
   18760:	mov	r2, #1
   18764:	add	r1, r5, #12
   18768:	mov	r0, r4
   1876c:	bl	20d74 <flatcc_builder_check_required@@Base>
   18770:	cmp	r0, #0
   18774:	beq	19ca4 <test_scan@@Base+0x1794>
   18778:	mov	r0, r4
   1877c:	bl	20e0c <flatcc_builder_end_table@@Base>
   18780:	subs	r1, r0, #0
   18784:	beq	18790 <test_scan@@Base+0x280>
   18788:	mov	r0, r4
   1878c:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   18790:	mov	r1, #36	; 0x24
   18794:	mov	r0, r4
   18798:	bl	203cc <flatcc_builder_start_table@@Base>
   1879c:	ldr	r1, [pc, #3448]	; 1951c <test_scan@@Base+0x100c>
   187a0:	mov	r0, r4
   187a4:	bl	2217c <flatcc_builder_create_string_str@@Base>
   187a8:	subs	r6, r0, #0
   187ac:	beq	187c4 <test_scan@@Base+0x2b4>
   187b0:	mov	r1, #3
   187b4:	mov	r0, r4
   187b8:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   187bc:	cmp	r0, #0
   187c0:	strne	r6, [r0]
   187c4:	mov	r2, #1
   187c8:	add	r1, r5, #12
   187cc:	mov	r0, r4
   187d0:	bl	20d74 <flatcc_builder_check_required@@Base>
   187d4:	cmp	r0, #0
   187d8:	beq	19ca4 <test_scan@@Base+0x1794>
   187dc:	mov	r0, r4
   187e0:	bl	20e0c <flatcc_builder_end_table@@Base>
   187e4:	subs	r1, r0, #0
   187e8:	beq	187f4 <test_scan@@Base+0x2e4>
   187ec:	mov	r0, r4
   187f0:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   187f4:	mov	r0, r4
   187f8:	bl	2132c <flatcc_builder_end_offset_vector@@Base>
   187fc:	subs	r6, r0, #0
   18800:	beq	18818 <test_scan@@Base+0x308>
   18804:	mov	r1, #11
   18808:	mov	r0, r4
   1880c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   18810:	cmp	r0, #0
   18814:	strne	r6, [r0]
   18818:	add	r1, r5, #12
   1881c:	mov	r2, #1
   18820:	mov	r0, r4
   18824:	bl	20d74 <flatcc_builder_check_required@@Base>
   18828:	cmp	r0, #0
   1882c:	beq	19ca4 <test_scan@@Base+0x1794>
   18830:	mov	r0, r4
   18834:	bl	20e0c <flatcc_builder_end_table@@Base>
   18838:	mov	r1, r0
   1883c:	mov	r0, r4
   18840:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   18844:	mov	r0, r4
   18848:	add	r1, sp, #68	; 0x44
   1884c:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   18850:	subs	r3, r0, #0
   18854:	mov	r2, r3
   18858:	str	r3, [sp, #8]
   1885c:	beq	18870 <test_scan@@Base+0x360>
   18860:	ldr	r3, [pc, #3260]	; 19524 <test_scan@@Base+0x1014>
   18864:	ldr	r2, [r2, #4]
   18868:	cmp	r2, r3
   1886c:	beq	18874 <test_scan@@Base+0x364>
   18870:	bl	12c8c <__assert_fail@plt+0x200>
   18874:	ldr	r3, [sp, #8]
   18878:	ldr	r2, [r3]
   1887c:	adds	r3, r3, r2
   18880:	beq	18870 <test_scan@@Base+0x360>
   18884:	ldr	r1, [sp, #8]
   18888:	ldr	r1, [r1, r2]
   1888c:	sub	r1, r3, r1
   18890:	ldrh	r2, [r1]
   18894:	cmp	r2, #27
   18898:	bhi	188b0 <test_scan@@Base+0x3a0>
   1889c:	ldr	r3, [pc, #3412]	; 195f8 <test_scan@@Base+0x10e8>
   188a0:	ldr	r2, [pc, #3200]	; 19528 <test_scan@@Base+0x1018>
   188a4:	ldr	r1, [pc, #3396]	; 195f0 <test_scan@@Base+0x10e0>
   188a8:	ldr	r0, [pc, #3196]	; 1952c <test_scan@@Base+0x101c>
   188ac:	bl	12a8c <__assert_fail@plt>
   188b0:	ldrh	r2, [r1, #26]
   188b4:	cmp	r2, #0
   188b8:	beq	1889c <test_scan@@Base+0x38c>
   188bc:	ldr	r0, [r3, r2]
   188c0:	add	r2, r3, r2
   188c4:	add	r0, r0, #4
   188c8:	adds	r5, r2, r0
   188cc:	beq	1889c <test_scan@@Base+0x38c>
   188d0:	ldrh	ip, [r1, #14]
   188d4:	cmp	ip, #0
   188d8:	beq	19c78 <test_scan@@Base+0x1768>
   188dc:	ldr	lr, [r3, ip]
   188e0:	add	ip, r3, ip
   188e4:	add	lr, lr, #4
   188e8:	str	ip, [sp, #44]	; 0x2c
   188ec:	adds	ip, ip, lr
   188f0:	str	lr, [sp, #48]	; 0x30
   188f4:	str	ip, [sp, #36]	; 0x24
   188f8:	beq	19c78 <test_scan@@Base+0x1768>
   188fc:	ldrh	r1, [r1, #24]
   18900:	cmp	r1, #0
   18904:	beq	19c8c <test_scan@@Base+0x177c>
   18908:	ldr	r8, [r3, r1]
   1890c:	add	r3, r3, r1
   18910:	add	r8, r8, #4
   18914:	adds	r3, r3, r8
   18918:	str	r3, [sp, #40]	; 0x28
   1891c:	beq	19c8c <test_scan@@Base+0x177c>
   18920:	ldr	r6, [r5, #-4]
   18924:	cmp	r6, #0
   18928:	beq	1946c <test_scan@@Base+0xf5c>
   1892c:	ldr	r3, [r2, r0]
   18930:	adds	r2, r5, r3
   18934:	str	r2, [sp, #12]
   18938:	beq	1949c <test_scan@@Base+0xf8c>
   1893c:	ldr	r3, [r5, r3]
   18940:	sub	r3, r2, r3
   18944:	str	r3, [sp, #32]
   18948:	ldrh	r2, [r3]
   1894c:	cmp	r2, #11
   18950:	str	r2, [sp, #28]
   18954:	bhi	1896c <test_scan@@Base+0x45c>
   18958:	ldr	r3, [pc, #3024]	; 19530 <test_scan@@Base+0x1020>
   1895c:	ldr	r2, [pc, #3024]	; 19534 <test_scan@@Base+0x1024>
   18960:	ldr	r1, [pc, #3024]	; 19538 <test_scan@@Base+0x1028>
   18964:	ldr	r0, [pc, #3024]	; 1953c <test_scan@@Base+0x102c>
   18968:	bl	12a8c <__assert_fail@plt>
   1896c:	ldrh	r8, [r3, #10]
   18970:	cmp	r8, #0
   18974:	beq	18958 <test_scan@@Base+0x448>
   18978:	add	r3, r5, #4
   1897c:	ldr	r4, [pc, #2964]	; 19518 <test_scan@@Base+0x1008>
   18980:	ldr	r2, [sp, #12]
   18984:	str	r3, [sp, #16]
   18988:	str	r3, [sp, #52]	; 0x34
   1898c:	mov	r9, r3
   18990:	mov	r7, #0
   18994:	mov	r3, r8
   18998:	ldr	r0, [r2, r3]
   1899c:	add	r2, r2, r3
   189a0:	add	r0, r0, #4
   189a4:	add	r0, r2, r0
   189a8:	mov	r1, r4
   189ac:	bl	12990 <strcmp@plt>
   189b0:	cmp	r0, #0
   189b4:	beq	189fc <test_scan@@Base+0x4ec>
   189b8:	add	r7, r7, #1
   189bc:	cmp	r6, r7
   189c0:	beq	1946c <test_scan@@Base+0xf5c>
   189c4:	mov	r3, r9
   189c8:	add	r9, r9, #4
   189cc:	ldr	r1, [r3]
   189d0:	adds	r2, r3, r1
   189d4:	beq	1949c <test_scan@@Base+0xf8c>
   189d8:	ldr	r3, [r3, r1]
   189dc:	sub	r3, r2, r3
   189e0:	ldrh	r1, [r3]
   189e4:	cmp	r1, #11
   189e8:	bls	18958 <test_scan@@Base+0x448>
   189ec:	ldrh	r3, [r3, #10]
   189f0:	cmp	r3, #0
   189f4:	bne	18998 <test_scan@@Base+0x488>
   189f8:	b	18958 <test_scan@@Base+0x448>
   189fc:	cmp	r7, #1
   18a00:	bne	1946c <test_scan@@Base+0xf5c>
   18a04:	sub	r3, r6, #-1073741823	; 0xc0000001
   18a08:	sub	r2, r6, #1
   18a0c:	add	r3, r5, r3, lsl #2
   18a10:	str	r2, [sp, #20]
   18a14:	str	r3, [sp, #24]
   18a18:	ldr	r7, [pc, #2808]	; 19518 <test_scan@@Base+0x1008>
   18a1c:	mov	sl, r3
   18a20:	mov	r9, r2
   18a24:	b	18a8c <test_scan@@Base+0x57c>
   18a28:	cmp	r6, r9
   18a2c:	mov	r3, sl
   18a30:	bls	194d0 <test_scan@@Base+0xfc0>
   18a34:	ldr	r2, [sl]
   18a38:	sub	sl, sl, #4
   18a3c:	adds	r0, r3, r2
   18a40:	beq	1949c <test_scan@@Base+0xf8c>
   18a44:	ldr	r3, [r3, r2]
   18a48:	sub	r3, r0, r3
   18a4c:	ldrh	r2, [r3]
   18a50:	cmp	r2, #11
   18a54:	bls	18958 <test_scan@@Base+0x448>
   18a58:	ldrh	r2, [r3, #10]
   18a5c:	cmp	r2, #0
   18a60:	beq	18958 <test_scan@@Base+0x448>
   18a64:	ldr	r3, [r0, r2]
   18a68:	add	r0, r0, r2
   18a6c:	add	r3, r3, #4
   18a70:	add	r0, r0, r3
   18a74:	mov	r1, r7
   18a78:	bl	12990 <strcmp@plt>
   18a7c:	sub	r3, r9, #1
   18a80:	cmp	r0, #0
   18a84:	beq	18aa4 <test_scan@@Base+0x594>
   18a88:	mov	r9, r3
   18a8c:	cmn	r9, #1
   18a90:	bne	18a28 <test_scan@@Base+0x518>
   18a94:	ldr	r0, [pc, #2724]	; 19540 <test_scan@@Base+0x1030>
   18a98:	bl	129f0 <puts@plt>
   18a9c:	mvn	r6, #0
   18aa0:	b	18d44 <test_scan@@Base+0x834>
   18aa4:	cmp	r9, #1
   18aa8:	bne	18a94 <test_scan@@Base+0x584>
   18aac:	ldr	r9, [pc, #2704]	; 19544 <test_scan@@Base+0x1034>
   18ab0:	ldr	sl, [sp, #16]
   18ab4:	ldr	r1, [sp, #12]
   18ab8:	mov	r4, r0
   18abc:	mov	r3, r8
   18ac0:	ldr	r0, [r1, r3]
   18ac4:	add	r1, r1, r3
   18ac8:	add	r0, r0, #4
   18acc:	adds	r0, r1, r0
   18ad0:	beq	18b0c <test_scan@@Base+0x5fc>
   18ad4:	ldr	r7, [r0, #-4]
   18ad8:	mov	r1, r9
   18adc:	cmp	r7, #5
   18ae0:	movcc	r2, r7
   18ae4:	movcs	r2, #5
   18ae8:	bl	12a74 <strncmp@plt>
   18aec:	cmp	r7, #4
   18af0:	clz	r0, r0
   18af4:	lsr	r0, r0, #5
   18af8:	movls	r0, #0
   18afc:	cmp	r0, #0
   18b00:	beq	18b0c <test_scan@@Base+0x5fc>
   18b04:	cmp	r7, #5
   18b08:	bls	18b50 <test_scan@@Base+0x640>
   18b0c:	add	r4, r4, #1
   18b10:	cmp	r6, r4
   18b14:	beq	18bfc <test_scan@@Base+0x6ec>
   18b18:	mov	r3, sl
   18b1c:	add	sl, sl, #4
   18b20:	ldr	r2, [r3]
   18b24:	adds	r1, r3, r2
   18b28:	beq	1949c <test_scan@@Base+0xf8c>
   18b2c:	ldr	r3, [r3, r2]
   18b30:	sub	r3, r1, r3
   18b34:	ldrh	r2, [r3]
   18b38:	cmp	r2, #11
   18b3c:	bls	18958 <test_scan@@Base+0x448>
   18b40:	ldrh	r3, [r3, #10]
   18b44:	cmp	r3, #0
   18b48:	bne	18ac0 <test_scan@@Base+0x5b0>
   18b4c:	b	18958 <test_scan@@Base+0x448>
   18b50:	cmp	r4, #1
   18b54:	bne	18bfc <test_scan@@Base+0x6ec>
   18b58:	ldr	sl, [sp, #24]
   18b5c:	ldr	r4, [sp, #20]
   18b60:	ldr	r9, [pc, #2524]	; 19544 <test_scan@@Base+0x1034>
   18b64:	cmp	r4, r6
   18b68:	mov	r3, sl
   18b6c:	bcs	194d0 <test_scan@@Base+0xfc0>
   18b70:	ldr	r2, [sl]
   18b74:	sub	sl, sl, #4
   18b78:	adds	r0, r3, r2
   18b7c:	beq	1949c <test_scan@@Base+0xf8c>
   18b80:	ldr	r3, [r3, r2]
   18b84:	sub	r3, r0, r3
   18b88:	ldrh	r2, [r3]
   18b8c:	cmp	r2, #11
   18b90:	bls	18958 <test_scan@@Base+0x448>
   18b94:	ldrh	r2, [r3, #10]
   18b98:	cmp	r2, #0
   18b9c:	beq	18958 <test_scan@@Base+0x448>
   18ba0:	ldr	r3, [r0, r2]
   18ba4:	add	r0, r0, r2
   18ba8:	add	r3, r3, #4
   18bac:	adds	r0, r0, r3
   18bb0:	beq	18bf0 <test_scan@@Base+0x6e0>
   18bb4:	ldr	r7, [r0, #-4]
   18bb8:	mov	r1, r9
   18bbc:	cmp	r7, #5
   18bc0:	movcc	r2, r7
   18bc4:	movcs	r2, #5
   18bc8:	bl	12a74 <strncmp@plt>
   18bcc:	cmp	r7, #4
   18bd0:	movls	r3, #0
   18bd4:	movhi	r3, #1
   18bd8:	cmp	r0, #0
   18bdc:	movne	r3, #0
   18be0:	cmp	r3, #0
   18be4:	beq	18bf0 <test_scan@@Base+0x6e0>
   18be8:	cmp	r7, #5
   18bec:	bls	18c0c <test_scan@@Base+0x6fc>
   18bf0:	cmp	r4, #0
   18bf4:	sub	r4, r4, #1
   18bf8:	bne	18b64 <test_scan@@Base+0x654>
   18bfc:	ldr	r0, [pc, #2372]	; 19548 <test_scan@@Base+0x1038>
   18c00:	bl	129f0 <puts@plt>
   18c04:	mvn	r6, #0
   18c08:	b	18d44 <test_scan@@Base+0x834>
   18c0c:	cmp	r4, #1
   18c10:	bne	18bfc <test_scan@@Base+0x6ec>
   18c14:	cmp	r6, #2
   18c18:	bls	18cc0 <test_scan@@Base+0x7b0>
   18c1c:	ldr	r3, [r5, #8]
   18c20:	add	r3, r3, #8
   18c24:	adds	r2, r5, r3
   18c28:	beq	1949c <test_scan@@Base+0xf8c>
   18c2c:	ldr	r3, [r5, r3]
   18c30:	sub	r3, r2, r3
   18c34:	ldrh	r1, [r3]
   18c38:	cmp	r1, #11
   18c3c:	bls	18958 <test_scan@@Base+0x448>
   18c40:	ldrh	r0, [r3, #10]
   18c44:	cmp	r0, #0
   18c48:	beq	18958 <test_scan@@Base+0x448>
   18c4c:	ldr	r4, [pc, #2244]	; 19518 <test_scan@@Base+0x1008>
   18c50:	add	r9, r5, #12
   18c54:	mov	r7, #2
   18c58:	mov	r3, r0
   18c5c:	ldr	r0, [r2, r3]
   18c60:	add	r2, r2, r3
   18c64:	add	r0, r0, #4
   18c68:	add	r0, r2, r0
   18c6c:	mov	r1, r4
   18c70:	bl	12990 <strcmp@plt>
   18c74:	cmp	r0, #0
   18c78:	beq	18f88 <test_scan@@Base+0xa78>
   18c7c:	add	r7, r7, #1
   18c80:	cmp	r6, r7
   18c84:	beq	18cc0 <test_scan@@Base+0x7b0>
   18c88:	mov	r3, r9
   18c8c:	add	r9, r9, #4
   18c90:	ldr	r1, [r3]
   18c94:	adds	r2, r3, r1
   18c98:	beq	1949c <test_scan@@Base+0xf8c>
   18c9c:	ldr	r3, [r3, r1]
   18ca0:	sub	r3, r2, r3
   18ca4:	ldrh	r1, [r3]
   18ca8:	cmp	r1, #11
   18cac:	bls	18958 <test_scan@@Base+0x448>
   18cb0:	ldrh	r3, [r3, #10]
   18cb4:	cmp	r3, #0
   18cb8:	bne	18c5c <test_scan@@Base+0x74c>
   18cbc:	b	18958 <test_scan@@Base+0x448>
   18cc0:	ldr	r9, [sp, #16]
   18cc4:	ldr	r2, [sp, #12]
   18cc8:	ldr	r7, [pc, #2172]	; 1954c <test_scan@@Base+0x103c>
   18ccc:	mov	r4, #0
   18cd0:	mov	r3, r8
   18cd4:	ldr	r0, [r2, r3]
   18cd8:	add	r2, r2, r3
   18cdc:	add	r0, r0, #4
   18ce0:	add	r0, r2, r0
   18ce4:	mov	r1, r7
   18ce8:	bl	12990 <strcmp@plt>
   18cec:	cmp	r0, #0
   18cf0:	beq	18d38 <test_scan@@Base+0x828>
   18cf4:	add	r4, r4, #1
   18cf8:	cmp	r6, r4
   18cfc:	beq	18d58 <test_scan@@Base+0x848>
   18d00:	mov	r3, r9
   18d04:	add	r9, r9, #4
   18d08:	ldr	r1, [r3]
   18d0c:	adds	r2, r3, r1
   18d10:	beq	1949c <test_scan@@Base+0xf8c>
   18d14:	ldr	r3, [r3, r1]
   18d18:	sub	r3, r2, r3
   18d1c:	ldrh	r1, [r3]
   18d20:	cmp	r1, #11
   18d24:	bls	18958 <test_scan@@Base+0x448>
   18d28:	ldrh	r3, [r3, #10]
   18d2c:	cmp	r3, #0
   18d30:	bne	18cd4 <test_scan@@Base+0x7c4>
   18d34:	b	18958 <test_scan@@Base+0x448>
   18d38:	ldr	r0, [pc, #2064]	; 19550 <test_scan@@Base+0x1040>
   18d3c:	bl	129f0 <puts@plt>
   18d40:	mvn	r6, #0
   18d44:	ldr	r0, [sp, #8]
   18d48:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   18d4c:	mov	r0, r6
   18d50:	add	sp, sp, #84	; 0x54
   18d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d58:	ldr	r9, [sp, #16]
   18d5c:	ldr	r2, [sp, #12]
   18d60:	ldr	r6, [pc, #1960]	; 19510 <test_scan@@Base+0x1000>
   18d64:	mov	r7, #0
   18d68:	mov	r3, r8
   18d6c:	ldr	r0, [r2, r3]
   18d70:	add	r2, r2, r3
   18d74:	add	r0, r0, #4
   18d78:	add	r0, r2, r0
   18d7c:	mov	r1, r6
   18d80:	bl	12990 <strcmp@plt>
   18d84:	cmp	r0, #0
   18d88:	beq	18dd0 <test_scan@@Base+0x8c0>
   18d8c:	add	r7, r7, #1
   18d90:	cmp	r4, r7
   18d94:	beq	194c0 <test_scan@@Base+0xfb0>
   18d98:	mov	r3, r9
   18d9c:	add	r9, r9, #4
   18da0:	ldr	r1, [r3]
   18da4:	adds	r2, r3, r1
   18da8:	beq	1949c <test_scan@@Base+0xf8c>
   18dac:	ldr	r3, [r3, r1]
   18db0:	sub	r3, r2, r3
   18db4:	ldrh	r1, [r3]
   18db8:	cmp	r1, #11
   18dbc:	bls	18958 <test_scan@@Base+0x448>
   18dc0:	ldrh	r3, [r3, #10]
   18dc4:	cmp	r3, #0
   18dc8:	bne	18d6c <test_scan@@Base+0x85c>
   18dcc:	b	18958 <test_scan@@Base+0x448>
   18dd0:	cmp	r7, #0
   18dd4:	bne	194c0 <test_scan@@Base+0xfb0>
   18dd8:	ldr	r6, [pc, #1852]	; 1951c <test_scan@@Base+0x100c>
   18ddc:	ldr	r9, [sp, #16]
   18de0:	ldr	r0, [sp, #12]
   18de4:	ldr	r3, [r0, r8]
   18de8:	add	r0, r0, r8
   18dec:	add	r3, r3, #4
   18df0:	add	r0, r0, r3
   18df4:	mov	r1, r6
   18df8:	bl	12990 <strcmp@plt>
   18dfc:	cmp	r0, #0
   18e00:	beq	18e48 <test_scan@@Base+0x938>
   18e04:	add	r7, r7, #1
   18e08:	cmp	r4, r7
   18e0c:	bls	18ec4 <test_scan@@Base+0x9b4>
   18e10:	mov	r3, r9
   18e14:	add	r9, r9, #4
   18e18:	ldr	r2, [r3]
   18e1c:	adds	r0, r3, r2
   18e20:	beq	1949c <test_scan@@Base+0xf8c>
   18e24:	ldr	r3, [r3, r2]
   18e28:	sub	r3, r0, r3
   18e2c:	ldrh	r2, [r3]
   18e30:	cmp	r2, #11
   18e34:	bls	18958 <test_scan@@Base+0x448>
   18e38:	ldrh	r8, [r3, #10]
   18e3c:	cmp	r8, #0
   18e40:	bne	18de4 <test_scan@@Base+0x8d4>
   18e44:	b	18958 <test_scan@@Base+0x448>
   18e48:	cmp	r7, #2
   18e4c:	bne	18ec4 <test_scan@@Base+0x9b4>
   18e50:	ldr	r8, [sp, #24]
   18e54:	ldr	r7, [sp, #20]
   18e58:	ldr	r6, [pc, #1724]	; 1951c <test_scan@@Base+0x100c>
   18e5c:	cmp	r7, r4
   18e60:	mov	r3, r8
   18e64:	bcs	194d0 <test_scan@@Base+0xfc0>
   18e68:	ldr	r2, [r8]
   18e6c:	sub	r8, r8, #4
   18e70:	adds	r0, r3, r2
   18e74:	beq	1949c <test_scan@@Base+0xf8c>
   18e78:	ldr	r3, [r3, r2]
   18e7c:	sub	r3, r0, r3
   18e80:	ldrh	r2, [r3]
   18e84:	cmp	r2, #11
   18e88:	bls	18958 <test_scan@@Base+0x448>
   18e8c:	ldrh	r2, [r3, #10]
   18e90:	cmp	r2, #0
   18e94:	beq	18958 <test_scan@@Base+0x448>
   18e98:	ldr	r3, [r0, r2]
   18e9c:	add	r0, r0, r2
   18ea0:	add	r3, r3, #4
   18ea4:	add	r0, r0, r3
   18ea8:	mov	r1, r6
   18eac:	bl	12990 <strcmp@plt>
   18eb0:	cmp	r0, #0
   18eb4:	beq	18ed4 <test_scan@@Base+0x9c4>
   18eb8:	cmp	r7, #0
   18ebc:	sub	r7, r7, #1
   18ec0:	bne	18e5c <test_scan@@Base+0x94c>
   18ec4:	ldr	r0, [pc, #1672]	; 19554 <test_scan@@Base+0x1044>
   18ec8:	bl	129f0 <puts@plt>
   18ecc:	mvn	r6, #0
   18ed0:	b	18d44 <test_scan@@Base+0x834>
   18ed4:	cmp	r7, #4
   18ed8:	bne	18ec4 <test_scan@@Base+0x9b4>
   18edc:	ldr	r8, [pc, #1652]	; 19558 <test_scan@@Base+0x1048>
   18ee0:	ldr	r9, [sp, #24]
   18ee4:	ldr	r6, [sp, #20]
   18ee8:	cmp	r6, r4
   18eec:	mov	r3, r9
   18ef0:	bcs	194d0 <test_scan@@Base+0xfc0>
   18ef4:	ldr	r2, [r9]
   18ef8:	sub	r9, r9, #4
   18efc:	adds	r0, r3, r2
   18f00:	beq	1949c <test_scan@@Base+0xf8c>
   18f04:	ldr	r3, [r3, r2]
   18f08:	sub	r3, r0, r3
   18f0c:	ldrh	r2, [r3]
   18f10:	cmp	r2, #11
   18f14:	bls	18958 <test_scan@@Base+0x448>
   18f18:	ldrh	r2, [r3, #10]
   18f1c:	cmp	r2, #0
   18f20:	beq	18958 <test_scan@@Base+0x448>
   18f24:	ldr	r3, [r0, r2]
   18f28:	add	r0, r0, r2
   18f2c:	add	r3, r3, #4
   18f30:	adds	r0, r0, r3
   18f34:	beq	18f70 <test_scan@@Base+0xa60>
   18f38:	ldr	r7, [r0, #-4]
   18f3c:	mov	r1, r8
   18f40:	cmp	r7, #8
   18f44:	movcc	r2, r7
   18f48:	movcs	r2, #8
   18f4c:	bl	12a74 <strncmp@plt>
   18f50:	cmp	r7, #7
   18f54:	clz	r0, r0
   18f58:	lsr	r0, r0, #5
   18f5c:	movls	r0, #0
   18f60:	cmp	r0, #0
   18f64:	beq	18f70 <test_scan@@Base+0xa60>
   18f68:	cmp	r7, #8
   18f6c:	bls	18f98 <test_scan@@Base+0xa88>
   18f70:	subs	r6, r6, #1
   18f74:	bcs	18ee8 <test_scan@@Base+0x9d8>
   18f78:	ldr	r0, [pc, #1500]	; 1955c <test_scan@@Base+0x104c>
   18f7c:	bl	129f0 <puts@plt>
   18f80:	mvn	r6, #0
   18f84:	b	18d44 <test_scan@@Base+0x834>
   18f88:	ldr	r0, [pc, #1488]	; 19560 <test_scan@@Base+0x1050>
   18f8c:	bl	129f0 <puts@plt>
   18f90:	mvn	r6, #0
   18f94:	b	18d44 <test_scan@@Base+0x834>
   18f98:	cmp	r6, #4
   18f9c:	bne	18f78 <test_scan@@Base+0xa68>
   18fa0:	cmp	r4, #3
   18fa4:	movcc	r8, r4
   18fa8:	movcs	r8, #3
   18fac:	sub	r9, r8, #-1073741823	; 0xc0000001
   18fb0:	ldr	r7, [pc, #1440]	; 19558 <test_scan@@Base+0x1048>
   18fb4:	add	r9, r5, r9, lsl #2
   18fb8:	cmp	r8, #1
   18fbc:	sub	r8, r8, #1
   18fc0:	beq	18f78 <test_scan@@Base+0xa68>
   18fc4:	cmp	r4, r8
   18fc8:	mov	r3, r9
   18fcc:	bls	194d0 <test_scan@@Base+0xfc0>
   18fd0:	ldr	r2, [r9]
   18fd4:	sub	r9, r9, #4
   18fd8:	adds	r0, r3, r2
   18fdc:	beq	1949c <test_scan@@Base+0xf8c>
   18fe0:	ldr	r3, [r3, r2]
   18fe4:	sub	r3, r0, r3
   18fe8:	ldrh	r2, [r3]
   18fec:	cmp	r2, #11
   18ff0:	bls	18958 <test_scan@@Base+0x448>
   18ff4:	ldrh	r2, [r3, #10]
   18ff8:	cmp	r2, #0
   18ffc:	beq	18958 <test_scan@@Base+0x448>
   19000:	ldr	r3, [r0, r2]
   19004:	add	r0, r0, r2
   19008:	add	r3, r3, #4
   1900c:	adds	r0, r0, r3
   19010:	beq	18fb8 <test_scan@@Base+0xaa8>
   19014:	ldr	r6, [r0, #-4]
   19018:	mov	r1, r7
   1901c:	cmp	r6, #8
   19020:	movcc	r2, r6
   19024:	movcs	r2, #8
   19028:	bl	12a74 <strncmp@plt>
   1902c:	cmp	r6, #7
   19030:	clz	r0, r0
   19034:	lsr	r0, r0, #5
   19038:	movls	r0, #0
   1903c:	cmp	r0, #0
   19040:	beq	18fb8 <test_scan@@Base+0xaa8>
   19044:	cmp	r6, #8
   19048:	bhi	18fb8 <test_scan@@Base+0xaa8>
   1904c:	cmp	r8, #2
   19050:	bne	18f78 <test_scan@@Base+0xa68>
   19054:	cmp	r4, #2
   19058:	beq	1947c <test_scan@@Base+0xf6c>
   1905c:	ldr	r3, [r5, #8]
   19060:	add	r3, r3, #8
   19064:	adds	r7, r5, r3
   19068:	beq	1949c <test_scan@@Base+0xf8c>
   1906c:	ldr	r3, [r5, r3]
   19070:	sub	r3, r7, r3
   19074:	ldrh	r2, [r3]
   19078:	cmp	r2, #11
   1907c:	bls	18958 <test_scan@@Base+0x448>
   19080:	ldrh	fp, [r3, #10]
   19084:	cmp	fp, #0
   19088:	addne	r9, r5, #12
   1908c:	movne	sl, r9
   19090:	movne	r0, fp
   19094:	movne	r1, r7
   19098:	beq	18958 <test_scan@@Base+0x448>
   1909c:	ldr	r3, [r1, r0]
   190a0:	add	r0, r1, r0
   190a4:	add	r3, r3, #4
   190a8:	add	r0, r0, r3
   190ac:	ldr	r1, [pc, #1128]	; 1951c <test_scan@@Base+0x100c>
   190b0:	bl	12990 <strcmp@plt>
   190b4:	cmp	r0, #0
   190b8:	beq	19100 <test_scan@@Base+0xbf0>
   190bc:	add	r8, r8, #1
   190c0:	cmp	r4, r8
   190c4:	beq	1947c <test_scan@@Base+0xf6c>
   190c8:	mov	r3, sl
   190cc:	add	sl, sl, #4
   190d0:	ldr	r2, [r3]
   190d4:	adds	r1, r3, r2
   190d8:	beq	1949c <test_scan@@Base+0xf8c>
   190dc:	ldr	r3, [r3, r2]
   190e0:	sub	r3, r1, r3
   190e4:	ldrh	r2, [r3]
   190e8:	cmp	r2, #11
   190ec:	bls	18958 <test_scan@@Base+0x448>
   190f0:	ldrh	r0, [r3, #10]
   190f4:	cmp	r0, #0
   190f8:	bne	1909c <test_scan@@Base+0xb8c>
   190fc:	b	18958 <test_scan@@Base+0x448>
   19100:	cmp	r8, #2
   19104:	mov	r6, r0
   19108:	bne	1947c <test_scan@@Base+0xf6c>
   1910c:	ldr	sl, [pc, #1092]	; 19558 <test_scan@@Base+0x1048>
   19110:	ldr	r0, [r7, fp]
   19114:	add	r7, r7, fp
   19118:	add	r0, r0, #4
   1911c:	adds	r0, r7, r0
   19120:	beq	19160 <test_scan@@Base+0xc50>
   19124:	ldr	r7, [r0, #-4]
   19128:	mov	r1, sl
   1912c:	cmp	r7, #8
   19130:	movcc	r2, r7
   19134:	movcs	r2, #8
   19138:	bl	12a74 <strncmp@plt>
   1913c:	cmp	r7, #7
   19140:	movls	r3, #0
   19144:	movhi	r3, #1
   19148:	cmp	r0, #0
   1914c:	movne	r3, #0
   19150:	cmp	r3, #0
   19154:	beq	19160 <test_scan@@Base+0xc50>
   19158:	cmp	r7, #8
   1915c:	bls	191a4 <test_scan@@Base+0xc94>
   19160:	add	r8, r8, #1
   19164:	cmp	r4, r8
   19168:	beq	1947c <test_scan@@Base+0xf6c>
   1916c:	mov	r3, r9
   19170:	add	r9, r9, #4
   19174:	ldr	r2, [r3]
   19178:	adds	r7, r3, r2
   1917c:	beq	1949c <test_scan@@Base+0xf8c>
   19180:	ldr	r3, [r3, r2]
   19184:	sub	r3, r7, r3
   19188:	ldrh	r2, [r3]
   1918c:	cmp	r2, #11
   19190:	bls	18958 <test_scan@@Base+0x448>
   19194:	ldrh	fp, [r3, #10]
   19198:	cmp	fp, #0
   1919c:	bne	19110 <test_scan@@Base+0xc00>
   191a0:	b	18958 <test_scan@@Base+0x448>
   191a4:	cmp	r8, #2
   191a8:	bne	1947c <test_scan@@Base+0xf6c>
   191ac:	ldr	r3, [pc, #872]	; 1951c <test_scan@@Base+0x100c>
   191b0:	mvn	r2, #0
   191b4:	mov	r1, #3
   191b8:	mov	r0, r5
   191bc:	bl	143b4 <_start@@Base+0x10a4>
   191c0:	cmp	r0, #4
   191c4:	mov	r7, r0
   191c8:	bne	194a0 <test_scan@@Base+0xf90>
   191cc:	ldr	r3, [pc, #888]	; 1954c <test_scan@@Base+0x103c>
   191d0:	mov	r2, #3
   191d4:	mov	r1, #1
   191d8:	mov	r0, r5
   191dc:	bl	143b4 <_start@@Base+0x10a4>
   191e0:	cmn	r0, #1
   191e4:	mov	r8, r0
   191e8:	bne	194b0 <test_scan@@Base+0xfa0>
   191ec:	ldr	r3, [pc, #796]	; 19510 <test_scan@@Base+0x1000>
   191f0:	mov	r2, #3
   191f4:	mov	r1, #1
   191f8:	mov	r0, r5
   191fc:	bl	143b4 <_start@@Base+0x10a4>
   19200:	cmn	r0, #1
   19204:	mov	r9, r0
   19208:	bne	194d4 <test_scan@@Base+0xfc4>
   1920c:	ldr	r3, [pc, #772]	; 19518 <test_scan@@Base+0x1008>
   19210:	mov	r2, #3
   19214:	mov	r1, #1
   19218:	mov	r0, r5
   1921c:	bl	143b4 <_start@@Base+0x10a4>
   19220:	cmp	r0, #1
   19224:	mov	r8, r0
   19228:	bne	194e4 <test_scan@@Base+0xfd4>
   1922c:	mov	r1, r0
   19230:	ldr	r3, [pc, #740]	; 1951c <test_scan@@Base+0x100c>
   19234:	mov	r2, #3
   19238:	mov	r0, r5
   1923c:	bl	143b4 <_start@@Base+0x10a4>
   19240:	cmp	r0, #2
   19244:	bne	194f4 <test_scan@@Base+0xfe4>
   19248:	mov	r1, r8
   1924c:	ldr	r3, [pc, #716]	; 19520 <test_scan@@Base+0x1010>
   19250:	mov	r2, #3
   19254:	mov	r0, r5
   19258:	bl	143b4 <_start@@Base+0x10a4>
   1925c:	cmn	r0, #1
   19260:	bne	195fc <test_scan@@Base+0x10ec>
   19264:	ldr	r3, [pc, #736]	; 1954c <test_scan@@Base+0x103c>
   19268:	mov	r2, #3
   1926c:	mov	r1, #1
   19270:	mov	r0, r5
   19274:	bl	144a4 <_start@@Base+0x1194>
   19278:	cmn	r0, #1
   1927c:	mov	r8, r0
   19280:	bne	1960c <test_scan@@Base+0x10fc>
   19284:	ldr	r3, [pc, #644]	; 19510 <test_scan@@Base+0x1000>
   19288:	mov	r2, #3
   1928c:	mov	r1, #1
   19290:	mov	r0, r5
   19294:	bl	144a4 <_start@@Base+0x1194>
   19298:	cmn	r0, #1
   1929c:	mov	r9, r0
   192a0:	bne	196f4 <test_scan@@Base+0x11e4>
   192a4:	ldr	r3, [pc, #620]	; 19518 <test_scan@@Base+0x1008>
   192a8:	mov	r2, #3
   192ac:	mov	r1, #1
   192b0:	mov	r0, r5
   192b4:	bl	144a4 <_start@@Base+0x1194>
   192b8:	cmp	r0, #1
   192bc:	mov	r8, r0
   192c0:	bne	19724 <test_scan@@Base+0x1214>
   192c4:	mov	r1, r0
   192c8:	ldr	r3, [pc, #588]	; 1951c <test_scan@@Base+0x100c>
   192cc:	mov	r2, #3
   192d0:	mov	r0, r5
   192d4:	bl	144a4 <_start@@Base+0x1194>
   192d8:	cmp	r0, #2
   192dc:	bne	19898 <test_scan@@Base+0x1388>
   192e0:	ldr	r3, [pc, #568]	; 19520 <test_scan@@Base+0x1010>
   192e4:	mov	r2, #3
   192e8:	mov	r1, r8
   192ec:	mov	r0, r5
   192f0:	bl	144a4 <_start@@Base+0x1194>
   192f4:	cmn	r0, #1
   192f8:	bne	19c18 <test_scan@@Base+0x1708>
   192fc:	mov	r2, #0
   19300:	mov	r1, r2
   19304:	ldr	r3, [pc, #516]	; 19510 <test_scan@@Base+0x1000>
   19308:	mov	r0, r5
   1930c:	bl	143b4 <_start@@Base+0x10a4>
   19310:	cmn	r0, #1
   19314:	bne	1948c <test_scan@@Base+0xf7c>
   19318:	mov	r2, #0
   1931c:	mov	r1, r2
   19320:	ldr	r3, [pc, #496]	; 19518 <test_scan@@Base+0x1008>
   19324:	mov	r0, r5
   19328:	bl	143b4 <_start@@Base+0x10a4>
   1932c:	cmn	r0, #1
   19330:	bne	19714 <test_scan@@Base+0x1204>
   19334:	ldr	r3, [pc, #476]	; 19518 <test_scan@@Base+0x1008>
   19338:	mov	r2, r8
   1933c:	mov	r1, r8
   19340:	mov	r0, r5
   19344:	bl	143b4 <_start@@Base+0x10a4>
   19348:	cmn	r0, #1
   1934c:	bne	19704 <test_scan@@Base+0x11f4>
   19350:	mov	r2, r0
   19354:	ldr	r3, [pc, #436]	; 19510 <test_scan@@Base+0x1000>
   19358:	mov	r1, r4
   1935c:	mov	r0, r5
   19360:	bl	143b4 <_start@@Base+0x10a4>
   19364:	cmn	r0, #1
   19368:	bne	19888 <test_scan@@Base+0x1378>
   1936c:	mov	r2, #0
   19370:	mov	r1, r2
   19374:	ldr	r3, [pc, #404]	; 19510 <test_scan@@Base+0x1000>
   19378:	mov	r0, r5
   1937c:	bl	144a4 <_start@@Base+0x1194>
   19380:	cmn	r0, #1
   19384:	bne	1948c <test_scan@@Base+0xf7c>
   19388:	mov	r2, #0
   1938c:	mov	r1, r2
   19390:	ldr	r3, [pc, #384]	; 19518 <test_scan@@Base+0x1008>
   19394:	mov	r0, r5
   19398:	bl	144a4 <_start@@Base+0x1194>
   1939c:	cmn	r0, #1
   193a0:	bne	19714 <test_scan@@Base+0x1204>
   193a4:	mov	r2, #1
   193a8:	mov	r1, r2
   193ac:	ldr	r3, [pc, #356]	; 19518 <test_scan@@Base+0x1008>
   193b0:	mov	r0, r5
   193b4:	bl	144a4 <_start@@Base+0x1194>
   193b8:	cmn	r0, #1
   193bc:	mov	r2, r0
   193c0:	bne	19704 <test_scan@@Base+0x11f4>
   193c4:	ldr	r3, [pc, #324]	; 19510 <test_scan@@Base+0x1000>
   193c8:	mov	r1, r4
   193cc:	mov	r0, r5
   193d0:	bl	144a4 <_start@@Base+0x1194>
   193d4:	cmn	r0, #1
   193d8:	mov	r8, r0
   193dc:	bne	19888 <test_scan@@Base+0x1378>
   193e0:	ldr	r1, [pc, #304]	; 19518 <test_scan@@Base+0x1008>
   193e4:	mov	r0, r5
   193e8:	bl	14204 <_start@@Base+0xef4>
   193ec:	cmp	r0, #1
   193f0:	bne	19c38 <test_scan@@Base+0x1728>
   193f4:	ldr	r1, [pc, #336]	; 1954c <test_scan@@Base+0x103c>
   193f8:	mov	r0, r5
   193fc:	bl	14204 <_start@@Base+0xef4>
   19400:	subs	r3, r0, #0
   19404:	str	r3, [sp, #56]	; 0x38
   19408:	bne	19c48 <test_scan@@Base+0x1738>
   1940c:	ldr	r1, [pc, #252]	; 19510 <test_scan@@Base+0x1000>
   19410:	mov	r0, r5
   19414:	bl	14204 <_start@@Base+0xef4>
   19418:	cmp	r0, #1
   1941c:	str	r0, [sp, #60]	; 0x3c
   19420:	bne	19c28 <test_scan@@Base+0x1718>
   19424:	ldr	r1, [pc, #240]	; 1951c <test_scan@@Base+0x100c>
   19428:	mov	r0, r5
   1942c:	bl	14204 <_start@@Base+0xef4>
   19430:	cmp	r0, #2
   19434:	bne	19c68 <test_scan@@Base+0x1758>
   19438:	ldr	r3, [sp, #36]	; 0x24
   1943c:	ldr	r3, [r3, #-4]
   19440:	cmp	r3, #0
   19444:	beq	1945c <test_scan@@Base+0xf4c>
   19448:	ldr	r2, [sp, #44]	; 0x2c
   1944c:	ldr	r1, [sp, #48]	; 0x30
   19450:	ldrb	r2, [r2, r1]
   19454:	cmp	r2, #6
   19458:	beq	1961c <test_scan@@Base+0x110c>
   1945c:	ldr	r0, [pc, #256]	; 19564 <test_scan@@Base+0x1054>
   19460:	bl	129f0 <puts@plt>
   19464:	mvn	r6, #0
   19468:	b	18d44 <test_scan@@Base+0x834>
   1946c:	ldr	r0, [pc, #244]	; 19568 <test_scan@@Base+0x1058>
   19470:	bl	129f0 <puts@plt>
   19474:	mvn	r6, #0
   19478:	b	18d44 <test_scan@@Base+0x834>
   1947c:	ldr	r0, [pc, #232]	; 1956c <test_scan@@Base+0x105c>
   19480:	bl	129f0 <puts@plt>
   19484:	mvn	r6, #0
   19488:	b	18d44 <test_scan@@Base+0x834>
   1948c:	ldr	r0, [pc, #220]	; 19570 <test_scan@@Base+0x1060>
   19490:	bl	129f0 <puts@plt>
   19494:	mvn	r6, #0
   19498:	b	18d44 <test_scan@@Base+0x834>
   1949c:	bl	12d04 <__assert_fail@plt+0x278>
   194a0:	ldr	r0, [pc, #204]	; 19574 <test_scan@@Base+0x1064>
   194a4:	bl	129f0 <puts@plt>
   194a8:	mvn	r6, #0
   194ac:	b	18d44 <test_scan@@Base+0x834>
   194b0:	ldr	r0, [pc, #192]	; 19578 <test_scan@@Base+0x1068>
   194b4:	bl	129f0 <puts@plt>
   194b8:	mvn	r6, #0
   194bc:	b	18d44 <test_scan@@Base+0x834>
   194c0:	ldr	r0, [pc, #180]	; 1957c <test_scan@@Base+0x106c>
   194c4:	bl	129f0 <puts@plt>
   194c8:	mvn	r6, #0
   194cc:	b	18d44 <test_scan@@Base+0x834>
   194d0:	bl	13594 <_start@@Base+0x284>
   194d4:	ldr	r0, [pc, #164]	; 19580 <test_scan@@Base+0x1070>
   194d8:	mov	r6, r8
   194dc:	bl	129f0 <puts@plt>
   194e0:	b	18d44 <test_scan@@Base+0x834>
   194e4:	ldr	r0, [pc, #152]	; 19584 <test_scan@@Base+0x1074>
   194e8:	mov	r6, r9
   194ec:	bl	129f0 <puts@plt>
   194f0:	b	18d44 <test_scan@@Base+0x834>
   194f4:	ldr	r0, [pc, #140]	; 19588 <test_scan@@Base+0x1078>
   194f8:	mov	r6, r9
   194fc:	bl	129f0 <puts@plt>
   19500:	b	18d44 <test_scan@@Base+0x834>
   19504:			; <UNDEFINED> instruction: 0x000254b8
   19508:	ldrdeq	r5, [r2], -r0
   1950c:	strdeq	r5, [r2], -r8
   19510:	andeq	r6, r2, ip, ror r3
   19514:	andeq	r5, r2, ip, ror #7
   19518:			; <UNDEFINED> instruction: 0x000263bc
   1951c:	andeq	r6, r2, r8, ror #7
   19520:	andeq	r6, r2, r8, asr #20
   19524:	movtpl	r4, #61261	; 0xef4d
   19528:	andeq	r0, r0, r9, lsl r5
   1952c:	andeq	r6, r2, r8, ror #20
   19530:	andeq	r5, r2, r0, lsl #4
   19534:			; <UNDEFINED> instruction: 0x000002bb
   19538:	andeq	r5, r2, r4, asr #13
   1953c:	strdeq	r5, [r2], -r0
   19540:	andeq	r6, r2, r8, lsr #25
   19544:	andeq	r6, r2, ip, ror #23
   19548:	andeq	r6, r2, r8, asr #25
   1954c:	andeq	r6, r2, r8, lsl ip
   19550:	andeq	r6, r2, r0, lsr #24
   19554:	andeq	r6, r2, ip, asr #26
   19558:	strdeq	r6, [r2], -r0
   1955c:	strdeq	r6, [r2], -ip
   19560:	ldrdeq	r7, [r2], -r8
   19564:	andeq	r7, r2, r0
   19568:	andeq	r6, r2, r8, lsl #25
   1956c:	andeq	r6, r2, r8, lsl sp
   19570:	strdeq	r6, [r2], -r8
   19574:	andeq	r6, r2, r4, asr #26
   19578:	andeq	r6, r2, r0, ror #26
   1957c:	andeq	r6, r2, r0, asr ip
   19580:	andeq	r6, r2, r4, lsl #27
   19584:	andeq	r6, r2, r8, lsr #27
   19588:	andeq	r6, r2, ip, asr #27
   1958c:	strdeq	r6, [r2], -r4
   19590:	andeq	r6, r2, r0, lsr #28
   19594:	andeq	r7, r2, ip, lsr #32
   19598:	andeq	r7, r2, r8, asr #1
   1959c:	andeq	r6, r2, r0, asr lr
   195a0:	andeq	r6, r2, r8, lsr pc
   195a4:	andeq	r6, r2, r8, lsl pc
   195a8:	andeq	r6, r2, ip, ror lr
   195ac:	andeq	r7, r2, ip, asr r0
   195b0:	muleq	r2, r4, r0
   195b4:	strdeq	r7, [r2], -r4
   195b8:	andeq	r7, r2, r0, lsr r1
   195bc:	andeq	r7, r2, r0, lsr #3
   195c0:	andeq	r6, r2, r0, ror #30
   195c4:	andeq	r6, r2, r4, lsr #29
   195c8:	andeq	r6, r2, r0, ror #9
   195cc:	andeq	r6, r2, ip, asr #29
   195d0:	andeq	r6, r2, r4, asr #31
   195d4:	andeq	r6, r2, ip, lsl #31
   195d8:	andeq	r6, r2, r8, lsr #31
   195dc:	andeq	r7, r2, ip, ror #2
   195e0:	andeq	r6, r2, r0, ror #31
   195e4:	andeq	r0, r0, fp, lsl r5
   195e8:	andeq	r6, r2, ip, ror ip
   195ec:	andeq	r0, r0, sp, lsl r5
   195f0:	andeq	r6, r2, r4, lsl r3
   195f4:	andeq	r6, r2, r0, lsl #25
   195f8:	andeq	r5, r2, r0, asr #9
   195fc:	ldr	r0, [pc, #-120]	; 1958c <test_scan@@Base+0x107c>
   19600:	bl	129f0 <puts@plt>
   19604:	mvn	r6, #0
   19608:	b	18d44 <test_scan@@Base+0x834>
   1960c:	ldr	r0, [pc, #-132]	; 19590 <test_scan@@Base+0x1080>
   19610:	bl	129f0 <puts@plt>
   19614:	mvn	r6, #0
   19618:	b	18d44 <test_scan@@Base+0x834>
   1961c:	ldr	r1, [sp, #36]	; 0x24
   19620:	ldr	r2, [sp, #56]	; 0x38
   19624:	mov	ip, r1
   19628:	b	19638 <test_scan@@Base+0x1128>
   1962c:	ldrb	r0, [r1, #1]!
   19630:	cmp	r0, #1
   19634:	beq	19654 <test_scan@@Base+0x1144>
   19638:	add	r2, r2, #1
   1963c:	cmp	r2, r3
   19640:	bne	1962c <test_scan@@Base+0x111c>
   19644:	ldr	r0, [pc, #-184]	; 19594 <test_scan@@Base+0x1084>
   19648:	bl	129f0 <puts@plt>
   1964c:	mvn	r6, #0
   19650:	b	18d44 <test_scan@@Base+0x834>
   19654:	cmp	r2, #2
   19658:	bne	19644 <test_scan@@Base+0x1134>
   1965c:	cmp	r3, #3
   19660:	bls	1969c <test_scan@@Base+0x118c>
   19664:	ldr	r2, [sp, #36]	; 0x24
   19668:	ldrb	r2, [r2, #3]
   1966c:	cmp	r2, #1
   19670:	beq	1973c <test_scan@@Base+0x122c>
   19674:	ldr	r2, [sp, #36]	; 0x24
   19678:	add	r1, r2, #3
   1967c:	mov	r2, #3
   19680:	b	19690 <test_scan@@Base+0x1180>
   19684:	ldrb	r0, [r1, #1]!
   19688:	cmp	r0, #1
   1968c:	beq	19734 <test_scan@@Base+0x1224>
   19690:	add	r2, r2, #1
   19694:	cmp	r2, r3
   19698:	bne	19684 <test_scan@@Base+0x1174>
   1969c:	ldr	r1, [sp, #36]	; 0x24
   196a0:	ldr	r2, [sp, #56]	; 0x38
   196a4:	b	196b4 <test_scan@@Base+0x11a4>
   196a8:	ldrb	r0, [r1, #1]!
   196ac:	cmp	r0, #5
   196b0:	beq	1974c <test_scan@@Base+0x123c>
   196b4:	add	r2, r2, #1
   196b8:	cmp	r2, r3
   196bc:	bne	196a8 <test_scan@@Base+0x1198>
   196c0:	ldr	r1, [sp, #36]	; 0x24
   196c4:	ldr	r2, [sp, #56]	; 0x38
   196c8:	b	196d8 <test_scan@@Base+0x11c8>
   196cc:	ldrb	r0, [r1, #1]!
   196d0:	cmp	r0, #2
   196d4:	beq	19764 <test_scan@@Base+0x1254>
   196d8:	add	r2, r2, #1
   196dc:	cmp	r2, r3
   196e0:	bne	196cc <test_scan@@Base+0x11bc>
   196e4:	ldr	r0, [pc, #-340]	; 19598 <test_scan@@Base+0x1088>
   196e8:	bl	129f0 <puts@plt>
   196ec:	mvn	r6, #0
   196f0:	b	18d44 <test_scan@@Base+0x834>
   196f4:	ldr	r0, [pc, #-352]	; 1959c <test_scan@@Base+0x108c>
   196f8:	mov	r6, r8
   196fc:	bl	129f0 <puts@plt>
   19700:	b	18d44 <test_scan@@Base+0x834>
   19704:	ldr	r0, [pc, #-364]	; 195a0 <test_scan@@Base+0x1090>
   19708:	bl	129f0 <puts@plt>
   1970c:	mvn	r6, #0
   19710:	b	18d44 <test_scan@@Base+0x834>
   19714:	ldr	r0, [pc, #-376]	; 195a4 <test_scan@@Base+0x1094>
   19718:	bl	129f0 <puts@plt>
   1971c:	mvn	r6, #0
   19720:	b	18d44 <test_scan@@Base+0x834>
   19724:	ldr	r0, [pc, #-388]	; 195a8 <test_scan@@Base+0x1098>
   19728:	mov	r6, r9
   1972c:	bl	129f0 <puts@plt>
   19730:	b	18d44 <test_scan@@Base+0x834>
   19734:	cmn	r2, #1
   19738:	beq	1969c <test_scan@@Base+0x118c>
   1973c:	ldr	r0, [pc, #-408]	; 195ac <test_scan@@Base+0x109c>
   19740:	bl	129f0 <puts@plt>
   19744:	mvn	r6, #0
   19748:	b	18d44 <test_scan@@Base+0x834>
   1974c:	cmn	r2, #1
   19750:	beq	196c0 <test_scan@@Base+0x11b0>
   19754:	ldr	r0, [pc, #-428]	; 195b0 <test_scan@@Base+0x10a0>
   19758:	bl	129f0 <puts@plt>
   1975c:	mvn	r6, #0
   19760:	b	18d44 <test_scan@@Base+0x834>
   19764:	cmp	r2, #6
   19768:	bne	196e4 <test_scan@@Base+0x11d4>
   1976c:	ldr	r2, [sp, #56]	; 0x38
   19770:	add	r2, r2, #1
   19774:	cmp	r2, r3
   19778:	beq	19754 <test_scan@@Base+0x1244>
   1977c:	ldrb	r1, [ip, #1]!
   19780:	cmp	r1, #3
   19784:	bne	19770 <test_scan@@Base+0x1260>
   19788:	cmp	r2, #3
   1978c:	bne	19754 <test_scan@@Base+0x1244>
   19790:	cmp	r3, #3
   19794:	bls	197a8 <test_scan@@Base+0x1298>
   19798:	ldr	r2, [sp, #36]	; 0x24
   1979c:	ldrb	r2, [r2, #3]
   197a0:	cmp	r2, #3
   197a4:	beq	197b8 <test_scan@@Base+0x12a8>
   197a8:	ldr	r0, [pc, #-508]	; 195b4 <test_scan@@Base+0x10a4>
   197ac:	bl	129f0 <puts@plt>
   197b0:	mvn	r6, #0
   197b4:	b	18d44 <test_scan@@Base+0x834>
   197b8:	cmp	r3, #4
   197bc:	beq	197f4 <test_scan@@Base+0x12e4>
   197c0:	ldr	r2, [sp, #36]	; 0x24
   197c4:	ldrb	r2, [r2, #4]
   197c8:	cmp	r2, #3
   197cc:	ldrne	r2, [sp, #36]	; 0x24
   197d0:	addne	r2, r2, #4
   197d4:	bne	197e8 <test_scan@@Base+0x12d8>
   197d8:	b	197f4 <test_scan@@Base+0x12e4>
   197dc:	ldrb	r1, [r2, #1]!
   197e0:	cmp	r1, #3
   197e4:	beq	19804 <test_scan@@Base+0x12f4>
   197e8:	add	r7, r7, #1
   197ec:	cmp	r7, r3
   197f0:	bne	197dc <test_scan@@Base+0x12cc>
   197f4:	ldr	r0, [pc, #-580]	; 195b8 <test_scan@@Base+0x10a8>
   197f8:	bl	129f0 <puts@plt>
   197fc:	mvn	r6, #0
   19800:	b	18d44 <test_scan@@Base+0x834>
   19804:	cmp	r7, #5
   19808:	bne	197f4 <test_scan@@Base+0x12e4>
   1980c:	ldr	r1, [sp, #36]	; 0x24
   19810:	sub	r2, r3, #1
   19814:	add	r1, r1, r3
   19818:	b	19824 <test_scan@@Base+0x1314>
   1981c:	subs	r2, r2, #1
   19820:	bcc	19c58 <test_scan@@Base+0x1748>
   19824:	cmp	r2, r3
   19828:	bcs	19ca0 <test_scan@@Base+0x1790>
   1982c:	ldrb	r0, [r1, #-1]!
   19830:	cmp	r0, #3
   19834:	bne	1981c <test_scan@@Base+0x130c>
   19838:	cmp	r2, #5
   1983c:	bne	19c58 <test_scan@@Base+0x1748>
   19840:	cmp	r3, #4
   19844:	ldr	r1, [sp, #36]	; 0x24
   19848:	movcc	r2, r3
   1984c:	movcs	r2, #4
   19850:	add	r1, r1, r2
   19854:	b	1986c <test_scan@@Base+0x135c>
   19858:	cmp	r2, r3
   1985c:	bcs	19ca0 <test_scan@@Base+0x1790>
   19860:	ldrb	r0, [r1, #-1]!
   19864:	cmp	r0, #3
   19868:	beq	198a8 <test_scan@@Base+0x1398>
   1986c:	cmp	r2, #1
   19870:	sub	r2, r2, #1
   19874:	bhi	19858 <test_scan@@Base+0x1348>
   19878:	ldr	r0, [pc, #-708]	; 195bc <test_scan@@Base+0x10ac>
   1987c:	bl	129f0 <puts@plt>
   19880:	mvn	r6, #0
   19884:	b	18d44 <test_scan@@Base+0x834>
   19888:	ldr	r0, [pc, #-720]	; 195c0 <test_scan@@Base+0x10b0>
   1988c:	bl	129f0 <puts@plt>
   19890:	mvn	r6, #0
   19894:	b	18d44 <test_scan@@Base+0x834>
   19898:	ldr	r0, [pc, #-732]	; 195c4 <test_scan@@Base+0x10b4>
   1989c:	mov	r6, r9
   198a0:	bl	129f0 <puts@plt>
   198a4:	b	18d44 <test_scan@@Base+0x834>
   198a8:	cmp	r2, #3
   198ac:	bne	19878 <test_scan@@Base+0x1368>
   198b0:	ldr	r3, [sp, #40]	; 0x28
   198b4:	ldr	r7, [r3, #-4]
   198b8:	cmp	r7, #0
   198bc:	beq	19930 <test_scan@@Base+0x1420>
   198c0:	mov	fp, r3
   198c4:	ldr	sl, [pc, #-772]	; 195c8 <test_scan@@Base+0x10b8>
   198c8:	ldr	r9, [sp, #56]	; 0x38
   198cc:	b	198dc <test_scan@@Base+0x13cc>
   198d0:	add	r9, r9, #1
   198d4:	cmp	r7, r9
   198d8:	beq	19930 <test_scan@@Base+0x1420>
   198dc:	mov	r3, fp
   198e0:	add	fp, fp, #4
   198e4:	ldr	r0, [r3]
   198e8:	add	r0, r0, #4
   198ec:	adds	r0, r3, r0
   198f0:	beq	198d0 <test_scan@@Base+0x13c0>
   198f4:	ldr	r8, [r0, #-4]
   198f8:	mov	r1, sl
   198fc:	cmp	r8, #4
   19900:	movcc	r2, r8
   19904:	movcs	r2, #4
   19908:	bl	12a74 <strncmp@plt>
   1990c:	cmp	r8, #3
   19910:	movls	r3, #0
   19914:	movhi	r3, #1
   19918:	cmp	r0, #0
   1991c:	movne	r3, #0
   19920:	cmp	r3, #0
   19924:	beq	198d0 <test_scan@@Base+0x13c0>
   19928:	cmp	r8, #4
   1992c:	bhi	198d0 <test_scan@@Base+0x13c0>
   19930:	sub	r8, r7, #-1073741823	; 0xc0000001
   19934:	ldr	r2, [sp, #40]	; 0x28
   19938:	sub	r3, r7, #1
   1993c:	add	r8, r2, r8, lsl #2
   19940:	str	r3, [sp, #36]	; 0x24
   19944:	ldr	r9, [pc, #-900]	; 195c8 <test_scan@@Base+0x10b8>
   19948:	mov	fp, r8
   1994c:	mov	sl, r3
   19950:	b	19984 <test_scan@@Base+0x1474>
   19954:	cmp	r7, sl
   19958:	mov	r0, fp
   1995c:	bls	19ca8 <test_scan@@Base+0x1798>
   19960:	ldr	r3, [fp]
   19964:	mov	r1, r9
   19968:	add	r3, r3, #4
   1996c:	add	r0, r0, r3
   19970:	bl	12990 <strcmp@plt>
   19974:	sub	fp, fp, #4
   19978:	sub	sl, sl, #1
   1997c:	cmp	r0, #0
   19980:	beq	1998c <test_scan@@Base+0x147c>
   19984:	cmn	sl, #1
   19988:	bne	19954 <test_scan@@Base+0x1444>
   1998c:	mov	fp, r8
   19990:	ldr	sl, [sp, #36]	; 0x24
   19994:	ldr	r9, [pc, #-980]	; 195c8 <test_scan@@Base+0x10b8>
   19998:	b	199cc <test_scan@@Base+0x14bc>
   1999c:	cmp	r7, sl
   199a0:	mov	r0, fp
   199a4:	bls	19ca8 <test_scan@@Base+0x1798>
   199a8:	ldr	r3, [fp]
   199ac:	mov	r1, r9
   199b0:	add	r3, r3, #4
   199b4:	add	r0, r0, r3
   199b8:	bl	12990 <strcmp@plt>
   199bc:	sub	fp, fp, #4
   199c0:	sub	sl, sl, #1
   199c4:	cmp	r0, #0
   199c8:	beq	199d4 <test_scan@@Base+0x14c4>
   199cc:	cmn	sl, #1
   199d0:	bne	1999c <test_scan@@Base+0x148c>
   199d4:	ldr	fp, [sp, #36]	; 0x24
   199d8:	mov	sl, r8
   199dc:	cmn	fp, #1
   199e0:	beq	19a28 <test_scan@@Base+0x1518>
   199e4:	cmp	r7, fp
   199e8:	mov	r3, sl
   199ec:	bls	19ca8 <test_scan@@Base+0x1798>
   199f0:	ldr	r0, [sl]
   199f4:	sub	sl, sl, #4
   199f8:	add	r0, r0, #4
   199fc:	adds	r0, r3, r0
   19a00:	beq	19c10 <test_scan@@Base+0x1700>
   19a04:	ldr	r9, [r0, #-4]
   19a08:	ldr	r1, [pc, #-1096]	; 195c8 <test_scan@@Base+0x10b8>
   19a0c:	cmp	r9, #4
   19a10:	movcc	r2, r9
   19a14:	movcs	r2, #4
   19a18:	bl	12a74 <strncmp@plt>
   19a1c:	cmp	r0, #0
   19a20:	cmpeq	r9, #4
   19a24:	bne	19c10 <test_scan@@Base+0x1700>
   19a28:	ldr	sl, [pc, #-1128]	; 195c8 <test_scan@@Base+0x10b8>
   19a2c:	ldr	r9, [sp, #36]	; 0x24
   19a30:	cmn	r9, #1
   19a34:	beq	19a7c <test_scan@@Base+0x156c>
   19a38:	cmp	r7, r9
   19a3c:	mov	r3, r8
   19a40:	bls	19ca8 <test_scan@@Base+0x1798>
   19a44:	ldr	r0, [r8]
   19a48:	sub	r8, r8, #4
   19a4c:	add	r0, r0, #4
   19a50:	adds	r0, r3, r0
   19a54:	beq	19c08 <test_scan@@Base+0x16f8>
   19a58:	ldr	fp, [r0, #-4]
   19a5c:	mov	r1, sl
   19a60:	cmp	fp, #4
   19a64:	movcc	r2, fp
   19a68:	movcs	r2, #4
   19a6c:	bl	12a74 <strncmp@plt>
   19a70:	cmp	fp, #4
   19a74:	cmpeq	r0, #0
   19a78:	bne	19c08 <test_scan@@Base+0x16f8>
   19a7c:	ldr	r1, [sp, #56]	; 0x38
   19a80:	ldr	ip, [sp, #12]
   19a84:	ldr	r2, [sp, #28]
   19a88:	ldr	r0, [sp, #52]	; 0x34
   19a8c:	ldr	r3, [sp, #32]
   19a90:	b	19ac0 <test_scan@@Base+0x15b0>
   19a94:	add	r1, r1, #1
   19a98:	cmp	r4, r1
   19a9c:	bls	19ae0 <test_scan@@Base+0x15d0>
   19aa0:	mov	r3, r0
   19aa4:	add	r0, r0, #4
   19aa8:	ldr	r2, [r3]
   19aac:	adds	ip, r3, r2
   19ab0:	beq	19b38 <test_scan@@Base+0x1628>
   19ab4:	ldr	r3, [r3, r2]
   19ab8:	sub	r3, ip, r3
   19abc:	ldrh	r2, [r3]
   19ac0:	cmp	r2, #9
   19ac4:	bls	19a94 <test_scan@@Base+0x1584>
   19ac8:	ldrh	r3, [r3, #8]
   19acc:	cmp	r3, #0
   19ad0:	beq	19a94 <test_scan@@Base+0x1584>
   19ad4:	ldrsh	r3, [ip, r3]
   19ad8:	cmp	r3, #13
   19adc:	bne	19a94 <test_scan@@Base+0x1584>
   19ae0:	ldr	r3, [r5, #4]
   19ae4:	add	r3, r3, #4
   19ae8:	adds	r3, r5, r3
   19aec:	addne	r5, r5, #8
   19af0:	ldrne	r1, [sp, #60]	; 0x3c
   19af4:	beq	19b38 <test_scan@@Base+0x1628>
   19af8:	ldr	r2, [r3]
   19afc:	sub	r2, r3, r2
   19b00:	ldrh	r0, [r2]
   19b04:	cmp	r0, #9
   19b08:	bls	19b18 <test_scan@@Base+0x1608>
   19b0c:	ldrh	r2, [r2, #8]
   19b10:	cmp	r2, #0
   19b14:	bne	19b3c <test_scan@@Base+0x162c>
   19b18:	add	r1, r1, #1
   19b1c:	cmp	r4, r1
   19b20:	beq	19b48 <test_scan@@Base+0x1638>
   19b24:	mov	r3, r5
   19b28:	add	r5, r5, #4
   19b2c:	ldr	r2, [r3]
   19b30:	adds	r3, r3, r2
   19b34:	bne	19af8 <test_scan@@Base+0x15e8>
   19b38:	bl	12a98 <__assert_fail@plt+0xc>
   19b3c:	ldrsh	r3, [r3, r2]
   19b40:	cmp	r3, #42	; 0x2a
   19b44:	bne	19b18 <test_scan@@Base+0x1608>
   19b48:	ldr	r2, [sp, #20]
   19b4c:	ldr	r0, [sp, #24]
   19b50:	cmp	r4, r2
   19b54:	mov	r3, r0
   19b58:	bls	194d0 <test_scan@@Base+0xfc0>
   19b5c:	ldr	r1, [r0]
   19b60:	sub	r0, r0, #4
   19b64:	adds	ip, r3, r1
   19b68:	beq	19b38 <test_scan@@Base+0x1628>
   19b6c:	ldr	r3, [r3, r1]
   19b70:	sub	r3, ip, r3
   19b74:	ldrh	r1, [r3]
   19b78:	cmp	r1, #9
   19b7c:	bls	19b8c <test_scan@@Base+0x167c>
   19b80:	ldrh	r3, [r3, #8]
   19b84:	cmp	r3, #0
   19b88:	bne	19bf8 <test_scan@@Base+0x16e8>
   19b8c:	cmp	r2, #0
   19b90:	sub	r2, r2, #1
   19b94:	bne	19b50 <test_scan@@Base+0x1640>
   19b98:	ldr	r1, [sp, #16]
   19b9c:	ldr	r2, [sp, #60]	; 0x3c
   19ba0:	b	19bac <test_scan@@Base+0x169c>
   19ba4:	subs	r2, r2, #1
   19ba8:	bcc	18d44 <test_scan@@Base+0x834>
   19bac:	cmp	r4, r2
   19bb0:	mov	r3, r1
   19bb4:	bls	194d0 <test_scan@@Base+0xfc0>
   19bb8:	ldr	r0, [r1]
   19bbc:	sub	r1, r1, #4
   19bc0:	adds	ip, r3, r0
   19bc4:	beq	19b38 <test_scan@@Base+0x1628>
   19bc8:	ldr	r3, [r3, r0]
   19bcc:	sub	r3, ip, r3
   19bd0:	ldrh	r0, [r3]
   19bd4:	cmp	r0, #9
   19bd8:	bls	19ba4 <test_scan@@Base+0x1694>
   19bdc:	ldrh	r3, [r3, #8]
   19be0:	cmp	r3, #0
   19be4:	beq	19ba4 <test_scan@@Base+0x1694>
   19be8:	ldrsh	r3, [ip, r3]
   19bec:	cmp	r3, #42	; 0x2a
   19bf0:	beq	18d44 <test_scan@@Base+0x834>
   19bf4:	b	19ba4 <test_scan@@Base+0x1694>
   19bf8:	ldrsh	r3, [ip, r3]
   19bfc:	cmp	r3, #1
   19c00:	beq	19b98 <test_scan@@Base+0x1688>
   19c04:	b	19b8c <test_scan@@Base+0x167c>
   19c08:	sub	r9, r9, #1
   19c0c:	b	19a30 <test_scan@@Base+0x1520>
   19c10:	sub	fp, fp, #1
   19c14:	b	199dc <test_scan@@Base+0x14cc>
   19c18:	ldr	r0, [pc, #-1620]	; 195cc <test_scan@@Base+0x10bc>
   19c1c:	mov	r6, r9
   19c20:	bl	129f0 <puts@plt>
   19c24:	b	18d44 <test_scan@@Base+0x834>
   19c28:	ldr	r0, [pc, #-1632]	; 195d0 <test_scan@@Base+0x10c0>
   19c2c:	mov	r6, r8
   19c30:	bl	129f0 <puts@plt>
   19c34:	b	18d44 <test_scan@@Base+0x834>
   19c38:	ldr	r0, [pc, #-1644]	; 195d4 <test_scan@@Base+0x10c4>
   19c3c:	mov	r6, r8
   19c40:	bl	129f0 <puts@plt>
   19c44:	b	18d44 <test_scan@@Base+0x834>
   19c48:	ldr	r0, [pc, #-1656]	; 195d8 <test_scan@@Base+0x10c8>
   19c4c:	mov	r6, r8
   19c50:	bl	129f0 <puts@plt>
   19c54:	b	18d44 <test_scan@@Base+0x834>
   19c58:	ldr	r0, [pc, #-1668]	; 195dc <test_scan@@Base+0x10cc>
   19c5c:	bl	129f0 <puts@plt>
   19c60:	mvn	r6, #0
   19c64:	b	18d44 <test_scan@@Base+0x834>
   19c68:	ldr	r0, [pc, #-1680]	; 195e0 <test_scan@@Base+0x10d0>
   19c6c:	mov	r6, r8
   19c70:	bl	129f0 <puts@plt>
   19c74:	b	18d44 <test_scan@@Base+0x834>
   19c78:	ldr	r3, [pc, #-1672]	; 195f8 <test_scan@@Base+0x10e8>
   19c7c:	ldr	r2, [pc, #-1696]	; 195e4 <test_scan@@Base+0x10d4>
   19c80:	ldr	r1, [pc, #-1688]	; 195f0 <test_scan@@Base+0x10e0>
   19c84:	ldr	r0, [pc, #-1700]	; 195e8 <test_scan@@Base+0x10d8>
   19c88:	bl	12a8c <__assert_fail@plt>
   19c8c:	ldr	r3, [pc, #-1692]	; 195f8 <test_scan@@Base+0x10e8>
   19c90:	ldr	r2, [pc, #-1708]	; 195ec <test_scan@@Base+0x10dc>
   19c94:	ldr	r1, [pc, #-1708]	; 195f0 <test_scan@@Base+0x10e0>
   19c98:	ldr	r0, [pc, #-1708]	; 195f4 <test_scan@@Base+0x10e4>
   19c9c:	bl	12a8c <__assert_fail@plt>
   19ca0:	bl	12b58 <__assert_fail@plt+0xcc>
   19ca4:	bl	13024 <__assert_fail@plt+0x598>
   19ca8:	bl	12c40 <__assert_fail@plt+0x1b4>

00019cac <test_basic_sort@@Base>:
   19cac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19cb0:	sub	sp, sp, #32
   19cb4:	mov	r3, #3
   19cb8:	mov	lr, #7
   19cbc:	mov	ip, #1
   19cc0:	mov	r1, #4
   19cc4:	mov	r2, #2
   19cc8:	mov	r4, #6
   19ccc:	strb	r4, [sp, #16]
   19cd0:	strb	r4, [sp, #29]
   19cd4:	strb	lr, [sp, #17]
   19cd8:	strb	lr, [sp, #30]
   19cdc:	strb	ip, [sp, #18]
   19ce0:	strb	ip, [sp, #24]
   19ce4:	strb	r3, [sp, #19]
   19ce8:	strb	r3, [sp, #21]
   19cec:	strb	r3, [sp, #26]
   19cf0:	strb	r3, [sp, #27]
   19cf4:	strb	r1, [sp, #20]
   19cf8:	strb	r1, [sp, #28]
   19cfc:	strb	r2, [sp, #22]
   19d00:	strb	r2, [sp, #25]
   19d04:	mov	r4, r0
   19d08:	bl	1de88 <flatcc_builder_reset@@Base>
   19d0c:	mov	r3, #0
   19d10:	mov	r0, r4
   19d14:	mov	r2, r3
   19d18:	ldr	r1, [pc, #1028]	; 1a124 <test_basic_sort@@Base+0x478>
   19d1c:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   19d20:	cmp	r0, #0
   19d24:	bne	19d34 <test_basic_sort@@Base+0x88>
   19d28:	mov	r1, #36	; 0x24
   19d2c:	mov	r0, r4
   19d30:	bl	203cc <flatcc_builder_start_table@@Base>
   19d34:	ldr	r1, [pc, #1004]	; 1a128 <test_basic_sort@@Base+0x47c>
   19d38:	mov	r0, r4
   19d3c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   19d40:	subs	r5, r0, #0
   19d44:	beq	19d5c <test_basic_sort@@Base+0xb0>
   19d48:	mov	r1, #3
   19d4c:	mov	r0, r4
   19d50:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   19d54:	cmp	r0, #0
   19d58:	strne	r5, [r0]
   19d5c:	mvn	r2, #0
   19d60:	mov	r3, #1
   19d64:	str	r2, [sp, #4]
   19d68:	str	r3, [sp]
   19d6c:	mov	r2, #7
   19d70:	add	r1, sp, #16
   19d74:	mov	r0, r4
   19d78:	bl	20fcc <flatcc_builder_create_vector@@Base>
   19d7c:	subs	r5, r0, #0
   19d80:	beq	19d98 <test_basic_sort@@Base+0xec>
   19d84:	mov	r1, #5
   19d88:	mov	r0, r4
   19d8c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   19d90:	cmp	r0, #0
   19d94:	strne	r5, [r0]
   19d98:	mov	r2, #1
   19d9c:	ldr	r1, [pc, #904]	; 1a12c <test_basic_sort@@Base+0x480>
   19da0:	mov	r0, r4
   19da4:	bl	20d74 <flatcc_builder_check_required@@Base>
   19da8:	cmp	r0, #0
   19dac:	beq	1a120 <test_basic_sort@@Base+0x474>
   19db0:	mov	r0, r4
   19db4:	bl	20e0c <flatcc_builder_end_table@@Base>
   19db8:	mov	r1, r0
   19dbc:	mov	r0, r4
   19dc0:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   19dc4:	mov	r0, r4
   19dc8:	add	r1, sp, #12
   19dcc:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   19dd0:	cmp	r0, #0
   19dd4:	beq	19de8 <test_basic_sort@@Base+0x13c>
   19dd8:	ldr	r3, [pc, #848]	; 1a130 <test_basic_sort@@Base+0x484>
   19ddc:	ldr	r2, [r0, #4]
   19de0:	cmp	r2, r3
   19de4:	beq	19dec <test_basic_sort@@Base+0x140>
   19de8:	bl	12b30 <__assert_fail@plt+0xa4>
   19dec:	ldr	r3, [r0]
   19df0:	adds	r5, r0, r3
   19df4:	beq	19de8 <test_basic_sort@@Base+0x13c>
   19df8:	ldr	r3, [r0, r3]
   19dfc:	sub	r3, r5, r3
   19e00:	ldrh	r2, [r3]
   19e04:	cmp	r2, #15
   19e08:	bls	1a0ec <test_basic_sort@@Base+0x440>
   19e0c:	ldrh	r3, [r3, #14]
   19e10:	cmp	r3, #0
   19e14:	beq	1a0ec <test_basic_sort@@Base+0x440>
   19e18:	ldr	r6, [r5, r3]
   19e1c:	add	r5, r5, r3
   19e20:	add	r6, r6, #4
   19e24:	adds	r3, r5, r6
   19e28:	beq	1a0ec <test_basic_sort@@Base+0x440>
   19e2c:	ldr	r9, [r3, #-4]
   19e30:	cmp	r9, #0
   19e34:	beq	1a0ec <test_basic_sort@@Base+0x440>
   19e38:	lsr	r7, r9, #1
   19e3c:	sub	r0, r9, #1
   19e40:	lsl	r8, r7, #1
   19e44:	cmp	r0, r8
   19e48:	movcs	r2, r7
   19e4c:	movcs	r1, r8
   19e50:	bcs	19eb4 <test_basic_sort@@Base+0x208>
   19e54:	b	19ee8 <test_basic_sort@@Base+0x23c>
   19e58:	ldr	lr, [r3, #-4]
   19e5c:	cmp	lr, r1
   19e60:	bls	1a100 <test_basic_sort@@Base+0x454>
   19e64:	add	ip, r1, #1
   19e68:	cmp	lr, ip
   19e6c:	ldrb	r4, [r3, r1]
   19e70:	bls	1a100 <test_basic_sort@@Base+0x454>
   19e74:	ldrb	sl, [r3, ip]
   19e78:	cmp	sl, r4
   19e7c:	movls	ip, r1
   19e80:	cmp	lr, r2
   19e84:	bls	1a100 <test_basic_sort@@Base+0x454>
   19e88:	ldrb	lr, [r3, r2]
   19e8c:	add	r4, r3, r2
   19e90:	mov	r2, ip
   19e94:	ldrb	ip, [r3, r2]
   19e98:	cmp	lr, ip
   19e9c:	bcs	19ee8 <test_basic_sort@@Base+0x23c>
   19ea0:	lsl	r1, r2, #1
   19ea4:	cmp	r0, r1
   19ea8:	strb	lr, [r3, r2]
   19eac:	strb	ip, [r4]
   19eb0:	bcc	19ee8 <test_basic_sort@@Base+0x23c>
   19eb4:	cmp	r0, r1
   19eb8:	bhi	19e58 <test_basic_sort@@Base+0x1ac>
   19ebc:	ldr	ip, [r3, #-4]
   19ec0:	cmp	ip, r2
   19ec4:	bls	1a100 <test_basic_sort@@Base+0x454>
   19ec8:	cmp	ip, r1
   19ecc:	add	r4, r3, r2
   19ed0:	ldrb	lr, [r3, r2]
   19ed4:	bls	1a100 <test_basic_sort@@Base+0x454>
   19ed8:	mov	r2, r1
   19edc:	ldrb	ip, [r3, r2]
   19ee0:	cmp	lr, ip
   19ee4:	bcc	19ea0 <test_basic_sort@@Base+0x1f4>
   19ee8:	sub	r7, r7, #1
   19eec:	cmn	r7, #1
   19ef0:	sub	r8, r8, #2
   19ef4:	bne	19e44 <test_basic_sort@@Base+0x198>
   19ef8:	cmp	r0, #0
   19efc:	beq	19fcc <test_basic_sort@@Base+0x320>
   19f00:	add	r9, r3, r9
   19f04:	mov	r8, #0
   19f08:	ldrb	r1, [r9, #-1]
   19f0c:	ldrb	lr, [r3]
   19f10:	sub	r0, r0, #1
   19f14:	mov	ip, r8
   19f18:	strb	lr, [r9, #-1]!
   19f1c:	mov	r2, #0
   19f20:	strb	r1, [r3]
   19f24:	b	19f8c <test_basic_sort@@Base+0x2e0>
   19f28:	ldr	r7, [r3, #-4]
   19f2c:	cmp	r2, r7
   19f30:	bcs	1a100 <test_basic_sort@@Base+0x454>
   19f34:	add	lr, r2, #1
   19f38:	cmp	r7, lr
   19f3c:	add	r4, r3, r2
   19f40:	ldrb	r1, [r3, r2]
   19f44:	bls	1a100 <test_basic_sort@@Base+0x454>
   19f48:	ldrb	sl, [r3, lr]
   19f4c:	cmp	r1, sl
   19f50:	movcc	r1, sl
   19f54:	addcc	r4, r3, lr
   19f58:	movcc	r2, lr
   19f5c:	cmp	ip, r7
   19f60:	bcs	1a100 <test_basic_sort@@Base+0x454>
   19f64:	ldrb	lr, [r3, ip]
   19f68:	add	r7, r3, ip
   19f6c:	mov	ip, r2
   19f70:	cmp	lr, r1
   19f74:	bcs	19fc4 <test_basic_sort@@Base+0x318>
   19f78:	lsl	r2, r2, #1
   19f7c:	cmp	r0, r2
   19f80:	strb	lr, [r4]
   19f84:	strb	r1, [r7]
   19f88:	bcc	19fc4 <test_basic_sort@@Base+0x318>
   19f8c:	cmp	r2, r0
   19f90:	bcc	19f28 <test_basic_sort@@Base+0x27c>
   19f94:	ldr	r1, [r3, #-4]
   19f98:	cmp	ip, r1
   19f9c:	bcs	1a100 <test_basic_sort@@Base+0x454>
   19fa0:	cmp	r2, r1
   19fa4:	add	r7, r3, ip
   19fa8:	ldrb	lr, [r3, ip]
   19fac:	bcs	1a100 <test_basic_sort@@Base+0x454>
   19fb0:	ldrb	r1, [r3, r2]
   19fb4:	add	r4, r3, r2
   19fb8:	mov	ip, r2
   19fbc:	cmp	lr, r1
   19fc0:	bcc	19f78 <test_basic_sort@@Base+0x2cc>
   19fc4:	cmp	r0, #0
   19fc8:	bne	19f08 <test_basic_sort@@Base+0x25c>
   19fcc:	ldr	r2, [r3, #-4]
   19fd0:	cmp	r2, #7
   19fd4:	bne	1a0ec <test_basic_sort@@Base+0x440>
   19fd8:	ldrb	lr, [r5, r6]
   19fdc:	cmp	lr, #1
   19fe0:	bne	1a0c8 <test_basic_sort@@Base+0x41c>
   19fe4:	mov	r5, #0
   19fe8:	mov	r7, r5
   19fec:	mov	r4, lr
   19ff0:	mov	r6, #6
   19ff4:	mov	r8, #4
   19ff8:	mov	ip, r6
   19ffc:	mov	r0, r7
   1a000:	sub	r1, ip, r0
   1a004:	add	r1, r0, r1, lsr #1
   1a008:	cmp	r1, #6
   1a00c:	bhi	1a100 <test_basic_sort@@Base+0x454>
   1a010:	ldrb	r2, [r3, r1]
   1a014:	cmp	r2, lr
   1a018:	bcs	1a040 <test_basic_sort@@Base+0x394>
   1a01c:	b	1a064 <test_basic_sort@@Base+0x3b8>
   1a020:	sub	r2, r1, r0
   1a024:	add	r2, r0, r2, lsr #1
   1a028:	cmp	r2, #6
   1a02c:	bhi	1a100 <test_basic_sort@@Base+0x454>
   1a030:	ldrb	ip, [r3, r2]
   1a034:	cmp	ip, lr
   1a038:	bcc	1a06c <test_basic_sort@@Base+0x3c0>
   1a03c:	mov	r1, r2
   1a040:	cmp	r1, r0
   1a044:	bhi	1a020 <test_basic_sort@@Base+0x374>
   1a048:	cmp	r1, r0
   1a04c:	beq	1a080 <test_basic_sort@@Base+0x3d4>
   1a050:	ldr	r0, [pc, #220]	; 1a134 <test_basic_sort@@Base+0x488>
   1a054:	bl	129f0 <puts@plt>
   1a058:	mvn	r0, #0
   1a05c:	add	sp, sp, #32
   1a060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a064:	mov	r2, r1
   1a068:	mov	r1, ip
   1a06c:	add	r0, r2, #1
   1a070:	cmp	r0, r1
   1a074:	bcs	1a048 <test_basic_sort@@Base+0x39c>
   1a078:	mov	ip, r1
   1a07c:	b	1a000 <test_basic_sort@@Base+0x354>
   1a080:	ldrb	r2, [r3, r1]
   1a084:	cmp	r2, lr
   1a088:	bne	1a050 <test_basic_sort@@Base+0x3a4>
   1a08c:	cmp	r4, #4
   1a090:	beq	1a0dc <test_basic_sort@@Base+0x430>
   1a094:	cmp	r5, r1
   1a098:	bne	1a050 <test_basic_sort@@Base+0x3a4>
   1a09c:	cmp	r4, #6
   1a0a0:	mov	r5, r4
   1a0a4:	bhi	1a114 <test_basic_sort@@Base+0x468>
   1a0a8:	add	r2, sp, #32
   1a0ac:	add	r1, r2, r4
   1a0b0:	ldrb	r2, [r3, r5]
   1a0b4:	ldrb	lr, [r1, #-8]
   1a0b8:	add	r4, r4, #1
   1a0bc:	cmp	r2, lr
   1a0c0:	uxtb	r4, r4
   1a0c4:	beq	19ff8 <test_basic_sort@@Base+0x34c>
   1a0c8:	ldr	r0, [pc, #104]	; 1a138 <test_basic_sort@@Base+0x48c>
   1a0cc:	bl	129f0 <puts@plt>
   1a0d0:	mvn	r0, #0
   1a0d4:	add	sp, sp, #32
   1a0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0dc:	cmp	r1, #2
   1a0e0:	bne	1a050 <test_basic_sort@@Base+0x3a4>
   1a0e4:	mov	r5, r8
   1a0e8:	b	1a0a8 <test_basic_sort@@Base+0x3fc>
   1a0ec:	ldr	r3, [pc, #72]	; 1a13c <test_basic_sort@@Base+0x490>
   1a0f0:	mov	r2, #1552	; 0x610
   1a0f4:	ldr	r1, [pc, #68]	; 1a140 <test_basic_sort@@Base+0x494>
   1a0f8:	ldr	r0, [pc, #68]	; 1a144 <test_basic_sort@@Base+0x498>
   1a0fc:	bl	12a8c <__assert_fail@plt>
   1a100:	ldr	r3, [pc, #64]	; 1a148 <test_basic_sort@@Base+0x49c>
   1a104:	ldr	r2, [pc, #64]	; 1a14c <test_basic_sort@@Base+0x4a0>
   1a108:	ldr	r1, [pc, #64]	; 1a150 <test_basic_sort@@Base+0x4a4>
   1a10c:	ldr	r0, [pc, #64]	; 1a154 <test_basic_sort@@Base+0x4a8>
   1a110:	bl	12a8c <__assert_fail@plt>
   1a114:	mov	r0, #0
   1a118:	add	sp, sp, #32
   1a11c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a120:	bl	13024 <__assert_fail@plt+0x598>
   1a124:	ldrdeq	r5, [r2], -r0
   1a128:	strdeq	r5, [r2], -r8
   1a12c:	strdeq	r5, [r2], -r8
   1a130:	movtpl	r4, #61261	; 0xef4d
   1a134:	andeq	r7, r2, ip, asr #4
   1a138:	andeq	r7, r2, r4, lsr r2
   1a13c:	andeq	r5, r2, ip, asr #9
   1a140:	andeq	r6, r2, r4, lsl r3
   1a144:	andeq	r7, r2, r4, lsl #4
   1a148:	andeq	r5, r2, r8, rrx
   1a14c:	andeq	r0, r0, fp, lsl #3
   1a150:	andeq	r5, r2, r0, asr r7
   1a154:			; <UNDEFINED> instruction: 0x000257b8

0001a158 <test_clone_slice@@Base>:
   1a158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a15c:	sub	sp, sp, #36	; 0x24
   1a160:	mov	r5, #0
   1a164:	mov	r3, #1
   1a168:	mov	r4, r0
   1a16c:	strb	r3, [sp, #25]
   1a170:	strb	r3, [sp, #28]
   1a174:	strb	r5, [sp, #24]
   1a178:	strb	r5, [sp, #26]
   1a17c:	strb	r5, [sp, #27]
   1a180:	strb	r5, [sp, #29]
   1a184:	strb	r5, [sp, #30]
   1a188:	bl	1de88 <flatcc_builder_reset@@Base>
   1a18c:	mov	r3, r5
   1a190:	mov	r2, r5
   1a194:	mov	r0, r4
   1a198:	ldr	r1, [pc, #2508]	; 1ab6c <test_clone_slice@@Base+0xa14>
   1a19c:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1a1a0:	cmp	r0, r5
   1a1a4:	bne	1a1b4 <test_clone_slice@@Base+0x5c>
   1a1a8:	mov	r1, #36	; 0x24
   1a1ac:	mov	r0, r4
   1a1b0:	bl	203cc <flatcc_builder_start_table@@Base>
   1a1b4:	ldr	r1, [pc, #2484]	; 1ab70 <test_clone_slice@@Base+0xa18>
   1a1b8:	mov	r0, r4
   1a1bc:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1a1c0:	subs	r5, r0, #0
   1a1c4:	beq	1a1dc <test_clone_slice@@Base+0x84>
   1a1c8:	mov	r1, #3
   1a1cc:	mov	r0, r4
   1a1d0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a1d4:	cmp	r0, #0
   1a1d8:	strne	r5, [r0]
   1a1dc:	mvn	r2, #0
   1a1e0:	mov	r3, #1
   1a1e4:	str	r2, [sp, #4]
   1a1e8:	add	r1, sp, #24
   1a1ec:	str	r3, [sp]
   1a1f0:	mov	r2, #7
   1a1f4:	mov	r0, r4
   1a1f8:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1a1fc:	subs	r5, r0, #0
   1a200:	beq	1a218 <test_clone_slice@@Base+0xc0>
   1a204:	mov	r1, #24
   1a208:	mov	r0, r4
   1a20c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a210:	cmp	r0, #0
   1a214:	strne	r5, [r0]
   1a218:	mvn	r3, #-1073741824	; 0xc0000000
   1a21c:	mov	r2, #2
   1a220:	mov	r1, #4
   1a224:	mov	r0, r4
   1a228:	bl	1fc2c <flatcc_builder_start_vector@@Base>
   1a22c:	mov	r1, #2
   1a230:	mov	r0, r4
   1a234:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   1a238:	mov	r2, #22
   1a23c:	mov	r3, #44	; 0x2c
   1a240:	strh	r2, [r0]
   1a244:	strh	r3, [r0, #4]
   1a248:	mov	r0, r4
   1a24c:	bl	2110c <flatcc_builder_end_vector@@Base>
   1a250:	subs	r5, r0, #0
   1a254:	beq	1a26c <test_clone_slice@@Base+0x114>
   1a258:	mov	r1, #9
   1a25c:	mov	r0, r4
   1a260:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a264:	cmp	r0, #0
   1a268:	strne	r5, [r0]
   1a26c:	mov	r3, #16
   1a270:	mov	r2, #32
   1a274:	mov	r1, #0
   1a278:	mov	r0, r4
   1a27c:	bl	22538 <flatcc_builder_table_add@@Base>
   1a280:	ldr	r9, [pc, #2284]	; 1ab74 <test_clone_slice@@Base+0xa1c>
   1a284:	ldr	r3, [pc, #2284]	; 1ab78 <test_clone_slice@@Base+0xa20>
   1a288:	mov	r2, #1
   1a28c:	add	r1, r9, #12
   1a290:	str	r3, [r0]
   1a294:	mov	r0, r4
   1a298:	bl	20d74 <flatcc_builder_check_required@@Base>
   1a29c:	cmp	r0, #0
   1a2a0:	beq	1ab28 <test_clone_slice@@Base+0x9d0>
   1a2a4:	mov	r0, r4
   1a2a8:	bl	20e0c <flatcc_builder_end_table@@Base>
   1a2ac:	ldr	sl, [pc, #2248]	; 1ab7c <test_clone_slice@@Base+0xa24>
   1a2b0:	mov	r1, r0
   1a2b4:	mov	r0, r4
   1a2b8:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1a2bc:	add	r1, sp, #20
   1a2c0:	mov	r0, r4
   1a2c4:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a2c8:	ldr	r3, [sl]
   1a2cc:	ldr	r2, [sp, #20]
   1a2d0:	mov	r8, r0
   1a2d4:	mov	r1, r0
   1a2d8:	ldr	r0, [pc, #2208]	; 1ab80 <test_clone_slice@@Base+0xa28>
   1a2dc:	bl	13458 <_start@@Base+0x148>
   1a2e0:	cmp	r8, #0
   1a2e4:	beq	1a2f8 <test_clone_slice@@Base+0x1a0>
   1a2e8:	ldr	r3, [pc, #2196]	; 1ab84 <test_clone_slice@@Base+0xa2c>
   1a2ec:	ldr	r2, [r8, #4]
   1a2f0:	cmp	r2, r3
   1a2f4:	beq	1aa18 <test_clone_slice@@Base+0x8c0>
   1a2f8:	mov	r0, r4
   1a2fc:	bl	1de88 <flatcc_builder_reset@@Base>
   1a300:	mov	r3, #0
   1a304:	mov	r2, r3
   1a308:	ldr	r1, [pc, #2140]	; 1ab6c <test_clone_slice@@Base+0xa14>
   1a30c:	mov	r0, r4
   1a310:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1a314:	subs	r6, r0, #0
   1a318:	bne	1a738 <test_clone_slice@@Base+0x5e0>
   1a31c:	mov	r1, #36	; 0x24
   1a320:	mov	r0, r4
   1a324:	bl	203cc <flatcc_builder_start_table@@Base>
   1a328:	cmp	r6, #0
   1a32c:	beq	1a738 <test_clone_slice@@Base+0x5e0>
   1a330:	ldr	r3, [r6]
   1a334:	sub	r3, r6, r3
   1a338:	ldrh	r1, [r3]
   1a33c:	cmp	r1, #11
   1a340:	bls	1a380 <test_clone_slice@@Base+0x228>
   1a344:	ldrh	r5, [r3, #10]
   1a348:	cmp	r5, #0
   1a34c:	beq	1a380 <test_clone_slice@@Base+0x228>
   1a350:	ldr	r2, [r6, r5]
   1a354:	add	r5, r6, r5
   1a358:	add	r2, r2, #4
   1a35c:	adds	r5, r5, r2
   1a360:	beq	1ab40 <test_clone_slice@@Base+0x9e8>
   1a364:	cmp	r1, #53	; 0x35
   1a368:	bhi	1a394 <test_clone_slice@@Base+0x23c>
   1a36c:	ldr	r3, [pc, #2068]	; 1ab88 <test_clone_slice@@Base+0xa30>
   1a370:	ldr	r2, [pc, #2068]	; 1ab8c <test_clone_slice@@Base+0xa34>
   1a374:	ldr	r1, [pc, #2068]	; 1ab90 <test_clone_slice@@Base+0xa38>
   1a378:	ldr	r0, [pc, #2068]	; 1ab94 <test_clone_slice@@Base+0xa3c>
   1a37c:	bl	12a8c <__assert_fail@plt>
   1a380:	ldr	r3, [pc, #2064]	; 1ab98 <test_clone_slice@@Base+0xa40>
   1a384:	ldr	r2, [pc, #2064]	; 1ab9c <test_clone_slice@@Base+0xa44>
   1a388:	ldr	r1, [pc, #2064]	; 1aba0 <test_clone_slice@@Base+0xa48>
   1a38c:	ldr	r0, [pc, #2064]	; 1aba4 <test_clone_slice@@Base+0xa4c>
   1a390:	bl	12a8c <__assert_fail@plt>
   1a394:	ldrh	r7, [r3, #52]	; 0x34
   1a398:	cmp	r7, #0
   1a39c:	beq	1a36c <test_clone_slice@@Base+0x214>
   1a3a0:	ldr	r2, [r6, r7]
   1a3a4:	add	r7, r6, r7
   1a3a8:	add	r2, r2, #4
   1a3ac:	adds	r7, r7, r2
   1a3b0:	beq	1a36c <test_clone_slice@@Base+0x214>
   1a3b4:	ldrh	fp, [r3, #22]
   1a3b8:	cmp	fp, #0
   1a3bc:	beq	1ab2c <test_clone_slice@@Base+0x9d4>
   1a3c0:	ldr	r3, [r6, fp]
   1a3c4:	add	fp, r6, fp
   1a3c8:	add	r3, r3, #4
   1a3cc:	adds	fp, fp, r3
   1a3d0:	beq	1ab2c <test_clone_slice@@Base+0x9d4>
   1a3d4:	ldr	r2, [r5, #-4]
   1a3d8:	mov	r1, r5
   1a3dc:	mov	r0, r4
   1a3e0:	bl	22098 <flatcc_builder_create_string@@Base>
   1a3e4:	subs	r3, r0, #0
   1a3e8:	str	r3, [sp, #12]
   1a3ec:	beq	1a408 <test_clone_slice@@Base+0x2b0>
   1a3f0:	mov	r1, #3
   1a3f4:	mov	r0, r4
   1a3f8:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a3fc:	cmp	r0, #0
   1a400:	ldrne	r3, [sp, #12]
   1a404:	strne	r3, [r0]
   1a408:	mov	r0, r4
   1a40c:	bl	1fd84 <flatcc_builder_start_offset_vector@@Base>
   1a410:	mov	r1, r5
   1a414:	ldr	r2, [r5, #-4]
   1a418:	mov	r0, r4
   1a41c:	bl	22098 <flatcc_builder_create_string@@Base>
   1a420:	subs	r1, r0, #0
   1a424:	beq	1a430 <test_clone_slice@@Base+0x2d8>
   1a428:	mov	r0, r4
   1a42c:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   1a430:	ldr	r2, [r5, #-4]
   1a434:	mov	r0, r4
   1a438:	cmp	r2, #4
   1a43c:	movcc	r1, r2
   1a440:	movcs	r1, #4
   1a444:	sub	r2, r2, r1
   1a448:	cmp	r2, #20
   1a44c:	movcs	r2, #20
   1a450:	add	r1, r5, r1
   1a454:	bl	22098 <flatcc_builder_create_string@@Base>
   1a458:	subs	r1, r0, #0
   1a45c:	beq	1a468 <test_clone_slice@@Base+0x310>
   1a460:	mov	r0, r4
   1a464:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   1a468:	ldr	r2, [r5, #-4]
   1a46c:	mov	r1, r5
   1a470:	cmp	r2, #3
   1a474:	movcs	r2, #3
   1a478:	mov	r0, r4
   1a47c:	bl	22098 <flatcc_builder_create_string@@Base>
   1a480:	subs	r1, r0, #0
   1a484:	beq	1a490 <test_clone_slice@@Base+0x338>
   1a488:	mov	r0, r4
   1a48c:	bl	1f4b4 <flatcc_builder_offset_vector_push@@Base>
   1a490:	mov	r0, r4
   1a494:	bl	2132c <flatcc_builder_end_offset_vector@@Base>
   1a498:	subs	r3, r0, #0
   1a49c:	str	r3, [sp, #12]
   1a4a0:	beq	1a4bc <test_clone_slice@@Base+0x364>
   1a4a4:	mov	r1, #10
   1a4a8:	mov	r0, r4
   1a4ac:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a4b0:	cmp	r0, #0
   1a4b4:	ldrne	r3, [sp, #12]
   1a4b8:	strne	r3, [r0]
   1a4bc:	mov	r1, #36	; 0x24
   1a4c0:	mov	r0, r4
   1a4c4:	bl	203cc <flatcc_builder_start_table@@Base>
   1a4c8:	ldr	r2, [r5, #-4]
   1a4cc:	mov	r0, r4
   1a4d0:	cmp	r2, #2
   1a4d4:	movcc	r1, r2
   1a4d8:	movcs	r1, #2
   1a4dc:	sub	r2, r2, r1
   1a4e0:	cmp	r2, #20
   1a4e4:	movcs	r2, #20
   1a4e8:	add	r1, r5, r1
   1a4ec:	bl	22098 <flatcc_builder_create_string@@Base>
   1a4f0:	subs	r5, r0, #0
   1a4f4:	beq	1a50c <test_clone_slice@@Base+0x3b4>
   1a4f8:	mov	r1, #3
   1a4fc:	mov	r0, r4
   1a500:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a504:	cmp	r0, #0
   1a508:	strne	r5, [r0]
   1a50c:	mvn	r1, #0
   1a510:	mov	r3, #1
   1a514:	ldr	r2, [r7, #-4]
   1a518:	mov	r0, r4
   1a51c:	str	r1, [sp, #4]
   1a520:	str	r3, [sp]
   1a524:	mov	r1, r7
   1a528:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1a52c:	subs	r5, r0, #0
   1a530:	beq	1a548 <test_clone_slice@@Base+0x3f0>
   1a534:	mov	r1, #24
   1a538:	mov	r0, r4
   1a53c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a540:	cmp	r0, #0
   1a544:	strne	r5, [r0]
   1a548:	ldr	r2, [fp, #-4]
   1a54c:	mov	r3, #2
   1a550:	cmp	r2, #1
   1a554:	movcc	r1, r2
   1a558:	movcs	r1, #1
   1a55c:	sub	r2, r2, r1
   1a560:	cmp	r2, #2
   1a564:	mvn	r0, #-1073741824	; 0xc0000000
   1a568:	movcs	r2, r3
   1a56c:	add	r1, fp, r1, lsl r3
   1a570:	str	r0, [sp, #4]
   1a574:	str	r3, [sp]
   1a578:	mov	r0, r4
   1a57c:	mov	r3, #4
   1a580:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1a584:	subs	r5, r0, #0
   1a588:	beq	1a5a0 <test_clone_slice@@Base+0x448>
   1a58c:	mov	r1, #9
   1a590:	mov	r0, r4
   1a594:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a598:	cmp	r0, #0
   1a59c:	strne	r5, [r0]
   1a5a0:	mov	r2, #1
   1a5a4:	add	r1, r9, #12
   1a5a8:	mov	r0, r4
   1a5ac:	bl	20d74 <flatcc_builder_check_required@@Base>
   1a5b0:	cmp	r0, #0
   1a5b4:	beq	1ab28 <test_clone_slice@@Base+0x9d0>
   1a5b8:	mov	r0, r4
   1a5bc:	bl	20e0c <flatcc_builder_end_table@@Base>
   1a5c0:	subs	r5, r0, #0
   1a5c4:	beq	1a608 <test_clone_slice@@Base+0x4b0>
   1a5c8:	mov	r3, #1
   1a5cc:	mov	r2, r3
   1a5d0:	mov	r1, #7
   1a5d4:	mov	r0, r4
   1a5d8:	bl	22538 <flatcc_builder_table_add@@Base>
   1a5dc:	subs	r3, r0, #0
   1a5e0:	str	r3, [sp, #12]
   1a5e4:	beq	1a608 <test_clone_slice@@Base+0x4b0>
   1a5e8:	mov	r1, #8
   1a5ec:	mov	r0, r4
   1a5f0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a5f4:	cmp	r0, #0
   1a5f8:	movne	r2, #1
   1a5fc:	ldrne	r3, [sp, #12]
   1a600:	strbne	r2, [r3]
   1a604:	strne	r5, [r0]
   1a608:	ldr	r2, [r7, #-4]
   1a60c:	mvn	r0, #0
   1a610:	cmp	r2, #3
   1a614:	movcc	r1, r2
   1a618:	movcs	r1, #3
   1a61c:	mov	r3, #1
   1a620:	sub	r2, r2, r1
   1a624:	str	r0, [sp, #4]
   1a628:	add	r1, r7, r1
   1a62c:	str	r3, [sp]
   1a630:	mov	r0, r4
   1a634:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1a638:	subs	r5, r0, #0
   1a63c:	beq	1a654 <test_clone_slice@@Base+0x4fc>
   1a640:	mov	r1, #24
   1a644:	mov	r0, r4
   1a648:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a64c:	cmp	r0, #0
   1a650:	strne	r5, [r0]
   1a654:	ldr	r3, [r6]
   1a658:	sub	r3, r6, r3
   1a65c:	ldrh	r2, [r3]
   1a660:	cmp	r2, #5
   1a664:	movls	r2, #0
   1a668:	bls	1a678 <test_clone_slice@@Base+0x520>
   1a66c:	ldrh	r2, [r3, #4]
   1a670:	cmp	r2, #0
   1a674:	addne	r2, r6, r2
   1a678:	mov	r3, #16
   1a67c:	str	r3, [sp]
   1a680:	mov	r1, #0
   1a684:	mov	r3, #32
   1a688:	mov	r0, r4
   1a68c:	bl	22718 <flatcc_builder_table_add_copy@@Base>
   1a690:	mvn	r0, #-1073741824	; 0xc0000000
   1a694:	mov	r3, #2
   1a698:	ldr	r2, [fp, #-4]
   1a69c:	mov	r1, fp
   1a6a0:	str	r0, [sp, #4]
   1a6a4:	str	r3, [sp]
   1a6a8:	mov	r0, r4
   1a6ac:	mov	r3, #4
   1a6b0:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1a6b4:	subs	r5, r0, #0
   1a6b8:	beq	1a6d0 <test_clone_slice@@Base+0x578>
   1a6bc:	mov	r1, #9
   1a6c0:	mov	r0, r4
   1a6c4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1a6c8:	cmp	r0, #0
   1a6cc:	strne	r5, [r0]
   1a6d0:	add	r1, r9, #12
   1a6d4:	mov	r2, #1
   1a6d8:	mov	r0, r4
   1a6dc:	bl	20d74 <flatcc_builder_check_required@@Base>
   1a6e0:	cmp	r0, #0
   1a6e4:	beq	1ab28 <test_clone_slice@@Base+0x9d0>
   1a6e8:	mov	r0, r4
   1a6ec:	bl	20e0c <flatcc_builder_end_table@@Base>
   1a6f0:	mov	r1, r0
   1a6f4:	mov	r0, r4
   1a6f8:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1a6fc:	add	r1, sp, #20
   1a700:	mov	r0, r4
   1a704:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1a708:	ldr	r3, [sl]
   1a70c:	ldr	r2, [sp, #20]
   1a710:	mov	r4, r0
   1a714:	mov	r1, r0
   1a718:	ldr	r0, [pc, #1160]	; 1aba8 <test_clone_slice@@Base+0xa50>
   1a71c:	bl	13458 <_start@@Base+0x148>
   1a720:	cmp	r4, #0
   1a724:	beq	1a738 <test_clone_slice@@Base+0x5e0>
   1a728:	ldr	r3, [pc, #1108]	; 1ab84 <test_clone_slice@@Base+0xa2c>
   1a72c:	ldr	r2, [r4, #4]
   1a730:	cmp	r2, r3
   1a734:	beq	1a73c <test_clone_slice@@Base+0x5e4>
   1a738:	bl	12d04 <__assert_fail@plt+0x278>
   1a73c:	ldr	r3, [r4]
   1a740:	adds	r5, r4, r3
   1a744:	beq	1a738 <test_clone_slice@@Base+0x5e0>
   1a748:	ldr	r6, [r4, r3]
   1a74c:	sub	r6, r5, r6
   1a750:	ldrh	r7, [r6]
   1a754:	cmp	r7, #11
   1a758:	bls	1a380 <test_clone_slice@@Base+0x228>
   1a75c:	ldrh	r0, [r6, #10]
   1a760:	cmp	r0, #0
   1a764:	beq	1a380 <test_clone_slice@@Base+0x228>
   1a768:	ldr	r3, [r5, r0]
   1a76c:	add	r0, r5, r0
   1a770:	add	r3, r3, #4
   1a774:	add	r0, r0, r3
   1a778:	ldr	r1, [pc, #1008]	; 1ab70 <test_clone_slice@@Base+0xa18>
   1a77c:	bl	12990 <strcmp@plt>
   1a780:	cmp	r0, #0
   1a784:	bne	1aa58 <test_clone_slice@@Base+0x900>
   1a788:	cmp	r7, #25
   1a78c:	bhi	1a794 <test_clone_slice@@Base+0x63c>
   1a790:	bl	12c40 <__assert_fail@plt+0x1b4>
   1a794:	ldrh	r3, [r6, #24]
   1a798:	cmp	r3, #0
   1a79c:	beq	1a790 <test_clone_slice@@Base+0x638>
   1a7a0:	ldr	r2, [r5, r3]
   1a7a4:	add	r3, r5, r3
   1a7a8:	add	r2, r2, #4
   1a7ac:	adds	r4, r3, r2
   1a7b0:	beq	1a790 <test_clone_slice@@Base+0x638>
   1a7b4:	ldr	r9, [r4, #-4]
   1a7b8:	cmp	r9, #0
   1a7bc:	beq	1a790 <test_clone_slice@@Base+0x638>
   1a7c0:	ldr	r0, [r3, r2]
   1a7c4:	ldr	r1, [pc, #932]	; 1ab70 <test_clone_slice@@Base+0xa18>
   1a7c8:	add	r0, r0, #4
   1a7cc:	add	r0, r4, r0
   1a7d0:	bl	12990 <strcmp@plt>
   1a7d4:	cmp	r0, #0
   1a7d8:	bne	1ab08 <test_clone_slice@@Base+0x9b0>
   1a7dc:	cmp	r9, #1
   1a7e0:	bls	1a790 <test_clone_slice@@Base+0x638>
   1a7e4:	ldr	r0, [r4, #4]
   1a7e8:	add	r0, r0, #8
   1a7ec:	adds	r0, r4, r0
   1a7f0:	beq	1aa68 <test_clone_slice@@Base+0x910>
   1a7f4:	ldr	r3, [r0, #-4]
   1a7f8:	cmp	r3, #6
   1a7fc:	bne	1aa68 <test_clone_slice@@Base+0x910>
   1a800:	ldr	r1, [pc, #932]	; 1abac <test_clone_slice@@Base+0xa54>
   1a804:	bl	12990 <strcmp@plt>
   1a808:	cmp	r0, #0
   1a80c:	bne	1ab18 <test_clone_slice@@Base+0x9c0>
   1a810:	cmp	r9, #2
   1a814:	beq	1a790 <test_clone_slice@@Base+0x638>
   1a818:	ldr	r0, [r4, #8]
   1a81c:	add	r0, r0, #12
   1a820:	adds	r0, r4, r0
   1a824:	beq	1aa78 <test_clone_slice@@Base+0x920>
   1a828:	ldr	r3, [r0, #-4]
   1a82c:	cmp	r3, #3
   1a830:	bne	1aa78 <test_clone_slice@@Base+0x920>
   1a834:	ldr	r1, [pc, #884]	; 1abb0 <test_clone_slice@@Base+0xa58>
   1a838:	bl	12990 <strcmp@plt>
   1a83c:	cmp	r0, #0
   1a840:	bne	1aa88 <test_clone_slice@@Base+0x930>
   1a844:	ldrh	r3, [r6, #20]
   1a848:	cmp	r3, #0
   1a84c:	beq	1ab54 <test_clone_slice@@Base+0x9fc>
   1a850:	ldr	r2, [r5, r3]
   1a854:	add	r3, r5, r3
   1a858:	adds	r4, r3, r2
   1a85c:	beq	1ab54 <test_clone_slice@@Base+0x9fc>
   1a860:	ldr	r9, [r3, r2]
   1a864:	sub	r9, r4, r9
   1a868:	ldrh	sl, [r9]
   1a86c:	cmp	sl, #11
   1a870:	bls	1a380 <test_clone_slice@@Base+0x228>
   1a874:	ldrh	r0, [r9, #10]
   1a878:	cmp	r0, #0
   1a87c:	beq	1a380 <test_clone_slice@@Base+0x228>
   1a880:	ldr	r3, [r4, r0]
   1a884:	add	r0, r4, r0
   1a888:	add	r3, r3, #4
   1a88c:	add	r0, r0, r3
   1a890:	ldr	r1, [pc, #796]	; 1abb4 <test_clone_slice@@Base+0xa5c>
   1a894:	bl	12990 <strcmp@plt>
   1a898:	cmp	r0, #0
   1a89c:	bne	1aa98 <test_clone_slice@@Base+0x940>
   1a8a0:	cmp	sl, #53	; 0x35
   1a8a4:	bhi	1a8c8 <test_clone_slice@@Base+0x770>
   1a8a8:	ldr	r0, [pc, #776]	; 1abb8 <test_clone_slice@@Base+0xa60>
   1a8ac:	bl	129f0 <puts@plt>
   1a8b0:	mvn	r7, #0
   1a8b4:	mov	r0, r8
   1a8b8:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   1a8bc:	mov	r0, r7
   1a8c0:	add	sp, sp, #36	; 0x24
   1a8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8c8:	ldrh	r0, [r9, #52]	; 0x34
   1a8cc:	cmp	r0, #0
   1a8d0:	beq	1a8a8 <test_clone_slice@@Base+0x750>
   1a8d4:	ldr	r3, [r4, r0]
   1a8d8:	add	r0, r4, r0
   1a8dc:	add	r3, r3, #4
   1a8e0:	adds	r0, r0, r3
   1a8e4:	beq	1a8a8 <test_clone_slice@@Base+0x750>
   1a8e8:	ldr	r2, [r0, #-4]
   1a8ec:	cmp	r2, #7
   1a8f0:	bne	1a8a8 <test_clone_slice@@Base+0x750>
   1a8f4:	add	r1, sp, #24
   1a8f8:	bl	129c0 <memcmp@plt>
   1a8fc:	cmp	r0, #0
   1a900:	bne	1aaa8 <test_clone_slice@@Base+0x950>
   1a904:	cmp	r7, #53	; 0x35
   1a908:	bhi	1a91c <test_clone_slice@@Base+0x7c4>
   1a90c:	ldr	r0, [pc, #680]	; 1abbc <test_clone_slice@@Base+0xa64>
   1a910:	bl	129f0 <puts@plt>
   1a914:	mvn	r7, #0
   1a918:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1a91c:	ldrh	r0, [r6, #52]	; 0x34
   1a920:	cmp	r0, #0
   1a924:	beq	1a90c <test_clone_slice@@Base+0x7b4>
   1a928:	ldr	r3, [r5, r0]
   1a92c:	add	r0, r5, r0
   1a930:	add	r3, r3, #4
   1a934:	adds	r0, r0, r3
   1a938:	beq	1a90c <test_clone_slice@@Base+0x7b4>
   1a93c:	ldr	r2, [r0, #-4]
   1a940:	cmp	r2, #4
   1a944:	bne	1a90c <test_clone_slice@@Base+0x7b4>
   1a948:	add	r1, sp, #27
   1a94c:	bl	129c0 <memcmp@plt>
   1a950:	subs	r7, r0, #0
   1a954:	bne	1aab8 <test_clone_slice@@Base+0x960>
   1a958:	ldrh	r3, [r6, #4]
   1a95c:	cmp	r3, #0
   1a960:	beq	1aa10 <test_clone_slice@@Base+0x8b8>
   1a964:	add	r3, r5, r3
   1a968:	vldr	s15, [pc, #504]	; 1ab68 <test_clone_slice@@Base+0xa10>
   1a96c:	vldr	s14, [r3]
   1a970:	vcmp.f32	s14, s15
   1a974:	vmrs	APSR_nzcv, fpscr
   1a978:	bne	1aad8 <test_clone_slice@@Base+0x980>
   1a97c:	ldrh	r3, [r6, #22]
   1a980:	cmp	r3, #0
   1a984:	beq	1aac8 <test_clone_slice@@Base+0x970>
   1a988:	ldr	r2, [r5, r3]
   1a98c:	add	r5, r5, r3
   1a990:	add	r3, r2, #4
   1a994:	adds	r2, r5, r3
   1a998:	beq	1aac8 <test_clone_slice@@Base+0x970>
   1a99c:	ldr	r1, [r2, #-4]
   1a9a0:	cmp	r1, #2
   1a9a4:	bne	1aac8 <test_clone_slice@@Base+0x970>
   1a9a8:	ldrsh	r3, [r5, r3]
   1a9ac:	cmp	r3, #22
   1a9b0:	bne	1aae8 <test_clone_slice@@Base+0x990>
   1a9b4:	cmn	r2, #4
   1a9b8:	beq	1aa48 <test_clone_slice@@Base+0x8f0>
   1a9bc:	ldrsh	r3, [r2, #4]
   1a9c0:	cmp	r3, #44	; 0x2c
   1a9c4:	bne	1aa48 <test_clone_slice@@Base+0x8f0>
   1a9c8:	ldrh	r2, [r9, #22]
   1a9cc:	cmp	r2, #0
   1a9d0:	beq	1aaf8 <test_clone_slice@@Base+0x9a0>
   1a9d4:	ldr	r3, [r4, r2]
   1a9d8:	add	r4, r4, r2
   1a9dc:	add	r3, r3, #4
   1a9e0:	adds	r2, r4, r3
   1a9e4:	beq	1aaf8 <test_clone_slice@@Base+0x9a0>
   1a9e8:	ldr	r2, [r2, #-4]
   1a9ec:	cmp	r2, #1
   1a9f0:	bne	1aaf8 <test_clone_slice@@Base+0x9a0>
   1a9f4:	ldrsh	r3, [r4, r3]
   1a9f8:	cmp	r3, #44	; 0x2c
   1a9fc:	beq	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa00:	ldr	r0, [pc, #440]	; 1abc0 <test_clone_slice@@Base+0xa68>
   1aa04:	bl	129f0 <puts@plt>
   1aa08:	mvn	r7, #0
   1aa0c:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa10:	ldr	r3, [r3]
   1aa14:	udf	#0
   1aa18:	mov	r0, r4
   1aa1c:	ldr	r6, [r8]
   1aa20:	bl	1de88 <flatcc_builder_reset@@Base>
   1aa24:	mov	r3, #0
   1aa28:	mov	r2, r3
   1aa2c:	ldr	r1, [pc, #312]	; 1ab6c <test_clone_slice@@Base+0xa14>
   1aa30:	mov	r0, r4
   1aa34:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1aa38:	add	r6, r8, r6
   1aa3c:	cmp	r0, #0
   1aa40:	bne	1a328 <test_clone_slice@@Base+0x1d0>
   1aa44:	b	1a31c <test_clone_slice@@Base+0x1c4>
   1aa48:	ldr	r0, [pc, #372]	; 1abc4 <test_clone_slice@@Base+0xa6c>
   1aa4c:	bl	129f0 <puts@plt>
   1aa50:	mvn	r7, #0
   1aa54:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa58:	ldr	r0, [pc, #360]	; 1abc8 <test_clone_slice@@Base+0xa70>
   1aa5c:	bl	129f0 <puts@plt>
   1aa60:	mvn	r7, #0
   1aa64:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa68:	ldr	r0, [pc, #348]	; 1abcc <test_clone_slice@@Base+0xa74>
   1aa6c:	bl	129f0 <puts@plt>
   1aa70:	mvn	r7, #0
   1aa74:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa78:	ldr	r0, [pc, #336]	; 1abd0 <test_clone_slice@@Base+0xa78>
   1aa7c:	bl	129f0 <puts@plt>
   1aa80:	mvn	r7, #0
   1aa84:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa88:	ldr	r0, [pc, #324]	; 1abd4 <test_clone_slice@@Base+0xa7c>
   1aa8c:	bl	129f0 <puts@plt>
   1aa90:	mvn	r7, #0
   1aa94:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aa98:	ldr	r0, [pc, #312]	; 1abd8 <test_clone_slice@@Base+0xa80>
   1aa9c:	bl	1299c <printf@plt>
   1aaa0:	mvn	r7, #0
   1aaa4:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aaa8:	ldr	r0, [pc, #300]	; 1abdc <test_clone_slice@@Base+0xa84>
   1aaac:	bl	129f0 <puts@plt>
   1aab0:	mvn	r7, #0
   1aab4:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aab8:	ldr	r0, [pc, #288]	; 1abe0 <test_clone_slice@@Base+0xa88>
   1aabc:	bl	129f0 <puts@plt>
   1aac0:	mvn	r7, #0
   1aac4:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aac8:	ldr	r0, [pc, #276]	; 1abe4 <test_clone_slice@@Base+0xa8c>
   1aacc:	bl	129f0 <puts@plt>
   1aad0:	mvn	r7, #0
   1aad4:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aad8:	ldr	r0, [pc, #264]	; 1abe8 <test_clone_slice@@Base+0xa90>
   1aadc:	bl	129f0 <puts@plt>
   1aae0:	mvn	r7, #0
   1aae4:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aae8:	ldr	r0, [pc, #252]	; 1abec <test_clone_slice@@Base+0xa94>
   1aaec:	bl	129f0 <puts@plt>
   1aaf0:	mvn	r7, #0
   1aaf4:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1aaf8:	ldr	r0, [pc, #240]	; 1abf0 <test_clone_slice@@Base+0xa98>
   1aafc:	bl	129f0 <puts@plt>
   1ab00:	mvn	r7, #0
   1ab04:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1ab08:	ldr	r0, [pc, #228]	; 1abf4 <test_clone_slice@@Base+0xa9c>
   1ab0c:	bl	129f0 <puts@plt>
   1ab10:	mvn	r7, #0
   1ab14:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1ab18:	ldr	r0, [pc, #216]	; 1abf8 <test_clone_slice@@Base+0xaa0>
   1ab1c:	bl	129f0 <puts@plt>
   1ab20:	mvn	r7, #0
   1ab24:	b	1a8b4 <test_clone_slice@@Base+0x75c>
   1ab28:	bl	13024 <__assert_fail@plt+0x598>
   1ab2c:	ldr	r3, [pc, #84]	; 1ab88 <test_clone_slice@@Base+0xa30>
   1ab30:	ldr	r2, [pc, #196]	; 1abfc <test_clone_slice@@Base+0xaa4>
   1ab34:	ldr	r1, [pc, #84]	; 1ab90 <test_clone_slice@@Base+0xa38>
   1ab38:	ldr	r0, [pc, #192]	; 1ac00 <test_clone_slice@@Base+0xaa8>
   1ab3c:	bl	12a8c <__assert_fail@plt>
   1ab40:	ldr	r3, [pc, #64]	; 1ab88 <test_clone_slice@@Base+0xa30>
   1ab44:	ldr	r2, [pc, #184]	; 1ac04 <test_clone_slice@@Base+0xaac>
   1ab48:	ldr	r1, [pc, #64]	; 1ab90 <test_clone_slice@@Base+0xa38>
   1ab4c:	ldr	r0, [pc, #180]	; 1ac08 <test_clone_slice@@Base+0xab0>
   1ab50:	bl	12a8c <__assert_fail@plt>
   1ab54:	ldr	r3, [pc, #44]	; 1ab88 <test_clone_slice@@Base+0xa30>
   1ab58:	mov	r2, #1664	; 0x680
   1ab5c:	ldr	r1, [pc, #44]	; 1ab90 <test_clone_slice@@Base+0xa38>
   1ab60:	ldr	r0, [pc, #164]	; 1ac0c <test_clone_slice@@Base+0xab4>
   1ab64:	bl	12a8c <__assert_fail@plt>
   1ab68:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1ab6c:	ldrdeq	r5, [r2], -r0
   1ab70:	andeq	r7, r2, ip, ror #4
   1ab74:	andeq	r5, r2, ip, ror #7
   1ab78:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1ab7c:	andeq	sl, r3, r0, ror r0
   1ab80:	andeq	r7, r2, r8, ror r2
   1ab84:	movtpl	r4, #61261	; 0xef4d
   1ab88:	ldrdeq	r5, [r2], -ip
   1ab8c:	andeq	r0, r0, r6, asr #12
   1ab90:	andeq	r6, r2, r4, lsl r3
   1ab94:	muleq	r2, r4, r2
   1ab98:	andeq	r5, r2, r0, lsl #4
   1ab9c:			; <UNDEFINED> instruction: 0x000002bb
   1aba0:	andeq	r5, r2, r4, asr #13
   1aba4:	strdeq	r5, [r2], -r0
   1aba8:	andeq	r7, r2, r4, lsr #5
   1abac:	andeq	r7, r2, r0, ror r2
   1abb0:	andeq	r7, r2, r8, asr r3
   1abb4:	andeq	r7, r2, ip, ror #5
   1abb8:	andeq	r7, r2, r4, lsr #7
   1abbc:	andeq	r7, r2, r0, ror #7
   1abc0:	andeq	r7, r2, r4, asr #9
   1abc4:	andeq	r7, r2, r8, lsl #9
   1abc8:			; <UNDEFINED> instruction: 0x000272bc
   1abcc:	strdeq	r7, [r2], -r8
   1abd0:	andeq	r7, r2, r8, lsr r3
   1abd4:	andeq	r7, r2, ip, asr r3
   1abd8:	andeq	r7, r2, r4, ror r3
   1abdc:	andeq	r7, r2, r0, asr #7
   1abe0:	strdeq	r7, [r2], -ip
   1abe4:	andeq	r7, r2, r8, lsr r4
   1abe8:	andeq	r7, r2, ip, lsl r4
   1abec:	andeq	r7, r2, ip, ror #8
   1abf0:	andeq	r7, r2, r4, lsr #9
   1abf4:	ldrdeq	r7, [r2], -r8
   1abf8:	andeq	r7, r2, ip, lsl r3
   1abfc:	andeq	r0, r0, r8, asr #12
   1ac00:	muleq	r2, ip, r2
   1ac04:	andeq	r0, r0, r4, asr #12
   1ac08:	andeq	r6, r2, r8, asr r8
   1ac0c:	andeq	r6, r2, r8, ror #6

0001ac10 <test_create_add_field@@Base>:
   1ac10:	push	{r4, r5, r6, lr}
   1ac14:	sub	sp, sp, #8
   1ac18:	mov	r4, r0
   1ac1c:	bl	1de88 <flatcc_builder_reset@@Base>
   1ac20:	mov	r3, #0
   1ac24:	mov	r0, r4
   1ac28:	mov	r2, r3
   1ac2c:	ldr	r1, [pc, #588]	; 1ae80 <test_create_add_field@@Base+0x270>
   1ac30:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1ac34:	cmp	r0, #0
   1ac38:	bne	1ac48 <test_create_add_field@@Base+0x38>
   1ac3c:	mov	r1, #36	; 0x24
   1ac40:	mov	r0, r4
   1ac44:	bl	203cc <flatcc_builder_start_table@@Base>
   1ac48:	ldr	r1, [pc, #564]	; 1ae84 <test_create_add_field@@Base+0x274>
   1ac4c:	mov	r0, r4
   1ac50:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1ac54:	subs	r5, r0, #0
   1ac58:	beq	1ac70 <test_create_add_field@@Base+0x60>
   1ac5c:	mov	r1, #3
   1ac60:	mov	r0, r4
   1ac64:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1ac68:	cmp	r0, #0
   1ac6c:	strne	r5, [r0]
   1ac70:	ldr	r1, [pc, #528]	; 1ae88 <test_create_add_field@@Base+0x278>
   1ac74:	mov	r0, r4
   1ac78:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1ac7c:	mov	r1, #3
   1ac80:	mov	r5, r0
   1ac84:	mov	r0, r4
   1ac88:	bl	203cc <flatcc_builder_start_table@@Base>
   1ac8c:	subs	r6, r0, #0
   1ac90:	bne	1acc4 <test_create_add_field@@Base+0xb4>
   1ac94:	mov	r3, #8
   1ac98:	mov	r2, r3
   1ac9c:	mov	r1, #1
   1aca0:	mov	r0, r4
   1aca4:	bl	22538 <flatcc_builder_table_add@@Base>
   1aca8:	cmp	r0, #0
   1acac:	beq	1acc4 <test_create_add_field@@Base+0xb4>
   1acb0:	mvn	r2, #99	; 0x63
   1acb4:	mvn	r3, #0
   1acb8:	cmp	r5, #0
   1acbc:	strd	r2, [r0]
   1acc0:	bne	1add8 <test_create_add_field@@Base+0x1c8>
   1acc4:	mov	r2, #1
   1acc8:	ldr	r1, [pc, #444]	; 1ae8c <test_create_add_field@@Base+0x27c>
   1accc:	mov	r0, r4
   1acd0:	bl	20d74 <flatcc_builder_check_required@@Base>
   1acd4:	cmp	r0, #0
   1acd8:	beq	1ae78 <test_create_add_field@@Base+0x268>
   1acdc:	mov	r0, r4
   1ace0:	bl	20e0c <flatcc_builder_end_table@@Base>
   1ace4:	mov	r1, r0
   1ace8:	mov	r0, r4
   1acec:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1acf0:	mov	r0, r4
   1acf4:	add	r1, sp, #4
   1acf8:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   1acfc:	subs	r4, r0, #0
   1ad00:	beq	1ad14 <test_create_add_field@@Base+0x104>
   1ad04:	ldr	r3, [pc, #388]	; 1ae90 <test_create_add_field@@Base+0x280>
   1ad08:	ldr	r2, [r4, #4]
   1ad0c:	cmp	r2, r3
   1ad10:	beq	1ad28 <test_create_add_field@@Base+0x118>
   1ad14:	ldr	r3, [pc, #376]	; 1ae94 <test_create_add_field@@Base+0x284>
   1ad18:	mov	r2, #716	; 0x2cc
   1ad1c:	ldr	r1, [pc, #372]	; 1ae98 <test_create_add_field@@Base+0x288>
   1ad20:	ldr	r0, [pc, #372]	; 1ae9c <test_create_add_field@@Base+0x28c>
   1ad24:	bl	12a8c <__assert_fail@plt>
   1ad28:	ldr	r2, [r4]
   1ad2c:	adds	r3, r4, r2
   1ad30:	beq	1ad14 <test_create_add_field@@Base+0x104>
   1ad34:	ldr	r2, [r4, r2]
   1ad38:	sub	r2, r3, r2
   1ad3c:	ldrh	r1, [r2]
   1ad40:	cmp	r1, #29
   1ad44:	bls	1ae64 <test_create_add_field@@Base+0x254>
   1ad48:	ldrh	r0, [r2, #28]
   1ad4c:	cmp	r0, #0
   1ad50:	bne	1ae54 <test_create_add_field@@Base+0x244>
   1ad54:	cmp	r1, #33	; 0x21
   1ad58:	bls	1ae64 <test_create_add_field@@Base+0x254>
   1ad5c:	ldrh	r1, [r2, #32]
   1ad60:	cmp	r1, #0
   1ad64:	beq	1ae64 <test_create_add_field@@Base+0x254>
   1ad68:	ldr	r2, [r3, r1]
   1ad6c:	add	r3, r3, r1
   1ad70:	adds	r1, r3, r2
   1ad74:	beq	1ae64 <test_create_add_field@@Base+0x254>
   1ad78:	ldr	r3, [r3, r2]
   1ad7c:	sub	r3, r1, r3
   1ad80:	ldrh	r2, [r3]
   1ad84:	cmp	r2, #7
   1ad88:	bhi	1adac <test_create_add_field@@Base+0x19c>
   1ad8c:	ldr	r0, [pc, #268]	; 1aea0 <test_create_add_field@@Base+0x290>
   1ad90:	bl	129f0 <puts@plt>
   1ad94:	mvn	r5, #0
   1ad98:	mov	r0, r4
   1ad9c:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   1ada0:	mov	r0, r5
   1ada4:	add	sp, sp, #8
   1ada8:	pop	{r4, r5, r6, pc}
   1adac:	ldrh	r3, [r3, #6]
   1adb0:	cmp	r3, #0
   1adb4:	beq	1ad8c <test_create_add_field@@Base+0x17c>
   1adb8:	ldrd	r0, [r1, r3]
   1adbc:	mvn	r3, #0
   1adc0:	mvn	r2, #99	; 0x63
   1adc4:	cmp	r1, r3
   1adc8:	cmpeq	r0, r2
   1adcc:	moveq	r5, #0
   1add0:	beq	1ad98 <test_create_add_field@@Base+0x188>
   1add4:	b	1ad8c <test_create_add_field@@Base+0x17c>
   1add8:	mov	r1, r6
   1addc:	mov	r0, r4
   1ade0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1ade4:	cmp	r0, #0
   1ade8:	beq	1acc4 <test_create_add_field@@Base+0xb4>
   1adec:	mov	r3, #2
   1adf0:	str	r5, [r0]
   1adf4:	mov	r2, r3
   1adf8:	mov	r1, r3
   1adfc:	mov	r0, r4
   1ae00:	bl	22538 <flatcc_builder_table_add@@Base>
   1ae04:	cmp	r0, #0
   1ae08:	beq	1acc4 <test_create_add_field@@Base+0xb4>
   1ae0c:	mov	r3, #2
   1ae10:	strh	r3, [r0]
   1ae14:	mov	r2, r6
   1ae18:	ldr	r1, [pc, #132]	; 1aea4 <test_create_add_field@@Base+0x294>
   1ae1c:	mov	r0, r4
   1ae20:	bl	20d74 <flatcc_builder_check_required@@Base>
   1ae24:	cmp	r0, #0
   1ae28:	beq	1ae7c <test_create_add_field@@Base+0x26c>
   1ae2c:	mov	r0, r4
   1ae30:	bl	20e0c <flatcc_builder_end_table@@Base>
   1ae34:	subs	r5, r0, #0
   1ae38:	beq	1acc4 <test_create_add_field@@Base+0xb4>
   1ae3c:	mov	r1, #14
   1ae40:	mov	r0, r4
   1ae44:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1ae48:	cmp	r0, #0
   1ae4c:	strne	r5, [r0]
   1ae50:	b	1acc4 <test_create_add_field@@Base+0xb4>
   1ae54:	ldr	r0, [pc, #76]	; 1aea8 <test_create_add_field@@Base+0x298>
   1ae58:	bl	129f0 <puts@plt>
   1ae5c:	mvn	r5, #0
   1ae60:	b	1ad98 <test_create_add_field@@Base+0x188>
   1ae64:	ldr	r3, [pc, #64]	; 1aeac <test_create_add_field@@Base+0x29c>
   1ae68:	mov	r2, #608	; 0x260
   1ae6c:	ldr	r1, [pc, #36]	; 1ae98 <test_create_add_field@@Base+0x288>
   1ae70:	ldr	r0, [pc, #36]	; 1ae9c <test_create_add_field@@Base+0x28c>
   1ae74:	bl	12a8c <__assert_fail@plt>
   1ae78:	bl	13024 <__assert_fail@plt+0x598>
   1ae7c:	bl	13048 <__assert_fail@plt+0x5bc>
   1ae80:	ldrdeq	r5, [r2], -r0
   1ae84:	strdeq	r5, [r2], -r8
   1ae88:	andeq	r7, r2, r8, ror #9
   1ae8c:	strdeq	r5, [r2], -r8
   1ae90:	movtpl	r4, #61261	; 0xef4d
   1ae94:	strdeq	r5, [r2], -r0
   1ae98:	andeq	r5, r2, r4, asr #13
   1ae9c:	andeq	r5, r2, r8, lsr #14
   1aea0:	andeq	r7, r2, r0, lsr #10
   1aea4:	muleq	r2, r8, r4
   1aea8:	strdeq	r7, [r2], -r0
   1aeac:	andeq	r5, r2, r8, lsl r5

0001aeb0 <test_union_vector@@Base>:
   1aeb0:	push	{r4, r5, r6, r7, lr}
   1aeb4:	sub	sp, sp, #28
   1aeb8:	mov	r4, r0
   1aebc:	bl	1de88 <flatcc_builder_reset@@Base>
   1aec0:	mov	r3, #0
   1aec4:	mov	r0, r4
   1aec8:	mov	r2, r3
   1aecc:	ldr	r1, [pc, #788]	; 1b1e8 <test_union_vector@@Base+0x338>
   1aed0:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1aed4:	cmp	r0, #0
   1aed8:	bne	1aee8 <test_union_vector@@Base+0x38>
   1aedc:	mov	r1, #36	; 0x24
   1aee0:	mov	r0, r4
   1aee4:	bl	203cc <flatcc_builder_start_table@@Base>
   1aee8:	ldr	r1, [pc, #764]	; 1b1ec <test_union_vector@@Base+0x33c>
   1aeec:	mov	r0, r4
   1aef0:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1aef4:	subs	r5, r0, #0
   1aef8:	beq	1af10 <test_union_vector@@Base+0x60>
   1aefc:	mov	r1, #3
   1af00:	mov	r0, r4
   1af04:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1af08:	cmp	r0, #0
   1af0c:	strne	r5, [r0]
   1af10:	mov	r1, #4
   1af14:	mov	r0, r4
   1af18:	bl	203cc <flatcc_builder_start_table@@Base>
   1af1c:	cmp	r0, #0
   1af20:	bne	1af50 <test_union_vector@@Base+0xa0>
   1af24:	ldr	r5, [pc, #708]	; 1b1f0 <test_union_vector@@Base+0x340>
   1af28:	mov	r2, r0
   1af2c:	add	r1, r5, #4
   1af30:	mov	r0, r4
   1af34:	bl	20d74 <flatcc_builder_check_required@@Base>
   1af38:	cmp	r0, #0
   1af3c:	beq	1b1d4 <test_union_vector@@Base+0x324>
   1af40:	mov	r0, r4
   1af44:	bl	20e0c <flatcc_builder_end_table@@Base>
   1af48:	mov	r6, r0
   1af4c:	b	1af54 <test_union_vector@@Base+0xa4>
   1af50:	mov	r6, #0
   1af54:	mov	r0, r4
   1af58:	bl	219bc <flatcc_builder_start_union_vector@@Base>
   1af5c:	add	r3, sp, #24
   1af60:	mov	r5, #2
   1af64:	str	r6, [sp, #20]
   1af68:	strb	r5, [sp, #16]
   1af6c:	mov	r0, r4
   1af70:	ldmdb	r3, {r1, r2}
   1af74:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1af78:	mov	r1, r4
   1af7c:	add	r0, sp, #8
   1af80:	bl	21b04 <flatcc_builder_end_union_vector@@Base>
   1af84:	mov	r1, #4
   1af88:	mov	r0, r4
   1af8c:	bl	203cc <flatcc_builder_start_table@@Base>
   1af90:	ldr	r6, [sp, #8]
   1af94:	ldr	r7, [sp, #12]
   1af98:	cmp	r7, #0
   1af9c:	cmpne	r6, #0
   1afa0:	bne	1b118 <test_union_vector@@Base+0x268>
   1afa4:	mov	r2, #0
   1afa8:	ldr	r1, [pc, #580]	; 1b1f4 <test_union_vector@@Base+0x344>
   1afac:	mov	r0, r4
   1afb0:	bl	20d74 <flatcc_builder_check_required@@Base>
   1afb4:	cmp	r0, #0
   1afb8:	beq	1b1c0 <test_union_vector@@Base+0x310>
   1afbc:	mov	r0, r4
   1afc0:	bl	20e0c <flatcc_builder_end_table@@Base>
   1afc4:	subs	r5, r0, #0
   1afc8:	beq	1b004 <test_union_vector@@Base+0x154>
   1afcc:	mov	r3, #1
   1afd0:	mov	r2, r3
   1afd4:	mov	r1, #7
   1afd8:	mov	r0, r4
   1afdc:	bl	22538 <flatcc_builder_table_add@@Base>
   1afe0:	subs	r6, r0, #0
   1afe4:	beq	1b004 <test_union_vector@@Base+0x154>
   1afe8:	mov	r1, #8
   1afec:	mov	r0, r4
   1aff0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1aff4:	cmp	r0, #0
   1aff8:	movne	r3, #4
   1affc:	strbne	r3, [r6]
   1b000:	strne	r5, [r0]
   1b004:	mov	r2, #1
   1b008:	ldr	r1, [pc, #488]	; 1b1f8 <test_union_vector@@Base+0x348>
   1b00c:	mov	r0, r4
   1b010:	bl	20d74 <flatcc_builder_check_required@@Base>
   1b014:	cmp	r0, #0
   1b018:	beq	1b1bc <test_union_vector@@Base+0x30c>
   1b01c:	mov	r0, r4
   1b020:	bl	20e0c <flatcc_builder_end_table@@Base>
   1b024:	mov	r1, r0
   1b028:	mov	r0, r4
   1b02c:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1b030:	mov	r0, r4
   1b034:	add	r1, sp, #4
   1b038:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b03c:	ldr	r3, [pc, #440]	; 1b1fc <test_union_vector@@Base+0x34c>
   1b040:	ldr	r2, [pc, #416]	; 1b1e8 <test_union_vector@@Base+0x338>
   1b044:	ldr	r1, [sp, #4]
   1b048:	mov	r4, r0
   1b04c:	bl	243ac <flatcc_verify_table_as_root@@Base>
   1b050:	subs	r5, r0, #0
   1b054:	bne	1b1a4 <test_union_vector@@Base+0x2f4>
   1b058:	cmp	r4, #0
   1b05c:	beq	1b070 <test_union_vector@@Base+0x1c0>
   1b060:	ldr	r3, [pc, #408]	; 1b200 <test_union_vector@@Base+0x350>
   1b064:	ldr	r2, [r4, #4]
   1b068:	cmp	r2, r3
   1b06c:	beq	1b074 <test_union_vector@@Base+0x1c4>
   1b070:	bl	12cb4 <__assert_fail@plt+0x228>
   1b074:	ldr	r3, [r4]
   1b078:	adds	r2, r4, r3
   1b07c:	beq	1b070 <test_union_vector@@Base+0x1c0>
   1b080:	ldr	r3, [r4, r3]
   1b084:	sub	r3, r2, r3
   1b088:	ldrh	r1, [r3]
   1b08c:	cmp	r1, #19
   1b090:	bls	1b10c <test_union_vector@@Base+0x25c>
   1b094:	ldrh	r0, [r3, #18]
   1b098:	cmp	r0, #0
   1b09c:	beq	1b10c <test_union_vector@@Base+0x25c>
   1b0a0:	ldrb	r0, [r2, r0]
   1b0a4:	cmp	r0, #4
   1b0a8:	bne	1b10c <test_union_vector@@Base+0x25c>
   1b0ac:	cmp	r1, #21
   1b0b0:	bls	1b0f0 <test_union_vector@@Base+0x240>
   1b0b4:	ldrh	r1, [r3, #20]
   1b0b8:	cmp	r1, #0
   1b0bc:	beq	1b0f0 <test_union_vector@@Base+0x240>
   1b0c0:	ldr	r3, [r2, r1]
   1b0c4:	add	r2, r2, r1
   1b0c8:	adds	r1, r2, r3
   1b0cc:	beq	1b0f0 <test_union_vector@@Base+0x240>
   1b0d0:	ldr	r3, [r2, r3]
   1b0d4:	sub	r3, r1, r3
   1b0d8:	ldrh	r2, [r3]
   1b0dc:	cmp	r2, #11
   1b0e0:	bls	1b148 <test_union_vector@@Base+0x298>
   1b0e4:	ldrh	r2, [r3, #10]
   1b0e8:	cmp	r2, #0
   1b0ec:	beq	1b150 <test_union_vector@@Base+0x2a0>
   1b0f0:	ldr	r0, [pc, #268]	; 1b204 <test_union_vector@@Base+0x354>
   1b0f4:	bl	129f0 <puts@plt>
   1b0f8:	mov	r0, r4
   1b0fc:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   1b100:	mov	r0, r5
   1b104:	add	sp, sp, #28
   1b108:	pop	{r4, r5, r6, r7, pc}
   1b10c:	ldr	r0, [pc, #244]	; 1b208 <test_union_vector@@Base+0x358>
   1b110:	bl	1299c <printf@plt>
   1b114:	b	1b0f8 <test_union_vector@@Base+0x248>
   1b118:	mov	r1, r5
   1b11c:	mov	r0, r4
   1b120:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b124:	cmp	r0, #0
   1b128:	beq	1afa4 <test_union_vector@@Base+0xf4>
   1b12c:	str	r6, [r0]
   1b130:	mov	r1, #3
   1b134:	mov	r0, r4
   1b138:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b13c:	cmp	r0, #0
   1b140:	strne	r7, [r0]
   1b144:	b	1afa4 <test_union_vector@@Base+0xf4>
   1b148:	cmp	r2, #9
   1b14c:	bls	1b18c <test_union_vector@@Base+0x2dc>
   1b150:	ldrh	r2, [r3, #8]
   1b154:	cmp	r2, #0
   1b158:	beq	1b18c <test_union_vector@@Base+0x2dc>
   1b15c:	ldr	r3, [r1, r2]
   1b160:	add	r1, r1, r2
   1b164:	add	r3, r3, #4
   1b168:	adds	r2, r1, r3
   1b16c:	beq	1b18c <test_union_vector@@Base+0x2dc>
   1b170:	ldr	r2, [r2, #-4]
   1b174:	cmp	r2, #1
   1b178:	bne	1b18c <test_union_vector@@Base+0x2dc>
   1b17c:	ldrb	r3, [r1, r3]
   1b180:	cmp	r3, #2
   1b184:	bne	1b198 <test_union_vector@@Base+0x2e8>
   1b188:	bl	12da4 <__assert_fail@plt+0x318>
   1b18c:	ldr	r0, [pc, #120]	; 1b20c <test_union_vector@@Base+0x35c>
   1b190:	bl	129f0 <puts@plt>
   1b194:	b	1b0f8 <test_union_vector@@Base+0x248>
   1b198:	ldr	r0, [pc, #112]	; 1b210 <test_union_vector@@Base+0x360>
   1b19c:	bl	129f0 <puts@plt>
   1b1a0:	b	1b0f8 <test_union_vector@@Base+0x248>
   1b1a4:	bl	2368c <flatcc_verify_error_string@@Base>
   1b1a8:	mvn	r5, #0
   1b1ac:	mov	r1, r0
   1b1b0:	ldr	r0, [pc, #92]	; 1b214 <test_union_vector@@Base+0x364>
   1b1b4:	bl	1299c <printf@plt>
   1b1b8:	b	1b100 <test_union_vector@@Base+0x250>
   1b1bc:	bl	13024 <__assert_fail@plt+0x598>
   1b1c0:	ldr	r3, [pc, #80]	; 1b218 <test_union_vector@@Base+0x368>
   1b1c4:	mov	r2, #223	; 0xdf
   1b1c8:	ldr	r1, [pc, #76]	; 1b21c <test_union_vector@@Base+0x36c>
   1b1cc:	ldr	r0, [pc, #76]	; 1b220 <test_union_vector@@Base+0x370>
   1b1d0:	bl	12a8c <__assert_fail@plt>
   1b1d4:	add	r3, r5, #8
   1b1d8:	mov	r2, #217	; 0xd9
   1b1dc:	ldr	r1, [pc, #56]	; 1b21c <test_union_vector@@Base+0x36c>
   1b1e0:	ldr	r0, [pc, #60]	; 1b224 <test_union_vector@@Base+0x374>
   1b1e4:	bl	12a8c <__assert_fail@plt>
   1b1e8:	ldrdeq	r5, [r2], -r0
   1b1ec:	andeq	r7, r2, r4, lsr r5
   1b1f0:	andeq	r5, r2, ip, lsr #10
   1b1f4:	andeq	r5, r2, r0, ror #10
   1b1f8:	strdeq	r5, [r2], -r8
   1b1fc:	andeq	r3, r1, r0, ror #19
   1b200:	movtpl	r4, #61261	; 0xef4d
   1b204:	andeq	r7, r2, r8, lsl #14
   1b208:	andeq	r7, r2, r4, ror #13
   1b20c:	andeq	r7, r2, r0, lsr r7
   1b210:	andeq	r7, r2, r8, asr r7
   1b214:	andeq	r7, r2, r8, lsr #13
   1b218:	andeq	r5, r2, r4, ror #10
   1b21c:	andeq	r5, r2, r4, lsr r8
   1b220:	andeq	r7, r2, r0, lsl r6
   1b224:	andeq	r7, r2, ip, lsr r5

0001b228 <test_mixed_type_union@@Base>:
   1b228:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b22c:	sub	sp, sp, #116	; 0x74
   1b230:	mov	r4, r0
   1b234:	bl	1de88 <flatcc_builder_reset@@Base>
   1b238:	mov	r3, #0
   1b23c:	mov	r0, r4
   1b240:	mov	r2, r3
   1b244:	ldr	r1, [pc, #2824]	; 1bd54 <test_mixed_type_union@@Base+0xb2c>
   1b248:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1b24c:	cmp	r0, #0
   1b250:	bne	1b260 <test_mixed_type_union@@Base+0x38>
   1b254:	mov	r1, #10
   1b258:	mov	r0, r4
   1b25c:	bl	203cc <flatcc_builder_start_table@@Base>
   1b260:	mov	r2, #4
   1b264:	mov	r1, r2
   1b268:	mov	r0, r4
   1b26c:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b270:	subs	r6, r0, #0
   1b274:	beq	1b28c <test_mixed_type_union@@Base+0x64>
   1b278:	mov	r3, #10
   1b27c:	str	r3, [r6]
   1b280:	mov	r0, r4
   1b284:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b288:	mov	r6, r0
   1b28c:	mov	r2, #2
   1b290:	mov	r1, r2
   1b294:	mov	r0, r4
   1b298:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b29c:	subs	r5, r0, #0
   1b2a0:	beq	1b818 <test_mixed_type_union@@Base+0x5f0>
   1b2a4:	mov	r3, #22
   1b2a8:	strh	r3, [r5]
   1b2ac:	mov	r0, r4
   1b2b0:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b2b4:	mov	r2, #2
   1b2b8:	mov	r1, r2
   1b2bc:	mov	r5, r0
   1b2c0:	mov	r0, r4
   1b2c4:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b2c8:	cmp	r0, #0
   1b2cc:	beq	1b320 <test_mixed_type_union@@Base+0xf8>
   1b2d0:	mov	r3, #19
   1b2d4:	strh	r3, [r0]
   1b2d8:	mov	r0, r4
   1b2dc:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b2e0:	subs	r7, r0, #0
   1b2e4:	beq	1b320 <test_mixed_type_union@@Base+0xf8>
   1b2e8:	mov	r3, #1
   1b2ec:	mov	r2, r3
   1b2f0:	mov	r1, #0
   1b2f4:	mov	r0, r4
   1b2f8:	bl	22538 <flatcc_builder_table_add@@Base>
   1b2fc:	subs	r8, r0, #0
   1b300:	beq	1b320 <test_mixed_type_union@@Base+0xf8>
   1b304:	mov	r1, #1
   1b308:	mov	r0, r4
   1b30c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b310:	cmp	r0, #0
   1b314:	movne	r3, #8
   1b318:	strbne	r3, [r8]
   1b31c:	strne	r7, [r0]
   1b320:	cmp	r5, #0
   1b324:	beq	1b360 <test_mixed_type_union@@Base+0x138>
   1b328:	mov	r3, #1
   1b32c:	mov	r2, r3
   1b330:	mov	r1, #6
   1b334:	mov	r0, r4
   1b338:	bl	22538 <flatcc_builder_table_add@@Base>
   1b33c:	subs	r7, r0, #0
   1b340:	beq	1b360 <test_mixed_type_union@@Base+0x138>
   1b344:	mov	r1, #7
   1b348:	mov	r0, r4
   1b34c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b350:	cmp	r0, #0
   1b354:	movne	r3, #8
   1b358:	strbne	r3, [r7]
   1b35c:	strne	r5, [r0]
   1b360:	mov	r1, #1
   1b364:	mov	r0, r4
   1b368:	bl	203cc <flatcc_builder_start_table@@Base>
   1b36c:	subs	r7, r0, #0
   1b370:	bne	1b704 <test_mixed_type_union@@Base+0x4dc>
   1b374:	mov	r3, #4
   1b378:	mov	r2, r3
   1b37c:	mov	r1, r7
   1b380:	mov	r0, r4
   1b384:	bl	22538 <flatcc_builder_table_add@@Base>
   1b388:	cmp	r0, #0
   1b38c:	beq	1b704 <test_mixed_type_union@@Base+0x4dc>
   1b390:	mov	r3, #42	; 0x2a
   1b394:	str	r3, [r0]
   1b398:	mov	r2, r7
   1b39c:	ldr	r1, [pc, #2484]	; 1bd58 <test_mixed_type_union@@Base+0xb30>
   1b3a0:	mov	r0, r4
   1b3a4:	bl	20d74 <flatcc_builder_check_required@@Base>
   1b3a8:	cmp	r0, #0
   1b3ac:	beq	1b98c <test_mixed_type_union@@Base+0x764>
   1b3b0:	mov	r0, r4
   1b3b4:	bl	20e0c <flatcc_builder_end_table@@Base>
   1b3b8:	subs	r7, r0, #0
   1b3bc:	beq	1b704 <test_mixed_type_union@@Base+0x4dc>
   1b3c0:	mov	r3, #1
   1b3c4:	mov	r2, r3
   1b3c8:	mov	r1, #2
   1b3cc:	mov	r0, r4
   1b3d0:	bl	22538 <flatcc_builder_table_add@@Base>
   1b3d4:	subs	r8, r0, #0
   1b3d8:	beq	1b3f8 <test_mixed_type_union@@Base+0x1d0>
   1b3dc:	mov	r1, #3
   1b3e0:	mov	r0, r4
   1b3e4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b3e8:	cmp	r0, #0
   1b3ec:	movne	r3, #2
   1b3f0:	strbne	r3, [r8]
   1b3f4:	strne	r7, [r0]
   1b3f8:	ldr	r1, [pc, #2396]	; 1bd5c <test_mixed_type_union@@Base+0xb34>
   1b3fc:	mov	r0, r4
   1b400:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1b404:	subs	r8, r0, #0
   1b408:	beq	1b444 <test_mixed_type_union@@Base+0x21c>
   1b40c:	mov	r3, #1
   1b410:	mov	r2, r3
   1b414:	mov	r1, #4
   1b418:	mov	r0, r4
   1b41c:	bl	22538 <flatcc_builder_table_add@@Base>
   1b420:	subs	r9, r0, #0
   1b424:	beq	1b444 <test_mixed_type_union@@Base+0x21c>
   1b428:	mov	r1, #5
   1b42c:	mov	r0, r4
   1b430:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b434:	cmp	r0, #0
   1b438:	movne	r3, #11
   1b43c:	strbne	r3, [r9]
   1b440:	strne	r8, [r0]
   1b444:	mov	r0, r4
   1b448:	bl	219bc <flatcc_builder_start_union_vector@@Base>
   1b44c:	add	r3, sp, #64	; 0x40
   1b450:	mov	r2, #8
   1b454:	str	r5, [sp, #68]	; 0x44
   1b458:	strb	r2, [sp, #64]	; 0x40
   1b45c:	mov	r0, r4
   1b460:	ldm	r3, {r1, r2}
   1b464:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b468:	add	r3, sp, #56	; 0x38
   1b46c:	mov	r2, #2
   1b470:	str	r7, [sp, #60]	; 0x3c
   1b474:	strb	r2, [sp, #56]	; 0x38
   1b478:	mov	r0, r4
   1b47c:	ldm	r3, {r1, r2}
   1b480:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b484:	mov	r1, #1
   1b488:	mov	r0, r4
   1b48c:	bl	203cc <flatcc_builder_start_table@@Base>
   1b490:	subs	r5, r0, #0
   1b494:	bne	1b70c <test_mixed_type_union@@Base+0x4e4>
   1b498:	mov	r3, #4
   1b49c:	mov	r2, r3
   1b4a0:	mov	r1, r5
   1b4a4:	mov	r0, r4
   1b4a8:	bl	22538 <flatcc_builder_table_add@@Base>
   1b4ac:	cmp	r0, #0
   1b4b0:	beq	1b70c <test_mixed_type_union@@Base+0x4e4>
   1b4b4:	mov	r3, #1
   1b4b8:	str	r3, [r0]
   1b4bc:	mov	r2, r5
   1b4c0:	ldr	r1, [pc, #2192]	; 1bd58 <test_mixed_type_union@@Base+0xb30>
   1b4c4:	mov	r0, r4
   1b4c8:	bl	20d74 <flatcc_builder_check_required@@Base>
   1b4cc:	cmp	r0, #0
   1b4d0:	beq	1b98c <test_mixed_type_union@@Base+0x764>
   1b4d4:	mov	r0, r4
   1b4d8:	bl	20e0c <flatcc_builder_end_table@@Base>
   1b4dc:	mov	r3, #2
   1b4e0:	strb	r3, [sp, #104]	; 0x68
   1b4e4:	add	r3, sp, #112	; 0x70
   1b4e8:	str	r0, [sp, #108]	; 0x6c
   1b4ec:	mov	r0, r4
   1b4f0:	ldmdb	r3, {r1, r2}
   1b4f4:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b4f8:	ldr	r1, [pc, #2144]	; 1bd60 <test_mixed_type_union@@Base+0xb38>
   1b4fc:	mov	r0, r4
   1b500:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1b504:	add	r3, sp, #48	; 0x30
   1b508:	mov	r2, #11
   1b50c:	strb	r2, [sp, #48]	; 0x30
   1b510:	mov	r5, #9
   1b514:	str	r0, [sp, #52]	; 0x34
   1b518:	mov	r0, r4
   1b51c:	ldm	r3, {r1, r2}
   1b520:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b524:	add	r3, sp, #40	; 0x28
   1b528:	str	r6, [sp, #44]	; 0x2c
   1b52c:	strb	r5, [sp, #40]	; 0x28
   1b530:	mov	r0, r4
   1b534:	ldm	r3, {r1, r2}
   1b538:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b53c:	mov	r2, #4
   1b540:	mov	r1, r2
   1b544:	mov	r0, r4
   1b548:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b54c:	mov	r3, #3
   1b550:	str	r3, [r0]
   1b554:	mov	r0, r4
   1b558:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b55c:	add	r3, sp, #96	; 0x60
   1b560:	strb	r5, [sp, #96]	; 0x60
   1b564:	str	r0, [sp, #100]	; 0x64
   1b568:	mov	r0, r4
   1b56c:	ldm	r3, {r1, r2}
   1b570:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b574:	mov	r2, #4
   1b578:	mov	r1, r2
   1b57c:	mov	r0, r4
   1b580:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b584:	cmp	r0, #0
   1b588:	beq	1b59c <test_mixed_type_union@@Base+0x374>
   1b58c:	mov	r3, #1
   1b590:	str	r3, [r0]
   1b594:	mov	r0, r4
   1b598:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b59c:	add	r3, sp, #32
   1b5a0:	mov	r2, #9
   1b5a4:	str	r0, [sp, #36]	; 0x24
   1b5a8:	strb	r2, [sp, #32]
   1b5ac:	mov	r0, r4
   1b5b0:	ldm	r3, {r1, r2}
   1b5b4:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b5b8:	mov	r2, #4
   1b5bc:	mov	r1, r2
   1b5c0:	mov	r0, r4
   1b5c4:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b5c8:	cmp	r0, #0
   1b5cc:	beq	1b5e0 <test_mixed_type_union@@Base+0x3b8>
   1b5d0:	mov	r3, #2
   1b5d4:	str	r3, [r0]
   1b5d8:	mov	r0, r4
   1b5dc:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b5e0:	add	r3, sp, #88	; 0x58
   1b5e4:	mov	r6, #9
   1b5e8:	str	r0, [sp, #92]	; 0x5c
   1b5ec:	strb	r6, [sp, #88]	; 0x58
   1b5f0:	mov	r0, r4
   1b5f4:	ldm	r3, {r1, r2}
   1b5f8:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b5fc:	ldr	r1, [pc, #1888]	; 1bd64 <test_mixed_type_union@@Base+0xb3c>
   1b600:	mov	r0, r4
   1b604:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1b608:	add	r3, sp, #24
   1b60c:	mov	r5, #11
   1b610:	strb	r5, [sp, #24]
   1b614:	str	r0, [sp, #28]
   1b618:	mov	r0, r4
   1b61c:	ldm	r3, {r1, r2}
   1b620:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b624:	ldr	r1, [pc, #1852]	; 1bd68 <test_mixed_type_union@@Base+0xb40>
   1b628:	mov	r0, r4
   1b62c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1b630:	add	r3, sp, #80	; 0x50
   1b634:	strb	r5, [sp, #80]	; 0x50
   1b638:	str	r0, [sp, #84]	; 0x54
   1b63c:	mov	r0, r4
   1b640:	ldm	r3, {r1, r2}
   1b644:	bl	21e70 <flatcc_builder_union_vector_push@@Base>
   1b648:	mov	r1, r4
   1b64c:	add	r0, sp, #72	; 0x48
   1b650:	bl	21b04 <flatcc_builder_end_union_vector@@Base>
   1b654:	ldr	r5, [sp, #72]	; 0x48
   1b658:	ldr	r7, [sp, #76]	; 0x4c
   1b65c:	cmp	r5, #0
   1b660:	cmpne	r7, #0
   1b664:	bne	1b870 <test_mixed_type_union@@Base+0x648>
   1b668:	mov	r2, #0
   1b66c:	ldr	r1, [pc, #1784]	; 1bd6c <test_mixed_type_union@@Base+0xb44>
   1b670:	mov	r0, r4
   1b674:	bl	20d74 <flatcc_builder_check_required@@Base>
   1b678:	cmp	r0, #0
   1b67c:	beq	1b978 <test_mixed_type_union@@Base+0x750>
   1b680:	mov	r0, r4
   1b684:	bl	20e0c <flatcc_builder_end_table@@Base>
   1b688:	mov	r1, r0
   1b68c:	mov	r0, r4
   1b690:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1b694:	mov	r0, r4
   1b698:	add	r1, sp, #4
   1b69c:	bl	22fb0 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b6a0:	ldr	r3, [pc, #1736]	; 1bd70 <test_mixed_type_union@@Base+0xb48>
   1b6a4:	ldr	r2, [sp, #4]
   1b6a8:	ldr	r3, [r3]
   1b6ac:	mov	r1, r0
   1b6b0:	mov	r4, r0
   1b6b4:	ldr	r0, [pc, #1720]	; 1bd74 <test_mixed_type_union@@Base+0xb4c>
   1b6b8:	bl	13458 <_start@@Base+0x148>
   1b6bc:	mov	r0, r4
   1b6c0:	ldr	r3, [pc, #1712]	; 1bd78 <test_mixed_type_union@@Base+0xb50>
   1b6c4:	ldr	r2, [pc, #1672]	; 1bd54 <test_mixed_type_union@@Base+0xb2c>
   1b6c8:	ldr	r1, [sp, #4]
   1b6cc:	bl	243ac <flatcc_verify_table_as_root@@Base>
   1b6d0:	cmp	r0, #0
   1b6d4:	bne	1b8f0 <test_mixed_type_union@@Base+0x6c8>
   1b6d8:	cmp	r4, #0
   1b6dc:	beq	1b6f0 <test_mixed_type_union@@Base+0x4c8>
   1b6e0:	ldr	r3, [pc, #1684]	; 1bd7c <test_mixed_type_union@@Base+0xb54>
   1b6e4:	ldr	r2, [r4, #4]
   1b6e8:	cmp	r2, r3
   1b6ec:	beq	1b714 <test_mixed_type_union@@Base+0x4ec>
   1b6f0:	ldr	r3, [pc, #1672]	; 1bd80 <test_mixed_type_union@@Base+0xb58>
   1b6f4:	ldr	r2, [pc, #1672]	; 1bd84 <test_mixed_type_union@@Base+0xb5c>
   1b6f8:	ldr	r1, [pc, #1672]	; 1bd88 <test_mixed_type_union@@Base+0xb60>
   1b6fc:	ldr	r0, [pc, #1672]	; 1bd8c <test_mixed_type_union@@Base+0xb64>
   1b700:	bl	12a8c <__assert_fail@plt>
   1b704:	mov	r7, #0
   1b708:	b	1b3f8 <test_mixed_type_union@@Base+0x1d0>
   1b70c:	mov	r0, #0
   1b710:	b	1b4dc <test_mixed_type_union@@Base+0x2b4>
   1b714:	ldr	r3, [r4]
   1b718:	adds	r5, r4, r3
   1b71c:	beq	1b6f0 <test_mixed_type_union@@Base+0x4c8>
   1b720:	ldr	r3, [r4, r3]
   1b724:	sub	r3, r5, r3
   1b728:	ldrh	r2, [r3]
   1b72c:	cmp	r2, #7
   1b730:	bls	1b7e8 <test_mixed_type_union@@Base+0x5c0>
   1b734:	ldrh	r1, [r3, #6]
   1b738:	cmp	r1, #0
   1b73c:	beq	1b7e8 <test_mixed_type_union@@Base+0x5c0>
   1b740:	cmp	r2, #23
   1b744:	bls	1b808 <test_mixed_type_union@@Base+0x5e0>
   1b748:	ldrh	r6, [r3, #22]
   1b74c:	cmp	r6, #0
   1b750:	beq	1b808 <test_mixed_type_union@@Base+0x5e0>
   1b754:	ldrh	r2, [r3, #4]
   1b758:	cmp	r2, #0
   1b75c:	beq	1b8a0 <test_mixed_type_union@@Base+0x678>
   1b760:	ldrb	r2, [r5, r2]
   1b764:	cmp	r2, #0
   1b768:	beq	1b8a0 <test_mixed_type_union@@Base+0x678>
   1b76c:	ldr	r0, [r5, r1]
   1b770:	cmp	r2, #8
   1b774:	add	r1, r5, r1
   1b778:	add	r2, r1, r0
   1b77c:	bne	1b8a0 <test_mixed_type_union@@Base+0x678>
   1b780:	cmp	r2, #0
   1b784:	beq	1b8b8 <test_mixed_type_union@@Base+0x690>
   1b788:	ldrh	r2, [r1, r0]
   1b78c:	cmp	r2, #19
   1b790:	bhi	1b8d0 <test_mixed_type_union@@Base+0x6a8>
   1b794:	bne	1b8c0 <test_mixed_type_union@@Base+0x698>
   1b798:	ldrh	r2, [r3, #16]
   1b79c:	cmp	r2, #0
   1b7a0:	beq	1b8e0 <test_mixed_type_union@@Base+0x6b8>
   1b7a4:	ldrb	r2, [r5, r2]
   1b7a8:	cmp	r2, #8
   1b7ac:	bne	1b8e0 <test_mixed_type_union@@Base+0x6b8>
   1b7b0:	ldrh	r2, [r3, #18]
   1b7b4:	cmp	r2, #0
   1b7b8:	beq	1b968 <test_mixed_type_union@@Base+0x740>
   1b7bc:	ldr	r1, [r5, r2]
   1b7c0:	add	r2, r5, r2
   1b7c4:	cmn	r2, r1
   1b7c8:	beq	1b968 <test_mixed_type_union@@Base+0x740>
   1b7cc:	ldrh	r2, [r2, r1]
   1b7d0:	cmp	r2, #22
   1b7d4:	beq	1b908 <test_mixed_type_union@@Base+0x6e0>
   1b7d8:	ldr	r0, [pc, #1456]	; 1bd90 <test_mixed_type_union@@Base+0xb68>
   1b7dc:	bl	129f0 <puts@plt>
   1b7e0:	mvn	r5, #0
   1b7e4:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b7e8:	ldr	r0, [pc, #1444]	; 1bd94 <test_mixed_type_union@@Base+0xb6c>
   1b7ec:	bl	129f0 <puts@plt>
   1b7f0:	mvn	r5, #0
   1b7f4:	mov	r0, r4
   1b7f8:	bl	230c0 <flatcc_builder_aligned_free@@Base>
   1b7fc:	mov	r0, r5
   1b800:	add	sp, sp, #116	; 0x74
   1b804:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b808:	ldr	r0, [pc, #1416]	; 1bd98 <test_mixed_type_union@@Base+0xb70>
   1b80c:	bl	129f0 <puts@plt>
   1b810:	mvn	r5, #0
   1b814:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b818:	mov	r2, #2
   1b81c:	mov	r1, r2
   1b820:	mov	r0, r4
   1b824:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1b828:	cmp	r0, #0
   1b82c:	beq	1b8b0 <test_mixed_type_union@@Base+0x688>
   1b830:	mov	r3, #19
   1b834:	strh	r3, [r0]
   1b838:	mov	r0, r4
   1b83c:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1b840:	subs	r7, r0, #0
   1b844:	moveq	r5, r7
   1b848:	beq	1b360 <test_mixed_type_union@@Base+0x138>
   1b84c:	mov	r3, #1
   1b850:	mov	r2, r3
   1b854:	mov	r1, r5
   1b858:	mov	r0, r4
   1b85c:	bl	22538 <flatcc_builder_table_add@@Base>
   1b860:	subs	r8, r0, #0
   1b864:	bne	1b304 <test_mixed_type_union@@Base+0xdc>
   1b868:	mov	r5, r8
   1b86c:	b	1b360 <test_mixed_type_union@@Base+0x138>
   1b870:	mov	r1, #8
   1b874:	mov	r0, r4
   1b878:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b87c:	cmp	r0, #0
   1b880:	beq	1b668 <test_mixed_type_union@@Base+0x440>
   1b884:	str	r5, [r0]
   1b888:	mov	r1, r6
   1b88c:	mov	r0, r4
   1b890:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1b894:	cmp	r0, #0
   1b898:	strne	r7, [r0]
   1b89c:	b	1b668 <test_mixed_type_union@@Base+0x440>
   1b8a0:	ldr	r0, [pc, #1268]	; 1bd9c <test_mixed_type_union@@Base+0xb74>
   1b8a4:	bl	129f0 <puts@plt>
   1b8a8:	mvn	r5, #0
   1b8ac:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b8b0:	mov	r5, r0
   1b8b4:	b	1b360 <test_mixed_type_union@@Base+0x138>
   1b8b8:	ldr	r0, [pc, #1248]	; 1bda0 <test_mixed_type_union@@Base+0xb78>
   1b8bc:	bl	129f0 <puts@plt>
   1b8c0:	ldr	r0, [pc, #1244]	; 1bda4 <test_mixed_type_union@@Base+0xb7c>
   1b8c4:	bl	129f0 <puts@plt>
   1b8c8:	mvn	r5, #0
   1b8cc:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b8d0:	ldr	r0, [pc, #1232]	; 1bda8 <test_mixed_type_union@@Base+0xb80>
   1b8d4:	bl	129f0 <puts@plt>
   1b8d8:	mvn	r5, #0
   1b8dc:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b8e0:	ldr	r0, [pc, #1220]	; 1bdac <test_mixed_type_union@@Base+0xb84>
   1b8e4:	bl	129f0 <puts@plt>
   1b8e8:	mvn	r5, #0
   1b8ec:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b8f0:	bl	2368c <flatcc_verify_error_string@@Base>
   1b8f4:	mvn	r5, #0
   1b8f8:	mov	r1, r0
   1b8fc:	ldr	r0, [pc, #1196]	; 1bdb0 <test_mixed_type_union@@Base+0xb88>
   1b900:	bl	1299c <printf@plt>
   1b904:	b	1b7fc <test_mixed_type_union@@Base+0x5d4>
   1b908:	ldrh	r2, [r3, #8]
   1b90c:	cmp	r2, #0
   1b910:	beq	1b958 <test_mixed_type_union@@Base+0x730>
   1b914:	ldrb	r2, [r5, r2]
   1b918:	cmp	r2, #2
   1b91c:	bne	1b958 <test_mixed_type_union@@Base+0x730>
   1b920:	ldrh	r3, [r3, #10]
   1b924:	cmp	r3, #0
   1b928:	beq	1b948 <test_mixed_type_union@@Base+0x720>
   1b92c:	ldr	r2, [r5, r3]
   1b930:	add	r3, r5, r3
   1b934:	adds	r0, r3, r2
   1b938:	beq	1b948 <test_mixed_type_union@@Base+0x720>
   1b93c:	bl	12ea8 <__assert_fail@plt+0x41c>
   1b940:	cmp	r0, #42	; 0x2a
   1b944:	beq	1b9a0 <test_mixed_type_union@@Base+0x778>
   1b948:	ldr	r0, [pc, #1124]	; 1bdb4 <test_mixed_type_union@@Base+0xb8c>
   1b94c:	bl	129f0 <puts@plt>
   1b950:	mvn	r5, #0
   1b954:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b958:	ldr	r0, [pc, #1112]	; 1bdb8 <test_mixed_type_union@@Base+0xb90>
   1b95c:	bl	129f0 <puts@plt>
   1b960:	mvn	r5, #0
   1b964:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b968:	ldr	r0, [pc, #1100]	; 1bdbc <test_mixed_type_union@@Base+0xb94>
   1b96c:	bl	129f0 <puts@plt>
   1b970:	mvn	r5, #0
   1b974:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b978:	ldr	r3, [pc, #1088]	; 1bdc0 <test_mixed_type_union@@Base+0xb98>
   1b97c:	mov	r2, #241	; 0xf1
   1b980:	ldr	r1, [pc, #1084]	; 1bdc4 <test_mixed_type_union@@Base+0xb9c>
   1b984:	ldr	r0, [pc, #1084]	; 1bdc8 <test_mixed_type_union@@Base+0xba0>
   1b988:	bl	12a8c <__assert_fail@plt>
   1b98c:	ldr	r3, [pc, #1080]	; 1bdcc <test_mixed_type_union@@Base+0xba4>
   1b990:	mov	r2, #239	; 0xef
   1b994:	ldr	r1, [pc, #1064]	; 1bdc4 <test_mixed_type_union@@Base+0xb9c>
   1b998:	ldr	r0, [pc, #1072]	; 1bdd0 <test_mixed_type_union@@Base+0xba8>
   1b99c:	bl	12a8c <__assert_fail@plt>
   1b9a0:	mov	r0, r5
   1b9a4:	bl	12df0 <__assert_fail@plt+0x364>
   1b9a8:	cmp	r0, #11
   1b9ac:	beq	1b9c0 <test_mixed_type_union@@Base+0x798>
   1b9b0:	ldr	r0, [pc, #1052]	; 1bdd4 <test_mixed_type_union@@Base+0xbac>
   1b9b4:	bl	129f0 <puts@plt>
   1b9b8:	mvn	r5, #0
   1b9bc:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1b9c0:	mov	r0, r5
   1b9c4:	bl	12e48 <__assert_fail@plt+0x3bc>
   1b9c8:	cmp	r0, #0
   1b9cc:	beq	1ba00 <test_mixed_type_union@@Base+0x7d8>
   1b9d0:	adds	r7, r0, #4
   1b9d4:	beq	1ba00 <test_mixed_type_union@@Base+0x7d8>
   1b9d8:	ldr	r1, [pc, #892]	; 1bd5c <test_mixed_type_union@@Base+0xb34>
   1b9dc:	mov	r0, r7
   1b9e0:	bl	12990 <strcmp@plt>
   1b9e4:	cmp	r0, #0
   1b9e8:	beq	1ba10 <test_mixed_type_union@@Base+0x7e8>
   1b9ec:	mov	r1, r7
   1b9f0:	ldr	r0, [pc, #992]	; 1bdd8 <test_mixed_type_union@@Base+0xbb0>
   1b9f4:	bl	1299c <printf@plt>
   1b9f8:	mvn	r5, #0
   1b9fc:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1ba00:	ldr	r0, [pc, #980]	; 1bddc <test_mixed_type_union@@Base+0xbb4>
   1ba04:	bl	129f0 <puts@plt>
   1ba08:	mvn	r5, #0
   1ba0c:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1ba10:	mov	r0, r5
   1ba14:	bl	12f00 <__assert_fail@plt+0x474>
   1ba18:	ldr	r3, [r5, r6]
   1ba1c:	add	r6, r5, r6
   1ba20:	add	r3, r3, #4
   1ba24:	add	r7, r6, r3
   1ba28:	subs	r8, r0, #0
   1ba2c:	beq	1ba80 <test_mixed_type_union@@Base+0x858>
   1ba30:	cmp	r7, #0
   1ba34:	ldr	r2, [r8, #-4]
   1ba38:	beq	1bad4 <test_mixed_type_union@@Base+0x8ac>
   1ba3c:	ldr	r3, [r7, #-4]
   1ba40:	cmp	r2, r3
   1ba44:	bne	1bac0 <test_mixed_type_union@@Base+0x898>
   1ba48:	add	r6, sp, #8
   1ba4c:	str	r8, [sp, #8]
   1ba50:	str	r7, [sp, #12]
   1ba54:	mov	r3, #0
   1ba58:	add	r0, sp, #16
   1ba5c:	ldm	r6, {r1, r2}
   1ba60:	bl	12f64 <__assert_fail@plt+0x4d8>
   1ba64:	ldrb	r3, [sp, #16]
   1ba68:	cmp	r3, #8
   1ba6c:	beq	1ba90 <test_mixed_type_union@@Base+0x868>
   1ba70:	ldr	r0, [pc, #872]	; 1bde0 <test_mixed_type_union@@Base+0xbb8>
   1ba74:	bl	1299c <printf@plt>
   1ba78:	mvn	r5, #0
   1ba7c:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1ba80:	cmp	r7, #0
   1ba84:	movne	r2, #0
   1ba88:	bne	1ba3c <test_mixed_type_union@@Base+0x814>
   1ba8c:	b	1ba48 <test_mixed_type_union@@Base+0x820>
   1ba90:	add	r0, sp, #16
   1ba94:	mov	r3, #1
   1ba98:	ldm	r6, {r1, r2}
   1ba9c:	bl	12f64 <__assert_fail@plt+0x4d8>
   1baa0:	ldrb	r9, [sp, #16]
   1baa4:	ldr	r0, [sp, #20]
   1baa8:	cmp	r9, #2
   1baac:	beq	1badc <test_mixed_type_union@@Base+0x8b4>
   1bab0:	ldr	r0, [pc, #812]	; 1bde4 <test_mixed_type_union@@Base+0xbbc>
   1bab4:	bl	1299c <printf@plt>
   1bab8:	mvn	r5, #0
   1babc:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bac0:	ldr	r3, [pc, #800]	; 1bde8 <test_mixed_type_union@@Base+0xbc0>
   1bac4:	ldr	r2, [pc, #800]	; 1bdec <test_mixed_type_union@@Base+0xbc4>
   1bac8:	ldr	r1, [pc, #696]	; 1bd88 <test_mixed_type_union@@Base+0xb60>
   1bacc:	ldr	r0, [pc, #796]	; 1bdf0 <test_mixed_type_union@@Base+0xbc8>
   1bad0:	bl	12a8c <__assert_fail@plt>
   1bad4:	mov	r3, r7
   1bad8:	b	1ba40 <test_mixed_type_union@@Base+0x818>
   1badc:	bl	12ea8 <__assert_fail@plt+0x41c>
   1bae0:	cmp	r0, #42	; 0x2a
   1bae4:	beq	1baf8 <test_mixed_type_union@@Base+0x8d0>
   1bae8:	ldr	r0, [pc, #772]	; 1bdf4 <test_mixed_type_union@@Base+0xbcc>
   1baec:	bl	1299c <printf@plt>
   1baf0:	mvn	r5, #0
   1baf4:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1baf8:	mov	r3, r9
   1bafc:	add	r0, sp, #16
   1bb00:	ldm	r6, {r1, r2}
   1bb04:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bb08:	ldrb	r3, [sp, #16]
   1bb0c:	ldr	r0, [sp, #20]
   1bb10:	cmp	r3, #2
   1bb14:	beq	1bb28 <test_mixed_type_union@@Base+0x900>
   1bb18:	ldr	r0, [pc, #728]	; 1bdf8 <test_mixed_type_union@@Base+0xbd0>
   1bb1c:	bl	1299c <printf@plt>
   1bb20:	mvn	r5, #0
   1bb24:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bb28:	bl	12ea8 <__assert_fail@plt+0x41c>
   1bb2c:	cmp	r0, #1
   1bb30:	beq	1bb44 <test_mixed_type_union@@Base+0x91c>
   1bb34:	ldr	r0, [pc, #704]	; 1bdfc <test_mixed_type_union@@Base+0xbd4>
   1bb38:	bl	1299c <printf@plt>
   1bb3c:	mvn	r5, #0
   1bb40:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bb44:	mov	r0, r5
   1bb48:	bl	12f00 <__assert_fail@plt+0x474>
   1bb4c:	cmp	r0, #0
   1bb50:	beq	1bb7c <test_mixed_type_union@@Base+0x954>
   1bb54:	ldr	r3, [r0, #-4]
   1bb58:	cmp	r3, #3
   1bb5c:	bls	1bb7c <test_mixed_type_union@@Base+0x954>
   1bb60:	ldrb	r3, [r0, #3]
   1bb64:	cmp	r3, #11
   1bb68:	beq	1bb80 <test_mixed_type_union@@Base+0x958>
   1bb6c:	ldr	r0, [pc, #652]	; 1be00 <test_mixed_type_union@@Base+0xbd8>
   1bb70:	bl	129f0 <puts@plt>
   1bb74:	mvn	r5, #0
   1bb78:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bb7c:	bl	12dc8 <__assert_fail@plt+0x33c>
   1bb80:	cmp	r7, #0
   1bb84:	beq	1bbc4 <test_mixed_type_union@@Base+0x99c>
   1bb88:	ldr	r3, [r7, #-4]
   1bb8c:	cmp	r3, #3
   1bb90:	bls	1bbc4 <test_mixed_type_union@@Base+0x99c>
   1bb94:	ldr	r3, [r7, #12]
   1bb98:	add	r3, r3, #16
   1bb9c:	adds	r0, r7, r3
   1bba0:	beq	1bbb4 <test_mixed_type_union@@Base+0x98c>
   1bba4:	ldr	r1, [pc, #436]	; 1bd60 <test_mixed_type_union@@Base+0xb38>
   1bba8:	bl	12990 <strcmp@plt>
   1bbac:	cmp	r0, #0
   1bbb0:	beq	1bbd8 <test_mixed_type_union@@Base+0x9b0>
   1bbb4:	ldr	r0, [pc, #584]	; 1be04 <test_mixed_type_union@@Base+0xbdc>
   1bbb8:	bl	129f0 <puts@plt>
   1bbbc:	mvn	r5, #0
   1bbc0:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bbc4:	ldr	r3, [pc, #572]	; 1be08 <test_mixed_type_union@@Base+0xbe0>
   1bbc8:	mov	r2, #119	; 0x77
   1bbcc:	ldr	r1, [pc, #568]	; 1be0c <test_mixed_type_union@@Base+0xbe4>
   1bbd0:	ldr	r0, [pc, #568]	; 1be10 <test_mixed_type_union@@Base+0xbe8>
   1bbd4:	bl	12a8c <__assert_fail@plt>
   1bbd8:	mov	r3, #3
   1bbdc:	ldm	r6, {r1, r2}
   1bbe0:	add	r0, sp, #16
   1bbe4:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bbe8:	ldrb	r2, [sp, #16]
   1bbec:	ldr	r3, [sp, #20]
   1bbf0:	cmp	r2, #11
   1bbf4:	beq	1bc08 <test_mixed_type_union@@Base+0x9e0>
   1bbf8:	ldr	r0, [pc, #532]	; 1be14 <test_mixed_type_union@@Base+0xbec>
   1bbfc:	bl	1299c <printf@plt>
   1bc00:	mvn	r5, #0
   1bc04:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bc08:	cmp	r3, #0
   1bc0c:	beq	1bc28 <test_mixed_type_union@@Base+0xa00>
   1bc10:	adds	r0, r3, #4
   1bc14:	beq	1bc28 <test_mixed_type_union@@Base+0xa00>
   1bc18:	ldr	r1, [pc, #320]	; 1bd60 <test_mixed_type_union@@Base+0xb38>
   1bc1c:	bl	12990 <strcmp@plt>
   1bc20:	subs	r5, r0, #0
   1bc24:	beq	1bc38 <test_mixed_type_union@@Base+0xa10>
   1bc28:	ldr	r0, [pc, #488]	; 1be18 <test_mixed_type_union@@Base+0xbf0>
   1bc2c:	bl	129f0 <puts@plt>
   1bc30:	mvn	r5, #0
   1bc34:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bc38:	mov	r3, #4
   1bc3c:	ldm	r6, {r1, r2}
   1bc40:	add	r0, sp, #16
   1bc44:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bc48:	ldrb	r3, [sp, #16]
   1bc4c:	cmp	r3, #9
   1bc50:	beq	1bc64 <test_mixed_type_union@@Base+0xa3c>
   1bc54:	ldr	r0, [pc, #448]	; 1be1c <test_mixed_type_union@@Base+0xbf4>
   1bc58:	bl	1299c <printf@plt>
   1bc5c:	mvn	r5, #0
   1bc60:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bc64:	mov	r3, #5
   1bc68:	ldm	r6, {r1, r2}
   1bc6c:	add	r0, sp, #16
   1bc70:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bc74:	ldrb	r3, [sp, #16]
   1bc78:	cmp	r3, #9
   1bc7c:	beq	1bc90 <test_mixed_type_union@@Base+0xa68>
   1bc80:	ldr	r0, [pc, #408]	; 1be20 <test_mixed_type_union@@Base+0xbf8>
   1bc84:	bl	1299c <printf@plt>
   1bc88:	mvn	r5, #0
   1bc8c:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bc90:	mov	r3, #6
   1bc94:	ldm	r6, {r1, r2}
   1bc98:	add	r0, sp, #16
   1bc9c:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bca0:	ldrb	r3, [sp, #16]
   1bca4:	cmp	r3, #9
   1bca8:	beq	1bcbc <test_mixed_type_union@@Base+0xa94>
   1bcac:	ldr	r0, [pc, #368]	; 1be24 <test_mixed_type_union@@Base+0xbfc>
   1bcb0:	bl	1299c <printf@plt>
   1bcb4:	mvn	r5, #0
   1bcb8:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bcbc:	mov	r3, #7
   1bcc0:	ldm	r6, {r1, r2}
   1bcc4:	add	r0, sp, #16
   1bcc8:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bccc:	ldrb	r3, [sp, #16]
   1bcd0:	cmp	r3, #9
   1bcd4:	beq	1bce8 <test_mixed_type_union@@Base+0xac0>
   1bcd8:	ldr	r0, [pc, #328]	; 1be28 <test_mixed_type_union@@Base+0xc00>
   1bcdc:	bl	1299c <printf@plt>
   1bce0:	mvn	r5, #0
   1bce4:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bce8:	mov	r3, #8
   1bcec:	ldm	r6, {r1, r2}
   1bcf0:	add	r0, sp, #16
   1bcf4:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bcf8:	ldrb	r3, [sp, #16]
   1bcfc:	cmp	r3, #11
   1bd00:	beq	1bd14 <test_mixed_type_union@@Base+0xaec>
   1bd04:	ldr	r0, [pc, #288]	; 1be2c <test_mixed_type_union@@Base+0xc04>
   1bd08:	bl	1299c <printf@plt>
   1bd0c:	mvn	r5, #0
   1bd10:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bd14:	mov	r3, #9
   1bd18:	add	r0, sp, #16
   1bd1c:	ldm	r6, {r1, r2}
   1bd20:	bl	12f64 <__assert_fail@plt+0x4d8>
   1bd24:	ldrb	r3, [sp, #16]
   1bd28:	cmp	r3, #11
   1bd2c:	bne	1bd04 <test_mixed_type_union@@Base+0xadc>
   1bd30:	cmp	r8, #0
   1bd34:	beq	1bd44 <test_mixed_type_union@@Base+0xb1c>
   1bd38:	ldr	r3, [r8, #-4]
   1bd3c:	cmp	r3, #10
   1bd40:	beq	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bd44:	ldr	r0, [pc, #228]	; 1be30 <test_mixed_type_union@@Base+0xc08>
   1bd48:	bl	1299c <printf@plt>
   1bd4c:	mvn	r5, #0
   1bd50:	b	1b7f4 <test_mixed_type_union@@Base+0x5cc>
   1bd54:	ldrdeq	r5, [r2], -r0
   1bd58:	andeq	r5, r2, ip, ror r5
   1bd5c:	andeq	r7, r2, r8, lsl r8
   1bd60:	andeq	r7, r2, r0, lsr #16
   1bd64:	andeq	r7, r2, ip, lsr #16
   1bd68:	andeq	r7, r2, r8, lsr #16
   1bd6c:	muleq	r2, r8, r5
   1bd70:	andeq	sl, r3, r0, ror r0
   1bd74:			; <UNDEFINED> instruction: 0x000278bc
   1bd78:	andeq	r3, r1, ip, asr #30
   1bd7c:	movtpl	r4, #61261	; 0xef4d
   1bd80:			; <UNDEFINED> instruction: 0x000255b0
   1bd84:	andeq	r0, r0, r3, lsr r3
   1bd88:	andeq	r5, r2, r4, asr #13
   1bd8c:	andeq	r5, r2, r8, lsr #14
   1bd90:	andeq	r7, r2, r4, ror #20
   1bd94:	andeq	r7, r2, ip, lsl r9
   1bd98:	andeq	r7, r2, r8, asr #18
   1bd9c:	andeq	r7, r2, r4, ror r9
   1bda0:	muleq	r2, r0, r9
   1bda4:	ldrdeq	r7, [r2], -r0
   1bda8:	andeq	r7, r2, r8, lsr #19
   1bdac:	andeq	r7, r2, r0, lsl #20
   1bdb0:	andeq	r7, r2, ip, asr #17
   1bdb4:	andeq	r7, r2, ip, lsr #21
   1bdb8:	muleq	r2, r4, sl
   1bdbc:	andeq	r7, r2, r4, lsr sl
   1bdc0:	muleq	r2, ip, r5
   1bdc4:	andeq	r5, r2, r4, lsr r8
   1bdc8:	andeq	r7, r2, r4, lsr r8
   1bdcc:	andeq	r5, r2, r0, lsl #11
   1bdd0:	andeq	r7, r2, r8, lsl #15
   1bdd4:	ldrdeq	r7, [r2], -r0
   1bdd8:	andeq	r7, r2, r4, lsl #22
   1bddc:	andeq	r7, r2, r8, ror #21
   1bde0:	muleq	r2, r0, fp
   1bde4:			; <UNDEFINED> instruction: 0x00027bb8
   1bde8:	ldrdeq	r5, [r2], -r8
   1bdec:	andeq	r0, r0, r7, lsr r3
   1bdf0:	andeq	r7, r2, r8, lsr #22
   1bdf4:	ldrdeq	r7, [r2], -ip
   1bdf8:	andeq	r7, r2, r0, lsl ip
   1bdfc:	andeq	r7, r2, r4, lsr ip
   1be00:	andeq	r7, r2, r8, ror #24
   1be04:	muleq	r2, r8, ip
   1be08:	strdeq	r5, [r2], -r8
   1be0c:	andeq	r5, r2, r0, asr r7
   1be10:			; <UNDEFINED> instruction: 0x000257b8
   1be14:	andeq	r7, r2, ip, asr #25
   1be18:	andeq	r7, r2, r4, lsl #26
   1be1c:	andeq	r7, r2, r4, asr #26
   1be20:	andeq	r7, r2, r8, ror #26
   1be24:	andeq	r7, r2, ip, lsl #27
   1be28:			; <UNDEFINED> instruction: 0x00027db0
   1be2c:	ldrdeq	r7, [r2], -r4
   1be30:	andeq	r7, r2, r0, lsl #28

0001be34 <test_add_set_defaults@@Base>:
   1be34:	push	{r4, r5, r6, lr}
   1be38:	sub	sp, sp, #8
   1be3c:	mov	r4, r0
   1be40:	bl	1de88 <flatcc_builder_reset@@Base>
   1be44:	mov	r3, #0
   1be48:	mov	r0, r4
   1be4c:	mov	r2, r3
   1be50:	ldr	r1, [pc, #716]	; 1c124 <test_add_set_defaults@@Base+0x2f0>
   1be54:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1be58:	cmp	r0, #0
   1be5c:	bne	1be6c <test_add_set_defaults@@Base+0x38>
   1be60:	mov	r1, #36	; 0x24
   1be64:	mov	r0, r4
   1be68:	bl	203cc <flatcc_builder_start_table@@Base>
   1be6c:	ldr	r1, [pc, #692]	; 1c128 <test_add_set_defaults@@Base+0x2f4>
   1be70:	mov	r0, r4
   1be74:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1be78:	subs	r5, r0, #0
   1be7c:	beq	1be94 <test_add_set_defaults@@Base+0x60>
   1be80:	mov	r1, #3
   1be84:	mov	r0, r4
   1be88:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1be8c:	cmp	r0, #0
   1be90:	strne	r5, [r0]
   1be94:	mov	r3, #2
   1be98:	mov	r2, r3
   1be9c:	mov	r1, #1
   1bea0:	mov	r0, r4
   1bea4:	bl	22538 <flatcc_builder_table_add@@Base>
   1bea8:	ldr	r5, [pc, #636]	; 1c12c <test_add_set_defaults@@Base+0x2f8>
   1beac:	mov	r2, #1
   1beb0:	add	r1, r5, #12
   1beb4:	cmp	r0, #0
   1beb8:	movne	r3, #100	; 0x64
   1bebc:	strhne	r3, [r0]
   1bec0:	mov	r0, r4
   1bec4:	bl	20d74 <flatcc_builder_check_required@@Base>
   1bec8:	cmp	r0, #0
   1becc:	beq	1c120 <test_add_set_defaults@@Base+0x2ec>
   1bed0:	mov	r0, r4
   1bed4:	bl	20e0c <flatcc_builder_end_table@@Base>
   1bed8:	mov	r1, r0
   1bedc:	mov	r0, r4
   1bee0:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1bee4:	add	r1, sp, #4
   1bee8:	mov	r0, r4
   1beec:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1bef0:	cmp	r0, #0
   1bef4:	beq	1bf08 <test_add_set_defaults@@Base+0xd4>
   1bef8:	ldr	r3, [pc, #560]	; 1c130 <test_add_set_defaults@@Base+0x2fc>
   1befc:	ldr	r2, [r0, #4]
   1bf00:	cmp	r2, r3
   1bf04:	beq	1bf0c <test_add_set_defaults@@Base+0xd8>
   1bf08:	bl	12ac0 <__assert_fail@plt+0x34>
   1bf0c:	ldr	r2, [r0]
   1bf10:	adds	r3, r0, r2
   1bf14:	beq	1bf08 <test_add_set_defaults@@Base+0xd4>
   1bf18:	ldr	r2, [r0, r2]
   1bf1c:	sub	r3, r3, r2
   1bf20:	ldrh	r2, [r3]
   1bf24:	cmp	r2, #9
   1bf28:	bls	1c0b8 <test_add_set_defaults@@Base+0x284>
   1bf2c:	ldrh	r1, [r3, #8]
   1bf30:	cmp	r1, #0
   1bf34:	bne	1c0d0 <test_add_set_defaults@@Base+0x29c>
   1bf38:	ldrh	r1, [r3, #6]
   1bf3c:	cmp	r1, #0
   1bf40:	beq	1c0c0 <test_add_set_defaults@@Base+0x28c>
   1bf44:	cmp	r2, #17
   1bf48:	bls	1bf58 <test_add_set_defaults@@Base+0x124>
   1bf4c:	ldrh	r3, [r3, #16]
   1bf50:	cmp	r3, #0
   1bf54:	bne	1c0e0 <test_add_set_defaults@@Base+0x2ac>
   1bf58:	mov	r0, r4
   1bf5c:	bl	1de88 <flatcc_builder_reset@@Base>
   1bf60:	mov	r3, #0
   1bf64:	mov	r2, r3
   1bf68:	ldr	r1, [pc, #436]	; 1c124 <test_add_set_defaults@@Base+0x2f0>
   1bf6c:	mov	r0, r4
   1bf70:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1bf74:	cmp	r0, #0
   1bf78:	bne	1bf88 <test_add_set_defaults@@Base+0x154>
   1bf7c:	mov	r1, #36	; 0x24
   1bf80:	mov	r0, r4
   1bf84:	bl	203cc <flatcc_builder_start_table@@Base>
   1bf88:	ldr	r1, [pc, #408]	; 1c128 <test_add_set_defaults@@Base+0x2f4>
   1bf8c:	mov	r0, r4
   1bf90:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1bf94:	subs	r6, r0, #0
   1bf98:	beq	1bfb0 <test_add_set_defaults@@Base+0x17c>
   1bf9c:	mov	r1, #3
   1bfa0:	mov	r0, r4
   1bfa4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1bfa8:	cmp	r0, #0
   1bfac:	strne	r6, [r0]
   1bfb0:	mov	r3, #2
   1bfb4:	mov	r2, r3
   1bfb8:	mov	r1, r3
   1bfbc:	mov	r0, r4
   1bfc0:	bl	22538 <flatcc_builder_table_add@@Base>
   1bfc4:	mov	r1, #1
   1bfc8:	cmp	r0, #0
   1bfcc:	movne	r3, #100	; 0x64
   1bfd0:	strhne	r3, [r0]
   1bfd4:	mov	r3, #2
   1bfd8:	mov	r2, r3
   1bfdc:	mov	r0, r4
   1bfe0:	bl	22538 <flatcc_builder_table_add@@Base>
   1bfe4:	mov	r1, #6
   1bfe8:	cmp	r0, #0
   1bfec:	movne	r3, #100	; 0x64
   1bff0:	strhne	r3, [r0]
   1bff4:	mov	r3, #1
   1bff8:	mov	r2, r3
   1bffc:	mov	r0, r4
   1c000:	bl	22538 <flatcc_builder_table_add@@Base>
   1c004:	add	r1, r5, #12
   1c008:	mov	r2, #1
   1c00c:	cmp	r0, #0
   1c010:	movne	r3, #8
   1c014:	strbne	r3, [r0]
   1c018:	mov	r0, r4
   1c01c:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c020:	cmp	r0, #0
   1c024:	beq	1c120 <test_add_set_defaults@@Base+0x2ec>
   1c028:	mov	r0, r4
   1c02c:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c030:	mov	r1, r0
   1c034:	mov	r0, r4
   1c038:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c03c:	add	r1, sp, #4
   1c040:	mov	r0, r4
   1c044:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1c048:	cmp	r0, #0
   1c04c:	beq	1bf08 <test_add_set_defaults@@Base+0xd4>
   1c050:	ldr	r3, [pc, #216]	; 1c130 <test_add_set_defaults@@Base+0x2fc>
   1c054:	ldr	r2, [r0, #4]
   1c058:	cmp	r2, r3
   1c05c:	bne	1bf08 <test_add_set_defaults@@Base+0xd4>
   1c060:	ldr	r2, [r0]
   1c064:	adds	r3, r0, r2
   1c068:	beq	1bf08 <test_add_set_defaults@@Base+0xd4>
   1c06c:	ldr	r2, [r0, r2]
   1c070:	sub	r3, r3, r2
   1c074:	ldrh	r2, [r3]
   1c078:	cmp	r2, #9
   1c07c:	bls	1c0f0 <test_add_set_defaults@@Base+0x2bc>
   1c080:	ldrh	r1, [r3, #8]
   1c084:	cmp	r1, #0
   1c088:	beq	1c0f0 <test_add_set_defaults@@Base+0x2bc>
   1c08c:	ldrh	r1, [r3, #6]
   1c090:	cmp	r1, #0
   1c094:	beq	1c100 <test_add_set_defaults@@Base+0x2cc>
   1c098:	cmp	r2, #17
   1c09c:	bls	1c110 <test_add_set_defaults@@Base+0x2dc>
   1c0a0:	ldrh	r3, [r3, #16]
   1c0a4:	cmp	r3, #0
   1c0a8:	movne	r0, #0
   1c0ac:	beq	1c110 <test_add_set_defaults@@Base+0x2dc>
   1c0b0:	add	sp, sp, #8
   1c0b4:	pop	{r4, r5, r6, pc}
   1c0b8:	cmp	r2, #7
   1c0bc:	bhi	1bf38 <test_add_set_defaults@@Base+0x104>
   1c0c0:	ldr	r0, [pc, #108]	; 1c134 <test_add_set_defaults@@Base+0x300>
   1c0c4:	bl	129f0 <puts@plt>
   1c0c8:	mvn	r0, #0
   1c0cc:	b	1c0b0 <test_add_set_defaults@@Base+0x27c>
   1c0d0:	ldr	r0, [pc, #96]	; 1c138 <test_add_set_defaults@@Base+0x304>
   1c0d4:	bl	129f0 <puts@plt>
   1c0d8:	mvn	r0, #0
   1c0dc:	b	1c0b0 <test_add_set_defaults@@Base+0x27c>
   1c0e0:	ldr	r0, [pc, #84]	; 1c13c <test_add_set_defaults@@Base+0x308>
   1c0e4:	bl	129f0 <puts@plt>
   1c0e8:	mvn	r0, #0
   1c0ec:	b	1c0b0 <test_add_set_defaults@@Base+0x27c>
   1c0f0:	ldr	r0, [pc, #72]	; 1c140 <test_add_set_defaults@@Base+0x30c>
   1c0f4:	bl	129f0 <puts@plt>
   1c0f8:	mvn	r0, #0
   1c0fc:	b	1c0b0 <test_add_set_defaults@@Base+0x27c>
   1c100:	ldr	r0, [pc, #60]	; 1c144 <test_add_set_defaults@@Base+0x310>
   1c104:	bl	129f0 <puts@plt>
   1c108:	mvn	r0, #0
   1c10c:	b	1c0b0 <test_add_set_defaults@@Base+0x27c>
   1c110:	ldr	r0, [pc, #48]	; 1c148 <test_add_set_defaults@@Base+0x314>
   1c114:	bl	129f0 <puts@plt>
   1c118:	mvn	r0, #0
   1c11c:	b	1c0b0 <test_add_set_defaults@@Base+0x27c>
   1c120:	bl	13024 <__assert_fail@plt+0x598>
   1c124:	ldrdeq	r5, [r2], -r0
   1c128:	strdeq	r5, [r2], -r8
   1c12c:	andeq	r5, r2, ip, ror #7
   1c130:	movtpl	r4, #61261	; 0xef4d
   1c134:	andeq	r7, r2, r4, asr lr
   1c138:	andeq	r7, r2, r8, lsr #28
   1c13c:	andeq	r7, r2, r4, lsl #29
   1c140:			; <UNDEFINED> instruction: 0x00027eb4
   1c144:	andeq	r7, r2, r8, ror #29
   1c148:	andeq	r7, r2, r8, lsr #30

0001c14c <test_nested_buffer@@Base>:
   1c14c:	push	{r4, r5, r6, lr}
   1c150:	sub	sp, sp, #8
   1c154:	mov	r4, r0
   1c158:	bl	1de88 <flatcc_builder_reset@@Base>
   1c15c:	mov	r3, #0
   1c160:	mov	r0, r4
   1c164:	mov	r2, r3
   1c168:	ldr	r1, [pc, #716]	; 1c43c <test_nested_buffer@@Base+0x2f0>
   1c16c:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1c170:	cmp	r0, #0
   1c174:	bne	1c184 <test_nested_buffer@@Base+0x38>
   1c178:	mov	r1, #36	; 0x24
   1c17c:	mov	r0, r4
   1c180:	bl	203cc <flatcc_builder_start_table@@Base>
   1c184:	ldr	r1, [pc, #692]	; 1c440 <test_nested_buffer@@Base+0x2f4>
   1c188:	mov	r0, r4
   1c18c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1c190:	subs	r5, r0, #0
   1c194:	beq	1c1ac <test_nested_buffer@@Base+0x60>
   1c198:	mov	r1, #3
   1c19c:	mov	r0, r4
   1c1a0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c1a4:	cmp	r0, #0
   1c1a8:	strne	r5, [r0]
   1c1ac:	mov	r3, #0
   1c1b0:	mov	r2, r3
   1c1b4:	ldr	r1, [pc, #640]	; 1c43c <test_nested_buffer@@Base+0x2f0>
   1c1b8:	mov	r0, r4
   1c1bc:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1c1c0:	cmp	r0, #0
   1c1c4:	bne	1c1d4 <test_nested_buffer@@Base+0x88>
   1c1c8:	mov	r1, #36	; 0x24
   1c1cc:	mov	r0, r4
   1c1d0:	bl	203cc <flatcc_builder_start_table@@Base>
   1c1d4:	ldr	r1, [pc, #616]	; 1c444 <test_nested_buffer@@Base+0x2f8>
   1c1d8:	mov	r0, r4
   1c1dc:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1c1e0:	subs	r5, r0, #0
   1c1e4:	beq	1c1fc <test_nested_buffer@@Base+0xb0>
   1c1e8:	mov	r1, #3
   1c1ec:	mov	r0, r4
   1c1f0:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c1f4:	cmp	r0, #0
   1c1f8:	strne	r5, [r0]
   1c1fc:	ldr	r5, [pc, #580]	; 1c448 <test_nested_buffer@@Base+0x2fc>
   1c200:	mov	r2, #1
   1c204:	add	r1, r5, #12
   1c208:	mov	r0, r4
   1c20c:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c210:	cmp	r0, #0
   1c214:	beq	1c424 <test_nested_buffer@@Base+0x2d8>
   1c218:	mov	r0, r4
   1c21c:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c220:	mov	r1, r0
   1c224:	mov	r0, r4
   1c228:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c22c:	subs	r6, r0, #0
   1c230:	beq	1c248 <test_nested_buffer@@Base+0xfc>
   1c234:	mov	r1, #13
   1c238:	mov	r0, r4
   1c23c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c240:	cmp	r0, #0
   1c244:	strne	r6, [r0]
   1c248:	mov	r3, #2
   1c24c:	mov	r2, r3
   1c250:	mov	r1, r3
   1c254:	mov	r0, r4
   1c258:	bl	22538 <flatcc_builder_table_add@@Base>
   1c25c:	add	r1, r5, #12
   1c260:	mov	r2, #1
   1c264:	cmp	r0, #0
   1c268:	movne	r3, #10
   1c26c:	strhne	r3, [r0]
   1c270:	mov	r0, r4
   1c274:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c278:	cmp	r0, #0
   1c27c:	beq	1c424 <test_nested_buffer@@Base+0x2d8>
   1c280:	mov	r0, r4
   1c284:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c288:	mov	r1, r0
   1c28c:	mov	r0, r4
   1c290:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c294:	mov	r0, r4
   1c298:	add	r1, sp, #4
   1c29c:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1c2a0:	ldr	r3, [pc, #420]	; 1c44c <test_nested_buffer@@Base+0x300>
   1c2a4:	ldr	r2, [sp, #4]
   1c2a8:	ldr	r3, [r3]
   1c2ac:	mov	r4, r0
   1c2b0:	mov	r1, r0
   1c2b4:	ldr	r0, [pc, #404]	; 1c450 <test_nested_buffer@@Base+0x304>
   1c2b8:	bl	13458 <_start@@Base+0x148>
   1c2bc:	cmp	r4, #0
   1c2c0:	beq	1c2d4 <test_nested_buffer@@Base+0x188>
   1c2c4:	ldr	r3, [pc, #392]	; 1c454 <test_nested_buffer@@Base+0x308>
   1c2c8:	ldr	r2, [r4, #4]
   1c2cc:	cmp	r2, r3
   1c2d0:	beq	1c2d8 <test_nested_buffer@@Base+0x18c>
   1c2d4:	bl	12d04 <__assert_fail@plt+0x278>
   1c2d8:	ldr	r3, [r4]
   1c2dc:	adds	r5, r4, r3
   1c2e0:	beq	1c2d4 <test_nested_buffer@@Base+0x188>
   1c2e4:	ldr	r4, [r4, r3]
   1c2e8:	sub	r4, r5, r4
   1c2ec:	ldrh	r6, [r4]
   1c2f0:	cmp	r6, #11
   1c2f4:	bhi	1c30c <test_nested_buffer@@Base+0x1c0>
   1c2f8:	ldr	r3, [pc, #344]	; 1c458 <test_nested_buffer@@Base+0x30c>
   1c2fc:	ldr	r2, [pc, #344]	; 1c45c <test_nested_buffer@@Base+0x310>
   1c300:	ldr	r1, [pc, #344]	; 1c460 <test_nested_buffer@@Base+0x314>
   1c304:	ldr	r0, [pc, #344]	; 1c464 <test_nested_buffer@@Base+0x318>
   1c308:	bl	12a8c <__assert_fail@plt>
   1c30c:	ldrh	r0, [r4, #10]
   1c310:	cmp	r0, #0
   1c314:	beq	1c2f8 <test_nested_buffer@@Base+0x1ac>
   1c318:	ldr	r3, [r5, r0]
   1c31c:	add	r0, r5, r0
   1c320:	add	r3, r3, #4
   1c324:	add	r0, r0, r3
   1c328:	ldr	r1, [pc, #272]	; 1c440 <test_nested_buffer@@Base+0x2f4>
   1c32c:	bl	12990 <strcmp@plt>
   1c330:	cmp	r0, #0
   1c334:	bne	1c404 <test_nested_buffer@@Base+0x2b8>
   1c338:	cmp	r6, #31
   1c33c:	bls	1c374 <test_nested_buffer@@Base+0x228>
   1c340:	ldrh	r3, [r4, #30]
   1c344:	cmp	r3, #0
   1c348:	beq	1c370 <test_nested_buffer@@Base+0x224>
   1c34c:	ldr	r2, [r5, r3]
   1c350:	add	r3, r5, r3
   1c354:	add	r2, r2, #4
   1c358:	adds	r0, r3, r2
   1c35c:	beq	1c370 <test_nested_buffer@@Base+0x224>
   1c360:	ldr	r1, [pc, #236]	; 1c454 <test_nested_buffer@@Base+0x308>
   1c364:	ldr	ip, [r0, #4]
   1c368:	cmp	ip, r1
   1c36c:	beq	1c3e0 <test_nested_buffer@@Base+0x294>
   1c370:	mov	r0, #0
   1c374:	ldrh	r3, [r4, #8]
   1c378:	cmp	r3, #0
   1c37c:	beq	1c3f4 <test_nested_buffer@@Base+0x2a8>
   1c380:	ldrsh	r3, [r5, r3]
   1c384:	cmp	r3, #10
   1c388:	bne	1c3f4 <test_nested_buffer@@Base+0x2a8>
   1c38c:	cmp	r0, #0
   1c390:	beq	1c2d4 <test_nested_buffer@@Base+0x188>
   1c394:	ldr	r3, [r0]
   1c398:	sub	r3, r0, r3
   1c39c:	ldrh	r2, [r3]
   1c3a0:	cmp	r2, #11
   1c3a4:	bls	1c2f8 <test_nested_buffer@@Base+0x1ac>
   1c3a8:	ldrh	r2, [r3, #10]
   1c3ac:	cmp	r2, #0
   1c3b0:	beq	1c2f8 <test_nested_buffer@@Base+0x1ac>
   1c3b4:	ldr	r3, [r0, r2]
   1c3b8:	add	r0, r0, r2
   1c3bc:	add	r3, r3, #4
   1c3c0:	adds	r0, r0, r3
   1c3c4:	beq	1c428 <test_nested_buffer@@Base+0x2dc>
   1c3c8:	ldr	r1, [pc, #116]	; 1c444 <test_nested_buffer@@Base+0x2f8>
   1c3cc:	bl	12990 <strcmp@plt>
   1c3d0:	cmp	r0, #0
   1c3d4:	bne	1c414 <test_nested_buffer@@Base+0x2c8>
   1c3d8:	add	sp, sp, #8
   1c3dc:	pop	{r4, r5, r6, pc}
   1c3e0:	ldr	r3, [r3, r2]
   1c3e4:	add	r0, r0, r3
   1c3e8:	ldrh	r3, [r4, #8]
   1c3ec:	cmp	r3, #0
   1c3f0:	bne	1c380 <test_nested_buffer@@Base+0x234>
   1c3f4:	ldr	r0, [pc, #108]	; 1c468 <test_nested_buffer@@Base+0x31c>
   1c3f8:	bl	129f0 <puts@plt>
   1c3fc:	mvn	r0, #0
   1c400:	b	1c3d8 <test_nested_buffer@@Base+0x28c>
   1c404:	ldr	r0, [pc, #96]	; 1c46c <test_nested_buffer@@Base+0x320>
   1c408:	bl	129f0 <puts@plt>
   1c40c:	mvn	r0, #0
   1c410:	b	1c3d8 <test_nested_buffer@@Base+0x28c>
   1c414:	ldr	r0, [pc, #84]	; 1c470 <test_nested_buffer@@Base+0x324>
   1c418:	bl	129f0 <puts@plt>
   1c41c:	mvn	r0, #0
   1c420:	b	1c3d8 <test_nested_buffer@@Base+0x28c>
   1c424:	bl	13024 <__assert_fail@plt+0x598>
   1c428:	ldr	r3, [pc, #68]	; 1c474 <test_nested_buffer@@Base+0x328>
   1c42c:	ldr	r2, [pc, #68]	; 1c478 <test_nested_buffer@@Base+0x32c>
   1c430:	ldr	r1, [pc, #68]	; 1c47c <test_nested_buffer@@Base+0x330>
   1c434:	ldr	r0, [pc, #68]	; 1c480 <test_nested_buffer@@Base+0x334>
   1c438:	bl	12a8c <__assert_fail@plt>
   1c43c:	ldrdeq	r5, [r2], -r0
   1c440:	strdeq	r5, [r2], -r8
   1c444:	andeq	r7, r2, r0, ror #30
   1c448:	andeq	r5, r2, ip, ror #7
   1c44c:	andeq	sl, r3, r0, ror r0
   1c450:	andeq	r7, r2, r0, ror pc
   1c454:	movtpl	r4, #61261	; 0xef4d
   1c458:	andeq	r5, r2, r0, lsl #4
   1c45c:			; <UNDEFINED> instruction: 0x000002bb
   1c460:	andeq	r5, r2, r4, asr #13
   1c464:	strdeq	r5, [r2], -r0
   1c468:	andeq	r7, r2, r0, lsr #31
   1c46c:	andeq	r7, r2, r4, lsl #31
   1c470:	andeq	r7, r2, r0, ror #31
   1c474:	andeq	r5, r2, r0, lsr #12
   1c478:	andeq	r0, r0, ip, lsl #17
   1c47c:	andeq	r6, r2, r4, lsl r3
   1c480:	andeq	r7, r2, r4, asr #31

0001c484 <test_nested_buffer_first@@Base>:
   1c484:	push	{r4, r5, r6, lr}
   1c488:	sub	sp, sp, #8
   1c48c:	mov	r4, r0
   1c490:	bl	1de88 <flatcc_builder_reset@@Base>
   1c494:	mov	r3, #0
   1c498:	mov	r0, r4
   1c49c:	mov	r2, r3
   1c4a0:	ldr	r1, [pc, #716]	; 1c774 <test_nested_buffer_first@@Base+0x2f0>
   1c4a4:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1c4a8:	cmp	r0, #0
   1c4ac:	bne	1c4bc <test_nested_buffer_first@@Base+0x38>
   1c4b0:	mov	r1, #36	; 0x24
   1c4b4:	mov	r0, r4
   1c4b8:	bl	203cc <flatcc_builder_start_table@@Base>
   1c4bc:	mov	r3, #0
   1c4c0:	mov	r2, r3
   1c4c4:	ldr	r1, [pc, #680]	; 1c774 <test_nested_buffer_first@@Base+0x2f0>
   1c4c8:	mov	r0, r4
   1c4cc:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1c4d0:	cmp	r0, #0
   1c4d4:	bne	1c4e4 <test_nested_buffer_first@@Base+0x60>
   1c4d8:	mov	r1, #36	; 0x24
   1c4dc:	mov	r0, r4
   1c4e0:	bl	203cc <flatcc_builder_start_table@@Base>
   1c4e4:	ldr	r1, [pc, #652]	; 1c778 <test_nested_buffer_first@@Base+0x2f4>
   1c4e8:	mov	r0, r4
   1c4ec:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1c4f0:	subs	r5, r0, #0
   1c4f4:	beq	1c50c <test_nested_buffer_first@@Base+0x88>
   1c4f8:	mov	r1, #3
   1c4fc:	mov	r0, r4
   1c500:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c504:	cmp	r0, #0
   1c508:	strne	r5, [r0]
   1c50c:	ldr	r5, [pc, #616]	; 1c77c <test_nested_buffer_first@@Base+0x2f8>
   1c510:	mov	r2, #1
   1c514:	add	r1, r5, #12
   1c518:	mov	r0, r4
   1c51c:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c520:	cmp	r0, #0
   1c524:	beq	1c75c <test_nested_buffer_first@@Base+0x2d8>
   1c528:	mov	r0, r4
   1c52c:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c530:	mov	r1, r0
   1c534:	mov	r0, r4
   1c538:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c53c:	subs	r6, r0, #0
   1c540:	beq	1c558 <test_nested_buffer_first@@Base+0xd4>
   1c544:	mov	r1, #13
   1c548:	mov	r0, r4
   1c54c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c550:	cmp	r0, #0
   1c554:	strne	r6, [r0]
   1c558:	mov	r3, #2
   1c55c:	mov	r1, r3
   1c560:	mov	r2, r3
   1c564:	mov	r0, r4
   1c568:	bl	22538 <flatcc_builder_table_add@@Base>
   1c56c:	ldr	r1, [pc, #524]	; 1c780 <test_nested_buffer_first@@Base+0x2fc>
   1c570:	cmp	r0, #0
   1c574:	movne	r3, #10
   1c578:	strhne	r3, [r0]
   1c57c:	mov	r0, r4
   1c580:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1c584:	subs	r6, r0, #0
   1c588:	beq	1c5a0 <test_nested_buffer_first@@Base+0x11c>
   1c58c:	mov	r1, #3
   1c590:	mov	r0, r4
   1c594:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c598:	cmp	r0, #0
   1c59c:	strne	r6, [r0]
   1c5a0:	add	r1, r5, #12
   1c5a4:	mov	r2, #1
   1c5a8:	mov	r0, r4
   1c5ac:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c5b0:	cmp	r0, #0
   1c5b4:	beq	1c75c <test_nested_buffer_first@@Base+0x2d8>
   1c5b8:	mov	r0, r4
   1c5bc:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c5c0:	mov	r1, r0
   1c5c4:	mov	r0, r4
   1c5c8:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c5cc:	mov	r0, r4
   1c5d0:	add	r1, sp, #4
   1c5d4:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1c5d8:	ldr	r3, [pc, #420]	; 1c784 <test_nested_buffer_first@@Base+0x300>
   1c5dc:	ldr	r2, [sp, #4]
   1c5e0:	ldr	r3, [r3]
   1c5e4:	mov	r4, r0
   1c5e8:	mov	r1, r0
   1c5ec:	ldr	r0, [pc, #404]	; 1c788 <test_nested_buffer_first@@Base+0x304>
   1c5f0:	bl	13458 <_start@@Base+0x148>
   1c5f4:	cmp	r4, #0
   1c5f8:	beq	1c60c <test_nested_buffer_first@@Base+0x188>
   1c5fc:	ldr	r3, [pc, #392]	; 1c78c <test_nested_buffer_first@@Base+0x308>
   1c600:	ldr	r2, [r4, #4]
   1c604:	cmp	r2, r3
   1c608:	beq	1c610 <test_nested_buffer_first@@Base+0x18c>
   1c60c:	bl	12d04 <__assert_fail@plt+0x278>
   1c610:	ldr	r3, [r4]
   1c614:	adds	r5, r4, r3
   1c618:	beq	1c60c <test_nested_buffer_first@@Base+0x188>
   1c61c:	ldr	r4, [r4, r3]
   1c620:	sub	r4, r5, r4
   1c624:	ldrh	r6, [r4]
   1c628:	cmp	r6, #11
   1c62c:	bhi	1c644 <test_nested_buffer_first@@Base+0x1c0>
   1c630:	ldr	r3, [pc, #344]	; 1c790 <test_nested_buffer_first@@Base+0x30c>
   1c634:	ldr	r2, [pc, #344]	; 1c794 <test_nested_buffer_first@@Base+0x310>
   1c638:	ldr	r1, [pc, #344]	; 1c798 <test_nested_buffer_first@@Base+0x314>
   1c63c:	ldr	r0, [pc, #344]	; 1c79c <test_nested_buffer_first@@Base+0x318>
   1c640:	bl	12a8c <__assert_fail@plt>
   1c644:	ldrh	r0, [r4, #10]
   1c648:	cmp	r0, #0
   1c64c:	beq	1c630 <test_nested_buffer_first@@Base+0x1ac>
   1c650:	ldr	r3, [r5, r0]
   1c654:	add	r0, r5, r0
   1c658:	add	r3, r3, #4
   1c65c:	add	r0, r0, r3
   1c660:	ldr	r1, [pc, #280]	; 1c780 <test_nested_buffer_first@@Base+0x2fc>
   1c664:	bl	12990 <strcmp@plt>
   1c668:	cmp	r0, #0
   1c66c:	bne	1c73c <test_nested_buffer_first@@Base+0x2b8>
   1c670:	cmp	r6, #31
   1c674:	bls	1c6ac <test_nested_buffer_first@@Base+0x228>
   1c678:	ldrh	r3, [r4, #30]
   1c67c:	cmp	r3, #0
   1c680:	beq	1c6a8 <test_nested_buffer_first@@Base+0x224>
   1c684:	ldr	r2, [r5, r3]
   1c688:	add	r3, r5, r3
   1c68c:	add	r2, r2, #4
   1c690:	adds	r0, r3, r2
   1c694:	beq	1c6a8 <test_nested_buffer_first@@Base+0x224>
   1c698:	ldr	r1, [pc, #236]	; 1c78c <test_nested_buffer_first@@Base+0x308>
   1c69c:	ldr	ip, [r0, #4]
   1c6a0:	cmp	ip, r1
   1c6a4:	beq	1c718 <test_nested_buffer_first@@Base+0x294>
   1c6a8:	mov	r0, #0
   1c6ac:	ldrh	r3, [r4, #8]
   1c6b0:	cmp	r3, #0
   1c6b4:	beq	1c72c <test_nested_buffer_first@@Base+0x2a8>
   1c6b8:	ldrsh	r3, [r5, r3]
   1c6bc:	cmp	r3, #10
   1c6c0:	bne	1c72c <test_nested_buffer_first@@Base+0x2a8>
   1c6c4:	cmp	r0, #0
   1c6c8:	beq	1c60c <test_nested_buffer_first@@Base+0x188>
   1c6cc:	ldr	r3, [r0]
   1c6d0:	sub	r3, r0, r3
   1c6d4:	ldrh	r2, [r3]
   1c6d8:	cmp	r2, #11
   1c6dc:	bls	1c630 <test_nested_buffer_first@@Base+0x1ac>
   1c6e0:	ldrh	r2, [r3, #10]
   1c6e4:	cmp	r2, #0
   1c6e8:	beq	1c630 <test_nested_buffer_first@@Base+0x1ac>
   1c6ec:	ldr	r3, [r0, r2]
   1c6f0:	add	r0, r0, r2
   1c6f4:	add	r3, r3, #4
   1c6f8:	adds	r0, r0, r3
   1c6fc:	beq	1c760 <test_nested_buffer_first@@Base+0x2dc>
   1c700:	ldr	r1, [pc, #112]	; 1c778 <test_nested_buffer_first@@Base+0x2f4>
   1c704:	bl	12990 <strcmp@plt>
   1c708:	cmp	r0, #0
   1c70c:	bne	1c74c <test_nested_buffer_first@@Base+0x2c8>
   1c710:	add	sp, sp, #8
   1c714:	pop	{r4, r5, r6, pc}
   1c718:	ldr	r3, [r3, r2]
   1c71c:	add	r0, r0, r3
   1c720:	ldrh	r3, [r4, #8]
   1c724:	cmp	r3, #0
   1c728:	bne	1c6b8 <test_nested_buffer_first@@Base+0x234>
   1c72c:	ldr	r0, [pc, #108]	; 1c7a0 <test_nested_buffer_first@@Base+0x31c>
   1c730:	bl	129f0 <puts@plt>
   1c734:	mvn	r0, #0
   1c738:	b	1c710 <test_nested_buffer_first@@Base+0x28c>
   1c73c:	ldr	r0, [pc, #96]	; 1c7a4 <test_nested_buffer_first@@Base+0x320>
   1c740:	bl	129f0 <puts@plt>
   1c744:	mvn	r0, #0
   1c748:	b	1c710 <test_nested_buffer_first@@Base+0x28c>
   1c74c:	ldr	r0, [pc, #84]	; 1c7a8 <test_nested_buffer_first@@Base+0x324>
   1c750:	bl	129f0 <puts@plt>
   1c754:	mvn	r0, #0
   1c758:	b	1c710 <test_nested_buffer_first@@Base+0x28c>
   1c75c:	bl	13024 <__assert_fail@plt+0x598>
   1c760:	ldr	r3, [pc, #68]	; 1c7ac <test_nested_buffer_first@@Base+0x328>
   1c764:	ldr	r2, [pc, #68]	; 1c7b0 <test_nested_buffer_first@@Base+0x32c>
   1c768:	ldr	r1, [pc, #68]	; 1c7b4 <test_nested_buffer_first@@Base+0x330>
   1c76c:	ldr	r0, [pc, #68]	; 1c7b8 <test_nested_buffer_first@@Base+0x334>
   1c770:	bl	12a8c <__assert_fail@plt>
   1c774:	ldrdeq	r5, [r2], -r0
   1c778:	andeq	r7, r2, r0, ror #30
   1c77c:	andeq	r5, r2, ip, ror #7
   1c780:	strdeq	r5, [r2], -r8
   1c784:	andeq	sl, r3, r0, ror r0
   1c788:	andeq	r7, r2, r0, ror pc
   1c78c:	movtpl	r4, #61261	; 0xef4d
   1c790:	andeq	r5, r2, r0, lsl #4
   1c794:			; <UNDEFINED> instruction: 0x000002bb
   1c798:	andeq	r5, r2, r4, asr #13
   1c79c:	strdeq	r5, [r2], -r0
   1c7a0:	andeq	r7, r2, r0, lsr #31
   1c7a4:	andeq	r7, r2, r4, lsl #31
   1c7a8:	andeq	r7, r2, r0, ror #31
   1c7ac:	andeq	r5, r2, r4, lsr r6
   1c7b0:	andeq	r0, r0, r1, asr #17
   1c7b4:	andeq	r6, r2, r4, lsl r3
   1c7b8:	andeq	r7, r2, r4, asr #31

0001c7bc <test_nested_buffer_using_nest@@Base>:
   1c7bc:	push	{r4, r5, r6, r7, lr}
   1c7c0:	sub	sp, sp, #1040	; 0x410
   1c7c4:	sub	sp, sp, #4
   1c7c8:	mov	r4, r0
   1c7cc:	bl	1de88 <flatcc_builder_reset@@Base>
   1c7d0:	mov	r3, #0
   1c7d4:	mov	r0, r4
   1c7d8:	mov	r2, r3
   1c7dc:	ldr	r1, [pc, #888]	; 1cb5c <test_nested_buffer_using_nest@@Base+0x3a0>
   1c7e0:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1c7e4:	cmp	r0, #0
   1c7e8:	bne	1c7f8 <test_nested_buffer_using_nest@@Base+0x3c>
   1c7ec:	mov	r1, #36	; 0x24
   1c7f0:	mov	r0, r4
   1c7f4:	bl	203cc <flatcc_builder_start_table@@Base>
   1c7f8:	ldr	r1, [pc, #864]	; 1cb60 <test_nested_buffer_using_nest@@Base+0x3a4>
   1c7fc:	mov	r0, r4
   1c800:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1c804:	subs	r5, r0, #0
   1c808:	beq	1c820 <test_nested_buffer_using_nest@@Base+0x64>
   1c80c:	mov	r1, #3
   1c810:	mov	r0, r4
   1c814:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c818:	cmp	r0, #0
   1c81c:	strne	r5, [r0]
   1c820:	mov	r3, #2
   1c824:	mov	r2, r3
   1c828:	mov	r1, #1
   1c82c:	mov	r0, r4
   1c830:	bl	22538 <flatcc_builder_table_add@@Base>
   1c834:	ldr	r5, [pc, #808]	; 1cb64 <test_nested_buffer_using_nest@@Base+0x3a8>
   1c838:	mov	r2, #1
   1c83c:	add	r1, r5, #12
   1c840:	cmp	r0, #0
   1c844:	movne	r3, #42	; 0x2a
   1c848:	strhne	r3, [r0]
   1c84c:	mov	r0, r4
   1c850:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c854:	cmp	r0, #0
   1c858:	beq	1cb44 <test_nested_buffer_using_nest@@Base+0x388>
   1c85c:	mov	r0, r4
   1c860:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c864:	mov	r1, r0
   1c868:	mov	r0, r4
   1c86c:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c870:	mov	r0, r4
   1c874:	bl	22e20 <flatcc_builder_get_buffer_size@@Base>
   1c878:	add	r1, sp, #16
   1c87c:	mov	r2, #1024	; 0x400
   1c880:	mov	r6, r0
   1c884:	mov	r0, r4
   1c888:	bl	22eec <flatcc_builder_copy_buffer@@Base>
   1c88c:	cmp	r0, #0
   1c890:	beq	1cb34 <test_nested_buffer_using_nest@@Base+0x378>
   1c894:	mov	r0, r4
   1c898:	bl	1de88 <flatcc_builder_reset@@Base>
   1c89c:	mov	r3, #0
   1c8a0:	mov	r2, r3
   1c8a4:	ldr	r1, [pc, #688]	; 1cb5c <test_nested_buffer_using_nest@@Base+0x3a0>
   1c8a8:	mov	r0, r4
   1c8ac:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1c8b0:	cmp	r0, #0
   1c8b4:	bne	1c8c4 <test_nested_buffer_using_nest@@Base+0x108>
   1c8b8:	mov	r1, #36	; 0x24
   1c8bc:	mov	r0, r4
   1c8c0:	bl	203cc <flatcc_builder_start_table@@Base>
   1c8c4:	mvn	r1, #0
   1c8c8:	mov	r3, #8
   1c8cc:	mov	r2, r6
   1c8d0:	str	r1, [sp, #4]
   1c8d4:	str	r3, [sp]
   1c8d8:	add	r1, sp, #16
   1c8dc:	mov	r3, #1
   1c8e0:	mov	r0, r4
   1c8e4:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1c8e8:	subs	r6, r0, #0
   1c8ec:	beq	1c904 <test_nested_buffer_using_nest@@Base+0x148>
   1c8f0:	mov	r1, #13
   1c8f4:	mov	r0, r4
   1c8f8:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c8fc:	cmp	r0, #0
   1c900:	strne	r6, [r0]
   1c904:	mov	r3, #2
   1c908:	mov	r1, r3
   1c90c:	mov	r2, r3
   1c910:	mov	r0, r4
   1c914:	bl	22538 <flatcc_builder_table_add@@Base>
   1c918:	ldr	r1, [pc, #584]	; 1cb68 <test_nested_buffer_using_nest@@Base+0x3ac>
   1c91c:	cmp	r0, #0
   1c920:	movne	r3, #10
   1c924:	strhne	r3, [r0]
   1c928:	mov	r0, r4
   1c92c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1c930:	subs	r6, r0, #0
   1c934:	beq	1c94c <test_nested_buffer_using_nest@@Base+0x190>
   1c938:	mov	r1, #3
   1c93c:	mov	r0, r4
   1c940:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1c944:	cmp	r0, #0
   1c948:	strne	r6, [r0]
   1c94c:	add	r1, r5, #12
   1c950:	mov	r2, #1
   1c954:	mov	r0, r4
   1c958:	bl	20d74 <flatcc_builder_check_required@@Base>
   1c95c:	cmp	r0, #0
   1c960:	beq	1cb44 <test_nested_buffer_using_nest@@Base+0x388>
   1c964:	mov	r0, r4
   1c968:	bl	20e0c <flatcc_builder_end_table@@Base>
   1c96c:	mov	r1, r0
   1c970:	mov	r0, r4
   1c974:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1c978:	add	r1, sp, #12
   1c97c:	mov	r0, r4
   1c980:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1c984:	ldr	r3, [pc, #480]	; 1cb6c <test_nested_buffer_using_nest@@Base+0x3b0>
   1c988:	ldr	r2, [sp, #12]
   1c98c:	ldr	r3, [r3]
   1c990:	mov	r4, r0
   1c994:	mov	r1, r0
   1c998:	ldr	r0, [pc, #464]	; 1cb70 <test_nested_buffer_using_nest@@Base+0x3b4>
   1c99c:	bl	13458 <_start@@Base+0x148>
   1c9a0:	cmp	r4, #0
   1c9a4:	beq	1c9b8 <test_nested_buffer_using_nest@@Base+0x1fc>
   1c9a8:	ldr	r3, [pc, #452]	; 1cb74 <test_nested_buffer_using_nest@@Base+0x3b8>
   1c9ac:	ldr	r2, [r4, #4]
   1c9b0:	cmp	r2, r3
   1c9b4:	beq	1c9bc <test_nested_buffer_using_nest@@Base+0x200>
   1c9b8:	bl	12d04 <__assert_fail@plt+0x278>
   1c9bc:	ldr	r3, [r4]
   1c9c0:	adds	r6, r4, r3
   1c9c4:	beq	1c9b8 <test_nested_buffer_using_nest@@Base+0x1fc>
   1c9c8:	ldr	r5, [r4, r3]
   1c9cc:	sub	r5, r6, r5
   1c9d0:	ldrh	r7, [r5]
   1c9d4:	cmp	r7, #11
   1c9d8:	bhi	1c9f0 <test_nested_buffer_using_nest@@Base+0x234>
   1c9dc:	ldr	r3, [pc, #404]	; 1cb78 <test_nested_buffer_using_nest@@Base+0x3bc>
   1c9e0:	ldr	r2, [pc, #404]	; 1cb7c <test_nested_buffer_using_nest@@Base+0x3c0>
   1c9e4:	ldr	r1, [pc, #404]	; 1cb80 <test_nested_buffer_using_nest@@Base+0x3c4>
   1c9e8:	ldr	r0, [pc, #404]	; 1cb84 <test_nested_buffer_using_nest@@Base+0x3c8>
   1c9ec:	bl	12a8c <__assert_fail@plt>
   1c9f0:	ldrh	r0, [r5, #10]
   1c9f4:	cmp	r0, #0
   1c9f8:	beq	1c9dc <test_nested_buffer_using_nest@@Base+0x220>
   1c9fc:	ldr	r3, [r6, r0]
   1ca00:	add	r0, r6, r0
   1ca04:	add	r3, r3, #4
   1ca08:	add	r0, r0, r3
   1ca0c:	ldr	r1, [pc, #340]	; 1cb68 <test_nested_buffer_using_nest@@Base+0x3ac>
   1ca10:	bl	12990 <strcmp@plt>
   1ca14:	subs	r4, r0, #0
   1ca18:	bne	1cb04 <test_nested_buffer_using_nest@@Base+0x348>
   1ca1c:	cmp	r7, #31
   1ca20:	bls	1ca58 <test_nested_buffer_using_nest@@Base+0x29c>
   1ca24:	ldrh	r3, [r5, #30]
   1ca28:	cmp	r3, #0
   1ca2c:	beq	1ca54 <test_nested_buffer_using_nest@@Base+0x298>
   1ca30:	ldr	r2, [r6, r3]
   1ca34:	add	r3, r6, r3
   1ca38:	add	r2, r2, #4
   1ca3c:	adds	r4, r3, r2
   1ca40:	beq	1ca54 <test_nested_buffer_using_nest@@Base+0x298>
   1ca44:	ldr	r1, [pc, #296]	; 1cb74 <test_nested_buffer_using_nest@@Base+0x3b8>
   1ca48:	ldr	r0, [r4, #4]
   1ca4c:	cmp	r0, r1
   1ca50:	beq	1cae0 <test_nested_buffer_using_nest@@Base+0x324>
   1ca54:	mov	r4, #0
   1ca58:	ldrh	r3, [r5, #8]
   1ca5c:	cmp	r3, #0
   1ca60:	beq	1caf4 <test_nested_buffer_using_nest@@Base+0x338>
   1ca64:	ldrsh	r3, [r6, r3]
   1ca68:	cmp	r3, #10
   1ca6c:	bne	1caf4 <test_nested_buffer_using_nest@@Base+0x338>
   1ca70:	cmp	r4, #0
   1ca74:	beq	1c9b8 <test_nested_buffer_using_nest@@Base+0x1fc>
   1ca78:	ldr	r5, [r4]
   1ca7c:	sub	r5, r4, r5
   1ca80:	ldrh	r3, [r5]
   1ca84:	cmp	r3, #11
   1ca88:	bls	1c9dc <test_nested_buffer_using_nest@@Base+0x220>
   1ca8c:	ldrh	r0, [r5, #10]
   1ca90:	cmp	r0, #0
   1ca94:	beq	1c9dc <test_nested_buffer_using_nest@@Base+0x220>
   1ca98:	ldr	r3, [r4, r0]
   1ca9c:	add	r0, r4, r0
   1caa0:	add	r3, r3, #4
   1caa4:	adds	r0, r0, r3
   1caa8:	beq	1cb48 <test_nested_buffer_using_nest@@Base+0x38c>
   1caac:	ldr	r1, [pc, #172]	; 1cb60 <test_nested_buffer_using_nest@@Base+0x3a4>
   1cab0:	bl	12990 <strcmp@plt>
   1cab4:	cmp	r0, #0
   1cab8:	bne	1cb24 <test_nested_buffer_using_nest@@Base+0x368>
   1cabc:	ldrh	r3, [r5, #6]
   1cac0:	cmp	r3, #0
   1cac4:	beq	1cb14 <test_nested_buffer_using_nest@@Base+0x358>
   1cac8:	ldrsh	r3, [r4, r3]
   1cacc:	cmp	r3, #42	; 0x2a
   1cad0:	bne	1cb14 <test_nested_buffer_using_nest@@Base+0x358>
   1cad4:	add	sp, sp, #1040	; 0x410
   1cad8:	add	sp, sp, #4
   1cadc:	pop	{r4, r5, r6, r7, pc}
   1cae0:	ldr	r0, [r3, r2]
   1cae4:	ldrh	r3, [r5, #8]
   1cae8:	add	r4, r4, r0
   1caec:	cmp	r3, #0
   1caf0:	bne	1ca64 <test_nested_buffer_using_nest@@Base+0x2a8>
   1caf4:	ldr	r0, [pc, #140]	; 1cb88 <test_nested_buffer_using_nest@@Base+0x3cc>
   1caf8:	bl	129f0 <puts@plt>
   1cafc:	mvn	r0, #0
   1cb00:	b	1cad4 <test_nested_buffer_using_nest@@Base+0x318>
   1cb04:	ldr	r0, [pc, #128]	; 1cb8c <test_nested_buffer_using_nest@@Base+0x3d0>
   1cb08:	bl	129f0 <puts@plt>
   1cb0c:	mvn	r0, #0
   1cb10:	b	1cad4 <test_nested_buffer_using_nest@@Base+0x318>
   1cb14:	ldr	r0, [pc, #116]	; 1cb90 <test_nested_buffer_using_nest@@Base+0x3d4>
   1cb18:	bl	129f0 <puts@plt>
   1cb1c:	mvn	r0, #0
   1cb20:	b	1cad4 <test_nested_buffer_using_nest@@Base+0x318>
   1cb24:	ldr	r0, [pc, #104]	; 1cb94 <test_nested_buffer_using_nest@@Base+0x3d8>
   1cb28:	bl	129f0 <puts@plt>
   1cb2c:	mvn	r0, #0
   1cb30:	b	1cad4 <test_nested_buffer_using_nest@@Base+0x318>
   1cb34:	ldr	r0, [pc, #92]	; 1cb98 <test_nested_buffer_using_nest@@Base+0x3dc>
   1cb38:	bl	129f0 <puts@plt>
   1cb3c:	mvn	r0, #0
   1cb40:	b	1cad4 <test_nested_buffer_using_nest@@Base+0x318>
   1cb44:	bl	13024 <__assert_fail@plt+0x598>
   1cb48:	ldr	r3, [pc, #76]	; 1cb9c <test_nested_buffer_using_nest@@Base+0x3e0>
   1cb4c:	ldr	r2, [pc, #76]	; 1cba0 <test_nested_buffer_using_nest@@Base+0x3e4>
   1cb50:	ldr	r1, [pc, #76]	; 1cba4 <test_nested_buffer_using_nest@@Base+0x3e8>
   1cb54:	ldr	r0, [pc, #76]	; 1cba8 <test_nested_buffer_using_nest@@Base+0x3ec>
   1cb58:	bl	12a8c <__assert_fail@plt>
   1cb5c:	ldrdeq	r5, [r2], -r0
   1cb60:	andeq	r7, r2, r0, ror #30
   1cb64:	andeq	r5, r2, ip, ror #7
   1cb68:	strdeq	r5, [r2], -r8
   1cb6c:	andeq	sl, r3, r0, ror r0
   1cb70:	andeq	r8, r2, ip, lsl r0
   1cb74:	movtpl	r4, #61261	; 0xef4d
   1cb78:	andeq	r5, r2, r0, lsl #4
   1cb7c:			; <UNDEFINED> instruction: 0x000002bb
   1cb80:	andeq	r5, r2, r4, asr #13
   1cb84:	strdeq	r5, [r2], -r0
   1cb88:	andeq	r7, r2, r0, lsr #31
   1cb8c:	andeq	r7, r2, r4, lsl #31
   1cb90:	andeq	r8, r2, r0, asr #32
   1cb94:	andeq	r7, r2, r0, ror #31
   1cb98:	andeq	r8, r2, r0
   1cb9c:	andeq	r5, r2, r0, asr r6
   1cba0:	strdeq	r0, [r0], -sl
   1cba4:	andeq	r6, r2, r4, lsl r3
   1cba8:	andeq	r7, r2, r4, asr #31

0001cbac <verify_include@@Base>:
   1cbac:	mov	r0, #0
   1cbb0:	bx	lr

0001cbb4 <test_struct_buffer@@Base>:
   1cbb4:	push	{r4, r5, r6, r7, lr}
   1cbb8:	mov	r4, r0
   1cbbc:	sub	sp, sp, #116	; 0x74
   1cbc0:	bl	1de88 <flatcc_builder_reset@@Base>
   1cbc4:	mov	r0, r4
   1cbc8:	mov	r2, #16
   1cbcc:	mov	r1, #32
   1cbd0:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1cbd4:	cmp	r0, #0
   1cbd8:	moveq	r3, r0
   1cbdc:	beq	1cc28 <test_struct_buffer@@Base+0x74>
   1cbe0:	ldr	r6, [pc, #444]	; 1cda4 <test_struct_buffer@@Base+0x1f0>
   1cbe4:	ldr	r7, [pc, #444]	; 1cda8 <test_struct_buffer@@Base+0x1f4>
   1cbe8:	mov	r2, #1065353216	; 0x3f800000
   1cbec:	mov	r3, #1073741824	; 0x40000000
   1cbf0:	ldr	ip, [pc, #436]	; 1cdac <test_struct_buffer@@Base+0x1f8>
   1cbf4:	ldr	r1, [pc, #436]	; 1cdb0 <test_struct_buffer@@Base+0x1fc>
   1cbf8:	str	r2, [r0]
   1cbfc:	str	r3, [r0, #4]
   1cc00:	mov	r2, #8
   1cc04:	mvn	r3, #16
   1cc08:	strb	r3, [r0, #28]
   1cc0c:	str	ip, [r0, #8]
   1cc10:	strd	r6, [r0, #16]
   1cc14:	strh	r1, [r0, #26]
   1cc18:	strb	r2, [r0, #24]
   1cc1c:	mov	r0, r4
   1cc20:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1cc24:	mov	r3, r0
   1cc28:	mov	r2, #0
   1cc2c:	mov	r1, #16
   1cc30:	mov	r0, r4
   1cc34:	stm	sp, {r1, r2}
   1cc38:	ldr	r1, [pc, #372]	; 1cdb4 <test_struct_buffer@@Base+0x200>
   1cc3c:	bl	1e3e4 <flatcc_builder_create_buffer@@Base>
   1cc40:	mov	r0, r4
   1cc44:	bl	22e20 <flatcc_builder_get_buffer_size@@Base>
   1cc48:	cmp	r0, #48	; 0x30
   1cc4c:	bne	1cd7c <test_struct_buffer@@Base+0x1c8>
   1cc50:	mov	r1, r0
   1cc54:	ldr	r0, [pc, #348]	; 1cdb8 <test_struct_buffer@@Base+0x204>
   1cc58:	bl	1299c <printf@plt>
   1cc5c:	mov	r0, r4
   1cc60:	bl	230c4 <flatcc_builder_get_emit_context@@Base>
   1cc64:	ldr	r5, [r0, #24]
   1cc68:	cmp	r5, #48	; 0x30
   1cc6c:	bne	1cd68 <test_struct_buffer@@Base+0x1b4>
   1cc70:	mov	r0, r4
   1cc74:	add	r1, sp, #12
   1cc78:	mov	r2, #100	; 0x64
   1cc7c:	bl	22eec <flatcc_builder_copy_buffer@@Base>
   1cc80:	cmp	r0, #0
   1cc84:	beq	1cd58 <test_struct_buffer@@Base+0x1a4>
   1cc88:	ldr	r3, [pc, #300]	; 1cdbc <test_struct_buffer@@Base+0x208>
   1cc8c:	mov	r2, r5
   1cc90:	add	r1, sp, #12
   1cc94:	ldr	r3, [r3]
   1cc98:	ldr	r0, [pc, #288]	; 1cdc0 <test_struct_buffer@@Base+0x20c>
   1cc9c:	bl	13458 <_start@@Base+0x148>
   1cca0:	ldr	r3, [pc, #284]	; 1cdc4 <test_struct_buffer@@Base+0x210>
   1cca4:	ldr	r2, [sp, #16]
   1cca8:	cmp	r2, r3
   1ccac:	beq	1ccc4 <test_struct_buffer@@Base+0x110>
   1ccb0:	ldr	r0, [pc, #272]	; 1cdc8 <test_struct_buffer@@Base+0x214>
   1ccb4:	bl	129f0 <puts@plt>
   1ccb8:	mvn	r0, #0
   1ccbc:	add	sp, sp, #116	; 0x74
   1ccc0:	pop	{r4, r5, r6, r7, pc}
   1ccc4:	ldr	r3, [sp, #12]
   1ccc8:	add	r2, sp, #12
   1cccc:	add	r3, r2, r3
   1ccd0:	vldr	s15, [pc, #192]	; 1cd98 <test_struct_buffer@@Base+0x1e4>
   1ccd4:	vldr	s14, [r3]
   1ccd8:	vcmp.f32	s14, s15
   1ccdc:	vmrs	APSR_nzcv, fpscr
   1cce0:	bne	1cd44 <test_struct_buffer@@Base+0x190>
   1cce4:	vldr	s15, [pc, #176]	; 1cd9c <test_struct_buffer@@Base+0x1e8>
   1cce8:	vldr	s14, [r3, #4]
   1ccec:	vcmp.f32	s14, s15
   1ccf0:	vmrs	APSR_nzcv, fpscr
   1ccf4:	bne	1cd44 <test_struct_buffer@@Base+0x190>
   1ccf8:	vldr	s15, [pc, #160]	; 1cda0 <test_struct_buffer@@Base+0x1ec>
   1ccfc:	vldr	s14, [r3, #8]
   1cd00:	vcmp.f32	s14, s15
   1cd04:	vmrs	APSR_nzcv, fpscr
   1cd08:	bne	1cd44 <test_struct_buffer@@Base+0x190>
   1cd0c:	vldr	d7, [pc, #124]	; 1cd90 <test_struct_buffer@@Base+0x1dc>
   1cd10:	vldr	d6, [r3, #16]
   1cd14:	vcmp.f64	d6, d7
   1cd18:	vmrs	APSR_nzcv, fpscr
   1cd1c:	bne	1cd44 <test_struct_buffer@@Base+0x190>
   1cd20:	ldr	r2, [r3, #24]
   1cd24:	ldr	r1, [pc, #160]	; 1cdcc <test_struct_buffer@@Base+0x218>
   1cd28:	bic	r2, r2, #65280	; 0xff00
   1cd2c:	cmp	r2, r1
   1cd30:	bne	1cd44 <test_struct_buffer@@Base+0x190>
   1cd34:	ldrsb	r3, [r3, #28]
   1cd38:	cmn	r3, #17
   1cd3c:	moveq	r0, #0
   1cd40:	beq	1ccbc <test_struct_buffer@@Base+0x108>
   1cd44:	ldr	r0, [pc, #132]	; 1cdd0 <test_struct_buffer@@Base+0x21c>
   1cd48:	bl	129f0 <puts@plt>
   1cd4c:	mvn	r0, #0
   1cd50:	add	sp, sp, #116	; 0x74
   1cd54:	pop	{r4, r5, r6, r7, pc}
   1cd58:	ldr	r0, [pc, #116]	; 1cdd4 <test_struct_buffer@@Base+0x220>
   1cd5c:	bl	129f0 <puts@plt>
   1cd60:	mvn	r0, #0
   1cd64:	b	1ccbc <test_struct_buffer@@Base+0x108>
   1cd68:	ldr	r3, [pc, #104]	; 1cdd8 <test_struct_buffer@@Base+0x224>
   1cd6c:	ldr	r2, [pc, #104]	; 1cddc <test_struct_buffer@@Base+0x228>
   1cd70:	ldr	r1, [pc, #104]	; 1cde0 <test_struct_buffer@@Base+0x22c>
   1cd74:	ldr	r0, [pc, #104]	; 1cde4 <test_struct_buffer@@Base+0x230>
   1cd78:	bl	12a8c <__assert_fail@plt>
   1cd7c:	ldr	r3, [pc, #84]	; 1cdd8 <test_struct_buffer@@Base+0x224>
   1cd80:	ldr	r2, [pc, #96]	; 1cde8 <test_struct_buffer@@Base+0x234>
   1cd84:	ldr	r1, [pc, #84]	; 1cde0 <test_struct_buffer@@Base+0x22c>
   1cd88:	ldr	r0, [pc, #92]	; 1cdec <test_struct_buffer@@Base+0x238>
   1cd8c:	bl	12a8c <__assert_fail@plt>
   1cd90:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1cd94:	andsmi	ip, r0, ip, asr #25
   1cd98:	svccc	0x00800000
   1cd9c:	andmi	r0, r0, r0
   1cda0:	submi	r0, r0, r0
   1cda4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1cda8:	andsmi	ip, r0, ip, asr #25
   1cdac:	submi	r0, r0, r0
   1cdb0:	andeq	r0, r0, sl, lsr #21
   1cdb4:	ldrdeq	r5, [r2], -r0
   1cdb8:	andeq	r8, r2, r0, ror r0
   1cdbc:	andeq	sl, r3, r0, ror r0
   1cdc0:	andeq	r8, r2, r8, ror #1
   1cdc4:	movtpl	r4, #61261	; 0xef4d
   1cdc8:	andeq	r8, r2, r4, lsl r1
   1cdcc:	beq	fea9cdf4 <__bss_end__@@Base+0xfea62d10>
   1cdd0:	strdeq	r8, [r2], -ip
   1cdd4:	ldrdeq	r8, [r2], -ip
   1cdd8:	andeq	r5, r2, r0, ror r6
   1cddc:	andeq	r0, r0, r5, lsr #18
   1cde0:	andeq	r6, r2, r4, lsl r3
   1cde4:	muleq	r2, r0, r0
   1cde8:	andeq	r0, r0, r3, lsr #18
   1cdec:	andeq	r8, r2, r4, rrx

0001cdf0 <test_typed_struct_buffer@@Base>:
   1cdf0:	push	{r4, r5, r6, r7, lr}
   1cdf4:	mov	r4, r0
   1cdf8:	sub	sp, sp, #116	; 0x74
   1cdfc:	bl	1de88 <flatcc_builder_reset@@Base>
   1ce00:	mov	r0, r4
   1ce04:	mov	r2, #16
   1ce08:	mov	r1, #32
   1ce0c:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1ce10:	cmp	r0, #0
   1ce14:	moveq	r3, r0
   1ce18:	beq	1ce64 <test_typed_struct_buffer@@Base+0x74>
   1ce1c:	ldr	r6, [pc, #600]	; 1d07c <test_typed_struct_buffer@@Base+0x28c>
   1ce20:	ldr	r7, [pc, #600]	; 1d080 <test_typed_struct_buffer@@Base+0x290>
   1ce24:	mov	r2, #1065353216	; 0x3f800000
   1ce28:	mov	r3, #1073741824	; 0x40000000
   1ce2c:	ldr	ip, [pc, #592]	; 1d084 <test_typed_struct_buffer@@Base+0x294>
   1ce30:	ldr	r1, [pc, #592]	; 1d088 <test_typed_struct_buffer@@Base+0x298>
   1ce34:	str	r2, [r0]
   1ce38:	str	r3, [r0, #4]
   1ce3c:	mov	r2, #8
   1ce40:	mvn	r3, #16
   1ce44:	strb	r3, [r0, #28]
   1ce48:	str	ip, [r0, #8]
   1ce4c:	strd	r6, [r0, #16]
   1ce50:	strh	r1, [r0, #26]
   1ce54:	strb	r2, [r0, #24]
   1ce58:	mov	r0, r4
   1ce5c:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1ce60:	mov	r3, r0
   1ce64:	mov	r2, #0
   1ce68:	mov	r7, #16
   1ce6c:	str	r2, [sp, #4]
   1ce70:	ldr	r1, [pc, #532]	; 1d08c <test_typed_struct_buffer@@Base+0x29c>
   1ce74:	str	r7, [sp]
   1ce78:	mov	r0, r4
   1ce7c:	bl	1e3e4 <flatcc_builder_create_buffer@@Base>
   1ce80:	mov	r0, r4
   1ce84:	bl	22e20 <flatcc_builder_get_buffer_size@@Base>
   1ce88:	cmp	r0, #48	; 0x30
   1ce8c:	bne	1d050 <test_typed_struct_buffer@@Base+0x260>
   1ce90:	mov	r1, r0
   1ce94:	ldr	r0, [pc, #500]	; 1d090 <test_typed_struct_buffer@@Base+0x2a0>
   1ce98:	bl	1299c <printf@plt>
   1ce9c:	mov	r0, r4
   1cea0:	bl	230c4 <flatcc_builder_get_emit_context@@Base>
   1cea4:	ldr	r6, [r0, #24]
   1cea8:	cmp	r6, #48	; 0x30
   1ceac:	bne	1d03c <test_typed_struct_buffer@@Base+0x24c>
   1ceb0:	add	r5, sp, #12
   1ceb4:	mov	r0, r4
   1ceb8:	mov	r1, r5
   1cebc:	mov	r2, #100	; 0x64
   1cec0:	bl	22eec <flatcc_builder_copy_buffer@@Base>
   1cec4:	cmp	r0, #0
   1cec8:	beq	1d01c <test_typed_struct_buffer@@Base+0x22c>
   1cecc:	ldr	r3, [pc, #448]	; 1d094 <test_typed_struct_buffer@@Base+0x2a4>
   1ced0:	mov	r2, r6
   1ced4:	mov	r1, r5
   1ced8:	ldr	r3, [r3]
   1cedc:	ldr	r0, [pc, #436]	; 1d098 <test_typed_struct_buffer@@Base+0x2a8>
   1cee0:	bl	13458 <_start@@Base+0x148>
   1cee4:	ldr	r3, [pc, #432]	; 1d09c <test_typed_struct_buffer@@Base+0x2ac>
   1cee8:	ldr	r4, [sp, #16]
   1ceec:	cmp	r4, r3
   1cef0:	beq	1cf08 <test_typed_struct_buffer@@Base+0x118>
   1cef4:	ldr	r0, [pc, #420]	; 1d0a0 <test_typed_struct_buffer@@Base+0x2b0>
   1cef8:	bl	129f0 <puts@plt>
   1cefc:	mvn	r0, #0
   1cf00:	add	sp, sp, #116	; 0x74
   1cf04:	pop	{r4, r5, r6, r7, pc}
   1cf08:	ldr	r3, [sp, #12]
   1cf0c:	cmn	r5, r3
   1cf10:	beq	1d02c <test_typed_struct_buffer@@Base+0x23c>
   1cf14:	str	r7, [sp]
   1cf18:	mov	r3, #32
   1cf1c:	mov	r2, r4
   1cf20:	mov	r1, r6
   1cf24:	mov	r0, r5
   1cf28:	bl	242bc <flatcc_verify_struct_as_typed_root@@Base>
   1cf2c:	cmp	r0, #0
   1cf30:	bne	1cffc <test_typed_struct_buffer@@Base+0x20c>
   1cf34:	ldr	r2, [sp, #16]
   1cf38:	cmp	r2, r4
   1cf3c:	beq	1cf50 <test_typed_struct_buffer@@Base+0x160>
   1cf40:	ldr	r0, [pc, #348]	; 1d0a4 <test_typed_struct_buffer@@Base+0x2b4>
   1cf44:	bl	129f0 <puts@plt>
   1cf48:	mvn	r0, #0
   1cf4c:	b	1cf00 <test_typed_struct_buffer@@Base+0x110>
   1cf50:	ldr	r4, [sp, #12]
   1cf54:	adds	r4, r5, r4
   1cf58:	beq	1cf40 <test_typed_struct_buffer@@Base+0x150>
   1cf5c:	str	r7, [sp]
   1cf60:	mov	r1, r6
   1cf64:	mov	r0, r5
   1cf68:	mov	r3, #32
   1cf6c:	bl	242bc <flatcc_verify_struct_as_typed_root@@Base>
   1cf70:	cmp	r0, #0
   1cf74:	bne	1d00c <test_typed_struct_buffer@@Base+0x21c>
   1cf78:	vldr	s15, [pc, #240]	; 1d070 <test_typed_struct_buffer@@Base+0x280>
   1cf7c:	vldr	s14, [r4]
   1cf80:	vcmp.f32	s14, s15
   1cf84:	vmrs	APSR_nzcv, fpscr
   1cf88:	bne	1cfe8 <test_typed_struct_buffer@@Base+0x1f8>
   1cf8c:	vldr	s15, [pc, #224]	; 1d074 <test_typed_struct_buffer@@Base+0x284>
   1cf90:	vldr	s14, [r4, #4]
   1cf94:	vcmp.f32	s14, s15
   1cf98:	vmrs	APSR_nzcv, fpscr
   1cf9c:	bne	1cfe8 <test_typed_struct_buffer@@Base+0x1f8>
   1cfa0:	vldr	s15, [pc, #208]	; 1d078 <test_typed_struct_buffer@@Base+0x288>
   1cfa4:	vldr	s14, [r4, #8]
   1cfa8:	vcmp.f32	s14, s15
   1cfac:	vmrs	APSR_nzcv, fpscr
   1cfb0:	bne	1cfe8 <test_typed_struct_buffer@@Base+0x1f8>
   1cfb4:	vldr	d7, [pc, #172]	; 1d068 <test_typed_struct_buffer@@Base+0x278>
   1cfb8:	vldr	d6, [r4, #16]
   1cfbc:	vcmp.f64	d6, d7
   1cfc0:	vmrs	APSR_nzcv, fpscr
   1cfc4:	bne	1cfe8 <test_typed_struct_buffer@@Base+0x1f8>
   1cfc8:	ldr	r3, [r4, #24]
   1cfcc:	ldr	r2, [pc, #212]	; 1d0a8 <test_typed_struct_buffer@@Base+0x2b8>
   1cfd0:	bic	r3, r3, #65280	; 0xff00
   1cfd4:	cmp	r3, r2
   1cfd8:	bne	1cfe8 <test_typed_struct_buffer@@Base+0x1f8>
   1cfdc:	ldrsb	r3, [r4, #28]
   1cfe0:	cmn	r3, #17
   1cfe4:	beq	1cf00 <test_typed_struct_buffer@@Base+0x110>
   1cfe8:	ldr	r0, [pc, #188]	; 1d0ac <test_typed_struct_buffer@@Base+0x2bc>
   1cfec:	bl	129f0 <puts@plt>
   1cff0:	mvn	r0, #0
   1cff4:	add	sp, sp, #116	; 0x74
   1cff8:	pop	{r4, r5, r6, r7, pc}
   1cffc:	ldr	r0, [pc, #172]	; 1d0b0 <test_typed_struct_buffer@@Base+0x2c0>
   1d000:	bl	129f0 <puts@plt>
   1d004:	mvn	r0, #0
   1d008:	b	1cf00 <test_typed_struct_buffer@@Base+0x110>
   1d00c:	ldr	r0, [pc, #160]	; 1d0b4 <test_typed_struct_buffer@@Base+0x2c4>
   1d010:	bl	129f0 <puts@plt>
   1d014:	mvn	r0, #0
   1d018:	b	1cf00 <test_typed_struct_buffer@@Base+0x110>
   1d01c:	ldr	r0, [pc, #148]	; 1d0b8 <test_typed_struct_buffer@@Base+0x2c8>
   1d020:	bl	129f0 <puts@plt>
   1d024:	mvn	r0, #0
   1d028:	b	1cf00 <test_typed_struct_buffer@@Base+0x110>
   1d02c:	ldr	r0, [pc, #136]	; 1d0bc <test_typed_struct_buffer@@Base+0x2cc>
   1d030:	bl	129f0 <puts@plt>
   1d034:	mvn	r0, #0
   1d038:	b	1cf00 <test_typed_struct_buffer@@Base+0x110>
   1d03c:	ldr	r3, [pc, #124]	; 1d0c0 <test_typed_struct_buffer@@Base+0x2d0>
   1d040:	ldr	r2, [pc, #124]	; 1d0c4 <test_typed_struct_buffer@@Base+0x2d4>
   1d044:	ldr	r1, [pc, #124]	; 1d0c8 <test_typed_struct_buffer@@Base+0x2d8>
   1d048:	ldr	r0, [pc, #124]	; 1d0cc <test_typed_struct_buffer@@Base+0x2dc>
   1d04c:	bl	12a8c <__assert_fail@plt>
   1d050:	ldr	r3, [pc, #104]	; 1d0c0 <test_typed_struct_buffer@@Base+0x2d0>
   1d054:	ldr	r2, [pc, #116]	; 1d0d0 <test_typed_struct_buffer@@Base+0x2e0>
   1d058:	ldr	r1, [pc, #104]	; 1d0c8 <test_typed_struct_buffer@@Base+0x2d8>
   1d05c:	ldr	r0, [pc, #112]	; 1d0d4 <test_typed_struct_buffer@@Base+0x2e4>
   1d060:	bl	12a8c <__assert_fail@plt>
   1d064:	nop			; (mov r0, r0)
   1d068:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d06c:	andsmi	ip, r0, ip, asr #25
   1d070:	svccc	0x00800000
   1d074:	andmi	r0, r0, r0
   1d078:	submi	r0, r0, r0
   1d07c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d080:	andsmi	ip, r0, ip, asr #25
   1d084:	submi	r0, r0, r0
   1d088:	andeq	r0, r0, sl, lsr #21
   1d08c:	andeq	r8, r2, r8, lsr r1
   1d090:	andeq	r8, r2, r0, ror r0
   1d094:	andeq	sl, r3, r0, ror r0
   1d098:	andeq	r8, r2, r0, asr #2
   1d09c:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   1d0a0:	andeq	r8, r2, r4, lsl r1
   1d0a4:	andeq	r8, r2, r8, lsr #3
   1d0a8:	beq	fea9d0d0 <__bss_end__@@Base+0xfea62fec>
   1d0ac:	strdeq	r8, [r2], -ip
   1d0b0:	andeq	r8, r2, r4, lsl #3
   1d0b4:	andeq	r8, r2, r8, asr #3
   1d0b8:	ldrdeq	r8, [r2], -ip
   1d0bc:	andeq	r8, r2, ip, asr r1
   1d0c0:	andeq	r5, r2, r4, lsl #13
   1d0c4:	andeq	r0, r0, r6, asr r9
   1d0c8:	andeq	r6, r2, r4, lsl r3
   1d0cc:	muleq	r2, r0, r0
   1d0d0:	andeq	r0, r0, r4, asr r9
   1d0d4:	andeq	r8, r2, r4, rrx

0001d0d8 <gen_monster_benchmark@@Base>:
   1d0d8:	ldr	r3, [pc, #508]	; 1d2dc <gen_monster_benchmark@@Base+0x204>
   1d0dc:	push	{r4, r5, lr}
   1d0e0:	mov	r4, r0
   1d0e4:	ldm	r3, {r0, r1, r2}
   1d0e8:	sub	sp, sp, #28
   1d0ec:	add	r3, sp, #12
   1d0f0:	stmia	r3!, {r0, r1}
   1d0f4:	mov	r0, r4
   1d0f8:	strh	r2, [r3]
   1d0fc:	bl	1de88 <flatcc_builder_reset@@Base>
   1d100:	mov	r3, #0
   1d104:	mov	r0, r4
   1d108:	mov	r2, r3
   1d10c:	ldr	r1, [pc, #460]	; 1d2e0 <gen_monster_benchmark@@Base+0x208>
   1d110:	bl	1e7ec <flatcc_builder_start_buffer@@Base>
   1d114:	cmp	r0, #0
   1d118:	bne	1d128 <gen_monster_benchmark@@Base+0x50>
   1d11c:	mov	r1, #36	; 0x24
   1d120:	mov	r0, r4
   1d124:	bl	203cc <flatcc_builder_start_table@@Base>
   1d128:	mov	r3, #2
   1d12c:	mov	r2, r3
   1d130:	mov	r1, r3
   1d134:	mov	r0, r4
   1d138:	bl	22538 <flatcc_builder_table_add@@Base>
   1d13c:	mov	r2, #32
   1d140:	mov	r1, #0
   1d144:	cmp	r0, #0
   1d148:	movne	r3, #80	; 0x50
   1d14c:	strhne	r3, [r0]
   1d150:	mov	r3, #16
   1d154:	mov	r0, r4
   1d158:	bl	22538 <flatcc_builder_table_add@@Base>
   1d15c:	ldr	r3, [pc, #384]	; 1d2e4 <gen_monster_benchmark@@Base+0x20c>
   1d160:	mov	ip, #1065353216	; 0x3f800000
   1d164:	mov	r2, #1073741824	; 0x40000000
   1d168:	ldr	r1, [pc, #376]	; 1d2e8 <gen_monster_benchmark@@Base+0x210>
   1d16c:	str	ip, [r0]
   1d170:	str	r2, [r0, #4]
   1d174:	str	r3, [r0, #8]
   1d178:	mov	r0, r4
   1d17c:	bl	2217c <flatcc_builder_create_string_str@@Base>
   1d180:	subs	r5, r0, #0
   1d184:	beq	1d19c <gen_monster_benchmark@@Base+0xc4>
   1d188:	mov	r1, #3
   1d18c:	mov	r0, r4
   1d190:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1d194:	cmp	r0, #0
   1d198:	strne	r5, [r0]
   1d19c:	mvn	r2, #0
   1d1a0:	mov	r3, #1
   1d1a4:	str	r2, [sp, #4]
   1d1a8:	add	r1, sp, #12
   1d1ac:	str	r3, [sp]
   1d1b0:	mov	r2, #10
   1d1b4:	mov	r0, r4
   1d1b8:	bl	20fcc <flatcc_builder_create_vector@@Base>
   1d1bc:	subs	r5, r0, #0
   1d1c0:	beq	1d1d8 <gen_monster_benchmark@@Base+0x100>
   1d1c4:	mov	r1, #5
   1d1c8:	mov	r0, r4
   1d1cc:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1d1d0:	cmp	r0, #0
   1d1d4:	strne	r5, [r0]
   1d1d8:	mvn	r3, #-1073741824	; 0xc0000000
   1d1dc:	mov	r2, #2
   1d1e0:	mov	r1, #4
   1d1e4:	mov	r0, r4
   1d1e8:	bl	1fc2c <flatcc_builder_start_vector@@Base>
   1d1ec:	mov	r1, #1
   1d1f0:	mov	r0, r4
   1d1f4:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   1d1f8:	mov	r2, #16
   1d1fc:	mov	r3, #32
   1d200:	mov	r1, #2
   1d204:	strh	r2, [r0]
   1d208:	strb	r3, [r0, #2]
   1d20c:	mov	r0, r4
   1d210:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   1d214:	mov	r2, #80	; 0x50
   1d218:	mov	r3, #96	; 0x60
   1d21c:	mov	ip, #48	; 0x30
   1d220:	mov	r1, #64	; 0x40
   1d224:	strh	ip, [r0]
   1d228:	strh	r2, [r0, #4]
   1d22c:	strb	r3, [r0, #6]
   1d230:	strb	r1, [r0, #2]
   1d234:	mov	r1, #1
   1d238:	mov	r0, r4
   1d23c:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   1d240:	mov	r1, #1
   1d244:	cmp	r0, #0
   1d248:	movne	r2, #112	; 0x70
   1d24c:	mvnne	r3, #127	; 0x7f
   1d250:	strhne	r2, [r0]
   1d254:	ldr	r2, [pc, #144]	; 1d2ec <gen_monster_benchmark@@Base+0x214>
   1d258:	strbne	r3, [r0, #2]
   1d25c:	mvn	r3, #110	; 0x6e
   1d260:	mov	r0, r4
   1d264:	strb	r3, [sp, #10]
   1d268:	strh	r2, [sp, #8]
   1d26c:	bl	1f0c0 <flatcc_builder_extend_vector@@Base>
   1d270:	cmp	r0, #0
   1d274:	ldrne	r3, [sp, #8]
   1d278:	strne	r3, [r0]
   1d27c:	mov	r0, r4
   1d280:	bl	2110c <flatcc_builder_end_vector@@Base>
   1d284:	subs	r5, r0, #0
   1d288:	beq	1d2a0 <gen_monster_benchmark@@Base+0x1c8>
   1d28c:	mov	r1, #9
   1d290:	mov	r0, r4
   1d294:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   1d298:	cmp	r0, #0
   1d29c:	strne	r5, [r0]
   1d2a0:	mov	r2, #1
   1d2a4:	ldr	r1, [pc, #68]	; 1d2f0 <gen_monster_benchmark@@Base+0x218>
   1d2a8:	mov	r0, r4
   1d2ac:	bl	20d74 <flatcc_builder_check_required@@Base>
   1d2b0:	cmp	r0, #0
   1d2b4:	beq	1d2d8 <gen_monster_benchmark@@Base+0x200>
   1d2b8:	mov	r0, r4
   1d2bc:	bl	20e0c <flatcc_builder_end_table@@Base>
   1d2c0:	mov	r1, r0
   1d2c4:	mov	r0, r4
   1d2c8:	bl	1e978 <flatcc_builder_end_buffer@@Base>
   1d2cc:	mov	r0, #0
   1d2d0:	add	sp, sp, #28
   1d2d4:	pop	{r4, r5, pc}
   1d2d8:	bl	13024 <__assert_fail@plt+0x598>
   1d2dc:	andeq	r5, r2, r0, lsl #9
   1d2e0:	ldrdeq	r5, [r2], -r0
   1d2e4:	subgt	ip, ip, sp, asr #25
   1d2e8:	strdeq	r5, [r2], -r8
   1d2ec:	muleq	r0, r1, r1
   1d2f0:	strdeq	r5, [r2], -r8

0001d2f4 <time_monster@@Base>:
   1d2f4:	push	{r4, r5, r6, r7, lr}
   1d2f8:	vpush	{d8}
   1d2fc:	mov	r5, r0
   1d300:	ldr	r0, [pc, #256]	; 1d408 <time_monster@@Base+0x114>
   1d304:	ldr	r6, [pc, #256]	; 1d40c <time_monster@@Base+0x118>
   1d308:	sub	sp, sp, #12
   1d30c:	bl	129f0 <puts@plt>
   1d310:	mov	r1, #0
   1d314:	mov	r0, sp
   1d318:	bl	129e4 <gettimeofday@plt>
   1d31c:	ldr	r2, [r6, #100]	; 0x64
   1d320:	vldr	d5, [pc, #216]	; 1d400 <time_monster@@Base+0x10c>
   1d324:	cmp	r2, #0
   1d328:	addeq	r3, r6, #100	; 0x64
   1d32c:	ldmeq	sp, {r0, r1}
   1d330:	ldr	r4, [pc, #216]	; 1d410 <time_monster@@Base+0x11c>
   1d334:	mov	r7, sp
   1d338:	stmeq	r3, {r0, r1}
   1d33c:	ldr	r3, [sp, #4]
   1d340:	ldr	r1, [r6, #104]	; 0x68
   1d344:	moveq	r2, r0
   1d348:	sub	r3, r3, r1
   1d34c:	vmov	s12, r3
   1d350:	ldr	r3, [sp]
   1d354:	sub	r3, r3, r2
   1d358:	vcvt.f64.s32	d6, s12
   1d35c:	vmov	s15, r3
   1d360:	vcvt.f64.s32	d7, s15
   1d364:	vdiv.f64	d8, d6, d5
   1d368:	vadd.f64	d8, d8, d7
   1d36c:	mov	r0, r5
   1d370:	bl	1d0d8 <gen_monster_benchmark@@Base>
   1d374:	subs	r4, r4, #1
   1d378:	bne	1d36c <time_monster@@Base+0x78>
   1d37c:	mov	r0, r5
   1d380:	bl	22e20 <flatcc_builder_get_buffer_size@@Base>
   1d384:	mov	r1, r4
   1d388:	mov	r5, r0
   1d38c:	mov	r0, r7
   1d390:	bl	129e4 <gettimeofday@plt>
   1d394:	ldr	r2, [r6, #100]	; 0x64
   1d398:	vldr	d5, [pc, #96]	; 1d400 <time_monster@@Base+0x10c>
   1d39c:	cmp	r2, #0
   1d3a0:	vmov.f64	d0, d8
   1d3a4:	ldmeq	r7, {r0, r1}
   1d3a8:	ldreq	r3, [pc, #100]	; 1d414 <time_monster@@Base+0x120>
   1d3ac:	stmeq	r3, {r0, r1}
   1d3b0:	ldr	r3, [sp, #4]
   1d3b4:	ldr	r1, [r6, #104]	; 0x68
   1d3b8:	ldreq	r2, [r6, #100]	; 0x64
   1d3bc:	sub	r3, r3, r1
   1d3c0:	ldr	r0, [pc, #80]	; 1d418 <time_monster@@Base+0x124>
   1d3c4:	vmov	s12, r3
   1d3c8:	ldr	r3, [sp]
   1d3cc:	mov	r1, r5
   1d3d0:	sub	r3, r3, r2
   1d3d4:	vcvt.f64.s32	d6, s12
   1d3d8:	vmov	s15, r3
   1d3dc:	vcvt.f64.s32	d7, s15
   1d3e0:	vdiv.f64	d1, d6, d5
   1d3e4:	vadd.f64	d1, d1, d7
   1d3e8:	bl	14040 <_start@@Base+0xd30>
   1d3ec:	mov	r0, #0
   1d3f0:	add	sp, sp, #12
   1d3f4:	vpop	{d8}
   1d3f8:	pop	{r4, r5, r6, r7, pc}
   1d3fc:	nop			; (mov r0, r0)
   1d400:	andeq	r0, r0, r0
   1d404:	smlawbmi	lr, r0, r4, r8
   1d408:	strdeq	r8, [r2], -r0
   1d40c:	andeq	sl, r3, r8, ror r0
   1d410:	andeq	r4, pc, r0, asr #4
   1d414:	ldrdeq	sl, [r3], -ip
   1d418:	andeq	r8, r2, r4, lsl #4

0001d41c <gen_struct_buffer_benchmark@@Base>:
   1d41c:	push	{r4, r5, r6, r7, lr}
   1d420:	mov	r4, r0
   1d424:	sub	sp, sp, #12
   1d428:	bl	1de88 <flatcc_builder_reset@@Base>
   1d42c:	mov	r0, r4
   1d430:	mov	r2, #16
   1d434:	mov	r1, #32
   1d438:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1d43c:	cmp	r0, #0
   1d440:	moveq	r3, r0
   1d444:	beq	1d490 <gen_struct_buffer_benchmark@@Base+0x74>
   1d448:	ldr	r6, [pc, #276]	; 1d564 <gen_struct_buffer_benchmark@@Base+0x148>
   1d44c:	ldr	r7, [pc, #276]	; 1d568 <gen_struct_buffer_benchmark@@Base+0x14c>
   1d450:	mov	r2, #1065353216	; 0x3f800000
   1d454:	mov	r3, #1073741824	; 0x40000000
   1d458:	ldr	ip, [pc, #268]	; 1d56c <gen_struct_buffer_benchmark@@Base+0x150>
   1d45c:	ldr	r1, [pc, #268]	; 1d570 <gen_struct_buffer_benchmark@@Base+0x154>
   1d460:	str	r2, [r0]
   1d464:	str	r3, [r0, #4]
   1d468:	mov	r2, #8
   1d46c:	mvn	r3, #16
   1d470:	strb	r3, [r0, #28]
   1d474:	str	ip, [r0, #8]
   1d478:	strd	r6, [r0, #16]
   1d47c:	strh	r1, [r0, #26]
   1d480:	strb	r2, [r0, #24]
   1d484:	mov	r0, r4
   1d488:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1d48c:	mov	r3, r0
   1d490:	mov	r5, #0
   1d494:	mov	r1, #16
   1d498:	mov	r2, r5
   1d49c:	str	r1, [sp]
   1d4a0:	str	r5, [sp, #4]
   1d4a4:	ldr	r1, [pc, #200]	; 1d574 <gen_struct_buffer_benchmark@@Base+0x158>
   1d4a8:	mov	r0, r4
   1d4ac:	bl	1e3e4 <flatcc_builder_create_buffer@@Base>
   1d4b0:	mov	r1, r5
   1d4b4:	mov	r0, r4
   1d4b8:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1d4bc:	cmp	r0, #0
   1d4c0:	beq	1d544 <gen_struct_buffer_benchmark@@Base+0x128>
   1d4c4:	ldr	r3, [r0]
   1d4c8:	vldr	s15, [pc, #136]	; 1d558 <gen_struct_buffer_benchmark@@Base+0x13c>
   1d4cc:	add	r0, r0, r3
   1d4d0:	vldr	s14, [r0]
   1d4d4:	vcmp.f32	s14, s15
   1d4d8:	vmrs	APSR_nzcv, fpscr
   1d4dc:	bne	1d544 <gen_struct_buffer_benchmark@@Base+0x128>
   1d4e0:	vldr	s15, [pc, #116]	; 1d55c <gen_struct_buffer_benchmark@@Base+0x140>
   1d4e4:	vldr	s14, [r0, #4]
   1d4e8:	vcmp.f32	s14, s15
   1d4ec:	vmrs	APSR_nzcv, fpscr
   1d4f0:	bne	1d544 <gen_struct_buffer_benchmark@@Base+0x128>
   1d4f4:	vldr	s15, [pc, #100]	; 1d560 <gen_struct_buffer_benchmark@@Base+0x144>
   1d4f8:	vldr	s14, [r0, #8]
   1d4fc:	vcmp.f32	s14, s15
   1d500:	vmrs	APSR_nzcv, fpscr
   1d504:	bne	1d544 <gen_struct_buffer_benchmark@@Base+0x128>
   1d508:	vldr	d7, [pc, #64]	; 1d550 <gen_struct_buffer_benchmark@@Base+0x134>
   1d50c:	vldr	d6, [r0, #16]
   1d510:	vcmp.f64	d6, d7
   1d514:	vmrs	APSR_nzcv, fpscr
   1d518:	bne	1d544 <gen_struct_buffer_benchmark@@Base+0x128>
   1d51c:	ldr	r3, [r0, #24]
   1d520:	ldr	r2, [pc, #80]	; 1d578 <gen_struct_buffer_benchmark@@Base+0x15c>
   1d524:	bic	r3, r3, #65280	; 0xff00
   1d528:	cmp	r3, r2
   1d52c:	bne	1d544 <gen_struct_buffer_benchmark@@Base+0x128>
   1d530:	ldrb	r0, [r0, #28]
   1d534:	subs	r0, r0, #239	; 0xef
   1d538:	mvnne	r0, #0
   1d53c:	add	sp, sp, #12
   1d540:	pop	{r4, r5, r6, r7, pc}
   1d544:	mvn	r0, #0
   1d548:	add	sp, sp, #12
   1d54c:	pop	{r4, r5, r6, r7, pc}
   1d550:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d554:	andsmi	ip, r0, ip, asr #25
   1d558:	svccc	0x00800000
   1d55c:	andmi	r0, r0, r0
   1d560:	submi	r0, r0, r0
   1d564:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d568:	andsmi	ip, r0, ip, asr #25
   1d56c:	submi	r0, r0, r0
   1d570:	andeq	r0, r0, sl, lsr #21
   1d574:	ldrdeq	r5, [r2], -r0
   1d578:	beq	fea9d5a0 <__bss_end__@@Base+0xfea634bc>

0001d57c <time_struct_buffer@@Base>:
   1d57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d580:	vpush	{d8-d11}
   1d584:	mov	r4, r0
   1d588:	ldr	r0, [pc, #572]	; 1d7cc <time_struct_buffer@@Base+0x250>
   1d58c:	ldr	r9, [pc, #572]	; 1d7d0 <time_struct_buffer@@Base+0x254>
   1d590:	sub	sp, sp, #20
   1d594:	add	sl, sp, #8
   1d598:	bl	129f0 <puts@plt>
   1d59c:	mov	r1, #0
   1d5a0:	mov	r0, sl
   1d5a4:	bl	129e4 <gettimeofday@plt>
   1d5a8:	ldr	r2, [r9, #100]	; 0x64
   1d5ac:	vldr	d5, [pc, #508]	; 1d7b0 <time_struct_buffer@@Base+0x234>
   1d5b0:	cmp	r2, #0
   1d5b4:	addeq	r3, r9, #100	; 0x64
   1d5b8:	ldmeq	sl, {r0, r1}
   1d5bc:	vldr	s16, [pc, #508]	; 1d7c0 <time_struct_buffer@@Base+0x244>
   1d5c0:	vldr	s17, [pc, #508]	; 1d7c4 <time_struct_buffer@@Base+0x248>
   1d5c4:	vldr	s22, [pc, #508]	; 1d7c8 <time_struct_buffer@@Base+0x24c>
   1d5c8:	vldr	d9, [pc, #488]	; 1d7b8 <time_struct_buffer@@Base+0x23c>
   1d5cc:	ldr	r5, [pc, #512]	; 1d7d4 <time_struct_buffer@@Base+0x258>
   1d5d0:	ldr	r7, [pc, #512]	; 1d7d8 <time_struct_buffer@@Base+0x25c>
   1d5d4:	ldr	r8, [pc, #512]	; 1d7dc <time_struct_buffer@@Base+0x260>
   1d5d8:	mov	r6, #0
   1d5dc:	stmeq	r3, {r0, r1}
   1d5e0:	ldr	r3, [sp, #12]
   1d5e4:	ldr	r1, [r9, #104]	; 0x68
   1d5e8:	moveq	r2, r0
   1d5ec:	sub	r3, r3, r1
   1d5f0:	vmov	s12, r3
   1d5f4:	ldr	r3, [sp, #8]
   1d5f8:	sub	r3, r3, r2
   1d5fc:	vcvt.f64.s32	d6, s12
   1d600:	vmov	s20, r3
   1d604:	vcvt.f64.s32	d7, s20
   1d608:	vdiv.f64	d10, d6, d5
   1d60c:	vadd.f64	d10, d10, d7
   1d610:	b	1d62c <time_struct_buffer@@Base+0xb0>
   1d614:	ldrb	r3, [r0, #28]
   1d618:	subs	r3, r3, #239	; 0xef
   1d61c:	mvnne	r3, #0
   1d620:	subs	r5, r5, #1
   1d624:	orr	r6, r6, r3
   1d628:	beq	1d71c <time_struct_buffer@@Base+0x1a0>
   1d62c:	mov	r0, r4
   1d630:	bl	1de88 <flatcc_builder_reset@@Base>
   1d634:	mov	r2, #16
   1d638:	mov	r1, #32
   1d63c:	mov	r0, r4
   1d640:	bl	1ed28 <flatcc_builder_start_struct@@Base>
   1d644:	cmp	r0, #0
   1d648:	moveq	r3, r0
   1d64c:	beq	1d684 <time_struct_buffer@@Base+0x108>
   1d650:	ldr	r1, [pc, #392]	; 1d7e0 <time_struct_buffer@@Base+0x264>
   1d654:	mvn	r3, #16
   1d658:	mov	r2, #8
   1d65c:	strb	r3, [r0, #28]
   1d660:	vstr	s16, [r0]
   1d664:	vstr	s17, [r0, #4]
   1d668:	vstr	s22, [r0, #8]
   1d66c:	vstr	d9, [r0, #16]
   1d670:	strh	r1, [r0, #26]
   1d674:	strb	r2, [r0, #24]
   1d678:	mov	r0, r4
   1d67c:	bl	1eee4 <flatcc_builder_end_struct@@Base>
   1d680:	mov	r3, r0
   1d684:	mov	fp, #0
   1d688:	mov	r1, #16
   1d68c:	mov	r2, fp
   1d690:	str	r1, [sp]
   1d694:	str	fp, [sp, #4]
   1d698:	mov	r1, r7
   1d69c:	mov	r0, r4
   1d6a0:	bl	1e3e4 <flatcc_builder_create_buffer@@Base>
   1d6a4:	mov	r1, fp
   1d6a8:	mov	r0, r4
   1d6ac:	bl	22ea8 <flatcc_builder_get_direct_buffer@@Base>
   1d6b0:	cmp	r0, #0
   1d6b4:	beq	1d710 <time_struct_buffer@@Base+0x194>
   1d6b8:	ldr	r3, [r0]
   1d6bc:	add	r0, r0, r3
   1d6c0:	vldr	s15, [r0]
   1d6c4:	vcmp.f32	s15, s16
   1d6c8:	vmrs	APSR_nzcv, fpscr
   1d6cc:	bne	1d710 <time_struct_buffer@@Base+0x194>
   1d6d0:	vldr	s15, [r0, #4]
   1d6d4:	vcmp.f32	s15, s17
   1d6d8:	vmrs	APSR_nzcv, fpscr
   1d6dc:	bne	1d710 <time_struct_buffer@@Base+0x194>
   1d6e0:	vldr	s15, [r0, #8]
   1d6e4:	vcmp.f32	s15, s22
   1d6e8:	vmrs	APSR_nzcv, fpscr
   1d6ec:	bne	1d710 <time_struct_buffer@@Base+0x194>
   1d6f0:	vldr	d7, [r0, #16]
   1d6f4:	vcmp.f64	d7, d9
   1d6f8:	vmrs	APSR_nzcv, fpscr
   1d6fc:	bne	1d710 <time_struct_buffer@@Base+0x194>
   1d700:	ldr	r3, [r0, #24]
   1d704:	bic	r3, r3, #65280	; 0xff00
   1d708:	cmp	r3, r8
   1d70c:	beq	1d614 <time_struct_buffer@@Base+0x98>
   1d710:	subs	r5, r5, #1
   1d714:	mvn	r6, #0
   1d718:	bne	1d62c <time_struct_buffer@@Base+0xb0>
   1d71c:	mov	r1, r5
   1d720:	mov	r0, sl
   1d724:	bl	129e4 <gettimeofday@plt>
   1d728:	ldr	r2, [r9, #100]	; 0x64
   1d72c:	vldr	d5, [pc, #124]	; 1d7b0 <time_struct_buffer@@Base+0x234>
   1d730:	cmp	r2, #0
   1d734:	ldmeq	sl, {r0, r1}
   1d738:	ldreq	r3, [pc, #164]	; 1d7e4 <time_struct_buffer@@Base+0x268>
   1d73c:	stmeq	r3, {r0, r1}
   1d740:	ldr	r3, [sp, #12]
   1d744:	ldr	r1, [r9, #104]	; 0x68
   1d748:	ldreq	r2, [r9, #100]	; 0x64
   1d74c:	sub	r3, r3, r1
   1d750:	mov	r0, r4
   1d754:	vmov	s12, r3
   1d758:	ldr	r3, [sp, #8]
   1d75c:	sub	r3, r3, r2
   1d760:	vcvt.f64.s32	d6, s12
   1d764:	vmov	s15, r3
   1d768:	vcvt.f64.s32	d7, s15
   1d76c:	vdiv.f64	d8, d6, d5
   1d770:	vadd.f64	d8, d8, d7
   1d774:	bl	22e20 <flatcc_builder_get_buffer_size@@Base>
   1d778:	cmp	r6, #0
   1d77c:	mov	r4, r0
   1d780:	beq	1d78c <time_struct_buffer@@Base+0x210>
   1d784:	ldr	r0, [pc, #92]	; 1d7e8 <time_struct_buffer@@Base+0x26c>
   1d788:	bl	129f0 <puts@plt>
   1d78c:	mov	r1, r4
   1d790:	vmov.f64	d1, d8
   1d794:	vmov.f64	d0, d10
   1d798:	ldr	r0, [pc, #76]	; 1d7ec <time_struct_buffer@@Base+0x270>
   1d79c:	bl	14040 <_start@@Base+0xd30>
   1d7a0:	mov	r0, r6
   1d7a4:	add	sp, sp, #20
   1d7a8:	vpop	{d8-d11}
   1d7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7b0:	andeq	r0, r0, r0
   1d7b4:	smlawbmi	lr, r0, r4, r8
   1d7b8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d7bc:	andsmi	ip, r0, ip, asr #25
   1d7c0:	svccc	0x00800000
   1d7c4:	andmi	r0, r0, r0
   1d7c8:	submi	r0, r0, r0
   1d7cc:	strdeq	r8, [r2], -r0
   1d7d0:	andeq	sl, r3, r8, ror r0
   1d7d4:	andeq	r4, pc, r0, asr #4
   1d7d8:	ldrdeq	r5, [r2], -r0
   1d7dc:	beq	fea9d804 <__bss_end__@@Base+0xfea63720>
   1d7e0:	andeq	r0, r0, sl, lsr #21
   1d7e4:	ldrdeq	sl, [r3], -ip
   1d7e8:	andeq	r8, r2, ip, lsl r2
   1d7ec:	andeq	r8, r2, r0, lsr r2

0001d7f0 <flatcc_builder_default_alloc@@Base>:
   1d7f0:	push	{r4, r5, r6, r7, r8, lr}
   1d7f4:	subs	r5, r2, #0
   1d7f8:	mov	r6, r1
   1d7fc:	bne	1d820 <flatcc_builder_default_alloc@@Base+0x30>
   1d800:	ldr	r0, [r1]
   1d804:	cmp	r0, #0
   1d808:	popeq	{r4, r5, r6, r7, r8, pc}
   1d80c:	bl	129a8 <free@plt>
   1d810:	str	r5, [r6]
   1d814:	str	r5, [r6, #4]
   1d818:	mov	r0, r5
   1d81c:	pop	{r4, r5, r6, r7, r8, pc}
   1d820:	mov	r7, r3
   1d824:	ldr	r3, [sp, #24]
   1d828:	sub	r2, r3, #1
   1d82c:	cmp	r2, #6
   1d830:	ldrls	pc, [pc, r2, lsl #2]
   1d834:	b	1d8d0 <flatcc_builder_default_alloc@@Base+0xe0>
   1d838:	andeq	sp, r1, r4, lsr #17
   1d83c:	ldrdeq	sp, [r1], -r0
   1d840:	ldrdeq	sp, [r1], -r0
   1d844:	andeq	sp, r1, r8, asr #17
   1d848:	andeq	sp, r1, r4, asr r8
   1d84c:	ldrdeq	sp, [r1], -r0
   1d850:	andeq	sp, r1, r0, asr #17
   1d854:	mov	r4, r5
   1d858:	ldr	r3, [r6, #4]
   1d85c:	cmp	r5, r3
   1d860:	bhi	1d86c <flatcc_builder_default_alloc@@Base+0x7c>
   1d864:	cmp	r4, r3, lsr #1
   1d868:	bls	1d8d8 <flatcc_builder_default_alloc@@Base+0xe8>
   1d86c:	mov	r1, r4
   1d870:	ldr	r0, [r6]
   1d874:	bl	129cc <realloc@plt>
   1d878:	subs	r5, r0, #0
   1d87c:	beq	1d8f4 <flatcc_builder_default_alloc@@Base+0x104>
   1d880:	cmp	r7, #0
   1d884:	beq	1d894 <flatcc_builder_default_alloc@@Base+0xa4>
   1d888:	ldr	r0, [r6, #4]
   1d88c:	cmp	r0, r4
   1d890:	bcc	1d8e0 <flatcc_builder_default_alloc@@Base+0xf0>
   1d894:	str	r5, [r6]
   1d898:	str	r4, [r6, #4]
   1d89c:	mov	r0, #0
   1d8a0:	pop	{r4, r5, r6, r7, r8, pc}
   1d8a4:	mov	r4, #256	; 0x100
   1d8a8:	cmp	r5, r4
   1d8ac:	bls	1d858 <flatcc_builder_default_alloc@@Base+0x68>
   1d8b0:	lsl	r4, r4, #1
   1d8b4:	cmp	r5, r4
   1d8b8:	bhi	1d8b0 <flatcc_builder_default_alloc@@Base+0xc0>
   1d8bc:	b	1d858 <flatcc_builder_default_alloc@@Base+0x68>
   1d8c0:	mov	r4, #64	; 0x40
   1d8c4:	b	1d8a8 <flatcc_builder_default_alloc@@Base+0xb8>
   1d8c8:	mov	r4, #288	; 0x120
   1d8cc:	b	1d8a8 <flatcc_builder_default_alloc@@Base+0xb8>
   1d8d0:	mov	r4, #32
   1d8d4:	b	1d8a8 <flatcc_builder_default_alloc@@Base+0xb8>
   1d8d8:	mov	r0, #0
   1d8dc:	pop	{r4, r5, r6, r7, r8, pc}
   1d8e0:	sub	r2, r4, r0
   1d8e4:	mov	r1, #0
   1d8e8:	add	r0, r5, r0
   1d8ec:	bl	12a44 <memset@plt>
   1d8f0:	b	1d894 <flatcc_builder_default_alloc@@Base+0xa4>
   1d8f4:	mvn	r0, #0
   1d8f8:	pop	{r4, r5, r6, r7, r8, pc}
   1d8fc:	push	{r4, r5, r6, r7, r8, lr}
   1d900:	mov	r5, r0
   1d904:	ldrh	r0, [r0, #128]	; 0x80
   1d908:	sub	sp, sp, #88	; 0x58
   1d90c:	mov	r7, #4
   1d910:	cmp	r0, #3
   1d914:	movls	r0, #4
   1d918:	strhls	r0, [r5, #128]	; 0x80
   1d91c:	ldr	r0, [r5, #136]	; 0x88
   1d920:	lsls	r4, r2, #2
   1d924:	mov	r8, #1
   1d928:	str	r7, [sp, #16]
   1d92c:	str	r8, [sp, #20]
   1d930:	and	ip, r0, #3
   1d934:	movne	r8, #2
   1d938:	str	r7, [sp, #28]
   1d93c:	addne	r7, r4, r7
   1d940:	strne	r4, [sp, #36]	; 0x24
   1d944:	add	lr, sp, #12
   1d948:	strne	r1, [sp, #32]
   1d94c:	strne	r7, [sp, #16]
   1d950:	strne	r8, [sp, #20]
   1d954:	movne	r4, #3
   1d958:	moveq	r4, #2
   1d95c:	cmp	ip, #0
   1d960:	str	r2, [sp, #12]
   1d964:	str	lr, [sp, #24]
   1d968:	beq	1d994 <flatcc_builder_default_alloc@@Base+0x1a4>
   1d96c:	add	lr, r8, #1
   1d970:	add	r8, sp, #88	; 0x58
   1d974:	add	lr, r8, lr, lsl #3
   1d978:	ldr	r6, [pc, #320]	; 1dac0 <flatcc_builder_default_alloc@@Base+0x2d0>
   1d97c:	mov	r8, r4
   1d980:	add	r7, r7, ip
   1d984:	str	ip, [lr, #-68]	; 0xffffffbc
   1d988:	str	r7, [sp, #16]
   1d98c:	str	r4, [sp, #20]
   1d990:	str	r6, [lr, #-72]	; 0xffffffb8
   1d994:	cmp	r2, #0
   1d998:	sub	r4, r0, r7
   1d99c:	beq	1da30 <flatcc_builder_default_alloc@@Base+0x240>
   1d9a0:	cmp	r3, #0
   1d9a4:	addne	r6, r3, r2
   1d9a8:	mvnne	r0, #3
   1d9ac:	bne	1d9e0 <flatcc_builder_default_alloc@@Base+0x1f0>
   1d9b0:	b	1da6c <flatcc_builder_default_alloc@@Base+0x27c>
   1d9b4:	sub	lr, r0, r4
   1d9b8:	add	ip, lr, ip
   1d9bc:	str	ip, [r1]
   1d9c0:	ldrb	ip, [r3]
   1d9c4:	cmp	ip, #0
   1d9c8:	beq	1da94 <flatcc_builder_default_alloc@@Base+0x2a4>
   1d9cc:	add	r3, r3, #1
   1d9d0:	cmp	r3, r6
   1d9d4:	add	r1, r1, #4
   1d9d8:	sub	r0, r0, #4
   1d9dc:	beq	1da28 <flatcc_builder_default_alloc@@Base+0x238>
   1d9e0:	ldr	ip, [r1]
   1d9e4:	cmp	ip, #0
   1d9e8:	bne	1d9b4 <flatcc_builder_default_alloc@@Base+0x1c4>
   1d9ec:	ldrb	ip, [r3]
   1d9f0:	cmp	ip, #0
   1d9f4:	beq	1d9cc <flatcc_builder_default_alloc@@Base+0x1dc>
   1d9f8:	ldr	r3, [pc, #196]	; 1dac4 <flatcc_builder_default_alloc@@Base+0x2d4>
   1d9fc:	ldr	r2, [pc, #196]	; 1dac8 <flatcc_builder_default_alloc@@Base+0x2d8>
   1da00:	ldr	r1, [pc, #196]	; 1dacc <flatcc_builder_default_alloc@@Base+0x2dc>
   1da04:	ldr	r0, [pc, #196]	; 1dad0 <flatcc_builder_default_alloc@@Base+0x2e0>
   1da08:	bl	12a8c <__assert_fail@plt>
   1da0c:	sub	r1, r0, r4
   1da10:	add	r3, r3, #1
   1da14:	add	r1, r1, lr
   1da18:	cmp	r2, r3
   1da1c:	str	r1, [ip, #4]!
   1da20:	sub	r0, r0, #4
   1da24:	bne	1da74 <flatcc_builder_default_alloc@@Base+0x284>
   1da28:	ldr	r0, [r5, #136]	; 0x88
   1da2c:	sub	r4, r0, r7
   1da30:	cmp	r4, r0
   1da34:	bge	1dabc <flatcc_builder_default_alloc@@Base+0x2cc>
   1da38:	ldr	r0, [r5, #36]	; 0x24
   1da3c:	mov	r2, r8
   1da40:	str	r7, [sp]
   1da44:	mov	r3, r4
   1da48:	ldr	r6, [r5, #44]	; 0x2c
   1da4c:	add	r1, sp, #24
   1da50:	blx	r6
   1da54:	cmp	r0, #0
   1da58:	bne	1daa8 <flatcc_builder_default_alloc@@Base+0x2b8>
   1da5c:	mov	r0, r4
   1da60:	str	r4, [r5, #136]	; 0x88
   1da64:	add	sp, sp, #88	; 0x58
   1da68:	pop	{r4, r5, r6, r7, r8, pc}
   1da6c:	sub	ip, r1, #4
   1da70:	mvn	r0, #3
   1da74:	ldr	lr, [ip, #4]
   1da78:	cmp	lr, #0
   1da7c:	bne	1da0c <flatcc_builder_default_alloc@@Base+0x21c>
   1da80:	ldr	r3, [pc, #60]	; 1dac4 <flatcc_builder_default_alloc@@Base+0x2d4>
   1da84:	ldr	r2, [pc, #72]	; 1dad4 <flatcc_builder_default_alloc@@Base+0x2e4>
   1da88:	ldr	r1, [pc, #60]	; 1dacc <flatcc_builder_default_alloc@@Base+0x2dc>
   1da8c:	ldr	r0, [pc, #68]	; 1dad8 <flatcc_builder_default_alloc@@Base+0x2e8>
   1da90:	bl	12a8c <__assert_fail@plt>
   1da94:	ldr	r3, [pc, #40]	; 1dac4 <flatcc_builder_default_alloc@@Base+0x2d4>
   1da98:	ldr	r2, [pc, #60]	; 1dadc <flatcc_builder_default_alloc@@Base+0x2ec>
   1da9c:	ldr	r1, [pc, #40]	; 1dacc <flatcc_builder_default_alloc@@Base+0x2dc>
   1daa0:	ldr	r0, [pc, #56]	; 1dae0 <flatcc_builder_default_alloc@@Base+0x2f0>
   1daa4:	bl	12a8c <__assert_fail@plt>
   1daa8:	ldr	r3, [pc, #52]	; 1dae4 <flatcc_builder_default_alloc@@Base+0x2f4>
   1daac:	ldr	r2, [pc, #52]	; 1dae8 <flatcc_builder_default_alloc@@Base+0x2f8>
   1dab0:	ldr	r1, [pc, #20]	; 1dacc <flatcc_builder_default_alloc@@Base+0x2dc>
   1dab4:	ldr	r0, [pc, #28]	; 1dad8 <flatcc_builder_default_alloc@@Base+0x2e8>
   1dab8:	bl	12a8c <__assert_fail@plt>
   1dabc:	bl	130b8 <__assert_fail@plt+0x62c>
   1dac0:	andeq	r8, r2, r0, lsr #6
   1dac4:	andeq	r8, r2, r0, lsr #10
   1dac8:			; <UNDEFINED> instruction: 0x000005b5
   1dacc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1dad0:	muleq	r2, r4, sl
   1dad4:			; <UNDEFINED> instruction: 0x000005b7
   1dad8:	muleq	r2, r0, sl
   1dadc:			; <UNDEFINED> instruction: 0x000005b1
   1dae0:	andeq	r8, r2, r4, lsl #21
   1dae4:	andeq	r8, r2, r4, lsr #5
   1dae8:	andeq	r0, r0, fp, lsl #5
   1daec:	ldrh	r3, [r0, #128]	; 0x80
   1daf0:	push	{r4, r5, r6, r7, lr}
   1daf4:	sub	sp, sp, #92	; 0x5c
   1daf8:	cmp	r3, #3
   1dafc:	movls	r3, #4
   1db00:	ldr	lr, [r0, #136]	; 0x88
   1db04:	mov	ip, #4
   1db08:	strhls	r3, [r0, #128]	; 0x80
   1db0c:	mov	r4, r0
   1db10:	lsls	r6, r2, #2
   1db14:	mov	r0, #1
   1db18:	add	r5, sp, #12
   1db1c:	str	ip, [sp, #16]
   1db20:	str	r0, [sp, #20]
   1db24:	and	r3, lr, #3
   1db28:	movne	r0, #2
   1db2c:	str	ip, [sp, #28]
   1db30:	addne	ip, r6, ip
   1db34:	str	r5, [sp, #24]
   1db38:	strne	r6, [sp, #36]	; 0x24
   1db3c:	strne	r1, [sp, #32]
   1db40:	strne	ip, [sp, #16]
   1db44:	strne	r0, [sp, #20]
   1db48:	movne	r5, r0
   1db4c:	movne	r6, #3
   1db50:	moveq	r5, r0
   1db54:	moveq	r6, #2
   1db58:	cmp	r3, #0
   1db5c:	str	r2, [sp, #12]
   1db60:	beq	1db8c <flatcc_builder_default_alloc@@Base+0x39c>
   1db64:	add	r0, r5, #1
   1db68:	add	r5, sp, #88	; 0x58
   1db6c:	add	r0, r5, r0, lsl #3
   1db70:	ldr	r7, [pc, #204]	; 1dc44 <flatcc_builder_default_alloc@@Base+0x454>
   1db74:	mov	r5, r6
   1db78:	add	ip, ip, r3
   1db7c:	str	r3, [r0, #-68]	; 0xffffffbc
   1db80:	str	ip, [sp, #16]
   1db84:	str	r6, [sp, #20]
   1db88:	str	r7, [r0, #-72]	; 0xffffffb8
   1db8c:	cmp	r2, #0
   1db90:	beq	1dbec <flatcc_builder_default_alloc@@Base+0x3fc>
   1db94:	ldr	r3, [r1]
   1db98:	cmp	r3, #0
   1db9c:	beq	1dbd4 <flatcc_builder_default_alloc@@Base+0x3e4>
   1dba0:	sub	r6, lr, ip
   1dba4:	mov	r0, #0
   1dba8:	mvn	lr, #3
   1dbac:	sub	r3, r3, r6
   1dbb0:	add	r0, r0, #1
   1dbb4:	add	r3, r3, lr
   1dbb8:	cmp	r2, r0
   1dbbc:	str	r3, [r1]
   1dbc0:	beq	1dbe8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1dbc4:	ldr	r3, [r1, #4]!
   1dbc8:	sub	lr, lr, #4
   1dbcc:	cmp	r3, #0
   1dbd0:	bne	1dbac <flatcc_builder_default_alloc@@Base+0x3bc>
   1dbd4:	ldr	r3, [pc, #108]	; 1dc48 <flatcc_builder_default_alloc@@Base+0x458>
   1dbd8:	ldr	r2, [pc, #108]	; 1dc4c <flatcc_builder_default_alloc@@Base+0x45c>
   1dbdc:	ldr	r1, [pc, #108]	; 1dc50 <flatcc_builder_default_alloc@@Base+0x460>
   1dbe0:	ldr	r0, [pc, #108]	; 1dc54 <flatcc_builder_default_alloc@@Base+0x464>
   1dbe4:	bl	12a8c <__assert_fail@plt>
   1dbe8:	ldr	lr, [r4, #136]	; 0x88
   1dbec:	sub	r6, lr, ip
   1dbf0:	cmp	r6, lr
   1dbf4:	bge	1dc40 <flatcc_builder_default_alloc@@Base+0x450>
   1dbf8:	ldr	r0, [r4, #36]	; 0x24
   1dbfc:	mov	r2, r5
   1dc00:	str	ip, [sp]
   1dc04:	mov	r3, r6
   1dc08:	ldr	r5, [r4, #44]	; 0x2c
   1dc0c:	add	r1, sp, #24
   1dc10:	blx	r5
   1dc14:	cmp	r0, #0
   1dc18:	bne	1dc2c <flatcc_builder_default_alloc@@Base+0x43c>
   1dc1c:	mov	r0, r6
   1dc20:	str	r6, [r4, #136]	; 0x88
   1dc24:	add	sp, sp, #92	; 0x5c
   1dc28:	pop	{r4, r5, r6, r7, pc}
   1dc2c:	ldr	r3, [pc, #36]	; 1dc58 <flatcc_builder_default_alloc@@Base+0x468>
   1dc30:	ldr	r2, [pc, #36]	; 1dc5c <flatcc_builder_default_alloc@@Base+0x46c>
   1dc34:	ldr	r1, [pc, #20]	; 1dc50 <flatcc_builder_default_alloc@@Base+0x460>
   1dc38:	ldr	r0, [pc, #20]	; 1dc54 <flatcc_builder_default_alloc@@Base+0x464>
   1dc3c:	bl	12a8c <__assert_fail@plt>
   1dc40:	bl	130b8 <__assert_fail@plt+0x62c>
   1dc44:	andeq	r8, r2, r0, lsr #6
   1dc48:	andeq	r8, r2, r0, lsr #10
   1dc4c:			; <UNDEFINED> instruction: 0x000005b7
   1dc50:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1dc54:	muleq	r2, r0, sl
   1dc58:	andeq	r8, r2, r4, lsr #5
   1dc5c:	andeq	r0, r0, fp, lsl #5

0001dc60 <flatcc_builder_flush_vtable_cache@@Base>:
   1dc60:	ldr	r3, [r0, #116]	; 0x74
   1dc64:	cmp	r3, #0
   1dc68:	bxeq	lr
   1dc6c:	ldr	r2, [r0, #96]	; 0x60
   1dc70:	push	{r4, lr}
   1dc74:	mov	r1, #0
   1dc78:	mov	r4, r0
   1dc7c:	ldr	r0, [r0, #92]	; 0x5c
   1dc80:	bl	12a44 <memset@plt>
   1dc84:	mov	r2, #16
   1dc88:	mov	r3, #0
   1dc8c:	str	r2, [r4, #124]	; 0x7c
   1dc90:	str	r3, [r4, #120]	; 0x78
   1dc94:	pop	{r4, pc}

0001dc98 <flatcc_builder_custom_init@@Base>:
   1dc98:	push	{r4, r5, r6, r7, r8, lr}
   1dc9c:	mov	r6, r1
   1dca0:	mov	r7, r2
   1dca4:	mov	r1, #0
   1dca8:	mov	r2, #232	; 0xe8
   1dcac:	mov	r4, r0
   1dcb0:	mov	r5, r3
   1dcb4:	ldr	r8, [sp, #24]
   1dcb8:	bl	12a44 <memset@plt>
   1dcbc:	cmp	r6, #0
   1dcc0:	moveq	r3, #1
   1dcc4:	ldreq	r6, [pc, #40]	; 1dcf4 <flatcc_builder_custom_init@@Base+0x5c>
   1dcc8:	addeq	r7, r4, #188	; 0xbc
   1dccc:	str	r8, [r4, #40]	; 0x28
   1dcd0:	str	r7, [r4, #36]	; 0x24
   1dcd4:	str	r6, [r4, #44]	; 0x2c
   1dcd8:	mov	r0, #0
   1dcdc:	streq	r3, [r4, #184]	; 0xb8
   1dce0:	ldr	r3, [pc, #16]	; 1dcf8 <flatcc_builder_custom_init@@Base+0x60>
   1dce4:	cmp	r5, #0
   1dce8:	moveq	r5, r3
   1dcec:	str	r5, [r4, #48]	; 0x30
   1dcf0:	pop	{r4, r5, r6, r7, r8, pc}
   1dcf4:	andeq	r3, r2, ip, asr #4
   1dcf8:	strdeq	sp, [r1], -r0

0001dcfc <flatcc_builder_init@@Base>:
   1dcfc:	push	{r4, lr}
   1dd00:	mov	r2, #232	; 0xe8
   1dd04:	mov	r1, #0
   1dd08:	mov	r4, r0
   1dd0c:	bl	12a44 <memset@plt>
   1dd10:	ldr	r1, [pc, #32]	; 1dd38 <flatcc_builder_init@@Base+0x3c>
   1dd14:	ldr	r3, [pc, #32]	; 1dd3c <flatcc_builder_init@@Base+0x40>
   1dd18:	mov	r0, #1
   1dd1c:	add	r2, r4, #188	; 0xbc
   1dd20:	str	r0, [r4, #184]	; 0xb8
   1dd24:	str	r1, [r4, #48]	; 0x30
   1dd28:	str	r2, [r4, #36]	; 0x24
   1dd2c:	str	r3, [r4, #44]	; 0x2c
   1dd30:	mov	r0, #0
   1dd34:	pop	{r4, pc}
   1dd38:	strdeq	sp, [r1], -r0
   1dd3c:	andeq	r3, r2, ip, asr #4

0001dd40 <flatcc_builder_custom_reset@@Base>:
   1dd40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd44:	add	r7, r0, #52	; 0x34
   1dd48:	mov	r4, #0
   1dd4c:	sub	sp, sp, #12
   1dd50:	mov	r5, r0
   1dd54:	mov	sl, r1
   1dd58:	mov	r8, r2
   1dd5c:	mov	r6, r7
   1dd60:	mov	r9, r4
   1dd64:	mov	fp, #1
   1dd68:	b	1ddbc <flatcc_builder_custom_reset@@Base+0x7c>
   1dd6c:	cmp	r4, #5
   1dd70:	cmpne	r8, #0
   1dd74:	beq	1dda0 <flatcc_builder_custom_reset@@Base+0x60>
   1dd78:	ldr	r0, [r5, #40]	; 0x28
   1dd7c:	mov	r3, fp
   1dd80:	str	r4, [sp]
   1dd84:	mov	r2, #1
   1dd88:	mov	r1, r6
   1dd8c:	ldr	ip, [r5, #48]	; 0x30
   1dd90:	blx	ip
   1dd94:	cmp	r0, #0
   1dd98:	bne	1de70 <flatcc_builder_custom_reset@@Base+0x130>
   1dd9c:	ldr	r0, [r7, r4, lsl #3]
   1dda0:	ldr	r2, [r6, #4]
   1dda4:	mov	r1, r9
   1dda8:	bl	12a44 <memset@plt>
   1ddac:	add	r4, r4, #1
   1ddb0:	cmp	r4, #8
   1ddb4:	add	r6, r6, #8
   1ddb8:	beq	1dde8 <flatcc_builder_custom_reset@@Base+0xa8>
   1ddbc:	ldr	r0, [r7, r4, lsl #3]
   1ddc0:	cmp	r0, #0
   1ddc4:	bne	1dd6c <flatcc_builder_custom_reset@@Base+0x2c>
   1ddc8:	ldr	r3, [r6, #4]
   1ddcc:	cmp	r3, #0
   1ddd0:	beq	1ddac <flatcc_builder_custom_reset@@Base+0x6c>
   1ddd4:	ldr	r3, [pc, #156]	; 1de78 <flatcc_builder_custom_reset@@Base+0x138>
   1ddd8:	ldr	r2, [pc, #156]	; 1de7c <flatcc_builder_custom_reset@@Base+0x13c>
   1dddc:	ldr	r1, [pc, #156]	; 1de80 <flatcc_builder_custom_reset@@Base+0x140>
   1dde0:	ldr	r0, [pc, #156]	; 1de84 <flatcc_builder_custom_reset@@Base+0x144>
   1dde4:	bl	12a8c <__assert_fail@plt>
   1dde8:	ldr	r2, [r5, #124]	; 0x7c
   1ddec:	mov	r3, #0
   1ddf0:	ldr	r0, [r5, #60]	; 0x3c
   1ddf4:	cmp	r2, r3
   1ddf8:	str	r3, [r5, #120]	; 0x78
   1ddfc:	ldr	r1, [r5, #76]	; 0x4c
   1de00:	movne	r3, #16
   1de04:	ldr	r2, [r5, #52]	; 0x34
   1de08:	str	r0, [r5, #16]
   1de0c:	ldr	r0, [r5, #184]	; 0xb8
   1de10:	strne	r3, [r5, #124]	; 0x7c
   1de14:	mov	r3, #0
   1de18:	cmp	sl, #0
   1de1c:	strne	r3, [r5, #172]	; 0xac
   1de20:	strne	r3, [r5, #176]	; 0xb0
   1de24:	strne	r3, [r5, #180]	; 0xb4
   1de28:	cmp	r0, #0
   1de2c:	stm	r5, {r1, r2}
   1de30:	strh	r3, [r5, #128]	; 0x80
   1de34:	str	r3, [r5, #136]	; 0x88
   1de38:	str	r3, [r5, #140]	; 0x8c
   1de3c:	str	r3, [r5, #156]	; 0x9c
   1de40:	str	r3, [r5, #160]	; 0xa0
   1de44:	str	r3, [r5, #20]
   1de48:	str	r3, [r5, #24]
   1de4c:	str	r3, [r5, #148]	; 0x94
   1de50:	str	r3, [r5, #152]	; 0x98
   1de54:	str	r3, [r5, #32]
   1de58:	beq	1de68 <flatcc_builder_custom_reset@@Base+0x128>
   1de5c:	add	r0, r5, #188	; 0xbc
   1de60:	bl	23124 <flatcc_emitter_reset@@Base>
   1de64:	mov	r0, #0
   1de68:	add	sp, sp, #12
   1de6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de70:	mvn	r0, #0
   1de74:	b	1de68 <flatcc_builder_custom_reset@@Base+0x128>
   1de78:	andeq	r8, r2, r0, asr #10
   1de7c:			; <UNDEFINED> instruction: 0x000001b2
   1de80:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1de84:	andeq	r8, r2, r4, lsr #21

0001de88 <flatcc_builder_reset@@Base>:
   1de88:	push	{r4, r5, r6, r7, r8, lr}
   1de8c:	mov	r5, r0
   1de90:	add	r4, r0, #52	; 0x34
   1de94:	add	r6, r0, #116	; 0x74
   1de98:	mov	r7, #0
   1de9c:	b	1deb8 <flatcc_builder_reset@@Base+0x30>
   1dea0:	ldr	r2, [r4, #4]
   1dea4:	mov	r1, r7
   1dea8:	bl	12a44 <memset@plt>
   1deac:	add	r4, r4, #8
   1deb0:	cmp	r6, r4
   1deb4:	beq	1dee4 <flatcc_builder_reset@@Base+0x5c>
   1deb8:	ldr	r0, [r4]
   1debc:	cmp	r0, #0
   1dec0:	bne	1dea0 <flatcc_builder_reset@@Base+0x18>
   1dec4:	ldr	r3, [r4, #4]
   1dec8:	cmp	r3, #0
   1decc:	beq	1deac <flatcc_builder_reset@@Base+0x24>
   1ded0:	ldr	r3, [pc, #128]	; 1df58 <flatcc_builder_reset@@Base+0xd0>
   1ded4:	ldr	r2, [pc, #128]	; 1df5c <flatcc_builder_reset@@Base+0xd4>
   1ded8:	ldr	r1, [pc, #128]	; 1df60 <flatcc_builder_reset@@Base+0xd8>
   1dedc:	ldr	r0, [pc, #128]	; 1df64 <flatcc_builder_reset@@Base+0xdc>
   1dee0:	bl	12a8c <__assert_fail@plt>
   1dee4:	ldr	r2, [r5, #124]	; 0x7c
   1dee8:	mov	r3, #0
   1deec:	cmp	r2, r3
   1def0:	str	r3, [r5, #120]	; 0x78
   1def4:	movne	r3, #16
   1def8:	strne	r3, [r5, #124]	; 0x7c
   1defc:	ldr	r1, [r5, #76]	; 0x4c
   1df00:	ldr	r3, [r5, #184]	; 0xb8
   1df04:	ldr	r2, [r5, #52]	; 0x34
   1df08:	ldr	r0, [r5, #60]	; 0x3c
   1df0c:	cmp	r3, #0
   1df10:	mov	r3, #0
   1df14:	str	r0, [r5, #16]
   1df18:	stm	r5, {r1, r2}
   1df1c:	strh	r3, [r5, #128]	; 0x80
   1df20:	str	r3, [r5, #136]	; 0x88
   1df24:	str	r3, [r5, #140]	; 0x8c
   1df28:	str	r3, [r5, #156]	; 0x9c
   1df2c:	str	r3, [r5, #160]	; 0xa0
   1df30:	str	r3, [r5, #20]
   1df34:	str	r3, [r5, #24]
   1df38:	str	r3, [r5, #148]	; 0x94
   1df3c:	str	r3, [r5, #152]	; 0x98
   1df40:	str	r3, [r5, #32]
   1df44:	beq	1df50 <flatcc_builder_reset@@Base+0xc8>
   1df48:	add	r0, r5, #188	; 0xbc
   1df4c:	bl	23124 <flatcc_emitter_reset@@Base>
   1df50:	mov	r0, #0
   1df54:	pop	{r4, r5, r6, r7, r8, pc}
   1df58:	andeq	r8, r2, r0, asr #10
   1df5c:			; <UNDEFINED> instruction: 0x000001b2
   1df60:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1df64:	andeq	r8, r2, r4, lsr #21

0001df68 <flatcc_builder_clear@@Base>:
   1df68:	push	{r4, r5, r6, r7, r8, lr}
   1df6c:	mov	r4, #0
   1df70:	sub	sp, sp, #8
   1df74:	mov	r6, r0
   1df78:	add	r5, r0, #52	; 0x34
   1df7c:	mov	r8, r4
   1df80:	ldr	r0, [r6, #40]	; 0x28
   1df84:	mov	r1, r5
   1df88:	str	r4, [sp]
   1df8c:	mov	r3, r8
   1df90:	add	r4, r4, #1
   1df94:	ldr	r7, [r6, #48]	; 0x30
   1df98:	mov	r2, #0
   1df9c:	blx	r7
   1dfa0:	cmp	r4, #8
   1dfa4:	add	r5, r5, #8
   1dfa8:	bne	1df80 <flatcc_builder_clear@@Base+0x18>
   1dfac:	ldr	r3, [r6, #184]	; 0xb8
   1dfb0:	cmp	r3, #0
   1dfb4:	beq	1dfc0 <flatcc_builder_clear@@Base+0x58>
   1dfb8:	add	r0, r6, #188	; 0xbc
   1dfbc:	bl	231e0 <flatcc_emitter_clear@@Base>
   1dfc0:	mov	r0, r6
   1dfc4:	mov	r2, #232	; 0xe8
   1dfc8:	mov	r1, #0
   1dfcc:	add	sp, sp, #8
   1dfd0:	pop	{r4, r5, r6, r7, r8, lr}
   1dfd4:	b	12a44 <memset@plt>

0001dfd8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1dfd8:	push	{r4, r5, r6, r7, r8, lr}
   1dfdc:	add	r4, r1, #3
   1dfe0:	bic	r4, r4, #3
   1dfe4:	ldr	r7, [r0, #228]	; 0xe4
   1dfe8:	add	r4, r4, #4
   1dfec:	ldr	r3, [r0, #112]	; 0x70
   1dff0:	add	r2, r4, r7
   1dff4:	cmp	r2, r3
   1dff8:	sub	sp, sp, #8
   1dffc:	mov	r6, r0
   1e000:	bhi	1e048 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   1e004:	ldr	r8, [r6, #108]	; 0x6c
   1e008:	adds	r5, r8, r7
   1e00c:	beq	1e070 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1e010:	mov	r2, r4
   1e014:	mov	r1, #0
   1e018:	mov	r0, r5
   1e01c:	bl	12a44 <memset@plt>
   1e020:	ldr	r3, [r6, #224]	; 0xe0
   1e024:	add	r0, r5, #4
   1e028:	str	r3, [r8, r7]
   1e02c:	ldr	r3, [r6, #228]	; 0xe4
   1e030:	add	r4, r4, r3
   1e034:	add	r3, r3, #4
   1e038:	str	r4, [r6, #228]	; 0xe4
   1e03c:	str	r3, [r6, #224]	; 0xe0
   1e040:	add	sp, sp, #8
   1e044:	pop	{r4, r5, r6, r7, r8, pc}
   1e048:	mov	r3, #7
   1e04c:	ldr	r0, [r0, #40]	; 0x28
   1e050:	add	r1, r6, #108	; 0x6c
   1e054:	str	r3, [sp]
   1e058:	mov	r3, #0
   1e05c:	ldr	r5, [r6, #48]	; 0x30
   1e060:	blx	r5
   1e064:	cmp	r0, #0
   1e068:	beq	1e004 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   1e06c:	bl	1306c <__assert_fail@plt+0x5e0>
   1e070:	mov	r0, r5
   1e074:	b	1e040 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

0001e078 <flatcc_builder_enter_user_frame@@Base>:
   1e078:	push	{r4, r5, r6, r7, lr}
   1e07c:	add	r4, r1, #3
   1e080:	bic	r4, r4, #3
   1e084:	ldr	r6, [r0, #228]	; 0xe4
   1e088:	add	r4, r4, #4
   1e08c:	ldr	r3, [r0, #112]	; 0x70
   1e090:	add	r2, r4, r6
   1e094:	cmp	r2, r3
   1e098:	sub	sp, sp, #12
   1e09c:	mov	r5, r0
   1e0a0:	bhi	1e0e0 <flatcc_builder_enter_user_frame@@Base+0x68>
   1e0a4:	ldr	r7, [r5, #108]	; 0x6c
   1e0a8:	adds	r0, r7, r6
   1e0ac:	beq	1e0d8 <flatcc_builder_enter_user_frame@@Base+0x60>
   1e0b0:	mov	r2, r4
   1e0b4:	mov	r1, #0
   1e0b8:	bl	12a44 <memset@plt>
   1e0bc:	ldr	r3, [r5, #224]	; 0xe0
   1e0c0:	str	r3, [r7, r6]
   1e0c4:	ldr	r0, [r5, #228]	; 0xe4
   1e0c8:	add	r4, r4, r0
   1e0cc:	add	r0, r0, #4
   1e0d0:	str	r4, [r5, #228]	; 0xe4
   1e0d4:	str	r0, [r5, #224]	; 0xe0
   1e0d8:	add	sp, sp, #12
   1e0dc:	pop	{r4, r5, r6, r7, pc}
   1e0e0:	mov	r3, #7
   1e0e4:	ldr	r0, [r0, #40]	; 0x28
   1e0e8:	add	r1, r5, #108	; 0x6c
   1e0ec:	str	r3, [sp]
   1e0f0:	mov	r3, #0
   1e0f4:	ldr	r7, [r5, #48]	; 0x30
   1e0f8:	blx	r7
   1e0fc:	cmp	r0, #0
   1e100:	beq	1e0a4 <flatcc_builder_enter_user_frame@@Base+0x2c>
   1e104:	bl	1306c <__assert_fail@plt+0x5e0>

0001e108 <flatcc_builder_exit_user_frame@@Base>:
   1e108:	ldr	r3, [r0, #224]	; 0xe0
   1e10c:	cmp	r3, #0
   1e110:	beq	1e134 <flatcc_builder_exit_user_frame@@Base+0x2c>
   1e114:	ldr	r2, [r0, #108]	; 0x6c
   1e118:	sub	r1, r3, #4
   1e11c:	add	r3, r2, r3
   1e120:	str	r1, [r0, #228]	; 0xe4
   1e124:	ldr	r3, [r3, #-4]
   1e128:	str	r3, [r0, #224]	; 0xe0
   1e12c:	mov	r0, r3
   1e130:	bx	lr
   1e134:	push	{r4, lr}
   1e138:	bl	13104 <__assert_fail@plt+0x678>

0001e13c <flatcc_builder_exit_user_frame_at@@Base>:
   1e13c:	ldr	r3, [r0, #224]	; 0xe0
   1e140:	push	{r4, lr}
   1e144:	cmp	r3, r1
   1e148:	bcc	1e178 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   1e14c:	cmp	r1, #0
   1e150:	str	r1, [r0, #224]	; 0xe0
   1e154:	beq	1e18c <flatcc_builder_exit_user_frame_at@@Base+0x50>
   1e158:	ldr	r3, [r0, #108]	; 0x6c
   1e15c:	sub	r2, r1, #4
   1e160:	add	r1, r3, r1
   1e164:	str	r2, [r0, #228]	; 0xe4
   1e168:	ldr	r3, [r1, #-4]
   1e16c:	str	r3, [r0, #224]	; 0xe0
   1e170:	mov	r0, r3
   1e174:	pop	{r4, pc}
   1e178:	ldr	r3, [pc, #16]	; 1e190 <flatcc_builder_exit_user_frame_at@@Base+0x54>
   1e17c:	ldr	r2, [pc, #16]	; 1e194 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   1e180:	ldr	r1, [pc, #16]	; 1e198 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   1e184:	ldr	r0, [pc, #16]	; 1e19c <flatcc_builder_exit_user_frame_at@@Base+0x60>
   1e188:	bl	12a8c <__assert_fail@plt>
   1e18c:	bl	13104 <__assert_fail@plt+0x678>
   1e190:	andeq	r8, r2, ip, asr r5
   1e194:	andeq	r0, r0, r7, lsr #4
   1e198:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1e19c:			; <UNDEFINED> instruction: 0x00028ab8

0001e1a0 <flatcc_builder_get_current_user_frame@@Base>:
   1e1a0:	ldr	r0, [r0, #224]	; 0xe0
   1e1a4:	bx	lr

0001e1a8 <flatcc_builder_get_user_frame_ptr@@Base>:
   1e1a8:	ldr	r0, [r0, #108]	; 0x6c
   1e1ac:	add	r0, r0, r1
   1e1b0:	bx	lr

0001e1b4 <flatcc_builder_embed_buffer@@Base>:
   1e1b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1b8:	sub	sp, sp, #92	; 0x5c
   1e1bc:	cmp	r1, #0
   1e1c0:	ldr	r6, [sp, #132]	; 0x84
   1e1c4:	mov	r8, r2
   1e1c8:	mov	r5, r0
   1e1cc:	mov	r7, r3
   1e1d0:	ldr	r2, [r0, #152]	; 0x98
   1e1d4:	and	r6, r6, #2
   1e1d8:	ldrh	r4, [sp, #128]	; 0x80
   1e1dc:	bne	1e1ec <flatcc_builder_embed_buffer@@Base+0x38>
   1e1e0:	ldrh	r1, [r0, #132]	; 0x84
   1e1e4:	cmp	r1, #0
   1e1e8:	beq	1e374 <flatcc_builder_embed_buffer@@Base+0x1c0>
   1e1ec:	cmp	r4, #4
   1e1f0:	movcc	r4, #4
   1e1f4:	cmp	r1, r4
   1e1f8:	movcs	r4, r1
   1e1fc:	cmp	r2, #0
   1e200:	bne	1e268 <flatcc_builder_embed_buffer@@Base+0xb4>
   1e204:	ldr	r9, [r5, #140]	; 0x8c
   1e208:	sub	r1, r1, #1
   1e20c:	ands	r1, r1, r9
   1e210:	beq	1e268 <flatcc_builder_embed_buffer@@Base+0xb4>
   1e214:	add	r3, r9, r1
   1e218:	ldr	sl, [pc, #420]	; 1e3c4 <flatcc_builder_embed_buffer@@Base+0x210>
   1e21c:	mov	r2, #1
   1e220:	cmp	r9, r3
   1e224:	str	r1, [sp, #16]
   1e228:	str	r1, [sp, #28]
   1e22c:	str	sl, [sp, #24]
   1e230:	str	r3, [r5, #140]	; 0x8c
   1e234:	str	r2, [sp, #20]
   1e238:	bgt	1e398 <flatcc_builder_embed_buffer@@Base+0x1e4>
   1e23c:	ldr	r0, [r5, #36]	; 0x24
   1e240:	mov	r3, r9
   1e244:	str	r1, [sp]
   1e248:	add	r1, sp, #24
   1e24c:	ldr	fp, [r5, #44]	; 0x2c
   1e250:	blx	fp
   1e254:	cmp	r0, #0
   1e258:	bne	1e39c <flatcc_builder_embed_buffer@@Base+0x1e8>
   1e25c:	cmn	r9, #1
   1e260:	beq	1e3b0 <flatcc_builder_embed_buffer@@Base+0x1fc>
   1e264:	ldr	r2, [r5, #152]	; 0x98
   1e268:	ldr	r1, [r5, #136]	; 0x88
   1e26c:	cmp	r6, #0
   1e270:	movne	r6, #4
   1e274:	moveq	r6, #0
   1e278:	sub	r3, r1, r7
   1e27c:	sub	r6, r3, r6
   1e280:	sub	r4, r4, #1
   1e284:	and	r4, r4, r6
   1e288:	mov	r3, #0
   1e28c:	add	r0, r7, r4
   1e290:	cmp	r2, #0
   1e294:	str	r0, [sp, #12]
   1e298:	str	r3, [sp, #16]
   1e29c:	str	r3, [sp, #20]
   1e2a0:	bne	1e34c <flatcc_builder_embed_buffer@@Base+0x198>
   1e2a4:	mov	r3, r2
   1e2a8:	mov	ip, #2
   1e2ac:	mov	r0, #1
   1e2b0:	cmp	r7, #0
   1e2b4:	beq	1e2e0 <flatcc_builder_embed_buffer@@Base+0x12c>
   1e2b8:	add	r2, r2, #1
   1e2bc:	add	lr, sp, #88	; 0x58
   1e2c0:	add	r2, lr, r2, lsl #3
   1e2c4:	add	r3, r3, r7
   1e2c8:	str	r3, [sp, #16]
   1e2cc:	str	r8, [r2, #-72]	; 0xffffffb8
   1e2d0:	str	r7, [r2, #-68]	; 0xffffffbc
   1e2d4:	mov	r2, r0
   1e2d8:	str	r0, [sp, #20]
   1e2dc:	mov	r0, ip
   1e2e0:	cmp	r4, #0
   1e2e4:	beq	1e310 <flatcc_builder_embed_buffer@@Base+0x15c>
   1e2e8:	add	r2, r2, #1
   1e2ec:	add	ip, sp, #88	; 0x58
   1e2f0:	add	ip, ip, r2, lsl #3
   1e2f4:	ldr	lr, [pc, #200]	; 1e3c4 <flatcc_builder_embed_buffer@@Base+0x210>
   1e2f8:	mov	r2, r0
   1e2fc:	add	r3, r3, r4
   1e300:	str	r3, [sp, #16]
   1e304:	str	r4, [ip, #-68]	; 0xffffffbc
   1e308:	str	lr, [ip, #-72]	; 0xffffffb8
   1e30c:	str	r0, [sp, #20]
   1e310:	sub	r4, r1, r3
   1e314:	cmp	r1, r4
   1e318:	ble	1e380 <flatcc_builder_embed_buffer@@Base+0x1cc>
   1e31c:	ldr	r0, [r5, #36]	; 0x24
   1e320:	add	r1, sp, #24
   1e324:	str	r3, [sp]
   1e328:	mov	r3, r4
   1e32c:	ldr	r6, [r5, #44]	; 0x2c
   1e330:	blx	r6
   1e334:	cmp	r0, #0
   1e338:	bne	1e384 <flatcc_builder_embed_buffer@@Base+0x1d0>
   1e33c:	mov	r0, r4
   1e340:	str	r4, [r5, #136]	; 0x88
   1e344:	add	sp, sp, #92	; 0x5c
   1e348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e34c:	mov	r3, #4
   1e350:	add	r0, sp, #12
   1e354:	mov	r2, #1
   1e358:	str	r0, [sp, #24]
   1e35c:	str	r3, [sp, #16]
   1e360:	str	r3, [sp, #28]
   1e364:	str	r2, [sp, #20]
   1e368:	mov	ip, #3
   1e36c:	mov	r0, #2
   1e370:	b	1e2b0 <flatcc_builder_embed_buffer@@Base+0xfc>
   1e374:	cmp	r4, #4
   1e378:	movcc	r4, #4
   1e37c:	b	1e268 <flatcc_builder_embed_buffer@@Base+0xb4>
   1e380:	bl	130b8 <__assert_fail@plt+0x62c>
   1e384:	ldr	r3, [pc, #60]	; 1e3c8 <flatcc_builder_embed_buffer@@Base+0x214>
   1e388:	ldr	r2, [pc, #60]	; 1e3cc <flatcc_builder_embed_buffer@@Base+0x218>
   1e38c:	ldr	r1, [pc, #60]	; 1e3d0 <flatcc_builder_embed_buffer@@Base+0x21c>
   1e390:	ldr	r0, [pc, #60]	; 1e3d4 <flatcc_builder_embed_buffer@@Base+0x220>
   1e394:	bl	12a8c <__assert_fail@plt>
   1e398:	bl	13090 <__assert_fail@plt+0x604>
   1e39c:	ldr	r3, [pc, #52]	; 1e3d8 <flatcc_builder_embed_buffer@@Base+0x224>
   1e3a0:	ldr	r2, [pc, #52]	; 1e3dc <flatcc_builder_embed_buffer@@Base+0x228>
   1e3a4:	ldr	r1, [pc, #36]	; 1e3d0 <flatcc_builder_embed_buffer@@Base+0x21c>
   1e3a8:	ldr	r0, [pc, #36]	; 1e3d4 <flatcc_builder_embed_buffer@@Base+0x220>
   1e3ac:	bl	12a8c <__assert_fail@plt>
   1e3b0:	add	r3, sl, #608	; 0x260
   1e3b4:	ldr	r2, [pc, #36]	; 1e3e0 <flatcc_builder_embed_buffer@@Base+0x22c>
   1e3b8:	ldr	r1, [pc, #16]	; 1e3d0 <flatcc_builder_embed_buffer@@Base+0x21c>
   1e3bc:	ldr	r0, [pc, #16]	; 1e3d4 <flatcc_builder_embed_buffer@@Base+0x220>
   1e3c0:	bl	12a8c <__assert_fail@plt>
   1e3c4:	andeq	r8, r2, r0, lsr #6
   1e3c8:	andeq	r8, r2, r4, lsr #5
   1e3cc:	andeq	r0, r0, fp, lsl #5
   1e3d0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1e3d4:	muleq	r2, r0, sl
   1e3d8:	muleq	r2, r8, r2
   1e3dc:	andeq	r0, r0, r5, lsr #5
   1e3e0:			; <UNDEFINED> instruction: 0x000002be

0001e3e4 <flatcc_builder_create_buffer@@Base>:
   1e3e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3e8:	sub	sp, sp, #100	; 0x64
   1e3ec:	mov	ip, #0
   1e3f0:	ldr	r5, [sp, #140]	; 0x8c
   1e3f4:	cmp	r2, #0
   1e3f8:	mov	r6, r0
   1e3fc:	mov	r8, r1
   1e400:	mov	sl, r3
   1e404:	and	r7, r5, #1
   1e408:	str	ip, [sp, #20]
   1e40c:	ldrh	r4, [sp, #136]	; 0x88
   1e410:	bne	1e420 <flatcc_builder_create_buffer@@Base+0x3c>
   1e414:	ldrh	r2, [r0, #132]	; 0x84
   1e418:	cmp	r2, ip
   1e41c:	beq	1e62c <flatcc_builder_create_buffer@@Base+0x248>
   1e420:	cmp	r4, #4
   1e424:	movcc	r4, #4
   1e428:	cmp	r2, r4
   1e42c:	movcs	r4, r2
   1e430:	cmp	r7, #0
   1e434:	bne	1e498 <flatcc_builder_create_buffer@@Base+0xb4>
   1e438:	ldr	r9, [r6, #140]	; 0x8c
   1e43c:	sub	r2, r2, #1
   1e440:	ands	r3, r2, r9
   1e444:	beq	1e498 <flatcc_builder_create_buffer@@Base+0xb4>
   1e448:	add	r1, r9, r3
   1e44c:	ldr	fp, [pc, #584]	; 1e69c <flatcc_builder_create_buffer@@Base+0x2b8>
   1e450:	mov	r2, #1
   1e454:	cmp	r9, r1
   1e458:	str	r3, [sp, #24]
   1e45c:	str	r3, [sp, #36]	; 0x24
   1e460:	str	fp, [sp, #32]
   1e464:	str	r1, [r6, #140]	; 0x8c
   1e468:	str	r2, [sp, #28]
   1e46c:	bgt	1e684 <flatcc_builder_create_buffer@@Base+0x2a0>
   1e470:	ldr	r0, [r6, #36]	; 0x24
   1e474:	add	r1, sp, #32
   1e478:	str	r3, [sp]
   1e47c:	mov	r3, r9
   1e480:	ldr	ip, [r6, #44]	; 0x2c
   1e484:	blx	ip
   1e488:	cmp	r0, #0
   1e48c:	bne	1e688 <flatcc_builder_create_buffer@@Base+0x2a4>
   1e490:	cmn	r9, #1
   1e494:	beq	1e644 <flatcc_builder_create_buffer@@Base+0x260>
   1e498:	ldrh	r3, [r6, #128]	; 0x80
   1e49c:	ldr	r0, [r6, #136]	; 0x88
   1e4a0:	uxtb	lr, r7
   1e4a4:	cmp	r3, r4
   1e4a8:	strhcc	r4, [r6, #128]	; 0x80
   1e4ac:	cmp	r8, #0
   1e4b0:	ldreq	r1, [sp, #20]
   1e4b4:	ldrne	r1, [r8]
   1e4b8:	ldrne	r3, [r8]
   1e4bc:	strne	r3, [sp, #20]
   1e4c0:	cmp	r1, #0
   1e4c4:	movne	r1, #4
   1e4c8:	moveq	r1, #0
   1e4cc:	ands	r5, r5, #2
   1e4d0:	bne	1e5f4 <flatcc_builder_create_buffer@@Base+0x210>
   1e4d4:	sub	r3, r4, #1
   1e4d8:	sub	r4, r0, #4
   1e4dc:	cmp	lr, #0
   1e4e0:	sub	r4, r4, r1
   1e4e4:	and	r4, r4, r3
   1e4e8:	moveq	r8, #3
   1e4ec:	moveq	ip, #2
   1e4f0:	moveq	r2, #1
   1e4f4:	moveq	r3, #4
   1e4f8:	bne	1e604 <flatcc_builder_create_buffer@@Base+0x220>
   1e4fc:	add	r5, r5, #1
   1e500:	add	r9, sp, #96	; 0x60
   1e504:	add	r5, r9, r5, lsl #3
   1e508:	add	fp, sp, #12
   1e50c:	mov	r9, #4
   1e510:	cmp	r1, #0
   1e514:	str	r3, [sp, #24]
   1e518:	str	fp, [r5, #-72]	; 0xffffffb8
   1e51c:	str	r9, [r5, #-68]	; 0xffffffbc
   1e520:	str	r2, [sp, #28]
   1e524:	beq	1e554 <flatcc_builder_create_buffer@@Base+0x170>
   1e528:	add	r2, r2, #1
   1e52c:	add	r5, sp, #96	; 0x60
   1e530:	add	r2, r5, r2, lsl #3
   1e534:	add	r3, r3, r1
   1e538:	add	r5, sp, #20
   1e53c:	str	r3, [sp, #24]
   1e540:	str	r1, [r2, #-68]	; 0xffffffbc
   1e544:	str	r5, [r2, #-72]	; 0xffffffb8
   1e548:	mov	r2, ip
   1e54c:	str	ip, [sp, #28]
   1e550:	mov	ip, r8
   1e554:	cmp	r4, #0
   1e558:	beq	1e584 <flatcc_builder_create_buffer@@Base+0x1a0>
   1e55c:	add	r2, r2, #1
   1e560:	add	r1, sp, #96	; 0x60
   1e564:	add	r1, r1, r2, lsl #3
   1e568:	ldr	r5, [pc, #300]	; 1e69c <flatcc_builder_create_buffer@@Base+0x2b8>
   1e56c:	mov	r2, ip
   1e570:	add	r3, r3, r4
   1e574:	str	r3, [sp, #24]
   1e578:	str	r4, [r1, #-68]	; 0xffffffbc
   1e57c:	str	r5, [r1, #-72]	; 0xffffffb8
   1e580:	str	ip, [sp, #28]
   1e584:	sub	r4, r0, r3
   1e588:	cmp	lr, #0
   1e58c:	mov	r1, r4
   1e590:	beq	1e638 <flatcc_builder_create_buffer@@Base+0x254>
   1e594:	cmp	r7, #0
   1e598:	add	r1, r4, #4
   1e59c:	beq	1e638 <flatcc_builder_create_buffer@@Base+0x254>
   1e5a0:	ldr	ip, [r6, #144]	; 0x90
   1e5a4:	sub	ip, ip, r1
   1e5a8:	sub	sl, sl, r1
   1e5ac:	cmp	r4, r0
   1e5b0:	str	sl, [sp, #12]
   1e5b4:	str	ip, [sp, #16]
   1e5b8:	bge	1e658 <flatcc_builder_create_buffer@@Base+0x274>
   1e5bc:	ldr	r0, [r6, #36]	; 0x24
   1e5c0:	add	r1, sp, #32
   1e5c4:	str	r3, [sp]
   1e5c8:	mov	r3, r4
   1e5cc:	ldr	r5, [r6, #44]	; 0x2c
   1e5d0:	blx	r5
   1e5d4:	cmp	r0, #0
   1e5d8:	bne	1e65c <flatcc_builder_create_buffer@@Base+0x278>
   1e5dc:	cmp	r4, #0
   1e5e0:	str	r4, [r6, #136]	; 0x88
   1e5e4:	beq	1e670 <flatcc_builder_create_buffer@@Base+0x28c>
   1e5e8:	mov	r0, r4
   1e5ec:	add	sp, sp, #100	; 0x64
   1e5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5f4:	sub	r3, r0, #8
   1e5f8:	sub	r4, r4, #1
   1e5fc:	sub	r3, r3, r1
   1e600:	and	r4, r4, r3
   1e604:	add	r3, sp, #16
   1e608:	mov	r8, #4
   1e60c:	mov	r5, #1
   1e610:	str	r3, [sp, #32]
   1e614:	str	r8, [sp, #36]	; 0x24
   1e618:	mov	lr, r5
   1e61c:	mov	ip, #3
   1e620:	mov	r2, #2
   1e624:	mov	r3, #8
   1e628:	b	1e4fc <flatcc_builder_create_buffer@@Base+0x118>
   1e62c:	cmp	r4, #4
   1e630:	movcc	r4, #4
   1e634:	b	1e498 <flatcc_builder_create_buffer@@Base+0xb4>
   1e638:	ldr	ip, [r6, #140]	; 0x8c
   1e63c:	sub	ip, ip, r1
   1e640:	b	1e5a8 <flatcc_builder_create_buffer@@Base+0x1c4>
   1e644:	add	r3, fp, #608	; 0x260
   1e648:	ldr	r2, [pc, #80]	; 1e6a0 <flatcc_builder_create_buffer@@Base+0x2bc>
   1e64c:	ldr	r1, [pc, #80]	; 1e6a4 <flatcc_builder_create_buffer@@Base+0x2c0>
   1e650:	ldr	r0, [pc, #80]	; 1e6a8 <flatcc_builder_create_buffer@@Base+0x2c4>
   1e654:	bl	12a8c <__assert_fail@plt>
   1e658:	bl	130b8 <__assert_fail@plt+0x62c>
   1e65c:	ldr	r3, [pc, #72]	; 1e6ac <flatcc_builder_create_buffer@@Base+0x2c8>
   1e660:	ldr	r2, [pc, #72]	; 1e6b0 <flatcc_builder_create_buffer@@Base+0x2cc>
   1e664:	ldr	r1, [pc, #56]	; 1e6a4 <flatcc_builder_create_buffer@@Base+0x2c0>
   1e668:	ldr	r0, [pc, #56]	; 1e6a8 <flatcc_builder_create_buffer@@Base+0x2c4>
   1e66c:	bl	12a8c <__assert_fail@plt>
   1e670:	ldr	r3, [pc, #60]	; 1e6b4 <flatcc_builder_create_buffer@@Base+0x2d0>
   1e674:	mov	r2, #772	; 0x304
   1e678:	ldr	r1, [pc, #36]	; 1e6a4 <flatcc_builder_create_buffer@@Base+0x2c0>
   1e67c:	ldr	r0, [pc, #36]	; 1e6a8 <flatcc_builder_create_buffer@@Base+0x2c4>
   1e680:	bl	12a8c <__assert_fail@plt>
   1e684:	bl	13090 <__assert_fail@plt+0x604>
   1e688:	ldr	r3, [pc, #40]	; 1e6b8 <flatcc_builder_create_buffer@@Base+0x2d4>
   1e68c:	ldr	r2, [pc, #40]	; 1e6bc <flatcc_builder_create_buffer@@Base+0x2d8>
   1e690:	ldr	r1, [pc, #12]	; 1e6a4 <flatcc_builder_create_buffer@@Base+0x2c0>
   1e694:	ldr	r0, [pc, #12]	; 1e6a8 <flatcc_builder_create_buffer@@Base+0x2c4>
   1e698:	bl	12a8c <__assert_fail@plt>
   1e69c:	andeq	r8, r2, r0, lsr #6
   1e6a0:			; <UNDEFINED> instruction: 0x000002be
   1e6a4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1e6a8:	muleq	r2, r0, sl
   1e6ac:	andeq	r8, r2, r4, lsr #5
   1e6b0:	andeq	r0, r0, fp, lsl #5
   1e6b4:	muleq	r2, r0, r5
   1e6b8:	muleq	r2, r8, r2
   1e6bc:	andeq	r0, r0, r5, lsr #5

0001e6c0 <flatcc_builder_create_struct@@Base>:
   1e6c0:	cmp	r3, #0
   1e6c4:	push	{r4, r5, r6, lr}
   1e6c8:	sub	sp, sp, #80	; 0x50
   1e6cc:	beq	1e7b8 <flatcc_builder_create_struct@@Base+0xf8>
   1e6d0:	mov	ip, r2
   1e6d4:	ldrh	r2, [r0, #128]	; 0x80
   1e6d8:	mov	r5, r0
   1e6dc:	cmp	r2, r3
   1e6e0:	strhcc	r3, [r0, #128]	; 0x80
   1e6e4:	ldr	r0, [r0, #136]	; 0x88
   1e6e8:	mov	r2, #0
   1e6ec:	sub	r3, r3, #1
   1e6f0:	sub	r4, r0, ip
   1e6f4:	cmp	ip, #0
   1e6f8:	and	r3, r3, r4
   1e6fc:	str	r2, [sp, #8]
   1e700:	str	r2, [sp, #12]
   1e704:	bne	1e778 <flatcc_builder_create_struct@@Base+0xb8>
   1e708:	cmp	r3, #0
   1e70c:	movne	r2, #1
   1e710:	movne	r1, ip
   1e714:	beq	1e7a0 <flatcc_builder_create_struct@@Base+0xe0>
   1e718:	add	r1, r1, #1
   1e71c:	add	r4, sp, #80	; 0x50
   1e720:	add	ip, ip, r3
   1e724:	add	r1, r4, r1, lsl #3
   1e728:	ldr	lr, [pc, #156]	; 1e7cc <flatcc_builder_create_struct@@Base+0x10c>
   1e72c:	sub	r4, r0, ip
   1e730:	str	r3, [r1, #-68]	; 0xffffffbc
   1e734:	str	ip, [sp, #8]
   1e738:	str	r2, [sp, #12]
   1e73c:	str	lr, [r1, #-72]	; 0xffffffb8
   1e740:	cmp	r0, r4
   1e744:	ble	1e7a0 <flatcc_builder_create_struct@@Base+0xe0>
   1e748:	ldr	r0, [r5, #36]	; 0x24
   1e74c:	mov	r3, r4
   1e750:	str	ip, [sp]
   1e754:	add	r1, sp, #16
   1e758:	ldr	r6, [r5, #44]	; 0x2c
   1e75c:	blx	r6
   1e760:	cmp	r0, #0
   1e764:	bne	1e7a4 <flatcc_builder_create_struct@@Base+0xe4>
   1e768:	mov	r0, r4
   1e76c:	str	r4, [r5, #136]	; 0x88
   1e770:	add	sp, sp, #80	; 0x50
   1e774:	pop	{r4, r5, r6, pc}
   1e778:	cmp	r3, r2
   1e77c:	mov	r2, #1
   1e780:	str	r1, [sp, #16]
   1e784:	str	r2, [sp, #12]
   1e788:	movne	r1, r2
   1e78c:	str	ip, [sp, #8]
   1e790:	str	ip, [sp, #20]
   1e794:	movne	r2, #2
   1e798:	beq	1e740 <flatcc_builder_create_struct@@Base+0x80>
   1e79c:	b	1e718 <flatcc_builder_create_struct@@Base+0x58>
   1e7a0:	bl	130b8 <__assert_fail@plt+0x62c>
   1e7a4:	ldr	r3, [pc, #36]	; 1e7d0 <flatcc_builder_create_struct@@Base+0x110>
   1e7a8:	ldr	r2, [pc, #36]	; 1e7d4 <flatcc_builder_create_struct@@Base+0x114>
   1e7ac:	ldr	r1, [pc, #36]	; 1e7d8 <flatcc_builder_create_struct@@Base+0x118>
   1e7b0:	ldr	r0, [pc, #36]	; 1e7dc <flatcc_builder_create_struct@@Base+0x11c>
   1e7b4:	bl	12a8c <__assert_fail@plt>
   1e7b8:	ldr	r3, [pc, #32]	; 1e7e0 <flatcc_builder_create_struct@@Base+0x120>
   1e7bc:	ldr	r2, [pc, #32]	; 1e7e4 <flatcc_builder_create_struct@@Base+0x124>
   1e7c0:	ldr	r1, [pc, #16]	; 1e7d8 <flatcc_builder_create_struct@@Base+0x118>
   1e7c4:	ldr	r0, [pc, #28]	; 1e7e8 <flatcc_builder_create_struct@@Base+0x128>
   1e7c8:	bl	12a8c <__assert_fail@plt>
   1e7cc:	andeq	r8, r2, r0, lsr #6
   1e7d0:	andeq	r8, r2, r4, lsr #5
   1e7d4:	andeq	r0, r0, fp, lsl #5
   1e7d8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1e7dc:	muleq	r2, r0, sl
   1e7e0:			; <UNDEFINED> instruction: 0x000285b0
   1e7e4:	andeq	r0, r0, pc, lsl #6
   1e7e8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

0001e7ec <flatcc_builder_start_buffer@@Base>:
   1e7ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e7f0:	mov	r4, r0
   1e7f4:	ldr	r0, [r0, #156]	; 0x9c
   1e7f8:	ldr	ip, [r4, #160]	; 0xa0
   1e7fc:	mov	r5, r1
   1e800:	add	r1, r0, #1
   1e804:	cmp	r1, ip
   1e808:	sub	sp, sp, #8
   1e80c:	mov	r7, r2
   1e810:	mov	r6, r3
   1e814:	str	r1, [r4, #156]	; 0x9c
   1e818:	ldrh	r8, [r4, #128]	; 0x80
   1e81c:	ble	1e88c <flatcc_builder_start_buffer@@Base+0xa0>
   1e820:	ldr	r3, [r4, #176]	; 0xb0
   1e824:	cmp	r3, #0
   1e828:	cmpgt	r1, r3
   1e82c:	movgt	r3, #1
   1e830:	movle	r3, #0
   1e834:	bgt	1e968 <flatcc_builder_start_buffer@@Base+0x17c>
   1e838:	add	r0, r0, r0, lsl #3
   1e83c:	ldr	r1, [r4, #88]	; 0x58
   1e840:	lsl	r9, r0, #2
   1e844:	add	r2, r9, #36	; 0x24
   1e848:	cmp	r2, r1
   1e84c:	bhi	1e944 <flatcc_builder_start_buffer@@Base+0x158>
   1e850:	ldr	r3, [r4, #84]	; 0x54
   1e854:	add	r3, r3, r9
   1e858:	cmp	r3, #0
   1e85c:	str	r3, [r4, #32]
   1e860:	beq	1e968 <flatcc_builder_start_buffer@@Base+0x17c>
   1e864:	ldr	r2, [r4, #88]	; 0x58
   1e868:	ldr	r0, [pc, #256]	; 1e970 <flatcc_builder_start_buffer@@Base+0x184>
   1e86c:	ldr	r1, [r4, #176]	; 0xb0
   1e870:	umull	r0, r2, r0, r2
   1e874:	lsr	r2, r2, #3
   1e878:	cmp	r1, #0
   1e87c:	cmpgt	r2, r1
   1e880:	str	r2, [r4, #160]	; 0xa0
   1e884:	strgt	r1, [r4, #160]	; 0xa0
   1e888:	b	1e898 <flatcc_builder_start_buffer@@Base+0xac>
   1e88c:	ldr	r3, [r4, #32]
   1e890:	add	r3, r3, #36	; 0x24
   1e894:	str	r3, [r4, #32]
   1e898:	ldr	r0, [r4, #20]
   1e89c:	ldr	r1, [r4, #28]
   1e8a0:	ldrh	lr, [r4, #130]	; 0x82
   1e8a4:	ldrh	ip, [r4, #132]	; 0x84
   1e8a8:	add	r2, r0, r1
   1e8ac:	add	r2, r2, #7
   1e8b0:	str	r0, [r3, #8]
   1e8b4:	strh	lr, [r3, #12]
   1e8b8:	bic	r2, r2, #7
   1e8bc:	strh	r8, [r4, #130]	; 0x82
   1e8c0:	mvn	lr, #3
   1e8c4:	str	r1, [r3]
   1e8c8:	mov	r0, #0
   1e8cc:	mov	r1, #1
   1e8d0:	str	lr, [r3, #4]
   1e8d4:	str	r2, [r4, #28]
   1e8d8:	str	r0, [r4, #20]
   1e8dc:	strh	r1, [r4, #128]	; 0x80
   1e8e0:	strh	ip, [r3, #34]	; 0x22
   1e8e4:	ldrh	r2, [r4, #164]	; 0xa4
   1e8e8:	strh	r7, [r4, #132]	; 0x84
   1e8ec:	ldr	ip, [pc, #128]	; 1e974 <flatcc_builder_start_buffer@@Base+0x188>
   1e8f0:	strh	r2, [r3, #32]
   1e8f4:	ldr	r2, [r4, #144]	; 0x90
   1e8f8:	strh	r6, [r4, #164]	; 0xa4
   1e8fc:	str	r2, [r3, #20]
   1e900:	ldr	r2, [r4, #152]	; 0x98
   1e904:	cmp	r5, r0
   1e908:	str	r2, [r3, #28]
   1e90c:	ldr	r2, [r4, #148]	; 0x94
   1e910:	ldr	lr, [r4, #136]	; 0x88
   1e914:	moveq	r5, ip
   1e918:	ldr	ip, [r4, #168]	; 0xa8
   1e91c:	add	r6, r2, r1
   1e920:	str	r2, [r4, #152]	; 0x98
   1e924:	str	r6, [r4, #148]	; 0x94
   1e928:	str	lr, [r4, #144]	; 0x90
   1e92c:	str	ip, [r3, #16]
   1e930:	ldr	r2, [r5]
   1e934:	str	r2, [r4, #168]	; 0xa8
   1e938:	strh	r1, [r3, #14]
   1e93c:	add	sp, sp, #8
   1e940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e944:	mov	r1, #4
   1e948:	ldr	r0, [r4, #40]	; 0x28
   1e94c:	str	r1, [sp]
   1e950:	add	r1, r4, #84	; 0x54
   1e954:	ldr	sl, [r4, #48]	; 0x30
   1e958:	blx	sl
   1e95c:	cmp	r0, #0
   1e960:	beq	1e850 <flatcc_builder_start_buffer@@Base+0x64>
   1e964:	bl	1306c <__assert_fail@plt+0x5e0>
   1e968:	mvn	r0, #0
   1e96c:	b	1e93c <flatcc_builder_start_buffer@@Base+0x150>
   1e970:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1e974:	andeq	r8, r2, r0, lsr #6

0001e978 <flatcc_builder_end_buffer@@Base>:
   1e978:	ldr	r3, [r0, #32]
   1e97c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e980:	sub	sp, sp, #100	; 0x64
   1e984:	ldrh	r5, [r0, #164]	; 0xa4
   1e988:	ldrh	r3, [r3, #14]
   1e98c:	ldr	r2, [r0, #152]	; 0x98
   1e990:	and	r5, r5, #2
   1e994:	cmp	r2, #0
   1e998:	orrne	r5, r5, #1
   1e99c:	cmp	r3, #1
   1e9a0:	bne	1ec8c <flatcc_builder_end_buffer@@Base+0x314>
   1e9a4:	ldrh	r3, [r0, #132]	; 0x84
   1e9a8:	ldrh	r2, [r0, #128]	; 0x80
   1e9ac:	mov	r9, r1
   1e9b0:	mov	r1, #0
   1e9b4:	cmp	r3, r2
   1e9b8:	movhi	r2, r3
   1e9bc:	strhhi	r3, [r0, #128]	; 0x80
   1e9c0:	cmp	r3, #0
   1e9c4:	mov	r4, r0
   1e9c8:	str	r1, [sp, #20]
   1e9cc:	and	r7, r5, #1
   1e9d0:	beq	1ec38 <flatcc_builder_end_buffer@@Base+0x2c0>
   1e9d4:	cmp	r3, #4
   1e9d8:	movcc	r6, #4
   1e9dc:	movcs	r6, r3
   1e9e0:	cmp	r6, r2
   1e9e4:	movcc	r6, r2
   1e9e8:	cmp	r7, r1
   1e9ec:	bne	1ea54 <flatcc_builder_end_buffer@@Base+0xdc>
   1e9f0:	ldr	r8, [r0, #140]	; 0x8c
   1e9f4:	sub	r3, r3, #1
   1e9f8:	ands	r3, r3, r8
   1e9fc:	beq	1ea54 <flatcc_builder_end_buffer@@Base+0xdc>
   1ea00:	add	r1, r8, r3
   1ea04:	ldr	sl, [pc, #748]	; 1ecf8 <flatcc_builder_end_buffer@@Base+0x380>
   1ea08:	mov	r2, #1
   1ea0c:	cmp	r8, r1
   1ea10:	str	r3, [sp, #24]
   1ea14:	str	r3, [sp, #36]	; 0x24
   1ea18:	str	sl, [sp, #32]
   1ea1c:	str	r1, [r0, #140]	; 0x8c
   1ea20:	str	r2, [sp, #28]
   1ea24:	bgt	1ece0 <flatcc_builder_end_buffer@@Base+0x368>
   1ea28:	ldr	r0, [r0, #36]	; 0x24
   1ea2c:	add	r1, sp, #32
   1ea30:	str	r3, [sp]
   1ea34:	mov	r3, r8
   1ea38:	ldr	fp, [r4, #44]	; 0x2c
   1ea3c:	blx	fp
   1ea40:	cmp	r0, #0
   1ea44:	bne	1ece4 <flatcc_builder_end_buffer@@Base+0x36c>
   1ea48:	cmn	r8, #1
   1ea4c:	beq	1eccc <flatcc_builder_end_buffer@@Base+0x354>
   1ea50:	ldrh	r2, [r4, #128]	; 0x80
   1ea54:	ldr	r3, [r4, #168]	; 0xa8
   1ea58:	cmp	r2, r6
   1ea5c:	strhcc	r6, [r4, #128]	; 0x80
   1ea60:	cmp	r3, #0
   1ea64:	movne	r1, #4
   1ea68:	moveq	r1, #0
   1ea6c:	ands	r5, r5, #2
   1ea70:	uxtb	ip, r7
   1ea74:	str	r3, [sp, #20]
   1ea78:	ldr	r0, [r4, #136]	; 0x88
   1ea7c:	bne	1ec48 <flatcc_builder_end_buffer@@Base+0x2d0>
   1ea80:	sub	r3, r6, #1
   1ea84:	sub	r6, r0, #4
   1ea88:	cmp	ip, #0
   1ea8c:	sub	r6, r6, r1
   1ea90:	and	r6, r6, r3
   1ea94:	moveq	r8, #3
   1ea98:	moveq	lr, #2
   1ea9c:	moveq	r2, #1
   1eaa0:	moveq	r3, #4
   1eaa4:	bne	1ec58 <flatcc_builder_end_buffer@@Base+0x2e0>
   1eaa8:	add	r5, r5, #1
   1eaac:	add	sl, sp, #96	; 0x60
   1eab0:	add	r5, sl, r5, lsl #3
   1eab4:	add	fp, sp, #12
   1eab8:	mov	sl, #4
   1eabc:	cmp	r1, #0
   1eac0:	str	r3, [sp, #24]
   1eac4:	str	fp, [r5, #-72]	; 0xffffffb8
   1eac8:	str	sl, [r5, #-68]	; 0xffffffbc
   1eacc:	str	r2, [sp, #28]
   1ead0:	beq	1eb00 <flatcc_builder_end_buffer@@Base+0x188>
   1ead4:	add	r2, r2, #1
   1ead8:	add	r5, sp, #96	; 0x60
   1eadc:	add	r2, r5, r2, lsl #3
   1eae0:	add	r3, r3, r1
   1eae4:	add	r5, sp, #20
   1eae8:	str	r3, [sp, #24]
   1eaec:	str	r1, [r2, #-68]	; 0xffffffbc
   1eaf0:	str	r5, [r2, #-72]	; 0xffffffb8
   1eaf4:	mov	r2, lr
   1eaf8:	str	lr, [sp, #28]
   1eafc:	mov	lr, r8
   1eb00:	cmp	r6, #0
   1eb04:	beq	1eb30 <flatcc_builder_end_buffer@@Base+0x1b8>
   1eb08:	add	r2, r2, #1
   1eb0c:	add	r1, sp, #96	; 0x60
   1eb10:	add	r1, r1, r2, lsl #3
   1eb14:	ldr	r5, [pc, #476]	; 1ecf8 <flatcc_builder_end_buffer@@Base+0x380>
   1eb18:	mov	r2, lr
   1eb1c:	add	r3, r3, r6
   1eb20:	str	r3, [sp, #24]
   1eb24:	str	r6, [r1, #-68]	; 0xffffffbc
   1eb28:	str	r5, [r1, #-72]	; 0xffffffb8
   1eb2c:	str	lr, [sp, #28]
   1eb30:	sub	r5, r0, r3
   1eb34:	cmp	ip, #0
   1eb38:	mov	r1, r5
   1eb3c:	beq	1ec80 <flatcc_builder_end_buffer@@Base+0x308>
   1eb40:	cmp	r7, #0
   1eb44:	add	r1, r5, #4
   1eb48:	beq	1ec80 <flatcc_builder_end_buffer@@Base+0x308>
   1eb4c:	ldr	ip, [r4, #144]	; 0x90
   1eb50:	sub	ip, ip, r1
   1eb54:	sub	r9, r9, r1
   1eb58:	cmp	r5, r0
   1eb5c:	str	r9, [sp, #12]
   1eb60:	str	ip, [sp, #16]
   1eb64:	bge	1eca0 <flatcc_builder_end_buffer@@Base+0x328>
   1eb68:	ldr	r0, [r4, #36]	; 0x24
   1eb6c:	add	r1, sp, #32
   1eb70:	str	r3, [sp]
   1eb74:	mov	r3, r5
   1eb78:	ldr	r6, [r4, #44]	; 0x2c
   1eb7c:	blx	r6
   1eb80:	subs	r1, r0, #0
   1eb84:	bne	1eca4 <flatcc_builder_end_buffer@@Base+0x32c>
   1eb88:	cmp	r5, #0
   1eb8c:	str	r5, [r4, #136]	; 0x88
   1eb90:	beq	1ecb8 <flatcc_builder_end_buffer@@Base+0x340>
   1eb94:	ldr	r3, [r4, #32]
   1eb98:	ldr	r2, [r4, #20]
   1eb9c:	ldr	r0, [r4, #16]
   1eba0:	ldr	ip, [r3, #20]
   1eba4:	str	ip, [r4, #144]	; 0x90
   1eba8:	ldr	ip, [r3, #28]
   1ebac:	str	ip, [r4, #152]	; 0x98
   1ebb0:	ldr	ip, [r3, #16]
   1ebb4:	str	ip, [r4, #168]	; 0xa8
   1ebb8:	ldrh	r3, [r3, #32]
   1ebbc:	strh	r3, [r4, #164]	; 0xa4
   1ebc0:	bl	12a44 <memset@plt>
   1ebc4:	ldr	r3, [r4, #32]
   1ebc8:	ldr	r2, [r4, #64]	; 0x40
   1ebcc:	ldrh	lr, [r4, #130]	; 0x82
   1ebd0:	ldr	ip, [r3]
   1ebd4:	ldr	r1, [r3, #4]
   1ebd8:	ldrh	r0, [r4, #128]	; 0x80
   1ebdc:	sub	r2, r2, ip
   1ebe0:	cmp	r2, r1
   1ebe4:	movcs	r2, r1
   1ebe8:	cmp	r0, lr
   1ebec:	ldr	r0, [r4, #60]	; 0x3c
   1ebf0:	ldr	r6, [r3, #8]
   1ebf4:	str	r2, [r4, #24]
   1ebf8:	add	r2, r0, ip
   1ebfc:	str	r2, [r4, #16]
   1ec00:	str	r6, [r4, #20]
   1ec04:	ldr	r2, [r4, #156]	; 0x9c
   1ec08:	str	ip, [r4, #28]
   1ec0c:	str	r1, [r3, #4]
   1ec10:	strhcc	lr, [r4, #128]	; 0x80
   1ec14:	ldrh	r1, [r3, #12]
   1ec18:	sub	r2, r2, #1
   1ec1c:	sub	r3, r3, #36	; 0x24
   1ec20:	mov	r0, r5
   1ec24:	str	r2, [r4, #156]	; 0x9c
   1ec28:	strh	r1, [r4, #130]	; 0x82
   1ec2c:	str	r3, [r4, #32]
   1ec30:	add	sp, sp, #100	; 0x64
   1ec34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec38:	cmp	r2, #4
   1ec3c:	movcs	r6, r2
   1ec40:	movcc	r6, #4
   1ec44:	b	1ea54 <flatcc_builder_end_buffer@@Base+0xdc>
   1ec48:	sub	r3, r0, #8
   1ec4c:	sub	r6, r6, #1
   1ec50:	sub	r3, r3, r1
   1ec54:	and	r6, r6, r3
   1ec58:	add	r3, sp, #16
   1ec5c:	mov	r8, #4
   1ec60:	mov	r5, #1
   1ec64:	str	r3, [sp, #32]
   1ec68:	str	r8, [sp, #36]	; 0x24
   1ec6c:	mov	ip, r5
   1ec70:	mov	lr, #3
   1ec74:	mov	r2, #2
   1ec78:	mov	r3, #8
   1ec7c:	b	1eaa8 <flatcc_builder_end_buffer@@Base+0x130>
   1ec80:	ldr	ip, [r4, #140]	; 0x8c
   1ec84:	sub	ip, ip, r1
   1ec88:	b	1eb54 <flatcc_builder_end_buffer@@Base+0x1dc>
   1ec8c:	ldr	r3, [pc, #104]	; 1ecfc <flatcc_builder_end_buffer@@Base+0x384>
   1ec90:	ldr	r2, [pc, #104]	; 1ed00 <flatcc_builder_end_buffer@@Base+0x388>
   1ec94:	ldr	r1, [pc, #104]	; 1ed04 <flatcc_builder_end_buffer@@Base+0x38c>
   1ec98:	ldr	r0, [pc, #104]	; 1ed08 <flatcc_builder_end_buffer@@Base+0x390>
   1ec9c:	bl	12a8c <__assert_fail@plt>
   1eca0:	bl	130b8 <__assert_fail@plt+0x62c>
   1eca4:	ldr	r3, [pc, #96]	; 1ed0c <flatcc_builder_end_buffer@@Base+0x394>
   1eca8:	ldr	r2, [pc, #96]	; 1ed10 <flatcc_builder_end_buffer@@Base+0x398>
   1ecac:	ldr	r1, [pc, #80]	; 1ed04 <flatcc_builder_end_buffer@@Base+0x38c>
   1ecb0:	ldr	r0, [pc, #92]	; 1ed14 <flatcc_builder_end_buffer@@Base+0x39c>
   1ecb4:	bl	12a8c <__assert_fail@plt>
   1ecb8:	ldr	r3, [pc, #88]	; 1ed18 <flatcc_builder_end_buffer@@Base+0x3a0>
   1ecbc:	mov	r2, #772	; 0x304
   1ecc0:	ldr	r1, [pc, #60]	; 1ed04 <flatcc_builder_end_buffer@@Base+0x38c>
   1ecc4:	ldr	r0, [pc, #72]	; 1ed14 <flatcc_builder_end_buffer@@Base+0x39c>
   1ecc8:	bl	12a8c <__assert_fail@plt>
   1eccc:	add	r3, sl, #608	; 0x260
   1ecd0:	ldr	r2, [pc, #68]	; 1ed1c <flatcc_builder_end_buffer@@Base+0x3a4>
   1ecd4:	ldr	r1, [pc, #40]	; 1ed04 <flatcc_builder_end_buffer@@Base+0x38c>
   1ecd8:	ldr	r0, [pc, #52]	; 1ed14 <flatcc_builder_end_buffer@@Base+0x39c>
   1ecdc:	bl	12a8c <__assert_fail@plt>
   1ece0:	bl	13090 <__assert_fail@plt+0x604>
   1ece4:	ldr	r3, [pc, #52]	; 1ed20 <flatcc_builder_end_buffer@@Base+0x3a8>
   1ece8:	ldr	r2, [pc, #52]	; 1ed24 <flatcc_builder_end_buffer@@Base+0x3ac>
   1ecec:	ldr	r1, [pc, #16]	; 1ed04 <flatcc_builder_end_buffer@@Base+0x38c>
   1ecf0:	ldr	r0, [pc, #28]	; 1ed14 <flatcc_builder_end_buffer@@Base+0x39c>
   1ecf4:	bl	12a8c <__assert_fail@plt>
   1ecf8:	andeq	r8, r2, r0, lsr #6
   1ecfc:	ldrdeq	r8, [r2], -r0
   1ed00:	andeq	r0, r0, r6, asr #6
   1ed04:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1ed08:	andeq	r8, r2, r4, ror #21
   1ed0c:	andeq	r8, r2, r4, lsr #5
   1ed10:	andeq	r0, r0, fp, lsl #5
   1ed14:	muleq	r2, r0, sl
   1ed18:	muleq	r2, r0, r5
   1ed1c:			; <UNDEFINED> instruction: 0x000002be
   1ed20:	muleq	r2, r8, r2
   1ed24:	andeq	r0, r0, r5, lsr #5

0001ed28 <flatcc_builder_start_struct@@Base>:
   1ed28:	push	{r4, r5, r6, r7, r8, lr}
   1ed2c:	mov	r4, r0
   1ed30:	ldr	r0, [r0, #156]	; 0x9c
   1ed34:	ldr	r3, [r4, #160]	; 0xa0
   1ed38:	mov	r6, r1
   1ed3c:	add	r1, r0, #1
   1ed40:	cmp	r1, r3
   1ed44:	sub	sp, sp, #8
   1ed48:	mov	r5, r2
   1ed4c:	str	r1, [r4, #156]	; 0x9c
   1ed50:	ble	1edc0 <flatcc_builder_start_struct@@Base+0x98>
   1ed54:	ldr	r3, [r4, #176]	; 0xb0
   1ed58:	cmp	r3, #0
   1ed5c:	cmpgt	r1, r3
   1ed60:	movgt	r3, #1
   1ed64:	movle	r3, #0
   1ed68:	bgt	1eed0 <flatcc_builder_start_struct@@Base+0x1a8>
   1ed6c:	add	r0, r0, r0, lsl #3
   1ed70:	ldr	r1, [r4, #88]	; 0x58
   1ed74:	lsl	r7, r0, #2
   1ed78:	add	r2, r7, #36	; 0x24
   1ed7c:	cmp	r2, r1
   1ed80:	bhi	1eeac <flatcc_builder_start_struct@@Base+0x184>
   1ed84:	ldr	r3, [r4, #84]	; 0x54
   1ed88:	add	r3, r3, r7
   1ed8c:	cmp	r3, #0
   1ed90:	str	r3, [r4, #32]
   1ed94:	beq	1eed0 <flatcc_builder_start_struct@@Base+0x1a8>
   1ed98:	ldr	r2, [r4, #88]	; 0x58
   1ed9c:	ldr	r0, [pc, #308]	; 1eed8 <flatcc_builder_start_struct@@Base+0x1b0>
   1eda0:	ldr	r1, [r4, #176]	; 0xb0
   1eda4:	umull	r0, r2, r0, r2
   1eda8:	lsr	r2, r2, #3
   1edac:	cmp	r1, #0
   1edb0:	cmpgt	r2, r1
   1edb4:	str	r2, [r4, #160]	; 0xa0
   1edb8:	strgt	r1, [r4, #160]	; 0xa0
   1edbc:	b	1edcc <flatcc_builder_start_struct@@Base+0xa4>
   1edc0:	ldr	r3, [r4, #32]
   1edc4:	add	r3, r3, #36	; 0x24
   1edc8:	str	r3, [r4, #32]
   1edcc:	ldr	lr, [r4, #20]
   1edd0:	ldr	ip, [r4, #28]
   1edd4:	ldr	r1, [r4, #64]	; 0x40
   1edd8:	add	r2, lr, ip
   1eddc:	add	r2, r2, #7
   1ede0:	ldrh	r7, [r4, #130]	; 0x82
   1ede4:	bic	r2, r2, #7
   1ede8:	sub	r1, r1, r2
   1edec:	ldr	r0, [r4, #60]	; 0x3c
   1edf0:	cmn	r1, #4
   1edf4:	str	lr, [r3, #8]
   1edf8:	mvn	lr, #3
   1edfc:	strh	r7, [r3, #12]
   1ee00:	movhi	r1, lr
   1ee04:	strh	r5, [r4, #130]	; 0x82
   1ee08:	str	ip, [r3]
   1ee0c:	mov	r5, #0
   1ee10:	mov	ip, #2
   1ee14:	str	lr, [r3, #4]
   1ee18:	add	r0, r0, r2
   1ee1c:	str	r5, [r4, #20]
   1ee20:	str	r2, [r4, #28]
   1ee24:	mvn	r5, #3
   1ee28:	strh	ip, [r3, #14]
   1ee2c:	strls	r1, [r4, #24]
   1ee30:	strhi	lr, [r4, #24]
   1ee34:	cmp	r6, r1
   1ee38:	str	r0, [r4, #16]
   1ee3c:	str	r5, [r3, #4]
   1ee40:	str	r6, [r4, #20]
   1ee44:	bcs	1ee50 <flatcc_builder_start_struct@@Base+0x128>
   1ee48:	add	sp, sp, #8
   1ee4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ee50:	add	r6, r6, #1
   1ee54:	mov	r3, #1
   1ee58:	ldr	r0, [r4, #40]	; 0x28
   1ee5c:	add	r2, r6, r2
   1ee60:	str	r3, [sp]
   1ee64:	add	r1, r4, #60	; 0x3c
   1ee68:	ldr	r6, [r4, #48]	; 0x30
   1ee6c:	blx	r6
   1ee70:	cmp	r0, #0
   1ee74:	bne	1eed0 <flatcc_builder_start_struct@@Base+0x1a8>
   1ee78:	ldr	r2, [r4, #28]
   1ee7c:	ldr	r3, [r4, #64]	; 0x40
   1ee80:	ldr	r0, [r4, #60]	; 0x3c
   1ee84:	sub	r3, r3, r2
   1ee88:	ldr	r1, [r4, #32]
   1ee8c:	cmp	r3, r5
   1ee90:	add	r0, r0, r2
   1ee94:	movhi	r3, r5
   1ee98:	str	r3, [r4, #24]
   1ee9c:	str	r0, [r4, #16]
   1eea0:	str	r5, [r1, #4]
   1eea4:	add	sp, sp, #8
   1eea8:	pop	{r4, r5, r6, r7, r8, pc}
   1eeac:	mov	r1, #4
   1eeb0:	ldr	r0, [r4, #40]	; 0x28
   1eeb4:	str	r1, [sp]
   1eeb8:	add	r1, r4, #84	; 0x54
   1eebc:	ldr	r8, [r4, #48]	; 0x30
   1eec0:	blx	r8
   1eec4:	cmp	r0, #0
   1eec8:	beq	1ed84 <flatcc_builder_start_struct@@Base+0x5c>
   1eecc:	bl	1306c <__assert_fail@plt+0x5e0>
   1eed0:	mov	r0, #0
   1eed4:	b	1ee48 <flatcc_builder_start_struct@@Base+0x120>
   1eed8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001eedc <flatcc_builder_struct_edit@@Base>:
   1eedc:	ldr	r0, [r0, #16]
   1eee0:	bx	lr

0001eee4 <flatcc_builder_end_struct@@Base>:
   1eee4:	ldr	r3, [r0, #32]
   1eee8:	push	{r4, r5, r6, lr}
   1eeec:	sub	sp, sp, #80	; 0x50
   1eef0:	ldrh	r3, [r3, #14]
   1eef4:	cmp	r3, #2
   1eef8:	bne	1f084 <flatcc_builder_end_struct@@Base+0x1a0>
   1eefc:	ldrh	r3, [r0, #130]	; 0x82
   1ef00:	mov	r4, r0
   1ef04:	ldr	r0, [r0, #16]
   1ef08:	cmp	r3, #0
   1ef0c:	ldr	r1, [r4, #20]
   1ef10:	beq	1f070 <flatcc_builder_end_struct@@Base+0x18c>
   1ef14:	ldrh	r2, [r4, #128]	; 0x80
   1ef18:	ldr	ip, [r4, #136]	; 0x88
   1ef1c:	cmp	r2, r3
   1ef20:	strhcc	r3, [r4, #128]	; 0x80
   1ef24:	mov	r2, #0
   1ef28:	sub	r3, r3, #1
   1ef2c:	sub	r5, ip, r1
   1ef30:	cmp	r1, #0
   1ef34:	and	r3, r3, r5
   1ef38:	str	r2, [sp, #8]
   1ef3c:	str	r2, [sp, #12]
   1ef40:	bne	1f030 <flatcc_builder_end_struct@@Base+0x14c>
   1ef44:	cmp	r3, #0
   1ef48:	movne	r2, #1
   1ef4c:	movne	r0, r1
   1ef50:	beq	1f058 <flatcc_builder_end_struct@@Base+0x174>
   1ef54:	add	r0, r0, #1
   1ef58:	add	r5, sp, #80	; 0x50
   1ef5c:	add	r1, r1, r3
   1ef60:	add	r0, r5, r0, lsl #3
   1ef64:	ldr	lr, [pc, #300]	; 1f098 <flatcc_builder_end_struct@@Base+0x1b4>
   1ef68:	sub	r5, ip, r1
   1ef6c:	str	r3, [r0, #-68]	; 0xffffffbc
   1ef70:	str	r1, [sp, #8]
   1ef74:	str	r2, [sp, #12]
   1ef78:	str	lr, [r0, #-72]	; 0xffffffb8
   1ef7c:	cmp	ip, r5
   1ef80:	ble	1f058 <flatcc_builder_end_struct@@Base+0x174>
   1ef84:	ldr	r0, [r4, #36]	; 0x24
   1ef88:	mov	r3, r5
   1ef8c:	str	r1, [sp]
   1ef90:	add	r1, sp, #16
   1ef94:	ldr	r6, [r4, #44]	; 0x2c
   1ef98:	blx	r6
   1ef9c:	subs	r1, r0, #0
   1efa0:	bne	1f05c <flatcc_builder_end_struct@@Base+0x178>
   1efa4:	cmp	r5, #0
   1efa8:	str	r5, [r4, #136]	; 0x88
   1efac:	beq	1f024 <flatcc_builder_end_struct@@Base+0x140>
   1efb0:	ldr	r2, [r4, #20]
   1efb4:	ldr	r0, [r4, #16]
   1efb8:	bl	12a44 <memset@plt>
   1efbc:	ldr	r3, [r4, #32]
   1efc0:	ldr	r2, [r4, #64]	; 0x40
   1efc4:	ldrh	lr, [r4, #130]	; 0x82
   1efc8:	ldr	ip, [r3]
   1efcc:	ldr	r1, [r3, #4]
   1efd0:	ldrh	r0, [r4, #128]	; 0x80
   1efd4:	sub	r2, r2, ip
   1efd8:	cmp	r2, r1
   1efdc:	movcs	r2, r1
   1efe0:	cmp	r0, lr
   1efe4:	ldr	r0, [r4, #60]	; 0x3c
   1efe8:	ldr	r6, [r3, #8]
   1efec:	str	r2, [r4, #24]
   1eff0:	add	r2, r0, ip
   1eff4:	str	r2, [r4, #16]
   1eff8:	str	r6, [r4, #20]
   1effc:	ldr	r2, [r4, #156]	; 0x9c
   1f000:	str	ip, [r4, #28]
   1f004:	str	r1, [r3, #4]
   1f008:	strhcc	lr, [r4, #128]	; 0x80
   1f00c:	ldrh	r1, [r3, #12]
   1f010:	sub	r2, r2, #1
   1f014:	sub	r3, r3, #36	; 0x24
   1f018:	str	r2, [r4, #156]	; 0x9c
   1f01c:	strh	r1, [r4, #130]	; 0x82
   1f020:	str	r3, [r4, #32]
   1f024:	mov	r0, r5
   1f028:	add	sp, sp, #80	; 0x50
   1f02c:	pop	{r4, r5, r6, pc}
   1f030:	cmp	r3, r2
   1f034:	mov	r2, #1
   1f038:	str	r0, [sp, #16]
   1f03c:	str	r2, [sp, #12]
   1f040:	movne	r0, r2
   1f044:	str	r1, [sp, #8]
   1f048:	str	r1, [sp, #20]
   1f04c:	movne	r2, #2
   1f050:	beq	1ef7c <flatcc_builder_end_struct@@Base+0x98>
   1f054:	b	1ef54 <flatcc_builder_end_struct@@Base+0x70>
   1f058:	bl	130b8 <__assert_fail@plt+0x62c>
   1f05c:	ldr	r3, [pc, #56]	; 1f09c <flatcc_builder_end_struct@@Base+0x1b8>
   1f060:	ldr	r2, [pc, #56]	; 1f0a0 <flatcc_builder_end_struct@@Base+0x1bc>
   1f064:	ldr	r1, [pc, #56]	; 1f0a4 <flatcc_builder_end_struct@@Base+0x1c0>
   1f068:	ldr	r0, [pc, #56]	; 1f0a8 <flatcc_builder_end_struct@@Base+0x1c4>
   1f06c:	bl	12a8c <__assert_fail@plt>
   1f070:	ldr	r3, [pc, #52]	; 1f0ac <flatcc_builder_end_struct@@Base+0x1c8>
   1f074:	ldr	r2, [pc, #52]	; 1f0b0 <flatcc_builder_end_struct@@Base+0x1cc>
   1f078:	ldr	r1, [pc, #36]	; 1f0a4 <flatcc_builder_end_struct@@Base+0x1c0>
   1f07c:	ldr	r0, [pc, #48]	; 1f0b4 <flatcc_builder_end_struct@@Base+0x1d0>
   1f080:	bl	12a8c <__assert_fail@plt>
   1f084:	ldr	r3, [pc, #44]	; 1f0b8 <flatcc_builder_end_struct@@Base+0x1d4>
   1f088:	mov	r2, #872	; 0x368
   1f08c:	ldr	r1, [pc, #16]	; 1f0a4 <flatcc_builder_end_struct@@Base+0x1c0>
   1f090:	ldr	r0, [pc, #36]	; 1f0bc <flatcc_builder_end_struct@@Base+0x1d8>
   1f094:	bl	12a8c <__assert_fail@plt>
   1f098:	andeq	r8, r2, r0, lsr #6
   1f09c:	andeq	r8, r2, r4, lsr #5
   1f0a0:	andeq	r0, r0, fp, lsl #5
   1f0a4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f0a8:	muleq	r2, r0, sl
   1f0ac:			; <UNDEFINED> instruction: 0x000285b0
   1f0b0:	andeq	r0, r0, pc, lsl #6
   1f0b4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f0b8:	andeq	r8, r2, ip, ror #11
   1f0bc:	andeq	r8, r2, r0, lsl fp

0001f0c0 <flatcc_builder_extend_vector@@Base>:
   1f0c0:	ldr	r3, [r0, #32]
   1f0c4:	push	{r4, r5, r6, r7, lr}
   1f0c8:	mov	r5, r0
   1f0cc:	ldr	r0, [r3, #20]
   1f0d0:	ldr	r4, [r3, #24]
   1f0d4:	add	ip, r1, r0
   1f0d8:	cmp	r0, ip
   1f0dc:	movls	r0, #0
   1f0e0:	movhi	r0, #1
   1f0e4:	cmp	r4, ip
   1f0e8:	movcs	r4, r0
   1f0ec:	orrcc	r4, r0, #1
   1f0f0:	cmp	r4, #0
   1f0f4:	sub	sp, sp, #12
   1f0f8:	bne	1f194 <flatcc_builder_extend_vector@@Base+0xd4>
   1f0fc:	ldr	r2, [r3, #16]
   1f100:	str	ip, [r3, #20]
   1f104:	ldr	r6, [r5, #20]
   1f108:	ldr	r3, [r5, #24]
   1f10c:	mla	r1, r2, r1, r6
   1f110:	cmp	r1, r3
   1f114:	str	r1, [r5, #20]
   1f118:	bcs	1f12c <flatcc_builder_extend_vector@@Base+0x6c>
   1f11c:	ldr	r0, [r5, #16]
   1f120:	add	r0, r0, r6
   1f124:	add	sp, sp, #12
   1f128:	pop	{r4, r5, r6, r7, pc}
   1f12c:	ldr	r2, [r5, #28]
   1f130:	mov	r3, #1
   1f134:	add	r2, r2, #1
   1f138:	ldr	r0, [r5, #40]	; 0x28
   1f13c:	add	r2, r2, r1
   1f140:	str	r3, [sp]
   1f144:	add	r1, r5, #60	; 0x3c
   1f148:	ldr	r7, [r5, #48]	; 0x30
   1f14c:	blx	r7
   1f150:	cmp	r0, #0
   1f154:	bne	1f18c <flatcc_builder_extend_vector@@Base+0xcc>
   1f158:	ldr	r2, [r5, #28]
   1f15c:	ldr	r3, [r5, #64]	; 0x40
   1f160:	ldr	r0, [r5, #60]	; 0x3c
   1f164:	sub	r3, r3, r2
   1f168:	cmn	r3, #4
   1f16c:	mvnhi	r3, #3
   1f170:	str	r3, [r5, #24]
   1f174:	ldr	r3, [r5, #32]
   1f178:	add	r0, r0, r2
   1f17c:	mvn	r2, #3
   1f180:	str	r0, [r5, #16]
   1f184:	str	r2, [r3, #4]
   1f188:	b	1f120 <flatcc_builder_extend_vector@@Base+0x60>
   1f18c:	mov	r0, r4
   1f190:	b	1f124 <flatcc_builder_extend_vector@@Base+0x64>
   1f194:	bl	130e0 <__assert_fail@plt+0x654>

0001f198 <flatcc_builder_vector_push@@Base>:
   1f198:	ldr	r3, [r0, #32]
   1f19c:	push	{r4, r5, r6, r7, r8, lr}
   1f1a0:	sub	sp, sp, #8
   1f1a4:	ldrh	r2, [r3, #14]
   1f1a8:	cmp	r2, #4
   1f1ac:	bne	1f294 <flatcc_builder_vector_push@@Base+0xfc>
   1f1b0:	mov	r5, r1
   1f1b4:	ldr	r2, [r3, #20]
   1f1b8:	ldr	r1, [r3, #24]
   1f1bc:	cmp	r2, r1
   1f1c0:	bhi	1f280 <flatcc_builder_vector_push@@Base+0xe8>
   1f1c4:	add	r2, r2, #1
   1f1c8:	str	r2, [r3, #20]
   1f1cc:	ldr	r7, [r3, #16]
   1f1d0:	ldr	r6, [r0, #20]
   1f1d4:	ldr	r3, [r0, #24]
   1f1d8:	add	r1, r7, r6
   1f1dc:	cmp	r1, r3
   1f1e0:	mov	r4, r0
   1f1e4:	str	r1, [r0, #20]
   1f1e8:	bcs	1f218 <flatcc_builder_vector_push@@Base+0x80>
   1f1ec:	ldr	r3, [r0, #16]
   1f1f0:	adds	r3, r3, r6
   1f1f4:	beq	1f20c <flatcc_builder_vector_push@@Base+0x74>
   1f1f8:	mov	r0, r3
   1f1fc:	mov	r2, r7
   1f200:	mov	r1, r5
   1f204:	bl	129b4 <memcpy@plt>
   1f208:	mov	r3, r0
   1f20c:	mov	r0, r3
   1f210:	add	sp, sp, #8
   1f214:	pop	{r4, r5, r6, r7, r8, pc}
   1f218:	ldr	r2, [r0, #28]
   1f21c:	mov	r3, #1
   1f220:	add	r2, r2, #1
   1f224:	ldr	r0, [r0, #40]	; 0x28
   1f228:	add	r2, r2, r1
   1f22c:	str	r3, [sp]
   1f230:	add	r1, r4, #60	; 0x3c
   1f234:	ldr	r8, [r4, #48]	; 0x30
   1f238:	blx	r8
   1f23c:	cmp	r0, #0
   1f240:	bne	1f278 <flatcc_builder_vector_push@@Base+0xe0>
   1f244:	ldr	r1, [r4, #28]
   1f248:	ldr	r2, [r4, #64]	; 0x40
   1f24c:	ldr	r3, [r4, #60]	; 0x3c
   1f250:	sub	r2, r2, r1
   1f254:	cmn	r2, #4
   1f258:	mvnhi	r2, #3
   1f25c:	str	r2, [r4, #24]
   1f260:	ldr	r2, [r4, #32]
   1f264:	add	r3, r3, r1
   1f268:	mvn	r1, #3
   1f26c:	str	r3, [r4, #16]
   1f270:	str	r1, [r2, #4]
   1f274:	b	1f1f0 <flatcc_builder_vector_push@@Base+0x58>
   1f278:	mov	r3, #0
   1f27c:	b	1f20c <flatcc_builder_vector_push@@Base+0x74>
   1f280:	ldr	r3, [pc, #32]	; 1f2a8 <flatcc_builder_vector_push@@Base+0x110>
   1f284:	mov	r2, #908	; 0x38c
   1f288:	ldr	r1, [pc, #28]	; 1f2ac <flatcc_builder_vector_push@@Base+0x114>
   1f28c:	ldr	r0, [pc, #28]	; 1f2b0 <flatcc_builder_vector_push@@Base+0x118>
   1f290:	bl	12a8c <__assert_fail@plt>
   1f294:	ldr	r3, [pc, #12]	; 1f2a8 <flatcc_builder_vector_push@@Base+0x110>
   1f298:	ldr	r2, [pc, #20]	; 1f2b4 <flatcc_builder_vector_push@@Base+0x11c>
   1f29c:	ldr	r1, [pc, #8]	; 1f2ac <flatcc_builder_vector_push@@Base+0x114>
   1f2a0:	ldr	r0, [pc, #16]	; 1f2b8 <flatcc_builder_vector_push@@Base+0x120>
   1f2a4:	bl	12a8c <__assert_fail@plt>
   1f2a8:	andeq	r8, r2, r8, lsl #12
   1f2ac:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f2b0:	andeq	r8, r2, r8, ror #22
   1f2b4:	andeq	r0, r0, fp, lsl #7
   1f2b8:	andeq	r8, r2, ip, lsr fp

0001f2bc <flatcc_builder_append_vector@@Base>:
   1f2bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f2c0:	mov	r5, r1
   1f2c4:	ldr	r1, [r0, #32]
   1f2c8:	sub	sp, sp, #12
   1f2cc:	ldrh	r3, [r1, #14]
   1f2d0:	cmp	r3, #4
   1f2d4:	bne	1f3c4 <flatcc_builder_append_vector@@Base+0x108>
   1f2d8:	ldr	r3, [r1, #20]
   1f2dc:	mov	r6, r0
   1f2e0:	add	r0, r2, r3
   1f2e4:	cmp	r3, r0
   1f2e8:	ldr	r4, [r1, #24]
   1f2ec:	movls	r3, #0
   1f2f0:	movhi	r3, #1
   1f2f4:	cmp	r4, r0
   1f2f8:	movcs	r4, r3
   1f2fc:	orrcc	r4, r3, #1
   1f300:	cmp	r4, #0
   1f304:	bne	1f3c0 <flatcc_builder_append_vector@@Base+0x104>
   1f308:	ldr	r7, [r1, #16]
   1f30c:	str	r0, [r1, #20]
   1f310:	ldr	r8, [r6, #20]
   1f314:	mul	r7, r7, r2
   1f318:	ldr	r3, [r6, #24]
   1f31c:	add	r1, r7, r8
   1f320:	cmp	r1, r3
   1f324:	str	r1, [r6, #20]
   1f328:	bcs	1f358 <flatcc_builder_append_vector@@Base+0x9c>
   1f32c:	ldr	r3, [r6, #16]
   1f330:	adds	r3, r3, r8
   1f334:	beq	1f34c <flatcc_builder_append_vector@@Base+0x90>
   1f338:	mov	r0, r3
   1f33c:	mov	r2, r7
   1f340:	mov	r1, r5
   1f344:	bl	129b4 <memcpy@plt>
   1f348:	mov	r3, r0
   1f34c:	mov	r0, r3
   1f350:	add	sp, sp, #12
   1f354:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f358:	ldr	r2, [r6, #28]
   1f35c:	mov	r3, #1
   1f360:	add	r2, r2, #1
   1f364:	ldr	r0, [r6, #40]	; 0x28
   1f368:	add	r2, r2, r1
   1f36c:	str	r3, [sp]
   1f370:	add	r1, r6, #60	; 0x3c
   1f374:	ldr	r9, [r6, #48]	; 0x30
   1f378:	blx	r9
   1f37c:	cmp	r0, #0
   1f380:	bne	1f3b8 <flatcc_builder_append_vector@@Base+0xfc>
   1f384:	ldr	r1, [r6, #28]
   1f388:	ldr	r2, [r6, #64]	; 0x40
   1f38c:	ldr	r3, [r6, #60]	; 0x3c
   1f390:	sub	r2, r2, r1
   1f394:	cmn	r2, #4
   1f398:	mvnhi	r2, #3
   1f39c:	str	r2, [r6, #24]
   1f3a0:	ldr	r2, [r6, #32]
   1f3a4:	add	r3, r3, r1
   1f3a8:	mvn	r1, #3
   1f3ac:	str	r3, [r6, #16]
   1f3b0:	str	r1, [r2, #4]
   1f3b4:	b	1f330 <flatcc_builder_append_vector@@Base+0x74>
   1f3b8:	mov	r3, r4
   1f3bc:	b	1f34c <flatcc_builder_append_vector@@Base+0x90>
   1f3c0:	bl	130e0 <__assert_fail@plt+0x654>
   1f3c4:	ldr	r3, [pc, #12]	; 1f3d8 <flatcc_builder_append_vector@@Base+0x11c>
   1f3c8:	ldr	r2, [pc, #12]	; 1f3dc <flatcc_builder_append_vector@@Base+0x120>
   1f3cc:	ldr	r1, [pc, #12]	; 1f3e0 <flatcc_builder_append_vector@@Base+0x124>
   1f3d0:	ldr	r0, [pc, #12]	; 1f3e4 <flatcc_builder_append_vector@@Base+0x128>
   1f3d4:	bl	12a8c <__assert_fail@plt>
   1f3d8:	andeq	r8, r2, r4, lsr #12
   1f3dc:	muleq	r0, r3, r3
   1f3e0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f3e4:	andeq	r8, r2, ip, lsr fp

0001f3e8 <flatcc_builder_extend_offset_vector@@Base>:
   1f3e8:	ldr	ip, [r0, #32]
   1f3ec:	push	{r4, r5, r6, r7, lr}
   1f3f0:	mov	r4, r0
   1f3f4:	ldr	r3, [ip, #20]
   1f3f8:	sub	sp, sp, #12
   1f3fc:	adds	r3, r1, r3
   1f400:	movcs	r2, #1
   1f404:	movcc	r2, #0
   1f408:	cmn	r3, #-1073741823	; 0xc0000001
   1f40c:	movls	r0, #0
   1f410:	movhi	r0, #1
   1f414:	orrs	r5, r2, r0
   1f418:	bne	1f4b0 <flatcc_builder_extend_offset_vector@@Base+0xc8>
   1f41c:	str	r3, [ip, #20]
   1f420:	ldr	r6, [r4, #20]
   1f424:	ldr	r3, [r4, #24]
   1f428:	add	r1, r6, r1, lsl #2
   1f42c:	cmp	r1, r3
   1f430:	str	r1, [r4, #20]
   1f434:	bcs	1f448 <flatcc_builder_extend_offset_vector@@Base+0x60>
   1f438:	ldr	r0, [r4, #16]
   1f43c:	add	r0, r0, r6
   1f440:	add	sp, sp, #12
   1f444:	pop	{r4, r5, r6, r7, pc}
   1f448:	ldr	r2, [r4, #28]
   1f44c:	mov	r3, #1
   1f450:	add	r2, r2, #1
   1f454:	ldr	r0, [r4, #40]	; 0x28
   1f458:	add	r2, r2, r1
   1f45c:	str	r3, [sp]
   1f460:	add	r1, r4, #60	; 0x3c
   1f464:	ldr	r7, [r4, #48]	; 0x30
   1f468:	blx	r7
   1f46c:	cmp	r0, #0
   1f470:	bne	1f4a8 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   1f474:	ldr	r2, [r4, #28]
   1f478:	ldr	r3, [r4, #64]	; 0x40
   1f47c:	ldr	r0, [r4, #60]	; 0x3c
   1f480:	sub	r3, r3, r2
   1f484:	cmn	r3, #4
   1f488:	mvnhi	r3, #3
   1f48c:	str	r3, [r4, #24]
   1f490:	ldr	r3, [r4, #32]
   1f494:	add	r0, r0, r2
   1f498:	mvn	r2, #3
   1f49c:	str	r0, [r4, #16]
   1f4a0:	str	r2, [r3, #4]
   1f4a4:	b	1f43c <flatcc_builder_extend_offset_vector@@Base+0x54>
   1f4a8:	mov	r0, r5
   1f4ac:	b	1f440 <flatcc_builder_extend_offset_vector@@Base+0x58>
   1f4b0:	bl	130e0 <__assert_fail@plt+0x654>

0001f4b4 <flatcc_builder_offset_vector_push@@Base>:
   1f4b4:	ldr	r2, [r0, #32]
   1f4b8:	push	{r4, r5, r6, r7, lr}
   1f4bc:	sub	sp, sp, #12
   1f4c0:	ldrh	r3, [r2, #14]
   1f4c4:	cmp	r3, #5
   1f4c8:	bne	1f580 <flatcc_builder_offset_vector_push@@Base+0xcc>
   1f4cc:	ldr	r3, [r2, #20]
   1f4d0:	cmn	r3, #-1073741823	; 0xc0000001
   1f4d4:	beq	1f574 <flatcc_builder_offset_vector_push@@Base+0xc0>
   1f4d8:	add	r3, r3, #1
   1f4dc:	str	r3, [r2, #20]
   1f4e0:	ldr	r5, [r0, #20]
   1f4e4:	ldr	r2, [r0, #24]
   1f4e8:	add	r3, r5, #4
   1f4ec:	cmp	r3, r2
   1f4f0:	mov	r4, r0
   1f4f4:	mov	r6, r1
   1f4f8:	str	r3, [r0, #20]
   1f4fc:	bcs	1f514 <flatcc_builder_offset_vector_push@@Base+0x60>
   1f500:	ldr	r3, [r0, #16]
   1f504:	adds	r0, r3, r5
   1f508:	strne	r6, [r3, r5]
   1f50c:	add	sp, sp, #12
   1f510:	pop	{r4, r5, r6, r7, pc}
   1f514:	ldr	r2, [r0, #28]
   1f518:	mov	r3, #1
   1f51c:	add	r2, r5, r2
   1f520:	ldr	r0, [r0, #40]	; 0x28
   1f524:	add	r2, r2, #5
   1f528:	str	r3, [sp]
   1f52c:	add	r1, r4, #60	; 0x3c
   1f530:	ldr	r7, [r4, #48]	; 0x30
   1f534:	blx	r7
   1f538:	cmp	r0, #0
   1f53c:	bne	1f574 <flatcc_builder_offset_vector_push@@Base+0xc0>
   1f540:	ldr	r1, [r4, #28]
   1f544:	ldr	r2, [r4, #64]	; 0x40
   1f548:	ldr	r3, [r4, #60]	; 0x3c
   1f54c:	sub	r2, r2, r1
   1f550:	cmn	r2, #4
   1f554:	mvnhi	r2, #3
   1f558:	str	r2, [r4, #24]
   1f55c:	ldr	r2, [r4, #32]
   1f560:	add	r3, r3, r1
   1f564:	mvn	r1, #3
   1f568:	str	r3, [r4, #16]
   1f56c:	str	r1, [r2, #4]
   1f570:	b	1f504 <flatcc_builder_offset_vector_push@@Base+0x50>
   1f574:	mov	r0, #0
   1f578:	add	sp, sp, #12
   1f57c:	pop	{r4, r5, r6, r7, pc}
   1f580:	ldr	r3, [pc, #12]	; 1f594 <flatcc_builder_offset_vector_push@@Base+0xe0>
   1f584:	ldr	r2, [pc, #12]	; 1f598 <flatcc_builder_offset_vector_push@@Base+0xe4>
   1f588:	ldr	r1, [pc, #12]	; 1f59c <flatcc_builder_offset_vector_push@@Base+0xe8>
   1f58c:	ldr	r0, [pc, #12]	; 1f5a0 <flatcc_builder_offset_vector_push@@Base+0xec>
   1f590:	bl	12a8c <__assert_fail@plt>
   1f594:	andeq	r8, r2, r4, asr #12
   1f598:	andeq	r0, r0, r6, lsr #7
   1f59c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f5a0:	andeq	r8, r2, r8, lsr #23

0001f5a4 <flatcc_builder_append_offset_vector@@Base>:
   1f5a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f5a8:	mov	r5, r0
   1f5ac:	ldr	r0, [r0, #32]
   1f5b0:	sub	sp, sp, #12
   1f5b4:	ldrh	r3, [r0, #14]
   1f5b8:	cmp	r3, #5
   1f5bc:	bne	1f6a0 <flatcc_builder_append_offset_vector@@Base+0xfc>
   1f5c0:	mov	r7, r1
   1f5c4:	ldr	r1, [r0, #20]
   1f5c8:	adds	r1, r2, r1
   1f5cc:	movcs	r4, #1
   1f5d0:	movcc	r4, #0
   1f5d4:	cmn	r1, #-1073741823	; 0xc0000001
   1f5d8:	movls	r3, #0
   1f5dc:	movhi	r3, #1
   1f5e0:	orrs	r4, r4, r3
   1f5e4:	bne	1f69c <flatcc_builder_append_offset_vector@@Base+0xf8>
   1f5e8:	str	r1, [r0, #20]
   1f5ec:	ldr	r8, [r5, #20]
   1f5f0:	lsl	r6, r2, #2
   1f5f4:	ldr	r3, [r5, #24]
   1f5f8:	add	r1, r6, r8
   1f5fc:	cmp	r1, r3
   1f600:	str	r1, [r5, #20]
   1f604:	bcs	1f634 <flatcc_builder_append_offset_vector@@Base+0x90>
   1f608:	ldr	r3, [r5, #16]
   1f60c:	adds	r3, r3, r8
   1f610:	beq	1f628 <flatcc_builder_append_offset_vector@@Base+0x84>
   1f614:	mov	r0, r3
   1f618:	mov	r2, r6
   1f61c:	mov	r1, r7
   1f620:	bl	129b4 <memcpy@plt>
   1f624:	mov	r3, r0
   1f628:	mov	r0, r3
   1f62c:	add	sp, sp, #12
   1f630:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f634:	ldr	r2, [r5, #28]
   1f638:	mov	r3, #1
   1f63c:	add	r2, r2, #1
   1f640:	ldr	r0, [r5, #40]	; 0x28
   1f644:	add	r2, r2, r1
   1f648:	str	r3, [sp]
   1f64c:	add	r1, r5, #60	; 0x3c
   1f650:	ldr	r9, [r5, #48]	; 0x30
   1f654:	blx	r9
   1f658:	cmp	r0, #0
   1f65c:	bne	1f694 <flatcc_builder_append_offset_vector@@Base+0xf0>
   1f660:	ldr	r1, [r5, #28]
   1f664:	ldr	r2, [r5, #64]	; 0x40
   1f668:	ldr	r3, [r5, #60]	; 0x3c
   1f66c:	sub	r2, r2, r1
   1f670:	cmn	r2, #4
   1f674:	mvnhi	r2, #3
   1f678:	str	r2, [r5, #24]
   1f67c:	ldr	r2, [r5, #32]
   1f680:	add	r3, r3, r1
   1f684:	mvn	r1, #3
   1f688:	str	r3, [r5, #16]
   1f68c:	str	r1, [r2, #4]
   1f690:	b	1f60c <flatcc_builder_append_offset_vector@@Base+0x68>
   1f694:	mov	r3, r4
   1f698:	b	1f628 <flatcc_builder_append_offset_vector@@Base+0x84>
   1f69c:	bl	130e0 <__assert_fail@plt+0x654>
   1f6a0:	ldr	r3, [pc, #12]	; 1f6b4 <flatcc_builder_append_offset_vector@@Base+0x110>
   1f6a4:	mov	r2, #948	; 0x3b4
   1f6a8:	ldr	r1, [pc, #8]	; 1f6b8 <flatcc_builder_append_offset_vector@@Base+0x114>
   1f6ac:	ldr	r0, [pc, #8]	; 1f6bc <flatcc_builder_append_offset_vector@@Base+0x118>
   1f6b0:	bl	12a8c <__assert_fail@plt>
   1f6b4:	andeq	r8, r2, r8, ror #12
   1f6b8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f6bc:	andeq	r8, r2, r8, lsr #23

0001f6c0 <flatcc_builder_extend_string@@Base>:
   1f6c0:	ldr	r2, [r0, #32]
   1f6c4:	push	{r4, r5, r6, lr}
   1f6c8:	sub	sp, sp, #8
   1f6cc:	ldrh	r3, [r2, #14]
   1f6d0:	cmp	r3, #6
   1f6d4:	bne	1f780 <flatcc_builder_extend_string@@Base+0xc0>
   1f6d8:	ldr	r3, [r2, #20]
   1f6dc:	adds	r3, r1, r3
   1f6e0:	bcs	1f77c <flatcc_builder_extend_string@@Base+0xbc>
   1f6e4:	str	r3, [r2, #20]
   1f6e8:	ldr	r5, [r0, #20]
   1f6ec:	ldr	r3, [r0, #24]
   1f6f0:	add	r1, r1, r5
   1f6f4:	cmp	r1, r3
   1f6f8:	mov	r4, r0
   1f6fc:	str	r1, [r0, #20]
   1f700:	bcs	1f714 <flatcc_builder_extend_string@@Base+0x54>
   1f704:	ldr	r0, [r0, #16]
   1f708:	add	r0, r0, r5
   1f70c:	add	sp, sp, #8
   1f710:	pop	{r4, r5, r6, pc}
   1f714:	ldr	r2, [r0, #28]
   1f718:	mov	r3, #1
   1f71c:	add	r2, r2, #1
   1f720:	ldr	r0, [r0, #40]	; 0x28
   1f724:	add	r2, r2, r1
   1f728:	str	r3, [sp]
   1f72c:	add	r1, r4, #60	; 0x3c
   1f730:	ldr	r6, [r4, #48]	; 0x30
   1f734:	blx	r6
   1f738:	cmp	r0, #0
   1f73c:	bne	1f774 <flatcc_builder_extend_string@@Base+0xb4>
   1f740:	ldr	r2, [r4, #28]
   1f744:	ldr	r3, [r4, #64]	; 0x40
   1f748:	ldr	r0, [r4, #60]	; 0x3c
   1f74c:	sub	r3, r3, r2
   1f750:	cmn	r3, #4
   1f754:	mvnhi	r3, #3
   1f758:	str	r3, [r4, #24]
   1f75c:	ldr	r3, [r4, #32]
   1f760:	add	r0, r0, r2
   1f764:	mvn	r2, #3
   1f768:	str	r0, [r4, #16]
   1f76c:	str	r2, [r3, #4]
   1f770:	b	1f708 <flatcc_builder_extend_string@@Base+0x48>
   1f774:	mov	r0, #0
   1f778:	b	1f70c <flatcc_builder_extend_string@@Base+0x4c>
   1f77c:	bl	130e0 <__assert_fail@plt+0x654>
   1f780:	ldr	r3, [pc, #12]	; 1f794 <flatcc_builder_extend_string@@Base+0xd4>
   1f784:	ldr	r2, [pc, #12]	; 1f798 <flatcc_builder_extend_string@@Base+0xd8>
   1f788:	ldr	r1, [pc, #12]	; 1f79c <flatcc_builder_extend_string@@Base+0xdc>
   1f78c:	ldr	r0, [pc, #12]	; 1f7a0 <flatcc_builder_extend_string@@Base+0xe0>
   1f790:	bl	12a8c <__assert_fail@plt>
   1f794:	andeq	r8, r2, ip, lsl #13
   1f798:			; <UNDEFINED> instruction: 0x000003bd
   1f79c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1f7a0:	andeq	r8, r2, r8, asr sl

0001f7a4 <flatcc_builder_append_string@@Base>:
   1f7a4:	push	{r4, r5, r6, r7, r8, lr}
   1f7a8:	mov	r6, r1
   1f7ac:	ldr	r1, [r0, #32]
   1f7b0:	sub	sp, sp, #8
   1f7b4:	ldrh	r3, [r1, #14]
   1f7b8:	cmp	r3, #6
   1f7bc:	bne	1f888 <flatcc_builder_append_string@@Base+0xe4>
   1f7c0:	ldr	r3, [r1, #20]
   1f7c4:	mov	r5, r2
   1f7c8:	adds	r3, r2, r3
   1f7cc:	bcs	1f884 <flatcc_builder_append_string@@Base+0xe0>
   1f7d0:	str	r3, [r1, #20]
   1f7d4:	ldr	r7, [r0, #20]
   1f7d8:	ldr	r3, [r0, #24]
   1f7dc:	add	r1, r2, r7
   1f7e0:	cmp	r1, r3
   1f7e4:	mov	r4, r0
   1f7e8:	str	r1, [r0, #20]
   1f7ec:	bcs	1f81c <flatcc_builder_append_string@@Base+0x78>
   1f7f0:	ldr	r3, [r0, #16]
   1f7f4:	adds	r3, r3, r7
   1f7f8:	beq	1f810 <flatcc_builder_append_string@@Base+0x6c>
   1f7fc:	mov	r0, r3
   1f800:	mov	r2, r5
   1f804:	mov	r1, r6
   1f808:	bl	129b4 <memcpy@plt>
   1f80c:	mov	r3, r0
   1f810:	mov	r0, r3
   1f814:	add	sp, sp, #8
   1f818:	pop	{r4, r5, r6, r7, r8, pc}
   1f81c:	ldr	r2, [r0, #28]
   1f820:	mov	r3, #1
   1f824:	add	r2, r2, #1
   1f828:	ldr	r0, [r0, #40]	; 0x28
   1f82c:	add	r2, r2, r1
   1f830:	str	r3, [sp]
   1f834:	add	r1, r4, #60	; 0x3c
   1f838:	ldr	r8, [r4, #48]	; 0x30
   1f83c:	blx	r8
   1f840:	cmp	r0, #0
   1f844:	bne	1f87c <flatcc_builder_append_string@@Base+0xd8>
   1f848:	ldr	r1, [r4, #28]
   1f84c:	ldr	r2, [r4, #64]	; 0x40
   1f850:	ldr	r3, [r4, #60]	; 0x3c
   1f854:	sub	r2, r2, r1
   1f858:	cmn	r2, #4
   1f85c:	mvnhi	r2, #3
   1f860:	str	r2, [r4, #24]
   1f864:	ldr	r2, [r4, #32]
   1f868:	add	r3, r3, r1
   1f86c:	mvn	r1, #3
   1f870:	str	r3, [r4, #16]
   1f874:	str	r1, [r2, #4]
   1f878:	b	1f7f4 <flatcc_builder_append_string@@Base+0x50>
   1f87c:	mov	r3, #0
   1f880:	b	1f810 <flatcc_builder_append_string@@Base+0x6c>
   1f884:	bl	130e0 <__assert_fail@plt+0x654>
   1f888:	bl	1312c <__assert_fail@plt+0x6a0>

0001f88c <flatcc_builder_append_string_str@@Base>:
   1f88c:	push	{r4, r5, r6, r7, r8, lr}
   1f890:	mov	r4, r0
   1f894:	sub	sp, sp, #8
   1f898:	mov	r0, r1
   1f89c:	mov	r6, r1
   1f8a0:	bl	12a20 <strlen@plt>
   1f8a4:	ldr	r2, [r4, #32]
   1f8a8:	ldrh	r3, [r2, #14]
   1f8ac:	cmp	r3, #6
   1f8b0:	bne	1f978 <flatcc_builder_append_string_str@@Base+0xec>
   1f8b4:	ldr	r3, [r2, #20]
   1f8b8:	mov	r5, r0
   1f8bc:	adds	r3, r0, r3
   1f8c0:	bcs	1f974 <flatcc_builder_append_string_str@@Base+0xe8>
   1f8c4:	str	r3, [r2, #20]
   1f8c8:	ldr	r7, [r4, #20]
   1f8cc:	ldr	r3, [r4, #24]
   1f8d0:	add	r1, r0, r7
   1f8d4:	cmp	r1, r3
   1f8d8:	str	r1, [r4, #20]
   1f8dc:	bcs	1f90c <flatcc_builder_append_string_str@@Base+0x80>
   1f8e0:	ldr	r3, [r4, #16]
   1f8e4:	adds	r3, r3, r7
   1f8e8:	beq	1f900 <flatcc_builder_append_string_str@@Base+0x74>
   1f8ec:	mov	r0, r3
   1f8f0:	mov	r2, r5
   1f8f4:	mov	r1, r6
   1f8f8:	bl	129b4 <memcpy@plt>
   1f8fc:	mov	r3, r0
   1f900:	mov	r0, r3
   1f904:	add	sp, sp, #8
   1f908:	pop	{r4, r5, r6, r7, r8, pc}
   1f90c:	ldr	r2, [r4, #28]
   1f910:	mov	r3, #1
   1f914:	add	r2, r2, #1
   1f918:	ldr	r0, [r4, #40]	; 0x28
   1f91c:	add	r2, r2, r1
   1f920:	str	r3, [sp]
   1f924:	add	r1, r4, #60	; 0x3c
   1f928:	ldr	r8, [r4, #48]	; 0x30
   1f92c:	blx	r8
   1f930:	cmp	r0, #0
   1f934:	bne	1f96c <flatcc_builder_append_string_str@@Base+0xe0>
   1f938:	ldr	r1, [r4, #28]
   1f93c:	ldr	r2, [r4, #64]	; 0x40
   1f940:	ldr	r3, [r4, #60]	; 0x3c
   1f944:	sub	r2, r2, r1
   1f948:	cmn	r2, #4
   1f94c:	mvnhi	r2, #3
   1f950:	str	r2, [r4, #24]
   1f954:	ldr	r2, [r4, #32]
   1f958:	add	r3, r3, r1
   1f95c:	mvn	r1, #3
   1f960:	str	r3, [r4, #16]
   1f964:	str	r1, [r2, #4]
   1f968:	b	1f8e4 <flatcc_builder_append_string_str@@Base+0x58>
   1f96c:	mov	r3, #0
   1f970:	b	1f900 <flatcc_builder_append_string_str@@Base+0x74>
   1f974:	bl	130e0 <__assert_fail@plt+0x654>
   1f978:	bl	1312c <__assert_fail@plt+0x6a0>

0001f97c <flatcc_builder_append_string_strn@@Base>:
   1f97c:	push	{r4, r5, r6, r7, r8, lr}
   1f980:	mov	r6, r1
   1f984:	mov	r4, r0
   1f988:	sub	sp, sp, #8
   1f98c:	mov	r1, #0
   1f990:	mov	r0, r6
   1f994:	mov	r5, r2
   1f998:	bl	12a5c <memchr@plt>
   1f99c:	ldr	r2, [r4, #32]
   1f9a0:	ldrh	r3, [r2, #14]
   1f9a4:	cmp	r0, #0
   1f9a8:	subne	r5, r0, r6
   1f9ac:	cmp	r3, #6
   1f9b0:	bne	1fa74 <flatcc_builder_append_string_strn@@Base+0xf8>
   1f9b4:	ldr	r3, [r2, #20]
   1f9b8:	adds	r3, r5, r3
   1f9bc:	bcs	1fa70 <flatcc_builder_append_string_strn@@Base+0xf4>
   1f9c0:	str	r3, [r2, #20]
   1f9c4:	ldr	r7, [r4, #20]
   1f9c8:	ldr	r3, [r4, #24]
   1f9cc:	add	r1, r5, r7
   1f9d0:	cmp	r1, r3
   1f9d4:	str	r1, [r4, #20]
   1f9d8:	bcs	1fa08 <flatcc_builder_append_string_strn@@Base+0x8c>
   1f9dc:	ldr	r3, [r4, #16]
   1f9e0:	adds	r3, r3, r7
   1f9e4:	beq	1f9fc <flatcc_builder_append_string_strn@@Base+0x80>
   1f9e8:	mov	r0, r3
   1f9ec:	mov	r2, r5
   1f9f0:	mov	r1, r6
   1f9f4:	bl	129b4 <memcpy@plt>
   1f9f8:	mov	r3, r0
   1f9fc:	mov	r0, r3
   1fa00:	add	sp, sp, #8
   1fa04:	pop	{r4, r5, r6, r7, r8, pc}
   1fa08:	ldr	r2, [r4, #28]
   1fa0c:	mov	r3, #1
   1fa10:	add	r2, r2, #1
   1fa14:	ldr	r0, [r4, #40]	; 0x28
   1fa18:	add	r2, r2, r1
   1fa1c:	str	r3, [sp]
   1fa20:	add	r1, r4, #60	; 0x3c
   1fa24:	ldr	r8, [r4, #48]	; 0x30
   1fa28:	blx	r8
   1fa2c:	cmp	r0, #0
   1fa30:	bne	1fa68 <flatcc_builder_append_string_strn@@Base+0xec>
   1fa34:	ldr	r1, [r4, #28]
   1fa38:	ldr	r2, [r4, #64]	; 0x40
   1fa3c:	ldr	r3, [r4, #60]	; 0x3c
   1fa40:	sub	r2, r2, r1
   1fa44:	cmn	r2, #4
   1fa48:	mvnhi	r2, #3
   1fa4c:	str	r2, [r4, #24]
   1fa50:	ldr	r2, [r4, #32]
   1fa54:	add	r3, r3, r1
   1fa58:	mvn	r1, #3
   1fa5c:	str	r3, [r4, #16]
   1fa60:	str	r1, [r2, #4]
   1fa64:	b	1f9e0 <flatcc_builder_append_string_strn@@Base+0x64>
   1fa68:	mov	r3, #0
   1fa6c:	b	1f9fc <flatcc_builder_append_string_strn@@Base+0x80>
   1fa70:	bl	130e0 <__assert_fail@plt+0x654>
   1fa74:	bl	1312c <__assert_fail@plt+0x6a0>

0001fa78 <flatcc_builder_truncate_vector@@Base>:
   1fa78:	ldr	r3, [r0, #32]
   1fa7c:	push	{r4, lr}
   1fa80:	ldrh	r2, [r3, #14]
   1fa84:	cmp	r2, #4
   1fa88:	bne	1facc <flatcc_builder_truncate_vector@@Base+0x54>
   1fa8c:	ldr	ip, [r3, #20]
   1fa90:	cmp	ip, r1
   1fa94:	bcc	1fae0 <flatcc_builder_truncate_vector@@Base+0x68>
   1fa98:	ldr	r2, [r3, #16]
   1fa9c:	sub	ip, ip, r1
   1faa0:	str	ip, [r3, #20]
   1faa4:	mul	r2, r2, r1
   1faa8:	ldr	r3, [r0, #20]
   1faac:	ldr	r1, [r0, #16]
   1fab0:	sub	r3, r3, r2
   1fab4:	str	r3, [r0, #20]
   1fab8:	add	r0, r1, r3
   1fabc:	mov	r1, #0
   1fac0:	bl	12a44 <memset@plt>
   1fac4:	mov	r0, #0
   1fac8:	pop	{r4, pc}
   1facc:	ldr	r3, [pc, #32]	; 1faf4 <flatcc_builder_truncate_vector@@Base+0x7c>
   1fad0:	ldr	r2, [pc, #32]	; 1faf8 <flatcc_builder_truncate_vector@@Base+0x80>
   1fad4:	ldr	r1, [pc, #32]	; 1fafc <flatcc_builder_truncate_vector@@Base+0x84>
   1fad8:	ldr	r0, [pc, #32]	; 1fb00 <flatcc_builder_truncate_vector@@Base+0x88>
   1fadc:	bl	12a8c <__assert_fail@plt>
   1fae0:	ldr	r3, [pc, #12]	; 1faf4 <flatcc_builder_truncate_vector@@Base+0x7c>
   1fae4:	ldr	r2, [pc, #24]	; 1fb04 <flatcc_builder_truncate_vector@@Base+0x8c>
   1fae8:	ldr	r1, [pc, #12]	; 1fafc <flatcc_builder_truncate_vector@@Base+0x84>
   1faec:	ldr	r0, [pc, #20]	; 1fb08 <flatcc_builder_truncate_vector@@Base+0x90>
   1faf0:	bl	12a8c <__assert_fail@plt>
   1faf4:	andeq	r8, r2, ip, lsr #13
   1faf8:	ldrdeq	r0, [r0], -r9
   1fafc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1fb00:	andeq	r8, r2, ip, lsr fp
   1fb04:	ldrdeq	r0, [r0], -sl
   1fb08:	ldrdeq	r8, [r2], -ip

0001fb0c <flatcc_builder_truncate_offset_vector@@Base>:
   1fb0c:	ldr	r3, [r0, #32]
   1fb10:	push	{r4, lr}
   1fb14:	ldrh	r2, [r3, #14]
   1fb18:	cmp	r2, #5
   1fb1c:	bne	1fb60 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   1fb20:	ldr	ip, [r3, #20]
   1fb24:	cmp	ip, r1
   1fb28:	bcc	1fb74 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1fb2c:	ldr	r2, [r3, #16]
   1fb30:	sub	ip, ip, r1
   1fb34:	str	ip, [r3, #20]
   1fb38:	mul	r2, r2, r1
   1fb3c:	ldr	r3, [r0, #20]
   1fb40:	ldr	r1, [r0, #16]
   1fb44:	sub	r3, r3, r2
   1fb48:	str	r3, [r0, #20]
   1fb4c:	add	r0, r1, r3
   1fb50:	mov	r1, #0
   1fb54:	bl	12a44 <memset@plt>
   1fb58:	mov	r0, #0
   1fb5c:	pop	{r4, pc}
   1fb60:	ldr	r3, [pc, #32]	; 1fb88 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1fb64:	ldr	r2, [pc, #32]	; 1fb8c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   1fb68:	ldr	r1, [pc, #32]	; 1fb90 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   1fb6c:	ldr	r0, [pc, #32]	; 1fb94 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1fb70:	bl	12a8c <__assert_fail@plt>
   1fb74:	ldr	r3, [pc, #12]	; 1fb88 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1fb78:	ldr	r2, [pc, #24]	; 1fb98 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   1fb7c:	ldr	r1, [pc, #12]	; 1fb90 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   1fb80:	ldr	r0, [pc, #20]	; 1fb9c <flatcc_builder_truncate_offset_vector@@Base+0x90>
   1fb84:	bl	12a8c <__assert_fail@plt>
   1fb88:	andeq	r8, r2, ip, asr #13
   1fb8c:	andeq	r0, r0, r2, ror #7
   1fb90:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1fb94:	andeq	r8, r2, r8, lsr #23
   1fb98:	andeq	r0, r0, r3, ror #7
   1fb9c:	andeq	r8, r2, r0, lsl #24

0001fba0 <flatcc_builder_truncate_string@@Base>:
   1fba0:	ldr	r2, [r0, #32]
   1fba4:	push	{r4, lr}
   1fba8:	ldrh	r3, [r2, #14]
   1fbac:	cmp	r3, #6
   1fbb0:	bne	1fbf0 <flatcc_builder_truncate_string@@Base+0x50>
   1fbb4:	ldr	r3, [r2, #20]
   1fbb8:	cmp	r3, r1
   1fbbc:	bcc	1fc04 <flatcc_builder_truncate_string@@Base+0x64>
   1fbc0:	sub	r3, r3, r1
   1fbc4:	str	r3, [r2, #20]
   1fbc8:	ldr	r3, [r0, #20]
   1fbcc:	ldr	r2, [r0, #16]
   1fbd0:	sub	r3, r3, r1
   1fbd4:	str	r3, [r0, #20]
   1fbd8:	add	r0, r2, r3
   1fbdc:	mov	r2, r1
   1fbe0:	mov	r1, #0
   1fbe4:	bl	12a44 <memset@plt>
   1fbe8:	mov	r0, #0
   1fbec:	pop	{r4, pc}
   1fbf0:	ldr	r3, [pc, #32]	; 1fc18 <flatcc_builder_truncate_string@@Base+0x78>
   1fbf4:	ldr	r2, [pc, #32]	; 1fc1c <flatcc_builder_truncate_string@@Base+0x7c>
   1fbf8:	ldr	r1, [pc, #32]	; 1fc20 <flatcc_builder_truncate_string@@Base+0x80>
   1fbfc:	ldr	r0, [pc, #32]	; 1fc24 <flatcc_builder_truncate_string@@Base+0x84>
   1fc00:	bl	12a8c <__assert_fail@plt>
   1fc04:	ldr	r3, [pc, #12]	; 1fc18 <flatcc_builder_truncate_string@@Base+0x78>
   1fc08:	mov	r2, #1004	; 0x3ec
   1fc0c:	ldr	r1, [pc, #12]	; 1fc20 <flatcc_builder_truncate_string@@Base+0x80>
   1fc10:	ldr	r0, [pc, #16]	; 1fc28 <flatcc_builder_truncate_string@@Base+0x88>
   1fc14:	bl	12a8c <__assert_fail@plt>
   1fc18:	strdeq	r8, [r2], -r4
   1fc1c:	andeq	r0, r0, fp, ror #7
   1fc20:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1fc24:	andeq	r8, r2, r8, asr sl
   1fc28:	andeq	r8, r2, ip, lsr ip

0001fc2c <flatcc_builder_start_vector@@Base>:
   1fc2c:	ldr	ip, [r0, #156]	; 0x9c
   1fc30:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fc34:	cmp	r2, #4
   1fc38:	ldr	lr, [r0, #160]	; 0xa0
   1fc3c:	mov	r4, r0
   1fc40:	add	r0, ip, #1
   1fc44:	movcs	r7, r2
   1fc48:	movcc	r7, #4
   1fc4c:	cmp	r0, lr
   1fc50:	sub	sp, sp, #12
   1fc54:	mov	r6, r1
   1fc58:	mov	r5, r3
   1fc5c:	str	r0, [r4, #156]	; 0x9c
   1fc60:	ble	1fcd0 <flatcc_builder_start_vector@@Base+0xa4>
   1fc64:	ldr	r3, [r4, #176]	; 0xb0
   1fc68:	cmp	r3, #0
   1fc6c:	cmpgt	r0, r3
   1fc70:	movgt	r3, #1
   1fc74:	movle	r3, #0
   1fc78:	bgt	1fd78 <flatcc_builder_start_vector@@Base+0x14c>
   1fc7c:	add	ip, ip, ip, lsl #3
   1fc80:	ldr	r1, [r4, #88]	; 0x58
   1fc84:	lsl	r8, ip, #2
   1fc88:	add	r2, r8, #36	; 0x24
   1fc8c:	cmp	r2, r1
   1fc90:	bhi	1fd54 <flatcc_builder_start_vector@@Base+0x128>
   1fc94:	ldr	r3, [r4, #84]	; 0x54
   1fc98:	add	r3, r3, r8
   1fc9c:	cmp	r3, #0
   1fca0:	str	r3, [r4, #32]
   1fca4:	beq	1fd78 <flatcc_builder_start_vector@@Base+0x14c>
   1fca8:	ldr	r2, [r4, #88]	; 0x58
   1fcac:	ldr	r0, [pc, #204]	; 1fd80 <flatcc_builder_start_vector@@Base+0x154>
   1fcb0:	ldr	r1, [r4, #176]	; 0xb0
   1fcb4:	umull	r0, r2, r0, r2
   1fcb8:	lsr	r2, r2, #3
   1fcbc:	cmp	r1, #0
   1fcc0:	cmpgt	r2, r1
   1fcc4:	str	r2, [r4, #160]	; 0xa0
   1fcc8:	strgt	r1, [r4, #160]	; 0xa0
   1fccc:	b	1fcdc <flatcc_builder_start_vector@@Base+0xb0>
   1fcd0:	ldr	r3, [r4, #32]
   1fcd4:	add	r3, r3, #36	; 0x24
   1fcd8:	str	r3, [r4, #32]
   1fcdc:	ldr	r0, [r4, #20]
   1fce0:	ldr	r1, [r4, #28]
   1fce4:	ldrh	ip, [r4, #130]	; 0x82
   1fce8:	add	r2, r0, r1
   1fcec:	add	r2, r2, #7
   1fcf0:	str	r0, [r3, #8]
   1fcf4:	bic	r2, r2, #7
   1fcf8:	mov	r0, #0
   1fcfc:	strh	ip, [r3, #12]
   1fd00:	strh	r7, [r4, #130]	; 0x82
   1fd04:	str	r1, [r3]
   1fd08:	str	r2, [r4, #28]
   1fd0c:	str	r0, [r4, #20]
   1fd10:	str	r0, [r3, #20]
   1fd14:	str	r6, [r3, #16]
   1fd18:	str	r5, [r3, #24]
   1fd1c:	ldr	r1, [r4, #64]	; 0x40
   1fd20:	ldr	ip, [r4, #60]	; 0x3c
   1fd24:	sub	r1, r1, r2
   1fd28:	mvn	lr, #3
   1fd2c:	cmp	r1, lr
   1fd30:	add	r2, ip, r2
   1fd34:	movhi	r1, lr
   1fd38:	mov	ip, #4
   1fd3c:	strh	ip, [r3, #14]
   1fd40:	str	r2, [r4, #16]
   1fd44:	str	r1, [r4, #24]
   1fd48:	str	lr, [r3, #4]
   1fd4c:	add	sp, sp, #12
   1fd50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fd54:	mov	r1, #4
   1fd58:	ldr	r0, [r4, #40]	; 0x28
   1fd5c:	str	r1, [sp]
   1fd60:	add	r1, r4, #84	; 0x54
   1fd64:	ldr	r9, [r4, #48]	; 0x30
   1fd68:	blx	r9
   1fd6c:	cmp	r0, #0
   1fd70:	beq	1fc94 <flatcc_builder_start_vector@@Base+0x68>
   1fd74:	bl	1306c <__assert_fail@plt+0x5e0>
   1fd78:	mvn	r0, #0
   1fd7c:	b	1fd4c <flatcc_builder_start_vector@@Base+0x120>
   1fd80:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001fd84 <flatcc_builder_start_offset_vector@@Base>:
   1fd84:	ldr	r1, [r0, #156]	; 0x9c
   1fd88:	ldr	r3, [r0, #160]	; 0xa0
   1fd8c:	add	r2, r1, #1
   1fd90:	cmp	r2, r3
   1fd94:	push	{r4, r5, r6, lr}
   1fd98:	mov	r4, r0
   1fd9c:	sub	sp, sp, #8
   1fda0:	str	r2, [r0, #156]	; 0x9c
   1fda4:	ble	1fe14 <flatcc_builder_start_offset_vector@@Base+0x90>
   1fda8:	ldr	r3, [r0, #176]	; 0xb0
   1fdac:	cmp	r3, #0
   1fdb0:	cmpgt	r2, r3
   1fdb4:	movgt	r3, #1
   1fdb8:	movle	r3, #0
   1fdbc:	bgt	1febc <flatcc_builder_start_offset_vector@@Base+0x138>
   1fdc0:	add	r1, r1, r1, lsl #3
   1fdc4:	ldr	r0, [r0, #88]	; 0x58
   1fdc8:	lsl	r5, r1, #2
   1fdcc:	add	r2, r5, #36	; 0x24
   1fdd0:	cmp	r2, r0
   1fdd4:	bhi	1fe98 <flatcc_builder_start_offset_vector@@Base+0x114>
   1fdd8:	ldr	r3, [r4, #84]	; 0x54
   1fddc:	add	r3, r3, r5
   1fde0:	cmp	r3, #0
   1fde4:	str	r3, [r4, #32]
   1fde8:	beq	1febc <flatcc_builder_start_offset_vector@@Base+0x138>
   1fdec:	ldr	r2, [r4, #88]	; 0x58
   1fdf0:	ldr	r0, [pc, #204]	; 1fec4 <flatcc_builder_start_offset_vector@@Base+0x140>
   1fdf4:	ldr	r1, [r4, #176]	; 0xb0
   1fdf8:	umull	r0, r2, r0, r2
   1fdfc:	lsr	r2, r2, #3
   1fe00:	cmp	r1, #0
   1fe04:	cmpgt	r2, r1
   1fe08:	str	r2, [r4, #160]	; 0xa0
   1fe0c:	strgt	r1, [r4, #160]	; 0xa0
   1fe10:	b	1fe20 <flatcc_builder_start_offset_vector@@Base+0x9c>
   1fe14:	ldr	r3, [r0, #32]
   1fe18:	add	r3, r3, #36	; 0x24
   1fe1c:	str	r3, [r0, #32]
   1fe20:	ldr	lr, [r4, #20]
   1fe24:	ldr	ip, [r4, #28]
   1fe28:	ldrh	r5, [r4, #130]	; 0x82
   1fe2c:	add	r2, lr, ip
   1fe30:	add	r2, r2, #7
   1fe34:	bic	r2, r2, #7
   1fe38:	mov	r1, #4
   1fe3c:	mov	r0, #0
   1fe40:	str	lr, [r3, #8]
   1fe44:	strh	r5, [r3, #12]
   1fe48:	strh	r1, [r4, #130]	; 0x82
   1fe4c:	str	ip, [r3]
   1fe50:	str	r2, [r4, #28]
   1fe54:	str	r0, [r4, #20]
   1fe58:	str	r1, [r3, #16]
   1fe5c:	str	r0, [r3, #20]
   1fe60:	ldr	r1, [r4, #64]	; 0x40
   1fe64:	ldr	ip, [r4, #60]	; 0x3c
   1fe68:	sub	r1, r1, r2
   1fe6c:	mvn	lr, #3
   1fe70:	cmp	r1, lr
   1fe74:	add	r2, ip, r2
   1fe78:	movhi	r1, lr
   1fe7c:	mov	ip, #5
   1fe80:	strh	ip, [r3, #14]
   1fe84:	str	r2, [r4, #16]
   1fe88:	str	r1, [r4, #24]
   1fe8c:	str	lr, [r3, #4]
   1fe90:	add	sp, sp, #8
   1fe94:	pop	{r4, r5, r6, pc}
   1fe98:	mov	r1, #4
   1fe9c:	ldr	r0, [r4, #40]	; 0x28
   1fea0:	str	r1, [sp]
   1fea4:	add	r1, r4, #84	; 0x54
   1fea8:	ldr	r6, [r4, #48]	; 0x30
   1feac:	blx	r6
   1feb0:	cmp	r0, #0
   1feb4:	beq	1fdd8 <flatcc_builder_start_offset_vector@@Base+0x54>
   1feb8:	bl	1306c <__assert_fail@plt+0x5e0>
   1febc:	mvn	r0, #0
   1fec0:	b	1fe90 <flatcc_builder_start_offset_vector@@Base+0x10c>
   1fec4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001fec8 <flatcc_builder_create_offset_vector@@Base>:
   1fec8:	push	{r4, r5, r6, r7, r8, lr}
   1fecc:	mov	r4, r0
   1fed0:	ldr	r0, [r0, #156]	; 0x9c
   1fed4:	ldr	r3, [r4, #160]	; 0xa0
   1fed8:	mov	r7, r1
   1fedc:	add	r1, r0, #1
   1fee0:	cmp	r1, r3
   1fee4:	sub	sp, sp, #8
   1fee8:	mov	r5, r2
   1feec:	str	r1, [r4, #156]	; 0x9c
   1fef0:	ble	1ff60 <flatcc_builder_create_offset_vector@@Base+0x98>
   1fef4:	ldr	r3, [r4, #176]	; 0xb0
   1fef8:	cmp	r1, r3
   1fefc:	cmpgt	r3, #0
   1ff00:	movgt	r3, #1
   1ff04:	movle	r3, #0
   1ff08:	bgt	20030 <flatcc_builder_create_offset_vector@@Base+0x168>
   1ff0c:	add	r0, r0, r0, lsl #3
   1ff10:	ldr	r1, [r4, #88]	; 0x58
   1ff14:	lsl	r6, r0, #2
   1ff18:	add	r2, r6, #36	; 0x24
   1ff1c:	cmp	r2, r1
   1ff20:	bhi	20098 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   1ff24:	ldr	r3, [r4, #84]	; 0x54
   1ff28:	add	r3, r3, r6
   1ff2c:	cmp	r3, #0
   1ff30:	str	r3, [r4, #32]
   1ff34:	beq	20030 <flatcc_builder_create_offset_vector@@Base+0x168>
   1ff38:	ldr	r2, [r4, #88]	; 0x58
   1ff3c:	ldr	r0, [pc, #552]	; 2016c <flatcc_builder_create_offset_vector@@Base+0x2a4>
   1ff40:	ldr	r1, [r4, #176]	; 0xb0
   1ff44:	umull	r0, r2, r0, r2
   1ff48:	lsr	r2, r2, #3
   1ff4c:	cmp	r1, #0
   1ff50:	cmpgt	r2, r1
   1ff54:	str	r2, [r4, #160]	; 0xa0
   1ff58:	strgt	r1, [r4, #160]	; 0xa0
   1ff5c:	b	1ff6c <flatcc_builder_create_offset_vector@@Base+0xa4>
   1ff60:	ldr	r3, [r4, #32]
   1ff64:	add	r3, r3, #36	; 0x24
   1ff68:	str	r3, [r4, #32]
   1ff6c:	ldr	r2, [r4, #20]
   1ff70:	ldr	ip, [r4, #28]
   1ff74:	ldrh	r6, [r4, #130]	; 0x82
   1ff78:	add	r1, r2, ip
   1ff7c:	mvn	lr, #3
   1ff80:	add	r1, r1, #7
   1ff84:	str	r2, [r3, #8]
   1ff88:	bic	r1, r1, #7
   1ff8c:	mov	r0, #4
   1ff90:	mov	r2, #0
   1ff94:	strh	r6, [r3, #12]
   1ff98:	strh	r0, [r4, #130]	; 0x82
   1ff9c:	stm	r3, {ip, lr}
   1ffa0:	str	r2, [r4, #20]
   1ffa4:	str	r1, [r4, #28]
   1ffa8:	str	r0, [r3, #16]
   1ffac:	str	r2, [r3, #20]
   1ffb0:	ldr	r2, [r4, #64]	; 0x40
   1ffb4:	ldr	r0, [r4, #60]	; 0x3c
   1ffb8:	sub	r2, r2, r1
   1ffbc:	cmp	r2, lr
   1ffc0:	mov	ip, #5
   1ffc4:	strh	ip, [r3, #14]
   1ffc8:	add	r0, r0, r1
   1ffcc:	strls	r2, [r4, #24]
   1ffd0:	strhi	lr, [r4, #24]
   1ffd4:	movhi	r2, lr
   1ffd8:	mvn	r6, #3
   1ffdc:	cmn	r5, #-1073741823	; 0xc0000001
   1ffe0:	str	r0, [r4, #16]
   1ffe4:	str	r6, [r3, #4]
   1ffe8:	bhi	20154 <flatcc_builder_create_offset_vector@@Base+0x28c>
   1ffec:	lsl	r8, r5, #2
   1fff0:	cmp	r8, r2
   1fff4:	str	r5, [r3, #20]
   1fff8:	str	r8, [r4, #20]
   1fffc:	bcs	20040 <flatcc_builder_create_offset_vector@@Base+0x178>
   20000:	cmp	r0, #0
   20004:	beq	20030 <flatcc_builder_create_offset_vector@@Base+0x168>
   20008:	mov	r2, r8
   2000c:	mov	r1, r7
   20010:	bl	129b4 <memcpy@plt>
   20014:	ldr	r3, [r4, #32]
   20018:	ldrh	r2, [r3, #14]
   2001c:	cmp	r2, #5
   20020:	bne	20158 <flatcc_builder_create_offset_vector@@Base+0x290>
   20024:	ldr	r2, [r3, #20]
   20028:	cmn	r2, #-1073741823	; 0xc0000001
   2002c:	bls	200bc <flatcc_builder_create_offset_vector@@Base+0x1f4>
   20030:	mov	r5, #0
   20034:	mov	r0, r5
   20038:	add	sp, sp, #8
   2003c:	pop	{r4, r5, r6, r7, r8, pc}
   20040:	mov	r3, #1
   20044:	add	r2, r8, #1
   20048:	ldr	r0, [r4, #40]	; 0x28
   2004c:	add	r2, r2, r1
   20050:	str	r3, [sp]
   20054:	add	r1, r4, #60	; 0x3c
   20058:	ldr	r5, [r4, #48]	; 0x30
   2005c:	blx	r5
   20060:	cmp	r0, #0
   20064:	bne	20030 <flatcc_builder_create_offset_vector@@Base+0x168>
   20068:	ldr	r2, [r4, #28]
   2006c:	ldr	r3, [r4, #64]	; 0x40
   20070:	ldr	r0, [r4, #60]	; 0x3c
   20074:	sub	r3, r3, r2
   20078:	ldr	r1, [r4, #32]
   2007c:	cmn	r3, #4
   20080:	movhi	r3, r6
   20084:	add	r0, r0, r2
   20088:	str	r3, [r4, #24]
   2008c:	str	r0, [r4, #16]
   20090:	str	r6, [r1, #4]
   20094:	b	20000 <flatcc_builder_create_offset_vector@@Base+0x138>
   20098:	mov	r1, #4
   2009c:	ldr	r0, [r4, #40]	; 0x28
   200a0:	str	r1, [sp]
   200a4:	add	r1, r4, #84	; 0x54
   200a8:	ldr	r8, [r4, #48]	; 0x30
   200ac:	blx	r8
   200b0:	cmp	r0, #0
   200b4:	beq	1ff24 <flatcc_builder_create_offset_vector@@Base+0x5c>
   200b8:	bl	1306c <__assert_fail@plt+0x5e0>
   200bc:	ldr	r1, [r4, #16]
   200c0:	mov	r0, r4
   200c4:	bl	1daec <flatcc_builder_default_alloc@@Base+0x2fc>
   200c8:	subs	r5, r0, #0
   200cc:	beq	20030 <flatcc_builder_create_offset_vector@@Base+0x168>
   200d0:	ldr	r2, [r4, #20]
   200d4:	mov	r1, #0
   200d8:	ldr	r0, [r4, #16]
   200dc:	bl	12a44 <memset@plt>
   200e0:	ldr	r3, [r4, #32]
   200e4:	ldr	r2, [r4, #64]	; 0x40
   200e8:	ldrh	lr, [r4, #130]	; 0x82
   200ec:	ldr	ip, [r3]
   200f0:	ldr	r1, [r3, #4]
   200f4:	ldrh	r0, [r4, #128]	; 0x80
   200f8:	sub	r2, r2, ip
   200fc:	cmp	r2, r1
   20100:	movcs	r2, r1
   20104:	cmp	r0, lr
   20108:	ldr	r0, [r4, #60]	; 0x3c
   2010c:	ldr	r6, [r3, #8]
   20110:	str	r2, [r4, #24]
   20114:	add	r2, r0, ip
   20118:	str	r2, [r4, #16]
   2011c:	str	r6, [r4, #20]
   20120:	ldr	r2, [r4, #156]	; 0x9c
   20124:	str	ip, [r4, #28]
   20128:	str	r1, [r3, #4]
   2012c:	strhcc	lr, [r4, #128]	; 0x80
   20130:	ldrh	r1, [r3, #12]
   20134:	sub	r2, r2, #1
   20138:	sub	r3, r3, #36	; 0x24
   2013c:	mov	r0, r5
   20140:	str	r2, [r4, #156]	; 0x9c
   20144:	strh	r1, [r4, #130]	; 0x82
   20148:	str	r3, [r4, #32]
   2014c:	add	sp, sp, #8
   20150:	pop	{r4, r5, r6, r7, r8, pc}
   20154:	bl	130e0 <__assert_fail@plt+0x654>
   20158:	ldr	r3, [pc, #16]	; 20170 <flatcc_builder_create_offset_vector@@Base+0x2a8>
   2015c:	ldr	r2, [pc, #16]	; 20174 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   20160:	ldr	r1, [pc, #16]	; 20178 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   20164:	ldr	r0, [pc, #16]	; 2017c <flatcc_builder_create_offset_vector@@Base+0x2b4>
   20168:	bl	12a8c <__assert_fail@plt>
   2016c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   20170:	andeq	r8, r2, r4, lsl r7
   20174:	andeq	r0, r0, r8, asr #11
   20178:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2017c:	andeq	r8, r2, r8, lsr #23

00020180 <flatcc_builder_start_string@@Base>:
   20180:	ldr	r1, [r0, #156]	; 0x9c
   20184:	ldr	r3, [r0, #160]	; 0xa0
   20188:	add	r2, r1, #1
   2018c:	cmp	r2, r3
   20190:	push	{r4, r5, r6, lr}
   20194:	mov	r4, r0
   20198:	sub	sp, sp, #8
   2019c:	str	r2, [r0, #156]	; 0x9c
   201a0:	ble	20210 <flatcc_builder_start_string@@Base+0x90>
   201a4:	ldr	r3, [r0, #176]	; 0xb0
   201a8:	cmp	r3, #0
   201ac:	cmpgt	r2, r3
   201b0:	movgt	r3, #1
   201b4:	movle	r3, #0
   201b8:	bgt	202b8 <flatcc_builder_start_string@@Base+0x138>
   201bc:	add	r1, r1, r1, lsl #3
   201c0:	ldr	r0, [r0, #88]	; 0x58
   201c4:	lsl	r5, r1, #2
   201c8:	add	r2, r5, #36	; 0x24
   201cc:	cmp	r2, r0
   201d0:	bhi	20294 <flatcc_builder_start_string@@Base+0x114>
   201d4:	ldr	r3, [r4, #84]	; 0x54
   201d8:	add	r3, r3, r5
   201dc:	cmp	r3, #0
   201e0:	str	r3, [r4, #32]
   201e4:	beq	202b8 <flatcc_builder_start_string@@Base+0x138>
   201e8:	ldr	r2, [r4, #88]	; 0x58
   201ec:	ldr	r0, [pc, #204]	; 202c0 <flatcc_builder_start_string@@Base+0x140>
   201f0:	ldr	r1, [r4, #176]	; 0xb0
   201f4:	umull	r0, r2, r0, r2
   201f8:	lsr	r2, r2, #3
   201fc:	cmp	r1, #0
   20200:	cmpgt	r2, r1
   20204:	str	r2, [r4, #160]	; 0xa0
   20208:	strgt	r1, [r4, #160]	; 0xa0
   2020c:	b	2021c <flatcc_builder_start_string@@Base+0x9c>
   20210:	ldr	r3, [r0, #32]
   20214:	add	r3, r3, #36	; 0x24
   20218:	str	r3, [r0, #32]
   2021c:	ldr	lr, [r4, #20]
   20220:	ldr	ip, [r4, #28]
   20224:	ldrh	r5, [r4, #130]	; 0x82
   20228:	add	r2, lr, ip
   2022c:	add	r2, r2, #7
   20230:	bic	r2, r2, #7
   20234:	mov	r1, #1
   20238:	mov	r0, #0
   2023c:	str	lr, [r3, #8]
   20240:	strh	r5, [r3, #12]
   20244:	strh	r1, [r4, #130]	; 0x82
   20248:	str	ip, [r3]
   2024c:	str	r2, [r4, #28]
   20250:	str	r0, [r4, #20]
   20254:	str	r1, [r3, #16]
   20258:	str	r0, [r3, #20]
   2025c:	ldr	r1, [r4, #64]	; 0x40
   20260:	ldr	ip, [r4, #60]	; 0x3c
   20264:	sub	r1, r1, r2
   20268:	mvn	lr, #3
   2026c:	cmp	r1, lr
   20270:	add	r2, ip, r2
   20274:	movhi	r1, lr
   20278:	mov	ip, #6
   2027c:	strh	ip, [r3, #14]
   20280:	str	r2, [r4, #16]
   20284:	str	r1, [r4, #24]
   20288:	str	lr, [r3, #4]
   2028c:	add	sp, sp, #8
   20290:	pop	{r4, r5, r6, pc}
   20294:	mov	r1, #4
   20298:	ldr	r0, [r4, #40]	; 0x28
   2029c:	str	r1, [sp]
   202a0:	add	r1, r4, #84	; 0x54
   202a4:	ldr	r6, [r4, #48]	; 0x30
   202a8:	blx	r6
   202ac:	cmp	r0, #0
   202b0:	beq	201d4 <flatcc_builder_start_string@@Base+0x54>
   202b4:	bl	1306c <__assert_fail@plt+0x5e0>
   202b8:	mvn	r0, #0
   202bc:	b	2028c <flatcc_builder_start_string@@Base+0x10c>
   202c0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

000202c4 <flatcc_builder_reserve_table@@Base>:
   202c4:	cmp	r1, #0
   202c8:	push	{r4, r5, r6, r7, lr}
   202cc:	sub	sp, sp, #12
   202d0:	blt	203a8 <flatcc_builder_reserve_table@@Base+0xe4>
   202d4:	ldr	r2, [r0, #32]
   202d8:	add	r1, r1, #2
   202dc:	mov	r5, r0
   202e0:	ldrh	r6, [r2, #28]
   202e4:	ldr	r3, [r2, #16]
   202e8:	ldr	r0, [r0, #56]	; 0x38
   202ec:	lsl	r4, r1, #1
   202f0:	add	r6, r3, r6, lsl #1
   202f4:	add	r2, r6, r4
   202f8:	cmp	r2, r0
   202fc:	bhi	20358 <flatcc_builder_reserve_table@@Base+0x94>
   20300:	ldr	r3, [r5, #52]	; 0x34
   20304:	adds	r3, r3, r6
   20308:	streq	r3, [r5, #4]
   2030c:	mvneq	r0, #0
   20310:	beq	20350 <flatcc_builder_reserve_table@@Base+0x8c>
   20314:	ldr	r2, [r5, #32]
   20318:	add	r3, r3, #4
   2031c:	str	r3, [r5, #4]
   20320:	ldr	r6, [r2, #20]
   20324:	ldr	r3, [r5, #80]	; 0x50
   20328:	add	r2, r4, r6
   2032c:	sub	r2, r2, #3
   20330:	cmp	r2, r3
   20334:	bhi	20380 <flatcc_builder_reserve_table@@Base+0xbc>
   20338:	ldr	r3, [r5, #76]	; 0x4c
   2033c:	add	r3, r3, r6
   20340:	cmp	r3, #0
   20344:	movne	r0, #0
   20348:	mvneq	r0, #0
   2034c:	str	r3, [r5]
   20350:	add	sp, sp, #12
   20354:	pop	{r4, r5, r6, r7, pc}
   20358:	mov	r3, #0
   2035c:	ldr	r0, [r5, #40]	; 0x28
   20360:	add	r1, r5, #52	; 0x34
   20364:	str	r3, [sp]
   20368:	mov	r3, #1
   2036c:	ldr	r7, [r5, #48]	; 0x30
   20370:	blx	r7
   20374:	cmp	r0, #0
   20378:	beq	20300 <flatcc_builder_reserve_table@@Base+0x3c>
   2037c:	bl	1306c <__assert_fail@plt+0x5e0>
   20380:	mov	r3, #3
   20384:	ldr	r0, [r5, #40]	; 0x28
   20388:	add	r1, r5, #76	; 0x4c
   2038c:	str	r3, [sp]
   20390:	mov	r3, #0
   20394:	ldr	r4, [r5, #48]	; 0x30
   20398:	blx	r4
   2039c:	cmp	r0, #0
   203a0:	beq	20338 <flatcc_builder_reserve_table@@Base+0x74>
   203a4:	b	2037c <flatcc_builder_reserve_table@@Base+0xb8>
   203a8:	ldr	r3, [pc, #12]	; 203bc <flatcc_builder_reserve_table@@Base+0xf8>
   203ac:	ldr	r2, [pc, #12]	; 203c0 <flatcc_builder_reserve_table@@Base+0xfc>
   203b0:	ldr	r1, [pc, #12]	; 203c4 <flatcc_builder_reserve_table@@Base+0x100>
   203b4:	ldr	r0, [pc, #12]	; 203c8 <flatcc_builder_reserve_table@@Base+0x104>
   203b8:	bl	12a8c <__assert_fail@plt>
   203bc:	andeq	r8, r2, r8, lsr r7
   203c0:	andeq	r0, r0, r9, lsr #8
   203c4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   203c8:	andeq	r8, r2, r0, ror #24

000203cc <flatcc_builder_start_table@@Base>:
   203cc:	push	{r4, r5, r6, r7, lr}
   203d0:	mov	r5, r1
   203d4:	ldr	r1, [r0, #156]	; 0x9c
   203d8:	ldr	r3, [r0, #160]	; 0xa0
   203dc:	add	r2, r1, #1
   203e0:	cmp	r2, r3
   203e4:	sub	sp, sp, #12
   203e8:	mov	r4, r0
   203ec:	str	r2, [r0, #156]	; 0x9c
   203f0:	ble	20460 <flatcc_builder_start_table@@Base+0x94>
   203f4:	ldr	r3, [r0, #176]	; 0xb0
   203f8:	cmp	r3, #0
   203fc:	cmpgt	r2, r3
   20400:	movgt	r3, #1
   20404:	movle	r3, #0
   20408:	bgt	20600 <flatcc_builder_start_table@@Base+0x234>
   2040c:	add	r1, r1, r1, lsl #3
   20410:	ldr	r0, [r0, #88]	; 0x58
   20414:	lsl	r6, r1, #2
   20418:	add	r2, r6, #36	; 0x24
   2041c:	cmp	r2, r0
   20420:	bhi	205dc <flatcc_builder_start_table@@Base+0x210>
   20424:	ldr	r3, [r4, #84]	; 0x54
   20428:	add	r3, r3, r6
   2042c:	cmp	r3, #0
   20430:	str	r3, [r4, #32]
   20434:	beq	20600 <flatcc_builder_start_table@@Base+0x234>
   20438:	ldr	r2, [r4, #88]	; 0x58
   2043c:	ldr	r0, [pc, #452]	; 20608 <flatcc_builder_start_table@@Base+0x23c>
   20440:	ldr	r1, [r4, #176]	; 0xb0
   20444:	umull	r0, r2, r0, r2
   20448:	lsr	r2, r2, #3
   2044c:	cmp	r2, r1
   20450:	cmpgt	r1, #0
   20454:	str	r2, [r4, #160]	; 0xa0
   20458:	strgt	r1, [r4, #160]	; 0xa0
   2045c:	b	2046c <flatcc_builder_start_table@@Base+0xa0>
   20460:	ldr	r3, [r0, #32]
   20464:	add	r3, r3, #36	; 0x24
   20468:	str	r3, [r0, #32]
   2046c:	ldr	ip, [r4, #20]
   20470:	ldr	lr, [r4, #28]
   20474:	ldrh	r7, [r4, #130]	; 0x82
   20478:	ldr	r6, [r4, #4]
   2047c:	ldr	r0, [r4, #52]	; 0x34
   20480:	add	r2, ip, lr
   20484:	str	ip, [r3, #8]
   20488:	add	r2, r2, #7
   2048c:	mov	ip, #4
   20490:	strh	r7, [r3, #12]
   20494:	sub	r1, r6, r0
   20498:	strh	ip, [r4, #130]	; 0x82
   2049c:	bic	r2, r2, #7
   204a0:	mvn	r6, #3
   204a4:	mov	ip, #0
   204a8:	str	lr, [r3]
   204ac:	str	r6, [r3, #4]
   204b0:	str	r2, [r4, #28]
   204b4:	str	ip, [r4, #20]
   204b8:	str	r1, [r3, #16]
   204bc:	ldr	lr, [r4, #76]	; 0x4c
   204c0:	ldr	r2, [r4]
   204c4:	add	r5, r5, #2
   204c8:	sub	r2, r2, lr
   204cc:	str	r2, [r3, #20]
   204d0:	ldr	r2, [r4, #12]
   204d4:	lsl	r5, r5, #1
   204d8:	str	r2, [r3, #24]
   204dc:	ldrh	r6, [r4, #8]
   204e0:	ldr	lr, [pc, #292]	; 2060c <flatcc_builder_start_table@@Base+0x240>
   204e4:	strh	r6, [r3, #28]
   204e8:	add	r6, r1, r6, lsl #1
   204ec:	ldr	r1, [r4, #56]	; 0x38
   204f0:	add	r2, r6, r5
   204f4:	cmp	r2, r1
   204f8:	mov	r1, #3
   204fc:	strh	ip, [r4, #8]
   20500:	str	lr, [r4, #12]
   20504:	strh	r1, [r3, #14]
   20508:	bhi	2058c <flatcc_builder_start_table@@Base+0x1c0>
   2050c:	adds	r6, r6, r0
   20510:	streq	r6, [r4, #4]
   20514:	beq	20600 <flatcc_builder_start_table@@Base+0x234>
   20518:	ldr	r3, [r4, #32]
   2051c:	add	r6, r6, #4
   20520:	str	r6, [r4, #4]
   20524:	ldr	r6, [r3, #20]
   20528:	sub	r2, r5, #3
   2052c:	ldr	r3, [r4, #80]	; 0x50
   20530:	add	r2, r2, r6
   20534:	cmp	r2, r3
   20538:	bhi	205b4 <flatcc_builder_start_table@@Base+0x1e8>
   2053c:	ldr	r3, [r4, #76]	; 0x4c
   20540:	add	r3, r3, r6
   20544:	cmp	r3, #0
   20548:	str	r3, [r4]
   2054c:	beq	20600 <flatcc_builder_start_table@@Base+0x234>
   20550:	ldr	ip, [r4, #28]
   20554:	ldr	r3, [r4, #64]	; 0x40
   20558:	ldr	r2, [pc, #176]	; 20610 <flatcc_builder_start_table@@Base+0x244>
   2055c:	sub	r3, r3, ip
   20560:	ldr	r1, [r4, #60]	; 0x3c
   20564:	ldr	lr, [r4, #32]
   20568:	cmp	r3, r2
   2056c:	mov	r0, #0
   20570:	add	r1, r1, ip
   20574:	movcs	r3, r2
   20578:	str	r1, [r4, #16]
   2057c:	str	r3, [r4, #24]
   20580:	str	r2, [lr, #4]
   20584:	add	sp, sp, #12
   20588:	pop	{r4, r5, r6, r7, pc}
   2058c:	ldr	r0, [r4, #40]	; 0x28
   20590:	mov	r3, #1
   20594:	str	ip, [sp]
   20598:	add	r1, r4, #52	; 0x34
   2059c:	ldr	r7, [r4, #48]	; 0x30
   205a0:	blx	r7
   205a4:	cmp	r0, #0
   205a8:	bne	205d8 <flatcc_builder_start_table@@Base+0x20c>
   205ac:	ldr	r0, [r4, #52]	; 0x34
   205b0:	b	2050c <flatcc_builder_start_table@@Base+0x140>
   205b4:	mov	r3, #3
   205b8:	ldr	r0, [r4, #40]	; 0x28
   205bc:	add	r1, r4, #76	; 0x4c
   205c0:	str	r3, [sp]
   205c4:	mov	r3, #0
   205c8:	ldr	r5, [r4, #48]	; 0x30
   205cc:	blx	r5
   205d0:	cmp	r0, #0
   205d4:	beq	2053c <flatcc_builder_start_table@@Base+0x170>
   205d8:	bl	1306c <__assert_fail@plt+0x5e0>
   205dc:	mov	r1, #4
   205e0:	ldr	r0, [r4, #40]	; 0x28
   205e4:	str	r1, [sp]
   205e8:	add	r1, r4, #84	; 0x54
   205ec:	ldr	r7, [r4, #48]	; 0x30
   205f0:	blx	r7
   205f4:	cmp	r0, #0
   205f8:	beq	20424 <flatcc_builder_start_table@@Base+0x58>
   205fc:	b	205d8 <flatcc_builder_start_table@@Base+0x20c>
   20600:	mvn	r0, #0
   20604:	b	20584 <flatcc_builder_start_table@@Base+0x1b8>
   20608:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   2060c:	svccs	0x00693b52
   20610:	strdeq	pc, [r0], -ip

00020614 <flatcc_builder_create_vtable@@Base>:
   20614:	push	{r4, r5, r6, lr}
   20618:	sub	sp, sp, #80	; 0x50
   2061c:	mov	r3, #0
   20620:	cmp	r2, #0
   20624:	str	r3, [sp, #8]
   20628:	str	r3, [sp, #12]
   2062c:	mov	r4, r0
   20630:	ldr	r3, [r0, #152]	; 0x98
   20634:	beq	206a8 <flatcc_builder_create_vtable@@Base+0x94>
   20638:	mov	r0, #1
   2063c:	cmp	r3, #0
   20640:	str	r1, [sp, #16]
   20644:	str	r2, [sp, #8]
   20648:	str	r2, [sp, #20]
   2064c:	str	r0, [sp, #12]
   20650:	mov	r1, r2
   20654:	beq	206c0 <flatcc_builder_create_vtable@@Base+0xac>
   20658:	ldr	r3, [r4, #136]	; 0x88
   2065c:	sub	r5, r3, r2
   20660:	cmp	r3, r5
   20664:	ble	206bc <flatcc_builder_create_vtable@@Base+0xa8>
   20668:	ldr	r0, [r4, #36]	; 0x24
   2066c:	mov	r3, r5
   20670:	str	r2, [sp]
   20674:	add	r1, sp, #16
   20678:	ldr	r6, [r4, #44]	; 0x2c
   2067c:	mov	r2, #1
   20680:	blx	r6
   20684:	cmp	r0, #0
   20688:	bne	20724 <flatcc_builder_create_vtable@@Base+0x110>
   2068c:	cmp	r5, #0
   20690:	str	r5, [r4, #136]	; 0x88
   20694:	beq	2069c <flatcc_builder_create_vtable@@Base+0x88>
   20698:	add	r5, r5, #1
   2069c:	mov	r0, r5
   206a0:	add	sp, sp, #80	; 0x50
   206a4:	pop	{r4, r5, r6, pc}
   206a8:	cmp	r3, #0
   206ac:	bne	206bc <flatcc_builder_create_vtable@@Base+0xa8>
   206b0:	ldr	r2, [r0, #180]	; 0xb4
   206b4:	cmp	r2, #0
   206b8:	beq	20718 <flatcc_builder_create_vtable@@Base+0x104>
   206bc:	bl	130b8 <__assert_fail@plt+0x62c>
   206c0:	ldr	r3, [r4, #180]	; 0xb4
   206c4:	cmp	r3, #0
   206c8:	bne	20658 <flatcc_builder_create_vtable@@Base+0x44>
   206cc:	ldr	r5, [r4, #140]	; 0x8c
   206d0:	add	r3, r5, r2
   206d4:	cmp	r5, r3
   206d8:	str	r3, [r4, #140]	; 0x8c
   206dc:	movle	r2, r0
   206e0:	bgt	20738 <flatcc_builder_create_vtable@@Base+0x124>
   206e4:	ldr	r0, [r4, #36]	; 0x24
   206e8:	mov	r3, r5
   206ec:	str	r1, [sp]
   206f0:	add	r1, sp, #16
   206f4:	ldr	r4, [r4, #44]	; 0x2c
   206f8:	blx	r4
   206fc:	cmp	r0, #0
   20700:	beq	20698 <flatcc_builder_create_vtable@@Base+0x84>
   20704:	ldr	r3, [pc, #48]	; 2073c <flatcc_builder_create_vtable@@Base+0x128>
   20708:	ldr	r2, [pc, #48]	; 20740 <flatcc_builder_create_vtable@@Base+0x12c>
   2070c:	ldr	r1, [pc, #48]	; 20744 <flatcc_builder_create_vtable@@Base+0x130>
   20710:	ldr	r0, [pc, #48]	; 20748 <flatcc_builder_create_vtable@@Base+0x134>
   20714:	bl	12a8c <__assert_fail@plt>
   20718:	ldr	r5, [r4, #140]	; 0x8c
   2071c:	mov	r1, r2
   20720:	b	206e4 <flatcc_builder_create_vtable@@Base+0xd0>
   20724:	ldr	r3, [pc, #32]	; 2074c <flatcc_builder_create_vtable@@Base+0x138>
   20728:	ldr	r2, [pc, #32]	; 20750 <flatcc_builder_create_vtable@@Base+0x13c>
   2072c:	ldr	r1, [pc, #16]	; 20744 <flatcc_builder_create_vtable@@Base+0x130>
   20730:	ldr	r0, [pc, #16]	; 20748 <flatcc_builder_create_vtable@@Base+0x134>
   20734:	bl	12a8c <__assert_fail@plt>
   20738:	bl	13090 <__assert_fail@plt+0x604>
   2073c:	muleq	r2, r8, r2
   20740:	andeq	r0, r0, r5, lsr #5
   20744:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20748:	muleq	r2, r0, sl
   2074c:	andeq	r8, r2, r4, lsr #5
   20750:	andeq	r0, r0, fp, lsl #5

00020754 <flatcc_builder_create_cached_vtable@@Base>:
   20754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20758:	sub	sp, sp, #28
   2075c:	ldr	r4, [r0, #116]	; 0x74
   20760:	mov	sl, r3
   20764:	cmp	r4, #0
   20768:	mov	r8, r0
   2076c:	str	r1, [sp, #8]
   20770:	mov	r7, r2
   20774:	rsbne	r3, r4, #32
   20778:	beq	208d0 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   2077c:	lsr	sl, sl, r3
   20780:	ldr	r3, [r8, #92]	; 0x5c
   20784:	adds	r2, r3, sl, lsl #2
   20788:	str	r3, [sp, #16]
   2078c:	str	r2, [sp, #20]
   20790:	beq	208c4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20794:	ldr	r5, [r3, sl, lsl #2]
   20798:	cmp	r5, #0
   2079c:	beq	209c0 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   207a0:	mov	r3, #0
   207a4:	ldr	fp, [r8, #100]	; 0x64
   207a8:	ldr	r6, [r8, #68]	; 0x44
   207ac:	mov	r9, r2
   207b0:	str	r3, [sp, #12]
   207b4:	b	207c8 <flatcc_builder_create_cached_vtable@@Base+0x74>
   207b8:	ldr	r5, [r4, #12]
   207bc:	add	r9, r4, #12
   207c0:	cmp	r5, #0
   207c4:	beq	20818 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   207c8:	add	r4, fp, r5
   207cc:	ldr	r2, [r4, #8]
   207d0:	add	r1, r6, r2
   207d4:	ldrh	r2, [r6, r2]
   207d8:	cmp	r2, r7
   207dc:	bne	207b8 <flatcc_builder_create_cached_vtable@@Base+0x64>
   207e0:	mov	r2, r7
   207e4:	ldr	r0, [sp, #8]
   207e8:	bl	129c0 <memcmp@plt>
   207ec:	cmp	r0, #0
   207f0:	bne	207b8 <flatcc_builder_create_cached_vtable@@Base+0x64>
   207f4:	ldr	r1, [r4, #4]
   207f8:	ldr	r2, [r8, #152]	; 0x98
   207fc:	cmp	r1, r2
   20800:	beq	20894 <flatcc_builder_create_cached_vtable@@Base+0x140>
   20804:	ldr	r5, [r4, #12]
   20808:	add	r9, r4, #12
   2080c:	cmp	r5, #0
   20810:	str	r4, [sp, #12]
   20814:	bne	207c8 <flatcc_builder_create_cached_vtable@@Base+0x74>
   20818:	ldr	r4, [r8, #124]	; 0x7c
   2081c:	ldr	r3, [r8, #104]	; 0x68
   20820:	add	r2, r4, #16
   20824:	cmp	r2, r3
   20828:	bhi	20998 <flatcc_builder_create_cached_vtable@@Base+0x244>
   2082c:	ldr	r5, [r8, #100]	; 0x64
   20830:	adds	r6, r5, r4
   20834:	beq	208c4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20838:	ldr	r3, [r8, #124]	; 0x7c
   2083c:	ldr	r0, [sp, #16]
   20840:	ldr	r2, [r8, #152]	; 0x98
   20844:	add	r1, r3, #16
   20848:	str	r1, [r8, #124]	; 0x7c
   2084c:	str	r2, [r6, #4]
   20850:	ldr	r1, [r0, sl, lsl #2]
   20854:	mov	r2, r7
   20858:	str	r1, [r6, #12]
   2085c:	str	r3, [r0, sl, lsl #2]
   20860:	ldr	r1, [sp, #8]
   20864:	mov	r0, r8
   20868:	bl	20614 <flatcc_builder_create_vtable@@Base>
   2086c:	cmp	r0, #0
   20870:	str	r0, [r5, r4]
   20874:	beq	208c4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20878:	ldr	r3, [sp, #12]
   2087c:	cmp	r3, #0
   20880:	beq	209c8 <flatcc_builder_create_cached_vtable@@Base+0x274>
   20884:	ldr	r3, [r3, #8]
   20888:	str	r3, [r6, #8]
   2088c:	add	sp, sp, #28
   20890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20894:	ldr	r3, [sp, #20]
   20898:	cmp	r3, r9
   2089c:	beq	208b8 <flatcc_builder_create_cached_vtable@@Base+0x164>
   208a0:	ldr	r2, [sp, #16]
   208a4:	ldr	r3, [r4, #12]
   208a8:	str	r3, [r9]
   208ac:	ldr	r3, [r2, sl, lsl #2]
   208b0:	str	r3, [r4, #12]
   208b4:	str	r5, [r2, sl, lsl #2]
   208b8:	ldr	r0, [r4]
   208bc:	add	sp, sp, #28
   208c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208c4:	mov	r0, #0
   208c8:	add	sp, sp, #28
   208cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208d0:	ldr	r3, [r0, #124]	; 0x7c
   208d4:	add	r5, r0, #92	; 0x5c
   208d8:	cmp	r3, #0
   208dc:	bne	20a8c <flatcc_builder_create_cached_vtable@@Base+0x338>
   208e0:	ldr	r3, [r0, #104]	; 0x68
   208e4:	cmp	r3, #15
   208e8:	bls	2096c <flatcc_builder_create_cached_vtable@@Base+0x218>
   208ec:	ldr	r3, [r8, #100]	; 0x64
   208f0:	cmp	r3, #0
   208f4:	beq	208c4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   208f8:	mov	r2, #16
   208fc:	mov	r3, #5
   20900:	str	r2, [r8, #124]	; 0x7c
   20904:	ldr	r0, [r8, #40]	; 0x28
   20908:	mov	r1, r5
   2090c:	str	r3, [sp]
   20910:	mov	r2, #256	; 0x100
   20914:	ldr	r5, [r8, #48]	; 0x30
   20918:	mov	r3, #1
   2091c:	blx	r5
   20920:	cmp	r0, #0
   20924:	bne	208c4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20928:	ldr	r1, [r8, #96]	; 0x60
   2092c:	mov	r3, #256	; 0x100
   20930:	b	20938 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20934:	mov	r3, r2
   20938:	lsl	r2, r3, #1
   2093c:	cmp	r2, r1
   20940:	bls	20934 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   20944:	lsr	r3, r3, #2
   20948:	cmp	r3, #1
   2094c:	bls	20a18 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   20950:	mov	r2, #1
   20954:	add	r4, r4, #1
   20958:	cmp	r3, r2, lsl r4
   2095c:	bhi	20954 <flatcc_builder_create_cached_vtable@@Base+0x200>
   20960:	rsb	r3, r4, #32
   20964:	str	r4, [r8, #116]	; 0x74
   20968:	b	2077c <flatcc_builder_create_cached_vtable@@Base+0x28>
   2096c:	mov	r3, #6
   20970:	ldr	r0, [r0, #40]	; 0x28
   20974:	mov	r2, #16
   20978:	str	r3, [sp]
   2097c:	add	r1, r8, #100	; 0x64
   20980:	ldr	r6, [r8, #48]	; 0x30
   20984:	mov	r3, r4
   20988:	blx	r6
   2098c:	cmp	r0, #0
   20990:	beq	208ec <flatcc_builder_create_cached_vtable@@Base+0x198>
   20994:	b	20a80 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   20998:	mov	r3, #6
   2099c:	ldr	r0, [r8, #40]	; 0x28
   209a0:	add	r1, r8, #100	; 0x64
   209a4:	str	r3, [sp]
   209a8:	mov	r3, #0
   209ac:	ldr	r5, [r8, #48]	; 0x30
   209b0:	blx	r5
   209b4:	cmp	r0, #0
   209b8:	beq	2082c <flatcc_builder_create_cached_vtable@@Base+0xd8>
   209bc:	b	20a80 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   209c0:	str	r5, [sp, #12]
   209c4:	b	20818 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   209c8:	ldr	r3, [r8, #172]	; 0xac
   209cc:	ldr	r9, [r8, #120]	; 0x78
   209d0:	cmp	r3, #0
   209d4:	add	r2, r9, r7
   209d8:	beq	20a20 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   209dc:	cmp	r3, r2
   209e0:	bcs	20a20 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   209e4:	ldr	r3, [r8, #116]	; 0x74
   209e8:	cmp	r3, #0
   209ec:	beq	2088c <flatcc_builder_create_cached_vtable@@Base+0x138>
   209f0:	ldr	r6, [sp, #12]
   209f4:	ldr	r2, [r8, #96]	; 0x60
   209f8:	mov	r1, r6
   209fc:	ldr	r0, [r8, #92]	; 0x5c
   20a00:	bl	12a44 <memset@plt>
   20a04:	mov	r3, #16
   20a08:	ldr	r0, [r5, r4]
   20a0c:	str	r6, [r8, #120]	; 0x78
   20a10:	str	r3, [r8, #124]	; 0x7c
   20a14:	b	2088c <flatcc_builder_create_cached_vtable@@Base+0x138>
   20a18:	mov	r3, #32
   20a1c:	b	20964 <flatcc_builder_create_cached_vtable@@Base+0x210>
   20a20:	ldr	r3, [r8, #72]	; 0x48
   20a24:	cmp	r3, r2
   20a28:	bcc	20a5c <flatcc_builder_create_cached_vtable@@Base+0x308>
   20a2c:	ldr	r3, [r8, #68]	; 0x44
   20a30:	adds	r0, r3, r9
   20a34:	beq	20a84 <flatcc_builder_create_cached_vtable@@Base+0x330>
   20a38:	ldr	r3, [r8, #120]	; 0x78
   20a3c:	ldr	r1, [sp, #8]
   20a40:	add	ip, r3, r7
   20a44:	str	r3, [r6, #8]
   20a48:	mov	r2, r7
   20a4c:	str	ip, [r8, #120]	; 0x78
   20a50:	bl	129b4 <memcpy@plt>
   20a54:	ldr	r0, [r5, r4]
   20a58:	b	2088c <flatcc_builder_create_cached_vtable@@Base+0x138>
   20a5c:	mov	r3, #2
   20a60:	ldr	r0, [r8, #40]	; 0x28
   20a64:	add	r1, r8, #68	; 0x44
   20a68:	str	r3, [sp]
   20a6c:	mov	r3, #0
   20a70:	ldr	sl, [r8, #48]	; 0x30
   20a74:	blx	sl
   20a78:	cmp	r0, #0
   20a7c:	beq	20a2c <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   20a80:	bl	1306c <__assert_fail@plt+0x5e0>
   20a84:	mvn	r0, #0
   20a88:	b	2088c <flatcc_builder_create_cached_vtable@@Base+0x138>
   20a8c:	ldr	r3, [pc, #12]	; 20aa0 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   20a90:	ldr	r2, [pc, #12]	; 20aa4 <flatcc_builder_create_cached_vtable@@Base+0x350>
   20a94:	ldr	r1, [pc, #12]	; 20aa8 <flatcc_builder_create_cached_vtable@@Base+0x354>
   20a98:	ldr	r0, [pc, #12]	; 20aac <flatcc_builder_create_cached_vtable@@Base+0x358>
   20a9c:	bl	12a8c <__assert_fail@plt>
   20aa0:	andeq	r8, r2, r8, asr r7
   20aa4:	andeq	r0, r0, r6, asr r1
   20aa8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20aac:	andeq	r8, r2, ip, ror #24

00020ab0 <flatcc_builder_create_table@@Base>:
   20ab0:	push	{r4, r5, r6, r7, r8, lr}
   20ab4:	sub	sp, sp, #88	; 0x58
   20ab8:	ldr	r4, [sp, #116]	; 0x74
   20abc:	ldr	lr, [sp, #120]	; 0x78
   20ac0:	cmp	r4, #0
   20ac4:	blt	20bfc <flatcc_builder_create_table@@Base+0x14c>
   20ac8:	mov	r8, r2
   20acc:	ands	r2, lr, #1
   20ad0:	beq	20c28 <flatcc_builder_create_table@@Base+0x178>
   20ad4:	mov	r5, r0
   20ad8:	ldrh	r0, [r0, #128]	; 0x80
   20adc:	cmp	r3, #4
   20ae0:	movcc	r3, #4
   20ae4:	ldr	ip, [r5, #136]	; 0x88
   20ae8:	cmp	r0, r3
   20aec:	mvn	r0, #3
   20af0:	strhcc	r3, [r5, #128]	; 0x80
   20af4:	sub	r7, ip, r8
   20af8:	sub	r3, r3, #1
   20afc:	sub	r0, r0, r8
   20b00:	and	r7, r7, r3
   20b04:	add	r0, r0, ip
   20b08:	sub	lr, lr, #1
   20b0c:	sub	r0, r0, r7
   20b10:	sub	lr, r0, lr
   20b14:	cmp	r4, #0
   20b18:	str	lr, [sp, #12]
   20b1c:	beq	20b50 <flatcc_builder_create_table@@Base+0xa0>
   20b20:	ldr	ip, [sp, #112]	; 0x70
   20b24:	mvn	r6, #3
   20b28:	add	r4, ip, r4, lsl #1
   20b2c:	sub	r6, r6, r0
   20b30:	ldrh	r3, [ip], #2
   20b34:	sub	lr, r6, r3
   20b38:	ldr	r0, [r1, r3]
   20b3c:	cmp	r4, ip
   20b40:	add	r0, r0, lr
   20b44:	str	r0, [r1, r3]
   20b48:	bne	20b30 <flatcc_builder_create_table@@Base+0x80>
   20b4c:	ldr	ip, [r5, #136]	; 0x88
   20b50:	cmp	r8, #0
   20b54:	mov	r3, #4
   20b58:	mov	r0, #1
   20b5c:	str	r3, [sp, #16]
   20b60:	movne	r2, #2
   20b64:	str	r3, [sp, #28]
   20b68:	addne	r3, r8, r3
   20b6c:	str	r0, [sp, #20]
   20b70:	add	lr, sp, #12
   20b74:	strne	r1, [sp, #32]
   20b78:	strne	r8, [sp, #36]	; 0x24
   20b7c:	strne	r3, [sp, #16]
   20b80:	strne	r2, [sp, #20]
   20b84:	movne	r0, #3
   20b88:	moveq	r0, #2
   20b8c:	cmp	r7, #0
   20b90:	str	lr, [sp, #24]
   20b94:	beq	20bc0 <flatcc_builder_create_table@@Base+0x110>
   20b98:	add	r2, r2, #1
   20b9c:	add	r1, sp, #88	; 0x58
   20ba0:	add	r1, r1, r2, lsl #3
   20ba4:	ldr	lr, [pc, #144]	; 20c3c <flatcc_builder_create_table@@Base+0x18c>
   20ba8:	mov	r2, r0
   20bac:	add	r3, r3, r7
   20bb0:	str	r7, [r1, #-68]	; 0xffffffbc
   20bb4:	str	r3, [sp, #16]
   20bb8:	str	r0, [sp, #20]
   20bbc:	str	lr, [r1, #-72]	; 0xffffffb8
   20bc0:	sub	r4, ip, r3
   20bc4:	cmp	r4, ip
   20bc8:	bge	20c24 <flatcc_builder_create_table@@Base+0x174>
   20bcc:	ldr	r0, [r5, #36]	; 0x24
   20bd0:	add	r1, sp, #24
   20bd4:	str	r3, [sp]
   20bd8:	mov	r3, r4
   20bdc:	ldr	r6, [r5, #44]	; 0x2c
   20be0:	blx	r6
   20be4:	cmp	r0, #0
   20be8:	bne	20c10 <flatcc_builder_create_table@@Base+0x160>
   20bec:	mov	r0, r4
   20bf0:	str	r4, [r5, #136]	; 0x88
   20bf4:	add	sp, sp, #88	; 0x58
   20bf8:	pop	{r4, r5, r6, r7, r8, pc}
   20bfc:	ldr	r3, [pc, #60]	; 20c40 <flatcc_builder_create_table@@Base+0x190>
   20c00:	ldr	r2, [pc, #60]	; 20c44 <flatcc_builder_create_table@@Base+0x194>
   20c04:	ldr	r1, [pc, #60]	; 20c48 <flatcc_builder_create_table@@Base+0x198>
   20c08:	ldr	r0, [pc, #60]	; 20c4c <flatcc_builder_create_table@@Base+0x19c>
   20c0c:	bl	12a8c <__assert_fail@plt>
   20c10:	ldr	r3, [pc, #56]	; 20c50 <flatcc_builder_create_table@@Base+0x1a0>
   20c14:	ldr	r2, [pc, #56]	; 20c54 <flatcc_builder_create_table@@Base+0x1a4>
   20c18:	ldr	r1, [pc, #40]	; 20c48 <flatcc_builder_create_table@@Base+0x198>
   20c1c:	ldr	r0, [pc, #52]	; 20c58 <flatcc_builder_create_table@@Base+0x1a8>
   20c20:	bl	12a8c <__assert_fail@plt>
   20c24:	bl	130b8 <__assert_fail@plt+0x62c>
   20c28:	ldr	r3, [pc, #16]	; 20c40 <flatcc_builder_create_table@@Base+0x190>
   20c2c:	ldr	r2, [pc, #40]	; 20c5c <flatcc_builder_create_table@@Base+0x1ac>
   20c30:	ldr	r1, [pc, #16]	; 20c48 <flatcc_builder_create_table@@Base+0x198>
   20c34:	ldr	r0, [pc, #36]	; 20c60 <flatcc_builder_create_table@@Base+0x1b0>
   20c38:	bl	12a8c <__assert_fail@plt>
   20c3c:	andeq	r8, r2, r0, lsr #6
   20c40:	andeq	r8, r2, r4, ror #14
   20c44:	ldrdeq	r0, [r0], -r5
   20c48:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20c4c:	andeq	r8, r2, ip, ror ip
   20c50:	andeq	r8, r2, r4, lsr #5
   20c54:	andeq	r0, r0, fp, lsl #5
   20c58:	muleq	r2, r0, sl
   20c5c:	ldrdeq	r0, [r0], -fp
   20c60:	muleq	r2, r0, ip

00020c64 <flatcc_builder_check_required_field@@Base>:
   20c64:	ldr	r3, [r0, #32]
   20c68:	ldrh	r3, [r3, #14]
   20c6c:	cmp	r3, #3
   20c70:	bne	20c9c <flatcc_builder_check_required_field@@Base+0x38>
   20c74:	ldrh	r3, [r0, #8]
   20c78:	cmp	r3, r1
   20c7c:	movls	r0, #0
   20c80:	bls	20c98 <flatcc_builder_check_required_field@@Base+0x34>
   20c84:	ldr	r3, [r0, #4]
   20c88:	lsl	r1, r1, #1
   20c8c:	ldrh	r0, [r3, r1]
   20c90:	adds	r0, r0, #0
   20c94:	movne	r0, #1
   20c98:	bx	lr
   20c9c:	push	{r4, lr}
   20ca0:	ldr	r3, [pc, #12]	; 20cb4 <flatcc_builder_check_required_field@@Base+0x50>
   20ca4:	ldr	r2, [pc, #12]	; 20cb8 <flatcc_builder_check_required_field@@Base+0x54>
   20ca8:	ldr	r1, [pc, #12]	; 20cbc <flatcc_builder_check_required_field@@Base+0x58>
   20cac:	ldr	r0, [pc, #12]	; 20cc0 <flatcc_builder_check_required_field@@Base+0x5c>
   20cb0:	bl	12a8c <__assert_fail@plt>
   20cb4:	andeq	r8, r2, r0, lsl #15
   20cb8:	strdeq	r0, [r0], -r8
   20cbc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20cc0:	muleq	r2, ip, ip

00020cc4 <flatcc_builder_check_union_field@@Base>:
   20cc4:	ldr	r3, [r0, #32]
   20cc8:	ldrh	r3, [r3, #14]
   20ccc:	cmp	r3, #3
   20cd0:	bne	20d4c <flatcc_builder_check_union_field@@Base+0x88>
   20cd4:	cmp	r1, #0
   20cd8:	beq	20d24 <flatcc_builder_check_union_field@@Base+0x60>
   20cdc:	ldrh	r3, [r0, #8]
   20ce0:	cmp	r3, r1
   20ce4:	bls	20d24 <flatcc_builder_check_union_field@@Base+0x60>
   20ce8:	sub	r1, r1, #-2147483647	; 0x80000001
   20cec:	ldr	r3, [r0, #4]
   20cf0:	lsl	r1, r1, #1
   20cf4:	ldrh	r2, [r3, r1]
   20cf8:	cmp	r2, #0
   20cfc:	beq	20d38 <flatcc_builder_check_union_field@@Base+0x74>
   20d00:	ldr	r0, [r0, #16]
   20d04:	add	r1, r3, r1
   20d08:	ldrb	r2, [r0, r2]
   20d0c:	ldrh	r1, [r1, #2]
   20d10:	cmp	r2, #0
   20d14:	bne	20d2c <flatcc_builder_check_union_field@@Base+0x68>
   20d18:	clz	r0, r1
   20d1c:	lsr	r0, r0, #5
   20d20:	bx	lr
   20d24:	mov	r0, #0
   20d28:	bx	lr
   20d2c:	adds	r0, r1, #0
   20d30:	movne	r0, #1
   20d34:	b	20d28 <flatcc_builder_check_union_field@@Base+0x64>
   20d38:	add	r1, r3, r1
   20d3c:	ldrh	r1, [r1, #2]
   20d40:	clz	r0, r1
   20d44:	lsr	r0, r0, #5
   20d48:	bx	lr
   20d4c:	push	{r4, lr}
   20d50:	ldr	r3, [pc, #12]	; 20d64 <flatcc_builder_check_union_field@@Base+0xa0>
   20d54:	ldr	r2, [pc, #12]	; 20d68 <flatcc_builder_check_union_field@@Base+0xa4>
   20d58:	ldr	r1, [pc, #12]	; 20d6c <flatcc_builder_check_union_field@@Base+0xa8>
   20d5c:	ldr	r0, [pc, #12]	; 20d70 <flatcc_builder_check_union_field@@Base+0xac>
   20d60:	bl	12a8c <__assert_fail@plt>
   20d64:	andeq	r8, r2, r4, lsr #15
   20d68:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20d6c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20d70:	muleq	r2, ip, ip

00020d74 <flatcc_builder_check_required@@Base>:
   20d74:	ldr	r3, [r0, #32]
   20d78:	ldrh	r3, [r3, #14]
   20d7c:	cmp	r3, #3
   20d80:	bne	20de4 <flatcc_builder_check_required@@Base+0x70>
   20d84:	ldrh	r3, [r0, #8]
   20d88:	cmp	r3, r2
   20d8c:	movlt	r0, #0
   20d90:	blt	20de0 <flatcc_builder_check_required@@Base+0x6c>
   20d94:	cmp	r2, #0
   20d98:	ble	20ddc <flatcc_builder_check_required@@Base+0x68>
   20d9c:	ldrh	r3, [r1]
   20da0:	ldr	ip, [r0, #4]
   20da4:	lsl	r3, r3, #1
   20da8:	ldrh	r0, [ip, r3]
   20dac:	cmp	r0, #0
   20db0:	beq	20de0 <flatcc_builder_check_required@@Base+0x6c>
   20db4:	add	r2, r1, r2, lsl #1
   20db8:	add	r1, r1, #2
   20dbc:	b	20dd4 <flatcc_builder_check_required@@Base+0x60>
   20dc0:	ldrh	r3, [r1], #2
   20dc4:	lsl	r3, r3, #1
   20dc8:	ldrh	r0, [ip, r3]
   20dcc:	cmp	r0, #0
   20dd0:	beq	20de0 <flatcc_builder_check_required@@Base+0x6c>
   20dd4:	cmp	r1, r2
   20dd8:	bne	20dc0 <flatcc_builder_check_required@@Base+0x4c>
   20ddc:	mov	r0, #1
   20de0:	bx	lr
   20de4:	push	{r4, lr}
   20de8:	ldr	r3, [pc, #12]	; 20dfc <flatcc_builder_check_required@@Base+0x88>
   20dec:	ldr	r2, [pc, #12]	; 20e00 <flatcc_builder_check_required@@Base+0x8c>
   20df0:	ldr	r1, [pc, #12]	; 20e04 <flatcc_builder_check_required@@Base+0x90>
   20df4:	ldr	r0, [pc, #12]	; 20e08 <flatcc_builder_check_required@@Base+0x94>
   20df8:	bl	12a8c <__assert_fail@plt>
   20dfc:	andeq	r8, r2, r8, asr #15
   20e00:	andeq	r0, r0, r1, lsl r5
   20e04:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20e08:	muleq	r2, ip, ip

00020e0c <flatcc_builder_end_table@@Base>:
   20e0c:	ldr	r3, [r0, #32]
   20e10:	push	{r4, r5, r6, r7, lr}
   20e14:	sub	sp, sp, #20
   20e18:	ldrh	r3, [r3, #14]
   20e1c:	cmp	r3, #3
   20e20:	bne	20fa4 <flatcc_builder_end_table@@Base+0x198>
   20e24:	ldrh	r5, [r0, #8]
   20e28:	ldr	r3, [r0, #12]
   20e2c:	ldr	r1, [pc, #388]	; 20fb8 <flatcc_builder_end_table@@Base+0x1ac>
   20e30:	add	r5, r5, #2
   20e34:	ldr	r2, [r0, #20]
   20e38:	lsl	r5, r5, #1
   20e3c:	add	r2, r2, #4
   20e40:	uxth	r5, r5
   20e44:	eor	r3, r3, r5
   20e48:	uxth	r2, r2
   20e4c:	mul	r3, r1, r3
   20e50:	ldr	ip, [r0, #4]
   20e54:	eor	r3, r3, r2
   20e58:	sub	r6, ip, #4
   20e5c:	mul	r1, r1, r3
   20e60:	strh	r2, [ip, #-2]
   20e64:	strh	r5, [ip, #-4]
   20e68:	mov	r3, r1
   20e6c:	str	r1, [r0, #12]
   20e70:	mov	r2, r5
   20e74:	mov	r1, r6
   20e78:	mov	r4, r0
   20e7c:	bl	20754 <flatcc_builder_create_cached_vtable@@Base>
   20e80:	subs	r7, r0, #0
   20e84:	bne	20e98 <flatcc_builder_end_table@@Base+0x8c>
   20e88:	mov	r5, #0
   20e8c:	mov	r0, r5
   20e90:	add	sp, sp, #20
   20e94:	pop	{r4, r5, r6, r7, pc}
   20e98:	mov	r2, r5
   20e9c:	mov	r1, #0
   20ea0:	mov	r0, r6
   20ea4:	bl	12a44 <memset@plt>
   20ea8:	ldr	r3, [r4, #32]
   20eac:	ldr	ip, [r4, #76]	; 0x4c
   20eb0:	ldr	r0, [r4]
   20eb4:	ldr	r2, [r3, #20]
   20eb8:	ldr	r1, [r4, #16]
   20ebc:	add	ip, ip, r2
   20ec0:	sub	r0, r0, ip
   20ec4:	ldrh	r3, [r4, #130]	; 0x82
   20ec8:	asr	r0, r0, #1
   20ecc:	ldr	r2, [r4, #20]
   20ed0:	str	r0, [sp, #4]
   20ed4:	str	r7, [sp, #8]
   20ed8:	str	ip, [sp]
   20edc:	mov	r0, r4
   20ee0:	bl	20ab0 <flatcc_builder_create_table@@Base>
   20ee4:	subs	r5, r0, #0
   20ee8:	beq	20e88 <flatcc_builder_end_table@@Base+0x7c>
   20eec:	ldr	r3, [r4, #32]
   20ef0:	ldr	r0, [r4, #52]	; 0x34
   20ef4:	ldr	ip, [r4, #76]	; 0x4c
   20ef8:	ldr	r1, [r3, #24]
   20efc:	ldr	r2, [r4, #20]
   20f00:	str	r1, [r4, #12]
   20f04:	ldrh	lr, [r3, #28]
   20f08:	mov	r1, #0
   20f0c:	strh	lr, [r4, #8]
   20f10:	ldr	lr, [r3, #16]
   20f14:	add	r0, r0, lr
   20f18:	str	r0, [r4, #4]
   20f1c:	ldr	r3, [r3, #20]
   20f20:	ldr	r0, [r4, #16]
   20f24:	add	r3, ip, r3
   20f28:	str	r3, [r4]
   20f2c:	bl	12a44 <memset@plt>
   20f30:	ldr	r3, [r4, #32]
   20f34:	ldr	r2, [r4, #64]	; 0x40
   20f38:	ldrh	lr, [r4, #130]	; 0x82
   20f3c:	ldr	ip, [r3]
   20f40:	ldr	r1, [r3, #4]
   20f44:	ldrh	r0, [r4, #128]	; 0x80
   20f48:	sub	r2, r2, ip
   20f4c:	cmp	r2, r1
   20f50:	movcs	r2, r1
   20f54:	cmp	r0, lr
   20f58:	ldr	r0, [r4, #60]	; 0x3c
   20f5c:	ldr	r6, [r3, #8]
   20f60:	str	r2, [r4, #24]
   20f64:	add	r2, r0, ip
   20f68:	str	r2, [r4, #16]
   20f6c:	str	r6, [r4, #20]
   20f70:	ldr	r2, [r4, #156]	; 0x9c
   20f74:	str	ip, [r4, #28]
   20f78:	str	r1, [r3, #4]
   20f7c:	strhcc	lr, [r4, #128]	; 0x80
   20f80:	ldrh	r1, [r3, #12]
   20f84:	sub	r2, r2, #1
   20f88:	sub	r3, r3, #36	; 0x24
   20f8c:	mov	r0, r5
   20f90:	str	r2, [r4, #156]	; 0x9c
   20f94:	strh	r1, [r4, #130]	; 0x82
   20f98:	str	r3, [r4, #32]
   20f9c:	add	sp, sp, #20
   20fa0:	pop	{r4, r5, r6, r7, pc}
   20fa4:	ldr	r3, [pc, #16]	; 20fbc <flatcc_builder_end_table@@Base+0x1b0>
   20fa8:	ldr	r2, [pc, #16]	; 20fc0 <flatcc_builder_end_table@@Base+0x1b4>
   20fac:	ldr	r1, [pc, #16]	; 20fc4 <flatcc_builder_end_table@@Base+0x1b8>
   20fb0:	ldr	r0, [pc, #16]	; 20fc8 <flatcc_builder_end_table@@Base+0x1bc>
   20fb4:	bl	12a8c <__assert_fail@plt>
   20fb8:			; <UNDEFINED> instruction: 0x9e3779b1
   20fbc:	andeq	r8, r2, r8, ror #15
   20fc0:	andeq	r0, r0, r5, lsr #10
   20fc4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   20fc8:	muleq	r2, ip, ip

00020fcc <flatcc_builder_create_vector@@Base>:
   20fcc:	push	{r4, r5, r6, lr}
   20fd0:	sub	sp, sp, #88	; 0x58
   20fd4:	mov	r4, r0
   20fd8:	ldr	ip, [sp, #108]	; 0x6c
   20fdc:	ldrh	r0, [sp, #104]	; 0x68
   20fe0:	cmp	r2, ip
   20fe4:	bhi	210c0 <flatcc_builder_create_vector@@Base+0xf4>
   20fe8:	ldrh	ip, [r4, #128]	; 0x80
   20fec:	mul	r3, r3, r2
   20ff0:	cmp	r0, #4
   20ff4:	movcc	r0, #4
   20ff8:	ldr	lr, [r4, #136]	; 0x88
   20ffc:	cmp	ip, r0
   21000:	sub	r6, lr, r3
   21004:	mov	ip, #4
   21008:	strhcc	r0, [r4, #128]	; 0x80
   2100c:	str	r2, [sp, #12]
   21010:	cmp	r3, #0
   21014:	mov	r2, #1
   21018:	sub	r0, r0, #1
   2101c:	str	ip, [sp, #16]
   21020:	str	r2, [sp, #20]
   21024:	and	r0, r0, r6
   21028:	movne	r2, #2
   2102c:	str	ip, [sp, #28]
   21030:	addne	ip, r3, ip
   21034:	strne	r3, [sp, #36]	; 0x24
   21038:	add	r5, sp, #12
   2103c:	strne	r1, [sp, #32]
   21040:	strne	ip, [sp, #16]
   21044:	strne	r2, [sp, #20]
   21048:	movne	r3, #3
   2104c:	moveq	r3, #2
   21050:	cmp	r0, #0
   21054:	str	r5, [sp, #24]
   21058:	beq	21084 <flatcc_builder_create_vector@@Base+0xb8>
   2105c:	add	r2, r2, #1
   21060:	add	r1, sp, #88	; 0x58
   21064:	add	r1, r1, r2, lsl #3
   21068:	ldr	r5, [pc, #124]	; 210ec <flatcc_builder_create_vector@@Base+0x120>
   2106c:	mov	r2, r3
   21070:	add	ip, ip, r0
   21074:	str	r0, [r1, #-68]	; 0xffffffbc
   21078:	str	ip, [sp, #16]
   2107c:	str	r3, [sp, #20]
   21080:	str	r5, [r1, #-72]	; 0xffffffb8
   21084:	sub	r5, lr, ip
   21088:	cmp	lr, r5
   2108c:	ble	210e8 <flatcc_builder_create_vector@@Base+0x11c>
   21090:	ldr	r0, [r4, #36]	; 0x24
   21094:	mov	r3, r5
   21098:	str	ip, [sp]
   2109c:	add	r1, sp, #24
   210a0:	ldr	r6, [r4, #44]	; 0x2c
   210a4:	blx	r6
   210a8:	cmp	r0, #0
   210ac:	bne	210d4 <flatcc_builder_create_vector@@Base+0x108>
   210b0:	mov	r0, r5
   210b4:	str	r5, [r4, #136]	; 0x88
   210b8:	add	sp, sp, #88	; 0x58
   210bc:	pop	{r4, r5, r6, pc}
   210c0:	ldr	r3, [pc, #40]	; 210f0 <flatcc_builder_create_vector@@Base+0x124>
   210c4:	ldr	r2, [pc, #40]	; 210f4 <flatcc_builder_create_vector@@Base+0x128>
   210c8:	ldr	r1, [pc, #40]	; 210f8 <flatcc_builder_create_vector@@Base+0x12c>
   210cc:	ldr	r0, [pc, #40]	; 210fc <flatcc_builder_create_vector@@Base+0x130>
   210d0:	bl	12a8c <__assert_fail@plt>
   210d4:	ldr	r3, [pc, #36]	; 21100 <flatcc_builder_create_vector@@Base+0x134>
   210d8:	ldr	r2, [pc, #36]	; 21104 <flatcc_builder_create_vector@@Base+0x138>
   210dc:	ldr	r1, [pc, #20]	; 210f8 <flatcc_builder_create_vector@@Base+0x12c>
   210e0:	ldr	r0, [pc, #32]	; 21108 <flatcc_builder_create_vector@@Base+0x13c>
   210e4:	bl	12a8c <__assert_fail@plt>
   210e8:	bl	130b8 <__assert_fail@plt+0x62c>
   210ec:	andeq	r8, r2, r0, lsr #6
   210f0:	andeq	r8, r2, r4, lsl #16
   210f4:	andeq	r0, r0, r5, asr r5
   210f8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   210fc:	andeq	r8, r2, r8, asr #25
   21100:	andeq	r8, r2, r4, lsr #5
   21104:	andeq	r0, r0, fp, lsl #5
   21108:	muleq	r2, r0, sl

0002110c <flatcc_builder_end_vector@@Base>:
   2110c:	ldr	r3, [r0, #32]
   21110:	push	{r4, r5, r6, lr}
   21114:	sub	sp, sp, #88	; 0x58
   21118:	ldrh	r2, [r3, #14]
   2111c:	cmp	r2, #4
   21120:	bne	212c4 <flatcc_builder_end_vector@@Base+0x1b8>
   21124:	ldr	lr, [r3, #20]
   21128:	ldr	r2, [r3, #24]
   2112c:	ldr	r1, [r3, #16]
   21130:	cmp	lr, r2
   21134:	mov	r4, r0
   21138:	ldr	r5, [r0, #16]
   2113c:	ldrh	r3, [r0, #130]	; 0x82
   21140:	bhi	212b0 <flatcc_builder_end_vector@@Base+0x1a4>
   21144:	ldrh	r2, [r0, #128]	; 0x80
   21148:	mul	r1, r1, lr
   2114c:	cmp	r3, #4
   21150:	movcc	r3, #4
   21154:	ldr	ip, [r0, #136]	; 0x88
   21158:	cmp	r2, r3
   2115c:	strhcc	r3, [r0, #128]	; 0x80
   21160:	sub	r2, r3, #1
   21164:	sub	r0, ip, r1
   21168:	cmp	r1, #0
   2116c:	mov	r3, #4
   21170:	and	r0, r0, r2
   21174:	mov	r2, #1
   21178:	str	r3, [sp, #16]
   2117c:	str	r2, [sp, #20]
   21180:	str	r3, [sp, #28]
   21184:	movne	r2, #2
   21188:	addne	r3, r1, r3
   2118c:	strne	r1, [sp, #36]	; 0x24
   21190:	str	lr, [sp, #12]
   21194:	strne	r5, [sp, #32]
   21198:	add	lr, sp, #12
   2119c:	strne	r3, [sp, #16]
   211a0:	strne	r2, [sp, #20]
   211a4:	movne	r1, #3
   211a8:	moveq	r1, #2
   211ac:	cmp	r0, #0
   211b0:	str	lr, [sp, #24]
   211b4:	beq	211e0 <flatcc_builder_end_vector@@Base+0xd4>
   211b8:	add	r2, r2, #1
   211bc:	add	lr, sp, #88	; 0x58
   211c0:	add	lr, lr, r2, lsl #3
   211c4:	ldr	r5, [pc, #268]	; 212d8 <flatcc_builder_end_vector@@Base+0x1cc>
   211c8:	mov	r2, r1
   211cc:	add	r3, r3, r0
   211d0:	str	r0, [lr, #-68]	; 0xffffffbc
   211d4:	str	r3, [sp, #16]
   211d8:	str	r1, [sp, #20]
   211dc:	str	r5, [lr, #-72]	; 0xffffffb8
   211e0:	sub	r5, ip, r3
   211e4:	cmp	ip, r5
   211e8:	ble	212ac <flatcc_builder_end_vector@@Base+0x1a0>
   211ec:	ldr	r0, [r4, #36]	; 0x24
   211f0:	add	r1, sp, #24
   211f4:	str	r3, [sp]
   211f8:	mov	r3, r5
   211fc:	ldr	r6, [r4, #44]	; 0x2c
   21200:	blx	r6
   21204:	subs	r1, r0, #0
   21208:	bne	21298 <flatcc_builder_end_vector@@Base+0x18c>
   2120c:	cmp	r5, #0
   21210:	str	r5, [r4, #136]	; 0x88
   21214:	beq	2128c <flatcc_builder_end_vector@@Base+0x180>
   21218:	ldr	r2, [r4, #20]
   2121c:	ldr	r0, [r4, #16]
   21220:	bl	12a44 <memset@plt>
   21224:	ldr	r3, [r4, #32]
   21228:	ldr	r2, [r4, #64]	; 0x40
   2122c:	ldrh	lr, [r4, #130]	; 0x82
   21230:	ldr	ip, [r3]
   21234:	ldr	r1, [r3, #4]
   21238:	ldrh	r0, [r4, #128]	; 0x80
   2123c:	sub	r2, r2, ip
   21240:	cmp	r2, r1
   21244:	movcs	r2, r1
   21248:	cmp	r0, lr
   2124c:	ldr	r0, [r4, #60]	; 0x3c
   21250:	ldr	r6, [r3, #8]
   21254:	str	r2, [r4, #24]
   21258:	add	r2, r0, ip
   2125c:	str	r2, [r4, #16]
   21260:	str	r6, [r4, #20]
   21264:	ldr	r2, [r4, #156]	; 0x9c
   21268:	str	ip, [r4, #28]
   2126c:	str	r1, [r3, #4]
   21270:	strhcc	lr, [r4, #128]	; 0x80
   21274:	ldrh	r1, [r3, #12]
   21278:	sub	r2, r2, #1
   2127c:	sub	r3, r3, #36	; 0x24
   21280:	str	r2, [r4, #156]	; 0x9c
   21284:	strh	r1, [r4, #130]	; 0x82
   21288:	str	r3, [r4, #32]
   2128c:	mov	r0, r5
   21290:	add	sp, sp, #88	; 0x58
   21294:	pop	{r4, r5, r6, pc}
   21298:	ldr	r3, [pc, #60]	; 212dc <flatcc_builder_end_vector@@Base+0x1d0>
   2129c:	ldr	r2, [pc, #60]	; 212e0 <flatcc_builder_end_vector@@Base+0x1d4>
   212a0:	ldr	r1, [pc, #60]	; 212e4 <flatcc_builder_end_vector@@Base+0x1d8>
   212a4:	ldr	r0, [pc, #60]	; 212e8 <flatcc_builder_end_vector@@Base+0x1dc>
   212a8:	bl	12a8c <__assert_fail@plt>
   212ac:	bl	130b8 <__assert_fail@plt+0x62c>
   212b0:	ldr	r3, [pc, #52]	; 212ec <flatcc_builder_end_vector@@Base+0x1e0>
   212b4:	ldr	r2, [pc, #52]	; 212f0 <flatcc_builder_end_vector@@Base+0x1e4>
   212b8:	ldr	r1, [pc, #36]	; 212e4 <flatcc_builder_end_vector@@Base+0x1d8>
   212bc:	ldr	r0, [pc, #48]	; 212f4 <flatcc_builder_end_vector@@Base+0x1e8>
   212c0:	bl	12a8c <__assert_fail@plt>
   212c4:	ldr	r3, [pc, #44]	; 212f8 <flatcc_builder_end_vector@@Base+0x1ec>
   212c8:	ldr	r2, [pc, #44]	; 212fc <flatcc_builder_end_vector@@Base+0x1f0>
   212cc:	ldr	r1, [pc, #16]	; 212e4 <flatcc_builder_end_vector@@Base+0x1d8>
   212d0:	ldr	r0, [pc, #40]	; 21300 <flatcc_builder_end_vector@@Base+0x1f4>
   212d4:	bl	12a8c <__assert_fail@plt>
   212d8:	andeq	r8, r2, r0, lsr #6
   212dc:	andeq	r8, r2, r4, lsr #5
   212e0:	andeq	r0, r0, fp, lsl #5
   212e4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   212e8:	muleq	r2, r0, sl
   212ec:	andeq	r8, r2, r4, lsl #16
   212f0:	andeq	r0, r0, r5, asr r5
   212f4:	andeq	r8, r2, r8, asr #25
   212f8:	andeq	r8, r2, r4, lsr #16
   212fc:	andeq	r0, r0, r8, ror r5
   21300:	andeq	r8, r2, ip, lsr fp

00021304 <flatcc_builder_vector_count@@Base>:
   21304:	ldr	r3, [r0, #32]
   21308:	ldr	r0, [r3, #20]
   2130c:	bx	lr

00021310 <flatcc_builder_vector_edit@@Base>:
   21310:	ldr	r0, [r0, #16]
   21314:	bx	lr

00021318 <flatcc_builder_create_offset_vector_direct@@Base>:
   21318:	cmn	r2, #-1073741823	; 0xc0000001
   2131c:	bls	21328 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   21320:	mov	r0, #0
   21324:	bx	lr
   21328:	b	1daec <flatcc_builder_default_alloc@@Base+0x2fc>

0002132c <flatcc_builder_end_offset_vector@@Base>:
   2132c:	ldr	r3, [r0, #32]
   21330:	push	{r4, r5, r6, lr}
   21334:	ldrh	r2, [r3, #14]
   21338:	cmp	r2, #5
   2133c:	bne	213ec <flatcc_builder_end_offset_vector@@Base+0xc0>
   21340:	ldr	r2, [r3, #20]
   21344:	cmn	r2, #-1073741823	; 0xc0000001
   21348:	bls	21358 <flatcc_builder_end_offset_vector@@Base+0x2c>
   2134c:	mov	r5, #0
   21350:	mov	r0, r5
   21354:	pop	{r4, r5, r6, pc}
   21358:	ldr	r1, [r0, #16]
   2135c:	mov	r4, r0
   21360:	bl	1daec <flatcc_builder_default_alloc@@Base+0x2fc>
   21364:	subs	r5, r0, #0
   21368:	beq	2134c <flatcc_builder_end_offset_vector@@Base+0x20>
   2136c:	ldr	r2, [r4, #20]
   21370:	mov	r1, #0
   21374:	ldr	r0, [r4, #16]
   21378:	bl	12a44 <memset@plt>
   2137c:	ldr	r3, [r4, #32]
   21380:	ldr	r2, [r4, #64]	; 0x40
   21384:	ldrh	lr, [r4, #130]	; 0x82
   21388:	ldr	ip, [r3]
   2138c:	ldr	r1, [r3, #4]
   21390:	ldrh	r0, [r4, #128]	; 0x80
   21394:	sub	r2, r2, ip
   21398:	cmp	r2, r1
   2139c:	movcs	r2, r1
   213a0:	cmp	r0, lr
   213a4:	ldr	r0, [r4, #60]	; 0x3c
   213a8:	ldr	r6, [r3, #8]
   213ac:	str	r2, [r4, #24]
   213b0:	add	r2, r0, ip
   213b4:	str	r2, [r4, #16]
   213b8:	str	r6, [r4, #20]
   213bc:	ldr	r2, [r4, #156]	; 0x9c
   213c0:	str	ip, [r4, #28]
   213c4:	str	r1, [r3, #4]
   213c8:	strhcc	lr, [r4, #128]	; 0x80
   213cc:	ldrh	r1, [r3, #12]
   213d0:	sub	r2, r2, #1
   213d4:	sub	r3, r3, #36	; 0x24
   213d8:	str	r2, [r4, #156]	; 0x9c
   213dc:	strh	r1, [r4, #130]	; 0x82
   213e0:	str	r3, [r4, #32]
   213e4:	mov	r0, r5
   213e8:	pop	{r4, r5, r6, pc}
   213ec:	ldr	r3, [pc, #12]	; 21400 <flatcc_builder_end_offset_vector@@Base+0xd4>
   213f0:	ldr	r2, [pc, #12]	; 21404 <flatcc_builder_end_offset_vector@@Base+0xd8>
   213f4:	ldr	r1, [pc, #12]	; 21408 <flatcc_builder_end_offset_vector@@Base+0xdc>
   213f8:	ldr	r0, [pc, #12]	; 2140c <flatcc_builder_end_offset_vector@@Base+0xe0>
   213fc:	bl	12a8c <__assert_fail@plt>
   21400:	andeq	r8, r2, r4, lsl r7
   21404:	andeq	r0, r0, r8, asr #11
   21408:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2140c:	andeq	r8, r2, r8, lsr #23

00021410 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   21410:	ldr	r2, [r0, #32]
   21414:	push	{r4, r5, r6, lr}
   21418:	ldrh	ip, [r2, #14]
   2141c:	cmp	ip, #5
   21420:	bne	214d4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   21424:	ldr	r2, [r2, #20]
   21428:	cmn	r2, #-1073741823	; 0xc0000001
   2142c:	bls	2143c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   21430:	mov	r5, #0
   21434:	mov	r0, r5
   21438:	pop	{r4, r5, r6, pc}
   2143c:	mov	r3, r1
   21440:	ldr	r1, [r0, #16]
   21444:	mov	r4, r0
   21448:	bl	1d8fc <flatcc_builder_default_alloc@@Base+0x10c>
   2144c:	subs	r5, r0, #0
   21450:	beq	21430 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   21454:	ldr	r2, [r4, #20]
   21458:	mov	r1, #0
   2145c:	ldr	r0, [r4, #16]
   21460:	bl	12a44 <memset@plt>
   21464:	ldr	r3, [r4, #32]
   21468:	ldr	r2, [r4, #64]	; 0x40
   2146c:	ldrh	lr, [r4, #130]	; 0x82
   21470:	ldr	ip, [r3]
   21474:	ldr	r1, [r3, #4]
   21478:	ldrh	r0, [r4, #128]	; 0x80
   2147c:	sub	r2, r2, ip
   21480:	cmp	r2, r1
   21484:	movcs	r2, r1
   21488:	cmp	r0, lr
   2148c:	ldr	r0, [r4, #60]	; 0x3c
   21490:	ldr	r6, [r3, #8]
   21494:	str	r2, [r4, #24]
   21498:	add	r2, r0, ip
   2149c:	str	r2, [r4, #16]
   214a0:	str	r6, [r4, #20]
   214a4:	ldr	r2, [r4, #156]	; 0x9c
   214a8:	str	ip, [r4, #28]
   214ac:	str	r1, [r3, #4]
   214b0:	strhcc	lr, [r4, #128]	; 0x80
   214b4:	ldrh	r1, [r3, #12]
   214b8:	sub	r2, r2, #1
   214bc:	sub	r3, r3, #36	; 0x24
   214c0:	str	r2, [r4, #156]	; 0x9c
   214c4:	strh	r1, [r4, #130]	; 0x82
   214c8:	str	r3, [r4, #32]
   214cc:	mov	r0, r5
   214d0:	pop	{r4, r5, r6, pc}
   214d4:	ldr	r3, [pc, #12]	; 214e8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   214d8:	ldr	r2, [pc, #12]	; 214ec <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   214dc:	ldr	r1, [pc, #12]	; 214f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   214e0:	ldr	r0, [pc, #12]	; 214f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   214e4:	bl	12a8c <__assert_fail@plt>
   214e8:	andeq	r8, r2, r0, asr #16
   214ec:	ldrdeq	r0, [r0], -r5
   214f0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   214f4:	andeq	r8, r2, r8, lsr #23

000214f8 <flatcc_builder_offset_vector_edit@@Base>:
   214f8:	ldr	r0, [r0, #16]
   214fc:	bx	lr

00021500 <flatcc_builder_offset_vector_count@@Base>:
   21500:	ldr	r3, [r0, #32]
   21504:	ldr	r0, [r3, #20]
   21508:	bx	lr

0002150c <flatcc_builder_create_union_vector@@Base>:
   2150c:	push	{r4, r5, r6, r7, r8, r9, lr}
   21510:	mov	r6, r0
   21514:	ldr	r0, [r1, #156]	; 0x9c
   21518:	ldr	ip, [r1, #160]	; 0xa0
   2151c:	mov	r4, r1
   21520:	add	r1, r0, #1
   21524:	cmp	r1, ip
   21528:	sub	sp, sp, #12
   2152c:	mov	r5, r2
   21530:	mov	r7, r3
   21534:	str	r1, [r4, #156]	; 0x9c
   21538:	ble	215c0 <flatcc_builder_create_union_vector@@Base+0xb4>
   2153c:	ldr	r3, [r4, #176]	; 0xb0
   21540:	cmp	r1, r3
   21544:	cmpgt	r3, #0
   21548:	movgt	r3, #1
   2154c:	movle	r3, #0
   21550:	bgt	215a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   21554:	add	r0, r0, r0, lsl #3
   21558:	ldr	r1, [r4, #88]	; 0x58
   2155c:	lsl	r8, r0, #2
   21560:	add	r2, r8, #36	; 0x24
   21564:	cmp	r2, r1
   21568:	bhi	217dc <flatcc_builder_create_union_vector@@Base+0x2d0>
   2156c:	ldr	r3, [r4, #84]	; 0x54
   21570:	add	r3, r3, r8
   21574:	cmp	r3, #0
   21578:	str	r3, [r4, #32]
   2157c:	beq	215a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   21580:	ldr	r2, [r4, #88]	; 0x58
   21584:	ldr	r0, [pc, #732]	; 21868 <flatcc_builder_create_union_vector@@Base+0x35c>
   21588:	ldr	r1, [r4, #176]	; 0xb0
   2158c:	umull	r0, r2, r0, r2
   21590:	lsr	r2, r2, #3
   21594:	cmp	r1, #0
   21598:	cmpgt	r2, r1
   2159c:	str	r2, [r4, #160]	; 0xa0
   215a0:	strgt	r1, [r4, #160]	; 0xa0
   215a4:	b	215cc <flatcc_builder_create_union_vector@@Base+0xc0>
   215a8:	mov	r3, #0
   215ac:	mov	r0, r6
   215b0:	str	r3, [r6]
   215b4:	str	r3, [r6, #4]
   215b8:	add	sp, sp, #12
   215bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   215c0:	ldr	r3, [r4, #32]
   215c4:	add	r3, r3, #36	; 0x24
   215c8:	str	r3, [r4, #32]
   215cc:	ldr	r1, [r4, #20]
   215d0:	ldr	ip, [r4, #28]
   215d4:	ldrh	r8, [r4, #130]	; 0x82
   215d8:	add	r2, r1, ip
   215dc:	mvn	lr, #3
   215e0:	add	r2, r2, #7
   215e4:	str	r1, [r3, #8]
   215e8:	bic	r2, r2, #7
   215ec:	mov	r0, #4
   215f0:	mov	r1, #0
   215f4:	strh	r8, [r3, #12]
   215f8:	strh	r0, [r4, #130]	; 0x82
   215fc:	stm	r3, {ip, lr}
   21600:	str	r1, [r4, #20]
   21604:	str	r2, [r4, #28]
   21608:	str	r0, [r3, #16]
   2160c:	str	r1, [r3, #20]
   21610:	ldr	r0, [r4, #64]	; 0x40
   21614:	ldr	r1, [r4, #60]	; 0x3c
   21618:	sub	r0, r0, r2
   2161c:	cmp	r0, lr
   21620:	mov	ip, #5
   21624:	strh	ip, [r3, #14]
   21628:	add	r1, r1, r2
   2162c:	strls	r0, [r4, #24]
   21630:	strhi	lr, [r4, #24]
   21634:	movhi	r0, lr
   21638:	mvn	r8, #3
   2163c:	cmn	r7, #-1073741823	; 0xc0000001
   21640:	str	r1, [r4, #16]
   21644:	str	r8, [r3, #4]
   21648:	bhi	2185c <flatcc_builder_create_union_vector@@Base+0x350>
   2164c:	lsl	ip, r7, #2
   21650:	cmp	ip, r0
   21654:	str	r7, [r3, #20]
   21658:	str	ip, [r4, #20]
   2165c:	bcs	21784 <flatcc_builder_create_union_vector@@Base+0x278>
   21660:	cmp	r1, #0
   21664:	beq	215a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   21668:	ldr	r8, [r4, #20]
   2166c:	ldr	r0, [r4, #24]
   21670:	add	r3, r7, r8
   21674:	cmp	r3, r0
   21678:	str	r3, [r4, #20]
   2167c:	bcs	21800 <flatcc_builder_create_union_vector@@Base+0x2f4>
   21680:	adds	r8, r1, r8
   21684:	beq	215a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   21688:	cmp	r7, #0
   2168c:	movne	r2, r5
   21690:	addne	lr, r2, r7, lsl #3
   21694:	subne	r0, r8, #1
   21698:	subne	r3, r1, #4
   2169c:	beq	216bc <flatcc_builder_create_union_vector@@Base+0x1b0>
   216a0:	ldrb	ip, [r2]
   216a4:	add	r2, r2, #8
   216a8:	strb	ip, [r0, #1]!
   216ac:	ldr	ip, [r2, #-4]
   216b0:	cmp	lr, r2
   216b4:	str	ip, [r3, #4]!
   216b8:	bne	216a0 <flatcc_builder_create_union_vector@@Base+0x194>
   216bc:	mov	r3, r8
   216c0:	mov	r2, r7
   216c4:	mov	r0, r4
   216c8:	bl	1d8fc <flatcc_builder_default_alloc@@Base+0x10c>
   216cc:	subs	r5, r0, #0
   216d0:	beq	21860 <flatcc_builder_create_union_vector@@Base+0x354>
   216d4:	mvn	r0, #0
   216d8:	mov	r3, #1
   216dc:	mov	r2, r7
   216e0:	str	r0, [sp, #4]
   216e4:	mov	r1, r8
   216e8:	str	r3, [sp]
   216ec:	mov	r0, r4
   216f0:	bl	20fcc <flatcc_builder_create_vector@@Base>
   216f4:	mov	r7, r0
   216f8:	ldr	r2, [r4, #20]
   216fc:	mov	r1, #0
   21700:	ldr	r0, [r4, #16]
   21704:	bl	12a44 <memset@plt>
   21708:	ldr	r3, [r4, #32]
   2170c:	ldr	r2, [r4, #64]	; 0x40
   21710:	ldrh	lr, [r4, #130]	; 0x82
   21714:	ldr	ip, [r3]
   21718:	ldr	r1, [r3, #4]
   2171c:	ldrh	r0, [r4, #128]	; 0x80
   21720:	sub	r2, r2, ip
   21724:	cmp	r2, r1
   21728:	movcs	r2, r1
   2172c:	cmp	r0, lr
   21730:	ldr	r0, [r4, #60]	; 0x3c
   21734:	ldr	r8, [r3, #8]
   21738:	str	r2, [r4, #24]
   2173c:	add	r2, r0, ip
   21740:	str	r2, [r4, #16]
   21744:	str	r8, [r4, #20]
   21748:	ldr	r2, [r4, #156]	; 0x9c
   2174c:	str	ip, [r4, #28]
   21750:	str	r1, [r3, #4]
   21754:	strhcc	lr, [r4, #128]	; 0x80
   21758:	ldrh	r1, [r3, #12]
   2175c:	sub	r2, r2, #1
   21760:	sub	r3, r3, #36	; 0x24
   21764:	mov	r0, r6
   21768:	str	r7, [r6]
   2176c:	str	r5, [r6, #4]
   21770:	str	r2, [r4, #156]	; 0x9c
   21774:	strh	r1, [r4, #130]	; 0x82
   21778:	str	r3, [r4, #32]
   2177c:	add	sp, sp, #12
   21780:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21784:	add	ip, ip, #1
   21788:	mov	r3, #1
   2178c:	ldr	r0, [r4, #40]	; 0x28
   21790:	add	r2, ip, r2
   21794:	str	r3, [sp]
   21798:	add	r1, r4, #60	; 0x3c
   2179c:	ldr	r9, [r4, #48]	; 0x30
   217a0:	blx	r9
   217a4:	cmp	r0, #0
   217a8:	bne	215a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   217ac:	ldr	r2, [r4, #28]
   217b0:	ldr	r3, [r4, #64]	; 0x40
   217b4:	ldr	r1, [r4, #60]	; 0x3c
   217b8:	sub	r3, r3, r2
   217bc:	ldr	r0, [r4, #32]
   217c0:	cmn	r3, #4
   217c4:	movhi	r3, r8
   217c8:	add	r1, r1, r2
   217cc:	str	r3, [r4, #24]
   217d0:	str	r1, [r4, #16]
   217d4:	str	r8, [r0, #4]
   217d8:	b	21660 <flatcc_builder_create_union_vector@@Base+0x154>
   217dc:	mov	r1, #4
   217e0:	ldr	r0, [r4, #40]	; 0x28
   217e4:	str	r1, [sp]
   217e8:	add	r1, r4, #84	; 0x54
   217ec:	ldr	r9, [r4, #48]	; 0x30
   217f0:	blx	r9
   217f4:	cmp	r0, #0
   217f8:	beq	2156c <flatcc_builder_create_union_vector@@Base+0x60>
   217fc:	bl	1306c <__assert_fail@plt+0x5e0>
   21800:	add	r1, r3, #1
   21804:	mov	r3, #1
   21808:	ldr	r0, [r4, #40]	; 0x28
   2180c:	add	r2, r1, r2
   21810:	str	r3, [sp]
   21814:	add	r1, r4, #60	; 0x3c
   21818:	ldr	r9, [r4, #48]	; 0x30
   2181c:	blx	r9
   21820:	cmp	r0, #0
   21824:	bne	215a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   21828:	ldr	r2, [r4, #28]
   2182c:	ldr	r3, [r4, #64]	; 0x40
   21830:	ldr	r1, [r4, #60]	; 0x3c
   21834:	sub	r3, r3, r2
   21838:	cmn	r3, #4
   2183c:	mvnhi	r3, #3
   21840:	str	r3, [r4, #24]
   21844:	ldr	r3, [r4, #32]
   21848:	add	r1, r1, r2
   2184c:	mvn	r2, #3
   21850:	str	r1, [r4, #16]
   21854:	str	r2, [r3, #4]
   21858:	b	21680 <flatcc_builder_create_union_vector@@Base+0x174>
   2185c:	bl	130e0 <__assert_fail@plt+0x654>
   21860:	mov	r7, r5
   21864:	b	216f8 <flatcc_builder_create_union_vector@@Base+0x1ec>
   21868:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0002186c <flatcc_builder_create_union_vector_direct@@Base>:
   2186c:	push	{r4, r5, r6, r7, r8, lr}
   21870:	sub	sp, sp, #88	; 0x58
   21874:	mov	r4, r0
   21878:	ldr	r5, [sp, #112]	; 0x70
   2187c:	cmn	r5, #-1073741823	; 0xc0000001
   21880:	bls	2189c <flatcc_builder_create_union_vector_direct@@Base+0x30>
   21884:	mov	r3, #0
   21888:	mov	r0, r4
   2188c:	str	r3, [r4]
   21890:	str	r3, [r4, #4]
   21894:	add	sp, sp, #88	; 0x58
   21898:	pop	{r4, r5, r6, r7, r8, pc}
   2189c:	mov	r6, r1
   218a0:	mov	r8, r2
   218a4:	mov	r1, r3
   218a8:	mov	r0, r6
   218ac:	mov	r3, r2
   218b0:	mov	r2, r5
   218b4:	bl	1d8fc <flatcc_builder_default_alloc@@Base+0x10c>
   218b8:	subs	r7, r0, #0
   218bc:	beq	21884 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   218c0:	ldrh	r3, [r6, #128]	; 0x80
   218c4:	ldr	r0, [r6, #136]	; 0x88
   218c8:	mov	r2, #1
   218cc:	cmp	r3, #3
   218d0:	movls	r3, #4
   218d4:	strhls	r3, [r6, #128]	; 0x80
   218d8:	sub	r1, r0, r5
   218dc:	cmp	r5, #0
   218e0:	mov	r3, #4
   218e4:	add	ip, sp, #12
   218e8:	str	r3, [sp, #16]
   218ec:	str	r2, [sp, #20]
   218f0:	and	r1, r1, #3
   218f4:	movne	r2, #2
   218f8:	str	r3, [sp, #28]
   218fc:	addne	r3, r5, r3
   21900:	str	ip, [sp, #24]
   21904:	strne	r8, [sp, #32]
   21908:	strne	r5, [sp, #36]	; 0x24
   2190c:	strne	r3, [sp, #16]
   21910:	strne	r2, [sp, #20]
   21914:	movne	ip, #3
   21918:	moveq	ip, #2
   2191c:	cmp	r1, #0
   21920:	str	r5, [sp, #12]
   21924:	beq	21950 <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   21928:	add	r2, r2, #1
   2192c:	add	lr, sp, #88	; 0x58
   21930:	add	lr, lr, r2, lsl #3
   21934:	ldr	r5, [pc, #108]	; 219a8 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   21938:	mov	r2, ip
   2193c:	add	r3, r3, r1
   21940:	str	r1, [lr, #-68]	; 0xffffffbc
   21944:	str	r3, [sp, #16]
   21948:	str	ip, [sp, #20]
   2194c:	str	r5, [lr, #-72]	; 0xffffffb8
   21950:	sub	r5, r0, r3
   21954:	cmp	r0, r5
   21958:	ble	21990 <flatcc_builder_create_union_vector_direct@@Base+0x124>
   2195c:	ldr	r0, [r6, #36]	; 0x24
   21960:	add	r1, sp, #24
   21964:	str	r3, [sp]
   21968:	mov	r3, r5
   2196c:	ldr	r8, [r6, #44]	; 0x2c
   21970:	blx	r8
   21974:	cmp	r0, #0
   21978:	bne	21994 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   2197c:	mov	r0, r4
   21980:	str	r5, [r6, #136]	; 0x88
   21984:	stm	r4, {r5, r7}
   21988:	add	sp, sp, #88	; 0x58
   2198c:	pop	{r4, r5, r6, r7, r8, pc}
   21990:	bl	130b8 <__assert_fail@plt+0x62c>
   21994:	ldr	r3, [pc, #16]	; 219ac <flatcc_builder_create_union_vector_direct@@Base+0x140>
   21998:	ldr	r2, [pc, #16]	; 219b0 <flatcc_builder_create_union_vector_direct@@Base+0x144>
   2199c:	ldr	r1, [pc, #16]	; 219b4 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   219a0:	ldr	r0, [pc, #16]	; 219b8 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   219a4:	bl	12a8c <__assert_fail@plt>
   219a8:	andeq	r8, r2, r0, lsr #6
   219ac:	andeq	r8, r2, r4, lsr #5
   219b0:	andeq	r0, r0, fp, lsl #5
   219b4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   219b8:	muleq	r2, r0, sl

000219bc <flatcc_builder_start_union_vector@@Base>:
   219bc:	ldr	r1, [r0, #156]	; 0x9c
   219c0:	ldr	r3, [r0, #160]	; 0xa0
   219c4:	add	r2, r1, #1
   219c8:	cmp	r2, r3
   219cc:	push	{r4, r5, r6, lr}
   219d0:	mov	r4, r0
   219d4:	sub	sp, sp, #8
   219d8:	str	r2, [r0, #156]	; 0x9c
   219dc:	ble	21a4c <flatcc_builder_start_union_vector@@Base+0x90>
   219e0:	ldr	r3, [r0, #176]	; 0xb0
   219e4:	cmp	r3, #0
   219e8:	cmpgt	r2, r3
   219ec:	movgt	r3, #1
   219f0:	movle	r3, #0
   219f4:	bgt	21af8 <flatcc_builder_start_union_vector@@Base+0x13c>
   219f8:	add	r1, r1, r1, lsl #3
   219fc:	ldr	r0, [r0, #88]	; 0x58
   21a00:	lsl	r5, r1, #2
   21a04:	add	r2, r5, #36	; 0x24
   21a08:	cmp	r2, r0
   21a0c:	bhi	21ad4 <flatcc_builder_start_union_vector@@Base+0x118>
   21a10:	ldr	r3, [r4, #84]	; 0x54
   21a14:	add	r3, r3, r5
   21a18:	cmp	r3, #0
   21a1c:	str	r3, [r4, #32]
   21a20:	beq	21af8 <flatcc_builder_start_union_vector@@Base+0x13c>
   21a24:	ldr	r2, [r4, #88]	; 0x58
   21a28:	ldr	r0, [pc, #208]	; 21b00 <flatcc_builder_start_union_vector@@Base+0x144>
   21a2c:	ldr	r1, [r4, #176]	; 0xb0
   21a30:	umull	r0, r2, r0, r2
   21a34:	lsr	r2, r2, #3
   21a38:	cmp	r1, #0
   21a3c:	cmpgt	r2, r1
   21a40:	str	r2, [r4, #160]	; 0xa0
   21a44:	strgt	r1, [r4, #160]	; 0xa0
   21a48:	b	21a58 <flatcc_builder_start_union_vector@@Base+0x9c>
   21a4c:	ldr	r3, [r0, #32]
   21a50:	add	r3, r3, #36	; 0x24
   21a54:	str	r3, [r0, #32]
   21a58:	ldr	ip, [r4, #20]
   21a5c:	ldr	r1, [r4, #28]
   21a60:	ldrh	r5, [r4, #130]	; 0x82
   21a64:	add	r2, ip, r1
   21a68:	add	r2, r2, #7
   21a6c:	str	ip, [r3, #8]
   21a70:	bic	r2, r2, #7
   21a74:	mov	lr, #4
   21a78:	mov	r0, #0
   21a7c:	mov	ip, #8
   21a80:	strh	r5, [r3, #12]
   21a84:	strh	lr, [r4, #130]	; 0x82
   21a88:	str	r1, [r3]
   21a8c:	str	r2, [r4, #28]
   21a90:	str	r0, [r4, #20]
   21a94:	str	r0, [r3, #20]
   21a98:	str	ip, [r3, #16]
   21a9c:	ldr	r1, [r4, #64]	; 0x40
   21aa0:	ldr	ip, [r4, #60]	; 0x3c
   21aa4:	sub	r1, r1, r2
   21aa8:	mvn	lr, #3
   21aac:	cmp	r1, lr
   21ab0:	add	r2, ip, r2
   21ab4:	movhi	r1, lr
   21ab8:	mov	ip, #7
   21abc:	strh	ip, [r3, #14]
   21ac0:	str	r2, [r4, #16]
   21ac4:	str	r1, [r4, #24]
   21ac8:	str	lr, [r3, #4]
   21acc:	add	sp, sp, #8
   21ad0:	pop	{r4, r5, r6, pc}
   21ad4:	mov	r1, #4
   21ad8:	ldr	r0, [r4, #40]	; 0x28
   21adc:	str	r1, [sp]
   21ae0:	add	r1, r4, #84	; 0x54
   21ae4:	ldr	r6, [r4, #48]	; 0x30
   21ae8:	blx	r6
   21aec:	cmp	r0, #0
   21af0:	beq	21a10 <flatcc_builder_start_union_vector@@Base+0x54>
   21af4:	bl	1306c <__assert_fail@plt+0x5e0>
   21af8:	mvn	r0, #0
   21afc:	b	21acc <flatcc_builder_start_union_vector@@Base+0x110>
   21b00:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00021b04 <flatcc_builder_end_union_vector@@Base>:
   21b04:	ldr	r3, [r1, #32]
   21b08:	push	{r4, r5, r6, r7, r8, r9, lr}
   21b0c:	sub	sp, sp, #12
   21b10:	ldrh	r2, [r3, #14]
   21b14:	cmp	r2, #7
   21b18:	bne	21cd8 <flatcc_builder_end_union_vector@@Base+0x1d4>
   21b1c:	ldr	r5, [r3, #20]
   21b20:	ldr	r8, [r1, #20]
   21b24:	ldr	r3, [r1, #24]
   21b28:	lsl	r7, r5, #2
   21b2c:	add	r2, r7, r5
   21b30:	add	r2, r2, r8
   21b34:	cmp	r2, r3
   21b38:	mov	r4, r1
   21b3c:	mov	r6, r0
   21b40:	str	r2, [r1, #20]
   21b44:	bcs	21c20 <flatcc_builder_end_union_vector@@Base+0x11c>
   21b48:	ldr	r3, [r1, #16]
   21b4c:	adds	r1, r3, r8
   21b50:	beq	21cc0 <flatcc_builder_end_union_vector@@Base+0x1bc>
   21b54:	cmp	r5, #0
   21b58:	add	r7, r1, r7
   21b5c:	addne	lr, r3, r5, lsl #3
   21b60:	subne	r0, r7, #1
   21b64:	subne	r2, r1, #4
   21b68:	beq	21c80 <flatcc_builder_end_union_vector@@Base+0x17c>
   21b6c:	ldrb	ip, [r3]
   21b70:	add	r3, r3, #8
   21b74:	strb	ip, [r0, #1]!
   21b78:	ldr	ip, [r3, #-4]
   21b7c:	cmp	lr, r3
   21b80:	str	ip, [r2, #4]!
   21b84:	bne	21b6c <flatcc_builder_end_union_vector@@Base+0x68>
   21b88:	cmn	r5, #-1073741823	; 0xc0000001
   21b8c:	bls	21c80 <flatcc_builder_end_union_vector@@Base+0x17c>
   21b90:	mov	r8, #0
   21b94:	mov	r5, r8
   21b98:	ldr	r2, [r4, #20]
   21b9c:	mov	r1, #0
   21ba0:	ldr	r0, [r4, #16]
   21ba4:	bl	12a44 <memset@plt>
   21ba8:	ldr	r3, [r4, #32]
   21bac:	ldr	r2, [r4, #64]	; 0x40
   21bb0:	ldrh	lr, [r4, #130]	; 0x82
   21bb4:	ldr	ip, [r3]
   21bb8:	ldr	r1, [r3, #4]
   21bbc:	ldrh	r0, [r4, #128]	; 0x80
   21bc0:	sub	r2, r2, ip
   21bc4:	cmp	r2, r1
   21bc8:	movcs	r2, r1
   21bcc:	cmp	r0, lr
   21bd0:	ldr	r0, [r4, #60]	; 0x3c
   21bd4:	ldr	r7, [r3, #8]
   21bd8:	str	r2, [r4, #24]
   21bdc:	add	r2, r0, ip
   21be0:	str	r2, [r4, #16]
   21be4:	str	r7, [r4, #20]
   21be8:	ldr	r2, [r4, #156]	; 0x9c
   21bec:	str	ip, [r4, #28]
   21bf0:	str	r1, [r3, #4]
   21bf4:	strhcc	lr, [r4, #128]	; 0x80
   21bf8:	ldrh	r1, [r3, #12]
   21bfc:	sub	r2, r2, #1
   21c00:	sub	r3, r3, #36	; 0x24
   21c04:	mov	r0, r6
   21c08:	stm	r6, {r5, r8}
   21c0c:	str	r2, [r4, #156]	; 0x9c
   21c10:	strh	r1, [r4, #130]	; 0x82
   21c14:	str	r3, [r4, #32]
   21c18:	add	sp, sp, #12
   21c1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21c20:	ldr	r1, [r1, #28]
   21c24:	mov	r3, #1
   21c28:	add	r1, r1, #1
   21c2c:	ldr	r0, [r4, #40]	; 0x28
   21c30:	add	r2, r1, r2
   21c34:	str	r3, [sp]
   21c38:	add	r1, r4, #60	; 0x3c
   21c3c:	ldr	r9, [r4, #48]	; 0x30
   21c40:	blx	r9
   21c44:	cmp	r0, #0
   21c48:	bne	21cc0 <flatcc_builder_end_union_vector@@Base+0x1bc>
   21c4c:	ldr	r1, [r4, #28]
   21c50:	ldr	r2, [r4, #64]	; 0x40
   21c54:	ldr	r3, [r4, #60]	; 0x3c
   21c58:	sub	r2, r2, r1
   21c5c:	cmn	r2, #4
   21c60:	mvnhi	r2, #3
   21c64:	str	r2, [r4, #24]
   21c68:	ldr	r2, [r4, #32]
   21c6c:	add	r3, r3, r1
   21c70:	mvn	r1, #3
   21c74:	str	r3, [r4, #16]
   21c78:	str	r1, [r2, #4]
   21c7c:	b	21b4c <flatcc_builder_end_union_vector@@Base+0x48>
   21c80:	mov	r3, r7
   21c84:	mov	r2, r5
   21c88:	mov	r0, r4
   21c8c:	bl	1d8fc <flatcc_builder_default_alloc@@Base+0x10c>
   21c90:	subs	r8, r0, #0
   21c94:	beq	21b90 <flatcc_builder_end_union_vector@@Base+0x8c>
   21c98:	mvn	r0, #0
   21c9c:	mov	r3, #1
   21ca0:	mov	r2, r5
   21ca4:	str	r0, [sp, #4]
   21ca8:	mov	r1, r7
   21cac:	str	r3, [sp]
   21cb0:	mov	r0, r4
   21cb4:	bl	20fcc <flatcc_builder_create_vector@@Base>
   21cb8:	mov	r5, r0
   21cbc:	b	21b98 <flatcc_builder_end_union_vector@@Base+0x94>
   21cc0:	mov	r3, #0
   21cc4:	mov	r0, r6
   21cc8:	str	r3, [r6]
   21ccc:	str	r3, [r6, #4]
   21cd0:	add	sp, sp, #12
   21cd4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21cd8:	ldr	r3, [pc, #12]	; 21cec <flatcc_builder_end_union_vector@@Base+0x1e8>
   21cdc:	ldr	r2, [pc, #12]	; 21cf0 <flatcc_builder_end_union_vector@@Base+0x1ec>
   21ce0:	ldr	r1, [pc, #12]	; 21cf4 <flatcc_builder_end_union_vector@@Base+0x1f0>
   21ce4:	ldr	r0, [pc, #12]	; 21cf8 <flatcc_builder_end_union_vector@@Base+0x1f4>
   21ce8:	bl	12a8c <__assert_fail@plt>
   21cec:	andeq	r8, r2, ip, ror #16
   21cf0:	andeq	r0, r0, r1, asr r6
   21cf4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   21cf8:	ldrdeq	r8, [r2], -ip

00021cfc <flatcc_builder_union_vector_edit@@Base>:
   21cfc:	ldr	r0, [r0, #16]
   21d00:	bx	lr

00021d04 <flatcc_builder_union_vector_count@@Base>:
   21d04:	ldr	r3, [r0, #32]
   21d08:	ldr	r0, [r3, #20]
   21d0c:	bx	lr

00021d10 <flatcc_builder_extend_union_vector@@Base>:
   21d10:	ldr	ip, [r0, #32]
   21d14:	push	{r4, r5, r6, r7, lr}
   21d18:	mov	r4, r0
   21d1c:	ldr	r3, [ip, #20]
   21d20:	sub	sp, sp, #12
   21d24:	adds	r3, r1, r3
   21d28:	movcs	r2, #1
   21d2c:	movcc	r2, #0
   21d30:	cmn	r3, #-536870911	; 0xe0000001
   21d34:	movls	r0, #0
   21d38:	movhi	r0, #1
   21d3c:	orrs	r5, r2, r0
   21d40:	bne	21dd8 <flatcc_builder_extend_union_vector@@Base+0xc8>
   21d44:	str	r3, [ip, #20]
   21d48:	ldr	r6, [r4, #20]
   21d4c:	ldr	r3, [r4, #24]
   21d50:	add	r1, r6, r1, lsl #3
   21d54:	cmp	r1, r3
   21d58:	str	r1, [r4, #20]
   21d5c:	bcs	21d70 <flatcc_builder_extend_union_vector@@Base+0x60>
   21d60:	ldr	r0, [r4, #16]
   21d64:	add	r0, r0, r6
   21d68:	add	sp, sp, #12
   21d6c:	pop	{r4, r5, r6, r7, pc}
   21d70:	ldr	r2, [r4, #28]
   21d74:	mov	r3, #1
   21d78:	add	r2, r2, #1
   21d7c:	ldr	r0, [r4, #40]	; 0x28
   21d80:	add	r2, r2, r1
   21d84:	str	r3, [sp]
   21d88:	add	r1, r4, #60	; 0x3c
   21d8c:	ldr	r7, [r4, #48]	; 0x30
   21d90:	blx	r7
   21d94:	cmp	r0, #0
   21d98:	bne	21dd0 <flatcc_builder_extend_union_vector@@Base+0xc0>
   21d9c:	ldr	r2, [r4, #28]
   21da0:	ldr	r3, [r4, #64]	; 0x40
   21da4:	ldr	r0, [r4, #60]	; 0x3c
   21da8:	sub	r3, r3, r2
   21dac:	cmn	r3, #4
   21db0:	mvnhi	r3, #3
   21db4:	str	r3, [r4, #24]
   21db8:	ldr	r3, [r4, #32]
   21dbc:	add	r0, r0, r2
   21dc0:	mvn	r2, #3
   21dc4:	str	r0, [r4, #16]
   21dc8:	str	r2, [r3, #4]
   21dcc:	b	21d64 <flatcc_builder_extend_union_vector@@Base+0x54>
   21dd0:	mov	r0, r5
   21dd4:	b	21d68 <flatcc_builder_extend_union_vector@@Base+0x58>
   21dd8:	bl	130e0 <__assert_fail@plt+0x654>

00021ddc <flatcc_builder_truncate_union_vector@@Base>:
   21ddc:	ldr	r3, [r0, #32]
   21de0:	push	{r4, lr}
   21de4:	ldrh	r2, [r3, #14]
   21de8:	cmp	r2, #7
   21dec:	bne	21e30 <flatcc_builder_truncate_union_vector@@Base+0x54>
   21df0:	ldr	ip, [r3, #20]
   21df4:	cmp	ip, r1
   21df8:	bcc	21e44 <flatcc_builder_truncate_union_vector@@Base+0x68>
   21dfc:	ldr	r2, [r3, #16]
   21e00:	sub	ip, ip, r1
   21e04:	str	ip, [r3, #20]
   21e08:	mul	r2, r2, r1
   21e0c:	ldr	r3, [r0, #20]
   21e10:	ldr	r1, [r0, #16]
   21e14:	sub	r3, r3, r2
   21e18:	str	r3, [r0, #20]
   21e1c:	add	r0, r1, r3
   21e20:	mov	r1, #0
   21e24:	bl	12a44 <memset@plt>
   21e28:	mov	r0, #0
   21e2c:	pop	{r4, pc}
   21e30:	ldr	r3, [pc, #32]	; 21e58 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   21e34:	ldr	r2, [pc, #32]	; 21e5c <flatcc_builder_truncate_union_vector@@Base+0x80>
   21e38:	ldr	r1, [pc, #32]	; 21e60 <flatcc_builder_truncate_union_vector@@Base+0x84>
   21e3c:	ldr	r0, [pc, #32]	; 21e64 <flatcc_builder_truncate_union_vector@@Base+0x88>
   21e40:	bl	12a8c <__assert_fail@plt>
   21e44:	ldr	r3, [pc, #12]	; 21e58 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   21e48:	ldr	r2, [pc, #24]	; 21e68 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   21e4c:	ldr	r1, [pc, #12]	; 21e60 <flatcc_builder_truncate_union_vector@@Base+0x84>
   21e50:	ldr	r0, [pc, #20]	; 21e6c <flatcc_builder_truncate_union_vector@@Base+0x90>
   21e54:	bl	12a8c <__assert_fail@plt>
   21e58:	andeq	r8, r2, ip, lsl #17
   21e5c:	andeq	r0, r0, r1, lsl #13
   21e60:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   21e64:	ldrdeq	r8, [r2], -ip
   21e68:	andeq	r0, r0, r2, lsl #13
   21e6c:	andeq	r8, r2, r0, lsl #24

00021e70 <flatcc_builder_union_vector_push@@Base>:
   21e70:	push	{r4, r5, r6, r7, lr}
   21e74:	mov	r4, r0
   21e78:	ldr	r0, [r0, #32]
   21e7c:	sub	sp, sp, #20
   21e80:	add	r5, sp, #8
   21e84:	ldrh	r3, [r0, #14]
   21e88:	stm	r5, {r1, r2}
   21e8c:	cmp	r3, #7
   21e90:	bne	21f54 <flatcc_builder_union_vector_push@@Base+0xe4>
   21e94:	ldr	r3, [r0, #20]
   21e98:	cmn	r3, #-536870911	; 0xe0000001
   21e9c:	beq	21f44 <flatcc_builder_union_vector_push@@Base+0xd4>
   21ea0:	add	r3, r3, #1
   21ea4:	str	r3, [r0, #20]
   21ea8:	ldr	r6, [r4, #20]
   21eac:	ldr	r2, [r4, #24]
   21eb0:	add	r3, r6, #8
   21eb4:	cmp	r3, r2
   21eb8:	str	r3, [r4, #20]
   21ebc:	bcs	21ee4 <flatcc_builder_union_vector_push@@Base+0x74>
   21ec0:	ldr	r3, [r4, #16]
   21ec4:	adds	r3, r3, r6
   21ec8:	movne	r2, r3
   21ecc:	ldmne	r5, {r0, r1}
   21ed0:	moveq	r2, r3
   21ed4:	stmne	r3, {r0, r1}
   21ed8:	mov	r0, r2
   21edc:	add	sp, sp, #20
   21ee0:	pop	{r4, r5, r6, r7, pc}
   21ee4:	ldr	r2, [r4, #28]
   21ee8:	mov	r3, #1
   21eec:	add	r2, r6, r2
   21ef0:	ldr	r0, [r4, #40]	; 0x28
   21ef4:	add	r2, r2, #9
   21ef8:	str	r3, [sp]
   21efc:	add	r1, r4, #60	; 0x3c
   21f00:	ldr	r7, [r4, #48]	; 0x30
   21f04:	blx	r7
   21f08:	cmp	r0, #0
   21f0c:	bne	21f44 <flatcc_builder_union_vector_push@@Base+0xd4>
   21f10:	ldr	r1, [r4, #28]
   21f14:	ldr	r2, [r4, #64]	; 0x40
   21f18:	ldr	r3, [r4, #60]	; 0x3c
   21f1c:	sub	r2, r2, r1
   21f20:	cmn	r2, #4
   21f24:	mvnhi	r2, #3
   21f28:	str	r2, [r4, #24]
   21f2c:	ldr	r2, [r4, #32]
   21f30:	add	r3, r3, r1
   21f34:	mvn	r1, #3
   21f38:	str	r3, [r4, #16]
   21f3c:	str	r1, [r2, #4]
   21f40:	b	21ec4 <flatcc_builder_union_vector_push@@Base+0x54>
   21f44:	mov	r2, #0
   21f48:	mov	r0, r2
   21f4c:	add	sp, sp, #20
   21f50:	pop	{r4, r5, r6, r7, pc}
   21f54:	ldr	r3, [pc, #12]	; 21f68 <flatcc_builder_union_vector_push@@Base+0xf8>
   21f58:	ldr	r2, [pc, #12]	; 21f6c <flatcc_builder_union_vector_push@@Base+0xfc>
   21f5c:	ldr	r1, [pc, #12]	; 21f70 <flatcc_builder_union_vector_push@@Base+0x100>
   21f60:	ldr	r0, [pc, #12]	; 21f74 <flatcc_builder_union_vector_push@@Base+0x104>
   21f64:	bl	12a8c <__assert_fail@plt>
   21f68:			; <UNDEFINED> instruction: 0x000288b4
   21f6c:	andeq	r0, r0, sp, lsl #13
   21f70:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   21f74:	ldrdeq	r8, [r2], -ip

00021f78 <flatcc_builder_append_union_vector@@Base>:
   21f78:	push	{r4, r5, r6, r7, r8, r9, lr}
   21f7c:	mov	r5, r0
   21f80:	ldr	r0, [r0, #32]
   21f84:	sub	sp, sp, #12
   21f88:	ldrh	r3, [r0, #14]
   21f8c:	cmp	r3, #7
   21f90:	bne	22074 <flatcc_builder_append_union_vector@@Base+0xfc>
   21f94:	mov	r7, r1
   21f98:	ldr	r1, [r0, #20]
   21f9c:	adds	r1, r2, r1
   21fa0:	movcs	r4, #1
   21fa4:	movcc	r4, #0
   21fa8:	cmn	r1, #-536870911	; 0xe0000001
   21fac:	movls	r3, #0
   21fb0:	movhi	r3, #1
   21fb4:	orrs	r4, r4, r3
   21fb8:	bne	22070 <flatcc_builder_append_union_vector@@Base+0xf8>
   21fbc:	str	r1, [r0, #20]
   21fc0:	ldr	r8, [r5, #20]
   21fc4:	lsl	r6, r2, #3
   21fc8:	ldr	r3, [r5, #24]
   21fcc:	add	r1, r6, r8
   21fd0:	cmp	r1, r3
   21fd4:	str	r1, [r5, #20]
   21fd8:	bcs	22008 <flatcc_builder_append_union_vector@@Base+0x90>
   21fdc:	ldr	r3, [r5, #16]
   21fe0:	adds	r3, r3, r8
   21fe4:	beq	21ffc <flatcc_builder_append_union_vector@@Base+0x84>
   21fe8:	mov	r0, r3
   21fec:	mov	r2, r6
   21ff0:	mov	r1, r7
   21ff4:	bl	129b4 <memcpy@plt>
   21ff8:	mov	r3, r0
   21ffc:	mov	r0, r3
   22000:	add	sp, sp, #12
   22004:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22008:	ldr	r2, [r5, #28]
   2200c:	mov	r3, #1
   22010:	add	r2, r2, #1
   22014:	ldr	r0, [r5, #40]	; 0x28
   22018:	add	r2, r2, r1
   2201c:	str	r3, [sp]
   22020:	add	r1, r5, #60	; 0x3c
   22024:	ldr	r9, [r5, #48]	; 0x30
   22028:	blx	r9
   2202c:	cmp	r0, #0
   22030:	bne	22068 <flatcc_builder_append_union_vector@@Base+0xf0>
   22034:	ldr	r1, [r5, #28]
   22038:	ldr	r2, [r5, #64]	; 0x40
   2203c:	ldr	r3, [r5, #60]	; 0x3c
   22040:	sub	r2, r2, r1
   22044:	cmn	r2, #4
   22048:	mvnhi	r2, #3
   2204c:	str	r2, [r5, #24]
   22050:	ldr	r2, [r5, #32]
   22054:	add	r3, r3, r1
   22058:	mvn	r1, #3
   2205c:	str	r3, [r5, #16]
   22060:	str	r1, [r2, #4]
   22064:	b	21fe0 <flatcc_builder_append_union_vector@@Base+0x68>
   22068:	mov	r3, r4
   2206c:	b	21ffc <flatcc_builder_append_union_vector@@Base+0x84>
   22070:	bl	130e0 <__assert_fail@plt+0x654>
   22074:	ldr	r3, [pc, #12]	; 22088 <flatcc_builder_append_union_vector@@Base+0x110>
   22078:	ldr	r2, [pc, #12]	; 2208c <flatcc_builder_append_union_vector@@Base+0x114>
   2207c:	ldr	r1, [pc, #12]	; 22090 <flatcc_builder_append_union_vector@@Base+0x118>
   22080:	ldr	r0, [pc, #12]	; 22094 <flatcc_builder_append_union_vector@@Base+0x11c>
   22084:	bl	12a8c <__assert_fail@plt>
   22088:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2208c:	muleq	r0, ip, r6
   22090:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22094:	ldrdeq	r8, [r2], -ip

00022098 <flatcc_builder_create_string@@Base>:
   22098:	push	{r4, r5, r6, lr}
   2209c:	sub	sp, sp, #88	; 0x58
   220a0:	ldr	lr, [r0, #136]	; 0x88
   220a4:	mov	r4, r0
   220a8:	add	r0, sp, #88	; 0x58
   220ac:	cmp	r2, #0
   220b0:	sub	r3, lr, r2
   220b4:	str	r2, [r0, #-76]!	; 0xffffffb4
   220b8:	sub	r3, r3, #1
   220bc:	str	r0, [sp, #24]
   220c0:	moveq	r0, #1
   220c4:	strne	r1, [sp, #32]
   220c8:	mov	ip, #4
   220cc:	moveq	r1, r0
   220d0:	movne	r1, #2
   220d4:	and	r3, r3, #3
   220d8:	str	ip, [sp, #28]
   220dc:	add	r3, r3, #1
   220e0:	addne	ip, r2, ip
   220e4:	add	r1, r1, #1
   220e8:	add	ip, ip, r3
   220ec:	add	r0, sp, #88	; 0x58
   220f0:	add	r1, r0, r1, lsl #3
   220f4:	sub	r5, lr, ip
   220f8:	ldr	r0, [pc, #104]	; 22168 <flatcc_builder_create_string@@Base+0xd0>
   220fc:	strne	r2, [sp, #36]	; 0x24
   22100:	moveq	r2, #2
   22104:	movne	r2, #3
   22108:	cmp	lr, r5
   2210c:	str	r3, [r1, #-68]	; 0xffffffbc
   22110:	str	ip, [sp, #16]
   22114:	str	r2, [sp, #20]
   22118:	str	r0, [r1, #-72]	; 0xffffffb8
   2211c:	ble	22150 <flatcc_builder_create_string@@Base+0xb8>
   22120:	ldr	r0, [r4, #36]	; 0x24
   22124:	mov	r3, r5
   22128:	str	ip, [sp]
   2212c:	add	r1, sp, #24
   22130:	ldr	r6, [r4, #44]	; 0x2c
   22134:	blx	r6
   22138:	cmp	r0, #0
   2213c:	bne	22154 <flatcc_builder_create_string@@Base+0xbc>
   22140:	mov	r0, r5
   22144:	str	r5, [r4, #136]	; 0x88
   22148:	add	sp, sp, #88	; 0x58
   2214c:	pop	{r4, r5, r6, pc}
   22150:	bl	130b8 <__assert_fail@plt+0x62c>
   22154:	ldr	r3, [pc, #16]	; 2216c <flatcc_builder_create_string@@Base+0xd4>
   22158:	ldr	r2, [pc, #16]	; 22170 <flatcc_builder_create_string@@Base+0xd8>
   2215c:	ldr	r1, [pc, #16]	; 22174 <flatcc_builder_create_string@@Base+0xdc>
   22160:	ldr	r0, [pc, #16]	; 22178 <flatcc_builder_create_string@@Base+0xe0>
   22164:	bl	12a8c <__assert_fail@plt>
   22168:	andeq	r8, r2, r0, lsr #6
   2216c:	andeq	r8, r2, r4, lsr #5
   22170:	andeq	r0, r0, fp, lsl #5
   22174:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22178:	muleq	r2, r0, sl

0002217c <flatcc_builder_create_string_str@@Base>:
   2217c:	push	{r4, r5, r6, lr}
   22180:	mov	r4, r0
   22184:	sub	sp, sp, #88	; 0x58
   22188:	mov	r0, r1
   2218c:	mov	r5, r1
   22190:	bl	12a20 <strlen@plt>
   22194:	ldr	lr, [r4, #136]	; 0x88
   22198:	add	r2, sp, #88	; 0x58
   2219c:	sub	r3, lr, #1
   221a0:	mov	ip, #4
   221a4:	str	ip, [sp, #28]
   221a8:	cmp	r0, #0
   221ac:	str	r0, [r2, #-76]!	; 0xffffffb4
   221b0:	sub	r3, r3, r0
   221b4:	str	r2, [sp, #24]
   221b8:	moveq	r2, #1
   221bc:	moveq	r1, r2
   221c0:	movne	r1, #2
   221c4:	and	r3, r3, #3
   221c8:	addne	ip, r0, ip
   221cc:	add	r3, r3, #1
   221d0:	add	r1, r1, #1
   221d4:	strne	r0, [sp, #36]	; 0x24
   221d8:	add	ip, ip, r3
   221dc:	add	r0, sp, #88	; 0x58
   221e0:	strne	r5, [sp, #32]
   221e4:	add	r1, r0, r1, lsl #3
   221e8:	sub	r5, lr, ip
   221ec:	ldr	r0, [pc, #100]	; 22258 <flatcc_builder_create_string_str@@Base+0xdc>
   221f0:	movne	r2, #3
   221f4:	moveq	r2, #2
   221f8:	cmp	lr, r5
   221fc:	str	r3, [r1, #-68]	; 0xffffffbc
   22200:	str	ip, [sp, #16]
   22204:	str	r2, [sp, #20]
   22208:	str	r0, [r1, #-72]	; 0xffffffb8
   2220c:	ble	22240 <flatcc_builder_create_string_str@@Base+0xc4>
   22210:	ldr	r0, [r4, #36]	; 0x24
   22214:	mov	r3, r5
   22218:	str	ip, [sp]
   2221c:	add	r1, sp, #24
   22220:	ldr	r6, [r4, #44]	; 0x2c
   22224:	blx	r6
   22228:	cmp	r0, #0
   2222c:	bne	22244 <flatcc_builder_create_string_str@@Base+0xc8>
   22230:	mov	r0, r5
   22234:	str	r5, [r4, #136]	; 0x88
   22238:	add	sp, sp, #88	; 0x58
   2223c:	pop	{r4, r5, r6, pc}
   22240:	bl	130b8 <__assert_fail@plt+0x62c>
   22244:	ldr	r3, [pc, #16]	; 2225c <flatcc_builder_create_string_str@@Base+0xe0>
   22248:	ldr	r2, [pc, #16]	; 22260 <flatcc_builder_create_string_str@@Base+0xe4>
   2224c:	ldr	r1, [pc, #16]	; 22264 <flatcc_builder_create_string_str@@Base+0xe8>
   22250:	ldr	r0, [pc, #16]	; 22268 <flatcc_builder_create_string_str@@Base+0xec>
   22254:	bl	12a8c <__assert_fail@plt>
   22258:	andeq	r8, r2, r0, lsr #6
   2225c:	andeq	r8, r2, r4, lsr #5
   22260:	andeq	r0, r0, fp, lsl #5
   22264:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22268:	muleq	r2, r0, sl

0002226c <flatcc_builder_create_string_strn@@Base>:
   2226c:	push	{r4, r5, r6, lr}
   22270:	mov	r6, r1
   22274:	sub	sp, sp, #88	; 0x58
   22278:	mov	r4, r0
   2227c:	mov	r1, #0
   22280:	mov	r0, r6
   22284:	mov	r5, r2
   22288:	bl	12a5c <memchr@plt>
   2228c:	mov	ip, #4
   22290:	mov	r1, #1
   22294:	add	r2, sp, #88	; 0x58
   22298:	str	ip, [sp, #28]
   2229c:	add	lr, sp, #88	; 0x58
   222a0:	cmp	r0, #0
   222a4:	subne	r5, r0, r6
   222a8:	ldr	r0, [r4, #136]	; 0x88
   222ac:	cmp	r5, #0
   222b0:	sub	r3, r0, #1
   222b4:	sub	r3, r3, r5
   222b8:	movne	r1, #2
   222bc:	and	r3, r3, #3
   222c0:	addne	ip, r5, ip
   222c4:	add	r3, r3, #1
   222c8:	add	r1, r1, #1
   222cc:	add	ip, r3, ip
   222d0:	str	r5, [r2, #-76]!	; 0xffffffb4
   222d4:	strne	r5, [sp, #36]	; 0x24
   222d8:	add	r1, lr, r1, lsl #3
   222dc:	sub	r5, r0, ip
   222e0:	ldr	lr, [pc, #108]	; 22354 <flatcc_builder_create_string_strn@@Base+0xe8>
   222e4:	str	r2, [sp, #24]
   222e8:	strne	r6, [sp, #32]
   222ec:	movne	r2, #3
   222f0:	moveq	r2, #2
   222f4:	cmp	r0, r5
   222f8:	str	r3, [r1, #-68]	; 0xffffffbc
   222fc:	str	ip, [sp, #16]
   22300:	str	r2, [sp, #20]
   22304:	str	lr, [r1, #-72]	; 0xffffffb8
   22308:	ble	2233c <flatcc_builder_create_string_strn@@Base+0xd0>
   2230c:	ldr	r0, [r4, #36]	; 0x24
   22310:	mov	r3, r5
   22314:	str	ip, [sp]
   22318:	add	r1, sp, #24
   2231c:	ldr	r6, [r4, #44]	; 0x2c
   22320:	blx	r6
   22324:	cmp	r0, #0
   22328:	bne	22340 <flatcc_builder_create_string_strn@@Base+0xd4>
   2232c:	mov	r0, r5
   22330:	str	r5, [r4, #136]	; 0x88
   22334:	add	sp, sp, #88	; 0x58
   22338:	pop	{r4, r5, r6, pc}
   2233c:	bl	130b8 <__assert_fail@plt+0x62c>
   22340:	ldr	r3, [pc, #16]	; 22358 <flatcc_builder_create_string_strn@@Base+0xec>
   22344:	ldr	r2, [pc, #16]	; 2235c <flatcc_builder_create_string_strn@@Base+0xf0>
   22348:	ldr	r1, [pc, #16]	; 22360 <flatcc_builder_create_string_strn@@Base+0xf4>
   2234c:	ldr	r0, [pc, #16]	; 22364 <flatcc_builder_create_string_strn@@Base+0xf8>
   22350:	bl	12a8c <__assert_fail@plt>
   22354:	andeq	r8, r2, r0, lsr #6
   22358:	andeq	r8, r2, r4, lsr #5
   2235c:	andeq	r0, r0, fp, lsl #5
   22360:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22364:	muleq	r2, r0, sl

00022368 <flatcc_builder_end_string@@Base>:
   22368:	ldr	r3, [r0, #32]
   2236c:	push	{r4, r5, r6, lr}
   22370:	sub	sp, sp, #88	; 0x58
   22374:	ldrh	r2, [r3, #14]
   22378:	cmp	r2, #6
   2237c:	bne	224e8 <flatcc_builder_end_string@@Base+0x180>
   22380:	ldr	r2, [r3, #20]
   22384:	ldr	r3, [r0, #20]
   22388:	mov	r4, r0
   2238c:	cmp	r2, r3
   22390:	bne	224d4 <flatcc_builder_end_string@@Base+0x16c>
   22394:	ldr	r0, [r0, #136]	; 0x88
   22398:	add	r1, sp, #88	; 0x58
   2239c:	sub	r3, r0, #1
   223a0:	cmp	r2, #0
   223a4:	sub	r3, r3, r2
   223a8:	str	r2, [r1, #-76]!	; 0xffffffb4
   223ac:	mov	ip, #4
   223b0:	str	r1, [sp, #24]
   223b4:	ldr	lr, [r4, #16]
   223b8:	mov	r1, #1
   223bc:	and	r3, r3, #3
   223c0:	movne	r1, #2
   223c4:	str	ip, [sp, #28]
   223c8:	add	r3, r3, #1
   223cc:	addne	ip, r2, ip
   223d0:	add	r1, r1, #1
   223d4:	strne	lr, [sp, #32]
   223d8:	add	ip, ip, r3
   223dc:	add	lr, sp, #88	; 0x58
   223e0:	add	r1, lr, r1, lsl #3
   223e4:	sub	r5, r0, ip
   223e8:	ldr	lr, [pc, #268]	; 224fc <flatcc_builder_end_string@@Base+0x194>
   223ec:	strne	r2, [sp, #36]	; 0x24
   223f0:	moveq	r2, #2
   223f4:	movne	r2, #3
   223f8:	cmp	r0, r5
   223fc:	str	r3, [r1, #-68]	; 0xffffffbc
   22400:	str	ip, [sp, #16]
   22404:	str	r2, [sp, #20]
   22408:	str	lr, [r1, #-72]	; 0xffffffb8
   2240c:	ble	224d0 <flatcc_builder_end_string@@Base+0x168>
   22410:	ldr	r0, [r4, #36]	; 0x24
   22414:	add	r1, sp, #24
   22418:	str	ip, [sp]
   2241c:	mov	r3, r5
   22420:	ldr	r6, [r4, #44]	; 0x2c
   22424:	blx	r6
   22428:	subs	r1, r0, #0
   2242c:	bne	224bc <flatcc_builder_end_string@@Base+0x154>
   22430:	cmp	r5, #0
   22434:	str	r5, [r4, #136]	; 0x88
   22438:	beq	224b0 <flatcc_builder_end_string@@Base+0x148>
   2243c:	ldr	r2, [r4, #20]
   22440:	ldr	r0, [r4, #16]
   22444:	bl	12a44 <memset@plt>
   22448:	ldr	r3, [r4, #32]
   2244c:	ldr	r2, [r4, #64]	; 0x40
   22450:	ldrh	lr, [r4, #130]	; 0x82
   22454:	ldr	ip, [r3]
   22458:	ldr	r1, [r3, #4]
   2245c:	ldrh	r0, [r4, #128]	; 0x80
   22460:	sub	r2, r2, ip
   22464:	cmp	r2, r1
   22468:	movcs	r2, r1
   2246c:	cmp	r0, lr
   22470:	ldr	r0, [r4, #60]	; 0x3c
   22474:	ldr	r6, [r3, #8]
   22478:	str	r2, [r4, #24]
   2247c:	add	r2, r0, ip
   22480:	str	r2, [r4, #16]
   22484:	str	r6, [r4, #20]
   22488:	ldr	r2, [r4, #156]	; 0x9c
   2248c:	str	ip, [r4, #28]
   22490:	str	r1, [r3, #4]
   22494:	strhcc	lr, [r4, #128]	; 0x80
   22498:	ldrh	r1, [r3, #12]
   2249c:	sub	r2, r2, #1
   224a0:	sub	r3, r3, #36	; 0x24
   224a4:	str	r2, [r4, #156]	; 0x9c
   224a8:	strh	r1, [r4, #130]	; 0x82
   224ac:	str	r3, [r4, #32]
   224b0:	mov	r0, r5
   224b4:	add	sp, sp, #88	; 0x58
   224b8:	pop	{r4, r5, r6, pc}
   224bc:	ldr	r3, [pc, #60]	; 22500 <flatcc_builder_end_string@@Base+0x198>
   224c0:	ldr	r2, [pc, #60]	; 22504 <flatcc_builder_end_string@@Base+0x19c>
   224c4:	ldr	r1, [pc, #60]	; 22508 <flatcc_builder_end_string@@Base+0x1a0>
   224c8:	ldr	r0, [pc, #60]	; 2250c <flatcc_builder_end_string@@Base+0x1a4>
   224cc:	bl	12a8c <__assert_fail@plt>
   224d0:	bl	130b8 <__assert_fail@plt+0x62c>
   224d4:	ldr	r3, [pc, #52]	; 22510 <flatcc_builder_end_string@@Base+0x1a8>
   224d8:	ldr	r2, [pc, #52]	; 22514 <flatcc_builder_end_string@@Base+0x1ac>
   224dc:	ldr	r1, [pc, #36]	; 22508 <flatcc_builder_end_string@@Base+0x1a0>
   224e0:	ldr	r0, [pc, #48]	; 22518 <flatcc_builder_end_string@@Base+0x1b0>
   224e4:	bl	12a8c <__assert_fail@plt>
   224e8:	ldr	r3, [pc, #32]	; 22510 <flatcc_builder_end_string@@Base+0x1a8>
   224ec:	ldr	r2, [pc, #40]	; 2251c <flatcc_builder_end_string@@Base+0x1b4>
   224f0:	ldr	r1, [pc, #16]	; 22508 <flatcc_builder_end_string@@Base+0x1a0>
   224f4:	ldr	r0, [pc, #36]	; 22520 <flatcc_builder_end_string@@Base+0x1b8>
   224f8:	bl	12a8c <__assert_fail@plt>
   224fc:	andeq	r8, r2, r0, lsr #6
   22500:	andeq	r8, r2, r4, lsr #5
   22504:	andeq	r0, r0, fp, lsl #5
   22508:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2250c:	muleq	r2, r0, sl
   22510:	strdeq	r8, [r2], -ip
   22514:	andeq	r0, r0, r5, asr #13
   22518:	andeq	r8, r2, r0, lsl sp
   2251c:	andeq	r0, r0, r4, asr #13
   22520:	andeq	r8, r2, r8, asr sl

00022524 <flatcc_builder_string_edit@@Base>:
   22524:	ldr	r0, [r0, #16]
   22528:	bx	lr

0002252c <flatcc_builder_string_len@@Base>:
   2252c:	ldr	r3, [r0, #32]
   22530:	ldr	r0, [r3, #20]
   22534:	bx	lr

00022538 <flatcc_builder_table_add@@Base>:
   22538:	push	{r4, r5, r6, r7, r8, r9, lr}
   2253c:	mov	r4, r0
   22540:	ldr	r0, [r0, #32]
   22544:	sub	sp, sp, #12
   22548:	ldrh	r0, [r0, #14]
   2254c:	cmp	r0, #3
   22550:	bne	2268c <flatcc_builder_table_add@@Base+0x154>
   22554:	ldr	r0, [pc, #324]	; 226a0 <flatcc_builder_table_add@@Base+0x168>
   22558:	cmp	r1, r0
   2255c:	bhi	22678 <flatcc_builder_table_add@@Base+0x140>
   22560:	ldrh	r0, [r4, #130]	; 0x82
   22564:	lsl	r7, r1, #1
   22568:	cmp	r0, r3
   2256c:	ldr	r0, [r4, #4]
   22570:	strhcc	r3, [r4, #130]	; 0x82
   22574:	add	lr, r0, r7
   22578:	ldrh	r6, [r0, r7]
   2257c:	cmp	r6, #0
   22580:	bne	22664 <flatcc_builder_table_add@@Base+0x12c>
   22584:	ldr	ip, [r4, #12]
   22588:	ldr	r9, [pc, #276]	; 226a4 <flatcc_builder_table_add@@Base+0x16c>
   2258c:	eor	ip, ip, r1
   22590:	uxth	r5, r1
   22594:	mul	r1, r9, ip
   22598:	ldr	r0, [r4, #20]
   2259c:	eor	r1, r1, r2
   225a0:	sub	r8, r3, #1
   225a4:	add	r8, r8, r0
   225a8:	rsb	r3, r3, #0
   225ac:	and	r8, r8, r3
   225b0:	mul	r1, r9, r1
   225b4:	ldr	r3, [r4, #24]
   225b8:	add	r2, r2, r8
   225bc:	cmp	r2, r3
   225c0:	str	r1, [r4, #12]
   225c4:	str	r2, [r4, #20]
   225c8:	bcs	225f4 <flatcc_builder_table_add@@Base+0xbc>
   225cc:	ldr	r0, [r4, #16]
   225d0:	add	r3, r8, #4
   225d4:	strh	r3, [lr]
   225d8:	ldrh	r3, [r4, #8]
   225dc:	add	r0, r0, r8
   225e0:	cmp	r3, r5
   225e4:	addls	r5, r5, #1
   225e8:	strhls	r5, [r4, #8]
   225ec:	add	sp, sp, #12
   225f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   225f4:	ldr	r1, [r4, #28]
   225f8:	mov	r3, #1
   225fc:	add	r1, r1, #1
   22600:	ldr	r0, [r4, #40]	; 0x28
   22604:	add	r2, r1, r2
   22608:	str	r3, [sp]
   2260c:	add	r1, r4, #60	; 0x3c
   22610:	ldr	r9, [r4, #48]	; 0x30
   22614:	blx	r9
   22618:	cmp	r0, #0
   2261c:	bne	2265c <flatcc_builder_table_add@@Base+0x124>
   22620:	ldr	r6, [r4, #28]
   22624:	ldr	r3, [r4, #64]	; 0x40
   22628:	ldr	r2, [pc, #120]	; 226a8 <flatcc_builder_table_add@@Base+0x170>
   2262c:	sub	r3, r3, r6
   22630:	ldr	r0, [r4, #60]	; 0x3c
   22634:	ldr	r1, [r4, #32]
   22638:	ldr	lr, [r4, #4]
   2263c:	cmp	r3, r2
   22640:	add	r0, r0, r6
   22644:	movcs	r3, r2
   22648:	str	r0, [r4, #16]
   2264c:	str	r3, [r4, #24]
   22650:	add	lr, lr, r7
   22654:	str	r2, [r1, #4]
   22658:	b	225d0 <flatcc_builder_table_add@@Base+0x98>
   2265c:	mov	r0, r6
   22660:	b	225ec <flatcc_builder_table_add@@Base+0xb4>
   22664:	ldr	r3, [pc, #64]	; 226ac <flatcc_builder_table_add@@Base+0x174>
   22668:	ldr	r2, [pc, #64]	; 226b0 <flatcc_builder_table_add@@Base+0x178>
   2266c:	ldr	r1, [pc, #64]	; 226b4 <flatcc_builder_table_add@@Base+0x17c>
   22670:	ldr	r0, [pc, #64]	; 226b8 <flatcc_builder_table_add@@Base+0x180>
   22674:	bl	12a8c <__assert_fail@plt>
   22678:	ldr	r3, [pc, #44]	; 226ac <flatcc_builder_table_add@@Base+0x174>
   2267c:	ldr	r2, [pc, #56]	; 226bc <flatcc_builder_table_add@@Base+0x184>
   22680:	ldr	r1, [pc, #44]	; 226b4 <flatcc_builder_table_add@@Base+0x17c>
   22684:	ldr	r0, [pc, #52]	; 226c0 <flatcc_builder_table_add@@Base+0x188>
   22688:	bl	12a8c <__assert_fail@plt>
   2268c:	ldr	r3, [pc, #24]	; 226ac <flatcc_builder_table_add@@Base+0x174>
   22690:	ldr	r2, [pc, #44]	; 226c4 <flatcc_builder_table_add@@Base+0x18c>
   22694:	ldr	r1, [pc, #24]	; 226b4 <flatcc_builder_table_add@@Base+0x17c>
   22698:	ldr	r0, [pc, #40]	; 226c8 <flatcc_builder_table_add@@Base+0x190>
   2269c:	bl	12a8c <__assert_fail@plt>
   226a0:	strdeq	r7, [r0], -ip
   226a4:			; <UNDEFINED> instruction: 0x9e3779b1
   226a8:	strdeq	pc, [r0], -ip
   226ac:	andeq	r8, r2, r8, lsl r9
   226b0:	strdeq	r0, [r0], -r8
   226b4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   226b8:	muleq	r2, r0, sl
   226bc:	andeq	r0, r0, lr, ror #13
   226c0:	andeq	r8, r2, r4, lsr sp
   226c4:	andeq	r0, r0, sp, ror #13
   226c8:	muleq	r2, ip, ip

000226cc <flatcc_builder_table_edit@@Base>:
   226cc:	ldr	r3, [r0, #32]
   226d0:	ldrh	r3, [r3, #14]
   226d4:	cmp	r3, #3
   226d8:	bne	226f0 <flatcc_builder_table_edit@@Base+0x24>
   226dc:	ldr	r3, [r0, #20]
   226e0:	ldr	r0, [r0, #16]
   226e4:	sub	r1, r3, r1
   226e8:	add	r0, r0, r1
   226ec:	bx	lr
   226f0:	push	{r4, lr}
   226f4:	ldr	r3, [pc, #12]	; 22708 <flatcc_builder_table_edit@@Base+0x3c>
   226f8:	ldr	r2, [pc, #12]	; 2270c <flatcc_builder_table_edit@@Base+0x40>
   226fc:	ldr	r1, [pc, #12]	; 22710 <flatcc_builder_table_edit@@Base+0x44>
   22700:	ldr	r0, [pc, #12]	; 22714 <flatcc_builder_table_edit@@Base+0x48>
   22704:	bl	12a8c <__assert_fail@plt>
   22708:	andeq	r8, r2, r4, lsr r9
   2270c:	andeq	r0, r0, r2, lsl #14
   22710:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22714:	muleq	r2, ip, ip

00022718 <flatcc_builder_table_add_copy@@Base>:
   22718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2271c:	mov	r4, r0
   22720:	ldr	r0, [r0, #32]
   22724:	mov	r7, r3
   22728:	sub	sp, sp, #12
   2272c:	ldrh	r3, [r0, #14]
   22730:	ldrh	ip, [sp, #48]	; 0x30
   22734:	cmp	r3, #3
   22738:	bne	22894 <flatcc_builder_table_add_copy@@Base+0x17c>
   2273c:	ldr	r3, [pc, #356]	; 228a8 <flatcc_builder_table_add_copy@@Base+0x190>
   22740:	cmp	r1, r3
   22744:	bhi	22880 <flatcc_builder_table_add_copy@@Base+0x168>
   22748:	ldrh	r3, [r4, #130]	; 0x82
   2274c:	lsl	sl, r1, #1
   22750:	mov	r8, r2
   22754:	cmp	r3, ip
   22758:	ldr	r3, [r4, #4]
   2275c:	strhcc	ip, [r4, #130]	; 0x82
   22760:	add	r0, r3, sl
   22764:	ldrh	r5, [r3, sl]
   22768:	cmp	r5, #0
   2276c:	bne	2286c <flatcc_builder_table_add_copy@@Base+0x154>
   22770:	ldr	r2, [r4, #12]
   22774:	ldr	lr, [pc, #304]	; 228ac <flatcc_builder_table_add_copy@@Base+0x194>
   22778:	eor	r2, r2, r1
   2277c:	ldr	r6, [r4, #20]
   22780:	mul	r2, lr, r2
   22784:	sub	r3, ip, #1
   22788:	eor	r2, r2, r7
   2278c:	add	r3, r3, r6
   22790:	rsb	ip, ip, #0
   22794:	and	r6, r3, ip
   22798:	mul	lr, lr, r2
   2279c:	ldr	r3, [r4, #24]
   227a0:	uxth	r9, r1
   227a4:	add	r1, r7, r6
   227a8:	cmp	r1, r3
   227ac:	str	lr, [r4, #12]
   227b0:	str	r1, [r4, #20]
   227b4:	bcs	227fc <flatcc_builder_table_add_copy@@Base+0xe4>
   227b8:	ldr	r3, [r4, #16]
   227bc:	add	r2, r6, #4
   227c0:	strh	r2, [r0]
   227c4:	ldrh	r2, [r4, #8]
   227c8:	cmp	r2, r9
   227cc:	addls	r9, r9, #1
   227d0:	strhls	r9, [r4, #8]
   227d4:	adds	r3, r3, r6
   227d8:	beq	227f0 <flatcc_builder_table_add_copy@@Base+0xd8>
   227dc:	mov	r0, r3
   227e0:	mov	r2, r7
   227e4:	mov	r1, r8
   227e8:	bl	129b4 <memcpy@plt>
   227ec:	mov	r3, r0
   227f0:	mov	r0, r3
   227f4:	add	sp, sp, #12
   227f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227fc:	ldr	r2, [r4, #28]
   22800:	mov	r3, #1
   22804:	add	r2, r2, #1
   22808:	ldr	r0, [r4, #40]	; 0x28
   2280c:	add	r2, r2, r1
   22810:	str	r3, [sp]
   22814:	add	r1, r4, #60	; 0x3c
   22818:	ldr	fp, [r4, #48]	; 0x30
   2281c:	blx	fp
   22820:	cmp	r0, #0
   22824:	bne	22864 <flatcc_builder_table_add_copy@@Base+0x14c>
   22828:	ldr	r0, [r4, #28]
   2282c:	ldr	r2, [r4, #64]	; 0x40
   22830:	ldr	r1, [pc, #120]	; 228b0 <flatcc_builder_table_add_copy@@Base+0x198>
   22834:	ldr	r3, [r4, #60]	; 0x3c
   22838:	sub	r2, r2, r0
   2283c:	ldr	ip, [r4, #32]
   22840:	add	r3, r3, r0
   22844:	cmp	r2, r1
   22848:	ldr	r0, [r4, #4]
   2284c:	movcs	r2, r1
   22850:	str	r3, [r4, #16]
   22854:	str	r2, [r4, #24]
   22858:	add	r0, r0, sl
   2285c:	str	r1, [ip, #4]
   22860:	b	227bc <flatcc_builder_table_add_copy@@Base+0xa4>
   22864:	mov	r3, r5
   22868:	b	227f0 <flatcc_builder_table_add_copy@@Base+0xd8>
   2286c:	ldr	r3, [pc, #64]	; 228b4 <flatcc_builder_table_add_copy@@Base+0x19c>
   22870:	ldr	r2, [pc, #64]	; 228b8 <flatcc_builder_table_add_copy@@Base+0x1a0>
   22874:	ldr	r1, [pc, #64]	; 228bc <flatcc_builder_table_add_copy@@Base+0x1a4>
   22878:	ldr	r0, [pc, #64]	; 228c0 <flatcc_builder_table_add_copy@@Base+0x1a8>
   2287c:	bl	12a8c <__assert_fail@plt>
   22880:	ldr	r3, [pc, #44]	; 228b4 <flatcc_builder_table_add_copy@@Base+0x19c>
   22884:	ldr	r2, [pc, #56]	; 228c4 <flatcc_builder_table_add_copy@@Base+0x1ac>
   22888:	ldr	r1, [pc, #44]	; 228bc <flatcc_builder_table_add_copy@@Base+0x1a4>
   2288c:	ldr	r0, [pc, #52]	; 228c8 <flatcc_builder_table_add_copy@@Base+0x1b0>
   22890:	bl	12a8c <__assert_fail@plt>
   22894:	ldr	r3, [pc, #24]	; 228b4 <flatcc_builder_table_add_copy@@Base+0x19c>
   22898:	ldr	r2, [pc, #44]	; 228cc <flatcc_builder_table_add_copy@@Base+0x1b4>
   2289c:	ldr	r1, [pc, #24]	; 228bc <flatcc_builder_table_add_copy@@Base+0x1a4>
   228a0:	ldr	r0, [pc, #40]	; 228d0 <flatcc_builder_table_add_copy@@Base+0x1b8>
   228a4:	bl	12a8c <__assert_fail@plt>
   228a8:	strdeq	r7, [r0], -ip
   228ac:			; <UNDEFINED> instruction: 0x9e3779b1
   228b0:	strdeq	pc, [r0], -ip
   228b4:	andeq	r8, r2, r8, lsl r9
   228b8:	strdeq	r0, [r0], -r8
   228bc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   228c0:	muleq	r2, r0, sl
   228c4:	andeq	r0, r0, lr, ror #13
   228c8:	andeq	r8, r2, r4, lsr sp
   228cc:	andeq	r0, r0, sp, ror #13
   228d0:	muleq	r2, ip, ip

000228d4 <flatcc_builder_table_add_offset@@Base>:
   228d4:	ldr	r3, [r0, #32]
   228d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   228dc:	sub	sp, sp, #12
   228e0:	ldrh	r3, [r3, #14]
   228e4:	cmp	r3, #3
   228e8:	bne	22a24 <flatcc_builder_table_add_offset@@Base+0x150>
   228ec:	ldr	r3, [pc, #324]	; 22a38 <flatcc_builder_table_add_offset@@Base+0x164>
   228f0:	cmp	r1, r3
   228f4:	bhi	22a10 <flatcc_builder_table_add_offset@@Base+0x13c>
   228f8:	ldr	r3, [r0, #4]
   228fc:	lsl	r7, r1, #1
   22900:	mov	r4, r0
   22904:	ldrh	r6, [r3, r7]
   22908:	add	ip, r3, r7
   2290c:	cmp	r6, #0
   22910:	bne	229fc <flatcc_builder_table_add_offset@@Base+0x128>
   22914:	ldr	r3, [r0, #12]
   22918:	ldr	r2, [pc, #284]	; 22a3c <flatcc_builder_table_add_offset@@Base+0x168>
   2291c:	eor	r3, r3, r1
   22920:	ldr	r5, [r0, #20]
   22924:	mul	r3, r2, r3
   22928:	add	r5, r5, #3
   2292c:	eor	r3, r3, #4
   22930:	ldr	r0, [r0, #24]
   22934:	mul	r3, r2, r3
   22938:	bic	r5, r5, #3
   2293c:	add	r2, r5, #4
   22940:	cmp	r2, r0
   22944:	uxth	r8, r1
   22948:	str	r3, [r4, #12]
   2294c:	str	r2, [r4, #20]
   22950:	bhi	22990 <flatcc_builder_table_add_offset@@Base+0xbc>
   22954:	ldr	r0, [r4, #16]
   22958:	uxth	r2, r5
   2295c:	add	r3, r2, #4
   22960:	strh	r3, [ip]
   22964:	ldrh	r3, [r4, #8]
   22968:	add	r0, r0, r5
   2296c:	cmp	r3, r8
   22970:	ldr	r3, [r4]
   22974:	addls	r1, r8, #1
   22978:	strhls	r1, [r4, #8]
   2297c:	add	r1, r3, #2
   22980:	str	r1, [r4]
   22984:	strh	r2, [r3]
   22988:	add	sp, sp, #12
   2298c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22990:	ldr	r1, [r4, #28]
   22994:	mov	r3, #1
   22998:	ldr	r0, [r4, #40]	; 0x28
   2299c:	add	r2, r2, r1
   229a0:	str	r3, [sp]
   229a4:	add	r1, r4, #60	; 0x3c
   229a8:	ldr	r9, [r4, #48]	; 0x30
   229ac:	blx	r9
   229b0:	cmp	r0, #0
   229b4:	bne	229f4 <flatcc_builder_table_add_offset@@Base+0x120>
   229b8:	ldr	r6, [r4, #28]
   229bc:	ldr	r3, [r4, #64]	; 0x40
   229c0:	ldr	r2, [pc, #120]	; 22a40 <flatcc_builder_table_add_offset@@Base+0x16c>
   229c4:	sub	r3, r3, r6
   229c8:	ldr	r0, [r4, #60]	; 0x3c
   229cc:	ldr	r1, [r4, #32]
   229d0:	ldr	ip, [r4, #4]
   229d4:	cmp	r3, r2
   229d8:	add	r0, r0, r6
   229dc:	movcs	r3, r2
   229e0:	str	r0, [r4, #16]
   229e4:	str	r3, [r4, #24]
   229e8:	add	ip, ip, r7
   229ec:	str	r2, [r1, #4]
   229f0:	b	22958 <flatcc_builder_table_add_offset@@Base+0x84>
   229f4:	mov	r0, r6
   229f8:	b	22988 <flatcc_builder_table_add_offset@@Base+0xb4>
   229fc:	ldr	r3, [pc, #64]	; 22a44 <flatcc_builder_table_add_offset@@Base+0x170>
   22a00:	ldr	r2, [pc, #64]	; 22a48 <flatcc_builder_table_add_offset@@Base+0x174>
   22a04:	ldr	r1, [pc, #64]	; 22a4c <flatcc_builder_table_add_offset@@Base+0x178>
   22a08:	ldr	r0, [pc, #64]	; 22a50 <flatcc_builder_table_add_offset@@Base+0x17c>
   22a0c:	bl	12a8c <__assert_fail@plt>
   22a10:	ldr	r3, [pc, #44]	; 22a44 <flatcc_builder_table_add_offset@@Base+0x170>
   22a14:	ldr	r2, [pc, #56]	; 22a54 <flatcc_builder_table_add_offset@@Base+0x180>
   22a18:	ldr	r1, [pc, #44]	; 22a4c <flatcc_builder_table_add_offset@@Base+0x178>
   22a1c:	ldr	r0, [pc, #52]	; 22a58 <flatcc_builder_table_add_offset@@Base+0x184>
   22a20:	bl	12a8c <__assert_fail@plt>
   22a24:	ldr	r3, [pc, #24]	; 22a44 <flatcc_builder_table_add_offset@@Base+0x170>
   22a28:	ldr	r2, [pc, #44]	; 22a5c <flatcc_builder_table_add_offset@@Base+0x188>
   22a2c:	ldr	r1, [pc, #24]	; 22a4c <flatcc_builder_table_add_offset@@Base+0x178>
   22a30:	ldr	r0, [pc, #40]	; 22a60 <flatcc_builder_table_add_offset@@Base+0x18c>
   22a34:	bl	12a8c <__assert_fail@plt>
   22a38:	strdeq	r7, [r0], -ip
   22a3c:			; <UNDEFINED> instruction: 0x9e3779b1
   22a40:	strdeq	pc, [r0], -ip
   22a44:	andeq	r8, r2, r0, asr r9
   22a48:	andeq	r0, r0, fp, lsl r7
   22a4c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22a50:	muleq	r2, r0, sl
   22a54:	andeq	r0, r0, r4, lsl r7
   22a58:	andeq	r8, r2, r4, lsr sp
   22a5c:	andeq	r0, r0, r3, lsl r7
   22a60:	muleq	r2, ip, ip

00022a64 <flatcc_builder_table_add_union@@Base>:
   22a64:	push	{r4, r5, r6, r7, r8, r9, lr}
   22a68:	sub	sp, sp, #20
   22a6c:	add	ip, sp, #16
   22a70:	stmdb	ip, {r2, r3}
   22a74:	ldr	r3, [r0, #32]
   22a78:	ldrb	r6, [sp, #8]
   22a7c:	ldr	r5, [sp, #12]
   22a80:	ldrh	r3, [r3, #14]
   22a84:	cmp	r3, #3
   22a88:	bne	22c14 <flatcc_builder_table_add_union@@Base+0x1b0>
   22a8c:	cmp	r6, #0
   22a90:	mov	r4, r0
   22a94:	mov	r7, r1
   22a98:	beq	22b68 <flatcc_builder_table_add_union@@Base+0x104>
   22a9c:	cmp	r5, #0
   22aa0:	beq	22ac4 <flatcc_builder_table_add_union@@Base+0x60>
   22aa4:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   22aa8:	cmp	r0, #0
   22aac:	beq	22c50 <flatcc_builder_table_add_union@@Base+0x1ec>
   22ab0:	ldr	r3, [r4, #32]
   22ab4:	str	r5, [r0]
   22ab8:	ldrh	r3, [r3, #14]
   22abc:	cmp	r3, #3
   22ac0:	bne	22c28 <flatcc_builder_table_add_union@@Base+0x1c4>
   22ac4:	ldr	r3, [pc, #408]	; 22c64 <flatcc_builder_table_add_union@@Base+0x200>
   22ac8:	sub	r1, r7, #1
   22acc:	cmp	r1, r3
   22ad0:	bhi	22c3c <flatcc_builder_table_add_union@@Base+0x1d8>
   22ad4:	ldrh	r3, [r4, #130]	; 0x82
   22ad8:	lsl	r5, r1, #1
   22adc:	cmp	r3, #0
   22ae0:	moveq	r3, #1
   22ae4:	strheq	r3, [r4, #130]	; 0x82
   22ae8:	ldr	r3, [r4, #4]
   22aec:	add	r0, r3, r5
   22af0:	ldrh	r3, [r3, r5]
   22af4:	cmp	r3, #0
   22af8:	bne	22c00 <flatcc_builder_table_add_union@@Base+0x19c>
   22afc:	ldr	r3, [r4, #12]
   22b00:	ldr	r2, [pc, #352]	; 22c68 <flatcc_builder_table_add_union@@Base+0x204>
   22b04:	eor	r3, r3, r1
   22b08:	ldr	r7, [r4, #20]
   22b0c:	mul	r3, r2, r3
   22b10:	uxth	r8, r1
   22b14:	eor	r3, r3, #1
   22b18:	ldr	r1, [r4, #24]
   22b1c:	mul	r3, r2, r3
   22b20:	add	r2, r7, #1
   22b24:	cmp	r2, r1
   22b28:	str	r3, [r4, #12]
   22b2c:	str	r2, [r4, #20]
   22b30:	bcs	22b84 <flatcc_builder_table_add_union@@Base+0x120>
   22b34:	ldr	r3, [r4, #16]
   22b38:	add	r2, r7, #4
   22b3c:	strh	r2, [r0]
   22b40:	ldrh	r2, [r4, #8]
   22b44:	cmp	r2, r8
   22b48:	addls	r1, r8, #1
   22b4c:	strhls	r1, [r4, #8]
   22b50:	cmn	r3, r7
   22b54:	beq	22bec <flatcc_builder_table_add_union@@Base+0x188>
   22b58:	mov	r0, #0
   22b5c:	strb	r6, [r3, r7]
   22b60:	add	sp, sp, #20
   22b64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22b68:	cmp	r5, #0
   22b6c:	beq	22ac4 <flatcc_builder_table_add_union@@Base+0x60>
   22b70:	ldr	r3, [pc, #244]	; 22c6c <flatcc_builder_table_add_union@@Base+0x208>
   22b74:	ldr	r2, [pc, #244]	; 22c70 <flatcc_builder_table_add_union@@Base+0x20c>
   22b78:	ldr	r1, [pc, #244]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22b7c:	ldr	r0, [pc, #244]	; 22c78 <flatcc_builder_table_add_union@@Base+0x214>
   22b80:	bl	12a8c <__assert_fail@plt>
   22b84:	ldr	r2, [r4, #28]
   22b88:	mov	r3, #1
   22b8c:	add	r2, r7, r2
   22b90:	ldr	r0, [r4, #40]	; 0x28
   22b94:	add	r2, r2, #2
   22b98:	str	r3, [sp]
   22b9c:	add	r1, r4, #60	; 0x3c
   22ba0:	ldr	r9, [r4, #48]	; 0x30
   22ba4:	blx	r9
   22ba8:	cmp	r0, #0
   22bac:	bne	22bec <flatcc_builder_table_add_union@@Base+0x188>
   22bb0:	ldr	r0, [r4, #28]
   22bb4:	ldr	r2, [r4, #64]	; 0x40
   22bb8:	ldr	r1, [pc, #188]	; 22c7c <flatcc_builder_table_add_union@@Base+0x218>
   22bbc:	ldr	r3, [r4, #60]	; 0x3c
   22bc0:	sub	r2, r2, r0
   22bc4:	ldr	ip, [r4, #32]
   22bc8:	add	r3, r3, r0
   22bcc:	cmp	r2, r1
   22bd0:	ldr	r0, [r4, #4]
   22bd4:	movcs	r2, r1
   22bd8:	str	r3, [r4, #16]
   22bdc:	str	r2, [r4, #24]
   22be0:	add	r0, r0, r5
   22be4:	str	r1, [ip, #4]
   22be8:	b	22b38 <flatcc_builder_table_add_union@@Base+0xd4>
   22bec:	ldr	r3, [pc, #120]	; 22c6c <flatcc_builder_table_add_union@@Base+0x208>
   22bf0:	ldr	r2, [pc, #136]	; 22c80 <flatcc_builder_table_add_union@@Base+0x21c>
   22bf4:	ldr	r1, [pc, #120]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22bf8:	ldr	r0, [pc, #132]	; 22c84 <flatcc_builder_table_add_union@@Base+0x220>
   22bfc:	bl	12a8c <__assert_fail@plt>
   22c00:	ldr	r3, [pc, #128]	; 22c88 <flatcc_builder_table_add_union@@Base+0x224>
   22c04:	ldr	r2, [pc, #128]	; 22c8c <flatcc_builder_table_add_union@@Base+0x228>
   22c08:	ldr	r1, [pc, #100]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22c0c:	ldr	r0, [pc, #124]	; 22c90 <flatcc_builder_table_add_union@@Base+0x22c>
   22c10:	bl	12a8c <__assert_fail@plt>
   22c14:	ldr	r3, [pc, #80]	; 22c6c <flatcc_builder_table_add_union@@Base+0x208>
   22c18:	ldr	r2, [pc, #116]	; 22c94 <flatcc_builder_table_add_union@@Base+0x230>
   22c1c:	ldr	r1, [pc, #80]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22c20:	ldr	r0, [pc, #112]	; 22c98 <flatcc_builder_table_add_union@@Base+0x234>
   22c24:	bl	12a8c <__assert_fail@plt>
   22c28:	ldr	r3, [pc, #88]	; 22c88 <flatcc_builder_table_add_union@@Base+0x224>
   22c2c:	ldr	r2, [pc, #104]	; 22c9c <flatcc_builder_table_add_union@@Base+0x238>
   22c30:	ldr	r1, [pc, #60]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22c34:	ldr	r0, [pc, #92]	; 22c98 <flatcc_builder_table_add_union@@Base+0x234>
   22c38:	bl	12a8c <__assert_fail@plt>
   22c3c:	ldr	r3, [pc, #68]	; 22c88 <flatcc_builder_table_add_union@@Base+0x224>
   22c40:	ldr	r2, [pc, #88]	; 22ca0 <flatcc_builder_table_add_union@@Base+0x23c>
   22c44:	ldr	r1, [pc, #40]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22c48:	ldr	r0, [pc, #84]	; 22ca4 <flatcc_builder_table_add_union@@Base+0x240>
   22c4c:	bl	12a8c <__assert_fail@plt>
   22c50:	ldr	r3, [pc, #20]	; 22c6c <flatcc_builder_table_add_union@@Base+0x208>
   22c54:	ldr	r2, [pc, #76]	; 22ca8 <flatcc_builder_table_add_union@@Base+0x244>
   22c58:	ldr	r1, [pc, #20]	; 22c74 <flatcc_builder_table_add_union@@Base+0x210>
   22c5c:	ldr	r0, [pc, #72]	; 22cac <flatcc_builder_table_add_union@@Base+0x248>
   22c60:	bl	12a8c <__assert_fail@plt>
   22c64:	strdeq	r7, [r0], -ip
   22c68:			; <UNDEFINED> instruction: 0x9e3779b1
   22c6c:	andeq	r8, r2, r0, ror r9
   22c70:	andeq	r0, r0, pc, ror #11
   22c74:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22c78:	andeq	r8, r2, r8, ror sp
   22c7c:	strdeq	pc, [r0], -ip
   22c80:	strdeq	r0, [r0], -r6
   22c84:	andeq	r8, r2, r8, lsr #27
   22c88:	andeq	r8, r2, r8, lsl r9
   22c8c:	strdeq	r0, [r0], -r8
   22c90:	muleq	r2, r0, sl
   22c94:	andeq	r0, r0, lr, ror #11
   22c98:	muleq	r2, ip, ip
   22c9c:	andeq	r0, r0, sp, ror #13
   22ca0:	andeq	r0, r0, lr, ror #13
   22ca4:	andeq	r8, r2, r4, lsr sp
   22ca8:	strdeq	r0, [r0], -r2
   22cac:	muleq	r2, ip, sp

00022cb0 <flatcc_builder_table_add_union_vector@@Base>:
   22cb0:	push	{r4, r5, r6, r7, lr}
   22cb4:	sub	sp, sp, #12
   22cb8:	add	ip, sp, #8
   22cbc:	stmdb	ip, {r2, r3}
   22cc0:	ldr	r3, [r0, #32]
   22cc4:	ldr	r4, [sp]
   22cc8:	ldr	r6, [sp, #4]
   22ccc:	ldrh	r3, [r3, #14]
   22cd0:	cmp	r3, #3
   22cd4:	bne	22d64 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   22cd8:	clz	r3, r6
   22cdc:	clz	r2, r4
   22ce0:	lsr	r3, r3, #5
   22ce4:	lsr	r2, r2, #5
   22ce8:	cmp	r2, r3
   22cec:	beq	22d0c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   22cf0:	adds	r4, r4, #0
   22cf4:	movne	r4, #1
   22cf8:	cmp	r4, r3
   22cfc:	mvnne	r0, #0
   22d00:	beq	22d78 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   22d04:	add	sp, sp, #12
   22d08:	pop	{r4, r5, r6, r7, pc}
   22d0c:	cmp	r4, #0
   22d10:	moveq	r0, r4
   22d14:	beq	22d04 <flatcc_builder_table_add_union_vector@@Base+0x54>
   22d18:	mov	r7, r1
   22d1c:	sub	r1, r1, #1
   22d20:	mov	r5, r0
   22d24:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   22d28:	cmp	r0, #0
   22d2c:	beq	22d8c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22d30:	str	r4, [r0]
   22d34:	mov	r1, r7
   22d38:	mov	r0, r5
   22d3c:	bl	228d4 <flatcc_builder_table_add_offset@@Base>
   22d40:	cmp	r0, #0
   22d44:	strne	r6, [r0]
   22d48:	movne	r0, #0
   22d4c:	bne	22d04 <flatcc_builder_table_add_union_vector@@Base+0x54>
   22d50:	ldr	r3, [pc, #72]	; 22da0 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   22d54:	ldr	r2, [pc, #72]	; 22da4 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   22d58:	ldr	r1, [pc, #72]	; 22da8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   22d5c:	ldr	r0, [pc, #72]	; 22dac <flatcc_builder_table_add_union_vector@@Base+0xfc>
   22d60:	bl	12a8c <__assert_fail@plt>
   22d64:	ldr	r3, [pc, #52]	; 22da0 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   22d68:	mov	r2, #1536	; 0x600
   22d6c:	ldr	r1, [pc, #52]	; 22da8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   22d70:	ldr	r0, [pc, #56]	; 22db0 <flatcc_builder_table_add_union_vector@@Base+0x100>
   22d74:	bl	12a8c <__assert_fail@plt>
   22d78:	ldr	r3, [pc, #32]	; 22da0 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   22d7c:	ldr	r2, [pc, #48]	; 22db4 <flatcc_builder_table_add_union_vector@@Base+0x104>
   22d80:	ldr	r1, [pc, #32]	; 22da8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   22d84:	ldr	r0, [pc, #44]	; 22db8 <flatcc_builder_table_add_union_vector@@Base+0x108>
   22d88:	bl	12a8c <__assert_fail@plt>
   22d8c:	ldr	r3, [pc, #12]	; 22da0 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   22d90:	ldr	r2, [pc, #36]	; 22dbc <flatcc_builder_table_add_union_vector@@Base+0x10c>
   22d94:	ldr	r1, [pc, #12]	; 22da8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   22d98:	ldr	r0, [pc, #12]	; 22dac <flatcc_builder_table_add_union_vector@@Base+0xfc>
   22d9c:	bl	12a8c <__assert_fail@plt>
   22da0:	muleq	r2, r0, r9
   22da4:	andeq	r0, r0, r8, lsl #12
   22da8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22dac:	muleq	r2, ip, sp
   22db0:	muleq	r2, ip, ip
   22db4:	andeq	r0, r0, r1, lsl #12
   22db8:			; <UNDEFINED> instruction: 0x00028db4
   22dbc:	andeq	r0, r0, r4, lsl #12

00022dc0 <flatcc_builder_push_buffer_alignment@@Base>:
   22dc0:	mov	r3, r0
   22dc4:	mov	r2, #4
   22dc8:	ldrh	r0, [r0, #128]	; 0x80
   22dcc:	strh	r2, [r3, #128]	; 0x80
   22dd0:	bx	lr

00022dd4 <flatcc_builder_pop_buffer_alignment@@Base>:
   22dd4:	ldrh	r3, [r0, #128]	; 0x80
   22dd8:	cmp	r3, r1
   22ddc:	strhcc	r1, [r0, #128]	; 0x80
   22de0:	bx	lr

00022de4 <flatcc_builder_get_buffer_alignment@@Base>:
   22de4:	ldrh	r0, [r0, #128]	; 0x80
   22de8:	bx	lr

00022dec <flatcc_builder_set_vtable_clustering@@Base>:
   22dec:	clz	r1, r1
   22df0:	lsr	r1, r1, #5
   22df4:	str	r1, [r0, #180]	; 0xb4
   22df8:	bx	lr

00022dfc <flatcc_builder_set_block_align@@Base>:
   22dfc:	strh	r1, [r0, #132]	; 0x84
   22e00:	bx	lr

00022e04 <flatcc_builder_get_level@@Base>:
   22e04:	ldr	r0, [r0, #156]	; 0x9c
   22e08:	bx	lr

00022e0c <flatcc_builder_set_max_level@@Base>:
   22e0c:	ldr	r3, [r0, #160]	; 0xa0
   22e10:	str	r1, [r0, #176]	; 0xb0
   22e14:	cmp	r1, r3
   22e18:	strgt	r1, [r0, #160]	; 0xa0
   22e1c:	bx	lr

00022e20 <flatcc_builder_get_buffer_size@@Base>:
   22e20:	ldr	r2, [r0, #140]	; 0x8c
   22e24:	ldr	r0, [r0, #136]	; 0x88
   22e28:	sub	r0, r2, r0
   22e2c:	bx	lr

00022e30 <flatcc_builder_get_buffer_start@@Base>:
   22e30:	ldr	r0, [r0, #136]	; 0x88
   22e34:	bx	lr

00022e38 <flatcc_builder_get_buffer_end@@Base>:
   22e38:	ldr	r0, [r0, #140]	; 0x8c
   22e3c:	bx	lr

00022e40 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22e40:	str	r1, [r0, #172]	; 0xac
   22e44:	bx	lr

00022e48 <flatcc_builder_set_identifier@@Base>:
   22e48:	ldr	r3, [pc, #16]	; 22e60 <flatcc_builder_set_identifier@@Base+0x18>
   22e4c:	cmp	r1, #0
   22e50:	moveq	r1, r3
   22e54:	ldr	r3, [r1]
   22e58:	str	r3, [r0, #168]	; 0xa8
   22e5c:	bx	lr
   22e60:	andeq	r8, r2, r0, lsr #6

00022e64 <flatcc_builder_get_type@@Base>:
   22e64:	ldr	r0, [r0, #32]
   22e68:	cmp	r0, #0
   22e6c:	ldrhne	r0, [r0, #14]
   22e70:	bx	lr

00022e74 <flatcc_builder_get_type_at@@Base>:
   22e74:	cmp	r1, #0
   22e78:	ble	22ea0 <flatcc_builder_get_type_at@@Base+0x2c>
   22e7c:	ldr	r3, [r0, #156]	; 0x9c
   22e80:	cmp	r1, r3
   22e84:	bgt	22ea0 <flatcc_builder_get_type_at@@Base+0x2c>
   22e88:	sub	r1, r1, r3
   22e8c:	ldr	r3, [r0, #32]
   22e90:	add	r1, r1, r1, lsl #3
   22e94:	add	r1, r3, r1, lsl #2
   22e98:	ldrh	r0, [r1, #14]
   22e9c:	bx	lr
   22ea0:	mov	r0, #0
   22ea4:	bx	lr

00022ea8 <flatcc_builder_get_direct_buffer@@Base>:
   22ea8:	ldr	r3, [r0, #184]	; 0xb8
   22eac:	cmp	r3, #0
   22eb0:	beq	22ec4 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   22eb4:	ldr	r2, [r0, #188]	; 0xbc
   22eb8:	ldr	r3, [r0, #192]	; 0xc0
   22ebc:	cmp	r2, r3
   22ec0:	beq	22ed8 <flatcc_builder_get_direct_buffer@@Base+0x30>
   22ec4:	cmp	r1, #0
   22ec8:	movne	r0, #0
   22ecc:	strne	r0, [r1]
   22ed0:	moveq	r0, r1
   22ed4:	bx	lr
   22ed8:	cmp	r1, #0
   22edc:	ldrne	r3, [r0, #212]	; 0xd4
   22ee0:	ldr	r0, [r0, #196]	; 0xc4
   22ee4:	strne	r3, [r1]
   22ee8:	bx	lr

00022eec <flatcc_builder_copy_buffer@@Base>:
   22eec:	ldr	r3, [r0, #184]	; 0xb8
   22ef0:	cmp	r3, #0
   22ef4:	beq	22f10 <flatcc_builder_copy_buffer@@Base+0x24>
   22ef8:	push	{r4, lr}
   22efc:	add	r0, r0, #188	; 0xbc
   22f00:	bl	235c4 <flatcc_emitter_copy_buffer@@Base>
   22f04:	cmp	r0, #0
   22f08:	popne	{r4, pc}
   22f0c:	bl	13154 <__assert_fail@plt+0x6c8>
   22f10:	mov	r0, r3
   22f14:	bx	lr

00022f18 <flatcc_builder_finalize_buffer@@Base>:
   22f18:	push	{r4, r5, r6, lr}
   22f1c:	cmp	r1, #0
   22f20:	ldr	r4, [r0, #140]	; 0x8c
   22f24:	ldr	r2, [r0, #136]	; 0x88
   22f28:	mov	r5, r0
   22f2c:	sub	r4, r4, r2
   22f30:	strne	r4, [r1]
   22f34:	mov	r0, r4
   22f38:	bl	129fc <malloc@plt>
   22f3c:	subs	r6, r0, #0
   22f40:	beq	22f84 <flatcc_builder_finalize_buffer@@Base+0x6c>
   22f44:	ldr	r3, [r5, #184]	; 0xb8
   22f48:	cmp	r3, #0
   22f4c:	beq	22f70 <flatcc_builder_finalize_buffer@@Base+0x58>
   22f50:	mov	r2, r4
   22f54:	add	r0, r5, #188	; 0xbc
   22f58:	mov	r1, r6
   22f5c:	bl	235c4 <flatcc_emitter_copy_buffer@@Base>
   22f60:	cmp	r0, #0
   22f64:	beq	22f98 <flatcc_builder_finalize_buffer@@Base+0x80>
   22f68:	mov	r0, r6
   22f6c:	pop	{r4, r5, r6, pc}
   22f70:	ldr	r3, [pc, #36]	; 22f9c <flatcc_builder_finalize_buffer@@Base+0x84>
   22f74:	ldr	r2, [pc, #36]	; 22fa0 <flatcc_builder_finalize_buffer@@Base+0x88>
   22f78:	ldr	r1, [pc, #36]	; 22fa4 <flatcc_builder_finalize_buffer@@Base+0x8c>
   22f7c:	ldr	r0, [pc, #36]	; 22fa8 <flatcc_builder_finalize_buffer@@Base+0x90>
   22f80:	bl	12a8c <__assert_fail@plt>
   22f84:	ldr	r3, [pc, #16]	; 22f9c <flatcc_builder_finalize_buffer@@Base+0x84>
   22f88:	ldr	r2, [pc, #28]	; 22fac <flatcc_builder_finalize_buffer@@Base+0x94>
   22f8c:	ldr	r1, [pc, #16]	; 22fa4 <flatcc_builder_finalize_buffer@@Base+0x8c>
   22f90:	ldr	r0, [pc, #16]	; 22fa8 <flatcc_builder_finalize_buffer@@Base+0x90>
   22f94:	bl	12a8c <__assert_fail@plt>
   22f98:	bl	13154 <__assert_fail@plt+0x6c8>
   22f9c:			; <UNDEFINED> instruction: 0x000289b8
   22fa0:	muleq	r0, ip, r7
   22fa4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   22fa8:	muleq	r2, r0, sl
   22fac:	muleq	r0, r8, r7

00022fb0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   22fb0:	push	{r4, r5, r6, r7, lr}
   22fb4:	subs	r7, r1, #0
   22fb8:	ldrh	r1, [r0, #128]	; 0x80
   22fbc:	ldr	r4, [r0, #140]	; 0x8c
   22fc0:	ldr	r3, [r0, #136]	; 0x88
   22fc4:	sub	sp, sp, #12
   22fc8:	sub	r3, r4, r3
   22fcc:	sub	r4, r1, #1
   22fd0:	strne	r3, [r7]
   22fd4:	add	r4, r4, r3
   22fd8:	mov	r5, r0
   22fdc:	rsb	r3, r1, #0
   22fe0:	add	r0, sp, #8
   22fe4:	cmp	r1, #4
   22fe8:	mov	ip, #0
   22fec:	and	r4, r4, r3
   22ff0:	movcc	r1, #4
   22ff4:	mov	r2, r4
   22ff8:	str	ip, [r0, #-4]!
   22ffc:	bl	12a38 <posix_memalign@plt>
   23000:	cmp	r0, #0
   23004:	beq	23034 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   23008:	ldr	r0, [sp, #4]
   2300c:	cmp	r0, #0
   23010:	beq	23018 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   23014:	bl	129a8 <free@plt>
   23018:	cmp	r7, #0
   2301c:	moveq	r6, r7
   23020:	movne	r6, #0
   23024:	strne	r6, [r7]
   23028:	mov	r0, r6
   2302c:	add	sp, sp, #12
   23030:	pop	{r4, r5, r6, r7, pc}
   23034:	ldr	r6, [sp, #4]
   23038:	cmp	r6, #0
   2303c:	beq	23018 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   23040:	ldr	r3, [r5, #184]	; 0xb8
   23044:	cmp	r3, #0
   23048:	beq	23068 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   2304c:	mov	r2, r4
   23050:	add	r0, r5, #188	; 0xbc
   23054:	mov	r1, r6
   23058:	bl	235c4 <flatcc_emitter_copy_buffer@@Base>
   2305c:	cmp	r0, #0
   23060:	bne	23028 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   23064:	bl	13154 <__assert_fail@plt+0x6c8>
   23068:	mov	r0, r6
   2306c:	b	23014 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

00023070 <flatcc_builder_aligned_alloc@@Base>:
   23070:	push	{r4, lr}
   23074:	sub	sp, sp, #8
   23078:	add	r3, sp, #8
   2307c:	cmp	r0, #4
   23080:	mov	r4, #0
   23084:	mov	r2, r1
   23088:	str	r4, [r3, #-4]!
   2308c:	movcs	r1, r0
   23090:	movcc	r1, #4
   23094:	mov	r0, r3
   23098:	bl	12a38 <posix_memalign@plt>
   2309c:	cmp	r0, r4
   230a0:	ldr	r0, [sp, #4]
   230a4:	beq	230b8 <flatcc_builder_aligned_alloc@@Base+0x48>
   230a8:	cmp	r0, #0
   230ac:	beq	230b8 <flatcc_builder_aligned_alloc@@Base+0x48>
   230b0:	bl	129a8 <free@plt>
   230b4:	mov	r0, r4
   230b8:	add	sp, sp, #8
   230bc:	pop	{r4, pc}

000230c0 <flatcc_builder_aligned_free@@Base>:
   230c0:	b	129a8 <free@plt>

000230c4 <flatcc_builder_get_emit_context@@Base>:
   230c4:	ldr	r0, [r0, #36]	; 0x24
   230c8:	bx	lr

000230cc <flatcc_emitter_recycle_page@@Base>:
   230cc:	ldr	r3, [r0]
   230d0:	cmp	r3, r1
   230d4:	beq	2311c <flatcc_emitter_recycle_page@@Base+0x50>
   230d8:	ldr	r2, [r0, #4]
   230dc:	cmp	r1, r2
   230e0:	beq	2311c <flatcc_emitter_recycle_page@@Base+0x50>
   230e4:	ldr	ip, [r1, #2944]	; 0xb80
   230e8:	ldr	r2, [r1, #2948]	; 0xb84
   230ec:	push	{lr}		; (str lr, [sp, #-4]!)
   230f0:	mov	r0, #0
   230f4:	str	r2, [ip, #2948]	; 0xb84
   230f8:	ldr	r2, [r3, #2948]	; 0xb84
   230fc:	ldr	lr, [r1, #2948]	; 0xb84
   23100:	str	ip, [lr, #2944]	; 0xb80
   23104:	str	r3, [r1, #2944]	; 0xb80
   23108:	str	r2, [r1, #2948]	; 0xb84
   2310c:	str	r1, [r2, #2944]	; 0xb80
   23110:	ldr	r3, [r1, #2944]	; 0xb80
   23114:	str	r1, [r3, #2948]	; 0xb84
   23118:	pop	{pc}		; (ldr pc, [sp], #4)
   2311c:	mvn	r0, #0
   23120:	bx	lr

00023124 <flatcc_emitter_reset@@Base>:
   23124:	ldr	r2, [r0]
   23128:	cmp	r2, #0
   2312c:	bxeq	lr
   23130:	ldr	r3, [r0, #32]
   23134:	mov	r1, #1472	; 0x5c0
   23138:	push	{r4, lr}
   2313c:	cmp	r3, #0
   23140:	str	r1, [r0, #12]
   23144:	str	r1, [r0, #20]
   23148:	ldr	r1, [r0, #24]
   2314c:	add	ip, r2, #1472	; 0x5c0
   23150:	moveq	r3, r1
   23154:	stmib	r0, {r2, ip}
   23158:	str	ip, [r0, #16]
   2315c:	add	ip, r3, r3, lsl #1
   23160:	lsr	r3, r1, #2
   23164:	add	r3, r3, ip, lsr #2
   23168:	ldr	ip, [r0, #28]
   2316c:	ldr	lr, [pc, #104]	; 231dc <flatcc_emitter_reset@@Base+0xb8>
   23170:	cmp	ip, r3, lsl #1
   23174:	mov	r1, #0
   23178:	str	lr, [r2, #2952]	; 0xb88
   2317c:	str	r3, [r0, #32]
   23180:	str	r1, [r0, #24]
   23184:	popls	{r4, pc}
   23188:	ldr	r3, [r2, #2944]	; 0xb80
   2318c:	mov	r4, r0
   23190:	cmp	r2, r3
   23194:	popeq	{r4, pc}
   23198:	ldr	r1, [r3, #2944]	; 0xb80
   2319c:	mov	r0, r3
   231a0:	str	r1, [r2, #2944]	; 0xb80
   231a4:	ldr	r3, [r3, #2944]	; 0xb80
   231a8:	str	r2, [r3, #2948]	; 0xb84
   231ac:	bl	129a8 <free@plt>
   231b0:	ldr	r3, [r4, #28]
   231b4:	ldr	r2, [r4, #32]
   231b8:	sub	r3, r3, #2944	; 0xb80
   231bc:	str	r3, [r4, #28]
   231c0:	cmp	r3, r2, lsl #1
   231c4:	popls	{r4, pc}
   231c8:	ldm	r4, {r1, r2}
   231cc:	ldr	r3, [r2, #2944]	; 0xb80
   231d0:	cmp	r3, r1
   231d4:	bne	23198 <flatcc_emitter_reset@@Base+0x74>
   231d8:	pop	{r4, pc}
   231dc:			; <UNDEFINED> instruction: 0xfffffa40

000231e0 <flatcc_emitter_clear@@Base>:
   231e0:	ldr	r3, [r0]
   231e4:	cmp	r3, #0
   231e8:	bxeq	lr
   231ec:	ldr	r2, [r3, #2948]	; 0xb84
   231f0:	mov	r1, #0
   231f4:	push	{r4, r5, r6, lr}
   231f8:	mov	r5, r0
   231fc:	str	r1, [r2, #2944]	; 0xb80
   23200:	ldr	r4, [r3, #2944]	; 0xb80
   23204:	cmp	r4, r1
   23208:	bne	23214 <flatcc_emitter_clear@@Base+0x34>
   2320c:	b	23244 <flatcc_emitter_clear@@Base+0x64>
   23210:	mov	r4, r3
   23214:	ldr	r0, [r4, #2948]	; 0xb84
   23218:	bl	129a8 <free@plt>
   2321c:	ldr	r3, [r4, #2944]	; 0xb80
   23220:	cmp	r3, #0
   23224:	bne	23210 <flatcc_emitter_clear@@Base+0x30>
   23228:	mov	r0, r4
   2322c:	bl	129a8 <free@plt>
   23230:	mov	r0, r5
   23234:	mov	r2, #36	; 0x24
   23238:	mov	r1, #0
   2323c:	pop	{r4, r5, r6, lr}
   23240:	b	12a44 <memset@plt>
   23244:	mov	r4, r3
   23248:	b	23228 <flatcc_emitter_clear@@Base+0x48>

0002324c <flatcc_emitter@@Base>:
   2324c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23250:	sub	sp, sp, #12
   23254:	mov	r5, r0
   23258:	ldr	ip, [sp, #48]	; 0x30
   2325c:	ldr	r0, [r0, #24]
   23260:	cmp	r3, #0
   23264:	add	r0, r0, ip
   23268:	str	r0, [r5, #24]
   2326c:	blt	23434 <flatcc_emitter@@Base+0x1e8>
   23270:	ldr	r0, [r5, #20]
   23274:	cmp	ip, r0
   23278:	bls	23308 <flatcc_emitter@@Base+0xbc>
   2327c:	cmp	r2, #0
   23280:	addne	r7, r1, #8
   23284:	movne	r8, r2
   23288:	movne	r9, #2944	; 0xb80
   2328c:	beq	232fc <flatcc_emitter@@Base+0xb0>
   23290:	ldr	r6, [r7, #-4]
   23294:	ldr	sl, [r7, #-8]
   23298:	cmp	r6, #0
   2329c:	movne	r4, r0
   232a0:	beq	232f0 <flatcc_emitter@@Base+0xa4>
   232a4:	cmp	r6, r4
   232a8:	bls	23350 <flatcc_emitter@@Base+0x104>
   232ac:	cmp	r4, #0
   232b0:	beq	2335c <flatcc_emitter@@Base+0x110>
   232b4:	sub	r6, r6, r4
   232b8:	mov	r2, r4
   232bc:	mov	r1, sl
   232c0:	ldr	r0, [r5, #16]
   232c4:	bl	129b4 <memcpy@plt>
   232c8:	ldr	r0, [r5, #20]
   232cc:	ldr	r3, [r5, #16]
   232d0:	add	sl, sl, r4
   232d4:	add	r3, r3, r4
   232d8:	cmp	r6, #0
   232dc:	sub	r4, r0, r4
   232e0:	str	r3, [r5, #16]
   232e4:	str	r4, [r5, #20]
   232e8:	mov	r0, r4
   232ec:	bne	232a4 <flatcc_emitter@@Base+0x58>
   232f0:	subs	r8, r8, #1
   232f4:	add	r7, r7, #8
   232f8:	bne	23290 <flatcc_emitter@@Base+0x44>
   232fc:	mov	r0, #0
   23300:	add	sp, sp, #12
   23304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23308:	ldr	r3, [r5, #16]
   2330c:	sub	r0, r0, ip
   23310:	add	ip, r3, ip
   23314:	str	r0, [r5, #20]
   23318:	str	ip, [r5, #16]
   2331c:	cmp	r2, #0
   23320:	addne	r4, r1, #8
   23324:	movne	r7, r2
   23328:	beq	232fc <flatcc_emitter@@Base+0xb0>
   2332c:	ldmdb	r4, {r1, r2}
   23330:	mov	r0, r3
   23334:	bl	129b4 <memcpy@plt>
   23338:	ldr	r2, [r4, #-4]
   2333c:	subs	r7, r7, #1
   23340:	add	r4, r4, #8
   23344:	add	r3, r0, r2
   23348:	bne	2332c <flatcc_emitter@@Base+0xe0>
   2334c:	b	232fc <flatcc_emitter@@Base+0xb0>
   23350:	mov	r4, r6
   23354:	mov	r6, #0
   23358:	b	232b8 <flatcc_emitter@@Base+0x6c>
   2335c:	ldr	r4, [r5, #4]
   23360:	cmp	r4, #0
   23364:	beq	233d4 <flatcc_emitter@@Base+0x188>
   23368:	ldr	fp, [r4, #2944]	; 0xb80
   2336c:	ldr	r3, [r5]
   23370:	cmp	fp, r3
   23374:	beq	2339c <flatcc_emitter@@Base+0x150>
   23378:	str	fp, [r5, #4]
   2337c:	ldr	r3, [fp, #2948]	; 0xb84
   23380:	mov	r4, #2944	; 0xb80
   23384:	str	fp, [r5, #16]
   23388:	ldr	r3, [r3, #2952]	; 0xb88
   2338c:	str	r9, [r5, #20]
   23390:	add	r3, r3, r4
   23394:	str	r3, [fp, #2952]	; 0xb88
   23398:	b	232a4 <flatcc_emitter@@Base+0x58>
   2339c:	ldr	r0, [pc, #540]	; 235c0 <flatcc_emitter@@Base+0x374>
   233a0:	bl	129fc <malloc@plt>
   233a4:	cmp	r0, #0
   233a8:	beq	233e4 <flatcc_emitter@@Base+0x198>
   233ac:	ldr	r3, [r5, #28]
   233b0:	str	fp, [r0, #2944]	; 0xb80
   233b4:	add	r3, r3, #2944	; 0xb80
   233b8:	str	r4, [r0, #2948]	; 0xb84
   233bc:	str	r3, [r5, #28]
   233c0:	str	r0, [fp, #2948]	; 0xb84
   233c4:	str	r0, [r4, #2944]	; 0xb80
   233c8:	mov	fp, r0
   233cc:	str	r0, [r5, #4]
   233d0:	b	2337c <flatcc_emitter@@Base+0x130>
   233d4:	ldr	r0, [pc, #484]	; 235c0 <flatcc_emitter@@Base+0x374>
   233d8:	bl	129fc <malloc@plt>
   233dc:	cmp	r0, #0
   233e0:	bne	233f0 <flatcc_emitter@@Base+0x1a4>
   233e4:	mvn	r0, #0
   233e8:	add	sp, sp, #12
   233ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233f0:	mov	r2, #1472	; 0x5c0
   233f4:	ldr	r3, [r5, #28]
   233f8:	str	r2, [r5, #12]
   233fc:	str	r2, [r5, #20]
   23400:	sub	r2, r2, #2944	; 0xb80
   23404:	str	r2, [r0, #2952]	; 0xb88
   23408:	str	r0, [r5]
   2340c:	add	r3, r3, #2944	; 0xb80
   23410:	str	r0, [r5, #4]
   23414:	str	r0, [r0, #2944]	; 0xb80
   23418:	str	r0, [r0, #2948]	; 0xb84
   2341c:	add	r0, r0, #1472	; 0x5c0
   23420:	str	r0, [r5, #8]
   23424:	str	r0, [r5, #16]
   23428:	str	r3, [r5, #28]
   2342c:	mov	r4, #1472	; 0x5c0
   23430:	b	232a4 <flatcc_emitter@@Base+0x58>
   23434:	ldr	r0, [r5, #12]
   23438:	cmp	ip, r0
   2343c:	bls	234bc <flatcc_emitter@@Base+0x270>
   23440:	add	r6, r1, r2, lsl #3
   23444:	mov	r7, r2
   23448:	mov	r9, #2944	; 0xb80
   2344c:	mov	r8, #0
   23450:	cmp	r7, #0
   23454:	beq	232fc <flatcc_emitter@@Base+0xb0>
   23458:	ldr	r4, [r6, #-4]
   2345c:	ldr	sl, [r6, #-8]
   23460:	cmp	r4, #0
   23464:	add	sl, sl, r4
   23468:	beq	234b0 <flatcc_emitter@@Base+0x264>
   2346c:	ldr	r2, [r5, #12]
   23470:	cmp	r2, r4
   23474:	bcs	234d4 <flatcc_emitter@@Base+0x288>
   23478:	cmp	r2, #0
   2347c:	beq	234e4 <flatcc_emitter@@Base+0x298>
   23480:	sub	r4, r4, r2
   23484:	mov	r1, r8
   23488:	ldr	r0, [r5, #8]
   2348c:	rsb	r3, r2, #0
   23490:	add	r0, r0, r3
   23494:	add	sl, sl, r3
   23498:	str	r1, [r5, #12]
   2349c:	str	r0, [r5, #8]
   234a0:	mov	r1, sl
   234a4:	bl	129b4 <memcpy@plt>
   234a8:	cmp	r4, #0
   234ac:	bne	2346c <flatcc_emitter@@Base+0x220>
   234b0:	sub	r6, r6, #8
   234b4:	sub	r7, r7, #1
   234b8:	b	23450 <flatcc_emitter@@Base+0x204>
   234bc:	ldr	r3, [r5, #8]
   234c0:	sub	r0, r0, ip
   234c4:	sub	r3, r3, ip
   234c8:	str	r0, [r5, #12]
   234cc:	str	r3, [r5, #8]
   234d0:	b	2331c <flatcc_emitter@@Base+0xd0>
   234d4:	sub	r1, r2, r4
   234d8:	mov	r2, r4
   234dc:	mov	r4, #0
   234e0:	b	23488 <flatcc_emitter@@Base+0x23c>
   234e4:	ldr	r3, [r5]
   234e8:	cmp	r3, #0
   234ec:	beq	23570 <flatcc_emitter@@Base+0x324>
   234f0:	ldr	fp, [r3, #2948]	; 0xb84
   234f4:	ldr	r2, [r5, #4]
   234f8:	cmp	fp, r2
   234fc:	beq	23530 <flatcc_emitter@@Base+0x2e4>
   23500:	ldr	r3, [r3, #2952]	; 0xb88
   23504:	sub	r3, r3, #2944	; 0xb80
   23508:	str	r3, [fp, #2952]	; 0xb88
   2350c:	str	fp, [r5]
   23510:	ldr	r3, [fp, #2944]	; 0xb80
   23514:	add	r2, fp, #2944	; 0xb80
   23518:	str	r9, [r5, #12]
   2351c:	ldr	r3, [r3, #2952]	; 0xb88
   23520:	str	r2, [r5, #8]
   23524:	sub	r3, r3, #2944	; 0xb80
   23528:	str	r3, [fp, #2952]	; 0xb88
   2352c:	b	2346c <flatcc_emitter@@Base+0x220>
   23530:	ldr	r0, [pc, #136]	; 235c0 <flatcc_emitter@@Base+0x374>
   23534:	str	r3, [sp, #4]
   23538:	bl	129fc <malloc@plt>
   2353c:	ldr	r3, [sp, #4]
   23540:	cmp	r0, #0
   23544:	beq	233e4 <flatcc_emitter@@Base+0x198>
   23548:	ldr	r2, [r5, #28]
   2354c:	str	fp, [r0, #2948]	; 0xb84
   23550:	add	r2, r2, #2944	; 0xb80
   23554:	str	r3, [r0, #2944]	; 0xb80
   23558:	str	r2, [r5, #28]
   2355c:	str	r0, [r3, #2948]	; 0xb84
   23560:	str	r0, [fp, #2944]	; 0xb80
   23564:	str	r0, [r5]
   23568:	mov	fp, r0
   2356c:	b	23510 <flatcc_emitter@@Base+0x2c4>
   23570:	ldr	r0, [pc, #72]	; 235c0 <flatcc_emitter@@Base+0x374>
   23574:	bl	129fc <malloc@plt>
   23578:	cmp	r0, #0
   2357c:	beq	233e4 <flatcc_emitter@@Base+0x198>
   23580:	mov	r2, #1472	; 0x5c0
   23584:	ldr	r3, [r5, #28]
   23588:	str	r2, [r5, #12]
   2358c:	str	r2, [r5, #20]
   23590:	sub	r2, r2, #2944	; 0xb80
   23594:	str	r2, [r0, #2952]	; 0xb88
   23598:	str	r0, [r5]
   2359c:	add	r3, r3, #2944	; 0xb80
   235a0:	str	r0, [r5, #4]
   235a4:	str	r0, [r0, #2944]	; 0xb80
   235a8:	str	r0, [r0, #2948]	; 0xb84
   235ac:	add	r0, r0, #1472	; 0x5c0
   235b0:	str	r0, [r5, #8]
   235b4:	str	r0, [r5, #16]
   235b8:	str	r3, [r5, #28]
   235bc:	b	2346c <flatcc_emitter@@Base+0x220>
   235c0:	andeq	r0, r0, ip, lsl #23

000235c4 <flatcc_emitter_copy_buffer@@Base>:
   235c4:	ldr	ip, [r0, #24]
   235c8:	cmp	ip, r2
   235cc:	bhi	23668 <flatcc_emitter_copy_buffer@@Base+0xa4>
   235d0:	ldr	r2, [r0]
   235d4:	cmp	r2, #0
   235d8:	beq	23668 <flatcc_emitter_copy_buffer@@Base+0xa4>
   235dc:	mov	r3, r1
   235e0:	ldr	r1, [r0, #4]
   235e4:	push	{r4, r5, r6, lr}
   235e8:	cmp	r2, r1
   235ec:	mov	r5, r0
   235f0:	beq	23674 <flatcc_emitter_copy_buffer@@Base+0xb0>
   235f4:	ldr	r4, [r0, #12]
   235f8:	ldr	r1, [r5, #8]
   235fc:	rsb	r4, r4, #2944	; 0xb80
   23600:	mov	r2, r4
   23604:	mov	r0, r3
   23608:	bl	129b4 <memcpy@plt>
   2360c:	ldr	r2, [r5]
   23610:	ldr	r1, [r5, #4]
   23614:	add	r3, r0, r4
   23618:	ldr	r4, [r2, #2944]	; 0xb80
   2361c:	cmp	r4, r1
   23620:	beq	2364c <flatcc_emitter_copy_buffer@@Base+0x88>
   23624:	mov	r6, #2944	; 0xb80
   23628:	mov	r1, r4
   2362c:	mov	r0, r3
   23630:	mov	r2, r6
   23634:	bl	129b4 <memcpy@plt>
   23638:	ldr	r4, [r4, #2944]	; 0xb80
   2363c:	ldr	r1, [r5, #4]
   23640:	cmp	r1, r4
   23644:	add	r3, r0, #2944	; 0xb80
   23648:	bne	23628 <flatcc_emitter_copy_buffer@@Base+0x64>
   2364c:	ldr	r2, [r5, #20]
   23650:	mov	r0, r3
   23654:	rsb	r2, r2, #2944	; 0xb80
   23658:	bl	129b4 <memcpy@plt>
   2365c:	mov	r3, r0
   23660:	mov	r0, r3
   23664:	pop	{r4, r5, r6, pc}
   23668:	mov	r3, #0
   2366c:	mov	r0, r3
   23670:	bx	lr
   23674:	ldr	r1, [r0, #8]
   23678:	mov	r2, ip
   2367c:	mov	r0, r3
   23680:	bl	129b4 <memcpy@plt>
   23684:	mov	r3, r0
   23688:	b	23660 <flatcc_emitter_copy_buffer@@Base+0x9c>

0002368c <flatcc_verify_error_string@@Base>:
   2368c:	cmp	r0, #36	; 0x24
   23690:	ldrls	r3, [pc, #8]	; 236a0 <flatcc_verify_error_string@@Base+0x14>
   23694:	ldrls	r0, [r3, r0, lsl #2]
   23698:	ldrhi	r0, [pc, #4]	; 236a4 <flatcc_verify_error_string@@Base+0x18>
   2369c:	bx	lr
   236a0:	ldrdeq	r8, [r2], -ip
   236a4:	andeq	r8, r2, r0, ror lr

000236a8 <flatcc_verify_field@@Base>:
   236a8:	add	r1, r1, #2
   236ac:	ldrh	ip, [r0, #22]
   236b0:	lsl	r1, r1, #1
   236b4:	uxth	r1, r1
   236b8:	cmp	ip, r1
   236bc:	bls	236f0 <flatcc_verify_field@@Base+0x48>
   236c0:	ldr	ip, [r0, #12]
   236c4:	ldrh	r1, [ip, r1]
   236c8:	cmp	r1, #0
   236cc:	beq	236f0 <flatcc_verify_field@@Base+0x48>
   236d0:	push	{lr}		; (str lr, [sp, #-4]!)
   236d4:	add	r2, r2, r1
   236d8:	ldrh	lr, [r0, #20]
   236dc:	ldr	ip, [r0]
   236e0:	cmp	r2, lr
   236e4:	bls	236f8 <flatcc_verify_field@@Base+0x50>
   236e8:	mov	r0, #13
   236ec:	pop	{pc}		; (ldr pc, [sp], #4)
   236f0:	mov	r0, #0
   236f4:	bx	lr
   236f8:	ldr	r0, [r0, #16]
   236fc:	sub	r3, r3, #1
   23700:	add	r0, ip, r0
   23704:	add	r0, r0, r1
   23708:	tst	r0, r3
   2370c:	moveq	r0, #0
   23710:	movne	r0, #12
   23714:	pop	{pc}		; (ldr pc, [sp], #4)

00023718 <flatcc_verify_string_field@@Base>:
   23718:	add	r1, r1, #2
   2371c:	ldrh	r3, [r0, #22]
   23720:	lsl	r1, r1, #1
   23724:	uxth	r1, r1
   23728:	cmp	r3, r1
   2372c:	bls	23758 <flatcc_verify_string_field@@Base+0x40>
   23730:	ldr	r3, [r0, #12]
   23734:	ldrh	r3, [r3, r1]
   23738:	cmp	r3, #0
   2373c:	beq	23758 <flatcc_verify_string_field@@Base+0x40>
   23740:	ldrh	r2, [r0, #20]
   23744:	add	r1, r3, #4
   23748:	cmp	r1, r2
   2374c:	bls	23768 <flatcc_verify_string_field@@Base+0x50>
   23750:	mov	r0, #13
   23754:	bx	lr
   23758:	cmp	r2, #0
   2375c:	movne	r0, #4
   23760:	moveq	r0, #0
   23764:	bx	lr
   23768:	ldr	r2, [r0, #16]
   2376c:	add	r2, r3, r2
   23770:	tst	r2, #3
   23774:	beq	23780 <flatcc_verify_string_field@@Base+0x68>
   23778:	mov	r0, #12
   2377c:	bx	lr
   23780:	cmp	r2, #0
   23784:	beq	237d8 <flatcc_verify_string_field@@Base+0xc0>
   23788:	ldr	r1, [r0]
   2378c:	ldr	r3, [r1, r2]
   23790:	add	r3, r2, r3
   23794:	cmp	r2, r3
   23798:	bcs	237d0 <flatcc_verify_string_field@@Base+0xb8>
   2379c:	ldr	r2, [r0, #4]
   237a0:	add	r0, r3, #4
   237a4:	cmp	r2, r0
   237a8:	bcc	237d0 <flatcc_verify_string_field@@Base+0xb8>
   237ac:	tst	r3, #3
   237b0:	bne	237d0 <flatcc_verify_string_field@@Base+0xb8>
   237b4:	ldr	r3, [r1, r3]
   237b8:	sub	r2, r2, r0
   237bc:	add	ip, r3, #1
   237c0:	cmp	r2, ip
   237c4:	bcs	237e0 <flatcc_verify_string_field@@Base+0xc8>
   237c8:	mov	r0, #8
   237cc:	bx	lr
   237d0:	mov	r0, #17
   237d4:	bx	lr
   237d8:	mov	r0, r2
   237dc:	bx	lr
   237e0:	add	r1, r1, r0
   237e4:	ldrb	r0, [r1, r3]
   237e8:	cmp	r0, #0
   237ec:	movne	r0, #7
   237f0:	moveq	r0, #0
   237f4:	bx	lr

000237f8 <flatcc_verify_vector_field@@Base>:
   237f8:	add	r1, r1, #2
   237fc:	ldrh	ip, [r0, #22]
   23800:	lsl	r1, r1, #1
   23804:	push	{lr}		; (str lr, [sp, #-4]!)
   23808:	uxth	r1, r1
   2380c:	cmp	ip, r1
   23810:	ldrh	ip, [sp, #4]
   23814:	bls	23840 <flatcc_verify_vector_field@@Base+0x48>
   23818:	ldr	lr, [r0, #12]
   2381c:	ldrh	r1, [lr, r1]
   23820:	cmp	r1, #0
   23824:	beq	23840 <flatcc_verify_vector_field@@Base+0x48>
   23828:	ldrh	r2, [r0, #20]
   2382c:	add	lr, r1, #4
   23830:	cmp	lr, r2
   23834:	bls	23850 <flatcc_verify_vector_field@@Base+0x58>
   23838:	mov	r0, #13
   2383c:	pop	{pc}		; (ldr pc, [sp], #4)
   23840:	cmp	r2, #0
   23844:	movne	r0, #4
   23848:	moveq	r0, #0
   2384c:	pop	{pc}		; (ldr pc, [sp], #4)
   23850:	ldr	r2, [r0, #16]
   23854:	add	r2, r1, r2
   23858:	tst	r2, #3
   2385c:	beq	23868 <flatcc_verify_vector_field@@Base+0x70>
   23860:	mov	r0, #12
   23864:	pop	{pc}		; (ldr pc, [sp], #4)
   23868:	cmp	r2, #0
   2386c:	beq	238cc <flatcc_verify_vector_field@@Base+0xd4>
   23870:	ldr	lr, [r0]
   23874:	ldr	r1, [lr, r2]
   23878:	add	r1, r2, r1
   2387c:	cmp	r1, r2
   23880:	bls	238c4 <flatcc_verify_vector_field@@Base+0xcc>
   23884:	ldr	r2, [r0, #4]
   23888:	add	r0, r1, #4
   2388c:	cmp	r2, r0
   23890:	bcc	238c4 <flatcc_verify_vector_field@@Base+0xcc>
   23894:	cmp	ip, #4
   23898:	movcc	ip, #4
   2389c:	sub	ip, ip, #1
   238a0:	orr	ip, ip, #3
   238a4:	tst	ip, r0
   238a8:	bne	238c4 <flatcc_verify_vector_field@@Base+0xcc>
   238ac:	ldr	r1, [lr, r1]
   238b0:	ldr	ip, [sp, #8]
   238b4:	cmp	ip, r1
   238b8:	bcs	238d4 <flatcc_verify_vector_field@@Base+0xdc>
   238bc:	mov	r0, #25
   238c0:	pop	{pc}		; (ldr pc, [sp], #4)
   238c4:	mov	r0, #16
   238c8:	pop	{pc}		; (ldr pc, [sp], #4)
   238cc:	mov	r0, r2
   238d0:	pop	{pc}		; (ldr pc, [sp], #4)
   238d4:	mul	r3, r1, r3
   238d8:	sub	r2, r2, r0
   238dc:	cmp	r2, r3
   238e0:	movcc	r0, #26
   238e4:	movcs	r0, #0
   238e8:	pop	{pc}		; (ldr pc, [sp], #4)

000238ec <flatcc_verify_string_vector_field@@Base>:
   238ec:	add	r1, r1, #2
   238f0:	ldrh	r3, [r0, #22]
   238f4:	lsl	r1, r1, #1
   238f8:	uxth	r1, r1
   238fc:	cmp	r3, r1
   23900:	bls	2392c <flatcc_verify_string_vector_field@@Base+0x40>
   23904:	ldr	r3, [r0, #12]
   23908:	ldrh	r3, [r3, r1]
   2390c:	cmp	r3, #0
   23910:	beq	2392c <flatcc_verify_string_vector_field@@Base+0x40>
   23914:	ldrh	r2, [r0, #20]
   23918:	add	r1, r3, #4
   2391c:	cmp	r1, r2
   23920:	bls	2393c <flatcc_verify_string_vector_field@@Base+0x50>
   23924:	mov	r0, #13
   23928:	bx	lr
   2392c:	cmp	r2, #0
   23930:	movne	r0, #4
   23934:	moveq	r0, #0
   23938:	bx	lr
   2393c:	ldr	r2, [r0, #16]
   23940:	add	r2, r3, r2
   23944:	tst	r2, #3
   23948:	beq	23954 <flatcc_verify_string_vector_field@@Base+0x68>
   2394c:	mov	r0, #12
   23950:	bx	lr
   23954:	cmp	r2, #0
   23958:	beq	23a18 <flatcc_verify_string_vector_field@@Base+0x12c>
   2395c:	push	{r4, r5, r6, lr}
   23960:	ldr	lr, [r0]
   23964:	ldr	r1, [lr, r2]
   23968:	add	r1, r2, r1
   2396c:	cmp	r2, r1
   23970:	bcs	239ac <flatcc_verify_string_vector_field@@Base+0xc0>
   23974:	ldr	r5, [r0, #4]
   23978:	add	r3, r1, #4
   2397c:	cmp	r5, r3
   23980:	bcc	239ac <flatcc_verify_string_vector_field@@Base+0xc0>
   23984:	tst	r3, #3
   23988:	bne	239ac <flatcc_verify_string_vector_field@@Base+0xc0>
   2398c:	ldr	r0, [lr, r1]
   23990:	cmn	r0, #-1073741823	; 0xc0000001
   23994:	bls	239b4 <flatcc_verify_string_vector_field@@Base+0xc8>
   23998:	ldr	r2, [lr, r1]
   2399c:	cmn	r2, #-1073741823	; 0xc0000001
   239a0:	bls	23a20 <flatcc_verify_string_vector_field@@Base+0x134>
   239a4:	mov	r0, #25
   239a8:	pop	{r4, r5, r6, pc}
   239ac:	mov	r0, #16
   239b0:	pop	{r4, r5, r6, pc}
   239b4:	lsl	r4, r0, #2
   239b8:	sub	r2, r5, r3
   239bc:	cmp	r2, r4
   239c0:	bcc	23998 <flatcc_verify_string_vector_field@@Base+0xac>
   239c4:	cmp	r0, #0
   239c8:	popeq	{r4, r5, r6, pc}
   239cc:	ldr	r2, [lr, r3]
   239d0:	add	ip, lr, r3
   239d4:	add	r2, r3, r2
   239d8:	cmp	r3, r2
   239dc:	bcs	23a10 <flatcc_verify_string_vector_field@@Base+0x124>
   239e0:	add	r1, r2, #4
   239e4:	cmp	r5, r1
   239e8:	bcc	23a10 <flatcc_verify_string_vector_field@@Base+0x124>
   239ec:	tst	r2, #3
   239f0:	bne	23a10 <flatcc_verify_string_vector_field@@Base+0x124>
   239f4:	ldr	r2, [lr, r2]
   239f8:	sub	r0, r5, r1
   239fc:	add	r6, r2, #1
   23a00:	cmp	r6, r0
   23a04:	bls	23a34 <flatcc_verify_string_vector_field@@Base+0x148>
   23a08:	mov	r0, #8
   23a0c:	pop	{r4, r5, r6, pc}
   23a10:	mov	r0, #17
   23a14:	pop	{r4, r5, r6, pc}
   23a18:	mov	r0, r2
   23a1c:	bx	lr
   23a20:	sub	r3, r5, r3
   23a24:	cmp	r3, r2, lsl #2
   23a28:	movcs	r0, #0
   23a2c:	movcc	r0, #26
   23a30:	pop	{r4, r5, r6, pc}
   23a34:	add	r4, r3, r4
   23a38:	add	r1, lr, r1
   23a3c:	ldrb	r0, [r1, r2]
   23a40:	cmp	r0, #0
   23a44:	beq	23a50 <flatcc_verify_string_vector_field@@Base+0x164>
   23a48:	mov	r0, #7
   23a4c:	pop	{r4, r5, r6, pc}
   23a50:	add	r3, r3, #4
   23a54:	cmp	r4, r3
   23a58:	beq	23a9c <flatcc_verify_string_vector_field@@Base+0x1b0>
   23a5c:	ldr	r2, [ip, #4]!
   23a60:	add	r2, r3, r2
   23a64:	cmp	r3, r2
   23a68:	add	r1, r2, #4
   23a6c:	bcs	23a10 <flatcc_verify_string_vector_field@@Base+0x124>
   23a70:	cmp	r5, r1
   23a74:	bcc	23a10 <flatcc_verify_string_vector_field@@Base+0x124>
   23a78:	tst	r2, #3
   23a7c:	sub	r6, r5, r1
   23a80:	bne	23a10 <flatcc_verify_string_vector_field@@Base+0x124>
   23a84:	ldr	r2, [lr, r2]
   23a88:	add	r0, r2, #1
   23a8c:	cmp	r6, r0
   23a90:	bcs	23a38 <flatcc_verify_string_vector_field@@Base+0x14c>
   23a94:	mov	r0, #8
   23a98:	pop	{r4, r5, r6, pc}
   23a9c:	pop	{r4, r5, r6, pc}

00023aa0 <flatcc_verify_table_field@@Base>:
   23aa0:	add	r1, r1, #2
   23aa4:	ldrh	ip, [r0, #22]
   23aa8:	lsl	r1, r1, #1
   23aac:	uxth	r1, r1
   23ab0:	cmp	ip, r1
   23ab4:	bls	23ae0 <flatcc_verify_table_field@@Base+0x40>
   23ab8:	ldr	ip, [r0, #12]
   23abc:	ldrh	r1, [ip, r1]
   23ac0:	cmp	r1, #0
   23ac4:	beq	23ae0 <flatcc_verify_table_field@@Base+0x40>
   23ac8:	ldrh	r2, [r0, #20]
   23acc:	add	ip, r1, #4
   23ad0:	cmp	ip, r2
   23ad4:	bls	23af0 <flatcc_verify_table_field@@Base+0x50>
   23ad8:	mov	r0, #13
   23adc:	bx	lr
   23ae0:	cmp	r2, #0
   23ae4:	movne	r0, #4
   23ae8:	moveq	r0, #0
   23aec:	bx	lr
   23af0:	ldr	r2, [r0, #16]
   23af4:	add	r2, r1, r2
   23af8:	tst	r2, #3
   23afc:	beq	23b08 <flatcc_verify_table_field@@Base+0x68>
   23b00:	mov	r0, #12
   23b04:	bx	lr
   23b08:	cmp	r2, #0
   23b0c:	beq	23b44 <flatcc_verify_table_field@@Base+0xa4>
   23b10:	ldr	r1, [r0, #8]
   23b14:	ldr	ip, [r0]
   23b18:	push	{r4, r5, lr}
   23b1c:	sub	r1, r1, #1
   23b20:	sub	sp, sp, #28
   23b24:	cmp	r1, #0
   23b28:	ldr	lr, [r0, #4]
   23b2c:	ldr	r0, [ip, r2]
   23b30:	str	r1, [sp, #8]
   23b34:	moveq	r0, #3
   23b38:	bne	23b4c <flatcc_verify_table_field@@Base+0xac>
   23b3c:	add	sp, sp, #28
   23b40:	pop	{r4, r5, pc}
   23b44:	mov	r0, r2
   23b48:	bx	lr
   23b4c:	add	r1, r0, r2
   23b50:	cmp	r2, r1
   23b54:	bcs	23bec <flatcc_verify_table_field@@Base+0x14c>
   23b58:	add	r2, r1, #4
   23b5c:	cmp	lr, r2
   23b60:	bcc	23bec <flatcc_verify_table_field@@Base+0x14c>
   23b64:	tst	r1, #3
   23b68:	bne	23bec <flatcc_verify_table_field@@Base+0x14c>
   23b6c:	str	r1, [sp, #16]
   23b70:	ldr	r2, [ip, r1]
   23b74:	subs	r2, r1, r2
   23b78:	bmi	23bf4 <flatcc_verify_table_field@@Base+0x154>
   23b7c:	tst	r2, #1
   23b80:	bne	23bf4 <flatcc_verify_table_field@@Base+0x154>
   23b84:	add	r0, r2, #2
   23b88:	cmp	lr, r0
   23b8c:	movcc	r0, #27
   23b90:	bcc	23b3c <flatcc_verify_table_field@@Base+0x9c>
   23b94:	ldrh	r4, [ip, r2]
   23b98:	add	r5, ip, r2
   23b9c:	add	r2, r4, r2
   23ba0:	cmp	lr, r2
   23ba4:	strh	r4, [sp, #22]
   23ba8:	bcc	23bfc <flatcc_verify_table_field@@Base+0x15c>
   23bac:	tst	r4, #1
   23bb0:	bne	23bfc <flatcc_verify_table_field@@Base+0x15c>
   23bb4:	cmp	r4, #3
   23bb8:	movls	r0, #28
   23bbc:	bls	23b3c <flatcc_verify_table_field@@Base+0x9c>
   23bc0:	ldrh	r2, [ip, r0]
   23bc4:	sub	r1, lr, r1
   23bc8:	cmp	r1, r2
   23bcc:	strh	r2, [sp, #20]
   23bd0:	movcc	r0, #20
   23bd4:	bcc	23b3c <flatcc_verify_table_field@@Base+0x9c>
   23bd8:	mov	r0, sp
   23bdc:	str	r5, [sp, #12]
   23be0:	stm	sp, {ip, lr}
   23be4:	blx	r3
   23be8:	b	23b3c <flatcc_verify_table_field@@Base+0x9c>
   23bec:	mov	r0, #15
   23bf0:	b	23b3c <flatcc_verify_table_field@@Base+0x9c>
   23bf4:	mov	r0, #29
   23bf8:	b	23b3c <flatcc_verify_table_field@@Base+0x9c>
   23bfc:	mov	r0, #30
   23c00:	b	23b3c <flatcc_verify_table_field@@Base+0x9c>

00023c04 <flatcc_verify_table_vector_field@@Base>:
   23c04:	add	r1, r1, #2
   23c08:	ldrh	ip, [r0, #22]
   23c0c:	lsl	r1, r1, #1
   23c10:	uxth	r1, r1
   23c14:	cmp	ip, r1
   23c18:	bls	23c44 <flatcc_verify_table_vector_field@@Base+0x40>
   23c1c:	ldr	ip, [r0, #12]
   23c20:	ldrh	r1, [ip, r1]
   23c24:	cmp	r1, #0
   23c28:	beq	23c44 <flatcc_verify_table_vector_field@@Base+0x40>
   23c2c:	ldrh	r2, [r0, #20]
   23c30:	add	ip, r1, #4
   23c34:	cmp	ip, r2
   23c38:	bls	23c5c <flatcc_verify_table_vector_field@@Base+0x58>
   23c3c:	mov	r0, #13
   23c40:	bx	lr
   23c44:	cmp	r2, #0
   23c48:	beq	23c54 <flatcc_verify_table_vector_field@@Base+0x50>
   23c4c:	mov	r0, #4
   23c50:	bx	lr
   23c54:	mov	r0, #0
   23c58:	bx	lr
   23c5c:	ldr	r2, [r0, #16]
   23c60:	add	r1, r1, r2
   23c64:	tst	r1, #3
   23c68:	beq	23c74 <flatcc_verify_table_vector_field@@Base+0x70>
   23c6c:	mov	r0, #12
   23c70:	bx	lr
   23c74:	cmp	r1, #0
   23c78:	beq	23c54 <flatcc_verify_table_vector_field@@Base+0x50>
   23c7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23c80:	sub	sp, sp, #32
   23c84:	ldr	r7, [r0, #8]
   23c88:	cmp	r7, #0
   23c8c:	ble	23d00 <flatcc_verify_table_vector_field@@Base+0xfc>
   23c90:	ldr	r8, [r0]
   23c94:	ldr	ip, [r8, r1]
   23c98:	add	ip, r1, ip
   23c9c:	cmp	r1, ip
   23ca0:	bcs	23cf4 <flatcc_verify_table_vector_field@@Base+0xf0>
   23ca4:	ldr	r9, [r0, #4]
   23ca8:	add	r4, ip, #4
   23cac:	cmp	r9, r4
   23cb0:	bcc	23cf4 <flatcc_verify_table_vector_field@@Base+0xf0>
   23cb4:	tst	r4, #3
   23cb8:	bne	23cf4 <flatcc_verify_table_vector_field@@Base+0xf0>
   23cbc:	ldr	r2, [r8, ip]
   23cc0:	cmn	r2, #-1073741823	; 0xc0000001
   23cc4:	bls	23d0c <flatcc_verify_table_vector_field@@Base+0x108>
   23cc8:	ldr	r3, [r8, ip]
   23ccc:	cmn	r3, #-1073741823	; 0xc0000001
   23cd0:	movhi	r0, #25
   23cd4:	bhi	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23cd8:	sub	r4, r9, r4
   23cdc:	cmp	r4, r3, lsl #2
   23ce0:	movcc	r0, #26
   23ce4:	bcc	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23ce8:	mov	r0, #0
   23cec:	add	sp, sp, #32
   23cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23cf4:	mov	r0, #16
   23cf8:	add	sp, sp, #32
   23cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23d00:	mov	r0, #3
   23d04:	add	sp, sp, #32
   23d08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23d0c:	lsl	r6, r2, #2
   23d10:	sub	r1, r9, r4
   23d14:	cmp	r1, r6
   23d18:	bcc	23cc8 <flatcc_verify_table_vector_field@@Base+0xc4>
   23d1c:	cmp	r2, #0
   23d20:	beq	23ce8 <flatcc_verify_table_vector_field@@Base+0xe4>
   23d24:	sub	r7, r7, #2
   23d28:	cmp	r7, #0
   23d2c:	ldr	r2, [r8, r4]
   23d30:	add	r1, r8, r4
   23d34:	str	r7, [sp, #16]
   23d38:	beq	23d00 <flatcc_verify_table_vector_field@@Base+0xfc>
   23d3c:	add	r2, r4, r2
   23d40:	cmp	r2, r4
   23d44:	bls	23ed0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23d48:	add	r0, r2, #4
   23d4c:	cmp	r9, r0
   23d50:	bcc	23ed0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23d54:	tst	r2, #3
   23d58:	bne	23ed0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23d5c:	add	ip, ip, #8
   23d60:	add	r5, r8, ip
   23d64:	mov	sl, r1
   23d68:	add	r6, r4, r6
   23d6c:	str	r2, [sp, #24]
   23d70:	ldr	r1, [r8, r2]
   23d74:	subs	r1, r2, r1
   23d78:	bmi	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23d7c:	tst	r1, #1
   23d80:	beq	23e30 <flatcc_verify_table_vector_field@@Base+0x22c>
   23d84:	ldr	r2, [sl]
   23d88:	str	r7, [sp, #16]
   23d8c:	add	r2, r4, r2
   23d90:	cmp	r2, r4
   23d94:	bls	23edc <flatcc_verify_table_vector_field@@Base+0x2d8>
   23d98:	add	r1, r2, #4
   23d9c:	cmp	r9, r1
   23da0:	bcc	23edc <flatcc_verify_table_vector_field@@Base+0x2d8>
   23da4:	tst	r2, #3
   23da8:	bne	23edc <flatcc_verify_table_vector_field@@Base+0x2d8>
   23dac:	str	r2, [sp, #24]
   23db0:	ldr	r1, [r8, r2]
   23db4:	subs	r1, r2, r1
   23db8:	bmi	23ee4 <flatcc_verify_table_vector_field@@Base+0x2e0>
   23dbc:	tst	r1, #1
   23dc0:	bne	23ee4 <flatcc_verify_table_vector_field@@Base+0x2e0>
   23dc4:	add	ip, r1, #2
   23dc8:	cmp	r9, ip
   23dcc:	movcc	r0, #27
   23dd0:	bcc	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23dd4:	ldrh	r0, [r8, r1]
   23dd8:	add	lr, r8, r1
   23ddc:	add	r1, r0, r1
   23de0:	cmp	r9, r1
   23de4:	strh	r0, [sp, #30]
   23de8:	bcc	23eec <flatcc_verify_table_vector_field@@Base+0x2e8>
   23dec:	tst	r0, #1
   23df0:	bne	23eec <flatcc_verify_table_vector_field@@Base+0x2e8>
   23df4:	cmp	r0, #3
   23df8:	movls	r0, #28
   23dfc:	bls	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23e00:	ldrh	r1, [r8, ip]
   23e04:	sub	r2, r9, r2
   23e08:	cmp	r2, r1
   23e0c:	strh	r1, [sp, #28]
   23e10:	movcc	r0, #20
   23e14:	bcc	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23e18:	add	r0, sp, #8
   23e1c:	str	lr, [sp, #20]
   23e20:	str	r8, [sp, #8]
   23e24:	str	r9, [sp, #12]
   23e28:	blx	r3
   23e2c:	b	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23e30:	add	r0, r1, #2
   23e34:	cmp	r9, r0
   23e38:	bcc	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23e3c:	ldrh	lr, [r8, r1]
   23e40:	add	ip, r8, r1
   23e44:	add	r1, lr, r1
   23e48:	cmp	r9, r1
   23e4c:	strh	lr, [sp, #30]
   23e50:	bcc	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23e54:	tst	lr, #1
   23e58:	bne	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23e5c:	cmp	lr, #3
   23e60:	bls	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23e64:	ldrh	r1, [r8, r0]
   23e68:	sub	r2, r9, r2
   23e6c:	cmp	r2, r1
   23e70:	strh	r1, [sp, #28]
   23e74:	bcc	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23e78:	add	r0, sp, #8
   23e7c:	stmib	sp, {r3, r8, r9}
   23e80:	str	ip, [sp, #20]
   23e84:	blx	r3
   23e88:	ldr	r3, [sp, #4]
   23e8c:	cmp	r0, #0
   23e90:	bne	23d84 <flatcc_verify_table_vector_field@@Base+0x180>
   23e94:	add	r4, r4, #4
   23e98:	cmp	r6, r4
   23e9c:	beq	23ce8 <flatcc_verify_table_vector_field@@Base+0xe4>
   23ea0:	mov	r1, r5
   23ea4:	ldr	r2, [r5], #4
   23ea8:	str	r7, [sp, #16]
   23eac:	add	r2, r2, r4
   23eb0:	cmp	r4, r2
   23eb4:	bcs	23ed0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23eb8:	add	r0, r2, #4
   23ebc:	cmp	r9, r0
   23ec0:	bcc	23ed0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23ec4:	tst	r2, #3
   23ec8:	add	sl, sl, #4
   23ecc:	beq	23d6c <flatcc_verify_table_vector_field@@Base+0x168>
   23ed0:	ldr	r2, [r1]
   23ed4:	str	r7, [sp, #16]
   23ed8:	b	23d8c <flatcc_verify_table_vector_field@@Base+0x188>
   23edc:	mov	r0, #15
   23ee0:	b	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23ee4:	mov	r0, #29
   23ee8:	b	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>
   23eec:	mov	r0, #30
   23ef0:	b	23cf8 <flatcc_verify_table_vector_field@@Base+0xf4>

00023ef4 <flatcc_verify_union_table@@Base>:
   23ef4:	ldr	r3, [r0, #8]
   23ef8:	push	{r4, r5, lr}
   23efc:	sub	r3, r3, #1
   23f00:	sub	sp, sp, #28
   23f04:	cmp	r3, #0
   23f08:	ldr	lr, [r0]
   23f0c:	str	r3, [sp, #8]
   23f10:	ldr	ip, [r0, #4]
   23f14:	ldr	r2, [r0, #16]
   23f18:	ldr	r3, [r0, #20]
   23f1c:	moveq	r0, #3
   23f20:	bne	23f2c <flatcc_verify_union_table@@Base+0x38>
   23f24:	add	sp, sp, #28
   23f28:	pop	{r4, r5, pc}
   23f2c:	add	r3, r2, r3
   23f30:	cmp	r2, r3
   23f34:	bcs	23fd0 <flatcc_verify_union_table@@Base+0xdc>
   23f38:	add	r2, r3, #4
   23f3c:	cmp	ip, r2
   23f40:	bcc	23fd0 <flatcc_verify_union_table@@Base+0xdc>
   23f44:	tst	r3, #3
   23f48:	bne	23fd0 <flatcc_verify_union_table@@Base+0xdc>
   23f4c:	str	r3, [sp, #16]
   23f50:	ldr	r2, [lr, r3]
   23f54:	subs	r2, r3, r2
   23f58:	bmi	23fdc <flatcc_verify_union_table@@Base+0xe8>
   23f5c:	tst	r2, #1
   23f60:	bne	23fdc <flatcc_verify_union_table@@Base+0xe8>
   23f64:	add	r0, r2, #2
   23f68:	cmp	ip, r0
   23f6c:	movcc	r0, #27
   23f70:	bcc	23f24 <flatcc_verify_union_table@@Base+0x30>
   23f74:	ldrh	r4, [lr, r2]
   23f78:	add	r5, lr, r2
   23f7c:	add	r2, r4, r2
   23f80:	cmp	ip, r2
   23f84:	strh	r4, [sp, #22]
   23f88:	bcc	23fe4 <flatcc_verify_union_table@@Base+0xf0>
   23f8c:	tst	r4, #1
   23f90:	bne	23fe4 <flatcc_verify_union_table@@Base+0xf0>
   23f94:	cmp	r4, #3
   23f98:	movls	r0, #28
   23f9c:	bls	23f24 <flatcc_verify_union_table@@Base+0x30>
   23fa0:	ldrh	r2, [lr, r0]
   23fa4:	sub	r3, ip, r3
   23fa8:	cmp	r3, r2
   23fac:	strh	r2, [sp, #20]
   23fb0:	movcc	r0, #20
   23fb4:	bcc	23f24 <flatcc_verify_union_table@@Base+0x30>
   23fb8:	mov	r0, sp
   23fbc:	str	r5, [sp, #12]
   23fc0:	str	lr, [sp]
   23fc4:	str	ip, [sp, #4]
   23fc8:	blx	r1
   23fcc:	b	23f24 <flatcc_verify_union_table@@Base+0x30>
   23fd0:	mov	r0, #15
   23fd4:	add	sp, sp, #28
   23fd8:	pop	{r4, r5, pc}
   23fdc:	mov	r0, #29
   23fe0:	b	23f24 <flatcc_verify_union_table@@Base+0x30>
   23fe4:	mov	r0, #30
   23fe8:	b	23f24 <flatcc_verify_union_table@@Base+0x30>

00023fec <flatcc_verify_union_struct@@Base>:
   23fec:	ldr	r3, [r0, #20]
   23ff0:	ldr	ip, [r0, #4]
   23ff4:	cmp	r3, #0
   23ff8:	ldr	r0, [r0, #16]
   23ffc:	bne	24008 <flatcc_verify_union_struct@@Base+0x1c>
   24000:	mov	r0, #18
   24004:	bx	lr
   24008:	add	r3, r0, r3
   2400c:	cmp	ip, r3
   24010:	bcc	24000 <flatcc_verify_union_struct@@Base+0x14>
   24014:	adds	r1, r1, r3
   24018:	bcc	24024 <flatcc_verify_union_struct@@Base+0x38>
   2401c:	mov	r0, #10
   24020:	bx	lr
   24024:	cmp	ip, r1
   24028:	bcs	24034 <flatcc_verify_union_struct@@Base+0x48>
   2402c:	mov	r0, #9
   24030:	bx	lr
   24034:	sub	r2, r2, #1
   24038:	tst	r2, r3
   2403c:	movne	r0, #11
   24040:	moveq	r0, #0
   24044:	bx	lr

00024048 <flatcc_verify_union_string@@Base>:
   24048:	ldr	r2, [r0, #16]
   2404c:	ldr	r3, [r0, #20]
   24050:	add	r3, r2, r3
   24054:	cmp	r2, r3
   24058:	bcs	24094 <flatcc_verify_union_string@@Base+0x4c>
   2405c:	ldr	r2, [r0, #4]
   24060:	add	r1, r3, #4
   24064:	cmp	r2, r1
   24068:	bcc	24094 <flatcc_verify_union_string@@Base+0x4c>
   2406c:	tst	r3, #3
   24070:	bne	24094 <flatcc_verify_union_string@@Base+0x4c>
   24074:	ldr	r0, [r0]
   24078:	sub	r2, r2, r1
   2407c:	ldr	r3, [r0, r3]
   24080:	add	ip, r3, #1
   24084:	cmp	r2, ip
   24088:	bcs	2409c <flatcc_verify_union_string@@Base+0x54>
   2408c:	mov	r0, #8
   24090:	bx	lr
   24094:	mov	r0, #17
   24098:	bx	lr
   2409c:	add	r1, r0, r1
   240a0:	ldrb	r0, [r1, r3]
   240a4:	cmp	r0, #0
   240a8:	movne	r0, #7
   240ac:	moveq	r0, #0
   240b0:	bx	lr

000240b4 <flatcc_verify_buffer_header@@Base>:
   240b4:	ands	r3, r0, #3
   240b8:	beq	240c4 <flatcc_verify_buffer_header@@Base+0x10>
   240bc:	mov	r0, #5
   240c0:	bx	lr
   240c4:	cmn	r1, #9
   240c8:	bls	240d4 <flatcc_verify_buffer_header@@Base+0x20>
   240cc:	mov	r0, #6
   240d0:	bx	lr
   240d4:	cmp	r1, #7
   240d8:	bls	24124 <flatcc_verify_buffer_header@@Base+0x70>
   240dc:	cmp	r2, #0
   240e0:	beq	2412c <flatcc_verify_buffer_header@@Base+0x78>
   240e4:	push	{r4, lr}
   240e8:	sub	sp, sp, #8
   240ec:	mov	r4, r0
   240f0:	add	r0, sp, #8
   240f4:	mov	r1, r2
   240f8:	str	r3, [r0, #-4]!
   240fc:	mov	r2, #4
   24100:	bl	12a50 <strncpy@plt>
   24104:	ldr	r2, [r4, #4]
   24108:	ldr	r3, [sp, #4]
   2410c:	cmp	r3, #0
   24110:	cmpne	r2, r3
   24114:	moveq	r0, #0
   24118:	movne	r0, #2
   2411c:	add	sp, sp, #8
   24120:	pop	{r4, pc}
   24124:	mov	r0, #1
   24128:	bx	lr
   2412c:	mov	r0, #0
   24130:	bx	lr

00024134 <flatcc_verify_typed_buffer_header@@Base>:
   24134:	tst	r0, #3
   24138:	beq	24144 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2413c:	mov	r0, #5
   24140:	bx	lr
   24144:	cmn	r1, #9
   24148:	bls	24154 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2414c:	mov	r0, #6
   24150:	bx	lr
   24154:	cmp	r1, #7
   24158:	bls	24180 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2415c:	cmp	r2, #0
   24160:	beq	24178 <flatcc_verify_typed_buffer_header@@Base+0x44>
   24164:	ldr	r0, [r0, #4]
   24168:	cmp	r2, r0
   2416c:	movne	r0, #2
   24170:	moveq	r0, #0
   24174:	bx	lr
   24178:	mov	r0, r2
   2417c:	bx	lr
   24180:	mov	r0, #1
   24184:	bx	lr

00024188 <flatcc_verify_struct_as_root@@Base>:
   24188:	cmn	r1, #9
   2418c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24190:	mov	r6, r1
   24194:	movls	r5, #0
   24198:	movhi	r5, #1
   2419c:	ands	r1, r0, #3
   241a0:	movne	r1, #1
   241a4:	orr	r5, r5, r1
   241a8:	sub	sp, sp, #16
   241ac:	cmp	r6, #7
   241b0:	movhi	r7, r5
   241b4:	orrls	r7, r5, #1
   241b8:	cmp	r7, #0
   241bc:	mov	r4, r0
   241c0:	mov	sl, r2
   241c4:	and	r9, r0, #3
   241c8:	ldrh	r8, [sp, #48]	; 0x30
   241cc:	bne	24208 <flatcc_verify_struct_as_root@@Base+0x80>
   241d0:	cmp	r2, #0
   241d4:	beq	24264 <flatcc_verify_struct_as_root@@Base+0xdc>
   241d8:	add	r0, sp, #16
   241dc:	mov	r2, #4
   241e0:	mov	r1, sl
   241e4:	str	r7, [r0, #-4]!
   241e8:	str	r3, [sp, #4]
   241ec:	bl	12a50 <strncpy@plt>
   241f0:	ldr	r2, [sp, #12]
   241f4:	ldr	r1, [r4, #4]
   241f8:	ldr	r3, [sp, #4]
   241fc:	cmp	r2, #0
   24200:	cmpne	r1, r2
   24204:	beq	24264 <flatcc_verify_struct_as_root@@Base+0xdc>
   24208:	cmp	r9, #0
   2420c:	movne	r0, #5
   24210:	bne	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   24214:	cmp	r5, #0
   24218:	movne	r0, #6
   2421c:	bne	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   24220:	cmp	r7, #0
   24224:	movne	r0, #1
   24228:	bne	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   2422c:	cmp	sl, #0
   24230:	beq	242b4 <flatcc_verify_struct_as_root@@Base+0x12c>
   24234:	add	r0, sp, #16
   24238:	mov	r2, #4
   2423c:	mov	r1, sl
   24240:	str	r7, [r0, #-4]!
   24244:	bl	12a50 <strncpy@plt>
   24248:	ldr	r2, [r4, #4]
   2424c:	ldr	r3, [sp, #12]
   24250:	cmp	r3, #0
   24254:	cmpne	r2, r3
   24258:	movne	r0, #2
   2425c:	bne	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   24260:	b	242b4 <flatcc_verify_struct_as_root@@Base+0x12c>
   24264:	ldr	r1, [r4]
   24268:	clz	r2, r1
   2426c:	lsr	r2, r2, #5
   24270:	cmp	r6, r1
   24274:	orrcc	r2, r2, #1
   24278:	cmp	r2, #0
   2427c:	movne	r0, #18
   24280:	beq	2428c <flatcc_verify_struct_as_root@@Base+0x104>
   24284:	add	sp, sp, #16
   24288:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2428c:	adds	r3, r3, r1
   24290:	movcs	r0, #10
   24294:	bcs	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   24298:	cmp	r6, r3
   2429c:	movcc	r0, #9
   242a0:	bcc	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   242a4:	sub	r8, r8, #1
   242a8:	tst	r8, r1
   242ac:	movne	r0, #11
   242b0:	bne	24284 <flatcc_verify_struct_as_root@@Base+0xfc>
   242b4:	mov	r0, #0
   242b8:	b	24284 <flatcc_verify_struct_as_root@@Base+0xfc>

000242bc <flatcc_verify_struct_as_typed_root@@Base>:
   242bc:	push	{lr}		; (str lr, [sp, #-4]!)
   242c0:	sub	lr, r1, #8
   242c4:	cmn	lr, #17
   242c8:	movls	lr, #0
   242cc:	movhi	lr, #1
   242d0:	ands	ip, r0, #3
   242d4:	movne	ip, #1
   242d8:	orrs	ip, lr, ip
   242dc:	ldrh	lr, [sp, #4]
   242e0:	bne	24330 <flatcc_verify_struct_as_typed_root@@Base+0x74>
   242e4:	cmp	r2, #0
   242e8:	beq	24308 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   242ec:	ldr	ip, [r0, #4]
   242f0:	cmp	r2, ip
   242f4:	beq	24308 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   242f8:	cmn	r1, #9
   242fc:	bls	24354 <flatcc_verify_struct_as_typed_root@@Base+0x98>
   24300:	mov	r0, #6
   24304:	pop	{pc}		; (ldr pc, [sp], #4)
   24308:	ldr	r0, [r0]
   2430c:	cmp	r1, r0
   24310:	movcs	r2, #0
   24314:	movcc	r2, #1
   24318:	cmp	r0, #0
   2431c:	orreq	r2, r2, #1
   24320:	cmp	r2, #0
   24324:	beq	24344 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   24328:	mov	r0, #18
   2432c:	pop	{pc}		; (ldr pc, [sp], #4)
   24330:	and	ip, r0, #3
   24334:	cmp	ip, #0
   24338:	beq	242f8 <flatcc_verify_struct_as_typed_root@@Base+0x3c>
   2433c:	mov	r0, #5
   24340:	pop	{pc}		; (ldr pc, [sp], #4)
   24344:	adds	r3, r3, r0
   24348:	bcc	24380 <flatcc_verify_struct_as_typed_root@@Base+0xc4>
   2434c:	mov	r0, #10
   24350:	pop	{pc}		; (ldr pc, [sp], #4)
   24354:	cmp	r1, #7
   24358:	bls	24378 <flatcc_verify_struct_as_typed_root@@Base+0xbc>
   2435c:	cmp	r2, #0
   24360:	beq	24390 <flatcc_verify_struct_as_typed_root@@Base+0xd4>
   24364:	ldr	r0, [r0, #4]
   24368:	cmp	r2, r0
   2436c:	movne	r0, #2
   24370:	moveq	r0, #0
   24374:	pop	{pc}		; (ldr pc, [sp], #4)
   24378:	mov	r0, #1
   2437c:	pop	{pc}		; (ldr pc, [sp], #4)
   24380:	cmp	r1, r3
   24384:	bcs	24398 <flatcc_verify_struct_as_typed_root@@Base+0xdc>
   24388:	mov	r0, #9
   2438c:	pop	{pc}		; (ldr pc, [sp], #4)
   24390:	mov	r0, r2
   24394:	pop	{pc}		; (ldr pc, [sp], #4)
   24398:	sub	lr, lr, #1
   2439c:	tst	lr, r0
   243a0:	moveq	r0, #0
   243a4:	movne	r0, #11
   243a8:	pop	{pc}		; (ldr pc, [sp], #4)

000243ac <flatcc_verify_table_as_root@@Base>:
   243ac:	push	{r4, r5, r6, lr}
   243b0:	mov	r5, r1
   243b4:	sub	r1, r1, #8
   243b8:	cmn	r1, #17
   243bc:	movls	r1, #0
   243c0:	movhi	r1, #1
   243c4:	mov	r4, r0
   243c8:	ands	r0, r0, #3
   243cc:	movne	r0, #1
   243d0:	orrs	r1, r1, r0
   243d4:	sub	sp, sp, #32
   243d8:	mov	r6, r2
   243dc:	bne	2451c <flatcc_verify_table_as_root@@Base+0x170>
   243e0:	cmp	r2, #0
   243e4:	beq	24470 <flatcc_verify_table_as_root@@Base+0xc4>
   243e8:	add	r0, sp, #32
   243ec:	mov	r2, #4
   243f0:	str	r1, [r0, #-24]!	; 0xffffffe8
   243f4:	mov	r1, r6
   243f8:	str	r3, [sp, #4]
   243fc:	bl	12a50 <strncpy@plt>
   24400:	ldr	r2, [sp, #8]
   24404:	ldr	r1, [r4, #4]
   24408:	ldr	r3, [sp, #4]
   2440c:	cmp	r2, #0
   24410:	cmpne	r1, r2
   24414:	beq	24470 <flatcc_verify_table_as_root@@Base+0xc4>
   24418:	cmn	r5, #9
   2441c:	movhi	r0, #6
   24420:	bhi	2452c <flatcc_verify_table_as_root@@Base+0x180>
   24424:	cmp	r5, #7
   24428:	movls	r0, #1
   2442c:	bls	2452c <flatcc_verify_table_as_root@@Base+0x180>
   24430:	cmp	r6, #0
   24434:	beq	24468 <flatcc_verify_table_as_root@@Base+0xbc>
   24438:	add	r0, sp, #32
   2443c:	mov	r3, #0
   24440:	str	r3, [r0, #-24]!	; 0xffffffe8
   24444:	mov	r2, #4
   24448:	mov	r1, r6
   2444c:	bl	12a50 <strncpy@plt>
   24450:	ldr	r2, [r4, #4]
   24454:	ldr	r3, [sp, #8]
   24458:	cmp	r3, #0
   2445c:	cmpne	r2, r3
   24460:	movne	r0, #2
   24464:	bne	2452c <flatcc_verify_table_as_root@@Base+0x180>
   24468:	mov	r0, #0
   2446c:	b	2452c <flatcc_verify_table_as_root@@Base+0x180>
   24470:	ldr	r2, [r4]
   24474:	mov	r1, #99	; 0x63
   24478:	cmp	r2, #0
   2447c:	str	r1, [sp, #16]
   24480:	beq	24534 <flatcc_verify_table_as_root@@Base+0x188>
   24484:	add	r1, r2, #4
   24488:	cmp	r5, r1
   2448c:	bcc	24534 <flatcc_verify_table_as_root@@Base+0x188>
   24490:	tst	r2, #3
   24494:	bne	24534 <flatcc_verify_table_as_root@@Base+0x188>
   24498:	ldr	r1, [r4, r2]
   2449c:	str	r2, [sp, #24]
   244a0:	subs	r1, r2, r1
   244a4:	bmi	24540 <flatcc_verify_table_as_root@@Base+0x194>
   244a8:	tst	r1, #1
   244ac:	bne	24540 <flatcc_verify_table_as_root@@Base+0x194>
   244b0:	add	r0, r1, #2
   244b4:	cmp	r5, r0
   244b8:	movcc	r0, #27
   244bc:	bcc	2452c <flatcc_verify_table_as_root@@Base+0x180>
   244c0:	ldrh	ip, [r4, r1]
   244c4:	add	lr, r4, r1
   244c8:	add	r1, ip, r1
   244cc:	cmp	r5, r1
   244d0:	strh	ip, [sp, #30]
   244d4:	bcc	24548 <flatcc_verify_table_as_root@@Base+0x19c>
   244d8:	tst	ip, #1
   244dc:	bne	24548 <flatcc_verify_table_as_root@@Base+0x19c>
   244e0:	cmp	ip, #3
   244e4:	movls	r0, #28
   244e8:	bls	2452c <flatcc_verify_table_as_root@@Base+0x180>
   244ec:	ldrh	r1, [r4, r0]
   244f0:	sub	r2, r5, r2
   244f4:	cmp	r2, r1
   244f8:	strh	r1, [sp, #28]
   244fc:	movcc	r0, #20
   24500:	bcc	2452c <flatcc_verify_table_as_root@@Base+0x180>
   24504:	add	r0, sp, #8
   24508:	str	lr, [sp, #20]
   2450c:	str	r4, [sp, #8]
   24510:	str	r5, [sp, #12]
   24514:	blx	r3
   24518:	b	2452c <flatcc_verify_table_as_root@@Base+0x180>
   2451c:	and	r2, r4, #3
   24520:	cmp	r2, #0
   24524:	movne	r0, #5
   24528:	beq	24418 <flatcc_verify_table_as_root@@Base+0x6c>
   2452c:	add	sp, sp, #32
   24530:	pop	{r4, r5, r6, pc}
   24534:	mov	r0, #15
   24538:	add	sp, sp, #32
   2453c:	pop	{r4, r5, r6, pc}
   24540:	mov	r0, #29
   24544:	b	2452c <flatcc_verify_table_as_root@@Base+0x180>
   24548:	mov	r0, #30
   2454c:	b	2452c <flatcc_verify_table_as_root@@Base+0x180>

00024550 <flatcc_verify_table_as_typed_root@@Base>:
   24550:	push	{r4, r5, lr}
   24554:	sub	lr, r1, #8
   24558:	cmn	lr, #17
   2455c:	movls	lr, #0
   24560:	movhi	lr, #1
   24564:	ands	ip, r0, #3
   24568:	movne	ip, #1
   2456c:	orrs	ip, lr, ip
   24570:	sub	sp, sp, #28
   24574:	bne	245c4 <flatcc_verify_table_as_typed_root@@Base+0x74>
   24578:	cmp	r2, #0
   2457c:	beq	245dc <flatcc_verify_table_as_typed_root@@Base+0x8c>
   24580:	ldr	ip, [r0, #4]
   24584:	cmp	r2, ip
   24588:	beq	245dc <flatcc_verify_table_as_typed_root@@Base+0x8c>
   2458c:	cmn	r1, #9
   24590:	movhi	r0, #6
   24594:	bhi	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   24598:	cmp	r1, #7
   2459c:	movls	r0, #1
   245a0:	bls	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   245a4:	cmp	r2, #0
   245a8:	moveq	r0, r2
   245ac:	beq	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   245b0:	ldr	r0, [r0, #4]
   245b4:	cmp	r2, r0
   245b8:	movne	r0, #2
   245bc:	moveq	r0, #0
   245c0:	b	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   245c4:	and	ip, r0, #3
   245c8:	cmp	ip, #0
   245cc:	movne	r0, #5
   245d0:	beq	2458c <flatcc_verify_table_as_typed_root@@Base+0x3c>
   245d4:	add	sp, sp, #28
   245d8:	pop	{r4, r5, pc}
   245dc:	ldr	r2, [r0]
   245e0:	mov	ip, #99	; 0x63
   245e4:	cmp	r2, #0
   245e8:	str	ip, [sp, #8]
   245ec:	beq	2468c <flatcc_verify_table_as_typed_root@@Base+0x13c>
   245f0:	add	ip, r2, #4
   245f4:	cmp	r1, ip
   245f8:	bcc	2468c <flatcc_verify_table_as_typed_root@@Base+0x13c>
   245fc:	tst	r2, #3
   24600:	bne	2468c <flatcc_verify_table_as_typed_root@@Base+0x13c>
   24604:	ldr	ip, [r0, r2]
   24608:	str	r2, [sp, #16]
   2460c:	subs	ip, r2, ip
   24610:	bmi	24698 <flatcc_verify_table_as_typed_root@@Base+0x148>
   24614:	tst	ip, #1
   24618:	bne	24698 <flatcc_verify_table_as_typed_root@@Base+0x148>
   2461c:	add	lr, ip, #2
   24620:	cmp	r1, lr
   24624:	movcc	r0, #27
   24628:	bcc	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2462c:	ldrh	r4, [r0, ip]
   24630:	add	r5, r0, ip
   24634:	add	ip, r4, ip
   24638:	cmp	r1, ip
   2463c:	strh	r4, [sp, #22]
   24640:	bcc	246a0 <flatcc_verify_table_as_typed_root@@Base+0x150>
   24644:	tst	r4, #1
   24648:	bne	246a0 <flatcc_verify_table_as_typed_root@@Base+0x150>
   2464c:	cmp	r4, #3
   24650:	movls	r0, #28
   24654:	bls	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   24658:	ldrh	ip, [r0, lr]
   2465c:	sub	r2, r1, r2
   24660:	cmp	r2, ip
   24664:	strh	ip, [sp, #20]
   24668:	movcc	r0, #20
   2466c:	bcc	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   24670:	mov	r2, r0
   24674:	mov	r0, sp
   24678:	str	r5, [sp, #12]
   2467c:	str	r2, [sp]
   24680:	str	r1, [sp, #4]
   24684:	blx	r3
   24688:	b	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2468c:	mov	r0, #15
   24690:	add	sp, sp, #28
   24694:	pop	{r4, r5, pc}
   24698:	mov	r0, #29
   2469c:	b	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>
   246a0:	mov	r0, #30
   246a4:	b	245d4 <flatcc_verify_table_as_typed_root@@Base+0x84>

000246a8 <flatcc_verify_struct_as_nested_root@@Base>:
   246a8:	add	ip, r1, #2
   246ac:	push	{r4, r5, r6, r7, r8, lr}
   246b0:	lsl	ip, ip, #1
   246b4:	ldrh	lr, [r0, #22]
   246b8:	sub	sp, sp, #16
   246bc:	uxth	ip, ip
   246c0:	cmp	lr, ip
   246c4:	ldr	r5, [sp, #40]	; 0x28
   246c8:	ldrh	r4, [sp, #44]	; 0x2c
   246cc:	bls	24710 <flatcc_verify_struct_as_nested_root@@Base+0x68>
   246d0:	ldr	lr, [r0, #12]
   246d4:	ldrh	ip, [lr, ip]
   246d8:	cmp	ip, #0
   246dc:	beq	24710 <flatcc_verify_struct_as_nested_root@@Base+0x68>
   246e0:	ldrh	lr, [r0, #20]
   246e4:	add	r6, ip, #4
   246e8:	cmp	r6, lr
   246ec:	bls	24724 <flatcc_verify_struct_as_nested_root@@Base+0x7c>
   246f0:	mvn	lr, #0
   246f4:	mov	ip, #1
   246f8:	mov	r3, r4
   246fc:	str	lr, [sp, #44]	; 0x2c
   24700:	str	ip, [sp, #40]	; 0x28
   24704:	add	sp, sp, #16
   24708:	pop	{r4, r5, r6, r7, r8, lr}
   2470c:	b	237f8 <flatcc_verify_vector_field@@Base>
   24710:	cmp	r2, #0
   24714:	bne	246f0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   24718:	mov	r0, #0
   2471c:	add	sp, sp, #16
   24720:	pop	{r4, r5, r6, r7, r8, pc}
   24724:	ldr	lr, [r0, #16]
   24728:	add	ip, ip, lr
   2472c:	tst	ip, #3
   24730:	bne	246f0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   24734:	cmp	ip, #0
   24738:	beq	24834 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   2473c:	ldr	r7, [r0]
   24740:	add	lr, r7, ip
   24744:	ldr	r6, [r7, ip]
   24748:	add	r6, ip, r6
   2474c:	cmp	r6, ip
   24750:	bls	246f0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   24754:	ldr	ip, [r0, #4]
   24758:	add	r8, r6, #4
   2475c:	cmp	ip, r8
   24760:	bcc	246f0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   24764:	tst	r8, #3
   24768:	bne	246f0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2476c:	ldr	r6, [r7, r6]
   24770:	sub	ip, ip, r8
   24774:	mul	r6, r6, r4
   24778:	cmp	ip, r6
   2477c:	bcc	246f0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   24780:	ldr	r2, [lr]
   24784:	add	r6, lr, r2
   24788:	ldr	r7, [lr, r2]
   2478c:	and	r0, r6, #3
   24790:	sub	r2, r7, #8
   24794:	cmn	r2, #17
   24798:	movls	r2, #0
   2479c:	movhi	r2, #1
   247a0:	ands	r1, r6, #3
   247a4:	movne	r1, #1
   247a8:	orrs	r1, r2, r1
   247ac:	bne	24844 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   247b0:	cmp	r3, #0
   247b4:	beq	247e8 <flatcc_verify_struct_as_nested_root@@Base+0x140>
   247b8:	add	r0, sp, #16
   247bc:	mov	r2, #4
   247c0:	str	r1, [r0, #-4]!
   247c4:	mov	r1, r3
   247c8:	str	r3, [sp, #4]
   247cc:	bl	12a50 <strncpy@plt>
   247d0:	ldr	r2, [sp, #12]
   247d4:	ldr	r1, [r6, #8]
   247d8:	ldr	r3, [sp, #4]
   247dc:	cmp	r2, #0
   247e0:	cmpne	r1, r2
   247e4:	bne	24850 <flatcc_verify_struct_as_nested_root@@Base+0x1a8>
   247e8:	ldr	r2, [r6, #4]
   247ec:	clz	r3, r2
   247f0:	lsr	r3, r3, #5
   247f4:	cmp	r7, r2
   247f8:	orrcc	r3, r3, #1
   247fc:	cmp	r3, #0
   24800:	movne	r0, #18
   24804:	bne	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   24808:	adds	r5, r5, r2
   2480c:	movcs	r0, #10
   24810:	bcs	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   24814:	cmp	r7, r5
   24818:	movcc	r0, #9
   2481c:	bcc	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   24820:	sub	r4, r4, #1
   24824:	tst	r4, r2
   24828:	movne	r0, #11
   2482c:	bne	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   24830:	b	24718 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   24834:	ldr	lr, [r0]
   24838:	cmp	lr, #0
   2483c:	bne	24780 <flatcc_verify_struct_as_nested_root@@Base+0xd8>
   24840:	b	24718 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   24844:	cmp	r0, #0
   24848:	movne	r0, #5
   2484c:	bne	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   24850:	cmn	r7, #9
   24854:	movhi	r0, #6
   24858:	bhi	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2485c:	cmp	r7, #7
   24860:	movls	r0, #1
   24864:	bls	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   24868:	cmp	r3, #0
   2486c:	beq	24718 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   24870:	add	r0, sp, #16
   24874:	mov	r2, #0
   24878:	mov	r1, r3
   2487c:	str	r2, [r0, #-4]!
   24880:	mov	r2, #4
   24884:	bl	12a50 <strncpy@plt>
   24888:	ldr	r2, [r6, #8]
   2488c:	ldr	r3, [sp, #12]
   24890:	cmp	r3, #0
   24894:	cmpne	r2, r3
   24898:	movne	r0, #2
   2489c:	bne	2471c <flatcc_verify_struct_as_nested_root@@Base+0x74>
   248a0:	b	24718 <flatcc_verify_struct_as_nested_root@@Base+0x70>

000248a4 <flatcc_verify_table_as_nested_root@@Base>:
   248a4:	push	{r4, r5, r6, r7, lr}
   248a8:	mov	r4, r0
   248ac:	add	r0, r1, #2
   248b0:	ldrh	ip, [r4, #22]
   248b4:	lsl	r0, r0, #1
   248b8:	sub	sp, sp, #44	; 0x2c
   248bc:	uxth	r0, r0
   248c0:	cmp	ip, r0
   248c4:	ldrh	r5, [sp, #64]	; 0x40
   248c8:	bls	2490c <flatcc_verify_table_as_nested_root@@Base+0x68>
   248cc:	ldr	ip, [r4, #12]
   248d0:	ldrh	r0, [ip, r0]
   248d4:	cmp	r0, #0
   248d8:	beq	2490c <flatcc_verify_table_as_nested_root@@Base+0x68>
   248dc:	ldrh	ip, [r4, #20]
   248e0:	add	lr, r0, #4
   248e4:	cmp	lr, ip
   248e8:	bls	24920 <flatcc_verify_table_as_nested_root@@Base+0x7c>
   248ec:	mvn	lr, #0
   248f0:	mov	ip, #1
   248f4:	mov	r3, r5
   248f8:	mov	r0, r4
   248fc:	stm	sp, {ip, lr}
   24900:	bl	237f8 <flatcc_verify_vector_field@@Base>
   24904:	add	sp, sp, #44	; 0x2c
   24908:	pop	{r4, r5, r6, r7, pc}
   2490c:	cmp	r2, #0
   24910:	bne	248ec <flatcc_verify_table_as_nested_root@@Base+0x48>
   24914:	mov	r0, #0
   24918:	add	sp, sp, #44	; 0x2c
   2491c:	pop	{r4, r5, r6, r7, pc}
   24920:	ldr	ip, [r4, #16]
   24924:	add	r0, r0, ip
   24928:	tst	r0, #3
   2492c:	bne	248ec <flatcc_verify_table_as_nested_root@@Base+0x48>
   24930:	cmp	r0, #0
   24934:	beq	24ab4 <flatcc_verify_table_as_nested_root@@Base+0x210>
   24938:	ldr	r6, [r4]
   2493c:	add	ip, r6, r0
   24940:	ldr	lr, [r6, r0]
   24944:	add	lr, r0, lr
   24948:	cmp	lr, r0
   2494c:	bls	248ec <flatcc_verify_table_as_nested_root@@Base+0x48>
   24950:	ldr	r0, [r4, #4]
   24954:	add	r7, lr, #4
   24958:	cmp	r0, r7
   2495c:	bcc	248ec <flatcc_verify_table_as_nested_root@@Base+0x48>
   24960:	tst	r7, #3
   24964:	bne	248ec <flatcc_verify_table_as_nested_root@@Base+0x48>
   24968:	ldr	lr, [r6, lr]
   2496c:	sub	r0, r0, r7
   24970:	mul	lr, lr, r5
   24974:	cmp	r0, lr
   24978:	bcc	248ec <flatcc_verify_table_as_nested_root@@Base+0x48>
   2497c:	ldr	r2, [ip]
   24980:	add	r6, ip, r2
   24984:	ldr	r7, [ip, r2]
   24988:	add	r5, r6, #4
   2498c:	sub	r2, r7, #8
   24990:	cmn	r2, #17
   24994:	movls	r2, #0
   24998:	movhi	r2, #1
   2499c:	ands	r1, r5, #3
   249a0:	movne	r1, #1
   249a4:	orrs	r1, r2, r1
   249a8:	and	r2, r5, #3
   249ac:	bne	24ac4 <flatcc_verify_table_as_nested_root@@Base+0x220>
   249b0:	cmp	r3, #0
   249b4:	beq	249e8 <flatcc_verify_table_as_nested_root@@Base+0x144>
   249b8:	add	r0, sp, #40	; 0x28
   249bc:	mov	r2, #4
   249c0:	str	r1, [r0, #-24]!	; 0xffffffe8
   249c4:	mov	r1, r3
   249c8:	str	r3, [sp, #12]
   249cc:	bl	12a50 <strncpy@plt>
   249d0:	ldr	r2, [sp, #16]
   249d4:	ldr	r1, [r6, #8]
   249d8:	ldr	r3, [sp, #12]
   249dc:	cmp	r2, #0
   249e0:	cmpne	r1, r2
   249e4:	bne	24ad0 <flatcc_verify_table_as_nested_root@@Base+0x22c>
   249e8:	ldr	r3, [r4, #8]
   249ec:	ldr	r2, [r6, #4]
   249f0:	sub	r3, r3, #1
   249f4:	cmp	r3, #0
   249f8:	str	r3, [sp, #24]
   249fc:	moveq	r0, #3
   24a00:	beq	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24a04:	cmp	r2, #0
   24a08:	beq	24aa8 <flatcc_verify_table_as_nested_root@@Base+0x204>
   24a0c:	add	r3, r2, #4
   24a10:	cmp	r7, r3
   24a14:	bcc	24aa8 <flatcc_verify_table_as_nested_root@@Base+0x204>
   24a18:	tst	r2, #3
   24a1c:	bne	24aa8 <flatcc_verify_table_as_nested_root@@Base+0x204>
   24a20:	str	r2, [sp, #32]
   24a24:	ldr	r3, [r5, r2]
   24a28:	subs	r3, r2, r3
   24a2c:	bmi	24b24 <flatcc_verify_table_as_nested_root@@Base+0x280>
   24a30:	tst	r3, #1
   24a34:	bne	24b24 <flatcc_verify_table_as_nested_root@@Base+0x280>
   24a38:	add	r1, r3, #2
   24a3c:	cmp	r7, r1
   24a40:	movcc	r0, #27
   24a44:	bcc	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24a48:	ldrh	r0, [r5, r3]
   24a4c:	add	ip, r5, r3
   24a50:	add	r3, r0, r3
   24a54:	cmp	r7, r3
   24a58:	strh	r0, [sp, #38]	; 0x26
   24a5c:	bcc	24b2c <flatcc_verify_table_as_nested_root@@Base+0x288>
   24a60:	tst	r0, #1
   24a64:	bne	24b2c <flatcc_verify_table_as_nested_root@@Base+0x288>
   24a68:	cmp	r0, #3
   24a6c:	movls	r0, #28
   24a70:	bls	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24a74:	ldrh	r3, [r5, r1]
   24a78:	sub	r2, r7, r2
   24a7c:	cmp	r2, r3
   24a80:	strh	r3, [sp, #36]	; 0x24
   24a84:	movcc	r0, #20
   24a88:	bcc	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24a8c:	add	r0, sp, #16
   24a90:	ldr	r3, [sp, #68]	; 0x44
   24a94:	str	ip, [sp, #28]
   24a98:	str	r5, [sp, #16]
   24a9c:	str	r7, [sp, #20]
   24aa0:	blx	r3
   24aa4:	b	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24aa8:	mov	r0, #15
   24aac:	add	sp, sp, #44	; 0x2c
   24ab0:	pop	{r4, r5, r6, r7, pc}
   24ab4:	ldr	ip, [r4]
   24ab8:	cmp	ip, #0
   24abc:	bne	2497c <flatcc_verify_table_as_nested_root@@Base+0xd8>
   24ac0:	b	24914 <flatcc_verify_table_as_nested_root@@Base+0x70>
   24ac4:	cmp	r2, #0
   24ac8:	movne	r0, #5
   24acc:	bne	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24ad0:	cmn	r7, #9
   24ad4:	movhi	r0, #6
   24ad8:	bhi	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24adc:	cmp	r7, #7
   24ae0:	movls	r0, #1
   24ae4:	bls	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24ae8:	cmp	r3, #0
   24aec:	beq	24914 <flatcc_verify_table_as_nested_root@@Base+0x70>
   24af0:	add	r0, sp, #40	; 0x28
   24af4:	mov	r2, #0
   24af8:	mov	r1, r3
   24afc:	str	r2, [r0, #-24]!	; 0xffffffe8
   24b00:	mov	r2, #4
   24b04:	bl	12a50 <strncpy@plt>
   24b08:	ldr	r2, [r6, #8]
   24b0c:	ldr	r3, [sp, #16]
   24b10:	cmp	r3, #0
   24b14:	cmpne	r2, r3
   24b18:	movne	r0, #2
   24b1c:	bne	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24b20:	b	24914 <flatcc_verify_table_as_nested_root@@Base+0x70>
   24b24:	mov	r0, #29
   24b28:	b	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>
   24b2c:	mov	r0, #30
   24b30:	b	24904 <flatcc_verify_table_as_nested_root@@Base+0x60>

00024b34 <flatcc_verify_union_field@@Base>:
   24b34:	sub	ip, r1, #1
   24b38:	push	{r4, r5, r6, r7, lr}
   24b3c:	uxth	ip, ip
   24b40:	add	ip, ip, #2
   24b44:	ldrh	lr, [r0, #22]
   24b48:	lsl	ip, ip, #1
   24b4c:	sub	sp, sp, #28
   24b50:	uxth	ip, ip
   24b54:	cmp	ip, lr
   24b58:	ldr	r4, [r0, #12]
   24b5c:	bcs	24b88 <flatcc_verify_union_field@@Base+0x54>
   24b60:	ldrh	ip, [r4, ip]
   24b64:	cmp	ip, #0
   24b68:	beq	24b88 <flatcc_verify_union_field@@Base+0x54>
   24b6c:	ldrh	r5, [r0, #20]
   24b70:	add	r6, ip, #1
   24b74:	cmp	r6, r5
   24b78:	bls	24bc8 <flatcc_verify_union_field@@Base+0x94>
   24b7c:	mov	r0, #13
   24b80:	add	sp, sp, #28
   24b84:	pop	{r4, r5, r6, r7, pc}
   24b88:	add	r1, r1, #2
   24b8c:	lsl	r1, r1, #1
   24b90:	uxth	r1, r1
   24b94:	cmp	lr, r1
   24b98:	bhi	24bb0 <flatcc_verify_union_field@@Base+0x7c>
   24b9c:	cmp	r2, #0
   24ba0:	movne	r0, #21
   24ba4:	moveq	r0, #0
   24ba8:	add	sp, sp, #28
   24bac:	pop	{r4, r5, r6, r7, pc}
   24bb0:	ldrh	r3, [r4, r1]
   24bb4:	cmp	r3, #0
   24bb8:	movne	r0, #23
   24bbc:	beq	24b9c <flatcc_verify_union_field@@Base+0x68>
   24bc0:	add	sp, sp, #28
   24bc4:	pop	{r4, r5, r6, r7, pc}
   24bc8:	add	r1, r1, #2
   24bcc:	ldr	r6, [r0]
   24bd0:	lsl	r1, r1, #1
   24bd4:	uxth	r1, r1
   24bd8:	cmp	lr, r1
   24bdc:	bls	24c14 <flatcc_verify_union_field@@Base+0xe0>
   24be0:	ldr	r7, [r0, #16]
   24be4:	ldrh	r4, [r4, r1]
   24be8:	add	ip, r7, ip
   24bec:	ldrb	r1, [r6, ip]
   24bf0:	adds	lr, r1, #0
   24bf4:	movne	lr, #1
   24bf8:	cmp	r4, #0
   24bfc:	orreq	lr, lr, #1
   24c00:	cmp	lr, #0
   24c04:	bne	24c38 <flatcc_verify_union_field@@Base+0x104>
   24c08:	mov	r0, #24
   24c0c:	add	sp, sp, #28
   24c10:	pop	{r4, r5, r6, r7, pc}
   24c14:	ldr	r3, [r0, #16]
   24c18:	add	ip, r6, ip
   24c1c:	ldrb	r0, [ip, r3]
   24c20:	cmp	r0, #0
   24c24:	beq	24b80 <flatcc_verify_union_field@@Base+0x4c>
   24c28:	cmp	r2, #0
   24c2c:	movne	r0, #4
   24c30:	moveq	r0, #0
   24c34:	b	24b80 <flatcc_verify_union_field@@Base+0x4c>
   24c38:	cmp	r1, #0
   24c3c:	beq	24c98 <flatcc_verify_union_field@@Base+0x164>
   24c40:	cmp	r4, #0
   24c44:	beq	24c28 <flatcc_verify_union_field@@Base+0xf4>
   24c48:	add	r2, r4, #4
   24c4c:	cmp	r5, r2
   24c50:	bcc	24b7c <flatcc_verify_union_field@@Base+0x48>
   24c54:	add	r7, r7, r4
   24c58:	tst	r7, #3
   24c5c:	movne	r0, #12
   24c60:	bne	24b80 <flatcc_verify_union_field@@Base+0x4c>
   24c64:	cmp	r7, #0
   24c68:	beq	24c98 <flatcc_verify_union_field@@Base+0x164>
   24c6c:	ldmib	r0, {r1, r2}
   24c70:	str	r7, [sp, #16]
   24c74:	mov	r0, sp
   24c78:	stmib	sp, {r1, r2}
   24c7c:	ldr	r2, [r6, r7]
   24c80:	str	r6, [sp]
   24c84:	str	r2, [sp, #20]
   24c88:	ldrb	r2, [r6, ip]
   24c8c:	strb	r2, [sp, #12]
   24c90:	blx	r3
   24c94:	b	24b80 <flatcc_verify_union_field@@Base+0x4c>
   24c98:	mov	r0, #0
   24c9c:	b	24b80 <flatcc_verify_union_field@@Base+0x4c>

00024ca0 <flatcc_verify_union_vector_field@@Base>:
   24ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ca4:	sub	r4, r1, #1
   24ca8:	ldrh	lr, [r0, #22]
   24cac:	uxth	r4, r4
   24cb0:	add	ip, r4, #2
   24cb4:	sub	sp, sp, #44	; 0x2c
   24cb8:	lsl	ip, ip, #1
   24cbc:	ldr	r5, [r0, #12]
   24cc0:	uxth	ip, ip
   24cc4:	cmp	ip, lr
   24cc8:	bcs	24df8 <flatcc_verify_union_vector_field@@Base+0x158>
   24ccc:	ldrh	ip, [r5, ip]
   24cd0:	cmp	ip, #0
   24cd4:	beq	24df8 <flatcc_verify_union_vector_field@@Base+0x158>
   24cd8:	ldrh	r7, [r0, #20]
   24cdc:	add	r6, ip, #4
   24ce0:	cmp	r6, r7
   24ce4:	bhi	24e20 <flatcc_verify_union_vector_field@@Base+0x180>
   24ce8:	ldr	r8, [r0, #16]
   24cec:	add	ip, ip, r8
   24cf0:	tst	ip, #3
   24cf4:	bne	24e20 <flatcc_verify_union_vector_field@@Base+0x180>
   24cf8:	cmp	ip, #0
   24cfc:	beq	24f34 <flatcc_verify_union_vector_field@@Base+0x294>
   24d00:	ldr	r6, [r0]
   24d04:	ldr	r9, [r6, ip]
   24d08:	add	r9, ip, r9
   24d0c:	cmp	r9, ip
   24d10:	bls	24e20 <flatcc_verify_union_vector_field@@Base+0x180>
   24d14:	ldr	sl, [r0, #4]
   24d18:	add	fp, r9, #4
   24d1c:	cmp	sl, fp
   24d20:	bcc	24e20 <flatcc_verify_union_vector_field@@Base+0x180>
   24d24:	tst	fp, #3
   24d28:	bne	24e20 <flatcc_verify_union_vector_field@@Base+0x180>
   24d2c:	ldr	r9, [r6, r9]
   24d30:	sub	sl, sl, fp
   24d34:	cmp	r9, sl
   24d38:	bhi	24e20 <flatcc_verify_union_vector_field@@Base+0x180>
   24d3c:	adds	ip, r6, ip
   24d40:	beq	24dec <flatcc_verify_union_vector_field@@Base+0x14c>
   24d44:	add	r1, r1, #2
   24d48:	lsl	r1, r1, #1
   24d4c:	uxth	r1, r1
   24d50:	cmp	lr, r1
   24d54:	bls	24e50 <flatcc_verify_union_vector_field@@Base+0x1b0>
   24d58:	ldrh	r1, [r5, r1]
   24d5c:	cmp	r1, #0
   24d60:	beq	24e50 <flatcc_verify_union_vector_field@@Base+0x1b0>
   24d64:	add	r2, r1, #4
   24d68:	cmp	r2, r7
   24d6c:	movhi	r0, #13
   24d70:	bhi	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24d74:	add	r2, r1, r8
   24d78:	tst	r2, #3
   24d7c:	movne	r0, #12
   24d80:	bne	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24d84:	cmp	r2, #0
   24d88:	beq	24dec <flatcc_verify_union_vector_field@@Base+0x14c>
   24d8c:	ldr	lr, [r0, #8]
   24d90:	cmp	lr, #0
   24d94:	movle	r0, #3
   24d98:	ble	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24d9c:	ldr	r1, [r6, r2]
   24da0:	add	r1, r2, r1
   24da4:	cmp	r2, r1
   24da8:	bcs	24e64 <flatcc_verify_union_vector_field@@Base+0x1c4>
   24dac:	ldr	r9, [r0, #4]
   24db0:	add	r4, r1, #4
   24db4:	cmp	r9, r4
   24db8:	bcc	24e64 <flatcc_verify_union_vector_field@@Base+0x1c4>
   24dbc:	ands	r2, r4, #3
   24dc0:	beq	24e6c <flatcc_verify_union_vector_field@@Base+0x1cc>
   24dc4:	cmp	r2, #0
   24dc8:	bne	24e64 <flatcc_verify_union_vector_field@@Base+0x1c4>
   24dcc:	ldr	r3, [r6, r1]
   24dd0:	cmn	r3, #-1073741823	; 0xc0000001
   24dd4:	movhi	r0, #25
   24dd8:	bhi	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24ddc:	sub	r4, r9, r4
   24de0:	cmp	r4, r3, lsl #2
   24de4:	movcc	r0, #26
   24de8:	bcc	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24dec:	mov	r0, #0
   24df0:	add	sp, sp, #44	; 0x2c
   24df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24df8:	add	r3, r1, #2
   24dfc:	lsl	r3, r3, #1
   24e00:	uxth	r3, r3
   24e04:	cmp	lr, r3
   24e08:	bls	24e3c <flatcc_verify_union_vector_field@@Base+0x19c>
   24e0c:	ldrh	r3, [r5, r3]
   24e10:	cmp	r3, #0
   24e14:	beq	24e3c <flatcc_verify_union_vector_field@@Base+0x19c>
   24e18:	cmp	r2, #0
   24e1c:	beq	24dec <flatcc_verify_union_vector_field@@Base+0x14c>
   24e20:	mvn	ip, #0
   24e24:	mov	r3, #1
   24e28:	mov	r1, r4
   24e2c:	stm	sp, {r3, ip}
   24e30:	bl	237f8 <flatcc_verify_vector_field@@Base>
   24e34:	add	sp, sp, #44	; 0x2c
   24e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e3c:	cmp	r2, #0
   24e40:	movne	r0, #22
   24e44:	moveq	r0, #0
   24e48:	add	sp, sp, #44	; 0x2c
   24e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e50:	cmp	r2, #0
   24e54:	movne	r0, #4
   24e58:	moveq	r0, #0
   24e5c:	add	sp, sp, #44	; 0x2c
   24e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e64:	mov	r0, #16
   24e68:	b	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24e6c:	ldr	r7, [r6, r1]
   24e70:	add	r2, r6, r1
   24e74:	cmn	r7, #-1073741823	; 0xc0000001
   24e78:	bhi	24dcc <flatcc_verify_union_vector_field@@Base+0x12c>
   24e7c:	lsl	r0, r7, #2
   24e80:	sub	r5, r9, r4
   24e84:	cmp	r5, r0
   24e88:	bcc	24dcc <flatcc_verify_union_vector_field@@Base+0x12c>
   24e8c:	ldr	r8, [ip]
   24e90:	add	r5, ip, r8
   24e94:	ldr	ip, [ip, r8]
   24e98:	cmp	ip, r7
   24e9c:	movne	r0, #34	; 0x22
   24ea0:	bne	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24ea4:	sub	lr, lr, #1
   24ea8:	cmp	ip, #0
   24eac:	str	lr, [sp, #24]
   24eb0:	str	r6, [sp, #16]
   24eb4:	str	r9, [sp, #20]
   24eb8:	beq	24dec <flatcc_verify_union_vector_field@@Base+0x14c>
   24ebc:	add	r1, r1, r0
   24ec0:	add	r7, r6, r1
   24ec4:	add	r5, r5, #4
   24ec8:	mov	r6, r2
   24ecc:	b	24eec <flatcc_verify_union_vector_field@@Base+0x24c>
   24ed0:	ldrb	r2, [r5]
   24ed4:	cmp	r2, #0
   24ed8:	bne	24f3c <flatcc_verify_union_vector_field@@Base+0x29c>
   24edc:	cmp	r7, r6
   24ee0:	add	r4, r4, #4
   24ee4:	add	r5, r5, #1
   24ee8:	beq	24dec <flatcc_verify_union_vector_field@@Base+0x14c>
   24eec:	ldr	r2, [r6, #4]!
   24ef0:	add	r0, sp, #16
   24ef4:	cmp	r2, #0
   24ef8:	beq	24ed0 <flatcc_verify_union_vector_field@@Base+0x230>
   24efc:	ldrb	r1, [r5]
   24f00:	cmp	r1, #0
   24f04:	beq	24f44 <flatcc_verify_union_vector_field@@Base+0x2a4>
   24f08:	str	r3, [sp, #12]
   24f0c:	strb	r1, [sp, #28]
   24f10:	str	r4, [sp, #32]
   24f14:	str	r2, [sp, #36]	; 0x24
   24f18:	blx	r3
   24f1c:	ldr	r3, [sp, #12]
   24f20:	cmp	r0, #0
   24f24:	beq	24edc <flatcc_verify_union_vector_field@@Base+0x23c>
   24f28:	add	r0, sp, #16
   24f2c:	blx	r3
   24f30:	b	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24f34:	ldr	r6, [r0]
   24f38:	b	24d3c <flatcc_verify_union_vector_field@@Base+0x9c>
   24f3c:	mov	r0, #32
   24f40:	b	24e34 <flatcc_verify_union_vector_field@@Base+0x194>
   24f44:	mov	r0, #33	; 0x21
   24f48:	b	24e34 <flatcc_verify_union_vector_field@@Base+0x194>

00024f4c <__libc_csu_init@@Base>:
   24f4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24f50:	mov	r7, r0
   24f54:	ldr	r6, [pc, #72]	; 24fa4 <__libc_csu_init@@Base+0x58>
   24f58:	ldr	r5, [pc, #72]	; 24fa8 <__libc_csu_init@@Base+0x5c>
   24f5c:	add	r6, pc, r6
   24f60:	add	r5, pc, r5
   24f64:	sub	r6, r6, r5
   24f68:	mov	r8, r1
   24f6c:	mov	r9, r2
   24f70:	bl	12970 <strcmp@plt-0x20>
   24f74:	asrs	r6, r6, #2
   24f78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24f7c:	mov	r4, #0
   24f80:	add	r4, r4, #1
   24f84:	ldr	r3, [r5], #4
   24f88:	mov	r2, r9
   24f8c:	mov	r1, r8
   24f90:	mov	r0, r7
   24f94:	blx	r3
   24f98:	cmp	r6, r4
   24f9c:	bne	24f80 <__libc_csu_init@@Base+0x34>
   24fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24fa4:	andeq	r4, r1, ip, lsr #31
   24fa8:	andeq	r4, r1, r4, lsr #31

00024fac <__libc_csu_fini@@Base>:
   24fac:	bx	lr

Disassembly of section .fini:

00024fb0 <.fini>:
   24fb0:	push	{r3, lr}
   24fb4:	pop	{r3, pc}
