
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	114f8 <__assert_fail@plt+0x400>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <calloc@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <calloc@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r5, r1, r4, asr #3

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <strcmp@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <posix_fadvise64@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <fflush@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <memmove@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <free@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <ferror@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <_exit@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <memcpy@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <mbsinit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <fwrite_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <memcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <fputc_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <getc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <lseek64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <__ctype_get_mb_cur_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <__fpending@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <ferror_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <mbrtowc@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <error@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <malloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <__libc_start_main@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <__freading@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__gmon_start__@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <getopt_long@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__ctype_b_loc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <exit@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <strlen@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <ungetc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <__errno_location@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <__cxa_atexit@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <memset@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <fgetc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__printf_chk@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <fileno@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <__fprintf_chk@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <memchr@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fclose@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <fseeko64@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <__fread_chk@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <setlocale@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #86016	; 0x15000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <strrchr@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #86016	; 0x15000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <nl_langinfo@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #86016	; 0x15000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <clearerr_unlocked@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #86016	; 0x15000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <fopen64@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #86016	; 0x15000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <qsort@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #86016	; 0x15000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <bindtextdomain@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #86016	; 0x15000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <fputs@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #86016	; 0x15000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <strncmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #86016	; 0x15000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <abort@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <feof_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <putchar_unlocked@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4]!

000110ec <strspn@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #20, 20	; 0x14000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <__assert_fail@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #20, 20	; 0x14000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

00011108 <.text>:
   11108:	push	{r4, lr}
   1110c:	bl	10fd8 <__errno_location@plt>
   11110:	mov	r3, #12
   11114:	str	r3, [r0]
   11118:	mov	r0, #0
   1111c:	pop	{r4, pc}
   11120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11124:	mov	r9, r0
   11128:	sub	sp, sp, #20
   1112c:	mov	sl, r1
   11130:	mov	r5, #0
   11134:	mov	r8, r5
   11138:	mov	r7, r5
   1113c:	ldr	r4, [pc, #780]	; 11450 <__assert_fail@plt+0x358>
   11140:	ldr	fp, [pc, #780]	; 11454 <__assert_fail@plt+0x35c>
   11144:	ldr	r0, [r1]
   11148:	bl	12aec <__assert_fail@plt+0x19f4>
   1114c:	ldr	r1, [pc, #772]	; 11458 <__assert_fail@plt+0x360>
   11150:	mov	r0, #6
   11154:	bl	1105c <setlocale@plt>
   11158:	ldr	r1, [pc, #764]	; 1145c <__assert_fail@plt+0x364>
   1115c:	ldr	r0, [pc, #764]	; 11460 <__assert_fail@plt+0x368>
   11160:	bl	110a4 <bindtextdomain@plt>
   11164:	ldr	r0, [pc, #756]	; 11460 <__assert_fail@plt+0x368>
   11168:	bl	10f0c <textdomain@plt>
   1116c:	ldr	r0, [pc, #752]	; 11464 <__assert_fail@plt+0x36c>
   11170:	bl	14de8 <__assert_fail@plt+0x3cf0>
   11174:	strb	r5, [r4, #4]
   11178:	strb	r5, [r4, #16]
   1117c:	strb	r5, [r4, #29]
   11180:	mov	r6, #0
   11184:	ldr	r3, [pc, #732]	; 11468 <__assert_fail@plt+0x370>
   11188:	mov	r1, sl
   1118c:	mov	r0, r9
   11190:	ldr	r2, [pc, #724]	; 1146c <__assert_fail@plt+0x374>
   11194:	str	r6, [sp]
   11198:	bl	10f9c <getopt_long@plt>
   1119c:	cmn	r0, #1
   111a0:	bne	111e8 <__assert_fail@plt+0xf0>
   111a4:	cmp	r5, r6
   111a8:	moveq	r2, #5
   111ac:	ldreq	r1, [pc, #700]	; 11470 <__assert_fail@plt+0x378>
   111b0:	beq	112ac <__assert_fail@plt+0x1b4>
   111b4:	cmp	r8, #0
   111b8:	beq	11350 <__assert_fail@plt+0x258>
   111bc:	cmp	r7, #0
   111c0:	movne	r2, #5
   111c4:	ldrne	r1, [pc, #680]	; 11474 <__assert_fail@plt+0x37c>
   111c8:	bne	112ac <__assert_fail@plt+0x1b4>
   111cc:	ldrb	r3, [r4, #4]
   111d0:	cmp	r3, #0
   111d4:	movne	r2, #5
   111d8:	ldrne	r1, [pc, #664]	; 11478 <__assert_fail@plt+0x380>
   111dc:	bne	112ac <__assert_fail@plt+0x1b4>
   111e0:	mov	r3, #4
   111e4:	b	11354 <__assert_fail@plt+0x25c>
   111e8:	cmp	r0, #102	; 0x66
   111ec:	beq	1129c <__assert_fail@plt+0x1a4>
   111f0:	bgt	11250 <__assert_fail@plt+0x158>
   111f4:	cmp	r0, #99	; 0x63
   111f8:	bgt	11220 <__assert_fail@plt+0x128>
   111fc:	cmp	r0, #98	; 0x62
   11200:	bge	11298 <__assert_fail@plt+0x1a0>
   11204:	cmn	r0, #3
   11208:	beq	11310 <__assert_fail@plt+0x218>
   1120c:	cmn	r0, #2
   11210:	moveq	r0, r6
   11214:	beq	1121c <__assert_fail@plt+0x124>
   11218:	mov	r0, #1
   1121c:	bl	11b5c <__assert_fail@plt+0xa64>
   11220:	cmp	r0, #100	; 0x64
   11224:	bne	11218 <__assert_fail@plt+0x120>
   11228:	ldr	r2, [fp]
   1122c:	ldrb	r3, [r2]
   11230:	cmp	r3, #0
   11234:	beq	112d0 <__assert_fail@plt+0x1d8>
   11238:	ldrb	r2, [r2, #1]
   1123c:	cmp	r2, #0
   11240:	beq	112d0 <__assert_fail@plt+0x1d8>
   11244:	mov	r2, #5
   11248:	ldr	r1, [pc, #556]	; 1147c <__assert_fail@plt+0x384>
   1124c:	b	112ac <__assert_fail@plt+0x1b4>
   11250:	cmp	r0, #122	; 0x7a
   11254:	beq	11304 <__assert_fail@plt+0x20c>
   11258:	bgt	11278 <__assert_fail@plt+0x180>
   1125c:	cmp	r0, #110	; 0x6e
   11260:	beq	11180 <__assert_fail@plt+0x88>
   11264:	cmp	r0, #115	; 0x73
   11268:	bne	11218 <__assert_fail@plt+0x120>
   1126c:	mov	r3, #1
   11270:	strb	r3, [r4, #4]
   11274:	b	11180 <__assert_fail@plt+0x88>
   11278:	cmp	r0, #256	; 0x100
   1127c:	beq	112dc <__assert_fail@plt+0x1e4>
   11280:	movw	r3, #257	; 0x101
   11284:	cmp	r0, r3
   11288:	bne	11218 <__assert_fail@plt+0x120>
   1128c:	mov	r3, #1
   11290:	strb	r3, [r4, #30]
   11294:	b	11180 <__assert_fail@plt+0x88>
   11298:	mov	r8, #1
   1129c:	cmp	r5, #0
   112a0:	beq	112c8 <__assert_fail@plt+0x1d0>
   112a4:	ldr	r1, [pc, #468]	; 11480 <__assert_fail@plt+0x388>
   112a8:	mov	r2, #5
   112ac:	mov	r0, #0
   112b0:	bl	10ef4 <dcgettext@plt>
   112b4:	mov	r1, #0
   112b8:	mov	r2, r0
   112bc:	mov	r0, r1
   112c0:	bl	10f60 <error@plt>
   112c4:	b	11218 <__assert_fail@plt+0x120>
   112c8:	ldr	r5, [fp]
   112cc:	b	11180 <__assert_fail@plt+0x88>
   112d0:	mov	r7, #1
   112d4:	strb	r3, [r4, #16]
   112d8:	b	11180 <__assert_fail@plt+0x88>
   112dc:	ldr	r6, [fp]
   112e0:	ldrb	r3, [r6]
   112e4:	cmp	r3, #0
   112e8:	moveq	r0, #1
   112ec:	beq	112f8 <__assert_fail@plt+0x200>
   112f0:	mov	r0, r6
   112f4:	bl	10fc0 <strlen@plt>
   112f8:	str	r0, [r4, #20]
   112fc:	str	r6, [r4, #24]
   11300:	b	11180 <__assert_fail@plt+0x88>
   11304:	ldr	r3, [pc, #376]	; 11484 <__assert_fail@plt+0x38c>
   11308:	strb	r6, [r3]
   1130c:	b	11180 <__assert_fail@plt+0x88>
   11310:	ldr	r3, [pc, #368]	; 11488 <__assert_fail@plt+0x390>
   11314:	ldr	r0, [pc, #368]	; 1148c <__assert_fail@plt+0x394>
   11318:	ldr	r2, [pc, #368]	; 11490 <__assert_fail@plt+0x398>
   1131c:	str	r3, [sp, #8]
   11320:	ldr	r3, [pc, #364]	; 11494 <__assert_fail@plt+0x39c>
   11324:	str	r6, [sp, #12]
   11328:	ldr	r1, [pc, #360]	; 11498 <__assert_fail@plt+0x3a0>
   1132c:	str	r3, [sp, #4]
   11330:	ldr	r3, [pc, #356]	; 1149c <__assert_fail@plt+0x3a4>
   11334:	str	r3, [sp]
   11338:	ldr	r3, [pc, #352]	; 114a0 <__assert_fail@plt+0x3a8>
   1133c:	ldr	r0, [r0]
   11340:	ldr	r3, [r3]
   11344:	bl	14538 <__assert_fail@plt+0x3440>
   11348:	mov	r0, r6
   1134c:	bl	10fb4 <exit@plt>
   11350:	mov	r3, r8
   11354:	ldrb	r2, [r4, #30]
   11358:	mov	r0, r5
   1135c:	cmp	r2, #0
   11360:	movne	r1, #2
   11364:	moveq	r1, #0
   11368:	orr	r1, r3, r1
   1136c:	bl	11efc <__assert_fail@plt+0xe04>
   11370:	cmp	r7, #0
   11374:	moveq	r3, #9
   11378:	strbeq	r3, [r4, #16]
   1137c:	ldr	r3, [r4, #24]
   11380:	cmp	r3, #0
   11384:	bne	113a0 <__assert_fail@plt+0x2a8>
   11388:	ldrb	r3, [r4, #16]
   1138c:	strb	r3, [r4, #28]
   11390:	ldr	r3, [pc, #268]	; 114a4 <__assert_fail@plt+0x3ac>
   11394:	str	r3, [r4, #24]
   11398:	mov	r3, #1
   1139c:	str	r3, [r4, #20]
   113a0:	ldr	r3, [pc, #256]	; 114a8 <__assert_fail@plt+0x3b0>
   113a4:	cmp	r8, #0
   113a8:	ldr	r6, [pc, #252]	; 114ac <__assert_fail@plt+0x3b4>
   113ac:	ldr	r2, [pc, #252]	; 114b0 <__assert_fail@plt+0x3b8>
   113b0:	moveq	r8, r3
   113b4:	ldr	r3, [r6]
   113b8:	movne	r8, r2
   113bc:	cmp	r3, r9
   113c0:	movne	r5, #1
   113c4:	bne	11440 <__assert_fail@plt+0x348>
   113c8:	mov	r1, r8
   113cc:	ldr	r0, [pc, #224]	; 114b4 <__assert_fail@plt+0x3bc>
   113d0:	bl	11a58 <__assert_fail@plt+0x960>
   113d4:	mov	r5, r0
   113d8:	ldrb	r3, [r4, #29]
   113dc:	cmp	r3, #0
   113e0:	beq	11410 <__assert_fail@plt+0x318>
   113e4:	ldr	r3, [pc, #204]	; 114b8 <__assert_fail@plt+0x3c0>
   113e8:	ldr	r0, [r3]
   113ec:	bl	125b0 <__assert_fail@plt+0x14b8>
   113f0:	cmn	r0, #1
   113f4:	bne	11410 <__assert_fail@plt+0x318>
   113f8:	bl	10fd8 <__errno_location@plt>
   113fc:	ldr	r2, [pc, #176]	; 114b4 <__assert_fail@plt+0x3bc>
   11400:	mov	r5, #0
   11404:	ldr	r1, [r0]
   11408:	mov	r0, #0
   1140c:	bl	10f60 <error@plt>
   11410:	eor	r0, r5, #1
   11414:	uxtb	r0, r0
   11418:	add	sp, sp, #20
   1141c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11420:	mov	r1, r8
   11424:	ldr	r0, [sl, r3, lsl #2]
   11428:	bl	11a58 <__assert_fail@plt+0x960>
   1142c:	ldr	r3, [r6]
   11430:	and	r5, r5, r0
   11434:	uxtb	r5, r5
   11438:	add	r3, r3, #1
   1143c:	str	r3, [r6]
   11440:	ldr	r3, [r6]
   11444:	cmp	r3, r9
   11448:	blt	11420 <__assert_fail@plt+0x328>
   1144c:	b	113d8 <__assert_fail@plt+0x2e0>
   11450:	andeq	r6, r2, r8, ror r1
   11454:	andeq	r6, r2, r0, ror r1
   11458:	andeq	r5, r1, r2, ror #12
   1145c:	andeq	r5, r1, r3, ror #12
   11460:	andeq	r5, r1, r0, asr #11
   11464:	andeq	r2, r1, r8, lsr #9
   11468:	andeq	r4, r1, r0, asr lr
   1146c:	andeq	r5, r1, pc, ror #13
   11470:	strdeq	r5, [r1], -fp
   11474:	andeq	r5, r1, r3, lsr r7
   11478:	andeq	r5, r1, r5, ror r7
   1147c:	muleq	r1, sl, r6
   11480:	andeq	r5, r1, fp, ror r6
   11484:	andeq	r6, r2, r4, lsl #2
   11488:	andeq	r5, r1, r3, asr #13
   1148c:	andeq	r6, r2, ip, ror #2
   11490:			; <UNDEFINED> instruction: 0x000155bc
   11494:	ldrdeq	r5, [r1], -r0
   11498:	andeq	r4, r1, r7, lsl pc
   1149c:	andeq	r5, r1, r0, ror #13
   114a0:	andeq	r6, r2, r8, lsl #2
   114a4:	muleq	r2, r4, r1
   114a8:	andeq	r1, r1, r8, ror #11
   114ac:	andeq	r6, r2, r8, asr r1
   114b0:	andeq	r1, r1, r4, asr r9
   114b4:	andeq	r5, r1, r4, lsl r9
   114b8:	andeq	r6, r2, r8, ror #2
   114bc:	mov	fp, #0
   114c0:	mov	lr, #0
   114c4:	pop	{r1}		; (ldr r1, [sp], #4)
   114c8:	mov	r2, sp
   114cc:	push	{r2}		; (str r2, [sp, #-4]!)
   114d0:	push	{r0}		; (str r0, [sp, #-4]!)
   114d4:	ldr	ip, [pc, #16]	; 114ec <__assert_fail@plt+0x3f4>
   114d8:	push	{ip}		; (str ip, [sp, #-4]!)
   114dc:	ldr	r0, [pc, #12]	; 114f0 <__assert_fail@plt+0x3f8>
   114e0:	ldr	r3, [pc, #12]	; 114f4 <__assert_fail@plt+0x3fc>
   114e4:	bl	10f78 <__libc_start_main@plt>
   114e8:	bl	110c8 <abort@plt>
   114ec:	andeq	r4, r1, r4, ror #27
   114f0:	andeq	r1, r1, r0, lsr #2
   114f4:	andeq	r4, r1, r4, lsl #27
   114f8:	ldr	r3, [pc, #20]	; 11514 <__assert_fail@plt+0x41c>
   114fc:	ldr	r2, [pc, #20]	; 11518 <__assert_fail@plt+0x420>
   11500:	add	r3, pc, r3
   11504:	ldr	r2, [r3, r2]
   11508:	cmp	r2, #0
   1150c:	bxeq	lr
   11510:	b	10f90 <__gmon_start__@plt>
   11514:	strdeq	r4, [r1], -r8
   11518:	strdeq	r0, [r0], -r8
   1151c:	ldr	r0, [pc, #24]	; 1153c <__assert_fail@plt+0x444>
   11520:	ldr	r3, [pc, #24]	; 11540 <__assert_fail@plt+0x448>
   11524:	cmp	r3, r0
   11528:	bxeq	lr
   1152c:	ldr	r3, [pc, #16]	; 11544 <__assert_fail@plt+0x44c>
   11530:	cmp	r3, #0
   11534:	bxeq	lr
   11538:	bx	r3
   1153c:	andeq	r6, r2, r0, asr r1
   11540:	andeq	r6, r2, r0, asr r1
   11544:	andeq	r0, r0, r0
   11548:	ldr	r0, [pc, #36]	; 11574 <__assert_fail@plt+0x47c>
   1154c:	ldr	r1, [pc, #36]	; 11578 <__assert_fail@plt+0x480>
   11550:	sub	r1, r1, r0
   11554:	asr	r1, r1, #2
   11558:	add	r1, r1, r1, lsr #31
   1155c:	asrs	r1, r1, #1
   11560:	bxeq	lr
   11564:	ldr	r3, [pc, #16]	; 1157c <__assert_fail@plt+0x484>
   11568:	cmp	r3, #0
   1156c:	bxeq	lr
   11570:	bx	r3
   11574:	andeq	r6, r2, r0, asr r1
   11578:	andeq	r6, r2, r0, asr r1
   1157c:	andeq	r0, r0, r0
   11580:	push	{r4, lr}
   11584:	ldr	r4, [pc, #24]	; 115a4 <__assert_fail@plt+0x4ac>
   11588:	ldrb	r3, [r4]
   1158c:	cmp	r3, #0
   11590:	popne	{r4, pc}
   11594:	bl	1151c <__assert_fail@plt+0x424>
   11598:	mov	r3, #1
   1159c:	strb	r3, [r4]
   115a0:	pop	{r4, pc}
   115a4:	andeq	r6, r2, r4, ror r1
   115a8:	b	11548 <__assert_fail@plt+0x450>
   115ac:	ldr	r3, [r0]
   115b0:	push	{r4, r5, lr}
   115b4:	ldr	r2, [r0, #4]
   115b8:	adds	r4, r3, #1
   115bc:	adc	r5, r2, #0
   115c0:	ldr	r2, [pc, #28]	; 115e4 <__assert_fail@plt+0x4ec>
   115c4:	strd	r4, [r0]
   115c8:	ldr	r3, [r2]
   115cc:	ldrd	r0, [r3, #8]
   115d0:	cmp	r5, r1
   115d4:	cmpeq	r4, r0
   115d8:	addhi	r3, r3, #16
   115dc:	strhi	r3, [r2]
   115e0:	pop	{r4, r5, pc}
   115e4:	andeq	r6, r2, r8, ror r1
   115e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115ec:	mov	fp, #1
   115f0:	sub	sp, sp, #44	; 0x2c
   115f4:	mov	sl, #0
   115f8:	mov	r5, r0
   115fc:	ldr	r9, [pc, #816]	; 11934 <__assert_fail@plt+0x83c>
   11600:	str	fp, [sp, #32]
   11604:	ldr	r4, [pc, #812]	; 11938 <__assert_fail@plt+0x840>
   11608:	str	sl, [sp, #36]	; 0x24
   1160c:	ldr	r3, [r9]
   11610:	str	r3, [r4]
   11614:	bl	10ee8 <getc_unlocked@plt>
   11618:	cmn	r0, #1
   1161c:	beq	1192c <__assert_fail@plt+0x834>
   11620:	mov	r1, r5
   11624:	mov	r6, sl
   11628:	ldr	r7, [pc, #780]	; 1193c <__assert_fail@plt+0x844>
   1162c:	bl	10fcc <ungetc@plt>
   11630:	ldr	r3, [r4]
   11634:	mov	r8, sl
   11638:	str	fp, [sp, #24]
   1163c:	str	sl, [sp, #28]
   11640:	ldrd	r2, [r3]
   11644:	cmp	r3, #0
   11648:	ldrb	r3, [r4, #4]
   1164c:	cmpeq	r2, #1
   11650:	movls	r2, sl
   11654:	ldr	sl, [pc, #740]	; 11940 <__assert_fail@plt+0x848>
   11658:	movhi	r2, fp
   1165c:	eor	r3, r2, r3
   11660:	str	r3, [sp, #20]
   11664:	ldrd	r2, [sp, #32]
   11668:	cmp	r3, #0
   1166c:	ldr	r3, [sp, #20]
   11670:	cmpeq	r2, #1
   11674:	movne	fp, #0
   11678:	andeq	fp, r3, #1
   1167c:	cmp	fp, #0
   11680:	beq	117b0 <__assert_fail@plt+0x6b8>
   11684:	ldrb	r3, [r7]
   11688:	mov	r2, #0
   1168c:	ldr	r1, [pc, #688]	; 11944 <__assert_fail@plt+0x84c>
   11690:	stmib	sp, {r3, r5}
   11694:	ldrb	r3, [r4, #16]
   11698:	add	r0, r1, #4
   1169c:	str	r3, [sp]
   116a0:	mvn	r3, #0
   116a4:	bl	12790 <__assert_fail@plt+0x1698>
   116a8:	subs	r2, r0, #0
   116ac:	bge	116e4 <__assert_fail@plt+0x5ec>
   116b0:	ldr	r0, [r4, #12]
   116b4:	bl	126a8 <__assert_fail@plt+0x15b0>
   116b8:	mov	r3, #0
   116bc:	mov	r0, r5
   116c0:	str	r3, [r4, #12]
   116c4:	bl	10f48 <ferror_unlocked@plt>
   116c8:	cmp	r0, #0
   116cc:	bne	1192c <__assert_fail@plt+0x834>
   116d0:	mov	r0, r5
   116d4:	bl	110d4 <feof_unlocked@plt>
   116d8:	cmp	r0, #0
   116dc:	bne	1192c <__assert_fail@plt+0x834>
   116e0:	bl	148b8 <__assert_fail@plt+0x37c0>
   116e4:	bne	116fc <__assert_fail@plt+0x604>
   116e8:	ldr	r3, [pc, #600]	; 11948 <__assert_fail@plt+0x850>
   116ec:	movw	r2, #315	; 0x13b
   116f0:	ldr	r1, [pc, #596]	; 1194c <__assert_fail@plt+0x854>
   116f4:	ldr	r0, [pc, #596]	; 11950 <__assert_fail@plt+0x858>
   116f8:	bl	110f8 <__assert_fail@plt>
   116fc:	ldr	r0, [r4, #12]
   11700:	sub	r8, r2, #1
   11704:	ldrb	r3, [r4, #16]
   11708:	ldrb	r1, [r0, r8]
   1170c:	cmp	r1, r3
   11710:	beq	11754 <__assert_fail@plt+0x65c>
   11714:	ldrb	r3, [r4, #4]
   11718:	cmp	r3, #0
   1171c:	movne	fp, #0
   11720:	bne	1174c <__assert_fail@plt+0x654>
   11724:	mov	r1, #1
   11728:	ldr	r3, [sl]
   1172c:	bl	10ec4 <fwrite_unlocked@plt>
   11730:	ldr	r3, [r4, #12]
   11734:	ldrb	r0, [r7]
   11738:	ldrb	r3, [r3, r8]
   1173c:	cmp	r3, r0
   11740:	beq	11748 <__assert_fail@plt+0x650>
   11744:	bl	110e0 <putchar_unlocked@plt>
   11748:	ldrb	fp, [r7]
   1174c:	mov	r8, fp
   11750:	b	11664 <__assert_fail@plt+0x56c>
   11754:	ldr	r3, [r4]
   11758:	ldrd	r2, [r3]
   1175c:	cmp	r3, #0
   11760:	cmpeq	r2, #1
   11764:	bhi	117a4 <__assert_fail@plt+0x6ac>
   11768:	mov	r2, r8
   1176c:	mov	r1, #1
   11770:	ldr	r3, [sl]
   11774:	bl	10ec4 <fwrite_unlocked@plt>
   11778:	ldrb	r2, [r4, #16]
   1177c:	ldrb	r3, [r7]
   11780:	cmp	r2, r3
   11784:	bne	117a0 <__assert_fail@plt+0x6a8>
   11788:	mov	r0, r5
   1178c:	bl	10ee8 <getc_unlocked@plt>
   11790:	cmn	r0, #1
   11794:	beq	117a4 <__assert_fail@plt+0x6ac>
   11798:	mov	r1, r5
   1179c:	bl	10fcc <ungetc@plt>
   117a0:	mov	r6, fp
   117a4:	add	r0, sp, #32
   117a8:	mov	r8, #0
   117ac:	bl	115ac <__assert_fail@plt+0x4b4>
   117b0:	ldr	r3, [r4]
   117b4:	ldrd	r0, [r3]
   117b8:	ldrd	r2, [sp, #32]
   117bc:	cmp	r3, r1
   117c0:	cmpeq	r2, r0
   117c4:	bcc	11828 <__assert_fail@plt+0x730>
   117c8:	cmp	r6, #0
   117cc:	beq	117e4 <__assert_fail@plt+0x6ec>
   117d0:	mov	r1, #1
   117d4:	ldr	r3, [sl]
   117d8:	ldr	r2, [r4, #20]
   117dc:	ldr	r0, [r4, #24]
   117e0:	bl	10ec4 <fwrite_unlocked@plt>
   117e4:	mov	r0, r5
   117e8:	bl	10ee8 <getc_unlocked@plt>
   117ec:	ldrb	r3, [r4, #16]
   117f0:	mov	fp, r0
   117f4:	cmp	r3, r0
   117f8:	beq	11810 <__assert_fail@plt+0x718>
   117fc:	ldrb	r3, [r7]
   11800:	cmp	r3, r0
   11804:	beq	11810 <__assert_fail@plt+0x718>
   11808:	cmn	r0, #1
   1180c:	bne	11818 <__assert_fail@plt+0x720>
   11810:	mov	r6, #1
   11814:	b	11854 <__assert_fail@plt+0x75c>
   11818:	bl	110e0 <putchar_unlocked@plt>
   1181c:	mov	r8, fp
   11820:	b	117e4 <__assert_fail@plt+0x6ec>
   11824:	mov	r8, fp
   11828:	mov	r0, r5
   1182c:	bl	10ee8 <getc_unlocked@plt>
   11830:	ldrb	r3, [r4, #16]
   11834:	mov	fp, r0
   11838:	cmp	r3, r0
   1183c:	beq	11854 <__assert_fail@plt+0x75c>
   11840:	ldrb	r3, [r7]
   11844:	cmp	r3, r0
   11848:	beq	11854 <__assert_fail@plt+0x75c>
   1184c:	cmn	r0, #1
   11850:	bne	11824 <__assert_fail@plt+0x72c>
   11854:	ldrb	r2, [r4, #16]
   11858:	ldrb	r3, [r7]
   1185c:	cmp	r3, r2
   11860:	bne	11888 <__assert_fail@plt+0x790>
   11864:	cmp	fp, r3
   11868:	bne	11888 <__assert_fail@plt+0x790>
   1186c:	mov	r0, r5
   11870:	bl	10ee8 <getc_unlocked@plt>
   11874:	cmn	r0, #1
   11878:	moveq	fp, r0
   1187c:	beq	11888 <__assert_fail@plt+0x790>
   11880:	mov	r1, r5
   11884:	bl	10fcc <ungetc@plt>
   11888:	ldrb	r1, [r4, #16]
   1188c:	cmp	r1, fp
   11890:	bne	118a0 <__assert_fail@plt+0x7a8>
   11894:	add	r0, sp, #32
   11898:	bl	115ac <__assert_fail@plt+0x4b4>
   1189c:	b	1174c <__assert_fail@plt+0x654>
   118a0:	ldrb	r0, [r7]
   118a4:	sub	ip, r0, fp
   118a8:	cmp	r0, fp
   118ac:	cmnne	fp, #1
   118b0:	clz	ip, ip
   118b4:	lsr	ip, ip, #5
   118b8:	bne	1174c <__assert_fail@plt+0x654>
   118bc:	cmp	r6, #0
   118c0:	bne	118e0 <__assert_fail@plt+0x7e8>
   118c4:	ldrb	r3, [r4, #4]
   118c8:	cmp	r3, #0
   118cc:	beq	118e0 <__assert_fail@plt+0x7e8>
   118d0:	ldrd	r2, [sp, #32]
   118d4:	cmp	r3, #0
   118d8:	cmpeq	r2, #1
   118dc:	beq	11904 <__assert_fail@plt+0x80c>
   118e0:	sub	r1, r1, r0
   118e4:	clz	r1, r1
   118e8:	lsr	r1, r1, #5
   118ec:	cmp	r0, r8
   118f0:	moveq	r8, r1
   118f4:	orrne	r8, r1, #1
   118f8:	orrs	r3, ip, r8
   118fc:	beq	1192c <__assert_fail@plt+0x834>
   11900:	bl	110e0 <putchar_unlocked@plt>
   11904:	cmn	fp, #1
   11908:	beq	1192c <__assert_fail@plt+0x834>
   1190c:	ldr	r3, [sp, #24]
   11910:	mov	r6, #0
   11914:	str	r3, [sp, #32]
   11918:	ldr	r3, [sp, #28]
   1191c:	str	r3, [sp, #36]	; 0x24
   11920:	ldr	r3, [r9]
   11924:	str	r3, [r4]
   11928:	b	1174c <__assert_fail@plt+0x654>
   1192c:	add	sp, sp, #44	; 0x2c
   11930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11934:	andeq	r6, r2, r0, lsr #3
   11938:	andeq	r6, r2, r8, ror r1
   1193c:	andeq	r6, r2, r4, lsl #2
   11940:	andeq	r6, r2, ip, ror #2
   11944:	andeq	r6, r2, r0, lsl #3
   11948:	andeq	r4, r1, ip, lsl #28
   1194c:	andeq	r4, r1, r0, lsl #30
   11950:	andeq	r4, r1, sl, lsl #30
   11954:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11958:	mov	r3, #0
   1195c:	mov	r2, #0
   11960:	mov	r8, r0
   11964:	mov	r5, #0
   11968:	ldr	r6, [pc, #216]	; 11a48 <__assert_fail@plt+0x950>
   1196c:	strd	r2, [sp]
   11970:	ldr	r4, [pc, #212]	; 11a4c <__assert_fail@plt+0x954>
   11974:	ldr	r9, [pc, #212]	; 11a50 <__assert_fail@plt+0x958>
   11978:	ldr	fp, [pc, #212]	; 11a54 <__assert_fail@plt+0x95c>
   1197c:	add	sl, r4, #28
   11980:	ldr	r3, [r6]
   11984:	str	r3, [r4]
   11988:	mov	r0, r8
   1198c:	bl	10ee8 <getc_unlocked@plt>
   11990:	ldrb	r3, [r9]
   11994:	mov	r7, r0
   11998:	cmp	r3, r0
   1199c:	bne	119c0 <__assert_fail@plt+0x8c8>
   119a0:	bl	110e0 <putchar_unlocked@plt>
   119a4:	mov	r3, #0
   119a8:	mov	r2, #0
   119ac:	mov	r5, #0
   119b0:	strd	r2, [sp]
   119b4:	ldr	r3, [r6]
   119b8:	str	r3, [r4]
   119bc:	b	11988 <__assert_fail@plt+0x890>
   119c0:	cmn	r0, #1
   119c4:	bne	119e4 <__assert_fail@plt+0x8ec>
   119c8:	ldrd	r0, [sp]
   119cc:	orrs	r2, r0, r1
   119d0:	beq	119dc <__assert_fail@plt+0x8e4>
   119d4:	mov	r0, r3
   119d8:	bl	110e0 <putchar_unlocked@plt>
   119dc:	add	sp, sp, #12
   119e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119e4:	mov	r0, sp
   119e8:	bl	115ac <__assert_fail@plt+0x4b4>
   119ec:	ldr	r3, [r4]
   119f0:	ldrd	r0, [sp]
   119f4:	ldrd	r2, [r3]
   119f8:	cmp	r1, r3
   119fc:	cmpeq	r0, r2
   11a00:	bcc	11988 <__assert_fail@plt+0x890>
   11a04:	ldr	ip, [r4, #24]
   11a08:	cmp	ip, sl
   11a0c:	beq	11a3c <__assert_fail@plt+0x944>
   11a10:	cmp	r1, r3
   11a14:	cmpeq	r0, r2
   11a18:	movne	r5, #0
   11a1c:	cmp	r5, #0
   11a20:	moveq	r5, #1
   11a24:	beq	11a3c <__assert_fail@plt+0x944>
   11a28:	mov	r1, #1
   11a2c:	mov	r0, ip
   11a30:	ldr	r3, [fp]
   11a34:	ldr	r2, [r4, #20]
   11a38:	bl	10ec4 <fwrite_unlocked@plt>
   11a3c:	mov	r0, r7
   11a40:	bl	110e0 <putchar_unlocked@plt>
   11a44:	b	11988 <__assert_fail@plt+0x890>
   11a48:	andeq	r6, r2, r0, lsr #3
   11a4c:	andeq	r6, r2, r8, ror r1
   11a50:	andeq	r6, r2, r4, lsl #2
   11a54:	andeq	r6, r2, ip, ror #2
   11a58:	push	{r4, r5, r6, r7, r8, lr}
   11a5c:	mov	r5, r1
   11a60:	mov	r6, r0
   11a64:	ldr	r1, [pc, #220]	; 11b48 <__assert_fail@plt+0xa50>
   11a68:	bl	10e58 <strcmp@plt>
   11a6c:	mov	r4, r0
   11a70:	bl	10fd8 <__errno_location@plt>
   11a74:	cmp	r4, #0
   11a78:	mov	r7, r0
   11a7c:	bne	11af0 <__assert_fail@plt+0x9f8>
   11a80:	ldr	r3, [pc, #196]	; 11b4c <__assert_fail@plt+0xa54>
   11a84:	mov	r2, #1
   11a88:	strb	r2, [r3, #29]
   11a8c:	ldr	r3, [pc, #188]	; 11b50 <__assert_fail@plt+0xa58>
   11a90:	ldr	r4, [r3]
   11a94:	mov	r1, #2
   11a98:	mov	r0, r4
   11a9c:	bl	12580 <__assert_fail@plt+0x1488>
   11aa0:	mov	r0, r4
   11aa4:	blx	r5
   11aa8:	mov	r0, r4
   11aac:	ldr	r5, [r7]
   11ab0:	bl	10f48 <ferror_unlocked@plt>
   11ab4:	cmp	r0, #0
   11ab8:	ldr	r1, [pc, #136]	; 11b48 <__assert_fail@plt+0xa50>
   11abc:	mov	r0, r6
   11ac0:	moveq	r5, #0
   11ac4:	bl	10e58 <strcmp@plt>
   11ac8:	cmp	r0, #0
   11acc:	mov	r0, r4
   11ad0:	bne	11b30 <__assert_fail@plt+0xa38>
   11ad4:	bl	11080 <clearerr_unlocked@plt>
   11ad8:	cmp	r5, #0
   11adc:	beq	11b40 <__assert_fail@plt+0xa48>
   11ae0:	mov	r2, r6
   11ae4:	mov	r1, #3
   11ae8:	mov	r0, #0
   11aec:	b	11b10 <__assert_fail@plt+0xa18>
   11af0:	ldr	r1, [pc, #92]	; 11b54 <__assert_fail@plt+0xa5c>
   11af4:	mov	r0, r6
   11af8:	bl	1108c <fopen64@plt>
   11afc:	subs	r4, r0, #0
   11b00:	moveq	r2, r6
   11b04:	moveq	r1, #3
   11b08:	ldreq	r5, [r7]
   11b0c:	bne	11a94 <__assert_fail@plt+0x99c>
   11b10:	bl	13fac <__assert_fail@plt+0x2eb4>
   11b14:	mov	r3, r0
   11b18:	ldr	r2, [pc, #56]	; 11b58 <__assert_fail@plt+0xa60>
   11b1c:	mov	r1, r5
   11b20:	mov	r0, #0
   11b24:	bl	10f60 <error@plt>
   11b28:	mov	r0, #0
   11b2c:	pop	{r4, r5, r6, r7, r8, pc}
   11b30:	bl	125b0 <__assert_fail@plt+0x14b8>
   11b34:	cmn	r0, #1
   11b38:	ldreq	r5, [r7]
   11b3c:	b	11ad8 <__assert_fail@plt+0x9e0>
   11b40:	mov	r0, #1
   11b44:	pop	{r4, r5, r6, r7, r8, pc}
   11b48:	andeq	r5, r1, r4, lsl r9
   11b4c:	andeq	r6, r2, r8, ror r1
   11b50:	andeq	r6, r2, r8, ror #2
   11b54:	andeq	r5, r1, r1, asr #13
   11b58:	andeq	r5, r1, r6, lsl sl
   11b5c:	subs	r5, r0, #0
   11b60:	push	{r7, lr}
   11b64:	sub	sp, sp, #56	; 0x38
   11b68:	ldr	r4, [pc, #664]	; 11e08 <__assert_fail@plt+0xd10>
   11b6c:	beq	11ba4 <__assert_fail@plt+0xaac>
   11b70:	mov	r2, #5
   11b74:	mov	r0, #0
   11b78:	ldr	r3, [pc, #652]	; 11e0c <__assert_fail@plt+0xd14>
   11b7c:	ldr	r1, [pc, #652]	; 11e10 <__assert_fail@plt+0xd18>
   11b80:	ldr	r6, [r3]
   11b84:	bl	10ef4 <dcgettext@plt>
   11b88:	mov	r2, r0
   11b8c:	mov	r1, #1
   11b90:	ldr	r3, [r4]
   11b94:	mov	r0, r6
   11b98:	bl	11020 <__fprintf_chk@plt>
   11b9c:	mov	r0, r5
   11ba0:	bl	10fb4 <exit@plt>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #612]	; 11e14 <__assert_fail@plt+0xd1c>
   11bac:	mov	r6, sp
   11bb0:	bl	10ef4 <dcgettext@plt>
   11bb4:	ldr	r2, [r4]
   11bb8:	mov	r1, r0
   11bbc:	mov	r0, #1
   11bc0:	bl	11008 <__printf_chk@plt>
   11bc4:	ldr	r4, [pc, #588]	; 11e18 <__assert_fail@plt+0xd20>
   11bc8:	mov	r2, #5
   11bcc:	mov	r0, r5
   11bd0:	ldr	r1, [pc, #580]	; 11e1c <__assert_fail@plt+0xd24>
   11bd4:	bl	10ef4 <dcgettext@plt>
   11bd8:	ldr	r7, [pc, #576]	; 11e20 <__assert_fail@plt+0xd28>
   11bdc:	ldr	r1, [r4]
   11be0:	bl	10e4c <fputs_unlocked@plt>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #564]	; 11e24 <__assert_fail@plt+0xd2c>
   11bec:	mov	r0, r5
   11bf0:	bl	10ef4 <dcgettext@plt>
   11bf4:	ldr	r1, [r4]
   11bf8:	bl	10e4c <fputs_unlocked@plt>
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #544]	; 11e28 <__assert_fail@plt+0xd30>
   11c04:	mov	r0, r5
   11c08:	bl	10ef4 <dcgettext@plt>
   11c0c:	ldr	r1, [r4]
   11c10:	bl	10e4c <fputs_unlocked@plt>
   11c14:	mov	r2, #5
   11c18:	ldr	r1, [pc, #524]	; 11e2c <__assert_fail@plt+0xd34>
   11c1c:	mov	r0, r5
   11c20:	bl	10ef4 <dcgettext@plt>
   11c24:	ldr	r1, [r4]
   11c28:	bl	10e4c <fputs_unlocked@plt>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #504]	; 11e30 <__assert_fail@plt+0xd38>
   11c34:	mov	r0, r5
   11c38:	bl	10ef4 <dcgettext@plt>
   11c3c:	ldr	r1, [r4]
   11c40:	bl	10e4c <fputs_unlocked@plt>
   11c44:	mov	r2, #5
   11c48:	ldr	r1, [pc, #484]	; 11e34 <__assert_fail@plt+0xd3c>
   11c4c:	mov	r0, r5
   11c50:	bl	10ef4 <dcgettext@plt>
   11c54:	ldr	r1, [r4]
   11c58:	bl	10e4c <fputs_unlocked@plt>
   11c5c:	mov	r2, #5
   11c60:	ldr	r1, [pc, #464]	; 11e38 <__assert_fail@plt+0xd40>
   11c64:	mov	r0, r5
   11c68:	bl	10ef4 <dcgettext@plt>
   11c6c:	ldr	r1, [r4]
   11c70:	bl	10e4c <fputs_unlocked@plt>
   11c74:	mov	r2, #5
   11c78:	ldr	r1, [pc, #444]	; 11e3c <__assert_fail@plt+0xd44>
   11c7c:	mov	r0, r5
   11c80:	bl	10ef4 <dcgettext@plt>
   11c84:	ldr	r1, [r4]
   11c88:	bl	10e4c <fputs_unlocked@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #424]	; 11e40 <__assert_fail@plt+0xd48>
   11c94:	mov	r0, r5
   11c98:	bl	10ef4 <dcgettext@plt>
   11c9c:	ldr	r1, [r4]
   11ca0:	bl	10e4c <fputs_unlocked@plt>
   11ca4:	mov	r2, #5
   11ca8:	ldr	r1, [pc, #404]	; 11e44 <__assert_fail@plt+0xd4c>
   11cac:	mov	r0, r5
   11cb0:	bl	10ef4 <dcgettext@plt>
   11cb4:	ldr	r1, [r4]
   11cb8:	bl	10e4c <fputs_unlocked@plt>
   11cbc:	mov	r2, #5
   11cc0:	ldr	r1, [pc, #384]	; 11e48 <__assert_fail@plt+0xd50>
   11cc4:	mov	r0, r5
   11cc8:	bl	10ef4 <dcgettext@plt>
   11ccc:	ldr	r1, [r4]
   11cd0:	bl	10e4c <fputs_unlocked@plt>
   11cd4:	mov	r2, #5
   11cd8:	ldr	r1, [pc, #364]	; 11e4c <__assert_fail@plt+0xd54>
   11cdc:	mov	r0, r5
   11ce0:	bl	10ef4 <dcgettext@plt>
   11ce4:	ldr	r1, [r4]
   11ce8:	bl	10e4c <fputs_unlocked@plt>
   11cec:	ldr	lr, [pc, #348]	; 11e50 <__assert_fail@plt+0xd58>
   11cf0:	mov	ip, sp
   11cf4:	ldm	lr!, {r0, r1, r2, r3}
   11cf8:	stmia	ip!, {r0, r1, r2, r3}
   11cfc:	ldm	lr!, {r0, r1, r2, r3}
   11d00:	stmia	ip!, {r0, r1, r2, r3}
   11d04:	ldm	lr!, {r0, r1, r2, r3}
   11d08:	stmia	ip!, {r0, r1, r2, r3}
   11d0c:	ldm	lr, {r0, r1}
   11d10:	stm	ip, {r0, r1}
   11d14:	ldr	r1, [r6]
   11d18:	cmp	r1, #0
   11d1c:	bne	11dc0 <__assert_fail@plt+0xcc8>
   11d20:	ldr	r6, [r6, #4]
   11d24:	mov	r2, #5
   11d28:	mov	r0, #0
   11d2c:	ldr	r7, [pc, #236]	; 11e20 <__assert_fail@plt+0xd28>
   11d30:	ldr	r1, [pc, #284]	; 11e54 <__assert_fail@plt+0xd5c>
   11d34:	cmp	r6, #0
   11d38:	moveq	r6, r7
   11d3c:	bl	10ef4 <dcgettext@plt>
   11d40:	mov	r1, r0
   11d44:	ldr	r3, [pc, #268]	; 11e58 <__assert_fail@plt+0xd60>
   11d48:	mov	r0, #1
   11d4c:	ldr	r2, [pc, #264]	; 11e5c <__assert_fail@plt+0xd64>
   11d50:	bl	11008 <__printf_chk@plt>
   11d54:	mov	r1, #0
   11d58:	mov	r0, #5
   11d5c:	bl	1105c <setlocale@plt>
   11d60:	cmp	r0, #0
   11d64:	bne	11dd8 <__assert_fail@plt+0xce0>
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #236]	; 11e60 <__assert_fail@plt+0xd68>
   11d70:	mov	r0, #0
   11d74:	bl	10ef4 <dcgettext@plt>
   11d78:	mov	r1, r0
   11d7c:	ldr	r3, [pc, #156]	; 11e20 <__assert_fail@plt+0xd28>
   11d80:	mov	r0, #1
   11d84:	ldr	r2, [pc, #204]	; 11e58 <__assert_fail@plt+0xd60>
   11d88:	bl	11008 <__printf_chk@plt>
   11d8c:	mov	r2, #5
   11d90:	ldr	r1, [pc, #204]	; 11e64 <__assert_fail@plt+0xd6c>
   11d94:	mov	r0, #0
   11d98:	bl	10ef4 <dcgettext@plt>
   11d9c:	ldr	r2, [pc, #196]	; 11e68 <__assert_fail@plt+0xd70>
   11da0:	cmp	r6, r7
   11da4:	mov	r1, r0
   11da8:	mov	r0, #1
   11dac:	ldr	r3, [pc, #184]	; 11e6c <__assert_fail@plt+0xd74>
   11db0:	moveq	r3, r2
   11db4:	mov	r2, r6
   11db8:	bl	11008 <__printf_chk@plt>
   11dbc:	b	11b9c <__assert_fail@plt+0xaa4>
   11dc0:	mov	r0, r7
   11dc4:	bl	10e58 <strcmp@plt>
   11dc8:	cmp	r0, #0
   11dcc:	beq	11d20 <__assert_fail@plt+0xc28>
   11dd0:	add	r6, r6, #8
   11dd4:	b	11d14 <__assert_fail@plt+0xc1c>
   11dd8:	mov	r2, #3
   11ddc:	ldr	r1, [pc, #140]	; 11e70 <__assert_fail@plt+0xd78>
   11de0:	bl	110bc <strncmp@plt>
   11de4:	cmp	r0, #0
   11de8:	beq	11d68 <__assert_fail@plt+0xc70>
   11dec:	mov	r2, #5
   11df0:	ldr	r1, [pc, #124]	; 11e74 <__assert_fail@plt+0xd7c>
   11df4:	mov	r0, #0
   11df8:	bl	10ef4 <dcgettext@plt>
   11dfc:	ldr	r1, [r4]
   11e00:	bl	10e4c <fputs_unlocked@plt>
   11e04:	b	11d68 <__assert_fail@plt+0xc70>
   11e08:			; <UNDEFINED> instruction: 0x000261b0
   11e0c:	andeq	r6, r2, r0, ror #2
   11e10:	andeq	r4, r1, fp, lsl pc
   11e14:	andeq	r4, r1, r2, asr #30
   11e18:	andeq	r6, r2, ip, ror #2
   11e1c:	andeq	r4, r1, r1, ror #30
   11e20:	andeq	r4, r1, r7, lsl pc
   11e24:	andeq	r4, r1, r3, lsr #31
   11e28:	ldrdeq	r4, [r1], -fp
   11e2c:	andeq	r5, r1, r6, lsr #32
   11e30:	ldrdeq	r5, [r1], -r7
   11e34:	andeq	r5, r1, r5, asr #3
   11e38:	andeq	r5, r1, r7, lsr r2
   11e3c:	andeq	r5, r1, r9, lsl #6
   11e40:	andeq	r5, r1, r8, asr #6
   11e44:	andeq	r5, r1, r5, ror r3
   11e48:	andeq	r5, r1, fp, lsr #7
   11e4c:	andeq	r5, r1, r7, ror r4
   11e50:	andeq	r4, r1, r8, lsl lr
   11e54:	andeq	r5, r1, sp, ror r5
   11e58:	muleq	r1, r4, r5
   11e5c:			; <UNDEFINED> instruction: 0x000155bc
   11e60:	andeq	r5, r1, r5, lsl r6
   11e64:	andeq	r5, r1, r0, lsr r6
   11e68:	ldrdeq	r5, [r1], -ip
   11e6c:	andeq	r5, r1, r2, ror #12
   11e70:	andeq	r5, r1, sl, asr #11
   11e74:	andeq	r5, r1, lr, asr #11
   11e78:	ldr	r2, [r0]
   11e7c:	ldr	r3, [r1]
   11e80:	cmp	r2, r3
   11e84:	blt	11e94 <__assert_fail@plt+0xd9c>
   11e88:	movgt	r0, #1
   11e8c:	movle	r0, #0
   11e90:	bx	lr
   11e94:	mvn	r0, #0
   11e98:	bx	lr
   11e9c:	push	{r4, r6, r7, r8, r9, lr}
   11ea0:	mov	r6, r2
   11ea4:	mov	r7, r3
   11ea8:	mov	r8, r0
   11eac:	mov	r9, r1
   11eb0:	ldr	r4, [pc, #64]	; 11ef8 <__assert_fail@plt+0xe00>
   11eb4:	ldrd	r2, [r4]
   11eb8:	cmp	r2, r3
   11ebc:	bne	11ed4 <__assert_fail@plt+0xddc>
   11ec0:	mov	r2, #16
   11ec4:	add	r1, r4, #4
   11ec8:	ldr	r0, [r4, #8]
   11ecc:	bl	146e0 <__assert_fail@plt+0x35e8>
   11ed0:	str	r0, [r4, #8]
   11ed4:	ldr	r3, [r4]
   11ed8:	ldr	r1, [r4, #8]
   11edc:	lsl	r2, r3, #4
   11ee0:	add	r3, r3, #1
   11ee4:	add	r0, r1, r2
   11ee8:	strd	r8, [r1, r2]
   11eec:	str	r3, [r4]
   11ef0:	strd	r6, [r0, #8]
   11ef4:	pop	{r4, r6, r7, r8, r9, pc}
   11ef8:	muleq	r2, r8, r1
   11efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f00:	ands	r8, r1, #1
   11f04:	sub	sp, sp, #36	; 0x24
   11f08:	mov	r7, r0
   11f0c:	mov	sl, r1
   11f10:	moveq	r4, #0
   11f14:	moveq	r5, #0
   11f18:	streq	r8, [sp, #16]
   11f1c:	beq	11f4c <__assert_fail@plt+0xe54>
   11f20:	ldr	r1, [pc, #1312]	; 12448 <__assert_fail@plt+0x1350>
   11f24:	bl	10e58 <strcmp@plt>
   11f28:	cmp	r0, #0
   11f2c:	moveq	r3, #1
   11f30:	movne	r3, #0
   11f34:	addeq	r7, r7, #1
   11f38:	moveq	r4, #1
   11f3c:	moveq	r5, #0
   11f40:	movne	r4, #0
   11f44:	str	r3, [sp, #16]
   11f48:	movne	r5, #0
   11f4c:	ldr	r9, [sp, #16]
   11f50:	mov	r2, #1
   11f54:	mov	r3, #0
   11f58:	str	r7, [sp, #20]
   11f5c:	mov	r7, #0
   11f60:	mov	fp, r7
   11f64:	strd	r2, [sp, #8]
   11f68:	ldr	r3, [sp, #20]
   11f6c:	mov	r6, r3
   11f70:	ldrb	r1, [r3], #1
   11f74:	cmp	r1, #45	; 0x2d
   11f78:	str	r3, [sp, #20]
   11f7c:	bne	12038 <__assert_fail@plt+0xf40>
   11f80:	cmp	r9, #0
   11f84:	beq	11fd8 <__assert_fail@plt+0xee0>
   11f88:	ands	r0, sl, #4
   11f8c:	mov	r2, #5
   11f90:	ldrne	r1, [pc, #1204]	; 1244c <__assert_fail@plt+0x1354>
   11f94:	ldreq	r1, [pc, #1204]	; 12450 <__assert_fail@plt+0x1358>
   11f98:	beq	11fa0 <__assert_fail@plt+0xea8>
   11f9c:	mov	r0, #0
   11fa0:	bl	10ef4 <dcgettext@plt>
   11fa4:	mov	r1, #0
   11fa8:	mov	r2, r0
   11fac:	mov	r0, r1
   11fb0:	bl	10f60 <error@plt>
   11fb4:	b	12224 <__assert_fail@plt+0x112c>
   11fb8:	mov	r2, #0
   11fbc:	mov	r3, #0
   11fc0:	ldr	r9, [sp, #16]
   11fc4:	strd	r2, [sp]
   11fc8:	strd	r4, [sp, #8]
   11fcc:	b	12030 <__assert_fail@plt+0xf38>
   11fd0:	mov	r7, #1
   11fd4:	b	12030 <__assert_fail@plt+0xf38>
   11fd8:	orrs	r3, r4, r5
   11fdc:	ldr	r3, [sp, #16]
   11fe0:	movne	r7, #0
   11fe4:	andeq	r7, r3, #1
   11fe8:	cmp	r7, #0
   11fec:	beq	12004 <__assert_fail@plt+0xf0c>
   11ff0:	tst	sl, #4
   11ff4:	mov	r2, #5
   11ff8:	ldrne	r1, [pc, #1108]	; 12454 <__assert_fail@plt+0x135c>
   11ffc:	ldreq	r1, [pc, #1108]	; 12458 <__assert_fail@plt+0x1360>
   12000:	b	11f9c <__assert_fail@plt+0xea4>
   12004:	ldr	r3, [sp, #16]
   12008:	cmp	r3, #0
   1200c:	bne	11fb8 <__assert_fail@plt+0xec0>
   12010:	ldr	r7, [sp, #16]
   12014:	mov	r2, #0
   12018:	mov	r3, #0
   1201c:	mov	r9, #1
   12020:	strd	r2, [sp]
   12024:	mov	r2, #1
   12028:	mov	r3, #0
   1202c:	strd	r2, [sp, #8]
   12030:	ldrd	r4, [sp]
   12034:	b	11f68 <__assert_fail@plt+0xe70>
   12038:	cmp	r1, #44	; 0x2c
   1203c:	str	r1, [sp]
   12040:	beq	1206c <__assert_fail@plt+0xf74>
   12044:	bl	10fa8 <__ctype_b_loc@plt>
   12048:	ldr	r1, [sp]
   1204c:	ldr	r2, [r0]
   12050:	lsl	r3, r1, #1
   12054:	cmp	r1, #0
   12058:	ldrh	r3, [r2, r3]
   1205c:	moveq	r3, #1
   12060:	andne	r3, r3, #1
   12064:	cmp	r3, #0
   12068:	beq	12130 <__assert_fail@plt+0x1038>
   1206c:	cmp	r9, #0
   12070:	beq	12114 <__assert_fail@plt+0x101c>
   12074:	ldr	r3, [sp, #16]
   12078:	orr	r6, r3, fp
   1207c:	tst	r6, #255	; 0xff
   12080:	bne	12098 <__assert_fail@plt+0xfa0>
   12084:	cmp	r8, #0
   12088:	bne	120e0 <__assert_fail@plt+0xfe8>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #964]	; 1245c <__assert_fail@plt+0x1364>
   12094:	b	11f9c <__assert_fail@plt+0xea4>
   12098:	cmp	fp, #0
   1209c:	bne	120f0 <__assert_fail@plt+0xff8>
   120a0:	mvn	r2, #0
   120a4:	mvn	r3, #0
   120a8:	ldrd	r0, [sp, #8]
   120ac:	bl	11e9c <__assert_fail@plt+0xda4>
   120b0:	ldr	r3, [sp, #20]
   120b4:	ldrb	r3, [r3, #-1]
   120b8:	cmp	r3, #0
   120bc:	beq	12268 <__assert_fail@plt+0x1170>
   120c0:	mov	r7, #0
   120c4:	mov	r2, #0
   120c8:	mov	r3, #0
   120cc:	mov	r9, r7
   120d0:	mov	fp, r7
   120d4:	strd	r2, [sp]
   120d8:	str	r7, [sp, #16]
   120dc:	b	12030 <__assert_fail@plt+0xf38>
   120e0:	mov	r2, #1
   120e4:	mov	r3, #0
   120e8:	strd	r2, [sp, #8]
   120ec:	b	120a0 <__assert_fail@plt+0xfa8>
   120f0:	ldrd	r2, [sp, #8]
   120f4:	cmp	r3, r5
   120f8:	cmpeq	r2, r4
   120fc:	movhi	r2, #5
   12100:	ldrhi	r1, [pc, #856]	; 12460 <__assert_fail@plt+0x1368>
   12104:	bhi	11f9c <__assert_fail@plt+0xea4>
   12108:	mov	r2, r4
   1210c:	mov	r3, r5
   12110:	b	120a8 <__assert_fail@plt+0xfb0>
   12114:	orrs	r3, r4, r5
   12118:	beq	11ff0 <__assert_fail@plt+0xef8>
   1211c:	mov	r2, r4
   12120:	mov	r3, r5
   12124:	mov	r0, r4
   12128:	mov	r1, r5
   1212c:	b	120ac <__assert_fail@plt+0xfb4>
   12130:	sub	r1, r1, #48	; 0x30
   12134:	cmp	r1, #9
   12138:	bhi	1222c <__assert_fail@plt+0x1134>
   1213c:	cmp	r7, #0
   12140:	ldr	r0, [pc, #796]	; 12464 <__assert_fail@plt+0x136c>
   12144:	beq	12154 <__assert_fail@plt+0x105c>
   12148:	ldr	r3, [r0, #12]
   1214c:	cmp	r3, #0
   12150:	bne	12158 <__assert_fail@plt+0x1060>
   12154:	str	r6, [r0, #12]
   12158:	ldr	r3, [sp, #16]
   1215c:	cmp	r9, #0
   12160:	moveq	r3, #1
   12164:	movne	fp, r9
   12168:	str	r3, [sp, #16]
   1216c:	add	r3, pc, #716	; 0x2cc
   12170:	ldrd	r2, [r3]
   12174:	cmp	r5, r3
   12178:	cmpeq	r4, r2
   1217c:	bhi	121c4 <__assert_fail@plt+0x10cc>
   12180:	mov	ip, #10
   12184:	umull	r2, r3, r4, ip
   12188:	mla	r3, ip, r5, r3
   1218c:	adds	r6, r2, r1
   12190:	adc	r7, r3, r1, asr #31
   12194:	cmp	r7, r5
   12198:	strd	r6, [sp]
   1219c:	cmpeq	r6, r4
   121a0:	ldrd	r2, [sp]
   121a4:	movcc	ip, #1
   121a8:	movcs	ip, #0
   121ac:	and	r1, r3, r2
   121b0:	cmn	r1, #1
   121b4:	movne	r1, #0
   121b8:	moveq	r1, #1
   121bc:	orrs	r3, ip, r1
   121c0:	beq	11fd0 <__assert_fail@plt+0xed8>
   121c4:	ldr	r4, [r0, #12]
   121c8:	ldr	r1, [pc, #664]	; 12468 <__assert_fail@plt+0x1370>
   121cc:	mov	r0, r4
   121d0:	bl	110ec <strspn@plt>
   121d4:	mov	r1, r0
   121d8:	mov	r0, r4
   121dc:	bl	14870 <__assert_fail@plt+0x3778>
   121e0:	mov	r4, r0
   121e4:	ands	r0, sl, #4
   121e8:	ldrne	r1, [pc, #636]	; 1246c <__assert_fail@plt+0x1374>
   121ec:	mov	r2, #5
   121f0:	movne	r0, #0
   121f4:	ldreq	r1, [pc, #628]	; 12470 <__assert_fail@plt+0x1378>
   121f8:	bl	10ef4 <dcgettext@plt>
   121fc:	mov	r5, r0
   12200:	mov	r0, r4
   12204:	bl	140ec <__assert_fail@plt+0x2ff4>
   12208:	mov	r1, #0
   1220c:	mov	r3, r0
   12210:	mov	r2, r5
   12214:	mov	r0, r1
   12218:	bl	10f60 <error@plt>
   1221c:	mov	r0, r4
   12220:	bl	126a8 <__assert_fail@plt+0x15b0>
   12224:	mov	r0, #1
   12228:	bl	11b5c <__assert_fail@plt+0xa64>
   1222c:	ands	r0, sl, #4
   12230:	mov	r2, #5
   12234:	ldrne	r1, [pc, #568]	; 12474 <__assert_fail@plt+0x137c>
   12238:	movne	r0, r3
   1223c:	ldreq	r1, [pc, #564]	; 12478 <__assert_fail@plt+0x1380>
   12240:	bl	10ef4 <dcgettext@plt>
   12244:	mov	r4, r0
   12248:	mov	r0, r6
   1224c:	bl	140ec <__assert_fail@plt+0x2ff4>
   12250:	mov	r1, #0
   12254:	mov	r3, r0
   12258:	mov	r2, r4
   1225c:	mov	r0, r1
   12260:	bl	10f60 <error@plt>
   12264:	b	12224 <__assert_fail@plt+0x112c>
   12268:	ldr	r4, [pc, #500]	; 12464 <__assert_fail@plt+0x136c>
   1226c:	ldr	ip, [r4]
   12270:	cmp	ip, #0
   12274:	bne	12290 <__assert_fail@plt+0x1198>
   12278:	ands	r0, sl, #4
   1227c:	mov	r2, #5
   12280:	ldrne	r1, [pc, #500]	; 1247c <__assert_fail@plt+0x1384>
   12284:	bne	11f9c <__assert_fail@plt+0xea4>
   12288:	ldr	r1, [pc, #496]	; 12480 <__assert_fail@plt+0x1388>
   1228c:	b	11fa0 <__assert_fail@plt+0xea8>
   12290:	ldr	r3, [pc, #492]	; 12484 <__assert_fail@plt+0x138c>
   12294:	mov	r2, #16
   12298:	mov	r1, ip
   1229c:	mov	r5, #1
   122a0:	ldr	r0, [r4, #8]
   122a4:	bl	11098 <qsort@plt>
   122a8:	ldr	r6, [r4]
   122ac:	sub	r3, r5, #1
   122b0:	cmp	r6, r3
   122b4:	bhi	1237c <__assert_fail@plt+0x1284>
   122b8:	tst	sl, #2
   122bc:	beq	12338 <__assert_fail@plt+0x1240>
   122c0:	ldr	r5, [r4, #8]
   122c4:	mov	r3, #0
   122c8:	ldrd	r0, [r5]
   122cc:	str	r3, [r4]
   122d0:	str	r3, [r4, #4]
   122d4:	str	r3, [r4, #8]
   122d8:	cmp	r1, #0
   122dc:	cmpeq	r0, #1
   122e0:	bls	122f8 <__assert_fail@plt+0x1200>
   122e4:	subs	r2, r0, #1
   122e8:	mov	r0, #1
   122ec:	sbc	r3, r1, #0
   122f0:	mov	r1, #0
   122f4:	bl	11e9c <__assert_fail@plt+0xda4>
   122f8:	mov	r7, r5
   122fc:	mov	r8, #1
   12300:	cmp	r6, r8
   12304:	bhi	123f8 <__assert_fail@plt+0x1300>
   12308:	add	r6, r5, r6, lsl #4
   1230c:	mvn	r3, #0
   12310:	mvn	r2, #0
   12314:	ldrd	r6, [r6, #-8]
   12318:	cmp	r7, r3
   1231c:	cmpeq	r6, r2
   12320:	beq	12330 <__assert_fail@plt+0x1238>
   12324:	adds	r0, r6, #1
   12328:	adc	r1, r7, #0
   1232c:	bl	11e9c <__assert_fail@plt+0xda4>
   12330:	mov	r0, r5
   12334:	bl	126a8 <__assert_fail@plt+0x15b0>
   12338:	ldr	r1, [r4]
   1233c:	mvn	r5, #0
   12340:	ldr	r0, [r4, #8]
   12344:	add	r1, r1, #1
   12348:	str	r1, [r4]
   1234c:	lsl	r1, r1, #4
   12350:	bl	1462c <__assert_fail@plt+0x3534>
   12354:	ldr	r3, [r4]
   12358:	str	r0, [r4, #8]
   1235c:	mvn	r4, #0
   12360:	sub	r3, r3, #-268435455	; 0xf0000001
   12364:	lsl	r3, r3, #4
   12368:	add	r2, r0, r3
   1236c:	strd	r4, [r2, #8]
   12370:	strd	r4, [r0, r3]
   12374:	add	sp, sp, #36	; 0x24
   12378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1237c:	lsl	r6, r5, #4
   12380:	sub	r7, r6, #16
   12384:	add	fp, r6, #16
   12388:	ldr	lr, [r4]
   1238c:	ldr	r1, [r4, #8]
   12390:	cmp	lr, r5
   12394:	bhi	123a0 <__assert_fail@plt+0x12a8>
   12398:	add	r5, r5, #1
   1239c:	b	122a8 <__assert_fail@plt+0x11b0>
   123a0:	add	ip, r1, r7
   123a4:	ldrd	r8, [r1, r6]
   123a8:	add	r0, r1, r6
   123ac:	ldrd	r2, [ip, #8]
   123b0:	cmp	r9, r3
   123b4:	cmpeq	r8, r2
   123b8:	bhi	12398 <__assert_fail@plt+0x12a0>
   123bc:	ldrd	r8, [r0, #8]
   123c0:	add	r1, r1, fp
   123c4:	cmp	r9, r3
   123c8:	cmpeq	r8, r2
   123cc:	movcc	r8, r2
   123d0:	movcc	r9, r3
   123d4:	sub	r2, lr, #-268435455	; 0xf0000001
   123d8:	sub	r2, r2, r5
   123dc:	strd	r8, [ip, #8]
   123e0:	lsl	r2, r2, #4
   123e4:	bl	10e7c <memmove@plt>
   123e8:	ldr	r2, [r4]
   123ec:	sub	r2, r2, #1
   123f0:	str	r2, [r4]
   123f4:	b	12388 <__assert_fail@plt+0x1290>
   123f8:	ldr	r3, [r7, #8]
   123fc:	ldr	r2, [r7, #12]
   12400:	ldrd	r0, [r7, #16]
   12404:	adds	r3, r3, #1
   12408:	str	r3, [sp, #24]
   1240c:	adc	r3, r2, #0
   12410:	str	r3, [sp, #28]
   12414:	ldrd	r2, [sp, #24]
   12418:	cmp	r3, r1
   1241c:	cmpeq	r2, r0
   12420:	beq	12434 <__assert_fail@plt+0x133c>
   12424:	subs	r2, r0, #1
   12428:	sbc	r3, r1, #0
   1242c:	ldrd	r0, [sp, #24]
   12430:	bl	11e9c <__assert_fail@plt+0xda4>
   12434:	add	r8, r8, #1
   12438:	add	r7, r7, #16
   1243c:	b	12300 <__assert_fail@plt+0x1208>
   12440:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12444:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12448:	andeq	r5, r1, r4, lsl r9
   1244c:	andeq	r5, r1, r8, ror r8
   12450:	muleq	r1, r8, r8
   12454:	andeq	r5, r1, ip, lsr #17
   12458:	ldrdeq	r5, [r1], -r9
   1245c:	strdeq	r5, [r1], -r4
   12460:	andeq	r5, r1, r6, lsl r9
   12464:	muleq	r2, r8, r1
   12468:	andeq	r5, r1, pc, lsr #18
   1246c:	andeq	r5, r1, sl, lsr r9
   12470:	andeq	r5, r1, r0, ror #18
   12474:	andeq	r5, r1, sp, ror r9
   12478:	andeq	r5, r1, r0, lsr #19
   1247c:			; <UNDEFINED> instruction: 0x000159b7
   12480:	andeq	r5, r1, r0, ror #19
   12484:	andeq	r1, r1, r8, ror lr
   12488:	ldr	r3, [pc, #4]	; 12494 <__assert_fail@plt+0x139c>
   1248c:	str	r0, [r3]
   12490:	bx	lr
   12494:	andeq	r6, r2, r8, lsr #3
   12498:	ldr	r3, [pc, #4]	; 124a4 <__assert_fail@plt+0x13ac>
   1249c:	strb	r0, [r3, #4]
   124a0:	bx	lr
   124a4:	andeq	r6, r2, r8, lsr #3
   124a8:	ldr	r3, [pc, #176]	; 12560 <__assert_fail@plt+0x1468>
   124ac:	push	{r0, r1, r4, r5, r6, lr}
   124b0:	ldr	r0, [r3]
   124b4:	bl	149bc <__assert_fail@plt+0x38c4>
   124b8:	cmp	r0, #0
   124bc:	beq	12544 <__assert_fail@plt+0x144c>
   124c0:	ldr	r4, [pc, #156]	; 12564 <__assert_fail@plt+0x146c>
   124c4:	bl	10fd8 <__errno_location@plt>
   124c8:	mov	r5, r0
   124cc:	ldrb	r6, [r4, #4]
   124d0:	cmp	r6, #0
   124d4:	beq	124e4 <__assert_fail@plt+0x13ec>
   124d8:	ldr	r3, [r0]
   124dc:	cmp	r3, #32
   124e0:	beq	12544 <__assert_fail@plt+0x144c>
   124e4:	mov	r2, #5
   124e8:	ldr	r1, [pc, #120]	; 12568 <__assert_fail@plt+0x1470>
   124ec:	mov	r0, #0
   124f0:	bl	10ef4 <dcgettext@plt>
   124f4:	mov	r6, r0
   124f8:	ldr	r0, [r4]
   124fc:	cmp	r0, #0
   12500:	beq	12530 <__assert_fail@plt+0x1438>
   12504:	ldr	r4, [r5]
   12508:	bl	13f9c <__assert_fail@plt+0x2ea4>
   1250c:	mov	r3, r0
   12510:	ldr	r2, [pc, #84]	; 1256c <__assert_fail@plt+0x1474>
   12514:	mov	r0, #0
   12518:	str	r6, [sp]
   1251c:	mov	r1, r4
   12520:	bl	10f60 <error@plt>
   12524:	ldr	r3, [pc, #68]	; 12570 <__assert_fail@plt+0x1478>
   12528:	ldr	r0, [r3]
   1252c:	bl	10ea0 <_exit@plt>
   12530:	mov	r3, r6
   12534:	ldr	r2, [pc, #56]	; 12574 <__assert_fail@plt+0x147c>
   12538:	ldr	r1, [r5]
   1253c:	bl	10f60 <error@plt>
   12540:	b	12524 <__assert_fail@plt+0x142c>
   12544:	ldr	r3, [pc, #44]	; 12578 <__assert_fail@plt+0x1480>
   12548:	ldr	r0, [r3]
   1254c:	bl	149bc <__assert_fail@plt+0x38c4>
   12550:	cmp	r0, #0
   12554:	bne	12524 <__assert_fail@plt+0x142c>
   12558:	add	sp, sp, #8
   1255c:	pop	{r4, r5, r6, pc}
   12560:	andeq	r6, r2, ip, ror #2
   12564:	andeq	r6, r2, r8, lsr #3
   12568:	andeq	r5, r1, r6, lsl #20
   1256c:	andeq	r5, r1, r2, lsl sl
   12570:	andeq	r6, r2, ip, lsl #2
   12574:	andeq	r5, r1, r6, lsl sl
   12578:	andeq	r6, r2, r0, ror #2
   1257c:	b	10e64 <posix_fadvise64@plt>
   12580:	cmp	r0, #0
   12584:	bxeq	lr
   12588:	push	{r0, r1, r2, r3, r4, lr}
   1258c:	mov	r4, r1
   12590:	bl	11014 <fileno@plt>
   12594:	mov	r2, #0
   12598:	mov	r3, #0
   1259c:	strd	r2, [sp]
   125a0:	str	r4, [sp, #8]
   125a4:	bl	10e64 <posix_fadvise64@plt>
   125a8:	add	sp, sp, #16
   125ac:	pop	{r4, pc}
   125b0:	push	{r0, r1, r2, r4, r5, lr}
   125b4:	mov	r4, r0
   125b8:	bl	11014 <fileno@plt>
   125bc:	cmp	r0, #0
   125c0:	mov	r0, r4
   125c4:	bge	125d4 <__assert_fail@plt+0x14dc>
   125c8:	add	sp, sp, #12
   125cc:	pop	{r4, r5, lr}
   125d0:	b	11038 <fclose@plt>
   125d4:	bl	10f84 <__freading@plt>
   125d8:	cmp	r0, #0
   125dc:	bne	12618 <__assert_fail@plt+0x1520>
   125e0:	mov	r0, r4
   125e4:	bl	12658 <__assert_fail@plt+0x1560>
   125e8:	cmp	r0, #0
   125ec:	bne	1264c <__assert_fail@plt+0x1554>
   125f0:	mov	r5, #0
   125f4:	mov	r0, r4
   125f8:	bl	11038 <fclose@plt>
   125fc:	cmp	r5, #0
   12600:	beq	12610 <__assert_fail@plt+0x1518>
   12604:	bl	10fd8 <__errno_location@plt>
   12608:	str	r5, [r0]
   1260c:	mvn	r0, #0
   12610:	add	sp, sp, #12
   12614:	pop	{r4, r5, pc}
   12618:	mov	r0, r4
   1261c:	bl	11014 <fileno@plt>
   12620:	mov	r3, #1
   12624:	mov	r2, #0
   12628:	str	r3, [sp]
   1262c:	mov	r3, #0
   12630:	bl	10f24 <lseek64@plt>
   12634:	mvn	r3, #0
   12638:	mvn	r2, #0
   1263c:	cmp	r1, r3
   12640:	cmpeq	r0, r2
   12644:	bne	125e0 <__assert_fail@plt+0x14e8>
   12648:	b	125f0 <__assert_fail@plt+0x14f8>
   1264c:	bl	10fd8 <__errno_location@plt>
   12650:	ldr	r5, [r0]
   12654:	b	125f4 <__assert_fail@plt+0x14fc>
   12658:	push	{r0, r1, r4, lr}
   1265c:	subs	r4, r0, #0
   12660:	bne	12674 <__assert_fail@plt+0x157c>
   12664:	mov	r0, r4
   12668:	add	sp, sp, #8
   1266c:	pop	{r4, lr}
   12670:	b	10e70 <fflush@plt>
   12674:	bl	10f84 <__freading@plt>
   12678:	cmp	r0, #0
   1267c:	beq	12664 <__assert_fail@plt+0x156c>
   12680:	ldr	r3, [r4]
   12684:	tst	r3, #256	; 0x100
   12688:	beq	12664 <__assert_fail@plt+0x156c>
   1268c:	mov	r3, #1
   12690:	mov	r2, #0
   12694:	mov	r0, r4
   12698:	str	r3, [sp]
   1269c:	mov	r3, #0
   126a0:	bl	126f8 <__assert_fail@plt+0x1600>
   126a4:	b	12664 <__assert_fail@plt+0x156c>
   126a8:	push	{r0, r1, r2, r4, r5, lr}
   126ac:	mov	r5, r0
   126b0:	bl	10fd8 <__errno_location@plt>
   126b4:	mov	r4, r0
   126b8:	mov	r0, r5
   126bc:	ldr	r3, [r4]
   126c0:	str	r3, [sp]
   126c4:	str	r3, [sp, #4]
   126c8:	mov	r3, #0
   126cc:	str	r3, [r4]
   126d0:	bl	10e88 <free@plt>
   126d4:	ldr	r3, [r4]
   126d8:	add	r2, sp, #8
   126dc:	clz	r3, r3
   126e0:	lsr	r3, r3, #5
   126e4:	add	r3, r2, r3, lsl #2
   126e8:	ldr	r3, [r3, #-8]
   126ec:	str	r3, [r4]
   126f0:	add	sp, sp, #12
   126f4:	pop	{r4, r5, pc}
   126f8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   126fc:	mov	r4, r0
   12700:	ldmib	r0, {ip, lr}
   12704:	ldr	r8, [sp, #32]
   12708:	cmp	lr, ip
   1270c:	bne	1277c <__assert_fail@plt+0x1684>
   12710:	ldr	ip, [r0, #16]
   12714:	ldr	lr, [r0, #20]
   12718:	cmp	lr, ip
   1271c:	bne	1277c <__assert_fail@plt+0x1684>
   12720:	ldr	r5, [r0, #36]	; 0x24
   12724:	cmp	r5, #0
   12728:	bne	1277c <__assert_fail@plt+0x1684>
   1272c:	mov	r6, r2
   12730:	mov	r7, r3
   12734:	bl	11014 <fileno@plt>
   12738:	mov	r2, r6
   1273c:	mov	r3, r7
   12740:	str	r8, [sp]
   12744:	bl	10f24 <lseek64@plt>
   12748:	mvn	r3, #0
   1274c:	mvn	r2, #0
   12750:	cmp	r1, r3
   12754:	cmpeq	r0, r2
   12758:	mvneq	r0, #0
   1275c:	beq	12774 <__assert_fail@plt+0x167c>
   12760:	ldr	r3, [r4]
   12764:	strd	r0, [r4, #80]	; 0x50
   12768:	mov	r0, r5
   1276c:	bic	r3, r3, #16
   12770:	str	r3, [r4]
   12774:	add	sp, sp, #8
   12778:	pop	{r4, r5, r6, r7, r8, pc}
   1277c:	mov	r0, r4
   12780:	str	r8, [sp, #32]
   12784:	add	sp, sp, #8
   12788:	pop	{r4, r5, r6, r7, r8, lr}
   1278c:	b	11044 <fseeko64@plt>
   12790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12794:	sub	sp, sp, #28
   12798:	mov	sl, r3
   1279c:	mov	r8, r2
   127a0:	ldr	r7, [r0]
   127a4:	strd	r0, [sp]
   127a8:	ldr	r5, [r1]
   127ac:	cmp	r7, #0
   127b0:	movne	r3, r1
   127b4:	bne	127d4 <__assert_fail@plt+0x16dc>
   127b8:	cmp	sl, #64	; 0x40
   127bc:	movcc	r5, sl
   127c0:	movcs	r5, #64	; 0x40
   127c4:	mov	r0, r5
   127c8:	bl	1494c <__assert_fail@plt+0x3854>
   127cc:	subs	r7, r0, #0
   127d0:	beq	12988 <__assert_fail@plt+0x1890>
   127d4:	cmp	r5, r8
   127d8:	bcc	129b0 <__assert_fail@plt+0x18b8>
   127dc:	subs	r9, r5, r8
   127e0:	moveq	r3, #1
   127e4:	movne	r3, #0
   127e8:	cmp	r5, sl
   127ec:	movcc	r3, #0
   127f0:	andcs	r3, r3, #1
   127f4:	cmp	r3, #0
   127f8:	bne	129b0 <__assert_fail@plt+0x18b8>
   127fc:	ldr	r3, [sp, #64]	; 0x40
   12800:	cmn	r3, #1
   12804:	ldr	r3, [sp, #68]	; 0x44
   12808:	streq	r3, [sp, #64]	; 0x40
   1280c:	beq	12820 <__assert_fail@plt+0x1728>
   12810:	ldr	r2, [sp, #64]	; 0x40
   12814:	cmn	r3, #1
   12818:	moveq	r3, r2
   1281c:	str	r3, [sp, #68]	; 0x44
   12820:	add	r4, r7, r8
   12824:	add	r1, sp, #20
   12828:	ldr	r0, [sp, #72]	; 0x48
   1282c:	bl	14a2c <__assert_fail@plt+0x3934>
   12830:	subs	fp, r0, #0
   12834:	beq	12994 <__assert_fail@plt+0x189c>
   12838:	ldr	r3, [sp, #64]	; 0x40
   1283c:	cmn	r3, #1
   12840:	moveq	r6, #0
   12844:	beq	129dc <__assert_fail@plt+0x18e4>
   12848:	ldr	r3, [sp, #20]
   1284c:	ldr	r1, [sp, #64]	; 0x40
   12850:	ldr	r2, [sp, #68]	; 0x44
   12854:	bl	129fc <__assert_fail@plt+0x1904>
   12858:	subs	r6, r0, #0
   1285c:	beq	129dc <__assert_fail@plt+0x18e4>
   12860:	sub	r6, r6, fp
   12864:	mov	r2, #0
   12868:	add	r6, r6, #1
   1286c:	str	r6, [sp, #20]
   12870:	mov	r6, #1
   12874:	ldr	r1, [sp, #20]
   12878:	cmp	r5, sl
   1287c:	movcs	r3, #0
   12880:	movcc	r3, #1
   12884:	add	r1, r1, #1
   12888:	cmp	r1, r9
   1288c:	movls	r3, #0
   12890:	cmp	r3, #0
   12894:	beq	1290c <__assert_fail@plt+0x1814>
   12898:	cmp	r5, #63	; 0x3f
   1289c:	sub	r4, r4, r7
   128a0:	lslhi	r3, r5, #1
   128a4:	addls	r3, r5, #64	; 0x40
   128a8:	sub	r0, r3, r4
   128ac:	cmp	r1, r0
   128b0:	addhi	r3, r1, r4
   128b4:	cmp	r3, sl
   128b8:	cmpls	r5, r3
   128bc:	movcs	r3, sl
   128c0:	sub	r1, r3, r8
   128c4:	cmp	r1, #0
   128c8:	bge	128d8 <__assert_fail@plt+0x17e0>
   128cc:	add	r3, r8, #-2147483648	; 0x80000000
   128d0:	cmp	r5, r3
   128d4:	beq	129b0 <__assert_fail@plt+0x18b8>
   128d8:	mov	r1, r3
   128dc:	mov	r0, r7
   128e0:	str	r3, [sp, #8]
   128e4:	sub	r9, r3, r4
   128e8:	str	r2, [sp, #12]
   128ec:	bl	14978 <__assert_fail@plt+0x3880>
   128f0:	cmp	r0, #0
   128f4:	beq	129b0 <__assert_fail@plt+0x18b8>
   128f8:	ldr	r3, [sp, #8]
   128fc:	add	r4, r0, r4
   12900:	mov	r7, r0
   12904:	ldr	r2, [sp, #12]
   12908:	mov	r5, r3
   1290c:	cmp	r9, #1
   12910:	bls	12950 <__assert_fail@plt+0x1858>
   12914:	ldr	r1, [sp, #20]
   12918:	sub	r3, r9, #1
   1291c:	cmp	r3, r1
   12920:	movcs	r3, r1
   12924:	cmp	fp, #0
   12928:	strbeq	r2, [r4]
   1292c:	beq	12948 <__assert_fail@plt+0x1850>
   12930:	mov	r2, r3
   12934:	mov	r1, fp
   12938:	str	r3, [sp, #8]
   1293c:	mov	r0, r4
   12940:	bl	10eac <memcpy@plt>
   12944:	ldr	r3, [sp, #8]
   12948:	add	r4, r4, r3
   1294c:	sub	r9, r9, r3
   12950:	cmp	fp, #0
   12954:	bne	129e4 <__assert_fail@plt+0x18ec>
   12958:	cmp	r6, #0
   1295c:	beq	12824 <__assert_fail@plt+0x172c>
   12960:	add	r0, r7, r8
   12964:	mov	r3, #0
   12968:	sub	r0, r4, r0
   1296c:	strb	r3, [r4]
   12970:	ldr	r3, [sp]
   12974:	cmp	r0, #0
   12978:	str	r7, [r3]
   1297c:	ldr	r3, [sp, #4]
   12980:	str	r5, [r3]
   12984:	bne	1298c <__assert_fail@plt+0x1894>
   12988:	mvn	r0, #0
   1298c:	add	sp, sp, #28
   12990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12994:	ldr	r0, [sp, #72]	; 0x48
   12998:	bl	10ee8 <getc_unlocked@plt>
   1299c:	cmn	r0, #1
   129a0:	mov	r2, r0
   129a4:	bne	129b8 <__assert_fail@plt+0x18c0>
   129a8:	cmp	r4, r7
   129ac:	bne	12960 <__assert_fail@plt+0x1868>
   129b0:	mvn	r0, #0
   129b4:	b	12970 <__assert_fail@plt+0x1878>
   129b8:	ldr	r3, [sp, #64]	; 0x40
   129bc:	ldr	r1, [sp, #68]	; 0x44
   129c0:	cmp	r1, r0
   129c4:	cmpne	r3, r0
   129c8:	mov	r3, #1
   129cc:	moveq	r6, #1
   129d0:	movne	r6, #0
   129d4:	str	r3, [sp, #20]
   129d8:	b	12874 <__assert_fail@plt+0x177c>
   129dc:	mov	r2, r6
   129e0:	b	12874 <__assert_fail@plt+0x177c>
   129e4:	ldr	r1, [sp, #20]
   129e8:	ldr	r0, [sp, #72]	; 0x48
   129ec:	bl	14a5c <__assert_fail@plt+0x3964>
   129f0:	cmp	r0, #0
   129f4:	beq	12958 <__assert_fail@plt+0x1860>
   129f8:	b	129b0 <__assert_fail@plt+0x18b8>
   129fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   12a00:	uxtb	r4, r1
   12a04:	uxtb	r5, r2
   12a08:	cmp	r4, r5
   12a0c:	movne	ip, r0
   12a10:	movne	lr, r2
   12a14:	bne	12a3c <__assert_fail@plt+0x1944>
   12a18:	mov	r1, r4
   12a1c:	mov	r2, r3
   12a20:	pop	{r4, r5, r6, r7, r8, r9, lr}
   12a24:	b	1102c <memchr@plt>
   12a28:	ldrb	r2, [ip], #1
   12a2c:	cmp	r2, r4
   12a30:	cmpne	r2, r5
   12a34:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   12a38:	sub	r3, r3, #1
   12a3c:	cmp	r3, #0
   12a40:	mov	r0, ip
   12a44:	beq	12a50 <__assert_fail@plt+0x1958>
   12a48:	tst	ip, #3
   12a4c:	bne	12a28 <__assert_fail@plt+0x1930>
   12a50:	lsl	r0, r1, #8
   12a54:	ldr	r7, [pc, #136]	; 12ae4 <__assert_fail@plt+0x19ec>
   12a58:	lsl	lr, lr, #8
   12a5c:	uxth	r0, r0
   12a60:	ldr	r8, [pc, #128]	; 12ae8 <__assert_fail@plt+0x19f0>
   12a64:	uxth	lr, lr
   12a68:	orr	r0, r0, r4
   12a6c:	orr	lr, lr, r5
   12a70:	orr	r0, r0, r0, lsl #16
   12a74:	orr	lr, lr, lr, lsl #16
   12a78:	cmp	r3, #3
   12a7c:	bhi	12a88 <__assert_fail@plt+0x1990>
   12a80:	add	r3, r3, ip
   12a84:	b	12ad0 <__assert_fail@plt+0x19d8>
   12a88:	mov	r6, ip
   12a8c:	ldr	r1, [r6], #4
   12a90:	eor	r9, r1, r0
   12a94:	eor	r1, r1, lr
   12a98:	add	r2, r9, r7
   12a9c:	bic	r2, r2, r9
   12aa0:	add	r9, r1, r7
   12aa4:	bic	r1, r9, r1
   12aa8:	orr	r2, r2, r1
   12aac:	tst	r2, r8
   12ab0:	bne	12a80 <__assert_fail@plt+0x1988>
   12ab4:	sub	r3, r3, #4
   12ab8:	mov	ip, r6
   12abc:	b	12a78 <__assert_fail@plt+0x1980>
   12ac0:	ldrb	r2, [ip], #1
   12ac4:	cmp	r2, r4
   12ac8:	cmpne	r2, r5
   12acc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   12ad0:	cmp	ip, r3
   12ad4:	mov	r0, ip
   12ad8:	bne	12ac0 <__assert_fail@plt+0x19c8>
   12adc:	mov	r0, #0
   12ae0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12ae4:	mrc2	14, 7, pc, cr14, cr15, {7}
   12ae8:	addhi	r8, r0, r0, lsl #1
   12aec:	push	{r4, r5, r6, lr}
   12af0:	subs	r4, r0, #0
   12af4:	bne	12b0c <__assert_fail@plt+0x1a14>
   12af8:	ldr	r3, [pc, #124]	; 12b7c <__assert_fail@plt+0x1a84>
   12afc:	ldr	r0, [pc, #124]	; 12b80 <__assert_fail@plt+0x1a88>
   12b00:	ldr	r1, [r3]
   12b04:	bl	110b0 <fputs@plt>
   12b08:	bl	110c8 <abort@plt>
   12b0c:	mov	r1, #47	; 0x2f
   12b10:	bl	11068 <strrchr@plt>
   12b14:	subs	r6, r0, #0
   12b18:	beq	12b68 <__assert_fail@plt+0x1a70>
   12b1c:	add	r5, r6, #1
   12b20:	sub	r3, r5, r4
   12b24:	cmp	r3, #6
   12b28:	ble	12b68 <__assert_fail@plt+0x1a70>
   12b2c:	mov	r2, #7
   12b30:	ldr	r1, [pc, #76]	; 12b84 <__assert_fail@plt+0x1a8c>
   12b34:	sub	r0, r6, #6
   12b38:	bl	110bc <strncmp@plt>
   12b3c:	cmp	r0, #0
   12b40:	bne	12b68 <__assert_fail@plt+0x1a70>
   12b44:	mov	r2, #3
   12b48:	ldr	r1, [pc, #56]	; 12b88 <__assert_fail@plt+0x1a90>
   12b4c:	mov	r0, r5
   12b50:	bl	110bc <strncmp@plt>
   12b54:	cmp	r0, #0
   12b58:	ldreq	r3, [pc, #44]	; 12b8c <__assert_fail@plt+0x1a94>
   12b5c:	addeq	r4, r6, #4
   12b60:	movne	r4, r5
   12b64:	streq	r4, [r3]
   12b68:	ldr	r3, [pc, #32]	; 12b90 <__assert_fail@plt+0x1a98>
   12b6c:	str	r4, [r3]
   12b70:	ldr	r3, [pc, #28]	; 12b94 <__assert_fail@plt+0x1a9c>
   12b74:	str	r4, [r3]
   12b78:	pop	{r4, r5, r6, pc}
   12b7c:	andeq	r6, r2, r0, ror #2
   12b80:	andeq	r5, r1, r9, lsl sl
   12b84:	andeq	r5, r1, r1, asr sl
   12b88:	andeq	r5, r1, r9, asr sl
   12b8c:	andeq	r6, r2, r0, asr r1
   12b90:			; <UNDEFINED> instruction: 0x000261b0
   12b94:	andeq	r6, r2, r4, asr r1
   12b98:	push	{r4, lr}
   12b9c:	mov	r2, #48	; 0x30
   12ba0:	mov	r4, r1
   12ba4:	mov	r1, #0
   12ba8:	bl	10ff0 <memset@plt>
   12bac:	cmp	r4, #10
   12bb0:	bne	12bb8 <__assert_fail@plt+0x1ac0>
   12bb4:	bl	110c8 <abort@plt>
   12bb8:	str	r4, [r0]
   12bbc:	pop	{r4, pc}
   12bc0:	push	{r4, r5, r6, lr}
   12bc4:	mov	r2, #5
   12bc8:	mov	r6, r0
   12bcc:	mov	r5, r1
   12bd0:	mov	r1, r0
   12bd4:	mov	r0, #0
   12bd8:	bl	10ef4 <dcgettext@plt>
   12bdc:	cmp	r6, r0
   12be0:	mov	r4, r0
   12be4:	bne	12c54 <__assert_fail@plt+0x1b5c>
   12be8:	bl	14bb8 <__assert_fail@plt+0x3ac0>
   12bec:	ldrb	r3, [r0]
   12bf0:	bic	r3, r3, #32
   12bf4:	cmp	r3, #85	; 0x55
   12bf8:	bne	12c5c <__assert_fail@plt+0x1b64>
   12bfc:	ldrb	r3, [r0, #1]
   12c00:	bic	r3, r3, #32
   12c04:	cmp	r3, #84	; 0x54
   12c08:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c0c:	ldrb	r3, [r0, #2]
   12c10:	bic	r3, r3, #32
   12c14:	cmp	r3, #70	; 0x46
   12c18:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c1c:	ldrb	r3, [r0, #3]
   12c20:	cmp	r3, #45	; 0x2d
   12c24:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c28:	ldrb	r3, [r0, #4]
   12c2c:	cmp	r3, #56	; 0x38
   12c30:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c34:	ldrb	r3, [r0, #5]
   12c38:	cmp	r3, #0
   12c3c:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c40:	ldrb	r2, [r4]
   12c44:	ldr	r3, [pc, #144]	; 12cdc <__assert_fail@plt+0x1be4>
   12c48:	ldr	r4, [pc, #144]	; 12ce0 <__assert_fail@plt+0x1be8>
   12c4c:	cmp	r2, #96	; 0x60
   12c50:	movne	r4, r3
   12c54:	mov	r0, r4
   12c58:	pop	{r4, r5, r6, pc}
   12c5c:	cmp	r3, #71	; 0x47
   12c60:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c64:	ldrb	r3, [r0, #1]
   12c68:	bic	r3, r3, #32
   12c6c:	cmp	r3, #66	; 0x42
   12c70:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c74:	ldrb	r3, [r0, #2]
   12c78:	cmp	r3, #49	; 0x31
   12c7c:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c80:	ldrb	r3, [r0, #3]
   12c84:	cmp	r3, #56	; 0x38
   12c88:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c8c:	ldrb	r3, [r0, #4]
   12c90:	cmp	r3, #48	; 0x30
   12c94:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12c98:	ldrb	r3, [r0, #5]
   12c9c:	cmp	r3, #51	; 0x33
   12ca0:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12ca4:	ldrb	r3, [r0, #6]
   12ca8:	cmp	r3, #48	; 0x30
   12cac:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12cb0:	ldrb	r3, [r0, #7]
   12cb4:	cmp	r3, #0
   12cb8:	bne	12ccc <__assert_fail@plt+0x1bd4>
   12cbc:	ldrb	r2, [r4]
   12cc0:	ldr	r3, [pc, #28]	; 12ce4 <__assert_fail@plt+0x1bec>
   12cc4:	ldr	r4, [pc, #28]	; 12ce8 <__assert_fail@plt+0x1bf0>
   12cc8:	b	12c4c <__assert_fail@plt+0x1b54>
   12ccc:	ldr	r4, [pc, #24]	; 12cec <__assert_fail@plt+0x1bf4>
   12cd0:	cmp	r5, #9
   12cd4:	ldr	r3, [pc, #20]	; 12cf0 <__assert_fail@plt+0x1bf8>
   12cd8:	b	12c50 <__assert_fail@plt+0x1b58>
   12cdc:			; <UNDEFINED> instruction: 0x00015ab6
   12ce0:	andeq	r5, r1, r1, asr #21
   12ce4:			; <UNDEFINED> instruction: 0x00015aba
   12ce8:			; <UNDEFINED> instruction: 0x00015abd
   12cec:			; <UNDEFINED> instruction: 0x00015ab4
   12cf0:	andeq	r5, r1, r5, asr #21
   12cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf8:	sub	sp, sp, #108	; 0x6c
   12cfc:	mov	r8, r0
   12d00:	mov	r5, r1
   12d04:	mov	r6, #0
   12d08:	str	r3, [sp, #40]	; 0x28
   12d0c:	str	r2, [sp, #48]	; 0x30
   12d10:	ldr	sl, [sp, #144]	; 0x90
   12d14:	bl	10f30 <__ctype_get_mb_cur_max@plt>
   12d18:	ldr	r3, [sp, #148]	; 0x94
   12d1c:	str	r6, [sp, #24]
   12d20:	str	r6, [sp, #32]
   12d24:	str	r6, [sp, #44]	; 0x2c
   12d28:	str	r6, [sp, #52]	; 0x34
   12d2c:	ubfx	r7, r3, #1, #1
   12d30:	mov	r3, #1
   12d34:	str	r6, [sp, #60]	; 0x3c
   12d38:	str	r3, [sp, #72]	; 0x48
   12d3c:	str	r0, [sp, #76]	; 0x4c
   12d40:	cmp	sl, #10
   12d44:	ldrls	pc, [pc, sl, lsl #2]
   12d48:	b	12f8c <__assert_fail@plt+0x1e94>
   12d4c:	andeq	r2, r1, r8, ror sp
   12d50:	andeq	r2, r1, r4, lsr #31
   12d54:	andeq	r2, r1, r8, lsr #30
   12d58:	andeq	r2, r1, r0, asr #30
   12d5c:	andeq	r2, r1, r0, lsl pc
   12d60:	andeq	r2, r1, r8, ror #28
   12d64:	andeq	r2, r1, r8, asr #28
   12d68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12d6c:	muleq	r1, r8, lr
   12d70:	muleq	r1, r8, lr
   12d74:	muleq	r1, r8, lr
   12d78:	mov	r4, sl
   12d7c:	mov	r7, #0
   12d80:	mov	r9, r5
   12d84:	mov	r3, #0
   12d88:	str	r6, [sp, #68]	; 0x44
   12d8c:	str	r3, [sp, #28]
   12d90:	ldr	r3, [sp, #40]	; 0x28
   12d94:	cmn	r3, #1
   12d98:	bne	13938 <__assert_fail@plt+0x2840>
   12d9c:	ldr	r2, [sp, #28]
   12da0:	ldr	r3, [sp, #48]	; 0x30
   12da4:	ldrb	r3, [r3, r2]
   12da8:	adds	r3, r3, #0
   12dac:	movne	r3, #1
   12db0:	str	r3, [sp, #36]	; 0x24
   12db4:	ldr	r3, [sp, #36]	; 0x24
   12db8:	cmp	r3, #0
   12dbc:	bne	12fc8 <__assert_fail@plt+0x1ed0>
   12dc0:	sub	r3, sl, #2
   12dc4:	cmp	r4, #0
   12dc8:	clz	r3, r3
   12dcc:	movne	r2, #0
   12dd0:	lsr	r3, r3, #5
   12dd4:	andeq	r2, r3, r7
   12dd8:	cmp	r2, #0
   12ddc:	bne	1318c <__assert_fail@plt+0x2094>
   12de0:	eor	r7, r7, #1
   12de4:	ands	r3, r3, r7
   12de8:	beq	139b0 <__assert_fail@plt+0x28b8>
   12dec:	ldr	r2, [sp, #68]	; 0x44
   12df0:	cmp	r2, #0
   12df4:	beq	13978 <__assert_fail@plt+0x2880>
   12df8:	ldr	r3, [sp, #72]	; 0x48
   12dfc:	cmp	r3, #0
   12e00:	beq	1394c <__assert_fail@plt+0x2854>
   12e04:	ldr	r2, [sp, #48]	; 0x30
   12e08:	ldr	r3, [sp, #160]	; 0xa0
   12e0c:	ldr	r1, [sp, #60]	; 0x3c
   12e10:	str	r3, [sp, #16]
   12e14:	ldr	r3, [sp, #156]	; 0x9c
   12e18:	str	r3, [sp, #12]
   12e1c:	ldr	r3, [sp, #152]	; 0x98
   12e20:	str	r3, [sp, #8]
   12e24:	ldr	r3, [sp, #148]	; 0x94
   12e28:	str	r3, [sp, #4]
   12e2c:	mov	r3, #5
   12e30:	str	r3, [sp]
   12e34:	ldr	r3, [sp, #40]	; 0x28
   12e38:	mov	r0, r8
   12e3c:	bl	12cf4 <__assert_fail@plt+0x1bfc>
   12e40:	mov	r4, r0
   12e44:	b	139a4 <__assert_fail@plt+0x28ac>
   12e48:	ldr	r3, [pc, #2948]	; 139d4 <__assert_fail@plt+0x28dc>
   12e4c:	mov	r7, #1
   12e50:	mov	r4, #0
   12e54:	mov	sl, #5
   12e58:	str	r7, [sp, #24]
   12e5c:	str	r7, [sp, #32]
   12e60:	str	r3, [sp, #44]	; 0x2c
   12e64:	b	12d80 <__assert_fail@plt+0x1c88>
   12e68:	cmp	r7, #0
   12e6c:	bne	12fb0 <__assert_fail@plt+0x1eb8>
   12e70:	cmp	r5, #0
   12e74:	mov	r4, #1
   12e78:	movne	r3, #34	; 0x22
   12e7c:	strbne	r3, [r8]
   12e80:	mov	r3, #1
   12e84:	str	r3, [sp, #24]
   12e88:	str	r3, [sp, #32]
   12e8c:	ldr	r3, [pc, #2880]	; 139d4 <__assert_fail@plt+0x28dc>
   12e90:	str	r3, [sp, #44]	; 0x2c
   12e94:	b	12d80 <__assert_fail@plt+0x1c88>
   12e98:	cmp	sl, #10
   12e9c:	beq	12ec0 <__assert_fail@plt+0x1dc8>
   12ea0:	mov	r1, sl
   12ea4:	ldr	r0, [pc, #2860]	; 139d8 <__assert_fail@plt+0x28e0>
   12ea8:	bl	12bc0 <__assert_fail@plt+0x1ac8>
   12eac:	mov	r1, sl
   12eb0:	str	r0, [sp, #156]	; 0x9c
   12eb4:	ldr	r0, [pc, #2848]	; 139dc <__assert_fail@plt+0x28e4>
   12eb8:	bl	12bc0 <__assert_fail@plt+0x1ac8>
   12ebc:	str	r0, [sp, #160]	; 0xa0
   12ec0:	cmp	r7, #0
   12ec4:	moveq	r4, r7
   12ec8:	beq	12ee0 <__assert_fail@plt+0x1de8>
   12ecc:	mov	r4, #0
   12ed0:	b	12ef0 <__assert_fail@plt+0x1df8>
   12ed4:	cmp	r5, r4
   12ed8:	strbhi	r3, [r8, r4]
   12edc:	add	r4, r4, #1
   12ee0:	ldr	r3, [sp, #156]	; 0x9c
   12ee4:	ldrb	r3, [r3, r4]
   12ee8:	cmp	r3, #0
   12eec:	bne	12ed4 <__assert_fail@plt+0x1ddc>
   12ef0:	ldr	r0, [sp, #160]	; 0xa0
   12ef4:	bl	10fc0 <strlen@plt>
   12ef8:	ldr	r3, [sp, #160]	; 0xa0
   12efc:	str	r0, [sp, #32]
   12f00:	str	r3, [sp, #44]	; 0x2c
   12f04:	mov	r3, #1
   12f08:	str	r3, [sp, #24]
   12f0c:	b	12d80 <__assert_fail@plt+0x1c88>
   12f10:	mov	r3, #1
   12f14:	cmp	r7, #0
   12f18:	streq	r3, [sp, #24]
   12f1c:	beq	12f60 <__assert_fail@plt+0x1e68>
   12f20:	str	r3, [sp, #32]
   12f24:	b	12f4c <__assert_fail@plt+0x1e54>
   12f28:	cmp	r7, #0
   12f2c:	beq	12f60 <__assert_fail@plt+0x1e68>
   12f30:	mov	r3, #1
   12f34:	str	r3, [sp, #32]
   12f38:	ldr	r3, [pc, #2716]	; 139dc <__assert_fail@plt+0x28e4>
   12f3c:	b	12fc0 <__assert_fail@plt+0x1ec8>
   12f40:	mov	r7, #1
   12f44:	str	r7, [sp, #24]
   12f48:	str	r7, [sp, #32]
   12f4c:	ldr	r3, [pc, #2696]	; 139dc <__assert_fail@plt+0x28e4>
   12f50:	mov	r4, #0
   12f54:	str	r3, [sp, #44]	; 0x2c
   12f58:	mov	sl, #2
   12f5c:	b	12d80 <__assert_fail@plt+0x1c88>
   12f60:	cmp	r5, #0
   12f64:	movne	r3, #39	; 0x27
   12f68:	movne	r7, #0
   12f6c:	strbne	r3, [r8]
   12f70:	moveq	r7, r5
   12f74:	mov	r3, #1
   12f78:	mov	r4, #1
   12f7c:	str	r3, [sp, #32]
   12f80:	ldr	r3, [pc, #2644]	; 139dc <__assert_fail@plt+0x28e4>
   12f84:	str	r3, [sp, #44]	; 0x2c
   12f88:	b	12f58 <__assert_fail@plt+0x1e60>
   12f8c:	bl	110c8 <abort@plt>
   12f90:	mov	r3, #1
   12f94:	mov	r7, #0
   12f98:	str	r3, [sp, #24]
   12f9c:	mov	r4, #0
   12fa0:	b	12d80 <__assert_fail@plt+0x1c88>
   12fa4:	mov	r7, #1
   12fa8:	str	sl, [sp, #32]
   12fac:	b	12f4c <__assert_fail@plt+0x1e54>
   12fb0:	mov	r3, #1
   12fb4:	str	r7, [sp, #24]
   12fb8:	str	r3, [sp, #32]
   12fbc:	ldr	r3, [pc, #2576]	; 139d4 <__assert_fail@plt+0x28dc>
   12fc0:	str	r3, [sp, #44]	; 0x2c
   12fc4:	b	12f9c <__assert_fail@plt+0x1ea4>
   12fc8:	ldr	fp, [sp, #24]
   12fcc:	ldr	r3, [sp, #32]
   12fd0:	cmp	sl, #2
   12fd4:	moveq	fp, #0
   12fd8:	andne	fp, fp, #1
   12fdc:	adds	r5, r3, #0
   12fe0:	movne	r5, #1
   12fe4:	ands	r3, fp, r5
   12fe8:	str	r3, [sp, #64]	; 0x40
   12fec:	beq	130bc <__assert_fail@plt+0x1fc4>
   12ff0:	ldr	r3, [sp, #28]
   12ff4:	ldr	r2, [sp, #32]
   12ff8:	cmp	r2, #1
   12ffc:	add	r6, r3, r2
   13000:	mov	r3, r2
   13004:	ldr	r2, [sp, #40]	; 0x28
   13008:	movls	r3, #0
   1300c:	movhi	r3, #1
   13010:	cmn	r2, #1
   13014:	movne	r3, #0
   13018:	cmp	r3, #0
   1301c:	beq	1302c <__assert_fail@plt+0x1f34>
   13020:	ldr	r0, [sp, #48]	; 0x30
   13024:	bl	10fc0 <strlen@plt>
   13028:	str	r0, [sp, #40]	; 0x28
   1302c:	ldr	r3, [sp, #40]	; 0x28
   13030:	cmp	r6, r3
   13034:	bhi	130b4 <__assert_fail@plt+0x1fbc>
   13038:	ldr	r0, [sp, #28]
   1303c:	ldr	r2, [sp, #32]
   13040:	ldr	r3, [sp, #48]	; 0x30
   13044:	ldr	r1, [sp, #44]	; 0x2c
   13048:	add	r0, r3, r0
   1304c:	bl	10ed0 <memcmp@plt>
   13050:	cmp	r0, #0
   13054:	bne	130b4 <__assert_fail@plt+0x1fbc>
   13058:	cmp	r7, #0
   1305c:	beq	130bc <__assert_fail@plt+0x1fc4>
   13060:	str	r7, [sp, #24]
   13064:	ldr	r3, [sp, #24]
   13068:	mov	r1, r9
   1306c:	ldr	r2, [sp, #48]	; 0x30
   13070:	cmp	sl, #2
   13074:	movne	r3, #0
   13078:	andeq	r3, r3, #1
   1307c:	cmp	r3, #0
   13080:	ldr	r3, [sp, #160]	; 0xa0
   13084:	movne	sl, #4
   13088:	str	sl, [sp]
   1308c:	str	r3, [sp, #16]
   13090:	ldr	r3, [sp, #156]	; 0x9c
   13094:	str	r3, [sp, #12]
   13098:	mov	r3, #0
   1309c:	str	r3, [sp, #8]
   130a0:	ldr	r3, [sp, #148]	; 0x94
   130a4:	bic	r3, r3, #2
   130a8:	str	r3, [sp, #4]
   130ac:	ldr	r3, [sp, #40]	; 0x28
   130b0:	b	12e38 <__assert_fail@plt+0x1d40>
   130b4:	mov	r3, #0
   130b8:	str	r3, [sp, #64]	; 0x40
   130bc:	ldr	r2, [sp, #28]
   130c0:	ldr	r3, [sp, #48]	; 0x30
   130c4:	add	r3, r3, r2
   130c8:	str	r3, [sp, #80]	; 0x50
   130cc:	ldr	r3, [sp, #48]	; 0x30
   130d0:	ldrb	r6, [r3, r2]
   130d4:	cmp	r6, #58	; 0x3a
   130d8:	bhi	1323c <__assert_fail@plt+0x2144>
   130dc:	cmp	r6, #43	; 0x2b
   130e0:	bcs	133fc <__assert_fail@plt+0x2304>
   130e4:	cmp	r6, #32
   130e8:	beq	13450 <__assert_fail@plt+0x2358>
   130ec:	bhi	13194 <__assert_fail@plt+0x209c>
   130f0:	cmp	r6, #9
   130f4:	beq	135f8 <__assert_fail@plt+0x2500>
   130f8:	bhi	13158 <__assert_fail@plt+0x2060>
   130fc:	cmp	r6, #7
   13100:	beq	13608 <__assert_fail@plt+0x2510>
   13104:	bhi	13624 <__assert_fail@plt+0x252c>
   13108:	cmp	r6, #0
   1310c:	beq	1346c <__assert_fail@plt+0x2374>
   13110:	ldr	r3, [sp, #76]	; 0x4c
   13114:	cmp	r3, #1
   13118:	bne	13670 <__assert_fail@plt+0x2578>
   1311c:	bl	10fa8 <__ctype_b_loc@plt>
   13120:	ldr	r2, [r0]
   13124:	sxth	r3, r6
   13128:	lsl	r3, r3, #1
   1312c:	ldrh	r5, [r2, r3]
   13130:	ldr	r3, [sp, #76]	; 0x4c
   13134:	ubfx	r5, r5, #14, #1
   13138:	str	r3, [sp, #56]	; 0x38
   1313c:	ldr	r3, [sp, #24]
   13140:	eor	fp, r5, #1
   13144:	and	fp, fp, r3
   13148:	ands	fp, fp, #255	; 0xff
   1314c:	beq	1332c <__assert_fail@plt+0x2234>
   13150:	mov	r5, #0
   13154:	b	1371c <__assert_fail@plt+0x2624>
   13158:	cmp	r6, #11
   1315c:	beq	1362c <__assert_fail@plt+0x2534>
   13160:	bcc	13600 <__assert_fail@plt+0x2508>
   13164:	cmp	r6, #12
   13168:	beq	13634 <__assert_fail@plt+0x253c>
   1316c:	cmp	r6, #13
   13170:	moveq	r3, #114	; 0x72
   13174:	bne	13110 <__assert_fail@plt+0x2018>
   13178:	cmp	sl, #2
   1317c:	movne	r2, #0
   13180:	andeq	r2, r7, #1
   13184:	cmp	r2, #0
   13188:	beq	1360c <__assert_fail@plt+0x2514>
   1318c:	mov	sl, #2
   13190:	b	13064 <__assert_fail@plt+0x1f6c>
   13194:	cmp	r6, #37	; 0x25
   13198:	beq	133fc <__assert_fail@plt+0x2304>
   1319c:	bhi	131b0 <__assert_fail@plt+0x20b8>
   131a0:	cmp	r6, #35	; 0x23
   131a4:	beq	13444 <__assert_fail@plt+0x234c>
   131a8:	mov	r5, #0
   131ac:	b	13454 <__assert_fail@plt+0x235c>
   131b0:	cmp	r6, #39	; 0x27
   131b4:	bne	131a8 <__assert_fail@plt+0x20b0>
   131b8:	cmp	sl, #2
   131bc:	ldrne	r5, [sp, #36]	; 0x24
   131c0:	movne	r3, r5
   131c4:	strne	r3, [sp, #68]	; 0x44
   131c8:	bne	13548 <__assert_fail@plt+0x2450>
   131cc:	cmp	r7, #0
   131d0:	bne	13064 <__assert_fail@plt+0x1f6c>
   131d4:	ldr	r3, [sp, #60]	; 0x3c
   131d8:	cmp	r9, #0
   131dc:	clz	r3, r3
   131e0:	lsr	r3, r3, #5
   131e4:	moveq	r3, #0
   131e8:	cmp	r3, #0
   131ec:	strne	r9, [sp, #60]	; 0x3c
   131f0:	movne	r9, #0
   131f4:	bne	13204 <__assert_fail@plt+0x210c>
   131f8:	cmp	r9, r4
   131fc:	movhi	r3, #39	; 0x27
   13200:	strbhi	r3, [r8, r4]
   13204:	add	r3, r4, #1
   13208:	ldr	r5, [sp, #36]	; 0x24
   1320c:	mov	fp, #0
   13210:	cmp	r3, r9
   13214:	movcc	r2, #92	; 0x5c
   13218:	str	fp, [sp, #52]	; 0x34
   1321c:	strbcc	r2, [r8, r3]
   13220:	add	r3, r4, #2
   13224:	add	r4, r4, #3
   13228:	cmp	r3, r9
   1322c:	str	r5, [sp, #68]	; 0x44
   13230:	movcc	r2, #39	; 0x27
   13234:	strbcc	r2, [r8, r3]
   13238:	b	1332c <__assert_fail@plt+0x2234>
   1323c:	cmp	r6, #94	; 0x5e
   13240:	beq	131a8 <__assert_fail@plt+0x20b0>
   13244:	bhi	13404 <__assert_fail@plt+0x230c>
   13248:	cmp	r6, #90	; 0x5a
   1324c:	bhi	133f0 <__assert_fail@plt+0x22f8>
   13250:	cmp	r6, #65	; 0x41
   13254:	bcs	133fc <__assert_fail@plt+0x2304>
   13258:	cmp	r6, #62	; 0x3e
   1325c:	bls	131a8 <__assert_fail@plt+0x20b0>
   13260:	cmp	r6, #63	; 0x3f
   13264:	bne	13110 <__assert_fail@plt+0x2018>
   13268:	cmp	sl, #2
   1326c:	beq	13550 <__assert_fail@plt+0x2458>
   13270:	cmp	sl, #5
   13274:	movne	fp, #0
   13278:	bne	13920 <__assert_fail@plt+0x2828>
   1327c:	ldr	r3, [sp, #148]	; 0x94
   13280:	tst	r3, #4
   13284:	beq	13558 <__assert_fail@plt+0x2460>
   13288:	ldr	r3, [sp, #28]
   1328c:	add	r2, r3, #2
   13290:	ldr	r3, [sp, #40]	; 0x28
   13294:	cmp	r2, r3
   13298:	bcs	13558 <__assert_fail@plt+0x2460>
   1329c:	ldr	r1, [sp, #28]
   132a0:	ldr	r3, [sp, #48]	; 0x30
   132a4:	add	r3, r3, r1
   132a8:	ldrb	r1, [r3, #1]
   132ac:	cmp	r1, #63	; 0x3f
   132b0:	bne	13558 <__assert_fail@plt+0x2460>
   132b4:	ldr	r3, [sp, #48]	; 0x30
   132b8:	ldrb	r6, [r3, r2]
   132bc:	sub	r3, r6, #33	; 0x21
   132c0:	uxtb	r3, r3
   132c4:	cmp	r3, #29
   132c8:	bhi	13928 <__assert_fail@plt+0x2830>
   132cc:	ldr	r0, [pc, #1804]	; 139e0 <__assert_fail@plt+0x28e8>
   132d0:	mov	r5, #1
   132d4:	ands	r5, r0, r5, lsl r3
   132d8:	beq	13930 <__assert_fail@plt+0x2838>
   132dc:	cmp	r7, #0
   132e0:	bne	13064 <__assert_fail@plt+0x1f6c>
   132e4:	cmp	r9, r4
   132e8:	add	r3, r4, #1
   132ec:	str	r2, [sp, #28]
   132f0:	mov	r5, #0
   132f4:	strbhi	r1, [r8, r4]
   132f8:	cmp	r9, r3
   132fc:	mov	fp, r5
   13300:	movhi	r1, #34	; 0x22
   13304:	strbhi	r1, [r8, r3]
   13308:	add	r3, r4, #2
   1330c:	cmp	r9, r3
   13310:	movhi	r1, #34	; 0x22
   13314:	strbhi	r1, [r8, r3]
   13318:	add	r3, r4, #3
   1331c:	add	r4, r4, #4
   13320:	cmp	r9, r3
   13324:	movhi	r1, #63	; 0x3f
   13328:	strbhi	r1, [r8, r3]
   1332c:	ldr	r3, [sp, #24]
   13330:	eor	r3, r3, #1
   13334:	cmp	sl, #2
   13338:	orreq	r3, r3, #1
   1333c:	eor	r3, r3, #1
   13340:	orr	r3, r7, r3
   13344:	tst	r3, #255	; 0xff
   13348:	beq	13374 <__assert_fail@plt+0x227c>
   1334c:	ldr	r3, [sp, #152]	; 0x98
   13350:	cmp	r3, #0
   13354:	beq	13374 <__assert_fail@plt+0x227c>
   13358:	ldr	r1, [sp, #152]	; 0x98
   1335c:	ubfx	r2, r6, #5, #8
   13360:	and	r3, r6, #31
   13364:	ldr	r2, [r1, r2, lsl #2]
   13368:	lsr	r3, r2, r3
   1336c:	tst	r3, #1
   13370:	bne	13380 <__assert_fail@plt+0x2288>
   13374:	ldr	r3, [sp, #64]	; 0x40
   13378:	cmp	r3, #0
   1337c:	beq	13578 <__assert_fail@plt+0x2480>
   13380:	sub	r3, sl, #2
   13384:	cmp	r7, #0
   13388:	clz	r3, r3
   1338c:	lsr	r3, r3, #5
   13390:	bne	13064 <__assert_fail@plt+0x1f6c>
   13394:	ldr	r2, [sp, #52]	; 0x34
   13398:	eor	r2, r2, #1
   1339c:	ands	r3, r3, r2
   133a0:	beq	133d8 <__assert_fail@plt+0x22e0>
   133a4:	cmp	r9, r4
   133a8:	str	r3, [sp, #52]	; 0x34
   133ac:	movhi	r2, #39	; 0x27
   133b0:	strbhi	r2, [r8, r4]
   133b4:	add	r2, r4, #1
   133b8:	cmp	r9, r2
   133bc:	movhi	r1, #36	; 0x24
   133c0:	strbhi	r1, [r8, r2]
   133c4:	add	r2, r4, #2
   133c8:	add	r4, r4, #3
   133cc:	cmp	r9, r2
   133d0:	movhi	r1, #39	; 0x27
   133d4:	strbhi	r1, [r8, r2]
   133d8:	cmp	r9, r4
   133dc:	ldr	fp, [sp, #36]	; 0x24
   133e0:	movhi	r3, #92	; 0x5c
   133e4:	strbhi	r3, [r8, r4]
   133e8:	add	r4, r4, #1
   133ec:	b	13578 <__assert_fail@plt+0x2480>
   133f0:	cmp	r6, #92	; 0x5c
   133f4:	beq	13560 <__assert_fail@plt+0x2468>
   133f8:	bls	131a8 <__assert_fail@plt+0x20b0>
   133fc:	ldr	r5, [sp, #36]	; 0x24
   13400:	b	13548 <__assert_fail@plt+0x2450>
   13404:	cmp	r6, #122	; 0x7a
   13408:	bhi	13428 <__assert_fail@plt+0x2330>
   1340c:	cmp	r6, #97	; 0x61
   13410:	bcs	133fc <__assert_fail@plt+0x2304>
   13414:	cmp	r6, #95	; 0x5f
   13418:	beq	133fc <__assert_fail@plt+0x2304>
   1341c:	cmp	r6, #96	; 0x60
   13420:	bne	13110 <__assert_fail@plt+0x2018>
   13424:	b	131a8 <__assert_fail@plt+0x20b0>
   13428:	cmp	r6, #124	; 0x7c
   1342c:	beq	131a8 <__assert_fail@plt+0x20b0>
   13430:	bcc	1363c <__assert_fail@plt+0x2544>
   13434:	cmp	r6, #125	; 0x7d
   13438:	beq	1363c <__assert_fail@plt+0x2544>
   1343c:	cmp	r6, #126	; 0x7e
   13440:	bne	13110 <__assert_fail@plt+0x2018>
   13444:	ldr	r3, [sp, #28]
   13448:	cmp	r3, #0
   1344c:	bne	13558 <__assert_fail@plt+0x2460>
   13450:	ldr	r5, [sp, #36]	; 0x24
   13454:	cmp	sl, #2
   13458:	movne	fp, #0
   1345c:	andeq	fp, r7, #1
   13460:	cmp	fp, #0
   13464:	beq	1332c <__assert_fail@plt+0x2234>
   13468:	b	1318c <__assert_fail@plt+0x2094>
   1346c:	ldr	r3, [sp, #24]
   13470:	cmp	r3, #0
   13474:	beq	1353c <__assert_fail@plt+0x2444>
   13478:	sub	r2, sl, #2
   1347c:	cmp	r7, #0
   13480:	clz	r2, r2
   13484:	lsr	r2, r2, #5
   13488:	bne	13060 <__assert_fail@plt+0x1f68>
   1348c:	ldr	r3, [sp, #52]	; 0x34
   13490:	eor	r3, r3, #1
   13494:	ands	r2, r2, r3
   13498:	moveq	r3, r4
   1349c:	beq	134d4 <__assert_fail@plt+0x23dc>
   134a0:	cmp	r9, r4
   134a4:	str	r2, [sp, #52]	; 0x34
   134a8:	movhi	r3, #39	; 0x27
   134ac:	strbhi	r3, [r8, r4]
   134b0:	add	r3, r4, #1
   134b4:	cmp	r9, r3
   134b8:	movhi	r1, #36	; 0x24
   134bc:	strbhi	r1, [r8, r3]
   134c0:	add	r3, r4, #2
   134c4:	cmp	r9, r3
   134c8:	movhi	r1, #39	; 0x27
   134cc:	strbhi	r1, [r8, r3]
   134d0:	add	r3, r4, #3
   134d4:	cmp	r9, r3
   134d8:	add	r4, r3, #1
   134dc:	movhi	r2, #92	; 0x5c
   134e0:	strbhi	r2, [r8, r3]
   134e4:	cmp	fp, #0
   134e8:	beq	13910 <__assert_fail@plt+0x2818>
   134ec:	ldr	r2, [sp, #28]
   134f0:	ldr	r1, [sp, #40]	; 0x28
   134f4:	add	r2, r2, #1
   134f8:	cmp	r2, r1
   134fc:	bcs	13534 <__assert_fail@plt+0x243c>
   13500:	ldr	r1, [sp, #48]	; 0x30
   13504:	mov	r6, #48	; 0x30
   13508:	ldrb	r2, [r1, r2]
   1350c:	sub	r2, r2, #48	; 0x30
   13510:	cmp	r2, #9
   13514:	bhi	13920 <__assert_fail@plt+0x2828>
   13518:	cmp	r9, r4
   1351c:	add	r2, r3, #2
   13520:	strbhi	r6, [r8, r4]
   13524:	cmp	r9, r2
   13528:	add	r4, r3, #3
   1352c:	movhi	r1, #48	; 0x30
   13530:	strbhi	r1, [r8, r2]
   13534:	mov	r5, #0
   13538:	b	13918 <__assert_fail@plt+0x2820>
   1353c:	ldr	r3, [sp, #148]	; 0x94
   13540:	ands	r5, r3, #1
   13544:	bne	135cc <__assert_fail@plt+0x24d4>
   13548:	mov	fp, #0
   1354c:	b	1332c <__assert_fail@plt+0x2234>
   13550:	cmp	r7, #0
   13554:	bne	13064 <__assert_fail@plt+0x1f6c>
   13558:	mov	r5, #0
   1355c:	b	13548 <__assert_fail@plt+0x2450>
   13560:	cmp	sl, #2
   13564:	bne	135d8 <__assert_fail@plt+0x24e0>
   13568:	cmp	r7, #0
   1356c:	bne	13064 <__assert_fail@plt+0x1f6c>
   13570:	mov	r5, r7
   13574:	mov	fp, r7
   13578:	ldr	r3, [sp, #52]	; 0x34
   1357c:	eor	fp, fp, #1
   13580:	tst	r3, fp
   13584:	beq	135b0 <__assert_fail@plt+0x24b8>
   13588:	cmp	r9, r4
   1358c:	movhi	r3, #39	; 0x27
   13590:	strbhi	r3, [r8, r4]
   13594:	add	r3, r4, #1
   13598:	add	r4, r4, #2
   1359c:	cmp	r9, r3
   135a0:	movhi	r2, #39	; 0x27
   135a4:	strbhi	r2, [r8, r3]
   135a8:	mov	r3, #0
   135ac:	str	r3, [sp, #52]	; 0x34
   135b0:	cmp	r9, r4
   135b4:	ldr	r3, [sp, #72]	; 0x48
   135b8:	strbhi	r6, [r8, r4]
   135bc:	cmp	r5, #0
   135c0:	add	r4, r4, #1
   135c4:	moveq	r3, #0
   135c8:	str	r3, [sp, #72]	; 0x48
   135cc:	ldr	r3, [sp, #28]
   135d0:	add	r3, r3, #1
   135d4:	b	12d8c <__assert_fail@plt+0x1c94>
   135d8:	ldr	r3, [sp, #24]
   135dc:	and	r3, r3, r7
   135e0:	tst	r5, r3
   135e4:	moveq	r3, r6
   135e8:	beq	13178 <__assert_fail@plt+0x2080>
   135ec:	mov	fp, #0
   135f0:	mov	r5, fp
   135f4:	b	13578 <__assert_fail@plt+0x2480>
   135f8:	mov	r3, #116	; 0x74
   135fc:	b	13178 <__assert_fail@plt+0x2080>
   13600:	mov	r3, #110	; 0x6e
   13604:	b	13178 <__assert_fail@plt+0x2080>
   13608:	mov	r3, #97	; 0x61
   1360c:	ldr	r2, [sp, #24]
   13610:	cmp	r2, #0
   13614:	beq	13558 <__assert_fail@plt+0x2460>
   13618:	mov	r6, r3
   1361c:	mov	r5, #0
   13620:	b	13380 <__assert_fail@plt+0x2288>
   13624:	mov	r3, #98	; 0x62
   13628:	b	1360c <__assert_fail@plt+0x2514>
   1362c:	mov	r3, #118	; 0x76
   13630:	b	1360c <__assert_fail@plt+0x2514>
   13634:	mov	r3, #102	; 0x66
   13638:	b	1360c <__assert_fail@plt+0x2514>
   1363c:	ldr	r3, [sp, #40]	; 0x28
   13640:	cmn	r3, #1
   13644:	bne	13664 <__assert_fail@plt+0x256c>
   13648:	ldr	r3, [sp, #48]	; 0x30
   1364c:	ldrb	r3, [r3, #1]
   13650:	adds	r3, r3, #0
   13654:	movne	r3, #1
   13658:	cmp	r3, #0
   1365c:	bne	13558 <__assert_fail@plt+0x2460>
   13660:	b	13444 <__assert_fail@plt+0x234c>
   13664:	ldr	r3, [sp, #40]	; 0x28
   13668:	subs	r3, r3, #1
   1366c:	b	13654 <__assert_fail@plt+0x255c>
   13670:	mov	r3, #0
   13674:	mov	r2, #0
   13678:	strd	r2, [sp, #96]	; 0x60
   1367c:	ldr	r3, [sp, #40]	; 0x28
   13680:	cmn	r3, #1
   13684:	bne	13694 <__assert_fail@plt+0x259c>
   13688:	ldr	r0, [sp, #48]	; 0x30
   1368c:	bl	10fc0 <strlen@plt>
   13690:	str	r0, [sp, #40]	; 0x28
   13694:	ldr	r5, [sp, #36]	; 0x24
   13698:	mov	r3, #0
   1369c:	str	r3, [sp, #56]	; 0x38
   136a0:	ldr	r3, [sp, #28]
   136a4:	add	r0, sp, #92	; 0x5c
   136a8:	ldr	r1, [sp, #40]	; 0x28
   136ac:	ldr	r2, [sp, #56]	; 0x38
   136b0:	add	r2, r3, r2
   136b4:	ldr	r3, [sp, #48]	; 0x30
   136b8:	add	fp, r3, r2
   136bc:	sub	r2, r1, r2
   136c0:	add	r3, sp, #96	; 0x60
   136c4:	mov	r1, fp
   136c8:	bl	14bec <__assert_fail@plt+0x3af4>
   136cc:	subs	r2, r0, #0
   136d0:	beq	13710 <__assert_fail@plt+0x2618>
   136d4:	cmn	r2, #1
   136d8:	beq	138e4 <__assert_fail@plt+0x27ec>
   136dc:	cmn	r2, #2
   136e0:	bne	13854 <__assert_fail@plt+0x275c>
   136e4:	ldr	r3, [sp, #28]
   136e8:	ldr	r2, [sp, #56]	; 0x38
   136ec:	add	r3, r3, r2
   136f0:	ldr	r2, [sp, #40]	; 0x28
   136f4:	cmp	r2, r3
   136f8:	bls	138e4 <__assert_fail@plt+0x27ec>
   136fc:	ldr	r2, [sp, #56]	; 0x38
   13700:	ldr	r3, [sp, #80]	; 0x50
   13704:	ldrb	r5, [r3, r2]
   13708:	cmp	r5, #0
   1370c:	bne	13844 <__assert_fail@plt+0x274c>
   13710:	ldr	r3, [sp, #56]	; 0x38
   13714:	cmp	r3, #1
   13718:	bls	1313c <__assert_fail@plt+0x2044>
   1371c:	ldr	r3, [sp, #28]
   13720:	mov	fp, #0
   13724:	mov	ip, #92	; 0x5c
   13728:	ldr	r2, [sp, #56]	; 0x38
   1372c:	add	r3, r3, r2
   13730:	ldr	r2, [sp, #24]
   13734:	str	r3, [sp, #36]	; 0x24
   13738:	eor	r3, r5, #1
   1373c:	and	r3, r3, r2
   13740:	mov	r2, #39	; 0x27
   13744:	uxtb	r3, r3
   13748:	cmp	r3, #0
   1374c:	beq	138ec <__assert_fail@plt+0x27f4>
   13750:	sub	r0, sl, #2
   13754:	cmp	r7, #0
   13758:	clz	r0, r0
   1375c:	lsr	r0, r0, #5
   13760:	bne	13060 <__assert_fail@plt+0x1f68>
   13764:	ldr	r1, [sp, #52]	; 0x34
   13768:	eor	r1, r1, #1
   1376c:	ands	r1, r0, r1
   13770:	beq	137a0 <__assert_fail@plt+0x26a8>
   13774:	cmp	r9, r4
   13778:	add	r0, r4, #1
   1377c:	str	r1, [sp, #52]	; 0x34
   13780:	strbhi	r2, [r8, r4]
   13784:	cmp	r9, r0
   13788:	movhi	lr, #36	; 0x24
   1378c:	strbhi	lr, [r8, r0]
   13790:	add	r0, r4, #2
   13794:	add	r4, r4, #3
   13798:	cmp	r9, r0
   1379c:	strbhi	r2, [r8, r0]
   137a0:	cmp	r9, r4
   137a4:	add	r0, r4, #1
   137a8:	mov	fp, r3
   137ac:	strbhi	ip, [r8, r4]
   137b0:	cmp	r9, r0
   137b4:	lsrhi	r1, r6, #6
   137b8:	addhi	r1, r1, #48	; 0x30
   137bc:	strbhi	r1, [r8, r0]
   137c0:	add	r0, r4, #2
   137c4:	add	r4, r4, #3
   137c8:	cmp	r9, r0
   137cc:	ubfxhi	r1, r6, #3, #3
   137d0:	and	r6, r6, #7
   137d4:	add	r6, r6, #48	; 0x30
   137d8:	addhi	r1, r1, #48	; 0x30
   137dc:	strbhi	r1, [r8, r0]
   137e0:	eor	r0, fp, #1
   137e4:	ldr	r1, [sp, #28]
   137e8:	ldr	lr, [sp, #52]	; 0x34
   137ec:	add	r1, r1, #1
   137f0:	and	r0, r0, lr
   137f4:	ldr	lr, [sp, #36]	; 0x24
   137f8:	cmp	r1, lr
   137fc:	bcs	13578 <__assert_fail@plt+0x2480>
   13800:	cmp	r0, #0
   13804:	beq	13828 <__assert_fail@plt+0x2730>
   13808:	cmp	r9, r4
   1380c:	add	r0, r4, #1
   13810:	strbhi	r2, [r8, r4]
   13814:	cmp	r9, r0
   13818:	add	r4, r4, #2
   1381c:	strbhi	r2, [r8, r0]
   13820:	mov	r0, #0
   13824:	str	r0, [sp, #52]	; 0x34
   13828:	ldr	r0, [sp, #48]	; 0x30
   1382c:	cmp	r9, r4
   13830:	str	r1, [sp, #28]
   13834:	strbhi	r6, [r8, r4]
   13838:	add	r4, r4, #1
   1383c:	ldrb	r6, [r0, r1]
   13840:	b	13748 <__assert_fail@plt+0x2650>
   13844:	ldr	r3, [sp, #56]	; 0x38
   13848:	add	r3, r3, #1
   1384c:	str	r3, [sp, #56]	; 0x38
   13850:	b	136e4 <__assert_fail@plt+0x25ec>
   13854:	cmp	sl, #2
   13858:	movne	r3, #0
   1385c:	andeq	r3, r7, #1
   13860:	cmp	r3, #0
   13864:	movne	r1, #1
   13868:	bne	138c4 <__assert_fail@plt+0x27cc>
   1386c:	ldr	r0, [sp, #92]	; 0x5c
   13870:	str	r2, [sp, #84]	; 0x54
   13874:	bl	10f18 <iswprint@plt>
   13878:	ldr	r3, [sp, #56]	; 0x38
   1387c:	cmp	r0, #0
   13880:	add	r0, sp, #96	; 0x60
   13884:	moveq	r5, #0
   13888:	ldr	r2, [sp, #84]	; 0x54
   1388c:	add	r3, r3, r2
   13890:	str	r3, [sp, #56]	; 0x38
   13894:	bl	10eb8 <mbsinit@plt>
   13898:	cmp	r0, #0
   1389c:	beq	136a0 <__assert_fail@plt+0x25a8>
   138a0:	b	13710 <__assert_fail@plt+0x2618>
   138a4:	ldrb	r3, [fp, #1]!
   138a8:	cmp	r3, #94	; 0x5e
   138ac:	beq	1318c <__assert_fail@plt+0x2094>
   138b0:	bhi	138d0 <__assert_fail@plt+0x27d8>
   138b4:	sub	r3, r3, #91	; 0x5b
   138b8:	cmp	r3, #1
   138bc:	bls	1318c <__assert_fail@plt+0x2094>
   138c0:	add	r1, r1, #1
   138c4:	cmp	r1, r2
   138c8:	bne	138a4 <__assert_fail@plt+0x27ac>
   138cc:	b	1386c <__assert_fail@plt+0x2774>
   138d0:	cmp	r3, #96	; 0x60
   138d4:	beq	1318c <__assert_fail@plt+0x2094>
   138d8:	cmp	r3, #124	; 0x7c
   138dc:	bne	138c0 <__assert_fail@plt+0x27c8>
   138e0:	b	1318c <__assert_fail@plt+0x2094>
   138e4:	mov	r5, #0
   138e8:	b	13710 <__assert_fail@plt+0x2618>
   138ec:	ldr	r1, [sp, #64]	; 0x40
   138f0:	cmp	r1, #0
   138f4:	beq	137e0 <__assert_fail@plt+0x26e8>
   138f8:	cmp	r9, r4
   138fc:	mov	r1, #0
   13900:	strbhi	ip, [r8, r4]
   13904:	add	r4, r4, #1
   13908:	str	r1, [sp, #64]	; 0x40
   1390c:	b	137e0 <__assert_fail@plt+0x26e8>
   13910:	mov	r5, fp
   13914:	ldr	fp, [sp, #24]
   13918:	mov	r6, #48	; 0x30
   1391c:	b	1332c <__assert_fail@plt+0x2234>
   13920:	mov	r5, #0
   13924:	b	1332c <__assert_fail@plt+0x2234>
   13928:	mov	r6, r1
   1392c:	b	13558 <__assert_fail@plt+0x2460>
   13930:	mov	r6, r1
   13934:	b	13548 <__assert_fail@plt+0x2450>
   13938:	ldr	r2, [sp, #28]
   1393c:	ldr	r3, [sp, #40]	; 0x28
   13940:	subs	r3, r3, r2
   13944:	movne	r3, #1
   13948:	b	12db0 <__assert_fail@plt+0x1cb8>
   1394c:	ldr	r3, [sp, #60]	; 0x3c
   13950:	mov	sl, #2
   13954:	ldr	r7, [sp, #72]	; 0x48
   13958:	adds	r6, r3, #0
   1395c:	mov	r5, r3
   13960:	movne	r6, #1
   13964:	cmp	r9, #0
   13968:	movne	r6, #0
   1396c:	cmp	r6, #0
   13970:	bne	12d40 <__assert_fail@plt+0x1c48>
   13974:	ldr	r3, [sp, #68]	; 0x44
   13978:	ldr	r2, [sp, #44]	; 0x2c
   1397c:	cmp	r2, #0
   13980:	moveq	r3, #0
   13984:	andne	r3, r3, #1
   13988:	cmp	r3, #0
   1398c:	movne	r3, r2
   13990:	subne	r3, r3, #1
   13994:	bne	139c4 <__assert_fail@plt+0x28cc>
   13998:	cmp	r9, r4
   1399c:	movhi	r3, #0
   139a0:	strbhi	r3, [r8, r4]
   139a4:	mov	r0, r4
   139a8:	add	sp, sp, #108	; 0x6c
   139ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b0:	mov	r3, r7
   139b4:	b	13978 <__assert_fail@plt+0x2880>
   139b8:	cmp	r9, r4
   139bc:	strbhi	r2, [r8, r4]
   139c0:	add	r4, r4, #1
   139c4:	ldrb	r2, [r3, #1]!
   139c8:	cmp	r2, #0
   139cc:	bne	139b8 <__assert_fail@plt+0x28c0>
   139d0:	b	13998 <__assert_fail@plt+0x28a0>
   139d4:			; <UNDEFINED> instruction: 0x00015ab4
   139d8:	andeq	r5, r1, r7, asr #21
   139dc:	andeq	r5, r1, r5, asr #21
   139e0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   139e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139e8:	sub	sp, sp, #52	; 0x34
   139ec:	mov	r6, r0
   139f0:	mov	r5, r3
   139f4:	mov	r8, r1
   139f8:	mov	r9, r2
   139fc:	bl	10fd8 <__errno_location@plt>
   13a00:	ldr	r3, [r0]
   13a04:	cmn	r6, #-2147483647	; 0x80000001
   13a08:	str	r0, [sp, #24]
   13a0c:	ldr	r7, [pc, #368]	; 13b84 <__assert_fail@plt+0x2a8c>
   13a10:	str	r3, [sp, #32]
   13a14:	movne	r3, #0
   13a18:	moveq	r3, #1
   13a1c:	orrs	r3, r3, r6, lsr #31
   13a20:	ldr	r4, [r7]
   13a24:	beq	13a2c <__assert_fail@plt+0x2934>
   13a28:	bl	110c8 <abort@plt>
   13a2c:	ldr	r2, [r7, #4]
   13a30:	cmp	r2, r6
   13a34:	bgt	13aa4 <__assert_fail@plt+0x29ac>
   13a38:	add	sl, r7, #8
   13a3c:	mov	r3, #8
   13a40:	cmp	r4, sl
   13a44:	add	r1, sp, #44	; 0x2c
   13a48:	str	r2, [sp, #44]	; 0x2c
   13a4c:	sub	r2, r6, r2
   13a50:	movne	r0, r4
   13a54:	moveq	r0, #0
   13a58:	add	r2, r2, #1
   13a5c:	str	r3, [sp]
   13a60:	mvn	r3, #-2147483648	; 0x80000000
   13a64:	bl	14738 <__assert_fail@plt+0x3640>
   13a68:	cmp	r4, sl
   13a6c:	mov	fp, r0
   13a70:	str	r0, [r7]
   13a74:	ldmeq	r4, {r0, r1}
   13a78:	mov	r4, fp
   13a7c:	ldr	r2, [sp, #44]	; 0x2c
   13a80:	stmeq	fp, {r0, r1}
   13a84:	mov	r1, #0
   13a88:	ldr	r0, [r7, #4]
   13a8c:	sub	r2, r2, r0
   13a90:	add	r0, fp, r0, lsl #3
   13a94:	lsl	r2, r2, #3
   13a98:	bl	10ff0 <memset@plt>
   13a9c:	ldr	r3, [sp, #44]	; 0x2c
   13aa0:	str	r3, [r7, #4]
   13aa4:	ldr	r3, [r5, #4]
   13aa8:	add	sl, r4, r6, lsl #3
   13aac:	mov	r2, r8
   13ab0:	ldr	fp, [r4, r6, lsl #3]
   13ab4:	ldr	r7, [sl, #4]
   13ab8:	orr	r3, r3, #1
   13abc:	str	r3, [sp, #28]
   13ac0:	add	r3, r5, #8
   13ac4:	mov	r1, fp
   13ac8:	str	r3, [sp, #36]	; 0x24
   13acc:	mov	r0, r7
   13ad0:	ldr	r3, [r5, #44]	; 0x2c
   13ad4:	str	r3, [sp, #16]
   13ad8:	ldr	r3, [r5, #40]	; 0x28
   13adc:	str	r3, [sp, #12]
   13ae0:	add	r3, r5, #8
   13ae4:	str	r3, [sp, #8]
   13ae8:	ldr	r3, [sp, #28]
   13aec:	str	r3, [sp, #4]
   13af0:	ldr	r3, [r5]
   13af4:	str	r3, [sp]
   13af8:	mov	r3, r9
   13afc:	bl	12cf4 <__assert_fail@plt+0x1bfc>
   13b00:	cmp	fp, r0
   13b04:	bhi	13b6c <__assert_fail@plt+0x2a74>
   13b08:	ldr	r3, [pc, #120]	; 13b88 <__assert_fail@plt+0x2a90>
   13b0c:	add	fp, r0, #1
   13b10:	str	fp, [r4, r6, lsl #3]
   13b14:	cmp	r7, r3
   13b18:	beq	13b24 <__assert_fail@plt+0x2a2c>
   13b1c:	mov	r0, r7
   13b20:	bl	126a8 <__assert_fail@plt+0x15b0>
   13b24:	mov	r0, fp
   13b28:	bl	14628 <__assert_fail@plt+0x3530>
   13b2c:	ldr	r3, [r5, #44]	; 0x2c
   13b30:	mov	r2, r8
   13b34:	mov	r1, fp
   13b38:	str	r0, [sl, #4]
   13b3c:	mov	r7, r0
   13b40:	str	r3, [sp, #16]
   13b44:	ldr	r3, [r5, #40]	; 0x28
   13b48:	str	r3, [sp, #12]
   13b4c:	add	r3, r5, #8
   13b50:	str	r3, [sp, #8]
   13b54:	ldr	r3, [sp, #28]
   13b58:	str	r3, [sp, #4]
   13b5c:	ldr	r3, [r5]
   13b60:	str	r3, [sp]
   13b64:	mov	r3, r9
   13b68:	bl	12cf4 <__assert_fail@plt+0x1bfc>
   13b6c:	ldr	r3, [sp, #24]
   13b70:	mov	r0, r7
   13b74:	ldr	r2, [sp, #32]
   13b78:	str	r2, [r3]
   13b7c:	add	sp, sp, #52	; 0x34
   13b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b84:	andeq	r6, r2, r0, lsl r1
   13b88:			; <UNDEFINED> instruction: 0x000261b4
   13b8c:	push	{r4, r5, r6, lr}
   13b90:	mov	r5, r0
   13b94:	bl	10fd8 <__errno_location@plt>
   13b98:	mov	r4, r0
   13b9c:	cmp	r5, #0
   13ba0:	ldr	r0, [pc, #20]	; 13bbc <__assert_fail@plt+0x2ac4>
   13ba4:	mov	r1, #48	; 0x30
   13ba8:	movne	r0, r5
   13bac:	ldr	r6, [r4]
   13bb0:	bl	14828 <__assert_fail@plt+0x3730>
   13bb4:	str	r6, [r4]
   13bb8:	pop	{r4, r5, r6, pc}
   13bbc:			; <UNDEFINED> instruction: 0x000262b4
   13bc0:	ldr	r3, [pc, #12]	; 13bd4 <__assert_fail@plt+0x2adc>
   13bc4:	cmp	r0, #0
   13bc8:	moveq	r0, r3
   13bcc:	ldr	r0, [r0]
   13bd0:	bx	lr
   13bd4:			; <UNDEFINED> instruction: 0x000262b4
   13bd8:	ldr	r3, [pc, #12]	; 13bec <__assert_fail@plt+0x2af4>
   13bdc:	cmp	r0, #0
   13be0:	moveq	r0, r3
   13be4:	str	r1, [r0]
   13be8:	bx	lr
   13bec:			; <UNDEFINED> instruction: 0x000262b4
   13bf0:	ldr	r3, [pc, #52]	; 13c2c <__assert_fail@plt+0x2b34>
   13bf4:	cmp	r0, #0
   13bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   13bfc:	lsr	lr, r1, #5
   13c00:	and	r1, r1, #31
   13c04:	moveq	r0, r3
   13c08:	add	r3, r0, #8
   13c0c:	ldr	ip, [r3, lr, lsl #2]
   13c10:	lsr	r0, ip, r1
   13c14:	eor	r2, r2, r0
   13c18:	and	r0, r0, #1
   13c1c:	and	r2, r2, #1
   13c20:	eor	r1, ip, r2, lsl r1
   13c24:	str	r1, [r3, lr, lsl #2]
   13c28:	pop	{pc}		; (ldr pc, [sp], #4)
   13c2c:			; <UNDEFINED> instruction: 0x000262b4
   13c30:	ldr	r3, [pc, #16]	; 13c48 <__assert_fail@plt+0x2b50>
   13c34:	cmp	r0, #0
   13c38:	movne	r3, r0
   13c3c:	ldr	r0, [r3, #4]
   13c40:	str	r1, [r3, #4]
   13c44:	bx	lr
   13c48:			; <UNDEFINED> instruction: 0x000262b4
   13c4c:	ldr	r3, [pc, #44]	; 13c80 <__assert_fail@plt+0x2b88>
   13c50:	cmp	r0, #0
   13c54:	moveq	r0, r3
   13c58:	mov	r3, #10
   13c5c:	cmp	r2, #0
   13c60:	cmpne	r1, #0
   13c64:	str	r3, [r0]
   13c68:	bne	13c74 <__assert_fail@plt+0x2b7c>
   13c6c:	push	{r4, lr}
   13c70:	bl	110c8 <abort@plt>
   13c74:	str	r1, [r0, #40]	; 0x28
   13c78:	str	r2, [r0, #44]	; 0x2c
   13c7c:	bx	lr
   13c80:			; <UNDEFINED> instruction: 0x000262b4
   13c84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c88:	sub	sp, sp, #24
   13c8c:	mov	sl, r3
   13c90:	mov	r7, r0
   13c94:	mov	r8, r1
   13c98:	mov	r9, r2
   13c9c:	ldr	r4, [sp, #56]	; 0x38
   13ca0:	ldr	r3, [pc, #88]	; 13d00 <__assert_fail@plt+0x2c08>
   13ca4:	cmp	r4, #0
   13ca8:	moveq	r4, r3
   13cac:	bl	10fd8 <__errno_location@plt>
   13cb0:	ldr	r3, [r4, #44]	; 0x2c
   13cb4:	mov	r5, r0
   13cb8:	mov	r2, r9
   13cbc:	mov	r1, r8
   13cc0:	mov	r0, r7
   13cc4:	ldr	r6, [r5]
   13cc8:	str	r3, [sp, #16]
   13ccc:	ldr	r3, [r4, #40]	; 0x28
   13cd0:	str	r3, [sp, #12]
   13cd4:	add	r3, r4, #8
   13cd8:	str	r3, [sp, #8]
   13cdc:	ldr	r3, [r4, #4]
   13ce0:	str	r3, [sp, #4]
   13ce4:	ldr	r3, [r4]
   13ce8:	str	r3, [sp]
   13cec:	mov	r3, sl
   13cf0:	bl	12cf4 <__assert_fail@plt+0x1bfc>
   13cf4:	str	r6, [r5]
   13cf8:	add	sp, sp, #24
   13cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d00:			; <UNDEFINED> instruction: 0x000262b4
   13d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d08:	cmp	r3, #0
   13d0c:	sub	sp, sp, #44	; 0x2c
   13d10:	mov	r6, r2
   13d14:	mov	sl, r1
   13d18:	mov	r9, r0
   13d1c:	ldr	r4, [pc, #176]	; 13dd4 <__assert_fail@plt+0x2cdc>
   13d20:	movne	r4, r3
   13d24:	bl	10fd8 <__errno_location@plt>
   13d28:	ldr	r3, [r0]
   13d2c:	mov	r1, #0
   13d30:	mov	r2, r9
   13d34:	mov	r8, r0
   13d38:	mov	r0, r1
   13d3c:	ldr	r5, [r4, #4]
   13d40:	add	fp, r4, #8
   13d44:	str	r3, [sp, #28]
   13d48:	ldr	r3, [r4, #44]	; 0x2c
   13d4c:	cmp	r6, #0
   13d50:	orreq	r5, r5, #1
   13d54:	str	r3, [sp, #16]
   13d58:	ldr	r3, [r4, #40]	; 0x28
   13d5c:	stmib	sp, {r5, fp}
   13d60:	str	r3, [sp, #12]
   13d64:	ldr	r3, [r4]
   13d68:	str	r3, [sp]
   13d6c:	mov	r3, sl
   13d70:	bl	12cf4 <__assert_fail@plt+0x1bfc>
   13d74:	add	r1, r0, #1
   13d78:	mov	r7, r0
   13d7c:	mov	r0, r1
   13d80:	str	r1, [sp, #36]	; 0x24
   13d84:	bl	14628 <__assert_fail@plt+0x3530>
   13d88:	ldr	r3, [r4, #44]	; 0x2c
   13d8c:	mov	r2, r9
   13d90:	ldr	r1, [sp, #36]	; 0x24
   13d94:	str	r3, [sp, #16]
   13d98:	ldr	r3, [r4, #40]	; 0x28
   13d9c:	stmib	sp, {r5, fp}
   13da0:	str	r0, [sp, #32]
   13da4:	str	r3, [sp, #12]
   13da8:	ldr	r3, [r4]
   13dac:	str	r3, [sp]
   13db0:	mov	r3, sl
   13db4:	bl	12cf4 <__assert_fail@plt+0x1bfc>
   13db8:	ldr	r3, [sp, #28]
   13dbc:	cmp	r6, #0
   13dc0:	ldr	r0, [sp, #32]
   13dc4:	str	r3, [r8]
   13dc8:	strne	r7, [r6]
   13dcc:	add	sp, sp, #44	; 0x2c
   13dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dd4:			; <UNDEFINED> instruction: 0x000262b4
   13dd8:	mov	r3, r2
   13ddc:	mov	r2, #0
   13de0:	b	13d04 <__assert_fail@plt+0x2c0c>
   13de4:	push	{r4, r5, r6, r7, r8, lr}
   13de8:	mov	r6, #1
   13dec:	ldr	r4, [pc, #100]	; 13e58 <__assert_fail@plt+0x2d60>
   13df0:	ldr	r5, [r4]
   13df4:	add	r7, r5, #4
   13df8:	ldr	r3, [r4, #4]
   13dfc:	cmp	r3, r6
   13e00:	bgt	13e48 <__assert_fail@plt+0x2d50>
   13e04:	ldr	r6, [pc, #80]	; 13e5c <__assert_fail@plt+0x2d64>
   13e08:	ldr	r0, [r5, #4]
   13e0c:	cmp	r0, r6
   13e10:	beq	13e24 <__assert_fail@plt+0x2d2c>
   13e14:	bl	126a8 <__assert_fail@plt+0x15b0>
   13e18:	mov	r3, #256	; 0x100
   13e1c:	str	r3, [r4, #8]
   13e20:	str	r6, [r4, #12]
   13e24:	ldr	r6, [pc, #52]	; 13e60 <__assert_fail@plt+0x2d68>
   13e28:	cmp	r5, r6
   13e2c:	beq	13e3c <__assert_fail@plt+0x2d44>
   13e30:	mov	r0, r5
   13e34:	bl	126a8 <__assert_fail@plt+0x15b0>
   13e38:	str	r6, [r4]
   13e3c:	mov	r3, #1
   13e40:	str	r3, [r4, #4]
   13e44:	pop	{r4, r5, r6, r7, r8, pc}
   13e48:	ldr	r0, [r7, r6, lsl #3]
   13e4c:	add	r6, r6, #1
   13e50:	bl	126a8 <__assert_fail@plt+0x15b0>
   13e54:	b	13df8 <__assert_fail@plt+0x2d00>
   13e58:	andeq	r6, r2, r0, lsl r1
   13e5c:			; <UNDEFINED> instruction: 0x000261b4
   13e60:	andeq	r6, r2, r8, lsl r1
   13e64:	ldr	r3, [pc, #4]	; 13e70 <__assert_fail@plt+0x2d78>
   13e68:	mvn	r2, #0
   13e6c:	b	139e4 <__assert_fail@plt+0x28ec>
   13e70:			; <UNDEFINED> instruction: 0x000262b4
   13e74:	ldr	r3, [pc]	; 13e7c <__assert_fail@plt+0x2d84>
   13e78:	b	139e4 <__assert_fail@plt+0x28ec>
   13e7c:			; <UNDEFINED> instruction: 0x000262b4
   13e80:	mov	r1, r0
   13e84:	mov	r0, #0
   13e88:	b	13e64 <__assert_fail@plt+0x2d6c>
   13e8c:	mov	r2, r1
   13e90:	mov	r1, r0
   13e94:	mov	r0, #0
   13e98:	b	13e74 <__assert_fail@plt+0x2d7c>
   13e9c:	push	{r4, r5, lr}
   13ea0:	sub	sp, sp, #52	; 0x34
   13ea4:	mov	r5, r2
   13ea8:	mov	r4, r0
   13eac:	mov	r0, sp
   13eb0:	bl	12b98 <__assert_fail@plt+0x1aa0>
   13eb4:	mov	r3, sp
   13eb8:	mvn	r2, #0
   13ebc:	mov	r1, r5
   13ec0:	mov	r0, r4
   13ec4:	bl	139e4 <__assert_fail@plt+0x28ec>
   13ec8:	add	sp, sp, #52	; 0x34
   13ecc:	pop	{r4, r5, pc}
   13ed0:	push	{r4, r5, r6, lr}
   13ed4:	sub	sp, sp, #48	; 0x30
   13ed8:	mov	r5, r2
   13edc:	mov	r6, r3
   13ee0:	mov	r4, r0
   13ee4:	mov	r0, sp
   13ee8:	bl	12b98 <__assert_fail@plt+0x1aa0>
   13eec:	mov	r3, sp
   13ef0:	mov	r2, r6
   13ef4:	mov	r1, r5
   13ef8:	mov	r0, r4
   13efc:	bl	139e4 <__assert_fail@plt+0x28ec>
   13f00:	add	sp, sp, #48	; 0x30
   13f04:	pop	{r4, r5, r6, pc}
   13f08:	mov	r2, r1
   13f0c:	mov	r1, r0
   13f10:	mov	r0, #0
   13f14:	b	13e9c <__assert_fail@plt+0x2da4>
   13f18:	mov	r3, r2
   13f1c:	mov	r2, r1
   13f20:	mov	r1, r0
   13f24:	mov	r0, #0
   13f28:	b	13ed0 <__assert_fail@plt+0x2dd8>
   13f2c:	push	{r4, r5, r6, lr}
   13f30:	mov	r4, r0
   13f34:	mov	r5, r1
   13f38:	mov	r6, r2
   13f3c:	sub	sp, sp, #48	; 0x30
   13f40:	mov	ip, sp
   13f44:	ldr	lr, [pc, #64]	; 13f8c <__assert_fail@plt+0x2e94>
   13f48:	ldm	lr!, {r0, r1, r2, r3}
   13f4c:	stmia	ip!, {r0, r1, r2, r3}
   13f50:	ldm	lr!, {r0, r1, r2, r3}
   13f54:	stmia	ip!, {r0, r1, r2, r3}
   13f58:	ldm	lr, {r0, r1, r2, r3}
   13f5c:	stm	ip, {r0, r1, r2, r3}
   13f60:	mov	r1, r6
   13f64:	mov	r2, #1
   13f68:	mov	r0, sp
   13f6c:	bl	13bf0 <__assert_fail@plt+0x2af8>
   13f70:	mov	r3, sp
   13f74:	mov	r2, r5
   13f78:	mov	r1, r4
   13f7c:	mov	r0, #0
   13f80:	bl	139e4 <__assert_fail@plt+0x28ec>
   13f84:	add	sp, sp, #48	; 0x30
   13f88:	pop	{r4, r5, r6, pc}
   13f8c:			; <UNDEFINED> instruction: 0x000262b4
   13f90:	mov	r2, r1
   13f94:	mvn	r1, #0
   13f98:	b	13f2c <__assert_fail@plt+0x2e34>
   13f9c:	mov	r1, #58	; 0x3a
   13fa0:	b	13f90 <__assert_fail@plt+0x2e98>
   13fa4:	mov	r2, #58	; 0x3a
   13fa8:	b	13f2c <__assert_fail@plt+0x2e34>
   13fac:	push	{r4, r5, lr}
   13fb0:	sub	sp, sp, #100	; 0x64
   13fb4:	mov	r4, r0
   13fb8:	mov	r0, sp
   13fbc:	mov	r5, r2
   13fc0:	bl	12b98 <__assert_fail@plt+0x1aa0>
   13fc4:	mov	ip, sp
   13fc8:	add	lr, sp, #48	; 0x30
   13fcc:	ldm	ip!, {r0, r1, r2, r3}
   13fd0:	stmia	lr!, {r0, r1, r2, r3}
   13fd4:	ldm	ip!, {r0, r1, r2, r3}
   13fd8:	stmia	lr!, {r0, r1, r2, r3}
   13fdc:	ldm	ip, {r0, r1, r2, r3}
   13fe0:	stm	lr, {r0, r1, r2, r3}
   13fe4:	mov	r2, #1
   13fe8:	mov	r1, #58	; 0x3a
   13fec:	add	r0, sp, #48	; 0x30
   13ff0:	bl	13bf0 <__assert_fail@plt+0x2af8>
   13ff4:	add	r3, sp, #48	; 0x30
   13ff8:	mvn	r2, #0
   13ffc:	mov	r1, r5
   14000:	mov	r0, r4
   14004:	bl	139e4 <__assert_fail@plt+0x28ec>
   14008:	add	sp, sp, #100	; 0x64
   1400c:	pop	{r4, r5, pc}
   14010:	push	{r4, r5, r6, r7, lr}
   14014:	mov	r4, r0
   14018:	mov	r6, r1
   1401c:	mov	r7, r2
   14020:	mov	r5, r3
   14024:	sub	sp, sp, #52	; 0x34
   14028:	ldr	lr, [pc, #68]	; 14074 <__assert_fail@plt+0x2f7c>
   1402c:	mov	ip, sp
   14030:	ldm	lr!, {r0, r1, r2, r3}
   14034:	stmia	ip!, {r0, r1, r2, r3}
   14038:	ldm	lr!, {r0, r1, r2, r3}
   1403c:	stmia	ip!, {r0, r1, r2, r3}
   14040:	ldm	lr, {r0, r1, r2, r3}
   14044:	stm	ip, {r0, r1, r2, r3}
   14048:	mov	r2, r7
   1404c:	mov	r1, r6
   14050:	mov	r0, sp
   14054:	bl	13c4c <__assert_fail@plt+0x2b54>
   14058:	ldr	r2, [sp, #72]	; 0x48
   1405c:	mov	r3, sp
   14060:	mov	r1, r5
   14064:	mov	r0, r4
   14068:	bl	139e4 <__assert_fail@plt+0x28ec>
   1406c:	add	sp, sp, #52	; 0x34
   14070:	pop	{r4, r5, r6, r7, pc}
   14074:			; <UNDEFINED> instruction: 0x000262b4
   14078:	mvn	ip, #0
   1407c:	push	{r0, r1, r2, lr}
   14080:	str	ip, [sp]
   14084:	bl	14010 <__assert_fail@plt+0x2f18>
   14088:	add	sp, sp, #12
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	mov	r3, r2
   14094:	mov	r2, r1
   14098:	mov	r1, r0
   1409c:	mov	r0, #0
   140a0:	b	14078 <__assert_fail@plt+0x2f80>
   140a4:	push	{r0, r1, r2, lr}
   140a8:	str	r3, [sp]
   140ac:	mov	r3, r2
   140b0:	mov	r2, r1
   140b4:	mov	r1, r0
   140b8:	mov	r0, #0
   140bc:	bl	14010 <__assert_fail@plt+0x2f18>
   140c0:	add	sp, sp, #12
   140c4:	pop	{pc}		; (ldr pc, [sp], #4)
   140c8:	ldr	r3, [pc]	; 140d0 <__assert_fail@plt+0x2fd8>
   140cc:	b	139e4 <__assert_fail@plt+0x28ec>
   140d0:	andeq	r6, r2, r0, lsr #2
   140d4:	mov	r2, r1
   140d8:	mov	r1, r0
   140dc:	mov	r0, #0
   140e0:	b	140c8 <__assert_fail@plt+0x2fd0>
   140e4:	mvn	r2, #0
   140e8:	b	140c8 <__assert_fail@plt+0x2fd0>
   140ec:	mov	r1, r0
   140f0:	mov	r0, #0
   140f4:	b	140e4 <__assert_fail@plt+0x2fec>
   140f8:	push	{r4, r5, r6, lr}
   140fc:	cmp	r1, #0
   14100:	sub	sp, sp, #32
   14104:	mov	r5, r0
   14108:	ldr	r4, [sp, #48]	; 0x30
   1410c:	ldr	r6, [sp, #52]	; 0x34
   14110:	beq	141c4 <__assert_fail@plt+0x30cc>
   14114:	strd	r2, [sp]
   14118:	mov	r3, r1
   1411c:	mov	r1, #1
   14120:	ldr	r2, [pc, #856]	; 14480 <__assert_fail@plt+0x3388>
   14124:	bl	11020 <__fprintf_chk@plt>
   14128:	mov	r2, #5
   1412c:	ldr	r1, [pc, #848]	; 14484 <__assert_fail@plt+0x338c>
   14130:	mov	r0, #0
   14134:	bl	10ef4 <dcgettext@plt>
   14138:	movw	r3, #2022	; 0x7e6
   1413c:	ldr	r2, [pc, #836]	; 14488 <__assert_fail@plt+0x3390>
   14140:	mov	r1, #1
   14144:	str	r3, [sp]
   14148:	mov	r3, r0
   1414c:	mov	r0, r5
   14150:	bl	11020 <__fprintf_chk@plt>
   14154:	mov	r1, r5
   14158:	mov	r0, #10
   1415c:	bl	10edc <fputc_unlocked@plt>
   14160:	mov	r2, #5
   14164:	ldr	r1, [pc, #800]	; 1448c <__assert_fail@plt+0x3394>
   14168:	mov	r0, #0
   1416c:	bl	10ef4 <dcgettext@plt>
   14170:	mov	r2, r0
   14174:	mov	r1, #1
   14178:	ldr	r3, [pc, #784]	; 14490 <__assert_fail@plt+0x3398>
   1417c:	mov	r0, r5
   14180:	bl	11020 <__fprintf_chk@plt>
   14184:	mov	r1, r5
   14188:	mov	r0, #10
   1418c:	bl	10edc <fputc_unlocked@plt>
   14190:	cmp	r6, #9
   14194:	ldrls	pc, [pc, r6, lsl #2]
   14198:	b	14474 <__assert_fail@plt+0x337c>
   1419c:			; <UNDEFINED> instruction: 0x000142b4
   141a0:	ldrdeq	r4, [r1], -ip
   141a4:	andeq	r4, r1, r8, lsl #4
   141a8:	andeq	r4, r1, ip, lsr r2
   141ac:	andeq	r4, r1, r8, ror r2
   141b0:			; <UNDEFINED> instruction: 0x000142bc
   141b4:	andeq	r4, r1, r4, lsl #6
   141b8:	andeq	r4, r1, r4, asr r3
   141bc:	andeq	r4, r1, ip, lsr #7
   141c0:	andeq	r4, r1, ip, lsl #8
   141c4:	mov	r1, #1
   141c8:	str	r3, [sp]
   141cc:	mov	r3, r2
   141d0:	ldr	r2, [pc, #700]	; 14494 <__assert_fail@plt+0x339c>
   141d4:	bl	11020 <__fprintf_chk@plt>
   141d8:	b	14128 <__assert_fail@plt+0x3030>
   141dc:	mov	r2, #5
   141e0:	ldr	r1, [pc, #688]	; 14498 <__assert_fail@plt+0x33a0>
   141e4:	mov	r0, #0
   141e8:	bl	10ef4 <dcgettext@plt>
   141ec:	ldr	r3, [r4]
   141f0:	mov	r2, r0
   141f4:	mov	r1, #1
   141f8:	mov	r0, r5
   141fc:	add	sp, sp, #32
   14200:	pop	{r4, r5, r6, lr}
   14204:	b	11020 <__fprintf_chk@plt>
   14208:	mov	r2, #5
   1420c:	ldr	r1, [pc, #648]	; 1449c <__assert_fail@plt+0x33a4>
   14210:	mov	r0, #0
   14214:	bl	10ef4 <dcgettext@plt>
   14218:	ldr	r3, [r4, #4]
   1421c:	mov	r2, r0
   14220:	mov	r1, #1
   14224:	mov	r0, r5
   14228:	str	r3, [sp, #48]	; 0x30
   1422c:	ldr	r3, [r4]
   14230:	add	sp, sp, #32
   14234:	pop	{r4, r5, r6, lr}
   14238:	b	11020 <__fprintf_chk@plt>
   1423c:	mov	r2, #5
   14240:	ldr	r1, [pc, #600]	; 144a0 <__assert_fail@plt+0x33a8>
   14244:	mov	r0, #0
   14248:	bl	10ef4 <dcgettext@plt>
   1424c:	ldr	r3, [r4, #8]
   14250:	mov	r2, r0
   14254:	mov	r1, #1
   14258:	mov	r0, r5
   1425c:	str	r3, [sp, #52]	; 0x34
   14260:	ldr	r3, [r4, #4]
   14264:	str	r3, [sp, #48]	; 0x30
   14268:	ldr	r3, [r4]
   1426c:	add	sp, sp, #32
   14270:	pop	{r4, r5, r6, lr}
   14274:	b	11020 <__fprintf_chk@plt>
   14278:	mov	r2, #5
   1427c:	ldr	r1, [pc, #544]	; 144a4 <__assert_fail@plt+0x33ac>
   14280:	mov	r0, #0
   14284:	bl	10ef4 <dcgettext@plt>
   14288:	ldr	r3, [r4, #12]
   1428c:	mov	r2, r0
   14290:	mov	r1, #1
   14294:	mov	r0, r5
   14298:	str	r3, [sp, #8]
   1429c:	ldr	r3, [r4, #8]
   142a0:	str	r3, [sp, #4]
   142a4:	ldr	r3, [r4, #4]
   142a8:	str	r3, [sp]
   142ac:	ldr	r3, [r4]
   142b0:	bl	11020 <__fprintf_chk@plt>
   142b4:	add	sp, sp, #32
   142b8:	pop	{r4, r5, r6, pc}
   142bc:	mov	r2, #5
   142c0:	ldr	r1, [pc, #480]	; 144a8 <__assert_fail@plt+0x33b0>
   142c4:	mov	r0, #0
   142c8:	bl	10ef4 <dcgettext@plt>
   142cc:	ldr	r3, [r4, #16]
   142d0:	mov	r2, r0
   142d4:	mov	r1, #1
   142d8:	mov	r0, r5
   142dc:	str	r3, [sp, #12]
   142e0:	ldr	r3, [r4, #12]
   142e4:	str	r3, [sp, #8]
   142e8:	ldr	r3, [r4, #8]
   142ec:	str	r3, [sp, #4]
   142f0:	ldr	r3, [r4, #4]
   142f4:	str	r3, [sp]
   142f8:	ldr	r3, [r4]
   142fc:	bl	11020 <__fprintf_chk@plt>
   14300:	b	142b4 <__assert_fail@plt+0x31bc>
   14304:	mov	r2, #5
   14308:	ldr	r1, [pc, #412]	; 144ac <__assert_fail@plt+0x33b4>
   1430c:	mov	r0, #0
   14310:	bl	10ef4 <dcgettext@plt>
   14314:	ldr	r3, [r4, #20]
   14318:	mov	r2, r0
   1431c:	mov	r1, #1
   14320:	mov	r0, r5
   14324:	str	r3, [sp, #16]
   14328:	ldr	r3, [r4, #16]
   1432c:	str	r3, [sp, #12]
   14330:	ldr	r3, [r4, #12]
   14334:	str	r3, [sp, #8]
   14338:	ldr	r3, [r4, #8]
   1433c:	str	r3, [sp, #4]
   14340:	ldr	r3, [r4, #4]
   14344:	str	r3, [sp]
   14348:	ldr	r3, [r4]
   1434c:	bl	11020 <__fprintf_chk@plt>
   14350:	b	142b4 <__assert_fail@plt+0x31bc>
   14354:	mov	r2, #5
   14358:	ldr	r1, [pc, #336]	; 144b0 <__assert_fail@plt+0x33b8>
   1435c:	mov	r0, #0
   14360:	bl	10ef4 <dcgettext@plt>
   14364:	ldr	r3, [r4, #24]
   14368:	mov	r2, r0
   1436c:	mov	r1, #1
   14370:	mov	r0, r5
   14374:	str	r3, [sp, #20]
   14378:	ldr	r3, [r4, #20]
   1437c:	str	r3, [sp, #16]
   14380:	ldr	r3, [r4, #16]
   14384:	str	r3, [sp, #12]
   14388:	ldr	r3, [r4, #12]
   1438c:	str	r3, [sp, #8]
   14390:	ldr	r3, [r4, #8]
   14394:	str	r3, [sp, #4]
   14398:	ldr	r3, [r4, #4]
   1439c:	str	r3, [sp]
   143a0:	ldr	r3, [r4]
   143a4:	bl	11020 <__fprintf_chk@plt>
   143a8:	b	142b4 <__assert_fail@plt+0x31bc>
   143ac:	mov	r2, #5
   143b0:	ldr	r1, [pc, #252]	; 144b4 <__assert_fail@plt+0x33bc>
   143b4:	mov	r0, #0
   143b8:	bl	10ef4 <dcgettext@plt>
   143bc:	ldr	r3, [r4, #28]
   143c0:	mov	r2, r0
   143c4:	mov	r1, #1
   143c8:	mov	r0, r5
   143cc:	str	r3, [sp, #24]
   143d0:	ldr	r3, [r4, #24]
   143d4:	str	r3, [sp, #20]
   143d8:	ldr	r3, [r4, #20]
   143dc:	str	r3, [sp, #16]
   143e0:	ldr	r3, [r4, #16]
   143e4:	str	r3, [sp, #12]
   143e8:	ldr	r3, [r4, #12]
   143ec:	str	r3, [sp, #8]
   143f0:	ldr	r3, [r4, #8]
   143f4:	str	r3, [sp, #4]
   143f8:	ldr	r3, [r4, #4]
   143fc:	str	r3, [sp]
   14400:	ldr	r3, [r4]
   14404:	bl	11020 <__fprintf_chk@plt>
   14408:	b	142b4 <__assert_fail@plt+0x31bc>
   1440c:	ldr	r1, [pc, #164]	; 144b8 <__assert_fail@plt+0x33c0>
   14410:	mov	r2, #5
   14414:	mov	r0, #0
   14418:	bl	10ef4 <dcgettext@plt>
   1441c:	ldr	r3, [r4, #32]
   14420:	mov	r2, r0
   14424:	mov	r1, #1
   14428:	mov	r0, r5
   1442c:	str	r3, [sp, #28]
   14430:	ldr	r3, [r4, #28]
   14434:	str	r3, [sp, #24]
   14438:	ldr	r3, [r4, #24]
   1443c:	str	r3, [sp, #20]
   14440:	ldr	r3, [r4, #20]
   14444:	str	r3, [sp, #16]
   14448:	ldr	r3, [r4, #16]
   1444c:	str	r3, [sp, #12]
   14450:	ldr	r3, [r4, #12]
   14454:	str	r3, [sp, #8]
   14458:	ldr	r3, [r4, #8]
   1445c:	str	r3, [sp, #4]
   14460:	ldr	r3, [r4, #4]
   14464:	str	r3, [sp]
   14468:	ldr	r3, [r4]
   1446c:	bl	11020 <__fprintf_chk@plt>
   14470:	b	142b4 <__assert_fail@plt+0x31bc>
   14474:	mov	r2, #5
   14478:	ldr	r1, [pc, #60]	; 144bc <__assert_fail@plt+0x33c4>
   1447c:	b	14414 <__assert_fail@plt+0x331c>
   14480:	andeq	r5, r1, r5, lsl fp
   14484:	andeq	r5, r1, r8, lsr #22
   14488:	strdeq	r5, [r1], -r6
   1448c:	andeq	r5, r1, ip, lsr #22
   14490:	ldrdeq	r5, [r1], -r7
   14494:	andeq	r5, r1, r1, lsr #22
   14498:	strdeq	r5, [r1], -r9
   1449c:	andeq	r5, r1, r9, lsl #24
   144a0:	andeq	r5, r1, r0, lsr #24
   144a4:	andeq	r5, r1, ip, lsr ip
   144a8:	andeq	r5, r1, ip, asr ip
   144ac:	andeq	r5, r1, r0, lsl #25
   144b0:	andeq	r5, r1, r8, lsr #25
   144b4:	ldrdeq	r5, [r1], -r4
   144b8:	andeq	r5, r1, r4, lsl #26
   144bc:	andeq	r5, r1, r8, lsr sp
   144c0:	push	{r0, r1, r4, lr}
   144c4:	mov	ip, #0
   144c8:	ldr	lr, [sp, #16]
   144cc:	ldr	r4, [lr, ip, lsl #2]
   144d0:	cmp	r4, #0
   144d4:	bne	144ec <__assert_fail@plt+0x33f4>
   144d8:	str	lr, [sp]
   144dc:	str	ip, [sp, #4]
   144e0:	bl	140f8 <__assert_fail@plt+0x3000>
   144e4:	add	sp, sp, #8
   144e8:	pop	{r4, pc}
   144ec:	add	ip, ip, #1
   144f0:	b	144cc <__assert_fail@plt+0x33d4>
   144f4:	push	{r4, r5, r6, lr}
   144f8:	sub	sp, sp, #48	; 0x30
   144fc:	mov	ip, #0
   14500:	add	lr, sp, #8
   14504:	mov	r5, lr
   14508:	ldr	r6, [sp, #64]	; 0x40
   1450c:	ldr	r4, [r6, ip, lsl #2]
   14510:	cmp	r4, #0
   14514:	str	r4, [lr], #4
   14518:	beq	14528 <__assert_fail@plt+0x3430>
   1451c:	add	ip, ip, #1
   14520:	cmp	ip, #10
   14524:	bne	1450c <__assert_fail@plt+0x3414>
   14528:	stm	sp, {r5, ip}
   1452c:	bl	140f8 <__assert_fail@plt+0x3000>
   14530:	add	sp, sp, #48	; 0x30
   14534:	pop	{r4, r5, r6, pc}
   14538:	push	{r3}		; (str r3, [sp, #-4]!)
   1453c:	push	{r0, r1, r2, r3, lr}
   14540:	add	r3, sp, #24
   14544:	str	r3, [sp]
   14548:	str	r3, [sp, #12]
   1454c:	ldr	r3, [sp, #20]
   14550:	bl	144f4 <__assert_fail@plt+0x33fc>
   14554:	add	sp, sp, #16
   14558:	pop	{lr}		; (ldr lr, [sp], #4)
   1455c:	add	sp, sp, #4
   14560:	bx	lr
   14564:	ldr	r3, [pc, #116]	; 145e0 <__assert_fail@plt+0x34e8>
   14568:	mov	r0, #10
   1456c:	push	{r4, lr}
   14570:	ldr	r1, [r3]
   14574:	bl	10edc <fputc_unlocked@plt>
   14578:	mov	r2, #5
   1457c:	ldr	r1, [pc, #96]	; 145e4 <__assert_fail@plt+0x34ec>
   14580:	mov	r0, #0
   14584:	bl	10ef4 <dcgettext@plt>
   14588:	mov	r1, r0
   1458c:	ldr	r2, [pc, #84]	; 145e8 <__assert_fail@plt+0x34f0>
   14590:	mov	r0, #1
   14594:	bl	11008 <__printf_chk@plt>
   14598:	mov	r2, #5
   1459c:	ldr	r1, [pc, #72]	; 145ec <__assert_fail@plt+0x34f4>
   145a0:	mov	r0, #0
   145a4:	bl	10ef4 <dcgettext@plt>
   145a8:	mov	r1, r0
   145ac:	ldr	r3, [pc, #60]	; 145f0 <__assert_fail@plt+0x34f8>
   145b0:	mov	r0, #1
   145b4:	ldr	r2, [pc, #56]	; 145f4 <__assert_fail@plt+0x34fc>
   145b8:	bl	11008 <__printf_chk@plt>
   145bc:	mov	r2, #5
   145c0:	ldr	r1, [pc, #48]	; 145f8 <__assert_fail@plt+0x3500>
   145c4:	mov	r0, #0
   145c8:	bl	10ef4 <dcgettext@plt>
   145cc:	mov	r1, r0
   145d0:	ldr	r2, [pc, #36]	; 145fc <__assert_fail@plt+0x3504>
   145d4:	mov	r0, #1
   145d8:	pop	{r4, lr}
   145dc:	b	11008 <__printf_chk@plt>
   145e0:	andeq	r6, r2, ip, ror #2
   145e4:	andeq	r5, r1, r4, ror sp
   145e8:	andeq	r5, r1, r8, lsl #27
   145ec:	muleq	r1, lr, sp
   145f0:	muleq	r1, r4, r5
   145f4:			; <UNDEFINED> instruction: 0x000155bc
   145f8:			; <UNDEFINED> instruction: 0x00015db2
   145fc:	ldrdeq	r5, [r1], -r9
   14600:	push	{r4, lr}
   14604:	bl	1494c <__assert_fail@plt+0x3854>
   14608:	cmp	r0, #0
   1460c:	popne	{r4, pc}
   14610:	bl	148b8 <__assert_fail@plt+0x37c0>
   14614:	push	{r4, lr}
   14618:	bl	1494c <__assert_fail@plt+0x3854>
   1461c:	cmp	r0, #0
   14620:	popne	{r4, pc}
   14624:	bl	148b8 <__assert_fail@plt+0x37c0>
   14628:	b	14600 <__assert_fail@plt+0x3508>
   1462c:	push	{r4, r5, r6, lr}
   14630:	mov	r5, r0
   14634:	mov	r4, r1
   14638:	bl	14978 <__assert_fail@plt+0x3880>
   1463c:	cmp	r0, #0
   14640:	popne	{r4, r5, r6, pc}
   14644:	adds	r4, r4, #0
   14648:	movne	r4, #1
   1464c:	cmp	r5, #0
   14650:	moveq	r4, #1
   14654:	cmp	r4, #0
   14658:	popeq	{r4, r5, r6, pc}
   1465c:	bl	148b8 <__assert_fail@plt+0x37c0>
   14660:	push	{r4, lr}
   14664:	bl	14b94 <__assert_fail@plt+0x3a9c>
   14668:	cmp	r0, #0
   1466c:	popne	{r4, pc}
   14670:	bl	148b8 <__assert_fail@plt+0x37c0>
   14674:	push	{r4, r5, r6, lr}
   14678:	mov	r6, r0
   1467c:	mov	r5, r1
   14680:	mov	r4, r2
   14684:	bl	14c3c <__assert_fail@plt+0x3b44>
   14688:	cmp	r0, #0
   1468c:	popne	{r4, r5, r6, pc}
   14690:	cmp	r6, #0
   14694:	beq	146a4 <__assert_fail@plt+0x35ac>
   14698:	cmp	r5, #0
   1469c:	cmpne	r4, #0
   146a0:	popeq	{r4, r5, r6, pc}
   146a4:	bl	148b8 <__assert_fail@plt+0x37c0>
   146a8:	b	14674 <__assert_fail@plt+0x357c>
   146ac:	push	{r4, lr}
   146b0:	bl	14ba4 <__assert_fail@plt+0x3aac>
   146b4:	cmp	r0, #0
   146b8:	popne	{r4, pc}
   146bc:	bl	148b8 <__assert_fail@plt+0x37c0>
   146c0:	mov	r2, r1
   146c4:	mov	r1, r0
   146c8:	mov	r0, #0
   146cc:	b	14674 <__assert_fail@plt+0x357c>
   146d0:	mov	r2, r1
   146d4:	mov	r1, r0
   146d8:	mov	r0, #0
   146dc:	b	146ac <__assert_fail@plt+0x35b4>
   146e0:	cmp	r0, #0
   146e4:	push	{r4, r5, r6, lr}
   146e8:	mov	r5, r1
   146ec:	ldr	r4, [r1]
   146f0:	bne	1471c <__assert_fail@plt+0x3624>
   146f4:	cmp	r4, #0
   146f8:	bne	1470c <__assert_fail@plt+0x3614>
   146fc:	mov	r4, #64	; 0x40
   14700:	udiv	r4, r4, r2
   14704:	cmp	r2, #64	; 0x40
   14708:	addhi	r4, r4, #1
   1470c:	mov	r1, r4
   14710:	bl	14674 <__assert_fail@plt+0x357c>
   14714:	str	r4, [r5]
   14718:	pop	{r4, r5, r6, pc}
   1471c:	lsr	r3, r4, #1
   14720:	add	r3, r3, #1
   14724:	adds	r4, r4, r3
   14728:	bcc	1470c <__assert_fail@plt+0x3614>
   1472c:	bl	148b8 <__assert_fail@plt+0x37c0>
   14730:	mov	r2, #1
   14734:	b	146e0 <__assert_fail@plt+0x35e8>
   14738:	ldr	ip, [r1]
   1473c:	push	{r4, r5, r6, r7, r8, lr}
   14740:	mov	r5, r1
   14744:	mvn	r8, r3
   14748:	lsr	r8, r8, #31
   1474c:	ldr	lr, [sp, #24]
   14750:	asr	r1, ip, #1
   14754:	adds	r4, ip, r1
   14758:	mvnvs	r4, #-2147483648	; 0x80000000
   1475c:	cmp	r3, r4
   14760:	movge	r1, #0
   14764:	andlt	r1, r8, #1
   14768:	cmp	r1, #0
   1476c:	movne	r4, r3
   14770:	smull	r6, r7, r4, lr
   14774:	cmp	r7, r6, asr #31
   14778:	bne	14790 <__assert_fail@plt+0x3698>
   1477c:	cmp	r6, #63	; 0x3f
   14780:	mov	r1, r6
   14784:	bgt	147a0 <__assert_fail@plt+0x36a8>
   14788:	mov	r1, #64	; 0x40
   1478c:	b	14794 <__assert_fail@plt+0x369c>
   14790:	mvn	r1, #-2147483648	; 0x80000000
   14794:	sdiv	r4, r1, lr
   14798:	mls	r6, lr, r4, r1
   1479c:	sub	r1, r1, r6
   147a0:	cmp	r0, #0
   147a4:	sub	r6, r4, ip
   147a8:	streq	r0, [r5]
   147ac:	cmp	r6, r2
   147b0:	bge	147e4 <__assert_fail@plt+0x36ec>
   147b4:	adds	r4, ip, r2
   147b8:	bvs	147e0 <__assert_fail@plt+0x36e8>
   147bc:	cmp	r4, r3
   147c0:	movle	r3, #0
   147c4:	andgt	r3, r8, #1
   147c8:	cmp	r3, #0
   147cc:	bne	147e0 <__assert_fail@plt+0x36e8>
   147d0:	smull	r2, r3, r4, lr
   147d4:	cmp	r3, r2, asr #31
   147d8:	mov	r1, r2
   147dc:	beq	147e4 <__assert_fail@plt+0x36ec>
   147e0:	bl	148b8 <__assert_fail@plt+0x37c0>
   147e4:	bl	1462c <__assert_fail@plt+0x3534>
   147e8:	str	r4, [r5]
   147ec:	pop	{r4, r5, r6, r7, r8, pc}
   147f0:	push	{r4, lr}
   147f4:	bl	148f8 <__assert_fail@plt+0x3800>
   147f8:	cmp	r0, #0
   147fc:	popne	{r4, pc}
   14800:	bl	148b8 <__assert_fail@plt+0x37c0>
   14804:	mov	r1, #1
   14808:	b	147f0 <__assert_fail@plt+0x36f8>
   1480c:	push	{r4, lr}
   14810:	bl	148f8 <__assert_fail@plt+0x3800>
   14814:	cmp	r0, #0
   14818:	popne	{r4, pc}
   1481c:	bl	148b8 <__assert_fail@plt+0x37c0>
   14820:	mov	r1, #1
   14824:	b	1480c <__assert_fail@plt+0x3714>
   14828:	push	{r4, r5, r6, lr}
   1482c:	mov	r4, r1
   14830:	mov	r5, r0
   14834:	mov	r0, r1
   14838:	bl	14600 <__assert_fail@plt+0x3508>
   1483c:	mov	r2, r4
   14840:	mov	r1, r5
   14844:	pop	{r4, r5, r6, lr}
   14848:	b	10eac <memcpy@plt>
   1484c:	push	{r4, r5, r6, lr}
   14850:	mov	r4, r1
   14854:	mov	r5, r0
   14858:	mov	r0, r1
   1485c:	bl	14614 <__assert_fail@plt+0x351c>
   14860:	mov	r2, r4
   14864:	mov	r1, r5
   14868:	pop	{r4, r5, r6, lr}
   1486c:	b	10eac <memcpy@plt>
   14870:	push	{r4, r5, r6, lr}
   14874:	mov	r5, r0
   14878:	add	r0, r1, #1
   1487c:	mov	r4, r1
   14880:	bl	14614 <__assert_fail@plt+0x351c>
   14884:	mov	r2, #0
   14888:	mov	r1, r5
   1488c:	strb	r2, [r0, r4]
   14890:	mov	r2, r4
   14894:	pop	{r4, r5, r6, lr}
   14898:	b	10eac <memcpy@plt>
   1489c:	push	{r4, lr}
   148a0:	mov	r4, r0
   148a4:	bl	10fc0 <strlen@plt>
   148a8:	add	r1, r0, #1
   148ac:	mov	r0, r4
   148b0:	pop	{r4, lr}
   148b4:	b	14828 <__assert_fail@plt+0x3730>
   148b8:	ldr	r3, [pc, #44]	; 148ec <__assert_fail@plt+0x37f4>
   148bc:	mov	r2, #5
   148c0:	mov	r0, #0
   148c4:	push	{r4, lr}
   148c8:	ldr	r1, [pc, #32]	; 148f0 <__assert_fail@plt+0x37f8>
   148cc:	ldr	r4, [r3]
   148d0:	bl	10ef4 <dcgettext@plt>
   148d4:	mov	r3, r0
   148d8:	ldr	r2, [pc, #20]	; 148f4 <__assert_fail@plt+0x37fc>
   148dc:	mov	r1, #0
   148e0:	mov	r0, r4
   148e4:	bl	10f60 <error@plt>
   148e8:	bl	110c8 <abort@plt>
   148ec:	andeq	r6, r2, ip, lsl #2
   148f0:	andeq	r5, r1, r5, lsr #28
   148f4:	andeq	r5, r1, r6, lsl sl
   148f8:	cmp	r1, #0
   148fc:	cmpne	r0, #0
   14900:	beq	14938 <__assert_fail@plt+0x3840>
   14904:	push	{r4, r5, r6, lr}
   14908:	umull	r4, r5, r0, r1
   1490c:	adds	r3, r5, #0
   14910:	movne	r3, #1
   14914:	cmp	r4, #0
   14918:	blt	14924 <__assert_fail@plt+0x382c>
   1491c:	cmp	r3, #0
   14920:	beq	14944 <__assert_fail@plt+0x384c>
   14924:	bl	10fd8 <__errno_location@plt>
   14928:	mov	r3, #12
   1492c:	str	r3, [r0]
   14930:	mov	r0, #0
   14934:	pop	{r4, r5, r6, pc}
   14938:	mov	r1, #1
   1493c:	mov	r0, r1
   14940:	b	10e40 <calloc@plt>
   14944:	pop	{r4, r5, r6, lr}
   14948:	b	14940 <__assert_fail@plt+0x3848>
   1494c:	cmp	r0, #0
   14950:	beq	14970 <__assert_fail@plt+0x3878>
   14954:	bge	14974 <__assert_fail@plt+0x387c>
   14958:	push	{r4, lr}
   1495c:	bl	10fd8 <__errno_location@plt>
   14960:	mov	r3, #12
   14964:	str	r3, [r0]
   14968:	mov	r0, #0
   1496c:	pop	{r4, pc}
   14970:	mov	r0, #1
   14974:	b	10f6c <malloc@plt>
   14978:	cmp	r0, #0
   1497c:	bne	14988 <__assert_fail@plt+0x3890>
   14980:	mov	r0, r1
   14984:	b	1494c <__assert_fail@plt+0x3854>
   14988:	cmp	r1, #0
   1498c:	push	{r4, lr}
   14990:	bne	149a0 <__assert_fail@plt+0x38a8>
   14994:	bl	126a8 <__assert_fail@plt+0x15b0>
   14998:	mov	r0, #0
   1499c:	pop	{r4, pc}
   149a0:	blt	149ac <__assert_fail@plt+0x38b4>
   149a4:	pop	{r4, lr}
   149a8:	b	10f00 <realloc@plt>
   149ac:	bl	10fd8 <__errno_location@plt>
   149b0:	mov	r3, #12
   149b4:	str	r3, [r0]
   149b8:	b	14998 <__assert_fail@plt+0x38a0>
   149bc:	push	{r4, r5, r6, lr}
   149c0:	mov	r4, r0
   149c4:	bl	10f3c <__fpending@plt>
   149c8:	mov	r5, r0
   149cc:	mov	r0, r4
   149d0:	bl	10f48 <ferror_unlocked@plt>
   149d4:	mov	r6, r0
   149d8:	mov	r0, r4
   149dc:	bl	125b0 <__assert_fail@plt+0x14b8>
   149e0:	cmp	r6, #0
   149e4:	mov	r4, r0
   149e8:	bne	14a14 <__assert_fail@plt+0x391c>
   149ec:	cmp	r0, #0
   149f0:	beq	14a0c <__assert_fail@plt+0x3914>
   149f4:	cmp	r5, #0
   149f8:	bne	14a24 <__assert_fail@plt+0x392c>
   149fc:	bl	10fd8 <__errno_location@plt>
   14a00:	ldr	r4, [r0]
   14a04:	subs	r4, r4, #9
   14a08:	mvnne	r4, #0
   14a0c:	mov	r0, r4
   14a10:	pop	{r4, r5, r6, pc}
   14a14:	cmp	r0, #0
   14a18:	bne	14a24 <__assert_fail@plt+0x392c>
   14a1c:	bl	10fd8 <__errno_location@plt>
   14a20:	str	r4, [r0]
   14a24:	mvn	r4, #0
   14a28:	b	14a0c <__assert_fail@plt+0x3914>
   14a2c:	ldr	r3, [r0, #16]
   14a30:	ldr	r2, [r0, #20]
   14a34:	cmp	r2, r3
   14a38:	movhi	r3, #0
   14a3c:	bhi	14a54 <__assert_fail@plt+0x395c>
   14a40:	ldr	r3, [r0, #4]
   14a44:	ldr	r2, [r0, #8]
   14a48:	subs	r2, r2, r3
   14a4c:	moveq	r3, r2
   14a50:	strne	r2, [r1]
   14a54:	mov	r0, r3
   14a58:	bx	lr
   14a5c:	push	{r4, r5, r6, lr}
   14a60:	subs	r4, r1, #0
   14a64:	sub	sp, sp, #4096	; 0x1000
   14a68:	sub	sp, sp, #8
   14a6c:	beq	14b70 <__assert_fail@plt+0x3a78>
   14a70:	mov	r5, r0
   14a74:	bl	14c68 <__assert_fail@plt+0x3b70>
   14a78:	mov	r6, r0
   14a7c:	cmp	r6, #0
   14a80:	bne	14acc <__assert_fail@plt+0x39d4>
   14a84:	mov	r0, r5
   14a88:	bl	11014 <fileno@plt>
   14a8c:	cmp	r0, #0
   14a90:	blt	14b3c <__assert_fail@plt+0x3a44>
   14a94:	mov	r6, #1
   14a98:	mov	r3, #0
   14a9c:	mov	r2, #0
   14aa0:	str	r6, [sp]
   14aa4:	bl	10f24 <lseek64@plt>
   14aa8:	cmp	r0, #0
   14aac:	sbcs	r3, r1, #0
   14ab0:	blt	14b3c <__assert_fail@plt+0x3a44>
   14ab4:	mov	r2, r4
   14ab8:	mov	r3, #0
   14abc:	str	r6, [sp]
   14ac0:	mov	r0, r5
   14ac4:	bl	126f8 <__assert_fail@plt+0x1600>
   14ac8:	b	14b30 <__assert_fail@plt+0x3a38>
   14acc:	add	r1, sp, #8
   14ad0:	mov	r0, r5
   14ad4:	bl	14a2c <__assert_fail@plt+0x3934>
   14ad8:	cmp	r0, #0
   14adc:	beq	14b10 <__assert_fail@plt+0x3a18>
   14ae0:	ldr	r3, [sp, #8]
   14ae4:	cmp	r3, #0
   14ae8:	beq	14b10 <__assert_fail@plt+0x3a18>
   14aec:	ldr	r2, [r5, #4]
   14af0:	cmp	r3, r4
   14af4:	movcs	r3, r4
   14af8:	subs	r4, r4, r3
   14afc:	add	r2, r2, r3
   14b00:	str	r2, [r5, #4]
   14b04:	beq	14b2c <__assert_fail@plt+0x3a34>
   14b08:	subs	r6, r6, r3
   14b0c:	beq	14a84 <__assert_fail@plt+0x398c>
   14b10:	mov	r0, r5
   14b14:	bl	10ffc <fgetc@plt>
   14b18:	cmn	r0, #1
   14b1c:	beq	14b78 <__assert_fail@plt+0x3a80>
   14b20:	subs	r4, r4, #1
   14b24:	subne	r6, r6, #1
   14b28:	bne	14a7c <__assert_fail@plt+0x3984>
   14b2c:	mov	r0, #0
   14b30:	add	sp, sp, #4096	; 0x1000
   14b34:	add	sp, sp, #8
   14b38:	pop	{r4, r5, r6, pc}
   14b3c:	cmp	r4, #4096	; 0x1000
   14b40:	mov	r2, #1
   14b44:	str	r5, [sp]
   14b48:	movcc	r6, r4
   14b4c:	movcs	r6, #4096	; 0x1000
   14b50:	mov	r3, r6
   14b54:	mov	r1, #4096	; 0x1000
   14b58:	add	r0, sp, #8
   14b5c:	bl	11050 <__fread_chk@plt>
   14b60:	cmp	r6, r0
   14b64:	bhi	14b78 <__assert_fail@plt+0x3a80>
   14b68:	subs	r4, r4, r6
   14b6c:	bne	14b3c <__assert_fail@plt+0x3a44>
   14b70:	mov	r0, r4
   14b74:	b	14b30 <__assert_fail@plt+0x3a38>
   14b78:	mov	r0, r5
   14b7c:	bl	10e94 <ferror@plt>
   14b80:	adds	r0, r0, #0
   14b84:	movne	r0, #1
   14b88:	rsb	r0, r0, #0
   14b8c:	b	14b30 <__assert_fail@plt+0x3a38>
   14b90:	b	1494c <__assert_fail@plt+0x3854>
   14b94:	cmp	r1, #0
   14b98:	orreq	r1, r1, #1
   14b9c:	b	14978 <__assert_fail@plt+0x3880>
   14ba0:	b	148f8 <__assert_fail@plt+0x3800>
   14ba4:	cmp	r2, #0
   14ba8:	cmpne	r1, #0
   14bac:	moveq	r2, #1
   14bb0:	moveq	r1, r2
   14bb4:	b	14c3c <__assert_fail@plt+0x3b44>
   14bb8:	push	{r4, lr}
   14bbc:	mov	r0, #14
   14bc0:	bl	11074 <nl_langinfo@plt>
   14bc4:	cmp	r0, #0
   14bc8:	beq	14be0 <__assert_fail@plt+0x3ae8>
   14bcc:	ldrb	r2, [r0]
   14bd0:	ldr	r3, [pc, #16]	; 14be8 <__assert_fail@plt+0x3af0>
   14bd4:	cmp	r2, #0
   14bd8:	moveq	r0, r3
   14bdc:	pop	{r4, pc}
   14be0:	ldr	r0, [pc]	; 14be8 <__assert_fail@plt+0x3af0>
   14be4:	pop	{r4, pc}
   14be8:	andeq	r5, r1, r6, lsr lr
   14bec:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14bf0:	subs	r5, r0, #0
   14bf4:	mov	r7, r2
   14bf8:	addeq	r5, sp, #4
   14bfc:	mov	r6, r1
   14c00:	mov	r0, r5
   14c04:	bl	10f54 <mbrtowc@plt>
   14c08:	cmp	r7, #0
   14c0c:	cmnne	r0, #3
   14c10:	mov	r4, r0
   14c14:	bls	14c30 <__assert_fail@plt+0x3b38>
   14c18:	mov	r0, #0
   14c1c:	bl	14ca4 <__assert_fail@plt+0x3bac>
   14c20:	cmp	r0, #0
   14c24:	ldrbeq	r3, [r6]
   14c28:	moveq	r4, #1
   14c2c:	streq	r3, [r5]
   14c30:	mov	r0, r4
   14c34:	add	sp, sp, #12
   14c38:	pop	{r4, r5, r6, r7, pc}
   14c3c:	umull	r2, r3, r1, r2
   14c40:	cmp	r3, #0
   14c44:	bne	14c50 <__assert_fail@plt+0x3b58>
   14c48:	mov	r1, r2
   14c4c:	b	14978 <__assert_fail@plt+0x3880>
   14c50:	push	{r4, lr}
   14c54:	bl	10fd8 <__errno_location@plt>
   14c58:	mov	r3, #12
   14c5c:	str	r3, [r0]
   14c60:	mov	r0, #0
   14c64:	pop	{r4, pc}
   14c68:	ldr	r3, [r0, #16]
   14c6c:	ldr	r2, [r0, #20]
   14c70:	cmp	r2, r3
   14c74:	bhi	14c9c <__assert_fail@plt+0x3ba4>
   14c78:	ldmib	r0, {r2, r3}
   14c7c:	sub	r2, r3, r2
   14c80:	ldr	r3, [r0]
   14c84:	ands	r3, r3, #256	; 0x100
   14c88:	ldrne	r3, [r0, #44]	; 0x2c
   14c8c:	ldrne	r0, [r0, #36]	; 0x24
   14c90:	subne	r3, r3, r0
   14c94:	add	r0, r2, r3
   14c98:	bx	lr
   14c9c:	mov	r0, #0
   14ca0:	bx	lr
   14ca4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ca8:	sub	sp, sp, #268	; 0x10c
   14cac:	movw	r2, #257	; 0x101
   14cb0:	add	r1, sp, #4
   14cb4:	bl	14d00 <__assert_fail@plt+0x3c08>
   14cb8:	cmp	r0, #0
   14cbc:	movne	r0, #0
   14cc0:	bne	14cf0 <__assert_fail@plt+0x3bf8>
   14cc4:	ldr	r1, [pc, #44]	; 14cf8 <__assert_fail@plt+0x3c00>
   14cc8:	add	r0, sp, #4
   14ccc:	bl	10e58 <strcmp@plt>
   14cd0:	cmp	r0, #0
   14cd4:	beq	14cec <__assert_fail@plt+0x3bf4>
   14cd8:	ldr	r1, [pc, #28]	; 14cfc <__assert_fail@plt+0x3c04>
   14cdc:	add	r0, sp, #4
   14ce0:	bl	10e58 <strcmp@plt>
   14ce4:	adds	r0, r0, #0
   14ce8:	movne	r0, #1
   14cec:	and	r0, r0, #1
   14cf0:	add	sp, sp, #268	; 0x10c
   14cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf8:	andeq	r5, r1, ip, lsr lr
   14cfc:	andeq	r5, r1, lr, lsr lr
   14d00:	push	{r4, r5, r6, lr}
   14d04:	mov	r5, r1
   14d08:	mov	r1, #0
   14d0c:	mov	r4, r2
   14d10:	bl	1105c <setlocale@plt>
   14d14:	subs	r6, r0, #0
   14d18:	bne	14d2c <__assert_fail@plt+0x3c34>
   14d1c:	cmp	r4, #0
   14d20:	mov	r0, #22
   14d24:	strbne	r6, [r5]
   14d28:	pop	{r4, r5, r6, pc}
   14d2c:	bl	10fc0 <strlen@plt>
   14d30:	cmp	r4, r0
   14d34:	bls	14d50 <__assert_fail@plt+0x3c58>
   14d38:	add	r2, r0, #1
   14d3c:	mov	r1, r6
   14d40:	mov	r0, r5
   14d44:	bl	10eac <memcpy@plt>
   14d48:	mov	r0, #0
   14d4c:	pop	{r4, r5, r6, pc}
   14d50:	cmp	r4, #0
   14d54:	beq	14d74 <__assert_fail@plt+0x3c7c>
   14d58:	sub	r4, r4, #1
   14d5c:	mov	r1, r6
   14d60:	mov	r2, r4
   14d64:	mov	r0, r5
   14d68:	bl	10eac <memcpy@plt>
   14d6c:	mov	r3, #0
   14d70:	strb	r3, [r5, r4]
   14d74:	mov	r0, #34	; 0x22
   14d78:	pop	{r4, r5, r6, pc}
   14d7c:	mov	r1, #0
   14d80:	b	1105c <setlocale@plt>
   14d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d88:	mov	r7, r0
   14d8c:	ldr	r6, [pc, #72]	; 14ddc <__assert_fail@plt+0x3ce4>
   14d90:	ldr	r5, [pc, #72]	; 14de0 <__assert_fail@plt+0x3ce8>
   14d94:	add	r6, pc, r6
   14d98:	add	r5, pc, r5
   14d9c:	sub	r6, r6, r5
   14da0:	mov	r8, r1
   14da4:	mov	r9, r2
   14da8:	bl	10e20 <calloc@plt-0x20>
   14dac:	asrs	r6, r6, #2
   14db0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14db4:	mov	r4, #0
   14db8:	add	r4, r4, #1
   14dbc:	ldr	r3, [r5], #4
   14dc0:	mov	r2, r9
   14dc4:	mov	r1, r8
   14dc8:	mov	r0, r7
   14dcc:	blx	r3
   14dd0:	cmp	r6, r4
   14dd4:	bne	14db8 <__assert_fail@plt+0x3cc0>
   14dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ddc:	andeq	r1, r1, r8, ror r1
   14de0:	andeq	r1, r1, r0, ror r1
   14de4:	bx	lr
   14de8:	ldr	r3, [pc, #12]	; 14dfc <__assert_fail@plt+0x3d04>
   14dec:	mov	r1, #0
   14df0:	add	r3, pc, r3
   14df4:	ldr	r2, [r3]
   14df8:	b	10fe4 <__cxa_atexit@plt>
   14dfc:	andeq	r1, r1, r8, lsl #6

Disassembly of section .fini:

00014e00 <.fini>:
   14e00:	push	{r3, lr}
   14e04:	pop	{r3, pc}
