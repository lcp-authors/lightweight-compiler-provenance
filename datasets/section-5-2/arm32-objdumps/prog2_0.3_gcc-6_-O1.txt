
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105f0 <.init>:
   105f0:	push	{r3, lr}
   105f4:	bl	10694 <_start@@Base+0x3c>
   105f8:	pop	{r3, pc}

Disassembly of section .plt:

000105fc <printf@plt-0x14>:
   105fc:	push	{lr}		; (str lr, [sp, #-4]!)
   10600:	ldr	lr, [pc, #4]	; 1060c <printf@plt-0x4>
   10604:	add	lr, pc, lr
   10608:	ldr	pc, [lr, #8]!
   1060c:	strdeq	r0, [r1], -r4

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2548]!	; 0x9f4

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2540]!	; 0x9ec

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2532]!	; 0x9e4

00010634 <putchar@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2524]!	; 0x9dc

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2516]!	; 0x9d4

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00010658 <_start@@Base>:
   10658:	mov	fp, #0
   1065c:	mov	lr, #0
   10660:	pop	{r1}		; (ldr r1, [sp], #4)
   10664:	mov	r2, sp
   10668:	push	{r2}		; (str r2, [sp, #-4]!)
   1066c:	push	{r0}		; (str r0, [sp, #-4]!)
   10670:	ldr	ip, [pc, #16]	; 10688 <_start@@Base+0x30>
   10674:	push	{ip}		; (str ip, [sp, #-4]!)
   10678:	ldr	r0, [pc, #12]	; 1068c <_start@@Base+0x34>
   1067c:	ldr	r3, [pc, #12]	; 10690 <_start@@Base+0x38>
   10680:	bl	1061c <__libc_start_main@plt>
   10684:	bl	1064c <abort@plt>
   10688:	andeq	r0, r1, r4, asr #18
   1068c:	strdeq	r0, [r1], -ip
   10690:	andeq	r0, r1, r4, ror #17
   10694:	ldr	r3, [pc, #20]	; 106b0 <_start@@Base+0x58>
   10698:	ldr	r2, [pc, #20]	; 106b4 <_start@@Base+0x5c>
   1069c:	add	r3, pc, r3
   106a0:	ldr	r2, [r3, r2]
   106a4:	cmp	r2, #0
   106a8:	bxeq	lr
   106ac:	b	10628 <__gmon_start__@plt>
   106b0:	andeq	r0, r1, ip, asr r9
   106b4:	andeq	r0, r0, r4, lsr #32
   106b8:	ldr	r3, [pc, #28]	; 106dc <_start@@Base+0x84>
   106bc:	ldr	r0, [pc, #28]	; 106e0 <_start@@Base+0x88>
   106c0:	sub	r3, r3, r0
   106c4:	cmp	r3, #6
   106c8:	bxls	lr
   106cc:	ldr	r3, [pc, #16]	; 106e4 <_start@@Base+0x8c>
   106d0:	cmp	r3, #0
   106d4:	bxeq	lr
   106d8:	bx	r3
   106dc:	andeq	r1, r2, r3, lsr r0
   106e0:	andeq	r1, r2, r0, lsr r0
   106e4:	andeq	r0, r0, r0
   106e8:	ldr	r1, [pc, #36]	; 10714 <_start@@Base+0xbc>
   106ec:	ldr	r0, [pc, #36]	; 10718 <_start@@Base+0xc0>
   106f0:	sub	r1, r1, r0
   106f4:	asr	r1, r1, #2
   106f8:	add	r1, r1, r1, lsr #31
   106fc:	asrs	r1, r1, #1
   10700:	bxeq	lr
   10704:	ldr	r3, [pc, #16]	; 1071c <_start@@Base+0xc4>
   10708:	cmp	r3, #0
   1070c:	bxeq	lr
   10710:	bx	r3
   10714:	andeq	r1, r2, r0, lsr r0
   10718:	andeq	r1, r2, r0, lsr r0
   1071c:	andeq	r0, r0, r0
   10720:	push	{r4, lr}
   10724:	ldr	r4, [pc, #24]	; 10744 <_start@@Base+0xec>
   10728:	ldrb	r3, [r4]
   1072c:	cmp	r3, #0
   10730:	popne	{r4, pc}
   10734:	bl	106b8 <_start@@Base+0x60>
   10738:	mov	r3, #1
   1073c:	strb	r3, [r4]
   10740:	pop	{r4, pc}
   10744:	andeq	r1, r2, r0, lsr r0
   10748:	ldr	r0, [pc, #40]	; 10778 <_start@@Base+0x120>
   1074c:	ldr	r3, [r0]
   10750:	cmp	r3, #0
   10754:	bne	1075c <_start@@Base+0x104>
   10758:	b	106e8 <_start@@Base+0x90>
   1075c:	ldr	r3, [pc, #24]	; 1077c <_start@@Base+0x124>
   10760:	cmp	r3, #0
   10764:	beq	10758 <_start@@Base+0x100>
   10768:	push	{r4, lr}
   1076c:	blx	r3
   10770:	pop	{r4, lr}
   10774:	b	106e8 <_start@@Base+0x90>
   10778:	andeq	r0, r2, r4, lsl pc
   1077c:	andeq	r0, r0, r0

00010780 <avg@@Base>:
   10780:	add	r3, r0, #40	; 0x28
   10784:	vldr	s15, [pc, #24]	; 107a4 <avg@@Base+0x24>
   10788:	vldmia	r0!, {s14}
   1078c:	vadd.f32	s15, s15, s14
   10790:	cmp	r0, r3
   10794:	bne	10788 <avg@@Base+0x8>
   10798:	vldr	s0, [pc, #8]	; 107a8 <avg@@Base+0x28>
   1079c:	vdiv.f32	s0, s15, s0
   107a0:	bx	lr
   107a4:	andeq	r0, r0, r0
   107a8:			; <UNDEFINED> instruction: 0x41200000

000107ac <max@@Base>:
   107ac:	mov	r3, r0
   107b0:	vldmia	r3!, {s0}
   107b4:	add	r0, r0, #40	; 0x28
   107b8:	vldmia	r3!, {s15}
   107bc:	vcmp.f32	s15, s0
   107c0:	vmrs	APSR_nzcv, fpscr
   107c4:	vmovgt.f32	s0, s15
   107c8:	cmp	r3, r0
   107cc:	bne	107b8 <max@@Base+0xc>
   107d0:	bx	lr

000107d4 <min@@Base>:
   107d4:	mov	r3, r0
   107d8:	vldmia	r3!, {s0}
   107dc:	add	r0, r0, #40	; 0x28
   107e0:	vldmia	r3!, {s15}
   107e4:	vcmp.f32	s15, s0
   107e8:	vmrs	APSR_nzcv, fpscr
   107ec:	vmovmi.f32	s0, s15
   107f0:	cmp	r3, r0
   107f4:	bne	107e0 <min@@Base+0xc>
   107f8:	bx	lr

000107fc <main@@Base>:
   107fc:	push	{r4, r5, r6, r7, r8, lr}
   10800:	sub	sp, sp, #40	; 0x28
   10804:	mov	r5, sp
   10808:	mov	r6, sp
   1080c:	mov	r4, #0
   10810:	ldr	r8, [pc, #176]	; 108c8 <main@@Base+0xcc>
   10814:	ldr	r7, [pc, #176]	; 108cc <main@@Base+0xd0>
   10818:	add	r4, r4, #1
   1081c:	mov	r1, r4
   10820:	mov	r0, r8
   10824:	bl	10610 <printf@plt>
   10828:	mov	r1, r6
   1082c:	mov	r0, r7
   10830:	bl	10640 <__isoc99_scanf@plt>
   10834:	add	r6, r6, #4
   10838:	cmp	r4, #10
   1083c:	bne	10818 <main@@Base+0x1c>
   10840:	mov	r0, sp
   10844:	bl	10780 <avg@@Base>
   10848:	vcvt.f64.f32	d7, s0
   1084c:	vmov	r2, r3, d7
   10850:	ldr	r0, [pc, #120]	; 108d0 <main@@Base+0xd4>
   10854:	bl	10610 <printf@plt>
   10858:	mov	r0, sp
   1085c:	bl	107ac <max@@Base>
   10860:	vcvt.f64.f32	d7, s0
   10864:	vmov	r2, r3, d7
   10868:	ldr	r0, [pc, #100]	; 108d4 <main@@Base+0xd8>
   1086c:	bl	10610 <printf@plt>
   10870:	mov	r0, sp
   10874:	bl	107d4 <min@@Base>
   10878:	vcvt.f64.f32	d7, s0
   1087c:	vmov	r2, r3, d7
   10880:	ldr	r0, [pc, #80]	; 108d8 <main@@Base+0xdc>
   10884:	bl	10610 <printf@plt>
   10888:	ldr	r0, [pc, #76]	; 108dc <main@@Base+0xe0>
   1088c:	bl	10610 <printf@plt>
   10890:	add	r6, sp, #40	; 0x28
   10894:	ldr	r4, [pc, #68]	; 108e0 <main@@Base+0xe4>
   10898:	vldmia	r5!, {s15}
   1089c:	vcvt.f64.f32	d7, s15
   108a0:	vmov	r2, r3, d7
   108a4:	mov	r0, r4
   108a8:	bl	10610 <printf@plt>
   108ac:	cmp	r5, r6
   108b0:	bne	10898 <main@@Base+0x9c>
   108b4:	mov	r0, #10
   108b8:	bl	10634 <putchar@plt>
   108bc:	mov	r0, #0
   108c0:	add	sp, sp, #40	; 0x28
   108c4:	pop	{r4, r5, r6, r7, r8, pc}
   108c8:	andeq	r0, r1, r4, asr r9
   108cc:	andeq	r0, r1, ip, ror #18
   108d0:	andeq	r0, r1, r0, ror r9
   108d4:	andeq	r0, r1, r0, lsl #19
   108d8:	muleq	r1, r0, r9
   108dc:	andeq	r0, r1, r0, lsr #19
   108e0:	andeq	r0, r1, r8, lsr #19

000108e4 <__libc_csu_init@@Base>:
   108e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108e8:	mov	r7, r0
   108ec:	ldr	r6, [pc, #72]	; 1093c <__libc_csu_init@@Base+0x58>
   108f0:	ldr	r5, [pc, #72]	; 10940 <__libc_csu_init@@Base+0x5c>
   108f4:	add	r6, pc, r6
   108f8:	add	r5, pc, r5
   108fc:	sub	r6, r6, r5
   10900:	mov	r8, r1
   10904:	mov	r9, r2
   10908:	bl	105f0 <printf@plt-0x20>
   1090c:	asrs	r6, r6, #2
   10910:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10914:	mov	r4, #0
   10918:	add	r4, r4, #1
   1091c:	ldr	r3, [r5], #4
   10920:	mov	r2, r9
   10924:	mov	r1, r8
   10928:	mov	r0, r7
   1092c:	blx	r3
   10930:	cmp	r6, r4
   10934:	bne	10918 <__libc_csu_init@@Base+0x34>
   10938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1093c:	andeq	r0, r1, r4, lsl r6
   10940:	andeq	r0, r1, ip, lsl #12

00010944 <__libc_csu_fini@@Base>:
   10944:	bx	lr

Disassembly of section .fini:

00010948 <.fini>:
   10948:	push	{r3, lr}
   1094c:	pop	{r3, pc}
