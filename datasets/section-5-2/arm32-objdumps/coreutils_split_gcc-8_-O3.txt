
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	1344c <__assert_fail@plt+0x1f6c>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <fdopen@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <fdopen@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	fp, r1, ip, asr #29

00011138 <fdopen@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <raise@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <strcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <strtol@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <read@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <fflush@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <sigprocmask@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <memmove@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <free@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <_exit@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <memcpy@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__strtoull_internal@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <mbsinit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <ftruncate64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <fwrite_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <memcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <fputc_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <dcgettext@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dup2@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <rawmemchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <__fxstat64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <sigaction@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <fwrite@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <lseek64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <waitpid@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <__ctype_get_mb_cur_max@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <getenv@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <malloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <sigaddset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <__libc_start_main@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__freading@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <__gmon_start__@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <getopt_long@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #110592	; 0x1b000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <__ctype_b_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #110592	; 0x1b000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <exit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #110592	; 0x1b000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <strlen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #110592	; 0x1b000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__libc_current_sigrtmax@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #110592	; 0x1b000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <strchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #110592	; 0x1b000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <setenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #110592	; 0x1b000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <memrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #110592	; 0x1b000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <getpagesize@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #110592	; 0x1b000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__errno_location@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #110592	; 0x1b000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <__sprintf_chk@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #110592	; 0x1b000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <__cxa_atexit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #110592	; 0x1b000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <memset@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #110592	; 0x1b000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__printf_chk@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #110592	; 0x1b000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <write@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #110592	; 0x1b000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <fileno@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #110592	; 0x1b000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <__fprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #110592	; 0x1b000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <memchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #110592	; 0x1b000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #110592	; 0x1b000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <pipe@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #110592	; 0x1b000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <fseeko64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #110592	; 0x1b000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <fcntl64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #110592	; 0x1b000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #110592	; 0x1b000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

00011444 <sigemptyset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #110592	; 0x1b000
   1144c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011450 <fork@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #110592	; 0x1b000
   11458:	ldr	pc, [ip, #3260]!	; 0xcbc

0001145c <execl@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #110592	; 0x1b000
   11464:	ldr	pc, [ip, #3252]!	; 0xcb4

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #110592	; 0x1b000
   11470:	ldr	pc, [ip, #3244]!	; 0xcac

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #110592	; 0x1b000
   1147c:	ldr	pc, [ip, #3236]!	; 0xca4

00011480 <clearerr_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #110592	; 0x1b000
   11488:	ldr	pc, [ip, #3228]!	; 0xc9c

0001148c <bindtextdomain@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #110592	; 0x1b000
   11494:	ldr	pc, [ip, #3220]!	; 0xc94

00011498 <aligned_alloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #110592	; 0x1b000
   114a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a4 <__libc_current_sigrtmin@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #110592	; 0x1b000
   114ac:	ldr	pc, [ip, #3204]!	; 0xc84

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #110592	; 0x1b000
   114b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #110592	; 0x1b000
   114c4:	ldr	pc, [ip, #3188]!	; 0xc74

000114c8 <close@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #110592	; 0x1b000
   114d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d4 <strspn@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #110592	; 0x1b000
   114dc:	ldr	pc, [ip, #3172]!	; 0xc64

000114e0 <__assert_fail@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #110592	; 0x1b000
   114e8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000114f0 <.text>:
   114f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114f4:	mov	r5, #0
   114f8:	mov	r4, #0
   114fc:	strd	r6, [sp, #8]
   11500:	movw	r6, #54128	; 0xd370
   11504:	movt	r6, #2
   11508:	strd	r8, [sp, #16]
   1150c:	mov	r8, #0
   11510:	mov	r7, r1
   11514:	strd	sl, [sp, #24]
   11518:	mov	fp, r0
   1151c:	str	lr, [sp, #32]
   11520:	sub	sp, sp, #292	; 0x124
   11524:	ldr	r0, [r1]
   11528:	strd	r4, [sp, #24]
   1152c:	str	r6, [sp, #60]	; 0x3c
   11530:	str	r8, [sp, #68]	; 0x44
   11534:	bl	15098 <__assert_fail@plt+0x3bb8>
   11538:	movw	r1, #48736	; 0xbe60
   1153c:	movt	r1, #1
   11540:	strd	r4, [sp, #48]	; 0x30
   11544:	mov	r0, #6
   11548:	movw	r5, #54104	; 0xd358
   1154c:	movt	r5, #2
   11550:	bl	11438 <setlocale@plt>
   11554:	movw	r1, #49664	; 0xc200
   11558:	movt	r1, #1
   1155c:	movw	r0, #49464	; 0xc138
   11560:	movt	r0, #1
   11564:	bl	1148c <bindtextdomain@plt>
   11568:	movw	r0, #49464	; 0xc138
   1156c:	movt	r0, #1
   11570:	bl	11240 <textdomain@plt>
   11574:	movw	r0, #19364	; 0x4ba4
   11578:	movt	r0, #1
   1157c:	bl	1b460 <__assert_fail@plt+0x9f80>
   11580:	movw	r2, #49688	; 0xc218
   11584:	movt	r2, #1
   11588:	str	fp, [sp, #36]	; 0x24
   1158c:	movw	r3, #50780	; 0xc65c
   11590:	movt	r3, #1
   11594:	str	r8, [sp, #56]	; 0x38
   11598:	str	r8, [sp, #64]	; 0x40
   1159c:	str	r3, [r6, #12]
   115a0:	str	r2, [r6, #300]	; 0x12c
   115a4:	movw	r6, #49692	; 0xc21c
   115a8:	movt	r6, #1
   115ac:	ldr	r4, [r5]
   115b0:	mov	sl, #0
   115b4:	mov	r2, r6
   115b8:	mov	r1, r7
   115bc:	ldr	r3, [pc, #2580]	; 11fd8 <__assert_fail@plt+0xaf8>
   115c0:	str	sl, [sp]
   115c4:	ldr	r0, [sp, #36]	; 0x24
   115c8:	cmp	r4, sl
   115cc:	moveq	r4, #1
   115d0:	bl	11330 <getopt_long@plt>
   115d4:	cmn	r0, #1
   115d8:	mov	r9, r0
   115dc:	beq	118cc <__assert_fail@plt+0x3ec>
   115e0:	cmp	r0, #101	; 0x65
   115e4:	beq	11ae8 <__assert_fail@plt+0x608>
   115e8:	ble	11624 <__assert_fail@plt+0x144>
   115ec:	cmp	r0, #120	; 0x78
   115f0:	beq	133c8 <__assert_fail@plt+0x1ee8>
   115f4:	bgt	11720 <__assert_fail@plt+0x240>
   115f8:	cmp	r0, #110	; 0x6e
   115fc:	beq	1198c <__assert_fail@plt+0x4ac>
   11600:	ble	116ac <__assert_fail@plt+0x1cc>
   11604:	cmp	r0, #116	; 0x74
   11608:	beq	11b98 <__assert_fail@plt+0x6b8>
   1160c:	cmp	r0, #117	; 0x75
   11610:	bne	11910 <__assert_fail@plt+0x430>
   11614:	ldr	r2, [sp, #60]	; 0x3c
   11618:	mov	r3, #1
   1161c:	strb	r3, [r2, #304]	; 0x130
   11620:	b	115ac <__assert_fail@plt+0xcc>
   11624:	cmp	r0, #57	; 0x39
   11628:	ble	11894 <__assert_fail@plt+0x3b4>
   1162c:	cmp	r0, #97	; 0x61
   11630:	beq	11930 <__assert_fail@plt+0x450>
   11634:	ble	11824 <__assert_fail@plt+0x344>
   11638:	cmp	r0, #98	; 0x62
   1163c:	bne	11770 <__assert_fail@plt+0x290>
   11640:	ldr	r3, [sp, #56]	; 0x38
   11644:	cmp	r3, #0
   11648:	bne	11e48 <__assert_fail@plt+0x968>
   1164c:	ldr	sl, [sp, #56]	; 0x38
   11650:	mov	r2, #5
   11654:	movw	r3, #54120	; 0xd368
   11658:	movt	r3, #2
   1165c:	movw	r1, #49828	; 0xc2a4
   11660:	movt	r1, #1
   11664:	ldr	r4, [r3]
   11668:	mvn	r8, #0
   1166c:	mvn	r9, #-2147483648	; 0x80000000
   11670:	mov	r0, sl
   11674:	bl	1121c <dcgettext@plt>
   11678:	ldr	r1, [pc, #2396]	; 11fdc <__assert_fail@plt+0xafc>
   1167c:	mov	ip, #1
   11680:	mov	r2, #1
   11684:	mov	r3, #0
   11688:	strd	r8, [sp]
   1168c:	str	r1, [sp, #8]
   11690:	str	r0, [sp, #12]
   11694:	mov	r0, r4
   11698:	str	sl, [sp, #16]
   1169c:	str	ip, [sp, #56]	; 0x38
   116a0:	bl	19e54 <__assert_fail@plt+0x8974>
   116a4:	strd	r0, [sp, #24]
   116a8:	b	115ac <__assert_fail@plt+0xcc>
   116ac:	cmp	r0, #108	; 0x6c
   116b0:	bne	11910 <__assert_fail@plt+0x430>
   116b4:	ldr	r8, [sp, #56]	; 0x38
   116b8:	cmp	r8, #0
   116bc:	mov	r0, r8
   116c0:	bne	11e48 <__assert_fail@plt+0x968>
   116c4:	movw	r3, #54120	; 0xd368
   116c8:	movt	r3, #2
   116cc:	ldr	r4, [r3]
   116d0:	mov	r2, #5
   116d4:	movw	r1, #49852	; 0xc2bc
   116d8:	movt	r1, #1
   116dc:	bl	1121c <dcgettext@plt>
   116e0:	movw	r1, #48736	; 0xbe60
   116e4:	movt	r1, #1
   116e8:	mov	r2, #1
   116ec:	mov	r3, #0
   116f0:	str	r1, [sp, #8]
   116f4:	mov	r1, #3
   116f8:	str	r0, [sp, #12]
   116fc:	mov	r0, r4
   11700:	str	r8, [sp, #16]
   11704:	str	r1, [sp, #56]	; 0x38
   11708:	mvn	r8, #0
   1170c:	mvn	r9, #0
   11710:	strd	r8, [sp]
   11714:	bl	19e54 <__assert_fail@plt+0x8974>
   11718:	strd	r0, [sp, #24]
   1171c:	b	115ac <__assert_fail@plt+0xcc>
   11720:	movw	r3, #257	; 0x101
   11724:	cmp	r0, r3
   11728:	beq	11918 <__assert_fail@plt+0x438>
   1172c:	ble	118b4 <__assert_fail@plt+0x3d4>
   11730:	movw	r3, #258	; 0x102
   11734:	cmp	r0, r3
   11738:	beq	11b44 <__assert_fail@plt+0x664>
   1173c:	movw	r3, #259	; 0x103
   11740:	cmp	r0, r3
   11744:	bne	11910 <__assert_fail@plt+0x430>
   11748:	movw	r4, #54120	; 0xd368
   1174c:	movt	r4, #2
   11750:	ldr	r9, [r4]
   11754:	mov	r0, r9
   11758:	bl	14ab0 <__assert_fail@plt+0x35d0>
   1175c:	cmp	r9, r0
   11760:	bne	11e54 <__assert_fail@plt+0x974>
   11764:	ldr	r3, [sp, #60]	; 0x3c
   11768:	str	r9, [r3, #20]
   1176c:	b	115ac <__assert_fail@plt+0xcc>
   11770:	cmp	r0, #100	; 0x64
   11774:	bne	11910 <__assert_fail@plt+0x430>
   11778:	movw	r1, #49652	; 0xc1f4
   1177c:	movt	r1, #1
   11780:	movw	r4, #54120	; 0xd368
   11784:	movt	r4, #2
   11788:	str	r1, [sp, #72]	; 0x48
   1178c:	ldr	sl, [r4]
   11790:	movw	r3, #53588	; 0xd154
   11794:	movt	r3, #2
   11798:	str	r1, [r3, #4]
   1179c:	cmp	sl, #0
   117a0:	beq	115ac <__assert_fail@plt+0xcc>
   117a4:	mov	r0, sl
   117a8:	bl	11354 <strlen@plt>
   117ac:	mov	r3, r0
   117b0:	mov	r0, sl
   117b4:	ldr	r1, [sp, #72]	; 0x48
   117b8:	str	r3, [sp, #88]	; 0x58
   117bc:	bl	114d4 <strspn@plt>
   117c0:	ldr	r3, [sp, #88]	; 0x58
   117c4:	cmp	r3, r0
   117c8:	bne	12d54 <__assert_fail@plt+0x1874>
   117cc:	ldrb	r3, [sl]
   117d0:	cmp	r3, #48	; 0x30
   117d4:	bne	11818 <__assert_fail@plt+0x338>
   117d8:	ldrb	r3, [sl, #1]
   117dc:	cmp	r3, #0
   117e0:	addne	r3, sl, #1
   117e4:	ldrne	fp, [sp, #36]	; 0x24
   117e8:	bne	117fc <__assert_fail@plt+0x31c>
   117ec:	b	11818 <__assert_fail@plt+0x338>
   117f0:	ldrb	r2, [r3]
   117f4:	cmp	r2, #0
   117f8:	beq	11814 <__assert_fail@plt+0x334>
   117fc:	mov	sl, r3
   11800:	str	r3, [r4]
   11804:	add	r3, r3, #1
   11808:	ldrb	r2, [sl]
   1180c:	cmp	r2, #48	; 0x30
   11810:	beq	117f0 <__assert_fail@plt+0x310>
   11814:	str	fp, [sp, #36]	; 0x24
   11818:	ldr	r3, [sp, #60]	; 0x3c
   1181c:	str	sl, [r3, #36]	; 0x24
   11820:	b	115ac <__assert_fail@plt+0xcc>
   11824:	cmp	r0, #67	; 0x43
   11828:	bne	11910 <__assert_fail@plt+0x430>
   1182c:	ldr	sl, [sp, #56]	; 0x38
   11830:	cmp	sl, #0
   11834:	mov	r0, sl
   11838:	bne	11e48 <__assert_fail@plt+0x968>
   1183c:	mov	r2, #5
   11840:	movw	r3, #54120	; 0xd368
   11844:	movt	r3, #2
   11848:	movw	r1, #49828	; 0xc2a4
   1184c:	movt	r1, #1
   11850:	ldr	r4, [r3]
   11854:	mvn	r8, #0
   11858:	bl	1121c <dcgettext@plt>
   1185c:	ldr	r1, [pc, #1912]	; 11fdc <__assert_fail@plt+0xafc>
   11860:	mov	r9, #0
   11864:	mov	ip, #2
   11868:	mov	r2, #1
   1186c:	mov	r3, #0
   11870:	strd	r8, [sp]
   11874:	str	r1, [sp, #8]
   11878:	str	r0, [sp, #12]
   1187c:	mov	r0, r4
   11880:	str	sl, [sp, #16]
   11884:	str	ip, [sp, #56]	; 0x38
   11888:	bl	19e54 <__assert_fail@plt+0x8974>
   1188c:	strd	r0, [sp, #24]
   11890:	b	115ac <__assert_fail@plt+0xcc>
   11894:	cmp	r0, #48	; 0x30
   11898:	bge	11bf4 <__assert_fail@plt+0x714>
   1189c:	cmn	r0, #3
   118a0:	beq	11af8 <__assert_fail@plt+0x618>
   118a4:	cmn	r0, #2
   118a8:	bne	11910 <__assert_fail@plt+0x430>
   118ac:	mov	r0, sl
   118b0:	bl	146e0 <__assert_fail@plt+0x3200>
   118b4:	cmp	r0, #256	; 0x100
   118b8:	bne	11910 <__assert_fail@plt+0x430>
   118bc:	ldr	r2, [sp, #60]	; 0x3c
   118c0:	mov	r3, #1
   118c4:	strb	r3, [r2, #44]	; 0x2c
   118c8:	b	115ac <__assert_fail@plt+0xcc>
   118cc:	ldr	fp, [sp, #36]	; 0x24
   118d0:	ldrd	r2, [sp, #48]	; 0x30
   118d4:	orrs	r3, r2, r3
   118d8:	beq	11cac <__assert_fail@plt+0x7cc>
   118dc:	ldr	r3, [sp, #60]	; 0x3c
   118e0:	ldr	r3, [r3, #40]	; 0x28
   118e4:	cmp	r3, #0
   118e8:	beq	11cac <__assert_fail@plt+0x7cc>
   118ec:	movw	r1, #50236	; 0xc43c
   118f0:	movt	r1, #1
   118f4:	mov	r2, #5
   118f8:	mov	r0, #0
   118fc:	bl	1121c <dcgettext@plt>
   11900:	mov	r1, #0
   11904:	mov	r2, r0
   11908:	mov	r0, r1
   1190c:	bl	112d0 <error@plt>
   11910:	mov	r0, #1
   11914:	bl	146e0 <__assert_fail@plt+0x3200>
   11918:	movw	r3, #54120	; 0xd368
   1191c:	movt	r3, #2
   11920:	ldr	r2, [sp, #60]	; 0x3c
   11924:	ldr	r3, [r3]
   11928:	str	r3, [r2, #40]	; 0x28
   1192c:	b	115ac <__assert_fail@plt+0xcc>
   11930:	movw	r3, #54120	; 0xd368
   11934:	movt	r3, #2
   11938:	ldr	r4, [r3]
   1193c:	mov	r2, #5
   11940:	movw	r1, #49720	; 0xc238
   11944:	movt	r1, #1
   11948:	mov	r0, sl
   1194c:	bl	1121c <dcgettext@plt>
   11950:	mvn	r8, #-1073741824	; 0xc0000000
   11954:	mov	r9, #0
   11958:	movw	r1, #48736	; 0xbe60
   1195c:	movt	r1, #1
   11960:	mov	r3, #0
   11964:	mov	r2, #0
   11968:	strd	r8, [sp]
   1196c:	str	r1, [sp, #8]
   11970:	str	r0, [sp, #12]
   11974:	mov	r0, r4
   11978:	str	sl, [sp, #16]
   1197c:	bl	19e54 <__assert_fail@plt+0x8974>
   11980:	ldr	r3, [sp, #60]	; 0x3c
   11984:	str	r0, [r3, #4]
   11988:	b	115ac <__assert_fail@plt+0xcc>
   1198c:	ldr	r3, [sp, #56]	; 0x38
   11990:	cmp	r3, #0
   11994:	bne	11e48 <__assert_fail@plt+0x968>
   11998:	movw	r4, #54120	; 0xd368
   1199c:	movt	r4, #2
   119a0:	bl	1133c <__ctype_b_loc@plt>
   119a4:	ldr	r9, [r4]
   119a8:	ldr	r2, [r0]
   119ac:	ldrb	r3, [r9]
   119b0:	lsl	r3, r3, #1
   119b4:	ldrh	r3, [r2, r3]
   119b8:	tst	r3, #8192	; 0x2000
   119bc:	beq	119e4 <__assert_fail@plt+0x504>
   119c0:	ldr	fp, [sp, #36]	; 0x24
   119c4:	add	r9, r9, #1
   119c8:	str	r9, [r4]
   119cc:	ldrb	r3, [r9]
   119d0:	lsl	r3, r3, #1
   119d4:	ldrh	r3, [r2, r3]
   119d8:	tst	r3, #8192	; 0x2000
   119dc:	bne	119c4 <__assert_fail@plt+0x4e4>
   119e0:	str	fp, [sp, #36]	; 0x24
   119e4:	movw	r1, #49876	; 0xc2d4
   119e8:	movt	r1, #1
   119ec:	mov	r2, #2
   119f0:	mov	r0, r9
   119f4:	bl	114b0 <strncmp@plt>
   119f8:	cmp	r0, #0
   119fc:	beq	11c98 <__assert_fail@plt+0x7b8>
   11a00:	mov	r0, r9
   11a04:	movw	r1, #49880	; 0xc2d8
   11a08:	movt	r1, #1
   11a0c:	mov	r2, #2
   11a10:	bl	114b0 <strncmp@plt>
   11a14:	cmp	r0, #0
   11a18:	addeq	r9, r9, #2
   11a1c:	moveq	r3, #6
   11a20:	movne	r3, #5
   11a24:	streq	r9, [r4]
   11a28:	str	r3, [sp, #56]	; 0x38
   11a2c:	ldr	sl, [r4]
   11a30:	mov	r1, #47	; 0x2f
   11a34:	mov	r0, sl
   11a38:	bl	1136c <strchr@plt>
   11a3c:	subs	fp, r0, #0
   11a40:	movw	r1, #49884	; 0xc2dc
   11a44:	movt	r1, #1
   11a48:	mov	r2, #5
   11a4c:	beq	11dcc <__assert_fail@plt+0x8ec>
   11a50:	mov	r0, #0
   11a54:	mvn	r8, #0
   11a58:	bl	1121c <dcgettext@plt>
   11a5c:	mvn	r9, #0
   11a60:	mov	r1, #0
   11a64:	movw	sl, #48736	; 0xbe60
   11a68:	movt	sl, #1
   11a6c:	mov	r3, #0
   11a70:	mov	r2, #1
   11a74:	strd	r8, [sp]
   11a78:	str	sl, [sp, #8]
   11a7c:	strd	r0, [sp, #12]
   11a80:	add	r0, fp, #1
   11a84:	bl	19e54 <__assert_fail@plt+0x8974>
   11a88:	ldr	r3, [r4]
   11a8c:	mov	r8, r0
   11a90:	mov	r9, r1
   11a94:	strd	r8, [sp, #24]
   11a98:	cmp	fp, r3
   11a9c:	beq	115ac <__assert_fail@plt+0xcc>
   11aa0:	mov	r3, #0
   11aa4:	mov	r2, #5
   11aa8:	movw	r1, #49912	; 0xc2f8
   11aac:	movt	r1, #1
   11ab0:	strb	r3, [fp]
   11ab4:	mov	r0, #0
   11ab8:	ldr	r4, [r4]
   11abc:	bl	1121c <dcgettext@plt>
   11ac0:	mov	r1, #0
   11ac4:	mov	r2, #1
   11ac8:	strd	r8, [sp]
   11acc:	mov	r3, #0
   11ad0:	str	sl, [sp, #8]
   11ad4:	strd	r0, [sp, #12]
   11ad8:	mov	r0, r4
   11adc:	bl	19e54 <__assert_fail@plt+0x8974>
   11ae0:	strd	r0, [sp, #48]	; 0x30
   11ae4:	b	115ac <__assert_fail@plt+0xcc>
   11ae8:	ldr	r2, [sp, #60]	; 0x3c
   11aec:	mov	r3, #1
   11af0:	strb	r3, [r2, #296]	; 0x128
   11af4:	b	115ac <__assert_fail@plt+0xcc>
   11af8:	movw	r1, #50196	; 0xc414
   11afc:	movt	r1, #1
   11b00:	movw	r2, #50216	; 0xc428
   11b04:	movt	r2, #1
   11b08:	movw	r3, #53604	; 0xd164
   11b0c:	movt	r3, #2
   11b10:	movw	r0, #54116	; 0xd364
   11b14:	movt	r0, #2
   11b18:	str	r2, [sp]
   11b1c:	movw	r2, #49460	; 0xc134
   11b20:	movt	r2, #1
   11b24:	stmib	sp, {r1, sl}
   11b28:	movw	r1, #47204	; 0xb864
   11b2c:	movt	r1, #1
   11b30:	ldr	r0, [r0]
   11b34:	ldr	r3, [r3]
   11b38:	bl	194e0 <__assert_fail@plt+0x8000>
   11b3c:	mov	r0, sl
   11b40:	bl	11348 <exit@plt>
   11b44:	mov	r2, #5
   11b48:	movw	r3, #54120	; 0xd368
   11b4c:	movt	r3, #2
   11b50:	movw	r1, #50172	; 0xc3fc
   11b54:	movt	r1, #1
   11b58:	mov	r0, sl
   11b5c:	ldr	r4, [r3]
   11b60:	bl	1121c <dcgettext@plt>
   11b64:	ldr	r1, [pc, #1136]	; 11fdc <__assert_fail@plt+0xafc>
   11b68:	mvn	r8, #-2147483647	; 0x80000001
   11b6c:	mov	r9, #0
   11b70:	mov	r2, #1
   11b74:	mov	r3, #0
   11b78:	strd	r8, [sp]
   11b7c:	str	r1, [sp, #8]
   11b80:	str	r0, [sp, #12]
   11b84:	mov	r0, r4
   11b88:	str	sl, [sp, #16]
   11b8c:	bl	19e54 <__assert_fail@plt+0x8974>
   11b90:	str	r0, [sp, #64]	; 0x40
   11b94:	b	115ac <__assert_fail@plt+0xcc>
   11b98:	movw	r4, #54120	; 0xd368
   11b9c:	movt	r4, #2
   11ba0:	ldr	r0, [r4]
   11ba4:	ldrb	r9, [r0]
   11ba8:	cmp	r9, #0
   11bac:	beq	133d4 <__assert_fail@plt+0x1ef4>
   11bb0:	ldrb	r3, [r0, #1]
   11bb4:	cmp	r3, #0
   11bb8:	beq	11bd0 <__assert_fail@plt+0x6f0>
   11bbc:	movw	r1, #49960	; 0xc328
   11bc0:	movt	r1, #1
   11bc4:	bl	11168 <strcmp@plt>
   11bc8:	subs	r9, r0, #0
   11bcc:	bne	131e8 <__assert_fail@plt+0x1d08>
   11bd0:	movw	r3, #53588	; 0xd154
   11bd4:	movt	r3, #2
   11bd8:	ldr	r2, [r3, #12]
   11bdc:	cmp	r2, #0
   11be0:	blt	11bec <__assert_fail@plt+0x70c>
   11be4:	cmp	r2, r9
   11be8:	bne	1321c <__assert_fail@plt+0x1d3c>
   11bec:	str	r9, [r3, #12]
   11bf0:	b	115ac <__assert_fail@plt+0xcc>
   11bf4:	ldr	r3, [sp, #56]	; 0x38
   11bf8:	cmp	r3, #0
   11bfc:	beq	11c78 <__assert_fail@plt+0x798>
   11c00:	cmp	r3, #4
   11c04:	bne	11e48 <__assert_fail@plt+0x968>
   11c08:	ldr	r3, [sp, #68]	; 0x44
   11c0c:	cmp	r3, #0
   11c10:	cmpne	r3, r4
   11c14:	bne	11c78 <__assert_fail@plt+0x798>
   11c18:	add	r1, pc, #944	; 0x3b0
   11c1c:	ldrd	r0, [r1]
   11c20:	ldrd	r2, [sp, #24]
   11c24:	cmp	r3, r1
   11c28:	cmpeq	r2, r0
   11c2c:	bhi	132d4 <__assert_fail@plt+0x1df4>
   11c30:	mov	r0, #10
   11c34:	mov	fp, r3
   11c38:	sub	r1, r9, #48	; 0x30
   11c3c:	umull	r2, r3, r2, r0
   11c40:	mla	r3, r0, fp, r3
   11c44:	adds	sl, r2, r1
   11c48:	mov	r0, sl
   11c4c:	adc	fp, r3, r1, asr #31
   11c50:	ldrd	r2, [sp, #24]
   11c54:	mov	r1, fp
   11c58:	cmp	fp, r3
   11c5c:	cmpeq	sl, r2
   11c60:	bcc	132d4 <__assert_fail@plt+0x1df4>
   11c64:	mov	r2, r0
   11c68:	mov	r3, r1
   11c6c:	strd	r2, [sp, #24]
   11c70:	str	r4, [sp, #68]	; 0x44
   11c74:	b	115ac <__assert_fail@plt+0xcc>
   11c78:	sub	r9, r9, #48	; 0x30
   11c7c:	str	r4, [sp, #68]	; 0x44
   11c80:	asr	r3, r9, #31
   11c84:	mov	r2, r9
   11c88:	strd	r2, [sp, #24]
   11c8c:	mov	r3, #4
   11c90:	str	r3, [sp, #56]	; 0x38
   11c94:	b	115ac <__assert_fail@plt+0xcc>
   11c98:	add	r9, r9, #2
   11c9c:	mov	r3, #7
   11ca0:	str	r9, [r4]
   11ca4:	str	r3, [sp, #56]	; 0x38
   11ca8:	b	11a2c <__assert_fail@plt+0x54c>
   11cac:	ldr	r3, [sp, #56]	; 0x38
   11cb0:	cmp	r3, #0
   11cb4:	bne	11df4 <__assert_fail@plt+0x914>
   11cb8:	mov	r3, #0
   11cbc:	mov	r2, #1000	; 0x3e8
   11cc0:	strd	r2, [sp, #24]
   11cc4:	mov	r3, #3
   11cc8:	str	r3, [sp, #56]	; 0x38
   11ccc:	movw	r2, #53588	; 0xd154
   11cd0:	movt	r2, #2
   11cd4:	ldr	r3, [r2, #12]
   11cd8:	str	r2, [sp, #36]	; 0x24
   11cdc:	cmp	r3, #0
   11ce0:	movlt	r3, #10
   11ce4:	strlt	r3, [r2, #12]
   11ce8:	ldr	r3, [sp, #60]	; 0x3c
   11cec:	ldr	r0, [r3, #36]	; 0x24
   11cf0:	ldr	r3, [sp, #56]	; 0x38
   11cf4:	cmp	r0, #0
   11cf8:	sub	r4, r3, #5
   11cfc:	beq	12a08 <__assert_fail@plt+0x1528>
   11d00:	ldr	r3, [sp, #36]	; 0x24
   11d04:	mov	r1, #0
   11d08:	cmp	r4, #2
   11d0c:	strb	r1, [r3]
   11d10:	bls	12ae0 <__assert_fail@plt+0x1600>
   11d14:	ldr	r3, [sp, #60]	; 0x3c
   11d18:	ldr	r3, [r3, #4]
   11d1c:	cmp	r3, #0
   11d20:	moveq	r8, #0
   11d24:	moveq	r9, #0
   11d28:	bne	129f8 <__assert_fail@plt+0x1518>
   11d2c:	ldr	r1, [sp, #60]	; 0x3c
   11d30:	cmp	r9, #0
   11d34:	mov	r2, r8
   11d38:	cmpeq	r8, #2
   11d3c:	movcc	r2, #2
   11d40:	str	r2, [r1, #4]
   11d44:	ldr	r3, [r5]
   11d48:	cmp	r3, fp
   11d4c:	bge	11e80 <__assert_fail@plt+0x9a0>
   11d50:	ldr	r1, [r7, r3, lsl #2]
   11d54:	add	r2, r3, #1
   11d58:	cmp	r2, fp
   11d5c:	ldr	r0, [sp, #60]	; 0x3c
   11d60:	str	r2, [r5]
   11d64:	lsl	r2, r3, #2
   11d68:	str	r1, [r0, #300]	; 0x12c
   11d6c:	bge	11e80 <__assert_fail@plt+0x9a0>
   11d70:	add	r2, r7, r2
   11d74:	add	r3, r3, #2
   11d78:	ldr	r2, [r2, #4]
   11d7c:	cmp	r3, fp
   11d80:	str	r3, [r5]
   11d84:	str	r2, [r0, #12]
   11d88:	bge	11e80 <__assert_fail@plt+0x9a0>
   11d8c:	mov	r2, #5
   11d90:	movw	r1, #50348	; 0xc4ac
   11d94:	movt	r1, #1
   11d98:	mov	r0, #0
   11d9c:	bl	1121c <dcgettext@plt>
   11da0:	ldr	r3, [r5]
   11da4:	mov	r4, r0
   11da8:	ldr	r0, [r7, r3, lsl #2]
   11dac:	bl	18a08 <__assert_fail@plt+0x7528>
   11db0:	mov	r3, r0
   11db4:	mov	r2, r4
   11db8:	mov	r1, #0
   11dbc:	mov	r0, r1
   11dc0:	bl	112d0 <error@plt>
   11dc4:	mov	r0, #1
   11dc8:	bl	146e0 <__assert_fail@plt+0x3200>
   11dcc:	bl	1121c <dcgettext@plt>
   11dd0:	movw	r3, #48736	; 0xbe60
   11dd4:	movt	r3, #1
   11dd8:	mov	r2, #1
   11ddc:	str	r3, [sp, #8]
   11de0:	mov	r3, #0
   11de4:	str	r0, [sp, #12]
   11de8:	mov	r0, sl
   11dec:	str	fp, [sp, #16]
   11df0:	b	11708 <__assert_fail@plt+0x228>
   11df4:	ldrd	r2, [sp, #24]
   11df8:	orrs	r3, r2, r3
   11dfc:	bne	11ccc <__assert_fail@plt+0x7ec>
   11e00:	mov	r2, #5
   11e04:	movw	r1, #49852	; 0xc2bc
   11e08:	movt	r1, #1
   11e0c:	mov	r0, #0
   11e10:	bl	1121c <dcgettext@plt>
   11e14:	mov	r4, r0
   11e18:	movw	r0, #50292	; 0xc474
   11e1c:	movt	r0, #1
   11e20:	bl	18a08 <__assert_fail@plt+0x7528>
   11e24:	mov	r1, #0
   11e28:	mov	r3, r4
   11e2c:	str	r0, [sp]
   11e30:	movw	r2, #50296	; 0xc478
   11e34:	movt	r2, #1
   11e38:	mov	r0, r1
   11e3c:	bl	112d0 <error@plt>
   11e40:	mov	r0, #1
   11e44:	bl	146e0 <__assert_fail@plt+0x3200>
   11e48:	movw	r1, #49792	; 0xc280
   11e4c:	movt	r1, #1
   11e50:	b	118f4 <__assert_fail@plt+0x414>
   11e54:	movw	r1, #49744	; 0xc250
   11e58:	movt	r1, #1
   11e5c:	mov	r2, #5
   11e60:	mov	r0, #0
   11e64:	bl	1121c <dcgettext@plt>
   11e68:	mov	r5, r0
   11e6c:	ldr	r0, [r4]
   11e70:	bl	18a08 <__assert_fail@plt+0x7528>
   11e74:	mov	r3, r0
   11e78:	mov	r2, r5
   11e7c:	b	11db8 <__assert_fail@plt+0x8d8>
   11e80:	ldr	r3, [sp, #60]	; 0x3c
   11e84:	ldr	r0, [r3, #36]	; 0x24
   11e88:	cmp	r0, #0
   11e8c:	beq	11eac <__assert_fail@plt+0x9cc>
   11e90:	bl	11354 <strlen@plt>
   11e94:	ldr	r3, [sp, #60]	; 0x3c
   11e98:	ldr	r3, [r3, #4]
   11e9c:	cmp	r0, r3
   11ea0:	movwhi	r1, #50368	; 0xc4c0
   11ea4:	movthi	r1, #1
   11ea8:	bhi	118f4 <__assert_fail@plt+0x414>
   11eac:	ldr	r3, [sp, #60]	; 0x3c
   11eb0:	movw	r1, #49688	; 0xc218
   11eb4:	movt	r1, #1
   11eb8:	ldr	r5, [r3, #300]	; 0x12c
   11ebc:	mov	r0, r5
   11ec0:	bl	11168 <strcmp@plt>
   11ec4:	cmp	r0, #0
   11ec8:	beq	11ee8 <__assert_fail@plt+0xa08>
   11ecc:	mov	r3, #0
   11ed0:	mov	r1, r5
   11ed4:	mov	r2, r3
   11ed8:	mov	r0, r3
   11edc:	bl	14d84 <__assert_fail@plt+0x38a4>
   11ee0:	cmp	r0, #0
   11ee4:	blt	13338 <__assert_fail@plt+0x1e58>
   11ee8:	ldr	r2, [pc, #240]	; 11fe0 <__assert_fail@plt+0xb00>
   11eec:	mov	r1, #0
   11ef0:	mov	r0, #3
   11ef4:	bl	11264 <__fxstat64@plt>
   11ef8:	cmp	r0, #0
   11efc:	bne	13054 <__assert_fail@plt+0x1b74>
   11f00:	ldr	r3, [sp, #64]	; 0x40
   11f04:	cmp	r3, #0
   11f08:	bne	11f2c <__assert_fail@plt+0xa4c>
   11f0c:	ldr	r3, [sp, #60]	; 0x3c
   11f10:	ldr	r1, [r3, #104]	; 0x68
   11f14:	mov	r3, #0
   11f18:	movt	r3, #8190	; 0x1ffe
   11f1c:	sub	r2, r1, #131072	; 0x20000
   11f20:	cmp	r2, r3
   11f24:	movhi	r1, #131072	; 0x20000
   11f28:	str	r1, [sp, #64]	; 0x40
   11f2c:	bl	11390 <getpagesize@plt>
   11f30:	ldr	r3, [sp, #64]	; 0x40
   11f34:	add	r1, r3, #1
   11f38:	bl	196a4 <__assert_fail@plt+0x81c4>
   11f3c:	cmp	r4, #1
   11f40:	str	r0, [sp, #92]	; 0x5c
   11f44:	mvnhi	sl, #0
   11f48:	mvnhi	r8, #0
   11f4c:	mvnhi	r9, #-2147483648	; 0x80000000
   11f50:	bls	12b68 <__assert_fail@plt+0x1688>
   11f54:	ldr	r3, [sp, #60]	; 0x3c
   11f58:	ldr	r3, [r3, #40]	; 0x28
   11f5c:	cmp	r3, #0
   11f60:	beq	11fa4 <__assert_fail@plt+0xac4>
   11f64:	ldr	r0, [pc, #120]	; 11fe4 <__assert_fail@plt+0xb04>
   11f68:	bl	11444 <sigemptyset@plt>
   11f6c:	add	r2, sp, #144	; 0x90
   11f70:	mov	r1, #0
   11f74:	mov	r0, #13
   11f78:	bl	11270 <sigaction@plt>
   11f7c:	ldr	r3, [sp, #144]	; 0x90
   11f80:	cmp	r3, #1
   11f84:	beq	11f94 <__assert_fail@plt+0xab4>
   11f88:	mov	r1, #13
   11f8c:	ldr	r0, [pc, #80]	; 11fe4 <__assert_fail@plt+0xb04>
   11f90:	bl	11300 <sigaddset@plt>
   11f94:	ldr	r2, [pc, #76]	; 11fe8 <__assert_fail@plt+0xb08>
   11f98:	mov	r0, #0
   11f9c:	add	r1, r2, #148	; 0x94
   11fa0:	bl	11198 <sigprocmask@plt>
   11fa4:	ldr	r3, [sp, #56]	; 0x38
   11fa8:	sub	r3, r3, #2
   11fac:	cmp	r3, #5
   11fb0:	ldrls	pc, [pc, r3, lsl #2]
   11fb4:	b	133e0 <__assert_fail@plt+0x1f00>
   11fb8:	andeq	r2, r1, r4, lsl #1
   11fbc:	andeq	r1, r1, ip, ror #31
   11fc0:	andeq	r1, r1, ip, ror #31
   11fc4:	andeq	r2, r1, ip, asr r7
   11fc8:	andeq	r2, r1, r0, lsr #9
   11fcc:	andeq	r2, r1, r0, lsr #5
   11fd0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11fd4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11fd8:	andeq	fp, r1, ip, asr #9
   11fdc:	ldrdeq	fp, [r1], -ip
   11fe0:	andeq	sp, r2, r0, lsr #7
   11fe4:	andeq	sp, r2, r4, lsr #9
   11fe8:	andeq	sp, r2, r0, lsl r4
   11fec:	ldr	r9, [sp, #36]	; 0x24
   11ff0:	mov	r4, #0
   11ff4:	mov	r5, #0
   11ff8:	mov	r8, #1
   11ffc:	mov	r0, #0
   12000:	ldr	r2, [sp, #64]	; 0x40
   12004:	ldr	r1, [sp, #92]	; 0x5c
   12008:	bl	18b9c <__assert_fail@plt+0x76bc>
   1200c:	cmn	r0, #1
   12010:	mov	fp, r0
   12014:	beq	13054 <__assert_fail@plt+0x1b74>
   12018:	ldr	r3, [sp, #92]	; 0x5c
   1201c:	ldr	r2, [r9, #12]
   12020:	add	r6, r3, r0
   12024:	mov	r7, r3
   12028:	mov	sl, r3
   1202c:	strb	r2, [r3, r0]
   12030:	mov	r0, sl
   12034:	ldr	r1, [r9, #12]
   12038:	bl	1124c <rawmemchr@plt>
   1203c:	cmp	r6, r0
   12040:	beq	129c0 <__assert_fail@plt+0x14e0>
   12044:	ldrd	r2, [sp, #24]
   12048:	adds	r4, r4, #1
   1204c:	add	sl, r0, #1
   12050:	adc	r5, r5, #0
   12054:	cmp	r5, r3
   12058:	cmpeq	r4, r2
   1205c:	bcc	12030 <__assert_fail@plt+0xb50>
   12060:	mov	r0, r8
   12064:	sub	r2, sl, r7
   12068:	mov	r1, r7
   1206c:	mov	r8, #1
   12070:	bl	140fc <__assert_fail@plt+0x2c1c>
   12074:	mov	r7, sl
   12078:	mov	r4, #0
   1207c:	mov	r5, #0
   12080:	b	12030 <__assert_fail@plt+0xb50>
   12084:	ldr	r3, [sp, #64]	; 0x40
   12088:	mov	sl, #0
   1208c:	mov	r8, #0
   12090:	mov	r9, #0
   12094:	str	sl, [sp, #48]	; 0x30
   12098:	str	sl, [sp, #56]	; 0x38
   1209c:	str	sl, [sp, #68]	; 0x44
   120a0:	mvn	r3, r3
   120a4:	str	r3, [sp, #88]	; 0x58
   120a8:	mov	r0, #0
   120ac:	ldr	r2, [sp, #64]	; 0x40
   120b0:	ldr	r1, [sp, #92]	; 0x5c
   120b4:	bl	18b9c <__assert_fail@plt+0x76bc>
   120b8:	cmn	r0, #1
   120bc:	mov	r7, r0
   120c0:	beq	13054 <__assert_fail@plt+0x1b74>
   120c4:	cmp	r0, #0
   120c8:	beq	12c5c <__assert_fail@plt+0x177c>
   120cc:	ldr	r6, [sp, #92]	; 0x5c
   120d0:	b	12164 <__assert_fail@plt+0xc84>
   120d4:	sub	r4, r4, sl
   120d8:	mov	r1, ip
   120dc:	sub	r4, r4, r8
   120e0:	mov	r0, r6
   120e4:	mov	r2, r4
   120e8:	sub	fp, r4, #1
   120ec:	bl	11384 <memrchr@plt>
   120f0:	cmp	sl, #0
   120f4:	add	fp, r6, fp
   120f8:	mov	r5, r0
   120fc:	beq	121c8 <__assert_fail@plt+0xce8>
   12100:	orrs	r3, r8, r9
   12104:	moveq	r0, #1
   12108:	movne	r0, #0
   1210c:	cmp	r5, #0
   12110:	moveq	r2, r0
   12114:	movne	r2, #1
   12118:	cmp	r2, #0
   1211c:	bne	128c8 <__assert_fail@plt+0x13e8>
   12120:	ldr	r3, [sp, #68]	; 0x44
   12124:	cmp	r3, #0
   12128:	bne	13310 <__assert_fail@plt+0x1e30>
   1212c:	orrs	r3, r8, r9
   12130:	moveq	r0, #1
   12134:	movne	r0, #0
   12138:	cmp	fp, #0
   1213c:	beq	12938 <__assert_fail@plt+0x1458>
   12140:	mov	r1, r6
   12144:	mov	r2, r4
   12148:	sub	r7, r7, r4
   1214c:	add	r6, r6, r4
   12150:	mov	r8, #0
   12154:	mov	r9, #0
   12158:	bl	140fc <__assert_fail@plt+0x2c1c>
   1215c:	cmp	r7, #0
   12160:	beq	120a8 <__assert_fail@plt+0xbc8>
   12164:	ldrd	r4, [sp, #24]
   12168:	ldr	r1, [sp, #36]	; 0x24
   1216c:	subs	r2, r4, r8
   12170:	sbc	r0, r5, r9
   12174:	subs	r3, r2, sl
   12178:	ldr	ip, [r1, #12]
   1217c:	mov	r1, #0
   12180:	mov	r2, r7
   12184:	sbc	r1, r0, r1
   12188:	str	r3, [sp, #40]	; 0x28
   1218c:	mov	r3, #0
   12190:	str	r1, [sp, #44]	; 0x2c
   12194:	ldrd	r0, [sp, #40]	; 0x28
   12198:	strd	r2, [sp, #72]	; 0x48
   1219c:	cmp	r1, r3
   121a0:	cmpeq	r0, r7
   121a4:	bls	120d4 <__assert_fail@plt+0xbf4>
   121a8:	mov	r1, ip
   121ac:	mov	r0, r6
   121b0:	bl	11384 <memrchr@plt>
   121b4:	mov	fp, #0
   121b8:	cmp	sl, #0
   121bc:	mov	r5, r0
   121c0:	mov	r4, fp
   121c4:	bne	12100 <__assert_fail@plt+0xc20>
   121c8:	cmp	r5, #0
   121cc:	beq	12984 <__assert_fail@plt+0x14a4>
   121d0:	sub	r5, r5, r6
   121d4:	orrs	r3, r8, r9
   121d8:	add	r5, r5, #1
   121dc:	moveq	r0, #1
   121e0:	movne	r0, #0
   121e4:	mov	r1, r6
   121e8:	adds	r8, r8, r5
   121ec:	mov	r2, r5
   121f0:	adc	r9, r9, #0
   121f4:	sub	r7, r7, r5
   121f8:	bl	140fc <__assert_fail@plt+0x2c1c>
   121fc:	cmp	fp, #0
   12200:	add	r6, r6, r5
   12204:	beq	1290c <__assert_fail@plt+0x142c>
   12208:	subs	r4, r4, r5
   1220c:	moveq	r3, #0
   12210:	movne	r3, #1
   12214:	moveq	sl, #0
   12218:	str	r3, [sp, #68]	; 0x44
   1221c:	moveq	r3, #1
   12220:	streq	r3, [sp, #68]	; 0x44
   12224:	beq	12284 <__assert_fail@plt+0xda4>
   12228:	mov	sl, #0
   1222c:	ldr	r3, [sp, #48]	; 0x30
   12230:	sub	r2, r3, sl
   12234:	cmp	r2, r4
   12238:	bcs	12264 <__assert_fail@plt+0xd84>
   1223c:	ldr	r2, [sp, #88]	; 0x58
   12240:	cmp	r2, r3
   12244:	bcc	131bc <__assert_fail@plt+0x1cdc>
   12248:	ldr	r0, [sp, #56]	; 0x38
   1224c:	ldr	r2, [sp, #64]	; 0x40
   12250:	add	r3, r3, r2
   12254:	mov	r1, r3
   12258:	str	r3, [sp, #48]	; 0x30
   1225c:	bl	19780 <__assert_fail@plt+0x82a0>
   12260:	str	r0, [sp, #56]	; 0x38
   12264:	ldr	r3, [sp, #56]	; 0x38
   12268:	mov	r1, r6
   1226c:	mov	r2, r4
   12270:	sub	r7, r7, r4
   12274:	add	r6, r6, r4
   12278:	add	r0, r3, sl
   1227c:	add	sl, sl, r4
   12280:	bl	111c8 <memcpy@plt>
   12284:	cmp	fp, #0
   12288:	beq	1215c <__assert_fail@plt+0xc7c>
   1228c:	mov	r3, #0
   12290:	mov	r8, #0
   12294:	mov	r9, #0
   12298:	str	r3, [sp, #68]	; 0x44
   1229c:	b	1215c <__assert_fail@plt+0xc7c>
   122a0:	ldrd	r2, [sp, #48]	; 0x30
   122a4:	orrs	r3, r2, r3
   122a8:	bne	12eb4 <__assert_fail@plt+0x19d4>
   122ac:	ldrd	sl, [sp, #24]
   122b0:	mov	r3, #0
   122b4:	mvn	r2, #0
   122b8:	cmp	fp, r3
   122bc:	cmpeq	sl, r2
   122c0:	bhi	131bc <__assert_fail@plt+0x1cdc>
   122c4:	mov	r1, #16
   122c8:	mov	r0, sl
   122cc:	bl	19878 <__assert_fail@plt+0x8398>
   122d0:	ldr	r9, [sp, #60]	; 0x3c
   122d4:	mov	r4, #0
   122d8:	mov	r7, r0
   122dc:	mov	r8, r4
   122e0:	mov	r6, sl
   122e4:	str	r0, [sp, #80]	; 0x50
   122e8:	mvn	r5, #0
   122ec:	bl	13500 <__assert_fail@plt+0x2020>
   122f0:	add	r4, r4, #1
   122f4:	ldr	r0, [r9]
   122f8:	bl	19c80 <__assert_fail@plt+0x87a0>
   122fc:	cmp	r6, r4
   12300:	stm	r7, {r0, r5, r8}
   12304:	add	r7, r7, #16
   12308:	str	r8, [r7, #-4]
   1230c:	bne	122ec <__assert_fail@plt+0xe0c>
   12310:	ldr	r8, [sp, #60]	; 0x3c
   12314:	movw	r3, #54116	; 0xd364
   12318:	movt	r3, #2
   1231c:	mov	r9, #0
   12320:	mov	r2, #1
   12324:	str	r3, [sp, #96]	; 0x60
   12328:	mov	r3, #0
   1232c:	strd	r2, [sp, #40]	; 0x28
   12330:	str	r9, [sp, #56]	; 0x38
   12334:	str	r9, [sp, #72]	; 0x48
   12338:	str	r9, [sp, #104]	; 0x68
   1233c:	mov	r0, #0
   12340:	ldr	r2, [sp, #64]	; 0x40
   12344:	ldr	r1, [sp, #92]	; 0x5c
   12348:	bl	18b9c <__assert_fail@plt+0x76bc>
   1234c:	cmn	r0, #1
   12350:	beq	13054 <__assert_fail@plt+0x1b74>
   12354:	cmp	r0, #0
   12358:	beq	12cc8 <__assert_fail@plt+0x17e8>
   1235c:	ldr	r3, [sp, #92]	; 0x5c
   12360:	add	r7, r3, r0
   12364:	cmp	r3, r7
   12368:	beq	1233c <__assert_fail@plt+0xe5c>
   1236c:	mov	r4, r3
   12370:	b	123c0 <__assert_fail@plt+0xee0>
   12374:	ldrd	r0, [sp, #40]	; 0x28
   12378:	cmp	r1, r3
   1237c:	cmpeq	r0, r2
   12380:	beq	1285c <__assert_fail@plt+0x137c>
   12384:	cmp	r5, #0
   12388:	beq	123b4 <__assert_fail@plt+0xed4>
   1238c:	ldrd	r0, [sp, #24]
   12390:	ldrd	r2, [sp, #40]	; 0x28
   12394:	cmp	r3, r1
   12398:	cmpeq	r2, r0
   1239c:	beq	12954 <__assert_fail@plt+0x1474>
   123a0:	adds	r3, r2, #1
   123a4:	str	r3, [sp, #40]	; 0x28
   123a8:	ldr	r3, [sp, #44]	; 0x2c
   123ac:	adc	r3, r3, #0
   123b0:	str	r3, [sp, #44]	; 0x2c
   123b4:	cmp	r7, r6
   123b8:	mov	r4, r6
   123bc:	beq	1233c <__assert_fail@plt+0xe5c>
   123c0:	ldr	r3, [sp, #36]	; 0x24
   123c4:	sub	fp, r7, r4
   123c8:	mov	r0, r4
   123cc:	mov	r2, fp
   123d0:	ldr	r1, [r3, #12]
   123d4:	bl	113fc <memchr@plt>
   123d8:	ldrd	r2, [sp, #48]	; 0x30
   123dc:	subs	r5, r0, #0
   123e0:	addne	r6, r5, #1
   123e4:	moveq	r6, r7
   123e8:	movne	r5, #1
   123ec:	subne	fp, r6, r4
   123f0:	orrs	r1, r2, r3
   123f4:	bne	12374 <__assert_fail@plt+0xe94>
   123f8:	mov	r1, r9
   123fc:	ldr	r2, [sp, #24]
   12400:	ldr	r0, [sp, #80]	; 0x50
   12404:	add	sl, r0, r9, lsl #4
   12408:	bl	13c38 <__assert_fail@plt+0x2758>
   1240c:	ldr	r3, [sp, #56]	; 0x38
   12410:	ldrb	r2, [r8, #304]	; 0x130
   12414:	orr	r0, r0, r3
   12418:	uxtb	r3, r0
   1241c:	str	r3, [sp, #56]	; 0x38
   12420:	str	r2, [sp, #88]	; 0x58
   12424:	bl	1139c <__errno_location@plt>
   12428:	ldr	r2, [sp, #88]	; 0x58
   1242c:	str	r0, [sp, #68]	; 0x44
   12430:	cmp	r2, #0
   12434:	bne	127c4 <__assert_fail@plt+0x12e4>
   12438:	mov	r1, fp
   1243c:	mov	r0, r4
   12440:	ldr	r3, [sl, #8]
   12444:	mov	r2, #1
   12448:	bl	111f8 <fwrite_unlocked@plt>
   1244c:	cmp	r0, #1
   12450:	beq	127dc <__assert_fail@plt+0x12fc>
   12454:	ldr	r3, [sp, #68]	; 0x44
   12458:	ldr	r4, [r3]
   1245c:	ldr	r3, [r8, #40]	; 0x28
   12460:	sub	r0, r4, #32
   12464:	clz	r0, r0
   12468:	lsr	r0, r0, #5
   1246c:	cmp	r3, #0
   12470:	moveq	r0, #0
   12474:	cmp	r0, #0
   12478:	bne	1280c <__assert_fail@plt+0x132c>
   1247c:	mov	r1, #3
   12480:	ldr	r2, [sl]
   12484:	bl	1825c <__assert_fail@plt+0x6d7c>
   12488:	mov	r3, r0
   1248c:	movw	r2, #47164	; 0xb83c
   12490:	movt	r2, #1
   12494:	mov	r1, r4
   12498:	mov	r0, #1
   1249c:	bl	112d0 <error@plt>
   124a0:	ldrd	r2, [sp, #24]
   124a4:	ldrd	r0, [sp, #48]	; 0x30
   124a8:	cmp	r1, r3
   124ac:	cmpeq	r0, r2
   124b0:	bhi	13240 <__assert_fail@plt+0x1d60>
   124b4:	cmp	r9, r3
   124b8:	cmpeq	r8, r2
   124bc:	bcc	13240 <__assert_fail@plt+0x1d60>
   124c0:	mov	r0, r8
   124c4:	mov	r1, r9
   124c8:	ldrd	r2, [sp, #24]
   124cc:	bl	1b288 <__assert_fail@plt+0x9da8>
   124d0:	ldrd	r6, [sp, #48]	; 0x30
   124d4:	mov	r3, r1
   124d8:	str	r0, [sp, #40]	; 0x28
   124dc:	str	r1, [sp, #56]	; 0x38
   124e0:	cmp	r7, #0
   124e4:	cmpeq	r6, #1
   124e8:	bls	130a4 <__assert_fail@plt+0x1bc4>
   124ec:	subs	r2, r6, #1
   124f0:	mov	r5, #0
   124f4:	mov	r4, sl
   124f8:	str	r2, [sp, #96]	; 0x60
   124fc:	sbc	r2, r7, #0
   12500:	str	r2, [sp, #100]	; 0x64
   12504:	ldrd	r6, [sp, #96]	; 0x60
   12508:	mul	r2, r0, r7
   1250c:	umull	r0, r1, r0, r6
   12510:	mla	r3, r6, r3, r2
   12514:	subs	r2, r0, #1
   12518:	add	r1, r3, r1
   1251c:	sbc	r3, r1, #0
   12520:	strd	r2, [sp, #112]	; 0x70
   12524:	ldrd	r0, [sp, #112]	; 0x70
   12528:	cmp	r0, sl
   1252c:	sbcs	ip, r1, r5
   12530:	bge	130d4 <__assert_fail@plt+0x1bf4>
   12534:	mov	r4, r0
   12538:	sub	sl, sl, r0
   1253c:	ldr	r0, [sp, #92]	; 0x5c
   12540:	mov	r5, r1
   12544:	mov	r2, sl
   12548:	add	r1, r0, r4
   1254c:	bl	111a4 <memmove@plt>
   12550:	mov	r0, sl
   12554:	ldrd	r6, [sp, #96]	; 0x60
   12558:	mov	r3, #0
   1255c:	strd	r8, [sp, #72]	; 0x48
   12560:	ldrd	sl, [sp, #112]	; 0x70
   12564:	str	r3, [sp, #128]	; 0x80
   12568:	mov	r3, #1
   1256c:	str	r3, [sp, #136]	; 0x88
   12570:	ldrd	r2, [sp, #72]	; 0x48
   12574:	cmp	r4, r2
   12578:	sbcs	r3, r5, r3
   1257c:	bge	13278 <__assert_fail@plt+0x1d98>
   12580:	cmn	r0, #1
   12584:	beq	131a0 <__assert_fail@plt+0x1cc0>
   12588:	cmp	r0, #0
   1258c:	beq	13278 <__assert_fail@plt+0x1d98>
   12590:	ldrd	r2, [sp, #72]	; 0x48
   12594:	subs	r1, r2, r4
   12598:	sbc	r3, r3, r5
   1259c:	str	r1, [sp, #120]	; 0x78
   125a0:	mov	r1, #0
   125a4:	str	r3, [sp, #124]	; 0x7c
   125a8:	ldrd	r2, [sp, #120]	; 0x78
   125ac:	cmp	r0, r2
   125b0:	sbcs	r3, r1, r3
   125b4:	strdlt	r0, [sp, #120]	; 0x78
   125b8:	ldrd	r2, [sp, #120]	; 0x78
   125bc:	mov	r3, #0
   125c0:	str	r3, [sp, #128]	; 0x80
   125c4:	mov	r1, r2
   125c8:	str	r1, [sp, #80]	; 0x50
   125cc:	ldr	r1, [sp, #92]	; 0x5c
   125d0:	add	r9, r1, r2
   125d4:	ldrd	r2, [sp, #48]	; 0x30
   125d8:	str	r1, [sp, #68]	; 0x44
   125dc:	orr	r8, r2, r3
   125e0:	ldr	r3, [sp, #68]	; 0x44
   125e4:	mvn	r0, #0
   125e8:	cmp	r9, r3
   125ec:	beq	12570 <__assert_fail@plt+0x1090>
   125f0:	subs	r3, sl, r4
   125f4:	str	r3, [sp, #104]	; 0x68
   125f8:	sbc	r3, fp, r5
   125fc:	str	r3, [sp, #108]	; 0x6c
   12600:	ldrd	r2, [sp, #104]	; 0x68
   12604:	cmp	r2, #0
   12608:	sbcs	r3, r3, #0
   1260c:	bge	1261c <__assert_fail@plt+0x113c>
   12610:	mov	r2, #0
   12614:	mov	r3, #0
   12618:	strd	r2, [sp, #104]	; 0x68
   1261c:	ldr	r2, [sp, #80]	; 0x50
   12620:	mov	r3, #0
   12624:	ldrd	r0, [sp, #104]	; 0x68
   12628:	cmp	r2, r0
   1262c:	sbcs	ip, r3, r1
   12630:	ldr	r3, [sp, #80]	; 0x50
   12634:	movlt	r0, r2
   12638:	sub	r2, r3, r0
   1263c:	ldr	r3, [sp, #68]	; 0x44
   12640:	add	r0, r3, r0
   12644:	ldr	r3, [sp, #36]	; 0x24
   12648:	ldr	r1, [r3, #12]
   1264c:	bl	113fc <memchr@plt>
   12650:	subs	r3, r0, #0
   12654:	beq	12c7c <__assert_fail@plt+0x179c>
   12658:	mov	r2, #1
   1265c:	add	r3, r3, #1
   12660:	str	r2, [sp, #112]	; 0x70
   12664:	ldrd	r0, [sp, #48]	; 0x30
   12668:	ldr	r2, [sp, #68]	; 0x44
   1266c:	cmp	r7, r1
   12670:	cmpeq	r6, r0
   12674:	sub	r2, r3, r2
   12678:	str	r2, [sp, #88]	; 0x58
   1267c:	beq	12ca4 <__assert_fail@plt+0x17c4>
   12680:	ldrd	r0, [sp, #48]	; 0x30
   12684:	orrs	r2, r0, r1
   12688:	beq	12c88 <__assert_fail@plt+0x17a8>
   1268c:	ldr	r2, [sp, #88]	; 0x58
   12690:	ldr	r1, [sp, #112]	; 0x70
   12694:	adds	r4, r4, r2
   12698:	mov	r2, r8
   1269c:	adc	r5, r5, #0
   126a0:	mov	r8, r9
   126a4:	mov	ip, r2
   126a8:	mov	r9, r1
   126ac:	cmp	sl, r4
   126b0:	sbcs	r2, fp, r5
   126b4:	movge	r2, r9
   126b8:	orrlt	r2, r9, #1
   126bc:	tst	r2, #255	; 0xff
   126c0:	beq	12c2c <__assert_fail@plt+0x174c>
   126c4:	eor	r2, r9, #1
   126c8:	cmp	r8, r3
   126cc:	movne	r2, #0
   126d0:	andeq	r2, r2, #1
   126d4:	cmp	r2, #0
   126d8:	bne	12c70 <__assert_fail@plt+0x1790>
   126dc:	ldrd	r0, [sp, #48]	; 0x30
   126e0:	adds	r6, r6, #1
   126e4:	adc	r7, r7, #0
   126e8:	cmp	r7, r1
   126ec:	cmpeq	r6, r0
   126f0:	movhi	r2, #1
   126f4:	movls	r2, #0
   126f8:	cmp	ip, #0
   126fc:	moveq	r2, #0
   12700:	cmp	r2, #0
   12704:	bne	12794 <__assert_fail@plt+0x12b4>
   12708:	ldrd	r0, [sp, #24]
   1270c:	cmp	r7, r1
   12710:	cmpeq	r6, r0
   12714:	beq	129e8 <__assert_fail@plt+0x1508>
   12718:	ldr	r2, [sp, #40]	; 0x28
   1271c:	adds	sl, sl, r2
   12720:	ldr	r2, [sp, #56]	; 0x38
   12724:	adc	fp, fp, r2
   12728:	cmp	sl, r4
   1272c:	sbcs	r2, fp, r5
   12730:	movge	r9, #0
   12734:	bge	126ac <__assert_fail@plt+0x11cc>
   12738:	ldrd	r0, [sp, #48]	; 0x30
   1273c:	orrs	r2, r0, r1
   12740:	bne	126ac <__assert_fail@plt+0x11cc>
   12744:	str	r3, [sp, #68]	; 0x44
   12748:	str	ip, [sp, #96]	; 0x60
   1274c:	bl	14230 <__assert_fail@plt+0x2d50>
   12750:	ldr	r3, [sp, #68]	; 0x44
   12754:	ldr	ip, [sp, #96]	; 0x60
   12758:	b	126ac <__assert_fail@plt+0x11cc>
   1275c:	ldrd	r2, [sp, #48]	; 0x30
   12760:	orrs	r3, r2, r3
   12764:	bne	12ec0 <__assert_fail@plt+0x19e0>
   12768:	ldrd	r4, [sp, #24]
   1276c:	mov	r0, r8
   12770:	mov	r1, r9
   12774:	mov	r2, r4
   12778:	mov	r3, r5
   1277c:	bl	1b288 <__assert_fail@plt+0x9da8>
   12780:	str	sl, [sp]
   12784:	strd	r4, [sp, #8]
   12788:	ldr	r3, [sp, #64]	; 0x40
   1278c:	ldr	r2, [sp, #92]	; 0x5c
   12790:	bl	1432c <__assert_fail@plt+0x2e4c>
   12794:	mov	r0, #0
   12798:	bl	114c8 <close@plt>
   1279c:	subs	r4, r0, #0
   127a0:	bne	13054 <__assert_fail@plt+0x1b74>
   127a4:	ldr	r1, [sp, #36]	; 0x24
   127a8:	ldr	r2, [sp, #60]	; 0x3c
   127ac:	ldr	r1, [r1, #8]
   127b0:	ldr	r3, [r2]
   127b4:	ldr	r2, [r2, #288]	; 0x120
   127b8:	bl	13e14 <__assert_fail@plt+0x2934>
   127bc:	mov	r0, r4
   127c0:	bl	11348 <exit@plt>
   127c4:	mov	r1, r4
   127c8:	mov	r2, fp
   127cc:	ldr	r0, [sl, #4]
   127d0:	bl	14f98 <__assert_fail@plt+0x3ab8>
   127d4:	cmp	fp, r0
   127d8:	bne	12454 <__assert_fail@plt+0xf74>
   127dc:	ldr	r3, [sp, #68]	; 0x44
   127e0:	ldr	r2, [r8, #40]	; 0x28
   127e4:	ldr	r1, [r3]
   127e8:	cmp	r2, #0
   127ec:	sub	r3, r1, #32
   127f0:	clz	r3, r3
   127f4:	lsr	r3, r3, #5
   127f8:	moveq	r3, #0
   127fc:	cmp	r3, #0
   12800:	ldr	r3, [sp, #72]	; 0x48
   12804:	moveq	r3, #1
   12808:	str	r3, [sp, #72]	; 0x48
   1280c:	ldr	r3, [sp, #56]	; 0x38
   12810:	cmp	r3, #0
   12814:	bne	12964 <__assert_fail@plt+0x1484>
   12818:	cmp	r5, #0
   1281c:	beq	123b4 <__assert_fail@plt+0xed4>
   12820:	ldrd	r0, [sp, #24]
   12824:	mov	r3, #0
   12828:	add	r9, r9, #1
   1282c:	cmp	r3, r1
   12830:	cmpeq	r9, r0
   12834:	bne	123b4 <__assert_fail@plt+0xed4>
   12838:	ldr	r3, [sp, #72]	; 0x48
   1283c:	cmp	r3, #0
   12840:	beq	12ce0 <__assert_fail@plt+0x1800>
   12844:	ldr	r3, [sp, #72]	; 0x48
   12848:	str	r3, [sp, #104]	; 0x68
   1284c:	mov	r3, #0
   12850:	mov	r9, r3
   12854:	str	r3, [sp, #72]	; 0x48
   12858:	b	123b4 <__assert_fail@plt+0xed4>
   1285c:	ldrb	sl, [r8, #304]	; 0x130
   12860:	cmp	sl, #0
   12864:	bne	1298c <__assert_fail@plt+0x14ac>
   12868:	ldr	r3, [sp, #96]	; 0x60
   1286c:	mov	r1, fp
   12870:	mov	r0, r4
   12874:	mov	r2, #1
   12878:	ldr	r3, [r3]
   1287c:	bl	111f8 <fwrite_unlocked@plt>
   12880:	cmp	r0, #1
   12884:	beq	12384 <__assert_fail@plt+0xea4>
   12888:	ldr	r3, [sp, #96]	; 0x60
   1288c:	ldr	r0, [r3]
   12890:	bl	11480 <clearerr_unlocked@plt>
   12894:	bl	1139c <__errno_location@plt>
   12898:	movw	r1, #50560	; 0xc580
   1289c:	movt	r1, #1
   128a0:	ldr	r4, [r0]
   128a4:	mov	r2, #5
   128a8:	mov	r0, sl
   128ac:	bl	1121c <dcgettext@plt>
   128b0:	mov	r3, r0
   128b4:	movw	r2, #47164	; 0xb83c
   128b8:	movt	r2, #1
   128bc:	mov	r0, #1
   128c0:	mov	r1, r4
   128c4:	bl	112d0 <error@plt>
   128c8:	mov	r2, sl
   128cc:	ldr	r1, [sp, #56]	; 0x38
   128d0:	bl	140fc <__assert_fail@plt+0x2c1c>
   128d4:	ldr	r3, [sp, #64]	; 0x40
   128d8:	adds	r8, r8, sl
   128dc:	adc	r9, r9, #0
   128e0:	cmp	r3, sl
   128e4:	ldrcs	r3, [sp, #64]	; 0x40
   128e8:	strcs	r3, [sp, #48]	; 0x30
   128ec:	bcs	121c8 <__assert_fail@plt+0xce8>
   128f0:	mov	sl, r3
   128f4:	mov	r1, r3
   128f8:	ldr	r0, [sp, #56]	; 0x38
   128fc:	bl	19780 <__assert_fail@plt+0x82a0>
   12900:	str	sl, [sp, #48]	; 0x30
   12904:	str	r0, [sp, #56]	; 0x38
   12908:	b	121c8 <__assert_fail@plt+0xce8>
   1290c:	adds	r3, r7, #0
   12910:	movne	r3, #1
   12914:	cmp	r3, #0
   12918:	moveq	sl, r3
   1291c:	str	r3, [sp, #68]	; 0x44
   12920:	moveq	r3, #1
   12924:	streq	r3, [sp, #68]	; 0x44
   12928:	beq	1215c <__assert_fail@plt+0xc7c>
   1292c:	mov	sl, fp
   12930:	mov	r4, r7
   12934:	b	1222c <__assert_fail@plt+0xd4c>
   12938:	mov	r2, r7
   1293c:	mov	r1, r6
   12940:	bl	140fc <__assert_fail@plt+0x2c1c>
   12944:	ldrd	r2, [sp, #72]	; 0x48
   12948:	adds	r8, r8, r2
   1294c:	adc	r9, r9, r3
   12950:	b	120a8 <__assert_fail@plt+0xbc8>
   12954:	mov	r2, #1
   12958:	mov	r3, #0
   1295c:	strd	r2, [sp, #40]	; 0x28
   12960:	b	123b4 <__assert_fail@plt+0xed4>
   12964:	ldr	r0, [sl, #8]
   12968:	bl	14c90 <__assert_fail@plt+0x37b0>
   1296c:	cmp	r0, #0
   12970:	bne	133b0 <__assert_fail@plt+0x1ed0>
   12974:	mvn	r3, #1
   12978:	str	r3, [sl, #4]
   1297c:	str	r0, [sl, #8]
   12980:	b	12818 <__assert_fail@plt+0x1338>
   12984:	mov	sl, r5
   12988:	b	12120 <__assert_fail@plt+0xc40>
   1298c:	mov	r1, r4
   12990:	mov	r2, fp
   12994:	mov	r0, #1
   12998:	bl	14f98 <__assert_fail@plt+0x3ab8>
   1299c:	cmp	r0, fp
   129a0:	beq	12384 <__assert_fail@plt+0xea4>
   129a4:	bl	1139c <__errno_location@plt>
   129a8:	movw	r1, #50560	; 0xc580
   129ac:	movt	r1, #1
   129b0:	ldr	r4, [r0]
   129b4:	mov	r2, #5
   129b8:	mov	r0, #0
   129bc:	b	128ac <__assert_fail@plt+0x13cc>
   129c0:	cmp	r6, r7
   129c4:	beq	129dc <__assert_fail@plt+0x14fc>
   129c8:	mov	r0, r8
   129cc:	sub	r2, r6, r7
   129d0:	mov	r1, r7
   129d4:	mov	r8, #0
   129d8:	bl	140fc <__assert_fail@plt+0x2c1c>
   129dc:	cmp	fp, #0
   129e0:	bne	11ffc <__assert_fail@plt+0xb1c>
   129e4:	b	12794 <__assert_fail@plt+0x12b4>
   129e8:	ldrd	r0, [sp, #72]	; 0x48
   129ec:	subs	sl, r0, #1
   129f0:	sbc	fp, r1, #0
   129f4:	b	12728 <__assert_fail@plt+0x1248>
   129f8:	ldr	r2, [sp, #36]	; 0x24
   129fc:	mov	r3, #0
   12a00:	strb	r3, [r2]
   12a04:	b	11d44 <__assert_fail@plt+0x864>
   12a08:	cmp	r4, #2
   12a0c:	bhi	11d14 <__assert_fail@plt+0x834>
   12a10:	ldrd	r2, [sp, #24]
   12a14:	subs	r1, r2, #1
   12a18:	sbc	r3, r3, #0
   12a1c:	str	r1, [sp, #80]	; 0x50
   12a20:	str	r3, [sp, #84]	; 0x54
   12a24:	ldr	r3, [sp, #36]	; 0x24
   12a28:	mov	sl, r7
   12a2c:	mov	r8, #0
   12a30:	mov	r9, #0
   12a34:	ldr	r0, [r3, #4]
   12a38:	bl	11354 <strlen@plt>
   12a3c:	mov	r3, #0
   12a40:	mov	r6, r0
   12a44:	strd	r4, [sp, #68]	; 0x44
   12a48:	mov	r7, r3
   12a4c:	ldrd	r4, [sp, #80]	; 0x50
   12a50:	b	12a5c <__assert_fail@plt+0x157c>
   12a54:	mov	r4, r0
   12a58:	mov	r5, r1
   12a5c:	adds	r8, r8, #1
   12a60:	mov	r2, r6
   12a64:	mov	r3, r7
   12a68:	mov	r0, r4
   12a6c:	mov	r1, r5
   12a70:	adc	r9, r9, #0
   12a74:	bl	1b288 <__assert_fail@plt+0x9da8>
   12a78:	cmp	r7, r5
   12a7c:	cmpeq	r6, r4
   12a80:	bls	12a54 <__assert_fail@plt+0x1574>
   12a84:	ldr	r3, [sp, #60]	; 0x3c
   12a88:	mov	r6, #0
   12a8c:	mov	r7, sl
   12a90:	ldrd	r4, [sp, #68]	; 0x44
   12a94:	ldr	r2, [r3, #4]
   12a98:	ldr	r3, [sp, #36]	; 0x24
   12a9c:	cmp	r2, r6
   12aa0:	strb	r6, [r3]
   12aa4:	beq	11d2c <__assert_fail@plt+0x84c>
   12aa8:	mov	r3, #0
   12aac:	cmp	r9, r3
   12ab0:	cmpeq	r8, r2
   12ab4:	bls	129f8 <__assert_fail@plt+0x1518>
   12ab8:	mov	r2, #5
   12abc:	movw	r1, #50304	; 0xc480
   12ac0:	movt	r1, #1
   12ac4:	mov	r0, r6
   12ac8:	bl	1121c <dcgettext@plt>
   12acc:	mov	r2, r0
   12ad0:	mov	r1, r6
   12ad4:	strd	r8, [sp]
   12ad8:	mov	r0, #1
   12adc:	bl	112d0 <error@plt>
   12ae0:	ldrd	r8, [sp, #24]
   12ae4:	movw	r2, #48736	; 0xbe60
   12ae8:	movt	r2, #1
   12aec:	str	r2, [sp]
   12af0:	mov	r2, #10
   12af4:	subs	r3, r8, #1
   12af8:	sbc	ip, r9, #0
   12afc:	str	r3, [sp, #80]	; 0x50
   12b00:	add	r3, sp, #144	; 0x90
   12b04:	str	ip, [sp, #84]	; 0x54
   12b08:	bl	19f98 <__assert_fail@plt+0x8ab8>
   12b0c:	cmp	r0, #0
   12b10:	bne	12a24 <__assert_fail@plt+0x1544>
   12b14:	ldrd	r8, [sp, #24]
   12b18:	ldrd	r2, [sp, #144]	; 0x90
   12b1c:	mvn	r1, r9
   12b20:	mvn	r0, r8
   12b24:	cmp	r1, r3
   12b28:	cmpeq	r0, r2
   12b2c:	movcs	r1, #1
   12b30:	movcc	r1, #0
   12b34:	cmp	r3, r9
   12b38:	cmpeq	r2, r8
   12b3c:	movcs	r1, #0
   12b40:	andcc	r1, r1, #1
   12b44:	cmp	r1, #0
   12b48:	beq	12a24 <__assert_fail@plt+0x1544>
   12b4c:	ldr	r1, [sp, #80]	; 0x50
   12b50:	adds	r1, r1, r2
   12b54:	str	r1, [sp, #80]	; 0x50
   12b58:	ldr	r1, [sp, #84]	; 0x54
   12b5c:	adc	r3, r1, r3
   12b60:	str	r3, [sp, #84]	; 0x54
   12b64:	b	12a24 <__assert_fail@plt+0x1544>
   12b68:	mov	r1, #1
   12b6c:	mov	r3, #0
   12b70:	mov	r2, #0
   12b74:	mov	r0, #0
   12b78:	str	r1, [sp]
   12b7c:	bl	11288 <lseek64@plt>
   12b80:	cmp	r0, #0
   12b84:	mov	sl, r0
   12b88:	sbcs	r3, r1, #0
   12b8c:	mov	fp, r1
   12b90:	blt	131d0 <__assert_fail@plt+0x1cf0>
   12b94:	ldr	r8, [sp, #64]	; 0x40
   12b98:	mov	r6, #0
   12b9c:	mov	r7, #0
   12ba0:	mov	r5, #0
   12ba4:	ldr	r9, [sp, #92]	; 0x5c
   12ba8:	mov	r4, r8
   12bac:	b	12bcc <__assert_fail@plt+0x16ec>
   12bb0:	cmn	r0, #1
   12bb4:	beq	12e6c <__assert_fail@plt+0x198c>
   12bb8:	adds	r6, r6, r0
   12bbc:	adc	r7, r7, #0
   12bc0:	cmp	r6, r4
   12bc4:	sbcs	r3, r7, r5
   12bc8:	bge	12d80 <__assert_fail@plt+0x18a0>
   12bcc:	sub	r2, r8, r6
   12bd0:	add	r1, r9, r6
   12bd4:	mov	r0, #0
   12bd8:	bl	18b9c <__assert_fail@plt+0x76bc>
   12bdc:	cmp	r0, #0
   12be0:	bne	12bb0 <__assert_fail@plt+0x16d0>
   12be4:	ldr	r2, [sp, #64]	; 0x40
   12be8:	asr	r3, r2, #31
   12bec:	cmp	r6, r2
   12bf0:	sbcs	r1, r7, r3
   12bf4:	ldrd	r0, [sp, #24]
   12bf8:	movlt	r2, r6
   12bfc:	mov	sl, r2
   12c00:	cmp	r0, #0
   12c04:	sbcs	r1, r1, #0
   12c08:	blt	1336c <__assert_fail@plt+0x1e8c>
   12c0c:	ldrd	r2, [sp, #24]
   12c10:	mov	r8, r6
   12c14:	mov	r9, r7
   12c18:	cmp	r7, r3
   12c1c:	cmpeq	r6, r2
   12c20:	movcc	r8, r2
   12c24:	movcc	r9, r3
   12c28:	b	11f54 <__assert_fail@plt+0xa74>
   12c2c:	ldr	r2, [sp, #128]	; 0x80
   12c30:	mov	r9, r8
   12c34:	mov	r8, ip
   12c38:	str	r3, [sp, #68]	; 0x44
   12c3c:	ldr	r1, [sp, #80]	; 0x50
   12c40:	str	r2, [sp, #128]	; 0x80
   12c44:	ldr	r0, [sp, #88]	; 0x58
   12c48:	ldr	r3, [sp, #112]	; 0x70
   12c4c:	sub	r1, r1, r0
   12c50:	str	r1, [sp, #80]	; 0x50
   12c54:	str	r3, [sp, #136]	; 0x88
   12c58:	b	125e0 <__assert_fail@plt+0x1100>
   12c5c:	cmp	sl, #0
   12c60:	bne	13088 <__assert_fail@plt+0x1ba8>
   12c64:	ldr	r0, [sp, #56]	; 0x38
   12c68:	bl	14e68 <__assert_fail@plt+0x3988>
   12c6c:	b	12794 <__assert_fail@plt+0x12b4>
   12c70:	mov	r9, r8
   12c74:	mov	r8, ip
   12c78:	b	12c38 <__assert_fail@plt+0x1758>
   12c7c:	str	r3, [sp, #112]	; 0x70
   12c80:	mov	r3, r9
   12c84:	b	12664 <__assert_fail@plt+0x1184>
   12c88:	ldr	r1, [sp, #68]	; 0x44
   12c8c:	str	r3, [sp, #96]	; 0x60
   12c90:	ldr	r2, [sp, #88]	; 0x58
   12c94:	ldr	r0, [sp, #136]	; 0x88
   12c98:	bl	140fc <__assert_fail@plt+0x2c1c>
   12c9c:	ldr	r3, [sp, #96]	; 0x60
   12ca0:	b	1268c <__assert_fail@plt+0x11ac>
   12ca4:	mov	r0, #1
   12ca8:	ldr	r1, [sp, #68]	; 0x44
   12cac:	str	r3, [sp, #96]	; 0x60
   12cb0:	bl	14f98 <__assert_fail@plt+0x3ab8>
   12cb4:	ldr	r3, [sp, #88]	; 0x58
   12cb8:	cmp	r3, r0
   12cbc:	ldr	r3, [sp, #96]	; 0x60
   12cc0:	beq	1268c <__assert_fail@plt+0x11ac>
   12cc4:	b	129a4 <__assert_fail@plt+0x14c4>
   12cc8:	ldrd	r2, [sp, #48]	; 0x30
   12ccc:	orrs	r3, r2, r3
   12cd0:	bne	12794 <__assert_fail@plt+0x12b4>
   12cd4:	ldr	r3, [sp, #104]	; 0x68
   12cd8:	cmp	r3, #0
   12cdc:	beq	12ce4 <__assert_fail@plt+0x1804>
   12ce0:	ldr	r9, [sp, #24]
   12ce4:	mov	r5, #0
   12ce8:	mvn	r7, #1
   12cec:	ldr	r6, [sp, #24]
   12cf0:	ldr	r4, [sp, #80]	; 0x50
   12cf4:	b	12d28 <__assert_fail@plt+0x1848>
   12cf8:	ldr	r1, [r4, #4]
   12cfc:	cmp	r1, #0
   12d00:	blt	12d14 <__assert_fail@plt+0x1834>
   12d04:	ldr	r3, [r4]
   12d08:	ldr	r0, [r4, #8]
   12d0c:	ldr	r2, [r4, #12]
   12d10:	bl	13e14 <__assert_fail@plt+0x2934>
   12d14:	add	r5, r5, #1
   12d18:	add	r4, r4, #16
   12d1c:	str	r7, [r4, #-12]
   12d20:	cmp	r5, r6
   12d24:	beq	12794 <__assert_fail@plt+0x12b4>
   12d28:	cmp	r5, r9
   12d2c:	bcc	12cf8 <__assert_fail@plt+0x1818>
   12d30:	ldr	r3, [sp, #60]	; 0x3c
   12d34:	ldrb	r3, [r3, #296]	; 0x128
   12d38:	cmp	r3, #0
   12d3c:	bne	12cf8 <__assert_fail@plt+0x1818>
   12d40:	mov	r2, r6
   12d44:	mov	r1, r5
   12d48:	ldr	r0, [sp, #80]	; 0x50
   12d4c:	bl	13c38 <__assert_fail@plt+0x2758>
   12d50:	b	12cf8 <__assert_fail@plt+0x1818>
   12d54:	cmp	r9, #100	; 0x64
   12d58:	movwne	r1, #50124	; 0xc3cc
   12d5c:	movtne	r1, #1
   12d60:	bne	11e5c <__assert_fail@plt+0x97c>
   12d64:	movw	r1, #50076	; 0xc39c
   12d68:	movt	r1, #1
   12d6c:	mov	r2, #5
   12d70:	mov	r0, #0
   12d74:	bl	1121c <dcgettext@plt>
   12d78:	mov	r5, r0
   12d7c:	b	11e6c <__assert_fail@plt+0x98c>
   12d80:	ldr	r3, [sp, #60]	; 0x3c
   12d84:	ldrd	r8, [r3, #96]	; 0x60
   12d88:	orrs	r3, r8, r9
   12d8c:	beq	131c0 <__assert_fail@plt+0x1ce0>
   12d90:	ldr	r3, [sp, #60]	; 0x3c
   12d94:	ldr	r4, [r3, #64]	; 0x40
   12d98:	adds	r3, sl, r6
   12d9c:	str	r3, [sp, #128]	; 0x80
   12da0:	adc	r3, fp, r7
   12da4:	str	r3, [sp, #132]	; 0x84
   12da8:	ldrd	sl, [sp, #128]	; 0x80
   12dac:	and	r4, r4, #53248	; 0xd000
   12db0:	cmp	r8, sl
   12db4:	sbcs	r3, r9, fp
   12db8:	movge	r3, #1
   12dbc:	movlt	r3, #0
   12dc0:	cmp	r4, #32768	; 0x8000
   12dc4:	movne	r4, #0
   12dc8:	andeq	r4, r3, #1
   12dcc:	cmp	r4, #0
   12dd0:	bne	12e38 <__assert_fail@plt+0x1958>
   12dd4:	mov	r1, #2
   12dd8:	mov	r3, #0
   12ddc:	mov	r2, #0
   12de0:	mov	r0, r4
   12de4:	str	r1, [sp]
   12de8:	bl	11288 <lseek64@plt>
   12dec:	cmp	r0, #0
   12df0:	mov	r8, r0
   12df4:	sbcs	r3, r1, #0
   12df8:	mov	r9, r1
   12dfc:	blt	12e6c <__assert_fail@plt+0x198c>
   12e00:	cmp	fp, r1
   12e04:	cmpeq	sl, r0
   12e08:	beq	12be4 <__assert_fail@plt+0x1704>
   12e0c:	mov	r3, fp
   12e10:	mov	r0, r4
   12e14:	str	r4, [sp]
   12e18:	mov	r2, sl
   12e1c:	bl	11288 <lseek64@plt>
   12e20:	cmp	r0, #0
   12e24:	sbcs	r3, r1, #0
   12e28:	blt	12e6c <__assert_fail@plt+0x198c>
   12e2c:	cmp	r8, sl
   12e30:	sbcs	r3, r9, fp
   12e34:	blt	12be4 <__assert_fail@plt+0x1704>
   12e38:	ldrd	r0, [sp, #128]	; 0x80
   12e3c:	subs	r3, r8, r0
   12e40:	sbc	r2, r9, r1
   12e44:	adds	r6, r6, r3
   12e48:	adc	r7, r7, r2
   12e4c:	mvn	r3, #-2147483648	; 0x80000000
   12e50:	mvn	r2, #0
   12e54:	cmp	r7, r3
   12e58:	cmpeq	r6, r2
   12e5c:	beq	131c0 <__assert_fail@plt+0x1ce0>
   12e60:	cmp	r6, #0
   12e64:	sbcs	r3, r7, #0
   12e68:	bge	12be4 <__assert_fail@plt+0x1704>
   12e6c:	bl	1139c <__errno_location@plt>
   12e70:	mov	r2, #5
   12e74:	movw	r1, #50460	; 0xc51c
   12e78:	movt	r1, #1
   12e7c:	ldr	r4, [r0]
   12e80:	mov	r0, #0
   12e84:	bl	1121c <dcgettext@plt>
   12e88:	ldr	r3, [sp, #60]	; 0x3c
   12e8c:	mov	r5, r0
   12e90:	mov	r1, #3
   12e94:	mov	r0, #0
   12e98:	ldr	r2, [r3, #300]	; 0x12c
   12e9c:	bl	1825c <__assert_fail@plt+0x6d7c>
   12ea0:	mov	r3, r0
   12ea4:	mov	r2, r5
   12ea8:	mov	r1, r4
   12eac:	mov	r0, #1
   12eb0:	bl	112d0 <error@plt>
   12eb4:	mov	r3, #0
   12eb8:	str	r3, [sp, #80]	; 0x50
   12ebc:	b	12310 <__assert_fail@plt+0xe30>
   12ec0:	ldrd	r0, [sp, #24]
   12ec4:	ldrd	r2, [sp, #48]	; 0x30
   12ec8:	cmp	r3, r1
   12ecc:	cmpeq	r2, r0
   12ed0:	movls	r3, #1
   12ed4:	movhi	r3, #0
   12ed8:	cmp	r9, r1
   12edc:	cmpeq	r8, r0
   12ee0:	movcc	r3, #0
   12ee4:	andcs	r3, r3, #1
   12ee8:	cmp	r3, #0
   12eec:	beq	1325c <__assert_fail@plt+0x1d7c>
   12ef0:	ldrd	r4, [sp, #24]
   12ef4:	mov	r0, r8
   12ef8:	mov	r1, r9
   12efc:	mov	r2, r4
   12f00:	mov	r3, r5
   12f04:	bl	1b288 <__assert_fail@plt+0x9da8>
   12f08:	ldrd	r6, [sp, #48]	; 0x30
   12f0c:	subs	ip, r6, #1
   12f10:	sbc	r3, r7, #0
   12f14:	cmp	r7, r5
   12f18:	mul	r2, ip, r1
   12f1c:	cmpeq	r6, r4
   12f20:	umull	r4, r5, ip, r0
   12f24:	mla	r3, r0, r3, r2
   12f28:	strd	r4, [sp, #24]
   12f2c:	add	r3, r3, r5
   12f30:	str	r3, [sp, #28]
   12f34:	ldrd	r4, [sp, #24]
   12f38:	beq	12f4c <__assert_fail@plt+0x1a6c>
   12f3c:	mul	r3, r0, r7
   12f40:	umull	r8, r9, r0, r6
   12f44:	mla	r1, r6, r1, r3
   12f48:	add	r9, r1, r9
   12f4c:	ldrd	r2, [sp, #24]
   12f50:	mov	r1, #0
   12f54:	mov	r0, sl
   12f58:	cmp	r2, sl
   12f5c:	sbcs	ip, r3, r1
   12f60:	bge	13134 <__assert_fail@plt+0x1c54>
   12f64:	ldr	r7, [sp, #92]	; 0x5c
   12f68:	sub	r6, sl, r2
   12f6c:	mov	r3, r2
   12f70:	mov	r2, r6
   12f74:	add	r1, r7, r3
   12f78:	mov	r0, r7
   12f7c:	bl	111a4 <memmove@plt>
   12f80:	mov	r0, r6
   12f84:	ldr	r6, [sp, #60]	; 0x3c
   12f88:	cmp	r4, r8
   12f8c:	sbcs	r3, r5, r9
   12f90:	bge	12794 <__assert_fail@plt+0x12b4>
   12f94:	cmn	r0, #1
   12f98:	beq	1303c <__assert_fail@plt+0x1b5c>
   12f9c:	cmp	r0, #0
   12fa0:	beq	12794 <__assert_fail@plt+0x12b4>
   12fa4:	subs	sl, r8, r4
   12fa8:	mov	r1, #0
   12fac:	sbc	fp, r9, r5
   12fb0:	cmp	r0, sl
   12fb4:	sbcs	r3, r1, fp
   12fb8:	movlt	sl, r0
   12fbc:	movlt	fp, r1
   12fc0:	mov	r2, sl
   12fc4:	mov	r1, r7
   12fc8:	mov	r0, #1
   12fcc:	bl	14f98 <__assert_fail@plt+0x3ab8>
   12fd0:	cmp	r0, sl
   12fd4:	beq	1302c <__assert_fail@plt+0x1b4c>
   12fd8:	bl	1139c <__errno_location@plt>
   12fdc:	ldr	r3, [r0]
   12fe0:	ldr	r2, [r6, #40]	; 0x28
   12fe4:	sub	r0, r3, #32
   12fe8:	clz	r0, r0
   12fec:	lsr	r0, r0, #5
   12ff0:	cmp	r2, #0
   12ff4:	moveq	r0, #0
   12ff8:	cmp	r0, #0
   12ffc:	bne	1302c <__assert_fail@plt+0x1b4c>
   13000:	mov	r1, #3
   13004:	movw	r2, #49688	; 0xc218
   13008:	movt	r2, #1
   1300c:	mov	r6, r3
   13010:	bl	1825c <__assert_fail@plt+0x6d7c>
   13014:	mov	r3, r0
   13018:	movw	r2, #47164	; 0xb83c
   1301c:	movt	r2, #1
   13020:	mov	r1, r6
   13024:	mov	r0, #1
   13028:	bl	112d0 <error@plt>
   1302c:	adds	r4, r4, sl
   13030:	mvn	r0, #0
   13034:	adc	r5, r5, fp
   13038:	b	12f88 <__assert_fail@plt+0x1aa8>
   1303c:	mov	r1, r7
   13040:	mov	r0, #0
   13044:	ldr	r2, [sp, #64]	; 0x40
   13048:	bl	18b9c <__assert_fail@plt+0x76bc>
   1304c:	cmn	r0, #1
   13050:	bne	12f9c <__assert_fail@plt+0x1abc>
   13054:	bl	1139c <__errno_location@plt>
   13058:	ldr	r3, [sp, #60]	; 0x3c
   1305c:	mov	r1, #3
   13060:	ldr	r4, [r0]
   13064:	mov	r0, #0
   13068:	ldr	r2, [r3, #300]	; 0x12c
   1306c:	bl	1825c <__assert_fail@plt+0x6d7c>
   13070:	mov	r3, r0
   13074:	movw	r2, #47164	; 0xb83c
   13078:	movt	r2, #1
   1307c:	mov	r1, r4
   13080:	mov	r0, #1
   13084:	bl	112d0 <error@plt>
   13088:	orrs	r3, r8, r9
   1308c:	mov	r2, sl
   13090:	ldr	r1, [sp, #56]	; 0x38
   13094:	moveq	r0, #1
   13098:	movne	r0, #0
   1309c:	bl	140fc <__assert_fail@plt+0x2c1c>
   130a0:	b	12c64 <__assert_fail@plt+0x1784>
   130a4:	ldr	r3, [sp, #40]	; 0x28
   130a8:	mov	r2, #1
   130ac:	mov	r4, #0
   130b0:	mov	r5, #0
   130b4:	subs	r3, r3, #1
   130b8:	str	r3, [sp, #112]	; 0x70
   130bc:	ldr	r3, [sp, #56]	; 0x38
   130c0:	sbc	r3, r3, #0
   130c4:	str	r3, [sp, #116]	; 0x74
   130c8:	mov	r3, #0
   130cc:	strd	r2, [sp, #96]	; 0x60
   130d0:	b	12550 <__assert_fail@plt+0x1070>
   130d4:	mov	r6, #1
   130d8:	subs	r2, r2, sl
   130dc:	sbc	r3, r3, r5
   130e0:	mov	r0, #0
   130e4:	str	r6, [sp]
   130e8:	bl	11288 <lseek64@plt>
   130ec:	cmp	r0, #0
   130f0:	sbcs	r3, r1, #0
   130f4:	mvnge	sl, #0
   130f8:	ldrdge	r4, [sp, #112]	; 0x70
   130fc:	bge	12550 <__assert_fail@plt+0x1070>
   13100:	bl	1139c <__errno_location@plt>
   13104:	ldr	r3, [sp, #60]	; 0x3c
   13108:	mov	r1, #3
   1310c:	ldr	r5, [r0]
   13110:	mov	r0, #0
   13114:	ldr	r2, [r3, #300]	; 0x12c
   13118:	bl	1825c <__assert_fail@plt+0x6d7c>
   1311c:	mov	r3, r0
   13120:	movw	r2, #47164	; 0xb83c
   13124:	movt	r2, #1
   13128:	mov	r1, r5
   1312c:	mov	r0, r6
   13130:	bl	112d0 <error@plt>
   13134:	ldrd	sl, [sp, #24]
   13138:	mov	r6, #1
   1313c:	str	r6, [sp]
   13140:	subs	r2, sl, r0
   13144:	mov	r0, #0
   13148:	sbc	r3, fp, r1
   1314c:	bl	11288 <lseek64@plt>
   13150:	cmp	r0, #0
   13154:	sbcs	r3, r1, #0
   13158:	mvnge	r6, #0
   1315c:	ldrge	r7, [sp, #92]	; 0x5c
   13160:	movge	r0, r6
   13164:	ldrge	r6, [sp, #60]	; 0x3c
   13168:	bge	12f88 <__assert_fail@plt+0x1aa8>
   1316c:	bl	1139c <__errno_location@plt>
   13170:	ldr	r3, [sp, #60]	; 0x3c
   13174:	mov	r1, #3
   13178:	ldr	r4, [r0]
   1317c:	mov	r0, #0
   13180:	ldr	r2, [r3, #300]	; 0x12c
   13184:	bl	1825c <__assert_fail@plt+0x6d7c>
   13188:	mov	r3, r0
   1318c:	movw	r2, #47164	; 0xb83c
   13190:	movt	r2, #1
   13194:	mov	r1, r4
   13198:	mov	r0, r6
   1319c:	bl	112d0 <error@plt>
   131a0:	mov	r0, #0
   131a4:	ldr	r2, [sp, #64]	; 0x40
   131a8:	ldr	r1, [sp, #92]	; 0x5c
   131ac:	bl	18b9c <__assert_fail@plt+0x76bc>
   131b0:	cmn	r0, #1
   131b4:	bne	12588 <__assert_fail@plt+0x10a8>
   131b8:	b	13054 <__assert_fail@plt+0x1b74>
   131bc:	bl	19ccc <__assert_fail@plt+0x87ec>
   131c0:	bl	1139c <__errno_location@plt>
   131c4:	mov	r3, #75	; 0x4b
   131c8:	str	r3, [r0]
   131cc:	b	12e6c <__assert_fail@plt+0x198c>
   131d0:	bl	1139c <__errno_location@plt>
   131d4:	ldr	r3, [r0]
   131d8:	cmp	r3, #29
   131dc:	moveq	r3, #0
   131e0:	streq	r3, [r0]
   131e4:	b	12e6c <__assert_fail@plt+0x198c>
   131e8:	mov	r2, #5
   131ec:	movw	r1, #49964	; 0xc32c
   131f0:	movt	r1, #1
   131f4:	mov	r0, #0
   131f8:	bl	1121c <dcgettext@plt>
   131fc:	mov	r5, r0
   13200:	ldr	r0, [r4]
   13204:	bl	18a08 <__assert_fail@plt+0x7528>
   13208:	mov	r3, r0
   1320c:	mov	r2, r5
   13210:	mov	r1, #0
   13214:	mov	r0, #1
   13218:	bl	112d0 <error@plt>
   1321c:	movw	r1, #49996	; 0xc34c
   13220:	movt	r1, #1
   13224:	mov	r2, #5
   13228:	mov	r0, #0
   1322c:	bl	1121c <dcgettext@plt>
   13230:	mov	r2, r0
   13234:	mov	r1, #0
   13238:	mov	r0, #1
   1323c:	bl	112d0 <error@plt>
   13240:	movw	r1, #46612	; 0xb614
   13244:	movt	r1, #1
   13248:	ldr	r3, [pc, #440]	; 13408 <__assert_fail@plt+0x1f28>
   1324c:	movw	r0, #50528	; 0xc560
   13250:	movt	r0, #1
   13254:	movw	r2, #867	; 0x363
   13258:	bl	114e0 <__assert_fail@plt>
   1325c:	movw	r1, #46612	; 0xb614
   13260:	movt	r1, #1
   13264:	ldr	r3, [pc, #416]	; 1340c <__assert_fail@plt+0x1f2c>
   13268:	movw	r0, #50492	; 0xc53c
   1326c:	movt	r0, #1
   13270:	mov	r2, #996	; 0x3e4
   13274:	bl	114e0 <__assert_fail@plt>
   13278:	ldr	r3, [sp, #128]	; 0x80
   1327c:	strd	r6, [sp, #96]	; 0x60
   13280:	cmp	r3, #0
   13284:	beq	132a0 <__assert_fail@plt+0x1dc0>
   13288:	ldr	r3, [sp, #96]	; 0x60
   1328c:	adds	r3, r3, #1
   13290:	str	r3, [sp, #96]	; 0x60
   13294:	ldr	r3, [sp, #100]	; 0x64
   13298:	adc	r3, r3, #0
   1329c:	str	r3, [sp, #100]	; 0x64
   132a0:	ldrd	r4, [sp, #96]	; 0x60
   132a4:	b	132c4 <__assert_fail@plt+0x1de4>
   132a8:	ldrd	r2, [sp, #24]
   132ac:	cmp	r3, r5
   132b0:	cmpeq	r2, r4
   132b4:	bcc	12794 <__assert_fail@plt+0x12b4>
   132b8:	bl	14230 <__assert_fail@plt+0x2d50>
   132bc:	adds	r4, r4, #1
   132c0:	adc	r5, r5, #0
   132c4:	ldrd	r2, [sp, #48]	; 0x30
   132c8:	orrs	r3, r2, r3
   132cc:	beq	132a8 <__assert_fail@plt+0x1dc8>
   132d0:	b	12794 <__assert_fail@plt+0x12b4>
   132d4:	mov	r2, #5
   132d8:	movw	r1, #50036	; 0xc374
   132dc:	movt	r1, #1
   132e0:	mov	r0, #0
   132e4:	bl	1121c <dcgettext@plt>
   132e8:	mov	r4, r0
   132ec:	add	r2, sp, #144	; 0x90
   132f0:	ldrd	r0, [sp, #24]
   132f4:	bl	15020 <__assert_fail@plt+0x3b40>
   132f8:	mov	r3, r0
   132fc:	mov	r2, r4
   13300:	str	r9, [sp]
   13304:	mov	r1, #0
   13308:	mov	r0, #1
   1330c:	bl	112d0 <error@plt>
   13310:	cmp	fp, #0
   13314:	cmpne	r4, #0
   13318:	bne	1222c <__assert_fail@plt+0xd4c>
   1331c:	adds	r2, r7, #0
   13320:	movne	r2, #1
   13324:	cmp	fp, #0
   13328:	movne	r2, #0
   1332c:	cmp	r2, #0
   13330:	bne	12930 <__assert_fail@plt+0x1450>
   13334:	b	12284 <__assert_fail@plt+0xda4>
   13338:	bl	1139c <__errno_location@plt>
   1333c:	mov	r2, #5
   13340:	movw	r1, #50432	; 0xc500
   13344:	movt	r1, #1
   13348:	ldr	r4, [r0]
   1334c:	mov	r0, #0
   13350:	bl	1121c <dcgettext@plt>
   13354:	ldr	r3, [sp, #60]	; 0x3c
   13358:	mov	r5, r0
   1335c:	mov	r0, #4
   13360:	ldr	r1, [r3, #300]	; 0x12c
   13364:	bl	176dc <__assert_fail@plt+0x61fc>
   13368:	b	12ea0 <__assert_fail@plt+0x19c0>
   1336c:	mov	r2, #5
   13370:	movw	r1, #49884	; 0xc2dc
   13374:	movt	r1, #1
   13378:	mov	r0, #0
   1337c:	bl	1121c <dcgettext@plt>
   13380:	mov	r4, r0
   13384:	add	r2, sp, #144	; 0x90
   13388:	ldrd	r0, [sp, #24]
   1338c:	bl	15020 <__assert_fail@plt+0x3b40>
   13390:	bl	18a08 <__assert_fail@plt+0x7528>
   13394:	movw	r2, #50296	; 0xc478
   13398:	movt	r2, #1
   1339c:	str	r0, [sp]
   133a0:	mov	r3, r4
   133a4:	mov	r1, #75	; 0x4b
   133a8:	mov	r0, #1
   133ac:	bl	112d0 <error@plt>
   133b0:	ldr	r3, [sp, #68]	; 0x44
   133b4:	mov	r1, #3
   133b8:	mov	r0, #0
   133bc:	ldr	r2, [sl]
   133c0:	ldr	r4, [r3]
   133c4:	b	1306c <__assert_fail@plt+0x1b8c>
   133c8:	movw	r1, #49632	; 0xc1e0
   133cc:	movt	r1, #1
   133d0:	b	11780 <__assert_fail@plt+0x2a0>
   133d4:	movw	r1, #49936	; 0xc310
   133d8:	movt	r1, #1
   133dc:	b	13224 <__assert_fail@plt+0x1d44>
   133e0:	mov	r4, #0
   133e4:	mov	r5, #0
   133e8:	ldrd	r0, [sp, #24]
   133ec:	mvn	ip, #0
   133f0:	ldr	r3, [sp, #64]	; 0x40
   133f4:	str	ip, [sp]
   133f8:	strd	r4, [sp, #8]
   133fc:	ldr	r2, [sp, #92]	; 0x5c
   13400:	bl	1432c <__assert_fail@plt+0x2e4c>
   13404:	b	12794 <__assert_fail@plt+0x12b4>
   13408:	andeq	fp, r1, r0, lsl #12
   1340c:	andeq	fp, r1, ip, ror #11
   13410:	mov	fp, #0
   13414:	mov	lr, #0
   13418:	pop	{r1}		; (ldr r1, [sp], #4)
   1341c:	mov	r2, sp
   13420:	push	{r2}		; (str r2, [sp, #-4]!)
   13424:	push	{r0}		; (str r0, [sp, #-4]!)
   13428:	ldr	ip, [pc, #16]	; 13440 <__assert_fail@plt+0x1f60>
   1342c:	push	{ip}		; (str ip, [sp, #-4]!)
   13430:	ldr	r0, [pc, #12]	; 13444 <__assert_fail@plt+0x1f64>
   13434:	ldr	r3, [pc, #12]	; 13448 <__assert_fail@plt+0x1f68>
   13438:	bl	1130c <__libc_start_main@plt>
   1343c:	bl	114bc <abort@plt>
   13440:	andeq	fp, r1, ip, asr r4
   13444:	strdeq	r1, [r1], -r0
   13448:	strdeq	fp, [r1], -ip
   1344c:	ldr	r3, [pc, #20]	; 13468 <__assert_fail@plt+0x1f88>
   13450:	ldr	r2, [pc, #20]	; 1346c <__assert_fail@plt+0x1f8c>
   13454:	add	r3, pc, r3
   13458:	ldr	r2, [r3, r2]
   1345c:	cmp	r2, #0
   13460:	bxeq	lr
   13464:	b	11324 <__gmon_start__@plt>
   13468:	andeq	r9, r1, r4, lsr #23
   1346c:	andeq	r0, r0, r8, asr #2
   13470:	ldr	r0, [pc, #24]	; 13490 <__assert_fail@plt+0x1fb0>
   13474:	ldr	r3, [pc, #24]	; 13494 <__assert_fail@plt+0x1fb4>
   13478:	cmp	r3, r0
   1347c:	bxeq	lr
   13480:	ldr	r3, [pc, #16]	; 13498 <__assert_fail@plt+0x1fb8>
   13484:	cmp	r3, #0
   13488:	bxeq	lr
   1348c:	bx	r3
   13490:	andeq	sp, r2, r0, asr r3
   13494:	andeq	sp, r2, r0, asr r3
   13498:	andeq	r0, r0, r0
   1349c:	ldr	r0, [pc, #36]	; 134c8 <__assert_fail@plt+0x1fe8>
   134a0:	ldr	r1, [pc, #36]	; 134cc <__assert_fail@plt+0x1fec>
   134a4:	sub	r1, r1, r0
   134a8:	asr	r1, r1, #2
   134ac:	add	r1, r1, r1, lsr #31
   134b0:	asrs	r1, r1, #1
   134b4:	bxeq	lr
   134b8:	ldr	r3, [pc, #16]	; 134d0 <__assert_fail@plt+0x1ff0>
   134bc:	cmp	r3, #0
   134c0:	bxeq	lr
   134c4:	bx	r3
   134c8:	andeq	sp, r2, r0, asr r3
   134cc:	andeq	sp, r2, r0, asr r3
   134d0:	andeq	r0, r0, r0
   134d4:	push	{r4, lr}
   134d8:	ldr	r4, [pc, #24]	; 134f8 <__assert_fail@plt+0x2018>
   134dc:	ldrb	r3, [r4]
   134e0:	cmp	r3, #0
   134e4:	popne	{r4, pc}
   134e8:	bl	13470 <__assert_fail@plt+0x1f90>
   134ec:	mov	r3, #1
   134f0:	strb	r3, [r4]
   134f4:	pop	{r4, pc}
   134f8:	andeq	sp, r2, ip, ror #6
   134fc:	b	1349c <__assert_fail@plt+0x1fbc>
   13500:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13504:	movw	r4, #54128	; 0xd370
   13508:	movt	r4, #2
   1350c:	ldr	r5, [r4]
   13510:	strd	r6, [sp, #8]
   13514:	strd	r8, [sp, #16]
   13518:	str	sl, [sp, #24]
   1351c:	str	lr, [sp, #28]
   13520:	cmp	r5, #0
   13524:	ldr	r6, [r4, #4]
   13528:	beq	135e8 <__assert_fail@plt+0x2108>
   1352c:	cmp	r6, #0
   13530:	sub	r1, r6, #1
   13534:	beq	13790 <__assert_fail@plt+0x22b0>
   13538:	ldr	r9, [r4, #28]
   1353c:	movw	r3, #53588	; 0xd154
   13540:	movt	r3, #2
   13544:	sub	r2, r6, #-1073741823	; 0xc0000001
   13548:	ldr	r8, [r4, #32]
   1354c:	ldrb	r7, [r3]
   13550:	add	r0, r9, r6
   13554:	ldr	ip, [r3, #4]
   13558:	add	r2, r8, r2, lsl #2
   1355c:	b	13588 <__assert_fail@plt+0x20a8>
   13560:	ldrb	r3, [ip, r3]
   13564:	cmp	r3, #0
   13568:	strb	r3, [r0, #-1]
   1356c:	bne	135d0 <__assert_fail@plt+0x20f0>
   13570:	str	r3, [r2, #4]
   13574:	sub	r1, r1, #1
   13578:	ldrb	r3, [ip]
   1357c:	cmn	r1, #1
   13580:	strb	r3, [r0, #-1]!
   13584:	beq	13790 <__assert_fail@plt+0x22b0>
   13588:	ldr	r3, [r2]
   1358c:	cmp	r1, #0
   13590:	movne	sl, #0
   13594:	andeq	sl, r7, #1
   13598:	mov	lr, r2
   1359c:	cmp	sl, #0
   135a0:	add	r3, r3, #1
   135a4:	str	r3, [r2], #-4
   135a8:	beq	13560 <__assert_fail@plt+0x2080>
   135ac:	ldr	r2, [r8]
   135b0:	add	r2, ip, r2
   135b4:	ldrb	r2, [r2, #1]
   135b8:	cmp	r2, #0
   135bc:	beq	135e8 <__assert_fail@plt+0x2108>
   135c0:	ldrb	r3, [ip, r3]
   135c4:	cmp	r3, #0
   135c8:	strb	r3, [r9]
   135cc:	beq	13784 <__assert_fail@plt+0x22a4>
   135d0:	ldrd	r4, [sp]
   135d4:	ldrd	r6, [sp, #8]
   135d8:	ldrd	r8, [sp, #16]
   135dc:	ldr	sl, [sp, #24]
   135e0:	add	sp, sp, #28
   135e4:	pop	{pc}		; (ldr pc, [sp], #4)
   135e8:	ldr	r8, [r4, #8]
   135ec:	cmp	r8, #0
   135f0:	bne	13668 <__assert_fail@plt+0x2188>
   135f4:	ldr	r0, [r4, #12]
   135f8:	bl	11354 <strlen@plt>
   135fc:	mov	r7, r0
   13600:	ldr	r0, [r4, #20]
   13604:	str	r7, [r4, #16]
   13608:	cmp	r0, #0
   1360c:	moveq	r0, r8
   13610:	beq	13618 <__assert_fail@plt+0x2138>
   13614:	bl	11354 <strlen@plt>
   13618:	add	r3, r7, r6
   1361c:	str	r0, [r4, #24]
   13620:	add	r3, r3, r0
   13624:	add	r1, r3, #1
   13628:	cmp	r7, r1
   1362c:	str	r3, [r4, #8]
   13630:	bhi	13780 <__assert_fail@plt+0x22a0>
   13634:	mov	r0, r5
   13638:	bl	19780 <__assert_fail@plt+0x82a0>
   1363c:	ldr	r1, [r4, #12]
   13640:	mov	r6, r0
   13644:	str	r0, [r4]
   13648:	ldr	r5, [r4, #16]
   1364c:	mov	r2, r5
   13650:	bl	111c8 <memcpy@plt>
   13654:	movw	r3, #53588	; 0xd154
   13658:	movt	r3, #2
   1365c:	ldr	r7, [r4, #32]
   13660:	ldr	r2, [r3, #4]
   13664:	b	136c0 <__assert_fail@plt+0x21e0>
   13668:	ldr	r3, [r4, #16]
   1366c:	add	r6, r6, #1
   13670:	add	r1, r8, #3
   13674:	add	r2, r8, #2
   13678:	str	r6, [r4, #4]
   1367c:	str	r2, [r4, #8]
   13680:	cmp	r1, r3
   13684:	bcc	13780 <__assert_fail@plt+0x22a0>
   13688:	mov	r0, r5
   1368c:	bl	19780 <__assert_fail@plt+0x82a0>
   13690:	ldr	r7, [r4, #32]
   13694:	movw	r3, #53588	; 0xd154
   13698:	movt	r3, #2
   1369c:	mov	r6, r0
   136a0:	str	r0, [r4]
   136a4:	ldr	r2, [r3, #4]
   136a8:	ldr	r3, [r4, #16]
   136ac:	ldr	r1, [r7]
   136b0:	add	r5, r3, #1
   136b4:	ldrb	r1, [r2, r1]
   136b8:	str	r5, [r4, #16]
   136bc:	strb	r1, [r0, r3]
   136c0:	ldr	r9, [r4, #4]
   136c4:	add	r5, r6, r5
   136c8:	mov	r0, r5
   136cc:	ldrb	r1, [r2]
   136d0:	str	r5, [r4, #28]
   136d4:	mov	r2, r9
   136d8:	bl	113c0 <memset@plt>
   136dc:	ldr	r1, [r4, #20]
   136e0:	cmp	r1, #0
   136e4:	beq	136f4 <__assert_fail@plt+0x2214>
   136e8:	add	r0, r5, r9
   136ec:	ldr	r2, [r4, #24]
   136f0:	bl	111c8 <memcpy@plt>
   136f4:	ldr	r3, [r4, #8]
   136f8:	mov	r2, #0
   136fc:	mov	r0, r7
   13700:	strb	r2, [r6, r3]
   13704:	bl	14e68 <__assert_fail@plt+0x3988>
   13708:	mov	r1, #4
   1370c:	ldr	r0, [r4, #4]
   13710:	bl	19b58 <__assert_fail@plt+0x8678>
   13714:	ldr	r7, [r4, #36]	; 0x24
   13718:	mov	r6, r0
   1371c:	str	r0, [r4, #32]
   13720:	cmp	r7, #0
   13724:	beq	135d0 <__assert_fail@plt+0x20f0>
   13728:	cmp	r8, #0
   1372c:	bne	137b4 <__assert_fail@plt+0x22d4>
   13730:	mov	r0, r7
   13734:	bl	11354 <strlen@plt>
   13738:	ldr	r8, [r4, #4]
   1373c:	mov	r5, r0
   13740:	mov	r2, r0
   13744:	mov	r1, r7
   13748:	ldr	r0, [r4, #28]
   1374c:	sub	r3, r8, r5
   13750:	add	r0, r0, r3
   13754:	bl	111c8 <memcpy@plt>
   13758:	cmp	r5, #0
   1375c:	add	r1, r6, r8, lsl #2
   13760:	beq	135d0 <__assert_fail@plt+0x20f0>
   13764:	add	r2, r7, r5
   13768:	ldrb	r3, [r2, #-1]!
   1376c:	sub	r3, r3, #48	; 0x30
   13770:	cmp	r7, r2
   13774:	str	r3, [r1, #-4]!
   13778:	bne	13768 <__assert_fail@plt+0x2288>
   1377c:	b	135d0 <__assert_fail@plt+0x20f0>
   13780:	bl	19ccc <__assert_fail@plt+0x87ec>
   13784:	str	r3, [lr]
   13788:	ldrb	r3, [ip]
   1378c:	strb	r3, [r9]
   13790:	mov	r2, #5
   13794:	movw	r1, #46632	; 0xb628
   13798:	movt	r1, #1
   1379c:	mov	r0, #0
   137a0:	bl	1121c <dcgettext@plt>
   137a4:	mov	r2, r0
   137a8:	mov	r1, #0
   137ac:	mov	r0, #1
   137b0:	bl	112d0 <error@plt>
   137b4:	movw	r3, #46212	; 0xb484
   137b8:	movt	r3, #1
   137bc:	movw	r1, #46612	; 0xb614
   137c0:	movt	r1, #1
   137c4:	movw	r0, #46624	; 0xb620
   137c8:	movt	r0, #1
   137cc:	movw	r2, #409	; 0x199
   137d0:	bl	114e0 <__assert_fail@plt>
   137d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   137d8:	strd	r6, [sp, #8]
   137dc:	movw	r6, #54128	; 0xd370
   137e0:	movt	r6, #2
   137e4:	ldr	r3, [r6, #40]	; 0x28
   137e8:	mov	r7, r0
   137ec:	strd	r8, [sp, #16]
   137f0:	str	lr, [sp, #24]
   137f4:	sub	sp, sp, #116	; 0x74
   137f8:	cmp	r3, #0
   137fc:	beq	139a8 <__assert_fail@plt+0x24c8>
   13800:	movw	r0, #46772	; 0xb6b4
   13804:	movt	r0, #1
   13808:	bl	112e8 <getenv@plt>
   1380c:	cmp	r0, #0
   13810:	movw	r3, #46664	; 0xb648
   13814:	movt	r3, #1
   13818:	movne	r5, r0
   1381c:	mov	r2, #1
   13820:	movw	r0, #46780	; 0xb6bc
   13824:	movt	r0, #1
   13828:	mov	r1, r7
   1382c:	moveq	r5, r3
   13830:	bl	11378 <setenv@plt>
   13834:	subs	r4, r0, #0
   13838:	bne	13ba8 <__assert_fail@plt+0x26c8>
   1383c:	ldrb	r3, [r6, #44]	; 0x2c
   13840:	cmp	r3, #0
   13844:	bne	13a78 <__assert_fail@plt+0x2598>
   13848:	add	r0, sp, #8
   1384c:	bl	11414 <pipe@plt>
   13850:	subs	r7, r0, #0
   13854:	bne	13b98 <__assert_fail@plt+0x26b8>
   13858:	bl	11450 <fork@plt>
   1385c:	subs	r4, r0, #0
   13860:	beq	138c4 <__assert_fail@plt+0x23e4>
   13864:	cmn	r4, #1
   13868:	beq	13bb8 <__assert_fail@plt+0x26d8>
   1386c:	ldr	r0, [sp, #8]
   13870:	bl	114c8 <close@plt>
   13874:	cmp	r0, #0
   13878:	bne	13bc8 <__assert_fail@plt+0x26e8>
   1387c:	ldr	r3, [r6, #152]	; 0x98
   13880:	str	r4, [r6, #288]	; 0x120
   13884:	ldr	r0, [r6, #156]	; 0x9c
   13888:	ldr	r2, [r6, #292]	; 0x124
   1388c:	cmp	r3, r2
   13890:	beq	13b30 <__assert_fail@plt+0x2650>
   13894:	ldr	r2, [sp, #12]
   13898:	add	r1, r3, #1
   1389c:	str	r1, [r6, #152]	; 0x98
   138a0:	str	r2, [r0, r3, lsl #2]
   138a4:	ldr	r8, [sp, #12]
   138a8:	mov	r0, r8
   138ac:	add	sp, sp, #116	; 0x74
   138b0:	ldrd	r4, [sp]
   138b4:	ldrd	r6, [sp, #8]
   138b8:	ldrd	r8, [sp, #16]
   138bc:	add	sp, sp, #24
   138c0:	pop	{pc}		; (ldr pc, [sp], #4)
   138c4:	ldr	r3, [r6, #152]	; 0x98
   138c8:	cmp	r3, #0
   138cc:	beq	138f4 <__assert_fail@plt+0x2414>
   138d0:	ldr	r3, [r6, #156]	; 0x9c
   138d4:	ldr	r0, [r3, r4, lsl #2]
   138d8:	bl	114c8 <close@plt>
   138dc:	cmp	r0, #0
   138e0:	bne	13b48 <__assert_fail@plt+0x2668>
   138e4:	ldr	r3, [r6, #152]	; 0x98
   138e8:	add	r4, r4, #1
   138ec:	cmp	r3, r4
   138f0:	bhi	138d0 <__assert_fail@plt+0x23f0>
   138f4:	ldr	r0, [sp, #12]
   138f8:	bl	114c8 <close@plt>
   138fc:	mov	r4, r0
   13900:	bl	1139c <__errno_location@plt>
   13904:	cmp	r4, #0
   13908:	mov	r7, r0
   1390c:	bne	13c20 <__assert_fail@plt+0x2740>
   13910:	ldr	r0, [sp, #8]
   13914:	cmp	r0, #0
   13918:	beq	1393c <__assert_fail@plt+0x245c>
   1391c:	mov	r1, r4
   13920:	bl	11228 <dup2@plt>
   13924:	subs	r8, r0, #0
   13928:	bne	13bd8 <__assert_fail@plt+0x26f8>
   1392c:	ldr	r0, [sp, #8]
   13930:	bl	114c8 <close@plt>
   13934:	cmp	r0, #0
   13938:	bne	13ac0 <__assert_fail@plt+0x25e0>
   1393c:	mov	r2, #0
   13940:	ldr	r1, [pc, #744]	; 13c30 <__assert_fail@plt+0x2750>
   13944:	mov	r0, #2
   13948:	bl	11198 <sigprocmask@plt>
   1394c:	mov	r0, r5
   13950:	mov	r8, #0
   13954:	bl	14ab0 <__assert_fail@plt+0x35d0>
   13958:	ldr	r4, [r6, #40]	; 0x28
   1395c:	mov	r1, r0
   13960:	movw	r2, #46956	; 0xb76c
   13964:	movt	r2, #1
   13968:	mov	r0, r5
   1396c:	str	r8, [sp]
   13970:	mov	r3, r4
   13974:	bl	1145c <execl@plt>
   13978:	ldr	r6, [r7]
   1397c:	mov	r2, #5
   13980:	mov	r0, r8
   13984:	movw	r1, #46960	; 0xb770
   13988:	movt	r1, #1
   1398c:	bl	1121c <dcgettext@plt>
   13990:	mov	r2, r0
   13994:	mov	r3, r5
   13998:	str	r4, [sp]
   1399c:	mov	r0, #1
   139a0:	mov	r1, r6
   139a4:	bl	112d0 <error@plt>
   139a8:	ldrb	r2, [r6, #44]	; 0x2c
   139ac:	cmp	r2, #0
   139b0:	bne	13ae8 <__assert_fail@plt+0x2608>
   139b4:	movw	r2, #438	; 0x1b6
   139b8:	mov	r1, #65	; 0x41
   139bc:	mov	r0, r7
   139c0:	bl	14d44 <__assert_fail@plt+0x3864>
   139c4:	subs	r8, r0, #0
   139c8:	blt	138a8 <__assert_fail@plt+0x23c8>
   139cc:	add	r2, sp, #8
   139d0:	mov	r1, r8
   139d4:	mov	r0, #3
   139d8:	bl	11264 <__fxstat64@plt>
   139dc:	subs	r9, r0, #0
   139e0:	bne	13bf0 <__assert_fail@plt+0x2710>
   139e4:	ldrd	r2, [sp, #104]	; 0x68
   139e8:	ldrd	r4, [r6, #144]	; 0x90
   139ec:	cmp	r5, r3
   139f0:	cmpeq	r4, r2
   139f4:	bne	13a0c <__assert_fail@plt+0x252c>
   139f8:	ldrd	r2, [sp, #8]
   139fc:	ldrd	r4, [r6, #48]	; 0x30
   13a00:	cmp	r5, r3
   13a04:	cmpeq	r4, r2
   13a08:	beq	13b64 <__assert_fail@plt+0x2684>
   13a0c:	mov	r2, #0
   13a10:	mov	r3, #0
   13a14:	mov	r0, r8
   13a18:	bl	111ec <ftruncate64@plt>
   13a1c:	cmp	r0, #0
   13a20:	beq	138a8 <__assert_fail@plt+0x23c8>
   13a24:	ldr	r3, [sp, #24]
   13a28:	and	r3, r3, #61440	; 0xf000
   13a2c:	cmp	r3, #32768	; 0x8000
   13a30:	bne	138a8 <__assert_fail@plt+0x23c8>
   13a34:	bl	1139c <__errno_location@plt>
   13a38:	mov	r2, #5
   13a3c:	movw	r1, #46748	; 0xb69c
   13a40:	movt	r1, #1
   13a44:	ldr	r4, [r0]
   13a48:	mov	r0, #0
   13a4c:	bl	1121c <dcgettext@plt>
   13a50:	mov	r5, r0
   13a54:	mov	r2, r7
   13a58:	mov	r1, #3
   13a5c:	mov	r0, #0
   13a60:	bl	1825c <__assert_fail@plt+0x6d7c>
   13a64:	mov	r3, r0
   13a68:	mov	r2, r5
   13a6c:	mov	r1, r4
   13a70:	mov	r0, #1
   13a74:	bl	112d0 <error@plt>
   13a78:	movw	r3, #54116	; 0xd364
   13a7c:	movt	r3, #2
   13a80:	ldr	r8, [r3]
   13a84:	mov	r2, #5
   13a88:	movw	r1, #46828	; 0xb6ec
   13a8c:	movt	r1, #1
   13a90:	bl	1121c <dcgettext@plt>
   13a94:	mov	r9, r0
   13a98:	mov	r2, r7
   13a9c:	mov	r0, r4
   13aa0:	mov	r1, #3
   13aa4:	bl	1825c <__assert_fail@plt+0x6d7c>
   13aa8:	mov	r3, r0
   13aac:	mov	r2, r9
   13ab0:	mov	r0, r8
   13ab4:	mov	r1, #1
   13ab8:	bl	113f0 <__fprintf_chk@plt>
   13abc:	b	13848 <__assert_fail@plt+0x2368>
   13ac0:	ldr	r4, [r7]
   13ac4:	movw	r1, #46936	; 0xb758
   13ac8:	movt	r1, #1
   13acc:	mov	r0, r8
   13ad0:	mov	r2, #5
   13ad4:	bl	1121c <dcgettext@plt>
   13ad8:	mov	r2, r0
   13adc:	mov	r1, r4
   13ae0:	mov	r0, #1
   13ae4:	bl	112d0 <error@plt>
   13ae8:	movw	r2, #54116	; 0xd364
   13aec:	movt	r2, #2
   13af0:	ldr	r4, [r2]
   13af4:	mov	r0, r3
   13af8:	mov	r2, #5
   13afc:	movw	r1, #46672	; 0xb650
   13b00:	movt	r1, #1
   13b04:	bl	1121c <dcgettext@plt>
   13b08:	mov	r5, r0
   13b0c:	mov	r1, r7
   13b10:	mov	r0, #4
   13b14:	bl	176dc <__assert_fail@plt+0x61fc>
   13b18:	mov	r3, r0
   13b1c:	mov	r2, r5
   13b20:	mov	r0, r4
   13b24:	mov	r1, #1
   13b28:	bl	113f0 <__fprintf_chk@plt>
   13b2c:	b	139b4 <__assert_fail@plt+0x24d4>
   13b30:	mov	r2, #4
   13b34:	ldr	r1, [pc, #248]	; 13c34 <__assert_fail@plt+0x2754>
   13b38:	bl	19968 <__assert_fail@plt+0x8488>
   13b3c:	str	r0, [r6, #156]	; 0x9c
   13b40:	ldr	r3, [r6, #152]	; 0x98
   13b44:	b	13894 <__assert_fail@plt+0x23b4>
   13b48:	bl	1139c <__errno_location@plt>
   13b4c:	movw	r1, #46876	; 0xb71c
   13b50:	movt	r1, #1
   13b54:	ldr	r4, [r0]
   13b58:	mov	r2, #5
   13b5c:	mov	r0, #0
   13b60:	b	13ad4 <__assert_fail@plt+0x25f4>
   13b64:	mov	r2, #5
   13b68:	movw	r1, #46712	; 0xb678
   13b6c:	movt	r1, #1
   13b70:	bl	1121c <dcgettext@plt>
   13b74:	mov	r4, r0
   13b78:	mov	r1, r7
   13b7c:	mov	r0, #4
   13b80:	bl	176dc <__assert_fail@plt+0x61fc>
   13b84:	mov	r3, r0
   13b88:	mov	r2, r4
   13b8c:	mov	r1, r9
   13b90:	mov	r0, #1
   13b94:	bl	112d0 <error@plt>
   13b98:	bl	1139c <__errno_location@plt>
   13b9c:	movw	r1, #46852	; 0xb704
   13ba0:	movt	r1, #1
   13ba4:	b	13b54 <__assert_fail@plt+0x2674>
   13ba8:	bl	1139c <__errno_location@plt>
   13bac:	movw	r1, #46788	; 0xb6c4
   13bb0:	movt	r1, #1
   13bb4:	b	13b54 <__assert_fail@plt+0x2674>
   13bb8:	bl	1139c <__errno_location@plt>
   13bbc:	movw	r1, #46996	; 0xb794
   13bc0:	movt	r1, #1
   13bc4:	b	13b54 <__assert_fail@plt+0x2674>
   13bc8:	bl	1139c <__errno_location@plt>
   13bcc:	movw	r1, #47020	; 0xb7ac
   13bd0:	movt	r1, #1
   13bd4:	b	13b54 <__assert_fail@plt+0x2674>
   13bd8:	mov	r0, r4
   13bdc:	movw	r1, #46916	; 0xb744
   13be0:	movt	r1, #1
   13be4:	mov	r2, #5
   13be8:	ldr	r4, [r7]
   13bec:	b	13ad4 <__assert_fail@plt+0x25f4>
   13bf0:	bl	1139c <__errno_location@plt>
   13bf4:	mov	r2, #5
   13bf8:	movw	r1, #46692	; 0xb664
   13bfc:	movt	r1, #1
   13c00:	ldr	r4, [r0]
   13c04:	mov	r0, #0
   13c08:	bl	1121c <dcgettext@plt>
   13c0c:	mov	r5, r0
   13c10:	mov	r1, r7
   13c14:	mov	r0, #4
   13c18:	bl	176dc <__assert_fail@plt+0x61fc>
   13c1c:	b	13a64 <__assert_fail@plt+0x2584>
   13c20:	movw	r1, #46896	; 0xb730
   13c24:	movt	r1, #1
   13c28:	ldr	r4, [r0]
   13c2c:	b	13b58 <__assert_fail@plt+0x2678>
   13c30:	andeq	sp, r2, r0, lsl r4
   13c34:	muleq	r2, r4, r4
   13c38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c3c:	strd	r6, [sp, #8]
   13c40:	strd	r8, [sp, #16]
   13c44:	add	r8, r0, r1, lsl #4
   13c48:	strd	sl, [sp, #24]
   13c4c:	ldr	r3, [r8, #4]
   13c50:	str	lr, [sp, #32]
   13c54:	sub	sp, sp, #4
   13c58:	cmp	r3, #0
   13c5c:	movge	r9, #0
   13c60:	blt	13c84 <__assert_fail@plt+0x27a4>
   13c64:	mov	r0, r9
   13c68:	add	sp, sp, #4
   13c6c:	ldrd	r4, [sp]
   13c70:	ldrd	r6, [sp, #8]
   13c74:	ldrd	r8, [sp, #16]
   13c78:	ldrd	sl, [sp, #24]
   13c7c:	add	sp, sp, #32
   13c80:	pop	{pc}		; (ldr pc, [sp], #4)
   13c84:	cmp	r1, #0
   13c88:	mov	r6, r0
   13c8c:	ldr	r0, [r8]
   13c90:	subeq	r4, r2, #1
   13c94:	subne	r4, r1, #1
   13c98:	cmn	r3, #1
   13c9c:	mov	fp, r2
   13ca0:	mov	r7, r1
   13ca4:	mov	r9, #0
   13ca8:	beq	13d30 <__assert_fail@plt+0x2850>
   13cac:	movw	r1, #3073	; 0xc01
   13cb0:	bl	14d44 <__assert_fail@plt+0x3864>
   13cb4:	mov	r3, r0
   13cb8:	cmp	r3, #0
   13cbc:	bge	13d40 <__assert_fail@plt+0x2860>
   13cc0:	bl	1139c <__errno_location@plt>
   13cc4:	ldr	r9, [r0]
   13cc8:	mov	sl, r0
   13ccc:	sub	r3, r9, #23
   13cd0:	cmp	r3, #1
   13cd4:	bls	13cf0 <__assert_fail@plt+0x2810>
   13cd8:	b	13da8 <__assert_fail@plt+0x28c8>
   13cdc:	cmp	r4, #0
   13ce0:	subne	r4, r4, #1
   13ce4:	subeq	r4, fp, #1
   13ce8:	cmp	r4, r7
   13cec:	beq	13d80 <__assert_fail@plt+0x28a0>
   13cf0:	add	r5, r6, r4, lsl #4
   13cf4:	ldr	r3, [r5, #4]
   13cf8:	cmp	r3, #0
   13cfc:	blt	13cdc <__assert_fail@plt+0x27fc>
   13d00:	ldr	r0, [r5, #8]
   13d04:	bl	14c90 <__assert_fail@plt+0x37b0>
   13d08:	cmp	r0, #0
   13d0c:	bne	13db8 <__assert_fail@plt+0x28d8>
   13d10:	mvn	r3, #1
   13d14:	mov	r9, #1
   13d18:	str	r3, [r5, #4]
   13d1c:	ldr	r3, [r8, #4]
   13d20:	str	r0, [r5, #8]
   13d24:	ldr	r0, [r8]
   13d28:	cmn	r3, #1
   13d2c:	bne	13cac <__assert_fail@plt+0x27cc>
   13d30:	bl	137d4 <__assert_fail@plt+0x22f4>
   13d34:	mov	r3, r0
   13d38:	cmp	r3, #0
   13d3c:	blt	13cc0 <__assert_fail@plt+0x27e0>
   13d40:	mov	r0, r3
   13d44:	movw	r1, #47048	; 0xb7c8
   13d48:	movt	r1, #1
   13d4c:	str	r3, [r8, #4]
   13d50:	bl	11138 <fdopen@plt>
   13d54:	cmp	r0, #0
   13d58:	mov	r4, r0
   13d5c:	str	r0, [r8, #8]
   13d60:	beq	13de4 <__assert_fail@plt+0x2904>
   13d64:	movw	r3, #54128	; 0xd370
   13d68:	movt	r3, #2
   13d6c:	ldr	r2, [r3, #288]	; 0x120
   13d70:	mov	r1, #0
   13d74:	str	r1, [r3, #288]	; 0x120
   13d78:	str	r2, [r8, #12]
   13d7c:	b	13c64 <__assert_fail@plt+0x2784>
   13d80:	ldr	r2, [r6, r4, lsl #4]
   13d84:	mov	r1, #3
   13d88:	mov	r0, #0
   13d8c:	bl	1825c <__assert_fail@plt+0x6d7c>
   13d90:	mov	r3, r0
   13d94:	movw	r2, #47164	; 0xb83c
   13d98:	movt	r2, #1
   13d9c:	mov	r1, r9
   13da0:	mov	r0, #1
   13da4:	bl	112d0 <error@plt>
   13da8:	mov	r1, #3
   13dac:	mov	r0, #0
   13db0:	ldr	r2, [r6, r7, lsl #4]
   13db4:	b	13d8c <__assert_fail@plt+0x28ac>
   13db8:	ldr	r4, [sl]
   13dbc:	mov	r1, #3
   13dc0:	mov	r0, #0
   13dc4:	ldr	r2, [r5]
   13dc8:	bl	1825c <__assert_fail@plt+0x6d7c>
   13dcc:	mov	r3, r0
   13dd0:	movw	r2, #47164	; 0xb83c
   13dd4:	movt	r2, #1
   13dd8:	mov	r1, r4
   13ddc:	mov	r0, #1
   13de0:	bl	112d0 <error@plt>
   13de4:	bl	1139c <__errno_location@plt>
   13de8:	ldr	r5, [r0]
   13dec:	mov	r1, #3
   13df0:	mov	r0, r4
   13df4:	ldr	r2, [r6, r7, lsl #4]
   13df8:	bl	1825c <__assert_fail@plt+0x6d7c>
   13dfc:	mov	r3, r0
   13e00:	movw	r2, #47164	; 0xb83c
   13e04:	movt	r2, #1
   13e08:	mov	r1, r5
   13e0c:	mov	r0, #1
   13e10:	bl	112d0 <error@plt>
   13e14:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e18:	mov	r4, r1
   13e1c:	mov	r5, r3
   13e20:	strd	r6, [sp, #8]
   13e24:	subs	r6, r0, #0
   13e28:	mov	r7, r2
   13e2c:	str	lr, [sp, #16]
   13e30:	sub	sp, sp, #36	; 0x24
   13e34:	beq	13f0c <__assert_fail@plt+0x2a2c>
   13e38:	bl	14c90 <__assert_fail@plt+0x37b0>
   13e3c:	cmp	r0, #0
   13e40:	beq	13e98 <__assert_fail@plt+0x29b8>
   13e44:	bl	1139c <__errno_location@plt>
   13e48:	ldr	r6, [r0]
   13e4c:	movw	r3, #54128	; 0xd370
   13e50:	movt	r3, #2
   13e54:	ldr	r3, [r3, #40]	; 0x28
   13e58:	sub	r0, r6, #32
   13e5c:	clz	r0, r0
   13e60:	lsr	r0, r0, #5
   13e64:	cmp	r3, #0
   13e68:	moveq	r0, #0
   13e6c:	cmp	r0, #0
   13e70:	bne	13e98 <__assert_fail@plt+0x29b8>
   13e74:	mov	r2, r5
   13e78:	mov	r1, #3
   13e7c:	bl	1825c <__assert_fail@plt+0x6d7c>
   13e80:	mov	r3, r0
   13e84:	movw	r2, #47164	; 0xb83c
   13e88:	movt	r2, #1
   13e8c:	mov	r1, r6
   13e90:	mov	r0, #1
   13e94:	bl	112d0 <error@plt>
   13e98:	cmp	r4, #0
   13e9c:	blt	13ef0 <__assert_fail@plt+0x2a10>
   13ea0:	movw	r6, #54128	; 0xd370
   13ea4:	movt	r6, #2
   13ea8:	ldr	r1, [r6, #152]	; 0x98
   13eac:	cmp	r1, #0
   13eb0:	beq	13ef0 <__assert_fail@plt+0x2a10>
   13eb4:	ldr	r2, [r6, #156]	; 0x9c
   13eb8:	ldr	r3, [r2]
   13ebc:	cmp	r4, r3
   13ec0:	addne	r0, r2, #4
   13ec4:	movne	r3, #0
   13ec8:	bne	13ee4 <__assert_fail@plt+0x2a04>
   13ecc:	b	14000 <__assert_fail@plt+0x2b20>
   13ed0:	mov	ip, r0
   13ed4:	add	r0, r0, #4
   13ed8:	ldr	lr, [ip]
   13edc:	cmp	lr, r4
   13ee0:	beq	14004 <__assert_fail@plt+0x2b24>
   13ee4:	add	r3, r3, #1
   13ee8:	cmp	r3, r1
   13eec:	bne	13ed0 <__assert_fail@plt+0x29f0>
   13ef0:	cmp	r7, #0
   13ef4:	bgt	13f54 <__assert_fail@plt+0x2a74>
   13ef8:	add	sp, sp, #36	; 0x24
   13efc:	ldrd	r4, [sp]
   13f00:	ldrd	r6, [sp, #8]
   13f04:	add	sp, sp, #16
   13f08:	pop	{pc}		; (ldr pc, [sp], #4)
   13f0c:	cmp	r1, #0
   13f10:	blt	13ef0 <__assert_fail@plt+0x2a10>
   13f14:	mov	r0, r4
   13f18:	bl	114c8 <close@plt>
   13f1c:	cmp	r0, #0
   13f20:	bge	13ea0 <__assert_fail@plt+0x29c0>
   13f24:	bl	1139c <__errno_location@plt>
   13f28:	ldr	r4, [r0]
   13f2c:	mov	r2, r5
   13f30:	mov	r1, #3
   13f34:	mov	r0, r6
   13f38:	bl	1825c <__assert_fail@plt+0x6d7c>
   13f3c:	mov	r3, r0
   13f40:	movw	r2, #47164	; 0xb83c
   13f44:	movt	r2, #1
   13f48:	mov	r0, #1
   13f4c:	mov	r1, r4
   13f50:	bl	112d0 <error@plt>
   13f54:	mov	r4, #0
   13f58:	mov	r0, r7
   13f5c:	mov	r2, r4
   13f60:	add	r1, sp, #8
   13f64:	str	r4, [sp, #8]
   13f68:	bl	11294 <waitpid@plt>
   13f6c:	cmn	r0, #1
   13f70:	beq	14080 <__assert_fail@plt+0x2ba0>
   13f74:	ldr	r2, [sp, #8]
   13f78:	and	r4, r2, #127	; 0x7f
   13f7c:	add	r3, r4, #1
   13f80:	sbfx	r3, r3, #1, #7
   13f84:	cmp	r3, #0
   13f88:	ble	14018 <__assert_fail@plt+0x2b38>
   13f8c:	cmp	r4, #13
   13f90:	beq	13ef8 <__assert_fail@plt+0x2a18>
   13f94:	add	r6, sp, #12
   13f98:	mov	r0, r4
   13f9c:	mov	r1, r6
   13fa0:	bl	18e38 <__assert_fail@plt+0x7958>
   13fa4:	cmp	r0, #0
   13fa8:	bne	140b4 <__assert_fail@plt+0x2bd4>
   13fac:	mov	r2, #5
   13fb0:	movw	r1, #47084	; 0xb7ec
   13fb4:	movt	r1, #1
   13fb8:	mov	r0, #0
   13fbc:	bl	1121c <dcgettext@plt>
   13fc0:	mov	r7, r0
   13fc4:	mov	r2, r5
   13fc8:	mov	r1, #3
   13fcc:	mov	r0, #0
   13fd0:	bl	1825c <__assert_fail@plt+0x6d7c>
   13fd4:	movw	r3, #54128	; 0xd370
   13fd8:	movt	r3, #2
   13fdc:	str	r6, [sp]
   13fe0:	ldr	ip, [r3, #40]	; 0x28
   13fe4:	mov	r2, r7
   13fe8:	mov	r3, r0
   13fec:	mov	r1, #0
   13ff0:	add	r0, r4, #128	; 0x80
   13ff4:	str	ip, [sp, #4]
   13ff8:	bl	112d0 <error@plt>
   13ffc:	b	13ef8 <__assert_fail@plt+0x2a18>
   14000:	mov	ip, r2
   14004:	sub	r1, r1, #1
   14008:	ldr	r3, [r2, r1, lsl #2]
   1400c:	str	r1, [r6, #152]	; 0x98
   14010:	str	r3, [ip]
   14014:	b	13ef0 <__assert_fail@plt+0x2a10>
   14018:	cmp	r4, #0
   1401c:	bne	140d4 <__assert_fail@plt+0x2bf4>
   14020:	ubfx	r6, r2, #8, #8
   14024:	cmp	r6, #0
   14028:	beq	13ef8 <__assert_fail@plt+0x2a18>
   1402c:	mov	r2, #5
   14030:	mov	r0, r4
   14034:	movw	r1, #47128	; 0xb818
   14038:	movt	r1, #1
   1403c:	bl	1121c <dcgettext@plt>
   14040:	mov	r7, r0
   14044:	mov	r2, r5
   14048:	mov	r1, #3
   1404c:	mov	r0, r4
   14050:	bl	1825c <__assert_fail@plt+0x6d7c>
   14054:	movw	r3, #54128	; 0xd370
   14058:	movt	r3, #2
   1405c:	str	r6, [sp]
   14060:	ldr	ip, [r3, #40]	; 0x28
   14064:	mov	r2, r7
   14068:	mov	r3, r0
   1406c:	mov	r1, r4
   14070:	mov	r0, r6
   14074:	str	ip, [sp, #4]
   14078:	bl	112d0 <error@plt>
   1407c:	b	13ef8 <__assert_fail@plt+0x2a18>
   14080:	bl	1139c <__errno_location@plt>
   14084:	ldr	r6, [r0]
   14088:	cmp	r6, #10
   1408c:	beq	13f74 <__assert_fail@plt+0x2a94>
   14090:	mov	r2, #5
   14094:	mov	r0, r4
   14098:	movw	r1, #47052	; 0xb7cc
   1409c:	movt	r1, #1
   140a0:	bl	1121c <dcgettext@plt>
   140a4:	mov	r2, r0
   140a8:	mov	r1, r6
   140ac:	mov	r0, #1
   140b0:	bl	112d0 <error@plt>
   140b4:	movw	r3, #47080	; 0xb7e8
   140b8:	movt	r3, #1
   140bc:	str	r4, [sp]
   140c0:	mov	r2, #19
   140c4:	mov	r1, #1
   140c8:	mov	r0, r6
   140cc:	bl	113a8 <__sprintf_chk@plt>
   140d0:	b	13fac <__assert_fail@plt+0x2acc>
   140d4:	mov	r2, #5
   140d8:	movw	r1, #47168	; 0xb840
   140dc:	movt	r1, #1
   140e0:	mov	r0, #0
   140e4:	bl	1121c <dcgettext@plt>
   140e8:	mov	r2, r0
   140ec:	mov	r1, #0
   140f0:	ldr	r3, [sp, #8]
   140f4:	mov	r0, #1
   140f8:	bl	112d0 <error@plt>
   140fc:	cmp	r0, #0
   14100:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14104:	mov	r5, r2
   14108:	strd	r6, [sp, #8]
   1410c:	mov	r7, r1
   14110:	str	r8, [sp, #16]
   14114:	str	lr, [sp, #20]
   14118:	beq	141f0 <__assert_fail@plt+0x2d10>
   1411c:	orrs	r3, r1, r2
   14120:	movw	r4, #54128	; 0xd370
   14124:	movt	r4, #2
   14128:	bne	14138 <__assert_fail@plt+0x2c58>
   1412c:	ldrb	r3, [r4, #296]	; 0x128
   14130:	cmp	r3, #0
   14134:	bne	141d8 <__assert_fail@plt+0x2cf8>
   14138:	movw	r6, #53588	; 0xd154
   1413c:	movt	r6, #2
   14140:	ldr	r3, [r4]
   14144:	mov	r0, #0
   14148:	ldr	r1, [r6, #8]
   1414c:	ldr	r2, [r4, #288]	; 0x120
   14150:	bl	13e14 <__assert_fail@plt+0x2934>
   14154:	bl	13500 <__assert_fail@plt+0x2020>
   14158:	ldr	r0, [r4]
   1415c:	bl	137d4 <__assert_fail@plt+0x22f4>
   14160:	cmp	r0, #0
   14164:	str	r0, [r6, #8]
   14168:	blt	14200 <__assert_fail@plt+0x2d20>
   1416c:	mov	r1, r7
   14170:	mov	r2, r5
   14174:	bl	14f98 <__assert_fail@plt+0x3ab8>
   14178:	cmp	r0, r5
   1417c:	beq	141d8 <__assert_fail@plt+0x2cf8>
   14180:	bl	1139c <__errno_location@plt>
   14184:	ldr	r4, [r0]
   14188:	movw	r3, #54128	; 0xd370
   1418c:	movt	r3, #2
   14190:	ldr	r2, [r3, #40]	; 0x28
   14194:	sub	r0, r4, #32
   14198:	clz	r0, r0
   1419c:	lsr	r0, r0, #5
   141a0:	cmp	r2, #0
   141a4:	moveq	r0, #0
   141a8:	cmp	r0, #0
   141ac:	movne	r0, #0
   141b0:	bne	141dc <__assert_fail@plt+0x2cfc>
   141b4:	mov	r1, #3
   141b8:	ldr	r2, [r3]
   141bc:	bl	1825c <__assert_fail@plt+0x6d7c>
   141c0:	mov	r3, r0
   141c4:	movw	r2, #47164	; 0xb83c
   141c8:	movt	r2, #1
   141cc:	mov	r1, r4
   141d0:	mov	r0, #1
   141d4:	bl	112d0 <error@plt>
   141d8:	mov	r0, #1
   141dc:	ldrd	r4, [sp]
   141e0:	ldrd	r6, [sp, #8]
   141e4:	ldr	r8, [sp, #16]
   141e8:	add	sp, sp, #20
   141ec:	pop	{pc}		; (ldr pc, [sp], #4)
   141f0:	movw	r3, #53588	; 0xd154
   141f4:	movt	r3, #2
   141f8:	ldr	r0, [r3, #8]
   141fc:	b	1416c <__assert_fail@plt+0x2c8c>
   14200:	bl	1139c <__errno_location@plt>
   14204:	ldr	r5, [r0]
   14208:	mov	r1, #3
   1420c:	mov	r0, #0
   14210:	ldr	r2, [r4]
   14214:	bl	1825c <__assert_fail@plt+0x6d7c>
   14218:	mov	r3, r0
   1421c:	movw	r2, #47164	; 0xb83c
   14220:	movt	r2, #1
   14224:	mov	r1, r5
   14228:	mov	r0, #1
   1422c:	bl	112d0 <error@plt>
   14230:	strd	r4, [sp, #-16]!
   14234:	movw	r4, #54128	; 0xd370
   14238:	movt	r4, #2
   1423c:	ldrb	r5, [r4, #296]	; 0x128
   14240:	str	r6, [sp, #8]
   14244:	str	lr, [sp, #12]
   14248:	cmp	r5, #0
   1424c:	bne	142e4 <__assert_fail@plt+0x2e04>
   14250:	movw	r6, #53588	; 0xd154
   14254:	movt	r6, #2
   14258:	ldr	r3, [r4]
   1425c:	mov	r0, r5
   14260:	ldr	r1, [r6, #8]
   14264:	ldr	r2, [r4, #288]	; 0x120
   14268:	bl	13e14 <__assert_fail@plt+0x2934>
   1426c:	bl	13500 <__assert_fail@plt+0x2020>
   14270:	ldr	r0, [r4]
   14274:	bl	137d4 <__assert_fail@plt+0x22f4>
   14278:	cmp	r0, #0
   1427c:	str	r0, [r6, #8]
   14280:	blt	142fc <__assert_fail@plt+0x2e1c>
   14284:	mov	r2, r5
   14288:	mov	r1, r5
   1428c:	bl	14f98 <__assert_fail@plt+0x3ab8>
   14290:	cmp	r0, #0
   14294:	beq	142e4 <__assert_fail@plt+0x2e04>
   14298:	bl	1139c <__errno_location@plt>
   1429c:	ldr	r6, [r0]
   142a0:	ldr	r3, [r4, #40]	; 0x28
   142a4:	sub	r0, r6, #32
   142a8:	clz	r0, r0
   142ac:	lsr	r0, r0, #5
   142b0:	cmp	r3, #0
   142b4:	moveq	r0, #0
   142b8:	cmp	r0, #0
   142bc:	bne	142e8 <__assert_fail@plt+0x2e08>
   142c0:	mov	r1, #3
   142c4:	ldr	r2, [r4]
   142c8:	bl	1825c <__assert_fail@plt+0x6d7c>
   142cc:	mov	r3, r0
   142d0:	movw	r2, #47164	; 0xb83c
   142d4:	movt	r2, #1
   142d8:	mov	r1, r6
   142dc:	mov	r0, #1
   142e0:	bl	112d0 <error@plt>
   142e4:	mov	r5, #1
   142e8:	mov	r0, r5
   142ec:	ldrd	r4, [sp]
   142f0:	ldr	r6, [sp, #8]
   142f4:	add	sp, sp, #12
   142f8:	pop	{pc}		; (ldr pc, [sp], #4)
   142fc:	bl	1139c <__errno_location@plt>
   14300:	ldr	r6, [r0]
   14304:	mov	r1, #3
   14308:	mov	r0, r5
   1430c:	ldr	r2, [r4]
   14310:	bl	1825c <__assert_fail@plt+0x6d7c>
   14314:	mov	r3, r0
   14318:	movw	r2, #47164	; 0xb83c
   1431c:	movt	r2, #1
   14320:	mov	r1, r6
   14324:	mov	r0, #1
   14328:	bl	112d0 <error@plt>
   1432c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14330:	mov	ip, r3
   14334:	mov	r5, #1
   14338:	strd	r6, [sp, #8]
   1433c:	mov	r4, r5
   14340:	strd	r8, [sp, #16]
   14344:	strd	sl, [sp, #24]
   14348:	mov	sl, #0
   1434c:	mov	fp, #0
   14350:	str	lr, [sp, #32]
   14354:	sub	sp, sp, #60	; 0x3c
   14358:	ldr	r6, [sp, #96]	; 0x60
   1435c:	strd	r0, [sp, #16]
   14360:	strd	r2, [sp, #40]	; 0x28
   14364:	mov	r3, r1
   14368:	mov	r2, r0
   1436c:	strd	r2, [sp, #8]
   14370:	movw	r3, #54128	; 0xd370
   14374:	movt	r3, #2
   14378:	cmn	r6, #1
   1437c:	str	r3, [sp, #28]
   14380:	movw	r3, #53588	; 0xd154
   14384:	movt	r3, #2
   14388:	str	r3, [sp, #32]
   1438c:	beq	14598 <__assert_fail@plt+0x30b8>
   14390:	cmp	r6, ip
   14394:	movcs	r3, #0
   14398:	movcc	r3, #1
   1439c:	str	r3, [sp, #36]	; 0x24
   143a0:	ldrd	r2, [sp, #8]
   143a4:	mov	r9, #0
   143a8:	mov	r8, r6
   143ac:	ldr	r7, [sp, #40]	; 0x28
   143b0:	cmp	r3, r9
   143b4:	cmpeq	r2, r6
   143b8:	bhi	14538 <__assert_fail@plt+0x3058>
   143bc:	ldrd	r2, [sp, #104]	; 0x68
   143c0:	orr	r3, r3, r2
   143c4:	str	r3, [sp, #24]
   143c8:	b	14428 <__assert_fail@plt+0x2f48>
   143cc:	ldrd	r2, [sp, #104]	; 0x68
   143d0:	adds	sl, sl, r4
   143d4:	adc	fp, fp, #0
   143d8:	cmp	fp, r3
   143dc:	ldr	r3, [sp, #24]
   143e0:	cmpeq	sl, r2
   143e4:	movcc	r4, #1
   143e8:	movcs	r4, #0
   143ec:	cmp	r3, #0
   143f0:	moveq	r4, #1
   143f4:	cmp	r4, #0
   143f8:	beq	14690 <__assert_fail@plt+0x31b0>
   143fc:	ldr	r8, [sp, #8]
   14400:	mov	r5, #0
   14404:	mov	r9, #0
   14408:	sub	r6, r6, r8
   1440c:	ldrd	r2, [sp, #16]
   14410:	add	r7, r7, r8
   14414:	mov	r8, r6
   14418:	cmp	r9, r3
   1441c:	strd	r2, [sp, #8]
   14420:	cmpeq	r6, r2
   14424:	bcc	14538 <__assert_fail@plt+0x3058>
   14428:	orr	r5, r5, r4
   1442c:	ands	r5, r5, #255	; 0xff
   14430:	beq	143cc <__assert_fail@plt+0x2eec>
   14434:	ldrd	r2, [sp, #8]
   14438:	cmp	r4, #0
   1443c:	mov	r8, r2
   14440:	beq	14500 <__assert_fail@plt+0x3020>
   14444:	mov	r3, r2
   14448:	orrs	r3, r7, r3
   1444c:	bne	14460 <__assert_fail@plt+0x2f80>
   14450:	ldr	r3, [sp, #28]
   14454:	ldrb	r3, [r3, #296]	; 0x128
   14458:	cmp	r3, #0
   1445c:	bne	1450c <__assert_fail@plt+0x302c>
   14460:	ldr	r9, [sp, #28]
   14464:	mov	r0, #0
   14468:	ldr	r1, [sp, #32]
   1446c:	ldr	r3, [r9]
   14470:	ldr	r1, [r1, #8]
   14474:	ldr	r2, [r9, #288]	; 0x120
   14478:	bl	13e14 <__assert_fail@plt+0x2934>
   1447c:	bl	13500 <__assert_fail@plt+0x2020>
   14480:	ldr	r0, [r9]
   14484:	bl	137d4 <__assert_fail@plt+0x22f4>
   14488:	ldr	r1, [sp, #32]
   1448c:	cmp	r0, #0
   14490:	str	r0, [r1, #8]
   14494:	blt	146ac <__assert_fail@plt+0x31cc>
   14498:	mov	r2, r8
   1449c:	mov	r1, r7
   144a0:	bl	14f98 <__assert_fail@plt+0x3ab8>
   144a4:	cmp	r8, r0
   144a8:	beq	1450c <__assert_fail@plt+0x302c>
   144ac:	bl	1139c <__errno_location@plt>
   144b0:	ldr	r3, [sp, #28]
   144b4:	ldr	r5, [r0]
   144b8:	ldr	r3, [r3, #40]	; 0x28
   144bc:	sub	r0, r5, #32
   144c0:	clz	r0, r0
   144c4:	lsr	r0, r0, #5
   144c8:	cmp	r3, #0
   144cc:	moveq	r0, #0
   144d0:	cmp	r0, #0
   144d4:	bne	143cc <__assert_fail@plt+0x2eec>
   144d8:	ldr	r3, [sp, #28]
   144dc:	mov	r1, #3
   144e0:	ldr	r2, [r3]
   144e4:	bl	1825c <__assert_fail@plt+0x6d7c>
   144e8:	mov	r3, r0
   144ec:	movw	r2, #47164	; 0xb83c
   144f0:	movt	r2, #1
   144f4:	mov	r1, r5
   144f8:	mov	r0, #1
   144fc:	bl	112d0 <error@plt>
   14500:	ldr	r3, [sp, #32]
   14504:	ldr	r0, [r3, #8]
   14508:	b	14498 <__assert_fail@plt+0x2fb8>
   1450c:	ldrd	r2, [sp, #104]	; 0x68
   14510:	adds	sl, sl, r4
   14514:	adc	fp, fp, #0
   14518:	cmp	r3, fp
   1451c:	ldr	r3, [sp, #24]
   14520:	cmpeq	r2, sl
   14524:	movhi	r4, #1
   14528:	movls	r4, #0
   1452c:	cmp	r3, #0
   14530:	moveq	r4, #1
   14534:	b	14404 <__assert_fail@plt+0x2f24>
   14538:	cmp	r6, #0
   1453c:	beq	1458c <__assert_fail@plt+0x30ac>
   14540:	orr	r5, r5, r4
   14544:	ands	r5, r5, #255	; 0xff
   14548:	moveq	r3, #1
   1454c:	bne	145e8 <__assert_fail@plt+0x3108>
   14550:	ldrd	r0, [sp, #104]	; 0x68
   14554:	adds	sl, sl, r4
   14558:	adc	fp, fp, #0
   1455c:	cmp	r1, fp
   14560:	cmpeq	r0, sl
   14564:	movne	r4, #0
   14568:	andeq	r4, r3, #1
   1456c:	cmp	r4, #0
   14570:	bne	14690 <__assert_fail@plt+0x31b0>
   14574:	ldr	r3, [sp, #8]
   14578:	subs	r3, r3, r8
   1457c:	str	r3, [sp, #8]
   14580:	ldr	r3, [sp, #12]
   14584:	sbc	r3, r3, r9
   14588:	str	r3, [sp, #12]
   1458c:	ldr	r3, [sp, #36]	; 0x24
   14590:	cmp	r3, #0
   14594:	bne	14640 <__assert_fail@plt+0x3160>
   14598:	cmp	r5, #0
   1459c:	beq	14608 <__assert_fail@plt+0x3128>
   145a0:	mov	r0, #0
   145a4:	ldr	r1, [sp, #40]	; 0x28
   145a8:	ldr	r2, [sp, #44]	; 0x2c
   145ac:	bl	18b9c <__assert_fail@plt+0x76bc>
   145b0:	cmn	r0, #1
   145b4:	mov	r6, r0
   145b8:	clzne	r3, r0
   145bc:	lsrne	r3, r3, #5
   145c0:	strne	r3, [sp, #36]	; 0x24
   145c4:	bne	143a0 <__assert_fail@plt+0x2ec0>
   145c8:	bl	1139c <__errno_location@plt>
   145cc:	movw	r3, #54128	; 0xd370
   145d0:	movt	r3, #2
   145d4:	ldr	r4, [r0]
   145d8:	mov	r1, #3
   145dc:	mov	r0, #0
   145e0:	ldr	r2, [r3, #300]	; 0x12c
   145e4:	b	146c4 <__assert_fail@plt+0x31e4>
   145e8:	mov	r2, r6
   145ec:	mov	r1, r7
   145f0:	mov	r0, r4
   145f4:	bl	140fc <__assert_fail@plt+0x2c1c>
   145f8:	eor	r3, r0, #1
   145fc:	mov	r5, r0
   14600:	uxtb	r3, r3
   14604:	b	14550 <__assert_fail@plt+0x3070>
   14608:	mov	r6, #1
   1460c:	mov	r0, r5
   14610:	ldrd	r2, [sp, #8]
   14614:	str	r6, [sp]
   14618:	bl	11288 <lseek64@plt>
   1461c:	mvn	r3, #0
   14620:	mvn	r2, #0
   14624:	cmp	r1, r3
   14628:	cmpeq	r0, r2
   1462c:	beq	145a0 <__assert_fail@plt+0x30c0>
   14630:	ldrd	r2, [sp, #16]
   14634:	mov	r4, r6
   14638:	strd	r2, [sp, #8]
   1463c:	b	145a0 <__assert_fail@plt+0x30c0>
   14640:	adds	r3, sl, #1
   14644:	str	r3, [sp, #48]	; 0x30
   14648:	adc	r3, fp, #0
   1464c:	str	r3, [sp, #52]	; 0x34
   14650:	ldrd	r2, [sp, #104]	; 0x68
   14654:	cmp	fp, r3
   14658:	cmpeq	sl, r2
   1465c:	bcs	14690 <__assert_fail@plt+0x31b0>
   14660:	mov	r6, r2
   14664:	mov	r7, r3
   14668:	ldrd	r4, [sp, #48]	; 0x30
   1466c:	b	14678 <__assert_fail@plt+0x3198>
   14670:	mov	r4, r2
   14674:	mov	r5, r3
   14678:	bl	14230 <__assert_fail@plt+0x2d50>
   1467c:	adds	r2, r4, #1
   14680:	adc	r3, r5, #0
   14684:	cmp	r7, r5
   14688:	cmpeq	r6, r4
   1468c:	bne	14670 <__assert_fail@plt+0x3190>
   14690:	add	sp, sp, #60	; 0x3c
   14694:	ldrd	r4, [sp]
   14698:	ldrd	r6, [sp, #8]
   1469c:	ldrd	r8, [sp, #16]
   146a0:	ldrd	sl, [sp, #24]
   146a4:	add	sp, sp, #32
   146a8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ac:	bl	1139c <__errno_location@plt>
   146b0:	ldr	r3, [sp, #28]
   146b4:	mov	r1, #3
   146b8:	ldr	r4, [r0]
   146bc:	mov	r0, #0
   146c0:	ldr	r2, [r3]
   146c4:	bl	1825c <__assert_fail@plt+0x6d7c>
   146c8:	mov	r3, r0
   146cc:	movw	r2, #47164	; 0xb83c
   146d0:	movt	r2, #1
   146d4:	mov	r1, r4
   146d8:	mov	r0, #1
   146dc:	bl	112d0 <error@plt>
   146e0:	subs	r4, r0, #0
   146e4:	str	r7, [sp, #-8]!
   146e8:	str	lr, [sp, #4]
   146ec:	sub	sp, sp, #56	; 0x38
   146f0:	beq	14738 <__assert_fail@plt+0x3258>
   146f4:	movw	r3, #54112	; 0xd360
   146f8:	movt	r3, #2
   146fc:	ldr	r5, [r3]
   14700:	mov	r2, #5
   14704:	movw	r1, #47212	; 0xb86c
   14708:	movt	r1, #1
   1470c:	mov	r0, #0
   14710:	bl	1121c <dcgettext@plt>
   14714:	movw	r3, #54572	; 0xd52c
   14718:	movt	r3, #2
   1471c:	mov	r2, r0
   14720:	mov	r1, #1
   14724:	ldr	r3, [r3]
   14728:	mov	r0, r5
   1472c:	bl	113f0 <__fprintf_chk@plt>
   14730:	mov	r0, r4
   14734:	bl	11348 <exit@plt>
   14738:	mov	r2, #5
   1473c:	movw	r1, #47252	; 0xb894
   14740:	movt	r1, #1
   14744:	movw	r5, #54116	; 0xd364
   14748:	movt	r5, #2
   1474c:	bl	1121c <dcgettext@plt>
   14750:	movw	r3, #54572	; 0xd52c
   14754:	movt	r3, #2
   14758:	mov	r1, r0
   1475c:	mov	r0, #1
   14760:	ldr	r2, [r3]
   14764:	bl	113cc <__printf_chk@plt>
   14768:	mov	r2, #5
   1476c:	movw	r1, #47292	; 0xb8bc
   14770:	movt	r1, #1
   14774:	mov	r0, r4
   14778:	bl	1121c <dcgettext@plt>
   1477c:	ldr	r1, [r5]
   14780:	bl	11150 <fputs_unlocked@plt>
   14784:	mov	r2, #5
   14788:	movw	r1, #47400	; 0xb928
   1478c:	movt	r1, #1
   14790:	mov	r0, r4
   14794:	bl	1121c <dcgettext@plt>
   14798:	ldr	r1, [r5]
   1479c:	bl	11150 <fputs_unlocked@plt>
   147a0:	mov	r2, #5
   147a4:	movw	r1, #47456	; 0xb960
   147a8:	movt	r1, #1
   147ac:	mov	r0, r4
   147b0:	bl	1121c <dcgettext@plt>
   147b4:	ldr	r1, [r5]
   147b8:	bl	11150 <fputs_unlocked@plt>
   147bc:	ldr	r6, [r5]
   147c0:	mov	r2, #5
   147c4:	movw	r1, #47532	; 0xb9ac
   147c8:	movt	r1, #1
   147cc:	mov	r0, r4
   147d0:	bl	1121c <dcgettext@plt>
   147d4:	mov	r2, r0
   147d8:	mov	r3, #2
   147dc:	mov	r1, #1
   147e0:	mov	r0, r6
   147e4:	bl	113f0 <__fprintf_chk@plt>
   147e8:	mov	r2, #5
   147ec:	movw	r1, #48624	; 0xbdf0
   147f0:	movt	r1, #1
   147f4:	mov	r0, r4
   147f8:	bl	1121c <dcgettext@plt>
   147fc:	ldr	r1, [r5]
   14800:	bl	11150 <fputs_unlocked@plt>
   14804:	mov	r2, #5
   14808:	movw	r1, #48740	; 0xbe64
   1480c:	movt	r1, #1
   14810:	mov	r0, r4
   14814:	bl	1121c <dcgettext@plt>
   14818:	ldr	r1, [r5]
   1481c:	bl	11150 <fputs_unlocked@plt>
   14820:	mov	r2, #5
   14824:	movw	r1, #48788	; 0xbe94
   14828:	movt	r1, #1
   1482c:	mov	r0, r4
   14830:	bl	1121c <dcgettext@plt>
   14834:	ldr	r1, [r5]
   14838:	bl	11150 <fputs_unlocked@plt>
   1483c:	mov	r2, #5
   14840:	movw	r1, #48844	; 0xbecc
   14844:	movt	r1, #1
   14848:	mov	r0, r4
   1484c:	bl	1121c <dcgettext@plt>
   14850:	ldr	r1, [r5]
   14854:	bl	11150 <fputs_unlocked@plt>
   14858:	mov	r2, #5
   1485c:	movw	r1, #49056	; 0xbfa0
   14860:	movt	r1, #1
   14864:	mov	r0, r4
   14868:	bl	1121c <dcgettext@plt>
   1486c:	ldr	r1, [r5]
   14870:	bl	11150 <fputs_unlocked@plt>
   14874:	movw	r0, #46212	; 0xb484
   14878:	movt	r0, #1
   1487c:	ldr	ip, [r0, #16]
   14880:	ldrd	r2, [r0, #24]
   14884:	ldr	r6, [r0, #20]
   14888:	subs	r1, ip, #0
   1488c:	str	ip, [sp]
   14890:	ldrd	r8, [r0, #32]
   14894:	strd	r2, [sp, #8]
   14898:	ldrd	r2, [r0, #40]	; 0x28
   1489c:	str	r6, [sp, #4]
   148a0:	ldrd	r6, [r0, #48]	; 0x30
   148a4:	strd	r8, [sp, #16]
   148a8:	ldrd	r8, [r0, #56]	; 0x38
   148ac:	strd	r2, [sp, #24]
   148b0:	ldrd	r2, [r0, #64]	; 0x40
   148b4:	strd	r6, [sp, #32]
   148b8:	movwne	r7, #47204	; 0xb864
   148bc:	mov	r6, sp
   148c0:	movtne	r7, #1
   148c4:	strd	r8, [sp, #40]	; 0x28
   148c8:	strd	r2, [sp, #48]	; 0x30
   148cc:	bne	149c4 <__assert_fail@plt+0x34e4>
   148d0:	ldr	r6, [r6, #4]
   148d4:	movw	r1, #49396	; 0xc0f4
   148d8:	movt	r1, #1
   148dc:	mov	r2, #5
   148e0:	cmp	r6, #0
   148e4:	beq	149d8 <__assert_fail@plt+0x34f8>
   148e8:	mov	r0, #0
   148ec:	bl	1121c <dcgettext@plt>
   148f0:	mov	r1, r0
   148f4:	movw	r3, #49420	; 0xc10c
   148f8:	movt	r3, #1
   148fc:	movw	r2, #49460	; 0xc134
   14900:	movt	r2, #1
   14904:	mov	r0, #1
   14908:	bl	113cc <__printf_chk@plt>
   1490c:	mov	r1, #0
   14910:	mov	r0, #5
   14914:	bl	11438 <setlocale@plt>
   14918:	cmp	r0, #0
   1491c:	movweq	r7, #47204	; 0xb864
   14920:	movteq	r7, #1
   14924:	beq	14948 <__assert_fail@plt+0x3468>
   14928:	movw	r1, #49476	; 0xc144
   1492c:	movt	r1, #1
   14930:	mov	r2, #3
   14934:	movw	r7, #47204	; 0xb864
   14938:	movt	r7, #1
   1493c:	bl	114b0 <strncmp@plt>
   14940:	cmp	r0, #0
   14944:	bne	14a90 <__assert_fail@plt+0x35b0>
   14948:	mov	r2, #5
   1494c:	movw	r1, #49552	; 0xc190
   14950:	movt	r1, #1
   14954:	mov	r0, #0
   14958:	bl	1121c <dcgettext@plt>
   1495c:	mov	r1, r0
   14960:	movw	r3, #47204	; 0xb864
   14964:	movt	r3, #1
   14968:	movw	r2, #49420	; 0xc10c
   1496c:	movt	r2, #1
   14970:	mov	r0, #1
   14974:	bl	113cc <__printf_chk@plt>
   14978:	mov	r2, #5
   1497c:	movw	r1, #49580	; 0xc1ac
   14980:	movt	r1, #1
   14984:	mov	r0, #0
   14988:	bl	1121c <dcgettext@plt>
   1498c:	movw	r2, #50580	; 0xc594
   14990:	movt	r2, #1
   14994:	cmp	r6, r7
   14998:	movw	r3, #48736	; 0xbe60
   1499c:	movt	r3, #1
   149a0:	mov	r1, r0
   149a4:	moveq	r3, r2
   149a8:	mov	r2, r6
   149ac:	mov	r0, #1
   149b0:	bl	113cc <__printf_chk@plt>
   149b4:	b	14730 <__assert_fail@plt+0x3250>
   149b8:	ldr	r1, [r6, #8]!
   149bc:	cmp	r1, #0
   149c0:	beq	148d0 <__assert_fail@plt+0x33f0>
   149c4:	mov	r0, r7
   149c8:	bl	11168 <strcmp@plt>
   149cc:	cmp	r0, #0
   149d0:	bne	149b8 <__assert_fail@plt+0x34d8>
   149d4:	b	148d0 <__assert_fail@plt+0x33f0>
   149d8:	mov	r0, r6
   149dc:	bl	1121c <dcgettext@plt>
   149e0:	mov	r1, r0
   149e4:	movw	r3, #49420	; 0xc10c
   149e8:	movt	r3, #1
   149ec:	movw	r2, #49460	; 0xc134
   149f0:	movt	r2, #1
   149f4:	mov	r0, #1
   149f8:	bl	113cc <__printf_chk@plt>
   149fc:	mov	r1, r6
   14a00:	mov	r0, #5
   14a04:	bl	11438 <setlocale@plt>
   14a08:	cmp	r0, #0
   14a0c:	beq	14a28 <__assert_fail@plt+0x3548>
   14a10:	movw	r1, #49476	; 0xc144
   14a14:	movt	r1, #1
   14a18:	mov	r2, #3
   14a1c:	bl	114b0 <strncmp@plt>
   14a20:	cmp	r0, #0
   14a24:	bne	14a84 <__assert_fail@plt+0x35a4>
   14a28:	mov	r2, #5
   14a2c:	movw	r1, #49552	; 0xc190
   14a30:	movt	r1, #1
   14a34:	mov	r0, #0
   14a38:	bl	1121c <dcgettext@plt>
   14a3c:	mov	r1, r0
   14a40:	movw	r3, #47204	; 0xb864
   14a44:	movt	r3, #1
   14a48:	movw	r2, #49420	; 0xc10c
   14a4c:	movt	r2, #1
   14a50:	mov	r0, #1
   14a54:	bl	113cc <__printf_chk@plt>
   14a58:	movw	r1, #49580	; 0xc1ac
   14a5c:	movt	r1, #1
   14a60:	mov	r2, #5
   14a64:	mov	r0, #0
   14a68:	bl	1121c <dcgettext@plt>
   14a6c:	movw	r6, #47204	; 0xb864
   14a70:	movt	r6, #1
   14a74:	movw	r3, #50580	; 0xc594
   14a78:	movt	r3, #1
   14a7c:	mov	r1, r0
   14a80:	b	149a8 <__assert_fail@plt+0x34c8>
   14a84:	movw	r7, #47204	; 0xb864
   14a88:	movt	r7, #1
   14a8c:	mov	r6, r7
   14a90:	mov	r2, #5
   14a94:	movw	r1, #49480	; 0xc148
   14a98:	movt	r1, #1
   14a9c:	mov	r0, #0
   14aa0:	bl	1121c <dcgettext@plt>
   14aa4:	ldr	r1, [r5]
   14aa8:	bl	11150 <fputs_unlocked@plt>
   14aac:	b	14948 <__assert_fail@plt+0x3468>
   14ab0:	ldrb	r3, [r0]
   14ab4:	cmp	r3, #47	; 0x2f
   14ab8:	bne	14ac8 <__assert_fail@plt+0x35e8>
   14abc:	ldrb	r3, [r0, #1]!
   14ac0:	cmp	r3, #47	; 0x2f
   14ac4:	beq	14abc <__assert_fail@plt+0x35dc>
   14ac8:	cmp	r3, #0
   14acc:	beq	14afc <__assert_fail@plt+0x361c>
   14ad0:	mov	r2, r0
   14ad4:	mov	r1, #0
   14ad8:	cmp	r3, #47	; 0x2f
   14adc:	moveq	r1, #1
   14ae0:	beq	14af0 <__assert_fail@plt+0x3610>
   14ae4:	cmp	r1, #0
   14ae8:	movne	r0, r2
   14aec:	movne	r1, #0
   14af0:	ldrb	r3, [r2, #1]!
   14af4:	cmp	r3, #0
   14af8:	bne	14ad8 <__assert_fail@plt+0x35f8>
   14afc:	bx	lr
   14b00:	str	r4, [sp, #-8]!
   14b04:	mov	r4, r0
   14b08:	str	lr, [sp, #4]
   14b0c:	bl	11354 <strlen@plt>
   14b10:	cmp	r0, #1
   14b14:	bls	14b28 <__assert_fail@plt+0x3648>
   14b18:	sub	r2, r0, #1
   14b1c:	ldrb	r1, [r4, r2]
   14b20:	cmp	r1, #47	; 0x2f
   14b24:	beq	14b34 <__assert_fail@plt+0x3654>
   14b28:	ldr	r4, [sp]
   14b2c:	add	sp, sp, #4
   14b30:	pop	{pc}		; (ldr pc, [sp], #4)
   14b34:	cmp	r2, #1
   14b38:	beq	14b4c <__assert_fail@plt+0x366c>
   14b3c:	add	r1, r4, r0
   14b40:	ldrb	r1, [r1, #-2]
   14b44:	cmp	r1, #47	; 0x2f
   14b48:	beq	14b5c <__assert_fail@plt+0x367c>
   14b4c:	ldr	r4, [sp]
   14b50:	add	sp, sp, #4
   14b54:	mov	r0, r2
   14b58:	pop	{pc}		; (ldr pc, [sp], #4)
   14b5c:	sub	r3, r0, #3
   14b60:	rsb	r0, r4, #1
   14b64:	add	r3, r4, r3
   14b68:	cmp	r3, r4
   14b6c:	add	r2, r0, r3
   14b70:	beq	14b4c <__assert_fail@plt+0x366c>
   14b74:	ldrb	r1, [r3], #-1
   14b78:	cmp	r1, #47	; 0x2f
   14b7c:	bne	14b4c <__assert_fail@plt+0x366c>
   14b80:	b	14b68 <__assert_fail@plt+0x3688>
   14b84:	movw	r3, #54564	; 0xd524
   14b88:	movt	r3, #2
   14b8c:	str	r0, [r3]
   14b90:	bx	lr
   14b94:	movw	r3, #54564	; 0xd524
   14b98:	movt	r3, #2
   14b9c:	strb	r0, [r3, #4]
   14ba0:	bx	lr
   14ba4:	movw	r3, #54116	; 0xd364
   14ba8:	movt	r3, #2
   14bac:	strd	r4, [sp, #-16]!
   14bb0:	ldr	r0, [r3]
   14bb4:	str	r6, [sp, #8]
   14bb8:	str	lr, [sp, #12]
   14bbc:	sub	sp, sp, #8
   14bc0:	bl	1adfc <__assert_fail@plt+0x991c>
   14bc4:	cmp	r0, #0
   14bc8:	beq	14bf4 <__assert_fail@plt+0x3714>
   14bcc:	movw	r4, #54564	; 0xd524
   14bd0:	movt	r4, #2
   14bd4:	ldrb	r6, [r4, #4]
   14bd8:	bl	1139c <__errno_location@plt>
   14bdc:	mov	r5, r0
   14be0:	cmp	r6, #0
   14be4:	beq	14c20 <__assert_fail@plt+0x3740>
   14be8:	ldr	r3, [r0]
   14bec:	cmp	r3, #32
   14bf0:	bne	14c20 <__assert_fail@plt+0x3740>
   14bf4:	movw	r3, #54112	; 0xd360
   14bf8:	movt	r3, #2
   14bfc:	ldr	r0, [r3]
   14c00:	bl	1adfc <__assert_fail@plt+0x991c>
   14c04:	cmp	r0, #0
   14c08:	bne	14c68 <__assert_fail@plt+0x3788>
   14c0c:	add	sp, sp, #8
   14c10:	ldrd	r4, [sp]
   14c14:	ldr	r6, [sp, #8]
   14c18:	add	sp, sp, #12
   14c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c20:	movw	r1, #50560	; 0xc580
   14c24:	movt	r1, #1
   14c28:	mov	r2, #5
   14c2c:	mov	r0, #0
   14c30:	bl	1121c <dcgettext@plt>
   14c34:	mov	r6, r0
   14c38:	ldr	r0, [r4]
   14c3c:	cmp	r0, #0
   14c40:	beq	14c78 <__assert_fail@plt+0x3798>
   14c44:	ldr	r4, [r5]
   14c48:	bl	17e8c <__assert_fail@plt+0x69ac>
   14c4c:	mov	r3, r0
   14c50:	movw	r2, #50296	; 0xc478
   14c54:	movt	r2, #1
   14c58:	mov	r0, #0
   14c5c:	str	r6, [sp]
   14c60:	mov	r1, r4
   14c64:	bl	112d0 <error@plt>
   14c68:	movw	r3, #53608	; 0xd168
   14c6c:	movt	r3, #2
   14c70:	ldr	r0, [r3]
   14c74:	bl	111bc <_exit@plt>
   14c78:	mov	r3, r6
   14c7c:	movw	r2, #47164	; 0xb83c
   14c80:	movt	r2, #1
   14c84:	ldr	r1, [r5]
   14c88:	bl	112d0 <error@plt>
   14c8c:	b	14c68 <__assert_fail@plt+0x3788>
   14c90:	strd	r4, [sp, #-12]!
   14c94:	mov	r4, r0
   14c98:	str	lr, [sp, #8]
   14c9c:	sub	sp, sp, #12
   14ca0:	bl	113e4 <fileno@plt>
   14ca4:	cmp	r0, #0
   14ca8:	mov	r0, r4
   14cac:	blt	14d30 <__assert_fail@plt+0x3850>
   14cb0:	bl	11318 <__freading@plt>
   14cb4:	cmp	r0, #0
   14cb8:	bne	14cfc <__assert_fail@plt+0x381c>
   14cbc:	mov	r0, r4
   14cc0:	bl	14e08 <__assert_fail@plt+0x3928>
   14cc4:	cmp	r0, #0
   14cc8:	beq	14d2c <__assert_fail@plt+0x384c>
   14ccc:	bl	1139c <__errno_location@plt>
   14cd0:	mov	r5, r0
   14cd4:	mov	r0, r4
   14cd8:	ldr	r4, [r5]
   14cdc:	bl	11408 <fclose@plt>
   14ce0:	cmp	r4, #0
   14ce4:	mvnne	r0, #0
   14ce8:	strne	r4, [r5]
   14cec:	add	sp, sp, #12
   14cf0:	ldrd	r4, [sp]
   14cf4:	add	sp, sp, #8
   14cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cfc:	mov	r0, r4
   14d00:	bl	113e4 <fileno@plt>
   14d04:	mov	r1, #1
   14d08:	mov	r2, #0
   14d0c:	mov	r3, #0
   14d10:	str	r1, [sp]
   14d14:	bl	11288 <lseek64@plt>
   14d18:	mvn	r3, #0
   14d1c:	mvn	r2, #0
   14d20:	cmp	r1, r3
   14d24:	cmpeq	r0, r2
   14d28:	bne	14cbc <__assert_fail@plt+0x37dc>
   14d2c:	mov	r0, r4
   14d30:	add	sp, sp, #12
   14d34:	ldrd	r4, [sp]
   14d38:	ldr	lr, [sp, #8]
   14d3c:	add	sp, sp, #12
   14d40:	b	11408 <fclose@plt>
   14d44:	push	{r1, r2, r3}
   14d48:	push	{lr}		; (str lr, [sp, #-4]!)
   14d4c:	sub	sp, sp, #8
   14d50:	ldr	r1, [sp, #12]
   14d54:	ands	r2, r1, #64	; 0x40
   14d58:	bne	14d74 <__assert_fail@plt+0x3894>
   14d5c:	bl	112dc <open64@plt>
   14d60:	bl	18f54 <__assert_fail@plt+0x7a74>
   14d64:	add	sp, sp, #8
   14d68:	pop	{lr}		; (ldr lr, [sp], #4)
   14d6c:	add	sp, sp, #12
   14d70:	bx	lr
   14d74:	add	r3, sp, #16
   14d78:	ldr	r2, [sp, #16]
   14d7c:	str	r3, [sp, #4]
   14d80:	b	14d5c <__assert_fail@plt+0x387c>
   14d84:	mov	ip, r1
   14d88:	mov	r1, r2
   14d8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d90:	mov	r2, r3
   14d94:	mov	r5, r0
   14d98:	strd	r6, [sp, #8]
   14d9c:	mov	r0, ip
   14da0:	str	r8, [sp, #16]
   14da4:	str	lr, [sp, #20]
   14da8:	bl	112dc <open64@plt>
   14dac:	sub	r3, r5, r0
   14db0:	mov	r4, r0
   14db4:	clz	r3, r3
   14db8:	lsr	r3, r3, #5
   14dbc:	orrs	r3, r3, r0, lsr #31
   14dc0:	beq	14ddc <__assert_fail@plt+0x38fc>
   14dc4:	mov	r0, r4
   14dc8:	ldrd	r4, [sp]
   14dcc:	ldrd	r6, [sp, #8]
   14dd0:	ldr	r8, [sp, #16]
   14dd4:	add	sp, sp, #20
   14dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ddc:	mov	r1, r5
   14de0:	bl	11228 <dup2@plt>
   14de4:	mov	r7, r0
   14de8:	bl	1139c <__errno_location@plt>
   14dec:	mov	r5, r0
   14df0:	mov	r0, r4
   14df4:	ldr	r6, [r5]
   14df8:	mov	r4, r7
   14dfc:	bl	114c8 <close@plt>
   14e00:	str	r6, [r5]
   14e04:	b	14dc4 <__assert_fail@plt+0x38e4>
   14e08:	str	r4, [sp, #-8]!
   14e0c:	subs	r4, r0, #0
   14e10:	str	lr, [sp, #4]
   14e14:	sub	sp, sp, #8
   14e18:	beq	14e34 <__assert_fail@plt+0x3954>
   14e1c:	bl	11318 <__freading@plt>
   14e20:	cmp	r0, #0
   14e24:	beq	14e34 <__assert_fail@plt+0x3954>
   14e28:	ldr	r3, [r4]
   14e2c:	tst	r3, #256	; 0x100
   14e30:	bne	14e4c <__assert_fail@plt+0x396c>
   14e34:	mov	r0, r4
   14e38:	add	sp, sp, #8
   14e3c:	ldr	r4, [sp]
   14e40:	ldr	lr, [sp, #4]
   14e44:	add	sp, sp, #8
   14e48:	b	1118c <fflush@plt>
   14e4c:	mov	r1, #1
   14e50:	mov	r2, #0
   14e54:	mov	r3, #0
   14e58:	mov	r0, r4
   14e5c:	str	r1, [sp]
   14e60:	bl	14ec8 <__assert_fail@plt+0x39e8>
   14e64:	b	14e34 <__assert_fail@plt+0x3954>
   14e68:	strd	r4, [sp, #-12]!
   14e6c:	mov	r5, r0
   14e70:	str	lr, [sp, #8]
   14e74:	sub	sp, sp, #12
   14e78:	bl	1139c <__errno_location@plt>
   14e7c:	mov	r4, r0
   14e80:	mov	r2, #0
   14e84:	ldr	r3, [r4]
   14e88:	mov	r0, r5
   14e8c:	str	r2, [r4]
   14e90:	str	r3, [sp]
   14e94:	str	r3, [sp, #4]
   14e98:	bl	111b0 <free@plt>
   14e9c:	ldr	r3, [r4]
   14ea0:	add	r2, sp, #8
   14ea4:	clz	r3, r3
   14ea8:	lsr	r3, r3, #5
   14eac:	add	r3, r2, r3, lsl #2
   14eb0:	ldr	r3, [r3, #-8]
   14eb4:	str	r3, [r4]
   14eb8:	add	sp, sp, #12
   14ebc:	ldrd	r4, [sp]
   14ec0:	add	sp, sp, #8
   14ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ecc:	mov	r4, r0
   14ed0:	ldr	ip, [r0, #4]
   14ed4:	strd	r6, [sp, #8]
   14ed8:	str	lr, [sp, #20]
   14edc:	ldr	lr, [r0, #8]
   14ee0:	str	r8, [sp, #16]
   14ee4:	sub	sp, sp, #8
   14ee8:	ldr	r5, [sp, #32]
   14eec:	cmp	lr, ip
   14ef0:	beq	14f18 <__assert_fail@plt+0x3a38>
   14ef4:	mov	r0, r4
   14ef8:	str	r5, [sp, #32]
   14efc:	add	sp, sp, #8
   14f00:	ldrd	r4, [sp]
   14f04:	ldrd	r6, [sp, #8]
   14f08:	ldr	r8, [sp, #16]
   14f0c:	ldr	lr, [sp, #20]
   14f10:	add	sp, sp, #24
   14f14:	b	11420 <fseeko64@plt>
   14f18:	ldr	ip, [r0, #16]
   14f1c:	ldr	lr, [r0, #20]
   14f20:	cmp	lr, ip
   14f24:	bne	14ef4 <__assert_fail@plt+0x3a14>
   14f28:	ldr	r8, [r0, #36]	; 0x24
   14f2c:	cmp	r8, #0
   14f30:	bne	14ef4 <__assert_fail@plt+0x3a14>
   14f34:	mov	r6, r2
   14f38:	mov	r7, r3
   14f3c:	bl	113e4 <fileno@plt>
   14f40:	mov	r2, r6
   14f44:	mov	r3, r7
   14f48:	str	r5, [sp]
   14f4c:	bl	11288 <lseek64@plt>
   14f50:	mvn	r3, #0
   14f54:	mvn	r2, #0
   14f58:	cmp	r1, r3
   14f5c:	cmpeq	r0, r2
   14f60:	beq	14f90 <__assert_fail@plt+0x3ab0>
   14f64:	ldr	r3, [r4]
   14f68:	strd	r0, [r4, #80]	; 0x50
   14f6c:	bic	r3, r3, #16
   14f70:	str	r3, [r4]
   14f74:	mov	r0, r8
   14f78:	add	sp, sp, #8
   14f7c:	ldrd	r4, [sp]
   14f80:	ldrd	r6, [sp, #8]
   14f84:	ldr	r8, [sp, #16]
   14f88:	add	sp, sp, #20
   14f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f90:	mvn	r8, #0
   14f94:	b	14f74 <__assert_fail@plt+0x3a94>
   14f98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f9c:	subs	r4, r2, #0
   14fa0:	strd	r6, [sp, #8]
   14fa4:	str	r8, [sp, #16]
   14fa8:	str	lr, [sp, #20]
   14fac:	beq	15018 <__assert_fail@plt+0x3b38>
   14fb0:	mov	r7, r0
   14fb4:	mov	r5, r1
   14fb8:	mov	r6, #0
   14fbc:	b	14fd4 <__assert_fail@plt+0x3af4>
   14fc0:	cmp	r0, #0
   14fc4:	beq	15008 <__assert_fail@plt+0x3b28>
   14fc8:	subs	r4, r4, r0
   14fcc:	add	r6, r6, r0
   14fd0:	beq	14ff0 <__assert_fail@plt+0x3b10>
   14fd4:	mov	r1, r5
   14fd8:	mov	r2, r4
   14fdc:	mov	r0, r7
   14fe0:	bl	18c20 <__assert_fail@plt+0x7740>
   14fe4:	cmn	r0, #1
   14fe8:	add	r5, r5, r0
   14fec:	bne	14fc0 <__assert_fail@plt+0x3ae0>
   14ff0:	mov	r0, r6
   14ff4:	ldrd	r4, [sp]
   14ff8:	ldrd	r6, [sp, #8]
   14ffc:	ldr	r8, [sp, #16]
   15000:	add	sp, sp, #20
   15004:	pop	{pc}		; (ldr pc, [sp], #4)
   15008:	bl	1139c <__errno_location@plt>
   1500c:	mov	r3, #28
   15010:	str	r3, [r0]
   15014:	b	14ff0 <__assert_fail@plt+0x3b10>
   15018:	mov	r6, r4
   1501c:	b	14ff0 <__assert_fail@plt+0x3b10>
   15020:	mov	r3, #0
   15024:	strd	r4, [sp, #-16]!
   15028:	mov	r4, r0
   1502c:	mov	r5, r1
   15030:	str	r6, [sp, #8]
   15034:	add	r6, r2, #20
   15038:	str	lr, [sp, #12]
   1503c:	strb	r3, [r2, #20]
   15040:	mov	r0, r4
   15044:	mov	r1, r5
   15048:	mov	r2, #10
   1504c:	mov	r3, #0
   15050:	bl	1b288 <__assert_fail@plt+0x9da8>
   15054:	add	ip, r2, #48	; 0x30
   15058:	mov	r0, r4
   1505c:	mov	r1, r5
   15060:	mov	r2, #10
   15064:	mov	r3, #0
   15068:	strb	ip, [r6, #-1]!
   1506c:	bl	1b288 <__assert_fail@plt+0x9da8>
   15070:	cmp	r5, #0
   15074:	mov	r5, r1
   15078:	cmpeq	r4, #9
   1507c:	mov	r4, r0
   15080:	bhi	15040 <__assert_fail@plt+0x3b60>
   15084:	mov	r0, r6
   15088:	ldrd	r4, [sp]
   1508c:	ldr	r6, [sp, #8]
   15090:	add	sp, sp, #12
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	strd	r4, [sp, #-16]!
   1509c:	subs	r4, r0, #0
   150a0:	str	r6, [sp, #8]
   150a4:	str	lr, [sp, #12]
   150a8:	beq	15140 <__assert_fail@plt+0x3c60>
   150ac:	mov	r1, #47	; 0x2f
   150b0:	bl	11468 <strrchr@plt>
   150b4:	subs	r5, r0, #0
   150b8:	beq	15118 <__assert_fail@plt+0x3c38>
   150bc:	add	r6, r5, #1
   150c0:	sub	r3, r6, r4
   150c4:	cmp	r3, #6
   150c8:	ble	15118 <__assert_fail@plt+0x3c38>
   150cc:	movw	r1, #50976	; 0xc720
   150d0:	movt	r1, #1
   150d4:	mov	r2, #7
   150d8:	sub	r0, r5, #6
   150dc:	bl	114b0 <strncmp@plt>
   150e0:	cmp	r0, #0
   150e4:	bne	15118 <__assert_fail@plt+0x3c38>
   150e8:	movw	r1, #50984	; 0xc728
   150ec:	movt	r1, #1
   150f0:	mov	r2, #3
   150f4:	mov	r0, r6
   150f8:	bl	114b0 <strncmp@plt>
   150fc:	cmp	r0, #0
   15100:	movne	r4, r6
   15104:	bne	15118 <__assert_fail@plt+0x3c38>
   15108:	add	r4, r5, #4
   1510c:	movw	r3, #54096	; 0xd350
   15110:	movt	r3, #2
   15114:	str	r4, [r3]
   15118:	movw	r2, #54572	; 0xd52c
   1511c:	movt	r2, #2
   15120:	ldr	r6, [sp, #8]
   15124:	movw	r3, #54100	; 0xd354
   15128:	movt	r3, #2
   1512c:	str	r4, [r2]
   15130:	str	r4, [r3]
   15134:	ldrd	r4, [sp]
   15138:	add	sp, sp, #12
   1513c:	pop	{pc}		; (ldr pc, [sp], #4)
   15140:	movw	r3, #54112	; 0xd360
   15144:	movt	r3, #2
   15148:	movw	r0, #50920	; 0xc6e8
   1514c:	movt	r0, #1
   15150:	ldr	r3, [r3]
   15154:	mov	r2, #55	; 0x37
   15158:	mov	r1, #1
   1515c:	bl	1127c <fwrite@plt>
   15160:	bl	114bc <abort@plt>
   15164:	mov	r2, #5
   15168:	strd	r4, [sp, #-16]!
   1516c:	mov	r5, r0
   15170:	str	r6, [sp, #8]
   15174:	mov	r6, r1
   15178:	mov	r1, r0
   1517c:	mov	r0, #0
   15180:	str	lr, [sp, #12]
   15184:	bl	1121c <dcgettext@plt>
   15188:	cmp	r5, r0
   1518c:	mov	r4, r0
   15190:	beq	151a8 <__assert_fail@plt+0x3cc8>
   15194:	mov	r0, r4
   15198:	ldrd	r4, [sp]
   1519c:	ldr	r6, [sp, #8]
   151a0:	add	sp, sp, #12
   151a4:	pop	{pc}		; (ldr pc, [sp], #4)
   151a8:	bl	1ae84 <__assert_fail@plt+0x99a4>
   151ac:	ldrb	r3, [r0]
   151b0:	bic	r3, r3, #32
   151b4:	cmp	r3, #85	; 0x55
   151b8:	bne	15220 <__assert_fail@plt+0x3d40>
   151bc:	ldrb	r3, [r0, #1]
   151c0:	bic	r3, r3, #32
   151c4:	cmp	r3, #84	; 0x54
   151c8:	bne	152a0 <__assert_fail@plt+0x3dc0>
   151cc:	ldrb	r3, [r0, #2]
   151d0:	bic	r3, r3, #32
   151d4:	cmp	r3, #70	; 0x46
   151d8:	bne	152a0 <__assert_fail@plt+0x3dc0>
   151dc:	ldrb	r3, [r0, #3]
   151e0:	cmp	r3, #45	; 0x2d
   151e4:	bne	152a0 <__assert_fail@plt+0x3dc0>
   151e8:	ldrb	r3, [r0, #4]
   151ec:	cmp	r3, #56	; 0x38
   151f0:	bne	152a0 <__assert_fail@plt+0x3dc0>
   151f4:	ldrb	r3, [r0, #5]
   151f8:	cmp	r3, #0
   151fc:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15200:	ldrb	r2, [r4]
   15204:	movw	r3, #51072	; 0xc780
   15208:	movt	r3, #1
   1520c:	movw	r4, #51084	; 0xc78c
   15210:	movt	r4, #1
   15214:	cmp	r2, #96	; 0x60
   15218:	movne	r4, r3
   1521c:	b	15194 <__assert_fail@plt+0x3cb4>
   15220:	cmp	r3, #71	; 0x47
   15224:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15228:	ldrb	r3, [r0, #1]
   1522c:	bic	r3, r3, #32
   15230:	cmp	r3, #66	; 0x42
   15234:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15238:	ldrb	r3, [r0, #2]
   1523c:	cmp	r3, #49	; 0x31
   15240:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15244:	ldrb	r3, [r0, #3]
   15248:	cmp	r3, #56	; 0x38
   1524c:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15250:	ldrb	r3, [r0, #4]
   15254:	cmp	r3, #48	; 0x30
   15258:	bne	152a0 <__assert_fail@plt+0x3dc0>
   1525c:	ldrb	r3, [r0, #5]
   15260:	cmp	r3, #51	; 0x33
   15264:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15268:	ldrb	r3, [r0, #6]
   1526c:	cmp	r3, #48	; 0x30
   15270:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15274:	ldrb	r3, [r0, #7]
   15278:	cmp	r3, #0
   1527c:	bne	152a0 <__assert_fail@plt+0x3dc0>
   15280:	ldrb	r2, [r4]
   15284:	movw	r3, #51076	; 0xc784
   15288:	movt	r3, #1
   1528c:	movw	r4, #51080	; 0xc788
   15290:	movt	r4, #1
   15294:	cmp	r2, #96	; 0x60
   15298:	movne	r4, r3
   1529c:	b	15194 <__assert_fail@plt+0x3cb4>
   152a0:	movw	r3, #51088	; 0xc790
   152a4:	movt	r3, #1
   152a8:	cmp	r6, #9
   152ac:	movw	r4, #46992	; 0xb790
   152b0:	movt	r4, #1
   152b4:	movne	r4, r3
   152b8:	b	15194 <__assert_fail@plt+0x3cb4>
   152bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152c0:	strd	r6, [sp, #8]
   152c4:	strd	r8, [sp, #16]
   152c8:	mov	r8, r3
   152cc:	strd	sl, [sp, #24]
   152d0:	mov	fp, r0
   152d4:	mov	sl, r1
   152d8:	str	lr, [sp, #32]
   152dc:	sub	sp, sp, #140	; 0x8c
   152e0:	ldr	r3, [sp, #180]	; 0xb4
   152e4:	str	r2, [sp, #28]
   152e8:	and	r4, r3, #2
   152ec:	ubfx	r3, r3, #1, #1
   152f0:	str	r3, [sp, #44]	; 0x2c
   152f4:	bl	112a0 <__ctype_get_mb_cur_max@plt>
   152f8:	ldr	r3, [sp, #176]	; 0xb0
   152fc:	str	r0, [sp, #76]	; 0x4c
   15300:	cmp	r3, #10
   15304:	ldrls	pc, [pc, r3, lsl #2]
   15308:	b	16ca4 <__assert_fail@plt+0x57c4>
   1530c:	andeq	r5, r1, ip, lsl #15
   15310:	andeq	r5, r1, r8, lsr #17
   15314:	andeq	r5, r1, r4, lsr #28
   15318:	andeq	r5, r1, r4, lsl r9
   1531c:	muleq	r1, r4, r6
   15320:	andeq	r5, r1, r0, lsl r7
   15324:	andeq	r5, r1, r8, ror #15
   15328:	andeq	r5, r1, r0, asr r8
   1532c:	andeq	r5, r1, r8, lsr r3
   15330:	andeq	r5, r1, r8, lsr r3
   15334:	andeq	r5, r1, r8, lsr r3
   15338:	ldr	r3, [sp, #176]	; 0xb0
   1533c:	cmp	r3, #10
   15340:	beq	1536c <__assert_fail@plt+0x3e8c>
   15344:	mov	r1, r3
   15348:	movw	r0, #51092	; 0xc794
   1534c:	movt	r0, #1
   15350:	bl	15164 <__assert_fail@plt+0x3c84>
   15354:	str	r0, [sp, #188]	; 0xbc
   15358:	movw	r0, #51088	; 0xc790
   1535c:	movt	r0, #1
   15360:	ldr	r1, [sp, #176]	; 0xb0
   15364:	bl	15164 <__assert_fail@plt+0x3c84>
   15368:	str	r0, [sp, #192]	; 0xc0
   1536c:	cmp	r4, #0
   15370:	movne	r4, #0
   15374:	beq	16a30 <__assert_fail@plt+0x5550>
   15378:	mov	r5, #0
   1537c:	ldr	r0, [sp, #192]	; 0xc0
   15380:	mov	r9, r5
   15384:	str	r5, [sp, #64]	; 0x40
   15388:	bl	11354 <strlen@plt>
   1538c:	mov	r3, #1
   15390:	ldr	r2, [sp, #44]	; 0x2c
   15394:	cmp	r0, r5
   15398:	moveq	r2, r5
   1539c:	str	r3, [sp, #32]
   153a0:	str	r3, [sp, #48]	; 0x30
   153a4:	str	r5, [sp, #52]	; 0x34
   153a8:	str	r3, [sp, #60]	; 0x3c
   153ac:	ldr	r3, [sp, #180]	; 0xb4
   153b0:	str	r0, [sp, #56]	; 0x38
   153b4:	str	r5, [sp, #68]	; 0x44
   153b8:	str	r5, [sp, #80]	; 0x50
   153bc:	str	r5, [sp, #84]	; 0x54
   153c0:	and	r3, r3, #1
   153c4:	str	r2, [sp, #88]	; 0x58
   153c8:	str	r3, [sp, #92]	; 0x5c
   153cc:	ldr	r3, [sp, #180]	; 0xb4
   153d0:	and	r3, r3, #4
   153d4:	str	r3, [sp, #96]	; 0x60
   153d8:	ldr	r3, [sp, #192]	; 0xc0
   153dc:	str	r3, [sp, #72]	; 0x48
   153e0:	mov	r3, fp
   153e4:	mov	r7, #0
   153e8:	mov	fp, r9
   153ec:	mov	r9, r3
   153f0:	cmn	r8, #1
   153f4:	beq	159f8 <__assert_fail@plt+0x4518>
   153f8:	subs	r6, r8, r7
   153fc:	movne	r6, #1
   15400:	cmp	r6, #0
   15404:	beq	15a10 <__assert_fail@plt+0x4530>
   15408:	ldr	r0, [sp, #28]
   1540c:	ldr	r3, [sp, #48]	; 0x30
   15410:	cmp	r3, #0
   15414:	add	r3, r0, r7
   15418:	str	r3, [sp, #36]	; 0x24
   1541c:	beq	15e9c <__assert_fail@plt+0x49bc>
   15420:	ldr	r2, [sp, #56]	; 0x38
   15424:	cmp	r2, #0
   15428:	beq	1639c <__assert_fail@plt+0x4ebc>
   1542c:	cmp	r2, #1
   15430:	mov	r3, r2
   15434:	movls	r3, #0
   15438:	movhi	r3, #1
   1543c:	cmn	r8, #1
   15440:	add	r5, r7, r2
   15444:	movne	r3, #0
   15448:	cmp	r3, #0
   1544c:	beq	15458 <__assert_fail@plt+0x3f78>
   15450:	bl	11354 <strlen@plt>
   15454:	mov	r8, r0
   15458:	cmp	r5, r8
   1545c:	bhi	1639c <__assert_fail@plt+0x4ebc>
   15460:	ldr	r0, [sp, #36]	; 0x24
   15464:	ldr	r2, [sp, #56]	; 0x38
   15468:	ldr	r1, [sp, #72]	; 0x48
   1546c:	bl	11204 <memcmp@plt>
   15470:	cmp	r0, #0
   15474:	bne	1639c <__assert_fail@plt+0x4ebc>
   15478:	ldr	r3, [sp, #44]	; 0x2c
   1547c:	cmp	r3, #0
   15480:	bne	16b48 <__assert_fail@plt+0x5668>
   15484:	ldr	r3, [sp, #36]	; 0x24
   15488:	ldrb	r5, [r3]
   1548c:	cmp	r5, #126	; 0x7e
   15490:	ldrls	pc, [pc, r5, lsl #2]
   15494:	b	16930 <__assert_fail@plt+0x5450>
   15498:	andeq	r5, r1, ip, ror #22
   1549c:	andeq	r6, r1, r0, lsr r9
   154a0:	andeq	r6, r1, r0, lsr r9
   154a4:	andeq	r6, r1, r0, lsr r9
   154a8:	andeq	r6, r1, r0, lsr r9
   154ac:	andeq	r6, r1, r0, lsr r9
   154b0:	andeq	r6, r1, r0, lsr r9
   154b4:	andeq	r5, r1, r4, asr #21
   154b8:			; <UNDEFINED> instruction: 0x00015abc
   154bc:	andeq	r5, r1, ip, asr #21
   154c0:	andeq	r5, r1, r0, asr ip
   154c4:	andeq	r5, r1, r0, asr #24
   154c8:	andeq	r5, r1, r8, ror #18
   154cc:	andeq	r5, r1, ip, lsl ip
   154d0:	andeq	r6, r1, r0, lsr r9
   154d4:	andeq	r6, r1, r0, lsr r9
   154d8:	andeq	r6, r1, r0, lsr r9
   154dc:	andeq	r6, r1, r0, lsr r9
   154e0:	andeq	r6, r1, r0, lsr r9
   154e4:	andeq	r6, r1, r0, lsr r9
   154e8:	andeq	r6, r1, r0, lsr r9
   154ec:	andeq	r6, r1, r0, lsr r9
   154f0:	andeq	r6, r1, r0, lsr r9
   154f4:	andeq	r6, r1, r0, lsr r9
   154f8:	andeq	r6, r1, r0, lsr r9
   154fc:	andeq	r6, r1, r0, lsr r9
   15500:	andeq	r6, r1, r0, lsr r9
   15504:	andeq	r6, r1, r0, lsr r9
   15508:	andeq	r6, r1, r0, lsr r9
   1550c:	andeq	r6, r1, r0, lsr r9
   15510:	andeq	r6, r1, r0, lsr r9
   15514:	andeq	r6, r1, r0, lsr r9
   15518:	andeq	r5, r1, r8, asr #25
   1551c:			; <UNDEFINED> instruction: 0x00015cbc
   15520:			; <UNDEFINED> instruction: 0x00015cbc
   15524:			; <UNDEFINED> instruction: 0x00015cb0
   15528:			; <UNDEFINED> instruction: 0x00015cbc
   1552c:	muleq	r1, r4, sp
   15530:			; <UNDEFINED> instruction: 0x00015cbc
   15534:	andeq	r5, r1, r4, lsl #28
   15538:			; <UNDEFINED> instruction: 0x00015cbc
   1553c:			; <UNDEFINED> instruction: 0x00015cbc
   15540:			; <UNDEFINED> instruction: 0x00015cbc
   15544:	muleq	r1, r4, sp
   15548:	muleq	r1, r4, sp
   1554c:	muleq	r1, r4, sp
   15550:	muleq	r1, r4, sp
   15554:	muleq	r1, r4, sp
   15558:	muleq	r1, r4, sp
   1555c:	muleq	r1, r4, sp
   15560:	muleq	r1, r4, sp
   15564:	muleq	r1, r4, sp
   15568:	muleq	r1, r4, sp
   1556c:	muleq	r1, r4, sp
   15570:	muleq	r1, r4, sp
   15574:	muleq	r1, r4, sp
   15578:	muleq	r1, r4, sp
   1557c:	muleq	r1, r4, sp
   15580:	muleq	r1, r4, sp
   15584:			; <UNDEFINED> instruction: 0x00015cbc
   15588:			; <UNDEFINED> instruction: 0x00015cbc
   1558c:			; <UNDEFINED> instruction: 0x00015cbc
   15590:			; <UNDEFINED> instruction: 0x00015cbc
   15594:			; <UNDEFINED> instruction: 0x00015db4
   15598:	andeq	r6, r1, r0, lsr r9
   1559c:	muleq	r1, r4, sp
   155a0:	muleq	r1, r4, sp
   155a4:	muleq	r1, r4, sp
   155a8:	muleq	r1, r4, sp
   155ac:	muleq	r1, r4, sp
   155b0:	muleq	r1, r4, sp
   155b4:	muleq	r1, r4, sp
   155b8:	muleq	r1, r4, sp
   155bc:	muleq	r1, r4, sp
   155c0:	muleq	r1, r4, sp
   155c4:	muleq	r1, r4, sp
   155c8:	muleq	r1, r4, sp
   155cc:	muleq	r1, r4, sp
   155d0:	muleq	r1, r4, sp
   155d4:	muleq	r1, r4, sp
   155d8:	muleq	r1, r4, sp
   155dc:	muleq	r1, r4, sp
   155e0:	muleq	r1, r4, sp
   155e4:	muleq	r1, r4, sp
   155e8:	muleq	r1, r4, sp
   155ec:	muleq	r1, r4, sp
   155f0:	muleq	r1, r4, sp
   155f4:	muleq	r1, r4, sp
   155f8:	muleq	r1, r4, sp
   155fc:	muleq	r1, r4, sp
   15600:	muleq	r1, r4, sp
   15604:			; <UNDEFINED> instruction: 0x00015cbc
   15608:	andeq	r5, r1, r8, asr sp
   1560c:	muleq	r1, r4, sp
   15610:			; <UNDEFINED> instruction: 0x00015cbc
   15614:	muleq	r1, r4, sp
   15618:			; <UNDEFINED> instruction: 0x00015cbc
   1561c:	muleq	r1, r4, sp
   15620:	muleq	r1, r4, sp
   15624:	muleq	r1, r4, sp
   15628:	muleq	r1, r4, sp
   1562c:	muleq	r1, r4, sp
   15630:	muleq	r1, r4, sp
   15634:	muleq	r1, r4, sp
   15638:	muleq	r1, r4, sp
   1563c:	muleq	r1, r4, sp
   15640:	muleq	r1, r4, sp
   15644:	muleq	r1, r4, sp
   15648:	muleq	r1, r4, sp
   1564c:	muleq	r1, r4, sp
   15650:	muleq	r1, r4, sp
   15654:	muleq	r1, r4, sp
   15658:	muleq	r1, r4, sp
   1565c:	muleq	r1, r4, sp
   15660:	muleq	r1, r4, sp
   15664:	muleq	r1, r4, sp
   15668:	muleq	r1, r4, sp
   1566c:	muleq	r1, r4, sp
   15670:	muleq	r1, r4, sp
   15674:	muleq	r1, r4, sp
   15678:	muleq	r1, r4, sp
   1567c:	muleq	r1, r4, sp
   15680:	muleq	r1, r4, sp
   15684:	andeq	r5, r1, r4, ror #24
   15688:			; <UNDEFINED> instruction: 0x00015cbc
   1568c:	andeq	r5, r1, r4, ror #24
   15690:			; <UNDEFINED> instruction: 0x00015cb0
   15694:	ldr	r3, [sp, #180]	; 0xb4
   15698:	cmp	r4, #0
   1569c:	and	r3, r3, #1
   156a0:	str	r3, [sp, #92]	; 0x5c
   156a4:	ldr	r3, [sp, #180]	; 0xb4
   156a8:	and	r3, r3, #4
   156ac:	str	r3, [sp, #96]	; 0x60
   156b0:	moveq	r3, #1
   156b4:	streq	r3, [sp, #60]	; 0x3c
   156b8:	beq	15e48 <__assert_fail@plt+0x4968>
   156bc:	mov	r3, #0
   156c0:	mov	r2, #1
   156c4:	mov	r4, r3
   156c8:	mov	r9, r3
   156cc:	str	r2, [sp, #32]
   156d0:	str	r2, [sp, #44]	; 0x2c
   156d4:	str	r3, [sp, #48]	; 0x30
   156d8:	str	r2, [sp, #52]	; 0x34
   156dc:	str	r2, [sp, #56]	; 0x38
   156e0:	str	r3, [sp, #60]	; 0x3c
   156e4:	str	r2, [sp, #64]	; 0x40
   156e8:	str	r2, [sp, #68]	; 0x44
   156ec:	str	r3, [sp, #80]	; 0x50
   156f0:	str	r3, [sp, #84]	; 0x54
   156f4:	str	r3, [sp, #88]	; 0x58
   156f8:	movw	r3, #51088	; 0xc790
   156fc:	movt	r3, #1
   15700:	str	r3, [sp, #72]	; 0x48
   15704:	mov	r3, #2
   15708:	str	r3, [sp, #176]	; 0xb0
   1570c:	b	153e0 <__assert_fail@plt+0x3f00>
   15710:	ldr	r3, [sp, #180]	; 0xb4
   15714:	cmp	r4, #0
   15718:	and	r3, r3, #1
   1571c:	str	r3, [sp, #92]	; 0x5c
   15720:	ldr	r3, [sp, #180]	; 0xb4
   15724:	and	r3, r3, #4
   15728:	str	r3, [sp, #96]	; 0x60
   1572c:	bne	16b00 <__assert_fail@plt+0x5620>
   15730:	cmp	sl, #0
   15734:	beq	168ac <__assert_fail@plt+0x53cc>
   15738:	mov	r3, #34	; 0x22
   1573c:	mov	r2, r4
   15740:	mov	r1, #1
   15744:	mov	r9, r2
   15748:	strb	r3, [fp]
   1574c:	movw	r3, #46992	; 0xb790
   15750:	movt	r3, #1
   15754:	mov	r4, r1
   15758:	str	r1, [sp, #32]
   1575c:	str	r2, [sp, #44]	; 0x2c
   15760:	str	r1, [sp, #48]	; 0x30
   15764:	str	r2, [sp, #52]	; 0x34
   15768:	str	r1, [sp, #56]	; 0x38
   1576c:	str	r1, [sp, #60]	; 0x3c
   15770:	str	r2, [sp, #64]	; 0x40
   15774:	str	r2, [sp, #68]	; 0x44
   15778:	str	r3, [sp, #72]	; 0x48
   1577c:	str	r2, [sp, #80]	; 0x50
   15780:	str	r2, [sp, #84]	; 0x54
   15784:	str	r2, [sp, #88]	; 0x58
   15788:	b	153e0 <__assert_fail@plt+0x3f00>
   1578c:	mov	r3, #0
   15790:	mov	r2, #1
   15794:	mov	r9, r3
   15798:	str	r2, [sp, #32]
   1579c:	str	r3, [sp, #44]	; 0x2c
   157a0:	str	r3, [sp, #48]	; 0x30
   157a4:	str	r3, [sp, #52]	; 0x34
   157a8:	str	r3, [sp, #60]	; 0x3c
   157ac:	strd	r2, [sp, #64]	; 0x40
   157b0:	str	r3, [sp, #72]	; 0x48
   157b4:	str	r3, [sp, #80]	; 0x50
   157b8:	str	r3, [sp, #88]	; 0x58
   157bc:	ldr	r3, [sp, #180]	; 0xb4
   157c0:	and	r3, r3, r2
   157c4:	str	r3, [sp, #92]	; 0x5c
   157c8:	ldr	r3, [sp, #180]	; 0xb4
   157cc:	and	r3, r3, #4
   157d0:	str	r3, [sp, #96]	; 0x60
   157d4:	ldr	r3, [sp, #176]	; 0xb0
   157d8:	mov	r4, r3
   157dc:	str	r3, [sp, #56]	; 0x38
   157e0:	str	r3, [sp, #84]	; 0x54
   157e4:	b	153e0 <__assert_fail@plt+0x3f00>
   157e8:	mov	r3, #1
   157ec:	mov	r4, #0
   157f0:	mov	r9, r4
   157f4:	str	r3, [sp, #32]
   157f8:	str	r3, [sp, #44]	; 0x2c
   157fc:	str	r3, [sp, #48]	; 0x30
   15800:	str	r4, [sp, #52]	; 0x34
   15804:	str	r3, [sp, #56]	; 0x38
   15808:	str	r3, [sp, #60]	; 0x3c
   1580c:	str	r3, [sp, #88]	; 0x58
   15810:	movw	r3, #46992	; 0xb790
   15814:	movt	r3, #1
   15818:	str	r4, [sp, #64]	; 0x40
   1581c:	str	r4, [sp, #68]	; 0x44
   15820:	str	r3, [sp, #72]	; 0x48
   15824:	ldr	r3, [sp, #180]	; 0xb4
   15828:	str	r4, [sp, #80]	; 0x50
   1582c:	str	r4, [sp, #84]	; 0x54
   15830:	and	r3, r3, #1
   15834:	str	r3, [sp, #92]	; 0x5c
   15838:	ldr	r3, [sp, #180]	; 0xb4
   1583c:	and	r3, r3, #4
   15840:	str	r3, [sp, #96]	; 0x60
   15844:	mov	r3, #5
   15848:	str	r3, [sp, #176]	; 0xb0
   1584c:	b	153e0 <__assert_fail@plt+0x3f00>
   15850:	mov	r3, #1
   15854:	mov	r4, #0
   15858:	mov	r9, r4
   1585c:	str	r3, [sp, #32]
   15860:	str	r4, [sp, #44]	; 0x2c
   15864:	str	r3, [sp, #48]	; 0x30
   15868:	str	r3, [sp, #60]	; 0x3c
   1586c:	ldr	r3, [sp, #180]	; 0xb4
   15870:	str	r4, [sp, #52]	; 0x34
   15874:	str	r4, [sp, #56]	; 0x38
   15878:	str	r4, [sp, #64]	; 0x40
   1587c:	str	r4, [sp, #68]	; 0x44
   15880:	and	r3, r3, #1
   15884:	str	r4, [sp, #72]	; 0x48
   15888:	str	r4, [sp, #80]	; 0x50
   1588c:	str	r4, [sp, #84]	; 0x54
   15890:	str	r3, [sp, #92]	; 0x5c
   15894:	ldr	r3, [sp, #180]	; 0xb4
   15898:	str	r4, [sp, #88]	; 0x58
   1589c:	and	r3, r3, #4
   158a0:	str	r3, [sp, #96]	; 0x60
   158a4:	b	153e0 <__assert_fail@plt+0x3f00>
   158a8:	mov	r3, #0
   158ac:	mov	r2, #1
   158b0:	ldr	r1, [sp, #176]	; 0xb0
   158b4:	mov	r4, r3
   158b8:	mov	r9, r3
   158bc:	movw	r3, #51088	; 0xc790
   158c0:	movt	r3, #1
   158c4:	str	r2, [sp, #32]
   158c8:	str	r2, [sp, #44]	; 0x2c
   158cc:	str	r4, [sp, #48]	; 0x30
   158d0:	strd	r2, [sp, #68]	; 0x44
   158d4:	ldr	r3, [sp, #180]	; 0xb4
   158d8:	str	r2, [sp, #52]	; 0x34
   158dc:	str	r1, [sp, #56]	; 0x38
   158e0:	str	r4, [sp, #60]	; 0x3c
   158e4:	str	r2, [sp, #64]	; 0x40
   158e8:	and	r3, r3, r2
   158ec:	str	r4, [sp, #80]	; 0x50
   158f0:	str	r4, [sp, #84]	; 0x54
   158f4:	str	r4, [sp, #88]	; 0x58
   158f8:	str	r3, [sp, #92]	; 0x5c
   158fc:	ldr	r3, [sp, #180]	; 0xb4
   15900:	and	r3, r3, #4
   15904:	str	r3, [sp, #96]	; 0x60
   15908:	mov	r3, #2
   1590c:	str	r3, [sp, #176]	; 0xb0
   15910:	b	153e0 <__assert_fail@plt+0x3f00>
   15914:	mov	r3, #1
   15918:	mov	r2, #0
   1591c:	mov	r4, r2
   15920:	mov	r9, r2
   15924:	str	r3, [sp, #32]
   15928:	str	r3, [sp, #44]	; 0x2c
   1592c:	str	r2, [sp, #48]	; 0x30
   15930:	str	r3, [sp, #52]	; 0x34
   15934:	str	r3, [sp, #56]	; 0x38
   15938:	str	r3, [sp, #60]	; 0x3c
   1593c:	str	r3, [sp, #64]	; 0x40
   15940:	str	r3, [sp, #68]	; 0x44
   15944:	str	r3, [sp, #88]	; 0x58
   15948:	movw	r3, #51088	; 0xc790
   1594c:	movt	r3, #1
   15950:	str	r3, [sp, #72]	; 0x48
   15954:	ldr	r3, [sp, #180]	; 0xb4
   15958:	str	r2, [sp, #80]	; 0x50
   1595c:	str	r2, [sp, #84]	; 0x54
   15960:	and	r3, r3, #1
   15964:	b	158f8 <__assert_fail@plt+0x4418>
   15968:	mov	r5, #102	; 0x66
   1596c:	mov	r6, #0
   15970:	ldr	r3, [sp, #44]	; 0x2c
   15974:	cmp	r3, #0
   15978:	bne	16828 <__assert_fail@plt+0x5348>
   1597c:	ldr	r2, [sp, #52]	; 0x34
   15980:	eor	r3, fp, #1
   15984:	ands	r3, r2, r3
   15988:	beq	159c0 <__assert_fail@plt+0x44e0>
   1598c:	cmp	sl, r4
   15990:	mov	fp, r3
   15994:	movhi	r2, #39	; 0x27
   15998:	strbhi	r2, [r9, r4]
   1599c:	add	r2, r4, #1
   159a0:	cmp	sl, r2
   159a4:	movhi	r1, #36	; 0x24
   159a8:	strbhi	r1, [r9, r2]
   159ac:	add	r2, r4, #2
   159b0:	add	r4, r4, #3
   159b4:	cmp	sl, r2
   159b8:	movhi	r1, #39	; 0x27
   159bc:	strbhi	r1, [r9, r2]
   159c0:	cmp	sl, r4
   159c4:	add	r7, r7, #1
   159c8:	movhi	r3, #92	; 0x5c
   159cc:	strbhi	r3, [r9, r4]
   159d0:	add	r4, r4, #1
   159d4:	cmp	r4, sl
   159d8:	ldr	r3, [sp, #32]
   159dc:	strbcc	r5, [r9, r4]
   159e0:	cmp	r6, #0
   159e4:	add	r4, r4, #1
   159e8:	moveq	r3, #0
   159ec:	cmn	r8, #1
   159f0:	str	r3, [sp, #32]
   159f4:	bne	153f8 <__assert_fail@plt+0x3f18>
   159f8:	ldr	r3, [sp, #28]
   159fc:	ldrb	r6, [r3, r7]
   15a00:	adds	r6, r6, #0
   15a04:	movne	r6, #1
   15a08:	cmp	r6, #0
   15a0c:	bne	15408 <__assert_fail@plt+0x3f28>
   15a10:	mov	r3, r9
   15a14:	mov	r9, fp
   15a18:	mov	fp, r3
   15a1c:	ldr	r3, [sp, #68]	; 0x44
   15a20:	cmp	r4, #0
   15a24:	movne	r3, #0
   15a28:	cmp	r3, #0
   15a2c:	bne	16c20 <__assert_fail@plt+0x5740>
   15a30:	ldr	r3, [sp, #44]	; 0x2c
   15a34:	ldr	r2, [sp, #52]	; 0x34
   15a38:	eor	r3, r3, #1
   15a3c:	ands	r2, r3, r2
   15a40:	beq	16b58 <__assert_fail@plt+0x5678>
   15a44:	ldr	r3, [sp, #80]	; 0x50
   15a48:	cmp	r3, #0
   15a4c:	beq	16b5c <__assert_fail@plt+0x567c>
   15a50:	ldr	r3, [sp, #32]
   15a54:	cmp	r3, #0
   15a58:	bne	16bd0 <__assert_fail@plt+0x56f0>
   15a5c:	ldr	r3, [sp, #84]	; 0x54
   15a60:	adds	r3, r3, #0
   15a64:	movne	r3, #1
   15a68:	cmp	sl, #0
   15a6c:	movne	r3, #0
   15a70:	cmp	r3, #0
   15a74:	ldreq	r2, [sp, #80]	; 0x50
   15a78:	beq	16b5c <__assert_fail@plt+0x567c>
   15a7c:	ldr	r2, [sp, #84]	; 0x54
   15a80:	mov	sl, r2
   15a84:	mov	r0, #0
   15a88:	mov	r4, #1
   15a8c:	mov	r1, #39	; 0x27
   15a90:	str	r0, [sp, #44]	; 0x2c
   15a94:	strb	r1, [fp]
   15a98:	str	r0, [sp, #48]	; 0x30
   15a9c:	str	r4, [sp, #52]	; 0x34
   15aa0:	str	r4, [sp, #56]	; 0x38
   15aa4:	str	r4, [sp, #64]	; 0x40
   15aa8:	str	r0, [sp, #68]	; 0x44
   15aac:	str	r3, [sp, #80]	; 0x50
   15ab0:	str	r2, [sp, #84]	; 0x54
   15ab4:	str	r0, [sp, #88]	; 0x58
   15ab8:	b	156f8 <__assert_fail@plt+0x4218>
   15abc:	mov	r5, #98	; 0x62
   15ac0:	b	1596c <__assert_fail@plt+0x448c>
   15ac4:	mov	r5, #97	; 0x61
   15ac8:	b	1596c <__assert_fail@plt+0x448c>
   15acc:	ldr	r3, [sp, #48]	; 0x30
   15ad0:	str	r3, [sp, #40]	; 0x28
   15ad4:	mov	r3, #116	; 0x74
   15ad8:	ldr	r2, [sp, #68]	; 0x44
   15adc:	cmp	r2, #0
   15ae0:	bne	15cdc <__assert_fail@plt+0x47fc>
   15ae4:	ldr	r2, [sp, #60]	; 0x3c
   15ae8:	cmp	r2, #0
   15aec:	bne	15c38 <__assert_fail@plt+0x4758>
   15af0:	ldr	r3, [sp, #44]	; 0x2c
   15af4:	mov	r6, #0
   15af8:	cmp	r3, #0
   15afc:	beq	15ca8 <__assert_fail@plt+0x47c8>
   15b00:	mov	r3, fp
   15b04:	ldr	r2, [sp, #184]	; 0xb8
   15b08:	cmp	r2, #0
   15b0c:	beq	15b2c <__assert_fail@plt+0x464c>
   15b10:	ubfx	r1, r5, #5, #8
   15b14:	mov	r0, r2
   15b18:	and	r2, r5, #31
   15b1c:	ldr	r1, [r0, r1, lsl #2]
   15b20:	lsr	r2, r1, r2
   15b24:	tst	r2, #1
   15b28:	bne	15970 <__assert_fail@plt+0x4490>
   15b2c:	ldr	r2, [sp, #40]	; 0x28
   15b30:	cmp	r2, #0
   15b34:	addeq	r7, r7, #1
   15b38:	bne	15970 <__assert_fail@plt+0x4490>
   15b3c:	cmp	r3, #0
   15b40:	beq	159d4 <__assert_fail@plt+0x44f4>
   15b44:	cmp	sl, r4
   15b48:	mov	fp, #0
   15b4c:	movhi	r3, #39	; 0x27
   15b50:	strbhi	r3, [r9, r4]
   15b54:	add	r3, r4, #1
   15b58:	add	r4, r4, #2
   15b5c:	cmp	sl, r3
   15b60:	movhi	r2, #39	; 0x27
   15b64:	strbhi	r2, [r9, r3]
   15b68:	b	159d4 <__assert_fail@plt+0x44f4>
   15b6c:	ldr	r3, [sp, #48]	; 0x30
   15b70:	str	r3, [sp, #40]	; 0x28
   15b74:	eor	r3, fp, #1
   15b78:	ldr	r2, [sp, #52]	; 0x34
   15b7c:	ands	r2, r2, r3
   15b80:	beq	16840 <__assert_fail@plt+0x5360>
   15b84:	cmp	sl, r4
   15b88:	movhi	r3, #39	; 0x27
   15b8c:	strbhi	r3, [r9, r4]
   15b90:	add	r3, r4, #1
   15b94:	cmp	sl, r3
   15b98:	movhi	r1, #36	; 0x24
   15b9c:	strbhi	r1, [r9, r3]
   15ba0:	add	r3, r4, #2
   15ba4:	cmp	sl, r3
   15ba8:	movhi	r1, #39	; 0x27
   15bac:	strbhi	r1, [r9, r3]
   15bb0:	add	r3, r4, #3
   15bb4:	cmp	sl, r3
   15bb8:	bls	1688c <__assert_fail@plt+0x53ac>
   15bbc:	mov	r4, r3
   15bc0:	mov	r3, #92	; 0x5c
   15bc4:	mov	fp, r2
   15bc8:	mov	r2, r4
   15bcc:	strb	r3, [r9, r4]
   15bd0:	ldr	r3, [sp, #176]	; 0xb0
   15bd4:	add	r4, r4, #1
   15bd8:	cmp	r3, #2
   15bdc:	beq	168f4 <__assert_fail@plt+0x5414>
   15be0:	add	r3, r7, #1
   15be4:	cmp	r3, r8
   15be8:	bcs	15c00 <__assert_fail@plt+0x4720>
   15bec:	ldr	r1, [sp, #28]
   15bf0:	ldrb	r3, [r1, r3]
   15bf4:	sub	r3, r3, #48	; 0x30
   15bf8:	cmp	r3, #9
   15bfc:	bls	16904 <__assert_fail@plt+0x5424>
   15c00:	mov	r3, #0
   15c04:	mov	r5, #48	; 0x30
   15c08:	ldr	r6, [sp, #64]	; 0x40
   15c0c:	cmp	r6, #0
   15c10:	beq	15b04 <__assert_fail@plt+0x4624>
   15c14:	mov	r6, #0
   15c18:	b	15b2c <__assert_fail@plt+0x464c>
   15c1c:	ldr	r3, [sp, #48]	; 0x30
   15c20:	str	r3, [sp, #40]	; 0x28
   15c24:	ldr	r2, [sp, #60]	; 0x3c
   15c28:	mov	r5, #13
   15c2c:	mov	r3, #114	; 0x72
   15c30:	cmp	r2, #0
   15c34:	beq	15af0 <__assert_fail@plt+0x4610>
   15c38:	mov	r5, r3
   15c3c:	b	1596c <__assert_fail@plt+0x448c>
   15c40:	ldr	r3, [sp, #48]	; 0x30
   15c44:	str	r3, [sp, #40]	; 0x28
   15c48:	mov	r3, #118	; 0x76
   15c4c:	b	15ae4 <__assert_fail@plt+0x4604>
   15c50:	ldr	r3, [sp, #48]	; 0x30
   15c54:	str	r3, [sp, #40]	; 0x28
   15c58:	mov	r5, #10
   15c5c:	mov	r3, #110	; 0x6e
   15c60:	b	15ae4 <__assert_fail@plt+0x4604>
   15c64:	ldr	r3, [sp, #48]	; 0x30
   15c68:	cmn	r8, #1
   15c6c:	str	r3, [sp, #40]	; 0x28
   15c70:	beq	160b8 <__assert_fail@plt+0x4bd8>
   15c74:	subs	r3, r8, #1
   15c78:	movne	r3, #1
   15c7c:	cmp	r3, #0
   15c80:	bne	15c8c <__assert_fail@plt+0x47ac>
   15c84:	cmp	r7, #0
   15c88:	beq	15cd0 <__assert_fail@plt+0x47f0>
   15c8c:	mov	r6, #0
   15c90:	ldr	r3, [sp, #64]	; 0x40
   15c94:	cmp	r3, #0
   15c98:	beq	15b00 <__assert_fail@plt+0x4620>
   15c9c:	ldr	r3, [sp, #44]	; 0x2c
   15ca0:	cmp	r3, #0
   15ca4:	bne	15b00 <__assert_fail@plt+0x4620>
   15ca8:	mov	r3, fp
   15cac:	b	15b2c <__assert_fail@plt+0x464c>
   15cb0:	ldr	r3, [sp, #48]	; 0x30
   15cb4:	str	r3, [sp, #40]	; 0x28
   15cb8:	b	15c84 <__assert_fail@plt+0x47a4>
   15cbc:	ldr	r3, [sp, #48]	; 0x30
   15cc0:	str	r3, [sp, #40]	; 0x28
   15cc4:	b	15c8c <__assert_fail@plt+0x47ac>
   15cc8:	ldr	r6, [sp, #48]	; 0x30
   15ccc:	str	r6, [sp, #40]	; 0x28
   15cd0:	ldr	r3, [sp, #68]	; 0x44
   15cd4:	cmp	r3, #0
   15cd8:	beq	15c90 <__assert_fail@plt+0x47b0>
   15cdc:	mov	r3, #2
   15ce0:	mov	fp, r9
   15ce4:	str	r3, [sp, #176]	; 0xb0
   15ce8:	ldr	r3, [sp, #60]	; 0x3c
   15cec:	cmp	r3, #0
   15cf0:	ldr	r3, [sp, #176]	; 0xb0
   15cf4:	movne	r3, #4
   15cf8:	str	r3, [sp, #176]	; 0xb0
   15cfc:	mov	lr, #0
   15d00:	mov	r0, fp
   15d04:	ldr	r2, [sp, #28]
   15d08:	ldr	r3, [sp, #180]	; 0xb4
   15d0c:	ldr	r1, [sp, #188]	; 0xbc
   15d10:	bic	ip, r3, #2
   15d14:	ldr	r3, [sp, #176]	; 0xb0
   15d18:	stm	sp, {r3, ip, lr}
   15d1c:	mov	r3, r8
   15d20:	ldr	ip, [sp, #192]	; 0xc0
   15d24:	str	r1, [sp, #12]
   15d28:	mov	r1, sl
   15d2c:	str	ip, [sp, #16]
   15d30:	bl	152bc <__assert_fail@plt+0x3ddc>
   15d34:	mov	r4, r0
   15d38:	mov	r0, r4
   15d3c:	add	sp, sp, #140	; 0x8c
   15d40:	ldrd	r4, [sp]
   15d44:	ldrd	r6, [sp, #8]
   15d48:	ldrd	r8, [sp, #16]
   15d4c:	ldrd	sl, [sp, #24]
   15d50:	add	sp, sp, #32
   15d54:	pop	{pc}		; (ldr pc, [sp], #4)
   15d58:	ldr	r3, [sp, #48]	; 0x30
   15d5c:	str	r3, [sp, #40]	; 0x28
   15d60:	ldr	r3, [sp, #176]	; 0xb0
   15d64:	cmp	r3, #2
   15d68:	beq	160e0 <__assert_fail@plt+0x4c00>
   15d6c:	ldr	r3, [sp, #88]	; 0x58
   15d70:	cmp	r3, #0
   15d74:	moveq	r5, #92	; 0x5c
   15d78:	moveq	r3, r5
   15d7c:	beq	15ae4 <__assert_fail@plt+0x4604>
   15d80:	add	r7, r7, #1
   15d84:	mov	r3, fp
   15d88:	mov	r6, #0
   15d8c:	mov	r5, #92	; 0x5c
   15d90:	b	15b3c <__assert_fail@plt+0x465c>
   15d94:	ldr	r3, [sp, #64]	; 0x40
   15d98:	cmp	r3, #0
   15d9c:	bne	16c14 <__assert_fail@plt+0x5734>
   15da0:	ldr	r2, [sp, #48]	; 0x30
   15da4:	mov	r3, fp
   15da8:	mov	r6, r2
   15dac:	str	r2, [sp, #40]	; 0x28
   15db0:	b	15b04 <__assert_fail@plt+0x4624>
   15db4:	ldr	r3, [sp, #176]	; 0xb0
   15db8:	cmp	r3, #2
   15dbc:	beq	16b50 <__assert_fail@plt+0x5670>
   15dc0:	cmp	r3, #5
   15dc4:	ldr	r3, [sp, #48]	; 0x30
   15dc8:	str	r3, [sp, #40]	; 0x28
   15dcc:	bne	15df8 <__assert_fail@plt+0x4918>
   15dd0:	ldr	r3, [sp, #96]	; 0x60
   15dd4:	cmp	r3, #0
   15dd8:	beq	16854 <__assert_fail@plt+0x5374>
   15ddc:	add	r3, r7, #2
   15de0:	cmp	r3, r8
   15de4:	bcs	15df8 <__assert_fail@plt+0x4918>
   15de8:	ldr	r2, [sp, #36]	; 0x24
   15dec:	ldrb	r5, [r2, #1]
   15df0:	cmp	r5, #63	; 0x3f
   15df4:	beq	1693c <__assert_fail@plt+0x545c>
   15df8:	mov	r6, #0
   15dfc:	mov	r5, #63	; 0x3f
   15e00:	b	15c90 <__assert_fail@plt+0x47b0>
   15e04:	ldr	r3, [sp, #176]	; 0xb0
   15e08:	cmp	r3, #2
   15e0c:	ldr	r3, [sp, #48]	; 0x30
   15e10:	beq	165f8 <__assert_fail@plt+0x5118>
   15e14:	mov	r5, #39	; 0x27
   15e18:	str	r3, [sp, #40]	; 0x28
   15e1c:	str	r6, [sp, #80]	; 0x50
   15e20:	b	15c90 <__assert_fail@plt+0x47b0>
   15e24:	ldr	r3, [sp, #180]	; 0xb4
   15e28:	cmp	r4, #0
   15e2c:	and	r3, r3, #1
   15e30:	str	r3, [sp, #92]	; 0x5c
   15e34:	ldr	r3, [sp, #180]	; 0xb4
   15e38:	and	r3, r3, #4
   15e3c:	str	r3, [sp, #96]	; 0x60
   15e40:	bne	16c60 <__assert_fail@plt+0x5780>
   15e44:	str	r4, [sp, #60]	; 0x3c
   15e48:	cmp	sl, #0
   15e4c:	bne	16c44 <__assert_fail@plt+0x5764>
   15e50:	mov	r3, #1
   15e54:	movw	r2, #51088	; 0xc790
   15e58:	movt	r2, #1
   15e5c:	mov	r4, r3
   15e60:	mov	r3, #2
   15e64:	mov	r9, sl
   15e68:	str	r4, [sp, #32]
   15e6c:	str	sl, [sp, #44]	; 0x2c
   15e70:	str	sl, [sp, #48]	; 0x30
   15e74:	str	r4, [sp, #52]	; 0x34
   15e78:	str	r4, [sp, #56]	; 0x38
   15e7c:	str	r4, [sp, #64]	; 0x40
   15e80:	str	sl, [sp, #68]	; 0x44
   15e84:	str	r2, [sp, #72]	; 0x48
   15e88:	str	sl, [sp, #80]	; 0x50
   15e8c:	str	sl, [sp, #84]	; 0x54
   15e90:	str	sl, [sp, #88]	; 0x58
   15e94:	str	r3, [sp, #176]	; 0xb0
   15e98:	b	153e0 <__assert_fail@plt+0x3f00>
   15e9c:	ldrb	r5, [r0, r7]
   15ea0:	cmp	r5, #126	; 0x7e
   15ea4:	ldrls	pc, [pc, r5, lsl #2]
   15ea8:	b	1620c <__assert_fail@plt+0x4d2c>
   15eac:	ldrdeq	r6, [r1], -r8
   15eb0:	andeq	r6, r1, ip, lsl #4
   15eb4:	andeq	r6, r1, ip, lsl #4
   15eb8:	andeq	r6, r1, ip, lsl #4
   15ebc:	andeq	r6, r1, ip, lsl #4
   15ec0:	andeq	r6, r1, ip, lsl #4
   15ec4:	andeq	r6, r1, ip, lsl #4
   15ec8:	andeq	r6, r1, r8, asr #3
   15ecc:			; <UNDEFINED> instruction: 0x000161b8
   15ed0:	andeq	r6, r1, ip, lsr r1
   15ed4:	andeq	r6, r1, r8, lsr #3
   15ed8:	andeq	r6, r1, ip, lsl r1
   15edc:	strdeq	r6, [r1], -ip
   15ee0:	andeq	r6, r1, r8, lsl #3
   15ee4:	andeq	r6, r1, ip, lsl #4
   15ee8:	andeq	r6, r1, ip, lsl #4
   15eec:	andeq	r6, r1, ip, lsl #4
   15ef0:	andeq	r6, r1, ip, lsl #4
   15ef4:	andeq	r6, r1, ip, lsl #4
   15ef8:	andeq	r6, r1, ip, lsl #4
   15efc:	andeq	r6, r1, ip, lsl #4
   15f00:	andeq	r6, r1, ip, lsl #4
   15f04:	andeq	r6, r1, ip, lsl #4
   15f08:	andeq	r6, r1, ip, lsl #4
   15f0c:	andeq	r6, r1, ip, lsl #4
   15f10:	andeq	r6, r1, ip, lsl #4
   15f14:	andeq	r6, r1, ip, lsl #4
   15f18:	andeq	r6, r1, ip, lsl #4
   15f1c:	andeq	r6, r1, ip, lsl #4
   15f20:	andeq	r6, r1, ip, lsl #4
   15f24:	andeq	r6, r1, ip, lsl #4
   15f28:	andeq	r6, r1, ip, lsl #4
   15f2c:	andeq	r6, r1, r0, lsr r1
   15f30:	muleq	r1, r8, r1
   15f34:	muleq	r1, r8, r1
   15f38:	andeq	r6, r1, r0, lsl r1
   15f3c:	muleq	r1, r8, r1
   15f40:	andeq	r6, r1, r4, lsl #2
   15f44:	muleq	r1, r8, r1
   15f48:	andeq	r6, r1, r4, ror r1
   15f4c:	muleq	r1, r8, r1
   15f50:	muleq	r1, r8, r1
   15f54:	muleq	r1, r8, r1
   15f58:	andeq	r6, r1, r4, lsl #2
   15f5c:	andeq	r6, r1, r4, lsl #2
   15f60:	andeq	r6, r1, r4, lsl #2
   15f64:	andeq	r6, r1, r4, lsl #2
   15f68:	andeq	r6, r1, r4, lsl #2
   15f6c:	andeq	r6, r1, r4, lsl #2
   15f70:	andeq	r6, r1, r4, lsl #2
   15f74:	andeq	r6, r1, r4, lsl #2
   15f78:	andeq	r6, r1, r4, lsl #2
   15f7c:	andeq	r6, r1, r4, lsl #2
   15f80:	andeq	r6, r1, r4, lsl #2
   15f84:	andeq	r6, r1, r4, lsl #2
   15f88:	andeq	r6, r1, r4, lsl #2
   15f8c:	andeq	r6, r1, r4, lsl #2
   15f90:	andeq	r6, r1, r4, lsl #2
   15f94:	andeq	r6, r1, r4, lsl #2
   15f98:	muleq	r1, r8, r1
   15f9c:	muleq	r1, r8, r1
   15fa0:	muleq	r1, r8, r1
   15fa4:	muleq	r1, r8, r1
   15fa8:	andeq	r6, r1, ip, asr #2
   15fac:	andeq	r6, r1, ip, lsl #4
   15fb0:	andeq	r6, r1, r4, lsl #2
   15fb4:	andeq	r6, r1, r4, lsl #2
   15fb8:	andeq	r6, r1, r4, lsl #2
   15fbc:	andeq	r6, r1, r4, lsl #2
   15fc0:	andeq	r6, r1, r4, lsl #2
   15fc4:	andeq	r6, r1, r4, lsl #2
   15fc8:	andeq	r6, r1, r4, lsl #2
   15fcc:	andeq	r6, r1, r4, lsl #2
   15fd0:	andeq	r6, r1, r4, lsl #2
   15fd4:	andeq	r6, r1, r4, lsl #2
   15fd8:	andeq	r6, r1, r4, lsl #2
   15fdc:	andeq	r6, r1, r4, lsl #2
   15fe0:	andeq	r6, r1, r4, lsl #2
   15fe4:	andeq	r6, r1, r4, lsl #2
   15fe8:	andeq	r6, r1, r4, lsl #2
   15fec:	andeq	r6, r1, r4, lsl #2
   15ff0:	andeq	r6, r1, r4, lsl #2
   15ff4:	andeq	r6, r1, r4, lsl #2
   15ff8:	andeq	r6, r1, r4, lsl #2
   15ffc:	andeq	r6, r1, r4, lsl #2
   16000:	andeq	r6, r1, r4, lsl #2
   16004:	andeq	r6, r1, r4, lsl #2
   16008:	andeq	r6, r1, r4, lsl #2
   1600c:	andeq	r6, r1, r4, lsl #2
   16010:	andeq	r6, r1, r4, lsl #2
   16014:	andeq	r6, r1, r4, lsl #2
   16018:	muleq	r1, r8, r1
   1601c:	andeq	r6, r1, ip, asr #1
   16020:	andeq	r6, r1, r4, lsl #2
   16024:	muleq	r1, r8, r1
   16028:	andeq	r6, r1, r4, lsl #2
   1602c:	muleq	r1, r8, r1
   16030:	andeq	r6, r1, r4, lsl #2
   16034:	andeq	r6, r1, r4, lsl #2
   16038:	andeq	r6, r1, r4, lsl #2
   1603c:	andeq	r6, r1, r4, lsl #2
   16040:	andeq	r6, r1, r4, lsl #2
   16044:	andeq	r6, r1, r4, lsl #2
   16048:	andeq	r6, r1, r4, lsl #2
   1604c:	andeq	r6, r1, r4, lsl #2
   16050:	andeq	r6, r1, r4, lsl #2
   16054:	andeq	r6, r1, r4, lsl #2
   16058:	andeq	r6, r1, r4, lsl #2
   1605c:	andeq	r6, r1, r4, lsl #2
   16060:	andeq	r6, r1, r4, lsl #2
   16064:	andeq	r6, r1, r4, lsl #2
   16068:	andeq	r6, r1, r4, lsl #2
   1606c:	andeq	r6, r1, r4, lsl #2
   16070:	andeq	r6, r1, r4, lsl #2
   16074:	andeq	r6, r1, r4, lsl #2
   16078:	andeq	r6, r1, r4, lsl #2
   1607c:	andeq	r6, r1, r4, lsl #2
   16080:	andeq	r6, r1, r4, lsl #2
   16084:	andeq	r6, r1, r4, lsl #2
   16088:	andeq	r6, r1, r4, lsl #2
   1608c:	andeq	r6, r1, r4, lsl #2
   16090:	andeq	r6, r1, r4, lsl #2
   16094:	andeq	r6, r1, r4, lsl #2
   16098:	andeq	r6, r1, r8, lsr #1
   1609c:	muleq	r1, r8, r1
   160a0:	andeq	r6, r1, r8, lsr #1
   160a4:	andeq	r6, r1, r0, lsl r1
   160a8:	mov	r3, #0
   160ac:	cmn	r8, #1
   160b0:	str	r3, [sp, #40]	; 0x28
   160b4:	bne	15c74 <__assert_fail@plt+0x4794>
   160b8:	ldr	r3, [sp, #28]
   160bc:	ldrb	r3, [r3, #1]
   160c0:	adds	r3, r3, #0
   160c4:	movne	r3, #1
   160c8:	b	15c7c <__assert_fail@plt+0x479c>
   160cc:	mov	r3, #0
   160d0:	str	r3, [sp, #40]	; 0x28
   160d4:	ldr	r3, [sp, #176]	; 0xb0
   160d8:	cmp	r3, #2
   160dc:	bne	15d6c <__assert_fail@plt+0x488c>
   160e0:	ldr	r3, [sp, #44]	; 0x2c
   160e4:	cmp	r3, #0
   160e8:	bne	16a28 <__assert_fail@plt+0x5548>
   160ec:	mov	r6, r3
   160f0:	add	r7, r7, #1
   160f4:	mov	r3, fp
   160f8:	mov	r5, #92	; 0x5c
   160fc:	b	15b3c <__assert_fail@plt+0x465c>
   16100:	ldr	r6, [sp, #48]	; 0x30
   16104:	mov	r3, #0
   16108:	str	r3, [sp, #40]	; 0x28
   1610c:	b	15c90 <__assert_fail@plt+0x47b0>
   16110:	mov	r3, #0
   16114:	str	r3, [sp, #40]	; 0x28
   16118:	b	15c84 <__assert_fail@plt+0x47a4>
   1611c:	mov	r3, #0
   16120:	str	r3, [sp, #40]	; 0x28
   16124:	mov	r3, #118	; 0x76
   16128:	b	15ae4 <__assert_fail@plt+0x4604>
   1612c:	ldr	r6, [sp, #48]	; 0x30
   16130:	mov	r3, #0
   16134:	str	r3, [sp, #40]	; 0x28
   16138:	b	15cd0 <__assert_fail@plt+0x47f0>
   1613c:	mov	r3, #0
   16140:	str	r3, [sp, #40]	; 0x28
   16144:	mov	r3, #116	; 0x74
   16148:	b	15ad8 <__assert_fail@plt+0x45f8>
   1614c:	ldr	r3, [sp, #176]	; 0xb0
   16150:	cmp	r3, #2
   16154:	beq	16664 <__assert_fail@plt+0x5184>
   16158:	cmp	r3, #5
   1615c:	mov	r3, #0
   16160:	str	r3, [sp, #40]	; 0x28
   16164:	beq	15dd0 <__assert_fail@plt+0x48f0>
   16168:	mov	r6, #0
   1616c:	mov	r5, #63	; 0x3f
   16170:	b	15c90 <__assert_fail@plt+0x47b0>
   16174:	ldr	r3, [sp, #176]	; 0xb0
   16178:	cmp	r3, #2
   1617c:	beq	165ec <__assert_fail@plt+0x510c>
   16180:	mov	r3, #0
   16184:	b	15e14 <__assert_fail@plt+0x4934>
   16188:	mov	r3, #0
   1618c:	str	r3, [sp, #40]	; 0x28
   16190:	mov	r3, #114	; 0x72
   16194:	b	15ad8 <__assert_fail@plt+0x45f8>
   16198:	mov	r3, #0
   1619c:	mov	r6, r3
   161a0:	str	r3, [sp, #40]	; 0x28
   161a4:	b	15cd0 <__assert_fail@plt+0x47f0>
   161a8:	mov	r3, #0
   161ac:	str	r3, [sp, #40]	; 0x28
   161b0:	mov	r3, #110	; 0x6e
   161b4:	b	15ad8 <__assert_fail@plt+0x45f8>
   161b8:	mov	r3, #0
   161bc:	str	r3, [sp, #40]	; 0x28
   161c0:	mov	r3, #98	; 0x62
   161c4:	b	15ae4 <__assert_fail@plt+0x4604>
   161c8:	mov	r3, #0
   161cc:	str	r3, [sp, #40]	; 0x28
   161d0:	mov	r3, #97	; 0x61
   161d4:	b	15ae4 <__assert_fail@plt+0x4604>
   161d8:	ldr	r3, [sp, #60]	; 0x3c
   161dc:	cmp	r3, #0
   161e0:	bne	165d0 <__assert_fail@plt+0x50f0>
   161e4:	ldr	r3, [sp, #92]	; 0x5c
   161e8:	cmp	r3, #0
   161ec:	addne	r7, r7, #1
   161f0:	bne	153f0 <__assert_fail@plt+0x3f10>
   161f4:	str	r3, [sp, #40]	; 0x28
   161f8:	b	15af0 <__assert_fail@plt+0x4610>
   161fc:	mov	r3, #0
   16200:	str	r3, [sp, #40]	; 0x28
   16204:	mov	r3, #102	; 0x66
   16208:	b	15ae4 <__assert_fail@plt+0x4604>
   1620c:	mov	r3, #0
   16210:	str	r3, [sp, #40]	; 0x28
   16214:	ldr	r3, [sp, #76]	; 0x4c
   16218:	cmp	r3, #1
   1621c:	bne	16684 <__assert_fail@plt+0x51a4>
   16220:	bl	1133c <__ctype_b_loc@plt>
   16224:	ldr	r2, [r0]
   16228:	sxth	r3, r5
   1622c:	lsl	r3, r3, #1
   16230:	ldr	r1, [sp, #76]	; 0x4c
   16234:	ldrh	r3, [r2, r3]
   16238:	mov	r0, r1
   1623c:	and	r3, r3, #16384	; 0x4000
   16240:	cmp	r3, #0
   16244:	ldr	r3, [sp, #60]	; 0x3c
   16248:	movne	r6, #1
   1624c:	moveq	r6, #0
   16250:	movne	r2, #0
   16254:	andeq	r2, r3, #1
   16258:	cmp	r2, #0
   1625c:	beq	15c90 <__assert_fail@plt+0x47b0>
   16260:	ldr	r2, [sp, #60]	; 0x3c
   16264:	mov	r6, #0
   16268:	add	r1, r0, r7
   1626c:	mov	ip, #39	; 0x27
   16270:	str	r6, [sp, #100]	; 0x64
   16274:	mov	r0, #0
   16278:	ldr	lr, [sp, #36]	; 0x24
   1627c:	str	r8, [sp, #36]	; 0x24
   16280:	ldr	r6, [sp, #40]	; 0x28
   16284:	ldr	r8, [sp, #44]	; 0x2c
   16288:	b	16338 <__assert_fail@plt+0x4e58>
   1628c:	cmp	r8, #0
   16290:	bne	1686c <__assert_fail@plt+0x538c>
   16294:	ldr	r0, [sp, #52]	; 0x34
   16298:	eor	r3, fp, #1
   1629c:	ands	r3, r0, r3
   162a0:	beq	162d0 <__assert_fail@plt+0x4df0>
   162a4:	cmp	sl, r4
   162a8:	add	r0, r4, #1
   162ac:	strbhi	ip, [r9, r4]
   162b0:	cmp	sl, r0
   162b4:	movhi	fp, #36	; 0x24
   162b8:	strbhi	fp, [r9, r0]
   162bc:	add	r0, r4, #2
   162c0:	mov	fp, r3
   162c4:	cmp	sl, r0
   162c8:	add	r4, r4, #3
   162cc:	strbhi	ip, [r9, r0]
   162d0:	cmp	sl, r4
   162d4:	movhi	r3, #92	; 0x5c
   162d8:	strbhi	r3, [r9, r4]
   162dc:	add	r3, r4, #1
   162e0:	cmp	sl, r3
   162e4:	bls	162f4 <__assert_fail@plt+0x4e14>
   162e8:	lsr	r0, r5, #6
   162ec:	add	r0, r0, #48	; 0x30
   162f0:	strb	r0, [r9, r3]
   162f4:	add	r3, r4, #2
   162f8:	cmp	sl, r3
   162fc:	bls	1630c <__assert_fail@plt+0x4e2c>
   16300:	ubfx	r0, r5, #3, #3
   16304:	add	r0, r0, #48	; 0x30
   16308:	strb	r0, [r9, r3]
   1630c:	add	r7, r7, #1
   16310:	and	r5, r5, #7
   16314:	cmp	r1, r7
   16318:	add	r5, r5, #48	; 0x30
   1631c:	add	r4, r4, #3
   16320:	bls	16880 <__assert_fail@plt+0x53a0>
   16324:	mov	r0, r2
   16328:	cmp	sl, r4
   1632c:	strbhi	r5, [r9, r4]
   16330:	add	r4, r4, #1
   16334:	ldrb	r5, [lr, #1]!
   16338:	cmp	r2, #0
   1633c:	bne	1628c <__assert_fail@plt+0x4dac>
   16340:	eor	r3, r0, #1
   16344:	cmp	r6, #0
   16348:	and	r3, r3, fp
   1634c:	uxtb	r3, r3
   16350:	beq	16364 <__assert_fail@plt+0x4e84>
   16354:	cmp	sl, r4
   16358:	movhi	r6, #92	; 0x5c
   1635c:	strbhi	r6, [r9, r4]
   16360:	add	r4, r4, #1
   16364:	add	r7, r7, #1
   16368:	cmp	r7, r1
   1636c:	bcs	16860 <__assert_fail@plt+0x5380>
   16370:	cmp	r3, #0
   16374:	beq	168a4 <__assert_fail@plt+0x53c4>
   16378:	cmp	sl, r4
   1637c:	add	r3, r4, #1
   16380:	mov	r6, #0
   16384:	strbhi	ip, [r9, r4]
   16388:	cmp	sl, r3
   1638c:	add	r4, r4, #2
   16390:	mov	fp, r6
   16394:	strbhi	ip, [r9, r3]
   16398:	b	16328 <__assert_fail@plt+0x4e48>
   1639c:	ldr	r3, [sp, #36]	; 0x24
   163a0:	ldrb	r5, [r3]
   163a4:	cmp	r5, #126	; 0x7e
   163a8:	ldrls	pc, [pc, r5, lsl #2]
   163ac:	b	1620c <__assert_fail@plt+0x4d2c>
   163b0:	ldrdeq	r6, [r1], -r0
   163b4:	andeq	r6, r1, ip, lsl #4
   163b8:	andeq	r6, r1, ip, lsl #4
   163bc:	andeq	r6, r1, ip, lsl #4
   163c0:	andeq	r6, r1, ip, lsl #4
   163c4:	andeq	r6, r1, ip, lsl #4
   163c8:	andeq	r6, r1, ip, lsl #4
   163cc:	andeq	r5, r1, r4, asr #21
   163d0:			; <UNDEFINED> instruction: 0x00015abc
   163d4:	andeq	r6, r1, ip, lsr r1
   163d8:	andeq	r6, r1, r4, asr #11
   163dc:	andeq	r6, r1, ip, lsl r1
   163e0:	andeq	r5, r1, r8, ror #18
   163e4:			; <UNDEFINED> instruction: 0x000165b8
   163e8:	andeq	r6, r1, ip, lsl #4
   163ec:	andeq	r6, r1, ip, lsl #4
   163f0:	andeq	r6, r1, ip, lsl #4
   163f4:	andeq	r6, r1, ip, lsl #4
   163f8:	andeq	r6, r1, ip, lsl #4
   163fc:	andeq	r6, r1, ip, lsl #4
   16400:	andeq	r6, r1, ip, lsl #4
   16404:	andeq	r6, r1, ip, lsl #4
   16408:	andeq	r6, r1, ip, lsl #4
   1640c:	andeq	r6, r1, ip, lsl #4
   16410:	andeq	r6, r1, ip, lsl #4
   16414:	andeq	r6, r1, ip, lsl #4
   16418:	andeq	r6, r1, ip, lsl #4
   1641c:	andeq	r6, r1, ip, lsl #4
   16420:	andeq	r6, r1, ip, lsl #4
   16424:	andeq	r6, r1, ip, lsl #4
   16428:	andeq	r6, r1, ip, lsl #4
   1642c:	andeq	r6, r1, ip, lsl #4
   16430:	andeq	r6, r1, ip, lsr #2
   16434:	andeq	r6, r1, ip, lsr #11
   16438:	andeq	r6, r1, ip, lsr #11
   1643c:	andeq	r6, r1, r0, lsl r1
   16440:	andeq	r6, r1, ip, lsr #11
   16444:	andeq	r6, r1, r0, lsl #2
   16448:	andeq	r6, r1, ip, lsr #11
   1644c:	andeq	r6, r1, r4, ror r1
   16450:	andeq	r6, r1, ip, lsr #11
   16454:	andeq	r6, r1, ip, lsr #11
   16458:	andeq	r6, r1, ip, lsr #11
   1645c:	andeq	r6, r1, r0, lsl #2
   16460:	andeq	r6, r1, r0, lsl #2
   16464:	andeq	r6, r1, r0, lsl #2
   16468:	andeq	r6, r1, r0, lsl #2
   1646c:	andeq	r6, r1, r0, lsl #2
   16470:	andeq	r6, r1, r0, lsl #2
   16474:	andeq	r6, r1, r0, lsl #2
   16478:	andeq	r6, r1, r0, lsl #2
   1647c:	andeq	r6, r1, r0, lsl #2
   16480:	andeq	r6, r1, r0, lsl #2
   16484:	andeq	r6, r1, r0, lsl #2
   16488:	andeq	r6, r1, r0, lsl #2
   1648c:	andeq	r6, r1, r0, lsl #2
   16490:	andeq	r6, r1, r0, lsl #2
   16494:	andeq	r6, r1, r0, lsl #2
   16498:	andeq	r6, r1, r0, lsl #2
   1649c:	andeq	r6, r1, ip, lsr #11
   164a0:	andeq	r6, r1, ip, lsr #11
   164a4:	andeq	r6, r1, ip, lsr #11
   164a8:	andeq	r6, r1, ip, lsr #11
   164ac:	andeq	r6, r1, ip, asr #2
   164b0:	andeq	r6, r1, ip, lsl #4
   164b4:	andeq	r6, r1, r0, lsl #2
   164b8:	andeq	r6, r1, r0, lsl #2
   164bc:	andeq	r6, r1, r0, lsl #2
   164c0:	andeq	r6, r1, r0, lsl #2
   164c4:	andeq	r6, r1, r0, lsl #2
   164c8:	andeq	r6, r1, r0, lsl #2
   164cc:	andeq	r6, r1, r0, lsl #2
   164d0:	andeq	r6, r1, r0, lsl #2
   164d4:	andeq	r6, r1, r0, lsl #2
   164d8:	andeq	r6, r1, r0, lsl #2
   164dc:	andeq	r6, r1, r0, lsl #2
   164e0:	andeq	r6, r1, r0, lsl #2
   164e4:	andeq	r6, r1, r0, lsl #2
   164e8:	andeq	r6, r1, r0, lsl #2
   164ec:	andeq	r6, r1, r0, lsl #2
   164f0:	andeq	r6, r1, r0, lsl #2
   164f4:	andeq	r6, r1, r0, lsl #2
   164f8:	andeq	r6, r1, r0, lsl #2
   164fc:	andeq	r6, r1, r0, lsl #2
   16500:	andeq	r6, r1, r0, lsl #2
   16504:	andeq	r6, r1, r0, lsl #2
   16508:	andeq	r6, r1, r0, lsl #2
   1650c:	andeq	r6, r1, r0, lsl #2
   16510:	andeq	r6, r1, r0, lsl #2
   16514:	andeq	r6, r1, r0, lsl #2
   16518:	andeq	r6, r1, r0, lsl #2
   1651c:	andeq	r6, r1, ip, lsr #11
   16520:	andeq	r6, r1, ip, asr #1
   16524:	andeq	r6, r1, r0, lsl #2
   16528:	andeq	r6, r1, ip, lsr #11
   1652c:	andeq	r6, r1, r0, lsl #2
   16530:	andeq	r6, r1, ip, lsr #11
   16534:	andeq	r6, r1, r0, lsl #2
   16538:	andeq	r6, r1, r0, lsl #2
   1653c:	andeq	r6, r1, r0, lsl #2
   16540:	andeq	r6, r1, r0, lsl #2
   16544:	andeq	r6, r1, r0, lsl #2
   16548:	andeq	r6, r1, r0, lsl #2
   1654c:	andeq	r6, r1, r0, lsl #2
   16550:	andeq	r6, r1, r0, lsl #2
   16554:	andeq	r6, r1, r0, lsl #2
   16558:	andeq	r6, r1, r0, lsl #2
   1655c:	andeq	r6, r1, r0, lsl #2
   16560:	andeq	r6, r1, r0, lsl #2
   16564:	andeq	r6, r1, r0, lsl #2
   16568:	andeq	r6, r1, r0, lsl #2
   1656c:	andeq	r6, r1, r0, lsl #2
   16570:	andeq	r6, r1, r0, lsl #2
   16574:	andeq	r6, r1, r0, lsl #2
   16578:	andeq	r6, r1, r0, lsl #2
   1657c:	andeq	r6, r1, r0, lsl #2
   16580:	andeq	r6, r1, r0, lsl #2
   16584:	andeq	r6, r1, r0, lsl #2
   16588:	andeq	r6, r1, r0, lsl #2
   1658c:	andeq	r6, r1, r0, lsl #2
   16590:	andeq	r6, r1, r0, lsl #2
   16594:	andeq	r6, r1, r0, lsl #2
   16598:	andeq	r6, r1, r0, lsl #2
   1659c:	andeq	r6, r1, r8, lsr #1
   165a0:	andeq	r6, r1, ip, lsr #11
   165a4:	andeq	r6, r1, r8, lsr #1
   165a8:	andeq	r6, r1, r0, lsl r1
   165ac:	mov	r3, #0
   165b0:	str	r3, [sp, #40]	; 0x28
   165b4:	b	15c8c <__assert_fail@plt+0x47ac>
   165b8:	mov	r3, #0
   165bc:	str	r3, [sp, #40]	; 0x28
   165c0:	b	15c24 <__assert_fail@plt+0x4744>
   165c4:	mov	r3, #0
   165c8:	str	r3, [sp, #40]	; 0x28
   165cc:	b	15c58 <__assert_fail@plt+0x4778>
   165d0:	ldr	r3, [sp, #44]	; 0x2c
   165d4:	cmp	r3, #0
   165d8:	beq	15b70 <__assert_fail@plt+0x4690>
   165dc:	ldr	r3, [sp, #52]	; 0x34
   165e0:	mov	fp, r9
   165e4:	str	r3, [sp, #60]	; 0x3c
   165e8:	b	15ce8 <__assert_fail@plt+0x4808>
   165ec:	ldr	r3, [sp, #44]	; 0x2c
   165f0:	cmp	r3, #0
   165f4:	bne	16a28 <__assert_fail@plt+0x5548>
   165f8:	str	r3, [sp, #40]	; 0x28
   165fc:	cmp	sl, #0
   16600:	ldr	r3, [sp, #84]	; 0x54
   16604:	clz	r3, r3
   16608:	lsr	r3, r3, #5
   1660c:	moveq	r3, #0
   16610:	cmp	r3, #0
   16614:	strne	sl, [sp, #84]	; 0x54
   16618:	movne	sl, #0
   1661c:	bne	1664c <__assert_fail@plt+0x516c>
   16620:	cmp	sl, r4
   16624:	movhi	r3, #39	; 0x27
   16628:	strbhi	r3, [r9, r4]
   1662c:	add	r3, r4, #1
   16630:	cmp	sl, r3
   16634:	movhi	r2, #92	; 0x5c
   16638:	strbhi	r2, [r9, r3]
   1663c:	add	r3, r4, #2
   16640:	cmp	sl, r3
   16644:	movhi	r2, #39	; 0x27
   16648:	strbhi	r2, [r9, r3]
   1664c:	mov	r3, #0
   16650:	add	r4, r4, #3
   16654:	str	r6, [sp, #80]	; 0x50
   16658:	mov	fp, r3
   1665c:	mov	r5, #39	; 0x27
   16660:	b	15b2c <__assert_fail@plt+0x464c>
   16664:	ldr	r3, [sp, #44]	; 0x2c
   16668:	cmp	r3, #0
   1666c:	bne	16a28 <__assert_fail@plt+0x5548>
   16670:	mov	r6, #0
   16674:	mov	r5, #63	; 0x3f
   16678:	str	r3, [sp, #40]	; 0x28
   1667c:	mov	r3, fp
   16680:	b	15b2c <__assert_fail@plt+0x464c>
   16684:	mov	r2, #0
   16688:	mov	r3, #0
   1668c:	cmn	r8, #1
   16690:	strd	r2, [sp, #128]	; 0x80
   16694:	bne	166a4 <__assert_fail@plt+0x51c4>
   16698:	ldr	r0, [sp, #28]
   1669c:	bl	11354 <strlen@plt>
   166a0:	mov	r8, r0
   166a4:	str	r9, [sp, #100]	; 0x64
   166a8:	mov	r3, #0
   166ac:	strd	sl, [sp, #104]	; 0x68
   166b0:	ldr	sl, [sp, #28]
   166b4:	str	r5, [sp, #112]	; 0x70
   166b8:	mov	r5, r3
   166bc:	ldr	r9, [sp, #68]	; 0x44
   166c0:	str	r4, [sp, #116]	; 0x74
   166c4:	add	r4, r7, r5
   166c8:	add	r3, sp, #128	; 0x80
   166cc:	add	fp, sl, r4
   166d0:	sub	r2, r8, r4
   166d4:	mov	r1, fp
   166d8:	add	r0, sp, #124	; 0x7c
   166dc:	bl	1aed0 <__assert_fail@plt+0x99f0>
   166e0:	subs	r1, r0, #0
   166e4:	beq	16724 <__assert_fail@plt+0x5244>
   166e8:	cmn	r1, #1
   166ec:	beq	16a7c <__assert_fail@plt+0x559c>
   166f0:	cmn	r1, #2
   166f4:	beq	16a9c <__assert_fail@plt+0x55bc>
   166f8:	cmp	r9, #0
   166fc:	bne	16754 <__assert_fail@plt+0x5274>
   16700:	ldr	r0, [sp, #124]	; 0x7c
   16704:	add	r5, r5, r1
   16708:	bl	11258 <iswprint@plt>
   1670c:	cmp	r0, #0
   16710:	add	r0, sp, #128	; 0x80
   16714:	moveq	r6, #0
   16718:	bl	111e0 <mbsinit@plt>
   1671c:	cmp	r0, #0
   16720:	beq	166c4 <__assert_fail@plt+0x51e4>
   16724:	ldr	r3, [sp, #60]	; 0x3c
   16728:	add	r9, sp, #100	; 0x64
   1672c:	mov	r0, r5
   16730:	ldm	r9, {r9, sl, fp}
   16734:	eor	r2, r6, #1
   16738:	ldr	r5, [sp, #112]	; 0x70
   1673c:	and	r2, r2, r3
   16740:	uxtb	r2, r2
   16744:	ldr	r4, [sp, #116]	; 0x74
   16748:	cmp	r0, #1
   1674c:	bhi	16268 <__assert_fail@plt+0x4d88>
   16750:	b	16258 <__assert_fail@plt+0x4d78>
   16754:	cmp	r1, #1
   16758:	beq	16700 <__assert_fail@plt+0x5220>
   1675c:	add	r2, r4, #1
   16760:	add	r3, sl, r1
   16764:	add	r2, sl, r2
   16768:	add	r4, r3, r4
   1676c:	ldrb	r3, [r2], #1
   16770:	sub	r3, r3, #91	; 0x5b
   16774:	cmp	r3, #33	; 0x21
   16778:	ldrls	pc, [pc, r3, lsl #2]
   1677c:	b	16808 <__assert_fail@plt+0x5328>
   16780:	andeq	r6, r1, r4, lsl r8
   16784:	andeq	r6, r1, r4, lsl r8
   16788:	andeq	r6, r1, r8, lsl #16
   1678c:	andeq	r6, r1, r4, lsl r8
   16790:	andeq	r6, r1, r8, lsl #16
   16794:	andeq	r6, r1, r4, lsl r8
   16798:	andeq	r6, r1, r8, lsl #16
   1679c:	andeq	r6, r1, r8, lsl #16
   167a0:	andeq	r6, r1, r8, lsl #16
   167a4:	andeq	r6, r1, r8, lsl #16
   167a8:	andeq	r6, r1, r8, lsl #16
   167ac:	andeq	r6, r1, r8, lsl #16
   167b0:	andeq	r6, r1, r8, lsl #16
   167b4:	andeq	r6, r1, r8, lsl #16
   167b8:	andeq	r6, r1, r8, lsl #16
   167bc:	andeq	r6, r1, r8, lsl #16
   167c0:	andeq	r6, r1, r8, lsl #16
   167c4:	andeq	r6, r1, r8, lsl #16
   167c8:	andeq	r6, r1, r8, lsl #16
   167cc:	andeq	r6, r1, r8, lsl #16
   167d0:	andeq	r6, r1, r8, lsl #16
   167d4:	andeq	r6, r1, r8, lsl #16
   167d8:	andeq	r6, r1, r8, lsl #16
   167dc:	andeq	r6, r1, r8, lsl #16
   167e0:	andeq	r6, r1, r8, lsl #16
   167e4:	andeq	r6, r1, r8, lsl #16
   167e8:	andeq	r6, r1, r8, lsl #16
   167ec:	andeq	r6, r1, r8, lsl #16
   167f0:	andeq	r6, r1, r8, lsl #16
   167f4:	andeq	r6, r1, r8, lsl #16
   167f8:	andeq	r6, r1, r8, lsl #16
   167fc:	andeq	r6, r1, r8, lsl #16
   16800:	andeq	r6, r1, r8, lsl #16
   16804:	andeq	r6, r1, r4, lsl r8
   16808:	cmp	r4, r2
   1680c:	bne	1676c <__assert_fail@plt+0x528c>
   16810:	b	16700 <__assert_fail@plt+0x5220>
   16814:	mov	r3, #2
   16818:	ldr	fp, [sp, #100]	; 0x64
   1681c:	str	r3, [sp, #176]	; 0xb0
   16820:	ldr	sl, [sp, #104]	; 0x68
   16824:	b	15ce8 <__assert_fail@plt+0x4808>
   16828:	ldr	r2, [sp, #52]	; 0x34
   1682c:	mov	fp, r9
   16830:	ldr	r3, [sp, #60]	; 0x3c
   16834:	and	r3, r3, r2
   16838:	str	r3, [sp, #60]	; 0x3c
   1683c:	b	15ce8 <__assert_fail@plt+0x4808>
   16840:	cmp	sl, r4
   16844:	movhi	r2, fp
   16848:	bhi	15bc0 <__assert_fail@plt+0x46e0>
   1684c:	mov	r2, r4
   16850:	b	15bd0 <__assert_fail@plt+0x46f0>
   16854:	mov	r6, r3
   16858:	mov	r5, #63	; 0x3f
   1685c:	b	15c90 <__assert_fail@plt+0x47b0>
   16860:	ldr	r8, [sp, #36]	; 0x24
   16864:	ldr	r6, [sp, #100]	; 0x64
   16868:	b	15b3c <__assert_fail@plt+0x465c>
   1686c:	mov	fp, r9
   16870:	ldr	r8, [sp, #36]	; 0x24
   16874:	ldr	r3, [sp, #52]	; 0x34
   16878:	str	r3, [sp, #60]	; 0x3c
   1687c:	b	15ce8 <__assert_fail@plt+0x4808>
   16880:	ldr	r8, [sp, #36]	; 0x24
   16884:	ldr	r6, [sp, #100]	; 0x64
   16888:	b	159d4 <__assert_fail@plt+0x44f4>
   1688c:	mov	r3, #0
   16890:	add	r4, r4, #4
   16894:	mov	fp, r2
   16898:	mov	r6, r3
   1689c:	mov	r5, #48	; 0x30
   168a0:	b	15b2c <__assert_fail@plt+0x464c>
   168a4:	mov	r6, r3
   168a8:	b	16328 <__assert_fail@plt+0x4e48>
   168ac:	mov	r3, #1
   168b0:	movw	r2, #46992	; 0xb790
   168b4:	movt	r2, #1
   168b8:	mov	r4, r3
   168bc:	mov	r9, sl
   168c0:	str	r3, [sp, #32]
   168c4:	str	sl, [sp, #44]	; 0x2c
   168c8:	str	r3, [sp, #48]	; 0x30
   168cc:	str	sl, [sp, #52]	; 0x34
   168d0:	str	r3, [sp, #56]	; 0x38
   168d4:	str	r3, [sp, #60]	; 0x3c
   168d8:	str	sl, [sp, #64]	; 0x40
   168dc:	str	sl, [sp, #68]	; 0x44
   168e0:	str	r2, [sp, #72]	; 0x48
   168e4:	str	sl, [sp, #80]	; 0x50
   168e8:	str	sl, [sp, #84]	; 0x54
   168ec:	str	sl, [sp, #88]	; 0x58
   168f0:	b	153e0 <__assert_fail@plt+0x3f00>
   168f4:	mov	r3, #0
   168f8:	mov	r5, #48	; 0x30
   168fc:	mov	r6, r3
   16900:	b	15b2c <__assert_fail@plt+0x464c>
   16904:	cmp	sl, r4
   16908:	mov	r5, #48	; 0x30
   1690c:	movhi	r3, #48	; 0x30
   16910:	strbhi	r3, [r9, r4]
   16914:	add	r3, r2, #2
   16918:	add	r4, r2, #3
   1691c:	cmp	sl, r3
   16920:	movhi	r1, #48	; 0x30
   16924:	strbhi	r1, [r9, r3]
   16928:	mov	r3, #0
   1692c:	b	15c08 <__assert_fail@plt+0x4728>
   16930:	ldr	r3, [sp, #48]	; 0x30
   16934:	str	r3, [sp, #40]	; 0x28
   16938:	b	16214 <__assert_fail@plt+0x4d34>
   1693c:	ldr	r2, [sp, #28]
   16940:	ldrb	r2, [r2, r3]
   16944:	sub	r1, r2, #33	; 0x21
   16948:	cmp	r1, #29
   1694c:	ldrls	pc, [pc, r1, lsl #2]
   16950:	b	15c8c <__assert_fail@plt+0x47ac>
   16954:	andeq	r6, r1, ip, asr #19
   16958:	andeq	r5, r1, ip, lsl #25
   1695c:	andeq	r5, r1, ip, lsl #25
   16960:	andeq	r5, r1, ip, lsl #25
   16964:	andeq	r5, r1, ip, lsl #25
   16968:	andeq	r5, r1, ip, lsl #25
   1696c:	andeq	r6, r1, ip, asr #19
   16970:	andeq	r6, r1, ip, asr #19
   16974:	andeq	r6, r1, ip, asr #19
   16978:	andeq	r5, r1, ip, lsl #25
   1697c:	andeq	r5, r1, ip, lsl #25
   16980:	andeq	r5, r1, ip, lsl #25
   16984:	andeq	r6, r1, ip, asr #19
   16988:	andeq	r5, r1, ip, lsl #25
   1698c:	andeq	r6, r1, ip, asr #19
   16990:	andeq	r5, r1, ip, lsl #25
   16994:	andeq	r5, r1, ip, lsl #25
   16998:	andeq	r5, r1, ip, lsl #25
   1699c:	andeq	r5, r1, ip, lsl #25
   169a0:	andeq	r5, r1, ip, lsl #25
   169a4:	andeq	r5, r1, ip, lsl #25
   169a8:	andeq	r5, r1, ip, lsl #25
   169ac:	andeq	r5, r1, ip, lsl #25
   169b0:	andeq	r5, r1, ip, lsl #25
   169b4:	andeq	r5, r1, ip, lsl #25
   169b8:	andeq	r5, r1, ip, lsl #25
   169bc:	andeq	r5, r1, ip, lsl #25
   169c0:	andeq	r6, r1, ip, asr #19
   169c4:	andeq	r6, r1, ip, asr #19
   169c8:	andeq	r6, r1, ip, asr #19
   169cc:	ldr	r1, [sp, #44]	; 0x2c
   169d0:	cmp	r1, #0
   169d4:	bne	16c34 <__assert_fail@plt+0x5754>
   169d8:	cmp	sl, r4
   169dc:	mov	r7, r3
   169e0:	movhi	r1, #63	; 0x3f
   169e4:	mov	r5, r2
   169e8:	mov	r3, fp
   169ec:	strbhi	r1, [r9, r4]
   169f0:	add	r1, r4, #1
   169f4:	cmp	sl, r1
   169f8:	movhi	r0, #34	; 0x22
   169fc:	strbhi	r0, [r9, r1]
   16a00:	add	r1, r4, #2
   16a04:	cmp	sl, r1
   16a08:	movhi	r0, #34	; 0x22
   16a0c:	strbhi	r0, [r9, r1]
   16a10:	add	r1, r4, #3
   16a14:	add	r4, r4, #4
   16a18:	cmp	sl, r1
   16a1c:	movhi	r0, #63	; 0x3f
   16a20:	strbhi	r0, [r9, r1]
   16a24:	b	15c08 <__assert_fail@plt+0x4728>
   16a28:	mov	fp, r9
   16a2c:	b	15ce8 <__assert_fail@plt+0x4808>
   16a30:	ldr	r3, [sp, #188]	; 0xbc
   16a34:	ldrb	r3, [r3]
   16a38:	cmp	r3, #0
   16a3c:	beq	15378 <__assert_fail@plt+0x3e98>
   16a40:	ldr	r2, [sp, #188]	; 0xbc
   16a44:	cmp	sl, r4
   16a48:	bls	16a68 <__assert_fail@plt+0x5588>
   16a4c:	strb	r3, [fp, r4]
   16a50:	add	r4, r4, #1
   16a54:	ldrb	r3, [r2, #1]!
   16a58:	cmp	r3, #0
   16a5c:	beq	15378 <__assert_fail@plt+0x3e98>
   16a60:	cmp	sl, r4
   16a64:	bhi	16a4c <__assert_fail@plt+0x556c>
   16a68:	ldrb	r3, [r2, #1]!
   16a6c:	add	r4, r4, #1
   16a70:	cmp	r3, #0
   16a74:	bne	16a44 <__assert_fail@plt+0x5564>
   16a78:	b	15378 <__assert_fail@plt+0x3e98>
   16a7c:	add	r9, sp, #100	; 0x64
   16a80:	mov	r0, r5
   16a84:	ldr	r2, [sp, #60]	; 0x3c
   16a88:	mov	r6, #0
   16a8c:	ldm	r9, {r9, sl, fp}
   16a90:	ldr	r5, [sp, #112]	; 0x70
   16a94:	ldr	r4, [sp, #116]	; 0x74
   16a98:	b	16748 <__assert_fail@plt+0x5268>
   16a9c:	cmp	r4, r8
   16aa0:	add	r9, sp, #100	; 0x64
   16aa4:	mov	r1, r4
   16aa8:	mov	r2, fp
   16aac:	ldm	r9, {r9, sl, fp}
   16ab0:	mov	r3, r5
   16ab4:	mov	r0, r5
   16ab8:	ldr	r5, [sp, #112]	; 0x70
   16abc:	ldr	r4, [sp, #116]	; 0x74
   16ac0:	bcs	16af4 <__assert_fail@plt+0x5614>
   16ac4:	ldrb	r6, [r2]
   16ac8:	cmp	r6, #0
   16acc:	bne	16ae0 <__assert_fail@plt+0x5600>
   16ad0:	b	16c2c <__assert_fail@plt+0x574c>
   16ad4:	ldrb	r6, [r2, #1]!
   16ad8:	cmp	r6, #0
   16adc:	beq	16bc4 <__assert_fail@plt+0x56e4>
   16ae0:	add	r3, r3, #1
   16ae4:	add	r1, r7, r3
   16ae8:	cmp	r8, r1
   16aec:	bhi	16ad4 <__assert_fail@plt+0x55f4>
   16af0:	mov	r0, r3
   16af4:	mov	r6, #0
   16af8:	ldr	r2, [sp, #60]	; 0x3c
   16afc:	b	16748 <__assert_fail@plt+0x5268>
   16b00:	mov	r3, #1
   16b04:	mov	r4, #0
   16b08:	mov	r9, r4
   16b0c:	str	r3, [sp, #32]
   16b10:	str	r3, [sp, #44]	; 0x2c
   16b14:	str	r3, [sp, #48]	; 0x30
   16b18:	str	r4, [sp, #52]	; 0x34
   16b1c:	str	r3, [sp, #56]	; 0x38
   16b20:	str	r3, [sp, #60]	; 0x3c
   16b24:	str	r3, [sp, #88]	; 0x58
   16b28:	movw	r3, #46992	; 0xb790
   16b2c:	movt	r3, #1
   16b30:	str	r4, [sp, #64]	; 0x40
   16b34:	str	r4, [sp, #68]	; 0x44
   16b38:	str	r3, [sp, #72]	; 0x48
   16b3c:	str	r4, [sp, #80]	; 0x50
   16b40:	str	r4, [sp, #84]	; 0x54
   16b44:	b	153e0 <__assert_fail@plt+0x3f00>
   16b48:	mov	fp, r9
   16b4c:	b	15cfc <__assert_fail@plt+0x481c>
   16b50:	ldr	r3, [sp, #48]	; 0x30
   16b54:	b	16670 <__assert_fail@plt+0x5190>
   16b58:	mov	r2, r3
   16b5c:	ldr	r3, [sp, #72]	; 0x48
   16b60:	cmp	r3, #0
   16b64:	moveq	r2, #0
   16b68:	andne	r2, r2, #1
   16b6c:	cmp	r2, #0
   16b70:	beq	16ba0 <__assert_fail@plt+0x56c0>
   16b74:	mov	r2, r3
   16b78:	ldrb	r3, [r3]
   16b7c:	cmp	r3, #0
   16b80:	beq	16ba0 <__assert_fail@plt+0x56c0>
   16b84:	cmp	sl, r4
   16b88:	bls	16bb0 <__assert_fail@plt+0x56d0>
   16b8c:	strb	r3, [fp, r4]
   16b90:	add	r4, r4, #1
   16b94:	ldrb	r3, [r2, #1]!
   16b98:	cmp	r3, #0
   16b9c:	bne	16b84 <__assert_fail@plt+0x56a4>
   16ba0:	cmp	sl, r4
   16ba4:	movhi	r3, #0
   16ba8:	strbhi	r3, [fp, r4]
   16bac:	b	15d38 <__assert_fail@plt+0x4858>
   16bb0:	ldrb	r3, [r2, #1]!
   16bb4:	add	r4, r4, #1
   16bb8:	cmp	r3, #0
   16bbc:	bne	16b84 <__assert_fail@plt+0x56a4>
   16bc0:	b	16ba0 <__assert_fail@plt+0x56c0>
   16bc4:	mov	r0, r3
   16bc8:	ldr	r2, [sp, #60]	; 0x3c
   16bcc:	b	16748 <__assert_fail@plt+0x5268>
   16bd0:	mov	ip, #5
   16bd4:	mov	r3, r8
   16bd8:	ldr	r1, [sp, #84]	; 0x54
   16bdc:	str	ip, [sp]
   16be0:	ldr	r2, [sp, #180]	; 0xb4
   16be4:	ldr	ip, [sp, #188]	; 0xbc
   16be8:	ldr	r0, [sp, #184]	; 0xb8
   16bec:	str	r2, [sp, #4]
   16bf0:	ldr	r2, [sp, #28]
   16bf4:	str	ip, [sp, #12]
   16bf8:	ldr	ip, [sp, #192]	; 0xc0
   16bfc:	str	r0, [sp, #8]
   16c00:	mov	r0, fp
   16c04:	str	ip, [sp, #16]
   16c08:	bl	152bc <__assert_fail@plt+0x3ddc>
   16c0c:	mov	r4, r0
   16c10:	b	15d38 <__assert_fail@plt+0x4858>
   16c14:	mov	r6, r3
   16c18:	str	r3, [sp, #40]	; 0x28
   16c1c:	b	15ca8 <__assert_fail@plt+0x47c8>
   16c20:	mov	r3, #2
   16c24:	str	r3, [sp, #176]	; 0xb0
   16c28:	b	15ce8 <__assert_fail@plt+0x4808>
   16c2c:	ldr	r2, [sp, #60]	; 0x3c
   16c30:	b	16748 <__assert_fail@plt+0x5268>
   16c34:	mov	r3, #5
   16c38:	mov	fp, r9
   16c3c:	str	r3, [sp, #176]	; 0xb0
   16c40:	b	15cfc <__assert_fail@plt+0x481c>
   16c44:	mov	r1, #1
   16c48:	mov	r9, #0
   16c4c:	mov	r3, r9
   16c50:	mov	r2, r9
   16c54:	str	r1, [sp, #32]
   16c58:	str	sl, [sp, #84]	; 0x54
   16c5c:	b	15a84 <__assert_fail@plt+0x45a4>
   16c60:	mov	r3, #0
   16c64:	mov	r2, #1
   16c68:	mov	r9, r3
   16c6c:	mov	r4, r3
   16c70:	str	r2, [sp, #32]
   16c74:	strd	r2, [sp, #44]	; 0x2c
   16c78:	strd	r2, [sp, #56]	; 0x38
   16c7c:	str	r3, [sp, #80]	; 0x50
   16c80:	str	r3, [sp, #84]	; 0x54
   16c84:	str	r3, [sp, #88]	; 0x58
   16c88:	movw	r3, #51088	; 0xc790
   16c8c:	movt	r3, #1
   16c90:	str	r2, [sp, #52]	; 0x34
   16c94:	str	r2, [sp, #64]	; 0x40
   16c98:	str	r2, [sp, #68]	; 0x44
   16c9c:	str	r3, [sp, #72]	; 0x48
   16ca0:	b	153e0 <__assert_fail@plt+0x3f00>
   16ca4:	bl	114bc <abort@plt>
   16ca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cac:	mov	r4, r0
   16cb0:	mov	r5, r3
   16cb4:	strd	r6, [sp, #8]
   16cb8:	movw	r7, #53612	; 0xd16c
   16cbc:	movt	r7, #2
   16cc0:	strd	r8, [sp, #16]
   16cc4:	strd	sl, [sp, #24]
   16cc8:	mov	sl, r1
   16ccc:	mov	fp, r2
   16cd0:	str	lr, [sp, #32]
   16cd4:	sub	sp, sp, #60	; 0x3c
   16cd8:	bl	1139c <__errno_location@plt>
   16cdc:	mov	r8, r0
   16ce0:	cmn	r4, #-2147483647	; 0x80000001
   16ce4:	ldr	r6, [r7]
   16ce8:	movne	r0, #0
   16cec:	moveq	r0, #1
   16cf0:	ldr	r3, [r8]
   16cf4:	orrs	r0, r0, r4, lsr #31
   16cf8:	str	r3, [sp, #28]
   16cfc:	bne	16e8c <__assert_fail@plt+0x59ac>
   16d00:	ldr	r3, [r7, #4]
   16d04:	cmp	r3, r4
   16d08:	bgt	16d68 <__assert_fail@plt+0x5888>
   16d0c:	add	r1, r7, #8
   16d10:	sub	r2, r4, r3
   16d14:	str	r3, [sp, #52]	; 0x34
   16d18:	cmp	r6, r1
   16d1c:	add	r2, r2, #1
   16d20:	beq	16e64 <__assert_fail@plt+0x5984>
   16d24:	mov	r1, #8
   16d28:	mov	r0, r6
   16d2c:	mvn	r3, #-2147483648	; 0x80000000
   16d30:	str	r1, [sp]
   16d34:	add	r1, sp, #52	; 0x34
   16d38:	bl	19a00 <__assert_fail@plt+0x8520>
   16d3c:	mov	r6, r0
   16d40:	str	r0, [r7]
   16d44:	ldr	r0, [r7, #4]
   16d48:	mov	r1, #0
   16d4c:	ldr	r2, [sp, #52]	; 0x34
   16d50:	sub	r2, r2, r0
   16d54:	add	r0, r6, r0, lsl #3
   16d58:	lsl	r2, r2, #3
   16d5c:	bl	113c0 <memset@plt>
   16d60:	ldr	r3, [sp, #52]	; 0x34
   16d64:	str	r3, [r7, #4]
   16d68:	ldr	r1, [r5, #4]
   16d6c:	add	r0, r6, r4, lsl #3
   16d70:	add	ip, r5, #8
   16d74:	mov	r3, fp
   16d78:	mov	r2, sl
   16d7c:	ldr	r7, [r0, #4]
   16d80:	str	r0, [sp, #36]	; 0x24
   16d84:	str	ip, [sp, #40]	; 0x28
   16d88:	orr	r0, r1, #1
   16d8c:	ldr	r9, [r6, r4, lsl #3]
   16d90:	str	ip, [sp, #8]
   16d94:	ldr	lr, [r5, #44]	; 0x2c
   16d98:	str	r0, [sp, #4]
   16d9c:	ldr	ip, [r5]
   16da0:	mov	r1, r9
   16da4:	str	ip, [sp, #32]
   16da8:	ldr	ip, [r5, #40]	; 0x28
   16dac:	str	ip, [sp, #12]
   16db0:	ldr	ip, [sp, #32]
   16db4:	str	lr, [sp, #16]
   16db8:	str	r0, [sp, #44]	; 0x2c
   16dbc:	mov	r0, r7
   16dc0:	str	ip, [sp]
   16dc4:	bl	152bc <__assert_fail@plt+0x3ddc>
   16dc8:	cmp	r9, r0
   16dcc:	bhi	16e3c <__assert_fail@plt+0x595c>
   16dd0:	add	r9, r0, #1
   16dd4:	movw	r3, #54576	; 0xd530
   16dd8:	movt	r3, #2
   16ddc:	cmp	r7, r3
   16de0:	str	r9, [r6, r4, lsl #3]
   16de4:	beq	16df0 <__assert_fail@plt+0x5910>
   16de8:	mov	r0, r7
   16dec:	bl	14e68 <__assert_fail@plt+0x3988>
   16df0:	mov	r0, r9
   16df4:	bl	1975c <__assert_fail@plt+0x827c>
   16df8:	ldr	ip, [r5]
   16dfc:	mov	r3, fp
   16e00:	mov	r2, sl
   16e04:	mov	r1, r9
   16e08:	mov	r7, r0
   16e0c:	ldr	lr, [sp, #36]	; 0x24
   16e10:	ldr	r4, [r5, #40]	; 0x28
   16e14:	str	r0, [lr, #4]
   16e18:	ldr	lr, [r5, #44]	; 0x2c
   16e1c:	str	ip, [sp]
   16e20:	ldr	ip, [sp, #44]	; 0x2c
   16e24:	str	ip, [sp, #4]
   16e28:	ldr	ip, [sp, #40]	; 0x28
   16e2c:	str	r4, [sp, #12]
   16e30:	str	lr, [sp, #16]
   16e34:	str	ip, [sp, #8]
   16e38:	bl	152bc <__assert_fail@plt+0x3ddc>
   16e3c:	ldr	r3, [sp, #28]
   16e40:	mov	r0, r7
   16e44:	str	r3, [r8]
   16e48:	add	sp, sp, #60	; 0x3c
   16e4c:	ldrd	r4, [sp]
   16e50:	ldrd	r6, [sp, #8]
   16e54:	ldrd	r8, [sp, #16]
   16e58:	ldrd	sl, [sp, #24]
   16e5c:	add	sp, sp, #32
   16e60:	pop	{pc}		; (ldr pc, [sp], #4)
   16e64:	mov	r1, #8
   16e68:	mvn	r3, #-2147483648	; 0x80000000
   16e6c:	str	r1, [sp]
   16e70:	add	r1, sp, #52	; 0x34
   16e74:	bl	19a00 <__assert_fail@plt+0x8520>
   16e78:	ldrd	r2, [r7, #8]
   16e7c:	mov	r6, r0
   16e80:	str	r0, [r7]
   16e84:	strd	r2, [r0]
   16e88:	b	16d44 <__assert_fail@plt+0x5864>
   16e8c:	bl	114bc <abort@plt>
   16e90:	strd	r4, [sp, #-16]!
   16e94:	mov	r5, r0
   16e98:	str	r6, [sp, #8]
   16e9c:	str	lr, [sp, #12]
   16ea0:	bl	1139c <__errno_location@plt>
   16ea4:	mov	r4, r0
   16ea8:	cmp	r5, #0
   16eac:	ldr	r0, [pc, #32]	; 16ed4 <__assert_fail@plt+0x59f4>
   16eb0:	mov	r1, #48	; 0x30
   16eb4:	movne	r0, r5
   16eb8:	ldr	r6, [r4]
   16ebc:	bl	19ba0 <__assert_fail@plt+0x86c0>
   16ec0:	str	r6, [r4]
   16ec4:	ldrd	r4, [sp]
   16ec8:	ldr	r6, [sp, #8]
   16ecc:	add	sp, sp, #12
   16ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ed4:	andeq	sp, r2, r0, lsr r6
   16ed8:	ldr	r3, [pc, #12]	; 16eec <__assert_fail@plt+0x5a0c>
   16edc:	cmp	r0, #0
   16ee0:	moveq	r0, r3
   16ee4:	ldr	r0, [r0]
   16ee8:	bx	lr
   16eec:	andeq	sp, r2, r0, lsr r6
   16ef0:	ldr	r3, [pc, #12]	; 16f04 <__assert_fail@plt+0x5a24>
   16ef4:	cmp	r0, #0
   16ef8:	moveq	r0, r3
   16efc:	str	r1, [r0]
   16f00:	bx	lr
   16f04:	andeq	sp, r2, r0, lsr r6
   16f08:	ldr	r3, [pc, #52]	; 16f44 <__assert_fail@plt+0x5a64>
   16f0c:	cmp	r0, #0
   16f10:	push	{lr}		; (str lr, [sp, #-4]!)
   16f14:	lsr	lr, r1, #5
   16f18:	and	r1, r1, #31
   16f1c:	moveq	r0, r3
   16f20:	add	r3, r0, #8
   16f24:	ldr	ip, [r3, lr, lsl #2]
   16f28:	lsr	r0, ip, r1
   16f2c:	eor	r2, r2, r0
   16f30:	and	r0, r0, #1
   16f34:	and	r2, r2, #1
   16f38:	eor	r1, ip, r2, lsl r1
   16f3c:	str	r1, [r3, lr, lsl #2]
   16f40:	pop	{pc}		; (ldr pc, [sp], #4)
   16f44:	andeq	sp, r2, r0, lsr r6
   16f48:	ldr	r3, [pc, #16]	; 16f60 <__assert_fail@plt+0x5a80>
   16f4c:	cmp	r0, #0
   16f50:	movne	r3, r0
   16f54:	ldr	r0, [r3, #4]
   16f58:	str	r1, [r3, #4]
   16f5c:	bx	lr
   16f60:	andeq	sp, r2, r0, lsr r6
   16f64:	ldr	r3, [pc, #48]	; 16f9c <__assert_fail@plt+0x5abc>
   16f68:	cmp	r0, #0
   16f6c:	mov	ip, #10
   16f70:	moveq	r0, r3
   16f74:	cmp	r2, #0
   16f78:	cmpne	r1, #0
   16f7c:	str	ip, [r0]
   16f80:	beq	16f90 <__assert_fail@plt+0x5ab0>
   16f84:	str	r1, [r0, #40]	; 0x28
   16f88:	str	r2, [r0, #44]	; 0x2c
   16f8c:	bx	lr
   16f90:	str	r4, [sp, #-8]!
   16f94:	str	lr, [sp, #4]
   16f98:	bl	114bc <abort@plt>
   16f9c:	andeq	sp, r2, r0, lsr r6
   16fa0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16fa4:	strd	r6, [sp, #8]
   16fa8:	mov	r7, r0
   16fac:	mov	r6, r1
   16fb0:	strd	r8, [sp, #16]
   16fb4:	mov	r8, r2
   16fb8:	mov	r9, r3
   16fbc:	str	lr, [sp, #24]
   16fc0:	sub	sp, sp, #28
   16fc4:	ldr	r4, [sp, #56]	; 0x38
   16fc8:	ldr	ip, [pc, #104]	; 17038 <__assert_fail@plt+0x5b58>
   16fcc:	cmp	r4, #0
   16fd0:	moveq	r4, ip
   16fd4:	bl	1139c <__errno_location@plt>
   16fd8:	ldr	ip, [r4, #44]	; 0x2c
   16fdc:	mov	r5, r0
   16fe0:	mov	r1, r6
   16fe4:	add	lr, r4, #8
   16fe8:	mov	r3, r9
   16fec:	ldr	r6, [r5]
   16ff0:	mov	r2, r8
   16ff4:	mov	r0, r7
   16ff8:	str	ip, [sp, #16]
   16ffc:	ldr	ip, [r4, #40]	; 0x28
   17000:	str	lr, [sp, #8]
   17004:	str	ip, [sp, #12]
   17008:	ldr	ip, [r4, #4]
   1700c:	str	ip, [sp, #4]
   17010:	ldr	ip, [r4]
   17014:	str	ip, [sp]
   17018:	bl	152bc <__assert_fail@plt+0x3ddc>
   1701c:	str	r6, [r5]
   17020:	add	sp, sp, #28
   17024:	ldrd	r4, [sp]
   17028:	ldrd	r6, [sp, #8]
   1702c:	ldrd	r8, [sp, #16]
   17030:	add	sp, sp, #24
   17034:	pop	{pc}		; (ldr pc, [sp], #4)
   17038:	andeq	sp, r2, r0, lsr r6
   1703c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17040:	cmp	r2, #0
   17044:	ldr	r4, [pc, #192]	; 1710c <__assert_fail@plt+0x5c2c>
   17048:	movne	r4, r2
   1704c:	strd	r6, [sp, #8]
   17050:	strd	r8, [sp, #16]
   17054:	mov	r9, r1
   17058:	mov	r8, r0
   1705c:	strd	sl, [sp, #24]
   17060:	str	lr, [sp, #32]
   17064:	sub	sp, sp, #36	; 0x24
   17068:	bl	1139c <__errno_location@plt>
   1706c:	ldr	r5, [r4, #4]
   17070:	mov	r6, r0
   17074:	add	r7, r4, #8
   17078:	mov	r1, #0
   1707c:	mov	r3, r9
   17080:	ldr	ip, [r4, #44]	; 0x2c
   17084:	mov	r2, r8
   17088:	mov	r0, r1
   1708c:	ldr	sl, [r6]
   17090:	orr	r5, r5, #1
   17094:	str	ip, [sp, #16]
   17098:	ldr	ip, [r4, #40]	; 0x28
   1709c:	stmib	sp, {r5, r7, ip}
   170a0:	ldr	ip, [r4]
   170a4:	str	ip, [sp]
   170a8:	bl	152bc <__assert_fail@plt+0x3ddc>
   170ac:	add	r1, r0, #1
   170b0:	mov	r0, r1
   170b4:	str	r1, [sp, #28]
   170b8:	bl	1975c <__assert_fail@plt+0x827c>
   170bc:	ldr	ip, [r4, #44]	; 0x2c
   170c0:	mov	fp, r0
   170c4:	mov	r3, r9
   170c8:	mov	r2, r8
   170cc:	ldr	r1, [sp, #28]
   170d0:	str	ip, [sp, #16]
   170d4:	ldr	ip, [r4, #40]	; 0x28
   170d8:	stmib	sp, {r5, r7, ip}
   170dc:	ldr	ip, [r4]
   170e0:	str	ip, [sp]
   170e4:	bl	152bc <__assert_fail@plt+0x3ddc>
   170e8:	mov	r0, fp
   170ec:	str	sl, [r6]
   170f0:	add	sp, sp, #36	; 0x24
   170f4:	ldrd	r4, [sp]
   170f8:	ldrd	r6, [sp, #8]
   170fc:	ldrd	r8, [sp, #16]
   17100:	ldrd	sl, [sp, #24]
   17104:	add	sp, sp, #32
   17108:	pop	{pc}		; (ldr pc, [sp], #4)
   1710c:	andeq	sp, r2, r0, lsr r6
   17110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17114:	cmp	r3, #0
   17118:	ldr	r4, [pc, #220]	; 171fc <__assert_fail@plt+0x5d1c>
   1711c:	movne	r4, r3
   17120:	strd	r6, [sp, #8]
   17124:	mov	r6, r2
   17128:	strd	r8, [sp, #16]
   1712c:	mov	r9, r0
   17130:	strd	sl, [sp, #24]
   17134:	mov	sl, r1
   17138:	str	lr, [sp, #32]
   1713c:	sub	sp, sp, #44	; 0x2c
   17140:	bl	1139c <__errno_location@plt>
   17144:	ldr	r5, [r4, #4]
   17148:	mov	r7, r0
   1714c:	mov	r1, #0
   17150:	add	r8, r4, #8
   17154:	mov	r3, sl
   17158:	ldr	ip, [r4, #44]	; 0x2c
   1715c:	mov	r2, r9
   17160:	mov	r0, r1
   17164:	ldr	lr, [r7]
   17168:	cmp	r6, r1
   1716c:	orreq	r5, r5, #1
   17170:	str	ip, [sp, #16]
   17174:	ldr	ip, [r4, #40]	; 0x28
   17178:	stmib	sp, {r5, r8, ip}
   1717c:	ldr	ip, [r4]
   17180:	str	lr, [sp, #28]
   17184:	str	ip, [sp]
   17188:	bl	152bc <__assert_fail@plt+0x3ddc>
   1718c:	add	r1, r0, #1
   17190:	mov	fp, r0
   17194:	mov	r0, r1
   17198:	str	r1, [sp, #36]	; 0x24
   1719c:	bl	1975c <__assert_fail@plt+0x827c>
   171a0:	ldr	ip, [r4, #44]	; 0x2c
   171a4:	mov	r3, sl
   171a8:	mov	r2, r9
   171ac:	ldr	r1, [sp, #36]	; 0x24
   171b0:	str	ip, [sp, #16]
   171b4:	ldr	ip, [r4, #40]	; 0x28
   171b8:	str	r0, [sp, #32]
   171bc:	stmib	sp, {r5, r8, ip}
   171c0:	ldr	ip, [r4]
   171c4:	str	ip, [sp]
   171c8:	bl	152bc <__assert_fail@plt+0x3ddc>
   171cc:	ldr	lr, [sp, #28]
   171d0:	cmp	r6, #0
   171d4:	ldr	r0, [sp, #32]
   171d8:	str	lr, [r7]
   171dc:	strne	fp, [r6]
   171e0:	add	sp, sp, #44	; 0x2c
   171e4:	ldrd	r4, [sp]
   171e8:	ldrd	r6, [sp, #8]
   171ec:	ldrd	r8, [sp, #16]
   171f0:	ldrd	sl, [sp, #24]
   171f4:	add	sp, sp, #32
   171f8:	pop	{pc}		; (ldr pc, [sp], #4)
   171fc:	andeq	sp, r2, r0, lsr r6
   17200:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17204:	movw	r5, #53612	; 0xd16c
   17208:	movt	r5, #2
   1720c:	ldr	r3, [r5, #4]
   17210:	strd	r6, [sp, #8]
   17214:	str	r8, [sp, #16]
   17218:	str	lr, [sp, #20]
   1721c:	ldr	r7, [r5]
   17220:	cmp	r3, #1
   17224:	ble	17248 <__assert_fail@plt+0x5d68>
   17228:	mov	r4, #1
   1722c:	add	r6, r7, #4
   17230:	ldr	r0, [r6, r4, lsl #3]
   17234:	add	r4, r4, #1
   17238:	bl	14e68 <__assert_fail@plt+0x3988>
   1723c:	ldr	r3, [r5, #4]
   17240:	cmp	r3, r4
   17244:	bgt	17230 <__assert_fail@plt+0x5d50>
   17248:	ldr	r0, [r7, #4]
   1724c:	movw	r4, #54576	; 0xd530
   17250:	movt	r4, #2
   17254:	cmp	r0, r4
   17258:	beq	1726c <__assert_fail@plt+0x5d8c>
   1725c:	bl	14e68 <__assert_fail@plt+0x3988>
   17260:	mov	r3, #256	; 0x100
   17264:	str	r3, [r5, #8]
   17268:	str	r4, [r5, #12]
   1726c:	ldr	r4, [pc, #44]	; 172a0 <__assert_fail@plt+0x5dc0>
   17270:	cmp	r7, r4
   17274:	beq	17284 <__assert_fail@plt+0x5da4>
   17278:	mov	r0, r7
   1727c:	bl	14e68 <__assert_fail@plt+0x3988>
   17280:	str	r4, [r5]
   17284:	mov	r3, #1
   17288:	ldrd	r6, [sp, #8]
   1728c:	str	r3, [r5, #4]
   17290:	ldrd	r4, [sp]
   17294:	ldr	r8, [sp, #16]
   17298:	add	sp, sp, #20
   1729c:	pop	{pc}		; (ldr pc, [sp], #4)
   172a0:	andeq	sp, r2, r4, ror r1
   172a4:	ldr	r3, [pc, #4]	; 172b0 <__assert_fail@plt+0x5dd0>
   172a8:	mvn	r2, #0
   172ac:	b	16ca8 <__assert_fail@plt+0x57c8>
   172b0:	andeq	sp, r2, r0, lsr r6
   172b4:	ldr	r3, [pc]	; 172bc <__assert_fail@plt+0x5ddc>
   172b8:	b	16ca8 <__assert_fail@plt+0x57c8>
   172bc:	andeq	sp, r2, r0, lsr r6
   172c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172c4:	movw	r4, #53612	; 0xd16c
   172c8:	movt	r4, #2
   172cc:	strd	r6, [sp, #8]
   172d0:	strd	r8, [sp, #16]
   172d4:	strd	sl, [sp, #24]
   172d8:	mov	sl, r0
   172dc:	str	lr, [sp, #32]
   172e0:	sub	sp, sp, #44	; 0x2c
   172e4:	bl	1139c <__errno_location@plt>
   172e8:	ldr	r3, [r0]
   172ec:	mov	r8, r0
   172f0:	ldr	r2, [r4, #4]
   172f4:	ldr	r5, [r4]
   172f8:	str	r3, [sp, #28]
   172fc:	cmp	r2, #0
   17300:	bgt	1735c <__assert_fail@plt+0x5e7c>
   17304:	add	r3, r4, #8
   17308:	str	r2, [sp, #36]	; 0x24
   1730c:	rsb	r2, r2, #1
   17310:	cmp	r5, r3
   17314:	beq	17428 <__assert_fail@plt+0x5f48>
   17318:	mov	r1, #8
   1731c:	mov	r0, r5
   17320:	mvn	r3, #-2147483648	; 0x80000000
   17324:	str	r1, [sp]
   17328:	add	r1, sp, #36	; 0x24
   1732c:	bl	19a00 <__assert_fail@plt+0x8520>
   17330:	mov	r5, r0
   17334:	str	r0, [r4]
   17338:	ldr	r0, [r4, #4]
   1733c:	mov	r1, #0
   17340:	ldr	r2, [sp, #36]	; 0x24
   17344:	sub	r2, r2, r0
   17348:	add	r0, r5, r0, lsl #3
   1734c:	lsl	r2, r2, #3
   17350:	bl	113c0 <memset@plt>
   17354:	ldr	r3, [sp, #36]	; 0x24
   17358:	str	r3, [r4, #4]
   1735c:	movw	r4, #54576	; 0xd530
   17360:	movt	r4, #2
   17364:	ldr	r9, [r5]
   17368:	add	fp, r4, #264	; 0x108
   1736c:	mvn	r3, #0
   17370:	ldr	r7, [r4, #260]	; 0x104
   17374:	mov	r2, sl
   17378:	ldr	r6, [r5, #4]
   1737c:	str	fp, [sp, #8]
   17380:	mov	r1, r9
   17384:	ldr	ip, [r4, #256]	; 0x100
   17388:	orr	r7, r7, #1
   1738c:	ldr	lr, [r4, #300]	; 0x12c
   17390:	mov	r0, r6
   17394:	str	ip, [sp]
   17398:	str	r7, [sp, #4]
   1739c:	str	lr, [sp, #16]
   173a0:	ldr	ip, [r4, #296]	; 0x128
   173a4:	str	ip, [sp, #12]
   173a8:	bl	152bc <__assert_fail@plt+0x3ddc>
   173ac:	cmp	r9, r0
   173b0:	bhi	17400 <__assert_fail@plt+0x5f20>
   173b4:	add	r9, r0, #1
   173b8:	cmp	r6, r4
   173bc:	str	r9, [r5]
   173c0:	beq	173cc <__assert_fail@plt+0x5eec>
   173c4:	mov	r0, r6
   173c8:	bl	14e68 <__assert_fail@plt+0x3988>
   173cc:	mov	r0, r9
   173d0:	bl	1975c <__assert_fail@plt+0x827c>
   173d4:	ldr	r3, [r4, #256]	; 0x100
   173d8:	mov	r2, sl
   173dc:	mov	r1, r9
   173e0:	mov	r6, r0
   173e4:	ldr	lr, [r4, #296]	; 0x128
   173e8:	ldr	ip, [r4, #300]	; 0x12c
   173ec:	str	r0, [r5, #4]
   173f0:	stm	sp, {r3, r7, fp, lr}
   173f4:	mvn	r3, #0
   173f8:	str	ip, [sp, #16]
   173fc:	bl	152bc <__assert_fail@plt+0x3ddc>
   17400:	ldr	r3, [sp, #28]
   17404:	mov	r0, r6
   17408:	str	r3, [r8]
   1740c:	add	sp, sp, #44	; 0x2c
   17410:	ldrd	r4, [sp]
   17414:	ldrd	r6, [sp, #8]
   17418:	ldrd	r8, [sp, #16]
   1741c:	ldrd	sl, [sp, #24]
   17420:	add	sp, sp, #32
   17424:	pop	{pc}		; (ldr pc, [sp], #4)
   17428:	mov	r0, #8
   1742c:	mvn	r3, #-2147483648	; 0x80000000
   17430:	add	r1, sp, #36	; 0x24
   17434:	str	r0, [sp]
   17438:	mov	r0, #0
   1743c:	bl	19a00 <__assert_fail@plt+0x8520>
   17440:	ldrd	r2, [r4, #8]
   17444:	mov	r5, r0
   17448:	str	r0, [r4]
   1744c:	strd	r2, [r0]
   17450:	b	17338 <__assert_fail@plt+0x5e58>
   17454:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17458:	movw	r4, #53612	; 0xd16c
   1745c:	movt	r4, #2
   17460:	strd	r6, [sp, #8]
   17464:	strd	r8, [sp, #16]
   17468:	strd	sl, [sp, #24]
   1746c:	mov	sl, r0
   17470:	mov	fp, r1
   17474:	str	lr, [sp, #32]
   17478:	sub	sp, sp, #44	; 0x2c
   1747c:	bl	1139c <__errno_location@plt>
   17480:	ldr	r3, [r0]
   17484:	mov	r8, r0
   17488:	ldr	r2, [r4, #4]
   1748c:	ldr	r5, [r4]
   17490:	str	r3, [sp, #28]
   17494:	cmp	r2, #0
   17498:	bgt	174f4 <__assert_fail@plt+0x6014>
   1749c:	add	r3, r4, #8
   174a0:	str	r2, [sp, #36]	; 0x24
   174a4:	rsb	r2, r2, #1
   174a8:	cmp	r5, r3
   174ac:	beq	175d0 <__assert_fail@plt+0x60f0>
   174b0:	mov	r1, #8
   174b4:	mov	r0, r5
   174b8:	mvn	r3, #-2147483648	; 0x80000000
   174bc:	str	r1, [sp]
   174c0:	add	r1, sp, #36	; 0x24
   174c4:	bl	19a00 <__assert_fail@plt+0x8520>
   174c8:	mov	r5, r0
   174cc:	str	r0, [r4]
   174d0:	ldr	r0, [r4, #4]
   174d4:	mov	r1, #0
   174d8:	ldr	r2, [sp, #36]	; 0x24
   174dc:	sub	r2, r2, r0
   174e0:	add	r0, r5, r0, lsl #3
   174e4:	lsl	r2, r2, #3
   174e8:	bl	113c0 <memset@plt>
   174ec:	ldr	r3, [sp, #36]	; 0x24
   174f0:	str	r3, [r4, #4]
   174f4:	movw	r4, #54576	; 0xd530
   174f8:	movt	r4, #2
   174fc:	ldr	r9, [r5]
   17500:	add	r0, r4, #264	; 0x108
   17504:	mov	r3, fp
   17508:	ldr	r7, [r4, #260]	; 0x104
   1750c:	mov	r2, sl
   17510:	ldr	r6, [r5, #4]
   17514:	str	r0, [sp, #8]
   17518:	mov	r1, r9
   1751c:	ldr	ip, [r4, #256]	; 0x100
   17520:	orr	r7, r7, #1
   17524:	ldr	lr, [r4, #300]	; 0x12c
   17528:	mov	r0, r6
   1752c:	str	ip, [sp]
   17530:	str	r7, [sp, #4]
   17534:	str	lr, [sp, #16]
   17538:	ldr	ip, [r4, #296]	; 0x128
   1753c:	str	ip, [sp, #12]
   17540:	bl	152bc <__assert_fail@plt+0x3ddc>
   17544:	cmp	r9, r0
   17548:	bhi	175a8 <__assert_fail@plt+0x60c8>
   1754c:	add	r9, r0, #1
   17550:	cmp	r6, r4
   17554:	str	r9, [r5]
   17558:	beq	17564 <__assert_fail@plt+0x6084>
   1755c:	mov	r0, r6
   17560:	bl	14e68 <__assert_fail@plt+0x3988>
   17564:	mov	r0, r9
   17568:	bl	1975c <__assert_fail@plt+0x827c>
   1756c:	ldr	ip, [r4, #256]	; 0x100
   17570:	mov	r1, r9
   17574:	mov	r3, fp
   17578:	mov	r2, sl
   1757c:	mov	r6, r0
   17580:	ldr	r9, [r4, #296]	; 0x128
   17584:	ldr	lr, [r4, #300]	; 0x12c
   17588:	str	r0, [r5, #4]
   1758c:	str	ip, [sp]
   17590:	ldr	ip, [pc, #100]	; 175fc <__assert_fail@plt+0x611c>
   17594:	str	r7, [sp, #4]
   17598:	str	ip, [sp, #8]
   1759c:	str	r9, [sp, #12]
   175a0:	str	lr, [sp, #16]
   175a4:	bl	152bc <__assert_fail@plt+0x3ddc>
   175a8:	ldr	r3, [sp, #28]
   175ac:	mov	r0, r6
   175b0:	str	r3, [r8]
   175b4:	add	sp, sp, #44	; 0x2c
   175b8:	ldrd	r4, [sp]
   175bc:	ldrd	r6, [sp, #8]
   175c0:	ldrd	r8, [sp, #16]
   175c4:	ldrd	sl, [sp, #24]
   175c8:	add	sp, sp, #32
   175cc:	pop	{pc}		; (ldr pc, [sp], #4)
   175d0:	mov	r0, #8
   175d4:	mvn	r3, #-2147483648	; 0x80000000
   175d8:	add	r1, sp, #36	; 0x24
   175dc:	str	r0, [sp]
   175e0:	mov	r0, #0
   175e4:	bl	19a00 <__assert_fail@plt+0x8520>
   175e8:	ldrd	r2, [r4, #8]
   175ec:	mov	r5, r0
   175f0:	str	r0, [r4]
   175f4:	strd	r2, [r0]
   175f8:	b	174d0 <__assert_fail@plt+0x5ff0>
   175fc:	andeq	sp, r2, r8, lsr r6
   17600:	strd	r4, [sp, #-20]!	; 0xffffffec
   17604:	mov	r4, #0
   17608:	mov	r5, #0
   1760c:	strd	r6, [sp, #8]
   17610:	cmp	r1, #10
   17614:	str	lr, [sp, #16]
   17618:	sub	sp, sp, #100	; 0x64
   1761c:	strd	r4, [sp, #48]	; 0x30
   17620:	beq	17668 <__assert_fail@plt+0x6188>
   17624:	mov	r3, sp
   17628:	strd	r4, [sp, #8]
   1762c:	str	r1, [sp, #48]	; 0x30
   17630:	mov	r1, r2
   17634:	mvn	r2, #0
   17638:	ldrd	r6, [sp, #48]	; 0x30
   1763c:	strd	r6, [sp]
   17640:	strd	r4, [sp, #16]
   17644:	strd	r4, [sp, #24]
   17648:	strd	r4, [sp, #32]
   1764c:	strd	r4, [sp, #40]	; 0x28
   17650:	bl	16ca8 <__assert_fail@plt+0x57c8>
   17654:	add	sp, sp, #100	; 0x64
   17658:	ldrd	r4, [sp]
   1765c:	ldrd	r6, [sp, #8]
   17660:	add	sp, sp, #16
   17664:	pop	{pc}		; (ldr pc, [sp], #4)
   17668:	bl	114bc <abort@plt>
   1766c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17670:	mov	r4, #0
   17674:	mov	r5, #0
   17678:	strd	r6, [sp, #8]
   1767c:	cmp	r1, #10
   17680:	str	lr, [sp, #16]
   17684:	sub	sp, sp, #100	; 0x64
   17688:	strd	r4, [sp, #48]	; 0x30
   1768c:	beq	176d8 <__assert_fail@plt+0x61f8>
   17690:	mov	ip, r2
   17694:	mov	r2, r3
   17698:	strd	r4, [sp, #8]
   1769c:	str	r1, [sp, #48]	; 0x30
   176a0:	mov	r3, sp
   176a4:	mov	r1, ip
   176a8:	ldrd	r6, [sp, #48]	; 0x30
   176ac:	strd	r6, [sp]
   176b0:	strd	r4, [sp, #16]
   176b4:	strd	r4, [sp, #24]
   176b8:	strd	r4, [sp, #32]
   176bc:	strd	r4, [sp, #40]	; 0x28
   176c0:	bl	16ca8 <__assert_fail@plt+0x57c8>
   176c4:	add	sp, sp, #100	; 0x64
   176c8:	ldrd	r4, [sp]
   176cc:	ldrd	r6, [sp, #8]
   176d0:	add	sp, sp, #16
   176d4:	pop	{pc}		; (ldr pc, [sp], #4)
   176d8:	bl	114bc <abort@plt>
   176dc:	mov	r2, #0
   176e0:	mov	r3, #0
   176e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   176e8:	strd	r6, [sp, #8]
   176ec:	cmp	r0, #10
   176f0:	strd	r8, [sp, #16]
   176f4:	strd	sl, [sp, #24]
   176f8:	str	lr, [sp, #32]
   176fc:	sub	sp, sp, #124	; 0x7c
   17700:	strd	r2, [sp, #72]	; 0x48
   17704:	strd	r2, [sp, #80]	; 0x50
   17708:	strd	r2, [sp, #88]	; 0x58
   1770c:	strd	r2, [sp, #96]	; 0x60
   17710:	strd	r2, [sp, #104]	; 0x68
   17714:	strd	r2, [sp, #112]	; 0x70
   17718:	beq	178bc <__assert_fail@plt+0x63dc>
   1771c:	mov	r6, r1
   17720:	movw	r4, #53612	; 0xd16c
   17724:	movt	r4, #2
   17728:	str	r0, [sp, #72]	; 0x48
   1772c:	ldrd	r0, [sp, #72]	; 0x48
   17730:	strd	r0, [sp, #24]
   17734:	strd	r2, [sp, #32]
   17738:	strd	r2, [sp, #40]	; 0x28
   1773c:	strd	r2, [sp, #48]	; 0x30
   17740:	strd	r2, [sp, #56]	; 0x38
   17744:	strd	r2, [sp, #64]	; 0x40
   17748:	bl	1139c <__errno_location@plt>
   1774c:	mov	r8, r0
   17750:	ldr	r5, [r4]
   17754:	ldr	r2, [r4, #4]
   17758:	ldr	r9, [r0]
   1775c:	cmp	r2, #0
   17760:	bgt	177bc <__assert_fail@plt+0x62dc>
   17764:	add	r3, r4, #8
   17768:	str	r2, [sp, #72]	; 0x48
   1776c:	rsb	r2, r2, #1
   17770:	cmp	r5, r3
   17774:	beq	17890 <__assert_fail@plt+0x63b0>
   17778:	mov	r3, #8
   1777c:	mov	r0, r5
   17780:	add	r1, sp, #72	; 0x48
   17784:	str	r3, [sp]
   17788:	mvn	r3, #-2147483648	; 0x80000000
   1778c:	bl	19a00 <__assert_fail@plt+0x8520>
   17790:	mov	r5, r0
   17794:	str	r0, [r4]
   17798:	ldr	r0, [r4, #4]
   1779c:	mov	r1, #0
   177a0:	ldr	r2, [sp, #72]	; 0x48
   177a4:	sub	r2, r2, r0
   177a8:	add	r0, r5, r0, lsl #3
   177ac:	lsl	r2, r2, #3
   177b0:	bl	113c0 <memset@plt>
   177b4:	ldr	r3, [sp, #72]	; 0x48
   177b8:	str	r3, [r4, #4]
   177bc:	ldr	sl, [r5]
   177c0:	add	r0, sp, #32
   177c4:	mvn	r3, #0
   177c8:	mov	r2, r6
   177cc:	ldr	r7, [sp, #28]
   177d0:	ldr	r4, [r5, #4]
   177d4:	mov	r1, sl
   177d8:	str	r0, [sp, #8]
   177dc:	ldr	lr, [sp, #24]
   177e0:	orr	r7, r7, #1
   177e4:	ldr	ip, [sp, #64]	; 0x40
   177e8:	mov	r0, r4
   177ec:	ldr	fp, [sp, #68]	; 0x44
   177f0:	str	lr, [sp]
   177f4:	str	r7, [sp, #4]
   177f8:	str	ip, [sp, #12]
   177fc:	str	fp, [sp, #16]
   17800:	bl	152bc <__assert_fail@plt+0x3ddc>
   17804:	cmp	sl, r0
   17808:	bhi	1786c <__assert_fail@plt+0x638c>
   1780c:	add	sl, r0, #1
   17810:	movw	r3, #54576	; 0xd530
   17814:	movt	r3, #2
   17818:	cmp	r4, r3
   1781c:	str	sl, [r5]
   17820:	beq	1782c <__assert_fail@plt+0x634c>
   17824:	mov	r0, r4
   17828:	bl	14e68 <__assert_fail@plt+0x3988>
   1782c:	mov	r0, sl
   17830:	bl	1975c <__assert_fail@plt+0x827c>
   17834:	ldr	r3, [sp, #24]
   17838:	mov	r2, r6
   1783c:	mov	r1, sl
   17840:	mov	r4, r0
   17844:	ldr	lr, [sp, #64]	; 0x40
   17848:	ldr	ip, [sp, #68]	; 0x44
   1784c:	str	r0, [r5, #4]
   17850:	add	r5, sp, #32
   17854:	stm	sp, {r3, r7}
   17858:	mvn	r3, #0
   1785c:	str	r5, [sp, #8]
   17860:	str	lr, [sp, #12]
   17864:	str	ip, [sp, #16]
   17868:	bl	152bc <__assert_fail@plt+0x3ddc>
   1786c:	mov	r0, r4
   17870:	str	r9, [r8]
   17874:	add	sp, sp, #124	; 0x7c
   17878:	ldrd	r4, [sp]
   1787c:	ldrd	r6, [sp, #8]
   17880:	ldrd	r8, [sp, #16]
   17884:	ldrd	sl, [sp, #24]
   17888:	add	sp, sp, #32
   1788c:	pop	{pc}		; (ldr pc, [sp], #4)
   17890:	mov	r0, #8
   17894:	mvn	r3, #-2147483648	; 0x80000000
   17898:	add	r1, sp, #72	; 0x48
   1789c:	str	r0, [sp]
   178a0:	mov	r0, #0
   178a4:	bl	19a00 <__assert_fail@plt+0x8520>
   178a8:	ldrd	r2, [r4, #8]
   178ac:	mov	r5, r0
   178b0:	str	r0, [r4]
   178b4:	strd	r2, [r0]
   178b8:	b	17798 <__assert_fail@plt+0x62b8>
   178bc:	bl	114bc <abort@plt>
   178c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178c4:	cmp	r0, #10
   178c8:	strd	r6, [sp, #8]
   178cc:	mov	r6, #0
   178d0:	mov	r7, #0
   178d4:	strd	r8, [sp, #16]
   178d8:	strd	sl, [sp, #24]
   178dc:	str	lr, [sp, #32]
   178e0:	sub	sp, sp, #124	; 0x7c
   178e4:	strd	r6, [sp, #72]	; 0x48
   178e8:	strd	r6, [sp, #80]	; 0x50
   178ec:	strd	r6, [sp, #88]	; 0x58
   178f0:	strd	r6, [sp, #96]	; 0x60
   178f4:	strd	r6, [sp, #104]	; 0x68
   178f8:	strd	r6, [sp, #112]	; 0x70
   178fc:	beq	17aa8 <__assert_fail@plt+0x65c8>
   17900:	mov	sl, r2
   17904:	movw	r5, #53612	; 0xd16c
   17908:	movt	r5, #2
   1790c:	str	r0, [sp, #72]	; 0x48
   17910:	mov	r9, r1
   17914:	ldrd	r2, [sp, #72]	; 0x48
   17918:	strd	r2, [sp, #24]
   1791c:	strd	r6, [sp, #32]
   17920:	strd	r6, [sp, #40]	; 0x28
   17924:	strd	r6, [sp, #48]	; 0x30
   17928:	strd	r6, [sp, #56]	; 0x38
   1792c:	strd	r6, [sp, #64]	; 0x40
   17930:	bl	1139c <__errno_location@plt>
   17934:	mov	r7, r0
   17938:	ldr	r4, [r5]
   1793c:	ldr	r2, [r5, #4]
   17940:	ldr	fp, [r0]
   17944:	cmp	r2, #0
   17948:	bgt	179a4 <__assert_fail@plt+0x64c4>
   1794c:	add	r3, r5, #8
   17950:	str	r2, [sp, #72]	; 0x48
   17954:	rsb	r2, r2, #1
   17958:	cmp	r4, r3
   1795c:	beq	17a7c <__assert_fail@plt+0x659c>
   17960:	mov	r3, #8
   17964:	mov	r0, r4
   17968:	add	r1, sp, #72	; 0x48
   1796c:	str	r3, [sp]
   17970:	mvn	r3, #-2147483648	; 0x80000000
   17974:	bl	19a00 <__assert_fail@plt+0x8520>
   17978:	mov	r4, r0
   1797c:	str	r0, [r5]
   17980:	ldr	r0, [r5, #4]
   17984:	mov	r1, #0
   17988:	ldr	r2, [sp, #72]	; 0x48
   1798c:	sub	r2, r2, r0
   17990:	add	r0, r4, r0, lsl #3
   17994:	lsl	r2, r2, #3
   17998:	bl	113c0 <memset@plt>
   1799c:	ldr	r3, [sp, #72]	; 0x48
   179a0:	str	r3, [r5, #4]
   179a4:	ldr	ip, [sp, #24]
   179a8:	add	r0, sp, #32
   179ac:	mov	r3, sl
   179b0:	mov	r2, r9
   179b4:	ldr	r6, [sp, #28]
   179b8:	ldr	r8, [r4]
   179bc:	ldr	r5, [r4, #4]
   179c0:	str	ip, [sp]
   179c4:	orr	r6, r6, #1
   179c8:	ldr	ip, [sp, #64]	; 0x40
   179cc:	mov	r1, r8
   179d0:	str	r6, [sp, #4]
   179d4:	ldr	lr, [sp, #68]	; 0x44
   179d8:	str	r0, [sp, #8]
   179dc:	mov	r0, r5
   179e0:	str	ip, [sp, #12]
   179e4:	str	lr, [sp, #16]
   179e8:	bl	152bc <__assert_fail@plt+0x3ddc>
   179ec:	cmp	r8, r0
   179f0:	bhi	17a58 <__assert_fail@plt+0x6578>
   179f4:	add	r8, r0, #1
   179f8:	movw	r3, #54576	; 0xd530
   179fc:	movt	r3, #2
   17a00:	cmp	r5, r3
   17a04:	str	r8, [r4]
   17a08:	beq	17a14 <__assert_fail@plt+0x6534>
   17a0c:	mov	r0, r5
   17a10:	bl	14e68 <__assert_fail@plt+0x3988>
   17a14:	mov	r0, r8
   17a18:	bl	1975c <__assert_fail@plt+0x827c>
   17a1c:	ldr	lr, [sp, #24]
   17a20:	mov	r1, r8
   17a24:	mov	r3, sl
   17a28:	mov	r2, r9
   17a2c:	mov	r5, r0
   17a30:	ldr	r8, [sp, #64]	; 0x40
   17a34:	ldr	ip, [sp, #68]	; 0x44
   17a38:	str	r0, [r4, #4]
   17a3c:	str	lr, [sp]
   17a40:	add	lr, sp, #32
   17a44:	str	r6, [sp, #4]
   17a48:	str	lr, [sp, #8]
   17a4c:	str	r8, [sp, #12]
   17a50:	str	ip, [sp, #16]
   17a54:	bl	152bc <__assert_fail@plt+0x3ddc>
   17a58:	mov	r0, r5
   17a5c:	str	fp, [r7]
   17a60:	add	sp, sp, #124	; 0x7c
   17a64:	ldrd	r4, [sp]
   17a68:	ldrd	r6, [sp, #8]
   17a6c:	ldrd	r8, [sp, #16]
   17a70:	ldrd	sl, [sp, #24]
   17a74:	add	sp, sp, #32
   17a78:	pop	{pc}		; (ldr pc, [sp], #4)
   17a7c:	mov	r0, #8
   17a80:	mvn	r3, #-2147483648	; 0x80000000
   17a84:	add	r1, sp, #72	; 0x48
   17a88:	str	r0, [sp]
   17a8c:	mov	r0, #0
   17a90:	bl	19a00 <__assert_fail@plt+0x8520>
   17a94:	ldrd	r2, [r5, #8]
   17a98:	mov	r4, r0
   17a9c:	str	r0, [r5]
   17aa0:	strd	r2, [r0]
   17aa4:	b	17980 <__assert_fail@plt+0x64a0>
   17aa8:	bl	114bc <abort@plt>
   17aac:	ldr	r3, [pc, #492]	; 17ca0 <__assert_fail@plt+0x67c0>
   17ab0:	lsr	ip, r2, #5
   17ab4:	and	r2, r2, #31
   17ab8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17abc:	movw	r5, #53612	; 0xd16c
   17ac0:	movt	r5, #2
   17ac4:	strd	r6, [sp, #8]
   17ac8:	strd	r8, [sp, #16]
   17acc:	strd	sl, [sp, #24]
   17ad0:	mov	sl, r0
   17ad4:	mov	fp, r1
   17ad8:	ldrd	r0, [r3]
   17adc:	str	lr, [sp, #32]
   17ae0:	sub	sp, sp, #92	; 0x5c
   17ae4:	ldrd	r8, [r3, #8]
   17ae8:	add	r6, sp, #48	; 0x30
   17aec:	strd	r0, [sp, #40]	; 0x28
   17af0:	ldrd	r0, [r3, #16]
   17af4:	strd	r8, [sp, #48]	; 0x30
   17af8:	ldrd	r8, [r3, #24]
   17afc:	strd	r0, [sp, #56]	; 0x38
   17b00:	ldrd	r0, [r3, #32]
   17b04:	strd	r8, [sp, #64]	; 0x40
   17b08:	ldrd	r8, [r3, #40]	; 0x28
   17b0c:	strd	r0, [sp, #72]	; 0x48
   17b10:	strd	r8, [sp, #80]	; 0x50
   17b14:	ldr	r3, [r6, ip, lsl #2]
   17b18:	mvn	r1, r3, lsr r2
   17b1c:	and	r1, r1, #1
   17b20:	eor	r2, r3, r1, lsl r2
   17b24:	str	r2, [r6, ip, lsl #2]
   17b28:	bl	1139c <__errno_location@plt>
   17b2c:	ldr	r3, [r0]
   17b30:	mov	r8, r0
   17b34:	ldr	r2, [r5, #4]
   17b38:	ldr	r4, [r5]
   17b3c:	str	r3, [sp, #28]
   17b40:	cmp	r2, #0
   17b44:	bgt	17ba0 <__assert_fail@plt+0x66c0>
   17b48:	add	r3, r5, #8
   17b4c:	str	r2, [sp, #36]	; 0x24
   17b50:	rsb	r2, r2, #1
   17b54:	cmp	r4, r3
   17b58:	beq	17c74 <__assert_fail@plt+0x6794>
   17b5c:	mov	r1, #8
   17b60:	mov	r0, r4
   17b64:	mvn	r3, #-2147483648	; 0x80000000
   17b68:	str	r1, [sp]
   17b6c:	add	r1, sp, #36	; 0x24
   17b70:	bl	19a00 <__assert_fail@plt+0x8520>
   17b74:	mov	r4, r0
   17b78:	str	r0, [r5]
   17b7c:	ldr	r0, [r5, #4]
   17b80:	mov	r1, #0
   17b84:	ldr	r2, [sp, #36]	; 0x24
   17b88:	sub	r2, r2, r0
   17b8c:	add	r0, r4, r0, lsl #3
   17b90:	lsl	r2, r2, #3
   17b94:	bl	113c0 <memset@plt>
   17b98:	ldr	r3, [sp, #36]	; 0x24
   17b9c:	str	r3, [r5, #4]
   17ba0:	ldr	ip, [sp, #40]	; 0x28
   17ba4:	mov	r3, fp
   17ba8:	mov	r2, sl
   17bac:	ldr	r7, [sp, #44]	; 0x2c
   17bb0:	ldr	r9, [r4]
   17bb4:	ldr	r5, [r4, #4]
   17bb8:	str	ip, [sp]
   17bbc:	orr	r7, r7, #1
   17bc0:	ldr	ip, [sp, #80]	; 0x50
   17bc4:	mov	r1, r9
   17bc8:	str	r7, [sp, #4]
   17bcc:	ldr	lr, [sp, #84]	; 0x54
   17bd0:	mov	r0, r5
   17bd4:	str	r6, [sp, #8]
   17bd8:	str	ip, [sp, #12]
   17bdc:	str	lr, [sp, #16]
   17be0:	bl	152bc <__assert_fail@plt+0x3ddc>
   17be4:	cmp	r9, r0
   17be8:	bhi	17c4c <__assert_fail@plt+0x676c>
   17bec:	add	r9, r0, #1
   17bf0:	movw	r3, #54576	; 0xd530
   17bf4:	movt	r3, #2
   17bf8:	cmp	r5, r3
   17bfc:	str	r9, [r4]
   17c00:	beq	17c0c <__assert_fail@plt+0x672c>
   17c04:	mov	r0, r5
   17c08:	bl	14e68 <__assert_fail@plt+0x3988>
   17c0c:	mov	r0, r9
   17c10:	bl	1975c <__assert_fail@plt+0x827c>
   17c14:	mov	r1, r9
   17c18:	ldr	ip, [sp, #40]	; 0x28
   17c1c:	mov	r3, fp
   17c20:	mov	r2, sl
   17c24:	mov	r5, r0
   17c28:	ldr	r9, [sp, #80]	; 0x50
   17c2c:	ldr	lr, [sp, #84]	; 0x54
   17c30:	str	r0, [r4, #4]
   17c34:	str	ip, [sp]
   17c38:	str	r7, [sp, #4]
   17c3c:	str	r6, [sp, #8]
   17c40:	str	r9, [sp, #12]
   17c44:	str	lr, [sp, #16]
   17c48:	bl	152bc <__assert_fail@plt+0x3ddc>
   17c4c:	ldr	r3, [sp, #28]
   17c50:	mov	r0, r5
   17c54:	str	r3, [r8]
   17c58:	add	sp, sp, #92	; 0x5c
   17c5c:	ldrd	r4, [sp]
   17c60:	ldrd	r6, [sp, #8]
   17c64:	ldrd	r8, [sp, #16]
   17c68:	ldrd	sl, [sp, #24]
   17c6c:	add	sp, sp, #32
   17c70:	pop	{pc}		; (ldr pc, [sp], #4)
   17c74:	mov	r0, #8
   17c78:	mvn	r3, #-2147483648	; 0x80000000
   17c7c:	add	r1, sp, #36	; 0x24
   17c80:	str	r0, [sp]
   17c84:	mov	r0, #0
   17c88:	bl	19a00 <__assert_fail@plt+0x8520>
   17c8c:	ldrd	r2, [r5, #8]
   17c90:	mov	r4, r0
   17c94:	str	r0, [r5]
   17c98:	strd	r2, [r0]
   17c9c:	b	17b7c <__assert_fail@plt+0x669c>
   17ca0:	andeq	sp, r2, r0, lsr r6
   17ca4:	ldr	ip, [pc, #476]	; 17e88 <__assert_fail@plt+0x69a8>
   17ca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17cac:	movw	r4, #53612	; 0xd16c
   17cb0:	movt	r4, #2
   17cb4:	ldrd	r2, [ip, #8]
   17cb8:	strd	r6, [sp, #8]
   17cbc:	lsr	r7, r1, #5
   17cc0:	mov	r6, r0
   17cc4:	strd	r8, [sp, #16]
   17cc8:	str	lr, [sp, #32]
   17ccc:	and	lr, r1, #31
   17cd0:	ldrd	r0, [ip]
   17cd4:	strd	sl, [sp, #24]
   17cd8:	sub	sp, sp, #84	; 0x54
   17cdc:	add	r5, sp, #40	; 0x28
   17ce0:	strd	r0, [sp, #32]
   17ce4:	strd	r2, [sp, #40]	; 0x28
   17ce8:	ldrd	r0, [ip, #16]
   17cec:	ldrd	r2, [ip, #24]
   17cf0:	strd	r0, [sp, #48]	; 0x30
   17cf4:	ldrd	r0, [ip, #32]
   17cf8:	strd	r2, [sp, #56]	; 0x38
   17cfc:	ldrd	r2, [ip, #40]	; 0x28
   17d00:	strd	r0, [sp, #64]	; 0x40
   17d04:	strd	r2, [sp, #72]	; 0x48
   17d08:	ldr	r1, [r5, r7, lsl #2]
   17d0c:	mvn	r3, r1, lsr lr
   17d10:	and	r3, r3, #1
   17d14:	eor	r1, r1, r3, lsl lr
   17d18:	str	r1, [r5, r7, lsl #2]
   17d1c:	bl	1139c <__errno_location@plt>
   17d20:	mov	r9, r0
   17d24:	ldr	sl, [r0]
   17d28:	ldr	r2, [r4, #4]
   17d2c:	ldr	r7, [r4]
   17d30:	cmp	r2, #0
   17d34:	bgt	17d90 <__assert_fail@plt+0x68b0>
   17d38:	add	r3, r4, #8
   17d3c:	str	r2, [sp, #28]
   17d40:	rsb	r2, r2, #1
   17d44:	cmp	r7, r3
   17d48:	beq	17e5c <__assert_fail@plt+0x697c>
   17d4c:	mov	r1, #8
   17d50:	mov	r0, r7
   17d54:	mvn	r3, #-2147483648	; 0x80000000
   17d58:	str	r1, [sp]
   17d5c:	add	r1, sp, #28
   17d60:	bl	19a00 <__assert_fail@plt+0x8520>
   17d64:	mov	r7, r0
   17d68:	str	r0, [r4]
   17d6c:	ldr	r0, [r4, #4]
   17d70:	mov	r1, #0
   17d74:	ldr	r2, [sp, #28]
   17d78:	sub	r2, r2, r0
   17d7c:	add	r0, r7, r0, lsl #3
   17d80:	lsl	r2, r2, #3
   17d84:	bl	113c0 <memset@plt>
   17d88:	ldr	r3, [sp, #28]
   17d8c:	str	r3, [r4, #4]
   17d90:	ldr	ip, [sp, #32]
   17d94:	mvn	r3, #0
   17d98:	mov	r2, r6
   17d9c:	ldr	r8, [sp, #36]	; 0x24
   17da0:	ldr	fp, [r7]
   17da4:	ldr	r4, [r7, #4]
   17da8:	str	ip, [sp]
   17dac:	orr	r8, r8, #1
   17db0:	ldr	ip, [sp, #72]	; 0x48
   17db4:	mov	r1, fp
   17db8:	str	r8, [sp, #4]
   17dbc:	ldr	lr, [sp, #76]	; 0x4c
   17dc0:	mov	r0, r4
   17dc4:	str	r5, [sp, #8]
   17dc8:	str	ip, [sp, #12]
   17dcc:	str	lr, [sp, #16]
   17dd0:	bl	152bc <__assert_fail@plt+0x3ddc>
   17dd4:	cmp	fp, r0
   17dd8:	bhi	17e38 <__assert_fail@plt+0x6958>
   17ddc:	add	fp, r0, #1
   17de0:	movw	r3, #54576	; 0xd530
   17de4:	movt	r3, #2
   17de8:	cmp	r4, r3
   17dec:	str	fp, [r7]
   17df0:	beq	17dfc <__assert_fail@plt+0x691c>
   17df4:	mov	r0, r4
   17df8:	bl	14e68 <__assert_fail@plt+0x3988>
   17dfc:	mov	r0, fp
   17e00:	bl	1975c <__assert_fail@plt+0x827c>
   17e04:	ldr	r3, [sp, #32]
   17e08:	mov	r2, r6
   17e0c:	mov	r1, fp
   17e10:	mov	r4, r0
   17e14:	ldr	lr, [sp, #72]	; 0x48
   17e18:	ldr	ip, [sp, #76]	; 0x4c
   17e1c:	str	r0, [r7, #4]
   17e20:	stm	sp, {r3, r8}
   17e24:	mvn	r3, #0
   17e28:	str	r5, [sp, #8]
   17e2c:	str	lr, [sp, #12]
   17e30:	str	ip, [sp, #16]
   17e34:	bl	152bc <__assert_fail@plt+0x3ddc>
   17e38:	mov	r0, r4
   17e3c:	str	sl, [r9]
   17e40:	add	sp, sp, #84	; 0x54
   17e44:	ldrd	r4, [sp]
   17e48:	ldrd	r6, [sp, #8]
   17e4c:	ldrd	r8, [sp, #16]
   17e50:	ldrd	sl, [sp, #24]
   17e54:	add	sp, sp, #32
   17e58:	pop	{pc}		; (ldr pc, [sp], #4)
   17e5c:	mov	r0, #8
   17e60:	mvn	r3, #-2147483648	; 0x80000000
   17e64:	add	r1, sp, #28
   17e68:	str	r0, [sp]
   17e6c:	mov	r0, #0
   17e70:	bl	19a00 <__assert_fail@plt+0x8520>
   17e74:	ldrd	r2, [r4, #8]
   17e78:	mov	r7, r0
   17e7c:	str	r0, [r4]
   17e80:	strd	r2, [r0]
   17e84:	b	17d6c <__assert_fail@plt+0x688c>
   17e88:	andeq	sp, r2, r0, lsr r6
   17e8c:	ldr	ip, [pc, #472]	; 1806c <__assert_fail@plt+0x6b8c>
   17e90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e94:	mov	r5, r0
   17e98:	movw	r4, #53612	; 0xd16c
   17e9c:	movt	r4, #2
   17ea0:	ldrd	r2, [ip]
   17ea4:	ldrd	r0, [ip, #8]
   17ea8:	strd	r6, [sp, #8]
   17eac:	strd	r8, [sp, #16]
   17eb0:	strd	sl, [sp, #24]
   17eb4:	str	lr, [sp, #32]
   17eb8:	sub	sp, sp, #84	; 0x54
   17ebc:	strd	r2, [sp, #32]
   17ec0:	strd	r0, [sp, #40]	; 0x28
   17ec4:	ldr	r6, [sp, #44]	; 0x2c
   17ec8:	ldrd	r2, [ip, #16]
   17ecc:	ldrd	r0, [ip, #24]
   17ed0:	mvn	lr, r6
   17ed4:	and	lr, lr, #67108864	; 0x4000000
   17ed8:	eor	lr, lr, r6
   17edc:	ldrd	r6, [ip, #40]	; 0x28
   17ee0:	strd	r2, [sp, #48]	; 0x30
   17ee4:	ldrd	r2, [ip, #32]
   17ee8:	str	lr, [sp, #44]	; 0x2c
   17eec:	strd	r0, [sp, #56]	; 0x38
   17ef0:	strd	r2, [sp, #64]	; 0x40
   17ef4:	strd	r6, [sp, #72]	; 0x48
   17ef8:	bl	1139c <__errno_location@plt>
   17efc:	mov	r8, r0
   17f00:	ldr	r9, [r0]
   17f04:	ldr	r2, [r4, #4]
   17f08:	ldr	r6, [r4]
   17f0c:	cmp	r2, #0
   17f10:	bgt	17f6c <__assert_fail@plt+0x6a8c>
   17f14:	add	r3, r4, #8
   17f18:	str	r2, [sp, #28]
   17f1c:	rsb	r2, r2, #1
   17f20:	cmp	r6, r3
   17f24:	beq	18040 <__assert_fail@plt+0x6b60>
   17f28:	mov	r1, #8
   17f2c:	mov	r0, r6
   17f30:	mvn	r3, #-2147483648	; 0x80000000
   17f34:	str	r1, [sp]
   17f38:	add	r1, sp, #28
   17f3c:	bl	19a00 <__assert_fail@plt+0x8520>
   17f40:	mov	r6, r0
   17f44:	str	r0, [r4]
   17f48:	ldr	r0, [r4, #4]
   17f4c:	mov	r1, #0
   17f50:	ldr	r2, [sp, #28]
   17f54:	sub	r2, r2, r0
   17f58:	add	r0, r6, r0, lsl #3
   17f5c:	lsl	r2, r2, #3
   17f60:	bl	113c0 <memset@plt>
   17f64:	ldr	r3, [sp, #28]
   17f68:	str	r3, [r4, #4]
   17f6c:	ldr	sl, [r6]
   17f70:	add	r0, sp, #40	; 0x28
   17f74:	mvn	r3, #0
   17f78:	mov	r2, r5
   17f7c:	ldr	r7, [sp, #36]	; 0x24
   17f80:	ldr	r4, [r6, #4]
   17f84:	mov	r1, sl
   17f88:	str	r0, [sp, #8]
   17f8c:	ldr	lr, [sp, #32]
   17f90:	orr	r7, r7, #1
   17f94:	ldr	ip, [sp, #72]	; 0x48
   17f98:	mov	r0, r4
   17f9c:	ldr	fp, [sp, #76]	; 0x4c
   17fa0:	str	lr, [sp]
   17fa4:	str	r7, [sp, #4]
   17fa8:	str	ip, [sp, #12]
   17fac:	str	fp, [sp, #16]
   17fb0:	bl	152bc <__assert_fail@plt+0x3ddc>
   17fb4:	cmp	sl, r0
   17fb8:	bhi	1801c <__assert_fail@plt+0x6b3c>
   17fbc:	add	sl, r0, #1
   17fc0:	movw	r3, #54576	; 0xd530
   17fc4:	movt	r3, #2
   17fc8:	cmp	r4, r3
   17fcc:	str	sl, [r6]
   17fd0:	beq	17fdc <__assert_fail@plt+0x6afc>
   17fd4:	mov	r0, r4
   17fd8:	bl	14e68 <__assert_fail@plt+0x3988>
   17fdc:	mov	r0, sl
   17fe0:	bl	1975c <__assert_fail@plt+0x827c>
   17fe4:	ldr	r3, [sp, #32]
   17fe8:	mov	r2, r5
   17fec:	add	r5, sp, #40	; 0x28
   17ff0:	mov	r1, sl
   17ff4:	mov	r4, r0
   17ff8:	ldr	lr, [sp, #72]	; 0x48
   17ffc:	ldr	ip, [sp, #76]	; 0x4c
   18000:	str	r0, [r6, #4]
   18004:	stm	sp, {r3, r7}
   18008:	mvn	r3, #0
   1800c:	str	r5, [sp, #8]
   18010:	str	lr, [sp, #12]
   18014:	str	ip, [sp, #16]
   18018:	bl	152bc <__assert_fail@plt+0x3ddc>
   1801c:	mov	r0, r4
   18020:	str	r9, [r8]
   18024:	add	sp, sp, #84	; 0x54
   18028:	ldrd	r4, [sp]
   1802c:	ldrd	r6, [sp, #8]
   18030:	ldrd	r8, [sp, #16]
   18034:	ldrd	sl, [sp, #24]
   18038:	add	sp, sp, #32
   1803c:	pop	{pc}		; (ldr pc, [sp], #4)
   18040:	mov	r0, #8
   18044:	mvn	r3, #-2147483648	; 0x80000000
   18048:	add	r1, sp, #28
   1804c:	str	r0, [sp]
   18050:	mov	r0, #0
   18054:	bl	19a00 <__assert_fail@plt+0x8520>
   18058:	ldrd	r2, [r4, #8]
   1805c:	mov	r6, r0
   18060:	str	r0, [r4]
   18064:	strd	r2, [r0]
   18068:	b	17f48 <__assert_fail@plt+0x6a68>
   1806c:	andeq	sp, r2, r0, lsr r6
   18070:	ldr	ip, [pc, #480]	; 18258 <__assert_fail@plt+0x6d78>
   18074:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18078:	mov	r5, r0
   1807c:	movw	r4, #53612	; 0xd16c
   18080:	movt	r4, #2
   18084:	ldrd	r2, [ip]
   18088:	strd	r6, [sp, #8]
   1808c:	mov	r6, r1
   18090:	ldrd	r0, [ip, #8]
   18094:	strd	r8, [sp, #16]
   18098:	strd	sl, [sp, #24]
   1809c:	str	lr, [sp, #32]
   180a0:	sub	sp, sp, #84	; 0x54
   180a4:	ldrd	r8, [ip, #40]	; 0x28
   180a8:	strd	r2, [sp, #32]
   180ac:	strd	r0, [sp, #40]	; 0x28
   180b0:	ldrd	r2, [ip, #16]
   180b4:	ldr	r7, [sp, #44]	; 0x2c
   180b8:	ldrd	r0, [ip, #24]
   180bc:	strd	r2, [sp, #48]	; 0x30
   180c0:	ldrd	r2, [ip, #32]
   180c4:	mvn	lr, r7
   180c8:	and	lr, lr, #67108864	; 0x4000000
   180cc:	eor	lr, lr, r7
   180d0:	str	lr, [sp, #44]	; 0x2c
   180d4:	strd	r0, [sp, #56]	; 0x38
   180d8:	strd	r2, [sp, #64]	; 0x40
   180dc:	strd	r8, [sp, #72]	; 0x48
   180e0:	bl	1139c <__errno_location@plt>
   180e4:	mov	r9, r0
   180e8:	ldr	sl, [r0]
   180ec:	ldr	r2, [r4, #4]
   180f0:	ldr	r7, [r4]
   180f4:	cmp	r2, #0
   180f8:	bgt	18154 <__assert_fail@plt+0x6c74>
   180fc:	add	r3, r4, #8
   18100:	str	r2, [sp, #28]
   18104:	rsb	r2, r2, #1
   18108:	cmp	r7, r3
   1810c:	beq	1822c <__assert_fail@plt+0x6d4c>
   18110:	mov	r1, #8
   18114:	mov	r0, r7
   18118:	mvn	r3, #-2147483648	; 0x80000000
   1811c:	str	r1, [sp]
   18120:	add	r1, sp, #28
   18124:	bl	19a00 <__assert_fail@plt+0x8520>
   18128:	mov	r7, r0
   1812c:	str	r0, [r4]
   18130:	ldr	r0, [r4, #4]
   18134:	mov	r1, #0
   18138:	ldr	r2, [sp, #28]
   1813c:	sub	r2, r2, r0
   18140:	add	r0, r7, r0, lsl #3
   18144:	lsl	r2, r2, #3
   18148:	bl	113c0 <memset@plt>
   1814c:	ldr	r3, [sp, #28]
   18150:	str	r3, [r4, #4]
   18154:	ldr	ip, [sp, #32]
   18158:	add	r0, sp, #40	; 0x28
   1815c:	mov	r3, r6
   18160:	mov	r2, r5
   18164:	ldr	r8, [sp, #36]	; 0x24
   18168:	ldr	fp, [r7]
   1816c:	ldr	r4, [r7, #4]
   18170:	str	ip, [sp]
   18174:	orr	r8, r8, #1
   18178:	ldr	ip, [sp, #72]	; 0x48
   1817c:	mov	r1, fp
   18180:	str	r8, [sp, #4]
   18184:	ldr	lr, [sp, #76]	; 0x4c
   18188:	str	r0, [sp, #8]
   1818c:	mov	r0, r4
   18190:	str	ip, [sp, #12]
   18194:	str	lr, [sp, #16]
   18198:	bl	152bc <__assert_fail@plt+0x3ddc>
   1819c:	cmp	fp, r0
   181a0:	bhi	18208 <__assert_fail@plt+0x6d28>
   181a4:	add	fp, r0, #1
   181a8:	movw	r3, #54576	; 0xd530
   181ac:	movt	r3, #2
   181b0:	cmp	r4, r3
   181b4:	str	fp, [r7]
   181b8:	beq	181c4 <__assert_fail@plt+0x6ce4>
   181bc:	mov	r0, r4
   181c0:	bl	14e68 <__assert_fail@plt+0x3988>
   181c4:	mov	r0, fp
   181c8:	bl	1975c <__assert_fail@plt+0x827c>
   181cc:	ldr	lr, [sp, #32]
   181d0:	mov	r2, r5
   181d4:	mov	r3, r6
   181d8:	mov	r1, fp
   181dc:	mov	r4, r0
   181e0:	ldr	r5, [sp, #72]	; 0x48
   181e4:	ldr	ip, [sp, #76]	; 0x4c
   181e8:	str	r0, [r7, #4]
   181ec:	str	lr, [sp]
   181f0:	add	lr, sp, #40	; 0x28
   181f4:	str	r8, [sp, #4]
   181f8:	str	lr, [sp, #8]
   181fc:	str	r5, [sp, #12]
   18200:	str	ip, [sp, #16]
   18204:	bl	152bc <__assert_fail@plt+0x3ddc>
   18208:	mov	r0, r4
   1820c:	str	sl, [r9]
   18210:	add	sp, sp, #84	; 0x54
   18214:	ldrd	r4, [sp]
   18218:	ldrd	r6, [sp, #8]
   1821c:	ldrd	r8, [sp, #16]
   18220:	ldrd	sl, [sp, #24]
   18224:	add	sp, sp, #32
   18228:	pop	{pc}		; (ldr pc, [sp], #4)
   1822c:	mov	r0, #8
   18230:	mvn	r3, #-2147483648	; 0x80000000
   18234:	add	r1, sp, #28
   18238:	str	r0, [sp]
   1823c:	mov	r0, #0
   18240:	bl	19a00 <__assert_fail@plt+0x8520>
   18244:	ldrd	r2, [r4, #8]
   18248:	mov	r7, r0
   1824c:	str	r0, [r4]
   18250:	strd	r2, [r0]
   18254:	b	18130 <__assert_fail@plt+0x6c50>
   18258:	andeq	sp, r2, r0, lsr r6
   1825c:	strd	r4, [sp, #-12]!
   18260:	mov	r4, #0
   18264:	mov	r5, #0
   18268:	str	lr, [sp, #8]
   1826c:	sub	sp, sp, #100	; 0x64
   18270:	cmp	r1, #10
   18274:	strd	r4, [sp]
   18278:	strd	r4, [sp, #8]
   1827c:	strd	r4, [sp, #16]
   18280:	strd	r4, [sp, #24]
   18284:	strd	r4, [sp, #32]
   18288:	strd	r4, [sp, #40]	; 0x28
   1828c:	beq	182bc <__assert_fail@plt+0x6ddc>
   18290:	mov	ip, #67108864	; 0x4000000
   18294:	mov	r3, sp
   18298:	str	r1, [sp]
   1829c:	mov	r1, r2
   182a0:	mvn	r2, #0
   182a4:	str	ip, [sp, #12]
   182a8:	bl	16ca8 <__assert_fail@plt+0x57c8>
   182ac:	add	sp, sp, #100	; 0x64
   182b0:	ldrd	r4, [sp]
   182b4:	add	sp, sp, #8
   182b8:	pop	{pc}		; (ldr pc, [sp], #4)
   182bc:	bl	114bc <abort@plt>
   182c0:	ldr	ip, [pc, #156]	; 18364 <__assert_fail@plt+0x6e84>
   182c4:	cmp	r2, #0
   182c8:	cmpne	r1, #0
   182cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   182d0:	strd	r6, [sp, #8]
   182d4:	mov	r6, r2
   182d8:	str	r8, [sp, #16]
   182dc:	mov	r8, r3
   182e0:	strd	sl, [sp, #20]
   182e4:	ldrd	r4, [ip]
   182e8:	str	lr, [sp, #28]
   182ec:	sub	sp, sp, #48	; 0x30
   182f0:	mov	lr, #10
   182f4:	ldrd	r2, [ip, #8]
   182f8:	ldrd	sl, [ip, #16]
   182fc:	strd	r4, [sp]
   18300:	ldrd	r4, [ip, #32]
   18304:	str	lr, [sp]
   18308:	strd	r2, [sp, #8]
   1830c:	strd	sl, [sp, #16]
   18310:	ldrd	r2, [ip, #24]
   18314:	ldrd	sl, [ip, #40]	; 0x28
   18318:	strd	r2, [sp, #24]
   1831c:	strd	r4, [sp, #32]
   18320:	strd	sl, [sp, #40]	; 0x28
   18324:	beq	18360 <__assert_fail@plt+0x6e80>
   18328:	mov	r7, r1
   1832c:	mov	r3, sp
   18330:	mov	r1, r8
   18334:	mvn	r2, #0
   18338:	str	r7, [sp, #40]	; 0x28
   1833c:	str	r6, [sp, #44]	; 0x2c
   18340:	bl	16ca8 <__assert_fail@plt+0x57c8>
   18344:	add	sp, sp, #48	; 0x30
   18348:	ldrd	r4, [sp]
   1834c:	ldrd	r6, [sp, #8]
   18350:	ldr	r8, [sp, #16]
   18354:	ldrd	sl, [sp, #20]
   18358:	add	sp, sp, #28
   1835c:	pop	{pc}		; (ldr pc, [sp], #4)
   18360:	bl	114bc <abort@plt>
   18364:	andeq	sp, r2, r0, lsr r6
   18368:	ldr	ip, [pc, #156]	; 1840c <__assert_fail@plt+0x6f2c>
   1836c:	cmp	r2, #0
   18370:	cmpne	r1, #0
   18374:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18378:	strd	r6, [sp, #8]
   1837c:	mov	r6, r2
   18380:	str	r8, [sp, #16]
   18384:	mov	r8, r3
   18388:	strd	sl, [sp, #20]
   1838c:	ldrd	r4, [ip]
   18390:	str	lr, [sp, #28]
   18394:	sub	sp, sp, #48	; 0x30
   18398:	mov	lr, #10
   1839c:	ldrd	r2, [ip, #8]
   183a0:	ldrd	sl, [ip, #16]
   183a4:	strd	r4, [sp]
   183a8:	ldrd	r4, [ip, #32]
   183ac:	str	lr, [sp]
   183b0:	strd	r2, [sp, #8]
   183b4:	strd	sl, [sp, #16]
   183b8:	ldrd	r2, [ip, #24]
   183bc:	ldrd	sl, [ip, #40]	; 0x28
   183c0:	strd	r2, [sp, #24]
   183c4:	strd	r4, [sp, #32]
   183c8:	strd	sl, [sp, #40]	; 0x28
   183cc:	beq	18408 <__assert_fail@plt+0x6f28>
   183d0:	ldr	r2, [sp, #80]	; 0x50
   183d4:	mov	r7, r1
   183d8:	mov	r3, sp
   183dc:	mov	r1, r8
   183e0:	str	r7, [sp, #40]	; 0x28
   183e4:	str	r6, [sp, #44]	; 0x2c
   183e8:	bl	16ca8 <__assert_fail@plt+0x57c8>
   183ec:	add	sp, sp, #48	; 0x30
   183f0:	ldrd	r4, [sp]
   183f4:	ldrd	r6, [sp, #8]
   183f8:	ldr	r8, [sp, #16]
   183fc:	ldrd	sl, [sp, #20]
   18400:	add	sp, sp, #28
   18404:	pop	{pc}		; (ldr pc, [sp], #4)
   18408:	bl	114bc <abort@plt>
   1840c:	andeq	sp, r2, r0, lsr r6
   18410:	ldr	ip, [pc, #512]	; 18618 <__assert_fail@plt+0x7138>
   18414:	cmp	r0, #0
   18418:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1841c:	ldrd	r4, [ip, #16]
   18420:	strd	r6, [sp, #8]
   18424:	clz	r6, r1
   18428:	mov	r7, r1
   1842c:	strd	r8, [sp, #16]
   18430:	mov	r8, r0
   18434:	lsr	r6, r6, #5
   18438:	strd	sl, [sp, #24]
   1843c:	mov	fp, r2
   18440:	mov	sl, #10
   18444:	ldrd	r2, [ip]
   18448:	moveq	r6, #1
   1844c:	str	lr, [sp, #32]
   18450:	sub	sp, sp, #92	; 0x5c
   18454:	cmp	r6, #0
   18458:	ldrd	r0, [ip, #8]
   1845c:	strd	r2, [sp, #40]	; 0x28
   18460:	strd	r4, [sp, #56]	; 0x38
   18464:	ldrd	r2, [ip, #24]
   18468:	strd	r0, [sp, #48]	; 0x30
   1846c:	ldrd	r0, [ip, #32]
   18470:	str	sl, [sp, #40]	; 0x28
   18474:	ldrd	r4, [ip, #40]	; 0x28
   18478:	strd	r2, [sp, #64]	; 0x40
   1847c:	strd	r0, [sp, #72]	; 0x48
   18480:	strd	r4, [sp, #80]	; 0x50
   18484:	bne	18614 <__assert_fail@plt+0x7134>
   18488:	movw	r5, #53612	; 0xd16c
   1848c:	movt	r5, #2
   18490:	str	r8, [sp, #80]	; 0x50
   18494:	str	r7, [sp, #84]	; 0x54
   18498:	bl	1139c <__errno_location@plt>
   1849c:	ldr	r3, [r0]
   184a0:	mov	r9, r0
   184a4:	ldr	r2, [r5, #4]
   184a8:	ldr	r4, [r5]
   184ac:	str	r3, [sp, #28]
   184b0:	cmp	r2, #0
   184b4:	movgt	r1, sl
   184b8:	bgt	18520 <__assert_fail@plt+0x7040>
   184bc:	add	r3, r5, #8
   184c0:	str	r2, [sp, #36]	; 0x24
   184c4:	rsb	r2, r2, #1
   184c8:	cmp	r4, r3
   184cc:	beq	185e8 <__assert_fail@plt+0x7108>
   184d0:	mov	r1, #8
   184d4:	mov	r0, r4
   184d8:	mvn	r3, #-2147483648	; 0x80000000
   184dc:	str	r1, [sp]
   184e0:	add	r1, sp, #36	; 0x24
   184e4:	bl	19a00 <__assert_fail@plt+0x8520>
   184e8:	mov	r4, r0
   184ec:	str	r0, [r5]
   184f0:	ldr	r0, [r5, #4]
   184f4:	mov	r1, #0
   184f8:	ldr	r2, [sp, #36]	; 0x24
   184fc:	sub	r2, r2, r0
   18500:	add	r0, r4, r0, lsl #3
   18504:	lsl	r2, r2, #3
   18508:	bl	113c0 <memset@plt>
   1850c:	ldr	r3, [sp, #36]	; 0x24
   18510:	ldr	r1, [sp, #40]	; 0x28
   18514:	ldr	r8, [sp, #80]	; 0x50
   18518:	str	r3, [r5, #4]
   1851c:	ldr	r7, [sp, #84]	; 0x54
   18520:	mvn	r3, #0
   18524:	mov	r2, fp
   18528:	ldr	r6, [sp, #44]	; 0x2c
   1852c:	ldr	sl, [r4]
   18530:	ldr	r5, [r4, #4]
   18534:	orr	r6, r6, #1
   18538:	stm	sp, {r1, r6}
   1853c:	add	r1, sp, #48	; 0x30
   18540:	str	r8, [sp, #12]
   18544:	mov	r0, r5
   18548:	str	r1, [sp, #8]
   1854c:	mov	r1, sl
   18550:	str	r7, [sp, #16]
   18554:	bl	152bc <__assert_fail@plt+0x3ddc>
   18558:	cmp	sl, r0
   1855c:	bhi	185c0 <__assert_fail@plt+0x70e0>
   18560:	add	r7, r0, #1
   18564:	movw	r3, #54576	; 0xd530
   18568:	movt	r3, #2
   1856c:	cmp	r5, r3
   18570:	str	r7, [r4]
   18574:	beq	18580 <__assert_fail@plt+0x70a0>
   18578:	mov	r0, r5
   1857c:	bl	14e68 <__assert_fail@plt+0x3988>
   18580:	mov	r0, r7
   18584:	bl	1975c <__assert_fail@plt+0x827c>
   18588:	ldr	r3, [sp, #40]	; 0x28
   1858c:	mov	r2, fp
   18590:	mov	r1, r7
   18594:	mov	r5, r0
   18598:	ldr	lr, [sp, #80]	; 0x50
   1859c:	ldr	ip, [sp, #84]	; 0x54
   185a0:	str	r0, [r4, #4]
   185a4:	add	r4, sp, #48	; 0x30
   185a8:	stm	sp, {r3, r6}
   185ac:	mvn	r3, #0
   185b0:	str	r4, [sp, #8]
   185b4:	str	lr, [sp, #12]
   185b8:	str	ip, [sp, #16]
   185bc:	bl	152bc <__assert_fail@plt+0x3ddc>
   185c0:	ldr	r3, [sp, #28]
   185c4:	mov	r0, r5
   185c8:	str	r3, [r9]
   185cc:	add	sp, sp, #92	; 0x5c
   185d0:	ldrd	r4, [sp]
   185d4:	ldrd	r6, [sp, #8]
   185d8:	ldrd	r8, [sp, #16]
   185dc:	ldrd	sl, [sp, #24]
   185e0:	add	sp, sp, #32
   185e4:	pop	{pc}		; (ldr pc, [sp], #4)
   185e8:	mov	r1, #8
   185ec:	mvn	r3, #-2147483648	; 0x80000000
   185f0:	mov	r0, r6
   185f4:	str	r1, [sp]
   185f8:	add	r1, sp, #36	; 0x24
   185fc:	bl	19a00 <__assert_fail@plt+0x8520>
   18600:	ldrd	r2, [r5, #8]
   18604:	mov	r4, r0
   18608:	str	r0, [r5]
   1860c:	strd	r2, [r0]
   18610:	b	184f0 <__assert_fail@plt+0x7010>
   18614:	bl	114bc <abort@plt>
   18618:	andeq	sp, r2, r0, lsr r6
   1861c:	ldr	ip, [pc, #536]	; 1883c <__assert_fail@plt+0x735c>
   18620:	cmp	r0, #0
   18624:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18628:	ldrd	r4, [ip, #16]
   1862c:	strd	r6, [sp, #8]
   18630:	mov	r6, r1
   18634:	mov	r7, r0
   18638:	strd	r8, [sp, #16]
   1863c:	mov	r9, #10
   18640:	strd	sl, [sp, #24]
   18644:	mov	sl, r2
   18648:	mov	fp, r3
   1864c:	str	lr, [sp, #32]
   18650:	clz	lr, r1
   18654:	sub	sp, sp, #92	; 0x5c
   18658:	ldrd	r2, [ip]
   1865c:	lsr	lr, lr, #5
   18660:	moveq	lr, #1
   18664:	ldrd	r0, [ip, #8]
   18668:	cmp	lr, #0
   1866c:	strd	r4, [sp, #56]	; 0x38
   18670:	ldrd	r4, [ip, #40]	; 0x28
   18674:	str	lr, [sp, #28]
   18678:	strd	r2, [sp, #40]	; 0x28
   1867c:	ldrd	r2, [ip, #24]
   18680:	strd	r0, [sp, #48]	; 0x30
   18684:	ldrd	r0, [ip, #32]
   18688:	str	r9, [sp, #40]	; 0x28
   1868c:	strd	r2, [sp, #64]	; 0x40
   18690:	strd	r4, [sp, #80]	; 0x50
   18694:	strd	r0, [sp, #72]	; 0x48
   18698:	bne	18838 <__assert_fail@plt+0x7358>
   1869c:	movw	r5, #53612	; 0xd16c
   186a0:	movt	r5, #2
   186a4:	str	r7, [sp, #80]	; 0x50
   186a8:	str	r6, [sp, #84]	; 0x54
   186ac:	bl	1139c <__errno_location@plt>
   186b0:	ldr	r3, [r0]
   186b4:	mov	r8, r0
   186b8:	ldr	r2, [r5, #4]
   186bc:	ldr	r4, [r5]
   186c0:	str	r3, [sp, #24]
   186c4:	cmp	r2, #0
   186c8:	movgt	r1, r9
   186cc:	bgt	18734 <__assert_fail@plt+0x7254>
   186d0:	add	r3, r5, #8
   186d4:	str	r2, [sp, #36]	; 0x24
   186d8:	rsb	r2, r2, #1
   186dc:	cmp	r4, r3
   186e0:	beq	1880c <__assert_fail@plt+0x732c>
   186e4:	mov	r1, #8
   186e8:	mov	r0, r4
   186ec:	mvn	r3, #-2147483648	; 0x80000000
   186f0:	str	r1, [sp]
   186f4:	add	r1, sp, #36	; 0x24
   186f8:	bl	19a00 <__assert_fail@plt+0x8520>
   186fc:	mov	r4, r0
   18700:	str	r0, [r5]
   18704:	ldr	r0, [r5, #4]
   18708:	mov	r1, #0
   1870c:	ldr	r2, [sp, #36]	; 0x24
   18710:	sub	r2, r2, r0
   18714:	add	r0, r4, r0, lsl #3
   18718:	lsl	r2, r2, #3
   1871c:	bl	113c0 <memset@plt>
   18720:	ldr	r3, [sp, #36]	; 0x24
   18724:	ldr	r1, [sp, #40]	; 0x28
   18728:	ldr	r7, [sp, #80]	; 0x50
   1872c:	str	r3, [r5, #4]
   18730:	ldr	r6, [sp, #84]	; 0x54
   18734:	mov	r3, fp
   18738:	mov	r2, sl
   1873c:	ldr	r0, [sp, #44]	; 0x2c
   18740:	ldr	r9, [r4]
   18744:	ldr	r5, [r4, #4]
   18748:	orr	r0, r0, #1
   1874c:	str	r1, [sp]
   18750:	add	r1, sp, #48	; 0x30
   18754:	str	r0, [sp, #4]
   18758:	str	r1, [sp, #8]
   1875c:	mov	r1, r9
   18760:	str	r7, [sp, #12]
   18764:	str	r6, [sp, #16]
   18768:	str	r0, [sp, #28]
   1876c:	mov	r0, r5
   18770:	bl	152bc <__assert_fail@plt+0x3ddc>
   18774:	cmp	r9, r0
   18778:	bhi	187e4 <__assert_fail@plt+0x7304>
   1877c:	add	r6, r0, #1
   18780:	movw	r3, #54576	; 0xd530
   18784:	movt	r3, #2
   18788:	cmp	r5, r3
   1878c:	str	r6, [r4]
   18790:	beq	1879c <__assert_fail@plt+0x72bc>
   18794:	mov	r0, r5
   18798:	bl	14e68 <__assert_fail@plt+0x3988>
   1879c:	mov	r0, r6
   187a0:	bl	1975c <__assert_fail@plt+0x827c>
   187a4:	ldr	lr, [sp, #40]	; 0x28
   187a8:	mov	r1, r6
   187ac:	mov	r3, fp
   187b0:	mov	r2, sl
   187b4:	mov	r5, r0
   187b8:	ldr	r6, [sp, #80]	; 0x50
   187bc:	ldr	ip, [sp, #84]	; 0x54
   187c0:	str	r0, [r4, #4]
   187c4:	str	lr, [sp]
   187c8:	ldr	lr, [sp, #28]
   187cc:	str	lr, [sp, #4]
   187d0:	add	lr, sp, #48	; 0x30
   187d4:	str	r6, [sp, #12]
   187d8:	str	lr, [sp, #8]
   187dc:	str	ip, [sp, #16]
   187e0:	bl	152bc <__assert_fail@plt+0x3ddc>
   187e4:	ldr	r3, [sp, #24]
   187e8:	mov	r0, r5
   187ec:	str	r3, [r8]
   187f0:	add	sp, sp, #92	; 0x5c
   187f4:	ldrd	r4, [sp]
   187f8:	ldrd	r6, [sp, #8]
   187fc:	ldrd	r8, [sp, #16]
   18800:	ldrd	sl, [sp, #24]
   18804:	add	sp, sp, #32
   18808:	pop	{pc}		; (ldr pc, [sp], #4)
   1880c:	mov	r1, #8
   18810:	mvn	r3, #-2147483648	; 0x80000000
   18814:	ldr	r0, [sp, #28]
   18818:	str	r1, [sp]
   1881c:	add	r1, sp, #36	; 0x24
   18820:	bl	19a00 <__assert_fail@plt+0x8520>
   18824:	ldrd	r2, [r5, #8]
   18828:	mov	r4, r0
   1882c:	str	r0, [r5]
   18830:	strd	r2, [r0]
   18834:	b	18704 <__assert_fail@plt+0x7224>
   18838:	bl	114bc <abort@plt>
   1883c:	andeq	sp, r2, r0, lsr r6
   18840:	ldr	r3, [pc]	; 18848 <__assert_fail@plt+0x7368>
   18844:	b	16ca8 <__assert_fail@plt+0x57c8>
   18848:	andeq	sp, r2, ip, ror r1
   1884c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18850:	movw	r4, #53612	; 0xd16c
   18854:	movt	r4, #2
   18858:	strd	r6, [sp, #8]
   1885c:	strd	r8, [sp, #16]
   18860:	strd	sl, [sp, #24]
   18864:	mov	sl, r0
   18868:	mov	fp, r1
   1886c:	str	lr, [sp, #32]
   18870:	sub	sp, sp, #44	; 0x2c
   18874:	bl	1139c <__errno_location@plt>
   18878:	ldr	r3, [r0]
   1887c:	mov	r8, r0
   18880:	ldr	r2, [r4, #4]
   18884:	ldr	r5, [r4]
   18888:	str	r3, [sp, #28]
   1888c:	cmp	r2, #0
   18890:	bgt	188ec <__assert_fail@plt+0x740c>
   18894:	add	r3, r4, #8
   18898:	str	r2, [sp, #36]	; 0x24
   1889c:	rsb	r2, r2, #1
   188a0:	cmp	r5, r3
   188a4:	beq	189c8 <__assert_fail@plt+0x74e8>
   188a8:	mov	r1, #8
   188ac:	mov	r0, r5
   188b0:	mvn	r3, #-2147483648	; 0x80000000
   188b4:	str	r1, [sp]
   188b8:	add	r1, sp, #36	; 0x24
   188bc:	bl	19a00 <__assert_fail@plt+0x8520>
   188c0:	mov	r5, r0
   188c4:	str	r0, [r4]
   188c8:	ldr	r0, [r4, #4]
   188cc:	mov	r1, #0
   188d0:	ldr	r2, [sp, #36]	; 0x24
   188d4:	sub	r2, r2, r0
   188d8:	add	r0, r5, r0, lsl #3
   188dc:	lsl	r2, r2, #3
   188e0:	bl	113c0 <memset@plt>
   188e4:	ldr	r3, [sp, #36]	; 0x24
   188e8:	str	r3, [r4, #4]
   188ec:	ldr	ip, [r4, #16]
   188f0:	mov	r3, fp
   188f4:	mov	r2, sl
   188f8:	ldr	r7, [r4, #20]
   188fc:	ldr	r0, [pc, #240]	; 189f4 <__assert_fail@plt+0x7514>
   18900:	ldr	r9, [r5]
   18904:	orr	r7, r7, #1
   18908:	ldr	r6, [r5, #4]
   1890c:	str	ip, [sp]
   18910:	ldr	ip, [r4, #56]	; 0x38
   18914:	mov	r1, r9
   18918:	str	r7, [sp, #4]
   1891c:	ldr	lr, [r4, #60]	; 0x3c
   18920:	str	r0, [sp, #8]
   18924:	mov	r0, r6
   18928:	str	ip, [sp, #12]
   1892c:	str	lr, [sp, #16]
   18930:	bl	152bc <__assert_fail@plt+0x3ddc>
   18934:	cmp	r9, r0
   18938:	bhi	189a0 <__assert_fail@plt+0x74c0>
   1893c:	add	r9, r0, #1
   18940:	movw	r3, #54576	; 0xd530
   18944:	movt	r3, #2
   18948:	cmp	r6, r3
   1894c:	str	r9, [r5]
   18950:	beq	1895c <__assert_fail@plt+0x747c>
   18954:	mov	r0, r6
   18958:	bl	14e68 <__assert_fail@plt+0x3988>
   1895c:	mov	r0, r9
   18960:	bl	1975c <__assert_fail@plt+0x827c>
   18964:	ldr	ip, [r4, #16]
   18968:	mov	r1, r9
   1896c:	mov	r3, fp
   18970:	mov	r2, sl
   18974:	mov	r6, r0
   18978:	ldr	r9, [r4, #56]	; 0x38
   1897c:	ldr	lr, [r4, #60]	; 0x3c
   18980:	str	r0, [r5, #4]
   18984:	str	ip, [sp]
   18988:	ldr	ip, [pc, #100]	; 189f4 <__assert_fail@plt+0x7514>
   1898c:	str	r7, [sp, #4]
   18990:	str	ip, [sp, #8]
   18994:	str	r9, [sp, #12]
   18998:	str	lr, [sp, #16]
   1899c:	bl	152bc <__assert_fail@plt+0x3ddc>
   189a0:	ldr	r3, [sp, #28]
   189a4:	mov	r0, r6
   189a8:	str	r3, [r8]
   189ac:	add	sp, sp, #44	; 0x2c
   189b0:	ldrd	r4, [sp]
   189b4:	ldrd	r6, [sp, #8]
   189b8:	ldrd	r8, [sp, #16]
   189bc:	ldrd	sl, [sp, #24]
   189c0:	add	sp, sp, #32
   189c4:	pop	{pc}		; (ldr pc, [sp], #4)
   189c8:	mov	r0, #8
   189cc:	mvn	r3, #-2147483648	; 0x80000000
   189d0:	add	r1, sp, #36	; 0x24
   189d4:	str	r0, [sp]
   189d8:	mov	r0, #0
   189dc:	bl	19a00 <__assert_fail@plt+0x8520>
   189e0:	ldrd	r2, [r4, #8]
   189e4:	mov	r5, r0
   189e8:	str	r0, [r4]
   189ec:	strd	r2, [r0]
   189f0:	b	188c8 <__assert_fail@plt+0x73e8>
   189f4:	andeq	sp, r2, r4, lsl #3
   189f8:	ldr	r3, [pc, #4]	; 18a04 <__assert_fail@plt+0x7524>
   189fc:	mvn	r2, #0
   18a00:	b	16ca8 <__assert_fail@plt+0x57c8>
   18a04:	andeq	sp, r2, ip, ror r1
   18a08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a0c:	movw	r4, #53612	; 0xd16c
   18a10:	movt	r4, #2
   18a14:	strd	r6, [sp, #8]
   18a18:	strd	r8, [sp, #16]
   18a1c:	strd	sl, [sp, #24]
   18a20:	mov	sl, r0
   18a24:	str	lr, [sp, #32]
   18a28:	sub	sp, sp, #44	; 0x2c
   18a2c:	bl	1139c <__errno_location@plt>
   18a30:	ldr	r3, [r0]
   18a34:	mov	r8, r0
   18a38:	ldr	r2, [r4, #4]
   18a3c:	ldr	r5, [r4]
   18a40:	str	r3, [sp, #28]
   18a44:	cmp	r2, #0
   18a48:	bgt	18aa4 <__assert_fail@plt+0x75c4>
   18a4c:	add	r3, r4, #8
   18a50:	str	r2, [sp, #36]	; 0x24
   18a54:	rsb	r2, r2, #1
   18a58:	cmp	r5, r3
   18a5c:	beq	18b6c <__assert_fail@plt+0x768c>
   18a60:	mov	r1, #8
   18a64:	mov	r0, r5
   18a68:	mvn	r3, #-2147483648	; 0x80000000
   18a6c:	str	r1, [sp]
   18a70:	add	r1, sp, #36	; 0x24
   18a74:	bl	19a00 <__assert_fail@plt+0x8520>
   18a78:	mov	r5, r0
   18a7c:	str	r0, [r4]
   18a80:	ldr	r0, [r4, #4]
   18a84:	mov	r1, #0
   18a88:	ldr	r2, [sp, #36]	; 0x24
   18a8c:	sub	r2, r2, r0
   18a90:	add	r0, r5, r0, lsl #3
   18a94:	lsl	r2, r2, #3
   18a98:	bl	113c0 <memset@plt>
   18a9c:	ldr	r3, [sp, #36]	; 0x24
   18aa0:	str	r3, [r4, #4]
   18aa4:	ldr	ip, [r4, #16]
   18aa8:	mvn	r3, #0
   18aac:	mov	r2, sl
   18ab0:	ldr	r7, [r4, #20]
   18ab4:	ldr	fp, [pc, #220]	; 18b98 <__assert_fail@plt+0x76b8>
   18ab8:	ldr	r9, [r5]
   18abc:	orr	r7, r7, #1
   18ac0:	ldr	r6, [r5, #4]
   18ac4:	str	ip, [sp]
   18ac8:	ldr	ip, [r4, #56]	; 0x38
   18acc:	mov	r1, r9
   18ad0:	stmib	sp, {r7, fp}
   18ad4:	ldr	lr, [r4, #60]	; 0x3c
   18ad8:	mov	r0, r6
   18adc:	str	ip, [sp, #12]
   18ae0:	str	lr, [sp, #16]
   18ae4:	bl	152bc <__assert_fail@plt+0x3ddc>
   18ae8:	cmp	r9, r0
   18aec:	bhi	18b44 <__assert_fail@plt+0x7664>
   18af0:	add	r9, r0, #1
   18af4:	movw	r3, #54576	; 0xd530
   18af8:	movt	r3, #2
   18afc:	cmp	r6, r3
   18b00:	str	r9, [r5]
   18b04:	beq	18b10 <__assert_fail@plt+0x7630>
   18b08:	mov	r0, r6
   18b0c:	bl	14e68 <__assert_fail@plt+0x3988>
   18b10:	mov	r0, r9
   18b14:	bl	1975c <__assert_fail@plt+0x827c>
   18b18:	ldr	r3, [r4, #16]
   18b1c:	mov	r2, sl
   18b20:	mov	r1, r9
   18b24:	mov	r6, r0
   18b28:	ldr	lr, [r4, #56]	; 0x38
   18b2c:	ldr	ip, [r4, #60]	; 0x3c
   18b30:	str	r0, [r5, #4]
   18b34:	stm	sp, {r3, r7, fp, lr}
   18b38:	mvn	r3, #0
   18b3c:	str	ip, [sp, #16]
   18b40:	bl	152bc <__assert_fail@plt+0x3ddc>
   18b44:	ldr	r3, [sp, #28]
   18b48:	mov	r0, r6
   18b4c:	str	r3, [r8]
   18b50:	add	sp, sp, #44	; 0x2c
   18b54:	ldrd	r4, [sp]
   18b58:	ldrd	r6, [sp, #8]
   18b5c:	ldrd	r8, [sp, #16]
   18b60:	ldrd	sl, [sp, #24]
   18b64:	add	sp, sp, #32
   18b68:	pop	{pc}		; (ldr pc, [sp], #4)
   18b6c:	mov	r0, #8
   18b70:	mvn	r3, #-2147483648	; 0x80000000
   18b74:	add	r1, sp, #36	; 0x24
   18b78:	str	r0, [sp]
   18b7c:	mov	r0, #0
   18b80:	bl	19a00 <__assert_fail@plt+0x8520>
   18b84:	ldrd	r2, [r4, #8]
   18b88:	mov	r5, r0
   18b8c:	str	r0, [r4]
   18b90:	strd	r2, [r0]
   18b94:	b	18a80 <__assert_fail@plt+0x75a0>
   18b98:	andeq	sp, r2, r4, lsl #3
   18b9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ba0:	mov	r5, #0
   18ba4:	movt	r5, #32752	; 0x7ff0
   18ba8:	mov	r4, r2
   18bac:	strd	r6, [sp, #8]
   18bb0:	mov	r7, r1
   18bb4:	str	r8, [sp, #16]
   18bb8:	mov	r8, r0
   18bbc:	str	lr, [sp, #20]
   18bc0:	mov	r2, r4
   18bc4:	mov	r1, r7
   18bc8:	mov	r0, r8
   18bcc:	bl	11180 <read@plt>
   18bd0:	subs	r6, r0, #0
   18bd4:	bge	18c08 <__assert_fail@plt+0x7728>
   18bd8:	bl	1139c <__errno_location@plt>
   18bdc:	ldr	r3, [r0]
   18be0:	cmp	r3, #4
   18be4:	beq	18bc0 <__assert_fail@plt+0x76e0>
   18be8:	cmp	r4, r5
   18bec:	mov	r4, r5
   18bf0:	movls	r2, #0
   18bf4:	movhi	r2, #1
   18bf8:	cmp	r3, #22
   18bfc:	movne	r2, #0
   18c00:	cmp	r2, #0
   18c04:	bne	18bc0 <__assert_fail@plt+0x76e0>
   18c08:	mov	r0, r6
   18c0c:	ldrd	r4, [sp]
   18c10:	ldrd	r6, [sp, #8]
   18c14:	ldr	r8, [sp, #16]
   18c18:	add	sp, sp, #20
   18c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18c24:	mov	r5, #0
   18c28:	movt	r5, #32752	; 0x7ff0
   18c2c:	mov	r4, r2
   18c30:	strd	r6, [sp, #8]
   18c34:	mov	r7, r1
   18c38:	str	r8, [sp, #16]
   18c3c:	mov	r8, r0
   18c40:	str	lr, [sp, #20]
   18c44:	mov	r2, r4
   18c48:	mov	r1, r7
   18c4c:	mov	r0, r8
   18c50:	bl	113d8 <write@plt>
   18c54:	subs	r6, r0, #0
   18c58:	bge	18c8c <__assert_fail@plt+0x77ac>
   18c5c:	bl	1139c <__errno_location@plt>
   18c60:	ldr	r2, [r0]
   18c64:	cmp	r2, #4
   18c68:	beq	18c44 <__assert_fail@plt+0x7764>
   18c6c:	sub	r3, r2, #22
   18c70:	cmp	r4, r5
   18c74:	clz	r3, r3
   18c78:	mov	r4, r5
   18c7c:	lsr	r3, r3, #5
   18c80:	movls	r3, #0
   18c84:	cmp	r3, #0
   18c88:	bne	18c44 <__assert_fail@plt+0x7764>
   18c8c:	mov	r0, r6
   18c90:	ldrd	r4, [sp]
   18c94:	ldrd	r6, [sp, #8]
   18c98:	ldr	r8, [sp, #16]
   18c9c:	add	sp, sp, #20
   18ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ca4:	strd	r4, [sp, #-20]!	; 0xffffffec
   18ca8:	strd	r6, [sp, #8]
   18cac:	mov	r6, r1
   18cb0:	str	lr, [sp, #16]
   18cb4:	sub	sp, sp, #12
   18cb8:	ldrb	r3, [r0]
   18cbc:	sub	r3, r3, #48	; 0x30
   18cc0:	cmp	r3, #9
   18cc4:	bls	18d28 <__assert_fail@plt+0x7848>
   18cc8:	mov	r7, r0
   18ccc:	ldr	r5, [pc, #352]	; 18e34 <__assert_fail@plt+0x7954>
   18cd0:	mov	r4, #0
   18cd4:	b	18ce4 <__assert_fail@plt+0x7804>
   18cd8:	add	r4, r4, #1
   18cdc:	cmp	r4, #35	; 0x23
   18ce0:	beq	18d5c <__assert_fail@plt+0x787c>
   18ce4:	mov	r0, r5
   18ce8:	mov	r1, r7
   18cec:	bl	11168 <strcmp@plt>
   18cf0:	cmp	r0, #0
   18cf4:	add	r5, r5, #12
   18cf8:	bne	18cd8 <__assert_fail@plt+0x77f8>
   18cfc:	add	r4, r4, r4, lsl #1
   18d00:	movw	r3, #53676	; 0xd1ac
   18d04:	movt	r3, #2
   18d08:	ldr	r4, [r3, r4, lsl #2]
   18d0c:	asr	r0, r4, #31
   18d10:	str	r4, [r6]
   18d14:	add	sp, sp, #12
   18d18:	ldrd	r4, [sp]
   18d1c:	ldrd	r6, [sp, #8]
   18d20:	add	sp, sp, #16
   18d24:	pop	{pc}		; (ldr pc, [sp], #4)
   18d28:	mov	r2, #10
   18d2c:	add	r1, sp, #4
   18d30:	bl	11174 <strtol@plt>
   18d34:	ldr	r2, [sp, #4]
   18d38:	mov	r4, r0
   18d3c:	ldrb	r2, [r2]
   18d40:	cmp	r0, #64	; 0x40
   18d44:	cmple	r2, #0
   18d48:	beq	18d0c <__assert_fail@plt+0x782c>
   18d4c:	mvn	r3, #0
   18d50:	mov	r0, r3
   18d54:	str	r3, [r6]
   18d58:	b	18d14 <__assert_fail@plt+0x7834>
   18d5c:	bl	114a4 <__libc_current_sigrtmin@plt>
   18d60:	mov	r5, r0
   18d64:	bl	11360 <__libc_current_sigrtmax@plt>
   18d68:	cmp	r5, #0
   18d6c:	mov	r4, r0
   18d70:	ble	18d90 <__assert_fail@plt+0x78b0>
   18d74:	movw	r1, #51196	; 0xc7fc
   18d78:	movt	r1, #1
   18d7c:	mov	r2, #5
   18d80:	mov	r0, r7
   18d84:	bl	114b0 <strncmp@plt>
   18d88:	cmp	r0, #0
   18d8c:	beq	18dfc <__assert_fail@plt+0x791c>
   18d90:	cmp	r4, #0
   18d94:	ble	18d4c <__assert_fail@plt+0x786c>
   18d98:	movw	r1, #51204	; 0xc804
   18d9c:	movt	r1, #1
   18da0:	mov	r2, #5
   18da4:	mov	r0, r7
   18da8:	bl	114b0 <strncmp@plt>
   18dac:	cmp	r0, #0
   18db0:	bne	18d4c <__assert_fail@plt+0x786c>
   18db4:	add	r0, r7, #5
   18db8:	mov	r2, #10
   18dbc:	add	r1, sp, #4
   18dc0:	bl	11174 <strtol@plt>
   18dc4:	ldr	r3, [sp, #4]
   18dc8:	ldrb	r3, [r3]
   18dcc:	cmp	r3, #0
   18dd0:	bne	18d4c <__assert_fail@plt+0x786c>
   18dd4:	sub	r3, r5, r4
   18dd8:	cmp	r0, r3
   18ddc:	movlt	r5, #0
   18de0:	movge	r5, #1
   18de4:	cmp	r0, #0
   18de8:	movgt	r5, #0
   18dec:	cmp	r5, #0
   18df0:	beq	18d4c <__assert_fail@plt+0x786c>
   18df4:	add	r4, r4, r0
   18df8:	b	18d0c <__assert_fail@plt+0x782c>
   18dfc:	add	r0, r7, #5
   18e00:	mov	r2, #10
   18e04:	add	r1, sp, #4
   18e08:	bl	11174 <strtol@plt>
   18e0c:	ldr	r3, [sp, #4]
   18e10:	ldrb	r3, [r3]
   18e14:	cmp	r0, #0
   18e18:	cmpge	r3, #0
   18e1c:	bne	18d4c <__assert_fail@plt+0x786c>
   18e20:	sub	r3, r4, r5
   18e24:	cmp	r0, r3
   18e28:	bgt	18d4c <__assert_fail@plt+0x786c>
   18e2c:	add	r4, r5, r0
   18e30:	b	18d0c <__assert_fail@plt+0x782c>
   18e34:			; <UNDEFINED> instruction: 0x0002d1b0
   18e38:	strd	r4, [sp, #-16]!
   18e3c:	mov	r3, #0
   18e40:	mov	r4, r0
   18e44:	mov	r5, r1
   18e48:	str	r6, [sp, #8]
   18e4c:	str	lr, [sp, #12]
   18e50:	movw	lr, #53676	; 0xd1ac
   18e54:	movt	lr, #2
   18e58:	sub	sp, sp, #8
   18e5c:	mov	r2, lr
   18e60:	b	18e70 <__assert_fail@plt+0x7990>
   18e64:	add	r3, r3, #1
   18e68:	cmp	r3, #35	; 0x23
   18e6c:	beq	18eb0 <__assert_fail@plt+0x79d0>
   18e70:	ldr	ip, [r2]
   18e74:	add	r2, r2, #12
   18e78:	cmp	ip, r4
   18e7c:	bne	18e64 <__assert_fail@plt+0x7984>
   18e80:	add	r3, r3, r3, lsl #1
   18e84:	mov	r0, r5
   18e88:	mov	r4, #0
   18e8c:	add	r3, lr, r3, lsl #2
   18e90:	add	r1, r3, #4
   18e94:	bl	112ac <strcpy@plt>
   18e98:	mov	r0, r4
   18e9c:	add	sp, sp, #8
   18ea0:	ldrd	r4, [sp]
   18ea4:	ldr	r6, [sp, #8]
   18ea8:	add	sp, sp, #12
   18eac:	pop	{pc}		; (ldr pc, [sp], #4)
   18eb0:	bl	114a4 <__libc_current_sigrtmin@plt>
   18eb4:	mov	r6, r0
   18eb8:	bl	11360 <__libc_current_sigrtmax@plt>
   18ebc:	cmp	r4, r0
   18ec0:	movle	r3, #0
   18ec4:	movgt	r3, #1
   18ec8:	cmp	r4, r6
   18ecc:	orrlt	r3, r3, #1
   18ed0:	cmp	r3, #0
   18ed4:	bne	18f4c <__assert_fail@plt+0x7a6c>
   18ed8:	sub	r3, r0, r6
   18edc:	add	r3, r6, r3, asr #1
   18ee0:	cmp	r3, r4
   18ee4:	bge	18f30 <__assert_fail@plt+0x7a50>
   18ee8:	movw	r3, #51204	; 0xc804
   18eec:	movt	r3, #1
   18ef0:	ldr	r2, [r3]
   18ef4:	mov	r6, r0
   18ef8:	ldrh	r3, [r3, #4]
   18efc:	str	r2, [r5]
   18f00:	strh	r3, [r5, #4]
   18f04:	subs	r4, r4, r6
   18f08:	beq	18e98 <__assert_fail@plt+0x79b8>
   18f0c:	add	r0, r5, #5
   18f10:	movw	r3, #51212	; 0xc80c
   18f14:	movt	r3, #1
   18f18:	mvn	r2, #0
   18f1c:	str	r4, [sp]
   18f20:	mov	r1, #1
   18f24:	mov	r4, #0
   18f28:	bl	113a8 <__sprintf_chk@plt>
   18f2c:	b	18e98 <__assert_fail@plt+0x79b8>
   18f30:	movw	r3, #51196	; 0xc7fc
   18f34:	movt	r3, #1
   18f38:	ldr	r2, [r3]
   18f3c:	ldrh	r3, [r3, #4]
   18f40:	str	r2, [r5]
   18f44:	strh	r3, [r5, #4]
   18f48:	b	18f04 <__assert_fail@plt+0x7a24>
   18f4c:	mvn	r4, #0
   18f50:	b	18e98 <__assert_fail@plt+0x79b8>
   18f54:	cmp	r0, #2
   18f58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18f5c:	mov	r4, r0
   18f60:	strd	r6, [sp, #8]
   18f64:	str	r8, [sp, #16]
   18f68:	str	lr, [sp, #20]
   18f6c:	bls	18f88 <__assert_fail@plt+0x7aa8>
   18f70:	mov	r0, r4
   18f74:	ldrd	r4, [sp]
   18f78:	ldrd	r6, [sp, #8]
   18f7c:	ldr	r8, [sp, #16]
   18f80:	add	sp, sp, #20
   18f84:	pop	{pc}		; (ldr pc, [sp], #4)
   18f88:	bl	1af78 <__assert_fail@plt+0x9a98>
   18f8c:	mov	r7, r0
   18f90:	bl	1139c <__errno_location@plt>
   18f94:	mov	r5, r0
   18f98:	mov	r0, r4
   18f9c:	ldr	r6, [r5]
   18fa0:	mov	r4, r7
   18fa4:	bl	114c8 <close@plt>
   18fa8:	str	r6, [r5]
   18fac:	b	18f70 <__assert_fail@plt+0x7a90>
   18fb0:	cmp	r1, #0
   18fb4:	strd	r4, [sp, #-16]!
   18fb8:	mov	ip, r3
   18fbc:	str	r6, [sp, #8]
   18fc0:	mov	r4, r0
   18fc4:	str	lr, [sp, #12]
   18fc8:	sub	sp, sp, #32
   18fcc:	ldr	r5, [sp, #48]	; 0x30
   18fd0:	ldr	r6, [sp, #52]	; 0x34
   18fd4:	beq	19118 <__assert_fail@plt+0x7c38>
   18fd8:	mov	r3, r1
   18fdc:	mov	r1, #1
   18fe0:	stm	sp, {r2, ip}
   18fe4:	movw	r2, #51216	; 0xc810
   18fe8:	movt	r2, #1
   18fec:	bl	113f0 <__fprintf_chk@plt>
   18ff0:	mov	r2, #5
   18ff4:	movw	r1, #51236	; 0xc824
   18ff8:	movt	r1, #1
   18ffc:	mov	r0, #0
   19000:	bl	1121c <dcgettext@plt>
   19004:	movw	ip, #2022	; 0x7e6
   19008:	mov	r3, r0
   1900c:	mov	r1, #1
   19010:	movw	r2, #51964	; 0xcafc
   19014:	movt	r2, #1
   19018:	mov	r0, r4
   1901c:	str	ip, [sp]
   19020:	bl	113f0 <__fprintf_chk@plt>
   19024:	mov	r1, r4
   19028:	mov	r0, #10
   1902c:	bl	11210 <fputc_unlocked@plt>
   19030:	mov	r2, #5
   19034:	movw	r1, #51240	; 0xc828
   19038:	movt	r1, #1
   1903c:	mov	r0, #0
   19040:	bl	1121c <dcgettext@plt>
   19044:	mov	r2, r0
   19048:	mov	r1, #1
   1904c:	movw	r3, #51412	; 0xc8d4
   19050:	movt	r3, #1
   19054:	mov	r0, r4
   19058:	bl	113f0 <__fprintf_chk@plt>
   1905c:	mov	r1, r4
   19060:	mov	r0, #10
   19064:	bl	11210 <fputc_unlocked@plt>
   19068:	cmp	r6, #9
   1906c:	ldrls	pc, [pc, r6, lsl #2]
   19070:	b	19384 <__assert_fail@plt+0x7ea4>
   19074:	andeq	r9, r1, r4, lsl #2
   19078:	andeq	r9, r1, r4, lsr r1
   1907c:	andeq	r9, r1, r0, ror r1
   19080:			; <UNDEFINED> instruction: 0x000191b0
   19084:	strdeq	r9, [r1], -r8
   19088:	andeq	r9, r1, r0, lsr r2
   1908c:	andeq	r9, r1, r8, ror r2
   19090:	andeq	r9, r1, ip, asr #5
   19094:	andeq	r9, r1, r4, lsr #6
   19098:	muleq	r1, ip, r0
   1909c:	movw	r1, #51716	; 0xca04
   190a0:	movt	r1, #1
   190a4:	mov	r2, #5
   190a8:	mov	r0, #0
   190ac:	bl	1121c <dcgettext@plt>
   190b0:	ldr	lr, [r5, #4]
   190b4:	mov	r2, r0
   190b8:	mov	r1, #1
   190bc:	mov	r0, r4
   190c0:	ldr	r3, [r5, #8]
   190c4:	ldr	ip, [r5, #32]
   190c8:	str	lr, [sp]
   190cc:	ldr	lr, [r5, #12]
   190d0:	str	ip, [sp, #28]
   190d4:	ldr	ip, [r5, #28]
   190d8:	str	r3, [sp, #4]
   190dc:	ldr	r3, [r5, #16]
   190e0:	str	lr, [sp, #8]
   190e4:	ldr	lr, [r5, #20]
   190e8:	str	ip, [sp, #24]
   190ec:	ldr	ip, [r5, #24]
   190f0:	str	r3, [sp, #12]
   190f4:	ldr	r3, [r5]
   190f8:	str	lr, [sp, #16]
   190fc:	str	ip, [sp, #20]
   19100:	bl	113f0 <__fprintf_chk@plt>
   19104:	add	sp, sp, #32
   19108:	ldrd	r4, [sp]
   1910c:	ldr	r6, [sp, #8]
   19110:	add	sp, sp, #12
   19114:	pop	{pc}		; (ldr pc, [sp], #4)
   19118:	mov	r3, r2
   1911c:	mov	r1, #1
   19120:	str	ip, [sp]
   19124:	movw	r2, #51228	; 0xc81c
   19128:	movt	r2, #1
   1912c:	bl	113f0 <__fprintf_chk@plt>
   19130:	b	18ff0 <__assert_fail@plt+0x7b10>
   19134:	mov	r2, #5
   19138:	movw	r1, #51448	; 0xc8f8
   1913c:	movt	r1, #1
   19140:	mov	r0, #0
   19144:	bl	1121c <dcgettext@plt>
   19148:	ldr	r3, [r5]
   1914c:	mov	r2, r0
   19150:	mov	r1, #1
   19154:	mov	r0, r4
   19158:	add	sp, sp, #32
   1915c:	ldrd	r4, [sp]
   19160:	ldr	r6, [sp, #8]
   19164:	ldr	lr, [sp, #12]
   19168:	add	sp, sp, #16
   1916c:	b	113f0 <__fprintf_chk@plt>
   19170:	mov	r2, #5
   19174:	movw	r1, #51464	; 0xc908
   19178:	movt	r1, #1
   1917c:	mov	r0, #0
   19180:	bl	1121c <dcgettext@plt>
   19184:	ldm	r5, {r3, ip}
   19188:	mov	r2, r0
   1918c:	mov	r1, #1
   19190:	mov	r0, r4
   19194:	str	ip, [sp, #48]	; 0x30
   19198:	add	sp, sp, #32
   1919c:	ldrd	r4, [sp]
   191a0:	ldr	r6, [sp, #8]
   191a4:	ldr	lr, [sp, #12]
   191a8:	add	sp, sp, #16
   191ac:	b	113f0 <__fprintf_chk@plt>
   191b0:	mov	r2, #5
   191b4:	movw	r1, #51488	; 0xc920
   191b8:	movt	r1, #1
   191bc:	mov	r0, #0
   191c0:	bl	1121c <dcgettext@plt>
   191c4:	ldm	r5, {r3, lr}
   191c8:	mov	r2, r0
   191cc:	mov	r1, #1
   191d0:	mov	r0, r4
   191d4:	ldr	ip, [r5, #8]
   191d8:	str	lr, [sp, #48]	; 0x30
   191dc:	str	ip, [sp, #52]	; 0x34
   191e0:	add	sp, sp, #32
   191e4:	ldrd	r4, [sp]
   191e8:	ldr	r6, [sp, #8]
   191ec:	ldr	lr, [sp, #12]
   191f0:	add	sp, sp, #16
   191f4:	b	113f0 <__fprintf_chk@plt>
   191f8:	mov	r2, #5
   191fc:	movw	r1, #51516	; 0xc93c
   19200:	movt	r1, #1
   19204:	mov	r0, #0
   19208:	bl	1121c <dcgettext@plt>
   1920c:	ldmib	r5, {r3, ip, lr}
   19210:	mov	r2, r0
   19214:	mov	r1, #1
   19218:	mov	r0, r4
   1921c:	str	r3, [sp]
   19220:	ldr	r3, [r5]
   19224:	stmib	sp, {ip, lr}
   19228:	bl	113f0 <__fprintf_chk@plt>
   1922c:	b	19104 <__assert_fail@plt+0x7c24>
   19230:	mov	r2, #5
   19234:	movw	r1, #51548	; 0xc95c
   19238:	movt	r1, #1
   1923c:	mov	r0, #0
   19240:	bl	1121c <dcgettext@plt>
   19244:	ldmib	r5, {ip, lr}
   19248:	mov	r2, r0
   1924c:	mov	r1, #1
   19250:	mov	r0, r4
   19254:	ldr	r3, [r5, #16]
   19258:	str	ip, [sp]
   1925c:	ldr	ip, [r5, #12]
   19260:	str	r3, [sp, #12]
   19264:	ldr	r3, [r5]
   19268:	str	lr, [sp, #4]
   1926c:	str	ip, [sp, #8]
   19270:	bl	113f0 <__fprintf_chk@plt>
   19274:	b	19104 <__assert_fail@plt+0x7c24>
   19278:	mov	r2, #5
   1927c:	movw	r1, #51584	; 0xc980
   19280:	movt	r1, #1
   19284:	mov	r0, #0
   19288:	bl	1121c <dcgettext@plt>
   1928c:	ldr	lr, [r5, #4]
   19290:	mov	r2, r0
   19294:	mov	r1, #1
   19298:	mov	r0, r4
   1929c:	ldr	r3, [r5, #8]
   192a0:	ldr	ip, [r5, #20]
   192a4:	str	lr, [sp]
   192a8:	ldr	lr, [r5, #12]
   192ac:	str	ip, [sp, #16]
   192b0:	ldr	ip, [r5, #16]
   192b4:	str	r3, [sp, #4]
   192b8:	ldr	r3, [r5]
   192bc:	str	lr, [sp, #8]
   192c0:	str	ip, [sp, #12]
   192c4:	bl	113f0 <__fprintf_chk@plt>
   192c8:	b	19104 <__assert_fail@plt+0x7c24>
   192cc:	mov	r2, #5
   192d0:	movw	r1, #51624	; 0xc9a8
   192d4:	movt	r1, #1
   192d8:	mov	r0, #0
   192dc:	bl	1121c <dcgettext@plt>
   192e0:	ldmib	r5, {r3, ip}
   192e4:	mov	r2, r0
   192e8:	mov	r1, #1
   192ec:	mov	r0, r4
   192f0:	ldr	lr, [r5, #24]
   192f4:	str	r3, [sp]
   192f8:	ldr	r3, [r5, #12]
   192fc:	str	lr, [sp, #20]
   19300:	ldr	lr, [r5, #20]
   19304:	str	ip, [sp, #4]
   19308:	ldr	ip, [r5, #16]
   1930c:	str	r3, [sp, #8]
   19310:	ldr	r3, [r5]
   19314:	str	ip, [sp, #12]
   19318:	str	lr, [sp, #16]
   1931c:	bl	113f0 <__fprintf_chk@plt>
   19320:	b	19104 <__assert_fail@plt+0x7c24>
   19324:	mov	r2, #5
   19328:	movw	r1, #51668	; 0xc9d4
   1932c:	movt	r1, #1
   19330:	mov	r0, #0
   19334:	bl	1121c <dcgettext@plt>
   19338:	ldmib	r5, {ip, lr}
   1933c:	mov	r2, r0
   19340:	mov	r1, #1
   19344:	mov	r0, r4
   19348:	ldr	r3, [r5, #28]
   1934c:	str	ip, [sp]
   19350:	ldr	ip, [r5, #12]
   19354:	str	r3, [sp, #24]
   19358:	ldr	r3, [r5, #24]
   1935c:	str	lr, [sp, #4]
   19360:	ldr	lr, [r5, #16]
   19364:	str	ip, [sp, #8]
   19368:	ldr	ip, [r5, #20]
   1936c:	str	r3, [sp, #20]
   19370:	ldr	r3, [r5]
   19374:	str	lr, [sp, #12]
   19378:	str	ip, [sp, #16]
   1937c:	bl	113f0 <__fprintf_chk@plt>
   19380:	b	19104 <__assert_fail@plt+0x7c24>
   19384:	movw	r1, #51768	; 0xca38
   19388:	movt	r1, #1
   1938c:	b	190a4 <__assert_fail@plt+0x7bc4>
   19390:	strd	r4, [sp, #-12]!
   19394:	str	lr, [sp, #8]
   19398:	sub	sp, sp, #12
   1939c:	ldr	r5, [sp, #24]
   193a0:	ldr	ip, [r5]
   193a4:	cmp	ip, #0
   193a8:	beq	193c4 <__assert_fail@plt+0x7ee4>
   193ac:	mov	lr, r5
   193b0:	mov	ip, #0
   193b4:	ldr	r4, [lr, #4]!
   193b8:	add	ip, ip, #1
   193bc:	cmp	r4, #0
   193c0:	bne	193b4 <__assert_fail@plt+0x7ed4>
   193c4:	stm	sp, {r5, ip}
   193c8:	bl	18fb0 <__assert_fail@plt+0x7ad0>
   193cc:	add	sp, sp, #12
   193d0:	ldrd	r4, [sp]
   193d4:	add	sp, sp, #8
   193d8:	pop	{pc}		; (ldr pc, [sp], #4)
   193dc:	push	{lr}		; (str lr, [sp, #-4]!)
   193e0:	sub	sp, sp, #52	; 0x34
   193e4:	ldr	ip, [sp, #56]	; 0x38
   193e8:	ldr	lr, [ip]
   193ec:	cmp	lr, #0
   193f0:	str	lr, [sp, #8]
   193f4:	beq	1948c <__assert_fail@plt+0x7fac>
   193f8:	ldr	lr, [ip, #4]
   193fc:	cmp	lr, #0
   19400:	str	lr, [sp, #12]
   19404:	beq	194a0 <__assert_fail@plt+0x7fc0>
   19408:	ldr	lr, [ip, #8]
   1940c:	cmp	lr, #0
   19410:	str	lr, [sp, #16]
   19414:	beq	194a8 <__assert_fail@plt+0x7fc8>
   19418:	ldr	lr, [ip, #12]
   1941c:	cmp	lr, #0
   19420:	str	lr, [sp, #20]
   19424:	beq	194b0 <__assert_fail@plt+0x7fd0>
   19428:	ldr	lr, [ip, #16]
   1942c:	cmp	lr, #0
   19430:	str	lr, [sp, #24]
   19434:	beq	194b8 <__assert_fail@plt+0x7fd8>
   19438:	ldr	lr, [ip, #20]
   1943c:	cmp	lr, #0
   19440:	str	lr, [sp, #28]
   19444:	beq	194c0 <__assert_fail@plt+0x7fe0>
   19448:	ldr	lr, [ip, #24]
   1944c:	cmp	lr, #0
   19450:	str	lr, [sp, #32]
   19454:	beq	194c8 <__assert_fail@plt+0x7fe8>
   19458:	ldr	lr, [ip, #28]
   1945c:	cmp	lr, #0
   19460:	str	lr, [sp, #36]	; 0x24
   19464:	beq	194d0 <__assert_fail@plt+0x7ff0>
   19468:	ldr	lr, [ip, #32]
   1946c:	cmp	lr, #0
   19470:	str	lr, [sp, #40]	; 0x28
   19474:	beq	194d8 <__assert_fail@plt+0x7ff8>
   19478:	ldr	ip, [ip, #36]	; 0x24
   1947c:	cmp	ip, #0
   19480:	str	ip, [sp, #44]	; 0x2c
   19484:	movne	lr, #10
   19488:	moveq	lr, #9
   1948c:	add	ip, sp, #8
   19490:	stm	sp, {ip, lr}
   19494:	bl	18fb0 <__assert_fail@plt+0x7ad0>
   19498:	add	sp, sp, #52	; 0x34
   1949c:	pop	{pc}		; (ldr pc, [sp], #4)
   194a0:	mov	lr, #1
   194a4:	b	1948c <__assert_fail@plt+0x7fac>
   194a8:	mov	lr, #2
   194ac:	b	1948c <__assert_fail@plt+0x7fac>
   194b0:	mov	lr, #3
   194b4:	b	1948c <__assert_fail@plt+0x7fac>
   194b8:	mov	lr, #4
   194bc:	b	1948c <__assert_fail@plt+0x7fac>
   194c0:	mov	lr, #5
   194c4:	b	1948c <__assert_fail@plt+0x7fac>
   194c8:	mov	lr, #6
   194cc:	b	1948c <__assert_fail@plt+0x7fac>
   194d0:	mov	lr, #7
   194d4:	b	1948c <__assert_fail@plt+0x7fac>
   194d8:	mov	lr, #8
   194dc:	b	1948c <__assert_fail@plt+0x7fac>
   194e0:	push	{r3}		; (str r3, [sp, #-4]!)
   194e4:	push	{lr}		; (str lr, [sp, #-4]!)
   194e8:	sub	sp, sp, #56	; 0x38
   194ec:	ldr	ip, [sp, #64]	; 0x40
   194f0:	add	r3, sp, #64	; 0x40
   194f4:	str	r3, [sp, #12]
   194f8:	cmp	ip, #0
   194fc:	str	ip, [sp, #16]
   19500:	beq	19598 <__assert_fail@plt+0x80b8>
   19504:	ldr	ip, [sp, #68]	; 0x44
   19508:	cmp	ip, #0
   1950c:	str	ip, [sp, #20]
   19510:	beq	195bc <__assert_fail@plt+0x80dc>
   19514:	ldr	ip, [sp, #72]	; 0x48
   19518:	cmp	ip, #0
   1951c:	str	ip, [sp, #24]
   19520:	beq	195c4 <__assert_fail@plt+0x80e4>
   19524:	ldr	ip, [sp, #76]	; 0x4c
   19528:	cmp	ip, #0
   1952c:	str	ip, [sp, #28]
   19530:	beq	195cc <__assert_fail@plt+0x80ec>
   19534:	ldr	ip, [sp, #80]	; 0x50
   19538:	cmp	ip, #0
   1953c:	str	ip, [sp, #32]
   19540:	beq	195d4 <__assert_fail@plt+0x80f4>
   19544:	ldr	ip, [sp, #84]	; 0x54
   19548:	cmp	ip, #0
   1954c:	str	ip, [sp, #36]	; 0x24
   19550:	beq	195dc <__assert_fail@plt+0x80fc>
   19554:	ldr	ip, [sp, #88]	; 0x58
   19558:	cmp	ip, #0
   1955c:	str	ip, [sp, #40]	; 0x28
   19560:	beq	195e4 <__assert_fail@plt+0x8104>
   19564:	ldr	ip, [sp, #92]	; 0x5c
   19568:	cmp	ip, #0
   1956c:	str	ip, [sp, #44]	; 0x2c
   19570:	beq	195ec <__assert_fail@plt+0x810c>
   19574:	ldr	ip, [sp, #96]	; 0x60
   19578:	cmp	ip, #0
   1957c:	str	ip, [sp, #48]	; 0x30
   19580:	beq	195f4 <__assert_fail@plt+0x8114>
   19584:	ldr	r3, [sp, #100]	; 0x64
   19588:	cmp	r3, #0
   1958c:	str	r3, [sp, #52]	; 0x34
   19590:	movne	ip, #10
   19594:	moveq	ip, #9
   19598:	ldr	r3, [sp, #60]	; 0x3c
   1959c:	add	lr, sp, #16
   195a0:	str	lr, [sp]
   195a4:	str	ip, [sp, #4]
   195a8:	bl	18fb0 <__assert_fail@plt+0x7ad0>
   195ac:	add	sp, sp, #56	; 0x38
   195b0:	pop	{lr}		; (ldr lr, [sp], #4)
   195b4:	add	sp, sp, #4
   195b8:	bx	lr
   195bc:	mov	ip, #1
   195c0:	b	19598 <__assert_fail@plt+0x80b8>
   195c4:	mov	ip, #2
   195c8:	b	19598 <__assert_fail@plt+0x80b8>
   195cc:	mov	ip, #3
   195d0:	b	19598 <__assert_fail@plt+0x80b8>
   195d4:	mov	ip, #4
   195d8:	b	19598 <__assert_fail@plt+0x80b8>
   195dc:	mov	ip, #5
   195e0:	b	19598 <__assert_fail@plt+0x80b8>
   195e4:	mov	ip, #6
   195e8:	b	19598 <__assert_fail@plt+0x80b8>
   195ec:	mov	ip, #7
   195f0:	b	19598 <__assert_fail@plt+0x80b8>
   195f4:	mov	ip, #8
   195f8:	b	19598 <__assert_fail@plt+0x80b8>
   195fc:	movw	r3, #54116	; 0xd364
   19600:	movt	r3, #2
   19604:	str	r4, [sp, #-8]!
   19608:	mov	r0, #10
   1960c:	ldr	r1, [r3]
   19610:	str	lr, [sp, #4]
   19614:	bl	11210 <fputc_unlocked@plt>
   19618:	mov	r2, #5
   1961c:	movw	r1, #51828	; 0xca74
   19620:	movt	r1, #1
   19624:	mov	r0, #0
   19628:	bl	1121c <dcgettext@plt>
   1962c:	mov	r1, r0
   19630:	movw	r2, #51848	; 0xca88
   19634:	movt	r2, #1
   19638:	mov	r0, #1
   1963c:	bl	113cc <__printf_chk@plt>
   19640:	mov	r2, #5
   19644:	movw	r1, #51872	; 0xcaa0
   19648:	movt	r1, #1
   1964c:	mov	r0, #0
   19650:	bl	1121c <dcgettext@plt>
   19654:	mov	r1, r0
   19658:	movw	r3, #49420	; 0xc10c
   1965c:	movt	r3, #1
   19660:	movw	r2, #49460	; 0xc134
   19664:	movt	r2, #1
   19668:	mov	r0, #1
   1966c:	bl	113cc <__printf_chk@plt>
   19670:	mov	r2, #5
   19674:	movw	r1, #51892	; 0xcab4
   19678:	movt	r1, #1
   1967c:	mov	r0, #0
   19680:	bl	1121c <dcgettext@plt>
   19684:	mov	r1, r0
   19688:	movw	r2, #51932	; 0xcadc
   1968c:	movt	r2, #1
   19690:	mov	r0, #1
   19694:	ldr	r4, [sp]
   19698:	ldr	lr, [sp, #4]
   1969c:	add	sp, sp, #8
   196a0:	b	113cc <__printf_chk@plt>
   196a4:	str	r4, [sp, #-8]!
   196a8:	str	lr, [sp, #4]
   196ac:	bl	11498 <aligned_alloc@plt>
   196b0:	cmp	r0, #0
   196b4:	beq	196c4 <__assert_fail@plt+0x81e4>
   196b8:	ldr	r4, [sp]
   196bc:	add	sp, sp, #4
   196c0:	pop	{pc}		; (ldr pc, [sp], #4)
   196c4:	bl	19ccc <__assert_fail@plt+0x87ec>
   196c8:	strd	r4, [sp, #-16]!
   196cc:	mov	r4, r0
   196d0:	mov	r5, r2
   196d4:	str	r6, [sp, #8]
   196d8:	mov	r6, r1
   196dc:	str	lr, [sp, #12]
   196e0:	bl	1af40 <__assert_fail@plt+0x9a60>
   196e4:	cmp	r0, #0
   196e8:	beq	196fc <__assert_fail@plt+0x821c>
   196ec:	ldrd	r4, [sp]
   196f0:	ldr	r6, [sp, #8]
   196f4:	add	sp, sp, #12
   196f8:	pop	{pc}		; (ldr pc, [sp], #4)
   196fc:	cmp	r4, #0
   19700:	beq	19710 <__assert_fail@plt+0x8230>
   19704:	cmp	r6, #0
   19708:	cmpne	r5, #0
   1970c:	beq	196ec <__assert_fail@plt+0x820c>
   19710:	bl	19ccc <__assert_fail@plt+0x87ec>
   19714:	str	r4, [sp, #-8]!
   19718:	str	lr, [sp, #4]
   1971c:	bl	1ad68 <__assert_fail@plt+0x9888>
   19720:	cmp	r0, #0
   19724:	beq	19734 <__assert_fail@plt+0x8254>
   19728:	ldr	r4, [sp]
   1972c:	add	sp, sp, #4
   19730:	pop	{pc}		; (ldr pc, [sp], #4)
   19734:	bl	19ccc <__assert_fail@plt+0x87ec>
   19738:	str	r4, [sp, #-8]!
   1973c:	str	lr, [sp, #4]
   19740:	bl	1ad68 <__assert_fail@plt+0x9888>
   19744:	cmp	r0, #0
   19748:	beq	19758 <__assert_fail@plt+0x8278>
   1974c:	ldr	r4, [sp]
   19750:	add	sp, sp, #4
   19754:	pop	{pc}		; (ldr pc, [sp], #4)
   19758:	bl	19ccc <__assert_fail@plt+0x87ec>
   1975c:	str	r4, [sp, #-8]!
   19760:	str	lr, [sp, #4]
   19764:	bl	1ad68 <__assert_fail@plt+0x9888>
   19768:	cmp	r0, #0
   1976c:	beq	1977c <__assert_fail@plt+0x829c>
   19770:	ldr	r4, [sp]
   19774:	add	sp, sp, #4
   19778:	pop	{pc}		; (ldr pc, [sp], #4)
   1977c:	bl	19ccc <__assert_fail@plt+0x87ec>
   19780:	strd	r4, [sp, #-16]!
   19784:	mov	r5, r0
   19788:	mov	r4, r1
   1978c:	str	r6, [sp, #8]
   19790:	str	lr, [sp, #12]
   19794:	bl	1ada4 <__assert_fail@plt+0x98c4>
   19798:	cmp	r0, #0
   1979c:	beq	197b0 <__assert_fail@plt+0x82d0>
   197a0:	ldrd	r4, [sp]
   197a4:	ldr	r6, [sp, #8]
   197a8:	add	sp, sp, #12
   197ac:	pop	{pc}		; (ldr pc, [sp], #4)
   197b0:	adds	r4, r4, #0
   197b4:	movne	r4, #1
   197b8:	cmp	r5, #0
   197bc:	moveq	r4, #1
   197c0:	cmp	r4, #0
   197c4:	beq	197a0 <__assert_fail@plt+0x82c0>
   197c8:	bl	19ccc <__assert_fail@plt+0x87ec>
   197cc:	cmp	r1, #0
   197d0:	orreq	r1, r1, #1
   197d4:	str	r4, [sp, #-8]!
   197d8:	str	lr, [sp, #4]
   197dc:	bl	1ada4 <__assert_fail@plt+0x98c4>
   197e0:	cmp	r0, #0
   197e4:	beq	197f4 <__assert_fail@plt+0x8314>
   197e8:	ldr	r4, [sp]
   197ec:	add	sp, sp, #4
   197f0:	pop	{pc}		; (ldr pc, [sp], #4)
   197f4:	bl	19ccc <__assert_fail@plt+0x87ec>
   197f8:	strd	r4, [sp, #-16]!
   197fc:	mov	r4, r0
   19800:	mov	r5, r2
   19804:	str	r6, [sp, #8]
   19808:	mov	r6, r1
   1980c:	str	lr, [sp, #12]
   19810:	bl	1af40 <__assert_fail@plt+0x9a60>
   19814:	cmp	r0, #0
   19818:	beq	1982c <__assert_fail@plt+0x834c>
   1981c:	ldrd	r4, [sp]
   19820:	ldr	r6, [sp, #8]
   19824:	add	sp, sp, #12
   19828:	pop	{pc}		; (ldr pc, [sp], #4)
   1982c:	cmp	r4, #0
   19830:	beq	19840 <__assert_fail@plt+0x8360>
   19834:	cmp	r6, #0
   19838:	cmpne	r5, #0
   1983c:	beq	1981c <__assert_fail@plt+0x833c>
   19840:	bl	19ccc <__assert_fail@plt+0x87ec>
   19844:	cmp	r2, #0
   19848:	cmpne	r1, #0
   1984c:	str	r4, [sp, #-8]!
   19850:	moveq	r2, #1
   19854:	str	lr, [sp, #4]
   19858:	moveq	r1, r2
   1985c:	bl	1af40 <__assert_fail@plt+0x9a60>
   19860:	cmp	r0, #0
   19864:	beq	19874 <__assert_fail@plt+0x8394>
   19868:	ldr	r4, [sp]
   1986c:	add	sp, sp, #4
   19870:	pop	{pc}		; (ldr pc, [sp], #4)
   19874:	bl	19ccc <__assert_fail@plt+0x87ec>
   19878:	mov	r2, r1
   1987c:	mov	r1, r0
   19880:	str	r4, [sp, #-8]!
   19884:	mov	r0, #0
   19888:	str	lr, [sp, #4]
   1988c:	bl	1af40 <__assert_fail@plt+0x9a60>
   19890:	cmp	r0, #0
   19894:	beq	198a4 <__assert_fail@plt+0x83c4>
   19898:	ldr	r4, [sp]
   1989c:	add	sp, sp, #4
   198a0:	pop	{pc}		; (ldr pc, [sp], #4)
   198a4:	bl	19ccc <__assert_fail@plt+0x87ec>
   198a8:	cmp	r1, #0
   198ac:	cmpne	r0, #0
   198b0:	str	r4, [sp, #-8]!
   198b4:	moveq	r2, #1
   198b8:	movne	r2, r1
   198bc:	str	lr, [sp, #4]
   198c0:	movne	r1, r0
   198c4:	moveq	r1, r2
   198c8:	mov	r0, #0
   198cc:	bl	1af40 <__assert_fail@plt+0x9a60>
   198d0:	cmp	r0, #0
   198d4:	beq	198e4 <__assert_fail@plt+0x8404>
   198d8:	ldr	r4, [sp]
   198dc:	add	sp, sp, #4
   198e0:	pop	{pc}		; (ldr pc, [sp], #4)
   198e4:	bl	19ccc <__assert_fail@plt+0x87ec>
   198e8:	cmp	r0, #0
   198ec:	strd	r4, [sp, #-16]!
   198f0:	mov	r5, r1
   198f4:	ldr	r4, [r1]
   198f8:	str	r6, [sp, #8]
   198fc:	str	lr, [sp, #12]
   19900:	beq	19948 <__assert_fail@plt+0x8468>
   19904:	lsr	r3, r4, #1
   19908:	add	r3, r3, #1
   1990c:	adds	r4, r4, r3
   19910:	bcs	19944 <__assert_fail@plt+0x8464>
   19914:	mov	r2, #1
   19918:	mov	r1, r4
   1991c:	bl	1af40 <__assert_fail@plt+0x9a60>
   19920:	cmp	r0, #0
   19924:	beq	1993c <__assert_fail@plt+0x845c>
   19928:	ldr	r6, [sp, #8]
   1992c:	str	r4, [r5]
   19930:	ldrd	r4, [sp]
   19934:	add	sp, sp, #12
   19938:	pop	{pc}		; (ldr pc, [sp], #4)
   1993c:	cmp	r4, #0
   19940:	beq	19928 <__assert_fail@plt+0x8448>
   19944:	bl	19ccc <__assert_fail@plt+0x87ec>
   19948:	cmp	r4, #0
   1994c:	mov	r2, #1
   19950:	moveq	r4, #64	; 0x40
   19954:	mov	r1, r4
   19958:	bl	1af40 <__assert_fail@plt+0x9a60>
   1995c:	cmp	r0, #0
   19960:	bne	19928 <__assert_fail@plt+0x8448>
   19964:	b	19944 <__assert_fail@plt+0x8464>
   19968:	cmp	r0, #0
   1996c:	strd	r4, [sp, #-16]!
   19970:	mov	r5, r1
   19974:	ldr	r4, [r1]
   19978:	str	r6, [sp, #8]
   1997c:	mov	r6, r2
   19980:	str	lr, [sp, #12]
   19984:	beq	199cc <__assert_fail@plt+0x84ec>
   19988:	lsr	r3, r4, #1
   1998c:	add	r3, r3, #1
   19990:	adds	r4, r4, r3
   19994:	bcs	199c8 <__assert_fail@plt+0x84e8>
   19998:	mov	r1, r4
   1999c:	bl	1af40 <__assert_fail@plt+0x9a60>
   199a0:	cmp	r0, #0
   199a4:	beq	199bc <__assert_fail@plt+0x84dc>
   199a8:	ldr	r6, [sp, #8]
   199ac:	str	r4, [r5]
   199b0:	ldrd	r4, [sp]
   199b4:	add	sp, sp, #12
   199b8:	pop	{pc}		; (ldr pc, [sp], #4)
   199bc:	cmp	r4, #0
   199c0:	cmpne	r6, #0
   199c4:	beq	199a8 <__assert_fail@plt+0x84c8>
   199c8:	bl	19ccc <__assert_fail@plt+0x87ec>
   199cc:	cmp	r4, #0
   199d0:	bne	199e4 <__assert_fail@plt+0x8504>
   199d4:	mov	r4, #64	; 0x40
   199d8:	udiv	r4, r4, r2
   199dc:	cmp	r2, #64	; 0x40
   199e0:	addhi	r4, r4, #1
   199e4:	mov	r2, r6
   199e8:	mov	r1, r4
   199ec:	mov	r0, #0
   199f0:	bl	1af40 <__assert_fail@plt+0x9a60>
   199f4:	cmp	r0, #0
   199f8:	bne	199a8 <__assert_fail@plt+0x84c8>
   199fc:	b	199c8 <__assert_fail@plt+0x84e8>
   19a00:	ldr	ip, [r1]
   19a04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a08:	strd	r6, [sp, #8]
   19a0c:	mov	r7, r1
   19a10:	mov	r6, r0
   19a14:	str	r8, [sp, #16]
   19a18:	mvn	r8, r3
   19a1c:	lsr	r8, r8, #31
   19a20:	str	lr, [sp, #20]
   19a24:	asr	r1, ip, #1
   19a28:	ldr	lr, [sp, #24]
   19a2c:	adds	r4, ip, r1
   19a30:	mvnvs	r4, #-2147483648	; 0x80000000
   19a34:	cmp	r3, r4
   19a38:	movge	r1, #0
   19a3c:	andlt	r1, r8, #1
   19a40:	cmp	r1, #0
   19a44:	movne	r4, r3
   19a48:	smull	r0, r1, r4, lr
   19a4c:	cmp	r1, r0, asr #31
   19a50:	bne	19b00 <__assert_fail@plt+0x8620>
   19a54:	cmp	r0, #63	; 0x3f
   19a58:	mov	r5, r0
   19a5c:	ble	19acc <__assert_fail@plt+0x85ec>
   19a60:	cmp	r6, #0
   19a64:	sub	r1, r4, ip
   19a68:	streq	r6, [r7]
   19a6c:	cmp	r1, r2
   19a70:	bge	19aa0 <__assert_fail@plt+0x85c0>
   19a74:	adds	r4, ip, r2
   19a78:	bvs	19afc <__assert_fail@plt+0x861c>
   19a7c:	cmp	r4, r3
   19a80:	movle	r3, #0
   19a84:	andgt	r3, r8, #1
   19a88:	cmp	r3, #0
   19a8c:	bne	19afc <__assert_fail@plt+0x861c>
   19a90:	smull	r0, r1, r4, lr
   19a94:	cmp	r1, r0, asr #31
   19a98:	mov	r5, r0
   19a9c:	bne	19afc <__assert_fail@plt+0x861c>
   19aa0:	mov	r1, r5
   19aa4:	mov	r0, r6
   19aa8:	bl	1ada4 <__assert_fail@plt+0x98c4>
   19aac:	cmp	r0, #0
   19ab0:	beq	19ae0 <__assert_fail@plt+0x8600>
   19ab4:	ldr	r8, [sp, #16]
   19ab8:	str	r4, [r7]
   19abc:	ldrd	r4, [sp]
   19ac0:	ldrd	r6, [sp, #8]
   19ac4:	add	sp, sp, #20
   19ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   19acc:	mov	r0, #64	; 0x40
   19ad0:	sdiv	r4, r0, lr
   19ad4:	mls	r5, lr, r4, r0
   19ad8:	sub	r5, r0, r5
   19adc:	b	19a60 <__assert_fail@plt+0x8580>
   19ae0:	adds	r5, r5, #0
   19ae4:	movne	r5, #1
   19ae8:	cmp	r6, #0
   19aec:	movne	r6, r5
   19af0:	moveq	r6, #1
   19af4:	cmp	r6, #0
   19af8:	beq	19ab4 <__assert_fail@plt+0x85d4>
   19afc:	bl	19ccc <__assert_fail@plt+0x87ec>
   19b00:	mvn	r0, #-2147483648	; 0x80000000
   19b04:	b	19ad0 <__assert_fail@plt+0x85f0>
   19b08:	mov	r1, #1
   19b0c:	str	r4, [sp, #-8]!
   19b10:	str	lr, [sp, #4]
   19b14:	bl	1acf4 <__assert_fail@plt+0x9814>
   19b18:	cmp	r0, #0
   19b1c:	beq	19b2c <__assert_fail@plt+0x864c>
   19b20:	ldr	r4, [sp]
   19b24:	add	sp, sp, #4
   19b28:	pop	{pc}		; (ldr pc, [sp], #4)
   19b2c:	bl	19ccc <__assert_fail@plt+0x87ec>
   19b30:	mov	r1, #1
   19b34:	str	r4, [sp, #-8]!
   19b38:	str	lr, [sp, #4]
   19b3c:	bl	1acf4 <__assert_fail@plt+0x9814>
   19b40:	cmp	r0, #0
   19b44:	beq	19b54 <__assert_fail@plt+0x8674>
   19b48:	ldr	r4, [sp]
   19b4c:	add	sp, sp, #4
   19b50:	pop	{pc}		; (ldr pc, [sp], #4)
   19b54:	bl	19ccc <__assert_fail@plt+0x87ec>
   19b58:	str	r4, [sp, #-8]!
   19b5c:	str	lr, [sp, #4]
   19b60:	bl	1acf4 <__assert_fail@plt+0x9814>
   19b64:	cmp	r0, #0
   19b68:	beq	19b78 <__assert_fail@plt+0x8698>
   19b6c:	ldr	r4, [sp]
   19b70:	add	sp, sp, #4
   19b74:	pop	{pc}		; (ldr pc, [sp], #4)
   19b78:	bl	19ccc <__assert_fail@plt+0x87ec>
   19b7c:	str	r4, [sp, #-8]!
   19b80:	str	lr, [sp, #4]
   19b84:	bl	1acf4 <__assert_fail@plt+0x9814>
   19b88:	cmp	r0, #0
   19b8c:	beq	19b9c <__assert_fail@plt+0x86bc>
   19b90:	ldr	r4, [sp]
   19b94:	add	sp, sp, #4
   19b98:	pop	{pc}		; (ldr pc, [sp], #4)
   19b9c:	bl	19ccc <__assert_fail@plt+0x87ec>
   19ba0:	strd	r4, [sp, #-16]!
   19ba4:	mov	r4, r1
   19ba8:	str	r6, [sp, #8]
   19bac:	mov	r6, r0
   19bb0:	mov	r0, r1
   19bb4:	str	lr, [sp, #12]
   19bb8:	bl	1ad68 <__assert_fail@plt+0x9888>
   19bbc:	subs	r5, r0, #0
   19bc0:	beq	19be4 <__assert_fail@plt+0x8704>
   19bc4:	mov	r2, r4
   19bc8:	mov	r1, r6
   19bcc:	bl	111c8 <memcpy@plt>
   19bd0:	mov	r0, r5
   19bd4:	ldrd	r4, [sp]
   19bd8:	ldr	r6, [sp, #8]
   19bdc:	add	sp, sp, #12
   19be0:	pop	{pc}		; (ldr pc, [sp], #4)
   19be4:	bl	19ccc <__assert_fail@plt+0x87ec>
   19be8:	strd	r4, [sp, #-16]!
   19bec:	mov	r4, r1
   19bf0:	str	r6, [sp, #8]
   19bf4:	mov	r6, r0
   19bf8:	mov	r0, r1
   19bfc:	str	lr, [sp, #12]
   19c00:	bl	1ad68 <__assert_fail@plt+0x9888>
   19c04:	subs	r5, r0, #0
   19c08:	beq	19c2c <__assert_fail@plt+0x874c>
   19c0c:	mov	r2, r4
   19c10:	mov	r1, r6
   19c14:	bl	111c8 <memcpy@plt>
   19c18:	mov	r0, r5
   19c1c:	ldrd	r4, [sp]
   19c20:	ldr	r6, [sp, #8]
   19c24:	add	sp, sp, #12
   19c28:	pop	{pc}		; (ldr pc, [sp], #4)
   19c2c:	bl	19ccc <__assert_fail@plt+0x87ec>
   19c30:	strd	r4, [sp, #-16]!
   19c34:	mov	r4, r1
   19c38:	str	r6, [sp, #8]
   19c3c:	mov	r6, r0
   19c40:	add	r0, r1, #1
   19c44:	str	lr, [sp, #12]
   19c48:	bl	1ad68 <__assert_fail@plt+0x9888>
   19c4c:	subs	r5, r0, #0
   19c50:	beq	19c7c <__assert_fail@plt+0x879c>
   19c54:	mov	r3, #0
   19c58:	mov	r1, r6
   19c5c:	mov	r2, r4
   19c60:	strb	r3, [r5, r4]
   19c64:	bl	111c8 <memcpy@plt>
   19c68:	mov	r0, r5
   19c6c:	ldrd	r4, [sp]
   19c70:	ldr	r6, [sp, #8]
   19c74:	add	sp, sp, #12
   19c78:	pop	{pc}		; (ldr pc, [sp], #4)
   19c7c:	bl	19ccc <__assert_fail@plt+0x87ec>
   19c80:	strd	r4, [sp, #-16]!
   19c84:	str	r6, [sp, #8]
   19c88:	mov	r6, r0
   19c8c:	str	lr, [sp, #12]
   19c90:	bl	11354 <strlen@plt>
   19c94:	add	r4, r0, #1
   19c98:	mov	r0, r4
   19c9c:	bl	1ad68 <__assert_fail@plt+0x9888>
   19ca0:	subs	r5, r0, #0
   19ca4:	beq	19cc8 <__assert_fail@plt+0x87e8>
   19ca8:	mov	r2, r4
   19cac:	mov	r1, r6
   19cb0:	bl	111c8 <memcpy@plt>
   19cb4:	mov	r0, r5
   19cb8:	ldrd	r4, [sp]
   19cbc:	ldr	r6, [sp, #8]
   19cc0:	add	sp, sp, #12
   19cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cc8:	bl	19ccc <__assert_fail@plt+0x87ec>
   19ccc:	movw	r3, #53608	; 0xd168
   19cd0:	movt	r3, #2
   19cd4:	str	r4, [sp, #-8]!
   19cd8:	ldr	r4, [r3]
   19cdc:	mov	r2, #5
   19ce0:	movw	r1, #52012	; 0xcb2c
   19ce4:	movt	r1, #1
   19ce8:	mov	r0, #0
   19cec:	str	lr, [sp, #4]
   19cf0:	bl	1121c <dcgettext@plt>
   19cf4:	mov	r3, r0
   19cf8:	movw	r2, #47164	; 0xb83c
   19cfc:	movt	r2, #1
   19d00:	mov	r1, #0
   19d04:	mov	r0, r4
   19d08:	bl	112d0 <error@plt>
   19d0c:	bl	114bc <abort@plt>
   19d10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19d14:	strd	r6, [sp, #8]
   19d18:	mov	r6, r2
   19d1c:	mov	r7, r3
   19d20:	str	r8, [sp, #16]
   19d24:	mov	r2, r1
   19d28:	mov	r1, #0
   19d2c:	str	lr, [sp, #20]
   19d30:	sub	sp, sp, #16
   19d34:	mov	r8, r0
   19d38:	ldr	ip, [sp, #48]	; 0x30
   19d3c:	add	r3, sp, #8
   19d40:	str	ip, [sp]
   19d44:	bl	19f98 <__assert_fail@plt+0x8ab8>
   19d48:	subs	r4, r0, #0
   19d4c:	bne	19d9c <__assert_fail@plt+0x88bc>
   19d50:	ldrd	r4, [sp, #8]
   19d54:	ldrd	r0, [sp, #40]	; 0x28
   19d58:	cmp	r5, r7
   19d5c:	cmpeq	r4, r6
   19d60:	movcc	r3, #1
   19d64:	movcs	r3, #0
   19d68:	cmp	r5, r1
   19d6c:	cmpeq	r4, r0
   19d70:	orrhi	r3, r3, #1
   19d74:	cmp	r3, #0
   19d78:	bne	19e1c <__assert_fail@plt+0x893c>
   19d7c:	mov	r0, r4
   19d80:	mov	r1, r5
   19d84:	add	sp, sp, #16
   19d88:	ldrd	r4, [sp]
   19d8c:	ldrd	r6, [sp, #8]
   19d90:	ldr	r8, [sp, #16]
   19d94:	add	sp, sp, #20
   19d98:	pop	{pc}		; (ldr pc, [sp], #4)
   19d9c:	bl	1139c <__errno_location@plt>
   19da0:	cmp	r4, #1
   19da4:	moveq	r3, #75	; 0x4b
   19da8:	moveq	r4, r3
   19dac:	streq	r3, [r0]
   19db0:	beq	19e04 <__assert_fail@plt+0x8924>
   19db4:	cmp	r4, #3
   19db8:	beq	19df8 <__assert_fail@plt+0x8918>
   19dbc:	ldr	r3, [sp, #56]	; 0x38
   19dc0:	ldr	r4, [r0]
   19dc4:	cmp	r3, #0
   19dc8:	beq	19e10 <__assert_fail@plt+0x8930>
   19dcc:	cmp	r4, #22
   19dd0:	moveq	r4, #0
   19dd4:	mov	r0, r8
   19dd8:	bl	18a08 <__assert_fail@plt+0x7528>
   19ddc:	movw	r2, #50296	; 0xc478
   19de0:	movt	r2, #1
   19de4:	str	r0, [sp]
   19de8:	mov	r1, r4
   19dec:	ldr	r3, [sp, #52]	; 0x34
   19df0:	ldr	r0, [sp, #56]	; 0x38
   19df4:	bl	112d0 <error@plt>
   19df8:	mov	r3, #0
   19dfc:	mov	r4, r3
   19e00:	str	r3, [r0]
   19e04:	ldr	r3, [sp, #56]	; 0x38
   19e08:	cmp	r3, #0
   19e0c:	bne	19dd4 <__assert_fail@plt+0x88f4>
   19e10:	mov	r3, #1
   19e14:	str	r3, [sp, #56]	; 0x38
   19e18:	b	19dcc <__assert_fail@plt+0x88ec>
   19e1c:	bl	1139c <__errno_location@plt>
   19e20:	mov	r3, #0
   19e24:	mvn	r2, #-1073741824	; 0xc0000000
   19e28:	cmp	r5, r3
   19e2c:	cmpeq	r4, r2
   19e30:	movhi	r3, #75	; 0x4b
   19e34:	movls	r3, #34	; 0x22
   19e38:	mov	r4, r3
   19e3c:	str	r3, [r0]
   19e40:	ldr	r3, [sp, #56]	; 0x38
   19e44:	cmp	r3, #0
   19e48:	moveq	r3, #1
   19e4c:	str	r3, [sp, #56]	; 0x38
   19e50:	b	19dd4 <__assert_fail@plt+0x88f4>
   19e54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19e58:	mov	r1, #0
   19e5c:	strd	r6, [sp, #8]
   19e60:	mov	r6, r2
   19e64:	mov	r7, r3
   19e68:	str	r8, [sp, #16]
   19e6c:	mov	r2, #10
   19e70:	mov	r8, r0
   19e74:	str	lr, [sp, #20]
   19e78:	sub	sp, sp, #16
   19e7c:	ldr	ip, [sp, #48]	; 0x30
   19e80:	add	r3, sp, #8
   19e84:	str	ip, [sp]
   19e88:	bl	19f98 <__assert_fail@plt+0x8ab8>
   19e8c:	subs	r4, r0, #0
   19e90:	bne	19ee0 <__assert_fail@plt+0x8a00>
   19e94:	ldrd	r4, [sp, #8]
   19e98:	ldrd	r0, [sp, #40]	; 0x28
   19e9c:	cmp	r7, r5
   19ea0:	cmpeq	r6, r4
   19ea4:	movhi	r3, #1
   19ea8:	movls	r3, #0
   19eac:	cmp	r1, r5
   19eb0:	cmpeq	r0, r4
   19eb4:	orrcc	r3, r3, #1
   19eb8:	cmp	r3, #0
   19ebc:	bne	19f60 <__assert_fail@plt+0x8a80>
   19ec0:	mov	r0, r4
   19ec4:	mov	r1, r5
   19ec8:	add	sp, sp, #16
   19ecc:	ldrd	r4, [sp]
   19ed0:	ldrd	r6, [sp, #8]
   19ed4:	ldr	r8, [sp, #16]
   19ed8:	add	sp, sp, #20
   19edc:	pop	{pc}		; (ldr pc, [sp], #4)
   19ee0:	bl	1139c <__errno_location@plt>
   19ee4:	cmp	r4, #1
   19ee8:	moveq	r3, #75	; 0x4b
   19eec:	moveq	r4, r3
   19ef0:	streq	r3, [r0]
   19ef4:	beq	19f50 <__assert_fail@plt+0x8a70>
   19ef8:	cmp	r4, #3
   19efc:	beq	19f44 <__assert_fail@plt+0x8a64>
   19f00:	ldr	r3, [sp, #56]	; 0x38
   19f04:	ldr	r4, [r0]
   19f08:	cmp	r3, #0
   19f0c:	bne	19f18 <__assert_fail@plt+0x8a38>
   19f10:	mov	r3, #1
   19f14:	str	r3, [sp, #56]	; 0x38
   19f18:	cmp	r4, #22
   19f1c:	moveq	r4, #0
   19f20:	mov	r0, r8
   19f24:	bl	18a08 <__assert_fail@plt+0x7528>
   19f28:	movw	r2, #50296	; 0xc478
   19f2c:	movt	r2, #1
   19f30:	str	r0, [sp]
   19f34:	mov	r1, r4
   19f38:	ldr	r3, [sp, #52]	; 0x34
   19f3c:	ldr	r0, [sp, #56]	; 0x38
   19f40:	bl	112d0 <error@plt>
   19f44:	mov	r3, #0
   19f48:	mov	r4, r3
   19f4c:	str	r3, [r0]
   19f50:	ldr	r3, [sp, #56]	; 0x38
   19f54:	cmp	r3, #0
   19f58:	bne	19f20 <__assert_fail@plt+0x8a40>
   19f5c:	b	19f10 <__assert_fail@plt+0x8a30>
   19f60:	bl	1139c <__errno_location@plt>
   19f64:	mov	r3, #0
   19f68:	mvn	r2, #-1073741824	; 0xc0000000
   19f6c:	cmp	r5, r3
   19f70:	cmpeq	r4, r2
   19f74:	movhi	r3, #75	; 0x4b
   19f78:	movls	r3, #34	; 0x22
   19f7c:	mov	r4, r3
   19f80:	str	r3, [r0]
   19f84:	ldr	r3, [sp, #56]	; 0x38
   19f88:	cmp	r3, #0
   19f8c:	moveq	r3, #1
   19f90:	str	r3, [sp, #56]	; 0x38
   19f94:	b	19f20 <__assert_fail@plt+0x8a40>
   19f98:	cmp	r2, #36	; 0x24
   19f9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19fa0:	strd	r6, [sp, #8]
   19fa4:	strd	r8, [sp, #16]
   19fa8:	strd	sl, [sp, #24]
   19fac:	str	lr, [sp, #32]
   19fb0:	sub	sp, sp, #36	; 0x24
   19fb4:	bhi	1ac2c <__assert_fail@plt+0x974c>
   19fb8:	cmp	r1, #0
   19fbc:	mov	r6, r2
   19fc0:	mov	r5, r1
   19fc4:	mov	sl, r0
   19fc8:	addeq	r5, sp, #28
   19fcc:	mov	r9, r3
   19fd0:	bl	1139c <__errno_location@plt>
   19fd4:	mov	r3, #0
   19fd8:	mov	fp, r0
   19fdc:	str	r3, [r0]
   19fe0:	ldrb	r4, [sl]
   19fe4:	bl	1133c <__ctype_b_loc@plt>
   19fe8:	ldr	r2, [r0]
   19fec:	lsl	r3, r4, #1
   19ff0:	ldrh	r3, [r2, r3]
   19ff4:	tst	r3, #8192	; 0x2000
   19ff8:	beq	1a014 <__assert_fail@plt+0x8b34>
   19ffc:	mov	r3, sl
   1a000:	ldrb	r4, [r3, #1]!
   1a004:	lsl	r1, r4, #1
   1a008:	ldrh	r1, [r2, r1]
   1a00c:	tst	r1, #8192	; 0x2000
   1a010:	bne	1a000 <__assert_fail@plt+0x8b20>
   1a014:	cmp	r4, #45	; 0x2d
   1a018:	beq	1a0b4 <__assert_fail@plt+0x8bd4>
   1a01c:	mov	r2, r6
   1a020:	mov	r3, #0
   1a024:	mov	r1, r5
   1a028:	mov	r0, sl
   1a02c:	bl	111d4 <__strtoull_internal@plt>
   1a030:	ldr	r8, [r5]
   1a034:	mov	r6, r0
   1a038:	mov	r7, r1
   1a03c:	cmp	r8, sl
   1a040:	beq	1a09c <__assert_fail@plt+0x8bbc>
   1a044:	ldr	r4, [fp]
   1a048:	cmp	r4, #0
   1a04c:	bne	1a08c <__assert_fail@plt+0x8bac>
   1a050:	ldr	r3, [sp, #72]	; 0x48
   1a054:	cmp	r3, #0
   1a058:	beq	1a068 <__assert_fail@plt+0x8b88>
   1a05c:	ldrb	sl, [r8]
   1a060:	cmp	sl, #0
   1a064:	bne	1a420 <__assert_fail@plt+0x8f40>
   1a068:	strd	r6, [r9]
   1a06c:	mov	r0, r4
   1a070:	add	sp, sp, #36	; 0x24
   1a074:	ldrd	r4, [sp]
   1a078:	ldrd	r6, [sp, #8]
   1a07c:	ldrd	r8, [sp, #16]
   1a080:	ldrd	sl, [sp, #24]
   1a084:	add	sp, sp, #32
   1a088:	pop	{pc}		; (ldr pc, [sp], #4)
   1a08c:	cmp	r4, #34	; 0x22
   1a090:	bne	1a0b4 <__assert_fail@plt+0x8bd4>
   1a094:	mov	r4, #1
   1a098:	b	1a050 <__assert_fail@plt+0x8b70>
   1a09c:	ldr	r3, [sp, #72]	; 0x48
   1a0a0:	cmp	r3, #0
   1a0a4:	beq	1a0b4 <__assert_fail@plt+0x8bd4>
   1a0a8:	ldrb	sl, [sl]
   1a0ac:	cmp	sl, #0
   1a0b0:	bne	1a0bc <__assert_fail@plt+0x8bdc>
   1a0b4:	mov	r4, #4
   1a0b8:	b	1a06c <__assert_fail@plt+0x8b8c>
   1a0bc:	mov	r1, sl
   1a0c0:	mov	r0, r3
   1a0c4:	bl	1136c <strchr@plt>
   1a0c8:	cmp	r0, #0
   1a0cc:	movne	r4, #0
   1a0d0:	movne	r6, #1
   1a0d4:	movne	r7, r4
   1a0d8:	beq	1a0b4 <__assert_fail@plt+0x8bd4>
   1a0dc:	sub	r3, sl, #69	; 0x45
   1a0e0:	cmp	r3, #47	; 0x2f
   1a0e4:	ldrls	pc, [pc, r3, lsl #2]
   1a0e8:	b	1a1f0 <__assert_fail@plt+0x8d10>
   1a0ec:	andeq	sl, r1, ip, lsr #3
   1a0f0:	strdeq	sl, [r1], -r0
   1a0f4:	andeq	sl, r1, ip, lsr #3
   1a0f8:	strdeq	sl, [r1], -r0
   1a0fc:	strdeq	sl, [r1], -r0
   1a100:	strdeq	sl, [r1], -r0
   1a104:	andeq	sl, r1, ip, lsr #3
   1a108:	strdeq	sl, [r1], -r0
   1a10c:	andeq	sl, r1, ip, lsr #3
   1a110:	strdeq	sl, [r1], -r0
   1a114:	strdeq	sl, [r1], -r0
   1a118:	andeq	sl, r1, ip, lsr #3
   1a11c:	strdeq	sl, [r1], -r0
   1a120:	strdeq	sl, [r1], -r0
   1a124:	strdeq	sl, [r1], -r0
   1a128:	andeq	sl, r1, ip, lsr #3
   1a12c:	strdeq	sl, [r1], -r0
   1a130:	strdeq	sl, [r1], -r0
   1a134:	strdeq	sl, [r1], -r0
   1a138:	strdeq	sl, [r1], -r0
   1a13c:	andeq	sl, r1, ip, lsr #3
   1a140:	andeq	sl, r1, ip, lsr #3
   1a144:	strdeq	sl, [r1], -r0
   1a148:	strdeq	sl, [r1], -r0
   1a14c:	strdeq	sl, [r1], -r0
   1a150:	strdeq	sl, [r1], -r0
   1a154:	strdeq	sl, [r1], -r0
   1a158:	strdeq	sl, [r1], -r0
   1a15c:	strdeq	sl, [r1], -r0
   1a160:	strdeq	sl, [r1], -r0
   1a164:	strdeq	sl, [r1], -r0
   1a168:	strdeq	sl, [r1], -r0
   1a16c:	strdeq	sl, [r1], -r0
   1a170:	strdeq	sl, [r1], -r0
   1a174:	andeq	sl, r1, ip, lsr #3
   1a178:	strdeq	sl, [r1], -r0
   1a17c:	strdeq	sl, [r1], -r0
   1a180:	strdeq	sl, [r1], -r0
   1a184:	andeq	sl, r1, ip, lsr #3
   1a188:	strdeq	sl, [r1], -r0
   1a18c:	andeq	sl, r1, ip, lsr #3
   1a190:	strdeq	sl, [r1], -r0
   1a194:	strdeq	sl, [r1], -r0
   1a198:	strdeq	sl, [r1], -r0
   1a19c:	strdeq	sl, [r1], -r0
   1a1a0:	strdeq	sl, [r1], -r0
   1a1a4:	strdeq	sl, [r1], -r0
   1a1a8:	andeq	sl, r1, ip, lsr #3
   1a1ac:	mov	r1, #48	; 0x30
   1a1b0:	ldr	r0, [sp, #72]	; 0x48
   1a1b4:	bl	1136c <strchr@plt>
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1f0 <__assert_fail@plt+0x8d10>
   1a1c0:	ldrb	r3, [r8, #1]
   1a1c4:	cmp	r3, #68	; 0x44
   1a1c8:	beq	1a780 <__assert_fail@plt+0x92a0>
   1a1cc:	cmp	r3, #105	; 0x69
   1a1d0:	beq	1a438 <__assert_fail@plt+0x8f58>
   1a1d4:	cmp	r3, #66	; 0x42
   1a1d8:	moveq	r3, #2
   1a1dc:	movne	r3, #1
   1a1e0:	moveq	ip, #1000	; 0x3e8
   1a1e4:	movne	ip, #1024	; 0x400
   1a1e8:	str	r3, [sp, #12]
   1a1ec:	b	1a1fc <__assert_fail@plt+0x8d1c>
   1a1f0:	mov	r3, #1
   1a1f4:	mov	ip, #1024	; 0x400
   1a1f8:	str	r3, [sp, #12]
   1a1fc:	sub	sl, sl, #66	; 0x42
   1a200:	cmp	sl, #53	; 0x35
   1a204:	ldrls	pc, [pc, sl, lsl #2]
   1a208:	b	1a3e4 <__assert_fail@plt+0x8f04>
   1a20c:	andeq	sl, r1, ip, asr #13
   1a210:	andeq	sl, r1, r4, ror #7
   1a214:	andeq	sl, r1, r4, ror #7
   1a218:	andeq	sl, r1, ip, ror #12
   1a21c:	andeq	sl, r1, r4, ror #7
   1a220:	andeq	sl, r1, r8, ror #13
   1a224:	andeq	sl, r1, r4, ror #7
   1a228:	andeq	sl, r1, r4, ror #7
   1a22c:	andeq	sl, r1, r4, ror #7
   1a230:	andeq	sl, r1, ip, ror #7
   1a234:	andeq	sl, r1, r4, ror #7
   1a238:	andeq	sl, r1, r4, lsl r6
   1a23c:	andeq	sl, r1, r4, ror #7
   1a240:	andeq	sl, r1, r4, ror #7
   1a244:			; <UNDEFINED> instruction: 0x0001a5b8
   1a248:	andeq	sl, r1, r4, ror #7
   1a24c:	andeq	sl, r1, r4, ror #7
   1a250:	andeq	sl, r1, r4, ror #7
   1a254:	andeq	sl, r1, r8, asr r5
   1a258:	andeq	sl, r1, r4, ror #7
   1a25c:	andeq	sl, r1, r4, ror #7
   1a260:	andeq	sl, r1, r4, ror #7
   1a264:	andeq	sl, r1, r4, ror #7
   1a268:	andeq	sl, r1, ip, lsl #9
   1a26c:	andeq	sl, r1, r4, ror #5
   1a270:	andeq	sl, r1, r4, ror #7
   1a274:	andeq	sl, r1, r4, ror #7
   1a278:	andeq	sl, r1, r4, ror #7
   1a27c:	andeq	sl, r1, r4, ror #7
   1a280:	andeq	sl, r1, r4, ror #7
   1a284:	andeq	sl, r1, r4, ror #7
   1a288:	andeq	sl, r1, r4, ror #7
   1a28c:	andeq	sl, r1, ip, ror #8
   1a290:	andeq	sl, r1, ip, asr #7
   1a294:	andeq	sl, r1, r4, ror #7
   1a298:	andeq	sl, r1, r4, ror #7
   1a29c:	andeq	sl, r1, r4, ror #7
   1a2a0:	andeq	sl, r1, r8, ror #13
   1a2a4:	andeq	sl, r1, r4, ror #7
   1a2a8:	andeq	sl, r1, r4, ror #7
   1a2ac:	andeq	sl, r1, r4, ror #7
   1a2b0:	andeq	sl, r1, ip, ror #7
   1a2b4:	andeq	sl, r1, r4, ror #7
   1a2b8:	andeq	sl, r1, r4, lsl r6
   1a2bc:	andeq	sl, r1, r4, ror #7
   1a2c0:	andeq	sl, r1, r4, ror #7
   1a2c4:	andeq	sl, r1, r4, ror #7
   1a2c8:	andeq	sl, r1, r4, ror #7
   1a2cc:	andeq	sl, r1, r4, ror #7
   1a2d0:	andeq	sl, r1, r4, ror #7
   1a2d4:	andeq	sl, r1, r8, asr r5
   1a2d8:	andeq	sl, r1, r4, ror #7
   1a2dc:	andeq	sl, r1, r4, ror #7
   1a2e0:	andeq	sl, r1, r4, asr r4
   1a2e4:	asr	r3, ip, #31
   1a2e8:	mov	r2, ip
   1a2ec:	cmp	r7, #0
   1a2f0:	mov	r1, #0
   1a2f4:	strd	r2, [sp]
   1a2f8:	bne	1a838 <__assert_fail@plt+0x9358>
   1a2fc:	umull	r6, r7, r6, ip
   1a300:	mov	r2, r6
   1a304:	mov	r3, r7
   1a308:	cmp	r1, #0
   1a30c:	bne	1a74c <__assert_fail@plt+0x926c>
   1a310:	cmp	r3, #0
   1a314:	mov	lr, r1
   1a318:	bne	1a964 <__assert_fail@plt+0x9484>
   1a31c:	umull	r2, r3, r2, ip
   1a320:	mov	r0, r2
   1a324:	mov	r1, r3
   1a328:	cmp	lr, #0
   1a32c:	bne	1a74c <__assert_fail@plt+0x926c>
   1a330:	cmp	r1, #0
   1a334:	bne	1a940 <__assert_fail@plt+0x9460>
   1a338:	umull	r0, r1, r0, ip
   1a33c:	mov	r2, r0
   1a340:	mov	r3, r1
   1a344:	cmp	lr, #0
   1a348:	bne	1a74c <__assert_fail@plt+0x926c>
   1a34c:	cmp	r3, #0
   1a350:	bne	1a5f0 <__assert_fail@plt+0x9110>
   1a354:	umull	r2, r3, r2, ip
   1a358:	mov	r0, r2
   1a35c:	mov	r1, r3
   1a360:	cmp	lr, #0
   1a364:	bne	1a74c <__assert_fail@plt+0x926c>
   1a368:	cmp	r1, #0
   1a36c:	bne	1a7f0 <__assert_fail@plt+0x9310>
   1a370:	umull	r0, r1, r0, ip
   1a374:	mov	r2, r0
   1a378:	mov	r3, r1
   1a37c:	cmp	lr, #0
   1a380:	bne	1a74c <__assert_fail@plt+0x926c>
   1a384:	cmp	r3, #0
   1a388:	mov	r7, lr
   1a38c:	bne	1a7cc <__assert_fail@plt+0x92ec>
   1a390:	umull	r2, r3, r2, ip
   1a394:	mov	r6, r2
   1a398:	mov	lr, r3
   1a39c:	cmp	r7, #0
   1a3a0:	bne	1a74c <__assert_fail@plt+0x926c>
   1a3a4:	cmp	lr, #0
   1a3a8:	bne	1a790 <__assert_fail@plt+0x92b0>
   1a3ac:	umull	r2, r3, r6, ip
   1a3b0:	mov	r0, r2
   1a3b4:	mov	r2, r3
   1a3b8:	subs	r3, r7, #0
   1a3bc:	bne	1a74c <__assert_fail@plt+0x926c>
   1a3c0:	mov	r6, r0
   1a3c4:	mov	r7, r2
   1a3c8:	orr	r4, r4, r3
   1a3cc:	ldr	r2, [sp, #12]
   1a3d0:	add	r3, r8, r2
   1a3d4:	str	r3, [r5]
   1a3d8:	ldrb	r3, [r8, r2]
   1a3dc:	cmp	r3, #0
   1a3e0:	beq	1a068 <__assert_fail@plt+0x8b88>
   1a3e4:	orr	r4, r4, #2
   1a3e8:	b	1a068 <__assert_fail@plt+0x8b88>
   1a3ec:	cmp	r7, #0
   1a3f0:	asr	r1, ip, #31
   1a3f4:	mov	lr, #0
   1a3f8:	bne	1a75c <__assert_fail@plt+0x927c>
   1a3fc:	umull	r2, r3, r6, ip
   1a400:	mov	r6, r2
   1a404:	mov	r7, r3
   1a408:	cmp	lr, #0
   1a40c:	beq	1a3cc <__assert_fail@plt+0x8eec>
   1a410:	mvn	r6, #0
   1a414:	mov	r4, #1
   1a418:	mov	r7, r6
   1a41c:	b	1a3cc <__assert_fail@plt+0x8eec>
   1a420:	mov	r0, r3
   1a424:	mov	r1, sl
   1a428:	bl	1136c <strchr@plt>
   1a42c:	cmp	r0, #0
   1a430:	bne	1a0dc <__assert_fail@plt+0x8bfc>
   1a434:	b	1a3e4 <__assert_fail@plt+0x8f04>
   1a438:	ldrb	r3, [r8, #2]
   1a43c:	mov	ip, #1024	; 0x400
   1a440:	cmp	r3, #66	; 0x42
   1a444:	movne	r3, #1
   1a448:	moveq	r3, #3
   1a44c:	str	r3, [sp, #12]
   1a450:	b	1a1fc <__assert_fail@plt+0x8d1c>
   1a454:	lsr	r3, r7, #31
   1a458:	adds	r6, r6, r6
   1a45c:	adc	r7, r7, r7
   1a460:	cmp	r3, #0
   1a464:	beq	1a3cc <__assert_fail@plt+0x8eec>
   1a468:	b	1a410 <__assert_fail@plt+0x8f30>
   1a46c:	lsr	r3, r7, #23
   1a470:	lsl	r7, r7, #9
   1a474:	cmp	r3, #0
   1a478:	lsl	r3, r6, #9
   1a47c:	orr	r7, r7, r6, lsr #23
   1a480:	bne	1a410 <__assert_fail@plt+0x8f30>
   1a484:	mov	r6, r3
   1a488:	b	1a3cc <__assert_fail@plt+0x8eec>
   1a48c:	asr	r3, ip, #31
   1a490:	mov	r2, ip
   1a494:	cmp	r7, #0
   1a498:	mov	r1, #0
   1a49c:	strd	r2, [sp]
   1a4a0:	bne	1a8ac <__assert_fail@plt+0x93cc>
   1a4a4:	umull	r6, r7, r6, ip
   1a4a8:	mov	r0, r6
   1a4ac:	mov	fp, r7
   1a4b0:	cmp	r1, #0
   1a4b4:	bne	1a74c <__assert_fail@plt+0x926c>
   1a4b8:	cmp	fp, #0
   1a4bc:	mov	lr, r1
   1a4c0:	bne	1aa3c <__assert_fail@plt+0x955c>
   1a4c4:	umull	r0, r1, r0, ip
   1a4c8:	mov	r2, r0
   1a4cc:	mov	r3, r1
   1a4d0:	cmp	lr, #0
   1a4d4:	bne	1a74c <__assert_fail@plt+0x926c>
   1a4d8:	cmp	r3, #0
   1a4dc:	bne	1aa64 <__assert_fail@plt+0x9584>
   1a4e0:	umull	r2, r3, r2, ip
   1a4e4:	mov	r0, r2
   1a4e8:	mov	r1, r3
   1a4ec:	cmp	lr, #0
   1a4f0:	bne	1a74c <__assert_fail@plt+0x926c>
   1a4f4:	cmp	r1, #0
   1a4f8:	bne	1a9e4 <__assert_fail@plt+0x9504>
   1a4fc:	umull	r0, r1, r0, ip
   1a500:	mov	r2, r0
   1a504:	mov	r3, r1
   1a508:	cmp	lr, #0
   1a50c:	bne	1a74c <__assert_fail@plt+0x926c>
   1a510:	cmp	r3, #0
   1a514:	bne	1a814 <__assert_fail@plt+0x9334>
   1a518:	umull	r2, r3, r2, ip
   1a51c:	mov	r0, r2
   1a520:	mov	r1, r3
   1a524:	cmp	lr, #0
   1a528:	bne	1a74c <__assert_fail@plt+0x926c>
   1a52c:	cmp	r1, #0
   1a530:	beq	1a370 <__assert_fail@plt+0x8e90>
   1a534:	umull	r6, r7, r0, ip
   1a538:	mov	fp, lr
   1a53c:	mov	sl, r7
   1a540:	umlal	sl, fp, r1, ip
   1a544:	cmp	fp, #0
   1a548:	bne	1ac4c <__assert_fail@plt+0x976c>
   1a54c:	mov	r2, r6
   1a550:	mov	r3, sl
   1a554:	b	1a37c <__assert_fail@plt+0x8e9c>
   1a558:	asr	r3, ip, #31
   1a55c:	mov	r2, ip
   1a560:	cmp	r7, #0
   1a564:	mov	r1, #0
   1a568:	strd	r2, [sp]
   1a56c:	bne	1a8d0 <__assert_fail@plt+0x93f0>
   1a570:	umull	r6, r7, r6, ip
   1a574:	mov	r0, r6
   1a578:	mov	fp, r7
   1a57c:	cmp	r1, #0
   1a580:	bne	1a74c <__assert_fail@plt+0x926c>
   1a584:	cmp	fp, #0
   1a588:	mov	lr, r1
   1a58c:	beq	1a370 <__assert_fail@plt+0x8e90>
   1a590:	umull	r6, r7, r0, ip
   1a594:	mov	r3, r1
   1a598:	mov	r2, r7
   1a59c:	umlal	r2, r3, fp, ip
   1a5a0:	cmp	r3, #0
   1a5a4:	strd	r2, [sp, #16]
   1a5a8:	bne	1ab30 <__assert_fail@plt+0x9650>
   1a5ac:	mov	r2, r6
   1a5b0:	ldr	r3, [sp, #16]
   1a5b4:	b	1a37c <__assert_fail@plt+0x8e9c>
   1a5b8:	asr	r3, ip, #31
   1a5bc:	mov	r2, ip
   1a5c0:	cmp	r7, #0
   1a5c4:	mov	r1, #0
   1a5c8:	strd	r2, [sp]
   1a5cc:	bne	1a918 <__assert_fail@plt+0x9438>
   1a5d0:	umull	r6, r7, r6, ip
   1a5d4:	mov	r2, r6
   1a5d8:	mov	r3, r7
   1a5dc:	cmp	r1, #0
   1a5e0:	bne	1a74c <__assert_fail@plt+0x926c>
   1a5e4:	cmp	r3, #0
   1a5e8:	mov	lr, r1
   1a5ec:	beq	1a354 <__assert_fail@plt+0x8e74>
   1a5f0:	umull	r6, r7, r2, ip
   1a5f4:	mov	fp, lr
   1a5f8:	mov	sl, r7
   1a5fc:	umlal	sl, fp, r3, ip
   1a600:	cmp	fp, #0
   1a604:	bne	1ac10 <__assert_fail@plt+0x9730>
   1a608:	mov	r0, r6
   1a60c:	mov	r1, sl
   1a610:	b	1a360 <__assert_fail@plt+0x8e80>
   1a614:	asr	r3, ip, #31
   1a618:	mov	r2, ip
   1a61c:	cmp	r7, #0
   1a620:	mov	r1, #0
   1a624:	strd	r2, [sp]
   1a628:	bne	1a8f4 <__assert_fail@plt+0x9414>
   1a62c:	umull	r6, r7, r6, ip
   1a630:	mov	sl, r6
   1a634:	mov	lr, r7
   1a638:	cmp	r1, #0
   1a63c:	bne	1a410 <__assert_fail@plt+0x8f30>
   1a640:	cmp	lr, #0
   1a644:	mov	r7, r1
   1a648:	bne	1aa08 <__assert_fail@plt+0x9528>
   1a64c:	umull	sl, fp, sl, ip
   1a650:	mov	r0, sl
   1a654:	mov	r2, fp
   1a658:	cmp	r7, #0
   1a65c:	mov	r6, r0
   1a660:	mov	r7, r2
   1a664:	beq	1a3cc <__assert_fail@plt+0x8eec>
   1a668:	b	1a410 <__assert_fail@plt+0x8f30>
   1a66c:	asr	r3, ip, #31
   1a670:	mov	r2, ip
   1a674:	cmp	r7, #0
   1a678:	mov	r1, #0
   1a67c:	strd	r2, [sp]
   1a680:	bne	1a888 <__assert_fail@plt+0x93a8>
   1a684:	umull	r6, r7, r6, ip
   1a688:	mov	r0, r6
   1a68c:	mov	fp, r7
   1a690:	cmp	r1, #0
   1a694:	bne	1a74c <__assert_fail@plt+0x926c>
   1a698:	cmp	fp, #0
   1a69c:	mov	lr, r1
   1a6a0:	beq	1a4fc <__assert_fail@plt+0x901c>
   1a6a4:	umull	r6, r7, r0, ip
   1a6a8:	mov	r3, r1
   1a6ac:	mov	r2, r7
   1a6b0:	umlal	r2, r3, fp, ip
   1a6b4:	cmp	r3, #0
   1a6b8:	strd	r2, [sp, #16]
   1a6bc:	bne	1aba0 <__assert_fail@plt+0x96c0>
   1a6c0:	mov	r2, r6
   1a6c4:	ldr	r3, [sp, #16]
   1a6c8:	b	1a508 <__assert_fail@plt+0x9028>
   1a6cc:	lsr	r3, r7, #22
   1a6d0:	lsl	r7, r7, #10
   1a6d4:	cmp	r3, #0
   1a6d8:	lsl	r3, r6, #10
   1a6dc:	orr	r7, r7, r6, lsr #22
   1a6e0:	beq	1a484 <__assert_fail@plt+0x8fa4>
   1a6e4:	b	1a410 <__assert_fail@plt+0x8f30>
   1a6e8:	asr	r3, ip, #31
   1a6ec:	mov	r2, ip
   1a6f0:	cmp	r7, #0
   1a6f4:	mov	r1, #0
   1a6f8:	strd	r2, [sp]
   1a6fc:	bne	1a860 <__assert_fail@plt+0x9380>
   1a700:	umull	r6, r7, r6, ip
   1a704:	mov	r2, r6
   1a708:	mov	r3, r7
   1a70c:	cmp	r1, #0
   1a710:	bne	1a410 <__assert_fail@plt+0x8f30>
   1a714:	cmp	r3, #0
   1a718:	mov	r7, r1
   1a71c:	bne	1a9c4 <__assert_fail@plt+0x94e4>
   1a720:	umull	r2, r3, r2, ip
   1a724:	mov	r6, r2
   1a728:	mov	lr, r3
   1a72c:	cmp	r7, #0
   1a730:	bne	1a410 <__assert_fail@plt+0x8f30>
   1a734:	cmp	lr, #0
   1a738:	bne	1a988 <__assert_fail@plt+0x94a8>
   1a73c:	umull	r2, r3, r6, ip
   1a740:	mov	r0, r2
   1a744:	mov	r2, r3
   1a748:	b	1a658 <__assert_fail@plt+0x9178>
   1a74c:	mvn	r6, #0
   1a750:	mov	r3, #1
   1a754:	mov	r7, r6
   1a758:	b	1a3c8 <__assert_fail@plt+0x8ee8>
   1a75c:	umull	sl, fp, r6, ip
   1a760:	mov	r3, lr
   1a764:	mov	r2, fp
   1a768:	umlal	r2, r3, r7, ip
   1a76c:	cmp	r3, #0
   1a770:	bne	1ab68 <__assert_fail@plt+0x9688>
   1a774:	mov	r6, sl
   1a778:	mov	r7, r2
   1a77c:	b	1a408 <__assert_fail@plt+0x8f28>
   1a780:	mov	r3, #2
   1a784:	mov	ip, #1000	; 0x3e8
   1a788:	str	r3, [sp, #12]
   1a78c:	b	1a1fc <__assert_fail@plt+0x8d1c>
   1a790:	umull	r0, r1, r6, ip
   1a794:	mov	r3, r7
   1a798:	mov	r2, r1
   1a79c:	strd	r0, [sp, #16]
   1a7a0:	umlal	r2, r3, lr, ip
   1a7a4:	cmp	r3, #0
   1a7a8:	beq	1a3b8 <__assert_fail@plt+0x8ed8>
   1a7ac:	ldrd	sl, [sp]
   1a7b0:	mov	r7, #1
   1a7b4:	ldr	r0, [sp, #16]
   1a7b8:	ldr	r3, [sp, #20]
   1a7bc:	mul	r2, r6, fp
   1a7c0:	mla	r2, lr, sl, r2
   1a7c4:	add	r2, r2, r3
   1a7c8:	b	1a3b8 <__assert_fail@plt+0x8ed8>
   1a7cc:	umull	sl, fp, r2, ip
   1a7d0:	mov	r1, lr
   1a7d4:	mov	r0, fp
   1a7d8:	umlal	r0, r1, r3, ip
   1a7dc:	cmp	r1, #0
   1a7e0:	bne	1aac0 <__assert_fail@plt+0x95e0>
   1a7e4:	mov	r6, sl
   1a7e8:	mov	lr, r0
   1a7ec:	b	1a39c <__assert_fail@plt+0x8ebc>
   1a7f0:	umull	sl, fp, r0, ip
   1a7f4:	mov	r7, lr
   1a7f8:	mov	r6, fp
   1a7fc:	umlal	r6, r7, r1, ip
   1a800:	cmp	r7, #0
   1a804:	bne	1ac68 <__assert_fail@plt+0x9788>
   1a808:	mov	r2, sl
   1a80c:	mov	r3, r6
   1a810:	b	1a37c <__assert_fail@plt+0x8e9c>
   1a814:	umull	sl, fp, r2, ip
   1a818:	mov	r7, lr
   1a81c:	mov	r6, fp
   1a820:	umlal	r6, r7, r3, ip
   1a824:	cmp	r7, #0
   1a828:	bne	1aaf8 <__assert_fail@plt+0x9618>
   1a82c:	mov	r0, sl
   1a830:	mov	r1, r6
   1a834:	b	1a524 <__assert_fail@plt+0x9044>
   1a838:	umull	sl, fp, r6, ip
   1a83c:	mov	r3, r1
   1a840:	mov	r2, fp
   1a844:	umlal	r2, r3, r7, ip
   1a848:	cmp	r3, #0
   1a84c:	strd	r2, [sp, #16]
   1a850:	bne	1aadc <__assert_fail@plt+0x95fc>
   1a854:	mov	r2, sl
   1a858:	ldr	r3, [sp, #16]
   1a85c:	b	1a308 <__assert_fail@plt+0x8e28>
   1a860:	umull	sl, fp, r6, ip
   1a864:	mov	r3, r1
   1a868:	mov	r2, fp
   1a86c:	umlal	r2, r3, r7, ip
   1a870:	cmp	r3, #0
   1a874:	strd	r2, [sp, #16]
   1a878:	bne	1abbc <__assert_fail@plt+0x96dc>
   1a87c:	mov	r2, sl
   1a880:	ldr	r3, [sp, #16]
   1a884:	b	1a70c <__assert_fail@plt+0x922c>
   1a888:	umull	sl, fp, r6, ip
   1a88c:	mov	r3, r1
   1a890:	mov	r2, fp
   1a894:	umlal	r2, r3, r7, ip
   1a898:	cmp	r3, #0
   1a89c:	bne	1aa88 <__assert_fail@plt+0x95a8>
   1a8a0:	mov	r0, sl
   1a8a4:	mov	fp, r2
   1a8a8:	b	1a690 <__assert_fail@plt+0x91b0>
   1a8ac:	umull	sl, fp, r6, ip
   1a8b0:	mov	r3, r1
   1a8b4:	mov	r2, fp
   1a8b8:	umlal	r2, r3, r7, ip
   1a8bc:	cmp	r3, #0
   1a8c0:	bne	1ab4c <__assert_fail@plt+0x966c>
   1a8c4:	mov	r0, sl
   1a8c8:	mov	fp, r2
   1a8cc:	b	1a4b0 <__assert_fail@plt+0x8fd0>
   1a8d0:	umull	sl, fp, r6, ip
   1a8d4:	mov	r3, r1
   1a8d8:	mov	r2, fp
   1a8dc:	umlal	r2, r3, r7, ip
   1a8e0:	cmp	r3, #0
   1a8e4:	bne	1abd8 <__assert_fail@plt+0x96f8>
   1a8e8:	mov	r0, sl
   1a8ec:	mov	fp, r2
   1a8f0:	b	1a57c <__assert_fail@plt+0x909c>
   1a8f4:	umull	sl, fp, r6, ip
   1a8f8:	mov	r3, r1
   1a8fc:	mov	r2, fp
   1a900:	strd	sl, [sp, #16]
   1a904:	umlal	r2, r3, r7, ip
   1a908:	cmp	r3, #0
   1a90c:	bne	1ab80 <__assert_fail@plt+0x96a0>
   1a910:	mov	lr, r2
   1a914:	b	1a638 <__assert_fail@plt+0x9158>
   1a918:	umull	sl, fp, r6, ip
   1a91c:	mov	r3, r1
   1a920:	mov	r2, fp
   1a924:	umlal	r2, r3, r7, ip
   1a928:	cmp	r3, #0
   1a92c:	strd	r2, [sp, #16]
   1a930:	bne	1ac84 <__assert_fail@plt+0x97a4>
   1a934:	mov	r2, sl
   1a938:	ldr	r3, [sp, #16]
   1a93c:	b	1a5dc <__assert_fail@plt+0x90fc>
   1a940:	umull	sl, fp, r0, ip
   1a944:	mov	r7, lr
   1a948:	mov	r6, fp
   1a94c:	umlal	r6, r7, r1, ip
   1a950:	cmp	r7, #0
   1a954:	bne	1aca0 <__assert_fail@plt+0x97c0>
   1a958:	mov	r2, sl
   1a95c:	mov	r3, r6
   1a960:	b	1a344 <__assert_fail@plt+0x8e64>
   1a964:	umull	r6, r7, r2, ip
   1a968:	mov	fp, r1
   1a96c:	mov	sl, r7
   1a970:	umlal	sl, fp, r3, ip
   1a974:	cmp	fp, #0
   1a978:	bne	1ab14 <__assert_fail@plt+0x9634>
   1a97c:	mov	r0, r6
   1a980:	mov	r1, sl
   1a984:	b	1a328 <__assert_fail@plt+0x8e48>
   1a988:	umull	r0, r1, r6, ip
   1a98c:	mov	r3, r7
   1a990:	mov	r2, r1
   1a994:	strd	r0, [sp, #16]
   1a998:	umlal	r2, r3, lr, ip
   1a99c:	cmp	r3, #0
   1a9a0:	beq	1a658 <__assert_fail@plt+0x9178>
   1a9a4:	ldrd	sl, [sp]
   1a9a8:	mov	r7, #1
   1a9ac:	ldr	r0, [sp, #16]
   1a9b0:	ldr	r3, [sp, #20]
   1a9b4:	mul	r2, r6, fp
   1a9b8:	mla	r2, lr, sl, r2
   1a9bc:	add	r2, r2, r3
   1a9c0:	b	1a658 <__assert_fail@plt+0x9178>
   1a9c4:	umull	sl, fp, r2, ip
   1a9c8:	mov	r0, fp
   1a9cc:	umlal	r0, r1, r3, ip
   1a9d0:	cmp	r1, #0
   1a9d4:	bne	1acbc <__assert_fail@plt+0x97dc>
   1a9d8:	mov	r6, sl
   1a9dc:	mov	lr, r0
   1a9e0:	b	1a72c <__assert_fail@plt+0x924c>
   1a9e4:	umull	r6, r7, r0, ip
   1a9e8:	mov	fp, lr
   1a9ec:	mov	sl, r7
   1a9f0:	umlal	sl, fp, r1, ip
   1a9f4:	cmp	fp, #0
   1a9f8:	bne	1abf4 <__assert_fail@plt+0x9714>
   1a9fc:	mov	r2, r6
   1aa00:	mov	r3, sl
   1aa04:	b	1a508 <__assert_fail@plt+0x9028>
   1aa08:	umull	r0, r1, sl, ip
   1aa0c:	mov	r3, r7
   1aa10:	mov	r2, r1
   1aa14:	umlal	r2, r3, lr, ip
   1aa18:	cmp	r3, #0
   1aa1c:	beq	1a658 <__assert_fail@plt+0x9178>
   1aa20:	ldr	r3, [sp, #4]
   1aa24:	mov	r7, #1
   1aa28:	mul	r2, sl, r3
   1aa2c:	ldr	r3, [sp]
   1aa30:	mla	r2, lr, r3, r2
   1aa34:	add	r2, r2, r1
   1aa38:	b	1a658 <__assert_fail@plt+0x9178>
   1aa3c:	umull	r6, r7, r0, ip
   1aa40:	mov	r3, r1
   1aa44:	mov	r2, r7
   1aa48:	umlal	r2, r3, fp, ip
   1aa4c:	cmp	r3, #0
   1aa50:	strd	r2, [sp, #16]
   1aa54:	bne	1acd8 <__assert_fail@plt+0x97f8>
   1aa58:	mov	r2, r6
   1aa5c:	ldr	r3, [sp, #16]
   1aa60:	b	1a4d0 <__assert_fail@plt+0x8ff0>
   1aa64:	umull	sl, fp, r2, ip
   1aa68:	mov	r7, lr
   1aa6c:	mov	r6, fp
   1aa70:	umlal	r6, r7, r3, ip
   1aa74:	cmp	r7, #0
   1aa78:	bne	1aaa4 <__assert_fail@plt+0x95c4>
   1aa7c:	mov	r0, sl
   1aa80:	mov	r1, r6
   1aa84:	b	1a4ec <__assert_fail@plt+0x900c>
   1aa88:	ldrd	r2, [sp]
   1aa8c:	mov	r0, sl
   1aa90:	mov	r1, #1
   1aa94:	mul	r6, r6, r3
   1aa98:	mla	r7, r2, r7, r6
   1aa9c:	add	fp, r7, fp
   1aaa0:	b	1a690 <__assert_fail@plt+0x91b0>
   1aaa4:	ldrd	r6, [sp]
   1aaa8:	mov	r0, sl
   1aaac:	mov	lr, #1
   1aab0:	mul	r2, r2, r7
   1aab4:	mla	r1, r3, r6, r2
   1aab8:	add	r1, r1, fp
   1aabc:	b	1a4ec <__assert_fail@plt+0x900c>
   1aac0:	ldrd	r0, [sp]
   1aac4:	mov	r6, sl
   1aac8:	mov	r7, #1
   1aacc:	mul	r2, r2, r1
   1aad0:	mla	lr, r3, r0, r2
   1aad4:	add	lr, lr, fp
   1aad8:	b	1a39c <__assert_fail@plt+0x8ebc>
   1aadc:	ldm	sp, {r0, r3}
   1aae0:	mov	r2, sl
   1aae4:	mov	r1, #1
   1aae8:	mul	r3, r6, r3
   1aaec:	mla	r3, r0, r7, r3
   1aaf0:	add	r3, r3, fp
   1aaf4:	b	1a308 <__assert_fail@plt+0x8e28>
   1aaf8:	ldrd	r6, [sp]
   1aafc:	mov	r0, sl
   1ab00:	mov	lr, #1
   1ab04:	mul	r2, r2, r7
   1ab08:	mla	r1, r3, r6, r2
   1ab0c:	add	r1, r1, fp
   1ab10:	b	1a524 <__assert_fail@plt+0x9044>
   1ab14:	ldrd	sl, [sp]
   1ab18:	mov	r0, r6
   1ab1c:	mov	lr, #1
   1ab20:	mul	r2, r2, fp
   1ab24:	mla	r1, r3, sl, r2
   1ab28:	add	r1, r1, r7
   1ab2c:	b	1a328 <__assert_fail@plt+0x8e48>
   1ab30:	ldm	sp, {r1, r3}
   1ab34:	mov	r2, r6
   1ab38:	mov	lr, #1
   1ab3c:	mul	r3, r0, r3
   1ab40:	mla	r3, fp, r1, r3
   1ab44:	add	r3, r3, r7
   1ab48:	b	1a37c <__assert_fail@plt+0x8e9c>
   1ab4c:	ldrd	r2, [sp]
   1ab50:	mov	r0, sl
   1ab54:	mov	r1, #1
   1ab58:	mul	r6, r6, r3
   1ab5c:	mla	r7, r2, r7, r6
   1ab60:	add	fp, r7, fp
   1ab64:	b	1a4b0 <__assert_fail@plt+0x8fd0>
   1ab68:	mul	r3, r6, r1
   1ab6c:	mov	lr, #1
   1ab70:	mov	r6, sl
   1ab74:	mla	r7, ip, r7, r3
   1ab78:	add	r7, r7, fp
   1ab7c:	b	1a408 <__assert_fail@plt+0x8f28>
   1ab80:	ldrd	r2, [sp]
   1ab84:	mov	r1, #1
   1ab88:	ldr	sl, [sp, #16]
   1ab8c:	mul	lr, r6, r3
   1ab90:	ldr	r3, [sp, #20]
   1ab94:	mla	lr, r2, r7, lr
   1ab98:	add	lr, lr, r3
   1ab9c:	b	1a638 <__assert_fail@plt+0x9158>
   1aba0:	ldm	sp, {r1, r3}
   1aba4:	mov	r2, r6
   1aba8:	mov	lr, #1
   1abac:	mul	r3, r0, r3
   1abb0:	mla	r3, fp, r1, r3
   1abb4:	add	r3, r3, r7
   1abb8:	b	1a508 <__assert_fail@plt+0x9028>
   1abbc:	ldm	sp, {r0, r3}
   1abc0:	mov	r2, sl
   1abc4:	mov	r1, #1
   1abc8:	mul	r3, r6, r3
   1abcc:	mla	r3, r0, r7, r3
   1abd0:	add	r3, r3, fp
   1abd4:	b	1a70c <__assert_fail@plt+0x922c>
   1abd8:	ldrd	r2, [sp]
   1abdc:	mov	r0, sl
   1abe0:	mov	r1, #1
   1abe4:	mul	r6, r6, r3
   1abe8:	mla	r7, r2, r7, r6
   1abec:	add	fp, r7, fp
   1abf0:	b	1a57c <__assert_fail@plt+0x909c>
   1abf4:	ldrd	sl, [sp]
   1abf8:	mov	r2, r6
   1abfc:	mov	lr, #1
   1ac00:	mul	r3, r0, fp
   1ac04:	mla	r3, r1, sl, r3
   1ac08:	add	r3, r3, r7
   1ac0c:	b	1a508 <__assert_fail@plt+0x9028>
   1ac10:	ldrd	sl, [sp]
   1ac14:	mov	r0, r6
   1ac18:	mov	lr, #1
   1ac1c:	mul	r2, r2, fp
   1ac20:	mla	r1, r3, sl, r2
   1ac24:	add	r1, r1, r7
   1ac28:	b	1a360 <__assert_fail@plt+0x8e80>
   1ac2c:	movw	r3, #52032	; 0xcb40
   1ac30:	movt	r3, #1
   1ac34:	movw	r1, #52044	; 0xcb4c
   1ac38:	movt	r1, #1
   1ac3c:	movw	r0, #52060	; 0xcb5c
   1ac40:	movt	r0, #1
   1ac44:	mov	r2, #85	; 0x55
   1ac48:	bl	114e0 <__assert_fail@plt>
   1ac4c:	ldrd	sl, [sp]
   1ac50:	mov	r2, r6
   1ac54:	mov	lr, #1
   1ac58:	mul	r3, r0, fp
   1ac5c:	mla	r3, r1, sl, r3
   1ac60:	add	r3, r3, r7
   1ac64:	b	1a37c <__assert_fail@plt+0x8e9c>
   1ac68:	ldrd	r6, [sp]
   1ac6c:	mov	r2, sl
   1ac70:	mov	lr, #1
   1ac74:	mul	r3, r0, r7
   1ac78:	mla	r3, r1, r6, r3
   1ac7c:	add	r3, r3, fp
   1ac80:	b	1a37c <__assert_fail@plt+0x8e9c>
   1ac84:	ldm	sp, {r0, r3}
   1ac88:	mov	r2, sl
   1ac8c:	mov	r1, #1
   1ac90:	mul	r3, r6, r3
   1ac94:	mla	r3, r0, r7, r3
   1ac98:	add	r3, r3, fp
   1ac9c:	b	1a5dc <__assert_fail@plt+0x90fc>
   1aca0:	ldrd	r6, [sp]
   1aca4:	mov	r2, sl
   1aca8:	mov	lr, #1
   1acac:	mul	r3, r0, r7
   1acb0:	mla	r3, r1, r6, r3
   1acb4:	add	r3, r3, fp
   1acb8:	b	1a344 <__assert_fail@plt+0x8e64>
   1acbc:	ldrd	r0, [sp]
   1acc0:	mov	r6, sl
   1acc4:	mov	r7, #1
   1acc8:	mul	r2, r2, r1
   1accc:	mla	lr, r3, r0, r2
   1acd0:	add	lr, lr, fp
   1acd4:	b	1a72c <__assert_fail@plt+0x924c>
   1acd8:	ldm	sp, {r1, r3}
   1acdc:	mov	r2, r6
   1ace0:	mov	lr, #1
   1ace4:	mul	r3, r0, r3
   1ace8:	mla	r3, fp, r1, r3
   1acec:	add	r3, r3, r7
   1acf0:	b	1a4d0 <__assert_fail@plt+0x8ff0>
   1acf4:	cmp	r1, #0
   1acf8:	cmpne	r0, #0
   1acfc:	beq	1ad48 <__assert_fail@plt+0x9868>
   1ad00:	strd	r4, [sp, #-16]!
   1ad04:	umull	r4, r5, r0, r1
   1ad08:	str	r6, [sp, #8]
   1ad0c:	str	lr, [sp, #12]
   1ad10:	adds	r3, r5, #0
   1ad14:	movne	r3, #1
   1ad18:	cmp	r4, #0
   1ad1c:	blt	1ad28 <__assert_fail@plt+0x9848>
   1ad20:	cmp	r3, #0
   1ad24:	beq	1ad54 <__assert_fail@plt+0x9874>
   1ad28:	bl	1139c <__errno_location@plt>
   1ad2c:	mov	r3, #12
   1ad30:	ldrd	r4, [sp]
   1ad34:	ldr	r6, [sp, #8]
   1ad38:	add	sp, sp, #12
   1ad3c:	str	r3, [r0]
   1ad40:	mov	r0, #0
   1ad44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad48:	mov	r1, #1
   1ad4c:	mov	r0, r1
   1ad50:	b	11144 <calloc@plt>
   1ad54:	ldrd	r4, [sp]
   1ad58:	ldr	r6, [sp, #8]
   1ad5c:	ldr	lr, [sp, #12]
   1ad60:	add	sp, sp, #16
   1ad64:	b	11144 <calloc@plt>
   1ad68:	cmp	r0, #0
   1ad6c:	beq	1ad78 <__assert_fail@plt+0x9898>
   1ad70:	blt	1ad80 <__assert_fail@plt+0x98a0>
   1ad74:	b	112f4 <malloc@plt>
   1ad78:	mov	r0, #1
   1ad7c:	b	112f4 <malloc@plt>
   1ad80:	str	r4, [sp, #-8]!
   1ad84:	str	lr, [sp, #4]
   1ad88:	bl	1139c <__errno_location@plt>
   1ad8c:	mov	r3, #12
   1ad90:	ldr	r4, [sp]
   1ad94:	add	sp, sp, #4
   1ad98:	str	r3, [r0]
   1ad9c:	mov	r0, #0
   1ada0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ada4:	cmp	r0, #0
   1ada8:	beq	1add0 <__assert_fail@plt+0x98f0>
   1adac:	cmp	r1, #0
   1adb0:	str	r4, [sp, #-8]!
   1adb4:	str	lr, [sp, #4]
   1adb8:	beq	1add8 <__assert_fail@plt+0x98f8>
   1adbc:	blt	1adec <__assert_fail@plt+0x990c>
   1adc0:	ldr	r4, [sp]
   1adc4:	ldr	lr, [sp, #4]
   1adc8:	add	sp, sp, #8
   1adcc:	b	11234 <realloc@plt>
   1add0:	mov	r0, r1
   1add4:	b	1ad68 <__assert_fail@plt+0x9888>
   1add8:	bl	14e68 <__assert_fail@plt+0x3988>
   1addc:	ldr	r4, [sp]
   1ade0:	add	sp, sp, #4
   1ade4:	mov	r0, #0
   1ade8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adec:	bl	1139c <__errno_location@plt>
   1adf0:	mov	r3, #12
   1adf4:	str	r3, [r0]
   1adf8:	b	1addc <__assert_fail@plt+0x98fc>
   1adfc:	strd	r4, [sp, #-16]!
   1ae00:	mov	r4, r0
   1ae04:	str	r6, [sp, #8]
   1ae08:	str	lr, [sp, #12]
   1ae0c:	bl	112b8 <__fpending@plt>
   1ae10:	ldr	r5, [r4]
   1ae14:	mov	r6, r0
   1ae18:	mov	r0, r4
   1ae1c:	bl	14c90 <__assert_fail@plt+0x37b0>
   1ae20:	mov	r4, r0
   1ae24:	and	r5, r5, #32
   1ae28:	cmp	r5, #0
   1ae2c:	bne	1ae64 <__assert_fail@plt+0x9984>
   1ae30:	cmp	r0, #0
   1ae34:	beq	1ae50 <__assert_fail@plt+0x9970>
   1ae38:	cmp	r6, #0
   1ae3c:	bne	1ae7c <__assert_fail@plt+0x999c>
   1ae40:	bl	1139c <__errno_location@plt>
   1ae44:	ldr	r4, [r0]
   1ae48:	subs	r4, r4, #9
   1ae4c:	mvnne	r4, #0
   1ae50:	mov	r0, r4
   1ae54:	ldrd	r4, [sp]
   1ae58:	ldr	r6, [sp, #8]
   1ae5c:	add	sp, sp, #12
   1ae60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae64:	cmp	r0, #0
   1ae68:	bne	1ae7c <__assert_fail@plt+0x999c>
   1ae6c:	bl	1139c <__errno_location@plt>
   1ae70:	str	r4, [r0]
   1ae74:	mvn	r4, #0
   1ae78:	b	1ae50 <__assert_fail@plt+0x9970>
   1ae7c:	mvn	r4, #0
   1ae80:	b	1ae50 <__assert_fail@plt+0x9970>
   1ae84:	mov	r0, #14
   1ae88:	str	r4, [sp, #-8]!
   1ae8c:	str	lr, [sp, #4]
   1ae90:	bl	11474 <nl_langinfo@plt>
   1ae94:	cmp	r0, #0
   1ae98:	beq	1aebc <__assert_fail@plt+0x99dc>
   1ae9c:	ldrb	r2, [r0]
   1aea0:	movw	r3, #52100	; 0xcb84
   1aea4:	movt	r3, #1
   1aea8:	ldr	r4, [sp]
   1aeac:	add	sp, sp, #4
   1aeb0:	cmp	r2, #0
   1aeb4:	moveq	r0, r3
   1aeb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aebc:	ldr	r4, [sp]
   1aec0:	add	sp, sp, #4
   1aec4:	movw	r0, #52100	; 0xcb84
   1aec8:	movt	r0, #1
   1aecc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aed0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1aed4:	mov	r5, r2
   1aed8:	strd	r6, [sp, #8]
   1aedc:	subs	r6, r0, #0
   1aee0:	mov	r7, r1
   1aee4:	str	lr, [sp, #16]
   1aee8:	sub	sp, sp, #12
   1aeec:	addeq	r6, sp, #4
   1aef0:	mov	r0, r6
   1aef4:	bl	112c4 <mbrtowc@plt>
   1aef8:	cmp	r5, #0
   1aefc:	cmnne	r0, #3
   1af00:	mov	r4, r0
   1af04:	bhi	1af20 <__assert_fail@plt+0x9a40>
   1af08:	mov	r0, r4
   1af0c:	add	sp, sp, #12
   1af10:	ldrd	r4, [sp]
   1af14:	ldrd	r6, [sp, #8]
   1af18:	add	sp, sp, #16
   1af1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1af20:	mov	r0, #0
   1af24:	bl	1b16c <__assert_fail@plt+0x9c8c>
   1af28:	cmp	r0, #0
   1af2c:	bne	1af08 <__assert_fail@plt+0x9a28>
   1af30:	ldrb	r3, [r7]
   1af34:	mov	r4, #1
   1af38:	str	r3, [r6]
   1af3c:	b	1af08 <__assert_fail@plt+0x9a28>
   1af40:	umull	r2, r3, r1, r2
   1af44:	cmp	r3, #0
   1af48:	bne	1af54 <__assert_fail@plt+0x9a74>
   1af4c:	mov	r1, r2
   1af50:	b	1ada4 <__assert_fail@plt+0x98c4>
   1af54:	str	r4, [sp, #-8]!
   1af58:	str	lr, [sp, #4]
   1af5c:	bl	1139c <__errno_location@plt>
   1af60:	mov	r3, #12
   1af64:	ldr	r4, [sp]
   1af68:	add	sp, sp, #4
   1af6c:	str	r3, [r0]
   1af70:	mov	r0, #0
   1af74:	pop	{pc}		; (ldr pc, [sp], #4)
   1af78:	mov	r2, #3
   1af7c:	mov	r1, #0
   1af80:	b	1af84 <__assert_fail@plt+0x9aa4>
   1af84:	push	{r1, r2, r3}
   1af88:	strd	r4, [sp, #-20]!	; 0xffffffec
   1af8c:	strd	r6, [sp, #8]
   1af90:	str	lr, [sp, #16]
   1af94:	sub	sp, sp, #8
   1af98:	ldr	r1, [sp, #28]
   1af9c:	add	r2, sp, #32
   1afa0:	str	r2, [sp, #4]
   1afa4:	cmp	r1, #0
   1afa8:	beq	1b084 <__assert_fail@plt+0x9ba4>
   1afac:	movw	r3, #1030	; 0x406
   1afb0:	mov	r6, r0
   1afb4:	cmp	r1, r3
   1afb8:	beq	1b094 <__assert_fail@plt+0x9bb4>
   1afbc:	cmp	r1, #11
   1afc0:	beq	1b03c <__assert_fail@plt+0x9b5c>
   1afc4:	ble	1b01c <__assert_fail@plt+0x9b3c>
   1afc8:	movw	r2, #1031	; 0x407
   1afcc:	cmp	r1, r2
   1afd0:	bgt	1b058 <__assert_fail@plt+0x9b78>
   1afd4:	cmp	r1, r3
   1afd8:	bge	1afe8 <__assert_fail@plt+0x9b08>
   1afdc:	movw	r3, #1025	; 0x401
   1afe0:	cmp	r1, r3
   1afe4:	beq	1b03c <__assert_fail@plt+0x9b5c>
   1afe8:	ldr	r3, [sp, #4]
   1afec:	mov	r0, r6
   1aff0:	ldr	r2, [r3]
   1aff4:	bl	1142c <fcntl64@plt>
   1aff8:	mov	r4, r0
   1affc:	mov	r0, r4
   1b000:	add	sp, sp, #8
   1b004:	ldrd	r4, [sp]
   1b008:	ldrd	r6, [sp, #8]
   1b00c:	ldr	lr, [sp, #16]
   1b010:	add	sp, sp, #20
   1b014:	add	sp, sp, #12
   1b018:	bx	lr
   1b01c:	cmp	r1, #4
   1b020:	beq	1afe8 <__assert_fail@plt+0x9b08>
   1b024:	bgt	1b04c <__assert_fail@plt+0x9b6c>
   1b028:	cmp	r1, #2
   1b02c:	beq	1afe8 <__assert_fail@plt+0x9b08>
   1b030:	bgt	1b03c <__assert_fail@plt+0x9b5c>
   1b034:	cmp	r1, #1
   1b038:	bne	1afe8 <__assert_fail@plt+0x9b08>
   1b03c:	mov	r0, r6
   1b040:	bl	1142c <fcntl64@plt>
   1b044:	mov	r4, r0
   1b048:	b	1affc <__assert_fail@plt+0x9b1c>
   1b04c:	cmp	r1, #9
   1b050:	bne	1afe8 <__assert_fail@plt+0x9b08>
   1b054:	b	1b03c <__assert_fail@plt+0x9b5c>
   1b058:	movw	r3, #1033	; 0x409
   1b05c:	cmp	r1, r3
   1b060:	beq	1afe8 <__assert_fail@plt+0x9b08>
   1b064:	blt	1b03c <__assert_fail@plt+0x9b5c>
   1b068:	movw	r3, #1034	; 0x40a
   1b06c:	cmp	r1, r3
   1b070:	bne	1afe8 <__assert_fail@plt+0x9b08>
   1b074:	mov	r0, r6
   1b078:	bl	1142c <fcntl64@plt>
   1b07c:	mov	r4, r0
   1b080:	b	1affc <__assert_fail@plt+0x9b1c>
   1b084:	ldr	r2, [sp, #32]
   1b088:	bl	1142c <fcntl64@plt>
   1b08c:	mov	r4, r0
   1b090:	b	1affc <__assert_fail@plt+0x9b1c>
   1b094:	movw	r5, #54880	; 0xd660
   1b098:	movt	r5, #2
   1b09c:	ldr	r7, [r2]
   1b0a0:	add	r2, sp, #36	; 0x24
   1b0a4:	ldr	r3, [r5]
   1b0a8:	str	r2, [sp, #4]
   1b0ac:	mov	r2, r7
   1b0b0:	cmp	r3, #0
   1b0b4:	blt	1b0d0 <__assert_fail@plt+0x9bf0>
   1b0b8:	bl	1142c <fcntl64@plt>
   1b0bc:	subs	r4, r0, #0
   1b0c0:	blt	1b138 <__assert_fail@plt+0x9c58>
   1b0c4:	mov	r3, #1
   1b0c8:	str	r3, [r5]
   1b0cc:	b	1affc <__assert_fail@plt+0x9b1c>
   1b0d0:	mov	r1, #0
   1b0d4:	bl	1142c <fcntl64@plt>
   1b0d8:	subs	r4, r0, #0
   1b0dc:	blt	1affc <__assert_fail@plt+0x9b1c>
   1b0e0:	ldr	r3, [r5]
   1b0e4:	cmn	r3, #1
   1b0e8:	bne	1affc <__assert_fail@plt+0x9b1c>
   1b0ec:	mov	r1, #1
   1b0f0:	mov	r0, r4
   1b0f4:	bl	1142c <fcntl64@plt>
   1b0f8:	subs	r2, r0, #0
   1b0fc:	blt	1b118 <__assert_fail@plt+0x9c38>
   1b100:	orr	r2, r2, #1
   1b104:	mov	r1, #2
   1b108:	mov	r0, r4
   1b10c:	bl	1142c <fcntl64@plt>
   1b110:	cmn	r0, #1
   1b114:	bne	1affc <__assert_fail@plt+0x9b1c>
   1b118:	bl	1139c <__errno_location@plt>
   1b11c:	mov	r5, r0
   1b120:	mov	r0, r4
   1b124:	ldr	r6, [r5]
   1b128:	mvn	r4, #0
   1b12c:	bl	114c8 <close@plt>
   1b130:	str	r6, [r5]
   1b134:	b	1affc <__assert_fail@plt+0x9b1c>
   1b138:	bl	1139c <__errno_location@plt>
   1b13c:	ldr	r3, [r0]
   1b140:	cmp	r3, #22
   1b144:	bne	1b0c4 <__assert_fail@plt+0x9be4>
   1b148:	mov	r2, r7
   1b14c:	mov	r0, r6
   1b150:	mov	r1, #0
   1b154:	bl	1142c <fcntl64@plt>
   1b158:	subs	r4, r0, #0
   1b15c:	mvnge	r3, #0
   1b160:	strge	r3, [r5]
   1b164:	bge	1b0ec <__assert_fail@plt+0x9c0c>
   1b168:	b	1affc <__assert_fail@plt+0x9b1c>
   1b16c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b170:	sub	sp, sp, #268	; 0x10c
   1b174:	movw	r2, #257	; 0x101
   1b178:	add	r1, sp, #4
   1b17c:	bl	1b1c4 <__assert_fail@plt+0x9ce4>
   1b180:	cmp	r0, #0
   1b184:	movne	r0, #0
   1b188:	bne	1b1bc <__assert_fail@plt+0x9cdc>
   1b18c:	movw	r1, #52108	; 0xcb8c
   1b190:	movt	r1, #1
   1b194:	add	r0, sp, #4
   1b198:	bl	11168 <strcmp@plt>
   1b19c:	cmp	r0, #0
   1b1a0:	beq	1b1bc <__assert_fail@plt+0x9cdc>
   1b1a4:	add	r0, sp, #4
   1b1a8:	movw	r1, #52112	; 0xcb90
   1b1ac:	movt	r1, #1
   1b1b0:	bl	11168 <strcmp@plt>
   1b1b4:	adds	r0, r0, #0
   1b1b8:	movne	r0, #1
   1b1bc:	add	sp, sp, #268	; 0x10c
   1b1c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1c4:	strd	r4, [sp, #-16]!
   1b1c8:	mov	r5, r1
   1b1cc:	mov	r1, #0
   1b1d0:	mov	r4, r2
   1b1d4:	str	r6, [sp, #8]
   1b1d8:	str	lr, [sp, #12]
   1b1dc:	bl	11438 <setlocale@plt>
   1b1e0:	subs	r6, r0, #0
   1b1e4:	beq	1b264 <__assert_fail@plt+0x9d84>
   1b1e8:	bl	11354 <strlen@plt>
   1b1ec:	cmp	r4, r0
   1b1f0:	bhi	1b210 <__assert_fail@plt+0x9d30>
   1b1f4:	cmp	r4, #0
   1b1f8:	moveq	r0, #34	; 0x22
   1b1fc:	bne	1b234 <__assert_fail@plt+0x9d54>
   1b200:	ldrd	r4, [sp]
   1b204:	ldr	r6, [sp, #8]
   1b208:	add	sp, sp, #12
   1b20c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b210:	add	r2, r0, #1
   1b214:	mov	r1, r6
   1b218:	mov	r0, r5
   1b21c:	bl	111c8 <memcpy@plt>
   1b220:	ldrd	r4, [sp]
   1b224:	mov	r0, #0
   1b228:	ldr	r6, [sp, #8]
   1b22c:	add	sp, sp, #12
   1b230:	pop	{pc}		; (ldr pc, [sp], #4)
   1b234:	sub	r4, r4, #1
   1b238:	mov	r1, r6
   1b23c:	mov	r2, r4
   1b240:	mov	r0, r5
   1b244:	bl	111c8 <memcpy@plt>
   1b248:	mov	r3, #0
   1b24c:	mov	r0, #34	; 0x22
   1b250:	strb	r3, [r5, r4]
   1b254:	ldrd	r4, [sp]
   1b258:	ldr	r6, [sp, #8]
   1b25c:	add	sp, sp, #12
   1b260:	pop	{pc}		; (ldr pc, [sp], #4)
   1b264:	cmp	r4, #0
   1b268:	mov	r0, #22
   1b26c:	strbne	r6, [r5]
   1b270:	ldrd	r4, [sp]
   1b274:	ldr	r6, [sp, #8]
   1b278:	add	sp, sp, #12
   1b27c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b280:	mov	r1, #0
   1b284:	b	11438 <setlocale@plt>
   1b288:	cmp	r3, #0
   1b28c:	cmpeq	r2, #0
   1b290:	bne	1b2a8 <__assert_fail@plt+0x9dc8>
   1b294:	cmp	r1, #0
   1b298:	cmpeq	r0, #0
   1b29c:	mvnne	r1, #0
   1b2a0:	mvnne	r0, #0
   1b2a4:	b	1b2c4 <__assert_fail@plt+0x9de4>
   1b2a8:	sub	sp, sp, #8
   1b2ac:	push	{sp, lr}
   1b2b0:	bl	1b2d4 <__assert_fail@plt+0x9df4>
   1b2b4:	ldr	lr, [sp, #4]
   1b2b8:	add	sp, sp, #8
   1b2bc:	pop	{r2, r3}
   1b2c0:	bx	lr
   1b2c4:	push	{r1, lr}
   1b2c8:	mov	r0, #8
   1b2cc:	bl	1115c <raise@plt>
   1b2d0:	pop	{r1, pc}
   1b2d4:	cmp	r1, r3
   1b2d8:	cmpeq	r0, r2
   1b2dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e0:	mov	r4, r0
   1b2e4:	movcc	r0, #0
   1b2e8:	mov	r5, r1
   1b2ec:	ldr	lr, [sp, #36]	; 0x24
   1b2f0:	movcc	r1, r0
   1b2f4:	bcc	1b3f0 <__assert_fail@plt+0x9f10>
   1b2f8:	cmp	r3, #0
   1b2fc:	clzeq	ip, r2
   1b300:	clzne	ip, r3
   1b304:	addeq	ip, ip, #32
   1b308:	cmp	r5, #0
   1b30c:	clzeq	r1, r4
   1b310:	addeq	r1, r1, #32
   1b314:	clzne	r1, r5
   1b318:	sub	ip, ip, r1
   1b31c:	sub	sl, ip, #32
   1b320:	lsl	r9, r3, ip
   1b324:	rsb	fp, ip, #32
   1b328:	orr	r9, r9, r2, lsl sl
   1b32c:	orr	r9, r9, r2, lsr fp
   1b330:	lsl	r8, r2, ip
   1b334:	cmp	r5, r9
   1b338:	cmpeq	r4, r8
   1b33c:	movcc	r0, #0
   1b340:	movcc	r1, r0
   1b344:	bcc	1b360 <__assert_fail@plt+0x9e80>
   1b348:	mov	r0, #1
   1b34c:	subs	r4, r4, r8
   1b350:	lsl	r1, r0, sl
   1b354:	orr	r1, r1, r0, lsr fp
   1b358:	lsl	r0, r0, ip
   1b35c:	sbc	r5, r5, r9
   1b360:	cmp	ip, #0
   1b364:	beq	1b3f0 <__assert_fail@plt+0x9f10>
   1b368:	lsr	r6, r8, #1
   1b36c:	orr	r6, r6, r9, lsl #31
   1b370:	lsr	r7, r9, #1
   1b374:	mov	r2, ip
   1b378:	b	1b39c <__assert_fail@plt+0x9ebc>
   1b37c:	subs	r3, r4, r6
   1b380:	sbc	r8, r5, r7
   1b384:	adds	r3, r3, r3
   1b388:	adc	r8, r8, r8
   1b38c:	adds	r4, r3, #1
   1b390:	adc	r5, r8, #0
   1b394:	subs	r2, r2, #1
   1b398:	beq	1b3b8 <__assert_fail@plt+0x9ed8>
   1b39c:	cmp	r5, r7
   1b3a0:	cmpeq	r4, r6
   1b3a4:	bcs	1b37c <__assert_fail@plt+0x9e9c>
   1b3a8:	adds	r4, r4, r4
   1b3ac:	adc	r5, r5, r5
   1b3b0:	subs	r2, r2, #1
   1b3b4:	bne	1b39c <__assert_fail@plt+0x9ebc>
   1b3b8:	lsr	r3, r4, ip
   1b3bc:	orr	r3, r3, r5, lsl fp
   1b3c0:	lsr	r2, r5, ip
   1b3c4:	orr	r3, r3, r5, lsr sl
   1b3c8:	adds	r0, r0, r4
   1b3cc:	mov	r4, r3
   1b3d0:	lsl	r3, r2, ip
   1b3d4:	orr	r3, r3, r4, lsl sl
   1b3d8:	lsl	ip, r4, ip
   1b3dc:	orr	r3, r3, r4, lsr fp
   1b3e0:	adc	r1, r1, r5
   1b3e4:	subs	r0, r0, ip
   1b3e8:	mov	r5, r2
   1b3ec:	sbc	r1, r1, r3
   1b3f0:	cmp	lr, #0
   1b3f4:	strdne	r4, [lr]
   1b3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b400:	mov	r7, r0
   1b404:	ldr	r6, [pc, #72]	; 1b454 <__assert_fail@plt+0x9f74>
   1b408:	ldr	r5, [pc, #72]	; 1b458 <__assert_fail@plt+0x9f78>
   1b40c:	add	r6, pc, r6
   1b410:	add	r5, pc, r5
   1b414:	sub	r6, r6, r5
   1b418:	mov	r8, r1
   1b41c:	mov	r9, r2
   1b420:	bl	11118 <fdopen@plt-0x20>
   1b424:	asrs	r6, r6, #2
   1b428:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b42c:	mov	r4, #0
   1b430:	add	r4, r4, #1
   1b434:	ldr	r3, [r5], #4
   1b438:	mov	r2, r9
   1b43c:	mov	r1, r8
   1b440:	mov	r0, r7
   1b444:	blx	r3
   1b448:	cmp	r6, r4
   1b44c:	bne	1b430 <__assert_fail@plt+0x9f50>
   1b450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b454:	andeq	r1, r1, r0, lsl #22
   1b458:	strdeq	r1, [r1], -r8
   1b45c:	bx	lr
   1b460:	ldr	r3, [pc, #12]	; 1b474 <__assert_fail@plt+0x9f94>
   1b464:	mov	r1, #0
   1b468:	add	r3, pc, r3
   1b46c:	ldr	r2, [r3]
   1b470:	b	113b4 <__cxa_atexit@plt>
   1b474:	andeq	r1, r1, r0, ror #25

Disassembly of section .fini:

0001b478 <.fini>:
   1b478:	push	{r3, lr}
   1b47c:	pop	{r3, pc}
