
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

000110bc <.init>:
   110bc:	push	{r3, lr}
   110c0:	bl	11400 <__assert_fail@plt+0x48>
   110c4:	pop	{r3, pc}

Disassembly of section .plt:

000110c8 <calloc@plt-0x14>:
   110c8:	push	{lr}		; (str lr, [sp, #-4]!)
   110cc:	ldr	lr, [pc, #4]	; 110d8 <calloc@plt-0x4>
   110d0:	add	lr, pc, lr
   110d4:	ldr	pc, [lr, #8]!
   110d8:	andeq	r6, r1, r8, lsr #30

000110dc <calloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3880]!	; 0xf28

000110e8 <endgrent@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3872]!	; 0xf20

000110f4 <fputs_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3864]!	; 0xf18

00011100 <raise@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3856]!	; 0xf10

0001110c <getpwnam@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3848]!	; 0xf08

00011118 <is_selinux_enabled@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3840]!	; 0xf00

00011124 <strcmp@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3832]!	; 0xef8

00011130 <getpwuid@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3824]!	; 0xef0

0001113c <fflush@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3816]!	; 0xee8

00011148 <getuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3808]!	; 0xee0

00011154 <free@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3800]!	; 0xed8

00011160 <_exit@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3792]!	; 0xed0

0001116c <memcpy@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3784]!	; 0xec8

00011178 <mbsinit@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3776]!	; 0xec0

00011184 <memcmp@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011190 <dcgettext@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3760]!	; 0xeb0

0001119c <realloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3752]!	; 0xea8

000111a8 <textdomain@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3744]!	; 0xea0

000111b4 <geteuid@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3736]!	; 0xe98

000111c0 <iswprint@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3728]!	; 0xe90

000111cc <getegid@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3720]!	; 0xe88

000111d8 <fwrite@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3712]!	; 0xe80

000111e4 <lseek64@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3704]!	; 0xe78

000111f0 <__ctype_get_mb_cur_max@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3696]!	; 0xe70

000111fc <getcon@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3688]!	; 0xe68

00011208 <__fpending@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3680]!	; 0xe60

00011214 <ferror_unlocked@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3672]!	; 0xe58

00011220 <mbrtowc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3664]!	; 0xe50

0001122c <error@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3656]!	; 0xe48

00011238 <getenv@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3648]!	; 0xe40

00011244 <malloc@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3640]!	; 0xe38

00011250 <__libc_start_main@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3632]!	; 0xe30

0001125c <__freading@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3624]!	; 0xe28

00011268 <__gmon_start__@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3616]!	; 0xe20

00011274 <getopt_long@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3608]!	; 0xe18

00011280 <__ctype_b_loc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3600]!	; 0xe10

0001128c <exit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3592]!	; 0xe08

00011298 <strtoul@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3584]!	; 0xe00

000112a4 <strlen@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b0 <strchr@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112bc <__errno_location@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3560]!	; 0xde8

000112c8 <__cxa_atexit@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3552]!	; 0xde0

000112d4 <getgid@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e0 <getgrouplist@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112ec <memset@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f8 <__printf_chk@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3520]!	; 0xdc0

00011304 <fileno@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011310 <__fprintf_chk@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3504]!	; 0xdb0

0001131c <fclose@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3496]!	; 0xda8

00011328 <fseeko64@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3488]!	; 0xda0

00011334 <setlocale@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3480]!	; 0xd98

00011340 <endpwent@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3472]!	; 0xd90

0001134c <strrchr@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3464]!	; 0xd88

00011358 <nl_langinfo@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3456]!	; 0xd80

00011364 <getgroups@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3448]!	; 0xd78

00011370 <bindtextdomain@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3440]!	; 0xd70

0001137c <strncmp@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3432]!	; 0xd68

00011388 <abort@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3424]!	; 0xd60

00011394 <getgrgid@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3416]!	; 0xd58

000113a0 <getgrnam@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3408]!	; 0xd50

000113ac <putchar_unlocked@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3400]!	; 0xd48

000113b8 <__assert_fail@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113c4 <.text>:
   113c4:	mov	fp, #0
   113c8:	mov	lr, #0
   113cc:	pop	{r1}		; (ldr r1, [sp], #4)
   113d0:	mov	r2, sp
   113d4:	push	{r2}		; (str r2, [sp, #-4]!)
   113d8:	push	{r0}		; (str r0, [sp, #-4]!)
   113dc:	ldr	ip, [pc, #16]	; 113f4 <__assert_fail@plt+0x3c>
   113e0:	push	{ip}		; (str ip, [sp, #-4]!)
   113e4:	ldr	r0, [pc, #12]	; 113f8 <__assert_fail@plt+0x40>
   113e8:	ldr	r3, [pc, #12]	; 113fc <__assert_fail@plt+0x44>
   113ec:	bl	11250 <__libc_start_main@plt>
   113f0:	bl	11388 <abort@plt>
   113f4:	andeq	r6, r1, r8, lsl #4
   113f8:	andeq	r1, r1, ip, asr r7
   113fc:	andeq	r6, r1, r8, lsr #3
   11400:	ldr	r3, [pc, #20]	; 1141c <__assert_fail@plt+0x64>
   11404:	ldr	r2, [pc, #20]	; 11420 <__assert_fail@plt+0x68>
   11408:	add	r3, pc, r3
   1140c:	ldr	r2, [r3, r2]
   11410:	cmp	r2, #0
   11414:	bxeq	lr
   11418:	b	11268 <__gmon_start__@plt>
   1141c:	strdeq	r6, [r1], -r0
   11420:	andeq	r0, r0, r4, lsl #2
   11424:	ldr	r0, [pc, #24]	; 11444 <__assert_fail@plt+0x8c>
   11428:	ldr	r3, [pc, #24]	; 11448 <__assert_fail@plt+0x90>
   1142c:	cmp	r3, r0
   11430:	bxeq	lr
   11434:	ldr	r3, [pc, #16]	; 1144c <__assert_fail@plt+0x94>
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	bx	r3
   11444:	andeq	r8, r2, r0, ror #2
   11448:	andeq	r8, r2, r0, ror #2
   1144c:	andeq	r0, r0, r0
   11450:	ldr	r0, [pc, #36]	; 1147c <__assert_fail@plt+0xc4>
   11454:	ldr	r1, [pc, #36]	; 11480 <__assert_fail@plt+0xc8>
   11458:	sub	r1, r1, r0
   1145c:	asr	r1, r1, #2
   11460:	add	r1, r1, r1, lsr #31
   11464:	asrs	r1, r1, #1
   11468:	bxeq	lr
   1146c:	ldr	r3, [pc, #16]	; 11484 <__assert_fail@plt+0xcc>
   11470:	cmp	r3, #0
   11474:	bxeq	lr
   11478:	bx	r3
   1147c:	andeq	r8, r2, r0, ror #2
   11480:	andeq	r8, r2, r0, ror #2
   11484:	andeq	r0, r0, r0
   11488:	push	{r4, lr}
   1148c:	ldr	r4, [pc, #24]	; 114ac <__assert_fail@plt+0xf4>
   11490:	ldrb	r3, [r4]
   11494:	cmp	r3, #0
   11498:	popne	{r4, pc}
   1149c:	bl	11424 <__assert_fail@plt+0x6c>
   114a0:	mov	r3, #1
   114a4:	strb	r3, [r4]
   114a8:	pop	{r4, pc}
   114ac:	andeq	r8, r2, r8, ror r1
   114b0:	b	11450 <__assert_fail@plt+0x98>
   114b4:	push	{fp, lr}
   114b8:	mov	fp, sp
   114bc:	mov	r4, r0
   114c0:	cmp	r0, #0
   114c4:	bne	11594 <__assert_fail@plt+0x1dc>
   114c8:	movw	r1, #25179	; 0x625b
   114cc:	movt	r1, #1
   114d0:	mov	r0, #0
   114d4:	mov	r2, #5
   114d8:	bl	11190 <dcgettext@plt>
   114dc:	mov	r1, r0
   114e0:	movw	r0, #33252	; 0x81e4
   114e4:	movt	r0, #2
   114e8:	ldr	r2, [r0]
   114ec:	mov	r0, #1
   114f0:	bl	112f8 <__printf_chk@plt>
   114f4:	movw	r1, #25212	; 0x627c
   114f8:	movt	r1, #1
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	bl	11190 <dcgettext@plt>
   11508:	movw	r5, #33140	; 0x8174
   1150c:	movt	r5, #2
   11510:	ldr	r1, [r5]
   11514:	bl	110f4 <fputs_unlocked@plt>
   11518:	movw	r1, #25320	; 0x62e8
   1151c:	movt	r1, #1
   11520:	mov	r0, #0
   11524:	mov	r2, #5
   11528:	bl	11190 <dcgettext@plt>
   1152c:	ldr	r1, [r5]
   11530:	bl	110f4 <fputs_unlocked@plt>
   11534:	movw	r1, #25841	; 0x64f1
   11538:	movt	r1, #1
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	bl	11190 <dcgettext@plt>
   11548:	ldr	r1, [r5]
   1154c:	bl	110f4 <fputs_unlocked@plt>
   11550:	movw	r1, #25886	; 0x651e
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	bl	11190 <dcgettext@plt>
   11564:	ldr	r1, [r5]
   11568:	bl	110f4 <fputs_unlocked@plt>
   1156c:	movw	r1, #25940	; 0x6554
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	bl	11190 <dcgettext@plt>
   11580:	ldr	r1, [r5]
   11584:	bl	110f4 <fputs_unlocked@plt>
   11588:	bl	115d8 <__assert_fail@plt+0x220>
   1158c:	mov	r0, r4
   11590:	bl	1128c <exit@plt>
   11594:	movw	r0, #33136	; 0x8170
   11598:	movt	r0, #2
   1159c:	ldr	r5, [r0]
   115a0:	movw	r1, #25140	; 0x6234
   115a4:	movt	r1, #1
   115a8:	mov	r0, #0
   115ac:	mov	r2, #5
   115b0:	bl	11190 <dcgettext@plt>
   115b4:	mov	r2, r0
   115b8:	movw	r0, #33252	; 0x81e4
   115bc:	movt	r0, #2
   115c0:	ldr	r3, [r0]
   115c4:	mov	r0, r5
   115c8:	mov	r1, #1
   115cc:	bl	11310 <__fprintf_chk@plt>
   115d0:	mov	r0, r4
   115d4:	bl	1128c <exit@plt>
   115d8:	push	{r4, r5, fp, lr}
   115dc:	add	fp, sp, #8
   115e0:	sub	sp, sp, #56	; 0x38
   115e4:	movw	r0, #27160	; 0x6a18
   115e8:	movt	r0, #1
   115ec:	add	r1, r0, #32
   115f0:	mov	r5, sp
   115f4:	mov	r2, #48	; 0x30
   115f8:	vld1.64	{d16-d17}, [r1]
   115fc:	add	r1, r5, #32
   11600:	add	r3, r0, #16
   11604:	vld1.64	{d18-d19}, [r0], r2
   11608:	vld1.64	{d20-d21}, [r3]
   1160c:	vldr	d22, [r0]
   11610:	vst1.64	{d16-d17}, [r1]
   11614:	add	r0, r5, #16
   11618:	vst1.64	{d20-d21}, [r0]
   1161c:	mov	r0, r5
   11620:	vst1.64	{d18-d19}, [r0], r2
   11624:	vstr	d22, [r0]
   11628:	ldr	r1, [sp]
   1162c:	cmp	r1, #0
   11630:	beq	11658 <__assert_fail@plt+0x2a0>
   11634:	mov	r5, sp
   11638:	movw	r4, #26011	; 0x659b
   1163c:	movt	r4, #1
   11640:	mov	r0, r4
   11644:	bl	11124 <strcmp@plt>
   11648:	cmp	r0, #0
   1164c:	ldrne	r1, [r5, #8]!
   11650:	cmpne	r1, #0
   11654:	bne	11640 <__assert_fail@plt+0x288>
   11658:	ldr	r4, [r5, #4]
   1165c:	movw	r1, #26585	; 0x67d9
   11660:	movt	r1, #1
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	bl	11190 <dcgettext@plt>
   11670:	mov	r1, r0
   11674:	movw	r2, #26102	; 0x65f6
   11678:	movt	r2, #1
   1167c:	movw	r3, #26608	; 0x67f0
   11680:	movt	r3, #1
   11684:	mov	r0, #1
   11688:	bl	112f8 <__printf_chk@plt>
   1168c:	movw	r5, #26011	; 0x659b
   11690:	movt	r5, #1
   11694:	cmp	r4, #0
   11698:	moveq	r4, r5
   1169c:	mov	r0, #5
   116a0:	mov	r1, #0
   116a4:	bl	11334 <setlocale@plt>
   116a8:	cmp	r0, #0
   116ac:	beq	116ec <__assert_fail@plt+0x334>
   116b0:	movw	r1, #26648	; 0x6818
   116b4:	movt	r1, #1
   116b8:	mov	r2, #3
   116bc:	bl	1137c <strncmp@plt>
   116c0:	cmp	r0, #0
   116c4:	beq	116ec <__assert_fail@plt+0x334>
   116c8:	movw	r1, #26652	; 0x681c
   116cc:	movt	r1, #1
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	bl	11190 <dcgettext@plt>
   116dc:	movw	r1, #33140	; 0x8174
   116e0:	movt	r1, #2
   116e4:	ldr	r1, [r1]
   116e8:	bl	110f4 <fputs_unlocked@plt>
   116ec:	movw	r1, #26723	; 0x6863
   116f0:	movt	r1, #1
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	bl	11190 <dcgettext@plt>
   11700:	mov	r1, r0
   11704:	movw	r2, #26608	; 0x67f0
   11708:	movt	r2, #1
   1170c:	mov	r0, #1
   11710:	mov	r3, r5
   11714:	bl	112f8 <__printf_chk@plt>
   11718:	movw	r1, #26750	; 0x687e
   1171c:	movt	r1, #1
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	bl	11190 <dcgettext@plt>
   1172c:	mov	r1, r0
   11730:	movw	r0, #26518	; 0x6796
   11734:	movt	r0, #1
   11738:	movw	r3, #25319	; 0x62e7
   1173c:	movt	r3, #1
   11740:	cmp	r4, r5
   11744:	moveq	r3, r0
   11748:	mov	r0, #1
   1174c:	mov	r2, r4
   11750:	bl	112f8 <__printf_chk@plt>
   11754:	sub	sp, fp, #8
   11758:	pop	{r4, r5, fp, pc}
   1175c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11760:	add	fp, sp, #28
   11764:	sub	sp, sp, #20
   11768:	mov	r4, r1
   1176c:	mov	r6, r0
   11770:	bl	11118 <is_selinux_enabled@plt>
   11774:	str	r0, [sp, #16]
   11778:	ldr	r0, [r4]
   1177c:	bl	127dc <__assert_fail@plt+0x1424>
   11780:	movw	r1, #25319	; 0x62e7
   11784:	movt	r1, #1
   11788:	mov	r0, #6
   1178c:	bl	11334 <setlocale@plt>
   11790:	movw	r5, #26106	; 0x65fa
   11794:	movt	r5, #1
   11798:	movw	r1, #26014	; 0x659e
   1179c:	movt	r1, #1
   117a0:	mov	r0, r5
   117a4:	bl	11370 <bindtextdomain@plt>
   117a8:	mov	r0, r5
   117ac:	bl	111a8 <textdomain@plt>
   117b0:	movw	r0, #9840	; 0x2670
   117b4:	movt	r0, #1
   117b8:	bl	1620c <__assert_fail@plt+0x4e54>
   117bc:	mov	r9, #0
   117c0:	movw	r7, #26038	; 0x65b6
   117c4:	movt	r7, #1
   117c8:	movw	r5, #27000	; 0x6978
   117cc:	movt	r5, #1
   117d0:	movw	sl, #33149	; 0x817d
   117d4:	movt	sl, #2
   117d8:	mov	r8, #1
   117dc:	b	117e4 <__assert_fail@plt+0x42c>
   117e0:	strb	r8, [r0]
   117e4:	str	r9, [sp]
   117e8:	mov	r0, r6
   117ec:	mov	r1, r4
   117f0:	mov	r2, r7
   117f4:	mov	r3, r5
   117f8:	bl	11274 <getopt_long@plt>
   117fc:	cmp	r0, #70	; 0x46
   11800:	ble	11950 <__assert_fail@plt+0x598>
   11804:	sub	r1, r0, #71	; 0x47
   11808:	cmp	r1, #51	; 0x33
   1180c:	bhi	11dd0 <__assert_fail@plt+0xa18>
   11810:	add	r2, pc, #4
   11814:	mov	r0, sl
   11818:	ldr	pc, [r2, r1, lsl #2]
   1181c:	andeq	r1, r1, ip, ror #17
   11820:	ldrdeq	r1, [r1], -r0
   11824:	ldrdeq	r1, [r1], -r0
   11828:	ldrdeq	r1, [r1], -r0
   1182c:	ldrdeq	r1, [r1], -r0
   11830:	ldrdeq	r1, [r1], -r0
   11834:	ldrdeq	r1, [r1], -r0
   11838:	ldrdeq	r1, [r1], -r0
   1183c:	ldrdeq	r1, [r1], -r0
   11840:	ldrdeq	r1, [r1], -r0
   11844:	ldrdeq	r1, [r1], -r0
   11848:	ldrdeq	r1, [r1], -r0
   1184c:	ldrdeq	r1, [r1], -r0
   11850:	ldrdeq	r1, [r1], -r0
   11854:	ldrdeq	r1, [r1], -r0
   11858:	ldrdeq	r1, [r1], -r0
   1185c:	ldrdeq	r1, [r1], -r0
   11860:	ldrdeq	r1, [r1], -r0
   11864:	ldrdeq	r1, [r1], -r0
   11868:	andeq	r1, r1, r8, lsl #18
   1186c:	ldrdeq	r1, [r1], -r0
   11870:	ldrdeq	r1, [r1], -r0
   11874:	ldrdeq	r1, [r1], -r0
   11878:	ldrdeq	r1, [r1], -r0
   1187c:	ldrdeq	r1, [r1], -r0
   11880:	ldrdeq	r1, [r1], -r0
   11884:	andeq	r1, r1, r4, ror #15
   11888:	ldrdeq	r1, [r1], -r0
   1188c:	ldrdeq	r1, [r1], -r0
   11890:	ldrdeq	r1, [r1], -r0
   11894:	ldrdeq	r1, [r1], -r0
   11898:	ldrdeq	r1, [r1], -r0
   1189c:	andeq	r1, r1, r0, ror #15
   118a0:	ldrdeq	r1, [r1], -r0
   118a4:	ldrdeq	r1, [r1], -r0
   118a8:	ldrdeq	r1, [r1], -r0
   118ac:	ldrdeq	r1, [r1], -r0
   118b0:	ldrdeq	r1, [r1], -r0
   118b4:	ldrdeq	r1, [r1], -r0
   118b8:	strdeq	r1, [r1], -ip
   118bc:	ldrdeq	r1, [r1], -r0
   118c0:	ldrdeq	r1, [r1], -r0
   118c4:	ldrdeq	r1, [r1], -r0
   118c8:	andeq	r1, r1, r0, asr #18
   118cc:	ldrdeq	r1, [r1], -r0
   118d0:	ldrdeq	r1, [r1], -r0
   118d4:	andeq	r1, r1, r0, lsr #18
   118d8:	ldrdeq	r1, [r1], -r0
   118dc:	ldrdeq	r1, [r1], -r0
   118e0:	ldrdeq	r1, [r1], -r0
   118e4:	ldrdeq	r1, [r1], -r0
   118e8:	andeq	r1, r1, r0, lsr r9
   118ec:	movw	r0, #33154	; 0x8182
   118f0:	movt	r0, #2
   118f4:	strb	r8, [r0]
   118f8:	b	117e4 <__assert_fail@plt+0x42c>
   118fc:	movw	r0, #33150	; 0x817e
   11900:	movt	r0, #2
   11904:	b	117e0 <__assert_fail@plt+0x428>
   11908:	ldr	r0, [sp, #16]
   1190c:	cmp	r0, #0
   11910:	movw	r0, #33148	; 0x817c
   11914:	movt	r0, #2
   11918:	bgt	117e0 <__assert_fail@plt+0x428>
   1191c:	b	11dd8 <__assert_fail@plt+0xa20>
   11920:	movw	r0, #33152	; 0x8180
   11924:	movt	r0, #2
   11928:	strb	r8, [r0]
   1192c:	b	117e4 <__assert_fail@plt+0x42c>
   11930:	movw	r0, #33153	; 0x8181
   11934:	movt	r0, #2
   11938:	strb	r8, [r0]
   1193c:	b	117e4 <__assert_fail@plt+0x42c>
   11940:	movw	r0, #33151	; 0x817f
   11944:	movt	r0, #2
   11948:	strb	r8, [r0]
   1194c:	b	117e4 <__assert_fail@plt+0x42c>
   11950:	cmn	r0, #1
   11954:	bne	11d64 <__assert_fail@plt+0x9ac>
   11958:	movw	sl, #33128	; 0x8168
   1195c:	movt	sl, #2
   11960:	ldr	r0, [sl]
   11964:	subs	r0, r6, r0
   11968:	beq	11980 <__assert_fail@plt+0x5c8>
   1196c:	movw	r1, #33148	; 0x817c
   11970:	movt	r1, #2
   11974:	ldrb	r1, [r1]
   11978:	cmp	r1, #1
   1197c:	beq	11dfc <__assert_fail@plt+0xa44>
   11980:	movw	r8, #33152	; 0x8180
   11984:	movt	r8, #2
   11988:	ldrb	r2, [r8]
   1198c:	movw	r9, #33149	; 0x817d
   11990:	movt	r9, #2
   11994:	ldrb	r3, [r9]
   11998:	add	r1, r3, r2
   1199c:	movw	r5, #33154	; 0x8182
   119a0:	movt	r5, #2
   119a4:	ldrb	r6, [r5]
   119a8:	add	r7, r1, r6
   119ac:	movw	ip, #33148	; 0x817c
   119b0:	movt	ip, #2
   119b4:	ldrb	r1, [ip]
   119b8:	add	r7, r7, r1
   119bc:	cmp	r7, #2
   119c0:	bcs	11de4 <__assert_fail@plt+0xa2c>
   119c4:	orr	r7, r6, r1
   119c8:	orr	r2, r2, r3
   119cc:	orrs	r2, r2, r7
   119d0:	bne	11a10 <__assert_fail@plt+0x658>
   119d4:	movw	r3, #33151	; 0x817f
   119d8:	movt	r3, #2
   119dc:	ldrb	r3, [r3]
   119e0:	cmp	r3, #0
   119e4:	bne	11df0 <__assert_fail@plt+0xa38>
   119e8:	movw	r3, #33150	; 0x817e
   119ec:	movt	r3, #2
   119f0:	ldrb	r3, [r3]
   119f4:	cmp	r3, #1
   119f8:	beq	11df0 <__assert_fail@plt+0xa38>
   119fc:	movw	r3, #33153	; 0x8181
   11a00:	movt	r3, #2
   11a04:	ldrb	r3, [r3]
   11a08:	cmp	r3, #1
   11a0c:	beq	11e08 <__assert_fail@plt+0xa50>
   11a10:	cmp	r0, #0
   11a14:	beq	11b40 <__assert_fail@plt+0x788>
   11a18:	subs	r1, r0, #1
   11a1c:	movwne	r1, #1
   11a20:	movw	r2, #33160	; 0x8188
   11a24:	movt	r2, #2
   11a28:	strb	r1, [r2]
   11a2c:	ldr	r1, [sl]
   11a30:	add	r6, r1, r0
   11a34:	cmp	r1, r6
   11a38:	bcs	11d3c <__assert_fail@plt+0x984>
   11a3c:	mov	r8, #0
   11a40:	movw	r9, #33164	; 0x818c
   11a44:	movt	r9, #2
   11a48:	b	11ab0 <__assert_fail@plt+0x6f8>
   11a4c:	ldr	r0, [r9]
   11a50:	bl	11130 <getpwuid@plt>
   11a54:	cmp	r0, #0
   11a58:	beq	11adc <__assert_fail@plt+0x724>
   11a5c:	mov	r7, r0
   11a60:	ldr	r0, [r0]
   11a64:	bl	1502c <__assert_fail@plt+0x3c74>
   11a68:	mov	r5, r0
   11a6c:	ldr	r0, [r7, #8]
   11a70:	ldr	r1, [r7, #12]
   11a74:	movw	r2, #33168	; 0x8190
   11a78:	movt	r2, #2
   11a7c:	str	r0, [r2]
   11a80:	str	r0, [r9]
   11a84:	movw	r0, #33176	; 0x8198
   11a88:	movt	r0, #2
   11a8c:	str	r1, [r0]
   11a90:	movw	r0, #33172	; 0x8194
   11a94:	movt	r0, #2
   11a98:	str	r1, [r0]
   11a9c:	mov	r0, r5
   11aa0:	bl	11e8c <__assert_fail@plt+0xad4>
   11aa4:	mov	r0, r5
   11aa8:	bl	12758 <__assert_fail@plt+0x13a0>
   11aac:	b	11b28 <__assert_fail@plt+0x770>
   11ab0:	ldr	r0, [r4, r1, lsl #2]
   11ab4:	ldrb	r1, [r0]
   11ab8:	cmp	r1, #0
   11abc:	beq	11adc <__assert_fail@plt+0x724>
   11ac0:	str	r8, [sp]
   11ac4:	mov	r1, r9
   11ac8:	mov	r2, #0
   11acc:	mov	r3, #0
   11ad0:	bl	14428 <__assert_fail@plt+0x3070>
   11ad4:	cmp	r0, #0
   11ad8:	beq	11a4c <__assert_fail@plt+0x694>
   11adc:	bl	112bc <__errno_location@plt>
   11ae0:	ldr	r7, [r0]
   11ae4:	mov	r0, #0
   11ae8:	movw	r1, #26383	; 0x670f
   11aec:	movt	r1, #1
   11af0:	mov	r2, #5
   11af4:	bl	11190 <dcgettext@plt>
   11af8:	mov	r5, r0
   11afc:	ldr	r0, [sl]
   11b00:	ldr	r0, [r4, r0, lsl #2]
   11b04:	bl	14014 <__assert_fail@plt+0x2c5c>
   11b08:	mov	r3, r0
   11b0c:	mov	r0, #0
   11b10:	mov	r1, r7
   11b14:	mov	r2, r5
   11b18:	bl	1122c <error@plt>
   11b1c:	movw	r0, #33040	; 0x8110
   11b20:	movt	r0, #2
   11b24:	strb	r8, [r0]
   11b28:	ldr	r0, [sl]
   11b2c:	add	r1, r0, #1
   11b30:	str	r1, [sl]
   11b34:	cmp	r1, r6
   11b38:	bcc	11ab0 <__assert_fail@plt+0x6f8>
   11b3c:	b	11d3c <__assert_fail@plt+0x984>
   11b40:	cmp	r1, #0
   11b44:	mov	r6, ip
   11b48:	mov	r7, r5
   11b4c:	bne	11b74 <__assert_fail@plt+0x7bc>
   11b50:	cmp	r2, #0
   11b54:	bne	11ba8 <__assert_fail@plt+0x7f0>
   11b58:	movw	r0, #26341	; 0x66e5
   11b5c:	movt	r0, #1
   11b60:	bl	11238 <getenv@plt>
   11b64:	mov	r5, r7
   11b68:	mov	ip, r6
   11b6c:	cmp	r0, #0
   11b70:	bne	11ba8 <__assert_fail@plt+0x7f0>
   11b74:	ldr	r0, [sp, #16]
   11b78:	cmp	r0, #1
   11b7c:	blt	11ba8 <__assert_fail@plt+0x7f0>
   11b80:	movw	r0, #33156	; 0x8184
   11b84:	movt	r0, #2
   11b88:	bl	111fc <getcon@plt>
   11b8c:	mov	r5, r7
   11b90:	mov	ip, r6
   11b94:	cmp	r0, #0
   11b98:	beq	11ba8 <__assert_fail@plt+0x7f0>
   11b9c:	ldrb	r0, [ip]
   11ba0:	cmp	r0, #1
   11ba4:	beq	11e2c <__assert_fail@plt+0xa74>
   11ba8:	ldrb	r0, [r8]
   11bac:	cmp	r0, #1
   11bb0:	bne	11c10 <__assert_fail@plt+0x858>
   11bb4:	movw	r0, #33151	; 0x817f
   11bb8:	movt	r0, #2
   11bbc:	ldrb	r0, [r0]
   11bc0:	cmp	r0, #0
   11bc4:	bne	11c7c <__assert_fail@plt+0x8c4>
   11bc8:	bl	112bc <__errno_location@plt>
   11bcc:	mov	r4, r0
   11bd0:	mov	r0, #0
   11bd4:	str	r0, [r4]
   11bd8:	bl	111b4 <geteuid@plt>
   11bdc:	mov	r5, r7
   11be0:	mov	ip, r6
   11be4:	movw	r1, #33164	; 0x818c
   11be8:	movt	r1, #2
   11bec:	str	r0, [r1]
   11bf0:	cmn	r0, #1
   11bf4:	bne	11c34 <__assert_fail@plt+0x87c>
   11bf8:	ldr	r4, [r4]
   11bfc:	cmp	r4, #0
   11c00:	beq	11c34 <__assert_fail@plt+0x87c>
   11c04:	movw	r1, #26400	; 0x6720
   11c08:	movt	r1, #1
   11c0c:	b	11e70 <__assert_fail@plt+0xab8>
   11c10:	ldrb	r0, [r9]
   11c14:	cmp	r0, #0
   11c18:	bne	11cd8 <__assert_fail@plt+0x920>
   11c1c:	ldrb	r0, [r5]
   11c20:	cmp	r0, #0
   11c24:	bne	11c7c <__assert_fail@plt+0x8c4>
   11c28:	ldrb	r0, [ip]
   11c2c:	cmp	r0, #0
   11c30:	beq	11bc8 <__assert_fail@plt+0x810>
   11c34:	ldrb	r0, [r8]
   11c38:	cmp	r0, #1
   11c3c:	bne	11c58 <__assert_fail@plt+0x8a0>
   11c40:	movw	r0, #33151	; 0x817f
   11c44:	movt	r0, #2
   11c48:	ldrb	r0, [r0]
   11c4c:	cmp	r0, #0
   11c50:	bne	11c7c <__assert_fail@plt+0x8c4>
   11c54:	b	11d34 <__assert_fail@plt+0x97c>
   11c58:	ldrb	r0, [r9]
   11c5c:	cmp	r0, #0
   11c60:	bne	11cd8 <__assert_fail@plt+0x920>
   11c64:	ldrb	r0, [r5]
   11c68:	cmp	r0, #0
   11c6c:	bne	11c7c <__assert_fail@plt+0x8c4>
   11c70:	ldrb	r0, [ip]
   11c74:	cmp	r0, #0
   11c78:	bne	11cb8 <__assert_fail@plt+0x900>
   11c7c:	bl	112bc <__errno_location@plt>
   11c80:	mov	r4, r0
   11c84:	mov	r0, #0
   11c88:	str	r0, [r4]
   11c8c:	bl	11148 <getuid@plt>
   11c90:	mov	r5, r7
   11c94:	mov	ip, r6
   11c98:	movw	r1, #33168	; 0x8190
   11c9c:	movt	r1, #2
   11ca0:	str	r0, [r1]
   11ca4:	cmn	r0, #1
   11ca8:	bne	11cb8 <__assert_fail@plt+0x900>
   11cac:	ldr	r4, [r4]
   11cb0:	cmp	r4, #0
   11cb4:	bne	11e68 <__assert_fail@plt+0xab0>
   11cb8:	ldrb	r0, [r8]
   11cbc:	cmp	r0, #0
   11cc0:	bne	11d34 <__assert_fail@plt+0x97c>
   11cc4:	ldrb	r0, [r9]
   11cc8:	cmp	r0, #0
   11ccc:	ldrbeq	r0, [r5]
   11cd0:	cmpeq	r0, #0
   11cd4:	beq	11d54 <__assert_fail@plt+0x99c>
   11cd8:	bl	112bc <__errno_location@plt>
   11cdc:	mov	r4, r0
   11ce0:	mov	r6, #0
   11ce4:	str	r6, [r0]
   11ce8:	bl	111cc <getegid@plt>
   11cec:	movw	r1, #33172	; 0x8194
   11cf0:	movt	r1, #2
   11cf4:	str	r0, [r1]
   11cf8:	cmn	r0, #1
   11cfc:	bne	11d0c <__assert_fail@plt+0x954>
   11d00:	ldr	r5, [r4]
   11d04:	cmp	r5, #0
   11d08:	bne	11e38 <__assert_fail@plt+0xa80>
   11d0c:	str	r6, [r4]
   11d10:	bl	112d4 <getgid@plt>
   11d14:	movw	r1, #33176	; 0x8198
   11d18:	movt	r1, #2
   11d1c:	str	r0, [r1]
   11d20:	cmn	r0, #1
   11d24:	bne	11d34 <__assert_fail@plt+0x97c>
   11d28:	ldr	r4, [r4]
   11d2c:	cmp	r4, #0
   11d30:	bne	11e5c <__assert_fail@plt+0xaa4>
   11d34:	mov	r0, #0
   11d38:	bl	11e8c <__assert_fail@plt+0xad4>
   11d3c:	movw	r0, #33040	; 0x8110
   11d40:	movt	r0, #2
   11d44:	ldrb	r0, [r0]
   11d48:	eor	r0, r0, #1
   11d4c:	sub	sp, fp, #28
   11d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d54:	ldrb	r0, [ip]
   11d58:	cmp	r0, #0
   11d5c:	beq	11cd8 <__assert_fail@plt+0x920>
   11d60:	b	11d34 <__assert_fail@plt+0x97c>
   11d64:	cmn	r0, #3
   11d68:	bne	11dc0 <__assert_fail@plt+0xa08>
   11d6c:	movw	r0, #33044	; 0x8114
   11d70:	movt	r0, #2
   11d74:	ldr	r3, [r0]
   11d78:	movw	r0, #33140	; 0x8174
   11d7c:	movt	r0, #2
   11d80:	ldr	r0, [r0]
   11d84:	mov	r1, #0
   11d88:	movw	r2, #26131	; 0x6613
   11d8c:	movt	r2, #1
   11d90:	movw	r7, #26116	; 0x6604
   11d94:	movt	r7, #1
   11d98:	str	r7, [sp]
   11d9c:	str	r2, [sp, #4]
   11da0:	str	r1, [sp, #8]
   11da4:	movw	r1, #26011	; 0x659b
   11da8:	movt	r1, #1
   11dac:	movw	r2, #26102	; 0x65f6
   11db0:	movt	r2, #1
   11db4:	bl	14b94 <__assert_fail@plt+0x37dc>
   11db8:	mov	r0, #0
   11dbc:	bl	1128c <exit@plt>
   11dc0:	cmn	r0, #2
   11dc4:	bne	11dd0 <__assert_fail@plt+0xa18>
   11dc8:	mov	r0, #0
   11dcc:	bl	114b4 <__assert_fail@plt+0xfc>
   11dd0:	mov	r0, #1
   11dd4:	bl	114b4 <__assert_fail@plt+0xfc>
   11dd8:	movw	r1, #26047	; 0x65bf
   11ddc:	movt	r1, #1
   11de0:	b	11e10 <__assert_fail@plt+0xa58>
   11de4:	movw	r1, #26197	; 0x6655
   11de8:	movt	r1, #1
   11dec:	b	11e10 <__assert_fail@plt+0xa58>
   11df0:	movw	r1, #26241	; 0x6681
   11df4:	movt	r1, #1
   11df8:	b	11e10 <__assert_fail@plt+0xa58>
   11dfc:	movw	r1, #26147	; 0x6623
   11e00:	movt	r1, #1
   11e04:	b	11e10 <__assert_fail@plt+0xa58>
   11e08:	movw	r1, #26295	; 0x66b7
   11e0c:	movt	r1, #1
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	bl	11190 <dcgettext@plt>
   11e1c:	mov	r2, r0
   11e20:	mov	r0, #1
   11e24:	mov	r1, #0
   11e28:	bl	1122c <error@plt>
   11e2c:	movw	r1, #26357	; 0x66f5
   11e30:	movt	r1, #1
   11e34:	b	11e10 <__assert_fail@plt+0xa58>
   11e38:	movw	r1, #26445	; 0x674d
   11e3c:	movt	r1, #1
   11e40:	mov	r0, #0
   11e44:	mov	r2, #5
   11e48:	bl	11190 <dcgettext@plt>
   11e4c:	mov	r2, r0
   11e50:	mov	r0, #1
   11e54:	mov	r1, r5
   11e58:	bl	1122c <error@plt>
   11e5c:	movw	r1, #26470	; 0x6766
   11e60:	movt	r1, #1
   11e64:	b	11e70 <__assert_fail@plt+0xab8>
   11e68:	movw	r1, #26425	; 0x6739
   11e6c:	movt	r1, #1
   11e70:	mov	r0, #0
   11e74:	mov	r2, #5
   11e78:	bl	11190 <dcgettext@plt>
   11e7c:	mov	r2, r0
   11e80:	mov	r0, #1
   11e84:	mov	r1, r4
   11e88:	bl	1122c <error@plt>
   11e8c:	push	{r4, sl, fp, lr}
   11e90:	add	fp, sp, #8
   11e94:	sub	sp, sp, #8
   11e98:	movw	r1, #33152	; 0x8180
   11e9c:	movt	r1, #2
   11ea0:	ldrb	r1, [r1]
   11ea4:	cmp	r1, #1
   11ea8:	bne	11edc <__assert_fail@plt+0xb24>
   11eac:	movw	r0, #33151	; 0x817f
   11eb0:	movt	r0, #2
   11eb4:	ldrb	r0, [r0]
   11eb8:	movw	r1, #33168	; 0x8190
   11ebc:	movt	r1, #2
   11ec0:	movw	r2, #33164	; 0x818c
   11ec4:	movt	r2, #2
   11ec8:	cmp	r0, #0
   11ecc:	movne	r2, r1
   11ed0:	ldr	r0, [r2]
   11ed4:	bl	12044 <__assert_fail@plt+0xc8c>
   11ed8:	b	11fa8 <__assert_fail@plt+0xbf0>
   11edc:	movw	r1, #33149	; 0x817d
   11ee0:	movt	r1, #2
   11ee4:	ldrb	r1, [r1]
   11ee8:	cmp	r1, #1
   11eec:	bne	11f2c <__assert_fail@plt+0xb74>
   11ef0:	movw	r0, #33151	; 0x817f
   11ef4:	movt	r0, #2
   11ef8:	ldrb	r0, [r0]
   11efc:	movw	r1, #33176	; 0x8198
   11f00:	movt	r1, #2
   11f04:	movw	r2, #33172	; 0x8194
   11f08:	movt	r2, #2
   11f0c:	cmp	r0, #0
   11f10:	movne	r2, r1
   11f14:	ldr	r0, [r2]
   11f18:	movw	r1, #33150	; 0x817e
   11f1c:	movt	r1, #2
   11f20:	ldrb	r1, [r1]
   11f24:	bl	125b4 <__assert_fail@plt+0x11fc>
   11f28:	b	11f94 <__assert_fail@plt+0xbdc>
   11f2c:	movw	r1, #33154	; 0x8182
   11f30:	movt	r1, #2
   11f34:	ldrb	r1, [r1]
   11f38:	cmp	r1, #1
   11f3c:	bne	12008 <__assert_fail@plt+0xc50>
   11f40:	movw	r1, #33172	; 0x8194
   11f44:	movt	r1, #2
   11f48:	ldr	r3, [r1]
   11f4c:	movw	r1, #33176	; 0x8198
   11f50:	movt	r1, #2
   11f54:	ldr	r2, [r1]
   11f58:	movw	r1, #33168	; 0x8190
   11f5c:	movt	r1, #2
   11f60:	ldr	r1, [r1]
   11f64:	movw	ip, #33153	; 0x8181
   11f68:	movt	ip, #2
   11f6c:	ldrb	ip, [ip]
   11f70:	movw	lr, #33150	; 0x817e
   11f74:	movt	lr, #2
   11f78:	ldrb	lr, [lr]
   11f7c:	mov	r4, #32
   11f80:	cmp	ip, #0
   11f84:	movwne	r4, #0
   11f88:	str	lr, [sp]
   11f8c:	str	r4, [sp, #4]
   11f90:	bl	12448 <__assert_fail@plt+0x1090>
   11f94:	movw	r1, #33040	; 0x8110
   11f98:	movt	r1, #2
   11f9c:	ldrb	r2, [r1]
   11fa0:	and	r0, r2, r0
   11fa4:	strb	r0, [r1]
   11fa8:	movw	r0, #33153	; 0x8181
   11fac:	movt	r0, #2
   11fb0:	ldrb	r1, [r0]
   11fb4:	cmp	r1, #1
   11fb8:	bne	11fe0 <__assert_fail@plt+0xc28>
   11fbc:	movw	r0, #33160	; 0x8188
   11fc0:	movt	r0, #2
   11fc4:	ldrb	r0, [r0]
   11fc8:	cmp	r0, #0
   11fcc:	movwne	r0, #33154	; 0x8182
   11fd0:	movtne	r0, #2
   11fd4:	ldrbne	r0, [r0]
   11fd8:	cmpne	r0, #0
   11fdc:	bne	11ff8 <__assert_fail@plt+0xc40>
   11fe0:	mov	r0, #10
   11fe4:	cmp	r1, #0
   11fe8:	movwne	r0, #0
   11fec:	sub	sp, fp, #8
   11ff0:	pop	{r4, sl, fp, lr}
   11ff4:	b	113ac <putchar_unlocked@plt>
   11ff8:	mov	r0, #0
   11ffc:	bl	113ac <putchar_unlocked@plt>
   12000:	mov	r0, #0
   12004:	b	11fec <__assert_fail@plt+0xc34>
   12008:	movw	r1, #33148	; 0x817c
   1200c:	movt	r1, #2
   12010:	ldrb	r1, [r1]
   12014:	cmp	r1, #1
   12018:	bne	1203c <__assert_fail@plt+0xc84>
   1201c:	movw	r0, #33140	; 0x8174
   12020:	movt	r0, #2
   12024:	ldr	r1, [r0]
   12028:	movw	r0, #33156	; 0x8184
   1202c:	movt	r0, #2
   12030:	ldr	r0, [r0]
   12034:	bl	110f4 <fputs_unlocked@plt>
   12038:	b	11fa8 <__assert_fail@plt+0xbf0>
   1203c:	bl	120e0 <__assert_fail@plt+0xd28>
   12040:	b	11fa8 <__assert_fail@plt+0xbf0>
   12044:	push	{r4, r5, fp, lr}
   12048:	add	fp, sp, #8
   1204c:	sub	sp, sp, #8
   12050:	str	r0, [sp, #4]
   12054:	movw	r1, #33150	; 0x817e
   12058:	movt	r1, #2
   1205c:	ldrb	r1, [r1]
   12060:	cmp	r1, #1
   12064:	bne	120c0 <__assert_fail@plt+0xd08>
   12068:	bl	11130 <getpwuid@plt>
   1206c:	cmp	r0, #0
   12070:	beq	1207c <__assert_fail@plt+0xcc4>
   12074:	ldr	r0, [r0]
   12078:	b	120c8 <__assert_fail@plt+0xd10>
   1207c:	mov	r5, #0
   12080:	movw	r1, #26836	; 0x68d4
   12084:	movt	r1, #1
   12088:	mov	r0, #0
   1208c:	mov	r2, #5
   12090:	bl	11190 <dcgettext@plt>
   12094:	mov	r4, r0
   12098:	add	r0, sp, #4
   1209c:	bl	12420 <__assert_fail@plt+0x1068>
   120a0:	mov	r3, r0
   120a4:	mov	r0, #0
   120a8:	mov	r1, #0
   120ac:	mov	r2, r4
   120b0:	bl	1122c <error@plt>
   120b4:	movw	r0, #33040	; 0x8110
   120b8:	movt	r0, #2
   120bc:	strb	r5, [r0]
   120c0:	add	r0, sp, #4
   120c4:	bl	12420 <__assert_fail@plt+0x1068>
   120c8:	movw	r1, #33140	; 0x8174
   120cc:	movt	r1, #2
   120d0:	ldr	r1, [r1]
   120d4:	sub	sp, fp, #8
   120d8:	pop	{r4, r5, fp, lr}
   120dc:	b	110f4 <fputs_unlocked@plt>
   120e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   120e4:	add	fp, sp, #24
   120e8:	sub	sp, sp, #8
   120ec:	mov	r8, r0
   120f0:	movw	r1, #26883	; 0x6903
   120f4:	movt	r1, #1
   120f8:	mov	r0, #0
   120fc:	mov	r2, #5
   12100:	bl	11190 <dcgettext@plt>
   12104:	mov	r5, r0
   12108:	movw	r7, #33168	; 0x8190
   1210c:	movt	r7, #2
   12110:	mov	r0, r7
   12114:	bl	12420 <__assert_fail@plt+0x1068>
   12118:	mov	r2, r0
   1211c:	mov	r0, #1
   12120:	mov	r1, r5
   12124:	bl	112f8 <__printf_chk@plt>
   12128:	ldr	r0, [r7]
   1212c:	bl	11130 <getpwuid@plt>
   12130:	mov	r5, r0
   12134:	cmp	r0, #0
   12138:	beq	12150 <__assert_fail@plt+0xd98>
   1213c:	ldr	r2, [r5]
   12140:	movw	r1, #26868	; 0x68f4
   12144:	movt	r1, #1
   12148:	mov	r0, #1
   1214c:	bl	112f8 <__printf_chk@plt>
   12150:	movw	r1, #26873	; 0x68f9
   12154:	movt	r1, #1
   12158:	mov	r0, #0
   1215c:	mov	r2, #5
   12160:	bl	11190 <dcgettext@plt>
   12164:	mov	r4, r0
   12168:	movw	r6, #33176	; 0x8198
   1216c:	movt	r6, #2
   12170:	mov	r0, r6
   12174:	bl	12434 <__assert_fail@plt+0x107c>
   12178:	mov	r2, r0
   1217c:	mov	r0, #1
   12180:	mov	r1, r4
   12184:	bl	112f8 <__printf_chk@plt>
   12188:	ldr	r0, [r6]
   1218c:	bl	11394 <getgrgid@plt>
   12190:	cmp	r0, #0
   12194:	beq	121ac <__assert_fail@plt+0xdf4>
   12198:	ldr	r2, [r0]
   1219c:	movw	r1, #26868	; 0x68f4
   121a0:	movt	r1, #1
   121a4:	mov	r0, #1
   121a8:	bl	112f8 <__printf_chk@plt>
   121ac:	ldr	r0, [r7]
   121b0:	movw	r7, #33164	; 0x818c
   121b4:	movt	r7, #2
   121b8:	ldr	r1, [r7]
   121bc:	cmp	r1, r0
   121c0:	beq	12224 <__assert_fail@plt+0xe6c>
   121c4:	mov	r5, #0
   121c8:	movw	r1, #26881	; 0x6901
   121cc:	movt	r1, #1
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	bl	11190 <dcgettext@plt>
   121dc:	mov	r4, r0
   121e0:	mov	r0, r7
   121e4:	bl	12420 <__assert_fail@plt+0x1068>
   121e8:	mov	r2, r0
   121ec:	mov	r0, #1
   121f0:	mov	r1, r4
   121f4:	bl	112f8 <__printf_chk@plt>
   121f8:	ldr	r0, [r7]
   121fc:	bl	11130 <getpwuid@plt>
   12200:	cmp	r0, #0
   12204:	beq	12224 <__assert_fail@plt+0xe6c>
   12208:	mov	r7, r0
   1220c:	ldr	r2, [r0]
   12210:	movw	r1, #26868	; 0x68f4
   12214:	movt	r1, #1
   12218:	mov	r0, #1
   1221c:	bl	112f8 <__printf_chk@plt>
   12220:	mov	r5, r7
   12224:	ldr	r0, [r6]
   12228:	movw	r6, #33172	; 0x8194
   1222c:	movt	r6, #2
   12230:	ldr	r1, [r6]
   12234:	cmp	r1, r0
   12238:	beq	12290 <__assert_fail@plt+0xed8>
   1223c:	movw	r1, #26890	; 0x690a
   12240:	movt	r1, #1
   12244:	mov	r0, #0
   12248:	mov	r2, #5
   1224c:	bl	11190 <dcgettext@plt>
   12250:	mov	r4, r0
   12254:	mov	r0, r6
   12258:	bl	12434 <__assert_fail@plt+0x107c>
   1225c:	mov	r2, r0
   12260:	mov	r0, #1
   12264:	mov	r1, r4
   12268:	bl	112f8 <__printf_chk@plt>
   1226c:	ldr	r0, [r6]
   12270:	bl	11394 <getgrgid@plt>
   12274:	cmp	r0, #0
   12278:	beq	12290 <__assert_fail@plt+0xed8>
   1227c:	ldr	r2, [r0]
   12280:	movw	r1, #26868	; 0x68f4
   12284:	movt	r1, #1
   12288:	mov	r0, #1
   1228c:	bl	112f8 <__printf_chk@plt>
   12290:	cmp	r8, #0
   12294:	beq	122a4 <__assert_fail@plt+0xeec>
   12298:	cmp	r5, #0
   1229c:	beq	122ac <__assert_fail@plt+0xef4>
   122a0:	add	r6, r5, #12
   122a4:	ldr	r1, [r6]
   122a8:	b	122b0 <__assert_fail@plt+0xef8>
   122ac:	mvn	r1, #0
   122b0:	add	r2, sp, #4
   122b4:	mov	r0, r8
   122b8:	bl	15090 <__assert_fail@plt+0x3cd8>
   122bc:	cmn	r0, #1
   122c0:	ble	1239c <__assert_fail@plt+0xfe4>
   122c4:	mov	r5, r0
   122c8:	cmp	r0, #0
   122cc:	beq	12354 <__assert_fail@plt+0xf9c>
   122d0:	mov	r6, #0
   122d4:	movw	r1, #26977	; 0x6961
   122d8:	movt	r1, #1
   122dc:	mov	r0, #0
   122e0:	mov	r2, #5
   122e4:	bl	11190 <dcgettext@plt>
   122e8:	movw	r7, #33140	; 0x8174
   122ec:	movt	r7, #2
   122f0:	ldr	r1, [r7]
   122f4:	bl	110f4 <fputs_unlocked@plt>
   122f8:	movw	r4, #26868	; 0x68f4
   122fc:	movt	r4, #1
   12300:	cmp	r6, #0
   12304:	beq	12310 <__assert_fail@plt+0xf58>
   12308:	mov	r0, #44	; 0x2c
   1230c:	bl	113ac <putchar_unlocked@plt>
   12310:	ldr	r0, [sp, #4]
   12314:	add	r0, r0, r6
   12318:	bl	12434 <__assert_fail@plt+0x107c>
   1231c:	ldr	r1, [r7]
   12320:	bl	110f4 <fputs_unlocked@plt>
   12324:	ldr	r0, [sp, #4]
   12328:	ldr	r0, [r0, r6]
   1232c:	bl	11394 <getgrgid@plt>
   12330:	cmp	r0, #0
   12334:	beq	12348 <__assert_fail@plt+0xf90>
   12338:	ldr	r2, [r0]
   1233c:	mov	r0, #1
   12340:	mov	r1, r4
   12344:	bl	112f8 <__printf_chk@plt>
   12348:	subs	r5, r5, #1
   1234c:	add	r6, r6, #4
   12350:	bne	12300 <__assert_fail@plt+0xf48>
   12354:	ldr	r0, [sp, #4]
   12358:	bl	12758 <__assert_fail@plt+0x13a0>
   1235c:	movw	r4, #33156	; 0x8184
   12360:	movt	r4, #2
   12364:	ldr	r0, [r4]
   12368:	cmp	r0, #0
   1236c:	beq	12394 <__assert_fail@plt+0xfdc>
   12370:	movw	r1, #26986	; 0x696a
   12374:	movt	r1, #1
   12378:	mov	r0, #0
   1237c:	mov	r2, #5
   12380:	bl	11190 <dcgettext@plt>
   12384:	mov	r1, r0
   12388:	ldr	r2, [r4]
   1238c:	mov	r0, #1
   12390:	bl	112f8 <__printf_chk@plt>
   12394:	sub	sp, fp, #24
   12398:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1239c:	bl	112bc <__errno_location@plt>
   123a0:	ldr	r5, [r0]
   123a4:	cmp	r8, #0
   123a8:	beq	123e4 <__assert_fail@plt+0x102c>
   123ac:	movw	r1, #26899	; 0x6913
   123b0:	movt	r1, #1
   123b4:	mov	r0, #0
   123b8:	mov	r2, #5
   123bc:	bl	11190 <dcgettext@plt>
   123c0:	mov	r4, r0
   123c4:	mov	r0, r8
   123c8:	bl	14014 <__assert_fail@plt+0x2c5c>
   123cc:	mov	r3, r0
   123d0:	mov	r0, #0
   123d4:	mov	r1, r5
   123d8:	mov	r2, r4
   123dc:	bl	1122c <error@plt>
   123e0:	b	12408 <__assert_fail@plt+0x1050>
   123e4:	movw	r1, #26932	; 0x6934
   123e8:	movt	r1, #1
   123ec:	mov	r0, #0
   123f0:	mov	r2, #5
   123f4:	bl	11190 <dcgettext@plt>
   123f8:	mov	r2, r0
   123fc:	mov	r0, #0
   12400:	mov	r1, r5
   12404:	bl	1122c <error@plt>
   12408:	movw	r0, #33040	; 0x8110
   1240c:	movt	r0, #2
   12410:	mov	r1, #0
   12414:	strb	r1, [r0]
   12418:	sub	sp, fp, #24
   1241c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12420:	ldr	r0, [r0]
   12424:	movw	r2, #33180	; 0x819c
   12428:	movt	r2, #2
   1242c:	mov	r1, #0
   12430:	b	12780 <__assert_fail@plt+0x13c8>
   12434:	ldr	r0, [r0]
   12438:	movw	r2, #33201	; 0x81b1
   1243c:	movt	r2, #2
   12440:	mov	r1, #0
   12444:	b	12780 <__assert_fail@plt+0x13c8>
   12448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1244c:	add	fp, sp, #28
   12450:	sub	sp, sp, #4
   12454:	mov	r8, r3
   12458:	mov	r5, r2
   1245c:	mov	r4, r0
   12460:	ldr	r9, [fp, #8]
   12464:	cmp	r0, #0
   12468:	beq	12488 <__assert_fail@plt+0x10d0>
   1246c:	mov	r0, r1
   12470:	bl	11130 <getpwuid@plt>
   12474:	mov	r6, r0
   12478:	cmp	r0, #0
   1247c:	mov	r7, r0
   12480:	movwne	r7, #1
   12484:	b	12490 <__assert_fail@plt+0x10d8>
   12488:	mov	r6, #0
   1248c:	mov	r7, #1
   12490:	ldr	sl, [fp, #12]
   12494:	mov	r0, r5
   12498:	mov	r1, r9
   1249c:	bl	125b4 <__assert_fail@plt+0x11fc>
   124a0:	and	r7, r7, r0
   124a4:	cmp	r8, r5
   124a8:	beq	124c4 <__assert_fail@plt+0x110c>
   124ac:	mov	r0, sl
   124b0:	bl	113ac <putchar_unlocked@plt>
   124b4:	mov	r0, r8
   124b8:	mov	r1, r9
   124bc:	bl	125b4 <__assert_fail@plt+0x11fc>
   124c0:	and	r7, r7, r0
   124c4:	cmp	r6, #0
   124c8:	mov	r1, r8
   124cc:	ldrne	r1, [r6, #12]
   124d0:	mov	r2, sp
   124d4:	mov	r0, r4
   124d8:	bl	15090 <__assert_fail@plt+0x3cd8>
   124dc:	cmp	r0, #0
   124e0:	blt	12538 <__assert_fail@plt+0x1180>
   124e4:	beq	1252c <__assert_fail@plt+0x1174>
   124e8:	mov	r6, r0
   124ec:	mov	r4, #0
   124f0:	ldr	r0, [sp]
   124f4:	ldr	r0, [r0, r4, lsl #2]
   124f8:	cmp	r0, r5
   124fc:	cmpne	r0, r8
   12500:	beq	12520 <__assert_fail@plt+0x1168>
   12504:	mov	r0, sl
   12508:	bl	113ac <putchar_unlocked@plt>
   1250c:	ldr	r0, [sp]
   12510:	ldr	r0, [r0, r4, lsl #2]
   12514:	mov	r1, r9
   12518:	bl	125b4 <__assert_fail@plt+0x11fc>
   1251c:	and	r7, r7, r0
   12520:	add	r4, r4, #1
   12524:	cmp	r6, r4
   12528:	bne	124f0 <__assert_fail@plt+0x1138>
   1252c:	ldr	r0, [sp]
   12530:	bl	12758 <__assert_fail@plt+0x13a0>
   12534:	b	125a8 <__assert_fail@plt+0x11f0>
   12538:	bl	112bc <__errno_location@plt>
   1253c:	ldr	r6, [r0]
   12540:	mov	r7, #0
   12544:	cmp	r4, #0
   12548:	beq	12584 <__assert_fail@plt+0x11cc>
   1254c:	movw	r1, #26899	; 0x6913
   12550:	movt	r1, #1
   12554:	mov	r0, #0
   12558:	mov	r2, #5
   1255c:	bl	11190 <dcgettext@plt>
   12560:	mov	r5, r0
   12564:	mov	r0, r4
   12568:	bl	14014 <__assert_fail@plt+0x2c5c>
   1256c:	mov	r3, r0
   12570:	mov	r0, #0
   12574:	mov	r1, r6
   12578:	mov	r2, r5
   1257c:	bl	1122c <error@plt>
   12580:	b	125a8 <__assert_fail@plt+0x11f0>
   12584:	movw	r1, #26932	; 0x6934
   12588:	movt	r1, #1
   1258c:	mov	r0, #0
   12590:	mov	r2, #5
   12594:	bl	11190 <dcgettext@plt>
   12598:	mov	r2, r0
   1259c:	mov	r0, #0
   125a0:	mov	r1, r6
   125a4:	bl	1122c <error@plt>
   125a8:	and	r0, r7, #1
   125ac:	sub	sp, fp, #28
   125b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b4:	push	{r4, r5, fp, lr}
   125b8:	add	fp, sp, #8
   125bc:	sub	sp, sp, #8
   125c0:	str	r0, [sp, #4]
   125c4:	mov	r4, #1
   125c8:	cmp	r1, #0
   125cc:	beq	12618 <__assert_fail@plt+0x1260>
   125d0:	mov	r5, r0
   125d4:	bl	11394 <getgrgid@plt>
   125d8:	cmp	r0, #0
   125dc:	beq	125ec <__assert_fail@plt+0x1234>
   125e0:	ldr	r0, [r0]
   125e4:	mov	r4, #1
   125e8:	b	12620 <__assert_fail@plt+0x1268>
   125ec:	mov	r4, #0
   125f0:	movw	r1, #27216	; 0x6a50
   125f4:	movt	r1, #1
   125f8:	mov	r0, #0
   125fc:	mov	r2, #5
   12600:	bl	11190 <dcgettext@plt>
   12604:	mov	r2, r0
   12608:	mov	r0, #0
   1260c:	mov	r1, #0
   12610:	mov	r3, r5
   12614:	bl	1122c <error@plt>
   12618:	add	r0, sp, #4
   1261c:	bl	1263c <__assert_fail@plt+0x1284>
   12620:	movw	r1, #33140	; 0x8174
   12624:	movt	r1, #2
   12628:	ldr	r1, [r1]
   1262c:	bl	110f4 <fputs_unlocked@plt>
   12630:	mov	r0, r4
   12634:	sub	sp, fp, #8
   12638:	pop	{r4, r5, fp, pc}
   1263c:	ldr	r0, [r0]
   12640:	movw	r2, #33222	; 0x81c6
   12644:	movt	r2, #2
   12648:	mov	r1, #0
   1264c:	b	12780 <__assert_fail@plt+0x13c8>
   12650:	movw	r1, #33244	; 0x81dc
   12654:	movt	r1, #2
   12658:	str	r0, [r1]
   1265c:	bx	lr
   12660:	movw	r1, #33248	; 0x81e0
   12664:	movt	r1, #2
   12668:	strb	r0, [r1]
   1266c:	bx	lr
   12670:	push	{r4, r5, r6, sl, fp, lr}
   12674:	add	fp, sp, #16
   12678:	sub	sp, sp, #8
   1267c:	movw	r0, #33140	; 0x8174
   12680:	movt	r0, #2
   12684:	ldr	r0, [r0]
   12688:	bl	159c0 <__assert_fail@plt+0x4608>
   1268c:	cmp	r0, #0
   12690:	beq	126b8 <__assert_fail@plt+0x1300>
   12694:	movw	r0, #33248	; 0x81e0
   12698:	movt	r0, #2
   1269c:	ldrb	r0, [r0]
   126a0:	cmp	r0, #0
   126a4:	beq	126d8 <__assert_fail@plt+0x1320>
   126a8:	bl	112bc <__errno_location@plt>
   126ac:	ldr	r0, [r0]
   126b0:	cmp	r0, #32
   126b4:	bne	126d8 <__assert_fail@plt+0x1320>
   126b8:	movw	r0, #33136	; 0x8170
   126bc:	movt	r0, #2
   126c0:	ldr	r0, [r0]
   126c4:	bl	159c0 <__assert_fail@plt+0x4608>
   126c8:	cmp	r0, #0
   126cc:	subeq	sp, fp, #16
   126d0:	popeq	{r4, r5, r6, sl, fp, pc}
   126d4:	b	12748 <__assert_fail@plt+0x1390>
   126d8:	movw	r1, #27265	; 0x6a81
   126dc:	movt	r1, #1
   126e0:	mov	r0, #0
   126e4:	mov	r2, #5
   126e8:	bl	11190 <dcgettext@plt>
   126ec:	mov	r4, r0
   126f0:	movw	r0, #33244	; 0x81dc
   126f4:	movt	r0, #2
   126f8:	ldr	r6, [r0]
   126fc:	bl	112bc <__errno_location@plt>
   12700:	ldr	r5, [r0]
   12704:	cmp	r6, #0
   12708:	bne	12724 <__assert_fail@plt+0x136c>
   1270c:	movw	r2, #27281	; 0x6a91
   12710:	movt	r2, #1
   12714:	mov	r0, #0
   12718:	mov	r1, r5
   1271c:	mov	r3, r4
   12720:	b	12744 <__assert_fail@plt+0x138c>
   12724:	mov	r0, r6
   12728:	bl	13ec4 <__assert_fail@plt+0x2b0c>
   1272c:	mov	r3, r0
   12730:	str	r4, [sp]
   12734:	movw	r2, #27277	; 0x6a8d
   12738:	movt	r2, #1
   1273c:	mov	r0, #0
   12740:	mov	r1, r5
   12744:	bl	1122c <error@plt>
   12748:	movw	r0, #33048	; 0x8118
   1274c:	movt	r0, #2
   12750:	ldr	r0, [r0]
   12754:	bl	11160 <_exit@plt>
   12758:	push	{r4, r5, r6, sl, fp, lr}
   1275c:	add	fp, sp, #16
   12760:	mov	r4, r0
   12764:	bl	112bc <__errno_location@plt>
   12768:	mov	r5, r0
   1276c:	ldr	r6, [r0]
   12770:	mov	r0, r4
   12774:	bl	11154 <free@plt>
   12778:	str	r6, [r5]
   1277c:	pop	{r4, r5, r6, sl, fp, pc}
   12780:	push	{r4, r5, r6, sl, fp, lr}
   12784:	add	fp, sp, #16
   12788:	mov	r4, r1
   1278c:	mov	r5, r0
   12790:	mov	r0, #0
   12794:	strb	r0, [r2, #20]
   12798:	add	r6, r2, #19
   1279c:	mov	r0, r5
   127a0:	mov	r1, r4
   127a4:	mov	r2, #10
   127a8:	mov	r3, #0
   127ac:	bl	16034 <__assert_fail@plt+0x4c7c>
   127b0:	add	r2, r0, r0, lsl #2
   127b4:	sub	r2, r5, r2, lsl #1
   127b8:	orr	r2, r2, #48	; 0x30
   127bc:	strb	r2, [r6], #-1
   127c0:	rsbs	r2, r5, #9
   127c4:	rscs	r2, r4, #0
   127c8:	mov	r5, r0
   127cc:	mov	r4, r1
   127d0:	bcc	1279c <__assert_fail@plt+0x13e4>
   127d4:	add	r0, r6, #1
   127d8:	pop	{r4, r5, r6, sl, fp, pc}
   127dc:	push	{r4, r5, fp, lr}
   127e0:	add	fp, sp, #8
   127e4:	cmp	r0, #0
   127e8:	beq	1287c <__assert_fail@plt+0x14c4>
   127ec:	mov	r4, r0
   127f0:	mov	r1, #47	; 0x2f
   127f4:	bl	1134c <strrchr@plt>
   127f8:	cmp	r0, #0
   127fc:	mov	r5, r4
   12800:	addne	r5, r0, #1
   12804:	sub	r0, r5, r4
   12808:	cmp	r0, #7
   1280c:	blt	12860 <__assert_fail@plt+0x14a8>
   12810:	sub	r0, r5, #7
   12814:	movw	r1, #27340	; 0x6acc
   12818:	movt	r1, #1
   1281c:	mov	r2, #7
   12820:	bl	1137c <strncmp@plt>
   12824:	cmp	r0, #0
   12828:	bne	12860 <__assert_fail@plt+0x14a8>
   1282c:	movw	r1, #27348	; 0x6ad4
   12830:	movt	r1, #1
   12834:	mov	r0, r5
   12838:	mov	r2, #3
   1283c:	bl	1137c <strncmp@plt>
   12840:	cmp	r0, #0
   12844:	beq	12850 <__assert_fail@plt+0x1498>
   12848:	mov	r4, r5
   1284c:	b	12860 <__assert_fail@plt+0x14a8>
   12850:	add	r4, r5, #3
   12854:	movw	r0, #33120	; 0x8160
   12858:	movt	r0, #2
   1285c:	str	r4, [r0]
   12860:	movw	r0, #33124	; 0x8164
   12864:	movt	r0, #2
   12868:	str	r4, [r0]
   1286c:	movw	r0, #33252	; 0x81e4
   12870:	movt	r0, #2
   12874:	str	r4, [r0]
   12878:	pop	{r4, r5, fp, pc}
   1287c:	movw	r0, #33136	; 0x8170
   12880:	movt	r0, #2
   12884:	ldr	r3, [r0]
   12888:	movw	r0, #27284	; 0x6a94
   1288c:	movt	r0, #1
   12890:	mov	r1, #55	; 0x37
   12894:	mov	r2, #1
   12898:	bl	111d8 <fwrite@plt>
   1289c:	bl	11388 <abort@plt>
   128a0:	push	{r4, r5, r6, sl, fp, lr}
   128a4:	add	fp, sp, #16
   128a8:	mov	r4, r0
   128ac:	movw	r0, #33256	; 0x81e8
   128b0:	movt	r0, #2
   128b4:	cmp	r4, #0
   128b8:	moveq	r4, r0
   128bc:	bl	112bc <__errno_location@plt>
   128c0:	mov	r5, r0
   128c4:	ldr	r6, [r0]
   128c8:	mov	r0, r4
   128cc:	mov	r1, #48	; 0x30
   128d0:	bl	14f90 <__assert_fail@plt+0x3bd8>
   128d4:	str	r6, [r5]
   128d8:	pop	{r4, r5, r6, sl, fp, pc}
   128dc:	movw	r1, #33256	; 0x81e8
   128e0:	movt	r1, #2
   128e4:	cmp	r0, #0
   128e8:	movne	r1, r0
   128ec:	ldr	r0, [r1]
   128f0:	bx	lr
   128f4:	movw	r2, #33256	; 0x81e8
   128f8:	movt	r2, #2
   128fc:	cmp	r0, #0
   12900:	movne	r2, r0
   12904:	str	r1, [r2]
   12908:	bx	lr
   1290c:	movw	r3, #33256	; 0x81e8
   12910:	movt	r3, #2
   12914:	cmp	r0, #0
   12918:	movne	r3, r0
   1291c:	ubfx	r0, r1, #5, #3
   12920:	add	r0, r3, r0, lsl #2
   12924:	ldr	r3, [r0, #8]
   12928:	and	r1, r1, #31
   1292c:	eor	r2, r2, r3, lsr r1
   12930:	and	r2, r2, #1
   12934:	eor	r2, r3, r2, lsl r1
   12938:	str	r2, [r0, #8]
   1293c:	mov	r0, #1
   12940:	and	r0, r0, r3, lsr r1
   12944:	bx	lr
   12948:	movw	r2, #33256	; 0x81e8
   1294c:	movt	r2, #2
   12950:	cmp	r0, #0
   12954:	movne	r2, r0
   12958:	ldr	r0, [r2, #4]
   1295c:	str	r1, [r2, #4]
   12960:	bx	lr
   12964:	movw	r3, #33256	; 0x81e8
   12968:	movt	r3, #2
   1296c:	cmp	r0, #0
   12970:	movne	r3, r0
   12974:	mov	r0, #10
   12978:	str	r0, [r3]
   1297c:	cmp	r1, #0
   12980:	cmpne	r2, #0
   12984:	bne	12994 <__assert_fail@plt+0x15dc>
   12988:	push	{fp, lr}
   1298c:	mov	fp, sp
   12990:	bl	11388 <abort@plt>
   12994:	str	r1, [r3, #40]	; 0x28
   12998:	str	r2, [r3, #44]	; 0x2c
   1299c:	bx	lr
   129a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a4:	add	fp, sp, #28
   129a8:	sub	sp, sp, #20
   129ac:	mov	r8, r3
   129b0:	mov	r9, r2
   129b4:	mov	sl, r1
   129b8:	mov	r7, r0
   129bc:	ldr	r0, [fp, #8]
   129c0:	movw	r5, #33256	; 0x81e8
   129c4:	movt	r5, #2
   129c8:	cmp	r0, #0
   129cc:	movne	r5, r0
   129d0:	bl	112bc <__errno_location@plt>
   129d4:	mov	r4, r0
   129d8:	ldm	r5, {r0, r1}
   129dc:	ldr	r2, [r5, #40]	; 0x28
   129e0:	ldr	r3, [r5, #44]	; 0x2c
   129e4:	ldr	r6, [r4]
   129e8:	add	r5, r5, #8
   129ec:	stm	sp, {r0, r1, r5}
   129f0:	str	r2, [sp, #12]
   129f4:	str	r3, [sp, #16]
   129f8:	mov	r0, r7
   129fc:	mov	r1, sl
   12a00:	mov	r2, r9
   12a04:	mov	r3, r8
   12a08:	bl	12a18 <__assert_fail@plt+0x1660>
   12a0c:	str	r6, [r4]
   12a10:	sub	sp, fp, #28
   12a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a1c:	add	fp, sp, #28
   12a20:	sub	sp, sp, #156	; 0x9c
   12a24:	mov	r9, r3
   12a28:	str	r2, [fp, #-84]	; 0xffffffac
   12a2c:	mov	r6, r1
   12a30:	mov	r7, r0
   12a34:	ldr	r0, [fp, #12]
   12a38:	and	r1, r0, #4
   12a3c:	str	r1, [sp, #32]
   12a40:	and	r1, r0, #1
   12a44:	str	r1, [sp, #36]	; 0x24
   12a48:	ubfx	sl, r0, #1, #1
   12a4c:	bl	111f0 <__ctype_get_mb_cur_max@plt>
   12a50:	str	r0, [sp, #40]	; 0x28
   12a54:	ldr	r0, [fp, #24]
   12a58:	str	r0, [sp, #76]	; 0x4c
   12a5c:	ldr	r0, [fp, #20]
   12a60:	str	r0, [sp, #68]	; 0x44
   12a64:	ldr	r0, [fp, #8]
   12a68:	str	r0, [fp, #-60]	; 0xffffffc4
   12a6c:	mov	r0, #0
   12a70:	str	r0, [sp, #72]	; 0x48
   12a74:	mov	r0, #0
   12a78:	str	r0, [sp, #92]	; 0x5c
   12a7c:	mov	r0, #0
   12a80:	str	r0, [fp, #-72]	; 0xffffffb8
   12a84:	mov	r0, #0
   12a88:	mov	r1, #0
   12a8c:	str	r1, [fp, #-56]	; 0xffffffc8
   12a90:	mov	r1, #0
   12a94:	str	r1, [sp, #56]	; 0x38
   12a98:	mov	r5, #1
   12a9c:	str	r7, [sp, #80]	; 0x50
   12aa0:	mov	r4, r6
   12aa4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12aa8:	cmp	r6, #10
   12aac:	bhi	13a14 <__assert_fail@plt+0x265c>
   12ab0:	add	r1, pc, #20
   12ab4:	mov	r8, #0
   12ab8:	mov	r2, #1
   12abc:	mov	r3, #0
   12ac0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ac4:	mov	lr, r9
   12ac8:	ldr	pc, [r1, r6, lsl #2]
   12acc:	andeq	r2, r1, r4, lsr #23
   12ad0:	ldrdeq	r2, [r1], -r4
   12ad4:	muleq	r1, r4, fp
   12ad8:	andeq	r2, r1, ip, lsl #23
   12adc:	andeq	r2, r1, r8, asr #23
   12ae0:	andeq	r2, r1, r8, lsr #24
   12ae4:			; <UNDEFINED> instruction: 0x00012bb4
   12ae8:	andeq	r2, r1, r4, lsl #25
   12aec:	strdeq	r2, [r1], -r8
   12af0:	strdeq	r2, [r1], -r8
   12af4:	andeq	r2, r1, r0, lsr #22
   12af8:	movw	r0, #27430	; 0x6b26
   12afc:	movt	r0, #1
   12b00:	mov	r1, r6
   12b04:	bl	14020 <__assert_fail@plt+0x2c68>
   12b08:	str	r0, [sp, #68]	; 0x44
   12b0c:	movw	r0, #27432	; 0x6b28
   12b10:	movt	r0, #1
   12b14:	mov	r1, r6
   12b18:	bl	14020 <__assert_fail@plt+0x2c68>
   12b1c:	str	r0, [sp, #76]	; 0x4c
   12b20:	mov	r8, #0
   12b24:	tst	sl, #1
   12b28:	bne	12b60 <__assert_fail@plt+0x17a8>
   12b2c:	ldr	r0, [sp, #68]	; 0x44
   12b30:	ldrb	r0, [r0]
   12b34:	cmp	r0, #0
   12b38:	beq	12b60 <__assert_fail@plt+0x17a8>
   12b3c:	ldr	r1, [sp, #68]	; 0x44
   12b40:	add	r1, r1, #1
   12b44:	mov	r8, #0
   12b48:	cmp	r8, r4
   12b4c:	strbcc	r0, [r7, r8]
   12b50:	ldrb	r0, [r1, r8]
   12b54:	add	r8, r8, #1
   12b58:	cmp	r0, #0
   12b5c:	bne	12b48 <__assert_fail@plt+0x1790>
   12b60:	ldr	r6, [sp, #76]	; 0x4c
   12b64:	mov	r0, r6
   12b68:	bl	112a4 <strlen@plt>
   12b6c:	str	r0, [fp, #-72]	; 0xffffffb8
   12b70:	str	r6, [sp, #92]	; 0x5c
   12b74:	mov	r2, #1
   12b78:	mov	r3, sl
   12b7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b80:	mov	lr, r9
   12b84:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12b88:	b	12c84 <__assert_fail@plt+0x18cc>
   12b8c:	mov	r0, #1
   12b90:	b	12bd4 <__assert_fail@plt+0x181c>
   12b94:	tst	sl, #1
   12b98:	bne	12bd4 <__assert_fail@plt+0x181c>
   12b9c:	mov	r2, r0
   12ba0:	b	12bfc <__assert_fail@plt+0x1844>
   12ba4:	mov	r6, #0
   12ba8:	mov	r8, #0
   12bac:	mov	r2, r0
   12bb0:	b	12c80 <__assert_fail@plt+0x18c8>
   12bb4:	mov	r0, #1
   12bb8:	str	r0, [fp, #-72]	; 0xffffffb8
   12bbc:	mov	r8, #0
   12bc0:	mov	r6, #5
   12bc4:	b	12c40 <__assert_fail@plt+0x1888>
   12bc8:	mov	r2, #1
   12bcc:	tst	sl, #1
   12bd0:	beq	12bfc <__assert_fail@plt+0x1844>
   12bd4:	mov	r1, #1
   12bd8:	str	r1, [fp, #-72]	; 0xffffffb8
   12bdc:	mov	r8, #0
   12be0:	mov	r6, #2
   12be4:	movw	r1, #27432	; 0x6b28
   12be8:	movt	r1, #1
   12bec:	str	r1, [sp, #92]	; 0x5c
   12bf0:	mov	r2, r0
   12bf4:	mov	r3, #1
   12bf8:	b	12c84 <__assert_fail@plt+0x18cc>
   12bfc:	mov	r8, #1
   12c00:	mov	r6, #2
   12c04:	cmp	r4, #0
   12c08:	movne	r0, #39	; 0x27
   12c0c:	strbne	r0, [r7]
   12c10:	movw	r0, #27432	; 0x6b28
   12c14:	movt	r0, #1
   12c18:	str	r0, [sp, #92]	; 0x5c
   12c1c:	mov	r0, #1
   12c20:	str	r0, [fp, #-72]	; 0xffffffb8
   12c24:	b	12c80 <__assert_fail@plt+0x18c8>
   12c28:	mov	r6, #5
   12c2c:	tst	sl, #1
   12c30:	beq	12c58 <__assert_fail@plt+0x18a0>
   12c34:	mov	r0, #1
   12c38:	str	r0, [fp, #-72]	; 0xffffffb8
   12c3c:	mov	r8, #0
   12c40:	movw	r0, #27428	; 0x6b24
   12c44:	movt	r0, #1
   12c48:	str	r0, [sp, #92]	; 0x5c
   12c4c:	mov	r2, #1
   12c50:	mov	r3, #1
   12c54:	b	12c84 <__assert_fail@plt+0x18cc>
   12c58:	cmp	r4, #0
   12c5c:	movne	r0, #34	; 0x22
   12c60:	strbne	r0, [r7]
   12c64:	mov	r8, #1
   12c68:	movw	r0, #27428	; 0x6b24
   12c6c:	movt	r0, #1
   12c70:	str	r0, [sp, #92]	; 0x5c
   12c74:	mov	r0, #1
   12c78:	str	r0, [fp, #-72]	; 0xffffffb8
   12c7c:	mov	r2, #1
   12c80:	mov	r3, #0
   12c84:	ldr	r0, [fp, #16]
   12c88:	cmp	r0, #0
   12c8c:	movwne	r0, #1
   12c90:	and	r0, r0, r3
   12c94:	str	r0, [fp, #-88]	; 0xffffffa8
   12c98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c9c:	cmp	r0, #0
   12ca0:	movwne	r0, #1
   12ca4:	and	r1, r0, r3
   12ca8:	and	r1, r2, r1
   12cac:	str	r1, [sp, #48]	; 0x30
   12cb0:	str	r6, [fp, #-60]	; 0xffffffc4
   12cb4:	subs	r6, r6, #2
   12cb8:	clz	r1, r6
   12cbc:	lsr	r1, r1, #5
   12cc0:	and	r1, r1, r3
   12cc4:	str	r1, [sp, #60]	; 0x3c
   12cc8:	str	r6, [fp, #-80]	; 0xffffffb0
   12ccc:	mov	r1, r6
   12cd0:	movwne	r1, #1
   12cd4:	str	r3, [fp, #-76]	; 0xffffffb4
   12cd8:	eor	r3, r3, #1
   12cdc:	str	r3, [sp, #88]	; 0x58
   12ce0:	orr	r3, r1, r3
   12ce4:	str	r3, [sp, #64]	; 0x40
   12ce8:	and	r1, r1, r2
   12cec:	str	r1, [fp, #-68]	; 0xffffffbc
   12cf0:	and	r0, r0, r1
   12cf4:	str	r0, [fp, #-64]	; 0xffffffc0
   12cf8:	str	r2, [sp, #84]	; 0x54
   12cfc:	eor	r0, r2, #1
   12d00:	str	r0, [sp, #52]	; 0x34
   12d04:	mov	r6, #0
   12d08:	cmn	lr, #1
   12d0c:	beq	12d1c <__assert_fail@plt+0x1964>
   12d10:	cmp	r6, lr
   12d14:	bne	12d28 <__assert_fail@plt+0x1970>
   12d18:	b	13894 <__assert_fail@plt+0x24dc>
   12d1c:	ldrb	r0, [ip, r6]
   12d20:	cmp	r0, #0
   12d24:	beq	13894 <__assert_fail@plt+0x24dc>
   12d28:	str	r5, [fp, #-48]	; 0xffffffd0
   12d2c:	mov	sl, #0
   12d30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d34:	cmp	r0, #0
   12d38:	beq	12d6c <__assert_fail@plt+0x19b4>
   12d3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d40:	add	r5, r6, r0
   12d44:	cmp	r0, #2
   12d48:	bcc	12d64 <__assert_fail@plt+0x19ac>
   12d4c:	cmn	lr, #1
   12d50:	bne	12d64 <__assert_fail@plt+0x19ac>
   12d54:	mov	r0, ip
   12d58:	bl	112a4 <strlen@plt>
   12d5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d60:	mov	lr, r0
   12d64:	cmp	r5, lr
   12d68:	bls	12d78 <__assert_fail@plt+0x19c0>
   12d6c:	mov	r0, #0
   12d70:	str	r0, [fp, #-52]	; 0xffffffcc
   12d74:	b	12dc4 <__assert_fail@plt+0x1a0c>
   12d78:	mov	r5, r4
   12d7c:	mov	r4, lr
   12d80:	add	r0, ip, r6
   12d84:	ldr	r1, [sp, #92]	; 0x5c
   12d88:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d8c:	bl	11184 <memcmp@plt>
   12d90:	cmp	r0, #0
   12d94:	mov	r1, r0
   12d98:	movwne	r1, #1
   12d9c:	ldr	r2, [sp, #88]	; 0x58
   12da0:	orr	r1, r1, r2
   12da4:	tst	r1, #1
   12da8:	beq	13958 <__assert_fail@plt+0x25a0>
   12dac:	clz	r0, r0
   12db0:	lsr	r0, r0, #5
   12db4:	str	r0, [fp, #-52]	; 0xffffffcc
   12db8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12dbc:	mov	lr, r4
   12dc0:	mov	r4, r5
   12dc4:	ldrb	r5, [ip, r6]
   12dc8:	cmp	r5, #126	; 0x7e
   12dcc:	bhi	13188 <__assert_fail@plt+0x1dd0>
   12dd0:	mov	r9, #1
   12dd4:	mov	r2, #110	; 0x6e
   12dd8:	mov	r0, #97	; 0x61
   12ddc:	add	r3, pc, #4
   12de0:	mov	r1, #0
   12de4:	ldr	pc, [r3, r5, lsl #2]
   12de8:	andeq	r3, r1, r0, lsl #1
   12dec:	andeq	r3, r1, r8, lsl #3
   12df0:	andeq	r3, r1, r8, lsl #3
   12df4:	andeq	r3, r1, r8, lsl #3
   12df8:	andeq	r3, r1, r8, lsl #3
   12dfc:	andeq	r3, r1, r8, lsl #3
   12e00:	andeq	r3, r1, r8, lsl #3
   12e04:	andeq	r3, r1, ip, asr #4
   12e08:	andeq	r3, r1, r0, rrx
   12e0c:	andeq	r3, r1, r8, asr r0
   12e10:	andeq	r3, r1, ip, rrx
   12e14:	strdeq	r3, [r1], -r0
   12e18:	andeq	r3, r1, r0, asr r0
   12e1c:	andeq	r3, r1, r8, rrx
   12e20:	andeq	r3, r1, r8, lsl #3
   12e24:	andeq	r3, r1, r8, lsl #3
   12e28:	andeq	r3, r1, r8, lsl #3
   12e2c:	andeq	r3, r1, r8, lsl #3
   12e30:	andeq	r3, r1, r8, lsl #3
   12e34:	andeq	r3, r1, r8, lsl #3
   12e38:	andeq	r3, r1, r8, lsl #3
   12e3c:	andeq	r3, r1, r8, lsl #3
   12e40:	andeq	r3, r1, r8, lsl #3
   12e44:	andeq	r3, r1, r8, lsl #3
   12e48:	andeq	r3, r1, r8, lsl #3
   12e4c:	andeq	r3, r1, r8, lsl #3
   12e50:	andeq	r3, r1, r8, lsl #3
   12e54:	andeq	r3, r1, r8, lsl #3
   12e58:	andeq	r3, r1, r8, lsl #3
   12e5c:	andeq	r3, r1, r8, lsl #3
   12e60:	andeq	r3, r1, r8, lsl #3
   12e64:	andeq	r3, r1, r8, lsl #3
   12e68:	strdeq	r3, [r1], -ip
   12e6c:	andeq	r3, r1, r0, lsl #4
   12e70:	andeq	r3, r1, r0, lsl #4
   12e74:	strdeq	r2, [r1], -r8
   12e78:	andeq	r3, r1, r0, lsl #4
   12e7c:	andeq	r2, r1, r4, ror #31
   12e80:	andeq	r3, r1, r0, lsl #4
   12e84:	strdeq	r3, [r1], -r8
   12e88:	andeq	r3, r1, r0, lsl #4
   12e8c:	andeq	r3, r1, r0, lsl #4
   12e90:	andeq	r3, r1, r0, lsl #4
   12e94:	andeq	r2, r1, r4, ror #31
   12e98:	andeq	r2, r1, r4, ror #31
   12e9c:	andeq	r2, r1, r4, ror #31
   12ea0:	andeq	r2, r1, r4, ror #31
   12ea4:	andeq	r2, r1, r4, ror #31
   12ea8:	andeq	r2, r1, r4, ror #31
   12eac:	andeq	r2, r1, r4, ror #31
   12eb0:	andeq	r2, r1, r4, ror #31
   12eb4:	andeq	r2, r1, r4, ror #31
   12eb8:	andeq	r2, r1, r4, ror #31
   12ebc:	andeq	r2, r1, r4, ror #31
   12ec0:	andeq	r2, r1, r4, ror #31
   12ec4:	andeq	r2, r1, r4, ror #31
   12ec8:	andeq	r2, r1, r4, ror #31
   12ecc:	andeq	r2, r1, r4, ror #31
   12ed0:	andeq	r2, r1, r4, ror #31
   12ed4:	andeq	r3, r1, r0, lsl #4
   12ed8:	andeq	r3, r1, r0, lsl #4
   12edc:	andeq	r3, r1, r0, lsl #4
   12ee0:	andeq	r3, r1, r0, lsl #4
   12ee4:	andeq	r3, r1, r0, asr #1
   12ee8:	andeq	r3, r1, r8, lsl #3
   12eec:	andeq	r2, r1, r4, ror #31
   12ef0:	andeq	r2, r1, r4, ror #31
   12ef4:	andeq	r2, r1, r4, ror #31
   12ef8:	andeq	r2, r1, r4, ror #31
   12efc:	andeq	r2, r1, r4, ror #31
   12f00:	andeq	r2, r1, r4, ror #31
   12f04:	andeq	r2, r1, r4, ror #31
   12f08:	andeq	r2, r1, r4, ror #31
   12f0c:	andeq	r2, r1, r4, ror #31
   12f10:	andeq	r2, r1, r4, ror #31
   12f14:	andeq	r2, r1, r4, ror #31
   12f18:	andeq	r2, r1, r4, ror #31
   12f1c:	andeq	r2, r1, r4, ror #31
   12f20:	andeq	r2, r1, r4, ror #31
   12f24:	andeq	r2, r1, r4, ror #31
   12f28:	andeq	r2, r1, r4, ror #31
   12f2c:	andeq	r2, r1, r4, ror #31
   12f30:	andeq	r2, r1, r4, ror #31
   12f34:	andeq	r2, r1, r4, ror #31
   12f38:	andeq	r2, r1, r4, ror #31
   12f3c:	andeq	r2, r1, r4, ror #31
   12f40:	andeq	r2, r1, r4, ror #31
   12f44:	andeq	r2, r1, r4, ror #31
   12f48:	andeq	r2, r1, r4, ror #31
   12f4c:	andeq	r2, r1, r4, ror #31
   12f50:	andeq	r2, r1, r4, ror #31
   12f54:	andeq	r3, r1, r0, lsl #4
   12f58:	andeq	r3, r1, ip, lsr #32
   12f5c:	andeq	r2, r1, r4, ror #31
   12f60:	andeq	r3, r1, r0, lsl #4
   12f64:	andeq	r2, r1, r4, ror #31
   12f68:	andeq	r3, r1, r0, lsl #4
   12f6c:	andeq	r2, r1, r4, ror #31
   12f70:	andeq	r2, r1, r4, ror #31
   12f74:	andeq	r2, r1, r4, ror #31
   12f78:	andeq	r2, r1, r4, ror #31
   12f7c:	andeq	r2, r1, r4, ror #31
   12f80:	andeq	r2, r1, r4, ror #31
   12f84:	andeq	r2, r1, r4, ror #31
   12f88:	andeq	r2, r1, r4, ror #31
   12f8c:	andeq	r2, r1, r4, ror #31
   12f90:	andeq	r2, r1, r4, ror #31
   12f94:	andeq	r2, r1, r4, ror #31
   12f98:	andeq	r2, r1, r4, ror #31
   12f9c:	andeq	r2, r1, r4, ror #31
   12fa0:	andeq	r2, r1, r4, ror #31
   12fa4:	andeq	r2, r1, r4, ror #31
   12fa8:	andeq	r2, r1, r4, ror #31
   12fac:	andeq	r2, r1, r4, ror #31
   12fb0:	andeq	r2, r1, r4, ror #31
   12fb4:	andeq	r2, r1, r4, ror #31
   12fb8:	andeq	r2, r1, r4, ror #31
   12fbc:	andeq	r2, r1, r4, ror #31
   12fc0:	andeq	r2, r1, r4, ror #31
   12fc4:	andeq	r2, r1, r4, ror #31
   12fc8:	andeq	r2, r1, r4, ror #31
   12fcc:	andeq	r2, r1, r4, ror #31
   12fd0:	andeq	r2, r1, r4, ror #31
   12fd4:	andeq	r3, r1, ip
   12fd8:	andeq	r3, r1, r0, lsl #4
   12fdc:	andeq	r3, r1, ip
   12fe0:	strdeq	r2, [r1], -r8
   12fe4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fe8:	cmp	r0, #0
   12fec:	beq	13260 <__assert_fail@plt+0x1ea8>
   12ff0:	ldr	r0, [fp, #16]
   12ff4:	b	13264 <__assert_fail@plt+0x1eac>
   12ff8:	mov	r9, #0
   12ffc:	cmp	r6, #0
   13000:	beq	131fc <__assert_fail@plt+0x1e44>
   13004:	mov	sl, #0
   13008:	b	12fe4 <__assert_fail@plt+0x1c2c>
   1300c:	mov	r9, #0
   13010:	cmn	lr, #1
   13014:	beq	131e0 <__assert_fail@plt+0x1e28>
   13018:	cmp	r6, #0
   1301c:	bne	13004 <__assert_fail@plt+0x1c4c>
   13020:	cmp	lr, #1
   13024:	beq	131fc <__assert_fail@plt+0x1e44>
   13028:	b	13004 <__assert_fail@plt+0x1c4c>
   1302c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13030:	cmp	r0, #2
   13034:	bne	13228 <__assert_fail@plt+0x1e70>
   13038:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1303c:	tst	r0, #1
   13040:	bne	13970 <__assert_fail@plt+0x25b8>
   13044:	mov	sl, #0
   13048:	mov	r0, #92	; 0x5c
   1304c:	b	1323c <__assert_fail@plt+0x1e84>
   13050:	mov	r0, #102	; 0x66
   13054:	b	1324c <__assert_fail@plt+0x1e94>
   13058:	mov	r2, #116	; 0x74
   1305c:	b	1306c <__assert_fail@plt+0x1cb4>
   13060:	mov	r0, #98	; 0x62
   13064:	b	1324c <__assert_fail@plt+0x1e94>
   13068:	mov	r2, #114	; 0x72
   1306c:	ldr	r0, [sp, #64]	; 0x40
   13070:	tst	r0, #1
   13074:	mov	r0, r2
   13078:	bne	1324c <__assert_fail@plt+0x1e94>
   1307c:	b	13970 <__assert_fail@plt+0x25b8>
   13080:	ldr	r0, [sp, #84]	; 0x54
   13084:	tst	r0, #1
   13088:	beq	1333c <__assert_fail@plt+0x1f84>
   1308c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13090:	tst	r0, #1
   13094:	bne	13970 <__assert_fail@plt+0x25b8>
   13098:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1309c:	cmp	r0, #2
   130a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   130a4:	movwne	r0, #1
   130a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   130ac:	orr	r0, r0, r2
   130b0:	tst	r0, #1
   130b4:	beq	13730 <__assert_fail@plt+0x2378>
   130b8:	mov	r0, r8
   130bc:	b	13764 <__assert_fail@plt+0x23ac>
   130c0:	mov	sl, #0
   130c4:	mov	r5, #63	; 0x3f
   130c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   130cc:	cmp	r0, #5
   130d0:	beq	134f0 <__assert_fail@plt+0x2138>
   130d4:	cmp	r0, #2
   130d8:	bne	13590 <__assert_fail@plt+0x21d8>
   130dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130e0:	tst	r0, #1
   130e4:	mov	r9, #0
   130e8:	beq	12fe4 <__assert_fail@plt+0x1c2c>
   130ec:	b	13970 <__assert_fail@plt+0x25b8>
   130f0:	mov	r0, #118	; 0x76
   130f4:	b	1324c <__assert_fail@plt+0x1e94>
   130f8:	mov	r5, #39	; 0x27
   130fc:	mov	r0, #1
   13100:	str	r0, [sp, #56]	; 0x38
   13104:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13108:	cmp	r0, #2
   1310c:	bne	1335c <__assert_fail@plt+0x1fa4>
   13110:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13114:	tst	r0, #1
   13118:	bne	13970 <__assert_fail@plt+0x25b8>
   1311c:	ldr	r2, [sp, #72]	; 0x48
   13120:	cmp	r2, #0
   13124:	mov	r0, r2
   13128:	movwne	r0, #1
   1312c:	clz	r1, r4
   13130:	lsr	r1, r1, #5
   13134:	orrs	r0, r0, r1
   13138:	moveq	r2, r4
   1313c:	str	r2, [sp, #72]	; 0x48
   13140:	moveq	r4, r0
   13144:	cmp	r8, r4
   13148:	movcc	r0, #39	; 0x27
   1314c:	strbcc	r0, [r7, r8]
   13150:	add	r0, r8, #1
   13154:	cmp	r0, r4
   13158:	movcc	r1, #92	; 0x5c
   1315c:	strbcc	r1, [r7, r0]
   13160:	add	r0, r8, #2
   13164:	cmp	r0, r4
   13168:	movcc	r1, #39	; 0x27
   1316c:	strbcc	r1, [r7, r0]
   13170:	add	r8, r8, #3
   13174:	mov	r0, #0
   13178:	str	r0, [fp, #-56]	; 0xffffffc8
   1317c:	mov	sl, #0
   13180:	mov	r9, #1
   13184:	b	12fe4 <__assert_fail@plt+0x1c2c>
   13188:	str	r4, [sp, #24]
   1318c:	ldr	r0, [sp, #40]	; 0x28
   13190:	cmp	r0, #1
   13194:	bne	13364 <__assert_fail@plt+0x1fac>
   13198:	str	lr, [sp, #28]
   1319c:	bl	11280 <__ctype_b_loc@plt>
   131a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   131a4:	ldr	r0, [r0]
   131a8:	add	r0, r0, r5, lsl #1
   131ac:	ldrb	r0, [r0, #1]
   131b0:	ubfx	r9, r0, #6, #1
   131b4:	mov	r1, #1
   131b8:	ldr	r4, [sp, #24]
   131bc:	ldr	r0, [sp, #52]	; 0x34
   131c0:	orr	r0, r9, r0
   131c4:	mov	r2, r1
   131c8:	cmp	r1, #1
   131cc:	bhi	13598 <__assert_fail@plt+0x21e0>
   131d0:	tst	r0, #1
   131d4:	beq	13598 <__assert_fail@plt+0x21e0>
   131d8:	ldr	lr, [sp, #28]
   131dc:	b	12fe4 <__assert_fail@plt+0x1c2c>
   131e0:	cmp	r6, #0
   131e4:	ldrbeq	r0, [ip, #1]
   131e8:	cmpeq	r0, #0
   131ec:	beq	131fc <__assert_fail@plt+0x1e44>
   131f0:	mvn	lr, #0
   131f4:	mov	sl, #0
   131f8:	b	12fe4 <__assert_fail@plt+0x1c2c>
   131fc:	mov	r1, #1
   13200:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13204:	cmp	r0, #2
   13208:	bne	13220 <__assert_fail@plt+0x1e68>
   1320c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13210:	tst	r0, #1
   13214:	mov	r9, r1
   13218:	beq	12fe4 <__assert_fail@plt+0x1c2c>
   1321c:	b	13970 <__assert_fail@plt+0x25b8>
   13220:	mov	r9, r1
   13224:	b	12fe4 <__assert_fail@plt+0x1c2c>
   13228:	mov	sl, #0
   1322c:	mov	r0, #92	; 0x5c
   13230:	ldr	r1, [sp, #48]	; 0x30
   13234:	cmp	r1, #0
   13238:	beq	1324c <__assert_fail@plt+0x1e94>
   1323c:	mov	r9, #0
   13240:	cmp	sl, #0
   13244:	beq	137fc <__assert_fail@plt+0x2444>
   13248:	b	13838 <__assert_fail@plt+0x2480>
   1324c:	mov	r9, #0
   13250:	ldr	r1, [sp, #84]	; 0x54
   13254:	tst	r1, #1
   13258:	mov	sl, #0
   1325c:	bne	1329c <__assert_fail@plt+0x1ee4>
   13260:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13264:	cmp	r0, #0
   13268:	mov	r0, r5
   1326c:	beq	13290 <__assert_fail@plt+0x1ed8>
   13270:	ubfx	r0, r5, #5, #3
   13274:	ldr	r1, [fp, #16]
   13278:	ldr	r0, [r1, r0, lsl #2]
   1327c:	and	r1, r5, #31
   13280:	mov	r2, #1
   13284:	tst	r0, r2, lsl r1
   13288:	mov	r0, r5
   1328c:	bne	1329c <__assert_fail@plt+0x1ee4>
   13290:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13294:	cmp	r1, #0
   13298:	beq	137f4 <__assert_fail@plt+0x243c>
   1329c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   132a0:	tst	r1, #1
   132a4:	bne	13970 <__assert_fail@plt+0x25b8>
   132a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   132ac:	cmp	r1, #2
   132b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   132b4:	movwne	r1, #1
   132b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   132bc:	orr	r1, r1, r2
   132c0:	tst	r1, #1
   132c4:	beq	132d0 <__assert_fail@plt+0x1f18>
   132c8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   132cc:	b	1330c <__assert_fail@plt+0x1f54>
   132d0:	cmp	r8, r4
   132d4:	movcc	r1, #39	; 0x27
   132d8:	strbcc	r1, [r7, r8]
   132dc:	add	r1, r8, #1
   132e0:	cmp	r1, r4
   132e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   132e8:	movcc	r2, #36	; 0x24
   132ec:	strbcc	r2, [r7, r1]
   132f0:	add	r1, r8, #2
   132f4:	cmp	r1, r4
   132f8:	movcc	r2, #39	; 0x27
   132fc:	strbcc	r2, [r7, r1]
   13300:	add	r8, r8, #3
   13304:	mov	r1, #1
   13308:	str	r1, [fp, #-56]	; 0xffffffc8
   1330c:	cmp	r8, r4
   13310:	movcc	r1, #92	; 0x5c
   13314:	strbcc	r1, [r7, r8]
   13318:	add	r8, r8, #1
   1331c:	cmp	r8, r4
   13320:	strbcc	r0, [r7, r8]
   13324:	and	r5, r5, r9
   13328:	add	r8, r8, #1
   1332c:	add	r6, r6, #1
   13330:	cmn	lr, #1
   13334:	bne	12d10 <__assert_fail@plt+0x1958>
   13338:	b	12d1c <__assert_fail@plt+0x1964>
   1333c:	mov	r9, #0
   13340:	ldr	r0, [sp, #36]	; 0x24
   13344:	cmp	r0, #0
   13348:	mov	sl, #0
   1334c:	mov	r5, #0
   13350:	beq	13260 <__assert_fail@plt+0x1ea8>
   13354:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13358:	b	1332c <__assert_fail@plt+0x1f74>
   1335c:	mov	r9, #1
   13360:	b	12fe4 <__assert_fail@plt+0x1c2c>
   13364:	mov	r0, #0
   13368:	str	r0, [fp, #-36]	; 0xffffffdc
   1336c:	str	r0, [fp, #-40]	; 0xffffffd8
   13370:	cmn	lr, #1
   13374:	bne	13388 <__assert_fail@plt+0x1fd0>
   13378:	mov	r0, ip
   1337c:	bl	112a4 <strlen@plt>
   13380:	ldr	ip, [fp, #-84]	; 0xffffffac
   13384:	mov	lr, r0
   13388:	add	r0, ip, r6
   1338c:	str	r0, [sp, #20]
   13390:	mov	r9, #1
   13394:	mov	r7, #0
   13398:	sub	r4, fp, #40	; 0x28
   1339c:	str	lr, [sp, #28]
   133a0:	str	r7, [sp, #44]	; 0x2c
   133a4:	add	r7, r7, r6
   133a8:	add	r1, ip, r7
   133ac:	sub	r2, lr, r7
   133b0:	sub	r0, fp, #44	; 0x2c
   133b4:	mov	r3, r4
   133b8:	bl	15c7c <__assert_fail@plt+0x48c4>
   133bc:	cmp	r0, #0
   133c0:	beq	13880 <__assert_fail@plt+0x24c8>
   133c4:	cmn	r0, #1
   133c8:	beq	13840 <__assert_fail@plt+0x2488>
   133cc:	cmn	r0, #2
   133d0:	ldr	lr, [sp, #28]
   133d4:	beq	13848 <__assert_fail@plt+0x2490>
   133d8:	cmp	r0, #2
   133dc:	mov	r1, #0
   133e0:	movwcc	r1, #1
   133e4:	ldr	r2, [sp, #60]	; 0x3c
   133e8:	eor	r2, r2, #1
   133ec:	orrs	r1, r2, r1
   133f0:	ldr	r4, [sp, #24]
   133f4:	bne	134b4 <__assert_fail@plt+0x20fc>
   133f8:	ldr	r1, [sp, #44]	; 0x2c
   133fc:	ldr	r2, [sp, #20]
   13400:	add	r1, r2, r1
   13404:	mov	r2, #1
   13408:	ldrb	r3, [r1, r2]
   1340c:	sub	r3, r3, #91	; 0x5b
   13410:	cmp	r3, #33	; 0x21
   13414:	bhi	134a8 <__assert_fail@plt+0x20f0>
   13418:	add	r7, pc, #0
   1341c:	ldr	pc, [r7, r3, lsl #2]
   13420:	andeq	r3, r1, r8, ror #18
   13424:	andeq	r3, r1, r8, ror #18
   13428:	andeq	r3, r1, r8, lsr #9
   1342c:	andeq	r3, r1, r8, ror #18
   13430:	andeq	r3, r1, r8, lsr #9
   13434:	andeq	r3, r1, r8, ror #18
   13438:	andeq	r3, r1, r8, lsr #9
   1343c:	andeq	r3, r1, r8, lsr #9
   13440:	andeq	r3, r1, r8, lsr #9
   13444:	andeq	r3, r1, r8, lsr #9
   13448:	andeq	r3, r1, r8, lsr #9
   1344c:	andeq	r3, r1, r8, lsr #9
   13450:	andeq	r3, r1, r8, lsr #9
   13454:	andeq	r3, r1, r8, lsr #9
   13458:	andeq	r3, r1, r8, lsr #9
   1345c:	andeq	r3, r1, r8, lsr #9
   13460:	andeq	r3, r1, r8, lsr #9
   13464:	andeq	r3, r1, r8, lsr #9
   13468:	andeq	r3, r1, r8, lsr #9
   1346c:	andeq	r3, r1, r8, lsr #9
   13470:	andeq	r3, r1, r8, lsr #9
   13474:	andeq	r3, r1, r8, lsr #9
   13478:	andeq	r3, r1, r8, lsr #9
   1347c:	andeq	r3, r1, r8, lsr #9
   13480:	andeq	r3, r1, r8, lsr #9
   13484:	andeq	r3, r1, r8, lsr #9
   13488:	andeq	r3, r1, r8, lsr #9
   1348c:	andeq	r3, r1, r8, lsr #9
   13490:	andeq	r3, r1, r8, lsr #9
   13494:	andeq	r3, r1, r8, lsr #9
   13498:	andeq	r3, r1, r8, lsr #9
   1349c:	andeq	r3, r1, r8, lsr #9
   134a0:	andeq	r3, r1, r8, lsr #9
   134a4:	andeq	r3, r1, r8, ror #18
   134a8:	add	r2, r2, #1
   134ac:	cmp	r2, r0
   134b0:	bcc	13408 <__assert_fail@plt+0x2050>
   134b4:	ldr	r7, [sp, #44]	; 0x2c
   134b8:	add	r7, r0, r7
   134bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   134c0:	bl	111c0 <iswprint@plt>
   134c4:	cmp	r0, #0
   134c8:	movwne	r0, #1
   134cc:	and	r9, r9, r0
   134d0:	sub	r4, fp, #40	; 0x28
   134d4:	mov	r0, r4
   134d8:	bl	11178 <mbsinit@plt>
   134dc:	ldr	lr, [sp, #28]
   134e0:	cmp	r0, #0
   134e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   134e8:	beq	133a0 <__assert_fail@plt+0x1fe8>
   134ec:	b	13888 <__assert_fail@plt+0x24d0>
   134f0:	ldr	r0, [sp, #32]
   134f4:	cmp	r0, #0
   134f8:	beq	13590 <__assert_fail@plt+0x21d8>
   134fc:	add	r0, r6, #2
   13500:	cmp	r0, lr
   13504:	bcs	13590 <__assert_fail@plt+0x21d8>
   13508:	add	r1, ip, r6
   1350c:	ldrb	r1, [r1, #1]
   13510:	cmp	r1, #63	; 0x3f
   13514:	bne	13590 <__assert_fail@plt+0x21d8>
   13518:	ldrb	r9, [ip, r0]
   1351c:	sub	r2, r9, #33	; 0x21
   13520:	cmp	r2, #29
   13524:	bhi	13590 <__assert_fail@plt+0x21d8>
   13528:	mov	r3, #1
   1352c:	movw	r1, #20929	; 0x51c1
   13530:	movt	r1, #14336	; 0x3800
   13534:	tst	r1, r3, lsl r2
   13538:	beq	13590 <__assert_fail@plt+0x21d8>
   1353c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13540:	tst	r1, #1
   13544:	bne	13970 <__assert_fail@plt+0x25b8>
   13548:	cmp	r8, r4
   1354c:	movcc	r1, #63	; 0x3f
   13550:	strbcc	r1, [r7, r8]
   13554:	add	r2, r8, #1
   13558:	cmp	r2, r4
   1355c:	movcc	r1, #34	; 0x22
   13560:	strbcc	r1, [r7, r2]
   13564:	add	r2, r8, #2
   13568:	cmp	r2, r4
   1356c:	movcc	r1, #34	; 0x22
   13570:	strbcc	r1, [r7, r2]
   13574:	add	r2, r8, #3
   13578:	cmp	r2, r4
   1357c:	movcc	r1, #63	; 0x3f
   13580:	strbcc	r1, [r7, r2]
   13584:	add	r8, r8, #4
   13588:	mov	r6, r0
   1358c:	mov	r5, r9
   13590:	mov	r9, #0
   13594:	b	12fe4 <__assert_fail@plt+0x1c2c>
   13598:	add	r1, r2, r6
   1359c:	str	r1, [sp, #44]	; 0x2c
   135a0:	add	r1, r6, #1
   135a4:	mov	r3, #0
   135a8:	ldr	lr, [sp, #28]
   135ac:	ldr	r6, [fp, #-60]	; 0xffffffc4
   135b0:	tst	r0, #1
   135b4:	bne	136a8 <__assert_fail@plt+0x22f0>
   135b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135bc:	tst	r2, #1
   135c0:	bne	13970 <__assert_fail@plt+0x25b8>
   135c4:	cmp	r6, #2
   135c8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   135cc:	movwne	r3, #1
   135d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135d4:	orr	r3, r3, r2
   135d8:	tst	r3, #1
   135dc:	bne	13618 <__assert_fail@plt+0x2260>
   135e0:	cmp	r8, r4
   135e4:	movcc	r2, #39	; 0x27
   135e8:	strbcc	r2, [r7, r8]
   135ec:	add	r3, r8, #1
   135f0:	cmp	r3, r4
   135f4:	movcc	r2, #36	; 0x24
   135f8:	strbcc	r2, [r7, r3]
   135fc:	add	r3, r8, #2
   13600:	cmp	r3, r4
   13604:	movcc	r2, #39	; 0x27
   13608:	strbcc	r2, [r7, r3]
   1360c:	add	r8, r8, #3
   13610:	mov	r2, #1
   13614:	str	r2, [fp, #-56]	; 0xffffffc8
   13618:	cmp	r8, r4
   1361c:	movcc	r2, #92	; 0x5c
   13620:	strbcc	r2, [r7, r8]
   13624:	add	r3, r8, #1
   13628:	cmp	r3, r4
   1362c:	bcs	1364c <__assert_fail@plt+0x2294>
   13630:	and	r7, r5, #192	; 0xc0
   13634:	mov	r2, #48	; 0x30
   13638:	orr	r7, r2, r7, lsr #6
   1363c:	ldr	r6, [sp, #80]	; 0x50
   13640:	strb	r7, [r6, r3]
   13644:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13648:	ldr	r7, [sp, #80]	; 0x50
   1364c:	add	r3, r8, #2
   13650:	cmp	r3, r4
   13654:	bcs	13674 <__assert_fail@plt+0x22bc>
   13658:	lsr	r7, r5, #3
   1365c:	mov	r2, #6
   13660:	bfi	r7, r2, #3, #29
   13664:	ldr	r6, [sp, #80]	; 0x50
   13668:	strb	r7, [r6, r3]
   1366c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13670:	ldr	r7, [sp, #80]	; 0x50
   13674:	mov	r2, #6
   13678:	bfi	r5, r2, #3, #29
   1367c:	add	r8, r8, #3
   13680:	mov	r3, #1
   13684:	b	136cc <__assert_fail@plt+0x2314>
   13688:	ldr	r7, [sp, #80]	; 0x50
   1368c:	cmp	r8, r4
   13690:	strbcc	r5, [r7, r8]
   13694:	ldrb	r5, [ip, r1]
   13698:	add	r1, r1, #1
   1369c:	add	r8, r8, #1
   136a0:	tst	r0, #1
   136a4:	beq	135b8 <__assert_fail@plt+0x2200>
   136a8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   136ac:	tst	r2, #1
   136b0:	beq	136c4 <__assert_fail@plt+0x230c>
   136b4:	cmp	r8, r4
   136b8:	movcc	r2, #92	; 0x5c
   136bc:	strbcc	r2, [r7, r8]
   136c0:	add	r8, r8, #1
   136c4:	mov	r2, #0
   136c8:	str	r2, [fp, #-52]	; 0xffffffcc
   136cc:	and	sl, r3, #1
   136d0:	ldr	r2, [sp, #44]	; 0x2c
   136d4:	cmp	r2, r1
   136d8:	bls	137e4 <__assert_fail@plt+0x242c>
   136dc:	cmp	sl, #0
   136e0:	movwne	sl, #1
   136e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   136e8:	mvn	r7, r2
   136ec:	orr	r7, r7, sl
   136f0:	tst	r7, #1
   136f4:	bne	13688 <__assert_fail@plt+0x22d0>
   136f8:	cmp	r8, r4
   136fc:	ldrcc	r7, [sp, #80]	; 0x50
   13700:	movcc	r2, #39	; 0x27
   13704:	strbcc	r2, [r7, r8]
   13708:	add	r7, r8, #1
   1370c:	cmp	r7, r4
   13710:	ldrcc	r6, [sp, #80]	; 0x50
   13714:	movcc	r2, #39	; 0x27
   13718:	strbcc	r2, [r6, r7]
   1371c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13720:	add	r8, r8, #2
   13724:	mov	r2, #0
   13728:	str	r2, [fp, #-56]	; 0xffffffc8
   1372c:	b	13688 <__assert_fail@plt+0x22d0>
   13730:	cmp	r8, r4
   13734:	movcc	r0, #39	; 0x27
   13738:	strbcc	r0, [r7, r8]
   1373c:	add	r0, r8, #1
   13740:	cmp	r0, r4
   13744:	movcc	r1, #36	; 0x24
   13748:	strbcc	r1, [r7, r0]
   1374c:	add	r0, r8, #2
   13750:	cmp	r0, r4
   13754:	movcc	r1, #39	; 0x27
   13758:	strbcc	r1, [r7, r0]
   1375c:	add	r0, r8, #3
   13760:	mov	r2, #1
   13764:	cmp	r0, r4
   13768:	movcc	r1, #92	; 0x5c
   1376c:	strbcc	r1, [r7, r0]
   13770:	str	r2, [fp, #-56]	; 0xffffffc8
   13774:	add	r8, r0, #1
   13778:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1377c:	cmp	r1, #2
   13780:	beq	137d4 <__assert_fail@plt+0x241c>
   13784:	add	r1, r6, #1
   13788:	mov	r9, #0
   1378c:	mov	sl, #1
   13790:	mov	r5, #48	; 0x30
   13794:	cmp	r1, lr
   13798:	bcs	12fe4 <__assert_fail@plt+0x1c2c>
   1379c:	ldrb	r1, [ip, r1]
   137a0:	sub	r1, r1, #48	; 0x30
   137a4:	uxtb	r1, r1
   137a8:	cmp	r1, #9
   137ac:	bhi	12fe4 <__assert_fail@plt+0x1c2c>
   137b0:	cmp	r8, r4
   137b4:	movcc	r1, #48	; 0x30
   137b8:	strbcc	r1, [r7, r8]
   137bc:	add	r1, r0, #2
   137c0:	cmp	r1, r4
   137c4:	movcc	r2, #48	; 0x30
   137c8:	strbcc	r2, [r7, r1]
   137cc:	add	r8, r0, #3
   137d0:	b	12fe4 <__assert_fail@plt+0x1c2c>
   137d4:	mov	r0, #48	; 0x30
   137d8:	mov	sl, #1
   137dc:	mov	r9, #0
   137e0:	b	13290 <__assert_fail@plt+0x1ed8>
   137e4:	sub	r6, r1, #1
   137e8:	cmp	sl, #0
   137ec:	movwne	sl, #1
   137f0:	mov	r0, r5
   137f4:	cmp	sl, #0
   137f8:	bne	13838 <__assert_fail@plt+0x2480>
   137fc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13800:	tst	r1, #1
   13804:	beq	13838 <__assert_fail@plt+0x2480>
   13808:	cmp	r8, r4
   1380c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13810:	movcc	r1, #39	; 0x27
   13814:	strbcc	r1, [r7, r8]
   13818:	add	r1, r8, #1
   1381c:	cmp	r1, r4
   13820:	movcc	r2, #39	; 0x27
   13824:	strbcc	r2, [r7, r1]
   13828:	add	r8, r8, #2
   1382c:	mov	r1, #0
   13830:	str	r1, [fp, #-56]	; 0xffffffc8
   13834:	b	1331c <__assert_fail@plt+0x1f64>
   13838:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1383c:	b	1331c <__assert_fail@plt+0x1f64>
   13840:	mov	r9, #0
   13844:	b	13880 <__assert_fail@plt+0x24c8>
   13848:	mov	r9, #0
   1384c:	cmp	r7, lr
   13850:	bcs	13880 <__assert_fail@plt+0x24c8>
   13854:	ldr	ip, [fp, #-84]	; 0xffffffac
   13858:	ldr	r7, [sp, #44]	; 0x2c
   1385c:	ldr	r0, [sp, #20]
   13860:	ldrb	r0, [r0, r7]
   13864:	cmp	r0, #0
   13868:	beq	13888 <__assert_fail@plt+0x24d0>
   1386c:	add	r7, r7, #1
   13870:	add	r0, r6, r7
   13874:	cmp	r0, lr
   13878:	bcc	1385c <__assert_fail@plt+0x24a4>
   1387c:	b	13888 <__assert_fail@plt+0x24d0>
   13880:	ldr	ip, [fp, #-84]	; 0xffffffac
   13884:	ldr	r7, [sp, #44]	; 0x2c
   13888:	mov	r1, r7
   1388c:	ldr	r7, [sp, #80]	; 0x50
   13890:	b	131b8 <__assert_fail@plt+0x1e00>
   13894:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13898:	eor	r0, r1, #2
   1389c:	orr	r0, r0, r8
   138a0:	clz	r0, r0
   138a4:	lsr	r0, r0, #5
   138a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   138ac:	tst	r2, r0
   138b0:	bne	13970 <__assert_fail@plt+0x25b8>
   138b4:	cmp	r1, #2
   138b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   138bc:	movwne	r0, #1
   138c0:	orr	r0, r2, r0
   138c4:	tst	r0, #1
   138c8:	ldreq	r0, [sp, #56]	; 0x38
   138cc:	eoreq	r0, r0, #1
   138d0:	tsteq	r0, #1
   138d4:	bne	13908 <__assert_fail@plt+0x2550>
   138d8:	mov	r9, lr
   138dc:	tst	r5, #1
   138e0:	bne	139d8 <__assert_fail@plt+0x2620>
   138e4:	ldr	r0, [sp, #72]	; 0x48
   138e8:	cmp	r0, #0
   138ec:	beq	13908 <__assert_fail@plt+0x2550>
   138f0:	mov	r5, #0
   138f4:	cmp	r4, #0
   138f8:	ldr	r0, [sp, #84]	; 0x54
   138fc:	mov	sl, r2
   13900:	ldr	r6, [sp, #72]	; 0x48
   13904:	beq	12aa0 <__assert_fail@plt+0x16e8>
   13908:	ldr	r1, [sp, #92]	; 0x5c
   1390c:	clz	r0, r1
   13910:	lsr	r0, r0, #5
   13914:	orr	r0, r0, r2
   13918:	tst	r0, #1
   1391c:	bne	13948 <__assert_fail@plt+0x2590>
   13920:	ldrb	r0, [r1]
   13924:	cmp	r0, #0
   13928:	beq	13948 <__assert_fail@plt+0x2590>
   1392c:	add	r1, r1, #1
   13930:	cmp	r8, r4
   13934:	strbcc	r0, [r7, r8]
   13938:	add	r8, r8, #1
   1393c:	ldrb	r0, [r1], #1
   13940:	cmp	r0, #0
   13944:	bne	13930 <__assert_fail@plt+0x2578>
   13948:	cmp	r8, r4
   1394c:	movcc	r0, #0
   13950:	strbcc	r0, [r7, r8]
   13954:	b	139cc <__assert_fail@plt+0x2614>
   13958:	ldr	ip, [fp, #-84]	; 0xffffffac
   1395c:	mov	lr, r4
   13960:	mov	r4, r5
   13964:	b	13970 <__assert_fail@plt+0x25b8>
   13968:	ldr	r7, [sp, #80]	; 0x50
   1396c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13970:	mov	r0, #0
   13974:	ldr	r1, [fp, #12]
   13978:	bic	r1, r1, #2
   1397c:	ldr	r2, [sp, #84]	; 0x54
   13980:	tst	r2, #1
   13984:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13988:	mov	r2, r3
   1398c:	movwne	r2, #4
   13990:	cmp	r3, #2
   13994:	movne	r2, r3
   13998:	str	r2, [sp]
   1399c:	str	r1, [sp, #4]
   139a0:	str	r0, [sp, #8]
   139a4:	ldr	r0, [sp, #68]	; 0x44
   139a8:	str	r0, [sp, #12]
   139ac:	ldr	r0, [sp, #76]	; 0x4c
   139b0:	str	r0, [sp, #16]
   139b4:	mov	r0, r7
   139b8:	mov	r1, r4
   139bc:	mov	r2, ip
   139c0:	mov	r3, lr
   139c4:	bl	12a18 <__assert_fail@plt+0x1660>
   139c8:	mov	r8, r0
   139cc:	mov	r0, r8
   139d0:	sub	sp, fp, #28
   139d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d8:	mov	r0, #5
   139dc:	str	r0, [sp]
   139e0:	ldr	r0, [fp, #12]
   139e4:	str	r0, [sp, #4]
   139e8:	ldr	r0, [fp, #16]
   139ec:	str	r0, [sp, #8]
   139f0:	ldr	r0, [sp, #68]	; 0x44
   139f4:	str	r0, [sp, #12]
   139f8:	ldr	r0, [sp, #76]	; 0x4c
   139fc:	str	r0, [sp, #16]
   13a00:	mov	r0, r7
   13a04:	ldr	r1, [sp, #72]	; 0x48
   13a08:	ldr	r2, [fp, #-84]	; 0xffffffac
   13a0c:	mov	r3, r9
   13a10:	b	139c4 <__assert_fail@plt+0x260c>
   13a14:	bl	11388 <abort@plt>
   13a18:	mov	r3, r2
   13a1c:	mov	r2, #0
   13a20:	b	13a24 <__assert_fail@plt+0x266c>
   13a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a28:	add	fp, sp, #28
   13a2c:	sub	sp, sp, #36	; 0x24
   13a30:	mov	r4, r2
   13a34:	str	r2, [sp, #24]
   13a38:	mov	r5, r1
   13a3c:	mov	r6, r0
   13a40:	str	r0, [sp, #20]
   13a44:	movw	r8, #33256	; 0x81e8
   13a48:	movt	r8, #2
   13a4c:	cmp	r3, #0
   13a50:	movne	r8, r3
   13a54:	bl	112bc <__errno_location@plt>
   13a58:	str	r0, [sp, #28]
   13a5c:	ldm	r8, {r3, r9}
   13a60:	ldr	r1, [r8, #40]	; 0x28
   13a64:	ldr	r2, [r8, #44]	; 0x2c
   13a68:	ldr	r7, [r0]
   13a6c:	str	r7, [sp, #32]
   13a70:	add	sl, r8, #8
   13a74:	cmp	r4, #0
   13a78:	orreq	r9, r9, #1
   13a7c:	stm	sp, {r3, r9, sl}
   13a80:	str	r1, [sp, #12]
   13a84:	str	r2, [sp, #16]
   13a88:	mov	r0, #0
   13a8c:	mov	r1, #0
   13a90:	mov	r2, r6
   13a94:	mov	r3, r5
   13a98:	mov	r7, r5
   13a9c:	bl	12a18 <__assert_fail@plt+0x1660>
   13aa0:	mov	r5, r0
   13aa4:	add	r4, r0, #1
   13aa8:	mov	r0, r4
   13aac:	bl	14cd8 <__assert_fail@plt+0x3920>
   13ab0:	mov	r6, r0
   13ab4:	ldr	r0, [r8]
   13ab8:	ldr	r1, [r8, #40]	; 0x28
   13abc:	ldr	r2, [r8, #44]	; 0x2c
   13ac0:	stm	sp, {r0, r9, sl}
   13ac4:	str	r1, [sp, #12]
   13ac8:	str	r2, [sp, #16]
   13acc:	mov	r0, r6
   13ad0:	mov	r1, r4
   13ad4:	ldr	r2, [sp, #20]
   13ad8:	mov	r3, r7
   13adc:	bl	12a18 <__assert_fail@plt+0x1660>
   13ae0:	ldr	r0, [sp, #24]
   13ae4:	ldr	r1, [sp, #32]
   13ae8:	ldr	r2, [sp, #28]
   13aec:	str	r1, [r2]
   13af0:	cmp	r0, #0
   13af4:	strne	r5, [r0]
   13af8:	mov	r0, r6
   13afc:	sub	sp, fp, #28
   13b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b08:	add	fp, sp, #24
   13b0c:	movw	r8, #33056	; 0x8120
   13b10:	movt	r8, #2
   13b14:	ldr	r4, [r8]
   13b18:	movw	r5, #33060	; 0x8124
   13b1c:	movt	r5, #2
   13b20:	ldr	r0, [r5]
   13b24:	cmp	r0, #2
   13b28:	blt	13b54 <__assert_fail@plt+0x279c>
   13b2c:	add	r7, r4, #12
   13b30:	mov	r6, #0
   13b34:	ldr	r0, [r7, r6, lsl #3]
   13b38:	bl	12758 <__assert_fail@plt+0x13a0>
   13b3c:	add	r0, r6, #1
   13b40:	ldr	r1, [r5]
   13b44:	add	r2, r6, #2
   13b48:	cmp	r2, r1
   13b4c:	mov	r6, r0
   13b50:	blt	13b34 <__assert_fail@plt+0x277c>
   13b54:	ldr	r0, [r4, #4]
   13b58:	movw	r7, #33304	; 0x8218
   13b5c:	movt	r7, #2
   13b60:	cmp	r0, r7
   13b64:	beq	13b7c <__assert_fail@plt+0x27c4>
   13b68:	bl	12758 <__assert_fail@plt+0x13a0>
   13b6c:	movw	r0, #33064	; 0x8128
   13b70:	movt	r0, #2
   13b74:	mov	r6, #256	; 0x100
   13b78:	strd	r6, [r0]
   13b7c:	movw	r6, #33064	; 0x8128
   13b80:	movt	r6, #2
   13b84:	cmp	r4, r6
   13b88:	beq	13b98 <__assert_fail@plt+0x27e0>
   13b8c:	mov	r0, r4
   13b90:	bl	12758 <__assert_fail@plt+0x13a0>
   13b94:	str	r6, [r8]
   13b98:	mov	r0, #1
   13b9c:	str	r0, [r5]
   13ba0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ba4:	movw	r3, #33256	; 0x81e8
   13ba8:	movt	r3, #2
   13bac:	mvn	r2, #0
   13bb0:	b	13bb4 <__assert_fail@plt+0x27fc>
   13bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bb8:	add	fp, sp, #28
   13bbc:	sub	sp, sp, #44	; 0x2c
   13bc0:	mov	r7, r3
   13bc4:	str	r2, [sp, #36]	; 0x24
   13bc8:	str	r1, [sp, #32]
   13bcc:	mov	r5, r0
   13bd0:	bl	112bc <__errno_location@plt>
   13bd4:	cmp	r5, #0
   13bd8:	blt	13d44 <__assert_fail@plt+0x298c>
   13bdc:	cmn	r5, #-2147483647	; 0x80000001
   13be0:	beq	13d44 <__assert_fail@plt+0x298c>
   13be4:	movw	r4, #33056	; 0x8120
   13be8:	movt	r4, #2
   13bec:	ldr	r6, [r4]
   13bf0:	str	r0, [sp, #28]
   13bf4:	ldr	r0, [r0]
   13bf8:	str	r0, [sp, #24]
   13bfc:	movw	r8, #33060	; 0x8124
   13c00:	movt	r8, #2
   13c04:	ldr	r1, [r8]
   13c08:	cmp	r1, r5
   13c0c:	ble	13c18 <__assert_fail@plt+0x2860>
   13c10:	mov	sl, r6
   13c14:	b	13c80 <__assert_fail@plt+0x28c8>
   13c18:	str	r1, [fp, #-32]	; 0xffffffe0
   13c1c:	mov	r0, #8
   13c20:	str	r0, [sp]
   13c24:	movw	r9, #33064	; 0x8128
   13c28:	movt	r9, #2
   13c2c:	subs	r0, r6, r9
   13c30:	movne	r0, r6
   13c34:	add	r2, r5, #1
   13c38:	sub	r2, r2, r1
   13c3c:	sub	r1, fp, #32
   13c40:	mvn	r3, #-2147483648	; 0x80000000
   13c44:	bl	14dc0 <__assert_fail@plt+0x3a08>
   13c48:	mov	sl, r0
   13c4c:	str	r0, [r4]
   13c50:	cmp	r6, r9
   13c54:	ldrdeq	r0, [r9]
   13c58:	stmeq	sl, {r0, r1}
   13c5c:	ldr	r1, [r8]
   13c60:	add	r0, sl, r1, lsl #3
   13c64:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c68:	sub	r1, r2, r1
   13c6c:	lsl	r2, r1, #3
   13c70:	mov	r1, #0
   13c74:	bl	112ec <memset@plt>
   13c78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c7c:	str	r0, [r8]
   13c80:	mov	r9, sl
   13c84:	ldr	r6, [r9, r5, lsl #3]!
   13c88:	ldr	r4, [r9, #4]!
   13c8c:	ldm	r7, {r0, r1}
   13c90:	ldr	r2, [r7, #40]	; 0x28
   13c94:	ldr	r3, [r7, #44]	; 0x2c
   13c98:	orr	r8, r1, #1
   13c9c:	add	r1, r7, #8
   13ca0:	stm	sp, {r0, r8}
   13ca4:	str	r1, [sp, #20]
   13ca8:	add	r0, sp, #8
   13cac:	stm	r0, {r1, r2, r3}
   13cb0:	mov	r0, r4
   13cb4:	mov	r1, r6
   13cb8:	ldr	r2, [sp, #32]
   13cbc:	ldr	r3, [sp, #36]	; 0x24
   13cc0:	bl	12a18 <__assert_fail@plt+0x1660>
   13cc4:	cmp	r6, r0
   13cc8:	bhi	13d2c <__assert_fail@plt+0x2974>
   13ccc:	add	r6, r0, #1
   13cd0:	str	r6, [sl, r5, lsl #3]
   13cd4:	movw	r0, #33304	; 0x8218
   13cd8:	movt	r0, #2
   13cdc:	cmp	r4, r0
   13ce0:	beq	13cec <__assert_fail@plt+0x2934>
   13ce4:	mov	r0, r4
   13ce8:	bl	12758 <__assert_fail@plt+0x13a0>
   13cec:	mov	r0, r6
   13cf0:	bl	14cd8 <__assert_fail@plt+0x3920>
   13cf4:	mov	r4, r0
   13cf8:	str	r0, [r9]
   13cfc:	ldr	r0, [r7]
   13d00:	ldr	r1, [r7, #40]	; 0x28
   13d04:	ldr	r2, [r7, #44]	; 0x2c
   13d08:	stm	sp, {r0, r8}
   13d0c:	ldr	r0, [sp, #20]
   13d10:	add	r3, sp, #8
   13d14:	stm	r3, {r0, r1, r2}
   13d18:	mov	r0, r4
   13d1c:	mov	r1, r6
   13d20:	ldr	r2, [sp, #32]
   13d24:	ldr	r3, [sp, #36]	; 0x24
   13d28:	bl	12a18 <__assert_fail@plt+0x1660>
   13d2c:	ldr	r0, [sp, #28]
   13d30:	ldr	r1, [sp, #24]
   13d34:	str	r1, [r0]
   13d38:	mov	r0, r4
   13d3c:	sub	sp, fp, #28
   13d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d44:	bl	11388 <abort@plt>
   13d48:	movw	r3, #33256	; 0x81e8
   13d4c:	movt	r3, #2
   13d50:	b	13bb4 <__assert_fail@plt+0x27fc>
   13d54:	mov	r1, r0
   13d58:	mov	r0, #0
   13d5c:	b	13ba4 <__assert_fail@plt+0x27ec>
   13d60:	mov	r2, r1
   13d64:	mov	r1, r0
   13d68:	mov	r0, #0
   13d6c:	b	13d48 <__assert_fail@plt+0x2990>
   13d70:	push	{r4, r5, r6, sl, fp, lr}
   13d74:	add	fp, sp, #16
   13d78:	sub	sp, sp, #48	; 0x30
   13d7c:	mov	r4, r2
   13d80:	mov	r5, r0
   13d84:	mov	r6, sp
   13d88:	mov	r0, r6
   13d8c:	bl	13dac <__assert_fail@plt+0x29f4>
   13d90:	mov	r0, r5
   13d94:	mov	r1, r4
   13d98:	mvn	r2, #0
   13d9c:	mov	r3, r6
   13da0:	bl	13bb4 <__assert_fail@plt+0x27fc>
   13da4:	sub	sp, fp, #16
   13da8:	pop	{r4, r5, r6, sl, fp, pc}
   13dac:	vmov.i32	q8, #0	; 0x00000000
   13db0:	mov	r2, #32
   13db4:	mov	r3, r0
   13db8:	vst1.32	{d16-d17}, [r3], r2
   13dbc:	vst1.32	{d16-d17}, [r3]
   13dc0:	add	r2, r0, #16
   13dc4:	vst1.32	{d16-d17}, [r2]
   13dc8:	cmp	r1, #10
   13dcc:	strne	r1, [r0]
   13dd0:	bxne	lr
   13dd4:	push	{fp, lr}
   13dd8:	mov	fp, sp
   13ddc:	bl	11388 <abort@plt>
   13de0:	push	{r4, r5, r6, r7, fp, lr}
   13de4:	add	fp, sp, #16
   13de8:	sub	sp, sp, #48	; 0x30
   13dec:	mov	r4, r3
   13df0:	mov	r5, r2
   13df4:	mov	r6, r0
   13df8:	mov	r7, sp
   13dfc:	mov	r0, r7
   13e00:	bl	13dac <__assert_fail@plt+0x29f4>
   13e04:	mov	r0, r6
   13e08:	mov	r1, r5
   13e0c:	mov	r2, r4
   13e10:	mov	r3, r7
   13e14:	bl	13bb4 <__assert_fail@plt+0x27fc>
   13e18:	sub	sp, fp, #16
   13e1c:	pop	{r4, r5, r6, r7, fp, pc}
   13e20:	mov	r2, r1
   13e24:	mov	r1, r0
   13e28:	mov	r0, #0
   13e2c:	b	13d70 <__assert_fail@plt+0x29b8>
   13e30:	mov	r3, r2
   13e34:	mov	r2, r1
   13e38:	mov	r1, r0
   13e3c:	mov	r0, #0
   13e40:	b	13de0 <__assert_fail@plt+0x2a28>
   13e44:	push	{r4, r5, r6, sl, fp, lr}
   13e48:	add	fp, sp, #16
   13e4c:	sub	sp, sp, #48	; 0x30
   13e50:	mov	r4, r1
   13e54:	mov	r5, r0
   13e58:	mov	r0, #32
   13e5c:	movw	r1, #33256	; 0x81e8
   13e60:	movt	r1, #2
   13e64:	add	r3, r1, #16
   13e68:	vld1.64	{d16-d17}, [r1], r0
   13e6c:	mov	r6, sp
   13e70:	vld1.64	{d18-d19}, [r3]
   13e74:	add	r3, r6, #16
   13e78:	vld1.64	{d20-d21}, [r1]
   13e7c:	vst1.64	{d18-d19}, [r3]
   13e80:	mov	r1, r6
   13e84:	vst1.64	{d16-d17}, [r1], r0
   13e88:	vst1.64	{d20-d21}, [r1]
   13e8c:	mov	r0, r6
   13e90:	mov	r1, r2
   13e94:	mov	r2, #1
   13e98:	bl	1290c <__assert_fail@plt+0x1554>
   13e9c:	mov	r0, #0
   13ea0:	mov	r1, r5
   13ea4:	mov	r2, r4
   13ea8:	mov	r3, r6
   13eac:	bl	13bb4 <__assert_fail@plt+0x27fc>
   13eb0:	sub	sp, fp, #16
   13eb4:	pop	{r4, r5, r6, sl, fp, pc}
   13eb8:	mov	r2, r1
   13ebc:	mvn	r1, #0
   13ec0:	b	13e44 <__assert_fail@plt+0x2a8c>
   13ec4:	mov	r1, #58	; 0x3a
   13ec8:	b	13eb8 <__assert_fail@plt+0x2b00>
   13ecc:	mov	r2, #58	; 0x3a
   13ed0:	b	13e44 <__assert_fail@plt+0x2a8c>
   13ed4:	push	{r4, r5, r6, sl, fp, lr}
   13ed8:	add	fp, sp, #16
   13edc:	sub	sp, sp, #48	; 0x30
   13ee0:	mov	r4, r2
   13ee4:	mov	r5, r0
   13ee8:	mov	r6, sp
   13eec:	mov	r0, r6
   13ef0:	bl	13dac <__assert_fail@plt+0x29f4>
   13ef4:	mov	r0, r6
   13ef8:	mov	r1, #58	; 0x3a
   13efc:	mov	r2, #1
   13f00:	bl	1290c <__assert_fail@plt+0x1554>
   13f04:	mov	r0, r5
   13f08:	mov	r1, r4
   13f0c:	mvn	r2, #0
   13f10:	mov	r3, r6
   13f14:	bl	13bb4 <__assert_fail@plt+0x27fc>
   13f18:	sub	sp, fp, #16
   13f1c:	pop	{r4, r5, r6, sl, fp, pc}
   13f20:	push	{fp, lr}
   13f24:	mov	fp, sp
   13f28:	sub	sp, sp, #8
   13f2c:	mvn	ip, #0
   13f30:	str	ip, [sp]
   13f34:	bl	13f40 <__assert_fail@plt+0x2b88>
   13f38:	mov	sp, fp
   13f3c:	pop	{fp, pc}
   13f40:	push	{r4, r5, r6, r7, fp, lr}
   13f44:	add	fp, sp, #16
   13f48:	sub	sp, sp, #48	; 0x30
   13f4c:	mov	r7, r3
   13f50:	mov	r5, r0
   13f54:	mov	r0, #32
   13f58:	movw	r3, #33256	; 0x81e8
   13f5c:	movt	r3, #2
   13f60:	add	r4, r3, #16
   13f64:	vld1.64	{d16-d17}, [r3], r0
   13f68:	mov	r6, sp
   13f6c:	vld1.64	{d18-d19}, [r4]
   13f70:	add	r4, r6, #16
   13f74:	vld1.64	{d20-d21}, [r3]
   13f78:	vst1.64	{d18-d19}, [r4]
   13f7c:	mov	r3, r6
   13f80:	vst1.64	{d16-d17}, [r3], r0
   13f84:	vst1.64	{d20-d21}, [r3]
   13f88:	mov	r0, r6
   13f8c:	bl	12964 <__assert_fail@plt+0x15ac>
   13f90:	ldr	r2, [fp, #8]
   13f94:	mov	r0, r5
   13f98:	mov	r1, r7
   13f9c:	mov	r3, r6
   13fa0:	bl	13bb4 <__assert_fail@plt+0x27fc>
   13fa4:	sub	sp, fp, #16
   13fa8:	pop	{r4, r5, r6, r7, fp, pc}
   13fac:	mov	r3, r2
   13fb0:	mov	r2, r1
   13fb4:	mov	r1, r0
   13fb8:	mov	r0, #0
   13fbc:	b	13f20 <__assert_fail@plt+0x2b68>
   13fc0:	push	{fp, lr}
   13fc4:	mov	fp, sp
   13fc8:	sub	sp, sp, #8
   13fcc:	mov	ip, r2
   13fd0:	mov	r2, r1
   13fd4:	mov	r1, r0
   13fd8:	str	r3, [sp]
   13fdc:	mov	r0, #0
   13fe0:	mov	r3, ip
   13fe4:	bl	13f40 <__assert_fail@plt+0x2b88>
   13fe8:	mov	sp, fp
   13fec:	pop	{fp, pc}
   13ff0:	movw	r3, #33072	; 0x8130
   13ff4:	movt	r3, #2
   13ff8:	b	13bb4 <__assert_fail@plt+0x27fc>
   13ffc:	mov	r2, r1
   14000:	mov	r1, r0
   14004:	mov	r0, #0
   14008:	b	13ff0 <__assert_fail@plt+0x2c38>
   1400c:	mvn	r2, #0
   14010:	b	13ff0 <__assert_fail@plt+0x2c38>
   14014:	mov	r1, r0
   14018:	mov	r0, #0
   1401c:	b	1400c <__assert_fail@plt+0x2c54>
   14020:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14024:	add	fp, sp, #24
   14028:	sub	sp, sp, #16
   1402c:	mov	r4, r1
   14030:	mov	r5, r0
   14034:	mov	r7, #0
   14038:	mov	r0, #0
   1403c:	mov	r1, r5
   14040:	mov	r2, #5
   14044:	bl	11190 <dcgettext@plt>
   14048:	cmp	r0, r5
   1404c:	beq	14058 <__assert_fail@plt+0x2ca0>
   14050:	sub	sp, fp, #24
   14054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14058:	bl	15c44 <__assert_fail@plt+0x488c>
   1405c:	mov	r6, r0
   14060:	mov	r8, #56	; 0x38
   14064:	mov	r0, #45	; 0x2d
   14068:	stm	sp, {r0, r8}
   1406c:	str	r7, [sp, #8]
   14070:	str	r7, [sp, #12]
   14074:	mov	r0, r6
   14078:	mov	r1, #85	; 0x55
   1407c:	mov	r2, #84	; 0x54
   14080:	mov	r3, #70	; 0x46
   14084:	bl	1411c <__assert_fail@plt+0x2d64>
   14088:	cmp	r0, #0
   1408c:	beq	140a8 <__assert_fail@plt+0x2cf0>
   14090:	ldrb	r1, [r5]
   14094:	movw	r2, #27434	; 0x6b2a
   14098:	movt	r2, #1
   1409c:	movw	r0, #27438	; 0x6b2e
   140a0:	movt	r0, #1
   140a4:	b	140ec <__assert_fail@plt+0x2d34>
   140a8:	mov	r0, #48	; 0x30
   140ac:	mov	r1, #51	; 0x33
   140b0:	str	r8, [sp]
   140b4:	stmib	sp, {r0, r1}
   140b8:	str	r0, [sp, #12]
   140bc:	mov	r0, r6
   140c0:	mov	r1, #71	; 0x47
   140c4:	mov	r2, #66	; 0x42
   140c8:	mov	r3, #49	; 0x31
   140cc:	bl	1411c <__assert_fail@plt+0x2d64>
   140d0:	cmp	r0, #0
   140d4:	beq	140fc <__assert_fail@plt+0x2d44>
   140d8:	ldrb	r1, [r5]
   140dc:	movw	r2, #27442	; 0x6b32
   140e0:	movt	r2, #1
   140e4:	movw	r0, #27446	; 0x6b36
   140e8:	movt	r0, #1
   140ec:	cmp	r1, #96	; 0x60
   140f0:	moveq	r0, r2
   140f4:	sub	sp, fp, #24
   140f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140fc:	movw	r1, #27428	; 0x6b24
   14100:	movt	r1, #1
   14104:	movw	r0, #27432	; 0x6b28
   14108:	movt	r0, #1
   1410c:	cmp	r4, #9
   14110:	moveq	r0, r1
   14114:	sub	sp, fp, #24
   14118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1411c:	push	{r4, r5, r6, r7, fp, lr}
   14120:	add	fp, sp, #16
   14124:	sub	sp, sp, #16
   14128:	mov	r4, r3
   1412c:	mov	r5, r2
   14130:	mov	r7, r1
   14134:	mov	r6, r0
   14138:	mov	r0, r1
   1413c:	bl	15950 <__assert_fail@plt+0x4598>
   14140:	ldrb	r1, [r6]
   14144:	cmp	r0, #0
   14148:	andne	r1, r1, #223	; 0xdf
   1414c:	mov	r0, #0
   14150:	cmp	r1, r7
   14154:	bne	14194 <__assert_fail@plt+0x2ddc>
   14158:	cmp	r7, #0
   1415c:	moveq	r0, #1
   14160:	subeq	sp, fp, #16
   14164:	popeq	{r4, r5, r6, r7, fp, pc}
   14168:	ldr	r0, [fp, #20]
   1416c:	ldr	r1, [fp, #16]
   14170:	ldr	r2, [fp, #12]
   14174:	ldr	r3, [fp, #8]
   14178:	str	r2, [sp]
   1417c:	str	r1, [sp, #4]
   14180:	str	r0, [sp, #8]
   14184:	mov	r0, r6
   14188:	mov	r1, r5
   1418c:	mov	r2, r4
   14190:	bl	1419c <__assert_fail@plt+0x2de4>
   14194:	sub	sp, fp, #16
   14198:	pop	{r4, r5, r6, r7, fp, pc}
   1419c:	push	{r4, r5, r6, r7, fp, lr}
   141a0:	add	fp, sp, #16
   141a4:	sub	sp, sp, #8
   141a8:	mov	r4, r3
   141ac:	mov	r5, r2
   141b0:	mov	r7, r1
   141b4:	mov	r6, r0
   141b8:	mov	r0, r1
   141bc:	bl	15950 <__assert_fail@plt+0x4598>
   141c0:	ldrb	r1, [r6, #1]
   141c4:	cmp	r0, #0
   141c8:	andne	r1, r1, #223	; 0xdf
   141cc:	mov	r0, #0
   141d0:	cmp	r1, r7
   141d4:	bne	1420c <__assert_fail@plt+0x2e54>
   141d8:	cmp	r7, #0
   141dc:	moveq	r0, #1
   141e0:	subeq	sp, fp, #16
   141e4:	popeq	{r4, r5, r6, r7, fp, pc}
   141e8:	ldr	r0, [fp, #16]
   141ec:	ldr	r1, [fp, #12]
   141f0:	ldr	r3, [fp, #8]
   141f4:	str	r1, [sp]
   141f8:	str	r0, [sp, #4]
   141fc:	mov	r0, r6
   14200:	mov	r1, r5
   14204:	mov	r2, r4
   14208:	bl	14214 <__assert_fail@plt+0x2e5c>
   1420c:	sub	sp, fp, #16
   14210:	pop	{r4, r5, r6, r7, fp, pc}
   14214:	push	{r4, r5, r6, r7, fp, lr}
   14218:	add	fp, sp, #16
   1421c:	sub	sp, sp, #8
   14220:	mov	r4, r3
   14224:	mov	r5, r2
   14228:	mov	r7, r1
   1422c:	mov	r6, r0
   14230:	mov	r0, r1
   14234:	bl	15950 <__assert_fail@plt+0x4598>
   14238:	ldrb	r1, [r6, #2]
   1423c:	cmp	r0, #0
   14240:	andne	r1, r1, #223	; 0xdf
   14244:	mov	r0, #0
   14248:	cmp	r1, r7
   1424c:	bne	1427c <__assert_fail@plt+0x2ec4>
   14250:	cmp	r7, #0
   14254:	moveq	r0, #1
   14258:	subeq	sp, fp, #16
   1425c:	popeq	{r4, r5, r6, r7, fp, pc}
   14260:	ldr	r0, [fp, #12]
   14264:	ldr	r3, [fp, #8]
   14268:	str	r0, [sp]
   1426c:	mov	r0, r6
   14270:	mov	r1, r5
   14274:	mov	r2, r4
   14278:	bl	14284 <__assert_fail@plt+0x2ecc>
   1427c:	sub	sp, fp, #16
   14280:	pop	{r4, r5, r6, r7, fp, pc}
   14284:	push	{r4, r5, r6, r7, fp, lr}
   14288:	add	fp, sp, #16
   1428c:	mov	r4, r3
   14290:	mov	r5, r2
   14294:	mov	r7, r1
   14298:	mov	r6, r0
   1429c:	mov	r0, r1
   142a0:	bl	15950 <__assert_fail@plt+0x4598>
   142a4:	ldrb	r1, [r6, #3]
   142a8:	ldr	r3, [fp, #8]
   142ac:	cmp	r0, #0
   142b0:	andne	r1, r1, #223	; 0xdf
   142b4:	mov	r0, #0
   142b8:	cmp	r1, r7
   142bc:	popne	{r4, r5, r6, r7, fp, pc}
   142c0:	cmp	r7, #0
   142c4:	beq	142dc <__assert_fail@plt+0x2f24>
   142c8:	mov	r0, r6
   142cc:	mov	r1, r5
   142d0:	mov	r2, r4
   142d4:	pop	{r4, r5, r6, r7, fp, lr}
   142d8:	b	142e4 <__assert_fail@plt+0x2f2c>
   142dc:	mov	r0, #1
   142e0:	pop	{r4, r5, r6, r7, fp, pc}
   142e4:	push	{r4, r5, r6, r7, fp, lr}
   142e8:	add	fp, sp, #16
   142ec:	mov	r4, r3
   142f0:	mov	r5, r2
   142f4:	mov	r7, r1
   142f8:	mov	r6, r0
   142fc:	mov	r0, r1
   14300:	bl	15950 <__assert_fail@plt+0x4598>
   14304:	ldrb	r1, [r6, #4]
   14308:	cmp	r0, #0
   1430c:	andne	r1, r1, #223	; 0xdf
   14310:	mov	r0, #0
   14314:	cmp	r1, r7
   14318:	popne	{r4, r5, r6, r7, fp, pc}
   1431c:	cmp	r7, #0
   14320:	beq	14338 <__assert_fail@plt+0x2f80>
   14324:	mov	r0, r6
   14328:	mov	r1, r5
   1432c:	mov	r2, r4
   14330:	pop	{r4, r5, r6, r7, fp, lr}
   14334:	b	14340 <__assert_fail@plt+0x2f88>
   14338:	mov	r0, #1
   1433c:	pop	{r4, r5, r6, r7, fp, pc}
   14340:	push	{r4, r5, r6, sl, fp, lr}
   14344:	add	fp, sp, #16
   14348:	mov	r4, r2
   1434c:	mov	r6, r1
   14350:	mov	r5, r0
   14354:	mov	r0, r1
   14358:	bl	15950 <__assert_fail@plt+0x4598>
   1435c:	ldrb	r1, [r5, #5]
   14360:	cmp	r0, #0
   14364:	andne	r1, r1, #223	; 0xdf
   14368:	mov	r0, #0
   1436c:	cmp	r1, r6
   14370:	popne	{r4, r5, r6, sl, fp, pc}
   14374:	cmp	r6, #0
   14378:	beq	1438c <__assert_fail@plt+0x2fd4>
   1437c:	mov	r0, r5
   14380:	mov	r1, r4
   14384:	pop	{r4, r5, r6, sl, fp, lr}
   14388:	b	14394 <__assert_fail@plt+0x2fdc>
   1438c:	mov	r0, #1
   14390:	pop	{r4, r5, r6, sl, fp, pc}
   14394:	push	{r4, r5, fp, lr}
   14398:	add	fp, sp, #8
   1439c:	mov	r5, r1
   143a0:	mov	r4, r0
   143a4:	mov	r0, r1
   143a8:	bl	15950 <__assert_fail@plt+0x4598>
   143ac:	ldrb	r1, [r4, #6]
   143b0:	cmp	r0, #0
   143b4:	andne	r1, r1, #223	; 0xdf
   143b8:	mov	r0, #0
   143bc:	cmp	r1, r5
   143c0:	popne	{r4, r5, fp, pc}
   143c4:	cmp	r5, #0
   143c8:	beq	143d8 <__assert_fail@plt+0x3020>
   143cc:	mov	r0, r4
   143d0:	pop	{r4, r5, fp, lr}
   143d4:	b	143e0 <__assert_fail@plt+0x3028>
   143d8:	mov	r0, #1
   143dc:	pop	{r4, r5, fp, pc}
   143e0:	push	{r4, sl, fp, lr}
   143e4:	add	fp, sp, #8
   143e8:	mov	r4, r0
   143ec:	mov	r0, #0
   143f0:	bl	15950 <__assert_fail@plt+0x4598>
   143f4:	ldrb	r1, [r4, #7]
   143f8:	cmp	r0, #0
   143fc:	beq	14414 <__assert_fail@plt+0x305c>
   14400:	tst	r1, #223	; 0xdf
   14404:	moveq	r0, #1
   14408:	popeq	{r4, sl, fp, pc}
   1440c:	mov	r0, #0
   14410:	pop	{r4, sl, fp, pc}
   14414:	cmp	r1, #0
   14418:	moveq	r0, #1
   1441c:	popeq	{r4, sl, fp, pc}
   14420:	mov	r0, #0
   14424:	pop	{r4, sl, fp, pc}
   14428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1442c:	add	fp, sp, #28
   14430:	sub	sp, sp, #12
   14434:	mov	r9, r3
   14438:	mov	r4, r2
   1443c:	mov	r8, r1
   14440:	mov	r7, r0
   14444:	ldr	sl, [fp, #8]
   14448:	cmp	r2, #0
   1444c:	beq	14464 <__assert_fail@plt+0x30ac>
   14450:	mov	r0, r7
   14454:	mov	r1, #58	; 0x3a
   14458:	bl	112b0 <strchr@plt>
   1445c:	mov	r6, r0
   14460:	b	14468 <__assert_fail@plt+0x30b0>
   14464:	mov	r6, #0
   14468:	stm	sp, {r9, sl}
   1446c:	mov	r0, r7
   14470:	mov	r1, r6
   14474:	mov	r2, r8
   14478:	mov	r3, r4
   1447c:	bl	144e4 <__assert_fail@plt+0x312c>
   14480:	mov	r5, r0
   14484:	cmp	r4, #0
   14488:	beq	144d8 <__assert_fail@plt+0x3120>
   1448c:	cmp	r6, #0
   14490:	bne	144d8 <__assert_fail@plt+0x3120>
   14494:	cmp	r5, #0
   14498:	beq	144d8 <__assert_fail@plt+0x3120>
   1449c:	mov	r0, r7
   144a0:	mov	r1, #46	; 0x2e
   144a4:	bl	112b0 <strchr@plt>
   144a8:	cmp	r0, #0
   144ac:	beq	144d8 <__assert_fail@plt+0x3120>
   144b0:	mov	r1, r0
   144b4:	stm	sp, {r9, sl}
   144b8:	mov	r0, r7
   144bc:	mov	r2, r8
   144c0:	mov	r3, r4
   144c4:	bl	144e4 <__assert_fail@plt+0x312c>
   144c8:	cmp	r0, #0
   144cc:	movne	r0, r5
   144d0:	sub	sp, fp, #28
   144d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d8:	mov	r0, r5
   144dc:	sub	sp, fp, #28
   144e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e8:	add	fp, sp, #28
   144ec:	sub	sp, sp, #36	; 0x24
   144f0:	mov	sl, r3
   144f4:	mov	r9, r2
   144f8:	mov	r4, r1
   144fc:	ldr	r3, [r2]
   14500:	ldr	r2, [fp, #8]
   14504:	cmp	sl, #0
   14508:	ldrne	r1, [sl]
   1450c:	mvneq	r1, #0
   14510:	str	r1, [sp, #8]
   14514:	ldr	r8, [fp, #12]
   14518:	cmp	r2, #0
   1451c:	movne	r1, #0
   14520:	strne	r1, [r2]
   14524:	cmp	r8, #0
   14528:	movne	r1, #0
   1452c:	strne	r1, [r8]
   14530:	cmp	r4, #0
   14534:	str	r3, [sp, #4]
   14538:	beq	1456c <__assert_fail@plt+0x31b4>
   1453c:	subs	r5, r4, r0
   14540:	beq	145fc <__assert_fail@plt+0x3244>
   14544:	add	r1, r5, #1
   14548:	bl	14fc0 <__assert_fail@plt+0x3c08>
   1454c:	mov	r7, r0
   14550:	mov	r0, #0
   14554:	strb	r0, [r7, r5]
   14558:	mov	r6, r4
   1455c:	ldrb	r0, [r6, #1]!
   14560:	cmp	r0, #0
   14564:	moveq	r6, r0
   14568:	b	14584 <__assert_fail@plt+0x31cc>
   1456c:	ldrb	r1, [r0]
   14570:	cmp	r1, #0
   14574:	beq	14718 <__assert_fail@plt+0x3360>
   14578:	bl	1502c <__assert_fail@plt+0x3c74>
   1457c:	mov	r7, r0
   14580:	mov	r6, #0
   14584:	ldrb	r0, [r7]
   14588:	cmp	r0, #43	; 0x2b
   1458c:	beq	145dc <__assert_fail@plt+0x3224>
   14590:	mov	r0, r7
   14594:	bl	1110c <getpwnam@plt>
   14598:	cmp	r0, #0
   1459c:	beq	145dc <__assert_fail@plt+0x3224>
   145a0:	ldr	r1, [r0, #8]
   145a4:	str	r1, [sp, #4]
   145a8:	mov	r5, #0
   145ac:	cmp	r4, #0
   145b0:	beq	14724 <__assert_fail@plt+0x336c>
   145b4:	cmp	r6, #0
   145b8:	bne	14724 <__assert_fail@plt+0x336c>
   145bc:	ldr	r4, [r0, #12]
   145c0:	mov	r0, r4
   145c4:	bl	11394 <getgrgid@plt>
   145c8:	cmp	r0, #0
   145cc:	str	r4, [sp, #8]
   145d0:	beq	1472c <__assert_fail@plt+0x3374>
   145d4:	ldr	r0, [r0]
   145d8:	b	1473c <__assert_fail@plt+0x3384>
   145dc:	cmp	r4, #0
   145e0:	beq	146bc <__assert_fail@plt+0x3304>
   145e4:	cmp	r6, #0
   145e8:	bne	146bc <__assert_fail@plt+0x3304>
   145ec:	movw	r5, #27563	; 0x6bab
   145f0:	movt	r5, #1
   145f4:	mov	r4, #0
   145f8:	b	14748 <__assert_fail@plt+0x3390>
   145fc:	ldrb	r0, [r4, #1]!
   14600:	cmp	r0, #0
   14604:	moveq	r4, r0
   14608:	mov	r7, #0
   1460c:	mov	r6, r4
   14610:	mov	r4, #0
   14614:	mov	r5, #0
   14618:	cmp	r6, #0
   1461c:	beq	14754 <__assert_fail@plt+0x339c>
   14620:	cmp	r5, #0
   14624:	bne	14754 <__assert_fail@plt+0x339c>
   14628:	ldrb	r0, [r6]
   1462c:	cmp	r0, #43	; 0x2b
   14630:	beq	14654 <__assert_fail@plt+0x329c>
   14634:	mov	r0, r6
   14638:	bl	113a0 <getgrnam@plt>
   1463c:	cmp	r0, #0
   14640:	beq	14654 <__assert_fail@plt+0x329c>
   14644:	ldr	r0, [r0, #8]
   14648:	str	r0, [sp, #8]
   1464c:	mov	r5, #0
   14650:	b	146a8 <__assert_fail@plt+0x32f0>
   14654:	movw	r0, #25319	; 0x62e7
   14658:	movt	r0, #1
   1465c:	str	r0, [sp]
   14660:	add	r3, sp, #12
   14664:	mov	r0, r6
   14668:	mov	r1, #0
   1466c:	mov	r2, #10
   14670:	bl	150c4 <__assert_fail@plt+0x3d0c>
   14674:	clz	r0, r0
   14678:	lsr	r0, r0, #5
   1467c:	ldr	r1, [sp, #12]
   14680:	add	r2, r1, #1
   14684:	cmn	r1, #1
   14688:	movwne	r2, #1
   1468c:	ands	r0, r0, r2
   14690:	ldr	r0, [sp, #8]
   14694:	movne	r0, r1
   14698:	str	r0, [sp, #8]
   1469c:	movw	r5, #27549	; 0x6b9d
   146a0:	movt	r5, #1
   146a4:	movwne	r5, #0
   146a8:	bl	110e8 <endgrent@plt>
   146ac:	mov	r0, r6
   146b0:	bl	1502c <__assert_fail@plt+0x3c74>
   146b4:	mov	r4, r0
   146b8:	b	14754 <__assert_fail@plt+0x339c>
   146bc:	movw	r0, #25319	; 0x62e7
   146c0:	movt	r0, #1
   146c4:	str	r0, [sp]
   146c8:	mov	r4, #0
   146cc:	add	r3, sp, #12
   146d0:	mov	r0, r7
   146d4:	mov	r1, #0
   146d8:	mov	r2, #10
   146dc:	bl	150c4 <__assert_fail@plt+0x3d0c>
   146e0:	clz	r0, r0
   146e4:	lsr	r0, r0, #5
   146e8:	ldr	r1, [sp, #12]
   146ec:	add	r2, r1, #1
   146f0:	cmn	r1, #1
   146f4:	movwne	r2, #1
   146f8:	ands	r0, r0, r2
   146fc:	ldr	r0, [sp, #4]
   14700:	movne	r0, r1
   14704:	str	r0, [sp, #4]
   14708:	movw	r5, #27536	; 0x6b90
   1470c:	movt	r5, #1
   14710:	movwne	r5, #0
   14714:	b	14748 <__assert_fail@plt+0x3390>
   14718:	mov	r4, #0
   1471c:	mov	r7, #0
   14720:	b	14760 <__assert_fail@plt+0x33a8>
   14724:	mov	r4, #0
   14728:	b	14748 <__assert_fail@plt+0x3390>
   1472c:	add	r2, sp, #12
   14730:	mov	r0, r4
   14734:	mov	r1, #0
   14738:	bl	12780 <__assert_fail@plt+0x13c8>
   1473c:	bl	1502c <__assert_fail@plt+0x3c74>
   14740:	mov	r4, r0
   14744:	bl	110e8 <endgrent@plt>
   14748:	bl	11340 <endpwent@plt>
   1474c:	cmp	r6, #0
   14750:	bne	14620 <__assert_fail@plt+0x3268>
   14754:	mov	r6, #0
   14758:	cmp	r5, #0
   1475c:	bne	147a4 <__assert_fail@plt+0x33ec>
   14760:	ldr	r0, [sp, #4]
   14764:	str	r0, [r9]
   14768:	cmp	sl, #0
   1476c:	ldrne	r0, [sp, #8]
   14770:	strne	r0, [sl]
   14774:	ldr	r0, [fp, #8]
   14778:	cmp	r0, #0
   1477c:	strne	r7, [r0]
   14780:	movne	r7, #0
   14784:	mov	r6, #1
   14788:	cmp	r8, #0
   1478c:	beq	147a0 <__assert_fail@plt+0x33e8>
   14790:	str	r4, [r8]
   14794:	mov	r5, #0
   14798:	mov	r4, #0
   1479c:	b	147a4 <__assert_fail@plt+0x33ec>
   147a0:	mov	r5, #0
   147a4:	mov	r0, r7
   147a8:	bl	12758 <__assert_fail@plt+0x13a0>
   147ac:	mov	r0, r4
   147b0:	bl	12758 <__assert_fail@plt+0x13a0>
   147b4:	mov	r0, #0
   147b8:	cmp	r6, #0
   147bc:	bne	147d0 <__assert_fail@plt+0x3418>
   147c0:	mov	r0, #0
   147c4:	mov	r1, r5
   147c8:	mov	r2, #5
   147cc:	bl	11190 <dcgettext@plt>
   147d0:	sub	sp, fp, #28
   147d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147dc:	add	fp, sp, #24
   147e0:	sub	sp, sp, #32
   147e4:	mov	r4, r2
   147e8:	mov	r8, r0
   147ec:	ldr	r6, [fp, #12]
   147f0:	ldr	r7, [fp, #8]
   147f4:	cmp	r1, #0
   147f8:	beq	14820 <__assert_fail@plt+0x3468>
   147fc:	mov	r5, r1
   14800:	str	r4, [sp]
   14804:	str	r3, [sp, #4]
   14808:	movw	r2, #27576	; 0x6bb8
   1480c:	movt	r2, #1
   14810:	mov	r0, r8
   14814:	mov	r1, #1
   14818:	mov	r3, r5
   1481c:	b	14838 <__assert_fail@plt+0x3480>
   14820:	str	r3, [sp]
   14824:	movw	r2, #27588	; 0x6bc4
   14828:	movt	r2, #1
   1482c:	mov	r0, r8
   14830:	mov	r1, #1
   14834:	mov	r3, r4
   14838:	bl	11310 <__fprintf_chk@plt>
   1483c:	movw	r1, #27595	; 0x6bcb
   14840:	movt	r1, #1
   14844:	mov	r0, #0
   14848:	mov	r2, #5
   1484c:	bl	11190 <dcgettext@plt>
   14850:	mov	r3, r0
   14854:	movw	r0, #2022	; 0x7e6
   14858:	str	r0, [sp]
   1485c:	movw	r2, #28313	; 0x6e99
   14860:	movt	r2, #1
   14864:	mov	r0, r8
   14868:	mov	r1, #1
   1486c:	bl	11310 <__fprintf_chk@plt>
   14870:	movw	r4, #25318	; 0x62e6
   14874:	movt	r4, #1
   14878:	mov	r0, r4
   1487c:	mov	r1, r8
   14880:	bl	110f4 <fputs_unlocked@plt>
   14884:	movw	r1, #27599	; 0x6bcf
   14888:	movt	r1, #1
   1488c:	mov	r0, #0
   14890:	mov	r2, #5
   14894:	bl	11190 <dcgettext@plt>
   14898:	mov	r2, r0
   1489c:	movw	r3, #27770	; 0x6c7a
   148a0:	movt	r3, #1
   148a4:	mov	r0, r8
   148a8:	mov	r1, #1
   148ac:	bl	11310 <__fprintf_chk@plt>
   148b0:	mov	r0, r4
   148b4:	mov	r1, r8
   148b8:	bl	110f4 <fputs_unlocked@plt>
   148bc:	cmp	r6, #9
   148c0:	bhi	148fc <__assert_fail@plt+0x3544>
   148c4:	add	r0, pc, #0
   148c8:	ldr	pc, [r0, r6, lsl #2]
   148cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d0:	andeq	r4, r1, r8, lsl #18
   148d4:	andeq	r4, r1, r8, lsr r9
   148d8:	andeq	r4, r1, r0, ror #18
   148dc:	andeq	r4, r1, r8, lsl #19
   148e0:			; <UNDEFINED> instruction: 0x000149b0
   148e4:	ldrdeq	r4, [r1], -r8
   148e8:	andeq	r4, r1, r0, lsl sl
   148ec:			; <UNDEFINED> instruction: 0x00014ab0
   148f0:	andeq	r4, r1, r8, asr sl
   148f4:	sub	sp, fp, #24
   148f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148fc:	movw	r1, #28123	; 0x6ddb
   14900:	movt	r1, #1
   14904:	b	14a60 <__assert_fail@plt+0x36a8>
   14908:	movw	r1, #27804	; 0x6c9c
   1490c:	movt	r1, #1
   14910:	mov	r0, #0
   14914:	mov	r2, #5
   14918:	bl	11190 <dcgettext@plt>
   1491c:	mov	r2, r0
   14920:	ldr	r3, [r7]
   14924:	mov	r0, r8
   14928:	mov	r1, #1
   1492c:	sub	sp, fp, #24
   14930:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14934:	b	11310 <__fprintf_chk@plt>
   14938:	movw	r1, #27820	; 0x6cac
   1493c:	movt	r1, #1
   14940:	mov	r0, #0
   14944:	mov	r2, #5
   14948:	bl	11190 <dcgettext@plt>
   1494c:	mov	r2, r0
   14950:	ldr	r3, [r7]
   14954:	ldr	r0, [r7, #4]
   14958:	str	r0, [sp]
   1495c:	b	14a4c <__assert_fail@plt+0x3694>
   14960:	movw	r1, #27843	; 0x6cc3
   14964:	movt	r1, #1
   14968:	mov	r0, #0
   1496c:	mov	r2, #5
   14970:	bl	11190 <dcgettext@plt>
   14974:	mov	r2, r0
   14978:	ldr	r3, [r7]
   1497c:	ldmib	r7, {r0, r1}
   14980:	stm	sp, {r0, r1}
   14984:	b	14a4c <__assert_fail@plt+0x3694>
   14988:	movw	r1, #27871	; 0x6cdf
   1498c:	movt	r1, #1
   14990:	mov	r0, #0
   14994:	mov	r2, #5
   14998:	bl	11190 <dcgettext@plt>
   1499c:	mov	r2, r0
   149a0:	ldr	r3, [r7]
   149a4:	ldmib	r7, {r0, r1, r7}
   149a8:	stm	sp, {r0, r1, r7}
   149ac:	b	14a4c <__assert_fail@plt+0x3694>
   149b0:	movw	r1, #27903	; 0x6cff
   149b4:	movt	r1, #1
   149b8:	mov	r0, #0
   149bc:	mov	r2, #5
   149c0:	bl	11190 <dcgettext@plt>
   149c4:	mov	r2, r0
   149c8:	ldr	r3, [r7]
   149cc:	ldmib	r7, {r0, r1, r6, r7}
   149d0:	stm	sp, {r0, r1, r6, r7}
   149d4:	b	14a4c <__assert_fail@plt+0x3694>
   149d8:	movw	r1, #27939	; 0x6d23
   149dc:	movt	r1, #1
   149e0:	mov	r0, #0
   149e4:	mov	r2, #5
   149e8:	bl	11190 <dcgettext@plt>
   149ec:	mov	r2, r0
   149f0:	ldr	r3, [r7]
   149f4:	ldmib	r7, {r0, r1, r6}
   149f8:	ldr	r5, [r7, #16]
   149fc:	ldr	r7, [r7, #20]
   14a00:	stm	sp, {r0, r1, r6}
   14a04:	str	r5, [sp, #12]
   14a08:	str	r7, [sp, #16]
   14a0c:	b	14a4c <__assert_fail@plt+0x3694>
   14a10:	movw	r1, #27979	; 0x6d4b
   14a14:	movt	r1, #1
   14a18:	mov	r0, #0
   14a1c:	mov	r2, #5
   14a20:	bl	11190 <dcgettext@plt>
   14a24:	mov	r2, r0
   14a28:	ldr	r3, [r7]
   14a2c:	ldmib	r7, {r0, r1, r6}
   14a30:	ldr	r5, [r7, #16]
   14a34:	ldr	r4, [r7, #20]
   14a38:	ldr	r7, [r7, #24]
   14a3c:	stm	sp, {r0, r1, r6}
   14a40:	str	r5, [sp, #12]
   14a44:	str	r4, [sp, #16]
   14a48:	str	r7, [sp, #20]
   14a4c:	mov	r0, r8
   14a50:	mov	r1, #1
   14a54:	b	14b00 <__assert_fail@plt+0x3748>
   14a58:	movw	r1, #28071	; 0x6da7
   14a5c:	movt	r1, #1
   14a60:	mov	r0, #0
   14a64:	mov	r2, #5
   14a68:	bl	11190 <dcgettext@plt>
   14a6c:	mov	ip, r0
   14a70:	ldr	r3, [r7]
   14a74:	ldr	r0, [r7, #4]
   14a78:	ldr	r1, [r7, #8]
   14a7c:	ldr	r6, [r7, #12]
   14a80:	ldr	r5, [r7, #16]
   14a84:	ldr	r4, [r7, #20]
   14a88:	ldr	r2, [r7, #24]
   14a8c:	ldr	lr, [r7, #28]
   14a90:	ldr	r7, [r7, #32]
   14a94:	stm	sp, {r0, r1, r6}
   14a98:	str	r5, [sp, #12]
   14a9c:	str	r4, [sp, #16]
   14aa0:	str	r2, [sp, #20]
   14aa4:	str	lr, [sp, #24]
   14aa8:	str	r7, [sp, #28]
   14aac:	b	14af4 <__assert_fail@plt+0x373c>
   14ab0:	movw	r1, #28023	; 0x6d77
   14ab4:	movt	r1, #1
   14ab8:	mov	r0, #0
   14abc:	mov	r2, #5
   14ac0:	bl	11190 <dcgettext@plt>
   14ac4:	mov	ip, r0
   14ac8:	ldr	r3, [r7]
   14acc:	ldmib	r7, {r0, r1, r6}
   14ad0:	ldr	r5, [r7, #16]
   14ad4:	ldr	r4, [r7, #20]
   14ad8:	ldr	r2, [r7, #24]
   14adc:	ldr	r7, [r7, #28]
   14ae0:	stm	sp, {r0, r1, r6}
   14ae4:	str	r5, [sp, #12]
   14ae8:	str	r4, [sp, #16]
   14aec:	str	r2, [sp, #20]
   14af0:	str	r7, [sp, #24]
   14af4:	mov	r0, r8
   14af8:	mov	r1, #1
   14afc:	mov	r2, ip
   14b00:	bl	11310 <__fprintf_chk@plt>
   14b04:	sub	sp, fp, #24
   14b08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b0c:	push	{r4, sl, fp, lr}
   14b10:	add	fp, sp, #8
   14b14:	sub	sp, sp, #8
   14b18:	mov	lr, #0
   14b1c:	ldr	ip, [fp, #8]
   14b20:	ldr	r4, [ip, lr, lsl #2]
   14b24:	add	lr, lr, #1
   14b28:	cmp	r4, #0
   14b2c:	bne	14b20 <__assert_fail@plt+0x3768>
   14b30:	sub	r4, lr, #1
   14b34:	str	ip, [sp]
   14b38:	str	r4, [sp, #4]
   14b3c:	bl	147d8 <__assert_fail@plt+0x3420>
   14b40:	sub	sp, fp, #8
   14b44:	pop	{r4, sl, fp, pc}
   14b48:	push	{r4, r5, fp, lr}
   14b4c:	add	fp, sp, #8
   14b50:	sub	sp, sp, #48	; 0x30
   14b54:	mov	ip, #0
   14b58:	ldr	r4, [fp, #8]
   14b5c:	add	lr, sp, #8
   14b60:	ldr	r5, [r4]
   14b64:	str	r5, [lr, ip, lsl #2]
   14b68:	cmp	r5, #0
   14b6c:	beq	14b80 <__assert_fail@plt+0x37c8>
   14b70:	add	ip, ip, #1
   14b74:	add	r4, r4, #4
   14b78:	cmp	ip, #10
   14b7c:	bcc	14b60 <__assert_fail@plt+0x37a8>
   14b80:	str	lr, [sp]
   14b84:	str	ip, [sp, #4]
   14b88:	bl	147d8 <__assert_fail@plt+0x3420>
   14b8c:	sub	sp, fp, #8
   14b90:	pop	{r4, r5, fp, pc}
   14b94:	push	{fp, lr}
   14b98:	mov	fp, sp
   14b9c:	sub	sp, sp, #8
   14ba0:	add	ip, fp, #8
   14ba4:	str	ip, [sp, #4]
   14ba8:	str	ip, [sp]
   14bac:	bl	14b48 <__assert_fail@plt+0x3790>
   14bb0:	mov	sp, fp
   14bb4:	pop	{fp, pc}
   14bb8:	push	{fp, lr}
   14bbc:	mov	fp, sp
   14bc0:	movw	r0, #33140	; 0x8174
   14bc4:	movt	r0, #2
   14bc8:	ldr	r1, [r0]
   14bcc:	movw	r0, #25318	; 0x62e6
   14bd0:	movt	r0, #1
   14bd4:	bl	110f4 <fputs_unlocked@plt>
   14bd8:	movw	r1, #28183	; 0x6e17
   14bdc:	movt	r1, #1
   14be0:	mov	r0, #0
   14be4:	mov	r2, #5
   14be8:	bl	11190 <dcgettext@plt>
   14bec:	mov	r1, r0
   14bf0:	movw	r2, #28203	; 0x6e2b
   14bf4:	movt	r2, #1
   14bf8:	mov	r0, #1
   14bfc:	bl	112f8 <__printf_chk@plt>
   14c00:	movw	r1, #28225	; 0x6e41
   14c04:	movt	r1, #1
   14c08:	mov	r0, #0
   14c0c:	mov	r2, #5
   14c10:	bl	11190 <dcgettext@plt>
   14c14:	mov	r1, r0
   14c18:	movw	r2, #26102	; 0x65f6
   14c1c:	movt	r2, #1
   14c20:	movw	r3, #26608	; 0x67f0
   14c24:	movt	r3, #1
   14c28:	mov	r0, #1
   14c2c:	bl	112f8 <__printf_chk@plt>
   14c30:	movw	r1, #28245	; 0x6e55
   14c34:	movt	r1, #1
   14c38:	mov	r0, #0
   14c3c:	mov	r2, #5
   14c40:	bl	11190 <dcgettext@plt>
   14c44:	mov	r1, r0
   14c48:	movw	r2, #28284	; 0x6e7c
   14c4c:	movt	r2, #1
   14c50:	mov	r0, #1
   14c54:	pop	{fp, lr}
   14c58:	b	112f8 <__printf_chk@plt>
   14c5c:	b	14c60 <__assert_fail@plt+0x38a8>
   14c60:	push	{r4, r5, r6, sl, fp, lr}
   14c64:	add	fp, sp, #16
   14c68:	mov	r4, r2
   14c6c:	mov	r5, r1
   14c70:	mov	r6, r0
   14c74:	bl	15eec <__assert_fail@plt+0x4b34>
   14c78:	cmp	r0, #0
   14c7c:	popne	{r4, r5, r6, sl, fp, pc}
   14c80:	cmp	r6, #0
   14c84:	beq	14c98 <__assert_fail@plt+0x38e0>
   14c88:	cmp	r5, #0
   14c8c:	cmpne	r4, #0
   14c90:	bne	14c98 <__assert_fail@plt+0x38e0>
   14c94:	pop	{r4, r5, r6, sl, fp, pc}
   14c98:	bl	1504c <__assert_fail@plt+0x3c94>
   14c9c:	push	{fp, lr}
   14ca0:	mov	fp, sp
   14ca4:	bl	15618 <__assert_fail@plt+0x4260>
   14ca8:	bl	14cb0 <__assert_fail@plt+0x38f8>
   14cac:	pop	{fp, pc}
   14cb0:	cmp	r0, #0
   14cb4:	bxne	lr
   14cb8:	push	{fp, lr}
   14cbc:	mov	fp, sp
   14cc0:	bl	1504c <__assert_fail@plt+0x3c94>
   14cc4:	push	{fp, lr}
   14cc8:	mov	fp, sp
   14ccc:	bl	15c10 <__assert_fail@plt+0x4858>
   14cd0:	bl	14cb0 <__assert_fail@plt+0x38f8>
   14cd4:	pop	{fp, pc}
   14cd8:	b	14c9c <__assert_fail@plt+0x38e4>
   14cdc:	push	{r4, r5, fp, lr}
   14ce0:	add	fp, sp, #8
   14ce4:	mov	r4, r1
   14ce8:	mov	r5, r0
   14cec:	bl	15648 <__assert_fail@plt+0x4290>
   14cf0:	cmp	r0, #0
   14cf4:	popne	{r4, r5, fp, pc}
   14cf8:	cmp	r5, #0
   14cfc:	beq	14d0c <__assert_fail@plt+0x3954>
   14d00:	cmp	r4, #0
   14d04:	bne	14d0c <__assert_fail@plt+0x3954>
   14d08:	pop	{r4, r5, fp, pc}
   14d0c:	bl	1504c <__assert_fail@plt+0x3c94>
   14d10:	push	{fp, lr}
   14d14:	mov	fp, sp
   14d18:	bl	15c14 <__assert_fail@plt+0x485c>
   14d1c:	bl	14cb0 <__assert_fail@plt+0x38f8>
   14d20:	pop	{fp, pc}
   14d24:	push	{fp, lr}
   14d28:	mov	fp, sp
   14d2c:	bl	15c24 <__assert_fail@plt+0x486c>
   14d30:	bl	14cb0 <__assert_fail@plt+0x38f8>
   14d34:	pop	{fp, pc}
   14d38:	push	{fp, lr}
   14d3c:	mov	fp, sp
   14d40:	mov	r2, r1
   14d44:	mov	r1, r0
   14d48:	mov	r0, #0
   14d4c:	bl	14c60 <__assert_fail@plt+0x38a8>
   14d50:	pop	{fp, pc}
   14d54:	mov	r2, r1
   14d58:	mov	r1, r0
   14d5c:	mov	r0, #0
   14d60:	b	14d24 <__assert_fail@plt+0x396c>
   14d64:	mov	r2, #1
   14d68:	b	14d6c <__assert_fail@plt+0x39b4>
   14d6c:	push	{r4, r5, fp, lr}
   14d70:	add	fp, sp, #8
   14d74:	mov	r4, r1
   14d78:	ldr	r5, [r1]
   14d7c:	cmp	r0, #0
   14d80:	beq	14d98 <__assert_fail@plt+0x39e0>
   14d84:	mov	r1, #1
   14d88:	add	r1, r1, r5, lsr #1
   14d8c:	adds	r5, r5, r1
   14d90:	bcc	14db0 <__assert_fail@plt+0x39f8>
   14d94:	bl	1504c <__assert_fail@plt+0x3c94>
   14d98:	cmp	r5, #0
   14d9c:	bne	14db0 <__assert_fail@plt+0x39f8>
   14da0:	mov	r1, #64	; 0x40
   14da4:	udiv	r5, r1, r2
   14da8:	cmp	r2, #64	; 0x40
   14dac:	addhi	r5, r5, #1
   14db0:	mov	r1, r5
   14db4:	bl	14c60 <__assert_fail@plt+0x38a8>
   14db8:	str	r5, [r4]
   14dbc:	pop	{r4, r5, fp, pc}
   14dc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dc4:	add	fp, sp, #24
   14dc8:	mov	r8, r1
   14dcc:	ldr	r6, [r1]
   14dd0:	add	r1, r6, r6, asr #1
   14dd4:	cmp	r1, r6
   14dd8:	mvnvs	r1, #-2147483648	; 0x80000000
   14ddc:	cmp	r1, r3
   14de0:	mov	r5, r1
   14de4:	movgt	r5, r3
   14de8:	cmn	r3, #1
   14dec:	movle	r5, r1
   14df0:	ldr	r4, [fp, #8]
   14df4:	cmn	r4, #1
   14df8:	ble	14e20 <__assert_fail@plt+0x3a68>
   14dfc:	cmp	r4, #0
   14e00:	beq	14e74 <__assert_fail@plt+0x3abc>
   14e04:	cmn	r5, #1
   14e08:	ble	14e48 <__assert_fail@plt+0x3a90>
   14e0c:	mvn	r7, #-2147483648	; 0x80000000
   14e10:	udiv	r1, r7, r4
   14e14:	cmp	r1, r5
   14e18:	bge	14e74 <__assert_fail@plt+0x3abc>
   14e1c:	b	14e84 <__assert_fail@plt+0x3acc>
   14e20:	cmn	r5, #1
   14e24:	ble	14e64 <__assert_fail@plt+0x3aac>
   14e28:	cmn	r4, #1
   14e2c:	beq	14e74 <__assert_fail@plt+0x3abc>
   14e30:	mov	r1, #-2147483648	; 0x80000000
   14e34:	sdiv	r1, r1, r4
   14e38:	mvn	r7, #-2147483648	; 0x80000000
   14e3c:	cmp	r1, r5
   14e40:	bge	14e74 <__assert_fail@plt+0x3abc>
   14e44:	b	14e84 <__assert_fail@plt+0x3acc>
   14e48:	beq	14e74 <__assert_fail@plt+0x3abc>
   14e4c:	mov	r1, #-2147483648	; 0x80000000
   14e50:	sdiv	r1, r1, r5
   14e54:	mvn	r7, #-2147483648	; 0x80000000
   14e58:	cmp	r1, r4
   14e5c:	bge	14e74 <__assert_fail@plt+0x3abc>
   14e60:	b	14e84 <__assert_fail@plt+0x3acc>
   14e64:	mvn	r7, #-2147483648	; 0x80000000
   14e68:	sdiv	r1, r7, r4
   14e6c:	cmp	r5, r1
   14e70:	blt	14e84 <__assert_fail@plt+0x3acc>
   14e74:	mul	r1, r5, r4
   14e78:	mov	r7, #64	; 0x40
   14e7c:	cmp	r1, #63	; 0x3f
   14e80:	bgt	14e8c <__assert_fail@plt+0x3ad4>
   14e84:	sdiv	r5, r7, r4
   14e88:	mul	r1, r5, r4
   14e8c:	cmp	r0, #0
   14e90:	moveq	r7, #0
   14e94:	streq	r7, [r8]
   14e98:	sub	r7, r5, r6
   14e9c:	cmp	r7, r2
   14ea0:	bge	14f4c <__assert_fail@plt+0x3b94>
   14ea4:	add	r5, r6, r2
   14ea8:	mov	r1, #0
   14eac:	cmp	r5, r3
   14eb0:	mov	r2, #0
   14eb4:	movwgt	r2, #1
   14eb8:	cmn	r3, #1
   14ebc:	movwgt	r1, #1
   14ec0:	cmp	r5, r6
   14ec4:	bvs	14f34 <__assert_fail@plt+0x3b7c>
   14ec8:	ands	r1, r1, r2
   14ecc:	bne	14f34 <__assert_fail@plt+0x3b7c>
   14ed0:	cmn	r4, #1
   14ed4:	ble	14efc <__assert_fail@plt+0x3b44>
   14ed8:	cmp	r4, #0
   14edc:	beq	14f48 <__assert_fail@plt+0x3b90>
   14ee0:	cmn	r5, #1
   14ee4:	ble	14f20 <__assert_fail@plt+0x3b68>
   14ee8:	mvn	r1, #-2147483648	; 0x80000000
   14eec:	udiv	r1, r1, r4
   14ef0:	cmp	r1, r5
   14ef4:	bge	14f48 <__assert_fail@plt+0x3b90>
   14ef8:	b	14f34 <__assert_fail@plt+0x3b7c>
   14efc:	cmn	r5, #1
   14f00:	ble	14f38 <__assert_fail@plt+0x3b80>
   14f04:	cmn	r4, #1
   14f08:	beq	14f48 <__assert_fail@plt+0x3b90>
   14f0c:	mov	r1, #-2147483648	; 0x80000000
   14f10:	sdiv	r1, r1, r4
   14f14:	cmp	r1, r5
   14f18:	bge	14f48 <__assert_fail@plt+0x3b90>
   14f1c:	b	14f34 <__assert_fail@plt+0x3b7c>
   14f20:	beq	14f48 <__assert_fail@plt+0x3b90>
   14f24:	mov	r1, #-2147483648	; 0x80000000
   14f28:	sdiv	r1, r1, r5
   14f2c:	cmp	r1, r4
   14f30:	bge	14f48 <__assert_fail@plt+0x3b90>
   14f34:	bl	1504c <__assert_fail@plt+0x3c94>
   14f38:	mvn	r1, #-2147483648	; 0x80000000
   14f3c:	sdiv	r1, r1, r4
   14f40:	cmp	r5, r1
   14f44:	blt	14f34 <__assert_fail@plt+0x3b7c>
   14f48:	mul	r1, r5, r4
   14f4c:	bl	14cdc <__assert_fail@plt+0x3924>
   14f50:	str	r5, [r8]
   14f54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f58:	mov	r1, #1
   14f5c:	b	14f60 <__assert_fail@plt+0x3ba8>
   14f60:	push	{fp, lr}
   14f64:	mov	fp, sp
   14f68:	bl	155c4 <__assert_fail@plt+0x420c>
   14f6c:	bl	14cb0 <__assert_fail@plt+0x38f8>
   14f70:	pop	{fp, pc}
   14f74:	mov	r1, #1
   14f78:	b	14f7c <__assert_fail@plt+0x3bc4>
   14f7c:	push	{fp, lr}
   14f80:	mov	fp, sp
   14f84:	bl	15c20 <__assert_fail@plt+0x4868>
   14f88:	bl	14cb0 <__assert_fail@plt+0x38f8>
   14f8c:	pop	{fp, pc}
   14f90:	push	{r4, r5, r6, sl, fp, lr}
   14f94:	add	fp, sp, #16
   14f98:	mov	r4, r1
   14f9c:	mov	r5, r0
   14fa0:	mov	r0, r1
   14fa4:	bl	14c9c <__assert_fail@plt+0x38e4>
   14fa8:	mov	r6, r0
   14fac:	mov	r1, r5
   14fb0:	mov	r2, r4
   14fb4:	bl	1116c <memcpy@plt>
   14fb8:	mov	r0, r6
   14fbc:	pop	{r4, r5, r6, sl, fp, pc}
   14fc0:	push	{r4, r5, r6, sl, fp, lr}
   14fc4:	add	fp, sp, #16
   14fc8:	mov	r4, r1
   14fcc:	mov	r5, r0
   14fd0:	mov	r0, r1
   14fd4:	bl	14cc4 <__assert_fail@plt+0x390c>
   14fd8:	mov	r6, r0
   14fdc:	mov	r1, r5
   14fe0:	mov	r2, r4
   14fe4:	bl	1116c <memcpy@plt>
   14fe8:	mov	r0, r6
   14fec:	pop	{r4, r5, r6, sl, fp, pc}
   14ff0:	push	{r4, r5, r6, sl, fp, lr}
   14ff4:	add	fp, sp, #16
   14ff8:	mov	r4, r1
   14ffc:	mov	r5, r0
   15000:	add	r0, r1, #1
   15004:	bl	14cc4 <__assert_fail@plt+0x390c>
   15008:	mov	r6, r0
   1500c:	mov	r0, #0
   15010:	strb	r0, [r6, r4]
   15014:	mov	r0, r6
   15018:	mov	r1, r5
   1501c:	mov	r2, r4
   15020:	bl	1116c <memcpy@plt>
   15024:	mov	r0, r6
   15028:	pop	{r4, r5, r6, sl, fp, pc}
   1502c:	push	{r4, sl, fp, lr}
   15030:	add	fp, sp, #8
   15034:	mov	r4, r0
   15038:	bl	112a4 <strlen@plt>
   1503c:	add	r1, r0, #1
   15040:	mov	r0, r4
   15044:	pop	{r4, sl, fp, lr}
   15048:	b	14f90 <__assert_fail@plt+0x3bd8>
   1504c:	push	{fp, lr}
   15050:	mov	fp, sp
   15054:	movw	r0, #33048	; 0x8118
   15058:	movt	r0, #2
   1505c:	ldr	r4, [r0]
   15060:	movw	r1, #28360	; 0x6ec8
   15064:	movt	r1, #1
   15068:	mov	r0, #0
   1506c:	mov	r2, #5
   15070:	bl	11190 <dcgettext@plt>
   15074:	mov	r3, r0
   15078:	movw	r2, #27281	; 0x6a91
   1507c:	movt	r2, #1
   15080:	mov	r0, r4
   15084:	mov	r1, #0
   15088:	bl	1122c <error@plt>
   1508c:	bl	11388 <abort@plt>
   15090:	push	{r4, sl, fp, lr}
   15094:	add	fp, sp, #8
   15098:	bl	15cdc <__assert_fail@plt+0x4924>
   1509c:	mov	r4, r0
   150a0:	cmn	r0, #1
   150a4:	bne	150b8 <__assert_fail@plt+0x3d00>
   150a8:	bl	112bc <__errno_location@plt>
   150ac:	ldr	r0, [r0]
   150b0:	cmp	r0, #12
   150b4:	beq	150c0 <__assert_fail@plt+0x3d08>
   150b8:	mov	r0, r4
   150bc:	pop	{r4, sl, fp, pc}
   150c0:	bl	1504c <__assert_fail@plt+0x3c94>
   150c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c8:	add	fp, sp, #28
   150cc:	sub	sp, sp, #12
   150d0:	cmp	r2, #37	; 0x25
   150d4:	bcs	154f4 <__assert_fail@plt+0x413c>
   150d8:	mov	r7, r2
   150dc:	mov	r6, r1
   150e0:	mov	r4, r0
   150e4:	str	r3, [sp]
   150e8:	ldr	sl, [fp, #8]
   150ec:	bl	112bc <__errno_location@plt>
   150f0:	mov	r5, r0
   150f4:	mov	r0, #0
   150f8:	str	r0, [r5]
   150fc:	bl	11280 <__ctype_b_loc@plt>
   15100:	ldr	r1, [r0]
   15104:	mov	r2, r4
   15108:	ldrb	r0, [r2], #1
   1510c:	add	r3, r1, r0, lsl #1
   15110:	ldrb	r3, [r3, #1]
   15114:	tst	r3, #32
   15118:	bne	15108 <__assert_fail@plt+0x3d50>
   1511c:	add	r9, sp, #8
   15120:	cmp	r6, #0
   15124:	movne	r9, r6
   15128:	mov	r8, #4
   1512c:	cmp	r0, #45	; 0x2d
   15130:	beq	154e8 <__assert_fail@plt+0x4130>
   15134:	mov	r0, r4
   15138:	mov	r1, r9
   1513c:	mov	r2, r7
   15140:	bl	11298 <strtoul@plt>
   15144:	str	r0, [sp, #4]
   15148:	ldr	r7, [r9]
   1514c:	cmp	r7, r4
   15150:	beq	15178 <__assert_fail@plt+0x3dc0>
   15154:	ldr	r0, [r5]
   15158:	cmp	r0, #0
   1515c:	beq	151a8 <__assert_fail@plt+0x3df0>
   15160:	cmp	r0, #34	; 0x22
   15164:	bne	154e8 <__assert_fail@plt+0x4130>
   15168:	mov	r8, #1
   1516c:	cmp	sl, #0
   15170:	bne	151b4 <__assert_fail@plt+0x3dfc>
   15174:	b	154dc <__assert_fail@plt+0x4124>
   15178:	cmp	sl, #0
   1517c:	ldrbne	r1, [r7]
   15180:	cmpne	r1, #0
   15184:	beq	154e8 <__assert_fail@plt+0x4130>
   15188:	mov	r0, sl
   1518c:	bl	112b0 <strchr@plt>
   15190:	cmp	r0, #0
   15194:	beq	154e8 <__assert_fail@plt+0x4130>
   15198:	mov	r0, #1
   1519c:	str	r0, [sp, #4]
   151a0:	mov	r8, #0
   151a4:	b	151b4 <__assert_fail@plt+0x3dfc>
   151a8:	mov	r8, r0
   151ac:	cmp	sl, #0
   151b0:	beq	154dc <__assert_fail@plt+0x4124>
   151b4:	ldrb	r4, [r7]
   151b8:	cmp	r4, #0
   151bc:	beq	154dc <__assert_fail@plt+0x4124>
   151c0:	mov	r0, sl
   151c4:	mov	r1, r4
   151c8:	bl	112b0 <strchr@plt>
   151cc:	cmp	r0, #0
   151d0:	beq	153e0 <__assert_fail@plt+0x4028>
   151d4:	sub	r0, r4, #69	; 0x45
   151d8:	mov	r6, #1
   151dc:	mov	r5, #1024	; 0x400
   151e0:	cmp	r0, #47	; 0x2f
   151e4:	bhi	152dc <__assert_fail@plt+0x3f24>
   151e8:	add	r1, pc, #0
   151ec:	ldr	pc, [r1, r0, lsl #2]
   151f0:			; <UNDEFINED> instruction: 0x000152b0
   151f4:	ldrdeq	r5, [r1], -ip
   151f8:			; <UNDEFINED> instruction: 0x000152b0
   151fc:	ldrdeq	r5, [r1], -ip
   15200:	ldrdeq	r5, [r1], -ip
   15204:	ldrdeq	r5, [r1], -ip
   15208:			; <UNDEFINED> instruction: 0x000152b0
   1520c:	ldrdeq	r5, [r1], -ip
   15210:			; <UNDEFINED> instruction: 0x000152b0
   15214:	ldrdeq	r5, [r1], -ip
   15218:	ldrdeq	r5, [r1], -ip
   1521c:			; <UNDEFINED> instruction: 0x000152b0
   15220:	ldrdeq	r5, [r1], -ip
   15224:	ldrdeq	r5, [r1], -ip
   15228:	ldrdeq	r5, [r1], -ip
   1522c:			; <UNDEFINED> instruction: 0x000152b0
   15230:	ldrdeq	r5, [r1], -ip
   15234:	ldrdeq	r5, [r1], -ip
   15238:	ldrdeq	r5, [r1], -ip
   1523c:	ldrdeq	r5, [r1], -ip
   15240:			; <UNDEFINED> instruction: 0x000152b0
   15244:			; <UNDEFINED> instruction: 0x000152b0
   15248:	ldrdeq	r5, [r1], -ip
   1524c:	ldrdeq	r5, [r1], -ip
   15250:	ldrdeq	r5, [r1], -ip
   15254:	ldrdeq	r5, [r1], -ip
   15258:	ldrdeq	r5, [r1], -ip
   1525c:	ldrdeq	r5, [r1], -ip
   15260:	ldrdeq	r5, [r1], -ip
   15264:	ldrdeq	r5, [r1], -ip
   15268:	ldrdeq	r5, [r1], -ip
   1526c:	ldrdeq	r5, [r1], -ip
   15270:	ldrdeq	r5, [r1], -ip
   15274:	ldrdeq	r5, [r1], -ip
   15278:			; <UNDEFINED> instruction: 0x000152b0
   1527c:	ldrdeq	r5, [r1], -ip
   15280:	ldrdeq	r5, [r1], -ip
   15284:	ldrdeq	r5, [r1], -ip
   15288:			; <UNDEFINED> instruction: 0x000152b0
   1528c:	ldrdeq	r5, [r1], -ip
   15290:			; <UNDEFINED> instruction: 0x000152b0
   15294:	ldrdeq	r5, [r1], -ip
   15298:	ldrdeq	r5, [r1], -ip
   1529c:	ldrdeq	r5, [r1], -ip
   152a0:	ldrdeq	r5, [r1], -ip
   152a4:	ldrdeq	r5, [r1], -ip
   152a8:	ldrdeq	r5, [r1], -ip
   152ac:			; <UNDEFINED> instruction: 0x000152b0
   152b0:	mov	r0, sl
   152b4:	mov	r1, #48	; 0x30
   152b8:	bl	112b0 <strchr@plt>
   152bc:	cmp	r0, #0
   152c0:	beq	152dc <__assert_fail@plt+0x3f24>
   152c4:	ldrb	r0, [r7, #1]
   152c8:	cmp	r0, #66	; 0x42
   152cc:	cmpne	r0, #68	; 0x44
   152d0:	bne	153f4 <__assert_fail@plt+0x403c>
   152d4:	mov	r6, #2
   152d8:	mov	r5, #1000	; 0x3e8
   152dc:	sub	r1, r4, #66	; 0x42
   152e0:	cmp	r1, #53	; 0x35
   152e4:	bhi	153e0 <__assert_fail@plt+0x4028>
   152e8:	mov	r0, #0
   152ec:	add	r2, pc, #0
   152f0:	ldr	pc, [r2, r1, lsl #2]
   152f4:	andeq	r5, r1, r0, ror #8
   152f8:	andeq	r5, r1, r0, ror #7
   152fc:	andeq	r5, r1, r0, ror #7
   15300:	andeq	r5, r1, ip, ror #8
   15304:	andeq	r5, r1, r0, ror #7
   15308:	andeq	r5, r1, ip, asr #7
   1530c:	andeq	r5, r1, r0, ror #7
   15310:	andeq	r5, r1, r0, ror #7
   15314:	andeq	r5, r1, r0, ror #7
   15318:	andeq	r5, r1, r0, lsl r4
   1531c:	andeq	r5, r1, r0, ror #7
   15320:	andeq	r5, r1, r4, lsr #8
   15324:	andeq	r5, r1, r0, ror #7
   15328:	andeq	r5, r1, r0, ror #7
   1532c:	andeq	r5, r1, r0, lsl #9
   15330:	andeq	r5, r1, r0, ror #7
   15334:	andeq	r5, r1, r0, ror #7
   15338:	andeq	r5, r1, r0, ror #7
   1533c:	andeq	r5, r1, r8, lsr r4
   15340:	andeq	r5, r1, r0, ror #7
   15344:	andeq	r5, r1, r0, ror #7
   15348:	andeq	r5, r1, r0, ror #7
   1534c:	andeq	r5, r1, r0, ror #7
   15350:	muleq	r1, r4, r4
   15354:	andeq	r5, r1, ip, asr #8
   15358:	andeq	r5, r1, r0, ror #7
   1535c:	andeq	r5, r1, r0, ror #7
   15360:	andeq	r5, r1, r0, ror #7
   15364:	andeq	r5, r1, r0, ror #7
   15368:	andeq	r5, r1, r0, ror #7
   1536c:	andeq	r5, r1, r0, ror #7
   15370:	andeq	r5, r1, r0, ror #7
   15374:	andeq	r5, r1, r8, lsr #9
   15378:	andeq	r5, r1, r0, asr #9
   1537c:	andeq	r5, r1, r0, ror #7
   15380:	andeq	r5, r1, r0, ror #7
   15384:	andeq	r5, r1, r0, ror #7
   15388:	andeq	r5, r1, ip, asr #7
   1538c:	andeq	r5, r1, r0, ror #7
   15390:	andeq	r5, r1, r0, ror #7
   15394:	andeq	r5, r1, r0, ror #7
   15398:	andeq	r5, r1, r0, lsl r4
   1539c:	andeq	r5, r1, r0, ror #7
   153a0:	andeq	r5, r1, r4, lsr #8
   153a4:	andeq	r5, r1, r0, ror #7
   153a8:	andeq	r5, r1, r0, ror #7
   153ac:	andeq	r5, r1, r0, ror #7
   153b0:	andeq	r5, r1, r0, ror #7
   153b4:	andeq	r5, r1, r0, ror #7
   153b8:	andeq	r5, r1, r0, ror #7
   153bc:	andeq	r5, r1, r8, lsr r4
   153c0:	andeq	r5, r1, r0, ror #7
   153c4:	andeq	r5, r1, r0, ror #7
   153c8:			; <UNDEFINED> instruction: 0x000154b4
   153cc:	add	r0, sp, #4
   153d0:	mov	r1, r5
   153d4:	mov	r2, #3
   153d8:	bl	1557c <__assert_fail@plt+0x41c4>
   153dc:	b	154c0 <__assert_fail@plt+0x4108>
   153e0:	ldr	r0, [sp, #4]
   153e4:	ldr	r1, [sp]
   153e8:	str	r0, [r1]
   153ec:	orr	r8, r8, #2
   153f0:	b	154e8 <__assert_fail@plt+0x4130>
   153f4:	cmp	r0, #105	; 0x69
   153f8:	bne	152dc <__assert_fail@plt+0x3f24>
   153fc:	ldrb	r0, [r7, #2]
   15400:	mov	r6, #1
   15404:	cmp	r0, #66	; 0x42
   15408:	movweq	r6, #3
   1540c:	b	152dc <__assert_fail@plt+0x3f24>
   15410:	add	r0, sp, #4
   15414:	mov	r1, r5
   15418:	mov	r2, #1
   1541c:	bl	1557c <__assert_fail@plt+0x41c4>
   15420:	b	154c0 <__assert_fail@plt+0x4108>
   15424:	add	r0, sp, #4
   15428:	mov	r1, r5
   1542c:	mov	r2, #2
   15430:	bl	1557c <__assert_fail@plt+0x41c4>
   15434:	b	154c0 <__assert_fail@plt+0x4108>
   15438:	add	r0, sp, #4
   1543c:	mov	r1, r5
   15440:	mov	r2, #4
   15444:	bl	1557c <__assert_fail@plt+0x41c4>
   15448:	b	154c0 <__assert_fail@plt+0x4108>
   1544c:	add	r0, sp, #4
   15450:	mov	r1, r5
   15454:	mov	r2, #7
   15458:	bl	1557c <__assert_fail@plt+0x41c4>
   1545c:	b	154c0 <__assert_fail@plt+0x4108>
   15460:	add	r0, sp, #4
   15464:	mov	r1, #1024	; 0x400
   15468:	b	154bc <__assert_fail@plt+0x4104>
   1546c:	add	r0, sp, #4
   15470:	mov	r1, r5
   15474:	mov	r2, #6
   15478:	bl	1557c <__assert_fail@plt+0x41c4>
   1547c:	b	154c0 <__assert_fail@plt+0x4108>
   15480:	add	r0, sp, #4
   15484:	mov	r1, r5
   15488:	mov	r2, #5
   1548c:	bl	1557c <__assert_fail@plt+0x41c4>
   15490:	b	154c0 <__assert_fail@plt+0x4108>
   15494:	add	r0, sp, #4
   15498:	mov	r1, r5
   1549c:	mov	r2, #8
   154a0:	bl	1557c <__assert_fail@plt+0x41c4>
   154a4:	b	154c0 <__assert_fail@plt+0x4108>
   154a8:	add	r0, sp, #4
   154ac:	mov	r1, #512	; 0x200
   154b0:	b	154bc <__assert_fail@plt+0x4104>
   154b4:	add	r0, sp, #4
   154b8:	mov	r1, #2
   154bc:	bl	15514 <__assert_fail@plt+0x415c>
   154c0:	ldr	r1, [r9]
   154c4:	add	r2, r1, r6
   154c8:	str	r2, [r9]
   154cc:	ldrb	r1, [r1, r6]
   154d0:	orr	r8, r0, r8
   154d4:	cmp	r1, #0
   154d8:	orrne	r8, r8, #2
   154dc:	ldr	r0, [sp, #4]
   154e0:	ldr	r1, [sp]
   154e4:	str	r0, [r1]
   154e8:	mov	r0, r8
   154ec:	sub	sp, fp, #28
   154f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f4:	movw	r0, #28377	; 0x6ed9
   154f8:	movt	r0, #1
   154fc:	movw	r1, #28415	; 0x6eff
   15500:	movt	r1, #1
   15504:	movw	r3, #28431	; 0x6f0f
   15508:	movt	r3, #1
   1550c:	mov	r2, #85	; 0x55
   15510:	bl	113b8 <__assert_fail@plt>
   15514:	cmn	r1, #1
   15518:	ble	1554c <__assert_fail@plt+0x4194>
   1551c:	cmp	r1, #0
   15520:	beq	15564 <__assert_fail@plt+0x41ac>
   15524:	push	{fp, lr}
   15528:	mov	fp, sp
   1552c:	mvn	r3, #0
   15530:	udiv	ip, r3, r1
   15534:	ldr	lr, [r0]
   15538:	mov	r2, #1
   1553c:	cmp	ip, lr
   15540:	pop	{fp, lr}
   15544:	bcs	15564 <__assert_fail@plt+0x41ac>
   15548:	b	15570 <__assert_fail@plt+0x41b8>
   1554c:	ldr	r2, [r0]
   15550:	cmp	r2, #0
   15554:	beq	15564 <__assert_fail@plt+0x41ac>
   15558:	mov	r2, #1
   1555c:	mvn	r3, #0
   15560:	b	15570 <__assert_fail@plt+0x41b8>
   15564:	ldr	r2, [r0]
   15568:	mul	r3, r2, r1
   1556c:	mov	r2, #0
   15570:	str	r3, [r0]
   15574:	mov	r0, r2
   15578:	bx	lr
   1557c:	push	{r4, r5, r6, r7, fp, lr}
   15580:	add	fp, sp, #16
   15584:	cmp	r2, #0
   15588:	moveq	r6, #0
   1558c:	moveq	r0, r6
   15590:	popeq	{r4, r5, r6, r7, fp, pc}
   15594:	mov	r4, r2
   15598:	mov	r5, r1
   1559c:	mov	r7, r0
   155a0:	mov	r6, #0
   155a4:	mov	r0, r7
   155a8:	mov	r1, r5
   155ac:	bl	15514 <__assert_fail@plt+0x415c>
   155b0:	orr	r6, r0, r6
   155b4:	subs	r4, r4, #1
   155b8:	bne	155a4 <__assert_fail@plt+0x41ec>
   155bc:	mov	r0, r6
   155c0:	pop	{r4, r5, r6, r7, fp, pc}
   155c4:	clz	r2, r1
   155c8:	lsr	r2, r2, #5
   155cc:	clz	r3, r0
   155d0:	lsr	r3, r3, #5
   155d4:	orrs	r2, r3, r2
   155d8:	movwne	r1, #1
   155dc:	movwne	r0, #1
   155e0:	cmp	r1, #0
   155e4:	beq	15614 <__assert_fail@plt+0x425c>
   155e8:	mvn	r2, #-2147483648	; 0x80000000
   155ec:	udiv	r2, r2, r1
   155f0:	cmp	r2, r0
   155f4:	bcs	15614 <__assert_fail@plt+0x425c>
   155f8:	push	{fp, lr}
   155fc:	mov	fp, sp
   15600:	bl	112bc <__errno_location@plt>
   15604:	mov	r1, #12
   15608:	str	r1, [r0]
   1560c:	mov	r0, #0
   15610:	pop	{fp, pc}
   15614:	b	110dc <calloc@plt>
   15618:	cmp	r0, #0
   1561c:	movweq	r0, #1
   15620:	cmn	r0, #1
   15624:	ble	1562c <__assert_fail@plt+0x4274>
   15628:	b	11244 <malloc@plt>
   1562c:	push	{fp, lr}
   15630:	mov	fp, sp
   15634:	bl	112bc <__errno_location@plt>
   15638:	mov	r1, #12
   1563c:	str	r1, [r0]
   15640:	mov	r0, #0
   15644:	pop	{fp, pc}
   15648:	push	{fp, lr}
   1564c:	mov	fp, sp
   15650:	cmp	r0, #0
   15654:	beq	15670 <__assert_fail@plt+0x42b8>
   15658:	cmp	r1, #0
   1565c:	beq	1567c <__assert_fail@plt+0x42c4>
   15660:	cmn	r1, #1
   15664:	ble	15688 <__assert_fail@plt+0x42d0>
   15668:	pop	{fp, lr}
   1566c:	b	1119c <realloc@plt>
   15670:	mov	r0, r1
   15674:	pop	{fp, lr}
   15678:	b	15618 <__assert_fail@plt+0x4260>
   1567c:	bl	12758 <__assert_fail@plt+0x13a0>
   15680:	mov	r0, #0
   15684:	pop	{fp, pc}
   15688:	bl	112bc <__errno_location@plt>
   1568c:	mov	r1, #12
   15690:	str	r1, [r0]
   15694:	mov	r0, #0
   15698:	pop	{fp, pc}
   1569c:	mov	r1, r0
   156a0:	sub	r2, r0, #65	; 0x41
   156a4:	mov	r0, #1
   156a8:	cmp	r2, #26
   156ac:	subcs	r2, r1, #97	; 0x61
   156b0:	cmpcs	r2, #26
   156b4:	bcs	156bc <__assert_fail@plt+0x4304>
   156b8:	bx	lr
   156bc:	sub	r1, r1, #48	; 0x30
   156c0:	cmp	r1, #10
   156c4:	movcs	r0, #0
   156c8:	bx	lr
   156cc:	mov	r1, r0
   156d0:	sub	r2, r0, #65	; 0x41
   156d4:	mov	r0, #1
   156d8:	cmp	r2, #26
   156dc:	subcs	r1, r1, #97	; 0x61
   156e0:	cmpcs	r1, #26
   156e4:	movcs	r0, #0
   156e8:	bx	lr
   156ec:	mov	r1, #0
   156f0:	cmp	r0, #128	; 0x80
   156f4:	movwcc	r1, #1
   156f8:	mov	r0, r1
   156fc:	bx	lr
   15700:	sub	r1, r0, #9
   15704:	clz	r1, r1
   15708:	lsr	r1, r1, #5
   1570c:	sub	r0, r0, #32
   15710:	clz	r0, r0
   15714:	lsr	r0, r0, #5
   15718:	orr	r0, r0, r1
   1571c:	bx	lr
   15720:	mov	r1, r0
   15724:	mov	r0, #1
   15728:	cmp	r1, #32
   1572c:	bxcc	lr
   15730:	cmp	r1, #127	; 0x7f
   15734:	movne	r0, #0
   15738:	bx	lr
   1573c:	sub	r1, r0, #48	; 0x30
   15740:	mov	r0, #0
   15744:	cmp	r1, #10
   15748:	movwcc	r0, #1
   1574c:	bx	lr
   15750:	sub	r1, r0, #33	; 0x21
   15754:	mov	r0, #0
   15758:	cmp	r1, #94	; 0x5e
   1575c:	movwcc	r0, #1
   15760:	bx	lr
   15764:	sub	r1, r0, #97	; 0x61
   15768:	mov	r0, #0
   1576c:	cmp	r1, #26
   15770:	movwcc	r0, #1
   15774:	bx	lr
   15778:	sub	r1, r0, #32
   1577c:	mov	r0, #0
   15780:	cmp	r1, #95	; 0x5f
   15784:	movwcc	r0, #1
   15788:	bx	lr
   1578c:	sub	r1, r0, #33	; 0x21
   15790:	cmp	r1, #93	; 0x5d
   15794:	bhi	15920 <__assert_fail@plt+0x4568>
   15798:	mov	r0, #1
   1579c:	add	r2, pc, #0
   157a0:	ldr	pc, [r2, r1, lsl #2]
   157a4:	andeq	r5, r1, ip, lsl r9
   157a8:	andeq	r5, r1, ip, lsl r9
   157ac:	andeq	r5, r1, ip, lsl r9
   157b0:	andeq	r5, r1, ip, lsl r9
   157b4:	andeq	r5, r1, ip, lsl r9
   157b8:	andeq	r5, r1, ip, lsl r9
   157bc:	andeq	r5, r1, ip, lsl r9
   157c0:	andeq	r5, r1, ip, lsl r9
   157c4:	andeq	r5, r1, ip, lsl r9
   157c8:	andeq	r5, r1, ip, lsl r9
   157cc:	andeq	r5, r1, ip, lsl r9
   157d0:	andeq	r5, r1, ip, lsl r9
   157d4:	andeq	r5, r1, ip, lsl r9
   157d8:	andeq	r5, r1, ip, lsl r9
   157dc:	andeq	r5, r1, ip, lsl r9
   157e0:	andeq	r5, r1, r0, lsr #18
   157e4:	andeq	r5, r1, r0, lsr #18
   157e8:	andeq	r5, r1, r0, lsr #18
   157ec:	andeq	r5, r1, r0, lsr #18
   157f0:	andeq	r5, r1, r0, lsr #18
   157f4:	andeq	r5, r1, r0, lsr #18
   157f8:	andeq	r5, r1, r0, lsr #18
   157fc:	andeq	r5, r1, r0, lsr #18
   15800:	andeq	r5, r1, r0, lsr #18
   15804:	andeq	r5, r1, r0, lsr #18
   15808:	andeq	r5, r1, ip, lsl r9
   1580c:	andeq	r5, r1, ip, lsl r9
   15810:	andeq	r5, r1, ip, lsl r9
   15814:	andeq	r5, r1, ip, lsl r9
   15818:	andeq	r5, r1, ip, lsl r9
   1581c:	andeq	r5, r1, ip, lsl r9
   15820:	andeq	r5, r1, ip, lsl r9
   15824:	andeq	r5, r1, r0, lsr #18
   15828:	andeq	r5, r1, r0, lsr #18
   1582c:	andeq	r5, r1, r0, lsr #18
   15830:	andeq	r5, r1, r0, lsr #18
   15834:	andeq	r5, r1, r0, lsr #18
   15838:	andeq	r5, r1, r0, lsr #18
   1583c:	andeq	r5, r1, r0, lsr #18
   15840:	andeq	r5, r1, r0, lsr #18
   15844:	andeq	r5, r1, r0, lsr #18
   15848:	andeq	r5, r1, r0, lsr #18
   1584c:	andeq	r5, r1, r0, lsr #18
   15850:	andeq	r5, r1, r0, lsr #18
   15854:	andeq	r5, r1, r0, lsr #18
   15858:	andeq	r5, r1, r0, lsr #18
   1585c:	andeq	r5, r1, r0, lsr #18
   15860:	andeq	r5, r1, r0, lsr #18
   15864:	andeq	r5, r1, r0, lsr #18
   15868:	andeq	r5, r1, r0, lsr #18
   1586c:	andeq	r5, r1, r0, lsr #18
   15870:	andeq	r5, r1, r0, lsr #18
   15874:	andeq	r5, r1, r0, lsr #18
   15878:	andeq	r5, r1, r0, lsr #18
   1587c:	andeq	r5, r1, r0, lsr #18
   15880:	andeq	r5, r1, r0, lsr #18
   15884:	andeq	r5, r1, r0, lsr #18
   15888:	andeq	r5, r1, r0, lsr #18
   1588c:	andeq	r5, r1, ip, lsl r9
   15890:	andeq	r5, r1, ip, lsl r9
   15894:	andeq	r5, r1, ip, lsl r9
   15898:	andeq	r5, r1, ip, lsl r9
   1589c:	andeq	r5, r1, ip, lsl r9
   158a0:	andeq	r5, r1, ip, lsl r9
   158a4:	andeq	r5, r1, r0, lsr #18
   158a8:	andeq	r5, r1, r0, lsr #18
   158ac:	andeq	r5, r1, r0, lsr #18
   158b0:	andeq	r5, r1, r0, lsr #18
   158b4:	andeq	r5, r1, r0, lsr #18
   158b8:	andeq	r5, r1, r0, lsr #18
   158bc:	andeq	r5, r1, r0, lsr #18
   158c0:	andeq	r5, r1, r0, lsr #18
   158c4:	andeq	r5, r1, r0, lsr #18
   158c8:	andeq	r5, r1, r0, lsr #18
   158cc:	andeq	r5, r1, r0, lsr #18
   158d0:	andeq	r5, r1, r0, lsr #18
   158d4:	andeq	r5, r1, r0, lsr #18
   158d8:	andeq	r5, r1, r0, lsr #18
   158dc:	andeq	r5, r1, r0, lsr #18
   158e0:	andeq	r5, r1, r0, lsr #18
   158e4:	andeq	r5, r1, r0, lsr #18
   158e8:	andeq	r5, r1, r0, lsr #18
   158ec:	andeq	r5, r1, r0, lsr #18
   158f0:	andeq	r5, r1, r0, lsr #18
   158f4:	andeq	r5, r1, r0, lsr #18
   158f8:	andeq	r5, r1, r0, lsr #18
   158fc:	andeq	r5, r1, r0, lsr #18
   15900:	andeq	r5, r1, r0, lsr #18
   15904:	andeq	r5, r1, r0, lsr #18
   15908:	andeq	r5, r1, r0, lsr #18
   1590c:	andeq	r5, r1, ip, lsl r9
   15910:	andeq	r5, r1, ip, lsl r9
   15914:	andeq	r5, r1, ip, lsl r9
   15918:	andeq	r5, r1, ip, lsl r9
   1591c:	bx	lr
   15920:	mov	r0, #0
   15924:	bx	lr
   15928:	sub	r0, r0, #9
   1592c:	cmp	r0, #23
   15930:	movhi	r0, #0
   15934:	bxhi	lr
   15938:	bic	r0, r0, #-16777216	; 0xff000000
   1593c:	movw	r1, #31
   15940:	movt	r1, #128	; 0x80
   15944:	mov	r2, #1
   15948:	and	r0, r2, r1, lsr r0
   1594c:	bx	lr
   15950:	sub	r1, r0, #65	; 0x41
   15954:	mov	r0, #0
   15958:	cmp	r1, #26
   1595c:	movwcc	r0, #1
   15960:	bx	lr
   15964:	mov	r1, r0
   15968:	sub	r2, r0, #48	; 0x30
   1596c:	mov	r0, #1
   15970:	cmp	r2, #22
   15974:	bhi	1598c <__assert_fail@plt+0x45d4>
   15978:	mov	ip, #1
   1597c:	movw	r3, #1023	; 0x3ff
   15980:	movt	r3, #126	; 0x7e
   15984:	tst	r3, ip, lsl r2
   15988:	bxne	lr
   1598c:	sub	r1, r1, #97	; 0x61
   15990:	cmp	r1, #6
   15994:	movcs	r0, #0
   15998:	bxcs	lr
   1599c:	bx	lr
   159a0:	sub	r1, r0, #65	; 0x41
   159a4:	cmp	r1, #26
   159a8:	addcc	r0, r0, #32
   159ac:	bx	lr
   159b0:	sub	r1, r0, #97	; 0x61
   159b4:	cmp	r1, #26
   159b8:	subcc	r0, r0, #32
   159bc:	bx	lr
   159c0:	push	{r4, r5, r6, sl, fp, lr}
   159c4:	add	fp, sp, #16
   159c8:	mov	r4, r0
   159cc:	bl	11208 <__fpending@plt>
   159d0:	mov	r5, r0
   159d4:	mov	r0, r4
   159d8:	bl	11214 <ferror_unlocked@plt>
   159dc:	mov	r6, r0
   159e0:	mov	r0, r4
   159e4:	bl	15a48 <__assert_fail@plt+0x4690>
   159e8:	cmp	r6, #0
   159ec:	beq	15a0c <__assert_fail@plt+0x4654>
   159f0:	mvn	r4, #0
   159f4:	cmp	r0, #0
   159f8:	bne	15a40 <__assert_fail@plt+0x4688>
   159fc:	bl	112bc <__errno_location@plt>
   15a00:	mov	r1, #0
   15a04:	str	r1, [r0]
   15a08:	b	15a40 <__assert_fail@plt+0x4688>
   15a0c:	cmp	r0, #0
   15a10:	mov	r4, r0
   15a14:	mvnne	r4, #0
   15a18:	cmp	r5, #0
   15a1c:	bne	15a40 <__assert_fail@plt+0x4688>
   15a20:	cmp	r0, #0
   15a24:	beq	15a40 <__assert_fail@plt+0x4688>
   15a28:	bl	112bc <__errno_location@plt>
   15a2c:	ldr	r0, [r0]
   15a30:	subs	r4, r0, #9
   15a34:	mvnne	r4, #0
   15a38:	mov	r0, r4
   15a3c:	pop	{r4, r5, r6, sl, fp, pc}
   15a40:	mov	r0, r4
   15a44:	pop	{r4, r5, r6, sl, fp, pc}
   15a48:	push	{r4, r5, fp, lr}
   15a4c:	add	fp, sp, #8
   15a50:	sub	sp, sp, #8
   15a54:	mov	r4, r0
   15a58:	bl	11304 <fileno@plt>
   15a5c:	cmn	r0, #1
   15a60:	ble	15ad8 <__assert_fail@plt+0x4720>
   15a64:	mov	r0, r4
   15a68:	bl	1125c <__freading@plt>
   15a6c:	cmp	r0, #0
   15a70:	beq	15a9c <__assert_fail@plt+0x46e4>
   15a74:	mov	r0, r4
   15a78:	bl	11304 <fileno@plt>
   15a7c:	mov	r1, #1
   15a80:	str	r1, [sp]
   15a84:	mov	r2, #0
   15a88:	mov	r3, #0
   15a8c:	bl	111e4 <lseek64@plt>
   15a90:	and	r0, r0, r1
   15a94:	cmn	r0, #1
   15a98:	beq	15ad8 <__assert_fail@plt+0x4720>
   15a9c:	mov	r0, r4
   15aa0:	bl	15ae8 <__assert_fail@plt+0x4730>
   15aa4:	cmp	r0, #0
   15aa8:	beq	15ad8 <__assert_fail@plt+0x4720>
   15aac:	bl	112bc <__errno_location@plt>
   15ab0:	ldr	r5, [r0]
   15ab4:	mov	r0, r4
   15ab8:	bl	1131c <fclose@plt>
   15abc:	cmp	r5, #0
   15ac0:	beq	15ad0 <__assert_fail@plt+0x4718>
   15ac4:	bl	112bc <__errno_location@plt>
   15ac8:	str	r5, [r0]
   15acc:	mvn	r0, #0
   15ad0:	sub	sp, fp, #8
   15ad4:	pop	{r4, r5, fp, pc}
   15ad8:	mov	r0, r4
   15adc:	sub	sp, fp, #8
   15ae0:	pop	{r4, r5, fp, lr}
   15ae4:	b	1131c <fclose@plt>
   15ae8:	push	{r4, sl, fp, lr}
   15aec:	add	fp, sp, #8
   15af0:	mov	r4, r0
   15af4:	cmp	r0, #0
   15af8:	beq	15b10 <__assert_fail@plt+0x4758>
   15afc:	mov	r0, r4
   15b00:	bl	1125c <__freading@plt>
   15b04:	cmp	r0, #0
   15b08:	movne	r0, r4
   15b0c:	blne	15b1c <__assert_fail@plt+0x4764>
   15b10:	mov	r0, r4
   15b14:	pop	{r4, sl, fp, lr}
   15b18:	b	1113c <fflush@plt>
   15b1c:	ldrb	r1, [r0, #1]
   15b20:	tst	r1, #1
   15b24:	bxeq	lr
   15b28:	push	{fp, lr}
   15b2c:	mov	fp, sp
   15b30:	sub	sp, sp, #8
   15b34:	mov	r1, #1
   15b38:	str	r1, [sp]
   15b3c:	mov	r2, #0
   15b40:	mov	r3, #0
   15b44:	bl	15b50 <__assert_fail@plt+0x4798>
   15b48:	mov	sp, fp
   15b4c:	pop	{fp, pc}
   15b50:	push	{r4, r5, r6, r7, fp, lr}
   15b54:	add	fp, sp, #16
   15b58:	sub	sp, sp, #8
   15b5c:	mov	r5, r3
   15b60:	mov	r6, r2
   15b64:	mov	r4, r0
   15b68:	ldr	r0, [r0, #4]
   15b6c:	ldr	r1, [r4, #8]
   15b70:	cmp	r1, r0
   15b74:	bne	15b90 <__assert_fail@plt+0x47d8>
   15b78:	ldrd	r0, [r4, #16]
   15b7c:	cmp	r1, r0
   15b80:	bne	15b90 <__assert_fail@plt+0x47d8>
   15b84:	ldr	r0, [r4, #36]	; 0x24
   15b88:	cmp	r0, #0
   15b8c:	beq	15ba8 <__assert_fail@plt+0x47f0>
   15b90:	mov	r0, r4
   15b94:	mov	r2, r6
   15b98:	mov	r3, r5
   15b9c:	sub	sp, fp, #16
   15ba0:	pop	{r4, r5, r6, r7, fp, lr}
   15ba4:	b	11328 <fseeko64@plt>
   15ba8:	ldr	r7, [fp, #8]
   15bac:	mov	r0, r4
   15bb0:	bl	11304 <fileno@plt>
   15bb4:	str	r7, [sp]
   15bb8:	mov	r2, r6
   15bbc:	mov	r3, r5
   15bc0:	bl	111e4 <lseek64@plt>
   15bc4:	and	r2, r0, r1
   15bc8:	cmn	r2, #1
   15bcc:	mvneq	r0, #0
   15bd0:	subeq	sp, fp, #16
   15bd4:	popeq	{r4, r5, r6, r7, fp, pc}
   15bd8:	strd	r0, [r4, #80]	; 0x50
   15bdc:	ldr	r0, [r4]
   15be0:	bic	r0, r0, #16
   15be4:	str	r0, [r4]
   15be8:	mov	r0, #0
   15bec:	sub	sp, fp, #16
   15bf0:	pop	{r4, r5, r6, r7, fp, pc}
   15bf4:	push	{fp, lr}
   15bf8:	mov	fp, sp
   15bfc:	bl	112bc <__errno_location@plt>
   15c00:	mov	r1, #12
   15c04:	str	r1, [r0]
   15c08:	mov	r0, #0
   15c0c:	pop	{fp, pc}
   15c10:	b	15618 <__assert_fail@plt+0x4260>
   15c14:	cmp	r1, #0
   15c18:	orreq	r1, r1, #1
   15c1c:	b	15648 <__assert_fail@plt+0x4290>
   15c20:	b	155c4 <__assert_fail@plt+0x420c>
   15c24:	clz	r3, r2
   15c28:	lsr	ip, r3, #5
   15c2c:	clz	r3, r1
   15c30:	lsr	r3, r3, #5
   15c34:	orrs	r3, r3, ip
   15c38:	movwne	r1, #1
   15c3c:	movwne	r2, #1
   15c40:	b	15eec <__assert_fail@plt+0x4b34>
   15c44:	push	{fp, lr}
   15c48:	mov	fp, sp
   15c4c:	mov	r0, #14
   15c50:	bl	11358 <nl_langinfo@plt>
   15c54:	movw	r1, #25319	; 0x62e7
   15c58:	movt	r1, #1
   15c5c:	cmp	r0, #0
   15c60:	movne	r1, r0
   15c64:	ldrb	r2, [r1]
   15c68:	movw	r0, #28512	; 0x6f60
   15c6c:	movt	r0, #1
   15c70:	cmp	r2, #0
   15c74:	movne	r0, r1
   15c78:	pop	{fp, pc}
   15c7c:	push	{r4, r5, r6, r7, fp, lr}
   15c80:	add	fp, sp, #16
   15c84:	sub	sp, sp, #8
   15c88:	mov	r7, r2
   15c8c:	mov	r4, r1
   15c90:	add	r5, sp, #4
   15c94:	cmp	r0, #0
   15c98:	movne	r5, r0
   15c9c:	mov	r0, r5
   15ca0:	bl	11220 <mbrtowc@plt>
   15ca4:	mov	r6, r0
   15ca8:	cmp	r7, #0
   15cac:	beq	15cd0 <__assert_fail@plt+0x4918>
   15cb0:	cmn	r6, #2
   15cb4:	bcc	15cd0 <__assert_fail@plt+0x4918>
   15cb8:	mov	r0, #0
   15cbc:	bl	15f28 <__assert_fail@plt+0x4b70>
   15cc0:	cmp	r0, #0
   15cc4:	ldrbeq	r0, [r4]
   15cc8:	streq	r0, [r5]
   15ccc:	moveq	r6, #1
   15cd0:	mov	r0, r6
   15cd4:	sub	sp, fp, #16
   15cd8:	pop	{r4, r5, r6, r7, fp, pc}
   15cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce0:	add	fp, sp, #28
   15ce4:	sub	sp, sp, #12
   15ce8:	mov	r4, r2
   15cec:	mov	sl, r1
   15cf0:	cmp	r0, #0
   15cf4:	beq	15d8c <__assert_fail@plt+0x49d4>
   15cf8:	mov	r7, r0
   15cfc:	mov	r0, #10
   15d00:	str	r0, [sp, #8]
   15d04:	mov	r0, #0
   15d08:	mov	r1, #10
   15d0c:	bl	15ebc <__assert_fail@plt+0x4b04>
   15d10:	mvn	r9, #0
   15d14:	cmp	r0, #0
   15d18:	beq	15eb0 <__assert_fail@plt+0x4af8>
   15d1c:	mov	r5, r0
   15d20:	str	r4, [sp, #4]
   15d24:	add	r4, sp, #8
   15d28:	ldr	r8, [sp, #8]
   15d2c:	mov	r0, r7
   15d30:	mov	r1, sl
   15d34:	mov	r2, r5
   15d38:	mov	r3, r4
   15d3c:	bl	112e0 <getgrouplist@plt>
   15d40:	mov	r6, r0
   15d44:	cmn	r0, #1
   15d48:	bgt	15d5c <__assert_fail@plt+0x49a4>
   15d4c:	ldr	r0, [sp, #8]
   15d50:	cmp	r8, r0
   15d54:	lsleq	r0, r0, #1
   15d58:	streq	r0, [sp, #8]
   15d5c:	ldr	r1, [sp, #8]
   15d60:	mov	r0, r5
   15d64:	bl	15ebc <__assert_fail@plt+0x4b04>
   15d68:	cmp	r0, #0
   15d6c:	beq	15e54 <__assert_fail@plt+0x4a9c>
   15d70:	cmp	r6, #0
   15d74:	mov	r5, r0
   15d78:	blt	15d28 <__assert_fail@plt+0x4970>
   15d7c:	ldr	r1, [sp, #4]
   15d80:	str	r0, [r1]
   15d84:	ldr	r9, [sp, #8]
   15d88:	b	15eb0 <__assert_fail@plt+0x4af8>
   15d8c:	mov	r0, #0
   15d90:	mov	r1, #0
   15d94:	bl	11364 <getgroups@plt>
   15d98:	str	r0, [sp, #8]
   15d9c:	cmn	r0, #1
   15da0:	ble	15e60 <__assert_fail@plt+0x4aa8>
   15da4:	cmn	sl, #1
   15da8:	bne	15db4 <__assert_fail@plt+0x49fc>
   15dac:	cmp	r0, #0
   15db0:	bne	15dbc <__assert_fail@plt+0x4a04>
   15db4:	add	r0, r0, #1
   15db8:	str	r0, [sp, #8]
   15dbc:	ldr	r1, [sp, #8]
   15dc0:	mov	r0, #0
   15dc4:	bl	15ebc <__assert_fail@plt+0x4b04>
   15dc8:	mvn	r9, #0
   15dcc:	cmp	r0, #0
   15dd0:	beq	15eb0 <__assert_fail@plt+0x4af8>
   15dd4:	mov	r7, r0
   15dd8:	add	r1, sl, #1
   15ddc:	cmn	sl, #1
   15de0:	movwne	r1, #1
   15de4:	ldr	r0, [sp, #8]
   15de8:	sub	r0, r0, r1
   15dec:	add	r1, r7, r1, lsl #2
   15df0:	bl	11364 <getgroups@plt>
   15df4:	cmn	r0, #1
   15df8:	ble	15ea0 <__assert_fail@plt+0x4ae8>
   15dfc:	cmn	sl, #1
   15e00:	strne	sl, [r7]
   15e04:	addne	r0, r0, #1
   15e08:	str	r7, [r4]
   15e0c:	cmp	r0, #2
   15e10:	blt	15eac <__assert_fail@plt+0x4af4>
   15e14:	add	r1, r7, r0, lsl #2
   15e18:	mov	r2, r7
   15e1c:	ldr	r3, [r2], #4
   15e20:	mov	r9, r0
   15e24:	ldr	r0, [r2]
   15e28:	cmp	r0, r3
   15e2c:	ldrne	r6, [r7]
   15e30:	cmpne	r0, r6
   15e34:	bne	15e40 <__assert_fail@plt+0x4a88>
   15e38:	sub	r9, r9, #1
   15e3c:	b	15e44 <__assert_fail@plt+0x4a8c>
   15e40:	str	r0, [r7, #4]!
   15e44:	add	r2, r2, #4
   15e48:	cmp	r2, r1
   15e4c:	bcc	15e24 <__assert_fail@plt+0x4a6c>
   15e50:	b	15eb0 <__assert_fail@plt+0x4af8>
   15e54:	mov	r0, r5
   15e58:	bl	12758 <__assert_fail@plt+0x13a0>
   15e5c:	b	15eb0 <__assert_fail@plt+0x4af8>
   15e60:	bl	112bc <__errno_location@plt>
   15e64:	ldr	r0, [r0]
   15e68:	mvn	r9, #0
   15e6c:	cmp	r0, #38	; 0x26
   15e70:	bne	15eb0 <__assert_fail@plt+0x4af8>
   15e74:	mov	r0, #0
   15e78:	mov	r1, #1
   15e7c:	bl	15ebc <__assert_fail@plt+0x4b04>
   15e80:	cmp	r0, #0
   15e84:	beq	15eb0 <__assert_fail@plt+0x4af8>
   15e88:	str	r0, [r4]
   15e8c:	str	sl, [r0]
   15e90:	add	r9, sl, #1
   15e94:	cmn	sl, #1
   15e98:	movwne	r9, #1
   15e9c:	b	15eb0 <__assert_fail@plt+0x4af8>
   15ea0:	mov	r0, r7
   15ea4:	bl	12758 <__assert_fail@plt+0x13a0>
   15ea8:	b	15eb0 <__assert_fail@plt+0x4af8>
   15eac:	mov	r9, r0
   15eb0:	mov	r0, r9
   15eb4:	sub	sp, fp, #28
   15eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ebc:	push	{fp, lr}
   15ec0:	mov	fp, sp
   15ec4:	cmp	r1, #536870912	; 0x20000000
   15ec8:	bcc	15ee0 <__assert_fail@plt+0x4b28>
   15ecc:	bl	112bc <__errno_location@plt>
   15ed0:	mov	r1, #12
   15ed4:	str	r1, [r0]
   15ed8:	mov	r0, #0
   15edc:	pop	{fp, pc}
   15ee0:	lsl	r1, r1, #2
   15ee4:	bl	15648 <__assert_fail@plt+0x4290>
   15ee8:	pop	{fp, pc}
   15eec:	cmp	r2, #0
   15ef0:	beq	15f20 <__assert_fail@plt+0x4b68>
   15ef4:	mvn	r3, #0
   15ef8:	udiv	r3, r3, r2
   15efc:	cmp	r3, r1
   15f00:	bcs	15f20 <__assert_fail@plt+0x4b68>
   15f04:	push	{fp, lr}
   15f08:	mov	fp, sp
   15f0c:	bl	112bc <__errno_location@plt>
   15f10:	mov	r1, #12
   15f14:	str	r1, [r0]
   15f18:	mov	r0, #0
   15f1c:	pop	{fp, pc}
   15f20:	mul	r1, r2, r1
   15f24:	b	15648 <__assert_fail@plt+0x4290>
   15f28:	push	{r4, sl, fp, lr}
   15f2c:	add	fp, sp, #8
   15f30:	sub	sp, sp, #264	; 0x108
   15f34:	add	r1, sp, #7
   15f38:	movw	r2, #257	; 0x101
   15f3c:	bl	15f8c <__assert_fail@plt+0x4bd4>
   15f40:	mov	r4, #0
   15f44:	cmp	r0, #0
   15f48:	bne	15f80 <__assert_fail@plt+0x4bc8>
   15f4c:	add	r0, sp, #7
   15f50:	movw	r1, #28518	; 0x6f66
   15f54:	movt	r1, #1
   15f58:	bl	11124 <strcmp@plt>
   15f5c:	cmp	r0, #0
   15f60:	beq	15f80 <__assert_fail@plt+0x4bc8>
   15f64:	add	r0, sp, #7
   15f68:	movw	r1, #28520	; 0x6f68
   15f6c:	movt	r1, #1
   15f70:	bl	11124 <strcmp@plt>
   15f74:	mov	r4, r0
   15f78:	cmp	r0, #0
   15f7c:	movwne	r4, #1
   15f80:	mov	r0, r4
   15f84:	sub	sp, fp, #8
   15f88:	pop	{r4, sl, fp, pc}
   15f8c:	b	15f90 <__assert_fail@plt+0x4bd8>
   15f90:	push	{r4, r5, r6, r7, fp, lr}
   15f94:	add	fp, sp, #16
   15f98:	mov	r6, r2
   15f9c:	mov	r4, r1
   15fa0:	bl	1602c <__assert_fail@plt+0x4c74>
   15fa4:	cmp	r0, #0
   15fa8:	beq	15fd8 <__assert_fail@plt+0x4c20>
   15fac:	mov	r7, r0
   15fb0:	bl	112a4 <strlen@plt>
   15fb4:	cmp	r0, r6
   15fb8:	bcs	15ff8 <__assert_fail@plt+0x4c40>
   15fbc:	add	r2, r0, #1
   15fc0:	mov	r0, r4
   15fc4:	mov	r1, r7
   15fc8:	bl	1116c <memcpy@plt>
   15fcc:	mov	r5, #0
   15fd0:	mov	r0, r5
   15fd4:	pop	{r4, r5, r6, r7, fp, pc}
   15fd8:	mov	r5, #22
   15fdc:	cmp	r6, #0
   15fe0:	movne	r0, #0
   15fe4:	strbne	r0, [r4]
   15fe8:	movne	r0, r5
   15fec:	popne	{r4, r5, r6, r7, fp, pc}
   15ff0:	mov	r0, r5
   15ff4:	pop	{r4, r5, r6, r7, fp, pc}
   15ff8:	mov	r5, #34	; 0x22
   15ffc:	cmp	r6, #0
   16000:	beq	16020 <__assert_fail@plt+0x4c68>
   16004:	sub	r6, r6, #1
   16008:	mov	r0, r4
   1600c:	mov	r1, r7
   16010:	mov	r2, r6
   16014:	bl	1116c <memcpy@plt>
   16018:	mov	r0, #0
   1601c:	strb	r0, [r4, r6]
   16020:	mov	r0, r5
   16024:	pop	{r4, r5, r6, r7, fp, pc}
   16028:	b	1602c <__assert_fail@plt+0x4c74>
   1602c:	mov	r1, #0
   16030:	b	11334 <setlocale@plt>
   16034:	cmp	r3, #0
   16038:	cmpeq	r2, #0
   1603c:	bne	16054 <__assert_fail@plt+0x4c9c>
   16040:	cmp	r1, #0
   16044:	cmpeq	r0, #0
   16048:	mvnne	r1, #0
   1604c:	mvnne	r0, #0
   16050:	b	16070 <__assert_fail@plt+0x4cb8>
   16054:	sub	sp, sp, #8
   16058:	push	{sp, lr}
   1605c:	bl	16080 <__assert_fail@plt+0x4cc8>
   16060:	ldr	lr, [sp, #4]
   16064:	add	sp, sp, #8
   16068:	pop	{r2, r3}
   1606c:	bx	lr
   16070:	push	{r1, lr}
   16074:	mov	r0, #8
   16078:	bl	11100 <raise@plt>
   1607c:	pop	{r1, pc}
   16080:	cmp	r1, r3
   16084:	cmpeq	r0, r2
   16088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1608c:	mov	r4, r0
   16090:	movcc	r0, #0
   16094:	mov	r5, r1
   16098:	ldr	lr, [sp, #36]	; 0x24
   1609c:	movcc	r1, r0
   160a0:	bcc	1619c <__assert_fail@plt+0x4de4>
   160a4:	cmp	r3, #0
   160a8:	clzeq	ip, r2
   160ac:	clzne	ip, r3
   160b0:	addeq	ip, ip, #32
   160b4:	cmp	r5, #0
   160b8:	clzeq	r1, r4
   160bc:	addeq	r1, r1, #32
   160c0:	clzne	r1, r5
   160c4:	sub	ip, ip, r1
   160c8:	sub	sl, ip, #32
   160cc:	lsl	r9, r3, ip
   160d0:	rsb	fp, ip, #32
   160d4:	orr	r9, r9, r2, lsl sl
   160d8:	orr	r9, r9, r2, lsr fp
   160dc:	lsl	r8, r2, ip
   160e0:	cmp	r5, r9
   160e4:	cmpeq	r4, r8
   160e8:	movcc	r0, #0
   160ec:	movcc	r1, r0
   160f0:	bcc	1610c <__assert_fail@plt+0x4d54>
   160f4:	mov	r0, #1
   160f8:	subs	r4, r4, r8
   160fc:	lsl	r1, r0, sl
   16100:	orr	r1, r1, r0, lsr fp
   16104:	lsl	r0, r0, ip
   16108:	sbc	r5, r5, r9
   1610c:	cmp	ip, #0
   16110:	beq	1619c <__assert_fail@plt+0x4de4>
   16114:	lsr	r6, r8, #1
   16118:	orr	r6, r6, r9, lsl #31
   1611c:	lsr	r7, r9, #1
   16120:	mov	r2, ip
   16124:	b	16148 <__assert_fail@plt+0x4d90>
   16128:	subs	r3, r4, r6
   1612c:	sbc	r8, r5, r7
   16130:	adds	r3, r3, r3
   16134:	adc	r8, r8, r8
   16138:	adds	r4, r3, #1
   1613c:	adc	r5, r8, #0
   16140:	subs	r2, r2, #1
   16144:	beq	16164 <__assert_fail@plt+0x4dac>
   16148:	cmp	r5, r7
   1614c:	cmpeq	r4, r6
   16150:	bcs	16128 <__assert_fail@plt+0x4d70>
   16154:	adds	r4, r4, r4
   16158:	adc	r5, r5, r5
   1615c:	subs	r2, r2, #1
   16160:	bne	16148 <__assert_fail@plt+0x4d90>
   16164:	lsr	r3, r4, ip
   16168:	orr	r3, r3, r5, lsl fp
   1616c:	lsr	r2, r5, ip
   16170:	orr	r3, r3, r5, lsr sl
   16174:	adds	r0, r0, r4
   16178:	mov	r4, r3
   1617c:	lsl	r3, r2, ip
   16180:	orr	r3, r3, r4, lsl sl
   16184:	lsl	ip, r4, ip
   16188:	orr	r3, r3, r4, lsr fp
   1618c:	adc	r1, r1, r5
   16190:	subs	r0, r0, ip
   16194:	mov	r5, r2
   16198:	sbc	r1, r1, r3
   1619c:	cmp	lr, #0
   161a0:	strdne	r4, [lr]
   161a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161ac:	mov	r7, r0
   161b0:	ldr	r6, [pc, #72]	; 16200 <__assert_fail@plt+0x4e48>
   161b4:	ldr	r5, [pc, #72]	; 16204 <__assert_fail@plt+0x4e4c>
   161b8:	add	r6, pc, r6
   161bc:	add	r5, pc, r5
   161c0:	sub	r6, r6, r5
   161c4:	mov	r8, r1
   161c8:	mov	r9, r2
   161cc:	bl	110bc <calloc@plt-0x20>
   161d0:	asrs	r6, r6, #2
   161d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   161d8:	mov	r4, #0
   161dc:	add	r4, r4, #1
   161e0:	ldr	r3, [r5], #4
   161e4:	mov	r2, r9
   161e8:	mov	r1, r8
   161ec:	mov	r0, r7
   161f0:	blx	r3
   161f4:	cmp	r6, r4
   161f8:	bne	161dc <__assert_fail@plt+0x4e24>
   161fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16200:	andeq	r1, r1, r4, asr #26
   16204:	andeq	r1, r1, ip, lsr sp
   16208:	bx	lr
   1620c:	ldr	r3, [pc, #12]	; 16220 <__assert_fail@plt+0x4e68>
   16210:	mov	r1, #0
   16214:	add	r3, pc, r3
   16218:	ldr	r2, [r3]
   1621c:	b	112c8 <__cxa_atexit@plt>
   16220:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

00016224 <.fini>:
   16224:	push	{r3, lr}
   16228:	pop	{r3, pc}
