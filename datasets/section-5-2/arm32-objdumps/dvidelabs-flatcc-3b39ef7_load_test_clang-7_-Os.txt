
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012398 <.init>:
   12398:	push	{r3, lr}
   1239c:	bl	124e4 <_start@@Base+0x3c>
   123a0:	pop	{r3, pc}

Disassembly of section .plt:

000123a4 <strcmp@plt-0x14>:
   123a4:	push	{lr}		; (str lr, [sp, #-4]!)
   123a8:	ldr	lr, [pc, #4]	; 123b4 <strcmp@plt-0x4>
   123ac:	add	lr, pc, lr
   123b0:	ldr	pc, [lr, #8]!
   123b4:	andeq	r6, r1, ip, asr #24

000123b8 <strcmp@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #90112	; 0x16000
   123c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000123c4 <printf@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #90112	; 0x16000
   123cc:	ldr	pc, [ip, #3140]!	; 0xc44

000123d0 <fopen@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #90112	; 0x16000
   123d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000123dc <free@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #90112	; 0x16000
   123e4:	ldr	pc, [ip, #3124]!	; 0xc34

000123e8 <memcpy@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #90112	; 0x16000
   123f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000123f4 <fwrite_unlocked@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #90112	; 0x16000
   123fc:	ldr	pc, [ip, #3108]!	; 0xc24

00012400 <memcmp@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #90112	; 0x16000
   12408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001240c <realloc@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #90112	; 0x16000
   12414:	ldr	pc, [ip, #3092]!	; 0xc14

00012418 <gettimeofday@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #90112	; 0x16000
   12420:	ldr	pc, [ip, #3084]!	; 0xc0c

00012424 <puts@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #90112	; 0x16000
   1242c:	ldr	pc, [ip, #3076]!	; 0xc04

00012430 <malloc@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #90112	; 0x16000
   12438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001243c <__libc_start_main@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #90112	; 0x16000
   12444:	ldr	pc, [ip, #3060]!	; 0xbf4

00012448 <__gmon_start__@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #90112	; 0x16000
   12450:	ldr	pc, [ip, #3052]!	; 0xbec

00012454 <strlen@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #90112	; 0x16000
   1245c:	ldr	pc, [ip, #3044]!	; 0xbe4

00012460 <posix_memalign@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #90112	; 0x16000
   12468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001246c <memset@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #90112	; 0x16000
   12474:	ldr	pc, [ip, #3028]!	; 0xbd4

00012478 <memchr@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #90112	; 0x16000
   12480:	ldr	pc, [ip, #3020]!	; 0xbcc

00012484 <fclose@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #90112	; 0x16000
   1248c:	ldr	pc, [ip, #3012]!	; 0xbc4

00012490 <abort@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #90112	; 0x16000
   12498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001249c <__assert_fail@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #90112	; 0x16000
   124a4:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1243c <__libc_start_main@plt>
   124d4:	bl	12490 <abort@plt>
   124d8:	ldrdeq	r7, [r1], -r8
   124dc:	muleq	r1, r8, r5
   124e0:	andeq	r7, r1, r8, ror r1
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12448 <__gmon_start__@plt>
   12500:	andeq	r6, r1, ip, lsl #22
   12504:	andeq	r0, r0, ip, asr r0
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	r9, r2, r8, rrx
   1252c:	andeq	r9, r2, r8, rrx
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	r9, r2, r8, rrx
   12564:	andeq	r9, r2, r8, rrx
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	r9, r2, r8, rrx
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #4
   125a4:	vpush	{d8-d10}
   125a8:	sub	sp, sp, #272	; 0x110
   125ac:	add	r4, sp, #32
   125b0:	mov	r0, r4
   125b4:	bl	12f7c <flatcc_builder_init@@Base>
   125b8:	mov	r0, r4
   125bc:	bl	12b08 <main@@Base+0x570>
   125c0:	sub	r1, fp, #64	; 0x40
   125c4:	mov	r0, r4
   125c8:	bl	169e8 <flatcc_builder_finalize_buffer@@Base>
   125cc:	movw	r1, #29194	; 0x720a
   125d0:	mov	r7, r0
   125d4:	movw	r0, #29172	; 0x71f4
   125d8:	movt	r0, #1
   125dc:	movt	r1, #1
   125e0:	bl	123d0 <fopen@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	12924 <main@@Base+0x38c>
   125ec:	ldr	r6, [fp, #-64]	; 0xffffffc0
   125f0:	mov	r5, r0
   125f4:	mov	r0, r7
   125f8:	mov	r1, #1
   125fc:	mov	r4, #1
   12600:	mov	r3, r5
   12604:	mov	r2, r6
   12608:	bl	123f4 <fwrite_unlocked@plt>
   1260c:	mov	r8, r0
   12610:	mov	r0, r5
   12614:	bl	12484 <fclose@plt>
   12618:	cmp	r6, r8
   1261c:	bne	12984 <main@@Base+0x3ec>
   12620:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12624:	movw	r0, #29197	; 0x720d
   12628:	movt	r0, #1
   1262c:	bl	123c4 <printf@plt>
   12630:	movw	r0, #30624	; 0x77a0
   12634:	movt	r0, #1
   12638:	bl	12424 <puts@plt>
   1263c:	add	r0, r7, #8
   12640:	str	r0, [sp, #8]
   12644:	bl	12d48 <main@@Base+0x7b0>
   12648:	movw	sl, #29499	; 0x733b
   1264c:	movw	r6, #36976	; 0x9070
   12650:	vmov.f64	d8, d0
   12654:	mov	r0, #0
   12658:	str	r7, [sp, #4]
   1265c:	movt	sl, #1
   12660:	movt	r6, #2
   12664:	add	r4, sp, #32
   12668:	str	r0, [sp, #12]
   1266c:	mov	r0, r4
   12670:	bl	12b08 <main@@Base+0x570>
   12674:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12678:	mov	r0, r4
   1267c:	mov	r1, r7
   12680:	bl	1699c <flatcc_builder_copy_buffer@@Base>
   12684:	cmp	r7, #0
   12688:	beq	12a50 <main@@Base+0x4b8>
   1268c:	ldr	r0, [r7, #4]
   12690:	movw	r1, #20301	; 0x4f4d
   12694:	movt	r1, #21326	; 0x534e
   12698:	cmp	r0, r1
   1269c:	bne	12a50 <main@@Base+0x4b8>
   126a0:	ldr	r8, [r7]
   126a4:	mov	r5, r7
   126a8:	ldr	r0, [r5, r8]!
   126ac:	mov	r4, r5
   126b0:	ldrh	r9, [r4, -r0]!
   126b4:	cmp	r9, #11
   126b8:	bls	12a24 <main@@Base+0x48c>
   126bc:	ldrh	r0, [r4, #10]
   126c0:	cmp	r0, #0
   126c4:	beq	12a24 <main@@Base+0x48c>
   126c8:	mov	r1, r5
   126cc:	ldr	r0, [r1, r0]!
   126d0:	add	r0, r1, r0
   126d4:	movw	r1, #29215	; 0x721f
   126d8:	add	r0, r0, #4
   126dc:	movt	r1, #1
   126e0:	bl	123b8 <strcmp@plt>
   126e4:	cmp	r0, #0
   126e8:	bne	12ad0 <main@@Base+0x538>
   126ec:	cmp	r9, #28
   126f0:	bcc	12ab0 <main@@Base+0x518>
   126f4:	ldrh	r0, [r4, #26]
   126f8:	cmp	r0, #0
   126fc:	beq	12ab0 <main@@Base+0x518>
   12700:	ldr	r1, [r5, r0]!
   12704:	ldr	r2, [r5, r1]!
   12708:	cmp	r2, #1000	; 0x3e8
   1270c:	bne	12ab0 <main@@Base+0x518>
   12710:	add	r1, r1, r8
   12714:	add	r2, r5, #4
   12718:	add	r0, r1, r0
   1271c:	ldr	r1, [sp, #8]
   12720:	str	r2, [sp, #20]
   12724:	add	r7, r1, r0
   12728:	ldr	r0, [r2, #-4]
   1272c:	mov	r2, #0
   12730:	str	r0, [sp, #16]
   12734:	ldr	r0, [sp, #16]
   12738:	cmp	r0, r2
   1273c:	bls	12a70 <main@@Base+0x4d8>
   12740:	ldr	r1, [sp, #20]
   12744:	ldr	lr, [r1, r2, lsl #2]!
   12748:	adds	r0, r1, lr
   1274c:	beq	12a50 <main@@Base+0x4b8>
   12750:	ldr	r1, [r0]
   12754:	mov	r3, r0
   12758:	str	r2, [sp, #24]
   1275c:	ldrh	r2, [r3, -r1]!
   12760:	cmp	r2, #12
   12764:	bcc	12a24 <main@@Base+0x48c>
   12768:	ldrh	r1, [r3, #10]
   1276c:	cmp	r1, #0
   12770:	beq	12a24 <main@@Base+0x48c>
   12774:	mov	r4, r0
   12778:	mov	r5, #0
   1277c:	cmp	r2, #16
   12780:	ldr	ip, [r4, r1]!
   12784:	add	r4, r4, ip
   12788:	add	r4, r4, #4
   1278c:	bcc	127a4 <main@@Base+0x20c>
   12790:	ldrh	r2, [r3, #14]
   12794:	cmp	r2, #0
   12798:	ldrne	r2, [r0, r2]!
   1279c:	addne	r0, r0, r2
   127a0:	addne	r5, r0, #4
   127a4:	ldr	r0, [r4, #-4]
   127a8:	cmp	r0, #700	; 0x2bc
   127ac:	bne	12a90 <main@@Base+0x4f8>
   127b0:	cmp	r5, #0
   127b4:	beq	12a30 <main@@Base+0x498>
   127b8:	ldr	r0, [r5, #-4]
   127bc:	movw	r2, #34464	; 0x86a0
   127c0:	movt	r2, #1
   127c4:	cmp	r0, r2
   127c8:	bne	12a30 <main@@Base+0x498>
   127cc:	add	r0, ip, lr
   127d0:	mov	r9, #0
   127d4:	str	r7, [sp, #28]
   127d8:	add	r0, r0, r1
   127dc:	add	r8, r7, r0
   127e0:	mov	r0, r8
   127e4:	mov	r1, sl
   127e8:	mov	r2, #7
   127ec:	bl	12400 <memcmp@plt>
   127f0:	cmp	r0, #0
   127f4:	bne	129bc <main@@Base+0x424>
   127f8:	add	r9, r9, #1
   127fc:	add	r8, r8, #7
   12800:	cmp	r9, #100	; 0x64
   12804:	bcc	127e0 <main@@Base+0x248>
   12808:	ldr	r7, [sp, #28]
   1280c:	mov	r4, #0
   12810:	mov	r0, r5
   12814:	mov	r1, r6
   12818:	mov	r2, #1000	; 0x3e8
   1281c:	bl	12400 <memcmp@plt>
   12820:	cmp	r0, #0
   12824:	bne	12a04 <main@@Base+0x46c>
   12828:	add	r4, r4, #1
   1282c:	add	r5, r5, #1000	; 0x3e8
   12830:	cmp	r4, #99	; 0x63
   12834:	bls	12810 <main@@Base+0x278>
   12838:	ldr	r2, [sp, #24]
   1283c:	add	r7, r7, #4
   12840:	add	r2, r2, #1
   12844:	lsr	r0, r2, #3
   12848:	cmp	r0, #124	; 0x7c
   1284c:	bls	12734 <main@@Base+0x19c>
   12850:	ldr	r0, [sp, #12]
   12854:	ldr	r7, [sp, #4]
   12858:	add	r0, r0, #1
   1285c:	cmp	r0, #10
   12860:	bcc	12664 <main@@Base+0xcc>
   12864:	bl	12d48 <main@@Base+0x7b0>
   12868:	ldr	r4, [fp, #-64]	; 0xffffffc0
   1286c:	movw	r0, #30357	; 0x7695
   12870:	movw	r1, #29335	; 0x7297
   12874:	vmov.f64	d9, d0
   12878:	movt	r0, #1
   1287c:	movt	r1, #1
   12880:	bl	123c4 <printf@plt>
   12884:	movw	r0, #30372	; 0x76a4
   12888:	vsub.f64	d9, d9, d8
   1288c:	vmov	r2, r3, d9
   12890:	movt	r0, #1
   12894:	bl	123c4 <printf@plt>
   12898:	movw	r0, #30396	; 0x76bc
   1289c:	mov	r1, #10
   128a0:	movt	r0, #1
   128a4:	bl	123c4 <printf@plt>
   128a8:	movw	r0, #30412	; 0x76cc
   128ac:	mov	r1, r4
   128b0:	movt	r0, #1
   128b4:	bl	123c4 <printf@plt>
   128b8:	vldr	d8, [pc, #560]	; 12af0 <main@@Base+0x558>
   128bc:	vmov	s0, r4
   128c0:	vmov.f64	d10, #36	; 0x41200000  10.0
   128c4:	movw	r0, #30431	; 0x76df
   128c8:	vcvt.f64.u32	d16, s0
   128cc:	movt	r0, #1
   128d0:	vmul.f64	d16, d16, d10
   128d4:	vdiv.f64	d16, d16, d8
   128d8:	vdiv.f64	d16, d16, d9
   128dc:	vmov	r2, r3, d16
   128e0:	bl	123c4 <printf@plt>
   128e4:	movw	r0, #30455	; 0x76f7
   128e8:	vdiv.f64	d16, d10, d9
   128ec:	vmov	r2, r3, d16
   128f0:	movt	r0, #1
   128f4:	bl	123c4 <printf@plt>
   128f8:	vldr	d17, [pc, #504]	; 12af8 <main@@Base+0x560>
   128fc:	vldr	d18, [pc, #508]	; 12b00 <main@@Base+0x568>
   12900:	vmul.f64	d16, d9, d17
   12904:	vdiv.f64	d16, d16, d10
   12908:	vcmpe.f64	d16, d18
   1290c:	vmrs	APSR_nzcv, fpscr
   12910:	bpl	1292c <main@@Base+0x394>
   12914:	movw	r0, #30488	; 0x7718
   12918:	vmov	r2, r3, d16
   1291c:	movt	r0, #1
   12920:	b	1297c <main@@Base+0x3e4>
   12924:	mvn	r4, #0
   12928:	b	12984 <main@@Base+0x3ec>
   1292c:	vcmpe.f64	d16, d8
   12930:	vmrs	APSR_nzcv, fpscr
   12934:	bpl	1294c <main@@Base+0x3b4>
   12938:	movw	r0, #30512	; 0x7730
   1293c:	vdiv.f64	d16, d16, d18
   12940:	vmov	r2, r3, d16
   12944:	movt	r0, #1
   12948:	b	1297c <main@@Base+0x3e4>
   1294c:	vcmpe.f64	d16, d17
   12950:	vmrs	APSR_nzcv, fpscr
   12954:	bpl	1296c <main@@Base+0x3d4>
   12958:	movw	r0, #30536	; 0x7748
   1295c:	vdiv.f64	d16, d16, d8
   12960:	vmov	r2, r3, d16
   12964:	movt	r0, #1
   12968:	b	1297c <main@@Base+0x3e4>
   1296c:	movw	r0, #30560	; 0x7760
   12970:	vdiv.f64	d16, d16, d17
   12974:	vmov	r2, r3, d16
   12978:	movt	r0, #1
   1297c:	bl	123c4 <printf@plt>
   12980:	mov	r4, #0
   12984:	add	r0, sp, #32
   12988:	bl	13118 <flatcc_builder_clear@@Base>
   1298c:	mov	r0, r7
   12990:	bl	123dc <free@plt>
   12994:	cmp	r4, #0
   12998:	beq	129a8 <main@@Base+0x410>
   1299c:	movw	r0, #30592	; 0x7780
   129a0:	movt	r0, #1
   129a4:	bl	12424 <puts@plt>
   129a8:	mov	r0, r4
   129ac:	sub	sp, fp, #56	; 0x38
   129b0:	vpop	{d8-d10}
   129b4:	add	sp, sp, #4
   129b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129bc:	movw	r0, #30158	; 0x75ce
   129c0:	mov	r1, r9
   129c4:	mov	r2, r4
   129c8:	movt	r0, #1
   129cc:	bl	123c4 <printf@plt>
   129d0:	ldr	r0, [sp, #4]
   129d4:	sub	r1, r8, r0
   129d8:	movw	r0, #30190	; 0x75ee
   129dc:	movt	r0, #1
   129e0:	bl	123c4 <printf@plt>
   129e4:	movw	r0, #35704	; 0x8b78
   129e8:	movw	r1, #29237	; 0x7235
   129ec:	movw	r3, #30093	; 0x758d
   129f0:	mov	r2, #85	; 0x55
   129f4:	movt	r0, #1
   129f8:	movt	r1, #1
   129fc:	movt	r3, #1
   12a00:	bl	1249c <__assert_fail@plt>
   12a04:	movw	r0, #35704	; 0x8b78
   12a08:	movw	r1, #29237	; 0x7235
   12a0c:	movw	r3, #30093	; 0x758d
   12a10:	mov	r2, #91	; 0x5b
   12a14:	movt	r0, #1
   12a18:	movt	r1, #1
   12a1c:	movt	r3, #1
   12a20:	bl	1249c <__assert_fail@plt>
   12a24:	movw	r0, #30060	; 0x756c
   12a28:	movt	r0, #1
   12a2c:	b	12a58 <main@@Base+0x4c0>
   12a30:	movw	r0, #35704	; 0x8b78
   12a34:	movw	r1, #29237	; 0x7235
   12a38:	movw	r3, #30093	; 0x758d
   12a3c:	mov	r2, #78	; 0x4e
   12a40:	movt	r0, #1
   12a44:	movt	r1, #1
   12a48:	movt	r3, #1
   12a4c:	bl	1249c <__assert_fail@plt>
   12a50:	movw	r0, #29846	; 0x7496
   12a54:	movt	r0, #1
   12a58:	movw	r1, #29884	; 0x74bc
   12a5c:	movw	r3, #29979	; 0x751b
   12a60:	movw	r2, #699	; 0x2bb
   12a64:	movt	r1, #1
   12a68:	movt	r3, #1
   12a6c:	bl	1249c <__assert_fail@plt>
   12a70:	movw	r0, #30203	; 0x75fb
   12a74:	movw	r1, #29884	; 0x74bc
   12a78:	movw	r3, #30258	; 0x7632
   12a7c:	movw	r2, #693	; 0x2b5
   12a80:	movt	r0, #1
   12a84:	movt	r1, #1
   12a88:	movt	r3, #1
   12a8c:	bl	1249c <__assert_fail@plt>
   12a90:	movw	r0, #35704	; 0x8b78
   12a94:	movw	r1, #29237	; 0x7235
   12a98:	movw	r3, #30093	; 0x758d
   12a9c:	mov	r2, #74	; 0x4a
   12aa0:	movt	r0, #1
   12aa4:	movt	r1, #1
   12aa8:	movt	r3, #1
   12aac:	bl	1249c <__assert_fail@plt>
   12ab0:	movw	r0, #29228	; 0x722c
   12ab4:	movw	r1, #29237	; 0x7235
   12ab8:	movw	r3, #29312	; 0x7280
   12abc:	mov	r2, #143	; 0x8f
   12ac0:	movt	r0, #1
   12ac4:	movt	r1, #1
   12ac8:	movt	r3, #1
   12acc:	bl	1249c <__assert_fail@plt>
   12ad0:	movw	r0, #29228	; 0x722c
   12ad4:	movw	r1, #29237	; 0x7235
   12ad8:	movw	r3, #29312	; 0x7280
   12adc:	mov	r2, #139	; 0x8b
   12ae0:	movt	r0, #1
   12ae4:	movt	r1, #1
   12ae8:	movt	r3, #1
   12aec:	bl	1249c <__assert_fail@plt>
   12af0:	andeq	r0, r0, r0
   12af4:	smlawbmi	lr, r0, r4, r8
   12af8:	andeq	r0, r0, r0
   12afc:	bicmi	ip, sp, r5, ror #26
   12b00:	andeq	r0, r0, r0
   12b04:	addmi	r4, pc, r0
   12b08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b0c:	add	fp, sp, #24
   12b10:	mov	r4, r0
   12b14:	bl	1310c <flatcc_builder_reset@@Base>
   12b18:	movw	r1, #29423	; 0x72ef
   12b1c:	mov	r0, r4
   12b20:	mov	r2, #0
   12b24:	mov	r3, #0
   12b28:	movt	r1, #1
   12b2c:	bl	13978 <flatcc_builder_start_buffer@@Base>
   12b30:	cmp	r0, #0
   12b34:	bne	12b44 <main@@Base+0x5ac>
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #36	; 0x24
   12b40:	bl	149f4 <flatcc_builder_start_table@@Base>
   12b44:	movw	r1, #29215	; 0x721f
   12b48:	mov	r0, r4
   12b4c:	movt	r1, #1
   12b50:	bl	1666c <flatcc_builder_create_string_str@@Base>
   12b54:	cmp	r0, #0
   12b58:	beq	12b74 <main@@Base+0x5dc>
   12b5c:	mov	r5, r0
   12b60:	mov	r0, r4
   12b64:	mov	r1, #3
   12b68:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   12b6c:	cmp	r0, #0
   12b70:	strne	r5, [r0]
   12b74:	mov	r0, r4
   12b78:	bl	146b4 <flatcc_builder_start_offset_vector@@Base>
   12b7c:	movw	r5, #29499	; 0x733b
   12b80:	movw	r6, #36976	; 0x9070
   12b84:	movw	r8, #30584	; 0x7778
   12b88:	mov	r9, #0
   12b8c:	movt	r5, #1
   12b90:	movt	r6, #2
   12b94:	movt	r8, #1
   12b98:	mov	r0, r4
   12b9c:	mov	r1, #36	; 0x24
   12ba0:	bl	149f4 <flatcc_builder_start_table@@Base>
   12ba4:	mov	r0, r4
   12ba8:	bl	14858 <flatcc_builder_start_string@@Base>
   12bac:	mov	r7, #100	; 0x64
   12bb0:	mov	r0, r4
   12bb4:	mov	r1, r5
   12bb8:	mov	r2, #7
   12bbc:	bl	14320 <flatcc_builder_append_string@@Base>
   12bc0:	subs	r7, r7, #1
   12bc4:	bne	12bb0 <main@@Base+0x618>
   12bc8:	mov	r0, r4
   12bcc:	bl	166d4 <flatcc_builder_end_string@@Base>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12bf0 <main@@Base+0x658>
   12bd8:	mov	r7, r0
   12bdc:	mov	r0, r4
   12be0:	mov	r1, #3
   12be4:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   12be8:	cmp	r0, #0
   12bec:	strne	r7, [r0]
   12bf0:	mov	r0, r4
   12bf4:	mov	r1, #1
   12bf8:	mov	r2, #1
   12bfc:	mvn	r3, #0
   12c00:	bl	14628 <flatcc_builder_start_vector@@Base>
   12c04:	mov	r7, #100	; 0x64
   12c08:	mov	r0, r4
   12c0c:	mov	r1, r6
   12c10:	mov	r2, #1000	; 0x3e8
   12c14:	bl	13f88 <flatcc_builder_append_vector@@Base>
   12c18:	subs	r7, r7, #1
   12c1c:	bne	12c08 <main@@Base+0x670>
   12c20:	mov	r0, r4
   12c24:	bl	15694 <flatcc_builder_end_vector@@Base>
   12c28:	cmp	r0, #0
   12c2c:	beq	12c48 <main@@Base+0x6b0>
   12c30:	mov	r7, r0
   12c34:	mov	r0, r4
   12c38:	mov	r1, #5
   12c3c:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   12c40:	cmp	r0, #0
   12c44:	strne	r7, [r0]
   12c48:	mov	r0, r4
   12c4c:	mov	r1, r8
   12c50:	mov	r2, #1
   12c54:	bl	152f4 <flatcc_builder_check_required@@Base>
   12c58:	cmp	r0, #0
   12c5c:	beq	12ce4 <main@@Base+0x74c>
   12c60:	mov	r0, r4
   12c64:	bl	15384 <flatcc_builder_end_table@@Base>
   12c68:	cmp	r0, #0
   12c6c:	beq	12d04 <main@@Base+0x76c>
   12c70:	mov	r1, r0
   12c74:	mov	r0, r4
   12c78:	bl	140f8 <flatcc_builder_offset_vector_push@@Base>
   12c7c:	add	r9, r9, #1
   12c80:	cmp	r9, #1000	; 0x3e8
   12c84:	bcc	12b98 <main@@Base+0x600>
   12c88:	mov	r0, r4
   12c8c:	bl	14780 <flatcc_builder_end_offset_vector@@Base>
   12c90:	cmp	r0, #0
   12c94:	beq	12d24 <main@@Base+0x78c>
   12c98:	mov	r5, r0
   12c9c:	mov	r0, r4
   12ca0:	mov	r1, #11
   12ca4:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   12ca8:	movw	r1, #30584	; 0x7778
   12cac:	cmp	r0, #0
   12cb0:	mov	r2, #1
   12cb4:	strne	r5, [r0]
   12cb8:	movt	r1, #1
   12cbc:	mov	r0, r4
   12cc0:	bl	152f4 <flatcc_builder_check_required@@Base>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12ce4 <main@@Base+0x74c>
   12ccc:	mov	r0, r4
   12cd0:	bl	15384 <flatcc_builder_end_table@@Base>
   12cd4:	mov	r1, r0
   12cd8:	mov	r0, r4
   12cdc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ce0:	b	13b68 <flatcc_builder_end_buffer@@Base>
   12ce4:	movw	r0, #29507	; 0x7343
   12ce8:	movw	r1, #29669	; 0x73e5
   12cec:	movw	r3, #29765	; 0x7445
   12cf0:	mov	r2, #235	; 0xeb
   12cf4:	movt	r0, #1
   12cf8:	movt	r1, #1
   12cfc:	movt	r3, #1
   12d00:	bl	1249c <__assert_fail@plt>
   12d04:	movw	r0, #29428	; 0x72f4
   12d08:	movw	r1, #29237	; 0x7235
   12d0c:	movw	r3, #29430	; 0x72f6
   12d10:	mov	r2, #42	; 0x2a
   12d14:	movt	r0, #1
   12d18:	movt	r1, #1
   12d1c:	movt	r3, #1
   12d20:	bl	1249c <__assert_fail@plt>
   12d24:	movw	r0, #29376	; 0x72c0
   12d28:	movw	r1, #29237	; 0x7235
   12d2c:	movw	r3, #29379	; 0x72c3
   12d30:	mov	r2, #56	; 0x38
   12d34:	movt	r0, #1
   12d38:	movt	r1, #1
   12d3c:	movt	r3, #1
   12d40:	bl	1249c <__assert_fail@plt>
   12d44:	nop	{0}
   12d48:	push	{fp, lr}
   12d4c:	mov	fp, sp
   12d50:	sub	sp, sp, #8
   12d54:	mov	r0, sp
   12d58:	mov	r1, #0
   12d5c:	bl	12418 <gettimeofday@plt>
   12d60:	movw	r2, #37976	; 0x9458
   12d64:	movt	r2, #2
   12d68:	ldr	r0, [r2]
   12d6c:	cmp	r0, #0
   12d70:	beq	12d80 <main@@Base+0x7e8>
   12d74:	ldr	r1, [r2, #4]
   12d78:	ldr	r2, [sp]
   12d7c:	b	12d8c <main@@Base+0x7f4>
   12d80:	ldm	sp, {r0, r1}
   12d84:	strd	r0, [r2]
   12d88:	mov	r2, r0
   12d8c:	sub	r0, r2, r0
   12d90:	ldr	r2, [sp, #4]
   12d94:	vldr	d16, [pc, #36]	; 12dc0 <main@@Base+0x828>
   12d98:	vmov	s2, r0
   12d9c:	sub	r1, r2, r1
   12da0:	vmov	s0, r1
   12da4:	vcvt.f64.s32	d17, s0
   12da8:	vcvt.f64.s32	d18, s2
   12dac:	vdiv.f64	d16, d17, d16
   12db0:	vadd.f64	d0, d16, d18
   12db4:	mov	sp, fp
   12db8:	pop	{fp, pc}
   12dbc:	nop	{0}
   12dc0:	andeq	r0, r0, r0
   12dc4:	smlawbmi	lr, r0, r4, r8

00012dc8 <flatcc_builder_default_alloc@@Base>:
   12dc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12dcc:	add	fp, sp, #24
   12dd0:	mov	r4, r1
   12dd4:	cmp	r2, #0
   12dd8:	beq	12e20 <flatcc_builder_default_alloc@@Base+0x58>
   12ddc:	ldr	r0, [fp, #8]
   12de0:	mov	r8, r3
   12de4:	sub	r1, r0, #1
   12de8:	cmp	r1, #6
   12dec:	bhi	12e48 <flatcc_builder_default_alloc@@Base+0x80>
   12df0:	add	r3, pc, #4
   12df4:	mov	r0, #256	; 0x100
   12df8:	ldr	pc, [r3, r1, lsl #2]
   12dfc:	andeq	r2, r1, ip, asr lr
   12e00:	andeq	r2, r1, r8, asr #28
   12e04:	andeq	r2, r1, r8, asr #28
   12e08:	andeq	r2, r1, r8, lsl lr
   12e0c:	andeq	r2, r1, r0, asr lr
   12e10:	andeq	r2, r1, r8, asr #28
   12e14:	andeq	r2, r1, r8, asr lr
   12e18:	mov	r0, #288	; 0x120
   12e1c:	b	12e5c <flatcc_builder_default_alloc@@Base+0x94>
   12e20:	ldr	r0, [r4]
   12e24:	cmp	r0, #0
   12e28:	beq	12e40 <flatcc_builder_default_alloc@@Base+0x78>
   12e2c:	bl	123dc <free@plt>
   12e30:	mov	r6, #0
   12e34:	str	r6, [r4]
   12e38:	str	r6, [r4, #4]
   12e3c:	b	12eb8 <flatcc_builder_default_alloc@@Base+0xf0>
   12e40:	mov	r6, #0
   12e44:	b	12eb8 <flatcc_builder_default_alloc@@Base+0xf0>
   12e48:	mov	r0, #32
   12e4c:	b	12e5c <flatcc_builder_default_alloc@@Base+0x94>
   12e50:	mov	r0, r2
   12e54:	b	12e5c <flatcc_builder_default_alloc@@Base+0x94>
   12e58:	mov	r0, #64	; 0x40
   12e5c:	mov	r7, r0
   12e60:	lsl	r0, r0, #1
   12e64:	cmp	r7, r2
   12e68:	bcc	12e5c <flatcc_builder_default_alloc@@Base+0x94>
   12e6c:	ldr	r0, [r4, #4]
   12e70:	mov	r6, #0
   12e74:	cmp	r0, r2
   12e78:	lsrcs	r0, r0, #1
   12e7c:	cmpcs	r0, r7
   12e80:	bcs	12eb8 <flatcc_builder_default_alloc@@Base+0xf0>
   12e84:	ldr	r0, [r4]
   12e88:	mov	r1, r7
   12e8c:	bl	1240c <realloc@plt>
   12e90:	cmp	r0, #0
   12e94:	beq	12eb4 <flatcc_builder_default_alloc@@Base+0xec>
   12e98:	cmp	r8, #0
   12e9c:	mov	r5, r0
   12ea0:	ldrne	r1, [r4, #4]
   12ea4:	cmpne	r7, r1
   12ea8:	bhi	12ec0 <flatcc_builder_default_alloc@@Base+0xf8>
   12eac:	stm	r4, {r5, r7}
   12eb0:	b	12eb8 <flatcc_builder_default_alloc@@Base+0xf0>
   12eb4:	mvn	r6, #0
   12eb8:	mov	r0, r6
   12ebc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ec0:	add	r0, r5, r1
   12ec4:	sub	r2, r7, r1
   12ec8:	mov	r1, #0
   12ecc:	bl	1246c <memset@plt>
   12ed0:	b	12eac <flatcc_builder_default_alloc@@Base+0xe4>

00012ed4 <flatcc_builder_flush_vtable_cache@@Base>:
   12ed4:	push	{r4, r5, fp, lr}
   12ed8:	add	fp, sp, #8
   12edc:	mov	r4, r0
   12ee0:	ldr	r0, [r0, #116]	; 0x74
   12ee4:	cmp	r0, #0
   12ee8:	popeq	{r4, r5, fp, pc}
   12eec:	ldr	r0, [r4, #92]	; 0x5c
   12ef0:	ldr	r2, [r4, #96]	; 0x60
   12ef4:	mov	r1, #0
   12ef8:	mov	r5, #0
   12efc:	bl	1246c <memset@plt>
   12f00:	mov	r0, #16
   12f04:	str	r5, [r4, #120]	; 0x78
   12f08:	str	r0, [r4, #124]	; 0x7c
   12f0c:	pop	{r4, r5, fp, pc}

00012f10 <flatcc_builder_custom_init@@Base>:
   12f10:	push	{r4, r5, r6, r7, fp, lr}
   12f14:	add	fp, sp, #16
   12f18:	mov	r6, r2
   12f1c:	mov	r7, r1
   12f20:	mov	r1, #0
   12f24:	mov	r2, #232	; 0xe8
   12f28:	mov	r5, r3
   12f2c:	mov	r4, r0
   12f30:	bl	1246c <memset@plt>
   12f34:	ldr	r0, [fp, #8]
   12f38:	cmp	r7, #0
   12f3c:	bne	12f54 <flatcc_builder_custom_init@@Base+0x44>
   12f40:	movw	r7, #28040	; 0x6d88
   12f44:	mov	r1, #1
   12f48:	add	r6, r4, #188	; 0xbc
   12f4c:	movt	r7, #1
   12f50:	str	r1, [r4, #184]	; 0xb8
   12f54:	movw	r1, #11720	; 0x2dc8
   12f58:	cmp	r5, #0
   12f5c:	str	r6, [r4, #36]	; 0x24
   12f60:	str	r0, [r4, #40]	; 0x28
   12f64:	mov	r0, #0
   12f68:	str	r7, [r4, #44]	; 0x2c
   12f6c:	movt	r1, #1
   12f70:	movne	r1, r5
   12f74:	str	r1, [r4, #48]	; 0x30
   12f78:	pop	{r4, r5, r6, r7, fp, pc}

00012f7c <flatcc_builder_init@@Base>:
   12f7c:	push	{r4, r5, fp, lr}
   12f80:	add	fp, sp, #8
   12f84:	mov	r1, #0
   12f88:	mov	r2, #232	; 0xe8
   12f8c:	mov	r4, r0
   12f90:	mov	r5, #0
   12f94:	bl	1246c <memset@plt>
   12f98:	mov	r0, #1
   12f9c:	movw	r2, #28040	; 0x6d88
   12fa0:	add	r1, r4, #188	; 0xbc
   12fa4:	str	r0, [r4, #184]	; 0xb8
   12fa8:	movw	r0, #11720	; 0x2dc8
   12fac:	movt	r2, #1
   12fb0:	str	r1, [r4, #36]	; 0x24
   12fb4:	str	r5, [r4, #40]	; 0x28
   12fb8:	movt	r0, #1
   12fbc:	str	r2, [r4, #44]	; 0x2c
   12fc0:	str	r0, [r4, #48]	; 0x30
   12fc4:	mov	r0, #0
   12fc8:	pop	{r4, r5, fp, pc}

00012fcc <flatcc_builder_custom_reset@@Base>:
   12fcc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12fd0:	add	fp, sp, #24
   12fd4:	sub	sp, sp, #8
   12fd8:	mov	r9, r2
   12fdc:	mov	r8, r1
   12fe0:	mov	r4, r0
   12fe4:	add	r7, r0, #52	; 0x34
   12fe8:	mov	r5, #0
   12fec:	ldr	r0, [r7]
   12ff0:	cmp	r0, #0
   12ff4:	beq	1303c <flatcc_builder_custom_reset@@Base+0x70>
   12ff8:	cmp	r9, #0
   12ffc:	cmpne	r5, #5
   13000:	beq	1302c <flatcc_builder_custom_reset@@Base+0x60>
   13004:	ldr	r0, [r4, #40]	; 0x28
   13008:	ldr	r6, [r4, #48]	; 0x30
   1300c:	mov	r1, r7
   13010:	mov	r2, #1
   13014:	mov	r3, #1
   13018:	str	r5, [sp]
   1301c:	blx	r6
   13020:	cmp	r0, #0
   13024:	bne	130dc <flatcc_builder_custom_reset@@Base+0x110>
   13028:	ldr	r0, [r7]
   1302c:	ldr	r2, [r7, #4]
   13030:	mov	r1, #0
   13034:	bl	1246c <memset@plt>
   13038:	b	13048 <flatcc_builder_custom_reset@@Base+0x7c>
   1303c:	ldr	r0, [r7, #4]
   13040:	cmp	r0, #0
   13044:	bne	130ec <flatcc_builder_custom_reset@@Base+0x120>
   13048:	add	r5, r5, #1
   1304c:	add	r7, r7, #8
   13050:	cmp	r5, #8
   13054:	bcc	12fec <flatcc_builder_custom_reset@@Base+0x20>
   13058:	mov	r0, #0
   1305c:	vmov.i32	q8, #0	; 0x00000000
   13060:	mov	r5, #0
   13064:	str	r0, [r4, #120]	; 0x78
   13068:	ldr	r1, [r4, #124]	; 0x7c
   1306c:	cmp	r1, #0
   13070:	movne	r1, #16
   13074:	strne	r1, [r4, #124]	; 0x7c
   13078:	add	r1, r4, #148	; 0x94
   1307c:	strh	r0, [r4, #128]	; 0x80
   13080:	str	r0, [r4, #136]	; 0x88
   13084:	str	r0, [r4, #140]	; 0x8c
   13088:	str	r0, [r4, #32]
   1308c:	cmp	r8, #0
   13090:	vst1.32	{d16-d17}, [r1]
   13094:	ldr	r2, [r4, #60]	; 0x3c
   13098:	ldr	r1, [r4, #52]	; 0x34
   1309c:	ldr	r3, [r4, #76]	; 0x4c
   130a0:	str	r2, [r4, #16]
   130a4:	str	r0, [r4, #20]
   130a8:	str	r0, [r4, #24]
   130ac:	movne	r0, #0
   130b0:	str	r3, [r4]
   130b4:	str	r1, [r4, #4]
   130b8:	strne	r0, [r4, #172]	; 0xac
   130bc:	strne	r0, [r4, #176]	; 0xb0
   130c0:	strne	r0, [r4, #180]	; 0xb4
   130c4:	ldr	r0, [r4, #184]	; 0xb8
   130c8:	cmp	r0, #0
   130cc:	beq	130e0 <flatcc_builder_custom_reset@@Base+0x114>
   130d0:	add	r0, r4, #188	; 0xbc
   130d4:	bl	16c58 <flatcc_emitter_reset@@Base>
   130d8:	b	130e0 <flatcc_builder_custom_reset@@Base+0x114>
   130dc:	mvn	r5, #0
   130e0:	mov	r0, r5
   130e4:	sub	sp, fp, #24
   130e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   130ec:	movw	r0, #31168	; 0x79c0
   130f0:	movw	r1, #31186	; 0x79d2
   130f4:	movw	r3, #31256	; 0x7a18
   130f8:	movw	r2, #434	; 0x1b2
   130fc:	movt	r0, #1
   13100:	movt	r1, #1
   13104:	movt	r3, #1
   13108:	bl	1249c <__assert_fail@plt>

0001310c <flatcc_builder_reset@@Base>:
   1310c:	mov	r1, #0
   13110:	mov	r2, #0
   13114:	b	12fcc <flatcc_builder_custom_reset@@Base>

00013118 <flatcc_builder_clear@@Base>:
   13118:	push	{r4, r5, r6, r7, fp, lr}
   1311c:	add	fp, sp, #16
   13120:	sub	sp, sp, #8
   13124:	mov	r7, r0
   13128:	add	r5, r0, #52	; 0x34
   1312c:	mov	r6, #0
   13130:	ldr	r0, [r7, #40]	; 0x28
   13134:	ldr	r4, [r7, #48]	; 0x30
   13138:	mov	r1, r5
   1313c:	mov	r2, #0
   13140:	mov	r3, #0
   13144:	str	r6, [sp]
   13148:	blx	r4
   1314c:	add	r6, r6, #1
   13150:	add	r5, r5, #8
   13154:	cmp	r6, #8
   13158:	bne	13130 <flatcc_builder_clear@@Base+0x18>
   1315c:	ldr	r0, [r7, #184]	; 0xb8
   13160:	cmp	r0, #0
   13164:	beq	13170 <flatcc_builder_clear@@Base+0x58>
   13168:	add	r0, r7, #188	; 0xbc
   1316c:	bl	16d24 <flatcc_emitter_clear@@Base>
   13170:	mov	r0, r7
   13174:	mov	r1, #0
   13178:	mov	r2, #232	; 0xe8
   1317c:	sub	sp, fp, #16
   13180:	pop	{r4, r5, r6, r7, fp, lr}
   13184:	b	1246c <memset@plt>

00013188 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13188:	push	{r4, r5, r6, r7, fp, lr}
   1318c:	add	fp, sp, #16
   13190:	sub	sp, sp, #8
   13194:	mov	r4, r0
   13198:	ldr	r0, [r0, #112]	; 0x70
   1319c:	add	r1, r1, #7
   131a0:	ldr	r7, [r4, #228]	; 0xe4
   131a4:	bic	r5, r1, #3
   131a8:	add	r6, r4, #108	; 0x6c
   131ac:	add	r2, r7, r5
   131b0:	cmp	r2, r0
   131b4:	bls	131dc <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   131b8:	ldr	r0, [r4, #40]	; 0x28
   131bc:	ldr	ip, [r4, #48]	; 0x30
   131c0:	mov	r1, #7
   131c4:	mov	r3, #0
   131c8:	str	r1, [sp]
   131cc:	mov	r1, r6
   131d0:	blx	ip
   131d4:	cmp	r0, #0
   131d8:	bne	13228 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   131dc:	ldr	r0, [r6]
   131e0:	adds	r6, r0, r7
   131e4:	beq	13218 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   131e8:	mov	r0, r6
   131ec:	mov	r1, #0
   131f0:	mov	r2, r5
   131f4:	bl	1246c <memset@plt>
   131f8:	ldr	r0, [r4, #224]	; 0xe0
   131fc:	str	r0, [r6], #4
   13200:	ldr	r0, [r4, #228]	; 0xe4
   13204:	add	r1, r0, #4
   13208:	add	r0, r0, r5
   1320c:	str	r1, [r4, #224]	; 0xe0
   13210:	str	r0, [r4, #228]	; 0xe4
   13214:	b	1321c <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13218:	mov	r6, #0
   1321c:	mov	r0, r6
   13220:	sub	sp, fp, #16
   13224:	pop	{r4, r5, r6, r7, fp, pc}
   13228:	movw	r0, #35704	; 0x8b78
   1322c:	movw	r1, #31186	; 0x79d2
   13230:	movw	r3, #35250	; 0x89b2
   13234:	mov	r2, #308	; 0x134
   13238:	movt	r0, #1
   1323c:	movt	r1, #1
   13240:	movt	r3, #1
   13244:	bl	1249c <__assert_fail@plt>

00013248 <flatcc_builder_enter_user_frame@@Base>:
   13248:	push	{r4, r5, r6, r7, fp, lr}
   1324c:	add	fp, sp, #16
   13250:	sub	sp, sp, #8
   13254:	mov	r4, r0
   13258:	ldr	r0, [r0, #112]	; 0x70
   1325c:	add	r1, r1, #7
   13260:	ldr	r7, [r4, #228]	; 0xe4
   13264:	bic	r5, r1, #3
   13268:	add	r6, r4, #108	; 0x6c
   1326c:	add	r2, r7, r5
   13270:	cmp	r2, r0
   13274:	bls	1329c <flatcc_builder_enter_user_frame@@Base+0x54>
   13278:	ldr	r0, [r4, #40]	; 0x28
   1327c:	ldr	ip, [r4, #48]	; 0x30
   13280:	mov	r1, #7
   13284:	mov	r3, #0
   13288:	str	r1, [sp]
   1328c:	mov	r1, r6
   13290:	blx	ip
   13294:	cmp	r0, #0
   13298:	bne	132e4 <flatcc_builder_enter_user_frame@@Base+0x9c>
   1329c:	ldr	r0, [r6]
   132a0:	adds	r6, r0, r7
   132a4:	beq	132d8 <flatcc_builder_enter_user_frame@@Base+0x90>
   132a8:	mov	r0, r6
   132ac:	mov	r1, #0
   132b0:	mov	r2, r5
   132b4:	bl	1246c <memset@plt>
   132b8:	ldr	r0, [r4, #224]	; 0xe0
   132bc:	str	r0, [r6]
   132c0:	ldr	r1, [r4, #228]	; 0xe4
   132c4:	add	r0, r1, #4
   132c8:	add	r1, r1, r5
   132cc:	str	r0, [r4, #224]	; 0xe0
   132d0:	str	r1, [r4, #228]	; 0xe4
   132d4:	b	132dc <flatcc_builder_enter_user_frame@@Base+0x94>
   132d8:	mov	r0, #0
   132dc:	sub	sp, fp, #16
   132e0:	pop	{r4, r5, r6, r7, fp, pc}
   132e4:	movw	r0, #35704	; 0x8b78
   132e8:	movw	r1, #31186	; 0x79d2
   132ec:	movw	r3, #35250	; 0x89b2
   132f0:	mov	r2, #308	; 0x134
   132f4:	movt	r0, #1
   132f8:	movt	r1, #1
   132fc:	movt	r3, #1
   13300:	bl	1249c <__assert_fail@plt>

00013304 <flatcc_builder_exit_user_frame@@Base>:
   13304:	ldr	r1, [r0, #224]	; 0xe0
   13308:	cmp	r1, #0
   1330c:	subne	r2, r1, #4
   13310:	strne	r2, [r0, #228]	; 0xe4
   13314:	ldrne	r2, [r0, #108]	; 0x6c
   13318:	addne	r1, r2, r1
   1331c:	ldrne	r1, [r1, #-4]
   13320:	strne	r1, [r0, #224]	; 0xe0
   13324:	movne	r0, r1
   13328:	bxne	lr
   1332c:	push	{fp, lr}
   13330:	mov	fp, sp
   13334:	movw	r0, #31318	; 0x7a56
   13338:	movw	r1, #31186	; 0x79d2
   1333c:	movw	r3, #31343	; 0x7a6f
   13340:	movw	r2, #542	; 0x21e
   13344:	movt	r0, #1
   13348:	movt	r1, #1
   1334c:	movt	r3, #1
   13350:	bl	1249c <__assert_fail@plt>

00013354 <flatcc_builder_exit_user_frame_at@@Base>:
   13354:	ldr	r2, [r0, #224]	; 0xe0
   13358:	cmp	r2, r1
   1335c:	bcc	13368 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13360:	str	r1, [r0, #224]	; 0xe0
   13364:	b	13304 <flatcc_builder_exit_user_frame@@Base>
   13368:	push	{fp, lr}
   1336c:	mov	fp, sp
   13370:	movw	r0, #31401	; 0x7aa9
   13374:	movw	r1, #31186	; 0x79d2
   13378:	movw	r3, #31432	; 0x7ac8
   1337c:	movw	r2, #551	; 0x227
   13380:	movt	r0, #1
   13384:	movt	r1, #1
   13388:	movt	r3, #1
   1338c:	bl	1249c <__assert_fail@plt>

00013390 <flatcc_builder_get_current_user_frame@@Base>:
   13390:	ldr	r0, [r0, #224]	; 0xe0
   13394:	bx	lr

00013398 <flatcc_builder_get_user_frame_ptr@@Base>:
   13398:	ldr	r0, [r0, #108]	; 0x6c
   1339c:	add	r0, r0, r1
   133a0:	bx	lr

000133a4 <flatcc_builder_embed_buffer@@Base>:
   133a4:	push	{r4, r5, r6, r7, fp, lr}
   133a8:	add	fp, sp, #16
   133ac:	sub	sp, sp, #88	; 0x58
   133b0:	mov	r4, r0
   133b4:	ldr	r0, [fp, #8]
   133b8:	mov	r5, r3
   133bc:	mov	r7, r2
   133c0:	mov	r2, r1
   133c4:	sub	r1, fp, #18
   133c8:	strh	r0, [fp, #-18]	; 0xffffffee
   133cc:	mov	r0, r4
   133d0:	ldr	r3, [r4, #152]	; 0x98
   133d4:	cmp	r3, #0
   133d8:	movwne	r3, #1
   133dc:	bl	13514 <flatcc_builder_embed_buffer@@Base+0x170>
   133e0:	ldr	r1, [fp, #12]
   133e4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   133e8:	ldr	r0, [r4, #136]	; 0x88
   133ec:	mov	r2, #0
   133f0:	str	r2, [sp, #8]
   133f4:	str	r2, [sp, #12]
   133f8:	and	r1, r1, #2
   133fc:	sub	r3, r3, #1
   13400:	add	r1, r5, r1, lsl #1
   13404:	sub	r1, r0, r1
   13408:	and	r3, r1, r3
   1340c:	add	r1, r3, r5
   13410:	str	r1, [fp, #-24]	; 0xffffffe8
   13414:	ldr	r1, [r4, #152]	; 0x98
   13418:	cmp	r1, #0
   1341c:	mov	r1, #0
   13420:	beq	13440 <flatcc_builder_embed_buffer@@Base+0x9c>
   13424:	sub	r1, fp, #24
   13428:	mov	r2, #1
   1342c:	str	r1, [sp, #16]
   13430:	mov	r1, #4
   13434:	str	r1, [sp, #8]
   13438:	str	r1, [sp, #20]
   1343c:	str	r2, [sp, #12]
   13440:	cmp	r5, #0
   13444:	beq	13468 <flatcc_builder_embed_buffer@@Base+0xc4>
   13448:	add	r6, sp, #8
   1344c:	add	r1, r1, r5
   13450:	add	r6, r6, r2, lsl #3
   13454:	add	r2, r2, #1
   13458:	str	r1, [sp, #8]
   1345c:	str	r7, [r6, #8]
   13460:	str	r5, [r6, #12]
   13464:	str	r2, [sp, #12]
   13468:	cmp	r3, #0
   1346c:	beq	13498 <flatcc_builder_embed_buffer@@Base+0xf4>
   13470:	add	r7, sp, #8
   13474:	movw	r6, #30656	; 0x77c0
   13478:	add	r1, r1, r3
   1347c:	add	r7, r7, r2, lsl #3
   13480:	add	r2, r2, #1
   13484:	movt	r6, #1
   13488:	str	r1, [sp, #8]
   1348c:	str	r6, [r7, #8]
   13490:	str	r3, [r7, #12]
   13494:	str	r2, [sp, #12]
   13498:	cmp	r1, #0
   1349c:	ble	134f4 <flatcc_builder_embed_buffer@@Base+0x150>
   134a0:	sub	r5, r0, r1
   134a4:	ldr	r0, [r4, #36]	; 0x24
   134a8:	ldr	r7, [r4, #44]	; 0x2c
   134ac:	str	r1, [sp]
   134b0:	add	r1, sp, #8
   134b4:	add	r1, r1, #8
   134b8:	mov	r3, r5
   134bc:	blx	r7
   134c0:	cmp	r0, #0
   134c4:	streq	r5, [r4, #136]	; 0x88
   134c8:	moveq	r0, r5
   134cc:	subeq	sp, fp, #16
   134d0:	popeq	{r4, r5, r6, r7, fp, pc}
   134d4:	movw	r0, #35704	; 0x8b78
   134d8:	movw	r1, #31186	; 0x79d2
   134dc:	movw	r3, #35383	; 0x8a37
   134e0:	movw	r2, #651	; 0x28b
   134e4:	movt	r0, #1
   134e8:	movt	r1, #1
   134ec:	movt	r3, #1
   134f0:	bl	1249c <__assert_fail@plt>
   134f4:	movw	r0, #35704	; 0x8b78
   134f8:	movw	r1, #31186	; 0x79d2
   134fc:	movw	r3, #35383	; 0x8a37
   13500:	movw	r2, #647	; 0x287
   13504:	movt	r0, #1
   13508:	movt	r1, #1
   1350c:	movt	r3, #1
   13510:	bl	1249c <__assert_fail@plt>
   13514:	push	{r4, sl, fp, lr}
   13518:	add	fp, sp, #8
   1351c:	sub	sp, sp, #80	; 0x50
   13520:	cmp	r2, #0
   13524:	bne	13534 <flatcc_builder_embed_buffer@@Base+0x190>
   13528:	ldrh	r2, [r0, #132]	; 0x84
   1352c:	cmp	r2, #0
   13530:	movweq	r2, #1
   13534:	ldrh	r4, [r1]
   13538:	cmp	r4, #4
   1353c:	movwcc	r4, #4
   13540:	cmpcs	r4, r2
   13544:	bcs	13554 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13548:	cmp	r4, r2
   1354c:	movcc	r4, r2
   13550:	strh	r4, [r1]
   13554:	cmp	r3, #0
   13558:	bne	135cc <flatcc_builder_embed_buffer@@Base+0x228>
   1355c:	ldr	r4, [r0, #140]	; 0x8c
   13560:	sub	r1, r2, #1
   13564:	ands	r1, r4, r1
   13568:	beq	135cc <flatcc_builder_embed_buffer@@Base+0x228>
   1356c:	movw	r2, #30656	; 0x77c0
   13570:	cmn	r1, #1
   13574:	movt	r2, #1
   13578:	str	r2, [sp, #16]
   1357c:	mov	r2, #1
   13580:	str	r1, [sp, #8]
   13584:	str	r1, [sp, #20]
   13588:	str	r2, [sp, #12]
   1358c:	add	r2, r1, r4
   13590:	str	r2, [r0, #140]	; 0x8c
   13594:	ble	135d4 <flatcc_builder_embed_buffer@@Base+0x230>
   13598:	ldr	r2, [r0, #36]	; 0x24
   1359c:	ldr	ip, [r0, #44]	; 0x2c
   135a0:	add	r0, sp, #8
   135a4:	str	r1, [sp]
   135a8:	mov	r3, r4
   135ac:	add	r1, r0, #8
   135b0:	mov	r0, r2
   135b4:	mov	r2, #1
   135b8:	blx	ip
   135bc:	cmp	r0, #0
   135c0:	bne	135f4 <flatcc_builder_embed_buffer@@Base+0x250>
   135c4:	cmn	r4, #1
   135c8:	beq	13614 <flatcc_builder_embed_buffer@@Base+0x270>
   135cc:	sub	sp, fp, #8
   135d0:	pop	{r4, sl, fp, pc}
   135d4:	movw	r0, #35704	; 0x8b78
   135d8:	movw	r1, #31186	; 0x79d2
   135dc:	movw	r3, #35571	; 0x8af3
   135e0:	movw	r2, #673	; 0x2a1
   135e4:	movt	r0, #1
   135e8:	movt	r1, #1
   135ec:	movt	r3, #1
   135f0:	bl	1249c <__assert_fail@plt>
   135f4:	movw	r0, #35704	; 0x8b78
   135f8:	movw	r1, #31186	; 0x79d2
   135fc:	movw	r3, #35571	; 0x8af3
   13600:	movw	r2, #677	; 0x2a5
   13604:	movt	r0, #1
   13608:	movt	r1, #1
   1360c:	movt	r3, #1
   13610:	bl	1249c <__assert_fail@plt>
   13614:	movw	r0, #35704	; 0x8b78
   13618:	movw	r1, #31186	; 0x79d2
   1361c:	movw	r3, #35317	; 0x89f5
   13620:	movw	r2, #702	; 0x2be
   13624:	movt	r0, #1
   13628:	movt	r1, #1
   1362c:	movt	r3, #1
   13630:	bl	1249c <__assert_fail@plt>

00013634 <flatcc_builder_create_buffer@@Base>:
   13634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13638:	add	fp, sp, #28
   1363c:	sub	sp, sp, #100	; 0x64
   13640:	ldr	r8, [fp, #12]
   13644:	mov	r4, r0
   13648:	ldr	r0, [fp, #8]
   1364c:	mov	r7, r1
   13650:	mov	r5, #0
   13654:	mov	r9, r3
   13658:	sub	r1, fp, #30
   1365c:	str	r5, [sp, #12]
   13660:	and	r6, r8, #1
   13664:	strh	r0, [fp, #-30]	; 0xffffffe2
   13668:	mov	r0, r4
   1366c:	mov	r3, r6
   13670:	bl	13514 <flatcc_builder_embed_buffer@@Base+0x170>
   13674:	ldrh	r0, [r4, #128]	; 0x80
   13678:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1367c:	cmp	r0, r1
   13680:	strhcc	r1, [r4, #128]	; 0x80
   13684:	cmp	r7, #0
   13688:	stmib	sp, {r6, r9}
   1368c:	beq	136a8 <flatcc_builder_create_buffer@@Base+0x74>
   13690:	ldr	r5, [r7]
   13694:	cmp	r5, #0
   13698:	str	r5, [sp, #12]
   1369c:	movwne	r5, #1
   136a0:	lsl	r7, r5, #2
   136a4:	b	136ac <flatcc_builder_create_buffer@@Base+0x78>
   136a8:	mov	r7, #0
   136ac:	ldr	r9, [r4, #136]	; 0x88
   136b0:	mov	sl, #4
   136b4:	mvn	r6, #3
   136b8:	mov	r3, #0
   136bc:	ands	ip, r8, #3
   136c0:	and	r2, sl, r8, lsl #1
   136c4:	str	r3, [sp, #20]
   136c8:	str	r3, [sp, #16]
   136cc:	sub	r2, r6, r2
   136d0:	sub	r6, r1, #1
   136d4:	mov	r1, #4
   136d8:	add	r2, r2, r9
   136dc:	sub	r2, r2, r7
   136e0:	beq	13704 <flatcc_builder_create_buffer@@Base+0xd0>
   136e4:	sub	r1, fp, #40	; 0x28
   136e8:	mov	r3, #1
   136ec:	str	r1, [sp, #24]
   136f0:	mov	r1, #4
   136f4:	str	r1, [sp, #16]
   136f8:	str	r1, [sp, #28]
   136fc:	mov	r1, #8
   13700:	str	r3, [sp, #20]
   13704:	add	lr, sp, #16
   13708:	and	r6, r2, r6
   1370c:	sub	r0, fp, #36	; 0x24
   13710:	str	r1, [sp, #16]
   13714:	cmp	r5, #0
   13718:	add	r2, lr, r3, lsl #3
   1371c:	str	r0, [r2, #8]
   13720:	str	sl, [r2, #12]
   13724:	add	r2, r3, #1
   13728:	str	r2, [sp, #20]
   1372c:	beq	13750 <flatcc_builder_create_buffer@@Base+0x11c>
   13730:	add	r1, r1, r7
   13734:	add	r0, lr, r2, lsl #3
   13738:	add	r2, sp, #12
   1373c:	str	r1, [sp, #16]
   13740:	str	r2, [r0, #8]
   13744:	orr	r2, r3, #2
   13748:	str	r7, [r0, #12]
   1374c:	str	r2, [sp, #20]
   13750:	cmp	r6, #0
   13754:	beq	1377c <flatcc_builder_create_buffer@@Base+0x148>
   13758:	movw	r3, #30656	; 0x77c0
   1375c:	add	r1, r1, r6
   13760:	add	r0, lr, r2, lsl #3
   13764:	add	r2, r2, #1
   13768:	movt	r3, #1
   1376c:	str	r1, [sp, #16]
   13770:	str	r3, [r0, #8]
   13774:	str	r6, [r0, #12]
   13778:	str	r2, [sp, #20]
   1377c:	ldr	r5, [sp, #4]
   13780:	sub	r7, r9, r1
   13784:	cmp	ip, #0
   13788:	mov	r6, #144	; 0x90
   1378c:	ldr	r3, [sp, #8]
   13790:	mov	r0, r7
   13794:	addne	r0, r0, #4
   13798:	cmp	r5, #0
   1379c:	sub	r3, r3, r0
   137a0:	movweq	r6, #140	; 0x8c
   137a4:	cmp	r1, #0
   137a8:	ldr	r6, [r4, r6]
   137ac:	str	r3, [fp, #-36]	; 0xffffffdc
   137b0:	sub	r0, r6, r0
   137b4:	str	r0, [fp, #-40]	; 0xffffffd8
   137b8:	ble	13810 <flatcc_builder_create_buffer@@Base+0x1dc>
   137bc:	ldr	r0, [r4, #36]	; 0x24
   137c0:	ldr	r6, [r4, #44]	; 0x2c
   137c4:	str	r1, [sp]
   137c8:	add	r1, lr, #8
   137cc:	mov	r3, r7
   137d0:	blx	r6
   137d4:	cmp	r0, #0
   137d8:	bne	13830 <flatcc_builder_create_buffer@@Base+0x1fc>
   137dc:	cmp	r7, #0
   137e0:	str	r7, [r4, #136]	; 0x88
   137e4:	movne	r0, r7
   137e8:	subne	sp, fp, #28
   137ec:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137f0:	movw	r0, #35704	; 0x8b78
   137f4:	movw	r1, #31186	; 0x79d2
   137f8:	movw	r3, #31501	; 0x7b0d
   137fc:	mov	r2, #772	; 0x304
   13800:	movt	r0, #1
   13804:	movt	r1, #1
   13808:	movt	r3, #1
   1380c:	bl	1249c <__assert_fail@plt>
   13810:	movw	r0, #35704	; 0x8b78
   13814:	movw	r1, #31186	; 0x79d2
   13818:	movw	r3, #35383	; 0x8a37
   1381c:	movw	r2, #647	; 0x287
   13820:	movt	r0, #1
   13824:	movt	r1, #1
   13828:	movt	r3, #1
   1382c:	bl	1249c <__assert_fail@plt>
   13830:	movw	r0, #35704	; 0x8b78
   13834:	movw	r1, #31186	; 0x79d2
   13838:	movw	r3, #35383	; 0x8a37
   1383c:	movw	r2, #651	; 0x28b
   13840:	movt	r0, #1
   13844:	movt	r1, #1
   13848:	movt	r3, #1
   1384c:	bl	1249c <__assert_fail@plt>

00013850 <flatcc_builder_create_struct@@Base>:
   13850:	push	{r4, r5, r6, sl, fp, lr}
   13854:	add	fp, sp, #16
   13858:	sub	sp, sp, #80	; 0x50
   1385c:	cmp	r3, #0
   13860:	beq	13938 <flatcc_builder_create_struct@@Base+0xe8>
   13864:	mov	r5, r0
   13868:	ldrh	r0, [r0, #128]	; 0x80
   1386c:	mov	r4, #0
   13870:	cmp	r0, r3
   13874:	strhcc	r3, [r5, #128]	; 0x80
   13878:	sub	r3, r3, #1
   1387c:	cmp	r2, #0
   13880:	ldr	r0, [r5, #136]	; 0x88
   13884:	str	r4, [sp, #12]
   13888:	str	r4, [sp, #8]
   1388c:	movne	r4, #1
   13890:	strne	r1, [sp, #16]
   13894:	strne	r2, [sp, #8]
   13898:	strne	r2, [sp, #20]
   1389c:	strne	r4, [sp, #12]
   138a0:	sub	r6, r0, r2
   138a4:	and	r3, r6, r3
   138a8:	cmp	r3, #0
   138ac:	beq	138d8 <flatcc_builder_create_struct@@Base+0x88>
   138b0:	add	r1, sp, #8
   138b4:	movw	r6, #30656	; 0x77c0
   138b8:	add	r2, r3, r2
   138bc:	add	r1, r1, r4, lsl #3
   138c0:	add	r4, r4, #1
   138c4:	movt	r6, #1
   138c8:	str	r2, [sp, #8]
   138cc:	str	r6, [r1, #8]
   138d0:	str	r3, [r1, #12]
   138d4:	str	r4, [sp, #12]
   138d8:	cmp	r2, #0
   138dc:	ble	13958 <flatcc_builder_create_struct@@Base+0x108>
   138e0:	sub	r6, r0, r2
   138e4:	ldr	r0, [r5, #36]	; 0x24
   138e8:	ldr	ip, [r5, #44]	; 0x2c
   138ec:	add	r1, sp, #8
   138f0:	str	r2, [sp]
   138f4:	mov	r2, r4
   138f8:	add	r1, r1, #8
   138fc:	mov	r3, r6
   13900:	blx	ip
   13904:	cmp	r0, #0
   13908:	streq	r6, [r5, #136]	; 0x88
   1390c:	moveq	r0, r6
   13910:	subeq	sp, fp, #16
   13914:	popeq	{r4, r5, r6, sl, fp, pc}
   13918:	movw	r0, #35704	; 0x8b78
   1391c:	movw	r1, #31186	; 0x79d2
   13920:	movw	r3, #35383	; 0x8a37
   13924:	movw	r2, #651	; 0x28b
   13928:	movt	r0, #1
   1392c:	movt	r1, #1
   13930:	movt	r3, #1
   13934:	bl	1249c <__assert_fail@plt>
   13938:	movw	r0, #31632	; 0x7b90
   1393c:	movw	r1, #31186	; 0x79d2
   13940:	movw	r3, #31643	; 0x7b9b
   13944:	movw	r2, #783	; 0x30f
   13948:	movt	r0, #1
   1394c:	movt	r1, #1
   13950:	movt	r3, #1
   13954:	bl	1249c <__assert_fail@plt>
   13958:	movw	r0, #35704	; 0x8b78
   1395c:	movw	r1, #31186	; 0x79d2
   13960:	movw	r3, #35383	; 0x8a37
   13964:	movw	r2, #647	; 0x287
   13968:	movt	r0, #1
   1396c:	movt	r1, #1
   13970:	movt	r3, #1
   13974:	bl	1249c <__assert_fail@plt>

00013978 <flatcc_builder_start_buffer@@Base>:
   13978:	push	{r4, r5, r6, r7, fp, lr}
   1397c:	add	fp, sp, #16
   13980:	mov	r5, r1
   13984:	ldrh	r1, [r0, #128]	; 0x80
   13988:	mov	r6, r3
   1398c:	mov	r7, r2
   13990:	mov	r4, r0
   13994:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   13998:	mov	r1, r0
   1399c:	mvn	r0, #0
   139a0:	cmp	r1, #0
   139a4:	popne	{r4, r5, r6, r7, fp, pc}
   139a8:	mov	r0, #1
   139ac:	cmp	r5, #0
   139b0:	strh	r0, [r4, #128]	; 0x80
   139b4:	ldrh	r1, [r4, #132]	; 0x84
   139b8:	ldr	r2, [r4, #32]
   139bc:	strh	r1, [r2, #34]	; 0x22
   139c0:	strh	r7, [r4, #132]	; 0x84
   139c4:	ldrh	r1, [r4, #164]	; 0xa4
   139c8:	ldr	r2, [r4, #32]
   139cc:	strh	r1, [r2, #32]
   139d0:	strh	r6, [r4, #164]	; 0xa4
   139d4:	ldr	r1, [r4, #32]
   139d8:	ldr	r2, [r4, #144]	; 0x90
   139dc:	str	r2, [r1, #20]
   139e0:	ldr	r1, [r4, #32]
   139e4:	ldr	r2, [r4, #152]	; 0x98
   139e8:	str	r2, [r1, #28]
   139ec:	ldr	r3, [r4, #148]	; 0x94
   139f0:	ldr	r1, [r4, #32]
   139f4:	ldr	r2, [r4, #136]	; 0x88
   139f8:	ldr	r7, [r4, #168]	; 0xa8
   139fc:	add	r6, r3, #1
   13a00:	str	r2, [r4, #144]	; 0x90
   13a04:	str	r6, [r4, #148]	; 0x94
   13a08:	str	r3, [r4, #152]	; 0x98
   13a0c:	str	r7, [r1, #16]
   13a10:	movw	r1, #30656	; 0x77c0
   13a14:	movt	r1, #1
   13a18:	movne	r1, r5
   13a1c:	ldr	r1, [r1]
   13a20:	str	r1, [r4, #168]	; 0xa8
   13a24:	ldr	r1, [r4, #32]
   13a28:	strh	r0, [r1, #14]
   13a2c:	mov	r0, #0
   13a30:	pop	{r4, r5, r6, r7, fp, pc}
   13a34:	push	{r4, r5, r6, r7, fp, lr}
   13a38:	add	fp, sp, #16
   13a3c:	sub	sp, sp, #8
   13a40:	mov	r5, r1
   13a44:	ldr	r1, [r0, #156]	; 0x9c
   13a48:	ldr	r2, [r0, #160]	; 0xa0
   13a4c:	mov	r4, r0
   13a50:	add	r0, r1, #1
   13a54:	cmp	r1, r2
   13a58:	str	r0, [r4, #156]	; 0x9c
   13a5c:	bge	13a70 <flatcc_builder_start_buffer@@Base+0xf8>
   13a60:	ldr	r0, [r4, #32]
   13a64:	add	r0, r0, #36	; 0x24
   13a68:	str	r0, [r4, #32]
   13a6c:	b	13b04 <flatcc_builder_start_buffer@@Base+0x18c>
   13a70:	ldr	r2, [r4, #176]	; 0xb0
   13a74:	mvn	r6, #0
   13a78:	cmp	r2, #1
   13a7c:	cmpge	r1, r2
   13a80:	bge	13b3c <flatcc_builder_start_buffer@@Base+0x1c4>
   13a84:	add	r7, r0, r0, lsl #3
   13a88:	ldr	r0, [r4, #88]	; 0x58
   13a8c:	lsl	r2, r7, #2
   13a90:	cmp	r2, r0
   13a94:	bls	13abc <flatcc_builder_start_buffer@@Base+0x144>
   13a98:	ldr	r0, [r4, #40]	; 0x28
   13a9c:	ldr	ip, [r4, #48]	; 0x30
   13aa0:	mov	r3, #4
   13aa4:	add	r1, r4, #84	; 0x54
   13aa8:	str	r3, [sp]
   13aac:	mov	r3, #0
   13ab0:	blx	ip
   13ab4:	cmp	r0, #0
   13ab8:	bne	13b48 <flatcc_builder_start_buffer@@Base+0x1d0>
   13abc:	ldr	r1, [r4, #84]	; 0x54
   13ac0:	mvn	r0, #35	; 0x23
   13ac4:	add	r0, r0, r7, lsl #2
   13ac8:	adds	r0, r0, r1
   13acc:	str	r0, [r4, #32]
   13ad0:	beq	13b3c <flatcc_builder_start_buffer@@Base+0x1c4>
   13ad4:	ldr	r1, [r4, #88]	; 0x58
   13ad8:	movw	r3, #36409	; 0x8e39
   13adc:	ldr	r2, [r4, #176]	; 0xb0
   13ae0:	movt	r3, #14563	; 0x38e3
   13ae4:	umull	r1, r3, r1, r3
   13ae8:	lsr	r1, r3, #3
   13aec:	cmp	r2, r3, lsr #3
   13af0:	mov	r3, r1
   13af4:	movlt	r3, r2
   13af8:	cmp	r2, #0
   13afc:	movle	r3, r1
   13b00:	str	r3, [r4, #160]	; 0xa0
   13b04:	ldr	r1, [r4, #20]
   13b08:	mvn	r3, #3
   13b0c:	mov	r6, #0
   13b10:	str	r1, [r0, #8]
   13b14:	ldrh	r2, [r4, #130]	; 0x82
   13b18:	strh	r2, [r0, #12]
   13b1c:	strh	r5, [r4, #130]	; 0x82
   13b20:	ldr	r2, [r4, #28]
   13b24:	stm	r0, {r2, r3}
   13b28:	add	r0, r1, r2
   13b2c:	str	r6, [r4, #20]
   13b30:	add	r0, r0, #7
   13b34:	bic	r0, r0, #7
   13b38:	str	r0, [r4, #28]
   13b3c:	mov	r0, r6
   13b40:	sub	sp, fp, #16
   13b44:	pop	{r4, r5, r6, r7, fp, pc}
   13b48:	movw	r0, #35704	; 0x8b78
   13b4c:	movw	r1, #31186	; 0x79d2
   13b50:	movw	r3, #35250	; 0x89b2
   13b54:	mov	r2, #308	; 0x134
   13b58:	movt	r0, #1
   13b5c:	movt	r1, #1
   13b60:	movt	r3, #1
   13b64:	bl	1249c <__assert_fail@plt>

00013b68 <flatcc_builder_end_buffer@@Base>:
   13b68:	push	{r4, r5, r6, sl, fp, lr}
   13b6c:	add	fp, sp, #16
   13b70:	sub	sp, sp, #8
   13b74:	mov	r4, r0
   13b78:	ldr	r0, [r0, #32]
   13b7c:	ldrh	r0, [r0, #14]
   13b80:	cmp	r0, #1
   13b84:	bne	13c78 <flatcc_builder_end_buffer@@Base+0x110>
   13b88:	mov	r3, r1
   13b8c:	ldr	r1, [r4, #152]	; 0x98
   13b90:	ldrh	r0, [r4, #164]	; 0xa4
   13b94:	ldrh	r2, [r4, #132]	; 0x84
   13b98:	cmp	r1, #0
   13b9c:	ldrh	r1, [r4, #128]	; 0x80
   13ba0:	and	r0, r0, #2
   13ba4:	orrne	r0, r0, #1
   13ba8:	cmp	r1, r2
   13bac:	movcc	r1, r2
   13bb0:	strhcc	r2, [r4, #128]	; 0x80
   13bb4:	str	r0, [sp, #4]
   13bb8:	mov	r0, r4
   13bbc:	str	r1, [sp]
   13bc0:	add	r1, r4, #168	; 0xa8
   13bc4:	bl	13634 <flatcc_builder_create_buffer@@Base>
   13bc8:	mov	r6, r0
   13bcc:	cmp	r0, #0
   13bd0:	beq	13c6c <flatcc_builder_end_buffer@@Base+0x104>
   13bd4:	ldr	r1, [r4, #32]
   13bd8:	ldr	r0, [r4, #16]
   13bdc:	ldr	r2, [r4, #20]
   13be0:	ldr	r3, [r1, #20]
   13be4:	str	r3, [r4, #144]	; 0x90
   13be8:	ldr	r3, [r1, #28]
   13bec:	str	r3, [r4, #152]	; 0x98
   13bf0:	ldr	r3, [r1, #16]
   13bf4:	str	r3, [r4, #168]	; 0xa8
   13bf8:	ldrh	r1, [r1, #32]
   13bfc:	strh	r1, [r4, #164]	; 0xa4
   13c00:	mov	r1, #0
   13c04:	bl	1246c <memset@plt>
   13c08:	ldr	r0, [r4, #32]
   13c0c:	ldr	r1, [r4, #60]	; 0x3c
   13c10:	ldr	r2, [r4, #64]	; 0x40
   13c14:	ldr	r3, [r0, #8]
   13c18:	str	r3, [r4, #20]
   13c1c:	ldr	r3, [r0]
   13c20:	str	r3, [r4, #28]
   13c24:	add	r1, r1, r3
   13c28:	ldr	r5, [r0, #4]
   13c2c:	str	r1, [r4, #16]
   13c30:	sub	r1, r2, r3
   13c34:	cmp	r1, r5
   13c38:	movhi	r1, r5
   13c3c:	str	r1, [r4, #24]
   13c40:	ldrh	r1, [r4, #130]	; 0x82
   13c44:	ldrh	r2, [r4, #128]	; 0x80
   13c48:	cmp	r2, r1
   13c4c:	strhcc	r1, [r4, #128]	; 0x80
   13c50:	ldrh	r1, [r0, #12]
   13c54:	sub	r0, r0, #36	; 0x24
   13c58:	str	r0, [r4, #32]
   13c5c:	strh	r1, [r4, #130]	; 0x82
   13c60:	ldr	r0, [r4, #156]	; 0x9c
   13c64:	sub	r0, r0, #1
   13c68:	str	r0, [r4, #156]	; 0x9c
   13c6c:	mov	r0, r6
   13c70:	sub	sp, fp, #16
   13c74:	pop	{r4, r5, r6, sl, fp, pc}
   13c78:	movw	r0, #31745	; 0x7c01
   13c7c:	movw	r1, #31186	; 0x79d2
   13c80:	movw	r3, #31789	; 0x7c2d
   13c84:	movw	r2, #838	; 0x346
   13c88:	movt	r0, #1
   13c8c:	movt	r1, #1
   13c90:	movt	r3, #1
   13c94:	bl	1249c <__assert_fail@plt>

00013c98 <flatcc_builder_start_struct@@Base>:
   13c98:	push	{r4, r5, r6, r7, fp, lr}
   13c9c:	add	fp, sp, #16
   13ca0:	mov	r6, r1
   13ca4:	mov	r1, r2
   13ca8:	mov	r4, r0
   13cac:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   13cb0:	mov	r5, #0
   13cb4:	cmp	r0, #0
   13cb8:	bne	13d28 <flatcc_builder_start_struct@@Base+0x90>
   13cbc:	ldr	r1, [r4, #32]
   13cc0:	mov	r0, #2
   13cc4:	strh	r0, [r1, #14]
   13cc8:	ldr	r2, [r4, #28]
   13ccc:	ldr	r0, [r4, #60]	; 0x3c
   13cd0:	ldr	r3, [r4, #64]	; 0x40
   13cd4:	add	r0, r0, r2
   13cd8:	sub	r2, r3, r2
   13cdc:	mvn	r3, #3
   13ce0:	cmn	r2, #4
   13ce4:	str	r0, [r4, #16]
   13ce8:	movcs	r2, r3
   13cec:	str	r2, [r4, #24]
   13cf0:	str	r3, [r1, #4]
   13cf4:	ldr	r7, [r4, #20]
   13cf8:	add	r1, r7, r6
   13cfc:	cmp	r1, r2
   13d00:	str	r1, [r4, #20]
   13d04:	bcc	13d24 <flatcc_builder_start_struct@@Base+0x8c>
   13d08:	add	r1, r1, #1
   13d0c:	mov	r0, r4
   13d10:	mvn	r2, #3
   13d14:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   13d18:	cmp	r0, #0
   13d1c:	bne	13d28 <flatcc_builder_start_struct@@Base+0x90>
   13d20:	ldr	r0, [r4, #16]
   13d24:	add	r5, r0, r7
   13d28:	mov	r0, r5
   13d2c:	pop	{r4, r5, r6, r7, fp, pc}

00013d30 <flatcc_builder_struct_edit@@Base>:
   13d30:	ldr	r0, [r0, #16]
   13d34:	bx	lr

00013d38 <flatcc_builder_end_struct@@Base>:
   13d38:	push	{r4, r5, fp, lr}
   13d3c:	add	fp, sp, #8
   13d40:	mov	r4, r0
   13d44:	ldr	r0, [r0, #32]
   13d48:	ldrh	r0, [r0, #14]
   13d4c:	cmp	r0, #2
   13d50:	bne	13df0 <flatcc_builder_end_struct@@Base+0xb8>
   13d54:	ldrh	r3, [r4, #130]	; 0x82
   13d58:	ldr	r1, [r4, #16]
   13d5c:	ldr	r2, [r4, #20]
   13d60:	mov	r0, r4
   13d64:	bl	13850 <flatcc_builder_create_struct@@Base>
   13d68:	mov	r5, r0
   13d6c:	cmp	r0, #0
   13d70:	beq	13de8 <flatcc_builder_end_struct@@Base+0xb0>
   13d74:	ldr	r0, [r4, #16]
   13d78:	ldr	r2, [r4, #20]
   13d7c:	mov	r1, #0
   13d80:	bl	1246c <memset@plt>
   13d84:	ldr	r0, [r4, #32]
   13d88:	ldr	r1, [r4, #60]	; 0x3c
   13d8c:	ldr	ip, [r4, #64]	; 0x40
   13d90:	ldr	r3, [r0, #8]
   13d94:	str	r3, [r4, #20]
   13d98:	ldr	r3, [r0]
   13d9c:	str	r3, [r4, #28]
   13da0:	add	r1, r1, r3
   13da4:	ldr	r2, [r0, #4]
   13da8:	str	r1, [r4, #16]
   13dac:	sub	r1, ip, r3
   13db0:	cmp	r1, r2
   13db4:	movhi	r1, r2
   13db8:	str	r1, [r4, #24]
   13dbc:	ldrh	r1, [r4, #130]	; 0x82
   13dc0:	ldrh	r2, [r4, #128]	; 0x80
   13dc4:	cmp	r2, r1
   13dc8:	strhcc	r1, [r4, #128]	; 0x80
   13dcc:	ldrh	r1, [r0, #12]
   13dd0:	sub	r0, r0, #36	; 0x24
   13dd4:	str	r0, [r4, #32]
   13dd8:	strh	r1, [r4, #130]	; 0x82
   13ddc:	ldr	r0, [r4, #156]	; 0x9c
   13de0:	sub	r0, r0, #1
   13de4:	str	r0, [r4, #156]	; 0x9c
   13de8:	mov	r0, r5
   13dec:	pop	{r4, r5, fp, pc}
   13df0:	movw	r0, #31878	; 0x7c86
   13df4:	movw	r1, #31186	; 0x79d2
   13df8:	movw	r3, #31922	; 0x7cb2
   13dfc:	mov	r2, #872	; 0x368
   13e00:	movt	r0, #1
   13e04:	movt	r1, #1
   13e08:	movt	r3, #1
   13e0c:	bl	1249c <__assert_fail@plt>

00013e10 <flatcc_builder_extend_vector@@Base>:
   13e10:	push	{r4, r5, fp, lr}
   13e14:	add	fp, sp, #8
   13e18:	mov	r4, r0
   13e1c:	ldr	r0, [r0, #32]
   13e20:	ldr	r2, [r0, #20]
   13e24:	adds	r2, r2, r1
   13e28:	bcs	13e88 <flatcc_builder_extend_vector@@Base+0x78>
   13e2c:	ldr	r3, [r0, #24]
   13e30:	cmp	r2, r3
   13e34:	bhi	13e88 <flatcc_builder_extend_vector@@Base+0x78>
   13e38:	str	r2, [r0, #20]
   13e3c:	ldr	r0, [r4, #32]
   13e40:	ldr	r5, [r4, #20]
   13e44:	ldr	r2, [r4, #24]
   13e48:	ldr	r0, [r0, #16]
   13e4c:	mla	r0, r0, r1, r5
   13e50:	cmp	r0, r2
   13e54:	str	r0, [r4, #20]
   13e58:	bcc	13e7c <flatcc_builder_extend_vector@@Base+0x6c>
   13e5c:	add	r1, r0, #1
   13e60:	mov	r0, r4
   13e64:	mvn	r2, #3
   13e68:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   13e6c:	mov	r1, r0
   13e70:	mov	r0, #0
   13e74:	cmp	r1, #0
   13e78:	popne	{r4, r5, fp, pc}
   13e7c:	ldr	r0, [r4, #16]
   13e80:	add	r0, r0, r5
   13e84:	pop	{r4, r5, fp, pc}
   13e88:	movw	r0, #35457	; 0x8a81
   13e8c:	movw	r1, #31186	; 0x79d2
   13e90:	movw	r3, #35484	; 0x8a9c
   13e94:	mov	r2, #892	; 0x37c
   13e98:	movt	r0, #1
   13e9c:	movt	r1, #1
   13ea0:	movt	r3, #1
   13ea4:	bl	1249c <__assert_fail@plt>

00013ea8 <flatcc_builder_vector_push@@Base>:
   13ea8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13eac:	add	fp, sp, #24
   13eb0:	mov	r5, r0
   13eb4:	ldr	r0, [r0, #32]
   13eb8:	mov	r8, r1
   13ebc:	ldrh	r1, [r0, #14]
   13ec0:	cmp	r1, #4
   13ec4:	bne	13f48 <flatcc_builder_vector_push@@Base+0xa0>
   13ec8:	ldr	r1, [r0, #20]
   13ecc:	ldr	r2, [r0, #24]
   13ed0:	cmp	r1, r2
   13ed4:	bhi	13f68 <flatcc_builder_vector_push@@Base+0xc0>
   13ed8:	add	r1, r1, #1
   13edc:	str	r1, [r0, #20]
   13ee0:	ldr	r0, [r5, #32]
   13ee4:	ldr	r4, [r5, #20]
   13ee8:	ldr	r1, [r5, #24]
   13eec:	ldr	r6, [r0, #16]
   13ef0:	add	r0, r4, r6
   13ef4:	cmp	r0, r1
   13ef8:	str	r0, [r5, #20]
   13efc:	bcc	13f1c <flatcc_builder_vector_push@@Base+0x74>
   13f00:	add	r1, r0, #1
   13f04:	mov	r0, r5
   13f08:	mvn	r2, #3
   13f0c:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   13f10:	mov	r7, #0
   13f14:	cmp	r0, #0
   13f18:	bne	13f40 <flatcc_builder_vector_push@@Base+0x98>
   13f1c:	ldr	r0, [r5, #16]
   13f20:	adds	r7, r0, r4
   13f24:	beq	13f3c <flatcc_builder_vector_push@@Base+0x94>
   13f28:	mov	r0, r7
   13f2c:	mov	r1, r8
   13f30:	mov	r2, r6
   13f34:	bl	123e8 <memcpy@plt>
   13f38:	b	13f40 <flatcc_builder_vector_push@@Base+0x98>
   13f3c:	mov	r7, #0
   13f40:	mov	r0, r7
   13f44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f48:	movw	r0, #31989	; 0x7cf5
   13f4c:	movw	r1, #31186	; 0x79d2
   13f50:	movw	r3, #32033	; 0x7d21
   13f54:	movw	r2, #907	; 0x38b
   13f58:	movt	r0, #1
   13f5c:	movt	r1, #1
   13f60:	movt	r3, #1
   13f64:	bl	1249c <__assert_fail@plt>
   13f68:	movw	r0, #32100	; 0x7d64
   13f6c:	movw	r1, #31186	; 0x79d2
   13f70:	movw	r3, #32033	; 0x7d21
   13f74:	mov	r2, #908	; 0x38c
   13f78:	movt	r0, #1
   13f7c:	movt	r1, #1
   13f80:	movt	r3, #1
   13f84:	bl	1249c <__assert_fail@plt>

00013f88 <flatcc_builder_append_vector@@Base>:
   13f88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f8c:	add	fp, sp, #24
   13f90:	mov	r6, r0
   13f94:	ldr	r0, [r0, #32]
   13f98:	mov	r8, r1
   13f9c:	ldrh	r1, [r0, #14]
   13fa0:	cmp	r1, #4
   13fa4:	bne	14050 <flatcc_builder_append_vector@@Base+0xc8>
   13fa8:	ldr	r1, [r0, #20]
   13fac:	mov	r9, r2
   13fb0:	adds	r1, r1, r2
   13fb4:	bcs	14030 <flatcc_builder_append_vector@@Base+0xa8>
   13fb8:	ldr	r2, [r0, #24]
   13fbc:	cmp	r1, r2
   13fc0:	bhi	14030 <flatcc_builder_append_vector@@Base+0xa8>
   13fc4:	str	r1, [r0, #20]
   13fc8:	ldr	r0, [r6, #32]
   13fcc:	ldr	r4, [r6, #20]
   13fd0:	ldr	r1, [r6, #24]
   13fd4:	ldr	r5, [r0, #16]
   13fd8:	mla	r0, r5, r9, r4
   13fdc:	cmp	r0, r1
   13fe0:	str	r0, [r6, #20]
   13fe4:	bcc	14004 <flatcc_builder_append_vector@@Base+0x7c>
   13fe8:	add	r1, r0, #1
   13fec:	mov	r0, r6
   13ff0:	mvn	r2, #3
   13ff4:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   13ff8:	mov	r7, #0
   13ffc:	cmp	r0, #0
   14000:	bne	14028 <flatcc_builder_append_vector@@Base+0xa0>
   14004:	ldr	r0, [r6, #16]
   14008:	adds	r7, r0, r4
   1400c:	beq	14024 <flatcc_builder_append_vector@@Base+0x9c>
   14010:	mul	r2, r5, r9
   14014:	mov	r0, r7
   14018:	mov	r1, r8
   1401c:	bl	123e8 <memcpy@plt>
   14020:	b	14028 <flatcc_builder_append_vector@@Base+0xa0>
   14024:	mov	r7, #0
   14028:	mov	r0, r7
   1402c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14030:	movw	r0, #35457	; 0x8a81
   14034:	movw	r1, #31186	; 0x79d2
   14038:	movw	r3, #35484	; 0x8a9c
   1403c:	mov	r2, #892	; 0x37c
   14040:	movt	r0, #1
   14044:	movt	r1, #1
   14048:	movt	r3, #1
   1404c:	bl	1249c <__assert_fail@plt>
   14050:	movw	r0, #31989	; 0x7cf5
   14054:	movw	r1, #31186	; 0x79d2
   14058:	movw	r3, #32161	; 0x7da1
   1405c:	movw	r2, #915	; 0x393
   14060:	movt	r0, #1
   14064:	movt	r1, #1
   14068:	movt	r3, #1
   1406c:	bl	1249c <__assert_fail@plt>

00014070 <flatcc_builder_extend_offset_vector@@Base>:
   14070:	push	{r4, r5, fp, lr}
   14074:	add	fp, sp, #8
   14078:	mov	r4, r0
   1407c:	ldr	r0, [r0, #32]
   14080:	ldr	r2, [r0, #20]
   14084:	adds	r2, r2, r1
   14088:	cmpcc	r2, #1073741824	; 0x40000000
   1408c:	bcc	140b0 <flatcc_builder_extend_offset_vector@@Base+0x40>
   14090:	movw	r0, #35457	; 0x8a81
   14094:	movw	r1, #31186	; 0x79d2
   14098:	movw	r3, #35484	; 0x8a9c
   1409c:	mov	r2, #892	; 0x37c
   140a0:	movt	r0, #1
   140a4:	movt	r1, #1
   140a8:	movt	r3, #1
   140ac:	bl	1249c <__assert_fail@plt>
   140b0:	str	r2, [r0, #20]
   140b4:	ldr	r5, [r4, #20]
   140b8:	ldr	r2, [r4, #24]
   140bc:	add	r0, r5, r1, lsl #2
   140c0:	cmp	r0, r2
   140c4:	str	r0, [r4, #20]
   140c8:	bcc	140ec <flatcc_builder_extend_offset_vector@@Base+0x7c>
   140cc:	add	r1, r0, #1
   140d0:	mov	r0, r4
   140d4:	mvn	r2, #3
   140d8:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   140dc:	mov	r1, r0
   140e0:	mov	r0, #0
   140e4:	cmp	r1, #0
   140e8:	popne	{r4, r5, fp, pc}
   140ec:	ldr	r0, [r4, #16]
   140f0:	add	r0, r0, r5
   140f4:	pop	{r4, r5, fp, pc}

000140f8 <flatcc_builder_offset_vector_push@@Base>:
   140f8:	push	{r4, r5, r6, r7, fp, lr}
   140fc:	add	fp, sp, #16
   14100:	mov	r6, r0
   14104:	ldr	r0, [r0, #32]
   14108:	mov	r4, r1
   1410c:	ldrh	r1, [r0, #14]
   14110:	cmp	r1, #5
   14114:	bne	14178 <flatcc_builder_offset_vector_push@@Base+0x80>
   14118:	ldr	r1, [r0, #20]
   1411c:	mov	r5, #0
   14120:	cmn	r1, #-1073741823	; 0xc0000001
   14124:	beq	14170 <flatcc_builder_offset_vector_push@@Base+0x78>
   14128:	add	r1, r1, #1
   1412c:	str	r1, [r0, #20]
   14130:	ldr	r7, [r6, #20]
   14134:	ldr	r0, [r6, #24]
   14138:	add	r1, r7, #4
   1413c:	cmp	r1, r0
   14140:	str	r1, [r6, #20]
   14144:	bcc	14160 <flatcc_builder_offset_vector_push@@Base+0x68>
   14148:	add	r1, r7, #5
   1414c:	mov	r0, r6
   14150:	mvn	r2, #3
   14154:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   14158:	cmp	r0, #0
   1415c:	bne	14170 <flatcc_builder_offset_vector_push@@Base+0x78>
   14160:	ldr	r0, [r6, #16]
   14164:	adds	r0, r0, r7
   14168:	movne	r5, r0
   1416c:	strne	r4, [r0]
   14170:	mov	r0, r5
   14174:	pop	{r4, r5, r6, r7, fp, pc}
   14178:	movw	r0, #32238	; 0x7dee
   1417c:	movw	r1, #31186	; 0x79d2
   14180:	movw	r3, #32289	; 0x7e21
   14184:	movw	r2, #934	; 0x3a6
   14188:	movt	r0, #1
   1418c:	movt	r1, #1
   14190:	movt	r3, #1
   14194:	bl	1249c <__assert_fail@plt>

00014198 <flatcc_builder_append_offset_vector@@Base>:
   14198:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1419c:	add	fp, sp, #24
   141a0:	mov	r6, r0
   141a4:	ldr	r0, [r0, #32]
   141a8:	mov	r8, r1
   141ac:	ldrh	r1, [r0, #14]
   141b0:	cmp	r1, #5
   141b4:	bne	14250 <flatcc_builder_append_offset_vector@@Base+0xb8>
   141b8:	ldr	r1, [r0, #20]
   141bc:	mov	r5, r2
   141c0:	adds	r1, r1, r2
   141c4:	cmpcc	r1, #1073741824	; 0x40000000
   141c8:	bcc	141ec <flatcc_builder_append_offset_vector@@Base+0x54>
   141cc:	movw	r0, #35457	; 0x8a81
   141d0:	movw	r1, #31186	; 0x79d2
   141d4:	movw	r3, #35484	; 0x8a9c
   141d8:	mov	r2, #892	; 0x37c
   141dc:	movt	r0, #1
   141e0:	movt	r1, #1
   141e4:	movt	r3, #1
   141e8:	bl	1249c <__assert_fail@plt>
   141ec:	str	r1, [r0, #20]
   141f0:	ldr	r4, [r6, #20]
   141f4:	ldr	r1, [r6, #24]
   141f8:	add	r0, r4, r5, lsl #2
   141fc:	cmp	r0, r1
   14200:	str	r0, [r6, #20]
   14204:	bcc	14224 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14208:	add	r1, r0, #1
   1420c:	mov	r0, r6
   14210:	mvn	r2, #3
   14214:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   14218:	mov	r7, #0
   1421c:	cmp	r0, #0
   14220:	bne	14248 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14224:	ldr	r0, [r6, #16]
   14228:	adds	r7, r0, r4
   1422c:	beq	14244 <flatcc_builder_append_offset_vector@@Base+0xac>
   14230:	lsl	r2, r5, #2
   14234:	mov	r0, r7
   14238:	mov	r1, r8
   1423c:	bl	123e8 <memcpy@plt>
   14240:	b	14248 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14244:	mov	r7, #0
   14248:	mov	r0, r7
   1424c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14250:	movw	r0, #32238	; 0x7dee
   14254:	movw	r1, #31186	; 0x79d2
   14258:	movw	r3, #32387	; 0x7e83
   1425c:	mov	r2, #948	; 0x3b4
   14260:	movt	r0, #1
   14264:	movt	r1, #1
   14268:	movt	r3, #1
   1426c:	bl	1249c <__assert_fail@plt>

00014270 <flatcc_builder_extend_string@@Base>:
   14270:	push	{r4, r5, fp, lr}
   14274:	add	fp, sp, #8
   14278:	mov	r4, r0
   1427c:	ldr	r0, [r0, #32]
   14280:	ldrh	r2, [r0, #14]
   14284:	cmp	r2, #6
   14288:	bne	142e0 <flatcc_builder_extend_string@@Base+0x70>
   1428c:	ldr	r2, [r0, #20]
   14290:	adds	r2, r2, r1
   14294:	bcs	14300 <flatcc_builder_extend_string@@Base+0x90>
   14298:	str	r2, [r0, #20]
   1429c:	ldr	r5, [r4, #20]
   142a0:	ldr	r2, [r4, #24]
   142a4:	add	r0, r5, r1
   142a8:	cmp	r0, r2
   142ac:	str	r0, [r4, #20]
   142b0:	bcc	142d4 <flatcc_builder_extend_string@@Base+0x64>
   142b4:	add	r1, r0, #1
   142b8:	mov	r0, r4
   142bc:	mvn	r2, #3
   142c0:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   142c4:	mov	r1, r0
   142c8:	mov	r0, #0
   142cc:	cmp	r1, #0
   142d0:	popne	{r4, r5, fp, pc}
   142d4:	ldr	r0, [r4, #16]
   142d8:	add	r0, r0, r5
   142dc:	pop	{r4, r5, fp, pc}
   142e0:	movw	r0, #32503	; 0x7ef7
   142e4:	movw	r1, #31186	; 0x79d2
   142e8:	movw	r3, #32547	; 0x7f23
   142ec:	movw	r2, #957	; 0x3bd
   142f0:	movt	r0, #1
   142f4:	movt	r1, #1
   142f8:	movt	r3, #1
   142fc:	bl	1249c <__assert_fail@plt>
   14300:	movw	r0, #35457	; 0x8a81
   14304:	movw	r1, #31186	; 0x79d2
   14308:	movw	r3, #35484	; 0x8a9c
   1430c:	mov	r2, #892	; 0x37c
   14310:	movt	r0, #1
   14314:	movt	r1, #1
   14318:	movt	r3, #1
   1431c:	bl	1249c <__assert_fail@plt>

00014320 <flatcc_builder_append_string@@Base>:
   14320:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14324:	add	fp, sp, #24
   14328:	mov	r6, r0
   1432c:	ldr	r0, [r0, #32]
   14330:	mov	r8, r1
   14334:	ldrh	r1, [r0, #14]
   14338:	cmp	r1, #6
   1433c:	bne	143b4 <flatcc_builder_append_string@@Base+0x94>
   14340:	ldr	r1, [r0, #20]
   14344:	mov	r4, r2
   14348:	adds	r1, r1, r2
   1434c:	bcs	143d4 <flatcc_builder_append_string@@Base+0xb4>
   14350:	str	r1, [r0, #20]
   14354:	ldr	r5, [r6, #20]
   14358:	ldr	r1, [r6, #24]
   1435c:	add	r0, r5, r4
   14360:	cmp	r0, r1
   14364:	str	r0, [r6, #20]
   14368:	bcc	14388 <flatcc_builder_append_string@@Base+0x68>
   1436c:	add	r1, r0, #1
   14370:	mov	r0, r6
   14374:	mvn	r2, #3
   14378:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   1437c:	mov	r7, #0
   14380:	cmp	r0, #0
   14384:	bne	143ac <flatcc_builder_append_string@@Base+0x8c>
   14388:	ldr	r0, [r6, #16]
   1438c:	adds	r7, r0, r5
   14390:	beq	143a8 <flatcc_builder_append_string@@Base+0x88>
   14394:	mov	r0, r7
   14398:	mov	r1, r8
   1439c:	mov	r2, r4
   143a0:	bl	123e8 <memcpy@plt>
   143a4:	b	143ac <flatcc_builder_append_string@@Base+0x8c>
   143a8:	mov	r7, #0
   143ac:	mov	r0, r7
   143b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143b4:	movw	r0, #32503	; 0x7ef7
   143b8:	movw	r1, #31186	; 0x79d2
   143bc:	movw	r3, #32610	; 0x7f62
   143c0:	movw	r2, #966	; 0x3c6
   143c4:	movt	r0, #1
   143c8:	movt	r1, #1
   143cc:	movt	r3, #1
   143d0:	bl	1249c <__assert_fail@plt>
   143d4:	movw	r0, #35457	; 0x8a81
   143d8:	movw	r1, #31186	; 0x79d2
   143dc:	movw	r3, #35484	; 0x8a9c
   143e0:	mov	r2, #892	; 0x37c
   143e4:	movt	r0, #1
   143e8:	movt	r1, #1
   143ec:	movt	r3, #1
   143f0:	bl	1249c <__assert_fail@plt>

000143f4 <flatcc_builder_append_string_str@@Base>:
   143f4:	push	{r4, r5, fp, lr}
   143f8:	add	fp, sp, #8
   143fc:	mov	r5, r0
   14400:	mov	r0, r1
   14404:	mov	r4, r1
   14408:	bl	12454 <strlen@plt>
   1440c:	mov	r2, r0
   14410:	mov	r0, r5
   14414:	mov	r1, r4
   14418:	pop	{r4, r5, fp, lr}
   1441c:	b	14320 <flatcc_builder_append_string@@Base>

00014420 <flatcc_builder_append_string_strn@@Base>:
   14420:	push	{r4, r5, r6, sl, fp, lr}
   14424:	add	fp, sp, #16
   14428:	mov	r6, r0
   1442c:	mov	r5, r1
   14430:	mov	r0, r1
   14434:	mov	r1, #0
   14438:	mov	r4, r2
   1443c:	bl	12478 <memchr@plt>
   14440:	cmp	r0, #0
   14444:	mov	r1, r5
   14448:	subne	r4, r0, r5
   1444c:	mov	r0, r6
   14450:	mov	r2, r4
   14454:	pop	{r4, r5, r6, sl, fp, lr}
   14458:	b	14320 <flatcc_builder_append_string@@Base>

0001445c <flatcc_builder_truncate_vector@@Base>:
   1445c:	push	{fp, lr}
   14460:	mov	fp, sp
   14464:	ldr	r2, [r0, #32]
   14468:	ldrh	r3, [r2, #14]
   1446c:	cmp	r3, #4
   14470:	bne	144b8 <flatcc_builder_truncate_vector@@Base+0x5c>
   14474:	ldr	r3, [r2, #20]
   14478:	cmp	r3, r1
   1447c:	bcc	144d8 <flatcc_builder_truncate_vector@@Base+0x7c>
   14480:	sub	r3, r3, r1
   14484:	str	r3, [r2, #20]
   14488:	ldr	r2, [r0, #32]
   1448c:	ldr	r3, [r0, #20]
   14490:	ldr	ip, [r0, #16]
   14494:	ldr	r2, [r2, #16]
   14498:	mls	r3, r2, r1, r3
   1449c:	mul	r2, r2, r1
   144a0:	mov	r1, #0
   144a4:	str	r3, [r0, #20]
   144a8:	add	r0, ip, r3
   144ac:	bl	1246c <memset@plt>
   144b0:	mov	r0, #0
   144b4:	pop	{fp, pc}
   144b8:	movw	r0, #31989	; 0x7cf5
   144bc:	movw	r1, #31186	; 0x79d2
   144c0:	movw	r3, #32687	; 0x7faf
   144c4:	movw	r2, #985	; 0x3d9
   144c8:	movt	r0, #1
   144cc:	movt	r1, #1
   144d0:	movt	r3, #1
   144d4:	bl	1249c <__assert_fail@plt>
   144d8:	movw	r0, #32750	; 0x7fee
   144dc:	movw	r1, #31186	; 0x79d2
   144e0:	movw	r3, #32687	; 0x7faf
   144e4:	movw	r2, #986	; 0x3da
   144e8:	movt	r0, #1
   144ec:	movt	r1, #1
   144f0:	movt	r3, #1
   144f4:	bl	1249c <__assert_fail@plt>

000144f8 <flatcc_builder_truncate_offset_vector@@Base>:
   144f8:	push	{fp, lr}
   144fc:	mov	fp, sp
   14500:	ldr	r2, [r0, #32]
   14504:	ldrh	r3, [r2, #14]
   14508:	cmp	r3, #5
   1450c:	bne	14554 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14510:	ldr	r3, [r2, #20]
   14514:	cmp	r3, r1
   14518:	bcc	14574 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1451c:	sub	r3, r3, r1
   14520:	str	r3, [r2, #20]
   14524:	ldr	r2, [r0, #32]
   14528:	ldr	r3, [r0, #20]
   1452c:	ldr	ip, [r0, #16]
   14530:	ldr	r2, [r2, #16]
   14534:	mls	r3, r2, r1, r3
   14538:	mul	r2, r2, r1
   1453c:	mov	r1, #0
   14540:	str	r3, [r0, #20]
   14544:	add	r0, ip, r3
   14548:	bl	1246c <memset@plt>
   1454c:	mov	r0, #0
   14550:	pop	{fp, pc}
   14554:	movw	r0, #32238	; 0x7dee
   14558:	movw	r1, #31186	; 0x79d2
   1455c:	movw	r3, #32786	; 0x8012
   14560:	movw	r2, #994	; 0x3e2
   14564:	movt	r0, #1
   14568:	movt	r1, #1
   1456c:	movt	r3, #1
   14570:	bl	1249c <__assert_fail@plt>
   14574:	movw	r0, #32856	; 0x8058
   14578:	movw	r1, #31186	; 0x79d2
   1457c:	movw	r3, #32786	; 0x8012
   14580:	movw	r2, #995	; 0x3e3
   14584:	movt	r0, #1
   14588:	movt	r1, #1
   1458c:	movt	r3, #1
   14590:	bl	1249c <__assert_fail@plt>

00014594 <flatcc_builder_truncate_string@@Base>:
   14594:	push	{fp, lr}
   14598:	mov	fp, sp
   1459c:	mov	r2, r1
   145a0:	ldr	r1, [r0, #32]
   145a4:	ldrh	r3, [r1, #14]
   145a8:	cmp	r3, #6
   145ac:	bne	145e8 <flatcc_builder_truncate_string@@Base+0x54>
   145b0:	ldr	r3, [r1, #20]
   145b4:	cmp	r3, r2
   145b8:	bcc	14608 <flatcc_builder_truncate_string@@Base+0x74>
   145bc:	sub	r3, r3, r2
   145c0:	str	r3, [r1, #20]
   145c4:	ldr	r3, [r0, #20]
   145c8:	ldr	r1, [r0, #16]
   145cc:	sub	r3, r3, r2
   145d0:	str	r3, [r0, #20]
   145d4:	add	r0, r1, r3
   145d8:	mov	r1, #0
   145dc:	bl	1246c <memset@plt>
   145e0:	mov	r0, #0
   145e4:	pop	{fp, pc}
   145e8:	movw	r0, #32503	; 0x7ef7
   145ec:	movw	r1, #31186	; 0x79d2
   145f0:	movw	r3, #32915	; 0x8093
   145f4:	movw	r2, #1003	; 0x3eb
   145f8:	movt	r0, #1
   145fc:	movt	r1, #1
   14600:	movt	r3, #1
   14604:	bl	1249c <__assert_fail@plt>
   14608:	movw	r0, #32978	; 0x80d2
   1460c:	movw	r1, #31186	; 0x79d2
   14610:	movw	r3, #32915	; 0x8093
   14614:	mov	r2, #1004	; 0x3ec
   14618:	movt	r0, #1
   1461c:	movt	r1, #1
   14620:	movt	r3, #1
   14624:	bl	1249c <__assert_fail@plt>

00014628 <flatcc_builder_start_vector@@Base>:
   14628:	push	{r4, r5, r6, r7, fp, lr}
   1462c:	add	fp, sp, #16
   14630:	mov	r7, #4
   14634:	cmp	r2, #4
   14638:	mov	r6, r1
   1463c:	mov	r5, r3
   14640:	mov	r4, r0
   14644:	movls	r2, r7
   14648:	mov	r1, r2
   1464c:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   14650:	mov	r1, r0
   14654:	mvn	r0, #0
   14658:	cmp	r1, #0
   1465c:	popne	{r4, r5, r6, r7, fp, pc}
   14660:	ldr	r0, [r4, #32]
   14664:	str	r6, [r0, #16]
   14668:	mov	r0, #0
   1466c:	ldr	r1, [r4, #32]
   14670:	str	r0, [r1, #20]
   14674:	ldr	r1, [r4, #32]
   14678:	str	r5, [r1, #24]
   1467c:	ldr	r1, [r4, #32]
   14680:	strh	r7, [r1, #14]
   14684:	ldr	r2, [r4, #28]
   14688:	ldr	r3, [r4, #60]	; 0x3c
   1468c:	ldr	r7, [r4, #64]	; 0x40
   14690:	add	r3, r3, r2
   14694:	sub	r2, r7, r2
   14698:	str	r3, [r4, #16]
   1469c:	mvn	r3, #3
   146a0:	cmn	r2, #4
   146a4:	movcs	r2, r3
   146a8:	str	r2, [r4, #24]
   146ac:	str	r3, [r1, #4]
   146b0:	pop	{r4, r5, r6, r7, fp, pc}

000146b4 <flatcc_builder_start_offset_vector@@Base>:
   146b4:	push	{r4, r5, fp, lr}
   146b8:	add	fp, sp, #8
   146bc:	mov	r1, #4
   146c0:	mov	r4, r0
   146c4:	mov	r5, #4
   146c8:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   146cc:	mov	r1, r0
   146d0:	mvn	r0, #0
   146d4:	cmp	r1, #0
   146d8:	popne	{r4, r5, fp, pc}
   146dc:	ldr	r0, [r4, #32]
   146e0:	mov	r2, #5
   146e4:	str	r5, [r0, #16]
   146e8:	mov	r0, #0
   146ec:	ldr	r1, [r4, #32]
   146f0:	str	r0, [r1, #20]
   146f4:	ldr	r1, [r4, #32]
   146f8:	strh	r2, [r1, #14]
   146fc:	ldr	r2, [r4, #28]
   14700:	ldr	r3, [r4, #60]	; 0x3c
   14704:	ldr	r5, [r4, #64]	; 0x40
   14708:	add	r3, r3, r2
   1470c:	sub	r2, r5, r2
   14710:	str	r3, [r4, #16]
   14714:	mvn	r3, #3
   14718:	cmn	r2, #4
   1471c:	movcs	r2, r3
   14720:	str	r2, [r4, #24]
   14724:	str	r3, [r1, #4]
   14728:	pop	{r4, r5, fp, pc}

0001472c <flatcc_builder_create_offset_vector@@Base>:
   1472c:	push	{r4, r5, r6, sl, fp, lr}
   14730:	add	fp, sp, #16
   14734:	mov	r6, r2
   14738:	mov	r5, r1
   1473c:	mov	r4, r0
   14740:	bl	146b4 <flatcc_builder_start_offset_vector@@Base>
   14744:	cmp	r0, #0
   14748:	beq	14754 <flatcc_builder_create_offset_vector@@Base+0x28>
   1474c:	mov	r0, #0
   14750:	pop	{r4, r5, r6, sl, fp, pc}
   14754:	mov	r0, r4
   14758:	mov	r1, r6
   1475c:	bl	14070 <flatcc_builder_extend_offset_vector@@Base>
   14760:	cmp	r0, #0
   14764:	beq	1474c <flatcc_builder_create_offset_vector@@Base+0x20>
   14768:	lsl	r2, r6, #2
   1476c:	mov	r1, r5
   14770:	bl	123e8 <memcpy@plt>
   14774:	mov	r0, r4
   14778:	pop	{r4, r5, r6, sl, fp, lr}
   1477c:	b	14780 <flatcc_builder_end_offset_vector@@Base>

00014780 <flatcc_builder_end_offset_vector@@Base>:
   14780:	push	{r4, r5, fp, lr}
   14784:	add	fp, sp, #8
   14788:	mov	r4, r0
   1478c:	ldr	r0, [r0, #32]
   14790:	ldrh	r1, [r0, #14]
   14794:	cmp	r1, #5
   14798:	bne	14838 <flatcc_builder_end_offset_vector@@Base+0xb8>
   1479c:	ldr	r2, [r0, #20]
   147a0:	ldr	r1, [r4, #16]
   147a4:	mov	r0, r4
   147a8:	mov	r3, #0
   147ac:	bl	157a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   147b0:	mov	r5, r0
   147b4:	cmp	r0, #0
   147b8:	beq	14830 <flatcc_builder_end_offset_vector@@Base+0xb0>
   147bc:	ldr	r0, [r4, #16]
   147c0:	ldr	r2, [r4, #20]
   147c4:	mov	r1, #0
   147c8:	bl	1246c <memset@plt>
   147cc:	ldr	r0, [r4, #32]
   147d0:	ldr	r1, [r4, #60]	; 0x3c
   147d4:	ldr	ip, [r4, #64]	; 0x40
   147d8:	ldr	r3, [r0, #8]
   147dc:	str	r3, [r4, #20]
   147e0:	ldr	r3, [r0]
   147e4:	str	r3, [r4, #28]
   147e8:	add	r1, r1, r3
   147ec:	ldr	r2, [r0, #4]
   147f0:	str	r1, [r4, #16]
   147f4:	sub	r1, ip, r3
   147f8:	cmp	r1, r2
   147fc:	movhi	r1, r2
   14800:	str	r1, [r4, #24]
   14804:	ldrh	r1, [r4, #130]	; 0x82
   14808:	ldrh	r2, [r4, #128]	; 0x80
   1480c:	cmp	r2, r1
   14810:	strhcc	r1, [r4, #128]	; 0x80
   14814:	ldrh	r1, [r0, #12]
   14818:	sub	r0, r0, #36	; 0x24
   1481c:	str	r0, [r4, #32]
   14820:	strh	r1, [r4, #130]	; 0x82
   14824:	ldr	r0, [r4, #156]	; 0x9c
   14828:	sub	r0, r0, #1
   1482c:	str	r0, [r4, #156]	; 0x9c
   14830:	mov	r0, r5
   14834:	pop	{r4, r5, fp, pc}
   14838:	movw	r0, #32238	; 0x7dee
   1483c:	movw	r1, #31186	; 0x79d2
   14840:	movw	r3, #33821	; 0x841d
   14844:	movw	r2, #1480	; 0x5c8
   14848:	movt	r0, #1
   1484c:	movt	r1, #1
   14850:	movt	r3, #1
   14854:	bl	1249c <__assert_fail@plt>

00014858 <flatcc_builder_start_string@@Base>:
   14858:	push	{r4, r5, fp, lr}
   1485c:	add	fp, sp, #8
   14860:	mov	r1, #1
   14864:	mov	r4, r0
   14868:	mov	r5, #1
   1486c:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   14870:	mov	r1, r0
   14874:	mvn	r0, #0
   14878:	cmp	r1, #0
   1487c:	popne	{r4, r5, fp, pc}
   14880:	ldr	r0, [r4, #32]
   14884:	mov	r2, #6
   14888:	str	r5, [r0, #16]
   1488c:	mov	r0, #0
   14890:	ldr	r1, [r4, #32]
   14894:	str	r0, [r1, #20]
   14898:	ldr	r1, [r4, #32]
   1489c:	strh	r2, [r1, #14]
   148a0:	ldr	r2, [r4, #28]
   148a4:	ldr	r3, [r4, #60]	; 0x3c
   148a8:	ldr	r5, [r4, #64]	; 0x40
   148ac:	add	r3, r3, r2
   148b0:	sub	r2, r5, r2
   148b4:	str	r3, [r4, #16]
   148b8:	mvn	r3, #3
   148bc:	cmn	r2, #4
   148c0:	movcs	r2, r3
   148c4:	str	r2, [r4, #24]
   148c8:	str	r3, [r1, #4]
   148cc:	pop	{r4, r5, fp, pc}

000148d0 <flatcc_builder_reserve_table@@Base>:
   148d0:	push	{r4, r5, r6, sl, fp, lr}
   148d4:	add	fp, sp, #16
   148d8:	sub	sp, sp, #8
   148dc:	cmn	r1, #1
   148e0:	ble	149b4 <flatcc_builder_reserve_table@@Base+0xe4>
   148e4:	mov	r4, r0
   148e8:	ldr	r0, [r0, #32]
   148ec:	mov	r5, r1
   148f0:	ldr	r1, [r4, #56]	; 0x38
   148f4:	ldrh	r2, [r0, #28]
   148f8:	ldr	r0, [r0, #16]
   148fc:	add	r6, r0, r2, lsl #1
   14900:	add	r0, r6, r5, lsl #1
   14904:	add	r2, r0, #4
   14908:	cmp	r2, r1
   1490c:	bls	14934 <flatcc_builder_reserve_table@@Base+0x64>
   14910:	ldr	r0, [r4, #40]	; 0x28
   14914:	ldr	ip, [r4, #48]	; 0x30
   14918:	mov	r3, #0
   1491c:	add	r1, r4, #52	; 0x34
   14920:	str	r3, [sp]
   14924:	mov	r3, #1
   14928:	blx	ip
   1492c:	cmp	r0, #0
   14930:	bne	149d4 <flatcc_builder_reserve_table@@Base+0x104>
   14934:	ldr	r0, [r4, #52]	; 0x34
   14938:	adds	r0, r0, r6
   1493c:	str	r0, [r4, #4]
   14940:	beq	149a8 <flatcc_builder_reserve_table@@Base+0xd8>
   14944:	add	r0, r0, #4
   14948:	lsl	r1, r5, #1
   1494c:	str	r0, [r4, #4]
   14950:	ldr	r0, [r4, #32]
   14954:	ldr	r3, [r4, #80]	; 0x50
   14958:	ldr	r5, [r0, #20]
   1495c:	orr	r0, r1, #1
   14960:	add	r2, r5, r0
   14964:	cmp	r2, r3
   14968:	bls	14990 <flatcc_builder_reserve_table@@Base+0xc0>
   1496c:	ldr	r0, [r4, #40]	; 0x28
   14970:	ldr	r6, [r4, #48]	; 0x30
   14974:	mov	r3, #3
   14978:	add	r1, r4, #76	; 0x4c
   1497c:	str	r3, [sp]
   14980:	mov	r3, #0
   14984:	blx	r6
   14988:	cmp	r0, #0
   1498c:	bne	149d4 <flatcc_builder_reserve_table@@Base+0x104>
   14990:	ldr	r0, [r4, #76]	; 0x4c
   14994:	adds	r0, r0, r5
   14998:	str	r0, [r4]
   1499c:	mov	r0, #0
   149a0:	mvneq	r0, #0
   149a4:	b	149ac <flatcc_builder_reserve_table@@Base+0xdc>
   149a8:	mvn	r0, #0
   149ac:	sub	sp, fp, #16
   149b0:	pop	{r4, r5, r6, sl, fp, pc}
   149b4:	movw	r0, #33077	; 0x8135
   149b8:	movw	r1, #31186	; 0x79d2
   149bc:	movw	r3, #33012	; 0x80f4
   149c0:	movw	r2, #1065	; 0x429
   149c4:	movt	r0, #1
   149c8:	movt	r1, #1
   149cc:	movt	r3, #1
   149d0:	bl	1249c <__assert_fail@plt>
   149d4:	movw	r0, #35704	; 0x8b78
   149d8:	movw	r1, #31186	; 0x79d2
   149dc:	movw	r3, #35250	; 0x89b2
   149e0:	mov	r2, #308	; 0x134
   149e4:	movt	r0, #1
   149e8:	movt	r1, #1
   149ec:	movt	r3, #1
   149f0:	bl	1249c <__assert_fail@plt>

000149f4 <flatcc_builder_start_table@@Base>:
   149f4:	push	{r4, r5, r6, r7, fp, lr}
   149f8:	add	fp, sp, #16
   149fc:	sub	sp, sp, #8
   14a00:	mov	r6, r1
   14a04:	mov	r1, #4
   14a08:	mov	r4, r0
   14a0c:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   14a10:	mvn	r5, #0
   14a14:	cmp	r0, #0
   14a18:	beq	14a28 <flatcc_builder_start_table@@Base+0x34>
   14a1c:	mov	r0, r5
   14a20:	sub	sp, fp, #16
   14a24:	pop	{r4, r5, r6, r7, fp, pc}
   14a28:	mov	r1, r4
   14a2c:	ldr	r2, [r4, #4]
   14a30:	ldr	r3, [r4, #32]
   14a34:	ldr	r0, [r1, #52]!	; 0x34
   14a38:	sub	r0, r2, r0
   14a3c:	str	r0, [r3, #16]
   14a40:	ldr	r0, [r4]
   14a44:	ldr	r3, [r4, #76]	; 0x4c
   14a48:	ldr	r2, [r4, #32]
   14a4c:	sub	r0, r0, r3
   14a50:	mov	r3, #0
   14a54:	str	r0, [r2, #20]
   14a58:	ldr	r0, [r4, #12]
   14a5c:	ldr	r2, [r4, #32]
   14a60:	str	r0, [r2, #24]
   14a64:	ldr	r0, [r4, #32]
   14a68:	ldrh	r2, [r4, #8]
   14a6c:	strh	r2, [r0, #28]
   14a70:	movw	r0, #15186	; 0x3b52
   14a74:	strh	r3, [r4, #8]
   14a78:	mov	r2, #3
   14a7c:	movt	r0, #12137	; 0x2f69
   14a80:	str	r0, [r4, #12]
   14a84:	ldr	r0, [r4, #32]
   14a88:	strh	r2, [r0, #14]
   14a8c:	ldrh	r2, [r0, #28]
   14a90:	ldr	r0, [r0, #16]
   14a94:	add	r7, r0, r2, lsl #1
   14a98:	add	r0, r7, r6, lsl #1
   14a9c:	add	r2, r0, #4
   14aa0:	ldr	r0, [r4, #56]	; 0x38
   14aa4:	cmp	r2, r0
   14aa8:	bls	14ac8 <flatcc_builder_start_table@@Base+0xd4>
   14aac:	ldr	r0, [r4, #40]	; 0x28
   14ab0:	ldr	ip, [r4, #48]	; 0x30
   14ab4:	str	r3, [sp]
   14ab8:	mov	r3, #1
   14abc:	blx	ip
   14ac0:	cmp	r0, #0
   14ac4:	bne	14b6c <flatcc_builder_start_table@@Base+0x178>
   14ac8:	ldr	r0, [r4, #52]	; 0x34
   14acc:	adds	r0, r0, r7
   14ad0:	str	r0, [r4, #4]
   14ad4:	beq	14a1c <flatcc_builder_start_table@@Base+0x28>
   14ad8:	add	r0, r0, #4
   14adc:	lsl	r1, r6, #1
   14ae0:	str	r0, [r4, #4]
   14ae4:	ldr	r0, [r4, #32]
   14ae8:	ldr	r3, [r4, #80]	; 0x50
   14aec:	ldr	r6, [r0, #20]
   14af0:	orr	r0, r1, #1
   14af4:	add	r2, r6, r0
   14af8:	cmp	r2, r3
   14afc:	bls	14b24 <flatcc_builder_start_table@@Base+0x130>
   14b00:	ldr	r0, [r4, #40]	; 0x28
   14b04:	ldr	r7, [r4, #48]	; 0x30
   14b08:	mov	r3, #3
   14b0c:	add	r1, r4, #76	; 0x4c
   14b10:	str	r3, [sp]
   14b14:	mov	r3, #0
   14b18:	blx	r7
   14b1c:	cmp	r0, #0
   14b20:	bne	14b6c <flatcc_builder_start_table@@Base+0x178>
   14b24:	ldr	r0, [r4, #76]	; 0x4c
   14b28:	adds	r0, r0, r6
   14b2c:	str	r0, [r4]
   14b30:	beq	14a1c <flatcc_builder_start_table@@Base+0x28>
   14b34:	ldr	r0, [r4, #28]
   14b38:	ldr	r2, [r4, #60]	; 0x3c
   14b3c:	ldr	r3, [r4, #64]	; 0x40
   14b40:	ldr	r1, [r4, #32]
   14b44:	mov	r5, #0
   14b48:	add	r2, r2, r0
   14b4c:	sub	r0, r3, r0
   14b50:	str	r2, [r4, #16]
   14b54:	movw	r2, #65532	; 0xfffc
   14b58:	cmp	r0, r2
   14b5c:	movcs	r0, r2
   14b60:	str	r0, [r4, #24]
   14b64:	str	r2, [r1, #4]
   14b68:	b	14a1c <flatcc_builder_start_table@@Base+0x28>
   14b6c:	movw	r0, #35704	; 0x8b78
   14b70:	movw	r1, #31186	; 0x79d2
   14b74:	movw	r3, #35250	; 0x89b2
   14b78:	mov	r2, #308	; 0x134
   14b7c:	movt	r0, #1
   14b80:	movt	r1, #1
   14b84:	movt	r3, #1
   14b88:	bl	1249c <__assert_fail@plt>

00014b8c <flatcc_builder_create_vtable@@Base>:
   14b8c:	push	{r4, r5, fp, lr}
   14b90:	add	fp, sp, #8
   14b94:	sub	sp, sp, #80	; 0x50
   14b98:	mov	r3, r2
   14b9c:	mov	r2, #0
   14ba0:	mov	r4, r0
   14ba4:	cmp	r3, #0
   14ba8:	str	r2, [sp, #12]
   14bac:	str	r2, [sp, #8]
   14bb0:	movne	r2, #1
   14bb4:	strne	r1, [sp, #16]
   14bb8:	strne	r3, [sp, #8]
   14bbc:	strne	r3, [sp, #20]
   14bc0:	strne	r2, [sp, #12]
   14bc4:	ldr	r0, [r4, #152]	; 0x98
   14bc8:	cmp	r0, #0
   14bcc:	bne	14bdc <flatcc_builder_create_vtable@@Base+0x50>
   14bd0:	ldr	r0, [r4, #180]	; 0xb4
   14bd4:	cmp	r0, #0
   14bd8:	beq	14c2c <flatcc_builder_create_vtable@@Base+0xa0>
   14bdc:	cmp	r3, #0
   14be0:	beq	14c6c <flatcc_builder_create_vtable@@Base+0xe0>
   14be4:	ldr	r0, [r4, #136]	; 0x88
   14be8:	ldr	ip, [r4, #44]	; 0x2c
   14bec:	add	r1, sp, #8
   14bf0:	add	r1, r1, #8
   14bf4:	sub	r5, r0, r3
   14bf8:	ldr	r0, [r4, #36]	; 0x24
   14bfc:	str	r3, [sp]
   14c00:	mov	r3, r5
   14c04:	blx	ip
   14c08:	cmp	r0, #0
   14c0c:	bne	14c8c <flatcc_builder_create_vtable@@Base+0x100>
   14c10:	cmp	r5, #0
   14c14:	str	r5, [r4, #136]	; 0x88
   14c18:	beq	14c24 <flatcc_builder_create_vtable@@Base+0x98>
   14c1c:	add	r0, r5, #1
   14c20:	b	14c64 <flatcc_builder_create_vtable@@Base+0xd8>
   14c24:	mov	r0, #0
   14c28:	b	14c64 <flatcc_builder_create_vtable@@Base+0xd8>
   14c2c:	ldr	r5, [r4, #140]	; 0x8c
   14c30:	ldr	r0, [r4, #36]	; 0x24
   14c34:	ldr	ip, [r4, #44]	; 0x2c
   14c38:	add	r1, r5, r3
   14c3c:	str	r1, [r4, #140]	; 0x8c
   14c40:	add	r1, sp, #8
   14c44:	str	r3, [sp]
   14c48:	mov	r3, r5
   14c4c:	add	r1, r1, #8
   14c50:	blx	ip
   14c54:	cmp	r0, #0
   14c58:	bne	14cac <flatcc_builder_create_vtable@@Base+0x120>
   14c5c:	adds	r0, r5, #1
   14c60:	moveq	r0, #0
   14c64:	sub	sp, fp, #8
   14c68:	pop	{r4, r5, fp, pc}
   14c6c:	movw	r0, #35704	; 0x8b78
   14c70:	movw	r1, #31186	; 0x79d2
   14c74:	movw	r3, #35383	; 0x8a37
   14c78:	movw	r2, #647	; 0x287
   14c7c:	movt	r0, #1
   14c80:	movt	r1, #1
   14c84:	movt	r3, #1
   14c88:	bl	1249c <__assert_fail@plt>
   14c8c:	movw	r0, #35704	; 0x8b78
   14c90:	movw	r1, #31186	; 0x79d2
   14c94:	movw	r3, #35383	; 0x8a37
   14c98:	movw	r2, #651	; 0x28b
   14c9c:	movt	r0, #1
   14ca0:	movt	r1, #1
   14ca4:	movt	r3, #1
   14ca8:	bl	1249c <__assert_fail@plt>
   14cac:	movw	r0, #35704	; 0x8b78
   14cb0:	movw	r1, #31186	; 0x79d2
   14cb4:	movw	r3, #35571	; 0x8af3
   14cb8:	movw	r2, #677	; 0x2a5
   14cbc:	movt	r0, #1
   14cc0:	movt	r1, #1
   14cc4:	movt	r3, #1
   14cc8:	bl	1249c <__assert_fail@plt>

00014ccc <flatcc_builder_create_cached_vtable@@Base>:
   14ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cd0:	add	fp, sp, #28
   14cd4:	sub	sp, sp, #20
   14cd8:	mov	sl, r0
   14cdc:	ldr	r0, [r0, #116]	; 0x74
   14ce0:	mov	r8, r3
   14ce4:	mov	r5, r2
   14ce8:	str	r1, [sp, #16]
   14cec:	cmp	r0, #0
   14cf0:	beq	14d94 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14cf4:	ldr	r1, [sl, #92]	; 0x5c
   14cf8:	rsb	r0, r0, #32
   14cfc:	lsr	r0, r8, r0
   14d00:	add	r6, r1, r0, lsl #2
   14d04:	cmp	r6, #0
   14d08:	beq	14e58 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   14d0c:	ldr	r7, [r6]
   14d10:	str	r6, [sp, #12]
   14d14:	cmp	r7, #0
   14d18:	beq	14e60 <flatcc_builder_create_cached_vtable@@Base+0x194>
   14d1c:	ldr	r4, [sl, #68]	; 0x44
   14d20:	ldr	r8, [sl, #100]	; 0x64
   14d24:	mov	r0, #0
   14d28:	str	r0, [sp, #8]
   14d2c:	add	r9, r8, r7
   14d30:	mov	r1, r4
   14d34:	ldr	r0, [r9, #8]
   14d38:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14d3c:	cmp	r0, r5
   14d40:	bne	14d58 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   14d44:	ldr	r0, [sp, #16]
   14d48:	mov	r2, r5
   14d4c:	bl	12400 <memcmp@plt>
   14d50:	cmp	r0, #0
   14d54:	beq	14d6c <flatcc_builder_create_cached_vtable@@Base+0xa0>
   14d58:	ldr	r7, [r9, #12]!
   14d5c:	cmp	r7, #0
   14d60:	mov	r6, r9
   14d64:	bne	14d2c <flatcc_builder_create_cached_vtable@@Base+0x60>
   14d68:	b	14e50 <flatcc_builder_create_cached_vtable@@Base+0x184>
   14d6c:	ldr	r0, [sl, #152]	; 0x98
   14d70:	ldr	r1, [r9, #4]
   14d74:	cmp	r1, r0
   14d78:	beq	14fc4 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14d7c:	mov	r6, r9
   14d80:	mov	r0, r9
   14d84:	ldr	r7, [r6, #12]!
   14d88:	cmp	r7, #0
   14d8c:	bne	14d28 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14d90:	b	14e64 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14d94:	ldr	r0, [sl, #124]	; 0x7c
   14d98:	cmp	r0, #0
   14d9c:	bne	15010 <flatcc_builder_create_cached_vtable@@Base+0x344>
   14da0:	ldr	r0, [sl, #104]	; 0x68
   14da4:	add	r7, sl, #100	; 0x64
   14da8:	cmp	r0, #15
   14dac:	bhi	14dd8 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   14db0:	ldr	r0, [sl, #40]	; 0x28
   14db4:	ldr	r6, [sl, #48]	; 0x30
   14db8:	mov	r1, #6
   14dbc:	mov	r2, #16
   14dc0:	mov	r3, #0
   14dc4:	str	r1, [sp]
   14dc8:	mov	r1, r7
   14dcc:	blx	r6
   14dd0:	cmp	r0, #0
   14dd4:	bne	14ff0 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14dd8:	ldr	r0, [r7]
   14ddc:	mov	r7, #0
   14de0:	cmp	r0, #0
   14de4:	beq	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14de8:	mov	r0, #16
   14dec:	mov	r2, #5
   14df0:	add	r1, sl, #92	; 0x5c
   14df4:	mov	r3, #1
   14df8:	mov	r4, #256	; 0x100
   14dfc:	str	r0, [sl, #124]	; 0x7c
   14e00:	ldr	r0, [sl, #40]	; 0x28
   14e04:	ldr	r6, [sl, #48]	; 0x30
   14e08:	str	r2, [sp]
   14e0c:	mov	r2, #256	; 0x100
   14e10:	blx	r6
   14e14:	cmp	r0, #0
   14e18:	bne	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14e1c:	ldr	r0, [sl, #96]	; 0x60
   14e20:	mov	r1, r4
   14e24:	lsl	r4, r4, #1
   14e28:	cmp	r0, r1, lsl #1
   14e2c:	bcs	14e20 <flatcc_builder_create_cached_vtable@@Base+0x154>
   14e30:	lsr	r1, r1, #2
   14e34:	mvn	r0, #0
   14e38:	mov	r2, #1
   14e3c:	add	r0, r0, #1
   14e40:	cmp	r1, r2, lsl r0
   14e44:	bhi	14e3c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14e48:	str	r0, [sl, #116]	; 0x74
   14e4c:	b	14cf4 <flatcc_builder_create_cached_vtable@@Base+0x28>
   14e50:	ldr	r9, [sp, #8]
   14e54:	b	14e64 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14e58:	mov	r7, #0
   14e5c:	b	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14e60:	mov	r9, #0
   14e64:	ldr	r4, [sl, #124]	; 0x7c
   14e68:	ldr	r0, [sl, #104]	; 0x68
   14e6c:	add	r7, sl, #100	; 0x64
   14e70:	add	r2, r4, #16
   14e74:	cmp	r2, r0
   14e78:	bls	14ea0 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14e7c:	ldr	r0, [sl, #40]	; 0x28
   14e80:	ldr	r6, [sl, #48]	; 0x30
   14e84:	mov	r1, #6
   14e88:	mov	r3, #0
   14e8c:	str	r1, [sp]
   14e90:	mov	r1, r7
   14e94:	blx	r6
   14e98:	cmp	r0, #0
   14e9c:	bne	14ff0 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14ea0:	ldr	r0, [r7]
   14ea4:	mov	r7, #0
   14ea8:	adds	r4, r0, r4
   14eac:	beq	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14eb0:	ldr	r0, [sl, #124]	; 0x7c
   14eb4:	ldr	r1, [sl, #152]	; 0x98
   14eb8:	add	r2, r0, #16
   14ebc:	str	r2, [sl, #124]	; 0x7c
   14ec0:	ldr	r2, [sp, #12]
   14ec4:	str	r1, [r4, #4]
   14ec8:	ldr	r1, [r2]
   14ecc:	str	r1, [r4, #12]
   14ed0:	ldr	r1, [sp, #16]
   14ed4:	str	r0, [r2]
   14ed8:	mov	r0, sl
   14edc:	mov	r2, r5
   14ee0:	bl	14b8c <flatcc_builder_create_vtable@@Base>
   14ee4:	cmp	r0, #0
   14ee8:	str	r0, [r4]
   14eec:	beq	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14ef0:	cmp	r9, #0
   14ef4:	beq	14f10 <flatcc_builder_create_cached_vtable@@Base+0x244>
   14ef8:	ldr	r0, [r9, #8]
   14efc:	str	r0, [r4, #8]
   14f00:	ldr	r7, [r4]
   14f04:	mov	r0, r7
   14f08:	sub	sp, fp, #28
   14f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f10:	ldr	r6, [sl, #120]	; 0x78
   14f14:	ldr	r0, [sl, #172]	; 0xac
   14f18:	add	r2, r6, r5
   14f1c:	cmp	r0, #0
   14f20:	beq	14f5c <flatcc_builder_create_cached_vtable@@Base+0x290>
   14f24:	cmp	r0, r2
   14f28:	bcs	14f5c <flatcc_builder_create_cached_vtable@@Base+0x290>
   14f2c:	ldr	r0, [sl, #116]	; 0x74
   14f30:	cmp	r0, #0
   14f34:	beq	14f00 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14f38:	ldr	r0, [sl, #92]	; 0x5c
   14f3c:	ldr	r2, [sl, #96]	; 0x60
   14f40:	mov	r1, #0
   14f44:	mov	r5, #0
   14f48:	bl	1246c <memset@plt>
   14f4c:	mov	r0, #16
   14f50:	str	r5, [sl, #120]	; 0x78
   14f54:	str	r0, [sl, #124]	; 0x7c
   14f58:	b	14f00 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14f5c:	ldr	r0, [sl, #72]	; 0x48
   14f60:	add	r7, sl, #68	; 0x44
   14f64:	cmp	r2, r0
   14f68:	bls	14f90 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   14f6c:	ldr	r0, [sl, #40]	; 0x28
   14f70:	ldr	ip, [sl, #48]	; 0x30
   14f74:	mov	r1, #2
   14f78:	mov	r3, #0
   14f7c:	str	r1, [sp]
   14f80:	mov	r1, r7
   14f84:	blx	ip
   14f88:	cmp	r0, #0
   14f8c:	bne	14ff0 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14f90:	ldr	r0, [r7]
   14f94:	adds	r0, r0, r6
   14f98:	beq	14fbc <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   14f9c:	ldr	r1, [sl, #120]	; 0x78
   14fa0:	mov	r2, r5
   14fa4:	str	r1, [r4, #8]
   14fa8:	add	r1, r1, r5
   14fac:	str	r1, [sl, #120]	; 0x78
   14fb0:	ldr	r1, [sp, #16]
   14fb4:	bl	123e8 <memcpy@plt>
   14fb8:	b	14f00 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14fbc:	mvn	r7, #0
   14fc0:	b	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14fc4:	ldr	r0, [sp, #12]
   14fc8:	cmp	r6, r0
   14fcc:	beq	14fe8 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   14fd0:	mov	r1, r0
   14fd4:	ldr	r0, [r9, #12]
   14fd8:	str	r0, [r6]
   14fdc:	ldr	r0, [r1]
   14fe0:	str	r0, [r9, #12]
   14fe4:	str	r7, [r1]
   14fe8:	ldr	r7, [r9]
   14fec:	b	14f04 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14ff0:	movw	r0, #35704	; 0x8b78
   14ff4:	movw	r1, #31186	; 0x79d2
   14ff8:	movw	r3, #35250	; 0x89b2
   14ffc:	mov	r2, #308	; 0x134
   15000:	movt	r0, #1
   15004:	movt	r1, #1
   15008:	movt	r3, #1
   1500c:	bl	1249c <__assert_fail@plt>
   15010:	movw	r0, #35644	; 0x8b3c
   15014:	movw	r1, #31186	; 0x79d2
   15018:	movw	r3, #35659	; 0x8b4b
   1501c:	movw	r2, #342	; 0x156
   15020:	movt	r0, #1
   15024:	movt	r1, #1
   15028:	movt	r3, #1
   1502c:	bl	1249c <__assert_fail@plt>

00015030 <flatcc_builder_create_table@@Base>:
   15030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15034:	add	fp, sp, #24
   15038:	sub	sp, sp, #80	; 0x50
   1503c:	ldr	r5, [fp, #12]
   15040:	cmn	r5, #1
   15044:	ble	15198 <flatcc_builder_create_table@@Base+0x168>
   15048:	ldr	ip, [fp, #16]
   1504c:	tst	ip, #1
   15050:	beq	151b8 <flatcc_builder_create_table@@Base+0x188>
   15054:	mov	r8, r0
   15058:	ldrh	r0, [r0, #128]	; 0x80
   1505c:	cmp	r3, #4
   15060:	movls	r3, #4
   15064:	cmp	r0, r3
   15068:	strhcc	r3, [r8, #128]	; 0x80
   1506c:	sub	r3, r3, #1
   15070:	cmp	r5, #1
   15074:	ldr	r4, [r8, #136]	; 0x88
   15078:	sub	r0, r4, r2
   1507c:	and	r0, r0, r3
   15080:	add	r3, ip, r0
   15084:	mvn	ip, #3
   15088:	sub	r6, ip, r2
   1508c:	add	r4, r6, r4
   15090:	add	r6, r4, #1
   15094:	sub	r3, r6, r3
   15098:	str	r3, [fp, #-28]	; 0xffffffe4
   1509c:	blt	150c8 <flatcc_builder_create_table@@Base+0x98>
   150a0:	ldr	r3, [fp, #8]
   150a4:	sub	r6, r4, r0
   150a8:	sub	r4, ip, r6
   150ac:	ldrh	r6, [r3], #2
   150b0:	subs	r5, r5, #1
   150b4:	ldr	r7, [r6, r1]
   150b8:	add	r7, r4, r7
   150bc:	sub	r7, r7, r6
   150c0:	str	r7, [r6, r1]
   150c4:	bne	150ac <flatcc_builder_create_table@@Base+0x7c>
   150c8:	sub	r3, fp, #28
   150cc:	mov	r4, #4
   150d0:	cmp	r2, #0
   150d4:	str	r3, [sp, #12]
   150d8:	mov	r3, #1
   150dc:	str	r4, [sp, #4]
   150e0:	str	r4, [sp, #16]
   150e4:	str	r3, [sp, #8]
   150e8:	beq	15104 <flatcc_builder_create_table@@Base+0xd4>
   150ec:	mov	r3, #2
   150f0:	add	r4, r2, #4
   150f4:	str	r1, [sp, #20]
   150f8:	str	r2, [sp, #24]
   150fc:	str	r3, [sp, #8]
   15100:	str	r4, [sp, #4]
   15104:	cmp	r0, #0
   15108:	beq	15134 <flatcc_builder_create_table@@Base+0x104>
   1510c:	add	r1, sp, #4
   15110:	movw	r2, #30656	; 0x77c0
   15114:	add	r4, r4, r0
   15118:	add	r1, r1, r3, lsl #3
   1511c:	add	r3, r3, #1
   15120:	movt	r2, #1
   15124:	str	r4, [sp, #4]
   15128:	str	r2, [r1, #8]
   1512c:	str	r0, [r1, #12]
   15130:	str	r3, [sp, #8]
   15134:	cmp	r4, #0
   15138:	ble	151d8 <flatcc_builder_create_table@@Base+0x1a8>
   1513c:	ldr	r0, [r8, #136]	; 0x88
   15140:	ldr	r7, [r8, #44]	; 0x2c
   15144:	add	r1, sp, #4
   15148:	mov	r2, r3
   1514c:	add	r1, r1, #8
   15150:	sub	r5, r0, r4
   15154:	ldr	r0, [r8, #36]	; 0x24
   15158:	str	r4, [sp]
   1515c:	mov	r3, r5
   15160:	blx	r7
   15164:	cmp	r0, #0
   15168:	streq	r5, [r8, #136]	; 0x88
   1516c:	moveq	r0, r5
   15170:	subeq	sp, fp, #24
   15174:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15178:	movw	r0, #35704	; 0x8b78
   1517c:	movw	r1, #31186	; 0x79d2
   15180:	movw	r3, #35383	; 0x8a37
   15184:	movw	r2, #651	; 0x28b
   15188:	movt	r0, #1
   1518c:	movt	r1, #1
   15190:	movt	r3, #1
   15194:	bl	1249c <__assert_fail@plt>
   15198:	movw	r0, #33070	; 0x812e
   1519c:	movw	r1, #31186	; 0x79d2
   151a0:	movw	r3, #33088	; 0x8140
   151a4:	movw	r2, #1237	; 0x4d5
   151a8:	movt	r0, #1
   151ac:	movt	r1, #1
   151b0:	movt	r3, #1
   151b4:	bl	1249c <__assert_fail@plt>
   151b8:	movw	r0, #33244	; 0x81dc
   151bc:	movw	r1, #31186	; 0x79d2
   151c0:	movw	r3, #33088	; 0x8140
   151c4:	movw	r2, #1243	; 0x4db
   151c8:	movt	r0, #1
   151cc:	movt	r1, #1
   151d0:	movt	r3, #1
   151d4:	bl	1249c <__assert_fail@plt>
   151d8:	movw	r0, #35704	; 0x8b78
   151dc:	movw	r1, #31186	; 0x79d2
   151e0:	movw	r3, #35383	; 0x8a37
   151e4:	movw	r2, #647	; 0x287
   151e8:	movt	r0, #1
   151ec:	movt	r1, #1
   151f0:	movt	r3, #1
   151f4:	bl	1249c <__assert_fail@plt>

000151f8 <flatcc_builder_check_required_field@@Base>:
   151f8:	ldr	r2, [r0, #32]
   151fc:	ldrh	r2, [r2, #14]
   15200:	cmp	r2, #3
   15204:	bne	15234 <flatcc_builder_check_required_field@@Base+0x3c>
   15208:	ldrh	r3, [r0, #8]
   1520c:	mov	r2, #0
   15210:	cmp	r3, r1
   15214:	bls	1522c <flatcc_builder_check_required_field@@Base+0x34>
   15218:	ldr	r0, [r0, #4]
   1521c:	add	r0, r0, r1, lsl #1
   15220:	ldrh	r2, [r0]
   15224:	cmp	r2, #0
   15228:	movwne	r2, #1
   1522c:	mov	r0, r2
   15230:	bx	lr
   15234:	push	{fp, lr}
   15238:	mov	fp, sp
   1523c:	movw	r0, #33255	; 0x81e7
   15240:	movw	r1, #31186	; 0x79d2
   15244:	movw	r3, #33298	; 0x8212
   15248:	movw	r2, #1272	; 0x4f8
   1524c:	movt	r0, #1
   15250:	movt	r1, #1
   15254:	movt	r3, #1
   15258:	bl	1249c <__assert_fail@plt>

0001525c <flatcc_builder_check_union_field@@Base>:
   1525c:	mov	r2, r0
   15260:	ldr	r0, [r0, #32]
   15264:	ldrh	r0, [r0, #14]
   15268:	cmp	r0, #3
   1526c:	bne	152cc <flatcc_builder_check_union_field@@Base+0x70>
   15270:	cmp	r1, #0
   15274:	mov	r0, #0
   15278:	ldrhne	r3, [r2, #8]
   1527c:	cmpne	r3, r1
   15280:	bhi	15288 <flatcc_builder_check_union_field@@Base+0x2c>
   15284:	bx	lr
   15288:	ldr	r0, [r2, #4]
   1528c:	add	r0, r0, r1, lsl #1
   15290:	ldrh	r1, [r0, #-2]
   15294:	cmp	r1, #0
   15298:	beq	152bc <flatcc_builder_check_union_field@@Base+0x60>
   1529c:	ldr	r2, [r2, #16]
   152a0:	ldrh	r0, [r0]
   152a4:	ldrb	r1, [r2, r1]
   152a8:	cmp	r1, #0
   152ac:	beq	152c0 <flatcc_builder_check_union_field@@Base+0x64>
   152b0:	cmp	r0, #0
   152b4:	movwne	r0, #1
   152b8:	bx	lr
   152bc:	ldrh	r0, [r0]
   152c0:	clz	r0, r0
   152c4:	lsr	r0, r0, #5
   152c8:	bx	lr
   152cc:	push	{fp, lr}
   152d0:	mov	fp, sp
   152d4:	movw	r0, #33255	; 0x81e7
   152d8:	movw	r1, #31186	; 0x79d2
   152dc:	movw	r3, #33381	; 0x8265
   152e0:	movw	r2, #1279	; 0x4ff
   152e4:	movt	r0, #1
   152e8:	movt	r1, #1
   152ec:	movt	r3, #1
   152f0:	bl	1249c <__assert_fail@plt>

000152f4 <flatcc_builder_check_required@@Base>:
   152f4:	push	{fp, lr}
   152f8:	mov	fp, sp
   152fc:	mov	r3, r0
   15300:	ldr	r0, [r0, #32]
   15304:	ldrh	r0, [r0, #14]
   15308:	cmp	r0, #3
   1530c:	bne	15364 <flatcc_builder_check_required@@Base+0x70>
   15310:	ldrh	ip, [r3, #8]
   15314:	mov	r0, #0
   15318:	cmp	ip, r2
   1531c:	movge	r0, #1
   15320:	cmpge	r2, #1
   15324:	bge	1532c <flatcc_builder_check_required@@Base+0x38>
   15328:	pop	{fp, pc}
   1532c:	ldr	ip, [r3, #4]
   15330:	mov	lr, #0
   15334:	b	15348 <flatcc_builder_check_required@@Base+0x54>
   15338:	add	lr, lr, #1
   1533c:	add	r1, r1, #2
   15340:	cmp	lr, r2
   15344:	popge	{fp, pc}
   15348:	ldrh	r3, [r1]
   1534c:	add	r3, ip, r3, lsl #1
   15350:	ldrh	r3, [r3]
   15354:	cmp	r3, #0
   15358:	bne	15338 <flatcc_builder_check_required@@Base+0x44>
   1535c:	mov	r0, #0
   15360:	pop	{fp, pc}
   15364:	movw	r0, #33255	; 0x81e7
   15368:	movw	r1, #31186	; 0x79d2
   1536c:	movw	r3, #33461	; 0x82b5
   15370:	movw	r2, #1297	; 0x511
   15374:	movt	r0, #1
   15378:	movt	r1, #1
   1537c:	movt	r3, #1
   15380:	bl	1249c <__assert_fail@plt>

00015384 <flatcc_builder_end_table@@Base>:
   15384:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15388:	add	fp, sp, #24
   1538c:	sub	sp, sp, #16
   15390:	mov	r4, r0
   15394:	ldr	r0, [r0, #32]
   15398:	ldrh	r0, [r0, #14]
   1539c:	cmp	r0, #3
   153a0:	bne	1551c <flatcc_builder_end_table@@Base+0x198>
   153a4:	ldrh	r0, [r4, #8]
   153a8:	ldr	r5, [r4, #4]
   153ac:	mov	r1, #4
   153b0:	movw	r2, #31153	; 0x79b1
   153b4:	movt	r2, #40503	; 0x9e37
   153b8:	add	r0, r1, r0, lsl #1
   153bc:	strh	r0, [r5, #-4]!
   153c0:	ldrh	r1, [r4, #20]
   153c4:	uxth	r6, r0
   153c8:	add	r1, r1, #4
   153cc:	strh	r1, [r5, #2]
   153d0:	uxth	r1, r1
   153d4:	ldr	r0, [r4, #12]
   153d8:	eor	r0, r0, r6
   153dc:	mul	r0, r0, r2
   153e0:	eor	r0, r0, r1
   153e4:	mov	r1, r5
   153e8:	mul	r3, r0, r2
   153ec:	mov	r0, r4
   153f0:	mov	r2, r6
   153f4:	str	r3, [r4, #12]
   153f8:	bl	14ccc <flatcc_builder_create_cached_vtable@@Base>
   153fc:	cmp	r0, #0
   15400:	beq	1550c <flatcc_builder_end_table@@Base+0x188>
   15404:	mov	r7, r0
   15408:	mov	r0, r5
   1540c:	mov	r1, #0
   15410:	mov	r2, r6
   15414:	mov	r8, #0
   15418:	bl	1246c <memset@plt>
   1541c:	ldr	r5, [r4, #32]
   15420:	ldr	r0, [r4, #76]	; 0x4c
   15424:	ldr	r6, [r4]
   15428:	ldrh	r3, [r4, #130]	; 0x82
   1542c:	ldr	r1, [r4, #16]
   15430:	ldr	r2, [r4, #20]
   15434:	ldr	r5, [r5, #20]
   15438:	add	r0, r0, r5
   1543c:	sub	r6, r6, r0
   15440:	asr	r6, r6, #1
   15444:	stm	sp, {r0, r6, r7}
   15448:	mov	r0, r4
   1544c:	bl	15030 <flatcc_builder_create_table@@Base>
   15450:	cmp	r0, #0
   15454:	beq	15510 <flatcc_builder_end_table@@Base+0x18c>
   15458:	ldr	r1, [r4, #32]
   1545c:	mov	r5, r0
   15460:	ldr	r0, [r4, #16]
   15464:	ldr	r2, [r4, #20]
   15468:	ldr	r3, [r4, #52]	; 0x34
   1546c:	ldr	r7, [r1, #24]
   15470:	str	r7, [r4, #12]
   15474:	ldrh	r7, [r1, #28]
   15478:	strh	r7, [r4, #8]
   1547c:	ldr	r7, [r1, #16]
   15480:	add	r3, r3, r7
   15484:	str	r3, [r4, #4]
   15488:	ldr	r3, [r4, #76]	; 0x4c
   1548c:	ldr	r1, [r1, #20]
   15490:	add	r1, r3, r1
   15494:	str	r1, [r4]
   15498:	mov	r1, #0
   1549c:	bl	1246c <memset@plt>
   154a0:	ldr	r0, [r4, #32]
   154a4:	ldr	r1, [r4, #60]	; 0x3c
   154a8:	ldr	r2, [r4, #64]	; 0x40
   154ac:	mov	r8, r5
   154b0:	ldr	r3, [r0, #8]
   154b4:	str	r3, [r4, #20]
   154b8:	ldr	r3, [r0]
   154bc:	str	r3, [r4, #28]
   154c0:	add	r1, r1, r3
   154c4:	ldr	r7, [r0, #4]
   154c8:	str	r1, [r4, #16]
   154cc:	sub	r1, r2, r3
   154d0:	cmp	r1, r7
   154d4:	movhi	r1, r7
   154d8:	str	r1, [r4, #24]
   154dc:	ldrh	r1, [r4, #130]	; 0x82
   154e0:	ldrh	r2, [r4, #128]	; 0x80
   154e4:	cmp	r2, r1
   154e8:	strhcc	r1, [r4, #128]	; 0x80
   154ec:	ldrh	r1, [r0, #12]
   154f0:	sub	r0, r0, #36	; 0x24
   154f4:	str	r0, [r4, #32]
   154f8:	strh	r1, [r4, #130]	; 0x82
   154fc:	ldr	r0, [r4, #156]	; 0x9c
   15500:	sub	r0, r0, #1
   15504:	str	r0, [r4, #156]	; 0x9c
   15508:	b	15510 <flatcc_builder_end_table@@Base+0x18c>
   1550c:	mov	r8, #0
   15510:	mov	r0, r8
   15514:	sub	sp, fp, #24
   15518:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1551c:	movw	r0, #33255	; 0x81e7
   15520:	movw	r1, #31186	; 0x79d2
   15524:	movw	r3, #33551	; 0x830f
   15528:	movw	r2, #1317	; 0x525
   1552c:	movt	r0, #1
   15530:	movt	r1, #1
   15534:	movt	r3, #1
   15538:	bl	1249c <__assert_fail@plt>

0001553c <flatcc_builder_create_vector@@Base>:
   1553c:	push	{r4, r5, r6, r7, fp, lr}
   15540:	add	fp, sp, #16
   15544:	sub	sp, sp, #80	; 0x50
   15548:	mov	r7, r0
   1554c:	ldr	r0, [fp, #12]
   15550:	cmp	r2, r0
   15554:	bhi	15654 <flatcc_builder_create_vector@@Base+0x118>
   15558:	ldr	r0, [fp, #8]
   1555c:	mov	r4, r2
   15560:	ldrh	r2, [r7, #128]	; 0x80
   15564:	mov	r5, #4
   15568:	cmp	r0, #4
   1556c:	movls	r0, r5
   15570:	cmp	r2, r0
   15574:	sub	r2, fp, #20
   15578:	strhcc	r0, [r7, #128]	; 0x80
   1557c:	str	r4, [fp, #-20]	; 0xffffffec
   15580:	sub	r0, r0, #1
   15584:	ldr	ip, [r7, #136]	; 0x88
   15588:	str	r2, [sp, #12]
   1558c:	mov	r2, #1
   15590:	str	r5, [sp, #4]
   15594:	str	r5, [sp, #16]
   15598:	str	r2, [sp, #8]
   1559c:	mls	r6, r3, r4, ip
   155a0:	mul	r3, r3, r4
   155a4:	and	r0, r6, r0
   155a8:	cmp	r3, #0
   155ac:	beq	155c8 <flatcc_builder_create_vector@@Base+0x8c>
   155b0:	mov	r2, #2
   155b4:	add	r5, r3, #4
   155b8:	str	r1, [sp, #20]
   155bc:	str	r3, [sp, #24]
   155c0:	str	r2, [sp, #8]
   155c4:	str	r5, [sp, #4]
   155c8:	cmp	r0, #0
   155cc:	beq	155f8 <flatcc_builder_create_vector@@Base+0xbc>
   155d0:	add	r1, sp, #4
   155d4:	movw	r3, #30656	; 0x77c0
   155d8:	add	r5, r5, r0
   155dc:	add	r1, r1, r2, lsl #3
   155e0:	add	r2, r2, #1
   155e4:	movt	r3, #1
   155e8:	str	r5, [sp, #4]
   155ec:	str	r3, [r1, #8]
   155f0:	str	r0, [r1, #12]
   155f4:	str	r2, [sp, #8]
   155f8:	cmp	r5, #0
   155fc:	ble	15674 <flatcc_builder_create_vector@@Base+0x138>
   15600:	ldr	r0, [r7, #36]	; 0x24
   15604:	ldr	r6, [r7, #44]	; 0x2c
   15608:	add	r1, sp, #4
   1560c:	sub	r4, ip, r5
   15610:	str	r5, [sp]
   15614:	add	r1, r1, #8
   15618:	mov	r3, r4
   1561c:	blx	r6
   15620:	cmp	r0, #0
   15624:	streq	r4, [r7, #136]	; 0x88
   15628:	moveq	r0, r4
   1562c:	subeq	sp, fp, #16
   15630:	popeq	{r4, r5, r6, r7, fp, pc}
   15634:	movw	r0, #35704	; 0x8b78
   15638:	movw	r1, #31186	; 0x79d2
   1563c:	movw	r3, #35383	; 0x8a37
   15640:	movw	r2, #651	; 0x28b
   15644:	movt	r0, #1
   15648:	movt	r1, #1
   1564c:	movt	r3, #1
   15650:	bl	1249c <__assert_fail@plt>
   15654:	movw	r0, #33617	; 0x8351
   15658:	movw	r1, #31186	; 0x79d2
   1565c:	movw	r3, #33636	; 0x8364
   15660:	movw	r2, #1365	; 0x555
   15664:	movt	r0, #1
   15668:	movt	r1, #1
   1566c:	movt	r3, #1
   15670:	bl	1249c <__assert_fail@plt>
   15674:	movw	r0, #35704	; 0x8b78
   15678:	movw	r1, #31186	; 0x79d2
   1567c:	movw	r3, #35383	; 0x8a37
   15680:	movw	r2, #647	; 0x287
   15684:	movt	r0, #1
   15688:	movt	r1, #1
   1568c:	movt	r3, #1
   15690:	bl	1249c <__assert_fail@plt>

00015694 <flatcc_builder_end_vector@@Base>:
   15694:	push	{r4, r5, fp, lr}
   15698:	add	fp, sp, #8
   1569c:	sub	sp, sp, #8
   156a0:	mov	r4, r0
   156a4:	ldr	r0, [r0, #32]
   156a8:	ldrh	r1, [r0, #14]
   156ac:	cmp	r1, #4
   156b0:	bne	15764 <flatcc_builder_end_vector@@Base+0xd0>
   156b4:	ldr	r3, [r0, #16]
   156b8:	ldr	r2, [r0, #20]
   156bc:	ldr	r0, [r0, #24]
   156c0:	ldr	r1, [r4, #16]
   156c4:	ldrh	r5, [r4, #130]	; 0x82
   156c8:	str	r0, [sp, #4]
   156cc:	mov	r0, r4
   156d0:	str	r5, [sp]
   156d4:	bl	1553c <flatcc_builder_create_vector@@Base>
   156d8:	mov	r5, r0
   156dc:	cmp	r0, #0
   156e0:	beq	15758 <flatcc_builder_end_vector@@Base+0xc4>
   156e4:	ldr	r0, [r4, #16]
   156e8:	ldr	r2, [r4, #20]
   156ec:	mov	r1, #0
   156f0:	bl	1246c <memset@plt>
   156f4:	ldr	r0, [r4, #32]
   156f8:	ldr	r1, [r4, #60]	; 0x3c
   156fc:	ldr	ip, [r4, #64]	; 0x40
   15700:	ldr	r3, [r0, #8]
   15704:	str	r3, [r4, #20]
   15708:	ldr	r3, [r0]
   1570c:	str	r3, [r4, #28]
   15710:	add	r1, r1, r3
   15714:	ldr	r2, [r0, #4]
   15718:	str	r1, [r4, #16]
   1571c:	sub	r1, ip, r3
   15720:	cmp	r1, r2
   15724:	movhi	r1, r2
   15728:	str	r1, [r4, #24]
   1572c:	ldrh	r1, [r4, #130]	; 0x82
   15730:	ldrh	r2, [r4, #128]	; 0x80
   15734:	cmp	r2, r1
   15738:	strhcc	r1, [r4, #128]	; 0x80
   1573c:	ldrh	r1, [r0, #12]
   15740:	sub	r0, r0, #36	; 0x24
   15744:	str	r0, [r4, #32]
   15748:	strh	r1, [r4, #130]	; 0x82
   1574c:	ldr	r0, [r4, #156]	; 0x9c
   15750:	sub	r0, r0, #1
   15754:	str	r0, [r4, #156]	; 0x9c
   15758:	mov	r0, r5
   1575c:	sub	sp, fp, #8
   15760:	pop	{r4, r5, fp, pc}
   15764:	movw	r0, #31989	; 0x7cf5
   15768:	movw	r1, #31186	; 0x79d2
   1576c:	movw	r3, #33754	; 0x83da
   15770:	movw	r2, #1400	; 0x578
   15774:	movt	r0, #1
   15778:	movt	r1, #1
   1577c:	movt	r3, #1
   15780:	bl	1249c <__assert_fail@plt>

00015784 <flatcc_builder_vector_count@@Base>:
   15784:	ldr	r0, [r0, #32]
   15788:	ldr	r0, [r0, #20]
   1578c:	bx	lr

00015790 <flatcc_builder_vector_edit@@Base>:
   15790:	ldr	r0, [r0, #16]
   15794:	bx	lr

00015798 <flatcc_builder_create_offset_vector_direct@@Base>:
   15798:	mov	r3, #0
   1579c:	b	157a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   157a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157a4:	add	fp, sp, #24
   157a8:	sub	sp, sp, #80	; 0x50
   157ac:	mov	r6, #0
   157b0:	cmn	r2, #-1073741823	; 0xc0000001
   157b4:	bhi	158f0 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   157b8:	mov	r8, r0
   157bc:	ldrh	r0, [r0, #128]	; 0x80
   157c0:	sub	r7, fp, #28
   157c4:	mov	r5, #4
   157c8:	mov	r4, #1
   157cc:	cmp	r0, #3
   157d0:	movls	r0, #4
   157d4:	strhls	r0, [r8, #128]	; 0x80
   157d8:	str	r2, [fp, #-28]	; 0xffffffe4
   157dc:	ldr	ip, [r8, #136]	; 0x88
   157e0:	str	r7, [sp, #12]
   157e4:	mov	r7, #0
   157e8:	str	r5, [sp, #4]
   157ec:	str	r5, [sp, #16]
   157f0:	str	r4, [sp, #8]
   157f4:	cmp	r7, r2, lsl #2
   157f8:	and	r6, ip, #3
   157fc:	beq	1581c <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   15800:	lsl	r7, r2, #2
   15804:	mov	r4, #2
   15808:	str	r1, [sp, #20]
   1580c:	add	r5, r7, #4
   15810:	str	r7, [sp, #24]
   15814:	str	r4, [sp, #8]
   15818:	str	r5, [sp, #4]
   1581c:	cmp	r6, #0
   15820:	beq	1584c <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   15824:	add	r7, sp, #4
   15828:	movw	r0, #30656	; 0x77c0
   1582c:	add	r5, r5, r6
   15830:	add	r7, r7, r4, lsl #3
   15834:	add	r4, r4, #1
   15838:	movt	r0, #1
   1583c:	str	r5, [sp, #4]
   15840:	str	r0, [r7, #8]
   15844:	str	r6, [r7, #12]
   15848:	str	r4, [sp, #8]
   1584c:	cmp	r2, #0
   15850:	beq	158b8 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15854:	mvn	r0, #3
   15858:	mov	r6, #0
   1585c:	sub	r0, r0, ip
   15860:	add	r0, r0, r5
   15864:	ldr	r7, [r1, r6, lsl #2]
   15868:	cmp	r7, #0
   1586c:	beq	15890 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   15870:	add	r7, r0, r7
   15874:	cmp	r3, #0
   15878:	str	r7, [r1, r6, lsl #2]
   1587c:	beq	158a4 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15880:	ldrb	r7, [r3, r6]
   15884:	cmp	r7, #0
   15888:	bne	158a4 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   1588c:	b	158fc <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15890:	cmp	r3, #0
   15894:	beq	1593c <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   15898:	ldrb	r7, [r3, r6]
   1589c:	cmp	r7, #0
   158a0:	bne	1591c <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   158a4:	add	r6, r6, #1
   158a8:	sub	r0, r0, #4
   158ac:	cmp	r6, r2
   158b0:	bcc	15864 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   158b4:	ldr	ip, [r8, #136]	; 0x88
   158b8:	cmp	r5, #0
   158bc:	ble	1595c <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   158c0:	ldr	r0, [r8, #36]	; 0x24
   158c4:	ldr	r7, [r8, #44]	; 0x2c
   158c8:	add	r1, sp, #4
   158cc:	sub	r6, ip, r5
   158d0:	mov	r2, r4
   158d4:	str	r5, [sp]
   158d8:	add	r1, r1, #8
   158dc:	mov	r3, r6
   158e0:	blx	r7
   158e4:	cmp	r0, #0
   158e8:	bne	1597c <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   158ec:	str	r6, [r8, #136]	; 0x88
   158f0:	mov	r0, r6
   158f4:	sub	sp, fp, #24
   158f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158fc:	movw	r0, #35692	; 0x8b6c
   15900:	movw	r1, #31186	; 0x79d2
   15904:	movw	r3, #35706	; 0x8b7a
   15908:	movw	r2, #1457	; 0x5b1
   1590c:	movt	r0, #1
   15910:	movt	r1, #1
   15914:	movt	r3, #1
   15918:	bl	1249c <__assert_fail@plt>
   1591c:	movw	r0, #35837	; 0x8bfd
   15920:	movw	r1, #31186	; 0x79d2
   15924:	movw	r3, #35706	; 0x8b7a
   15928:	movw	r2, #1461	; 0x5b5
   1592c:	movt	r0, #1
   15930:	movt	r1, #1
   15934:	movt	r3, #1
   15938:	bl	1249c <__assert_fail@plt>
   1593c:	movw	r0, #35704	; 0x8b78
   15940:	movw	r1, #31186	; 0x79d2
   15944:	movw	r3, #35706	; 0x8b7a
   15948:	movw	r2, #1463	; 0x5b7
   1594c:	movt	r0, #1
   15950:	movt	r1, #1
   15954:	movt	r3, #1
   15958:	bl	1249c <__assert_fail@plt>
   1595c:	movw	r0, #35704	; 0x8b78
   15960:	movw	r1, #31186	; 0x79d2
   15964:	movw	r3, #35383	; 0x8a37
   15968:	movw	r2, #647	; 0x287
   1596c:	movt	r0, #1
   15970:	movt	r1, #1
   15974:	movt	r3, #1
   15978:	bl	1249c <__assert_fail@plt>
   1597c:	movw	r0, #35704	; 0x8b78
   15980:	movw	r1, #31186	; 0x79d2
   15984:	movw	r3, #35383	; 0x8a37
   15988:	movw	r2, #651	; 0x28b
   1598c:	movt	r0, #1
   15990:	movt	r1, #1
   15994:	movt	r3, #1
   15998:	bl	1249c <__assert_fail@plt>

0001599c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1599c:	push	{r4, r5, fp, lr}
   159a0:	add	fp, sp, #8
   159a4:	mov	r4, r0
   159a8:	ldr	r0, [r0, #32]
   159ac:	mov	r3, r1
   159b0:	ldrh	r1, [r0, #14]
   159b4:	cmp	r1, #5
   159b8:	bne	15a54 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   159bc:	ldr	r2, [r0, #20]
   159c0:	ldr	r1, [r4, #16]
   159c4:	mov	r0, r4
   159c8:	bl	157a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   159cc:	mov	r5, r0
   159d0:	cmp	r0, #0
   159d4:	beq	15a4c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   159d8:	ldr	r0, [r4, #16]
   159dc:	ldr	r2, [r4, #20]
   159e0:	mov	r1, #0
   159e4:	bl	1246c <memset@plt>
   159e8:	ldr	r0, [r4, #32]
   159ec:	ldr	r1, [r4, #60]	; 0x3c
   159f0:	ldr	ip, [r4, #64]	; 0x40
   159f4:	ldr	r3, [r0, #8]
   159f8:	str	r3, [r4, #20]
   159fc:	ldr	r3, [r0]
   15a00:	str	r3, [r4, #28]
   15a04:	add	r1, r1, r3
   15a08:	ldr	r2, [r0, #4]
   15a0c:	str	r1, [r4, #16]
   15a10:	sub	r1, ip, r3
   15a14:	cmp	r1, r2
   15a18:	movhi	r1, r2
   15a1c:	str	r1, [r4, #24]
   15a20:	ldrh	r1, [r4, #130]	; 0x82
   15a24:	ldrh	r2, [r4, #128]	; 0x80
   15a28:	cmp	r2, r1
   15a2c:	strhcc	r1, [r4, #128]	; 0x80
   15a30:	ldrh	r1, [r0, #12]
   15a34:	sub	r0, r0, #36	; 0x24
   15a38:	str	r0, [r4, #32]
   15a3c:	strh	r1, [r4, #130]	; 0x82
   15a40:	ldr	r0, [r4, #156]	; 0x9c
   15a44:	sub	r0, r0, #1
   15a48:	str	r0, [r4, #156]	; 0x9c
   15a4c:	mov	r0, r5
   15a50:	pop	{r4, r5, fp, pc}
   15a54:	movw	r0, #32238	; 0x7dee
   15a58:	movw	r1, #31186	; 0x79d2
   15a5c:	movw	r3, #33895	; 0x8467
   15a60:	movw	r2, #1493	; 0x5d5
   15a64:	movt	r0, #1
   15a68:	movt	r1, #1
   15a6c:	movt	r3, #1
   15a70:	bl	1249c <__assert_fail@plt>

00015a74 <flatcc_builder_offset_vector_edit@@Base>:
   15a74:	ldr	r0, [r0, #16]
   15a78:	bx	lr

00015a7c <flatcc_builder_offset_vector_count@@Base>:
   15a7c:	ldr	r0, [r0, #32]
   15a80:	ldr	r0, [r0, #20]
   15a84:	bx	lr

00015a88 <flatcc_builder_table_add_union@@Base>:
   15a88:	push	{r4, r5, r6, r7, fp, lr}
   15a8c:	add	fp, sp, #16
   15a90:	mov	r5, r0
   15a94:	ldr	r0, [r0, #32]
   15a98:	ldrh	r0, [r0, #14]
   15a9c:	cmp	r0, #3
   15aa0:	bne	15b28 <flatcc_builder_table_add_union@@Base+0xa0>
   15aa4:	mov	r7, r3
   15aa8:	mov	r4, r2
   15aac:	mov	r6, r1
   15ab0:	cmp	r3, #0
   15ab4:	beq	15ac4 <flatcc_builder_table_add_union@@Base+0x3c>
   15ab8:	uxtb	r0, r4
   15abc:	cmp	r0, #0
   15ac0:	beq	15b48 <flatcc_builder_table_add_union@@Base+0xc0>
   15ac4:	cmp	r7, #0
   15ac8:	beq	15ae4 <flatcc_builder_table_add_union@@Base+0x5c>
   15acc:	mov	r0, r5
   15ad0:	mov	r1, r6
   15ad4:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   15ad8:	cmp	r0, #0
   15adc:	beq	15b68 <flatcc_builder_table_add_union@@Base+0xe0>
   15ae0:	str	r7, [r0]
   15ae4:	sub	r1, r6, #1
   15ae8:	mov	r0, r5
   15aec:	mov	r2, #1
   15af0:	mov	r3, #1
   15af4:	bl	15cc4 <flatcc_builder_table_add@@Base>
   15af8:	cmp	r0, #0
   15afc:	strbne	r4, [r0]
   15b00:	movne	r0, #0
   15b04:	popne	{r4, r5, r6, r7, fp, pc}
   15b08:	movw	r0, #34141	; 0x855d
   15b0c:	movw	r1, #31186	; 0x79d2
   15b10:	movw	r3, #34009	; 0x84d9
   15b14:	movw	r2, #1526	; 0x5f6
   15b18:	movt	r0, #1
   15b1c:	movt	r1, #1
   15b20:	movt	r3, #1
   15b24:	bl	1249c <__assert_fail@plt>
   15b28:	movw	r0, #33255	; 0x81e7
   15b2c:	movw	r1, #31186	; 0x79d2
   15b30:	movw	r3, #34009	; 0x84d9
   15b34:	movw	r2, #1518	; 0x5ee
   15b38:	movt	r0, #1
   15b3c:	movt	r1, #1
   15b40:	movt	r3, #1
   15b44:	bl	1249c <__assert_fail@plt>
   15b48:	movw	r0, #34097	; 0x8531
   15b4c:	movw	r1, #31186	; 0x79d2
   15b50:	movw	r3, #34009	; 0x84d9
   15b54:	movw	r2, #1519	; 0x5ef
   15b58:	movt	r0, #1
   15b5c:	movt	r1, #1
   15b60:	movt	r3, #1
   15b64:	bl	1249c <__assert_fail@plt>
   15b68:	movw	r0, #34131	; 0x8553
   15b6c:	movw	r1, #31186	; 0x79d2
   15b70:	movw	r3, #34009	; 0x84d9
   15b74:	movw	r2, #1522	; 0x5f2
   15b78:	movt	r0, #1
   15b7c:	movt	r1, #1
   15b80:	movt	r3, #1
   15b84:	bl	1249c <__assert_fail@plt>

00015b88 <flatcc_builder_table_add_offset@@Base>:
   15b88:	push	{r4, r5, r6, r7, fp, lr}
   15b8c:	add	fp, sp, #16
   15b90:	mov	r4, r0
   15b94:	ldr	r0, [r0, #32]
   15b98:	ldrh	r0, [r0, #14]
   15b9c:	cmp	r0, #3
   15ba0:	bne	15c64 <flatcc_builder_table_add_offset@@Base+0xdc>
   15ba4:	movw	r0, #32765	; 0x7ffd
   15ba8:	mov	r5, r1
   15bac:	cmp	r1, r0
   15bb0:	bcs	15c84 <flatcc_builder_table_add_offset@@Base+0xfc>
   15bb4:	ldr	r0, [r4, #4]
   15bb8:	add	r1, r0, r5, lsl #1
   15bbc:	ldrh	r1, [r1]
   15bc0:	cmp	r1, #0
   15bc4:	bne	15ca4 <flatcc_builder_table_add_offset@@Base+0x11c>
   15bc8:	ldr	r2, [r4, #20]
   15bcc:	ldr	r1, [r4, #12]
   15bd0:	ldr	r3, [r4, #24]
   15bd4:	add	r2, r2, #3
   15bd8:	eor	r1, r1, r5
   15bdc:	bic	r7, r2, #3
   15be0:	movw	r2, #31153	; 0x79b1
   15be4:	movt	r2, #40503	; 0x9e37
   15be8:	add	r6, r7, #4
   15bec:	mul	r1, r1, r2
   15bf0:	cmp	r6, r3
   15bf4:	str	r6, [r4, #20]
   15bf8:	eor	r1, r1, #4
   15bfc:	mul	r1, r1, r2
   15c00:	str	r1, [r4, #12]
   15c04:	bls	15c2c <flatcc_builder_table_add_offset@@Base+0xa4>
   15c08:	mov	r0, r4
   15c0c:	mov	r1, r6
   15c10:	movw	r2, #65532	; 0xfffc
   15c14:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   15c18:	mov	r1, r0
   15c1c:	mov	r0, #0
   15c20:	cmp	r1, #0
   15c24:	popne	{r4, r5, r6, r7, fp, pc}
   15c28:	ldr	r0, [r4, #4]
   15c2c:	uxth	r1, r5
   15c30:	add	r0, r0, r1, lsl #1
   15c34:	strh	r6, [r0]
   15c38:	ldrh	r0, [r4, #8]
   15c3c:	cmp	r0, r1
   15c40:	addls	r0, r5, #1
   15c44:	strhls	r0, [r4, #8]
   15c48:	ldr	r0, [r4]
   15c4c:	add	r1, r0, #2
   15c50:	str	r1, [r4]
   15c54:	strh	r7, [r0]
   15c58:	ldr	r0, [r4, #16]
   15c5c:	add	r0, r0, r7
   15c60:	pop	{r4, r5, r6, r7, fp, pc}
   15c64:	movw	r0, #33255	; 0x81e7
   15c68:	movw	r1, #31186	; 0x79d2
   15c6c:	movw	r3, #35035	; 0x88db
   15c70:	movw	r2, #1811	; 0x713
   15c74:	movt	r0, #1
   15c78:	movt	r1, #1
   15c7c:	movt	r3, #1
   15c80:	bl	1249c <__assert_fail@plt>
   15c84:	movw	r0, #34907	; 0x885b
   15c88:	movw	r1, #31186	; 0x79d2
   15c8c:	movw	r3, #35035	; 0x88db
   15c90:	movw	r2, #1812	; 0x714
   15c94:	movt	r0, #1
   15c98:	movt	r1, #1
   15c9c:	movt	r3, #1
   15ca0:	bl	1249c <__assert_fail@plt>
   15ca4:	movw	r0, #35704	; 0x8b78
   15ca8:	movw	r1, #31186	; 0x79d2
   15cac:	movw	r3, #35035	; 0x88db
   15cb0:	movw	r2, #1819	; 0x71b
   15cb4:	movt	r0, #1
   15cb8:	movt	r1, #1
   15cbc:	movt	r3, #1
   15cc0:	bl	1249c <__assert_fail@plt>

00015cc4 <flatcc_builder_table_add@@Base>:
   15cc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cc8:	add	fp, sp, #24
   15ccc:	mov	r4, r0
   15cd0:	ldr	r0, [r0, #32]
   15cd4:	ldrh	r0, [r0, #14]
   15cd8:	cmp	r0, #3
   15cdc:	bne	15da8 <flatcc_builder_table_add@@Base+0xe4>
   15ce0:	movw	r0, #32765	; 0x7ffd
   15ce4:	mov	r8, r1
   15ce8:	cmp	r1, r0
   15cec:	bcs	15dc8 <flatcc_builder_table_add@@Base+0x104>
   15cf0:	ldrh	r0, [r4, #130]	; 0x82
   15cf4:	cmp	r0, r3
   15cf8:	strhcc	r3, [r4, #130]	; 0x82
   15cfc:	ldr	r0, [r4, #4]
   15d00:	add	r1, r0, r8, lsl #1
   15d04:	ldrh	r1, [r1]
   15d08:	cmp	r1, #0
   15d0c:	bne	15de8 <flatcc_builder_table_add@@Base+0x124>
   15d10:	ldr	r1, [r4, #12]
   15d14:	movw	r7, #31153	; 0x79b1
   15d18:	ldr	r6, [r4, #20]
   15d1c:	ldr	r5, [r4, #24]
   15d20:	movt	r7, #40503	; 0x9e37
   15d24:	eor	r1, r1, r8
   15d28:	mul	r1, r1, r7
   15d2c:	eor	r1, r1, r2
   15d30:	mul	r1, r1, r7
   15d34:	str	r1, [r4, #12]
   15d38:	add	r1, r3, r6
   15d3c:	rsb	r3, r3, #0
   15d40:	sub	r1, r1, #1
   15d44:	and	r6, r1, r3
   15d48:	add	r1, r6, r2
   15d4c:	cmp	r1, r5
   15d50:	str	r1, [r4, #20]
   15d54:	bcc	15d7c <flatcc_builder_table_add@@Base+0xb8>
   15d58:	add	r1, r1, #1
   15d5c:	mov	r0, r4
   15d60:	movw	r2, #65532	; 0xfffc
   15d64:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   15d68:	mov	r1, r0
   15d6c:	mov	r0, #0
   15d70:	cmp	r1, #0
   15d74:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d78:	ldr	r0, [r4, #4]
   15d7c:	uxth	r1, r8
   15d80:	add	r2, r6, #4
   15d84:	add	r0, r0, r1, lsl #1
   15d88:	strh	r2, [r0]
   15d8c:	ldrh	r0, [r4, #8]
   15d90:	cmp	r0, r1
   15d94:	addls	r0, r8, #1
   15d98:	strhls	r0, [r4, #8]
   15d9c:	ldr	r0, [r4, #16]
   15da0:	add	r0, r0, r6
   15da4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15da8:	movw	r0, #33255	; 0x81e7
   15dac:	movw	r1, #31186	; 0x79d2
   15db0:	movw	r3, #34833	; 0x8811
   15db4:	movw	r2, #1773	; 0x6ed
   15db8:	movt	r0, #1
   15dbc:	movt	r1, #1
   15dc0:	movt	r3, #1
   15dc4:	bl	1249c <__assert_fail@plt>
   15dc8:	movw	r0, #34907	; 0x885b
   15dcc:	movw	r1, #31186	; 0x79d2
   15dd0:	movw	r3, #34833	; 0x8811
   15dd4:	movw	r2, #1774	; 0x6ee
   15dd8:	movt	r0, #1
   15ddc:	movt	r1, #1
   15de0:	movt	r3, #1
   15de4:	bl	1249c <__assert_fail@plt>
   15de8:	movw	r0, #35704	; 0x8b78
   15dec:	movw	r1, #31186	; 0x79d2
   15df0:	movw	r3, #34833	; 0x8811
   15df4:	movw	r2, #1784	; 0x6f8
   15df8:	movt	r0, #1
   15dfc:	movt	r1, #1
   15e00:	movt	r3, #1
   15e04:	bl	1249c <__assert_fail@plt>

00015e08 <flatcc_builder_table_add_union_vector@@Base>:
   15e08:	push	{r4, r5, r6, r7, fp, lr}
   15e0c:	add	fp, sp, #16
   15e10:	mov	r6, r0
   15e14:	ldr	r0, [r0, #32]
   15e18:	ldrh	r0, [r0, #14]
   15e1c:	cmp	r0, #3
   15e20:	bne	15e88 <flatcc_builder_table_add_union_vector@@Base+0x80>
   15e24:	clz	r0, r3
   15e28:	mov	r5, r1
   15e2c:	clz	r1, r2
   15e30:	mov	r4, r3
   15e34:	mov	r7, r2
   15e38:	lsr	r0, r0, #5
   15e3c:	lsr	r1, r1, #5
   15e40:	cmp	r1, r0
   15e44:	bne	15ea8 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15e48:	cmp	r7, #0
   15e4c:	beq	15e80 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15e50:	sub	r1, r5, #1
   15e54:	mov	r0, r6
   15e58:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   15e5c:	cmp	r0, #0
   15e60:	beq	15ec8 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   15e64:	str	r7, [r0]
   15e68:	mov	r0, r6
   15e6c:	mov	r1, r5
   15e70:	bl	15b88 <flatcc_builder_table_add_offset@@Base>
   15e74:	cmp	r0, #0
   15e78:	beq	15ee8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15e7c:	str	r4, [r0]
   15e80:	mov	r0, #0
   15e84:	pop	{r4, r5, r6, r7, fp, pc}
   15e88:	movw	r0, #33255	; 0x81e7
   15e8c:	movw	r1, #31186	; 0x79d2
   15e90:	movw	r3, #34153	; 0x8569
   15e94:	mov	r2, #1536	; 0x600
   15e98:	movt	r0, #1
   15e9c:	movt	r1, #1
   15ea0:	movt	r3, #1
   15ea4:	bl	1249c <__assert_fail@plt>
   15ea8:	movw	r0, #34252	; 0x85cc
   15eac:	movw	r1, #31186	; 0x79d2
   15eb0:	movw	r3, #34153	; 0x8569
   15eb4:	movw	r2, #1537	; 0x601
   15eb8:	movt	r0, #1
   15ebc:	movt	r1, #1
   15ec0:	movt	r3, #1
   15ec4:	bl	1249c <__assert_fail@plt>
   15ec8:	movw	r0, #34131	; 0x8553
   15ecc:	movw	r1, #31186	; 0x79d2
   15ed0:	movw	r3, #34153	; 0x8569
   15ed4:	movw	r2, #1540	; 0x604
   15ed8:	movt	r0, #1
   15edc:	movt	r1, #1
   15ee0:	movt	r3, #1
   15ee4:	bl	1249c <__assert_fail@plt>
   15ee8:	movw	r0, #34131	; 0x8553
   15eec:	movw	r1, #31186	; 0x79d2
   15ef0:	movw	r3, #34153	; 0x8569
   15ef4:	movw	r2, #1544	; 0x608
   15ef8:	movt	r0, #1
   15efc:	movt	r1, #1
   15f00:	movt	r3, #1
   15f04:	bl	1249c <__assert_fail@plt>

00015f08 <flatcc_builder_create_union_vector@@Base>:
   15f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f0c:	add	fp, sp, #28
   15f10:	sub	sp, sp, #20
   15f14:	mov	sl, r0
   15f18:	mov	r0, #0
   15f1c:	mov	r9, r3
   15f20:	mov	r7, r2
   15f24:	mov	r4, r1
   15f28:	str	r0, [sl]
   15f2c:	str	r0, [sl, #4]
   15f30:	mov	r0, r1
   15f34:	bl	146b4 <flatcc_builder_start_offset_vector@@Base>
   15f38:	cmp	r0, #0
   15f3c:	beq	15f48 <flatcc_builder_create_union_vector@@Base+0x40>
   15f40:	sub	sp, fp, #28
   15f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f48:	mov	r0, r4
   15f4c:	mov	r1, r9
   15f50:	bl	14070 <flatcc_builder_extend_offset_vector@@Base>
   15f54:	cmp	r0, #0
   15f58:	beq	15f40 <flatcc_builder_create_union_vector@@Base+0x38>
   15f5c:	ldr	r8, [r4, #20]
   15f60:	ldr	r1, [r4, #24]
   15f64:	add	r0, r8, r9
   15f68:	cmp	r0, r1
   15f6c:	str	r0, [r4, #20]
   15f70:	bcc	15f8c <flatcc_builder_create_union_vector@@Base+0x84>
   15f74:	add	r1, r0, #1
   15f78:	mov	r0, r4
   15f7c:	mvn	r2, #3
   15f80:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   15f84:	cmp	r0, #0
   15f88:	bne	15f40 <flatcc_builder_create_union_vector@@Base+0x38>
   15f8c:	ldr	r3, [r4, #16]
   15f90:	adds	r2, r3, r8
   15f94:	beq	15f40 <flatcc_builder_create_union_vector@@Base+0x38>
   15f98:	cmp	r9, #0
   15f9c:	beq	15fcc <flatcc_builder_create_union_vector@@Base+0xc4>
   15fa0:	add	r0, r7, #4
   15fa4:	mov	r1, r9
   15fa8:	mov	r7, r3
   15fac:	mov	r6, r2
   15fb0:	ldrb	r5, [r0, #-4]
   15fb4:	subs	r1, r1, #1
   15fb8:	strb	r5, [r6], #1
   15fbc:	ldr	r5, [r0]
   15fc0:	add	r0, r0, #8
   15fc4:	str	r5, [r7], #4
   15fc8:	bne	15fb0 <flatcc_builder_create_union_vector@@Base+0xa8>
   15fcc:	add	r0, sp, #8
   15fd0:	mov	r1, r4
   15fd4:	str	r9, [sp]
   15fd8:	bl	16060 <flatcc_builder_create_union_vector_direct@@Base>
   15fdc:	ldr	r0, [sp, #8]
   15fe0:	ldr	r1, [sp, #12]
   15fe4:	stm	sl, {r0, r1}
   15fe8:	mov	r1, #0
   15fec:	ldr	r0, [r4, #16]
   15ff0:	ldr	r2, [r4, #20]
   15ff4:	bl	1246c <memset@plt>
   15ff8:	ldr	r0, [r4, #32]
   15ffc:	ldr	r1, [r4, #60]	; 0x3c
   16000:	ldr	r2, [r4, #64]	; 0x40
   16004:	ldr	r3, [r0, #8]
   16008:	str	r3, [r4, #20]
   1600c:	ldr	r3, [r0]
   16010:	str	r3, [r4, #28]
   16014:	add	r1, r1, r3
   16018:	ldr	r7, [r0, #4]
   1601c:	str	r1, [r4, #16]
   16020:	sub	r1, r2, r3
   16024:	cmp	r1, r7
   16028:	movhi	r1, r7
   1602c:	str	r1, [r4, #24]
   16030:	ldrh	r1, [r4, #130]	; 0x82
   16034:	ldrh	r2, [r4, #128]	; 0x80
   16038:	cmp	r2, r1
   1603c:	strhcc	r1, [r4, #128]	; 0x80
   16040:	ldrh	r1, [r0, #12]
   16044:	sub	r0, r0, #36	; 0x24
   16048:	str	r0, [r4, #32]
   1604c:	strh	r1, [r4, #130]	; 0x82
   16050:	ldr	r0, [r4, #156]	; 0x9c
   16054:	sub	r0, r0, #1
   16058:	str	r0, [r4, #156]	; 0x9c
   1605c:	b	15f40 <flatcc_builder_create_union_vector@@Base+0x38>

00016060 <flatcc_builder_create_union_vector_direct@@Base>:
   16060:	push	{r4, r5, r6, r7, fp, lr}
   16064:	add	fp, sp, #16
   16068:	sub	sp, sp, #8
   1606c:	ldr	r7, [fp, #8]
   16070:	mov	r5, r2
   16074:	mov	r4, r0
   16078:	mov	r0, #0
   1607c:	mov	r6, r1
   16080:	str	r0, [r4]
   16084:	str	r0, [r4, #4]
   16088:	mov	r0, r1
   1608c:	mov	r1, r3
   16090:	mov	r3, r5
   16094:	mov	r2, r7
   16098:	bl	157a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1609c:	cmp	r0, #0
   160a0:	str	r0, [r4, #4]
   160a4:	beq	160d0 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   160a8:	mvn	r0, #0
   160ac:	mov	r1, #1
   160b0:	mov	r2, r7
   160b4:	mov	r3, #1
   160b8:	str	r1, [sp]
   160bc:	str	r0, [sp, #4]
   160c0:	mov	r0, r6
   160c4:	mov	r1, r5
   160c8:	bl	1553c <flatcc_builder_create_vector@@Base>
   160cc:	str	r0, [r4]
   160d0:	sub	sp, fp, #16
   160d4:	pop	{r4, r5, r6, r7, fp, pc}

000160d8 <flatcc_builder_start_union_vector@@Base>:
   160d8:	push	{r4, sl, fp, lr}
   160dc:	add	fp, sp, #8
   160e0:	mov	r1, #4
   160e4:	mov	r4, r0
   160e8:	bl	13a34 <flatcc_builder_start_buffer@@Base+0xbc>
   160ec:	mov	r1, r0
   160f0:	mvn	r0, #0
   160f4:	cmp	r1, #0
   160f8:	popne	{r4, sl, fp, pc}
   160fc:	ldr	r0, [r4, #32]
   16100:	mov	r1, #8
   16104:	mov	r2, #7
   16108:	str	r1, [r0, #16]
   1610c:	mov	r0, #0
   16110:	ldr	r1, [r4, #32]
   16114:	str	r0, [r1, #20]
   16118:	ldr	r1, [r4, #32]
   1611c:	strh	r2, [r1, #14]
   16120:	ldr	r2, [r4, #28]
   16124:	ldr	r3, [r4, #60]	; 0x3c
   16128:	ldr	ip, [r4, #64]	; 0x40
   1612c:	add	r3, r3, r2
   16130:	sub	r2, ip, r2
   16134:	str	r3, [r4, #16]
   16138:	mvn	r3, #3
   1613c:	cmn	r2, #4
   16140:	movcs	r2, r3
   16144:	str	r2, [r4, #24]
   16148:	str	r3, [r1, #4]
   1614c:	pop	{r4, sl, fp, pc}

00016150 <flatcc_builder_end_union_vector@@Base>:
   16150:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16154:	add	fp, sp, #24
   16158:	sub	sp, sp, #16
   1615c:	mov	r8, r0
   16160:	mov	r0, #0
   16164:	mov	r4, r1
   16168:	str	r0, [r8]
   1616c:	str	r0, [r8, #4]
   16170:	ldr	r0, [r1, #32]
   16174:	ldrh	r1, [r0, #14]
   16178:	cmp	r1, #7
   1617c:	bne	16294 <flatcc_builder_end_union_vector@@Base+0x144>
   16180:	ldr	r9, [r0, #20]
   16184:	ldr	r7, [r4, #20]
   16188:	ldr	r1, [r4, #24]
   1618c:	add	r0, r9, r9, lsl #2
   16190:	add	r0, r7, r0
   16194:	cmp	r0, r1
   16198:	str	r0, [r4, #20]
   1619c:	bcc	161b8 <flatcc_builder_end_union_vector@@Base+0x68>
   161a0:	add	r1, r0, #1
   161a4:	mov	r0, r4
   161a8:	mvn	r2, #3
   161ac:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   161b0:	cmp	r0, #0
   161b4:	bne	1628c <flatcc_builder_end_union_vector@@Base+0x13c>
   161b8:	ldr	r0, [r4, #16]
   161bc:	adds	r3, r0, r7
   161c0:	beq	1628c <flatcc_builder_end_union_vector@@Base+0x13c>
   161c4:	add	r2, r3, r9, lsl #2
   161c8:	cmp	r9, #0
   161cc:	beq	161fc <flatcc_builder_end_union_vector@@Base+0xac>
   161d0:	add	r0, r0, #4
   161d4:	mov	r1, r9
   161d8:	mov	r7, r3
   161dc:	mov	r5, r2
   161e0:	ldrb	r6, [r0, #-4]
   161e4:	subs	r1, r1, #1
   161e8:	strb	r6, [r5], #1
   161ec:	ldr	r6, [r0]
   161f0:	add	r0, r0, #8
   161f4:	str	r6, [r7], #4
   161f8:	bne	161e0 <flatcc_builder_end_union_vector@@Base+0x90>
   161fc:	add	r0, sp, #8
   16200:	mov	r1, r4
   16204:	str	r9, [sp]
   16208:	bl	16060 <flatcc_builder_create_union_vector_direct@@Base>
   1620c:	ldr	r0, [sp, #8]
   16210:	ldr	r1, [sp, #12]
   16214:	stm	r8, {r0, r1}
   16218:	mov	r1, #0
   1621c:	ldr	r0, [r4, #16]
   16220:	ldr	r2, [r4, #20]
   16224:	bl	1246c <memset@plt>
   16228:	ldr	r0, [r4, #32]
   1622c:	ldr	r1, [r4, #60]	; 0x3c
   16230:	ldr	r2, [r4, #64]	; 0x40
   16234:	ldr	r3, [r0, #8]
   16238:	str	r3, [r4, #20]
   1623c:	ldr	r3, [r0]
   16240:	str	r3, [r4, #28]
   16244:	add	r1, r1, r3
   16248:	ldr	r7, [r0, #4]
   1624c:	str	r1, [r4, #16]
   16250:	sub	r1, r2, r3
   16254:	cmp	r1, r7
   16258:	movhi	r1, r7
   1625c:	str	r1, [r4, #24]
   16260:	ldrh	r1, [r4, #130]	; 0x82
   16264:	ldrh	r2, [r4, #128]	; 0x80
   16268:	cmp	r2, r1
   1626c:	strhcc	r1, [r4, #128]	; 0x80
   16270:	ldrh	r1, [r0, #12]
   16274:	sub	r0, r0, #36	; 0x24
   16278:	str	r0, [r4, #32]
   1627c:	strh	r1, [r4, #130]	; 0x82
   16280:	ldr	r0, [r4, #156]	; 0x9c
   16284:	sub	r0, r0, #1
   16288:	str	r0, [r4, #156]	; 0x9c
   1628c:	sub	sp, fp, #24
   16290:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16294:	movw	r0, #34292	; 0x85f4
   16298:	movw	r1, #31186	; 0x79d2
   1629c:	movw	r3, #34342	; 0x8626
   162a0:	movw	r2, #1617	; 0x651
   162a4:	movt	r0, #1
   162a8:	movt	r1, #1
   162ac:	movt	r3, #1
   162b0:	bl	1249c <__assert_fail@plt>

000162b4 <flatcc_builder_union_vector_count@@Base>:
   162b4:	ldr	r0, [r0, #32]
   162b8:	ldr	r0, [r0, #20]
   162bc:	bx	lr

000162c0 <flatcc_builder_union_vector_edit@@Base>:
   162c0:	ldr	r0, [r0, #16]
   162c4:	bx	lr

000162c8 <flatcc_builder_extend_union_vector@@Base>:
   162c8:	push	{r4, r5, fp, lr}
   162cc:	add	fp, sp, #8
   162d0:	mov	r4, r0
   162d4:	ldr	r0, [r0, #32]
   162d8:	ldr	r2, [r0, #20]
   162dc:	adds	r2, r2, r1
   162e0:	cmpcc	r2, #536870912	; 0x20000000
   162e4:	bcc	16308 <flatcc_builder_extend_union_vector@@Base+0x40>
   162e8:	movw	r0, #35457	; 0x8a81
   162ec:	movw	r1, #31186	; 0x79d2
   162f0:	movw	r3, #35484	; 0x8a9c
   162f4:	mov	r2, #892	; 0x37c
   162f8:	movt	r0, #1
   162fc:	movt	r1, #1
   16300:	movt	r3, #1
   16304:	bl	1249c <__assert_fail@plt>
   16308:	str	r2, [r0, #20]
   1630c:	ldr	r5, [r4, #20]
   16310:	ldr	r2, [r4, #24]
   16314:	add	r0, r5, r1, lsl #3
   16318:	cmp	r0, r2
   1631c:	str	r0, [r4, #20]
   16320:	bcc	16344 <flatcc_builder_extend_union_vector@@Base+0x7c>
   16324:	add	r1, r0, #1
   16328:	mov	r0, r4
   1632c:	mvn	r2, #3
   16330:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   16334:	mov	r1, r0
   16338:	mov	r0, #0
   1633c:	cmp	r1, #0
   16340:	popne	{r4, r5, fp, pc}
   16344:	ldr	r0, [r4, #16]
   16348:	add	r0, r0, r5
   1634c:	pop	{r4, r5, fp, pc}

00016350 <flatcc_builder_truncate_union_vector@@Base>:
   16350:	push	{fp, lr}
   16354:	mov	fp, sp
   16358:	ldr	r2, [r0, #32]
   1635c:	ldrh	r3, [r2, #14]
   16360:	cmp	r3, #7
   16364:	bne	163ac <flatcc_builder_truncate_union_vector@@Base+0x5c>
   16368:	ldr	r3, [r2, #20]
   1636c:	cmp	r3, r1
   16370:	bcc	163cc <flatcc_builder_truncate_union_vector@@Base+0x7c>
   16374:	sub	r3, r3, r1
   16378:	str	r3, [r2, #20]
   1637c:	ldr	r2, [r0, #32]
   16380:	ldr	r3, [r0, #20]
   16384:	ldr	ip, [r0, #16]
   16388:	ldr	r2, [r2, #16]
   1638c:	mls	r3, r2, r1, r3
   16390:	mul	r2, r2, r1
   16394:	mov	r1, #0
   16398:	str	r3, [r0, #20]
   1639c:	add	r0, ip, r3
   163a0:	bl	1246c <memset@plt>
   163a4:	mov	r0, #0
   163a8:	pop	{fp, pc}
   163ac:	movw	r0, #34292	; 0x85f4
   163b0:	movw	r1, #31186	; 0x79d2
   163b4:	movw	r3, #34425	; 0x8679
   163b8:	movw	r2, #1665	; 0x681
   163bc:	movt	r0, #1
   163c0:	movt	r1, #1
   163c4:	movt	r3, #1
   163c8:	bl	1249c <__assert_fail@plt>
   163cc:	movw	r0, #32856	; 0x8058
   163d0:	movw	r1, #31186	; 0x79d2
   163d4:	movw	r3, #34425	; 0x8679
   163d8:	movw	r2, #1666	; 0x682
   163dc:	movt	r0, #1
   163e0:	movt	r1, #1
   163e4:	movt	r3, #1
   163e8:	bl	1249c <__assert_fail@plt>

000163ec <flatcc_builder_union_vector_push@@Base>:
   163ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163f0:	add	fp, sp, #24
   163f4:	mov	r7, r0
   163f8:	ldr	r0, [r0, #32]
   163fc:	mov	r5, r1
   16400:	ldrh	r1, [r0, #14]
   16404:	cmp	r1, #7
   16408:	bne	16470 <flatcc_builder_union_vector_push@@Base+0x84>
   1640c:	ldr	r1, [r0, #20]
   16410:	mov	r6, #0
   16414:	cmn	r1, #-536870911	; 0xe0000001
   16418:	beq	16468 <flatcc_builder_union_vector_push@@Base+0x7c>
   1641c:	add	r1, r1, #1
   16420:	mov	r8, r2
   16424:	str	r1, [r0, #20]
   16428:	ldr	r4, [r7, #20]
   1642c:	ldr	r0, [r7, #24]
   16430:	add	r1, r4, #8
   16434:	cmp	r1, r0
   16438:	str	r1, [r7, #20]
   1643c:	bcc	16458 <flatcc_builder_union_vector_push@@Base+0x6c>
   16440:	add	r1, r4, #9
   16444:	mov	r0, r7
   16448:	mvn	r2, #3
   1644c:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   16450:	cmp	r0, #0
   16454:	bne	16468 <flatcc_builder_union_vector_push@@Base+0x7c>
   16458:	ldr	r0, [r7, #16]
   1645c:	adds	r0, r0, r4
   16460:	movne	r6, r0
   16464:	stmne	r0, {r5, r8}
   16468:	mov	r0, r6
   1646c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16470:	movw	r0, #34292	; 0x85f4
   16474:	movw	r1, #31186	; 0x79d2
   16478:	movw	r3, #34494	; 0x86be
   1647c:	movw	r2, #1677	; 0x68d
   16480:	movt	r0, #1
   16484:	movt	r1, #1
   16488:	movt	r3, #1
   1648c:	bl	1249c <__assert_fail@plt>

00016490 <flatcc_builder_append_union_vector@@Base>:
   16490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16494:	add	fp, sp, #24
   16498:	mov	r6, r0
   1649c:	ldr	r0, [r0, #32]
   164a0:	mov	r8, r1
   164a4:	ldrh	r1, [r0, #14]
   164a8:	cmp	r1, #7
   164ac:	bne	16548 <flatcc_builder_append_union_vector@@Base+0xb8>
   164b0:	ldr	r1, [r0, #20]
   164b4:	mov	r5, r2
   164b8:	adds	r1, r1, r2
   164bc:	cmpcc	r1, #536870912	; 0x20000000
   164c0:	bcc	164e4 <flatcc_builder_append_union_vector@@Base+0x54>
   164c4:	movw	r0, #35457	; 0x8a81
   164c8:	movw	r1, #31186	; 0x79d2
   164cc:	movw	r3, #35484	; 0x8a9c
   164d0:	mov	r2, #892	; 0x37c
   164d4:	movt	r0, #1
   164d8:	movt	r1, #1
   164dc:	movt	r3, #1
   164e0:	bl	1249c <__assert_fail@plt>
   164e4:	str	r1, [r0, #20]
   164e8:	ldr	r4, [r6, #20]
   164ec:	ldr	r1, [r6, #24]
   164f0:	add	r0, r4, r5, lsl #3
   164f4:	cmp	r0, r1
   164f8:	str	r0, [r6, #20]
   164fc:	bcc	1651c <flatcc_builder_append_union_vector@@Base+0x8c>
   16500:	add	r1, r0, #1
   16504:	mov	r0, r6
   16508:	mvn	r2, #3
   1650c:	bl	16b84 <flatcc_builder_get_emit_context@@Base+0x8>
   16510:	mov	r7, #0
   16514:	cmp	r0, #0
   16518:	bne	16540 <flatcc_builder_append_union_vector@@Base+0xb0>
   1651c:	ldr	r0, [r6, #16]
   16520:	adds	r7, r0, r4
   16524:	beq	1653c <flatcc_builder_append_union_vector@@Base+0xac>
   16528:	lsl	r2, r5, #3
   1652c:	mov	r0, r7
   16530:	mov	r1, r8
   16534:	bl	123e8 <memcpy@plt>
   16538:	b	16540 <flatcc_builder_append_union_vector@@Base+0xb0>
   1653c:	mov	r7, #0
   16540:	mov	r0, r7
   16544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16548:	movw	r0, #34292	; 0x85f4
   1654c:	movw	r1, #31186	; 0x79d2
   16550:	movw	r3, #34603	; 0x872b
   16554:	movw	r2, #1692	; 0x69c
   16558:	movt	r0, #1
   1655c:	movt	r1, #1
   16560:	movt	r3, #1
   16564:	bl	1249c <__assert_fail@plt>

00016568 <flatcc_builder_create_string@@Base>:
   16568:	push	{r4, r5, r6, sl, fp, lr}
   1656c:	add	fp, sp, #16
   16570:	sub	sp, sp, #80	; 0x50
   16574:	str	r2, [fp, #-20]	; 0xffffffec
   16578:	mvn	r5, r2
   1657c:	mov	r6, r0
   16580:	mov	r3, #1
   16584:	cmp	r2, #0
   16588:	ldr	ip, [r0, #136]	; 0x88
   1658c:	sub	r0, fp, #20
   16590:	str	r0, [sp, #12]
   16594:	mov	r0, #4
   16598:	str	r0, [sp, #4]
   1659c:	str	r0, [sp, #16]
   165a0:	str	r3, [sp, #8]
   165a4:	add	r5, ip, r5
   165a8:	and	r5, r5, #3
   165ac:	add	r5, r5, #1
   165b0:	beq	165cc <flatcc_builder_create_string@@Base+0x64>
   165b4:	mov	r3, #2
   165b8:	add	r0, r2, #4
   165bc:	str	r1, [sp, #20]
   165c0:	str	r2, [sp, #24]
   165c4:	str	r3, [sp, #8]
   165c8:	str	r0, [sp, #4]
   165cc:	movw	r2, #30656	; 0x77c0
   165d0:	add	lr, sp, #4
   165d4:	add	r1, r0, r5
   165d8:	add	r0, lr, r3, lsl #3
   165dc:	movt	r2, #1
   165e0:	str	r1, [sp, #4]
   165e4:	cmp	r1, #0
   165e8:	str	r2, [r0, #8]
   165ec:	add	r2, r3, #1
   165f0:	str	r5, [r0, #12]
   165f4:	str	r2, [sp, #8]
   165f8:	ble	1664c <flatcc_builder_create_string@@Base+0xe4>
   165fc:	ldr	r0, [r6, #36]	; 0x24
   16600:	ldr	r4, [r6, #44]	; 0x2c
   16604:	sub	r5, ip, r1
   16608:	str	r1, [sp]
   1660c:	add	r1, lr, #8
   16610:	mov	r3, r5
   16614:	blx	r4
   16618:	cmp	r0, #0
   1661c:	streq	r5, [r6, #136]	; 0x88
   16620:	moveq	r0, r5
   16624:	subeq	sp, fp, #16
   16628:	popeq	{r4, r5, r6, sl, fp, pc}
   1662c:	movw	r0, #35704	; 0x8b78
   16630:	movw	r1, #31186	; 0x79d2
   16634:	movw	r3, #35383	; 0x8a37
   16638:	movw	r2, #651	; 0x28b
   1663c:	movt	r0, #1
   16640:	movt	r1, #1
   16644:	movt	r3, #1
   16648:	bl	1249c <__assert_fail@plt>
   1664c:	movw	r0, #35704	; 0x8b78
   16650:	movw	r1, #31186	; 0x79d2
   16654:	movw	r3, #35383	; 0x8a37
   16658:	movw	r2, #647	; 0x287
   1665c:	movt	r0, #1
   16660:	movt	r1, #1
   16664:	movt	r3, #1
   16668:	bl	1249c <__assert_fail@plt>

0001666c <flatcc_builder_create_string_str@@Base>:
   1666c:	push	{r4, r5, fp, lr}
   16670:	add	fp, sp, #8
   16674:	mov	r5, r0
   16678:	mov	r0, r1
   1667c:	mov	r4, r1
   16680:	bl	12454 <strlen@plt>
   16684:	mov	r2, r0
   16688:	mov	r0, r5
   1668c:	mov	r1, r4
   16690:	pop	{r4, r5, fp, lr}
   16694:	b	16568 <flatcc_builder_create_string@@Base>

00016698 <flatcc_builder_create_string_strn@@Base>:
   16698:	push	{r4, r5, r6, sl, fp, lr}
   1669c:	add	fp, sp, #16
   166a0:	mov	r6, r0
   166a4:	mov	r5, r1
   166a8:	mov	r0, r1
   166ac:	mov	r1, #0
   166b0:	mov	r4, r2
   166b4:	bl	12478 <memchr@plt>
   166b8:	cmp	r0, #0
   166bc:	mov	r1, r5
   166c0:	subne	r4, r0, r5
   166c4:	mov	r0, r6
   166c8:	mov	r2, r4
   166cc:	pop	{r4, r5, r6, sl, fp, lr}
   166d0:	b	16568 <flatcc_builder_create_string@@Base>

000166d4 <flatcc_builder_end_string@@Base>:
   166d4:	push	{r4, r5, fp, lr}
   166d8:	add	fp, sp, #8
   166dc:	mov	r4, r0
   166e0:	ldr	r0, [r0, #32]
   166e4:	ldrh	r1, [r0, #14]
   166e8:	cmp	r1, #6
   166ec:	bne	16794 <flatcc_builder_end_string@@Base+0xc0>
   166f0:	ldr	r2, [r0, #20]
   166f4:	ldr	r0, [r4, #20]
   166f8:	cmp	r2, r0
   166fc:	bne	167b4 <flatcc_builder_end_string@@Base+0xe0>
   16700:	ldr	r1, [r4, #16]
   16704:	mov	r0, r4
   16708:	bl	16568 <flatcc_builder_create_string@@Base>
   1670c:	mov	r5, r0
   16710:	cmp	r0, #0
   16714:	beq	1678c <flatcc_builder_end_string@@Base+0xb8>
   16718:	ldr	r0, [r4, #16]
   1671c:	ldr	r2, [r4, #20]
   16720:	mov	r1, #0
   16724:	bl	1246c <memset@plt>
   16728:	ldr	r0, [r4, #32]
   1672c:	ldr	r1, [r4, #60]	; 0x3c
   16730:	ldr	ip, [r4, #64]	; 0x40
   16734:	ldr	r3, [r0, #8]
   16738:	str	r3, [r4, #20]
   1673c:	ldr	r3, [r0]
   16740:	str	r3, [r4, #28]
   16744:	add	r1, r1, r3
   16748:	ldr	r2, [r0, #4]
   1674c:	str	r1, [r4, #16]
   16750:	sub	r1, ip, r3
   16754:	cmp	r1, r2
   16758:	movhi	r1, r2
   1675c:	str	r1, [r4, #24]
   16760:	ldrh	r1, [r4, #130]	; 0x82
   16764:	ldrh	r2, [r4, #128]	; 0x80
   16768:	cmp	r2, r1
   1676c:	strhcc	r1, [r4, #128]	; 0x80
   16770:	ldrh	r1, [r0, #12]
   16774:	sub	r0, r0, #36	; 0x24
   16778:	str	r0, [r4, #32]
   1677c:	strh	r1, [r4, #130]	; 0x82
   16780:	ldr	r0, [r4, #156]	; 0x9c
   16784:	sub	r0, r0, #1
   16788:	str	r0, [r4, #156]	; 0x9c
   1678c:	mov	r0, r5
   16790:	pop	{r4, r5, fp, pc}
   16794:	movw	r0, #32503	; 0x7ef7
   16798:	movw	r1, #31186	; 0x79d2
   1679c:	movw	r3, #34730	; 0x87aa
   167a0:	movw	r2, #1732	; 0x6c4
   167a4:	movt	r0, #1
   167a8:	movt	r1, #1
   167ac:	movt	r3, #1
   167b0:	bl	1249c <__assert_fail@plt>
   167b4:	movw	r0, #34797	; 0x87ed
   167b8:	movw	r1, #31186	; 0x79d2
   167bc:	movw	r3, #34730	; 0x87aa
   167c0:	movw	r2, #1733	; 0x6c5
   167c4:	movt	r0, #1
   167c8:	movt	r1, #1
   167cc:	movt	r3, #1
   167d0:	bl	1249c <__assert_fail@plt>

000167d4 <flatcc_builder_string_edit@@Base>:
   167d4:	ldr	r0, [r0, #16]
   167d8:	bx	lr

000167dc <flatcc_builder_string_len@@Base>:
   167dc:	ldr	r0, [r0, #32]
   167e0:	ldr	r0, [r0, #20]
   167e4:	bx	lr

000167e8 <flatcc_builder_table_edit@@Base>:
   167e8:	ldr	r2, [r0, #32]
   167ec:	ldrh	r2, [r2, #14]
   167f0:	cmp	r2, #3
   167f4:	ldreq	r2, [r0, #16]
   167f8:	ldreq	r0, [r0, #20]
   167fc:	addeq	r0, r2, r0
   16800:	subeq	r0, r0, r1
   16804:	bxeq	lr
   16808:	push	{fp, lr}
   1680c:	mov	fp, sp
   16810:	movw	r0, #33255	; 0x81e7
   16814:	movw	r1, #31186	; 0x79d2
   16818:	movw	r3, #34975	; 0x889f
   1681c:	movw	r2, #1794	; 0x702
   16820:	movt	r0, #1
   16824:	movt	r1, #1
   16828:	movt	r3, #1
   1682c:	bl	1249c <__assert_fail@plt>

00016830 <flatcc_builder_table_add_copy@@Base>:
   16830:	push	{r4, r5, r6, sl, fp, lr}
   16834:	add	fp, sp, #16
   16838:	mov	r4, r3
   1683c:	ldr	r3, [fp, #8]
   16840:	mov	r5, r2
   16844:	mov	r2, r4
   16848:	bl	15cc4 <flatcc_builder_table_add@@Base>
   1684c:	mov	r6, r0
   16850:	cmp	r0, #0
   16854:	beq	16868 <flatcc_builder_table_add_copy@@Base+0x38>
   16858:	mov	r0, r6
   1685c:	mov	r1, r5
   16860:	mov	r2, r4
   16864:	bl	123e8 <memcpy@plt>
   16868:	mov	r0, r6
   1686c:	pop	{r4, r5, r6, sl, fp, pc}

00016870 <flatcc_builder_push_buffer_alignment@@Base>:
   16870:	ldrh	r1, [r0, #128]	; 0x80
   16874:	mov	r2, #4
   16878:	strh	r2, [r0, #128]	; 0x80
   1687c:	mov	r0, r1
   16880:	bx	lr

00016884 <flatcc_builder_pop_buffer_alignment@@Base>:
   16884:	ldrh	r2, [r0, #128]	; 0x80
   16888:	cmp	r2, r1
   1688c:	strhcc	r1, [r0, #128]	; 0x80
   16890:	bx	lr

00016894 <flatcc_builder_get_buffer_alignment@@Base>:
   16894:	ldrh	r0, [r0, #128]	; 0x80
   16898:	bx	lr

0001689c <flatcc_builder_set_vtable_clustering@@Base>:
   1689c:	clz	r1, r1
   168a0:	lsr	r1, r1, #5
   168a4:	str	r1, [r0, #180]	; 0xb4
   168a8:	bx	lr

000168ac <flatcc_builder_set_block_align@@Base>:
   168ac:	strh	r1, [r0, #132]	; 0x84
   168b0:	bx	lr

000168b4 <flatcc_builder_get_level@@Base>:
   168b4:	ldr	r0, [r0, #156]	; 0x9c
   168b8:	bx	lr

000168bc <flatcc_builder_set_max_level@@Base>:
   168bc:	str	r1, [r0, #176]	; 0xb0
   168c0:	ldr	r2, [r0, #160]	; 0xa0
   168c4:	cmp	r2, r1
   168c8:	strlt	r1, [r0, #160]	; 0xa0
   168cc:	bx	lr

000168d0 <flatcc_builder_get_buffer_size@@Base>:
   168d0:	ldr	r1, [r0, #136]	; 0x88
   168d4:	ldr	r0, [r0, #140]	; 0x8c
   168d8:	sub	r0, r0, r1
   168dc:	bx	lr

000168e0 <flatcc_builder_get_buffer_start@@Base>:
   168e0:	ldr	r0, [r0, #136]	; 0x88
   168e4:	bx	lr

000168e8 <flatcc_builder_get_buffer_end@@Base>:
   168e8:	ldr	r0, [r0, #140]	; 0x8c
   168ec:	bx	lr

000168f0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   168f0:	str	r1, [r0, #172]	; 0xac
   168f4:	bx	lr

000168f8 <flatcc_builder_set_identifier@@Base>:
   168f8:	movw	r2, #30656	; 0x77c0
   168fc:	cmp	r1, #0
   16900:	movt	r2, #1
   16904:	movne	r2, r1
   16908:	ldr	r1, [r2]
   1690c:	str	r1, [r0, #168]	; 0xa8
   16910:	bx	lr

00016914 <flatcc_builder_get_type@@Base>:
   16914:	ldr	r0, [r0, #32]
   16918:	cmp	r0, #0
   1691c:	ldrhne	r0, [r0, #14]
   16920:	moveq	r0, #0
   16924:	bx	lr

00016928 <flatcc_builder_get_type_at@@Base>:
   16928:	mov	r2, r0
   1692c:	cmp	r1, #1
   16930:	mov	r0, #0
   16934:	ldrge	r3, [r2, #156]	; 0x9c
   16938:	cmpge	r3, r1
   1693c:	bge	16944 <flatcc_builder_get_type_at@@Base+0x1c>
   16940:	bx	lr
   16944:	sub	r0, r1, r3
   16948:	ldr	r1, [r2, #32]
   1694c:	add	r0, r0, r0, lsl #3
   16950:	add	r0, r1, r0, lsl #2
   16954:	ldrh	r0, [r0, #14]
   16958:	bx	lr

0001695c <flatcc_builder_get_direct_buffer@@Base>:
   1695c:	ldr	r2, [r0, #184]	; 0xb8
   16960:	cmp	r2, #0
   16964:	beq	16978 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16968:	ldr	r2, [r0, #188]	; 0xbc
   1696c:	ldr	r3, [r0, #192]	; 0xc0
   16970:	cmp	r2, r3
   16974:	beq	16988 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   16978:	mov	r0, #0
   1697c:	cmp	r1, #0
   16980:	strne	r0, [r1]
   16984:	bx	lr
   16988:	cmp	r1, #0
   1698c:	ldrne	r2, [r0, #212]	; 0xd4
   16990:	strne	r2, [r1]
   16994:	ldr	r0, [r0, #196]	; 0xc4
   16998:	bx	lr

0001699c <flatcc_builder_copy_buffer@@Base>:
   1699c:	push	{fp, lr}
   169a0:	mov	fp, sp
   169a4:	ldr	r3, [r0, #184]	; 0xb8
   169a8:	cmp	r3, #0
   169ac:	beq	169e0 <flatcc_builder_copy_buffer@@Base+0x44>
   169b0:	add	r0, r0, #188	; 0xbc
   169b4:	bl	170bc <flatcc_emitter_copy_buffer@@Base>
   169b8:	cmp	r0, #0
   169bc:	popne	{fp, pc}
   169c0:	movw	r0, #29369	; 0x72b9
   169c4:	movw	r1, #31186	; 0x79d2
   169c8:	movw	r3, #35114	; 0x892a
   169cc:	movw	r2, #1926	; 0x786
   169d0:	movt	r0, #1
   169d4:	movt	r1, #1
   169d8:	movt	r3, #1
   169dc:	bl	1249c <__assert_fail@plt>
   169e0:	mov	r0, #0
   169e4:	pop	{fp, pc}

000169e8 <flatcc_builder_finalize_buffer@@Base>:
   169e8:	push	{r4, r5, r6, sl, fp, lr}
   169ec:	add	fp, sp, #16
   169f0:	mov	r4, r0
   169f4:	ldr	r0, [r0, #136]	; 0x88
   169f8:	cmp	r1, #0
   169fc:	ldr	r2, [r4, #140]	; 0x8c
   16a00:	sub	r5, r2, r0
   16a04:	mov	r0, r5
   16a08:	strne	r5, [r1]
   16a0c:	bl	12430 <malloc@plt>
   16a10:	cmp	r0, #0
   16a14:	beq	16a58 <flatcc_builder_finalize_buffer@@Base+0x70>
   16a18:	mov	r6, r0
   16a1c:	mov	r0, r4
   16a20:	mov	r2, r5
   16a24:	mov	r1, r6
   16a28:	bl	1699c <flatcc_builder_copy_buffer@@Base>
   16a2c:	cmp	r0, #0
   16a30:	movne	r0, r6
   16a34:	popne	{r4, r5, r6, sl, fp, pc}
   16a38:	movw	r0, #35704	; 0x8b78
   16a3c:	movw	r1, #31186	; 0x79d2
   16a40:	movw	r3, #35183	; 0x896f
   16a44:	movw	r2, #1948	; 0x79c
   16a48:	movt	r0, #1
   16a4c:	movt	r1, #1
   16a50:	movt	r3, #1
   16a54:	bl	1249c <__assert_fail@plt>
   16a58:	movw	r0, #35704	; 0x8b78
   16a5c:	movw	r1, #31186	; 0x79d2
   16a60:	movw	r3, #35183	; 0x896f
   16a64:	movw	r2, #1944	; 0x798
   16a68:	movt	r0, #1
   16a6c:	movt	r1, #1
   16a70:	movt	r3, #1
   16a74:	bl	1249c <__assert_fail@plt>

00016a78 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16a78:	push	{r4, r5, r6, r7, fp, lr}
   16a7c:	add	fp, sp, #16
   16a80:	sub	sp, sp, #8
   16a84:	mov	r5, r0
   16a88:	mov	r4, r1
   16a8c:	ldr	r0, [r0, #136]	; 0x88
   16a90:	ldr	r1, [r5, #140]	; 0x8c
   16a94:	cmp	r4, #0
   16a98:	sub	r0, r1, r0
   16a9c:	mov	r1, #0
   16aa0:	strne	r0, [r4]
   16aa4:	ldrh	r2, [r5, #128]	; 0x80
   16aa8:	str	r1, [sp, #4]
   16aac:	add	r0, r0, r2
   16ab0:	cmp	r2, #4
   16ab4:	mov	r1, r2
   16ab8:	rsb	r2, r2, #0
   16abc:	sub	r0, r0, #1
   16ac0:	movls	r1, #4
   16ac4:	and	r7, r0, r2
   16ac8:	add	r0, sp, #4
   16acc:	mov	r2, r7
   16ad0:	bl	12460 <posix_memalign@plt>
   16ad4:	ldr	r6, [sp, #4]
   16ad8:	cmp	r0, #0
   16adc:	cmpne	r6, #0
   16ae0:	bne	16b04 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   16ae4:	cmp	r6, #0
   16ae8:	beq	16b0c <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   16aec:	mov	r0, r5
   16af0:	mov	r1, r6
   16af4:	mov	r2, r7
   16af8:	bl	1699c <flatcc_builder_copy_buffer@@Base>
   16afc:	cmp	r0, #0
   16b00:	bne	16b18 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   16b04:	mov	r0, r6
   16b08:	bl	123dc <free@plt>
   16b0c:	mov	r6, #0
   16b10:	cmp	r4, #0
   16b14:	strne	r6, [r4]
   16b18:	mov	r0, r6
   16b1c:	sub	sp, fp, #16
   16b20:	pop	{r4, r5, r6, r7, fp, pc}

00016b24 <flatcc_builder_aligned_alloc@@Base>:
   16b24:	push	{fp, lr}
   16b28:	mov	fp, sp
   16b2c:	sub	sp, sp, #8
   16b30:	mov	r2, r1
   16b34:	mov	r1, r0
   16b38:	mov	r0, #0
   16b3c:	cmp	r1, #4
   16b40:	str	r0, [sp, #4]
   16b44:	add	r0, sp, #4
   16b48:	movls	r1, #4
   16b4c:	bl	12460 <posix_memalign@plt>
   16b50:	mov	r1, r0
   16b54:	ldr	r0, [sp, #4]
   16b58:	cmp	r1, #0
   16b5c:	cmpne	r0, #0
   16b60:	beq	16b70 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16b64:	bl	123dc <free@plt>
   16b68:	mov	r0, #0
   16b6c:	str	r0, [sp, #4]
   16b70:	mov	sp, fp
   16b74:	pop	{fp, pc}

00016b78 <flatcc_builder_aligned_free@@Base>:
   16b78:	b	123dc <free@plt>

00016b7c <flatcc_builder_get_emit_context@@Base>:
   16b7c:	ldr	r0, [r0, #36]	; 0x24
   16b80:	bx	lr
   16b84:	push	{r4, r5, r6, sl, fp, lr}
   16b88:	add	fp, sp, #16
   16b8c:	sub	sp, sp, #8
   16b90:	mov	r6, r2
   16b94:	ldr	r2, [r0, #28]
   16b98:	mov	r5, r0
   16b9c:	ldr	r0, [r0, #40]	; 0x28
   16ba0:	mov	r3, #1
   16ba4:	ldr	r4, [r5, #48]	; 0x30
   16ba8:	str	r3, [sp]
   16bac:	mov	r3, #1
   16bb0:	add	r2, r2, r1
   16bb4:	add	r1, r5, #60	; 0x3c
   16bb8:	blx	r4
   16bbc:	mov	r1, r0
   16bc0:	mvn	r0, #0
   16bc4:	cmp	r1, #0
   16bc8:	bne	16bfc <flatcc_builder_get_emit_context@@Base+0x80>
   16bcc:	ldr	r0, [r5, #28]
   16bd0:	ldr	r2, [r5, #60]	; 0x3c
   16bd4:	ldr	r3, [r5, #64]	; 0x40
   16bd8:	ldr	r1, [r5, #32]
   16bdc:	add	r2, r2, r0
   16be0:	sub	r0, r3, r0
   16be4:	cmp	r0, r6
   16be8:	str	r2, [r5, #16]
   16bec:	movhi	r0, r6
   16bf0:	str	r0, [r5, #24]
   16bf4:	mov	r0, #0
   16bf8:	str	r6, [r1, #4]
   16bfc:	sub	sp, fp, #16
   16c00:	pop	{r4, r5, r6, sl, fp, pc}

00016c04 <flatcc_emitter_recycle_page@@Base>:
   16c04:	ldr	r3, [r0]
   16c08:	mov	r2, r0
   16c0c:	mvn	r0, #0
   16c10:	cmp	r3, r1
   16c14:	ldrne	r2, [r2, #4]
   16c18:	cmpne	r2, r1
   16c1c:	bne	16c24 <flatcc_emitter_recycle_page@@Base+0x20>
   16c20:	bx	lr
   16c24:	ldr	r0, [r1, #2944]	; 0xb80
   16c28:	ldr	r2, [r1, #2948]	; 0xb84
   16c2c:	str	r2, [r0, #2948]	; 0xb84
   16c30:	ldr	r2, [r1, #2948]	; 0xb84
   16c34:	str	r0, [r2, #2944]	; 0xb80
   16c38:	ldr	r0, [r3, #2948]	; 0xb84
   16c3c:	str	r3, [r1, #2944]	; 0xb80
   16c40:	str	r0, [r1, #2948]	; 0xb84
   16c44:	str	r1, [r0, #2944]	; 0xb80
   16c48:	ldr	r0, [r1, #2944]	; 0xb80
   16c4c:	str	r1, [r0, #2948]	; 0xb84
   16c50:	mov	r0, #0
   16c54:	bx	lr

00016c58 <flatcc_emitter_reset@@Base>:
   16c58:	push	{r4, sl, fp, lr}
   16c5c:	add	fp, sp, #8
   16c60:	ldr	r1, [r0]
   16c64:	cmp	r1, #0
   16c68:	beq	16d20 <flatcc_emitter_reset@@Base+0xc8>
   16c6c:	mov	r4, r0
   16c70:	add	r2, r1, #1472	; 0x5c0
   16c74:	mov	r0, #1472	; 0x5c0
   16c78:	mov	r3, #0
   16c7c:	stmib	r4, {r1, r2}
   16c80:	str	r0, [r4, #12]
   16c84:	str	r2, [r4, #16]
   16c88:	str	r0, [r4, #20]
   16c8c:	movw	r0, #64064	; 0xfa40
   16c90:	movt	r0, #65535	; 0xffff
   16c94:	str	r0, [r1, #2952]	; 0xb88
   16c98:	ldr	r2, [r4, #32]
   16c9c:	ldr	r0, [r4, #24]
   16ca0:	cmp	r2, #0
   16ca4:	moveq	r2, r0
   16ca8:	streq	r0, [r4, #32]
   16cac:	str	r3, [r4, #24]
   16cb0:	add	r2, r2, r2, lsl #1
   16cb4:	lsr	r2, r2, #2
   16cb8:	add	r0, r2, r0, lsr #2
   16cbc:	str	r0, [r4, #32]
   16cc0:	ldr	r2, [r4, #28]
   16cc4:	cmp	r2, r0, lsl #1
   16cc8:	bls	16d20 <flatcc_emitter_reset@@Base+0xc8>
   16ccc:	mov	r2, r1
   16cd0:	ldr	r0, [r2, #2944]!	; 0xb80
   16cd4:	cmp	r0, r1
   16cd8:	beq	16d20 <flatcc_emitter_reset@@Base+0xc8>
   16cdc:	ldr	r3, [r0, #2944]	; 0xb80
   16ce0:	str	r3, [r2]
   16ce4:	ldr	r2, [r0, #2944]	; 0xb80
   16ce8:	str	r1, [r2, #2948]	; 0xb84
   16cec:	bl	123dc <free@plt>
   16cf0:	ldr	r0, [r4, #28]
   16cf4:	ldr	r1, [r4, #32]
   16cf8:	sub	r0, r0, #2944	; 0xb80
   16cfc:	cmp	r0, r1, lsl #1
   16d00:	str	r0, [r4, #28]
   16d04:	popls	{r4, sl, fp, pc}
   16d08:	ldr	r1, [r4, #4]
   16d0c:	ldr	r3, [r4]
   16d10:	mov	r2, r1
   16d14:	ldr	r0, [r2, #2944]!	; 0xb80
   16d18:	cmp	r0, r3
   16d1c:	bne	16cdc <flatcc_emitter_reset@@Base+0x84>
   16d20:	pop	{r4, sl, fp, pc}

00016d24 <flatcc_emitter_clear@@Base>:
   16d24:	push	{r4, r5, r6, sl, fp, lr}
   16d28:	add	fp, sp, #16
   16d2c:	ldr	r5, [r0]
   16d30:	cmp	r5, #0
   16d34:	popeq	{r4, r5, r6, sl, fp, pc}
   16d38:	mov	r4, r0
   16d3c:	ldr	r0, [r5, #2948]	; 0xb84
   16d40:	mov	r6, #0
   16d44:	str	r6, [r0, #2944]	; 0xb80
   16d48:	b	16d58 <flatcc_emitter_clear@@Base+0x34>
   16d4c:	mov	r5, r0
   16d50:	ldr	r0, [r0, #2948]	; 0xb84
   16d54:	bl	123dc <free@plt>
   16d58:	ldr	r0, [r5, #2944]	; 0xb80
   16d5c:	cmp	r0, #0
   16d60:	bne	16d4c <flatcc_emitter_clear@@Base+0x28>
   16d64:	mov	r0, r5
   16d68:	bl	123dc <free@plt>
   16d6c:	vmov.i32	q8, #0	; 0x00000000
   16d70:	add	r0, r4, #16
   16d74:	vst1.32	{d16-d17}, [r0]
   16d78:	mov	r0, #32
   16d7c:	vst1.32	{d16-d17}, [r4], r0
   16d80:	str	r6, [r4]
   16d84:	pop	{r4, r5, r6, sl, fp, pc}

00016d88 <flatcc_emitter@@Base>:
   16d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d8c:	add	fp, sp, #28
   16d90:	sub	sp, sp, #4
   16d94:	mov	r6, r0
   16d98:	mov	r7, r1
   16d9c:	ldr	r0, [r0, #24]
   16da0:	ldr	r1, [fp, #8]
   16da4:	mov	r4, r2
   16da8:	cmn	r3, #1
   16dac:	mov	r9, r6
   16db0:	add	r0, r0, r1
   16db4:	str	r0, [r6, #24]
   16db8:	ble	16ef0 <flatcc_emitter@@Base+0x168>
   16dbc:	ldr	r0, [r9, #20]!
   16dc0:	cmp	r0, r1
   16dc4:	bcs	17058 <flatcc_emitter@@Base+0x2d0>
   16dc8:	mov	r8, #0
   16dcc:	cmp	r4, #0
   16dd0:	beq	170b0 <flatcc_emitter@@Base+0x328>
   16dd4:	movw	sl, #64064	; 0xfa40
   16dd8:	movt	sl, #65535	; 0xffff
   16ddc:	ldr	r8, [r7, #4]
   16de0:	cmp	r8, #0
   16de4:	beq	16ee0 <flatcc_emitter@@Base+0x158>
   16de8:	ldr	r9, [r7]
   16dec:	cmp	r8, r0
   16df0:	mov	r5, r8
   16df4:	bls	16eac <flatcc_emitter@@Base+0x124>
   16df8:	mov	r5, r0
   16dfc:	cmp	r5, #0
   16e00:	bne	16eac <flatcc_emitter@@Base+0x124>
   16e04:	ldr	r5, [r6, #4]
   16e08:	cmp	r5, #0
   16e0c:	beq	16e20 <flatcc_emitter@@Base+0x98>
   16e10:	ldr	r0, [r5, #2944]	; 0xb80
   16e14:	ldr	r1, [r6]
   16e18:	cmp	r0, r1
   16e1c:	bne	16e58 <flatcc_emitter@@Base+0xd0>
   16e20:	movw	r0, #2956	; 0xb8c
   16e24:	bl	12430 <malloc@plt>
   16e28:	cmp	r0, #0
   16e2c:	beq	17068 <flatcc_emitter@@Base+0x2e0>
   16e30:	ldr	r1, [r6, #28]
   16e34:	cmp	r5, #0
   16e38:	add	r1, r1, #2944	; 0xb80
   16e3c:	str	r1, [r6, #28]
   16e40:	beq	16e7c <flatcc_emitter@@Base+0xf4>
   16e44:	ldr	r1, [r6]
   16e48:	str	r1, [r0, #2944]	; 0xb80
   16e4c:	str	r5, [r0, #2948]	; 0xb84
   16e50:	str	r0, [r1, #2948]	; 0xb84
   16e54:	str	r0, [r5, #2944]	; 0xb80
   16e58:	mov	r5, #2944	; 0xb80
   16e5c:	str	r0, [r6, #4]
   16e60:	str	r0, [r6, #16]
   16e64:	str	r5, [r6, #20]
   16e68:	ldr	r1, [r0, #2948]	; 0xb84
   16e6c:	ldr	r1, [r1, #2952]	; 0xb88
   16e70:	add	r1, r1, #2944	; 0xb80
   16e74:	str	r1, [r0, #2952]	; 0xb88
   16e78:	b	16ea0 <flatcc_emitter@@Base+0x118>
   16e7c:	mov	r5, #1472	; 0x5c0
   16e80:	add	r1, r0, #1472	; 0x5c0
   16e84:	str	r0, [r6]
   16e88:	stmib	r6, {r0, r1, r5}
   16e8c:	str	r1, [r6, #16]
   16e90:	str	r5, [r6, #20]
   16e94:	str	r0, [r0, #2944]	; 0xb80
   16e98:	str	r0, [r0, #2948]	; 0xb84
   16e9c:	str	sl, [r0, #2952]	; 0xb88
   16ea0:	cmp	r8, r5
   16ea4:	bhi	16dfc <flatcc_emitter@@Base+0x74>
   16ea8:	mov	r5, r8
   16eac:	ldr	r0, [r6, #16]
   16eb0:	mov	r1, r9
   16eb4:	mov	r2, r5
   16eb8:	bl	123e8 <memcpy@plt>
   16ebc:	ldr	r0, [r6, #16]
   16ec0:	ldr	r1, [r6, #20]
   16ec4:	add	r9, r9, r5
   16ec8:	subs	r8, r8, r5
   16ecc:	add	r2, r0, r5
   16ed0:	sub	r0, r1, r5
   16ed4:	str	r2, [r6, #16]
   16ed8:	str	r0, [r6, #20]
   16edc:	bne	16dec <flatcc_emitter@@Base+0x64>
   16ee0:	subs	r4, r4, #1
   16ee4:	add	r7, r7, #8
   16ee8:	bne	16ddc <flatcc_emitter@@Base+0x54>
   16eec:	b	17050 <flatcc_emitter@@Base+0x2c8>
   16ef0:	ldr	r0, [r9, #12]!
   16ef4:	cmp	r0, r1
   16ef8:	bcs	17070 <flatcc_emitter@@Base+0x2e8>
   16efc:	mov	r8, #0
   16f00:	cmp	r4, #0
   16f04:	beq	170b0 <flatcc_emitter@@Base+0x328>
   16f08:	add	r0, r7, r4, lsl #3
   16f0c:	movw	sl, #2952	; 0xb88
   16f10:	ldr	r8, [r0, #-4]
   16f14:	sub	r1, r0, #8
   16f18:	str	r1, [sp]
   16f1c:	cmp	r8, #0
   16f20:	beq	17044 <flatcc_emitter@@Base+0x2bc>
   16f24:	ldr	r0, [sp]
   16f28:	ldr	r0, [r0]
   16f2c:	add	r7, r0, r8
   16f30:	ldr	r1, [r9]
   16f34:	b	16ffc <flatcc_emitter@@Base+0x274>
   16f38:	ldr	r5, [r6]
   16f3c:	cmp	r5, #0
   16f40:	beq	16f68 <flatcc_emitter@@Base+0x1e0>
   16f44:	ldr	r0, [r5, #2948]	; 0xb84
   16f48:	ldr	r1, [r6, #4]
   16f4c:	cmp	r0, r1
   16f50:	beq	16f68 <flatcc_emitter@@Base+0x1e0>
   16f54:	ldr	r1, [r5, #2952]	; 0xb88
   16f58:	mov	r2, r0
   16f5c:	sub	r1, r1, #2944	; 0xb80
   16f60:	str	r1, [r2, #2952]!	; 0xb88
   16f64:	b	16fa4 <flatcc_emitter@@Base+0x21c>
   16f68:	movw	r0, #2956	; 0xb8c
   16f6c:	bl	12430 <malloc@plt>
   16f70:	cmp	r0, #0
   16f74:	beq	17068 <flatcc_emitter@@Base+0x2e0>
   16f78:	ldr	r1, [r6, #28]
   16f7c:	cmp	r5, #0
   16f80:	add	r1, r1, #2944	; 0xb80
   16f84:	str	r1, [r6, #28]
   16f88:	beq	16fcc <flatcc_emitter@@Base+0x244>
   16f8c:	ldr	r1, [r6, #4]
   16f90:	add	r2, r0, sl
   16f94:	str	r5, [r0, #2944]	; 0xb80
   16f98:	str	r1, [r0, #2948]	; 0xb84
   16f9c:	str	r0, [r5, #2948]	; 0xb84
   16fa0:	str	r0, [r1, #2944]	; 0xb80
   16fa4:	str	r0, [r6]
   16fa8:	add	r3, r0, #2944	; 0xb80
   16fac:	mov	r1, #2944	; 0xb80
   16fb0:	str	r3, [r6, #8]
   16fb4:	str	r1, [r6, #12]
   16fb8:	ldr	r0, [r0, #2944]	; 0xb80
   16fbc:	ldr	r0, [r0, #2952]	; 0xb88
   16fc0:	sub	r0, r0, #2944	; 0xb80
   16fc4:	str	r0, [r2]
   16fc8:	b	16ffc <flatcc_emitter@@Base+0x274>
   16fcc:	add	r2, r0, #1472	; 0x5c0
   16fd0:	mov	r1, #1472	; 0x5c0
   16fd4:	str	r0, [r6]
   16fd8:	stmib	r6, {r0, r2}
   16fdc:	str	r1, [r6, #12]
   16fe0:	str	r2, [r6, #16]
   16fe4:	movw	r2, #64064	; 0xfa40
   16fe8:	str	r1, [r6, #20]
   16fec:	str	r0, [r0, #2944]	; 0xb80
   16ff0:	str	r0, [r0, #2948]	; 0xb84
   16ff4:	movt	r2, #65535	; 0xffff
   16ff8:	str	r2, [r0, #2952]	; 0xb88
   16ffc:	cmp	r8, r1
   17000:	bls	17014 <flatcc_emitter@@Base+0x28c>
   17004:	cmp	r1, #0
   17008:	mov	r5, r1
   1700c:	beq	16f38 <flatcc_emitter@@Base+0x1b0>
   17010:	b	17018 <flatcc_emitter@@Base+0x290>
   17014:	mov	r5, r8
   17018:	sub	r0, r1, r5
   1701c:	sub	r7, r7, r5
   17020:	mov	r2, r5
   17024:	str	r0, [r6, #12]
   17028:	mov	r1, r7
   1702c:	ldr	r0, [r6, #8]
   17030:	sub	r0, r0, r5
   17034:	str	r0, [r6, #8]
   17038:	bl	123e8 <memcpy@plt>
   1703c:	subs	r8, r8, r5
   17040:	bne	16f30 <flatcc_emitter@@Base+0x1a8>
   17044:	ldr	r0, [sp]
   17048:	subs	r4, r4, #1
   1704c:	bne	16f10 <flatcc_emitter@@Base+0x188>
   17050:	mov	r8, #0
   17054:	b	170b0 <flatcc_emitter@@Base+0x328>
   17058:	ldr	r5, [r6, #16]
   1705c:	add	r2, r5, r1
   17060:	str	r2, [r6, #16]
   17064:	b	1707c <flatcc_emitter@@Base+0x2f4>
   17068:	mvn	r8, #0
   1706c:	b	170b0 <flatcc_emitter@@Base+0x328>
   17070:	ldr	r2, [r6, #8]
   17074:	sub	r5, r2, r1
   17078:	str	r5, [r6, #8]
   1707c:	sub	r0, r0, r1
   17080:	mov	r8, #0
   17084:	cmp	r4, #0
   17088:	str	r0, [r9]
   1708c:	beq	170b0 <flatcc_emitter@@Base+0x328>
   17090:	ldm	r7, {r1, r2}
   17094:	mov	r0, r5
   17098:	bl	123e8 <memcpy@plt>
   1709c:	ldr	r0, [r7, #4]
   170a0:	add	r7, r7, #8
   170a4:	subs	r4, r4, #1
   170a8:	add	r5, r5, r0
   170ac:	bne	17090 <flatcc_emitter@@Base+0x308>
   170b0:	mov	r0, r8
   170b4:	sub	sp, fp, #28
   170b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000170bc <flatcc_emitter_copy_buffer@@Base>:
   170bc:	push	{r4, r5, r6, sl, fp, lr}
   170c0:	add	fp, sp, #16
   170c4:	mov	r3, r2
   170c8:	ldr	r2, [r0, #24]
   170cc:	mov	r5, #0
   170d0:	cmp	r2, r3
   170d4:	bhi	17170 <flatcc_emitter_copy_buffer@@Base+0xb4>
   170d8:	mov	r4, r0
   170dc:	ldr	r0, [r0]
   170e0:	cmp	r0, #0
   170e4:	beq	17170 <flatcc_emitter_copy_buffer@@Base+0xb4>
   170e8:	mov	r6, r1
   170ec:	ldr	r1, [r4, #4]
   170f0:	cmp	r0, r1
   170f4:	beq	17160 <flatcc_emitter_copy_buffer@@Base+0xa4>
   170f8:	ldr	r0, [r4, #12]
   170fc:	ldr	r1, [r4, #8]
   17100:	rsb	r5, r0, #2944	; 0xb80
   17104:	mov	r0, r6
   17108:	mov	r2, r5
   1710c:	bl	123e8 <memcpy@plt>
   17110:	ldm	r4, {r0, r1}
   17114:	add	r5, r6, r5
   17118:	ldr	r6, [r0, #2944]	; 0xb80
   1711c:	cmp	r6, r1
   17120:	beq	17148 <flatcc_emitter_copy_buffer@@Base+0x8c>
   17124:	mov	r0, r5
   17128:	mov	r1, r6
   1712c:	mov	r2, #2944	; 0xb80
   17130:	bl	123e8 <memcpy@plt>
   17134:	ldr	r6, [r6, #2944]	; 0xb80
   17138:	ldr	r0, [r4, #4]
   1713c:	add	r5, r5, #2944	; 0xb80
   17140:	cmp	r6, r0
   17144:	bne	17124 <flatcc_emitter_copy_buffer@@Base+0x68>
   17148:	ldr	r0, [r4, #20]
   1714c:	mov	r1, r6
   17150:	rsb	r2, r0, #2944	; 0xb80
   17154:	mov	r0, r5
   17158:	bl	123e8 <memcpy@plt>
   1715c:	b	17170 <flatcc_emitter_copy_buffer@@Base+0xb4>
   17160:	ldr	r1, [r4, #8]
   17164:	mov	r0, r6
   17168:	bl	123e8 <memcpy@plt>
   1716c:	mov	r5, r6
   17170:	mov	r0, r5
   17174:	pop	{r4, r5, r6, sl, fp, pc}

00017178 <__libc_csu_init@@Base>:
   17178:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1717c:	mov	r7, r0
   17180:	ldr	r6, [pc, #72]	; 171d0 <__libc_csu_init@@Base+0x58>
   17184:	ldr	r5, [pc, #72]	; 171d4 <__libc_csu_init@@Base+0x5c>
   17188:	add	r6, pc, r6
   1718c:	add	r5, pc, r5
   17190:	sub	r6, r6, r5
   17194:	mov	r8, r1
   17198:	mov	r9, r2
   1719c:	bl	12398 <strcmp@plt-0x20>
   171a0:	asrs	r6, r6, #2
   171a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   171a8:	mov	r4, #0
   171ac:	add	r4, r4, #1
   171b0:	ldr	r3, [r5], #4
   171b4:	mov	r2, r9
   171b8:	mov	r1, r8
   171bc:	mov	r0, r7
   171c0:	blx	r3
   171c4:	cmp	r6, r4
   171c8:	bne	171ac <__libc_csu_init@@Base+0x34>
   171cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171d0:	andeq	r1, r1, ip, ror sp
   171d4:	andeq	r1, r1, r4, ror sp

000171d8 <__libc_csu_fini@@Base>:
   171d8:	bx	lr

Disassembly of section .fini:

000171dc <.fini>:
   171dc:	push	{r3, lr}
   171e0:	pop	{r3, pc}
