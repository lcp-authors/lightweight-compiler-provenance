
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00010e30 <.init>:
   10e30:	push	{r3, lr}
   10e34:	bl	11398 <__assert_fail@plt+0x26c>
   10e38:	pop	{r3, pc}

Disassembly of section .plt:

00010e3c <calloc@plt-0x14>:
   10e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e40:	ldr	lr, [pc, #4]	; 10e4c <calloc@plt-0x4>
   10e44:	add	lr, pc, lr
   10e48:	ldr	pc, [lr, #8]!
   10e4c:			; <UNDEFINED> instruction: 0x0002b1b4

00010e50 <calloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #176128	; 0x2b000
   10e58:	ldr	pc, [ip, #436]!	; 0x1b4

00010e5c <fputs_unlocked@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #176128	; 0x2b000
   10e64:	ldr	pc, [ip, #428]!	; 0x1ac

00010e68 <raise@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #176128	; 0x2b000
   10e70:	ldr	pc, [ip, #420]!	; 0x1a4

00010e74 <iconv_close@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #176128	; 0x2b000
   10e7c:	ldr	pc, [ip, #412]!	; 0x19c

00010e80 <iconv@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #176128	; 0x2b000
   10e88:	ldr	pc, [ip, #404]!	; 0x194

00010e8c <strcmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #176128	; 0x2b000
   10e94:	ldr	pc, [ip, #396]!	; 0x18c

00010e98 <fflush@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #176128	; 0x2b000
   10ea0:	ldr	pc, [ip, #388]!	; 0x184

00010ea4 <wcwidth@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #176128	; 0x2b000
   10eac:	ldr	pc, [ip, #380]!	; 0x17c

00010eb0 <memmove@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #176128	; 0x2b000
   10eb8:	ldr	pc, [ip, #372]!	; 0x174

00010ebc <free@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #176128	; 0x2b000
   10ec4:	ldr	pc, [ip, #364]!	; 0x16c

00010ec8 <_exit@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #176128	; 0x2b000
   10ed0:	ldr	pc, [ip, #356]!	; 0x164

00010ed4 <memcpy@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #176128	; 0x2b000
   10edc:	ldr	pc, [ip, #348]!	; 0x15c

00010ee0 <mbsinit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #176128	; 0x2b000
   10ee8:	ldr	pc, [ip, #340]!	; 0x154

00010eec <memcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #176128	; 0x2b000
   10ef4:	ldr	pc, [ip, #332]!	; 0x14c

00010ef8 <fputc_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #176128	; 0x2b000
   10f00:	ldr	pc, [ip, #324]!	; 0x144

00010f04 <dcgettext@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #176128	; 0x2b000
   10f0c:	ldr	pc, [ip, #316]!	; 0x13c

00010f10 <strdup@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #176128	; 0x2b000
   10f18:	ldr	pc, [ip, #308]!	; 0x134

00010f1c <realloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #176128	; 0x2b000
   10f24:	ldr	pc, [ip, #300]!	; 0x12c

00010f28 <textdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #176128	; 0x2b000
   10f30:	ldr	pc, [ip, #292]!	; 0x124

00010f34 <iswcntrl@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #176128	; 0x2b000
   10f3c:	ldr	pc, [ip, #284]!	; 0x11c

00010f40 <fflush_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #176128	; 0x2b000
   10f48:	ldr	pc, [ip, #276]!	; 0x114

00010f4c <iswprint@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #176128	; 0x2b000
   10f54:	ldr	pc, [ip, #268]!	; 0x10c

00010f58 <fwrite@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #176128	; 0x2b000
   10f60:	ldr	pc, [ip, #260]!	; 0x104

00010f64 <lseek64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #176128	; 0x2b000
   10f6c:	ldr	pc, [ip, #252]!	; 0xfc

00010f70 <__ctype_get_mb_cur_max@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #176128	; 0x2b000
   10f78:	ldr	pc, [ip, #244]!	; 0xf4

00010f7c <__fpending@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #176128	; 0x2b000
   10f84:	ldr	pc, [ip, #236]!	; 0xec

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #176128	; 0x2b000
   10f90:	ldr	pc, [ip, #228]!	; 0xe4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #176128	; 0x2b000
   10f9c:	ldr	pc, [ip, #220]!	; 0xdc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #176128	; 0x2b000
   10fa8:	ldr	pc, [ip, #212]!	; 0xd4

00010fac <iconv_open@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #176128	; 0x2b000
   10fb4:	ldr	pc, [ip, #204]!	; 0xcc

00010fb8 <__libc_start_main@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #176128	; 0x2b000
   10fc0:	ldr	pc, [ip, #196]!	; 0xc4

00010fc4 <__freading@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #176128	; 0x2b000
   10fcc:	ldr	pc, [ip, #188]!	; 0xbc

00010fd0 <__gmon_start__@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #176128	; 0x2b000
   10fd8:	ldr	pc, [ip, #180]!	; 0xb4

00010fdc <getopt_long@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #176128	; 0x2b000
   10fe4:	ldr	pc, [ip, #172]!	; 0xac

00010fe8 <__ctype_b_loc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #176128	; 0x2b000
   10ff0:	ldr	pc, [ip, #164]!	; 0xa4

00010ff4 <exit@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #176128	; 0x2b000
   10ffc:	ldr	pc, [ip, #156]!	; 0x9c

00011000 <iswspace@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #176128	; 0x2b000
   11008:	ldr	pc, [ip, #148]!	; 0x94

0001100c <strlen@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #176128	; 0x2b000
   11014:	ldr	pc, [ip, #140]!	; 0x8c

00011018 <strchr@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #176128	; 0x2b000
   11020:	ldr	pc, [ip, #132]!	; 0x84

00011024 <__errno_location@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #176128	; 0x2b000
   1102c:	ldr	pc, [ip, #124]!	; 0x7c

00011030 <iswalnum@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #176128	; 0x2b000
   11038:	ldr	pc, [ip, #116]!	; 0x74

0001103c <__sprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #176128	; 0x2b000
   11044:	ldr	pc, [ip, #108]!	; 0x6c

00011048 <__cxa_atexit@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #176128	; 0x2b000
   11050:	ldr	pc, [ip, #100]!	; 0x64

00011054 <memset@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #176128	; 0x2b000
   1105c:	ldr	pc, [ip, #92]!	; 0x5c

00011060 <__printf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #176128	; 0x2b000
   11068:	ldr	pc, [ip, #84]!	; 0x54

0001106c <write@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #176128	; 0x2b000
   11074:	ldr	pc, [ip, #76]!	; 0x4c

00011078 <fileno@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #176128	; 0x2b000
   11080:	ldr	pc, [ip, #68]!	; 0x44

00011084 <__fprintf_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #176128	; 0x2b000
   1108c:	ldr	pc, [ip, #60]!	; 0x3c

00011090 <memchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #176128	; 0x2b000
   11098:	ldr	pc, [ip, #52]!	; 0x34

0001109c <fclose@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #176128	; 0x2b000
   110a4:	ldr	pc, [ip, #44]!	; 0x2c

000110a8 <strnlen@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #176128	; 0x2b000
   110b0:	ldr	pc, [ip, #36]!	; 0x24

000110b4 <fseeko64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #176128	; 0x2b000
   110bc:	ldr	pc, [ip, #28]!

000110c0 <__uflow@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #176128	; 0x2b000
   110c8:	ldr	pc, [ip, #20]!

000110cc <__overflow@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #176128	; 0x2b000
   110d4:	ldr	pc, [ip, #12]!

000110d8 <setlocale@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #176128	; 0x2b000
   110e0:	ldr	pc, [ip, #4]!

000110e4 <strrchr@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #172032	; 0x2a000
   110ec:	ldr	pc, [ip, #4092]!	; 0xffc

000110f0 <nl_langinfo@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #172032	; 0x2a000
   110f8:	ldr	pc, [ip, #4084]!	; 0xff4

000110fc <bindtextdomain@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #172032	; 0x2a000
   11104:	ldr	pc, [ip, #4076]!	; 0xfec

00011108 <isatty@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #172032	; 0x2a000
   11110:	ldr	pc, [ip, #4068]!	; 0xfe4

00011114 <strncmp@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #172032	; 0x2a000
   1111c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011120 <abort@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #172032	; 0x2a000
   11128:	ldr	pc, [ip, #4052]!	; 0xfd4

0001112c <__assert_fail@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #172032	; 0x2a000
   11134:	ldr	pc, [ip, #4044]!	; 0xfcc

Disassembly of section .text:

00011138 <.text>:
   11138:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1113c:	movw	r4, #49548	; 0xc18c
   11140:	movt	r4, #3
   11144:	strd	r6, [sp, #8]
   11148:	mov	r6, r1
   1114c:	strd	r8, [sp, #16]
   11150:	mov	r8, r0
   11154:	str	lr, [sp, #24]
   11158:	sub	sp, sp, #28
   1115c:	ldr	r0, [r1]
   11160:	bl	20694 <__assert_fail@plt+0xf568>
   11164:	movw	r1, #42452	; 0xa5d4
   11168:	movt	r1, #2
   1116c:	mov	r0, #6
   11170:	bl	110d8 <setlocale@plt>
   11174:	movw	r1, #42748	; 0xa6fc
   11178:	movt	r1, #2
   1117c:	movw	r0, #42580	; 0xa654
   11180:	movt	r0, #2
   11184:	bl	110fc <bindtextdomain@plt>
   11188:	movw	r0, #42580	; 0xa654
   1118c:	movt	r0, #2
   11190:	bl	10f28 <textdomain@plt>
   11194:	ldr	r3, [r4]
   11198:	cmp	r3, #0
   1119c:	beq	11290 <__assert_fail@plt+0x164>
   111a0:	ldr	r9, [pc, #432]	; 11358 <__assert_fail@plt+0x22c>
   111a4:	movw	r0, #30892	; 0x78ac
   111a8:	movt	r0, #1
   111ac:	bl	271fc <__assert_fail@plt+0x160d0>
   111b0:	movw	r5, #42452	; 0xa5d4
   111b4:	movt	r5, #2
   111b8:	movw	r0, #9672	; 0x25c8
   111bc:	movt	r0, #1
   111c0:	mov	r7, #0
   111c4:	bl	271fc <__assert_fail@plt+0x160d0>
   111c8:	mov	r3, r9
   111cc:	mov	r2, r5
   111d0:	str	r7, [sp]
   111d4:	mov	r1, r6
   111d8:	mov	r0, r8
   111dc:	bl	10fdc <getopt_long@plt>
   111e0:	cmn	r0, #1
   111e4:	beq	112a4 <__assert_fail@plt+0x178>
   111e8:	cmn	r0, #2
   111ec:	beq	11350 <__assert_fail@plt+0x224>
   111f0:	cmp	r0, #256	; 0x100
   111f4:	bne	11204 <__assert_fail@plt+0xd8>
   111f8:	mov	r3, #1
   111fc:	strb	r3, [r4, #8]
   11200:	b	111c8 <__assert_fail@plt+0x9c>
   11204:	cmn	r0, #3
   11208:	beq	11214 <__assert_fail@plt+0xe8>
   1120c:	mov	r0, #1
   11210:	bl	17570 <__assert_fail@plt+0x6444>
   11214:	movw	r2, #49540	; 0xc184
   11218:	movt	r2, #3
   1121c:	movw	r3, #49428	; 0xc114
   11220:	movt	r3, #3
   11224:	ldr	r4, [r2]
   11228:	movw	r1, #42772	; 0xa714
   1122c:	movt	r1, #2
   11230:	movw	r0, #42792	; 0xa728
   11234:	movt	r0, #2
   11238:	ldr	r5, [r3]
   1123c:	bl	21078 <__assert_fail@plt+0xff4c>
   11240:	mov	r6, r0
   11244:	movw	r1, #42812	; 0xa73c
   11248:	movt	r1, #2
   1124c:	movw	r0, #42828	; 0xa74c
   11250:	movt	r0, #2
   11254:	bl	21078 <__assert_fail@plt+0xff4c>
   11258:	movw	r1, #42844	; 0xa75c
   1125c:	movt	r1, #2
   11260:	mov	r3, r5
   11264:	movw	r2, #42576	; 0xa650
   11268:	movt	r2, #2
   1126c:	stm	sp, {r1, r6}
   11270:	movw	r1, #42184	; 0xa4c8
   11274:	movt	r1, #2
   11278:	str	r0, [sp, #8]
   1127c:	mov	r0, r4
   11280:	str	r7, [sp, #12]
   11284:	bl	243c8 <__assert_fail@plt+0x1329c>
   11288:	mov	r0, #0
   1128c:	bl	10ff4 <exit@plt>
   11290:	mov	r0, #1024	; 0x400
   11294:	bl	244d8 <__assert_fail@plt+0x133ac>
   11298:	str	r0, [r4]
   1129c:	str	r0, [r4, #4]
   112a0:	b	111a0 <__assert_fail@plt+0x74>
   112a4:	movw	r3, #49520	; 0xc170
   112a8:	movt	r3, #3
   112ac:	ldr	r5, [r3]
   112b0:	cmp	r5, r8
   112b4:	addlt	r5, r6, r5, lsl #2
   112b8:	movlt	r4, #1
   112bc:	addlt	r6, r6, r8, lsl #2
   112c0:	bge	112fc <__assert_fail@plt+0x1d0>
   112c4:	ldr	r0, [r5], #4
   112c8:	bl	17018 <__assert_fail@plt+0x5eec>
   112cc:	cmp	r0, #0
   112d0:	moveq	r4, #0
   112d4:	cmp	r5, r6
   112d8:	bne	112c4 <__assert_fail@plt+0x198>
   112dc:	eor	r0, r4, #1
   112e0:	uxtb	r0, r0
   112e4:	add	sp, sp, #28
   112e8:	ldrd	r4, [sp]
   112ec:	ldrd	r6, [sp, #8]
   112f0:	ldrd	r8, [sp, #16]
   112f4:	add	sp, sp, #24
   112f8:	pop	{pc}		; (ldr pc, [sp], #4)
   112fc:	add	r0, sp, #16
   11300:	movw	r6, #49536	; 0xc180
   11304:	movt	r6, #3
   11308:	movw	r5, #42856	; 0xa768
   1130c:	movt	r5, #2
   11310:	mov	r4, #1
   11314:	bl	23604 <__assert_fail@plt+0x124d8>
   11318:	b	11328 <__assert_fail@plt+0x1fc>
   1131c:	bl	17018 <__assert_fail@plt+0x5eec>
   11320:	and	r4, r4, r0
   11324:	uxtb	r4, r4
   11328:	add	r3, sp, #16
   1132c:	mov	r2, #3
   11330:	ldr	r0, [r6]
   11334:	mov	r1, r5
   11338:	bl	23614 <__assert_fail@plt+0x124e8>
   1133c:	cmn	r0, #1
   11340:	ldr	r0, [sp, #20]
   11344:	bne	1131c <__assert_fail@plt+0x1f0>
   11348:	bl	17998 <__assert_fail@plt+0x686c>
   1134c:	b	112dc <__assert_fail@plt+0x1b0>
   11350:	mov	r0, #0
   11354:	bl	17570 <__assert_fail@plt+0x6444>
   11358:	andeq	r7, r2, r0, lsl #17
   1135c:	mov	fp, #0
   11360:	mov	lr, #0
   11364:	pop	{r1}		; (ldr r1, [sp], #4)
   11368:	mov	r2, sp
   1136c:	push	{r2}		; (str r2, [sp, #-4]!)
   11370:	push	{r0}		; (str r0, [sp, #-4]!)
   11374:	ldr	ip, [pc, #16]	; 1138c <__assert_fail@plt+0x260>
   11378:	push	{ip}		; (str ip, [sp, #-4]!)
   1137c:	ldr	r0, [pc, #12]	; 11390 <__assert_fail@plt+0x264>
   11380:	ldr	r3, [pc, #12]	; 11394 <__assert_fail@plt+0x268>
   11384:	bl	10fb8 <__libc_start_main@plt>
   11388:	bl	11120 <abort@plt>
   1138c:	strdeq	r7, [r2], -r8
   11390:	andeq	r1, r1, r8, lsr r1
   11394:	muleq	r2, r8, r1
   11398:	ldr	r3, [pc, #20]	; 113b4 <__assert_fail@plt+0x288>
   1139c:	ldr	r2, [pc, #20]	; 113b8 <__assert_fail@plt+0x28c>
   113a0:	add	r3, pc, r3
   113a4:	ldr	r2, [r3, r2]
   113a8:	cmp	r2, #0
   113ac:	bxeq	lr
   113b0:	b	10fd0 <__gmon_start__@plt>
   113b4:	andeq	sl, r2, r8, asr ip
   113b8:	andeq	r0, r0, r4, lsl #2
   113bc:	ldr	r0, [pc, #24]	; 113dc <__assert_fail@plt+0x2b0>
   113c0:	ldr	r3, [pc, #24]	; 113e0 <__assert_fail@plt+0x2b4>
   113c4:	cmp	r3, r0
   113c8:	bxeq	lr
   113cc:	ldr	r3, [pc, #16]	; 113e4 <__assert_fail@plt+0x2b8>
   113d0:	cmp	r3, #0
   113d4:	bxeq	lr
   113d8:	bx	r3
   113dc:	andeq	ip, r3, r8, ror #2
   113e0:	andeq	ip, r3, r8, ror #2
   113e4:	andeq	r0, r0, r0
   113e8:	ldr	r0, [pc, #36]	; 11414 <__assert_fail@plt+0x2e8>
   113ec:	ldr	r1, [pc, #36]	; 11418 <__assert_fail@plt+0x2ec>
   113f0:	sub	r1, r1, r0
   113f4:	asr	r1, r1, #2
   113f8:	add	r1, r1, r1, lsr #31
   113fc:	asrs	r1, r1, #1
   11400:	bxeq	lr
   11404:	ldr	r3, [pc, #16]	; 1141c <__assert_fail@plt+0x2f0>
   11408:	cmp	r3, #0
   1140c:	bxeq	lr
   11410:	bx	r3
   11414:	andeq	ip, r3, r8, ror #2
   11418:	andeq	ip, r3, r8, ror #2
   1141c:	andeq	r0, r0, r0
   11420:	push	{r4, lr}
   11424:	ldr	r4, [pc, #24]	; 11444 <__assert_fail@plt+0x318>
   11428:	ldrb	r3, [r4]
   1142c:	cmp	r3, #0
   11430:	popne	{r4, pc}
   11434:	bl	113bc <__assert_fail@plt+0x290>
   11438:	mov	r3, #1
   1143c:	strb	r3, [r4]
   11440:	pop	{r4, pc}
   11444:	andeq	ip, r3, r8, lsl #3
   11448:	b	113e8 <__assert_fail@plt+0x2bc>
   1144c:	andeq	r0, r0, r0
   11450:	ldrb	r1, [r0, #250]	; 0xfa
   11454:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11458:	strd	r6, [sp, #8]
   1145c:	strd	r8, [sp, #16]
   11460:	mov	r9, r3
   11464:	add	r3, r0, #224	; 0xe0
   11468:	strd	sl, [sp, #24]
   1146c:	mov	r8, r2
   11470:	add	fp, r0, #16
   11474:	sub	sl, r1, #1
   11478:	str	lr, [sp, #32]
   1147c:	sub	sp, sp, #12
   11480:	cmn	sl, #1
   11484:	str	r3, [sp]
   11488:	beq	11598 <__assert_fail@plt+0x46c>
   1148c:	lsl	r3, sl, #3
   11490:	ldrd	r6, [fp, r3]
   11494:	cmp	r9, r7
   11498:	cmpeq	r2, r6
   1149c:	bcs	11568 <__assert_fail@plt+0x43c>
   114a0:	add	r3, r1, #1
   114a4:	mov	r2, sl
   114a8:	add	ip, r0, r3, lsl #3
   114ac:	str	r3, [sp, #4]
   114b0:	b	114c8 <__assert_fail@plt+0x39c>
   114b4:	ldrd	r4, [ip, #-8]!
   114b8:	cmp	r5, r9
   114bc:	cmpeq	r4, r8
   114c0:	bls	11548 <__assert_fail@plt+0x41c>
   114c4:	mov	r2, r3
   114c8:	sub	r3, r2, #1
   114cc:	cmn	r3, #1
   114d0:	mov	lr, r3
   114d4:	bne	114b4 <__assert_fail@plt+0x388>
   114d8:	add	ip, r1, #3
   114dc:	add	r1, r1, #224	; 0xe0
   114e0:	add	ip, r0, ip, lsl #3
   114e4:	add	r1, r0, r1
   114e8:	b	114f4 <__assert_fail@plt+0x3c8>
   114ec:	ldrd	r6, [ip, #-16]
   114f0:	mov	r1, lr
   114f4:	sub	r2, r1, #226	; 0xe2
   114f8:	mov	lr, r1
   114fc:	strd	r6, [ip, #-8]!
   11500:	ldrb	r1, [r1, #-1]
   11504:	sub	r2, r2, r0
   11508:	cmp	r3, r2
   1150c:	strb	r1, [lr], #-1
   11510:	blt	114ec <__assert_fail@plt+0x3c0>
   11514:	ldr	r2, [sp]
   11518:	strd	r8, [fp]
   1151c:	ldr	r3, [sp, #48]	; 0x30
   11520:	strb	r3, [r2]
   11524:	ldr	r3, [sp, #4]
   11528:	strb	r3, [r0, #250]	; 0xfa
   1152c:	add	sp, sp, #12
   11530:	ldrd	r4, [sp]
   11534:	ldrd	r6, [sp, #8]
   11538:	ldrd	r8, [sp, #16]
   1153c:	ldrd	sl, [sp, #24]
   11540:	add	sp, sp, #32
   11544:	pop	{pc}		; (ldr pc, [sp], #4)
   11548:	beq	11570 <__assert_fail@plt+0x444>
   1154c:	ldr	ip, [sp]
   11550:	add	fp, fp, r2, lsl #3
   11554:	cmp	sl, r3
   11558:	add	r2, ip, r2
   1155c:	str	r2, [sp]
   11560:	bgt	114d8 <__assert_fail@plt+0x3ac>
   11564:	b	11514 <__assert_fail@plt+0x3e8>
   11568:	mov	lr, sl
   1156c:	bne	11588 <__assert_fail@plt+0x45c>
   11570:	ldr	r2, [sp]
   11574:	ldr	r1, [sp, #48]	; 0x30
   11578:	ldrb	r3, [r2, lr]
   1157c:	add	r3, r3, r1
   11580:	strb	r3, [r2, lr]
   11584:	b	1152c <__assert_fail@plt+0x400>
   11588:	add	r3, r0, #224	; 0xe0
   1158c:	add	fp, fp, r1, lsl #3
   11590:	add	r3, r3, r1
   11594:	str	r3, [sp]
   11598:	add	r3, r1, #1
   1159c:	str	r3, [sp, #4]
   115a0:	b	11514 <__assert_fail@plt+0x3e8>
   115a4:	ldr	r3, [r0, #8]
   115a8:	strd	r4, [sp, #-16]!
   115ac:	str	r6, [sp, #8]
   115b0:	mov	r6, r0
   115b4:	str	lr, [sp, #12]
   115b8:	cmp	r3, #0
   115bc:	beq	115e8 <__assert_fail@plt+0x4bc>
   115c0:	mov	r4, #0
   115c4:	mov	r5, r4
   115c8:	ldr	r0, [r6]
   115cc:	add	r5, r5, #1
   115d0:	add	r0, r0, r4
   115d4:	add	r4, r4, #12
   115d8:	bl	1a564 <__assert_fail@plt+0x9438>
   115dc:	ldr	r3, [r6, #8]
   115e0:	cmp	r3, r5
   115e4:	bhi	115c8 <__assert_fail@plt+0x49c>
   115e8:	ldr	r0, [r6]
   115ec:	bl	17998 <__assert_fail@plt+0x686c>
   115f0:	ldrd	r4, [sp]
   115f4:	ldr	r0, [r6, #4]
   115f8:	ldr	r6, [sp, #8]
   115fc:	ldr	lr, [sp, #12]
   11600:	add	sp, sp, #16
   11604:	b	17998 <__assert_fail@plt+0x686c>
   11608:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1160c:	strd	r6, [sp, #8]
   11610:	strd	r8, [sp, #16]
   11614:	strd	sl, [sp, #24]
   11618:	str	lr, [sp, #32]
   1161c:	sub	sp, sp, #228	; 0xe4
   11620:	add	r1, sp, #304	; 0x130
   11624:	ldr	ip, [sp, #264]	; 0x108
   11628:	strd	r2, [sp, #120]	; 0x78
   1162c:	ldrd	r4, [r1]
   11630:	str	r0, [sp, #204]	; 0xcc
   11634:	ldr	lr, [sp, #268]	; 0x10c
   11638:	rsbs	r4, r4, #0
   1163c:	rsc	r5, r5, #0
   11640:	cmp	r2, #0
   11644:	sbcs	r3, r3, #0
   11648:	ldr	r3, [sp, #280]	; 0x118
   1164c:	strd	r4, [sp, #112]	; 0x70
   11650:	str	r3, [sp, #132]	; 0x84
   11654:	ldr	r3, [sp, #284]	; 0x11c
   11658:	str	r3, [sp, #16]
   1165c:	blt	11ea8 <__assert_fail@plt+0xd7c>
   11660:	add	r3, sp, #272	; 0x110
   11664:	ldrd	r2, [r3]
   11668:	cmp	r2, #0
   1166c:	sbcs	r3, r3, #0
   11670:	blt	11e88 <__assert_fail@plt+0xd5c>
   11674:	add	r3, sp, #288	; 0x120
   11678:	ldrd	r2, [r3]
   1167c:	cmp	r2, #0
   11680:	sbcs	r3, r3, #0
   11684:	blt	11e68 <__assert_fail@plt+0xd3c>
   11688:	ldr	r3, [sp, #132]	; 0x84
   1168c:	mov	r8, #0
   11690:	umull	r4, r5, lr, r3
   11694:	umull	r0, r1, ip, r3
   11698:	ldr	r3, [sp, #16]
   1169c:	mov	r6, r4
   116a0:	mov	r7, r5
   116a4:	umlal	r6, r7, ip, r3
   116a8:	umull	r2, r3, lr, r3
   116ac:	adds	sl, r1, r6
   116b0:	adc	fp, r8, r7
   116b4:	strd	r2, [sp, #8]
   116b8:	cmp	r5, fp
   116bc:	cmpeq	r4, sl
   116c0:	bls	116d8 <__assert_fail@plt+0x5ac>
   116c4:	adds	r3, r2, r8
   116c8:	str	r3, [sp, #8]
   116cc:	ldr	r3, [sp, #12]
   116d0:	adc	r3, r3, #1
   116d4:	str	r3, [sp, #12]
   116d8:	ldr	r1, [sp, #8]
   116dc:	mov	r6, fp
   116e0:	ldr	r3, [sp, #272]	; 0x110
   116e4:	ldr	r2, [sp, #272]	; 0x110
   116e8:	adds	r1, r6, r1
   116ec:	str	r1, [sp, #136]	; 0x88
   116f0:	umull	r4, r5, lr, r3
   116f4:	mov	r3, #0
   116f8:	ldr	r1, [sp, #276]	; 0x114
   116fc:	umull	r8, r9, ip, r2
   11700:	mov	r2, r0
   11704:	str	r3, [sp, #208]	; 0xd0
   11708:	umull	r6, r7, lr, r1
   1170c:	strd	r6, [sp, #32]
   11710:	mov	r6, r4
   11714:	mov	r7, r5
   11718:	umlal	r6, r7, ip, r1
   1171c:	ldr	r1, [sp, #12]
   11720:	adc	r1, r3, r1
   11724:	adds	r2, r3, r2
   11728:	adc	fp, sl, r3
   1172c:	str	r1, [sp, #140]	; 0x8c
   11730:	str	r2, [sp, #200]	; 0xc8
   11734:	adds	r2, r9, r6
   11738:	str	r2, [sp, #24]
   1173c:	adc	r2, r3, r7
   11740:	str	r2, [sp, #28]
   11744:	ldrd	r0, [sp, #24]
   11748:	cmp	r5, r1
   1174c:	cmpeq	r4, r0
   11750:	bls	1176c <__assert_fail@plt+0x640>
   11754:	ldr	r3, [sp, #32]
   11758:	adds	r3, r3, #0
   1175c:	str	r3, [sp, #32]
   11760:	ldr	r3, [sp, #36]	; 0x24
   11764:	adc	r3, r3, #1
   11768:	str	r3, [sp, #36]	; 0x24
   1176c:	mov	lr, #0
   11770:	ldrd	r6, [sp, #112]	; 0x70
   11774:	adds	r3, lr, r8
   11778:	mov	r4, lr
   1177c:	ldr	r9, [sp, #200]	; 0xc8
   11780:	mov	sl, lr
   11784:	str	r3, [sp, #144]	; 0x90
   11788:	ldrd	r2, [sp, #24]
   1178c:	mul	ip, r6, fp
   11790:	umull	r0, r1, r6, r9
   11794:	mla	ip, r9, r7, ip
   11798:	str	r3, [sp, #212]	; 0xd4
   1179c:	adc	lr, r2, r4
   117a0:	ldr	r3, [sp, #296]	; 0x128
   117a4:	add	ip, ip, r1
   117a8:	str	lr, [sp, #148]	; 0x94
   117ac:	mov	lr, r4
   117b0:	umull	r6, r7, ip, r3
   117b4:	umull	r8, r9, r0, r3
   117b8:	ldr	r3, [sp, #300]	; 0x12c
   117bc:	mov	r8, r0
   117c0:	mov	r4, r6
   117c4:	mov	r5, r7
   117c8:	umlal	r4, r5, r0, r3
   117cc:	adds	r3, r9, r4
   117d0:	str	r3, [sp, #40]	; 0x28
   117d4:	adc	r3, sl, r5
   117d8:	str	r3, [sp, #44]	; 0x2c
   117dc:	ldrd	r0, [sp, #40]	; 0x28
   117e0:	ldr	r3, [sp, #300]	; 0x12c
   117e4:	cmp	r7, r1
   117e8:	cmpeq	r6, r0
   117ec:	mov	r6, sl
   117f0:	umull	r2, r3, ip, r3
   117f4:	strd	r2, [sp, #24]
   117f8:	bls	11810 <__assert_fail@plt+0x6e4>
   117fc:	adds	r3, r2, sl
   11800:	str	r3, [sp, #24]
   11804:	ldr	r3, [sp, #28]
   11808:	adc	r3, r3, #1
   1180c:	str	r3, [sp, #28]
   11810:	ldr	r7, [sp, #44]	; 0x2c
   11814:	mov	r9, #0
   11818:	ldr	r3, [sp, #288]	; 0x120
   1181c:	umull	r0, r1, ip, r3
   11820:	ldr	r3, [sp, #292]	; 0x124
   11824:	umull	r2, r3, r3, r8
   11828:	strd	r2, [sp, #8]
   1182c:	ldr	r2, [sp, #12]
   11830:	ldr	r3, [sp, #288]	; 0x120
   11834:	umull	r4, r5, r8, r3
   11838:	mla	r1, lr, r3, r1
   1183c:	ldr	r3, [sp, #292]	; 0x124
   11840:	strd	r4, [sp, #40]	; 0x28
   11844:	mla	r3, r6, r3, r2
   11848:	str	r3, [sp, #12]
   1184c:	ldr	r3, [sp, #288]	; 0x120
   11850:	mla	r6, r6, r3, r5
   11854:	ldrd	r2, [sp, #8]
   11858:	adds	r4, r2, r0
   1185c:	adc	r5, r3, r1
   11860:	adds	r3, r6, r4
   11864:	str	r3, [sp, #48]	; 0x30
   11868:	ldr	r3, [sp, #292]	; 0x124
   1186c:	umull	r2, r3, ip, r3
   11870:	strd	r2, [sp, #8]
   11874:	adc	r3, r9, r5
   11878:	ldr	r2, [sp, #12]
   1187c:	str	r3, [sp, #52]	; 0x34
   11880:	ldrd	r4, [sp, #48]	; 0x30
   11884:	ldr	r3, [sp, #292]	; 0x124
   11888:	cmp	r1, r5
   1188c:	cmpeq	r0, r4
   11890:	mla	r3, lr, r3, r2
   11894:	str	r3, [sp, #12]
   11898:	bls	118b4 <__assert_fail@plt+0x788>
   1189c:	ldr	r3, [sp, #8]
   118a0:	adds	r3, r3, r9
   118a4:	str	r3, [sp, #8]
   118a8:	ldr	r3, [sp, #12]
   118ac:	adc	r3, r3, #1
   118b0:	str	r3, [sp, #12]
   118b4:	ldr	r8, [sp, #40]	; 0x28
   118b8:	mov	ip, #0
   118bc:	mov	lr, ip
   118c0:	ldrd	r4, [sp, #48]	; 0x30
   118c4:	str	ip, [sp, #216]	; 0xd8
   118c8:	ldrd	r0, [sp, #144]	; 0x90
   118cc:	adds	r3, ip, r8
   118d0:	ldr	r8, [sp, #16]
   118d4:	str	r3, [sp, #152]	; 0x98
   118d8:	adc	r3, r4, ip
   118dc:	str	r3, [sp, #156]	; 0x9c
   118e0:	ldr	r3, [sp, #200]	; 0xc8
   118e4:	str	r5, [sp, #200]	; 0xc8
   118e8:	orrs	r3, r3, fp
   118ec:	ldrd	sl, [sp, #120]	; 0x78
   118f0:	movne	r2, #1
   118f4:	moveq	r2, ip
   118f8:	adds	r0, r0, r2
   118fc:	ldrd	r2, [sp, #24]
   11900:	adc	r1, r1, #0
   11904:	adds	r7, r7, r0
   11908:	adc	r9, r9, r1
   1190c:	adds	r4, r7, r2
   11910:	adc	r3, r9, r3
   11914:	str	r4, [sp, #160]	; 0xa0
   11918:	str	r3, [sp, #164]	; 0xa4
   1191c:	ldrd	r4, [sp, #136]	; 0x88
   11920:	ldrd	r2, [sp, #160]	; 0xa0
   11924:	cmp	r1, r3
   11928:	cmpeq	r0, r2
   1192c:	movhi	r1, #1
   11930:	movls	r1, ip
   11934:	adds	r0, r4, r2
   11938:	str	r1, [sp, #144]	; 0x90
   1193c:	adcs	r1, r5, r3
   11940:	ldrd	r4, [sp, #152]	; 0x98
   11944:	movcs	lr, #1
   11948:	str	lr, [sp, #152]	; 0x98
   1194c:	mov	lr, #0
   11950:	mov	r9, lr
   11954:	str	lr, [sp, #220]	; 0xdc
   11958:	adds	r2, r4, r0
   1195c:	adcs	r3, r5, r1
   11960:	strd	r2, [sp, #136]	; 0x88
   11964:	mov	r2, #0
   11968:	ldr	r3, [sp, #132]	; 0x84
   1196c:	mov	r1, r2
   11970:	movcs	r1, #1
   11974:	str	r1, [sp, #132]	; 0x84
   11978:	str	r2, [sp, #160]	; 0xa0
   1197c:	umull	r4, r5, fp, r3
   11980:	umull	r0, r1, r3, sl
   11984:	mov	r2, r4
   11988:	mov	r3, r5
   1198c:	umlal	r2, r3, sl, r8
   11990:	mov	r6, r2
   11994:	mov	r7, r3
   11998:	ldr	r3, [sp, #16]
   1199c:	adds	lr, r1, r6
   119a0:	str	lr, [sp, #56]	; 0x38
   119a4:	adc	lr, r9, r7
   119a8:	str	lr, [sp, #60]	; 0x3c
   119ac:	umull	r2, r3, r3, fp
   119b0:	ldrd	r6, [sp, #56]	; 0x38
   119b4:	strd	r2, [sp, #40]	; 0x28
   119b8:	cmp	r5, r7
   119bc:	cmpeq	r4, r6
   119c0:	bls	119d8 <__assert_fail@plt+0x8ac>
   119c4:	adds	r3, r2, r9
   119c8:	str	r3, [sp, #40]	; 0x28
   119cc:	ldr	r3, [sp, #44]	; 0x2c
   119d0:	adc	r3, r3, #1
   119d4:	str	r3, [sp, #44]	; 0x2c
   119d8:	ldrd	r6, [sp, #120]	; 0x78
   119dc:	mov	r9, #0
   119e0:	ldr	r2, [sp, #272]	; 0x110
   119e4:	mov	fp, r7
   119e8:	umull	r2, r3, r7, r2
   119ec:	strd	r2, [sp, #16]
   119f0:	ldr	r3, [sp, #276]	; 0x114
   119f4:	umull	r2, r3, r3, r6
   119f8:	mov	r5, r3
   119fc:	mov	r4, r2
   11a00:	ldrd	r2, [sp, #56]	; 0x38
   11a04:	strd	r4, [sp, #120]	; 0x78
   11a08:	mov	r8, r3
   11a0c:	ldr	r3, [sp, #272]	; 0x110
   11a10:	mov	r1, r2
   11a14:	umull	r2, r3, r3, r6
   11a18:	strd	r2, [sp, #48]	; 0x30
   11a1c:	ldr	r3, [sp, #20]
   11a20:	ldr	r2, [sp, #208]	; 0xd0
   11a24:	mla	r3, r2, r7, r3
   11a28:	ldr	r7, [sp, #16]
   11a2c:	str	r3, [sp, #20]
   11a30:	mla	r3, r9, r6, r5
   11a34:	str	r3, [sp, #124]	; 0x7c
   11a38:	adds	r3, r9, r0
   11a3c:	mov	r0, r2
   11a40:	ldr	r2, [sp, #52]	; 0x34
   11a44:	str	r3, [sp, #168]	; 0xa8
   11a48:	adc	r3, r1, r9
   11a4c:	ldrd	r4, [sp, #120]	; 0x78
   11a50:	str	r3, [sp, #172]	; 0xac
   11a54:	ldr	r3, [sp, #276]	; 0x114
   11a58:	mla	r0, r0, r6, r2
   11a5c:	mov	r6, r4
   11a60:	ldr	r4, [sp, #20]
   11a64:	adds	r6, r6, r7
   11a68:	umull	r2, r3, r3, fp
   11a6c:	strd	r2, [sp, #24]
   11a70:	mla	r3, r9, fp, r3
   11a74:	adc	r7, r5, r4
   11a78:	adds	r6, r0, r6
   11a7c:	ldrd	r0, [sp, #16]
   11a80:	str	r3, [sp, #28]
   11a84:	adc	r3, r9, r7
   11a88:	str	r6, [sp, #64]	; 0x40
   11a8c:	str	r3, [sp, #68]	; 0x44
   11a90:	ldrd	r2, [sp, #64]	; 0x40
   11a94:	cmp	r1, r3
   11a98:	cmpeq	r0, r2
   11a9c:	bls	11ab8 <__assert_fail@plt+0x98c>
   11aa0:	ldr	r3, [sp, #24]
   11aa4:	adds	r3, r3, r9
   11aa8:	str	r3, [sp, #24]
   11aac:	ldr	r3, [sp, #28]
   11ab0:	adc	r3, r3, #1
   11ab4:	str	r3, [sp, #28]
   11ab8:	mov	r0, #0
   11abc:	ldrd	r6, [sp, #32]
   11ac0:	mov	r4, r0
   11ac4:	ldr	r5, [sp, #48]	; 0x30
   11ac8:	adds	r3, r0, r5
   11acc:	str	r3, [sp, #72]	; 0x48
   11ad0:	ldrd	r2, [sp, #64]	; 0x40
   11ad4:	adc	r1, r2, r0
   11ad8:	str	r3, [sp, #48]	; 0x30
   11adc:	str	r1, [sp, #76]	; 0x4c
   11ae0:	ldrd	r2, [sp, #72]	; 0x48
   11ae4:	ldr	r1, [sp, #212]	; 0xd4
   11ae8:	adds	r1, r1, r2
   11aec:	ldr	r2, [sp, #200]	; 0xc8
   11af0:	adc	r3, r3, r0
   11af4:	adds	r1, r1, r2
   11af8:	ldr	r2, [sp, #144]	; 0x90
   11afc:	adc	r3, r3, ip
   11b00:	adds	r1, r1, r6
   11b04:	adc	r3, r3, r7
   11b08:	ldrd	r6, [sp, #168]	; 0xa8
   11b0c:	adds	r1, r1, r2
   11b10:	ldr	r2, [sp, #216]	; 0xd8
   11b14:	adc	r3, r3, r2
   11b18:	ldr	r2, [sp, #152]	; 0x98
   11b1c:	adds	r1, r1, r2
   11b20:	ldr	r2, [sp, #160]	; 0xa0
   11b24:	adc	r3, r3, r2
   11b28:	ldr	r2, [sp, #132]	; 0x84
   11b2c:	adds	r5, r1, r2
   11b30:	ldr	r2, [sp, #220]	; 0xdc
   11b34:	adc	lr, r3, r2
   11b38:	ldrd	r2, [sp, #136]	; 0x88
   11b3c:	adds	sl, r2, r6
   11b40:	adcs	fp, r3, r7
   11b44:	ldrd	r2, [sp, #112]	; 0x70
   11b48:	movcs	r4, #1
   11b4c:	adds	r6, r8, r4
   11b50:	strd	sl, [sp, #16]
   11b54:	adc	r7, r9, #0
   11b58:	ldr	r4, [sp, #16]
   11b5c:	ldr	ip, [sp, #20]
   11b60:	ldrd	r8, [sp, #40]	; 0x28
   11b64:	umull	sl, fp, r2, r4
   11b68:	mul	r1, r2, ip
   11b6c:	adds	ip, r6, r8
   11b70:	mov	r8, sl
   11b74:	mla	r1, r4, r3, r1
   11b78:	str	ip, [sp, #176]	; 0xb0
   11b7c:	adc	ip, r7, r9
   11b80:	ldrd	r6, [sp, #8]
   11b84:	str	ip, [sp, #180]	; 0xb4
   11b88:	add	r1, r1, fp
   11b8c:	adds	ip, r6, r5
   11b90:	adc	r3, r7, lr
   11b94:	str	ip, [sp, #80]	; 0x50
   11b98:	mov	ip, #0
   11b9c:	mov	lr, ip
   11ba0:	str	r3, [sp, #84]	; 0x54
   11ba4:	ldrd	r2, [sp, #72]	; 0x48
   11ba8:	str	ip, [sp, #56]	; 0x38
   11bac:	ldrd	r4, [sp, #80]	; 0x50
   11bb0:	cmp	r3, r5
   11bb4:	cmpeq	r2, r4
   11bb8:	movls	r3, ip
   11bbc:	movhi	r3, #1
   11bc0:	mov	ip, sl
   11bc4:	str	r3, [sp, #40]	; 0x28
   11bc8:	ldr	r3, [sp, #296]	; 0x128
   11bcc:	umull	r4, r5, r1, r3
   11bd0:	ldr	r3, [sp, #300]	; 0x12c
   11bd4:	mla	r5, lr, r1, r5
   11bd8:	umull	r6, r7, r3, r8
   11bdc:	ldr	r3, [sp, #296]	; 0x128
   11be0:	mla	r7, lr, sl, r7
   11be4:	adds	r2, r6, r4
   11be8:	umull	r8, r9, r3, sl
   11bec:	adc	r6, r7, r5
   11bf0:	mla	r8, lr, sl, r9
   11bf4:	adds	r2, r8, r2
   11bf8:	str	r2, [sp, #88]	; 0x58
   11bfc:	adc	r2, lr, r6
   11c00:	str	r2, [sp, #92]	; 0x5c
   11c04:	ldr	r2, [sp, #300]	; 0x12c
   11c08:	umull	r8, r9, r2, r1
   11c0c:	ldrd	r2, [sp, #88]	; 0x58
   11c10:	mla	r9, lr, r1, r9
   11c14:	cmp	r5, r3
   11c18:	cmpeq	r4, r2
   11c1c:	bls	11c28 <__assert_fail@plt+0xafc>
   11c20:	adds	r8, r8, lr
   11c24:	adc	r9, r9, #1
   11c28:	mov	r5, #0
   11c2c:	ldr	lr, [sp, #92]	; 0x5c
   11c30:	ldr	r4, [sp, #292]	; 0x124
   11c34:	ldr	r3, [sp, #288]	; 0x120
   11c38:	umull	r6, r7, r4, ip
   11c3c:	ldr	r4, [sp, #288]	; 0x120
   11c40:	umull	r2, r3, r1, r3
   11c44:	mla	r7, ip, r5, r7
   11c48:	umull	sl, fp, r4, ip
   11c4c:	adds	r4, r6, r2
   11c50:	ldr	r6, [sp, #292]	; 0x124
   11c54:	mla	r3, r1, r5, r3
   11c58:	mla	ip, ip, r5, fp
   11c5c:	strd	sl, [sp, #32]
   11c60:	adc	sl, r7, r3
   11c64:	umull	r6, r7, r6, r1
   11c68:	adds	ip, ip, r4
   11c6c:	strd	r6, [sp, #8]
   11c70:	str	ip, [sp, #96]	; 0x60
   11c74:	adc	ip, r5, sl
   11c78:	str	ip, [sp, #100]	; 0x64
   11c7c:	ldrd	r4, [sp, #96]	; 0x60
   11c80:	cmp	r3, r5
   11c84:	mov	r3, #0
   11c88:	cmpeq	r2, r4
   11c8c:	mla	r3, r1, r3, r7
   11c90:	str	r3, [sp, #12]
   11c94:	bls	11cb0 <__assert_fail@plt+0xb84>
   11c98:	ldr	r3, [sp, #8]
   11c9c:	adds	r3, r3, #0
   11ca0:	str	r3, [sp, #8]
   11ca4:	ldr	r3, [sp, #12]
   11ca8:	adc	r3, r3, #1
   11cac:	str	r3, [sp, #12]
   11cb0:	ldr	r6, [sp, #32]
   11cb4:	mov	r3, #0
   11cb8:	ldr	r1, [sp, #48]	; 0x30
   11cbc:	ldrd	r4, [sp, #96]	; 0x60
   11cc0:	adds	r2, r5, r1
   11cc4:	adc	r0, r3, r0
   11cc8:	adds	ip, r3, r6
   11ccc:	ldrd	r6, [sp, #176]	; 0xb0
   11cd0:	adc	r1, r4, r3
   11cd4:	str	ip, [sp, #184]	; 0xb8
   11cd8:	str	r1, [sp, #188]	; 0xbc
   11cdc:	ldr	ip, [sp, #16]
   11ce0:	ldr	r1, [sp, #20]
   11ce4:	ldrd	r4, [sp, #80]	; 0x50
   11ce8:	orrs	r1, r1, ip
   11cec:	moveq	r1, r3
   11cf0:	movne	r1, #1
   11cf4:	adds	r4, r4, r1
   11cf8:	adc	r5, r5, #0
   11cfc:	adds	lr, lr, r4
   11d00:	adc	sl, r5, r3
   11d04:	adds	r1, lr, r8
   11d08:	str	r1, [sp, #104]	; 0x68
   11d0c:	adc	r1, sl, r9
   11d10:	str	r1, [sp, #108]	; 0x6c
   11d14:	ldr	r1, [sp, #40]	; 0x28
   11d18:	ldrd	sl, [sp, #104]	; 0x68
   11d1c:	adds	r8, r6, sl
   11d20:	adcs	r9, r7, fp
   11d24:	ldrd	sl, [sp, #184]	; 0xb8
   11d28:	movcs	r3, #1
   11d2c:	adds	r6, sl, r8
   11d30:	adcs	r7, fp, r9
   11d34:	ldrd	r8, [sp, #24]
   11d38:	movcs	ip, #1
   11d3c:	movcc	ip, #0
   11d40:	adds	r2, r1, r2
   11d44:	ldr	r1, [sp, #56]	; 0x38
   11d48:	adc	r0, r1, r0
   11d4c:	adds	r2, r2, r8
   11d50:	str	r2, [sp, #192]	; 0xc0
   11d54:	adc	r2, r0, r9
   11d58:	ldrd	r0, [sp, #104]	; 0x68
   11d5c:	str	r2, [sp, #196]	; 0xc4
   11d60:	cmp	r5, r1
   11d64:	mov	r1, r7
   11d68:	cmpeq	r4, r0
   11d6c:	ldrd	r4, [sp, #192]	; 0xc0
   11d70:	mov	r0, r6
   11d74:	movhi	r2, #1
   11d78:	movls	r2, #0
   11d7c:	adds	r4, r4, r2
   11d80:	adc	r5, r5, #0
   11d84:	adds	r4, r4, r3
   11d88:	ldrd	r2, [sp, #8]
   11d8c:	adc	r5, r5, #0
   11d90:	adds	r8, r4, ip
   11d94:	adc	r9, r5, #0
   11d98:	adds	ip, r8, r2
   11d9c:	adc	r3, r9, r3
   11da0:	str	ip, [sp]
   11da4:	str	r3, [sp, #4]
   11da8:	add	r3, sp, #288	; 0x120
   11dac:	ldrd	r2, [r3]
   11db0:	ldrd	r4, [sp]
   11db4:	cmp	r3, r5
   11db8:	cmpeq	r2, r4
   11dbc:	bcs	11e3c <__assert_fail@plt+0xd10>
   11dc0:	add	r3, sp, #296	; 0x128
   11dc4:	ldr	ip, [sp, #288]	; 0x120
   11dc8:	ldrd	r2, [r3]
   11dcc:	ldr	r1, [sp, #296]	; 0x128
   11dd0:	cmp	r3, r7
   11dd4:	cmpeq	r2, r6
   11dd8:	mov	r2, #0
   11ddc:	movls	r3, r2
   11de0:	movhi	r3, #1
   11de4:	subs	r0, r6, r1
   11de8:	ldr	r1, [sp, #300]	; 0x12c
   11dec:	sbc	r1, r7, r1
   11df0:	adds	r3, ip, r3
   11df4:	ldr	ip, [sp, #292]	; 0x124
   11df8:	adc	r2, ip, r2
   11dfc:	ldr	ip, [sp]
   11e00:	subs	r3, ip, r3
   11e04:	str	r3, [sp]
   11e08:	ldr	r3, [sp, #4]
   11e0c:	sbc	r3, r3, r2
   11e10:	str	r3, [sp, #4]
   11e14:	ldrd	r2, [sp]
   11e18:	ldr	ip, [sp, #204]	; 0xcc
   11e1c:	strd	r2, [ip]
   11e20:	add	sp, sp, #228	; 0xe4
   11e24:	ldrd	r4, [sp]
   11e28:	ldrd	r6, [sp, #8]
   11e2c:	ldrd	r8, [sp, #16]
   11e30:	ldrd	sl, [sp, #24]
   11e34:	add	sp, sp, #32
   11e38:	pop	{pc}		; (ldr pc, [sp], #4)
   11e3c:	add	r2, sp, #296	; 0x128
   11e40:	moveq	r3, #1
   11e44:	ldrd	r4, [r2]
   11e48:	movne	r3, #0
   11e4c:	cmp	r5, r7
   11e50:	cmpeq	r4, r6
   11e54:	movhi	r3, #0
   11e58:	andls	r3, r3, #1
   11e5c:	cmp	r3, #0
   11e60:	beq	11e14 <__assert_fail@plt+0xce8>
   11e64:	b	11dc0 <__assert_fail@plt+0xc94>
   11e68:	movw	r3, #29224	; 0x7228
   11e6c:	movt	r3, #2
   11e70:	movw	r1, #41712	; 0xa2f0
   11e74:	movt	r1, #2
   11e78:	movw	r0, #41792	; 0xa340
   11e7c:	movt	r0, #2
   11e80:	movw	r2, #995	; 0x3e3
   11e84:	bl	1112c <__assert_fail@plt>
   11e88:	movw	r3, #29224	; 0x7228
   11e8c:	movt	r3, #2
   11e90:	movw	r1, #41712	; 0xa2f0
   11e94:	movt	r1, #2
   11e98:	movw	r0, #41760	; 0xa320
   11e9c:	movt	r0, #2
   11ea0:	movw	r2, #994	; 0x3e2
   11ea4:	bl	1112c <__assert_fail@plt>
   11ea8:	movw	r3, #29224	; 0x7228
   11eac:	movt	r3, #2
   11eb0:	movw	r1, #41712	; 0xa2f0
   11eb4:	movt	r1, #2
   11eb8:	movw	r0, #41728	; 0xa300
   11ebc:	movt	r0, #2
   11ec0:	movw	r2, #993	; 0x3e1
   11ec4:	bl	1112c <__assert_fail@plt>
   11ec8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ecc:	mov	r5, #64	; 0x40
   11ed0:	ldr	r4, [r2]
   11ed4:	strd	r6, [sp, #8]
   11ed8:	mov	r6, r0
   11edc:	strd	r8, [sp, #16]
   11ee0:	strd	sl, [sp, #24]
   11ee4:	str	lr, [sp, #32]
   11ee8:	sub	sp, sp, #116	; 0x74
   11eec:	ldrd	r8, [r3]
   11ef0:	str	r5, [sp, #60]	; 0x3c
   11ef4:	str	r2, [sp, #108]	; 0x6c
   11ef8:	ldr	r7, [r2, #4]
   11efc:	ldrd	r2, [r3, #8]
   11f00:	strd	r8, [sp, #64]	; 0x40
   11f04:	ldr	ip, [sp, #160]	; 0xa0
   11f08:	mov	r5, r7
   11f0c:	ldrd	sl, [r1]
   11f10:	strd	r2, [sp, #72]	; 0x48
   11f14:	ldrd	r0, [r1, #8]
   11f18:	str	r6, [sp, #104]	; 0x68
   11f1c:	ldrd	r8, [ip]
   11f20:	ldrd	r2, [ip, #8]
   11f24:	mov	r6, r0
   11f28:	mov	r7, r1
   11f2c:	strd	r2, [sp, #80]	; 0x50
   11f30:	strd	r8, [sp, #88]	; 0x58
   11f34:	b	11f98 <__assert_fail@plt+0xe6c>
   11f38:	mov	r3, r7
   11f3c:	mov	r2, r6
   11f40:	ldr	r8, [sp, #104]	; 0x68
   11f44:	strd	r6, [sp, #8]
   11f48:	lsr	r4, r4, #1
   11f4c:	ldrd	r6, [sp, #72]	; 0x48
   11f50:	strd	sl, [sp]
   11f54:	orr	r4, r4, r5, lsl #31
   11f58:	strd	sl, [sp, #16]
   11f5c:	lsr	r5, r5, #1
   11f60:	mov	r0, r8
   11f64:	strd	r6, [sp, #24]
   11f68:	ldrd	r6, [sp, #64]	; 0x40
   11f6c:	strd	r6, [sp, #32]
   11f70:	ldrd	r6, [sp, #152]	; 0x98
   11f74:	strd	r6, [sp, #40]	; 0x28
   11f78:	bl	11608 <__assert_fail@plt+0x4dc>
   11f7c:	ldr	r3, [sp, #60]	; 0x3c
   11f80:	mov	sl, r0
   11f84:	mov	fp, r1
   11f88:	ldrd	r6, [r8]
   11f8c:	subs	r3, r3, #1
   11f90:	str	r3, [sp, #60]	; 0x3c
   11f94:	beq	11ffc <__assert_fail@plt+0xed0>
   11f98:	and	r3, r4, #1
   11f9c:	str	r3, [sp, #48]	; 0x30
   11fa0:	mov	r3, #0
   11fa4:	str	r3, [sp, #52]	; 0x34
   11fa8:	ldrd	r2, [sp, #48]	; 0x30
   11fac:	orrs	r3, r2, r3
   11fb0:	beq	11f38 <__assert_fail@plt+0xe0c>
   11fb4:	ldrd	r8, [sp, #72]	; 0x48
   11fb8:	strd	r6, [sp, #8]
   11fbc:	strd	sl, [sp, #16]
   11fc0:	ldrd	r0, [sp, #88]	; 0x58
   11fc4:	ldrd	r2, [sp, #80]	; 0x50
   11fc8:	strd	r8, [sp, #24]
   11fcc:	ldrd	r8, [sp, #64]	; 0x40
   11fd0:	strd	r0, [sp]
   11fd4:	ldr	r0, [sp, #104]	; 0x68
   11fd8:	strd	r8, [sp, #32]
   11fdc:	ldrd	r8, [sp, #152]	; 0x98
   11fe0:	strd	r8, [sp, #40]	; 0x28
   11fe4:	bl	11608 <__assert_fail@plt+0x4dc>
   11fe8:	ldr	r3, [sp, #104]	; 0x68
   11fec:	strd	r0, [sp, #88]	; 0x58
   11ff0:	ldrd	r2, [r3]
   11ff4:	strd	r2, [sp, #80]	; 0x50
   11ff8:	b	11f38 <__assert_fail@plt+0xe0c>
   11ffc:	mov	r2, r6
   12000:	mov	r3, r7
   12004:	ldr	r5, [sp, #60]	; 0x3c
   12008:	ldr	r1, [sp, #108]	; 0x6c
   1200c:	ldr	r6, [sp, #104]	; 0x68
   12010:	ldrd	r8, [r1, #8]
   12014:	orrs	r1, r8, r9
   12018:	beq	120e8 <__assert_fail@plt+0xfbc>
   1201c:	mov	r4, r6
   12020:	strd	r2, [sp, #48]	; 0x30
   12024:	b	12084 <__assert_fail@plt+0xf58>
   12028:	ldrd	r2, [sp, #48]	; 0x30
   1202c:	mov	r0, r4
   12030:	strd	sl, [sp]
   12034:	ldrd	r6, [sp, #72]	; 0x48
   12038:	strd	r2, [sp, #8]
   1203c:	strd	sl, [sp, #16]
   12040:	strd	r6, [sp, #24]
   12044:	ldrd	r6, [sp, #64]	; 0x40
   12048:	strd	r6, [sp, #32]
   1204c:	ldrd	r6, [sp, #152]	; 0x98
   12050:	strd	r6, [sp, #40]	; 0x28
   12054:	bl	11608 <__assert_fail@plt+0x4dc>
   12058:	lsr	r3, r8, #1
   1205c:	mov	sl, r0
   12060:	mov	fp, r1
   12064:	ldrd	r0, [r4]
   12068:	lsr	r2, r9, #1
   1206c:	orr	r3, r3, r9, lsl #31
   12070:	mov	r9, r2
   12074:	mov	r8, r3
   12078:	orrs	r3, r8, r9
   1207c:	strd	r0, [sp, #48]	; 0x30
   12080:	beq	120e4 <__assert_fail@plt+0xfb8>
   12084:	and	r3, r8, #1
   12088:	str	r3, [sp, #96]	; 0x60
   1208c:	str	r5, [sp, #100]	; 0x64
   12090:	ldrd	r2, [sp, #96]	; 0x60
   12094:	orrs	r3, r2, r3
   12098:	beq	12028 <__assert_fail@plt+0xefc>
   1209c:	ldrd	r6, [sp, #48]	; 0x30
   120a0:	ldrd	r2, [sp, #80]	; 0x50
   120a4:	ldrd	r0, [sp, #88]	; 0x58
   120a8:	strd	sl, [sp, #16]
   120ac:	strd	r6, [sp, #8]
   120b0:	ldrd	r6, [sp, #72]	; 0x48
   120b4:	strd	r0, [sp]
   120b8:	mov	r0, r4
   120bc:	strd	r6, [sp, #24]
   120c0:	ldrd	r6, [sp, #64]	; 0x40
   120c4:	strd	r6, [sp, #32]
   120c8:	ldrd	r6, [sp, #152]	; 0x98
   120cc:	strd	r6, [sp, #40]	; 0x28
   120d0:	bl	11608 <__assert_fail@plt+0x4dc>
   120d4:	ldrd	r2, [r4]
   120d8:	strd	r2, [sp, #80]	; 0x50
   120dc:	strd	r0, [sp, #88]	; 0x58
   120e0:	b	12028 <__assert_fail@plt+0xefc>
   120e4:	mov	r6, r4
   120e8:	ldrd	r2, [sp, #80]	; 0x50
   120ec:	ldrd	r0, [sp, #88]	; 0x58
   120f0:	strd	r2, [r6]
   120f4:	add	sp, sp, #116	; 0x74
   120f8:	ldrd	r4, [sp]
   120fc:	ldrd	r6, [sp, #8]
   12100:	ldrd	r8, [sp, #16]
   12104:	ldrd	sl, [sp, #24]
   12108:	add	sp, sp, #32
   1210c:	pop	{pc}		; (ldr pc, [sp], #4)
   12110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12114:	mov	r4, r2
   12118:	mov	r5, r3
   1211c:	strd	r6, [sp, #8]
   12120:	mov	r3, r0
   12124:	mov	r7, r0
   12128:	strd	r8, [sp, #16]
   1212c:	strd	sl, [sp, #24]
   12130:	str	lr, [sp, #32]
   12134:	sub	sp, sp, #108	; 0x6c
   12138:	ldr	r8, [sp, #156]	; 0x9c
   1213c:	add	r1, sp, #144	; 0x90
   12140:	add	r0, sp, #96	; 0x60
   12144:	ldm	r1, {r1, r2, r9}
   12148:	strd	r4, [sp]
   1214c:	str	r8, [sp, #8]
   12150:	strd	r4, [sp, #80]	; 0x50
   12154:	bl	11ec8 <__assert_fail@plt+0xd9c>
   12158:	ldrd	r2, [r8]
   1215c:	mov	r4, r0
   12160:	mov	r5, r1
   12164:	ldrd	r0, [sp, #96]	; 0x60
   12168:	cmp	r3, r5
   1216c:	cmpeq	r2, r4
   12170:	strd	r0, [sp, #88]	; 0x58
   12174:	ldrd	r0, [r8, #8]
   12178:	beq	122e0 <__assert_fail@plt+0x11b4>
   1217c:	ldrd	sl, [r7]
   12180:	strd	sl, [sp, #48]	; 0x30
   12184:	ldrd	sl, [r7, #8]
   12188:	strd	sl, [sp, #56]	; 0x38
   1218c:	ldrd	sl, [sp, #48]	; 0x30
   12190:	subs	ip, sl, r2
   12194:	str	ip, [sp, #64]	; 0x40
   12198:	sbc	ip, fp, r3
   1219c:	cmp	r3, fp
   121a0:	cmpeq	r2, sl
   121a4:	ldrd	r2, [sp, #56]	; 0x38
   121a8:	str	ip, [sp, #68]	; 0x44
   121ac:	movhi	ip, #1
   121b0:	movls	ip, #0
   121b4:	ldrd	sl, [sp, #88]	; 0x58
   121b8:	subs	r2, r2, ip
   121bc:	sbc	r3, r3, #0
   121c0:	subs	ip, r2, r0
   121c4:	sbc	r3, r3, r1
   121c8:	str	ip, [sp, #72]	; 0x48
   121cc:	str	r3, [sp, #76]	; 0x4c
   121d0:	ldrd	r2, [sp, #64]	; 0x40
   121d4:	ldrd	r0, [sp, #72]	; 0x48
   121d8:	cmp	r5, r3
   121dc:	cmpeq	r4, r2
   121e0:	movne	r3, #0
   121e4:	moveq	r3, #1
   121e8:	cmp	fp, r1
   121ec:	cmpeq	sl, r0
   121f0:	movne	r3, #0
   121f4:	cmp	r3, #0
   121f8:	str	r3, [sp, #88]	; 0x58
   121fc:	bne	122f0 <__assert_fail@plt+0x11c4>
   12200:	cmp	r9, #1
   12204:	bls	122c0 <__assert_fail@plt+0x1194>
   12208:	mov	r6, #1
   1220c:	str	r9, [sp, #152]	; 0x98
   12210:	b	12230 <__assert_fail@plt+0x1104>
   12214:	ldr	r3, [sp, #152]	; 0x98
   12218:	cmp	r3, r6
   1221c:	beq	122c0 <__assert_fail@plt+0x1194>
   12220:	ldrd	r2, [r7]
   12224:	strd	r2, [sp, #48]	; 0x30
   12228:	ldrd	r2, [r7, #8]
   1222c:	strd	r2, [sp, #56]	; 0x38
   12230:	strd	r4, [sp]
   12234:	mov	r2, sl
   12238:	mov	r3, fp
   1223c:	add	r0, sp, #96	; 0x60
   12240:	strd	sl, [sp, #8]
   12244:	add	r6, r6, #1
   12248:	strd	r4, [sp, #16]
   1224c:	ldrd	r4, [sp, #56]	; 0x38
   12250:	strd	r4, [sp, #24]
   12254:	ldrd	r4, [sp, #48]	; 0x30
   12258:	strd	r4, [sp, #32]
   1225c:	ldrd	r4, [sp, #80]	; 0x50
   12260:	strd	r4, [sp, #40]	; 0x28
   12264:	bl	11608 <__assert_fail@plt+0x4dc>
   12268:	ldrd	r2, [sp, #64]	; 0x40
   1226c:	mov	r4, r0
   12270:	mov	r5, r1
   12274:	ldrd	r0, [sp, #72]	; 0x48
   12278:	ldrd	sl, [sp, #96]	; 0x60
   1227c:	cmp	r3, r5
   12280:	cmpeq	r2, r4
   12284:	movne	r3, #0
   12288:	moveq	r3, #1
   1228c:	cmp	r1, fp
   12290:	cmpeq	r0, sl
   12294:	movne	r3, #0
   12298:	cmp	r3, #0
   1229c:	bne	122f0 <__assert_fail@plt+0x11c4>
   122a0:	ldrd	r2, [r8]
   122a4:	cmp	r3, r5
   122a8:	cmpeq	r2, r4
   122ac:	bne	12214 <__assert_fail@plt+0x10e8>
   122b0:	ldrd	r2, [r8, #8]
   122b4:	cmp	r3, fp
   122b8:	cmpeq	r2, sl
   122bc:	bne	12214 <__assert_fail@plt+0x10e8>
   122c0:	ldr	r0, [sp, #88]	; 0x58
   122c4:	add	sp, sp, #108	; 0x6c
   122c8:	ldrd	r4, [sp]
   122cc:	ldrd	r6, [sp, #8]
   122d0:	ldrd	r8, [sp, #16]
   122d4:	ldrd	sl, [sp, #24]
   122d8:	add	sp, sp, #32
   122dc:	pop	{pc}		; (ldr pc, [sp], #4)
   122e0:	ldrd	sl, [sp, #88]	; 0x58
   122e4:	cmp	r1, fp
   122e8:	cmpeq	r0, sl
   122ec:	bne	1217c <__assert_fail@plt+0x1050>
   122f0:	mov	r3, #1
   122f4:	str	r3, [sp, #88]	; 0x58
   122f8:	b	122c0 <__assert_fail@plt+0x1194>
   122fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   12300:	mov	r4, r2
   12304:	strd	r6, [sp, #8]
   12308:	movw	r6, #49548	; 0xc18c
   1230c:	movt	r6, #3
   12310:	str	lr, [sp, #16]
   12314:	sub	sp, sp, #28
   12318:	mov	r5, sp
   1231c:	mov	r2, r5
   12320:	bl	17a80 <__assert_fail@plt+0x6954>
   12324:	sub	r5, r0, r5
   12328:	mov	r1, r0
   1232c:	rsb	r7, r5, #20
   12330:	cmp	r7, r4
   12334:	ldrcs	r4, [r6, #4]
   12338:	bcs	1235c <__assert_fail@plt+0x1230>
   1233c:	sub	r5, r5, #20
   12340:	mov	r2, #48	; 0x30
   12344:	ldr	r3, [r6, #4]
   12348:	add	r5, r5, r4
   1234c:	add	r4, r3, r5
   12350:	strb	r2, [r3], #1
   12354:	cmp	r4, r3
   12358:	bne	12350 <__assert_fail@plt+0x1224>
   1235c:	mov	r2, r7
   12360:	mov	r0, r4
   12364:	add	r4, r4, r7
   12368:	bl	10ed4 <memcpy@plt>
   1236c:	str	r4, [r6, #4]
   12370:	add	sp, sp, #28
   12374:	ldrd	r4, [sp]
   12378:	ldrd	r6, [sp, #8]
   1237c:	add	sp, sp, #16
   12380:	pop	{pc}		; (ldr pc, [sp], #4)
   12384:	push	{r0, r1, r2, r3}
   12388:	strd	r4, [sp, #-12]!
   1238c:	str	lr, [sp, #8]
   12390:	sub	sp, sp, #12
   12394:	add	r4, sp, #28
   12398:	ldr	r5, [sp, #24]
   1239c:	b	123a4 <__assert_fail@plt+0x1278>
   123a0:	blx	r5
   123a4:	add	r4, r4, #4
   123a8:	ldr	r3, [r4, #-4]
   123ac:	str	r4, [sp, #4]
   123b0:	subs	r0, r3, #0
   123b4:	bne	123a0 <__assert_fail@plt+0x1274>
   123b8:	add	sp, sp, #12
   123bc:	ldrd	r4, [sp]
   123c0:	ldr	lr, [sp, #8]
   123c4:	add	sp, sp, #12
   123c8:	add	sp, sp, #16
   123cc:	bx	lr
   123d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123d4:	ldr	r5, [r0]
   123d8:	ldr	r3, [r0, #4]
   123dc:	strd	r6, [sp, #8]
   123e0:	mov	r7, r1
   123e4:	strd	r8, [sp, #16]
   123e8:	mov	r9, r0
   123ec:	ldr	r8, [r0, #8]
   123f0:	strd	sl, [sp, #24]
   123f4:	str	lr, [sp, #32]
   123f8:	sub	sp, sp, #20
   123fc:	str	r3, [sp, #4]
   12400:	subs	r6, r8, #1
   12404:	bmi	12580 <__assert_fail@plt+0x1454>
   12408:	add	r4, r8, r8, lsl #1
   1240c:	mov	fp, r6
   12410:	lsl	r4, r4, #2
   12414:	sub	sl, r4, #12
   12418:	add	sl, r5, sl
   1241c:	b	12430 <__assert_fail@plt+0x1304>
   12420:	sub	fp, fp, #1
   12424:	sub	sl, sl, #12
   12428:	cmn	fp, #1
   1242c:	beq	12484 <__assert_fail@plt+0x1358>
   12430:	mov	r1, r7
   12434:	mov	r0, sl
   12438:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   1243c:	cmp	r0, #0
   12440:	bgt	12420 <__assert_fail@plt+0x12f4>
   12444:	mov	r0, sl
   12448:	mov	r1, r7
   1244c:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   12450:	cmp	r0, #0
   12454:	bne	12528 <__assert_fail@plt+0x13fc>
   12458:	ldr	r3, [sp, #4]
   1245c:	ldr	r2, [r3, fp, lsl #2]
   12460:	add	r2, r2, #1
   12464:	str	r2, [r3, fp, lsl #2]
   12468:	add	sp, sp, #20
   1246c:	ldrd	r4, [sp]
   12470:	ldrd	r6, [sp, #8]
   12474:	ldrd	r8, [sp, #16]
   12478:	ldrd	sl, [sp, #24]
   1247c:	add	sp, sp, #32
   12480:	pop	{pc}		; (ldr pc, [sp], #4)
   12484:	add	r3, r8, #1
   12488:	add	r1, r4, #12
   1248c:	mov	r0, r5
   12490:	lsl	r5, r3, #2
   12494:	mov	r8, #0
   12498:	str	r3, [sp, #8]
   1249c:	bl	24544 <__assert_fail@plt+0x13418>
   124a0:	add	r4, r0, r4
   124a4:	mov	r1, r5
   124a8:	mov	sl, r0
   124ac:	ldr	r0, [sp, #4]
   124b0:	bl	24544 <__assert_fail@plt+0x13418>
   124b4:	str	r0, [sp, #4]
   124b8:	mov	r0, r4
   124bc:	bl	1a500 <__assert_fail@plt+0x93d4>
   124c0:	str	r8, [sp, #12]
   124c4:	ldr	r3, [sp, #4]
   124c8:	sub	r5, r5, #4
   124cc:	mov	r0, r4
   124d0:	add	r5, r3, r5
   124d4:	sub	r4, r0, #12
   124d8:	sub	r6, r6, #1
   124dc:	mov	r1, r4
   124e0:	bl	1a5fc <__assert_fail@plt+0x94d0>
   124e4:	ldr	r3, [r5, #-4]
   124e8:	cmp	r6, fp
   124ec:	mov	r0, r4
   124f0:	str	r3, [r5], #-4
   124f4:	bgt	124d4 <__assert_fail@plt+0x13a8>
   124f8:	ldr	r3, [sp, #12]
   124fc:	add	r4, sl, r3
   12500:	mov	r1, r7
   12504:	mov	r0, r4
   12508:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1250c:	ldr	r2, [sp, #4]
   12510:	mov	r3, #1
   12514:	str	r3, [r2, r8, lsl #2]
   12518:	ldr	r3, [sp, #8]
   1251c:	str	sl, [r9]
   12520:	strd	r2, [r9, #4]
   12524:	b	12468 <__assert_fail@plt+0x133c>
   12528:	add	r3, r8, #1
   1252c:	add	r1, r4, #12
   12530:	mov	r0, r5
   12534:	lsl	r5, r3, #2
   12538:	add	r8, fp, #1
   1253c:	str	r3, [sp, #8]
   12540:	bl	24544 <__assert_fail@plt+0x13418>
   12544:	add	r4, r0, r4
   12548:	mov	r1, r5
   1254c:	mov	sl, r0
   12550:	ldr	r0, [sp, #4]
   12554:	bl	24544 <__assert_fail@plt+0x13418>
   12558:	str	r0, [sp, #4]
   1255c:	mov	r0, r4
   12560:	bl	1a500 <__assert_fail@plt+0x93d4>
   12564:	add	r2, r8, r8, lsl #1
   12568:	cmp	r6, fp
   1256c:	lsl	r2, r2, #2
   12570:	str	r2, [sp, #12]
   12574:	bgt	124c4 <__assert_fail@plt+0x1398>
   12578:	add	r4, sl, r2
   1257c:	b	12500 <__assert_fail@plt+0x13d4>
   12580:	add	r3, r8, #1
   12584:	mov	r0, r5
   12588:	add	r4, r3, r3, lsl #1
   1258c:	mov	r5, r3
   12590:	str	r3, [sp, #8]
   12594:	lsl	r4, r4, #2
   12598:	mov	r1, r4
   1259c:	sub	r4, r4, #12
   125a0:	bl	24544 <__assert_fail@plt+0x13418>
   125a4:	add	r4, r0, r4
   125a8:	mov	sl, r0
   125ac:	lsl	r1, r5, #2
   125b0:	ldr	r0, [sp, #4]
   125b4:	bl	24544 <__assert_fail@plt+0x13418>
   125b8:	str	r0, [sp, #4]
   125bc:	mov	r0, r4
   125c0:	bl	1a500 <__assert_fail@plt+0x93d4>
   125c4:	b	12500 <__assert_fail@plt+0x13d4>
   125c8:	strd	r4, [sp, #-16]!
   125cc:	movw	r4, #49548	; 0xc18c
   125d0:	movt	r4, #3
   125d4:	ldm	r4, {r3, r5}
   125d8:	mov	r0, #1
   125dc:	str	r6, [sp, #8]
   125e0:	str	lr, [sp, #12]
   125e4:	sub	r5, r5, r3
   125e8:	mov	r1, r3
   125ec:	mov	r2, r5
   125f0:	bl	179f8 <__assert_fail@plt+0x68cc>
   125f4:	cmp	r0, r5
   125f8:	bne	12614 <__assert_fail@plt+0x14e8>
   125fc:	ldr	r3, [r4]
   12600:	ldr	r6, [sp, #8]
   12604:	str	r3, [r4, #4]
   12608:	ldrd	r4, [sp]
   1260c:	add	sp, sp, #12
   12610:	pop	{pc}		; (ldr pc, [sp], #4)
   12614:	bl	11024 <__errno_location@plt>
   12618:	ldr	r4, [r0]
   1261c:	mov	r2, #5
   12620:	movw	r1, #41824	; 0xa360
   12624:	movt	r1, #2
   12628:	mov	r0, #0
   1262c:	bl	10f04 <dcgettext@plt>
   12630:	mov	r3, r0
   12634:	movw	r2, #43012	; 0xa804
   12638:	movt	r2, #2
   1263c:	mov	r0, #1
   12640:	mov	r1, r4
   12644:	bl	10f94 <error@plt>
   12648:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1264c:	mov	r4, r2
   12650:	mov	r5, r3
   12654:	orrs	r2, r4, r5
   12658:	strd	r6, [sp, #8]
   1265c:	str	r8, [sp, #16]
   12660:	str	lr, [sp, #20]
   12664:	ldrd	r6, [sp, #24]
   12668:	beq	12698 <__assert_fail@plt+0x156c>
   1266c:	mov	r3, r0
   12670:	ldrd	r0, [r0, #8]
   12674:	orrs	r2, r0, r1
   12678:	bne	126c0 <__assert_fail@plt+0x1594>
   1267c:	ldr	r8, [sp, #16]
   12680:	strd	r6, [r3]
   12684:	strd	r4, [r3, #8]
   12688:	ldrd	r4, [sp]
   1268c:	ldrd	r6, [sp, #8]
   12690:	add	sp, sp, #20
   12694:	pop	{pc}		; (ldr pc, [sp], #4)
   12698:	mov	r1, #1
   1269c:	mov	r2, r6
   126a0:	ldrd	r4, [sp]
   126a4:	mov	r3, r7
   126a8:	str	r1, [sp, #24]
   126ac:	ldrd	r6, [sp, #8]
   126b0:	ldr	r8, [sp, #16]
   126b4:	ldr	lr, [sp, #20]
   126b8:	add	sp, sp, #24
   126bc:	b	11450 <__assert_fail@plt+0x324>
   126c0:	movw	r1, #41712	; 0xa2f0
   126c4:	movt	r1, #2
   126c8:	ldr	r3, [pc, #12]	; 126dc <__assert_fail@plt+0x15b0>
   126cc:	movw	r0, #41836	; 0xa36c
   126d0:	movt	r0, #2
   126d4:	movw	r2, #558	; 0x22e
   126d8:	bl	1112c <__assert_fail@plt>
   126dc:	andeq	r7, r2, r4, lsr r2
   126e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126e4:	strd	r6, [sp, #8]
   126e8:	strd	r8, [sp, #16]
   126ec:	mov	r9, #0
   126f0:	strd	sl, [sp, #24]
   126f4:	mov	r7, r9
   126f8:	str	lr, [sp, #32]
   126fc:	sub	sp, sp, #60	; 0x3c
   12700:	ldr	ip, [sp, #96]	; 0x60
   12704:	str	r0, [sp, #36]	; 0x24
   12708:	ldr	lr, [sp, #100]	; 0x64
   1270c:	ldrd	r4, [sp, #104]	; 0x68
   12710:	and	r6, ip, #1
   12714:	orrs	r1, r6, r7
   12718:	ldrd	r6, [sp, #112]	; 0x70
   1271c:	bne	1275c <__assert_fail@plt+0x1630>
   12720:	lsr	ip, ip, #1
   12724:	mov	r1, r9
   12728:	lsr	r8, r2, #1
   1272c:	orr	ip, ip, lr, lsl #31
   12730:	lsl	r7, r2, #31
   12734:	orr	r8, r8, r3, lsl #31
   12738:	and	r0, ip, #1
   1273c:	lsr	r5, r3, #1
   12740:	orrs	r4, r0, r1
   12744:	mov	r2, r8
   12748:	orr	lr, r7, lr, lsr #1
   1274c:	mov	r3, r5
   12750:	beq	12720 <__assert_fail@plt+0x15f4>
   12754:	ldrd	r4, [sp, #104]	; 0x68
   12758:	ldrd	r6, [sp, #112]	; 0x70
   1275c:	mov	r0, ip
   12760:	mov	r1, lr
   12764:	mov	ip, #0
   12768:	orr	lr, r2, r4
   1276c:	str	lr, [sp]
   12770:	orr	lr, r3, r5
   12774:	str	lr, [sp, #4]
   12778:	ldrd	r8, [sp]
   1277c:	orrs	lr, r8, r9
   12780:	beq	128b8 <__assert_fail@plt+0x178c>
   12784:	cmp	r3, r5
   12788:	cmpeq	r2, r4
   1278c:	bhi	12844 <__assert_fail@plt+0x1718>
   12790:	moveq	lr, #1
   12794:	movne	lr, #0
   12798:	cmp	r1, r7
   1279c:	cmpeq	r0, r6
   127a0:	movhi	r8, #1
   127a4:	movls	r8, #0
   127a8:	tst	lr, r8
   127ac:	bne	12844 <__assert_fail@plt+0x1718>
   127b0:	cmp	r3, r5
   127b4:	cmpeq	r2, r4
   127b8:	bcc	127d4 <__assert_fail@plt+0x16a8>
   127bc:	cmp	r1, r7
   127c0:	cmpeq	r0, r6
   127c4:	movcs	lr, #0
   127c8:	andcc	lr, lr, #1
   127cc:	cmp	lr, #0
   127d0:	beq	12978 <__assert_fail@plt+0x184c>
   127d4:	subs	r6, r6, r0
   127d8:	strd	r2, [sp, #24]
   127dc:	sbc	r7, r7, r1
   127e0:	subs	lr, r4, r2
   127e4:	str	lr, [sp, #16]
   127e8:	sbc	lr, r5, r3
   127ec:	str	lr, [sp, #20]
   127f0:	mov	lr, r8
   127f4:	ldrd	r8, [sp, #8]
   127f8:	ldrd	r4, [sp, #16]
   127fc:	subs	r4, r4, lr
   12800:	sbc	r5, r5, #0
   12804:	lsr	lr, r6, #1
   12808:	mov	fp, ip
   1280c:	lsr	r3, r7, #1
   12810:	orr	r6, lr, r7, lsl #31
   12814:	lsr	lr, r4, #1
   12818:	orr	r7, r3, r4, lsl #31
   1281c:	and	sl, r6, #1
   12820:	lsr	r3, r5, #1
   12824:	orr	lr, lr, r5, lsl #31
   12828:	mov	r5, r3
   1282c:	orrs	r3, sl, fp
   12830:	mov	r4, lr
   12834:	beq	12804 <__assert_fail@plt+0x16d8>
   12838:	strd	r8, [sp, #8]
   1283c:	ldrd	r2, [sp, #24]
   12840:	b	12768 <__assert_fail@plt+0x163c>
   12844:	cmp	r1, r7
   12848:	strd	r4, [sp, #104]	; 0x68
   1284c:	cmpeq	r0, r6
   12850:	movcc	r8, #1
   12854:	movcs	r8, #0
   12858:	subs	r0, r0, r6
   1285c:	sbc	r1, r1, r7
   12860:	subs	r9, r2, r4
   12864:	sbc	lr, r3, r5
   12868:	subs	r2, r9, r8
   1286c:	str	lr, [sp, #24]
   12870:	ldr	r8, [sp, #24]
   12874:	sbc	r3, r8, ip
   12878:	lsr	lr, r0, #1
   1287c:	mov	r9, ip
   12880:	lsr	r5, r1, #1
   12884:	orr	r0, lr, r1, lsl #31
   12888:	lsr	lr, r2, #1
   1288c:	orr	r1, r5, r2, lsl #31
   12890:	and	r8, r0, #1
   12894:	orr	lr, lr, r3, lsl #31
   12898:	lsr	r5, r3, #1
   1289c:	mov	r2, lr
   128a0:	orrs	lr, r8, r9
   128a4:	mov	r3, r5
   128a8:	beq	12878 <__assert_fail@plt+0x174c>
   128ac:	strd	r8, [sp, #8]
   128b0:	ldrd	r4, [sp, #104]	; 0x68
   128b4:	b	12768 <__assert_fail@plt+0x163c>
   128b8:	ldr	ip, [sp, #36]	; 0x24
   128bc:	mov	r4, r8
   128c0:	mov	r5, r9
   128c4:	and	r2, r0, #1
   128c8:	mov	r3, #0
   128cc:	orrs	r3, r2, r3
   128d0:	strd	r4, [ip]
   128d4:	bne	12954 <__assert_fail@plt+0x1828>
   128d8:	lsr	ip, r6, #1
   128dc:	mov	lr, #0
   128e0:	lsr	r4, r7, #1
   128e4:	orr	ip, ip, r7, lsl #31
   128e8:	b	12914 <__assert_fail@plt+0x17e8>
   128ec:	and	r3, r2, r6
   128f0:	and	r1, r7, r2
   128f4:	adds	ip, ip, r3
   128f8:	eor	r3, r2, r6
   128fc:	adc	r4, r4, r1
   12900:	eor	r1, r7, r2
   12904:	subs	r3, r3, r2
   12908:	sbc	r2, r1, r2
   1290c:	mov	r0, r3
   12910:	mov	r1, r2
   12914:	and	r8, r0, #1
   12918:	lsr	r3, r0, #1
   1291c:	mov	r9, lr
   12920:	orrs	r5, r8, r9
   12924:	lsr	r2, r1, #1
   12928:	orr	r3, r3, r1, lsl #31
   1292c:	beq	1290c <__assert_fail@plt+0x17e0>
   12930:	subs	r6, r3, ip
   12934:	sbc	r7, r2, r4
   12938:	orrs	r3, r6, r7
   1293c:	asr	r2, r7, #31
   12940:	bne	128ec <__assert_fail@plt+0x17c0>
   12944:	bic	r3, r0, #1
   12948:	adds	r0, r3, #1
   1294c:	adc	r1, r1, #0
   12950:	b	1295c <__assert_fail@plt+0x1830>
   12954:	orrs	r3, r6, r7
   12958:	bne	12984 <__assert_fail@plt+0x1858>
   1295c:	add	sp, sp, #60	; 0x3c
   12960:	ldrd	r4, [sp]
   12964:	ldrd	r6, [sp, #8]
   12968:	ldrd	r8, [sp, #16]
   1296c:	ldrd	sl, [sp, #24]
   12970:	add	sp, sp, #32
   12974:	pop	{pc}		; (ldr pc, [sp], #4)
   12978:	ldr	ip, [sp, #36]	; 0x24
   1297c:	strd	r2, [ip]
   12980:	b	1295c <__assert_fail@plt+0x1830>
   12984:	mov	r2, r0
   12988:	mov	r3, r1
   1298c:	mov	r0, r6
   12990:	mov	r1, r7
   12994:	mov	r6, r2
   12998:	mov	r7, r3
   1299c:	b	128d8 <__assert_fail@plt+0x17ac>
   129a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129a4:	strd	r6, [sp, #8]
   129a8:	mov	r7, r3
   129ac:	mov	r6, r2
   129b0:	strd	r8, [sp, #16]
   129b4:	strd	sl, [sp, #24]
   129b8:	str	lr, [sp, #32]
   129bc:	sub	sp, sp, #28
   129c0:	ldrd	sl, [sp, #64]	; 0x40
   129c4:	str	r0, [sp, #16]
   129c8:	ldr	r3, [sp, #80]	; 0x50
   129cc:	str	r3, [sp, #12]
   129d0:	ldrd	r2, [sp, #72]	; 0x48
   129d4:	orrs	r3, r2, r3
   129d8:	ldr	r3, [sp, #84]	; 0x54
   129dc:	str	r3, [sp, #20]
   129e0:	beq	12bf0 <__assert_fail@plt+0x1ac4>
   129e4:	orrs	r3, r6, r7
   129e8:	beq	12bc4 <__assert_fail@plt+0x1a98>
   129ec:	ldr	r0, [sp, #76]	; 0x4c
   129f0:	mov	r1, #0
   129f4:	mov	r2, r1
   129f8:	and	r3, r0, #-16777216	; 0xff000000
   129fc:	orrs	r3, r2, r3
   12a00:	ldrd	r2, [sp, #72]	; 0x48
   12a04:	bne	12a4c <__assert_fail@plt+0x1920>
   12a08:	mov	lr, r1
   12a0c:	lsl	r0, r3, #8
   12a10:	mov	r4, lr
   12a14:	add	r1, r1, #8
   12a18:	lsl	ip, r2, #8
   12a1c:	orr	r0, r0, r2, lsr #24
   12a20:	mov	r2, ip
   12a24:	and	r5, r0, #-16777216	; 0xff000000
   12a28:	mov	r3, r0
   12a2c:	orrs	r0, r4, r5
   12a30:	beq	12a0c <__assert_fail@plt+0x18e0>
   12a34:	cmp	r2, #0
   12a38:	sbcs	r0, r3, #0
   12a3c:	blt	12a58 <__assert_fail@plt+0x192c>
   12a40:	adds	r2, r2, r2
   12a44:	add	r1, r1, #1
   12a48:	adc	r3, r3, r3
   12a4c:	cmp	r2, #0
   12a50:	sbcs	r0, r3, #0
   12a54:	bge	12a40 <__assert_fail@plt+0x1914>
   12a58:	mov	r0, #0
   12a5c:	and	r3, r7, #-16777216	; 0xff000000
   12a60:	mov	r2, r0
   12a64:	orrs	r3, r2, r3
   12a68:	mov	r2, r6
   12a6c:	mov	r3, r7
   12a70:	bne	12ab8 <__assert_fail@plt+0x198c>
   12a74:	mov	r4, r0
   12a78:	lsl	ip, r3, #8
   12a7c:	mov	r8, r4
   12a80:	add	r0, r0, #8
   12a84:	lsl	lr, r2, #8
   12a88:	orr	ip, ip, r2, lsr #24
   12a8c:	mov	r2, lr
   12a90:	and	r9, ip, #-16777216	; 0xff000000
   12a94:	mov	r3, ip
   12a98:	orrs	ip, r8, r9
   12a9c:	beq	12a78 <__assert_fail@plt+0x194c>
   12aa0:	cmp	r2, #0
   12aa4:	sbcs	ip, r3, #0
   12aa8:	blt	12ac4 <__assert_fail@plt+0x1998>
   12aac:	adds	r2, r2, r2
   12ab0:	add	r0, r0, #1
   12ab4:	adc	r3, r3, r3
   12ab8:	cmp	r2, #0
   12abc:	sbcs	ip, r3, #0
   12ac0:	bge	12aac <__assert_fail@plt+0x1980>
   12ac4:	ldr	r9, [sp, #12]
   12ac8:	sub	r3, r1, r0
   12acc:	rsb	lr, r3, #64	; 0x40
   12ad0:	cmp	r3, #0
   12ad4:	ldr	r1, [sp, #20]
   12ad8:	rsb	r8, lr, #32
   12adc:	ldr	r0, [sp, #72]	; 0x48
   12ae0:	lsr	ip, r9, lr
   12ae4:	sub	r9, lr, #32
   12ae8:	ldr	r2, [sp, #76]	; 0x4c
   12aec:	orr	ip, ip, r1, lsl r8
   12af0:	sub	r8, r3, #32
   12af4:	lsl	r5, r1, r3
   12af8:	orr	ip, ip, r1, lsr r9
   12afc:	ldr	r9, [sp, #12]
   12b00:	lsl	r2, r2, r3
   12b04:	orr	r2, r2, r0, lsl r8
   12b08:	orr	r0, ip, r0, lsl r3
   12b0c:	orr	r5, r5, r9, lsl r8
   12b10:	rsb	r8, r3, #32
   12b14:	lsl	r4, r9, r3
   12b18:	str	r0, [sp]
   12b1c:	orr	r5, r5, r9, lsr r8
   12b20:	ldr	r0, [sp, #72]	; 0x48
   12b24:	orr	r2, r2, r0, lsr r8
   12b28:	orr	r2, r2, r1, lsr lr
   12b2c:	str	r2, [sp, #4]
   12b30:	ble	12bc4 <__assert_fail@plt+0x1a98>
   12b34:	ldrd	r0, [sp]
   12b38:	mov	r2, #0
   12b3c:	cmp	r7, r1
   12b40:	cmpeq	r6, r0
   12b44:	bhi	12b68 <__assert_fail@plt+0x1a3c>
   12b48:	moveq	ip, #1
   12b4c:	movne	ip, #0
   12b50:	cmp	fp, r5
   12b54:	cmpeq	sl, r4
   12b58:	movcc	ip, #0
   12b5c:	andcs	ip, ip, #1
   12b60:	cmp	ip, #0
   12b64:	beq	12b94 <__assert_fail@plt+0x1a68>
   12b68:	cmp	fp, r5
   12b6c:	mov	ip, #0
   12b70:	cmpeq	sl, r4
   12b74:	movcc	lr, #1
   12b78:	movcs	lr, ip
   12b7c:	subs	sl, sl, r4
   12b80:	sbc	fp, fp, r5
   12b84:	subs	r8, r6, r0
   12b88:	sbc	r9, r7, r1
   12b8c:	subs	r6, r8, lr
   12b90:	sbc	r7, r9, ip
   12b94:	lsr	ip, r4, #1
   12b98:	add	r2, r2, #1
   12b9c:	lsr	r8, r5, #1
   12ba0:	cmp	r3, r2
   12ba4:	orr	r4, ip, r5, lsl #31
   12ba8:	lsr	ip, r0, #1
   12bac:	lsr	lr, r1, #1
   12bb0:	orr	ip, ip, r1, lsl #31
   12bb4:	orr	r5, r8, r0, lsl #31
   12bb8:	mov	r1, lr
   12bbc:	mov	r0, ip
   12bc0:	bne	12b3c <__assert_fail@plt+0x1a10>
   12bc4:	ldr	r3, [sp, #16]
   12bc8:	mov	r0, sl
   12bcc:	mov	r1, fp
   12bd0:	strd	r6, [r3]
   12bd4:	add	sp, sp, #28
   12bd8:	ldrd	r4, [sp]
   12bdc:	ldrd	r6, [sp, #8]
   12be0:	ldrd	r8, [sp, #16]
   12be4:	ldrd	sl, [sp, #24]
   12be8:	add	sp, sp, #32
   12bec:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf0:	movw	r1, #41712	; 0xa2f0
   12bf4:	movt	r1, #2
   12bf8:	ldr	r3, [pc, #12]	; 12c0c <__assert_fail@plt+0x1ae0>
   12bfc:	movw	r0, #41860	; 0xa384
   12c00:	movt	r0, #2
   12c04:	movw	r2, #411	; 0x19b
   12c08:	bl	1112c <__assert_fail@plt>
   12c0c:	andeq	r7, r2, r8, asr #4
   12c10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c14:	mov	r4, r0
   12c18:	mov	r5, r1
   12c1c:	strd	r6, [sp, #8]
   12c20:	strd	sl, [sp, #24]
   12c24:	mov	fp, r3
   12c28:	orrs	r3, r4, r5
   12c2c:	mov	sl, r2
   12c30:	moveq	r0, r2
   12c34:	strd	r8, [sp, #16]
   12c38:	moveq	r1, fp
   12c3c:	moveq	r2, #0
   12c40:	str	lr, [sp, #32]
   12c44:	sub	sp, sp, #20
   12c48:	beq	12d54 <__assert_fail@plt+0x1c28>
   12c4c:	add	r3, pc, #292	; 0x124
   12c50:	ldrd	r2, [r3]
   12c54:	bl	27024 <__assert_fail@plt+0x15ef8>
   12c58:	add	r3, pc, #280	; 0x118
   12c5c:	ldrd	r2, [r3]
   12c60:	strd	r0, [sp, #8]
   12c64:	mov	r0, r4
   12c68:	mov	r1, r5
   12c6c:	bl	27024 <__assert_fail@plt+0x15ef8>
   12c70:	add	r1, pc, #256	; 0x100
   12c74:	ldrd	r0, [r1]
   12c78:	mov	r8, r2
   12c7c:	mov	r2, #0
   12c80:	mov	r9, r3
   12c84:	mov	r4, r2
   12c88:	mov	r3, r2
   12c8c:	mov	r5, r2
   12c90:	mov	lr, #64	; 0x40
   12c94:	lsr	ip, r4, #1
   12c98:	mov	r6, #0
   12c9c:	lsr	r7, r5, #1
   12ca0:	str	ip, [sp]
   12ca4:	adds	ip, r2, r2
   12ca8:	lsr	r2, r0, #1
   12cac:	str	r6, [sp, #4]
   12cb0:	adc	r6, r3, r3
   12cb4:	ldr	r3, [sp]
   12cb8:	orr	r2, r2, r1, lsl #31
   12cbc:	orr	r4, r3, r5, lsl #31
   12cc0:	mov	r3, r6
   12cc4:	orr	r5, r7, r0, lsl #31
   12cc8:	mov	r0, r2
   12ccc:	mov	r2, ip
   12cd0:	lsr	r7, r1, #1
   12cd4:	cmp	r7, r9
   12cd8:	mov	r1, r7
   12cdc:	cmpeq	r0, r8
   12ce0:	moveq	r7, #1
   12ce4:	movne	r7, #0
   12ce8:	bcc	12d04 <__assert_fail@plt+0x1bd8>
   12cec:	cmp	r5, fp
   12cf0:	cmpeq	r4, sl
   12cf4:	movhi	r7, #0
   12cf8:	andls	r7, r7, #1
   12cfc:	cmp	r7, #0
   12d00:	beq	12d38 <__assert_fail@plt+0x1c0c>
   12d04:	adds	r2, ip, #1
   12d08:	adc	r3, r6, #0
   12d0c:	cmp	r5, fp
   12d10:	cmpeq	r4, sl
   12d14:	movhi	ip, #1
   12d18:	movls	ip, #0
   12d1c:	subs	sl, sl, r4
   12d20:	sbc	fp, fp, r5
   12d24:	subs	r6, r8, r0
   12d28:	sbc	r7, r9, r1
   12d2c:	subs	r8, r6, ip
   12d30:	mov	ip, #0
   12d34:	sbc	r9, r7, ip
   12d38:	subs	lr, lr, #1
   12d3c:	bne	12c94 <__assert_fail@plt+0x1b68>
   12d40:	ldrd	r0, [sp, #8]
   12d44:	bl	12c10 <__assert_fail@plt+0x1ae4>
   12d48:	mov	r0, sl
   12d4c:	mov	r1, fp
   12d50:	mov	r2, #9
   12d54:	add	sp, sp, #20
   12d58:	ldrd	r4, [sp]
   12d5c:	ldrd	r6, [sp, #8]
   12d60:	ldrd	r8, [sp, #16]
   12d64:	ldrd	sl, [sp, #24]
   12d68:	ldr	lr, [sp, #32]
   12d6c:	add	sp, sp, #36	; 0x24
   12d70:	b	122fc <__assert_fail@plt+0x11d0>
   12d74:	nop	{0}
   12d78:	blcc	fe6c5580 <stdout@@GLIBC_2.4+0xfe6893fc>
   12d7c:	andeq	r0, r0, r0
   12d80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d84:	mov	r4, r3
   12d88:	strd	r6, [sp, #8]
   12d8c:	mov	r6, r0
   12d90:	mov	r7, r1
   12d94:	mov	r3, r6
   12d98:	mov	r1, r2
   12d9c:	ldr	r2, [sp, #24]
   12da0:	mov	r0, r4
   12da4:	str	r8, [sp, #16]
   12da8:	str	lr, [sp, #20]
   12dac:	ldr	r8, [sp, #28]
   12db0:	bl	1d854 <__assert_fail@plt+0xc728>
   12db4:	mov	r0, r4
   12db8:	mov	r1, #1
   12dbc:	bl	1ad74 <__assert_fail@plt+0x9c48>
   12dc0:	cmp	r0, #0
   12dc4:	bne	12de0 <__assert_fail@plt+0x1cb4>
   12dc8:	mov	r0, #1
   12dcc:	ldrd	r4, [sp]
   12dd0:	ldrd	r6, [sp, #8]
   12dd4:	ldr	r8, [sp, #16]
   12dd8:	add	sp, sp, #20
   12ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   12de0:	mov	r1, r7
   12de4:	mov	r0, r4
   12de8:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   12dec:	cmp	r0, #0
   12df0:	beq	12dc8 <__assert_fail@plt+0x1c9c>
   12df4:	cmp	r8, #1
   12df8:	movhi	r5, #1
   12dfc:	bhi	12e0c <__assert_fail@plt+0x1ce0>
   12e00:	b	12e4c <__assert_fail@plt+0x1d20>
   12e04:	cmp	r8, r5
   12e08:	beq	12e4c <__assert_fail@plt+0x1d20>
   12e0c:	mov	r3, r6
   12e10:	mov	r2, #2
   12e14:	mov	r1, r4
   12e18:	mov	r0, r4
   12e1c:	bl	1dca4 <__assert_fail@plt+0xcb78>
   12e20:	mov	r1, r7
   12e24:	mov	r0, r4
   12e28:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   12e2c:	cmp	r0, #0
   12e30:	mov	r1, #1
   12e34:	add	r5, r5, r1
   12e38:	mov	r0, r4
   12e3c:	beq	12dc8 <__assert_fail@plt+0x1c9c>
   12e40:	bl	1ad74 <__assert_fail@plt+0x9c48>
   12e44:	cmp	r0, #0
   12e48:	bne	12e04 <__assert_fail@plt+0x1cd8>
   12e4c:	mov	r0, #0
   12e50:	b	12dcc <__assert_fail@plt+0x1ca0>
   12e54:	mov	r3, #0
   12e58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12e5c:	mov	r5, r0
   12e60:	strd	r6, [sp, #8]
   12e64:	mov	r7, r1
   12e68:	strd	r8, [sp, #16]
   12e6c:	str	sl, [sp, #24]
   12e70:	str	lr, [sp, #28]
   12e74:	sub	sp, sp, #24
   12e78:	str	r3, [r1]
   12e7c:	str	r3, [r1, #4]
   12e80:	str	r3, [r1, #8]
   12e84:	bl	1acc8 <__assert_fail@plt+0x9b9c>
   12e88:	cmp	r0, #0
   12e8c:	bne	12eac <__assert_fail@plt+0x1d80>
   12e90:	add	sp, sp, #24
   12e94:	ldrd	r4, [sp]
   12e98:	ldrd	r6, [sp, #8]
   12e9c:	ldrd	r8, [sp, #16]
   12ea0:	ldr	sl, [sp, #24]
   12ea4:	add	sp, sp, #28
   12ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   12eac:	movw	r9, #49548	; 0xc18c
   12eb0:	movt	r9, #3
   12eb4:	ldrb	r3, [r9, #8]
   12eb8:	cmp	r3, #0
   12ebc:	bne	12fec <__assert_fail@plt+0x1ec0>
   12ec0:	mov	r0, sp
   12ec4:	bl	1a500 <__assert_fail@plt+0x93d4>
   12ec8:	mov	r1, #0
   12ecc:	mov	r0, r5
   12ed0:	bl	1e974 <__assert_fail@plt+0xd848>
   12ed4:	mov	r4, r0
   12ed8:	mov	r2, r0
   12edc:	mov	r1, r5
   12ee0:	mov	r0, r5
   12ee4:	bl	1c19c <__assert_fail@plt+0xb070>
   12ee8:	cmp	r4, #0
   12eec:	beq	12f18 <__assert_fail@plt+0x1dec>
   12ef0:	mov	r1, #2
   12ef4:	add	r0, sp, #12
   12ef8:	bl	1a6a0 <__assert_fail@plt+0x9574>
   12efc:	add	r1, sp, #12
   12f00:	mov	r0, r7
   12f04:	bl	123d0 <__assert_fail@plt+0x12a4>
   12f08:	add	r0, sp, #12
   12f0c:	bl	1a564 <__assert_fail@plt+0x9438>
   12f10:	subs	r4, r4, #1
   12f14:	bne	12ef0 <__assert_fail@plt+0x1dc4>
   12f18:	movw	r8, #29224	; 0x7228
   12f1c:	movt	r8, #2
   12f20:	mov	r6, #1
   12f24:	mov	r4, #3
   12f28:	movw	sl, #669	; 0x29d
   12f2c:	b	12f54 <__assert_fail@plt+0x1e28>
   12f30:	ldrb	r3, [r3, #40]	; 0x28
   12f34:	add	r6, r6, #1
   12f38:	add	r4, r4, r3
   12f3c:	mul	r1, r4, r4
   12f40:	bl	1ad74 <__assert_fail@plt+0x9c48>
   12f44:	cmp	r0, #0
   12f48:	blt	12fa4 <__assert_fail@plt+0x1e78>
   12f4c:	cmp	r6, sl
   12f50:	beq	12fa4 <__assert_fail@plt+0x1e78>
   12f54:	mov	r1, r4
   12f58:	mov	r0, r5
   12f5c:	bl	1c56c <__assert_fail@plt+0xb440>
   12f60:	cmp	r0, #0
   12f64:	add	r3, r8, r6
   12f68:	mov	r2, r4
   12f6c:	mov	r1, r5
   12f70:	mov	r0, r5
   12f74:	beq	12f30 <__assert_fail@plt+0x1e04>
   12f78:	bl	1c3e8 <__assert_fail@plt+0xb2bc>
   12f7c:	mov	r1, r4
   12f80:	add	r0, sp, #12
   12f84:	bl	1a6a0 <__assert_fail@plt+0x9574>
   12f88:	add	r1, sp, #12
   12f8c:	mov	r0, r7
   12f90:	bl	123d0 <__assert_fail@plt+0x12a4>
   12f94:	add	r0, sp, #12
   12f98:	bl	1a564 <__assert_fail@plt+0x9438>
   12f9c:	cmp	r6, sl
   12fa0:	bne	12f54 <__assert_fail@plt+0x1e28>
   12fa4:	mov	r0, sp
   12fa8:	bl	1a564 <__assert_fail@plt+0x9438>
   12fac:	mov	r1, #1
   12fb0:	mov	r0, r5
   12fb4:	bl	1ad74 <__assert_fail@plt+0x9c48>
   12fb8:	cmp	r0, #0
   12fbc:	beq	12e90 <__assert_fail@plt+0x1d64>
   12fc0:	ldrb	r3, [r9, #8]
   12fc4:	cmp	r3, #0
   12fc8:	bne	13024 <__assert_fail@plt+0x1ef8>
   12fcc:	mov	r0, r5
   12fd0:	bl	13048 <__assert_fail@plt+0x1f1c>
   12fd4:	cmp	r0, #0
   12fd8:	beq	13010 <__assert_fail@plt+0x1ee4>
   12fdc:	mov	r1, r5
   12fe0:	mov	r0, r7
   12fe4:	bl	123d0 <__assert_fail@plt+0x12a4>
   12fe8:	b	12e90 <__assert_fail@plt+0x1d64>
   12fec:	movw	r3, #49528	; 0xc178
   12ff0:	movt	r3, #3
   12ff4:	movw	r0, #41868	; 0xa38c
   12ff8:	movt	r0, #2
   12ffc:	ldr	r3, [r3]
   13000:	mov	r2, #17
   13004:	mov	r1, #1
   13008:	bl	10f58 <fwrite@plt>
   1300c:	b	12ec0 <__assert_fail@plt+0x1d94>
   13010:	mov	r2, r7
   13014:	mov	r0, r5
   13018:	mov	r1, #1
   1301c:	bl	13270 <__assert_fail@plt+0x2144>
   13020:	b	12e90 <__assert_fail@plt+0x1d64>
   13024:	movw	r3, #49528	; 0xc178
   13028:	movt	r3, #3
   1302c:	movw	r0, #41888	; 0xa3a0
   13030:	movt	r0, #2
   13034:	ldr	r3, [r3]
   13038:	mov	r2, #19
   1303c:	mov	r1, #1
   13040:	bl	10f58 <fwrite@plt>
   13044:	b	12fcc <__assert_fail@plt+0x1ea0>
   13048:	mov	r1, #1
   1304c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13050:	strd	r6, [sp, #8]
   13054:	mov	r7, r0
   13058:	strd	r8, [sp, #16]
   1305c:	strd	sl, [sp, #24]
   13060:	str	lr, [sp, #32]
   13064:	sub	sp, sp, #84	; 0x54
   13068:	bl	1ad74 <__assert_fail@plt+0x9c48>
   1306c:	cmp	r0, #0
   13070:	ble	13258 <__assert_fail@plt+0x212c>
   13074:	movw	r1, #60793	; 0xed79
   13078:	movt	r1, #381	; 0x17d
   1307c:	mov	r0, r7
   13080:	bl	1ad74 <__assert_fail@plt+0x9c48>
   13084:	cmp	r0, #0
   13088:	blt	131f8 <__assert_fail@plt+0x20cc>
   1308c:	mov	r5, #0
   13090:	add	r4, sp, #56	; 0x38
   13094:	add	r9, sp, #20
   13098:	add	r3, sp, #44	; 0x2c
   1309c:	add	r2, sp, #32
   130a0:	mov	r1, r9
   130a4:	strd	r4, [sp]
   130a8:	movw	r0, #42240	; 0xa500
   130ac:	movt	r0, #1
   130b0:	bl	12384 <__assert_fail@plt+0x1258>
   130b4:	mov	r2, #1
   130b8:	add	r0, sp, #44	; 0x2c
   130bc:	mov	r1, r7
   130c0:	bl	1b0f0 <__assert_fail@plt+0x9fc4>
   130c4:	mov	r1, r5
   130c8:	add	r0, sp, #44	; 0x2c
   130cc:	bl	1e974 <__assert_fail@plt+0xd848>
   130d0:	mov	r2, r0
   130d4:	mov	sl, r0
   130d8:	add	r1, sp, #44	; 0x2c
   130dc:	mov	r0, r9
   130e0:	bl	1c1c4 <__assert_fail@plt+0xb098>
   130e4:	add	r0, sp, #32
   130e8:	mov	r1, #2
   130ec:	bl	1a5e8 <__assert_fail@plt+0x94bc>
   130f0:	mov	r3, r4
   130f4:	add	r2, sp, #32
   130f8:	stm	sp, {r9, sl}
   130fc:	add	r1, sp, #44	; 0x2c
   13100:	mov	r0, r7
   13104:	bl	12d80 <__assert_fail@plt+0x1c54>
   13108:	subs	r3, r0, #0
   1310c:	str	r3, [sp, #12]
   13110:	beq	13230 <__assert_fail@plt+0x2104>
   13114:	ldr	r8, [pc, #336]	; 1326c <__assert_fail@plt+0x2140>
   13118:	add	r1, sp, #44	; 0x2c
   1311c:	mov	r0, r4
   13120:	bl	1a5fc <__assert_fail@plt+0x94d0>
   13124:	add	r1, sp, #68	; 0x44
   13128:	mov	r0, r4
   1312c:	bl	12e54 <__assert_fail@plt+0x1d28>
   13130:	add	fp, r8, #668	; 0x29c
   13134:	ldr	r3, [sp, #76]	; 0x4c
   13138:	cmp	r3, #0
   1313c:	beq	13228 <__assert_fail@plt+0x20fc>
   13140:	mov	r6, #0
   13144:	mov	r5, r6
   13148:	ldr	r2, [sp, #68]	; 0x44
   1314c:	add	r1, sp, #44	; 0x2c
   13150:	mov	r0, r4
   13154:	add	r5, r5, #1
   13158:	add	r2, r2, r6
   1315c:	bl	1c204 <__assert_fail@plt+0xb0d8>
   13160:	mov	r3, r7
   13164:	mov	r2, r4
   13168:	add	r1, sp, #32
   1316c:	mov	r0, r4
   13170:	bl	1d854 <__assert_fail@plt+0xc728>
   13174:	mov	r1, #1
   13178:	mov	r0, r4
   1317c:	bl	1ad74 <__assert_fail@plt+0x9c48>
   13180:	ldr	r3, [sp, #76]	; 0x4c
   13184:	cmp	r5, r3
   13188:	bcs	13220 <__assert_fail@plt+0x20f4>
   1318c:	cmp	r0, #0
   13190:	add	r6, r6, #12
   13194:	bne	13148 <__assert_fail@plt+0x201c>
   13198:	add	r1, sp, #32
   1319c:	ldrb	r2, [r8], #1
   131a0:	mov	r0, r1
   131a4:	bl	1b018 <__assert_fail@plt+0x9eec>
   131a8:	mov	r3, r4
   131ac:	add	r2, sp, #32
   131b0:	stm	sp, {r9, sl}
   131b4:	add	r1, sp, #44	; 0x2c
   131b8:	mov	r0, r7
   131bc:	bl	12d80 <__assert_fail@plt+0x1c54>
   131c0:	cmp	r0, #0
   131c4:	beq	13264 <__assert_fail@plt+0x2138>
   131c8:	cmp	fp, r8
   131cc:	bne	13134 <__assert_fail@plt+0x2008>
   131d0:	mov	r2, #5
   131d4:	movw	r1, #41908	; 0xa3b4
   131d8:	movt	r1, #2
   131dc:	mov	r0, #0
   131e0:	bl	10f04 <dcgettext@plt>
   131e4:	mov	r1, #0
   131e8:	mov	r2, r0
   131ec:	mov	r0, r1
   131f0:	bl	10f94 <error@plt>
   131f4:	bl	11120 <abort@plt>
   131f8:	mov	r3, #1
   131fc:	str	r3, [sp, #12]
   13200:	ldr	r0, [sp, #12]
   13204:	add	sp, sp, #84	; 0x54
   13208:	ldrd	r4, [sp]
   1320c:	ldrd	r6, [sp, #8]
   13210:	ldrd	r8, [sp, #16]
   13214:	ldrd	sl, [sp, #24]
   13218:	add	sp, sp, #32
   1321c:	pop	{pc}		; (ldr pc, [sp], #4)
   13220:	cmp	r0, #0
   13224:	beq	13198 <__assert_fail@plt+0x206c>
   13228:	add	r0, sp, #68	; 0x44
   1322c:	bl	115a4 <__assert_fail@plt+0x478>
   13230:	mov	r0, #0
   13234:	add	r3, sp, #44	; 0x2c
   13238:	str	r4, [sp]
   1323c:	add	r2, sp, #32
   13240:	mov	r1, r9
   13244:	str	r0, [sp, #4]
   13248:	movw	r0, #42340	; 0xa564
   1324c:	movt	r0, #1
   13250:	bl	12384 <__assert_fail@plt+0x1258>
   13254:	b	13200 <__assert_fail@plt+0x20d4>
   13258:	mov	r3, #0
   1325c:	str	r3, [sp, #12]
   13260:	b	13200 <__assert_fail@plt+0x20d4>
   13264:	str	r0, [sp, #12]
   13268:	b	13228 <__assert_fail@plt+0x20fc>
   1326c:	andeq	r7, r2, r0, asr r2
   13270:	movw	r3, #49548	; 0xc18c
   13274:	movt	r3, #3
   13278:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1327c:	strd	r6, [sp, #8]
   13280:	mov	r7, r0
   13284:	strd	r8, [sp, #16]
   13288:	strd	sl, [sp, #24]
   1328c:	str	lr, [sp, #32]
   13290:	sub	sp, sp, #140	; 0x8c
   13294:	str	r1, [sp, #32]
   13298:	strd	r2, [sp, #48]	; 0x30
   1329c:	ldrb	r3, [r3, #8]
   132a0:	cmp	r3, #0
   132a4:	bne	13620 <__assert_fail@plt+0x24f4>
   132a8:	add	r2, sp, #124	; 0x7c
   132ac:	mov	r3, #0
   132b0:	add	r1, sp, #112	; 0x70
   132b4:	movw	r0, #42240	; 0xa500
   132b8:	movt	r0, #1
   132bc:	add	sl, sp, #88	; 0x58
   132c0:	bl	12384 <__assert_fail@plt+0x1258>
   132c4:	add	r6, sp, #64	; 0x40
   132c8:	mov	r0, sl
   132cc:	mov	r1, #2
   132d0:	add	fp, sp, #76	; 0x4c
   132d4:	bl	1a688 <__assert_fail@plt+0x955c>
   132d8:	mov	r0, r6
   132dc:	mov	r1, #2
   132e0:	bl	1a688 <__assert_fail@plt+0x955c>
   132e4:	mov	r3, #0
   132e8:	mov	r2, #1
   132ec:	mov	r5, r3
   132f0:	mov	r4, r2
   132f4:	mov	r0, fp
   132f8:	mov	r1, #2
   132fc:	strd	r4, [sp, #16]
   13300:	bl	1a688 <__assert_fail@plt+0x955c>
   13304:	add	r0, sp, #100	; 0x64
   13308:	mov	r1, #1
   1330c:	bl	1a6a0 <__assert_fail@plt+0x9574>
   13310:	movw	r3, #49528	; 0xc178
   13314:	movt	r3, #3
   13318:	str	r3, [sp, #56]	; 0x38
   1331c:	movw	r3, #41984	; 0xa400
   13320:	movt	r3, #2
   13324:	str	r3, [sp, #60]	; 0x3c
   13328:	mov	r1, #1
   1332c:	mov	r0, r7
   13330:	bl	1ad74 <__assert_fail@plt+0x9c48>
   13334:	cmp	r0, #0
   13338:	bne	13350 <__assert_fail@plt+0x2224>
   1333c:	b	135c4 <__assert_fail@plt+0x2498>
   13340:	subs	r4, r4, #1
   13344:	sbc	r5, r5, #0
   13348:	orrs	r3, r4, r5
   1334c:	beq	13404 <__assert_fail@plt+0x22d8>
   13350:	mov	r2, r6
   13354:	mov	r1, r6
   13358:	add	r0, sp, #112	; 0x70
   1335c:	mov	r9, #0
   13360:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   13364:	mov	r2, r7
   13368:	add	r1, sp, #112	; 0x70
   1336c:	mov	r0, r6
   13370:	and	r8, r4, #31
   13374:	bl	1c144 <__assert_fail@plt+0xb018>
   13378:	mov	r1, r6
   1337c:	mov	r0, r6
   13380:	ldr	r2, [sp, #32]
   13384:	bl	1b018 <__assert_fail@plt+0x9eec>
   13388:	mov	r2, r6
   1338c:	mov	r1, fp
   13390:	add	r0, sp, #112	; 0x70
   13394:	bl	1b390 <__assert_fail@plt+0xa264>
   13398:	add	r2, sp, #112	; 0x70
   1339c:	add	r1, sp, #100	; 0x64
   133a0:	add	r0, sp, #124	; 0x7c
   133a4:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   133a8:	mov	r2, r7
   133ac:	add	r1, sp, #124	; 0x7c
   133b0:	add	r0, sp, #100	; 0x64
   133b4:	bl	1c144 <__assert_fail@plt+0xb018>
   133b8:	cmp	r9, #0
   133bc:	cmpeq	r8, #1
   133c0:	bne	13340 <__assert_fail@plt+0x2214>
   133c4:	mov	r2, r7
   133c8:	add	r1, sp, #100	; 0x64
   133cc:	add	r0, sp, #112	; 0x70
   133d0:	bl	1c5a0 <__assert_fail@plt+0xb474>
   133d4:	mov	r1, #1
   133d8:	add	r0, sp, #112	; 0x70
   133dc:	bl	1ad74 <__assert_fail@plt+0x9c48>
   133e0:	cmp	r0, r9
   133e4:	bne	134a0 <__assert_fail@plt+0x2374>
   133e8:	mov	r1, r6
   133ec:	mov	r0, sl
   133f0:	bl	1a5fc <__assert_fail@plt+0x94d0>
   133f4:	subs	r4, r4, #1
   133f8:	sbc	r5, r5, #0
   133fc:	orrs	r3, r4, r5
   13400:	bne	13350 <__assert_fail@plt+0x2224>
   13404:	mov	r1, r6
   13408:	mov	r0, fp
   1340c:	bl	1a5fc <__assert_fail@plt+0x94d0>
   13410:	ldrd	r2, [sp, #16]
   13414:	adds	r1, r2, r2
   13418:	str	r1, [sp, #24]
   1341c:	adc	r1, r3, r3
   13420:	orrs	r3, r2, r3
   13424:	str	r1, [sp, #36]	; 0x24
   13428:	beq	1347c <__assert_fail@plt+0x2350>
   1342c:	strd	r8, [sp, #40]	; 0x28
   13430:	ldr	r9, [sp, #32]
   13434:	mov	r2, r6
   13438:	mov	r1, r6
   1343c:	add	r0, sp, #112	; 0x70
   13440:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   13444:	mov	r2, r7
   13448:	add	r1, sp, #112	; 0x70
   1344c:	mov	r0, r6
   13450:	bl	1c144 <__assert_fail@plt+0xb018>
   13454:	mov	r2, r9
   13458:	mov	r1, r6
   1345c:	mov	r0, r6
   13460:	bl	1b018 <__assert_fail@plt+0x9eec>
   13464:	ldrd	r2, [sp, #16]
   13468:	adds	r4, r4, #1
   1346c:	adc	r5, r5, #0
   13470:	cmp	r5, r3
   13474:	cmpeq	r4, r2
   13478:	bne	13434 <__assert_fail@plt+0x2308>
   1347c:	mov	r1, r6
   13480:	mov	r0, sl
   13484:	ldrd	r4, [sp, #16]
   13488:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1348c:	ldr	r3, [sp, #24]
   13490:	str	r3, [sp, #16]
   13494:	ldr	r3, [sp, #36]	; 0x24
   13498:	str	r3, [sp, #20]
   1349c:	b	13350 <__assert_fail@plt+0x2224>
   134a0:	strd	r4, [sp, #24]
   134a4:	ldr	r5, [sp, #32]
   134a8:	mov	r2, sl
   134ac:	mov	r1, sl
   134b0:	add	r0, sp, #112	; 0x70
   134b4:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   134b8:	mov	r2, r7
   134bc:	add	r1, sp, #112	; 0x70
   134c0:	mov	r0, sl
   134c4:	bl	1c144 <__assert_fail@plt+0xb018>
   134c8:	mov	r2, r5
   134cc:	mov	r1, sl
   134d0:	mov	r0, sl
   134d4:	bl	1b018 <__assert_fail@plt+0x9eec>
   134d8:	mov	r2, sl
   134dc:	mov	r1, fp
   134e0:	add	r0, sp, #112	; 0x70
   134e4:	bl	1b390 <__assert_fail@plt+0xa264>
   134e8:	add	r1, sp, #112	; 0x70
   134ec:	mov	r2, r7
   134f0:	mov	r0, r1
   134f4:	bl	1c5a0 <__assert_fail@plt+0xb474>
   134f8:	mov	r1, #1
   134fc:	add	r0, sp, #112	; 0x70
   13500:	bl	1ad74 <__assert_fail@plt+0x9c48>
   13504:	cmp	r0, #0
   13508:	beq	134a8 <__assert_fail@plt+0x237c>
   1350c:	add	r2, sp, #112	; 0x70
   13510:	mov	r1, r7
   13514:	str	r5, [sp, #32]
   13518:	mov	r0, r7
   1351c:	ldrd	r4, [sp, #24]
   13520:	bl	1c204 <__assert_fail@plt+0xb0d8>
   13524:	add	r0, sp, #112	; 0x70
   13528:	bl	13048 <__assert_fail@plt+0x1f1c>
   1352c:	cmp	r0, #0
   13530:	bne	1359c <__assert_fail@plt+0x2470>
   13534:	ldr	r3, [sp, #52]	; 0x34
   13538:	ldrb	r3, [r3, #8]
   1353c:	cmp	r3, #0
   13540:	bne	13604 <__assert_fail@plt+0x24d8>
   13544:	ldr	r3, [sp, #32]
   13548:	add	r0, sp, #112	; 0x70
   1354c:	ldr	r2, [sp, #48]	; 0x30
   13550:	add	r1, r3, #1
   13554:	bl	13270 <__assert_fail@plt+0x2144>
   13558:	mov	r0, r7
   1355c:	bl	13048 <__assert_fail@plt+0x1f1c>
   13560:	cmp	r0, #0
   13564:	bne	135b8 <__assert_fail@plt+0x248c>
   13568:	mov	r2, r7
   1356c:	mov	r1, r6
   13570:	mov	r0, r6
   13574:	bl	1c144 <__assert_fail@plt+0xb018>
   13578:	mov	r2, r7
   1357c:	mov	r1, fp
   13580:	mov	r0, fp
   13584:	bl	1c144 <__assert_fail@plt+0xb018>
   13588:	mov	r2, r7
   1358c:	mov	r1, sl
   13590:	mov	r0, sl
   13594:	bl	1c144 <__assert_fail@plt+0xb018>
   13598:	b	13328 <__assert_fail@plt+0x21fc>
   1359c:	add	r1, sp, #112	; 0x70
   135a0:	ldr	r0, [sp, #48]	; 0x30
   135a4:	bl	123d0 <__assert_fail@plt+0x12a4>
   135a8:	mov	r0, r7
   135ac:	bl	13048 <__assert_fail@plt+0x1f1c>
   135b0:	cmp	r0, #0
   135b4:	beq	13568 <__assert_fail@plt+0x243c>
   135b8:	mov	r1, r7
   135bc:	ldr	r0, [sp, #48]	; 0x30
   135c0:	bl	123d0 <__assert_fail@plt+0x12a4>
   135c4:	mov	ip, #0
   135c8:	add	r3, sp, #112	; 0x70
   135cc:	str	fp, [sp]
   135d0:	add	r2, sp, #124	; 0x7c
   135d4:	add	r1, sp, #100	; 0x64
   135d8:	movw	r0, #42340	; 0xa564
   135dc:	movt	r0, #1
   135e0:	stmib	sp, {r6, sl, ip}
   135e4:	bl	12384 <__assert_fail@plt+0x1258>
   135e8:	add	sp, sp, #140	; 0x8c
   135ec:	ldrd	r4, [sp]
   135f0:	ldrd	r6, [sp, #8]
   135f4:	ldrd	r8, [sp, #16]
   135f8:	ldrd	sl, [sp, #24]
   135fc:	add	sp, sp, #32
   13600:	pop	{pc}		; (ldr pc, [sp], #4)
   13604:	ldr	r3, [sp, #56]	; 0x38
   13608:	mov	r2, #43	; 0x2b
   1360c:	mov	r1, #1
   13610:	ldr	r0, [sp, #60]	; 0x3c
   13614:	ldr	r3, [r3]
   13618:	bl	10f58 <fwrite@plt>
   1361c:	b	13544 <__assert_fail@plt+0x2418>
   13620:	movw	r3, #49528	; 0xc178
   13624:	movt	r3, #3
   13628:	movw	r2, #41960	; 0xa3e8
   1362c:	movt	r2, #2
   13630:	ldr	r0, [r3]
   13634:	mov	r3, r1
   13638:	mov	r1, #1
   1363c:	bl	11084 <__fprintf_chk@plt>
   13640:	b	132a8 <__assert_fail@plt+0x217c>
   13644:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13648:	and	r4, r2, #1
   1364c:	mov	r5, #0
   13650:	strd	r6, [sp, #8]
   13654:	mov	ip, r1
   13658:	strd	r8, [sp, #16]
   1365c:	strd	sl, [sp, #24]
   13660:	mov	fp, r3
   13664:	mov	sl, r2
   13668:	str	lr, [sp, #32]
   1366c:	sub	sp, sp, #116	; 0x74
   13670:	mov	r2, r0
   13674:	ldr	r3, [sp, #152]	; 0x98
   13678:	ldr	lr, [sp, #168]	; 0xa8
   1367c:	ldr	r1, [sp, #172]	; 0xac
   13680:	str	r3, [sp, #104]	; 0x68
   13684:	ldr	r3, [sp, #156]	; 0x9c
   13688:	str	r3, [sp, #108]	; 0x6c
   1368c:	orrs	r3, r4, r5
   13690:	ldr	r3, [sp, #160]	; 0xa0
   13694:	str	r3, [sp, #72]	; 0x48
   13698:	ldr	r3, [sp, #164]	; 0xa4
   1369c:	str	r3, [sp, #76]	; 0x4c
   136a0:	bne	1394c <__assert_fail@plt+0x2820>
   136a4:	orrs	r3, sl, fp
   136a8:	beq	1392c <__assert_fail@plt+0x2800>
   136ac:	mov	r3, #0
   136b0:	ldr	r0, [sp, #108]	; 0x6c
   136b4:	mov	r6, r1
   136b8:	str	r3, [sp, #44]	; 0x2c
   136bc:	ldr	r3, [sp, #104]	; 0x68
   136c0:	str	r0, [sp, #80]	; 0x50
   136c4:	str	r3, [sp, #84]	; 0x54
   136c8:	umull	r4, r5, ip, r2
   136cc:	ldr	r7, [sp, #44]	; 0x2c
   136d0:	umull	r2, r3, r2, r2
   136d4:	adds	r0, r4, r4
   136d8:	adc	r8, r5, r5
   136dc:	strd	r2, [sp, #48]	; 0x30
   136e0:	adds	r3, r3, r0
   136e4:	umull	r0, r1, ip, ip
   136e8:	str	r3, [sp]
   136ec:	adc	r3, r7, r8
   136f0:	str	r3, [sp, #4]
   136f4:	ldrd	r2, [sp]
   136f8:	cmp	r5, r3
   136fc:	cmpeq	r4, r2
   13700:	bls	1370c <__assert_fail@plt+0x25e0>
   13704:	adds	r0, r0, #0
   13708:	adc	r1, r1, #1
   1370c:	ldrd	r4, [sp]
   13710:	mov	ip, #0
   13714:	ldr	r2, [sp, #48]	; 0x30
   13718:	adds	r3, r5, r0
   1371c:	str	r3, [sp, #16]
   13720:	adc	r3, ip, r1
   13724:	adds	r0, ip, r2
   13728:	mov	r2, r4
   1372c:	str	r3, [sp, #20]
   13730:	ldr	r3, [sp, #76]	; 0x4c
   13734:	mul	r4, r0, r3
   13738:	adc	r3, r2, ip
   1373c:	ldr	r2, [sp, #72]	; 0x48
   13740:	umull	r0, r1, r0, r2
   13744:	mla	r2, r2, r3, r4
   13748:	ldr	r3, [sp, #80]	; 0x50
   1374c:	ldr	r4, [sp, #84]	; 0x54
   13750:	add	r2, r2, r1
   13754:	umull	r8, r9, r3, r0
   13758:	strd	r8, [sp, #48]	; 0x30
   1375c:	umull	r8, r9, r0, r4
   13760:	umull	r0, r1, r2, r4
   13764:	umull	r2, r3, r2, r3
   13768:	mov	r7, r9
   1376c:	ldrd	r8, [sp, #48]	; 0x30
   13770:	adds	r4, r8, r0
   13774:	adc	r5, r9, r1
   13778:	adds	r4, r7, r4
   1377c:	adc	ip, ip, r5
   13780:	str	r4, [sp, #8]
   13784:	str	ip, [sp, #12]
   13788:	ldrd	r4, [sp, #8]
   1378c:	cmp	r1, r5
   13790:	cmpeq	r0, r4
   13794:	bls	137a0 <__assert_fail@plt+0x2674>
   13798:	adds	r2, r2, #0
   1379c:	adc	r3, r3, #1
   137a0:	ldr	r1, [sp, #12]
   137a4:	mov	r0, #0
   137a8:	adds	r1, r1, r2
   137ac:	adc	r3, r0, r3
   137b0:	str	r1, [sp, #24]
   137b4:	str	r3, [sp, #28]
   137b8:	ldrd	r0, [sp, #16]
   137bc:	ldrd	r4, [sp, #24]
   137c0:	subs	r2, r0, r4
   137c4:	sbc	ip, r1, r5
   137c8:	cmp	r1, r5
   137cc:	cmpeq	r0, r4
   137d0:	bcs	137e4 <__assert_fail@plt+0x26b8>
   137d4:	ldr	r3, [sp, #104]	; 0x68
   137d8:	adds	r2, r2, r3
   137dc:	ldr	r3, [sp, #108]	; 0x6c
   137e0:	adc	ip, ip, r3
   137e4:	lsr	r3, sl, #1
   137e8:	lsr	r1, fp, #1
   137ec:	orr	r3, r3, fp, lsl #31
   137f0:	mov	fp, r1
   137f4:	mov	sl, r3
   137f8:	and	r3, r3, #1
   137fc:	str	r3, [sp, #32]
   13800:	ldr	r3, [sp, #44]	; 0x2c
   13804:	str	r3, [sp, #36]	; 0x24
   13808:	ldrd	r0, [sp, #32]
   1380c:	orrs	r1, r0, r1
   13810:	beq	13920 <__assert_fail@plt+0x27f4>
   13814:	umull	r4, r5, r6, r2
   13818:	umull	r8, r9, lr, r2
   1381c:	umull	r6, r7, r6, ip
   13820:	mov	r0, r4
   13824:	mov	r1, r5
   13828:	umlal	r0, r1, lr, ip
   1382c:	adds	lr, r9, r0
   13830:	adc	r3, r3, r1
   13834:	str	lr, [sp, #56]	; 0x38
   13838:	str	r3, [sp, #60]	; 0x3c
   1383c:	ldrd	r0, [sp, #56]	; 0x38
   13840:	cmp	r5, r1
   13844:	cmpeq	r4, r0
   13848:	bls	13854 <__assert_fail@plt+0x2728>
   1384c:	adds	r6, r6, #0
   13850:	adc	r7, r7, #1
   13854:	ldrd	r4, [sp, #56]	; 0x38
   13858:	mov	r3, #0
   1385c:	adds	r1, r5, r6
   13860:	ldr	r5, [sp, #72]	; 0x48
   13864:	str	r1, [sp, #88]	; 0x58
   13868:	adc	r1, r3, r7
   1386c:	adds	r8, r3, r8
   13870:	adc	r4, r4, r3
   13874:	str	r1, [sp, #92]	; 0x5c
   13878:	ldr	r1, [sp, #76]	; 0x4c
   1387c:	mul	lr, r8, r1
   13880:	umull	r0, r1, r8, r5
   13884:	mla	r4, r5, r4, lr
   13888:	ldr	r5, [sp, #80]	; 0x50
   1388c:	ldr	lr, [sp, #84]	; 0x54
   13890:	add	r4, r4, r1
   13894:	umull	r6, r7, r5, r0
   13898:	umull	r8, r9, r0, lr
   1389c:	umull	r0, r1, r4, lr
   138a0:	umull	r4, r5, r5, r4
   138a4:	mov	lr, r9
   138a8:	adds	r6, r6, r0
   138ac:	adc	r7, r7, r1
   138b0:	adds	lr, lr, r6
   138b4:	adc	r3, r3, r7
   138b8:	str	lr, [sp, #64]	; 0x40
   138bc:	str	r3, [sp, #68]	; 0x44
   138c0:	ldrd	r6, [sp, #64]	; 0x40
   138c4:	cmp	r1, r7
   138c8:	cmpeq	r0, r6
   138cc:	bls	138d8 <__assert_fail@plt+0x27ac>
   138d0:	adds	r4, r4, #0
   138d4:	adc	r5, r5, #1
   138d8:	ldr	r3, [sp, #68]	; 0x44
   138dc:	mov	r1, #0
   138e0:	adds	r3, r3, r4
   138e4:	str	r3, [sp, #96]	; 0x60
   138e8:	adc	r3, r1, r5
   138ec:	ldrd	r0, [sp, #88]	; 0x58
   138f0:	str	r3, [sp, #100]	; 0x64
   138f4:	ldrd	r4, [sp, #96]	; 0x60
   138f8:	subs	lr, r0, r4
   138fc:	sbc	r6, r1, r5
   13900:	cmp	r1, r5
   13904:	cmpeq	r0, r4
   13908:	bcs	136c8 <__assert_fail@plt+0x259c>
   1390c:	ldr	r3, [sp, #104]	; 0x68
   13910:	adds	lr, lr, r3
   13914:	ldr	r3, [sp, #108]	; 0x6c
   13918:	adc	r6, r6, r3
   1391c:	b	136c8 <__assert_fail@plt+0x259c>
   13920:	orrs	r3, sl, fp
   13924:	bne	136c8 <__assert_fail@plt+0x259c>
   13928:	mov	r1, r6
   1392c:	mov	r0, lr
   13930:	add	sp, sp, #116	; 0x74
   13934:	ldrd	r4, [sp]
   13938:	ldrd	r6, [sp, #8]
   1393c:	ldrd	r8, [sp, #16]
   13940:	ldrd	sl, [sp, #24]
   13944:	add	sp, sp, #32
   13948:	pop	{pc}		; (ldr pc, [sp], #4)
   1394c:	mov	lr, r0
   13950:	mov	r1, ip
   13954:	b	136ac <__assert_fail@plt+0x2580>
   13958:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1395c:	mov	r4, r0
   13960:	mov	r5, r1
   13964:	strd	r6, [sp, #8]
   13968:	mov	r6, r2
   1396c:	strd	r8, [sp, #16]
   13970:	strd	sl, [sp, #24]
   13974:	str	lr, [sp, #32]
   13978:	sub	sp, sp, #100	; 0x64
   1397c:	strd	r0, [sp]
   13980:	strd	r2, [sp, #8]
   13984:	str	r3, [sp, #76]	; 0x4c
   13988:	ldrd	r2, [sp, #160]	; 0xa0
   1398c:	strd	r2, [sp, #16]
   13990:	strd	r0, [sp, #88]	; 0x58
   13994:	ldrd	r0, [sp, #136]	; 0x88
   13998:	ldrd	r2, [sp, #144]	; 0x90
   1399c:	bl	13644 <__assert_fail@plt+0x2518>
   139a0:	ldr	r3, [sp, #160]	; 0xa0
   139a4:	mov	sl, r0
   139a8:	mov	fp, r1
   139ac:	subs	r3, r4, r3
   139b0:	str	r3, [sp, #64]	; 0x40
   139b4:	ldr	r3, [sp, #164]	; 0xa4
   139b8:	sbc	r3, r5, r3
   139bc:	str	r3, [sp, #68]	; 0x44
   139c0:	ldrd	r2, [sp, #160]	; 0xa0
   139c4:	cmp	r3, r1
   139c8:	cmpeq	r2, r0
   139cc:	ldrd	r2, [sp, #64]	; 0x40
   139d0:	movne	r0, #0
   139d4:	moveq	r0, #1
   139d8:	cmp	r1, r3
   139dc:	cmpeq	sl, r2
   139e0:	movne	lr, r0
   139e4:	moveq	lr, #1
   139e8:	cmp	lr, #0
   139ec:	bne	13b84 <__assert_fail@plt+0x2a58>
   139f0:	ldr	r3, [sp, #152]	; 0x98
   139f4:	cmp	r3, #1
   139f8:	bls	13b84 <__assert_fail@plt+0x2a58>
   139fc:	mov	r7, #1
   13a00:	str	r5, [sp, #80]	; 0x50
   13a04:	str	r4, [sp, #84]	; 0x54
   13a08:	b	13a28 <__assert_fail@plt+0x28fc>
   13a0c:	ldrd	r2, [sp, #160]	; 0xa0
   13a10:	cmp	r3, fp
   13a14:	cmpeq	r2, sl
   13a18:	beq	13b84 <__assert_fail@plt+0x2a58>
   13a1c:	ldr	r3, [sp, #152]	; 0x98
   13a20:	cmp	r3, r7
   13a24:	beq	13b84 <__assert_fail@plt+0x2a58>
   13a28:	umull	r0, r1, fp, sl
   13a2c:	mov	ip, #0
   13a30:	add	r7, r7, #1
   13a34:	umull	r4, r5, sl, sl
   13a38:	mov	r3, ip
   13a3c:	mov	r2, ip
   13a40:	adds	r9, r0, r0
   13a44:	str	r4, [sp, #24]
   13a48:	mov	r4, r5
   13a4c:	adc	r5, r1, r1
   13a50:	adds	r4, r4, r9
   13a54:	str	ip, [sp, #72]	; 0x48
   13a58:	str	r4, [sp, #32]
   13a5c:	adc	r4, ip, r5
   13a60:	str	r4, [sp, #36]	; 0x24
   13a64:	ldrd	r8, [sp, #32]
   13a68:	cmp	r1, r9
   13a6c:	mov	r5, r9
   13a70:	cmpeq	r0, r8
   13a74:	mov	r4, r8
   13a78:	umull	r0, r1, fp, fp
   13a7c:	bls	13a88 <__assert_fail@plt+0x295c>
   13a80:	adds	r0, r0, ip
   13a84:	adc	r1, r1, #1
   13a88:	adds	r5, r5, r0
   13a8c:	adc	r1, ip, r1
   13a90:	str	r5, [sp, #40]	; 0x28
   13a94:	str	r1, [sp, #44]	; 0x2c
   13a98:	ldr	r1, [sp, #24]
   13a9c:	adds	r8, r3, r1
   13aa0:	ldr	r3, [sp, #76]	; 0x4c
   13aa4:	adc	r2, r4, r2
   13aa8:	mul	r4, r8, r3
   13aac:	umull	r8, r9, r8, r6
   13ab0:	mla	r2, r6, r2, r4
   13ab4:	ldr	r4, [sp, #80]	; 0x50
   13ab8:	mul	r3, lr, r8
   13abc:	add	r2, r2, r9
   13ac0:	umull	r0, r1, r4, r8
   13ac4:	mul	ip, r2, lr
   13ac8:	strd	r0, [sp, #24]
   13acc:	ldr	r0, [sp, #28]
   13ad0:	ldr	r1, [sp, #84]	; 0x54
   13ad4:	add	r0, r3, r0
   13ad8:	umull	r8, r9, r8, r1
   13adc:	str	r0, [sp, #28]
   13ae0:	umull	r0, r1, r2, r1
   13ae4:	add	r8, r3, r9
   13ae8:	umull	r2, r3, r2, r4
   13aec:	ldr	r4, [sp, #24]
   13af0:	add	r1, ip, r1
   13af4:	add	r3, ip, r3
   13af8:	ldr	ip, [sp, #28]
   13afc:	adds	r4, r4, r0
   13b00:	adc	ip, ip, r1
   13b04:	adds	r4, r8, r4
   13b08:	str	r4, [sp, #48]	; 0x30
   13b0c:	ldr	r4, [sp, #72]	; 0x48
   13b10:	adc	ip, r4, ip
   13b14:	str	ip, [sp, #52]	; 0x34
   13b18:	ldrd	r4, [sp, #48]	; 0x30
   13b1c:	cmp	r1, r5
   13b20:	mov	ip, r5
   13b24:	cmpeq	r0, r4
   13b28:	bls	13b34 <__assert_fail@plt+0x2a08>
   13b2c:	adds	r2, r2, #0
   13b30:	adc	r3, r3, #1
   13b34:	adds	r1, ip, r2
   13b38:	adc	r3, r3, #0
   13b3c:	str	r1, [sp, #56]	; 0x38
   13b40:	str	r3, [sp, #60]	; 0x3c
   13b44:	ldrd	r2, [sp, #40]	; 0x28
   13b48:	ldrd	r0, [sp, #56]	; 0x38
   13b4c:	subs	sl, r2, r0
   13b50:	sbc	fp, r3, r1
   13b54:	cmp	r3, r1
   13b58:	cmpeq	r2, r0
   13b5c:	bcs	13b70 <__assert_fail@plt+0x2a44>
   13b60:	ldr	r3, [sp, #88]	; 0x58
   13b64:	adds	sl, sl, r3
   13b68:	ldr	r3, [sp, #92]	; 0x5c
   13b6c:	adc	fp, fp, r3
   13b70:	ldrd	r2, [sp, #64]	; 0x40
   13b74:	cmp	r3, fp
   13b78:	cmpeq	r2, sl
   13b7c:	bne	13a0c <__assert_fail@plt+0x28e0>
   13b80:	mov	lr, #1
   13b84:	mov	r0, lr
   13b88:	add	sp, sp, #100	; 0x64
   13b8c:	ldrd	r4, [sp]
   13b90:	ldrd	r6, [sp, #8]
   13b94:	ldrd	r8, [sp, #16]
   13b98:	ldrd	sl, [sp, #24]
   13b9c:	add	sp, sp, #32
   13ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ba4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ba8:	mov	r4, r0
   13bac:	mov	r5, r1
   13bb0:	strd	r6, [sp, #8]
   13bb4:	mov	ip, #0
   13bb8:	strd	r8, [sp, #16]
   13bbc:	mov	r1, ip
   13bc0:	strd	sl, [sp, #24]
   13bc4:	str	lr, [sp, #32]
   13bc8:	sub	sp, sp, #388	; 0x184
   13bcc:	subs	lr, r0, #1
   13bd0:	and	r0, lr, #1
   13bd4:	strd	r4, [sp, #32]
   13bd8:	sbc	r4, r5, #0
   13bdc:	orrs	r1, r0, r1
   13be0:	str	r4, [sp, #88]	; 0x58
   13be4:	str	lr, [sp, #120]	; 0x78
   13be8:	bne	14130 <__assert_fail@plt+0x3004>
   13bec:	mov	r0, lr
   13bf0:	mov	r1, ip
   13bf4:	mov	lr, r4
   13bf8:	lsr	r0, r0, #1
   13bfc:	mov	r3, ip
   13c00:	add	r1, r1, #1
   13c04:	orr	r0, r0, lr, lsl #31
   13c08:	lsr	lr, lr, #1
   13c0c:	and	r2, r0, #1
   13c10:	orrs	r4, r2, r3
   13c14:	beq	13bf8 <__assert_fail@plt+0x2acc>
   13c18:	str	r1, [sp, #108]	; 0x6c
   13c1c:	str	r0, [sp, #112]	; 0x70
   13c20:	str	lr, [sp, #116]	; 0x74
   13c24:	ldrd	r6, [sp, #32]
   13c28:	movw	r3, #29224	; 0x7228
   13c2c:	movt	r3, #2
   13c30:	mov	r5, #0
   13c34:	mov	sl, #0
   13c38:	mov	ip, r5
   13c3c:	mov	fp, #0
   13c40:	mov	r0, sl
   13c44:	mov	r1, fp
   13c48:	mov	r4, #64	; 0x40
   13c4c:	ubfx	r2, r6, #1, #7
   13c50:	add	r3, r3, r2
   13c54:	mov	r2, r6
   13c58:	ldrb	lr, [r3, #716]	; 0x2cc
   13c5c:	mov	r3, r7
   13c60:	umull	r8, r9, lr, lr
   13c64:	adds	lr, lr, lr
   13c68:	adc	r5, r5, r5
   13c6c:	str	lr, [sp, #56]	; 0x38
   13c70:	mul	lr, r8, r7
   13c74:	ldr	r7, [sp, #32]
   13c78:	mla	lr, r6, r9, lr
   13c7c:	umull	r8, r9, r8, r7
   13c80:	add	r9, lr, r9
   13c84:	ldr	lr, [sp, #56]	; 0x38
   13c88:	subs	lr, lr, r8
   13c8c:	sbc	r5, r5, r9
   13c90:	adds	r6, lr, lr
   13c94:	umull	r8, r9, lr, lr
   13c98:	mul	r7, lr, r5
   13c9c:	ldr	lr, [sp, #36]	; 0x24
   13ca0:	adc	r5, r5, r5
   13ca4:	add	r9, r9, r7, lsl #1
   13ca8:	ldr	r7, [sp, #32]
   13cac:	mul	lr, r8, lr
   13cb0:	mla	lr, r7, r9, lr
   13cb4:	umull	r8, r9, r8, r7
   13cb8:	add	r9, lr, r9
   13cbc:	subs	lr, r6, r8
   13cc0:	sbc	r5, r5, r9
   13cc4:	adds	r7, lr, lr
   13cc8:	umull	r8, r9, lr, lr
   13ccc:	mul	r6, lr, r5
   13cd0:	ldr	lr, [sp, #36]	; 0x24
   13cd4:	adc	r5, r5, r5
   13cd8:	add	r9, r9, r6, lsl #1
   13cdc:	ldr	r6, [sp, #32]
   13ce0:	mul	lr, r8, lr
   13ce4:	mla	lr, r6, r9, lr
   13ce8:	umull	r8, r9, r8, r6
   13cec:	mov	r6, #1
   13cf0:	add	r9, lr, r9
   13cf4:	subs	lr, r7, r8
   13cf8:	mov	r7, #0
   13cfc:	str	lr, [sp, #56]	; 0x38
   13d00:	sbc	lr, r5, r9
   13d04:	str	lr, [sp, #60]	; 0x3c
   13d08:	lsr	lr, r0, #1
   13d0c:	lsr	r5, r3, #1
   13d10:	orr	r0, lr, r1, lsl #31
   13d14:	lsr	lr, r2, #1
   13d18:	cmp	r5, r7
   13d1c:	lsr	r8, r1, #1
   13d20:	orr	lr, lr, r3, lsl #31
   13d24:	mov	r3, r5
   13d28:	orr	r1, r8, r2, lsl #31
   13d2c:	cmpeq	lr, r6
   13d30:	mov	r2, lr
   13d34:	bcc	13d58 <__assert_fail@plt+0x2c2c>
   13d38:	moveq	lr, #1
   13d3c:	movne	lr, #0
   13d40:	cmp	r1, fp
   13d44:	cmpeq	r0, sl
   13d48:	movhi	lr, #0
   13d4c:	andls	lr, lr, #1
   13d50:	cmp	lr, #0
   13d54:	beq	13d80 <__assert_fail@plt+0x2c54>
   13d58:	cmp	r1, fp
   13d5c:	cmpeq	r0, sl
   13d60:	movhi	r5, #1
   13d64:	movls	r5, #0
   13d68:	subs	sl, sl, r0
   13d6c:	sbc	fp, fp, r1
   13d70:	subs	r8, r6, r2
   13d74:	sbc	r9, r7, r3
   13d78:	subs	r6, r8, r5
   13d7c:	sbc	r7, r9, ip
   13d80:	subs	r4, r4, #1
   13d84:	bne	13d08 <__assert_fail@plt+0x2bdc>
   13d88:	ldrd	r6, [sp, #32]
   13d8c:	strd	sl, [sp, #24]
   13d90:	ldr	r2, [sp, #56]	; 0x38
   13d94:	ldr	r1, [sp, #116]	; 0x74
   13d98:	subs	r3, r6, sl
   13d9c:	str	r3, [sp, #64]	; 0x40
   13da0:	ldr	r3, [sp, #112]	; 0x70
   13da4:	str	r3, [sp, #8]
   13da8:	sbc	r3, r7, fp
   13dac:	str	r1, [sp, #12]
   13db0:	str	r3, [sp, #68]	; 0x44
   13db4:	ldr	r3, [sp, #60]	; 0x3c
   13db8:	ldrd	r0, [sp, #64]	; 0x40
   13dbc:	cmp	r1, fp
   13dc0:	ldr	r1, [sp, #108]	; 0x6c
   13dc4:	cmpeq	r0, sl
   13dc8:	movhi	r0, #1
   13dcc:	movls	r0, #0
   13dd0:	rsbs	r8, r0, #0
   13dd4:	sbc	r9, r9, r9
   13dd8:	adds	ip, sl, sl
   13ddc:	and	lr, r8, r6
   13de0:	adc	r0, fp, fp
   13de4:	str	r1, [sp, #16]
   13de8:	subs	ip, ip, r6
   13dec:	mov	r1, r7
   13df0:	sbc	r0, r0, r7
   13df4:	and	r1, r1, r9
   13df8:	adds	ip, lr, ip
   13dfc:	adc	r1, r1, r0
   13e00:	mov	r0, r6
   13e04:	str	ip, [sp, #40]	; 0x28
   13e08:	str	r1, [sp, #44]	; 0x2c
   13e0c:	mov	r1, r7
   13e10:	ldrd	r6, [sp, #40]	; 0x28
   13e14:	strd	r6, [sp]
   13e18:	bl	13958 <__assert_fail@plt+0x282c>
   13e1c:	subs	r3, r0, #0
   13e20:	str	r3, [sp, #124]	; 0x7c
   13e24:	beq	14124 <__assert_fail@plt+0x2ff8>
   13e28:	ldr	r3, [pc, #820]	; 14164 <__assert_fail@plt+0x3038>
   13e2c:	add	ip, sp, #128	; 0x80
   13e30:	mov	r0, #0
   13e34:	mov	r1, #0
   13e38:	mov	r9, #0
   13e3c:	str	ip, [sp]
   13e40:	mov	ip, #2
   13e44:	mov	r5, r4
   13e48:	ldr	r2, [sp, #120]	; 0x78
   13e4c:	str	r3, [sp, #76]	; 0x4c
   13e50:	ldr	r3, [sp, #88]	; 0x58
   13e54:	str	fp, [sp, #96]	; 0x60
   13e58:	str	ip, [sp, #100]	; 0x64
   13e5c:	bl	15adc <__assert_fail@plt+0x49b0>
   13e60:	ldrb	r3, [sp, #378]	; 0x17a
   13e64:	str	r3, [sp, #64]	; 0x40
   13e68:	str	r9, [sp, #72]	; 0x48
   13e6c:	str	r4, [sp, #104]	; 0x68
   13e70:	ldr	r3, [sp, #64]	; 0x40
   13e74:	cmp	r3, #0
   13e78:	beq	14104 <__assert_fail@plt+0x2fd8>
   13e7c:	ldr	r9, [sp, #120]	; 0x78
   13e80:	add	r8, sp, #136	; 0x88
   13e84:	mov	r4, #0
   13e88:	mov	r0, r9
   13e8c:	add	r4, r4, #1
   13e90:	ldrd	r2, [r8, #8]!
   13e94:	ldr	r1, [sp, #88]	; 0x58
   13e98:	bl	27024 <__assert_fail@plt+0x15ef8>
   13e9c:	ldr	ip, [sp, #56]	; 0x38
   13ea0:	mov	r3, r1
   13ea4:	mov	r2, r0
   13ea8:	ldrd	r0, [sp, #32]
   13eac:	strd	sl, [sp, #16]
   13eb0:	str	ip, [sp, #8]
   13eb4:	ldr	ip, [sp, #60]	; 0x3c
   13eb8:	strd	r0, [sp]
   13ebc:	mov	r0, r6
   13ec0:	mov	r1, r7
   13ec4:	str	ip, [sp, #12]
   13ec8:	bl	13644 <__assert_fail@plt+0x2518>
   13ecc:	ldr	r3, [sp, #64]	; 0x40
   13ed0:	cmp	r4, r3
   13ed4:	beq	140f8 <__assert_fail@plt+0x2fcc>
   13ed8:	cmp	r1, fp
   13edc:	cmpeq	r0, sl
   13ee0:	bne	13e88 <__assert_fail@plt+0x2d5c>
   13ee4:	ldrd	r0, [sp, #72]	; 0x48
   13ee8:	mov	r3, #0
   13eec:	str	r5, [sp, #92]	; 0x5c
   13ef0:	ldr	r4, [sp, #104]	; 0x68
   13ef4:	ldrb	r2, [r1], #1
   13ef8:	str	r1, [sp, #76]	; 0x4c
   13efc:	ldr	r1, [sp, #100]	; 0x64
   13f00:	adds	r1, r1, r2
   13f04:	adc	ip, r0, r3
   13f08:	ldr	r3, [sp, #96]	; 0x60
   13f0c:	str	r1, [sp, #100]	; 0x64
   13f10:	str	ip, [sp, #72]	; 0x48
   13f14:	ldr	lr, [sp, #72]	; 0x48
   13f18:	umull	r8, r9, r3, r1
   13f1c:	umull	r2, r3, sl, r1
   13f20:	mla	r9, r4, r1, r9
   13f24:	mov	r1, r2
   13f28:	mov	r4, r3
   13f2c:	mov	r2, r8
   13f30:	mov	r3, r9
   13f34:	umlal	r2, r3, sl, ip
   13f38:	adds	r4, r4, r2
   13f3c:	adc	r2, r5, r3
   13f40:	ldr	r3, [sp, #96]	; 0x60
   13f44:	adds	r6, r1, r5
   13f48:	str	r4, [sp, #80]	; 0x50
   13f4c:	str	r2, [sp, #84]	; 0x54
   13f50:	ldr	r4, [sp, #104]	; 0x68
   13f54:	umull	r2, r3, r3, lr
   13f58:	strd	r2, [sp, #40]	; 0x28
   13f5c:	ldrd	r2, [sp, #80]	; 0x50
   13f60:	mov	r1, r3
   13f64:	adc	r7, r5, r2
   13f68:	cmp	r9, r3
   13f6c:	ldr	r3, [sp, #44]	; 0x2c
   13f70:	cmpeq	r8, r2
   13f74:	mla	r3, r4, lr, r3
   13f78:	str	r3, [sp, #44]	; 0x2c
   13f7c:	ldrd	r8, [sp, #40]	; 0x28
   13f80:	bls	140bc <__assert_fail@plt+0x2f90>
   13f84:	adds	r2, r8, #0
   13f88:	adc	r3, r9, #1
   13f8c:	adds	r1, r2, r1
   13f90:	adc	r3, r3, r5
   13f94:	str	r1, [sp, #48]	; 0x30
   13f98:	str	r3, [sp, #52]	; 0x34
   13f9c:	ldrd	r2, [sp, #32]
   13fa0:	ldrd	r0, [sp, #48]	; 0x30
   13fa4:	cmp	r3, r1
   13fa8:	cmpeq	r2, r0
   13fac:	bls	14148 <__assert_fail@plt+0x301c>
   13fb0:	ldrd	r2, [sp, #32]
   13fb4:	mov	ip, #64	; 0x40
   13fb8:	mov	r0, #0
   13fbc:	mov	r1, #0
   13fc0:	strd	sl, [sp, #40]	; 0x28
   13fc4:	ldrd	r8, [sp, #48]	; 0x30
   13fc8:	lsr	lr, r0, #1
   13fcc:	lsr	r4, r3, #1
   13fd0:	orr	r0, lr, r1, lsl #31
   13fd4:	lsr	lr, r2, #1
   13fd8:	cmp	r4, r9
   13fdc:	lsr	fp, r1, #1
   13fe0:	orr	lr, lr, r3, lsl #31
   13fe4:	mov	r3, r4
   13fe8:	orr	r1, fp, r2, lsl #31
   13fec:	cmpeq	lr, r8
   13ff0:	mov	r2, lr
   13ff4:	bcc	14018 <__assert_fail@plt+0x2eec>
   13ff8:	moveq	lr, #1
   13ffc:	movne	lr, #0
   14000:	cmp	r1, r7
   14004:	cmpeq	r0, r6
   14008:	movhi	lr, #0
   1400c:	andls	lr, lr, #1
   14010:	cmp	lr, #0
   14014:	beq	14040 <__assert_fail@plt+0x2f14>
   14018:	cmp	r1, r7
   1401c:	cmpeq	r0, r6
   14020:	movhi	r4, #1
   14024:	movls	r4, #0
   14028:	subs	r6, r6, r0
   1402c:	sbc	r7, r7, r1
   14030:	subs	sl, r8, r2
   14034:	sbc	fp, r9, r3
   14038:	subs	r8, sl, r4
   1403c:	sbc	r9, fp, r5
   14040:	subs	ip, ip, #1
   14044:	bne	13fc8 <__assert_fail@plt+0x2e9c>
   14048:	ldrd	sl, [sp, #40]	; 0x28
   1404c:	strd	r8, [sp, #48]	; 0x30
   14050:	strd	r6, [sp]
   14054:	ldr	ip, [sp, #112]	; 0x70
   14058:	ldrd	r0, [sp, #32]
   1405c:	ldrd	r2, [sp, #56]	; 0x38
   14060:	str	ip, [sp, #8]
   14064:	ldr	ip, [sp, #116]	; 0x74
   14068:	strd	sl, [sp, #24]
   1406c:	str	ip, [sp, #12]
   14070:	ldr	ip, [sp, #108]	; 0x6c
   14074:	str	ip, [sp, #16]
   14078:	bl	13958 <__assert_fail@plt+0x282c>
   1407c:	cmp	r0, #0
   14080:	beq	14124 <__assert_fail@plt+0x2ff8>
   14084:	ldr	r3, [pc, #220]	; 14168 <__assert_fail@plt+0x303c>
   14088:	ldr	r2, [sp, #76]	; 0x4c
   1408c:	cmp	r3, r2
   14090:	bne	13e70 <__assert_fail@plt+0x2d44>
   14094:	mov	r2, #5
   14098:	movw	r1, #41908	; 0xa3b4
   1409c:	movt	r1, #2
   140a0:	mov	r0, #0
   140a4:	bl	10f04 <dcgettext@plt>
   140a8:	mov	r1, #0
   140ac:	mov	r2, r0
   140b0:	mov	r0, r1
   140b4:	bl	10f94 <error@plt>
   140b8:	bl	11120 <abort@plt>
   140bc:	adds	r3, r8, r1
   140c0:	str	r3, [sp, #48]	; 0x30
   140c4:	ldr	r3, [sp, #92]	; 0x5c
   140c8:	adc	r3, r9, r3
   140cc:	str	r3, [sp, #52]	; 0x34
   140d0:	ldrd	r2, [sp, #48]	; 0x30
   140d4:	orrs	r3, r2, r3
   140d8:	bne	13f9c <__assert_fail@plt+0x2e70>
   140dc:	mov	r0, r6
   140e0:	mov	r1, r7
   140e4:	ldrd	r2, [sp, #32]
   140e8:	bl	27024 <__assert_fail@plt+0x15ef8>
   140ec:	mov	r6, r2
   140f0:	mov	r7, r3
   140f4:	b	14050 <__assert_fail@plt+0x2f24>
   140f8:	cmp	r1, fp
   140fc:	cmpeq	r0, sl
   14100:	beq	13ee4 <__assert_fail@plt+0x2db8>
   14104:	ldr	r0, [sp, #124]	; 0x7c
   14108:	add	sp, sp, #388	; 0x184
   1410c:	ldrd	r4, [sp]
   14110:	ldrd	r6, [sp, #8]
   14114:	ldrd	r8, [sp, #16]
   14118:	ldrd	sl, [sp, #24]
   1411c:	add	sp, sp, #32
   14120:	pop	{pc}		; (ldr pc, [sp], #4)
   14124:	mov	r3, #0
   14128:	str	r3, [sp, #124]	; 0x7c
   1412c:	b	14104 <__assert_fail@plt+0x2fd8>
   14130:	ldr	r3, [sp, #120]	; 0x78
   14134:	str	ip, [sp, #108]	; 0x6c
   14138:	str	r3, [sp, #112]	; 0x70
   1413c:	ldr	r3, [sp, #88]	; 0x58
   14140:	str	r3, [sp, #116]	; 0x74
   14144:	b	13c24 <__assert_fail@plt+0x2af8>
   14148:	movw	r1, #41712	; 0xa2f0
   1414c:	movt	r1, #2
   14150:	ldr	r3, [pc, #20]	; 1416c <__assert_fail@plt+0x3040>
   14154:	movw	r0, #42028	; 0xa42c
   14158:	movt	r0, #2
   1415c:	movw	r2, #1262	; 0x4ee
   14160:	bl	1112c <__assert_fail@plt>
   14164:	andeq	r7, r2, r0, asr r2
   14168:	andeq	r7, r2, ip, ror #9
   1416c:	andeq	r7, r2, r4, ror r5
   14170:	cmp	r1, #0
   14174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14178:	strd	r6, [sp, #8]
   1417c:	cmpeq	r0, #1
   14180:	strd	r8, [sp, #16]
   14184:	strd	sl, [sp, #24]
   14188:	str	lr, [sp, #32]
   1418c:	sub	sp, sp, #348	; 0x15c
   14190:	strd	r0, [sp, #64]	; 0x40
   14194:	str	r3, [sp, #328]	; 0x148
   14198:	addhi	r3, r2, #1
   1419c:	strhi	r3, [sp, #332]	; 0x14c
   141a0:	addhi	r3, sp, #320	; 0x140
   141a4:	strdhi	r6, [r3]
   141a8:	bls	14cec <__assert_fail@plt+0x3bc0>
   141ac:	ldr	r3, [sp, #332]	; 0x14c
   141b0:	mov	r8, #0
   141b4:	mov	r9, #0
   141b8:	mov	r0, r8
   141bc:	mov	r1, r9
   141c0:	mov	ip, #64	; 0x40
   141c4:	mov	r4, #1
   141c8:	mov	r5, #0
   141cc:	mov	fp, #0
   141d0:	sub	r3, r3, #1
   141d4:	str	r3, [sp, #56]	; 0x38
   141d8:	ldrd	r2, [sp, #64]	; 0x40
   141dc:	lsr	lr, r0, #1
   141e0:	lsr	sl, r3, #1
   141e4:	orr	r0, lr, r1, lsl #31
   141e8:	lsr	lr, r2, #1
   141ec:	cmp	sl, r5
   141f0:	lsr	r7, r1, #1
   141f4:	orr	lr, lr, r3, lsl #31
   141f8:	mov	r3, sl
   141fc:	orr	r1, r7, r2, lsl #31
   14200:	cmpeq	lr, r4
   14204:	mov	r2, lr
   14208:	bcc	1422c <__assert_fail@plt+0x3100>
   1420c:	moveq	lr, #1
   14210:	movne	lr, #0
   14214:	cmp	r1, r9
   14218:	cmpeq	r0, r8
   1421c:	movhi	lr, #0
   14220:	andls	lr, lr, #1
   14224:	cmp	lr, #0
   14228:	beq	14254 <__assert_fail@plt+0x3128>
   1422c:	cmp	r1, r9
   14230:	cmpeq	r0, r8
   14234:	movhi	sl, #1
   14238:	movls	sl, #0
   1423c:	subs	r8, r8, r0
   14240:	sbc	r9, r9, r1
   14244:	subs	r6, r4, r2
   14248:	sbc	r7, r5, r3
   1424c:	subs	r4, r6, sl
   14250:	sbc	r5, r7, fp
   14254:	subs	ip, ip, #1
   14258:	bne	141dc <__assert_fail@plt+0x30b0>
   1425c:	ldrd	r4, [sp, #64]	; 0x40
   14260:	mov	r2, r8
   14264:	mov	r3, r9
   14268:	add	ip, sp, #312	; 0x138
   1426c:	strd	r2, [sp, #24]
   14270:	mov	r3, #0
   14274:	ldr	r2, [sp, #56]	; 0x38
   14278:	subs	r1, r4, r8
   1427c:	sbc	r0, r5, r9
   14280:	str	r1, [sp, #336]	; 0x150
   14284:	mov	r1, #1
   14288:	strd	r2, [ip]
   1428c:	mov	r3, r5
   14290:	str	r1, [sp, #288]	; 0x120
   14294:	str	r1, [sp, #292]	; 0x124
   14298:	add	r1, sp, #336	; 0x150
   1429c:	str	r0, [sp, #340]	; 0x154
   142a0:	mov	r0, r4
   142a4:	ldrd	r6, [r1]
   142a8:	cmp	r7, r9
   142ac:	cmpeq	r6, r8
   142b0:	movhi	r2, #1
   142b4:	movls	r2, #0
   142b8:	rsbs	r6, r2, #0
   142bc:	sbc	r7, r7, r7
   142c0:	adds	r1, r8, r8
   142c4:	adc	r2, r9, r9
   142c8:	and	r0, r0, r6
   142cc:	subs	r1, r1, r4
   142d0:	and	r3, r3, r7
   142d4:	sbc	r2, r2, r5
   142d8:	adds	r1, r0, r1
   142dc:	adc	r3, r3, r2
   142e0:	str	r1, [sp, #32]
   142e4:	str	r3, [sp, #36]	; 0x24
   142e8:	ldrd	r2, [sp, #32]
   142ec:	mov	r4, r2
   142f0:	mov	r5, r3
   142f4:	strd	r2, [sp, #56]	; 0x38
   142f8:	add	r1, sp, #312	; 0x138
   142fc:	ldrd	r2, [sp, #64]	; 0x40
   14300:	ldrd	r0, [r1]
   14304:	cmp	r3, r1
   14308:	cmpeq	r2, r0
   1430c:	bls	14d8c <__assert_fail@plt+0x3c60>
   14310:	ldrd	r6, [sp, #64]	; 0x40
   14314:	movw	r3, #29224	; 0x7228
   14318:	movt	r3, #2
   1431c:	mov	r0, #0
   14320:	mov	lr, r0
   14324:	lsr	r2, r6, #1
   14328:	and	r1, r6, #1
   1432c:	str	r0, [sp, #244]	; 0xf4
   14330:	str	r7, [sp, #88]	; 0x58
   14334:	orr	r2, r2, r7, lsl #31
   14338:	str	r6, [sp, #92]	; 0x5c
   1433c:	str	r1, [sp, #240]	; 0xf0
   14340:	lsr	r1, r7, #1
   14344:	strd	r4, [sp, #248]	; 0xf8
   14348:	str	r2, [sp, #304]	; 0x130
   1434c:	and	r2, r2, #127	; 0x7f
   14350:	add	r3, r3, r2
   14354:	str	r1, [sp, #308]	; 0x134
   14358:	ldrb	r1, [r3, #716]	; 0x2cc
   1435c:	umull	r8, r9, r1, r1
   14360:	adds	r1, r1, r1
   14364:	adc	r0, r0, r0
   14368:	mul	ip, r8, r7
   1436c:	umull	r2, r3, r8, r6
   14370:	mla	ip, r6, r9, ip
   14374:	subs	r1, r1, r2
   14378:	add	r3, ip, r3
   1437c:	umull	r8, r9, r1, r1
   14380:	sbc	r0, r0, r3
   14384:	mul	r3, r1, r0
   14388:	adds	r1, r1, r1
   1438c:	mul	ip, r8, r7
   14390:	adc	r0, r0, r0
   14394:	add	r9, r9, r3, lsl #1
   14398:	umull	r2, r3, r8, r6
   1439c:	mla	ip, r6, r9, ip
   143a0:	subs	r1, r1, r2
   143a4:	add	r3, ip, r3
   143a8:	umull	r8, r9, r1, r1
   143ac:	sbc	r0, r0, r3
   143b0:	mul	r3, r1, r0
   143b4:	adds	r1, r1, r1
   143b8:	mul	ip, r8, r7
   143bc:	adc	r0, r0, r0
   143c0:	add	r9, r9, r3, lsl #1
   143c4:	umull	r2, r3, r8, r6
   143c8:	mla	ip, r6, r9, ip
   143cc:	subs	r1, r1, r2
   143d0:	add	r3, ip, r3
   143d4:	str	r1, [sp, #96]	; 0x60
   143d8:	sbc	r3, r0, r3
   143dc:	str	r3, [sp, #100]	; 0x64
   143e0:	add	r3, sp, #312	; 0x138
   143e4:	ldrd	r2, [r3]
   143e8:	subs	r1, r6, r2
   143ec:	str	r1, [sp, #136]	; 0x88
   143f0:	sbc	r1, r7, r3
   143f4:	str	r1, [sp, #140]	; 0x8c
   143f8:	subs	r1, r2, r6
   143fc:	sbc	r3, r3, r7
   14400:	ldr	r7, [sp, #292]	; 0x124
   14404:	str	r1, [sp, #144]	; 0x90
   14408:	str	r3, [sp, #148]	; 0x94
   1440c:	ldrd	r2, [sp, #32]
   14410:	umull	r0, r1, r3, r2
   14414:	umull	r4, r5, r2, r2
   14418:	adds	r9, r0, r0
   1441c:	adc	sl, r1, r1
   14420:	strd	r4, [sp, #80]	; 0x50
   14424:	adds	r4, r5, r9
   14428:	umull	r8, r9, r3, r3
   1442c:	adc	r3, lr, sl
   14430:	str	r4, [sp, #120]	; 0x78
   14434:	str	r3, [sp, #124]	; 0x7c
   14438:	ldrd	r2, [sp, #120]	; 0x78
   1443c:	cmp	r1, r3
   14440:	cmpeq	r0, r2
   14444:	bls	14450 <__assert_fail@plt+0x3324>
   14448:	adds	r8, r8, #0
   1444c:	adc	r9, r9, #1
   14450:	mov	ip, #0
   14454:	ldr	r2, [sp, #80]	; 0x50
   14458:	ldrd	r4, [sp, #120]	; 0x78
   1445c:	adds	r3, r5, r8
   14460:	str	r3, [sp, #168]	; 0xa8
   14464:	adc	r3, ip, r9
   14468:	adds	r0, ip, r2
   1446c:	mov	r2, r4
   14470:	ldr	r4, [sp, #92]	; 0x5c
   14474:	str	r3, [sp, #172]	; 0xac
   14478:	ldr	r3, [sp, #100]	; 0x64
   1447c:	mul	r8, r0, r3
   14480:	adc	r3, r2, ip
   14484:	ldr	r2, [sp, #96]	; 0x60
   14488:	umull	r0, r1, r0, r2
   1448c:	mla	r2, r2, r3, r8
   14490:	ldr	r3, [sp, #88]	; 0x58
   14494:	umull	sl, fp, r0, r4
   14498:	add	r2, r2, r1
   1449c:	umull	r8, r9, r3, r0
   144a0:	umull	r0, r1, r2, r4
   144a4:	umull	r2, r3, r2, r3
   144a8:	adds	r8, r8, r0
   144ac:	adc	r9, r9, r1
   144b0:	adds	r4, fp, r8
   144b4:	adc	ip, ip, r9
   144b8:	str	r4, [sp, #128]	; 0x80
   144bc:	str	ip, [sp, #132]	; 0x84
   144c0:	ldrd	r4, [sp, #128]	; 0x80
   144c4:	cmp	r1, r5
   144c8:	cmpeq	r0, r4
   144cc:	bls	144d8 <__assert_fail@plt+0x33ac>
   144d0:	adds	r2, r2, #0
   144d4:	adc	r3, r3, #1
   144d8:	ldr	r1, [sp, #132]	; 0x84
   144dc:	mov	r0, #0
   144e0:	adds	r1, r1, r2
   144e4:	adc	r3, r0, r3
   144e8:	str	r1, [sp, #176]	; 0xb0
   144ec:	str	r3, [sp, #180]	; 0xb4
   144f0:	ldrd	r2, [sp, #168]	; 0xa8
   144f4:	ldrd	r0, [sp, #176]	; 0xb0
   144f8:	subs	ip, r2, r0
   144fc:	str	ip, [sp, #72]	; 0x48
   14500:	sbc	ip, r3, r1
   14504:	cmp	r3, r1
   14508:	cmpeq	r2, r0
   1450c:	str	ip, [sp, #76]	; 0x4c
   14510:	bcs	1452c <__assert_fail@plt+0x3400>
   14514:	ldrd	r2, [sp, #64]	; 0x40
   14518:	ldr	r1, [sp, #72]	; 0x48
   1451c:	adds	r1, r1, r2
   14520:	adc	r3, ip, r3
   14524:	str	r1, [sp, #72]	; 0x48
   14528:	str	r3, [sp, #76]	; 0x4c
   1452c:	ldrd	r8, [sp, #64]	; 0x40
   14530:	ldrd	sl, [sp, #72]	; 0x48
   14534:	ldrd	r2, [sp, #136]	; 0x88
   14538:	cmp	fp, r3
   1453c:	cmpeq	sl, r2
   14540:	movcc	r2, #1
   14544:	movcs	r2, #0
   14548:	rsbs	r4, r2, #0
   1454c:	ldr	r2, [sp, #144]	; 0x90
   14550:	sbc	r5, r5, r5
   14554:	and	r0, r5, r9
   14558:	adds	r1, sl, r2
   1455c:	and	r2, r4, r8
   14560:	ldr	r4, [sp, #148]	; 0x94
   14564:	adc	r3, fp, r4
   14568:	adds	r2, r2, r1
   1456c:	adc	r3, r0, r3
   14570:	strd	r2, [sp, #32]
   14574:	ldrd	sl, [sp, #32]
   14578:	ldr	r4, [sp, #36]	; 0x24
   1457c:	ldrd	r2, [sp, #56]	; 0x38
   14580:	cmp	r3, fp
   14584:	cmpeq	r2, sl
   14588:	movcc	r0, #1
   1458c:	movcs	r0, #0
   14590:	rsbs	r0, r0, #0
   14594:	sbc	r1, r1, r1
   14598:	subs	r3, r2, sl
   1459c:	ldr	r2, [sp, #60]	; 0x3c
   145a0:	and	sl, r0, r8
   145a4:	sbc	r2, r2, r4
   145a8:	adds	sl, sl, r3
   145ac:	and	r3, r1, r9
   145b0:	ldrd	r0, [sp, #24]
   145b4:	adc	r2, r3, r2
   145b8:	ldr	r3, [sp, #28]
   145bc:	umull	r8, r9, r1, sl
   145c0:	umull	sl, fp, r0, sl
   145c4:	mov	r4, r8
   145c8:	mov	r5, r9
   145cc:	umlal	r4, r5, r0, r2
   145d0:	umull	r2, r3, r3, r2
   145d4:	mov	r0, r4
   145d8:	adds	r4, fp, r0
   145dc:	adc	r1, lr, r5
   145e0:	str	r4, [sp, #104]	; 0x68
   145e4:	str	r1, [sp, #108]	; 0x6c
   145e8:	ldrd	r0, [sp, #104]	; 0x68
   145ec:	cmp	r9, r1
   145f0:	cmpeq	r8, r0
   145f4:	bls	14600 <__assert_fail@plt+0x34d4>
   145f8:	adds	r2, r2, #0
   145fc:	adc	r3, r3, #1
   14600:	ldrd	r4, [sp, #104]	; 0x68
   14604:	mov	ip, #0
   14608:	adds	r1, r5, r2
   1460c:	adc	r3, ip, r3
   14610:	adds	sl, ip, sl
   14614:	adc	r2, r4, ip
   14618:	ldr	r4, [sp, #96]	; 0x60
   1461c:	str	r1, [sp, #152]	; 0x98
   14620:	str	r3, [sp, #156]	; 0x9c
   14624:	ldr	r3, [sp, #100]	; 0x64
   14628:	umull	r0, r1, sl, r4
   1462c:	mul	r3, sl, r3
   14630:	mla	r2, r4, r2, r3
   14634:	ldr	r3, [sp, #88]	; 0x58
   14638:	ldr	r4, [sp, #92]	; 0x5c
   1463c:	add	r2, r2, r1
   14640:	umull	r8, r9, r0, r3
   14644:	umull	sl, fp, r0, r4
   14648:	umull	r0, r1, r2, r4
   1464c:	umull	r2, r3, r2, r3
   14650:	adds	r8, r8, r0
   14654:	adc	r9, r9, r1
   14658:	adds	r4, fp, r8
   1465c:	adc	ip, ip, r9
   14660:	str	r4, [sp, #112]	; 0x70
   14664:	str	ip, [sp, #116]	; 0x74
   14668:	ldrd	r4, [sp, #112]	; 0x70
   1466c:	cmp	r1, r5
   14670:	cmpeq	r0, r4
   14674:	bls	14680 <__assert_fail@plt+0x3554>
   14678:	adds	r2, r2, #0
   1467c:	adc	r3, r3, #1
   14680:	ldr	r1, [sp, #116]	; 0x74
   14684:	mov	r0, #0
   14688:	adds	r1, r1, r2
   1468c:	adc	r3, r0, r3
   14690:	str	r1, [sp, #160]	; 0xa0
   14694:	str	r3, [sp, #164]	; 0xa4
   14698:	ldrd	r2, [sp, #152]	; 0x98
   1469c:	ldrd	r0, [sp, #160]	; 0xa0
   146a0:	subs	ip, r2, r0
   146a4:	str	ip, [sp, #24]
   146a8:	sbc	ip, r3, r1
   146ac:	cmp	r3, r1
   146b0:	cmpeq	r2, r0
   146b4:	str	ip, [sp, #28]
   146b8:	bcs	146d4 <__assert_fail@plt+0x35a8>
   146bc:	ldr	r1, [sp, #24]
   146c0:	ldrd	r2, [sp, #64]	; 0x40
   146c4:	adds	r1, r1, r2
   146c8:	adc	r3, ip, r3
   146cc:	str	r1, [sp, #24]
   146d0:	str	r3, [sp, #28]
   146d4:	and	r3, r7, #31
   146d8:	cmp	r3, #1
   146dc:	beq	14888 <__assert_fail@plt+0x375c>
   146e0:	subs	r7, r7, #1
   146e4:	bne	1440c <__assert_fail@plt+0x32e0>
   146e8:	ldr	r3, [sp, #288]	; 0x120
   146ec:	cmp	r3, #0
   146f0:	lsl	r3, r3, #1
   146f4:	str	r3, [sp, #292]	; 0x124
   146f8:	beq	14d08 <__assert_fail@plt+0x3bdc>
   146fc:	ldrd	r4, [sp, #32]
   14700:	str	r7, [sp, #80]	; 0x50
   14704:	umull	r2, r3, r5, r4
   14708:	umull	r6, r7, r4, r4
   1470c:	adds	r9, r2, r2
   14710:	adc	ip, r3, r3
   14714:	adds	r0, r7, r9
   14718:	umull	r8, r9, r5, r5
   1471c:	adc	r1, lr, ip
   14720:	strd	r0, [sp, #8]
   14724:	ldrd	r0, [sp, #8]
   14728:	cmp	r3, r1
   1472c:	cmpeq	r2, r0
   14730:	bls	1473c <__assert_fail@plt+0x3610>
   14734:	adds	r8, r8, #0
   14738:	adc	r9, r9, #1
   1473c:	ldrd	r2, [sp, #8]
   14740:	mov	r1, #0
   14744:	ldr	r0, [sp, #96]	; 0x60
   14748:	adds	r3, r3, r8
   1474c:	str	r3, [sp, #40]	; 0x28
   14750:	adc	r3, r1, r9
   14754:	adds	r6, r1, r6
   14758:	adc	r2, r2, r1
   1475c:	str	r3, [sp, #44]	; 0x2c
   14760:	ldr	r3, [sp, #100]	; 0x64
   14764:	mul	r3, r6, r3
   14768:	umull	r6, r7, r6, r0
   1476c:	mla	r2, r0, r2, r3
   14770:	ldr	r3, [sp, #88]	; 0x58
   14774:	ldr	r0, [sp, #92]	; 0x5c
   14778:	add	r2, r2, r7
   1477c:	umull	r8, r9, r3, r6
   14780:	strd	r8, [sp, #56]	; 0x38
   14784:	umull	r8, r9, r6, r0
   14788:	umull	r6, r7, r2, r0
   1478c:	ldr	r0, [sp, #56]	; 0x38
   14790:	umull	r2, r3, r3, r2
   14794:	mov	ip, r9
   14798:	adds	r8, r0, r6
   1479c:	ldr	r0, [sp, #60]	; 0x3c
   147a0:	adc	r9, r0, r7
   147a4:	adds	r0, ip, r8
   147a8:	adc	r1, r1, r9
   147ac:	strd	r0, [sp, #16]
   147b0:	ldrd	r0, [sp, #16]
   147b4:	cmp	r7, r1
   147b8:	cmpeq	r6, r0
   147bc:	bls	147c8 <__assert_fail@plt+0x369c>
   147c0:	adds	r2, r2, #0
   147c4:	adc	r3, r3, #1
   147c8:	ldr	r1, [sp, #20]
   147cc:	mov	r6, #0
   147d0:	adds	r1, r1, r2
   147d4:	adc	r3, r6, r3
   147d8:	str	r1, [sp, #48]	; 0x30
   147dc:	str	r3, [sp, #52]	; 0x34
   147e0:	ldrd	r2, [sp, #40]	; 0x28
   147e4:	ldrd	r6, [sp, #48]	; 0x30
   147e8:	subs	sl, r2, r6
   147ec:	sbc	fp, r3, r7
   147f0:	cmp	r3, r7
   147f4:	cmpeq	r2, r6
   147f8:	bcs	14808 <__assert_fail@plt+0x36dc>
   147fc:	ldrd	r2, [sp, #64]	; 0x40
   14800:	adds	sl, sl, r2
   14804:	adc	fp, fp, r3
   14808:	ldrd	r6, [sp, #64]	; 0x40
   1480c:	ldrd	r2, [sp, #136]	; 0x88
   14810:	cmp	fp, r3
   14814:	ldr	r3, [sp, #80]	; 0x50
   14818:	cmpeq	sl, r2
   1481c:	movcc	r2, #1
   14820:	movcs	r2, #0
   14824:	rsbs	r8, r2, #0
   14828:	sbc	r9, r9, r9
   1482c:	and	r2, r8, r6
   14830:	add	r0, r3, #1
   14834:	ldr	r3, [sp, #144]	; 0x90
   14838:	and	r6, r9, r7
   1483c:	str	r0, [sp, #80]	; 0x50
   14840:	adds	r1, sl, r3
   14844:	ldr	r3, [sp, #148]	; 0x94
   14848:	adc	r3, fp, r3
   1484c:	adds	r4, r2, r1
   14850:	adc	r5, r6, r3
   14854:	ldr	r3, [sp, #288]	; 0x120
   14858:	cmp	r3, r0
   1485c:	bne	14704 <__assert_fail@plt+0x35d8>
   14860:	add	r3, sp, #296	; 0x128
   14864:	mov	r7, r0
   14868:	strd	r4, [sp, #248]	; 0xf8
   1486c:	strd	sl, [r3]
   14870:	ldrd	r2, [sp, #32]
   14874:	strd	r4, [sp, #32]
   14878:	strd	r2, [sp, #56]	; 0x38
   1487c:	ldr	r3, [sp, #292]	; 0x124
   14880:	str	r3, [sp, #288]	; 0x120
   14884:	b	1440c <__assert_fail@plt+0x32e0>
   14888:	ldrd	r2, [sp, #240]	; 0xf0
   1488c:	orrs	r3, r2, r3
   14890:	ldrd	r2, [sp, #24]
   14894:	bne	14948 <__assert_fail@plt+0x381c>
   14898:	ldrd	r4, [sp, #64]	; 0x40
   1489c:	lsr	ip, r2, #1
   148a0:	lsr	r8, r3, #1
   148a4:	orr	ip, ip, r3, lsl #31
   148a8:	mov	r0, r4
   148ac:	mov	r1, r5
   148b0:	mov	r9, r7
   148b4:	b	148e4 <__assert_fail@plt+0x37b8>
   148b8:	asr	r2, r7, #31
   148bc:	and	r3, r2, r6
   148c0:	and	r1, r7, r2
   148c4:	adds	ip, ip, r3
   148c8:	eor	r3, r2, r6
   148cc:	adc	r8, r8, r1
   148d0:	eor	r1, r7, r2
   148d4:	subs	r3, r3, r2
   148d8:	sbc	r2, r1, r2
   148dc:	mov	r0, r3
   148e0:	mov	r1, r2
   148e4:	and	sl, r0, #1
   148e8:	lsr	r3, r0, #1
   148ec:	mov	fp, lr
   148f0:	orrs	r4, sl, fp
   148f4:	lsr	r2, r1, #1
   148f8:	orr	r3, r3, r1, lsl #31
   148fc:	beq	148dc <__assert_fail@plt+0x37b0>
   14900:	subs	r6, r3, ip
   14904:	sbc	r7, r2, r8
   14908:	orrs	r3, r6, r7
   1490c:	bne	148b8 <__assert_fail@plt+0x378c>
   14910:	add	r3, sp, #256	; 0x100
   14914:	str	r1, [sp, #236]	; 0xec
   14918:	strd	r6, [r3]
   1491c:	add	r3, sp, #272	; 0x110
   14920:	mov	r7, r9
   14924:	strd	sl, [r3]
   14928:	bic	r3, r0, #1
   1492c:	str	r3, [sp, #232]	; 0xe8
   14930:	ldrd	r2, [sp, #232]	; 0xe8
   14934:	orrs	r3, r2, r3
   14938:	bne	14964 <__assert_fail@plt+0x3838>
   1493c:	ldrd	r2, [sp, #32]
   14940:	strd	r2, [sp, #248]	; 0xf8
   14944:	b	146e0 <__assert_fail@plt+0x35b4>
   14948:	orrs	r1, r2, r3
   1494c:	beq	14964 <__assert_fail@plt+0x3838>
   14950:	mov	r0, r2
   14954:	mov	r1, r3
   14958:	ldr	ip, [sp, #304]	; 0x130
   1495c:	ldr	r8, [sp, #308]	; 0x134
   14960:	b	148b0 <__assert_fail@plt+0x3784>
   14964:	ldrd	r4, [sp, #248]	; 0xf8
   14968:	mov	lr, #0
   1496c:	str	r7, [sp, #292]	; 0x124
   14970:	umull	r2, r3, r5, r4
   14974:	umull	r0, r1, r4, r4
   14978:	adds	r8, r2, r2
   1497c:	adc	sl, r3, r3
   14980:	adds	r8, r1, r8
   14984:	adc	ip, lr, sl
   14988:	str	r8, [sp, #192]	; 0xc0
   1498c:	umull	r8, r9, r5, r5
   14990:	str	ip, [sp, #196]	; 0xc4
   14994:	ldrd	sl, [sp, #192]	; 0xc0
   14998:	cmp	r3, fp
   1499c:	cmpeq	r2, sl
   149a0:	bls	149b4 <__assert_fail@plt+0x3888>
   149a4:	adds	r3, r8, #0
   149a8:	mov	r8, r3
   149ac:	adc	r3, r9, #1
   149b0:	mov	r9, r3
   149b4:	ldrd	sl, [sp, #192]	; 0xc0
   149b8:	mov	r2, r8
   149bc:	mov	ip, #0
   149c0:	ldr	r8, [sp, #96]	; 0x60
   149c4:	adds	r3, fp, r2
   149c8:	str	r3, [sp, #208]	; 0xd0
   149cc:	adc	r3, ip, r9
   149d0:	adds	r0, ip, r0
   149d4:	adc	r2, sl, ip
   149d8:	str	r3, [sp, #212]	; 0xd4
   149dc:	ldr	r3, [sp, #100]	; 0x64
   149e0:	mul	r3, r0, r3
   149e4:	umull	r0, r1, r0, r8
   149e8:	mla	r2, r8, r2, r3
   149ec:	ldr	r3, [sp, #88]	; 0x58
   149f0:	add	r2, r2, r1
   149f4:	umull	r8, r9, r3, r0
   149f8:	strd	r8, [sp, #80]	; 0x50
   149fc:	ldr	r8, [sp, #84]	; 0x54
   14a00:	ldr	r9, [sp, #92]	; 0x5c
   14a04:	umull	sl, fp, r0, r9
   14a08:	ldr	sl, [sp, #80]	; 0x50
   14a0c:	umull	r0, r1, r2, r9
   14a10:	umull	r2, r3, r3, r2
   14a14:	adds	sl, sl, r0
   14a18:	adc	r8, r8, r1
   14a1c:	adds	r9, fp, sl
   14a20:	adc	ip, ip, r8
   14a24:	str	r9, [sp, #200]	; 0xc8
   14a28:	str	ip, [sp, #204]	; 0xcc
   14a2c:	ldrd	r8, [sp, #200]	; 0xc8
   14a30:	cmp	r1, r9
   14a34:	cmpeq	r0, r8
   14a38:	bls	14a44 <__assert_fail@plt+0x3918>
   14a3c:	adds	r2, r2, #0
   14a40:	adc	r3, r3, #1
   14a44:	ldr	r1, [sp, #204]	; 0xcc
   14a48:	mov	r0, #0
   14a4c:	adds	r1, r1, r2
   14a50:	adc	r3, r0, r3
   14a54:	str	r1, [sp, #216]	; 0xd8
   14a58:	str	r3, [sp, #220]	; 0xdc
   14a5c:	ldrd	r2, [sp, #208]	; 0xd0
   14a60:	ldrd	r0, [sp, #216]	; 0xd8
   14a64:	subs	ip, r2, r0
   14a68:	str	ip, [sp, #184]	; 0xb8
   14a6c:	sbc	ip, r3, r1
   14a70:	cmp	r3, r1
   14a74:	cmpeq	r2, r0
   14a78:	str	ip, [sp, #188]	; 0xbc
   14a7c:	bcs	14a98 <__assert_fail@plt+0x396c>
   14a80:	ldrd	r2, [sp, #64]	; 0x40
   14a84:	ldr	r1, [sp, #184]	; 0xb8
   14a88:	adds	r1, r1, r2
   14a8c:	adc	r3, ip, r3
   14a90:	str	r1, [sp, #184]	; 0xb8
   14a94:	str	r3, [sp, #188]	; 0xbc
   14a98:	ldrd	sl, [sp, #64]	; 0x40
   14a9c:	ldrd	r2, [sp, #136]	; 0x88
   14aa0:	ldrd	r0, [sp, #184]	; 0xb8
   14aa4:	ldr	ip, [sp, #148]	; 0x94
   14aa8:	cmp	r1, r3
   14aac:	ldr	r3, [sp, #188]	; 0xbc
   14ab0:	cmpeq	r0, r2
   14ab4:	movcc	r2, #1
   14ab8:	movcs	r2, #0
   14abc:	rsbs	r8, r2, #0
   14ac0:	ldr	r2, [sp, #144]	; 0x90
   14ac4:	sbc	r9, r9, r9
   14ac8:	adds	r1, r0, r2
   14acc:	and	r2, r8, sl
   14ad0:	and	r0, r9, fp
   14ad4:	adc	r3, r3, ip
   14ad8:	adds	r4, r2, r1
   14adc:	adc	r5, r0, r3
   14ae0:	ldrd	r0, [sp, #56]	; 0x38
   14ae4:	ldr	r3, [sp, #60]	; 0x3c
   14ae8:	cmp	r1, r5
   14aec:	cmpeq	r0, r4
   14af0:	movcc	r2, #1
   14af4:	movcs	r2, #0
   14af8:	rsbs	r8, r2, #0
   14afc:	sbc	r9, r9, r9
   14b00:	and	r2, r8, sl
   14b04:	subs	r1, r0, r4
   14b08:	and	r0, r9, fp
   14b0c:	sbc	r3, r3, r5
   14b10:	adds	r6, r2, r1
   14b14:	adc	r7, r0, r3
   14b18:	ldrd	r2, [sp, #240]	; 0xf0
   14b1c:	orrs	r3, r2, r3
   14b20:	bne	14cb4 <__assert_fail@plt+0x3b88>
   14b24:	lsr	r1, r6, #1
   14b28:	mov	r6, sl
   14b2c:	lsr	r0, r7, #1
   14b30:	orr	r1, r1, r7, lsl #31
   14b34:	mov	r7, fp
   14b38:	b	14b68 <__assert_fail@plt+0x3a3c>
   14b3c:	asr	r2, fp, #31
   14b40:	and	r3, r2, sl
   14b44:	and	ip, fp, r2
   14b48:	adds	r1, r1, r3
   14b4c:	eor	r3, r2, sl
   14b50:	adc	r0, r0, ip
   14b54:	eor	ip, fp, r2
   14b58:	subs	r3, r3, r2
   14b5c:	sbc	r2, ip, r2
   14b60:	mov	r6, r3
   14b64:	mov	r7, r2
   14b68:	and	r8, r6, #1
   14b6c:	lsr	r3, r6, #1
   14b70:	mov	r9, lr
   14b74:	orrs	ip, r8, r9
   14b78:	lsr	r2, r7, #1
   14b7c:	orr	r3, r3, r7, lsl #31
   14b80:	beq	14b60 <__assert_fail@plt+0x3a34>
   14b84:	subs	sl, r3, r1
   14b88:	sbc	fp, r2, r0
   14b8c:	orrs	r3, sl, fp
   14b90:	bne	14b3c <__assert_fail@plt+0x3a10>
   14b94:	add	r3, sp, #264	; 0x108
   14b98:	strd	sl, [r3]
   14b9c:	add	r3, sp, #280	; 0x118
   14ba0:	strd	r8, [r3]
   14ba4:	bic	r3, r6, #1
   14ba8:	adds	r3, r3, #1
   14bac:	str	r3, [sp, #224]	; 0xe0
   14bb0:	adc	r3, r7, #0
   14bb4:	str	r3, [sp, #228]	; 0xe4
   14bb8:	ldrd	r2, [sp, #224]	; 0xe0
   14bbc:	cmp	r3, #0
   14bc0:	cmpeq	r2, #1
   14bc4:	beq	14970 <__assert_fail@plt+0x3844>
   14bc8:	add	r3, sp, #320	; 0x140
   14bcc:	ldrd	r0, [sp, #64]	; 0x40
   14bd0:	strd	r6, [r3]
   14bd4:	ldrd	r2, [sp, #224]	; 0xe0
   14bd8:	cmp	r3, r1
   14bdc:	cmpeq	r2, r0
   14be0:	beq	14cd0 <__assert_fail@plt+0x3ba4>
   14be4:	ldrd	r0, [sp, #64]	; 0x40
   14be8:	ldrd	r6, [sp, #224]	; 0xe0
   14bec:	mov	r2, r6
   14bf0:	mov	r3, r7
   14bf4:	bl	27024 <__assert_fail@plt+0x15ef8>
   14bf8:	strd	r0, [sp, #64]	; 0x40
   14bfc:	add	r1, pc, #420	; 0x1a4
   14c00:	ldrd	r0, [r1]
   14c04:	cmp	r7, r1
   14c08:	cmpeq	r6, r0
   14c0c:	bls	14c20 <__assert_fail@plt+0x3af4>
   14c10:	ldrd	r0, [sp, #224]	; 0xe0
   14c14:	bl	13ba4 <__assert_fail@plt+0x2a78>
   14c18:	cmp	r0, #0
   14c1c:	beq	14d24 <__assert_fail@plt+0x3bf8>
   14c20:	mov	r1, #1
   14c24:	ldrd	r2, [sp, #224]	; 0xe0
   14c28:	str	r1, [sp]
   14c2c:	ldr	r0, [sp, #328]	; 0x148
   14c30:	bl	11450 <__assert_fail@plt+0x324>
   14c34:	ldrd	r2, [sp, #64]	; 0x40
   14c38:	cmp	r3, #0
   14c3c:	cmpeq	r2, #1
   14c40:	bls	14d44 <__assert_fail@plt+0x3c18>
   14c44:	add	r1, pc, #348	; 0x15c
   14c48:	ldrd	r0, [r1]
   14c4c:	cmp	r3, r1
   14c50:	cmpeq	r2, r0
   14c54:	bls	14d5c <__assert_fail@plt+0x3c30>
   14c58:	ldrd	r0, [sp, #64]	; 0x40
   14c5c:	bl	13ba4 <__assert_fail@plt+0x2a78>
   14c60:	cmp	r0, #0
   14c64:	bne	14d5c <__assert_fail@plt+0x3c30>
   14c68:	ldrd	r0, [sp, #32]
   14c6c:	ldrd	r6, [sp, #64]	; 0x40
   14c70:	mov	r2, r6
   14c74:	mov	r3, r7
   14c78:	bl	27024 <__assert_fail@plt+0x15ef8>
   14c7c:	strd	r2, [sp, #32]
   14c80:	mov	r2, r6
   14c84:	mov	r3, r7
   14c88:	ldrd	r0, [sp, #56]	; 0x38
   14c8c:	bl	27024 <__assert_fail@plt+0x15ef8>
   14c90:	mov	r0, r4
   14c94:	mov	r1, r5
   14c98:	strd	r2, [sp, #56]	; 0x38
   14c9c:	mov	r2, r6
   14ca0:	mov	r3, r7
   14ca4:	bl	27024 <__assert_fail@plt+0x15ef8>
   14ca8:	mov	r4, r2
   14cac:	mov	r5, r3
   14cb0:	b	142f8 <__assert_fail@plt+0x31cc>
   14cb4:	orrs	r3, r6, r7
   14cb8:	beq	14cc8 <__assert_fail@plt+0x3b9c>
   14cbc:	ldr	r1, [sp, #304]	; 0x130
   14cc0:	ldr	r0, [sp, #308]	; 0x134
   14cc4:	b	14b68 <__assert_fail@plt+0x3a3c>
   14cc8:	add	r3, sp, #320	; 0x140
   14ccc:	strd	r6, [r3]
   14cd0:	ldrd	r2, [sp, #64]	; 0x40
   14cd4:	cmp	r3, #0
   14cd8:	ldr	r3, [sp, #332]	; 0x14c
   14cdc:	cmpeq	r2, #1
   14ce0:	add	r3, r3, #1
   14ce4:	str	r3, [sp, #332]	; 0x14c
   14ce8:	bne	141ac <__assert_fail@plt+0x3080>
   14cec:	movw	r1, #41712	; 0xa2f0
   14cf0:	movt	r1, #2
   14cf4:	ldr	r3, [pc, #180]	; 14db0 <__assert_fail@plt+0x3c84>
   14cf8:	movw	r0, #42040	; 0xa438
   14cfc:	movt	r0, #2
   14d00:	movw	r2, #1466	; 0x5ba
   14d04:	bl	1112c <__assert_fail@plt>
   14d08:	ldrd	r2, [sp, #32]
   14d0c:	ldr	r7, [sp, #288]	; 0x120
   14d10:	ldr	r1, [sp, #292]	; 0x124
   14d14:	strd	r2, [sp, #56]	; 0x38
   14d18:	strd	r2, [sp, #248]	; 0xf8
   14d1c:	str	r1, [sp, #288]	; 0x120
   14d20:	b	1440c <__assert_fail@plt+0x32e0>
   14d24:	ldrd	r0, [sp, #224]	; 0xe0
   14d28:	ldr	r3, [sp, #328]	; 0x148
   14d2c:	ldr	r2, [sp, #332]	; 0x14c
   14d30:	bl	14170 <__assert_fail@plt+0x3044>
   14d34:	ldrd	r2, [sp, #64]	; 0x40
   14d38:	cmp	r3, #0
   14d3c:	cmpeq	r2, #1
   14d40:	bhi	14c44 <__assert_fail@plt+0x3b18>
   14d44:	beq	14d70 <__assert_fail@plt+0x3c44>
   14d48:	mov	r4, #0
   14d4c:	mov	r5, #0
   14d50:	strd	r4, [sp, #32]
   14d54:	strd	r4, [sp, #56]	; 0x38
   14d58:	b	142f8 <__assert_fail@plt+0x31cc>
   14d5c:	mov	r1, #1
   14d60:	ldrd	r2, [sp, #64]	; 0x40
   14d64:	str	r1, [sp]
   14d68:	ldr	r0, [sp, #328]	; 0x148
   14d6c:	bl	11450 <__assert_fail@plt+0x324>
   14d70:	add	sp, sp, #348	; 0x15c
   14d74:	ldrd	r4, [sp]
   14d78:	ldrd	r6, [sp, #8]
   14d7c:	ldrd	r8, [sp, #16]
   14d80:	ldrd	sl, [sp, #24]
   14d84:	add	sp, sp, #32
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	movw	r1, #41712	; 0xa2f0
   14d90:	movt	r1, #2
   14d94:	ldr	r3, [pc, #20]	; 14db0 <__assert_fail@plt+0x3c84>
   14d98:	movw	r0, #42052	; 0xa444
   14d9c:	movt	r0, #2
   14da0:	mov	r2, #1472	; 0x5c0
   14da4:	bl	1112c <__assert_fail@plt>
   14da8:	cmneq	sp, r8, ror sp
   14dac:	andeq	r0, r0, r0
   14db0:	andeq	r7, r2, ip, ror r5
   14db4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14db8:	subs	r5, r1, #0
   14dbc:	mov	r4, r0
   14dc0:	cmpeq	r0, #1
   14dc4:	strd	r6, [sp, #8]
   14dc8:	strd	r8, [sp, #16]
   14dcc:	strd	sl, [sp, #24]
   14dd0:	mov	sl, r2
   14dd4:	mov	fp, r3
   14dd8:	str	lr, [sp, #32]
   14ddc:	sub	sp, sp, #252	; 0xfc
   14de0:	bls	15a14 <__assert_fail@plt+0x48e8>
   14de4:	mov	r0, #0
   14de8:	mov	r1, #0
   14dec:	mov	r2, #63	; 0x3f
   14df0:	mov	r3, #0
   14df4:	strd	r0, [sp, #112]	; 0x70
   14df8:	mov	r0, #1
   14dfc:	mov	r1, #0
   14e00:	strd	r0, [sp, #120]	; 0x78
   14e04:	ldrd	r0, [sp, #120]	; 0x78
   14e08:	mvn	r8, #0
   14e0c:	mvn	r9, #0
   14e10:	strd	r8, [sp, #56]	; 0x38
   14e14:	adds	lr, r0, r0
   14e18:	ldrd	r8, [sp, #112]	; 0x70
   14e1c:	adc	ip, r1, r1
   14e20:	str	ip, [sp, #48]	; 0x30
   14e24:	ldr	r1, [sp, #48]	; 0x30
   14e28:	adds	r6, r8, r8
   14e2c:	orr	r0, lr, r9, lsr #31
   14e30:	mov	ip, r9
   14e34:	adc	r7, r9, r9
   14e38:	mov	r8, r6
   14e3c:	mov	r9, r7
   14e40:	cmp	r5, r1
   14e44:	strd	r8, [sp, #112]	; 0x70
   14e48:	cmpeq	r4, r0
   14e4c:	bcc	14e70 <__assert_fail@plt+0x3d44>
   14e50:	moveq	ip, #1
   14e54:	movne	ip, #0
   14e58:	cmp	r7, fp
   14e5c:	cmpeq	r6, sl
   14e60:	movcc	ip, #0
   14e64:	andcs	ip, ip, #1
   14e68:	cmp	ip, #0
   14e6c:	beq	14ea4 <__assert_fail@plt+0x3d78>
   14e70:	cmp	r7, fp
   14e74:	mov	ip, #0
   14e78:	cmpeq	r6, sl
   14e7c:	movcc	lr, #1
   14e80:	movcs	lr, ip
   14e84:	subs	r8, r6, sl
   14e88:	str	r8, [sp, #112]	; 0x70
   14e8c:	sbc	r8, r7, fp
   14e90:	str	r8, [sp, #116]	; 0x74
   14e94:	subs	r8, r0, r4
   14e98:	sbc	r9, r1, r5
   14e9c:	subs	r0, r8, lr
   14ea0:	sbc	r1, r9, ip
   14ea4:	ldrd	r8, [sp, #56]	; 0x38
   14ea8:	subs	r2, r2, #1
   14eac:	sbc	r3, r3, #0
   14eb0:	cmp	r3, r9
   14eb4:	cmpeq	r2, r8
   14eb8:	bne	14e14 <__assert_fail@plt+0x3ce8>
   14ebc:	ldrd	r2, [sp, #112]	; 0x70
   14ec0:	mov	r7, r1
   14ec4:	mov	r6, r0
   14ec8:	strd	r6, [sp, #120]	; 0x78
   14ecc:	adds	ip, r2, r2
   14ed0:	str	ip, [sp, #72]	; 0x48
   14ed4:	adc	ip, r3, r3
   14ed8:	adds	r1, r0, r0
   14edc:	str	ip, [sp, #76]	; 0x4c
   14ee0:	adc	ip, r7, r7
   14ee4:	str	r1, [sp, #80]	; 0x50
   14ee8:	ldrd	r0, [sp, #72]	; 0x48
   14eec:	str	ip, [sp, #84]	; 0x54
   14ef0:	cmp	r3, r1
   14ef4:	ldrd	r8, [sp, #80]	; 0x50
   14ef8:	cmpeq	r2, r0
   14efc:	movhi	r3, #1
   14f00:	movls	r3, #0
   14f04:	strd	r0, [sp, #64]	; 0x40
   14f08:	adds	r8, r8, r3
   14f0c:	adc	r9, r9, #0
   14f10:	cmp	r9, r5
   14f14:	cmpeq	r8, r4
   14f18:	bhi	15420 <__assert_fail@plt+0x42f4>
   14f1c:	moveq	r3, #1
   14f20:	movne	r3, #0
   14f24:	cmp	fp, r1
   14f28:	cmpeq	sl, r0
   14f2c:	movhi	r3, #0
   14f30:	andls	r3, r3, #1
   14f34:	cmp	r3, #0
   14f38:	bne	15420 <__assert_fail@plt+0x42f4>
   14f3c:	orrs	r3, r4, r5
   14f40:	strd	r8, [sp, #208]	; 0xd0
   14f44:	movne	r3, #1
   14f48:	moveq	r3, #0
   14f4c:	strd	r8, [sp, #216]	; 0xd8
   14f50:	cmp	fp, #0
   14f54:	strd	r8, [sp, #224]	; 0xe0
   14f58:	cmpeq	sl, #1
   14f5c:	movne	r3, #1
   14f60:	cmp	r3, #0
   14f64:	beq	15798 <__assert_fail@plt+0x466c>
   14f68:	movw	r2, #29224	; 0x7228
   14f6c:	movt	r2, #2
   14f70:	mov	r3, #1
   14f74:	str	r2, [sp, #204]	; 0xcc
   14f78:	ldr	r2, [sp, #288]	; 0x120
   14f7c:	str	r3, [sp, #48]	; 0x30
   14f80:	str	r3, [sp, #56]	; 0x38
   14f84:	str	r3, [sp, #200]	; 0xc8
   14f88:	mov	r3, #0
   14f8c:	strd	r2, [sp, #96]	; 0x60
   14f90:	ldrd	r2, [sp, #64]	; 0x40
   14f94:	mov	r6, r2
   14f98:	mov	r7, r3
   14f9c:	strd	r2, [sp, #128]	; 0x80
   14fa0:	strd	r6, [sp, #168]	; 0xa8
   14fa4:	and	r2, sl, #1
   14fa8:	ubfx	r3, sl, #1, #7
   14fac:	mov	lr, #0
   14fb0:	str	r2, [sp, #184]	; 0xb8
   14fb4:	ldr	r2, [sp, #204]	; 0xcc
   14fb8:	str	lr, [sp, #188]	; 0xbc
   14fbc:	add	r3, r2, r3
   14fc0:	ldrb	ip, [r3, #716]	; 0x2cc
   14fc4:	umull	r2, r3, ip, ip
   14fc8:	adds	ip, ip, ip
   14fcc:	adc	lr, lr, lr
   14fd0:	mul	r1, r2, fp
   14fd4:	mov	r6, r1
   14fd8:	umull	r0, r1, r2, sl
   14fdc:	mla	r3, sl, r3, r6
   14fe0:	add	r1, r3, r1
   14fe4:	subs	r3, ip, r0
   14fe8:	sbc	lr, lr, r1
   14fec:	adds	ip, r3, r3
   14ff0:	umull	r0, r1, r3, r3
   14ff4:	adc	r2, lr, lr
   14ff8:	mul	r3, r3, lr
   14ffc:	umull	r6, r7, r0, sl
   15000:	add	r1, r1, r3, lsl #1
   15004:	mul	r3, r0, fp
   15008:	mla	r3, sl, r1, r3
   1500c:	add	r3, r3, r7
   15010:	mov	r7, r3
   15014:	subs	r3, ip, r6
   15018:	sbc	r2, r2, r7
   1501c:	adds	lr, r3, r3
   15020:	umull	r0, r1, r3, r3
   15024:	adc	ip, r2, r2
   15028:	mul	r3, r3, r2
   1502c:	add	r1, r1, r3, lsl #1
   15030:	mul	r3, r0, fp
   15034:	mov	r6, r3
   15038:	umull	r2, r3, r0, sl
   1503c:	mla	r1, sl, r1, r6
   15040:	add	r3, r1, r3
   15044:	subs	r1, lr, r2
   15048:	sbc	r3, ip, r3
   1504c:	str	r1, [sp, #72]	; 0x48
   15050:	str	r3, [sp, #80]	; 0x50
   15054:	b	15078 <__assert_fail@plt+0x3f4c>
   15058:	ldr	r3, [sp, #56]	; 0x38
   1505c:	ldrd	r8, [sp, #208]	; 0xd0
   15060:	subs	r3, r3, #1
   15064:	str	r3, [sp, #56]	; 0x38
   15068:	beq	152c0 <__assert_fail@plt+0x4194>
   1506c:	ldr	r3, [sp, #56]	; 0x38
   15070:	and	r3, r3, #31
   15074:	str	r3, [sp, #48]	; 0x30
   15078:	ldrd	r6, [sp, #64]	; 0x40
   1507c:	mov	r2, r8
   15080:	mov	r3, r9
   15084:	strd	r8, [sp, #8]
   15088:	strd	r4, [sp, #24]
   1508c:	strd	sl, [sp, #32]
   15090:	mov	r0, r6
   15094:	mov	r1, r7
   15098:	mov	r8, r6
   1509c:	mov	r9, r7
   150a0:	strd	r0, [sp]
   150a4:	add	r1, sp, #240	; 0xf0
   150a8:	mov	r0, r1
   150ac:	ldr	r1, [sp, #72]	; 0x48
   150b0:	strd	r8, [sp, #16]
   150b4:	str	r1, [sp, #40]	; 0x28
   150b8:	ldr	r1, [sp, #80]	; 0x50
   150bc:	str	r1, [sp, #44]	; 0x2c
   150c0:	bl	11608 <__assert_fail@plt+0x4dc>
   150c4:	ldrd	r6, [sp, #96]	; 0x60
   150c8:	ldrd	r2, [sp, #240]	; 0xf0
   150cc:	adds	r8, r0, r6
   150d0:	adcs	r9, r1, r7
   150d4:	mov	r0, r8
   150d8:	movcs	ip, #1
   150dc:	movcc	ip, #0
   150e0:	adds	r6, r2, ip
   150e4:	mov	r1, r9
   150e8:	strd	r8, [sp, #64]	; 0x40
   150ec:	adc	r7, r3, #0
   150f0:	cmp	r7, r5
   150f4:	cmpeq	r6, r4
   150f8:	bhi	1511c <__assert_fail@plt+0x3ff0>
   150fc:	moveq	ip, #1
   15100:	movne	ip, #0
   15104:	cmp	r9, fp
   15108:	cmpeq	r8, sl
   1510c:	movcc	ip, #0
   15110:	andcs	ip, ip, #1
   15114:	cmp	ip, #0
   15118:	beq	15150 <__assert_fail@plt+0x4024>
   1511c:	cmp	r1, fp
   15120:	mov	ip, #0
   15124:	cmpeq	r0, sl
   15128:	movcs	lr, ip
   1512c:	movcc	lr, #1
   15130:	subs	r3, r0, sl
   15134:	str	r3, [sp, #64]	; 0x40
   15138:	sbc	r3, r1, fp
   1513c:	subs	lr, r6, lr
   15140:	sbc	ip, r7, ip
   15144:	subs	r6, lr, r4
   15148:	sbc	r7, ip, r5
   1514c:	str	r3, [sp, #68]	; 0x44
   15150:	ldrd	r2, [sp, #64]	; 0x40
   15154:	strd	r6, [sp, #208]	; 0xd0
   15158:	ldrd	r8, [sp, #128]	; 0x80
   1515c:	ldr	r1, [sp, #216]	; 0xd8
   15160:	subs	r0, r8, r2
   15164:	str	r0, [sp, #88]	; 0x58
   15168:	sbc	r0, r9, r3
   1516c:	subs	r1, r1, r6
   15170:	str	r0, [sp, #92]	; 0x5c
   15174:	ldr	r0, [sp, #220]	; 0xdc
   15178:	str	r1, [sp, #104]	; 0x68
   1517c:	sbc	r1, r0, r7
   15180:	cmp	r3, r9
   15184:	cmpeq	r2, r8
   15188:	str	r1, [sp, #108]	; 0x6c
   1518c:	movhi	r3, #1
   15190:	movls	r3, #0
   15194:	ldrd	r8, [sp, #104]	; 0x68
   15198:	subs	r8, r8, r3
   1519c:	sbc	r9, r9, #0
   151a0:	cmp	r8, #0
   151a4:	sbcs	r3, r9, #0
   151a8:	bge	151d4 <__assert_fail@plt+0x40a8>
   151ac:	ldrd	r0, [sp, #88]	; 0x58
   151b0:	adds	r2, r0, sl
   151b4:	adcs	r3, r1, fp
   151b8:	movcs	r1, #1
   151bc:	movcc	r1, #0
   151c0:	strd	r2, [sp, #88]	; 0x58
   151c4:	adds	r2, r8, r1
   151c8:	adc	r3, r9, #0
   151cc:	adds	r8, r4, r2
   151d0:	adc	r9, r5, r3
   151d4:	ldrd	r6, [sp, #88]	; 0x58
   151d8:	strd	r8, [sp, #8]
   151dc:	ldrd	r0, [sp, #112]	; 0x70
   151e0:	ldrd	r2, [sp, #120]	; 0x78
   151e4:	strd	r0, [sp]
   151e8:	add	r0, sp, #240	; 0xf0
   151ec:	ldr	r1, [sp, #72]	; 0x48
   151f0:	strd	r6, [sp, #16]
   151f4:	strd	r4, [sp, #24]
   151f8:	strd	sl, [sp, #32]
   151fc:	str	r1, [sp, #40]	; 0x28
   15200:	ldr	r1, [sp, #80]	; 0x50
   15204:	str	r1, [sp, #44]	; 0x2c
   15208:	bl	11608 <__assert_fail@plt+0x4dc>
   1520c:	ldr	r3, [sp, #48]	; 0x30
   15210:	strd	r0, [sp, #112]	; 0x70
   15214:	cmp	r3, #1
   15218:	ldrd	r2, [sp, #240]	; 0xf0
   1521c:	strd	r2, [sp, #120]	; 0x78
   15220:	bne	15058 <__assert_fail@plt+0x3f2c>
   15224:	ldrd	r2, [sp, #184]	; 0xb8
   15228:	orrs	r3, r2, r3
   1522c:	beq	15a84 <__assert_fail@plt+0x4958>
   15230:	ldrd	r0, [sp, #112]	; 0x70
   15234:	ldrd	r2, [sp, #120]	; 0x78
   15238:	orr	ip, r0, r2
   1523c:	orr	r3, r1, r3
   15240:	str	ip, [sp, #144]	; 0x90
   15244:	str	r3, [sp, #148]	; 0x94
   15248:	ldrd	r2, [sp, #144]	; 0x90
   1524c:	orrs	r3, r2, r3
   15250:	beq	1545c <__assert_fail@plt+0x4330>
   15254:	ldrd	r6, [sp, #112]	; 0x70
   15258:	add	r0, sp, #232	; 0xe8
   1525c:	ldrd	r2, [sp, #120]	; 0x78
   15260:	strd	r6, [sp]
   15264:	strd	r4, [sp, #8]
   15268:	strd	sl, [sp, #16]
   1526c:	bl	126e0 <__assert_fail@plt+0x15b4>
   15270:	mov	r9, r1
   15274:	ldr	r1, [sp, #232]	; 0xe8
   15278:	mov	r8, r0
   1527c:	ldr	r2, [sp, #236]	; 0xec
   15280:	cmp	r9, #0
   15284:	cmpeq	r8, #1
   15288:	movne	r3, #1
   1528c:	moveq	r3, #0
   15290:	orrs	r2, r1, r2
   15294:	movne	r3, #1
   15298:	cmp	r3, #0
   1529c:	bne	15474 <__assert_fail@plt+0x4348>
   152a0:	ldrd	r2, [sp, #64]	; 0x40
   152a4:	ldrd	r8, [sp, #208]	; 0xd0
   152a8:	strd	r2, [sp, #168]	; 0xa8
   152ac:	ldr	r3, [sp, #56]	; 0x38
   152b0:	strd	r8, [sp, #224]	; 0xe0
   152b4:	subs	r3, r3, #1
   152b8:	str	r3, [sp, #56]	; 0x38
   152bc:	bne	1506c <__assert_fail@plt+0x3f40>
   152c0:	ldr	r3, [sp, #200]	; 0xc8
   152c4:	strd	r8, [sp, #216]	; 0xd8
   152c8:	cmp	r3, #0
   152cc:	lsl	r3, r3, #1
   152d0:	str	r3, [sp, #176]	; 0xb0
   152d4:	ldrd	r2, [sp, #64]	; 0x40
   152d8:	beq	157b4 <__assert_fail@plt+0x4688>
   152dc:	mov	r6, r2
   152e0:	mov	r7, r3
   152e4:	strd	r4, [sp, #48]	; 0x30
   152e8:	ldr	r1, [sp, #72]	; 0x48
   152ec:	mov	r4, r8
   152f0:	mov	r5, r9
   152f4:	mov	r2, r8
   152f8:	mov	r3, r9
   152fc:	strd	r6, [sp]
   15300:	strd	r4, [sp, #8]
   15304:	add	r0, sp, #240	; 0xf0
   15308:	ldrd	r4, [sp, #48]	; 0x30
   1530c:	strd	r6, [sp, #16]
   15310:	str	r1, [sp, #40]	; 0x28
   15314:	ldr	r1, [sp, #80]	; 0x50
   15318:	strd	r4, [sp, #24]
   1531c:	strd	sl, [sp, #32]
   15320:	str	r1, [sp, #44]	; 0x2c
   15324:	bl	11608 <__assert_fail@plt+0x4dc>
   15328:	ldrd	r6, [sp, #96]	; 0x60
   1532c:	ldrd	r8, [sp, #240]	; 0xf0
   15330:	adds	r2, r0, r6
   15334:	adcs	r3, r1, r7
   15338:	mov	r0, r2
   1533c:	mov	r1, r3
   15340:	movcs	r3, #1
   15344:	movcc	r3, #0
   15348:	mov	r6, r2
   1534c:	adds	r4, r8, r3
   15350:	ldrd	r2, [sp, #48]	; 0x30
   15354:	mov	r7, r1
   15358:	adc	r5, r9, #0
   1535c:	mov	r8, r4
   15360:	mov	r9, r5
   15364:	cmp	r5, r3
   15368:	cmpeq	r4, r2
   1536c:	bhi	15394 <__assert_fail@plt+0x4268>
   15370:	moveq	r3, #1
   15374:	movne	r3, #0
   15378:	cmp	r1, fp
   1537c:	cmpeq	r0, sl
   15380:	movcc	r3, #0
   15384:	andcs	r3, r3, #1
   15388:	cmp	r3, #0
   1538c:	strdeq	r8, [sp, #208]	; 0xd0
   15390:	beq	153d8 <__assert_fail@plt+0x42ac>
   15394:	cmp	r1, fp
   15398:	mov	r3, #0
   1539c:	cmpeq	r0, sl
   153a0:	movcs	r2, r3
   153a4:	movcc	r2, #1
   153a8:	subs	r6, r0, sl
   153ac:	sbc	r7, r1, fp
   153b0:	ldr	r1, [sp, #48]	; 0x30
   153b4:	subs	r2, r8, r2
   153b8:	sbc	r3, r9, r3
   153bc:	subs	r2, r2, r1
   153c0:	mov	r8, r2
   153c4:	ldr	r2, [sp, #52]	; 0x34
   153c8:	sbc	r3, r3, r2
   153cc:	mov	r2, r8
   153d0:	mov	r9, r3
   153d4:	strd	r2, [sp, #208]	; 0xd0
   153d8:	ldr	r3, [sp, #56]	; 0x38
   153dc:	ldr	r2, [sp, #200]	; 0xc8
   153e0:	add	r3, r3, #1
   153e4:	cmp	r2, r3
   153e8:	str	r3, [sp, #56]	; 0x38
   153ec:	bne	152e8 <__assert_fail@plt+0x41bc>
   153f0:	ldrd	r4, [sp, #48]	; 0x30
   153f4:	strd	r6, [sp, #168]	; 0xa8
   153f8:	ldr	r3, [sp, #200]	; 0xc8
   153fc:	str	r3, [sp, #56]	; 0x38
   15400:	ldrd	r2, [sp, #64]	; 0x40
   15404:	strd	r8, [sp, #224]	; 0xe0
   15408:	strd	r2, [sp, #128]	; 0x80
   1540c:	ldr	r3, [sp, #176]	; 0xb0
   15410:	str	r3, [sp, #200]	; 0xc8
   15414:	ldrd	r2, [sp, #168]	; 0xa8
   15418:	strd	r2, [sp, #64]	; 0x40
   1541c:	b	1506c <__assert_fail@plt+0x3f40>
   15420:	ldrd	r0, [sp, #72]	; 0x48
   15424:	mov	r2, #0
   15428:	cmp	fp, r1
   1542c:	cmpeq	sl, r0
   15430:	movls	r3, r2
   15434:	movhi	r3, #1
   15438:	subs	ip, r0, sl
   1543c:	sbc	r1, r1, fp
   15440:	subs	r3, r8, r3
   15444:	sbc	r2, r9, r2
   15448:	subs	r8, r3, r4
   1544c:	str	ip, [sp, #64]	; 0x40
   15450:	sbc	r9, r2, r5
   15454:	str	r1, [sp, #68]	; 0x44
   15458:	b	14f3c <__assert_fail@plt+0x3e10>
   1545c:	mov	r1, r4
   15460:	mov	r2, r5
   15464:	strd	r4, [sp, #232]	; 0xe8
   15468:	mov	r8, sl
   1546c:	mov	r9, fp
   15470:	b	15280 <__assert_fail@plt+0x4154>
   15474:	ldrd	r6, [sp, #168]	; 0xa8
   15478:	b	154b4 <__assert_fail@plt+0x4388>
   1547c:	ldrd	r8, [sp, #136]	; 0x88
   15480:	add	r0, sp, #232	; 0xe8
   15484:	strd	r8, [sp]
   15488:	strd	r4, [sp, #8]
   1548c:	strd	sl, [sp, #16]
   15490:	bl	126e0 <__assert_fail@plt+0x15b4>
   15494:	ldrd	r2, [sp, #232]	; 0xe8
   15498:	mov	r9, r1
   1549c:	mov	r8, r0
   154a0:	orrs	r1, r2, r3
   154a4:	bne	15628 <__assert_fail@plt+0x44fc>
   154a8:	cmp	r9, #0
   154ac:	cmpeq	r8, #1
   154b0:	bne	157bc <__assert_fail@plt+0x4690>
   154b4:	ldr	r1, [sp, #72]	; 0x48
   154b8:	add	r0, sp, #240	; 0xf0
   154bc:	strd	r6, [sp]
   154c0:	ldrd	r8, [sp, #224]	; 0xe0
   154c4:	str	r1, [sp, #40]	; 0x28
   154c8:	mov	r2, r8
   154cc:	mov	r3, r9
   154d0:	ldr	r1, [sp, #80]	; 0x50
   154d4:	strd	r8, [sp, #8]
   154d8:	strd	r6, [sp, #16]
   154dc:	strd	r4, [sp, #24]
   154e0:	strd	sl, [sp, #32]
   154e4:	str	r1, [sp, #44]	; 0x2c
   154e8:	bl	11608 <__assert_fail@plt+0x4dc>
   154ec:	ldrd	r8, [sp, #96]	; 0x60
   154f0:	ldrd	r2, [sp, #240]	; 0xf0
   154f4:	adds	r6, r0, r8
   154f8:	adcs	r7, r1, r9
   154fc:	mov	r0, r6
   15500:	movcs	ip, #1
   15504:	movcc	ip, #0
   15508:	adds	r8, r2, ip
   1550c:	mov	r1, r7
   15510:	adc	r9, r3, #0
   15514:	cmp	r5, r9
   15518:	cmpeq	r4, r8
   1551c:	bcc	15540 <__assert_fail@plt+0x4414>
   15520:	moveq	ip, #1
   15524:	movne	ip, #0
   15528:	cmp	r7, fp
   1552c:	cmpeq	r6, sl
   15530:	movcc	ip, #0
   15534:	andcs	ip, ip, #1
   15538:	cmp	ip, #0
   1553c:	beq	1556c <__assert_fail@plt+0x4440>
   15540:	cmp	r1, fp
   15544:	mov	ip, #0
   15548:	cmpeq	r0, sl
   1554c:	movcs	lr, ip
   15550:	movcc	lr, #1
   15554:	subs	r6, r0, sl
   15558:	sbc	r7, r1, fp
   1555c:	subs	lr, r8, lr
   15560:	sbc	ip, r9, ip
   15564:	subs	r8, lr, r4
   15568:	sbc	r9, ip, r5
   1556c:	ldrd	r2, [sp, #128]	; 0x80
   15570:	strd	r8, [sp, #224]	; 0xe0
   15574:	ldr	r1, [sp, #216]	; 0xd8
   15578:	subs	r0, r2, r6
   1557c:	str	r0, [sp, #136]	; 0x88
   15580:	sbc	r0, r3, r7
   15584:	subs	r1, r1, r8
   15588:	str	r0, [sp, #140]	; 0x8c
   1558c:	ldr	r0, [sp, #220]	; 0xdc
   15590:	str	r1, [sp, #152]	; 0x98
   15594:	sbc	r1, r0, r9
   15598:	cmp	r3, r7
   1559c:	cmpeq	r2, r6
   155a0:	str	r1, [sp, #156]	; 0x9c
   155a4:	movcc	r1, #1
   155a8:	movcs	r1, #0
   155ac:	ldrd	r2, [sp, #152]	; 0x98
   155b0:	subs	r2, r2, r1
   155b4:	sbc	r3, r3, #0
   155b8:	cmp	r2, #0
   155bc:	sbcs	r1, r3, #0
   155c0:	bge	155ec <__assert_fail@plt+0x44c0>
   155c4:	ldrd	r8, [sp, #136]	; 0x88
   155c8:	adds	r0, r8, sl
   155cc:	adcs	r1, r9, fp
   155d0:	movcs	ip, #1
   155d4:	movcc	ip, #0
   155d8:	strd	r0, [sp, #136]	; 0x88
   155dc:	adds	r0, r2, ip
   155e0:	adc	r1, r3, #0
   155e4:	adds	r2, r4, r0
   155e8:	adc	r3, r5, r1
   155ec:	ldrd	r0, [sp, #136]	; 0x88
   155f0:	orr	ip, r2, r0
   155f4:	orr	r1, r3, r1
   155f8:	str	ip, [sp, #160]	; 0xa0
   155fc:	str	r1, [sp, #164]	; 0xa4
   15600:	ldrd	r0, [sp, #160]	; 0xa0
   15604:	orrs	r1, r0, r1
   15608:	bne	1547c <__assert_fail@plt+0x4350>
   1560c:	mov	r2, r4
   15610:	mov	r3, r5
   15614:	strd	r4, [sp, #232]	; 0xe8
   15618:	orrs	r1, r2, r3
   1561c:	mov	r8, sl
   15620:	mov	r9, fp
   15624:	beq	154a8 <__assert_fail@plt+0x437c>
   15628:	cmp	fp, r9
   1562c:	mov	r1, r3
   15630:	cmpeq	sl, r8
   15634:	mov	r0, r2
   15638:	movne	r3, #0
   1563c:	moveq	r3, #1
   15640:	cmp	r5, r1
   15644:	strd	r0, [sp, #72]	; 0x48
   15648:	cmpeq	r4, r2
   1564c:	movne	r3, #0
   15650:	cmp	r3, #0
   15654:	bne	15aa0 <__assert_fail@plt+0x4974>
   15658:	ubfx	r3, r8, #1, #7
   1565c:	mov	lr, #0
   15660:	ldrd	r0, [sp, #72]	; 0x48
   15664:	ldr	r2, [sp, #204]	; 0xcc
   15668:	add	r3, r2, r3
   1566c:	mov	r2, r8
   15670:	ldrb	ip, [r3, #716]	; 0x2cc
   15674:	mov	r3, r9
   15678:	umull	r4, r5, ip, ip
   1567c:	adds	ip, ip, ip
   15680:	adc	lr, lr, lr
   15684:	str	lr, [sp, #48]	; 0x30
   15688:	mul	lr, r4, r9
   1568c:	umull	r6, r7, r4, r8
   15690:	mla	lr, r8, r5, lr
   15694:	add	r7, lr, r7
   15698:	subs	lr, ip, r6
   1569c:	ldr	ip, [sp, #48]	; 0x30
   156a0:	sbc	r4, ip, r7
   156a4:	umull	r6, r7, lr, lr
   156a8:	mul	ip, lr, r4
   156ac:	adds	lr, lr, lr
   156b0:	adc	r4, r4, r4
   156b4:	add	r7, r7, ip, lsl #1
   156b8:	str	r4, [sp, #48]	; 0x30
   156bc:	mul	ip, r6, r9
   156c0:	umull	r4, r5, r6, r8
   156c4:	mla	ip, r8, r7, ip
   156c8:	subs	lr, lr, r4
   156cc:	add	r5, ip, r5
   156d0:	ldr	ip, [sp, #48]	; 0x30
   156d4:	umull	r6, r7, lr, lr
   156d8:	sbc	r4, ip, r5
   156dc:	mul	ip, lr, r4
   156e0:	adds	lr, lr, lr
   156e4:	adc	r4, r4, r4
   156e8:	add	r7, r7, ip, lsl #1
   156ec:	str	r4, [sp, #48]	; 0x30
   156f0:	mul	ip, r6, r9
   156f4:	umull	r4, r5, r6, r8
   156f8:	mla	ip, r8, r7, ip
   156fc:	subs	lr, lr, r4
   15700:	add	r5, ip, r5
   15704:	ldr	ip, [sp, #48]	; 0x30
   15708:	sbc	ip, ip, r5
   1570c:	mul	ip, sl, ip
   15710:	mla	ip, lr, fp, ip
   15714:	umull	sl, fp, sl, lr
   15718:	add	fp, ip, fp
   1571c:	bl	16fa8 <__assert_fail@plt+0x5e7c>
   15720:	cmp	r0, #0
   15724:	bne	15a50 <__assert_fail@plt+0x4924>
   15728:	ldr	r3, [sp, #288]	; 0x120
   1572c:	mov	r2, r8
   15730:	ldr	r1, [sp, #292]	; 0x124
   15734:	add	ip, r3, #1
   15738:	mov	r3, r9
   1573c:	str	ip, [sp]
   15740:	str	r1, [sp, #4]
   15744:	ldrd	r0, [sp, #232]	; 0xe8
   15748:	bl	14db4 <__assert_fail@plt+0x3c88>
   1574c:	cmp	fp, #0
   15750:	cmpeq	sl, #1
   15754:	bls	15a6c <__assert_fail@plt+0x4940>
   15758:	add	r3, pc, #880	; 0x370
   1575c:	ldrd	r2, [r3]
   15760:	cmp	fp, r3
   15764:	cmpeq	sl, r2
   15768:	bls	15780 <__assert_fail@plt+0x4654>
   1576c:	mov	r0, sl
   15770:	mov	r1, fp
   15774:	bl	13ba4 <__assert_fail@plt+0x2a78>
   15778:	cmp	r0, #0
   1577c:	beq	15a6c <__assert_fail@plt+0x4940>
   15780:	mov	r1, #1
   15784:	mov	r2, sl
   15788:	ldr	r0, [sp, #292]	; 0x124
   1578c:	mov	r3, fp
   15790:	str	r1, [sp]
   15794:	bl	11450 <__assert_fail@plt+0x324>
   15798:	add	sp, sp, #252	; 0xfc
   1579c:	ldrd	r4, [sp]
   157a0:	ldrd	r6, [sp, #8]
   157a4:	ldrd	r8, [sp, #16]
   157a8:	ldrd	sl, [sp, #24]
   157ac:	add	sp, sp, #32
   157b0:	pop	{pc}		; (ldr pc, [sp], #4)
   157b4:	strd	r2, [sp, #168]	; 0xa8
   157b8:	b	153f8 <__assert_fail@plt+0x42cc>
   157bc:	strd	r2, [sp, #72]	; 0x48
   157c0:	ubfx	r3, r8, #1, #7
   157c4:	mov	lr, #0
   157c8:	ldr	r2, [sp, #204]	; 0xcc
   157cc:	strd	r6, [sp, #168]	; 0xa8
   157d0:	add	r3, r2, r3
   157d4:	ldrb	ip, [r3, #716]	; 0x2cc
   157d8:	umull	r2, r3, ip, ip
   157dc:	adds	ip, ip, ip
   157e0:	adc	lr, lr, lr
   157e4:	mul	r1, r2, r9
   157e8:	mov	r6, r1
   157ec:	umull	r0, r1, r2, r8
   157f0:	mla	r3, r8, r3, r6
   157f4:	add	r1, r3, r1
   157f8:	subs	r3, ip, r0
   157fc:	sbc	lr, lr, r1
   15800:	adds	ip, r3, r3
   15804:	umull	r0, r1, r3, r3
   15808:	adc	r2, lr, lr
   1580c:	mul	r3, r3, lr
   15810:	umull	r6, r7, r0, r8
   15814:	add	r1, r1, r3, lsl #1
   15818:	mul	r3, r0, r9
   1581c:	mla	r3, r8, r1, r3
   15820:	add	r3, r3, r7
   15824:	mov	r7, r3
   15828:	subs	r3, ip, r6
   1582c:	sbc	r2, r2, r7
   15830:	adds	lr, r3, r3
   15834:	umull	r0, r1, r3, r3
   15838:	adc	ip, r2, r2
   1583c:	mul	r3, r3, r2
   15840:	add	r1, r1, r3, lsl #1
   15844:	mul	r3, r0, r9
   15848:	mov	r6, r3
   1584c:	umull	r2, r3, r0, r8
   15850:	mla	r1, r8, r1, r6
   15854:	add	r3, r1, r3
   15858:	subs	r1, lr, r2
   1585c:	sbc	lr, ip, r3
   15860:	cmp	r5, r9
   15864:	cmpeq	r4, r8
   15868:	str	r1, [sp, #80]	; 0x50
   1586c:	mul	r3, sl, lr
   15870:	mla	r3, r1, fp, r3
   15874:	umull	sl, fp, sl, r1
   15878:	add	r3, r3, fp
   1587c:	mov	fp, r3
   15880:	bcc	15a0c <__assert_fail@plt+0x48e0>
   15884:	umull	r0, r1, r3, r8
   15888:	mov	ip, #0
   1588c:	umull	r2, r3, r3, r9
   15890:	mov	r6, r0
   15894:	mov	r7, r1
   15898:	umull	r0, r1, sl, r8
   1589c:	strd	r2, [sp, #72]	; 0x48
   158a0:	strd	r6, [sp, #176]	; 0xb0
   158a4:	umlal	r6, r7, sl, r9
   158a8:	adds	r1, r1, r6
   158ac:	mov	r3, r7
   158b0:	ldrd	r6, [sp, #176]	; 0xb0
   158b4:	adc	r3, ip, r3
   158b8:	str	r1, [sp, #192]	; 0xc0
   158bc:	str	r3, [sp, #196]	; 0xc4
   158c0:	ldrd	r0, [sp, #192]	; 0xc0
   158c4:	cmp	r7, r1
   158c8:	cmpeq	r6, r0
   158cc:	bls	158e8 <__assert_fail@plt+0x47bc>
   158d0:	ldr	r3, [sp, #72]	; 0x48
   158d4:	adds	r3, r3, ip
   158d8:	str	r3, [sp, #72]	; 0x48
   158dc:	ldr	r3, [sp, #76]	; 0x4c
   158e0:	adc	r3, r3, #1
   158e4:	str	r3, [sp, #76]	; 0x4c
   158e8:	mov	r1, #0
   158ec:	ldr	r2, [sp, #80]	; 0x50
   158f0:	ldr	r3, [sp, #196]	; 0xc4
   158f4:	subs	r3, r4, r3
   158f8:	sbc	r1, r5, r1
   158fc:	ldrd	r4, [sp, #72]	; 0x48
   15900:	subs	r3, r3, r4
   15904:	sbc	r1, r1, r5
   15908:	mul	ip, r3, lr
   1590c:	umull	r4, r5, r3, r2
   15910:	mla	r2, r2, r1, ip
   15914:	add	r5, r2, r5
   15918:	cmp	r9, #0
   1591c:	cmpeq	r8, #1
   15920:	bls	159f0 <__assert_fail@plt+0x48c4>
   15924:	add	r3, pc, #420	; 0x1a4
   15928:	ldrd	r2, [r3]
   1592c:	cmp	r9, r3
   15930:	cmpeq	r8, r2
   15934:	bls	1594c <__assert_fail@plt+0x4820>
   15938:	mov	r0, r8
   1593c:	mov	r1, r9
   15940:	bl	13ba4 <__assert_fail@plt+0x2a78>
   15944:	cmp	r0, #0
   15948:	beq	159f0 <__assert_fail@plt+0x48c4>
   1594c:	mov	r1, #1
   15950:	mov	r2, r8
   15954:	ldr	r0, [sp, #292]	; 0x124
   15958:	mov	r3, r9
   1595c:	str	r1, [sp]
   15960:	bl	11450 <__assert_fail@plt+0x324>
   15964:	orrs	r3, r4, r5
   15968:	beq	1574c <__assert_fail@plt+0x4620>
   1596c:	mov	r2, sl
   15970:	mov	r3, fp
   15974:	mov	r0, r4
   15978:	mov	r1, r5
   1597c:	bl	16fa8 <__assert_fail@plt+0x5e7c>
   15980:	cmp	r0, #0
   15984:	bne	15a38 <__assert_fail@plt+0x490c>
   15988:	ldrd	r2, [sp, #64]	; 0x40
   1598c:	add	r0, sp, #208	; 0xd0
   15990:	strd	r2, [sp]
   15994:	strd	r4, [sp, #8]
   15998:	strd	sl, [sp, #16]
   1599c:	ldrd	r2, [sp, #208]	; 0xd0
   159a0:	bl	129a0 <__assert_fail@plt+0x1874>
   159a4:	ldrd	r2, [sp, #128]	; 0x80
   159a8:	strd	r2, [sp]
   159ac:	strd	r4, [sp, #8]
   159b0:	strd	sl, [sp, #16]
   159b4:	strd	r0, [sp, #64]	; 0x40
   159b8:	add	r0, sp, #216	; 0xd8
   159bc:	ldrd	r2, [sp, #216]	; 0xd8
   159c0:	bl	129a0 <__assert_fail@plt+0x1874>
   159c4:	ldrd	r2, [sp, #168]	; 0xa8
   159c8:	strd	r2, [sp]
   159cc:	strd	r4, [sp, #8]
   159d0:	strd	sl, [sp, #16]
   159d4:	strd	r0, [sp, #128]	; 0x80
   159d8:	add	r0, sp, #224	; 0xe0
   159dc:	ldrd	r2, [sp, #224]	; 0xe0
   159e0:	bl	129a0 <__assert_fail@plt+0x1874>
   159e4:	strd	r0, [sp, #168]	; 0xa8
   159e8:	ldrd	r8, [sp, #208]	; 0xd0
   159ec:	b	14fa4 <__assert_fail@plt+0x3e78>
   159f0:	ldr	r2, [sp, #288]	; 0x120
   159f4:	mov	r0, r8
   159f8:	mov	r1, r9
   159fc:	ldr	r3, [sp, #292]	; 0x124
   15a00:	add	r2, r2, #1
   15a04:	bl	14170 <__assert_fail@plt+0x3044>
   15a08:	b	15964 <__assert_fail@plt+0x4838>
   15a0c:	ldrd	r4, [sp, #72]	; 0x48
   15a10:	b	15918 <__assert_fail@plt+0x47ec>
   15a14:	mov	r0, #1
   15a18:	mov	r1, #0
   15a1c:	mov	r2, #127	; 0x7f
   15a20:	mov	r3, #0
   15a24:	strd	r0, [sp, #112]	; 0x70
   15a28:	mov	r0, #0
   15a2c:	mov	r1, #0
   15a30:	strd	r0, [sp, #120]	; 0x78
   15a34:	b	14e04 <__assert_fail@plt+0x3cd8>
   15a38:	mov	r2, r4
   15a3c:	mov	r3, r5
   15a40:	strd	sl, [sp]
   15a44:	ldr	r0, [sp, #292]	; 0x124
   15a48:	bl	12648 <__assert_fail@plt+0x151c>
   15a4c:	b	15798 <__assert_fail@plt+0x466c>
   15a50:	strd	r8, [sp]
   15a54:	ldrd	r2, [sp, #232]	; 0xe8
   15a58:	ldr	r0, [sp, #292]	; 0x124
   15a5c:	bl	12648 <__assert_fail@plt+0x151c>
   15a60:	cmp	fp, #0
   15a64:	cmpeq	sl, #1
   15a68:	bhi	15758 <__assert_fail@plt+0x462c>
   15a6c:	mov	r0, sl
   15a70:	mov	r1, fp
   15a74:	ldr	r2, [sp, #288]	; 0x120
   15a78:	ldr	r3, [sp, #292]	; 0x124
   15a7c:	bl	14170 <__assert_fail@plt+0x3044>
   15a80:	b	15798 <__assert_fail@plt+0x466c>
   15a84:	movw	r1, #41712	; 0xa2f0
   15a88:	movt	r1, #2
   15a8c:	ldr	r3, [pc, #68]	; 15ad8 <__assert_fail@plt+0x49ac>
   15a90:	movw	r0, #42060	; 0xa44c
   15a94:	movt	r0, #2
   15a98:	mov	r2, #476	; 0x1dc
   15a9c:	bl	1112c <__assert_fail@plt>
   15aa0:	ldr	r3, [sp, #288]	; 0x120
   15aa4:	mov	r2, sl
   15aa8:	mov	r0, r4
   15aac:	ldr	r1, [sp, #292]	; 0x124
   15ab0:	add	ip, r3, #1
   15ab4:	mov	r3, fp
   15ab8:	str	ip, [sp]
   15abc:	str	r1, [sp, #4]
   15ac0:	mov	r1, r5
   15ac4:	bl	14db4 <__assert_fail@plt+0x3c88>
   15ac8:	b	15798 <__assert_fail@plt+0x466c>
   15acc:	nop	{0}
   15ad0:	cmneq	sp, r8, ror sp
   15ad4:	andeq	r0, r0, r0
   15ad8:	muleq	r2, r8, r5
   15adc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ae0:	strd	r6, [sp, #8]
   15ae4:	strd	r8, [sp, #16]
   15ae8:	mov	r8, r0
   15aec:	mov	r9, r1
   15af0:	strd	sl, [sp, #24]
   15af4:	mov	fp, r3
   15af8:	mov	r3, r0
   15afc:	str	lr, [sp, #32]
   15b00:	sub	sp, sp, #84	; 0x54
   15b04:	orrs	r3, r3, r1
   15b08:	mov	r0, #0
   15b0c:	ldr	ip, [sp, #120]	; 0x78
   15b10:	moveq	r3, #1
   15b14:	movne	r3, r0
   15b18:	cmp	fp, #0
   15b1c:	strd	r8, [sp, #16]
   15b20:	cmpeq	r2, #1
   15b24:	mov	sl, r2
   15b28:	andls	r1, r3, #1
   15b2c:	movhi	r1, #0
   15b30:	mov	r2, #0
   15b34:	mov	r3, #0
   15b38:	cmp	r1, r0
   15b3c:	str	ip, [sp, #24]
   15b40:	strd	r2, [ip, #8]
   15b44:	strb	r0, [ip, #250]	; 0xfa
   15b48:	beq	15b68 <__assert_fail@plt+0x4a3c>
   15b4c:	add	sp, sp, #84	; 0x54
   15b50:	ldrd	r4, [sp]
   15b54:	ldrd	r6, [sp, #8]
   15b58:	ldrd	r8, [sp, #16]
   15b5c:	ldrd	sl, [sp, #24]
   15b60:	add	sp, sp, #32
   15b64:	pop	{pc}		; (ldr pc, [sp], #4)
   15b68:	and	r2, sl, #1
   15b6c:	mov	r3, r1
   15b70:	orrs	r3, r2, r3
   15b74:	bne	15cf8 <__assert_fail@plt+0x4bcc>
   15b78:	orrs	r3, sl, fp
   15b7c:	bne	15c60 <__assert_fail@plt+0x4b34>
   15b80:	and	r2, r8, #1
   15b84:	mov	r3, r1
   15b88:	orrs	r3, r2, r3
   15b8c:	bne	164c8 <__assert_fail@plt+0x539c>
   15b90:	mov	r3, r1
   15b94:	mov	r2, r8
   15b98:	mov	ip, r1
   15b9c:	mov	r0, r9
   15ba0:	b	15ba8 <__assert_fail@plt+0x4a7c>
   15ba4:	mov	r3, r1
   15ba8:	lsr	r2, r2, #1
   15bac:	mov	r7, ip
   15bb0:	add	r1, r3, #1
   15bb4:	orr	r2, r2, r0, lsl #31
   15bb8:	lsr	r0, r0, #1
   15bbc:	and	r6, r2, #1
   15bc0:	orrs	lr, r6, r7
   15bc4:	beq	15ba4 <__assert_fail@plt+0x4a78>
   15bc8:	ldrd	r4, [sp, #16]
   15bcc:	rsb	lr, r1, #32
   15bd0:	sub	ip, r3, #31
   15bd4:	lsr	r0, r4, r1
   15bd8:	lsr	r2, r5, r1
   15bdc:	add	r1, r3, #65	; 0x41
   15be0:	orr	r0, r0, r5, lsl lr
   15be4:	orr	r0, r0, r5, lsr ip
   15be8:	str	r0, [sp, #16]
   15bec:	str	r2, [sp, #20]
   15bf0:	mov	r2, #2
   15bf4:	mov	r3, #0
   15bf8:	str	r1, [sp]
   15bfc:	ldr	r0, [sp, #24]
   15c00:	movw	r6, #43691	; 0xaaab
   15c04:	movt	r6, #43690	; 0xaaaa
   15c08:	bl	11450 <__assert_fail@plt+0x324>
   15c0c:	movw	r2, #30912	; 0x78c0
   15c10:	movt	r2, #2
   15c14:	add	r9, pc, #708	; 0x2c4
   15c18:	ldrd	r8, [r9]
   15c1c:	mov	r3, #0
   15c20:	movw	r7, #43690	; 0xaaaa
   15c24:	movt	r7, #43690	; 0xaaaa
   15c28:	str	r2, [sp, #76]	; 0x4c
   15c2c:	mov	r0, #0
   15c30:	ldr	r2, [pc, #696]	; 15ef0 <__assert_fail@plt+0x4dc4>
   15c34:	mov	r1, #0
   15c38:	mov	r4, r3
   15c3c:	ldrd	sl, [sp, #16]
   15c40:	strd	r0, [sp, #16]
   15c44:	str	r2, [sp, #56]	; 0x38
   15c48:	mov	r2, #26
   15c4c:	mov	r0, #3
   15c50:	mov	r1, #0
   15c54:	strd	r0, [sp, #8]
   15c58:	str	r2, [sp, #28]
   15c5c:	b	15ebc <__assert_fail@plt+0x4d90>
   15c60:	mov	r3, r1
   15c64:	mov	r0, r1
   15c68:	mov	r2, sl
   15c6c:	mov	r1, fp
   15c70:	lsr	r2, r2, #1
   15c74:	mov	r5, r0
   15c78:	add	r3, r3, #1
   15c7c:	orr	r2, r2, r1, lsl #31
   15c80:	lsr	r1, r1, #1
   15c84:	and	r4, r2, #1
   15c88:	orrs	ip, r4, r5
   15c8c:	beq	15c70 <__assert_fail@plt+0x4b44>
   15c90:	ldrd	r6, [sp, #16]
   15c94:	rsb	r5, r3, #64	; 0x40
   15c98:	lsr	r2, sl, r3
   15c9c:	rsb	r0, r3, #32
   15ca0:	sub	r4, r5, #32
   15ca4:	str	r3, [sp]
   15ca8:	orr	r2, r2, fp, lsl r0
   15cac:	sub	r1, r3, #32
   15cb0:	orr	r2, r2, fp, lsr r1
   15cb4:	lsr	lr, r6, r3
   15cb8:	lsl	ip, r7, r5
   15cbc:	orr	lr, lr, r7, lsl r0
   15cc0:	rsb	r0, r5, #32
   15cc4:	orr	ip, ip, r6, lsl r4
   15cc8:	orr	lr, lr, r7, lsr r1
   15ccc:	lsr	r1, r7, r3
   15cd0:	orr	ip, ip, r6, lsr r0
   15cd4:	ldr	r0, [sp, #24]
   15cd8:	lsr	r4, fp, r3
   15cdc:	mov	r3, #0
   15ce0:	str	lr, [sp, #16]
   15ce4:	orr	sl, r2, r6, lsl r5
   15ce8:	mov	r2, #2
   15cec:	str	r1, [sp, #20]
   15cf0:	orr	fp, ip, r4
   15cf4:	bl	11450 <__assert_fail@plt+0x324>
   15cf8:	ldrd	r2, [sp, #16]
   15cfc:	orrs	r3, r2, r3
   15d00:	beq	164d0 <__assert_fail@plt+0x53a4>
   15d04:	ldr	r3, [pc, #476]	; 15ee8 <__assert_fail@plt+0x4dbc>
   15d08:	mov	r2, #3
   15d0c:	movw	r6, #43691	; 0xaaab
   15d10:	movt	r6, #43690	; 0xaaaa
   15d14:	mov	r8, r6
   15d18:	str	r3, [sp, #68]	; 0x44
   15d1c:	movw	r3, #30912	; 0x78c0
   15d20:	movt	r3, #2
   15d24:	mov	r9, r3
   15d28:	str	r3, [sp, #76]	; 0x4c
   15d2c:	movw	r3, #43690	; 0xaaaa
   15d30:	movt	r3, #43690	; 0xaaaa
   15d34:	str	r3, [sp, #28]
   15d38:	mov	r3, #2
   15d3c:	str	r3, [sp, #64]	; 0x40
   15d40:	mov	r3, #0
   15d44:	strd	r2, [sp, #8]
   15d48:	movw	r3, #29224	; 0x7228
   15d4c:	movt	r3, #2
   15d50:	add	r3, r3, #40	; 0x28
   15d54:	str	r3, [sp, #56]	; 0x38
   15d58:	b	15d78 <__assert_fail@plt+0x4c4c>
   15d5c:	ldrb	r3, [ip, #1]!
   15d60:	add	r9, r9, #16
   15d64:	ldr	r8, [r9]
   15d68:	str	r3, [sp, #64]	; 0x40
   15d6c:	ldr	r3, [r9, #4]
   15d70:	str	r3, [sp, #28]
   15d74:	str	ip, [sp, #68]	; 0x44
   15d78:	ldrd	r2, [sp, #8]
   15d7c:	mov	r1, r3
   15d80:	str	r1, [sp, #60]	; 0x3c
   15d84:	str	r2, [sp, #72]	; 0x48
   15d88:	ldr	r3, [sp, #28]
   15d8c:	umull	r6, r7, sl, r8
   15d90:	mov	ip, #0
   15d94:	ldr	r1, [sp, #72]	; 0x48
   15d98:	mul	r0, sl, r3
   15d9c:	mla	r0, r8, fp, r0
   15da0:	add	lr, r0, r7
   15da4:	ldr	r0, [sp, #60]	; 0x3c
   15da8:	mov	r7, lr
   15dac:	umull	r2, r3, lr, r1
   15db0:	umull	r4, r5, r0, r6
   15db4:	strd	r4, [sp, #48]	; 0x30
   15db8:	umull	r4, r5, r6, r1
   15dbc:	ldr	r1, [sp, #48]	; 0x30
   15dc0:	adds	r0, r1, r2
   15dc4:	ldr	r1, [sp, #52]	; 0x34
   15dc8:	adc	r4, r1, r3
   15dcc:	adds	r1, r5, r0
   15dd0:	ldr	r0, [sp, #60]	; 0x3c
   15dd4:	adc	ip, ip, r4
   15dd8:	str	r1, [sp, #32]
   15ddc:	str	ip, [sp, #36]	; 0x24
   15de0:	ldrd	r4, [sp, #32]
   15de4:	umull	r0, r1, lr, r0
   15de8:	cmp	r3, r5
   15dec:	mov	ip, r5
   15df0:	cmpeq	r2, r4
   15df4:	bls	15e00 <__assert_fail@plt+0x4cd4>
   15df8:	adds	r0, r0, #0
   15dfc:	adc	r1, r1, #1
   15e00:	adds	r3, ip, r0
   15e04:	str	r3, [sp, #40]	; 0x28
   15e08:	adc	r3, r1, #0
   15e0c:	str	r3, [sp, #44]	; 0x2c
   15e10:	ldrd	r2, [sp, #16]
   15e14:	ldrd	r0, [sp, #40]	; 0x28
   15e18:	cmp	r1, r3
   15e1c:	cmpeq	r0, r2
   15e20:	bhi	15e54 <__assert_fail@plt+0x4d28>
   15e24:	subs	r4, r2, r0
   15e28:	ldr	ip, [sp, #20]
   15e2c:	ldr	r0, [sp, #28]
   15e30:	ldrd	r2, [r9, #8]
   15e34:	sbc	r1, ip, r1
   15e38:	mul	r0, r4, r0
   15e3c:	umull	r4, r5, r4, r8
   15e40:	mla	r1, r8, r1, r0
   15e44:	add	r5, r1, r5
   15e48:	cmp	r5, r3
   15e4c:	cmpeq	r4, r2
   15e50:	bls	16454 <__assert_fail@plt+0x5328>
   15e54:	ldrd	r0, [sp, #16]
   15e58:	ldr	r3, [sp, #56]	; 0x38
   15e5c:	ldr	lr, [sp, #64]	; 0x40
   15e60:	orr	r2, r0, r1
   15e64:	ldrd	r0, [sp, #8]
   15e68:	ldr	ip, [sp, #68]	; 0x44
   15e6c:	adds	r0, r0, lr
   15e70:	adc	r1, r1, #0
   15e74:	sub	r3, ip, r3
   15e78:	cmp	r2, #0
   15e7c:	cmpne	r3, #668	; 0x29c
   15e80:	strd	r0, [sp, #8]
   15e84:	bcc	15d5c <__assert_fail@plt+0x4c30>
   15e88:	cmp	r3, #668	; 0x29c
   15e8c:	bcs	160a0 <__assert_fail@plt+0x4f74>
   15e90:	ldr	r1, [sp, #76]	; 0x4c
   15e94:	lsl	r4, r3, #4
   15e98:	movw	r2, #29224	; 0x7228
   15e9c:	movt	r2, #2
   15ea0:	add	r2, r2, r3
   15ea4:	ldrb	r2, [r2, #892]	; 0x37c
   15ea8:	ldr	r6, [r1, r3, lsl #4]
   15eac:	add	r1, r1, r4
   15eb0:	ldr	r7, [r1, #4]
   15eb4:	str	r2, [sp, #28]
   15eb8:	ldrd	r8, [r1, #8]
   15ebc:	ldr	r5, [pc, #40]	; 15eec <__assert_fail@plt+0x4dc0>
   15ec0:	ldr	r2, [sp, #76]	; 0x4c
   15ec4:	add	r4, r2, r4
   15ec8:	add	r2, r5, #844	; 0x34c
   15ecc:	add	r5, r5, r3
   15ed0:	ldr	r3, [sp, #56]	; 0x38
   15ed4:	sub	r3, r2, r3
   15ed8:	str	r3, [sp, #32]
   15edc:	b	16064 <__assert_fail@plt+0x4f38>
   15ee0:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15ee4:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15ee8:	andeq	r7, r2, r1, asr r2
   15eec:	andeq	r7, r2, r8, asr r2
   15ef0:	andeq	r7, r2, r0, asr r2
   15ef4:	ldr	ip, [r4, #16]
   15ef8:	ldr	lr, [r4, #20]
   15efc:	ldrd	r2, [r4, #24]
   15f00:	umull	r0, r1, ip, sl
   15f04:	mul	lr, sl, lr
   15f08:	mla	ip, ip, fp, lr
   15f0c:	add	r1, ip, r1
   15f10:	cmp	r1, r3
   15f14:	cmpeq	r0, r2
   15f18:	bls	163ec <__assert_fail@plt+0x52c0>
   15f1c:	ldr	ip, [r4, #32]
   15f20:	ldr	lr, [r4, #36]	; 0x24
   15f24:	ldrd	r2, [r4, #40]	; 0x28
   15f28:	umull	r0, r1, ip, sl
   15f2c:	mul	lr, sl, lr
   15f30:	mla	ip, ip, fp, lr
   15f34:	add	r1, ip, r1
   15f38:	cmp	r1, r3
   15f3c:	cmpeq	r0, r2
   15f40:	bls	16374 <__assert_fail@plt+0x5248>
   15f44:	ldr	ip, [r4, #48]	; 0x30
   15f48:	ldr	lr, [r4, #52]	; 0x34
   15f4c:	ldrd	r2, [r4, #56]	; 0x38
   15f50:	umull	r0, r1, ip, sl
   15f54:	mul	lr, sl, lr
   15f58:	mla	ip, ip, fp, lr
   15f5c:	add	r1, ip, r1
   15f60:	cmp	r1, r3
   15f64:	cmpeq	r0, r2
   15f68:	bls	162ec <__assert_fail@plt+0x51c0>
   15f6c:	ldr	ip, [r4, #64]	; 0x40
   15f70:	ldr	lr, [r4, #68]	; 0x44
   15f74:	ldrd	r2, [r4, #72]	; 0x48
   15f78:	umull	r0, r1, ip, sl
   15f7c:	mul	lr, sl, lr
   15f80:	mla	ip, ip, fp, lr
   15f84:	add	r1, ip, r1
   15f88:	cmp	r1, r3
   15f8c:	cmpeq	r0, r2
   15f90:	bls	16270 <__assert_fail@plt+0x5144>
   15f94:	ldr	ip, [r4, #80]	; 0x50
   15f98:	ldr	lr, [r4, #84]	; 0x54
   15f9c:	ldrd	r2, [r4, #88]	; 0x58
   15fa0:	umull	r0, r1, ip, sl
   15fa4:	mul	lr, sl, lr
   15fa8:	mla	ip, ip, fp, lr
   15fac:	add	r1, ip, r1
   15fb0:	cmp	r3, r1
   15fb4:	cmpeq	r2, r0
   15fb8:	bcs	161f4 <__assert_fail@plt+0x50c8>
   15fbc:	ldr	ip, [r4, #96]	; 0x60
   15fc0:	ldr	lr, [r4, #100]	; 0x64
   15fc4:	ldrd	r2, [r4, #104]	; 0x68
   15fc8:	umull	r0, r1, ip, sl
   15fcc:	mul	lr, sl, lr
   15fd0:	mla	ip, ip, fp, lr
   15fd4:	add	r1, ip, r1
   15fd8:	cmp	r3, r1
   15fdc:	cmpeq	r2, r0
   15fe0:	bcs	16178 <__assert_fail@plt+0x504c>
   15fe4:	ldr	ip, [r4, #112]	; 0x70
   15fe8:	ldr	lr, [r4, #116]	; 0x74
   15fec:	ldrd	r2, [r4, #120]	; 0x78
   15ff0:	umull	r0, r1, ip, sl
   15ff4:	mul	lr, sl, lr
   15ff8:	mla	ip, ip, fp, lr
   15ffc:	add	r1, ip, r1
   16000:	cmp	r1, r3
   16004:	cmpeq	r0, r2
   16008:	bls	16100 <__assert_fail@plt+0x4fd4>
   1600c:	ldrd	r2, [sp, #8]
   16010:	ldr	r1, [sp, #28]
   16014:	adds	r2, r2, r1
   16018:	adc	r3, r3, #0
   1601c:	mul	r1, r2, r3
   16020:	strd	r2, [sp, #8]
   16024:	umull	r2, r3, r2, r2
   16028:	add	r3, r3, r1, lsl #1
   1602c:	cmp	fp, r3
   16030:	cmpeq	sl, r2
   16034:	bcc	160a0 <__assert_fail@plt+0x4f74>
   16038:	ldr	r3, [sp, #56]	; 0x38
   1603c:	sub	r3, r5, r3
   16040:	cmp	r3, #668	; 0x29c
   16044:	bcs	160a0 <__assert_fail@plt+0x4f74>
   16048:	ldr	r3, [sp, #32]
   1604c:	add	r4, r4, #128	; 0x80
   16050:	ldrd	r6, [r4]
   16054:	ldrd	r8, [r4, #8]
   16058:	ldrb	r3, [r3, r5]
   1605c:	add	r5, r5, #8
   16060:	str	r3, [sp, #28]
   16064:	mul	r3, sl, r7
   16068:	umull	r0, r1, sl, r6
   1606c:	mla	r3, r6, fp, r3
   16070:	add	r1, r3, r1
   16074:	cmp	r1, r9
   16078:	cmpeq	r0, r8
   1607c:	bhi	15ef4 <__assert_fail@plt+0x4dc8>
   16080:	mov	fp, r1
   16084:	mov	r1, #1
   16088:	ldrd	r2, [sp, #8]
   1608c:	mov	sl, r0
   16090:	str	r1, [sp]
   16094:	ldr	r0, [sp, #24]
   16098:	bl	11450 <__assert_fail@plt+0x324>
   1609c:	b	16064 <__assert_fail@plt+0x4f38>
   160a0:	ldrd	r2, [sp, #16]
   160a4:	orrs	r3, r2, r3
   160a8:	bne	1648c <__assert_fail@plt+0x5360>
   160ac:	cmp	fp, #0
   160b0:	cmpeq	sl, #1
   160b4:	bls	15b4c <__assert_fail@plt+0x4a20>
   160b8:	mov	r2, sl
   160bc:	mov	r3, fp
   160c0:	ldrd	r0, [sp, #16]
   160c4:	bl	16fa8 <__assert_fail@plt+0x5e7c>
   160c8:	cmp	r0, #0
   160cc:	bne	16478 <__assert_fail@plt+0x534c>
   160d0:	ldr	r3, [sp, #24]
   160d4:	mov	r0, sl
   160d8:	mov	r1, fp
   160dc:	mov	r2, #1
   160e0:	add	sp, sp, #84	; 0x54
   160e4:	ldrd	r4, [sp]
   160e8:	ldrd	r6, [sp, #8]
   160ec:	ldrd	r8, [sp, #16]
   160f0:	ldrd	sl, [sp, #24]
   160f4:	ldr	lr, [sp, #32]
   160f8:	add	sp, sp, #36	; 0x24
   160fc:	b	14170 <__assert_fail@plt+0x3044>
   16100:	ldrd	r8, [sp, #8]
   16104:	mov	sl, r0
   16108:	mov	fp, r1
   1610c:	sub	r6, r5, #7
   16110:	mov	ip, r6
   16114:	mov	r2, r8
   16118:	mov	r3, r9
   1611c:	ldrb	r0, [ip], #1
   16120:	mov	r1, #0
   16124:	adds	r2, r2, r0
   16128:	adc	r3, r3, r1
   1612c:	cmp	r5, ip
   16130:	bne	1611c <__assert_fail@plt+0x4ff0>
   16134:	mov	r1, #1
   16138:	ldr	r0, [sp, #24]
   1613c:	str	r1, [sp]
   16140:	bl	11450 <__assert_fail@plt+0x324>
   16144:	ldr	ip, [r4, #112]	; 0x70
   16148:	ldr	lr, [r4, #116]	; 0x74
   1614c:	ldrd	r0, [r4, #120]	; 0x78
   16150:	umull	r2, r3, ip, sl
   16154:	mul	lr, sl, lr
   16158:	mla	ip, ip, fp, lr
   1615c:	add	r3, ip, r3
   16160:	cmp	r3, r1
   16164:	cmpeq	r2, r0
   16168:	bhi	1600c <__assert_fail@plt+0x4ee0>
   1616c:	mov	sl, r2
   16170:	mov	fp, r3
   16174:	b	16110 <__assert_fail@plt+0x4fe4>
   16178:	ldrd	r8, [sp, #8]
   1617c:	mov	sl, r0
   16180:	mov	fp, r1
   16184:	sub	r6, r5, #7
   16188:	sub	r7, r5, #1
   1618c:	mov	ip, r6
   16190:	mov	r2, r8
   16194:	mov	r3, r9
   16198:	ldrb	r0, [ip], #1
   1619c:	mov	r1, #0
   161a0:	adds	r2, r2, r0
   161a4:	adc	r3, r3, r1
   161a8:	cmp	ip, r7
   161ac:	bne	16198 <__assert_fail@plt+0x506c>
   161b0:	mov	r1, #1
   161b4:	ldr	r0, [sp, #24]
   161b8:	str	r1, [sp]
   161bc:	bl	11450 <__assert_fail@plt+0x324>
   161c0:	ldr	ip, [r4, #96]	; 0x60
   161c4:	ldr	lr, [r4, #100]	; 0x64
   161c8:	ldrd	r0, [r4, #104]	; 0x68
   161cc:	umull	r2, r3, ip, sl
   161d0:	mul	lr, sl, lr
   161d4:	mla	ip, ip, fp, lr
   161d8:	add	r3, ip, r3
   161dc:	cmp	r3, r1
   161e0:	cmpeq	r2, r0
   161e4:	bhi	15fe4 <__assert_fail@plt+0x4eb8>
   161e8:	mov	sl, r2
   161ec:	mov	fp, r3
   161f0:	b	1618c <__assert_fail@plt+0x5060>
   161f4:	ldrd	r8, [sp, #8]
   161f8:	mov	sl, r0
   161fc:	mov	fp, r1
   16200:	sub	r6, r5, #7
   16204:	sub	r7, r5, #2
   16208:	mov	ip, r6
   1620c:	mov	r2, r8
   16210:	mov	r3, r9
   16214:	ldrb	r0, [ip], #1
   16218:	mov	r1, #0
   1621c:	adds	r2, r2, r0
   16220:	adc	r3, r3, r1
   16224:	cmp	ip, r7
   16228:	bne	16214 <__assert_fail@plt+0x50e8>
   1622c:	mov	r1, #1
   16230:	ldr	r0, [sp, #24]
   16234:	str	r1, [sp]
   16238:	bl	11450 <__assert_fail@plt+0x324>
   1623c:	ldr	ip, [r4, #80]	; 0x50
   16240:	ldr	lr, [r4, #84]	; 0x54
   16244:	ldrd	r0, [r4, #88]	; 0x58
   16248:	umull	r2, r3, ip, sl
   1624c:	mul	lr, sl, lr
   16250:	mla	ip, ip, fp, lr
   16254:	add	r3, ip, r3
   16258:	cmp	r3, r1
   1625c:	cmpeq	r2, r0
   16260:	bhi	15fbc <__assert_fail@plt+0x4e90>
   16264:	mov	sl, r2
   16268:	mov	fp, r3
   1626c:	b	16208 <__assert_fail@plt+0x50dc>
   16270:	ldrd	r8, [sp, #8]
   16274:	mov	sl, r0
   16278:	mov	fp, r1
   1627c:	sub	r6, r5, #7
   16280:	sub	r7, r5, #3
   16284:	mov	ip, r6
   16288:	mov	r2, r8
   1628c:	mov	r3, r9
   16290:	ldrb	r0, [ip], #1
   16294:	mov	r1, #0
   16298:	adds	r2, r2, r0
   1629c:	adc	r3, r3, r1
   162a0:	cmp	ip, r7
   162a4:	bne	16290 <__assert_fail@plt+0x5164>
   162a8:	mov	r1, #1
   162ac:	ldr	r0, [sp, #24]
   162b0:	str	r1, [sp]
   162b4:	bl	11450 <__assert_fail@plt+0x324>
   162b8:	ldr	ip, [r4, #64]	; 0x40
   162bc:	ldr	lr, [r4, #68]	; 0x44
   162c0:	ldrd	r0, [r4, #72]	; 0x48
   162c4:	umull	r2, r3, ip, sl
   162c8:	mul	lr, sl, lr
   162cc:	mla	ip, ip, fp, lr
   162d0:	add	r3, ip, r3
   162d4:	cmp	r3, r1
   162d8:	cmpeq	r2, r0
   162dc:	bhi	15f94 <__assert_fail@plt+0x4e68>
   162e0:	mov	sl, r2
   162e4:	mov	fp, r3
   162e8:	b	16284 <__assert_fail@plt+0x5158>
   162ec:	ldrb	r2, [r5, #-7]
   162f0:	mov	sl, r0
   162f4:	mov	fp, r1
   162f8:	mov	r3, #0
   162fc:	mov	r9, #0
   16300:	ldrb	r8, [r5, #-5]
   16304:	ldrd	r0, [sp, #8]
   16308:	adds	r6, r2, r8
   1630c:	ldrb	r2, [r5, #-6]
   16310:	adc	r7, r3, r9
   16314:	mov	r3, #0
   16318:	adds	r6, r6, r0
   1631c:	adc	r7, r7, r1
   16320:	adds	r6, r6, r2
   16324:	adc	r7, r7, r3
   16328:	mov	r1, #1
   1632c:	mov	r2, r6
   16330:	ldr	r0, [sp, #24]
   16334:	mov	r3, r7
   16338:	str	r1, [sp]
   1633c:	bl	11450 <__assert_fail@plt+0x324>
   16340:	ldr	ip, [r4, #48]	; 0x30
   16344:	ldr	lr, [r4, #52]	; 0x34
   16348:	ldrd	r0, [r4, #56]	; 0x38
   1634c:	umull	r2, r3, ip, sl
   16350:	mul	lr, sl, lr
   16354:	mla	ip, ip, fp, lr
   16358:	add	r3, ip, r3
   1635c:	cmp	r3, r1
   16360:	cmpeq	r2, r0
   16364:	bhi	15f6c <__assert_fail@plt+0x4e40>
   16368:	mov	sl, r2
   1636c:	mov	fp, r3
   16370:	b	16328 <__assert_fail@plt+0x51fc>
   16374:	ldrb	r2, [r5, #-7]
   16378:	mov	r3, #0
   1637c:	mov	r9, #0
   16380:	mov	sl, r0
   16384:	mov	fp, r1
   16388:	ldrb	r8, [r5, #-6]
   1638c:	adds	r6, r2, r8
   16390:	adc	r7, r3, r9
   16394:	ldrd	r2, [sp, #8]
   16398:	adds	r6, r6, r2
   1639c:	adc	r7, r7, r3
   163a0:	mov	r1, #1
   163a4:	mov	r2, r6
   163a8:	ldr	r0, [sp, #24]
   163ac:	mov	r3, r7
   163b0:	str	r1, [sp]
   163b4:	bl	11450 <__assert_fail@plt+0x324>
   163b8:	ldr	ip, [r4, #32]
   163bc:	ldr	lr, [r4, #36]	; 0x24
   163c0:	ldrd	r0, [r4, #40]	; 0x28
   163c4:	umull	r2, r3, ip, sl
   163c8:	mul	lr, sl, lr
   163cc:	mla	ip, ip, fp, lr
   163d0:	add	r3, ip, r3
   163d4:	cmp	r3, r1
   163d8:	cmpeq	r2, r0
   163dc:	bhi	15f44 <__assert_fail@plt+0x4e18>
   163e0:	mov	sl, r2
   163e4:	mov	fp, r3
   163e8:	b	163a0 <__assert_fail@plt+0x5274>
   163ec:	ldrb	r2, [r5, #-7]
   163f0:	mov	sl, r0
   163f4:	mov	fp, r1
   163f8:	mov	r3, #0
   163fc:	ldrd	r0, [sp, #8]
   16400:	adds	r7, r2, r0
   16404:	adc	r6, r3, r1
   16408:	mov	r1, #1
   1640c:	mov	r2, r7
   16410:	ldr	r0, [sp, #24]
   16414:	mov	r3, r6
   16418:	str	r1, [sp]
   1641c:	bl	11450 <__assert_fail@plt+0x324>
   16420:	ldr	ip, [r4, #16]
   16424:	ldr	lr, [r4, #20]
   16428:	ldrd	r0, [r4, #24]
   1642c:	umull	r2, r3, ip, sl
   16430:	mul	lr, sl, lr
   16434:	mla	ip, ip, fp, lr
   16438:	add	r3, ip, r3
   1643c:	cmp	r3, r1
   16440:	cmpeq	r2, r0
   16444:	bhi	15f1c <__assert_fail@plt+0x4df0>
   16448:	mov	sl, r2
   1644c:	mov	fp, r3
   16450:	b	16408 <__assert_fail@plt+0x52dc>
   16454:	mov	r1, #1
   16458:	ldrd	r2, [sp, #8]
   1645c:	mov	sl, r6
   16460:	mov	fp, r7
   16464:	str	r1, [sp]
   16468:	ldr	r0, [sp, #24]
   1646c:	strd	r4, [sp, #16]
   16470:	bl	11450 <__assert_fail@plt+0x324>
   16474:	b	15d88 <__assert_fail@plt+0x4c5c>
   16478:	strd	sl, [sp]
   1647c:	ldrd	r2, [sp, #16]
   16480:	ldr	r0, [sp, #24]
   16484:	bl	12648 <__assert_fail@plt+0x151c>
   16488:	b	15b4c <__assert_fail@plt+0x4a20>
   1648c:	mov	r2, sl
   16490:	mov	r3, fp
   16494:	ldrd	r0, [sp, #16]
   16498:	bl	16fa8 <__assert_fail@plt+0x5e7c>
   1649c:	cmp	r0, #0
   164a0:	bne	16478 <__assert_fail@plt+0x534c>
   164a4:	ldr	r1, [sp, #24]
   164a8:	mov	ip, #1
   164ac:	mov	r2, sl
   164b0:	mov	r3, fp
   164b4:	str	ip, [sp]
   164b8:	str	r1, [sp, #4]
   164bc:	ldrd	r0, [sp, #16]
   164c0:	bl	14db4 <__assert_fail@plt+0x3c88>
   164c4:	b	15b4c <__assert_fail@plt+0x4a20>
   164c8:	mov	r1, #64	; 0x40
   164cc:	b	15bf0 <__assert_fail@plt+0x4ac4>
   164d0:	ldr	r2, [pc, #-1512]	; 15ef0 <__assert_fail@plt+0x4dc4>
   164d4:	mov	r3, #0
   164d8:	movw	r6, #43691	; 0xaaab
   164dc:	movt	r6, #43690	; 0xaaaa
   164e0:	movw	r7, #43690	; 0xaaaa
   164e4:	movt	r7, #43690	; 0xaaaa
   164e8:	add	r9, pc, #24
   164ec:	ldrd	r8, [r9]
   164f0:	mov	r4, r3
   164f4:	str	r2, [sp, #56]	; 0x38
   164f8:	movw	r2, #30912	; 0x78c0
   164fc:	movt	r2, #2
   16500:	str	r2, [sp, #76]	; 0x4c
   16504:	b	15c48 <__assert_fail@plt+0x4b1c>
   16508:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1650c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   16510:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16514:	mov	r5, r1
   16518:	mov	r4, r0
   1651c:	strd	r6, [sp, #8]
   16520:	mov	r1, r3
   16524:	strd	r8, [sp, #16]
   16528:	strd	sl, [sp, #24]
   1652c:	str	lr, [sp, #32]
   16530:	sub	sp, sp, #516	; 0x204
   16534:	strd	r4, [sp, #32]
   16538:	strd	r2, [sp, #104]	; 0x68
   1653c:	orrs	r3, r2, r3
   16540:	moveq	r3, #1
   16544:	movne	r3, #0
   16548:	subs	r4, r0, r3
   1654c:	sbc	r5, r5, #0
   16550:	subs	r3, r2, #1
   16554:	strd	r4, [sp, #72]	; 0x48
   16558:	str	r3, [sp, #80]	; 0x50
   1655c:	sbc	r3, r1, #0
   16560:	mov	r1, #0
   16564:	str	r3, [sp, #84]	; 0x54
   16568:	ldrd	r4, [sp, #80]	; 0x50
   1656c:	orrs	r3, r4, r5
   16570:	beq	16638 <__assert_fail@plt+0x550c>
   16574:	and	r2, r4, #1
   16578:	mov	r3, r1
   1657c:	orrs	r3, r2, r3
   16580:	bne	16f80 <__assert_fail@plt+0x5e54>
   16584:	ldrd	r4, [sp, #80]	; 0x50
   16588:	mov	r0, r1
   1658c:	mov	r3, r4
   16590:	mov	r2, r5
   16594:	lsr	r3, r3, #1
   16598:	mov	r5, r1
   1659c:	add	r0, r0, #1
   165a0:	orr	r3, r3, r2, lsl #31
   165a4:	lsr	r2, r2, #1
   165a8:	and	r4, r3, #1
   165ac:	orrs	ip, r4, r5
   165b0:	beq	16594 <__assert_fail@plt+0x5468>
   165b4:	ldrd	r4, [sp, #72]	; 0x48
   165b8:	sub	r3, r0, #32
   165bc:	mov	lr, r0
   165c0:	rsb	ip, r0, #32
   165c4:	rsb	r1, lr, #64	; 0x40
   165c8:	ldrd	r6, [sp, #80]	; 0x50
   165cc:	str	r3, [sp, #40]	; 0x28
   165d0:	ldr	r3, [sp, #40]	; 0x28
   165d4:	str	lr, [sp, #132]	; 0x84
   165d8:	lsr	r2, r6, r0
   165dc:	lsr	r0, r4, r0
   165e0:	orr	r2, r2, r7, lsl ip
   165e4:	orr	r0, r0, r5, lsl ip
   165e8:	orr	r2, r2, r7, lsr r3
   165ec:	orr	r0, r0, r5, lsr r3
   165f0:	mov	r3, lr
   165f4:	lsr	ip, r5, r3
   165f8:	lsr	lr, r7, lr
   165fc:	ldrd	r6, [sp, #72]	; 0x48
   16600:	sub	r4, r1, #32
   16604:	lsl	r3, r7, r1
   16608:	orr	r2, r2, r6, lsl r1
   1660c:	rsb	r1, r1, #32
   16610:	orr	r3, r3, r6, lsl r4
   16614:	add	r4, sp, #160	; 0xa0
   16618:	orr	r3, r3, r6, lsr r1
   1661c:	str	r4, [sp, #136]	; 0x88
   16620:	str	r0, [r4, #8]
   16624:	orr	r3, r3, lr
   16628:	str	r2, [sp, #160]	; 0xa0
   1662c:	str	r3, [r4, #4]
   16630:	str	ip, [r4, #12]
   16634:	b	166c4 <__assert_fail@plt+0x5598>
   16638:	ldrd	r4, [sp, #72]	; 0x48
   1663c:	mov	r3, r1
   16640:	and	r2, r4, #1
   16644:	orrs	r3, r2, r3
   16648:	bne	16f68 <__assert_fail@plt+0x5e3c>
   1664c:	mov	r3, r1
   16650:	mov	r0, r5
   16654:	mov	r1, r4
   16658:	mov	ip, r3
   1665c:	b	16664 <__assert_fail@plt+0x5538>
   16660:	mov	r3, r2
   16664:	lsr	r1, r1, #1
   16668:	mov	r7, ip
   1666c:	add	r2, r3, #1
   16670:	orr	r1, r1, r0, lsl #31
   16674:	lsr	r0, r0, #1
   16678:	and	r6, r1, #1
   1667c:	orrs	lr, r6, r7
   16680:	beq	16660 <__assert_fail@plt+0x5534>
   16684:	ldrd	r4, [sp, #72]	; 0x48
   16688:	rsb	r0, r2, #32
   1668c:	sub	r1, r3, #31
   16690:	add	r3, r3, #65	; 0x41
   16694:	str	r3, [sp, #132]	; 0x84
   16698:	lsr	ip, r4, r2
   1669c:	lsr	r2, r5, r2
   166a0:	orr	ip, ip, r5, lsl r0
   166a4:	orr	ip, ip, r5, lsr r1
   166a8:	add	r3, sp, #160	; 0xa0
   166ac:	mov	r0, #0
   166b0:	mov	r1, #0
   166b4:	str	r3, [sp, #136]	; 0x88
   166b8:	str	ip, [sp, #160]	; 0xa0
   166bc:	str	r2, [sp, #164]	; 0xa4
   166c0:	strd	r0, [sp, #168]	; 0xa8
   166c4:	ldrd	r6, [sp, #104]	; 0x68
   166c8:	movw	r2, #29224	; 0x7228
   166cc:	movt	r2, #2
   166d0:	mov	lr, #0
   166d4:	str	r2, [sp, #100]	; 0x64
   166d8:	ubfx	r3, r6, #1, #7
   166dc:	add	r3, r2, r3
   166e0:	ldrb	ip, [r3, #716]	; 0x2cc
   166e4:	umull	r2, r3, ip, ip
   166e8:	adds	ip, ip, ip
   166ec:	adc	lr, lr, lr
   166f0:	mul	r4, r2, r7
   166f4:	umull	r0, r1, r2, r6
   166f8:	mla	r4, r6, r3, r4
   166fc:	subs	r3, ip, r0
   16700:	add	r1, r4, r1
   16704:	sbc	lr, lr, r1
   16708:	adds	r2, r3, r3
   1670c:	umull	r0, r1, r3, r3
   16710:	adc	ip, lr, lr
   16714:	mul	lr, r3, lr
   16718:	mul	r3, r0, r7
   1671c:	umull	r4, r5, r0, r6
   16720:	add	r1, r1, lr, lsl #1
   16724:	mla	r3, r6, r1, r3
   16728:	add	r5, r3, r5
   1672c:	subs	r3, r2, r4
   16730:	sbc	ip, ip, r5
   16734:	adds	r4, r3, r3
   16738:	umull	r0, r1, r3, r3
   1673c:	adc	lr, ip, ip
   16740:	mul	ip, r3, ip
   16744:	umull	r2, r3, r0, r6
   16748:	add	r1, r1, ip, lsl #1
   1674c:	mul	ip, r0, r7
   16750:	mla	ip, r6, r1, ip
   16754:	subs	r1, r4, r2
   16758:	str	r1, [sp, #40]	; 0x28
   1675c:	add	r3, ip, r3
   16760:	sbc	r3, lr, r3
   16764:	str	r3, [sp, #52]	; 0x34
   16768:	ldrd	r2, [sp, #32]
   1676c:	cmp	r3, #0
   16770:	cmpeq	r2, #1
   16774:	bls	16f04 <__assert_fail@plt+0x5dd8>
   16778:	mov	r4, #63	; 0x3f
   1677c:	mov	r5, #0
   16780:	mov	r0, #0
   16784:	mov	r1, #0
   16788:	mov	r2, #1
   1678c:	mov	r3, #0
   16790:	ldrd	r6, [sp, #104]	; 0x68
   16794:	strd	sl, [sp, #64]	; 0x40
   16798:	ldrd	sl, [sp, #32]
   1679c:	adds	lr, r2, r2
   167a0:	adc	ip, r3, r3
   167a4:	orr	r2, lr, r1, lsr #31
   167a8:	adds	r8, r0, r0
   167ac:	adc	r9, r1, r1
   167b0:	mov	r3, ip
   167b4:	mov	r0, r8
   167b8:	mov	r1, r9
   167bc:	cmp	fp, ip
   167c0:	cmpeq	sl, r2
   167c4:	bcc	167e8 <__assert_fail@plt+0x56bc>
   167c8:	moveq	ip, #1
   167cc:	movne	ip, #0
   167d0:	cmp	r7, r9
   167d4:	cmpeq	r6, r8
   167d8:	movhi	ip, #0
   167dc:	andls	ip, ip, #1
   167e0:	cmp	ip, #0
   167e4:	beq	16818 <__assert_fail@plt+0x56ec>
   167e8:	ldrd	sl, [sp, #32]
   167ec:	cmp	r7, r9
   167f0:	cmpeq	r6, r8
   167f4:	movhi	lr, #1
   167f8:	movls	lr, #0
   167fc:	subs	r0, r8, r6
   16800:	sbc	r1, r9, r7
   16804:	subs	ip, r2, sl
   16808:	sbc	fp, r3, fp
   1680c:	subs	r2, ip, lr
   16810:	mov	ip, #0
   16814:	sbc	r3, fp, ip
   16818:	subs	r4, r4, #1
   1681c:	mvn	fp, #0
   16820:	sbc	r5, r5, #0
   16824:	mvn	sl, #0
   16828:	cmp	r5, fp
   1682c:	cmpeq	r4, sl
   16830:	bne	16798 <__assert_fail@plt+0x566c>
   16834:	adds	ip, r0, r0
   16838:	ldrd	sl, [sp, #64]	; 0x40
   1683c:	str	ip, [sp, #16]
   16840:	adc	ip, r1, r1
   16844:	strd	r0, [sp, #192]	; 0xc0
   16848:	str	ip, [sp, #20]
   1684c:	adds	ip, r2, r2
   16850:	ldrd	r6, [sp, #16]
   16854:	str	ip, [sp, #24]
   16858:	adc	ip, r3, r3
   1685c:	strd	r2, [sp, #200]	; 0xc8
   16860:	str	ip, [sp, #28]
   16864:	ldrd	r4, [sp, #24]
   16868:	cmp	r7, r1
   1686c:	cmpeq	r6, r0
   16870:	movcc	ip, #1
   16874:	movcs	ip, #0
   16878:	adds	r4, r4, ip
   1687c:	adc	r5, r5, #0
   16880:	mov	r8, r4
   16884:	mov	r9, r5
   16888:	ldrd	r4, [sp, #32]
   1688c:	strd	r8, [sp, #184]	; 0xb8
   16890:	cmp	r5, r9
   16894:	cmpeq	r4, r8
   16898:	bcc	16ec0 <__assert_fail@plt+0x5d94>
   1689c:	ldrd	r0, [sp, #104]	; 0x68
   168a0:	moveq	r3, #1
   168a4:	movne	r3, #0
   168a8:	cmp	r1, r7
   168ac:	cmpeq	r0, r6
   168b0:	movhi	r3, #0
   168b4:	andls	r3, r3, #1
   168b8:	cmp	r3, #0
   168bc:	strdeq	r6, [sp, #176]	; 0xb0
   168c0:	bne	16ec0 <__assert_fail@plt+0x5d94>
   168c4:	add	r3, sp, #176	; 0xb0
   168c8:	add	r0, sp, #208	; 0xd0
   168cc:	ldr	r2, [sp, #40]	; 0x28
   168d0:	ldr	r1, [sp, #136]	; 0x88
   168d4:	str	r3, [sp]
   168d8:	ldrd	r4, [sp, #104]	; 0x68
   168dc:	ldr	r3, [sp, #52]	; 0x34
   168e0:	str	r1, [sp, #4]
   168e4:	ldr	r1, [sp, #132]	; 0x84
   168e8:	strd	r4, [sp, #208]	; 0xd0
   168ec:	ldrd	r4, [sp, #32]
   168f0:	str	r1, [sp, #8]
   168f4:	add	r1, sp, #192	; 0xc0
   168f8:	str	r1, [sp, #12]
   168fc:	strd	r4, [sp, #216]	; 0xd8
   16900:	bl	12110 <__assert_fail@plt+0xfe4>
   16904:	subs	r3, r0, #0
   16908:	str	r3, [sp, #156]	; 0x9c
   1690c:	beq	16b9c <__assert_fail@plt+0x5a70>
   16910:	ldr	r3, [pc, #1672]	; 16fa0 <__assert_fail@plt+0x5e74>
   16914:	add	lr, sp, #256	; 0x100
   16918:	mov	r8, #2
   1691c:	mov	r9, #0
   16920:	ldrd	r6, [sp, #80]	; 0x50
   16924:	str	lr, [sp]
   16928:	ldrd	r4, [sp, #72]	; 0x48
   1692c:	strd	r8, [sp, #24]
   16930:	str	r3, [sp, #64]	; 0x40
   16934:	lsr	ip, r6, #1
   16938:	mov	r2, r6
   1693c:	mov	r3, r7
   16940:	mov	r0, r4
   16944:	mov	r1, r5
   16948:	lsr	r8, r4, #1
   1694c:	str	ip, [sp, #140]	; 0x8c
   16950:	bl	15adc <__assert_fail@plt+0x49b0>
   16954:	lsr	r3, r7, #1
   16958:	ldr	r2, [sp, #140]	; 0x8c
   1695c:	strd	sl, [sp, #88]	; 0x58
   16960:	orr	r3, r3, r4, lsl #31
   16964:	str	r3, [sp, #144]	; 0x90
   16968:	orr	r3, r8, r5, lsl #31
   1696c:	orr	r2, r2, r7, lsl #31
   16970:	str	r3, [sp, #148]	; 0x94
   16974:	lsr	r3, r5, #1
   16978:	str	r2, [sp, #140]	; 0x8c
   1697c:	str	r3, [sp, #152]	; 0x98
   16980:	add	r3, sp, #264	; 0x108
   16984:	ldrd	r2, [r3]
   16988:	orrs	r3, r2, r3
   1698c:	bne	16d9c <__assert_fail@plt+0x5c70>
   16990:	ldrb	r3, [sp, #506]	; 0x1fa
   16994:	cmp	r3, #0
   16998:	beq	16b9c <__assert_fail@plt+0x5a70>
   1699c:	add	r3, sp, #240	; 0xf0
   169a0:	add	r7, sp, #224	; 0xe0
   169a4:	mov	sl, r3
   169a8:	add	r3, sp, #248	; 0xf8
   169ac:	str	r3, [sp, #96]	; 0x60
   169b0:	add	r3, sp, #264	; 0x108
   169b4:	mov	fp, #0
   169b8:	mov	r8, r3
   169bc:	mov	r9, r7
   169c0:	mov	r3, r8
   169c4:	ldrd	r0, [r3, #8]!
   169c8:	cmp	r1, #0
   169cc:	mov	r8, r3
   169d0:	strd	r0, [sp, #16]
   169d4:	cmpeq	r0, #2
   169d8:	beq	16d4c <__assert_fail@plt+0x5c20>
   169dc:	ldrd	r6, [sp, #16]
   169e0:	mov	r1, #0
   169e4:	ldr	r3, [sp, #100]	; 0x64
   169e8:	ubfx	r0, r6, #1, #7
   169ec:	add	r0, r3, r0
   169f0:	ldrb	r0, [r0, #716]	; 0x2cc
   169f4:	umull	r4, r5, r0, r0
   169f8:	adds	ip, r0, r0
   169fc:	mov	r0, r6
   16a00:	adc	lr, r1, r1
   16a04:	mul	r6, r4, r7
   16a08:	umull	r2, r3, r4, r0
   16a0c:	mla	r6, r0, r5, r6
   16a10:	subs	r0, ip, r2
   16a14:	add	r3, r6, r3
   16a18:	umull	r4, r5, r0, r0
   16a1c:	sbc	r1, lr, r3
   16a20:	ldrd	r2, [sp, #16]
   16a24:	adds	lr, r0, r0
   16a28:	adc	ip, r1, r1
   16a2c:	mul	r0, r0, r1
   16a30:	mul	r6, r4, r3
   16a34:	add	r5, r5, r0, lsl #1
   16a38:	umull	r0, r1, r4, r2
   16a3c:	mla	r6, r2, r5, r6
   16a40:	subs	lr, lr, r0
   16a44:	add	r1, r6, r1
   16a48:	sbc	r4, ip, r1
   16a4c:	umull	r0, r1, lr, lr
   16a50:	adds	r6, lr, lr
   16a54:	adc	ip, r4, r4
   16a58:	mul	lr, lr, r4
   16a5c:	umull	r4, r5, r0, r2
   16a60:	add	r1, r1, lr, lsl #1
   16a64:	mul	lr, r0, r3
   16a68:	mla	lr, r2, r1, lr
   16a6c:	subs	r1, r6, r4
   16a70:	ldrd	r6, [sp, #16]
   16a74:	ldrd	r2, [sp, #72]	; 0x48
   16a78:	add	r5, lr, r5
   16a7c:	sbc	ip, ip, r5
   16a80:	cmp	r3, r7
   16a84:	cmpeq	r2, r6
   16a88:	ldrd	r2, [sp, #80]	; 0x50
   16a8c:	mul	r0, r2, ip
   16a90:	umull	r4, r5, r2, r1
   16a94:	mla	r0, r1, r3, r0
   16a98:	add	r0, r0, r5
   16a9c:	mov	r5, r0
   16aa0:	bcc	16d70 <__assert_fail@plt+0x5c44>
   16aa4:	mov	lr, #0
   16aa8:	umull	r2, r3, r0, r6
   16aac:	mov	r7, r6
   16ab0:	umull	r6, r7, r4, r7
   16ab4:	str	lr, [sp, #128]	; 0x80
   16ab8:	ldr	lr, [sp, #20]
   16abc:	strd	r2, [sp, #112]	; 0x70
   16ac0:	umlal	r2, r3, r4, lr
   16ac4:	strd	r2, [sp, #120]	; 0x78
   16ac8:	mov	r2, r7
   16acc:	umull	r6, r7, r0, lr
   16ad0:	mov	lr, #0
   16ad4:	strd	r6, [sp, #16]
   16ad8:	ldrd	r6, [sp, #120]	; 0x78
   16adc:	adds	r3, r2, r6
   16ae0:	str	r3, [sp, #56]	; 0x38
   16ae4:	adc	r3, lr, r7
   16ae8:	str	r3, [sp, #60]	; 0x3c
   16aec:	ldrd	r6, [sp, #56]	; 0x38
   16af0:	ldrd	r2, [sp, #112]	; 0x70
   16af4:	cmp	r3, r7
   16af8:	cmpeq	r2, r6
   16afc:	bls	16b18 <__assert_fail@plt+0x59ec>
   16b00:	ldr	r3, [sp, #16]
   16b04:	adds	r3, r3, lr
   16b08:	str	r3, [sp, #16]
   16b0c:	ldr	r3, [sp, #20]
   16b10:	adc	r3, r3, #1
   16b14:	str	r3, [sp, #20]
   16b18:	strd	r4, [r9]
   16b1c:	mov	r3, #0
   16b20:	ldr	r2, [sp, #60]	; 0x3c
   16b24:	ldrd	r4, [sp, #72]	; 0x48
   16b28:	subs	r2, r4, r2
   16b2c:	sbc	r3, r5, r3
   16b30:	ldrd	r4, [sp, #16]
   16b34:	subs	r2, r2, r4
   16b38:	sbc	r0, r3, r5
   16b3c:	mul	ip, r2, ip
   16b40:	umull	r2, r3, r2, r1
   16b44:	mla	ip, r1, r0, ip
   16b48:	add	r3, ip, r3
   16b4c:	strd	r2, [r9, #8]
   16b50:	ldr	r1, [sp, #40]	; 0x28
   16b54:	add	r3, sp, #208	; 0xd0
   16b58:	mov	r2, r9
   16b5c:	add	fp, fp, #1
   16b60:	ldr	ip, [sp, #52]	; 0x34
   16b64:	ldr	r0, [sp, #96]	; 0x60
   16b68:	stm	sp, {r1, ip}
   16b6c:	add	ip, sp, #192	; 0xc0
   16b70:	add	r1, sp, #176	; 0xb0
   16b74:	str	ip, [sp, #8]
   16b78:	bl	11ec8 <__assert_fail@plt+0xd9c>
   16b7c:	ldrd	r2, [sp, #192]	; 0xc0
   16b80:	strd	r0, [sl]
   16b84:	cmp	r1, r3
   16b88:	cmpeq	r0, r2
   16b8c:	beq	16bbc <__assert_fail@plt+0x5a90>
   16b90:	ldrb	r3, [sp, #506]	; 0x1fa
   16b94:	cmp	r3, fp
   16b98:	bhi	169c0 <__assert_fail@plt+0x5894>
   16b9c:	ldr	r0, [sp, #156]	; 0x9c
   16ba0:	add	sp, sp, #516	; 0x204
   16ba4:	ldrd	r4, [sp]
   16ba8:	ldrd	r6, [sp, #8]
   16bac:	ldrd	r8, [sp, #16]
   16bb0:	ldrd	sl, [sp, #24]
   16bb4:	add	sp, sp, #32
   16bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bbc:	ldrb	ip, [sp, #506]	; 0x1fa
   16bc0:	ldrd	r0, [sl, #8]
   16bc4:	ldrd	r2, [sp, #200]	; 0xc8
   16bc8:	cmp	ip, fp
   16bcc:	bls	16f20 <__assert_fail@plt+0x5df4>
   16bd0:	cmp	r1, r3
   16bd4:	cmpeq	r0, r2
   16bd8:	bne	169c0 <__assert_fail@plt+0x5894>
   16bdc:	ldr	r1, [sp, #64]	; 0x40
   16be0:	mov	r3, #0
   16be4:	ldrb	r2, [r1], #1
   16be8:	str	r1, [sp, #64]	; 0x40
   16bec:	ldr	r1, [sp, #24]
   16bf0:	adds	r1, r1, r2
   16bf4:	str	r1, [sp, #24]
   16bf8:	ldr	r1, [sp, #28]
   16bfc:	adc	r3, r1, r3
   16c00:	str	r3, [sp, #28]
   16c04:	ldrd	r0, [sp, #24]
   16c08:	ldrd	r2, [sp, #32]
   16c0c:	cmp	r3, r1
   16c10:	cmpeq	r2, r0
   16c14:	bls	16d84 <__assert_fail@plt+0x5c58>
   16c18:	ldrd	r4, [sp, #24]
   16c1c:	mov	r2, #63	; 0x3f
   16c20:	mov	r3, #0
   16c24:	mov	r0, #0
   16c28:	mov	r1, #0
   16c2c:	ldrd	r6, [sp, #32]
   16c30:	ldrd	r8, [sp, #104]	; 0x68
   16c34:	strd	r6, [sp, #16]
   16c38:	ldrd	r6, [sp, #16]
   16c3c:	adds	lr, r4, r4
   16c40:	adc	ip, r5, r5
   16c44:	orr	r4, lr, r1, lsr #31
   16c48:	adds	sl, r0, r0
   16c4c:	adc	fp, r1, r1
   16c50:	mov	r5, ip
   16c54:	mov	r0, sl
   16c58:	mov	r1, fp
   16c5c:	cmp	r7, ip
   16c60:	cmpeq	r6, r4
   16c64:	bcc	16c88 <__assert_fail@plt+0x5b5c>
   16c68:	moveq	ip, #1
   16c6c:	movne	ip, #0
   16c70:	cmp	r9, fp
   16c74:	cmpeq	r8, sl
   16c78:	movhi	ip, #0
   16c7c:	andls	ip, ip, #1
   16c80:	cmp	ip, #0
   16c84:	beq	16cb8 <__assert_fail@plt+0x5b8c>
   16c88:	ldrd	r6, [sp, #16]
   16c8c:	cmp	r9, fp
   16c90:	mov	ip, #0
   16c94:	cmpeq	r8, sl
   16c98:	movhi	lr, #1
   16c9c:	movls	lr, ip
   16ca0:	subs	r0, sl, r8
   16ca4:	sbc	r1, fp, r9
   16ca8:	subs	r6, r4, r6
   16cac:	sbc	r7, r5, r7
   16cb0:	subs	r4, r6, lr
   16cb4:	sbc	r5, r7, ip
   16cb8:	subs	r2, r2, #1
   16cbc:	mvn	r7, #0
   16cc0:	sbc	r3, r3, #0
   16cc4:	mvn	r6, #0
   16cc8:	cmp	r3, r7
   16ccc:	cmpeq	r2, r6
   16cd0:	bne	16c38 <__assert_fail@plt+0x5b0c>
   16cd4:	add	r3, sp, #176	; 0xb0
   16cd8:	ldr	r2, [sp, #40]	; 0x28
   16cdc:	strd	r0, [sp, #176]	; 0xb0
   16ce0:	add	r0, sp, #208	; 0xd0
   16ce4:	ldr	ip, [sp, #136]	; 0x88
   16ce8:	stm	sp, {r3, ip}
   16cec:	ldr	r3, [sp, #52]	; 0x34
   16cf0:	strd	sl, [sp, #88]	; 0x58
   16cf4:	ldr	ip, [sp, #132]	; 0x84
   16cf8:	strd	r4, [sp, #184]	; 0xb8
   16cfc:	str	ip, [sp, #8]
   16d00:	add	ip, sp, #192	; 0xc0
   16d04:	str	ip, [sp, #12]
   16d08:	bl	12110 <__assert_fail@plt+0xfe4>
   16d0c:	cmp	r0, #0
   16d10:	beq	16f3c <__assert_fail@plt+0x5e10>
   16d14:	ldr	r3, [pc, #648]	; 16fa4 <__assert_fail@plt+0x5e78>
   16d18:	ldr	r2, [sp, #64]	; 0x40
   16d1c:	cmp	r3, r2
   16d20:	bne	16980 <__assert_fail@plt+0x5854>
   16d24:	mov	r2, #5
   16d28:	movw	r1, #41908	; 0xa3b4
   16d2c:	movt	r1, #2
   16d30:	mov	r0, #0
   16d34:	bl	10f04 <dcgettext@plt>
   16d38:	mov	r1, #0
   16d3c:	mov	r2, r0
   16d40:	mov	r0, r1
   16d44:	bl	10f94 <error@plt>
   16d48:	bl	11120 <abort@plt>
   16d4c:	ldr	r3, [sp, #140]	; 0x8c
   16d50:	str	r3, [r9]
   16d54:	ldr	r3, [sp, #144]	; 0x90
   16d58:	str	r3, [r9, #4]
   16d5c:	ldr	r3, [sp, #148]	; 0x94
   16d60:	str	r3, [r9, #8]
   16d64:	ldr	r3, [sp, #152]	; 0x98
   16d68:	str	r3, [r9, #12]
   16d6c:	b	16b50 <__assert_fail@plt+0x5a24>
   16d70:	mov	r2, #0
   16d74:	mov	r3, #0
   16d78:	strd	r4, [r9]
   16d7c:	strd	r2, [r9, #8]
   16d80:	b	16b50 <__assert_fail@plt+0x5a24>
   16d84:	mov	r2, #127	; 0x7f
   16d88:	mov	r3, #0
   16d8c:	ldrd	r0, [sp, #24]
   16d90:	mov	r4, #0
   16d94:	mov	r5, #0
   16d98:	b	16c2c <__assert_fail@plt+0x5b00>
   16d9c:	ldr	r3, [sp, #40]	; 0x28
   16da0:	add	r7, sp, #224	; 0xe0
   16da4:	mov	r4, #0
   16da8:	mov	r5, #0
   16dac:	mov	r1, #0
   16db0:	ldr	r2, [sp, #100]	; 0x64
   16db4:	add	r0, sp, #248	; 0xf8
   16db8:	ldr	lr, [sp, #256]	; 0x100
   16dbc:	str	r3, [sp]
   16dc0:	ldr	r3, [sp, #52]	; 0x34
   16dc4:	ldr	r6, [sp, #260]	; 0x104
   16dc8:	str	r3, [sp, #4]
   16dcc:	add	r3, sp, #192	; 0xc0
   16dd0:	str	r0, [sp, #96]	; 0x60
   16dd4:	str	r3, [sp, #8]
   16dd8:	ubfx	r3, lr, #1, #7
   16ddc:	strd	r4, [r7, #8]
   16de0:	add	r3, r2, r3
   16de4:	mov	r2, r7
   16de8:	ldrb	r3, [r3, #716]	; 0x2cc
   16dec:	umull	r4, r5, r3, r3
   16df0:	adds	r3, r3, r3
   16df4:	adc	r1, r1, r1
   16df8:	mul	ip, r4, r6
   16dfc:	mla	ip, lr, r5, ip
   16e00:	umull	r4, r5, r4, lr
   16e04:	subs	r3, r3, r4
   16e08:	add	r5, ip, r5
   16e0c:	sbc	r1, r1, r5
   16e10:	umull	r4, r5, r3, r3
   16e14:	mul	ip, r3, r1
   16e18:	adds	r3, r3, r3
   16e1c:	adc	r1, r1, r1
   16e20:	umull	r8, r9, r4, lr
   16e24:	add	r5, r5, ip, lsl #1
   16e28:	mul	ip, r4, r6
   16e2c:	subs	r4, r3, r8
   16e30:	mla	ip, lr, r5, ip
   16e34:	add	r9, ip, r9
   16e38:	sbc	r1, r1, r9
   16e3c:	umull	r8, r9, r4, r4
   16e40:	mul	r3, r4, r1
   16e44:	adds	r4, r4, r4
   16e48:	mul	ip, r8, r6
   16e4c:	adc	r1, r1, r1
   16e50:	add	r6, sp, #240	; 0xf0
   16e54:	mov	sl, r6
   16e58:	add	r3, r9, r3, lsl #1
   16e5c:	mov	r9, r3
   16e60:	add	r3, sp, #208	; 0xd0
   16e64:	mla	ip, lr, r9, ip
   16e68:	umull	r8, r9, r8, lr
   16e6c:	add	ip, ip, r9
   16e70:	subs	r4, r4, r8
   16e74:	mov	r9, ip
   16e78:	sbc	ip, r1, r9
   16e7c:	ldrd	r8, [sp, #80]	; 0x50
   16e80:	add	r1, sp, #176	; 0xb0
   16e84:	mul	lr, r4, r9
   16e88:	umull	r4, r5, r4, r8
   16e8c:	mla	ip, r8, ip, lr
   16e90:	add	r5, ip, r5
   16e94:	strd	r4, [r7]
   16e98:	bl	11ec8 <__assert_fail@plt+0xd9c>
   16e9c:	ldrd	r2, [sp, #192]	; 0xc0
   16ea0:	strd	r0, [r6]
   16ea4:	cmp	r1, r3
   16ea8:	cmpeq	r0, r2
   16eac:	beq	16f44 <__assert_fail@plt+0x5e18>
   16eb0:	ldrb	r3, [sp, #506]	; 0x1fa
   16eb4:	cmp	r3, #0
   16eb8:	bne	169b0 <__assert_fail@plt+0x5884>
   16ebc:	b	16b9c <__assert_fail@plt+0x5a70>
   16ec0:	ldrd	r6, [sp, #16]
   16ec4:	ldrd	r4, [sp, #104]	; 0x68
   16ec8:	subs	r1, r6, r4
   16ecc:	sbc	r3, r7, r5
   16ed0:	cmp	r5, r7
   16ed4:	str	r1, [sp, #176]	; 0xb0
   16ed8:	cmpeq	r4, r6
   16edc:	ldrd	r0, [sp, #32]
   16ee0:	movhi	r2, #1
   16ee4:	movls	r2, #0
   16ee8:	subs	r4, r8, r2
   16eec:	str	r3, [sp, #180]	; 0xb4
   16ef0:	sbc	r5, r9, #0
   16ef4:	subs	r2, r4, r0
   16ef8:	sbc	r3, r5, r1
   16efc:	strd	r2, [sp, #184]	; 0xb8
   16f00:	b	168c4 <__assert_fail@plt+0x5798>
   16f04:	mov	r4, #127	; 0x7f
   16f08:	mov	r5, #0
   16f0c:	mov	r0, #1
   16f10:	mov	r1, #0
   16f14:	mov	r2, #0
   16f18:	mov	r3, #0
   16f1c:	b	16790 <__assert_fail@plt+0x5664>
   16f20:	cmp	r1, r3
   16f24:	cmpeq	r0, r2
   16f28:	movne	r3, #1
   16f2c:	moveq	r3, #0
   16f30:	cmp	r3, #0
   16f34:	beq	16bdc <__assert_fail@plt+0x5ab0>
   16f38:	b	16b9c <__assert_fail@plt+0x5a70>
   16f3c:	str	r0, [sp, #156]	; 0x9c
   16f40:	b	16b9c <__assert_fail@plt+0x5a70>
   16f44:	ldrb	ip, [sp, #506]	; 0x1fa
   16f48:	ldrd	r0, [r6, #8]
   16f4c:	ldrd	r2, [sp, #200]	; 0xc8
   16f50:	cmp	ip, #0
   16f54:	beq	16f20 <__assert_fail@plt+0x5df4>
   16f58:	cmp	r1, r3
   16f5c:	cmpeq	r0, r2
   16f60:	beq	16bdc <__assert_fail@plt+0x5ab0>
   16f64:	b	169b0 <__assert_fail@plt+0x5884>
   16f68:	ldrd	r2, [sp, #72]	; 0x48
   16f6c:	mov	ip, r2
   16f70:	mov	r2, r3
   16f74:	mov	r3, #64	; 0x40
   16f78:	str	r3, [sp, #132]	; 0x84
   16f7c:	b	166a8 <__assert_fail@plt+0x557c>
   16f80:	ldrd	r2, [sp, #72]	; 0x48
   16f84:	mov	lr, r5
   16f88:	str	r1, [sp, #132]	; 0x84
   16f8c:	mov	r1, #64	; 0x40
   16f90:	mov	r0, r2
   16f94:	mov	ip, r3
   16f98:	mov	r2, r4
   16f9c:	b	165fc <__assert_fail@plt+0x54d0>
   16fa0:	andeq	r7, r2, r0, asr r2
   16fa4:	andeq	r7, r2, ip, ror #9
   16fa8:	orrs	ip, r0, r1
   16fac:	beq	16fb4 <__assert_fail@plt+0x5e88>
   16fb0:	b	16510 <__assert_fail@plt+0x53e4>
   16fb4:	cmp	r3, #0
   16fb8:	strd	r4, [sp, #-8]!
   16fbc:	mov	r4, r2
   16fc0:	cmpeq	r2, #1
   16fc4:	mov	r5, r3
   16fc8:	bls	17004 <__assert_fail@plt+0x5ed8>
   16fcc:	add	r3, pc, #60	; 0x3c
   16fd0:	ldrd	r2, [r3]
   16fd4:	cmp	r5, r3
   16fd8:	cmpeq	r4, r2
   16fdc:	bls	16ff4 <__assert_fail@plt+0x5ec8>
   16fe0:	mov	r0, r4
   16fe4:	mov	r1, r5
   16fe8:	ldrd	r4, [sp]
   16fec:	add	sp, sp, #8
   16ff0:	b	13ba4 <__assert_fail@plt+0x2a78>
   16ff4:	mov	r0, #1
   16ff8:	ldrd	r4, [sp]
   16ffc:	add	sp, sp, #8
   17000:	bx	lr
   17004:	mov	r0, #0
   17008:	b	16ff8 <__assert_fail@plt+0x5ecc>
   1700c:	nop	{0}
   17010:	cmneq	sp, r8, ror sp
   17014:	andeq	r0, r0, r0
   17018:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1701c:	mov	r3, r0
   17020:	mov	r4, r0
   17024:	strd	r6, [sp, #8]
   17028:	strd	r8, [sp, #16]
   1702c:	strd	sl, [sp, #24]
   17030:	str	lr, [sp, #32]
   17034:	sub	sp, sp, #308	; 0x134
   17038:	ldrb	sl, [r0]
   1703c:	cmp	sl, #32
   17040:	bne	17050 <__assert_fail@plt+0x5f24>
   17044:	ldrb	sl, [r3, #1]!
   17048:	cmp	sl, #32
   1704c:	beq	17044 <__assert_fail@plt+0x5f18>
   17050:	cmp	sl, #43	; 0x2b
   17054:	movne	sl, r3
   17058:	addeq	sl, r3, #1
   1705c:	mov	r0, #4
   17060:	mov	r2, sl
   17064:	ldrb	r3, [r2], #1
   17068:	cmp	r3, #0
   1706c:	sub	r1, r3, #48	; 0x30
   17070:	beq	170d4 <__assert_fail@plt+0x5fa8>
   17074:	cmp	r1, #9
   17078:	mov	r0, #0
   1707c:	bls	17064 <__assert_fail@plt+0x5f38>
   17080:	mov	r2, #5
   17084:	movw	r1, #42108	; 0xa47c
   17088:	movt	r1, #2
   1708c:	mov	r0, #0
   17090:	bl	10f04 <dcgettext@plt>
   17094:	mov	r5, r0
   17098:	mov	r0, r4
   1709c:	bl	235ec <__assert_fail@plt+0x124c0>
   170a0:	mov	r1, #0
   170a4:	mov	r3, r0
   170a8:	mov	r2, r5
   170ac:	mov	r0, r1
   170b0:	bl	10f94 <error@plt>
   170b4:	mov	r0, #0
   170b8:	add	sp, sp, #308	; 0x134
   170bc:	ldrd	r4, [sp]
   170c0:	ldrd	r6, [sp, #8]
   170c4:	ldrd	r8, [sp, #16]
   170c8:	ldrd	sl, [sp, #24]
   170cc:	add	sp, sp, #32
   170d0:	pop	{pc}		; (ldr pc, [sp], #4)
   170d4:	cmp	r0, #0
   170d8:	bne	17080 <__assert_fail@plt+0x5f54>
   170dc:	mov	ip, sl
   170e0:	mov	r6, #0
   170e4:	ldrb	r2, [ip], #1
   170e8:	mov	r7, r6
   170ec:	mov	r4, r6
   170f0:	cmp	r2, #0
   170f4:	beq	17548 <__assert_fail@plt+0x641c>
   170f8:	sub	r2, r2, #48	; 0x30
   170fc:	mov	r5, r6
   17100:	str	sl, [sp, #28]
   17104:	mov	sl, r2
   17108:	lsl	r2, r7, #2
   1710c:	mov	fp, #0
   17110:	lsl	r3, r6, #2
   17114:	orr	r2, r2, r6, lsr #30
   17118:	adds	r3, r3, r6
   1711c:	lsr	lr, r7, #31
   17120:	adc	r2, r2, r7
   17124:	adds	r8, r3, r3
   17128:	lsl	r3, r5, #2
   1712c:	adc	r9, r2, r2
   17130:	adds	r2, r6, r6
   17134:	add	lr, lr, r7, lsr #29
   17138:	str	r2, [sp, #8]
   1713c:	adc	r2, r7, r7
   17140:	str	r2, [sp, #12]
   17144:	lsl	r2, r4, #2
   17148:	ldrd	r6, [sp, #8]
   1714c:	str	r2, [sp, #16]
   17150:	cmp	r9, r7
   17154:	cmpeq	r8, r6
   17158:	orr	r6, r3, r4, lsr #30
   1715c:	movcc	r7, #1
   17160:	movcs	r7, #0
   17164:	adds	r2, r8, sl
   17168:	adcs	r3, r9, fp
   1716c:	add	fp, r7, lr
   17170:	ldr	lr, [sp, #16]
   17174:	movcs	sl, #1
   17178:	movcc	sl, #0
   1717c:	add	sl, sl, fp
   17180:	mov	fp, #0
   17184:	adds	r7, lr, r4
   17188:	adc	r4, r6, r5
   1718c:	adds	r0, r7, r7
   17190:	adc	r1, r4, r4
   17194:	adds	r4, r0, sl
   17198:	adcs	r5, r1, fp
   1719c:	mov	r6, r2
   171a0:	mov	r7, r3
   171a4:	mov	r2, #0
   171a8:	mov	r3, #0
   171ac:	movcs	r2, #1
   171b0:	movcs	r3, #0
   171b4:	orrs	r3, r2, r3
   171b8:	bne	171e0 <__assert_fail@plt+0x60b4>
   171bc:	ldrb	sl, [ip], #1
   171c0:	cmp	sl, #0
   171c4:	sub	sl, sl, #48	; 0x30
   171c8:	beq	17330 <__assert_fail@plt+0x6204>
   171cc:	add	r3, pc, #916	; 0x394
   171d0:	ldrd	r2, [r3]
   171d4:	cmp	r5, r3
   171d8:	cmpeq	r4, r2
   171dc:	bls	17108 <__assert_fail@plt+0x5fdc>
   171e0:	ldr	sl, [sp, #28]
   171e4:	movw	r3, #49548	; 0xc18c
   171e8:	movt	r3, #3
   171ec:	ldrb	r3, [r3, #8]
   171f0:	cmp	r3, #0
   171f4:	bne	174a4 <__assert_fail@plt+0x6378>
   171f8:	mov	r1, sl
   171fc:	mov	r2, #10
   17200:	add	r0, sp, #36	; 0x24
   17204:	movw	r4, #49540	; 0xc184
   17208:	movt	r4, #3
   1720c:	bl	20170 <__assert_fail@plt+0xf044>
   17210:	mov	r1, #10
   17214:	add	r2, sp, #36	; 0x24
   17218:	ldr	r0, [r4]
   1721c:	bl	20190 <__assert_fail@plt+0xf064>
   17220:	ldr	r0, [r4]
   17224:	ldr	r3, [r0, #20]
   17228:	ldr	r2, [r0, #24]
   1722c:	cmp	r3, r2
   17230:	addcc	r1, r3, #1
   17234:	movcc	r2, #58	; 0x3a
   17238:	strcc	r1, [r0, #20]
   1723c:	strbcc	r2, [r3]
   17240:	bcs	174d4 <__assert_fail@plt+0x63a8>
   17244:	add	r8, sp, #48	; 0x30
   17248:	add	r0, sp, #36	; 0x24
   1724c:	mov	r1, r8
   17250:	bl	12e54 <__assert_fail@plt+0x1d28>
   17254:	ldr	r2, [sp, #56]	; 0x38
   17258:	cmp	r2, #0
   1725c:	beq	172e0 <__assert_fail@plt+0x61b4>
   17260:	ldr	r3, [sp, #52]	; 0x34
   17264:	mov	r5, #0
   17268:	mov	r7, #32
   1726c:	mov	r9, r5
   17270:	ldr	r1, [r3, r9, lsl #2]
   17274:	lsl	r6, r9, #2
   17278:	cmp	r1, #0
   1727c:	movne	sl, #0
   17280:	beq	172d0 <__assert_fail@plt+0x61a4>
   17284:	ldr	r0, [r4]
   17288:	ldr	r3, [r0, #20]
   1728c:	ldr	r2, [r0, #24]
   17290:	add	r1, r3, #1
   17294:	cmp	r3, r2
   17298:	strcc	r1, [r0, #20]
   1729c:	strbcc	r7, [r3]
   172a0:	bcs	17324 <__assert_fail@plt+0x61f8>
   172a4:	ldr	r2, [sp, #48]	; 0x30
   172a8:	mov	r1, #10
   172ac:	add	sl, sl, #1
   172b0:	ldr	r0, [r4]
   172b4:	add	r2, r2, r5
   172b8:	bl	20190 <__assert_fail@plt+0xf064>
   172bc:	ldr	r3, [sp, #52]	; 0x34
   172c0:	ldr	r2, [r3, r6]
   172c4:	cmp	r2, sl
   172c8:	bhi	17284 <__assert_fail@plt+0x6158>
   172cc:	ldr	r2, [sp, #56]	; 0x38
   172d0:	add	r9, r9, #1
   172d4:	add	r5, r5, #12
   172d8:	cmp	r2, r9
   172dc:	bhi	17270 <__assert_fail@plt+0x6144>
   172e0:	mov	r0, r8
   172e4:	bl	115a4 <__assert_fail@plt+0x478>
   172e8:	add	r0, sp, #36	; 0x24
   172ec:	bl	1a564 <__assert_fail@plt+0x9438>
   172f0:	ldr	r0, [r4]
   172f4:	ldr	r3, [r0, #20]
   172f8:	ldr	r2, [r0, #24]
   172fc:	cmp	r3, r2
   17300:	addcc	r1, r3, #1
   17304:	movcc	r2, #10
   17308:	strcc	r1, [r0, #20]
   1730c:	strbcc	r2, [r3]
   17310:	bcs	174c8 <__assert_fail@plt+0x639c>
   17314:	ldr	r0, [r4]
   17318:	bl	10f40 <fflush_unlocked@plt>
   1731c:	mov	r0, #1
   17320:	b	170b8 <__assert_fail@plt+0x5f8c>
   17324:	mov	r1, #32
   17328:	bl	110cc <__overflow@plt>
   1732c:	b	172a4 <__assert_fail@plt+0x6178>
   17330:	bic	r3, r5, #-2147483648	; 0x80000000
   17334:	ldr	sl, [sp, #28]
   17338:	cmp	r3, r5
   1733c:	cmpeq	r4, r4
   17340:	bne	171e4 <__assert_fail@plt+0x60b8>
   17344:	movw	r9, #49548	; 0xc18c
   17348:	movt	r9, #3
   1734c:	ldrb	r3, [r9, #8]
   17350:	cmp	r3, #0
   17354:	bne	17504 <__assert_fail@plt+0x63d8>
   17358:	mov	r2, r6
   1735c:	mov	r3, r7
   17360:	mov	r0, r4
   17364:	mov	r1, r5
   17368:	bl	12c10 <__assert_fail@plt+0x1ae4>
   1736c:	ldr	ip, [r9, #4]
   17370:	add	r8, sp, #48	; 0x30
   17374:	mov	sl, #58	; 0x3a
   17378:	mov	r2, r6
   1737c:	mov	r3, r7
   17380:	mov	r0, r4
   17384:	mov	r1, r5
   17388:	add	lr, ip, #1
   1738c:	strb	sl, [ip]
   17390:	str	r8, [sp]
   17394:	str	lr, [r9, #4]
   17398:	bl	15adc <__assert_fail@plt+0x49b0>
   1739c:	ldrb	r2, [sp, #298]	; 0x12a
   173a0:	cmp	r2, #0
   173a4:	beq	17410 <__assert_fail@plt+0x62e4>
   173a8:	mvn	sl, #222	; 0xde
   173ac:	add	r5, sp, #268	; 0x10c
   173b0:	add	r5, r5, #3
   173b4:	sub	sl, sl, r8
   173b8:	add	r6, sp, #64	; 0x40
   173bc:	mov	r7, #32
   173c0:	ldrb	r3, [r5, #1]!
   173c4:	cmp	r3, #0
   173c8:	movne	r4, #0
   173cc:	beq	17400 <__assert_fail@plt+0x62d4>
   173d0:	ldr	r3, [r9, #4]
   173d4:	mov	r2, #0
   173d8:	add	r4, r4, #1
   173dc:	add	ip, r3, #1
   173e0:	strb	r7, [r3]
   173e4:	ldrd	r0, [r6]
   173e8:	str	ip, [r9, #4]
   173ec:	bl	122fc <__assert_fail@plt+0x11d0>
   173f0:	ldrb	r3, [r5]
   173f4:	cmp	r4, r3
   173f8:	bcc	173d0 <__assert_fail@plt+0x62a4>
   173fc:	ldrb	r2, [sp, #298]	; 0x12a
   17400:	add	r3, sl, r5
   17404:	add	r6, r6, #8
   17408:	cmp	r2, r3
   1740c:	bhi	173c0 <__assert_fail@plt+0x6294>
   17410:	ldrd	r2, [r8, #8]
   17414:	ldr	r1, [r9, #4]
   17418:	orrs	r3, r2, r3
   1741c:	add	r5, r1, #1
   17420:	bne	174e0 <__assert_fail@plt+0x63b4>
   17424:	movw	r6, #49424	; 0xc110
   17428:	movt	r6, #3
   1742c:	str	r5, [r9, #4]
   17430:	ldr	r0, [r6]
   17434:	mov	r3, #10
   17438:	strb	r3, [r1]
   1743c:	ldr	r4, [r9]
   17440:	cmn	r0, #1
   17444:	beq	17528 <__assert_fail@plt+0x63fc>
   17448:	cmp	r0, #0
   1744c:	bne	17540 <__assert_fail@plt+0x6414>
   17450:	sub	r3, r5, r4
   17454:	cmp	r3, #512	; 0x200
   17458:	addcs	r4, r4, #512	; 0x200
   1745c:	bcs	17468 <__assert_fail@plt+0x633c>
   17460:	b	1731c <__assert_fail@plt+0x61f0>
   17464:	mov	r4, r2
   17468:	ldrb	r3, [r4, #-1]
   1746c:	sub	r2, r4, #1
   17470:	cmp	r3, #10
   17474:	bne	17464 <__assert_fail@plt+0x6338>
   17478:	str	r4, [r9, #4]
   1747c:	sub	r5, r5, r4
   17480:	bl	125c8 <__assert_fail@plt+0x149c>
   17484:	ldr	r3, [r9]
   17488:	mov	r2, r5
   1748c:	mov	r1, r4
   17490:	mov	r0, r3
   17494:	bl	10ed4 <memcpy@plt>
   17498:	add	r5, r0, r5
   1749c:	str	r5, [r9, #4]
   174a0:	b	1731c <__assert_fail@plt+0x61f0>
   174a4:	movw	r3, #49528	; 0xc178
   174a8:	movt	r3, #3
   174ac:	movw	r0, #42144	; 0xa4a0
   174b0:	movt	r0, #2
   174b4:	ldr	r3, [r3]
   174b8:	mov	r2, #39	; 0x27
   174bc:	mov	r1, #1
   174c0:	bl	10f58 <fwrite@plt>
   174c4:	b	171f8 <__assert_fail@plt+0x60cc>
   174c8:	mov	r1, #10
   174cc:	bl	110cc <__overflow@plt>
   174d0:	b	17314 <__assert_fail@plt+0x61e8>
   174d4:	mov	r1, #58	; 0x3a
   174d8:	bl	110cc <__overflow@plt>
   174dc:	b	17244 <__assert_fail@plt+0x6118>
   174e0:	mov	r3, #32
   174e4:	str	r5, [r9, #4]
   174e8:	strb	r3, [r1]
   174ec:	ldrd	r2, [r8]
   174f0:	ldrd	r0, [r8, #8]
   174f4:	bl	12c10 <__assert_fail@plt+0x1ae4>
   174f8:	ldr	r1, [r9, #4]
   174fc:	add	r5, r1, #1
   17500:	b	17424 <__assert_fail@plt+0x62f8>
   17504:	movw	r3, #49528	; 0xc178
   17508:	movt	r3, #3
   1750c:	movw	r0, #42068	; 0xa454
   17510:	movt	r0, #2
   17514:	ldr	r3, [r3]
   17518:	mov	r2, #36	; 0x24
   1751c:	mov	r1, #1
   17520:	bl	10f58 <fwrite@plt>
   17524:	b	17358 <__assert_fail@plt+0x622c>
   17528:	mov	r0, #0
   1752c:	bl	11108 <isatty@plt>
   17530:	cmp	r0, #0
   17534:	beq	17550 <__assert_fail@plt+0x6424>
   17538:	mov	r3, #1
   1753c:	str	r3, [r6]
   17540:	bl	125c8 <__assert_fail@plt+0x149c>
   17544:	b	1731c <__assert_fail@plt+0x61f0>
   17548:	mov	r5, r6
   1754c:	b	17344 <__assert_fail@plt+0x6218>
   17550:	mov	r0, #1
   17554:	bl	11108 <isatty@plt>
   17558:	adds	r0, r0, #0
   1755c:	movne	r0, #1
   17560:	str	r0, [r6]
   17564:	b	17448 <__assert_fail@plt+0x631c>
   17568:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1756c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   17570:	subs	r6, r0, #0
   17574:	str	r7, [sp, #-8]!
   17578:	str	lr, [sp, #4]
   1757c:	sub	sp, sp, #56	; 0x38
   17580:	beq	175c8 <__assert_fail@plt+0x649c>
   17584:	movw	r3, #49528	; 0xc178
   17588:	movt	r3, #3
   1758c:	ldr	r4, [r3]
   17590:	mov	r2, #5
   17594:	movw	r1, #42192	; 0xa4d0
   17598:	movt	r1, #2
   1759c:	mov	r0, #0
   175a0:	bl	10f04 <dcgettext@plt>
   175a4:	movw	r3, #49568	; 0xc1a0
   175a8:	movt	r3, #3
   175ac:	mov	r2, r0
   175b0:	mov	r1, #1
   175b4:	ldr	r3, [r3]
   175b8:	mov	r0, r4
   175bc:	bl	11084 <__fprintf_chk@plt>
   175c0:	mov	r0, r6
   175c4:	bl	10ff4 <exit@plt>
   175c8:	mov	r2, #5
   175cc:	movw	r1, #42232	; 0xa4f8
   175d0:	movt	r1, #2
   175d4:	movw	r7, #49540	; 0xc184
   175d8:	movt	r7, #3
   175dc:	bl	10f04 <dcgettext@plt>
   175e0:	movw	r3, #49568	; 0xc1a0
   175e4:	movt	r3, #3
   175e8:	ldr	r3, [r3]
   175ec:	mov	r1, r0
   175f0:	mov	r0, #1
   175f4:	mov	r2, r3
   175f8:	bl	11060 <__printf_chk@plt>
   175fc:	mov	r2, #5
   17600:	movw	r1, #42272	; 0xa520
   17604:	movt	r1, #2
   17608:	mov	r0, r6
   1760c:	bl	10f04 <dcgettext@plt>
   17610:	ldr	r1, [r7]
   17614:	bl	10e5c <fputs_unlocked@plt>
   17618:	mov	r2, #5
   1761c:	movw	r1, #42408	; 0xa5a8
   17620:	movt	r1, #2
   17624:	mov	r0, r6
   17628:	bl	10f04 <dcgettext@plt>
   1762c:	ldr	r1, [r7]
   17630:	bl	10e5c <fputs_unlocked@plt>
   17634:	mov	r2, #5
   17638:	movw	r1, #42456	; 0xa5d8
   1763c:	movt	r1, #2
   17640:	mov	r0, r6
   17644:	bl	10f04 <dcgettext@plt>
   17648:	ldr	r1, [r7]
   1764c:	bl	10e5c <fputs_unlocked@plt>
   17650:	ldr	lr, [pc, #560]	; 17888 <__assert_fail@plt+0x675c>
   17654:	ldr	ip, [lr]
   17658:	ldr	r4, [lr, #4]
   1765c:	ldrd	r8, [lr, #8]
   17660:	subs	r1, ip, #0
   17664:	str	ip, [sp]
   17668:	ldrd	r2, [lr, #16]
   1766c:	str	r4, [sp, #4]
   17670:	ldrd	r4, [lr, #24]
   17674:	strd	r8, [sp, #8]
   17678:	ldrd	r8, [lr, #32]
   1767c:	strd	r2, [sp, #16]
   17680:	ldrd	r2, [lr, #40]	; 0x28
   17684:	strd	r4, [sp, #24]
   17688:	ldrd	r4, [lr, #48]	; 0x30
   1768c:	strd	r8, [sp, #32]
   17690:	strd	r2, [sp, #40]	; 0x28
   17694:	strd	r4, [sp, #48]	; 0x30
   17698:	movwne	r5, #42184	; 0xa4c8
   1769c:	mov	r4, sp
   176a0:	movtne	r5, #2
   176a4:	bne	1779c <__assert_fail@plt+0x6670>
   176a8:	ldr	r4, [r4, #4]
   176ac:	movw	r1, #42512	; 0xa610
   176b0:	movt	r1, #2
   176b4:	mov	r2, #5
   176b8:	cmp	r4, #0
   176bc:	beq	177b0 <__assert_fail@plt+0x6684>
   176c0:	mov	r0, #0
   176c4:	bl	10f04 <dcgettext@plt>
   176c8:	mov	r1, r0
   176cc:	movw	r3, #42536	; 0xa628
   176d0:	movt	r3, #2
   176d4:	movw	r2, #42576	; 0xa650
   176d8:	movt	r2, #2
   176dc:	mov	r0, #1
   176e0:	bl	11060 <__printf_chk@plt>
   176e4:	mov	r1, #0
   176e8:	mov	r0, #5
   176ec:	bl	110d8 <setlocale@plt>
   176f0:	cmp	r0, #0
   176f4:	movweq	r5, #42184	; 0xa4c8
   176f8:	movteq	r5, #2
   176fc:	beq	17720 <__assert_fail@plt+0x65f4>
   17700:	movw	r1, #42592	; 0xa660
   17704:	movt	r1, #2
   17708:	mov	r2, #3
   1770c:	movw	r5, #42184	; 0xa4c8
   17710:	movt	r5, #2
   17714:	bl	11114 <strncmp@plt>
   17718:	cmp	r0, #0
   1771c:	bne	17868 <__assert_fail@plt+0x673c>
   17720:	mov	r2, #5
   17724:	movw	r1, #42668	; 0xa6ac
   17728:	movt	r1, #2
   1772c:	mov	r0, #0
   17730:	bl	10f04 <dcgettext@plt>
   17734:	mov	r1, r0
   17738:	movw	r3, #42184	; 0xa4c8
   1773c:	movt	r3, #2
   17740:	movw	r2, #42536	; 0xa628
   17744:	movt	r2, #2
   17748:	mov	r0, #1
   1774c:	bl	11060 <__printf_chk@plt>
   17750:	mov	r2, #5
   17754:	movw	r1, #42696	; 0xa6c8
   17758:	movt	r1, #2
   1775c:	mov	r0, #0
   17760:	bl	10f04 <dcgettext@plt>
   17764:	movw	r2, #42868	; 0xa774
   17768:	movt	r2, #2
   1776c:	cmp	r4, r5
   17770:	movw	r3, #42452	; 0xa5d4
   17774:	movt	r3, #2
   17778:	mov	r1, r0
   1777c:	moveq	r3, r2
   17780:	mov	r2, r4
   17784:	mov	r0, #1
   17788:	bl	11060 <__printf_chk@plt>
   1778c:	b	175c0 <__assert_fail@plt+0x6494>
   17790:	ldr	r1, [r4, #8]!
   17794:	cmp	r1, #0
   17798:	beq	176a8 <__assert_fail@plt+0x657c>
   1779c:	mov	r0, r5
   177a0:	bl	10e8c <strcmp@plt>
   177a4:	cmp	r0, #0
   177a8:	bne	17790 <__assert_fail@plt+0x6664>
   177ac:	b	176a8 <__assert_fail@plt+0x657c>
   177b0:	mov	r0, r4
   177b4:	bl	10f04 <dcgettext@plt>
   177b8:	mov	r1, r0
   177bc:	movw	r3, #42536	; 0xa628
   177c0:	movt	r3, #2
   177c4:	movw	r2, #42576	; 0xa650
   177c8:	movt	r2, #2
   177cc:	mov	r0, #1
   177d0:	bl	11060 <__printf_chk@plt>
   177d4:	mov	r1, r4
   177d8:	mov	r0, #5
   177dc:	bl	110d8 <setlocale@plt>
   177e0:	cmp	r0, #0
   177e4:	beq	17800 <__assert_fail@plt+0x66d4>
   177e8:	movw	r1, #42592	; 0xa660
   177ec:	movt	r1, #2
   177f0:	mov	r2, #3
   177f4:	bl	11114 <strncmp@plt>
   177f8:	cmp	r0, #0
   177fc:	bne	1785c <__assert_fail@plt+0x6730>
   17800:	mov	r2, #5
   17804:	movw	r1, #42668	; 0xa6ac
   17808:	movt	r1, #2
   1780c:	mov	r0, #0
   17810:	bl	10f04 <dcgettext@plt>
   17814:	mov	r1, r0
   17818:	movw	r3, #42184	; 0xa4c8
   1781c:	movt	r3, #2
   17820:	movw	r2, #42536	; 0xa628
   17824:	movt	r2, #2
   17828:	mov	r0, #1
   1782c:	bl	11060 <__printf_chk@plt>
   17830:	movw	r1, #42696	; 0xa6c8
   17834:	movt	r1, #2
   17838:	mov	r2, #5
   1783c:	mov	r0, #0
   17840:	bl	10f04 <dcgettext@plt>
   17844:	movw	r4, #42184	; 0xa4c8
   17848:	movt	r4, #2
   1784c:	movw	r3, #42868	; 0xa774
   17850:	movt	r3, #2
   17854:	mov	r1, r0
   17858:	b	17780 <__assert_fail@plt+0x6654>
   1785c:	movw	r5, #42184	; 0xa4c8
   17860:	movt	r5, #2
   17864:	mov	r4, r5
   17868:	mov	r2, #5
   1786c:	movw	r1, #42596	; 0xa664
   17870:	movt	r1, #2
   17874:	mov	r0, #0
   17878:	bl	10f04 <dcgettext@plt>
   1787c:	ldr	r1, [r7]
   17880:	bl	10e5c <fputs_unlocked@plt>
   17884:	b	17720 <__assert_fail@plt+0x65f4>
   17888:	andeq	r7, r2, r8, asr #16
   1788c:	movw	r3, #49560	; 0xc198
   17890:	movt	r3, #3
   17894:	str	r0, [r3]
   17898:	bx	lr
   1789c:	movw	r3, #49560	; 0xc198
   178a0:	movt	r3, #3
   178a4:	strb	r0, [r3, #4]
   178a8:	bx	lr
   178ac:	movw	r3, #49540	; 0xc184
   178b0:	movt	r3, #3
   178b4:	strd	r4, [sp, #-16]!
   178b8:	ldr	r0, [r3]
   178bc:	str	r6, [sp, #8]
   178c0:	str	lr, [sp, #12]
   178c4:	sub	sp, sp, #8
   178c8:	bl	24bd0 <__assert_fail@plt+0x13aa4>
   178cc:	cmp	r0, #0
   178d0:	beq	178fc <__assert_fail@plt+0x67d0>
   178d4:	movw	r4, #49560	; 0xc198
   178d8:	movt	r4, #3
   178dc:	ldrb	r6, [r4, #4]
   178e0:	bl	11024 <__errno_location@plt>
   178e4:	mov	r5, r0
   178e8:	cmp	r6, #0
   178ec:	beq	17928 <__assert_fail@plt+0x67fc>
   178f0:	ldr	r3, [r0]
   178f4:	cmp	r3, #32
   178f8:	bne	17928 <__assert_fail@plt+0x67fc>
   178fc:	movw	r3, #49528	; 0xc178
   17900:	movt	r3, #3
   17904:	ldr	r0, [r3]
   17908:	bl	24bd0 <__assert_fail@plt+0x13aa4>
   1790c:	cmp	r0, #0
   17910:	bne	17970 <__assert_fail@plt+0x6844>
   17914:	add	sp, sp, #8
   17918:	ldrd	r4, [sp]
   1791c:	ldr	r6, [sp, #8]
   17920:	add	sp, sp, #12
   17924:	pop	{pc}		; (ldr pc, [sp], #4)
   17928:	movw	r1, #41824	; 0xa360
   1792c:	movt	r1, #2
   17930:	mov	r2, #5
   17934:	mov	r0, #0
   17938:	bl	10f04 <dcgettext@plt>
   1793c:	mov	r6, r0
   17940:	ldr	r0, [r4]
   17944:	cmp	r0, #0
   17948:	beq	17980 <__assert_fail@plt+0x6854>
   1794c:	ldr	r4, [r5]
   17950:	bl	23400 <__assert_fail@plt+0x122d4>
   17954:	mov	r3, r0
   17958:	movw	r2, #43008	; 0xa800
   1795c:	movt	r2, #2
   17960:	mov	r0, #0
   17964:	str	r6, [sp]
   17968:	mov	r1, r4
   1796c:	bl	10f94 <error@plt>
   17970:	movw	r3, #49432	; 0xc118
   17974:	movt	r3, #3
   17978:	ldr	r0, [r3]
   1797c:	bl	10ec8 <_exit@plt>
   17980:	mov	r3, r6
   17984:	movw	r2, #43012	; 0xa804
   17988:	movt	r2, #2
   1798c:	ldr	r1, [r5]
   17990:	bl	10f94 <error@plt>
   17994:	b	17970 <__assert_fail@plt+0x6844>
   17998:	strd	r4, [sp, #-12]!
   1799c:	mov	r5, r0
   179a0:	str	lr, [sp, #8]
   179a4:	sub	sp, sp, #12
   179a8:	bl	11024 <__errno_location@plt>
   179ac:	mov	r4, r0
   179b0:	mov	r2, #0
   179b4:	ldr	r3, [r4]
   179b8:	mov	r0, r5
   179bc:	str	r2, [r4]
   179c0:	str	r3, [sp]
   179c4:	str	r3, [sp, #4]
   179c8:	bl	10ebc <free@plt>
   179cc:	ldr	r3, [r4]
   179d0:	add	r2, sp, #8
   179d4:	clz	r3, r3
   179d8:	lsr	r3, r3, #5
   179dc:	add	r3, r2, r3, lsl #2
   179e0:	ldr	r3, [r3, #-8]
   179e4:	str	r3, [r4]
   179e8:	add	sp, sp, #12
   179ec:	ldrd	r4, [sp]
   179f0:	add	sp, sp, #8
   179f4:	pop	{pc}		; (ldr pc, [sp], #4)
   179f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   179fc:	subs	r4, r2, #0
   17a00:	strd	r6, [sp, #8]
   17a04:	str	r8, [sp, #16]
   17a08:	str	lr, [sp, #20]
   17a0c:	beq	17a78 <__assert_fail@plt+0x694c>
   17a10:	mov	r7, r0
   17a14:	mov	r5, r1
   17a18:	mov	r6, #0
   17a1c:	b	17a34 <__assert_fail@plt+0x6908>
   17a20:	cmp	r0, #0
   17a24:	beq	17a68 <__assert_fail@plt+0x693c>
   17a28:	subs	r4, r4, r0
   17a2c:	add	r6, r6, r0
   17a30:	beq	17a50 <__assert_fail@plt+0x6924>
   17a34:	mov	r1, r5
   17a38:	mov	r2, r4
   17a3c:	mov	r0, r7
   17a40:	bl	23940 <__assert_fail@plt+0x12814>
   17a44:	cmn	r0, #1
   17a48:	add	r5, r5, r0
   17a4c:	bne	17a20 <__assert_fail@plt+0x68f4>
   17a50:	mov	r0, r6
   17a54:	ldrd	r4, [sp]
   17a58:	ldrd	r6, [sp, #8]
   17a5c:	ldr	r8, [sp, #16]
   17a60:	add	sp, sp, #20
   17a64:	pop	{pc}		; (ldr pc, [sp], #4)
   17a68:	bl	11024 <__errno_location@plt>
   17a6c:	mov	r3, #28
   17a70:	str	r3, [r0]
   17a74:	b	17a50 <__assert_fail@plt+0x6924>
   17a78:	mov	r6, r4
   17a7c:	b	17a50 <__assert_fail@plt+0x6924>
   17a80:	mov	r3, #0
   17a84:	strd	r4, [sp, #-16]!
   17a88:	mov	r4, r0
   17a8c:	mov	r5, r1
   17a90:	str	r6, [sp, #8]
   17a94:	add	r6, r2, #20
   17a98:	str	lr, [sp, #12]
   17a9c:	strb	r3, [r2, #20]
   17aa0:	mov	r0, r4
   17aa4:	mov	r1, r5
   17aa8:	mov	r2, #10
   17aac:	mov	r3, #0
   17ab0:	bl	27024 <__assert_fail@plt+0x15ef8>
   17ab4:	add	ip, r2, #48	; 0x30
   17ab8:	mov	r0, r4
   17abc:	mov	r1, r5
   17ac0:	mov	r2, #10
   17ac4:	mov	r3, #0
   17ac8:	strb	ip, [r6, #-1]!
   17acc:	bl	27024 <__assert_fail@plt+0x15ef8>
   17ad0:	cmp	r5, #0
   17ad4:	mov	r5, r1
   17ad8:	cmpeq	r4, #9
   17adc:	mov	r4, r0
   17ae0:	bhi	17aa0 <__assert_fail@plt+0x6974>
   17ae4:	mov	r0, r6
   17ae8:	ldrd	r4, [sp]
   17aec:	ldr	r6, [sp, #8]
   17af0:	add	sp, sp, #12
   17af4:	pop	{pc}		; (ldr pc, [sp], #4)
   17af8:	cmp	r0, #16
   17afc:	beq	17b78 <__assert_fail@plt+0x6a4c>
   17b00:	bls	17b28 <__assert_fail@plt+0x69fc>
   17b04:	cmp	r0, #64	; 0x40
   17b08:	beq	17b70 <__assert_fail@plt+0x6a44>
   17b0c:	bls	17b48 <__assert_fail@plt+0x6a1c>
   17b10:	cmp	r0, #128	; 0x80
   17b14:	beq	17b58 <__assert_fail@plt+0x6a2c>
   17b18:	cmp	r0, #256	; 0x100
   17b1c:	moveq	r0, #8
   17b20:	movne	r0, #0
   17b24:	bx	lr
   17b28:	cmp	r0, #4
   17b2c:	beq	17b68 <__assert_fail@plt+0x6a3c>
   17b30:	cmp	r0, #8
   17b34:	beq	17b60 <__assert_fail@plt+0x6a34>
   17b38:	sub	r0, r0, #2
   17b3c:	clz	r0, r0
   17b40:	lsr	r0, r0, #5
   17b44:	bx	lr
   17b48:	cmp	r0, #32
   17b4c:	moveq	r0, #5
   17b50:	movne	r0, #0
   17b54:	bx	lr
   17b58:	mov	r0, #7
   17b5c:	bx	lr
   17b60:	mov	r0, #3
   17b64:	bx	lr
   17b68:	mov	r0, #2
   17b6c:	bx	lr
   17b70:	mov	r0, #6
   17b74:	bx	lr
   17b78:	mov	r0, #4
   17b7c:	bx	lr
   17b80:	mov	ip, #0
   17b84:	sub	r2, r2, #1
   17b88:	strd	r4, [sp, #-12]!
   17b8c:	add	r2, r1, r2
   17b90:	mov	r5, ip
   17b94:	str	lr, [sp, #8]
   17b98:	sub	r1, r1, #1
   17b9c:	mov	lr, ip
   17ba0:	b	17bd4 <__assert_fail@plt+0x6aa8>
   17ba4:	ldrb	r4, [r2]
   17ba8:	orr	lr, lr, r4, lsl ip
   17bac:	add	ip, ip, r3
   17bb0:	cmp	ip, #31
   17bb4:	bls	17bd0 <__assert_fail@plt+0x6aa4>
   17bb8:	str	lr, [r0, r5, lsl #2]
   17bbc:	sub	ip, ip, #32
   17bc0:	add	r5, r5, #1
   17bc4:	ldrb	lr, [r2]
   17bc8:	sub	r4, r3, ip
   17bcc:	lsr	lr, lr, r4
   17bd0:	sub	r2, r2, #1
   17bd4:	cmp	r2, r1
   17bd8:	bne	17ba4 <__assert_fail@plt+0x6a78>
   17bdc:	cmp	lr, #0
   17be0:	addne	r2, r5, #1
   17be4:	strne	lr, [r0, r5, lsl #2]
   17be8:	bne	17c24 <__assert_fail@plt+0x6af8>
   17bec:	cmp	r5, #0
   17bf0:	beq	17c34 <__assert_fail@plt+0x6b08>
   17bf4:	sub	r3, r5, #-1073741823	; 0xc0000001
   17bf8:	ldr	r2, [r0, r3, lsl #2]
   17bfc:	add	r3, r0, r3, lsl #2
   17c00:	cmp	r2, #0
   17c04:	mov	r2, r5
   17c08:	beq	17c1c <__assert_fail@plt+0x6af0>
   17c0c:	b	17c24 <__assert_fail@plt+0x6af8>
   17c10:	ldr	r1, [r3, #-4]!
   17c14:	cmp	r1, #0
   17c18:	bne	17c24 <__assert_fail@plt+0x6af8>
   17c1c:	subs	r2, r2, #1
   17c20:	bne	17c10 <__assert_fail@plt+0x6ae4>
   17c24:	ldrd	r4, [sp]
   17c28:	add	sp, sp, #8
   17c2c:	mov	r0, r2
   17c30:	pop	{pc}		; (ldr pc, [sp], #4)
   17c34:	mov	r2, r5
   17c38:	b	17c24 <__assert_fail@plt+0x6af8>
   17c3c:	b	17998 <__assert_fail@plt+0x686c>
   17c40:	movw	ip, #49528	; 0xc178
   17c44:	movt	ip, #3
   17c48:	str	r4, [sp, #-8]!
   17c4c:	mov	r3, r0
   17c50:	movw	r2, #45656	; 0xb258
   17c54:	movt	r2, #2
   17c58:	mov	r1, #1
   17c5c:	ldr	r0, [ip]
   17c60:	str	lr, [sp, #4]
   17c64:	bl	11084 <__fprintf_chk@plt>
   17c68:	bl	11120 <abort@plt>
   17c6c:	mov	r1, r2
   17c70:	str	r4, [sp, #-8]!
   17c74:	str	lr, [sp, #4]
   17c78:	bl	24afc <__assert_fail@plt+0x139d0>
   17c7c:	cmp	r0, #0
   17c80:	beq	17c90 <__assert_fail@plt+0x6b64>
   17c84:	ldr	r4, [sp]
   17c88:	add	sp, sp, #4
   17c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c90:	movw	r0, #43752	; 0xaae8
   17c94:	movt	r0, #2
   17c98:	bl	17c40 <__assert_fail@plt+0x6b14>
   17c9c:	cmp	r1, #0
   17ca0:	beq	17d9c <__assert_fail@plt+0x6c70>
   17ca4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ca8:	sub	r4, r0, #1
   17cac:	strd	r6, [sp, #8]
   17cb0:	mov	r6, r0
   17cb4:	mvn	r7, #0
   17cb8:	strd	r8, [sp, #16]
   17cbc:	str	sl, [sp, #24]
   17cc0:	str	lr, [sp, #28]
   17cc4:	b	17ccc <__assert_fail@plt+0x6ba0>
   17cc8:	mov	r4, ip
   17ccc:	ldr	lr, [r2]
   17cd0:	ldr	r9, [r2, #12]
   17cd4:	rsb	r5, lr, #32
   17cd8:	lsl	r3, r1, lr
   17cdc:	lsr	r1, r1, r5
   17ce0:	uxth	ip, r9
   17ce4:	lsr	r9, r9, #16
   17ce8:	lsr	r8, r1, #16
   17cec:	uxth	sl, r1
   17cf0:	add	r1, r1, #1
   17cf4:	mul	r0, ip, sl
   17cf8:	mul	ip, ip, r8
   17cfc:	mul	r8, r9, r8
   17d00:	mla	r9, r9, sl, ip
   17d04:	add	r9, r9, r0, lsr #16
   17d08:	uxth	r0, r0
   17d0c:	add	r0, r0, r9, lsl #16
   17d10:	cmp	ip, r9
   17d14:	ldr	ip, [r2, #4]
   17d18:	addhi	r8, r8, #65536	; 0x10000
   17d1c:	add	r1, r1, r9, lsr #16
   17d20:	adds	r0, r3, r0
   17d24:	movcs	r9, #1
   17d28:	movcc	r9, #0
   17d2c:	add	r1, r1, r9
   17d30:	add	r1, r1, r8
   17d34:	mls	r8, r1, ip, r3
   17d38:	cmp	r0, r8
   17d3c:	movcs	r0, #0
   17d40:	movcc	r0, #1
   17d44:	rsb	r3, r0, #0
   17d48:	sub	r1, r1, r0
   17d4c:	and	r3, r3, ip
   17d50:	add	r3, r3, r8
   17d54:	cmp	ip, r3
   17d58:	subls	r3, r3, ip
   17d5c:	addls	r1, r1, #1
   17d60:	ands	r0, r3, r7, lsr r5
   17d64:	bne	17da4 <__assert_fail@plt+0x6c78>
   17d68:	lsr	r3, r3, lr
   17d6c:	add	r0, r4, #2
   17d70:	cmp	r1, #0
   17d74:	sub	r0, r0, r6
   17d78:	add	ip, r4, #1
   17d7c:	strb	r3, [r4, #1]
   17d80:	bne	17cc8 <__assert_fail@plt+0x6b9c>
   17d84:	ldrd	r4, [sp]
   17d88:	ldrd	r6, [sp, #8]
   17d8c:	ldrd	r8, [sp, #16]
   17d90:	ldr	sl, [sp, #24]
   17d94:	add	sp, sp, #28
   17d98:	pop	{pc}		; (ldr pc, [sp], #4)
   17d9c:	mov	r0, r1
   17da0:	bx	lr
   17da4:	movw	r3, #43016	; 0xa808
   17da8:	movt	r3, #2
   17dac:	movw	r1, #43800	; 0xab18
   17db0:	movt	r1, #2
   17db4:	movw	r0, #43816	; 0xab28
   17db8:	movt	r0, #2
   17dbc:	movw	r2, #1259	; 0x4eb
   17dc0:	bl	1112c <__assert_fail@plt>
   17dc4:	ldr	r3, [r0]
   17dc8:	cmp	r1, #1
   17dcc:	strd	r4, [sp, #-16]!
   17dd0:	movge	r5, r1
   17dd4:	movlt	r5, #1
   17dd8:	mov	r4, r0
   17ddc:	lsl	r0, r5, #2
   17de0:	str	r6, [sp, #8]
   17de4:	str	lr, [sp, #12]
   17de8:	cmp	r3, #0
   17dec:	bne	17e30 <__assert_fail@plt+0x6d04>
   17df0:	movw	r3, #49436	; 0xc11c
   17df4:	movt	r3, #3
   17df8:	ldr	r3, [r3, #4]
   17dfc:	blx	r3
   17e00:	str	r0, [r4, #8]
   17e04:	ldr	r3, [r4, #4]
   17e08:	str	r5, [r4]
   17e0c:	ldr	r6, [sp, #8]
   17e10:	cmp	r3, #0
   17e14:	rsblt	r3, r3, #0
   17e18:	cmp	r3, r5
   17e1c:	movgt	r3, #0
   17e20:	strgt	r3, [r4, #4]
   17e24:	ldrd	r4, [sp]
   17e28:	add	sp, sp, #12
   17e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e30:	movw	ip, #49436	; 0xc11c
   17e34:	movt	ip, #3
   17e38:	lsl	r1, r3, #2
   17e3c:	mov	r2, r0
   17e40:	ldr	r3, [ip]
   17e44:	ldr	r0, [r4, #8]
   17e48:	blx	r3
   17e4c:	str	r0, [r4, #8]
   17e50:	b	17e04 <__assert_fail@plt+0x6cd8>
   17e54:	cmp	r0, #0
   17e58:	str	r4, [sp, #-8]!
   17e5c:	str	lr, [sp, #4]
   17e60:	beq	17e7c <__assert_fail@plt+0x6d50>
   17e64:	bl	24ac0 <__assert_fail@plt+0x13994>
   17e68:	cmp	r0, #0
   17e6c:	beq	17e98 <__assert_fail@plt+0x6d6c>
   17e70:	ldr	r4, [sp]
   17e74:	add	sp, sp, #4
   17e78:	pop	{pc}		; (ldr pc, [sp], #4)
   17e7c:	movw	r1, #43800	; 0xab18
   17e80:	movt	r1, #2
   17e84:	ldr	r3, [pc, #24]	; 17ea4 <__assert_fail@plt+0x6d78>
   17e88:	movw	r0, #43876	; 0xab64
   17e8c:	movt	r0, #2
   17e90:	movw	r2, #291	; 0x123
   17e94:	bl	1112c <__assert_fail@plt>
   17e98:	movw	r0, #43888	; 0xab70
   17e9c:	movt	r0, #2
   17ea0:	bl	17c40 <__assert_fail@plt+0x6b14>
   17ea4:	andeq	sl, r2, ip, lsl r8
   17ea8:	cmp	r1, r3
   17eac:	str	r4, [sp, #-8]!
   17eb0:	str	lr, [sp, #4]
   17eb4:	ldr	lr, [sp, #8]
   17eb8:	bgt	17f64 <__assert_fail@plt+0x6e38>
   17ebc:	cmp	r0, #0
   17ec0:	bne	17ef8 <__assert_fail@plt+0x6dcc>
   17ec4:	add	ip, r1, #1
   17ec8:	cmp	r3, ip
   17ecc:	addne	r2, r2, r1, lsl #2
   17ed0:	bne	17ee4 <__assert_fail@plt+0x6db8>
   17ed4:	b	17f40 <__assert_fail@plt+0x6e14>
   17ed8:	add	ip, ip, #1
   17edc:	cmp	r3, ip
   17ee0:	beq	17f40 <__assert_fail@plt+0x6e14>
   17ee4:	ldr	r0, [r2, #4]!
   17ee8:	mov	r1, ip
   17eec:	cmp	lr, r0
   17ef0:	beq	17ed8 <__assert_fail@plt+0x6dac>
   17ef4:	eor	r0, r0, lr
   17ef8:	rsb	r2, r0, #0
   17efc:	and	r0, r0, r2
   17f00:	ands	r3, r0, #-16777216	; 0xff000000
   17f04:	bne	17f5c <__assert_fail@plt+0x6e30>
   17f08:	lsl	r0, r0, #8
   17f0c:	add	r3, r3, #8
   17f10:	tst	r0, #-16777216	; 0xff000000
   17f14:	beq	17f08 <__assert_fail@plt+0x6ddc>
   17f18:	cmp	r0, #0
   17f1c:	blt	17f2c <__assert_fail@plt+0x6e00>
   17f20:	lsls	r0, r0, #1
   17f24:	add	r3, r3, #1
   17f28:	bpl	17f20 <__assert_fail@plt+0x6df4>
   17f2c:	rsb	r3, r3, r1, lsl #5
   17f30:	add	r0, r3, #31
   17f34:	ldr	r4, [sp]
   17f38:	add	sp, sp, #4
   17f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f40:	cmp	lr, #0
   17f44:	lslne	r0, r3, #5
   17f48:	bne	17f34 <__assert_fail@plt+0x6e08>
   17f4c:	ldr	r4, [sp]
   17f50:	add	sp, sp, #4
   17f54:	mvn	r0, #0
   17f58:	pop	{pc}		; (ldr pc, [sp], #4)
   17f5c:	mov	r3, #0
   17f60:	b	17f18 <__assert_fail@plt+0x6dec>
   17f64:	movw	r1, #43800	; 0xab18
   17f68:	movt	r1, #2
   17f6c:	ldr	r3, [pc, #12]	; 17f80 <__assert_fail@plt+0x6e54>
   17f70:	movw	r0, #43936	; 0xaba0
   17f74:	movt	r0, #2
   17f78:	mov	r2, #716	; 0x2cc
   17f7c:	bl	1112c <__assert_fail@plt>
   17f80:	andeq	sl, r2, r0, lsr r8
   17f84:	subs	r3, r0, #0
   17f88:	beq	17fc4 <__assert_fail@plt+0x6e98>
   17f8c:	ands	r0, r3, #-16777216	; 0xff000000
   17f90:	movne	r0, #0
   17f94:	bne	17fa8 <__assert_fail@plt+0x6e7c>
   17f98:	lsl	r3, r3, #8
   17f9c:	add	r0, r0, #8
   17fa0:	tst	r3, #-16777216	; 0xff000000
   17fa4:	beq	17f98 <__assert_fail@plt+0x6e6c>
   17fa8:	cmp	r3, #0
   17fac:	blt	17fbc <__assert_fail@plt+0x6e90>
   17fb0:	lsls	r3, r3, #1
   17fb4:	add	r0, r0, #1
   17fb8:	bpl	17fb0 <__assert_fail@plt+0x6e84>
   17fbc:	rsb	r0, r0, #32
   17fc0:	bx	lr
   17fc4:	movw	r1, #43800	; 0xab18
   17fc8:	movt	r1, #2
   17fcc:	ldr	r3, [pc, #20]	; 17fe8 <__assert_fail@plt+0x6ebc>
   17fd0:	movw	r0, #43956	; 0xabb4
   17fd4:	movt	r0, #2
   17fd8:	str	r4, [sp, #-8]!
   17fdc:	movw	r2, #1210	; 0x4ba
   17fe0:	str	lr, [sp, #4]
   17fe4:	bl	1112c <__assert_fail@plt>
   17fe8:	andeq	sl, r2, r0, asr #16
   17fec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ff0:	mov	r5, r2
   17ff4:	strd	r6, [sp, #8]
   17ff8:	mov	r6, r3
   17ffc:	sub	r3, r3, #-1073741823	; 0xc0000001
   18000:	mov	r7, r0
   18004:	strd	r8, [sp, #16]
   18008:	mov	r8, r1
   1800c:	ldr	r0, [r2, r3, lsl #2]
   18010:	str	sl, [sp, #24]
   18014:	str	lr, [sp, #28]
   18018:	bl	17f84 <__assert_fail@plt+0x6e58>
   1801c:	add	r3, r8, r6, lsl #5
   18020:	mvn	r2, #0
   18024:	mvn	r2, r2, lsl r8
   18028:	sub	r3, r3, #33	; 0x21
   1802c:	add	r0, r3, r0
   18030:	cmp	r0, r8
   18034:	udiv	r0, r0, r8
   18038:	bcc	1809c <__assert_fail@plt+0x6f70>
   1803c:	mov	lr, #0
   18040:	uxtb	r2, r2
   18044:	add	r3, r7, r0
   18048:	mov	r4, lr
   1804c:	ldr	ip, [r5, r4, lsl #2]
   18050:	lsl	r1, r4, #2
   18054:	lsr	ip, ip, lr
   18058:	add	lr, lr, r8
   1805c:	cmp	lr, #31
   18060:	uxtb	ip, ip
   18064:	bls	1808c <__assert_fail@plt+0x6f60>
   18068:	add	r4, r4, #1
   1806c:	add	r1, r5, r1
   18070:	cmp	r6, r4
   18074:	ble	1808c <__assert_fail@plt+0x6f60>
   18078:	ldr	r9, [r1, #4]
   1807c:	sub	lr, lr, #32
   18080:	sub	r1, r8, lr
   18084:	orr	ip, ip, r9, lsl r1
   18088:	uxtb	ip, ip
   1808c:	and	ip, ip, r2
   18090:	strb	ip, [r3, #-1]!
   18094:	cmp	r7, r3
   18098:	bne	1804c <__assert_fail@plt+0x6f20>
   1809c:	ldrd	r4, [sp]
   180a0:	ldrd	r6, [sp, #8]
   180a4:	ldrd	r8, [sp, #16]
   180a8:	ldr	sl, [sp, #24]
   180ac:	add	sp, sp, #28
   180b0:	pop	{pc}		; (ldr pc, [sp], #4)
   180b4:	movw	r1, #43800	; 0xab18
   180b8:	movt	r1, #2
   180bc:	ldr	r3, [pc, #20]	; 180d8 <__assert_fail@plt+0x6fac>
   180c0:	movw	r0, #43964	; 0xabbc
   180c4:	movt	r0, #2
   180c8:	str	r4, [sp, #-8]!
   180cc:	movw	r2, #442	; 0x1ba
   180d0:	str	lr, [sp, #4]
   180d4:	bl	1112c <__assert_fail@plt>
   180d8:	andeq	sl, r2, r8, asr r8
   180dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   180e0:	lsr	r4, r1, #5
   180e4:	mov	r3, #1
   180e8:	strd	r6, [sp, #8]
   180ec:	and	r1, r1, #31
   180f0:	mov	r7, r0
   180f4:	str	lr, [sp, #20]
   180f8:	lsl	r5, r3, r1
   180fc:	ldr	lr, [r0, #4]
   18100:	str	r8, [sp, #16]
   18104:	eor	r6, lr, lr, asr #31
   18108:	sub	r6, r6, lr, asr #31
   1810c:	cmp	r6, r4
   18110:	bgt	18170 <__assert_fail@plt+0x7044>
   18114:	ldr	r3, [r0]
   18118:	add	r8, r4, #1
   1811c:	cmp	r3, r4
   18120:	ble	181d4 <__assert_fail@plt+0x70a8>
   18124:	ldr	r0, [r0, #8]
   18128:	cmp	r6, r4
   1812c:	lsl	r2, r4, #2
   18130:	str	r5, [r0, r4, lsl #2]
   18134:	bge	18150 <__assert_fail@plt+0x7024>
   18138:	add	r3, r0, r6, lsl #2
   1813c:	add	r2, r0, r2
   18140:	mov	r1, #0
   18144:	str	r1, [r3], #4
   18148:	cmp	r2, r3
   1814c:	bne	18144 <__assert_fail@plt+0x7018>
   18150:	cmp	lr, #0
   18154:	ldrd	r4, [sp]
   18158:	rsblt	r8, r8, #0
   1815c:	str	r8, [r7, #4]
   18160:	ldrd	r6, [sp, #8]
   18164:	ldr	r8, [sp, #16]
   18168:	add	sp, sp, #20
   1816c:	pop	{pc}		; (ldr pc, [sp], #4)
   18170:	sub	ip, r6, r4
   18174:	ldr	r0, [r0, #8]
   18178:	cmp	ip, #0
   1817c:	ble	181f8 <__assert_fail@plt+0x70cc>
   18180:	add	ip, ip, r4
   18184:	add	r2, r0, r4, lsl #2
   18188:	add	ip, r0, ip, lsl #2
   1818c:	ldr	r3, [r2]
   18190:	adds	r3, r3, r5
   18194:	movcs	r1, #1
   18198:	movcc	r1, #0
   1819c:	str	r3, [r2], #4
   181a0:	cmp	ip, r2
   181a4:	mov	r5, r1
   181a8:	bne	1818c <__assert_fail@plt+0x7060>
   181ac:	cmp	r1, #0
   181b0:	moveq	r8, r6
   181b4:	beq	18150 <__assert_fail@plt+0x7024>
   181b8:	ldr	r3, [r7]
   181bc:	add	r8, r6, #1
   181c0:	cmp	r3, r6
   181c4:	ble	181e4 <__assert_fail@plt+0x70b8>
   181c8:	mov	r3, #1
   181cc:	str	r3, [r0, r6, lsl #2]
   181d0:	b	18150 <__assert_fail@plt+0x7024>
   181d4:	mov	r1, r8
   181d8:	bl	17dc4 <__assert_fail@plt+0x6c98>
   181dc:	ldr	lr, [r7, #4]
   181e0:	b	18128 <__assert_fail@plt+0x6ffc>
   181e4:	mov	r1, r8
   181e8:	mov	r0, r7
   181ec:	bl	17dc4 <__assert_fail@plt+0x6c98>
   181f0:	ldr	lr, [r7, #4]
   181f4:	b	181c8 <__assert_fail@plt+0x709c>
   181f8:	bl	180b4 <__assert_fail@plt+0x6f88>
   181fc:	movw	r1, #43800	; 0xab18
   18200:	movt	r1, #2
   18204:	ldr	r3, [pc, #20]	; 18220 <__assert_fail@plt+0x70f4>
   18208:	movw	r0, #43964	; 0xabbc
   1820c:	movt	r0, #2
   18210:	str	r4, [sp, #-8]!
   18214:	movw	r2, #493	; 0x1ed
   18218:	str	lr, [sp, #4]
   1821c:	bl	1112c <__assert_fail@plt>
   18220:	andeq	sl, r2, r4, ror #16
   18224:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18228:	lsr	r3, r2, #5
   1822c:	mov	ip, #1
   18230:	strd	r6, [sp, #8]
   18234:	and	r2, r2, #31
   18238:	ldr	r6, [r0]
   1823c:	lsl	ip, ip, r2
   18240:	str	r8, [sp, #16]
   18244:	str	lr, [sp, #20]
   18248:	eor	r2, r6, r6, asr #31
   1824c:	sub	r2, r2, r6, asr #31
   18250:	cmp	r2, r3
   18254:	ble	182d8 <__assert_fail@plt+0x71ac>
   18258:	sub	r7, r2, r3
   1825c:	cmp	r7, #0
   18260:	ble	18310 <__assert_fail@plt+0x71e4>
   18264:	add	r7, r7, r3
   18268:	add	r3, r1, r3, lsl #2
   1826c:	add	r7, r1, r7, lsl #2
   18270:	b	18278 <__assert_fail@plt+0x714c>
   18274:	mov	ip, r5
   18278:	ldr	lr, [r3]
   1827c:	sub	r4, lr, ip
   18280:	cmp	lr, ip
   18284:	movcs	r5, #0
   18288:	movcc	r5, #1
   1828c:	str	r4, [r3], #4
   18290:	cmp	r3, r7
   18294:	bne	18274 <__assert_fail@plt+0x7148>
   18298:	cmp	lr, ip
   1829c:	bcc	182f4 <__assert_fail@plt+0x71c8>
   182a0:	add	r1, r1, r2, lsl #2
   182a4:	ldr	r3, [r1, #-4]!
   182a8:	cmp	r3, #0
   182ac:	bne	182b8 <__assert_fail@plt+0x718c>
   182b0:	subs	r2, r2, #1
   182b4:	bne	182a4 <__assert_fail@plt+0x7178>
   182b8:	cmp	r6, #0
   182bc:	ldrd	r4, [sp]
   182c0:	rsblt	r2, r2, #0
   182c4:	ldrd	r6, [sp, #8]
   182c8:	ldr	r8, [sp, #16]
   182cc:	add	sp, sp, #20
   182d0:	str	r2, [r0]
   182d4:	pop	{pc}		; (ldr pc, [sp], #4)
   182d8:	movw	r1, #43800	; 0xab18
   182dc:	movt	r1, #2
   182e0:	ldr	r3, [pc, #44]	; 18314 <__assert_fail@plt+0x71e8>
   182e4:	movw	r0, #43972	; 0xabc4
   182e8:	movt	r0, #2
   182ec:	movw	r2, #3753	; 0xea9
   182f0:	bl	1112c <__assert_fail@plt>
   182f4:	movw	r1, #43800	; 0xab18
   182f8:	movt	r1, #2
   182fc:	ldr	r3, [pc, #16]	; 18314 <__assert_fail@plt+0x71e8>
   18300:	movw	r0, #43988	; 0xabd4
   18304:	movt	r0, #2
   18308:	movw	r2, #3756	; 0xeac
   1830c:	bl	1112c <__assert_fail@plt>
   18310:	bl	181fc <__assert_fail@plt+0x70d0>
   18314:	andeq	sl, r2, r0, ror r8
   18318:	ldr	ip, [r0]
   1831c:	mov	r2, #1
   18320:	str	r4, [sp, #-8]!
   18324:	mov	r4, r1
   18328:	str	lr, [sp, #4]
   1832c:	str	r2, [r0, #4]
   18330:	cmp	ip, #0
   18334:	ble	1834c <__assert_fail@plt+0x7220>
   18338:	ldr	r0, [r0, #8]
   1833c:	str	r4, [r0]
   18340:	ldr	r4, [sp]
   18344:	add	sp, sp, #4
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	mov	r1, r2
   18350:	bl	17dc4 <__assert_fail@plt+0x6c98>
   18354:	str	r4, [r0]
   18358:	ldr	r4, [sp]
   1835c:	add	sp, sp, #4
   18360:	pop	{pc}		; (ldr pc, [sp], #4)
   18364:	vcmpe.f64	d0, #0.0
   18368:	vldr	d7, [pc, #360]	; 184d8 <__assert_fail@plt+0x73ac>
   1836c:	strd	r4, [sp, #-16]!
   18370:	str	r6, [sp, #8]
   18374:	str	lr, [sp, #12]
   18378:	vpush	{d8-d9}
   1837c:	vmrs	APSR_nzcv, fpscr
   18380:	vnegmi.f64	d8, d0
   18384:	vmovpl.f64	d8, d0
   18388:	vcmpe.f64	d8, d7
   1838c:	vmrs	APSR_nzcv, fpscr
   18390:	bmi	18494 <__assert_fail@plt+0x7368>
   18394:	vldr	d7, [pc, #324]	; 184e0 <__assert_fail@plt+0x73b4>
   18398:	mov	r4, #1
   1839c:	vcmpe.f64	d8, d7
   183a0:	vmrs	APSR_nzcv, fpscr
   183a4:	blt	183c0 <__assert_fail@plt+0x7294>
   183a8:	vldr	d6, [pc, #312]	; 184e8 <__assert_fail@plt+0x73bc>
   183ac:	vmul.f64	d8, d8, d6
   183b0:	add	r4, r4, #1
   183b4:	vcmpe.f64	d8, d7
   183b8:	vmrs	APSR_nzcv, fpscr
   183bc:	bge	183ac <__assert_fail@plt+0x7280>
   183c0:	ldr	r3, [r0]
   183c4:	mov	r5, r0
   183c8:	vmov.f64	d9, d0
   183cc:	cmp	r3, r4
   183d0:	blt	18488 <__assert_fail@plt+0x735c>
   183d4:	ldr	r0, [r0, #8]
   183d8:	vcvt.u32.f64	s15, d8
   183dc:	vldr	d4, [pc, #244]	; 184d8 <__assert_fail@plt+0x73ac>
   183e0:	vcvt.f64.u32	d6, s15
   183e4:	vsub.f64	d8, d8, d6
   183e8:	vcmpe.f64	d8, d4
   183ec:	vmrs	APSR_nzcv, fpscr
   183f0:	bpl	184bc <__assert_fail@plt+0x7390>
   183f4:	vmov	r1, s15
   183f8:	sub	r2, r4, #1
   183fc:	sub	r3, r4, #2
   18400:	cmn	r3, #1
   18404:	str	r1, [r0, r2, lsl #2]
   18408:	beq	18464 <__assert_fail@plt+0x7338>
   1840c:	vldr	d3, [pc, #204]	; 184e0 <__assert_fail@plt+0x73b4>
   18410:	vmul.f64	d8, d8, d3
   18414:	vcvt.u32.f64	s13, d8
   18418:	vcvt.f64.u32	d7, s13
   1841c:	vsub.f64	d7, d8, d7
   18420:	vcmpe.f64	d7, d4
   18424:	vmrs	APSR_nzcv, fpscr
   18428:	submi	r2, r4, #-1073741823	; 0xc0000001
   1842c:	addmi	r2, r0, r2, lsl #2
   18430:	bmi	18454 <__assert_fail@plt+0x7328>
   18434:	b	184a0 <__assert_fail@plt+0x7374>
   18438:	vmul.f64	d7, d7, d3
   1843c:	vcvt.u32.f64	s13, d7
   18440:	vcvt.f64.u32	d5, s13
   18444:	vsub.f64	d7, d7, d5
   18448:	vcmpe.f64	d7, d4
   1844c:	vmrs	APSR_nzcv, fpscr
   18450:	bpl	184a0 <__assert_fail@plt+0x7374>
   18454:	sub	r3, r3, #1
   18458:	vstmdb	r2!, {s13}
   1845c:	cmn	r3, #1
   18460:	bne	18438 <__assert_fail@plt+0x730c>
   18464:	vcmpe.f64	d9, #0.0
   18468:	vmrs	APSR_nzcv, fpscr
   1846c:	rsbmi	r4, r4, #0
   18470:	str	r4, [r5, #4]
   18474:	vpop	{d8-d9}
   18478:	ldrd	r4, [sp]
   1847c:	ldr	r6, [sp, #8]
   18480:	add	sp, sp, #12
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	mov	r1, r4
   1848c:	bl	17dc4 <__assert_fail@plt+0x6c98>
   18490:	b	183d8 <__assert_fail@plt+0x72ac>
   18494:	mov	r3, #0
   18498:	str	r3, [r0, #4]
   1849c:	b	18474 <__assert_fail@plt+0x7348>
   184a0:	movw	r1, #43800	; 0xab18
   184a4:	movt	r1, #2
   184a8:	ldr	r3, [pc, #64]	; 184f0 <__assert_fail@plt+0x73c4>
   184ac:	movw	r0, #44000	; 0xabe0
   184b0:	movt	r0, #2
   184b4:	mov	r2, #1744	; 0x6d0
   184b8:	bl	1112c <__assert_fail@plt>
   184bc:	movw	r1, #43800	; 0xab18
   184c0:	movt	r1, #2
   184c4:	ldr	r3, [pc, #36]	; 184f0 <__assert_fail@plt+0x73c4>
   184c8:	movw	r0, #44000	; 0xabe0
   184cc:	movt	r0, #2
   184d0:	movw	r2, #1736	; 0x6c8
   184d4:	bl	1112c <__assert_fail@plt>
   184d8:	andeq	r0, r0, r0
   184dc:	svccc	0x00f00000	; IMB
   184e0:	andeq	r0, r0, r0
   184e4:	mvnsmi	r0, r0
   184e8:	andeq	r0, r0, r0
   184ec:	ldclcc	0, cr0, [r0]
   184f0:	andeq	sl, r2, r0, lsl #17
   184f4:	cmp	r0, #0
   184f8:	beq	1850c <__assert_fail@plt+0x73e0>
   184fc:	movw	r3, #49436	; 0xc11c
   18500:	movt	r3, #3
   18504:	ldr	r3, [r3, #4]
   18508:	str	r3, [r0]
   1850c:	cmp	r1, #0
   18510:	beq	18524 <__assert_fail@plt+0x73f8>
   18514:	movw	r3, #49436	; 0xc11c
   18518:	movt	r3, #3
   1851c:	ldr	r3, [r3]
   18520:	str	r3, [r1]
   18524:	cmp	r2, #0
   18528:	beq	1853c <__assert_fail@plt+0x7410>
   1852c:	movw	r3, #49436	; 0xc11c
   18530:	movt	r3, #3
   18534:	ldr	r3, [r3, #8]
   18538:	str	r3, [r2]
   1853c:	bx	lr
   18540:	cmp	r0, #0
   18544:	movw	r3, #32340	; 0x7e54
   18548:	movt	r3, #1
   1854c:	push	{lr}		; (str lr, [sp, #-4]!)
   18550:	movw	lr, #31852	; 0x7c6c
   18554:	movt	lr, #1
   18558:	moveq	r0, r3
   1855c:	cmp	r1, #0
   18560:	movw	ip, #31804	; 0x7c3c
   18564:	movt	ip, #1
   18568:	moveq	r1, lr
   1856c:	cmp	r2, #0
   18570:	movw	r3, #49436	; 0xc11c
   18574:	movt	r3, #3
   18578:	moveq	r2, ip
   1857c:	str	r1, [r3]
   18580:	stmib	r3, {r0, r2}
   18584:	pop	{pc}		; (ldr pc, [sp], #4)
   18588:	cmp	r2, #0
   1858c:	ble	185a8 <__assert_fail@plt+0x747c>
   18590:	add	r2, r1, r2, lsl #2
   18594:	sub	r0, r0, #4
   18598:	ldr	r3, [r1], #4
   1859c:	cmp	r1, r2
   185a0:	str	r3, [r0, #4]!
   185a4:	bne	18598 <__assert_fail@plt+0x746c>
   185a8:	bx	lr
   185ac:	cmp	r2, #0
   185b0:	ble	185d0 <__assert_fail@plt+0x74a4>
   185b4:	lsl	r2, r2, #2
   185b8:	add	r0, r0, r2
   185bc:	add	r2, r1, r2
   185c0:	ldr	r3, [r2, #-4]!
   185c4:	cmp	r2, r1
   185c8:	str	r3, [r0, #-4]!
   185cc:	bne	185c0 <__assert_fail@plt+0x7494>
   185d0:	bx	lr
   185d4:	lsl	r3, r2, #2
   185d8:	add	r0, r0, r3
   185dc:	add	r1, r1, r3
   185e0:	b	185f4 <__assert_fail@plt+0x74c8>
   185e4:	ldr	ip, [r0, #-4]!
   185e8:	ldr	r3, [r1, #-4]!
   185ec:	cmp	ip, r3
   185f0:	bne	18604 <__assert_fail@plt+0x74d8>
   185f4:	subs	r2, r2, #1
   185f8:	bpl	185e4 <__assert_fail@plt+0x74b8>
   185fc:	mov	r0, #0
   18600:	bx	lr
   18604:	bhi	18610 <__assert_fail@plt+0x74e4>
   18608:	mvn	r0, #0
   1860c:	bx	lr
   18610:	mov	r0, #1
   18614:	bx	lr
   18618:	cmp	r1, #0
   1861c:	ble	1864c <__assert_fail@plt+0x7520>
   18620:	sub	r3, r1, #-1073741823	; 0xc0000001
   18624:	ldr	r2, [r0, r3, lsl #2]
   18628:	add	r0, r0, r3, lsl #2
   1862c:	cmp	r2, #0
   18630:	beq	18644 <__assert_fail@plt+0x7518>
   18634:	b	1864c <__assert_fail@plt+0x7520>
   18638:	ldr	r3, [r0, #-4]!
   1863c:	cmp	r3, #0
   18640:	bne	1864c <__assert_fail@plt+0x7520>
   18644:	subs	r1, r1, #1
   18648:	bne	18638 <__assert_fail@plt+0x750c>
   1864c:	clz	r0, r1
   18650:	lsr	r0, r0, #5
   18654:	bx	lr
   18658:	cmp	r1, #0
   1865c:	ble	18674 <__assert_fail@plt+0x7548>
   18660:	add	r1, r0, r1, lsl #2
   18664:	mov	r3, #0
   18668:	str	r3, [r1, #-4]!
   1866c:	cmp	r1, r0
   18670:	bne	18668 <__assert_fail@plt+0x753c>
   18674:	bx	lr
   18678:	cmp	r2, #0
   1867c:	subgt	r0, r0, #4
   18680:	addgt	r2, r1, r2, lsl #2
   18684:	ble	186ac <__assert_fail@plt+0x7580>
   18688:	ldr	ip, [r1], #4
   1868c:	adds	ip, ip, r3
   18690:	movcs	r3, #1
   18694:	movcc	r3, #0
   18698:	cmp	r1, r2
   1869c:	str	ip, [r0, #4]!
   186a0:	bne	18688 <__assert_fail@plt+0x755c>
   186a4:	mov	r0, r3
   186a8:	bx	lr
   186ac:	str	r4, [sp, #-8]!
   186b0:	str	lr, [sp, #4]
   186b4:	bl	180b4 <__assert_fail@plt+0x6f88>
   186b8:	cmp	r3, #0
   186bc:	ble	18714 <__assert_fail@plt+0x75e8>
   186c0:	add	r3, r1, r3, lsl #2
   186c4:	sub	r2, r2, #4
   186c8:	strd	r4, [sp, #-12]!
   186cc:	sub	r4, r0, #4
   186d0:	mov	r0, #0
   186d4:	str	lr, [sp, #8]
   186d8:	ldr	ip, [r1], #4
   186dc:	ldr	lr, [r2, #4]!
   186e0:	adds	ip, ip, r0
   186e4:	movcs	r5, #1
   186e8:	movcc	r5, #0
   186ec:	adds	ip, lr, ip
   186f0:	movcs	r0, #1
   186f4:	movcc	r0, #0
   186f8:	cmp	r1, r3
   186fc:	add	r0, r0, r5
   18700:	str	ip, [r4, #4]!
   18704:	bne	186d8 <__assert_fail@plt+0x75ac>
   18708:	ldrd	r4, [sp]
   1870c:	add	sp, sp, #8
   18710:	pop	{pc}		; (ldr pc, [sp], #4)
   18714:	mov	r0, #0
   18718:	bx	lr
   1871c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18720:	strd	r6, [sp, #8]
   18724:	ldr	r7, [sp, #24]
   18728:	str	r8, [sp, #16]
   1872c:	str	lr, [sp, #20]
   18730:	cmp	r2, r7
   18734:	blt	187d4 <__assert_fail@plt+0x76a8>
   18738:	cmp	r7, #0
   1873c:	movle	ip, #0
   18740:	ble	18788 <__assert_fail@plt+0x765c>
   18744:	add	r8, r1, r7, lsl #2
   18748:	sub	r3, r3, #4
   1874c:	mov	r5, r1
   18750:	sub	r6, r0, #4
   18754:	mov	ip, #0
   18758:	ldr	lr, [r5], #4
   1875c:	ldr	r4, [r3, #4]!
   18760:	adds	lr, lr, ip
   18764:	movcs	ip, #1
   18768:	movcc	ip, #0
   1876c:	adds	lr, r4, lr
   18770:	movcs	r4, #1
   18774:	movcc	r4, #0
   18778:	cmp	r5, r8
   1877c:	add	ip, r4, ip
   18780:	str	lr, [r6, #4]!
   18784:	bne	18758 <__assert_fail@plt+0x762c>
   18788:	cmp	r2, r7
   1878c:	ble	187bc <__assert_fail@plt+0x7690>
   18790:	lsl	r7, r7, #2
   18794:	add	r2, r1, r2, lsl #2
   18798:	add	r0, r0, r7
   1879c:	add	r1, r1, r7
   187a0:	ldr	r3, [r1], #4
   187a4:	adds	r3, r3, ip
   187a8:	movcs	ip, #1
   187ac:	movcc	ip, #0
   187b0:	cmp	r2, r1
   187b4:	str	r3, [r0], #4
   187b8:	bne	187a0 <__assert_fail@plt+0x7674>
   187bc:	ldrd	r4, [sp]
   187c0:	mov	r0, ip
   187c4:	ldrd	r6, [sp, #8]
   187c8:	ldr	r8, [sp, #16]
   187cc:	add	sp, sp, #20
   187d0:	pop	{pc}		; (ldr pc, [sp], #4)
   187d4:	movw	r1, #43800	; 0xab18
   187d8:	movt	r1, #2
   187dc:	ldr	r3, [pc, #12]	; 187f0 <__assert_fail@plt+0x76c4>
   187e0:	movw	r0, #44008	; 0xabe8
   187e4:	movt	r0, #2
   187e8:	mov	r2, #480	; 0x1e0
   187ec:	bl	1112c <__assert_fail@plt>
   187f0:	andeq	sl, r2, ip, lsl #17
   187f4:	ldr	r3, [r1, #4]
   187f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   187fc:	ldr	ip, [r2, #4]
   18800:	strd	r6, [sp, #8]
   18804:	ldr	r7, [r0]
   18808:	cmp	r3, #0
   1880c:	str	r8, [sp, #16]
   18810:	rsblt	r3, r3, #0
   18814:	str	lr, [sp, #20]
   18818:	sub	sp, sp, #8
   1881c:	cmp	ip, #0
   18820:	rsblt	ip, ip, #0
   18824:	cmp	r3, ip
   18828:	movge	r6, r3
   1882c:	movlt	r6, ip
   18830:	movge	r5, ip
   18834:	movlt	r5, r3
   18838:	movge	r4, r2
   1883c:	movlt	r4, r1
   18840:	movge	r8, r1
   18844:	movlt	r8, r2
   18848:	cmp	r7, r6
   1884c:	ble	18890 <__assert_fail@plt+0x7764>
   18850:	ldr	r7, [r0, #8]
   18854:	mov	r2, r6
   18858:	mov	r0, r7
   1885c:	ldr	r1, [r8, #8]
   18860:	ldr	r3, [r4, #8]
   18864:	str	r5, [sp]
   18868:	bl	1871c <__assert_fail@plt+0x75f0>
   1886c:	mov	r3, r0
   18870:	add	r0, r6, r0
   18874:	str	r3, [r7, r6, lsl #2]
   18878:	add	sp, sp, #8
   1887c:	ldrd	r4, [sp]
   18880:	ldrd	r6, [sp, #8]
   18884:	ldr	r8, [sp, #16]
   18888:	add	sp, sp, #20
   1888c:	pop	{pc}		; (ldr pc, [sp], #4)
   18890:	add	r1, r6, #1
   18894:	bl	17dc4 <__assert_fail@plt+0x6c98>
   18898:	mov	r7, r0
   1889c:	b	18854 <__assert_fail@plt+0x7728>
   188a0:	cmp	r2, #0
   188a4:	str	r4, [sp, #-8]!
   188a8:	subgt	r0, r0, #4
   188ac:	addgt	r2, r1, r2, lsl #2
   188b0:	str	lr, [sp, #4]
   188b4:	ble	188e8 <__assert_fail@plt+0x77bc>
   188b8:	ldr	ip, [r1], #4
   188bc:	sub	lr, ip, r3
   188c0:	cmp	r3, ip
   188c4:	movls	r3, #0
   188c8:	movhi	r3, #1
   188cc:	cmp	r1, r2
   188d0:	str	lr, [r0, #4]!
   188d4:	bne	188b8 <__assert_fail@plt+0x778c>
   188d8:	ldr	r4, [sp]
   188dc:	add	sp, sp, #4
   188e0:	mov	r0, r3
   188e4:	pop	{pc}		; (ldr pc, [sp], #4)
   188e8:	bl	181fc <__assert_fail@plt+0x70d0>
   188ec:	cmp	r3, #0
   188f0:	ble	18948 <__assert_fail@plt+0x781c>
   188f4:	add	r3, r1, r3, lsl #2
   188f8:	sub	r2, r2, #4
   188fc:	strd	r4, [sp, #-12]!
   18900:	sub	r4, r0, #4
   18904:	mov	r0, #0
   18908:	str	lr, [sp, #8]
   1890c:	ldr	ip, [r2, #4]!
   18910:	ldr	lr, [r1], #4
   18914:	adds	r0, ip, r0
   18918:	movcs	r5, #1
   1891c:	movcc	r5, #0
   18920:	sub	ip, lr, r0
   18924:	cmp	lr, r0
   18928:	movcs	r0, r5
   1892c:	addcc	r0, r5, #1
   18930:	cmp	r1, r3
   18934:	str	ip, [r4, #4]!
   18938:	bne	1890c <__assert_fail@plt+0x77e0>
   1893c:	ldrd	r4, [sp]
   18940:	add	sp, sp, #8
   18944:	pop	{pc}		; (ldr pc, [sp], #4)
   18948:	mov	r0, #0
   1894c:	bx	lr
   18950:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18954:	strd	r6, [sp, #8]
   18958:	ldr	r7, [sp, #32]
   1895c:	strd	r8, [sp, #16]
   18960:	str	sl, [sp, #24]
   18964:	str	lr, [sp, #28]
   18968:	cmp	r2, r7
   1896c:	blt	18a1c <__assert_fail@plt+0x78f0>
   18970:	cmp	r7, #0
   18974:	movle	ip, #0
   18978:	ble	189c0 <__assert_fail@plt+0x7894>
   1897c:	add	r8, r1, r7, lsl #2
   18980:	sub	r3, r3, #4
   18984:	mov	r4, r1
   18988:	sub	r6, r0, #4
   1898c:	mov	ip, #0
   18990:	ldr	lr, [r3, #4]!
   18994:	ldr	r5, [r4], #4
   18998:	adds	ip, lr, ip
   1899c:	movcs	r9, #1
   189a0:	movcc	r9, #0
   189a4:	sub	lr, r5, ip
   189a8:	cmp	r5, ip
   189ac:	movcs	ip, r9
   189b0:	addcc	ip, r9, #1
   189b4:	cmp	r4, r8
   189b8:	str	lr, [r6, #4]!
   189bc:	bne	18990 <__assert_fail@plt+0x7864>
   189c0:	cmp	r2, r7
   189c4:	ble	18a00 <__assert_fail@plt+0x78d4>
   189c8:	lsl	r7, r7, #2
   189cc:	mov	lr, ip
   189d0:	add	r2, r1, r2, lsl #2
   189d4:	add	r0, r0, r7
   189d8:	add	r1, r1, r7
   189dc:	ldr	r3, [r1], #4
   189e0:	cmp	r3, ip
   189e4:	sub	r4, r3, lr
   189e8:	movcs	ip, #0
   189ec:	movcc	ip, #1
   189f0:	cmp	r2, r1
   189f4:	mov	lr, ip
   189f8:	str	r4, [r0], #4
   189fc:	bne	189dc <__assert_fail@plt+0x78b0>
   18a00:	ldrd	r4, [sp]
   18a04:	mov	r0, ip
   18a08:	ldrd	r6, [sp, #8]
   18a0c:	ldrd	r8, [sp, #16]
   18a10:	ldr	sl, [sp, #24]
   18a14:	add	sp, sp, #28
   18a18:	pop	{pc}		; (ldr pc, [sp], #4)
   18a1c:	movw	r1, #43800	; 0xab18
   18a20:	movt	r1, #2
   18a24:	ldr	r3, [pc, #12]	; 18a38 <__assert_fail@plt+0x790c>
   18a28:	movw	r0, #44008	; 0xabe8
   18a2c:	movt	r0, #2
   18a30:	mov	r2, #532	; 0x214
   18a34:	bl	1112c <__assert_fail@plt>
   18a38:	muleq	r2, r4, r8
   18a3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a40:	eor	r4, r1, r1, asr #31
   18a44:	mov	r5, r3
   18a48:	strd	r6, [sp, #8]
   18a4c:	eor	r6, r3, r3, asr #31
   18a50:	mov	r7, r1
   18a54:	strd	r8, [sp, #16]
   18a58:	sub	r4, r4, r1, asr #31
   18a5c:	mov	r9, r2
   18a60:	strd	sl, [sp, #24]
   18a64:	sub	r6, r6, r3, asr #31
   18a68:	str	lr, [sp, #32]
   18a6c:	sub	sp, sp, #12
   18a70:	ldr	r8, [sp, #48]	; 0x30
   18a74:	cmp	r4, r6
   18a78:	ldr	r1, [r2]
   18a7c:	ldr	r2, [r8]
   18a80:	beq	18b84 <__assert_fail@plt+0x7a58>
   18a84:	bge	18b00 <__assert_fail@plt+0x79d4>
   18a88:	ldr	r3, [r0]
   18a8c:	cmp	r6, r3
   18a90:	bgt	18bcc <__assert_fail@plt+0x7aa0>
   18a94:	ldr	r7, [r0, #8]
   18a98:	mov	r3, r1
   18a9c:	mov	r0, r7
   18aa0:	str	r4, [sp]
   18aa4:	mov	r1, r2
   18aa8:	mov	r2, r6
   18aac:	bl	18950 <__assert_fail@plt+0x7824>
   18ab0:	cmp	r0, #0
   18ab4:	bne	18bec <__assert_fail@plt+0x7ac0>
   18ab8:	cmp	r5, #0
   18abc:	beq	18be4 <__assert_fail@plt+0x7ab8>
   18ac0:	sub	r3, r6, #-1073741823	; 0xc0000001
   18ac4:	ldr	r2, [r7, r3, lsl #2]
   18ac8:	add	r3, r7, r3, lsl #2
   18acc:	cmp	r2, #0
   18ad0:	rsbne	r4, r6, #0
   18ad4:	beq	18ae0 <__assert_fail@plt+0x79b4>
   18ad8:	b	18b64 <__assert_fail@plt+0x7a38>
   18adc:	mov	r6, r4
   18ae0:	subs	r4, r6, #1
   18ae4:	beq	18b64 <__assert_fail@plt+0x7a38>
   18ae8:	ldr	r2, [r3, #-4]!
   18aec:	cmp	r2, #0
   18af0:	beq	18adc <__assert_fail@plt+0x79b0>
   18af4:	rsb	r4, r6, #1
   18af8:	b	18b64 <__assert_fail@plt+0x7a38>
   18afc:	bls	18a88 <__assert_fail@plt+0x795c>
   18b00:	ldr	r3, [r0]
   18b04:	cmp	r4, r3
   18b08:	bgt	18bb4 <__assert_fail@plt+0x7a88>
   18b0c:	ldr	r5, [r0, #8]
   18b10:	mov	r3, r2
   18b14:	mov	r0, r5
   18b18:	str	r6, [sp]
   18b1c:	mov	r2, r4
   18b20:	bl	18950 <__assert_fail@plt+0x7824>
   18b24:	cmp	r0, #0
   18b28:	bne	18c08 <__assert_fail@plt+0x7adc>
   18b2c:	cmp	r7, #0
   18b30:	beq	18b60 <__assert_fail@plt+0x7a34>
   18b34:	sub	r3, r4, #-1073741823	; 0xc0000001
   18b38:	ldr	r2, [r5, r3, lsl #2]
   18b3c:	add	r3, r5, r3, lsl #2
   18b40:	cmp	r2, #0
   18b44:	beq	18b58 <__assert_fail@plt+0x7a2c>
   18b48:	b	18b64 <__assert_fail@plt+0x7a38>
   18b4c:	ldr	r2, [r3, #-4]!
   18b50:	cmp	r2, #0
   18b54:	bne	18b64 <__assert_fail@plt+0x7a38>
   18b58:	subs	r4, r4, #1
   18b5c:	bne	18b4c <__assert_fail@plt+0x7a20>
   18b60:	mov	r4, #0
   18b64:	mov	r0, r4
   18b68:	add	sp, sp, #12
   18b6c:	ldrd	r4, [sp]
   18b70:	ldrd	r6, [sp, #8]
   18b74:	ldrd	r8, [sp, #16]
   18b78:	ldrd	sl, [sp, #24]
   18b7c:	add	sp, sp, #32
   18b80:	pop	{pc}		; (ldr pc, [sp], #4)
   18b84:	lsl	ip, r4, #2
   18b88:	mov	r3, r4
   18b8c:	add	lr, r1, ip
   18b90:	add	ip, r2, ip
   18b94:	b	18ba8 <__assert_fail@plt+0x7a7c>
   18b98:	ldr	fp, [lr, #-4]!
   18b9c:	ldr	sl, [ip, #-4]!
   18ba0:	cmp	fp, sl
   18ba4:	bne	18afc <__assert_fail@plt+0x79d0>
   18ba8:	subs	r3, r3, #1
   18bac:	bcs	18b98 <__assert_fail@plt+0x7a6c>
   18bb0:	b	18b60 <__assert_fail@plt+0x7a34>
   18bb4:	mov	r1, r4
   18bb8:	bl	17dc4 <__assert_fail@plt+0x6c98>
   18bbc:	mov	r5, r0
   18bc0:	ldr	r2, [r8]
   18bc4:	ldr	r1, [r9]
   18bc8:	b	18b10 <__assert_fail@plt+0x79e4>
   18bcc:	mov	r1, r6
   18bd0:	bl	17dc4 <__assert_fail@plt+0x6c98>
   18bd4:	mov	r7, r0
   18bd8:	ldr	r2, [r8]
   18bdc:	ldr	r1, [r9]
   18be0:	b	18a98 <__assert_fail@plt+0x796c>
   18be4:	mov	r4, r5
   18be8:	b	18b64 <__assert_fail@plt+0x7a38>
   18bec:	movw	r1, #43800	; 0xab18
   18bf0:	movt	r1, #2
   18bf4:	ldr	r3, [pc, #40]	; 18c24 <__assert_fail@plt+0x7af8>
   18bf8:	movw	r0, #43988	; 0xabd4
   18bfc:	movt	r0, #2
   18c00:	movw	r2, #2012	; 0x7dc
   18c04:	bl	1112c <__assert_fail@plt>
   18c08:	movw	r1, #43800	; 0xab18
   18c0c:	movt	r1, #2
   18c10:	ldr	r3, [pc, #12]	; 18c24 <__assert_fail@plt+0x7af8>
   18c14:	movw	r0, #43988	; 0xabd4
   18c18:	movt	r0, #2
   18c1c:	movw	r2, #2006	; 0x7d6
   18c20:	bl	1112c <__assert_fail@plt>
   18c24:	muleq	r2, ip, r8
   18c28:	cmp	r2, #0
   18c2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18c30:	movgt	r4, r0
   18c34:	lsrgt	r5, r3, #16
   18c38:	movgt	r0, #0
   18c3c:	uxthgt	r3, r3
   18c40:	strd	r6, [sp, #8]
   18c44:	str	r8, [sp, #16]
   18c48:	str	lr, [sp, #20]
   18c4c:	ble	18cb4 <__assert_fail@plt+0x7b88>
   18c50:	ldr	ip, [r1], #4
   18c54:	lsr	r6, ip, #16
   18c58:	uxth	ip, ip
   18c5c:	mul	lr, r3, ip
   18c60:	mul	r7, r3, r6
   18c64:	mul	r6, r5, r6
   18c68:	mla	ip, r5, ip, r7
   18c6c:	add	ip, ip, lr, lsr #16
   18c70:	uxth	lr, lr
   18c74:	add	lr, lr, ip, lsl #16
   18c78:	cmp	r7, ip
   18c7c:	addhi	r6, r6, #65536	; 0x10000
   18c80:	adds	lr, r0, lr
   18c84:	movcs	r0, #1
   18c88:	movcc	r0, #0
   18c8c:	add	r0, r0, ip, lsr #16
   18c90:	subs	r2, r2, #1
   18c94:	str	lr, [r4], #4
   18c98:	add	r0, r0, r6
   18c9c:	bne	18c50 <__assert_fail@plt+0x7b24>
   18ca0:	ldrd	r4, [sp]
   18ca4:	ldrd	r6, [sp, #8]
   18ca8:	ldr	r8, [sp, #16]
   18cac:	add	sp, sp, #20
   18cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb4:	movw	r1, #43800	; 0xab18
   18cb8:	movt	r1, #2
   18cbc:	ldr	r3, [pc, #12]	; 18cd0 <__assert_fail@plt+0x7ba4>
   18cc0:	movw	r0, #44020	; 0xabf4
   18cc4:	movt	r0, #2
   18cc8:	movw	r2, #545	; 0x221
   18ccc:	bl	1112c <__assert_fail@plt>
   18cd0:	andeq	sl, r2, r8, lsr #17
   18cd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18cd8:	strd	r6, [sp, #8]
   18cdc:	strd	r8, [sp, #16]
   18ce0:	strd	sl, [sp, #24]
   18ce4:	subs	sl, r2, #0
   18ce8:	str	lr, [sp, #32]
   18cec:	sub	sp, sp, #4
   18cf0:	ldr	fp, [sp, #44]	; 0x2c
   18cf4:	beq	18e44 <__assert_fail@plt+0x7d18>
   18cf8:	mov	r6, r3
   18cfc:	mov	r7, r0
   18d00:	ldr	r3, [sp, #40]	; 0x28
   18d04:	sub	r5, sl, #1
   18d08:	mov	r9, r1
   18d0c:	ldrb	r2, [r1]
   18d10:	ldr	r0, [r3]
   18d14:	mov	r3, r5
   18d18:	udiv	r5, r5, r0
   18d1c:	mls	r5, r0, r5, r3
   18d20:	cmp	r5, #0
   18d24:	beq	18e20 <__assert_fail@plt+0x7cf4>
   18d28:	mov	r3, r1
   18d2c:	add	ip, r5, r1
   18d30:	ldrb	r1, [r3, #1]!
   18d34:	cmp	r3, ip
   18d38:	mla	r2, r2, r6, r1
   18d3c:	bne	18d30 <__assert_fail@plt+0x7c04>
   18d40:	add	r5, r5, #1
   18d44:	cmp	sl, r5
   18d48:	mov	r8, #1
   18d4c:	str	r2, [r7]
   18d50:	bls	18df8 <__assert_fail@plt+0x7ccc>
   18d54:	cmp	r0, #1
   18d58:	add	ip, r5, #1
   18d5c:	ldrb	r4, [r9, r5]
   18d60:	bls	18df0 <__assert_fail@plt+0x7cc4>
   18d64:	add	r1, r5, r0
   18d68:	add	r3, r9, ip
   18d6c:	add	r1, r9, r1
   18d70:	ldrb	r2, [r3], #1
   18d74:	cmp	r1, r3
   18d78:	mla	r4, r4, r6, r2
   18d7c:	bne	18d70 <__assert_fail@plt+0x7c44>
   18d80:	sub	r5, r0, #1
   18d84:	add	r5, r5, ip
   18d88:	mov	r2, r8
   18d8c:	mov	r1, r7
   18d90:	ldr	r3, [fp]
   18d94:	mov	r0, r7
   18d98:	bl	18c28 <__assert_fail@plt+0x7afc>
   18d9c:	lsl	ip, r8, #2
   18da0:	mov	r2, r7
   18da4:	add	r1, ip, r7
   18da8:	ldr	r3, [r2]
   18dac:	adds	r3, r3, r4
   18db0:	movcs	r4, #1
   18db4:	movcc	r4, #0
   18db8:	str	r3, [r2], #4
   18dbc:	cmp	r1, r2
   18dc0:	bne	18da8 <__assert_fail@plt+0x7c7c>
   18dc4:	adds	r0, r0, r4
   18dc8:	addne	r8, r8, #1
   18dcc:	strne	r0, [r7, ip]
   18dd0:	cmp	sl, r5
   18dd4:	bls	18df8 <__assert_fail@plt+0x7ccc>
   18dd8:	ldr	r3, [sp, #40]	; 0x28
   18ddc:	add	ip, r5, #1
   18de0:	ldrb	r4, [r9, r5]
   18de4:	ldr	r0, [r3]
   18de8:	cmp	r0, #1
   18dec:	bhi	18d64 <__assert_fail@plt+0x7c38>
   18df0:	mov	r5, ip
   18df4:	b	18d88 <__assert_fail@plt+0x7c5c>
   18df8:	cmp	sl, r5
   18dfc:	bne	18e28 <__assert_fail@plt+0x7cfc>
   18e00:	mov	r0, r8
   18e04:	add	sp, sp, #4
   18e08:	ldrd	r4, [sp]
   18e0c:	ldrd	r6, [sp, #8]
   18e10:	ldrd	r8, [sp, #16]
   18e14:	ldrd	sl, [sp, #24]
   18e18:	add	sp, sp, #32
   18e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e20:	mov	r5, #1
   18e24:	b	18d44 <__assert_fail@plt+0x7c18>
   18e28:	movw	r1, #43800	; 0xab18
   18e2c:	movt	r1, #2
   18e30:	ldr	r3, [pc, #40]	; 18e60 <__assert_fail@plt+0x7d34>
   18e34:	movw	r0, #44036	; 0xac04
   18e38:	movt	r0, #2
   18e3c:	movw	r2, #1394	; 0x572
   18e40:	bl	1112c <__assert_fail@plt>
   18e44:	movw	r1, #43800	; 0xab18
   18e48:	movt	r1, #2
   18e4c:	ldr	r3, [pc, #12]	; 18e60 <__assert_fail@plt+0x7d34>
   18e50:	movw	r0, #44028	; 0xabfc
   18e54:	movt	r0, #2
   18e58:	movw	r2, #1370	; 0x55a
   18e5c:	bl	1112c <__assert_fail@plt>
   18e60:			; <UNDEFINED> instruction: 0x0002a8b4
   18e64:	cmp	r2, #0
   18e68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18e6c:	movgt	r5, r0
   18e70:	movgt	r0, #0
   18e74:	strd	r6, [sp, #8]
   18e78:	lsrgt	r6, r3, #16
   18e7c:	uxthgt	r3, r3
   18e80:	str	r8, [sp, #16]
   18e84:	str	lr, [sp, #20]
   18e88:	ble	18f04 <__assert_fail@plt+0x7dd8>
   18e8c:	ldr	r4, [r1], #4
   18e90:	ldr	r8, [r5]
   18e94:	lsr	r7, r4, #16
   18e98:	uxth	r4, r4
   18e9c:	mul	lr, r3, r4
   18ea0:	mul	ip, r3, r7
   18ea4:	mul	r7, r6, r7
   18ea8:	mla	r4, r6, r4, ip
   18eac:	add	r4, r4, lr, lsr #16
   18eb0:	uxth	lr, lr
   18eb4:	cmp	ip, r4
   18eb8:	add	ip, lr, r4, lsl #16
   18ebc:	addhi	r7, r7, #65536	; 0x10000
   18ec0:	adds	ip, r0, ip
   18ec4:	movcs	r0, #1
   18ec8:	movcc	r0, #0
   18ecc:	add	r4, r0, r4, lsr #16
   18ed0:	adds	ip, ip, r8
   18ed4:	movcs	r0, #1
   18ed8:	movcc	r0, #0
   18edc:	add	r0, r0, r4
   18ee0:	subs	r2, r2, #1
   18ee4:	str	ip, [r5], #4
   18ee8:	add	r0, r0, r7
   18eec:	bne	18e8c <__assert_fail@plt+0x7d60>
   18ef0:	ldrd	r4, [sp]
   18ef4:	ldrd	r6, [sp, #8]
   18ef8:	ldr	r8, [sp, #16]
   18efc:	add	sp, sp, #20
   18f00:	pop	{pc}		; (ldr pc, [sp], #4)
   18f04:	movw	r1, #43800	; 0xab18
   18f08:	movt	r1, #2
   18f0c:	ldr	r3, [pc, #12]	; 18f20 <__assert_fail@plt+0x7df4>
   18f10:	movw	r0, #44020	; 0xabf4
   18f14:	movt	r0, #2
   18f18:	mov	r2, #568	; 0x238
   18f1c:	bl	1112c <__assert_fail@plt>
   18f20:	andeq	sl, r2, r8, asr #17
   18f24:	cmp	r2, #0
   18f28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18f2c:	movgt	r4, r0
   18f30:	lsrgt	r5, r3, #16
   18f34:	movgt	r0, #0
   18f38:	uxthgt	r3, r3
   18f3c:	strd	r6, [sp, #8]
   18f40:	str	r8, [sp, #16]
   18f44:	str	lr, [sp, #20]
   18f48:	ble	18fc4 <__assert_fail@plt+0x7e98>
   18f4c:	ldr	lr, [r1], #4
   18f50:	lsr	r6, lr, #16
   18f54:	uxth	lr, lr
   18f58:	mul	ip, r3, lr
   18f5c:	mul	r7, r3, r6
   18f60:	mul	r6, r5, r6
   18f64:	mla	lr, r5, lr, r7
   18f68:	add	lr, lr, ip, lsr #16
   18f6c:	uxth	ip, ip
   18f70:	cmp	r7, lr
   18f74:	ldr	r7, [r4]
   18f78:	add	ip, ip, lr, lsl #16
   18f7c:	addhi	r6, r6, #65536	; 0x10000
   18f80:	adds	ip, r0, ip
   18f84:	movcs	r0, #1
   18f88:	movcc	r0, #0
   18f8c:	add	lr, r0, lr, lsr #16
   18f90:	subs	r7, r7, ip
   18f94:	movcc	r0, #1
   18f98:	movcs	r0, #0
   18f9c:	add	ip, r0, lr
   18fa0:	subs	r2, r2, #1
   18fa4:	str	r7, [r4], #4
   18fa8:	add	r0, ip, r6
   18fac:	bne	18f4c <__assert_fail@plt+0x7e20>
   18fb0:	ldrd	r4, [sp]
   18fb4:	ldrd	r6, [sp, #8]
   18fb8:	ldr	r8, [sp, #16]
   18fbc:	add	sp, sp, #20
   18fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fc4:	movw	r1, #43800	; 0xab18
   18fc8:	movt	r1, #2
   18fcc:	ldr	r3, [pc, #12]	; 18fe0 <__assert_fail@plt+0x7eb4>
   18fd0:	movw	r0, #44020	; 0xabf4
   18fd4:	movt	r0, #2
   18fd8:	movw	r2, #594	; 0x252
   18fdc:	bl	1112c <__assert_fail@plt>
   18fe0:	ldrdeq	sl, [r2], -r8
   18fe4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18fe8:	ldr	r4, [sp, #32]
   18fec:	strd	r6, [sp, #8]
   18ff0:	strd	r8, [sp, #16]
   18ff4:	str	sl, [sp, #24]
   18ff8:	str	lr, [sp, #28]
   18ffc:	cmp	r2, r4
   19000:	blt	190e8 <__assert_fail@plt+0x7fbc>
   19004:	cmp	r4, #0
   19008:	ble	190cc <__assert_fail@plt+0x7fa0>
   1900c:	mov	r6, r3
   19010:	add	r3, r2, r4
   19014:	add	r3, r0, r3, lsl #2
   19018:	mov	r7, r2
   1901c:	mov	sl, r0
   19020:	mov	r9, r1
   19024:	cmp	r3, r1
   19028:	bhi	190a4 <__assert_fail@plt+0x7f78>
   1902c:	cmp	r3, r6
   19030:	bls	19040 <__assert_fail@plt+0x7f14>
   19034:	add	r3, r6, r4, lsl #2
   19038:	cmp	sl, r3
   1903c:	bcc	19104 <__assert_fail@plt+0x7fd8>
   19040:	mov	r2, r7
   19044:	mov	r1, r9
   19048:	lsl	r8, r7, #2
   1904c:	mov	r0, sl
   19050:	ldr	r3, [r6]
   19054:	bl	18c28 <__assert_fail@plt+0x7afc>
   19058:	subs	r4, r4, #1
   1905c:	add	r5, sl, r8
   19060:	str	r0, [sl, r7, lsl #2]
   19064:	beq	1908c <__assert_fail@plt+0x7f60>
   19068:	rsb	r8, r8, #4
   1906c:	add	r0, r8, r5
   19070:	mov	r2, r7
   19074:	ldr	r3, [r6, #4]!
   19078:	mov	r1, r9
   1907c:	bl	18e64 <__assert_fail@plt+0x7d38>
   19080:	subs	r4, r4, #1
   19084:	str	r0, [r5, #4]!
   19088:	bne	1906c <__assert_fail@plt+0x7f40>
   1908c:	ldrd	r4, [sp]
   19090:	ldrd	r6, [sp, #8]
   19094:	ldrd	r8, [sp, #16]
   19098:	ldr	sl, [sp, #24]
   1909c:	add	sp, sp, #28
   190a0:	pop	{pc}		; (ldr pc, [sp], #4)
   190a4:	add	r2, r1, r2, lsl #2
   190a8:	cmp	r0, r2
   190ac:	bcs	1902c <__assert_fail@plt+0x7f00>
   190b0:	movw	r1, #43800	; 0xab18
   190b4:	movt	r1, #2
   190b8:	ldr	r3, [pc, #96]	; 19120 <__assert_fail@plt+0x7ff4>
   190bc:	movw	r0, #44064	; 0xac20
   190c0:	movt	r0, #2
   190c4:	mov	r2, #620	; 0x26c
   190c8:	bl	1112c <__assert_fail@plt>
   190cc:	movw	r1, #43800	; 0xab18
   190d0:	movt	r1, #2
   190d4:	ldr	r3, [pc, #68]	; 19120 <__assert_fail@plt+0x7ff4>
   190d8:	movw	r0, #44056	; 0xac18
   190dc:	movt	r0, #2
   190e0:	movw	r2, #619	; 0x26b
   190e4:	bl	1112c <__assert_fail@plt>
   190e8:	movw	r1, #43800	; 0xab18
   190ec:	movt	r1, #2
   190f0:	ldr	r3, [pc, #40]	; 19120 <__assert_fail@plt+0x7ff4>
   190f4:	movw	r0, #44044	; 0xac0c
   190f8:	movt	r0, #2
   190fc:	movw	r2, #618	; 0x26a
   19100:	bl	1112c <__assert_fail@plt>
   19104:	movw	r1, #43800	; 0xab18
   19108:	movt	r1, #2
   1910c:	ldr	r3, [pc, #12]	; 19120 <__assert_fail@plt+0x7ff4>
   19110:	movw	r0, #44104	; 0xac48
   19114:	movt	r0, #2
   19118:	movw	r2, #621	; 0x26d
   1911c:	bl	1112c <__assert_fail@plt>
   19120:	andeq	sl, r2, r8, ror #17
   19124:	mov	ip, r3
   19128:	push	{lr}		; (str lr, [sp, #-4]!)
   1912c:	sub	sp, sp, #12
   19130:	mov	r3, r2
   19134:	mov	r2, ip
   19138:	str	ip, [sp]
   1913c:	bl	18fe4 <__assert_fail@plt+0x7eb8>
   19140:	add	sp, sp, #12
   19144:	pop	{pc}		; (ldr pc, [sp], #4)
   19148:	push	{lr}		; (str lr, [sp, #-4]!)
   1914c:	sub	sp, sp, #12
   19150:	mov	r3, r1
   19154:	str	r2, [sp]
   19158:	bl	18fe4 <__assert_fail@plt+0x7eb8>
   1915c:	add	sp, sp, #12
   19160:	pop	{pc}		; (ldr pc, [sp], #4)
   19164:	cmp	r2, #0
   19168:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1916c:	strd	r6, [sp, #8]
   19170:	str	r8, [sp, #16]
   19174:	str	lr, [sp, #20]
   19178:	ble	191f0 <__assert_fail@plt+0x80c4>
   1917c:	cmp	r3, #0
   19180:	beq	19228 <__assert_fail@plt+0x80fc>
   19184:	cmp	r3, #31
   19188:	bhi	1920c <__assert_fail@plt+0x80e0>
   1918c:	lsl	r8, r2, #2
   19190:	rsb	r6, r3, #32
   19194:	subs	r2, r2, #1
   19198:	add	ip, r1, r8
   1919c:	add	r7, r0, r8
   191a0:	ldr	lr, [ip, #-4]
   191a4:	sub	ip, ip, #4
   191a8:	lsr	r0, lr, r6
   191ac:	lsl	lr, lr, r3
   191b0:	beq	191d8 <__assert_fail@plt+0x80ac>
   191b4:	mov	r4, r7
   191b8:	ldr	r1, [ip, #-4]!
   191bc:	subs	r2, r2, #1
   191c0:	orr	r5, lr, r1, lsr r6
   191c4:	lsl	lr, r1, r3
   191c8:	str	r5, [r4, #-4]!
   191cc:	bne	191b8 <__assert_fail@plt+0x808c>
   191d0:	rsb	r3, r8, #4
   191d4:	add	r7, r7, r3
   191d8:	ldrd	r4, [sp]
   191dc:	ldr	r8, [sp, #16]
   191e0:	str	lr, [r7, #-4]
   191e4:	ldrd	r6, [sp, #8]
   191e8:	add	sp, sp, #20
   191ec:	pop	{pc}		; (ldr pc, [sp], #4)
   191f0:	movw	r1, #43800	; 0xab18
   191f4:	movt	r1, #2
   191f8:	ldr	r3, [pc, #68]	; 19244 <__assert_fail@plt+0x8118>
   191fc:	movw	r0, #44020	; 0xabf4
   19200:	movt	r0, #2
   19204:	movw	r2, #659	; 0x293
   19208:	bl	1112c <__assert_fail@plt>
   1920c:	movw	r1, #43800	; 0xab18
   19210:	movt	r1, #2
   19214:	ldr	r3, [pc, #40]	; 19244 <__assert_fail@plt+0x8118>
   19218:	movw	r0, #44156	; 0xac7c
   1921c:	movt	r0, #2
   19220:	movw	r2, #661	; 0x295
   19224:	bl	1112c <__assert_fail@plt>
   19228:	movw	r1, #43800	; 0xab18
   1922c:	movt	r1, #2
   19230:	ldr	r3, [pc, #12]	; 19244 <__assert_fail@plt+0x8118>
   19234:	movw	r0, #44144	; 0xac70
   19238:	movt	r0, #2
   1923c:	mov	r2, #660	; 0x294
   19240:	bl	1112c <__assert_fail@plt>
   19244:	strdeq	sl, [r2], -r0
   19248:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1924c:	mov	r5, r2
   19250:	ldr	r4, [r3]
   19254:	strd	r6, [sp, #8]
   19258:	mov	r7, r3
   1925c:	mov	r6, r0
   19260:	strd	r8, [sp, #16]
   19264:	strd	sl, [sp, #24]
   19268:	str	lr, [sp, #32]
   1926c:	sub	sp, sp, #12
   19270:	cmp	r4, #0
   19274:	beq	192ac <__assert_fail@plt+0x8180>
   19278:	cmp	r0, #0
   1927c:	beq	193a0 <__assert_fail@plt+0x8274>
   19280:	lsl	sl, r2, #2
   19284:	mov	r3, #0
   19288:	mov	r8, r0
   1928c:	str	r3, [sp]
   19290:	mov	r3, r4
   19294:	mov	r2, r5
   19298:	mov	r0, r8
   1929c:	bl	19164 <__assert_fail@plt+0x8038>
   192a0:	mov	r4, r0
   192a4:	mov	r1, r8
   192a8:	b	192b8 <__assert_fail@plt+0x818c>
   192ac:	lsl	sl, r2, #2
   192b0:	mov	r8, r4
   192b4:	str	r4, [sp]
   192b8:	add	r1, r1, sl
   192bc:	ldr	ip, [r7, #4]
   192c0:	ldr	r9, [r7, #12]
   192c4:	lsr	sl, r9, #16
   192c8:	uxth	r9, r9
   192cc:	b	19340 <__assert_fail@plt+0x8214>
   192d0:	mul	r4, r9, lr
   192d4:	uxth	r0, r3
   192d8:	mul	lr, sl, lr
   192dc:	mla	r2, sl, r2, r4
   192e0:	add	r3, r2, r3, lsr #16
   192e4:	cmp	r4, r3
   192e8:	ldr	r4, [r1, #-4]!
   192ec:	add	r0, r0, r3, lsl #16
   192f0:	addhi	lr, lr, #65536	; 0x10000
   192f4:	add	r3, fp, r3, lsr #16
   192f8:	adds	r0, r4, r0
   192fc:	movcs	r2, #1
   19300:	movcc	r2, #0
   19304:	add	r3, r3, r2
   19308:	add	r3, r3, lr
   1930c:	mls	r2, r3, ip, r4
   19310:	cmp	r0, r2
   19314:	movcs	r0, #0
   19318:	movcc	r0, #1
   1931c:	rsb	r4, r0, #0
   19320:	sub	r3, r3, r0
   19324:	and	r4, r4, ip
   19328:	add	r4, r4, r2
   1932c:	cmp	ip, r4
   19330:	addls	r3, r3, #1
   19334:	subls	r4, r4, ip
   19338:	cmp	r6, #0
   1933c:	strne	r3, [r6, r5, lsl #2]
   19340:	uxth	r2, r4
   19344:	subs	r5, r5, #1
   19348:	lsr	lr, r4, #16
   1934c:	add	fp, r4, #1
   19350:	mul	r3, r9, r2
   19354:	bpl	192d0 <__assert_fail@plt+0x81a4>
   19358:	ldr	r2, [sp]
   1935c:	cmp	r2, #0
   19360:	beq	1937c <__assert_fail@plt+0x8250>
   19364:	movw	r3, #49436	; 0xc11c
   19368:	movt	r3, #3
   1936c:	lsl	r1, r2, #2
   19370:	mov	r0, r8
   19374:	ldr	r3, [r3, #8]
   19378:	blx	r3
   1937c:	ldr	r0, [r7]
   19380:	lsr	r0, r4, r0
   19384:	add	sp, sp, #12
   19388:	ldrd	r4, [sp]
   1938c:	ldrd	r6, [sp, #8]
   19390:	ldrd	r8, [sp, #16]
   19394:	ldrd	sl, [sp, #24]
   19398:	add	sp, sp, #32
   1939c:	pop	{pc}		; (ldr pc, [sp], #4)
   193a0:	lsl	sl, r2, #2
   193a4:	movw	r3, #49436	; 0xc11c
   193a8:	movt	r3, #3
   193ac:	ldr	r3, [r3, #4]
   193b0:	mov	r0, sl
   193b4:	str	r2, [sp]
   193b8:	str	r1, [sp, #4]
   193bc:	blx	r3
   193c0:	mov	r8, r0
   193c4:	ldr	r4, [r7]
   193c8:	ldr	r1, [sp, #4]
   193cc:	b	19290 <__assert_fail@plt+0x8164>
   193d0:	cmp	r2, #0
   193d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   193d8:	strd	r6, [sp, #8]
   193dc:	str	r8, [sp, #16]
   193e0:	str	lr, [sp, #20]
   193e4:	ble	19450 <__assert_fail@plt+0x8324>
   193e8:	cmp	r3, #0
   193ec:	beq	19488 <__assert_fail@plt+0x835c>
   193f0:	cmp	r3, #31
   193f4:	bhi	1946c <__assert_fail@plt+0x8340>
   193f8:	ldr	r4, [r1], #4
   193fc:	rsb	r8, r3, #32
   19400:	subs	ip, r2, #1
   19404:	mov	r7, r0
   19408:	lsl	r0, r4, r8
   1940c:	lsr	r4, r4, r3
   19410:	beq	19438 <__assert_fail@plt+0x830c>
   19414:	mov	r5, r7
   19418:	ldr	lr, [r1], #4
   1941c:	subs	ip, ip, #1
   19420:	orr	r6, r4, lr, lsl r8
   19424:	lsr	r4, lr, r3
   19428:	str	r6, [r5], #4
   1942c:	bne	19418 <__assert_fail@plt+0x82ec>
   19430:	sub	r2, r2, #-1073741823	; 0xc0000001
   19434:	add	r7, r7, r2, lsl #2
   19438:	ldr	r8, [sp, #16]
   1943c:	str	r4, [r7]
   19440:	ldrd	r4, [sp]
   19444:	ldrd	r6, [sp, #8]
   19448:	add	sp, sp, #20
   1944c:	pop	{pc}		; (ldr pc, [sp], #4)
   19450:	movw	r1, #43800	; 0xab18
   19454:	movt	r1, #2
   19458:	ldr	r3, [pc, #68]	; 194a4 <__assert_fail@plt+0x8378>
   1945c:	movw	r0, #44020	; 0xabf4
   19460:	movt	r0, #2
   19464:	movw	r2, #689	; 0x2b1
   19468:	bl	1112c <__assert_fail@plt>
   1946c:	movw	r1, #43800	; 0xab18
   19470:	movt	r1, #2
   19474:	ldr	r3, [pc, #40]	; 194a4 <__assert_fail@plt+0x8378>
   19478:	movw	r0, #44156	; 0xac7c
   1947c:	movt	r0, #2
   19480:	movw	r2, #691	; 0x2b3
   19484:	bl	1112c <__assert_fail@plt>
   19488:	movw	r1, #43800	; 0xab18
   1948c:	movt	r1, #2
   19490:	ldr	r3, [pc, #12]	; 194a4 <__assert_fail@plt+0x8378>
   19494:	movw	r0, #44144	; 0xac70
   19498:	movt	r0, #2
   1949c:	movw	r2, #690	; 0x2b2
   194a0:	bl	1112c <__assert_fail@plt>
   194a4:	strdeq	sl, [r2], -ip
   194a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   194ac:	strd	r6, [sp, #8]
   194b0:	strd	r8, [sp, #16]
   194b4:	strd	sl, [sp, #24]
   194b8:	mov	fp, r3
   194bc:	str	lr, [sp, #32]
   194c0:	sub	sp, sp, #44	; 0x2c
   194c4:	ldr	r3, [sp, #80]	; 0x50
   194c8:	str	r0, [sp, #8]
   194cc:	str	r1, [sp, #16]
   194d0:	ldr	r4, [sp, #84]	; 0x54
   194d4:	cmp	r3, #0
   194d8:	beq	19a44 <__assert_fail@plt+0x8918>
   194dc:	ldr	r3, [sp, #80]	; 0x50
   194e0:	mov	r5, r2
   194e4:	cmp	r3, r2
   194e8:	bgt	19a60 <__assert_fail@plt+0x8934>
   194ec:	ldr	r3, [sp, #80]	; 0x50
   194f0:	cmp	r3, #1
   194f4:	beq	19854 <__assert_fail@plt+0x8728>
   194f8:	ldr	r3, [sp, #80]	; 0x50
   194fc:	cmp	r3, #2
   19500:	beq	19868 <__assert_fail@plt+0x873c>
   19504:	ldr	r3, [sp, #80]	; 0x50
   19508:	sub	r0, r3, #-1073741823	; 0xc0000001
   1950c:	ldr	r3, [r4, #4]
   19510:	lsl	r6, r0, #2
   19514:	str	r0, [sp, #24]
   19518:	ldr	r0, [fp, r0, lsl #2]
   1951c:	cmp	r3, r0
   19520:	bne	19a98 <__assert_fail@plt+0x896c>
   19524:	sub	r6, r6, #4
   19528:	ldr	ip, [r4, #8]
   1952c:	ldr	r0, [fp, r6]
   19530:	cmp	ip, r0
   19534:	bne	19a7c <__assert_fail@plt+0x8950>
   19538:	cmp	r3, #0
   1953c:	bge	19aec <__assert_fail@plt+0x89c0>
   19540:	ldr	r3, [r4]
   19544:	cmp	r3, #0
   19548:	str	r3, [sp, #20]
   1954c:	bne	19760 <__assert_fail@plt+0x8634>
   19550:	ldr	r0, [sp, #20]
   19554:	ldr	r3, [sp, #80]	; 0x50
   19558:	cmp	r3, #2
   1955c:	ldr	r3, [r4, #12]
   19560:	ble	19ab4 <__assert_fail@plt+0x8988>
   19564:	ldr	r2, [sp, #24]
   19568:	ldr	r9, [fp, r6]
   1956c:	ldr	r2, [fp, r2, lsl #2]
   19570:	subs	ip, r2, #0
   19574:	bge	19ad0 <__assert_fail@plt+0x89a4>
   19578:	lsr	r1, r3, #16
   1957c:	ldr	r2, [sp, #80]	; 0x50
   19580:	uxth	r3, r3
   19584:	str	fp, [sp, #4]
   19588:	mov	fp, ip
   1958c:	str	r1, [sp, #28]
   19590:	ldr	r1, [sp, #16]
   19594:	str	r3, [sp, #36]	; 0x24
   19598:	lsr	r3, r9, #16
   1959c:	sub	r2, r5, r2
   195a0:	sub	r5, r5, #1
   195a4:	str	r2, [sp, #12]
   195a8:	str	r3, [sp, #32]
   195ac:	add	r5, r1, r5, lsl #2
   195b0:	add	r7, r1, r2, lsl #2
   195b4:	b	1972c <__assert_fail@plt+0x8600>
   195b8:	lsr	r4, r0, #16
   195bc:	ldr	r6, [sp, #28]
   195c0:	uxth	r2, r0
   195c4:	ldr	r3, [sp, #36]	; 0x24
   195c8:	ldr	sl, [r5]
   195cc:	mul	r1, r3, r4
   195d0:	mul	ip, r3, r2
   195d4:	mul	r3, r6, r4
   195d8:	mla	r2, r6, r2, r1
   195dc:	add	r2, r2, ip, lsr #16
   195e0:	uxth	ip, ip
   195e4:	add	ip, ip, r2, lsl #16
   195e8:	cmp	r1, r2
   195ec:	sub	r1, lr, fp
   195f0:	add	r6, r0, r2, lsr #16
   195f4:	addhi	r3, r3, #65536	; 0x10000
   195f8:	uxth	r0, r9
   195fc:	adds	ip, lr, ip
   19600:	ldr	r2, [sp, #80]	; 0x50
   19604:	movcs	r4, #1
   19608:	movcc	r4, #0
   1960c:	add	r4, r4, r6
   19610:	ldr	r6, [sp, #32]
   19614:	cmp	r9, sl
   19618:	subhi	r1, r1, #1
   1961c:	add	r4, r4, r3
   19620:	sub	sl, sl, r9
   19624:	uxth	r3, r4
   19628:	lsr	lr, r4, #16
   1962c:	mls	r1, r4, fp, r1
   19630:	add	r4, r4, #1
   19634:	sub	r2, r2, #2
   19638:	mul	r8, r3, r6
   1963c:	mul	r3, r3, r0
   19640:	mla	r0, lr, r0, r8
   19644:	mul	lr, lr, r6
   19648:	add	r0, r0, r3, lsr #16
   1964c:	uxth	r3, r3
   19650:	add	r3, r3, r0, lsl #16
   19654:	cmp	r8, r0
   19658:	sub	r1, r1, r0, lsr #16
   1965c:	addhi	lr, lr, #65536	; 0x10000
   19660:	cmp	sl, r3
   19664:	subcc	r1, r1, #1
   19668:	sub	r3, sl, r3
   1966c:	sub	r1, r1, lr
   19670:	cmp	ip, r1
   19674:	movhi	ip, #0
   19678:	movls	ip, #1
   1967c:	rsb	sl, ip, #0
   19680:	sub	r4, r4, ip
   19684:	and	r6, r9, sl
   19688:	and	r8, fp, sl
   1968c:	adds	r6, r3, r6
   19690:	add	r1, r8, r1
   19694:	movcs	r8, #1
   19698:	movcc	r8, #0
   1969c:	add	r8, r8, r1
   196a0:	mov	sl, r6
   196a4:	cmp	fp, r8
   196a8:	bhi	196d8 <__assert_fail@plt+0x85ac>
   196ac:	movcc	r3, #1
   196b0:	movcs	r3, #0
   196b4:	cmp	r9, r6
   196b8:	orrls	r3, r3, #1
   196bc:	cmp	r3, #0
   196c0:	beq	197bc <__assert_fail@plt+0x8690>
   196c4:	cmp	r9, r6
   196c8:	subhi	r8, r8, #1
   196cc:	add	r4, r4, #1
   196d0:	sub	r8, r8, fp
   196d4:	sub	sl, r6, r9
   196d8:	mov	r0, r7
   196dc:	mov	r3, r4
   196e0:	ldr	r1, [sp, #4]
   196e4:	bl	18f24 <__assert_fail@plt+0x7df8>
   196e8:	cmp	r0, sl
   196ec:	sub	sl, sl, r0
   196f0:	movls	r6, #0
   196f4:	movhi	r6, #1
   196f8:	cmp	r6, r8
   196fc:	sub	r7, r7, #4
   19700:	str	sl, [r5]
   19704:	sub	r0, r8, r6
   19708:	bhi	1976c <__assert_fail@plt+0x8640>
   1970c:	ldr	r3, [sp, #8]
   19710:	cmp	r3, #0
   19714:	ldrne	r2, [sp, #12]
   19718:	strne	r4, [r3, r2, lsl #2]
   1971c:	ldr	r3, [sp, #12]
   19720:	subs	r3, r3, #1
   19724:	str	r3, [sp, #12]
   19728:	bmi	197e8 <__assert_fail@plt+0x86bc>
   1972c:	ldr	lr, [r5], #-4
   19730:	cmp	fp, r0
   19734:	cmpeq	r9, lr
   19738:	bne	195b8 <__assert_fail@plt+0x848c>
   1973c:	mov	r0, r7
   19740:	mvn	r3, #0
   19744:	ldr	r1, [sp, #4]
   19748:	mvn	r4, #0
   1974c:	sub	r7, r7, #4
   19750:	ldr	r2, [sp, #80]	; 0x50
   19754:	bl	18f24 <__assert_fail@plt+0x7df8>
   19758:	ldr	r0, [r5, #4]
   1975c:	b	1970c <__assert_fail@plt+0x85e0>
   19760:	ldr	r0, [sp, #16]
   19764:	bl	19164 <__assert_fail@plt+0x8038>
   19768:	b	19554 <__assert_fail@plt+0x8428>
   1976c:	ldr	r3, [sp, #4]
   19770:	mov	r2, r7
   19774:	sub	ip, r3, #4
   19778:	mov	r3, #0
   1977c:	ldr	r1, [r2, #4]!
   19780:	ldr	lr, [ip, #4]!
   19784:	adds	r3, r1, r3
   19788:	movcs	r1, #1
   1978c:	movcc	r1, #0
   19790:	adds	lr, lr, r3
   19794:	movcs	r3, #1
   19798:	movcc	r3, #0
   1979c:	cmp	r5, r2
   197a0:	add	r3, r3, r1
   197a4:	str	lr, [r2]
   197a8:	bne	1977c <__assert_fail@plt+0x8650>
   197ac:	add	r6, fp, r0
   197b0:	sub	r4, r4, #1
   197b4:	add	r0, r3, r6
   197b8:	b	1970c <__assert_fail@plt+0x85e0>
   197bc:	mov	r3, r4
   197c0:	mov	r0, r7
   197c4:	ldr	r1, [sp, #4]
   197c8:	bl	18f24 <__assert_fail@plt+0x7df8>
   197cc:	sub	r3, r6, r0
   197d0:	sub	r7, r7, #4
   197d4:	cmp	r6, r0
   197d8:	movcs	r0, r8
   197dc:	subcc	r0, r8, #1
   197e0:	str	r3, [r5]
   197e4:	b	1970c <__assert_fail@plt+0x85e0>
   197e8:	ldr	r3, [sp, #20]
   197ec:	ldr	r2, [sp, #24]
   197f0:	cmp	r3, #0
   197f4:	ldr	r3, [sp, #16]
   197f8:	str	r0, [r3, r2, lsl #2]
   197fc:	bne	1981c <__assert_fail@plt+0x86f0>
   19800:	add	sp, sp, #44	; 0x2c
   19804:	ldrd	r4, [sp]
   19808:	ldrd	r6, [sp, #8]
   1980c:	ldrd	r8, [sp, #16]
   19810:	ldrd	sl, [sp, #24]
   19814:	add	sp, sp, #32
   19818:	pop	{pc}		; (ldr pc, [sp], #4)
   1981c:	ldr	r1, [sp, #16]
   19820:	ldr	r3, [sp, #20]
   19824:	ldr	r2, [sp, #80]	; 0x50
   19828:	mov	r0, r1
   1982c:	bl	193d0 <__assert_fail@plt+0x82a4>
   19830:	cmp	r0, #0
   19834:	beq	19800 <__assert_fail@plt+0x86d4>
   19838:	movw	r1, #43800	; 0xab18
   1983c:	movt	r1, #2
   19840:	ldr	r3, [pc, #760]	; 19b40 <__assert_fail@plt+0x8a14>
   19844:	movw	r0, #43988	; 0xabd4
   19848:	movt	r0, #2
   1984c:	movw	r2, #1138	; 0x472
   19850:	bl	1112c <__assert_fail@plt>
   19854:	mov	r3, r4
   19858:	bl	19248 <__assert_fail@plt+0x811c>
   1985c:	ldr	r3, [sp, #16]
   19860:	str	r0, [r3]
   19864:	b	19800 <__assert_fail@plt+0x86d4>
   19868:	cmp	r2, #1
   1986c:	ble	19b08 <__assert_fail@plt+0x89dc>
   19870:	ldm	r4, {r3, r6}
   19874:	ldr	r7, [r4, #12]
   19878:	ldr	r4, [r4, #8]
   1987c:	cmp	r3, #0
   19880:	str	r3, [sp, #24]
   19884:	uxth	r8, r7
   19888:	lsr	r7, r7, #16
   1988c:	bne	19a34 <__assert_fail@plt+0x8908>
   19890:	ldr	lr, [sp, #24]
   19894:	sub	r3, r5, #-1073741823	; 0xc0000001
   19898:	sub	r5, r5, #2
   1989c:	lsr	fp, r4, #16
   198a0:	ldr	r2, [sp, #8]
   198a4:	add	r5, r2, r5, lsl #2
   198a8:	uxth	r2, r4
   198ac:	str	r2, [sp, #20]
   198b0:	ldr	r2, [sp, #16]
   198b4:	ldr	ip, [r2, r3, lsl #2]
   198b8:	add	r3, r2, r3, lsl #2
   198bc:	str	r3, [sp, #4]
   198c0:	ldr	r3, [sp, #4]
   198c4:	lsr	r0, lr, #16
   198c8:	uxth	r1, lr
   198cc:	mul	r9, r8, r0
   198d0:	mul	sl, r7, r0
   198d4:	ldr	r2, [r3, #-4]!
   198d8:	str	r3, [sp, #4]
   198dc:	mul	r3, r8, r1
   198e0:	mla	r1, r7, r1, r9
   198e4:	add	r1, r1, r3, lsr #16
   198e8:	uxth	r3, r3
   198ec:	add	r3, r3, r1, lsl #16
   198f0:	cmp	r9, r1
   198f4:	sub	r9, r2, r4
   198f8:	addhi	sl, sl, #65536	; 0x10000
   198fc:	add	lr, lr, r1, lsr #16
   19900:	adds	r3, r3, ip
   19904:	movcs	r0, #1
   19908:	movcc	r0, #0
   1990c:	add	r0, r0, lr
   19910:	ldr	lr, [sp, #20]
   19914:	cmp	r4, r2
   19918:	movls	r2, r6
   1991c:	addhi	r2, r6, #1
   19920:	add	r0, r0, sl
   19924:	sub	r2, ip, r2
   19928:	str	r3, [sp, #12]
   1992c:	uxth	r1, r0
   19930:	lsr	ip, r0, #16
   19934:	mls	r2, r0, r6, r2
   19938:	add	r0, r0, #1
   1993c:	mul	sl, r1, fp
   19940:	mul	r3, ip, fp
   19944:	mul	r1, lr, r1
   19948:	mla	ip, lr, ip, sl
   1994c:	add	ip, ip, r1, lsr #16
   19950:	uxth	r1, r1
   19954:	cmp	sl, ip
   19958:	add	r1, r1, ip, lsl #16
   1995c:	sub	r2, r2, ip, lsr #16
   19960:	movhi	lr, r3
   19964:	addhi	r3, lr, #65536	; 0x10000
   19968:	cmp	r9, r1
   1996c:	subcc	r2, r2, #1
   19970:	sub	r1, r9, r1
   19974:	sub	lr, r2, r3
   19978:	ldr	r3, [sp, #12]
   1997c:	cmp	r3, lr
   19980:	movhi	r3, #0
   19984:	movls	r3, #1
   19988:	rsb	r2, r3, #0
   1998c:	sub	r0, r0, r3
   19990:	and	ip, r4, r2
   19994:	and	r3, r6, r2
   19998:	adds	ip, r1, ip
   1999c:	add	lr, r3, lr
   199a0:	movcs	r3, #1
   199a4:	movcc	r3, #0
   199a8:	add	lr, r3, lr
   199ac:	cmp	r6, lr
   199b0:	bhi	199e0 <__assert_fail@plt+0x88b4>
   199b4:	movcc	r3, #1
   199b8:	movcs	r3, #0
   199bc:	cmp	r4, ip
   199c0:	orrls	r3, r3, #1
   199c4:	cmp	r3, #0
   199c8:	beq	199e0 <__assert_fail@plt+0x88b4>
   199cc:	cmp	r4, ip
   199d0:	subhi	lr, lr, #1
   199d4:	add	r0, r0, #1
   199d8:	sub	lr, lr, r6
   199dc:	sub	ip, ip, r4
   199e0:	ldr	r3, [sp, #8]
   199e4:	cmp	r3, #0
   199e8:	ldr	r3, [sp, #8]
   199ec:	strne	r0, [r5]
   199f0:	cmp	r3, r5
   199f4:	sub	r5, r5, #4
   199f8:	bne	198c0 <__assert_fail@plt+0x8794>
   199fc:	ldr	r3, [sp, #24]
   19a00:	cmp	r3, #0
   19a04:	beq	19a28 <__assert_fail@plt+0x88fc>
   19a08:	rsb	r3, r3, #32
   19a0c:	mvn	r2, #0
   19a10:	ands	r2, ip, r2, lsr r3
   19a14:	bne	19b24 <__assert_fail@plt+0x89f8>
   19a18:	ldr	r2, [sp, #24]
   19a1c:	lsl	r3, lr, r3
   19a20:	lsr	lr, lr, r2
   19a24:	orr	ip, r3, ip, lsr r2
   19a28:	ldr	r3, [sp, #16]
   19a2c:	stm	r3, {ip, lr}
   19a30:	b	19800 <__assert_fail@plt+0x86d4>
   19a34:	ldr	r0, [sp, #16]
   19a38:	bl	19164 <__assert_fail@plt+0x8038>
   19a3c:	mov	lr, r0
   19a40:	b	19894 <__assert_fail@plt+0x8768>
   19a44:	movw	r1, #43800	; 0xab18
   19a48:	movt	r1, #2
   19a4c:	ldr	r3, [pc, #236]	; 19b40 <__assert_fail@plt+0x8a14>
   19a50:	movw	r0, #44176	; 0xac90
   19a54:	movt	r0, #2
   19a58:	movw	r2, #1113	; 0x459
   19a5c:	bl	1112c <__assert_fail@plt>
   19a60:	movw	r1, #43800	; 0xab18
   19a64:	movt	r1, #2
   19a68:	ldr	r3, [pc, #208]	; 19b40 <__assert_fail@plt+0x8a14>
   19a6c:	movw	r0, #44184	; 0xac98
   19a70:	movt	r0, #2
   19a74:	movw	r2, #1114	; 0x45a
   19a78:	bl	1112c <__assert_fail@plt>
   19a7c:	movw	r1, #43800	; 0xab18
   19a80:	movt	r1, #2
   19a84:	ldr	r3, [pc, #180]	; 19b40 <__assert_fail@plt+0x8a14>
   19a88:	movw	r0, #44280	; 0xacf8
   19a8c:	movt	r0, #2
   19a90:	movw	r2, #1126	; 0x466
   19a94:	bl	1112c <__assert_fail@plt>
   19a98:	movw	r1, #43800	; 0xab18
   19a9c:	movt	r1, #2
   19aa0:	ldr	r3, [pc, #152]	; 19b40 <__assert_fail@plt+0x8a14>
   19aa4:	movw	r0, #44260	; 0xace4
   19aa8:	movt	r0, #2
   19aac:	movw	r2, #1125	; 0x465
   19ab0:	bl	1112c <__assert_fail@plt>
   19ab4:	movw	r1, #43800	; 0xab18
   19ab8:	movt	r1, #2
   19abc:	ldr	r3, [pc, #128]	; 19b44 <__assert_fail@plt+0x8a18>
   19ac0:	movw	r0, #44336	; 0xad30
   19ac4:	movt	r0, #2
   19ac8:	movw	r2, #1057	; 0x421
   19acc:	bl	1112c <__assert_fail@plt>
   19ad0:	movw	r1, #43800	; 0xab18
   19ad4:	movt	r1, #2
   19ad8:	ldr	r3, [pc, #100]	; 19b44 <__assert_fail@plt+0x8a18>
   19adc:	movw	r0, #44344	; 0xad38
   19ae0:	movt	r0, #2
   19ae4:	movw	r2, #1063	; 0x427
   19ae8:	bl	1112c <__assert_fail@plt>
   19aec:	movw	r1, #43800	; 0xab18
   19af0:	movt	r1, #2
   19af4:	ldr	r3, [pc, #68]	; 19b40 <__assert_fail@plt+0x8a14>
   19af8:	movw	r0, #44300	; 0xad0c
   19afc:	movt	r0, #2
   19b00:	movw	r2, #1127	; 0x467
   19b04:	bl	1112c <__assert_fail@plt>
   19b08:	movw	r1, #43800	; 0xab18
   19b0c:	movt	r1, #2
   19b10:	ldr	r3, [pc, #48]	; 19b48 <__assert_fail@plt+0x8a1c>
   19b14:	movw	r0, #44196	; 0xaca4
   19b18:	movt	r0, #2
   19b1c:	movw	r2, #1009	; 0x3f1
   19b20:	bl	1112c <__assert_fail@plt>
   19b24:	movw	r1, #43800	; 0xab18
   19b28:	movt	r1, #2
   19b2c:	ldr	r3, [pc, #20]	; 19b48 <__assert_fail@plt+0x8a1c>
   19b30:	movw	r0, #44204	; 0xacac
   19b34:	movt	r0, #2
   19b38:	movw	r2, #1036	; 0x40c
   19b3c:	bl	1112c <__assert_fail@plt>
   19b40:	andeq	sl, r2, r8, lsl #18
   19b44:	andeq	sl, r2, r0, lsr r9
   19b48:	andeq	sl, r2, ip, lsl r9
   19b4c:	lsr	r3, r1, #5
   19b50:	mov	r2, r0
   19b54:	and	ip, r1, #31
   19b58:	mov	r1, #0
   19b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   19b60:	sub	sp, sp, #12
   19b64:	ldr	r0, [r0, r3, lsl #2]
   19b68:	mvn	lr, #0
   19b6c:	str	r1, [sp]
   19b70:	mov	r1, r3
   19b74:	and	r0, r0, lr, lsl ip
   19b78:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   19b7c:	add	sp, sp, #12
   19b80:	pop	{pc}		; (ldr pc, [sp], #4)
   19b84:	lsr	r3, r1, #5
   19b88:	mov	r2, r0
   19b8c:	and	r1, r1, #31
   19b90:	push	{lr}		; (str lr, [sp, #-4]!)
   19b94:	mvn	lr, #0
   19b98:	sub	sp, sp, #12
   19b9c:	ldr	r0, [r0, r3, lsl #2]
   19ba0:	lsl	ip, lr, r1
   19ba4:	mov	r1, r3
   19ba8:	str	lr, [sp]
   19bac:	bic	r0, ip, r0
   19bb0:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   19bb4:	add	sp, sp, #12
   19bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bbc:	subs	r2, r2, #1
   19bc0:	bmi	19bdc <__assert_fail@plt+0x8ab0>
   19bc4:	ldr	r3, [r1], #4
   19bc8:	sub	r2, r2, #1
   19bcc:	cmn	r2, #1
   19bd0:	mvn	r3, r3
   19bd4:	str	r3, [r0], #4
   19bd8:	bne	19bc4 <__assert_fail@plt+0x8a98>
   19bdc:	bx	lr
   19be0:	strd	r4, [sp, #-12]!
   19be4:	ldr	r5, [r1]
   19be8:	str	lr, [sp, #8]
   19bec:	cmp	r5, #0
   19bf0:	bne	19c74 <__assert_fail@plt+0x8b48>
   19bf4:	sub	r3, r2, #1
   19bf8:	str	r5, [r0]
   19bfc:	cmp	r3, #0
   19c00:	beq	19c64 <__assert_fail@plt+0x8b38>
   19c04:	add	ip, r1, #4
   19c08:	add	lr, r0, #4
   19c0c:	b	19c1c <__assert_fail@plt+0x8af0>
   19c10:	subs	r3, r4, #0
   19c14:	str	r2, [lr], #4
   19c18:	beq	19c64 <__assert_fail@plt+0x8b38>
   19c1c:	mov	r1, ip
   19c20:	ldr	r2, [ip], #4
   19c24:	mov	r0, lr
   19c28:	sub	r4, r3, #1
   19c2c:	cmp	r2, #0
   19c30:	beq	19c10 <__assert_fail@plt+0x8ae4>
   19c34:	rsb	r2, r2, #0
   19c38:	subs	r3, r3, #2
   19c3c:	add	r1, r1, #4
   19c40:	str	r2, [r0], #4
   19c44:	bmi	19c60 <__assert_fail@plt+0x8b34>
   19c48:	ldr	r2, [r1], #4
   19c4c:	sub	r3, r3, #1
   19c50:	cmn	r3, #1
   19c54:	mvn	r2, r2
   19c58:	str	r2, [r0], #4
   19c5c:	bne	19c48 <__assert_fail@plt+0x8b1c>
   19c60:	mov	r5, #1
   19c64:	mov	r0, r5
   19c68:	ldrd	r4, [sp]
   19c6c:	add	sp, sp, #8
   19c70:	pop	{pc}		; (ldr pc, [sp], #4)
   19c74:	mov	r3, r2
   19c78:	mov	r2, r5
   19c7c:	b	19c34 <__assert_fail@plt+0x8b08>
   19c80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19c84:	strd	r6, [sp, #8]
   19c88:	mov	r7, r0
   19c8c:	strd	r8, [sp, #16]
   19c90:	ldr	r8, [r1, #4]
   19c94:	strd	sl, [sp, #24]
   19c98:	str	lr, [sp, #32]
   19c9c:	sub	sp, sp, #12
   19ca0:	cmp	r2, #0
   19ca4:	cmpne	r8, #0
   19ca8:	moveq	r3, #0
   19cac:	streq	r3, [r0, #4]
   19cb0:	beq	19dd0 <__assert_fail@plt+0x8ca4>
   19cb4:	mov	r6, r2
   19cb8:	mov	r9, r1
   19cbc:	add	fp, r6, #31
   19cc0:	mov	r2, r3
   19cc4:	lsr	sl, fp, #5
   19cc8:	cmp	sl, #0
   19ccc:	mov	r4, sl
   19cd0:	beq	19ea4 <__assert_fail@plt+0x8d78>
   19cd4:	ldr	r3, [r0]
   19cd8:	cmp	r3, sl
   19cdc:	blt	19dec <__assert_fail@plt+0x8cc0>
   19ce0:	ldr	r5, [r0, #8]
   19ce4:	bic	r3, fp, #31
   19ce8:	eor	fp, r8, r8, asr #31
   19cec:	cmp	r8, #0
   19cf0:	sub	r6, r3, r6
   19cf4:	movle	r0, #0
   19cf8:	sub	fp, fp, r8, asr #31
   19cfc:	mvn	r3, #0
   19d00:	movgt	r0, #1
   19d04:	lsr	r6, r3, r6
   19d08:	cmp	sl, fp
   19d0c:	ble	19d58 <__assert_fail@plt+0x8c2c>
   19d10:	cmp	r2, r0
   19d14:	beq	19e34 <__assert_fail@plt+0x8d08>
   19d18:	sub	r3, fp, #-1073741823	; 0xc0000001
   19d1c:	cmp	r9, r7
   19d20:	lsl	r0, r3, #2
   19d24:	add	ip, r5, r0
   19d28:	beq	19e04 <__assert_fail@plt+0x8cd8>
   19d2c:	ldr	r3, [r9, #8]
   19d30:	add	r0, r0, #4
   19d34:	sub	r2, r5, #4
   19d38:	add	r0, r0, r3
   19d3c:	ldr	r1, [r3], #4
   19d40:	cmp	r3, r0
   19d44:	str	r1, [r2, #4]!
   19d48:	bne	19d3c <__assert_fail@plt+0x8c10>
   19d4c:	mov	r4, fp
   19d50:	ldr	r2, [ip]
   19d54:	b	19da4 <__assert_fail@plt+0x8c78>
   19d58:	cmp	r9, r7
   19d5c:	ldr	fp, [r9, #8]
   19d60:	beq	19d8c <__assert_fail@plt+0x8c60>
   19d64:	cmp	sl, #1
   19d68:	beq	19d8c <__assert_fail@plt+0x8c60>
   19d6c:	add	lr, fp, sl, lsl #2
   19d70:	sub	r3, fp, #4
   19d74:	sub	r1, r5, #4
   19d78:	sub	lr, lr, #8
   19d7c:	ldr	ip, [r3, #4]!
   19d80:	cmp	lr, r3
   19d84:	str	ip, [r1, #4]!
   19d88:	bne	19d7c <__assert_fail@plt+0x8c50>
   19d8c:	sub	r9, sl, #-1073741823	; 0xc0000001
   19d90:	cmp	r2, r0
   19d94:	ldr	r2, [fp, r9, lsl #2]
   19d98:	and	r2, r2, r6
   19d9c:	str	r2, [r5, r9, lsl #2]
   19da0:	beq	19e10 <__assert_fail@plt+0x8ce4>
   19da4:	sub	r3, r4, #-1073741823	; 0xc0000001
   19da8:	add	r3, r5, r3, lsl #2
   19dac:	b	19db4 <__assert_fail@plt+0x8c88>
   19db0:	ldr	r2, [r3, #-4]!
   19db4:	cmp	r2, #0
   19db8:	bne	19dc4 <__assert_fail@plt+0x8c98>
   19dbc:	subs	r4, r4, #1
   19dc0:	bne	19db0 <__assert_fail@plt+0x8c84>
   19dc4:	cmp	r8, #0
   19dc8:	rsblt	r4, r4, #0
   19dcc:	str	r4, [r7, #4]
   19dd0:	add	sp, sp, #12
   19dd4:	ldrd	r4, [sp]
   19dd8:	ldrd	r6, [sp, #8]
   19ddc:	ldrd	r8, [sp, #16]
   19de0:	ldrd	sl, [sp, #24]
   19de4:	add	sp, sp, #32
   19de8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dec:	mov	r1, sl
   19df0:	str	r2, [sp, #4]
   19df4:	bl	17dc4 <__assert_fail@plt+0x6c98>
   19df8:	mov	r5, r0
   19dfc:	ldr	r2, [sp, #4]
   19e00:	b	19ce4 <__assert_fail@plt+0x8bb8>
   19e04:	mov	r4, fp
   19e08:	ldr	r2, [r5, r3, lsl #2]
   19e0c:	b	19da4 <__assert_fail@plt+0x8c78>
   19e10:	mov	r2, sl
   19e14:	mov	r1, r5
   19e18:	mov	r0, r5
   19e1c:	rsb	r8, r8, #0
   19e20:	bl	19be0 <__assert_fail@plt+0x8ab4>
   19e24:	ldr	r2, [r5, r9, lsl #2]
   19e28:	and	r2, r2, r6
   19e2c:	str	r2, [r5, r9, lsl #2]
   19e30:	b	19da4 <__assert_fail@plt+0x8c78>
   19e34:	mov	r2, fp
   19e38:	mov	r0, r5
   19e3c:	ldr	r1, [r9, #8]
   19e40:	bl	19be0 <__assert_fail@plt+0x8ab4>
   19e44:	cmp	r0, #0
   19e48:	beq	19e88 <__assert_fail@plt+0x8d5c>
   19e4c:	sub	r2, sl, #1
   19e50:	mvn	r3, #0
   19e54:	cmp	fp, r2
   19e58:	bge	19e74 <__assert_fail@plt+0x8d48>
   19e5c:	add	r2, r5, sl, lsl #2
   19e60:	add	fp, r5, fp, lsl #2
   19e64:	sub	r2, r2, #4
   19e68:	str	r3, [fp], #4
   19e6c:	cmp	r2, fp
   19e70:	bne	19e68 <__assert_fail@plt+0x8d3c>
   19e74:	sub	sl, sl, #-1073741823	; 0xc0000001
   19e78:	rsb	r8, r8, #0
   19e7c:	mov	r2, r6
   19e80:	str	r6, [r5, sl, lsl #2]
   19e84:	b	19da4 <__assert_fail@plt+0x8c78>
   19e88:	movw	r1, #43800	; 0xab18
   19e8c:	movt	r1, #2
   19e90:	ldr	r3, [pc, #40]	; 19ec0 <__assert_fail@plt+0x8d94>
   19e94:	movw	r0, #43988	; 0xabd4
   19e98:	movt	r0, #2
   19e9c:	movw	r2, #2443	; 0x98b
   19ea0:	bl	1112c <__assert_fail@plt>
   19ea4:	movw	r1, #43800	; 0xab18
   19ea8:	movt	r1, #2
   19eac:	ldr	r3, [pc, #12]	; 19ec0 <__assert_fail@plt+0x8d94>
   19eb0:	movw	r0, #44376	; 0xad58
   19eb4:	movt	r0, #2
   19eb8:	movw	r2, #2427	; 0x97b
   19ebc:	bl	1112c <__assert_fail@plt>
   19ec0:	andeq	sl, r2, r0, asr #18
   19ec4:	strd	r4, [sp, #-16]!
   19ec8:	mvn	r4, r0
   19ecc:	uxth	r3, r0
   19ed0:	mov	ip, r0
   19ed4:	movw	r2, #65535	; 0xffff
   19ed8:	str	r6, [sp, #8]
   19edc:	str	lr, [sp, #12]
   19ee0:	lsr	lr, r0, #16
   19ee4:	udiv	r0, r4, lr
   19ee8:	mls	r4, lr, r0, r4
   19eec:	mul	lr, r0, r3
   19ef0:	orr	r3, r2, r4, lsl #16
   19ef4:	cmp	r3, lr
   19ef8:	bcs	19f28 <__assert_fail@plt+0x8dfc>
   19efc:	adds	r3, ip, r3
   19f00:	movcs	r2, #1
   19f04:	movcc	r2, #0
   19f08:	eor	r2, r2, #1
   19f0c:	cmp	lr, r3
   19f10:	movls	r2, #0
   19f14:	andhi	r2, r2, #1
   19f18:	cmp	r2, #0
   19f1c:	subeq	r0, r0, #1
   19f20:	subne	r0, r0, #2
   19f24:	addne	r3, r3, ip
   19f28:	sub	r3, r3, lr
   19f2c:	movw	r2, #65535	; 0xffff
   19f30:	lsr	lr, r3, #16
   19f34:	add	r2, r2, r3, lsl #16
   19f38:	mla	r3, r0, lr, r3
   19f3c:	lsr	r4, r3, #16
   19f40:	add	lr, r4, #1
   19f44:	mls	r2, lr, ip, r2
   19f48:	cmp	r2, r3, lsl #16
   19f4c:	movcs	lr, r4
   19f50:	addcs	r2, r2, ip
   19f54:	add	r0, lr, r0, lsl #16
   19f58:	cmp	r2, ip
   19f5c:	subcs	r2, r2, ip
   19f60:	addcs	r0, r0, #1
   19f64:	cmp	r1, #0
   19f68:	beq	19fc4 <__assert_fail@plt+0x8e98>
   19f6c:	mvn	r2, r2
   19f70:	adds	r2, r1, r2
   19f74:	bcc	19f8c <__assert_fail@plt+0x8e60>
   19f78:	cmp	ip, r2
   19f7c:	sub	r2, r2, ip
   19f80:	subhi	r0, r0, #1
   19f84:	subls	r0, r0, #2
   19f88:	subls	r2, r2, ip
   19f8c:	lsr	r3, r1, #16
   19f90:	uxth	r5, r0
   19f94:	uxth	r4, r1
   19f98:	lsr	lr, r0, #16
   19f9c:	mul	r6, r5, r4
   19fa0:	mul	r5, r5, r3
   19fa4:	mul	r3, lr, r3
   19fa8:	mla	lr, lr, r4, r5
   19fac:	add	lr, lr, r6, lsr #16
   19fb0:	cmp	r5, lr
   19fb4:	addhi	r3, r3, #65536	; 0x10000
   19fb8:	add	r3, r3, lr, lsr #16
   19fbc:	adds	r2, r2, r3
   19fc0:	bcs	19fd4 <__assert_fail@plt+0x8ea8>
   19fc4:	ldrd	r4, [sp]
   19fc8:	ldr	r6, [sp, #8]
   19fcc:	add	sp, sp, #12
   19fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd4:	uxth	r6, r6
   19fd8:	sub	r0, r0, #1
   19fdc:	add	r6, r6, lr, lsl #16
   19fe0:	cmp	r1, r6
   19fe4:	movcs	r1, #0
   19fe8:	movcc	r1, #1
   19fec:	cmp	ip, r2
   19ff0:	movne	r1, #0
   19ff4:	movcs	r3, r1
   19ff8:	orrcc	r3, r1, #1
   19ffc:	sub	r0, r0, r3
   1a000:	b	19fc4 <__assert_fail@plt+0x8e98>
   1a004:	cmp	r1, #0
   1a008:	str	r4, [sp, #-8]!
   1a00c:	str	lr, [sp, #4]
   1a010:	beq	1a070 <__assert_fail@plt+0x8f44>
   1a014:	ands	r2, r1, #-16777216	; 0xff000000
   1a018:	mov	r4, r0
   1a01c:	mov	r3, r1
   1a020:	movne	r2, #0
   1a024:	bne	1a038 <__assert_fail@plt+0x8f0c>
   1a028:	lsl	r3, r3, #8
   1a02c:	add	r2, r2, #8
   1a030:	tst	r3, #-16777216	; 0xff000000
   1a034:	beq	1a028 <__assert_fail@plt+0x8efc>
   1a038:	cmp	r3, #0
   1a03c:	blt	1a04c <__assert_fail@plt+0x8f20>
   1a040:	lsls	r3, r3, #1
   1a044:	add	r2, r2, #1
   1a048:	bpl	1a040 <__assert_fail@plt+0x8f14>
   1a04c:	lsl	r3, r1, r2
   1a050:	mov	r1, #0
   1a054:	mov	r0, r3
   1a058:	strd	r2, [r4]
   1a05c:	bl	19ec4 <__assert_fail@plt+0x8d98>
   1a060:	str	r0, [r4, #12]
   1a064:	ldr	r4, [sp]
   1a068:	add	sp, sp, #4
   1a06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a070:	movw	r1, #43800	; 0xab18
   1a074:	movt	r1, #2
   1a078:	ldr	r3, [pc, #12]	; 1a08c <__assert_fail@plt+0x8f60>
   1a07c:	movw	r0, #44384	; 0xad60
   1a080:	movt	r0, #2
   1a084:	movw	r2, #902	; 0x386
   1a088:	bl	1112c <__assert_fail@plt>
   1a08c:	andeq	sl, r2, r0, asr r9
   1a090:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a094:	mov	r5, r0
   1a098:	strd	r6, [sp, #8]
   1a09c:	mov	r6, r2
   1a0a0:	mov	r7, r3
   1a0a4:	strd	r8, [sp, #16]
   1a0a8:	str	sl, [sp, #24]
   1a0ac:	str	lr, [sp, #28]
   1a0b0:	sub	sp, sp, #32
   1a0b4:	mov	r0, sp
   1a0b8:	ldr	sl, [sp, #64]	; 0x40
   1a0bc:	ldr	r9, [sp, #68]	; 0x44
   1a0c0:	bl	1a004 <__assert_fail@plt+0x8ed8>
   1a0c4:	cmp	r9, #1
   1a0c8:	movle	r0, r5
   1a0cc:	movle	r4, #0
   1a0d0:	bgt	1a130 <__assert_fail@plt+0x9004>
   1a0d4:	mov	r2, sp
   1a0d8:	ldr	r1, [sl]
   1a0dc:	bl	17c9c <__assert_fail@plt+0x6b70>
   1a0e0:	add	r0, r4, r0
   1a0e4:	cmp	r0, #1
   1a0e8:	bls	1a114 <__assert_fail@plt+0x8fe8>
   1a0ec:	sub	ip, r0, #2
   1a0f0:	sub	r3, r5, #1
   1a0f4:	add	ip, r5, ip, lsr #1
   1a0f8:	add	r5, r5, r0
   1a0fc:	ldrb	r2, [r3, #1]!
   1a100:	ldrb	r1, [r5, #-1]!
   1a104:	cmp	r3, ip
   1a108:	strb	r1, [r3]
   1a10c:	strb	r2, [r5]
   1a110:	bne	1a0fc <__assert_fail@plt+0x8fd0>
   1a114:	add	sp, sp, #32
   1a118:	ldrd	r4, [sp]
   1a11c:	ldrd	r6, [sp, #8]
   1a120:	ldrd	r8, [sp, #16]
   1a124:	ldr	sl, [sp, #24]
   1a128:	add	sp, sp, #28
   1a12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a130:	mov	r4, #0
   1a134:	add	r0, sp, #16
   1a138:	ldr	r1, [r7]
   1a13c:	mov	r8, r4
   1a140:	rsb	r7, r5, #1
   1a144:	bl	1a004 <__assert_fail@plt+0x8ed8>
   1a148:	mov	r2, r9
   1a14c:	add	r3, sp, #16
   1a150:	mov	r1, sl
   1a154:	mov	r0, sl
   1a158:	bl	19248 <__assert_fail@plt+0x811c>
   1a15c:	sub	r3, r9, #-1073741823	; 0xc0000001
   1a160:	mov	r1, r0
   1a164:	ldr	r3, [sl, r3, lsl #2]
   1a168:	add	r0, r5, r4
   1a16c:	mov	r2, sp
   1a170:	cmp	r3, #0
   1a174:	subeq	r9, r9, #1
   1a178:	bl	17c9c <__assert_fail@plt+0x6b70>
   1a17c:	ldr	r3, [r6]
   1a180:	add	r4, r4, r0
   1a184:	cmp	r0, r3
   1a188:	bcs	1a1b0 <__assert_fail@plt+0x9084>
   1a18c:	sub	r0, r0, r5
   1a190:	add	r3, r5, r4
   1a194:	sub	r0, r0, r4
   1a198:	add	r4, r7, r3
   1a19c:	strb	r8, [r3], #1
   1a1a0:	add	r2, r3, r0
   1a1a4:	ldr	r1, [r6]
   1a1a8:	cmp	r1, r2
   1a1ac:	bhi	1a198 <__assert_fail@plt+0x906c>
   1a1b0:	cmp	r9, #1
   1a1b4:	bne	1a148 <__assert_fail@plt+0x901c>
   1a1b8:	add	r0, r5, r4
   1a1bc:	b	1a0d4 <__assert_fail@plt+0x8fa8>
   1a1c0:	cmp	r2, #0
   1a1c4:	str	r4, [sp, #-8]!
   1a1c8:	str	lr, [sp, #4]
   1a1cc:	beq	1a314 <__assert_fail@plt+0x91e8>
   1a1d0:	cmp	r2, #1
   1a1d4:	beq	1a270 <__assert_fail@plt+0x9144>
   1a1d8:	cmp	r2, #2
   1a1dc:	mov	r4, r0
   1a1e0:	beq	1a284 <__assert_fail@plt+0x9158>
   1a1e4:	sub	r2, r2, #-1073741823	; 0xc0000001
   1a1e8:	ldr	ip, [r1, r2, lsl #2]
   1a1ec:	add	r1, r1, r2, lsl #2
   1a1f0:	ldr	lr, [r1, #-4]
   1a1f4:	cmp	ip, #0
   1a1f8:	beq	1a34c <__assert_fail@plt+0x9220>
   1a1fc:	ands	r2, ip, #-16777216	; 0xff000000
   1a200:	moveq	r3, ip
   1a204:	bne	1a2e4 <__assert_fail@plt+0x91b8>
   1a208:	lsl	r3, r3, #8
   1a20c:	add	r2, r2, #8
   1a210:	tst	r3, #-16777216	; 0xff000000
   1a214:	beq	1a208 <__assert_fail@plt+0x90dc>
   1a218:	cmp	r3, #0
   1a21c:	blt	1a22c <__assert_fail@plt+0x9100>
   1a220:	lsls	r3, r3, #1
   1a224:	add	r2, r2, #1
   1a228:	bpl	1a220 <__assert_fail@plt+0x90f4>
   1a22c:	cmp	r2, #0
   1a230:	str	r2, [r4]
   1a234:	beq	1a250 <__assert_fail@plt+0x9124>
   1a238:	ldr	r3, [r1, #-8]
   1a23c:	rsb	r1, r2, #32
   1a240:	lsr	r0, lr, r1
   1a244:	orr	ip, r0, ip, lsl r2
   1a248:	lsr	r3, r3, r1
   1a24c:	orr	lr, r3, lr, lsl r2
   1a250:	mov	r1, lr
   1a254:	mov	r0, ip
   1a258:	stmib	r4, {ip, lr}
   1a25c:	bl	19ec4 <__assert_fail@plt+0x8d98>
   1a260:	str	r0, [r4, #12]
   1a264:	ldr	r4, [sp]
   1a268:	add	sp, sp, #4
   1a26c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a270:	ldr	r4, [sp]
   1a274:	ldr	r1, [r1]
   1a278:	ldr	lr, [sp, #4]
   1a27c:	add	sp, sp, #8
   1a280:	b	1a004 <__assert_fail@plt+0x8ed8>
   1a284:	ldr	lr, [r1]
   1a288:	ldr	ip, [r1, #4]
   1a28c:	cmp	ip, #0
   1a290:	beq	1a330 <__assert_fail@plt+0x9204>
   1a294:	ands	r2, ip, #-16777216	; 0xff000000
   1a298:	moveq	r3, ip
   1a29c:	bne	1a300 <__assert_fail@plt+0x91d4>
   1a2a0:	lsl	r3, r3, #8
   1a2a4:	add	r2, r2, #8
   1a2a8:	tst	r3, #-16777216	; 0xff000000
   1a2ac:	beq	1a2a0 <__assert_fail@plt+0x9174>
   1a2b0:	cmp	r3, #0
   1a2b4:	blt	1a2c4 <__assert_fail@plt+0x9198>
   1a2b8:	lsls	r3, r3, #1
   1a2bc:	add	r2, r2, #1
   1a2c0:	bpl	1a2b8 <__assert_fail@plt+0x918c>
   1a2c4:	cmp	r2, #0
   1a2c8:	str	r2, [r4]
   1a2cc:	beq	1a250 <__assert_fail@plt+0x9124>
   1a2d0:	lsl	ip, ip, r2
   1a2d4:	rsb	r3, r2, #32
   1a2d8:	orr	ip, ip, lr, lsr r3
   1a2dc:	lsl	lr, lr, r2
   1a2e0:	b	1a250 <__assert_fail@plt+0x9124>
   1a2e4:	cmp	ip, #0
   1a2e8:	movge	r3, ip
   1a2ec:	movge	r2, #0
   1a2f0:	bge	1a220 <__assert_fail@plt+0x90f4>
   1a2f4:	mov	r3, #0
   1a2f8:	str	r3, [r4]
   1a2fc:	b	1a250 <__assert_fail@plt+0x9124>
   1a300:	cmp	ip, #0
   1a304:	movge	r3, ip
   1a308:	movge	r2, #0
   1a30c:	bge	1a2b8 <__assert_fail@plt+0x918c>
   1a310:	b	1a2f4 <__assert_fail@plt+0x91c8>
   1a314:	movw	r1, #43800	; 0xab18
   1a318:	movt	r1, #2
   1a31c:	ldr	r3, [pc, #68]	; 1a368 <__assert_fail@plt+0x923c>
   1a320:	movw	r0, #44176	; 0xac90
   1a324:	movt	r0, #2
   1a328:	mov	r2, #932	; 0x3a4
   1a32c:	bl	1112c <__assert_fail@plt>
   1a330:	movw	r1, #43800	; 0xab18
   1a334:	movt	r1, #2
   1a338:	ldr	r3, [pc, #44]	; 1a36c <__assert_fail@plt+0x9240>
   1a33c:	movw	r0, #44392	; 0xad68
   1a340:	movt	r0, #2
   1a344:	movw	r2, #915	; 0x393
   1a348:	bl	1112c <__assert_fail@plt>
   1a34c:	movw	r1, #43800	; 0xab18
   1a350:	movt	r1, #2
   1a354:	ldr	r3, [pc, #12]	; 1a368 <__assert_fail@plt+0x923c>
   1a358:	movw	r0, #44392	; 0xad68
   1a35c:	movt	r0, #2
   1a360:	movw	r2, #945	; 0x3b1
   1a364:	bl	1112c <__assert_fail@plt>
   1a368:	andeq	sl, r2, r4, ror #18
   1a36c:	andeq	sl, r2, r8, ror r9
   1a370:	strd	r4, [sp, #-12]!
   1a374:	subs	r4, r3, #0
   1a378:	str	lr, [sp, #8]
   1a37c:	sub	sp, sp, #20
   1a380:	ble	1a43c <__assert_fail@plt+0x9310>
   1a384:	sub	r3, r4, #-1073741823	; 0xc0000001
   1a388:	ldr	r3, [r2, r3, lsl #2]
   1a38c:	cmp	r3, #0
   1a390:	beq	1a420 <__assert_fail@plt+0x92f4>
   1a394:	mov	r5, r0
   1a398:	mov	r0, r1
   1a39c:	bl	17af8 <__assert_fail@plt+0x69cc>
   1a3a0:	cmp	r0, #0
   1a3a4:	bne	1a400 <__assert_fail@plt+0x92d4>
   1a3a8:	umull	r3, lr, r1, r1
   1a3ac:	mov	ip, r1
   1a3b0:	adds	lr, lr, #0
   1a3b4:	movne	lr, #1
   1a3b8:	cmp	lr, #0
   1a3bc:	moveq	lr, #1
   1a3c0:	bne	1a3d8 <__assert_fail@plt+0x92ac>
   1a3c4:	mul	ip, r1, ip
   1a3c8:	add	lr, lr, #1
   1a3cc:	umull	r0, r3, r1, ip
   1a3d0:	cmp	r3, #0
   1a3d4:	beq	1a3c4 <__assert_fail@plt+0x9298>
   1a3d8:	mov	r0, r5
   1a3dc:	add	r3, sp, #12
   1a3e0:	stm	sp, {r2, r4, lr}
   1a3e4:	add	r2, sp, #8
   1a3e8:	str	ip, [sp, #12]
   1a3ec:	bl	1a090 <__assert_fail@plt+0x8f64>
   1a3f0:	add	sp, sp, #20
   1a3f4:	ldrd	r4, [sp]
   1a3f8:	add	sp, sp, #8
   1a3fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a400:	mov	r1, r0
   1a404:	mov	r3, r4
   1a408:	mov	r0, r5
   1a40c:	bl	17fec <__assert_fail@plt+0x6ec0>
   1a410:	add	sp, sp, #20
   1a414:	ldrd	r4, [sp]
   1a418:	add	sp, sp, #8
   1a41c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a420:	movw	r1, #43800	; 0xab18
   1a424:	movt	r1, #2
   1a428:	ldr	r3, [pc, #40]	; 1a458 <__assert_fail@plt+0x932c>
   1a42c:	movw	r0, #44408	; 0xad78
   1a430:	movt	r0, #2
   1a434:	movw	r2, #1317	; 0x525
   1a438:	bl	1112c <__assert_fail@plt>
   1a43c:	movw	r1, #43800	; 0xab18
   1a440:	movt	r1, #2
   1a444:	ldr	r3, [pc, #12]	; 1a458 <__assert_fail@plt+0x932c>
   1a448:	movw	r0, #44400	; 0xad70
   1a44c:	movt	r0, #2
   1a450:	movw	r2, #1316	; 0x524
   1a454:	bl	1112c <__assert_fail@plt>
   1a458:	andeq	sl, r2, ip, lsl #19
   1a45c:	cmp	r2, #0
   1a460:	beq	1a4f8 <__assert_fail@plt+0x93cc>
   1a464:	strd	r4, [sp, #-16]!
   1a468:	mov	r5, r0
   1a46c:	mov	r0, r3
   1a470:	str	r6, [sp, #8]
   1a474:	str	lr, [sp, #12]
   1a478:	sub	sp, sp, #16
   1a47c:	bl	17af8 <__assert_fail@plt+0x69cc>
   1a480:	cmp	r0, #0
   1a484:	bne	1a4d8 <__assert_fail@plt+0x93ac>
   1a488:	umull	r0, lr, r3, r3
   1a48c:	mov	ip, r3
   1a490:	adds	lr, lr, #0
   1a494:	movne	lr, #1
   1a498:	cmp	lr, #0
   1a49c:	moveq	lr, #1
   1a4a0:	bne	1a4b8 <__assert_fail@plt+0x938c>
   1a4a4:	mul	ip, r3, ip
   1a4a8:	add	lr, lr, #1
   1a4ac:	umull	r0, r4, r3, ip
   1a4b0:	cmp	r4, #0
   1a4b4:	beq	1a4a4 <__assert_fail@plt+0x9378>
   1a4b8:	add	r6, sp, #8
   1a4bc:	add	r4, sp, #12
   1a4c0:	mov	r0, r5
   1a4c4:	str	r6, [sp]
   1a4c8:	stmib	sp, {r4, lr}
   1a4cc:	str	ip, [sp, #12]
   1a4d0:	bl	18cd4 <__assert_fail@plt+0x7ba8>
   1a4d4:	b	1a4e4 <__assert_fail@plt+0x93b8>
   1a4d8:	mov	r3, r0
   1a4dc:	mov	r0, r5
   1a4e0:	bl	17b80 <__assert_fail@plt+0x6a54>
   1a4e4:	add	sp, sp, #16
   1a4e8:	ldrd	r4, [sp]
   1a4ec:	ldr	r6, [sp, #8]
   1a4f0:	add	sp, sp, #12
   1a4f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4f8:	mov	r0, r2
   1a4fc:	bx	lr
   1a500:	ldr	r2, [pc, #16]	; 1a518 <__assert_fail@plt+0x93ec>
   1a504:	mov	r3, #0
   1a508:	str	r3, [r0]
   1a50c:	str	r3, [r0, #4]
   1a510:	str	r2, [r0, #8]
   1a514:	bx	lr
   1a518:	muleq	r2, r8, r9
   1a51c:	cmp	r1, #0
   1a520:	subne	r1, r1, #1
   1a524:	mov	r2, #0
   1a528:	str	r4, [sp, #-8]!
   1a52c:	lsr	r1, r1, #5
   1a530:	mov	r4, r0
   1a534:	movw	r3, #49436	; 0xc11c
   1a538:	movt	r3, #3
   1a53c:	add	r1, r1, #1
   1a540:	ldr	r3, [r3, #4]
   1a544:	lsl	r0, r1, #2
   1a548:	str	lr, [sp, #4]
   1a54c:	stm	r4, {r1, r2}
   1a550:	blx	r3
   1a554:	str	r0, [r4, #8]
   1a558:	ldr	r4, [sp]
   1a55c:	add	sp, sp, #4
   1a560:	pop	{pc}		; (ldr pc, [sp], #4)
   1a564:	ldr	r1, [r0]
   1a568:	cmp	r1, #0
   1a56c:	beq	1a588 <__assert_fail@plt+0x945c>
   1a570:	movw	r3, #49436	; 0xc11c
   1a574:	movt	r3, #3
   1a578:	lsl	r1, r1, #2
   1a57c:	ldr	r0, [r0, #8]
   1a580:	ldr	r3, [r3, #8]
   1a584:	bx	r3
   1a588:	bx	lr
   1a58c:	subs	r3, r1, #0
   1a590:	blt	1a5a4 <__assert_fail@plt+0x9478>
   1a594:	beq	1a59c <__assert_fail@plt+0x9470>
   1a598:	b	18318 <__assert_fail@plt+0x71ec>
   1a59c:	str	r3, [r0, #4]
   1a5a0:	bx	lr
   1a5a4:	str	r4, [sp, #-8]!
   1a5a8:	mov	r4, r3
   1a5ac:	mvn	r1, #0
   1a5b0:	ldr	r3, [r0]
   1a5b4:	str	lr, [sp, #4]
   1a5b8:	str	r1, [r0, #4]
   1a5bc:	cmp	r3, #0
   1a5c0:	ble	1a5dc <__assert_fail@plt+0x94b0>
   1a5c4:	ldr	r0, [r0, #8]
   1a5c8:	rsb	r3, r4, #0
   1a5cc:	ldr	r4, [sp]
   1a5d0:	add	sp, sp, #4
   1a5d4:	str	r3, [r0]
   1a5d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5dc:	mov	r1, #1
   1a5e0:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1a5e4:	b	1a5c8 <__assert_fail@plt+0x949c>
   1a5e8:	subs	r2, r1, #0
   1a5ec:	beq	1a5f4 <__assert_fail@plt+0x94c8>
   1a5f0:	b	18318 <__assert_fail@plt+0x71ec>
   1a5f4:	str	r2, [r0, #4]
   1a5f8:	bx	lr
   1a5fc:	cmp	r0, r1
   1a600:	bxeq	lr
   1a604:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a608:	mov	r5, r1
   1a60c:	strd	r6, [sp, #8]
   1a610:	mov	r6, r0
   1a614:	ldr	r7, [r1, #4]
   1a618:	str	r8, [sp, #16]
   1a61c:	ldr	r3, [r0]
   1a620:	str	lr, [sp, #20]
   1a624:	eor	r4, r7, r7, asr #31
   1a628:	sub	r4, r4, r7, asr #31
   1a62c:	cmp	r3, r4
   1a630:	blt	1a678 <__assert_fail@plt+0x954c>
   1a634:	ldr	r0, [r0, #8]
   1a638:	mov	lr, r7
   1a63c:	cmp	r7, #0
   1a640:	ldr	r3, [r5, #8]
   1a644:	subne	r2, r0, #4
   1a648:	addne	ip, r3, r4, lsl #2
   1a64c:	beq	1a660 <__assert_fail@plt+0x9534>
   1a650:	ldr	r1, [r3], #4
   1a654:	cmp	r3, ip
   1a658:	str	r1, [r2, #4]!
   1a65c:	bne	1a650 <__assert_fail@plt+0x9524>
   1a660:	ldrd	r4, [sp]
   1a664:	ldr	r8, [sp, #16]
   1a668:	str	lr, [r6, #4]
   1a66c:	ldrd	r6, [sp, #8]
   1a670:	add	sp, sp, #20
   1a674:	pop	{pc}		; (ldr pc, [sp], #4)
   1a678:	mov	r1, r4
   1a67c:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1a680:	ldr	lr, [r5, #4]
   1a684:	b	1a63c <__assert_fail@plt+0x9510>
   1a688:	ldr	ip, [pc, #12]	; 1a69c <__assert_fail@plt+0x9570>
   1a68c:	mov	r2, #0
   1a690:	str	r2, [r0]
   1a694:	stmib	r0, {r2, ip}
   1a698:	b	1a58c <__assert_fail@plt+0x9460>
   1a69c:	muleq	r2, r8, r9
   1a6a0:	ldr	ip, [pc, #24]	; 1a6c0 <__assert_fail@plt+0x9594>
   1a6a4:	mov	r2, #0
   1a6a8:	cmp	r1, r2
   1a6ac:	str	r2, [r0]
   1a6b0:	stmib	r0, {r2, ip}
   1a6b4:	beq	1a6bc <__assert_fail@plt+0x9590>
   1a6b8:	b	18318 <__assert_fail@plt+0x71ec>
   1a6bc:	bx	lr
   1a6c0:	muleq	r2, r8, r9
   1a6c4:	ldr	ip, [pc, #12]	; 1a6d8 <__assert_fail@plt+0x95ac>
   1a6c8:	mov	r2, #0
   1a6cc:	str	r2, [r0]
   1a6d0:	stmib	r0, {r2, ip}
   1a6d4:	b	1a5fc <__assert_fail@plt+0x94d0>
   1a6d8:	muleq	r2, r8, r9
   1a6dc:	ldr	r3, [r0, #4]
   1a6e0:	ldr	r2, [r0, #8]
   1a6e4:	cmp	r3, #0
   1a6e8:	blt	1a72c <__assert_fail@plt+0x9600>
   1a6ec:	cmp	r3, #1
   1a6f0:	ble	1a6fc <__assert_fail@plt+0x95d0>
   1a6f4:	mov	r0, #0
   1a6f8:	bx	lr
   1a6fc:	cmp	r3, #0
   1a700:	bne	1a70c <__assert_fail@plt+0x95e0>
   1a704:	mov	r0, #1
   1a708:	bx	lr
   1a70c:	ldr	r3, [r2]
   1a710:	cmn	r3, #-2147483646	; 0x80000002
   1a714:	movhi	r0, #0
   1a718:	movls	r0, #1
   1a71c:	rsb	r0, r0, r3, lsr #31
   1a720:	subs	r0, r0, #1
   1a724:	movne	r0, #1
   1a728:	bx	lr
   1a72c:	cmn	r3, #1
   1a730:	bne	1a6f4 <__assert_fail@plt+0x95c8>
   1a734:	ldr	r3, [r2]
   1a738:	mvn	r0, r3
   1a73c:	lsr	r0, r0, #31
   1a740:	cmp	r3, #-2147483648	; 0x80000000
   1a744:	rsbls	r0, r0, #0
   1a748:	rsbhi	r0, r0, #1
   1a74c:	subs	r0, r0, #1
   1a750:	movne	r0, #1
   1a754:	bx	lr
   1a758:	ldr	r0, [r0, #4]
   1a75c:	cmp	r0, #1
   1a760:	movhi	r0, #0
   1a764:	movls	r0, #1
   1a768:	bx	lr
   1a76c:	b	1a6dc <__assert_fail@plt+0x95b0>
   1a770:	ldr	r0, [r0, #4]
   1a774:	cmp	r0, #1
   1a778:	movhi	r0, #0
   1a77c:	movls	r0, #1
   1a780:	bx	lr
   1a784:	ldr	r3, [r0, #4]
   1a788:	ldr	r2, [r0, #8]
   1a78c:	cmp	r3, #0
   1a790:	blt	1a7e0 <__assert_fail@plt+0x96b4>
   1a794:	cmp	r3, #1
   1a798:	ble	1a7a4 <__assert_fail@plt+0x9678>
   1a79c:	mov	r0, #0
   1a7a0:	bx	lr
   1a7a4:	cmp	r3, #0
   1a7a8:	bne	1a7b4 <__assert_fail@plt+0x9688>
   1a7ac:	mov	r0, #1
   1a7b0:	bx	lr
   1a7b4:	ldr	r3, [r2]
   1a7b8:	movw	r0, #32766	; 0x7ffe
   1a7bc:	cmp	r3, r0
   1a7c0:	movhi	r0, #0
   1a7c4:	movls	r0, #1
   1a7c8:	cmp	r3, #32768	; 0x8000
   1a7cc:	rsbcc	r0, r0, #0
   1a7d0:	rsbcs	r0, r0, #1
   1a7d4:	subs	r0, r0, #1
   1a7d8:	movne	r0, #1
   1a7dc:	bx	lr
   1a7e0:	cmn	r3, #1
   1a7e4:	bne	1a79c <__assert_fail@plt+0x9670>
   1a7e8:	ldr	r3, [r2]
   1a7ec:	cmp	r3, #32768	; 0x8000
   1a7f0:	movcs	r0, #0
   1a7f4:	movcc	r0, #1
   1a7f8:	cmp	r3, #32768	; 0x8000
   1a7fc:	rsbls	r0, r0, #0
   1a800:	rsbhi	r0, r0, #1
   1a804:	subs	r0, r0, #1
   1a808:	movne	r0, #1
   1a80c:	bx	lr
   1a810:	ldr	r3, [r0, #4]
   1a814:	cmp	r3, #1
   1a818:	bls	1a824 <__assert_fail@plt+0x96f8>
   1a81c:	mov	r0, #0
   1a820:	bx	lr
   1a824:	cmp	r3, #0
   1a828:	beq	1a85c <__assert_fail@plt+0x9730>
   1a82c:	ldr	r3, [r0, #8]
   1a830:	movw	r0, #65534	; 0xfffe
   1a834:	ldr	r3, [r3]
   1a838:	cmp	r3, r0
   1a83c:	movhi	r0, #0
   1a840:	movls	r0, #1
   1a844:	cmp	r3, #65536	; 0x10000
   1a848:	rsbcc	r0, r0, #0
   1a84c:	rsbcs	r0, r0, #1
   1a850:	subs	r0, r0, #1
   1a854:	movne	r0, #1
   1a858:	bx	lr
   1a85c:	mov	r0, #1
   1a860:	bx	lr
   1a864:	ldr	r3, [r0, #4]
   1a868:	cmp	r3, #0
   1a86c:	beq	1a884 <__assert_fail@plt+0x9758>
   1a870:	ldr	r3, [r0, #8]
   1a874:	ldr	r3, [r3]
   1a878:	rsblt	r3, r3, #0
   1a87c:	bicge	r3, r3, #-2147483648	; 0x80000000
   1a880:	orrlt	r3, r3, #-2147483648	; 0x80000000
   1a884:	mov	r0, r3
   1a888:	bx	lr
   1a88c:	ldr	r3, [r0, #4]
   1a890:	cmp	r3, #0
   1a894:	ldrne	r3, [r0, #8]
   1a898:	ldrne	r0, [r3]
   1a89c:	moveq	r0, r3
   1a8a0:	bx	lr
   1a8a4:	ldr	r0, [r0, #4]
   1a8a8:	cmp	r0, #0
   1a8ac:	rsblt	r0, r0, #0
   1a8b0:	bx	lr
   1a8b4:	cmp	r1, #0
   1a8b8:	blt	1a8dc <__assert_fail@plt+0x97b0>
   1a8bc:	ldr	r3, [r0, #4]
   1a8c0:	cmp	r3, #0
   1a8c4:	rsblt	r3, r3, #0
   1a8c8:	cmp	r3, r1
   1a8cc:	ble	1a8dc <__assert_fail@plt+0x97b0>
   1a8d0:	ldr	r3, [r0, #8]
   1a8d4:	ldr	r0, [r3, r1, lsl #2]
   1a8d8:	bx	lr
   1a8dc:	mov	r0, #0
   1a8e0:	bx	lr
   1a8e4:	cmp	r1, #0
   1a8e8:	subne	r1, r1, #1
   1a8ec:	lsr	r1, r1, #5
   1a8f0:	add	r1, r1, #1
   1a8f4:	b	17dc4 <__assert_fail@plt+0x6c98>
   1a8f8:	ldr	r0, [r0, #8]
   1a8fc:	bx	lr
   1a900:	subs	r2, r1, #0
   1a904:	ble	1a920 <__assert_fail@plt+0x97f4>
   1a908:	ldr	ip, [r0]
   1a90c:	cmp	ip, r2
   1a910:	blt	1a91c <__assert_fail@plt+0x97f0>
   1a914:	ldr	r0, [r0, #8]
   1a918:	bx	lr
   1a91c:	b	17dc4 <__assert_fail@plt+0x6c98>
   1a920:	movw	r1, #43800	; 0xab18
   1a924:	movt	r1, #2
   1a928:	ldr	r3, [pc, #20]	; 1a944 <__assert_fail@plt+0x9818>
   1a92c:	movw	r0, #43964	; 0xabbc
   1a930:	movt	r0, #2
   1a934:	str	r4, [sp, #-8]!
   1a938:	movw	r2, #1663	; 0x67f
   1a93c:	str	lr, [sp, #4]
   1a940:	bl	1112c <__assert_fail@plt>
   1a944:	muleq	r2, ip, r9
   1a948:	b	1a900 <__assert_fail@plt+0x97d4>
   1a94c:	eor	r3, r1, r1, asr #31
   1a950:	cmp	r1, #0
   1a954:	ldr	r2, [r0, #8]
   1a958:	sub	r3, r3, r1, asr #31
   1a95c:	beq	1a9a0 <__assert_fail@plt+0x9874>
   1a960:	sub	ip, r3, #-1073741823	; 0xc0000001
   1a964:	push	{lr}		; (str lr, [sp, #-4]!)
   1a968:	ldr	lr, [r2, ip, lsl #2]
   1a96c:	add	r2, r2, ip, lsl #2
   1a970:	cmp	lr, #0
   1a974:	beq	1a988 <__assert_fail@plt+0x985c>
   1a978:	b	1a990 <__assert_fail@plt+0x9864>
   1a97c:	ldr	ip, [r2, #-4]!
   1a980:	cmp	ip, #0
   1a984:	bne	1a990 <__assert_fail@plt+0x9864>
   1a988:	subs	r3, r3, #1
   1a98c:	bne	1a97c <__assert_fail@plt+0x9850>
   1a990:	cmp	r1, #0
   1a994:	rsblt	r3, r3, #0
   1a998:	str	r3, [r0, #4]
   1a99c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9a0:	str	r1, [r0, #4]
   1a9a4:	bx	lr
   1a9a8:	mov	ip, r0
   1a9ac:	eor	r3, r2, r2, asr #31
   1a9b0:	mov	r0, #0
   1a9b4:	cmp	r2, r0
   1a9b8:	sub	r3, r3, r2, asr #31
   1a9bc:	str	r0, [ip]
   1a9c0:	str	r1, [ip, #8]
   1a9c4:	beq	1aa0c <__assert_fail@plt+0x98e0>
   1a9c8:	sub	r0, r3, #-1073741823	; 0xc0000001
   1a9cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a9d0:	ldr	lr, [r1, r0, lsl #2]
   1a9d4:	add	r1, r1, r0, lsl #2
   1a9d8:	cmp	lr, #0
   1a9dc:	beq	1a9f0 <__assert_fail@plt+0x98c4>
   1a9e0:	b	1a9f8 <__assert_fail@plt+0x98cc>
   1a9e4:	ldr	r0, [r1, #-4]!
   1a9e8:	cmp	r0, #0
   1a9ec:	bne	1a9f8 <__assert_fail@plt+0x98cc>
   1a9f0:	subs	r3, r3, #1
   1a9f4:	bne	1a9e4 <__assert_fail@plt+0x98b8>
   1a9f8:	cmp	r2, #0
   1a9fc:	mov	r0, ip
   1aa00:	rsblt	r3, r3, #0
   1aa04:	str	r3, [ip, #4]
   1aa08:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa0c:	mov	r0, ip
   1aa10:	str	r2, [ip, #4]
   1aa14:	bx	lr
   1aa18:	vcmp.f64	d0, d0
   1aa1c:	mov	r3, r0
   1aa20:	vmrs	APSR_nzcv, fpscr
   1aa24:	bne	1aa40 <__assert_fail@plt+0x9914>
   1aa28:	vldr	d6, [pc, #32]	; 1aa50 <__assert_fail@plt+0x9924>
   1aa2c:	vmul.f64	d6, d0, d6
   1aa30:	vcmp.f64	d6, d0
   1aa34:	vmrs	APSR_nzcv, fpscr
   1aa38:	beq	1aa40 <__assert_fail@plt+0x9914>
   1aa3c:	b	18364 <__assert_fail@plt+0x7238>
   1aa40:	mov	r2, #0
   1aa44:	str	r2, [r3, #4]
   1aa48:	bx	lr
   1aa4c:	nop	{0}
   1aa50:	andeq	r0, r0, r0
   1aa54:	svccc	0x00e00000
   1aa58:	vcmp.f64	d0, d0
   1aa5c:	ldr	r1, [pc, #60]	; 1aaa0 <__assert_fail@plt+0x9974>
   1aa60:	mov	r2, #0
   1aa64:	str	r2, [r0]
   1aa68:	str	r2, [r0, #4]
   1aa6c:	str	r1, [r0, #8]
   1aa70:	vmrs	APSR_nzcv, fpscr
   1aa74:	bne	1aa90 <__assert_fail@plt+0x9964>
   1aa78:	vldr	d6, [pc, #24]	; 1aa98 <__assert_fail@plt+0x996c>
   1aa7c:	vmul.f64	d6, d0, d6
   1aa80:	vcmp.f64	d0, d6
   1aa84:	vmrs	APSR_nzcv, fpscr
   1aa88:	beq	1aa90 <__assert_fail@plt+0x9964>
   1aa8c:	b	18364 <__assert_fail@plt+0x7238>
   1aa90:	bx	lr
   1aa94:	nop	{0}
   1aa98:	andeq	r0, r0, r0
   1aa9c:	svccc	0x00e00000
   1aaa0:	muleq	r2, r8, r9
   1aaa4:	str	r4, [sp, #-8]!
   1aaa8:	str	lr, [sp, #4]
   1aaac:	ldr	lr, [r0, #4]
   1aab0:	cmp	lr, #0
   1aab4:	beq	1ab70 <__assert_fail@plt+0x9a44>
   1aab8:	eor	r1, lr, lr, asr #31
   1aabc:	ldr	ip, [r0, #8]
   1aac0:	sub	r1, r1, lr, asr #31
   1aac4:	sub	r1, r1, #1
   1aac8:	ldr	r0, [ip, r1, lsl #2]
   1aacc:	ands	r3, r0, #-16777216	; 0xff000000
   1aad0:	bne	1ab80 <__assert_fail@plt+0x9a54>
   1aad4:	mov	r2, r0
   1aad8:	lsl	r2, r2, #8
   1aadc:	add	r3, r3, #8
   1aae0:	tst	r2, #-16777216	; 0xff000000
   1aae4:	beq	1aad8 <__assert_fail@plt+0x99ac>
   1aae8:	cmp	r2, #0
   1aaec:	blt	1aafc <__assert_fail@plt+0x99d0>
   1aaf0:	lsls	r2, r2, #1
   1aaf4:	add	r3, r3, #1
   1aaf8:	bpl	1aaf0 <__assert_fail@plt+0x99c4>
   1aafc:	adds	r3, r3, #21
   1ab00:	bmi	1ab60 <__assert_fail@plt+0x9a34>
   1ab04:	vmov	s15, r0
   1ab08:	mvn	r4, #0
   1ab0c:	vldr	d6, [pc, #132]	; 1ab98 <__assert_fail@plt+0x9a6c>
   1ab10:	vcvt.f64.u32	d0, s15
   1ab14:	subs	r1, r1, #1
   1ab18:	bcc	1ab4c <__assert_fail@plt+0x9a20>
   1ab1c:	cmp	r3, #0
   1ab20:	vmul.f64	d0, d0, d6
   1ab24:	ble	1ab14 <__assert_fail@plt+0x99e8>
   1ab28:	ldr	r2, [ip, r1, lsl #2]
   1ab2c:	subs	r3, r3, #32
   1ab30:	rsb	r0, r3, #0
   1ab34:	andmi	r2, r2, r4, lsl r0
   1ab38:	subs	r1, r1, #1
   1ab3c:	vmov	s15, r2
   1ab40:	vcvt.f64.u32	d7, s15
   1ab44:	vadd.f64	d0, d0, d7
   1ab48:	bcs	1ab1c <__assert_fail@plt+0x99f0>
   1ab4c:	cmp	lr, #0
   1ab50:	ldr	r4, [sp]
   1ab54:	add	sp, sp, #4
   1ab58:	vneglt.f64	d0, d0
   1ab5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab60:	rsb	r2, r3, #0
   1ab64:	mvn	r4, #0
   1ab68:	and	r0, r0, r4, lsl r2
   1ab6c:	b	1ab04 <__assert_fail@plt+0x99d8>
   1ab70:	ldr	r4, [sp]
   1ab74:	add	sp, sp, #4
   1ab78:	vldr	d0, [pc, #32]	; 1aba0 <__assert_fail@plt+0x9a74>
   1ab7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab80:	cmp	r0, #0
   1ab84:	movlt	r3, #21
   1ab88:	blt	1ab04 <__assert_fail@plt+0x99d8>
   1ab8c:	mov	r2, r0
   1ab90:	mov	r3, #0
   1ab94:	b	1aaf0 <__assert_fail@plt+0x99c4>
   1ab98:	andeq	r0, r0, r0
   1ab9c:	mvnsmi	r0, r0
	...
   1aba8:	vcmpe.f64	d0, #0.0
   1abac:	ldr	r3, [r0, #4]
   1abb0:	vmrs	APSR_nzcv, fpscr
   1abb4:	vneglt.f64	d0, d0
   1abb8:	cmp	r3, #0
   1abbc:	beq	1ac4c <__assert_fail@plt+0x9b20>
   1abc0:	cmp	r3, #0
   1abc4:	rsblt	r3, r3, #0
   1abc8:	cmp	r3, #1
   1abcc:	beq	1abe8 <__assert_fail@plt+0x9abc>
   1abd0:	vldr	d7, [pc, #144]	; 1ac68 <__assert_fail@plt+0x9b3c>
   1abd4:	mov	r2, #1
   1abd8:	add	r2, r2, #1
   1abdc:	vmul.f64	d0, d0, d7
   1abe0:	cmp	r3, r2
   1abe4:	bne	1abd8 <__assert_fail@plt+0x9aac>
   1abe8:	vldr	d6, [pc, #128]	; 1ac70 <__assert_fail@plt+0x9b44>
   1abec:	vcmpe.f64	d0, d6
   1abf0:	vmrs	APSR_nzcv, fpscr
   1abf4:	bge	1ac60 <__assert_fail@plt+0x9b34>
   1abf8:	vcvt.u32.f64	s14, d0
   1abfc:	ldr	r1, [r0, #8]
   1ac00:	sub	r3, r3, #1
   1ac04:	ldr	r2, [r1, r3, lsl #2]
   1ac08:	vmov	r0, s14
   1ac0c:	cmp	r0, r2
   1ac10:	bcc	1ac44 <__assert_fail@plt+0x9b18>
   1ac14:	bhi	1ac60 <__assert_fail@plt+0x9b34>
   1ac18:	vcvt.f64.u32	d7, s14
   1ac1c:	sub	r3, r3, #1
   1ac20:	cmn	r3, #1
   1ac24:	vsub.f64	d0, d0, d7
   1ac28:	vmul.f64	d0, d0, d6
   1ac2c:	beq	1ac4c <__assert_fail@plt+0x9b20>
   1ac30:	vcvt.u32.f64	s14, d0
   1ac34:	ldr	r2, [r1, r3, lsl #2]
   1ac38:	vmov	r0, s14
   1ac3c:	cmp	r0, r2
   1ac40:	bcs	1ac14 <__assert_fail@plt+0x9ae8>
   1ac44:	mov	r0, #1
   1ac48:	bx	lr
   1ac4c:	vcmpe.f64	d0, #0.0
   1ac50:	vmrs	APSR_nzcv, fpscr
   1ac54:	mvngt	r0, #0
   1ac58:	movle	r0, #0
   1ac5c:	bx	lr
   1ac60:	mvn	r0, #0
   1ac64:	bx	lr
   1ac68:	andeq	r0, r0, r0
   1ac6c:	ldclcc	0, cr0, [r0]
   1ac70:	andeq	r0, r0, r0
   1ac74:	mvnsmi	r0, r0
   1ac78:	ldr	r3, [r0, #4]
   1ac7c:	vcmpe.f64	d0, #0.0
   1ac80:	cmp	r3, #0
   1ac84:	blt	1ac9c <__assert_fail@plt+0x9b70>
   1ac88:	vmrs	APSR_nzcv, fpscr
   1ac8c:	bmi	1ac94 <__assert_fail@plt+0x9b68>
   1ac90:	b	1aba8 <__assert_fail@plt+0x9a7c>
   1ac94:	mov	r0, #1
   1ac98:	bx	lr
   1ac9c:	vmrs	APSR_nzcv, fpscr
   1aca0:	bge	1acc0 <__assert_fail@plt+0x9b94>
   1aca4:	str	r4, [sp, #-8]!
   1aca8:	str	lr, [sp, #4]
   1acac:	bl	1aba8 <__assert_fail@plt+0x9a7c>
   1acb0:	ldr	r4, [sp]
   1acb4:	add	sp, sp, #4
   1acb8:	rsb	r0, r0, #0
   1acbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc0:	mvn	r0, #0
   1acc4:	bx	lr
   1acc8:	ldr	r3, [r0, #4]
   1accc:	lsr	r0, r3, #31
   1acd0:	cmp	r3, #0
   1acd4:	rsble	r0, r0, #0
   1acd8:	rsbgt	r0, r0, #1
   1acdc:	bx	lr
   1ace0:	cmp	r1, #0
   1ace4:	ldr	r3, [r0, #4]
   1ace8:	bge	1ad0c <__assert_fail@plt+0x9be0>
   1acec:	cmp	r3, #0
   1acf0:	blt	1acfc <__assert_fail@plt+0x9bd0>
   1acf4:	mov	r0, #1
   1acf8:	bx	lr
   1acfc:	cmn	r3, #1
   1ad00:	beq	1ad4c <__assert_fail@plt+0x9c20>
   1ad04:	mvn	r0, #0
   1ad08:	bx	lr
   1ad0c:	cmp	r3, #0
   1ad10:	blt	1ad04 <__assert_fail@plt+0x9bd8>
   1ad14:	cmp	r3, #1
   1ad18:	bgt	1acf4 <__assert_fail@plt+0x9bc8>
   1ad1c:	cmp	r3, #0
   1ad20:	moveq	r0, r3
   1ad24:	beq	1ad3c <__assert_fail@plt+0x9c10>
   1ad28:	ldr	r3, [r0, #8]
   1ad2c:	ldr	r0, [r3]
   1ad30:	cmp	r1, r0
   1ad34:	movcs	r3, #0
   1ad38:	movcc	r3, #1
   1ad3c:	cmp	r1, r0
   1ad40:	movls	r0, r3
   1ad44:	subhi	r0, r3, #1
   1ad48:	bx	lr
   1ad4c:	ldr	r2, [r0, #8]
   1ad50:	rsb	r3, r1, #0
   1ad54:	ldr	r1, [r2]
   1ad58:	cmp	r3, r1
   1ad5c:	movcs	r0, #0
   1ad60:	movcc	r0, #1
   1ad64:	cmp	r3, r1
   1ad68:	rsbls	r0, r0, #0
   1ad6c:	rsbhi	r0, r0, #1
   1ad70:	bx	lr
   1ad74:	ldr	r3, [r0, #4]
   1ad78:	cmp	r3, #0
   1ad7c:	blt	1adc0 <__assert_fail@plt+0x9c94>
   1ad80:	cmp	r3, #1
   1ad84:	ble	1ad90 <__assert_fail@plt+0x9c64>
   1ad88:	mov	r0, #1
   1ad8c:	bx	lr
   1ad90:	cmp	r3, #0
   1ad94:	moveq	r0, r3
   1ad98:	beq	1adb0 <__assert_fail@plt+0x9c84>
   1ad9c:	ldr	r3, [r0, #8]
   1ada0:	ldr	r0, [r3]
   1ada4:	cmp	r1, r0
   1ada8:	movcs	r3, #0
   1adac:	movcc	r3, #1
   1adb0:	cmp	r1, r0
   1adb4:	movls	r0, r3
   1adb8:	subhi	r0, r3, #1
   1adbc:	bx	lr
   1adc0:	mvn	r0, #0
   1adc4:	bx	lr
   1adc8:	ldr	r3, [r0, #4]
   1adcc:	ldr	r2, [r1, #4]
   1add0:	cmp	r3, r2
   1add4:	beq	1ade4 <__assert_fail@plt+0x9cb8>
   1add8:	bge	1ae28 <__assert_fail@plt+0x9cfc>
   1addc:	mvn	r0, #0
   1ade0:	bx	lr
   1ade4:	cmp	r3, #0
   1ade8:	ldr	r2, [r0, #8]
   1adec:	ldr	r1, [r1, #8]
   1adf0:	blt	1ae30 <__assert_fail@plt+0x9d04>
   1adf4:	lsl	r0, r3, #2
   1adf8:	add	r2, r2, r0
   1adfc:	add	r1, r1, r0
   1ae00:	b	1ae14 <__assert_fail@plt+0x9ce8>
   1ae04:	ldr	ip, [r2, #-4]!
   1ae08:	ldr	r0, [r1, #-4]!
   1ae0c:	cmp	ip, r0
   1ae10:	bne	1ae24 <__assert_fail@plt+0x9cf8>
   1ae14:	subs	r3, r3, #1
   1ae18:	bcs	1ae04 <__assert_fail@plt+0x9cd8>
   1ae1c:	mov	r0, #0
   1ae20:	bx	lr
   1ae24:	bls	1addc <__assert_fail@plt+0x9cb0>
   1ae28:	mov	r0, #1
   1ae2c:	bx	lr
   1ae30:	mvn	r3, r3
   1ae34:	lsl	r0, r3, #2
   1ae38:	add	r1, r1, r0
   1ae3c:	add	r2, r2, r0
   1ae40:	ldr	ip, [r1], #-4
   1ae44:	sub	r3, r3, #1
   1ae48:	ldr	r0, [r2], #-4
   1ae4c:	cmp	ip, r0
   1ae50:	bne	1ae24 <__assert_fail@plt+0x9cf8>
   1ae54:	cmn	r3, #1
   1ae58:	bne	1ae40 <__assert_fail@plt+0x9d14>
   1ae5c:	mov	r0, #0
   1ae60:	bx	lr
   1ae64:	ldr	r3, [r0, #4]
   1ae68:	eor	r2, r3, r3, asr #31
   1ae6c:	sub	r2, r2, r3, asr #31
   1ae70:	cmp	r2, #1
   1ae74:	ble	1ae80 <__assert_fail@plt+0x9d54>
   1ae78:	mov	r0, #1
   1ae7c:	bx	lr
   1ae80:	cmp	r3, #0
   1ae84:	moveq	r0, r3
   1ae88:	beq	1aea0 <__assert_fail@plt+0x9d74>
   1ae8c:	ldr	r3, [r0, #8]
   1ae90:	ldr	r0, [r3]
   1ae94:	cmp	r1, r0
   1ae98:	movcs	r3, #0
   1ae9c:	movcc	r3, #1
   1aea0:	cmp	r1, r0
   1aea4:	movls	r0, r3
   1aea8:	subhi	r0, r3, #1
   1aeac:	bx	lr
   1aeb0:	ldr	r3, [r0, #4]
   1aeb4:	ldr	r2, [r1, #4]
   1aeb8:	cmp	r3, #0
   1aebc:	rsblt	r3, r3, #0
   1aec0:	cmp	r2, #0
   1aec4:	rsblt	r2, r2, #0
   1aec8:	cmp	r3, r2
   1aecc:	beq	1aee8 <__assert_fail@plt+0x9dbc>
   1aed0:	bge	1aee0 <__assert_fail@plt+0x9db4>
   1aed4:	mvn	r0, #0
   1aed8:	bx	lr
   1aedc:	bls	1aed4 <__assert_fail@plt+0x9da8>
   1aee0:	mov	r0, #1
   1aee4:	bx	lr
   1aee8:	ldr	r0, [r0, #8]
   1aeec:	lsl	r2, r3, #2
   1aef0:	ldr	r1, [r1, #8]
   1aef4:	add	r0, r0, r2
   1aef8:	add	r2, r1, r2
   1aefc:	b	1af10 <__assert_fail@plt+0x9de4>
   1af00:	ldr	ip, [r0, #-4]!
   1af04:	ldr	r1, [r2, #-4]!
   1af08:	cmp	ip, r1
   1af0c:	bne	1aedc <__assert_fail@plt+0x9db0>
   1af10:	subs	r3, r3, #1
   1af14:	bcs	1af00 <__assert_fail@plt+0x9dd4>
   1af18:	mov	r0, #0
   1af1c:	bx	lr
   1af20:	str	r4, [sp, #-8]!
   1af24:	mov	r4, r0
   1af28:	str	lr, [sp, #4]
   1af2c:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1af30:	ldr	r3, [r4, #4]
   1af34:	cmp	r3, #0
   1af38:	rsblt	r3, r3, #0
   1af3c:	str	r3, [r4, #4]
   1af40:	ldr	r4, [sp]
   1af44:	add	sp, sp, #4
   1af48:	pop	{pc}		; (ldr pc, [sp], #4)
   1af4c:	str	r4, [sp, #-8]!
   1af50:	mov	r4, r0
   1af54:	str	lr, [sp, #4]
   1af58:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1af5c:	ldr	r3, [r4, #4]
   1af60:	rsb	r3, r3, #0
   1af64:	str	r3, [r4, #4]
   1af68:	ldr	r4, [sp]
   1af6c:	add	sp, sp, #4
   1af70:	pop	{pc}		; (ldr pc, [sp], #4)
   1af74:	ldr	r2, [r1, #4]
   1af78:	str	r4, [sp, #-8]!
   1af7c:	str	lr, [sp, #4]
   1af80:	ldr	r4, [r0, #4]
   1af84:	ldr	ip, [r0]
   1af88:	ldr	lr, [r1]
   1af8c:	str	r2, [r0, #4]
   1af90:	ldr	r3, [r0, #8]
   1af94:	str	r4, [r1, #4]
   1af98:	ldr	r2, [r1, #8]
   1af9c:	str	lr, [r0]
   1afa0:	ldr	r4, [sp]
   1afa4:	add	sp, sp, #4
   1afa8:	str	ip, [r1]
   1afac:	str	r2, [r0, #8]
   1afb0:	str	r3, [r1, #8]
   1afb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1afb8:	strd	r4, [sp, #-12]!
   1afbc:	mov	r4, r1
   1afc0:	mov	r5, r0
   1afc4:	ldr	r3, [r2, #4]
   1afc8:	str	lr, [sp, #8]
   1afcc:	sub	sp, sp, #12
   1afd0:	ldr	lr, [r1, #4]
   1afd4:	teq	lr, r3
   1afd8:	bmi	1b000 <__assert_fail@plt+0x9ed4>
   1afdc:	bl	187f4 <__assert_fail@plt+0x76c8>
   1afe0:	ldr	r3, [r4, #4]
   1afe4:	cmp	r3, #0
   1afe8:	rsblt	r0, r0, #0
   1afec:	str	r0, [r5, #4]
   1aff0:	add	sp, sp, #12
   1aff4:	ldrd	r4, [sp]
   1aff8:	add	sp, sp, #8
   1affc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b000:	add	ip, r2, #8
   1b004:	mov	r1, lr
   1b008:	add	r2, r4, #8
   1b00c:	str	ip, [sp]
   1b010:	bl	18a3c <__assert_fail@plt+0x7910>
   1b014:	b	1afe0 <__assert_fail@plt+0x9eb4>
   1b018:	ldr	ip, [pc, #132]	; 1b0a4 <__assert_fail@plt+0x9f78>
   1b01c:	mov	r3, #0
   1b020:	cmp	r2, #0
   1b024:	strd	r4, [sp, #-16]!
   1b028:	mov	r5, r0
   1b02c:	str	r6, [sp, #8]
   1b030:	mov	r6, r1
   1b034:	str	lr, [sp, #12]
   1b038:	sub	sp, sp, #16
   1b03c:	add	r4, sp, #4
   1b040:	str	r3, [sp, #4]
   1b044:	str	r3, [sp, #8]
   1b048:	str	ip, [sp, #12]
   1b04c:	beq	1b05c <__assert_fail@plt+0x9f30>
   1b050:	mov	r1, r2
   1b054:	mov	r0, r4
   1b058:	bl	18318 <__assert_fail@plt+0x71ec>
   1b05c:	mov	r1, r6
   1b060:	mov	r2, r4
   1b064:	mov	r0, r5
   1b068:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1b06c:	ldr	r1, [sp, #4]
   1b070:	cmp	r1, #0
   1b074:	beq	1b090 <__assert_fail@plt+0x9f64>
   1b078:	movw	r3, #49436	; 0xc11c
   1b07c:	movt	r3, #3
   1b080:	lsl	r1, r1, #2
   1b084:	ldr	r3, [r3, #8]
   1b088:	ldr	r0, [sp, #12]
   1b08c:	blx	r3
   1b090:	add	sp, sp, #16
   1b094:	ldrd	r4, [sp]
   1b098:	ldr	r6, [sp, #8]
   1b09c:	add	sp, sp, #12
   1b0a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0a4:	muleq	r2, r8, r9
   1b0a8:	strd	r4, [sp, #-16]!
   1b0ac:	mov	r4, r0
   1b0b0:	mov	r5, r1
   1b0b4:	mov	r1, r2
   1b0b8:	str	r6, [sp, #8]
   1b0bc:	str	lr, [sp, #12]
   1b0c0:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1b0c4:	ldr	r3, [r4, #4]
   1b0c8:	mov	r2, r5
   1b0cc:	mov	r1, r4
   1b0d0:	mov	r0, r4
   1b0d4:	ldr	r6, [sp, #8]
   1b0d8:	ldr	lr, [sp, #12]
   1b0dc:	rsb	r3, r3, #0
   1b0e0:	str	r3, [r4, #4]
   1b0e4:	ldrd	r4, [sp]
   1b0e8:	add	sp, sp, #16
   1b0ec:	b	1b018 <__assert_fail@plt+0x9eec>
   1b0f0:	mov	r3, r2
   1b0f4:	mov	r2, r1
   1b0f8:	str	r4, [sp, #-8]!
   1b0fc:	mov	r1, r3
   1b100:	mov	r4, r0
   1b104:	str	lr, [sp, #4]
   1b108:	bl	1b0a8 <__assert_fail@plt+0x9f7c>
   1b10c:	mov	r1, r4
   1b110:	mov	r0, r4
   1b114:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1b118:	ldr	r3, [r4, #4]
   1b11c:	rsb	r3, r3, #0
   1b120:	str	r3, [r4, #4]
   1b124:	ldr	r4, [sp]
   1b128:	add	sp, sp, #4
   1b12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b130:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b134:	strd	r6, [sp, #8]
   1b138:	subs	r7, r1, #0
   1b13c:	strd	r8, [sp, #16]
   1b140:	strd	sl, [sp, #24]
   1b144:	str	lr, [sp, #32]
   1b148:	sub	sp, sp, #4
   1b14c:	streq	r7, [r0, #4]
   1b150:	beq	1b1ec <__assert_fail@plt+0xa0c0>
   1b154:	mov	r6, r0
   1b158:	ldr	r0, [sp, #40]	; 0x28
   1b15c:	eor	r4, r7, r7, asr #31
   1b160:	cmp	r7, #0
   1b164:	mov	fp, r2
   1b168:	lsr	r1, r3, #5
   1b16c:	movle	r2, #0
   1b170:	movgt	r2, #1
   1b174:	sub	r4, r4, r7, asr #31
   1b178:	and	r9, r3, #31
   1b17c:	sub	r4, r4, r1
   1b180:	cmp	r0, r2
   1b184:	beq	1b208 <__assert_fail@plt+0xa0dc>
   1b188:	cmp	r4, #0
   1b18c:	lslgt	sl, r1, #2
   1b190:	movgt	r8, #0
   1b194:	ble	1b2a0 <__assert_fail@plt+0xa174>
   1b198:	ldr	r3, [r6]
   1b19c:	cmp	r4, r3
   1b1a0:	bgt	1b2ac <__assert_fail@plt+0xa180>
   1b1a4:	cmp	r9, #0
   1b1a8:	ldr	ip, [fp]
   1b1ac:	ldr	r5, [r6, #8]
   1b1b0:	bne	1b2c8 <__assert_fail@plt+0xa19c>
   1b1b4:	sub	sl, sl, #4
   1b1b8:	sub	r2, r5, #4
   1b1bc:	add	ip, ip, sl
   1b1c0:	mov	r3, r9
   1b1c4:	ldr	r1, [ip, #4]!
   1b1c8:	add	r3, r3, #1
   1b1cc:	cmp	r4, r3
   1b1d0:	str	r1, [r2, #4]!
   1b1d4:	bgt	1b1c4 <__assert_fail@plt+0xa098>
   1b1d8:	cmp	r8, #0
   1b1dc:	str	r4, [r6, #4]
   1b1e0:	bne	1b26c <__assert_fail@plt+0xa140>
   1b1e4:	cmp	r7, #0
   1b1e8:	blt	1b284 <__assert_fail@plt+0xa158>
   1b1ec:	add	sp, sp, #4
   1b1f0:	ldrd	r4, [sp]
   1b1f4:	ldrd	r6, [sp, #8]
   1b1f8:	ldrd	r8, [sp, #16]
   1b1fc:	ldrd	sl, [sp, #24]
   1b200:	add	sp, sp, #32
   1b204:	pop	{pc}		; (ldr pc, [sp], #4)
   1b208:	cmp	r4, #0
   1b20c:	ble	1b264 <__assert_fail@plt+0xa138>
   1b210:	cmp	r1, #0
   1b214:	lsl	sl, r1, #2
   1b218:	ldr	r0, [fp]
   1b21c:	beq	1b24c <__assert_fail@plt+0xa120>
   1b220:	sub	r3, sl, #4
   1b224:	ldr	r2, [r0, r3]
   1b228:	add	r3, r0, r3
   1b22c:	cmp	r2, #0
   1b230:	beq	1b244 <__assert_fail@plt+0xa118>
   1b234:	b	1b2f0 <__assert_fail@plt+0xa1c4>
   1b238:	ldr	r2, [r3, #-4]!
   1b23c:	cmp	r2, #0
   1b240:	bne	1b2f0 <__assert_fail@plt+0xa1c4>
   1b244:	subs	r1, r1, #1
   1b248:	bne	1b238 <__assert_fail@plt+0xa10c>
   1b24c:	ldr	r3, [r0, sl]
   1b250:	mvn	r2, #0
   1b254:	bics	r3, r3, r2, lsl r9
   1b258:	movne	r8, #1
   1b25c:	moveq	r8, #0
   1b260:	b	1b198 <__assert_fail@plt+0xa06c>
   1b264:	mov	r3, #0
   1b268:	str	r3, [r6, #4]
   1b26c:	mov	r2, #1
   1b270:	mov	r1, r6
   1b274:	mov	r0, r6
   1b278:	bl	1b018 <__assert_fail@plt+0x9eec>
   1b27c:	cmp	r7, #0
   1b280:	bge	1b1ec <__assert_fail@plt+0xa0c0>
   1b284:	mov	r1, r6
   1b288:	mov	r0, r6
   1b28c:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1b290:	ldr	r3, [r6, #4]
   1b294:	rsb	r3, r3, #0
   1b298:	str	r3, [r6, #4]
   1b29c:	b	1b1ec <__assert_fail@plt+0xa0c0>
   1b2a0:	mov	r3, #0
   1b2a4:	str	r3, [r6, #4]
   1b2a8:	b	1b1e4 <__assert_fail@plt+0xa0b8>
   1b2ac:	mov	r1, r4
   1b2b0:	mov	r0, r6
   1b2b4:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1b2b8:	cmp	r9, #0
   1b2bc:	mov	r5, r0
   1b2c0:	ldr	ip, [fp]
   1b2c4:	beq	1b1b4 <__assert_fail@plt+0xa088>
   1b2c8:	mov	r3, r9
   1b2cc:	mov	r2, r4
   1b2d0:	add	r1, ip, sl
   1b2d4:	mov	r0, r5
   1b2d8:	bl	193d0 <__assert_fail@plt+0x82a4>
   1b2dc:	sub	r3, r4, #-1073741823	; 0xc0000001
   1b2e0:	ldr	r3, [r5, r3, lsl #2]
   1b2e4:	cmp	r3, #0
   1b2e8:	subeq	r4, r4, #1
   1b2ec:	b	1b1d8 <__assert_fail@plt+0xa0ac>
   1b2f0:	mov	r8, #1
   1b2f4:	b	1b198 <__assert_fail@plt+0xa06c>
   1b2f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b2fc:	strd	r6, [sp, #8]
   1b300:	ldr	r6, [r0, #4]
   1b304:	str	lr, [sp, #16]
   1b308:	sub	sp, sp, #12
   1b30c:	cmp	r6, #0
   1b310:	ble	1b370 <__assert_fail@plt+0xa244>
   1b314:	mov	r5, r0
   1b318:	mov	ip, #0
   1b31c:	ldr	r2, [r5, #8]!
   1b320:	mov	r4, r0
   1b324:	mov	r3, ip
   1b328:	mov	r1, ip
   1b32c:	ldr	r0, [r2]
   1b330:	str	ip, [sp]
   1b334:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   1b338:	mov	ip, #2
   1b33c:	mov	r7, r0
   1b340:	mov	r2, r5
   1b344:	mov	r0, r4
   1b348:	mov	r1, r6
   1b34c:	mov	r3, r7
   1b350:	str	ip, [sp]
   1b354:	bl	1b130 <__assert_fail@plt+0xa004>
   1b358:	mov	r0, r7
   1b35c:	add	sp, sp, #12
   1b360:	ldrd	r4, [sp]
   1b364:	ldrd	r6, [sp, #8]
   1b368:	add	sp, sp, #16
   1b36c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b370:	movw	r1, #43800	; 0xab18
   1b374:	movt	r1, #2
   1b378:	ldr	r3, [pc, #12]	; 1b38c <__assert_fail@plt+0xa260>
   1b37c:	movw	r0, #44424	; 0xad88
   1b380:	movt	r0, #2
   1b384:	movw	r2, #2723	; 0xaa3
   1b388:	bl	1112c <__assert_fail@plt>
   1b38c:			; <UNDEFINED> instruction: 0x0002a9b0
   1b390:	strd	r4, [sp, #-12]!
   1b394:	mov	r4, r1
   1b398:	mov	r5, r0
   1b39c:	ldr	r3, [r2, #4]
   1b3a0:	str	lr, [sp, #8]
   1b3a4:	sub	sp, sp, #12
   1b3a8:	ldr	lr, [r1, #4]
   1b3ac:	teq	lr, r3
   1b3b0:	bmi	1b3e8 <__assert_fail@plt+0xa2bc>
   1b3b4:	add	ip, r2, #8
   1b3b8:	mov	r1, lr
   1b3bc:	add	r2, r4, #8
   1b3c0:	str	ip, [sp]
   1b3c4:	bl	18a3c <__assert_fail@plt+0x7910>
   1b3c8:	ldr	r3, [r4, #4]
   1b3cc:	cmp	r3, #0
   1b3d0:	rsblt	r0, r0, #0
   1b3d4:	str	r0, [r5, #4]
   1b3d8:	add	sp, sp, #12
   1b3dc:	ldrd	r4, [sp]
   1b3e0:	add	sp, sp, #8
   1b3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3e8:	bl	187f4 <__assert_fail@plt+0x76c8>
   1b3ec:	b	1b3c8 <__assert_fail@plt+0xa29c>
   1b3f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b3f4:	ldr	r5, [r3, #4]
   1b3f8:	strd	r6, [sp, #8]
   1b3fc:	strd	r8, [sp, #16]
   1b400:	mov	r9, r3
   1b404:	strd	sl, [sp, #24]
   1b408:	str	lr, [sp, #32]
   1b40c:	sub	sp, sp, #84	; 0x54
   1b410:	cmp	r5, #0
   1b414:	ldr	r6, [r2, #4]
   1b418:	beq	1b8b4 <__assert_fail@plt+0xa788>
   1b41c:	cmp	r6, #0
   1b420:	mov	r7, r0
   1b424:	mov	r8, r1
   1b428:	beq	1b63c <__assert_fail@plt+0xa510>
   1b42c:	eor	r4, r5, r5, asr #31
   1b430:	mov	r3, r2
   1b434:	eor	sl, r6, r6, asr #31
   1b438:	sub	r4, r4, r5, asr #31
   1b43c:	eor	r5, r5, r6
   1b440:	sub	sl, sl, r6, asr #31
   1b444:	cmp	sl, r4
   1b448:	bge	1b4ac <__assert_fail@plt+0xa380>
   1b44c:	ldr	r2, [sp, #120]	; 0x78
   1b450:	cmp	r5, #0
   1b454:	cmpge	r2, #1
   1b458:	bne	1b658 <__assert_fail@plt+0xa52c>
   1b45c:	cmp	r1, #0
   1b460:	beq	1b474 <__assert_fail@plt+0xa348>
   1b464:	mov	r2, r9
   1b468:	mov	r1, r3
   1b46c:	mov	r0, r8
   1b470:	bl	1b390 <__assert_fail@plt+0xa264>
   1b474:	cmp	r7, #0
   1b478:	beq	1b488 <__assert_fail@plt+0xa35c>
   1b47c:	mov	r0, r7
   1b480:	mov	r1, #1
   1b484:	bl	18318 <__assert_fail@plt+0x71ec>
   1b488:	mov	r6, #1
   1b48c:	mov	r0, r6
   1b490:	add	sp, sp, #84	; 0x54
   1b494:	ldrd	r4, [sp]
   1b498:	ldrd	r6, [sp, #8]
   1b49c:	ldrd	r8, [sp, #16]
   1b4a0:	ldrd	sl, [sp, #24]
   1b4a4:	add	sp, sp, #32
   1b4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4ac:	ldr	r2, [pc, #1064]	; 1b8dc <__assert_fail@plt+0xa7b0>
   1b4b0:	mov	r1, r3
   1b4b4:	sub	r3, sl, r4
   1b4b8:	mov	fp, #0
   1b4bc:	add	r0, sp, #52	; 0x34
   1b4c0:	str	r3, [sp, #24]
   1b4c4:	add	r3, r3, #1
   1b4c8:	str	r3, [sp, #16]
   1b4cc:	str	fp, [sp, #52]	; 0x34
   1b4d0:	str	fp, [sp, #56]	; 0x38
   1b4d4:	str	r2, [sp, #60]	; 0x3c
   1b4d8:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1b4dc:	ldr	r2, [sp, #60]	; 0x3c
   1b4e0:	cmp	r7, fp
   1b4e4:	moveq	fp, r7
   1b4e8:	str	r2, [sp, #12]
   1b4ec:	beq	1b530 <__assert_fail@plt+0xa404>
   1b4f0:	ldr	r3, [sp, #16]
   1b4f4:	movw	r2, #49436	; 0xc11c
   1b4f8:	movt	r2, #3
   1b4fc:	str	fp, [sp, #44]	; 0x2c
   1b500:	ldr	r2, [r2, #4]
   1b504:	lsls	r3, r3, #5
   1b508:	moveq	r1, fp
   1b50c:	movne	r1, #1
   1b510:	sub	r3, r3, r1
   1b514:	lsr	r3, r3, #5
   1b518:	add	r3, r3, #1
   1b51c:	lsl	r0, r3, #2
   1b520:	str	r3, [sp, #40]	; 0x28
   1b524:	blx	r2
   1b528:	mov	fp, r0
   1b52c:	str	r0, [sp, #48]	; 0x30
   1b530:	ldr	r3, [r9, #8]
   1b534:	mov	r2, r4
   1b538:	add	r0, sp, #64	; 0x40
   1b53c:	mov	r1, r3
   1b540:	str	r3, [sp, #20]
   1b544:	bl	1a1c0 <__assert_fail@plt+0x9094>
   1b548:	cmp	r4, #2
   1b54c:	ldr	r3, [sp, #20]
   1b550:	ble	1b560 <__assert_fail@plt+0xa434>
   1b554:	ldr	r2, [sp, #64]	; 0x40
   1b558:	cmp	r2, #0
   1b55c:	bne	1b7c4 <__assert_fail@plt+0xa698>
   1b560:	add	r0, sp, #64	; 0x40
   1b564:	mov	r2, sl
   1b568:	str	r4, [sp]
   1b56c:	ldr	r1, [sp, #12]
   1b570:	str	r0, [sp, #4]
   1b574:	mov	r0, fp
   1b578:	bl	194a8 <__assert_fail@plt+0x837c>
   1b57c:	lsl	r3, r4, #2
   1b580:	str	r3, [sp, #20]
   1b584:	cmp	fp, #0
   1b588:	beq	1b5b0 <__assert_fail@plt+0xa484>
   1b58c:	ldr	r2, [sp, #16]
   1b590:	cmp	r5, #0
   1b594:	ldr	r3, [sp, #24]
   1b598:	ldr	r3, [fp, r3, lsl #2]
   1b59c:	clz	r3, r3
   1b5a0:	lsr	r3, r3, #5
   1b5a4:	subge	r3, r2, r3
   1b5a8:	sublt	r3, r3, r2
   1b5ac:	str	r3, [sp, #44]	; 0x2c
   1b5b0:	ldr	r3, [sp, #12]
   1b5b4:	ldr	r2, [sp, #20]
   1b5b8:	add	r3, r3, r2
   1b5bc:	ldr	r2, [r3, #-4]!
   1b5c0:	cmp	r2, #0
   1b5c4:	bne	1b7b8 <__assert_fail@plt+0xa68c>
   1b5c8:	subs	r4, r4, #1
   1b5cc:	bne	1b5bc <__assert_fail@plt+0xa490>
   1b5d0:	mov	sl, r4
   1b5d4:	mov	r1, r4
   1b5d8:	ldr	r3, [sp, #120]	; 0x78
   1b5dc:	cmp	r6, #0
   1b5e0:	rsblt	r2, r4, #0
   1b5e4:	movge	r2, r4
   1b5e8:	str	r2, [sp, #56]	; 0x38
   1b5ec:	cmp	r3, #0
   1b5f0:	lsreq	r3, r5, #31
   1b5f4:	movne	r3, #0
   1b5f8:	cmp	r3, #0
   1b5fc:	beq	1b6e4 <__assert_fail@plt+0xa5b8>
   1b600:	cmp	r4, #0
   1b604:	beq	1b700 <__assert_fail@plt+0xa5d4>
   1b608:	cmp	r7, #0
   1b60c:	beq	1b888 <__assert_fail@plt+0xa75c>
   1b610:	add	r1, sp, #40	; 0x28
   1b614:	mov	r2, #1
   1b618:	mov	r0, r1
   1b61c:	bl	1b0f0 <__assert_fail@plt+0x9fc4>
   1b620:	cmp	r8, #0
   1b624:	beq	1b708 <__assert_fail@plt+0xa5dc>
   1b628:	add	r1, sp, #52	; 0x34
   1b62c:	mov	r2, r9
   1b630:	mov	r0, r1
   1b634:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1b638:	b	1b878 <__assert_fail@plt+0xa74c>
   1b63c:	cmp	r0, #0
   1b640:	strne	r6, [r0, #4]
   1b644:	cmp	r1, #0
   1b648:	beq	1b48c <__assert_fail@plt+0xa360>
   1b64c:	mov	r3, #0
   1b650:	str	r3, [r1, #4]
   1b654:	b	1b48c <__assert_fail@plt+0xa360>
   1b658:	ldr	r2, [sp, #120]	; 0x78
   1b65c:	cmp	r2, #0
   1b660:	lsreq	r5, r5, #31
   1b664:	movne	r5, #0
   1b668:	cmp	r5, #0
   1b66c:	beq	1b6b8 <__assert_fail@plt+0xa58c>
   1b670:	cmp	r1, #0
   1b674:	beq	1b688 <__assert_fail@plt+0xa55c>
   1b678:	mov	r2, r9
   1b67c:	mov	r1, r3
   1b680:	mov	r0, r8
   1b684:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1b688:	cmp	r7, #0
   1b68c:	beq	1b488 <__assert_fail@plt+0xa35c>
   1b690:	ldr	r3, [r7]
   1b694:	mvn	r2, #0
   1b698:	str	r2, [r7, #4]
   1b69c:	cmp	r3, #0
   1b6a0:	ble	1b898 <__assert_fail@plt+0xa76c>
   1b6a4:	ldr	r0, [r7, #8]
   1b6a8:	mov	r3, #1
   1b6ac:	mov	r6, r3
   1b6b0:	str	r3, [r0]
   1b6b4:	b	1b48c <__assert_fail@plt+0xa360>
   1b6b8:	cmp	r1, #0
   1b6bc:	beq	1b6cc <__assert_fail@plt+0xa5a0>
   1b6c0:	mov	r1, r3
   1b6c4:	mov	r0, r8
   1b6c8:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1b6cc:	cmp	r7, #0
   1b6d0:	beq	1b488 <__assert_fail@plt+0xa35c>
   1b6d4:	mov	r3, #0
   1b6d8:	mov	r6, #1
   1b6dc:	str	r3, [r7, #4]
   1b6e0:	b	1b48c <__assert_fail@plt+0xa360>
   1b6e4:	ldr	r3, [sp, #120]	; 0x78
   1b6e8:	cmp	r5, #0
   1b6ec:	cmpge	r3, #1
   1b6f0:	moveq	r5, #1
   1b6f4:	movne	r5, #0
   1b6f8:	tst	r1, r5
   1b6fc:	bne	1b848 <__assert_fail@plt+0xa71c>
   1b700:	cmp	r7, #0
   1b704:	beq	1b754 <__assert_fail@plt+0xa628>
   1b708:	ldr	r3, [sp, #40]	; 0x28
   1b70c:	ldr	r0, [sp, #44]	; 0x2c
   1b710:	ldr	r1, [r7]
   1b714:	str	r3, [r7]
   1b718:	ldr	r3, [r7, #4]
   1b71c:	str	r0, [r7, #4]
   1b720:	ldr	r0, [r7, #8]
   1b724:	cmp	r1, #0
   1b728:	str	r1, [sp, #40]	; 0x28
   1b72c:	ldr	r2, [sp, #48]	; 0x30
   1b730:	str	r3, [sp, #44]	; 0x2c
   1b734:	str	r0, [sp, #48]	; 0x30
   1b738:	str	r2, [r7, #8]
   1b73c:	beq	1b754 <__assert_fail@plt+0xa628>
   1b740:	movw	r3, #49436	; 0xc11c
   1b744:	movt	r3, #3
   1b748:	lsl	r1, r1, #2
   1b74c:	ldr	r3, [r3, #8]
   1b750:	blx	r3
   1b754:	ldr	r3, [sp, #52]	; 0x34
   1b758:	cmp	r8, #0
   1b75c:	moveq	r1, r3
   1b760:	beq	1b790 <__assert_fail@plt+0xa664>
   1b764:	ldr	r2, [r8, #4]
   1b768:	ldr	r1, [sp, #56]	; 0x38
   1b76c:	ldr	r0, [sp, #60]	; 0x3c
   1b770:	str	r2, [sp, #56]	; 0x38
   1b774:	ldr	r2, [r8, #8]
   1b778:	str	r1, [r8, #4]
   1b77c:	ldr	r1, [r8]
   1b780:	str	r3, [r8]
   1b784:	str	r0, [r8, #8]
   1b788:	str	r1, [sp, #52]	; 0x34
   1b78c:	str	r2, [sp, #60]	; 0x3c
   1b790:	cmp	r1, #0
   1b794:	beq	1b7b0 <__assert_fail@plt+0xa684>
   1b798:	movw	r3, #49436	; 0xc11c
   1b79c:	movt	r3, #3
   1b7a0:	lsl	r1, r1, #2
   1b7a4:	ldr	r3, [r3, #8]
   1b7a8:	ldr	r0, [sp, #60]	; 0x3c
   1b7ac:	blx	r3
   1b7b0:	mov	r6, sl
   1b7b4:	b	1b48c <__assert_fail@plt+0xa360>
   1b7b8:	mov	r1, #1
   1b7bc:	mov	sl, r1
   1b7c0:	b	1b5d8 <__assert_fail@plt+0xa4ac>
   1b7c4:	lsl	r0, r4, #2
   1b7c8:	str	r3, [sp, #36]	; 0x24
   1b7cc:	movw	r3, #49436	; 0xc11c
   1b7d0:	movt	r3, #3
   1b7d4:	ldr	r2, [r3, #4]
   1b7d8:	str	r0, [sp, #20]
   1b7dc:	str	r3, [sp, #32]
   1b7e0:	blx	r2
   1b7e4:	ldr	r3, [sp, #36]	; 0x24
   1b7e8:	mov	r2, r4
   1b7ec:	str	r0, [sp, #28]
   1b7f0:	mov	r1, r3
   1b7f4:	ldr	r3, [sp, #64]	; 0x40
   1b7f8:	bl	19164 <__assert_fail@plt+0x8038>
   1b7fc:	cmp	r0, #0
   1b800:	bne	1b8c0 <__assert_fail@plt+0xa794>
   1b804:	mov	r2, sl
   1b808:	add	r0, sp, #64	; 0x40
   1b80c:	str	r4, [sp]
   1b810:	ldr	sl, [sp, #28]
   1b814:	str	r0, [sp, #4]
   1b818:	mov	r0, fp
   1b81c:	ldr	r1, [sp, #12]
   1b820:	mov	r3, sl
   1b824:	bl	194a8 <__assert_fail@plt+0x837c>
   1b828:	cmp	sl, #0
   1b82c:	beq	1b584 <__assert_fail@plt+0xa458>
   1b830:	mov	r0, sl
   1b834:	ldr	r1, [sp, #20]
   1b838:	ldr	r3, [sp, #32]
   1b83c:	ldr	r3, [r3, #8]
   1b840:	blx	r3
   1b844:	b	1b584 <__assert_fail@plt+0xa458>
   1b848:	cmp	r7, #0
   1b84c:	beq	1b8a8 <__assert_fail@plt+0xa77c>
   1b850:	add	r1, sp, #40	; 0x28
   1b854:	mov	r2, #1
   1b858:	mov	r0, r1
   1b85c:	bl	1b018 <__assert_fail@plt+0x9eec>
   1b860:	cmp	r8, #0
   1b864:	beq	1b708 <__assert_fail@plt+0xa5dc>
   1b868:	add	r1, sp, #52	; 0x34
   1b86c:	mov	r2, r9
   1b870:	mov	r0, r1
   1b874:	bl	1b390 <__assert_fail@plt+0xa264>
   1b878:	cmp	r7, #0
   1b87c:	bne	1b708 <__assert_fail@plt+0xa5dc>
   1b880:	ldr	r3, [sp, #52]	; 0x34
   1b884:	b	1b764 <__assert_fail@plt+0xa638>
   1b888:	cmp	r8, #0
   1b88c:	bne	1b628 <__assert_fail@plt+0xa4fc>
   1b890:	ldr	r1, [sp, #52]	; 0x34
   1b894:	b	1b790 <__assert_fail@plt+0xa664>
   1b898:	mov	r0, r7
   1b89c:	mov	r1, #1
   1b8a0:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1b8a4:	b	1b6a8 <__assert_fail@plt+0xa57c>
   1b8a8:	cmp	r8, #0
   1b8ac:	bne	1b868 <__assert_fail@plt+0xa73c>
   1b8b0:	b	1b890 <__assert_fail@plt+0xa764>
   1b8b4:	movw	r0, #44440	; 0xad98
   1b8b8:	movt	r0, #2
   1b8bc:	bl	17c40 <__assert_fail@plt+0x6b14>
   1b8c0:	movw	r1, #43800	; 0xab18
   1b8c4:	movt	r1, #2
   1b8c8:	ldr	r3, [pc, #16]	; 1b8e0 <__assert_fail@plt+0xa7b4>
   1b8cc:	movw	r0, #43988	; 0xabd4
   1b8d0:	movt	r0, #2
   1b8d4:	movw	r2, #1155	; 0x483
   1b8d8:	bl	1112c <__assert_fail@plt>
   1b8dc:	muleq	r2, r8, r9
   1b8e0:	andeq	sl, r2, r0, asr #19
   1b8e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b8e8:	mov	ip, #0
   1b8ec:	cmp	r3, #0
   1b8f0:	strd	r6, [sp, #8]
   1b8f4:	mov	r4, r1
   1b8f8:	mov	r6, r0
   1b8fc:	str	lr, [sp, #20]
   1b900:	ldr	lr, [pc, #244]	; 1b9fc <__assert_fail@plt+0xa8d0>
   1b904:	str	r8, [sp, #16]
   1b908:	sub	sp, sp, #32
   1b90c:	mov	r8, r2
   1b910:	add	r5, sp, #20
   1b914:	ldr	r7, [sp, #56]	; 0x38
   1b918:	str	ip, [sp, #8]
   1b91c:	str	ip, [sp, #12]
   1b920:	str	lr, [sp, #16]
   1b924:	str	ip, [sp, #20]
   1b928:	str	ip, [sp, #24]
   1b92c:	str	lr, [sp, #28]
   1b930:	beq	1b940 <__assert_fail@plt+0xa814>
   1b934:	mov	r1, r3
   1b938:	mov	r0, r5
   1b93c:	bl	18318 <__assert_fail@plt+0x71ec>
   1b940:	add	r1, sp, #8
   1b944:	mov	r3, r5
   1b948:	str	r7, [sp]
   1b94c:	mov	r2, r8
   1b950:	mov	r0, r6
   1b954:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1b958:	ldr	r1, [sp, #20]
   1b95c:	cmp	r1, #0
   1b960:	beq	1b97c <__assert_fail@plt+0xa850>
   1b964:	movw	r3, #49436	; 0xc11c
   1b968:	movt	r3, #3
   1b96c:	lsl	r1, r1, #2
   1b970:	ldr	r3, [r3, #8]
   1b974:	ldr	r0, [sp, #28]
   1b978:	blx	r3
   1b97c:	ldr	r3, [sp, #12]
   1b980:	cmp	r3, #0
   1b984:	ldrne	r2, [sp, #16]
   1b988:	moveq	r5, r3
   1b98c:	ldrne	r5, [r2]
   1b990:	cmp	r4, #0
   1b994:	ldr	r2, [sp, #8]
   1b998:	moveq	r1, r2
   1b99c:	beq	1b9c0 <__assert_fail@plt+0xa894>
   1b9a0:	ldm	r4, {r1, ip}
   1b9a4:	strd	r2, [r4]
   1b9a8:	ldr	r3, [r4, #8]
   1b9ac:	ldr	r0, [sp, #16]
   1b9b0:	str	r1, [sp, #8]
   1b9b4:	str	ip, [sp, #12]
   1b9b8:	str	r3, [sp, #16]
   1b9bc:	str	r0, [r4, #8]
   1b9c0:	cmp	r1, #0
   1b9c4:	beq	1b9e0 <__assert_fail@plt+0xa8b4>
   1b9c8:	movw	r3, #49436	; 0xc11c
   1b9cc:	movt	r3, #3
   1b9d0:	lsl	r1, r1, #2
   1b9d4:	ldr	r3, [r3, #8]
   1b9d8:	ldr	r0, [sp, #16]
   1b9dc:	blx	r3
   1b9e0:	mov	r0, r5
   1b9e4:	add	sp, sp, #32
   1b9e8:	ldrd	r4, [sp]
   1b9ec:	ldrd	r6, [sp, #8]
   1b9f0:	ldr	r8, [sp, #16]
   1b9f4:	add	sp, sp, #20
   1b9f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9fc:	muleq	r2, r8, r9
   1ba00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba04:	ldr	ip, [r2, #4]
   1ba08:	strd	r6, [sp, #8]
   1ba0c:	ldr	r6, [r1, #4]
   1ba10:	strd	r8, [sp, #16]
   1ba14:	strd	sl, [sp, #24]
   1ba18:	str	lr, [sp, #32]
   1ba1c:	sub	sp, sp, #20
   1ba20:	cmp	ip, #0
   1ba24:	cmpne	r6, #0
   1ba28:	moveq	r3, #0
   1ba2c:	streq	r3, [r0, #4]
   1ba30:	beq	1bb10 <__assert_fail@plt+0xa9e4>
   1ba34:	eor	r3, r6, r6, asr #31
   1ba38:	mov	fp, r1
   1ba3c:	mov	r4, r0
   1ba40:	eor	r1, ip, ip, asr #31
   1ba44:	movw	r7, #49436	; 0xc11c
   1ba48:	movt	r7, #3
   1ba4c:	sub	r3, r3, r6, asr #31
   1ba50:	mov	sl, r2
   1ba54:	ldr	r2, [r7, #4]
   1ba58:	sub	r1, r1, ip, asr #31
   1ba5c:	eor	r6, r6, ip
   1ba60:	add	r9, r3, r1
   1ba64:	str	r3, [sp, #8]
   1ba68:	lsls	r5, r9, #5
   1ba6c:	str	r1, [sp, #12]
   1ba70:	movne	r0, #1
   1ba74:	moveq	r0, #0
   1ba78:	sub	r5, r5, r0
   1ba7c:	lsr	r5, r5, #5
   1ba80:	add	r5, r5, #1
   1ba84:	lsl	r0, r5, #2
   1ba88:	blx	r2
   1ba8c:	ldr	r3, [sp, #8]
   1ba90:	mov	r8, r0
   1ba94:	ldr	r1, [sp, #12]
   1ba98:	cmp	r3, r1
   1ba9c:	bge	1bb2c <__assert_fail@plt+0xaa00>
   1baa0:	str	r3, [sp]
   1baa4:	mov	r2, r1
   1baa8:	ldr	r3, [fp, #8]
   1baac:	ldr	r1, [sl, #8]
   1bab0:	bl	18fe4 <__assert_fail@plt+0x7eb8>
   1bab4:	sub	r3, r9, #-1073741823	; 0xc0000001
   1bab8:	ldr	r1, [r4]
   1babc:	cmp	r6, #0
   1bac0:	ldr	r3, [r8, r3, lsl #2]
   1bac4:	str	r5, [r4]
   1bac8:	ldr	r0, [r4, #8]
   1bacc:	clz	r3, r3
   1bad0:	lsr	r3, r3, #5
   1bad4:	subge	r3, r9, r3
   1bad8:	sublt	r3, r3, r9
   1badc:	cmp	r1, #0
   1bae0:	stmib	r4, {r3, r8}
   1bae4:	beq	1bb10 <__assert_fail@plt+0xa9e4>
   1bae8:	ldr	r3, [r7, #8]
   1baec:	lsl	r1, r1, #2
   1baf0:	add	sp, sp, #20
   1baf4:	ldrd	r4, [sp]
   1baf8:	ldrd	r6, [sp, #8]
   1bafc:	ldrd	r8, [sp, #16]
   1bb00:	ldrd	sl, [sp, #24]
   1bb04:	ldr	lr, [sp, #32]
   1bb08:	add	sp, sp, #36	; 0x24
   1bb0c:	bx	r3
   1bb10:	add	sp, sp, #20
   1bb14:	ldrd	r4, [sp]
   1bb18:	ldrd	r6, [sp, #8]
   1bb1c:	ldrd	r8, [sp, #16]
   1bb20:	ldrd	sl, [sp, #24]
   1bb24:	add	sp, sp, #32
   1bb28:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb2c:	str	r1, [sp]
   1bb30:	mov	r2, r3
   1bb34:	ldr	r1, [fp, #8]
   1bb38:	ldr	r3, [sl, #8]
   1bb3c:	bl	18fe4 <__assert_fail@plt+0x7eb8>
   1bb40:	b	1bab4 <__assert_fail@plt+0xa988>
   1bb44:	ldr	ip, [pc, #132]	; 1bbd0 <__assert_fail@plt+0xaaa4>
   1bb48:	mov	r3, #0
   1bb4c:	cmp	r2, #0
   1bb50:	strd	r4, [sp, #-16]!
   1bb54:	mov	r5, r0
   1bb58:	str	r6, [sp, #8]
   1bb5c:	mov	r6, r1
   1bb60:	str	lr, [sp, #12]
   1bb64:	sub	sp, sp, #16
   1bb68:	add	r4, sp, #4
   1bb6c:	str	r3, [sp, #4]
   1bb70:	str	r3, [sp, #8]
   1bb74:	str	ip, [sp, #12]
   1bb78:	beq	1bb88 <__assert_fail@plt+0xaa5c>
   1bb7c:	mov	r1, r2
   1bb80:	mov	r0, r4
   1bb84:	bl	18318 <__assert_fail@plt+0x71ec>
   1bb88:	mov	r1, r6
   1bb8c:	mov	r2, r4
   1bb90:	mov	r0, r5
   1bb94:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1bb98:	ldr	r1, [sp, #4]
   1bb9c:	cmp	r1, #0
   1bba0:	beq	1bbbc <__assert_fail@plt+0xaa90>
   1bba4:	movw	r3, #49436	; 0xc11c
   1bba8:	movt	r3, #3
   1bbac:	lsl	r1, r1, #2
   1bbb0:	ldr	r3, [r3, #8]
   1bbb4:	ldr	r0, [sp, #12]
   1bbb8:	blx	r3
   1bbbc:	add	sp, sp, #16
   1bbc0:	ldrd	r4, [sp]
   1bbc4:	ldr	r6, [sp, #8]
   1bbc8:	add	sp, sp, #12
   1bbcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbd0:	muleq	r2, r8, r9
   1bbd4:	subs	r3, r2, #0
   1bbd8:	blt	1bbe0 <__assert_fail@plt+0xaab4>
   1bbdc:	b	1bb44 <__assert_fail@plt+0xaa18>
   1bbe0:	rsb	r2, r3, #0
   1bbe4:	str	r4, [sp, #-8]!
   1bbe8:	mov	r4, r0
   1bbec:	str	lr, [sp, #4]
   1bbf0:	bl	1bb44 <__assert_fail@plt+0xaa18>
   1bbf4:	mov	r1, r4
   1bbf8:	mov	r0, r4
   1bbfc:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1bc00:	ldr	r3, [r4, #4]
   1bc04:	rsb	r3, r3, #0
   1bc08:	str	r3, [r4, #4]
   1bc0c:	ldr	r4, [sp]
   1bc10:	add	sp, sp, #4
   1bc14:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc1c:	ldr	r5, [r1, #4]
   1bc20:	strd	r6, [sp, #8]
   1bc24:	strd	r8, [sp, #16]
   1bc28:	mov	r9, r0
   1bc2c:	strd	sl, [sp, #24]
   1bc30:	str	lr, [sp, #32]
   1bc34:	sub	sp, sp, #4
   1bc38:	cmp	r5, #0
   1bc3c:	streq	r5, [r0, #4]
   1bc40:	beq	1bcd8 <__assert_fail@plt+0xabac>
   1bc44:	ldr	r3, [r0]
   1bc48:	lsr	sl, r2, #5
   1bc4c:	cmp	r5, #0
   1bc50:	rsblt	r5, r5, #0
   1bc54:	ands	fp, r2, #31
   1bc58:	movne	r2, #1
   1bc5c:	moveq	r2, #0
   1bc60:	add	r7, r5, sl
   1bc64:	mov	r8, r1
   1bc68:	add	r7, r7, r2
   1bc6c:	cmp	r3, r7
   1bc70:	blt	1bcf4 <__assert_fail@plt+0xabc8>
   1bc74:	cmp	fp, #0
   1bc78:	lsl	r4, sl, #2
   1bc7c:	ldr	r6, [r0, #8]
   1bc80:	ldr	r1, [r8, #8]
   1bc84:	bne	1bd10 <__assert_fail@plt+0xabe4>
   1bc88:	lsl	r2, r5, #2
   1bc8c:	sub	r3, r2, #4
   1bc90:	add	r2, r1, r2
   1bc94:	add	r3, r3, r4
   1bc98:	add	r3, r6, r3
   1bc9c:	ldr	r0, [r2, #-4]!
   1bca0:	cmp	r2, r1
   1bca4:	str	r0, [r3], #-4
   1bca8:	bne	1bc9c <__assert_fail@plt+0xab70>
   1bcac:	cmp	sl, #0
   1bcb0:	addne	r3, r6, r4
   1bcb4:	movne	r2, #0
   1bcb8:	beq	1bcc8 <__assert_fail@plt+0xab9c>
   1bcbc:	str	r2, [r3, #-4]!
   1bcc0:	cmp	r6, r3
   1bcc4:	bne	1bcbc <__assert_fail@plt+0xab90>
   1bcc8:	ldr	r3, [r8, #4]
   1bccc:	cmp	r3, #0
   1bcd0:	rsblt	r7, r7, #0
   1bcd4:	str	r7, [r9, #4]
   1bcd8:	add	sp, sp, #4
   1bcdc:	ldrd	r4, [sp]
   1bce0:	ldrd	r6, [sp, #8]
   1bce4:	ldrd	r8, [sp, #16]
   1bce8:	ldrd	sl, [sp, #24]
   1bcec:	add	sp, sp, #32
   1bcf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcf4:	mov	r1, r7
   1bcf8:	lsl	r4, sl, #2
   1bcfc:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1bd00:	cmp	fp, #0
   1bd04:	mov	r6, r0
   1bd08:	ldr	r1, [r8, #8]
   1bd0c:	beq	1bc88 <__assert_fail@plt+0xab5c>
   1bd10:	mov	r3, fp
   1bd14:	mov	r2, r5
   1bd18:	add	r0, r6, r4
   1bd1c:	bl	19164 <__assert_fail@plt+0x8038>
   1bd20:	sub	r3, r7, #-1073741823	; 0xc0000001
   1bd24:	cmp	r0, #0
   1bd28:	subeq	r7, r7, #1
   1bd2c:	str	r0, [r6, r3, lsl #2]
   1bd30:	b	1bcac <__assert_fail@plt+0xab80>
   1bd34:	ldr	ip, [pc, #148]	; 1bdd0 <__assert_fail@plt+0xaca4>
   1bd38:	mov	r3, #0
   1bd3c:	cmp	r2, #0
   1bd40:	strd	r4, [sp, #-16]!
   1bd44:	mov	r5, r0
   1bd48:	str	r6, [sp, #8]
   1bd4c:	mov	r6, r1
   1bd50:	str	lr, [sp, #12]
   1bd54:	sub	sp, sp, #16
   1bd58:	add	r4, sp, #4
   1bd5c:	str	r3, [sp, #4]
   1bd60:	str	r3, [sp, #8]
   1bd64:	str	ip, [sp, #12]
   1bd68:	beq	1bd78 <__assert_fail@plt+0xac4c>
   1bd6c:	mov	r1, r2
   1bd70:	mov	r0, r4
   1bd74:	bl	18318 <__assert_fail@plt+0x71ec>
   1bd78:	mov	r1, r6
   1bd7c:	mov	r2, r4
   1bd80:	mov	r0, r4
   1bd84:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1bd88:	mov	r1, r5
   1bd8c:	mov	r2, r4
   1bd90:	mov	r0, r5
   1bd94:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1bd98:	ldr	r1, [sp, #4]
   1bd9c:	cmp	r1, #0
   1bda0:	beq	1bdbc <__assert_fail@plt+0xac90>
   1bda4:	movw	r3, #49436	; 0xc11c
   1bda8:	movt	r3, #3
   1bdac:	lsl	r1, r1, #2
   1bdb0:	ldr	r3, [r3, #8]
   1bdb4:	ldr	r0, [sp, #12]
   1bdb8:	blx	r3
   1bdbc:	add	sp, sp, #16
   1bdc0:	ldrd	r4, [sp]
   1bdc4:	ldr	r6, [sp, #8]
   1bdc8:	add	sp, sp, #12
   1bdcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdd0:	muleq	r2, r8, r9
   1bdd4:	ldr	ip, [pc, #148]	; 1be70 <__assert_fail@plt+0xad44>
   1bdd8:	mov	r3, #0
   1bddc:	cmp	r2, #0
   1bde0:	strd	r4, [sp, #-16]!
   1bde4:	mov	r5, r0
   1bde8:	str	r6, [sp, #8]
   1bdec:	mov	r6, r1
   1bdf0:	str	lr, [sp, #12]
   1bdf4:	sub	sp, sp, #16
   1bdf8:	add	r4, sp, #4
   1bdfc:	str	r3, [sp, #4]
   1be00:	str	r3, [sp, #8]
   1be04:	str	ip, [sp, #12]
   1be08:	beq	1be18 <__assert_fail@plt+0xacec>
   1be0c:	mov	r1, r2
   1be10:	mov	r0, r4
   1be14:	bl	18318 <__assert_fail@plt+0x71ec>
   1be18:	mov	r1, r6
   1be1c:	mov	r2, r4
   1be20:	mov	r0, r4
   1be24:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1be28:	mov	r1, r5
   1be2c:	mov	r2, r4
   1be30:	mov	r0, r5
   1be34:	bl	1b390 <__assert_fail@plt+0xa264>
   1be38:	ldr	r1, [sp, #4]
   1be3c:	cmp	r1, #0
   1be40:	beq	1be5c <__assert_fail@plt+0xad30>
   1be44:	movw	r3, #49436	; 0xc11c
   1be48:	movt	r3, #3
   1be4c:	lsl	r1, r1, #2
   1be50:	ldr	r3, [r3, #8]
   1be54:	ldr	r0, [sp, #12]
   1be58:	blx	r3
   1be5c:	add	sp, sp, #16
   1be60:	ldrd	r4, [sp]
   1be64:	ldr	r6, [sp, #8]
   1be68:	add	sp, sp, #12
   1be6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be70:	muleq	r2, r8, r9
   1be74:	strd	r4, [sp, #-16]!
   1be78:	mov	r3, r2
   1be7c:	mov	r4, r0
   1be80:	str	r6, [sp, #8]
   1be84:	mov	r6, r2
   1be88:	mov	r0, #0
   1be8c:	ldr	ip, [r6, #4]
   1be90:	mov	r2, r1
   1be94:	mov	r5, r1
   1be98:	str	lr, [sp, #12]
   1be9c:	sub	sp, sp, #8
   1bea0:	lsr	ip, ip, #31
   1bea4:	str	ip, [sp]
   1bea8:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1beac:	mov	r2, r4
   1beb0:	mov	r1, r4
   1beb4:	mov	r0, r4
   1beb8:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1bebc:	mov	r1, r5
   1bec0:	mov	r0, r4
   1bec4:	mov	r2, #2
   1bec8:	bl	1bdd4 <__assert_fail@plt+0xaca8>
   1becc:	mov	ip, #2
   1bed0:	mov	r2, r4
   1bed4:	mov	r1, r4
   1bed8:	mov	r3, r6
   1bedc:	mov	r0, #0
   1bee0:	str	ip, [sp]
   1bee4:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1bee8:	mov	r2, r5
   1beec:	mov	r1, r5
   1bef0:	mov	r0, r5
   1bef4:	add	sp, sp, #8
   1bef8:	ldrd	r4, [sp]
   1befc:	ldr	r6, [sp, #8]
   1bf00:	ldr	lr, [sp, #12]
   1bf04:	add	sp, sp, #16
   1bf08:	b	1ba00 <__assert_fail@plt+0xa8d4>
   1bf0c:	ldr	ip, [pc, #104]	; 1bf7c <__assert_fail@plt+0xae50>
   1bf10:	mov	r3, #0
   1bf14:	str	r4, [sp, #-8]!
   1bf18:	mov	r4, r0
   1bf1c:	str	lr, [sp, #4]
   1bf20:	sub	sp, sp, #16
   1bf24:	add	r0, sp, #4
   1bf28:	str	r3, [sp, #4]
   1bf2c:	str	r3, [sp, #8]
   1bf30:	str	ip, [sp, #12]
   1bf34:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1bf38:	mov	r1, r4
   1bf3c:	add	r2, sp, #4
   1bf40:	mov	r0, r4
   1bf44:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1bf48:	ldr	r1, [sp, #4]
   1bf4c:	cmp	r1, #0
   1bf50:	beq	1bf6c <__assert_fail@plt+0xae40>
   1bf54:	movw	r3, #49436	; 0xc11c
   1bf58:	movt	r3, #3
   1bf5c:	lsl	r1, r1, #2
   1bf60:	ldr	r3, [r3, #8]
   1bf64:	ldr	r0, [sp, #12]
   1bf68:	blx	r3
   1bf6c:	add	sp, sp, #16
   1bf70:	ldr	r4, [sp]
   1bf74:	add	sp, sp, #4
   1bf78:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf7c:	muleq	r2, r8, r9
   1bf80:	ldr	ip, [pc, #104]	; 1bff0 <__assert_fail@plt+0xaec4>
   1bf84:	mov	r3, #0
   1bf88:	str	r4, [sp, #-8]!
   1bf8c:	mov	r4, r0
   1bf90:	str	lr, [sp, #4]
   1bf94:	sub	sp, sp, #16
   1bf98:	add	r0, sp, #4
   1bf9c:	str	r3, [sp, #4]
   1bfa0:	str	r3, [sp, #8]
   1bfa4:	str	ip, [sp, #12]
   1bfa8:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1bfac:	mov	r1, r4
   1bfb0:	add	r2, sp, #4
   1bfb4:	mov	r0, r4
   1bfb8:	bl	1b390 <__assert_fail@plt+0xa264>
   1bfbc:	ldr	r1, [sp, #4]
   1bfc0:	cmp	r1, #0
   1bfc4:	beq	1bfe0 <__assert_fail@plt+0xaeb4>
   1bfc8:	movw	r3, #49436	; 0xc11c
   1bfcc:	movt	r3, #3
   1bfd0:	lsl	r1, r1, #2
   1bfd4:	ldr	r3, [r3, #8]
   1bfd8:	ldr	r0, [sp, #12]
   1bfdc:	blx	r3
   1bfe0:	add	sp, sp, #16
   1bfe4:	ldr	r4, [sp]
   1bfe8:	add	sp, sp, #4
   1bfec:	pop	{pc}		; (ldr pc, [sp], #4)
   1bff0:	muleq	r2, r8, r9
   1bff4:	mov	ip, #1
   1bff8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bffc:	sub	sp, sp, #12
   1c000:	str	ip, [sp]
   1c004:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c008:	add	sp, sp, #12
   1c00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c010:	mov	ip, #0
   1c014:	push	{lr}		; (str lr, [sp, #-4]!)
   1c018:	sub	sp, sp, #12
   1c01c:	str	ip, [sp]
   1c020:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c024:	add	sp, sp, #12
   1c028:	pop	{pc}		; (ldr pc, [sp], #4)
   1c02c:	mov	ip, #2
   1c030:	push	{lr}		; (str lr, [sp, #-4]!)
   1c034:	sub	sp, sp, #12
   1c038:	str	ip, [sp]
   1c03c:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c040:	add	sp, sp, #12
   1c044:	pop	{pc}		; (ldr pc, [sp], #4)
   1c048:	mov	ip, #1
   1c04c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c050:	sub	sp, sp, #12
   1c054:	mov	r3, r2
   1c058:	mov	r2, r1
   1c05c:	mov	r1, #0
   1c060:	str	ip, [sp]
   1c064:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c068:	add	sp, sp, #12
   1c06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c070:	mov	ip, #0
   1c074:	push	{lr}		; (str lr, [sp, #-4]!)
   1c078:	sub	sp, sp, #12
   1c07c:	mov	r3, r2
   1c080:	mov	r2, r1
   1c084:	mov	r1, ip
   1c088:	str	ip, [sp]
   1c08c:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c090:	add	sp, sp, #12
   1c094:	pop	{pc}		; (ldr pc, [sp], #4)
   1c098:	mov	ip, #2
   1c09c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0a0:	sub	sp, sp, #12
   1c0a4:	mov	r3, r2
   1c0a8:	mov	r2, r1
   1c0ac:	mov	r1, #0
   1c0b0:	str	ip, [sp]
   1c0b4:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c0b8:	add	sp, sp, #12
   1c0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0c0:	mov	ip, #1
   1c0c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0c8:	sub	sp, sp, #12
   1c0cc:	mov	r3, r2
   1c0d0:	mov	r2, r1
   1c0d4:	mov	r1, r0
   1c0d8:	mov	r0, #0
   1c0dc:	str	ip, [sp]
   1c0e0:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c0e4:	add	sp, sp, #12
   1c0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0ec:	mov	ip, #0
   1c0f0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0f4:	sub	sp, sp, #12
   1c0f8:	mov	r3, r2
   1c0fc:	mov	r2, r1
   1c100:	mov	r1, r0
   1c104:	mov	r0, ip
   1c108:	str	ip, [sp]
   1c10c:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c110:	add	sp, sp, #12
   1c114:	pop	{pc}		; (ldr pc, [sp], #4)
   1c118:	mov	ip, #2
   1c11c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c120:	sub	sp, sp, #12
   1c124:	mov	r3, r2
   1c128:	mov	r2, r1
   1c12c:	mov	r1, r0
   1c130:	mov	r0, #0
   1c134:	str	ip, [sp]
   1c138:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c13c:	add	sp, sp, #12
   1c140:	pop	{pc}		; (ldr pc, [sp], #4)
   1c144:	mov	r3, r2
   1c148:	push	{lr}		; (str lr, [sp, #-4]!)
   1c14c:	sub	sp, sp, #12
   1c150:	ldr	ip, [r3, #4]
   1c154:	mov	r2, r1
   1c158:	mov	r1, r0
   1c15c:	mov	r0, #0
   1c160:	lsr	ip, ip, #31
   1c164:	str	ip, [sp]
   1c168:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c16c:	add	sp, sp, #12
   1c170:	pop	{pc}		; (ldr pc, [sp], #4)
   1c174:	mov	r3, r2
   1c178:	add	r2, r1, #8
   1c17c:	ldr	r1, [r1, #4]
   1c180:	mov	ip, #1
   1c184:	push	{lr}		; (str lr, [sp, #-4]!)
   1c188:	sub	sp, sp, #12
   1c18c:	str	ip, [sp]
   1c190:	bl	1b130 <__assert_fail@plt+0xa004>
   1c194:	add	sp, sp, #12
   1c198:	pop	{pc}		; (ldr pc, [sp], #4)
   1c19c:	mov	r3, r2
   1c1a0:	add	r2, r1, #8
   1c1a4:	ldr	r1, [r1, #4]
   1c1a8:	mov	ip, #0
   1c1ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1c1b0:	sub	sp, sp, #12
   1c1b4:	str	ip, [sp]
   1c1b8:	bl	1b130 <__assert_fail@plt+0xa004>
   1c1bc:	add	sp, sp, #12
   1c1c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1c4:	mov	r3, r2
   1c1c8:	add	r2, r1, #8
   1c1cc:	ldr	r1, [r1, #4]
   1c1d0:	mov	ip, #2
   1c1d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c1d8:	sub	sp, sp, #12
   1c1dc:	str	ip, [sp]
   1c1e0:	bl	1b130 <__assert_fail@plt+0xa004>
   1c1e4:	add	sp, sp, #12
   1c1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1ec:	mov	r3, #1
   1c1f0:	b	19c80 <__assert_fail@plt+0x8b54>
   1c1f4:	mov	r3, #0
   1c1f8:	b	19c80 <__assert_fail@plt+0x8b54>
   1c1fc:	mov	r3, #2
   1c200:	b	19c80 <__assert_fail@plt+0x8b54>
   1c204:	mov	ip, #2
   1c208:	push	{lr}		; (str lr, [sp, #-4]!)
   1c20c:	sub	sp, sp, #12
   1c210:	mov	r3, r2
   1c214:	mov	r2, r1
   1c218:	mov	r1, #0
   1c21c:	str	ip, [sp]
   1c220:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c224:	cmp	r0, #0
   1c228:	bne	1c234 <__assert_fail@plt+0xb108>
   1c22c:	add	sp, sp, #12
   1c230:	pop	{pc}		; (ldr pc, [sp], #4)
   1c234:	movw	r1, #43800	; 0xab18
   1c238:	movt	r1, #2
   1c23c:	ldr	r3, [pc, #12]	; 1c250 <__assert_fail@plt+0xb124>
   1c240:	movw	r0, #43988	; 0xabd4
   1c244:	movt	r0, #2
   1c248:	movw	r2, #2521	; 0x9d9
   1c24c:	bl	1112c <__assert_fail@plt>
   1c250:	andeq	sl, r2, ip, asr #19
   1c254:	mov	ip, #2
   1c258:	push	{lr}		; (str lr, [sp, #-4]!)
   1c25c:	sub	sp, sp, #12
   1c260:	mov	r3, r1
   1c264:	mov	r1, #0
   1c268:	mov	r2, r0
   1c26c:	mov	r0, r1
   1c270:	str	ip, [sp]
   1c274:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c278:	clz	r0, r0
   1c27c:	lsr	r0, r0, #5
   1c280:	add	sp, sp, #12
   1c284:	pop	{pc}		; (ldr pc, [sp], #4)
   1c288:	ldr	ip, [r2, #4]
   1c28c:	strd	r4, [sp, #-12]!
   1c290:	str	lr, [sp, #8]
   1c294:	sub	sp, sp, #28
   1c298:	cmp	ip, #0
   1c29c:	movle	r3, #0
   1c2a0:	movgt	r3, #1
   1c2a4:	cmp	r3, ip, lsr #31
   1c2a8:	beq	1c330 <__assert_fail@plt+0xb204>
   1c2ac:	ldr	r3, [pc, #140]	; 1c340 <__assert_fail@plt+0xb214>
   1c2b0:	mov	r5, #0
   1c2b4:	mov	r4, r2
   1c2b8:	mov	r2, r1
   1c2bc:	mov	r1, r0
   1c2c0:	add	r0, sp, #12
   1c2c4:	str	r5, [sp, #12]
   1c2c8:	str	r5, [sp, #16]
   1c2cc:	str	r3, [sp, #20]
   1c2d0:	bl	1b390 <__assert_fail@plt+0xa264>
   1c2d4:	mov	ip, #2
   1c2d8:	mov	r3, r4
   1c2dc:	mov	r1, r5
   1c2e0:	add	r2, sp, #12
   1c2e4:	mov	r0, r5
   1c2e8:	str	ip, [sp]
   1c2ec:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c2f0:	ldr	r1, [sp, #12]
   1c2f4:	clz	r4, r0
   1c2f8:	lsr	r4, r4, #5
   1c2fc:	cmp	r1, r5
   1c300:	beq	1c31c <__assert_fail@plt+0xb1f0>
   1c304:	movw	r3, #49436	; 0xc11c
   1c308:	movt	r3, #3
   1c30c:	lsl	r1, r1, #2
   1c310:	ldr	r3, [r3, #8]
   1c314:	ldr	r0, [sp, #20]
   1c318:	blx	r3
   1c31c:	mov	r0, r4
   1c320:	add	sp, sp, #28
   1c324:	ldrd	r4, [sp]
   1c328:	add	sp, sp, #8
   1c32c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c330:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   1c334:	clz	r4, r0
   1c338:	lsr	r4, r4, #5
   1c33c:	b	1c31c <__assert_fail@plt+0xb1f0>
   1c340:	muleq	r2, r8, r9
   1c344:	mov	ip, #1
   1c348:	push	{lr}		; (str lr, [sp, #-4]!)
   1c34c:	sub	sp, sp, #12
   1c350:	str	ip, [sp]
   1c354:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c358:	add	sp, sp, #12
   1c35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c360:	mov	ip, #0
   1c364:	push	{lr}		; (str lr, [sp, #-4]!)
   1c368:	sub	sp, sp, #12
   1c36c:	str	ip, [sp]
   1c370:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c374:	add	sp, sp, #12
   1c378:	pop	{pc}		; (ldr pc, [sp], #4)
   1c37c:	mov	ip, #2
   1c380:	push	{lr}		; (str lr, [sp, #-4]!)
   1c384:	sub	sp, sp, #12
   1c388:	str	ip, [sp]
   1c38c:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c390:	add	sp, sp, #12
   1c394:	pop	{pc}		; (ldr pc, [sp], #4)
   1c398:	mov	ip, #1
   1c39c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c3a0:	sub	sp, sp, #12
   1c3a4:	mov	r3, r2
   1c3a8:	mov	r2, r1
   1c3ac:	mov	r1, #0
   1c3b0:	str	ip, [sp]
   1c3b4:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c3b8:	add	sp, sp, #12
   1c3bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3c0:	mov	ip, #0
   1c3c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c3c8:	sub	sp, sp, #12
   1c3cc:	mov	r3, r2
   1c3d0:	mov	r2, r1
   1c3d4:	mov	r1, ip
   1c3d8:	str	ip, [sp]
   1c3dc:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c3e0:	add	sp, sp, #12
   1c3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3e8:	mov	ip, #2
   1c3ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1c3f0:	sub	sp, sp, #12
   1c3f4:	mov	r3, r2
   1c3f8:	mov	r2, r1
   1c3fc:	mov	r1, #0
   1c400:	str	ip, [sp]
   1c404:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c408:	add	sp, sp, #12
   1c40c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c410:	mov	ip, #1
   1c414:	push	{lr}		; (str lr, [sp, #-4]!)
   1c418:	sub	sp, sp, #12
   1c41c:	mov	r3, r2
   1c420:	mov	r2, r1
   1c424:	mov	r1, r0
   1c428:	mov	r0, #0
   1c42c:	str	ip, [sp]
   1c430:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c434:	add	sp, sp, #12
   1c438:	pop	{pc}		; (ldr pc, [sp], #4)
   1c43c:	mov	ip, #0
   1c440:	push	{lr}		; (str lr, [sp, #-4]!)
   1c444:	sub	sp, sp, #12
   1c448:	mov	r3, r2
   1c44c:	mov	r2, r1
   1c450:	mov	r1, r0
   1c454:	mov	r0, ip
   1c458:	str	ip, [sp]
   1c45c:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c460:	add	sp, sp, #12
   1c464:	pop	{pc}		; (ldr pc, [sp], #4)
   1c468:	mov	ip, #2
   1c46c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c470:	sub	sp, sp, #12
   1c474:	mov	r3, r2
   1c478:	mov	r2, r1
   1c47c:	mov	r1, r0
   1c480:	mov	r0, #0
   1c484:	str	ip, [sp]
   1c488:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c48c:	add	sp, sp, #12
   1c490:	pop	{pc}		; (ldr pc, [sp], #4)
   1c494:	mov	ip, #1
   1c498:	push	{lr}		; (str lr, [sp, #-4]!)
   1c49c:	sub	sp, sp, #12
   1c4a0:	mov	r3, r1
   1c4a4:	mov	r1, #0
   1c4a8:	mov	r2, r0
   1c4ac:	mov	r0, r1
   1c4b0:	str	ip, [sp]
   1c4b4:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c4b8:	add	sp, sp, #12
   1c4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4c0:	mov	ip, #0
   1c4c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c4c8:	sub	sp, sp, #12
   1c4cc:	mov	r3, r1
   1c4d0:	mov	r2, r0
   1c4d4:	mov	r1, ip
   1c4d8:	mov	r0, ip
   1c4dc:	str	ip, [sp]
   1c4e0:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c4e4:	add	sp, sp, #12
   1c4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4ec:	mov	ip, #2
   1c4f0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c4f4:	sub	sp, sp, #12
   1c4f8:	mov	r3, r1
   1c4fc:	mov	r1, #0
   1c500:	mov	r2, r0
   1c504:	mov	r0, r1
   1c508:	str	ip, [sp]
   1c50c:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c510:	add	sp, sp, #12
   1c514:	pop	{pc}		; (ldr pc, [sp], #4)
   1c518:	b	1c43c <__assert_fail@plt+0xb310>
   1c51c:	mov	ip, #2
   1c520:	push	{lr}		; (str lr, [sp, #-4]!)
   1c524:	sub	sp, sp, #12
   1c528:	mov	r3, r2
   1c52c:	mov	r2, r1
   1c530:	mov	r1, #0
   1c534:	str	ip, [sp]
   1c538:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c53c:	cmp	r0, #0
   1c540:	bne	1c54c <__assert_fail@plt+0xb420>
   1c544:	add	sp, sp, #12
   1c548:	pop	{pc}		; (ldr pc, [sp], #4)
   1c54c:	movw	r1, #43800	; 0xab18
   1c550:	movt	r1, #2
   1c554:	ldr	r3, [pc, #12]	; 1c568 <__assert_fail@plt+0xb43c>
   1c558:	movw	r0, #43988	; 0xabd4
   1c55c:	movt	r0, #2
   1c560:	movw	r2, #2647	; 0xa57
   1c564:	bl	1112c <__assert_fail@plt>
   1c568:	ldrdeq	sl, [r2], -ip
   1c56c:	mov	ip, #2
   1c570:	push	{lr}		; (str lr, [sp, #-4]!)
   1c574:	sub	sp, sp, #12
   1c578:	mov	r3, r1
   1c57c:	mov	r1, #0
   1c580:	mov	r2, r0
   1c584:	mov	r0, r1
   1c588:	str	ip, [sp]
   1c58c:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1c590:	clz	r0, r0
   1c594:	lsr	r0, r0, #5
   1c598:	add	sp, sp, #12
   1c59c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5a0:	ldr	r3, [r1, #4]
   1c5a4:	strd	r4, [sp, #-16]!
   1c5a8:	mov	r4, r2
   1c5ac:	mov	r5, r0
   1c5b0:	str	r6, [sp, #8]
   1c5b4:	str	lr, [sp, #12]
   1c5b8:	sub	sp, sp, #32
   1c5bc:	cmp	r3, #0
   1c5c0:	moveq	r1, r2
   1c5c4:	beq	1c7d8 <__assert_fail@plt+0xb6ac>
   1c5c8:	ldr	r3, [r2, #4]
   1c5cc:	cmp	r3, #0
   1c5d0:	beq	1c7d8 <__assert_fail@plt+0xb6ac>
   1c5d4:	ldr	r2, [pc, #864]	; 1c93c <__assert_fail@plt+0xb810>
   1c5d8:	mov	r3, #0
   1c5dc:	add	r0, sp, #8
   1c5e0:	str	r3, [sp, #8]
   1c5e4:	str	r3, [sp, #12]
   1c5e8:	strd	r2, [sp, #16]
   1c5ec:	str	r3, [sp, #24]
   1c5f0:	str	r2, [sp, #28]
   1c5f4:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1c5f8:	ldr	r3, [sp, #12]
   1c5fc:	add	r0, sp, #8
   1c600:	cmp	r3, #0
   1c604:	rsblt	r3, r3, #0
   1c608:	str	r3, [sp, #12]
   1c60c:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1c610:	mov	r6, r0
   1c614:	mov	r1, r4
   1c618:	add	r0, sp, #20
   1c61c:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1c620:	ldr	r3, [sp, #24]
   1c624:	add	r0, sp, #20
   1c628:	cmp	r3, #0
   1c62c:	rsblt	r3, r3, #0
   1c630:	str	r3, [sp, #24]
   1c634:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1c638:	ldr	r3, [sp, #12]
   1c63c:	cmp	r6, r0
   1c640:	movcs	r6, r0
   1c644:	ldr	r2, [sp, #24]
   1c648:	cmp	r3, r2
   1c64c:	bge	1c678 <__assert_fail@plt+0xb54c>
   1c650:	str	r2, [sp, #12]
   1c654:	str	r3, [sp, #24]
   1c658:	ldr	r0, [sp, #8]
   1c65c:	ldr	r1, [sp, #16]
   1c660:	ldr	r2, [sp, #20]
   1c664:	ldr	r3, [sp, #28]
   1c668:	str	r2, [sp, #8]
   1c66c:	str	r0, [sp, #20]
   1c670:	str	r3, [sp, #16]
   1c674:	str	r1, [sp, #28]
   1c678:	mov	r0, #2
   1c67c:	add	r2, sp, #8
   1c680:	add	r3, sp, #20
   1c684:	mov	r1, r2
   1c688:	str	r0, [sp]
   1c68c:	mov	r0, #0
   1c690:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c694:	ldr	r3, [sp, #12]
   1c698:	cmp	r3, #0
   1c69c:	bne	1c78c <__assert_fail@plt+0xb660>
   1c6a0:	ldr	r3, [r5, #4]
   1c6a4:	ldr	r0, [sp, #20]
   1c6a8:	ldr	r2, [sp, #24]
   1c6ac:	str	r3, [sp, #24]
   1c6b0:	ldr	r1, [sp, #28]
   1c6b4:	ldr	r3, [r5, #8]
   1c6b8:	str	r2, [r5, #4]
   1c6bc:	ldr	r2, [r5]
   1c6c0:	str	r0, [r5]
   1c6c4:	str	r1, [r5, #8]
   1c6c8:	ldr	r1, [sp, #8]
   1c6cc:	str	r2, [sp, #20]
   1c6d0:	str	r3, [sp, #28]
   1c6d4:	cmp	r1, #0
   1c6d8:	beq	1c6f4 <__assert_fail@plt+0xb5c8>
   1c6dc:	movw	r3, #49436	; 0xc11c
   1c6e0:	movt	r3, #3
   1c6e4:	lsl	r1, r1, #2
   1c6e8:	ldr	r3, [r3, #8]
   1c6ec:	ldr	r0, [sp, #16]
   1c6f0:	blx	r3
   1c6f4:	ldr	r1, [sp, #20]
   1c6f8:	cmp	r1, #0
   1c6fc:	beq	1c718 <__assert_fail@plt+0xb5ec>
   1c700:	movw	r3, #49436	; 0xc11c
   1c704:	movt	r3, #3
   1c708:	lsl	r1, r1, #2
   1c70c:	ldr	r3, [r3, #8]
   1c710:	ldr	r0, [sp, #28]
   1c714:	blx	r3
   1c718:	mov	r2, r6
   1c71c:	mov	r1, r5
   1c720:	mov	r0, r5
   1c724:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1c728:	add	sp, sp, #32
   1c72c:	ldrd	r4, [sp]
   1c730:	ldr	r6, [sp, #8]
   1c734:	add	sp, sp, #12
   1c738:	pop	{pc}		; (ldr pc, [sp], #4)
   1c73c:	ldr	r4, [sp, #24]
   1c740:	bge	1c774 <__assert_fail@plt+0xb648>
   1c744:	ldr	r0, [sp, #8]
   1c748:	ldr	r3, [sp, #12]
   1c74c:	str	r4, [sp, #12]
   1c750:	ldr	r2, [sp, #16]
   1c754:	ldr	r1, [sp, #20]
   1c758:	mov	r4, r3
   1c75c:	str	r1, [sp, #8]
   1c760:	str	r3, [sp, #24]
   1c764:	ldr	r3, [sp, #28]
   1c768:	str	r3, [sp, #16]
   1c76c:	str	r0, [sp, #20]
   1c770:	str	r2, [sp, #28]
   1c774:	cmp	r4, #1
   1c778:	beq	1c7f0 <__assert_fail@plt+0xb6c4>
   1c77c:	add	r1, sp, #8
   1c780:	add	r2, sp, #20
   1c784:	mov	r0, r1
   1c788:	bl	1b390 <__assert_fail@plt+0xa264>
   1c78c:	add	r0, sp, #8
   1c790:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1c794:	add	r1, sp, #20
   1c798:	add	r0, sp, #8
   1c79c:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   1c7a0:	cmp	r0, #0
   1c7a4:	bne	1c73c <__assert_fail@plt+0xb610>
   1c7a8:	ldr	r3, [r5, #4]
   1c7ac:	ldrd	r0, [sp, #8]
   1c7b0:	ldr	r2, [sp, #16]
   1c7b4:	str	r3, [sp, #12]
   1c7b8:	ldr	r3, [r5, #8]
   1c7bc:	str	r1, [r5, #4]
   1c7c0:	ldr	r1, [r5]
   1c7c4:	str	r0, [r5]
   1c7c8:	str	r2, [r5, #8]
   1c7cc:	str	r1, [sp, #8]
   1c7d0:	str	r3, [sp, #16]
   1c7d4:	b	1c6d4 <__assert_fail@plt+0xb5a8>
   1c7d8:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1c7dc:	ldr	r3, [r5, #4]
   1c7e0:	cmp	r3, #0
   1c7e4:	rsblt	r3, r3, #0
   1c7e8:	str	r3, [r5, #4]
   1c7ec:	b	1c728 <__assert_fail@plt+0xb5fc>
   1c7f0:	mov	r0, #2
   1c7f4:	add	r2, sp, #8
   1c7f8:	add	r3, sp, #20
   1c7fc:	mov	r1, r2
   1c800:	str	r0, [sp]
   1c804:	mov	r0, #0
   1c808:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1c80c:	ldr	r3, [r5]
   1c810:	cmp	r3, #0
   1c814:	ble	1c910 <__assert_fail@plt+0xb7e4>
   1c818:	ldr	r0, [r5, #8]
   1c81c:	ldr	r3, [sp, #16]
   1c820:	ldr	r2, [sp, #28]
   1c824:	ldr	r3, [r3]
   1c828:	ldr	r2, [r2]
   1c82c:	orrs	ip, r3, r2
   1c830:	beq	1c920 <__assert_fail@plt+0xb7f4>
   1c834:	cmp	r3, #0
   1c838:	beq	1c8d8 <__assert_fail@plt+0xb7ac>
   1c83c:	cmp	r2, #0
   1c840:	moveq	r2, r3
   1c844:	beq	1c8d8 <__assert_fail@plt+0xb7ac>
   1c848:	rsb	r1, ip, #0
   1c84c:	and	r1, r1, ip
   1c850:	ands	ip, r1, #-16777216	; 0xff000000
   1c854:	bne	1c908 <__assert_fail@plt+0xb7dc>
   1c858:	lsl	r1, r1, #8
   1c85c:	add	ip, ip, #8
   1c860:	tst	r1, #-16777216	; 0xff000000
   1c864:	beq	1c858 <__assert_fail@plt+0xb72c>
   1c868:	cmp	r1, #0
   1c86c:	blt	1c87c <__assert_fail@plt+0xb750>
   1c870:	lsls	r1, r1, #1
   1c874:	add	ip, ip, #1
   1c878:	bpl	1c870 <__assert_fail@plt+0xb744>
   1c87c:	rsb	ip, ip, #31
   1c880:	lsr	r3, r3, ip
   1c884:	lsr	r2, r2, ip
   1c888:	tst	r3, #1
   1c88c:	bne	1c8f0 <__assert_fail@plt+0xb7c4>
   1c890:	lsr	r3, r3, #1
   1c894:	tst	r3, #1
   1c898:	beq	1c890 <__assert_fail@plt+0xb764>
   1c89c:	cmp	r2, r3
   1c8a0:	beq	1c8d4 <__assert_fail@plt+0xb7a8>
   1c8a4:	cmp	r3, r2
   1c8a8:	bcs	1c8c0 <__assert_fail@plt+0xb794>
   1c8ac:	sub	r2, r2, r3
   1c8b0:	lsr	r2, r2, #1
   1c8b4:	tst	r2, #1
   1c8b8:	beq	1c8b0 <__assert_fail@plt+0xb784>
   1c8bc:	b	1c89c <__assert_fail@plt+0xb770>
   1c8c0:	sub	r3, r3, r2
   1c8c4:	lsr	r3, r3, #1
   1c8c8:	tst	r3, #1
   1c8cc:	beq	1c8c4 <__assert_fail@plt+0xb798>
   1c8d0:	b	1c89c <__assert_fail@plt+0xb770>
   1c8d4:	lsl	r2, r3, ip
   1c8d8:	adds	r3, r2, #0
   1c8dc:	ldr	r1, [sp, #8]
   1c8e0:	movne	r3, #1
   1c8e4:	str	r2, [r0]
   1c8e8:	str	r3, [r5, #4]
   1c8ec:	b	1c6d4 <__assert_fail@plt+0xb5a8>
   1c8f0:	mov	r1, r3
   1c8f4:	tst	r2, #1
   1c8f8:	mov	r3, r2
   1c8fc:	mov	r2, r1
   1c900:	beq	1c890 <__assert_fail@plt+0xb764>
   1c904:	b	1c89c <__assert_fail@plt+0xb770>
   1c908:	mov	ip, #0
   1c90c:	b	1c868 <__assert_fail@plt+0xb73c>
   1c910:	mov	r1, r4
   1c914:	mov	r0, r5
   1c918:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1c91c:	b	1c81c <__assert_fail@plt+0xb6f0>
   1c920:	movw	r1, #43800	; 0xab18
   1c924:	movt	r1, #2
   1c928:	ldr	r3, [pc, #16]	; 1c940 <__assert_fail@plt+0xb814>
   1c92c:	movw	r0, #44468	; 0xadb4
   1c930:	movt	r0, #2
   1c934:	movw	r2, #2663	; 0xa67
   1c938:	bl	1112c <__assert_fail@plt>
   1c93c:	muleq	r2, r8, r9
   1c940:	andeq	sl, r2, ip, ror #19
   1c944:	ldr	ip, [pc, #220]	; 1ca28 <__assert_fail@plt+0xb8fc>
   1c948:	mov	r3, #0
   1c94c:	strd	r4, [sp, #-16]!
   1c950:	subs	r5, r2, #0
   1c954:	mov	r4, r0
   1c958:	str	r6, [sp, #8]
   1c95c:	str	lr, [sp, #12]
   1c960:	sub	sp, sp, #16
   1c964:	str	r3, [sp, #4]
   1c968:	str	r3, [sp, #8]
   1c96c:	str	ip, [sp, #12]
   1c970:	beq	1ca18 <__assert_fail@plt+0xb8ec>
   1c974:	mov	r6, r1
   1c978:	add	r0, sp, #4
   1c97c:	mov	r1, r5
   1c980:	bl	18318 <__assert_fail@plt+0x71ec>
   1c984:	add	r2, sp, #4
   1c988:	mov	r1, r6
   1c98c:	mov	r0, r2
   1c990:	bl	1c5a0 <__assert_fail@plt+0xb474>
   1c994:	ldr	r5, [sp, #8]
   1c998:	cmp	r5, #0
   1c99c:	ldrne	r3, [sp, #12]
   1c9a0:	ldrne	r5, [r3]
   1c9a4:	cmp	r4, #0
   1c9a8:	ldr	r3, [sp, #4]
   1c9ac:	moveq	r1, r3
   1c9b0:	beq	1c9e0 <__assert_fail@plt+0xb8b4>
   1c9b4:	ldr	r2, [r4, #4]
   1c9b8:	ldr	r1, [sp, #8]
   1c9bc:	ldr	r0, [sp, #12]
   1c9c0:	str	r2, [sp, #8]
   1c9c4:	ldr	r2, [r4, #8]
   1c9c8:	str	r1, [r4, #4]
   1c9cc:	ldr	r1, [r4]
   1c9d0:	str	r3, [r4]
   1c9d4:	str	r0, [r4, #8]
   1c9d8:	str	r1, [sp, #4]
   1c9dc:	str	r2, [sp, #12]
   1c9e0:	cmp	r1, #0
   1c9e4:	beq	1ca00 <__assert_fail@plt+0xb8d4>
   1c9e8:	movw	r3, #49436	; 0xc11c
   1c9ec:	movt	r3, #3
   1c9f0:	lsl	r1, r1, #2
   1c9f4:	ldr	r3, [r3, #8]
   1c9f8:	ldr	r0, [sp, #12]
   1c9fc:	blx	r3
   1ca00:	mov	r0, r5
   1ca04:	add	sp, sp, #16
   1ca08:	ldrd	r4, [sp]
   1ca0c:	ldr	r6, [sp, #8]
   1ca10:	add	sp, sp, #12
   1ca14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca18:	add	r2, sp, #4
   1ca1c:	mov	r0, r2
   1ca20:	bl	1c5a0 <__assert_fail@plt+0xb474>
   1ca24:	b	1c9a4 <__assert_fail@plt+0xb878>
   1ca28:	muleq	r2, r8, r9
   1ca2c:	strd	r4, [sp, #-16]!
   1ca30:	str	r6, [sp, #8]
   1ca34:	str	lr, [sp, #12]
   1ca38:	sub	sp, sp, #16
   1ca3c:	ldr	lr, [r1, #4]
   1ca40:	cmp	lr, #0
   1ca44:	beq	1ca58 <__assert_fail@plt+0xb92c>
   1ca48:	ldr	lr, [r2, #4]
   1ca4c:	mov	r5, r2
   1ca50:	cmp	lr, #0
   1ca54:	bne	1ca74 <__assert_fail@plt+0xb948>
   1ca58:	mov	r3, #0
   1ca5c:	str	r3, [r0, #4]
   1ca60:	add	sp, sp, #16
   1ca64:	ldrd	r4, [sp]
   1ca68:	ldr	r6, [sp, #8]
   1ca6c:	add	sp, sp, #12
   1ca70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca74:	ldr	ip, [pc, #128]	; 1cafc <__assert_fail@plt+0xb9d0>
   1ca78:	mov	r3, #0
   1ca7c:	mov	r6, r0
   1ca80:	add	r0, sp, #4
   1ca84:	mov	r4, r1
   1ca88:	str	r3, [sp, #4]
   1ca8c:	str	r3, [sp, #8]
   1ca90:	str	ip, [sp, #12]
   1ca94:	bl	1c5a0 <__assert_fail@plt+0xb474>
   1ca98:	add	r2, sp, #4
   1ca9c:	mov	r1, r4
   1caa0:	mov	r0, r2
   1caa4:	bl	1c204 <__assert_fail@plt+0xb0d8>
   1caa8:	add	r1, sp, #4
   1caac:	mov	r2, r5
   1cab0:	mov	r0, r6
   1cab4:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1cab8:	ldr	r1, [sp, #4]
   1cabc:	cmp	r1, #0
   1cac0:	beq	1cadc <__assert_fail@plt+0xb9b0>
   1cac4:	movw	r3, #49436	; 0xc11c
   1cac8:	movt	r3, #3
   1cacc:	lsl	r1, r1, #2
   1cad0:	ldr	r3, [r3, #8]
   1cad4:	ldr	r0, [sp, #12]
   1cad8:	blx	r3
   1cadc:	mov	r1, r6
   1cae0:	mov	r0, r6
   1cae4:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1cae8:	ldr	r3, [r6, #4]
   1caec:	cmp	r3, #0
   1caf0:	rsblt	r3, r3, #0
   1caf4:	str	r3, [r6, #4]
   1caf8:	b	1ca60 <__assert_fail@plt+0xb934>
   1cafc:	muleq	r2, r8, r9
   1cb00:	subs	ip, r2, #0
   1cb04:	beq	1cb88 <__assert_fail@plt+0xba5c>
   1cb08:	strd	r4, [sp, #-16]!
   1cb0c:	mov	r5, r1
   1cb10:	str	r6, [sp, #8]
   1cb14:	str	lr, [sp, #12]
   1cb18:	ldr	lr, [r1, #4]
   1cb1c:	cmp	lr, #0
   1cb20:	moveq	r3, #0
   1cb24:	streq	r3, [r0, #4]
   1cb28:	bne	1cb3c <__assert_fail@plt+0xba10>
   1cb2c:	ldrd	r4, [sp]
   1cb30:	ldr	r6, [sp, #8]
   1cb34:	add	sp, sp, #12
   1cb38:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb3c:	mov	r4, r0
   1cb40:	mov	r6, ip
   1cb44:	mov	r0, #0
   1cb48:	bl	1c944 <__assert_fail@plt+0xb818>
   1cb4c:	udiv	r2, r6, r0
   1cb50:	mov	r1, r5
   1cb54:	mov	r0, r4
   1cb58:	bl	1bb44 <__assert_fail@plt+0xaa18>
   1cb5c:	mov	r1, r4
   1cb60:	mov	r0, r4
   1cb64:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1cb68:	ldr	r3, [r4, #4]
   1cb6c:	ldr	r6, [sp, #8]
   1cb70:	cmp	r3, #0
   1cb74:	rsblt	r3, r3, #0
   1cb78:	str	r3, [r4, #4]
   1cb7c:	ldrd	r4, [sp]
   1cb80:	add	sp, sp, #12
   1cb84:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb88:	mov	r3, #0
   1cb8c:	str	r3, [r0, #4]
   1cb90:	bx	lr
   1cb94:	ldr	ip, [pc, #228]	; 1cc80 <__assert_fail@plt+0xbb54>
   1cb98:	mov	r3, #0
   1cb9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cba0:	mov	r5, #32
   1cba4:	mov	r4, #-2147483648	; 0x80000000
   1cba8:	strd	r6, [sp, #8]
   1cbac:	mov	r7, r1
   1cbb0:	mov	r1, #1
   1cbb4:	str	r8, [sp, #16]
   1cbb8:	mov	r8, r0
   1cbbc:	mov	r6, r2
   1cbc0:	str	lr, [sp, #20]
   1cbc4:	sub	sp, sp, #16
   1cbc8:	add	r0, sp, #4
   1cbcc:	str	r3, [sp, #4]
   1cbd0:	str	r3, [sp, #8]
   1cbd4:	str	ip, [sp, #12]
   1cbd8:	bl	18318 <__assert_fail@plt+0x71ec>
   1cbdc:	b	1cbe8 <__assert_fail@plt+0xbabc>
   1cbe0:	subs	r5, r5, #1
   1cbe4:	beq	1cc1c <__assert_fail@plt+0xbaf0>
   1cbe8:	add	r2, sp, #4
   1cbec:	mov	r1, r2
   1cbf0:	mov	r0, r2
   1cbf4:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1cbf8:	tst	r4, r6
   1cbfc:	lsr	r4, r4, #1
   1cc00:	beq	1cbe0 <__assert_fail@plt+0xbab4>
   1cc04:	add	r1, sp, #4
   1cc08:	mov	r2, r7
   1cc0c:	mov	r0, r1
   1cc10:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1cc14:	subs	r5, r5, #1
   1cc18:	bne	1cbe8 <__assert_fail@plt+0xbabc>
   1cc1c:	ldr	r3, [sp, #4]
   1cc20:	ldr	r0, [sp, #8]
   1cc24:	ldr	r1, [r8]
   1cc28:	str	r3, [r8]
   1cc2c:	ldr	r3, [r8, #4]
   1cc30:	str	r0, [r8, #4]
   1cc34:	ldr	r0, [r8, #8]
   1cc38:	cmp	r1, #0
   1cc3c:	str	r1, [sp, #4]
   1cc40:	ldr	r2, [sp, #12]
   1cc44:	str	r3, [sp, #8]
   1cc48:	str	r0, [sp, #12]
   1cc4c:	str	r2, [r8, #8]
   1cc50:	beq	1cc68 <__assert_fail@plt+0xbb3c>
   1cc54:	movw	r3, #49436	; 0xc11c
   1cc58:	movt	r3, #3
   1cc5c:	lsl	r1, r1, #2
   1cc60:	ldr	r3, [r3, #8]
   1cc64:	blx	r3
   1cc68:	add	sp, sp, #16
   1cc6c:	ldrd	r4, [sp]
   1cc70:	ldrd	r6, [sp, #8]
   1cc74:	ldr	r8, [sp, #16]
   1cc78:	add	sp, sp, #20
   1cc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc80:	muleq	r2, r8, r9
   1cc84:	ldr	ip, [pc, #128]	; 1cd0c <__assert_fail@plt+0xbbe0>
   1cc88:	mov	r3, #0
   1cc8c:	strd	r4, [sp, #-16]!
   1cc90:	cmp	r1, r3
   1cc94:	mov	r5, r0
   1cc98:	str	r6, [sp, #8]
   1cc9c:	mov	r6, r2
   1cca0:	str	lr, [sp, #12]
   1cca4:	sub	sp, sp, #16
   1cca8:	add	r4, sp, #4
   1ccac:	str	r3, [sp, #4]
   1ccb0:	str	r3, [sp, #8]
   1ccb4:	str	ip, [sp, #12]
   1ccb8:	beq	1ccc4 <__assert_fail@plt+0xbb98>
   1ccbc:	mov	r0, r4
   1ccc0:	bl	18318 <__assert_fail@plt+0x71ec>
   1ccc4:	mov	r1, r4
   1ccc8:	mov	r2, r6
   1cccc:	mov	r0, r5
   1ccd0:	bl	1cb94 <__assert_fail@plt+0xba68>
   1ccd4:	ldr	r1, [sp, #4]
   1ccd8:	cmp	r1, #0
   1ccdc:	beq	1ccf8 <__assert_fail@plt+0xbbcc>
   1cce0:	movw	r3, #49436	; 0xc11c
   1cce4:	movt	r3, #3
   1cce8:	lsl	r1, r1, #2
   1ccec:	ldr	r3, [r3, #8]
   1ccf0:	ldr	r0, [sp, #12]
   1ccf4:	blx	r3
   1ccf8:	add	sp, sp, #16
   1ccfc:	ldrd	r4, [sp]
   1cd00:	ldr	r6, [sp, #8]
   1cd04:	add	sp, sp, #12
   1cd08:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd0c:	muleq	r2, r8, r9
   1cd10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cd14:	mov	r4, r1
   1cd18:	cmp	r1, #0
   1cd1c:	addeq	r1, r1, #1
   1cd20:	cmp	r1, #0
   1cd24:	mov	r5, r0
   1cd28:	strd	r6, [sp, #8]
   1cd2c:	mov	r7, r2
   1cd30:	str	r8, [sp, #16]
   1cd34:	str	lr, [sp, #20]
   1cd38:	streq	r1, [r0, #4]
   1cd3c:	beq	1cd44 <__assert_fail@plt+0xbc18>
   1cd40:	bl	18318 <__assert_fail@plt+0x71ec>
   1cd44:	add	r6, r7, #1
   1cd48:	cmp	r6, #1
   1cd4c:	bhi	1cd68 <__assert_fail@plt+0xbc3c>
   1cd50:	b	1cd70 <__assert_fail@plt+0xbc44>
   1cd54:	sub	r4, r4, r7
   1cd58:	mov	r1, r5
   1cd5c:	mov	r2, r4
   1cd60:	mov	r0, r5
   1cd64:	bl	1bb44 <__assert_fail@plt+0xaa18>
   1cd68:	cmp	r6, r4
   1cd6c:	bcc	1cd54 <__assert_fail@plt+0xbc28>
   1cd70:	ldrd	r4, [sp]
   1cd74:	ldrd	r6, [sp, #8]
   1cd78:	ldr	r8, [sp, #16]
   1cd7c:	add	sp, sp, #20
   1cd80:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd84:	mov	r2, #2
   1cd88:	b	1cd10 <__assert_fail@plt+0xbbe4>
   1cd8c:	mov	r2, #1
   1cd90:	b	1cd10 <__assert_fail@plt+0xbbe4>
   1cd94:	cmp	r2, r1
   1cd98:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cd9c:	mov	r4, r1
   1cda0:	mov	r5, r0
   1cda4:	strd	r6, [sp, #8]
   1cda8:	mov	r6, r2
   1cdac:	lsr	r7, r1, #1
   1cdb0:	str	lr, [sp, #16]
   1cdb4:	sub	sp, sp, #20
   1cdb8:	bhi	1ce68 <__assert_fail@plt+0xbd3c>
   1cdbc:	mov	r1, #1
   1cdc0:	bl	18318 <__assert_fail@plt+0x71ec>
   1cdc4:	cmp	r7, r6
   1cdc8:	subcc	r6, r4, r6
   1cdcc:	ldr	ip, [pc, #204]	; 1cea0 <__assert_fail@plt+0xbd74>
   1cdd0:	mov	r3, #0
   1cdd4:	add	r7, sp, #4
   1cdd8:	mov	r0, r7
   1cddc:	mov	r2, #1
   1cde0:	mov	r1, r6
   1cde4:	str	r3, [sp, #4]
   1cde8:	str	r3, [sp, #8]
   1cdec:	str	ip, [sp, #12]
   1cdf0:	bl	1cd10 <__assert_fail@plt+0xbbe4>
   1cdf4:	cmp	r6, #0
   1cdf8:	beq	1ce20 <__assert_fail@plt+0xbcf4>
   1cdfc:	sub	r6, r4, r6
   1ce00:	sub	r3, r4, #1
   1ce04:	mov	r2, r4
   1ce08:	mov	r1, r5
   1ce0c:	mov	r4, r3
   1ce10:	mov	r0, r5
   1ce14:	bl	1bb44 <__assert_fail@plt+0xaa18>
   1ce18:	cmp	r4, r6
   1ce1c:	bne	1ce00 <__assert_fail@plt+0xbcd4>
   1ce20:	mov	r1, r5
   1ce24:	mov	r2, r7
   1ce28:	mov	r0, r5
   1ce2c:	bl	1c204 <__assert_fail@plt+0xb0d8>
   1ce30:	ldr	r1, [sp, #4]
   1ce34:	cmp	r1, #0
   1ce38:	beq	1ce54 <__assert_fail@plt+0xbd28>
   1ce3c:	movw	r3, #49436	; 0xc11c
   1ce40:	movt	r3, #3
   1ce44:	lsl	r1, r1, #2
   1ce48:	ldr	r3, [r3, #8]
   1ce4c:	ldr	r0, [sp, #12]
   1ce50:	blx	r3
   1ce54:	add	sp, sp, #20
   1ce58:	ldrd	r4, [sp]
   1ce5c:	ldrd	r6, [sp, #8]
   1ce60:	add	sp, sp, #16
   1ce64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce68:	mov	r3, #0
   1ce6c:	cmp	r7, r2
   1ce70:	str	r3, [r0, #4]
   1ce74:	bcs	1cdcc <__assert_fail@plt+0xbca0>
   1ce78:	ldr	ip, [pc, #32]	; 1cea0 <__assert_fail@plt+0xbd74>
   1ce7c:	add	r7, sp, #4
   1ce80:	mov	r1, r3
   1ce84:	mov	r0, r7
   1ce88:	mov	r2, #1
   1ce8c:	str	r3, [sp, #4]
   1ce90:	str	r3, [sp, #8]
   1ce94:	str	ip, [sp, #12]
   1ce98:	bl	1cd10 <__assert_fail@plt+0xbbe4>
   1ce9c:	b	1ce20 <__assert_fail@plt+0xbcf4>
   1cea0:	muleq	r2, r8, r9
   1cea4:	ldr	ip, [r0, #4]
   1cea8:	str	r4, [sp, #-8]!
   1ceac:	str	lr, [sp, #4]
   1ceb0:	lsr	lr, r1, #5
   1ceb4:	eor	r2, ip, ip, asr #31
   1ceb8:	sub	r2, r2, ip, asr #31
   1cebc:	cmp	r2, lr
   1cec0:	lsrle	r0, ip, #31
   1cec4:	ble	1cee8 <__assert_fail@plt+0xbdbc>
   1cec8:	ldr	r2, [r0, #8]
   1cecc:	and	r1, r1, #31
   1ced0:	cmp	ip, #0
   1ced4:	ldr	r4, [r2, lr, lsl #2]
   1ced8:	add	r2, r2, lr, lsl #2
   1cedc:	lsr	ip, r4, r1
   1cee0:	and	r0, ip, #1
   1cee4:	blt	1cef4 <__assert_fail@plt+0xbdc8>
   1cee8:	ldr	r4, [sp]
   1ceec:	add	sp, sp, #4
   1cef0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cef4:	cmp	r1, #0
   1cef8:	mov	r3, lr
   1cefc:	beq	1cf2c <__assert_fail@plt+0xbe00>
   1cf00:	rsb	r1, r1, #32
   1cf04:	lsls	r1, r4, r1
   1cf08:	beq	1cf2c <__assert_fail@plt+0xbe00>
   1cf0c:	mvn	ip, ip
   1cf10:	ldr	r4, [sp]
   1cf14:	add	sp, sp, #4
   1cf18:	and	r0, ip, #1
   1cf1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf20:	ldr	r1, [r2, #-4]!
   1cf24:	cmp	r1, #0
   1cf28:	bne	1cf0c <__assert_fail@plt+0xbde0>
   1cf2c:	subs	r3, r3, #1
   1cf30:	bcs	1cf20 <__assert_fail@plt+0xbdf4>
   1cf34:	ldr	r4, [sp]
   1cf38:	add	sp, sp, #4
   1cf3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf40:	strd	r4, [sp, #-16]!
   1cf44:	mov	r4, r0
   1cf48:	mov	r5, r1
   1cf4c:	str	r6, [sp, #8]
   1cf50:	str	lr, [sp, #12]
   1cf54:	bl	1cea4 <__assert_fail@plt+0xbd78>
   1cf58:	cmp	r0, #0
   1cf5c:	bne	1cfa8 <__assert_fail@plt+0xbe7c>
   1cf60:	ldr	r3, [r4, #4]
   1cf64:	cmp	r3, #0
   1cf68:	blt	1cf88 <__assert_fail@plt+0xbe5c>
   1cf6c:	mov	r1, r5
   1cf70:	mov	r0, r4
   1cf74:	ldrd	r4, [sp]
   1cf78:	ldr	r6, [sp, #8]
   1cf7c:	ldr	lr, [sp, #12]
   1cf80:	add	sp, sp, #16
   1cf84:	b	180dc <__assert_fail@plt+0x6fb0>
   1cf88:	mov	r2, r5
   1cf8c:	add	r0, r4, #4
   1cf90:	ldr	r1, [r4, #8]
   1cf94:	ldrd	r4, [sp]
   1cf98:	ldr	r6, [sp, #8]
   1cf9c:	ldr	lr, [sp, #12]
   1cfa0:	add	sp, sp, #16
   1cfa4:	b	18224 <__assert_fail@plt+0x70f8>
   1cfa8:	ldrd	r4, [sp]
   1cfac:	ldr	r6, [sp, #8]
   1cfb0:	add	sp, sp, #12
   1cfb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cfbc:	ldr	r4, [r3, #4]
   1cfc0:	strd	r6, [sp, #8]
   1cfc4:	mov	r7, r0
   1cfc8:	strd	r8, [sp, #16]
   1cfcc:	mov	r9, r1
   1cfd0:	mov	r8, r2
   1cfd4:	strd	sl, [sp, #24]
   1cfd8:	mov	fp, r3
   1cfdc:	str	lr, [sp, #32]
   1cfe0:	sub	sp, sp, #92	; 0x5c
   1cfe4:	ldr	r3, [sp, #128]	; 0x80
   1cfe8:	cmp	r4, #0
   1cfec:	ldr	r5, [r3, #4]
   1cff0:	beq	1d610 <__assert_fail@plt+0xc4e4>
   1cff4:	cmp	r5, #0
   1cff8:	beq	1d5c4 <__assert_fail@plt+0xc498>
   1cffc:	ldr	r2, [pc, #1700]	; 1d6a8 <__assert_fail@plt+0xc57c>
   1d000:	mov	r3, #0
   1d004:	mov	r1, fp
   1d008:	add	r0, sp, #16
   1d00c:	str	r3, [sp, #16]
   1d010:	str	r3, [sp, #20]
   1d014:	strd	r2, [sp, #24]
   1d018:	str	r3, [sp, #32]
   1d01c:	strd	r2, [sp, #36]	; 0x24
   1d020:	str	r3, [sp, #44]	; 0x2c
   1d024:	strd	r2, [sp, #48]	; 0x30
   1d028:	str	r3, [sp, #56]	; 0x38
   1d02c:	strd	r2, [sp, #60]	; 0x3c
   1d030:	str	r3, [sp, #68]	; 0x44
   1d034:	strd	r2, [sp, #72]	; 0x48
   1d038:	str	r3, [sp, #80]	; 0x50
   1d03c:	str	r2, [sp, #84]	; 0x54
   1d040:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d044:	ldr	r3, [sp, #20]
   1d048:	add	r0, sp, #16
   1d04c:	cmp	r3, #0
   1d050:	rsblt	r3, r3, #0
   1d054:	str	r3, [sp, #20]
   1d058:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1d05c:	mov	sl, r0
   1d060:	add	r0, sp, #28
   1d064:	ldr	r1, [sp, #128]	; 0x80
   1d068:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d06c:	ldr	r3, [sp, #32]
   1d070:	add	r0, sp, #28
   1d074:	cmp	r3, #0
   1d078:	rsblt	r3, r3, #0
   1d07c:	str	r3, [sp, #32]
   1d080:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1d084:	ldr	r3, [sp, #20]
   1d088:	cmp	sl, r0
   1d08c:	movcc	r1, sl
   1d090:	movcs	r1, r0
   1d094:	ldr	r2, [sp, #32]
   1d098:	sub	sl, sl, r1
   1d09c:	sub	r6, r0, r1
   1d0a0:	str	r1, [sp, #12]
   1d0a4:	cmp	r3, r2
   1d0a8:	bge	1d0f8 <__assert_fail@plt+0xbfcc>
   1d0ac:	mov	ip, fp
   1d0b0:	str	r2, [sp, #20]
   1d0b4:	mov	lr, sl
   1d0b8:	str	r3, [sp, #32]
   1d0bc:	mov	r0, r9
   1d0c0:	mov	sl, r6
   1d0c4:	ldr	r1, [sp, #16]
   1d0c8:	mov	r9, r8
   1d0cc:	mov	r6, lr
   1d0d0:	mov	r8, r0
   1d0d4:	ldr	r2, [sp, #24]
   1d0d8:	ldr	r3, [sp, #36]	; 0x24
   1d0dc:	ldr	fp, [sp, #128]	; 0x80
   1d0e0:	str	ip, [sp, #128]	; 0x80
   1d0e4:	ldr	ip, [sp, #28]
   1d0e8:	str	r2, [sp, #36]	; 0x24
   1d0ec:	str	ip, [sp, #16]
   1d0f0:	str	r3, [sp, #24]
   1d0f4:	str	r1, [sp, #28]
   1d0f8:	mov	r1, #2
   1d0fc:	add	r2, sp, #16
   1d100:	add	r3, sp, #28
   1d104:	add	r0, sp, #76	; 0x4c
   1d108:	str	r1, [sp]
   1d10c:	mov	r1, r2
   1d110:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1d114:	add	r1, sp, #76	; 0x4c
   1d118:	mov	r2, sl
   1d11c:	mov	r0, r1
   1d120:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1d124:	mov	r1, r6
   1d128:	add	r0, sp, #52	; 0x34
   1d12c:	bl	1cf40 <__assert_fail@plt+0xbe14>
   1d130:	ldr	r3, [sp, #20]
   1d134:	add	r6, sl, r6
   1d138:	cmp	r3, #0
   1d13c:	ble	1d23c <__assert_fail@plt+0xc110>
   1d140:	add	r0, sp, #16
   1d144:	add	r5, sp, #64	; 0x40
   1d148:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1d14c:	add	r1, sl, r0
   1d150:	add	r6, r6, r0
   1d154:	mov	r0, r5
   1d158:	add	r4, sp, #40	; 0x28
   1d15c:	bl	1cf40 <__assert_fail@plt+0xbe14>
   1d160:	b	1d1c4 <__assert_fail@plt+0xc098>
   1d164:	add	r1, sp, #16
   1d168:	add	r2, sp, #28
   1d16c:	mov	r0, r1
   1d170:	bl	1b390 <__assert_fail@plt+0xa264>
   1d174:	add	r2, sp, #76	; 0x4c
   1d178:	mov	r1, r5
   1d17c:	mov	r0, r2
   1d180:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d184:	add	r2, sp, #52	; 0x34
   1d188:	mov	r1, r4
   1d18c:	mov	r0, r2
   1d190:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d194:	add	r0, sp, #16
   1d198:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1d19c:	mov	r2, r0
   1d1a0:	mov	sl, r0
   1d1a4:	mov	r1, r5
   1d1a8:	mov	r0, r5
   1d1ac:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1d1b0:	mov	r2, sl
   1d1b4:	mov	r1, r4
   1d1b8:	mov	r0, r4
   1d1bc:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1d1c0:	add	r6, r6, sl
   1d1c4:	add	r1, sp, #28
   1d1c8:	add	r0, sp, #16
   1d1cc:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   1d1d0:	cmp	r0, #0
   1d1d4:	beq	1d250 <__assert_fail@plt+0xc124>
   1d1d8:	bge	1d164 <__assert_fail@plt+0xc038>
   1d1dc:	add	r1, sp, #28
   1d1e0:	add	r2, sp, #16
   1d1e4:	mov	r0, r1
   1d1e8:	bl	1b390 <__assert_fail@plt+0xa264>
   1d1ec:	add	r2, sp, #76	; 0x4c
   1d1f0:	mov	r1, r5
   1d1f4:	mov	r0, r5
   1d1f8:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d1fc:	add	r2, sp, #52	; 0x34
   1d200:	mov	r1, r4
   1d204:	mov	r0, r4
   1d208:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d20c:	add	r0, sp, #28
   1d210:	bl	1b2f8 <__assert_fail@plt+0xa1cc>
   1d214:	add	r1, sp, #76	; 0x4c
   1d218:	mov	sl, r0
   1d21c:	mov	r2, r0
   1d220:	mov	r0, r1
   1d224:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1d228:	add	r1, sp, #52	; 0x34
   1d22c:	mov	r2, sl
   1d230:	mov	r0, r1
   1d234:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1d238:	b	1d1c0 <__assert_fail@plt+0xc094>
   1d23c:	add	r5, sp, #64	; 0x40
   1d240:	mov	r1, sl
   1d244:	mov	r0, r5
   1d248:	add	r4, sp, #40	; 0x28
   1d24c:	bl	1cf40 <__assert_fail@plt+0xbe14>
   1d250:	add	r1, sp, #28
   1d254:	ldr	r2, [sp, #12]
   1d258:	sub	sl, r6, #1
   1d25c:	mov	r0, r1
   1d260:	bl	1bc18 <__assert_fail@plt+0xaaec>
   1d264:	mov	r1, r4
   1d268:	mov	r0, r4
   1d26c:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d270:	ldr	r3, [sp, #44]	; 0x2c
   1d274:	add	r2, sp, #28
   1d278:	add	r0, sp, #52	; 0x34
   1d27c:	ldr	r1, [sp, #128]	; 0x80
   1d280:	rsb	r3, r3, #0
   1d284:	str	r3, [sp, #44]	; 0x2c
   1d288:	bl	1c204 <__assert_fail@plt+0xb0d8>
   1d28c:	add	r1, sp, #52	; 0x34
   1d290:	mov	r0, r1
   1d294:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d298:	ldr	r3, [sp, #56]	; 0x38
   1d29c:	add	r2, sp, #28
   1d2a0:	mov	r1, fp
   1d2a4:	add	r0, sp, #76	; 0x4c
   1d2a8:	cmp	r3, #0
   1d2ac:	rsblt	r3, r3, #0
   1d2b0:	str	r3, [sp, #56]	; 0x38
   1d2b4:	bl	1c204 <__assert_fail@plt+0xb0d8>
   1d2b8:	add	r1, sp, #76	; 0x4c
   1d2bc:	mov	r0, r1
   1d2c0:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d2c4:	ldr	r3, [sp, #80]	; 0x50
   1d2c8:	cmp	r3, #0
   1d2cc:	rsblt	r3, r3, #0
   1d2d0:	cmp	r6, #0
   1d2d4:	str	r3, [sp, #80]	; 0x50
   1d2d8:	beq	1d3b0 <__assert_fail@plt+0xc284>
   1d2dc:	mov	r6, #2
   1d2e0:	ldr	r1, [sp, #44]	; 0x2c
   1d2e4:	ldr	r3, [sp, #48]	; 0x30
   1d2e8:	ldr	r3, [r3]
   1d2ec:	cmp	r1, #0
   1d2f0:	moveq	r3, #0
   1d2f4:	andne	r3, r3, #1
   1d2f8:	cmp	r3, #0
   1d2fc:	bne	1d31c <__assert_fail@plt+0xc1f0>
   1d300:	ldrd	r2, [sp, #68]	; 0x44
   1d304:	ldr	r3, [r3]
   1d308:	cmp	r2, #0
   1d30c:	moveq	r3, #0
   1d310:	andne	r3, r3, #1
   1d314:	cmp	r3, #0
   1d318:	beq	1d378 <__assert_fail@plt+0xc24c>
   1d31c:	add	r2, sp, #52	; 0x34
   1d320:	mov	r1, r4
   1d324:	mov	r0, r4
   1d328:	bl	1b390 <__assert_fail@plt+0xa264>
   1d32c:	add	r2, sp, #76	; 0x4c
   1d330:	mov	r1, r5
   1d334:	mov	r0, r5
   1d338:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d33c:	ldrd	r2, [sp, #68]	; 0x44
   1d340:	ldr	r3, [r3]
   1d344:	cmp	r2, #0
   1d348:	moveq	r3, #0
   1d34c:	andne	r3, r3, #1
   1d350:	cmp	r3, #0
   1d354:	bne	1d68c <__assert_fail@plt+0xc560>
   1d358:	ldr	r1, [sp, #44]	; 0x2c
   1d35c:	ldr	r3, [sp, #48]	; 0x30
   1d360:	ldr	r3, [r3]
   1d364:	cmp	r1, #0
   1d368:	moveq	r3, #0
   1d36c:	andne	r3, r3, #1
   1d370:	cmp	r3, #0
   1d374:	bne	1d68c <__assert_fail@plt+0xc560>
   1d378:	mov	r3, #1
   1d37c:	add	r2, sp, #48	; 0x30
   1d380:	str	r6, [sp]
   1d384:	mov	r0, r4
   1d388:	sub	sl, sl, #1
   1d38c:	bl	1b130 <__assert_fail@plt+0xa004>
   1d390:	mov	r3, #1
   1d394:	add	r2, sp, #72	; 0x48
   1d398:	str	r6, [sp]
   1d39c:	mov	r0, r5
   1d3a0:	ldr	r1, [sp, #68]	; 0x44
   1d3a4:	bl	1b130 <__assert_fail@plt+0xa004>
   1d3a8:	cmn	sl, #1
   1d3ac:	bne	1d2e0 <__assert_fail@plt+0xc1b4>
   1d3b0:	add	r2, sp, #52	; 0x34
   1d3b4:	mov	r1, r4
   1d3b8:	mov	r0, r2
   1d3bc:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d3c0:	add	r1, sp, #52	; 0x34
   1d3c4:	mov	r0, r4
   1d3c8:	bl	1aeb0 <__assert_fail@plt+0x9d84>
   1d3cc:	cmp	r0, #0
   1d3d0:	ble	1d414 <__assert_fail@plt+0xc2e8>
   1d3d4:	ldr	r3, [sp, #40]	; 0x28
   1d3d8:	add	r2, sp, #76	; 0x4c
   1d3dc:	mov	r1, r5
   1d3e0:	mov	r0, r5
   1d3e4:	ldr	lr, [sp, #44]	; 0x2c
   1d3e8:	ldr	ip, [sp, #56]	; 0x38
   1d3ec:	str	ip, [sp, #44]	; 0x2c
   1d3f0:	str	lr, [sp, #56]	; 0x38
   1d3f4:	ldr	lr, [sp, #48]	; 0x30
   1d3f8:	ldr	ip, [sp, #52]	; 0x34
   1d3fc:	str	r3, [sp, #52]	; 0x34
   1d400:	ldr	r3, [sp, #60]	; 0x3c
   1d404:	str	ip, [sp, #40]	; 0x28
   1d408:	str	r3, [sp, #48]	; 0x30
   1d40c:	str	lr, [sp, #60]	; 0x3c
   1d410:	bl	1b390 <__assert_fail@plt+0xa264>
   1d414:	ldr	r3, [fp, #4]
   1d418:	cmp	r3, #0
   1d41c:	blt	1d670 <__assert_fail@plt+0xc544>
   1d420:	ldr	r3, [sp, #128]	; 0x80
   1d424:	ldr	r3, [r3, #4]
   1d428:	cmp	r3, #0
   1d42c:	blt	1d654 <__assert_fail@plt+0xc528>
   1d430:	ldr	r2, [r7, #4]
   1d434:	cmp	r9, #0
   1d438:	ldr	r0, [sp, #28]
   1d43c:	ldr	r3, [sp, #32]
   1d440:	str	r2, [sp, #32]
   1d444:	ldr	r2, [r7, #8]
   1d448:	ldr	r1, [sp, #36]	; 0x24
   1d44c:	str	r3, [r7, #4]
   1d450:	ldr	r3, [r7]
   1d454:	str	r0, [r7]
   1d458:	str	r1, [r7, #8]
   1d45c:	str	r3, [sp, #28]
   1d460:	str	r2, [sp, #36]	; 0x24
   1d464:	beq	1d498 <__assert_fail@plt+0xc36c>
   1d468:	ldr	r1, [r9, #4]
   1d46c:	ldr	r2, [sp, #40]	; 0x28
   1d470:	ldr	r0, [sp, #44]	; 0x2c
   1d474:	str	r1, [sp, #44]	; 0x2c
   1d478:	ldr	r1, [r9]
   1d47c:	str	r2, [r9]
   1d480:	ldr	r2, [r9, #8]
   1d484:	str	r0, [r9, #4]
   1d488:	ldr	r0, [sp, #48]	; 0x30
   1d48c:	str	r1, [sp, #40]	; 0x28
   1d490:	str	r2, [sp, #48]	; 0x30
   1d494:	str	r0, [r9, #8]
   1d498:	cmp	r8, #0
   1d49c:	beq	1d4d0 <__assert_fail@plt+0xc3a4>
   1d4a0:	ldr	r2, [r8, #4]
   1d4a4:	ldr	ip, [sp, #64]	; 0x40
   1d4a8:	ldr	r1, [sp, #68]	; 0x44
   1d4ac:	str	r2, [sp, #68]	; 0x44
   1d4b0:	ldr	r2, [r8, #8]
   1d4b4:	ldr	r0, [sp, #72]	; 0x48
   1d4b8:	str	r1, [r8, #4]
   1d4bc:	ldr	r1, [r8]
   1d4c0:	str	ip, [r8]
   1d4c4:	str	r0, [r8, #8]
   1d4c8:	str	r1, [sp, #64]	; 0x40
   1d4cc:	str	r2, [sp, #72]	; 0x48
   1d4d0:	ldr	r1, [sp, #16]
   1d4d4:	cmp	r1, #0
   1d4d8:	beq	1d4f8 <__assert_fail@plt+0xc3cc>
   1d4dc:	movw	r3, #49436	; 0xc11c
   1d4e0:	movt	r3, #3
   1d4e4:	lsl	r1, r1, #2
   1d4e8:	ldr	r3, [r3, #8]
   1d4ec:	ldr	r0, [sp, #24]
   1d4f0:	blx	r3
   1d4f4:	ldr	r3, [sp, #28]
   1d4f8:	cmp	r3, #0
   1d4fc:	beq	1d518 <__assert_fail@plt+0xc3ec>
   1d500:	movw	r2, #49436	; 0xc11c
   1d504:	movt	r2, #3
   1d508:	lsl	r1, r3, #2
   1d50c:	ldr	r3, [r2, #8]
   1d510:	ldr	r0, [sp, #36]	; 0x24
   1d514:	blx	r3
   1d518:	ldr	r1, [sp, #40]	; 0x28
   1d51c:	cmp	r1, #0
   1d520:	beq	1d53c <__assert_fail@plt+0xc410>
   1d524:	movw	r3, #49436	; 0xc11c
   1d528:	movt	r3, #3
   1d52c:	lsl	r1, r1, #2
   1d530:	ldr	r3, [r3, #8]
   1d534:	ldr	r0, [sp, #48]	; 0x30
   1d538:	blx	r3
   1d53c:	ldr	r1, [sp, #52]	; 0x34
   1d540:	cmp	r1, #0
   1d544:	beq	1d560 <__assert_fail@plt+0xc434>
   1d548:	movw	r3, #49436	; 0xc11c
   1d54c:	movt	r3, #3
   1d550:	lsl	r1, r1, #2
   1d554:	ldr	r3, [r3, #8]
   1d558:	ldr	r0, [sp, #60]	; 0x3c
   1d55c:	blx	r3
   1d560:	ldr	r1, [sp, #64]	; 0x40
   1d564:	cmp	r1, #0
   1d568:	beq	1d584 <__assert_fail@plt+0xc458>
   1d56c:	movw	r3, #49436	; 0xc11c
   1d570:	movt	r3, #3
   1d574:	lsl	r1, r1, #2
   1d578:	ldr	r3, [r3, #8]
   1d57c:	ldr	r0, [sp, #72]	; 0x48
   1d580:	blx	r3
   1d584:	ldr	r1, [sp, #76]	; 0x4c
   1d588:	cmp	r1, #0
   1d58c:	beq	1d5a8 <__assert_fail@plt+0xc47c>
   1d590:	movw	r3, #49436	; 0xc11c
   1d594:	movt	r3, #3
   1d598:	lsl	r1, r1, #2
   1d59c:	ldr	r3, [r3, #8]
   1d5a0:	ldr	r0, [sp, #84]	; 0x54
   1d5a4:	blx	r3
   1d5a8:	add	sp, sp, #92	; 0x5c
   1d5ac:	ldrd	r4, [sp]
   1d5b0:	ldrd	r6, [sp, #8]
   1d5b4:	ldrd	r8, [sp, #16]
   1d5b8:	ldrd	sl, [sp, #24]
   1d5bc:	add	sp, sp, #32
   1d5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5c4:	mov	r1, fp
   1d5c8:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d5cc:	ldr	r3, [r7, #4]
   1d5d0:	cmp	r3, #0
   1d5d4:	rsblt	r3, r3, #0
   1d5d8:	cmp	r9, #0
   1d5dc:	str	r3, [r7, #4]
   1d5e0:	beq	1d5fc <__assert_fail@plt+0xc4d0>
   1d5e4:	lsr	r1, r4, #31
   1d5e8:	mov	r0, r9
   1d5ec:	cmp	r4, #0
   1d5f0:	rsble	r1, r1, #0
   1d5f4:	rsbgt	r1, r1, #1
   1d5f8:	bl	1a58c <__assert_fail@plt+0x9460>
   1d5fc:	cmp	r8, #0
   1d600:	beq	1d5a8 <__assert_fail@plt+0xc47c>
   1d604:	mov	r3, #0
   1d608:	str	r3, [r8, #4]
   1d60c:	b	1d5a8 <__assert_fail@plt+0xc47c>
   1d610:	mov	r1, r3
   1d614:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d618:	ldr	r3, [r7, #4]
   1d61c:	cmp	r3, #0
   1d620:	rsblt	r3, r3, #0
   1d624:	cmp	r9, #0
   1d628:	str	r3, [r7, #4]
   1d62c:	strne	r4, [r9, #4]
   1d630:	cmp	r8, #0
   1d634:	beq	1d5a8 <__assert_fail@plt+0xc47c>
   1d638:	lsr	r1, r5, #31
   1d63c:	mov	r0, r8
   1d640:	cmp	r5, #0
   1d644:	rsble	r1, r1, #0
   1d648:	rsbgt	r1, r1, #1
   1d64c:	bl	1a58c <__assert_fail@plt+0x9460>
   1d650:	b	1d5a8 <__assert_fail@plt+0xc47c>
   1d654:	mov	r1, r5
   1d658:	mov	r0, r5
   1d65c:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d660:	ldr	r3, [sp, #68]	; 0x44
   1d664:	rsb	r3, r3, #0
   1d668:	str	r3, [sp, #68]	; 0x44
   1d66c:	b	1d430 <__assert_fail@plt+0xc304>
   1d670:	mov	r1, r4
   1d674:	mov	r0, r4
   1d678:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d67c:	ldr	r3, [sp, #44]	; 0x2c
   1d680:	rsb	r3, r3, #0
   1d684:	str	r3, [sp, #44]	; 0x2c
   1d688:	b	1d420 <__assert_fail@plt+0xc2f4>
   1d68c:	movw	r1, #43800	; 0xab18
   1d690:	movt	r1, #2
   1d694:	ldr	r3, [pc, #16]	; 1d6ac <__assert_fail@plt+0xc580>
   1d698:	movw	r0, #44480	; 0xadc0
   1d69c:	movt	r0, #2
   1d6a0:	movw	r2, #2950	; 0xb86
   1d6a4:	bl	1112c <__assert_fail@plt>
   1d6a8:	muleq	r2, r8, r9
   1d6ac:	strdeq	sl, [r2], -r8
   1d6b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d6b4:	ldr	r4, [r1, #4]
   1d6b8:	strd	r6, [sp, #8]
   1d6bc:	str	lr, [sp, #16]
   1d6c0:	sub	sp, sp, #36	; 0x24
   1d6c4:	cmp	r4, #0
   1d6c8:	beq	1d778 <__assert_fail@plt+0xc64c>
   1d6cc:	ldr	r4, [r2, #4]
   1d6d0:	eor	r3, r4, r4, asr #31
   1d6d4:	sub	r3, r3, r4, asr #31
   1d6d8:	cmp	r3, #1
   1d6dc:	ble	1d790 <__assert_fail@plt+0xc664>
   1d6e0:	ldr	ip, [pc, #360]	; 1d850 <__assert_fail@plt+0xc724>
   1d6e4:	mov	r7, r2
   1d6e8:	mov	r5, #0
   1d6ec:	mov	r3, r1
   1d6f0:	mov	r6, r0
   1d6f4:	mov	r2, r5
   1d6f8:	add	r1, sp, #20
   1d6fc:	str	r7, [sp]
   1d700:	add	r0, sp, #8
   1d704:	str	r5, [sp, #8]
   1d708:	str	r5, [sp, #12]
   1d70c:	str	ip, [sp, #16]
   1d710:	str	r5, [sp, #20]
   1d714:	str	r5, [sp, #24]
   1d718:	str	ip, [sp, #28]
   1d71c:	bl	1cfb8 <__assert_fail@plt+0xbe8c>
   1d720:	ldr	r4, [sp, #12]
   1d724:	cmp	r4, #1
   1d728:	ble	1d7c4 <__assert_fail@plt+0xc698>
   1d72c:	mov	r4, r5
   1d730:	ldr	r1, [sp, #8]
   1d734:	cmp	r1, #0
   1d738:	beq	1d754 <__assert_fail@plt+0xc628>
   1d73c:	movw	r3, #49436	; 0xc11c
   1d740:	movt	r3, #3
   1d744:	lsl	r1, r1, #2
   1d748:	ldr	r3, [r3, #8]
   1d74c:	ldr	r0, [sp, #16]
   1d750:	blx	r3
   1d754:	ldr	r1, [sp, #20]
   1d758:	cmp	r1, #0
   1d75c:	beq	1d778 <__assert_fail@plt+0xc64c>
   1d760:	movw	r3, #49436	; 0xc11c
   1d764:	movt	r3, #3
   1d768:	lsl	r1, r1, #2
   1d76c:	ldr	r3, [r3, #8]
   1d770:	ldr	r0, [sp, #28]
   1d774:	blx	r3
   1d778:	mov	r0, r4
   1d77c:	add	sp, sp, #36	; 0x24
   1d780:	ldrd	r4, [sp]
   1d784:	ldrd	r6, [sp, #8]
   1d788:	add	sp, sp, #16
   1d78c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d790:	cmp	r4, #0
   1d794:	beq	1d778 <__assert_fail@plt+0xc64c>
   1d798:	ldr	r3, [r2, #8]
   1d79c:	ldr	ip, [r3]
   1d7a0:	clz	r3, ip
   1d7a4:	lsr	r3, r3, #5
   1d7a8:	cmp	ip, #1
   1d7ac:	rsbls	r3, r3, #0
   1d7b0:	rsbhi	r3, r3, #1
   1d7b4:	cmp	r3, #1
   1d7b8:	beq	1d6e0 <__assert_fail@plt+0xc5b4>
   1d7bc:	mov	r4, #0
   1d7c0:	b	1d778 <__assert_fail@plt+0xc64c>
   1d7c4:	bne	1d72c <__assert_fail@plt+0xc600>
   1d7c8:	ldr	r3, [sp, #16]
   1d7cc:	ldr	r3, [r3]
   1d7d0:	clz	r2, r3
   1d7d4:	cmp	r3, #1
   1d7d8:	lsr	r2, r2, #5
   1d7dc:	movls	r3, #0
   1d7e0:	movhi	r3, #1
   1d7e4:	cmp	r3, r2
   1d7e8:	bne	1d72c <__assert_fail@plt+0xc600>
   1d7ec:	ldr	r3, [sp, #24]
   1d7f0:	cmp	r3, r5
   1d7f4:	blt	1d820 <__assert_fail@plt+0xc6f4>
   1d7f8:	ldr	r0, [sp, #20]
   1d7fc:	ldm	r6, {r2, ip}
   1d800:	ldr	r1, [sp, #28]
   1d804:	stm	r6, {r0, r3}
   1d808:	ldr	r3, [r6, #8]
   1d80c:	str	r2, [sp, #20]
   1d810:	str	ip, [sp, #24]
   1d814:	str	r1, [r6, #8]
   1d818:	str	r3, [sp, #28]
   1d81c:	b	1d730 <__assert_fail@plt+0xc604>
   1d820:	ldr	r3, [r7, #4]
   1d824:	add	r1, sp, #20
   1d828:	mov	r2, r7
   1d82c:	mov	r0, r1
   1d830:	cmp	r3, r5
   1d834:	blt	1d844 <__assert_fail@plt+0xc718>
   1d838:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1d83c:	ldr	r3, [sp, #24]
   1d840:	b	1d7f8 <__assert_fail@plt+0xc6cc>
   1d844:	bl	1b390 <__assert_fail@plt+0xa264>
   1d848:	ldr	r3, [sp, #24]
   1d84c:	b	1d7f8 <__assert_fail@plt+0xc6cc>
   1d850:	muleq	r2, r8, r9
   1d854:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d858:	mov	r5, r3
   1d85c:	ldr	r4, [r2, #4]
   1d860:	strd	r6, [sp, #8]
   1d864:	ldr	r6, [r3, #4]
   1d868:	strd	r8, [sp, #16]
   1d86c:	strd	sl, [sp, #24]
   1d870:	str	lr, [sp, #32]
   1d874:	sub	sp, sp, #76	; 0x4c
   1d878:	cmp	r6, #0
   1d87c:	str	r2, [sp, #12]
   1d880:	str	r0, [sp, #16]
   1d884:	beq	1dc90 <__assert_fail@plt+0xcb64>
   1d888:	cmp	r4, #0
   1d88c:	beq	1d9c4 <__assert_fail@plt+0xc898>
   1d890:	ldr	sl, [r3, #8]
   1d894:	cmp	r6, #0
   1d898:	add	fp, sp, #56	; 0x38
   1d89c:	rsblt	r6, r6, #0
   1d8a0:	mov	r7, r1
   1d8a4:	mov	r2, r6
   1d8a8:	mov	r0, fp
   1d8ac:	mov	r1, sl
   1d8b0:	bl	1a1c0 <__assert_fail@plt+0x9094>
   1d8b4:	ldr	r8, [sp, #56]	; 0x38
   1d8b8:	cmp	r8, #0
   1d8bc:	str	r8, [sp, #24]
   1d8c0:	bne	1d96c <__assert_fail@plt+0xc840>
   1d8c4:	ldr	r3, [sp, #24]
   1d8c8:	str	r3, [sp, #20]
   1d8cc:	ldr	r3, [sp, #12]
   1d8d0:	add	r8, sp, #44	; 0x2c
   1d8d4:	ldr	r9, [pc, #960]	; 1dc9c <__assert_fail@plt+0xcb70>
   1d8d8:	ldr	r2, [r3, #4]
   1d8dc:	mov	r3, #0
   1d8e0:	str	r3, [sp, #44]	; 0x2c
   1d8e4:	str	r3, [sp, #48]	; 0x30
   1d8e8:	str	r9, [sp, #52]	; 0x34
   1d8ec:	cmp	r2, r3
   1d8f0:	blt	1d9e8 <__assert_fail@plt+0xc8bc>
   1d8f4:	mov	r1, r7
   1d8f8:	mov	r0, r8
   1d8fc:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1d900:	ldr	r2, [sp, #48]	; 0x30
   1d904:	mov	r3, #0
   1d908:	eor	r5, r2, r2, asr #31
   1d90c:	sub	r5, r5, r2, asr #31
   1d910:	cmp	r6, r5
   1d914:	str	r5, [sp, #48]	; 0x30
   1d918:	ble	1dbf4 <__assert_fail@plt+0xcac8>
   1d91c:	ldr	r3, [r7, #4]
   1d920:	cmp	r3, #0
   1d924:	blt	1dc1c <__assert_fail@plt+0xcaf0>
   1d928:	cmp	r2, #0
   1d92c:	ldr	r3, [sp, #52]	; 0x34
   1d930:	moveq	r5, r2
   1d934:	beq	1d964 <__assert_fail@plt+0xc838>
   1d938:	sub	r2, r5, #-1073741823	; 0xc0000001
   1d93c:	ldr	r1, [r3, r2, lsl #2]
   1d940:	add	r3, r3, r2, lsl #2
   1d944:	cmp	r1, #0
   1d948:	beq	1d95c <__assert_fail@plt+0xc830>
   1d94c:	b	1d964 <__assert_fail@plt+0xc838>
   1d950:	ldr	r2, [r3, #-4]!
   1d954:	cmp	r2, #0
   1d958:	bne	1d964 <__assert_fail@plt+0xc838>
   1d95c:	subs	r5, r5, #1
   1d960:	bne	1d950 <__assert_fail@plt+0xc824>
   1d964:	str	r5, [sp, #48]	; 0x30
   1d968:	b	1da00 <__assert_fail@plt+0xc8d4>
   1d96c:	mov	r2, #0
   1d970:	movw	r3, #49436	; 0xc11c
   1d974:	movt	r3, #3
   1d978:	lsl	r0, r6, #2
   1d97c:	str	r2, [sp, #56]	; 0x38
   1d980:	ldr	r3, [r3, #4]
   1d984:	blx	r3
   1d988:	mov	r1, sl
   1d98c:	mov	r3, r8
   1d990:	str	r0, [sp, #20]
   1d994:	mov	r2, r6
   1d998:	bl	19164 <__assert_fail@plt+0x8038>
   1d99c:	cmp	r0, #0
   1d9a0:	ldreq	sl, [sp, #20]
   1d9a4:	beq	1d8cc <__assert_fail@plt+0xc7a0>
   1d9a8:	movw	r1, #43800	; 0xab18
   1d9ac:	movt	r1, #2
   1d9b0:	ldr	r3, [pc, #744]	; 1dca0 <__assert_fail@plt+0xcb74>
   1d9b4:	movw	r0, #43988	; 0xabd4
   1d9b8:	movt	r0, #2
   1d9bc:	movw	r2, #3116	; 0xc2c
   1d9c0:	bl	1112c <__assert_fail@plt>
   1d9c4:	mov	r1, #1
   1d9c8:	bl	18318 <__assert_fail@plt+0x71ec>
   1d9cc:	add	sp, sp, #76	; 0x4c
   1d9d0:	ldrd	r4, [sp]
   1d9d4:	ldrd	r6, [sp, #8]
   1d9d8:	ldrd	r8, [sp, #16]
   1d9dc:	ldrd	sl, [sp, #24]
   1d9e0:	add	sp, sp, #32
   1d9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9e8:	mov	r2, r5
   1d9ec:	mov	r1, r7
   1d9f0:	mov	r0, r8
   1d9f4:	bl	1d6b0 <__assert_fail@plt+0xc584>
   1d9f8:	cmp	r0, #0
   1d9fc:	beq	1dc84 <__assert_fail@plt+0xcb58>
   1da00:	cmp	r4, #0
   1da04:	sub	r2, r6, #-1073741823	; 0xc0000001
   1da08:	rsblt	r4, r4, #0
   1da0c:	mov	r3, #0
   1da10:	str	r9, [sp, #40]	; 0x28
   1da14:	add	r0, sp, #32
   1da18:	mov	r1, #1
   1da1c:	str	r4, [sp, #8]
   1da20:	mov	r4, r2
   1da24:	lsl	r9, r4, #2
   1da28:	str	r2, [sp, #28]
   1da2c:	str	r3, [sp, #32]
   1da30:	str	r3, [sp, #36]	; 0x24
   1da34:	bl	18318 <__assert_fail@plt+0x71ec>
   1da38:	ldr	r3, [sp, #8]
   1da3c:	sub	r3, r3, #1
   1da40:	cmn	r3, #1
   1da44:	str	r3, [sp, #8]
   1da48:	beq	1dafc <__assert_fail@plt+0xc9d0>
   1da4c:	ldrd	r2, [sp, #8]
   1da50:	mov	r5, #32
   1da54:	mov	r4, #-2147483648	; 0x80000000
   1da58:	ldr	r3, [r3, #8]
   1da5c:	ldr	r7, [r3, r2, lsl #2]
   1da60:	b	1da7c <__assert_fail@plt+0xc950>
   1da64:	ldr	r2, [sp, #36]	; 0x24
   1da68:	cmp	r2, r6
   1da6c:	bgt	1dab0 <__assert_fail@plt+0xc984>
   1da70:	subs	r5, r5, #1
   1da74:	lsr	r4, r4, #1
   1da78:	beq	1da38 <__assert_fail@plt+0xc90c>
   1da7c:	add	r2, sp, #32
   1da80:	mov	r1, r2
   1da84:	mov	r0, r2
   1da88:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1da8c:	tst	r4, r7
   1da90:	beq	1da64 <__assert_fail@plt+0xc938>
   1da94:	add	r1, sp, #32
   1da98:	mov	r2, r8
   1da9c:	mov	r0, r1
   1daa0:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1daa4:	ldr	r2, [sp, #36]	; 0x24
   1daa8:	cmp	r2, r6
   1daac:	ble	1da70 <__assert_fail@plt+0xc944>
   1dab0:	mov	r3, sl
   1dab4:	mov	r0, #0
   1dab8:	stm	sp, {r6, fp}
   1dabc:	ldr	r1, [sp, #40]	; 0x28
   1dac0:	bl	194a8 <__assert_fail@plt+0x837c>
   1dac4:	ldr	r2, [sp, #40]	; 0x28
   1dac8:	ldr	r3, [r2, r9]
   1dacc:	add	r2, r2, r9
   1dad0:	cmp	r3, #0
   1dad4:	mov	r3, r6
   1dad8:	beq	1daec <__assert_fail@plt+0xc9c0>
   1dadc:	b	1daf4 <__assert_fail@plt+0xc9c8>
   1dae0:	ldr	r1, [r2, #-4]!
   1dae4:	cmp	r1, #0
   1dae8:	bne	1daf4 <__assert_fail@plt+0xc9c8>
   1daec:	subs	r3, r3, #1
   1daf0:	bne	1dae0 <__assert_fail@plt+0xc9b4>
   1daf4:	str	r3, [sp, #36]	; 0x24
   1daf8:	b	1da70 <__assert_fail@plt+0xc944>
   1dafc:	ldr	r2, [sp, #36]	; 0x24
   1db00:	cmp	r2, r6
   1db04:	bge	1dba0 <__assert_fail@plt+0xca74>
   1db08:	ldr	r0, [sp, #20]
   1db0c:	cmp	r0, #0
   1db10:	beq	1db28 <__assert_fail@plt+0xc9fc>
   1db14:	movw	r3, #49436	; 0xc11c
   1db18:	movt	r3, #3
   1db1c:	add	r1, r9, #4
   1db20:	ldr	r3, [r3, #8]
   1db24:	blx	r3
   1db28:	ldr	ip, [sp, #16]
   1db2c:	ldr	r3, [sp, #32]
   1db30:	ldr	r0, [sp, #36]	; 0x24
   1db34:	ldr	r1, [ip]
   1db38:	str	r3, [ip]
   1db3c:	ldr	r3, [ip, #4]
   1db40:	str	r0, [ip, #4]
   1db44:	ldr	r0, [ip, #8]
   1db48:	cmp	r1, #0
   1db4c:	str	r1, [sp, #32]
   1db50:	ldr	r2, [sp, #40]	; 0x28
   1db54:	str	r3, [sp, #36]	; 0x24
   1db58:	str	r0, [sp, #40]	; 0x28
   1db5c:	str	r2, [ip, #8]
   1db60:	beq	1db78 <__assert_fail@plt+0xca4c>
   1db64:	movw	r3, #49436	; 0xc11c
   1db68:	movt	r3, #3
   1db6c:	lsl	r1, r1, #2
   1db70:	ldr	r3, [r3, #8]
   1db74:	blx	r3
   1db78:	ldr	r1, [sp, #44]	; 0x2c
   1db7c:	cmp	r1, #0
   1db80:	beq	1d9cc <__assert_fail@plt+0xc8a0>
   1db84:	movw	r3, #49436	; 0xc11c
   1db88:	movt	r3, #3
   1db8c:	lsl	r1, r1, #2
   1db90:	ldr	r3, [r3, #8]
   1db94:	ldr	r0, [sp, #52]	; 0x34
   1db98:	blx	r3
   1db9c:	b	1d9cc <__assert_fail@plt+0xc8a0>
   1dba0:	ldr	ip, [sp, #24]
   1dba4:	mov	r3, sl
   1dba8:	mov	r0, #0
   1dbac:	stm	sp, {r6, fp}
   1dbb0:	ldr	r1, [sp, #40]	; 0x28
   1dbb4:	str	ip, [sp, #56]	; 0x38
   1dbb8:	bl	194a8 <__assert_fail@plt+0x837c>
   1dbbc:	ldr	r2, [sp, #28]
   1dbc0:	ldr	r3, [sp, #40]	; 0x28
   1dbc4:	ldr	r2, [r3, r2, lsl #2]
   1dbc8:	add	r3, r3, r9
   1dbcc:	cmp	r2, #0
   1dbd0:	beq	1dbe4 <__assert_fail@plt+0xcab8>
   1dbd4:	b	1dbec <__assert_fail@plt+0xcac0>
   1dbd8:	ldr	r2, [r3, #-4]!
   1dbdc:	cmp	r2, #0
   1dbe0:	bne	1dbec <__assert_fail@plt+0xcac0>
   1dbe4:	subs	r6, r6, #1
   1dbe8:	bne	1dbd8 <__assert_fail@plt+0xcaac>
   1dbec:	str	r6, [sp, #36]	; 0x24
   1dbf0:	b	1db08 <__assert_fail@plt+0xc9dc>
   1dbf4:	mov	r0, r3
   1dbf8:	mov	r2, r5
   1dbfc:	stm	sp, {r6, fp}
   1dc00:	mov	r3, sl
   1dc04:	ldr	r1, [sp, #52]	; 0x34
   1dc08:	bl	194a8 <__assert_fail@plt+0x837c>
   1dc0c:	ldr	r3, [r7, #4]
   1dc10:	cmp	r3, #0
   1dc14:	bge	1dc48 <__assert_fail@plt+0xcb1c>
   1dc18:	mov	r5, r6
   1dc1c:	ldr	r3, [sp, #44]	; 0x2c
   1dc20:	cmp	r3, r6
   1dc24:	blt	1dc54 <__assert_fail@plt+0xcb28>
   1dc28:	ldr	r3, [sp, #52]	; 0x34
   1dc2c:	mov	r0, r3
   1dc30:	mov	r2, r6
   1dc34:	str	r5, [sp]
   1dc38:	mov	r1, sl
   1dc3c:	bl	18950 <__assert_fail@plt+0x7824>
   1dc40:	cmp	r0, #0
   1dc44:	bne	1dc68 <__assert_fail@plt+0xcb3c>
   1dc48:	mov	r5, r6
   1dc4c:	ldr	r3, [sp, #52]	; 0x34
   1dc50:	b	1d938 <__assert_fail@plt+0xc80c>
   1dc54:	mov	r1, r6
   1dc58:	mov	r0, r8
   1dc5c:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1dc60:	mov	r3, r0
   1dc64:	b	1dc2c <__assert_fail@plt+0xcb00>
   1dc68:	movw	r1, #43800	; 0xab18
   1dc6c:	movt	r1, #2
   1dc70:	ldr	r3, [pc, #40]	; 1dca0 <__assert_fail@plt+0xcb74>
   1dc74:	movw	r0, #43988	; 0xabd4
   1dc78:	movt	r0, #2
   1dc7c:	movw	r2, #3145	; 0xc49
   1dc80:	bl	1112c <__assert_fail@plt>
   1dc84:	movw	r0, #44540	; 0xadfc
   1dc88:	movt	r0, #2
   1dc8c:	bl	17c40 <__assert_fail@plt+0x6b14>
   1dc90:	movw	r0, #44516	; 0xade4
   1dc94:	movt	r0, #2
   1dc98:	bl	17c40 <__assert_fail@plt+0x6b14>
   1dc9c:	muleq	r2, r8, r9
   1dca0:	andeq	sl, r2, r4, lsl #20
   1dca4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1dca8:	mov	ip, #0
   1dcac:	cmp	r2, #0
   1dcb0:	strd	r6, [sp, #8]
   1dcb4:	mov	r5, r0
   1dcb8:	mov	r6, r1
   1dcbc:	str	lr, [sp, #16]
   1dcc0:	sub	sp, sp, #20
   1dcc4:	mov	r7, r3
   1dcc8:	ldr	lr, [pc, #104]	; 1dd38 <__assert_fail@plt+0xcc0c>
   1dccc:	add	r4, sp, #4
   1dcd0:	str	ip, [sp, #4]
   1dcd4:	str	ip, [sp, #8]
   1dcd8:	str	lr, [sp, #12]
   1dcdc:	beq	1dcec <__assert_fail@plt+0xcbc0>
   1dce0:	mov	r1, r2
   1dce4:	mov	r0, r4
   1dce8:	bl	18318 <__assert_fail@plt+0x71ec>
   1dcec:	mov	r1, r6
   1dcf0:	mov	r3, r7
   1dcf4:	mov	r2, r4
   1dcf8:	mov	r0, r5
   1dcfc:	bl	1d854 <__assert_fail@plt+0xc728>
   1dd00:	ldr	r1, [sp, #4]
   1dd04:	cmp	r1, #0
   1dd08:	beq	1dd24 <__assert_fail@plt+0xcbf8>
   1dd0c:	movw	r3, #49436	; 0xc11c
   1dd10:	movt	r3, #3
   1dd14:	lsl	r1, r1, #2
   1dd18:	ldr	r3, [r3, #8]
   1dd1c:	ldr	r0, [sp, #12]
   1dd20:	blx	r3
   1dd24:	add	sp, sp, #20
   1dd28:	ldrd	r4, [sp]
   1dd2c:	ldrd	r6, [sp, #8]
   1dd30:	add	sp, sp, #16
   1dd34:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd38:	muleq	r2, r8, r9
   1dd3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dd40:	ldr	r4, [sp, #24]
   1dd44:	strd	r6, [sp, #8]
   1dd48:	str	r8, [sp, #16]
   1dd4c:	str	lr, [sp, #20]
   1dd50:	cmp	r4, #0
   1dd54:	beq	1de14 <__assert_fail@plt+0xcce8>
   1dd58:	mov	r5, r2
   1dd5c:	mov	r6, r0
   1dd60:	mov	r2, r3
   1dd64:	mov	r7, r1
   1dd68:	mov	r3, r0
   1dd6c:	mov	r1, r5
   1dd70:	mov	r0, r5
   1dd74:	bl	1d854 <__assert_fail@plt+0xc728>
   1dd78:	ldr	r3, [r5, #4]
   1dd7c:	cmp	r3, #1
   1dd80:	movle	r2, #1
   1dd84:	movgt	r2, #0
   1dd88:	cmp	r3, #0
   1dd8c:	movle	r2, #0
   1dd90:	cmp	r2, #0
   1dd94:	beq	1ddb8 <__assert_fail@plt+0xcc8c>
   1dd98:	b	1ddec <__assert_fail@plt+0xccc0>
   1dd9c:	subs	r4, r4, #1
   1dda0:	beq	1dde4 <__assert_fail@plt+0xccb8>
   1dda4:	mov	r3, r6
   1dda8:	mov	r2, #2
   1ddac:	mov	r1, r5
   1ddb0:	mov	r0, r5
   1ddb4:	bl	1dca4 <__assert_fail@plt+0xcb78>
   1ddb8:	mov	r1, r7
   1ddbc:	mov	r0, r5
   1ddc0:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   1ddc4:	cmp	r0, #0
   1ddc8:	bne	1dd9c <__assert_fail@plt+0xcc70>
   1ddcc:	mov	r0, #1
   1ddd0:	ldrd	r4, [sp]
   1ddd4:	ldrd	r6, [sp, #8]
   1ddd8:	ldr	r8, [sp, #16]
   1dddc:	add	sp, sp, #20
   1dde0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dde4:	mov	r0, r4
   1dde8:	b	1ddd0 <__assert_fail@plt+0xcca4>
   1ddec:	ldr	r3, [r5, #8]
   1ddf0:	ldr	r3, [r3]
   1ddf4:	clz	r2, r3
   1ddf8:	cmp	r3, #1
   1ddfc:	lsr	r2, r2, #5
   1de00:	movls	r3, #0
   1de04:	movhi	r3, #1
   1de08:	cmp	r3, r2
   1de0c:	bne	1ddb8 <__assert_fail@plt+0xcc8c>
   1de10:	b	1ddcc <__assert_fail@plt+0xcca0>
   1de14:	movw	r1, #43800	; 0xab18
   1de18:	movt	r1, #2
   1de1c:	ldr	r3, [pc, #12]	; 1de30 <__assert_fail@plt+0xcd04>
   1de20:	movw	r0, #44596	; 0xae34
   1de24:	movt	r0, #2
   1de28:	movw	r2, #3550	; 0xdde
   1de2c:	bl	1112c <__assert_fail@plt>
   1de30:	andeq	sl, r2, r0, lsl sl
   1de34:	strd	r4, [sp, #-16]!
   1de38:	mov	r4, r0
   1de3c:	mov	r5, r1
   1de40:	str	r6, [sp, #8]
   1de44:	str	lr, [sp, #12]
   1de48:	bl	1cea4 <__assert_fail@plt+0xbd78>
   1de4c:	cmp	r0, #0
   1de50:	beq	1de9c <__assert_fail@plt+0xcd70>
   1de54:	ldr	r3, [r4, #4]
   1de58:	cmp	r3, #0
   1de5c:	blt	1de80 <__assert_fail@plt+0xcd54>
   1de60:	mov	r2, r5
   1de64:	add	r0, r4, #4
   1de68:	ldr	r1, [r4, #8]
   1de6c:	ldrd	r4, [sp]
   1de70:	ldr	r6, [sp, #8]
   1de74:	ldr	lr, [sp, #12]
   1de78:	add	sp, sp, #16
   1de7c:	b	18224 <__assert_fail@plt+0x70f8>
   1de80:	mov	r1, r5
   1de84:	mov	r0, r4
   1de88:	ldrd	r4, [sp]
   1de8c:	ldr	r6, [sp, #8]
   1de90:	ldr	lr, [sp, #12]
   1de94:	add	sp, sp, #16
   1de98:	b	180dc <__assert_fail@plt+0x6fb0>
   1de9c:	ldrd	r4, [sp]
   1dea0:	ldr	r6, [sp, #8]
   1dea4:	add	sp, sp, #12
   1dea8:	pop	{pc}		; (ldr pc, [sp], #4)
   1deac:	strd	r4, [sp, #-16]!
   1deb0:	mov	r4, r0
   1deb4:	mov	r5, r1
   1deb8:	str	r6, [sp, #8]
   1debc:	str	lr, [sp, #12]
   1dec0:	bl	1cea4 <__assert_fail@plt+0xbd78>
   1dec4:	ldr	r3, [r4, #4]
   1dec8:	cmp	r0, r3, lsr #31
   1decc:	beq	1def0 <__assert_fail@plt+0xcdc4>
   1ded0:	mov	r2, r5
   1ded4:	add	r0, r4, #4
   1ded8:	ldr	r1, [r4, #8]
   1dedc:	ldrd	r4, [sp]
   1dee0:	ldr	r6, [sp, #8]
   1dee4:	ldr	lr, [sp, #12]
   1dee8:	add	sp, sp, #16
   1deec:	b	18224 <__assert_fail@plt+0x70f8>
   1def0:	mov	r1, r5
   1def4:	mov	r0, r4
   1def8:	ldrd	r4, [sp]
   1defc:	ldr	r6, [sp, #8]
   1df00:	ldr	lr, [sp, #12]
   1df04:	add	sp, sp, #16
   1df08:	b	180dc <__assert_fail@plt+0x6fb0>
   1df0c:	mov	r2, #1
   1df10:	str	r4, [sp, #-8]!
   1df14:	mov	r4, r0
   1df18:	str	lr, [sp, #4]
   1df1c:	bl	1b018 <__assert_fail@plt+0x9eec>
   1df20:	mov	r1, r4
   1df24:	mov	r0, r4
   1df28:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1df2c:	ldr	r3, [r4, #4]
   1df30:	rsb	r3, r3, #0
   1df34:	str	r3, [r4, #4]
   1df38:	ldr	r4, [sp]
   1df3c:	add	sp, sp, #4
   1df40:	pop	{pc}		; (ldr pc, [sp], #4)
   1df44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1df48:	ldr	r3, [r2, #4]
   1df4c:	strd	r6, [sp, #8]
   1df50:	ldr	r7, [r1, #4]
   1df54:	strd	r8, [sp, #16]
   1df58:	strd	sl, [sp, #24]
   1df5c:	str	lr, [sp, #32]
   1df60:	sub	sp, sp, #20
   1df64:	cmp	r7, #0
   1df68:	rsblt	r7, r7, #0
   1df6c:	cmp	r3, #0
   1df70:	rsblt	r3, r3, #0
   1df74:	cmp	r7, r3
   1df78:	movge	fp, r3
   1df7c:	movlt	fp, r7
   1df80:	movge	r3, r1
   1df84:	movlt	r7, r3
   1df88:	movlt	r3, r2
   1df8c:	movlt	r2, r1
   1df90:	cmp	fp, #0
   1df94:	streq	fp, [r0, #4]
   1df98:	beq	1e0e0 <__assert_fail@plt+0xcfb4>
   1df9c:	ldr	r6, [r2, #4]
   1dfa0:	str	r0, [sp, #4]
   1dfa4:	ldr	r5, [r3, #4]
   1dfa8:	ldr	ip, [r0]
   1dfac:	lsr	r6, r6, #31
   1dfb0:	lsr	r5, r5, #31
   1dfb4:	rsb	r9, r6, #0
   1dfb8:	cmp	r9, #0
   1dfbc:	moveq	r7, fp
   1dfc0:	and	r4, r5, r6
   1dfc4:	add	r1, r4, r7
   1dfc8:	rsb	sl, r5, #0
   1dfcc:	cmp	r1, ip
   1dfd0:	rsb	r8, r4, #0
   1dfd4:	bgt	1e0fc <__assert_fail@plt+0xcfd0>
   1dfd8:	ldr	r1, [sp, #4]
   1dfdc:	ldr	r1, [r1, #8]
   1dfe0:	str	r1, [sp]
   1dfe4:	ldr	r0, [sp]
   1dfe8:	lsl	r1, fp, #2
   1dfec:	ldr	r3, [r3, #8]
   1dff0:	ldr	lr, [r2, #8]
   1dff4:	sub	r0, r0, #4
   1dff8:	mov	ip, r3
   1dffc:	str	r1, [sp, #12]
   1e000:	add	r1, r1, r3
   1e004:	str	r3, [sp, #8]
   1e008:	sub	lr, lr, #4
   1e00c:	ldr	r3, [ip], #4
   1e010:	ldr	r2, [lr, #4]!
   1e014:	eor	r3, r3, sl
   1e018:	adds	r3, r3, r5
   1e01c:	eor	r2, r2, r9
   1e020:	movcs	r5, #1
   1e024:	movcc	r5, #0
   1e028:	adds	r6, r2, r6
   1e02c:	and	r3, r3, r6
   1e030:	movcs	r2, #1
   1e034:	eor	r3, r3, r8
   1e038:	movcc	r2, #0
   1e03c:	adds	r4, r3, r4
   1e040:	mov	r6, r2
   1e044:	movcs	r3, #1
   1e048:	movcc	r3, #0
   1e04c:	cmp	r1, ip
   1e050:	str	r4, [r0, #4]!
   1e054:	mov	r4, r3
   1e058:	bne	1e00c <__assert_fail@plt+0xcee0>
   1e05c:	cmp	r2, #0
   1e060:	bne	1e168 <__assert_fail@plt+0xd03c>
   1e064:	cmp	fp, r7
   1e068:	bge	1e118 <__assert_fail@plt+0xcfec>
   1e06c:	ldr	r3, [sp, #8]
   1e070:	ldr	r0, [sp, #12]
   1e074:	add	r2, r3, r7, lsl #2
   1e078:	ldr	r3, [sp]
   1e07c:	add	r0, r3, r0
   1e080:	ldr	ip, [r1], #4
   1e084:	eor	ip, ip, sl
   1e088:	adds	r3, ip, r5
   1e08c:	and	r3, r3, r9
   1e090:	movcs	r5, #1
   1e094:	eor	r3, r3, r8
   1e098:	movcc	r5, #0
   1e09c:	adds	r3, r3, r4
   1e0a0:	movcs	ip, #1
   1e0a4:	movcc	ip, #0
   1e0a8:	cmp	r2, r1
   1e0ac:	mov	r4, ip
   1e0b0:	str	r3, [r0], #4
   1e0b4:	bne	1e080 <__assert_fail@plt+0xcf54>
   1e0b8:	cmp	ip, #0
   1e0bc:	beq	1e128 <__assert_fail@plt+0xcffc>
   1e0c0:	ldr	r1, [sp]
   1e0c4:	mov	r2, #1
   1e0c8:	add	r3, r7, r2
   1e0cc:	str	r2, [r1, r7, lsl #2]
   1e0d0:	ldr	r2, [sp, #4]
   1e0d4:	cmp	r8, #0
   1e0d8:	rsbne	r3, r3, #0
   1e0dc:	str	r3, [r2, #4]
   1e0e0:	add	sp, sp, #20
   1e0e4:	ldrd	r4, [sp]
   1e0e8:	ldrd	r6, [sp, #8]
   1e0ec:	ldrd	r8, [sp, #16]
   1e0f0:	ldrd	sl, [sp, #24]
   1e0f4:	add	sp, sp, #32
   1e0f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0fc:	str	r3, [sp, #8]
   1e100:	str	r2, [sp, #12]
   1e104:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1e108:	str	r0, [sp]
   1e10c:	ldr	r3, [sp, #8]
   1e110:	ldr	r2, [sp, #12]
   1e114:	b	1dfe4 <__assert_fail@plt+0xceb8>
   1e118:	cmp	r3, #0
   1e11c:	bne	1e0c0 <__assert_fail@plt+0xcf94>
   1e120:	cmp	r7, #0
   1e124:	beq	1e158 <__assert_fail@plt+0xd02c>
   1e128:	ldr	r2, [sp]
   1e12c:	sub	r0, r7, #-1073741823	; 0xc0000001
   1e130:	ldr	r3, [r2, r0, lsl #2]
   1e134:	add	r0, r2, r0, lsl #2
   1e138:	cmp	r3, #0
   1e13c:	beq	1e150 <__assert_fail@plt+0xd024>
   1e140:	b	1e160 <__assert_fail@plt+0xd034>
   1e144:	ldr	r3, [r0, #-4]!
   1e148:	cmp	r3, #0
   1e14c:	bne	1e160 <__assert_fail@plt+0xd034>
   1e150:	subs	r7, r7, #1
   1e154:	bne	1e144 <__assert_fail@plt+0xd018>
   1e158:	mov	r3, #0
   1e15c:	b	1e0d0 <__assert_fail@plt+0xcfa4>
   1e160:	mov	r3, r7
   1e164:	b	1e0d0 <__assert_fail@plt+0xcfa4>
   1e168:	movw	r1, #43800	; 0xab18
   1e16c:	movt	r1, #2
   1e170:	ldr	r3, [pc, #12]	; 1e184 <__assert_fail@plt+0xd058>
   1e174:	movw	r0, #44604	; 0xae3c
   1e178:	movt	r0, #2
   1e17c:	movw	r2, #3854	; 0xf0e
   1e180:	bl	1112c <__assert_fail@plt>
   1e184:	andeq	sl, r2, r0, lsr #20
   1e188:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e18c:	ldr	r3, [r2, #4]
   1e190:	strd	r6, [sp, #8]
   1e194:	ldr	r7, [r1, #4]
   1e198:	strd	r8, [sp, #16]
   1e19c:	strd	sl, [sp, #24]
   1e1a0:	str	lr, [sp, #32]
   1e1a4:	sub	sp, sp, #20
   1e1a8:	cmp	r7, #0
   1e1ac:	rsblt	r7, r7, #0
   1e1b0:	cmp	r3, #0
   1e1b4:	rsblt	r3, r3, #0
   1e1b8:	cmp	r7, r3
   1e1bc:	movge	fp, r3
   1e1c0:	movlt	fp, r7
   1e1c4:	movge	r3, r1
   1e1c8:	movlt	r7, r3
   1e1cc:	movlt	r3, r2
   1e1d0:	movlt	r2, r1
   1e1d4:	cmp	fp, #0
   1e1d8:	beq	1e398 <__assert_fail@plt+0xd26c>
   1e1dc:	ldr	r6, [r2, #4]
   1e1e0:	str	r0, [sp, #4]
   1e1e4:	ldr	r5, [r3, #4]
   1e1e8:	ldr	ip, [r0]
   1e1ec:	lsr	r6, r6, #31
   1e1f0:	lsr	r5, r5, #31
   1e1f4:	rsb	r9, r6, #0
   1e1f8:	cmp	r9, #0
   1e1fc:	movne	r7, fp
   1e200:	orr	r4, r5, r6
   1e204:	add	r1, r4, r7
   1e208:	rsb	sl, r5, #0
   1e20c:	cmp	r1, ip
   1e210:	rsb	r8, r4, #0
   1e214:	bgt	1e37c <__assert_fail@plt+0xd250>
   1e218:	ldr	r1, [sp, #4]
   1e21c:	ldr	r1, [r1, #8]
   1e220:	str	r1, [sp]
   1e224:	ldr	r0, [sp]
   1e228:	lsl	r1, fp, #2
   1e22c:	ldr	r3, [r3, #8]
   1e230:	ldr	lr, [r2, #8]
   1e234:	sub	r0, r0, #4
   1e238:	mov	ip, r3
   1e23c:	str	r1, [sp, #12]
   1e240:	add	r1, r1, r3
   1e244:	str	r3, [sp, #8]
   1e248:	sub	lr, lr, #4
   1e24c:	ldr	r3, [ip], #4
   1e250:	ldr	r2, [lr, #4]!
   1e254:	eor	r3, r3, sl
   1e258:	adds	r3, r3, r5
   1e25c:	eor	r2, r2, r9
   1e260:	movcs	r5, #1
   1e264:	movcc	r5, #0
   1e268:	adds	r6, r2, r6
   1e26c:	orr	r3, r3, r6
   1e270:	movcs	r2, #1
   1e274:	eor	r3, r3, r8
   1e278:	movcc	r2, #0
   1e27c:	adds	r4, r3, r4
   1e280:	mov	r6, r2
   1e284:	movcs	r3, #1
   1e288:	movcc	r3, #0
   1e28c:	cmp	r1, ip
   1e290:	str	r4, [r0, #4]!
   1e294:	mov	r4, r3
   1e298:	bne	1e24c <__assert_fail@plt+0xd120>
   1e29c:	cmp	r2, #0
   1e2a0:	bne	1e3d0 <__assert_fail@plt+0xd2a4>
   1e2a4:	cmp	fp, r7
   1e2a8:	bge	1e338 <__assert_fail@plt+0xd20c>
   1e2ac:	ldr	r3, [sp, #8]
   1e2b0:	ldr	r0, [sp, #12]
   1e2b4:	add	r2, r3, r7, lsl #2
   1e2b8:	ldr	r3, [sp]
   1e2bc:	add	r0, r3, r0
   1e2c0:	ldr	ip, [r1], #4
   1e2c4:	eor	ip, ip, sl
   1e2c8:	adds	r3, ip, r5
   1e2cc:	orr	r3, r3, r9
   1e2d0:	movcs	r5, #1
   1e2d4:	eor	r3, r3, r8
   1e2d8:	movcc	r5, #0
   1e2dc:	adds	r3, r3, r4
   1e2e0:	movcs	ip, #1
   1e2e4:	movcc	ip, #0
   1e2e8:	cmp	r2, r1
   1e2ec:	mov	r4, ip
   1e2f0:	str	r3, [r0], #4
   1e2f4:	bne	1e2c0 <__assert_fail@plt+0xd194>
   1e2f8:	cmp	ip, #0
   1e2fc:	bne	1e340 <__assert_fail@plt+0xd214>
   1e300:	ldr	r2, [sp]
   1e304:	sub	r0, r7, #-1073741823	; 0xc0000001
   1e308:	ldr	r3, [r2, r0, lsl #2]
   1e30c:	add	r0, r2, r0, lsl #2
   1e310:	cmp	r3, #0
   1e314:	beq	1e328 <__assert_fail@plt+0xd1fc>
   1e318:	b	1e3bc <__assert_fail@plt+0xd290>
   1e31c:	ldr	r3, [r0, #-4]!
   1e320:	cmp	r3, #0
   1e324:	bne	1e3bc <__assert_fail@plt+0xd290>
   1e328:	subs	r7, r7, #1
   1e32c:	bne	1e31c <__assert_fail@plt+0xd1f0>
   1e330:	mov	r3, #0
   1e334:	b	1e350 <__assert_fail@plt+0xd224>
   1e338:	cmp	r3, #0
   1e33c:	beq	1e3c4 <__assert_fail@plt+0xd298>
   1e340:	ldr	r1, [sp]
   1e344:	mov	r2, #1
   1e348:	add	r3, r7, r2
   1e34c:	str	r2, [r1, r7, lsl #2]
   1e350:	ldr	r2, [sp, #4]
   1e354:	cmp	r8, #0
   1e358:	rsbne	r3, r3, #0
   1e35c:	str	r3, [r2, #4]
   1e360:	add	sp, sp, #20
   1e364:	ldrd	r4, [sp]
   1e368:	ldrd	r6, [sp, #8]
   1e36c:	ldrd	r8, [sp, #16]
   1e370:	ldrd	sl, [sp, #24]
   1e374:	add	sp, sp, #32
   1e378:	pop	{pc}		; (ldr pc, [sp], #4)
   1e37c:	str	r3, [sp, #8]
   1e380:	str	r2, [sp, #12]
   1e384:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1e388:	str	r0, [sp]
   1e38c:	ldr	r3, [sp, #8]
   1e390:	ldr	r2, [sp, #12]
   1e394:	b	1e224 <__assert_fail@plt+0xd0f8>
   1e398:	mov	r1, r3
   1e39c:	add	sp, sp, #20
   1e3a0:	ldrd	r4, [sp]
   1e3a4:	ldrd	r6, [sp, #8]
   1e3a8:	ldrd	r8, [sp, #16]
   1e3ac:	ldrd	sl, [sp, #24]
   1e3b0:	ldr	lr, [sp, #32]
   1e3b4:	add	sp, sp, #36	; 0x24
   1e3b8:	b	1a5fc <__assert_fail@plt+0x94d0>
   1e3bc:	mov	r3, r7
   1e3c0:	b	1e350 <__assert_fail@plt+0xd224>
   1e3c4:	cmp	r7, #0
   1e3c8:	beq	1e330 <__assert_fail@plt+0xd204>
   1e3cc:	b	1e300 <__assert_fail@plt+0xd1d4>
   1e3d0:	movw	r1, #43800	; 0xab18
   1e3d4:	movt	r1, #2
   1e3d8:	ldr	r3, [pc, #12]	; 1e3ec <__assert_fail@plt+0xd2c0>
   1e3dc:	movw	r0, #44604	; 0xae3c
   1e3e0:	movt	r0, #2
   1e3e4:	movw	r2, #3927	; 0xf57
   1e3e8:	bl	1112c <__assert_fail@plt>
   1e3ec:	andeq	sl, r2, r8, lsr #20
   1e3f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e3f4:	strd	r6, [sp, #8]
   1e3f8:	strd	r8, [sp, #16]
   1e3fc:	ldr	r8, [r1, #4]
   1e400:	strd	sl, [sp, #24]
   1e404:	ldr	r9, [r2, #4]
   1e408:	str	lr, [sp, #32]
   1e40c:	sub	sp, sp, #28
   1e410:	cmp	r8, #0
   1e414:	rsblt	r8, r8, #0
   1e418:	cmp	r9, #0
   1e41c:	rsblt	r9, r9, #0
   1e420:	cmp	r8, r9
   1e424:	movge	lr, r9
   1e428:	movlt	lr, r8
   1e42c:	movlt	r3, r2
   1e430:	movge	r9, r8
   1e434:	movge	r3, r1
   1e438:	movlt	r2, r1
   1e43c:	str	lr, [sp, #8]
   1e440:	cmp	lr, #0
   1e444:	beq	1e604 <__assert_fail@plt+0xd4d8>
   1e448:	ldr	r6, [r2, #4]
   1e44c:	mov	r8, r9
   1e450:	str	r0, [sp, #12]
   1e454:	ldr	r5, [r3, #4]
   1e458:	ldr	ip, [r0]
   1e45c:	lsr	r6, r6, #31
   1e460:	lsr	r5, r5, #31
   1e464:	rsb	fp, r6, #0
   1e468:	eor	r4, r5, r6
   1e46c:	rsb	r7, r5, #0
   1e470:	add	r1, r4, r9
   1e474:	rsb	sl, r4, #0
   1e478:	cmp	r1, ip
   1e47c:	bgt	1e5e8 <__assert_fail@plt+0xd4bc>
   1e480:	ldr	r1, [sp, #12]
   1e484:	ldr	r1, [r1, #8]
   1e488:	str	r1, [sp, #4]
   1e48c:	ldrd	r0, [sp, #4]
   1e490:	ldr	r3, [r3, #8]
   1e494:	ldr	ip, [r2, #8]
   1e498:	lsl	r1, r1, #2
   1e49c:	sub	r0, r0, #4
   1e4a0:	add	r2, r1, r3
   1e4a4:	str	r3, [sp, #16]
   1e4a8:	str	r1, [sp, #20]
   1e4ac:	mov	r1, r3
   1e4b0:	sub	ip, ip, #4
   1e4b4:	ldr	r3, [r1], #4
   1e4b8:	ldr	lr, [ip, #4]!
   1e4bc:	eor	r3, r3, r7
   1e4c0:	adds	r3, r3, r5
   1e4c4:	eor	lr, lr, fp
   1e4c8:	movcs	r5, #1
   1e4cc:	movcc	r5, #0
   1e4d0:	adds	r6, lr, r6
   1e4d4:	eor	r6, r6, sl
   1e4d8:	movcs	lr, #1
   1e4dc:	eor	r3, r3, r6
   1e4e0:	movcc	lr, #0
   1e4e4:	adds	r4, r3, r4
   1e4e8:	mov	r6, lr
   1e4ec:	movcs	r3, #1
   1e4f0:	movcc	r3, #0
   1e4f4:	cmp	r2, r1
   1e4f8:	str	r4, [r0, #4]!
   1e4fc:	mov	r4, r3
   1e500:	bne	1e4b4 <__assert_fail@plt+0xd388>
   1e504:	cmp	lr, #0
   1e508:	bne	1e634 <__assert_fail@plt+0xd508>
   1e50c:	ldr	r1, [sp, #8]
   1e510:	cmp	r9, r1
   1e514:	ble	1e5a4 <__assert_fail@plt+0xd478>
   1e518:	ldr	r3, [sp, #16]
   1e51c:	ldr	r0, [sp, #20]
   1e520:	add	r1, r3, r9, lsl #2
   1e524:	ldr	r3, [sp, #4]
   1e528:	add	r0, r3, r0
   1e52c:	ldr	r3, [r2], #4
   1e530:	eor	r3, r3, r7
   1e534:	adds	r3, r3, r5
   1e538:	eor	r3, r3, r7
   1e53c:	movcs	r5, #1
   1e540:	movcc	r5, #0
   1e544:	adds	r4, r3, r4
   1e548:	movcs	r3, #1
   1e54c:	movcc	r3, #0
   1e550:	cmp	r1, r2
   1e554:	str	r4, [r0], #4
   1e558:	mov	r4, r3
   1e55c:	bne	1e52c <__assert_fail@plt+0xd400>
   1e560:	cmp	r3, #0
   1e564:	bne	1e5ac <__assert_fail@plt+0xd480>
   1e568:	ldr	r2, [sp, #4]
   1e56c:	sub	r0, r9, #-1073741823	; 0xc0000001
   1e570:	ldr	r3, [r2, r0, lsl #2]
   1e574:	add	r0, r2, r0, lsl #2
   1e578:	cmp	r3, #0
   1e57c:	movne	r8, r9
   1e580:	beq	1e594 <__assert_fail@plt+0xd468>
   1e584:	b	1e5bc <__assert_fail@plt+0xd490>
   1e588:	ldr	r3, [r0, #-4]!
   1e58c:	cmp	r3, #0
   1e590:	bne	1e5bc <__assert_fail@plt+0xd490>
   1e594:	subs	r8, r8, #1
   1e598:	bne	1e588 <__assert_fail@plt+0xd45c>
   1e59c:	mov	r8, #0
   1e5a0:	b	1e5bc <__assert_fail@plt+0xd490>
   1e5a4:	cmp	r3, #0
   1e5a8:	beq	1e628 <__assert_fail@plt+0xd4fc>
   1e5ac:	ldr	r2, [sp, #4]
   1e5b0:	mov	r3, #1
   1e5b4:	add	r8, r9, r3
   1e5b8:	str	r3, [r2, r9, lsl #2]
   1e5bc:	ldr	r3, [sp, #12]
   1e5c0:	cmp	sl, #0
   1e5c4:	rsbne	r8, r8, #0
   1e5c8:	str	r8, [r3, #4]
   1e5cc:	add	sp, sp, #28
   1e5d0:	ldrd	r4, [sp]
   1e5d4:	ldrd	r6, [sp, #8]
   1e5d8:	ldrd	r8, [sp, #16]
   1e5dc:	ldrd	sl, [sp, #24]
   1e5e0:	add	sp, sp, #32
   1e5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5e8:	str	r3, [sp, #16]
   1e5ec:	str	r2, [sp, #20]
   1e5f0:	bl	17dc4 <__assert_fail@plt+0x6c98>
   1e5f4:	str	r0, [sp, #4]
   1e5f8:	ldr	r3, [sp, #16]
   1e5fc:	ldr	r2, [sp, #20]
   1e600:	b	1e48c <__assert_fail@plt+0xd360>
   1e604:	mov	r1, r3
   1e608:	add	sp, sp, #28
   1e60c:	ldrd	r4, [sp]
   1e610:	ldrd	r6, [sp, #8]
   1e614:	ldrd	r8, [sp, #16]
   1e618:	ldrd	sl, [sp, #24]
   1e61c:	ldr	lr, [sp, #32]
   1e620:	add	sp, sp, #36	; 0x24
   1e624:	b	1a5fc <__assert_fail@plt+0x94d0>
   1e628:	cmp	r9, #0
   1e62c:	beq	1e59c <__assert_fail@plt+0xd470>
   1e630:	b	1e568 <__assert_fail@plt+0xd43c>
   1e634:	movw	r1, #43800	; 0xab18
   1e638:	movt	r1, #2
   1e63c:	ldr	r3, [pc, #12]	; 1e650 <__assert_fail@plt+0xd524>
   1e640:	movw	r0, #44604	; 0xae3c
   1e644:	movt	r0, #2
   1e648:	movw	r2, #3996	; 0xf9c
   1e64c:	bl	1112c <__assert_fail@plt>
   1e650:	andeq	sl, r2, r0, lsr sl
   1e654:	cmp	r1, #0
   1e658:	ble	1e6d8 <__assert_fail@plt+0xd5ac>
   1e65c:	strd	r4, [sp, #-16]!
   1e660:	mov	r5, r0
   1e664:	movw	r4, #21845	; 0x5555
   1e668:	str	r6, [sp, #8]
   1e66c:	add	r6, r5, r1, lsl #2
   1e670:	mov	r0, #0
   1e674:	str	lr, [sp, #12]
   1e678:	movw	lr, #13107	; 0x3333
   1e67c:	ldr	r1, [r5], #4
   1e680:	cmp	r1, #0
   1e684:	beq	1e6c0 <__assert_fail@plt+0xd594>
   1e688:	mov	ip, #0
   1e68c:	and	r2, r4, r1, lsr #1
   1e690:	sub	r2, r1, r2
   1e694:	lsrs	r1, r1, #16
   1e698:	and	r3, lr, r2, lsr #2
   1e69c:	and	r2, r2, lr
   1e6a0:	add	r3, r3, r2
   1e6a4:	add	r3, r3, r3, lsr #4
   1e6a8:	ubfx	r2, r3, #8, #4
   1e6ac:	and	r3, r3, #15
   1e6b0:	add	r3, r2, r3
   1e6b4:	add	ip, ip, r3
   1e6b8:	bne	1e68c <__assert_fail@plt+0xd560>
   1e6bc:	add	r0, r0, ip
   1e6c0:	cmp	r6, r5
   1e6c4:	bne	1e67c <__assert_fail@plt+0xd550>
   1e6c8:	ldrd	r4, [sp]
   1e6cc:	ldr	r6, [sp, #8]
   1e6d0:	add	sp, sp, #12
   1e6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6d8:	mov	r0, #0
   1e6dc:	bx	lr
   1e6e0:	ldr	r1, [r0, #4]
   1e6e4:	cmp	r1, #0
   1e6e8:	blt	1e6f4 <__assert_fail@plt+0xd5c8>
   1e6ec:	ldr	r0, [r0, #8]
   1e6f0:	b	1e654 <__assert_fail@plt+0xd528>
   1e6f4:	mvn	r0, #0
   1e6f8:	bx	lr
   1e6fc:	ldr	r3, [r0, #4]
   1e700:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e704:	ldr	r2, [r1, #4]
   1e708:	strd	r6, [sp, #8]
   1e70c:	strd	r8, [sp, #16]
   1e710:	strd	sl, [sp, #24]
   1e714:	str	lr, [sp, #32]
   1e718:	sub	sp, sp, #20
   1e71c:	teq	r3, r2
   1e720:	str	r3, [sp, #4]
   1e724:	str	r2, [sp, #8]
   1e728:	bmi	1e930 <__assert_fail@plt+0xd804>
   1e72c:	lsr	r5, r3, #31
   1e730:	cmp	r3, #0
   1e734:	rsb	r7, r5, #0
   1e738:	blt	1e8bc <__assert_fail@plt+0xd790>
   1e73c:	ldr	ip, [sp, #4]
   1e740:	ldr	r3, [sp, #8]
   1e744:	ldr	r2, [r1, #8]
   1e748:	ldr	r9, [r0, #8]
   1e74c:	cmp	ip, r3
   1e750:	str	r2, [sp, #12]
   1e754:	blt	1e900 <__assert_fail@plt+0xd7d4>
   1e758:	cmp	r3, #0
   1e75c:	ble	1e91c <__assert_fail@plt+0xd7f0>
   1e760:	stmib	sp, {r3, ip}
   1e764:	str	r9, [sp, #12]
   1e768:	mov	r9, r2
   1e76c:	ldr	r3, [sp, #12]
   1e770:	mov	r0, #0
   1e774:	sub	r9, r9, #4
   1e778:	mov	r8, r0
   1e77c:	mov	r4, r5
   1e780:	movw	r6, #21845	; 0x5555
   1e784:	movw	lr, #13107	; 0x3333
   1e788:	sub	fp, r3, #4
   1e78c:	ldr	r2, [fp, #4]!
   1e790:	ldr	r3, [r9, #4]!
   1e794:	eor	r2, r2, r7
   1e798:	adds	r2, r2, r5
   1e79c:	eor	r3, r3, r7
   1e7a0:	movcs	r5, #1
   1e7a4:	movcc	r5, #0
   1e7a8:	adds	r4, r3, r4
   1e7ac:	movcs	sl, #1
   1e7b0:	movcc	sl, #0
   1e7b4:	cmp	r2, r4
   1e7b8:	eor	r2, r2, r4
   1e7bc:	mov	r4, sl
   1e7c0:	beq	1e7fc <__assert_fail@plt+0xd6d0>
   1e7c4:	mov	ip, #0
   1e7c8:	and	r1, r6, r2, lsr #1
   1e7cc:	sub	r1, r2, r1
   1e7d0:	lsrs	r2, r2, #16
   1e7d4:	and	r3, lr, r1, lsr #2
   1e7d8:	and	r1, r1, lr
   1e7dc:	add	r3, r3, r1
   1e7e0:	add	r3, r3, r3, lsr #4
   1e7e4:	ubfx	r1, r3, #8, #4
   1e7e8:	and	r3, r3, #15
   1e7ec:	add	r3, r1, r3
   1e7f0:	add	ip, ip, r3
   1e7f4:	bne	1e7c8 <__assert_fail@plt+0xd69c>
   1e7f8:	add	r0, r0, ip
   1e7fc:	ldr	r3, [sp, #4]
   1e800:	add	r8, r8, #1
   1e804:	cmp	r8, r3
   1e808:	blt	1e78c <__assert_fail@plt+0xd660>
   1e80c:	cmp	sl, #0
   1e810:	bne	1e954 <__assert_fail@plt+0xd828>
   1e814:	ldr	r3, [sp, #4]
   1e818:	ldr	r2, [sp, #8]
   1e81c:	cmp	r3, r2
   1e820:	bge	1e8a0 <__assert_fail@plt+0xd774>
   1e824:	ldr	r2, [sp, #4]
   1e828:	movw	lr, #21845	; 0x5555
   1e82c:	movw	ip, #13107	; 0x3333
   1e830:	ldr	r3, [sp, #12]
   1e834:	add	r4, r3, r2, lsl #2
   1e838:	ldr	r2, [sp, #8]
   1e83c:	add	r8, r3, r2, lsl #2
   1e840:	ldr	r1, [r4], #4
   1e844:	eor	r1, r1, r7
   1e848:	adds	r1, r1, r5
   1e84c:	movcs	r5, #1
   1e850:	movcc	r5, #0
   1e854:	cmp	r7, r1
   1e858:	eor	r1, r1, r7
   1e85c:	beq	1e898 <__assert_fail@plt+0xd76c>
   1e860:	mov	r6, #0
   1e864:	and	r2, lr, r1, lsr #1
   1e868:	sub	r2, r1, r2
   1e86c:	lsrs	r1, r1, #16
   1e870:	and	r3, ip, r2, lsr #2
   1e874:	and	r2, r2, ip
   1e878:	add	r3, r3, r2
   1e87c:	add	r3, r3, r3, lsr #4
   1e880:	ubfx	r2, r3, #8, #4
   1e884:	and	r3, r3, #15
   1e888:	add	r3, r2, r3
   1e88c:	add	r6, r6, r3
   1e890:	bne	1e864 <__assert_fail@plt+0xd738>
   1e894:	add	r0, r0, r6
   1e898:	cmp	r8, r4
   1e89c:	bne	1e840 <__assert_fail@plt+0xd714>
   1e8a0:	add	sp, sp, #20
   1e8a4:	ldrd	r4, [sp]
   1e8a8:	ldrd	r6, [sp, #8]
   1e8ac:	ldrd	r8, [sp, #16]
   1e8b0:	ldrd	sl, [sp, #24]
   1e8b4:	add	sp, sp, #32
   1e8b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8bc:	cmp	r2, #0
   1e8c0:	bge	1e938 <__assert_fail@plt+0xd80c>
   1e8c4:	ldr	r3, [sp, #4]
   1e8c8:	ldr	r2, [sp, #8]
   1e8cc:	ldr	r0, [r0, #8]
   1e8d0:	ldr	r9, [r1, #8]
   1e8d4:	cmp	r3, r2
   1e8d8:	rsb	r3, r3, #0
   1e8dc:	rsb	r2, r2, #0
   1e8e0:	str	r0, [sp, #12]
   1e8e4:	strdle	r2, [sp, #4]
   1e8e8:	ble	1e76c <__assert_fail@plt+0xd640>
   1e8ec:	str	r3, [sp, #4]
   1e8f0:	str	r2, [sp, #8]
   1e8f4:	str	r9, [sp, #12]
   1e8f8:	mov	r9, r0
   1e8fc:	b	1e76c <__assert_fail@plt+0xd640>
   1e900:	ldr	r3, [sp, #4]
   1e904:	cmp	r3, #0
   1e908:	movle	r0, #0
   1e90c:	movle	r5, r0
   1e910:	strle	r0, [sp, #4]
   1e914:	bgt	1e76c <__assert_fail@plt+0xd640>
   1e918:	b	1e814 <__assert_fail@plt+0xd6e8>
   1e91c:	ldr	r3, [sp, #4]
   1e920:	mov	r0, #0
   1e924:	mov	r5, r0
   1e928:	stmib	sp, {r0, r3, r9}
   1e92c:	b	1e814 <__assert_fail@plt+0xd6e8>
   1e930:	mvn	r0, #0
   1e934:	b	1e8a0 <__assert_fail@plt+0xd774>
   1e938:	movw	r1, #43800	; 0xab18
   1e93c:	movt	r1, #2
   1e940:	ldr	r3, [pc, #40]	; 1e970 <__assert_fail@plt+0xd844>
   1e944:	movw	r0, #44612	; 0xae44
   1e948:	movt	r0, #2
   1e94c:	movw	r2, #4079	; 0xfef
   1e950:	bl	1112c <__assert_fail@plt>
   1e954:	movw	r1, #43800	; 0xab18
   1e958:	movt	r1, #2
   1e95c:	ldr	r3, [pc, #12]	; 1e970 <__assert_fail@plt+0xd844>
   1e960:	movw	r0, #44604	; 0xae3c
   1e964:	movt	r0, #2
   1e968:	movw	r2, #4100	; 0x1004
   1e96c:	bl	1112c <__assert_fail@plt>
   1e970:	andeq	sl, r2, r8, lsr sl
   1e974:	strd	r4, [sp, #-16]!
   1e978:	lsr	ip, r1, #5
   1e97c:	ldr	r4, [r0, #4]
   1e980:	str	r6, [sp, #8]
   1e984:	str	lr, [sp, #12]
   1e988:	sub	sp, sp, #8
   1e98c:	eor	r3, r4, r4, asr #31
   1e990:	sub	r3, r3, r4, asr #31
   1e994:	cmp	r3, ip
   1e998:	ble	1e9f0 <__assert_fail@plt+0xd8c4>
   1e99c:	ldr	r2, [r0, #8]
   1e9a0:	cmp	r1, #0
   1e9a4:	lsl	lr, ip, #2
   1e9a8:	ldr	r0, [r2, ip, lsl #2]
   1e9ac:	bne	1e9d0 <__assert_fail@plt+0xd8a4>
   1e9b0:	str	r1, [sp]
   1e9b4:	mov	r1, ip
   1e9b8:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   1e9bc:	add	sp, sp, #8
   1e9c0:	ldrd	r4, [sp]
   1e9c4:	ldr	r6, [sp, #8]
   1e9c8:	add	sp, sp, #12
   1e9cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9d0:	cmp	r4, #0
   1e9d4:	movge	lr, #0
   1e9d8:	blt	1ea00 <__assert_fail@plt+0xd8d4>
   1e9dc:	and	r1, r1, #31
   1e9e0:	mvn	r4, #0
   1e9e4:	and	r0, r0, r4, lsl r1
   1e9e8:	mov	r1, lr
   1e9ec:	b	1e9b0 <__assert_fail@plt+0xd884>
   1e9f0:	cmp	r4, #0
   1e9f4:	movlt	r0, r1
   1e9f8:	mvnge	r0, #0
   1e9fc:	b	1e9bc <__assert_fail@plt+0xd890>
   1ea00:	cmp	ip, #0
   1ea04:	beq	1ea38 <__assert_fail@plt+0xd90c>
   1ea08:	sub	lr, lr, #4
   1ea0c:	ldr	r6, [r2, lr]
   1ea10:	add	lr, r2, lr
   1ea14:	cmp	r6, #0
   1ea18:	bne	1ea60 <__assert_fail@plt+0xd934>
   1ea1c:	mov	r4, ip
   1ea20:	b	1ea30 <__assert_fail@plt+0xd904>
   1ea24:	ldr	r5, [lr, #-4]!
   1ea28:	cmp	r5, #0
   1ea2c:	bne	1ea3c <__assert_fail@plt+0xd910>
   1ea30:	subs	r4, r4, #1
   1ea34:	bne	1ea24 <__assert_fail@plt+0xd8f8>
   1ea38:	mov	r6, #1
   1ea3c:	mvn	r0, r0
   1ea40:	and	r1, r1, #31
   1ea44:	adds	r0, r0, r6
   1ea48:	mvn	r4, #0
   1ea4c:	mvncc	lr, #0
   1ea50:	movcs	lr, #0
   1ea54:	and	r0, r0, r4, lsl r1
   1ea58:	mov	r1, lr
   1ea5c:	b	1e9b0 <__assert_fail@plt+0xd884>
   1ea60:	mov	r6, #0
   1ea64:	b	1ea3c <__assert_fail@plt+0xd910>
   1ea68:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ea6c:	strd	r6, [sp, #8]
   1ea70:	lsr	r6, r1, #5
   1ea74:	str	lr, [sp, #16]
   1ea78:	sub	sp, sp, #12
   1ea7c:	ldr	lr, [r0, #4]
   1ea80:	eor	r3, lr, lr, asr #31
   1ea84:	sub	r3, r3, lr, asr #31
   1ea88:	mvn	lr, lr
   1ea8c:	lsr	lr, lr, #31
   1ea90:	cmp	r3, r6
   1ea94:	rsb	lr, lr, #0
   1ea98:	ble	1eb20 <__assert_fail@plt+0xd9f4>
   1ea9c:	ldr	r2, [r0, #8]
   1eaa0:	cmp	lr, #0
   1eaa4:	lsl	r4, r6, #2
   1eaa8:	ldr	r7, [r2, r6, lsl #2]
   1eaac:	eor	r7, r7, lr
   1eab0:	bne	1eaf4 <__assert_fail@plt+0xd9c8>
   1eab4:	cmp	r6, #0
   1eab8:	beq	1eaec <__assert_fail@plt+0xd9c0>
   1eabc:	sub	r4, r4, #4
   1eac0:	ldr	r0, [r2, r4]
   1eac4:	add	r4, r2, r4
   1eac8:	cmp	r0, #0
   1eacc:	bne	1eb30 <__assert_fail@plt+0xda04>
   1ead0:	mov	ip, r6
   1ead4:	b	1eae4 <__assert_fail@plt+0xd9b8>
   1ead8:	ldr	r5, [r4, #-4]!
   1eadc:	cmp	r5, #0
   1eae0:	bne	1eaf0 <__assert_fail@plt+0xd9c4>
   1eae4:	subs	ip, ip, #1
   1eae8:	bne	1ead8 <__assert_fail@plt+0xd9ac>
   1eaec:	mov	r0, #1
   1eaf0:	sub	r7, r7, r0
   1eaf4:	and	ip, r1, #31
   1eaf8:	mvn	r0, #0
   1eafc:	str	lr, [sp]
   1eb00:	and	r0, r7, r0, lsl ip
   1eb04:	mov	r1, r6
   1eb08:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   1eb0c:	add	sp, sp, #12
   1eb10:	ldrd	r4, [sp]
   1eb14:	ldrd	r6, [sp, #8]
   1eb18:	add	sp, sp, #16
   1eb1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb20:	cmp	lr, #0
   1eb24:	movne	r0, r1
   1eb28:	mvneq	r0, #0
   1eb2c:	b	1eb0c <__assert_fail@plt+0xd9e0>
   1eb30:	mov	r0, lr
   1eb34:	b	1eaf0 <__assert_fail@plt+0xd9c4>
   1eb38:	cmp	r1, #1
   1eb3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eb40:	strd	r6, [sp, #8]
   1eb44:	strd	r8, [sp, #16]
   1eb48:	strd	sl, [sp, #24]
   1eb4c:	str	lr, [sp, #32]
   1eb50:	sub	sp, sp, #20
   1eb54:	ble	1ed1c <__assert_fail@plt+0xdbf0>
   1eb58:	cmp	r1, #62	; 0x3e
   1eb5c:	mov	r6, r1
   1eb60:	bgt	1ed38 <__assert_fail@plt+0xdc0c>
   1eb64:	ldr	r4, [r0, #4]
   1eb68:	cmp	r4, #0
   1eb6c:	moveq	r5, #1
   1eb70:	bne	1eb94 <__assert_fail@plt+0xda68>
   1eb74:	mov	r0, r5
   1eb78:	add	sp, sp, #20
   1eb7c:	ldrd	r4, [sp]
   1eb80:	ldrd	r6, [sp, #8]
   1eb84:	ldrd	r8, [sp, #16]
   1eb88:	ldrd	sl, [sp, #24]
   1eb8c:	add	sp, sp, #32
   1eb90:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb94:	ldr	fp, [r0, #8]
   1eb98:	cmp	r4, #0
   1eb9c:	rsblt	r4, r4, #0
   1eba0:	sub	r7, r4, #-1073741823	; 0xc0000001
   1eba4:	sub	r5, r4, #1
   1eba8:	lsl	r9, r7, #2
   1ebac:	ldr	r0, [fp, r7, lsl #2]
   1ebb0:	bl	17f84 <__assert_fail@plt+0x6e58>
   1ebb4:	sub	r3, r6, #2
   1ebb8:	add	r5, r0, r5, lsl #5
   1ebbc:	cmp	r3, #30
   1ebc0:	ldrls	pc, [pc, r3, lsl #2]
   1ebc4:	b	1ec8c <__assert_fail@plt+0xdb60>
   1ebc8:	andeq	lr, r1, r4, ror fp
   1ebcc:	andeq	lr, r1, ip, lsl #25
   1ebd0:	andeq	lr, r1, r0, lsl #25
   1ebd4:	andeq	lr, r1, ip, lsl #25
   1ebd8:	andeq	lr, r1, ip, lsl #25
   1ebdc:	andeq	lr, r1, ip, lsl #25
   1ebe0:	andeq	lr, r1, r8, ror #24
   1ebe4:	andeq	lr, r1, ip, lsl #25
   1ebe8:	andeq	lr, r1, ip, lsl #25
   1ebec:	andeq	lr, r1, ip, lsl #25
   1ebf0:	andeq	lr, r1, ip, lsl #25
   1ebf4:	andeq	lr, r1, ip, lsl #25
   1ebf8:	andeq	lr, r1, ip, lsl #25
   1ebfc:	andeq	lr, r1, ip, lsl #25
   1ec00:	andeq	lr, r1, ip, asr ip
   1ec04:	andeq	lr, r1, ip, lsl #25
   1ec08:	andeq	lr, r1, ip, lsl #25
   1ec0c:	andeq	lr, r1, ip, lsl #25
   1ec10:	andeq	lr, r1, ip, lsl #25
   1ec14:	andeq	lr, r1, ip, lsl #25
   1ec18:	andeq	lr, r1, ip, lsl #25
   1ec1c:	andeq	lr, r1, ip, lsl #25
   1ec20:	andeq	lr, r1, ip, lsl #25
   1ec24:	andeq	lr, r1, ip, lsl #25
   1ec28:	andeq	lr, r1, ip, lsl #25
   1ec2c:	andeq	lr, r1, ip, lsl #25
   1ec30:	andeq	lr, r1, ip, lsl #25
   1ec34:	andeq	lr, r1, ip, lsl #25
   1ec38:	andeq	lr, r1, ip, lsl #25
   1ec3c:	andeq	lr, r1, ip, lsl #25
   1ec40:	andeq	lr, r1, r4, asr #24
   1ec44:	add	r5, r5, #4
   1ec48:	movw	r3, #52429	; 0xcccd
   1ec4c:	movt	r3, #52428	; 0xcccc
   1ec50:	umull	r3, r5, r3, r5
   1ec54:	lsr	r5, r5, #2
   1ec58:	b	1eb74 <__assert_fail@plt+0xda48>
   1ec5c:	add	r5, r5, #3
   1ec60:	lsr	r5, r5, #2
   1ec64:	b	1eb74 <__assert_fail@plt+0xda48>
   1ec68:	add	r5, r5, #2
   1ec6c:	movw	r3, #43691	; 0xaaab
   1ec70:	movt	r3, #43690	; 0xaaaa
   1ec74:	umull	r3, r5, r3, r5
   1ec78:	lsr	r5, r5, #1
   1ec7c:	b	1eb74 <__assert_fail@plt+0xda48>
   1ec80:	add	r5, r5, #1
   1ec84:	lsr	r5, r5, #1
   1ec88:	b	1eb74 <__assert_fail@plt+0xda48>
   1ec8c:	add	r9, r9, #4
   1ec90:	movw	sl, #49436	; 0xc11c
   1ec94:	movt	sl, #3
   1ec98:	mov	r0, r9
   1ec9c:	ldr	r3, [sl, #4]
   1eca0:	blx	r3
   1eca4:	mov	r8, r0
   1eca8:	sub	r2, r0, #4
   1ecac:	mov	r3, fp
   1ecb0:	add	r0, fp, r9
   1ecb4:	ldr	r1, [r3], #4
   1ecb8:	cmp	r3, r0
   1ecbc:	str	r1, [r2, #4]!
   1ecc0:	bne	1ecb4 <__assert_fail@plt+0xdb88>
   1ecc4:	mov	r1, r6
   1ecc8:	mov	r0, sp
   1eccc:	mov	r5, #0
   1ecd0:	bl	1a004 <__assert_fail@plt+0x8ed8>
   1ecd4:	b	1ecdc <__assert_fail@plt+0xdbb0>
   1ecd8:	sub	r7, r4, #-1073741823	; 0xc0000001
   1ecdc:	mov	r3, sp
   1ece0:	mov	r2, r4
   1ece4:	mov	r1, r8
   1ece8:	mov	r0, r8
   1ecec:	bl	19248 <__assert_fail@plt+0x811c>
   1ecf0:	ldr	r3, [r8, r7, lsl #2]
   1ecf4:	add	r5, r5, #1
   1ecf8:	cmp	r3, #0
   1ecfc:	subeq	r4, r4, #1
   1ed00:	cmp	r4, #0
   1ed04:	bne	1ecd8 <__assert_fail@plt+0xdbac>
   1ed08:	mov	r1, r9
   1ed0c:	mov	r0, r8
   1ed10:	ldr	r3, [sl, #8]
   1ed14:	blx	r3
   1ed18:	b	1eb74 <__assert_fail@plt+0xda48>
   1ed1c:	movw	r1, #43800	; 0xab18
   1ed20:	movt	r1, #2
   1ed24:	ldr	r3, [pc, #40]	; 1ed54 <__assert_fail@plt+0xdc28>
   1ed28:	movw	r0, #44620	; 0xae4c
   1ed2c:	movt	r0, #2
   1ed30:	movw	r2, #4191	; 0x105f
   1ed34:	bl	1112c <__assert_fail@plt>
   1ed38:	movw	r1, #43800	; 0xab18
   1ed3c:	movt	r1, #2
   1ed40:	ldr	r3, [pc, #12]	; 1ed54 <__assert_fail@plt+0xdc28>
   1ed44:	movw	r0, #44632	; 0xae58
   1ed48:	movt	r0, #2
   1ed4c:	movw	r2, #4192	; 0x1060
   1ed50:	bl	1112c <__assert_fail@plt>
   1ed54:	andeq	sl, r2, r4, asr #20
   1ed58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ed5c:	strd	r6, [sp, #8]
   1ed60:	mov	r6, r3
   1ed64:	ldr	r7, [r2, #4]
   1ed68:	strd	r8, [sp, #16]
   1ed6c:	strd	sl, [sp, #24]
   1ed70:	str	lr, [sp, #32]
   1ed74:	sub	sp, sp, #52	; 0x34
   1ed78:	lsr	r3, r7, #31
   1ed7c:	bics	r3, r3, r6
   1ed80:	bne	1f0a4 <__assert_fail@plt+0xdf78>
   1ed84:	cmp	r6, #0
   1ed88:	beq	1f0b0 <__assert_fail@plt+0xdf84>
   1ed8c:	eor	r3, r7, r7, asr #31
   1ed90:	mov	r5, r2
   1ed94:	mov	r9, r0
   1ed98:	mov	sl, r1
   1ed9c:	sub	r3, r3, r7, asr #31
   1eda0:	cmp	r3, #1
   1eda4:	ble	1efa4 <__assert_fail@plt+0xde78>
   1eda8:	ldr	r8, [pc, #780]	; 1f0bc <__assert_fail@plt+0xdf90>
   1edac:	mov	r4, #0
   1edb0:	mov	r1, #2
   1edb4:	mov	r0, r5
   1edb8:	str	r4, [sp, #12]
   1edbc:	str	r4, [sp, #16]
   1edc0:	str	r8, [sp, #20]
   1edc4:	str	r4, [sp, #24]
   1edc8:	str	r4, [sp, #28]
   1edcc:	str	r8, [sp, #32]
   1edd0:	bl	1eb38 <__assert_fail@plt+0xda0c>
   1edd4:	sub	r1, r0, #1
   1edd8:	add	r0, sp, #12
   1eddc:	udiv	r1, r1, r6
   1ede0:	add	r1, r1, #1
   1ede4:	bl	1cf40 <__assert_fail@plt+0xbe14>
   1ede8:	cmp	r6, #2
   1edec:	beq	1efd4 <__assert_fail@plt+0xdea8>
   1edf0:	cmp	r7, #0
   1edf4:	str	r4, [sp, #36]	; 0x24
   1edf8:	str	r4, [sp, #40]	; 0x28
   1edfc:	str	r8, [sp, #44]	; 0x2c
   1ee00:	blt	1f08c <__assert_fail@plt+0xdf60>
   1ee04:	ldr	r3, [sp, #16]
   1ee08:	sub	r8, r6, #1
   1ee0c:	add	r4, sp, #24
   1ee10:	mov	r7, #2
   1ee14:	b	1ee1c <__assert_fail@plt+0xdcf0>
   1ee18:	ldr	r3, [sp, #16]
   1ee1c:	mov	r2, r8
   1ee20:	mov	r1, r4
   1ee24:	ldr	ip, [sp, #12]
   1ee28:	add	r0, sp, #12
   1ee2c:	ldr	lr, [sp, #28]
   1ee30:	ldr	fp, [sp, #20]
   1ee34:	str	lr, [sp, #16]
   1ee38:	str	r3, [sp, #28]
   1ee3c:	ldr	r3, [sp, #24]
   1ee40:	ldr	lr, [sp, #32]
   1ee44:	str	r3, [sp, #12]
   1ee48:	str	ip, [sp, #24]
   1ee4c:	str	lr, [sp, #20]
   1ee50:	str	fp, [sp, #32]
   1ee54:	bl	1cb94 <__assert_fail@plt+0xba68>
   1ee58:	add	r3, sp, #12
   1ee5c:	mov	r2, r5
   1ee60:	str	r7, [sp]
   1ee64:	mov	r0, r3
   1ee68:	mov	r1, #0
   1ee6c:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1ee70:	mov	r2, r8
   1ee74:	mov	r1, r4
   1ee78:	add	r0, sp, #36	; 0x24
   1ee7c:	bl	1bb44 <__assert_fail@plt+0xaa18>
   1ee80:	add	r1, sp, #12
   1ee84:	add	r2, sp, #36	; 0x24
   1ee88:	mov	r0, r1
   1ee8c:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1ee90:	add	r2, sp, #12
   1ee94:	mov	r3, r6
   1ee98:	str	r7, [sp]
   1ee9c:	mov	r1, #0
   1eea0:	mov	r0, r2
   1eea4:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1eea8:	mov	r1, r4
   1eeac:	add	r0, sp, #12
   1eeb0:	bl	1aeb0 <__assert_fail@plt+0x9d84>
   1eeb4:	cmp	r0, #0
   1eeb8:	blt	1ee18 <__assert_fail@plt+0xdcec>
   1eebc:	ldr	r1, [sp, #36]	; 0x24
   1eec0:	cmp	r1, #0
   1eec4:	beq	1eee0 <__assert_fail@plt+0xddb4>
   1eec8:	movw	r3, #49436	; 0xc11c
   1eecc:	movt	r3, #3
   1eed0:	lsl	r1, r1, #2
   1eed4:	ldr	r3, [r3, #8]
   1eed8:	ldr	r0, [sp, #44]	; 0x2c
   1eedc:	blx	r3
   1eee0:	cmp	sl, #0
   1eee4:	beq	1ef08 <__assert_fail@plt+0xdddc>
   1eee8:	mov	r2, r6
   1eeec:	mov	r1, r4
   1eef0:	add	r0, sp, #12
   1eef4:	bl	1cb94 <__assert_fail@plt+0xba68>
   1eef8:	add	r2, sp, #12
   1eefc:	mov	r1, r5
   1ef00:	mov	r0, sl
   1ef04:	bl	1b390 <__assert_fail@plt+0xa264>
   1ef08:	ldr	r3, [sp, #24]
   1ef0c:	cmp	r9, #0
   1ef10:	moveq	r1, r3
   1ef14:	beq	1ef44 <__assert_fail@plt+0xde18>
   1ef18:	ldr	r1, [sp, #28]
   1ef1c:	ldr	r0, [r9, #4]
   1ef20:	ldr	r2, [sp, #32]
   1ef24:	str	r1, [r9, #4]
   1ef28:	ldr	r1, [r9]
   1ef2c:	str	r3, [r9]
   1ef30:	ldr	r3, [r9, #8]
   1ef34:	str	r2, [r9, #8]
   1ef38:	str	r1, [sp, #24]
   1ef3c:	str	r0, [sp, #28]
   1ef40:	str	r3, [sp, #32]
   1ef44:	cmp	r1, #0
   1ef48:	beq	1ef64 <__assert_fail@plt+0xde38>
   1ef4c:	movw	r3, #49436	; 0xc11c
   1ef50:	movt	r3, #3
   1ef54:	lsl	r1, r1, #2
   1ef58:	ldr	r3, [r3, #8]
   1ef5c:	ldr	r0, [sp, #32]
   1ef60:	blx	r3
   1ef64:	ldr	r1, [sp, #12]
   1ef68:	cmp	r1, #0
   1ef6c:	beq	1ef88 <__assert_fail@plt+0xde5c>
   1ef70:	movw	r3, #49436	; 0xc11c
   1ef74:	movt	r3, #3
   1ef78:	lsl	r1, r1, #2
   1ef7c:	ldr	r3, [r3, #8]
   1ef80:	ldr	r0, [sp, #20]
   1ef84:	blx	r3
   1ef88:	add	sp, sp, #52	; 0x34
   1ef8c:	ldrd	r4, [sp]
   1ef90:	ldrd	r6, [sp, #8]
   1ef94:	ldrd	r8, [sp, #16]
   1ef98:	ldrd	sl, [sp, #24]
   1ef9c:	add	sp, sp, #32
   1efa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1efa4:	cmp	r7, #0
   1efa8:	bne	1f064 <__assert_fail@plt+0xdf38>
   1efac:	cmp	r9, #0
   1efb0:	beq	1efc0 <__assert_fail@plt+0xde94>
   1efb4:	mov	r1, r5
   1efb8:	mov	r0, r9
   1efbc:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1efc0:	cmp	sl, #0
   1efc4:	beq	1ef88 <__assert_fail@plt+0xde5c>
   1efc8:	mov	r3, #0
   1efcc:	str	r3, [sl, #4]
   1efd0:	b	1ef88 <__assert_fail@plt+0xde5c>
   1efd4:	add	r4, sp, #24
   1efd8:	mov	r7, r6
   1efdc:	ldr	fp, [sp, #12]
   1efe0:	mov	r3, r4
   1efe4:	mov	r2, r5
   1efe8:	mov	r1, #0
   1efec:	add	r0, sp, #12
   1eff0:	str	r7, [sp]
   1eff4:	ldr	lr, [sp, #16]
   1eff8:	ldr	ip, [sp, #28]
   1effc:	ldr	r8, [sp, #20]
   1f000:	str	ip, [sp, #16]
   1f004:	str	lr, [sp, #28]
   1f008:	ldr	lr, [sp, #24]
   1f00c:	ldr	ip, [sp, #32]
   1f010:	str	lr, [sp, #12]
   1f014:	str	fp, [sp, #24]
   1f018:	str	ip, [sp, #20]
   1f01c:	str	r8, [sp, #32]
   1f020:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1f024:	add	r1, sp, #12
   1f028:	mov	r2, r4
   1f02c:	mov	r0, r1
   1f030:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1f034:	mov	r3, #1
   1f038:	add	r2, sp, #20
   1f03c:	str	r7, [sp]
   1f040:	add	r0, sp, #12
   1f044:	ldr	r1, [sp, #16]
   1f048:	bl	1b130 <__assert_fail@plt+0xa004>
   1f04c:	mov	r1, r4
   1f050:	add	r0, sp, #12
   1f054:	bl	1aeb0 <__assert_fail@plt+0x9d84>
   1f058:	cmp	r0, #0
   1f05c:	blt	1efdc <__assert_fail@plt+0xdeb0>
   1f060:	b	1eee0 <__assert_fail@plt+0xddb4>
   1f064:	ldr	r3, [r2, #8]
   1f068:	ldr	r2, [r3]
   1f06c:	clz	r3, r2
   1f070:	lsr	r3, r3, #5
   1f074:	cmp	r2, #1
   1f078:	rsbls	r3, r3, #0
   1f07c:	rsbhi	r3, r3, #1
   1f080:	cmp	r3, #1
   1f084:	beq	1eda8 <__assert_fail@plt+0xdc7c>
   1f088:	b	1efac <__assert_fail@plt+0xde80>
   1f08c:	add	r1, sp, #12
   1f090:	mov	r0, r1
   1f094:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1f098:	ldr	r3, [sp, #16]
   1f09c:	rsb	r3, r3, #0
   1f0a0:	b	1ee08 <__assert_fail@plt+0xdcdc>
   1f0a4:	movw	r0, #44644	; 0xae64
   1f0a8:	movt	r0, #2
   1f0ac:	bl	17c40 <__assert_fail@plt+0x6b14>
   1f0b0:	movw	r0, #44692	; 0xae94
   1f0b4:	movt	r0, #2
   1f0b8:	bl	17c40 <__assert_fail@plt+0x6b14>
   1f0bc:	muleq	r2, r8, r9
   1f0c0:	str	r4, [sp, #-8]!
   1f0c4:	mov	ip, #0
   1f0c8:	mov	r3, r2
   1f0cc:	str	lr, [sp, #4]
   1f0d0:	sub	sp, sp, #16
   1f0d4:	mov	r2, r1
   1f0d8:	ldr	lr, [pc, #80]	; 1f130 <__assert_fail@plt+0xe004>
   1f0dc:	add	r1, sp, #4
   1f0e0:	str	ip, [sp, #4]
   1f0e4:	str	ip, [sp, #8]
   1f0e8:	str	lr, [sp, #12]
   1f0ec:	bl	1ed58 <__assert_fail@plt+0xdc2c>
   1f0f0:	ldmib	sp, {r1, r4}
   1f0f4:	clz	r4, r4
   1f0f8:	cmp	r1, #0
   1f0fc:	lsr	r4, r4, #5
   1f100:	beq	1f11c <__assert_fail@plt+0xdff0>
   1f104:	movw	r3, #49436	; 0xc11c
   1f108:	movt	r3, #3
   1f10c:	lsl	r1, r1, #2
   1f110:	ldr	r3, [r3, #8]
   1f114:	ldr	r0, [sp, #12]
   1f118:	blx	r3
   1f11c:	mov	r0, r4
   1f120:	add	sp, sp, #16
   1f124:	ldr	r4, [sp]
   1f128:	add	sp, sp, #4
   1f12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f130:	muleq	r2, r8, r9
   1f134:	ldr	r3, [r0, #4]
   1f138:	cmp	r3, #0
   1f13c:	bgt	1f14c <__assert_fail@plt+0xe020>
   1f140:	moveq	r0, #1
   1f144:	movne	r0, #0
   1f148:	bx	lr
   1f14c:	mov	r1, r0
   1f150:	mov	r2, #2
   1f154:	mov	r0, #0
   1f158:	b	1f0c0 <__assert_fail@plt+0xdf94>
   1f15c:	cmp	r1, #0
   1f160:	push	{lr}		; (str lr, [sp, #-4]!)
   1f164:	sub	sp, sp, #20
   1f168:	ble	1f1a8 <__assert_fail@plt+0xe07c>
   1f16c:	sub	r2, r1, #-1073741823	; 0xc0000001
   1f170:	mov	r3, r0
   1f174:	ldr	r2, [r0, r2, lsl #2]
   1f178:	cmp	r2, #0
   1f17c:	beq	1f1c4 <__assert_fail@plt+0xe098>
   1f180:	mov	ip, #0
   1f184:	mov	r2, #2
   1f188:	mov	r0, ip
   1f18c:	str	ip, [sp, #4]
   1f190:	str	r1, [sp, #8]
   1f194:	add	r1, sp, #4
   1f198:	str	r3, [sp, #12]
   1f19c:	bl	1f0c0 <__assert_fail@plt+0xdf94>
   1f1a0:	add	sp, sp, #20
   1f1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1a8:	movw	r1, #43800	; 0xab18
   1f1ac:	movt	r1, #2
   1f1b0:	ldr	r3, [pc, #40]	; 1f1e0 <__assert_fail@plt+0xe0b4>
   1f1b4:	movw	r0, #43964	; 0xabbc
   1f1b8:	movt	r0, #2
   1f1bc:	movw	r2, #3302	; 0xce6
   1f1c0:	bl	1112c <__assert_fail@plt>
   1f1c4:	movw	r1, #43800	; 0xab18
   1f1c8:	movt	r1, #2
   1f1cc:	ldr	r3, [pc, #12]	; 1f1e0 <__assert_fail@plt+0xe0b4>
   1f1d0:	movw	r0, #44720	; 0xaeb0
   1f1d4:	movt	r0, #2
   1f1d8:	movw	r2, #3303	; 0xce7
   1f1dc:	bl	1112c <__assert_fail@plt>
   1f1e0:	andeq	sl, r2, r4, asr sl
   1f1e4:	mov	r3, #2
   1f1e8:	b	1ed58 <__assert_fail@plt+0xdc2c>
   1f1ec:	mov	r2, r1
   1f1f0:	mov	r3, #2
   1f1f4:	mov	r1, #0
   1f1f8:	b	1ed58 <__assert_fail@plt+0xdc2c>
   1f1fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f200:	strd	r6, [sp, #8]
   1f204:	subs	r6, r3, #0
   1f208:	str	lr, [sp, #16]
   1f20c:	sub	sp, sp, #44	; 0x2c
   1f210:	ble	1f36c <__assert_fail@plt+0xe240>
   1f214:	sub	r3, r6, #-1073741823	; 0xc0000001
   1f218:	mov	lr, r2
   1f21c:	ldr	r3, [r2, r3, lsl #2]
   1f220:	cmp	r3, #0
   1f224:	beq	1f350 <__assert_fail@plt+0xe224>
   1f228:	ldr	r7, [pc, #344]	; 1f388 <__assert_fail@plt+0xe25c>
   1f22c:	mov	ip, #0
   1f230:	mov	r4, r0
   1f234:	mov	r5, r1
   1f238:	add	r0, sp, #4
   1f23c:	mov	r3, #2
   1f240:	add	r2, sp, #28
   1f244:	str	ip, [sp, #4]
   1f248:	add	r1, sp, #16
   1f24c:	str	ip, [sp, #8]
   1f250:	str	r7, [sp, #12]
   1f254:	str	ip, [sp, #16]
   1f258:	str	ip, [sp, #20]
   1f25c:	str	r7, [sp, #24]
   1f260:	str	ip, [sp, #28]
   1f264:	str	r6, [sp, #32]
   1f268:	add	r6, r6, #1
   1f26c:	str	lr, [sp, #36]	; 0x24
   1f270:	bl	1ed58 <__assert_fail@plt+0xdc2c>
   1f274:	ldr	r0, [sp, #8]
   1f278:	cmp	r0, r6, asr #1
   1f27c:	bne	1f334 <__assert_fail@plt+0xe208>
   1f280:	ldr	r1, [sp, #12]
   1f284:	lsl	r0, r0, #2
   1f288:	add	r3, r4, r0
   1f28c:	add	r0, r1, r0
   1f290:	ldr	r2, [r0, #-4]!
   1f294:	cmp	r0, r1
   1f298:	str	r2, [r3, #-4]!
   1f29c:	bne	1f290 <__assert_fail@plt+0xe164>
   1f2a0:	ldr	r1, [sp, #4]
   1f2a4:	cmp	r1, #0
   1f2a8:	bne	1f31c <__assert_fail@plt+0xe1f0>
   1f2ac:	cmp	r5, #0
   1f2b0:	ldr	r4, [sp, #20]
   1f2b4:	beq	1f2e0 <__assert_fail@plt+0xe1b4>
   1f2b8:	cmp	r4, #0
   1f2bc:	ldr	r0, [sp, #24]
   1f2c0:	ble	1f2e0 <__assert_fail@plt+0xe1b4>
   1f2c4:	lsl	r3, r4, #2
   1f2c8:	add	r1, r5, r3
   1f2cc:	add	r3, r0, r3
   1f2d0:	ldr	r2, [r3, #-4]!
   1f2d4:	cmp	r3, r0
   1f2d8:	str	r2, [r1, #-4]!
   1f2dc:	bne	1f2d0 <__assert_fail@plt+0xe1a4>
   1f2e0:	ldr	r1, [sp, #16]
   1f2e4:	cmp	r1, #0
   1f2e8:	beq	1f304 <__assert_fail@plt+0xe1d8>
   1f2ec:	movw	r3, #49436	; 0xc11c
   1f2f0:	movt	r3, #3
   1f2f4:	lsl	r1, r1, #2
   1f2f8:	ldr	r3, [r3, #8]
   1f2fc:	ldr	r0, [sp, #24]
   1f300:	blx	r3
   1f304:	mov	r0, r4
   1f308:	add	sp, sp, #44	; 0x2c
   1f30c:	ldrd	r4, [sp]
   1f310:	ldrd	r6, [sp, #8]
   1f314:	add	sp, sp, #16
   1f318:	pop	{pc}		; (ldr pc, [sp], #4)
   1f31c:	movw	r3, #49436	; 0xc11c
   1f320:	movt	r3, #3
   1f324:	lsl	r1, r1, #2
   1f328:	ldr	r3, [r3, #8]
   1f32c:	blx	r3
   1f330:	b	1f2ac <__assert_fail@plt+0xe180>
   1f334:	movw	r1, #43800	; 0xab18
   1f338:	movt	r1, #2
   1f33c:	movw	r0, #44736	; 0xaec0
   1f340:	movt	r0, #2
   1f344:	add	r3, r7, #212	; 0xd4
   1f348:	movw	r2, #3320	; 0xcf8
   1f34c:	bl	1112c <__assert_fail@plt>
   1f350:	movw	r1, #43800	; 0xab18
   1f354:	movt	r1, #2
   1f358:	ldr	r3, [pc, #44]	; 1f38c <__assert_fail@plt+0xe260>
   1f35c:	movw	r0, #44720	; 0xaeb0
   1f360:	movt	r0, #2
   1f364:	movw	r2, #3314	; 0xcf2
   1f368:	bl	1112c <__assert_fail@plt>
   1f36c:	movw	r1, #43800	; 0xab18
   1f370:	movt	r1, #2
   1f374:	ldr	r3, [pc, #16]	; 1f38c <__assert_fail@plt+0xe260>
   1f378:	movw	r0, #43964	; 0xabbc
   1f37c:	movt	r0, #2
   1f380:	movw	r2, #3313	; 0xcf1
   1f384:	bl	1112c <__assert_fail@plt>
   1f388:	muleq	r2, r8, r9
   1f38c:	andeq	sl, r2, ip, ror #20
   1f390:	ldr	r3, [r0, #4]
   1f394:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f398:	ldr	r2, [r0, #8]
   1f39c:	ldr	r2, [r2]
   1f3a0:	strd	r6, [sp, #8]
   1f3a4:	str	lr, [sp, #32]
   1f3a8:	eor	lr, r3, r3, asr #31
   1f3ac:	strd	r8, [sp, #16]
   1f3b0:	sub	lr, lr, r3, asr #31
   1f3b4:	strd	sl, [sp, #24]
   1f3b8:	sub	sp, sp, #92	; 0x5c
   1f3bc:	cmp	r3, #0
   1f3c0:	moveq	ip, #0
   1f3c4:	andne	ip, r2, #1
   1f3c8:	cmp	ip, #0
   1f3cc:	beq	1f598 <__assert_fail@plt+0xe46c>
   1f3d0:	cmp	lr, #1
   1f3d4:	beq	1f560 <__assert_fail@plt+0xe434>
   1f3d8:	mov	r5, r0
   1f3dc:	movw	r2, #55191	; 0xd797
   1f3e0:	movt	r2, #49359	; 0xc0cf
   1f3e4:	mov	r0, #0
   1f3e8:	str	r1, [sp, #8]
   1f3ec:	mov	r1, r5
   1f3f0:	bl	1c944 <__assert_fail@plt+0xb818>
   1f3f4:	cmp	r0, #1
   1f3f8:	beq	1f420 <__assert_fail@plt+0xe2f4>
   1f3fc:	mov	r6, #0
   1f400:	mov	r0, r6
   1f404:	add	sp, sp, #92	; 0x5c
   1f408:	ldrd	r4, [sp]
   1f40c:	ldrd	r6, [sp, #8]
   1f410:	ldrd	r8, [sp, #16]
   1f414:	ldrd	sl, [sp, #24]
   1f418:	add	sp, sp, #32
   1f41c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f420:	ldr	r3, [r5, #4]
   1f424:	eor	r2, r3, r3, asr #31
   1f428:	sub	r2, r2, r3, asr #31
   1f42c:	cmp	r2, #1
   1f430:	ble	1f5d0 <__assert_fail@plt+0xe4a4>
   1f434:	ldr	r8, [pc, #1896]	; 1fba4 <__assert_fail@plt+0xea78>
   1f438:	mov	r4, #0
   1f43c:	add	r0, sp, #16
   1f440:	mov	r1, r5
   1f444:	mov	r9, #2
   1f448:	str	r4, [sp, #16]
   1f44c:	str	r4, [sp, #20]
   1f450:	str	r8, [sp, #24]
   1f454:	str	r4, [sp, #28]
   1f458:	str	r4, [sp, #32]
   1f45c:	str	r8, [sp, #36]	; 0x24
   1f460:	bl	1a5fc <__assert_fail@plt+0x94d0>
   1f464:	ldr	r6, [sp, #20]
   1f468:	mov	r3, r4
   1f46c:	mov	r1, r4
   1f470:	ldr	ip, [sp, #24]
   1f474:	cmp	r6, #0
   1f478:	rsblt	r6, r6, #0
   1f47c:	ldr	r0, [ip]
   1f480:	mov	r2, ip
   1f484:	str	r6, [sp, #20]
   1f488:	sub	r0, r0, #1
   1f48c:	str	r0, [ip]
   1f490:	str	r4, [sp]
   1f494:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   1f498:	mov	r3, r0
   1f49c:	add	r2, sp, #24
   1f4a0:	str	r9, [sp]
   1f4a4:	mov	r7, r0
   1f4a8:	mov	r1, r6
   1f4ac:	add	r0, sp, #28
   1f4b0:	bl	1b130 <__assert_fail@plt+0xa004>
   1f4b4:	mov	r1, r9
   1f4b8:	add	r0, sp, #40	; 0x28
   1f4bc:	str	r4, [sp, #40]	; 0x28
   1f4c0:	str	r4, [sp, #44]	; 0x2c
   1f4c4:	str	r8, [sp, #48]	; 0x30
   1f4c8:	bl	18318 <__assert_fail@plt+0x71ec>
   1f4cc:	add	r3, sp, #28
   1f4d0:	add	r2, sp, #40	; 0x28
   1f4d4:	str	r7, [sp]
   1f4d8:	add	r1, sp, #16
   1f4dc:	mov	r0, r5
   1f4e0:	bl	1dd3c <__assert_fail@plt+0xcc10>
   1f4e4:	cmp	r0, r4
   1f4e8:	bne	1f608 <__assert_fail@plt+0xe4dc>
   1f4ec:	mov	r6, #0
   1f4f0:	ldr	r1, [sp, #16]
   1f4f4:	cmp	r1, #0
   1f4f8:	beq	1f514 <__assert_fail@plt+0xe3e8>
   1f4fc:	movw	r3, #49436	; 0xc11c
   1f500:	movt	r3, #3
   1f504:	lsl	r1, r1, #2
   1f508:	ldr	r3, [r3, #8]
   1f50c:	ldr	r0, [sp, #24]
   1f510:	blx	r3
   1f514:	ldr	r1, [sp, #28]
   1f518:	cmp	r1, #0
   1f51c:	beq	1f538 <__assert_fail@plt+0xe40c>
   1f520:	movw	r3, #49436	; 0xc11c
   1f524:	movt	r3, #3
   1f528:	lsl	r1, r1, #2
   1f52c:	ldr	r3, [r3, #8]
   1f530:	ldr	r0, [sp, #36]	; 0x24
   1f534:	blx	r3
   1f538:	ldr	r1, [sp, #40]	; 0x28
   1f53c:	cmp	r1, #0
   1f540:	beq	1f400 <__assert_fail@plt+0xe2d4>
   1f544:	movw	r3, #49436	; 0xc11c
   1f548:	movt	r3, #3
   1f54c:	lsl	r1, r1, #2
   1f550:	ldr	r3, [r3, #8]
   1f554:	ldr	r0, [sp, #48]	; 0x30
   1f558:	blx	r3
   1f55c:	b	1f400 <__assert_fail@plt+0xe2d4>
   1f560:	cmp	r2, #63	; 0x3f
   1f564:	movhi	r3, #0
   1f568:	movls	r3, #1
   1f56c:	cmp	r2, #64	; 0x40
   1f570:	rsbls	r3, r3, #0
   1f574:	rsbhi	r3, r3, #1
   1f578:	cmn	r3, #1
   1f57c:	bne	1f3d8 <__assert_fail@plt+0xe2ac>
   1f580:	lsr	r2, r2, #1
   1f584:	movw	r6, #38620	; 0x96dc
   1f588:	movt	r6, #51561	; 0xc969
   1f58c:	lsr	r2, r6, r2
   1f590:	and	r6, r2, #2
   1f594:	b	1f400 <__assert_fail@plt+0xe2d4>
   1f598:	cmp	lr, #1
   1f59c:	bgt	1f3fc <__assert_fail@plt+0xe2d0>
   1f5a0:	cmp	r3, #0
   1f5a4:	beq	1f3fc <__assert_fail@plt+0xe2d0>
   1f5a8:	cmp	r2, #2
   1f5ac:	movls	r3, #0
   1f5b0:	movhi	r3, #1
   1f5b4:	cmp	r2, #1
   1f5b8:	movhi	r2, #0
   1f5bc:	movls	r2, #1
   1f5c0:	cmp	r3, r2
   1f5c4:	bne	1f3fc <__assert_fail@plt+0xe2d0>
   1f5c8:	mov	r6, #2
   1f5cc:	b	1f400 <__assert_fail@plt+0xe2d4>
   1f5d0:	cmp	r3, #0
   1f5d4:	beq	1f5c8 <__assert_fail@plt+0xe49c>
   1f5d8:	ldr	r3, [r5, #8]
   1f5dc:	movw	r1, #961	; 0x3c1
   1f5e0:	ldr	r2, [r3]
   1f5e4:	cmp	r2, #960	; 0x3c0
   1f5e8:	movhi	r3, #0
   1f5ec:	movls	r3, #1
   1f5f0:	cmp	r2, r1
   1f5f4:	rsbls	r3, r3, #0
   1f5f8:	rsbhi	r3, r3, #1
   1f5fc:	cmn	r3, #1
   1f600:	bne	1f434 <__assert_fail@plt+0xe308>
   1f604:	b	1f5c8 <__assert_fail@plt+0xe49c>
   1f608:	ldr	fp, [r5, #4]
   1f60c:	ldr	r3, [r5, #8]
   1f610:	ldr	sl, [r3]
   1f614:	str	r4, [sp, #64]	; 0x40
   1f618:	str	r3, [sp, #72]	; 0x48
   1f61c:	eor	r3, fp, fp, asr #31
   1f620:	sub	r3, r3, fp, asr #31
   1f624:	cmp	fp, r4
   1f628:	moveq	fp, #0
   1f62c:	andne	fp, sl, #1
   1f630:	cmp	fp, r4
   1f634:	str	r3, [sp, #68]	; 0x44
   1f638:	beq	1fb88 <__assert_fail@plt+0xea5c>
   1f63c:	mov	r2, r9
   1f640:	add	r1, sp, #64	; 0x40
   1f644:	add	r0, sp, #40	; 0x28
   1f648:	bl	1f0c0 <__assert_fail@plt+0xdf94>
   1f64c:	subs	r4, r0, #0
   1f650:	bne	1f4ec <__assert_fail@plt+0xe3c0>
   1f654:	ldr	r3, [sp, #44]	; 0x2c
   1f658:	cmp	r3, #1
   1f65c:	mvnne	r9, #0
   1f660:	beq	1f998 <__assert_fail@plt+0xe86c>
   1f664:	mov	r6, #3
   1f668:	mov	sl, #2
   1f66c:	mov	r1, #0
   1f670:	add	r6, r6, #2
   1f674:	str	sl, [sp]
   1f678:	mov	r3, r6
   1f67c:	mov	r0, r1
   1f680:	add	r2, sp, #64	; 0x40
   1f684:	bl	1b8e4 <__assert_fail@plt+0xa7b8>
   1f688:	cmp	r0, #0
   1f68c:	beq	1f4ec <__assert_fail@plt+0xe3c0>
   1f690:	rsb	r3, r0, #0
   1f694:	lsr	r2, r6, #1
   1f698:	and	r3, r3, r0
   1f69c:	ands	lr, r3, #-16777216	; 0xff000000
   1f6a0:	bne	1f990 <__assert_fail@plt+0xe864>
   1f6a4:	lsl	r3, r3, #8
   1f6a8:	add	lr, lr, #8
   1f6ac:	tst	r3, #-16777216	; 0xff000000
   1f6b0:	beq	1f6a4 <__assert_fail@plt+0xe578>
   1f6b4:	cmp	r3, #0
   1f6b8:	blt	1f6c8 <__assert_fail@plt+0xe59c>
   1f6bc:	lsls	r3, r3, #1
   1f6c0:	add	lr, lr, #1
   1f6c4:	bpl	1f6bc <__assert_fail@plt+0xe590>
   1f6c8:	lsr	r0, r0, #1
   1f6cc:	rsb	lr, lr, #31
   1f6d0:	mov	r1, #0
   1f6d4:	lsr	ip, r2, #1
   1f6d8:	lsr	r3, r0, lr
   1f6dc:	eor	r0, ip, r2
   1f6e0:	and	lr, lr, r0
   1f6e4:	cmp	r3, r2
   1f6e8:	eor	r1, r1, lr
   1f6ec:	bcs	1f748 <__assert_fail@plt+0xe61c>
   1f6f0:	cmp	r3, #0
   1f6f4:	beq	1f774 <__assert_fail@plt+0xe648>
   1f6f8:	and	ip, r3, r2
   1f6fc:	sub	r0, r2, r3
   1f700:	eor	r1, r1, ip
   1f704:	lsr	ip, r3, #1
   1f708:	mov	r2, r3
   1f70c:	rsb	r3, r0, #0
   1f710:	and	r3, r3, r0
   1f714:	ands	lr, r3, #-16777216	; 0xff000000
   1f718:	bne	1f76c <__assert_fail@plt+0xe640>
   1f71c:	lsl	r3, r3, #8
   1f720:	add	lr, lr, #8
   1f724:	tst	r3, #-16777216	; 0xff000000
   1f728:	beq	1f71c <__assert_fail@plt+0xe5f0>
   1f72c:	cmp	r3, #0
   1f730:	blt	1f740 <__assert_fail@plt+0xe614>
   1f734:	lsls	r3, r3, #1
   1f738:	add	lr, lr, #1
   1f73c:	bpl	1f734 <__assert_fail@plt+0xe608>
   1f740:	rsb	lr, lr, #32
   1f744:	b	1f6d8 <__assert_fail@plt+0xe5ac>
   1f748:	subs	r0, r3, r2
   1f74c:	bne	1f70c <__assert_fail@plt+0xe5e0>
   1f750:	movw	r1, #43800	; 0xab18
   1f754:	movt	r1, #2
   1f758:	ldr	r3, [pc, #1096]	; 1fba8 <__assert_fail@plt+0xea7c>
   1f75c:	movw	r0, #44776	; 0xaee8
   1f760:	movt	r0, #2
   1f764:	movw	r2, #3410	; 0xd52
   1f768:	bl	1112c <__assert_fail@plt>
   1f76c:	mov	lr, #0
   1f770:	b	1f72c <__assert_fail@plt+0xe600>
   1f774:	tst	r1, #1
   1f778:	beq	1f984 <__assert_fail@plt+0xe858>
   1f77c:	ldr	fp, [sp, #68]	; 0x44
   1f780:	mvn	r0, #0
   1f784:	mov	r1, r3
   1f788:	ldr	r2, [sp, #72]	; 0x48
   1f78c:	ldr	sl, [r2]
   1f790:	str	r0, [sp]
   1f794:	str	r3, [sp, #52]	; 0x34
   1f798:	str	r3, [sp, #56]	; 0x38
   1f79c:	mov	r3, fp
   1f7a0:	str	r8, [sp, #60]	; 0x3c
   1f7a4:	mvn	r0, sl
   1f7a8:	bl	17ea8 <__assert_fail@plt+0x6d7c>
   1f7ac:	tst	r6, #2
   1f7b0:	lsr	r6, r6, #2
   1f7b4:	mov	r9, r0
   1f7b8:	addne	r6, r6, #1
   1f7bc:	rsbeq	r6, r6, #0
   1f7c0:	cmp	r9, #0
   1f7c4:	beq	1fb64 <__assert_fail@plt+0xea38>
   1f7c8:	cmp	fp, #0
   1f7cc:	blt	1fb08 <__assert_fail@plt+0xe9dc>
   1f7d0:	cmp	fp, #1
   1f7d4:	ble	1fb00 <__assert_fail@plt+0xe9d4>
   1f7d8:	cmp	fp, #0
   1f7dc:	moveq	fp, #0
   1f7e0:	andne	fp, sl, #1
   1f7e4:	cmp	fp, #0
   1f7e8:	beq	1fb48 <__assert_fail@plt+0xea1c>
   1f7ec:	mov	r3, #0
   1f7f0:	add	r0, sp, #76	; 0x4c
   1f7f4:	mov	r1, #1
   1f7f8:	str	r3, [sp, #76]	; 0x4c
   1f7fc:	str	r3, [sp, #80]	; 0x50
   1f800:	str	r8, [sp, #84]	; 0x54
   1f804:	bl	18318 <__assert_fail@plt+0x71ec>
   1f808:	add	r0, sp, #52	; 0x34
   1f80c:	mov	r1, #1
   1f810:	bl	18318 <__assert_fail@plt+0x71ec>
   1f814:	mov	r1, r6
   1f818:	add	r0, sp, #40	; 0x28
   1f81c:	bl	1a58c <__assert_fail@plt+0x9460>
   1f820:	mov	r1, #2
   1f824:	add	r0, sp, #64	; 0x40
   1f828:	bl	1eb38 <__assert_fail@plt+0xda0c>
   1f82c:	sub	r8, r0, #2
   1f830:	cmp	r8, r9
   1f834:	bcc	1fa58 <__assert_fail@plt+0xe92c>
   1f838:	lsl	r3, r6, #1
   1f83c:	mov	sl, #2
   1f840:	str	r4, [sp, #12]
   1f844:	rsb	r3, r3, #0
   1f848:	mov	r4, r3
   1f84c:	b	1f8c0 <__assert_fail@plt+0xe794>
   1f850:	mov	r3, #1
   1f854:	add	r2, sp, #84	; 0x54
   1f858:	str	sl, [sp]
   1f85c:	add	r0, sp, #76	; 0x4c
   1f860:	bl	1b130 <__assert_fail@plt+0xa004>
   1f864:	add	r1, sp, #52	; 0x34
   1f868:	mov	r2, r4
   1f86c:	mov	r0, r1
   1f870:	bl	1bbd4 <__assert_fail@plt+0xaaa8>
   1f874:	add	r2, sp, #52	; 0x34
   1f878:	add	r1, sp, #76	; 0x4c
   1f87c:	mov	r0, r2
   1f880:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1f884:	add	r2, sp, #52	; 0x34
   1f888:	add	r3, sp, #64	; 0x40
   1f88c:	str	sl, [sp]
   1f890:	mov	r1, r2
   1f894:	mov	r0, #0
   1f898:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1f89c:	add	r2, sp, #76	; 0x4c
   1f8a0:	add	r3, sp, #64	; 0x40
   1f8a4:	str	sl, [sp]
   1f8a8:	mov	r1, r2
   1f8ac:	mov	r0, #0
   1f8b0:	bl	1b3f0 <__assert_fail@plt+0xa2c4>
   1f8b4:	cmp	r9, r8
   1f8b8:	sub	r8, r8, #1
   1f8bc:	beq	1fa54 <__assert_fail@plt+0xe928>
   1f8c0:	add	r1, sp, #76	; 0x4c
   1f8c4:	add	r2, sp, #52	; 0x34
   1f8c8:	mov	r0, r1
   1f8cc:	bl	1ba00 <__assert_fail@plt+0xa8d4>
   1f8d0:	add	r2, sp, #64	; 0x40
   1f8d4:	add	r1, sp, #40	; 0x28
   1f8d8:	add	r0, sp, #52	; 0x34
   1f8dc:	bl	1be74 <__assert_fail@plt+0xad48>
   1f8e0:	cmp	r9, r8
   1f8e4:	beq	1f8fc <__assert_fail@plt+0xe7d0>
   1f8e8:	mov	r1, r8
   1f8ec:	add	r0, sp, #64	; 0x40
   1f8f0:	bl	1cea4 <__assert_fail@plt+0xbd78>
   1f8f4:	cmp	r0, #0
   1f8f8:	beq	1f89c <__assert_fail@plt+0xe770>
   1f8fc:	add	r1, sp, #40	; 0x28
   1f900:	mov	r2, r6
   1f904:	mov	r0, r1
   1f908:	bl	1bbd4 <__assert_fail@plt+0xaaa8>
   1f90c:	ldr	lr, [sp, #52]	; 0x34
   1f910:	add	r1, sp, #76	; 0x4c
   1f914:	add	r2, sp, #52	; 0x34
   1f918:	mov	r0, r1
   1f91c:	ldr	ip, [sp, #56]	; 0x38
   1f920:	ldr	r3, [sp, #80]	; 0x50
   1f924:	str	r3, [sp, #56]	; 0x38
   1f928:	str	ip, [sp, #80]	; 0x50
   1f92c:	ldr	ip, [sp, #76]	; 0x4c
   1f930:	ldr	r3, [sp, #84]	; 0x54
   1f934:	str	lr, [sp, #76]	; 0x4c
   1f938:	ldr	lr, [sp, #60]	; 0x3c
   1f93c:	str	ip, [sp, #52]	; 0x34
   1f940:	str	r3, [sp, #60]	; 0x3c
   1f944:	str	lr, [sp, #84]	; 0x54
   1f948:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1f94c:	ldr	r1, [sp, #80]	; 0x50
   1f950:	ldr	r3, [sp, #84]	; 0x54
   1f954:	ldr	r3, [r3]
   1f958:	cmp	r1, #0
   1f95c:	moveq	r3, #0
   1f960:	andne	r3, r3, #1
   1f964:	cmp	r3, #0
   1f968:	beq	1f850 <__assert_fail@plt+0xe724>
   1f96c:	add	r1, sp, #76	; 0x4c
   1f970:	add	r2, sp, #64	; 0x40
   1f974:	mov	r0, r1
   1f978:	bl	1afb8 <__assert_fail@plt+0x9e8c>
   1f97c:	ldr	r1, [sp, #80]	; 0x50
   1f980:	b	1f850 <__assert_fail@plt+0xe724>
   1f984:	cmp	r6, r9
   1f988:	bcc	1f66c <__assert_fail@plt+0xe540>
   1f98c:	b	1f9ac <__assert_fail@plt+0xe880>
   1f990:	mov	lr, #0
   1f994:	b	1f6b4 <__assert_fail@plt+0xe588>
   1f998:	ldr	r3, [sp, #48]	; 0x30
   1f99c:	ldr	r9, [r3]
   1f9a0:	sub	r9, r9, #1
   1f9a4:	cmp	r9, #3
   1f9a8:	bhi	1f664 <__assert_fail@plt+0xe538>
   1f9ac:	ldr	r3, [sp, #8]
   1f9b0:	cmp	r3, #24
   1f9b4:	sub	r8, r3, #24
   1f9b8:	movle	r6, #0
   1f9bc:	movgt	r6, #1
   1f9c0:	cmp	r6, #0
   1f9c4:	bne	1fa00 <__assert_fail@plt+0xe8d4>
   1f9c8:	b	1fb80 <__assert_fail@plt+0xea54>
   1f9cc:	add	r3, sp, #28
   1f9d0:	add	r2, sp, #40	; 0x28
   1f9d4:	str	r7, [sp]
   1f9d8:	add	r1, sp, #16
   1f9dc:	mov	r0, r5
   1f9e0:	bl	1dd3c <__assert_fail@plt+0xcc10>
   1f9e4:	cmp	r9, r8
   1f9e8:	movge	r3, #0
   1f9ec:	andlt	r3, r0, #1
   1f9f0:	mov	r4, r9
   1f9f4:	cmp	r3, #0
   1f9f8:	mov	r6, r0
   1f9fc:	beq	1f4f0 <__assert_fail@plt+0xe3c4>
   1fa00:	add	r9, r4, #1
   1fa04:	mul	r1, r4, r9
   1fa08:	adds	r1, r1, #41	; 0x29
   1fa0c:	streq	r1, [sp, #44]	; 0x2c
   1fa10:	beq	1fa1c <__assert_fail@plt+0xe8f0>
   1fa14:	add	r0, sp, #40	; 0x28
   1fa18:	bl	18318 <__assert_fail@plt+0x71ec>
   1fa1c:	add	r1, sp, #16
   1fa20:	add	r0, sp, #40	; 0x28
   1fa24:	bl	1adc8 <__assert_fail@plt+0x9c9c>
   1fa28:	cmp	r0, #0
   1fa2c:	blt	1f9cc <__assert_fail@plt+0xe8a0>
   1fa30:	cmp	r4, #29
   1fa34:	bgt	1f4f0 <__assert_fail@plt+0xe3c4>
   1fa38:	movw	r1, #43800	; 0xab18
   1fa3c:	movt	r1, #2
   1fa40:	ldr	r3, [pc, #356]	; 1fbac <__assert_fail@plt+0xea80>
   1fa44:	movw	r0, #44816	; 0xaf10
   1fa48:	movt	r0, #2
   1fa4c:	movw	r2, #3629	; 0xe2d
   1fa50:	bl	1112c <__assert_fail@plt>
   1fa54:	ldr	r4, [sp, #12]
   1fa58:	ldr	r1, [sp, #76]	; 0x4c
   1fa5c:	ldr	r8, [sp, #80]	; 0x50
   1fa60:	cmp	r1, #0
   1fa64:	beq	1fa80 <__assert_fail@plt+0xe954>
   1fa68:	movw	r3, #49436	; 0xc11c
   1fa6c:	movt	r3, #3
   1fa70:	lsl	r1, r1, #2
   1fa74:	ldr	r3, [r3, #8]
   1fa78:	ldr	r0, [sp, #84]	; 0x54
   1fa7c:	blx	r3
   1fa80:	ldr	r3, [sp, #8]
   1fa84:	cmp	r3, #24
   1fa88:	movle	r6, #0
   1fa8c:	movgt	r6, #1
   1fa90:	cmp	r8, #0
   1fa94:	sub	r8, r3, #24
   1fa98:	beq	1fad8 <__assert_fail@plt+0xe9ac>
   1fa9c:	ldr	r3, [sp, #56]	; 0x38
   1faa0:	cmp	r3, #0
   1faa4:	bne	1fac8 <__assert_fail@plt+0xe99c>
   1faa8:	b	1fad8 <__assert_fail@plt+0xe9ac>
   1faac:	add	r2, sp, #64	; 0x40
   1fab0:	add	r1, sp, #40	; 0x28
   1fab4:	add	r0, sp, #52	; 0x34
   1fab8:	bl	1be74 <__assert_fail@plt+0xad48>
   1fabc:	ldr	r3, [sp, #56]	; 0x38
   1fac0:	cmp	r3, #0
   1fac4:	beq	1fad8 <__assert_fail@plt+0xe9ac>
   1fac8:	subs	r9, r9, #1
   1facc:	bne	1faac <__assert_fail@plt+0xe980>
   1fad0:	mov	r6, #0
   1fad4:	mov	fp, r6
   1fad8:	ldr	r1, [sp, #52]	; 0x34
   1fadc:	cmp	r1, #0
   1fae0:	beq	1f9c0 <__assert_fail@plt+0xe894>
   1fae4:	movw	r3, #49436	; 0xc11c
   1fae8:	movt	r3, #3
   1faec:	lsl	r1, r1, #2
   1faf0:	ldr	r3, [r3, #8]
   1faf4:	ldr	r0, [sp, #60]	; 0x3c
   1faf8:	blx	r3
   1fafc:	b	1f9c0 <__assert_fail@plt+0xe894>
   1fb00:	cmp	fp, #0
   1fb04:	bne	1fb24 <__assert_fail@plt+0xe9f8>
   1fb08:	movw	r1, #43800	; 0xab18
   1fb0c:	movt	r1, #2
   1fb10:	ldr	r3, [pc, #152]	; 1fbb0 <__assert_fail@plt+0xea84>
   1fb14:	movw	r0, #44792	; 0xaef8
   1fb18:	movt	r0, #2
   1fb1c:	movw	r2, #3445	; 0xd75
   1fb20:	bl	1112c <__assert_fail@plt>
   1fb24:	cmp	sl, #3
   1fb28:	movhi	r3, #0
   1fb2c:	movls	r3, #1
   1fb30:	cmp	sl, #4
   1fb34:	rsbls	r3, r3, #0
   1fb38:	rsbhi	r3, r3, #1
   1fb3c:	cmp	r3, #1
   1fb40:	beq	1f7d8 <__assert_fail@plt+0xe6ac>
   1fb44:	b	1fb08 <__assert_fail@plt+0xe9dc>
   1fb48:	movw	r1, #43800	; 0xab18
   1fb4c:	movt	r1, #2
   1fb50:	ldr	r3, [pc, #88]	; 1fbb0 <__assert_fail@plt+0xea84>
   1fb54:	movw	r0, #44760	; 0xaed8
   1fb58:	movt	r0, #2
   1fb5c:	movw	r2, #3446	; 0xd76
   1fb60:	bl	1112c <__assert_fail@plt>
   1fb64:	movw	r1, #43800	; 0xab18
   1fb68:	movt	r1, #2
   1fb6c:	ldr	r3, [pc, #60]	; 1fbb0 <__assert_fail@plt+0xea84>
   1fb70:	movw	r0, #44784	; 0xaef0
   1fb74:	movt	r0, #2
   1fb78:	movw	r2, #3442	; 0xd72
   1fb7c:	bl	1112c <__assert_fail@plt>
   1fb80:	mov	r6, fp
   1fb84:	b	1f4f0 <__assert_fail@plt+0xe3c4>
   1fb88:	movw	r1, #43800	; 0xab18
   1fb8c:	movt	r1, #2
   1fb90:	movw	r0, #44760	; 0xaed8
   1fb94:	movt	r0, #2
   1fb98:	add	r3, r8, #224	; 0xe0
   1fb9c:	mov	r2, #3504	; 0xdb0
   1fba0:	bl	1112c <__assert_fail@plt>
   1fba4:	muleq	r2, r8, r9
   1fba8:	andeq	sl, r2, r8, lsl #21
   1fbac:	andeq	sl, r2, ip, lsr #21
   1fbb0:	muleq	r2, ip, sl
   1fbb4:	cmp	r1, #1
   1fbb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fbbc:	strd	r6, [sp, #8]
   1fbc0:	mov	r6, r0
   1fbc4:	strd	r8, [sp, #16]
   1fbc8:	mov	r8, r2
   1fbcc:	strd	sl, [sp, #24]
   1fbd0:	mov	fp, r1
   1fbd4:	str	lr, [sp, #32]
   1fbd8:	sub	sp, sp, #28
   1fbdc:	ble	1fda4 <__assert_fail@plt+0xec78>
   1fbe0:	cmp	r1, #36	; 0x24
   1fbe4:	ble	1fd98 <__assert_fail@plt+0xec6c>
   1fbe8:	cmp	r1, #62	; 0x3e
   1fbec:	bgt	1fe08 <__assert_fail@plt+0xecdc>
   1fbf0:	movw	r5, #44824	; 0xaf18
   1fbf4:	movt	r5, #2
   1fbf8:	mov	r1, fp
   1fbfc:	mov	r0, r8
   1fc00:	bl	1eb38 <__assert_fail@plt+0xda0c>
   1fc04:	cmp	r6, #0
   1fc08:	movne	r7, #0
   1fc0c:	beq	1fdbc <__assert_fail@plt+0xec90>
   1fc10:	ldr	r2, [r8, #4]
   1fc14:	cmp	r2, #0
   1fc18:	moveq	r3, #48	; 0x30
   1fc1c:	moveq	r8, #1
   1fc20:	strbeq	r3, [r6]
   1fc24:	beq	1fd40 <__assert_fail@plt+0xec14>
   1fc28:	movge	sl, r6
   1fc2c:	movge	r4, #0
   1fc30:	bge	1fc44 <__assert_fail@plt+0xeb18>
   1fc34:	mov	r1, #45	; 0x2d
   1fc38:	mov	sl, r6
   1fc3c:	mov	r4, #1
   1fc40:	strb	r1, [sl], #1
   1fc44:	cmp	r2, #0
   1fc48:	mov	r0, fp
   1fc4c:	rsblt	r2, r2, #0
   1fc50:	str	r2, [sp, #8]
   1fc54:	bl	17af8 <__assert_fail@plt+0x69cc>
   1fc58:	subs	r1, r0, #0
   1fc5c:	bne	1fddc <__assert_fail@plt+0xecb0>
   1fc60:	umull	r3, r1, fp, fp
   1fc64:	mov	r2, fp
   1fc68:	adds	r1, r1, #0
   1fc6c:	movne	r1, #1
   1fc70:	cmp	r1, #0
   1fc74:	moveq	r1, #1
   1fc78:	bne	1fc90 <__assert_fail@plt+0xeb64>
   1fc7c:	mul	r2, fp, r2
   1fc80:	add	r1, r1, #1
   1fc84:	umull	r3, r0, fp, r2
   1fc88:	cmp	r0, #0
   1fc8c:	beq	1fc7c <__assert_fail@plt+0xeb50>
   1fc90:	ldr	r3, [sp, #8]
   1fc94:	movw	r9, #49436	; 0xc11c
   1fc98:	movt	r9, #3
   1fc9c:	str	r1, [sp, #16]
   1fca0:	str	r2, [sp, #20]
   1fca4:	ldr	r2, [r9, #4]
   1fca8:	lsl	r3, r3, #2
   1fcac:	mov	r0, r3
   1fcb0:	str	r3, [sp, #12]
   1fcb4:	blx	r2
   1fcb8:	ldr	r2, [r8, #8]
   1fcbc:	mov	lr, r0
   1fcc0:	sub	r1, r0, #4
   1fcc4:	ldr	r3, [sp, #12]
   1fcc8:	add	ip, r3, r2
   1fccc:	ldr	r0, [r2], #4
   1fcd0:	cmp	r2, ip
   1fcd4:	str	r0, [r1, #4]!
   1fcd8:	bne	1fccc <__assert_fail@plt+0xeba0>
   1fcdc:	ldr	r2, [sp, #8]
   1fce0:	mov	r1, fp
   1fce4:	mov	r0, sl
   1fce8:	add	r3, sp, #20
   1fcec:	str	lr, [sp]
   1fcf0:	mov	sl, lr
   1fcf4:	str	r2, [sp, #4]
   1fcf8:	add	r2, sp, #16
   1fcfc:	bl	1a090 <__assert_fail@plt+0x8f64>
   1fd00:	add	r8, r0, r4
   1fd04:	mov	r0, sl
   1fd08:	ldr	r3, [r9, #8]
   1fd0c:	ldr	r1, [sp, #12]
   1fd10:	blx	r3
   1fd14:	cmp	r4, r8
   1fd18:	subcc	r4, r4, #1
   1fd1c:	subcc	r2, r6, #1
   1fd20:	addcc	r4, r6, r4
   1fd24:	addcc	r2, r2, r8
   1fd28:	bcs	1fd40 <__assert_fail@plt+0xec14>
   1fd2c:	ldrb	r3, [r4, #1]!
   1fd30:	ldrb	r3, [r5, r3]
   1fd34:	cmp	r2, r4
   1fd38:	strb	r3, [r4]
   1fd3c:	bne	1fd2c <__assert_fail@plt+0xec00>
   1fd40:	mov	r3, #0
   1fd44:	cmp	r7, r3
   1fd48:	strb	r3, [r6, r8]
   1fd4c:	beq	1fd78 <__assert_fail@plt+0xec4c>
   1fd50:	add	r2, r8, #1
   1fd54:	cmp	r2, r7
   1fd58:	beq	1fd78 <__assert_fail@plt+0xec4c>
   1fd5c:	movw	r3, #49436	; 0xc11c
   1fd60:	movt	r3, #3
   1fd64:	mov	r0, r6
   1fd68:	mov	r1, r7
   1fd6c:	ldr	r3, [r3]
   1fd70:	blx	r3
   1fd74:	mov	r6, r0
   1fd78:	mov	r0, r6
   1fd7c:	add	sp, sp, #28
   1fd80:	ldrd	r4, [sp]
   1fd84:	ldrd	r6, [sp, #8]
   1fd88:	ldrd	r8, [sp, #16]
   1fd8c:	ldrd	sl, [sp, #24]
   1fd90:	add	sp, sp, #32
   1fd94:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd98:	movw	r5, #44888	; 0xaf58
   1fd9c:	movt	r5, #2
   1fda0:	b	1fbf8 <__assert_fail@plt+0xeacc>
   1fda4:	cmn	r1, #1
   1fda8:	blt	1fdf4 <__assert_fail@plt+0xecc8>
   1fdac:	movw	r5, #44824	; 0xaf18
   1fdb0:	movt	r5, #2
   1fdb4:	mov	fp, #10
   1fdb8:	b	1fbf8 <__assert_fail@plt+0xeacc>
   1fdbc:	add	r7, r0, #2
   1fdc0:	movw	r2, #49436	; 0xc11c
   1fdc4:	movt	r2, #3
   1fdc8:	mov	r0, r7
   1fdcc:	ldr	r2, [r2, #4]
   1fdd0:	blx	r2
   1fdd4:	mov	r6, r0
   1fdd8:	b	1fc10 <__assert_fail@plt+0xeae4>
   1fddc:	mov	r0, sl
   1fde0:	ldr	r2, [r8, #8]
   1fde4:	ldr	r3, [sp, #8]
   1fde8:	bl	17fec <__assert_fail@plt+0x6ec0>
   1fdec:	add	r8, r0, r4
   1fdf0:	b	1fd14 <__assert_fail@plt+0xebe8>
   1fdf4:	cmn	r1, #36	; 0x24
   1fdf8:	rsb	r3, r1, #0
   1fdfc:	blt	1fe08 <__assert_fail@plt+0xecdc>
   1fe00:	mov	fp, r3
   1fe04:	b	1fbf0 <__assert_fail@plt+0xeac4>
   1fe08:	mov	r6, #0
   1fe0c:	b	1fd78 <__assert_fail@plt+0xec4c>
   1fe10:	sub	r3, r2, #2
   1fe14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fe18:	cmp	r2, #0
   1fe1c:	cmpne	r3, #60	; 0x3c
   1fe20:	strd	r6, [sp, #8]
   1fe24:	strd	r8, [sp, #16]
   1fe28:	strd	sl, [sp, #24]
   1fe2c:	str	lr, [sp, #32]
   1fe30:	sub	sp, sp, #28
   1fe34:	bhi	20134 <__assert_fail@plt+0xf008>
   1fe38:	mov	r4, r1
   1fe3c:	mov	sl, r2
   1fe40:	mov	r9, r0
   1fe44:	bl	10fe8 <__ctype_b_loc@plt>
   1fe48:	ldr	ip, [r0]
   1fe4c:	mov	fp, r0
   1fe50:	mov	r1, r4
   1fe54:	mov	r0, r1
   1fe58:	ldrb	r5, [r1], #1
   1fe5c:	lsl	r3, r5, #1
   1fe60:	ldrh	r3, [ip, r3]
   1fe64:	tst	r3, #8192	; 0x2000
   1fe68:	bne	1fe54 <__assert_fail@plt+0xed28>
   1fe6c:	sub	r3, r5, #45	; 0x2d
   1fe70:	cmp	sl, #0
   1fe74:	clz	r3, r3
   1fe78:	lsr	r3, r3, #5
   1fe7c:	add	r8, r0, r3
   1fe80:	ldrb	r3, [r0, r3]
   1fe84:	beq	1ff4c <__assert_fail@plt+0xee20>
   1fe88:	cmp	r3, #0
   1fe8c:	beq	1ff24 <__assert_fail@plt+0xedf8>
   1fe90:	mov	r0, r8
   1fe94:	movw	r7, #49436	; 0xc11c
   1fe98:	movt	r7, #3
   1fe9c:	bl	1100c <strlen@plt>
   1fea0:	ldr	r3, [r7, #4]
   1fea4:	str	r0, [sp, #12]
   1fea8:	blx	r3
   1feac:	cmp	sl, #37	; 0x25
   1feb0:	mov	r6, r0
   1feb4:	movlt	r0, #10
   1feb8:	movge	r0, #36	; 0x24
   1febc:	ldrb	r1, [r8]
   1fec0:	cmp	r1, #0
   1fec4:	subne	r0, r0, #97	; 0x61
   1fec8:	movne	r4, #0
   1fecc:	beq	1ff14 <__assert_fail@plt+0xede8>
   1fed0:	ldr	ip, [fp]
   1fed4:	lsl	r3, r1, #1
   1fed8:	ldrh	r3, [ip, r3]
   1fedc:	tst	r3, #8192	; 0x2000
   1fee0:	bne	1ff9c <__assert_fail@plt+0xee70>
   1fee4:	sub	r3, r1, #48	; 0x30
   1fee8:	uxtb	ip, r3
   1feec:	cmp	ip, #9
   1fef0:	movls	r1, r3
   1fef4:	bls	1ff8c <__assert_fail@plt+0xee60>
   1fef8:	sub	r3, r1, #97	; 0x61
   1fefc:	cmp	r3, #25
   1ff00:	addls	r1, r0, r1
   1ff04:	bls	1ff8c <__assert_fail@plt+0xee60>
   1ff08:	sub	r3, r1, #65	; 0x41
   1ff0c:	cmp	r3, #25
   1ff10:	bls	1ff88 <__assert_fail@plt+0xee5c>
   1ff14:	mov	r0, r6
   1ff18:	ldr	r3, [r7, #8]
   1ff1c:	ldr	r1, [sp, #12]
   1ff20:	blx	r3
   1ff24:	mov	r3, #0
   1ff28:	mvn	r0, #0
   1ff2c:	str	r3, [r9, #4]
   1ff30:	add	sp, sp, #28
   1ff34:	ldrd	r4, [sp]
   1ff38:	ldrd	r6, [sp, #8]
   1ff3c:	ldrd	r8, [sp, #16]
   1ff40:	ldrd	sl, [sp, #24]
   1ff44:	add	sp, sp, #32
   1ff48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff4c:	cmp	r3, #48	; 0x30
   1ff50:	movne	sl, #10
   1ff54:	beq	200b4 <__assert_fail@plt+0xef88>
   1ff58:	cmp	r3, #0
   1ff5c:	beq	1ff24 <__assert_fail@plt+0xedf8>
   1ff60:	mov	r0, r8
   1ff64:	movw	r7, #49436	; 0xc11c
   1ff68:	movt	r7, #3
   1ff6c:	bl	1100c <strlen@plt>
   1ff70:	ldr	r3, [r7, #4]
   1ff74:	str	r0, [sp, #12]
   1ff78:	blx	r3
   1ff7c:	mov	r6, r0
   1ff80:	mov	r0, #10
   1ff84:	b	1febc <__assert_fail@plt+0xed90>
   1ff88:	sub	r1, r1, #55	; 0x37
   1ff8c:	cmp	sl, r1
   1ff90:	bls	1ff14 <__assert_fail@plt+0xede8>
   1ff94:	strb	r1, [r6, r4]
   1ff98:	add	r4, r4, #1
   1ff9c:	ldrb	r1, [r8, #1]!
   1ffa0:	cmp	r1, #0
   1ffa4:	bne	1fed0 <__assert_fail@plt+0xeda4>
   1ffa8:	cmp	r4, #0
   1ffac:	beq	1ff14 <__assert_fail@plt+0xede8>
   1ffb0:	mov	r0, sl
   1ffb4:	bl	17af8 <__assert_fail@plt+0x69cc>
   1ffb8:	subs	fp, r0, #0
   1ffbc:	ldr	ip, [r9]
   1ffc0:	bne	20084 <__assert_fail@plt+0xef58>
   1ffc4:	umull	r3, r1, sl, sl
   1ffc8:	sub	lr, r4, #1
   1ffcc:	adds	r1, r1, #0
   1ffd0:	movne	r1, #1
   1ffd4:	cmp	r1, #0
   1ffd8:	movne	r8, r4
   1ffdc:	movne	r3, sl
   1ffe0:	bne	20008 <__assert_fail@plt+0xeedc>
   1ffe4:	mov	r3, sl
   1ffe8:	mov	r1, #1
   1ffec:	mul	r3, sl, r3
   1fff0:	add	r1, r1, #1
   1fff4:	umull	r2, r0, sl, r3
   1fff8:	cmp	r0, #0
   1fffc:	beq	1ffec <__assert_fail@plt+0xeec0>
   20000:	add	r8, r1, lr
   20004:	udiv	r8, r8, r1
   20008:	cmp	r8, ip
   2000c:	str	r1, [sp, #16]
   20010:	str	r3, [sp, #20]
   20014:	bgt	200e4 <__assert_fail@plt+0xefb8>
   20018:	ldr	fp, [r9, #8]
   2001c:	add	r1, sp, #16
   20020:	add	ip, sp, #20
   20024:	mov	r3, sl
   20028:	mov	r2, r4
   2002c:	mov	r0, fp
   20030:	stm	sp, {r1, ip}
   20034:	mov	r1, r6
   20038:	bl	18cd4 <__assert_fail@plt+0x7ba8>
   2003c:	cmp	r0, #0
   20040:	ble	20118 <__assert_fail@plt+0xefec>
   20044:	sub	r3, r0, #-1073741823	; 0xc0000001
   20048:	ldr	r4, [fp, r3, lsl #2]
   2004c:	cmp	r4, #0
   20050:	movne	r4, r0
   20054:	subeq	r4, r0, #1
   20058:	cmp	r4, r8
   2005c:	bgt	20150 <__assert_fail@plt+0xf024>
   20060:	mov	r0, r6
   20064:	ldr	r3, [r7, #8]
   20068:	ldr	r1, [sp, #12]
   2006c:	blx	r3
   20070:	cmp	r5, #45	; 0x2d
   20074:	mov	r0, #0
   20078:	rsbeq	r4, r4, #0
   2007c:	str	r4, [r9, #4]
   20080:	b	1ff30 <__assert_fail@plt+0xee04>
   20084:	mul	r8, r4, fp
   20088:	add	r8, r8, #31
   2008c:	lsr	r8, r8, #5
   20090:	cmp	r8, ip
   20094:	bgt	200d4 <__assert_fail@plt+0xefa8>
   20098:	ldr	r0, [r9, #8]
   2009c:	mov	r2, r4
   200a0:	mov	r3, fp
   200a4:	mov	r1, r6
   200a8:	bl	17b80 <__assert_fail@plt+0x6a54>
   200ac:	mov	r4, r0
   200b0:	b	20058 <__assert_fail@plt+0xef2c>
   200b4:	ldrb	r3, [r8, #1]
   200b8:	and	r3, r3, #223	; 0xdf
   200bc:	cmp	r3, #88	; 0x58
   200c0:	bne	200f8 <__assert_fail@plt+0xefcc>
   200c4:	ldrb	r3, [r8, #2]
   200c8:	mov	sl, #16
   200cc:	add	r8, r8, #2
   200d0:	b	1ff58 <__assert_fail@plt+0xee2c>
   200d4:	mov	r1, r8
   200d8:	mov	r0, r9
   200dc:	bl	17dc4 <__assert_fail@plt+0x6c98>
   200e0:	b	2009c <__assert_fail@plt+0xef70>
   200e4:	mov	r1, r8
   200e8:	mov	r0, r9
   200ec:	bl	17dc4 <__assert_fail@plt+0x6c98>
   200f0:	mov	fp, r0
   200f4:	b	2001c <__assert_fail@plt+0xeef0>
   200f8:	cmp	r3, #66	; 0x42
   200fc:	bne	20110 <__assert_fail@plt+0xefe4>
   20100:	mov	sl, #2
   20104:	ldrb	r3, [r8, #2]
   20108:	add	r8, r8, sl
   2010c:	b	1ff58 <__assert_fail@plt+0xee2c>
   20110:	mov	sl, #8
   20114:	b	1ff60 <__assert_fail@plt+0xee34>
   20118:	movw	r1, #43800	; 0xab18
   2011c:	movt	r1, #2
   20120:	ldr	r3, [pc, #68]	; 2016c <__assert_fail@plt+0xf040>
   20124:	movw	r0, #44376	; 0xad58
   20128:	movt	r0, #2
   2012c:	movw	r2, #4405	; 0x1135
   20130:	bl	1112c <__assert_fail@plt>
   20134:	movw	r1, #43800	; 0xab18
   20138:	movt	r1, #2
   2013c:	ldr	r3, [pc, #40]	; 2016c <__assert_fail@plt+0xf040>
   20140:	movw	r0, #44928	; 0xaf80
   20144:	movt	r0, #2
   20148:	movw	r2, #4320	; 0x10e0
   2014c:	bl	1112c <__assert_fail@plt>
   20150:	movw	r1, #43800	; 0xab18
   20154:	movt	r1, #2
   20158:	ldr	r3, [pc, #12]	; 2016c <__assert_fail@plt+0xf040>
   2015c:	movw	r0, #44968	; 0xafa8
   20160:	movt	r0, #2
   20164:	movw	r2, #4408	; 0x1138
   20168:	bl	1112c <__assert_fail@plt>
   2016c:	andeq	sl, r2, r0, asr #21
   20170:	push	{lr}		; (str lr, [sp, #-4]!)
   20174:	mov	ip, #0
   20178:	ldr	lr, [pc, #12]	; 2018c <__assert_fail@plt+0xf060>
   2017c:	str	ip, [r0]
   20180:	stmib	r0, {ip, lr}
   20184:	pop	{lr}		; (ldr lr, [sp], #4)
   20188:	b	1fe10 <__assert_fail@plt+0xece4>
   2018c:	muleq	r2, r8, r9
   20190:	strd	r4, [sp, #-16]!
   20194:	str	r6, [sp, #8]
   20198:	mov	r6, r0
   2019c:	mov	r0, #0
   201a0:	str	lr, [sp, #12]
   201a4:	bl	1fbb4 <__assert_fail@plt+0xea88>
   201a8:	subs	r4, r0, #0
   201ac:	moveq	r6, r4
   201b0:	beq	201ec <__assert_fail@plt+0xf0c0>
   201b4:	bl	1100c <strlen@plt>
   201b8:	mov	r5, r0
   201bc:	mov	r3, r6
   201c0:	mov	r2, r0
   201c4:	mov	r1, #1
   201c8:	mov	r0, r4
   201cc:	bl	10f58 <fwrite@plt>
   201d0:	movw	r3, #49436	; 0xc11c
   201d4:	movt	r3, #3
   201d8:	mov	r6, r0
   201dc:	add	r1, r5, #1
   201e0:	ldr	r3, [r3, #8]
   201e4:	mov	r0, r4
   201e8:	blx	r3
   201ec:	mov	r0, r6
   201f0:	ldrd	r4, [sp]
   201f4:	ldr	r6, [sp, #8]
   201f8:	add	sp, sp, #12
   201fc:	pop	{pc}		; (ldr pc, [sp], #4)
   20200:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20204:	strd	r6, [sp, #8]
   20208:	strd	r8, [sp, #16]
   2020c:	strd	sl, [sp, #24]
   20210:	str	lr, [sp, #32]
   20214:	sub	sp, sp, #12
   20218:	ldr	sl, [sp, #48]	; 0x30
   2021c:	str	r0, [sp]
   20220:	ldr	ip, [sp, #52]	; 0x34
   20224:	ldr	r8, [sp, #56]	; 0x38
   20228:	cmp	ip, #0
   2022c:	bne	203e8 <__assert_fail@plt+0xf2bc>
   20230:	mov	r6, r3
   20234:	add	r3, r2, #1
   20238:	bics	r9, r3, #2
   2023c:	bne	20410 <__assert_fail@plt+0xf2e4>
   20240:	add	r3, sl, #1
   20244:	cmp	r3, #2
   20248:	bhi	203f4 <__assert_fail@plt+0xf2c8>
   2024c:	cmp	sl, #0
   20250:	mov	r7, r1
   20254:	mvneq	sl, #0
   20258:	cmp	sl, r2
   2025c:	lslne	r9, r6, #1
   20260:	cmp	r2, #1
   20264:	bne	20274 <__assert_fail@plt+0xf148>
   20268:	sub	r3, r1, #1
   2026c:	rsb	r9, r9, #0
   20270:	mla	r8, r6, r3, r8
   20274:	ldr	r2, [sp]
   20278:	cmp	sl, #1
   2027c:	subeq	r3, r6, #1
   20280:	addeq	r8, r8, r3
   20284:	mul	r3, r7, r6
   20288:	ldr	r2, [r2]
   2028c:	add	r3, r3, #3
   20290:	lsr	r3, r3, #2
   20294:	str	r3, [sp, #4]
   20298:	cmp	r2, r3
   2029c:	blt	203a4 <__assert_fail@plt+0xf278>
   202a0:	ldr	r3, [sp]
   202a4:	cmp	r7, #0
   202a8:	ldr	r0, [r3, #8]
   202ac:	beq	203b8 <__assert_fail@plt+0xf28c>
   202b0:	rsb	sl, sl, #0
   202b4:	mov	r2, #0
   202b8:	mov	lr, r2
   202bc:	mov	r3, r2
   202c0:	mul	fp, r6, sl
   202c4:	cmp	r6, #0
   202c8:	movne	ip, #0
   202cc:	movne	r1, r8
   202d0:	beq	20310 <__assert_fail@plt+0xf1e4>
   202d4:	ldrb	r5, [r1]
   202d8:	lsl	r4, r2, #3
   202dc:	add	r2, r2, #1
   202e0:	cmp	r2, #4
   202e4:	orr	lr, lr, r5, lsl r4
   202e8:	bne	202fc <__assert_fail@plt+0xf1d0>
   202ec:	str	lr, [r0, r3, lsl #2]
   202f0:	mov	lr, #0
   202f4:	add	r3, r3, #1
   202f8:	mov	r2, lr
   202fc:	add	ip, ip, #1
   20300:	add	r1, r1, sl
   20304:	cmp	r6, ip
   20308:	bne	202d4 <__assert_fail@plt+0xf1a8>
   2030c:	add	r8, r8, fp
   20310:	subs	r7, r7, #1
   20314:	add	r8, r8, r9
   20318:	bne	202c4 <__assert_fail@plt+0xf198>
   2031c:	ldr	r1, [sp, #4]
   20320:	cmp	r2, #0
   20324:	moveq	r2, r3
   20328:	addne	r2, r3, #1
   2032c:	cmp	r2, r1
   20330:	bne	203c4 <__assert_fail@plt+0xf298>
   20334:	cmp	lr, #0
   20338:	addne	r2, r3, #1
   2033c:	strne	lr, [r0, r3, lsl #2]
   20340:	beq	20368 <__assert_fail@plt+0xf23c>
   20344:	ldr	r3, [sp]
   20348:	str	r2, [r3, #4]
   2034c:	add	sp, sp, #12
   20350:	ldrd	r4, [sp]
   20354:	ldrd	r6, [sp, #8]
   20358:	ldrd	r8, [sp, #16]
   2035c:	ldrd	sl, [sp, #24]
   20360:	add	sp, sp, #32
   20364:	pop	{pc}		; (ldr pc, [sp], #4)
   20368:	cmp	r3, #0
   2036c:	beq	2039c <__assert_fail@plt+0xf270>
   20370:	sub	r2, r3, #-1073741823	; 0xc0000001
   20374:	ldr	r1, [r0, r2, lsl #2]
   20378:	add	r0, r0, r2, lsl #2
   2037c:	cmp	r1, #0
   20380:	beq	20394 <__assert_fail@plt+0xf268>
   20384:	b	203e0 <__assert_fail@plt+0xf2b4>
   20388:	ldr	r2, [r0, #-4]!
   2038c:	cmp	r2, #0
   20390:	bne	203e0 <__assert_fail@plt+0xf2b4>
   20394:	subs	r3, r3, #1
   20398:	bne	20388 <__assert_fail@plt+0xf25c>
   2039c:	mov	r2, #0
   203a0:	b	20344 <__assert_fail@plt+0xf218>
   203a4:	mov	r1, r3
   203a8:	ldr	r0, [sp]
   203ac:	bl	17dc4 <__assert_fail@plt+0x6c98>
   203b0:	cmp	r7, #0
   203b4:	bne	202b0 <__assert_fail@plt+0xf184>
   203b8:	ldr	r3, [sp, #4]
   203bc:	cmp	r3, #0
   203c0:	beq	2039c <__assert_fail@plt+0xf270>
   203c4:	movw	r1, #43800	; 0xab18
   203c8:	movt	r1, #2
   203cc:	ldr	r3, [pc, #88]	; 2042c <__assert_fail@plt+0xf300>
   203d0:	movw	r0, #45072	; 0xb010
   203d4:	movt	r0, #2
   203d8:	movw	r2, #4507	; 0x119b
   203dc:	bl	1112c <__assert_fail@plt>
   203e0:	mov	r2, r3
   203e4:	b	20344 <__assert_fail@plt+0xf218>
   203e8:	movw	r0, #44980	; 0xafb4
   203ec:	movt	r0, #2
   203f0:	bl	17c40 <__assert_fail@plt+0x6b14>
   203f4:	movw	r1, #43800	; 0xab18
   203f8:	movt	r1, #2
   203fc:	ldr	r3, [pc, #40]	; 2042c <__assert_fail@plt+0xf300>
   20400:	movw	r0, #45044	; 0xaff4
   20404:	movt	r0, #2
   20408:	movw	r2, #4469	; 0x1175
   2040c:	bl	1112c <__assert_fail@plt>
   20410:	movw	r1, #43800	; 0xab18
   20414:	movt	r1, #2
   20418:	ldr	r3, [pc, #12]	; 2042c <__assert_fail@plt+0xf300>
   2041c:	movw	r0, #45016	; 0xafd8
   20420:	movt	r0, #2
   20424:	movw	r2, #4468	; 0x1174
   20428:	bl	1112c <__assert_fail@plt>
   2042c:	andeq	sl, r2, ip, asr #21
   20430:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20434:	strd	r6, [sp, #8]
   20438:	strd	r8, [sp, #16]
   2043c:	strd	sl, [sp, #24]
   20440:	str	lr, [sp, #32]
   20444:	sub	sp, sp, #20
   20448:	ldr	sl, [sp, #56]	; 0x38
   2044c:	str	r1, [sp, #4]
   20450:	ldr	ip, [sp, #60]	; 0x3c
   20454:	ldr	r7, [sp, #64]	; 0x40
   20458:	cmp	ip, #0
   2045c:	bne	20684 <__assert_fail@plt+0xf558>
   20460:	add	r5, r2, #1
   20464:	bics	r5, r5, #2
   20468:	bne	2064c <__assert_fail@plt+0xf520>
   2046c:	add	r1, sl, #1
   20470:	cmp	r1, #2
   20474:	bhi	20630 <__assert_fail@plt+0xf504>
   20478:	cmp	r3, #0
   2047c:	ldr	r6, [r7, #4]
   20480:	beq	205a0 <__assert_fail@plt+0xf474>
   20484:	cmp	r6, #0
   20488:	beq	205a8 <__assert_fail@plt+0xf47c>
   2048c:	ldr	r1, [r7, #8]
   20490:	cmp	r6, #0
   20494:	rsblt	r6, r6, #0
   20498:	sub	ip, r6, #-1073741823	; 0xc0000001
   2049c:	ldr	r1, [r1, ip, lsl #2]
   204a0:	cmp	r1, #0
   204a4:	bne	204b0 <__assert_fail@plt+0xf384>
   204a8:	b	20668 <__assert_fail@plt+0xf53c>
   204ac:	mov	r5, ip
   204b0:	lsrs	r1, r1, #8
   204b4:	add	ip, r5, #1
   204b8:	bne	204ac <__assert_fail@plt+0xf380>
   204bc:	sub	r1, r6, #1
   204c0:	cmp	r0, #0
   204c4:	add	r1, r3, r1, lsl #2
   204c8:	add	r5, r1, r5
   204cc:	udiv	r8, r5, r3
   204d0:	beq	205d0 <__assert_fail@plt+0xf4a4>
   204d4:	cmp	sl, #0
   204d8:	mvneq	sl, #0
   204dc:	cmp	sl, r2
   204e0:	moveq	fp, #0
   204e4:	lslne	fp, r3, #1
   204e8:	cmp	r2, #1
   204ec:	subeq	r9, r8, #1
   204f0:	rsbeq	fp, fp, #0
   204f4:	movne	r9, r0
   204f8:	mlaeq	r9, r3, r9, r0
   204fc:	cmp	sl, #1
   20500:	subeq	r2, r3, #1
   20504:	addeq	r9, r9, r2
   20508:	cmp	r5, r3
   2050c:	bcc	205f8 <__assert_fail@plt+0xf4cc>
   20510:	mov	ip, #0
   20514:	mls	fp, sl, r3, fp
   20518:	rsb	sl, sl, #0
   2051c:	mov	r2, ip
   20520:	mov	r5, ip
   20524:	mov	r4, ip
   20528:	mov	r1, #0
   2052c:	mov	lr, r9
   20530:	cmp	ip, #0
   20534:	subne	ip, ip, #1
   20538:	bne	20550 <__assert_fail@plt+0xf424>
   2053c:	cmp	r6, r4
   20540:	mov	ip, #3
   20544:	ldrgt	r2, [r7, #8]
   20548:	ldrgt	r2, [r2, r4, lsl #2]
   2054c:	addgt	r4, r4, #1
   20550:	add	r1, r1, #1
   20554:	strb	r2, [lr], sl
   20558:	lsr	r2, r2, #8
   2055c:	cmp	r3, r1
   20560:	bne	20530 <__assert_fail@plt+0xf404>
   20564:	add	r5, r5, #1
   20568:	add	r9, r9, fp
   2056c:	cmp	r8, r5
   20570:	bhi	20528 <__assert_fail@plt+0xf3fc>
   20574:	cmp	r4, r6
   20578:	bne	205f8 <__assert_fail@plt+0xf4cc>
   2057c:	cmp	r8, r5
   20580:	beq	205a8 <__assert_fail@plt+0xf47c>
   20584:	movw	r1, #43800	; 0xab18
   20588:	movt	r1, #2
   2058c:	ldr	r3, [pc, #252]	; 20690 <__assert_fail@plt+0xf564>
   20590:	movw	r0, #45184	; 0xb080
   20594:	movt	r0, #2
   20598:	movw	r2, #4612	; 0x1204
   2059c:	bl	1112c <__assert_fail@plt>
   205a0:	cmp	r6, #0
   205a4:	bne	20614 <__assert_fail@plt+0xf4e8>
   205a8:	ldr	r3, [sp, #4]
   205ac:	cmp	r3, #0
   205b0:	strne	r5, [r3]
   205b4:	add	sp, sp, #20
   205b8:	ldrd	r4, [sp]
   205bc:	ldrd	r6, [sp, #8]
   205c0:	ldrd	r8, [sp, #16]
   205c4:	ldrd	sl, [sp, #24]
   205c8:	add	sp, sp, #32
   205cc:	pop	{pc}		; (ldr pc, [sp], #4)
   205d0:	movw	r1, #49436	; 0xc11c
   205d4:	movt	r1, #3
   205d8:	mul	r0, r8, r3
   205dc:	ldr	r1, [r1, #4]
   205e0:	str	r3, [sp, #8]
   205e4:	str	r2, [sp, #12]
   205e8:	blx	r1
   205ec:	ldr	r3, [sp, #8]
   205f0:	ldr	r2, [sp, #12]
   205f4:	b	204d4 <__assert_fail@plt+0xf3a8>
   205f8:	movw	r1, #43800	; 0xab18
   205fc:	movt	r1, #2
   20600:	ldr	r3, [pc, #136]	; 20690 <__assert_fail@plt+0xf564>
   20604:	movw	r0, #45176	; 0xb078
   20608:	movt	r0, #2
   2060c:	movw	r2, #4611	; 0x1203
   20610:	bl	1112c <__assert_fail@plt>
   20614:	movw	r1, #43800	; 0xab18
   20618:	movt	r1, #2
   2061c:	ldr	r3, [pc, #108]	; 20690 <__assert_fail@plt+0xf564>
   20620:	movw	r0, #45132	; 0xb04c
   20624:	movt	r0, #2
   20628:	movw	r2, #4528	; 0x11b0
   2062c:	bl	1112c <__assert_fail@plt>
   20630:	movw	r1, #43800	; 0xab18
   20634:	movt	r1, #2
   20638:	ldr	r3, [pc, #80]	; 20690 <__assert_fail@plt+0xf564>
   2063c:	movw	r0, #45044	; 0xaff4
   20640:	movt	r0, #2
   20644:	movw	r2, #4527	; 0x11af
   20648:	bl	1112c <__assert_fail@plt>
   2064c:	movw	r1, #43800	; 0xab18
   20650:	movt	r1, #2
   20654:	ldr	r3, [pc, #52]	; 20690 <__assert_fail@plt+0xf564>
   20658:	movw	r0, #45016	; 0xafd8
   2065c:	movt	r0, #2
   20660:	movw	r2, #4526	; 0x11ae
   20664:	bl	1112c <__assert_fail@plt>
   20668:	movw	r1, #43800	; 0xab18
   2066c:	movt	r1, #2
   20670:	ldr	r3, [pc, #24]	; 20690 <__assert_fail@plt+0xf564>
   20674:	movw	r0, #45164	; 0xb06c
   20678:	movt	r0, #2
   2067c:	movw	r2, #4548	; 0x11c4
   20680:	bl	1112c <__assert_fail@plt>
   20684:	movw	r0, #45096	; 0xb028
   20688:	movt	r0, #2
   2068c:	bl	17c40 <__assert_fail@plt+0x6b14>
   20690:	ldrdeq	sl, [r2], -r8
   20694:	strd	r4, [sp, #-16]!
   20698:	subs	r4, r0, #0
   2069c:	str	r6, [sp, #8]
   206a0:	str	lr, [sp, #12]
   206a4:	beq	2073c <__assert_fail@plt+0xf610>
   206a8:	mov	r1, #47	; 0x2f
   206ac:	bl	110e4 <strrchr@plt>
   206b0:	subs	r5, r0, #0
   206b4:	beq	20714 <__assert_fail@plt+0xf5e8>
   206b8:	add	r6, r5, #1
   206bc:	sub	r3, r6, r4
   206c0:	cmp	r3, #6
   206c4:	ble	20714 <__assert_fail@plt+0xf5e8>
   206c8:	movw	r1, #45252	; 0xb0c4
   206cc:	movt	r1, #2
   206d0:	mov	r2, #7
   206d4:	sub	r0, r5, #6
   206d8:	bl	11114 <strncmp@plt>
   206dc:	cmp	r0, #0
   206e0:	bne	20714 <__assert_fail@plt+0xf5e8>
   206e4:	movw	r1, #45260	; 0xb0cc
   206e8:	movt	r1, #2
   206ec:	mov	r2, #3
   206f0:	mov	r0, r6
   206f4:	bl	11114 <strncmp@plt>
   206f8:	cmp	r0, #0
   206fc:	movne	r4, r6
   20700:	bne	20714 <__assert_fail@plt+0xf5e8>
   20704:	add	r4, r5, #4
   20708:	movw	r3, #49512	; 0xc168
   2070c:	movt	r3, #3
   20710:	str	r4, [r3]
   20714:	movw	r2, #49568	; 0xc1a0
   20718:	movt	r2, #3
   2071c:	ldr	r6, [sp, #8]
   20720:	movw	r3, #49516	; 0xc16c
   20724:	movt	r3, #3
   20728:	str	r4, [r2]
   2072c:	str	r4, [r3]
   20730:	ldrd	r4, [sp]
   20734:	add	sp, sp, #12
   20738:	pop	{pc}		; (ldr pc, [sp], #4)
   2073c:	movw	r3, #49528	; 0xc178
   20740:	movt	r3, #3
   20744:	movw	r0, #45196	; 0xb08c
   20748:	movt	r0, #2
   2074c:	ldr	r3, [r3]
   20750:	mov	r2, #55	; 0x37
   20754:	mov	r1, #1
   20758:	bl	10f58 <fwrite@plt>
   2075c:	bl	11120 <abort@plt>
   20760:	movw	r3, #45264	; 0xb0d0
   20764:	movt	r3, #2
   20768:	str	r4, [sp, #-8]!
   2076c:	movw	r1, #45284	; 0xb0e4
   20770:	movt	r1, #2
   20774:	str	lr, [sp, #4]
   20778:	movw	r0, #45300	; 0xb0f4
   2077c:	movt	r0, #2
   20780:	mov	r2, #172	; 0xac
   20784:	bl	1112c <__assert_fail@plt>
   20788:	mov	r3, r1
   2078c:	mov	r1, #2
   20790:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20794:	mov	r4, r0
   20798:	mov	r0, r3
   2079c:	strd	r6, [sp, #8]
   207a0:	strd	r8, [sp, #16]
   207a4:	movw	r7, #46472	; 0xb588
   207a8:	movt	r7, #2
   207ac:	strd	sl, [sp, #24]
   207b0:	mov	r8, #0
   207b4:	mov	r9, #0
   207b8:	str	lr, [sp, #32]
   207bc:	sub	sp, sp, #124	; 0x7c
   207c0:	bl	23a2c <__assert_fail@plt+0x12900>
   207c4:	mov	fp, r0
   207c8:	ldrb	r3, [r4]
   207cc:	cmp	r3, #0
   207d0:	beq	20864 <__assert_fail@plt+0xf738>
   207d4:	mov	r1, fp
   207d8:	mov	r0, r4
   207dc:	bl	25a24 <__assert_fail@plt+0x148f8>
   207e0:	subs	sl, r0, #0
   207e4:	beq	20864 <__assert_fail@plt+0xf738>
   207e8:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   207ec:	cmp	r0, #1
   207f0:	bhi	20894 <__assert_fail@plt+0xf768>
   207f4:	mov	r0, fp
   207f8:	bl	1100c <strlen@plt>
   207fc:	cmp	r4, sl
   20800:	mov	r5, r0
   20804:	bcs	20824 <__assert_fail@plt+0xf6f8>
   20808:	bl	10fe8 <__ctype_b_loc@plt>
   2080c:	ldrb	r3, [sl, #-1]
   20810:	ldr	r2, [r0]
   20814:	lsl	r3, r3, #1
   20818:	ldrh	r3, [r2, r3]
   2081c:	tst	r3, #8
   20820:	bne	20848 <__assert_fail@plt+0xf71c>
   20824:	ldrb	r4, [sl, r5]
   20828:	cmp	r4, #0
   2082c:	beq	20f88 <__assert_fail@plt+0xfe5c>
   20830:	bl	10fe8 <__ctype_b_loc@plt>
   20834:	ldr	r3, [r0]
   20838:	lsl	r4, r4, #1
   2083c:	ldrh	r3, [r3, r4]
   20840:	tst	r3, #8
   20844:	beq	20f88 <__assert_fail@plt+0xfe5c>
   20848:	ldrb	r3, [sl]
   2084c:	cmp	r3, #0
   20850:	beq	20864 <__assert_fail@plt+0xf738>
   20854:	add	r4, sl, #1
   20858:	ldrb	r3, [r4]
   2085c:	cmp	r3, #0
   20860:	bne	207d4 <__assert_fail@plt+0xf6a8>
   20864:	mov	r3, #0
   20868:	str	r3, [sp, #4]
   2086c:	mov	r0, fp
   20870:	bl	17998 <__assert_fail@plt+0x686c>
   20874:	ldr	r0, [sp, #4]
   20878:	add	sp, sp, #124	; 0x7c
   2087c:	ldrd	r4, [sp]
   20880:	ldrd	r6, [sp, #8]
   20884:	ldrd	r8, [sp, #16]
   20888:	ldrd	sl, [sp, #24]
   2088c:	add	sp, sp, #32
   20890:	pop	{pc}		; (ldr pc, [sp], #4)
   20894:	mov	r3, #0
   20898:	cmp	r4, sl
   2089c:	movcc	r5, #1
   208a0:	strb	r3, [sp, #8]
   208a4:	strd	r8, [sp, #12]
   208a8:	strb	r3, [sp, #20]
   208ac:	str	r4, [sp, #24]
   208b0:	bcc	20914 <__assert_fail@plt+0xf7e8>
   208b4:	b	20dc8 <__assert_fail@plt+0xfc9c>
   208b8:	ldrb	r3, [r4]
   208bc:	lsr	r2, r3, #5
   208c0:	and	r3, r3, #31
   208c4:	ldr	r2, [r7, r2, lsl #2]
   208c8:	lsr	r3, r2, r3
   208cc:	tst	r3, #1
   208d0:	beq	209a8 <__assert_fail@plt+0xf87c>
   208d4:	str	r5, [sp, #28]
   208d8:	ldrb	r6, [r4]
   208dc:	strb	r5, [sp, #20]
   208e0:	strb	r5, [sp, #32]
   208e4:	cmp	r6, #0
   208e8:	str	r6, [sp, #36]	; 0x24
   208ec:	beq	209a4 <__assert_fail@plt+0xf878>
   208f0:	ldr	r4, [sp, #24]
   208f4:	mov	r2, #0
   208f8:	ldr	r3, [sp, #28]
   208fc:	strb	r2, [sp, #20]
   20900:	ldrb	r1, [sp, #32]
   20904:	add	r4, r4, r3
   20908:	cmp	r4, sl
   2090c:	str	r4, [sp, #24]
   20910:	bcs	20a00 <__assert_fail@plt+0xf8d4>
   20914:	ldrb	r3, [sp, #8]
   20918:	cmp	r3, #0
   2091c:	beq	208b8 <__assert_fail@plt+0xf78c>
   20920:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20924:	mov	r1, r0
   20928:	mov	r0, r4
   2092c:	bl	239c4 <__assert_fail@plt+0x12898>
   20930:	mov	r2, r0
   20934:	add	r3, sp, #12
   20938:	mov	r1, r4
   2093c:	add	r0, sp, #36	; 0x24
   20940:	bl	24f48 <__assert_fail@plt+0x13e1c>
   20944:	cmn	r0, #1
   20948:	str	r0, [sp, #28]
   2094c:	beq	209c0 <__assert_fail@plt+0xf894>
   20950:	cmn	r0, #2
   20954:	beq	209d8 <__assert_fail@plt+0xf8ac>
   20958:	cmp	r0, #0
   2095c:	bne	209f8 <__assert_fail@plt+0xf8cc>
   20960:	ldr	r4, [sp, #24]
   20964:	str	r5, [sp, #28]
   20968:	ldrb	r3, [r4]
   2096c:	cmp	r3, #0
   20970:	bne	20fbc <__assert_fail@plt+0xfe90>
   20974:	ldr	r6, [sp, #36]	; 0x24
   20978:	cmp	r6, #0
   2097c:	bne	20d68 <__assert_fail@plt+0xfc3c>
   20980:	add	r0, sp, #12
   20984:	strb	r5, [sp, #32]
   20988:	bl	10ee0 <mbsinit@plt>
   2098c:	cmp	r0, #0
   20990:	strb	r5, [sp, #20]
   20994:	movne	r3, #0
   20998:	strbne	r3, [sp, #8]
   2099c:	cmp	r6, #0
   209a0:	bne	208f0 <__assert_fail@plt+0xf7c4>
   209a4:	bl	11120 <abort@plt>
   209a8:	add	r0, sp, #12
   209ac:	bl	10ee0 <mbsinit@plt>
   209b0:	cmp	r0, #0
   209b4:	beq	20f9c <__assert_fail@plt+0xfe70>
   209b8:	strb	r5, [sp, #8]
   209bc:	b	20920 <__assert_fail@plt+0xf7f4>
   209c0:	mov	r3, #0
   209c4:	str	r5, [sp, #28]
   209c8:	ldr	r4, [sp, #24]
   209cc:	strb	r3, [sp, #32]
   209d0:	ldr	r6, [sp, #36]	; 0x24
   209d4:	b	208f4 <__assert_fail@plt+0xf7c8>
   209d8:	ldr	r4, [sp, #24]
   209dc:	mov	r0, r4
   209e0:	bl	1100c <strlen@plt>
   209e4:	mov	r3, #0
   209e8:	str	r0, [sp, #28]
   209ec:	ldr	r6, [sp, #36]	; 0x24
   209f0:	strb	r3, [sp, #32]
   209f4:	b	208f4 <__assert_fail@plt+0xf7c8>
   209f8:	ldr	r6, [sp, #36]	; 0x24
   209fc:	b	20980 <__assert_fail@plt+0xf854>
   20a00:	cmp	r1, r2
   20a04:	beq	20dc8 <__assert_fail@plt+0xfc9c>
   20a08:	mov	r0, r6
   20a0c:	bl	11030 <iswalnum@plt>
   20a10:	clz	r3, r0
   20a14:	lsr	r3, r3, #5
   20a18:	str	r3, [sp, #4]
   20a1c:	mov	r3, #0
   20a20:	mov	r5, fp
   20a24:	mov	r6, #1
   20a28:	strb	r3, [sp, #8]
   20a2c:	strd	r8, [sp, #12]
   20a30:	strb	r3, [sp, #20]
   20a34:	str	sl, [sp, #24]
   20a38:	strb	r3, [sp, #64]	; 0x40
   20a3c:	strd	r8, [sp, #68]	; 0x44
   20a40:	strb	r3, [sp, #76]	; 0x4c
   20a44:	str	fp, [sp, #80]	; 0x50
   20a48:	b	20b0c <__assert_fail@plt+0xf9e0>
   20a4c:	ldrb	r3, [r5]
   20a50:	lsr	r2, r3, #5
   20a54:	and	r3, r3, #31
   20a58:	ldr	r2, [r7, r2, lsl #2]
   20a5c:	lsr	r3, r2, r3
   20a60:	tst	r3, #1
   20a64:	beq	20cec <__assert_fail@plt+0xfbc0>
   20a68:	str	r6, [sp, #84]	; 0x54
   20a6c:	ldrb	r3, [r5]
   20a70:	strb	r6, [sp, #76]	; 0x4c
   20a74:	strb	r6, [sp, #88]	; 0x58
   20a78:	mov	r4, r3
   20a7c:	str	r3, [sp, #92]	; 0x5c
   20a80:	cmp	r4, #0
   20a84:	beq	20b80 <__assert_fail@plt+0xfa54>
   20a88:	ldrb	r3, [sp, #20]
   20a8c:	cmp	r3, #0
   20a90:	bne	20cd8 <__assert_fail@plt+0xfbac>
   20a94:	ldrb	r3, [sp, #8]
   20a98:	ldr	r4, [sp, #24]
   20a9c:	cmp	r3, #0
   20aa0:	bne	20c74 <__assert_fail@plt+0xfb48>
   20aa4:	ldrb	r3, [r4]
   20aa8:	lsr	r2, r3, #5
   20aac:	and	r3, r3, #31
   20ab0:	ldr	r2, [r7, r2, lsl #2]
   20ab4:	lsr	r3, r2, r3
   20ab8:	tst	r3, #1
   20abc:	beq	20c60 <__assert_fail@plt+0xfb34>
   20ac0:	str	r6, [sp, #28]
   20ac4:	ldrb	r3, [r4]
   20ac8:	strb	r6, [sp, #20]
   20acc:	strb	r6, [sp, #32]
   20ad0:	mov	r4, r3
   20ad4:	str	r3, [sp, #36]	; 0x24
   20ad8:	cmp	r4, #0
   20adc:	beq	209a4 <__assert_fail@plt+0xf878>
   20ae0:	ldr	r4, [sp, #24]
   20ae4:	mov	r2, #0
   20ae8:	ldr	r3, [sp, #28]
   20aec:	strb	r2, [sp, #20]
   20af0:	strb	r2, [sp, #76]	; 0x4c
   20af4:	ldr	r5, [sp, #80]	; 0x50
   20af8:	ldr	r2, [sp, #84]	; 0x54
   20afc:	add	r4, r4, r3
   20b00:	str	r4, [sp, #24]
   20b04:	add	r5, r5, r2
   20b08:	str	r5, [sp, #80]	; 0x50
   20b0c:	ldrb	r3, [sp, #64]	; 0x40
   20b10:	cmp	r3, #0
   20b14:	beq	20a4c <__assert_fail@plt+0xf920>
   20b18:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20b1c:	mov	r1, r0
   20b20:	mov	r0, r5
   20b24:	bl	239c4 <__assert_fail@plt+0x12898>
   20b28:	mov	r2, r0
   20b2c:	add	r3, sp, #68	; 0x44
   20b30:	mov	r1, r5
   20b34:	add	r0, sp, #92	; 0x5c
   20b38:	bl	24f48 <__assert_fail@plt+0x13e1c>
   20b3c:	cmn	r0, #1
   20b40:	str	r0, [sp, #84]	; 0x54
   20b44:	beq	20d04 <__assert_fail@plt+0xfbd8>
   20b48:	cmn	r0, #2
   20b4c:	beq	20d2c <__assert_fail@plt+0xfc00>
   20b50:	cmp	r0, #0
   20b54:	beq	20d48 <__assert_fail@plt+0xfc1c>
   20b58:	ldr	r4, [sp, #92]	; 0x5c
   20b5c:	add	r0, sp, #68	; 0x44
   20b60:	strb	r6, [sp, #88]	; 0x58
   20b64:	bl	10ee0 <mbsinit@plt>
   20b68:	cmp	r0, #0
   20b6c:	strb	r6, [sp, #76]	; 0x4c
   20b70:	movne	r3, #0
   20b74:	strbne	r3, [sp, #64]	; 0x40
   20b78:	cmp	r4, #0
   20b7c:	bne	20a88 <__assert_fail@plt+0xf95c>
   20b80:	ldrb	r3, [sp, #20]
   20b84:	cmp	r3, #0
   20b88:	bne	20e54 <__assert_fail@plt+0xfd28>
   20b8c:	ldrb	r3, [sp, #8]
   20b90:	ldr	r4, [sp, #24]
   20b94:	cmp	r3, #0
   20b98:	bne	20dec <__assert_fail@plt+0xfcc0>
   20b9c:	ldrb	r3, [r4]
   20ba0:	lsr	r2, r3, #5
   20ba4:	and	r3, r3, #31
   20ba8:	ldr	r2, [r7, r2, lsl #2]
   20bac:	lsr	r3, r2, r3
   20bb0:	tst	r3, #1
   20bb4:	beq	20dd4 <__assert_fail@plt+0xfca8>
   20bb8:	mov	r3, #1
   20bbc:	str	r3, [sp, #28]
   20bc0:	ldrb	r4, [r4]
   20bc4:	strb	r3, [sp, #20]
   20bc8:	strb	r3, [sp, #32]
   20bcc:	str	r4, [sp, #36]	; 0x24
   20bd0:	cmp	r4, #0
   20bd4:	beq	20bf4 <__assert_fail@plt+0xfac8>
   20bd8:	ldrb	r3, [sp, #32]
   20bdc:	cmp	r3, #0
   20be0:	beq	20bf4 <__assert_fail@plt+0xfac8>
   20be4:	mov	r0, r4
   20be8:	bl	11030 <iswalnum@plt>
   20bec:	cmp	r0, #0
   20bf0:	bne	20c00 <__assert_fail@plt+0xfad4>
   20bf4:	ldr	r3, [sp, #4]
   20bf8:	cmp	r3, #0
   20bfc:	bne	2086c <__assert_fail@plt+0xf740>
   20c00:	mov	r3, #0
   20c04:	strb	r3, [sp, #8]
   20c08:	strd	r8, [sp, #12]
   20c0c:	strb	r3, [sp, #20]
   20c10:	str	sl, [sp, #24]
   20c14:	ldrb	r3, [sl]
   20c18:	lsr	r2, r3, #5
   20c1c:	and	r3, r3, #31
   20c20:	ldr	r2, [r7, r2, lsl #2]
   20c24:	lsr	r3, r2, r3
   20c28:	tst	r3, #1
   20c2c:	beq	20e68 <__assert_fail@plt+0xfd3c>
   20c30:	mov	r3, #1
   20c34:	str	r3, [sp, #28]
   20c38:	ldrb	r2, [sl]
   20c3c:	strb	r3, [sp, #20]
   20c40:	strb	r3, [sp, #32]
   20c44:	mov	r4, r2
   20c48:	str	r2, [sp, #36]	; 0x24
   20c4c:	cmp	r4, #0
   20c50:	beq	20f94 <__assert_fail@plt+0xfe68>
   20c54:	ldr	r4, [sp, #28]
   20c58:	add	r4, sl, r4
   20c5c:	b	207c8 <__assert_fail@plt+0xf69c>
   20c60:	add	r0, sp, #12
   20c64:	bl	10ee0 <mbsinit@plt>
   20c68:	cmp	r0, #0
   20c6c:	beq	20f9c <__assert_fail@plt+0xfe70>
   20c70:	strb	r6, [sp, #8]
   20c74:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20c78:	mov	r1, r0
   20c7c:	mov	r0, r4
   20c80:	bl	239c4 <__assert_fail@plt+0x12898>
   20c84:	mov	r2, r0
   20c88:	add	r3, sp, #12
   20c8c:	mov	r1, r4
   20c90:	add	r0, sp, #36	; 0x24
   20c94:	bl	24f48 <__assert_fail@plt+0x13e1c>
   20c98:	cmn	r0, #1
   20c9c:	str	r0, [sp, #28]
   20ca0:	beq	20d18 <__assert_fail@plt+0xfbec>
   20ca4:	cmn	r0, #2
   20ca8:	beq	20d88 <__assert_fail@plt+0xfc5c>
   20cac:	cmp	r0, #0
   20cb0:	beq	20da4 <__assert_fail@plt+0xfc78>
   20cb4:	ldr	r4, [sp, #36]	; 0x24
   20cb8:	add	r0, sp, #12
   20cbc:	strb	r6, [sp, #32]
   20cc0:	bl	10ee0 <mbsinit@plt>
   20cc4:	cmp	r0, #0
   20cc8:	strb	r6, [sp, #20]
   20ccc:	movne	r3, #0
   20cd0:	strbne	r3, [sp, #8]
   20cd4:	b	20ad8 <__assert_fail@plt+0xf9ac>
   20cd8:	ldrb	r3, [sp, #32]
   20cdc:	cmp	r3, #0
   20ce0:	beq	20ae0 <__assert_fail@plt+0xf9b4>
   20ce4:	ldr	r4, [sp, #36]	; 0x24
   20ce8:	b	20ad8 <__assert_fail@plt+0xf9ac>
   20cec:	add	r0, sp, #68	; 0x44
   20cf0:	bl	10ee0 <mbsinit@plt>
   20cf4:	cmp	r0, #0
   20cf8:	beq	20f9c <__assert_fail@plt+0xfe70>
   20cfc:	strb	r6, [sp, #64]	; 0x40
   20d00:	b	20b18 <__assert_fail@plt+0xf9ec>
   20d04:	mov	r3, #0
   20d08:	strb	r6, [sp, #76]	; 0x4c
   20d0c:	str	r6, [sp, #84]	; 0x54
   20d10:	strb	r3, [sp, #88]	; 0x58
   20d14:	b	20a88 <__assert_fail@plt+0xf95c>
   20d18:	mov	r3, #0
   20d1c:	str	r6, [sp, #28]
   20d20:	ldr	r4, [sp, #24]
   20d24:	strb	r3, [sp, #32]
   20d28:	b	20ae4 <__assert_fail@plt+0xf9b8>
   20d2c:	ldr	r0, [sp, #80]	; 0x50
   20d30:	bl	1100c <strlen@plt>
   20d34:	mov	r3, #0
   20d38:	strb	r6, [sp, #76]	; 0x4c
   20d3c:	str	r0, [sp, #84]	; 0x54
   20d40:	strb	r3, [sp, #88]	; 0x58
   20d44:	b	20a88 <__assert_fail@plt+0xf95c>
   20d48:	ldr	r3, [sp, #80]	; 0x50
   20d4c:	str	r6, [sp, #84]	; 0x54
   20d50:	ldrb	r3, [r3]
   20d54:	cmp	r3, #0
   20d58:	bne	20fbc <__assert_fail@plt+0xfe90>
   20d5c:	ldr	r4, [sp, #92]	; 0x5c
   20d60:	cmp	r4, #0
   20d64:	beq	20b5c <__assert_fail@plt+0xfa30>
   20d68:	movw	r3, #45264	; 0xb0d0
   20d6c:	movt	r3, #2
   20d70:	movw	r1, #45284	; 0xb0e4
   20d74:	movt	r1, #2
   20d78:	movw	r0, #45300	; 0xb0f4
   20d7c:	movt	r0, #2
   20d80:	mov	r2, #172	; 0xac
   20d84:	bl	1112c <__assert_fail@plt>
   20d88:	ldr	r4, [sp, #24]
   20d8c:	mov	r0, r4
   20d90:	bl	1100c <strlen@plt>
   20d94:	mov	r3, #0
   20d98:	str	r0, [sp, #28]
   20d9c:	strb	r3, [sp, #32]
   20da0:	b	20ae4 <__assert_fail@plt+0xf9b8>
   20da4:	ldr	r4, [sp, #24]
   20da8:	str	r6, [sp, #28]
   20dac:	ldrb	r3, [r4]
   20db0:	cmp	r3, #0
   20db4:	bne	20fbc <__assert_fail@plt+0xfe90>
   20db8:	ldr	r4, [sp, #36]	; 0x24
   20dbc:	cmp	r4, #0
   20dc0:	beq	20cb8 <__assert_fail@plt+0xfb8c>
   20dc4:	b	20d68 <__assert_fail@plt+0xfc3c>
   20dc8:	mov	r3, #1
   20dcc:	str	r3, [sp, #4]
   20dd0:	b	20a1c <__assert_fail@plt+0xf8f0>
   20dd4:	add	r0, sp, #12
   20dd8:	bl	10ee0 <mbsinit@plt>
   20ddc:	cmp	r0, #0
   20de0:	beq	20f9c <__assert_fail@plt+0xfe70>
   20de4:	mov	r3, #1
   20de8:	strb	r3, [sp, #8]
   20dec:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20df0:	mov	r1, r0
   20df4:	mov	r0, r4
   20df8:	bl	239c4 <__assert_fail@plt+0x12898>
   20dfc:	mov	r2, r0
   20e00:	add	r3, sp, #12
   20e04:	mov	r1, r4
   20e08:	add	r0, sp, #36	; 0x24
   20e0c:	bl	24f48 <__assert_fail@plt+0x13e1c>
   20e10:	cmn	r0, #1
   20e14:	str	r0, [sp, #28]
   20e18:	beq	20ee8 <__assert_fail@plt+0xfdbc>
   20e1c:	cmn	r0, #2
   20e20:	beq	20f64 <__assert_fail@plt+0xfe38>
   20e24:	cmp	r0, #0
   20e28:	bne	20f2c <__assert_fail@plt+0xfe00>
   20e2c:	ldr	r3, [sp, #24]
   20e30:	mov	r2, #1
   20e34:	str	r2, [sp, #28]
   20e38:	ldrb	r3, [r3]
   20e3c:	cmp	r3, #0
   20e40:	bne	20fbc <__assert_fail@plt+0xfe90>
   20e44:	ldr	r4, [sp, #36]	; 0x24
   20e48:	cmp	r4, #0
   20e4c:	beq	20f30 <__assert_fail@plt+0xfe04>
   20e50:	bl	20760 <__assert_fail@plt+0xf634>
   20e54:	ldrb	r3, [sp, #32]
   20e58:	ldr	r4, [sp, #36]	; 0x24
   20e5c:	cmp	r3, #0
   20e60:	beq	20bd8 <__assert_fail@plt+0xfaac>
   20e64:	b	20bd0 <__assert_fail@plt+0xfaa4>
   20e68:	add	r0, sp, #12
   20e6c:	bl	10ee0 <mbsinit@plt>
   20e70:	cmp	r0, #0
   20e74:	beq	20f9c <__assert_fail@plt+0xfe70>
   20e78:	mov	r4, #1
   20e7c:	strb	r4, [sp, #8]
   20e80:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20e84:	mov	r1, r0
   20e88:	mov	r0, sl
   20e8c:	bl	239c4 <__assert_fail@plt+0x12898>
   20e90:	mov	r2, r0
   20e94:	add	r3, sp, #12
   20e98:	mov	r1, sl
   20e9c:	add	r0, sp, #36	; 0x24
   20ea0:	bl	24f48 <__assert_fail@plt+0x13e1c>
   20ea4:	cmn	r0, #1
   20ea8:	str	r0, [sp, #28]
   20eac:	streq	r4, [sp, #28]
   20eb0:	beq	20c54 <__assert_fail@plt+0xfb28>
   20eb4:	cmn	r0, #2
   20eb8:	beq	20f54 <__assert_fail@plt+0xfe28>
   20ebc:	cmp	r0, #0
   20ec0:	bne	20f04 <__assert_fail@plt+0xfdd8>
   20ec4:	ldr	r3, [sp, #24]
   20ec8:	str	r4, [sp, #28]
   20ecc:	ldrb	r3, [r3]
   20ed0:	cmp	r3, #0
   20ed4:	bne	20fbc <__assert_fail@plt+0xfe90>
   20ed8:	ldr	r4, [sp, #36]	; 0x24
   20edc:	cmp	r4, #0
   20ee0:	beq	20f08 <__assert_fail@plt+0xfddc>
   20ee4:	b	20e50 <__assert_fail@plt+0xfd24>
   20ee8:	mov	r3, #1
   20eec:	mov	r2, #0
   20ef0:	ldr	r4, [sp, #36]	; 0x24
   20ef4:	strb	r3, [sp, #20]
   20ef8:	str	r3, [sp, #28]
   20efc:	strb	r2, [sp, #32]
   20f00:	b	20bd8 <__assert_fail@plt+0xfaac>
   20f04:	ldr	r4, [sp, #36]	; 0x24
   20f08:	mov	r5, #1
   20f0c:	add	r0, sp, #12
   20f10:	strb	r5, [sp, #32]
   20f14:	bl	10ee0 <mbsinit@plt>
   20f18:	cmp	r0, #0
   20f1c:	strb	r5, [sp, #20]
   20f20:	movne	r3, #0
   20f24:	strbne	r3, [sp, #8]
   20f28:	b	20c4c <__assert_fail@plt+0xfb20>
   20f2c:	ldr	r4, [sp, #36]	; 0x24
   20f30:	mov	r5, #1
   20f34:	add	r0, sp, #12
   20f38:	strb	r5, [sp, #32]
   20f3c:	bl	10ee0 <mbsinit@plt>
   20f40:	cmp	r0, #0
   20f44:	strb	r5, [sp, #20]
   20f48:	movne	r3, #0
   20f4c:	strbne	r3, [sp, #8]
   20f50:	b	20bd0 <__assert_fail@plt+0xfaa4>
   20f54:	ldr	r0, [sp, #24]
   20f58:	bl	1100c <strlen@plt>
   20f5c:	str	r0, [sp, #28]
   20f60:	b	20c54 <__assert_fail@plt+0xfb28>
   20f64:	ldr	r0, [sp, #24]
   20f68:	bl	1100c <strlen@plt>
   20f6c:	mov	r3, #0
   20f70:	mov	r2, #1
   20f74:	ldr	r4, [sp, #36]	; 0x24
   20f78:	strb	r2, [sp, #20]
   20f7c:	str	r0, [sp, #28]
   20f80:	strb	r3, [sp, #32]
   20f84:	b	20bd8 <__assert_fail@plt+0xfaac>
   20f88:	mov	r3, #1
   20f8c:	str	r3, [sp, #4]
   20f90:	b	2086c <__assert_fail@plt+0xf740>
   20f94:	str	r4, [sp, #4]
   20f98:	b	2086c <__assert_fail@plt+0xf740>
   20f9c:	movw	r3, #45264	; 0xb0d0
   20fa0:	movt	r3, #2
   20fa4:	movw	r1, #45284	; 0xb0e4
   20fa8:	movt	r1, #2
   20fac:	movw	r0, #45320	; 0xb108
   20fb0:	movt	r0, #2
   20fb4:	mov	r2, #143	; 0x8f
   20fb8:	bl	1112c <__assert_fail@plt>
   20fbc:	movw	r3, #45264	; 0xb0d0
   20fc0:	movt	r3, #2
   20fc4:	movw	r1, #45284	; 0xb0e4
   20fc8:	movt	r1, #2
   20fcc:	movw	r0, #45344	; 0xb120
   20fd0:	movt	r0, #2
   20fd4:	mov	r2, #171	; 0xab
   20fd8:	bl	1112c <__assert_fail@plt>
   20fdc:	mov	r1, r0
   20fe0:	mov	r2, #5
   20fe4:	strd	r4, [sp, #-16]!
   20fe8:	mov	r4, r0
   20fec:	mov	r0, #0
   20ff0:	str	r6, [sp, #8]
   20ff4:	str	lr, [sp, #12]
   20ff8:	sub	sp, sp, #8
   20ffc:	bl	10f04 <dcgettext@plt>
   21000:	cmp	r4, r0
   21004:	mov	r5, r0
   21008:	beq	2101c <__assert_fail@plt+0xfef0>
   2100c:	mov	r1, r4
   21010:	bl	20788 <__assert_fail@plt+0xf65c>
   21014:	cmp	r0, #0
   21018:	beq	21034 <__assert_fail@plt+0xff08>
   2101c:	mov	r0, r5
   21020:	add	sp, sp, #8
   21024:	ldrd	r4, [sp]
   21028:	ldr	r6, [sp, #8]
   2102c:	add	sp, sp, #12
   21030:	pop	{pc}		; (ldr pc, [sp], #4)
   21034:	mov	r0, r5
   21038:	bl	1100c <strlen@plt>
   2103c:	mov	r6, r0
   21040:	mov	r0, r4
   21044:	bl	1100c <strlen@plt>
   21048:	add	r0, r6, r0
   2104c:	add	r0, r0, #4
   21050:	bl	244d8 <__assert_fail@plt+0x133ac>
   21054:	movw	r3, #45368	; 0xb138
   21058:	movt	r3, #2
   2105c:	str	r5, [sp]
   21060:	mvn	r2, #0
   21064:	mov	r1, #1
   21068:	str	r4, [sp, #4]
   2106c:	mov	r5, r0
   21070:	bl	1103c <__sprintf_chk@plt>
   21074:	b	2101c <__assert_fail@plt+0xfef0>
   21078:	mov	r2, #5
   2107c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21080:	mov	r4, r1
   21084:	mov	r1, r0
   21088:	strd	r6, [sp, #8]
   2108c:	mov	r6, r0
   21090:	mov	r0, #0
   21094:	strd	r8, [sp, #16]
   21098:	str	sl, [sp, #24]
   2109c:	str	lr, [sp, #28]
   210a0:	sub	sp, sp, #8
   210a4:	bl	10f04 <dcgettext@plt>
   210a8:	mov	r5, r0
   210ac:	bl	24e3c <__assert_fail@plt+0x13d10>
   210b0:	movw	r1, #45376	; 0xb140
   210b4:	movt	r1, #2
   210b8:	mov	r7, r0
   210bc:	bl	24b54 <__assert_fail@plt+0x13a28>
   210c0:	subs	r8, r0, #0
   210c4:	bne	211f4 <__assert_fail@plt+0x100c8>
   210c8:	mov	r1, r6
   210cc:	mov	r0, r5
   210d0:	bl	10e8c <strcmp@plt>
   210d4:	cmp	r4, #0
   210d8:	movne	sl, r4
   210dc:	movne	r9, r4
   210e0:	beq	21160 <__assert_fail@plt+0x10034>
   210e4:	cmp	r0, #0
   210e8:	moveq	r5, r4
   210ec:	beq	21140 <__assert_fail@plt+0x10014>
   210f0:	mov	r1, r6
   210f4:	mov	r0, r5
   210f8:	bl	20788 <__assert_fail@plt+0xf65c>
   210fc:	subs	r7, r0, #0
   21100:	bne	21130 <__assert_fail@plt+0x10004>
   21104:	cmp	r9, #0
   21108:	beq	21170 <__assert_fail@plt+0x10044>
   2110c:	mov	r1, r9
   21110:	mov	r0, r5
   21114:	bl	20788 <__assert_fail@plt+0xf65c>
   21118:	cmp	r0, #0
   2111c:	beq	21170 <__assert_fail@plt+0x10044>
   21120:	cmp	r7, #0
   21124:	beq	21130 <__assert_fail@plt+0x10004>
   21128:	mov	r0, r7
   2112c:	bl	17998 <__assert_fail@plt+0x686c>
   21130:	cmp	r8, #0
   21134:	beq	21140 <__assert_fail@plt+0x10014>
   21138:	mov	r0, r8
   2113c:	bl	17998 <__assert_fail@plt+0x686c>
   21140:	mov	r0, r5
   21144:	add	sp, sp, #8
   21148:	ldrd	r4, [sp]
   2114c:	ldrd	r6, [sp, #8]
   21150:	ldrd	r8, [sp, #16]
   21154:	ldr	sl, [sp, #24]
   21158:	add	sp, sp, #28
   2115c:	pop	{pc}		; (ldr pc, [sp], #4)
   21160:	cmp	r0, #0
   21164:	bne	21344 <__assert_fail@plt+0x10218>
   21168:	mov	r5, r6
   2116c:	b	21140 <__assert_fail@plt+0x10014>
   21170:	cmp	sl, #0
   21174:	beq	2118c <__assert_fail@plt+0x10060>
   21178:	mov	r1, sl
   2117c:	mov	r0, r5
   21180:	bl	20788 <__assert_fail@plt+0xf65c>
   21184:	cmp	r0, #0
   21188:	bne	21120 <__assert_fail@plt+0xfff4>
   2118c:	mov	r0, r5
   21190:	bl	1100c <strlen@plt>
   21194:	mov	r6, r0
   21198:	mov	r0, r4
   2119c:	bl	1100c <strlen@plt>
   211a0:	add	r0, r6, r0
   211a4:	add	r0, r0, #4
   211a8:	bl	244d8 <__assert_fail@plt+0x133ac>
   211ac:	movw	r3, #45368	; 0xb138
   211b0:	movt	r3, #2
   211b4:	str	r5, [sp]
   211b8:	mvn	r2, #0
   211bc:	mov	r1, #1
   211c0:	str	r4, [sp, #4]
   211c4:	mov	r6, r0
   211c8:	bl	1103c <__sprintf_chk@plt>
   211cc:	cmp	r7, #0
   211d0:	beq	211dc <__assert_fail@plt+0x100b0>
   211d4:	mov	r0, r7
   211d8:	bl	17998 <__assert_fail@plt+0x686c>
   211dc:	cmp	r8, #0
   211e0:	beq	21168 <__assert_fail@plt+0x1003c>
   211e4:	mov	r0, r8
   211e8:	mov	r5, r6
   211ec:	bl	17998 <__assert_fail@plt+0x686c>
   211f0:	b	21140 <__assert_fail@plt+0x10014>
   211f4:	mov	r2, r7
   211f8:	mov	r0, r4
   211fc:	movw	r1, #45376	; 0xb140
   21200:	movt	r1, #2
   21204:	bl	24a14 <__assert_fail@plt+0x138e8>
   21208:	mov	r9, r0
   2120c:	mov	r0, r7
   21210:	bl	1100c <strlen@plt>
   21214:	mov	sl, r0
   21218:	add	r0, r0, #11
   2121c:	bl	244d8 <__assert_fail@plt+0x133ac>
   21220:	mov	r1, r7
   21224:	mov	r2, sl
   21228:	mov	r8, r0
   2122c:	bl	10ed4 <memcpy@plt>
   21230:	movw	r3, #45384	; 0xb148
   21234:	movt	r3, #2
   21238:	ldrb	lr, [r3, #10]
   2123c:	mov	r0, r4
   21240:	add	ip, r8, sl
   21244:	mov	r2, r8
   21248:	movw	r1, #45376	; 0xb140
   2124c:	movt	r1, #2
   21250:	ldrh	r7, [r3, #8]
   21254:	ldr	r4, [r3]
   21258:	ldr	r3, [r3, #4]
   2125c:	str	r4, [r8, sl]
   21260:	str	r3, [ip, #4]
   21264:	strh	r7, [ip, #8]
   21268:	strb	lr, [ip, #10]
   2126c:	bl	24a14 <__assert_fail@plt+0x138e8>
   21270:	mov	r4, r0
   21274:	mov	r0, r8
   21278:	bl	17998 <__assert_fail@plt+0x686c>
   2127c:	cmp	r4, #0
   21280:	beq	21318 <__assert_fail@plt+0x101ec>
   21284:	mov	r1, #63	; 0x3f
   21288:	mov	r0, r4
   2128c:	bl	11018 <strchr@plt>
   21290:	cmp	r0, #0
   21294:	beq	212e4 <__assert_fail@plt+0x101b8>
   21298:	mov	r0, r4
   2129c:	bl	17998 <__assert_fail@plt+0x686c>
   212a0:	cmp	r9, #0
   212a4:	mov	r1, r6
   212a8:	mov	r0, r5
   212ac:	beq	21368 <__assert_fail@plt+0x1023c>
   212b0:	bl	10e8c <strcmp@plt>
   212b4:	cmp	r0, #0
   212b8:	beq	2133c <__assert_fail@plt+0x10210>
   212bc:	mov	r1, r6
   212c0:	mov	r0, r5
   212c4:	bl	20788 <__assert_fail@plt+0xf65c>
   212c8:	cmp	r0, #0
   212cc:	bne	213b0 <__assert_fail@plt+0x10284>
   212d0:	mov	sl, r0
   212d4:	mov	r7, r9
   212d8:	mov	r8, r0
   212dc:	mov	r4, r9
   212e0:	b	21104 <__assert_fail@plt+0xffd8>
   212e4:	mov	r1, r6
   212e8:	mov	r0, r5
   212ec:	bl	10e8c <strcmp@plt>
   212f0:	cmp	r9, #0
   212f4:	beq	2137c <__assert_fail@plt+0x10250>
   212f8:	cmp	r0, #0
   212fc:	bne	21388 <__assert_fail@plt+0x1025c>
   21300:	cmp	r9, r4
   21304:	beq	2133c <__assert_fail@plt+0x10210>
   21308:	mov	r0, r4
   2130c:	mov	r5, r9
   21310:	bl	17998 <__assert_fail@plt+0x686c>
   21314:	b	21140 <__assert_fail@plt+0x10014>
   21318:	mov	r1, r6
   2131c:	mov	r0, r5
   21320:	bl	10e8c <strcmp@plt>
   21324:	cmp	r9, #0
   21328:	bne	212b4 <__assert_fail@plt+0x10188>
   2132c:	mov	sl, r9
   21330:	mov	r8, r9
   21334:	mov	r4, r6
   21338:	b	210e4 <__assert_fail@plt+0xffb8>
   2133c:	mov	r5, r9
   21340:	b	21140 <__assert_fail@plt+0x10014>
   21344:	mov	r1, r6
   21348:	mov	r0, r5
   2134c:	bl	20788 <__assert_fail@plt+0xf65c>
   21350:	cmp	r0, #0
   21354:	bne	21140 <__assert_fail@plt+0x10014>
   21358:	mov	r8, r4
   2135c:	mov	r7, r4
   21360:	mov	r4, r6
   21364:	b	2118c <__assert_fail@plt+0x10060>
   21368:	bl	10e8c <strcmp@plt>
   2136c:	mov	sl, r9
   21370:	mov	r8, r9
   21374:	mov	r4, r6
   21378:	b	210e4 <__assert_fail@plt+0xffb8>
   2137c:	mov	sl, r4
   21380:	mov	r8, r4
   21384:	b	210e4 <__assert_fail@plt+0xffb8>
   21388:	mov	r1, r6
   2138c:	mov	r0, r5
   21390:	bl	20788 <__assert_fail@plt+0xf65c>
   21394:	cmp	r0, #0
   21398:	bne	213bc <__assert_fail@plt+0x10290>
   2139c:	mov	sl, r4
   213a0:	mov	r8, r4
   213a4:	mov	r7, r9
   213a8:	mov	r4, r9
   213ac:	b	21104 <__assert_fail@plt+0xffd8>
   213b0:	mov	r7, r9
   213b4:	mov	r8, #0
   213b8:	b	21120 <__assert_fail@plt+0xfff4>
   213bc:	mov	r8, r4
   213c0:	mov	r7, r9
   213c4:	b	21128 <__assert_fail@plt+0xfffc>
   213c8:	strd	r4, [sp, #-16]!
   213cc:	mov	r4, #0
   213d0:	mov	r5, #0
   213d4:	cmp	r1, #10
   213d8:	str	r6, [sp, #8]
   213dc:	strd	r4, [r0]
   213e0:	strd	r4, [r0, #8]
   213e4:	str	lr, [sp, #12]
   213e8:	strd	r4, [r0, #16]
   213ec:	strd	r4, [r0, #24]
   213f0:	strd	r4, [r0, #32]
   213f4:	strd	r4, [r0, #40]	; 0x28
   213f8:	beq	21410 <__assert_fail@plt+0x102e4>
   213fc:	ldrd	r4, [sp]
   21400:	str	r1, [r0]
   21404:	ldr	r6, [sp, #8]
   21408:	add	sp, sp, #12
   2140c:	pop	{pc}		; (ldr pc, [sp], #4)
   21410:	bl	11120 <abort@plt>
   21414:	mov	r2, #5
   21418:	strd	r4, [sp, #-16]!
   2141c:	mov	r5, r0
   21420:	str	r6, [sp, #8]
   21424:	mov	r6, r1
   21428:	mov	r1, r0
   2142c:	mov	r0, #0
   21430:	str	lr, [sp, #12]
   21434:	bl	10f04 <dcgettext@plt>
   21438:	cmp	r5, r0
   2143c:	mov	r4, r0
   21440:	beq	21458 <__assert_fail@plt+0x1032c>
   21444:	mov	r0, r4
   21448:	ldrd	r4, [sp]
   2144c:	ldr	r6, [sp, #8]
   21450:	add	sp, sp, #12
   21454:	pop	{pc}		; (ldr pc, [sp], #4)
   21458:	bl	24e3c <__assert_fail@plt+0x13d10>
   2145c:	ldrb	r3, [r0]
   21460:	bic	r3, r3, #32
   21464:	cmp	r3, #85	; 0x55
   21468:	bne	214d0 <__assert_fail@plt+0x103a4>
   2146c:	ldrb	r3, [r0, #1]
   21470:	bic	r3, r3, #32
   21474:	cmp	r3, #84	; 0x54
   21478:	bne	21550 <__assert_fail@plt+0x10424>
   2147c:	ldrb	r3, [r0, #2]
   21480:	bic	r3, r3, #32
   21484:	cmp	r3, #70	; 0x46
   21488:	bne	21550 <__assert_fail@plt+0x10424>
   2148c:	ldrb	r3, [r0, #3]
   21490:	cmp	r3, #45	; 0x2d
   21494:	bne	21550 <__assert_fail@plt+0x10424>
   21498:	ldrb	r3, [r0, #4]
   2149c:	cmp	r3, #56	; 0x38
   214a0:	bne	21550 <__assert_fail@plt+0x10424>
   214a4:	ldrb	r3, [r0, #5]
   214a8:	cmp	r3, #0
   214ac:	bne	21550 <__assert_fail@plt+0x10424>
   214b0:	ldrb	r2, [r4]
   214b4:	movw	r3, #45484	; 0xb1ac
   214b8:	movt	r3, #2
   214bc:	movw	r4, #45496	; 0xb1b8
   214c0:	movt	r4, #2
   214c4:	cmp	r2, #96	; 0x60
   214c8:	movne	r4, r3
   214cc:	b	21444 <__assert_fail@plt+0x10318>
   214d0:	cmp	r3, #71	; 0x47
   214d4:	bne	21550 <__assert_fail@plt+0x10424>
   214d8:	ldrb	r3, [r0, #1]
   214dc:	bic	r3, r3, #32
   214e0:	cmp	r3, #66	; 0x42
   214e4:	bne	21550 <__assert_fail@plt+0x10424>
   214e8:	ldrb	r3, [r0, #2]
   214ec:	cmp	r3, #49	; 0x31
   214f0:	bne	21550 <__assert_fail@plt+0x10424>
   214f4:	ldrb	r3, [r0, #3]
   214f8:	cmp	r3, #56	; 0x38
   214fc:	bne	21550 <__assert_fail@plt+0x10424>
   21500:	ldrb	r3, [r0, #4]
   21504:	cmp	r3, #48	; 0x30
   21508:	bne	21550 <__assert_fail@plt+0x10424>
   2150c:	ldrb	r3, [r0, #5]
   21510:	cmp	r3, #51	; 0x33
   21514:	bne	21550 <__assert_fail@plt+0x10424>
   21518:	ldrb	r3, [r0, #6]
   2151c:	cmp	r3, #48	; 0x30
   21520:	bne	21550 <__assert_fail@plt+0x10424>
   21524:	ldrb	r3, [r0, #7]
   21528:	cmp	r3, #0
   2152c:	bne	21550 <__assert_fail@plt+0x10424>
   21530:	ldrb	r2, [r4]
   21534:	movw	r3, #45488	; 0xb1b0
   21538:	movt	r3, #2
   2153c:	movw	r4, #45492	; 0xb1b4
   21540:	movt	r4, #2
   21544:	cmp	r2, #96	; 0x60
   21548:	movne	r4, r3
   2154c:	b	21444 <__assert_fail@plt+0x10318>
   21550:	movw	r3, #45500	; 0xb1bc
   21554:	movt	r3, #2
   21558:	cmp	r6, #9
   2155c:	movw	r4, #45480	; 0xb1a8
   21560:	movt	r4, #2
   21564:	movne	r4, r3
   21568:	b	21444 <__assert_fail@plt+0x10318>
   2156c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21570:	strd	r6, [sp, #8]
   21574:	strd	r8, [sp, #16]
   21578:	strd	sl, [sp, #24]
   2157c:	mov	fp, r0
   21580:	mov	sl, r1
   21584:	str	lr, [sp, #32]
   21588:	sub	sp, sp, #116	; 0x74
   2158c:	ldr	r8, [sp, #152]	; 0x98
   21590:	str	r3, [sp, #28]
   21594:	ldr	r3, [sp, #156]	; 0x9c
   21598:	str	r2, [sp, #32]
   2159c:	and	r4, r3, #2
   215a0:	ubfx	r3, r3, #1, #1
   215a4:	str	r3, [sp, #44]	; 0x2c
   215a8:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   215ac:	str	r0, [sp, #64]	; 0x40
   215b0:	cmp	r8, #10
   215b4:	ldrls	pc, [pc, r8, lsl #2]
   215b8:	b	22d28 <__assert_fail@plt+0x11bfc>
   215bc:	andeq	r1, r2, r0, asr #19
   215c0:	andeq	r1, r2, ip, asr sl
   215c4:	andeq	r2, r2, r8, lsr r0
   215c8:	andeq	r1, r2, ip, ror sl
   215cc:	andeq	r1, r2, r4, lsr #18
   215d0:	andeq	r1, r2, r0, ror r9
   215d4:	strdeq	r1, [r2], -r0
   215d8:	andeq	r1, r2, ip, lsr #20
   215dc:	andeq	r1, r2, r8, ror #11
   215e0:	andeq	r1, r2, r8, ror #11
   215e4:	andeq	r1, r2, r8, ror #11
   215e8:	cmp	r8, #10
   215ec:	beq	21618 <__assert_fail@plt+0x104ec>
   215f0:	mov	r1, r8
   215f4:	movw	r0, #45504	; 0xb1c0
   215f8:	movt	r0, #2
   215fc:	bl	21414 <__assert_fail@plt+0x102e8>
   21600:	mov	r1, r8
   21604:	str	r0, [sp, #164]	; 0xa4
   21608:	movw	r0, #45500	; 0xb1bc
   2160c:	movt	r0, #2
   21610:	bl	21414 <__assert_fail@plt+0x102e8>
   21614:	str	r0, [sp, #168]	; 0xa8
   21618:	cmp	r4, #0
   2161c:	movne	r4, #0
   21620:	beq	22a04 <__assert_fail@plt+0x118d8>
   21624:	mov	r3, #1
   21628:	mov	r5, #0
   2162c:	ldr	r0, [sp, #168]	; 0xa8
   21630:	str	r3, [sp, #36]	; 0x24
   21634:	str	r3, [sp, #40]	; 0x28
   21638:	str	r5, [sp, #68]	; 0x44
   2163c:	bl	1100c <strlen@plt>
   21640:	ldr	r3, [sp, #168]	; 0xa8
   21644:	str	r5, [sp, #48]	; 0x30
   21648:	str	r0, [sp, #56]	; 0x38
   2164c:	str	r3, [sp, #60]	; 0x3c
   21650:	str	r5, [sp, #72]	; 0x48
   21654:	str	r8, [sp, #152]	; 0x98
   21658:	mov	r8, fp
   2165c:	mov	r9, #0
   21660:	ldr	fp, [sp, #152]	; 0x98
   21664:	ldr	r3, [sp, #28]
   21668:	cmn	r3, #1
   2166c:	beq	21bcc <__assert_fail@plt+0x10aa0>
   21670:	ldr	r3, [sp, #28]
   21674:	subs	r6, r3, r9
   21678:	movne	r6, #1
   2167c:	cmp	r6, #0
   21680:	beq	21be4 <__assert_fail@plt+0x10ab8>
   21684:	ldr	r0, [sp, #32]
   21688:	ldr	r7, [sp, #40]	; 0x28
   2168c:	add	r3, r0, r9
   21690:	cmp	fp, #2
   21694:	moveq	r7, #0
   21698:	andne	r7, r7, #1
   2169c:	str	r3, [sp, #52]	; 0x34
   216a0:	cmp	r7, #0
   216a4:	beq	22080 <__assert_fail@plt+0x10f54>
   216a8:	ldr	r2, [sp, #56]	; 0x38
   216ac:	cmp	r2, #0
   216b0:	beq	2231c <__assert_fail@plt+0x111f0>
   216b4:	ldr	r1, [sp, #28]
   216b8:	cmp	r2, #1
   216bc:	mov	r3, r2
   216c0:	movls	r3, #0
   216c4:	movhi	r3, #1
   216c8:	add	r5, r9, r2
   216cc:	cmn	r1, #1
   216d0:	movne	r3, #0
   216d4:	cmp	r3, #0
   216d8:	beq	216e4 <__assert_fail@plt+0x105b8>
   216dc:	bl	1100c <strlen@plt>
   216e0:	str	r0, [sp, #28]
   216e4:	ldr	r3, [sp, #28]
   216e8:	cmp	r5, r3
   216ec:	bhi	2231c <__assert_fail@plt+0x111f0>
   216f0:	ldr	r0, [sp, #52]	; 0x34
   216f4:	ldr	r2, [sp, #56]	; 0x38
   216f8:	ldr	r1, [sp, #60]	; 0x3c
   216fc:	bl	10eec <memcmp@plt>
   21700:	cmp	r0, #0
   21704:	bne	2231c <__assert_fail@plt+0x111f0>
   21708:	ldr	r3, [sp, #44]	; 0x2c
   2170c:	cmp	r3, #0
   21710:	bne	22c4c <__assert_fail@plt+0x11b20>
   21714:	ldr	r3, [sp, #52]	; 0x34
   21718:	ldrb	r5, [r3]
   2171c:	cmp	r5, #126	; 0x7e
   21720:	ldrls	pc, [pc, r5, lsl #2]
   21724:	b	21fdc <__assert_fail@plt+0x10eb0>
   21728:	andeq	r1, r2, r0, ror #29
   2172c:	ldrdeq	r1, [r2], -ip
   21730:	ldrdeq	r1, [r2], -ip
   21734:	ldrdeq	r1, [r2], -ip
   21738:	ldrdeq	r1, [r2], -ip
   2173c:	ldrdeq	r1, [r2], -ip
   21740:	ldrdeq	r1, [r2], -ip
   21744:			; <UNDEFINED> instruction: 0x00021eb4
   21748:	andeq	r1, r2, ip, lsr #29
   2174c:	strdeq	r1, [r2], -r4
   21750:	andeq	r1, r2, r0, lsr #29
   21754:	andeq	r1, r2, ip, ror #27
   21758:	andeq	r1, r2, ip, ror lr
   2175c:	andeq	r1, r2, r8, asr #29
   21760:	ldrdeq	r1, [r2], -ip
   21764:	ldrdeq	r1, [r2], -ip
   21768:	ldrdeq	r1, [r2], -ip
   2176c:	ldrdeq	r1, [r2], -ip
   21770:	ldrdeq	r1, [r2], -ip
   21774:	ldrdeq	r1, [r2], -ip
   21778:	ldrdeq	r1, [r2], -ip
   2177c:	ldrdeq	r1, [r2], -ip
   21780:	ldrdeq	r1, [r2], -ip
   21784:	ldrdeq	r1, [r2], -ip
   21788:	ldrdeq	r1, [r2], -ip
   2178c:	ldrdeq	r1, [r2], -ip
   21790:	ldrdeq	r1, [r2], -ip
   21794:	ldrdeq	r1, [r2], -ip
   21798:	ldrdeq	r1, [r2], -ip
   2179c:	ldrdeq	r1, [r2], -ip
   217a0:	ldrdeq	r1, [r2], -ip
   217a4:	ldrdeq	r1, [r2], -ip
   217a8:			; <UNDEFINED> instruction: 0x00021fb8
   217ac:	andeq	r1, r2, r0, asr #29
   217b0:	andeq	r1, r2, r0, asr #29
   217b4:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   217b8:	andeq	r1, r2, r0, asr #29
   217bc:	ldrdeq	r1, [r2], -r0
   217c0:	andeq	r1, r2, r0, asr #29
   217c4:	andeq	r1, r2, ip, lsl sp
   217c8:	andeq	r1, r2, r0, asr #29
   217cc:	andeq	r1, r2, r0, asr #29
   217d0:	andeq	r1, r2, r0, asr #29
   217d4:	ldrdeq	r1, [r2], -r0
   217d8:	ldrdeq	r1, [r2], -r0
   217dc:	ldrdeq	r1, [r2], -r0
   217e0:	ldrdeq	r1, [r2], -r0
   217e4:	ldrdeq	r1, [r2], -r0
   217e8:	ldrdeq	r1, [r2], -r0
   217ec:	ldrdeq	r1, [r2], -r0
   217f0:	ldrdeq	r1, [r2], -r0
   217f4:	ldrdeq	r1, [r2], -r0
   217f8:	ldrdeq	r1, [r2], -r0
   217fc:	ldrdeq	r1, [r2], -r0
   21800:	ldrdeq	r1, [r2], -r0
   21804:	ldrdeq	r1, [r2], -r0
   21808:	ldrdeq	r1, [r2], -r0
   2180c:	ldrdeq	r1, [r2], -r0
   21810:	ldrdeq	r1, [r2], -r0
   21814:	andeq	r1, r2, r0, asr #29
   21818:	andeq	r1, r2, r0, asr #29
   2181c:	andeq	r1, r2, r0, asr #29
   21820:	andeq	r1, r2, r0, asr #29
   21824:	strdeq	r1, [r2], -r0
   21828:	ldrdeq	r1, [r2], -ip
   2182c:	ldrdeq	r1, [r2], -r0
   21830:	ldrdeq	r1, [r2], -r0
   21834:	ldrdeq	r1, [r2], -r0
   21838:	ldrdeq	r1, [r2], -r0
   2183c:	ldrdeq	r1, [r2], -r0
   21840:	ldrdeq	r1, [r2], -r0
   21844:	ldrdeq	r1, [r2], -r0
   21848:	ldrdeq	r1, [r2], -r0
   2184c:	ldrdeq	r1, [r2], -r0
   21850:	ldrdeq	r1, [r2], -r0
   21854:	ldrdeq	r1, [r2], -r0
   21858:	ldrdeq	r1, [r2], -r0
   2185c:	ldrdeq	r1, [r2], -r0
   21860:	ldrdeq	r1, [r2], -r0
   21864:	ldrdeq	r1, [r2], -r0
   21868:	ldrdeq	r1, [r2], -r0
   2186c:	ldrdeq	r1, [r2], -r0
   21870:	ldrdeq	r1, [r2], -r0
   21874:	ldrdeq	r1, [r2], -r0
   21878:	ldrdeq	r1, [r2], -r0
   2187c:	ldrdeq	r1, [r2], -r0
   21880:	ldrdeq	r1, [r2], -r0
   21884:	ldrdeq	r1, [r2], -r0
   21888:	ldrdeq	r1, [r2], -r0
   2188c:	ldrdeq	r1, [r2], -r0
   21890:	ldrdeq	r1, [r2], -r0
   21894:	andeq	r1, r2, r0, asr #29
   21898:	muleq	r2, r8, ip
   2189c:	ldrdeq	r1, [r2], -r0
   218a0:	andeq	r1, r2, r0, asr #29
   218a4:	ldrdeq	r1, [r2], -r0
   218a8:	andeq	r1, r2, r0, asr #29
   218ac:	ldrdeq	r1, [r2], -r0
   218b0:	ldrdeq	r1, [r2], -r0
   218b4:	ldrdeq	r1, [r2], -r0
   218b8:	ldrdeq	r1, [r2], -r0
   218bc:	ldrdeq	r1, [r2], -r0
   218c0:	ldrdeq	r1, [r2], -r0
   218c4:	ldrdeq	r1, [r2], -r0
   218c8:	ldrdeq	r1, [r2], -r0
   218cc:	ldrdeq	r1, [r2], -r0
   218d0:	ldrdeq	r1, [r2], -r0
   218d4:	ldrdeq	r1, [r2], -r0
   218d8:	ldrdeq	r1, [r2], -r0
   218dc:	ldrdeq	r1, [r2], -r0
   218e0:	ldrdeq	r1, [r2], -r0
   218e4:	ldrdeq	r1, [r2], -r0
   218e8:	ldrdeq	r1, [r2], -r0
   218ec:	ldrdeq	r1, [r2], -r0
   218f0:	ldrdeq	r1, [r2], -r0
   218f4:	ldrdeq	r1, [r2], -r0
   218f8:	ldrdeq	r1, [r2], -r0
   218fc:	ldrdeq	r1, [r2], -r0
   21900:	ldrdeq	r1, [r2], -r0
   21904:	ldrdeq	r1, [r2], -r0
   21908:	ldrdeq	r1, [r2], -r0
   2190c:	ldrdeq	r1, [r2], -r0
   21910:	ldrdeq	r1, [r2], -r0
   21914:			; <UNDEFINED> instruction: 0x00021abc
   21918:	andeq	r1, r2, r0, asr #29
   2191c:			; <UNDEFINED> instruction: 0x00021abc
   21920:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   21924:	cmp	r4, #0
   21928:	moveq	r3, #1
   2192c:	streq	r3, [sp, #40]	; 0x28
   21930:	beq	22044 <__assert_fail@plt+0x10f18>
   21934:	mov	r3, #0
   21938:	mov	r2, #1
   2193c:	mov	r4, r3
   21940:	str	r2, [sp, #36]	; 0x24
   21944:	str	r2, [sp, #44]	; 0x2c
   21948:	str	r2, [sp, #56]	; 0x38
   2194c:	str	r3, [sp, #68]	; 0x44
   21950:	movw	r3, #45500	; 0xb1bc
   21954:	movt	r3, #2
   21958:	str	r4, [sp, #40]	; 0x28
   2195c:	mov	r8, #2
   21960:	str	r4, [sp, #48]	; 0x30
   21964:	str	r3, [sp, #60]	; 0x3c
   21968:	str	r4, [sp, #72]	; 0x48
   2196c:	b	21654 <__assert_fail@plt+0x10528>
   21970:	cmp	r4, #0
   21974:	bne	22bc0 <__assert_fail@plt+0x11a94>
   21978:	cmp	sl, #0
   2197c:	beq	22980 <__assert_fail@plt+0x11854>
   21980:	mov	r3, #34	; 0x22
   21984:	mov	r1, r4
   21988:	mov	r2, #1
   2198c:	strb	r3, [fp]
   21990:	movw	r3, #45480	; 0xb1a8
   21994:	movt	r3, #2
   21998:	mov	r4, r2
   2199c:	str	r2, [sp, #36]	; 0x24
   219a0:	str	r2, [sp, #40]	; 0x28
   219a4:	str	r1, [sp, #44]	; 0x2c
   219a8:	str	r1, [sp, #48]	; 0x30
   219ac:	str	r2, [sp, #56]	; 0x38
   219b0:	str	r3, [sp, #60]	; 0x3c
   219b4:	str	r1, [sp, #68]	; 0x44
   219b8:	str	r1, [sp, #72]	; 0x48
   219bc:	b	21654 <__assert_fail@plt+0x10528>
   219c0:	mov	r3, #0
   219c4:	mov	r4, r8
   219c8:	str	r3, [sp, #40]	; 0x28
   219cc:	str	r3, [sp, #44]	; 0x2c
   219d0:	str	r3, [sp, #48]	; 0x30
   219d4:	str	r8, [sp, #56]	; 0x38
   219d8:	str	r3, [sp, #60]	; 0x3c
   219dc:	str	r3, [sp, #68]	; 0x44
   219e0:	mov	r3, #1
   219e4:	str	r3, [sp, #36]	; 0x24
   219e8:	str	r8, [sp, #72]	; 0x48
   219ec:	b	21654 <__assert_fail@plt+0x10528>
   219f0:	mov	r3, #1
   219f4:	mov	r2, #0
   219f8:	mov	r4, r2
   219fc:	mov	r8, #5
   21a00:	str	r3, [sp, #36]	; 0x24
   21a04:	str	r3, [sp, #40]	; 0x28
   21a08:	str	r3, [sp, #44]	; 0x2c
   21a0c:	str	r2, [sp, #48]	; 0x30
   21a10:	str	r3, [sp, #56]	; 0x38
   21a14:	movw	r3, #45480	; 0xb1a8
   21a18:	movt	r3, #2
   21a1c:	str	r3, [sp, #60]	; 0x3c
   21a20:	str	r2, [sp, #68]	; 0x44
   21a24:	str	r2, [sp, #72]	; 0x48
   21a28:	b	21654 <__assert_fail@plt+0x10528>
   21a2c:	mov	r3, #0
   21a30:	mov	r2, #1
   21a34:	mov	r4, r3
   21a38:	str	r2, [sp, #36]	; 0x24
   21a3c:	str	r2, [sp, #40]	; 0x28
   21a40:	str	r3, [sp, #44]	; 0x2c
   21a44:	str	r3, [sp, #48]	; 0x30
   21a48:	str	r3, [sp, #56]	; 0x38
   21a4c:	str	r3, [sp, #60]	; 0x3c
   21a50:	str	r3, [sp, #68]	; 0x44
   21a54:	str	r3, [sp, #72]	; 0x48
   21a58:	b	21654 <__assert_fail@plt+0x10528>
   21a5c:	mov	r2, #1
   21a60:	mov	r3, #0
   21a64:	mov	r4, r3
   21a68:	str	r2, [sp, #36]	; 0x24
   21a6c:	str	r2, [sp, #44]	; 0x2c
   21a70:	str	r8, [sp, #56]	; 0x38
   21a74:	str	r3, [sp, #68]	; 0x44
   21a78:	b	21950 <__assert_fail@plt+0x10824>
   21a7c:	mov	r3, #1
   21a80:	mov	r2, #0
   21a84:	mov	r4, r2
   21a88:	mov	r8, #2
   21a8c:	str	r3, [sp, #36]	; 0x24
   21a90:	str	r3, [sp, #40]	; 0x28
   21a94:	str	r3, [sp, #44]	; 0x2c
   21a98:	str	r2, [sp, #48]	; 0x30
   21a9c:	str	r3, [sp, #56]	; 0x38
   21aa0:	movw	r3, #45500	; 0xb1bc
   21aa4:	movt	r3, #2
   21aa8:	str	r3, [sp, #60]	; 0x3c
   21aac:	str	r2, [sp, #68]	; 0x44
   21ab0:	str	r2, [sp, #72]	; 0x48
   21ab4:	b	21654 <__assert_fail@plt+0x10528>
   21ab8:	mov	r7, #0
   21abc:	ldr	r3, [sp, #28]
   21ac0:	cmn	r3, #1
   21ac4:	beq	2259c <__assert_fail@plt+0x11470>
   21ac8:	ldr	r3, [sp, #28]
   21acc:	subs	r2, r3, #1
   21ad0:	movne	r2, #1
   21ad4:	sub	r3, fp, #2
   21ad8:	cmp	r2, #0
   21adc:	clz	r3, r3
   21ae0:	lsr	r3, r3, #5
   21ae4:	bne	21af0 <__assert_fail@plt+0x109c4>
   21ae8:	cmp	r9, #0
   21aec:	beq	222fc <__assert_fail@plt+0x111d0>
   21af0:	mov	r6, #0
   21af4:	ldr	r2, [sp, #40]	; 0x28
   21af8:	eor	r2, r2, #1
   21afc:	orrs	r3, r3, r2
   21b00:	bne	21cd8 <__assert_fail@plt+0x10bac>
   21b04:	ldr	r2, [sp, #160]	; 0xa0
   21b08:	cmp	r2, #0
   21b0c:	beq	21b2c <__assert_fail@plt+0x10a00>
   21b10:	ldr	r0, [sp, #160]	; 0xa0
   21b14:	ubfx	r1, r5, #5, #8
   21b18:	and	r2, r5, #31
   21b1c:	ldr	r1, [r0, r1, lsl #2]
   21b20:	lsr	r2, r1, r2
   21b24:	tst	r2, #1
   21b28:	bne	21b34 <__assert_fail@plt+0x10a08>
   21b2c:	cmp	r7, #0
   21b30:	beq	21da4 <__assert_fail@plt+0x10c78>
   21b34:	ldr	r2, [sp, #44]	; 0x2c
   21b38:	sub	r3, fp, #2
   21b3c:	clz	r3, r3
   21b40:	lsr	r3, r3, #5
   21b44:	cmp	r2, #0
   21b48:	bne	228f0 <__assert_fail@plt+0x117c4>
   21b4c:	ldr	r2, [sp, #48]	; 0x30
   21b50:	eor	r2, r2, #1
   21b54:	ands	r3, r3, r2
   21b58:	beq	21b90 <__assert_fail@plt+0x10a64>
   21b5c:	cmp	sl, r4
   21b60:	str	r3, [sp, #48]	; 0x30
   21b64:	movhi	r2, #39	; 0x27
   21b68:	strbhi	r2, [r8, r4]
   21b6c:	add	r2, r4, #1
   21b70:	cmp	sl, r2
   21b74:	movhi	r1, #36	; 0x24
   21b78:	strbhi	r1, [r8, r2]
   21b7c:	add	r2, r4, #2
   21b80:	add	r4, r4, #3
   21b84:	cmp	sl, r2
   21b88:	movhi	r1, #39	; 0x27
   21b8c:	strbhi	r1, [r8, r2]
   21b90:	cmp	r4, sl
   21b94:	add	r9, r9, #1
   21b98:	movcc	r3, #92	; 0x5c
   21b9c:	strbcc	r3, [r8, r4]
   21ba0:	add	r4, r4, #1
   21ba4:	cmp	r4, sl
   21ba8:	ldr	r3, [sp, #36]	; 0x24
   21bac:	strbcc	r5, [r8, r4]
   21bb0:	cmp	r6, #0
   21bb4:	add	r4, r4, #1
   21bb8:	moveq	r3, #0
   21bbc:	str	r3, [sp, #36]	; 0x24
   21bc0:	ldr	r3, [sp, #28]
   21bc4:	cmn	r3, #1
   21bc8:	bne	21670 <__assert_fail@plt+0x10544>
   21bcc:	ldr	r3, [sp, #32]
   21bd0:	ldrb	r6, [r3, r9]
   21bd4:	adds	r6, r6, #0
   21bd8:	movne	r6, #1
   21bdc:	cmp	r6, #0
   21be0:	bne	21684 <__assert_fail@plt+0x10558>
   21be4:	str	fp, [sp, #152]	; 0x98
   21be8:	mov	fp, r8
   21bec:	cmp	r4, #0
   21bf0:	ldr	r1, [sp, #44]	; 0x2c
   21bf4:	movne	r3, #0
   21bf8:	ldr	r8, [sp, #152]	; 0x98
   21bfc:	sub	r2, r8, #2
   21c00:	clz	r2, r2
   21c04:	lsr	r2, r2, #5
   21c08:	andeq	r3, r2, r1
   21c0c:	cmp	r3, #0
   21c10:	bne	22ccc <__assert_fail@plt+0x11ba0>
   21c14:	eor	r3, r1, #1
   21c18:	ands	r2, r2, r3
   21c1c:	beq	22bf8 <__assert_fail@plt+0x11acc>
   21c20:	ldr	r3, [sp, #68]	; 0x44
   21c24:	cmp	r3, #0
   21c28:	beq	22bfc <__assert_fail@plt+0x11ad0>
   21c2c:	ldr	r3, [sp, #36]	; 0x24
   21c30:	cmp	r3, #0
   21c34:	bne	22c88 <__assert_fail@plt+0x11b5c>
   21c38:	ldr	r3, [sp, #72]	; 0x48
   21c3c:	adds	r3, r3, #0
   21c40:	movne	r3, #1
   21c44:	cmp	sl, #0
   21c48:	movne	r3, #0
   21c4c:	cmp	r3, #0
   21c50:	ldreq	r2, [sp, #68]	; 0x44
   21c54:	beq	22bfc <__assert_fail@plt+0x11ad0>
   21c58:	ldr	r2, [sp, #72]	; 0x48
   21c5c:	str	r3, [sp, #68]	; 0x44
   21c60:	movw	r3, #45500	; 0xb1bc
   21c64:	movt	r3, #2
   21c68:	mov	r1, #39	; 0x27
   21c6c:	mov	r4, #1
   21c70:	ldr	sl, [sp, #72]	; 0x48
   21c74:	mov	r8, #2
   21c78:	str	r3, [sp, #60]	; 0x3c
   21c7c:	mov	r3, #0
   21c80:	strb	r1, [fp]
   21c84:	str	r3, [sp, #44]	; 0x2c
   21c88:	str	r4, [sp, #56]	; 0x38
   21c8c:	str	r2, [sp, #72]	; 0x48
   21c90:	b	21654 <__assert_fail@plt+0x10528>
   21c94:	mov	r7, #0
   21c98:	cmp	fp, #2
   21c9c:	beq	2257c <__assert_fail@plt+0x11450>
   21ca0:	ldr	r2, [sp, #40]	; 0x28
   21ca4:	ldr	r3, [sp, #56]	; 0x38
   21ca8:	ldr	r1, [sp, #44]	; 0x2c
   21cac:	cmp	r3, #0
   21cb0:	moveq	r3, #0
   21cb4:	andne	r3, r2, r1
   21cb8:	cmp	r3, #0
   21cbc:	moveq	r5, #92	; 0x5c
   21cc0:	moveq	r3, r5
   21cc4:	bne	22588 <__assert_fail@plt+0x1145c>
   21cc8:	ldr	r2, [sp, #40]	; 0x28
   21ccc:	cmp	r2, #0
   21cd0:	bne	229c4 <__assert_fail@plt+0x11898>
   21cd4:	mov	r6, #0
   21cd8:	ldr	r3, [sp, #44]	; 0x2c
   21cdc:	cmp	r3, #0
   21ce0:	beq	22574 <__assert_fail@plt+0x11448>
   21ce4:	mov	r3, #0
   21ce8:	b	21b04 <__assert_fail@plt+0x109d8>
   21cec:	mov	r7, #0
   21cf0:	cmp	fp, #2
   21cf4:	beq	225ec <__assert_fail@plt+0x114c0>
   21cf8:	cmp	fp, #5
   21cfc:	beq	225b0 <__assert_fail@plt+0x11484>
   21d00:	sub	r3, fp, #2
   21d04:	mov	r6, #0
   21d08:	clz	r3, r3
   21d0c:	mov	r5, #63	; 0x3f
   21d10:	lsr	r3, r3, #5
   21d14:	b	21af4 <__assert_fail@plt+0x109c8>
   21d18:	mov	r7, #0
   21d1c:	cmp	fp, #2
   21d20:	movne	r3, #0
   21d24:	movne	r5, #39	; 0x27
   21d28:	strne	r6, [sp, #68]	; 0x44
   21d2c:	bne	21af4 <__assert_fail@plt+0x109c8>
   21d30:	ldr	r3, [sp, #44]	; 0x2c
   21d34:	cmp	r3, #0
   21d38:	bne	229f4 <__assert_fail@plt+0x118c8>
   21d3c:	ldr	r3, [sp, #72]	; 0x48
   21d40:	cmp	sl, #0
   21d44:	clz	r3, r3
   21d48:	lsr	r3, r3, #5
   21d4c:	moveq	r3, #0
   21d50:	cmp	r3, #0
   21d54:	bne	22920 <__assert_fail@plt+0x117f4>
   21d58:	cmp	sl, r4
   21d5c:	movhi	r3, #39	; 0x27
   21d60:	strbhi	r3, [r8, r4]
   21d64:	add	r3, r4, #1
   21d68:	cmp	sl, r3
   21d6c:	movhi	r2, #92	; 0x5c
   21d70:	strbhi	r2, [r8, r3]
   21d74:	add	r3, r4, #2
   21d78:	cmp	sl, r3
   21d7c:	bls	21d88 <__assert_fail@plt+0x10c5c>
   21d80:	mov	r2, #39	; 0x27
   21d84:	strb	r2, [r8, r3]
   21d88:	mov	r3, #0
   21d8c:	cmp	r7, #0
   21d90:	add	r4, r4, #3
   21d94:	mov	r5, #39	; 0x27
   21d98:	str	r3, [sp, #48]	; 0x30
   21d9c:	str	r6, [sp, #68]	; 0x44
   21da0:	bne	21b34 <__assert_fail@plt+0x10a08>
   21da4:	ldr	r2, [sp, #48]	; 0x30
   21da8:	eor	r3, r3, #1
   21dac:	add	r9, r9, #1
   21db0:	and	r3, r3, r2
   21db4:	uxtb	r3, r3
   21db8:	cmp	r3, #0
   21dbc:	beq	21ba4 <__assert_fail@plt+0x10a78>
   21dc0:	cmp	sl, r4
   21dc4:	movhi	r3, #39	; 0x27
   21dc8:	strbhi	r3, [r8, r4]
   21dcc:	add	r3, r4, #1
   21dd0:	add	r4, r4, #2
   21dd4:	cmp	sl, r3
   21dd8:	movhi	r2, #39	; 0x27
   21ddc:	strbhi	r2, [r8, r3]
   21de0:	mov	r3, #0
   21de4:	str	r3, [sp, #48]	; 0x30
   21de8:	b	21ba4 <__assert_fail@plt+0x10a78>
   21dec:	mov	r3, #118	; 0x76
   21df0:	b	21cc8 <__assert_fail@plt+0x10b9c>
   21df4:	mov	r3, #116	; 0x74
   21df8:	ldr	r2, [sp, #44]	; 0x2c
   21dfc:	cmp	fp, #2
   21e00:	movne	r2, #0
   21e04:	andeq	r2, r2, #1
   21e08:	cmp	r2, #0
   21e0c:	beq	21cc8 <__assert_fail@plt+0x10b9c>
   21e10:	mov	fp, r8
   21e14:	mov	r8, #2
   21e18:	ldr	r3, [sp, #40]	; 0x28
   21e1c:	cmp	r3, #0
   21e20:	movne	r8, #4
   21e24:	mov	lr, #0
   21e28:	mov	r0, fp
   21e2c:	ldr	r2, [sp, #32]
   21e30:	ldr	r3, [sp, #156]	; 0x9c
   21e34:	ldr	r1, [sp, #164]	; 0xa4
   21e38:	bic	ip, r3, #2
   21e3c:	ldr	r3, [sp, #28]
   21e40:	stm	sp, {r8, ip, lr}
   21e44:	ldr	ip, [sp, #168]	; 0xa8
   21e48:	str	r1, [sp, #12]
   21e4c:	mov	r1, sl
   21e50:	str	ip, [sp, #16]
   21e54:	bl	2156c <__assert_fail@plt+0x10440>
   21e58:	mov	r4, r0
   21e5c:	mov	r0, r4
   21e60:	add	sp, sp, #116	; 0x74
   21e64:	ldrd	r4, [sp]
   21e68:	ldrd	r6, [sp, #8]
   21e6c:	ldrd	r8, [sp, #16]
   21e70:	ldrd	sl, [sp, #24]
   21e74:	add	sp, sp, #32
   21e78:	pop	{pc}		; (ldr pc, [sp], #4)
   21e7c:	mov	r5, #102	; 0x66
   21e80:	ldr	r2, [sp, #44]	; 0x2c
   21e84:	sub	r3, fp, #2
   21e88:	clz	r3, r3
   21e8c:	lsr	r3, r3, #5
   21e90:	cmp	r2, #0
   21e94:	bne	228f0 <__assert_fail@plt+0x117c4>
   21e98:	mov	r6, r2
   21e9c:	b	21b90 <__assert_fail@plt+0x10a64>
   21ea0:	mov	r5, #110	; 0x6e
   21ea4:	mov	r6, #0
   21ea8:	b	21b34 <__assert_fail@plt+0x10a08>
   21eac:	mov	r5, #98	; 0x62
   21eb0:	b	21e80 <__assert_fail@plt+0x10d54>
   21eb4:	mov	r5, #97	; 0x61
   21eb8:	b	21e80 <__assert_fail@plt+0x10d54>
   21ebc:	mov	r7, #0
   21ec0:	mov	r6, #0
   21ec4:	b	21ce4 <__assert_fail@plt+0x10bb8>
   21ec8:	mov	r5, #114	; 0x72
   21ecc:	b	21ea4 <__assert_fail@plt+0x10d78>
   21ed0:	ldr	r3, [sp, #44]	; 0x2c
   21ed4:	cmp	r3, #0
   21ed8:	bne	22c68 <__assert_fail@plt+0x11b3c>
   21edc:	mov	r7, r3
   21ee0:	ldr	r3, [sp, #48]	; 0x30
   21ee4:	sub	r2, fp, #2
   21ee8:	clz	r2, r2
   21eec:	lsr	r2, r2, #5
   21ef0:	eor	r3, r3, #1
   21ef4:	ands	r3, r2, r3
   21ef8:	beq	2290c <__assert_fail@plt+0x117e0>
   21efc:	cmp	sl, r4
   21f00:	movhi	r1, #39	; 0x27
   21f04:	strbhi	r1, [r8, r4]
   21f08:	add	r1, r4, #1
   21f0c:	cmp	sl, r1
   21f10:	movhi	r0, #36	; 0x24
   21f14:	strbhi	r0, [r8, r1]
   21f18:	add	r1, r4, #2
   21f1c:	cmp	sl, r1
   21f20:	movhi	r0, #39	; 0x27
   21f24:	strbhi	r0, [r8, r1]
   21f28:	add	r1, r4, #3
   21f2c:	cmp	sl, r1
   21f30:	bls	22964 <__assert_fail@plt+0x11838>
   21f34:	mov	r4, r1
   21f38:	mov	r1, #92	; 0x5c
   21f3c:	mov	r0, r4
   21f40:	str	r3, [sp, #48]	; 0x30
   21f44:	strb	r1, [r8, r4]
   21f48:	cmp	fp, #2
   21f4c:	add	r4, r4, #1
   21f50:	beq	229b4 <__assert_fail@plt+0x11888>
   21f54:	ldr	r1, [sp, #28]
   21f58:	add	r3, r9, #1
   21f5c:	cmp	r3, r1
   21f60:	bcs	21f78 <__assert_fail@plt+0x10e4c>
   21f64:	ldr	r1, [sp, #32]
   21f68:	ldrb	r3, [r1, r3]
   21f6c:	sub	r3, r3, #48	; 0x30
   21f70:	cmp	r3, #9
   21f74:	bls	229cc <__assert_fail@plt+0x118a0>
   21f78:	mov	r5, #48	; 0x30
   21f7c:	ldr	r3, [sp, #40]	; 0x28
   21f80:	eor	r3, r3, #1
   21f84:	orrs	r2, r2, r3
   21f88:	mov	r3, r6
   21f8c:	moveq	r6, r2
   21f90:	beq	21b04 <__assert_fail@plt+0x109d8>
   21f94:	mov	r6, #0
   21f98:	b	21b2c <__assert_fail@plt+0x10a00>
   21f9c:	cmp	r9, #0
   21fa0:	mov	r2, r7
   21fa4:	bne	22544 <__assert_fail@plt+0x11418>
   21fa8:	mov	r6, r7
   21fac:	mov	r3, r9
   21fb0:	mov	r7, r2
   21fb4:	b	21af4 <__assert_fail@plt+0x109c8>
   21fb8:	mov	r2, r7
   21fbc:	mov	r6, r7
   21fc0:	mov	r3, #0
   21fc4:	mov	r7, r2
   21fc8:	mov	r5, #32
   21fcc:	b	21af4 <__assert_fail@plt+0x109c8>
   21fd0:	mov	r6, r7
   21fd4:	b	21ce4 <__assert_fail@plt+0x10bb8>
   21fd8:	mov	r7, #0
   21fdc:	ldr	r3, [sp, #64]	; 0x40
   21fe0:	cmp	r3, #1
   21fe4:	bne	22604 <__assert_fail@plt+0x114d8>
   21fe8:	bl	10fe8 <__ctype_b_loc@plt>
   21fec:	ldr	r2, [r0]
   21ff0:	sxth	r3, r5
   21ff4:	lsl	r3, r3, #1
   21ff8:	ldr	r1, [sp, #64]	; 0x40
   21ffc:	ldrh	r3, [r2, r3]
   22000:	mov	ip, r1
   22004:	and	r3, r3, #16384	; 0x4000
   22008:	cmp	r3, #0
   2200c:	ldr	r3, [sp, #40]	; 0x28
   22010:	movne	r6, #1
   22014:	moveq	r6, #0
   22018:	movne	r2, #0
   2201c:	andeq	r2, r3, #1
   22020:	cmp	r2, #0
   22024:	bne	2294c <__assert_fail@plt+0x11820>
   22028:	sub	r3, fp, #2
   2202c:	clz	r3, r3
   22030:	lsr	r3, r3, #5
   22034:	b	21af4 <__assert_fail@plt+0x109c8>
   22038:	cmp	r4, #0
   2203c:	bne	22cdc <__assert_fail@plt+0x11bb0>
   22040:	str	r4, [sp, #40]	; 0x28
   22044:	cmp	sl, #0
   22048:	bne	22d0c <__assert_fail@plt+0x11be0>
   2204c:	mov	r3, #1
   22050:	movw	r2, #45500	; 0xb1bc
   22054:	movt	r2, #2
   22058:	mov	r4, r3
   2205c:	mov	r8, #2
   22060:	str	r3, [sp, #36]	; 0x24
   22064:	str	sl, [sp, #44]	; 0x2c
   22068:	str	sl, [sp, #48]	; 0x30
   2206c:	str	r3, [sp, #56]	; 0x38
   22070:	str	r2, [sp, #60]	; 0x3c
   22074:	str	sl, [sp, #68]	; 0x44
   22078:	str	sl, [sp, #72]	; 0x48
   2207c:	b	21654 <__assert_fail@plt+0x10528>
   22080:	ldr	r3, [sp, #32]
   22084:	ldrb	r5, [r3, r9]
   22088:	cmp	r5, #126	; 0x7e
   2208c:	ldrls	pc, [pc, r5, lsl #2]
   22090:	b	21fdc <__assert_fail@plt+0x10eb0>
   22094:			; <UNDEFINED> instruction: 0x000222b8
   22098:	ldrdeq	r1, [r2], -ip
   2209c:	ldrdeq	r1, [r2], -ip
   220a0:	ldrdeq	r1, [r2], -ip
   220a4:	ldrdeq	r1, [r2], -ip
   220a8:	ldrdeq	r1, [r2], -ip
   220ac:	ldrdeq	r1, [r2], -ip
   220b0:			; <UNDEFINED> instruction: 0x000222b0
   220b4:	andeq	r2, r2, r8, lsr #5
   220b8:	strdeq	r1, [r2], -r4
   220bc:	andeq	r2, r2, r0, lsr #5
   220c0:	andeq	r1, r2, ip, ror #27
   220c4:	muleq	r2, r8, r2
   220c8:	muleq	r2, r0, r2
   220cc:	ldrdeq	r1, [r2], -ip
   220d0:	ldrdeq	r1, [r2], -ip
   220d4:	ldrdeq	r1, [r2], -ip
   220d8:	ldrdeq	r1, [r2], -ip
   220dc:	ldrdeq	r1, [r2], -ip
   220e0:	ldrdeq	r1, [r2], -ip
   220e4:	ldrdeq	r1, [r2], -ip
   220e8:	ldrdeq	r1, [r2], -ip
   220ec:	ldrdeq	r1, [r2], -ip
   220f0:	ldrdeq	r1, [r2], -ip
   220f4:	ldrdeq	r1, [r2], -ip
   220f8:	ldrdeq	r1, [r2], -ip
   220fc:	ldrdeq	r1, [r2], -ip
   22100:	ldrdeq	r1, [r2], -ip
   22104:	ldrdeq	r1, [r2], -ip
   22108:	ldrdeq	r1, [r2], -ip
   2210c:	ldrdeq	r1, [r2], -ip
   22110:	ldrdeq	r1, [r2], -ip
   22114:	andeq	r2, r2, ip, lsl #6
   22118:	andeq	r2, r2, ip, ror #5
   2211c:	andeq	r2, r2, ip, ror #5
   22120:	ldrdeq	r2, [r2], -ip
   22124:	andeq	r2, r2, ip, ror #5
   22128:	andeq	r2, r2, r8, lsr #32
   2212c:	andeq	r2, r2, ip, ror #5
   22130:	andeq	r1, r2, ip, lsl sp
   22134:	andeq	r2, r2, ip, ror #5
   22138:	andeq	r2, r2, ip, ror #5
   2213c:	andeq	r2, r2, ip, ror #5
   22140:	andeq	r2, r2, r8, lsr #32
   22144:	andeq	r2, r2, r8, lsr #32
   22148:	andeq	r2, r2, r8, lsr #32
   2214c:	andeq	r2, r2, r8, lsr #32
   22150:	andeq	r2, r2, r8, lsr #32
   22154:	andeq	r2, r2, r8, lsr #32
   22158:	andeq	r2, r2, r8, lsr #32
   2215c:	andeq	r2, r2, r8, lsr #32
   22160:	andeq	r2, r2, r8, lsr #32
   22164:	andeq	r2, r2, r8, lsr #32
   22168:	andeq	r2, r2, r8, lsr #32
   2216c:	andeq	r2, r2, r8, lsr #32
   22170:	andeq	r2, r2, r8, lsr #32
   22174:	andeq	r2, r2, r8, lsr #32
   22178:	andeq	r2, r2, r8, lsr #32
   2217c:	andeq	r2, r2, r8, lsr #32
   22180:	andeq	r2, r2, ip, ror #5
   22184:	andeq	r2, r2, ip, ror #5
   22188:	andeq	r2, r2, ip, ror #5
   2218c:	andeq	r2, r2, ip, ror #5
   22190:	strdeq	r1, [r2], -r0
   22194:	ldrdeq	r1, [r2], -ip
   22198:	andeq	r2, r2, r8, lsr #32
   2219c:	andeq	r2, r2, r8, lsr #32
   221a0:	andeq	r2, r2, r8, lsr #32
   221a4:	andeq	r2, r2, r8, lsr #32
   221a8:	andeq	r2, r2, r8, lsr #32
   221ac:	andeq	r2, r2, r8, lsr #32
   221b0:	andeq	r2, r2, r8, lsr #32
   221b4:	andeq	r2, r2, r8, lsr #32
   221b8:	andeq	r2, r2, r8, lsr #32
   221bc:	andeq	r2, r2, r8, lsr #32
   221c0:	andeq	r2, r2, r8, lsr #32
   221c4:	andeq	r2, r2, r8, lsr #32
   221c8:	andeq	r2, r2, r8, lsr #32
   221cc:	andeq	r2, r2, r8, lsr #32
   221d0:	andeq	r2, r2, r8, lsr #32
   221d4:	andeq	r2, r2, r8, lsr #32
   221d8:	andeq	r2, r2, r8, lsr #32
   221dc:	andeq	r2, r2, r8, lsr #32
   221e0:	andeq	r2, r2, r8, lsr #32
   221e4:	andeq	r2, r2, r8, lsr #32
   221e8:	andeq	r2, r2, r8, lsr #32
   221ec:	andeq	r2, r2, r8, lsr #32
   221f0:	andeq	r2, r2, r8, lsr #32
   221f4:	andeq	r2, r2, r8, lsr #32
   221f8:	andeq	r2, r2, r8, lsr #32
   221fc:	andeq	r2, r2, r8, lsr #32
   22200:	andeq	r2, r2, ip, ror #5
   22204:	muleq	r2, r8, ip
   22208:	andeq	r2, r2, r8, lsr #32
   2220c:	andeq	r2, r2, ip, ror #5
   22210:	andeq	r2, r2, r8, lsr #32
   22214:	andeq	r2, r2, ip, ror #5
   22218:	andeq	r2, r2, r8, lsr #32
   2221c:	andeq	r2, r2, r8, lsr #32
   22220:	andeq	r2, r2, r8, lsr #32
   22224:	andeq	r2, r2, r8, lsr #32
   22228:	andeq	r2, r2, r8, lsr #32
   2222c:	andeq	r2, r2, r8, lsr #32
   22230:	andeq	r2, r2, r8, lsr #32
   22234:	andeq	r2, r2, r8, lsr #32
   22238:	andeq	r2, r2, r8, lsr #32
   2223c:	andeq	r2, r2, r8, lsr #32
   22240:	andeq	r2, r2, r8, lsr #32
   22244:	andeq	r2, r2, r8, lsr #32
   22248:	andeq	r2, r2, r8, lsr #32
   2224c:	andeq	r2, r2, r8, lsr #32
   22250:	andeq	r2, r2, r8, lsr #32
   22254:	andeq	r2, r2, r8, lsr #32
   22258:	andeq	r2, r2, r8, lsr #32
   2225c:	andeq	r2, r2, r8, lsr #32
   22260:	andeq	r2, r2, r8, lsr #32
   22264:	andeq	r2, r2, r8, lsr #32
   22268:	andeq	r2, r2, r8, lsr #32
   2226c:	andeq	r2, r2, r8, lsr #32
   22270:	andeq	r2, r2, r8, lsr #32
   22274:	andeq	r2, r2, r8, lsr #32
   22278:	andeq	r2, r2, r8, lsr #32
   2227c:	andeq	r2, r2, r8, lsr #32
   22280:			; <UNDEFINED> instruction: 0x00021abc
   22284:	andeq	r2, r2, ip, ror #5
   22288:			; <UNDEFINED> instruction: 0x00021abc
   2228c:	ldrdeq	r2, [r2], -ip
   22290:	mov	r3, #114	; 0x72
   22294:	b	21df8 <__assert_fail@plt+0x10ccc>
   22298:	mov	r3, #102	; 0x66
   2229c:	b	21cc8 <__assert_fail@plt+0x10b9c>
   222a0:	mov	r3, #110	; 0x6e
   222a4:	b	21df8 <__assert_fail@plt+0x10ccc>
   222a8:	mov	r3, #98	; 0x62
   222ac:	b	21cc8 <__assert_fail@plt+0x10b9c>
   222b0:	mov	r3, #97	; 0x61
   222b4:	b	21cc8 <__assert_fail@plt+0x10b9c>
   222b8:	ldr	r3, [sp, #40]	; 0x28
   222bc:	cmp	r3, #0
   222c0:	bne	21ed0 <__assert_fail@plt+0x10da4>
   222c4:	ldr	r3, [sp, #156]	; 0x9c
   222c8:	tst	r3, #1
   222cc:	addne	r9, r9, #1
   222d0:	bne	21664 <__assert_fail@plt+0x10538>
   222d4:	ldr	r7, [sp, #40]	; 0x28
   222d8:	b	21cd4 <__assert_fail@plt+0x10ba8>
   222dc:	sub	r3, fp, #2
   222e0:	clz	r3, r3
   222e4:	lsr	r3, r3, #5
   222e8:	b	21ae8 <__assert_fail@plt+0x109bc>
   222ec:	sub	r3, fp, #2
   222f0:	mov	r6, #0
   222f4:	clz	r3, r3
   222f8:	lsr	r3, r3, #5
   222fc:	ldr	r2, [sp, #44]	; 0x2c
   22300:	tst	r2, r3
   22304:	beq	21af4 <__assert_fail@plt+0x109c8>
   22308:	b	21e10 <__assert_fail@plt+0x10ce4>
   2230c:	sub	r3, fp, #2
   22310:	clz	r3, r3
   22314:	lsr	r3, r3, #5
   22318:	b	222fc <__assert_fail@plt+0x111d0>
   2231c:	ldr	r3, [sp, #52]	; 0x34
   22320:	ldrb	r5, [r3]
   22324:	cmp	r5, #126	; 0x7e
   22328:	ldrls	pc, [pc, r5, lsl #2]
   2232c:	b	21fd8 <__assert_fail@plt+0x10eac>
   22330:	ldrdeq	r1, [r2], -r0
   22334:	ldrdeq	r1, [r2], -r8
   22338:	ldrdeq	r1, [r2], -r8
   2233c:	ldrdeq	r1, [r2], -r8
   22340:	ldrdeq	r1, [r2], -r8
   22344:	ldrdeq	r1, [r2], -r8
   22348:	ldrdeq	r1, [r2], -r8
   2234c:			; <UNDEFINED> instruction: 0x00021eb4
   22350:	andeq	r1, r2, ip, lsr #29
   22354:	andeq	r2, r2, r8, ror #10
   22358:	andeq	r1, r2, r0, lsr #29
   2235c:	andeq	r2, r2, ip, asr r5
   22360:	andeq	r1, r2, ip, ror lr
   22364:	andeq	r1, r2, r8, asr #29
   22368:	ldrdeq	r1, [r2], -r8
   2236c:	ldrdeq	r1, [r2], -r8
   22370:	ldrdeq	r1, [r2], -r8
   22374:	ldrdeq	r1, [r2], -r8
   22378:	ldrdeq	r1, [r2], -r8
   2237c:	ldrdeq	r1, [r2], -r8
   22380:	ldrdeq	r1, [r2], -r8
   22384:	ldrdeq	r1, [r2], -r8
   22388:	ldrdeq	r1, [r2], -r8
   2238c:	ldrdeq	r1, [r2], -r8
   22390:	ldrdeq	r1, [r2], -r8
   22394:	ldrdeq	r1, [r2], -r8
   22398:	ldrdeq	r1, [r2], -r8
   2239c:	ldrdeq	r1, [r2], -r8
   223a0:	ldrdeq	r1, [r2], -r8
   223a4:	ldrdeq	r1, [r2], -r8
   223a8:	ldrdeq	r1, [r2], -r8
   223ac:	ldrdeq	r1, [r2], -r8
   223b0:	andeq	r2, r2, r4, asr r5
   223b4:			; <UNDEFINED> instruction: 0x00021ebc
   223b8:			; <UNDEFINED> instruction: 0x00021ebc
   223bc:	andeq	r2, r2, r8, lsr r5
   223c0:			; <UNDEFINED> instruction: 0x00021ebc
   223c4:	andeq	r2, r2, ip, lsr #10
   223c8:			; <UNDEFINED> instruction: 0x00021ebc
   223cc:	andeq	r1, r2, r8, lsl sp
   223d0:			; <UNDEFINED> instruction: 0x00021ebc
   223d4:			; <UNDEFINED> instruction: 0x00021ebc
   223d8:			; <UNDEFINED> instruction: 0x00021ebc
   223dc:	andeq	r2, r2, ip, lsr #10
   223e0:	andeq	r2, r2, ip, lsr #10
   223e4:	andeq	r2, r2, ip, lsr #10
   223e8:	andeq	r2, r2, ip, lsr #10
   223ec:	andeq	r2, r2, ip, lsr #10
   223f0:	andeq	r2, r2, ip, lsr #10
   223f4:	andeq	r2, r2, ip, lsr #10
   223f8:	andeq	r2, r2, ip, lsr #10
   223fc:	andeq	r2, r2, ip, lsr #10
   22400:	andeq	r2, r2, ip, lsr #10
   22404:	andeq	r2, r2, ip, lsr #10
   22408:	andeq	r2, r2, ip, lsr #10
   2240c:	andeq	r2, r2, ip, lsr #10
   22410:	andeq	r2, r2, ip, lsr #10
   22414:	andeq	r2, r2, ip, lsr #10
   22418:	andeq	r2, r2, ip, lsr #10
   2241c:			; <UNDEFINED> instruction: 0x00021ebc
   22420:			; <UNDEFINED> instruction: 0x00021ebc
   22424:			; <UNDEFINED> instruction: 0x00021ebc
   22428:			; <UNDEFINED> instruction: 0x00021ebc
   2242c:	andeq	r1, r2, ip, ror #25
   22430:	ldrdeq	r1, [r2], -r8
   22434:	andeq	r2, r2, ip, lsr #10
   22438:	andeq	r2, r2, ip, lsr #10
   2243c:	andeq	r2, r2, ip, lsr #10
   22440:	andeq	r2, r2, ip, lsr #10
   22444:	andeq	r2, r2, ip, lsr #10
   22448:	andeq	r2, r2, ip, lsr #10
   2244c:	andeq	r2, r2, ip, lsr #10
   22450:	andeq	r2, r2, ip, lsr #10
   22454:	andeq	r2, r2, ip, lsr #10
   22458:	andeq	r2, r2, ip, lsr #10
   2245c:	andeq	r2, r2, ip, lsr #10
   22460:	andeq	r2, r2, ip, lsr #10
   22464:	andeq	r2, r2, ip, lsr #10
   22468:	andeq	r2, r2, ip, lsr #10
   2246c:	andeq	r2, r2, ip, lsr #10
   22470:	andeq	r2, r2, ip, lsr #10
   22474:	andeq	r2, r2, ip, lsr #10
   22478:	andeq	r2, r2, ip, lsr #10
   2247c:	andeq	r2, r2, ip, lsr #10
   22480:	andeq	r2, r2, ip, lsr #10
   22484:	andeq	r2, r2, ip, lsr #10
   22488:	andeq	r2, r2, ip, lsr #10
   2248c:	andeq	r2, r2, ip, lsr #10
   22490:	andeq	r2, r2, ip, lsr #10
   22494:	andeq	r2, r2, ip, lsr #10
   22498:	andeq	r2, r2, ip, lsr #10
   2249c:			; <UNDEFINED> instruction: 0x00021ebc
   224a0:	muleq	r2, r4, ip
   224a4:	andeq	r2, r2, ip, lsr #10
   224a8:			; <UNDEFINED> instruction: 0x00021ebc
   224ac:	andeq	r2, r2, ip, lsr #10
   224b0:			; <UNDEFINED> instruction: 0x00021ebc
   224b4:	andeq	r2, r2, ip, lsr #10
   224b8:	andeq	r2, r2, ip, lsr #10
   224bc:	andeq	r2, r2, ip, lsr #10
   224c0:	andeq	r2, r2, ip, lsr #10
   224c4:	andeq	r2, r2, ip, lsr #10
   224c8:	andeq	r2, r2, ip, lsr #10
   224cc:	andeq	r2, r2, ip, lsr #10
   224d0:	andeq	r2, r2, ip, lsr #10
   224d4:	andeq	r2, r2, ip, lsr #10
   224d8:	andeq	r2, r2, ip, lsr #10
   224dc:	andeq	r2, r2, ip, lsr #10
   224e0:	andeq	r2, r2, ip, lsr #10
   224e4:	andeq	r2, r2, ip, lsr #10
   224e8:	andeq	r2, r2, ip, lsr #10
   224ec:	andeq	r2, r2, ip, lsr #10
   224f0:	andeq	r2, r2, ip, lsr #10
   224f4:	andeq	r2, r2, ip, lsr #10
   224f8:	andeq	r2, r2, ip, lsr #10
   224fc:	andeq	r2, r2, ip, lsr #10
   22500:	andeq	r2, r2, ip, lsr #10
   22504:	andeq	r2, r2, ip, lsr #10
   22508:	andeq	r2, r2, ip, lsr #10
   2250c:	andeq	r2, r2, ip, lsr #10
   22510:	andeq	r2, r2, ip, lsr #10
   22514:	andeq	r2, r2, ip, lsr #10
   22518:	andeq	r2, r2, ip, lsr #10
   2251c:			; <UNDEFINED> instruction: 0x00021ab8
   22520:			; <UNDEFINED> instruction: 0x00021ebc
   22524:			; <UNDEFINED> instruction: 0x00021ab8
   22528:	andeq	r2, r2, r8, lsr r5
   2252c:	mov	r6, r7
   22530:	mov	r7, #0
   22534:	b	21ce4 <__assert_fail@plt+0x10bb8>
   22538:	cmp	r9, #0
   2253c:	mov	r2, #0
   22540:	beq	21fa8 <__assert_fail@plt+0x10e7c>
   22544:	mov	r6, #0
   22548:	mov	r7, r2
   2254c:	mov	r3, r6
   22550:	b	21b04 <__assert_fail@plt+0x109d8>
   22554:	mov	r2, #0
   22558:	b	21fbc <__assert_fail@plt+0x10e90>
   2255c:	mov	r7, #0
   22560:	mov	r3, #118	; 0x76
   22564:	b	21cc8 <__assert_fail@plt+0x10b9c>
   22568:	mov	r7, #0
   2256c:	mov	r3, #116	; 0x74
   22570:	b	21df8 <__assert_fail@plt+0x10ccc>
   22574:	ldr	r3, [sp, #44]	; 0x2c
   22578:	b	21b2c <__assert_fail@plt+0x10a00>
   2257c:	ldr	r3, [sp, #44]	; 0x2c
   22580:	cmp	r3, #0
   22584:	bne	229f4 <__assert_fail@plt+0x118c8>
   22588:	add	r9, r9, #1
   2258c:	mov	r6, #0
   22590:	ldr	r3, [sp, #48]	; 0x30
   22594:	mov	r5, #92	; 0x5c
   22598:	b	21db8 <__assert_fail@plt+0x10c8c>
   2259c:	ldr	r3, [sp, #32]
   225a0:	ldrb	r2, [r3, #1]
   225a4:	adds	r2, r2, #0
   225a8:	movne	r2, #1
   225ac:	b	21ad4 <__assert_fail@plt+0x109a8>
   225b0:	ldr	r3, [sp, #156]	; 0x9c
   225b4:	ands	r3, r3, #4
   225b8:	beq	225e0 <__assert_fail@plt+0x114b4>
   225bc:	ldr	r2, [sp, #28]
   225c0:	add	r3, r9, #2
   225c4:	cmp	r3, r2
   225c8:	bcs	225dc <__assert_fail@plt+0x114b0>
   225cc:	ldr	r2, [sp, #52]	; 0x34
   225d0:	ldrb	r5, [r2, #1]
   225d4:	cmp	r5, #63	; 0x3f
   225d8:	beq	22a58 <__assert_fail@plt+0x1192c>
   225dc:	mov	r3, #0
   225e0:	mov	r5, #63	; 0x3f
   225e4:	mov	r6, r3
   225e8:	b	21af4 <__assert_fail@plt+0x109c8>
   225ec:	ldr	r3, [sp, #44]	; 0x2c
   225f0:	cmp	r3, #0
   225f4:	bne	229f4 <__assert_fail@plt+0x118c8>
   225f8:	mov	r6, r3
   225fc:	mov	r5, #63	; 0x3f
   22600:	b	21b2c <__assert_fail@plt+0x10a00>
   22604:	ldr	r1, [sp, #28]
   22608:	mov	r2, #0
   2260c:	mov	r3, #0
   22610:	strd	r2, [sp, #104]	; 0x68
   22614:	cmn	r1, #1
   22618:	bne	22628 <__assert_fail@plt+0x114fc>
   2261c:	ldr	r0, [sp, #32]
   22620:	bl	1100c <strlen@plt>
   22624:	str	r0, [sp, #28]
   22628:	str	r8, [sp, #76]	; 0x4c
   2262c:	mov	r3, #0
   22630:	str	sl, [sp, #80]	; 0x50
   22634:	ldr	sl, [sp, #32]
   22638:	str	r5, [sp, #84]	; 0x54
   2263c:	mov	r5, r3
   22640:	ldr	r8, [sp, #44]	; 0x2c
   22644:	str	r7, [sp, #88]	; 0x58
   22648:	str	r4, [sp, #92]	; 0x5c
   2264c:	ldr	r2, [sp, #28]
   22650:	add	r4, r9, r5
   22654:	add	r3, sp, #104	; 0x68
   22658:	add	r7, sl, r4
   2265c:	add	r0, sp, #100	; 0x64
   22660:	mov	r1, r7
   22664:	sub	r2, r2, r4
   22668:	bl	24f48 <__assert_fail@plt+0x13e1c>
   2266c:	subs	r1, r0, #0
   22670:	beq	226bc <__assert_fail@plt+0x11590>
   22674:	cmn	r1, #1
   22678:	beq	22a34 <__assert_fail@plt+0x11908>
   2267c:	cmn	r1, #2
   22680:	beq	22b54 <__assert_fail@plt+0x11a28>
   22684:	cmp	fp, #2
   22688:	movne	r3, #0
   2268c:	andeq	r3, r8, #1
   22690:	cmp	r3, #0
   22694:	bne	22820 <__assert_fail@plt+0x116f4>
   22698:	ldr	r0, [sp, #100]	; 0x64
   2269c:	add	r5, r5, r1
   226a0:	bl	10f4c <iswprint@plt>
   226a4:	cmp	r0, #0
   226a8:	add	r0, sp, #104	; 0x68
   226ac:	moveq	r6, #0
   226b0:	bl	10ee0 <mbsinit@plt>
   226b4:	cmp	r0, #0
   226b8:	beq	2264c <__assert_fail@plt+0x11520>
   226bc:	ldr	r3, [sp, #40]	; 0x28
   226c0:	mov	ip, r5
   226c4:	eor	r2, r6, #1
   226c8:	ldr	r8, [sp, #76]	; 0x4c
   226cc:	ldr	sl, [sp, #80]	; 0x50
   226d0:	and	r2, r2, r3
   226d4:	ldr	r5, [sp, #84]	; 0x54
   226d8:	ldr	r7, [sp, #88]	; 0x58
   226dc:	ldr	r4, [sp, #92]	; 0x5c
   226e0:	cmp	ip, #1
   226e4:	bls	22020 <__assert_fail@plt+0x10ef4>
   226e8:	add	r1, ip, r9
   226ec:	mov	r0, #39	; 0x27
   226f0:	ldr	lr, [sp, #52]	; 0x34
   226f4:	mov	ip, #0
   226f8:	str	r6, [sp, #52]	; 0x34
   226fc:	ldr	r6, [sp, #48]	; 0x30
   22700:	b	227bc <__assert_fail@plt+0x11690>
   22704:	ldr	ip, [sp, #44]	; 0x2c
   22708:	sub	r3, fp, #2
   2270c:	clz	r3, r3
   22710:	lsr	r3, r3, #5
   22714:	cmp	ip, #0
   22718:	bne	2292c <__assert_fail@plt+0x11800>
   2271c:	eor	ip, r6, #1
   22720:	ands	r3, r3, ip
   22724:	beq	22754 <__assert_fail@plt+0x11628>
   22728:	cmp	sl, r4
   2272c:	add	ip, r4, #1
   22730:	strbhi	r0, [r8, r4]
   22734:	cmp	sl, ip
   22738:	movhi	r6, #36	; 0x24
   2273c:	strbhi	r6, [r8, ip]
   22740:	add	ip, r4, #2
   22744:	mov	r6, r3
   22748:	cmp	sl, ip
   2274c:	add	r4, r4, #3
   22750:	strbhi	r0, [r8, ip]
   22754:	cmp	sl, r4
   22758:	movhi	r3, #92	; 0x5c
   2275c:	strbhi	r3, [r8, r4]
   22760:	add	r3, r4, #1
   22764:	cmp	sl, r3
   22768:	bls	22778 <__assert_fail@plt+0x1164c>
   2276c:	lsr	ip, r5, #6
   22770:	add	ip, ip, #48	; 0x30
   22774:	strb	ip, [r8, r3]
   22778:	add	r3, r4, #2
   2277c:	cmp	sl, r3
   22780:	bls	22790 <__assert_fail@plt+0x11664>
   22784:	ubfx	ip, r5, #3, #3
   22788:	add	ip, ip, #48	; 0x30
   2278c:	strb	ip, [r8, r3]
   22790:	add	r9, r9, #1
   22794:	and	r5, r5, #7
   22798:	cmp	r9, r1
   2279c:	add	r5, r5, #48	; 0x30
   227a0:	add	r4, r4, #3
   227a4:	bcs	22958 <__assert_fail@plt+0x1182c>
   227a8:	mov	ip, r2
   227ac:	cmp	sl, r4
   227b0:	strbhi	r5, [r8, r4]
   227b4:	add	r4, r4, #1
   227b8:	ldrb	r5, [lr, #1]!
   227bc:	cmp	r2, #0
   227c0:	bne	22704 <__assert_fail@plt+0x115d8>
   227c4:	eor	r3, ip, #1
   227c8:	cmp	r7, #0
   227cc:	and	r3, r3, r6
   227d0:	uxtb	r3, r3
   227d4:	beq	227e8 <__assert_fail@plt+0x116bc>
   227d8:	cmp	sl, r4
   227dc:	movhi	r7, #92	; 0x5c
   227e0:	strbhi	r7, [r8, r4]
   227e4:	add	r4, r4, #1
   227e8:	add	r9, r9, #1
   227ec:	cmp	r9, r1
   227f0:	bcs	22940 <__assert_fail@plt+0x11814>
   227f4:	cmp	r3, #0
   227f8:	beq	22978 <__assert_fail@plt+0x1184c>
   227fc:	cmp	sl, r4
   22800:	add	r3, r4, #1
   22804:	mov	r7, #0
   22808:	strbhi	r0, [r8, r4]
   2280c:	cmp	sl, r3
   22810:	add	r4, r4, #2
   22814:	mov	r6, r7
   22818:	strbhi	r0, [r8, r3]
   2281c:	b	227ac <__assert_fail@plt+0x11680>
   22820:	cmp	r1, #1
   22824:	beq	22698 <__assert_fail@plt+0x1156c>
   22828:	add	r2, r4, #1
   2282c:	add	r3, sl, r1
   22830:	add	r2, sl, r2
   22834:	add	r4, r3, r4
   22838:	ldrb	r3, [r2], #1
   2283c:	sub	r3, r3, #91	; 0x5b
   22840:	cmp	r3, #33	; 0x21
   22844:	ldrls	pc, [pc, r3, lsl #2]
   22848:	b	228d4 <__assert_fail@plt+0x117a8>
   2284c:	andeq	r2, r2, r0, ror #17
   22850:	andeq	r2, r2, r0, ror #17
   22854:	ldrdeq	r2, [r2], -r4
   22858:	andeq	r2, r2, r0, ror #17
   2285c:	ldrdeq	r2, [r2], -r4
   22860:	andeq	r2, r2, r0, ror #17
   22864:	ldrdeq	r2, [r2], -r4
   22868:	ldrdeq	r2, [r2], -r4
   2286c:	ldrdeq	r2, [r2], -r4
   22870:	ldrdeq	r2, [r2], -r4
   22874:	ldrdeq	r2, [r2], -r4
   22878:	ldrdeq	r2, [r2], -r4
   2287c:	ldrdeq	r2, [r2], -r4
   22880:	ldrdeq	r2, [r2], -r4
   22884:	ldrdeq	r2, [r2], -r4
   22888:	ldrdeq	r2, [r2], -r4
   2288c:	ldrdeq	r2, [r2], -r4
   22890:	ldrdeq	r2, [r2], -r4
   22894:	ldrdeq	r2, [r2], -r4
   22898:	ldrdeq	r2, [r2], -r4
   2289c:	ldrdeq	r2, [r2], -r4
   228a0:	ldrdeq	r2, [r2], -r4
   228a4:	ldrdeq	r2, [r2], -r4
   228a8:	ldrdeq	r2, [r2], -r4
   228ac:	ldrdeq	r2, [r2], -r4
   228b0:	ldrdeq	r2, [r2], -r4
   228b4:	ldrdeq	r2, [r2], -r4
   228b8:	ldrdeq	r2, [r2], -r4
   228bc:	ldrdeq	r2, [r2], -r4
   228c0:	ldrdeq	r2, [r2], -r4
   228c4:	ldrdeq	r2, [r2], -r4
   228c8:	ldrdeq	r2, [r2], -r4
   228cc:	ldrdeq	r2, [r2], -r4
   228d0:	andeq	r2, r2, r0, ror #17
   228d4:	cmp	r4, r2
   228d8:	bne	22838 <__assert_fail@plt+0x1170c>
   228dc:	b	22698 <__assert_fail@plt+0x1156c>
   228e0:	mov	r8, #2
   228e4:	ldr	fp, [sp, #76]	; 0x4c
   228e8:	ldr	sl, [sp, #80]	; 0x50
   228ec:	b	21e18 <__assert_fail@plt+0x10cec>
   228f0:	ldr	r2, [sp, #40]	; 0x28
   228f4:	str	fp, [sp, #152]	; 0x98
   228f8:	mov	fp, r8
   228fc:	ldr	r8, [sp, #152]	; 0x98
   22900:	and	r2, r2, r3
   22904:	str	r2, [sp, #40]	; 0x28
   22908:	b	21e18 <__assert_fail@plt+0x10cec>
   2290c:	cmp	sl, r4
   22910:	movls	r0, r4
   22914:	bls	21f48 <__assert_fail@plt+0x10e1c>
   22918:	ldr	r3, [sp, #48]	; 0x30
   2291c:	b	21f38 <__assert_fail@plt+0x10e0c>
   22920:	str	sl, [sp, #72]	; 0x48
   22924:	ldr	sl, [sp, #44]	; 0x2c
   22928:	b	21d88 <__assert_fail@plt+0x10c5c>
   2292c:	str	r3, [sp, #40]	; 0x28
   22930:	str	fp, [sp, #152]	; 0x98
   22934:	mov	fp, r8
   22938:	ldr	r8, [sp, #152]	; 0x98
   2293c:	b	21e18 <__assert_fail@plt+0x10cec>
   22940:	str	r6, [sp, #48]	; 0x30
   22944:	ldr	r6, [sp, #52]	; 0x34
   22948:	b	21db8 <__assert_fail@plt+0x10c8c>
   2294c:	mov	r6, #0
   22950:	ldr	r2, [sp, #40]	; 0x28
   22954:	b	226e8 <__assert_fail@plt+0x115bc>
   22958:	str	r6, [sp, #48]	; 0x30
   2295c:	ldr	r6, [sp, #52]	; 0x34
   22960:	b	21ba4 <__assert_fail@plt+0x10a78>
   22964:	add	r4, r4, #4
   22968:	mov	r6, #0
   2296c:	str	r3, [sp, #48]	; 0x30
   22970:	mov	r5, #48	; 0x30
   22974:	b	21b2c <__assert_fail@plt+0x10a00>
   22978:	mov	r7, r3
   2297c:	b	227ac <__assert_fail@plt+0x11680>
   22980:	mov	r3, #1
   22984:	movw	r2, #45480	; 0xb1a8
   22988:	movt	r2, #2
   2298c:	mov	r4, r3
   22990:	str	r3, [sp, #36]	; 0x24
   22994:	str	r3, [sp, #40]	; 0x28
   22998:	str	sl, [sp, #44]	; 0x2c
   2299c:	str	sl, [sp, #48]	; 0x30
   229a0:	str	r3, [sp, #56]	; 0x38
   229a4:	str	r2, [sp, #60]	; 0x3c
   229a8:	str	sl, [sp, #68]	; 0x44
   229ac:	str	sl, [sp, #72]	; 0x48
   229b0:	b	21654 <__assert_fail@plt+0x10528>
   229b4:	mov	r3, r6
   229b8:	mov	r5, #48	; 0x30
   229bc:	mov	r6, #0
   229c0:	b	21b2c <__assert_fail@plt+0x10a00>
   229c4:	mov	r5, r3
   229c8:	b	21ea4 <__assert_fail@plt+0x10d78>
   229cc:	cmp	sl, r4
   229d0:	mov	r5, #48	; 0x30
   229d4:	movhi	r3, #48	; 0x30
   229d8:	strbhi	r3, [r8, r4]
   229dc:	add	r3, r0, #2
   229e0:	add	r4, r0, #3
   229e4:	cmp	sl, r3
   229e8:	movhi	r1, #48	; 0x30
   229ec:	strbhi	r1, [r8, r3]
   229f0:	b	21f7c <__assert_fail@plt+0x10e50>
   229f4:	str	fp, [sp, #152]	; 0x98
   229f8:	mov	fp, r8
   229fc:	ldr	r8, [sp, #152]	; 0x98
   22a00:	b	21e18 <__assert_fail@plt+0x10cec>
   22a04:	ldr	r3, [sp, #164]	; 0xa4
   22a08:	ldrb	r3, [r3]
   22a0c:	cmp	r3, #0
   22a10:	beq	21624 <__assert_fail@plt+0x104f8>
   22a14:	ldr	r2, [sp, #164]	; 0xa4
   22a18:	cmp	sl, r4
   22a1c:	strbhi	r3, [fp, r4]
   22a20:	add	r4, r4, #1
   22a24:	ldrb	r3, [r2, #1]!
   22a28:	cmp	r3, #0
   22a2c:	bne	22a18 <__assert_fail@plt+0x118ec>
   22a30:	b	21624 <__assert_fail@plt+0x104f8>
   22a34:	mov	ip, r5
   22a38:	mov	r6, #0
   22a3c:	ldr	r2, [sp, #40]	; 0x28
   22a40:	ldr	r8, [sp, #76]	; 0x4c
   22a44:	ldr	sl, [sp, #80]	; 0x50
   22a48:	ldr	r5, [sp, #84]	; 0x54
   22a4c:	ldr	r7, [sp, #88]	; 0x58
   22a50:	ldr	r4, [sp, #92]	; 0x5c
   22a54:	b	226e0 <__assert_fail@plt+0x115b4>
   22a58:	ldr	r2, [sp, #32]
   22a5c:	ldrb	r1, [r2, r3]
   22a60:	sub	r2, r1, #33	; 0x21
   22a64:	cmp	r2, #29
   22a68:	ldrls	pc, [pc, r2, lsl #2]
   22a6c:	b	22b48 <__assert_fail@plt+0x11a1c>
   22a70:	andeq	r2, r2, r8, ror #21
   22a74:	andeq	r2, r2, r8, asr #22
   22a78:	andeq	r2, r2, r8, asr #22
   22a7c:	andeq	r2, r2, r8, asr #22
   22a80:	andeq	r2, r2, r8, asr #22
   22a84:	andeq	r2, r2, r8, asr #22
   22a88:	andeq	r2, r2, r8, ror #21
   22a8c:	andeq	r2, r2, r8, ror #21
   22a90:	andeq	r2, r2, r8, ror #21
   22a94:	andeq	r2, r2, r8, asr #22
   22a98:	andeq	r2, r2, r8, asr #22
   22a9c:	andeq	r2, r2, r8, asr #22
   22aa0:	andeq	r2, r2, r8, ror #21
   22aa4:	andeq	r2, r2, r8, asr #22
   22aa8:	andeq	r2, r2, r8, ror #21
   22aac:	andeq	r2, r2, r8, asr #22
   22ab0:	andeq	r2, r2, r8, asr #22
   22ab4:	andeq	r2, r2, r8, asr #22
   22ab8:	andeq	r2, r2, r8, asr #22
   22abc:	andeq	r2, r2, r8, asr #22
   22ac0:	andeq	r2, r2, r8, asr #22
   22ac4:	andeq	r2, r2, r8, asr #22
   22ac8:	andeq	r2, r2, r8, asr #22
   22acc:	andeq	r2, r2, r8, asr #22
   22ad0:	andeq	r2, r2, r8, asr #22
   22ad4:	andeq	r2, r2, r8, asr #22
   22ad8:	andeq	r2, r2, r8, asr #22
   22adc:	andeq	r2, r2, r8, ror #21
   22ae0:	andeq	r2, r2, r8, ror #21
   22ae4:	andeq	r2, r2, r8, ror #21
   22ae8:	ldr	r2, [sp, #44]	; 0x2c
   22aec:	cmp	r2, #0
   22af0:	bne	22c4c <__assert_fail@plt+0x11b20>
   22af4:	cmp	sl, r4
   22af8:	mov	r5, r1
   22afc:	movhi	r2, #63	; 0x3f
   22b00:	mov	r9, r3
   22b04:	strbhi	r2, [r8, r4]
   22b08:	add	r2, r4, #1
   22b0c:	cmp	sl, r2
   22b10:	movhi	r0, #34	; 0x22
   22b14:	strbhi	r0, [r8, r2]
   22b18:	add	r2, r4, #2
   22b1c:	cmp	sl, r2
   22b20:	movhi	r0, #34	; 0x22
   22b24:	strbhi	r0, [r8, r2]
   22b28:	add	r2, r4, #3
   22b2c:	add	r4, r4, #4
   22b30:	cmp	sl, r2
   22b34:	movhi	r0, #63	; 0x3f
   22b38:	strbhi	r0, [r8, r2]
   22b3c:	mov	r2, #0
   22b40:	mov	r6, r2
   22b44:	b	21f7c <__assert_fail@plt+0x10e50>
   22b48:	mov	r3, #0
   22b4c:	mov	r6, r3
   22b50:	b	21af4 <__assert_fail@plt+0x109c8>
   22b54:	ldr	r0, [sp, #28]
   22b58:	mov	r1, r4
   22b5c:	mov	r2, r7
   22b60:	mov	r3, r5
   22b64:	mov	ip, r5
   22b68:	ldr	r8, [sp, #76]	; 0x4c
   22b6c:	ldr	sl, [sp, #80]	; 0x50
   22b70:	cmp	r1, r0
   22b74:	ldr	r5, [sp, #84]	; 0x54
   22b78:	ldr	r7, [sp, #88]	; 0x58
   22b7c:	ldr	r4, [sp, #92]	; 0x5c
   22b80:	bcs	22bb4 <__assert_fail@plt+0x11a88>
   22b84:	ldrb	r6, [r2]
   22b88:	cmp	r6, #0
   22b8c:	bne	22ba0 <__assert_fail@plt+0x11a74>
   22b90:	b	22cd4 <__assert_fail@plt+0x11ba8>
   22b94:	ldrb	r6, [r2, #1]!
   22b98:	cmp	r6, #0
   22b9c:	beq	22c5c <__assert_fail@plt+0x11b30>
   22ba0:	add	r3, r3, #1
   22ba4:	add	r1, r9, r3
   22ba8:	cmp	r1, r0
   22bac:	bcc	22b94 <__assert_fail@plt+0x11a68>
   22bb0:	mov	ip, r3
   22bb4:	mov	r6, #0
   22bb8:	ldr	r2, [sp, #40]	; 0x28
   22bbc:	b	226e0 <__assert_fail@plt+0x115b4>
   22bc0:	mov	r3, #1
   22bc4:	mov	r2, #0
   22bc8:	mov	r4, r2
   22bcc:	str	r3, [sp, #36]	; 0x24
   22bd0:	str	r3, [sp, #40]	; 0x28
   22bd4:	str	r3, [sp, #44]	; 0x2c
   22bd8:	str	r2, [sp, #48]	; 0x30
   22bdc:	str	r3, [sp, #56]	; 0x38
   22be0:	movw	r3, #45480	; 0xb1a8
   22be4:	movt	r3, #2
   22be8:	str	r3, [sp, #60]	; 0x3c
   22bec:	str	r2, [sp, #68]	; 0x44
   22bf0:	str	r2, [sp, #72]	; 0x48
   22bf4:	b	21654 <__assert_fail@plt+0x10528>
   22bf8:	mov	r2, r3
   22bfc:	ldr	r3, [sp, #60]	; 0x3c
   22c00:	cmp	r3, #0
   22c04:	moveq	r2, #0
   22c08:	andne	r2, r2, #1
   22c0c:	cmp	r2, #0
   22c10:	beq	22c3c <__assert_fail@plt+0x11b10>
   22c14:	mov	r2, r3
   22c18:	ldrb	r3, [r3]
   22c1c:	cmp	r3, #0
   22c20:	beq	22c3c <__assert_fail@plt+0x11b10>
   22c24:	cmp	sl, r4
   22c28:	strbhi	r3, [fp, r4]
   22c2c:	add	r4, r4, #1
   22c30:	ldrb	r3, [r2, #1]!
   22c34:	cmp	r3, #0
   22c38:	bne	22c24 <__assert_fail@plt+0x11af8>
   22c3c:	cmp	sl, r4
   22c40:	movhi	r3, #0
   22c44:	strbhi	r3, [fp, r4]
   22c48:	b	21e5c <__assert_fail@plt+0x10d30>
   22c4c:	str	fp, [sp, #152]	; 0x98
   22c50:	mov	fp, r8
   22c54:	ldr	r8, [sp, #152]	; 0x98
   22c58:	b	21e24 <__assert_fail@plt+0x10cf8>
   22c5c:	mov	ip, r3
   22c60:	ldr	r2, [sp, #40]	; 0x28
   22c64:	b	226e0 <__assert_fail@plt+0x115b4>
   22c68:	str	fp, [sp, #152]	; 0x98
   22c6c:	mov	fp, r8
   22c70:	ldr	r8, [sp, #152]	; 0x98
   22c74:	sub	r3, r8, #2
   22c78:	clz	r3, r3
   22c7c:	lsr	r3, r3, #5
   22c80:	str	r3, [sp, #40]	; 0x28
   22c84:	b	21e18 <__assert_fail@plt+0x10cec>
   22c88:	mov	ip, #5
   22c8c:	ldr	r3, [sp, #28]
   22c90:	str	ip, [sp]
   22c94:	ldr	r2, [sp, #156]	; 0x9c
   22c98:	ldr	ip, [sp, #164]	; 0xa4
   22c9c:	ldr	r0, [sp, #160]	; 0xa0
   22ca0:	str	r2, [sp, #4]
   22ca4:	ldr	r2, [sp, #32]
   22ca8:	ldr	r1, [sp, #72]	; 0x48
   22cac:	str	ip, [sp, #12]
   22cb0:	ldr	ip, [sp, #168]	; 0xa8
   22cb4:	str	r0, [sp, #8]
   22cb8:	mov	r0, fp
   22cbc:	str	ip, [sp, #16]
   22cc0:	bl	2156c <__assert_fail@plt+0x10440>
   22cc4:	mov	r4, r0
   22cc8:	b	21e5c <__assert_fail@plt+0x10d30>
   22ccc:	mov	r8, #2
   22cd0:	b	21e18 <__assert_fail@plt+0x10cec>
   22cd4:	ldr	r2, [sp, #40]	; 0x28
   22cd8:	b	226e0 <__assert_fail@plt+0x115b4>
   22cdc:	mov	r3, #0
   22ce0:	mov	r2, #1
   22ce4:	mov	r4, r3
   22ce8:	strd	r2, [sp, #36]	; 0x24
   22cec:	strd	r2, [sp, #44]	; 0x2c
   22cf0:	str	r2, [sp, #56]	; 0x38
   22cf4:	str	r3, [sp, #68]	; 0x44
   22cf8:	str	r3, [sp, #72]	; 0x48
   22cfc:	movw	r3, #45500	; 0xb1bc
   22d00:	movt	r3, #2
   22d04:	str	r3, [sp, #60]	; 0x3c
   22d08:	b	21654 <__assert_fail@plt+0x10528>
   22d0c:	mov	r3, #0
   22d10:	mov	r1, #1
   22d14:	mov	r2, r3
   22d18:	str	r1, [sp, #36]	; 0x24
   22d1c:	str	r3, [sp, #48]	; 0x30
   22d20:	str	sl, [sp, #72]	; 0x48
   22d24:	b	21c5c <__assert_fail@plt+0x10b30>
   22d28:	bl	11120 <abort@plt>
   22d2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22d30:	mov	r4, r0
   22d34:	mov	r5, r3
   22d38:	strd	r6, [sp, #8]
   22d3c:	movw	r7, #49448	; 0xc128
   22d40:	movt	r7, #3
   22d44:	strd	r8, [sp, #16]
   22d48:	strd	sl, [sp, #24]
   22d4c:	mov	sl, r1
   22d50:	mov	fp, r2
   22d54:	str	lr, [sp, #32]
   22d58:	sub	sp, sp, #60	; 0x3c
   22d5c:	bl	11024 <__errno_location@plt>
   22d60:	mov	r8, r0
   22d64:	cmn	r4, #-2147483647	; 0x80000001
   22d68:	ldr	r6, [r7]
   22d6c:	movne	r0, #0
   22d70:	moveq	r0, #1
   22d74:	ldr	r3, [r8]
   22d78:	orrs	r0, r0, r4, lsr #31
   22d7c:	str	r3, [sp, #28]
   22d80:	bne	22f10 <__assert_fail@plt+0x11de4>
   22d84:	ldr	r3, [r7, #4]
   22d88:	cmp	r3, r4
   22d8c:	bgt	22dec <__assert_fail@plt+0x11cc0>
   22d90:	add	r1, r7, #8
   22d94:	sub	r2, r4, r3
   22d98:	str	r3, [sp, #52]	; 0x34
   22d9c:	cmp	r6, r1
   22da0:	add	r2, r2, #1
   22da4:	beq	22ee8 <__assert_fail@plt+0x11dbc>
   22da8:	mov	r1, #8
   22dac:	mov	r0, r6
   22db0:	mvn	r3, #-2147483648	; 0x80000000
   22db4:	str	r1, [sp]
   22db8:	add	r1, sp, #52	; 0x34
   22dbc:	bl	246d0 <__assert_fail@plt+0x135a4>
   22dc0:	mov	r6, r0
   22dc4:	str	r0, [r7]
   22dc8:	ldr	r0, [r7, #4]
   22dcc:	mov	r1, #0
   22dd0:	ldr	r2, [sp, #52]	; 0x34
   22dd4:	sub	r2, r2, r0
   22dd8:	add	r0, r6, r0, lsl #3
   22ddc:	lsl	r2, r2, #3
   22de0:	bl	11054 <memset@plt>
   22de4:	ldr	r3, [sp, #52]	; 0x34
   22de8:	str	r3, [r7, #4]
   22dec:	ldr	r1, [r5, #4]
   22df0:	add	r0, r6, r4, lsl #3
   22df4:	add	ip, r5, #8
   22df8:	mov	r3, fp
   22dfc:	mov	r2, sl
   22e00:	ldr	r7, [r0, #4]
   22e04:	str	r0, [sp, #36]	; 0x24
   22e08:	str	ip, [sp, #40]	; 0x28
   22e0c:	orr	r0, r1, #1
   22e10:	ldr	r9, [r6, r4, lsl #3]
   22e14:	str	ip, [sp, #8]
   22e18:	ldr	lr, [r5, #44]	; 0x2c
   22e1c:	str	r0, [sp, #4]
   22e20:	ldr	ip, [r5]
   22e24:	mov	r1, r9
   22e28:	str	ip, [sp, #32]
   22e2c:	ldr	ip, [r5, #40]	; 0x28
   22e30:	str	ip, [sp, #12]
   22e34:	ldr	ip, [sp, #32]
   22e38:	str	lr, [sp, #16]
   22e3c:	str	r0, [sp, #44]	; 0x2c
   22e40:	mov	r0, r7
   22e44:	str	ip, [sp]
   22e48:	bl	2156c <__assert_fail@plt+0x10440>
   22e4c:	cmp	r9, r0
   22e50:	bhi	22ec0 <__assert_fail@plt+0x11d94>
   22e54:	add	r9, r0, #1
   22e58:	movw	r3, #49572	; 0xc1a4
   22e5c:	movt	r3, #3
   22e60:	cmp	r7, r3
   22e64:	str	r9, [r6, r4, lsl #3]
   22e68:	beq	22e74 <__assert_fail@plt+0x11d48>
   22e6c:	mov	r0, r7
   22e70:	bl	17998 <__assert_fail@plt+0x686c>
   22e74:	mov	r0, r9
   22e78:	bl	24520 <__assert_fail@plt+0x133f4>
   22e7c:	ldr	ip, [r5]
   22e80:	mov	r3, fp
   22e84:	mov	r2, sl
   22e88:	mov	r1, r9
   22e8c:	mov	r7, r0
   22e90:	ldr	lr, [sp, #36]	; 0x24
   22e94:	ldr	r4, [r5, #40]	; 0x28
   22e98:	str	r0, [lr, #4]
   22e9c:	ldr	lr, [r5, #44]	; 0x2c
   22ea0:	str	ip, [sp]
   22ea4:	ldr	ip, [sp, #44]	; 0x2c
   22ea8:	str	ip, [sp, #4]
   22eac:	ldr	ip, [sp, #40]	; 0x28
   22eb0:	str	r4, [sp, #12]
   22eb4:	str	lr, [sp, #16]
   22eb8:	str	ip, [sp, #8]
   22ebc:	bl	2156c <__assert_fail@plt+0x10440>
   22ec0:	ldr	r3, [sp, #28]
   22ec4:	mov	r0, r7
   22ec8:	str	r3, [r8]
   22ecc:	add	sp, sp, #60	; 0x3c
   22ed0:	ldrd	r4, [sp]
   22ed4:	ldrd	r6, [sp, #8]
   22ed8:	ldrd	r8, [sp, #16]
   22edc:	ldrd	sl, [sp, #24]
   22ee0:	add	sp, sp, #32
   22ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   22ee8:	mov	r1, #8
   22eec:	mvn	r3, #-2147483648	; 0x80000000
   22ef0:	str	r1, [sp]
   22ef4:	add	r1, sp, #52	; 0x34
   22ef8:	bl	246d0 <__assert_fail@plt+0x135a4>
   22efc:	ldrd	r2, [r7, #8]
   22f00:	mov	r6, r0
   22f04:	str	r0, [r7]
   22f08:	strd	r2, [r0]
   22f0c:	b	22dc8 <__assert_fail@plt+0x11c9c>
   22f10:	bl	11120 <abort@plt>
   22f14:	strd	r4, [sp, #-16]!
   22f18:	mov	r5, r0
   22f1c:	str	r6, [sp, #8]
   22f20:	str	lr, [sp, #12]
   22f24:	bl	11024 <__errno_location@plt>
   22f28:	mov	r4, r0
   22f2c:	cmp	r5, #0
   22f30:	ldr	r0, [pc, #32]	; 22f58 <__assert_fail@plt+0x11e2c>
   22f34:	mov	r1, #48	; 0x30
   22f38:	movne	r0, r5
   22f3c:	ldr	r6, [r4]
   22f40:	bl	24848 <__assert_fail@plt+0x1371c>
   22f44:	str	r6, [r4]
   22f48:	ldrd	r4, [sp]
   22f4c:	ldr	r6, [sp, #8]
   22f50:	add	sp, sp, #12
   22f54:	pop	{pc}		; (ldr pc, [sp], #4)
   22f58:	andeq	ip, r3, r4, lsr #5
   22f5c:	ldr	r3, [pc, #12]	; 22f70 <__assert_fail@plt+0x11e44>
   22f60:	cmp	r0, #0
   22f64:	moveq	r0, r3
   22f68:	ldr	r0, [r0]
   22f6c:	bx	lr
   22f70:	andeq	ip, r3, r4, lsr #5
   22f74:	ldr	r3, [pc, #12]	; 22f88 <__assert_fail@plt+0x11e5c>
   22f78:	cmp	r0, #0
   22f7c:	moveq	r0, r3
   22f80:	str	r1, [r0]
   22f84:	bx	lr
   22f88:	andeq	ip, r3, r4, lsr #5
   22f8c:	ldr	r3, [pc, #52]	; 22fc8 <__assert_fail@plt+0x11e9c>
   22f90:	cmp	r0, #0
   22f94:	push	{lr}		; (str lr, [sp, #-4]!)
   22f98:	lsr	lr, r1, #5
   22f9c:	and	r1, r1, #31
   22fa0:	moveq	r0, r3
   22fa4:	add	r3, r0, #8
   22fa8:	ldr	ip, [r3, lr, lsl #2]
   22fac:	lsr	r0, ip, r1
   22fb0:	eor	r2, r2, r0
   22fb4:	and	r0, r0, #1
   22fb8:	and	r2, r2, #1
   22fbc:	eor	r1, ip, r2, lsl r1
   22fc0:	str	r1, [r3, lr, lsl #2]
   22fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   22fc8:	andeq	ip, r3, r4, lsr #5
   22fcc:	ldr	r3, [pc, #16]	; 22fe4 <__assert_fail@plt+0x11eb8>
   22fd0:	cmp	r0, #0
   22fd4:	movne	r3, r0
   22fd8:	ldr	r0, [r3, #4]
   22fdc:	str	r1, [r3, #4]
   22fe0:	bx	lr
   22fe4:	andeq	ip, r3, r4, lsr #5
   22fe8:	ldr	r3, [pc, #48]	; 23020 <__assert_fail@plt+0x11ef4>
   22fec:	cmp	r0, #0
   22ff0:	mov	ip, #10
   22ff4:	moveq	r0, r3
   22ff8:	cmp	r2, #0
   22ffc:	cmpne	r1, #0
   23000:	str	ip, [r0]
   23004:	beq	23014 <__assert_fail@plt+0x11ee8>
   23008:	str	r1, [r0, #40]	; 0x28
   2300c:	str	r2, [r0, #44]	; 0x2c
   23010:	bx	lr
   23014:	str	r4, [sp, #-8]!
   23018:	str	lr, [sp, #4]
   2301c:	bl	11120 <abort@plt>
   23020:	andeq	ip, r3, r4, lsr #5
   23024:	strd	r4, [sp, #-28]!	; 0xffffffe4
   23028:	strd	r6, [sp, #8]
   2302c:	mov	r7, r0
   23030:	mov	r6, r1
   23034:	strd	r8, [sp, #16]
   23038:	mov	r8, r2
   2303c:	mov	r9, r3
   23040:	str	lr, [sp, #24]
   23044:	sub	sp, sp, #28
   23048:	ldr	r4, [sp, #56]	; 0x38
   2304c:	ldr	ip, [pc, #104]	; 230bc <__assert_fail@plt+0x11f90>
   23050:	cmp	r4, #0
   23054:	moveq	r4, ip
   23058:	bl	11024 <__errno_location@plt>
   2305c:	ldr	ip, [r4, #44]	; 0x2c
   23060:	mov	r5, r0
   23064:	mov	r1, r6
   23068:	add	lr, r4, #8
   2306c:	mov	r3, r9
   23070:	ldr	r6, [r5]
   23074:	mov	r2, r8
   23078:	mov	r0, r7
   2307c:	str	ip, [sp, #16]
   23080:	ldr	ip, [r4, #40]	; 0x28
   23084:	str	lr, [sp, #8]
   23088:	str	ip, [sp, #12]
   2308c:	ldr	ip, [r4, #4]
   23090:	str	ip, [sp, #4]
   23094:	ldr	ip, [r4]
   23098:	str	ip, [sp]
   2309c:	bl	2156c <__assert_fail@plt+0x10440>
   230a0:	str	r6, [r5]
   230a4:	add	sp, sp, #28
   230a8:	ldrd	r4, [sp]
   230ac:	ldrd	r6, [sp, #8]
   230b0:	ldrd	r8, [sp, #16]
   230b4:	add	sp, sp, #24
   230b8:	pop	{pc}		; (ldr pc, [sp], #4)
   230bc:	andeq	ip, r3, r4, lsr #5
   230c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   230c4:	cmp	r3, #0
   230c8:	ldr	r4, [pc, #220]	; 231ac <__assert_fail@plt+0x12080>
   230cc:	movne	r4, r3
   230d0:	strd	r6, [sp, #8]
   230d4:	mov	r6, r2
   230d8:	strd	r8, [sp, #16]
   230dc:	mov	r9, r0
   230e0:	strd	sl, [sp, #24]
   230e4:	mov	sl, r1
   230e8:	str	lr, [sp, #32]
   230ec:	sub	sp, sp, #44	; 0x2c
   230f0:	bl	11024 <__errno_location@plt>
   230f4:	ldr	r5, [r4, #4]
   230f8:	mov	r7, r0
   230fc:	mov	r1, #0
   23100:	add	r8, r4, #8
   23104:	mov	r3, sl
   23108:	ldr	ip, [r4, #44]	; 0x2c
   2310c:	mov	r2, r9
   23110:	mov	r0, r1
   23114:	ldr	lr, [r7]
   23118:	cmp	r6, r1
   2311c:	orreq	r5, r5, #1
   23120:	str	ip, [sp, #16]
   23124:	ldr	ip, [r4, #40]	; 0x28
   23128:	stmib	sp, {r5, r8, ip}
   2312c:	ldr	ip, [r4]
   23130:	str	lr, [sp, #28]
   23134:	str	ip, [sp]
   23138:	bl	2156c <__assert_fail@plt+0x10440>
   2313c:	add	r1, r0, #1
   23140:	mov	fp, r0
   23144:	mov	r0, r1
   23148:	str	r1, [sp, #36]	; 0x24
   2314c:	bl	24520 <__assert_fail@plt+0x133f4>
   23150:	ldr	ip, [r4, #44]	; 0x2c
   23154:	mov	r3, sl
   23158:	mov	r2, r9
   2315c:	ldr	r1, [sp, #36]	; 0x24
   23160:	str	ip, [sp, #16]
   23164:	ldr	ip, [r4, #40]	; 0x28
   23168:	str	r0, [sp, #32]
   2316c:	stmib	sp, {r5, r8, ip}
   23170:	ldr	ip, [r4]
   23174:	str	ip, [sp]
   23178:	bl	2156c <__assert_fail@plt+0x10440>
   2317c:	ldr	lr, [sp, #28]
   23180:	cmp	r6, #0
   23184:	ldr	r0, [sp, #32]
   23188:	str	lr, [r7]
   2318c:	strne	fp, [r6]
   23190:	add	sp, sp, #44	; 0x2c
   23194:	ldrd	r4, [sp]
   23198:	ldrd	r6, [sp, #8]
   2319c:	ldrd	r8, [sp, #16]
   231a0:	ldrd	sl, [sp, #24]
   231a4:	add	sp, sp, #32
   231a8:	pop	{pc}		; (ldr pc, [sp], #4)
   231ac:	andeq	ip, r3, r4, lsr #5
   231b0:	mov	r3, r2
   231b4:	mov	r2, #0
   231b8:	b	230c0 <__assert_fail@plt+0x11f94>
   231bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   231c0:	movw	r5, #49448	; 0xc128
   231c4:	movt	r5, #3
   231c8:	ldr	r3, [r5, #4]
   231cc:	strd	r6, [sp, #8]
   231d0:	str	r8, [sp, #16]
   231d4:	str	lr, [sp, #20]
   231d8:	ldr	r7, [r5]
   231dc:	cmp	r3, #1
   231e0:	ble	23204 <__assert_fail@plt+0x120d8>
   231e4:	mov	r4, #1
   231e8:	add	r6, r7, #4
   231ec:	ldr	r0, [r6, r4, lsl #3]
   231f0:	add	r4, r4, #1
   231f4:	bl	17998 <__assert_fail@plt+0x686c>
   231f8:	ldr	r3, [r5, #4]
   231fc:	cmp	r3, r4
   23200:	bgt	231ec <__assert_fail@plt+0x120c0>
   23204:	ldr	r0, [r7, #4]
   23208:	movw	r4, #49572	; 0xc1a4
   2320c:	movt	r4, #3
   23210:	cmp	r0, r4
   23214:	beq	23228 <__assert_fail@plt+0x120fc>
   23218:	bl	17998 <__assert_fail@plt+0x686c>
   2321c:	mov	r3, #256	; 0x100
   23220:	str	r3, [r5, #8]
   23224:	str	r4, [r5, #12]
   23228:	ldr	r4, [pc, #44]	; 2325c <__assert_fail@plt+0x12130>
   2322c:	cmp	r7, r4
   23230:	beq	23240 <__assert_fail@plt+0x12114>
   23234:	mov	r0, r7
   23238:	bl	17998 <__assert_fail@plt+0x686c>
   2323c:	str	r4, [r5]
   23240:	mov	r3, #1
   23244:	ldrd	r6, [sp, #8]
   23248:	str	r3, [r5, #4]
   2324c:	ldrd	r4, [sp]
   23250:	ldr	r8, [sp, #16]
   23254:	add	sp, sp, #20
   23258:	pop	{pc}		; (ldr pc, [sp], #4)
   2325c:	andeq	ip, r3, r0, lsr r1
   23260:	ldr	r3, [pc, #4]	; 2326c <__assert_fail@plt+0x12140>
   23264:	mvn	r2, #0
   23268:	b	22d2c <__assert_fail@plt+0x11c00>
   2326c:	andeq	ip, r3, r4, lsr #5
   23270:	ldr	r3, [pc]	; 23278 <__assert_fail@plt+0x1214c>
   23274:	b	22d2c <__assert_fail@plt+0x11c00>
   23278:	andeq	ip, r3, r4, lsr #5
   2327c:	mov	r1, r0
   23280:	ldr	r3, [pc, #8]	; 23290 <__assert_fail@plt+0x12164>
   23284:	mvn	r2, #0
   23288:	mov	r0, #0
   2328c:	b	22d2c <__assert_fail@plt+0x11c00>
   23290:	andeq	ip, r3, r4, lsr #5
   23294:	mov	r2, r1
   23298:	ldr	r3, [pc, #8]	; 232a8 <__assert_fail@plt+0x1217c>
   2329c:	mov	r1, r0
   232a0:	mov	r0, #0
   232a4:	b	22d2c <__assert_fail@plt+0x11c00>
   232a8:	andeq	ip, r3, r4, lsr #5
   232ac:	strd	r4, [sp, #-12]!
   232b0:	mov	r5, r2
   232b4:	mov	r4, r0
   232b8:	str	lr, [sp, #8]
   232bc:	sub	sp, sp, #52	; 0x34
   232c0:	mov	r0, sp
   232c4:	bl	213c8 <__assert_fail@plt+0x1029c>
   232c8:	mov	r3, sp
   232cc:	mov	r1, r5
   232d0:	mov	r0, r4
   232d4:	mvn	r2, #0
   232d8:	bl	22d2c <__assert_fail@plt+0x11c00>
   232dc:	add	sp, sp, #52	; 0x34
   232e0:	ldrd	r4, [sp]
   232e4:	add	sp, sp, #8
   232e8:	pop	{pc}		; (ldr pc, [sp], #4)
   232ec:	strd	r4, [sp, #-16]!
   232f0:	mov	r5, r2
   232f4:	mov	r4, r0
   232f8:	str	r6, [sp, #8]
   232fc:	mov	r6, r3
   23300:	str	lr, [sp, #12]
   23304:	sub	sp, sp, #48	; 0x30
   23308:	mov	r0, sp
   2330c:	bl	213c8 <__assert_fail@plt+0x1029c>
   23310:	mov	r3, sp
   23314:	mov	r2, r6
   23318:	mov	r1, r5
   2331c:	mov	r0, r4
   23320:	bl	22d2c <__assert_fail@plt+0x11c00>
   23324:	add	sp, sp, #48	; 0x30
   23328:	ldrd	r4, [sp]
   2332c:	ldr	r6, [sp, #8]
   23330:	add	sp, sp, #12
   23334:	pop	{pc}		; (ldr pc, [sp], #4)
   23338:	mov	r2, r1
   2333c:	mov	r1, r0
   23340:	mov	r0, #0
   23344:	b	232ac <__assert_fail@plt+0x12180>
   23348:	mov	r3, r2
   2334c:	mov	r2, r1
   23350:	mov	r1, r0
   23354:	mov	r0, #0
   23358:	b	232ec <__assert_fail@plt+0x121c0>
   2335c:	ldr	ip, [pc, #140]	; 233f0 <__assert_fail@plt+0x122c4>
   23360:	strd	r4, [sp, #-28]!	; 0xffffffe4
   23364:	ldrd	r4, [ip]
   23368:	strd	r6, [sp, #8]
   2336c:	ldrd	r6, [ip, #8]
   23370:	strd	r8, [sp, #16]
   23374:	lsr	r9, r2, #5
   23378:	str	lr, [sp, #24]
   2337c:	sub	sp, sp, #52	; 0x34
   23380:	and	lr, r2, #31
   23384:	add	r8, sp, #8
   23388:	mov	r2, r1
   2338c:	strd	r4, [sp]
   23390:	mov	r1, r0
   23394:	mov	r3, sp
   23398:	strd	r6, [sp, #8]
   2339c:	mov	r0, #0
   233a0:	ldrd	r4, [ip, #16]
   233a4:	ldrd	r6, [ip, #24]
   233a8:	strd	r4, [sp, #16]
   233ac:	ldrd	r4, [ip, #32]
   233b0:	strd	r6, [sp, #24]
   233b4:	ldrd	r6, [ip, #40]	; 0x28
   233b8:	strd	r4, [sp, #32]
   233bc:	strd	r6, [sp, #40]	; 0x28
   233c0:	ldr	ip, [r8, r9, lsl #2]
   233c4:	mvn	r4, ip, lsr lr
   233c8:	and	r4, r4, #1
   233cc:	eor	lr, ip, r4, lsl lr
   233d0:	str	lr, [r8, r9, lsl #2]
   233d4:	bl	22d2c <__assert_fail@plt+0x11c00>
   233d8:	add	sp, sp, #52	; 0x34
   233dc:	ldrd	r4, [sp]
   233e0:	ldrd	r6, [sp, #8]
   233e4:	ldrd	r8, [sp, #16]
   233e8:	add	sp, sp, #24
   233ec:	pop	{pc}		; (ldr pc, [sp], #4)
   233f0:	andeq	ip, r3, r4, lsr #5
   233f4:	mov	r2, r1
   233f8:	mvn	r1, #0
   233fc:	b	2335c <__assert_fail@plt+0x12230>
   23400:	mov	r2, #58	; 0x3a
   23404:	mvn	r1, #0
   23408:	b	2335c <__assert_fail@plt+0x12230>
   2340c:	mov	r2, #58	; 0x3a
   23410:	b	2335c <__assert_fail@plt+0x12230>
   23414:	strd	r4, [sp, #-20]!	; 0xffffffec
   23418:	strd	r6, [sp, #8]
   2341c:	mov	r6, r0
   23420:	mov	r7, r2
   23424:	str	lr, [sp, #16]
   23428:	sub	sp, sp, #100	; 0x64
   2342c:	mov	r0, sp
   23430:	bl	213c8 <__assert_fail@plt+0x1029c>
   23434:	ldrd	r4, [sp, #8]
   23438:	mov	r1, r7
   2343c:	mov	r0, r6
   23440:	add	r3, sp, #48	; 0x30
   23444:	mvn	r2, #0
   23448:	ldrd	r6, [sp]
   2344c:	strd	r4, [sp, #56]	; 0x38
   23450:	ldrd	r4, [sp, #16]
   23454:	strd	r6, [sp, #48]	; 0x30
   23458:	ldrd	r6, [sp, #32]
   2345c:	ldr	lr, [sp, #60]	; 0x3c
   23460:	strd	r4, [sp, #64]	; 0x40
   23464:	ldrd	r4, [sp, #24]
   23468:	mvn	ip, lr
   2346c:	and	ip, ip, #67108864	; 0x4000000
   23470:	strd	r4, [sp, #72]	; 0x48
   23474:	eor	ip, ip, lr
   23478:	ldrd	r4, [sp, #40]	; 0x28
   2347c:	str	ip, [sp, #60]	; 0x3c
   23480:	strd	r6, [sp, #80]	; 0x50
   23484:	strd	r4, [sp, #88]	; 0x58
   23488:	bl	22d2c <__assert_fail@plt+0x11c00>
   2348c:	add	sp, sp, #100	; 0x64
   23490:	ldrd	r4, [sp]
   23494:	ldrd	r6, [sp, #8]
   23498:	add	sp, sp, #16
   2349c:	pop	{pc}		; (ldr pc, [sp], #4)
   234a0:	ldr	ip, [pc, #156]	; 23544 <__assert_fail@plt+0x12418>
   234a4:	cmp	r2, #0
   234a8:	cmpne	r1, #0
   234ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   234b0:	strd	r6, [sp, #8]
   234b4:	mov	r6, r2
   234b8:	str	r8, [sp, #16]
   234bc:	mov	r8, r3
   234c0:	strd	sl, [sp, #20]
   234c4:	ldrd	r4, [ip]
   234c8:	str	lr, [sp, #28]
   234cc:	sub	sp, sp, #48	; 0x30
   234d0:	mov	lr, #10
   234d4:	ldrd	r2, [ip, #8]
   234d8:	ldrd	sl, [ip, #16]
   234dc:	strd	r4, [sp]
   234e0:	ldrd	r4, [ip, #32]
   234e4:	str	lr, [sp]
   234e8:	strd	r2, [sp, #8]
   234ec:	strd	sl, [sp, #16]
   234f0:	ldrd	r2, [ip, #24]
   234f4:	ldrd	sl, [ip, #40]	; 0x28
   234f8:	strd	r2, [sp, #24]
   234fc:	strd	r4, [sp, #32]
   23500:	strd	sl, [sp, #40]	; 0x28
   23504:	beq	23540 <__assert_fail@plt+0x12414>
   23508:	ldr	r2, [sp, #80]	; 0x50
   2350c:	mov	r7, r1
   23510:	mov	r3, sp
   23514:	mov	r1, r8
   23518:	str	r7, [sp, #40]	; 0x28
   2351c:	str	r6, [sp, #44]	; 0x2c
   23520:	bl	22d2c <__assert_fail@plt+0x11c00>
   23524:	add	sp, sp, #48	; 0x30
   23528:	ldrd	r4, [sp]
   2352c:	ldrd	r6, [sp, #8]
   23530:	ldr	r8, [sp, #16]
   23534:	ldrd	sl, [sp, #20]
   23538:	add	sp, sp, #28
   2353c:	pop	{pc}		; (ldr pc, [sp], #4)
   23540:	bl	11120 <abort@plt>
   23544:	andeq	ip, r3, r4, lsr #5
   23548:	mvn	ip, #0
   2354c:	push	{lr}		; (str lr, [sp, #-4]!)
   23550:	sub	sp, sp, #12
   23554:	str	ip, [sp]
   23558:	bl	234a0 <__assert_fail@plt+0x12374>
   2355c:	add	sp, sp, #12
   23560:	pop	{pc}		; (ldr pc, [sp], #4)
   23564:	mvn	ip, #0
   23568:	push	{lr}		; (str lr, [sp, #-4]!)
   2356c:	sub	sp, sp, #12
   23570:	mov	r3, r2
   23574:	mov	r2, r1
   23578:	mov	r1, r0
   2357c:	mov	r0, #0
   23580:	str	ip, [sp]
   23584:	bl	234a0 <__assert_fail@plt+0x12374>
   23588:	add	sp, sp, #12
   2358c:	pop	{pc}		; (ldr pc, [sp], #4)
   23590:	push	{lr}		; (str lr, [sp, #-4]!)
   23594:	sub	sp, sp, #12
   23598:	str	r3, [sp]
   2359c:	mov	r3, r2
   235a0:	mov	r2, r1
   235a4:	mov	r1, r0
   235a8:	mov	r0, #0
   235ac:	bl	234a0 <__assert_fail@plt+0x12374>
   235b0:	add	sp, sp, #12
   235b4:	pop	{pc}		; (ldr pc, [sp], #4)
   235b8:	ldr	r3, [pc]	; 235c0 <__assert_fail@plt+0x12494>
   235bc:	b	22d2c <__assert_fail@plt+0x11c00>
   235c0:	andeq	ip, r3, r8, lsr r1
   235c4:	mov	r2, r1
   235c8:	ldr	r3, [pc, #8]	; 235d8 <__assert_fail@plt+0x124ac>
   235cc:	mov	r1, r0
   235d0:	mov	r0, #0
   235d4:	b	22d2c <__assert_fail@plt+0x11c00>
   235d8:	andeq	ip, r3, r8, lsr r1
   235dc:	ldr	r3, [pc, #4]	; 235e8 <__assert_fail@plt+0x124bc>
   235e0:	mvn	r2, #0
   235e4:	b	22d2c <__assert_fail@plt+0x11c00>
   235e8:	andeq	ip, r3, r8, lsr r1
   235ec:	mov	r1, r0
   235f0:	ldr	r3, [pc, #8]	; 23600 <__assert_fail@plt+0x124d4>
   235f4:	mvn	r2, #0
   235f8:	mov	r0, #0
   235fc:	b	22d2c <__assert_fail@plt+0x11c00>
   23600:	andeq	ip, r3, r8, lsr r1
   23604:	mov	r3, #0
   23608:	str	r3, [r0]
   2360c:	str	r3, [r0, #4]
   23610:	bx	lr
   23614:	strd	r4, [sp, #-28]!	; 0xffffffe4
   23618:	cmp	r2, #0
   2361c:	mov	r5, r0
   23620:	strd	r6, [sp, #8]
   23624:	addne	r2, r1, r2
   23628:	mov	r6, r3
   2362c:	strd	r8, [sp, #16]
   23630:	mov	r8, #0
   23634:	mov	r9, #0
   23638:	str	lr, [sp, #24]
   2363c:	sub	sp, sp, #52	; 0x34
   23640:	subne	r1, r1, #1
   23644:	add	ip, sp, #16
   23648:	subne	lr, r2, #1
   2364c:	movne	r4, #1
   23650:	strd	r8, [sp, #16]
   23654:	strd	r8, [ip, #8]
   23658:	strd	r8, [ip, #16]
   2365c:	strd	r8, [ip, #24]
   23660:	beq	23684 <__assert_fail@plt+0x12558>
   23664:	ldrb	r3, [r1, #1]!
   23668:	lsr	r0, r3, #5
   2366c:	and	r3, r3, #31
   23670:	cmp	lr, r1
   23674:	ldr	r2, [ip, r0, lsl #2]
   23678:	orr	r3, r2, r4, lsl r3
   2367c:	str	r3, [ip, r0, lsl #2]
   23680:	bne	23664 <__assert_fail@plt+0x12538>
   23684:	ldr	r3, [r5, #4]
   23688:	ldr	r2, [r5, #8]
   2368c:	cmp	r3, r2
   23690:	bcs	236e0 <__assert_fail@plt+0x125b4>
   23694:	add	r2, r3, #1
   23698:	str	r2, [r5, #4]
   2369c:	ldrb	r4, [r3]
   236a0:	b	236ac <__assert_fail@plt+0x12580>
   236a4:	str	r1, [r5, #4]
   236a8:	ldrb	r4, [r3]
   236ac:	lsr	r3, r4, #5
   236b0:	add	r2, sp, #48	; 0x30
   236b4:	and	r1, r4, #31
   236b8:	add	r3, r2, r3, lsl #2
   236bc:	ldr	r2, [r3, #-32]	; 0xffffffe0
   236c0:	lsr	r3, r2, r1
   236c4:	tst	r3, #1
   236c8:	beq	236f0 <__assert_fail@plt+0x125c4>
   236cc:	ldr	r3, [r5, #4]
   236d0:	ldr	r2, [r5, #8]
   236d4:	add	r1, r3, #1
   236d8:	cmp	r3, r2
   236dc:	bcc	236a4 <__assert_fail@plt+0x12578>
   236e0:	mov	r0, r5
   236e4:	bl	110c0 <__uflow@plt>
   236e8:	subs	r4, r0, #0
   236ec:	bge	236ac <__assert_fail@plt+0x12580>
   236f0:	ldm	r6, {r3, r9}
   236f4:	mov	r7, #0
   236f8:	mov	r8, #1
   236fc:	str	r3, [sp, #12]
   23700:	b	23758 <__assert_fail@plt+0x1262c>
   23704:	lsr	r3, r4, #5
   23708:	mov	r0, r7
   2370c:	add	r2, sp, #48	; 0x30
   23710:	cmp	r4, #0
   23714:	and	r1, r4, #31
   23718:	add	r3, r2, r3, lsl #2
   2371c:	add	r7, r7, #1
   23720:	add	r2, r9, r0
   23724:	blt	237b8 <__assert_fail@plt+0x1268c>
   23728:	ldr	r3, [r3, #-32]	; 0xffffffe0
   2372c:	lsr	r3, r3, r1
   23730:	tst	r3, #1
   23734:	bne	237b8 <__assert_fail@plt+0x1268c>
   23738:	strb	r4, [r2]
   2373c:	ldr	r3, [r5, #4]
   23740:	ldr	r2, [r5, #8]
   23744:	add	r1, r3, #1
   23748:	cmp	r3, r2
   2374c:	bcs	23794 <__assert_fail@plt+0x12668>
   23750:	str	r1, [r5, #4]
   23754:	ldrb	r4, [r3]
   23758:	clz	r3, r7
   2375c:	lsr	r3, r3, #5
   23760:	ands	r3, r3, r4, lsr #31
   23764:	bne	237b0 <__assert_fail@plt+0x12684>
   23768:	ldr	r3, [sp, #12]
   2376c:	cmp	r3, r7
   23770:	bne	23704 <__assert_fail@plt+0x125d8>
   23774:	mov	r0, r9
   23778:	mvn	r3, #0
   2377c:	str	r8, [sp]
   23780:	mov	r2, #1
   23784:	add	r1, sp, #12
   23788:	bl	246d0 <__assert_fail@plt+0x135a4>
   2378c:	mov	r9, r0
   23790:	b	23704 <__assert_fail@plt+0x125d8>
   23794:	mov	r0, r5
   23798:	bl	110c0 <__uflow@plt>
   2379c:	clz	r3, r7
   237a0:	mov	r4, r0
   237a4:	lsr	r3, r3, #5
   237a8:	ands	r3, r3, r4, lsr #31
   237ac:	beq	23768 <__assert_fail@plt+0x1263c>
   237b0:	mvn	r0, #0
   237b4:	b	237c8 <__assert_fail@plt+0x1269c>
   237b8:	mov	r3, #0
   237bc:	strb	r3, [r2]
   237c0:	ldr	r3, [sp, #12]
   237c4:	stm	r6, {r3, r9}
   237c8:	add	sp, sp, #52	; 0x34
   237cc:	ldrd	r4, [sp]
   237d0:	ldrd	r6, [sp, #8]
   237d4:	ldrd	r8, [sp, #16]
   237d8:	add	sp, sp, #24
   237dc:	pop	{pc}		; (ldr pc, [sp], #4)
   237e0:	cmp	r1, #0
   237e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   237e8:	strd	r6, [sp, #8]
   237ec:	strd	r8, [sp, #16]
   237f0:	mov	r9, r0
   237f4:	addne	r0, r1, #1
   237f8:	strd	sl, [sp, #24]
   237fc:	mov	fp, r3
   23800:	moveq	r3, #64	; 0x40
   23804:	movne	r3, r0
   23808:	str	lr, [sp, #32]
   2380c:	sub	sp, sp, #28
   23810:	moveq	r0, r3
   23814:	mov	r1, #4
   23818:	mov	sl, r2
   2381c:	str	r3, [sp, #12]
   23820:	bl	24640 <__assert_fail@plt+0x13514>
   23824:	mov	r7, r0
   23828:	mov	r1, #4
   2382c:	ldr	r0, [sp, #12]
   23830:	bl	24640 <__assert_fail@plt+0x13514>
   23834:	mov	r3, #0
   23838:	mov	r8, r0
   2383c:	mov	r4, r3
   23840:	str	r3, [sp, #16]
   23844:	str	r3, [sp, #20]
   23848:	b	23884 <__assert_fail@plt+0x12758>
   2384c:	lsl	r3, r4, #2
   23850:	cmn	r5, #1
   23854:	mov	r1, #1
   23858:	mov	r0, r6
   2385c:	add	r2, r8, r3
   23860:	add	r3, r7, r3
   23864:	beq	238e4 <__assert_fail@plt+0x127b8>
   23868:	bl	24640 <__assert_fail@plt+0x13514>
   2386c:	mov	r2, r6
   23870:	str	r5, [r8, r4, lsl #2]
   23874:	ldr	r1, [sp, #20]
   23878:	bl	10ed4 <memcpy@plt>
   2387c:	str	r0, [r7, r4, lsl #2]
   23880:	add	r4, r4, #1
   23884:	add	r3, sp, #16
   23888:	mov	r2, fp
   2388c:	mov	r1, sl
   23890:	mov	r0, r9
   23894:	bl	23614 <__assert_fail@plt+0x124e8>
   23898:	ldr	r3, [sp, #12]
   2389c:	mov	r5, r0
   238a0:	add	r6, r0, #1
   238a4:	cmp	r3, r4
   238a8:	bgt	2384c <__assert_fail@plt+0x12720>
   238ac:	mov	r2, #4
   238b0:	mov	r0, r7
   238b4:	mvn	r3, #0
   238b8:	add	r1, sp, #12
   238bc:	str	r2, [sp]
   238c0:	mov	r2, #1
   238c4:	bl	246d0 <__assert_fail@plt+0x135a4>
   238c8:	mov	r7, r0
   238cc:	mov	r2, #4
   238d0:	ldr	r1, [sp, #12]
   238d4:	mov	r0, r8
   238d8:	bl	245bc <__assert_fail@plt+0x13490>
   238dc:	mov	r8, r0
   238e0:	b	2384c <__assert_fail@plt+0x12720>
   238e4:	mov	r1, #0
   238e8:	str	r1, [r3]
   238ec:	str	r1, [r2]
   238f0:	ldr	r0, [sp, #20]
   238f4:	bl	17998 <__assert_fail@plt+0x686c>
   238f8:	ldr	r3, [sp, #68]	; 0x44
   238fc:	cmp	r3, #0
   23900:	ldr	r3, [sp, #64]	; 0x40
   23904:	str	r7, [r3]
   23908:	beq	23934 <__assert_fail@plt+0x12808>
   2390c:	ldr	r3, [sp, #68]	; 0x44
   23910:	str	r8, [r3]
   23914:	mov	r0, r4
   23918:	add	sp, sp, #28
   2391c:	ldrd	r4, [sp]
   23920:	ldrd	r6, [sp, #8]
   23924:	ldrd	r8, [sp, #16]
   23928:	ldrd	sl, [sp, #24]
   2392c:	add	sp, sp, #32
   23930:	pop	{pc}		; (ldr pc, [sp], #4)
   23934:	mov	r0, r8
   23938:	bl	17998 <__assert_fail@plt+0x686c>
   2393c:	b	23914 <__assert_fail@plt+0x127e8>
   23940:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23944:	mov	r5, #0
   23948:	movt	r5, #32752	; 0x7ff0
   2394c:	mov	r4, r2
   23950:	strd	r6, [sp, #8]
   23954:	mov	r7, r1
   23958:	str	r8, [sp, #16]
   2395c:	mov	r8, r0
   23960:	str	lr, [sp, #20]
   23964:	mov	r2, r4
   23968:	mov	r1, r7
   2396c:	mov	r0, r8
   23970:	bl	1106c <write@plt>
   23974:	subs	r6, r0, #0
   23978:	bge	239ac <__assert_fail@plt+0x12880>
   2397c:	bl	11024 <__errno_location@plt>
   23980:	ldr	r2, [r0]
   23984:	cmp	r2, #4
   23988:	beq	23964 <__assert_fail@plt+0x12838>
   2398c:	sub	r3, r2, #22
   23990:	cmp	r4, r5
   23994:	clz	r3, r3
   23998:	mov	r4, r5
   2399c:	lsr	r3, r3, #5
   239a0:	movls	r3, #0
   239a4:	cmp	r3, #0
   239a8:	bne	23964 <__assert_fail@plt+0x12838>
   239ac:	mov	r0, r6
   239b0:	ldrd	r4, [sp]
   239b4:	ldrd	r6, [sp, #8]
   239b8:	ldr	r8, [sp, #16]
   239bc:	add	sp, sp, #20
   239c0:	pop	{pc}		; (ldr pc, [sp], #4)
   239c4:	strd	r4, [sp, #-16]!
   239c8:	mov	r4, r1
   239cc:	mov	r1, #0
   239d0:	mov	r2, r4
   239d4:	mov	r5, r0
   239d8:	str	r6, [sp, #8]
   239dc:	str	lr, [sp, #12]
   239e0:	bl	11090 <memchr@plt>
   239e4:	cmp	r0, #0
   239e8:	ldr	r6, [sp, #8]
   239ec:	subne	r0, r0, r5
   239f0:	moveq	r0, r4
   239f4:	ldrd	r4, [sp]
   239f8:	add	sp, sp, #12
   239fc:	addne	r0, r0, #1
   23a00:	pop	{pc}		; (ldr pc, [sp], #4)
   23a04:	movw	r3, #45612	; 0xb22c
   23a08:	movt	r3, #2
   23a0c:	str	r4, [sp, #-8]!
   23a10:	movw	r1, #45632	; 0xb240
   23a14:	movt	r1, #2
   23a18:	str	lr, [sp, #4]
   23a1c:	movw	r0, #45300	; 0xb0f4
   23a20:	movt	r0, #2
   23a24:	mov	r2, #163	; 0xa3
   23a28:	bl	1112c <__assert_fail@plt>
   23a2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23a30:	strd	r6, [sp, #8]
   23a34:	mov	r7, r1
   23a38:	strd	r8, [sp, #16]
   23a3c:	strd	sl, [sp, #24]
   23a40:	str	lr, [sp, #32]
   23a44:	sub	sp, sp, #76	; 0x4c
   23a48:	bl	10f10 <strdup@plt>
   23a4c:	subs	r5, r0, #0
   23a50:	beq	23f00 <__assert_fail@plt+0x12dd4>
   23a54:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   23a58:	cmp	r0, #1
   23a5c:	bls	23c8c <__assert_fail@plt+0x12b60>
   23a60:	cmp	r7, #0
   23a64:	bne	23d84 <__assert_fail@plt+0x12c58>
   23a68:	mov	r0, r5
   23a6c:	str	r5, [sp, #32]
   23a70:	mov	sl, #0
   23a74:	bl	1100c <strlen@plt>
   23a78:	add	r7, r5, r0
   23a7c:	mov	r2, #0
   23a80:	mov	r3, #0
   23a84:	cmp	r7, r5
   23a88:	str	r7, [sp, #12]
   23a8c:	strb	sl, [sp, #16]
   23a90:	strd	r2, [sp, #20]
   23a94:	strb	sl, [sp, #28]
   23a98:	bls	23c40 <__assert_fail@plt+0x12b14>
   23a9c:	movw	fp, #46472	; 0xb588
   23aa0:	movt	fp, #2
   23aa4:	str	sl, [sp, #4]
   23aa8:	mov	r6, sl
   23aac:	mov	r4, r5
   23ab0:	mov	r9, #1
   23ab4:	b	23ae8 <__assert_fail@plt+0x129bc>
   23ab8:	ldrb	r3, [sp, #40]	; 0x28
   23abc:	cmp	r3, #0
   23ac0:	beq	23b6c <__assert_fail@plt+0x12a40>
   23ac4:	ldr	r0, [sp, #44]	; 0x2c
   23ac8:	bl	11000 <iswspace@plt>
   23acc:	clz	r6, r0
   23ad0:	lsr	r6, r6, #5
   23ad4:	mov	r3, #0
   23ad8:	cmp	r4, r7
   23adc:	strb	r3, [sp, #28]
   23ae0:	str	r4, [sp, #32]
   23ae4:	bcs	23d54 <__assert_fail@plt+0x12c28>
   23ae8:	ldrb	r3, [sp, #16]
   23aec:	cmp	r3, #0
   23af0:	addne	r8, sp, #20
   23af4:	bne	23b8c <__assert_fail@plt+0x12a60>
   23af8:	ldrb	r3, [r4]
   23afc:	lsr	r2, r3, #5
   23b00:	and	r3, r3, #31
   23b04:	ldr	r2, [fp, r2, lsl #2]
   23b08:	lsr	r3, r2, r3
   23b0c:	tst	r3, #1
   23b10:	beq	23b74 <__assert_fail@plt+0x12a48>
   23b14:	str	r9, [sp, #36]	; 0x24
   23b18:	ldr	sl, [sp, #32]
   23b1c:	ldrb	r2, [r4]
   23b20:	strb	r9, [sp, #40]	; 0x28
   23b24:	ldr	r7, [sp, #12]
   23b28:	add	r4, sl, #1
   23b2c:	str	r2, [sp, #44]	; 0x2c
   23b30:	cmp	r6, #0
   23b34:	strb	r9, [sp, #28]
   23b38:	beq	23ab8 <__assert_fail@plt+0x1298c>
   23b3c:	cmp	r6, #1
   23b40:	beq	23c60 <__assert_fail@plt+0x12b34>
   23b44:	cmp	r6, #2
   23b48:	bne	23b6c <__assert_fail@plt+0x12a40>
   23b4c:	ldrb	r3, [sp, #40]	; 0x28
   23b50:	cmp	r3, #0
   23b54:	beq	23b6c <__assert_fail@plt+0x12a40>
   23b58:	ldr	r0, [sp, #44]	; 0x2c
   23b5c:	bl	11000 <iswspace@plt>
   23b60:	cmp	r0, #0
   23b64:	moveq	r6, #1
   23b68:	b	23ad4 <__assert_fail@plt+0x129a8>
   23b6c:	mov	r6, #1
   23b70:	b	23ad4 <__assert_fail@plt+0x129a8>
   23b74:	add	r8, sp, #20
   23b78:	mov	r0, r8
   23b7c:	bl	10ee0 <mbsinit@plt>
   23b80:	cmp	r0, #0
   23b84:	beq	23f24 <__assert_fail@plt+0x12df8>
   23b88:	strb	r9, [sp, #16]
   23b8c:	sub	r2, r7, r4
   23b90:	mov	r1, r4
   23b94:	mov	r3, r8
   23b98:	add	r0, sp, #44	; 0x2c
   23b9c:	bl	24f48 <__assert_fail@plt+0x13e1c>
   23ba0:	cmn	r0, #1
   23ba4:	mov	r4, r0
   23ba8:	str	r0, [sp, #36]	; 0x24
   23bac:	beq	23d38 <__assert_fail@plt+0x12c0c>
   23bb0:	cmn	r0, #2
   23bb4:	ldr	sl, [sp, #32]
   23bb8:	beq	23d68 <__assert_fail@plt+0x12c3c>
   23bbc:	cmp	r0, #0
   23bc0:	bne	23be4 <__assert_fail@plt+0x12ab8>
   23bc4:	str	r9, [sp, #36]	; 0x24
   23bc8:	ldrb	r2, [sl]
   23bcc:	cmp	r2, #0
   23bd0:	bne	23f04 <__assert_fail@plt+0x12dd8>
   23bd4:	ldr	r2, [sp, #44]	; 0x2c
   23bd8:	cmp	r2, #0
   23bdc:	bne	23ef4 <__assert_fail@plt+0x12dc8>
   23be0:	mov	r4, #1
   23be4:	mov	r0, r8
   23be8:	strb	r9, [sp, #40]	; 0x28
   23bec:	add	r4, sl, r4
   23bf0:	bl	10ee0 <mbsinit@plt>
   23bf4:	cmp	r0, #0
   23bf8:	ldr	r7, [sp, #12]
   23bfc:	movne	r2, #0
   23c00:	strbne	r2, [sp, #16]
   23c04:	b	23b30 <__assert_fail@plt+0x12a04>
   23c08:	ldr	r4, [sp, #32]
   23c0c:	mov	r3, #1
   23c10:	mov	r2, #0
   23c14:	strb	r3, [sp, #28]
   23c18:	str	r3, [sp, #36]	; 0x24
   23c1c:	strb	r2, [sp, #40]	; 0x28
   23c20:	mov	r0, r4
   23c24:	bl	1100c <strlen@plt>
   23c28:	add	r2, r0, #1
   23c2c:	mov	r1, r4
   23c30:	mov	r0, r5
   23c34:	bl	10eb0 <memmove@plt>
   23c38:	cmp	r7, #1
   23c3c:	bne	23a68 <__assert_fail@plt+0x1293c>
   23c40:	mov	r0, r5
   23c44:	add	sp, sp, #76	; 0x4c
   23c48:	ldrd	r4, [sp]
   23c4c:	ldrd	r6, [sp, #8]
   23c50:	ldrd	r8, [sp, #16]
   23c54:	ldrd	sl, [sp, #24]
   23c58:	add	sp, sp, #32
   23c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   23c60:	ldrb	r2, [sp, #40]	; 0x28
   23c64:	cmp	r2, #0
   23c68:	beq	23ad4 <__assert_fail@plt+0x129a8>
   23c6c:	ldr	r0, [sp, #44]	; 0x2c
   23c70:	bl	11000 <iswspace@plt>
   23c74:	ldr	r3, [sp, #4]
   23c78:	cmp	r0, #0
   23c7c:	movne	r3, sl
   23c80:	movne	r6, #2
   23c84:	str	r3, [sp, #4]
   23c88:	b	23ad4 <__assert_fail@plt+0x129a8>
   23c8c:	cmp	r7, #0
   23c90:	beq	23cec <__assert_fail@plt+0x12bc0>
   23c94:	ldrb	r4, [r5]
   23c98:	cmp	r4, #0
   23c9c:	beq	23ef8 <__assert_fail@plt+0x12dcc>
   23ca0:	bl	10fe8 <__ctype_b_loc@plt>
   23ca4:	mov	r6, r5
   23ca8:	ldr	r2, [r0]
   23cac:	b	23cbc <__assert_fail@plt+0x12b90>
   23cb0:	ldrb	r4, [r6, #1]!
   23cb4:	cmp	r4, #0
   23cb8:	beq	23ccc <__assert_fail@plt+0x12ba0>
   23cbc:	lsl	r4, r4, #1
   23cc0:	ldrh	r3, [r2, r4]
   23cc4:	tst	r3, #8192	; 0x2000
   23cc8:	bne	23cb0 <__assert_fail@plt+0x12b84>
   23ccc:	mov	r0, r6
   23cd0:	bl	1100c <strlen@plt>
   23cd4:	add	r2, r0, #1
   23cd8:	mov	r1, r6
   23cdc:	mov	r0, r5
   23ce0:	bl	10eb0 <memmove@plt>
   23ce4:	cmp	r7, #1
   23ce8:	beq	23c40 <__assert_fail@plt+0x12b14>
   23cec:	mov	r0, r5
   23cf0:	bl	1100c <strlen@plt>
   23cf4:	sub	r0, r0, #1
   23cf8:	adds	r4, r5, r0
   23cfc:	bcs	23c40 <__assert_fail@plt+0x12b14>
   23d00:	bl	10fe8 <__ctype_b_loc@plt>
   23d04:	mov	r3, r4
   23d08:	mov	ip, #0
   23d0c:	ldr	r1, [r0]
   23d10:	b	23d20 <__assert_fail@plt+0x12bf4>
   23d14:	cmp	r5, r3
   23d18:	strb	ip, [r3, #1]
   23d1c:	bhi	23c40 <__assert_fail@plt+0x12b14>
   23d20:	ldrb	r2, [r3], #-1
   23d24:	lsl	r2, r2, #1
   23d28:	ldrh	r2, [r1, r2]
   23d2c:	tst	r2, #8192	; 0x2000
   23d30:	bne	23d14 <__assert_fail@plt+0x12be8>
   23d34:	b	23c40 <__assert_fail@plt+0x12b14>
   23d38:	mov	r2, #0
   23d3c:	str	r9, [sp, #36]	; 0x24
   23d40:	ldr	sl, [sp, #32]
   23d44:	strb	r2, [sp, #40]	; 0x28
   23d48:	ldr	r7, [sp, #12]
   23d4c:	add	r4, sl, #1
   23d50:	b	23b30 <__assert_fail@plt+0x12a04>
   23d54:	cmp	r6, #2
   23d58:	bne	23c40 <__assert_fail@plt+0x12b14>
   23d5c:	ldr	r2, [sp, #4]
   23d60:	strb	r3, [r2]
   23d64:	b	23c40 <__assert_fail@plt+0x12b14>
   23d68:	ldr	r4, [sp, #12]
   23d6c:	mov	r2, #0
   23d70:	strb	r2, [sp, #40]	; 0x28
   23d74:	sub	r2, r4, sl
   23d78:	mov	r7, r4
   23d7c:	str	r2, [sp, #36]	; 0x24
   23d80:	b	23b30 <__assert_fail@plt+0x12a04>
   23d84:	mov	r0, r5
   23d88:	str	r5, [sp, #32]
   23d8c:	bl	1100c <strlen@plt>
   23d90:	add	r6, r5, r0
   23d94:	mov	r3, #0
   23d98:	mov	r0, #0
   23d9c:	mov	r1, #0
   23da0:	cmp	r6, r5
   23da4:	str	r6, [sp, #12]
   23da8:	movls	r4, r5
   23dac:	strb	r3, [sp, #16]
   23db0:	strd	r0, [sp, #20]
   23db4:	strb	r3, [sp, #28]
   23db8:	bls	23c20 <__assert_fail@plt+0x12af4>
   23dbc:	movw	sl, #46472	; 0xb588
   23dc0:	movt	sl, #2
   23dc4:	mov	r4, r5
   23dc8:	mov	r9, #1
   23dcc:	b	23e34 <__assert_fail@plt+0x12d08>
   23dd0:	ldrb	r3, [r4]
   23dd4:	lsr	r2, r3, #5
   23dd8:	and	r3, r3, #31
   23ddc:	ldr	r2, [sl, r2, lsl #2]
   23de0:	lsr	r3, r2, r3
   23de4:	tst	r3, #1
   23de8:	beq	23e9c <__assert_fail@plt+0x12d70>
   23dec:	str	r9, [sp, #36]	; 0x24
   23df0:	ldrb	r6, [r4]
   23df4:	strb	r9, [sp, #28]
   23df8:	ldr	r4, [sp, #32]
   23dfc:	strb	r9, [sp, #40]	; 0x28
   23e00:	str	r6, [sp, #44]	; 0x2c
   23e04:	mov	r0, r6
   23e08:	bl	11000 <iswspace@plt>
   23e0c:	cmp	r0, #0
   23e10:	beq	23c20 <__assert_fail@plt+0x12af4>
   23e14:	ldr	r6, [sp, #12]
   23e18:	mov	r2, #0
   23e1c:	ldr	r3, [sp, #36]	; 0x24
   23e20:	strb	r2, [sp, #28]
   23e24:	add	r4, r4, r3
   23e28:	cmp	r4, r6
   23e2c:	str	r4, [sp, #32]
   23e30:	bcs	23c20 <__assert_fail@plt+0x12af4>
   23e34:	ldrb	r3, [sp, #16]
   23e38:	cmp	r3, #0
   23e3c:	addne	r8, sp, #20
   23e40:	beq	23dd0 <__assert_fail@plt+0x12ca4>
   23e44:	sub	r2, r6, r4
   23e48:	mov	r1, r4
   23e4c:	mov	r3, r8
   23e50:	add	r0, sp, #44	; 0x2c
   23e54:	bl	24f48 <__assert_fail@plt+0x13e1c>
   23e58:	cmn	r0, #1
   23e5c:	str	r0, [sp, #36]	; 0x24
   23e60:	beq	23c08 <__assert_fail@plt+0x12adc>
   23e64:	cmn	r0, #2
   23e68:	ldr	r4, [sp, #32]
   23e6c:	beq	23eb8 <__assert_fail@plt+0x12d8c>
   23e70:	cmp	r0, #0
   23e74:	beq	23ed8 <__assert_fail@plt+0x12dac>
   23e78:	ldr	r6, [sp, #44]	; 0x2c
   23e7c:	mov	r0, r8
   23e80:	strb	r9, [sp, #40]	; 0x28
   23e84:	bl	10ee0 <mbsinit@plt>
   23e88:	cmp	r0, #0
   23e8c:	strb	r9, [sp, #28]
   23e90:	movne	r3, #0
   23e94:	strbne	r3, [sp, #16]
   23e98:	b	23e04 <__assert_fail@plt+0x12cd8>
   23e9c:	add	r8, sp, #20
   23ea0:	mov	r0, r8
   23ea4:	bl	10ee0 <mbsinit@plt>
   23ea8:	cmp	r0, #0
   23eac:	beq	23f24 <__assert_fail@plt+0x12df8>
   23eb0:	strb	r9, [sp, #16]
   23eb4:	b	23e44 <__assert_fail@plt+0x12d18>
   23eb8:	ldr	r3, [sp, #12]
   23ebc:	mov	r2, #0
   23ec0:	mov	r1, #1
   23ec4:	strb	r1, [sp, #28]
   23ec8:	strb	r2, [sp, #40]	; 0x28
   23ecc:	sub	r3, r3, r4
   23ed0:	str	r3, [sp, #36]	; 0x24
   23ed4:	b	23c20 <__assert_fail@plt+0x12af4>
   23ed8:	str	r9, [sp, #36]	; 0x24
   23edc:	ldrb	r3, [r4]
   23ee0:	cmp	r3, #0
   23ee4:	bne	23f04 <__assert_fail@plt+0x12dd8>
   23ee8:	ldr	r6, [sp, #44]	; 0x2c
   23eec:	cmp	r6, #0
   23ef0:	beq	23e7c <__assert_fail@plt+0x12d50>
   23ef4:	bl	23a04 <__assert_fail@plt+0x128d8>
   23ef8:	mov	r6, r5
   23efc:	b	23ccc <__assert_fail@plt+0x12ba0>
   23f00:	bl	24950 <__assert_fail@plt+0x13824>
   23f04:	movw	r3, #45612	; 0xb22c
   23f08:	movt	r3, #2
   23f0c:	movw	r1, #45632	; 0xb240
   23f10:	movt	r1, #2
   23f14:	movw	r0, #45344	; 0xb120
   23f18:	movt	r0, #2
   23f1c:	mov	r2, #162	; 0xa2
   23f20:	bl	1112c <__assert_fail@plt>
   23f24:	movw	r3, #45612	; 0xb22c
   23f28:	movt	r3, #2
   23f2c:	movw	r1, #45632	; 0xb240
   23f30:	movt	r1, #2
   23f34:	movw	r0, #45320	; 0xb108
   23f38:	movt	r0, #2
   23f3c:	mov	r2, #135	; 0x87
   23f40:	bl	1112c <__assert_fail@plt>
   23f44:	cmp	r1, #0
   23f48:	strd	r4, [sp, #-16]!
   23f4c:	mov	ip, r3
   23f50:	str	r6, [sp, #8]
   23f54:	mov	r4, r0
   23f58:	str	lr, [sp, #12]
   23f5c:	sub	sp, sp, #32
   23f60:	ldr	r5, [sp, #48]	; 0x30
   23f64:	ldr	r6, [sp, #52]	; 0x34
   23f68:	beq	240ac <__assert_fail@plt+0x12f80>
   23f6c:	mov	r3, r1
   23f70:	mov	r1, #1
   23f74:	stm	sp, {r2, ip}
   23f78:	movw	r2, #45648	; 0xb250
   23f7c:	movt	r2, #2
   23f80:	bl	11084 <__fprintf_chk@plt>
   23f84:	mov	r2, #5
   23f88:	movw	r1, #45668	; 0xb264
   23f8c:	movt	r1, #2
   23f90:	mov	r0, #0
   23f94:	bl	10f04 <dcgettext@plt>
   23f98:	movw	ip, #2022	; 0x7e6
   23f9c:	mov	r3, r0
   23fa0:	mov	r1, #1
   23fa4:	movw	r2, #46396	; 0xb53c
   23fa8:	movt	r2, #2
   23fac:	mov	r0, r4
   23fb0:	str	ip, [sp]
   23fb4:	bl	11084 <__fprintf_chk@plt>
   23fb8:	mov	r1, r4
   23fbc:	mov	r0, #10
   23fc0:	bl	10ef8 <fputc_unlocked@plt>
   23fc4:	mov	r2, #5
   23fc8:	movw	r1, #45672	; 0xb268
   23fcc:	movt	r1, #2
   23fd0:	mov	r0, #0
   23fd4:	bl	10f04 <dcgettext@plt>
   23fd8:	mov	r2, r0
   23fdc:	mov	r1, #1
   23fe0:	movw	r3, #45844	; 0xb314
   23fe4:	movt	r3, #2
   23fe8:	mov	r0, r4
   23fec:	bl	11084 <__fprintf_chk@plt>
   23ff0:	mov	r1, r4
   23ff4:	mov	r0, #10
   23ff8:	bl	10ef8 <fputc_unlocked@plt>
   23ffc:	cmp	r6, #9
   24000:	ldrls	pc, [pc, r6, lsl #2]
   24004:	b	24318 <__assert_fail@plt+0x131ec>
   24008:	muleq	r2, r8, r0
   2400c:	andeq	r4, r2, r8, asr #1
   24010:	andeq	r4, r2, r4, lsl #2
   24014:	andeq	r4, r2, r4, asr #2
   24018:	andeq	r4, r2, ip, lsl #3
   2401c:	andeq	r4, r2, r4, asr #3
   24020:	andeq	r4, r2, ip, lsl #4
   24024:	andeq	r4, r2, r0, ror #4
   24028:			; <UNDEFINED> instruction: 0x000242b8
   2402c:	andeq	r4, r2, r0, lsr r0
   24030:	movw	r1, #46148	; 0xb444
   24034:	movt	r1, #2
   24038:	mov	r2, #5
   2403c:	mov	r0, #0
   24040:	bl	10f04 <dcgettext@plt>
   24044:	ldr	lr, [r5, #4]
   24048:	mov	r2, r0
   2404c:	mov	r1, #1
   24050:	mov	r0, r4
   24054:	ldr	r3, [r5, #8]
   24058:	ldr	ip, [r5, #32]
   2405c:	str	lr, [sp]
   24060:	ldr	lr, [r5, #12]
   24064:	str	ip, [sp, #28]
   24068:	ldr	ip, [r5, #28]
   2406c:	str	r3, [sp, #4]
   24070:	ldr	r3, [r5, #16]
   24074:	str	lr, [sp, #8]
   24078:	ldr	lr, [r5, #20]
   2407c:	str	ip, [sp, #24]
   24080:	ldr	ip, [r5, #24]
   24084:	str	r3, [sp, #12]
   24088:	ldr	r3, [r5]
   2408c:	str	lr, [sp, #16]
   24090:	str	ip, [sp, #20]
   24094:	bl	11084 <__fprintf_chk@plt>
   24098:	add	sp, sp, #32
   2409c:	ldrd	r4, [sp]
   240a0:	ldr	r6, [sp, #8]
   240a4:	add	sp, sp, #12
   240a8:	pop	{pc}		; (ldr pc, [sp], #4)
   240ac:	mov	r3, r2
   240b0:	mov	r1, #1
   240b4:	str	ip, [sp]
   240b8:	movw	r2, #45660	; 0xb25c
   240bc:	movt	r2, #2
   240c0:	bl	11084 <__fprintf_chk@plt>
   240c4:	b	23f84 <__assert_fail@plt+0x12e58>
   240c8:	mov	r2, #5
   240cc:	movw	r1, #45880	; 0xb338
   240d0:	movt	r1, #2
   240d4:	mov	r0, #0
   240d8:	bl	10f04 <dcgettext@plt>
   240dc:	ldr	r3, [r5]
   240e0:	mov	r2, r0
   240e4:	mov	r1, #1
   240e8:	mov	r0, r4
   240ec:	add	sp, sp, #32
   240f0:	ldrd	r4, [sp]
   240f4:	ldr	r6, [sp, #8]
   240f8:	ldr	lr, [sp, #12]
   240fc:	add	sp, sp, #16
   24100:	b	11084 <__fprintf_chk@plt>
   24104:	mov	r2, #5
   24108:	movw	r1, #45896	; 0xb348
   2410c:	movt	r1, #2
   24110:	mov	r0, #0
   24114:	bl	10f04 <dcgettext@plt>
   24118:	ldm	r5, {r3, ip}
   2411c:	mov	r2, r0
   24120:	mov	r1, #1
   24124:	mov	r0, r4
   24128:	str	ip, [sp, #48]	; 0x30
   2412c:	add	sp, sp, #32
   24130:	ldrd	r4, [sp]
   24134:	ldr	r6, [sp, #8]
   24138:	ldr	lr, [sp, #12]
   2413c:	add	sp, sp, #16
   24140:	b	11084 <__fprintf_chk@plt>
   24144:	mov	r2, #5
   24148:	movw	r1, #45920	; 0xb360
   2414c:	movt	r1, #2
   24150:	mov	r0, #0
   24154:	bl	10f04 <dcgettext@plt>
   24158:	ldm	r5, {r3, lr}
   2415c:	mov	r2, r0
   24160:	mov	r1, #1
   24164:	mov	r0, r4
   24168:	ldr	ip, [r5, #8]
   2416c:	str	lr, [sp, #48]	; 0x30
   24170:	str	ip, [sp, #52]	; 0x34
   24174:	add	sp, sp, #32
   24178:	ldrd	r4, [sp]
   2417c:	ldr	r6, [sp, #8]
   24180:	ldr	lr, [sp, #12]
   24184:	add	sp, sp, #16
   24188:	b	11084 <__fprintf_chk@plt>
   2418c:	mov	r2, #5
   24190:	movw	r1, #45948	; 0xb37c
   24194:	movt	r1, #2
   24198:	mov	r0, #0
   2419c:	bl	10f04 <dcgettext@plt>
   241a0:	ldmib	r5, {r3, ip, lr}
   241a4:	mov	r2, r0
   241a8:	mov	r1, #1
   241ac:	mov	r0, r4
   241b0:	str	r3, [sp]
   241b4:	ldr	r3, [r5]
   241b8:	stmib	sp, {ip, lr}
   241bc:	bl	11084 <__fprintf_chk@plt>
   241c0:	b	24098 <__assert_fail@plt+0x12f6c>
   241c4:	mov	r2, #5
   241c8:	movw	r1, #45980	; 0xb39c
   241cc:	movt	r1, #2
   241d0:	mov	r0, #0
   241d4:	bl	10f04 <dcgettext@plt>
   241d8:	ldmib	r5, {ip, lr}
   241dc:	mov	r2, r0
   241e0:	mov	r1, #1
   241e4:	mov	r0, r4
   241e8:	ldr	r3, [r5, #16]
   241ec:	str	ip, [sp]
   241f0:	ldr	ip, [r5, #12]
   241f4:	str	r3, [sp, #12]
   241f8:	ldr	r3, [r5]
   241fc:	str	lr, [sp, #4]
   24200:	str	ip, [sp, #8]
   24204:	bl	11084 <__fprintf_chk@plt>
   24208:	b	24098 <__assert_fail@plt+0x12f6c>
   2420c:	mov	r2, #5
   24210:	movw	r1, #46016	; 0xb3c0
   24214:	movt	r1, #2
   24218:	mov	r0, #0
   2421c:	bl	10f04 <dcgettext@plt>
   24220:	ldr	lr, [r5, #4]
   24224:	mov	r2, r0
   24228:	mov	r1, #1
   2422c:	mov	r0, r4
   24230:	ldr	r3, [r5, #8]
   24234:	ldr	ip, [r5, #20]
   24238:	str	lr, [sp]
   2423c:	ldr	lr, [r5, #12]
   24240:	str	ip, [sp, #16]
   24244:	ldr	ip, [r5, #16]
   24248:	str	r3, [sp, #4]
   2424c:	ldr	r3, [r5]
   24250:	str	lr, [sp, #8]
   24254:	str	ip, [sp, #12]
   24258:	bl	11084 <__fprintf_chk@plt>
   2425c:	b	24098 <__assert_fail@plt+0x12f6c>
   24260:	mov	r2, #5
   24264:	movw	r1, #46056	; 0xb3e8
   24268:	movt	r1, #2
   2426c:	mov	r0, #0
   24270:	bl	10f04 <dcgettext@plt>
   24274:	ldmib	r5, {r3, ip}
   24278:	mov	r2, r0
   2427c:	mov	r1, #1
   24280:	mov	r0, r4
   24284:	ldr	lr, [r5, #24]
   24288:	str	r3, [sp]
   2428c:	ldr	r3, [r5, #12]
   24290:	str	lr, [sp, #20]
   24294:	ldr	lr, [r5, #20]
   24298:	str	ip, [sp, #4]
   2429c:	ldr	ip, [r5, #16]
   242a0:	str	r3, [sp, #8]
   242a4:	ldr	r3, [r5]
   242a8:	str	ip, [sp, #12]
   242ac:	str	lr, [sp, #16]
   242b0:	bl	11084 <__fprintf_chk@plt>
   242b4:	b	24098 <__assert_fail@plt+0x12f6c>
   242b8:	mov	r2, #5
   242bc:	movw	r1, #46100	; 0xb414
   242c0:	movt	r1, #2
   242c4:	mov	r0, #0
   242c8:	bl	10f04 <dcgettext@plt>
   242cc:	ldmib	r5, {ip, lr}
   242d0:	mov	r2, r0
   242d4:	mov	r1, #1
   242d8:	mov	r0, r4
   242dc:	ldr	r3, [r5, #28]
   242e0:	str	ip, [sp]
   242e4:	ldr	ip, [r5, #12]
   242e8:	str	r3, [sp, #24]
   242ec:	ldr	r3, [r5, #24]
   242f0:	str	lr, [sp, #4]
   242f4:	ldr	lr, [r5, #16]
   242f8:	str	ip, [sp, #8]
   242fc:	ldr	ip, [r5, #20]
   24300:	str	r3, [sp, #20]
   24304:	ldr	r3, [r5]
   24308:	str	lr, [sp, #12]
   2430c:	str	ip, [sp, #16]
   24310:	bl	11084 <__fprintf_chk@plt>
   24314:	b	24098 <__assert_fail@plt+0x12f6c>
   24318:	movw	r1, #46200	; 0xb478
   2431c:	movt	r1, #2
   24320:	b	24038 <__assert_fail@plt+0x12f0c>
   24324:	strd	r4, [sp, #-12]!
   24328:	str	lr, [sp, #8]
   2432c:	sub	sp, sp, #12
   24330:	ldr	r5, [sp, #24]
   24334:	ldr	ip, [r5]
   24338:	cmp	ip, #0
   2433c:	beq	24358 <__assert_fail@plt+0x1322c>
   24340:	mov	lr, r5
   24344:	mov	ip, #0
   24348:	ldr	r4, [lr, #4]!
   2434c:	add	ip, ip, #1
   24350:	cmp	r4, #0
   24354:	bne	24348 <__assert_fail@plt+0x1321c>
   24358:	stm	sp, {r5, ip}
   2435c:	bl	23f44 <__assert_fail@plt+0x12e18>
   24360:	add	sp, sp, #12
   24364:	ldrd	r4, [sp]
   24368:	add	sp, sp, #8
   2436c:	pop	{pc}		; (ldr pc, [sp], #4)
   24370:	strd	r4, [sp, #-16]!
   24374:	mov	ip, #0
   24378:	str	r6, [sp, #8]
   2437c:	str	lr, [sp, #12]
   24380:	sub	sp, sp, #48	; 0x30
   24384:	ldr	r5, [sp, #64]	; 0x40
   24388:	add	r6, sp, #8
   2438c:	mov	r4, r6
   24390:	ldr	lr, [r5], #4
   24394:	cmp	lr, #0
   24398:	str	lr, [r4], #4
   2439c:	beq	243ac <__assert_fail@plt+0x13280>
   243a0:	add	ip, ip, #1
   243a4:	cmp	ip, #10
   243a8:	bne	24390 <__assert_fail@plt+0x13264>
   243ac:	stm	sp, {r6, ip}
   243b0:	bl	23f44 <__assert_fail@plt+0x12e18>
   243b4:	add	sp, sp, #48	; 0x30
   243b8:	ldrd	r4, [sp]
   243bc:	ldr	r6, [sp, #8]
   243c0:	add	sp, sp, #12
   243c4:	pop	{pc}		; (ldr pc, [sp], #4)
   243c8:	push	{r3}		; (str r3, [sp, #-4]!)
   243cc:	mov	ip, #0
   243d0:	strd	r4, [sp, #-12]!
   243d4:	str	lr, [sp, #8]
   243d8:	sub	sp, sp, #56	; 0x38
   243dc:	add	r3, sp, #72	; 0x48
   243e0:	add	r5, sp, #16
   243e4:	mov	r4, r3
   243e8:	mov	lr, r5
   243ec:	str	r3, [sp, #12]
   243f0:	ldr	r3, [r4], #4
   243f4:	cmp	r3, #0
   243f8:	str	r3, [lr], #4
   243fc:	beq	2440c <__assert_fail@plt+0x132e0>
   24400:	add	ip, ip, #1
   24404:	cmp	ip, #10
   24408:	bne	243f0 <__assert_fail@plt+0x132c4>
   2440c:	ldr	r3, [sp, #68]	; 0x44
   24410:	stm	sp, {r5, ip}
   24414:	bl	23f44 <__assert_fail@plt+0x12e18>
   24418:	add	sp, sp, #56	; 0x38
   2441c:	ldrd	r4, [sp]
   24420:	ldr	lr, [sp, #8]
   24424:	add	sp, sp, #12
   24428:	add	sp, sp, #4
   2442c:	bx	lr
   24430:	movw	r3, #49540	; 0xc184
   24434:	movt	r3, #3
   24438:	str	r4, [sp, #-8]!
   2443c:	mov	r0, #10
   24440:	ldr	r1, [r3]
   24444:	str	lr, [sp, #4]
   24448:	bl	10ef8 <fputc_unlocked@plt>
   2444c:	mov	r2, #5
   24450:	movw	r1, #46260	; 0xb4b4
   24454:	movt	r1, #2
   24458:	mov	r0, #0
   2445c:	bl	10f04 <dcgettext@plt>
   24460:	mov	r1, r0
   24464:	movw	r2, #46280	; 0xb4c8
   24468:	movt	r2, #2
   2446c:	mov	r0, #1
   24470:	bl	11060 <__printf_chk@plt>
   24474:	mov	r2, #5
   24478:	movw	r1, #46304	; 0xb4e0
   2447c:	movt	r1, #2
   24480:	mov	r0, #0
   24484:	bl	10f04 <dcgettext@plt>
   24488:	mov	r1, r0
   2448c:	movw	r3, #42536	; 0xa628
   24490:	movt	r3, #2
   24494:	movw	r2, #42576	; 0xa650
   24498:	movt	r2, #2
   2449c:	mov	r0, #1
   244a0:	bl	11060 <__printf_chk@plt>
   244a4:	mov	r2, #5
   244a8:	movw	r1, #46324	; 0xb4f4
   244ac:	movt	r1, #2
   244b0:	mov	r0, #0
   244b4:	bl	10f04 <dcgettext@plt>
   244b8:	mov	r1, r0
   244bc:	movw	r2, #46364	; 0xb51c
   244c0:	movt	r2, #2
   244c4:	mov	r0, #1
   244c8:	ldr	r4, [sp]
   244cc:	ldr	lr, [sp, #4]
   244d0:	add	sp, sp, #8
   244d4:	b	11060 <__printf_chk@plt>
   244d8:	str	r4, [sp, #-8]!
   244dc:	str	lr, [sp, #4]
   244e0:	bl	24ac0 <__assert_fail@plt+0x13994>
   244e4:	cmp	r0, #0
   244e8:	beq	244f8 <__assert_fail@plt+0x133cc>
   244ec:	ldr	r4, [sp]
   244f0:	add	sp, sp, #4
   244f4:	pop	{pc}		; (ldr pc, [sp], #4)
   244f8:	bl	24950 <__assert_fail@plt+0x13824>
   244fc:	str	r4, [sp, #-8]!
   24500:	str	lr, [sp, #4]
   24504:	bl	24ac0 <__assert_fail@plt+0x13994>
   24508:	cmp	r0, #0
   2450c:	beq	2451c <__assert_fail@plt+0x133f0>
   24510:	ldr	r4, [sp]
   24514:	add	sp, sp, #4
   24518:	pop	{pc}		; (ldr pc, [sp], #4)
   2451c:	bl	24950 <__assert_fail@plt+0x13824>
   24520:	str	r4, [sp, #-8]!
   24524:	str	lr, [sp, #4]
   24528:	bl	24ac0 <__assert_fail@plt+0x13994>
   2452c:	cmp	r0, #0
   24530:	beq	24540 <__assert_fail@plt+0x13414>
   24534:	ldr	r4, [sp]
   24538:	add	sp, sp, #4
   2453c:	pop	{pc}		; (ldr pc, [sp], #4)
   24540:	bl	24950 <__assert_fail@plt+0x13824>
   24544:	strd	r4, [sp, #-16]!
   24548:	mov	r5, r0
   2454c:	mov	r4, r1
   24550:	str	r6, [sp, #8]
   24554:	str	lr, [sp, #12]
   24558:	bl	24afc <__assert_fail@plt+0x139d0>
   2455c:	cmp	r0, #0
   24560:	beq	24574 <__assert_fail@plt+0x13448>
   24564:	ldrd	r4, [sp]
   24568:	ldr	r6, [sp, #8]
   2456c:	add	sp, sp, #12
   24570:	pop	{pc}		; (ldr pc, [sp], #4)
   24574:	adds	r4, r4, #0
   24578:	movne	r4, #1
   2457c:	cmp	r5, #0
   24580:	moveq	r4, #1
   24584:	cmp	r4, #0
   24588:	beq	24564 <__assert_fail@plt+0x13438>
   2458c:	bl	24950 <__assert_fail@plt+0x13824>
   24590:	cmp	r1, #0
   24594:	orreq	r1, r1, #1
   24598:	str	r4, [sp, #-8]!
   2459c:	str	lr, [sp, #4]
   245a0:	bl	24afc <__assert_fail@plt+0x139d0>
   245a4:	cmp	r0, #0
   245a8:	beq	245b8 <__assert_fail@plt+0x1348c>
   245ac:	ldr	r4, [sp]
   245b0:	add	sp, sp, #4
   245b4:	pop	{pc}		; (ldr pc, [sp], #4)
   245b8:	bl	24950 <__assert_fail@plt+0x13824>
   245bc:	strd	r4, [sp, #-16]!
   245c0:	mov	r4, r0
   245c4:	mov	r5, r2
   245c8:	str	r6, [sp, #8]
   245cc:	mov	r6, r1
   245d0:	str	lr, [sp, #12]
   245d4:	bl	26714 <__assert_fail@plt+0x155e8>
   245d8:	cmp	r0, #0
   245dc:	beq	245f0 <__assert_fail@plt+0x134c4>
   245e0:	ldrd	r4, [sp]
   245e4:	ldr	r6, [sp, #8]
   245e8:	add	sp, sp, #12
   245ec:	pop	{pc}		; (ldr pc, [sp], #4)
   245f0:	cmp	r4, #0
   245f4:	beq	24604 <__assert_fail@plt+0x134d8>
   245f8:	cmp	r6, #0
   245fc:	cmpne	r5, #0
   24600:	beq	245e0 <__assert_fail@plt+0x134b4>
   24604:	bl	24950 <__assert_fail@plt+0x13824>
   24608:	b	245bc <__assert_fail@plt+0x13490>
   2460c:	cmp	r2, #0
   24610:	cmpne	r1, #0
   24614:	str	r4, [sp, #-8]!
   24618:	moveq	r2, #1
   2461c:	str	lr, [sp, #4]
   24620:	moveq	r1, r2
   24624:	bl	26714 <__assert_fail@plt+0x155e8>
   24628:	cmp	r0, #0
   2462c:	beq	2463c <__assert_fail@plt+0x13510>
   24630:	ldr	r4, [sp]
   24634:	add	sp, sp, #4
   24638:	pop	{pc}		; (ldr pc, [sp], #4)
   2463c:	bl	24950 <__assert_fail@plt+0x13824>
   24640:	mov	r2, r1
   24644:	mov	r1, r0
   24648:	mov	r0, #0
   2464c:	b	245bc <__assert_fail@plt+0x13490>
   24650:	mov	r2, r1
   24654:	mov	r1, r0
   24658:	mov	r0, #0
   2465c:	b	2460c <__assert_fail@plt+0x134e0>
   24660:	cmp	r0, #0
   24664:	strd	r4, [sp, #-16]!
   24668:	mov	r5, r1
   2466c:	ldr	r4, [r1]
   24670:	str	r6, [sp, #8]
   24674:	str	lr, [sp, #12]
   24678:	beq	246a8 <__assert_fail@plt+0x1357c>
   2467c:	lsr	r3, r4, #1
   24680:	add	r3, r3, #1
   24684:	adds	r4, r4, r3
   24688:	bcs	246c4 <__assert_fail@plt+0x13598>
   2468c:	mov	r1, r4
   24690:	bl	245bc <__assert_fail@plt+0x13490>
   24694:	ldr	r6, [sp, #8]
   24698:	str	r4, [r5]
   2469c:	ldrd	r4, [sp]
   246a0:	add	sp, sp, #12
   246a4:	pop	{pc}		; (ldr pc, [sp], #4)
   246a8:	cmp	r4, #0
   246ac:	bne	2468c <__assert_fail@plt+0x13560>
   246b0:	mov	r4, #64	; 0x40
   246b4:	udiv	r4, r4, r2
   246b8:	cmp	r2, #64	; 0x40
   246bc:	addhi	r4, r4, #1
   246c0:	b	2468c <__assert_fail@plt+0x13560>
   246c4:	bl	24950 <__assert_fail@plt+0x13824>
   246c8:	mov	r2, #1
   246cc:	b	24660 <__assert_fail@plt+0x13534>
   246d0:	ldr	ip, [r1]
   246d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   246d8:	mov	r5, r1
   246dc:	strd	r6, [sp, #8]
   246e0:	str	lr, [sp, #28]
   246e4:	strd	r8, [sp, #16]
   246e8:	asr	lr, ip, #1
   246ec:	ldr	r8, [sp, #32]
   246f0:	str	sl, [sp, #24]
   246f4:	adds	r4, ip, lr
   246f8:	mvn	lr, r3
   246fc:	lsr	lr, lr, #31
   24700:	mvnvs	r4, #-2147483648	; 0x80000000
   24704:	cmp	r3, r4
   24708:	movge	r1, #0
   2470c:	andlt	r1, lr, #1
   24710:	cmp	r1, #0
   24714:	movne	r4, r3
   24718:	smull	r6, r7, r4, r8
   2471c:	cmp	r7, r6, asr #31
   24720:	bne	247a8 <__assert_fail@plt+0x1367c>
   24724:	cmp	r6, #63	; 0x3f
   24728:	mov	r1, r6
   2472c:	ble	24790 <__assert_fail@plt+0x13664>
   24730:	cmp	r0, #0
   24734:	sub	r6, r4, ip
   24738:	streq	r0, [r5]
   2473c:	cmp	r6, r2
   24740:	bge	24770 <__assert_fail@plt+0x13644>
   24744:	adds	r4, ip, r2
   24748:	bvs	247a4 <__assert_fail@plt+0x13678>
   2474c:	cmp	r4, r3
   24750:	movle	r3, #0
   24754:	andgt	r3, lr, #1
   24758:	cmp	r3, #0
   2475c:	bne	247a4 <__assert_fail@plt+0x13678>
   24760:	smull	r8, r9, r4, r8
   24764:	cmp	r9, r8, asr #31
   24768:	mov	r1, r8
   2476c:	bne	247a4 <__assert_fail@plt+0x13678>
   24770:	bl	24544 <__assert_fail@plt+0x13418>
   24774:	ldrd	r6, [sp, #8]
   24778:	ldrd	r8, [sp, #16]
   2477c:	ldr	sl, [sp, #24]
   24780:	str	r4, [r5]
   24784:	ldrd	r4, [sp]
   24788:	add	sp, sp, #28
   2478c:	pop	{pc}		; (ldr pc, [sp], #4)
   24790:	mov	r6, #64	; 0x40
   24794:	sdiv	r4, r6, r8
   24798:	mls	r1, r8, r4, r6
   2479c:	sub	r1, r6, r1
   247a0:	b	24730 <__assert_fail@plt+0x13604>
   247a4:	bl	24950 <__assert_fail@plt+0x13824>
   247a8:	mvn	r6, #-2147483648	; 0x80000000
   247ac:	b	24794 <__assert_fail@plt+0x13668>
   247b0:	mov	r1, #1
   247b4:	str	r4, [sp, #-8]!
   247b8:	str	lr, [sp, #4]
   247bc:	bl	24a4c <__assert_fail@plt+0x13920>
   247c0:	cmp	r0, #0
   247c4:	beq	247d4 <__assert_fail@plt+0x136a8>
   247c8:	ldr	r4, [sp]
   247cc:	add	sp, sp, #4
   247d0:	pop	{pc}		; (ldr pc, [sp], #4)
   247d4:	bl	24950 <__assert_fail@plt+0x13824>
   247d8:	mov	r1, #1
   247dc:	str	r4, [sp, #-8]!
   247e0:	str	lr, [sp, #4]
   247e4:	bl	24a4c <__assert_fail@plt+0x13920>
   247e8:	cmp	r0, #0
   247ec:	beq	247fc <__assert_fail@plt+0x136d0>
   247f0:	ldr	r4, [sp]
   247f4:	add	sp, sp, #4
   247f8:	pop	{pc}		; (ldr pc, [sp], #4)
   247fc:	bl	24950 <__assert_fail@plt+0x13824>
   24800:	str	r4, [sp, #-8]!
   24804:	str	lr, [sp, #4]
   24808:	bl	24a4c <__assert_fail@plt+0x13920>
   2480c:	cmp	r0, #0
   24810:	beq	24820 <__assert_fail@plt+0x136f4>
   24814:	ldr	r4, [sp]
   24818:	add	sp, sp, #4
   2481c:	pop	{pc}		; (ldr pc, [sp], #4)
   24820:	bl	24950 <__assert_fail@plt+0x13824>
   24824:	str	r4, [sp, #-8]!
   24828:	str	lr, [sp, #4]
   2482c:	bl	24a4c <__assert_fail@plt+0x13920>
   24830:	cmp	r0, #0
   24834:	beq	24844 <__assert_fail@plt+0x13718>
   24838:	ldr	r4, [sp]
   2483c:	add	sp, sp, #4
   24840:	pop	{pc}		; (ldr pc, [sp], #4)
   24844:	bl	24950 <__assert_fail@plt+0x13824>
   24848:	strd	r4, [sp, #-16]!
   2484c:	mov	r4, r1
   24850:	str	r6, [sp, #8]
   24854:	mov	r6, r0
   24858:	mov	r0, r1
   2485c:	str	lr, [sp, #12]
   24860:	bl	24ac0 <__assert_fail@plt+0x13994>
   24864:	subs	r5, r0, #0
   24868:	beq	2488c <__assert_fail@plt+0x13760>
   2486c:	mov	r2, r4
   24870:	mov	r1, r6
   24874:	bl	10ed4 <memcpy@plt>
   24878:	mov	r0, r5
   2487c:	ldrd	r4, [sp]
   24880:	ldr	r6, [sp, #8]
   24884:	add	sp, sp, #12
   24888:	pop	{pc}		; (ldr pc, [sp], #4)
   2488c:	bl	24950 <__assert_fail@plt+0x13824>
   24890:	strd	r4, [sp, #-16]!
   24894:	mov	r4, r1
   24898:	str	r6, [sp, #8]
   2489c:	mov	r6, r0
   248a0:	mov	r0, r1
   248a4:	str	lr, [sp, #12]
   248a8:	bl	24ac0 <__assert_fail@plt+0x13994>
   248ac:	subs	r5, r0, #0
   248b0:	beq	248d4 <__assert_fail@plt+0x137a8>
   248b4:	mov	r2, r4
   248b8:	mov	r1, r6
   248bc:	bl	10ed4 <memcpy@plt>
   248c0:	mov	r0, r5
   248c4:	ldrd	r4, [sp]
   248c8:	ldr	r6, [sp, #8]
   248cc:	add	sp, sp, #12
   248d0:	pop	{pc}		; (ldr pc, [sp], #4)
   248d4:	bl	24950 <__assert_fail@plt+0x13824>
   248d8:	strd	r4, [sp, #-16]!
   248dc:	mov	r4, r1
   248e0:	str	r6, [sp, #8]
   248e4:	mov	r6, r0
   248e8:	add	r0, r1, #1
   248ec:	str	lr, [sp, #12]
   248f0:	bl	24ac0 <__assert_fail@plt+0x13994>
   248f4:	subs	r5, r0, #0
   248f8:	beq	24924 <__assert_fail@plt+0x137f8>
   248fc:	mov	r3, #0
   24900:	mov	r1, r6
   24904:	mov	r2, r4
   24908:	strb	r3, [r5, r4]
   2490c:	bl	10ed4 <memcpy@plt>
   24910:	mov	r0, r5
   24914:	ldrd	r4, [sp]
   24918:	ldr	r6, [sp, #8]
   2491c:	add	sp, sp, #12
   24920:	pop	{pc}		; (ldr pc, [sp], #4)
   24924:	bl	24950 <__assert_fail@plt+0x13824>
   24928:	str	r4, [sp, #-8]!
   2492c:	mov	r4, r0
   24930:	str	lr, [sp, #4]
   24934:	bl	1100c <strlen@plt>
   24938:	add	r1, r0, #1
   2493c:	mov	r0, r4
   24940:	ldr	r4, [sp]
   24944:	ldr	lr, [sp, #4]
   24948:	add	sp, sp, #8
   2494c:	b	24848 <__assert_fail@plt+0x1371c>
   24950:	movw	r3, #49432	; 0xc118
   24954:	movt	r3, #3
   24958:	str	r4, [sp, #-8]!
   2495c:	ldr	r4, [r3]
   24960:	mov	r2, #5
   24964:	movw	r1, #46444	; 0xb56c
   24968:	movt	r1, #2
   2496c:	mov	r0, #0
   24970:	str	lr, [sp, #4]
   24974:	bl	10f04 <dcgettext@plt>
   24978:	mov	r3, r0
   2497c:	movw	r2, #43012	; 0xa804
   24980:	movt	r2, #2
   24984:	mov	r1, #0
   24988:	mov	r0, r4
   2498c:	bl	10f94 <error@plt>
   24990:	bl	11120 <abort@plt>
   24994:	str	r4, [sp, #-8]!
   24998:	str	lr, [sp, #4]
   2499c:	sub	sp, sp, #8
   249a0:	ldr	ip, [sp, #16]
   249a4:	str	ip, [sp]
   249a8:	bl	2674c <__assert_fail@plt+0x15620>
   249ac:	subs	r4, r0, #0
   249b0:	blt	249c8 <__assert_fail@plt+0x1389c>
   249b4:	mov	r0, r4
   249b8:	add	sp, sp, #8
   249bc:	ldr	r4, [sp]
   249c0:	add	sp, sp, #4
   249c4:	pop	{pc}		; (ldr pc, [sp], #4)
   249c8:	bl	11024 <__errno_location@plt>
   249cc:	ldr	r3, [r0]
   249d0:	cmp	r3, #12
   249d4:	bne	249b4 <__assert_fail@plt+0x13888>
   249d8:	bl	24950 <__assert_fail@plt+0x13824>
   249dc:	str	r4, [sp, #-8]!
   249e0:	str	lr, [sp, #4]
   249e4:	bl	269b8 <__assert_fail@plt+0x1588c>
   249e8:	subs	r4, r0, #0
   249ec:	beq	24a00 <__assert_fail@plt+0x138d4>
   249f0:	mov	r0, r4
   249f4:	ldr	r4, [sp]
   249f8:	add	sp, sp, #4
   249fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24a00:	bl	11024 <__errno_location@plt>
   24a04:	ldr	r3, [r0]
   24a08:	cmp	r3, #12
   24a0c:	bne	249f0 <__assert_fail@plt+0x138c4>
   24a10:	bl	24950 <__assert_fail@plt+0x13824>
   24a14:	str	r4, [sp, #-8]!
   24a18:	str	lr, [sp, #4]
   24a1c:	bl	26ba4 <__assert_fail@plt+0x15a78>
   24a20:	subs	r4, r0, #0
   24a24:	beq	24a38 <__assert_fail@plt+0x1390c>
   24a28:	mov	r0, r4
   24a2c:	ldr	r4, [sp]
   24a30:	add	sp, sp, #4
   24a34:	pop	{pc}		; (ldr pc, [sp], #4)
   24a38:	bl	11024 <__errno_location@plt>
   24a3c:	ldr	r3, [r0]
   24a40:	cmp	r3, #12
   24a44:	bne	24a28 <__assert_fail@plt+0x138fc>
   24a48:	bl	24950 <__assert_fail@plt+0x13824>
   24a4c:	cmp	r1, #0
   24a50:	cmpne	r0, #0
   24a54:	beq	24aa0 <__assert_fail@plt+0x13974>
   24a58:	strd	r4, [sp, #-16]!
   24a5c:	umull	r4, r5, r0, r1
   24a60:	str	r6, [sp, #8]
   24a64:	str	lr, [sp, #12]
   24a68:	adds	r3, r5, #0
   24a6c:	movne	r3, #1
   24a70:	cmp	r4, #0
   24a74:	blt	24a80 <__assert_fail@plt+0x13954>
   24a78:	cmp	r3, #0
   24a7c:	beq	24aac <__assert_fail@plt+0x13980>
   24a80:	bl	11024 <__errno_location@plt>
   24a84:	mov	r3, #12
   24a88:	ldrd	r4, [sp]
   24a8c:	ldr	r6, [sp, #8]
   24a90:	add	sp, sp, #12
   24a94:	str	r3, [r0]
   24a98:	mov	r0, #0
   24a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   24aa0:	mov	r1, #1
   24aa4:	mov	r0, r1
   24aa8:	b	10e50 <calloc@plt>
   24aac:	ldrd	r4, [sp]
   24ab0:	ldr	r6, [sp, #8]
   24ab4:	ldr	lr, [sp, #12]
   24ab8:	add	sp, sp, #16
   24abc:	b	10e50 <calloc@plt>
   24ac0:	cmp	r0, #0
   24ac4:	beq	24ad0 <__assert_fail@plt+0x139a4>
   24ac8:	blt	24ad8 <__assert_fail@plt+0x139ac>
   24acc:	b	10fa0 <malloc@plt>
   24ad0:	mov	r0, #1
   24ad4:	b	10fa0 <malloc@plt>
   24ad8:	str	r4, [sp, #-8]!
   24adc:	str	lr, [sp, #4]
   24ae0:	bl	11024 <__errno_location@plt>
   24ae4:	mov	r3, #12
   24ae8:	ldr	r4, [sp]
   24aec:	add	sp, sp, #4
   24af0:	str	r3, [r0]
   24af4:	mov	r0, #0
   24af8:	pop	{pc}		; (ldr pc, [sp], #4)
   24afc:	cmp	r0, #0
   24b00:	beq	24b28 <__assert_fail@plt+0x139fc>
   24b04:	cmp	r1, #0
   24b08:	str	r4, [sp, #-8]!
   24b0c:	str	lr, [sp, #4]
   24b10:	beq	24b30 <__assert_fail@plt+0x13a04>
   24b14:	blt	24b44 <__assert_fail@plt+0x13a18>
   24b18:	ldr	r4, [sp]
   24b1c:	ldr	lr, [sp, #4]
   24b20:	add	sp, sp, #8
   24b24:	b	10f1c <realloc@plt>
   24b28:	mov	r0, r1
   24b2c:	b	24ac0 <__assert_fail@plt+0x13994>
   24b30:	bl	17998 <__assert_fail@plt+0x686c>
   24b34:	ldr	r4, [sp]
   24b38:	add	sp, sp, #4
   24b3c:	mov	r0, #0
   24b40:	pop	{pc}		; (ldr pc, [sp], #4)
   24b44:	bl	11024 <__errno_location@plt>
   24b48:	mov	r3, #12
   24b4c:	str	r3, [r0]
   24b50:	b	24b34 <__assert_fail@plt+0x13a08>
   24b54:	cmp	r0, r1
   24b58:	beq	24bc8 <__assert_fail@plt+0x13a9c>
   24b5c:	sub	r0, r0, #1
   24b60:	sub	r1, r1, #1
   24b64:	str	r4, [sp, #-8]!
   24b68:	str	lr, [sp, #4]
   24b6c:	b	24b78 <__assert_fail@plt+0x13a4c>
   24b70:	cmp	r3, r2
   24b74:	bne	24bb0 <__assert_fail@plt+0x13a84>
   24b78:	ldrb	r3, [r0, #1]!
   24b7c:	sub	r2, r3, #65	; 0x41
   24b80:	mov	ip, r3
   24b84:	cmp	r2, #25
   24b88:	ldrb	r2, [r1, #1]!
   24b8c:	addls	ip, r3, #32
   24b90:	uxtbls	r3, ip
   24b94:	sub	r4, r2, #65	; 0x41
   24b98:	mov	lr, r2
   24b9c:	cmp	r4, #25
   24ba0:	addls	lr, r2, #32
   24ba4:	uxtbls	r2, lr
   24ba8:	cmp	r3, #0
   24bac:	bne	24b70 <__assert_fail@plt+0x13a44>
   24bb0:	uxtb	ip, ip
   24bb4:	uxtb	r0, lr
   24bb8:	ldr	r4, [sp]
   24bbc:	add	sp, sp, #4
   24bc0:	sub	r0, ip, r0
   24bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   24bc8:	mov	r0, #0
   24bcc:	bx	lr
   24bd0:	strd	r4, [sp, #-16]!
   24bd4:	mov	r4, r0
   24bd8:	str	r6, [sp, #8]
   24bdc:	str	lr, [sp, #12]
   24be0:	bl	10f7c <__fpending@plt>
   24be4:	ldr	r5, [r4]
   24be8:	mov	r6, r0
   24bec:	mov	r0, r4
   24bf0:	bl	24c58 <__assert_fail@plt+0x13b2c>
   24bf4:	mov	r4, r0
   24bf8:	and	r5, r5, #32
   24bfc:	cmp	r5, #0
   24c00:	bne	24c38 <__assert_fail@plt+0x13b0c>
   24c04:	cmp	r0, #0
   24c08:	beq	24c24 <__assert_fail@plt+0x13af8>
   24c0c:	cmp	r6, #0
   24c10:	bne	24c50 <__assert_fail@plt+0x13b24>
   24c14:	bl	11024 <__errno_location@plt>
   24c18:	ldr	r4, [r0]
   24c1c:	subs	r4, r4, #9
   24c20:	mvnne	r4, #0
   24c24:	mov	r0, r4
   24c28:	ldrd	r4, [sp]
   24c2c:	ldr	r6, [sp, #8]
   24c30:	add	sp, sp, #12
   24c34:	pop	{pc}		; (ldr pc, [sp], #4)
   24c38:	cmp	r0, #0
   24c3c:	bne	24c50 <__assert_fail@plt+0x13b24>
   24c40:	bl	11024 <__errno_location@plt>
   24c44:	str	r4, [r0]
   24c48:	mvn	r4, #0
   24c4c:	b	24c24 <__assert_fail@plt+0x13af8>
   24c50:	mvn	r4, #0
   24c54:	b	24c24 <__assert_fail@plt+0x13af8>
   24c58:	strd	r4, [sp, #-12]!
   24c5c:	mov	r4, r0
   24c60:	str	lr, [sp, #8]
   24c64:	sub	sp, sp, #12
   24c68:	bl	11078 <fileno@plt>
   24c6c:	cmp	r0, #0
   24c70:	mov	r0, r4
   24c74:	blt	24cf8 <__assert_fail@plt+0x13bcc>
   24c78:	bl	10fc4 <__freading@plt>
   24c7c:	cmp	r0, #0
   24c80:	bne	24cc4 <__assert_fail@plt+0x13b98>
   24c84:	mov	r0, r4
   24c88:	bl	24d0c <__assert_fail@plt+0x13be0>
   24c8c:	cmp	r0, #0
   24c90:	beq	24cf4 <__assert_fail@plt+0x13bc8>
   24c94:	bl	11024 <__errno_location@plt>
   24c98:	mov	r5, r0
   24c9c:	mov	r0, r4
   24ca0:	ldr	r4, [r5]
   24ca4:	bl	1109c <fclose@plt>
   24ca8:	cmp	r4, #0
   24cac:	mvnne	r0, #0
   24cb0:	strne	r4, [r5]
   24cb4:	add	sp, sp, #12
   24cb8:	ldrd	r4, [sp]
   24cbc:	add	sp, sp, #8
   24cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   24cc4:	mov	r0, r4
   24cc8:	bl	11078 <fileno@plt>
   24ccc:	mov	r1, #1
   24cd0:	mov	r2, #0
   24cd4:	mov	r3, #0
   24cd8:	str	r1, [sp]
   24cdc:	bl	10f64 <lseek64@plt>
   24ce0:	mvn	r3, #0
   24ce4:	mvn	r2, #0
   24ce8:	cmp	r1, r3
   24cec:	cmpeq	r0, r2
   24cf0:	bne	24c84 <__assert_fail@plt+0x13b58>
   24cf4:	mov	r0, r4
   24cf8:	add	sp, sp, #12
   24cfc:	ldrd	r4, [sp]
   24d00:	ldr	lr, [sp, #8]
   24d04:	add	sp, sp, #12
   24d08:	b	1109c <fclose@plt>
   24d0c:	str	r4, [sp, #-8]!
   24d10:	subs	r4, r0, #0
   24d14:	str	lr, [sp, #4]
   24d18:	sub	sp, sp, #8
   24d1c:	beq	24d38 <__assert_fail@plt+0x13c0c>
   24d20:	bl	10fc4 <__freading@plt>
   24d24:	cmp	r0, #0
   24d28:	beq	24d38 <__assert_fail@plt+0x13c0c>
   24d2c:	ldr	r3, [r4]
   24d30:	tst	r3, #256	; 0x100
   24d34:	bne	24d50 <__assert_fail@plt+0x13c24>
   24d38:	mov	r0, r4
   24d3c:	add	sp, sp, #8
   24d40:	ldr	r4, [sp]
   24d44:	ldr	lr, [sp, #4]
   24d48:	add	sp, sp, #8
   24d4c:	b	10e98 <fflush@plt>
   24d50:	mov	r1, #1
   24d54:	mov	r2, #0
   24d58:	mov	r3, #0
   24d5c:	mov	r0, r4
   24d60:	str	r1, [sp]
   24d64:	bl	24d6c <__assert_fail@plt+0x13c40>
   24d68:	b	24d38 <__assert_fail@plt+0x13c0c>
   24d6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24d70:	mov	r4, r0
   24d74:	ldr	ip, [r0, #4]
   24d78:	strd	r6, [sp, #8]
   24d7c:	str	lr, [sp, #20]
   24d80:	ldr	lr, [r0, #8]
   24d84:	str	r8, [sp, #16]
   24d88:	sub	sp, sp, #8
   24d8c:	ldr	r5, [sp, #32]
   24d90:	cmp	lr, ip
   24d94:	beq	24dbc <__assert_fail@plt+0x13c90>
   24d98:	mov	r0, r4
   24d9c:	str	r5, [sp, #32]
   24da0:	add	sp, sp, #8
   24da4:	ldrd	r4, [sp]
   24da8:	ldrd	r6, [sp, #8]
   24dac:	ldr	r8, [sp, #16]
   24db0:	ldr	lr, [sp, #20]
   24db4:	add	sp, sp, #24
   24db8:	b	110b4 <fseeko64@plt>
   24dbc:	ldr	ip, [r0, #16]
   24dc0:	ldr	lr, [r0, #20]
   24dc4:	cmp	lr, ip
   24dc8:	bne	24d98 <__assert_fail@plt+0x13c6c>
   24dcc:	ldr	r8, [r0, #36]	; 0x24
   24dd0:	cmp	r8, #0
   24dd4:	bne	24d98 <__assert_fail@plt+0x13c6c>
   24dd8:	mov	r6, r2
   24ddc:	mov	r7, r3
   24de0:	bl	11078 <fileno@plt>
   24de4:	mov	r2, r6
   24de8:	mov	r3, r7
   24dec:	str	r5, [sp]
   24df0:	bl	10f64 <lseek64@plt>
   24df4:	mvn	r3, #0
   24df8:	mvn	r2, #0
   24dfc:	cmp	r1, r3
   24e00:	cmpeq	r0, r2
   24e04:	beq	24e34 <__assert_fail@plt+0x13d08>
   24e08:	ldr	r3, [r4]
   24e0c:	strd	r0, [r4, #80]	; 0x50
   24e10:	bic	r3, r3, #16
   24e14:	str	r3, [r4]
   24e18:	mov	r0, r8
   24e1c:	add	sp, sp, #8
   24e20:	ldrd	r4, [sp]
   24e24:	ldrd	r6, [sp, #8]
   24e28:	ldr	r8, [sp, #16]
   24e2c:	add	sp, sp, #20
   24e30:	pop	{pc}		; (ldr pc, [sp], #4)
   24e34:	mvn	r8, #0
   24e38:	b	24e18 <__assert_fail@plt+0x13cec>
   24e3c:	mov	r0, #14
   24e40:	str	r4, [sp, #-8]!
   24e44:	str	lr, [sp, #4]
   24e48:	bl	110f0 <nl_langinfo@plt>
   24e4c:	cmp	r0, #0
   24e50:	beq	24e74 <__assert_fail@plt+0x13d48>
   24e54:	ldrb	r2, [r0]
   24e58:	movw	r3, #46464	; 0xb580
   24e5c:	movt	r3, #2
   24e60:	ldr	r4, [sp]
   24e64:	add	sp, sp, #4
   24e68:	cmp	r2, #0
   24e6c:	moveq	r0, r3
   24e70:	pop	{pc}		; (ldr pc, [sp], #4)
   24e74:	ldr	r4, [sp]
   24e78:	add	sp, sp, #4
   24e7c:	movw	r0, #46464	; 0xb580
   24e80:	movt	r0, #2
   24e84:	pop	{pc}		; (ldr pc, [sp], #4)
   24e88:	str	r4, [sp, #-8]!
   24e8c:	mov	r4, r0
   24e90:	str	lr, [sp, #4]
   24e94:	bl	10ea4 <wcwidth@plt>
   24e98:	cmp	r0, #0
   24e9c:	bge	24eb0 <__assert_fail@plt+0x13d84>
   24ea0:	mov	r0, r4
   24ea4:	bl	10f34 <iswcntrl@plt>
   24ea8:	clz	r0, r0
   24eac:	lsr	r0, r0, #5
   24eb0:	ldr	r4, [sp]
   24eb4:	add	sp, sp, #4
   24eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   24ebc:	mov	r3, r1
   24ec0:	strd	r4, [sp, #-16]!
   24ec4:	mov	r4, r1
   24ec8:	ldr	r2, [r1, #4]
   24ecc:	mov	r5, r0
   24ed0:	ldr	r1, [r3], #16
   24ed4:	str	r6, [sp, #8]
   24ed8:	str	lr, [sp, #12]
   24edc:	cmp	r1, r3
   24ee0:	strne	r1, [r0]
   24ee4:	beq	24f10 <__assert_fail@plt+0x13de4>
   24ee8:	ldrb	r3, [r4, #8]
   24eec:	str	r2, [r5, #4]
   24ef0:	ldr	r6, [sp, #8]
   24ef4:	cmp	r3, #0
   24ef8:	strb	r3, [r5, #8]
   24efc:	ldrne	r3, [r4, #12]
   24f00:	strne	r3, [r5, #12]
   24f04:	ldrd	r4, [sp]
   24f08:	add	sp, sp, #12
   24f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   24f10:	add	r3, r0, #16
   24f14:	mov	r0, r3
   24f18:	bl	10ed4 <memcpy@plt>
   24f1c:	ldr	r2, [r4, #4]
   24f20:	str	r0, [r5]
   24f24:	b	24ee8 <__assert_fail@plt+0x13dbc>
   24f28:	lsr	r2, r0, #5
   24f2c:	movw	r3, #46472	; 0xb588
   24f30:	movt	r3, #2
   24f34:	and	r0, r0, #31
   24f38:	ldr	r3, [r3, r2, lsl #2]
   24f3c:	lsr	r0, r3, r0
   24f40:	and	r0, r0, #1
   24f44:	bx	lr
   24f48:	strd	r4, [sp, #-20]!	; 0xffffffec
   24f4c:	mov	r5, r2
   24f50:	strd	r6, [sp, #8]
   24f54:	subs	r6, r0, #0
   24f58:	mov	r7, r1
   24f5c:	str	lr, [sp, #16]
   24f60:	sub	sp, sp, #12
   24f64:	addeq	r6, sp, #4
   24f68:	mov	r0, r6
   24f6c:	bl	10f88 <mbrtowc@plt>
   24f70:	cmp	r5, #0
   24f74:	cmnne	r0, #3
   24f78:	mov	r4, r0
   24f7c:	bhi	24f98 <__assert_fail@plt+0x13e6c>
   24f80:	mov	r0, r4
   24f84:	add	sp, sp, #12
   24f88:	ldrd	r4, [sp]
   24f8c:	ldrd	r6, [sp, #8]
   24f90:	add	sp, sp, #16
   24f94:	pop	{pc}		; (ldr pc, [sp], #4)
   24f98:	mov	r0, #0
   24f9c:	bl	26c7c <__assert_fail@plt+0x15b50>
   24fa0:	cmp	r0, #0
   24fa4:	bne	24f80 <__assert_fail@plt+0x13e54>
   24fa8:	ldrb	r3, [r7]
   24fac:	mov	r4, #1
   24fb0:	str	r3, [r6]
   24fb4:	b	24f80 <__assert_fail@plt+0x13e54>
   24fb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24fbc:	mov	r5, r0
   24fc0:	strd	r6, [sp, #8]
   24fc4:	mov	r6, r2
   24fc8:	lsrs	r2, r6, #30
   24fcc:	str	fp, [sp, #16]
   24fd0:	add	fp, sp, #20
   24fd4:	movne	r2, #1
   24fd8:	moveq	r2, #0
   24fdc:	lsls	r0, r6, #2
   24fe0:	str	lr, [sp, #20]
   24fe4:	bmi	250ec <__assert_fail@plt+0x13fc0>
   24fe8:	cmp	r2, #0
   24fec:	bne	250ec <__assert_fail@plt+0x13fc0>
   24ff0:	cmp	r0, #4016	; 0xfb0
   24ff4:	mov	r4, r1
   24ff8:	mov	r7, r3
   24ffc:	bhi	250e0 <__assert_fail@plt+0x13fb4>
   25000:	add	r3, r0, #22
   25004:	bic	r3, r3, #7
   25008:	sub	sp, sp, r3
   2500c:	add	r0, sp, #15
   25010:	bic	r0, r0, #15
   25014:	cmp	r0, #0
   25018:	beq	250ec <__assert_fail@plt+0x13fc0>
   2501c:	mov	r3, #1
   25020:	cmp	r6, #2
   25024:	movhi	r2, r4
   25028:	movhi	ip, #0
   2502c:	str	r3, [r0, #4]
   25030:	movhi	r3, #2
   25034:	bls	2507c <__assert_fail@plt+0x13f50>
   25038:	ldrb	r1, [r2, #1]!
   2503c:	ldrb	lr, [r4, ip]
   25040:	cmp	lr, r1
   25044:	bne	25060 <__assert_fail@plt+0x13f34>
   25048:	b	25120 <__assert_fail@plt+0x13ff4>
   2504c:	ldr	lr, [r0, ip, lsl #2]
   25050:	sub	ip, ip, lr
   25054:	ldrb	lr, [r4, ip]
   25058:	cmp	lr, r1
   2505c:	beq	25120 <__assert_fail@plt+0x13ff4>
   25060:	cmp	ip, #0
   25064:	bne	2504c <__assert_fail@plt+0x13f20>
   25068:	mov	ip, #0
   2506c:	str	r3, [r0, r3, lsl #2]
   25070:	add	r3, r3, #1
   25074:	cmp	r6, r3
   25078:	bne	25038 <__assert_fail@plt+0x13f0c>
   2507c:	mov	r3, #0
   25080:	mov	r1, r5
   25084:	mov	r2, r3
   25088:	str	r3, [r7]
   2508c:	ldrb	r3, [r5]
   25090:	cmp	r3, #0
   25094:	beq	250c0 <__assert_fail@plt+0x13f94>
   25098:	ldrb	ip, [r4, r2]
   2509c:	cmp	ip, r3
   250a0:	beq	250f4 <__assert_fail@plt+0x13fc8>
   250a4:	cmp	r2, #0
   250a8:	beq	25110 <__assert_fail@plt+0x13fe4>
   250ac:	ldr	ip, [r0, r2, lsl #2]
   250b0:	cmp	r3, #0
   250b4:	add	r5, r5, ip
   250b8:	sub	r2, r2, ip
   250bc:	bne	25098 <__assert_fail@plt+0x13f6c>
   250c0:	bl	26d2c <__assert_fail@plt+0x15c00>
   250c4:	mov	r0, #1
   250c8:	sub	sp, fp, #20
   250cc:	ldrd	r4, [sp]
   250d0:	ldrd	r6, [sp, #8]
   250d4:	ldr	fp, [sp, #16]
   250d8:	add	sp, sp, #20
   250dc:	pop	{pc}		; (ldr pc, [sp], #4)
   250e0:	bl	26cd4 <__assert_fail@plt+0x15ba8>
   250e4:	cmp	r0, #0
   250e8:	bne	2501c <__assert_fail@plt+0x13ef0>
   250ec:	mov	r0, #0
   250f0:	b	250c8 <__assert_fail@plt+0x13f9c>
   250f4:	add	r2, r2, #1
   250f8:	add	ip, r1, #1
   250fc:	cmp	r6, r2
   25100:	beq	25130 <__assert_fail@plt+0x14004>
   25104:	ldrb	r3, [r1, #1]
   25108:	mov	r1, ip
   2510c:	b	25090 <__assert_fail@plt+0x13f64>
   25110:	ldrb	r3, [r1, #1]
   25114:	add	r5, r5, #1
   25118:	add	r1, r1, #1
   2511c:	b	25090 <__assert_fail@plt+0x13f64>
   25120:	add	ip, ip, #1
   25124:	sub	r1, r3, ip
   25128:	str	r1, [r0, r3, lsl #2]
   2512c:	b	25070 <__assert_fail@plt+0x13f44>
   25130:	str	r5, [r7]
   25134:	b	250c0 <__assert_fail@plt+0x13f94>
   25138:	movw	r3, #46504	; 0xb5a8
   2513c:	movt	r3, #2
   25140:	str	r4, [sp, #-8]!
   25144:	movw	r1, #45284	; 0xb0e4
   25148:	movt	r1, #2
   2514c:	str	lr, [sp, #4]
   25150:	movw	r0, #45300	; 0xb0f4
   25154:	movt	r0, #2
   25158:	mov	r2, #172	; 0xac
   2515c:	bl	1112c <__assert_fail@plt>
   25160:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25164:	mov	r4, r1
   25168:	strd	r6, [sp, #8]
   2516c:	strd	r8, [sp, #16]
   25170:	strd	sl, [sp, #24]
   25174:	add	fp, sp, #32
   25178:	str	lr, [sp, #32]
   2517c:	sub	sp, sp, #188	; 0xbc
   25180:	str	r2, [fp, #-220]	; 0xffffff24
   25184:	str	r0, [fp, #-212]	; 0xffffff2c
   25188:	mov	r0, r1
   2518c:	bl	26d54 <__assert_fail@plt+0x15c28>
   25190:	mov	r3, #44	; 0x2c
   25194:	str	r0, [fp, #-208]	; 0xffffff30
   25198:	umull	r0, r1, r0, r3
   2519c:	adds	r2, r1, #0
   251a0:	movne	r2, #1
   251a4:	cmp	r0, #0
   251a8:	blt	25590 <__assert_fail@plt+0x14464>
   251ac:	cmp	r2, #0
   251b0:	bne	25590 <__assert_fail@plt+0x14464>
   251b4:	ldr	r2, [fp, #-208]	; 0xffffff30
   251b8:	mul	r0, r3, r2
   251bc:	cmp	r0, #4016	; 0xfb0
   251c0:	bhi	255b0 <__assert_fail@plt+0x14484>
   251c4:	add	r3, r0, #22
   251c8:	bic	r3, r3, #7
   251cc:	sub	sp, sp, r3
   251d0:	add	r3, sp, #15
   251d4:	bic	sl, r3, #15
   251d8:	cmp	sl, #0
   251dc:	beq	25590 <__assert_fail@plt+0x14464>
   251e0:	ldr	r3, [fp, #-208]	; 0xffffff30
   251e4:	mov	r1, #0
   251e8:	mov	r2, #0
   251ec:	movw	r8, #46472	; 0xb588
   251f0:	movt	r8, #2
   251f4:	mov	r6, r1
   251f8:	add	r5, sl, #16
   251fc:	strb	r1, [fp, #-204]	; 0xffffff34
   25200:	strb	r1, [fp, #-192]	; 0xffffff40
   25204:	str	r4, [fp, #-188]	; 0xffffff44
   25208:	add	r9, r3, r3, lsl #2
   2520c:	mov	r3, #0
   25210:	add	r9, sl, r9, lsl #3
   25214:	str	r9, [fp, #-216]	; 0xffffff28
   25218:	strd	r2, [fp, #-200]	; 0xffffff38
   2521c:	b	252a0 <__assert_fail@plt+0x14174>
   25220:	ldrb	r3, [r4]
   25224:	lsr	r2, r3, #5
   25228:	and	r3, r3, #31
   2522c:	ldr	r2, [r8, r2, lsl #2]
   25230:	lsr	r3, r2, r3
   25234:	tst	r3, #1
   25238:	beq	255bc <__assert_fail@plt+0x14490>
   2523c:	mov	r3, #1
   25240:	str	r3, [fp, #-184]	; 0xffffff48
   25244:	ldrb	r2, [r4]
   25248:	strb	r3, [fp, #-192]	; 0xffffff40
   2524c:	strb	r3, [fp, #-180]	; 0xffffff4c
   25250:	mov	r4, r2
   25254:	str	r2, [fp, #-176]	; 0xffffff50
   25258:	cmp	r4, #0
   2525c:	beq	2531c <__assert_fail@plt+0x141f0>
   25260:	mov	r9, #1
   25264:	ldr	r4, [fp, #-188]	; 0xffffff44
   25268:	sub	r2, fp, #172	; 0xac
   2526c:	ldr	r7, [fp, #-184]	; 0xffffff48
   25270:	cmp	r4, r2
   25274:	strne	r4, [r5, #-16]
   25278:	beq	255dc <__assert_fail@plt+0x144b0>
   2527c:	cmp	r9, #0
   25280:	add	r4, r4, r7
   25284:	str	r7, [r5, #-12]
   25288:	ldrne	r3, [fp, #-176]	; 0xffffff50
   2528c:	add	r5, r5, #40	; 0x28
   25290:	strb	r9, [r5, #-48]	; 0xffffffd0
   25294:	strb	r6, [fp, #-192]	; 0xffffff40
   25298:	str	r4, [fp, #-188]	; 0xffffff44
   2529c:	strne	r3, [r5, #-44]	; 0xffffffd4
   252a0:	ldrb	r3, [fp, #-204]	; 0xffffff34
   252a4:	ldr	r4, [fp, #-188]	; 0xffffff44
   252a8:	cmp	r3, #0
   252ac:	subne	r7, fp, #200	; 0xc8
   252b0:	beq	25220 <__assert_fail@plt+0x140f4>
   252b4:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   252b8:	mov	r1, r0
   252bc:	mov	r0, r4
   252c0:	bl	239c4 <__assert_fail@plt+0x12898>
   252c4:	mov	r2, r0
   252c8:	mov	r3, r7
   252cc:	mov	r1, r4
   252d0:	sub	r0, fp, #176	; 0xb0
   252d4:	bl	24f48 <__assert_fail@plt+0x13e1c>
   252d8:	cmn	r0, #1
   252dc:	str	r0, [fp, #-184]	; 0xffffff48
   252e0:	beq	255f4 <__assert_fail@plt+0x144c8>
   252e4:	cmn	r0, #2
   252e8:	beq	2560c <__assert_fail@plt+0x144e0>
   252ec:	cmp	r0, #0
   252f0:	beq	2562c <__assert_fail@plt+0x14500>
   252f4:	ldr	r4, [fp, #-176]	; 0xffffff50
   252f8:	mov	r9, #1
   252fc:	mov	r0, r7
   25300:	strb	r9, [fp, #-180]	; 0xffffff4c
   25304:	bl	10ee0 <mbsinit@plt>
   25308:	cmp	r0, #0
   2530c:	strb	r9, [fp, #-192]	; 0xffffff40
   25310:	strbne	r6, [fp, #-204]	; 0xffffff34
   25314:	cmp	r4, #0
   25318:	bne	25260 <__assert_fail@plt+0x14134>
   2531c:	ldr	r9, [fp, #-216]	; 0xffffff28
   25320:	mov	r3, #1
   25324:	mov	r7, r4
   25328:	ldr	r2, [fp, #-208]	; 0xffffff30
   2532c:	str	r3, [r9, #4]
   25330:	cmp	r2, #2
   25334:	bls	253d4 <__assert_fail@plt+0x142a8>
   25338:	mov	r8, #2
   2533c:	mov	r5, sl
   25340:	str	r4, [fp, #-216]	; 0xffffff28
   25344:	mov	r7, r8
   25348:	ldr	r8, [fp, #-208]	; 0xffffff30
   2534c:	ldrb	r6, [r5, #48]	; 0x30
   25350:	b	25380 <__assert_fail@plt+0x14254>
   25354:	ldrb	r2, [r3, #8]
   25358:	cmp	r2, #0
   2535c:	beq	25390 <__assert_fail@plt+0x14264>
   25360:	ldr	r3, [r3, #12]
   25364:	ldr	r2, [r5, #52]	; 0x34
   25368:	cmp	r2, r3
   2536c:	beq	253b4 <__assert_fail@plt+0x14288>
   25370:	cmp	r4, #0
   25374:	beq	25924 <__assert_fail@plt+0x147f8>
   25378:	ldr	r3, [r9, r4, lsl #2]
   2537c:	sub	r4, r4, r3
   25380:	add	r3, r4, r4, lsl #2
   25384:	cmp	r6, #0
   25388:	add	r3, sl, r3, lsl #3
   2538c:	bne	25354 <__assert_fail@plt+0x14228>
   25390:	ldr	r1, [r3, #4]
   25394:	ldr	r2, [r5, #44]	; 0x2c
   25398:	cmp	r2, r1
   2539c:	bne	25370 <__assert_fail@plt+0x14244>
   253a0:	ldr	r1, [r3]
   253a4:	ldr	r0, [r5, #40]	; 0x28
   253a8:	bl	10eec <memcmp@plt>
   253ac:	cmp	r0, #0
   253b0:	bne	25370 <__assert_fail@plt+0x14244>
   253b4:	add	r4, r4, #1
   253b8:	sub	r2, r7, r4
   253bc:	str	r2, [r9, r7, lsl #2]
   253c0:	add	r7, r7, #1
   253c4:	add	r5, r5, #40	; 0x28
   253c8:	cmp	r8, r7
   253cc:	bne	2534c <__assert_fail@plt+0x14220>
   253d0:	ldr	r7, [fp, #-216]	; 0xffffff28
   253d4:	mov	r1, #0
   253d8:	mov	r0, #0
   253dc:	str	r9, [fp, #-216]	; 0xffffff28
   253e0:	ldr	r3, [fp, #-212]	; 0xffffff2c
   253e4:	mov	r2, #0
   253e8:	movw	ip, #46472	; 0xb588
   253ec:	movt	ip, #2
   253f0:	mov	r6, #1
   253f4:	strd	r0, [fp, #-144]	; 0xffffff70
   253f8:	mov	r9, ip
   253fc:	strd	r0, [fp, #-88]	; 0xffffffa8
   25400:	ldr	r1, [fp, #-220]	; 0xffffff24
   25404:	strb	r2, [fp, #-148]	; 0xffffff6c
   25408:	str	r3, [fp, #-132]	; 0xffffff7c
   2540c:	str	r3, [fp, #-76]	; 0xffffffb4
   25410:	mov	r3, r2
   25414:	strb	r2, [fp, #-136]	; 0xffffff78
   25418:	strb	r2, [fp, #-92]	; 0xffffffa4
   2541c:	strb	r2, [fp, #-80]	; 0xffffffb0
   25420:	str	r2, [r1]
   25424:	cmp	r3, #0
   25428:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   2542c:	beq	254e0 <__assert_fail@plt+0x143b4>
   25430:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   25434:	cmp	r3, #0
   25438:	bne	25980 <__assert_fail@plt+0x14854>
   2543c:	add	r3, r7, r7, lsl #2
   25440:	add	r3, sl, r3, lsl #3
   25444:	ldr	r4, [fp, #-72]	; 0xffffffb8
   25448:	ldr	r2, [r3, #4]
   2544c:	cmp	r2, r4
   25450:	beq	256d0 <__assert_fail@plt+0x145a4>
   25454:	cmp	r7, #0
   25458:	bne	256f4 <__assert_fail@plt+0x145c8>
   2545c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   25460:	cmp	r3, #0
   25464:	bne	2596c <__assert_fail@plt+0x14840>
   25468:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   2546c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25470:	cmp	r3, #0
   25474:	subne	r8, fp, #144	; 0x90
   25478:	bne	258c0 <__assert_fail@plt+0x14794>
   2547c:	ldrb	r3, [r4]
   25480:	lsr	r2, r3, #5
   25484:	and	r3, r3, #31
   25488:	ldr	r2, [r9, r2, lsl #2]
   2548c:	lsr	r3, r2, r3
   25490:	tst	r3, #1
   25494:	beq	258a8 <__assert_fail@plt+0x1477c>
   25498:	str	r6, [fp, #-128]	; 0xffffff80
   2549c:	ldrb	r4, [r4]
   254a0:	strb	r6, [fp, #-136]	; 0xffffff78
   254a4:	strb	r6, [fp, #-124]	; 0xffffff84
   254a8:	str	r4, [fp, #-120]	; 0xffffff88
   254ac:	cmp	r4, #0
   254b0:	beq	25790 <__assert_fail@plt+0x14664>
   254b4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   254b8:	mov	r3, #0
   254bc:	ldr	r2, [fp, #-128]	; 0xffffff80
   254c0:	strb	r3, [fp, #-136]	; 0xffffff78
   254c4:	strb	r3, [fp, #-80]	; 0xffffffb0
   254c8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   254cc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   254d0:	add	r4, r4, r2
   254d4:	str	r4, [fp, #-132]	; 0xffffff7c
   254d8:	add	r5, r5, r3
   254dc:	str	r5, [fp, #-76]	; 0xffffffb4
   254e0:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   254e4:	cmp	r3, #0
   254e8:	subne	r4, fp, #88	; 0x58
   254ec:	bne	2566c <__assert_fail@plt+0x14540>
   254f0:	ldrb	r3, [r5]
   254f4:	lsr	r2, r3, #5
   254f8:	and	r3, r3, #31
   254fc:	ldr	r2, [r9, r2, lsl #2]
   25500:	lsr	r3, r2, r3
   25504:	tst	r3, #1
   25508:	beq	25654 <__assert_fail@plt+0x14528>
   2550c:	str	r6, [fp, #-72]	; 0xffffffb8
   25510:	ldrb	r3, [r5]
   25514:	strb	r6, [fp, #-80]	; 0xffffffb0
   25518:	strb	r6, [fp, #-68]	; 0xffffffbc
   2551c:	mov	r5, r3
   25520:	str	r3, [fp, #-64]	; 0xffffffc0
   25524:	cmp	r5, #0
   25528:	beq	25580 <__assert_fail@plt+0x14454>
   2552c:	add	r3, r7, r7, lsl #2
   25530:	add	r3, sl, r3, lsl #3
   25534:	ldrb	r2, [r3, #8]
   25538:	cmp	r2, #0
   2553c:	beq	25444 <__assert_fail@plt+0x14318>
   25540:	ldr	r3, [r3, #12]
   25544:	cmp	r3, r5
   25548:	bne	25454 <__assert_fail@plt+0x14328>
   2554c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   25550:	ldr	r4, [fp, #-72]	; 0xffffffb8
   25554:	add	r7, r7, #1
   25558:	add	r5, r5, r4
   2555c:	ldr	r2, [fp, #-208]	; 0xffffff30
   25560:	mov	r3, #0
   25564:	strb	r3, [fp, #-80]	; 0xffffffb0
   25568:	str	r5, [fp, #-76]	; 0xffffffb4
   2556c:	cmp	r2, r7
   25570:	bne	254e0 <__assert_fail@plt+0x143b4>
   25574:	ldr	r2, [fp, #-220]	; 0xffffff24
   25578:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2557c:	str	r3, [r2]
   25580:	mov	r0, sl
   25584:	bl	26d2c <__assert_fail@plt+0x15c00>
   25588:	mov	r0, #1
   2558c:	b	25594 <__assert_fail@plt+0x14468>
   25590:	mov	r0, #0
   25594:	sub	sp, fp, #32
   25598:	ldrd	r4, [sp]
   2559c:	ldrd	r6, [sp, #8]
   255a0:	ldrd	r8, [sp, #16]
   255a4:	ldrd	sl, [sp, #24]
   255a8:	add	sp, sp, #32
   255ac:	pop	{pc}		; (ldr pc, [sp], #4)
   255b0:	bl	26cd4 <__assert_fail@plt+0x15ba8>
   255b4:	mov	sl, r0
   255b8:	b	251d8 <__assert_fail@plt+0x140ac>
   255bc:	sub	r7, fp, #200	; 0xc8
   255c0:	mov	r0, r7
   255c4:	bl	10ee0 <mbsinit@plt>
   255c8:	cmp	r0, #0
   255cc:	beq	259e4 <__assert_fail@plt+0x148b8>
   255d0:	mov	r3, #1
   255d4:	strb	r3, [fp, #-204]	; 0xffffff34
   255d8:	b	252b4 <__assert_fail@plt+0x14188>
   255dc:	mov	r2, r7
   255e0:	mov	r1, r4
   255e4:	mov	r0, r5
   255e8:	bl	10ed4 <memcpy@plt>
   255ec:	str	r5, [r5, #-16]
   255f0:	b	2527c <__assert_fail@plt+0x14150>
   255f4:	mov	r2, #1
   255f8:	mov	r9, #0
   255fc:	strb	r2, [fp, #-192]	; 0xffffff40
   25600:	str	r2, [fp, #-184]	; 0xffffff48
   25604:	strb	r6, [fp, #-180]	; 0xffffff4c
   25608:	b	25264 <__assert_fail@plt+0x14138>
   2560c:	ldr	r0, [fp, #-188]	; 0xffffff44
   25610:	mov	r9, #0
   25614:	bl	1100c <strlen@plt>
   25618:	mov	r2, #1
   2561c:	strb	r2, [fp, #-192]	; 0xffffff40
   25620:	str	r0, [fp, #-184]	; 0xffffff48
   25624:	strb	r6, [fp, #-180]	; 0xffffff4c
   25628:	b	25264 <__assert_fail@plt+0x14138>
   2562c:	ldr	r3, [fp, #-188]	; 0xffffff44
   25630:	mov	r2, #1
   25634:	str	r2, [fp, #-184]	; 0xffffff48
   25638:	ldrb	r3, [r3]
   2563c:	cmp	r3, #0
   25640:	bne	25a04 <__assert_fail@plt+0x148d8>
   25644:	ldr	r4, [fp, #-176]	; 0xffffff50
   25648:	cmp	r4, #0
   2564c:	beq	252f8 <__assert_fail@plt+0x141cc>
   25650:	bl	25138 <__assert_fail@plt+0x1400c>
   25654:	sub	r4, fp, #88	; 0x58
   25658:	mov	r0, r4
   2565c:	bl	10ee0 <mbsinit@plt>
   25660:	cmp	r0, #0
   25664:	beq	259e4 <__assert_fail@plt+0x148b8>
   25668:	strb	r6, [fp, #-92]	; 0xffffffa4
   2566c:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25670:	mov	r1, r0
   25674:	mov	r0, r5
   25678:	bl	239c4 <__assert_fail@plt+0x12898>
   2567c:	mov	r2, r0
   25680:	mov	r3, r4
   25684:	mov	r1, r5
   25688:	sub	r0, fp, #64	; 0x40
   2568c:	bl	24f48 <__assert_fail@plt+0x13e1c>
   25690:	cmn	r0, #1
   25694:	str	r0, [fp, #-72]	; 0xffffffb8
   25698:	beq	25894 <__assert_fail@plt+0x14768>
   2569c:	cmn	r0, #2
   256a0:	beq	2592c <__assert_fail@plt+0x14800>
   256a4:	cmp	r0, #0
   256a8:	beq	25948 <__assert_fail@plt+0x1481c>
   256ac:	ldr	r5, [fp, #-64]	; 0xffffffc0
   256b0:	mov	r0, r4
   256b4:	strb	r6, [fp, #-68]	; 0xffffffbc
   256b8:	bl	10ee0 <mbsinit@plt>
   256bc:	cmp	r0, #0
   256c0:	strb	r6, [fp, #-80]	; 0xffffffb0
   256c4:	movne	r3, #0
   256c8:	strbne	r3, [fp, #-92]	; 0xffffffa4
   256cc:	b	25524 <__assert_fail@plt+0x143f8>
   256d0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   256d4:	mov	r2, r4
   256d8:	ldr	r0, [r3]
   256dc:	mov	r1, r5
   256e0:	bl	10eec <memcmp@plt>
   256e4:	cmp	r0, #0
   256e8:	beq	25554 <__assert_fail@plt+0x14428>
   256ec:	cmp	r7, #0
   256f0:	beq	2545c <__assert_fail@plt+0x14330>
   256f4:	ldr	r3, [fp, #-216]	; 0xffffff28
   256f8:	ldr	r5, [r3, r7, lsl #2]
   256fc:	sub	r3, r7, r5
   25700:	cmp	r5, #0
   25704:	str	r3, [fp, #-212]	; 0xffffff2c
   25708:	beq	2588c <__assert_fail@plt+0x14760>
   2570c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   25710:	cmp	r3, #0
   25714:	beq	25988 <__assert_fail@plt+0x1485c>
   25718:	ldrb	r3, [fp, #-124]	; 0xffffff84
   2571c:	cmp	r3, #0
   25720:	bne	25880 <__assert_fail@plt+0x14754>
   25724:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25728:	mov	r2, #0
   2572c:	subs	r5, r5, #1
   25730:	ldr	r3, [fp, #-128]	; 0xffffff80
   25734:	strb	r2, [fp, #-136]	; 0xffffff78
   25738:	add	r4, r4, r3
   2573c:	str	r4, [fp, #-132]	; 0xffffff7c
   25740:	beq	25888 <__assert_fail@plt+0x1475c>
   25744:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   25748:	cmp	r3, #0
   2574c:	subne	r8, fp, #144	; 0x90
   25750:	bne	257ac <__assert_fail@plt+0x14680>
   25754:	ldrb	r3, [r4]
   25758:	lsr	r2, r3, #5
   2575c:	and	r3, r3, #31
   25760:	ldr	r2, [r9, r2, lsl #2]
   25764:	lsr	r3, r2, r3
   25768:	tst	r3, #1
   2576c:	beq	25794 <__assert_fail@plt+0x14668>
   25770:	str	r6, [fp, #-128]	; 0xffffff80
   25774:	ldrb	r3, [r4]
   25778:	strb	r6, [fp, #-136]	; 0xffffff78
   2577c:	strb	r6, [fp, #-124]	; 0xffffff84
   25780:	mov	r4, r3
   25784:	str	r3, [fp, #-120]	; 0xffffff88
   25788:	cmp	r4, #0
   2578c:	bne	25724 <__assert_fail@plt+0x145f8>
   25790:	bl	11120 <abort@plt>
   25794:	sub	r8, fp, #144	; 0x90
   25798:	mov	r0, r8
   2579c:	bl	10ee0 <mbsinit@plt>
   257a0:	cmp	r0, #0
   257a4:	beq	259e4 <__assert_fail@plt+0x148b8>
   257a8:	strb	r6, [fp, #-148]	; 0xffffff6c
   257ac:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   257b0:	mov	r1, r0
   257b4:	mov	r0, r4
   257b8:	bl	239c4 <__assert_fail@plt+0x12898>
   257bc:	mov	r2, r0
   257c0:	mov	r3, r8
   257c4:	mov	r1, r4
   257c8:	sub	r0, fp, #120	; 0x78
   257cc:	bl	24f48 <__assert_fail@plt+0x13e1c>
   257d0:	cmn	r0, #1
   257d4:	str	r0, [fp, #-128]	; 0xffffff80
   257d8:	beq	25810 <__assert_fail@plt+0x146e4>
   257dc:	cmn	r0, #2
   257e0:	beq	25824 <__assert_fail@plt+0x146f8>
   257e4:	cmp	r0, #0
   257e8:	beq	25840 <__assert_fail@plt+0x14714>
   257ec:	ldr	r4, [fp, #-120]	; 0xffffff88
   257f0:	mov	r0, r8
   257f4:	strb	r6, [fp, #-124]	; 0xffffff84
   257f8:	bl	10ee0 <mbsinit@plt>
   257fc:	cmp	r0, #0
   25800:	strb	r6, [fp, #-136]	; 0xffffff78
   25804:	movne	r3, #0
   25808:	strbne	r3, [fp, #-148]	; 0xffffff6c
   2580c:	b	25788 <__assert_fail@plt+0x1465c>
   25810:	mov	r3, #0
   25814:	str	r6, [fp, #-128]	; 0xffffff80
   25818:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2581c:	strb	r3, [fp, #-124]	; 0xffffff84
   25820:	b	25728 <__assert_fail@plt+0x145fc>
   25824:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25828:	mov	r0, r4
   2582c:	bl	1100c <strlen@plt>
   25830:	mov	r3, #0
   25834:	str	r0, [fp, #-128]	; 0xffffff80
   25838:	strb	r3, [fp, #-124]	; 0xffffff84
   2583c:	b	25728 <__assert_fail@plt+0x145fc>
   25840:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25844:	str	r6, [fp, #-128]	; 0xffffff80
   25848:	ldrb	r3, [r4]
   2584c:	cmp	r3, #0
   25850:	bne	25a04 <__assert_fail@plt+0x148d8>
   25854:	ldr	r4, [fp, #-120]	; 0xffffff88
   25858:	cmp	r4, #0
   2585c:	beq	257f0 <__assert_fail@plt+0x146c4>
   25860:	movw	r3, #46504	; 0xb5a8
   25864:	movt	r3, #2
   25868:	movw	r1, #45284	; 0xb0e4
   2586c:	movt	r1, #2
   25870:	movw	r0, #45300	; 0xb0f4
   25874:	movt	r0, #2
   25878:	mov	r2, #172	; 0xac
   2587c:	bl	1112c <__assert_fail@plt>
   25880:	ldr	r4, [fp, #-120]	; 0xffffff88
   25884:	b	25788 <__assert_fail@plt+0x1465c>
   25888:	ldr	r7, [fp, #-212]	; 0xffffff2c
   2588c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   25890:	b	25424 <__assert_fail@plt+0x142f8>
   25894:	mov	r3, #0
   25898:	strb	r6, [fp, #-80]	; 0xffffffb0
   2589c:	str	r6, [fp, #-72]	; 0xffffffb8
   258a0:	strb	r3, [fp, #-68]	; 0xffffffbc
   258a4:	b	2543c <__assert_fail@plt+0x14310>
   258a8:	sub	r8, fp, #144	; 0x90
   258ac:	mov	r0, r8
   258b0:	bl	10ee0 <mbsinit@plt>
   258b4:	cmp	r0, #0
   258b8:	beq	259e4 <__assert_fail@plt+0x148b8>
   258bc:	strb	r6, [fp, #-148]	; 0xffffff6c
   258c0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   258c4:	mov	r1, r0
   258c8:	mov	r0, r4
   258cc:	bl	239c4 <__assert_fail@plt+0x12898>
   258d0:	mov	r2, r0
   258d4:	mov	r3, r8
   258d8:	mov	r1, r4
   258dc:	sub	r0, fp, #120	; 0x78
   258e0:	bl	24f48 <__assert_fail@plt+0x13e1c>
   258e4:	cmn	r0, #1
   258e8:	str	r0, [fp, #-128]	; 0xffffff80
   258ec:	beq	25990 <__assert_fail@plt+0x14864>
   258f0:	cmn	r0, #2
   258f4:	beq	259a4 <__assert_fail@plt+0x14878>
   258f8:	cmp	r0, #0
   258fc:	beq	259c0 <__assert_fail@plt+0x14894>
   25900:	ldr	r4, [fp, #-120]	; 0xffffff88
   25904:	mov	r0, r8
   25908:	strb	r6, [fp, #-124]	; 0xffffff84
   2590c:	bl	10ee0 <mbsinit@plt>
   25910:	cmp	r0, #0
   25914:	strb	r6, [fp, #-136]	; 0xffffff78
   25918:	movne	r3, #0
   2591c:	strbne	r3, [fp, #-148]	; 0xffffff6c
   25920:	b	254ac <__assert_fail@plt+0x14380>
   25924:	str	r7, [r9, r7, lsl #2]
   25928:	b	253c0 <__assert_fail@plt+0x14294>
   2592c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25930:	bl	1100c <strlen@plt>
   25934:	mov	r3, #0
   25938:	strb	r6, [fp, #-80]	; 0xffffffb0
   2593c:	str	r0, [fp, #-72]	; 0xffffffb8
   25940:	strb	r3, [fp, #-68]	; 0xffffffbc
   25944:	b	2543c <__assert_fail@plt+0x14310>
   25948:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2594c:	str	r6, [fp, #-72]	; 0xffffffb8
   25950:	ldrb	r3, [r5]
   25954:	cmp	r3, #0
   25958:	bne	25a04 <__assert_fail@plt+0x148d8>
   2595c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   25960:	cmp	r5, #0
   25964:	beq	256b0 <__assert_fail@plt+0x14584>
   25968:	b	25650 <__assert_fail@plt+0x14524>
   2596c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   25970:	cmp	r3, #0
   25974:	beq	254b4 <__assert_fail@plt+0x14388>
   25978:	ldr	r4, [fp, #-120]	; 0xffffff88
   2597c:	b	254ac <__assert_fail@plt+0x14380>
   25980:	ldr	r5, [fp, #-64]	; 0xffffffc0
   25984:	b	25524 <__assert_fail@plt+0x143f8>
   25988:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2598c:	b	25744 <__assert_fail@plt+0x14618>
   25990:	mov	r3, #0
   25994:	str	r6, [fp, #-128]	; 0xffffff80
   25998:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2599c:	strb	r3, [fp, #-124]	; 0xffffff84
   259a0:	b	254b8 <__assert_fail@plt+0x1438c>
   259a4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   259a8:	mov	r0, r4
   259ac:	bl	1100c <strlen@plt>
   259b0:	mov	r3, #0
   259b4:	str	r0, [fp, #-128]	; 0xffffff80
   259b8:	strb	r3, [fp, #-124]	; 0xffffff84
   259bc:	b	254b8 <__assert_fail@plt+0x1438c>
   259c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   259c4:	str	r6, [fp, #-128]	; 0xffffff80
   259c8:	ldrb	r3, [r4]
   259cc:	cmp	r3, #0
   259d0:	bne	25a04 <__assert_fail@plt+0x148d8>
   259d4:	ldr	r4, [fp, #-120]	; 0xffffff88
   259d8:	cmp	r4, #0
   259dc:	beq	25904 <__assert_fail@plt+0x147d8>
   259e0:	b	25650 <__assert_fail@plt+0x14524>
   259e4:	movw	r3, #46504	; 0xb5a8
   259e8:	movt	r3, #2
   259ec:	movw	r1, #45284	; 0xb0e4
   259f0:	movt	r1, #2
   259f4:	movw	r0, #45320	; 0xb108
   259f8:	movt	r0, #2
   259fc:	mov	r2, #143	; 0x8f
   25a00:	bl	1112c <__assert_fail@plt>
   25a04:	movw	r3, #46504	; 0xb5a8
   25a08:	movt	r3, #2
   25a0c:	movw	r1, #45284	; 0xb0e4
   25a10:	movt	r1, #2
   25a14:	movw	r0, #45344	; 0xb120
   25a18:	movt	r0, #2
   25a1c:	mov	r2, #171	; 0xab
   25a20:	bl	1112c <__assert_fail@plt>
   25a24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25a28:	strd	r6, [sp, #8]
   25a2c:	strd	r8, [sp, #16]
   25a30:	mov	r8, r1
   25a34:	strd	sl, [sp, #24]
   25a38:	str	lr, [sp, #32]
   25a3c:	sub	sp, sp, #332	; 0x14c
   25a40:	str	r0, [sp, #8]
   25a44:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25a48:	cmp	r0, #1
   25a4c:	bhi	25c5c <__assert_fail@plt+0x14b30>
   25a50:	ldrb	r7, [r8]
   25a54:	cmp	r7, #0
   25a58:	beq	25bd8 <__assert_fail@plt+0x14aac>
   25a5c:	ldr	r3, [sp, #8]
   25a60:	ldrb	sl, [r3]
   25a64:	add	r3, r8, #1
   25a68:	str	r3, [sp, #12]
   25a6c:	cmp	sl, #0
   25a70:	beq	25c54 <__assert_fail@plt+0x14b28>
   25a74:	ldr	r3, [sp, #8]
   25a78:	mov	r5, #0
   25a7c:	mov	fp, r8
   25a80:	mov	ip, r5
   25a84:	mov	lr, #1
   25a88:	str	r5, [sp, #4]
   25a8c:	mov	r6, r3
   25a90:	mov	r9, r3
   25a94:	b	25af8 <__assert_fail@plt+0x149cc>
   25a98:	cmp	fp, #0
   25a9c:	str	r3, [sp, #8]
   25aa0:	beq	25ac8 <__assert_fail@plt+0x1499c>
   25aa4:	ldr	r3, [sp, #4]
   25aa8:	mov	r0, fp
   25aac:	sub	r1, r4, r3
   25ab0:	bl	110a8 <strnlen@plt>
   25ab4:	ldrb	r2, [fp, r0]!
   25ab8:	ldr	r3, [sp, #8]
   25abc:	cmp	r2, #0
   25ac0:	bne	2640c <__assert_fail@plt+0x152e0>
   25ac4:	str	r4, [sp, #4]
   25ac8:	mov	r0, r8
   25acc:	bl	1100c <strlen@plt>
   25ad0:	mov	r2, r0
   25ad4:	add	r3, sp, #272	; 0x110
   25ad8:	mov	r1, r8
   25adc:	mov	r0, r6
   25ae0:	bl	24fb8 <__assert_fail@plt+0x13e8c>
   25ae4:	subs	lr, r0, #0
   25ae8:	bne	26678 <__assert_fail@plt+0x1554c>
   25aec:	ldrb	sl, [r9, r5]
   25af0:	mov	fp, lr
   25af4:	mov	ip, r4
   25af8:	add	r5, r5, #1
   25afc:	mov	r0, r6
   25b00:	cmp	r7, sl
   25b04:	add	r6, r5, r9
   25b08:	mov	r1, r6
   25b0c:	add	r4, ip, #1
   25b10:	beq	25bf8 <__assert_fail@plt+0x14acc>
   25b14:	ldrb	sl, [r9, r5]
   25b18:	cmp	sl, #0
   25b1c:	beq	25c54 <__assert_fail@plt+0x14b28>
   25b20:	cmp	r5, #9
   25b24:	movls	r3, #0
   25b28:	andhi	r3, lr, #1
   25b2c:	cmp	r3, #0
   25b30:	beq	25af4 <__assert_fail@plt+0x149c8>
   25b34:	add	r2, r5, r5, lsl #2
   25b38:	cmp	r4, r2
   25b3c:	bcs	25a98 <__assert_fail@plt+0x1496c>
   25b40:	mov	lr, r3
   25b44:	b	25af4 <__assert_fail@plt+0x149c8>
   25b48:	add	r0, sp, #52	; 0x34
   25b4c:	bl	10ee0 <mbsinit@plt>
   25b50:	cmp	r0, #0
   25b54:	beq	266d4 <__assert_fail@plt+0x155a8>
   25b58:	mov	r5, #1
   25b5c:	strb	r5, [sp, #48]	; 0x30
   25b60:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25b64:	mov	r1, r0
   25b68:	mov	r0, r8
   25b6c:	bl	239c4 <__assert_fail@plt+0x12898>
   25b70:	mov	r2, r0
   25b74:	add	r3, sp, #52	; 0x34
   25b78:	mov	r1, r8
   25b7c:	add	r0, sp, #76	; 0x4c
   25b80:	bl	24f48 <__assert_fail@plt+0x13e1c>
   25b84:	cmn	r0, #1
   25b88:	str	r0, [sp, #68]	; 0x44
   25b8c:	strbeq	r5, [sp, #60]	; 0x3c
   25b90:	streq	r5, [sp, #68]	; 0x44
   25b94:	strbeq	r4, [sp, #72]	; 0x48
   25b98:	beq	25ccc <__assert_fail@plt+0x14ba0>
   25b9c:	cmn	r0, #2
   25ba0:	beq	25cb8 <__assert_fail@plt+0x14b8c>
   25ba4:	cmp	r0, #0
   25ba8:	beq	26638 <__assert_fail@plt+0x1550c>
   25bac:	ldr	r4, [sp, #76]	; 0x4c
   25bb0:	mov	r5, #1
   25bb4:	add	r0, sp, #52	; 0x34
   25bb8:	strb	r5, [sp, #72]	; 0x48
   25bbc:	bl	10ee0 <mbsinit@plt>
   25bc0:	cmp	r0, #0
   25bc4:	strb	r5, [sp, #60]	; 0x3c
   25bc8:	movne	r3, #0
   25bcc:	strbne	r3, [sp, #48]	; 0x30
   25bd0:	cmp	r4, #0
   25bd4:	bne	25ccc <__assert_fail@plt+0x14ba0>
   25bd8:	ldr	r0, [sp, #8]
   25bdc:	add	sp, sp, #332	; 0x14c
   25be0:	ldrd	r4, [sp]
   25be4:	ldrd	r6, [sp, #8]
   25be8:	ldrd	r8, [sp, #16]
   25bec:	ldrd	sl, [sp, #24]
   25bf0:	add	sp, sp, #32
   25bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   25bf8:	ldrb	r3, [r8, #1]
   25bfc:	cmp	r3, #0
   25c00:	beq	25bdc <__assert_fail@plt+0x14ab0>
   25c04:	ldrb	sl, [r9, r5]
   25c08:	cmp	sl, #0
   25c0c:	beq	25c54 <__assert_fail@plt+0x14b28>
   25c10:	cmp	r3, sl
   25c14:	add	r4, ip, #2
   25c18:	bne	25b20 <__assert_fail@plt+0x149f4>
   25c1c:	ldr	r3, [sp, #12]
   25c20:	add	r3, r3, #1
   25c24:	b	25c3c <__assert_fail@plt+0x14b10>
   25c28:	add	r3, r3, #1
   25c2c:	cmp	r2, r4
   25c30:	sub	r4, r3, r8
   25c34:	add	r4, r4, ip
   25c38:	bne	25b20 <__assert_fail@plt+0x149f4>
   25c3c:	ldrb	r2, [r3]
   25c40:	cmp	r2, #0
   25c44:	beq	25bdc <__assert_fail@plt+0x14ab0>
   25c48:	ldrb	r4, [r1, #1]!
   25c4c:	cmp	r4, #0
   25c50:	bne	25c28 <__assert_fail@plt+0x14afc>
   25c54:	mov	r0, #0
   25c58:	b	25bdc <__assert_fail@plt+0x14ab0>
   25c5c:	ldrb	r2, [r8]
   25c60:	mov	r3, #0
   25c64:	movw	r7, #46472	; 0xb588
   25c68:	movt	r7, #2
   25c6c:	mov	r4, #0
   25c70:	strb	r3, [sp, #48]	; 0x30
   25c74:	mov	r5, #0
   25c78:	strb	r3, [sp, #60]	; 0x3c
   25c7c:	lsr	r3, r2, #5
   25c80:	and	r1, r2, #31
   25c84:	strd	r4, [sp, #52]	; 0x34
   25c88:	str	r8, [sp, #64]	; 0x40
   25c8c:	ldr	r3, [r7, r3, lsl #2]
   25c90:	lsr	r3, r3, r1
   25c94:	ands	r4, r3, #1
   25c98:	beq	25b48 <__assert_fail@plt+0x14a1c>
   25c9c:	mov	r3, #1
   25ca0:	mov	r4, r2
   25ca4:	strb	r3, [sp, #60]	; 0x3c
   25ca8:	str	r3, [sp, #68]	; 0x44
   25cac:	strb	r3, [sp, #72]	; 0x48
   25cb0:	str	r2, [sp, #76]	; 0x4c
   25cb4:	b	25bd0 <__assert_fail@plt+0x14aa4>
   25cb8:	ldr	r0, [sp, #64]	; 0x40
   25cbc:	bl	1100c <strlen@plt>
   25cc0:	strb	r5, [sp, #60]	; 0x3c
   25cc4:	str	r0, [sp, #68]	; 0x44
   25cc8:	strb	r4, [sp, #72]	; 0x48
   25ccc:	mov	r3, #0
   25cd0:	ldr	r5, [sp, #8]
   25cd4:	mov	r0, #1
   25cd8:	mov	sl, r3
   25cdc:	mov	r6, r3
   25ce0:	mov	r4, r0
   25ce4:	mov	fp, r0
   25ce8:	str	r0, [sp, #4]
   25cec:	str	r3, [sp, #32]
   25cf0:	str	r3, [sp, #36]	; 0x24
   25cf4:	str	r3, [sp, #40]	; 0x28
   25cf8:	strb	r3, [sp, #104]	; 0x68
   25cfc:	str	r3, [sp, #108]	; 0x6c
   25d00:	str	r3, [sp, #112]	; 0x70
   25d04:	strb	r3, [sp, #116]	; 0x74
   25d08:	strb	r3, [sp, #160]	; 0xa0
   25d0c:	str	r3, [sp, #164]	; 0xa4
   25d10:	str	r3, [sp, #168]	; 0xa8
   25d14:	strb	r3, [sp, #172]	; 0xac
   25d18:	ldrb	r3, [sp, #160]	; 0xa0
   25d1c:	str	r8, [sp, #12]
   25d20:	str	r8, [sp, #120]	; 0x78
   25d24:	str	r5, [sp, #176]	; 0xb0
   25d28:	cmp	r3, #0
   25d2c:	addne	r8, sp, #164	; 0xa4
   25d30:	bne	26068 <__assert_fail@plt+0x14f3c>
   25d34:	ldrb	r3, [r5]
   25d38:	lsr	r2, r3, #5
   25d3c:	and	r3, r3, #31
   25d40:	ldr	r2, [r7, r2, lsl #2]
   25d44:	lsr	r3, r2, r3
   25d48:	tst	r3, #1
   25d4c:	beq	26228 <__assert_fail@plt+0x150fc>
   25d50:	str	fp, [sp, #180]	; 0xb4
   25d54:	ldrb	r5, [r5]
   25d58:	strb	r4, [sp, #172]	; 0xac
   25d5c:	strb	r4, [sp, #184]	; 0xb8
   25d60:	str	r5, [sp, #188]	; 0xbc
   25d64:	cmp	r5, #0
   25d68:	beq	25c54 <__assert_fail@plt+0x14b28>
   25d6c:	ldr	r3, [sp, #4]
   25d70:	cmp	sl, #9
   25d74:	movls	r3, #0
   25d78:	andhi	r3, r3, #1
   25d7c:	cmp	r3, #0
   25d80:	addeq	r6, r6, #1
   25d84:	beq	25d9c <__assert_fail@plt+0x14c70>
   25d88:	add	r2, sl, sl, lsl #2
   25d8c:	cmp	r6, r2
   25d90:	addcc	r6, r6, #1
   25d94:	strcc	r3, [sp, #4]
   25d98:	bcs	26280 <__assert_fail@plt+0x15154>
   25d9c:	ldrb	r3, [sp, #72]	; 0x48
   25da0:	cmp	r3, #0
   25da4:	beq	26198 <__assert_fail@plt+0x1506c>
   25da8:	ldr	r3, [sp, #76]	; 0x4c
   25dac:	ldr	r2, [sp, #188]	; 0xbc
   25db0:	cmp	r2, r3
   25db4:	bne	2603c <__assert_fail@plt+0x14f10>
   25db8:	ldr	ip, [sp, #12]
   25dbc:	ldr	r3, [sp, #32]
   25dc0:	ldr	r1, [sp, #176]	; 0xb0
   25dc4:	ldrb	r0, [ip]
   25dc8:	str	r3, [sp, #276]	; 0x114
   25dcc:	ldr	r3, [sp, #36]	; 0x24
   25dd0:	str	ip, [sp, #288]	; 0x120
   25dd4:	ldr	r2, [sp, #180]	; 0xb4
   25dd8:	and	lr, r0, #31
   25ddc:	str	r3, [sp, #280]	; 0x118
   25de0:	lsr	r3, r0, #5
   25de4:	str	r2, [sp, #236]	; 0xec
   25de8:	ldr	r8, [r7, r3, lsl #2]
   25dec:	ldrd	r2, [sp, #168]	; 0xa8
   25df0:	ldr	ip, [sp, #236]	; 0xec
   25df4:	lsr	r8, r8, lr
   25df8:	strd	r2, [sp, #224]	; 0xe0
   25dfc:	ands	lr, r8, #1
   25e00:	ldrd	r2, [sp, #184]	; 0xb8
   25e04:	add	ip, ip, r1
   25e08:	mov	r1, #0
   25e0c:	str	lr, [sp, #44]	; 0x2c
   25e10:	strb	r1, [sp, #228]	; 0xe4
   25e14:	str	ip, [sp, #232]	; 0xe8
   25e18:	mov	r8, r2
   25e1c:	mov	r9, r3
   25e20:	ldrd	r2, [sp, #160]	; 0xa0
   25e24:	strd	r2, [sp, #216]	; 0xd8
   25e28:	mov	r2, r8
   25e2c:	mov	r3, r9
   25e30:	ldrd	r8, [sp, #200]	; 0xc8
   25e34:	strb	r1, [sp, #272]	; 0x110
   25e38:	strb	r1, [sp, #284]	; 0x11c
   25e3c:	strd	r8, [sp, #16]
   25e40:	ldrd	r8, [sp, #208]	; 0xd0
   25e44:	strd	r2, [sp, #240]	; 0xf0
   25e48:	ldrd	r2, [sp, #192]	; 0xc0
   25e4c:	strd	r8, [sp, #24]
   25e50:	ldrd	r8, [sp, #16]
   25e54:	strd	r2, [sp, #248]	; 0xf8
   25e58:	add	r3, sp, #256	; 0x100
   25e5c:	strd	r8, [r3]
   25e60:	add	r3, sp, #264	; 0x108
   25e64:	ldrd	r8, [sp, #24]
   25e68:	strd	r8, [r3]
   25e6c:	beq	264e0 <__assert_fail@plt+0x153b4>
   25e70:	mov	r5, r0
   25e74:	strb	r4, [sp, #284]	; 0x11c
   25e78:	cmp	r5, #0
   25e7c:	str	fp, [sp, #292]	; 0x124
   25e80:	strb	r4, [sp, #296]	; 0x128
   25e84:	str	r0, [sp, #300]	; 0x12c
   25e88:	beq	26560 <__assert_fail@plt+0x15434>
   25e8c:	ldr	r5, [sp, #288]	; 0x120
   25e90:	mov	r3, #0
   25e94:	add	r6, r6, #1
   25e98:	ldr	r2, [sp, #292]	; 0x124
   25e9c:	mov	r9, r3
   25ea0:	strb	r3, [sp, #284]	; 0x11c
   25ea4:	add	r5, r5, r2
   25ea8:	str	r5, [sp, #288]	; 0x120
   25eac:	b	25f94 <__assert_fail@plt+0x14e68>
   25eb0:	ldrb	r3, [r5]
   25eb4:	lsr	r2, r3, #5
   25eb8:	and	r3, r3, #31
   25ebc:	ldr	r2, [r7, r2, lsl #2]
   25ec0:	lsr	r3, r2, r3
   25ec4:	tst	r3, #1
   25ec8:	beq	2617c <__assert_fail@plt+0x15050>
   25ecc:	str	fp, [sp, #292]	; 0x124
   25ed0:	ldrb	r5, [r5]
   25ed4:	strb	r4, [sp, #284]	; 0x11c
   25ed8:	strb	r4, [sp, #296]	; 0x128
   25edc:	cmp	r5, #0
   25ee0:	str	r5, [sp, #300]	; 0x12c
   25ee4:	beq	26010 <__assert_fail@plt+0x14ee4>
   25ee8:	ldrb	r3, [sp, #228]	; 0xe4
   25eec:	cmp	r3, #0
   25ef0:	bne	26150 <__assert_fail@plt+0x15024>
   25ef4:	ldrb	r3, [sp, #216]	; 0xd8
   25ef8:	ldr	r5, [sp, #232]	; 0xe8
   25efc:	cmp	r3, #0
   25f00:	addne	r8, sp, #220	; 0xdc
   25f04:	bne	260e4 <__assert_fail@plt+0x14fb8>
   25f08:	ldrb	r3, [r5]
   25f0c:	lsr	r2, r3, #5
   25f10:	and	r3, r3, #31
   25f14:	ldr	r2, [r7, r2, lsl #2]
   25f18:	lsr	r3, r2, r3
   25f1c:	tst	r3, #1
   25f20:	beq	260cc <__assert_fail@plt+0x14fa0>
   25f24:	str	fp, [sp, #236]	; 0xec
   25f28:	ldrb	r0, [r5]
   25f2c:	strb	r4, [sp, #228]	; 0xe4
   25f30:	strb	r4, [sp, #240]	; 0xf0
   25f34:	mov	r5, r0
   25f38:	str	r0, [sp, #244]	; 0xf4
   25f3c:	cmp	r5, #0
   25f40:	beq	25c54 <__assert_fail@plt+0x14b28>
   25f44:	ldrb	r3, [sp, #296]	; 0x128
   25f48:	cmp	r3, #0
   25f4c:	beq	2602c <__assert_fail@plt+0x14f00>
   25f50:	ldr	r0, [sp, #300]	; 0x12c
   25f54:	subs	r0, r0, r5
   25f58:	movne	r0, #1
   25f5c:	cmp	r0, #0
   25f60:	add	r2, r6, #1
   25f64:	bne	2603c <__assert_fail@plt+0x14f10>
   25f68:	mov	r6, r2
   25f6c:	ldr	r3, [sp, #232]	; 0xe8
   25f70:	strb	r0, [sp, #228]	; 0xe4
   25f74:	ldr	r1, [sp, #236]	; 0xec
   25f78:	strb	r0, [sp, #284]	; 0x11c
   25f7c:	ldr	r5, [sp, #288]	; 0x120
   25f80:	ldr	r2, [sp, #292]	; 0x124
   25f84:	add	r3, r3, r1
   25f88:	str	r3, [sp, #232]	; 0xe8
   25f8c:	add	r5, r5, r2
   25f90:	str	r5, [sp, #288]	; 0x120
   25f94:	ldrb	r3, [sp, #272]	; 0x110
   25f98:	cmp	r3, #0
   25f9c:	beq	25eb0 <__assert_fail@plt+0x14d84>
   25fa0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25fa4:	mov	r1, r0
   25fa8:	mov	r0, r5
   25fac:	bl	239c4 <__assert_fail@plt+0x12898>
   25fb0:	mov	r2, r0
   25fb4:	add	r3, sp, #276	; 0x114
   25fb8:	mov	r1, r5
   25fbc:	add	r0, sp, #300	; 0x12c
   25fc0:	bl	24f48 <__assert_fail@plt+0x13e1c>
   25fc4:	cmn	r0, #1
   25fc8:	str	r0, [sp, #292]	; 0x124
   25fcc:	strbeq	r4, [sp, #284]	; 0x11c
   25fd0:	streq	fp, [sp, #292]	; 0x124
   25fd4:	strbeq	r9, [sp, #296]	; 0x128
   25fd8:	beq	25ee8 <__assert_fail@plt+0x14dbc>
   25fdc:	cmn	r0, #2
   25fe0:	beq	261c8 <__assert_fail@plt+0x1509c>
   25fe4:	cmp	r0, #0
   25fe8:	beq	261e0 <__assert_fail@plt+0x150b4>
   25fec:	ldr	r5, [sp, #300]	; 0x12c
   25ff0:	add	r0, sp, #276	; 0x114
   25ff4:	strb	r4, [sp, #296]	; 0x128
   25ff8:	bl	10ee0 <mbsinit@plt>
   25ffc:	cmp	r0, #0
   26000:	strb	r4, [sp, #284]	; 0x11c
   26004:	strbne	r9, [sp, #272]	; 0x110
   26008:	cmp	r5, #0
   2600c:	bne	25ee8 <__assert_fail@plt+0x14dbc>
   26010:	ldr	r0, [sp, #176]	; 0xb0
   26014:	b	25bdc <__assert_fail@plt+0x14ab0>
   26018:	ldr	r0, [sp, #232]	; 0xe8
   2601c:	bl	1100c <strlen@plt>
   26020:	strb	r4, [sp, #228]	; 0xe4
   26024:	str	r0, [sp, #236]	; 0xec
   26028:	strb	r9, [sp, #240]	; 0xf0
   2602c:	ldr	r2, [sp, #236]	; 0xec
   26030:	ldr	r3, [sp, #292]	; 0x124
   26034:	cmp	r2, r3
   26038:	beq	26164 <__assert_fail@plt+0x15038>
   2603c:	ldr	r5, [sp, #176]	; 0xb0
   26040:	ldr	r8, [sp, #180]	; 0xb4
   26044:	mov	r3, #0
   26048:	add	r5, r5, r8
   2604c:	add	sl, sl, #1
   26050:	strb	r3, [sp, #172]	; 0xac
   26054:	ldrb	r3, [sp, #160]	; 0xa0
   26058:	str	r5, [sp, #176]	; 0xb0
   2605c:	cmp	r3, #0
   26060:	addne	r8, sp, #164	; 0xa4
   26064:	beq	25d34 <__assert_fail@plt+0x14c08>
   26068:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   2606c:	mov	r1, r0
   26070:	mov	r0, r5
   26074:	bl	239c4 <__assert_fail@plt+0x12898>
   26078:	mov	r2, r0
   2607c:	mov	r3, r8
   26080:	mov	r1, r5
   26084:	add	r0, sp, #188	; 0xbc
   26088:	bl	24f48 <__assert_fail@plt+0x13e1c>
   2608c:	cmn	r0, #1
   26090:	str	r0, [sp, #180]	; 0xb4
   26094:	beq	26244 <__assert_fail@plt+0x15118>
   26098:	cmn	r0, #2
   2609c:	beq	2644c <__assert_fail@plt+0x15320>
   260a0:	cmp	r0, #0
   260a4:	bne	26420 <__assert_fail@plt+0x152f4>
   260a8:	ldr	r5, [sp, #176]	; 0xb0
   260ac:	str	fp, [sp, #180]	; 0xb4
   260b0:	ldrb	r3, [r5]
   260b4:	cmp	r3, #0
   260b8:	bne	266f4 <__assert_fail@plt+0x155c8>
   260bc:	ldr	r5, [sp, #188]	; 0xbc
   260c0:	cmp	r5, #0
   260c4:	beq	26424 <__assert_fail@plt+0x152f8>
   260c8:	b	26658 <__assert_fail@plt+0x1552c>
   260cc:	add	r8, sp, #220	; 0xdc
   260d0:	mov	r0, r8
   260d4:	bl	10ee0 <mbsinit@plt>
   260d8:	cmp	r0, #0
   260dc:	beq	266d4 <__assert_fail@plt+0x155a8>
   260e0:	strb	r4, [sp, #216]	; 0xd8
   260e4:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   260e8:	mov	r1, r0
   260ec:	mov	r0, r5
   260f0:	bl	239c4 <__assert_fail@plt+0x12898>
   260f4:	mov	r2, r0
   260f8:	mov	r3, r8
   260fc:	mov	r1, r5
   26100:	add	r0, sp, #244	; 0xf4
   26104:	bl	24f48 <__assert_fail@plt+0x13e1c>
   26108:	cmn	r0, #1
   2610c:	str	r0, [sp, #236]	; 0xec
   26110:	strbeq	r4, [sp, #228]	; 0xe4
   26114:	streq	fp, [sp, #236]	; 0xec
   26118:	strbeq	r9, [sp, #240]	; 0xf0
   2611c:	beq	2602c <__assert_fail@plt+0x14f00>
   26120:	cmn	r0, #2
   26124:	beq	26018 <__assert_fail@plt+0x14eec>
   26128:	cmp	r0, #0
   2612c:	beq	26204 <__assert_fail@plt+0x150d8>
   26130:	ldr	r5, [sp, #244]	; 0xf4
   26134:	mov	r0, r8
   26138:	strb	r4, [sp, #240]	; 0xf0
   2613c:	bl	10ee0 <mbsinit@plt>
   26140:	cmp	r0, #0
   26144:	strb	r4, [sp, #228]	; 0xe4
   26148:	strbne	r9, [sp, #216]	; 0xd8
   2614c:	b	25f3c <__assert_fail@plt+0x14e10>
   26150:	ldrb	r3, [sp, #240]	; 0xf0
   26154:	cmp	r3, #0
   26158:	beq	2602c <__assert_fail@plt+0x14f00>
   2615c:	ldr	r5, [sp, #244]	; 0xf4
   26160:	b	25f3c <__assert_fail@plt+0x14e10>
   26164:	ldr	r0, [sp, #232]	; 0xe8
   26168:	ldr	r1, [sp, #288]	; 0x120
   2616c:	bl	10eec <memcmp@plt>
   26170:	adds	r0, r0, #0
   26174:	movne	r0, #1
   26178:	b	25f5c <__assert_fail@plt+0x14e30>
   2617c:	add	r0, sp, #276	; 0x114
   26180:	bl	10ee0 <mbsinit@plt>
   26184:	cmp	r0, #0
   26188:	beq	266d4 <__assert_fail@plt+0x155a8>
   2618c:	strb	r4, [sp, #272]	; 0x110
   26190:	b	25fa0 <__assert_fail@plt+0x14e74>
   26194:	add	r6, r6, #1
   26198:	ldr	r3, [sp, #68]	; 0x44
   2619c:	ldr	r5, [sp, #176]	; 0xb0
   261a0:	ldr	r8, [sp, #180]	; 0xb4
   261a4:	cmp	r8, r3
   261a8:	bne	26044 <__assert_fail@plt+0x14f18>
   261ac:	mov	r2, r8
   261b0:	mov	r0, r5
   261b4:	ldr	r1, [sp, #64]	; 0x40
   261b8:	bl	10eec <memcmp@plt>
   261bc:	cmp	r0, #0
   261c0:	bne	26044 <__assert_fail@plt+0x14f18>
   261c4:	b	25db8 <__assert_fail@plt+0x14c8c>
   261c8:	ldr	r0, [sp, #288]	; 0x120
   261cc:	bl	1100c <strlen@plt>
   261d0:	strb	r4, [sp, #284]	; 0x11c
   261d4:	str	r0, [sp, #292]	; 0x124
   261d8:	strb	r9, [sp, #296]	; 0x128
   261dc:	b	25ee8 <__assert_fail@plt+0x14dbc>
   261e0:	ldr	r3, [sp, #288]	; 0x120
   261e4:	str	fp, [sp, #292]	; 0x124
   261e8:	ldrb	r3, [r3]
   261ec:	cmp	r3, #0
   261f0:	bne	266f4 <__assert_fail@plt+0x155c8>
   261f4:	ldr	r5, [sp, #300]	; 0x12c
   261f8:	cmp	r5, #0
   261fc:	beq	25ff0 <__assert_fail@plt+0x14ec4>
   26200:	b	26658 <__assert_fail@plt+0x1552c>
   26204:	ldr	r3, [sp, #232]	; 0xe8
   26208:	str	fp, [sp, #236]	; 0xec
   2620c:	ldrb	r3, [r3]
   26210:	cmp	r3, #0
   26214:	bne	266f4 <__assert_fail@plt+0x155c8>
   26218:	ldr	r5, [sp, #244]	; 0xf4
   2621c:	cmp	r5, #0
   26220:	beq	26134 <__assert_fail@plt+0x15008>
   26224:	b	26658 <__assert_fail@plt+0x1552c>
   26228:	add	r8, sp, #164	; 0xa4
   2622c:	mov	r0, r8
   26230:	bl	10ee0 <mbsinit@plt>
   26234:	cmp	r0, #0
   26238:	beq	266d4 <__assert_fail@plt+0x155a8>
   2623c:	strb	r4, [sp, #160]	; 0xa0
   26240:	b	26068 <__assert_fail@plt+0x14f3c>
   26244:	mov	r3, #0
   26248:	strb	r4, [sp, #172]	; 0xac
   2624c:	str	fp, [sp, #180]	; 0xb4
   26250:	strb	r3, [sp, #184]	; 0xb8
   26254:	ldr	r3, [sp, #4]
   26258:	cmp	sl, #9
   2625c:	movls	r3, #0
   26260:	andhi	r3, r3, #1
   26264:	cmp	r3, #0
   26268:	beq	26194 <__assert_fail@plt+0x15068>
   2626c:	add	r2, sl, sl, lsl #2
   26270:	cmp	r6, r2
   26274:	addcc	r6, r6, #1
   26278:	strcc	r3, [sp, #4]
   2627c:	bcc	26198 <__assert_fail@plt+0x1506c>
   26280:	ldr	r3, [sp, #40]	; 0x28
   26284:	subs	r8, r6, r3
   26288:	ldrb	r3, [sp, #116]	; 0x74
   2628c:	beq	266b8 <__assert_fail@plt+0x1558c>
   26290:	cmp	r3, #0
   26294:	beq	26444 <__assert_fail@plt+0x15318>
   26298:	ldrb	r3, [sp, #128]	; 0x80
   2629c:	cmp	r3, #0
   262a0:	bne	26418 <__assert_fail@plt+0x152ec>
   262a4:	ldr	r5, [sp, #120]	; 0x78
   262a8:	mov	r2, #0
   262ac:	subs	r8, r8, #1
   262b0:	ldr	r3, [sp, #124]	; 0x7c
   262b4:	strb	r2, [sp, #116]	; 0x74
   262b8:	add	r5, r5, r3
   262bc:	str	r5, [sp, #4]
   262c0:	str	r5, [sp, #120]	; 0x78
   262c4:	beq	26470 <__assert_fail@plt+0x15344>
   262c8:	ldrb	r3, [sp, #104]	; 0x68
   262cc:	cmp	r3, #0
   262d0:	addne	r9, sp, #108	; 0x6c
   262d4:	bne	26354 <__assert_fail@plt+0x15228>
   262d8:	ldrb	r3, [r5]
   262dc:	lsr	r2, r3, #5
   262e0:	and	r3, r3, #31
   262e4:	ldr	r2, [r7, r2, lsl #2]
   262e8:	lsr	r3, r2, r3
   262ec:	tst	r3, #1
   262f0:	beq	2633c <__assert_fail@plt+0x15210>
   262f4:	str	fp, [sp, #124]	; 0x7c
   262f8:	ldrb	r5, [r5]
   262fc:	strb	r4, [sp, #116]	; 0x74
   26300:	strb	r4, [sp, #128]	; 0x80
   26304:	str	r5, [sp, #132]	; 0x84
   26308:	cmp	r5, #0
   2630c:	bne	262a4 <__assert_fail@plt+0x15178>
   26310:	ldrb	r3, [sp, #116]	; 0x74
   26314:	cmp	r3, #0
   26318:	beq	26468 <__assert_fail@plt+0x1533c>
   2631c:	add	r2, sp, #272	; 0x110
   26320:	ldrd	r0, [sp, #8]
   26324:	bl	25160 <__assert_fail@plt+0x14034>
   26328:	subs	r3, r0, #0
   2632c:	str	r3, [sp, #4]
   26330:	bne	26678 <__assert_fail@plt+0x1554c>
   26334:	ldrb	r3, [sp, #184]	; 0xb8
   26338:	b	264c8 <__assert_fail@plt+0x1539c>
   2633c:	add	r9, sp, #108	; 0x6c
   26340:	mov	r0, r9
   26344:	bl	10ee0 <mbsinit@plt>
   26348:	cmp	r0, #0
   2634c:	beq	266d4 <__assert_fail@plt+0x155a8>
   26350:	strb	r4, [sp, #104]	; 0x68
   26354:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   26358:	mov	r1, r0
   2635c:	mov	r0, r5
   26360:	bl	239c4 <__assert_fail@plt+0x12898>
   26364:	mov	r2, r0
   26368:	mov	r3, r9
   2636c:	mov	r1, r5
   26370:	add	r0, sp, #132	; 0x84
   26374:	bl	24f48 <__assert_fail@plt+0x13e1c>
   26378:	cmn	r0, #1
   2637c:	str	r0, [sp, #124]	; 0x7c
   26380:	beq	263b8 <__assert_fail@plt+0x1528c>
   26384:	cmn	r0, #2
   26388:	beq	263cc <__assert_fail@plt+0x152a0>
   2638c:	cmp	r0, #0
   26390:	beq	263e8 <__assert_fail@plt+0x152bc>
   26394:	ldr	r5, [sp, #132]	; 0x84
   26398:	mov	r0, r9
   2639c:	strb	r4, [sp, #128]	; 0x80
   263a0:	bl	10ee0 <mbsinit@plt>
   263a4:	cmp	r0, #0
   263a8:	strb	r4, [sp, #116]	; 0x74
   263ac:	movne	r3, #0
   263b0:	strbne	r3, [sp, #104]	; 0x68
   263b4:	b	26308 <__assert_fail@plt+0x151dc>
   263b8:	mov	r3, #0
   263bc:	str	fp, [sp, #124]	; 0x7c
   263c0:	ldr	r5, [sp, #120]	; 0x78
   263c4:	strb	r3, [sp, #128]	; 0x80
   263c8:	b	262a8 <__assert_fail@plt+0x1517c>
   263cc:	ldr	r5, [sp, #120]	; 0x78
   263d0:	mov	r0, r5
   263d4:	bl	1100c <strlen@plt>
   263d8:	mov	r3, #0
   263dc:	str	r0, [sp, #124]	; 0x7c
   263e0:	strb	r3, [sp, #128]	; 0x80
   263e4:	b	262a8 <__assert_fail@plt+0x1517c>
   263e8:	ldr	r5, [sp, #120]	; 0x78
   263ec:	str	fp, [sp, #124]	; 0x7c
   263f0:	ldrb	r3, [r5]
   263f4:	cmp	r3, #0
   263f8:	bne	266f4 <__assert_fail@plt+0x155c8>
   263fc:	ldr	r5, [sp, #132]	; 0x84
   26400:	cmp	r5, #0
   26404:	beq	26398 <__assert_fail@plt+0x1526c>
   26408:	b	26658 <__assert_fail@plt+0x1552c>
   2640c:	mov	lr, r3
   26410:	str	r4, [sp, #4]
   26414:	b	25af4 <__assert_fail@plt+0x149c8>
   26418:	ldr	r5, [sp, #132]	; 0x84
   2641c:	b	26308 <__assert_fail@plt+0x151dc>
   26420:	ldr	r5, [sp, #188]	; 0xbc
   26424:	mov	r0, r8
   26428:	strb	r4, [sp, #184]	; 0xb8
   2642c:	bl	10ee0 <mbsinit@plt>
   26430:	cmp	r0, #0
   26434:	strb	r4, [sp, #172]	; 0xac
   26438:	movne	r3, #0
   2643c:	strbne	r3, [sp, #160]	; 0xa0
   26440:	b	25d64 <__assert_fail@plt+0x14c38>
   26444:	ldr	r5, [sp, #120]	; 0x78
   26448:	b	262c8 <__assert_fail@plt+0x1519c>
   2644c:	ldr	r0, [sp, #176]	; 0xb0
   26450:	bl	1100c <strlen@plt>
   26454:	mov	r3, #0
   26458:	strb	r4, [sp, #172]	; 0xac
   2645c:	str	r0, [sp, #180]	; 0xb4
   26460:	strb	r3, [sp, #184]	; 0xb8
   26464:	b	26254 <__assert_fail@plt+0x15128>
   26468:	ldr	r3, [sp, #120]	; 0x78
   2646c:	str	r3, [sp, #4]
   26470:	ldrb	r3, [sp, #104]	; 0x68
   26474:	cmp	r3, #0
   26478:	addne	r9, sp, #108	; 0x6c
   2647c:	bne	2657c <__assert_fail@plt+0x15450>
   26480:	ldr	r1, [sp, #4]
   26484:	ldrb	r3, [r1]
   26488:	lsr	r2, r3, #5
   2648c:	and	r3, r3, #31
   26490:	ldr	r2, [r7, r2, lsl #2]
   26494:	lsr	r3, r2, r3
   26498:	tst	r3, #1
   2649c:	beq	26564 <__assert_fail@plt+0x15438>
   264a0:	str	fp, [sp, #124]	; 0x7c
   264a4:	ldrb	r5, [r1]
   264a8:	strb	r4, [sp, #116]	; 0x74
   264ac:	strb	r4, [sp, #128]	; 0x80
   264b0:	str	r5, [sp, #132]	; 0x84
   264b4:	cmp	r5, #0
   264b8:	beq	2631c <__assert_fail@plt+0x151f0>
   264bc:	ldrb	r3, [sp, #184]	; 0xb8
   264c0:	mov	r2, #1
   264c4:	str	r2, [sp, #4]
   264c8:	cmp	r3, #0
   264cc:	add	r3, r6, #1
   264d0:	str	r6, [sp, #40]	; 0x28
   264d4:	mov	r6, r3
   264d8:	bne	25d9c <__assert_fail@plt+0x14c70>
   264dc:	b	26198 <__assert_fail@plt+0x1506c>
   264e0:	add	r0, sp, #276	; 0x114
   264e4:	bl	10ee0 <mbsinit@plt>
   264e8:	cmp	r0, #0
   264ec:	beq	266d4 <__assert_fail@plt+0x155a8>
   264f0:	strb	r4, [sp, #272]	; 0x110
   264f4:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   264f8:	ldr	r5, [sp, #12]
   264fc:	mov	r1, r0
   26500:	mov	r0, r5
   26504:	bl	239c4 <__assert_fail@plt+0x12898>
   26508:	mov	r2, r0
   2650c:	add	r3, sp, #276	; 0x114
   26510:	mov	r1, r5
   26514:	add	r0, sp, #300	; 0x12c
   26518:	bl	24f48 <__assert_fail@plt+0x13e1c>
   2651c:	cmn	r0, #1
   26520:	str	r0, [sp, #292]	; 0x124
   26524:	beq	265e4 <__assert_fail@plt+0x154b8>
   26528:	cmn	r0, #2
   2652c:	beq	265f8 <__assert_fail@plt+0x154cc>
   26530:	cmp	r0, #0
   26534:	beq	26614 <__assert_fail@plt+0x154e8>
   26538:	ldr	r5, [sp, #300]	; 0x12c
   2653c:	add	r0, sp, #276	; 0x114
   26540:	strb	r4, [sp, #296]	; 0x128
   26544:	bl	10ee0 <mbsinit@plt>
   26548:	cmp	r0, #0
   2654c:	strb	r4, [sp, #284]	; 0x11c
   26550:	movne	r3, #0
   26554:	strbne	r3, [sp, #272]	; 0x110
   26558:	cmp	r5, #0
   2655c:	bne	25e8c <__assert_fail@plt+0x14d60>
   26560:	bl	11120 <abort@plt>
   26564:	add	r9, sp, #108	; 0x6c
   26568:	mov	r0, r9
   2656c:	bl	10ee0 <mbsinit@plt>
   26570:	cmp	r0, #0
   26574:	beq	266d4 <__assert_fail@plt+0x155a8>
   26578:	strb	r4, [sp, #104]	; 0x68
   2657c:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   26580:	ldr	r5, [sp, #4]
   26584:	mov	r1, r0
   26588:	mov	r0, r5
   2658c:	bl	239c4 <__assert_fail@plt+0x12898>
   26590:	mov	r2, r0
   26594:	mov	r3, r9
   26598:	mov	r1, r5
   2659c:	add	r0, sp, #132	; 0x84
   265a0:	bl	24f48 <__assert_fail@plt+0x13e1c>
   265a4:	cmn	r0, #1
   265a8:	str	r0, [sp, #124]	; 0x7c
   265ac:	beq	26680 <__assert_fail@plt+0x15554>
   265b0:	cmn	r0, #2
   265b4:	beq	2665c <__assert_fail@plt+0x15530>
   265b8:	cmp	r0, #0
   265bc:	beq	26694 <__assert_fail@plt+0x15568>
   265c0:	ldr	r5, [sp, #132]	; 0x84
   265c4:	mov	r0, r9
   265c8:	strb	r4, [sp, #128]	; 0x80
   265cc:	bl	10ee0 <mbsinit@plt>
   265d0:	cmp	r0, #0
   265d4:	strb	r4, [sp, #116]	; 0x74
   265d8:	movne	r3, #0
   265dc:	strbne	r3, [sp, #104]	; 0x68
   265e0:	b	264b4 <__assert_fail@plt+0x15388>
   265e4:	ldr	r3, [sp, #44]	; 0x2c
   265e8:	str	fp, [sp, #292]	; 0x124
   265ec:	ldr	r5, [sp, #288]	; 0x120
   265f0:	strb	r3, [sp, #296]	; 0x128
   265f4:	b	25e90 <__assert_fail@plt+0x14d64>
   265f8:	ldr	r5, [sp, #288]	; 0x120
   265fc:	mov	r0, r5
   26600:	bl	1100c <strlen@plt>
   26604:	ldr	r3, [sp, #44]	; 0x2c
   26608:	str	r0, [sp, #292]	; 0x124
   2660c:	strb	r3, [sp, #296]	; 0x128
   26610:	b	25e90 <__assert_fail@plt+0x14d64>
   26614:	ldr	r5, [sp, #288]	; 0x120
   26618:	str	fp, [sp, #292]	; 0x124
   2661c:	ldrb	r3, [r5]
   26620:	cmp	r3, #0
   26624:	bne	266f4 <__assert_fail@plt+0x155c8>
   26628:	ldr	r5, [sp, #300]	; 0x12c
   2662c:	cmp	r5, #0
   26630:	beq	2653c <__assert_fail@plt+0x15410>
   26634:	b	26658 <__assert_fail@plt+0x1552c>
   26638:	ldr	r3, [sp, #64]	; 0x40
   2663c:	str	r5, [sp, #68]	; 0x44
   26640:	ldrb	r3, [r3]
   26644:	cmp	r3, #0
   26648:	bne	266f4 <__assert_fail@plt+0x155c8>
   2664c:	ldr	r4, [sp, #76]	; 0x4c
   26650:	cmp	r4, #0
   26654:	beq	25bb0 <__assert_fail@plt+0x14a84>
   26658:	bl	25138 <__assert_fail@plt+0x1400c>
   2665c:	ldr	r0, [sp, #120]	; 0x78
   26660:	bl	1100c <strlen@plt>
   26664:	mov	r3, #0
   26668:	strb	r4, [sp, #116]	; 0x74
   2666c:	str	r0, [sp, #124]	; 0x7c
   26670:	strb	r3, [sp, #128]	; 0x80
   26674:	b	264bc <__assert_fail@plt+0x15390>
   26678:	ldr	r0, [sp, #272]	; 0x110
   2667c:	b	25bdc <__assert_fail@plt+0x14ab0>
   26680:	mov	r3, #0
   26684:	strb	r4, [sp, #116]	; 0x74
   26688:	str	fp, [sp, #124]	; 0x7c
   2668c:	strb	r3, [sp, #128]	; 0x80
   26690:	b	264bc <__assert_fail@plt+0x15390>
   26694:	ldr	r5, [sp, #120]	; 0x78
   26698:	str	fp, [sp, #124]	; 0x7c
   2669c:	ldrb	r3, [r5]
   266a0:	cmp	r3, #0
   266a4:	bne	266f4 <__assert_fail@plt+0x155c8>
   266a8:	ldr	r5, [sp, #132]	; 0x84
   266ac:	cmp	r5, #0
   266b0:	beq	265c4 <__assert_fail@plt+0x15498>
   266b4:	b	26658 <__assert_fail@plt+0x1552c>
   266b8:	cmp	r3, #0
   266bc:	beq	26468 <__assert_fail@plt+0x1533c>
   266c0:	ldrb	r3, [sp, #128]	; 0x80
   266c4:	cmp	r3, #0
   266c8:	ldrne	r5, [sp, #132]	; 0x84
   266cc:	beq	264bc <__assert_fail@plt+0x15390>
   266d0:	b	264b4 <__assert_fail@plt+0x15388>
   266d4:	movw	r3, #46504	; 0xb5a8
   266d8:	movt	r3, #2
   266dc:	movw	r1, #45284	; 0xb0e4
   266e0:	movt	r1, #2
   266e4:	movw	r0, #45320	; 0xb108
   266e8:	movt	r0, #2
   266ec:	mov	r2, #143	; 0x8f
   266f0:	bl	1112c <__assert_fail@plt>
   266f4:	movw	r3, #46504	; 0xb5a8
   266f8:	movt	r3, #2
   266fc:	movw	r1, #45284	; 0xb0e4
   26700:	movt	r1, #2
   26704:	movw	r0, #45344	; 0xb120
   26708:	movt	r0, #2
   2670c:	mov	r2, #171	; 0xab
   26710:	bl	1112c <__assert_fail@plt>
   26714:	umull	r2, r3, r1, r2
   26718:	cmp	r3, #0
   2671c:	bne	26728 <__assert_fail@plt+0x155fc>
   26720:	mov	r1, r2
   26724:	b	24afc <__assert_fail@plt+0x139d0>
   26728:	str	r4, [sp, #-8]!
   2672c:	str	lr, [sp, #4]
   26730:	bl	11024 <__errno_location@plt>
   26734:	mov	r3, #12
   26738:	ldr	r4, [sp]
   2673c:	add	sp, sp, #4
   26740:	str	r3, [r0]
   26744:	mov	r0, #0
   26748:	pop	{pc}		; (ldr pc, [sp], #4)
   2674c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26750:	mov	r5, r2
   26754:	strd	r6, [sp, #8]
   26758:	mov	r6, r0
   2675c:	strd	r8, [sp, #16]
   26760:	mov	r8, r1
   26764:	strd	sl, [sp, #24]
   26768:	mov	sl, #0
   2676c:	str	lr, [sp, #32]
   26770:	sub	sp, sp, #4096	; 0x1000
   26774:	mov	r1, sl
   26778:	sub	sp, sp, #36	; 0x24
   2677c:	add	r4, sp, #32
   26780:	str	sl, [sp]
   26784:	str	r3, [sp, #8]
   26788:	mov	r3, sl
   2678c:	str	r0, [sp, #12]
   26790:	mov	r0, r2
   26794:	mov	r2, sl
   26798:	bl	10e80 <iconv@plt>
   2679c:	cmp	r8, sl
   267a0:	str	r6, [r4, #-16]
   267a4:	str	r8, [r4, #-12]
   267a8:	beq	269a4 <__assert_fail@plt+0x15878>
   267ac:	add	r7, sp, #24
   267b0:	add	r6, sp, #28
   267b4:	mov	r9, #4096	; 0x1000
   267b8:	b	267d0 <__assert_fail@plt+0x156a4>
   267bc:	ldrd	r2, [r4, #-12]
   267c0:	sub	r3, r3, r4
   267c4:	cmp	r2, #0
   267c8:	add	sl, sl, r3
   267cc:	beq	2680c <__assert_fail@plt+0x156e0>
   267d0:	mov	r3, r7
   267d4:	add	r2, sp, #20
   267d8:	str	r6, [sp]
   267dc:	add	r1, sp, #16
   267e0:	mov	r0, r5
   267e4:	stmdb	r4, {r4, r9}
   267e8:	bl	10e80 <iconv@plt>
   267ec:	cmn	r0, #1
   267f0:	bne	267bc <__assert_fail@plt+0x15690>
   267f4:	bl	11024 <__errno_location@plt>
   267f8:	ldr	r3, [r0]
   267fc:	cmp	r3, #7
   26800:	beq	267bc <__assert_fail@plt+0x15690>
   26804:	cmp	r3, #22
   26808:	bne	2699c <__assert_fail@plt+0x15870>
   2680c:	mov	ip, #4096	; 0x1000
   26810:	mov	r2, #0
   26814:	str	r6, [sp]
   26818:	mov	r1, r2
   2681c:	mov	r3, r7
   26820:	mov	r0, r5
   26824:	stmdb	r4, {r4, ip}
   26828:	bl	10e80 <iconv@plt>
   2682c:	cmn	r0, #1
   26830:	beq	2699c <__assert_fail@plt+0x15870>
   26834:	ldr	r9, [r4, #-8]
   26838:	sub	r9, r9, r4
   2683c:	adds	r9, r9, sl
   26840:	beq	26954 <__assert_fail@plt+0x15828>
   26844:	ldr	r3, [sp, #8]
   26848:	ldr	fp, [r3]
   2684c:	cmp	fp, #0
   26850:	beq	26930 <__assert_fail@plt+0x15804>
   26854:	add	r3, sp, #4160	; 0x1040
   26858:	add	r3, r3, #8
   2685c:	ldr	r3, [r3]
   26860:	ldr	r3, [r3]
   26864:	cmp	r3, r9
   26868:	bcc	26930 <__assert_fail@plt+0x15804>
   2686c:	mov	r0, #0
   26870:	mov	sl, r4
   26874:	mov	r3, r0
   26878:	mov	r2, r0
   2687c:	mov	r1, r0
   26880:	str	r0, [sp]
   26884:	mov	r0, r5
   26888:	bl	10e80 <iconv@plt>
   2688c:	ldr	r3, [sp, #12]
   26890:	str	r9, [sl], #-12
   26894:	stmdb	r4, {r3, r8, fp}
   26898:	b	268c0 <__assert_fail@plt+0x15794>
   2689c:	mov	r3, r6
   268a0:	mov	r2, r7
   268a4:	str	r4, [sp]
   268a8:	mov	r1, sl
   268ac:	mov	r0, r5
   268b0:	bl	10e80 <iconv@plt>
   268b4:	cmn	r0, #1
   268b8:	beq	2696c <__assert_fail@plt+0x15840>
   268bc:	ldr	r8, [r4, #-8]
   268c0:	cmp	r8, #0
   268c4:	bne	2689c <__assert_fail@plt+0x15770>
   268c8:	mov	r2, #0
   268cc:	mov	r3, r6
   268d0:	str	r4, [sp]
   268d4:	mov	r0, r5
   268d8:	mov	r1, r2
   268dc:	bl	10e80 <iconv@plt>
   268e0:	cmn	r0, #1
   268e4:	beq	2697c <__assert_fail@plt+0x15850>
   268e8:	ldr	r3, [r4]
   268ec:	cmp	r3, #0
   268f0:	bne	269b4 <__assert_fail@plt+0x15888>
   268f4:	ldr	r2, [sp, #8]
   268f8:	str	fp, [r2]
   268fc:	add	r2, sp, #4160	; 0x1040
   26900:	add	r2, r2, #8
   26904:	ldr	r2, [r2]
   26908:	str	r9, [r2]
   2690c:	mov	r0, r3
   26910:	add	sp, sp, #4096	; 0x1000
   26914:	add	sp, sp, #36	; 0x24
   26918:	ldrd	r4, [sp]
   2691c:	ldrd	r6, [sp, #8]
   26920:	ldrd	r8, [sp, #16]
   26924:	ldrd	sl, [sp, #24]
   26928:	add	sp, sp, #32
   2692c:	pop	{pc}		; (ldr pc, [sp], #4)
   26930:	mov	r0, r9
   26934:	bl	24ac0 <__assert_fail@plt+0x13994>
   26938:	subs	fp, r0, #0
   2693c:	bne	2686c <__assert_fail@plt+0x15740>
   26940:	bl	11024 <__errno_location@plt>
   26944:	mov	r2, #12
   26948:	mvn	r3, #0
   2694c:	str	r2, [r0]
   26950:	b	2690c <__assert_fail@plt+0x157e0>
   26954:	add	r2, sp, #4160	; 0x1040
   26958:	mov	r3, r9
   2695c:	add	r2, r2, #8
   26960:	ldr	r2, [r2]
   26964:	str	r9, [r2]
   26968:	b	2690c <__assert_fail@plt+0x157e0>
   2696c:	bl	11024 <__errno_location@plt>
   26970:	ldr	r3, [r0]
   26974:	cmp	r3, #22
   26978:	beq	268c8 <__assert_fail@plt+0x1579c>
   2697c:	ldr	r3, [sp, #8]
   26980:	ldr	r3, [r3]
   26984:	cmp	r3, fp
   26988:	beq	2699c <__assert_fail@plt+0x15870>
   2698c:	mov	r0, fp
   26990:	bl	17998 <__assert_fail@plt+0x686c>
   26994:	mvn	r3, #0
   26998:	b	2690c <__assert_fail@plt+0x157e0>
   2699c:	mvn	r3, #0
   269a0:	b	2690c <__assert_fail@plt+0x157e0>
   269a4:	mov	sl, r8
   269a8:	add	r7, sp, #24
   269ac:	add	r6, sp, #28
   269b0:	b	2680c <__assert_fail@plt+0x156e0>
   269b4:	bl	11120 <abort@plt>
   269b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   269bc:	strd	r6, [sp, #8]
   269c0:	strd	r8, [sp, #16]
   269c4:	mov	r8, r1
   269c8:	str	sl, [sp, #24]
   269cc:	str	lr, [sp, #28]
   269d0:	sub	sp, sp, #24
   269d4:	str	r0, [sp, #8]
   269d8:	bl	1100c <strlen@plt>
   269dc:	cmp	r0, #4096	; 0x1000
   269e0:	mov	r4, r0
   269e4:	str	r0, [sp, #12]
   269e8:	lslcc	r4, r0, #4
   269ec:	add	r7, r4, #1
   269f0:	mov	r0, r7
   269f4:	bl	24ac0 <__assert_fail@plt+0x13994>
   269f8:	subs	r6, r0, #0
   269fc:	beq	26b94 <__assert_fail@plt+0x15a68>
   26a00:	mov	r0, #0
   26a04:	add	r9, sp, #20
   26a08:	mov	r3, r0
   26a0c:	mov	r2, r0
   26a10:	mov	r1, r0
   26a14:	str	r0, [sp]
   26a18:	mov	r0, r8
   26a1c:	bl	10e80 <iconv@plt>
   26a20:	str	r6, [sp, #16]
   26a24:	str	r4, [sp, #20]
   26a28:	b	26a88 <__assert_fail@plt+0x1595c>
   26a2c:	bl	11024 <__errno_location@plt>
   26a30:	mov	sl, r0
   26a34:	mov	r1, r4
   26a38:	ldr	r3, [sl]
   26a3c:	mov	r0, r6
   26a40:	cmp	r3, #22
   26a44:	beq	26b04 <__assert_fail@plt+0x159d8>
   26a48:	cmp	r3, #7
   26a4c:	bne	26b68 <__assert_fail@plt+0x15a3c>
   26a50:	ldr	r5, [sp, #16]
   26a54:	cmp	r7, r4
   26a58:	mov	r7, r4
   26a5c:	sub	r5, r5, r6
   26a60:	bcs	26b60 <__assert_fail@plt+0x15a34>
   26a64:	bl	24afc <__assert_fail@plt+0x139d0>
   26a68:	sub	r4, r4, #1
   26a6c:	cmp	r0, #0
   26a70:	add	r3, r0, r5
   26a74:	sub	r4, r4, r5
   26a78:	beq	26b60 <__assert_fail@plt+0x15a34>
   26a7c:	mov	r6, r0
   26a80:	str	r3, [sp, #16]
   26a84:	str	r4, [sp, #20]
   26a88:	add	r3, sp, #16
   26a8c:	add	r2, sp, #12
   26a90:	str	r9, [sp]
   26a94:	add	r1, sp, #8
   26a98:	mov	r0, r8
   26a9c:	lsl	r4, r7, #1
   26aa0:	bl	10e80 <iconv@plt>
   26aa4:	cmn	r0, #1
   26aa8:	beq	26a2c <__assert_fail@plt+0x15900>
   26aac:	b	26b04 <__assert_fail@plt+0x159d8>
   26ab0:	bl	11024 <__errno_location@plt>
   26ab4:	mov	sl, r0
   26ab8:	mov	r1, r4
   26abc:	ldr	r3, [sl]
   26ac0:	mov	r0, r6
   26ac4:	cmp	r3, #7
   26ac8:	bne	26b68 <__assert_fail@plt+0x15a3c>
   26acc:	ldr	r5, [sp, #16]
   26ad0:	cmp	r7, r4
   26ad4:	mov	r7, r4
   26ad8:	sub	r5, r5, r6
   26adc:	bcs	26b60 <__assert_fail@plt+0x15a34>
   26ae0:	bl	24afc <__assert_fail@plt+0x139d0>
   26ae4:	sub	r4, r4, #1
   26ae8:	cmp	r0, #0
   26aec:	add	r3, r0, r5
   26af0:	sub	r4, r4, r5
   26af4:	beq	26b60 <__assert_fail@plt+0x15a34>
   26af8:	mov	r6, r0
   26afc:	str	r3, [sp, #16]
   26b00:	str	r4, [sp, #20]
   26b04:	mov	r2, #0
   26b08:	add	r3, sp, #16
   26b0c:	str	r9, [sp]
   26b10:	mov	r1, r2
   26b14:	mov	r0, r8
   26b18:	lsl	r4, r7, #1
   26b1c:	bl	10e80 <iconv@plt>
   26b20:	cmn	r0, #1
   26b24:	beq	26ab0 <__assert_fail@plt+0x15984>
   26b28:	ldr	r3, [sp, #16]
   26b2c:	mov	r2, #0
   26b30:	add	r1, r3, #1
   26b34:	str	r1, [sp, #16]
   26b38:	strb	r2, [r3]
   26b3c:	ldr	r1, [sp, #16]
   26b40:	sub	r1, r1, r6
   26b44:	cmp	r7, r1
   26b48:	bls	26b74 <__assert_fail@plt+0x15a48>
   26b4c:	mov	r0, r6
   26b50:	bl	24afc <__assert_fail@plt+0x139d0>
   26b54:	cmp	r0, #0
   26b58:	movne	r6, r0
   26b5c:	b	26b74 <__assert_fail@plt+0x15a48>
   26b60:	mov	r3, #12
   26b64:	str	r3, [sl]
   26b68:	mov	r0, r6
   26b6c:	mov	r6, #0
   26b70:	bl	17998 <__assert_fail@plt+0x686c>
   26b74:	mov	r0, r6
   26b78:	add	sp, sp, #24
   26b7c:	ldrd	r4, [sp]
   26b80:	ldrd	r6, [sp, #8]
   26b84:	ldrd	r8, [sp, #16]
   26b88:	ldr	sl, [sp, #24]
   26b8c:	add	sp, sp, #28
   26b90:	pop	{pc}		; (ldr pc, [sp], #4)
   26b94:	bl	11024 <__errno_location@plt>
   26b98:	mov	r3, #12
   26b9c:	str	r3, [r0]
   26ba0:	b	26b74 <__assert_fail@plt+0x15a48>
   26ba4:	strd	r4, [sp, #-16]!
   26ba8:	mov	r4, r0
   26bac:	str	r6, [sp, #8]
   26bb0:	str	lr, [sp, #12]
   26bb4:	ldrb	r3, [r0]
   26bb8:	cmp	r3, #0
   26bbc:	beq	26bdc <__assert_fail@plt+0x15ab0>
   26bc0:	mov	r6, r1
   26bc4:	mov	r1, r2
   26bc8:	mov	r0, r6
   26bcc:	mov	r5, r2
   26bd0:	bl	24b54 <__assert_fail@plt+0x13a28>
   26bd4:	cmp	r0, #0
   26bd8:	bne	26c00 <__assert_fail@plt+0x15ad4>
   26bdc:	mov	r0, r4
   26be0:	bl	10f10 <strdup@plt>
   26be4:	subs	r4, r0, #0
   26be8:	beq	26c50 <__assert_fail@plt+0x15b24>
   26bec:	mov	r0, r4
   26bf0:	ldrd	r4, [sp]
   26bf4:	ldr	r6, [sp, #8]
   26bf8:	add	sp, sp, #12
   26bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   26c00:	mov	r0, r5
   26c04:	mov	r1, r6
   26c08:	bl	10fac <iconv_open@plt>
   26c0c:	cmn	r0, #1
   26c10:	mov	r5, r0
   26c14:	moveq	r4, #0
   26c18:	beq	26bec <__assert_fail@plt+0x15ac0>
   26c1c:	mov	r0, r4
   26c20:	mov	r1, r5
   26c24:	bl	269b8 <__assert_fail@plt+0x1588c>
   26c28:	subs	r4, r0, #0
   26c2c:	beq	26c60 <__assert_fail@plt+0x15b34>
   26c30:	mov	r0, r5
   26c34:	bl	10e74 <iconv_close@plt>
   26c38:	cmp	r0, #0
   26c3c:	bge	26bec <__assert_fail@plt+0x15ac0>
   26c40:	mov	r0, r4
   26c44:	mov	r4, #0
   26c48:	bl	17998 <__assert_fail@plt+0x686c>
   26c4c:	b	26bec <__assert_fail@plt+0x15ac0>
   26c50:	bl	11024 <__errno_location@plt>
   26c54:	mov	r3, #12
   26c58:	str	r3, [r0]
   26c5c:	b	26bec <__assert_fail@plt+0x15ac0>
   26c60:	bl	11024 <__errno_location@plt>
   26c64:	mov	r6, r0
   26c68:	mov	r0, r5
   26c6c:	ldr	r5, [r6]
   26c70:	bl	10e74 <iconv_close@plt>
   26c74:	str	r5, [r6]
   26c78:	b	26bec <__assert_fail@plt+0x15ac0>
   26c7c:	push	{lr}		; (str lr, [sp, #-4]!)
   26c80:	sub	sp, sp, #268	; 0x10c
   26c84:	movw	r2, #257	; 0x101
   26c88:	add	r1, sp, #4
   26c8c:	bl	26f60 <__assert_fail@plt+0x15e34>
   26c90:	cmp	r0, #0
   26c94:	movne	r0, #0
   26c98:	bne	26ccc <__assert_fail@plt+0x15ba0>
   26c9c:	movw	r1, #46524	; 0xb5bc
   26ca0:	movt	r1, #2
   26ca4:	add	r0, sp, #4
   26ca8:	bl	10e8c <strcmp@plt>
   26cac:	cmp	r0, #0
   26cb0:	beq	26ccc <__assert_fail@plt+0x15ba0>
   26cb4:	add	r0, sp, #4
   26cb8:	movw	r1, #46528	; 0xb5c0
   26cbc:	movt	r1, #2
   26cc0:	bl	10e8c <strcmp@plt>
   26cc4:	adds	r0, r0, #0
   26cc8:	movne	r0, #1
   26ccc:	add	sp, sp, #268	; 0x10c
   26cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   26cd4:	adds	r3, r0, #16
   26cd8:	bmi	26d24 <__assert_fail@plt+0x15bf8>
   26cdc:	cmp	r3, r0
   26ce0:	bcc	26d24 <__assert_fail@plt+0x15bf8>
   26ce4:	mov	r0, r3
   26ce8:	str	r4, [sp, #-8]!
   26cec:	str	lr, [sp, #4]
   26cf0:	bl	10fa0 <malloc@plt>
   26cf4:	cmp	r0, #0
   26cf8:	moveq	r0, #0
   26cfc:	beq	26d18 <__assert_fail@plt+0x15bec>
   26d00:	add	r3, r0, #8
   26d04:	rsb	r2, r0, #8
   26d08:	bic	r3, r3, #15
   26d0c:	add	r3, r3, r2
   26d10:	add	r0, r0, r3
   26d14:	strb	r3, [r0, #-1]
   26d18:	ldr	r4, [sp]
   26d1c:	add	sp, sp, #4
   26d20:	pop	{pc}		; (ldr pc, [sp], #4)
   26d24:	mov	r0, #0
   26d28:	bx	lr
   26d2c:	tst	r0, #7
   26d30:	bne	26d48 <__assert_fail@plt+0x15c1c>
   26d34:	tst	r0, #8
   26d38:	bxeq	lr
   26d3c:	ldrb	r3, [r0, #-1]
   26d40:	sub	r0, r0, r3
   26d44:	b	17998 <__assert_fail@plt+0x686c>
   26d48:	str	r4, [sp, #-8]!
   26d4c:	str	lr, [sp, #4]
   26d50:	bl	11120 <abort@plt>
   26d54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26d58:	mov	r4, r0
   26d5c:	strd	r6, [sp, #8]
   26d60:	str	r8, [sp, #16]
   26d64:	str	lr, [sp, #20]
   26d68:	sub	sp, sp, #56	; 0x38
   26d6c:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   26d70:	cmp	r0, #1
   26d74:	bhi	26da0 <__assert_fail@plt+0x15c74>
   26d78:	mov	r0, r4
   26d7c:	bl	1100c <strlen@plt>
   26d80:	mov	r5, r0
   26d84:	mov	r0, r5
   26d88:	add	sp, sp, #56	; 0x38
   26d8c:	ldrd	r4, [sp]
   26d90:	ldrd	r6, [sp, #8]
   26d94:	ldr	r8, [sp, #16]
   26d98:	add	sp, sp, #20
   26d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   26da0:	mov	r3, #0
   26da4:	mov	r0, #0
   26da8:	mov	r1, #0
   26dac:	movw	r7, #46472	; 0xb588
   26db0:	movt	r7, #2
   26db4:	mov	r5, r3
   26db8:	strb	r3, [sp]
   26dbc:	mov	r6, #1
   26dc0:	strd	r0, [sp, #4]
   26dc4:	strb	r3, [sp, #12]
   26dc8:	str	r4, [sp, #16]
   26dcc:	b	26e24 <__assert_fail@plt+0x15cf8>
   26dd0:	ldrb	r3, [r4]
   26dd4:	lsr	r2, r3, #5
   26dd8:	and	r3, r3, #31
   26ddc:	ldr	r2, [r7, r2, lsl #2]
   26de0:	lsr	r3, r2, r3
   26de4:	tst	r3, #1
   26de8:	beq	26e94 <__assert_fail@plt+0x15d68>
   26dec:	str	r6, [sp, #20]
   26df0:	ldrb	r3, [r4]
   26df4:	strb	r6, [sp, #24]
   26df8:	mov	r4, r3
   26dfc:	str	r3, [sp, #28]
   26e00:	cmp	r4, #0
   26e04:	beq	26d84 <__assert_fail@plt+0x15c58>
   26e08:	ldr	r4, [sp, #16]
   26e0c:	mov	r2, #0
   26e10:	add	r5, r5, #1
   26e14:	ldr	r3, [sp, #20]
   26e18:	strb	r2, [sp, #12]
   26e1c:	add	r4, r4, r3
   26e20:	str	r4, [sp, #16]
   26e24:	ldrb	r3, [sp]
   26e28:	cmp	r3, #0
   26e2c:	addne	r8, sp, #4
   26e30:	beq	26dd0 <__assert_fail@plt+0x15ca4>
   26e34:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   26e38:	mov	r1, r0
   26e3c:	mov	r0, r4
   26e40:	bl	239c4 <__assert_fail@plt+0x12898>
   26e44:	mov	r2, r0
   26e48:	mov	r3, r8
   26e4c:	mov	r1, r4
   26e50:	add	r0, sp, #28
   26e54:	bl	24f48 <__assert_fail@plt+0x13e1c>
   26e58:	cmn	r0, #1
   26e5c:	str	r0, [sp, #20]
   26e60:	beq	26eb0 <__assert_fail@plt+0x15d84>
   26e64:	cmn	r0, #2
   26e68:	beq	26ec4 <__assert_fail@plt+0x15d98>
   26e6c:	cmp	r0, #0
   26e70:	beq	26ee0 <__assert_fail@plt+0x15db4>
   26e74:	ldr	r4, [sp, #28]
   26e78:	mov	r0, r8
   26e7c:	strb	r6, [sp, #24]
   26e80:	bl	10ee0 <mbsinit@plt>
   26e84:	cmp	r0, #0
   26e88:	movne	r3, #0
   26e8c:	strbne	r3, [sp]
   26e90:	b	26e00 <__assert_fail@plt+0x15cd4>
   26e94:	add	r8, sp, #4
   26e98:	mov	r0, r8
   26e9c:	bl	10ee0 <mbsinit@plt>
   26ea0:	cmp	r0, #0
   26ea4:	beq	26f20 <__assert_fail@plt+0x15df4>
   26ea8:	strb	r6, [sp]
   26eac:	b	26e34 <__assert_fail@plt+0x15d08>
   26eb0:	mov	r3, #0
   26eb4:	str	r6, [sp, #20]
   26eb8:	ldr	r4, [sp, #16]
   26ebc:	strb	r3, [sp, #24]
   26ec0:	b	26e0c <__assert_fail@plt+0x15ce0>
   26ec4:	ldr	r4, [sp, #16]
   26ec8:	mov	r0, r4
   26ecc:	bl	1100c <strlen@plt>
   26ed0:	mov	r3, #0
   26ed4:	str	r0, [sp, #20]
   26ed8:	strb	r3, [sp, #24]
   26edc:	b	26e0c <__assert_fail@plt+0x15ce0>
   26ee0:	ldr	r4, [sp, #16]
   26ee4:	str	r6, [sp, #20]
   26ee8:	ldrb	r3, [r4]
   26eec:	cmp	r3, #0
   26ef0:	bne	26f40 <__assert_fail@plt+0x15e14>
   26ef4:	ldr	r4, [sp, #28]
   26ef8:	cmp	r4, #0
   26efc:	beq	26e78 <__assert_fail@plt+0x15d4c>
   26f00:	movw	r3, #46536	; 0xb5c8
   26f04:	movt	r3, #2
   26f08:	movw	r1, #45284	; 0xb0e4
   26f0c:	movt	r1, #2
   26f10:	movw	r0, #45300	; 0xb0f4
   26f14:	movt	r0, #2
   26f18:	mov	r2, #172	; 0xac
   26f1c:	bl	1112c <__assert_fail@plt>
   26f20:	movw	r3, #46536	; 0xb5c8
   26f24:	movt	r3, #2
   26f28:	movw	r1, #45284	; 0xb0e4
   26f2c:	movt	r1, #2
   26f30:	movw	r0, #45320	; 0xb108
   26f34:	movt	r0, #2
   26f38:	mov	r2, #143	; 0x8f
   26f3c:	bl	1112c <__assert_fail@plt>
   26f40:	movw	r3, #46536	; 0xb5c8
   26f44:	movt	r3, #2
   26f48:	movw	r1, #45284	; 0xb0e4
   26f4c:	movt	r1, #2
   26f50:	movw	r0, #45344	; 0xb120
   26f54:	movt	r0, #2
   26f58:	mov	r2, #171	; 0xab
   26f5c:	bl	1112c <__assert_fail@plt>
   26f60:	strd	r4, [sp, #-16]!
   26f64:	mov	r5, r1
   26f68:	mov	r1, #0
   26f6c:	mov	r4, r2
   26f70:	str	r6, [sp, #8]
   26f74:	str	lr, [sp, #12]
   26f78:	bl	110d8 <setlocale@plt>
   26f7c:	subs	r6, r0, #0
   26f80:	beq	27000 <__assert_fail@plt+0x15ed4>
   26f84:	bl	1100c <strlen@plt>
   26f88:	cmp	r4, r0
   26f8c:	bhi	26fac <__assert_fail@plt+0x15e80>
   26f90:	cmp	r4, #0
   26f94:	moveq	r0, #34	; 0x22
   26f98:	bne	26fd0 <__assert_fail@plt+0x15ea4>
   26f9c:	ldrd	r4, [sp]
   26fa0:	ldr	r6, [sp, #8]
   26fa4:	add	sp, sp, #12
   26fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   26fac:	add	r2, r0, #1
   26fb0:	mov	r1, r6
   26fb4:	mov	r0, r5
   26fb8:	bl	10ed4 <memcpy@plt>
   26fbc:	ldrd	r4, [sp]
   26fc0:	mov	r0, #0
   26fc4:	ldr	r6, [sp, #8]
   26fc8:	add	sp, sp, #12
   26fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   26fd0:	sub	r4, r4, #1
   26fd4:	mov	r1, r6
   26fd8:	mov	r2, r4
   26fdc:	mov	r0, r5
   26fe0:	bl	10ed4 <memcpy@plt>
   26fe4:	mov	r3, #0
   26fe8:	mov	r0, #34	; 0x22
   26fec:	strb	r3, [r5, r4]
   26ff0:	ldrd	r4, [sp]
   26ff4:	ldr	r6, [sp, #8]
   26ff8:	add	sp, sp, #12
   26ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   27000:	cmp	r4, #0
   27004:	mov	r0, #22
   27008:	strbne	r6, [r5]
   2700c:	ldrd	r4, [sp]
   27010:	ldr	r6, [sp, #8]
   27014:	add	sp, sp, #12
   27018:	pop	{pc}		; (ldr pc, [sp], #4)
   2701c:	mov	r1, #0
   27020:	b	110d8 <setlocale@plt>
   27024:	cmp	r3, #0
   27028:	cmpeq	r2, #0
   2702c:	bne	27044 <__assert_fail@plt+0x15f18>
   27030:	cmp	r1, #0
   27034:	cmpeq	r0, #0
   27038:	mvnne	r1, #0
   2703c:	mvnne	r0, #0
   27040:	b	27060 <__assert_fail@plt+0x15f34>
   27044:	sub	sp, sp, #8
   27048:	push	{sp, lr}
   2704c:	bl	27070 <__assert_fail@plt+0x15f44>
   27050:	ldr	lr, [sp, #4]
   27054:	add	sp, sp, #8
   27058:	pop	{r2, r3}
   2705c:	bx	lr
   27060:	push	{r1, lr}
   27064:	mov	r0, #8
   27068:	bl	10e68 <raise@plt>
   2706c:	pop	{r1, pc}
   27070:	cmp	r1, r3
   27074:	cmpeq	r0, r2
   27078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2707c:	mov	r4, r0
   27080:	movcc	r0, #0
   27084:	mov	r5, r1
   27088:	ldr	lr, [sp, #36]	; 0x24
   2708c:	movcc	r1, r0
   27090:	bcc	2718c <__assert_fail@plt+0x16060>
   27094:	cmp	r3, #0
   27098:	clzeq	ip, r2
   2709c:	clzne	ip, r3
   270a0:	addeq	ip, ip, #32
   270a4:	cmp	r5, #0
   270a8:	clzeq	r1, r4
   270ac:	addeq	r1, r1, #32
   270b0:	clzne	r1, r5
   270b4:	sub	ip, ip, r1
   270b8:	sub	sl, ip, #32
   270bc:	lsl	r9, r3, ip
   270c0:	rsb	fp, ip, #32
   270c4:	orr	r9, r9, r2, lsl sl
   270c8:	orr	r9, r9, r2, lsr fp
   270cc:	lsl	r8, r2, ip
   270d0:	cmp	r5, r9
   270d4:	cmpeq	r4, r8
   270d8:	movcc	r0, #0
   270dc:	movcc	r1, r0
   270e0:	bcc	270fc <__assert_fail@plt+0x15fd0>
   270e4:	mov	r0, #1
   270e8:	subs	r4, r4, r8
   270ec:	lsl	r1, r0, sl
   270f0:	orr	r1, r1, r0, lsr fp
   270f4:	lsl	r0, r0, ip
   270f8:	sbc	r5, r5, r9
   270fc:	cmp	ip, #0
   27100:	beq	2718c <__assert_fail@plt+0x16060>
   27104:	lsr	r6, r8, #1
   27108:	orr	r6, r6, r9, lsl #31
   2710c:	lsr	r7, r9, #1
   27110:	mov	r2, ip
   27114:	b	27138 <__assert_fail@plt+0x1600c>
   27118:	subs	r3, r4, r6
   2711c:	sbc	r8, r5, r7
   27120:	adds	r3, r3, r3
   27124:	adc	r8, r8, r8
   27128:	adds	r4, r3, #1
   2712c:	adc	r5, r8, #0
   27130:	subs	r2, r2, #1
   27134:	beq	27154 <__assert_fail@plt+0x16028>
   27138:	cmp	r5, r7
   2713c:	cmpeq	r4, r6
   27140:	bcs	27118 <__assert_fail@plt+0x15fec>
   27144:	adds	r4, r4, r4
   27148:	adc	r5, r5, r5
   2714c:	subs	r2, r2, #1
   27150:	bne	27138 <__assert_fail@plt+0x1600c>
   27154:	lsr	r3, r4, ip
   27158:	orr	r3, r3, r5, lsl fp
   2715c:	lsr	r2, r5, ip
   27160:	orr	r3, r3, r5, lsr sl
   27164:	adds	r0, r0, r4
   27168:	mov	r4, r3
   2716c:	lsl	r3, r2, ip
   27170:	orr	r3, r3, r4, lsl sl
   27174:	lsl	ip, r4, ip
   27178:	orr	r3, r3, r4, lsr fp
   2717c:	adc	r1, r1, r5
   27180:	subs	r0, r0, ip
   27184:	mov	r5, r2
   27188:	sbc	r1, r1, r3
   2718c:	cmp	lr, #0
   27190:	strdne	r4, [lr]
   27194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27198:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2719c:	mov	r7, r0
   271a0:	ldr	r6, [pc, #72]	; 271f0 <__assert_fail@plt+0x160c4>
   271a4:	ldr	r5, [pc, #72]	; 271f4 <__assert_fail@plt+0x160c8>
   271a8:	add	r6, pc, r6
   271ac:	add	r5, pc, r5
   271b0:	sub	r6, r6, r5
   271b4:	mov	r8, r1
   271b8:	mov	r9, r2
   271bc:	bl	10e30 <calloc@plt-0x20>
   271c0:	asrs	r6, r6, #2
   271c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   271c8:	mov	r4, #0
   271cc:	add	r4, r4, #1
   271d0:	ldr	r3, [r5], #4
   271d4:	mov	r2, r9
   271d8:	mov	r1, r8
   271dc:	mov	r0, r7
   271e0:	blx	r3
   271e4:	cmp	r6, r4
   271e8:	bne	271cc <__assert_fail@plt+0x160a0>
   271ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   271f0:	andeq	r4, r1, r4, ror #26
   271f4:	andeq	r4, r1, ip, asr sp
   271f8:	bx	lr
   271fc:	ldr	r3, [pc, #12]	; 27210 <__assert_fail@plt+0x160e4>
   27200:	mov	r1, #0
   27204:	add	r3, pc, r3
   27208:	ldr	r2, [r3]
   2720c:	b	11048 <__cxa_atexit@plt>
   27210:	andeq	r4, r1, r0, lsl #30

Disassembly of section .fini:

00027214 <.fini>:
   27214:	push	{r3, lr}
   27218:	pop	{r3, pc}
