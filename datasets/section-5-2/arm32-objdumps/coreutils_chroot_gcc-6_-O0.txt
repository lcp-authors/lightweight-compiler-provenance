
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	11270 <__assert_fail@plt+0x48>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	sl, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #106496	; 0x1a000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <endgrent@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #106496	; 0x1a000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <fputs_unlocked@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #106496	; 0x1a000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <raise@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #106496	; 0x1a000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <getpwnam@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #106496	; 0x1a000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <strcmp@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #106496	; 0x1a000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <getpwuid@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #106496	; 0x1a000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <printf@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #106496	; 0x1a000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <fflush@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #106496	; 0x1a000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <free@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #106496	; 0x1a000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <_exit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #106496	; 0x1a000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <memcpy@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #106496	; 0x1a000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <execvp@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #106496	; 0x1a000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <mbsinit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #106496	; 0x1a000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <memcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #106496	; 0x1a000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <fputc_unlocked@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #106496	; 0x1a000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #106496	; 0x1a000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #106496	; 0x1a000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <chdir@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #106496	; 0x1a000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <iswprint@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #106496	; 0x1a000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <setgroups@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #106496	; 0x1a000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <fwrite@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #106496	; 0x1a000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <lseek64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #106496	; 0x1a000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__ctype_get_mb_cur_max@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #106496	; 0x1a000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <chroot@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #106496	; 0x1a000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <__fpending@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <ferror_unlocked@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <mbrtowc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #28]!

00011060 <error@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #20]!

0001106c <getenv@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #12]!

00011078 <setgid@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4]!

00011084 <malloc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #102400	; 0x19000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__libc_start_main@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #102400	; 0x19000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <__freading@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #102400	; 0x19000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__gmon_start__@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #102400	; 0x19000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <getopt_long@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #102400	; 0x19000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <__ctype_b_loc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #102400	; 0x19000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <exit@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #102400	; 0x19000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <gettext@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #102400	; 0x19000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <strtoul@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #102400	; 0x19000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <strlen@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #102400	; 0x19000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <strchr@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #102400	; 0x19000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <fprintf@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #102400	; 0x19000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <__errno_location@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #102400	; 0x19000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__cxa_atexit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #102400	; 0x19000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <getgrouplist@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #102400	; 0x19000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <memset@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <setgrent@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <getgrent@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fileno@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <strtoumax@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <fclose@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <fseeko64@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <strtok@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <setlocale@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <endpwent@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <strrchr@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <nl_langinfo@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <setuid@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <getgroups@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <canonicalize_file_name@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <bindtextdomain@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <strncmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <abort@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

00011210 <getgrgid@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #102400	; 0x19000
   11218:	ldr	pc, [ip, #3828]!	; 0xef4

0001121c <getgrnam@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #102400	; 0x19000
   11224:	ldr	pc, [ip, #3820]!	; 0xeec

00011228 <__assert_fail@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3812]!	; 0xee4

Disassembly of section .text:

00011234 <.text>:
   11234:	mov	fp, #0
   11238:	mov	lr, #0
   1123c:	pop	{r1}		; (ldr r1, [sp], #4)
   11240:	mov	r2, sp
   11244:	push	{r2}		; (str r2, [sp, #-4]!)
   11248:	push	{r0}		; (str r0, [sp, #-4]!)
   1124c:	ldr	ip, [pc, #16]	; 11264 <__assert_fail@plt+0x3c>
   11250:	push	{ip}		; (str ip, [sp, #-4]!)
   11254:	ldr	r0, [pc, #12]	; 11268 <__assert_fail@plt+0x40>
   11258:	ldr	r3, [pc, #12]	; 1126c <__assert_fail@plt+0x44>
   1125c:	bl	11090 <__libc_start_main@plt>
   11260:	bl	11204 <abort@plt>
   11264:	muleq	r1, ip, r3
   11268:	andeq	r1, r1, r4, asr #21
   1126c:	andeq	r9, r1, ip, lsr r3
   11270:	ldr	r3, [pc, #20]	; 1128c <__assert_fail@plt+0x64>
   11274:	ldr	r2, [pc, #20]	; 11290 <__assert_fail@plt+0x68>
   11278:	add	r3, pc, r3
   1127c:	ldr	r2, [r3, r2]
   11280:	cmp	r2, #0
   11284:	bxeq	lr
   11288:	b	110a8 <__gmon_start__@plt>
   1128c:	andeq	r9, r1, r0, lsl #27
   11290:	andeq	r0, r0, r8, lsl r1
   11294:	ldr	r3, [pc, #28]	; 112b8 <__assert_fail@plt+0x90>
   11298:	ldr	r0, [pc, #28]	; 112bc <__assert_fail@plt+0x94>
   1129c:	sub	r3, r3, r0
   112a0:	cmp	r3, #6
   112a4:	bxls	lr
   112a8:	ldr	r3, [pc, #16]	; 112c0 <__assert_fail@plt+0x98>
   112ac:	cmp	r3, #0
   112b0:	bxeq	lr
   112b4:	bx	r3
   112b8:	andeq	fp, r2, fp, ror r1
   112bc:	andeq	fp, r2, r8, ror r1
   112c0:	andeq	r0, r0, r0
   112c4:	ldr	r1, [pc, #36]	; 112f0 <__assert_fail@plt+0xc8>
   112c8:	ldr	r0, [pc, #36]	; 112f4 <__assert_fail@plt+0xcc>
   112cc:	sub	r1, r1, r0
   112d0:	asr	r1, r1, #2
   112d4:	add	r1, r1, r1, lsr #31
   112d8:	asrs	r1, r1, #1
   112dc:	bxeq	lr
   112e0:	ldr	r3, [pc, #16]	; 112f8 <__assert_fail@plt+0xd0>
   112e4:	cmp	r3, #0
   112e8:	bxeq	lr
   112ec:	bx	r3
   112f0:	andeq	fp, r2, r8, ror r1
   112f4:	andeq	fp, r2, r8, ror r1
   112f8:	andeq	r0, r0, r0
   112fc:	push	{r4, lr}
   11300:	ldr	r4, [pc, #24]	; 11320 <__assert_fail@plt+0xf8>
   11304:	ldrb	r3, [r4]
   11308:	cmp	r3, #0
   1130c:	popne	{r4, pc}
   11310:	bl	11294 <__assert_fail@plt+0x6c>
   11314:	mov	r3, #1
   11318:	strb	r3, [r4]
   1131c:	pop	{r4, pc}
   11320:	muleq	r2, r4, r1
   11324:	ldr	r0, [pc, #40]	; 11354 <__assert_fail@plt+0x12c>
   11328:	ldr	r3, [r0]
   1132c:	cmp	r3, #0
   11330:	bne	11338 <__assert_fail@plt+0x110>
   11334:	b	112c4 <__assert_fail@plt+0x9c>
   11338:	ldr	r3, [pc, #24]	; 11358 <__assert_fail@plt+0x130>
   1133c:	cmp	r3, #0
   11340:	beq	11334 <__assert_fail@plt+0x10c>
   11344:	push	{r4, lr}
   11348:	blx	r3
   1134c:	pop	{r4, lr}
   11350:	b	112c4 <__assert_fail@plt+0x9c>
   11354:	andeq	sl, r2, r4, lsl pc
   11358:	andeq	r0, r0, r0
   1135c:	push	{fp}		; (str fp, [sp, #-4]!)
   11360:	add	fp, sp, #0
   11364:	sub	sp, sp, #12
   11368:	str	r0, [fp, #-8]
   1136c:	ldr	r3, [fp, #-8]
   11370:	cmp	r3, #1
   11374:	beq	11384 <__assert_fail@plt+0x15c>
   11378:	ldr	r2, [pc, #20]	; 11394 <__assert_fail@plt+0x16c>
   1137c:	ldr	r3, [fp, #-8]
   11380:	str	r3, [r2]
   11384:	nop			; (mov r0, r0)
   11388:	add	sp, fp, #0
   1138c:	pop	{fp}		; (ldr fp, [sp], #4)
   11390:	bx	lr
   11394:	andeq	fp, r2, r8, lsr #2
   11398:	push	{fp}		; (str fp, [sp, #-4]!)
   1139c:	add	fp, sp, #0
   113a0:	sub	sp, sp, #12
   113a4:	mov	r3, r0
   113a8:	strb	r3, [fp, #-5]
   113ac:	ldrb	r3, [fp, #-5]
   113b0:	mov	r0, r3
   113b4:	add	sp, fp, #0
   113b8:	pop	{fp}		; (ldr fp, [sp], #4)
   113bc:	bx	lr
   113c0:	push	{fp, lr}
   113c4:	add	fp, sp, #4
   113c8:	sub	sp, sp, #80	; 0x50
   113cc:	str	r0, [fp, #-80]	; 0xffffffb0
   113d0:	ldr	r3, [pc, #348]	; 11534 <__assert_fail@plt+0x30c>
   113d4:	sub	ip, fp, #72	; 0x48
   113d8:	mov	lr, r3
   113dc:	ldm	lr!, {r0, r1, r2, r3}
   113e0:	stmia	ip!, {r0, r1, r2, r3}
   113e4:	ldm	lr!, {r0, r1, r2, r3}
   113e8:	stmia	ip!, {r0, r1, r2, r3}
   113ec:	ldm	lr!, {r0, r1, r2, r3}
   113f0:	stmia	ip!, {r0, r1, r2, r3}
   113f4:	ldm	lr, {r0, r1}
   113f8:	stm	ip, {r0, r1}
   113fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11400:	str	r3, [fp, #-8]
   11404:	sub	r3, fp, #72	; 0x48
   11408:	str	r3, [fp, #-12]
   1140c:	b	1141c <__assert_fail@plt+0x1f4>
   11410:	ldr	r3, [fp, #-12]
   11414:	add	r3, r3, #8
   11418:	str	r3, [fp, #-12]
   1141c:	ldr	r3, [fp, #-12]
   11420:	ldr	r3, [r3]
   11424:	cmp	r3, #0
   11428:	beq	1144c <__assert_fail@plt+0x224>
   1142c:	ldr	r3, [fp, #-12]
   11430:	ldr	r3, [r3]
   11434:	mov	r1, r3
   11438:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1143c:	bl	10f4c <strcmp@plt>
   11440:	mov	r3, r0
   11444:	cmp	r3, #0
   11448:	bne	11410 <__assert_fail@plt+0x1e8>
   1144c:	ldr	r3, [fp, #-12]
   11450:	ldr	r3, [r3, #4]
   11454:	cmp	r3, #0
   11458:	beq	11468 <__assert_fail@plt+0x240>
   1145c:	ldr	r3, [fp, #-12]
   11460:	ldr	r3, [r3, #4]
   11464:	str	r3, [fp, #-8]
   11468:	ldr	r0, [pc, #200]	; 11538 <__assert_fail@plt+0x310>
   1146c:	bl	110d8 <gettext@plt>
   11470:	mov	r3, r0
   11474:	ldr	r2, [pc, #192]	; 1153c <__assert_fail@plt+0x314>
   11478:	ldr	r1, [pc, #192]	; 11540 <__assert_fail@plt+0x318>
   1147c:	mov	r0, r3
   11480:	bl	10f64 <printf@plt>
   11484:	mov	r1, #0
   11488:	mov	r0, #5
   1148c:	bl	11198 <setlocale@plt>
   11490:	str	r0, [fp, #-16]
   11494:	ldr	r3, [fp, #-16]
   11498:	cmp	r3, #0
   1149c:	beq	114dc <__assert_fail@plt+0x2b4>
   114a0:	mov	r2, #3
   114a4:	ldr	r1, [pc, #152]	; 11544 <__assert_fail@plt+0x31c>
   114a8:	ldr	r0, [fp, #-16]
   114ac:	bl	111f8 <strncmp@plt>
   114b0:	mov	r3, r0
   114b4:	cmp	r3, #0
   114b8:	beq	114dc <__assert_fail@plt+0x2b4>
   114bc:	ldr	r0, [pc, #132]	; 11548 <__assert_fail@plt+0x320>
   114c0:	bl	110d8 <gettext@plt>
   114c4:	mov	r2, r0
   114c8:	ldr	r3, [pc, #124]	; 1154c <__assert_fail@plt+0x324>
   114cc:	ldr	r3, [r3]
   114d0:	mov	r1, r3
   114d4:	mov	r0, r2
   114d8:	bl	10f28 <fputs_unlocked@plt>
   114dc:	ldr	r0, [pc, #108]	; 11550 <__assert_fail@plt+0x328>
   114e0:	bl	110d8 <gettext@plt>
   114e4:	mov	r3, r0
   114e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   114ec:	ldr	r1, [pc, #72]	; 1153c <__assert_fail@plt+0x314>
   114f0:	mov	r0, r3
   114f4:	bl	10f64 <printf@plt>
   114f8:	ldr	r0, [pc, #84]	; 11554 <__assert_fail@plt+0x32c>
   114fc:	bl	110d8 <gettext@plt>
   11500:	ldr	r2, [fp, #-8]
   11504:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11508:	cmp	r2, r3
   1150c:	bne	11518 <__assert_fail@plt+0x2f0>
   11510:	ldr	r3, [pc, #64]	; 11558 <__assert_fail@plt+0x330>
   11514:	b	1151c <__assert_fail@plt+0x2f4>
   11518:	ldr	r3, [pc, #60]	; 1155c <__assert_fail@plt+0x334>
   1151c:	mov	r2, r3
   11520:	ldr	r1, [fp, #-8]
   11524:	bl	10f64 <printf@plt>
   11528:	nop			; (mov r0, r0)
   1152c:	sub	sp, fp, #4
   11530:	pop	{fp, pc}
   11534:	andeq	r9, r1, r8, lsr r5
   11538:	andeq	r9, r1, r4, asr #7
   1153c:	ldrdeq	r9, [r1], -ip
   11540:	andeq	r9, r1, r4, lsl #8
   11544:	andeq	r9, r1, r4, lsl r4
   11548:	andeq	r9, r1, r8, lsl r4
   1154c:	andeq	fp, r2, ip, lsl #3
   11550:	andeq	r9, r1, r0, ror #8
   11554:	andeq	r9, r1, ip, ror r4
   11558:			; <UNDEFINED> instruction: 0x000194b0
   1155c:			; <UNDEFINED> instruction: 0x000194bc
   11560:	push	{fp}		; (str fp, [sp, #-4]!)
   11564:	add	fp, sp, #0
   11568:	sub	sp, sp, #12
   1156c:	str	r0, [fp, #-8]
   11570:	ldr	r3, [fp, #-8]
   11574:	mov	r0, r3
   11578:	add	sp, fp, #0
   1157c:	pop	{fp}		; (ldr fp, [sp], #4)
   11580:	bx	lr
   11584:	push	{fp}		; (str fp, [sp, #-4]!)
   11588:	add	fp, sp, #0
   1158c:	sub	sp, sp, #12
   11590:	str	r0, [fp, #-8]
   11594:	ldr	r3, [fp, #-8]
   11598:	cmn	r3, #1
   1159c:	moveq	r3, #1
   115a0:	movne	r3, #0
   115a4:	uxtb	r3, r3
   115a8:	mov	r0, r3
   115ac:	add	sp, fp, #0
   115b0:	pop	{fp}		; (ldr fp, [sp], #4)
   115b4:	bx	lr
   115b8:	push	{fp}		; (str fp, [sp, #-4]!)
   115bc:	add	fp, sp, #0
   115c0:	sub	sp, sp, #12
   115c4:	str	r0, [fp, #-8]
   115c8:	ldr	r3, [fp, #-8]
   115cc:	cmn	r3, #1
   115d0:	moveq	r3, #1
   115d4:	movne	r3, #0
   115d8:	uxtb	r3, r3
   115dc:	mov	r0, r3
   115e0:	add	sp, fp, #0
   115e4:	pop	{fp}		; (ldr fp, [sp], #4)
   115e8:	bx	lr
   115ec:	push	{r4, r5, fp, lr}
   115f0:	add	fp, sp, #12
   115f4:	sub	sp, sp, #64	; 0x40
   115f8:	str	r0, [fp, #-56]	; 0xffffffc8
   115fc:	str	r1, [fp, #-60]	; 0xffffffc4
   11600:	str	r2, [fp, #-64]	; 0xffffffc0
   11604:	strb	r3, [fp, #-65]	; 0xffffffbf
   11608:	mov	r3, #0
   1160c:	str	r3, [fp, #-16]
   11610:	mov	r3, #0
   11614:	str	r3, [fp, #-40]	; 0xffffffd8
   11618:	mov	r3, #0
   1161c:	str	r3, [fp, #-20]	; 0xffffffec
   11620:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11624:	bl	16604 <__assert_fail@plt+0x53dc>
   11628:	mov	r3, r0
   1162c:	str	r3, [fp, #-36]	; 0xffffffdc
   11630:	mov	r3, #0
   11634:	str	r3, [fp, #-28]	; 0xffffffe4
   11638:	ldr	r1, [pc, #612]	; 118a4 <__assert_fail@plt+0x67c>
   1163c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11640:	bl	1118c <strtok@plt>
   11644:	str	r0, [fp, #-24]	; 0xffffffe8
   11648:	b	11800 <__assert_fail@plt+0x5d8>
   1164c:	sub	r2, fp, #52	; 0x34
   11650:	ldr	r3, [pc, #592]	; 118a8 <__assert_fail@plt+0x680>
   11654:	str	r3, [sp]
   11658:	mov	r3, r2
   1165c:	mov	r2, #10
   11660:	mov	r1, #0
   11664:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11668:	bl	1704c <__assert_fail@plt+0x5e24>
   1166c:	mov	r3, r0
   11670:	cmp	r3, #0
   11674:	bne	11720 <__assert_fail@plt+0x4f8>
   11678:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1167c:	mvn	r0, #0
   11680:	mov	r1, #0
   11684:	cmp	r3, r1
   11688:	cmpeq	r2, r0
   1168c:	bhi	11720 <__assert_fail@plt+0x4f8>
   11690:	b	116a0 <__assert_fail@plt+0x478>
   11694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11698:	add	r3, r3, #1
   1169c:	str	r3, [fp, #-24]	; 0xffffffe8
   116a0:	bl	110c0 <__ctype_b_loc@plt>
   116a4:	mov	r3, r0
   116a8:	ldr	r4, [r3]
   116ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116b0:	ldrb	r3, [r3]
   116b4:	mov	r0, r3
   116b8:	bl	11398 <__assert_fail@plt+0x170>
   116bc:	mov	r3, r0
   116c0:	lsl	r3, r3, #1
   116c4:	add	r3, r4, r3
   116c8:	ldrh	r3, [r3]
   116cc:	and	r3, r3, #8192	; 0x2000
   116d0:	cmp	r3, #0
   116d4:	bne	11694 <__assert_fail@plt+0x46c>
   116d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116dc:	ldrb	r3, [r3]
   116e0:	cmp	r3, #43	; 0x2b
   116e4:	beq	11714 <__assert_fail@plt+0x4ec>
   116e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   116ec:	bl	1121c <getgrnam@plt>
   116f0:	str	r0, [fp, #-32]	; 0xffffffe0
   116f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   116f8:	cmp	r3, #0
   116fc:	beq	11714 <__assert_fail@plt+0x4ec>
   11700:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11704:	ldr	r3, [r3, #8]
   11708:	mov	r2, r3
   1170c:	mov	r3, #0
   11710:	strd	r2, [fp, #-52]	; 0xffffffcc
   11714:	mov	r3, #1
   11718:	str	r3, [fp, #-32]	; 0xffffffe0
   1171c:	b	1174c <__assert_fail@plt+0x524>
   11720:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11724:	bl	1121c <getgrnam@plt>
   11728:	str	r0, [fp, #-32]	; 0xffffffe0
   1172c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11730:	cmp	r3, #0
   11734:	beq	1174c <__assert_fail@plt+0x524>
   11738:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1173c:	ldr	r3, [r3, #8]
   11740:	mov	r2, r3
   11744:	mov	r3, #0
   11748:	strd	r2, [fp, #-52]	; 0xffffffcc
   1174c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11750:	cmp	r3, #0
   11754:	bne	117a4 <__assert_fail@plt+0x57c>
   11758:	mvn	r3, #0
   1175c:	str	r3, [fp, #-28]	; 0xffffffe4
   11760:	ldrb	r3, [fp, #-65]	; 0xffffffbf
   11764:	cmp	r3, #0
   11768:	beq	11810 <__assert_fail@plt+0x5e8>
   1176c:	bl	11114 <__errno_location@plt>
   11770:	mov	r3, r0
   11774:	ldr	r4, [r3]
   11778:	ldr	r0, [pc, #300]	; 118ac <__assert_fail@plt+0x684>
   1177c:	bl	110d8 <gettext@plt>
   11780:	mov	r5, r0
   11784:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11788:	bl	14df0 <__assert_fail@plt+0x3bc8>
   1178c:	mov	r3, r0
   11790:	mov	r2, r5
   11794:	mov	r1, r4
   11798:	mov	r0, #0
   1179c:	bl	11060 <error@plt>
   117a0:	b	117f0 <__assert_fail@plt+0x5c8>
   117a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   117a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   117ac:	cmp	r2, r3
   117b0:	bne	117cc <__assert_fail@plt+0x5a4>
   117b4:	sub	r3, fp, #40	; 0x28
   117b8:	mov	r2, #4
   117bc:	mov	r1, r3
   117c0:	ldr	r0, [fp, #-16]
   117c4:	bl	15d9c <__assert_fail@plt+0x4b74>
   117c8:	str	r0, [fp, #-16]
   117cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   117d0:	add	r2, r3, #1
   117d4:	str	r2, [fp, #-20]	; 0xffffffec
   117d8:	lsl	r3, r3, #2
   117dc:	ldr	r2, [fp, #-16]
   117e0:	add	r1, r2, r3
   117e4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   117e8:	mov	r3, r2
   117ec:	str	r3, [r1]
   117f0:	ldr	r1, [pc, #172]	; 118a4 <__assert_fail@plt+0x67c>
   117f4:	mov	r0, #0
   117f8:	bl	1118c <strtok@plt>
   117fc:	str	r0, [fp, #-24]	; 0xffffffe8
   11800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11804:	cmp	r3, #0
   11808:	bne	1164c <__assert_fail@plt+0x424>
   1180c:	b	11814 <__assert_fail@plt+0x5ec>
   11810:	nop			; (mov r0, r0)
   11814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11818:	cmp	r3, #0
   1181c:	bne	11868 <__assert_fail@plt+0x640>
   11820:	ldr	r3, [fp, #-20]	; 0xffffffec
   11824:	cmp	r3, #0
   11828:	bne	11868 <__assert_fail@plt+0x640>
   1182c:	ldrb	r3, [fp, #-65]	; 0xffffffbf
   11830:	cmp	r3, #0
   11834:	beq	11860 <__assert_fail@plt+0x638>
   11838:	ldr	r0, [pc, #112]	; 118b0 <__assert_fail@plt+0x688>
   1183c:	bl	110d8 <gettext@plt>
   11840:	mov	r4, r0
   11844:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11848:	bl	14df0 <__assert_fail@plt+0x3bc8>
   1184c:	mov	r3, r0
   11850:	mov	r2, r4
   11854:	mov	r1, #0
   11858:	mov	r0, #0
   1185c:	bl	11060 <error@plt>
   11860:	mvn	r3, #0
   11864:	str	r3, [fp, #-28]	; 0xffffffe4
   11868:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1186c:	ldr	r2, [fp, #-16]
   11870:	str	r2, [r3]
   11874:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11878:	cmp	r3, #0
   1187c:	bne	1188c <__assert_fail@plt+0x664>
   11880:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11884:	ldr	r2, [fp, #-20]	; 0xffffffec
   11888:	str	r2, [r3]
   1188c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11890:	bl	12634 <__assert_fail@plt+0x140c>
   11894:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11898:	mov	r0, r3
   1189c:	sub	sp, fp, #12
   118a0:	pop	{r4, r5, fp, pc}
   118a4:	andeq	r9, r1, r0, lsl #12
   118a8:			; <UNDEFINED> instruction: 0x000194bc
   118ac:	andeq	r9, r1, r4, lsl #12
   118b0:	andeq	r9, r1, r8, lsl r6
   118b4:	push	{fp, lr}
   118b8:	add	fp, sp, #4
   118bc:	sub	sp, sp, #16
   118c0:	str	r0, [fp, #-16]
   118c4:	ldr	r0, [fp, #-16]
   118c8:	bl	111e0 <canonicalize_file_name@plt>
   118cc:	str	r0, [fp, #-8]
   118d0:	ldr	r3, [fp, #-8]
   118d4:	cmp	r3, #0
   118d8:	beq	118fc <__assert_fail@plt+0x6d4>
   118dc:	ldr	r1, [fp, #-8]
   118e0:	ldr	r0, [pc, #64]	; 11928 <__assert_fail@plt+0x700>
   118e4:	bl	10f4c <strcmp@plt>
   118e8:	mov	r3, r0
   118ec:	cmp	r3, #0
   118f0:	bne	118fc <__assert_fail@plt+0x6d4>
   118f4:	mov	r3, #1
   118f8:	b	11900 <__assert_fail@plt+0x6d8>
   118fc:	mov	r3, #0
   11900:	strb	r3, [fp, #-9]
   11904:	ldrb	r3, [fp, #-9]
   11908:	and	r3, r3, #1
   1190c:	strb	r3, [fp, #-9]
   11910:	ldr	r0, [fp, #-8]
   11914:	bl	12634 <__assert_fail@plt+0x140c>
   11918:	ldrb	r3, [fp, #-9]
   1191c:	mov	r0, r3
   11920:	sub	sp, fp, #4
   11924:	pop	{fp, pc}
   11928:	andeq	r9, r1, r0, lsr r6
   1192c:	push	{r4, fp, lr}
   11930:	add	fp, sp, #8
   11934:	sub	sp, sp, #12
   11938:	str	r0, [fp, #-16]
   1193c:	ldr	r3, [fp, #-16]
   11940:	cmp	r3, #0
   11944:	beq	11974 <__assert_fail@plt+0x74c>
   11948:	ldr	r3, [pc, #316]	; 11a8c <__assert_fail@plt+0x864>
   1194c:	ldr	r4, [r3]
   11950:	ldr	r0, [pc, #312]	; 11a90 <__assert_fail@plt+0x868>
   11954:	bl	110d8 <gettext@plt>
   11958:	mov	r1, r0
   1195c:	ldr	r3, [pc, #304]	; 11a94 <__assert_fail@plt+0x86c>
   11960:	ldr	r3, [r3]
   11964:	mov	r2, r3
   11968:	mov	r0, r4
   1196c:	bl	11108 <fprintf@plt>
   11970:	b	11a84 <__assert_fail@plt+0x85c>
   11974:	ldr	r0, [pc, #284]	; 11a98 <__assert_fail@plt+0x870>
   11978:	bl	110d8 <gettext@plt>
   1197c:	ldr	r3, [pc, #272]	; 11a94 <__assert_fail@plt+0x86c>
   11980:	ldr	r1, [r3]
   11984:	ldr	r3, [pc, #264]	; 11a94 <__assert_fail@plt+0x86c>
   11988:	ldr	r3, [r3]
   1198c:	mov	r2, r3
   11990:	bl	10f64 <printf@plt>
   11994:	ldr	r0, [pc, #256]	; 11a9c <__assert_fail@plt+0x874>
   11998:	bl	110d8 <gettext@plt>
   1199c:	mov	r2, r0
   119a0:	ldr	r3, [pc, #248]	; 11aa0 <__assert_fail@plt+0x878>
   119a4:	ldr	r3, [r3]
   119a8:	mov	r1, r3
   119ac:	mov	r0, r2
   119b0:	bl	10f28 <fputs_unlocked@plt>
   119b4:	ldr	r0, [pc, #232]	; 11aa4 <__assert_fail@plt+0x87c>
   119b8:	bl	110d8 <gettext@plt>
   119bc:	mov	r2, r0
   119c0:	ldr	r3, [pc, #216]	; 11aa0 <__assert_fail@plt+0x878>
   119c4:	ldr	r3, [r3]
   119c8:	mov	r1, r3
   119cc:	mov	r0, r2
   119d0:	bl	10f28 <fputs_unlocked@plt>
   119d4:	ldr	r0, [pc, #204]	; 11aa8 <__assert_fail@plt+0x880>
   119d8:	bl	110d8 <gettext@plt>
   119dc:	mov	r2, r0
   119e0:	ldr	r3, [pc, #184]	; 11aa0 <__assert_fail@plt+0x878>
   119e4:	ldr	r3, [r3]
   119e8:	mov	r1, r3
   119ec:	mov	r0, r2
   119f0:	bl	10f28 <fputs_unlocked@plt>
   119f4:	ldr	r0, [pc, #176]	; 11aac <__assert_fail@plt+0x884>
   119f8:	bl	110d8 <gettext@plt>
   119fc:	mov	r4, r0
   11a00:	ldr	r1, [pc, #168]	; 11ab0 <__assert_fail@plt+0x888>
   11a04:	mov	r0, #4
   11a08:	bl	149f8 <__assert_fail@plt+0x37d0>
   11a0c:	mov	r3, r0
   11a10:	mov	r1, r3
   11a14:	mov	r0, r4
   11a18:	bl	10f64 <printf@plt>
   11a1c:	ldr	r0, [pc, #144]	; 11ab4 <__assert_fail@plt+0x88c>
   11a20:	bl	110d8 <gettext@plt>
   11a24:	mov	r2, r0
   11a28:	ldr	r3, [pc, #112]	; 11aa0 <__assert_fail@plt+0x878>
   11a2c:	ldr	r3, [r3]
   11a30:	mov	r1, r3
   11a34:	mov	r0, r2
   11a38:	bl	10f28 <fputs_unlocked@plt>
   11a3c:	ldr	r0, [pc, #116]	; 11ab8 <__assert_fail@plt+0x890>
   11a40:	bl	110d8 <gettext@plt>
   11a44:	mov	r2, r0
   11a48:	ldr	r3, [pc, #80]	; 11aa0 <__assert_fail@plt+0x878>
   11a4c:	ldr	r3, [r3]
   11a50:	mov	r1, r3
   11a54:	mov	r0, r2
   11a58:	bl	10f28 <fputs_unlocked@plt>
   11a5c:	ldr	r0, [pc, #88]	; 11abc <__assert_fail@plt+0x894>
   11a60:	bl	110d8 <gettext@plt>
   11a64:	mov	r2, r0
   11a68:	ldr	r3, [pc, #48]	; 11aa0 <__assert_fail@plt+0x878>
   11a6c:	ldr	r3, [r3]
   11a70:	mov	r1, r3
   11a74:	mov	r0, r2
   11a78:	bl	10f28 <fputs_unlocked@plt>
   11a7c:	ldr	r0, [pc, #60]	; 11ac0 <__assert_fail@plt+0x898>
   11a80:	bl	113c0 <__assert_fail@plt+0x198>
   11a84:	ldr	r0, [fp, #-16]
   11a88:	bl	110cc <exit@plt>
   11a8c:	andeq	fp, r2, r8, lsl #3
   11a90:	andeq	r9, r1, r4, lsr r6
   11a94:	andeq	fp, r2, r0, lsr #3
   11a98:	andeq	r9, r1, ip, asr r6
   11a9c:	muleq	r1, ip, r6
   11aa0:	andeq	fp, r2, ip, lsl #3
   11aa4:	ldrdeq	r9, [r1], -r0
   11aa8:	andeq	r9, r1, ip, lsl r7
   11aac:	andeq	r9, r1, r8, ror #14
   11ab0:	andeq	r9, r1, r0, lsr r6
   11ab4:	andeq	r9, r1, ip, lsr #15
   11ab8:	ldrdeq	r9, [r1], -ip
   11abc:	andeq	r9, r1, r4, lsl r8
   11ac0:	andeq	r9, r1, ip, asr r8
   11ac4:	push	{r4, r5, fp, lr}
   11ac8:	add	fp, sp, #12
   11acc:	sub	sp, sp, #112	; 0x70
   11ad0:	str	r0, [fp, #-112]	; 0xffffff90
   11ad4:	str	r1, [fp, #-116]	; 0xffffff8c
   11ad8:	mov	r3, #0
   11adc:	str	r3, [fp, #-16]
   11ae0:	mov	r3, #0
   11ae4:	str	r3, [fp, #-20]	; 0xffffffec
   11ae8:	mov	r3, #0
   11aec:	str	r3, [fp, #-24]	; 0xffffffe8
   11af0:	mov	r3, #0
   11af4:	strb	r3, [fp, #-25]	; 0xffffffe7
   11af8:	mvn	r3, #0
   11afc:	str	r3, [fp, #-88]	; 0xffffffa8
   11b00:	mvn	r3, #0
   11b04:	str	r3, [fp, #-92]	; 0xffffffa4
   11b08:	mov	r3, #0
   11b0c:	str	r3, [fp, #-96]	; 0xffffffa0
   11b10:	mov	r3, #0
   11b14:	str	r3, [fp, #-100]	; 0xffffff9c
   11b18:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11b1c:	ldr	r3, [r3]
   11b20:	mov	r0, r3
   11b24:	bl	126c0 <__assert_fail@plt+0x1498>
   11b28:	ldr	r1, [pc, #2292]	; 12424 <__assert_fail@plt+0x11fc>
   11b2c:	mov	r0, #6
   11b30:	bl	11198 <setlocale@plt>
   11b34:	ldr	r1, [pc, #2284]	; 12428 <__assert_fail@plt+0x1200>
   11b38:	ldr	r0, [pc, #2284]	; 1242c <__assert_fail@plt+0x1204>
   11b3c:	bl	111ec <bindtextdomain@plt>
   11b40:	ldr	r0, [pc, #2276]	; 1242c <__assert_fail@plt+0x1204>
   11b44:	bl	10fdc <textdomain@plt>
   11b48:	mov	r0, #125	; 0x7d
   11b4c:	bl	1135c <__assert_fail@plt+0x134>
   11b50:	ldr	r0, [pc, #2264]	; 12430 <__assert_fail@plt+0x1208>
   11b54:	bl	193a0 <__assert_fail@plt+0x8178>
   11b58:	b	11c60 <__assert_fail@plt+0xa38>
   11b5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11b60:	cmp	r3, #256	; 0x100
   11b64:	beq	11bfc <__assert_fail@plt+0x9d4>
   11b68:	cmp	r3, #256	; 0x100
   11b6c:	bgt	11b84 <__assert_fail@plt+0x95c>
   11b70:	cmn	r3, #3
   11b74:	beq	11c20 <__assert_fail@plt+0x9f8>
   11b78:	cmn	r3, #2
   11b7c:	beq	11c18 <__assert_fail@plt+0x9f0>
   11b80:	b	11c58 <__assert_fail@plt+0xa30>
   11b84:	ldr	r2, [pc, #2216]	; 12434 <__assert_fail@plt+0x120c>
   11b88:	cmp	r3, r2
   11b8c:	beq	11ba0 <__assert_fail@plt+0x978>
   11b90:	ldr	r2, [pc, #2208]	; 12438 <__assert_fail@plt+0x1210>
   11b94:	cmp	r3, r2
   11b98:	beq	11c0c <__assert_fail@plt+0x9e4>
   11b9c:	b	11c58 <__assert_fail@plt+0xa30>
   11ba0:	ldr	r3, [pc, #2196]	; 1243c <__assert_fail@plt+0x1214>
   11ba4:	ldr	r3, [r3]
   11ba8:	str	r3, [fp, #-16]
   11bac:	ldr	r0, [fp, #-16]
   11bb0:	bl	110f0 <strlen@plt>
   11bb4:	str	r0, [fp, #-44]	; 0xffffffd4
   11bb8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11bbc:	cmp	r3, #0
   11bc0:	beq	11c60 <__assert_fail@plt+0xa38>
   11bc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11bc8:	sub	r3, r3, #1
   11bcc:	ldr	r2, [fp, #-16]
   11bd0:	add	r3, r2, r3
   11bd4:	ldrb	r3, [r3]
   11bd8:	cmp	r3, #58	; 0x3a
   11bdc:	bne	11c60 <__assert_fail@plt+0xa38>
   11be0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11be4:	sub	r3, r3, #1
   11be8:	ldr	r2, [fp, #-16]
   11bec:	add	r3, r2, r3
   11bf0:	mov	r2, #0
   11bf4:	strb	r2, [r3]
   11bf8:	b	11c60 <__assert_fail@plt+0xa38>
   11bfc:	ldr	r3, [pc, #2104]	; 1243c <__assert_fail@plt+0x1214>
   11c00:	ldr	r3, [r3]
   11c04:	str	r3, [fp, #-24]	; 0xffffffe8
   11c08:	b	11c60 <__assert_fail@plt+0xa38>
   11c0c:	mov	r3, #1
   11c10:	strb	r3, [fp, #-25]	; 0xffffffe7
   11c14:	b	11c60 <__assert_fail@plt+0xa38>
   11c18:	mov	r0, #0
   11c1c:	bl	1192c <__assert_fail@plt+0x704>
   11c20:	ldr	r3, [pc, #2072]	; 12440 <__assert_fail@plt+0x1218>
   11c24:	ldr	r0, [r3]
   11c28:	ldr	r3, [pc, #2068]	; 12444 <__assert_fail@plt+0x121c>
   11c2c:	ldr	r2, [r3]
   11c30:	mov	r3, #0
   11c34:	str	r3, [sp, #4]
   11c38:	ldr	r3, [pc, #2056]	; 12448 <__assert_fail@plt+0x1220>
   11c3c:	str	r3, [sp]
   11c40:	mov	r3, r2
   11c44:	ldr	r2, [pc, #2048]	; 1244c <__assert_fail@plt+0x1224>
   11c48:	ldr	r1, [pc, #2048]	; 12450 <__assert_fail@plt+0x1228>
   11c4c:	bl	159d8 <__assert_fail@plt+0x47b0>
   11c50:	mov	r0, #0
   11c54:	bl	110cc <exit@plt>
   11c58:	mov	r0, #125	; 0x7d
   11c5c:	bl	1192c <__assert_fail@plt+0x704>
   11c60:	mov	r3, #0
   11c64:	str	r3, [sp]
   11c68:	ldr	r3, [pc, #2020]	; 12454 <__assert_fail@plt+0x122c>
   11c6c:	ldr	r2, [pc, #2020]	; 12458 <__assert_fail@plt+0x1230>
   11c70:	ldr	r1, [fp, #-116]	; 0xffffff8c
   11c74:	ldr	r0, [fp, #-112]	; 0xffffff90
   11c78:	bl	110b4 <getopt_long@plt>
   11c7c:	str	r0, [fp, #-40]	; 0xffffffd8
   11c80:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c84:	cmn	r3, #1
   11c88:	bne	11b5c <__assert_fail@plt+0x934>
   11c8c:	ldr	r3, [pc, #1992]	; 1245c <__assert_fail@plt+0x1234>
   11c90:	ldr	r3, [r3]
   11c94:	ldr	r2, [fp, #-112]	; 0xffffff90
   11c98:	cmp	r2, r3
   11c9c:	bgt	11cc4 <__assert_fail@plt+0xa9c>
   11ca0:	ldr	r0, [pc, #1976]	; 12460 <__assert_fail@plt+0x1238>
   11ca4:	bl	110d8 <gettext@plt>
   11ca8:	mov	r3, r0
   11cac:	mov	r2, r3
   11cb0:	mov	r1, #0
   11cb4:	mov	r0, #0
   11cb8:	bl	11060 <error@plt>
   11cbc:	mov	r0, #125	; 0x7d
   11cc0:	bl	1192c <__assert_fail@plt+0x704>
   11cc4:	ldr	r3, [pc, #1936]	; 1245c <__assert_fail@plt+0x1234>
   11cc8:	ldr	r3, [r3]
   11ccc:	lsl	r3, r3, #2
   11cd0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   11cd4:	add	r3, r2, r3
   11cd8:	ldr	r3, [r3]
   11cdc:	str	r3, [fp, #-48]	; 0xffffffd0
   11ce0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11ce4:	bl	118b4 <__assert_fail@plt+0x68c>
   11ce8:	mov	r3, r0
   11cec:	strb	r3, [fp, #-49]	; 0xffffffcf
   11cf0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   11cf4:	eor	r3, r3, #1
   11cf8:	uxtb	r3, r3
   11cfc:	cmp	r3, #0
   11d00:	beq	11d44 <__assert_fail@plt+0xb1c>
   11d04:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11d08:	cmp	r3, #0
   11d0c:	beq	11d44 <__assert_fail@plt+0xb1c>
   11d10:	ldr	r0, [pc, #1868]	; 12464 <__assert_fail@plt+0x123c>
   11d14:	bl	110d8 <gettext@plt>
   11d18:	mov	r4, r0
   11d1c:	ldr	r1, [pc, #1860]	; 12468 <__assert_fail@plt+0x1240>
   11d20:	mov	r0, #4
   11d24:	bl	149f8 <__assert_fail@plt+0x37d0>
   11d28:	mov	r3, r0
   11d2c:	mov	r2, r4
   11d30:	mov	r1, #0
   11d34:	mov	r0, #0
   11d38:	bl	11060 <error@plt>
   11d3c:	mov	r0, #125	; 0x7d
   11d40:	bl	1192c <__assert_fail@plt+0x704>
   11d44:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   11d48:	eor	r3, r3, #1
   11d4c:	uxtb	r3, r3
   11d50:	cmp	r3, #0
   11d54:	beq	11eb0 <__assert_fail@plt+0xc88>
   11d58:	ldr	r3, [fp, #-16]
   11d5c:	cmp	r3, #0
   11d60:	beq	11d84 <__assert_fail@plt+0xb5c>
   11d64:	sub	r2, fp, #92	; 0x5c
   11d68:	sub	r1, fp, #88	; 0x58
   11d6c:	mov	r3, #0
   11d70:	str	r3, [sp]
   11d74:	mov	r3, #0
   11d78:	ldr	r0, [fp, #-16]
   11d7c:	bl	15244 <__assert_fail@plt+0x401c>
   11d80:	str	r0, [fp, #-56]	; 0xffffffc8
   11d84:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11d88:	mov	r0, r3
   11d8c:	bl	11584 <__assert_fail@plt+0x35c>
   11d90:	mov	r3, r0
   11d94:	eor	r3, r3, #1
   11d98:	uxtb	r3, r3
   11d9c:	cmp	r3, #0
   11da0:	beq	11e14 <__assert_fail@plt+0xbec>
   11da4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11da8:	cmp	r3, #0
   11dac:	beq	11dc8 <__assert_fail@plt+0xba0>
   11db0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11db4:	mov	r0, r3
   11db8:	bl	115b8 <__assert_fail@plt+0x390>
   11dbc:	mov	r3, r0
   11dc0:	cmp	r3, #0
   11dc4:	beq	11e14 <__assert_fail@plt+0xbec>
   11dc8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11dcc:	mov	r0, r3
   11dd0:	bl	10f58 <getpwuid@plt>
   11dd4:	str	r0, [fp, #-60]	; 0xffffffc4
   11dd8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ddc:	cmp	r3, #0
   11de0:	beq	11e14 <__assert_fail@plt+0xbec>
   11de4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11de8:	mov	r0, r3
   11dec:	bl	115b8 <__assert_fail@plt+0x390>
   11df0:	mov	r3, r0
   11df4:	cmp	r3, #0
   11df8:	beq	11e08 <__assert_fail@plt+0xbe0>
   11dfc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e00:	ldr	r3, [r3, #12]
   11e04:	str	r3, [fp, #-92]	; 0xffffffa4
   11e08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e0c:	ldr	r3, [r3]
   11e10:	str	r3, [fp, #-20]	; 0xffffffec
   11e14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e18:	cmp	r3, #0
   11e1c:	beq	11e4c <__assert_fail@plt+0xc24>
   11e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e24:	ldrb	r3, [r3]
   11e28:	cmp	r3, #0
   11e2c:	beq	11e4c <__assert_fail@plt+0xc24>
   11e30:	sub	r2, fp, #100	; 0x64
   11e34:	sub	r1, fp, #96	; 0x60
   11e38:	mov	r3, #0
   11e3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e40:	bl	115ec <__assert_fail@plt+0x3c4>
   11e44:	str	r0, [fp, #-64]	; 0xffffffc0
   11e48:	b	11eb0 <__assert_fail@plt+0xc88>
   11e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e50:	cmp	r3, #0
   11e54:	bne	11eb0 <__assert_fail@plt+0xc88>
   11e58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11e5c:	mov	r0, r3
   11e60:	bl	115b8 <__assert_fail@plt+0x390>
   11e64:	mov	r3, r0
   11e68:	eor	r3, r3, #1
   11e6c:	uxtb	r3, r3
   11e70:	cmp	r3, #0
   11e74:	beq	11eb0 <__assert_fail@plt+0xc88>
   11e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e7c:	cmp	r3, #0
   11e80:	beq	11eb0 <__assert_fail@plt+0xc88>
   11e84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11e88:	sub	r2, fp, #96	; 0x60
   11e8c:	mov	r1, r3
   11e90:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e94:	bl	1667c <__assert_fail@plt+0x5454>
   11e98:	str	r0, [fp, #-68]	; 0xffffffbc
   11e9c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11ea0:	cmp	r3, #0
   11ea4:	ble	11eb0 <__assert_fail@plt+0xc88>
   11ea8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11eac:	str	r3, [fp, #-100]	; 0xffffff9c
   11eb0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11eb4:	bl	11030 <chroot@plt>
   11eb8:	mov	r3, r0
   11ebc:	cmp	r3, #0
   11ec0:	beq	11efc <__assert_fail@plt+0xcd4>
   11ec4:	bl	11114 <__errno_location@plt>
   11ec8:	mov	r3, r0
   11ecc:	ldr	r4, [r3]
   11ed0:	ldr	r0, [pc, #1428]	; 1246c <__assert_fail@plt+0x1244>
   11ed4:	bl	110d8 <gettext@plt>
   11ed8:	mov	r5, r0
   11edc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11ee0:	mov	r0, #4
   11ee4:	bl	149f8 <__assert_fail@plt+0x37d0>
   11ee8:	mov	r3, r0
   11eec:	mov	r2, r5
   11ef0:	mov	r1, r4
   11ef4:	mov	r0, #125	; 0x7d
   11ef8:	bl	11060 <error@plt>
   11efc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11f00:	eor	r3, r3, #1
   11f04:	uxtb	r3, r3
   11f08:	cmp	r3, #0
   11f0c:	beq	11f4c <__assert_fail@plt+0xd24>
   11f10:	ldr	r0, [pc, #1360]	; 12468 <__assert_fail@plt+0x1240>
   11f14:	bl	10fe8 <chdir@plt>
   11f18:	mov	r3, r0
   11f1c:	cmp	r3, #0
   11f20:	beq	11f4c <__assert_fail@plt+0xd24>
   11f24:	bl	11114 <__errno_location@plt>
   11f28:	mov	r3, r0
   11f2c:	ldr	r4, [r3]
   11f30:	ldr	r0, [pc, #1336]	; 12470 <__assert_fail@plt+0x1248>
   11f34:	bl	110d8 <gettext@plt>
   11f38:	mov	r3, r0
   11f3c:	mov	r2, r3
   11f40:	mov	r1, r4
   11f44:	mov	r0, #125	; 0x7d
   11f48:	bl	11060 <error@plt>
   11f4c:	ldr	r3, [pc, #1288]	; 1245c <__assert_fail@plt+0x1234>
   11f50:	ldr	r3, [r3]
   11f54:	add	r2, r3, #1
   11f58:	ldr	r3, [fp, #-112]	; 0xffffff90
   11f5c:	cmp	r2, r3
   11f60:	bne	11fc0 <__assert_fail@plt+0xd98>
   11f64:	ldr	r0, [pc, #1288]	; 12474 <__assert_fail@plt+0x124c>
   11f68:	bl	1106c <getenv@plt>
   11f6c:	str	r0, [fp, #-32]	; 0xffffffe0
   11f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f74:	cmp	r3, #0
   11f78:	bne	11f88 <__assert_fail@plt+0xd60>
   11f7c:	ldr	r0, [pc, #1268]	; 12478 <__assert_fail@plt+0x1250>
   11f80:	bl	11560 <__assert_fail@plt+0x338>
   11f84:	str	r0, [fp, #-32]	; 0xffffffe0
   11f88:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11f8c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11f90:	str	r2, [r3]
   11f94:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11f98:	add	r4, r3, #4
   11f9c:	ldr	r0, [pc, #1240]	; 1247c <__assert_fail@plt+0x1254>
   11fa0:	bl	11560 <__assert_fail@plt+0x338>
   11fa4:	mov	r3, r0
   11fa8:	str	r3, [r4]
   11fac:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11fb0:	add	r3, r3, #8
   11fb4:	mov	r2, #0
   11fb8:	str	r2, [r3]
   11fbc:	b	11fdc <__assert_fail@plt+0xdb4>
   11fc0:	ldr	r3, [pc, #1172]	; 1245c <__assert_fail@plt+0x1234>
   11fc4:	ldr	r3, [r3]
   11fc8:	add	r3, r3, #1
   11fcc:	lsl	r3, r3, #2
   11fd0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   11fd4:	add	r3, r2, r3
   11fd8:	str	r3, [fp, #-116]	; 0xffffff8c
   11fdc:	ldr	r3, [fp, #-16]
   11fe0:	cmp	r3, #0
   11fe4:	beq	12060 <__assert_fail@plt+0xe38>
   11fe8:	sub	r2, fp, #92	; 0x5c
   11fec:	sub	r1, fp, #88	; 0x58
   11ff0:	mov	r3, #0
   11ff4:	str	r3, [sp]
   11ff8:	mov	r3, #0
   11ffc:	ldr	r0, [fp, #-16]
   12000:	bl	15244 <__assert_fail@plt+0x401c>
   12004:	str	r0, [fp, #-72]	; 0xffffffb8
   12008:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1200c:	cmp	r3, #0
   12010:	beq	12060 <__assert_fail@plt+0xe38>
   12014:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12018:	mov	r0, r3
   1201c:	bl	11584 <__assert_fail@plt+0x35c>
   12020:	mov	r3, r0
   12024:	cmp	r3, #0
   12028:	beq	12060 <__assert_fail@plt+0xe38>
   1202c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12030:	mov	r0, r3
   12034:	bl	115b8 <__assert_fail@plt+0x390>
   12038:	mov	r3, r0
   1203c:	cmp	r3, #0
   12040:	beq	12060 <__assert_fail@plt+0xe38>
   12044:	bl	11114 <__errno_location@plt>
   12048:	mov	r3, r0
   1204c:	ldr	r1, [r3]
   12050:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12054:	ldr	r2, [pc, #1060]	; 12480 <__assert_fail@plt+0x1258>
   12058:	mov	r0, #125	; 0x7d
   1205c:	bl	11060 <error@plt>
   12060:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12064:	mov	r0, r3
   12068:	bl	11584 <__assert_fail@plt+0x35c>
   1206c:	mov	r3, r0
   12070:	eor	r3, r3, #1
   12074:	uxtb	r3, r3
   12078:	cmp	r3, #0
   1207c:	beq	12134 <__assert_fail@plt+0xf0c>
   12080:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12084:	cmp	r3, #0
   12088:	beq	120a4 <__assert_fail@plt+0xe7c>
   1208c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12090:	mov	r0, r3
   12094:	bl	115b8 <__assert_fail@plt+0x390>
   12098:	mov	r3, r0
   1209c:	cmp	r3, #0
   120a0:	beq	12134 <__assert_fail@plt+0xf0c>
   120a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   120a8:	mov	r0, r3
   120ac:	bl	10f58 <getpwuid@plt>
   120b0:	str	r0, [fp, #-76]	; 0xffffffb4
   120b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   120b8:	cmp	r3, #0
   120bc:	beq	120f4 <__assert_fail@plt+0xecc>
   120c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120c4:	mov	r0, r3
   120c8:	bl	115b8 <__assert_fail@plt+0x390>
   120cc:	mov	r3, r0
   120d0:	cmp	r3, #0
   120d4:	beq	120e4 <__assert_fail@plt+0xebc>
   120d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   120dc:	ldr	r3, [r3, #12]
   120e0:	str	r3, [fp, #-92]	; 0xffffffa4
   120e4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   120e8:	ldr	r3, [r3]
   120ec:	str	r3, [fp, #-20]	; 0xffffffec
   120f0:	b	12134 <__assert_fail@plt+0xf0c>
   120f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120f8:	mov	r0, r3
   120fc:	bl	115b8 <__assert_fail@plt+0x390>
   12100:	mov	r3, r0
   12104:	cmp	r3, #0
   12108:	beq	12134 <__assert_fail@plt+0xf0c>
   1210c:	bl	11114 <__errno_location@plt>
   12110:	mov	r3, r0
   12114:	ldr	r4, [r3]
   12118:	ldr	r0, [pc, #868]	; 12484 <__assert_fail@plt+0x125c>
   1211c:	bl	110d8 <gettext@plt>
   12120:	mov	r2, r0
   12124:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12128:	mov	r1, r4
   1212c:	mov	r0, #125	; 0x7d
   12130:	bl	11060 <error@plt>
   12134:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12138:	str	r3, [fp, #-36]	; 0xffffffdc
   1213c:	mov	r3, #0
   12140:	str	r3, [fp, #-104]	; 0xffffff98
   12144:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12148:	cmp	r3, #0
   1214c:	beq	121b0 <__assert_fail@plt+0xf88>
   12150:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12154:	ldrb	r3, [r3]
   12158:	cmp	r3, #0
   1215c:	beq	121b0 <__assert_fail@plt+0xf88>
   12160:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12164:	cmp	r3, #0
   12168:	moveq	r3, #1
   1216c:	movne	r3, #0
   12170:	uxtb	r3, r3
   12174:	sub	r2, fp, #100	; 0x64
   12178:	sub	r1, fp, #104	; 0x68
   1217c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12180:	bl	115ec <__assert_fail@plt+0x3c4>
   12184:	mov	r3, r0
   12188:	cmp	r3, #0
   1218c:	beq	121a4 <__assert_fail@plt+0xf7c>
   12190:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12194:	cmp	r3, #0
   12198:	bne	12254 <__assert_fail@plt+0x102c>
   1219c:	mov	r3, #125	; 0x7d
   121a0:	b	12418 <__assert_fail@plt+0x11f0>
   121a4:	ldr	r3, [fp, #-104]	; 0xffffff98
   121a8:	str	r3, [fp, #-36]	; 0xffffffdc
   121ac:	b	12254 <__assert_fail@plt+0x102c>
   121b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   121b4:	cmp	r3, #0
   121b8:	bne	12258 <__assert_fail@plt+0x1030>
   121bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   121c0:	mov	r0, r3
   121c4:	bl	115b8 <__assert_fail@plt+0x390>
   121c8:	mov	r3, r0
   121cc:	eor	r3, r3, #1
   121d0:	uxtb	r3, r3
   121d4:	cmp	r3, #0
   121d8:	beq	12258 <__assert_fail@plt+0x1030>
   121dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   121e0:	cmp	r3, #0
   121e4:	beq	12258 <__assert_fail@plt+0x1030>
   121e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   121ec:	sub	r2, fp, #104	; 0x68
   121f0:	mov	r1, r3
   121f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   121f8:	bl	1667c <__assert_fail@plt+0x5454>
   121fc:	str	r0, [fp, #-80]	; 0xffffffb0
   12200:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12204:	cmp	r3, #0
   12208:	bgt	12240 <__assert_fail@plt+0x1018>
   1220c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12210:	cmp	r3, #0
   12214:	bne	12258 <__assert_fail@plt+0x1030>
   12218:	bl	11114 <__errno_location@plt>
   1221c:	mov	r3, r0
   12220:	ldr	r4, [r3]
   12224:	ldr	r0, [pc, #604]	; 12488 <__assert_fail@plt+0x1260>
   12228:	bl	110d8 <gettext@plt>
   1222c:	mov	r3, r0
   12230:	mov	r2, r3
   12234:	mov	r1, r4
   12238:	mov	r0, #125	; 0x7d
   1223c:	bl	11060 <error@plt>
   12240:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12244:	str	r3, [fp, #-100]	; 0xffffff9c
   12248:	ldr	r3, [fp, #-104]	; 0xffffff98
   1224c:	str	r3, [fp, #-36]	; 0xffffffdc
   12250:	b	12258 <__assert_fail@plt+0x1030>
   12254:	nop			; (mov r0, r0)
   12258:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1225c:	mov	r0, r3
   12260:	bl	11584 <__assert_fail@plt+0x35c>
   12264:	mov	r3, r0
   12268:	eor	r3, r3, #1
   1226c:	uxtb	r3, r3
   12270:	cmp	r3, #0
   12274:	bne	12284 <__assert_fail@plt+0x105c>
   12278:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1227c:	cmp	r3, #0
   12280:	beq	122c8 <__assert_fail@plt+0x10a0>
   12284:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12288:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1228c:	mov	r0, r3
   12290:	bl	11000 <setgroups@plt>
   12294:	mov	r3, r0
   12298:	cmp	r3, #0
   1229c:	beq	122c8 <__assert_fail@plt+0x10a0>
   122a0:	bl	11114 <__errno_location@plt>
   122a4:	mov	r3, r0
   122a8:	ldr	r4, [r3]
   122ac:	ldr	r0, [pc, #472]	; 1248c <__assert_fail@plt+0x1264>
   122b0:	bl	110d8 <gettext@plt>
   122b4:	mov	r3, r0
   122b8:	mov	r2, r3
   122bc:	mov	r1, r4
   122c0:	mov	r0, #125	; 0x7d
   122c4:	bl	11060 <error@plt>
   122c8:	ldr	r3, [fp, #-104]	; 0xffffff98
   122cc:	mov	r0, r3
   122d0:	bl	12634 <__assert_fail@plt+0x140c>
   122d4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   122d8:	mov	r0, r3
   122dc:	bl	12634 <__assert_fail@plt+0x140c>
   122e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   122e4:	mov	r0, r3
   122e8:	bl	115b8 <__assert_fail@plt+0x390>
   122ec:	mov	r3, r0
   122f0:	eor	r3, r3, #1
   122f4:	uxtb	r3, r3
   122f8:	cmp	r3, #0
   122fc:	beq	12340 <__assert_fail@plt+0x1118>
   12300:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12304:	mov	r0, r3
   12308:	bl	11078 <setgid@plt>
   1230c:	mov	r3, r0
   12310:	cmp	r3, #0
   12314:	beq	12340 <__assert_fail@plt+0x1118>
   12318:	bl	11114 <__errno_location@plt>
   1231c:	mov	r3, r0
   12320:	ldr	r4, [r3]
   12324:	ldr	r0, [pc, #356]	; 12490 <__assert_fail@plt+0x1268>
   12328:	bl	110d8 <gettext@plt>
   1232c:	mov	r3, r0
   12330:	mov	r2, r3
   12334:	mov	r1, r4
   12338:	mov	r0, #125	; 0x7d
   1233c:	bl	11060 <error@plt>
   12340:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12344:	mov	r0, r3
   12348:	bl	11584 <__assert_fail@plt+0x35c>
   1234c:	mov	r3, r0
   12350:	eor	r3, r3, #1
   12354:	uxtb	r3, r3
   12358:	cmp	r3, #0
   1235c:	beq	123a0 <__assert_fail@plt+0x1178>
   12360:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12364:	mov	r0, r3
   12368:	bl	111c8 <setuid@plt>
   1236c:	mov	r3, r0
   12370:	cmp	r3, #0
   12374:	beq	123a0 <__assert_fail@plt+0x1178>
   12378:	bl	11114 <__errno_location@plt>
   1237c:	mov	r3, r0
   12380:	ldr	r4, [r3]
   12384:	ldr	r0, [pc, #264]	; 12494 <__assert_fail@plt+0x126c>
   12388:	bl	110d8 <gettext@plt>
   1238c:	mov	r3, r0
   12390:	mov	r2, r3
   12394:	mov	r1, r4
   12398:	mov	r0, #125	; 0x7d
   1239c:	bl	11060 <error@plt>
   123a0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   123a4:	ldr	r3, [r3]
   123a8:	ldr	r1, [fp, #-116]	; 0xffffff8c
   123ac:	mov	r0, r3
   123b0:	bl	10fa0 <execvp@plt>
   123b4:	bl	11114 <__errno_location@plt>
   123b8:	mov	r3, r0
   123bc:	ldr	r3, [r3]
   123c0:	cmp	r3, #2
   123c4:	bne	123d0 <__assert_fail@plt+0x11a8>
   123c8:	mov	r3, #127	; 0x7f
   123cc:	b	123d4 <__assert_fail@plt+0x11ac>
   123d0:	mov	r3, #126	; 0x7e
   123d4:	str	r3, [fp, #-84]	; 0xffffffac
   123d8:	bl	11114 <__errno_location@plt>
   123dc:	mov	r3, r0
   123e0:	ldr	r4, [r3]
   123e4:	ldr	r0, [pc, #172]	; 12498 <__assert_fail@plt+0x1270>
   123e8:	bl	110d8 <gettext@plt>
   123ec:	mov	r5, r0
   123f0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   123f4:	ldr	r3, [r3]
   123f8:	mov	r0, r3
   123fc:	bl	14df0 <__assert_fail@plt+0x3bc8>
   12400:	mov	r3, r0
   12404:	mov	r2, r5
   12408:	mov	r1, r4
   1240c:	mov	r0, #0
   12410:	bl	11060 <error@plt>
   12414:	ldr	r3, [fp, #-84]	; 0xffffffac
   12418:	mov	r0, r3
   1241c:	sub	sp, fp, #12
   12420:	pop	{r4, r5, fp, pc}
   12424:			; <UNDEFINED> instruction: 0x000194bc
   12428:	andeq	r9, r1, r4, ror #16
   1242c:	ldrdeq	r9, [r1], -r4
   12430:	andeq	r2, r1, r0, lsl #10
   12434:	andeq	r0, r0, r1, lsl #2
   12438:	andeq	r0, r0, r2, lsl #2
   1243c:	muleq	r2, r0, r1
   12440:	andeq	fp, r2, ip, lsl #3
   12444:	andeq	fp, r2, r4, lsr #2
   12448:	andeq	r9, r1, ip, ror r8
   1244c:	andeq	r9, r1, r4, lsl #8
   12450:	andeq	r9, r1, ip, asr r8
   12454:	andeq	r9, r1, r0, lsr #11
   12458:	andeq	r9, r1, ip, lsl #17
   1245c:	andeq	fp, r2, r0, lsl #3
   12460:	muleq	r1, r0, r8
   12464:	andeq	r9, r1, r0, lsr #17
   12468:	andeq	r9, r1, r0, lsr r6
   1246c:	ldrdeq	r9, [r1], -r8
   12470:	strdeq	r9, [r1], -ip
   12474:	andeq	r9, r1, ip, lsl r9
   12478:	andeq	r9, r1, r4, lsr #18
   1247c:	andeq	r9, r1, ip, lsr #18
   12480:	andeq	r9, r1, r0, lsr r9
   12484:	andeq	r9, r1, r4, lsr r9
   12488:	andeq	r9, r1, ip, asr r9
   1248c:	andeq	r9, r1, r0, lsl #19
   12490:	andeq	r9, r1, r4, lsr #19
   12494:			; <UNDEFINED> instruction: 0x000199bc
   12498:	ldrdeq	r9, [r1], -r4
   1249c:	push	{fp}		; (str fp, [sp, #-4]!)
   124a0:	add	fp, sp, #0
   124a4:	sub	sp, sp, #12
   124a8:	str	r0, [fp, #-8]
   124ac:	ldr	r2, [pc, #20]	; 124c8 <__assert_fail@plt+0x12a0>
   124b0:	ldr	r3, [fp, #-8]
   124b4:	str	r3, [r2]
   124b8:	nop			; (mov r0, r0)
   124bc:	add	sp, fp, #0
   124c0:	pop	{fp}		; (ldr fp, [sp], #4)
   124c4:	bx	lr
   124c8:	muleq	r2, r8, r1
   124cc:	push	{fp}		; (str fp, [sp, #-4]!)
   124d0:	add	fp, sp, #0
   124d4:	sub	sp, sp, #12
   124d8:	mov	r3, r0
   124dc:	strb	r3, [fp, #-5]
   124e0:	ldr	r2, [pc, #20]	; 124fc <__assert_fail@plt+0x12d4>
   124e4:	ldrb	r3, [fp, #-5]
   124e8:	strb	r3, [r2]
   124ec:	nop			; (mov r0, r0)
   124f0:	add	sp, fp, #0
   124f4:	pop	{fp}		; (ldr fp, [sp], #4)
   124f8:	bx	lr
   124fc:	muleq	r2, ip, r1
   12500:	push	{r4, fp, lr}
   12504:	add	fp, sp, #8
   12508:	sub	sp, sp, #20
   1250c:	ldr	r3, [pc, #256]	; 12614 <__assert_fail@plt+0x13ec>
   12510:	ldr	r3, [r3]
   12514:	mov	r0, r3
   12518:	bl	17960 <__assert_fail@plt+0x6738>
   1251c:	mov	r3, r0
   12520:	cmp	r3, #0
   12524:	beq	125dc <__assert_fail@plt+0x13b4>
   12528:	ldr	r3, [pc, #232]	; 12618 <__assert_fail@plt+0x13f0>
   1252c:	ldrb	r3, [r3]
   12530:	eor	r3, r3, #1
   12534:	uxtb	r3, r3
   12538:	cmp	r3, #0
   1253c:	bne	12554 <__assert_fail@plt+0x132c>
   12540:	bl	11114 <__errno_location@plt>
   12544:	mov	r3, r0
   12548:	ldr	r3, [r3]
   1254c:	cmp	r3, #32
   12550:	beq	125dc <__assert_fail@plt+0x13b4>
   12554:	ldr	r0, [pc, #192]	; 1261c <__assert_fail@plt+0x13f4>
   12558:	bl	110d8 <gettext@plt>
   1255c:	str	r0, [fp, #-16]
   12560:	ldr	r3, [pc, #184]	; 12620 <__assert_fail@plt+0x13f8>
   12564:	ldr	r3, [r3]
   12568:	cmp	r3, #0
   1256c:	beq	125b0 <__assert_fail@plt+0x1388>
   12570:	bl	11114 <__errno_location@plt>
   12574:	mov	r3, r0
   12578:	ldr	r4, [r3]
   1257c:	ldr	r3, [pc, #156]	; 12620 <__assert_fail@plt+0x13f8>
   12580:	ldr	r3, [r3]
   12584:	mov	r0, r3
   12588:	bl	14b20 <__assert_fail@plt+0x38f8>
   1258c:	mov	r2, r0
   12590:	ldr	r3, [fp, #-16]
   12594:	str	r3, [sp]
   12598:	mov	r3, r2
   1259c:	ldr	r2, [pc, #128]	; 12624 <__assert_fail@plt+0x13fc>
   125a0:	mov	r1, r4
   125a4:	mov	r0, #0
   125a8:	bl	11060 <error@plt>
   125ac:	b	125cc <__assert_fail@plt+0x13a4>
   125b0:	bl	11114 <__errno_location@plt>
   125b4:	mov	r3, r0
   125b8:	ldr	r1, [r3]
   125bc:	ldr	r3, [fp, #-16]
   125c0:	ldr	r2, [pc, #96]	; 12628 <__assert_fail@plt+0x1400>
   125c4:	mov	r0, #0
   125c8:	bl	11060 <error@plt>
   125cc:	ldr	r3, [pc, #88]	; 1262c <__assert_fail@plt+0x1404>
   125d0:	ldr	r3, [r3]
   125d4:	mov	r0, r3
   125d8:	bl	10f88 <_exit@plt>
   125dc:	ldr	r3, [pc, #76]	; 12630 <__assert_fail@plt+0x1408>
   125e0:	ldr	r3, [r3]
   125e4:	mov	r0, r3
   125e8:	bl	17960 <__assert_fail@plt+0x6738>
   125ec:	mov	r3, r0
   125f0:	cmp	r3, #0
   125f4:	beq	12608 <__assert_fail@plt+0x13e0>
   125f8:	ldr	r3, [pc, #44]	; 1262c <__assert_fail@plt+0x1404>
   125fc:	ldr	r3, [r3]
   12600:	mov	r0, r3
   12604:	bl	10f88 <_exit@plt>
   12608:	nop			; (mov r0, r0)
   1260c:	sub	sp, fp, #8
   12610:	pop	{r4, fp, pc}
   12614:	andeq	fp, r2, ip, lsl #3
   12618:	muleq	r2, ip, r1
   1261c:	andeq	r9, r1, r0, lsl #20
   12620:	muleq	r2, r8, r1
   12624:	andeq	r9, r1, ip, lsl #20
   12628:	andeq	r9, r1, r4, lsl sl
   1262c:	andeq	fp, r2, r8, lsr #2
   12630:	andeq	fp, r2, r8, lsl #3
   12634:	push	{r4, fp, lr}
   12638:	add	fp, sp, #8
   1263c:	sub	sp, sp, #20
   12640:	str	r0, [fp, #-24]	; 0xffffffe8
   12644:	bl	11114 <__errno_location@plt>
   12648:	mov	r3, r0
   1264c:	ldr	r3, [r3]
   12650:	str	r3, [fp, #-20]	; 0xffffffec
   12654:	bl	11114 <__errno_location@plt>
   12658:	mov	r3, r0
   1265c:	ldr	r3, [r3]
   12660:	str	r3, [fp, #-16]
   12664:	bl	11114 <__errno_location@plt>
   12668:	mov	r2, r0
   1266c:	mov	r3, #0
   12670:	str	r3, [r2]
   12674:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12678:	bl	10f7c <free@plt>
   1267c:	bl	11114 <__errno_location@plt>
   12680:	mov	r4, r0
   12684:	bl	11114 <__errno_location@plt>
   12688:	mov	r3, r0
   1268c:	ldr	r3, [r3]
   12690:	cmp	r3, #0
   12694:	moveq	r3, #1
   12698:	movne	r3, #0
   1269c:	uxtb	r3, r3
   126a0:	lsl	r3, r3, #2
   126a4:	sub	r2, fp, #12
   126a8:	add	r3, r2, r3
   126ac:	ldr	r3, [r3, #-8]
   126b0:	str	r3, [r4]
   126b4:	nop			; (mov r0, r0)
   126b8:	sub	sp, fp, #8
   126bc:	pop	{r4, fp, pc}
   126c0:	push	{fp, lr}
   126c4:	add	fp, sp, #4
   126c8:	sub	sp, sp, #16
   126cc:	str	r0, [fp, #-16]
   126d0:	ldr	r3, [fp, #-16]
   126d4:	cmp	r3, #0
   126d8:	bne	126f8 <__assert_fail@plt+0x14d0>
   126dc:	ldr	r3, [pc, #220]	; 127c0 <__assert_fail@plt+0x1598>
   126e0:	ldr	r3, [r3]
   126e4:	mov	r2, #55	; 0x37
   126e8:	mov	r1, #1
   126ec:	ldr	r0, [pc, #208]	; 127c4 <__assert_fail@plt+0x159c>
   126f0:	bl	1100c <fwrite@plt>
   126f4:	bl	11204 <abort@plt>
   126f8:	mov	r1, #47	; 0x2f
   126fc:	ldr	r0, [fp, #-16]
   12700:	bl	111b0 <strrchr@plt>
   12704:	str	r0, [fp, #-8]
   12708:	ldr	r3, [fp, #-8]
   1270c:	cmp	r3, #0
   12710:	beq	12720 <__assert_fail@plt+0x14f8>
   12714:	ldr	r3, [fp, #-8]
   12718:	add	r3, r3, #1
   1271c:	b	12724 <__assert_fail@plt+0x14fc>
   12720:	ldr	r3, [fp, #-16]
   12724:	str	r3, [fp, #-12]
   12728:	ldr	r2, [fp, #-12]
   1272c:	ldr	r3, [fp, #-16]
   12730:	sub	r3, r2, r3
   12734:	cmp	r3, #6
   12738:	ble	1279c <__assert_fail@plt+0x1574>
   1273c:	ldr	r3, [fp, #-12]
   12740:	sub	r3, r3, #7
   12744:	mov	r2, #7
   12748:	ldr	r1, [pc, #120]	; 127c8 <__assert_fail@plt+0x15a0>
   1274c:	mov	r0, r3
   12750:	bl	111f8 <strncmp@plt>
   12754:	mov	r3, r0
   12758:	cmp	r3, #0
   1275c:	bne	1279c <__assert_fail@plt+0x1574>
   12760:	ldr	r3, [fp, #-12]
   12764:	str	r3, [fp, #-16]
   12768:	mov	r2, #3
   1276c:	ldr	r1, [pc, #88]	; 127cc <__assert_fail@plt+0x15a4>
   12770:	ldr	r0, [fp, #-12]
   12774:	bl	111f8 <strncmp@plt>
   12778:	mov	r3, r0
   1277c:	cmp	r3, #0
   12780:	bne	1279c <__assert_fail@plt+0x1574>
   12784:	ldr	r3, [fp, #-12]
   12788:	add	r3, r3, #3
   1278c:	str	r3, [fp, #-16]
   12790:	ldr	r2, [pc, #56]	; 127d0 <__assert_fail@plt+0x15a8>
   12794:	ldr	r3, [fp, #-16]
   12798:	str	r3, [r2]
   1279c:	ldr	r2, [pc, #48]	; 127d4 <__assert_fail@plt+0x15ac>
   127a0:	ldr	r3, [fp, #-16]
   127a4:	str	r3, [r2]
   127a8:	ldr	r2, [pc, #40]	; 127d8 <__assert_fail@plt+0x15b0>
   127ac:	ldr	r3, [fp, #-16]
   127b0:	str	r3, [r2]
   127b4:	nop			; (mov r0, r0)
   127b8:	sub	sp, fp, #4
   127bc:	pop	{fp, pc}
   127c0:	andeq	fp, r2, r8, lsl #3
   127c4:	andeq	r9, r1, r8, lsl sl
   127c8:	andeq	r9, r1, r0, asr sl
   127cc:	andeq	r9, r1, r8, asr sl
   127d0:	andeq	fp, r2, r8, ror r1
   127d4:	andeq	fp, r2, r0, lsr #3
   127d8:	andeq	fp, r2, ip, ror r1
   127dc:	push	{fp, lr}
   127e0:	add	fp, sp, #4
   127e4:	sub	sp, sp, #16
   127e8:	str	r0, [fp, #-16]
   127ec:	bl	11114 <__errno_location@plt>
   127f0:	mov	r3, r0
   127f4:	ldr	r3, [r3]
   127f8:	str	r3, [fp, #-8]
   127fc:	ldr	r3, [fp, #-16]
   12800:	cmp	r3, #0
   12804:	beq	12810 <__assert_fail@plt+0x15e8>
   12808:	ldr	r3, [fp, #-16]
   1280c:	b	12814 <__assert_fail@plt+0x15ec>
   12810:	ldr	r3, [pc, #48]	; 12848 <__assert_fail@plt+0x1620>
   12814:	mov	r1, #48	; 0x30
   12818:	mov	r0, r3
   1281c:	bl	1651c <__assert_fail@plt+0x52f4>
   12820:	mov	r3, r0
   12824:	str	r3, [fp, #-12]
   12828:	bl	11114 <__errno_location@plt>
   1282c:	mov	r2, r0
   12830:	ldr	r3, [fp, #-8]
   12834:	str	r3, [r2]
   12838:	ldr	r3, [fp, #-12]
   1283c:	mov	r0, r3
   12840:	sub	sp, fp, #4
   12844:	pop	{fp, pc}
   12848:	andeq	fp, r2, r4, lsr #3
   1284c:	push	{fp}		; (str fp, [sp, #-4]!)
   12850:	add	fp, sp, #0
   12854:	sub	sp, sp, #12
   12858:	str	r0, [fp, #-8]
   1285c:	ldr	r3, [fp, #-8]
   12860:	cmp	r3, #0
   12864:	beq	12870 <__assert_fail@plt+0x1648>
   12868:	ldr	r3, [fp, #-8]
   1286c:	b	12874 <__assert_fail@plt+0x164c>
   12870:	ldr	r3, [pc, #16]	; 12888 <__assert_fail@plt+0x1660>
   12874:	ldr	r3, [r3]
   12878:	mov	r0, r3
   1287c:	add	sp, fp, #0
   12880:	pop	{fp}		; (ldr fp, [sp], #4)
   12884:	bx	lr
   12888:	andeq	fp, r2, r4, lsr #3
   1288c:	push	{fp}		; (str fp, [sp, #-4]!)
   12890:	add	fp, sp, #0
   12894:	sub	sp, sp, #12
   12898:	str	r0, [fp, #-8]
   1289c:	str	r1, [fp, #-12]
   128a0:	ldr	r3, [fp, #-8]
   128a4:	cmp	r3, #0
   128a8:	beq	128b4 <__assert_fail@plt+0x168c>
   128ac:	ldr	r3, [fp, #-8]
   128b0:	b	128b8 <__assert_fail@plt+0x1690>
   128b4:	ldr	r3, [pc, #20]	; 128d0 <__assert_fail@plt+0x16a8>
   128b8:	ldr	r2, [fp, #-12]
   128bc:	str	r2, [r3]
   128c0:	nop			; (mov r0, r0)
   128c4:	add	sp, fp, #0
   128c8:	pop	{fp}		; (ldr fp, [sp], #4)
   128cc:	bx	lr
   128d0:	andeq	fp, r2, r4, lsr #3
   128d4:	push	{fp}		; (str fp, [sp, #-4]!)
   128d8:	add	fp, sp, #0
   128dc:	sub	sp, sp, #36	; 0x24
   128e0:	str	r0, [fp, #-24]	; 0xffffffe8
   128e4:	mov	r3, r1
   128e8:	str	r2, [fp, #-32]	; 0xffffffe0
   128ec:	strb	r3, [fp, #-25]	; 0xffffffe7
   128f0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   128f4:	strb	r3, [fp, #-5]
   128f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128fc:	cmp	r3, #0
   12900:	beq	1290c <__assert_fail@plt+0x16e4>
   12904:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12908:	b	12910 <__assert_fail@plt+0x16e8>
   1290c:	ldr	r3, [pc, #124]	; 12990 <__assert_fail@plt+0x1768>
   12910:	add	r2, r3, #8
   12914:	ldrb	r3, [fp, #-5]
   12918:	lsr	r3, r3, #5
   1291c:	uxtb	r3, r3
   12920:	lsl	r3, r3, #2
   12924:	add	r3, r2, r3
   12928:	str	r3, [fp, #-12]
   1292c:	ldrb	r3, [fp, #-5]
   12930:	and	r3, r3, #31
   12934:	str	r3, [fp, #-16]
   12938:	ldr	r3, [fp, #-12]
   1293c:	ldr	r2, [r3]
   12940:	ldr	r3, [fp, #-16]
   12944:	lsr	r3, r2, r3
   12948:	and	r3, r3, #1
   1294c:	str	r3, [fp, #-20]	; 0xffffffec
   12950:	ldr	r3, [fp, #-12]
   12954:	ldr	r3, [r3]
   12958:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1295c:	and	r1, r2, #1
   12960:	ldr	r2, [fp, #-20]	; 0xffffffec
   12964:	eor	r1, r1, r2
   12968:	ldr	r2, [fp, #-16]
   1296c:	lsl	r2, r1, r2
   12970:	eor	r2, r2, r3
   12974:	ldr	r3, [fp, #-12]
   12978:	str	r2, [r3]
   1297c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12980:	mov	r0, r3
   12984:	add	sp, fp, #0
   12988:	pop	{fp}		; (ldr fp, [sp], #4)
   1298c:	bx	lr
   12990:	andeq	fp, r2, r4, lsr #3
   12994:	push	{fp}		; (str fp, [sp, #-4]!)
   12998:	add	fp, sp, #0
   1299c:	sub	sp, sp, #20
   129a0:	str	r0, [fp, #-16]
   129a4:	str	r1, [fp, #-20]	; 0xffffffec
   129a8:	ldr	r3, [fp, #-16]
   129ac:	cmp	r3, #0
   129b0:	bne	129bc <__assert_fail@plt+0x1794>
   129b4:	ldr	r3, [pc, #44]	; 129e8 <__assert_fail@plt+0x17c0>
   129b8:	str	r3, [fp, #-16]
   129bc:	ldr	r3, [fp, #-16]
   129c0:	ldr	r3, [r3, #4]
   129c4:	str	r3, [fp, #-8]
   129c8:	ldr	r3, [fp, #-16]
   129cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   129d0:	str	r2, [r3, #4]
   129d4:	ldr	r3, [fp, #-8]
   129d8:	mov	r0, r3
   129dc:	add	sp, fp, #0
   129e0:	pop	{fp}		; (ldr fp, [sp], #4)
   129e4:	bx	lr
   129e8:	andeq	fp, r2, r4, lsr #3
   129ec:	push	{fp, lr}
   129f0:	add	fp, sp, #4
   129f4:	sub	sp, sp, #16
   129f8:	str	r0, [fp, #-8]
   129fc:	str	r1, [fp, #-12]
   12a00:	str	r2, [fp, #-16]
   12a04:	ldr	r3, [fp, #-8]
   12a08:	cmp	r3, #0
   12a0c:	bne	12a18 <__assert_fail@plt+0x17f0>
   12a10:	ldr	r3, [pc, #76]	; 12a64 <__assert_fail@plt+0x183c>
   12a14:	str	r3, [fp, #-8]
   12a18:	ldr	r3, [fp, #-8]
   12a1c:	mov	r2, #10
   12a20:	str	r2, [r3]
   12a24:	ldr	r3, [fp, #-12]
   12a28:	cmp	r3, #0
   12a2c:	beq	12a3c <__assert_fail@plt+0x1814>
   12a30:	ldr	r3, [fp, #-16]
   12a34:	cmp	r3, #0
   12a38:	bne	12a40 <__assert_fail@plt+0x1818>
   12a3c:	bl	11204 <abort@plt>
   12a40:	ldr	r3, [fp, #-8]
   12a44:	ldr	r2, [fp, #-12]
   12a48:	str	r2, [r3, #40]	; 0x28
   12a4c:	ldr	r3, [fp, #-8]
   12a50:	ldr	r2, [fp, #-16]
   12a54:	str	r2, [r3, #44]	; 0x2c
   12a58:	nop			; (mov r0, r0)
   12a5c:	sub	sp, fp, #4
   12a60:	pop	{fp, pc}
   12a64:	andeq	fp, r2, r4, lsr #3
   12a68:	push	{fp, lr}
   12a6c:	add	fp, sp, #4
   12a70:	sub	sp, sp, #56	; 0x38
   12a74:	str	r0, [fp, #-56]	; 0xffffffc8
   12a78:	str	r1, [fp, #-60]	; 0xffffffc4
   12a7c:	sub	r3, fp, #52	; 0x34
   12a80:	mov	r2, #48	; 0x30
   12a84:	mov	r1, #0
   12a88:	mov	r0, r3
   12a8c:	bl	11138 <memset@plt>
   12a90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12a94:	cmp	r3, #10
   12a98:	bne	12aa0 <__assert_fail@plt+0x1878>
   12a9c:	bl	11204 <abort@plt>
   12aa0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12aa4:	str	r3, [fp, #-52]	; 0xffffffcc
   12aa8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12aac:	mov	lr, r3
   12ab0:	sub	ip, fp, #52	; 0x34
   12ab4:	ldm	ip!, {r0, r1, r2, r3}
   12ab8:	stmia	lr!, {r0, r1, r2, r3}
   12abc:	ldm	ip!, {r0, r1, r2, r3}
   12ac0:	stmia	lr!, {r0, r1, r2, r3}
   12ac4:	ldm	ip, {r0, r1, r2, r3}
   12ac8:	stm	lr, {r0, r1, r2, r3}
   12acc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ad0:	sub	sp, fp, #4
   12ad4:	pop	{fp, pc}
   12ad8:	push	{fp, lr}
   12adc:	add	fp, sp, #4
   12ae0:	sub	sp, sp, #16
   12ae4:	str	r0, [fp, #-16]
   12ae8:	str	r1, [fp, #-20]	; 0xffffffec
   12aec:	ldr	r0, [fp, #-16]
   12af0:	bl	110d8 <gettext@plt>
   12af4:	str	r0, [fp, #-8]
   12af8:	ldr	r2, [fp, #-8]
   12afc:	ldr	r3, [fp, #-16]
   12b00:	cmp	r2, r3
   12b04:	beq	12b10 <__assert_fail@plt+0x18e8>
   12b08:	ldr	r3, [fp, #-8]
   12b0c:	b	12ba0 <__assert_fail@plt+0x1978>
   12b10:	bl	17e8c <__assert_fail@plt+0x6c64>
   12b14:	str	r0, [fp, #-12]
   12b18:	ldr	r1, [pc, #140]	; 12bac <__assert_fail@plt+0x1984>
   12b1c:	ldr	r0, [fp, #-12]
   12b20:	bl	178c8 <__assert_fail@plt+0x66a0>
   12b24:	mov	r3, r0
   12b28:	cmp	r3, #0
   12b2c:	bne	12b50 <__assert_fail@plt+0x1928>
   12b30:	ldr	r3, [fp, #-16]
   12b34:	ldrb	r3, [r3]
   12b38:	cmp	r3, #96	; 0x60
   12b3c:	bne	12b48 <__assert_fail@plt+0x1920>
   12b40:	ldr	r3, [pc, #104]	; 12bb0 <__assert_fail@plt+0x1988>
   12b44:	b	12ba0 <__assert_fail@plt+0x1978>
   12b48:	ldr	r3, [pc, #100]	; 12bb4 <__assert_fail@plt+0x198c>
   12b4c:	b	12ba0 <__assert_fail@plt+0x1978>
   12b50:	ldr	r1, [pc, #96]	; 12bb8 <__assert_fail@plt+0x1990>
   12b54:	ldr	r0, [fp, #-12]
   12b58:	bl	178c8 <__assert_fail@plt+0x66a0>
   12b5c:	mov	r3, r0
   12b60:	cmp	r3, #0
   12b64:	bne	12b88 <__assert_fail@plt+0x1960>
   12b68:	ldr	r3, [fp, #-16]
   12b6c:	ldrb	r3, [r3]
   12b70:	cmp	r3, #96	; 0x60
   12b74:	bne	12b80 <__assert_fail@plt+0x1958>
   12b78:	ldr	r3, [pc, #60]	; 12bbc <__assert_fail@plt+0x1994>
   12b7c:	b	12ba0 <__assert_fail@plt+0x1978>
   12b80:	ldr	r3, [pc, #56]	; 12bc0 <__assert_fail@plt+0x1998>
   12b84:	b	12ba0 <__assert_fail@plt+0x1978>
   12b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b8c:	cmp	r3, #9
   12b90:	bne	12b9c <__assert_fail@plt+0x1974>
   12b94:	ldr	r3, [pc, #40]	; 12bc4 <__assert_fail@plt+0x199c>
   12b98:	b	12ba0 <__assert_fail@plt+0x1978>
   12b9c:	ldr	r3, [pc, #36]	; 12bc8 <__assert_fail@plt+0x19a0>
   12ba0:	mov	r0, r3
   12ba4:	sub	sp, fp, #4
   12ba8:	pop	{fp, pc}
   12bac:	andeq	r9, r1, r8, lsl fp
   12bb0:	andeq	r9, r1, r0, lsr #22
   12bb4:	andeq	r9, r1, r4, lsr #22
   12bb8:	andeq	r9, r1, r8, lsr #22
   12bbc:	andeq	r9, r1, r0, lsr fp
   12bc0:	andeq	r9, r1, r4, lsr fp
   12bc4:	andeq	r9, r1, r8, lsr fp
   12bc8:	andeq	r9, r1, ip, lsr fp
   12bcc:	push	{r4, fp, lr}
   12bd0:	add	fp, sp, #8
   12bd4:	sub	sp, sp, #116	; 0x74
   12bd8:	str	r0, [fp, #-88]	; 0xffffffa8
   12bdc:	str	r1, [fp, #-92]	; 0xffffffa4
   12be0:	str	r2, [fp, #-96]	; 0xffffffa0
   12be4:	str	r3, [fp, #-100]	; 0xffffff9c
   12be8:	mov	r3, #0
   12bec:	str	r3, [fp, #-20]	; 0xffffffec
   12bf0:	mov	r3, #0
   12bf4:	str	r3, [fp, #-24]	; 0xffffffe8
   12bf8:	mov	r3, #0
   12bfc:	str	r3, [fp, #-28]	; 0xffffffe4
   12c00:	mov	r3, #0
   12c04:	str	r3, [fp, #-32]	; 0xffffffe0
   12c08:	mov	r3, #0
   12c0c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12c10:	bl	11024 <__ctype_get_mb_cur_max@plt>
   12c14:	mov	r3, r0
   12c18:	cmp	r3, #1
   12c1c:	moveq	r3, #1
   12c20:	movne	r3, #0
   12c24:	strb	r3, [fp, #-57]	; 0xffffffc7
   12c28:	ldr	r3, [fp, #8]
   12c2c:	and	r3, r3, #2
   12c30:	cmp	r3, #0
   12c34:	movne	r3, #1
   12c38:	moveq	r3, #0
   12c3c:	strb	r3, [fp, #-34]	; 0xffffffde
   12c40:	mov	r3, #0
   12c44:	strb	r3, [fp, #-35]	; 0xffffffdd
   12c48:	mov	r3, #0
   12c4c:	strb	r3, [fp, #-36]	; 0xffffffdc
   12c50:	mov	r3, #1
   12c54:	strb	r3, [fp, #-37]	; 0xffffffdb
   12c58:	ldr	r3, [fp, #4]
   12c5c:	cmp	r3, #10
   12c60:	ldrls	pc, [pc, r3, lsl #2]
   12c64:	b	12e6c <__assert_fail@plt+0x1c44>
   12c68:	andeq	r2, r1, r0, ror #28
   12c6c:	ldrdeq	r2, [r1], -ip
   12c70:	andeq	r2, r1, r0, lsl #28
   12c74:	ldrdeq	r2, [r1], -r4
   12c78:	andeq	r2, r1, r4, ror #27
   12c7c:	andeq	r2, r1, r4, lsr #25
   12c80:	muleq	r1, r4, ip
   12c84:	andeq	r2, r1, r4, lsl #26
   12c88:	andeq	r2, r1, r8, lsl sp
   12c8c:	andeq	r2, r1, r8, lsl sp
   12c90:	andeq	r2, r1, r8, lsl sp
   12c94:	mov	r3, #5
   12c98:	str	r3, [fp, #4]
   12c9c:	mov	r3, #1
   12ca0:	strb	r3, [fp, #-34]	; 0xffffffde
   12ca4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ca8:	eor	r3, r3, #1
   12cac:	uxtb	r3, r3
   12cb0:	cmp	r3, #0
   12cb4:	beq	12ce8 <__assert_fail@plt+0x1ac0>
   12cb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12cc0:	cmp	r2, r3
   12cc4:	bcs	12cdc <__assert_fail@plt+0x1ab4>
   12cc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cd0:	add	r3, r2, r3
   12cd4:	mov	r2, #34	; 0x22
   12cd8:	strb	r2, [r3]
   12cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ce0:	add	r3, r3, #1
   12ce4:	str	r3, [fp, #-20]	; 0xffffffec
   12ce8:	mov	r3, #1
   12cec:	strb	r3, [fp, #-33]	; 0xffffffdf
   12cf0:	ldr	r3, [pc, #3872]	; 13c18 <__assert_fail@plt+0x29f0>
   12cf4:	str	r3, [fp, #-28]	; 0xffffffe4
   12cf8:	mov	r3, #1
   12cfc:	str	r3, [fp, #-32]	; 0xffffffe0
   12d00:	b	12e70 <__assert_fail@plt+0x1c48>
   12d04:	mov	r3, #1
   12d08:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d0c:	mov	r3, #0
   12d10:	strb	r3, [fp, #-34]	; 0xffffffde
   12d14:	b	12e70 <__assert_fail@plt+0x1c48>
   12d18:	ldr	r3, [fp, #4]
   12d1c:	cmp	r3, #10
   12d20:	beq	12d44 <__assert_fail@plt+0x1b1c>
   12d24:	ldr	r1, [fp, #4]
   12d28:	ldr	r0, [pc, #3820]	; 13c1c <__assert_fail@plt+0x29f4>
   12d2c:	bl	12ad8 <__assert_fail@plt+0x18b0>
   12d30:	str	r0, [fp, #16]
   12d34:	ldr	r1, [fp, #4]
   12d38:	ldr	r0, [pc, #3808]	; 13c20 <__assert_fail@plt+0x29f8>
   12d3c:	bl	12ad8 <__assert_fail@plt+0x18b0>
   12d40:	str	r0, [fp, #20]
   12d44:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d48:	eor	r3, r3, #1
   12d4c:	uxtb	r3, r3
   12d50:	cmp	r3, #0
   12d54:	beq	12db4 <__assert_fail@plt+0x1b8c>
   12d58:	ldr	r3, [fp, #16]
   12d5c:	str	r3, [fp, #-28]	; 0xffffffe4
   12d60:	b	12da4 <__assert_fail@plt+0x1b7c>
   12d64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d6c:	cmp	r2, r3
   12d70:	bcs	12d8c <__assert_fail@plt+0x1b64>
   12d74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d7c:	add	r3, r2, r3
   12d80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12d84:	ldrb	r2, [r2]
   12d88:	strb	r2, [r3]
   12d8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d90:	add	r3, r3, #1
   12d94:	str	r3, [fp, #-20]	; 0xffffffec
   12d98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d9c:	add	r3, r3, #1
   12da0:	str	r3, [fp, #-28]	; 0xffffffe4
   12da4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12da8:	ldrb	r3, [r3]
   12dac:	cmp	r3, #0
   12db0:	bne	12d64 <__assert_fail@plt+0x1b3c>
   12db4:	mov	r3, #1
   12db8:	strb	r3, [fp, #-33]	; 0xffffffdf
   12dbc:	ldr	r3, [fp, #20]
   12dc0:	str	r3, [fp, #-28]	; 0xffffffe4
   12dc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12dc8:	bl	110f0 <strlen@plt>
   12dcc:	str	r0, [fp, #-32]	; 0xffffffe0
   12dd0:	b	12e70 <__assert_fail@plt+0x1c48>
   12dd4:	mov	r3, #1
   12dd8:	strb	r3, [fp, #-33]	; 0xffffffdf
   12ddc:	mov	r3, #1
   12de0:	strb	r3, [fp, #-34]	; 0xffffffde
   12de4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12de8:	eor	r3, r3, #1
   12dec:	uxtb	r3, r3
   12df0:	cmp	r3, #0
   12df4:	beq	12e00 <__assert_fail@plt+0x1bd8>
   12df8:	mov	r3, #1
   12dfc:	strb	r3, [fp, #-33]	; 0xffffffdf
   12e00:	mov	r3, #2
   12e04:	str	r3, [fp, #4]
   12e08:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12e0c:	eor	r3, r3, #1
   12e10:	uxtb	r3, r3
   12e14:	cmp	r3, #0
   12e18:	beq	12e4c <__assert_fail@plt+0x1c24>
   12e1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e24:	cmp	r2, r3
   12e28:	bcs	12e40 <__assert_fail@plt+0x1c18>
   12e2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e34:	add	r3, r2, r3
   12e38:	mov	r2, #39	; 0x27
   12e3c:	strb	r2, [r3]
   12e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e44:	add	r3, r3, #1
   12e48:	str	r3, [fp, #-20]	; 0xffffffec
   12e4c:	ldr	r3, [pc, #3532]	; 13c20 <__assert_fail@plt+0x29f8>
   12e50:	str	r3, [fp, #-28]	; 0xffffffe4
   12e54:	mov	r3, #1
   12e58:	str	r3, [fp, #-32]	; 0xffffffe0
   12e5c:	b	12e70 <__assert_fail@plt+0x1c48>
   12e60:	mov	r3, #0
   12e64:	strb	r3, [fp, #-34]	; 0xffffffde
   12e68:	b	12e70 <__assert_fail@plt+0x1c48>
   12e6c:	bl	11204 <abort@plt>
   12e70:	mov	r3, #0
   12e74:	str	r3, [fp, #-16]
   12e78:	b	14008 <__assert_fail@plt+0x2de0>
   12e7c:	mov	r3, #0
   12e80:	strb	r3, [fp, #-40]	; 0xffffffd8
   12e84:	mov	r3, #0
   12e88:	strb	r3, [fp, #-41]	; 0xffffffd7
   12e8c:	mov	r3, #0
   12e90:	strb	r3, [fp, #-42]	; 0xffffffd6
   12e94:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12e98:	cmp	r3, #0
   12e9c:	beq	12f38 <__assert_fail@plt+0x1d10>
   12ea0:	ldr	r3, [fp, #4]
   12ea4:	cmp	r3, #2
   12ea8:	beq	12f38 <__assert_fail@plt+0x1d10>
   12eac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12eb0:	cmp	r3, #0
   12eb4:	beq	12f38 <__assert_fail@plt+0x1d10>
   12eb8:	ldr	r2, [fp, #-16]
   12ebc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ec0:	add	r4, r2, r3
   12ec4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12ec8:	cmn	r3, #1
   12ecc:	bne	12ef0 <__assert_fail@plt+0x1cc8>
   12ed0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ed4:	cmp	r3, #1
   12ed8:	bls	12ef0 <__assert_fail@plt+0x1cc8>
   12edc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12ee0:	bl	110f0 <strlen@plt>
   12ee4:	str	r0, [fp, #-100]	; 0xffffff9c
   12ee8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12eec:	b	12ef4 <__assert_fail@plt+0x1ccc>
   12ef0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12ef4:	cmp	r4, r3
   12ef8:	bhi	12f38 <__assert_fail@plt+0x1d10>
   12efc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12f00:	ldr	r3, [fp, #-16]
   12f04:	add	r3, r2, r3
   12f08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12f0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12f10:	mov	r0, r3
   12f14:	bl	10fb8 <memcmp@plt>
   12f18:	mov	r3, r0
   12f1c:	cmp	r3, #0
   12f20:	bne	12f38 <__assert_fail@plt+0x1d10>
   12f24:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12f28:	cmp	r3, #0
   12f2c:	bne	141c4 <__assert_fail@plt+0x2f9c>
   12f30:	mov	r3, #1
   12f34:	strb	r3, [fp, #-40]	; 0xffffffd8
   12f38:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12f3c:	ldr	r3, [fp, #-16]
   12f40:	add	r3, r2, r3
   12f44:	ldrb	r3, [r3]
   12f48:	strb	r3, [fp, #-38]	; 0xffffffda
   12f4c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12f50:	cmp	r3, #126	; 0x7e
   12f54:	ldrls	pc, [pc, r3, lsl #2]
   12f58:	b	13784 <__assert_fail@plt+0x255c>
   12f5c:	andeq	r3, r1, r8, asr r1
   12f60:	andeq	r3, r1, r4, lsl #15
   12f64:	andeq	r3, r1, r4, lsl #15
   12f68:	andeq	r3, r1, r4, lsl #15
   12f6c:	andeq	r3, r1, r4, lsl #15
   12f70:	andeq	r3, r1, r4, lsl #15
   12f74:	andeq	r3, r1, r4, lsl #15
   12f78:	andeq	r3, r1, r8, asr #10
   12f7c:	andeq	r3, r1, r4, asr r5
   12f80:	andeq	r3, r1, r4, lsl #11
   12f84:	andeq	r3, r1, ip, ror #10
   12f88:	muleq	r1, r0, r5
   12f8c:	andeq	r3, r1, r0, ror #10
   12f90:	andeq	r3, r1, r8, ror r5
   12f94:	andeq	r3, r1, r4, lsl #15
   12f98:	andeq	r3, r1, r4, lsl #15
   12f9c:	andeq	r3, r1, r4, lsl #15
   12fa0:	andeq	r3, r1, r4, lsl #15
   12fa4:	andeq	r3, r1, r4, lsl #15
   12fa8:	andeq	r3, r1, r4, lsl #15
   12fac:	andeq	r3, r1, r4, lsl #15
   12fb0:	andeq	r3, r1, r4, lsl #15
   12fb4:	andeq	r3, r1, r4, lsl #15
   12fb8:	andeq	r3, r1, r4, lsl #15
   12fbc:	andeq	r3, r1, r4, lsl #15
   12fc0:	andeq	r3, r1, r4, lsl #15
   12fc4:	andeq	r3, r1, r4, lsl #15
   12fc8:	andeq	r3, r1, r4, lsl #15
   12fcc:	andeq	r3, r1, r4, lsl #15
   12fd0:	andeq	r3, r1, r4, lsl #15
   12fd4:	andeq	r3, r1, r4, lsl #15
   12fd8:	andeq	r3, r1, r4, lsl #15
   12fdc:	andeq	r3, r1, r8, ror #12
   12fe0:	andeq	r3, r1, r0, ror r6
   12fe4:	andeq	r3, r1, r0, ror r6
   12fe8:	andeq	r3, r1, ip, asr r6
   12fec:	andeq	r3, r1, r0, ror r6
   12ff0:	andeq	r3, r1, r8, ror r7
   12ff4:	andeq	r3, r1, r0, ror r6
   12ff8:	andeq	r3, r1, ip, lsl #13
   12ffc:	andeq	r3, r1, r0, ror r6
   13000:	andeq	r3, r1, r0, ror r6
   13004:	andeq	r3, r1, r0, ror r6
   13008:	andeq	r3, r1, r8, ror r7
   1300c:	andeq	r3, r1, r8, ror r7
   13010:	andeq	r3, r1, r8, ror r7
   13014:	andeq	r3, r1, r8, ror r7
   13018:	andeq	r3, r1, r8, ror r7
   1301c:	andeq	r3, r1, r8, ror r7
   13020:	andeq	r3, r1, r8, ror r7
   13024:	andeq	r3, r1, r8, ror r7
   13028:	andeq	r3, r1, r8, ror r7
   1302c:	andeq	r3, r1, r8, ror r7
   13030:	andeq	r3, r1, r8, ror r7
   13034:	andeq	r3, r1, r8, ror r7
   13038:	andeq	r3, r1, r8, ror r7
   1303c:	andeq	r3, r1, r8, ror r7
   13040:	andeq	r3, r1, r8, ror r7
   13044:	andeq	r3, r1, r8, ror r7
   13048:	andeq	r3, r1, r0, ror r6
   1304c:	andeq	r3, r1, r0, ror r6
   13050:	andeq	r3, r1, r0, ror r6
   13054:	andeq	r3, r1, r0, ror r6
   13058:	andeq	r3, r1, r8, lsr r3
   1305c:	andeq	r3, r1, r4, lsl #15
   13060:	andeq	r3, r1, r8, ror r7
   13064:	andeq	r3, r1, r8, ror r7
   13068:	andeq	r3, r1, r8, ror r7
   1306c:	andeq	r3, r1, r8, ror r7
   13070:	andeq	r3, r1, r8, ror r7
   13074:	andeq	r3, r1, r8, ror r7
   13078:	andeq	r3, r1, r8, ror r7
   1307c:	andeq	r3, r1, r8, ror r7
   13080:	andeq	r3, r1, r8, ror r7
   13084:	andeq	r3, r1, r8, ror r7
   13088:	andeq	r3, r1, r8, ror r7
   1308c:	andeq	r3, r1, r8, ror r7
   13090:	andeq	r3, r1, r8, ror r7
   13094:	andeq	r3, r1, r8, ror r7
   13098:	andeq	r3, r1, r8, ror r7
   1309c:	andeq	r3, r1, r8, ror r7
   130a0:	andeq	r3, r1, r8, ror r7
   130a4:	andeq	r3, r1, r8, ror r7
   130a8:	andeq	r3, r1, r8, ror r7
   130ac:	andeq	r3, r1, r8, ror r7
   130b0:	andeq	r3, r1, r8, ror r7
   130b4:	andeq	r3, r1, r8, ror r7
   130b8:	andeq	r3, r1, r8, ror r7
   130bc:	andeq	r3, r1, r8, ror r7
   130c0:	andeq	r3, r1, r8, ror r7
   130c4:	andeq	r3, r1, r8, ror r7
   130c8:	andeq	r3, r1, r0, ror r6
   130cc:	muleq	r1, ip, r5
   130d0:	andeq	r3, r1, r8, ror r7
   130d4:	andeq	r3, r1, r0, ror r6
   130d8:	andeq	r3, r1, r8, ror r7
   130dc:	andeq	r3, r1, r0, ror r6
   130e0:	andeq	r3, r1, r8, ror r7
   130e4:	andeq	r3, r1, r8, ror r7
   130e8:	andeq	r3, r1, r8, ror r7
   130ec:	andeq	r3, r1, r8, ror r7
   130f0:	andeq	r3, r1, r8, ror r7
   130f4:	andeq	r3, r1, r8, ror r7
   130f8:	andeq	r3, r1, r8, ror r7
   130fc:	andeq	r3, r1, r8, ror r7
   13100:	andeq	r3, r1, r8, ror r7
   13104:	andeq	r3, r1, r8, ror r7
   13108:	andeq	r3, r1, r8, ror r7
   1310c:	andeq	r3, r1, r8, ror r7
   13110:	andeq	r3, r1, r8, ror r7
   13114:	andeq	r3, r1, r8, ror r7
   13118:	andeq	r3, r1, r8, ror r7
   1311c:	andeq	r3, r1, r8, ror r7
   13120:	andeq	r3, r1, r8, ror r7
   13124:	andeq	r3, r1, r8, ror r7
   13128:	andeq	r3, r1, r8, ror r7
   1312c:	andeq	r3, r1, r8, ror r7
   13130:	andeq	r3, r1, r8, ror r7
   13134:	andeq	r3, r1, r8, ror r7
   13138:	andeq	r3, r1, r8, ror r7
   1313c:	andeq	r3, r1, r8, ror r7
   13140:	andeq	r3, r1, r8, ror r7
   13144:	andeq	r3, r1, r8, ror r7
   13148:	andeq	r3, r1, r4, lsl r6
   1314c:	andeq	r3, r1, r0, ror r6
   13150:	andeq	r3, r1, r4, lsl r6
   13154:	andeq	r3, r1, ip, asr r6
   13158:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1315c:	cmp	r3, #0
   13160:	beq	13324 <__assert_fail@plt+0x20fc>
   13164:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13168:	cmp	r3, #0
   1316c:	bne	141cc <__assert_fail@plt+0x2fa4>
   13170:	mov	r3, #1
   13174:	strb	r3, [fp, #-41]	; 0xffffffd7
   13178:	ldr	r3, [fp, #4]
   1317c:	cmp	r3, #2
   13180:	bne	13230 <__assert_fail@plt+0x2008>
   13184:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13188:	eor	r3, r3, #1
   1318c:	uxtb	r3, r3
   13190:	cmp	r3, #0
   13194:	beq	13230 <__assert_fail@plt+0x2008>
   13198:	ldr	r2, [fp, #-20]	; 0xffffffec
   1319c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131a0:	cmp	r2, r3
   131a4:	bcs	131bc <__assert_fail@plt+0x1f94>
   131a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   131b0:	add	r3, r2, r3
   131b4:	mov	r2, #39	; 0x27
   131b8:	strb	r2, [r3]
   131bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131c0:	add	r3, r3, #1
   131c4:	str	r3, [fp, #-20]	; 0xffffffec
   131c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131d0:	cmp	r2, r3
   131d4:	bcs	131ec <__assert_fail@plt+0x1fc4>
   131d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131e0:	add	r3, r2, r3
   131e4:	mov	r2, #36	; 0x24
   131e8:	strb	r2, [r3]
   131ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   131f0:	add	r3, r3, #1
   131f4:	str	r3, [fp, #-20]	; 0xffffffec
   131f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13200:	cmp	r2, r3
   13204:	bcs	1321c <__assert_fail@plt+0x1ff4>
   13208:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1320c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13210:	add	r3, r2, r3
   13214:	mov	r2, #39	; 0x27
   13218:	strb	r2, [r3]
   1321c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13220:	add	r3, r3, #1
   13224:	str	r3, [fp, #-20]	; 0xffffffec
   13228:	mov	r3, #1
   1322c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13230:	ldr	r2, [fp, #-20]	; 0xffffffec
   13234:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13238:	cmp	r2, r3
   1323c:	bcs	13254 <__assert_fail@plt+0x202c>
   13240:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13244:	ldr	r3, [fp, #-20]	; 0xffffffec
   13248:	add	r3, r2, r3
   1324c:	mov	r2, #92	; 0x5c
   13250:	strb	r2, [r3]
   13254:	ldr	r3, [fp, #-20]	; 0xffffffec
   13258:	add	r3, r3, #1
   1325c:	str	r3, [fp, #-20]	; 0xffffffec
   13260:	ldr	r3, [fp, #4]
   13264:	cmp	r3, #2
   13268:	beq	13318 <__assert_fail@plt+0x20f0>
   1326c:	ldr	r3, [fp, #-16]
   13270:	add	r2, r3, #1
   13274:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13278:	cmp	r2, r3
   1327c:	bcs	13318 <__assert_fail@plt+0x20f0>
   13280:	ldr	r3, [fp, #-16]
   13284:	add	r3, r3, #1
   13288:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1328c:	add	r3, r2, r3
   13290:	ldrb	r3, [r3]
   13294:	cmp	r3, #47	; 0x2f
   13298:	bls	13318 <__assert_fail@plt+0x20f0>
   1329c:	ldr	r3, [fp, #-16]
   132a0:	add	r3, r3, #1
   132a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   132a8:	add	r3, r2, r3
   132ac:	ldrb	r3, [r3]
   132b0:	cmp	r3, #57	; 0x39
   132b4:	bhi	13318 <__assert_fail@plt+0x20f0>
   132b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   132bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132c0:	cmp	r2, r3
   132c4:	bcs	132dc <__assert_fail@plt+0x20b4>
   132c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   132d0:	add	r3, r2, r3
   132d4:	mov	r2, #48	; 0x30
   132d8:	strb	r2, [r3]
   132dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e0:	add	r3, r3, #1
   132e4:	str	r3, [fp, #-20]	; 0xffffffec
   132e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   132ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132f0:	cmp	r2, r3
   132f4:	bcs	1330c <__assert_fail@plt+0x20e4>
   132f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13300:	add	r3, r2, r3
   13304:	mov	r2, #48	; 0x30
   13308:	strb	r2, [r3]
   1330c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13310:	add	r3, r3, #1
   13314:	str	r3, [fp, #-20]	; 0xffffffec
   13318:	mov	r3, #48	; 0x30
   1331c:	strb	r3, [fp, #-38]	; 0xffffffda
   13320:	b	13d60 <__assert_fail@plt+0x2b38>
   13324:	ldr	r3, [fp, #8]
   13328:	and	r3, r3, #1
   1332c:	cmp	r3, #0
   13330:	beq	13d60 <__assert_fail@plt+0x2b38>
   13334:	b	13ffc <__assert_fail@plt+0x2dd4>
   13338:	ldr	r3, [fp, #4]
   1333c:	cmp	r3, #2
   13340:	beq	13350 <__assert_fail@plt+0x2128>
   13344:	cmp	r3, #5
   13348:	beq	13360 <__assert_fail@plt+0x2138>
   1334c:	b	13544 <__assert_fail@plt+0x231c>
   13350:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13354:	cmp	r3, #0
   13358:	beq	13538 <__assert_fail@plt+0x2310>
   1335c:	b	14208 <__assert_fail@plt+0x2fe0>
   13360:	ldr	r3, [fp, #8]
   13364:	and	r3, r3, #4
   13368:	cmp	r3, #0
   1336c:	beq	13540 <__assert_fail@plt+0x2318>
   13370:	ldr	r3, [fp, #-16]
   13374:	add	r2, r3, #2
   13378:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1337c:	cmp	r2, r3
   13380:	bcs	13540 <__assert_fail@plt+0x2318>
   13384:	ldr	r3, [fp, #-16]
   13388:	add	r3, r3, #1
   1338c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13390:	add	r3, r2, r3
   13394:	ldrb	r3, [r3]
   13398:	cmp	r3, #63	; 0x3f
   1339c:	bne	13540 <__assert_fail@plt+0x2318>
   133a0:	ldr	r3, [fp, #-16]
   133a4:	add	r3, r3, #2
   133a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133ac:	add	r3, r2, r3
   133b0:	ldrb	r3, [r3]
   133b4:	sub	r3, r3, #33	; 0x21
   133b8:	cmp	r3, #29
   133bc:	ldrls	pc, [pc, r3, lsl #2]
   133c0:	b	13530 <__assert_fail@plt+0x2308>
   133c4:	andeq	r3, r1, ip, lsr r4
   133c8:	andeq	r3, r1, r0, lsr r5
   133cc:	andeq	r3, r1, r0, lsr r5
   133d0:	andeq	r3, r1, r0, lsr r5
   133d4:	andeq	r3, r1, r0, lsr r5
   133d8:	andeq	r3, r1, r0, lsr r5
   133dc:	andeq	r3, r1, ip, lsr r4
   133e0:	andeq	r3, r1, ip, lsr r4
   133e4:	andeq	r3, r1, ip, lsr r4
   133e8:	andeq	r3, r1, r0, lsr r5
   133ec:	andeq	r3, r1, r0, lsr r5
   133f0:	andeq	r3, r1, r0, lsr r5
   133f4:	andeq	r3, r1, ip, lsr r4
   133f8:	andeq	r3, r1, r0, lsr r5
   133fc:	andeq	r3, r1, ip, lsr r4
   13400:	andeq	r3, r1, r0, lsr r5
   13404:	andeq	r3, r1, r0, lsr r5
   13408:	andeq	r3, r1, r0, lsr r5
   1340c:	andeq	r3, r1, r0, lsr r5
   13410:	andeq	r3, r1, r0, lsr r5
   13414:	andeq	r3, r1, r0, lsr r5
   13418:	andeq	r3, r1, r0, lsr r5
   1341c:	andeq	r3, r1, r0, lsr r5
   13420:	andeq	r3, r1, r0, lsr r5
   13424:	andeq	r3, r1, r0, lsr r5
   13428:	andeq	r3, r1, r0, lsr r5
   1342c:	andeq	r3, r1, r0, lsr r5
   13430:	andeq	r3, r1, ip, lsr r4
   13434:	andeq	r3, r1, ip, lsr r4
   13438:	andeq	r3, r1, ip, lsr r4
   1343c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13440:	cmp	r3, #0
   13444:	bne	141d4 <__assert_fail@plt+0x2fac>
   13448:	ldr	r3, [fp, #-16]
   1344c:	add	r3, r3, #2
   13450:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13454:	add	r3, r2, r3
   13458:	ldrb	r3, [r3]
   1345c:	strb	r3, [fp, #-38]	; 0xffffffda
   13460:	ldr	r3, [fp, #-16]
   13464:	add	r3, r3, #2
   13468:	str	r3, [fp, #-16]
   1346c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13470:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13474:	cmp	r2, r3
   13478:	bcs	13490 <__assert_fail@plt+0x2268>
   1347c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13480:	ldr	r3, [fp, #-20]	; 0xffffffec
   13484:	add	r3, r2, r3
   13488:	mov	r2, #63	; 0x3f
   1348c:	strb	r2, [r3]
   13490:	ldr	r3, [fp, #-20]	; 0xffffffec
   13494:	add	r3, r3, #1
   13498:	str	r3, [fp, #-20]	; 0xffffffec
   1349c:	ldr	r2, [fp, #-20]	; 0xffffffec
   134a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134a4:	cmp	r2, r3
   134a8:	bcs	134c0 <__assert_fail@plt+0x2298>
   134ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134b4:	add	r3, r2, r3
   134b8:	mov	r2, #34	; 0x22
   134bc:	strb	r2, [r3]
   134c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134c4:	add	r3, r3, #1
   134c8:	str	r3, [fp, #-20]	; 0xffffffec
   134cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   134d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134d4:	cmp	r2, r3
   134d8:	bcs	134f0 <__assert_fail@plt+0x22c8>
   134dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134e4:	add	r3, r2, r3
   134e8:	mov	r2, #34	; 0x22
   134ec:	strb	r2, [r3]
   134f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134f4:	add	r3, r3, #1
   134f8:	str	r3, [fp, #-20]	; 0xffffffec
   134fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13500:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13504:	cmp	r2, r3
   13508:	bcs	13520 <__assert_fail@plt+0x22f8>
   1350c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13510:	ldr	r3, [fp, #-20]	; 0xffffffec
   13514:	add	r3, r2, r3
   13518:	mov	r2, #63	; 0x3f
   1351c:	strb	r2, [r3]
   13520:	ldr	r3, [fp, #-20]	; 0xffffffec
   13524:	add	r3, r3, #1
   13528:	str	r3, [fp, #-20]	; 0xffffffec
   1352c:	b	13534 <__assert_fail@plt+0x230c>
   13530:	nop			; (mov r0, r0)
   13534:	b	13540 <__assert_fail@plt+0x2318>
   13538:	nop			; (mov r0, r0)
   1353c:	b	13d8c <__assert_fail@plt+0x2b64>
   13540:	nop			; (mov r0, r0)
   13544:	b	13d8c <__assert_fail@plt+0x2b64>
   13548:	mov	r3, #97	; 0x61
   1354c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13550:	b	135fc <__assert_fail@plt+0x23d4>
   13554:	mov	r3, #98	; 0x62
   13558:	strb	r3, [fp, #-39]	; 0xffffffd9
   1355c:	b	135fc <__assert_fail@plt+0x23d4>
   13560:	mov	r3, #102	; 0x66
   13564:	strb	r3, [fp, #-39]	; 0xffffffd9
   13568:	b	135fc <__assert_fail@plt+0x23d4>
   1356c:	mov	r3, #110	; 0x6e
   13570:	strb	r3, [fp, #-39]	; 0xffffffd9
   13574:	b	135e4 <__assert_fail@plt+0x23bc>
   13578:	mov	r3, #114	; 0x72
   1357c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13580:	b	135e4 <__assert_fail@plt+0x23bc>
   13584:	mov	r3, #116	; 0x74
   13588:	strb	r3, [fp, #-39]	; 0xffffffd9
   1358c:	b	135e4 <__assert_fail@plt+0x23bc>
   13590:	mov	r3, #118	; 0x76
   13594:	strb	r3, [fp, #-39]	; 0xffffffd9
   13598:	b	135fc <__assert_fail@plt+0x23d4>
   1359c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   135a0:	strb	r3, [fp, #-39]	; 0xffffffd9
   135a4:	ldr	r3, [fp, #4]
   135a8:	cmp	r3, #2
   135ac:	bne	135c0 <__assert_fail@plt+0x2398>
   135b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135b4:	cmp	r3, #0
   135b8:	beq	13f14 <__assert_fail@plt+0x2cec>
   135bc:	b	14208 <__assert_fail@plt+0x2fe0>
   135c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   135c4:	cmp	r3, #0
   135c8:	beq	135e4 <__assert_fail@plt+0x23bc>
   135cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135d0:	cmp	r3, #0
   135d4:	beq	135e4 <__assert_fail@plt+0x23bc>
   135d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135dc:	cmp	r3, #0
   135e0:	bne	13f1c <__assert_fail@plt+0x2cf4>
   135e4:	ldr	r3, [fp, #4]
   135e8:	cmp	r3, #2
   135ec:	bne	135fc <__assert_fail@plt+0x23d4>
   135f0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135f4:	cmp	r3, #0
   135f8:	bne	141dc <__assert_fail@plt+0x2fb4>
   135fc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13600:	cmp	r3, #0
   13604:	beq	13d68 <__assert_fail@plt+0x2b40>
   13608:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1360c:	strb	r3, [fp, #-38]	; 0xffffffda
   13610:	b	13e14 <__assert_fail@plt+0x2bec>
   13614:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13618:	cmn	r3, #1
   1361c:	bne	13640 <__assert_fail@plt+0x2418>
   13620:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13624:	add	r3, r3, #1
   13628:	ldrb	r3, [r3]
   1362c:	cmp	r3, #0
   13630:	movne	r3, #1
   13634:	moveq	r3, #0
   13638:	uxtb	r3, r3
   1363c:	b	13654 <__assert_fail@plt+0x242c>
   13640:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13644:	cmp	r3, #1
   13648:	movne	r3, #1
   1364c:	moveq	r3, #0
   13650:	uxtb	r3, r3
   13654:	cmp	r3, #0
   13658:	bne	13d70 <__assert_fail@plt+0x2b48>
   1365c:	ldr	r3, [fp, #-16]
   13660:	cmp	r3, #0
   13664:	bne	13d78 <__assert_fail@plt+0x2b50>
   13668:	mov	r3, #1
   1366c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13670:	ldr	r3, [fp, #4]
   13674:	cmp	r3, #2
   13678:	bne	13d80 <__assert_fail@plt+0x2b58>
   1367c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13680:	cmp	r3, #0
   13684:	beq	13d80 <__assert_fail@plt+0x2b58>
   13688:	b	14208 <__assert_fail@plt+0x2fe0>
   1368c:	mov	r3, #1
   13690:	strb	r3, [fp, #-36]	; 0xffffffdc
   13694:	mov	r3, #1
   13698:	strb	r3, [fp, #-42]	; 0xffffffd6
   1369c:	ldr	r3, [fp, #4]
   136a0:	cmp	r3, #2
   136a4:	bne	13d88 <__assert_fail@plt+0x2b60>
   136a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   136ac:	cmp	r3, #0
   136b0:	bne	141e4 <__assert_fail@plt+0x2fbc>
   136b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136b8:	cmp	r3, #0
   136bc:	beq	136dc <__assert_fail@plt+0x24b4>
   136c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136c4:	cmp	r3, #0
   136c8:	bne	136dc <__assert_fail@plt+0x24b4>
   136cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136d0:	str	r3, [fp, #-24]	; 0xffffffe8
   136d4:	mov	r3, #0
   136d8:	str	r3, [fp, #-92]	; 0xffffffa4
   136dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   136e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136e4:	cmp	r2, r3
   136e8:	bcs	13700 <__assert_fail@plt+0x24d8>
   136ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136f4:	add	r3, r2, r3
   136f8:	mov	r2, #39	; 0x27
   136fc:	strb	r2, [r3]
   13700:	ldr	r3, [fp, #-20]	; 0xffffffec
   13704:	add	r3, r3, #1
   13708:	str	r3, [fp, #-20]	; 0xffffffec
   1370c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13710:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13714:	cmp	r2, r3
   13718:	bcs	13730 <__assert_fail@plt+0x2508>
   1371c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13720:	ldr	r3, [fp, #-20]	; 0xffffffec
   13724:	add	r3, r2, r3
   13728:	mov	r2, #92	; 0x5c
   1372c:	strb	r2, [r3]
   13730:	ldr	r3, [fp, #-20]	; 0xffffffec
   13734:	add	r3, r3, #1
   13738:	str	r3, [fp, #-20]	; 0xffffffec
   1373c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13740:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13744:	cmp	r2, r3
   13748:	bcs	13760 <__assert_fail@plt+0x2538>
   1374c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13750:	ldr	r3, [fp, #-20]	; 0xffffffec
   13754:	add	r3, r2, r3
   13758:	mov	r2, #39	; 0x27
   1375c:	strb	r2, [r3]
   13760:	ldr	r3, [fp, #-20]	; 0xffffffec
   13764:	add	r3, r3, #1
   13768:	str	r3, [fp, #-20]	; 0xffffffec
   1376c:	mov	r3, #0
   13770:	strb	r3, [fp, #-35]	; 0xffffffdd
   13774:	b	13d88 <__assert_fail@plt+0x2b60>
   13778:	mov	r3, #1
   1377c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13780:	b	13d8c <__assert_fail@plt+0x2b64>
   13784:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13788:	cmp	r3, #0
   1378c:	beq	137cc <__assert_fail@plt+0x25a4>
   13790:	mov	r3, #1
   13794:	str	r3, [fp, #-48]	; 0xffffffd0
   13798:	bl	110c0 <__ctype_b_loc@plt>
   1379c:	mov	r3, r0
   137a0:	ldr	r2, [r3]
   137a4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   137a8:	lsl	r3, r3, #1
   137ac:	add	r3, r2, r3
   137b0:	ldrh	r3, [r3]
   137b4:	and	r3, r3, #16384	; 0x4000
   137b8:	cmp	r3, #0
   137bc:	movne	r3, #1
   137c0:	moveq	r3, #0
   137c4:	strb	r3, [fp, #-49]	; 0xffffffcf
   137c8:	b	13a18 <__assert_fail@plt+0x27f0>
   137cc:	sub	r3, fp, #76	; 0x4c
   137d0:	mov	r2, #8
   137d4:	mov	r1, #0
   137d8:	mov	r0, r3
   137dc:	bl	11138 <memset@plt>
   137e0:	mov	r3, #0
   137e4:	str	r3, [fp, #-48]	; 0xffffffd0
   137e8:	mov	r3, #1
   137ec:	strb	r3, [fp, #-49]	; 0xffffffcf
   137f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   137f4:	cmn	r3, #1
   137f8:	bne	13808 <__assert_fail@plt+0x25e0>
   137fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13800:	bl	110f0 <strlen@plt>
   13804:	str	r0, [fp, #-100]	; 0xffffff9c
   13808:	ldr	r2, [fp, #-16]
   1380c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13810:	add	r3, r2, r3
   13814:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13818:	add	r1, r2, r3
   1381c:	ldr	r2, [fp, #-16]
   13820:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13824:	add	r3, r2, r3
   13828:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1382c:	sub	r2, r2, r3
   13830:	sub	r3, fp, #76	; 0x4c
   13834:	sub	r0, fp, #80	; 0x50
   13838:	bl	17ee8 <__assert_fail@plt+0x6cc0>
   1383c:	str	r0, [fp, #-64]	; 0xffffffc0
   13840:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13844:	cmp	r3, #0
   13848:	beq	13a0c <__assert_fail@plt+0x27e4>
   1384c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13850:	cmn	r3, #1
   13854:	bne	13864 <__assert_fail@plt+0x263c>
   13858:	mov	r3, #0
   1385c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13860:	b	13a18 <__assert_fail@plt+0x27f0>
   13864:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13868:	cmn	r3, #2
   1386c:	bne	138c4 <__assert_fail@plt+0x269c>
   13870:	mov	r3, #0
   13874:	strb	r3, [fp, #-49]	; 0xffffffcf
   13878:	b	13888 <__assert_fail@plt+0x2660>
   1387c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13880:	add	r3, r3, #1
   13884:	str	r3, [fp, #-48]	; 0xffffffd0
   13888:	ldr	r2, [fp, #-16]
   1388c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13890:	add	r2, r2, r3
   13894:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13898:	cmp	r2, r3
   1389c:	bcs	13a14 <__assert_fail@plt+0x27ec>
   138a0:	ldr	r2, [fp, #-16]
   138a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138a8:	add	r3, r2, r3
   138ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   138b0:	add	r3, r2, r3
   138b4:	ldrb	r3, [r3]
   138b8:	cmp	r3, #0
   138bc:	bne	1387c <__assert_fail@plt+0x2654>
   138c0:	b	13a14 <__assert_fail@plt+0x27ec>
   138c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   138c8:	cmp	r3, #0
   138cc:	beq	139c0 <__assert_fail@plt+0x2798>
   138d0:	ldr	r3, [fp, #4]
   138d4:	cmp	r3, #2
   138d8:	bne	139c0 <__assert_fail@plt+0x2798>
   138dc:	mov	r3, #1
   138e0:	str	r3, [fp, #-56]	; 0xffffffc8
   138e4:	b	139b0 <__assert_fail@plt+0x2788>
   138e8:	ldr	r2, [fp, #-16]
   138ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138f0:	add	r2, r2, r3
   138f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138f8:	add	r3, r2, r3
   138fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13900:	add	r3, r2, r3
   13904:	ldrb	r3, [r3]
   13908:	sub	r3, r3, #91	; 0x5b
   1390c:	cmp	r3, #33	; 0x21
   13910:	ldrls	pc, [pc, r3, lsl #2]
   13914:	b	139a0 <__assert_fail@plt+0x2778>
   13918:	andeq	r4, r1, ip, ror #3
   1391c:	andeq	r4, r1, ip, ror #3
   13920:	andeq	r3, r1, r0, lsr #19
   13924:	andeq	r4, r1, ip, ror #3
   13928:	andeq	r3, r1, r0, lsr #19
   1392c:	andeq	r4, r1, ip, ror #3
   13930:	andeq	r3, r1, r0, lsr #19
   13934:	andeq	r3, r1, r0, lsr #19
   13938:	andeq	r3, r1, r0, lsr #19
   1393c:	andeq	r3, r1, r0, lsr #19
   13940:	andeq	r3, r1, r0, lsr #19
   13944:	andeq	r3, r1, r0, lsr #19
   13948:	andeq	r3, r1, r0, lsr #19
   1394c:	andeq	r3, r1, r0, lsr #19
   13950:	andeq	r3, r1, r0, lsr #19
   13954:	andeq	r3, r1, r0, lsr #19
   13958:	andeq	r3, r1, r0, lsr #19
   1395c:	andeq	r3, r1, r0, lsr #19
   13960:	andeq	r3, r1, r0, lsr #19
   13964:	andeq	r3, r1, r0, lsr #19
   13968:	andeq	r3, r1, r0, lsr #19
   1396c:	andeq	r3, r1, r0, lsr #19
   13970:	andeq	r3, r1, r0, lsr #19
   13974:	andeq	r3, r1, r0, lsr #19
   13978:	andeq	r3, r1, r0, lsr #19
   1397c:	andeq	r3, r1, r0, lsr #19
   13980:	andeq	r3, r1, r0, lsr #19
   13984:	andeq	r3, r1, r0, lsr #19
   13988:	andeq	r3, r1, r0, lsr #19
   1398c:	andeq	r3, r1, r0, lsr #19
   13990:	andeq	r3, r1, r0, lsr #19
   13994:	andeq	r3, r1, r0, lsr #19
   13998:	andeq	r3, r1, r0, lsr #19
   1399c:	andeq	r4, r1, ip, ror #3
   139a0:	nop			; (mov r0, r0)
   139a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139a8:	add	r3, r3, #1
   139ac:	str	r3, [fp, #-56]	; 0xffffffc8
   139b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   139b8:	cmp	r2, r3
   139bc:	bcc	138e8 <__assert_fail@plt+0x26c0>
   139c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   139c4:	mov	r0, r3
   139c8:	bl	10ff4 <iswprint@plt>
   139cc:	mov	r3, r0
   139d0:	cmp	r3, #0
   139d4:	bne	139e0 <__assert_fail@plt+0x27b8>
   139d8:	mov	r3, #0
   139dc:	strb	r3, [fp, #-49]	; 0xffffffcf
   139e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   139e8:	add	r3, r2, r3
   139ec:	str	r3, [fp, #-48]	; 0xffffffd0
   139f0:	sub	r3, fp, #76	; 0x4c
   139f4:	mov	r0, r3
   139f8:	bl	10fac <mbsinit@plt>
   139fc:	mov	r3, r0
   13a00:	cmp	r3, #0
   13a04:	beq	13808 <__assert_fail@plt+0x25e0>
   13a08:	b	13a18 <__assert_fail@plt+0x27f0>
   13a0c:	nop			; (mov r0, r0)
   13a10:	b	13a18 <__assert_fail@plt+0x27f0>
   13a14:	nop			; (mov r0, r0)
   13a18:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13a1c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13a20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a24:	cmp	r3, #1
   13a28:	bhi	13a4c <__assert_fail@plt+0x2824>
   13a2c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13a30:	cmp	r3, #0
   13a34:	beq	13d8c <__assert_fail@plt+0x2b64>
   13a38:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13a3c:	eor	r3, r3, #1
   13a40:	uxtb	r3, r3
   13a44:	cmp	r3, #0
   13a48:	beq	13d8c <__assert_fail@plt+0x2b64>
   13a4c:	ldr	r2, [fp, #-16]
   13a50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a54:	add	r3, r2, r3
   13a58:	str	r3, [fp, #-68]	; 0xffffffbc
   13a5c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13a60:	cmp	r3, #0
   13a64:	beq	13c24 <__assert_fail@plt+0x29fc>
   13a68:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13a6c:	eor	r3, r3, #1
   13a70:	uxtb	r3, r3
   13a74:	cmp	r3, #0
   13a78:	beq	13c24 <__assert_fail@plt+0x29fc>
   13a7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a80:	cmp	r3, #0
   13a84:	bne	141f4 <__assert_fail@plt+0x2fcc>
   13a88:	mov	r3, #1
   13a8c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13a90:	ldr	r3, [fp, #4]
   13a94:	cmp	r3, #2
   13a98:	bne	13b48 <__assert_fail@plt+0x2920>
   13a9c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13aa0:	eor	r3, r3, #1
   13aa4:	uxtb	r3, r3
   13aa8:	cmp	r3, #0
   13aac:	beq	13b48 <__assert_fail@plt+0x2920>
   13ab0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ab4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ab8:	cmp	r2, r3
   13abc:	bcs	13ad4 <__assert_fail@plt+0x28ac>
   13ac0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ac8:	add	r3, r2, r3
   13acc:	mov	r2, #39	; 0x27
   13ad0:	strb	r2, [r3]
   13ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ad8:	add	r3, r3, #1
   13adc:	str	r3, [fp, #-20]	; 0xffffffec
   13ae0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ae4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ae8:	cmp	r2, r3
   13aec:	bcs	13b04 <__assert_fail@plt+0x28dc>
   13af0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13af8:	add	r3, r2, r3
   13afc:	mov	r2, #36	; 0x24
   13b00:	strb	r2, [r3]
   13b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b08:	add	r3, r3, #1
   13b0c:	str	r3, [fp, #-20]	; 0xffffffec
   13b10:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b18:	cmp	r2, r3
   13b1c:	bcs	13b34 <__assert_fail@plt+0x290c>
   13b20:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b28:	add	r3, r2, r3
   13b2c:	mov	r2, #39	; 0x27
   13b30:	strb	r2, [r3]
   13b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b38:	add	r3, r3, #1
   13b3c:	str	r3, [fp, #-20]	; 0xffffffec
   13b40:	mov	r3, #1
   13b44:	strb	r3, [fp, #-35]	; 0xffffffdd
   13b48:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b50:	cmp	r2, r3
   13b54:	bcs	13b6c <__assert_fail@plt+0x2944>
   13b58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b60:	add	r3, r2, r3
   13b64:	mov	r2, #92	; 0x5c
   13b68:	strb	r2, [r3]
   13b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b70:	add	r3, r3, #1
   13b74:	str	r3, [fp, #-20]	; 0xffffffec
   13b78:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b80:	cmp	r2, r3
   13b84:	bcs	13bac <__assert_fail@plt+0x2984>
   13b88:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b90:	add	r3, r2, r3
   13b94:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13b98:	lsr	r2, r2, #6
   13b9c:	uxtb	r2, r2
   13ba0:	add	r2, r2, #48	; 0x30
   13ba4:	uxtb	r2, r2
   13ba8:	strb	r2, [r3]
   13bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bb0:	add	r3, r3, #1
   13bb4:	str	r3, [fp, #-20]	; 0xffffffec
   13bb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bc0:	cmp	r2, r3
   13bc4:	bcs	13bf4 <__assert_fail@plt+0x29cc>
   13bc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bd0:	add	r3, r2, r3
   13bd4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13bd8:	lsr	r2, r2, #3
   13bdc:	uxtb	r2, r2
   13be0:	and	r2, r2, #7
   13be4:	uxtb	r2, r2
   13be8:	add	r2, r2, #48	; 0x30
   13bec:	uxtb	r2, r2
   13bf0:	strb	r2, [r3]
   13bf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bf8:	add	r3, r3, #1
   13bfc:	str	r3, [fp, #-20]	; 0xffffffec
   13c00:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13c04:	and	r3, r3, #7
   13c08:	uxtb	r3, r3
   13c0c:	add	r3, r3, #48	; 0x30
   13c10:	strb	r3, [fp, #-38]	; 0xffffffda
   13c14:	b	13c68 <__assert_fail@plt+0x2a40>
   13c18:	andeq	r9, r1, r8, lsr fp
   13c1c:	andeq	r9, r1, r0, asr #22
   13c20:	andeq	r9, r1, ip, lsr fp
   13c24:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13c28:	cmp	r3, #0
   13c2c:	beq	13c68 <__assert_fail@plt+0x2a40>
   13c30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c38:	cmp	r2, r3
   13c3c:	bcs	13c54 <__assert_fail@plt+0x2a2c>
   13c40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c48:	add	r3, r2, r3
   13c4c:	mov	r2, #92	; 0x5c
   13c50:	strb	r2, [r3]
   13c54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c58:	add	r3, r3, #1
   13c5c:	str	r3, [fp, #-20]	; 0xffffffec
   13c60:	mov	r3, #0
   13c64:	strb	r3, [fp, #-40]	; 0xffffffd8
   13c68:	ldr	r3, [fp, #-16]
   13c6c:	add	r2, r3, #1
   13c70:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13c74:	cmp	r2, r3
   13c78:	bcs	13d58 <__assert_fail@plt+0x2b30>
   13c7c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13c80:	cmp	r3, #0
   13c84:	beq	13d04 <__assert_fail@plt+0x2adc>
   13c88:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13c8c:	eor	r3, r3, #1
   13c90:	uxtb	r3, r3
   13c94:	cmp	r3, #0
   13c98:	beq	13d04 <__assert_fail@plt+0x2adc>
   13c9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ca0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ca4:	cmp	r2, r3
   13ca8:	bcs	13cc0 <__assert_fail@plt+0x2a98>
   13cac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13cb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cb4:	add	r3, r2, r3
   13cb8:	mov	r2, #39	; 0x27
   13cbc:	strb	r2, [r3]
   13cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc4:	add	r3, r3, #1
   13cc8:	str	r3, [fp, #-20]	; 0xffffffec
   13ccc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cd4:	cmp	r2, r3
   13cd8:	bcs	13cf0 <__assert_fail@plt+0x2ac8>
   13cdc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ce0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ce4:	add	r3, r2, r3
   13ce8:	mov	r2, #39	; 0x27
   13cec:	strb	r2, [r3]
   13cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cf4:	add	r3, r3, #1
   13cf8:	str	r3, [fp, #-20]	; 0xffffffec
   13cfc:	mov	r3, #0
   13d00:	strb	r3, [fp, #-35]	; 0xffffffdd
   13d04:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d0c:	cmp	r2, r3
   13d10:	bcs	13d28 <__assert_fail@plt+0x2b00>
   13d14:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d1c:	add	r3, r2, r3
   13d20:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13d24:	strb	r2, [r3]
   13d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d2c:	add	r3, r3, #1
   13d30:	str	r3, [fp, #-20]	; 0xffffffec
   13d34:	ldr	r3, [fp, #-16]
   13d38:	add	r3, r3, #1
   13d3c:	str	r3, [fp, #-16]
   13d40:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13d44:	ldr	r3, [fp, #-16]
   13d48:	add	r3, r2, r3
   13d4c:	ldrb	r3, [r3]
   13d50:	strb	r3, [fp, #-38]	; 0xffffffda
   13d54:	b	13a5c <__assert_fail@plt+0x2834>
   13d58:	nop			; (mov r0, r0)
   13d5c:	b	13f28 <__assert_fail@plt+0x2d00>
   13d60:	nop			; (mov r0, r0)
   13d64:	b	13d8c <__assert_fail@plt+0x2b64>
   13d68:	nop			; (mov r0, r0)
   13d6c:	b	13d8c <__assert_fail@plt+0x2b64>
   13d70:	nop			; (mov r0, r0)
   13d74:	b	13d8c <__assert_fail@plt+0x2b64>
   13d78:	nop			; (mov r0, r0)
   13d7c:	b	13d8c <__assert_fail@plt+0x2b64>
   13d80:	nop			; (mov r0, r0)
   13d84:	b	13d8c <__assert_fail@plt+0x2b64>
   13d88:	nop			; (mov r0, r0)
   13d8c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13d90:	eor	r3, r3, #1
   13d94:	uxtb	r3, r3
   13d98:	cmp	r3, #0
   13d9c:	bne	13dac <__assert_fail@plt+0x2b84>
   13da0:	ldr	r3, [fp, #4]
   13da4:	cmp	r3, #2
   13da8:	bne	13dc0 <__assert_fail@plt+0x2b98>
   13dac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13db0:	eor	r3, r3, #1
   13db4:	uxtb	r3, r3
   13db8:	cmp	r3, #0
   13dbc:	bne	13e00 <__assert_fail@plt+0x2bd8>
   13dc0:	ldr	r3, [fp, #12]
   13dc4:	cmp	r3, #0
   13dc8:	beq	13e00 <__assert_fail@plt+0x2bd8>
   13dcc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13dd0:	lsr	r3, r3, #5
   13dd4:	uxtb	r3, r3
   13dd8:	lsl	r3, r3, #2
   13ddc:	ldr	r2, [fp, #12]
   13de0:	add	r3, r2, r3
   13de4:	ldr	r2, [r3]
   13de8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13dec:	and	r3, r3, #31
   13df0:	lsr	r3, r2, r3
   13df4:	and	r3, r3, #1
   13df8:	cmp	r3, #0
   13dfc:	bne	13e14 <__assert_fail@plt+0x2bec>
   13e00:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13e04:	eor	r3, r3, #1
   13e08:	uxtb	r3, r3
   13e0c:	cmp	r3, #0
   13e10:	bne	13f24 <__assert_fail@plt+0x2cfc>
   13e14:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e18:	cmp	r3, #0
   13e1c:	bne	141fc <__assert_fail@plt+0x2fd4>
   13e20:	mov	r3, #1
   13e24:	strb	r3, [fp, #-41]	; 0xffffffd7
   13e28:	ldr	r3, [fp, #4]
   13e2c:	cmp	r3, #2
   13e30:	bne	13ee0 <__assert_fail@plt+0x2cb8>
   13e34:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13e38:	eor	r3, r3, #1
   13e3c:	uxtb	r3, r3
   13e40:	cmp	r3, #0
   13e44:	beq	13ee0 <__assert_fail@plt+0x2cb8>
   13e48:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e50:	cmp	r2, r3
   13e54:	bcs	13e6c <__assert_fail@plt+0x2c44>
   13e58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e60:	add	r3, r2, r3
   13e64:	mov	r2, #39	; 0x27
   13e68:	strb	r2, [r3]
   13e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e70:	add	r3, r3, #1
   13e74:	str	r3, [fp, #-20]	; 0xffffffec
   13e78:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e80:	cmp	r2, r3
   13e84:	bcs	13e9c <__assert_fail@plt+0x2c74>
   13e88:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e90:	add	r3, r2, r3
   13e94:	mov	r2, #36	; 0x24
   13e98:	strb	r2, [r3]
   13e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ea0:	add	r3, r3, #1
   13ea4:	str	r3, [fp, #-20]	; 0xffffffec
   13ea8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13eac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13eb0:	cmp	r2, r3
   13eb4:	bcs	13ecc <__assert_fail@plt+0x2ca4>
   13eb8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ec0:	add	r3, r2, r3
   13ec4:	mov	r2, #39	; 0x27
   13ec8:	strb	r2, [r3]
   13ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ed0:	add	r3, r3, #1
   13ed4:	str	r3, [fp, #-20]	; 0xffffffec
   13ed8:	mov	r3, #1
   13edc:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ee0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ee4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ee8:	cmp	r2, r3
   13eec:	bcs	13f04 <__assert_fail@plt+0x2cdc>
   13ef0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ef4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ef8:	add	r3, r2, r3
   13efc:	mov	r2, #92	; 0x5c
   13f00:	strb	r2, [r3]
   13f04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f08:	add	r3, r3, #1
   13f0c:	str	r3, [fp, #-20]	; 0xffffffec
   13f10:	b	13f28 <__assert_fail@plt+0x2d00>
   13f14:	nop			; (mov r0, r0)
   13f18:	b	13f28 <__assert_fail@plt+0x2d00>
   13f1c:	nop			; (mov r0, r0)
   13f20:	b	13f28 <__assert_fail@plt+0x2d00>
   13f24:	nop			; (mov r0, r0)
   13f28:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13f2c:	cmp	r3, #0
   13f30:	beq	13fb0 <__assert_fail@plt+0x2d88>
   13f34:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13f38:	eor	r3, r3, #1
   13f3c:	uxtb	r3, r3
   13f40:	cmp	r3, #0
   13f44:	beq	13fb0 <__assert_fail@plt+0x2d88>
   13f48:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f50:	cmp	r2, r3
   13f54:	bcs	13f6c <__assert_fail@plt+0x2d44>
   13f58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f60:	add	r3, r2, r3
   13f64:	mov	r2, #39	; 0x27
   13f68:	strb	r2, [r3]
   13f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f70:	add	r3, r3, #1
   13f74:	str	r3, [fp, #-20]	; 0xffffffec
   13f78:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f80:	cmp	r2, r3
   13f84:	bcs	13f9c <__assert_fail@plt+0x2d74>
   13f88:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f90:	add	r3, r2, r3
   13f94:	mov	r2, #39	; 0x27
   13f98:	strb	r2, [r3]
   13f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fa0:	add	r3, r3, #1
   13fa4:	str	r3, [fp, #-20]	; 0xffffffec
   13fa8:	mov	r3, #0
   13fac:	strb	r3, [fp, #-35]	; 0xffffffdd
   13fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fb8:	cmp	r2, r3
   13fbc:	bcs	13fd4 <__assert_fail@plt+0x2dac>
   13fc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc8:	add	r3, r2, r3
   13fcc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13fd0:	strb	r2, [r3]
   13fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fd8:	add	r3, r3, #1
   13fdc:	str	r3, [fp, #-20]	; 0xffffffec
   13fe0:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   13fe4:	eor	r3, r3, #1
   13fe8:	uxtb	r3, r3
   13fec:	cmp	r3, #0
   13ff0:	beq	13ffc <__assert_fail@plt+0x2dd4>
   13ff4:	mov	r3, #0
   13ff8:	strb	r3, [fp, #-37]	; 0xffffffdb
   13ffc:	ldr	r3, [fp, #-16]
   14000:	add	r3, r3, #1
   14004:	str	r3, [fp, #-16]
   14008:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1400c:	cmn	r3, #1
   14010:	bne	14038 <__assert_fail@plt+0x2e10>
   14014:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14018:	ldr	r3, [fp, #-16]
   1401c:	add	r3, r2, r3
   14020:	ldrb	r3, [r3]
   14024:	cmp	r3, #0
   14028:	movne	r3, #1
   1402c:	moveq	r3, #0
   14030:	uxtb	r3, r3
   14034:	b	14050 <__assert_fail@plt+0x2e28>
   14038:	ldr	r2, [fp, #-16]
   1403c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14040:	cmp	r2, r3
   14044:	movne	r3, #1
   14048:	moveq	r3, #0
   1404c:	uxtb	r3, r3
   14050:	cmp	r3, #0
   14054:	bne	12e7c <__assert_fail@plt+0x1c54>
   14058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1405c:	cmp	r3, #0
   14060:	bne	1407c <__assert_fail@plt+0x2e54>
   14064:	ldr	r3, [fp, #4]
   14068:	cmp	r3, #2
   1406c:	bne	1407c <__assert_fail@plt+0x2e54>
   14070:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14074:	cmp	r3, #0
   14078:	bne	14204 <__assert_fail@plt+0x2fdc>
   1407c:	ldr	r3, [fp, #4]
   14080:	cmp	r3, #2
   14084:	bne	14124 <__assert_fail@plt+0x2efc>
   14088:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1408c:	eor	r3, r3, #1
   14090:	uxtb	r3, r3
   14094:	cmp	r3, #0
   14098:	beq	14124 <__assert_fail@plt+0x2efc>
   1409c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   140a0:	cmp	r3, #0
   140a4:	beq	14124 <__assert_fail@plt+0x2efc>
   140a8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   140ac:	cmp	r3, #0
   140b0:	beq	140f8 <__assert_fail@plt+0x2ed0>
   140b4:	ldr	r3, [fp, #20]
   140b8:	str	r3, [sp, #16]
   140bc:	ldr	r3, [fp, #16]
   140c0:	str	r3, [sp, #12]
   140c4:	ldr	r3, [fp, #12]
   140c8:	str	r3, [sp, #8]
   140cc:	ldr	r3, [fp, #8]
   140d0:	str	r3, [sp, #4]
   140d4:	mov	r3, #5
   140d8:	str	r3, [sp]
   140dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   140e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   140e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   140e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   140ec:	bl	12bcc <__assert_fail@plt+0x19a4>
   140f0:	mov	r3, r0
   140f4:	b	1426c <__assert_fail@plt+0x3044>
   140f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140fc:	cmp	r3, #0
   14100:	bne	14124 <__assert_fail@plt+0x2efc>
   14104:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14108:	cmp	r3, #0
   1410c:	beq	14124 <__assert_fail@plt+0x2efc>
   14110:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14114:	str	r3, [fp, #-92]	; 0xffffffa4
   14118:	mov	r3, #0
   1411c:	str	r3, [fp, #-20]	; 0xffffffec
   14120:	b	12c58 <__assert_fail@plt+0x1a30>
   14124:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14128:	cmp	r3, #0
   1412c:	beq	14198 <__assert_fail@plt+0x2f70>
   14130:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14134:	eor	r3, r3, #1
   14138:	uxtb	r3, r3
   1413c:	cmp	r3, #0
   14140:	beq	14198 <__assert_fail@plt+0x2f70>
   14144:	b	14188 <__assert_fail@plt+0x2f60>
   14148:	ldr	r2, [fp, #-20]	; 0xffffffec
   1414c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14150:	cmp	r2, r3
   14154:	bcs	14170 <__assert_fail@plt+0x2f48>
   14158:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1415c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14160:	add	r3, r2, r3
   14164:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14168:	ldrb	r2, [r2]
   1416c:	strb	r2, [r3]
   14170:	ldr	r3, [fp, #-20]	; 0xffffffec
   14174:	add	r3, r3, #1
   14178:	str	r3, [fp, #-20]	; 0xffffffec
   1417c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14180:	add	r3, r3, #1
   14184:	str	r3, [fp, #-28]	; 0xffffffe4
   14188:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1418c:	ldrb	r3, [r3]
   14190:	cmp	r3, #0
   14194:	bne	14148 <__assert_fail@plt+0x2f20>
   14198:	ldr	r2, [fp, #-20]	; 0xffffffec
   1419c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141a0:	cmp	r2, r3
   141a4:	bcs	141bc <__assert_fail@plt+0x2f94>
   141a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   141b0:	add	r3, r2, r3
   141b4:	mov	r2, #0
   141b8:	strb	r2, [r3]
   141bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   141c0:	b	1426c <__assert_fail@plt+0x3044>
   141c4:	nop			; (mov r0, r0)
   141c8:	b	14208 <__assert_fail@plt+0x2fe0>
   141cc:	nop			; (mov r0, r0)
   141d0:	b	14208 <__assert_fail@plt+0x2fe0>
   141d4:	nop			; (mov r0, r0)
   141d8:	b	14208 <__assert_fail@plt+0x2fe0>
   141dc:	nop			; (mov r0, r0)
   141e0:	b	14208 <__assert_fail@plt+0x2fe0>
   141e4:	nop			; (mov r0, r0)
   141e8:	b	14208 <__assert_fail@plt+0x2fe0>
   141ec:	nop			; (mov r0, r0)
   141f0:	b	14208 <__assert_fail@plt+0x2fe0>
   141f4:	nop			; (mov r0, r0)
   141f8:	b	14208 <__assert_fail@plt+0x2fe0>
   141fc:	nop			; (mov r0, r0)
   14200:	b	14208 <__assert_fail@plt+0x2fe0>
   14204:	nop			; (mov r0, r0)
   14208:	ldr	r3, [fp, #4]
   1420c:	cmp	r3, #2
   14210:	bne	14228 <__assert_fail@plt+0x3000>
   14214:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14218:	cmp	r3, #0
   1421c:	beq	14228 <__assert_fail@plt+0x3000>
   14220:	mov	r3, #4
   14224:	str	r3, [fp, #4]
   14228:	ldr	r3, [fp, #8]
   1422c:	bic	r3, r3, #2
   14230:	ldr	r2, [fp, #20]
   14234:	str	r2, [sp, #16]
   14238:	ldr	r2, [fp, #16]
   1423c:	str	r2, [sp, #12]
   14240:	mov	r2, #0
   14244:	str	r2, [sp, #8]
   14248:	str	r3, [sp, #4]
   1424c:	ldr	r3, [fp, #4]
   14250:	str	r3, [sp]
   14254:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14258:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1425c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14260:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14264:	bl	12bcc <__assert_fail@plt+0x19a4>
   14268:	mov	r3, r0
   1426c:	mov	r0, r3
   14270:	sub	sp, fp, #8
   14274:	pop	{r4, fp, pc}
   14278:	push	{fp, lr}
   1427c:	add	fp, sp, #4
   14280:	sub	sp, sp, #56	; 0x38
   14284:	str	r0, [fp, #-24]	; 0xffffffe8
   14288:	str	r1, [fp, #-28]	; 0xffffffe4
   1428c:	str	r2, [fp, #-32]	; 0xffffffe0
   14290:	str	r3, [fp, #-36]	; 0xffffffdc
   14294:	ldr	r3, [fp, #4]
   14298:	cmp	r3, #0
   1429c:	beq	142a8 <__assert_fail@plt+0x3080>
   142a0:	ldr	r3, [fp, #4]
   142a4:	b	142ac <__assert_fail@plt+0x3084>
   142a8:	ldr	r3, [pc, #132]	; 14334 <__assert_fail@plt+0x310c>
   142ac:	str	r3, [fp, #-8]
   142b0:	bl	11114 <__errno_location@plt>
   142b4:	mov	r3, r0
   142b8:	ldr	r3, [r3]
   142bc:	str	r3, [fp, #-12]
   142c0:	ldr	r3, [fp, #-8]
   142c4:	ldr	r3, [r3]
   142c8:	ldr	r2, [fp, #-8]
   142cc:	ldr	r2, [r2, #4]
   142d0:	ldr	r1, [fp, #-8]
   142d4:	add	r1, r1, #8
   142d8:	ldr	r0, [fp, #-8]
   142dc:	ldr	r0, [r0, #40]	; 0x28
   142e0:	ldr	ip, [fp, #-8]
   142e4:	ldr	ip, [ip, #44]	; 0x2c
   142e8:	str	ip, [sp, #16]
   142ec:	str	r0, [sp, #12]
   142f0:	str	r1, [sp, #8]
   142f4:	str	r2, [sp, #4]
   142f8:	str	r3, [sp]
   142fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14300:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14304:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14308:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1430c:	bl	12bcc <__assert_fail@plt+0x19a4>
   14310:	str	r0, [fp, #-16]
   14314:	bl	11114 <__errno_location@plt>
   14318:	mov	r2, r0
   1431c:	ldr	r3, [fp, #-12]
   14320:	str	r3, [r2]
   14324:	ldr	r3, [fp, #-16]
   14328:	mov	r0, r3
   1432c:	sub	sp, fp, #4
   14330:	pop	{fp, pc}
   14334:	andeq	fp, r2, r4, lsr #3
   14338:	push	{fp, lr}
   1433c:	add	fp, sp, #4
   14340:	sub	sp, sp, #16
   14344:	str	r0, [fp, #-8]
   14348:	str	r1, [fp, #-12]
   1434c:	str	r2, [fp, #-16]
   14350:	ldr	r3, [fp, #-16]
   14354:	mov	r2, #0
   14358:	ldr	r1, [fp, #-12]
   1435c:	ldr	r0, [fp, #-8]
   14360:	bl	14374 <__assert_fail@plt+0x314c>
   14364:	mov	r3, r0
   14368:	mov	r0, r3
   1436c:	sub	sp, fp, #4
   14370:	pop	{fp, pc}
   14374:	push	{fp, lr}
   14378:	add	fp, sp, #4
   1437c:	sub	sp, sp, #64	; 0x40
   14380:	str	r0, [fp, #-32]	; 0xffffffe0
   14384:	str	r1, [fp, #-36]	; 0xffffffdc
   14388:	str	r2, [fp, #-40]	; 0xffffffd8
   1438c:	str	r3, [fp, #-44]	; 0xffffffd4
   14390:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14394:	cmp	r3, #0
   14398:	beq	143a4 <__assert_fail@plt+0x317c>
   1439c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   143a0:	b	143a8 <__assert_fail@plt+0x3180>
   143a4:	ldr	r3, [pc, #292]	; 144d0 <__assert_fail@plt+0x32a8>
   143a8:	str	r3, [fp, #-8]
   143ac:	bl	11114 <__errno_location@plt>
   143b0:	mov	r3, r0
   143b4:	ldr	r3, [r3]
   143b8:	str	r3, [fp, #-12]
   143bc:	ldr	r3, [fp, #-8]
   143c0:	ldr	r3, [r3, #4]
   143c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   143c8:	cmp	r2, #0
   143cc:	moveq	r2, #1
   143d0:	movne	r2, #0
   143d4:	uxtb	r2, r2
   143d8:	orr	r3, r3, r2
   143dc:	str	r3, [fp, #-16]
   143e0:	ldr	r3, [fp, #-8]
   143e4:	ldr	r3, [r3]
   143e8:	ldr	r2, [fp, #-8]
   143ec:	add	r2, r2, #8
   143f0:	ldr	r1, [fp, #-8]
   143f4:	ldr	r1, [r1, #40]	; 0x28
   143f8:	ldr	r0, [fp, #-8]
   143fc:	ldr	r0, [r0, #44]	; 0x2c
   14400:	str	r0, [sp, #16]
   14404:	str	r1, [sp, #12]
   14408:	str	r2, [sp, #8]
   1440c:	ldr	r2, [fp, #-16]
   14410:	str	r2, [sp, #4]
   14414:	str	r3, [sp]
   14418:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1441c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14420:	mov	r1, #0
   14424:	mov	r0, #0
   14428:	bl	12bcc <__assert_fail@plt+0x19a4>
   1442c:	mov	r3, r0
   14430:	add	r3, r3, #1
   14434:	str	r3, [fp, #-20]	; 0xffffffec
   14438:	ldr	r0, [fp, #-20]	; 0xffffffec
   1443c:	bl	15b8c <__assert_fail@plt+0x4964>
   14440:	mov	r3, r0
   14444:	str	r3, [fp, #-24]	; 0xffffffe8
   14448:	ldr	r3, [fp, #-8]
   1444c:	ldr	r3, [r3]
   14450:	ldr	r2, [fp, #-8]
   14454:	add	r2, r2, #8
   14458:	ldr	r1, [fp, #-8]
   1445c:	ldr	r1, [r1, #40]	; 0x28
   14460:	ldr	r0, [fp, #-8]
   14464:	ldr	r0, [r0, #44]	; 0x2c
   14468:	str	r0, [sp, #16]
   1446c:	str	r1, [sp, #12]
   14470:	str	r2, [sp, #8]
   14474:	ldr	r2, [fp, #-16]
   14478:	str	r2, [sp, #4]
   1447c:	str	r3, [sp]
   14480:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14484:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14488:	ldr	r1, [fp, #-20]	; 0xffffffec
   1448c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14490:	bl	12bcc <__assert_fail@plt+0x19a4>
   14494:	bl	11114 <__errno_location@plt>
   14498:	mov	r2, r0
   1449c:	ldr	r3, [fp, #-12]
   144a0:	str	r3, [r2]
   144a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   144a8:	cmp	r3, #0
   144ac:	beq	144c0 <__assert_fail@plt+0x3298>
   144b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144b4:	sub	r2, r3, #1
   144b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   144bc:	str	r2, [r3]
   144c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144c4:	mov	r0, r3
   144c8:	sub	sp, fp, #4
   144cc:	pop	{fp, pc}
   144d0:	andeq	fp, r2, r4, lsr #3
   144d4:	push	{fp, lr}
   144d8:	add	fp, sp, #4
   144dc:	sub	sp, sp, #8
   144e0:	ldr	r3, [pc, #196]	; 145ac <__assert_fail@plt+0x3384>
   144e4:	ldr	r3, [r3]
   144e8:	str	r3, [fp, #-12]
   144ec:	mov	r3, #1
   144f0:	str	r3, [fp, #-8]
   144f4:	b	14520 <__assert_fail@plt+0x32f8>
   144f8:	ldr	r3, [fp, #-8]
   144fc:	lsl	r3, r3, #3
   14500:	ldr	r2, [fp, #-12]
   14504:	add	r3, r2, r3
   14508:	ldr	r3, [r3, #4]
   1450c:	mov	r0, r3
   14510:	bl	12634 <__assert_fail@plt+0x140c>
   14514:	ldr	r3, [fp, #-8]
   14518:	add	r3, r3, #1
   1451c:	str	r3, [fp, #-8]
   14520:	ldr	r3, [pc, #136]	; 145b0 <__assert_fail@plt+0x3388>
   14524:	ldr	r3, [r3]
   14528:	ldr	r2, [fp, #-8]
   1452c:	cmp	r2, r3
   14530:	blt	144f8 <__assert_fail@plt+0x32d0>
   14534:	ldr	r3, [fp, #-12]
   14538:	ldr	r3, [r3, #4]
   1453c:	ldr	r2, [pc, #112]	; 145b4 <__assert_fail@plt+0x338c>
   14540:	cmp	r3, r2
   14544:	beq	14570 <__assert_fail@plt+0x3348>
   14548:	ldr	r3, [fp, #-12]
   1454c:	ldr	r3, [r3, #4]
   14550:	mov	r0, r3
   14554:	bl	12634 <__assert_fail@plt+0x140c>
   14558:	ldr	r3, [pc, #88]	; 145b8 <__assert_fail@plt+0x3390>
   1455c:	mov	r2, #256	; 0x100
   14560:	str	r2, [r3]
   14564:	ldr	r3, [pc, #76]	; 145b8 <__assert_fail@plt+0x3390>
   14568:	ldr	r2, [pc, #68]	; 145b4 <__assert_fail@plt+0x338c>
   1456c:	str	r2, [r3, #4]
   14570:	ldr	r3, [fp, #-12]
   14574:	ldr	r2, [pc, #60]	; 145b8 <__assert_fail@plt+0x3390>
   14578:	cmp	r3, r2
   1457c:	beq	14594 <__assert_fail@plt+0x336c>
   14580:	ldr	r0, [fp, #-12]
   14584:	bl	12634 <__assert_fail@plt+0x140c>
   14588:	ldr	r3, [pc, #28]	; 145ac <__assert_fail@plt+0x3384>
   1458c:	ldr	r2, [pc, #36]	; 145b8 <__assert_fail@plt+0x3390>
   14590:	str	r2, [r3]
   14594:	ldr	r3, [pc, #20]	; 145b0 <__assert_fail@plt+0x3388>
   14598:	mov	r2, #1
   1459c:	str	r2, [r3]
   145a0:	nop			; (mov r0, r0)
   145a4:	sub	sp, fp, #4
   145a8:	pop	{fp, pc}
   145ac:	andeq	fp, r2, r8, lsr r1
   145b0:	andeq	fp, r2, ip, lsr #2
   145b4:	ldrdeq	fp, [r2], -r4
   145b8:	andeq	fp, r2, r0, lsr r1
   145bc:	push	{r4, fp, lr}
   145c0:	add	fp, sp, #8
   145c4:	sub	sp, sp, #84	; 0x54
   145c8:	str	r0, [fp, #-56]	; 0xffffffc8
   145cc:	str	r1, [fp, #-60]	; 0xffffffc4
   145d0:	str	r2, [fp, #-64]	; 0xffffffc0
   145d4:	str	r3, [fp, #-68]	; 0xffffffbc
   145d8:	bl	11114 <__errno_location@plt>
   145dc:	mov	r3, r0
   145e0:	ldr	r3, [r3]
   145e4:	str	r3, [fp, #-24]	; 0xffffffe8
   145e8:	ldr	r3, [pc, #640]	; 14870 <__assert_fail@plt+0x3648>
   145ec:	ldr	r3, [r3]
   145f0:	str	r3, [fp, #-16]
   145f4:	mvn	r3, #-2147483648	; 0x80000000
   145f8:	str	r3, [fp, #-28]	; 0xffffffe4
   145fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14600:	cmp	r3, #0
   14604:	blt	14618 <__assert_fail@plt+0x33f0>
   14608:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1460c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14610:	cmp	r2, r3
   14614:	blt	1461c <__assert_fail@plt+0x33f4>
   14618:	bl	11204 <abort@plt>
   1461c:	ldr	r3, [pc, #592]	; 14874 <__assert_fail@plt+0x364c>
   14620:	ldr	r2, [r3]
   14624:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14628:	cmp	r2, r3
   1462c:	bgt	14700 <__assert_fail@plt+0x34d8>
   14630:	ldr	r3, [fp, #-16]
   14634:	ldr	r2, [pc, #572]	; 14878 <__assert_fail@plt+0x3650>
   14638:	cmp	r3, r2
   1463c:	moveq	r3, #1
   14640:	movne	r3, #0
   14644:	strb	r3, [fp, #-29]	; 0xffffffe3
   14648:	ldr	r3, [pc, #548]	; 14874 <__assert_fail@plt+0x364c>
   1464c:	ldr	r3, [r3]
   14650:	str	r3, [fp, #-48]	; 0xffffffd0
   14654:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14658:	cmp	r3, #0
   1465c:	beq	14668 <__assert_fail@plt+0x3440>
   14660:	mov	r0, #0
   14664:	b	1466c <__assert_fail@plt+0x3444>
   14668:	ldr	r0, [fp, #-16]
   1466c:	ldr	r3, [pc, #512]	; 14874 <__assert_fail@plt+0x364c>
   14670:	ldr	r3, [r3]
   14674:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14678:	sub	r3, r2, r3
   1467c:	add	r2, r3, #1
   14680:	sub	r1, fp, #48	; 0x30
   14684:	mov	r3, #8
   14688:	str	r3, [sp]
   1468c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14690:	bl	15eac <__assert_fail@plt+0x4c84>
   14694:	str	r0, [fp, #-16]
   14698:	ldr	r2, [pc, #464]	; 14870 <__assert_fail@plt+0x3648>
   1469c:	ldr	r3, [fp, #-16]
   146a0:	str	r3, [r2]
   146a4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   146a8:	cmp	r3, #0
   146ac:	beq	146c0 <__assert_fail@plt+0x3498>
   146b0:	ldr	r3, [fp, #-16]
   146b4:	ldr	r2, [pc, #444]	; 14878 <__assert_fail@plt+0x3650>
   146b8:	ldm	r2, {r0, r1}
   146bc:	stm	r3, {r0, r1}
   146c0:	ldr	r3, [pc, #428]	; 14874 <__assert_fail@plt+0x364c>
   146c4:	ldr	r3, [r3]
   146c8:	lsl	r3, r3, #3
   146cc:	ldr	r2, [fp, #-16]
   146d0:	add	r0, r2, r3
   146d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   146d8:	ldr	r3, [pc, #404]	; 14874 <__assert_fail@plt+0x364c>
   146dc:	ldr	r3, [r3]
   146e0:	sub	r3, r2, r3
   146e4:	lsl	r3, r3, #3
   146e8:	mov	r2, r3
   146ec:	mov	r1, #0
   146f0:	bl	11138 <memset@plt>
   146f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   146f8:	ldr	r2, [pc, #372]	; 14874 <__assert_fail@plt+0x364c>
   146fc:	str	r3, [r2]
   14700:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14704:	lsl	r3, r3, #3
   14708:	ldr	r2, [fp, #-16]
   1470c:	add	r3, r2, r3
   14710:	ldr	r3, [r3]
   14714:	str	r3, [fp, #-36]	; 0xffffffdc
   14718:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1471c:	lsl	r3, r3, #3
   14720:	ldr	r2, [fp, #-16]
   14724:	add	r3, r2, r3
   14728:	ldr	r3, [r3, #4]
   1472c:	str	r3, [fp, #-20]	; 0xffffffec
   14730:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14734:	ldr	r3, [r3, #4]
   14738:	orr	r3, r3, #1
   1473c:	str	r3, [fp, #-40]	; 0xffffffd8
   14740:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14744:	ldr	r3, [r3]
   14748:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1474c:	add	r2, r2, #8
   14750:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14754:	ldr	r1, [r1, #40]	; 0x28
   14758:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1475c:	ldr	r0, [r0, #44]	; 0x2c
   14760:	str	r0, [sp, #16]
   14764:	str	r1, [sp, #12]
   14768:	str	r2, [sp, #8]
   1476c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14770:	str	r2, [sp, #4]
   14774:	str	r3, [sp]
   14778:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1477c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14780:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14784:	ldr	r0, [fp, #-20]	; 0xffffffec
   14788:	bl	12bcc <__assert_fail@plt+0x19a4>
   1478c:	str	r0, [fp, #-44]	; 0xffffffd4
   14790:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14794:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14798:	cmp	r2, r3
   1479c:	bhi	14850 <__assert_fail@plt+0x3628>
   147a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   147a4:	lsl	r3, r3, #3
   147a8:	ldr	r2, [fp, #-16]
   147ac:	add	r3, r2, r3
   147b0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   147b4:	add	r2, r2, #1
   147b8:	str	r2, [fp, #-36]	; 0xffffffdc
   147bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   147c0:	str	r2, [r3]
   147c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   147c8:	ldr	r2, [pc, #172]	; 1487c <__assert_fail@plt+0x3654>
   147cc:	cmp	r3, r2
   147d0:	beq	147dc <__assert_fail@plt+0x35b4>
   147d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   147d8:	bl	12634 <__assert_fail@plt+0x140c>
   147dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   147e0:	lsl	r3, r3, #3
   147e4:	ldr	r2, [fp, #-16]
   147e8:	add	r4, r2, r3
   147ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   147f0:	bl	15b8c <__assert_fail@plt+0x4964>
   147f4:	mov	r3, r0
   147f8:	str	r3, [fp, #-20]	; 0xffffffec
   147fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14800:	str	r3, [r4, #4]
   14804:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14808:	ldr	r3, [r3]
   1480c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14810:	add	r2, r2, #8
   14814:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14818:	ldr	r1, [r1, #40]	; 0x28
   1481c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14820:	ldr	r0, [r0, #44]	; 0x2c
   14824:	str	r0, [sp, #16]
   14828:	str	r1, [sp, #12]
   1482c:	str	r2, [sp, #8]
   14830:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14834:	str	r2, [sp, #4]
   14838:	str	r3, [sp]
   1483c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14840:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14844:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14848:	ldr	r0, [fp, #-20]	; 0xffffffec
   1484c:	bl	12bcc <__assert_fail@plt+0x19a4>
   14850:	bl	11114 <__errno_location@plt>
   14854:	mov	r2, r0
   14858:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1485c:	str	r3, [r2]
   14860:	ldr	r3, [fp, #-20]	; 0xffffffec
   14864:	mov	r0, r3
   14868:	sub	sp, fp, #8
   1486c:	pop	{r4, fp, pc}
   14870:	andeq	fp, r2, r8, lsr r1
   14874:	andeq	fp, r2, ip, lsr #2
   14878:	andeq	fp, r2, r0, lsr r1
   1487c:	ldrdeq	fp, [r2], -r4
   14880:	push	{fp, lr}
   14884:	add	fp, sp, #4
   14888:	sub	sp, sp, #8
   1488c:	str	r0, [fp, #-8]
   14890:	str	r1, [fp, #-12]
   14894:	ldr	r3, [pc, #28]	; 148b8 <__assert_fail@plt+0x3690>
   14898:	mvn	r2, #0
   1489c:	ldr	r1, [fp, #-12]
   148a0:	ldr	r0, [fp, #-8]
   148a4:	bl	145bc <__assert_fail@plt+0x3394>
   148a8:	mov	r3, r0
   148ac:	mov	r0, r3
   148b0:	sub	sp, fp, #4
   148b4:	pop	{fp, pc}
   148b8:	andeq	fp, r2, r4, lsr #3
   148bc:	push	{fp, lr}
   148c0:	add	fp, sp, #4
   148c4:	sub	sp, sp, #16
   148c8:	str	r0, [fp, #-8]
   148cc:	str	r1, [fp, #-12]
   148d0:	str	r2, [fp, #-16]
   148d4:	ldr	r3, [pc, #28]	; 148f8 <__assert_fail@plt+0x36d0>
   148d8:	ldr	r2, [fp, #-16]
   148dc:	ldr	r1, [fp, #-12]
   148e0:	ldr	r0, [fp, #-8]
   148e4:	bl	145bc <__assert_fail@plt+0x3394>
   148e8:	mov	r3, r0
   148ec:	mov	r0, r3
   148f0:	sub	sp, fp, #4
   148f4:	pop	{fp, pc}
   148f8:	andeq	fp, r2, r4, lsr #3
   148fc:	push	{fp, lr}
   14900:	add	fp, sp, #4
   14904:	sub	sp, sp, #8
   14908:	str	r0, [fp, #-8]
   1490c:	ldr	r1, [fp, #-8]
   14910:	mov	r0, #0
   14914:	bl	14880 <__assert_fail@plt+0x3658>
   14918:	mov	r3, r0
   1491c:	mov	r0, r3
   14920:	sub	sp, fp, #4
   14924:	pop	{fp, pc}
   14928:	push	{fp, lr}
   1492c:	add	fp, sp, #4
   14930:	sub	sp, sp, #8
   14934:	str	r0, [fp, #-8]
   14938:	str	r1, [fp, #-12]
   1493c:	ldr	r2, [fp, #-12]
   14940:	ldr	r1, [fp, #-8]
   14944:	mov	r0, #0
   14948:	bl	148bc <__assert_fail@plt+0x3694>
   1494c:	mov	r3, r0
   14950:	mov	r0, r3
   14954:	sub	sp, fp, #4
   14958:	pop	{fp, pc}
   1495c:	push	{fp, lr}
   14960:	add	fp, sp, #4
   14964:	sub	sp, sp, #64	; 0x40
   14968:	str	r0, [fp, #-56]	; 0xffffffc8
   1496c:	str	r1, [fp, #-60]	; 0xffffffc4
   14970:	str	r2, [fp, #-64]	; 0xffffffc0
   14974:	sub	r3, fp, #52	; 0x34
   14978:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1497c:	mov	r0, r3
   14980:	bl	12a68 <__assert_fail@plt+0x1840>
   14984:	sub	r3, fp, #52	; 0x34
   14988:	mvn	r2, #0
   1498c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14990:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14994:	bl	145bc <__assert_fail@plt+0x3394>
   14998:	mov	r3, r0
   1499c:	mov	r0, r3
   149a0:	sub	sp, fp, #4
   149a4:	pop	{fp, pc}
   149a8:	push	{fp, lr}
   149ac:	add	fp, sp, #4
   149b0:	sub	sp, sp, #64	; 0x40
   149b4:	str	r0, [fp, #-56]	; 0xffffffc8
   149b8:	str	r1, [fp, #-60]	; 0xffffffc4
   149bc:	str	r2, [fp, #-64]	; 0xffffffc0
   149c0:	str	r3, [fp, #-68]	; 0xffffffbc
   149c4:	sub	r3, fp, #52	; 0x34
   149c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   149cc:	mov	r0, r3
   149d0:	bl	12a68 <__assert_fail@plt+0x1840>
   149d4:	sub	r3, fp, #52	; 0x34
   149d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   149dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   149e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   149e4:	bl	145bc <__assert_fail@plt+0x3394>
   149e8:	mov	r3, r0
   149ec:	mov	r0, r3
   149f0:	sub	sp, fp, #4
   149f4:	pop	{fp, pc}
   149f8:	push	{fp, lr}
   149fc:	add	fp, sp, #4
   14a00:	sub	sp, sp, #8
   14a04:	str	r0, [fp, #-8]
   14a08:	str	r1, [fp, #-12]
   14a0c:	ldr	r2, [fp, #-12]
   14a10:	ldr	r1, [fp, #-8]
   14a14:	mov	r0, #0
   14a18:	bl	1495c <__assert_fail@plt+0x3734>
   14a1c:	mov	r3, r0
   14a20:	mov	r0, r3
   14a24:	sub	sp, fp, #4
   14a28:	pop	{fp, pc}
   14a2c:	push	{fp, lr}
   14a30:	add	fp, sp, #4
   14a34:	sub	sp, sp, #16
   14a38:	str	r0, [fp, #-8]
   14a3c:	str	r1, [fp, #-12]
   14a40:	str	r2, [fp, #-16]
   14a44:	ldr	r3, [fp, #-16]
   14a48:	ldr	r2, [fp, #-12]
   14a4c:	ldr	r1, [fp, #-8]
   14a50:	mov	r0, #0
   14a54:	bl	149a8 <__assert_fail@plt+0x3780>
   14a58:	mov	r3, r0
   14a5c:	mov	r0, r3
   14a60:	sub	sp, fp, #4
   14a64:	pop	{fp, pc}
   14a68:	push	{fp, lr}
   14a6c:	add	fp, sp, #4
   14a70:	sub	sp, sp, #64	; 0x40
   14a74:	str	r0, [fp, #-56]	; 0xffffffc8
   14a78:	str	r1, [fp, #-60]	; 0xffffffc4
   14a7c:	mov	r3, r2
   14a80:	strb	r3, [fp, #-61]	; 0xffffffc3
   14a84:	ldr	r3, [pc, #84]	; 14ae0 <__assert_fail@plt+0x38b8>
   14a88:	sub	ip, fp, #52	; 0x34
   14a8c:	mov	lr, r3
   14a90:	ldm	lr!, {r0, r1, r2, r3}
   14a94:	stmia	ip!, {r0, r1, r2, r3}
   14a98:	ldm	lr!, {r0, r1, r2, r3}
   14a9c:	stmia	ip!, {r0, r1, r2, r3}
   14aa0:	ldm	lr, {r0, r1, r2, r3}
   14aa4:	stm	ip, {r0, r1, r2, r3}
   14aa8:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14aac:	sub	r3, fp, #52	; 0x34
   14ab0:	mov	r2, #1
   14ab4:	mov	r0, r3
   14ab8:	bl	128d4 <__assert_fail@plt+0x16ac>
   14abc:	sub	r3, fp, #52	; 0x34
   14ac0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14ac4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14ac8:	mov	r0, #0
   14acc:	bl	145bc <__assert_fail@plt+0x3394>
   14ad0:	mov	r3, r0
   14ad4:	mov	r0, r3
   14ad8:	sub	sp, fp, #4
   14adc:	pop	{fp, pc}
   14ae0:	andeq	fp, r2, r4, lsr #3
   14ae4:	push	{fp, lr}
   14ae8:	add	fp, sp, #4
   14aec:	sub	sp, sp, #8
   14af0:	str	r0, [fp, #-8]
   14af4:	mov	r3, r1
   14af8:	strb	r3, [fp, #-9]
   14afc:	ldrb	r3, [fp, #-9]
   14b00:	mov	r2, r3
   14b04:	mvn	r1, #0
   14b08:	ldr	r0, [fp, #-8]
   14b0c:	bl	14a68 <__assert_fail@plt+0x3840>
   14b10:	mov	r3, r0
   14b14:	mov	r0, r3
   14b18:	sub	sp, fp, #4
   14b1c:	pop	{fp, pc}
   14b20:	push	{fp, lr}
   14b24:	add	fp, sp, #4
   14b28:	sub	sp, sp, #8
   14b2c:	str	r0, [fp, #-8]
   14b30:	mov	r1, #58	; 0x3a
   14b34:	ldr	r0, [fp, #-8]
   14b38:	bl	14ae4 <__assert_fail@plt+0x38bc>
   14b3c:	mov	r3, r0
   14b40:	mov	r0, r3
   14b44:	sub	sp, fp, #4
   14b48:	pop	{fp, pc}
   14b4c:	push	{fp, lr}
   14b50:	add	fp, sp, #4
   14b54:	sub	sp, sp, #8
   14b58:	str	r0, [fp, #-8]
   14b5c:	str	r1, [fp, #-12]
   14b60:	mov	r2, #58	; 0x3a
   14b64:	ldr	r1, [fp, #-12]
   14b68:	ldr	r0, [fp, #-8]
   14b6c:	bl	14a68 <__assert_fail@plt+0x3840>
   14b70:	mov	r3, r0
   14b74:	mov	r0, r3
   14b78:	sub	sp, fp, #4
   14b7c:	pop	{fp, pc}
   14b80:	push	{fp, lr}
   14b84:	add	fp, sp, #4
   14b88:	sub	sp, sp, #112	; 0x70
   14b8c:	str	r0, [fp, #-56]	; 0xffffffc8
   14b90:	str	r1, [fp, #-60]	; 0xffffffc4
   14b94:	str	r2, [fp, #-64]	; 0xffffffc0
   14b98:	sub	r3, fp, #116	; 0x74
   14b9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14ba0:	mov	r0, r3
   14ba4:	bl	12a68 <__assert_fail@plt+0x1840>
   14ba8:	sub	ip, fp, #52	; 0x34
   14bac:	sub	lr, fp, #116	; 0x74
   14bb0:	ldm	lr!, {r0, r1, r2, r3}
   14bb4:	stmia	ip!, {r0, r1, r2, r3}
   14bb8:	ldm	lr!, {r0, r1, r2, r3}
   14bbc:	stmia	ip!, {r0, r1, r2, r3}
   14bc0:	ldm	lr, {r0, r1, r2, r3}
   14bc4:	stm	ip, {r0, r1, r2, r3}
   14bc8:	sub	r3, fp, #52	; 0x34
   14bcc:	mov	r2, #1
   14bd0:	mov	r1, #58	; 0x3a
   14bd4:	mov	r0, r3
   14bd8:	bl	128d4 <__assert_fail@plt+0x16ac>
   14bdc:	sub	r3, fp, #52	; 0x34
   14be0:	mvn	r2, #0
   14be4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14be8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14bec:	bl	145bc <__assert_fail@plt+0x3394>
   14bf0:	mov	r3, r0
   14bf4:	mov	r0, r3
   14bf8:	sub	sp, fp, #4
   14bfc:	pop	{fp, pc}
   14c00:	push	{fp, lr}
   14c04:	add	fp, sp, #4
   14c08:	sub	sp, sp, #24
   14c0c:	str	r0, [fp, #-8]
   14c10:	str	r1, [fp, #-12]
   14c14:	str	r2, [fp, #-16]
   14c18:	str	r3, [fp, #-20]	; 0xffffffec
   14c1c:	mvn	r3, #0
   14c20:	str	r3, [sp]
   14c24:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c28:	ldr	r2, [fp, #-16]
   14c2c:	ldr	r1, [fp, #-12]
   14c30:	ldr	r0, [fp, #-8]
   14c34:	bl	14c48 <__assert_fail@plt+0x3a20>
   14c38:	mov	r3, r0
   14c3c:	mov	r0, r3
   14c40:	sub	sp, fp, #4
   14c44:	pop	{fp, pc}
   14c48:	push	{fp, lr}
   14c4c:	add	fp, sp, #4
   14c50:	sub	sp, sp, #64	; 0x40
   14c54:	str	r0, [fp, #-56]	; 0xffffffc8
   14c58:	str	r1, [fp, #-60]	; 0xffffffc4
   14c5c:	str	r2, [fp, #-64]	; 0xffffffc0
   14c60:	str	r3, [fp, #-68]	; 0xffffffbc
   14c64:	ldr	r3, [pc, #84]	; 14cc0 <__assert_fail@plt+0x3a98>
   14c68:	sub	ip, fp, #52	; 0x34
   14c6c:	mov	lr, r3
   14c70:	ldm	lr!, {r0, r1, r2, r3}
   14c74:	stmia	ip!, {r0, r1, r2, r3}
   14c78:	ldm	lr!, {r0, r1, r2, r3}
   14c7c:	stmia	ip!, {r0, r1, r2, r3}
   14c80:	ldm	lr, {r0, r1, r2, r3}
   14c84:	stm	ip, {r0, r1, r2, r3}
   14c88:	sub	r3, fp, #52	; 0x34
   14c8c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14c90:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14c94:	mov	r0, r3
   14c98:	bl	129ec <__assert_fail@plt+0x17c4>
   14c9c:	sub	r3, fp, #52	; 0x34
   14ca0:	ldr	r2, [fp, #4]
   14ca4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14ca8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14cac:	bl	145bc <__assert_fail@plt+0x3394>
   14cb0:	mov	r3, r0
   14cb4:	mov	r0, r3
   14cb8:	sub	sp, fp, #4
   14cbc:	pop	{fp, pc}
   14cc0:	andeq	fp, r2, r4, lsr #3
   14cc4:	push	{fp, lr}
   14cc8:	add	fp, sp, #4
   14ccc:	sub	sp, sp, #16
   14cd0:	str	r0, [fp, #-8]
   14cd4:	str	r1, [fp, #-12]
   14cd8:	str	r2, [fp, #-16]
   14cdc:	ldr	r3, [fp, #-16]
   14ce0:	ldr	r2, [fp, #-12]
   14ce4:	ldr	r1, [fp, #-8]
   14ce8:	mov	r0, #0
   14cec:	bl	14c00 <__assert_fail@plt+0x39d8>
   14cf0:	mov	r3, r0
   14cf4:	mov	r0, r3
   14cf8:	sub	sp, fp, #4
   14cfc:	pop	{fp, pc}
   14d00:	push	{fp, lr}
   14d04:	add	fp, sp, #4
   14d08:	sub	sp, sp, #24
   14d0c:	str	r0, [fp, #-8]
   14d10:	str	r1, [fp, #-12]
   14d14:	str	r2, [fp, #-16]
   14d18:	str	r3, [fp, #-20]	; 0xffffffec
   14d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d20:	str	r3, [sp]
   14d24:	ldr	r3, [fp, #-16]
   14d28:	ldr	r2, [fp, #-12]
   14d2c:	ldr	r1, [fp, #-8]
   14d30:	mov	r0, #0
   14d34:	bl	14c48 <__assert_fail@plt+0x3a20>
   14d38:	mov	r3, r0
   14d3c:	mov	r0, r3
   14d40:	sub	sp, fp, #4
   14d44:	pop	{fp, pc}
   14d48:	push	{fp, lr}
   14d4c:	add	fp, sp, #4
   14d50:	sub	sp, sp, #16
   14d54:	str	r0, [fp, #-8]
   14d58:	str	r1, [fp, #-12]
   14d5c:	str	r2, [fp, #-16]
   14d60:	ldr	r3, [pc, #28]	; 14d84 <__assert_fail@plt+0x3b5c>
   14d64:	ldr	r2, [fp, #-16]
   14d68:	ldr	r1, [fp, #-12]
   14d6c:	ldr	r0, [fp, #-8]
   14d70:	bl	145bc <__assert_fail@plt+0x3394>
   14d74:	mov	r3, r0
   14d78:	mov	r0, r3
   14d7c:	sub	sp, fp, #4
   14d80:	pop	{fp, pc}
   14d84:	andeq	fp, r2, ip, lsr r1
   14d88:	push	{fp, lr}
   14d8c:	add	fp, sp, #4
   14d90:	sub	sp, sp, #8
   14d94:	str	r0, [fp, #-8]
   14d98:	str	r1, [fp, #-12]
   14d9c:	ldr	r2, [fp, #-12]
   14da0:	ldr	r1, [fp, #-8]
   14da4:	mov	r0, #0
   14da8:	bl	14d48 <__assert_fail@plt+0x3b20>
   14dac:	mov	r3, r0
   14db0:	mov	r0, r3
   14db4:	sub	sp, fp, #4
   14db8:	pop	{fp, pc}
   14dbc:	push	{fp, lr}
   14dc0:	add	fp, sp, #4
   14dc4:	sub	sp, sp, #8
   14dc8:	str	r0, [fp, #-8]
   14dcc:	str	r1, [fp, #-12]
   14dd0:	mvn	r2, #0
   14dd4:	ldr	r1, [fp, #-12]
   14dd8:	ldr	r0, [fp, #-8]
   14ddc:	bl	14d48 <__assert_fail@plt+0x3b20>
   14de0:	mov	r3, r0
   14de4:	mov	r0, r3
   14de8:	sub	sp, fp, #4
   14dec:	pop	{fp, pc}
   14df0:	push	{fp, lr}
   14df4:	add	fp, sp, #4
   14df8:	sub	sp, sp, #8
   14dfc:	str	r0, [fp, #-8]
   14e00:	ldr	r1, [fp, #-8]
   14e04:	mov	r0, #0
   14e08:	bl	14dbc <__assert_fail@plt+0x3b94>
   14e0c:	mov	r3, r0
   14e10:	mov	r0, r3
   14e14:	sub	sp, fp, #4
   14e18:	pop	{fp, pc}
   14e1c:	push	{fp, lr}
   14e20:	add	fp, sp, #4
   14e24:	sub	sp, sp, #96	; 0x60
   14e28:	str	r0, [fp, #-80]	; 0xffffffb0
   14e2c:	str	r1, [fp, #-84]	; 0xffffffac
   14e30:	str	r2, [fp, #-88]	; 0xffffffa8
   14e34:	str	r3, [fp, #-92]	; 0xffffffa4
   14e38:	mov	r3, #0
   14e3c:	str	r3, [fp, #-16]
   14e40:	ldr	r3, [fp, #-88]	; 0xffffffa8
   14e44:	ldr	r3, [r3]
   14e48:	str	r3, [fp, #-20]	; 0xffffffec
   14e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e50:	cmp	r3, #0
   14e54:	beq	14e64 <__assert_fail@plt+0x3c3c>
   14e58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e5c:	ldr	r3, [r3]
   14e60:	b	14e68 <__assert_fail@plt+0x3c40>
   14e64:	mvn	r3, #0
   14e68:	str	r3, [fp, #-24]	; 0xffffffe8
   14e6c:	mov	r3, #0
   14e70:	str	r3, [fp, #-8]
   14e74:	ldr	r3, [fp, #4]
   14e78:	cmp	r3, #0
   14e7c:	beq	14e8c <__assert_fail@plt+0x3c64>
   14e80:	ldr	r3, [fp, #4]
   14e84:	mov	r2, #0
   14e88:	str	r2, [r3]
   14e8c:	ldr	r3, [fp, #8]
   14e90:	cmp	r3, #0
   14e94:	beq	14ea4 <__assert_fail@plt+0x3c7c>
   14e98:	ldr	r3, [fp, #8]
   14e9c:	mov	r2, #0
   14ea0:	str	r2, [r3]
   14ea4:	mov	r3, #0
   14ea8:	str	r3, [fp, #-12]
   14eac:	ldr	r3, [fp, #-84]	; 0xffffffac
   14eb0:	cmp	r3, #0
   14eb4:	bne	14edc <__assert_fail@plt+0x3cb4>
   14eb8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14ebc:	ldrb	r3, [r3]
   14ec0:	cmp	r3, #0
   14ec4:	beq	14f28 <__assert_fail@plt+0x3d00>
   14ec8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14ecc:	bl	16604 <__assert_fail@plt+0x53dc>
   14ed0:	mov	r3, r0
   14ed4:	str	r3, [fp, #-12]
   14ed8:	b	14f28 <__assert_fail@plt+0x3d00>
   14edc:	ldr	r2, [fp, #-84]	; 0xffffffac
   14ee0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14ee4:	sub	r3, r2, r3
   14ee8:	str	r3, [fp, #-28]	; 0xffffffe4
   14eec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ef0:	cmp	r3, #0
   14ef4:	beq	14f28 <__assert_fail@plt+0x3d00>
   14ef8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14efc:	add	r3, r3, #1
   14f00:	mov	r1, r3
   14f04:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14f08:	bl	1655c <__assert_fail@plt+0x5334>
   14f0c:	mov	r3, r0
   14f10:	str	r3, [fp, #-12]
   14f14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f18:	ldr	r2, [fp, #-12]
   14f1c:	add	r3, r2, r3
   14f20:	mov	r2, #0
   14f24:	strb	r2, [r3]
   14f28:	ldr	r3, [fp, #-84]	; 0xffffffac
   14f2c:	cmp	r3, #0
   14f30:	beq	14f54 <__assert_fail@plt+0x3d2c>
   14f34:	ldr	r3, [fp, #-84]	; 0xffffffac
   14f38:	add	r3, r3, #1
   14f3c:	ldrb	r3, [r3]
   14f40:	cmp	r3, #0
   14f44:	beq	14f54 <__assert_fail@plt+0x3d2c>
   14f48:	ldr	r3, [fp, #-84]	; 0xffffffac
   14f4c:	add	r3, r3, #1
   14f50:	b	14f58 <__assert_fail@plt+0x3d30>
   14f54:	mov	r3, #0
   14f58:	str	r3, [fp, #-32]	; 0xffffffe0
   14f5c:	ldr	r3, [fp, #-12]
   14f60:	cmp	r3, #0
   14f64:	beq	150c8 <__assert_fail@plt+0x3ea0>
   14f68:	ldr	r3, [fp, #-12]
   14f6c:	ldrb	r3, [r3]
   14f70:	cmp	r3, #43	; 0x2b
   14f74:	beq	14f88 <__assert_fail@plt+0x3d60>
   14f78:	ldr	r0, [fp, #-12]
   14f7c:	bl	10f40 <getpwnam@plt>
   14f80:	mov	r3, r0
   14f84:	b	14f8c <__assert_fail@plt+0x3d64>
   14f88:	mov	r3, #0
   14f8c:	str	r3, [fp, #-36]	; 0xffffffdc
   14f90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14f94:	cmp	r3, #0
   14f98:	bne	15040 <__assert_fail@plt+0x3e18>
   14f9c:	ldr	r3, [fp, #-84]	; 0xffffffac
   14fa0:	cmp	r3, #0
   14fa4:	beq	14fbc <__assert_fail@plt+0x3d94>
   14fa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fac:	cmp	r3, #0
   14fb0:	bne	14fbc <__assert_fail@plt+0x3d94>
   14fb4:	mov	r3, #1
   14fb8:	b	14fc0 <__assert_fail@plt+0x3d98>
   14fbc:	mov	r3, #0
   14fc0:	strb	r3, [fp, #-37]	; 0xffffffdb
   14fc4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14fc8:	and	r3, r3, #1
   14fcc:	strb	r3, [fp, #-37]	; 0xffffffdb
   14fd0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14fd4:	cmp	r3, #0
   14fd8:	beq	14fec <__assert_fail@plt+0x3dc4>
   14fdc:	ldr	r3, [pc, #592]	; 15234 <__assert_fail@plt+0x400c>
   14fe0:	ldr	r3, [r3]
   14fe4:	str	r3, [fp, #-8]
   14fe8:	b	150c4 <__assert_fail@plt+0x3e9c>
   14fec:	sub	r2, fp, #48	; 0x30
   14ff0:	ldr	r3, [pc, #576]	; 15238 <__assert_fail@plt+0x4010>
   14ff4:	str	r3, [sp]
   14ff8:	mov	r3, r2
   14ffc:	mov	r2, #10
   15000:	mov	r1, #0
   15004:	ldr	r0, [fp, #-12]
   15008:	bl	1684c <__assert_fail@plt+0x5624>
   1500c:	mov	r3, r0
   15010:	cmp	r3, #0
   15014:	bne	15030 <__assert_fail@plt+0x3e08>
   15018:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1501c:	cmn	r3, #1
   15020:	beq	15030 <__assert_fail@plt+0x3e08>
   15024:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15028:	str	r3, [fp, #-20]	; 0xffffffec
   1502c:	b	150c4 <__assert_fail@plt+0x3e9c>
   15030:	ldr	r3, [pc, #516]	; 1523c <__assert_fail@plt+0x4014>
   15034:	ldr	r3, [r3]
   15038:	str	r3, [fp, #-8]
   1503c:	b	150c4 <__assert_fail@plt+0x3e9c>
   15040:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15044:	ldr	r3, [r3, #8]
   15048:	str	r3, [fp, #-20]	; 0xffffffec
   1504c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15050:	cmp	r3, #0
   15054:	bne	150c4 <__assert_fail@plt+0x3e9c>
   15058:	ldr	r3, [fp, #-84]	; 0xffffffac
   1505c:	cmp	r3, #0
   15060:	beq	150c4 <__assert_fail@plt+0x3e9c>
   15064:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15068:	ldr	r3, [r3, #12]
   1506c:	str	r3, [fp, #-24]	; 0xffffffe8
   15070:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15074:	bl	11210 <getgrgid@plt>
   15078:	str	r0, [fp, #-44]	; 0xffffffd4
   1507c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15080:	cmp	r3, #0
   15084:	beq	15094 <__assert_fail@plt+0x3e6c>
   15088:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1508c:	ldr	r3, [r3]
   15090:	b	150b0 <__assert_fail@plt+0x3e88>
   15094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15098:	mov	r0, r3
   1509c:	mov	r1, #0
   150a0:	sub	r3, fp, #72	; 0x48
   150a4:	mov	r2, r3
   150a8:	bl	17df8 <__assert_fail@plt+0x6bd0>
   150ac:	mov	r3, r0
   150b0:	mov	r0, r3
   150b4:	bl	16604 <__assert_fail@plt+0x53dc>
   150b8:	mov	r3, r0
   150bc:	str	r3, [fp, #-16]
   150c0:	bl	10f1c <endgrent@plt>
   150c4:	bl	111a4 <endpwent@plt>
   150c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   150cc:	cmp	r3, #0
   150d0:	beq	15188 <__assert_fail@plt+0x3f60>
   150d4:	ldr	r3, [fp, #-8]
   150d8:	cmp	r3, #0
   150dc:	bne	15188 <__assert_fail@plt+0x3f60>
   150e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   150e4:	ldrb	r3, [r3]
   150e8:	cmp	r3, #43	; 0x2b
   150ec:	beq	15100 <__assert_fail@plt+0x3ed8>
   150f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   150f4:	bl	1121c <getgrnam@plt>
   150f8:	mov	r3, r0
   150fc:	b	15104 <__assert_fail@plt+0x3edc>
   15100:	mov	r3, #0
   15104:	str	r3, [fp, #-44]	; 0xffffffd4
   15108:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1510c:	cmp	r3, #0
   15110:	bne	15168 <__assert_fail@plt+0x3f40>
   15114:	sub	r2, fp, #76	; 0x4c
   15118:	ldr	r3, [pc, #280]	; 15238 <__assert_fail@plt+0x4010>
   1511c:	str	r3, [sp]
   15120:	mov	r3, r2
   15124:	mov	r2, #10
   15128:	mov	r1, #0
   1512c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15130:	bl	1684c <__assert_fail@plt+0x5624>
   15134:	mov	r3, r0
   15138:	cmp	r3, #0
   1513c:	bne	15158 <__assert_fail@plt+0x3f30>
   15140:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15144:	cmn	r3, #1
   15148:	beq	15158 <__assert_fail@plt+0x3f30>
   1514c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15150:	str	r3, [fp, #-24]	; 0xffffffe8
   15154:	b	15174 <__assert_fail@plt+0x3f4c>
   15158:	ldr	r3, [pc, #224]	; 15240 <__assert_fail@plt+0x4018>
   1515c:	ldr	r3, [r3]
   15160:	str	r3, [fp, #-8]
   15164:	b	15174 <__assert_fail@plt+0x3f4c>
   15168:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1516c:	ldr	r3, [r3, #8]
   15170:	str	r3, [fp, #-24]	; 0xffffffe8
   15174:	bl	10f1c <endgrent@plt>
   15178:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1517c:	bl	16604 <__assert_fail@plt+0x53dc>
   15180:	mov	r3, r0
   15184:	str	r3, [fp, #-16]
   15188:	ldr	r3, [fp, #-8]
   1518c:	cmp	r3, #0
   15190:	bne	151f8 <__assert_fail@plt+0x3fd0>
   15194:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15198:	ldr	r2, [fp, #-20]	; 0xffffffec
   1519c:	str	r2, [r3]
   151a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151a4:	cmp	r3, #0
   151a8:	beq	151b8 <__assert_fail@plt+0x3f90>
   151ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   151b4:	str	r2, [r3]
   151b8:	ldr	r3, [fp, #4]
   151bc:	cmp	r3, #0
   151c0:	beq	151d8 <__assert_fail@plt+0x3fb0>
   151c4:	ldr	r3, [fp, #4]
   151c8:	ldr	r2, [fp, #-12]
   151cc:	str	r2, [r3]
   151d0:	mov	r3, #0
   151d4:	str	r3, [fp, #-12]
   151d8:	ldr	r3, [fp, #8]
   151dc:	cmp	r3, #0
   151e0:	beq	151f8 <__assert_fail@plt+0x3fd0>
   151e4:	ldr	r3, [fp, #8]
   151e8:	ldr	r2, [fp, #-16]
   151ec:	str	r2, [r3]
   151f0:	mov	r3, #0
   151f4:	str	r3, [fp, #-16]
   151f8:	ldr	r0, [fp, #-12]
   151fc:	bl	12634 <__assert_fail@plt+0x140c>
   15200:	ldr	r0, [fp, #-16]
   15204:	bl	12634 <__assert_fail@plt+0x140c>
   15208:	ldr	r3, [fp, #-8]
   1520c:	cmp	r3, #0
   15210:	beq	15224 <__assert_fail@plt+0x3ffc>
   15214:	ldr	r0, [fp, #-8]
   15218:	bl	110d8 <gettext@plt>
   1521c:	mov	r3, r0
   15220:	b	15228 <__assert_fail@plt+0x4000>
   15224:	mov	r3, #0
   15228:	mov	r0, r3
   1522c:	sub	sp, fp, #4
   15230:	pop	{fp, pc}
   15234:	andeq	fp, r2, ip, ror #2
   15238:	andeq	r9, r1, r4, asr #22
   1523c:	andeq	fp, r2, r0, ror r1
   15240:	andeq	fp, r2, r4, ror r1
   15244:	push	{fp, lr}
   15248:	add	fp, sp, #4
   1524c:	sub	sp, sp, #40	; 0x28
   15250:	str	r0, [fp, #-24]	; 0xffffffe8
   15254:	str	r1, [fp, #-28]	; 0xffffffe4
   15258:	str	r2, [fp, #-32]	; 0xffffffe0
   1525c:	str	r3, [fp, #-36]	; 0xffffffdc
   15260:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15264:	cmp	r3, #0
   15268:	beq	15280 <__assert_fail@plt+0x4058>
   1526c:	mov	r1, #58	; 0x3a
   15270:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15274:	bl	110fc <strchr@plt>
   15278:	mov	r3, r0
   1527c:	b	15284 <__assert_fail@plt+0x405c>
   15280:	mov	r3, #0
   15284:	str	r3, [fp, #-12]
   15288:	ldr	r3, [fp, #4]
   1528c:	str	r3, [sp, #4]
   15290:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15294:	str	r3, [sp]
   15298:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1529c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   152a0:	ldr	r1, [fp, #-12]
   152a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   152a8:	bl	14e1c <__assert_fail@plt+0x3bf4>
   152ac:	str	r0, [fp, #-8]
   152b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   152b4:	cmp	r3, #0
   152b8:	beq	15328 <__assert_fail@plt+0x4100>
   152bc:	ldr	r3, [fp, #-12]
   152c0:	cmp	r3, #0
   152c4:	bne	15328 <__assert_fail@plt+0x4100>
   152c8:	ldr	r3, [fp, #-8]
   152cc:	cmp	r3, #0
   152d0:	beq	15328 <__assert_fail@plt+0x4100>
   152d4:	mov	r1, #46	; 0x2e
   152d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   152dc:	bl	110fc <strchr@plt>
   152e0:	str	r0, [fp, #-16]
   152e4:	ldr	r3, [fp, #-16]
   152e8:	cmp	r3, #0
   152ec:	beq	15328 <__assert_fail@plt+0x4100>
   152f0:	ldr	r3, [fp, #4]
   152f4:	str	r3, [sp, #4]
   152f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   152fc:	str	r3, [sp]
   15300:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15304:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15308:	ldr	r1, [fp, #-16]
   1530c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15310:	bl	14e1c <__assert_fail@plt+0x3bf4>
   15314:	mov	r3, r0
   15318:	cmp	r3, #0
   1531c:	bne	15328 <__assert_fail@plt+0x4100>
   15320:	mov	r3, #0
   15324:	str	r3, [fp, #-8]
   15328:	ldr	r3, [fp, #-8]
   1532c:	mov	r0, r3
   15330:	sub	sp, fp, #4
   15334:	pop	{fp, pc}
   15338:	push	{r4, r5, r6, r7, fp, lr}
   1533c:	add	fp, sp, #20
   15340:	sub	sp, sp, #48	; 0x30
   15344:	str	r0, [fp, #-24]	; 0xffffffe8
   15348:	str	r1, [fp, #-28]	; 0xffffffe4
   1534c:	str	r2, [fp, #-32]	; 0xffffffe0
   15350:	str	r3, [fp, #-36]	; 0xffffffdc
   15354:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15358:	cmp	r3, #0
   1535c:	beq	15380 <__assert_fail@plt+0x4158>
   15360:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15364:	str	r3, [sp]
   15368:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1536c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15370:	ldr	r1, [pc, #1260]	; 15864 <__assert_fail@plt+0x463c>
   15374:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15378:	bl	11108 <fprintf@plt>
   1537c:	b	15394 <__assert_fail@plt+0x416c>
   15380:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15384:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15388:	ldr	r1, [pc, #1240]	; 15868 <__assert_fail@plt+0x4640>
   1538c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15390:	bl	11108 <fprintf@plt>
   15394:	ldr	r0, [pc, #1232]	; 1586c <__assert_fail@plt+0x4644>
   15398:	bl	110d8 <gettext@plt>
   1539c:	mov	r2, r0
   153a0:	ldr	r3, [pc, #1224]	; 15870 <__assert_fail@plt+0x4648>
   153a4:	ldr	r1, [pc, #1224]	; 15874 <__assert_fail@plt+0x464c>
   153a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   153ac:	bl	11108 <fprintf@plt>
   153b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   153b4:	mov	r0, #10
   153b8:	bl	10fc4 <fputc_unlocked@plt>
   153bc:	ldr	r0, [pc, #1204]	; 15878 <__assert_fail@plt+0x4650>
   153c0:	bl	110d8 <gettext@plt>
   153c4:	mov	r3, r0
   153c8:	ldr	r2, [pc, #1196]	; 1587c <__assert_fail@plt+0x4654>
   153cc:	mov	r1, r3
   153d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   153d4:	bl	11108 <fprintf@plt>
   153d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   153dc:	mov	r0, #10
   153e0:	bl	10fc4 <fputc_unlocked@plt>
   153e4:	ldr	r3, [fp, #8]
   153e8:	cmp	r3, #9
   153ec:	ldrls	pc, [pc, r3, lsl #2]
   153f0:	b	157ac <__assert_fail@plt+0x4584>
   153f4:	andeq	r5, r1, r4, asr r8
   153f8:	andeq	r5, r1, ip, lsl r4
   153fc:	andeq	r5, r1, r0, asr #8
   15400:	andeq	r5, r1, ip, ror #8
   15404:	andeq	r5, r1, ip, lsr #9
   15408:	andeq	r5, r1, r4, lsl #10
   1540c:	andeq	r5, r1, ip, ror #10
   15410:	andeq	r5, r1, r4, ror #11
   15414:	andeq	r5, r1, ip, ror #12
   15418:	andeq	r5, r1, r4, lsl #14
   1541c:	ldr	r0, [pc, #1116]	; 15880 <__assert_fail@plt+0x4658>
   15420:	bl	110d8 <gettext@plt>
   15424:	mov	r1, r0
   15428:	ldr	r3, [fp, #4]
   1542c:	ldr	r3, [r3]
   15430:	mov	r2, r3
   15434:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15438:	bl	11108 <fprintf@plt>
   1543c:	b	15858 <__assert_fail@plt+0x4630>
   15440:	ldr	r0, [pc, #1084]	; 15884 <__assert_fail@plt+0x465c>
   15444:	bl	110d8 <gettext@plt>
   15448:	mov	r1, r0
   1544c:	ldr	r3, [fp, #4]
   15450:	ldr	r2, [r3]
   15454:	ldr	r3, [fp, #4]
   15458:	add	r3, r3, #4
   1545c:	ldr	r3, [r3]
   15460:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15464:	bl	11108 <fprintf@plt>
   15468:	b	15858 <__assert_fail@plt+0x4630>
   1546c:	ldr	r0, [pc, #1044]	; 15888 <__assert_fail@plt+0x4660>
   15470:	bl	110d8 <gettext@plt>
   15474:	ldr	r3, [fp, #4]
   15478:	ldr	r2, [r3]
   1547c:	ldr	r3, [fp, #4]
   15480:	add	r3, r3, #4
   15484:	ldr	r1, [r3]
   15488:	ldr	r3, [fp, #4]
   1548c:	add	r3, r3, #8
   15490:	ldr	r3, [r3]
   15494:	str	r3, [sp]
   15498:	mov	r3, r1
   1549c:	mov	r1, r0
   154a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154a4:	bl	11108 <fprintf@plt>
   154a8:	b	15858 <__assert_fail@plt+0x4630>
   154ac:	ldr	r0, [pc, #984]	; 1588c <__assert_fail@plt+0x4664>
   154b0:	bl	110d8 <gettext@plt>
   154b4:	mov	ip, r0
   154b8:	ldr	r3, [fp, #4]
   154bc:	ldr	r1, [r3]
   154c0:	ldr	r3, [fp, #4]
   154c4:	add	r3, r3, #4
   154c8:	ldr	r0, [r3]
   154cc:	ldr	r3, [fp, #4]
   154d0:	add	r3, r3, #8
   154d4:	ldr	r3, [r3]
   154d8:	ldr	r2, [fp, #4]
   154dc:	add	r2, r2, #12
   154e0:	ldr	r2, [r2]
   154e4:	str	r2, [sp, #4]
   154e8:	str	r3, [sp]
   154ec:	mov	r3, r0
   154f0:	mov	r2, r1
   154f4:	mov	r1, ip
   154f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154fc:	bl	11108 <fprintf@plt>
   15500:	b	15858 <__assert_fail@plt+0x4630>
   15504:	ldr	r0, [pc, #900]	; 15890 <__assert_fail@plt+0x4668>
   15508:	bl	110d8 <gettext@plt>
   1550c:	mov	lr, r0
   15510:	ldr	r3, [fp, #4]
   15514:	ldr	r0, [r3]
   15518:	ldr	r3, [fp, #4]
   1551c:	add	r3, r3, #4
   15520:	ldr	ip, [r3]
   15524:	ldr	r3, [fp, #4]
   15528:	add	r3, r3, #8
   1552c:	ldr	r3, [r3]
   15530:	ldr	r2, [fp, #4]
   15534:	add	r2, r2, #12
   15538:	ldr	r2, [r2]
   1553c:	ldr	r1, [fp, #4]
   15540:	add	r1, r1, #16
   15544:	ldr	r1, [r1]
   15548:	str	r1, [sp, #8]
   1554c:	str	r2, [sp, #4]
   15550:	str	r3, [sp]
   15554:	mov	r3, ip
   15558:	mov	r2, r0
   1555c:	mov	r1, lr
   15560:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15564:	bl	11108 <fprintf@plt>
   15568:	b	15858 <__assert_fail@plt+0x4630>
   1556c:	ldr	r0, [pc, #800]	; 15894 <__assert_fail@plt+0x466c>
   15570:	bl	110d8 <gettext@plt>
   15574:	mov	r4, r0
   15578:	ldr	r3, [fp, #4]
   1557c:	ldr	ip, [r3]
   15580:	ldr	r3, [fp, #4]
   15584:	add	r3, r3, #4
   15588:	ldr	lr, [r3]
   1558c:	ldr	r3, [fp, #4]
   15590:	add	r3, r3, #8
   15594:	ldr	r3, [r3]
   15598:	ldr	r2, [fp, #4]
   1559c:	add	r2, r2, #12
   155a0:	ldr	r2, [r2]
   155a4:	ldr	r1, [fp, #4]
   155a8:	add	r1, r1, #16
   155ac:	ldr	r1, [r1]
   155b0:	ldr	r0, [fp, #4]
   155b4:	add	r0, r0, #20
   155b8:	ldr	r0, [r0]
   155bc:	str	r0, [sp, #12]
   155c0:	str	r1, [sp, #8]
   155c4:	str	r2, [sp, #4]
   155c8:	str	r3, [sp]
   155cc:	mov	r3, lr
   155d0:	mov	r2, ip
   155d4:	mov	r1, r4
   155d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155dc:	bl	11108 <fprintf@plt>
   155e0:	b	15858 <__assert_fail@plt+0x4630>
   155e4:	ldr	r0, [pc, #684]	; 15898 <__assert_fail@plt+0x4670>
   155e8:	bl	110d8 <gettext@plt>
   155ec:	mov	r5, r0
   155f0:	ldr	r3, [fp, #4]
   155f4:	ldr	lr, [r3]
   155f8:	ldr	r3, [fp, #4]
   155fc:	add	r3, r3, #4
   15600:	ldr	r4, [r3]
   15604:	ldr	r3, [fp, #4]
   15608:	add	r3, r3, #8
   1560c:	ldr	r3, [r3]
   15610:	ldr	r2, [fp, #4]
   15614:	add	r2, r2, #12
   15618:	ldr	r2, [r2]
   1561c:	ldr	r1, [fp, #4]
   15620:	add	r1, r1, #16
   15624:	ldr	r1, [r1]
   15628:	ldr	r0, [fp, #4]
   1562c:	add	r0, r0, #20
   15630:	ldr	r0, [r0]
   15634:	ldr	ip, [fp, #4]
   15638:	add	ip, ip, #24
   1563c:	ldr	ip, [ip]
   15640:	str	ip, [sp, #16]
   15644:	str	r0, [sp, #12]
   15648:	str	r1, [sp, #8]
   1564c:	str	r2, [sp, #4]
   15650:	str	r3, [sp]
   15654:	mov	r3, r4
   15658:	mov	r2, lr
   1565c:	mov	r1, r5
   15660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15664:	bl	11108 <fprintf@plt>
   15668:	b	15858 <__assert_fail@plt+0x4630>
   1566c:	ldr	r0, [pc, #552]	; 1589c <__assert_fail@plt+0x4674>
   15670:	bl	110d8 <gettext@plt>
   15674:	mov	r6, r0
   15678:	ldr	r3, [fp, #4]
   1567c:	ldr	r4, [r3]
   15680:	ldr	r3, [fp, #4]
   15684:	add	r3, r3, #4
   15688:	ldr	r5, [r3]
   1568c:	ldr	r3, [fp, #4]
   15690:	add	r3, r3, #8
   15694:	ldr	r3, [r3]
   15698:	ldr	r2, [fp, #4]
   1569c:	add	r2, r2, #12
   156a0:	ldr	r2, [r2]
   156a4:	ldr	r1, [fp, #4]
   156a8:	add	r1, r1, #16
   156ac:	ldr	r1, [r1]
   156b0:	ldr	r0, [fp, #4]
   156b4:	add	r0, r0, #20
   156b8:	ldr	r0, [r0]
   156bc:	ldr	ip, [fp, #4]
   156c0:	add	ip, ip, #24
   156c4:	ldr	ip, [ip]
   156c8:	ldr	lr, [fp, #4]
   156cc:	add	lr, lr, #28
   156d0:	ldr	lr, [lr]
   156d4:	str	lr, [sp, #20]
   156d8:	str	ip, [sp, #16]
   156dc:	str	r0, [sp, #12]
   156e0:	str	r1, [sp, #8]
   156e4:	str	r2, [sp, #4]
   156e8:	str	r3, [sp]
   156ec:	mov	r3, r5
   156f0:	mov	r2, r4
   156f4:	mov	r1, r6
   156f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156fc:	bl	11108 <fprintf@plt>
   15700:	b	15858 <__assert_fail@plt+0x4630>
   15704:	ldr	r0, [pc, #404]	; 158a0 <__assert_fail@plt+0x4678>
   15708:	bl	110d8 <gettext@plt>
   1570c:	mov	r7, r0
   15710:	ldr	r3, [fp, #4]
   15714:	ldr	r5, [r3]
   15718:	ldr	r3, [fp, #4]
   1571c:	add	r3, r3, #4
   15720:	ldr	r6, [r3]
   15724:	ldr	r3, [fp, #4]
   15728:	add	r3, r3, #8
   1572c:	ldr	r3, [r3]
   15730:	ldr	r2, [fp, #4]
   15734:	add	r2, r2, #12
   15738:	ldr	r2, [r2]
   1573c:	ldr	r1, [fp, #4]
   15740:	add	r1, r1, #16
   15744:	ldr	r1, [r1]
   15748:	ldr	r0, [fp, #4]
   1574c:	add	r0, r0, #20
   15750:	ldr	r0, [r0]
   15754:	ldr	ip, [fp, #4]
   15758:	add	ip, ip, #24
   1575c:	ldr	ip, [ip]
   15760:	ldr	lr, [fp, #4]
   15764:	add	lr, lr, #28
   15768:	ldr	lr, [lr]
   1576c:	ldr	r4, [fp, #4]
   15770:	add	r4, r4, #32
   15774:	ldr	r4, [r4]
   15778:	str	r4, [sp, #24]
   1577c:	str	lr, [sp, #20]
   15780:	str	ip, [sp, #16]
   15784:	str	r0, [sp, #12]
   15788:	str	r1, [sp, #8]
   1578c:	str	r2, [sp, #4]
   15790:	str	r3, [sp]
   15794:	mov	r3, r6
   15798:	mov	r2, r5
   1579c:	mov	r1, r7
   157a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157a4:	bl	11108 <fprintf@plt>
   157a8:	b	15858 <__assert_fail@plt+0x4630>
   157ac:	ldr	r0, [pc, #240]	; 158a4 <__assert_fail@plt+0x467c>
   157b0:	bl	110d8 <gettext@plt>
   157b4:	mov	r7, r0
   157b8:	ldr	r3, [fp, #4]
   157bc:	ldr	r5, [r3]
   157c0:	ldr	r3, [fp, #4]
   157c4:	add	r3, r3, #4
   157c8:	ldr	r6, [r3]
   157cc:	ldr	r3, [fp, #4]
   157d0:	add	r3, r3, #8
   157d4:	ldr	r3, [r3]
   157d8:	ldr	r2, [fp, #4]
   157dc:	add	r2, r2, #12
   157e0:	ldr	r2, [r2]
   157e4:	ldr	r1, [fp, #4]
   157e8:	add	r1, r1, #16
   157ec:	ldr	r1, [r1]
   157f0:	ldr	r0, [fp, #4]
   157f4:	add	r0, r0, #20
   157f8:	ldr	r0, [r0]
   157fc:	ldr	ip, [fp, #4]
   15800:	add	ip, ip, #24
   15804:	ldr	ip, [ip]
   15808:	ldr	lr, [fp, #4]
   1580c:	add	lr, lr, #28
   15810:	ldr	lr, [lr]
   15814:	ldr	r4, [fp, #4]
   15818:	add	r4, r4, #32
   1581c:	ldr	r4, [r4]
   15820:	str	r4, [sp, #24]
   15824:	str	lr, [sp, #20]
   15828:	str	ip, [sp, #16]
   1582c:	str	r0, [sp, #12]
   15830:	str	r1, [sp, #8]
   15834:	str	r2, [sp, #4]
   15838:	str	r3, [sp]
   1583c:	mov	r3, r6
   15840:	mov	r2, r5
   15844:	mov	r1, r7
   15848:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1584c:	bl	11108 <fprintf@plt>
   15850:	b	15858 <__assert_fail@plt+0x4630>
   15854:	nop			; (mov r0, r0)
   15858:	nop			; (mov r0, r0)
   1585c:	sub	sp, fp, #20
   15860:	pop	{r4, r5, r6, r7, fp, pc}
   15864:	andeq	r9, r1, r8, ror fp
   15868:	andeq	r9, r1, r4, lsl #23
   1586c:	andeq	r9, r1, ip, lsl #23
   15870:	andeq	r0, r0, r6, ror #15
   15874:	muleq	r1, ip, lr
   15878:	muleq	r1, r0, fp
   1587c:	andeq	r9, r1, ip, lsr ip
   15880:	andeq	r9, r1, r0, ror #24
   15884:	andeq	r9, r1, r0, ror ip
   15888:	andeq	r9, r1, r8, lsl #25
   1588c:	andeq	r9, r1, r4, lsr #25
   15890:	andeq	r9, r1, r4, asr #25
   15894:	andeq	r9, r1, r8, ror #25
   15898:	andeq	r9, r1, r0, lsl sp
   1589c:	andeq	r9, r1, ip, lsr sp
   158a0:	andeq	r9, r1, ip, ror #26
   158a4:	andeq	r9, r1, r0, lsr #27
   158a8:	push	{fp, lr}
   158ac:	add	fp, sp, #4
   158b0:	sub	sp, sp, #32
   158b4:	str	r0, [fp, #-16]
   158b8:	str	r1, [fp, #-20]	; 0xffffffec
   158bc:	str	r2, [fp, #-24]	; 0xffffffe8
   158c0:	str	r3, [fp, #-28]	; 0xffffffe4
   158c4:	mov	r3, #0
   158c8:	str	r3, [fp, #-8]
   158cc:	b	158dc <__assert_fail@plt+0x46b4>
   158d0:	ldr	r3, [fp, #-8]
   158d4:	add	r3, r3, #1
   158d8:	str	r3, [fp, #-8]
   158dc:	ldr	r3, [fp, #-8]
   158e0:	lsl	r3, r3, #2
   158e4:	ldr	r2, [fp, #4]
   158e8:	add	r3, r2, r3
   158ec:	ldr	r3, [r3]
   158f0:	cmp	r3, #0
   158f4:	bne	158d0 <__assert_fail@plt+0x46a8>
   158f8:	ldr	r3, [fp, #-8]
   158fc:	str	r3, [sp, #4]
   15900:	ldr	r3, [fp, #4]
   15904:	str	r3, [sp]
   15908:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1590c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15910:	ldr	r1, [fp, #-20]	; 0xffffffec
   15914:	ldr	r0, [fp, #-16]
   15918:	bl	15338 <__assert_fail@plt+0x4110>
   1591c:	nop			; (mov r0, r0)
   15920:	sub	sp, fp, #4
   15924:	pop	{fp, pc}
   15928:	push	{fp, lr}
   1592c:	add	fp, sp, #4
   15930:	sub	sp, sp, #72	; 0x48
   15934:	str	r0, [fp, #-56]	; 0xffffffc8
   15938:	str	r1, [fp, #-60]	; 0xffffffc4
   1593c:	str	r2, [fp, #-64]	; 0xffffffc0
   15940:	str	r3, [fp, #-68]	; 0xffffffbc
   15944:	mov	r3, #0
   15948:	str	r3, [fp, #-8]
   1594c:	b	1595c <__assert_fail@plt+0x4734>
   15950:	ldr	r3, [fp, #-8]
   15954:	add	r3, r3, #1
   15958:	str	r3, [fp, #-8]
   1595c:	ldr	r3, [fp, #-8]
   15960:	cmp	r3, #9
   15964:	bhi	159a8 <__assert_fail@plt+0x4780>
   15968:	ldr	r3, [fp, #4]
   1596c:	add	r2, r3, #4
   15970:	str	r2, [fp, #4]
   15974:	ldr	r2, [r3]
   15978:	ldr	r3, [fp, #-8]
   1597c:	lsl	r3, r3, #2
   15980:	sub	r1, fp, #4
   15984:	add	r3, r1, r3
   15988:	str	r2, [r3, #-44]	; 0xffffffd4
   1598c:	ldr	r3, [fp, #-8]
   15990:	lsl	r3, r3, #2
   15994:	sub	r2, fp, #4
   15998:	add	r3, r2, r3
   1599c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   159a0:	cmp	r3, #0
   159a4:	bne	15950 <__assert_fail@plt+0x4728>
   159a8:	ldr	r3, [fp, #-8]
   159ac:	str	r3, [sp, #4]
   159b0:	sub	r3, fp, #48	; 0x30
   159b4:	str	r3, [sp]
   159b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   159bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   159c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   159c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   159c8:	bl	15338 <__assert_fail@plt+0x4110>
   159cc:	nop			; (mov r0, r0)
   159d0:	sub	sp, fp, #4
   159d4:	pop	{fp, pc}
   159d8:	push	{r3}		; (str r3, [sp, #-4]!)
   159dc:	push	{fp, lr}
   159e0:	add	fp, sp, #4
   159e4:	sub	sp, sp, #36	; 0x24
   159e8:	str	r0, [fp, #-20]	; 0xffffffec
   159ec:	str	r1, [fp, #-24]	; 0xffffffe8
   159f0:	str	r2, [fp, #-28]	; 0xffffffe4
   159f4:	add	r3, fp, #8
   159f8:	str	r3, [fp, #-12]
   159fc:	ldr	r3, [fp, #-12]
   15a00:	str	r3, [sp]
   15a04:	ldr	r3, [fp, #4]
   15a08:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15a0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15a10:	ldr	r0, [fp, #-20]	; 0xffffffec
   15a14:	bl	15928 <__assert_fail@plt+0x4700>
   15a18:	nop			; (mov r0, r0)
   15a1c:	sub	sp, fp, #4
   15a20:	pop	{fp, lr}
   15a24:	add	sp, sp, #4
   15a28:	bx	lr
   15a2c:	push	{fp, lr}
   15a30:	add	fp, sp, #4
   15a34:	ldr	r3, [pc, #96]	; 15a9c <__assert_fail@plt+0x4874>
   15a38:	ldr	r3, [r3]
   15a3c:	mov	r1, r3
   15a40:	mov	r0, #10
   15a44:	bl	10fc4 <fputc_unlocked@plt>
   15a48:	ldr	r0, [pc, #80]	; 15aa0 <__assert_fail@plt+0x4878>
   15a4c:	bl	110d8 <gettext@plt>
   15a50:	mov	r3, r0
   15a54:	ldr	r1, [pc, #72]	; 15aa4 <__assert_fail@plt+0x487c>
   15a58:	mov	r0, r3
   15a5c:	bl	10f64 <printf@plt>
   15a60:	ldr	r0, [pc, #64]	; 15aa8 <__assert_fail@plt+0x4880>
   15a64:	bl	110d8 <gettext@plt>
   15a68:	mov	r3, r0
   15a6c:	ldr	r2, [pc, #56]	; 15aac <__assert_fail@plt+0x4884>
   15a70:	ldr	r1, [pc, #56]	; 15ab0 <__assert_fail@plt+0x4888>
   15a74:	mov	r0, r3
   15a78:	bl	10f64 <printf@plt>
   15a7c:	ldr	r0, [pc, #48]	; 15ab4 <__assert_fail@plt+0x488c>
   15a80:	bl	110d8 <gettext@plt>
   15a84:	mov	r3, r0
   15a88:	ldr	r1, [pc, #40]	; 15ab8 <__assert_fail@plt+0x4890>
   15a8c:	mov	r0, r3
   15a90:	bl	10f64 <printf@plt>
   15a94:	nop			; (mov r0, r0)
   15a98:	pop	{fp, pc}
   15a9c:	andeq	fp, r2, ip, lsl #3
   15aa0:	ldrdeq	r9, [r1], -ip
   15aa4:	strdeq	r9, [r1], -r0
   15aa8:	andeq	r9, r1, r8, lsl #28
   15aac:	andeq	r9, r1, ip, lsl lr
   15ab0:	andeq	r9, r1, r4, asr #28
   15ab4:	andeq	r9, r1, r4, asr lr
   15ab8:	andeq	r9, r1, ip, ror lr
   15abc:	push	{fp, lr}
   15ac0:	add	fp, sp, #4
   15ac4:	sub	sp, sp, #16
   15ac8:	str	r0, [fp, #-8]
   15acc:	str	r1, [fp, #-12]
   15ad0:	str	r2, [fp, #-16]
   15ad4:	ldr	r2, [fp, #-16]
   15ad8:	ldr	r1, [fp, #-12]
   15adc:	ldr	r0, [fp, #-8]
   15ae0:	bl	15c4c <__assert_fail@plt+0x4a24>
   15ae4:	mov	r3, r0
   15ae8:	mov	r0, r3
   15aec:	sub	sp, fp, #4
   15af0:	pop	{fp, pc}
   15af4:	push	{fp, lr}
   15af8:	add	fp, sp, #4
   15afc:	sub	sp, sp, #8
   15b00:	str	r0, [fp, #-8]
   15b04:	ldr	r3, [fp, #-8]
   15b08:	cmp	r3, #0
   15b0c:	bne	15b14 <__assert_fail@plt+0x48ec>
   15b10:	bl	16640 <__assert_fail@plt+0x5418>
   15b14:	ldr	r3, [fp, #-8]
   15b18:	mov	r0, r3
   15b1c:	sub	sp, fp, #4
   15b20:	pop	{fp, pc}
   15b24:	push	{fp, lr}
   15b28:	add	fp, sp, #4
   15b2c:	sub	sp, sp, #8
   15b30:	str	r0, [fp, #-8]
   15b34:	ldr	r0, [fp, #-8]
   15b38:	bl	17750 <__assert_fail@plt+0x6528>
   15b3c:	mov	r3, r0
   15b40:	mov	r0, r3
   15b44:	bl	15af4 <__assert_fail@plt+0x48cc>
   15b48:	mov	r3, r0
   15b4c:	mov	r0, r3
   15b50:	sub	sp, fp, #4
   15b54:	pop	{fp, pc}
   15b58:	push	{fp, lr}
   15b5c:	add	fp, sp, #4
   15b60:	sub	sp, sp, #8
   15b64:	str	r0, [fp, #-8]
   15b68:	ldr	r0, [fp, #-8]
   15b6c:	bl	17ce0 <__assert_fail@plt+0x6ab8>
   15b70:	mov	r3, r0
   15b74:	mov	r0, r3
   15b78:	bl	15af4 <__assert_fail@plt+0x48cc>
   15b7c:	mov	r3, r0
   15b80:	mov	r0, r3
   15b84:	sub	sp, fp, #4
   15b88:	pop	{fp, pc}
   15b8c:	push	{fp, lr}
   15b90:	add	fp, sp, #4
   15b94:	sub	sp, sp, #8
   15b98:	str	r0, [fp, #-8]
   15b9c:	ldr	r0, [fp, #-8]
   15ba0:	bl	15b24 <__assert_fail@plt+0x48fc>
   15ba4:	mov	r3, r0
   15ba8:	mov	r0, r3
   15bac:	sub	sp, fp, #4
   15bb0:	pop	{fp, pc}
   15bb4:	push	{fp, lr}
   15bb8:	add	fp, sp, #4
   15bbc:	sub	sp, sp, #16
   15bc0:	str	r0, [fp, #-16]
   15bc4:	str	r1, [fp, #-20]	; 0xffffffec
   15bc8:	ldr	r1, [fp, #-20]	; 0xffffffec
   15bcc:	ldr	r0, [fp, #-16]
   15bd0:	bl	177f8 <__assert_fail@plt+0x65d0>
   15bd4:	str	r0, [fp, #-8]
   15bd8:	ldr	r3, [fp, #-8]
   15bdc:	cmp	r3, #0
   15be0:	bne	15c00 <__assert_fail@plt+0x49d8>
   15be4:	ldr	r3, [fp, #-16]
   15be8:	cmp	r3, #0
   15bec:	beq	15bfc <__assert_fail@plt+0x49d4>
   15bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bf4:	cmp	r3, #0
   15bf8:	beq	15c00 <__assert_fail@plt+0x49d8>
   15bfc:	bl	16640 <__assert_fail@plt+0x5418>
   15c00:	ldr	r3, [fp, #-8]
   15c04:	mov	r0, r3
   15c08:	sub	sp, fp, #4
   15c0c:	pop	{fp, pc}
   15c10:	push	{fp, lr}
   15c14:	add	fp, sp, #4
   15c18:	sub	sp, sp, #8
   15c1c:	str	r0, [fp, #-8]
   15c20:	str	r1, [fp, #-12]
   15c24:	ldr	r1, [fp, #-12]
   15c28:	ldr	r0, [fp, #-8]
   15c2c:	bl	17d0c <__assert_fail@plt+0x6ae4>
   15c30:	mov	r3, r0
   15c34:	mov	r0, r3
   15c38:	bl	15af4 <__assert_fail@plt+0x48cc>
   15c3c:	mov	r3, r0
   15c40:	mov	r0, r3
   15c44:	sub	sp, fp, #4
   15c48:	pop	{fp, pc}
   15c4c:	push	{fp, lr}
   15c50:	add	fp, sp, #4
   15c54:	sub	sp, sp, #24
   15c58:	str	r0, [fp, #-16]
   15c5c:	str	r1, [fp, #-20]	; 0xffffffec
   15c60:	str	r2, [fp, #-24]	; 0xffffffe8
   15c64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c68:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c6c:	ldr	r0, [fp, #-16]
   15c70:	bl	183c4 <__assert_fail@plt+0x719c>
   15c74:	str	r0, [fp, #-8]
   15c78:	ldr	r3, [fp, #-8]
   15c7c:	cmp	r3, #0
   15c80:	bne	15cac <__assert_fail@plt+0x4a84>
   15c84:	ldr	r3, [fp, #-16]
   15c88:	cmp	r3, #0
   15c8c:	beq	15ca8 <__assert_fail@plt+0x4a80>
   15c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c94:	cmp	r3, #0
   15c98:	beq	15cac <__assert_fail@plt+0x4a84>
   15c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ca0:	cmp	r3, #0
   15ca4:	beq	15cac <__assert_fail@plt+0x4a84>
   15ca8:	bl	16640 <__assert_fail@plt+0x5418>
   15cac:	ldr	r3, [fp, #-8]
   15cb0:	mov	r0, r3
   15cb4:	sub	sp, fp, #4
   15cb8:	pop	{fp, pc}
   15cbc:	push	{fp, lr}
   15cc0:	add	fp, sp, #4
   15cc4:	sub	sp, sp, #16
   15cc8:	str	r0, [fp, #-8]
   15ccc:	str	r1, [fp, #-12]
   15cd0:	str	r2, [fp, #-16]
   15cd4:	ldr	r2, [fp, #-16]
   15cd8:	ldr	r1, [fp, #-12]
   15cdc:	ldr	r0, [fp, #-8]
   15ce0:	bl	17d94 <__assert_fail@plt+0x6b6c>
   15ce4:	mov	r3, r0
   15ce8:	mov	r0, r3
   15cec:	bl	15af4 <__assert_fail@plt+0x48cc>
   15cf0:	mov	r3, r0
   15cf4:	mov	r0, r3
   15cf8:	sub	sp, fp, #4
   15cfc:	pop	{fp, pc}
   15d00:	push	{fp, lr}
   15d04:	add	fp, sp, #4
   15d08:	sub	sp, sp, #8
   15d0c:	str	r0, [fp, #-8]
   15d10:	str	r1, [fp, #-12]
   15d14:	ldr	r2, [fp, #-12]
   15d18:	ldr	r1, [fp, #-8]
   15d1c:	mov	r0, #0
   15d20:	bl	15c4c <__assert_fail@plt+0x4a24>
   15d24:	mov	r3, r0
   15d28:	mov	r0, r3
   15d2c:	sub	sp, fp, #4
   15d30:	pop	{fp, pc}
   15d34:	push	{fp, lr}
   15d38:	add	fp, sp, #4
   15d3c:	sub	sp, sp, #8
   15d40:	str	r0, [fp, #-8]
   15d44:	str	r1, [fp, #-12]
   15d48:	ldr	r2, [fp, #-12]
   15d4c:	ldr	r1, [fp, #-8]
   15d50:	mov	r0, #0
   15d54:	bl	15cbc <__assert_fail@plt+0x4a94>
   15d58:	mov	r3, r0
   15d5c:	mov	r0, r3
   15d60:	sub	sp, fp, #4
   15d64:	pop	{fp, pc}
   15d68:	push	{fp, lr}
   15d6c:	add	fp, sp, #4
   15d70:	sub	sp, sp, #8
   15d74:	str	r0, [fp, #-8]
   15d78:	str	r1, [fp, #-12]
   15d7c:	mov	r2, #1
   15d80:	ldr	r1, [fp, #-12]
   15d84:	ldr	r0, [fp, #-8]
   15d88:	bl	15d9c <__assert_fail@plt+0x4b74>
   15d8c:	mov	r3, r0
   15d90:	mov	r0, r3
   15d94:	sub	sp, fp, #4
   15d98:	pop	{fp, pc}
   15d9c:	push	{fp, lr}
   15da0:	add	fp, sp, #4
   15da4:	sub	sp, sp, #24
   15da8:	str	r0, [fp, #-16]
   15dac:	str	r1, [fp, #-20]	; 0xffffffec
   15db0:	str	r2, [fp, #-24]	; 0xffffffe8
   15db4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15db8:	ldr	r3, [r3]
   15dbc:	str	r3, [fp, #-8]
   15dc0:	ldr	r3, [fp, #-16]
   15dc4:	cmp	r3, #0
   15dc8:	bne	15e14 <__assert_fail@plt+0x4bec>
   15dcc:	ldr	r3, [fp, #-8]
   15dd0:	cmp	r3, #0
   15dd4:	bne	15e78 <__assert_fail@plt+0x4c50>
   15dd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15ddc:	mov	r0, #64	; 0x40
   15de0:	bl	18d7c <__assert_fail@plt+0x7b54>
   15de4:	mov	r3, r0
   15de8:	str	r3, [fp, #-8]
   15dec:	ldr	r3, [fp, #-8]
   15df0:	cmp	r3, #0
   15df4:	moveq	r3, #1
   15df8:	movne	r3, #0
   15dfc:	uxtb	r3, r3
   15e00:	mov	r2, r3
   15e04:	ldr	r3, [fp, #-8]
   15e08:	add	r3, r2, r3
   15e0c:	str	r3, [fp, #-8]
   15e10:	b	15e78 <__assert_fail@plt+0x4c50>
   15e14:	ldr	r3, [fp, #-8]
   15e18:	lsr	r3, r3, #1
   15e1c:	add	r3, r3, #1
   15e20:	mvn	r2, r3
   15e24:	ldr	r3, [fp, #-8]
   15e28:	cmp	r2, r3
   15e2c:	bcs	15e50 <__assert_fail@plt+0x4c28>
   15e30:	ldr	r3, [fp, #-8]
   15e34:	lsr	r2, r3, #1
   15e38:	ldr	r3, [fp, #-8]
   15e3c:	add	r3, r2, r3
   15e40:	add	r3, r3, #1
   15e44:	str	r3, [fp, #-8]
   15e48:	mov	r3, #1
   15e4c:	b	15e6c <__assert_fail@plt+0x4c44>
   15e50:	ldr	r3, [fp, #-8]
   15e54:	lsr	r2, r3, #1
   15e58:	ldr	r3, [fp, #-8]
   15e5c:	add	r3, r2, r3
   15e60:	add	r3, r3, #1
   15e64:	str	r3, [fp, #-8]
   15e68:	mov	r3, #0
   15e6c:	cmp	r3, #0
   15e70:	beq	15e78 <__assert_fail@plt+0x4c50>
   15e74:	bl	16640 <__assert_fail@plt+0x5418>
   15e78:	ldr	r3, [fp, #-8]
   15e7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15e80:	mov	r1, r3
   15e84:	ldr	r0, [fp, #-16]
   15e88:	bl	15c4c <__assert_fail@plt+0x4a24>
   15e8c:	str	r0, [fp, #-16]
   15e90:	ldr	r2, [fp, #-8]
   15e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e98:	str	r2, [r3]
   15e9c:	ldr	r3, [fp, #-16]
   15ea0:	mov	r0, r3
   15ea4:	sub	sp, fp, #4
   15ea8:	pop	{fp, pc}
   15eac:	push	{fp, lr}
   15eb0:	add	fp, sp, #4
   15eb4:	sub	sp, sp, #32
   15eb8:	str	r0, [fp, #-24]	; 0xffffffe8
   15ebc:	str	r1, [fp, #-28]	; 0xffffffe4
   15ec0:	str	r2, [fp, #-32]	; 0xffffffe0
   15ec4:	str	r3, [fp, #-36]	; 0xffffffdc
   15ec8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ecc:	ldr	r3, [r3]
   15ed0:	str	r3, [fp, #-8]
   15ed4:	ldr	r3, [fp, #-8]
   15ed8:	asr	r3, r3, #1
   15edc:	cmp	r3, #0
   15ee0:	bge	15f08 <__assert_fail@plt+0x4ce0>
   15ee4:	ldr	r3, [fp, #-8]
   15ee8:	asr	r3, r3, #1
   15eec:	rsb	r2, r3, #-2147483648	; 0x80000000
   15ef0:	ldr	r3, [fp, #-8]
   15ef4:	cmp	r2, r3
   15ef8:	movgt	r3, #1
   15efc:	movle	r3, #0
   15f00:	uxtb	r3, r3
   15f04:	b	15f5c <__assert_fail@plt+0x4d34>
   15f08:	ldr	r3, [fp, #-8]
   15f0c:	cmp	r3, #0
   15f10:	bge	15f38 <__assert_fail@plt+0x4d10>
   15f14:	ldr	r3, [fp, #-8]
   15f18:	asr	r2, r3, #1
   15f1c:	ldr	r3, [fp, #-8]
   15f20:	rsb	r3, r3, #-2147483648	; 0x80000000
   15f24:	cmp	r2, r3
   15f28:	movlt	r3, #1
   15f2c:	movge	r3, #0
   15f30:	uxtb	r3, r3
   15f34:	b	15f5c <__assert_fail@plt+0x4d34>
   15f38:	ldr	r3, [fp, #-8]
   15f3c:	asr	r2, r3, #1
   15f40:	mvn	r3, #-2147483648	; 0x80000000
   15f44:	sub	r3, r3, r2
   15f48:	ldr	r2, [fp, #-8]
   15f4c:	cmp	r3, r2
   15f50:	movlt	r3, #1
   15f54:	movge	r3, #0
   15f58:	uxtb	r3, r3
   15f5c:	cmp	r3, #0
   15f60:	beq	15f84 <__assert_fail@plt+0x4d5c>
   15f64:	ldr	r3, [fp, #-8]
   15f68:	asr	r3, r3, #1
   15f6c:	mov	r2, r3
   15f70:	ldr	r3, [fp, #-8]
   15f74:	add	r3, r2, r3
   15f78:	str	r3, [fp, #-16]
   15f7c:	mov	r3, #1
   15f80:	b	15fa0 <__assert_fail@plt+0x4d78>
   15f84:	ldr	r3, [fp, #-8]
   15f88:	asr	r3, r3, #1
   15f8c:	mov	r2, r3
   15f90:	ldr	r3, [fp, #-8]
   15f94:	add	r3, r2, r3
   15f98:	str	r3, [fp, #-16]
   15f9c:	mov	r3, #0
   15fa0:	cmp	r3, #0
   15fa4:	beq	15fb0 <__assert_fail@plt+0x4d88>
   15fa8:	mvn	r3, #-2147483648	; 0x80000000
   15fac:	str	r3, [fp, #-16]
   15fb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fb4:	cmp	r3, #0
   15fb8:	blt	15fd4 <__assert_fail@plt+0x4dac>
   15fbc:	ldr	r3, [fp, #-16]
   15fc0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15fc4:	cmp	r2, r3
   15fc8:	bge	15fd4 <__assert_fail@plt+0x4dac>
   15fcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fd0:	str	r3, [fp, #-16]
   15fd4:	ldr	r3, [fp, #4]
   15fd8:	cmp	r3, #0
   15fdc:	bge	1606c <__assert_fail@plt+0x4e44>
   15fe0:	ldr	r3, [fp, #-16]
   15fe4:	cmp	r3, #0
   15fe8:	bge	16018 <__assert_fail@plt+0x4df0>
   15fec:	ldr	r1, [fp, #4]
   15ff0:	mvn	r0, #-2147483648	; 0x80000000
   15ff4:	bl	18f88 <__assert_fail@plt+0x7d60>
   15ff8:	mov	r3, r0
   15ffc:	mov	r2, r3
   16000:	ldr	r3, [fp, #-16]
   16004:	cmp	r2, r3
   16008:	movgt	r3, #1
   1600c:	movle	r3, #0
   16010:	uxtb	r3, r3
   16014:	b	1610c <__assert_fail@plt+0x4ee4>
   16018:	ldr	r3, [fp, #4]
   1601c:	cmn	r3, #1
   16020:	bne	16040 <__assert_fail@plt+0x4e18>
   16024:	ldr	r3, [fp, #-16]
   16028:	add	r3, r3, #-2147483648	; 0x80000000
   1602c:	cmp	r3, #0
   16030:	movgt	r3, #1
   16034:	movle	r3, #0
   16038:	uxtb	r3, r3
   1603c:	b	1610c <__assert_fail@plt+0x4ee4>
   16040:	ldr	r1, [fp, #4]
   16044:	mov	r0, #-2147483648	; 0x80000000
   16048:	bl	18f88 <__assert_fail@plt+0x7d60>
   1604c:	mov	r3, r0
   16050:	mov	r2, r3
   16054:	ldr	r3, [fp, #-16]
   16058:	cmp	r2, r3
   1605c:	movlt	r3, #1
   16060:	movge	r3, #0
   16064:	uxtb	r3, r3
   16068:	b	1610c <__assert_fail@plt+0x4ee4>
   1606c:	ldr	r3, [fp, #4]
   16070:	cmp	r3, #0
   16074:	beq	16108 <__assert_fail@plt+0x4ee0>
   16078:	ldr	r3, [fp, #-16]
   1607c:	cmp	r3, #0
   16080:	bge	160dc <__assert_fail@plt+0x4eb4>
   16084:	ldr	r3, [fp, #-16]
   16088:	cmn	r3, #1
   1608c:	bne	160ac <__assert_fail@plt+0x4e84>
   16090:	ldr	r3, [fp, #4]
   16094:	add	r3, r3, #-2147483648	; 0x80000000
   16098:	cmp	r3, #0
   1609c:	movgt	r3, #1
   160a0:	movle	r3, #0
   160a4:	uxtb	r3, r3
   160a8:	b	1610c <__assert_fail@plt+0x4ee4>
   160ac:	ldr	r3, [fp, #-16]
   160b0:	mov	r1, r3
   160b4:	mov	r0, #-2147483648	; 0x80000000
   160b8:	bl	18f88 <__assert_fail@plt+0x7d60>
   160bc:	mov	r3, r0
   160c0:	mov	r2, r3
   160c4:	ldr	r3, [fp, #4]
   160c8:	cmp	r2, r3
   160cc:	movlt	r3, #1
   160d0:	movge	r3, #0
   160d4:	uxtb	r3, r3
   160d8:	b	1610c <__assert_fail@plt+0x4ee4>
   160dc:	ldr	r1, [fp, #4]
   160e0:	mvn	r0, #-2147483648	; 0x80000000
   160e4:	bl	18f88 <__assert_fail@plt+0x7d60>
   160e8:	mov	r3, r0
   160ec:	mov	r2, r3
   160f0:	ldr	r3, [fp, #-16]
   160f4:	cmp	r2, r3
   160f8:	movlt	r3, #1
   160fc:	movge	r3, #0
   16100:	uxtb	r3, r3
   16104:	b	1610c <__assert_fail@plt+0x4ee4>
   16108:	mov	r3, #0
   1610c:	cmp	r3, #0
   16110:	beq	16130 <__assert_fail@plt+0x4f08>
   16114:	ldr	r3, [fp, #-16]
   16118:	mov	r2, r3
   1611c:	ldr	r3, [fp, #4]
   16120:	mul	r3, r3, r2
   16124:	str	r3, [fp, #-20]	; 0xffffffec
   16128:	mov	r3, #1
   1612c:	b	16148 <__assert_fail@plt+0x4f20>
   16130:	ldr	r3, [fp, #-16]
   16134:	mov	r2, r3
   16138:	ldr	r3, [fp, #4]
   1613c:	mul	r3, r3, r2
   16140:	str	r3, [fp, #-20]	; 0xffffffec
   16144:	mov	r3, #0
   16148:	cmp	r3, #0
   1614c:	beq	16158 <__assert_fail@plt+0x4f30>
   16150:	mvn	r3, #-2147483648	; 0x80000000
   16154:	b	16170 <__assert_fail@plt+0x4f48>
   16158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1615c:	cmp	r3, #63	; 0x3f
   16160:	bgt	1616c <__assert_fail@plt+0x4f44>
   16164:	mov	r3, #64	; 0x40
   16168:	b	16170 <__assert_fail@plt+0x4f48>
   1616c:	mov	r3, #0
   16170:	str	r3, [fp, #-12]
   16174:	ldr	r3, [fp, #-12]
   16178:	cmp	r3, #0
   1617c:	beq	161b8 <__assert_fail@plt+0x4f90>
   16180:	ldr	r1, [fp, #4]
   16184:	ldr	r0, [fp, #-12]
   16188:	bl	18f88 <__assert_fail@plt+0x7d60>
   1618c:	mov	r3, r0
   16190:	str	r3, [fp, #-16]
   16194:	ldr	r3, [fp, #-12]
   16198:	ldr	r1, [fp, #4]
   1619c:	mov	r0, r3
   161a0:	bl	191a8 <__assert_fail@plt+0x7f80>
   161a4:	mov	r3, r1
   161a8:	mov	r2, r3
   161ac:	ldr	r3, [fp, #-12]
   161b0:	sub	r3, r3, r2
   161b4:	str	r3, [fp, #-20]	; 0xffffffec
   161b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   161bc:	cmp	r3, #0
   161c0:	bne	161d0 <__assert_fail@plt+0x4fa8>
   161c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   161c8:	mov	r2, #0
   161cc:	str	r2, [r3]
   161d0:	ldr	r2, [fp, #-16]
   161d4:	ldr	r3, [fp, #-8]
   161d8:	sub	r2, r2, r3
   161dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161e0:	cmp	r2, r3
   161e4:	bge	1641c <__assert_fail@plt+0x51f4>
   161e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161ec:	cmp	r3, #0
   161f0:	bge	16214 <__assert_fail@plt+0x4fec>
   161f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161f8:	rsb	r2, r3, #-2147483648	; 0x80000000
   161fc:	ldr	r3, [fp, #-8]
   16200:	cmp	r2, r3
   16204:	movgt	r3, #1
   16208:	movle	r3, #0
   1620c:	uxtb	r3, r3
   16210:	b	16260 <__assert_fail@plt+0x5038>
   16214:	ldr	r3, [fp, #-8]
   16218:	cmp	r3, #0
   1621c:	bge	16240 <__assert_fail@plt+0x5018>
   16220:	ldr	r3, [fp, #-8]
   16224:	rsb	r2, r3, #-2147483648	; 0x80000000
   16228:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1622c:	cmp	r2, r3
   16230:	movgt	r3, #1
   16234:	movle	r3, #0
   16238:	uxtb	r3, r3
   1623c:	b	16260 <__assert_fail@plt+0x5038>
   16240:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16244:	mvn	r3, #-2147483648	; 0x80000000
   16248:	sub	r3, r3, r2
   1624c:	ldr	r2, [fp, #-8]
   16250:	cmp	r3, r2
   16254:	movlt	r3, #1
   16258:	movge	r3, #0
   1625c:	uxtb	r3, r3
   16260:	cmp	r3, #0
   16264:	beq	1627c <__assert_fail@plt+0x5054>
   16268:	ldr	r2, [fp, #-8]
   1626c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16270:	add	r3, r2, r3
   16274:	str	r3, [fp, #-16]
   16278:	b	16418 <__assert_fail@plt+0x51f0>
   1627c:	ldr	r2, [fp, #-8]
   16280:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16284:	add	r3, r2, r3
   16288:	str	r3, [fp, #-16]
   1628c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16290:	cmp	r3, #0
   16294:	blt	162a8 <__assert_fail@plt+0x5080>
   16298:	ldr	r3, [fp, #-16]
   1629c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   162a0:	cmp	r2, r3
   162a4:	blt	16418 <__assert_fail@plt+0x51f0>
   162a8:	ldr	r3, [fp, #4]
   162ac:	cmp	r3, #0
   162b0:	bge	16340 <__assert_fail@plt+0x5118>
   162b4:	ldr	r3, [fp, #-16]
   162b8:	cmp	r3, #0
   162bc:	bge	162ec <__assert_fail@plt+0x50c4>
   162c0:	ldr	r1, [fp, #4]
   162c4:	mvn	r0, #-2147483648	; 0x80000000
   162c8:	bl	18f88 <__assert_fail@plt+0x7d60>
   162cc:	mov	r3, r0
   162d0:	mov	r2, r3
   162d4:	ldr	r3, [fp, #-16]
   162d8:	cmp	r2, r3
   162dc:	movgt	r3, #1
   162e0:	movle	r3, #0
   162e4:	uxtb	r3, r3
   162e8:	b	163e0 <__assert_fail@plt+0x51b8>
   162ec:	ldr	r3, [fp, #4]
   162f0:	cmn	r3, #1
   162f4:	bne	16314 <__assert_fail@plt+0x50ec>
   162f8:	ldr	r3, [fp, #-16]
   162fc:	add	r3, r3, #-2147483648	; 0x80000000
   16300:	cmp	r3, #0
   16304:	movgt	r3, #1
   16308:	movle	r3, #0
   1630c:	uxtb	r3, r3
   16310:	b	163e0 <__assert_fail@plt+0x51b8>
   16314:	ldr	r1, [fp, #4]
   16318:	mov	r0, #-2147483648	; 0x80000000
   1631c:	bl	18f88 <__assert_fail@plt+0x7d60>
   16320:	mov	r3, r0
   16324:	mov	r2, r3
   16328:	ldr	r3, [fp, #-16]
   1632c:	cmp	r2, r3
   16330:	movlt	r3, #1
   16334:	movge	r3, #0
   16338:	uxtb	r3, r3
   1633c:	b	163e0 <__assert_fail@plt+0x51b8>
   16340:	ldr	r3, [fp, #4]
   16344:	cmp	r3, #0
   16348:	beq	163dc <__assert_fail@plt+0x51b4>
   1634c:	ldr	r3, [fp, #-16]
   16350:	cmp	r3, #0
   16354:	bge	163b0 <__assert_fail@plt+0x5188>
   16358:	ldr	r3, [fp, #-16]
   1635c:	cmn	r3, #1
   16360:	bne	16380 <__assert_fail@plt+0x5158>
   16364:	ldr	r3, [fp, #4]
   16368:	add	r3, r3, #-2147483648	; 0x80000000
   1636c:	cmp	r3, #0
   16370:	movgt	r3, #1
   16374:	movle	r3, #0
   16378:	uxtb	r3, r3
   1637c:	b	163e0 <__assert_fail@plt+0x51b8>
   16380:	ldr	r3, [fp, #-16]
   16384:	mov	r1, r3
   16388:	mov	r0, #-2147483648	; 0x80000000
   1638c:	bl	18f88 <__assert_fail@plt+0x7d60>
   16390:	mov	r3, r0
   16394:	mov	r2, r3
   16398:	ldr	r3, [fp, #4]
   1639c:	cmp	r2, r3
   163a0:	movlt	r3, #1
   163a4:	movge	r3, #0
   163a8:	uxtb	r3, r3
   163ac:	b	163e0 <__assert_fail@plt+0x51b8>
   163b0:	ldr	r1, [fp, #4]
   163b4:	mvn	r0, #-2147483648	; 0x80000000
   163b8:	bl	18f88 <__assert_fail@plt+0x7d60>
   163bc:	mov	r3, r0
   163c0:	mov	r2, r3
   163c4:	ldr	r3, [fp, #-16]
   163c8:	cmp	r2, r3
   163cc:	movlt	r3, #1
   163d0:	movge	r3, #0
   163d4:	uxtb	r3, r3
   163d8:	b	163e0 <__assert_fail@plt+0x51b8>
   163dc:	mov	r3, #0
   163e0:	cmp	r3, #0
   163e4:	beq	16400 <__assert_fail@plt+0x51d8>
   163e8:	ldr	r3, [fp, #-16]
   163ec:	mov	r2, r3
   163f0:	ldr	r3, [fp, #4]
   163f4:	mul	r3, r3, r2
   163f8:	str	r3, [fp, #-20]	; 0xffffffec
   163fc:	b	16418 <__assert_fail@plt+0x51f0>
   16400:	ldr	r3, [fp, #-16]
   16404:	mov	r2, r3
   16408:	ldr	r3, [fp, #4]
   1640c:	mul	r3, r3, r2
   16410:	str	r3, [fp, #-20]	; 0xffffffec
   16414:	b	1641c <__assert_fail@plt+0x51f4>
   16418:	bl	16640 <__assert_fail@plt+0x5418>
   1641c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16420:	mov	r1, r3
   16424:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16428:	bl	15bb4 <__assert_fail@plt+0x498c>
   1642c:	str	r0, [fp, #-24]	; 0xffffffe8
   16430:	ldr	r2, [fp, #-16]
   16434:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16438:	str	r2, [r3]
   1643c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16440:	mov	r0, r3
   16444:	sub	sp, fp, #4
   16448:	pop	{fp, pc}
   1644c:	push	{fp, lr}
   16450:	add	fp, sp, #4
   16454:	sub	sp, sp, #8
   16458:	str	r0, [fp, #-8]
   1645c:	mov	r1, #1
   16460:	ldr	r0, [fp, #-8]
   16464:	bl	164a4 <__assert_fail@plt+0x527c>
   16468:	mov	r3, r0
   1646c:	mov	r0, r3
   16470:	sub	sp, fp, #4
   16474:	pop	{fp, pc}
   16478:	push	{fp, lr}
   1647c:	add	fp, sp, #4
   16480:	sub	sp, sp, #8
   16484:	str	r0, [fp, #-8]
   16488:	mov	r1, #1
   1648c:	ldr	r0, [fp, #-8]
   16490:	bl	164e0 <__assert_fail@plt+0x52b8>
   16494:	mov	r3, r0
   16498:	mov	r0, r3
   1649c:	sub	sp, fp, #4
   164a0:	pop	{fp, pc}
   164a4:	push	{fp, lr}
   164a8:	add	fp, sp, #4
   164ac:	sub	sp, sp, #8
   164b0:	str	r0, [fp, #-8]
   164b4:	str	r1, [fp, #-12]
   164b8:	ldr	r1, [fp, #-12]
   164bc:	ldr	r0, [fp, #-8]
   164c0:	bl	1768c <__assert_fail@plt+0x6464>
   164c4:	mov	r3, r0
   164c8:	mov	r0, r3
   164cc:	bl	15af4 <__assert_fail@plt+0x48cc>
   164d0:	mov	r3, r0
   164d4:	mov	r0, r3
   164d8:	sub	sp, fp, #4
   164dc:	pop	{fp, pc}
   164e0:	push	{fp, lr}
   164e4:	add	fp, sp, #4
   164e8:	sub	sp, sp, #8
   164ec:	str	r0, [fp, #-8]
   164f0:	str	r1, [fp, #-12]
   164f4:	ldr	r1, [fp, #-12]
   164f8:	ldr	r0, [fp, #-8]
   164fc:	bl	17d5c <__assert_fail@plt+0x6b34>
   16500:	mov	r3, r0
   16504:	mov	r0, r3
   16508:	bl	15af4 <__assert_fail@plt+0x48cc>
   1650c:	mov	r3, r0
   16510:	mov	r0, r3
   16514:	sub	sp, fp, #4
   16518:	pop	{fp, pc}
   1651c:	push	{fp, lr}
   16520:	add	fp, sp, #4
   16524:	sub	sp, sp, #8
   16528:	str	r0, [fp, #-8]
   1652c:	str	r1, [fp, #-12]
   16530:	ldr	r0, [fp, #-12]
   16534:	bl	15b24 <__assert_fail@plt+0x48fc>
   16538:	mov	r3, r0
   1653c:	ldr	r2, [fp, #-12]
   16540:	ldr	r1, [fp, #-8]
   16544:	mov	r0, r3
   16548:	bl	10f94 <memcpy@plt>
   1654c:	mov	r3, r0
   16550:	mov	r0, r3
   16554:	sub	sp, fp, #4
   16558:	pop	{fp, pc}
   1655c:	push	{fp, lr}
   16560:	add	fp, sp, #4
   16564:	sub	sp, sp, #8
   16568:	str	r0, [fp, #-8]
   1656c:	str	r1, [fp, #-12]
   16570:	ldr	r0, [fp, #-12]
   16574:	bl	15b58 <__assert_fail@plt+0x4930>
   16578:	mov	r3, r0
   1657c:	mov	r0, r3
   16580:	ldr	r3, [fp, #-12]
   16584:	mov	r2, r3
   16588:	ldr	r1, [fp, #-8]
   1658c:	bl	10f94 <memcpy@plt>
   16590:	mov	r3, r0
   16594:	mov	r0, r3
   16598:	sub	sp, fp, #4
   1659c:	pop	{fp, pc}
   165a0:	push	{fp, lr}
   165a4:	add	fp, sp, #4
   165a8:	sub	sp, sp, #16
   165ac:	str	r0, [fp, #-16]
   165b0:	str	r1, [fp, #-20]	; 0xffffffec
   165b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   165b8:	add	r3, r3, #1
   165bc:	mov	r0, r3
   165c0:	bl	15b58 <__assert_fail@plt+0x4930>
   165c4:	mov	r3, r0
   165c8:	str	r3, [fp, #-8]
   165cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   165d0:	ldr	r2, [fp, #-8]
   165d4:	add	r3, r2, r3
   165d8:	mov	r2, #0
   165dc:	strb	r2, [r3]
   165e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165e4:	mov	r2, r3
   165e8:	ldr	r1, [fp, #-16]
   165ec:	ldr	r0, [fp, #-8]
   165f0:	bl	10f94 <memcpy@plt>
   165f4:	mov	r3, r0
   165f8:	mov	r0, r3
   165fc:	sub	sp, fp, #4
   16600:	pop	{fp, pc}
   16604:	push	{fp, lr}
   16608:	add	fp, sp, #4
   1660c:	sub	sp, sp, #8
   16610:	str	r0, [fp, #-8]
   16614:	ldr	r0, [fp, #-8]
   16618:	bl	110f0 <strlen@plt>
   1661c:	mov	r3, r0
   16620:	add	r3, r3, #1
   16624:	mov	r1, r3
   16628:	ldr	r0, [fp, #-8]
   1662c:	bl	1651c <__assert_fail@plt+0x52f4>
   16630:	mov	r3, r0
   16634:	mov	r0, r3
   16638:	sub	sp, fp, #4
   1663c:	pop	{fp, pc}
   16640:	push	{r4, r5, fp, lr}
   16644:	add	fp, sp, #12
   16648:	ldr	r3, [pc, #32]	; 16670 <__assert_fail@plt+0x5448>
   1664c:	ldr	r4, [r3]
   16650:	ldr	r0, [pc, #28]	; 16674 <__assert_fail@plt+0x544c>
   16654:	bl	110d8 <gettext@plt>
   16658:	mov	r3, r0
   1665c:	ldr	r2, [pc, #20]	; 16678 <__assert_fail@plt+0x5450>
   16660:	mov	r1, #0
   16664:	mov	r0, r4
   16668:	bl	11060 <error@plt>
   1666c:	bl	11204 <abort@plt>
   16670:	andeq	fp, r2, r8, lsr #2
   16674:	andeq	r9, r1, ip, asr #29
   16678:	andeq	r9, r1, r0, ror #29
   1667c:	push	{fp, lr}
   16680:	add	fp, sp, #4
   16684:	sub	sp, sp, #24
   16688:	str	r0, [fp, #-16]
   1668c:	str	r1, [fp, #-20]	; 0xffffffec
   16690:	str	r2, [fp, #-24]	; 0xffffffe8
   16694:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16698:	ldr	r1, [fp, #-20]	; 0xffffffec
   1669c:	ldr	r0, [fp, #-16]
   166a0:	bl	1803c <__assert_fail@plt+0x6e14>
   166a4:	str	r0, [fp, #-8]
   166a8:	ldr	r3, [fp, #-8]
   166ac:	cmn	r3, #1
   166b0:	bne	166cc <__assert_fail@plt+0x54a4>
   166b4:	bl	11114 <__errno_location@plt>
   166b8:	mov	r3, r0
   166bc:	ldr	r3, [r3]
   166c0:	cmp	r3, #12
   166c4:	bne	166cc <__assert_fail@plt+0x54a4>
   166c8:	bl	16640 <__assert_fail@plt+0x5418>
   166cc:	ldr	r3, [fp, #-8]
   166d0:	mov	r0, r3
   166d4:	sub	sp, fp, #4
   166d8:	pop	{fp, pc}
   166dc:	push	{fp, lr}
   166e0:	add	fp, sp, #4
   166e4:	sub	sp, sp, #16
   166e8:	str	r0, [fp, #-16]
   166ec:	str	r1, [fp, #-20]	; 0xffffffec
   166f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   166f4:	cmp	r3, #0
   166f8:	bge	1672c <__assert_fail@plt+0x5504>
   166fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16700:	mov	r0, #0
   16704:	bl	18f88 <__assert_fail@plt+0x7d60>
   16708:	mov	r3, r0
   1670c:	mov	r2, r3
   16710:	ldr	r3, [fp, #-16]
   16714:	ldr	r3, [r3]
   16718:	cmp	r2, r3
   1671c:	movcc	r3, #1
   16720:	movcs	r3, #0
   16724:	uxtb	r3, r3
   16728:	b	16774 <__assert_fail@plt+0x554c>
   1672c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16730:	cmp	r3, #0
   16734:	beq	16768 <__assert_fail@plt+0x5540>
   16738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1673c:	mov	r1, r3
   16740:	mvn	r0, #0
   16744:	bl	18d7c <__assert_fail@plt+0x7b54>
   16748:	mov	r3, r0
   1674c:	mov	r2, r3
   16750:	ldr	r3, [fp, #-16]
   16754:	ldr	r3, [r3]
   16758:	cmp	r2, r3
   1675c:	bcs	16768 <__assert_fail@plt+0x5540>
   16760:	mov	r3, #1
   16764:	b	1676c <__assert_fail@plt+0x5544>
   16768:	mov	r3, #0
   1676c:	and	r3, r3, #1
   16770:	uxtb	r3, r3
   16774:	cmp	r3, #0
   16778:	beq	16798 <__assert_fail@plt+0x5570>
   1677c:	ldr	r3, [fp, #-16]
   16780:	ldr	r3, [r3]
   16784:	ldr	r2, [fp, #-20]	; 0xffffffec
   16788:	mul	r3, r2, r3
   1678c:	str	r3, [fp, #-8]
   16790:	mov	r3, #1
   16794:	b	167b0 <__assert_fail@plt+0x5588>
   16798:	ldr	r3, [fp, #-16]
   1679c:	ldr	r3, [r3]
   167a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   167a4:	mul	r3, r2, r3
   167a8:	str	r3, [fp, #-8]
   167ac:	mov	r3, #0
   167b0:	cmp	r3, #0
   167b4:	beq	167cc <__assert_fail@plt+0x55a4>
   167b8:	ldr	r3, [fp, #-16]
   167bc:	mvn	r2, #0
   167c0:	str	r2, [r3]
   167c4:	mov	r3, #1
   167c8:	b	167dc <__assert_fail@plt+0x55b4>
   167cc:	ldr	r2, [fp, #-8]
   167d0:	ldr	r3, [fp, #-16]
   167d4:	str	r2, [r3]
   167d8:	mov	r3, #0
   167dc:	mov	r0, r3
   167e0:	sub	sp, fp, #4
   167e4:	pop	{fp, pc}
   167e8:	push	{fp, lr}
   167ec:	add	fp, sp, #4
   167f0:	sub	sp, sp, #24
   167f4:	str	r0, [fp, #-16]
   167f8:	str	r1, [fp, #-20]	; 0xffffffec
   167fc:	str	r2, [fp, #-24]	; 0xffffffe8
   16800:	mov	r3, #0
   16804:	str	r3, [fp, #-8]
   16808:	b	16828 <__assert_fail@plt+0x5600>
   1680c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16810:	ldr	r0, [fp, #-16]
   16814:	bl	166dc <__assert_fail@plt+0x54b4>
   16818:	mov	r2, r0
   1681c:	ldr	r3, [fp, #-8]
   16820:	orr	r3, r3, r2
   16824:	str	r3, [fp, #-8]
   16828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1682c:	sub	r2, r3, #1
   16830:	str	r2, [fp, #-24]	; 0xffffffe8
   16834:	cmp	r3, #0
   16838:	bne	1680c <__assert_fail@plt+0x55e4>
   1683c:	ldr	r3, [fp, #-8]
   16840:	mov	r0, r3
   16844:	sub	sp, fp, #4
   16848:	pop	{fp, pc}
   1684c:	push	{fp, lr}
   16850:	add	fp, sp, #4
   16854:	sub	sp, sp, #56	; 0x38
   16858:	str	r0, [fp, #-48]	; 0xffffffd0
   1685c:	str	r1, [fp, #-52]	; 0xffffffcc
   16860:	str	r2, [fp, #-56]	; 0xffffffc8
   16864:	str	r3, [fp, #-60]	; 0xffffffc4
   16868:	mov	r3, #0
   1686c:	str	r3, [fp, #-8]
   16870:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16874:	cmp	r3, #0
   16878:	blt	16888 <__assert_fail@plt+0x5660>
   1687c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16880:	cmp	r3, #36	; 0x24
   16884:	ble	1689c <__assert_fail@plt+0x5674>
   16888:	ldr	r3, [pc, #1512]	; 16e78 <__assert_fail@plt+0x5c50>
   1688c:	mov	r2, #85	; 0x55
   16890:	ldr	r1, [pc, #1508]	; 16e7c <__assert_fail@plt+0x5c54>
   16894:	ldr	r0, [pc, #1508]	; 16e80 <__assert_fail@plt+0x5c58>
   16898:	bl	11228 <__assert_fail@plt>
   1689c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   168a0:	cmp	r3, #0
   168a4:	bne	168b0 <__assert_fail@plt+0x5688>
   168a8:	sub	r3, fp, #36	; 0x24
   168ac:	b	168b4 <__assert_fail@plt+0x568c>
   168b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   168b4:	str	r3, [fp, #-32]	; 0xffffffe0
   168b8:	bl	11114 <__errno_location@plt>
   168bc:	mov	r2, r0
   168c0:	mov	r3, #0
   168c4:	str	r3, [r2]
   168c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   168cc:	str	r3, [fp, #-12]
   168d0:	ldr	r3, [fp, #-12]
   168d4:	ldrb	r3, [r3]
   168d8:	strb	r3, [fp, #-13]
   168dc:	b	168f8 <__assert_fail@plt+0x56d0>
   168e0:	ldr	r3, [fp, #-12]
   168e4:	add	r3, r3, #1
   168e8:	str	r3, [fp, #-12]
   168ec:	ldr	r3, [fp, #-12]
   168f0:	ldrb	r3, [r3]
   168f4:	strb	r3, [fp, #-13]
   168f8:	bl	110c0 <__ctype_b_loc@plt>
   168fc:	mov	r3, r0
   16900:	ldr	r2, [r3]
   16904:	ldrb	r3, [fp, #-13]
   16908:	lsl	r3, r3, #1
   1690c:	add	r3, r2, r3
   16910:	ldrh	r3, [r3]
   16914:	and	r3, r3, #8192	; 0x2000
   16918:	cmp	r3, #0
   1691c:	bne	168e0 <__assert_fail@plt+0x56b8>
   16920:	ldrb	r3, [fp, #-13]
   16924:	cmp	r3, #45	; 0x2d
   16928:	bne	16934 <__assert_fail@plt+0x570c>
   1692c:	mov	r3, #4
   16930:	b	16e6c <__assert_fail@plt+0x5c44>
   16934:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16938:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1693c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16940:	bl	110e4 <strtoul@plt>
   16944:	mov	r3, r0
   16948:	str	r3, [fp, #-40]	; 0xffffffd8
   1694c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16950:	ldr	r2, [r3]
   16954:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16958:	cmp	r2, r3
   1695c:	bne	169b8 <__assert_fail@plt+0x5790>
   16960:	ldr	r3, [fp, #4]
   16964:	cmp	r3, #0
   16968:	beq	169b0 <__assert_fail@plt+0x5788>
   1696c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16970:	ldr	r3, [r3]
   16974:	ldrb	r3, [r3]
   16978:	cmp	r3, #0
   1697c:	beq	169b0 <__assert_fail@plt+0x5788>
   16980:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16984:	ldr	r3, [r3]
   16988:	ldrb	r3, [r3]
   1698c:	mov	r1, r3
   16990:	ldr	r0, [fp, #4]
   16994:	bl	110fc <strchr@plt>
   16998:	mov	r3, r0
   1699c:	cmp	r3, #0
   169a0:	beq	169b0 <__assert_fail@plt+0x5788>
   169a4:	mov	r3, #1
   169a8:	str	r3, [fp, #-40]	; 0xffffffd8
   169ac:	b	169f0 <__assert_fail@plt+0x57c8>
   169b0:	mov	r3, #4
   169b4:	b	16e6c <__assert_fail@plt+0x5c44>
   169b8:	bl	11114 <__errno_location@plt>
   169bc:	mov	r3, r0
   169c0:	ldr	r3, [r3]
   169c4:	cmp	r3, #0
   169c8:	beq	169f0 <__assert_fail@plt+0x57c8>
   169cc:	bl	11114 <__errno_location@plt>
   169d0:	mov	r3, r0
   169d4:	ldr	r3, [r3]
   169d8:	cmp	r3, #34	; 0x22
   169dc:	beq	169e8 <__assert_fail@plt+0x57c0>
   169e0:	mov	r3, #4
   169e4:	b	16e6c <__assert_fail@plt+0x5c44>
   169e8:	mov	r3, #1
   169ec:	str	r3, [fp, #-8]
   169f0:	ldr	r3, [fp, #4]
   169f4:	cmp	r3, #0
   169f8:	bne	16a10 <__assert_fail@plt+0x57e8>
   169fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16a00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16a04:	str	r2, [r3]
   16a08:	ldr	r3, [fp, #-8]
   16a0c:	b	16e6c <__assert_fail@plt+0x5c44>
   16a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a14:	ldr	r3, [r3]
   16a18:	ldrb	r3, [r3]
   16a1c:	cmp	r3, #0
   16a20:	beq	16e5c <__assert_fail@plt+0x5c34>
   16a24:	mov	r3, #1024	; 0x400
   16a28:	str	r3, [fp, #-20]	; 0xffffffec
   16a2c:	mov	r3, #1
   16a30:	str	r3, [fp, #-24]	; 0xffffffe8
   16a34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a38:	ldr	r3, [r3]
   16a3c:	ldrb	r3, [r3]
   16a40:	mov	r1, r3
   16a44:	ldr	r0, [fp, #4]
   16a48:	bl	110fc <strchr@plt>
   16a4c:	mov	r3, r0
   16a50:	cmp	r3, #0
   16a54:	bne	16a70 <__assert_fail@plt+0x5848>
   16a58:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16a5c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16a60:	str	r2, [r3]
   16a64:	ldr	r3, [fp, #-8]
   16a68:	orr	r3, r3, #2
   16a6c:	b	16e6c <__assert_fail@plt+0x5c44>
   16a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a74:	ldr	r3, [r3]
   16a78:	ldrb	r3, [r3]
   16a7c:	sub	r3, r3, #69	; 0x45
   16a80:	cmp	r3, #47	; 0x2f
   16a84:	ldrls	pc, [pc, r3, lsl #2]
   16a88:	b	16bd4 <__assert_fail@plt+0x59ac>
   16a8c:	andeq	r6, r1, ip, asr #22
   16a90:	ldrdeq	r6, [r1], -r4
   16a94:	andeq	r6, r1, ip, asr #22
   16a98:	ldrdeq	r6, [r1], -r4
   16a9c:	ldrdeq	r6, [r1], -r4
   16aa0:	ldrdeq	r6, [r1], -r4
   16aa4:	andeq	r6, r1, ip, asr #22
   16aa8:	ldrdeq	r6, [r1], -r4
   16aac:	andeq	r6, r1, ip, asr #22
   16ab0:	ldrdeq	r6, [r1], -r4
   16ab4:	ldrdeq	r6, [r1], -r4
   16ab8:	andeq	r6, r1, ip, asr #22
   16abc:	ldrdeq	r6, [r1], -r4
   16ac0:	ldrdeq	r6, [r1], -r4
   16ac4:	ldrdeq	r6, [r1], -r4
   16ac8:	andeq	r6, r1, ip, asr #22
   16acc:	ldrdeq	r6, [r1], -r4
   16ad0:	ldrdeq	r6, [r1], -r4
   16ad4:	ldrdeq	r6, [r1], -r4
   16ad8:	ldrdeq	r6, [r1], -r4
   16adc:	andeq	r6, r1, ip, asr #22
   16ae0:	andeq	r6, r1, ip, asr #22
   16ae4:	ldrdeq	r6, [r1], -r4
   16ae8:	ldrdeq	r6, [r1], -r4
   16aec:	ldrdeq	r6, [r1], -r4
   16af0:	ldrdeq	r6, [r1], -r4
   16af4:	ldrdeq	r6, [r1], -r4
   16af8:	ldrdeq	r6, [r1], -r4
   16afc:	ldrdeq	r6, [r1], -r4
   16b00:	ldrdeq	r6, [r1], -r4
   16b04:	ldrdeq	r6, [r1], -r4
   16b08:	ldrdeq	r6, [r1], -r4
   16b0c:	ldrdeq	r6, [r1], -r4
   16b10:	ldrdeq	r6, [r1], -r4
   16b14:	andeq	r6, r1, ip, asr #22
   16b18:	ldrdeq	r6, [r1], -r4
   16b1c:	ldrdeq	r6, [r1], -r4
   16b20:	ldrdeq	r6, [r1], -r4
   16b24:	andeq	r6, r1, ip, asr #22
   16b28:	ldrdeq	r6, [r1], -r4
   16b2c:	andeq	r6, r1, ip, asr #22
   16b30:	ldrdeq	r6, [r1], -r4
   16b34:	ldrdeq	r6, [r1], -r4
   16b38:	ldrdeq	r6, [r1], -r4
   16b3c:	ldrdeq	r6, [r1], -r4
   16b40:	ldrdeq	r6, [r1], -r4
   16b44:	ldrdeq	r6, [r1], -r4
   16b48:	andeq	r6, r1, ip, asr #22
   16b4c:	mov	r1, #48	; 0x30
   16b50:	ldr	r0, [fp, #4]
   16b54:	bl	110fc <strchr@plt>
   16b58:	mov	r3, r0
   16b5c:	cmp	r3, #0
   16b60:	beq	16bd4 <__assert_fail@plt+0x59ac>
   16b64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b68:	ldr	r3, [r3]
   16b6c:	add	r3, r3, #1
   16b70:	ldrb	r3, [r3]
   16b74:	cmp	r3, #68	; 0x44
   16b78:	beq	16bb8 <__assert_fail@plt+0x5990>
   16b7c:	cmp	r3, #105	; 0x69
   16b80:	beq	16b90 <__assert_fail@plt+0x5968>
   16b84:	cmp	r3, #66	; 0x42
   16b88:	beq	16bb8 <__assert_fail@plt+0x5990>
   16b8c:	b	16bd4 <__assert_fail@plt+0x59ac>
   16b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b94:	ldr	r3, [r3]
   16b98:	add	r3, r3, #2
   16b9c:	ldrb	r3, [r3]
   16ba0:	cmp	r3, #66	; 0x42
   16ba4:	bne	16bd0 <__assert_fail@plt+0x59a8>
   16ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bac:	add	r3, r3, #2
   16bb0:	str	r3, [fp, #-24]	; 0xffffffe8
   16bb4:	b	16bd0 <__assert_fail@plt+0x59a8>
   16bb8:	mov	r3, #1000	; 0x3e8
   16bbc:	str	r3, [fp, #-20]	; 0xffffffec
   16bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bc4:	add	r3, r3, #1
   16bc8:	str	r3, [fp, #-24]	; 0xffffffe8
   16bcc:	b	16bd4 <__assert_fail@plt+0x59ac>
   16bd0:	nop			; (mov r0, r0)
   16bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bd8:	ldr	r3, [r3]
   16bdc:	ldrb	r3, [r3]
   16be0:	sub	r3, r3, #66	; 0x42
   16be4:	cmp	r3, #53	; 0x35
   16be8:	ldrls	pc, [pc, r3, lsl #2]
   16bec:	b	16dfc <__assert_fail@plt+0x5bd4>
   16bf0:	andeq	r6, r1, r0, ror #25
   16bf4:	strdeq	r6, [r1], -ip
   16bf8:	strdeq	r6, [r1], -ip
   16bfc:	andeq	r6, r1, r4, lsl #26
   16c00:	strdeq	r6, [r1], -ip
   16c04:	andeq	r6, r1, r0, lsr #26
   16c08:	strdeq	r6, [r1], -ip
   16c0c:	strdeq	r6, [r1], -ip
   16c10:	strdeq	r6, [r1], -ip
   16c14:	andeq	r6, r1, ip, lsr sp
   16c18:	strdeq	r6, [r1], -ip
   16c1c:	andeq	r6, r1, r8, asr sp
   16c20:	strdeq	r6, [r1], -ip
   16c24:	strdeq	r6, [r1], -ip
   16c28:	andeq	r6, r1, r4, ror sp
   16c2c:	strdeq	r6, [r1], -ip
   16c30:	strdeq	r6, [r1], -ip
   16c34:	strdeq	r6, [r1], -ip
   16c38:	muleq	r1, r0, sp
   16c3c:	strdeq	r6, [r1], -ip
   16c40:	strdeq	r6, [r1], -ip
   16c44:	strdeq	r6, [r1], -ip
   16c48:	strdeq	r6, [r1], -ip
   16c4c:	andeq	r6, r1, r4, asr #27
   16c50:	andeq	r6, r1, r0, ror #27
   16c54:	strdeq	r6, [r1], -ip
   16c58:	strdeq	r6, [r1], -ip
   16c5c:	strdeq	r6, [r1], -ip
   16c60:	strdeq	r6, [r1], -ip
   16c64:	strdeq	r6, [r1], -ip
   16c68:	strdeq	r6, [r1], -ip
   16c6c:	strdeq	r6, [r1], -ip
   16c70:	andeq	r6, r1, r8, asr #25
   16c74:	strdeq	r6, [r1], -r8
   16c78:	strdeq	r6, [r1], -ip
   16c7c:	strdeq	r6, [r1], -ip
   16c80:	strdeq	r6, [r1], -ip
   16c84:	andeq	r6, r1, r0, lsr #26
   16c88:	strdeq	r6, [r1], -ip
   16c8c:	strdeq	r6, [r1], -ip
   16c90:	strdeq	r6, [r1], -ip
   16c94:	andeq	r6, r1, ip, lsr sp
   16c98:	strdeq	r6, [r1], -ip
   16c9c:	andeq	r6, r1, r8, asr sp
   16ca0:	strdeq	r6, [r1], -ip
   16ca4:	strdeq	r6, [r1], -ip
   16ca8:	strdeq	r6, [r1], -ip
   16cac:	strdeq	r6, [r1], -ip
   16cb0:	strdeq	r6, [r1], -ip
   16cb4:	strdeq	r6, [r1], -ip
   16cb8:	muleq	r1, r0, sp
   16cbc:	strdeq	r6, [r1], -ip
   16cc0:	strdeq	r6, [r1], -ip
   16cc4:	andeq	r6, r1, ip, lsr #27
   16cc8:	sub	r3, fp, #40	; 0x28
   16ccc:	mov	r1, #512	; 0x200
   16cd0:	mov	r0, r3
   16cd4:	bl	166dc <__assert_fail@plt+0x54b4>
   16cd8:	str	r0, [fp, #-28]	; 0xffffffe4
   16cdc:	b	16e14 <__assert_fail@plt+0x5bec>
   16ce0:	sub	r3, fp, #40	; 0x28
   16ce4:	mov	r1, #1024	; 0x400
   16ce8:	mov	r0, r3
   16cec:	bl	166dc <__assert_fail@plt+0x54b4>
   16cf0:	str	r0, [fp, #-28]	; 0xffffffe4
   16cf4:	b	16e14 <__assert_fail@plt+0x5bec>
   16cf8:	mov	r3, #0
   16cfc:	str	r3, [fp, #-28]	; 0xffffffe4
   16d00:	b	16e14 <__assert_fail@plt+0x5bec>
   16d04:	sub	r3, fp, #40	; 0x28
   16d08:	mov	r2, #6
   16d0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d10:	mov	r0, r3
   16d14:	bl	167e8 <__assert_fail@plt+0x55c0>
   16d18:	str	r0, [fp, #-28]	; 0xffffffe4
   16d1c:	b	16e14 <__assert_fail@plt+0x5bec>
   16d20:	sub	r3, fp, #40	; 0x28
   16d24:	mov	r2, #3
   16d28:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d2c:	mov	r0, r3
   16d30:	bl	167e8 <__assert_fail@plt+0x55c0>
   16d34:	str	r0, [fp, #-28]	; 0xffffffe4
   16d38:	b	16e14 <__assert_fail@plt+0x5bec>
   16d3c:	sub	r3, fp, #40	; 0x28
   16d40:	mov	r2, #1
   16d44:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d48:	mov	r0, r3
   16d4c:	bl	167e8 <__assert_fail@plt+0x55c0>
   16d50:	str	r0, [fp, #-28]	; 0xffffffe4
   16d54:	b	16e14 <__assert_fail@plt+0x5bec>
   16d58:	sub	r3, fp, #40	; 0x28
   16d5c:	mov	r2, #2
   16d60:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d64:	mov	r0, r3
   16d68:	bl	167e8 <__assert_fail@plt+0x55c0>
   16d6c:	str	r0, [fp, #-28]	; 0xffffffe4
   16d70:	b	16e14 <__assert_fail@plt+0x5bec>
   16d74:	sub	r3, fp, #40	; 0x28
   16d78:	mov	r2, #5
   16d7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d80:	mov	r0, r3
   16d84:	bl	167e8 <__assert_fail@plt+0x55c0>
   16d88:	str	r0, [fp, #-28]	; 0xffffffe4
   16d8c:	b	16e14 <__assert_fail@plt+0x5bec>
   16d90:	sub	r3, fp, #40	; 0x28
   16d94:	mov	r2, #4
   16d98:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d9c:	mov	r0, r3
   16da0:	bl	167e8 <__assert_fail@plt+0x55c0>
   16da4:	str	r0, [fp, #-28]	; 0xffffffe4
   16da8:	b	16e14 <__assert_fail@plt+0x5bec>
   16dac:	sub	r3, fp, #40	; 0x28
   16db0:	mov	r1, #2
   16db4:	mov	r0, r3
   16db8:	bl	166dc <__assert_fail@plt+0x54b4>
   16dbc:	str	r0, [fp, #-28]	; 0xffffffe4
   16dc0:	b	16e14 <__assert_fail@plt+0x5bec>
   16dc4:	sub	r3, fp, #40	; 0x28
   16dc8:	mov	r2, #8
   16dcc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dd0:	mov	r0, r3
   16dd4:	bl	167e8 <__assert_fail@plt+0x55c0>
   16dd8:	str	r0, [fp, #-28]	; 0xffffffe4
   16ddc:	b	16e14 <__assert_fail@plt+0x5bec>
   16de0:	sub	r3, fp, #40	; 0x28
   16de4:	mov	r2, #7
   16de8:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dec:	mov	r0, r3
   16df0:	bl	167e8 <__assert_fail@plt+0x55c0>
   16df4:	str	r0, [fp, #-28]	; 0xffffffe4
   16df8:	b	16e14 <__assert_fail@plt+0x5bec>
   16dfc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16e00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16e04:	str	r2, [r3]
   16e08:	ldr	r3, [fp, #-8]
   16e0c:	orr	r3, r3, #2
   16e10:	b	16e6c <__assert_fail@plt+0x5c44>
   16e14:	ldr	r2, [fp, #-8]
   16e18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e1c:	orr	r3, r2, r3
   16e20:	str	r3, [fp, #-8]
   16e24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e28:	ldr	r2, [r3]
   16e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e30:	add	r2, r2, r3
   16e34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e38:	str	r2, [r3]
   16e3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e40:	ldr	r3, [r3]
   16e44:	ldrb	r3, [r3]
   16e48:	cmp	r3, #0
   16e4c:	beq	16e5c <__assert_fail@plt+0x5c34>
   16e50:	ldr	r3, [fp, #-8]
   16e54:	orr	r3, r3, #2
   16e58:	str	r3, [fp, #-8]
   16e5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16e60:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16e64:	str	r2, [r3]
   16e68:	ldr	r3, [fp, #-8]
   16e6c:	mov	r0, r3
   16e70:	sub	sp, fp, #4
   16e74:	pop	{fp, pc}
   16e78:	andeq	r9, r1, ip, lsl pc
   16e7c:	andeq	r9, r1, r4, ror #29
   16e80:	strdeq	r9, [r1], -r4
   16e84:	push	{fp, lr}
   16e88:	add	fp, sp, #4
   16e8c:	sub	sp, sp, #16
   16e90:	str	r0, [fp, #-16]
   16e94:	str	r1, [fp, #-20]	; 0xffffffec
   16e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e9c:	cmp	r3, #0
   16ea0:	bge	16edc <__assert_fail@plt+0x5cb4>
   16ea4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ea8:	mov	r0, #0
   16eac:	bl	18f88 <__assert_fail@plt+0x7d60>
   16eb0:	mov	r3, r0
   16eb4:	mov	r0, r3
   16eb8:	asr	r1, r0, #31
   16ebc:	ldr	r3, [fp, #-16]
   16ec0:	ldrd	r2, [r3]
   16ec4:	cmp	r1, r3
   16ec8:	cmpeq	r0, r2
   16ecc:	movcc	r3, #1
   16ed0:	movcs	r3, #0
   16ed4:	uxtb	r3, r3
   16ed8:	b	16f38 <__assert_fail@plt+0x5d10>
   16edc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ee0:	cmp	r3, #0
   16ee4:	beq	16f2c <__assert_fail@plt+0x5d04>
   16ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16eec:	mov	r2, r3
   16ef0:	asr	r3, r2, #31
   16ef4:	mvn	r0, #0
   16ef8:	mvn	r1, #0
   16efc:	bl	191c8 <__assert_fail@plt+0x7fa0>
   16f00:	mov	r2, r0
   16f04:	mov	r3, r1
   16f08:	mov	r0, r2
   16f0c:	mov	r1, r3
   16f10:	ldr	r3, [fp, #-16]
   16f14:	ldrd	r2, [r3]
   16f18:	cmp	r1, r3
   16f1c:	cmpeq	r0, r2
   16f20:	bcs	16f2c <__assert_fail@plt+0x5d04>
   16f24:	mov	r3, #1
   16f28:	b	16f30 <__assert_fail@plt+0x5d08>
   16f2c:	mov	r3, #0
   16f30:	and	r3, r3, #1
   16f34:	uxtb	r3, r3
   16f38:	cmp	r3, #0
   16f3c:	beq	16f78 <__assert_fail@plt+0x5d50>
   16f40:	ldr	r3, [fp, #-16]
   16f44:	ldrd	r0, [r3]
   16f48:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f4c:	mov	r2, r3
   16f50:	asr	r3, r2, #31
   16f54:	mul	lr, r2, r1
   16f58:	mul	ip, r0, r3
   16f5c:	add	ip, lr, ip
   16f60:	umull	r2, r3, r0, r2
   16f64:	add	r1, ip, r3
   16f68:	mov	r3, r1
   16f6c:	strd	r2, [fp, #-12]
   16f70:	mov	r3, #1
   16f74:	b	16fac <__assert_fail@plt+0x5d84>
   16f78:	ldr	r3, [fp, #-16]
   16f7c:	ldrd	r0, [r3]
   16f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f84:	mov	r2, r3
   16f88:	asr	r3, r2, #31
   16f8c:	mul	lr, r2, r1
   16f90:	mul	ip, r0, r3
   16f94:	add	ip, lr, ip
   16f98:	umull	r2, r3, r0, r2
   16f9c:	add	r1, ip, r3
   16fa0:	mov	r3, r1
   16fa4:	strd	r2, [fp, #-12]
   16fa8:	mov	r3, #0
   16fac:	cmp	r3, #0
   16fb0:	beq	16fcc <__assert_fail@plt+0x5da4>
   16fb4:	ldr	r1, [fp, #-16]
   16fb8:	mvn	r2, #0
   16fbc:	mvn	r3, #0
   16fc0:	strd	r2, [r1]
   16fc4:	mov	r3, #1
   16fc8:	b	16fdc <__assert_fail@plt+0x5db4>
   16fcc:	ldrd	r2, [fp, #-12]
   16fd0:	ldr	r1, [fp, #-16]
   16fd4:	strd	r2, [r1]
   16fd8:	mov	r3, #0
   16fdc:	mov	r0, r3
   16fe0:	sub	sp, fp, #4
   16fe4:	pop	{fp, pc}
   16fe8:	push	{fp, lr}
   16fec:	add	fp, sp, #4
   16ff0:	sub	sp, sp, #24
   16ff4:	str	r0, [fp, #-16]
   16ff8:	str	r1, [fp, #-20]	; 0xffffffec
   16ffc:	str	r2, [fp, #-24]	; 0xffffffe8
   17000:	mov	r3, #0
   17004:	str	r3, [fp, #-8]
   17008:	b	17028 <__assert_fail@plt+0x5e00>
   1700c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17010:	ldr	r0, [fp, #-16]
   17014:	bl	16e84 <__assert_fail@plt+0x5c5c>
   17018:	mov	r2, r0
   1701c:	ldr	r3, [fp, #-8]
   17020:	orr	r3, r3, r2
   17024:	str	r3, [fp, #-8]
   17028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1702c:	sub	r2, r3, #1
   17030:	str	r2, [fp, #-24]	; 0xffffffe8
   17034:	cmp	r3, #0
   17038:	bne	1700c <__assert_fail@plt+0x5de4>
   1703c:	ldr	r3, [fp, #-8]
   17040:	mov	r0, r3
   17044:	sub	sp, fp, #4
   17048:	pop	{fp, pc}
   1704c:	push	{fp, lr}
   17050:	add	fp, sp, #4
   17054:	sub	sp, sp, #56	; 0x38
   17058:	str	r0, [fp, #-48]	; 0xffffffd0
   1705c:	str	r1, [fp, #-52]	; 0xffffffcc
   17060:	str	r2, [fp, #-56]	; 0xffffffc8
   17064:	str	r3, [fp, #-60]	; 0xffffffc4
   17068:	mov	r3, #0
   1706c:	str	r3, [fp, #-8]
   17070:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17074:	cmp	r3, #0
   17078:	blt	17088 <__assert_fail@plt+0x5e60>
   1707c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17080:	cmp	r3, #36	; 0x24
   17084:	ble	1709c <__assert_fail@plt+0x5e74>
   17088:	ldr	r3, [pc, #1520]	; 17680 <__assert_fail@plt+0x6458>
   1708c:	mov	r2, #85	; 0x55
   17090:	ldr	r1, [pc, #1516]	; 17684 <__assert_fail@plt+0x645c>
   17094:	ldr	r0, [pc, #1516]	; 17688 <__assert_fail@plt+0x6460>
   17098:	bl	11228 <__assert_fail@plt>
   1709c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   170a0:	cmp	r3, #0
   170a4:	bne	170b0 <__assert_fail@plt+0x5e88>
   170a8:	sub	r3, fp, #36	; 0x24
   170ac:	b	170b4 <__assert_fail@plt+0x5e8c>
   170b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   170b4:	str	r3, [fp, #-32]	; 0xffffffe0
   170b8:	bl	11114 <__errno_location@plt>
   170bc:	mov	r2, r0
   170c0:	mov	r3, #0
   170c4:	str	r3, [r2]
   170c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   170cc:	str	r3, [fp, #-12]
   170d0:	ldr	r3, [fp, #-12]
   170d4:	ldrb	r3, [r3]
   170d8:	strb	r3, [fp, #-13]
   170dc:	b	170f8 <__assert_fail@plt+0x5ed0>
   170e0:	ldr	r3, [fp, #-12]
   170e4:	add	r3, r3, #1
   170e8:	str	r3, [fp, #-12]
   170ec:	ldr	r3, [fp, #-12]
   170f0:	ldrb	r3, [r3]
   170f4:	strb	r3, [fp, #-13]
   170f8:	bl	110c0 <__ctype_b_loc@plt>
   170fc:	mov	r3, r0
   17100:	ldr	r2, [r3]
   17104:	ldrb	r3, [fp, #-13]
   17108:	lsl	r3, r3, #1
   1710c:	add	r3, r2, r3
   17110:	ldrh	r3, [r3]
   17114:	and	r3, r3, #8192	; 0x2000
   17118:	cmp	r3, #0
   1711c:	bne	170e0 <__assert_fail@plt+0x5eb8>
   17120:	ldrb	r3, [fp, #-13]
   17124:	cmp	r3, #45	; 0x2d
   17128:	bne	17134 <__assert_fail@plt+0x5f0c>
   1712c:	mov	r3, #4
   17130:	b	17674 <__assert_fail@plt+0x644c>
   17134:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17138:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1713c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17140:	bl	11168 <strtoumax@plt>
   17144:	mov	r2, r0
   17148:	mov	r3, r1
   1714c:	strd	r2, [fp, #-44]	; 0xffffffd4
   17150:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17154:	ldr	r2, [r3]
   17158:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1715c:	cmp	r2, r3
   17160:	bne	171c0 <__assert_fail@plt+0x5f98>
   17164:	ldr	r3, [fp, #4]
   17168:	cmp	r3, #0
   1716c:	beq	171b8 <__assert_fail@plt+0x5f90>
   17170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17174:	ldr	r3, [r3]
   17178:	ldrb	r3, [r3]
   1717c:	cmp	r3, #0
   17180:	beq	171b8 <__assert_fail@plt+0x5f90>
   17184:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17188:	ldr	r3, [r3]
   1718c:	ldrb	r3, [r3]
   17190:	mov	r1, r3
   17194:	ldr	r0, [fp, #4]
   17198:	bl	110fc <strchr@plt>
   1719c:	mov	r3, r0
   171a0:	cmp	r3, #0
   171a4:	beq	171b8 <__assert_fail@plt+0x5f90>
   171a8:	mov	r2, #1
   171ac:	mov	r3, #0
   171b0:	strd	r2, [fp, #-44]	; 0xffffffd4
   171b4:	b	171f8 <__assert_fail@plt+0x5fd0>
   171b8:	mov	r3, #4
   171bc:	b	17674 <__assert_fail@plt+0x644c>
   171c0:	bl	11114 <__errno_location@plt>
   171c4:	mov	r3, r0
   171c8:	ldr	r3, [r3]
   171cc:	cmp	r3, #0
   171d0:	beq	171f8 <__assert_fail@plt+0x5fd0>
   171d4:	bl	11114 <__errno_location@plt>
   171d8:	mov	r3, r0
   171dc:	ldr	r3, [r3]
   171e0:	cmp	r3, #34	; 0x22
   171e4:	beq	171f0 <__assert_fail@plt+0x5fc8>
   171e8:	mov	r3, #4
   171ec:	b	17674 <__assert_fail@plt+0x644c>
   171f0:	mov	r3, #1
   171f4:	str	r3, [fp, #-8]
   171f8:	ldr	r3, [fp, #4]
   171fc:	cmp	r3, #0
   17200:	bne	17218 <__assert_fail@plt+0x5ff0>
   17204:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17208:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1720c:	strd	r2, [r1]
   17210:	ldr	r3, [fp, #-8]
   17214:	b	17674 <__assert_fail@plt+0x644c>
   17218:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1721c:	ldr	r3, [r3]
   17220:	ldrb	r3, [r3]
   17224:	cmp	r3, #0
   17228:	beq	17664 <__assert_fail@plt+0x643c>
   1722c:	mov	r3, #1024	; 0x400
   17230:	str	r3, [fp, #-20]	; 0xffffffec
   17234:	mov	r3, #1
   17238:	str	r3, [fp, #-24]	; 0xffffffe8
   1723c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17240:	ldr	r3, [r3]
   17244:	ldrb	r3, [r3]
   17248:	mov	r1, r3
   1724c:	ldr	r0, [fp, #4]
   17250:	bl	110fc <strchr@plt>
   17254:	mov	r3, r0
   17258:	cmp	r3, #0
   1725c:	bne	17278 <__assert_fail@plt+0x6050>
   17260:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17264:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17268:	strd	r2, [r1]
   1726c:	ldr	r3, [fp, #-8]
   17270:	orr	r3, r3, #2
   17274:	b	17674 <__assert_fail@plt+0x644c>
   17278:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1727c:	ldr	r3, [r3]
   17280:	ldrb	r3, [r3]
   17284:	sub	r3, r3, #69	; 0x45
   17288:	cmp	r3, #47	; 0x2f
   1728c:	ldrls	pc, [pc, r3, lsl #2]
   17290:	b	173dc <__assert_fail@plt+0x61b4>
   17294:	andeq	r7, r1, r4, asr r3
   17298:	ldrdeq	r7, [r1], -ip
   1729c:	andeq	r7, r1, r4, asr r3
   172a0:	ldrdeq	r7, [r1], -ip
   172a4:	ldrdeq	r7, [r1], -ip
   172a8:	ldrdeq	r7, [r1], -ip
   172ac:	andeq	r7, r1, r4, asr r3
   172b0:	ldrdeq	r7, [r1], -ip
   172b4:	andeq	r7, r1, r4, asr r3
   172b8:	ldrdeq	r7, [r1], -ip
   172bc:	ldrdeq	r7, [r1], -ip
   172c0:	andeq	r7, r1, r4, asr r3
   172c4:	ldrdeq	r7, [r1], -ip
   172c8:	ldrdeq	r7, [r1], -ip
   172cc:	ldrdeq	r7, [r1], -ip
   172d0:	andeq	r7, r1, r4, asr r3
   172d4:	ldrdeq	r7, [r1], -ip
   172d8:	ldrdeq	r7, [r1], -ip
   172dc:	ldrdeq	r7, [r1], -ip
   172e0:	ldrdeq	r7, [r1], -ip
   172e4:	andeq	r7, r1, r4, asr r3
   172e8:	andeq	r7, r1, r4, asr r3
   172ec:	ldrdeq	r7, [r1], -ip
   172f0:	ldrdeq	r7, [r1], -ip
   172f4:	ldrdeq	r7, [r1], -ip
   172f8:	ldrdeq	r7, [r1], -ip
   172fc:	ldrdeq	r7, [r1], -ip
   17300:	ldrdeq	r7, [r1], -ip
   17304:	ldrdeq	r7, [r1], -ip
   17308:	ldrdeq	r7, [r1], -ip
   1730c:	ldrdeq	r7, [r1], -ip
   17310:	ldrdeq	r7, [r1], -ip
   17314:	ldrdeq	r7, [r1], -ip
   17318:	ldrdeq	r7, [r1], -ip
   1731c:	andeq	r7, r1, r4, asr r3
   17320:	ldrdeq	r7, [r1], -ip
   17324:	ldrdeq	r7, [r1], -ip
   17328:	ldrdeq	r7, [r1], -ip
   1732c:	andeq	r7, r1, r4, asr r3
   17330:	ldrdeq	r7, [r1], -ip
   17334:	andeq	r7, r1, r4, asr r3
   17338:	ldrdeq	r7, [r1], -ip
   1733c:	ldrdeq	r7, [r1], -ip
   17340:	ldrdeq	r7, [r1], -ip
   17344:	ldrdeq	r7, [r1], -ip
   17348:	ldrdeq	r7, [r1], -ip
   1734c:	ldrdeq	r7, [r1], -ip
   17350:	andeq	r7, r1, r4, asr r3
   17354:	mov	r1, #48	; 0x30
   17358:	ldr	r0, [fp, #4]
   1735c:	bl	110fc <strchr@plt>
   17360:	mov	r3, r0
   17364:	cmp	r3, #0
   17368:	beq	173dc <__assert_fail@plt+0x61b4>
   1736c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17370:	ldr	r3, [r3]
   17374:	add	r3, r3, #1
   17378:	ldrb	r3, [r3]
   1737c:	cmp	r3, #68	; 0x44
   17380:	beq	173c0 <__assert_fail@plt+0x6198>
   17384:	cmp	r3, #105	; 0x69
   17388:	beq	17398 <__assert_fail@plt+0x6170>
   1738c:	cmp	r3, #66	; 0x42
   17390:	beq	173c0 <__assert_fail@plt+0x6198>
   17394:	b	173dc <__assert_fail@plt+0x61b4>
   17398:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1739c:	ldr	r3, [r3]
   173a0:	add	r3, r3, #2
   173a4:	ldrb	r3, [r3]
   173a8:	cmp	r3, #66	; 0x42
   173ac:	bne	173d8 <__assert_fail@plt+0x61b0>
   173b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173b4:	add	r3, r3, #2
   173b8:	str	r3, [fp, #-24]	; 0xffffffe8
   173bc:	b	173d8 <__assert_fail@plt+0x61b0>
   173c0:	mov	r3, #1000	; 0x3e8
   173c4:	str	r3, [fp, #-20]	; 0xffffffec
   173c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173cc:	add	r3, r3, #1
   173d0:	str	r3, [fp, #-24]	; 0xffffffe8
   173d4:	b	173dc <__assert_fail@plt+0x61b4>
   173d8:	nop			; (mov r0, r0)
   173dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173e0:	ldr	r3, [r3]
   173e4:	ldrb	r3, [r3]
   173e8:	sub	r3, r3, #66	; 0x42
   173ec:	cmp	r3, #53	; 0x35
   173f0:	ldrls	pc, [pc, r3, lsl #2]
   173f4:	b	17604 <__assert_fail@plt+0x63dc>
   173f8:	andeq	r7, r1, r8, ror #9
   173fc:	andeq	r7, r1, r4, lsl #12
   17400:	andeq	r7, r1, r4, lsl #12
   17404:	andeq	r7, r1, ip, lsl #10
   17408:	andeq	r7, r1, r4, lsl #12
   1740c:	andeq	r7, r1, r8, lsr #10
   17410:	andeq	r7, r1, r4, lsl #12
   17414:	andeq	r7, r1, r4, lsl #12
   17418:	andeq	r7, r1, r4, lsl #12
   1741c:	andeq	r7, r1, r4, asr #10
   17420:	andeq	r7, r1, r4, lsl #12
   17424:	andeq	r7, r1, r0, ror #10
   17428:	andeq	r7, r1, r4, lsl #12
   1742c:	andeq	r7, r1, r4, lsl #12
   17430:	andeq	r7, r1, ip, ror r5
   17434:	andeq	r7, r1, r4, lsl #12
   17438:	andeq	r7, r1, r4, lsl #12
   1743c:	andeq	r7, r1, r4, lsl #12
   17440:	muleq	r1, r8, r5
   17444:	andeq	r7, r1, r4, lsl #12
   17448:	andeq	r7, r1, r4, lsl #12
   1744c:	andeq	r7, r1, r4, lsl #12
   17450:	andeq	r7, r1, r4, lsl #12
   17454:	andeq	r7, r1, ip, asr #11
   17458:	andeq	r7, r1, r8, ror #11
   1745c:	andeq	r7, r1, r4, lsl #12
   17460:	andeq	r7, r1, r4, lsl #12
   17464:	andeq	r7, r1, r4, lsl #12
   17468:	andeq	r7, r1, r4, lsl #12
   1746c:	andeq	r7, r1, r4, lsl #12
   17470:	andeq	r7, r1, r4, lsl #12
   17474:	andeq	r7, r1, r4, lsl #12
   17478:	ldrdeq	r7, [r1], -r0
   1747c:	andeq	r7, r1, r0, lsl #10
   17480:	andeq	r7, r1, r4, lsl #12
   17484:	andeq	r7, r1, r4, lsl #12
   17488:	andeq	r7, r1, r4, lsl #12
   1748c:	andeq	r7, r1, r8, lsr #10
   17490:	andeq	r7, r1, r4, lsl #12
   17494:	andeq	r7, r1, r4, lsl #12
   17498:	andeq	r7, r1, r4, lsl #12
   1749c:	andeq	r7, r1, r4, asr #10
   174a0:	andeq	r7, r1, r4, lsl #12
   174a4:	andeq	r7, r1, r0, ror #10
   174a8:	andeq	r7, r1, r4, lsl #12
   174ac:	andeq	r7, r1, r4, lsl #12
   174b0:	andeq	r7, r1, r4, lsl #12
   174b4:	andeq	r7, r1, r4, lsl #12
   174b8:	andeq	r7, r1, r4, lsl #12
   174bc:	andeq	r7, r1, r4, lsl #12
   174c0:	muleq	r1, r8, r5
   174c4:	andeq	r7, r1, r4, lsl #12
   174c8:	andeq	r7, r1, r4, lsl #12
   174cc:			; <UNDEFINED> instruction: 0x000175b4
   174d0:	sub	r3, fp, #44	; 0x2c
   174d4:	mov	r1, #512	; 0x200
   174d8:	mov	r0, r3
   174dc:	bl	16e84 <__assert_fail@plt+0x5c5c>
   174e0:	str	r0, [fp, #-28]	; 0xffffffe4
   174e4:	b	1761c <__assert_fail@plt+0x63f4>
   174e8:	sub	r3, fp, #44	; 0x2c
   174ec:	mov	r1, #1024	; 0x400
   174f0:	mov	r0, r3
   174f4:	bl	16e84 <__assert_fail@plt+0x5c5c>
   174f8:	str	r0, [fp, #-28]	; 0xffffffe4
   174fc:	b	1761c <__assert_fail@plt+0x63f4>
   17500:	mov	r3, #0
   17504:	str	r3, [fp, #-28]	; 0xffffffe4
   17508:	b	1761c <__assert_fail@plt+0x63f4>
   1750c:	sub	r3, fp, #44	; 0x2c
   17510:	mov	r2, #6
   17514:	ldr	r1, [fp, #-20]	; 0xffffffec
   17518:	mov	r0, r3
   1751c:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   17520:	str	r0, [fp, #-28]	; 0xffffffe4
   17524:	b	1761c <__assert_fail@plt+0x63f4>
   17528:	sub	r3, fp, #44	; 0x2c
   1752c:	mov	r2, #3
   17530:	ldr	r1, [fp, #-20]	; 0xffffffec
   17534:	mov	r0, r3
   17538:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   1753c:	str	r0, [fp, #-28]	; 0xffffffe4
   17540:	b	1761c <__assert_fail@plt+0x63f4>
   17544:	sub	r3, fp, #44	; 0x2c
   17548:	mov	r2, #1
   1754c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17550:	mov	r0, r3
   17554:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   17558:	str	r0, [fp, #-28]	; 0xffffffe4
   1755c:	b	1761c <__assert_fail@plt+0x63f4>
   17560:	sub	r3, fp, #44	; 0x2c
   17564:	mov	r2, #2
   17568:	ldr	r1, [fp, #-20]	; 0xffffffec
   1756c:	mov	r0, r3
   17570:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   17574:	str	r0, [fp, #-28]	; 0xffffffe4
   17578:	b	1761c <__assert_fail@plt+0x63f4>
   1757c:	sub	r3, fp, #44	; 0x2c
   17580:	mov	r2, #5
   17584:	ldr	r1, [fp, #-20]	; 0xffffffec
   17588:	mov	r0, r3
   1758c:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   17590:	str	r0, [fp, #-28]	; 0xffffffe4
   17594:	b	1761c <__assert_fail@plt+0x63f4>
   17598:	sub	r3, fp, #44	; 0x2c
   1759c:	mov	r2, #4
   175a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   175a4:	mov	r0, r3
   175a8:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   175ac:	str	r0, [fp, #-28]	; 0xffffffe4
   175b0:	b	1761c <__assert_fail@plt+0x63f4>
   175b4:	sub	r3, fp, #44	; 0x2c
   175b8:	mov	r1, #2
   175bc:	mov	r0, r3
   175c0:	bl	16e84 <__assert_fail@plt+0x5c5c>
   175c4:	str	r0, [fp, #-28]	; 0xffffffe4
   175c8:	b	1761c <__assert_fail@plt+0x63f4>
   175cc:	sub	r3, fp, #44	; 0x2c
   175d0:	mov	r2, #8
   175d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   175d8:	mov	r0, r3
   175dc:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   175e0:	str	r0, [fp, #-28]	; 0xffffffe4
   175e4:	b	1761c <__assert_fail@plt+0x63f4>
   175e8:	sub	r3, fp, #44	; 0x2c
   175ec:	mov	r2, #7
   175f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   175f4:	mov	r0, r3
   175f8:	bl	16fe8 <__assert_fail@plt+0x5dc0>
   175fc:	str	r0, [fp, #-28]	; 0xffffffe4
   17600:	b	1761c <__assert_fail@plt+0x63f4>
   17604:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17608:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1760c:	strd	r2, [r1]
   17610:	ldr	r3, [fp, #-8]
   17614:	orr	r3, r3, #2
   17618:	b	17674 <__assert_fail@plt+0x644c>
   1761c:	ldr	r2, [fp, #-8]
   17620:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17624:	orr	r3, r2, r3
   17628:	str	r3, [fp, #-8]
   1762c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17630:	ldr	r2, [r3]
   17634:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17638:	add	r2, r2, r3
   1763c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17640:	str	r2, [r3]
   17644:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17648:	ldr	r3, [r3]
   1764c:	ldrb	r3, [r3]
   17650:	cmp	r3, #0
   17654:	beq	17664 <__assert_fail@plt+0x643c>
   17658:	ldr	r3, [fp, #-8]
   1765c:	orr	r3, r3, #2
   17660:	str	r3, [fp, #-8]
   17664:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17668:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1766c:	strd	r2, [r1]
   17670:	ldr	r3, [fp, #-8]
   17674:	mov	r0, r3
   17678:	sub	sp, fp, #4
   1767c:	pop	{fp, pc}
   17680:	andeq	r9, r1, r0, ror #30
   17684:	andeq	r9, r1, r8, lsr #30
   17688:	andeq	r9, r1, r8, lsr pc
   1768c:	push	{r4, r5, fp, lr}
   17690:	add	fp, sp, #12
   17694:	sub	sp, sp, #16
   17698:	str	r0, [fp, #-24]	; 0xffffffe8
   1769c:	str	r1, [fp, #-28]	; 0xffffffe4
   176a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176a4:	cmp	r3, #0
   176a8:	beq	176b8 <__assert_fail@plt+0x6490>
   176ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176b0:	cmp	r3, #0
   176b4:	bne	176c8 <__assert_fail@plt+0x64a0>
   176b8:	mov	r3, #1
   176bc:	str	r3, [fp, #-28]	; 0xffffffe4
   176c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176c4:	str	r3, [fp, #-24]	; 0xffffffe8
   176c8:	mov	r1, #0
   176cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   176d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176d4:	umull	r2, r3, r2, r3
   176d8:	mov	r4, r3
   176dc:	mov	r5, #0
   176e0:	cmp	r4, #0
   176e4:	beq	176ec <__assert_fail@plt+0x64c4>
   176e8:	mov	r1, #1
   176ec:	cmp	r2, #0
   176f0:	bge	176f8 <__assert_fail@plt+0x64d0>
   176f4:	mov	r1, #1
   176f8:	mov	r3, r2
   176fc:	str	r3, [fp, #-20]	; 0xffffffec
   17700:	mov	r3, r1
   17704:	and	r3, r3, #1
   17708:	uxtb	r3, r3
   1770c:	cmp	r3, #0
   17710:	beq	1772c <__assert_fail@plt+0x6504>
   17714:	bl	11114 <__errno_location@plt>
   17718:	mov	r2, r0
   1771c:	mov	r3, #12
   17720:	str	r3, [r2]
   17724:	mov	r3, #0
   17728:	b	17744 <__assert_fail@plt+0x651c>
   1772c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17730:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17734:	bl	10f10 <calloc@plt>
   17738:	mov	r3, r0
   1773c:	str	r3, [fp, #-16]
   17740:	ldr	r3, [fp, #-16]
   17744:	mov	r0, r3
   17748:	sub	sp, fp, #12
   1774c:	pop	{r4, r5, fp, pc}
   17750:	push	{r4, r5, fp, lr}
   17754:	add	fp, sp, #12
   17758:	sub	sp, sp, #16
   1775c:	str	r0, [fp, #-24]	; 0xffffffe8
   17760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17764:	cmp	r3, #0
   17768:	bne	17774 <__assert_fail@plt+0x654c>
   1776c:	mov	r3, #1
   17770:	str	r3, [fp, #-24]	; 0xffffffe8
   17774:	mov	r1, #0
   17778:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1777c:	mov	r2, r3
   17780:	mov	r3, #0
   17784:	mov	r4, r3
   17788:	mov	r5, #0
   1778c:	cmp	r4, #0
   17790:	beq	17798 <__assert_fail@plt+0x6570>
   17794:	mov	r1, #1
   17798:	cmp	r2, #0
   1779c:	bge	177a4 <__assert_fail@plt+0x657c>
   177a0:	mov	r1, #1
   177a4:	mov	r3, r2
   177a8:	str	r3, [fp, #-20]	; 0xffffffec
   177ac:	mov	r3, r1
   177b0:	and	r3, r3, #1
   177b4:	uxtb	r3, r3
   177b8:	cmp	r3, #0
   177bc:	beq	177d8 <__assert_fail@plt+0x65b0>
   177c0:	bl	11114 <__errno_location@plt>
   177c4:	mov	r2, r0
   177c8:	mov	r3, #12
   177cc:	str	r3, [r2]
   177d0:	mov	r3, #0
   177d4:	b	177ec <__assert_fail@plt+0x65c4>
   177d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   177dc:	bl	11084 <malloc@plt>
   177e0:	mov	r3, r0
   177e4:	str	r3, [fp, #-16]
   177e8:	ldr	r3, [fp, #-16]
   177ec:	mov	r0, r3
   177f0:	sub	sp, fp, #12
   177f4:	pop	{r4, r5, fp, pc}
   177f8:	push	{r4, r5, fp, lr}
   177fc:	add	fp, sp, #12
   17800:	sub	sp, sp, #16
   17804:	str	r0, [fp, #-24]	; 0xffffffe8
   17808:	str	r1, [fp, #-28]	; 0xffffffe4
   1780c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17810:	cmp	r3, #0
   17814:	bne	17828 <__assert_fail@plt+0x6600>
   17818:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1781c:	bl	17750 <__assert_fail@plt+0x6528>
   17820:	mov	r3, r0
   17824:	b	178bc <__assert_fail@plt+0x6694>
   17828:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1782c:	cmp	r3, #0
   17830:	bne	17844 <__assert_fail@plt+0x661c>
   17834:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17838:	bl	12634 <__assert_fail@plt+0x140c>
   1783c:	mov	r3, #0
   17840:	b	178bc <__assert_fail@plt+0x6694>
   17844:	mov	r1, #0
   17848:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1784c:	mov	r2, r3
   17850:	mov	r3, #0
   17854:	mov	r4, r3
   17858:	mov	r5, #0
   1785c:	cmp	r4, #0
   17860:	beq	17868 <__assert_fail@plt+0x6640>
   17864:	mov	r1, #1
   17868:	cmp	r2, #0
   1786c:	bge	17874 <__assert_fail@plt+0x664c>
   17870:	mov	r1, #1
   17874:	mov	r3, r2
   17878:	str	r3, [fp, #-20]	; 0xffffffec
   1787c:	mov	r3, r1
   17880:	and	r3, r3, #1
   17884:	uxtb	r3, r3
   17888:	cmp	r3, #0
   1788c:	beq	178a8 <__assert_fail@plt+0x6680>
   17890:	bl	11114 <__errno_location@plt>
   17894:	mov	r2, r0
   17898:	mov	r3, #12
   1789c:	str	r3, [r2]
   178a0:	mov	r3, #0
   178a4:	b	178bc <__assert_fail@plt+0x6694>
   178a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   178ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   178b0:	bl	10fd0 <realloc@plt>
   178b4:	str	r0, [fp, #-16]
   178b8:	ldr	r3, [fp, #-16]
   178bc:	mov	r0, r3
   178c0:	sub	sp, fp, #12
   178c4:	pop	{r4, r5, fp, pc}
   178c8:	push	{r4, r5, fp, lr}
   178cc:	add	fp, sp, #12
   178d0:	sub	sp, sp, #16
   178d4:	str	r0, [fp, #-24]	; 0xffffffe8
   178d8:	str	r1, [fp, #-28]	; 0xffffffe4
   178dc:	ldr	r5, [fp, #-24]	; 0xffffffe8
   178e0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   178e4:	cmp	r5, r4
   178e8:	bne	178f4 <__assert_fail@plt+0x66cc>
   178ec:	mov	r3, #0
   178f0:	b	17954 <__assert_fail@plt+0x672c>
   178f4:	ldrb	r3, [r5]
   178f8:	mov	r0, r3
   178fc:	bl	188e8 <__assert_fail@plt+0x76c0>
   17900:	mov	r3, r0
   17904:	strb	r3, [fp, #-13]
   17908:	ldrb	r3, [r4]
   1790c:	mov	r0, r3
   17910:	bl	188e8 <__assert_fail@plt+0x76c0>
   17914:	mov	r3, r0
   17918:	strb	r3, [fp, #-14]
   1791c:	ldrb	r3, [fp, #-13]
   17920:	cmp	r3, #0
   17924:	beq	17944 <__assert_fail@plt+0x671c>
   17928:	add	r5, r5, #1
   1792c:	add	r4, r4, #1
   17930:	ldrb	r2, [fp, #-13]
   17934:	ldrb	r3, [fp, #-14]
   17938:	cmp	r2, r3
   1793c:	beq	178f4 <__assert_fail@plt+0x66cc>
   17940:	b	17948 <__assert_fail@plt+0x6720>
   17944:	nop			; (mov r0, r0)
   17948:	ldrb	r2, [fp, #-13]
   1794c:	ldrb	r3, [fp, #-14]
   17950:	sub	r3, r2, r3
   17954:	mov	r0, r3
   17958:	sub	sp, fp, #12
   1795c:	pop	{r4, r5, fp, pc}
   17960:	push	{fp, lr}
   17964:	add	fp, sp, #4
   17968:	sub	sp, sp, #16
   1796c:	str	r0, [fp, #-16]
   17970:	ldr	r0, [fp, #-16]
   17974:	bl	1103c <__fpending@plt>
   17978:	mov	r3, r0
   1797c:	cmp	r3, #0
   17980:	movne	r3, #1
   17984:	moveq	r3, #0
   17988:	strb	r3, [fp, #-5]
   1798c:	ldr	r0, [fp, #-16]
   17990:	bl	11048 <ferror_unlocked@plt>
   17994:	mov	r3, r0
   17998:	cmp	r3, #0
   1799c:	movne	r3, #1
   179a0:	moveq	r3, #0
   179a4:	strb	r3, [fp, #-6]
   179a8:	ldr	r0, [fp, #-16]
   179ac:	bl	17a38 <__assert_fail@plt+0x6810>
   179b0:	mov	r3, r0
   179b4:	cmp	r3, #0
   179b8:	movne	r3, #1
   179bc:	moveq	r3, #0
   179c0:	strb	r3, [fp, #-7]
   179c4:	ldrb	r3, [fp, #-6]
   179c8:	cmp	r3, #0
   179cc:	bne	179fc <__assert_fail@plt+0x67d4>
   179d0:	ldrb	r3, [fp, #-7]
   179d4:	cmp	r3, #0
   179d8:	beq	17a28 <__assert_fail@plt+0x6800>
   179dc:	ldrb	r3, [fp, #-5]
   179e0:	cmp	r3, #0
   179e4:	bne	179fc <__assert_fail@plt+0x67d4>
   179e8:	bl	11114 <__errno_location@plt>
   179ec:	mov	r3, r0
   179f0:	ldr	r3, [r3]
   179f4:	cmp	r3, #9
   179f8:	beq	17a28 <__assert_fail@plt+0x6800>
   179fc:	ldrb	r3, [fp, #-7]
   17a00:	eor	r3, r3, #1
   17a04:	uxtb	r3, r3
   17a08:	cmp	r3, #0
   17a0c:	beq	17a20 <__assert_fail@plt+0x67f8>
   17a10:	bl	11114 <__errno_location@plt>
   17a14:	mov	r2, r0
   17a18:	mov	r3, #0
   17a1c:	str	r3, [r2]
   17a20:	mvn	r3, #0
   17a24:	b	17a2c <__assert_fail@plt+0x6804>
   17a28:	mov	r3, #0
   17a2c:	mov	r0, r3
   17a30:	sub	sp, fp, #4
   17a34:	pop	{fp, pc}
   17a38:	push	{fp, lr}
   17a3c:	add	fp, sp, #4
   17a40:	sub	sp, sp, #32
   17a44:	str	r0, [fp, #-24]	; 0xffffffe8
   17a48:	mov	r3, #0
   17a4c:	str	r3, [fp, #-8]
   17a50:	mov	r3, #0
   17a54:	str	r3, [fp, #-12]
   17a58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a5c:	bl	1115c <fileno@plt>
   17a60:	str	r0, [fp, #-16]
   17a64:	ldr	r3, [fp, #-16]
   17a68:	cmp	r3, #0
   17a6c:	bge	17a80 <__assert_fail@plt+0x6858>
   17a70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a74:	bl	11174 <fclose@plt>
   17a78:	mov	r3, r0
   17a7c:	b	17b24 <__assert_fail@plt+0x68fc>
   17a80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a84:	bl	1109c <__freading@plt>
   17a88:	mov	r3, r0
   17a8c:	cmp	r3, #0
   17a90:	beq	17acc <__assert_fail@plt+0x68a4>
   17a94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a98:	bl	1115c <fileno@plt>
   17a9c:	mov	r1, r0
   17aa0:	mov	r3, #1
   17aa4:	str	r3, [sp]
   17aa8:	mov	r2, #0
   17aac:	mov	r3, #0
   17ab0:	mov	r0, r1
   17ab4:	bl	11018 <lseek64@plt>
   17ab8:	mvn	r2, #0
   17abc:	mvn	r3, #0
   17ac0:	cmp	r1, r3
   17ac4:	cmpeq	r0, r2
   17ac8:	beq	17af0 <__assert_fail@plt+0x68c8>
   17acc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ad0:	bl	17b78 <__assert_fail@plt+0x6950>
   17ad4:	mov	r3, r0
   17ad8:	cmp	r3, #0
   17adc:	beq	17af0 <__assert_fail@plt+0x68c8>
   17ae0:	bl	11114 <__errno_location@plt>
   17ae4:	mov	r3, r0
   17ae8:	ldr	r3, [r3]
   17aec:	str	r3, [fp, #-8]
   17af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17af4:	bl	11174 <fclose@plt>
   17af8:	str	r0, [fp, #-12]
   17afc:	ldr	r3, [fp, #-8]
   17b00:	cmp	r3, #0
   17b04:	beq	17b20 <__assert_fail@plt+0x68f8>
   17b08:	bl	11114 <__errno_location@plt>
   17b0c:	mov	r2, r0
   17b10:	ldr	r3, [fp, #-8]
   17b14:	str	r3, [r2]
   17b18:	mvn	r3, #0
   17b1c:	str	r3, [fp, #-12]
   17b20:	ldr	r3, [fp, #-12]
   17b24:	mov	r0, r3
   17b28:	sub	sp, fp, #4
   17b2c:	pop	{fp, pc}
   17b30:	push	{fp, lr}
   17b34:	add	fp, sp, #4
   17b38:	sub	sp, sp, #16
   17b3c:	str	r0, [fp, #-8]
   17b40:	ldr	r3, [fp, #-8]
   17b44:	ldr	r3, [r3]
   17b48:	and	r3, r3, #256	; 0x100
   17b4c:	cmp	r3, #0
   17b50:	beq	17b6c <__assert_fail@plt+0x6944>
   17b54:	mov	r3, #1
   17b58:	str	r3, [sp]
   17b5c:	mov	r2, #0
   17b60:	mov	r3, #0
   17b64:	ldr	r0, [fp, #-8]
   17b68:	bl	17bd8 <__assert_fail@plt+0x69b0>
   17b6c:	nop			; (mov r0, r0)
   17b70:	sub	sp, fp, #4
   17b74:	pop	{fp, pc}
   17b78:	push	{fp, lr}
   17b7c:	add	fp, sp, #4
   17b80:	sub	sp, sp, #8
   17b84:	str	r0, [fp, #-8]
   17b88:	ldr	r3, [fp, #-8]
   17b8c:	cmp	r3, #0
   17b90:	beq	17ba8 <__assert_fail@plt+0x6980>
   17b94:	ldr	r0, [fp, #-8]
   17b98:	bl	1109c <__freading@plt>
   17b9c:	mov	r3, r0
   17ba0:	cmp	r3, #0
   17ba4:	bne	17bb8 <__assert_fail@plt+0x6990>
   17ba8:	ldr	r0, [fp, #-8]
   17bac:	bl	10f70 <fflush@plt>
   17bb0:	mov	r3, r0
   17bb4:	b	17bcc <__assert_fail@plt+0x69a4>
   17bb8:	ldr	r0, [fp, #-8]
   17bbc:	bl	17b30 <__assert_fail@plt+0x6908>
   17bc0:	ldr	r0, [fp, #-8]
   17bc4:	bl	10f70 <fflush@plt>
   17bc8:	mov	r3, r0
   17bcc:	mov	r0, r3
   17bd0:	sub	sp, fp, #4
   17bd4:	pop	{fp, pc}
   17bd8:	push	{fp, lr}
   17bdc:	add	fp, sp, #4
   17be0:	sub	sp, sp, #32
   17be4:	str	r0, [fp, #-16]
   17be8:	strd	r2, [fp, #-28]	; 0xffffffe4
   17bec:	ldr	r3, [fp, #-16]
   17bf0:	ldr	r2, [r3, #8]
   17bf4:	ldr	r3, [fp, #-16]
   17bf8:	ldr	r3, [r3, #4]
   17bfc:	cmp	r2, r3
   17c00:	bne	17c98 <__assert_fail@plt+0x6a70>
   17c04:	ldr	r3, [fp, #-16]
   17c08:	ldr	r2, [r3, #20]
   17c0c:	ldr	r3, [fp, #-16]
   17c10:	ldr	r3, [r3, #16]
   17c14:	cmp	r2, r3
   17c18:	bne	17c98 <__assert_fail@plt+0x6a70>
   17c1c:	ldr	r3, [fp, #-16]
   17c20:	ldr	r3, [r3, #36]	; 0x24
   17c24:	cmp	r3, #0
   17c28:	bne	17c98 <__assert_fail@plt+0x6a70>
   17c2c:	ldr	r0, [fp, #-16]
   17c30:	bl	1115c <fileno@plt>
   17c34:	mov	r1, r0
   17c38:	ldr	r3, [fp, #4]
   17c3c:	str	r3, [sp]
   17c40:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17c44:	mov	r0, r1
   17c48:	bl	11018 <lseek64@plt>
   17c4c:	strd	r0, [fp, #-12]
   17c50:	ldrd	r2, [fp, #-12]
   17c54:	mvn	r0, #0
   17c58:	mvn	r1, #0
   17c5c:	cmp	r3, r1
   17c60:	cmpeq	r2, r0
   17c64:	bne	17c70 <__assert_fail@plt+0x6a48>
   17c68:	mvn	r3, #0
   17c6c:	b	17cb0 <__assert_fail@plt+0x6a88>
   17c70:	ldr	r3, [fp, #-16]
   17c74:	ldr	r3, [r3]
   17c78:	bic	r2, r3, #16
   17c7c:	ldr	r3, [fp, #-16]
   17c80:	str	r2, [r3]
   17c84:	ldr	r1, [fp, #-16]
   17c88:	ldrd	r2, [fp, #-12]
   17c8c:	strd	r2, [r1, #80]	; 0x50
   17c90:	mov	r3, #0
   17c94:	b	17cb0 <__assert_fail@plt+0x6a88>
   17c98:	ldr	r3, [fp, #4]
   17c9c:	str	r3, [sp]
   17ca0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17ca4:	ldr	r0, [fp, #-16]
   17ca8:	bl	11180 <fseeko64@plt>
   17cac:	mov	r3, r0
   17cb0:	mov	r0, r3
   17cb4:	sub	sp, fp, #4
   17cb8:	pop	{fp, pc}
   17cbc:	push	{fp, lr}
   17cc0:	add	fp, sp, #4
   17cc4:	bl	11114 <__errno_location@plt>
   17cc8:	mov	r2, r0
   17ccc:	mov	r3, #12
   17cd0:	str	r3, [r2]
   17cd4:	mov	r3, #0
   17cd8:	mov	r0, r3
   17cdc:	pop	{fp, pc}
   17ce0:	push	{fp, lr}
   17ce4:	add	fp, sp, #4
   17ce8:	sub	sp, sp, #8
   17cec:	str	r0, [fp, #-8]
   17cf0:	ldr	r3, [fp, #-8]
   17cf4:	mov	r0, r3
   17cf8:	bl	17750 <__assert_fail@plt+0x6528>
   17cfc:	mov	r3, r0
   17d00:	mov	r0, r3
   17d04:	sub	sp, fp, #4
   17d08:	pop	{fp, pc}
   17d0c:	push	{fp, lr}
   17d10:	add	fp, sp, #4
   17d14:	sub	sp, sp, #8
   17d18:	str	r0, [fp, #-8]
   17d1c:	str	r1, [fp, #-12]
   17d20:	ldr	r3, [fp, #-12]
   17d24:	cmp	r3, #0
   17d28:	moveq	r3, #1
   17d2c:	movne	r3, #0
   17d30:	uxtb	r3, r3
   17d34:	mov	r2, r3
   17d38:	ldr	r3, [fp, #-12]
   17d3c:	orr	r3, r2, r3
   17d40:	mov	r1, r3
   17d44:	ldr	r0, [fp, #-8]
   17d48:	bl	177f8 <__assert_fail@plt+0x65d0>
   17d4c:	mov	r3, r0
   17d50:	mov	r0, r3
   17d54:	sub	sp, fp, #4
   17d58:	pop	{fp, pc}
   17d5c:	push	{fp, lr}
   17d60:	add	fp, sp, #4
   17d64:	sub	sp, sp, #8
   17d68:	str	r0, [fp, #-8]
   17d6c:	str	r1, [fp, #-12]
   17d70:	ldr	r3, [fp, #-8]
   17d74:	ldr	r2, [fp, #-12]
   17d78:	mov	r1, r2
   17d7c:	mov	r0, r3
   17d80:	bl	1768c <__assert_fail@plt+0x6464>
   17d84:	mov	r3, r0
   17d88:	mov	r0, r3
   17d8c:	sub	sp, fp, #4
   17d90:	pop	{fp, pc}
   17d94:	push	{fp, lr}
   17d98:	add	fp, sp, #4
   17d9c:	sub	sp, sp, #16
   17da0:	str	r0, [fp, #-8]
   17da4:	str	r1, [fp, #-12]
   17da8:	str	r2, [fp, #-16]
   17dac:	ldr	r3, [fp, #-12]
   17db0:	cmp	r3, #0
   17db4:	beq	17dc4 <__assert_fail@plt+0x6b9c>
   17db8:	ldr	r3, [fp, #-16]
   17dbc:	cmp	r3, #0
   17dc0:	bne	17dd4 <__assert_fail@plt+0x6bac>
   17dc4:	mov	r3, #1
   17dc8:	str	r3, [fp, #-16]
   17dcc:	ldr	r3, [fp, #-16]
   17dd0:	str	r3, [fp, #-12]
   17dd4:	ldr	r3, [fp, #-12]
   17dd8:	ldr	r2, [fp, #-16]
   17ddc:	mov	r1, r3
   17de0:	ldr	r0, [fp, #-8]
   17de4:	bl	183c4 <__assert_fail@plt+0x719c>
   17de8:	mov	r3, r0
   17dec:	mov	r0, r3
   17df0:	sub	sp, fp, #4
   17df4:	pop	{fp, pc}
   17df8:	push	{fp, lr}
   17dfc:	add	fp, sp, #4
   17e00:	sub	sp, sp, #24
   17e04:	strd	r0, [fp, #-20]	; 0xffffffec
   17e08:	str	r2, [fp, #-24]	; 0xffffffe8
   17e0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e10:	add	r3, r3, #20
   17e14:	str	r3, [fp, #-8]
   17e18:	ldr	r3, [fp, #-8]
   17e1c:	mov	r2, #0
   17e20:	strb	r2, [r3]
   17e24:	ldr	r3, [fp, #-8]
   17e28:	sub	r3, r3, #1
   17e2c:	str	r3, [fp, #-8]
   17e30:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17e34:	mov	r2, #10
   17e38:	mov	r3, #0
   17e3c:	bl	191c8 <__assert_fail@plt+0x7fa0>
   17e40:	uxtb	r3, r2
   17e44:	add	r3, r3, #48	; 0x30
   17e48:	uxtb	r2, r3
   17e4c:	ldr	r3, [fp, #-8]
   17e50:	strb	r2, [r3]
   17e54:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17e58:	mov	r2, #10
   17e5c:	mov	r3, #0
   17e60:	bl	191c8 <__assert_fail@plt+0x7fa0>
   17e64:	mov	r2, r0
   17e68:	mov	r3, r1
   17e6c:	strd	r2, [fp, #-20]	; 0xffffffec
   17e70:	ldrd	r2, [fp, #-20]	; 0xffffffec
   17e74:	orrs	r3, r2, r3
   17e78:	bne	17e24 <__assert_fail@plt+0x6bfc>
   17e7c:	ldr	r3, [fp, #-8]
   17e80:	mov	r0, r3
   17e84:	sub	sp, fp, #4
   17e88:	pop	{fp, pc}
   17e8c:	push	{fp, lr}
   17e90:	add	fp, sp, #4
   17e94:	sub	sp, sp, #8
   17e98:	mov	r0, #14
   17e9c:	bl	111bc <nl_langinfo@plt>
   17ea0:	str	r0, [fp, #-8]
   17ea4:	ldr	r3, [fp, #-8]
   17ea8:	cmp	r3, #0
   17eac:	bne	17eb8 <__assert_fail@plt+0x6c90>
   17eb0:	ldr	r3, [pc, #40]	; 17ee0 <__assert_fail@plt+0x6cb8>
   17eb4:	str	r3, [fp, #-8]
   17eb8:	ldr	r3, [fp, #-8]
   17ebc:	ldrb	r3, [r3]
   17ec0:	cmp	r3, #0
   17ec4:	bne	17ed0 <__assert_fail@plt+0x6ca8>
   17ec8:	ldr	r3, [pc, #20]	; 17ee4 <__assert_fail@plt+0x6cbc>
   17ecc:	str	r3, [fp, #-8]
   17ed0:	ldr	r3, [fp, #-8]
   17ed4:	mov	r0, r3
   17ed8:	sub	sp, fp, #4
   17edc:	pop	{fp, pc}
   17ee0:	andeq	r9, r1, ip, ror #30
   17ee4:	andeq	r9, r1, r0, ror pc
   17ee8:	push	{fp, lr}
   17eec:	add	fp, sp, #4
   17ef0:	sub	sp, sp, #32
   17ef4:	str	r0, [fp, #-24]	; 0xffffffe8
   17ef8:	str	r1, [fp, #-28]	; 0xffffffe4
   17efc:	str	r2, [fp, #-32]	; 0xffffffe0
   17f00:	str	r3, [fp, #-36]	; 0xffffffdc
   17f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f08:	cmp	r3, #0
   17f0c:	bne	17f18 <__assert_fail@plt+0x6cf0>
   17f10:	sub	r3, fp, #16
   17f14:	str	r3, [fp, #-24]	; 0xffffffe8
   17f18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17f20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17f24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17f28:	bl	11054 <mbrtowc@plt>
   17f2c:	str	r0, [fp, #-8]
   17f30:	ldr	r3, [fp, #-8]
   17f34:	cmn	r3, #3
   17f38:	bls	17f84 <__assert_fail@plt+0x6d5c>
   17f3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f40:	cmp	r3, #0
   17f44:	beq	17f84 <__assert_fail@plt+0x6d5c>
   17f48:	mov	r0, #0
   17f4c:	bl	18b78 <__assert_fail@plt+0x7950>
   17f50:	mov	r3, r0
   17f54:	eor	r3, r3, #1
   17f58:	uxtb	r3, r3
   17f5c:	cmp	r3, #0
   17f60:	beq	17f84 <__assert_fail@plt+0x6d5c>
   17f64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f68:	ldrb	r3, [r3]
   17f6c:	strb	r3, [fp, #-9]
   17f70:	ldrb	r2, [fp, #-9]
   17f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f78:	str	r2, [r3]
   17f7c:	mov	r3, #1
   17f80:	b	17f88 <__assert_fail@plt+0x6d60>
   17f84:	ldr	r3, [fp, #-8]
   17f88:	mov	r0, r3
   17f8c:	sub	sp, fp, #4
   17f90:	pop	{fp, pc}
   17f94:	push	{r4, r5, fp, lr}
   17f98:	add	fp, sp, #12
   17f9c:	sub	sp, sp, #16
   17fa0:	str	r0, [fp, #-24]	; 0xffffffe8
   17fa4:	str	r1, [fp, #-28]	; 0xffffffe4
   17fa8:	mov	ip, #0
   17fac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17fb0:	mov	r0, r1
   17fb4:	mov	r1, #0
   17fb8:	lsl	r3, r1, #2
   17fbc:	orr	r3, r3, r0, lsr #30
   17fc0:	lsl	r2, r0, #2
   17fc4:	mov	r4, r3
   17fc8:	mov	r5, #0
   17fcc:	cmp	r4, #0
   17fd0:	beq	17fd8 <__assert_fail@plt+0x6db0>
   17fd4:	mov	ip, #1
   17fd8:	cmp	r2, #0
   17fdc:	bge	17fe4 <__assert_fail@plt+0x6dbc>
   17fe0:	mov	ip, #1
   17fe4:	mov	r3, r2
   17fe8:	str	r3, [fp, #-16]
   17fec:	mov	r3, ip
   17ff0:	and	r3, r3, #1
   17ff4:	uxtb	r3, r3
   17ff8:	cmp	r3, #0
   17ffc:	beq	18018 <__assert_fail@plt+0x6df0>
   18000:	bl	11114 <__errno_location@plt>
   18004:	mov	r2, r0
   18008:	mov	r3, #12
   1800c:	str	r3, [r2]
   18010:	mov	r3, #0
   18014:	b	18030 <__assert_fail@plt+0x6e08>
   18018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1801c:	lsl	r3, r3, #2
   18020:	mov	r1, r3
   18024:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18028:	bl	177f8 <__assert_fail@plt+0x65d0>
   1802c:	mov	r3, r0
   18030:	mov	r0, r3
   18034:	sub	sp, fp, #12
   18038:	pop	{r4, r5, fp, pc}
   1803c:	push	{fp, lr}
   18040:	add	fp, sp, #4
   18044:	sub	sp, sp, #48	; 0x30
   18048:	str	r0, [fp, #-40]	; 0xffffffd8
   1804c:	str	r1, [fp, #-44]	; 0xffffffd4
   18050:	str	r2, [fp, #-48]	; 0xffffffd0
   18054:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18058:	cmp	r3, #0
   1805c:	beq	18130 <__assert_fail@plt+0x6f08>
   18060:	mov	r3, #10
   18064:	str	r3, [fp, #-36]	; 0xffffffdc
   18068:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1806c:	mov	r1, r3
   18070:	mov	r0, #0
   18074:	bl	17f94 <__assert_fail@plt+0x6d6c>
   18078:	str	r0, [fp, #-12]
   1807c:	ldr	r3, [fp, #-12]
   18080:	cmp	r3, #0
   18084:	bne	18090 <__assert_fail@plt+0x6e68>
   18088:	mvn	r3, #0
   1808c:	b	183b8 <__assert_fail@plt+0x7190>
   18090:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18094:	str	r3, [fp, #-20]	; 0xffffffec
   18098:	sub	r3, fp, #36	; 0x24
   1809c:	ldr	r2, [fp, #-12]
   180a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   180a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   180a8:	bl	1112c <getgrouplist@plt>
   180ac:	str	r0, [fp, #-8]
   180b0:	ldr	r3, [fp, #-8]
   180b4:	cmp	r3, #0
   180b8:	bge	180d8 <__assert_fail@plt+0x6eb0>
   180bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   180c4:	cmp	r2, r3
   180c8:	bne	180d8 <__assert_fail@plt+0x6eb0>
   180cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180d0:	lsl	r3, r3, #1
   180d4:	str	r3, [fp, #-36]	; 0xffffffdc
   180d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180dc:	mov	r1, r3
   180e0:	ldr	r0, [fp, #-12]
   180e4:	bl	17f94 <__assert_fail@plt+0x6d6c>
   180e8:	str	r0, [fp, #-24]	; 0xffffffe8
   180ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180f0:	cmp	r3, #0
   180f4:	bne	18108 <__assert_fail@plt+0x6ee0>
   180f8:	ldr	r0, [fp, #-12]
   180fc:	bl	12634 <__assert_fail@plt+0x140c>
   18100:	mvn	r3, #0
   18104:	b	183b8 <__assert_fail@plt+0x7190>
   18108:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1810c:	str	r3, [fp, #-12]
   18110:	ldr	r3, [fp, #-8]
   18114:	cmp	r3, #0
   18118:	blt	18090 <__assert_fail@plt+0x6e68>
   1811c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18120:	ldr	r2, [fp, #-12]
   18124:	str	r2, [r3]
   18128:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1812c:	b	183b8 <__assert_fail@plt+0x7190>
   18130:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18134:	cmp	r3, #0
   18138:	beq	18158 <__assert_fail@plt+0x6f30>
   1813c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18140:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18144:	mov	r1, #0
   18148:	mov	r0, #0
   1814c:	bl	18968 <__assert_fail@plt+0x7740>
   18150:	mov	r3, r0
   18154:	b	18168 <__assert_fail@plt+0x6f40>
   18158:	mov	r1, #0
   1815c:	mov	r0, #0
   18160:	bl	111d4 <getgroups@plt>
   18164:	mov	r3, r0
   18168:	str	r3, [fp, #-36]	; 0xffffffdc
   1816c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18170:	cmp	r3, #0
   18174:	bge	181e0 <__assert_fail@plt+0x6fb8>
   18178:	bl	11114 <__errno_location@plt>
   1817c:	mov	r3, r0
   18180:	ldr	r3, [r3]
   18184:	cmp	r3, #38	; 0x26
   18188:	bne	181d8 <__assert_fail@plt+0x6fb0>
   1818c:	mov	r1, #1
   18190:	mov	r0, #0
   18194:	bl	17f94 <__assert_fail@plt+0x6d6c>
   18198:	str	r0, [fp, #-12]
   1819c:	ldr	r3, [fp, #-12]
   181a0:	cmp	r3, #0
   181a4:	beq	181d8 <__assert_fail@plt+0x6fb0>
   181a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   181ac:	ldr	r2, [fp, #-12]
   181b0:	str	r2, [r3]
   181b4:	ldr	r3, [fp, #-12]
   181b8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   181bc:	str	r2, [r3]
   181c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   181c4:	cmn	r3, #1
   181c8:	movne	r3, #1
   181cc:	moveq	r3, #0
   181d0:	uxtb	r3, r3
   181d4:	b	183b8 <__assert_fail@plt+0x7190>
   181d8:	mvn	r3, #0
   181dc:	b	183b8 <__assert_fail@plt+0x7190>
   181e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   181e4:	cmp	r3, #0
   181e8:	beq	18204 <__assert_fail@plt+0x6fdc>
   181ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   181f0:	cmp	r3, #0
   181f4:	bne	18210 <__assert_fail@plt+0x6fe8>
   181f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   181fc:	cmn	r3, #1
   18200:	beq	18210 <__assert_fail@plt+0x6fe8>
   18204:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18208:	add	r3, r3, #1
   1820c:	str	r3, [fp, #-36]	; 0xffffffdc
   18210:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18214:	mov	r1, r3
   18218:	mov	r0, #0
   1821c:	bl	17f94 <__assert_fail@plt+0x6d6c>
   18220:	str	r0, [fp, #-12]
   18224:	ldr	r3, [fp, #-12]
   18228:	cmp	r3, #0
   1822c:	bne	18238 <__assert_fail@plt+0x7010>
   18230:	mvn	r3, #0
   18234:	b	183b8 <__assert_fail@plt+0x7190>
   18238:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1823c:	cmp	r3, #0
   18240:	beq	18260 <__assert_fail@plt+0x7038>
   18244:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18248:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1824c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18250:	ldr	r1, [fp, #-12]
   18254:	bl	18968 <__assert_fail@plt+0x7740>
   18258:	mov	r3, r0
   1825c:	b	182a8 <__assert_fail@plt+0x7080>
   18260:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18264:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18268:	cmn	r2, #1
   1826c:	movne	r2, #1
   18270:	moveq	r2, #0
   18274:	uxtb	r2, r2
   18278:	sub	r0, r3, r2
   1827c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18280:	cmn	r3, #1
   18284:	beq	18290 <__assert_fail@plt+0x7068>
   18288:	mov	r3, #4
   1828c:	b	18294 <__assert_fail@plt+0x706c>
   18290:	mov	r3, #0
   18294:	ldr	r2, [fp, #-12]
   18298:	add	r3, r2, r3
   1829c:	mov	r1, r3
   182a0:	bl	111d4 <getgroups@plt>
   182a4:	mov	r3, r0
   182a8:	str	r3, [fp, #-8]
   182ac:	ldr	r3, [fp, #-8]
   182b0:	cmp	r3, #0
   182b4:	bge	182c8 <__assert_fail@plt+0x70a0>
   182b8:	ldr	r0, [fp, #-12]
   182bc:	bl	12634 <__assert_fail@plt+0x140c>
   182c0:	mvn	r3, #0
   182c4:	b	183b8 <__assert_fail@plt+0x7190>
   182c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   182cc:	cmp	r3, #0
   182d0:	bne	182f8 <__assert_fail@plt+0x70d0>
   182d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   182d8:	cmn	r3, #1
   182dc:	beq	182f8 <__assert_fail@plt+0x70d0>
   182e0:	ldr	r3, [fp, #-12]
   182e4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   182e8:	str	r2, [r3]
   182ec:	ldr	r3, [fp, #-8]
   182f0:	add	r3, r3, #1
   182f4:	str	r3, [fp, #-8]
   182f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   182fc:	ldr	r2, [fp, #-12]
   18300:	str	r2, [r3]
   18304:	ldr	r3, [fp, #-8]
   18308:	cmp	r3, #1
   1830c:	ble	183b4 <__assert_fail@plt+0x718c>
   18310:	ldr	r3, [fp, #-12]
   18314:	ldr	r3, [r3]
   18318:	str	r3, [fp, #-28]	; 0xffffffe4
   1831c:	ldr	r3, [fp, #-8]
   18320:	lsl	r3, r3, #2
   18324:	ldr	r2, [fp, #-12]
   18328:	add	r3, r2, r3
   1832c:	str	r3, [fp, #-32]	; 0xffffffe0
   18330:	ldr	r3, [fp, #-12]
   18334:	add	r3, r3, #4
   18338:	str	r3, [fp, #-16]
   1833c:	b	183a4 <__assert_fail@plt+0x717c>
   18340:	ldr	r3, [fp, #-16]
   18344:	ldr	r2, [r3]
   18348:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1834c:	cmp	r2, r3
   18350:	beq	1836c <__assert_fail@plt+0x7144>
   18354:	ldr	r3, [fp, #-16]
   18358:	ldr	r2, [r3]
   1835c:	ldr	r3, [fp, #-12]
   18360:	ldr	r3, [r3]
   18364:	cmp	r2, r3
   18368:	bne	1837c <__assert_fail@plt+0x7154>
   1836c:	ldr	r3, [fp, #-8]
   18370:	sub	r3, r3, #1
   18374:	str	r3, [fp, #-8]
   18378:	b	18398 <__assert_fail@plt+0x7170>
   1837c:	ldr	r3, [fp, #-12]
   18380:	add	r3, r3, #4
   18384:	str	r3, [fp, #-12]
   18388:	ldr	r3, [fp, #-16]
   1838c:	ldr	r2, [r3]
   18390:	ldr	r3, [fp, #-12]
   18394:	str	r2, [r3]
   18398:	ldr	r3, [fp, #-16]
   1839c:	add	r3, r3, #4
   183a0:	str	r3, [fp, #-16]
   183a4:	ldr	r2, [fp, #-16]
   183a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   183ac:	cmp	r2, r3
   183b0:	bcc	18340 <__assert_fail@plt+0x7118>
   183b4:	ldr	r3, [fp, #-8]
   183b8:	mov	r0, r3
   183bc:	sub	sp, fp, #4
   183c0:	pop	{fp, pc}
   183c4:	push	{fp, lr}
   183c8:	add	fp, sp, #4
   183cc:	sub	sp, sp, #24
   183d0:	str	r0, [fp, #-16]
   183d4:	str	r1, [fp, #-20]	; 0xffffffec
   183d8:	str	r2, [fp, #-24]	; 0xffffffe8
   183dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183e0:	cmp	r3, #0
   183e4:	beq	18420 <__assert_fail@plt+0x71f8>
   183e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   183ec:	mvn	r0, #0
   183f0:	bl	18d7c <__assert_fail@plt+0x7b54>
   183f4:	mov	r3, r0
   183f8:	mov	r2, r3
   183fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   18400:	cmp	r2, r3
   18404:	bcs	18420 <__assert_fail@plt+0x71f8>
   18408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1840c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18410:	mul	r3, r2, r3
   18414:	str	r3, [fp, #-8]
   18418:	mov	r3, #1
   1841c:	b	18434 <__assert_fail@plt+0x720c>
   18420:	ldr	r3, [fp, #-20]	; 0xffffffec
   18424:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18428:	mul	r3, r2, r3
   1842c:	str	r3, [fp, #-8]
   18430:	mov	r3, #0
   18434:	cmp	r3, #0
   18438:	beq	18454 <__assert_fail@plt+0x722c>
   1843c:	bl	11114 <__errno_location@plt>
   18440:	mov	r2, r0
   18444:	mov	r3, #12
   18448:	str	r3, [r2]
   1844c:	mov	r3, #0
   18450:	b	18468 <__assert_fail@plt+0x7240>
   18454:	ldr	r3, [fp, #-8]
   18458:	mov	r1, r3
   1845c:	ldr	r0, [fp, #-16]
   18460:	bl	177f8 <__assert_fail@plt+0x65d0>
   18464:	mov	r3, r0
   18468:	mov	r0, r3
   1846c:	sub	sp, fp, #4
   18470:	pop	{fp, pc}
   18474:	push	{fp}		; (str fp, [sp, #-4]!)
   18478:	add	fp, sp, #0
   1847c:	sub	sp, sp, #12
   18480:	str	r0, [fp, #-8]
   18484:	ldr	r3, [fp, #-8]
   18488:	cmp	r3, #90	; 0x5a
   1848c:	bgt	184a8 <__assert_fail@plt+0x7280>
   18490:	cmp	r3, #65	; 0x41
   18494:	bge	184b4 <__assert_fail@plt+0x728c>
   18498:	sub	r3, r3, #48	; 0x30
   1849c:	cmp	r3, #9
   184a0:	bhi	184bc <__assert_fail@plt+0x7294>
   184a4:	b	184b4 <__assert_fail@plt+0x728c>
   184a8:	sub	r3, r3, #97	; 0x61
   184ac:	cmp	r3, #25
   184b0:	bhi	184bc <__assert_fail@plt+0x7294>
   184b4:	mov	r3, #1
   184b8:	b	184c0 <__assert_fail@plt+0x7298>
   184bc:	mov	r3, #0
   184c0:	mov	r0, r3
   184c4:	add	sp, fp, #0
   184c8:	pop	{fp}		; (ldr fp, [sp], #4)
   184cc:	bx	lr
   184d0:	push	{fp}		; (str fp, [sp, #-4]!)
   184d4:	add	fp, sp, #0
   184d8:	sub	sp, sp, #12
   184dc:	str	r0, [fp, #-8]
   184e0:	ldr	r3, [fp, #-8]
   184e4:	cmp	r3, #65	; 0x41
   184e8:	blt	18508 <__assert_fail@plt+0x72e0>
   184ec:	cmp	r3, #90	; 0x5a
   184f0:	ble	18500 <__assert_fail@plt+0x72d8>
   184f4:	sub	r3, r3, #97	; 0x61
   184f8:	cmp	r3, #25
   184fc:	bhi	18508 <__assert_fail@plt+0x72e0>
   18500:	mov	r3, #1
   18504:	b	1850c <__assert_fail@plt+0x72e4>
   18508:	mov	r3, #0
   1850c:	mov	r0, r3
   18510:	add	sp, fp, #0
   18514:	pop	{fp}		; (ldr fp, [sp], #4)
   18518:	bx	lr
   1851c:	push	{fp}		; (str fp, [sp, #-4]!)
   18520:	add	fp, sp, #0
   18524:	sub	sp, sp, #12
   18528:	str	r0, [fp, #-8]
   1852c:	ldr	r3, [fp, #-8]
   18530:	add	r3, r3, #0
   18534:	cmp	r3, #127	; 0x7f
   18538:	bhi	18544 <__assert_fail@plt+0x731c>
   1853c:	mov	r3, #1
   18540:	b	18548 <__assert_fail@plt+0x7320>
   18544:	mov	r3, #0
   18548:	mov	r0, r3
   1854c:	add	sp, fp, #0
   18550:	pop	{fp}		; (ldr fp, [sp], #4)
   18554:	bx	lr
   18558:	push	{fp}		; (str fp, [sp, #-4]!)
   1855c:	add	fp, sp, #0
   18560:	sub	sp, sp, #12
   18564:	str	r0, [fp, #-8]
   18568:	ldr	r3, [fp, #-8]
   1856c:	cmp	r3, #32
   18570:	beq	18580 <__assert_fail@plt+0x7358>
   18574:	ldr	r3, [fp, #-8]
   18578:	cmp	r3, #9
   1857c:	bne	18588 <__assert_fail@plt+0x7360>
   18580:	mov	r3, #1
   18584:	b	1858c <__assert_fail@plt+0x7364>
   18588:	mov	r3, #0
   1858c:	and	r3, r3, #1
   18590:	uxtb	r3, r3
   18594:	mov	r0, r3
   18598:	add	sp, fp, #0
   1859c:	pop	{fp}		; (ldr fp, [sp], #4)
   185a0:	bx	lr
   185a4:	push	{fp}		; (str fp, [sp, #-4]!)
   185a8:	add	fp, sp, #0
   185ac:	sub	sp, sp, #12
   185b0:	str	r0, [fp, #-8]
   185b4:	ldr	r3, [fp, #-8]
   185b8:	cmp	r3, #0
   185bc:	blt	185d8 <__assert_fail@plt+0x73b0>
   185c0:	cmp	r3, #31
   185c4:	ble	185d0 <__assert_fail@plt+0x73a8>
   185c8:	cmp	r3, #127	; 0x7f
   185cc:	bne	185d8 <__assert_fail@plt+0x73b0>
   185d0:	mov	r3, #1
   185d4:	b	185dc <__assert_fail@plt+0x73b4>
   185d8:	mov	r3, #0
   185dc:	mov	r0, r3
   185e0:	add	sp, fp, #0
   185e4:	pop	{fp}		; (ldr fp, [sp], #4)
   185e8:	bx	lr
   185ec:	push	{fp}		; (str fp, [sp, #-4]!)
   185f0:	add	fp, sp, #0
   185f4:	sub	sp, sp, #12
   185f8:	str	r0, [fp, #-8]
   185fc:	ldr	r3, [fp, #-8]
   18600:	sub	r3, r3, #48	; 0x30
   18604:	cmp	r3, #9
   18608:	bhi	18614 <__assert_fail@plt+0x73ec>
   1860c:	mov	r3, #1
   18610:	b	18618 <__assert_fail@plt+0x73f0>
   18614:	mov	r3, #0
   18618:	mov	r0, r3
   1861c:	add	sp, fp, #0
   18620:	pop	{fp}		; (ldr fp, [sp], #4)
   18624:	bx	lr
   18628:	push	{fp}		; (str fp, [sp, #-4]!)
   1862c:	add	fp, sp, #0
   18630:	sub	sp, sp, #12
   18634:	str	r0, [fp, #-8]
   18638:	ldr	r3, [fp, #-8]
   1863c:	sub	r3, r3, #33	; 0x21
   18640:	cmp	r3, #93	; 0x5d
   18644:	bhi	18650 <__assert_fail@plt+0x7428>
   18648:	mov	r3, #1
   1864c:	b	18654 <__assert_fail@plt+0x742c>
   18650:	mov	r3, #0
   18654:	mov	r0, r3
   18658:	add	sp, fp, #0
   1865c:	pop	{fp}		; (ldr fp, [sp], #4)
   18660:	bx	lr
   18664:	push	{fp}		; (str fp, [sp, #-4]!)
   18668:	add	fp, sp, #0
   1866c:	sub	sp, sp, #12
   18670:	str	r0, [fp, #-8]
   18674:	ldr	r3, [fp, #-8]
   18678:	sub	r3, r3, #97	; 0x61
   1867c:	cmp	r3, #25
   18680:	bhi	1868c <__assert_fail@plt+0x7464>
   18684:	mov	r3, #1
   18688:	b	18690 <__assert_fail@plt+0x7468>
   1868c:	mov	r3, #0
   18690:	mov	r0, r3
   18694:	add	sp, fp, #0
   18698:	pop	{fp}		; (ldr fp, [sp], #4)
   1869c:	bx	lr
   186a0:	push	{fp}		; (str fp, [sp, #-4]!)
   186a4:	add	fp, sp, #0
   186a8:	sub	sp, sp, #12
   186ac:	str	r0, [fp, #-8]
   186b0:	ldr	r3, [fp, #-8]
   186b4:	sub	r3, r3, #32
   186b8:	cmp	r3, #94	; 0x5e
   186bc:	bhi	186c8 <__assert_fail@plt+0x74a0>
   186c0:	mov	r3, #1
   186c4:	b	186cc <__assert_fail@plt+0x74a4>
   186c8:	mov	r3, #0
   186cc:	mov	r0, r3
   186d0:	add	sp, fp, #0
   186d4:	pop	{fp}		; (ldr fp, [sp], #4)
   186d8:	bx	lr
   186dc:	push	{fp}		; (str fp, [sp, #-4]!)
   186e0:	add	fp, sp, #0
   186e4:	sub	sp, sp, #12
   186e8:	str	r0, [fp, #-8]
   186ec:	ldr	r3, [fp, #-8]
   186f0:	cmp	r3, #64	; 0x40
   186f4:	bgt	18710 <__assert_fail@plt+0x74e8>
   186f8:	cmp	r3, #58	; 0x3a
   186fc:	bge	1872c <__assert_fail@plt+0x7504>
   18700:	sub	r3, r3, #33	; 0x21
   18704:	cmp	r3, #14
   18708:	bhi	18734 <__assert_fail@plt+0x750c>
   1870c:	b	1872c <__assert_fail@plt+0x7504>
   18710:	cmp	r3, #91	; 0x5b
   18714:	blt	18734 <__assert_fail@plt+0x750c>
   18718:	cmp	r3, #96	; 0x60
   1871c:	ble	1872c <__assert_fail@plt+0x7504>
   18720:	sub	r3, r3, #123	; 0x7b
   18724:	cmp	r3, #3
   18728:	bhi	18734 <__assert_fail@plt+0x750c>
   1872c:	mov	r3, #1
   18730:	b	18738 <__assert_fail@plt+0x7510>
   18734:	mov	r3, #0
   18738:	mov	r0, r3
   1873c:	add	sp, fp, #0
   18740:	pop	{fp}		; (ldr fp, [sp], #4)
   18744:	bx	lr
   18748:	push	{fp}		; (str fp, [sp, #-4]!)
   1874c:	add	fp, sp, #0
   18750:	sub	sp, sp, #12
   18754:	str	r0, [fp, #-8]
   18758:	ldr	r3, [fp, #-8]
   1875c:	cmp	r3, #9
   18760:	blt	1877c <__assert_fail@plt+0x7554>
   18764:	cmp	r3, #13
   18768:	ble	18774 <__assert_fail@plt+0x754c>
   1876c:	cmp	r3, #32
   18770:	bne	1877c <__assert_fail@plt+0x7554>
   18774:	mov	r3, #1
   18778:	b	18780 <__assert_fail@plt+0x7558>
   1877c:	mov	r3, #0
   18780:	mov	r0, r3
   18784:	add	sp, fp, #0
   18788:	pop	{fp}		; (ldr fp, [sp], #4)
   1878c:	bx	lr
   18790:	push	{fp}		; (str fp, [sp, #-4]!)
   18794:	add	fp, sp, #0
   18798:	sub	sp, sp, #12
   1879c:	str	r0, [fp, #-8]
   187a0:	ldr	r3, [fp, #-8]
   187a4:	sub	r3, r3, #65	; 0x41
   187a8:	cmp	r3, #25
   187ac:	bhi	187b8 <__assert_fail@plt+0x7590>
   187b0:	mov	r3, #1
   187b4:	b	187bc <__assert_fail@plt+0x7594>
   187b8:	mov	r3, #0
   187bc:	mov	r0, r3
   187c0:	add	sp, fp, #0
   187c4:	pop	{fp}		; (ldr fp, [sp], #4)
   187c8:	bx	lr
   187cc:	push	{fp}		; (str fp, [sp, #-4]!)
   187d0:	add	fp, sp, #0
   187d4:	sub	sp, sp, #12
   187d8:	str	r0, [fp, #-8]
   187dc:	ldr	r3, [fp, #-8]
   187e0:	sub	r3, r3, #48	; 0x30
   187e4:	cmp	r3, #54	; 0x36
   187e8:	addls	pc, pc, r3, lsl #2
   187ec:	b	188d4 <__assert_fail@plt+0x76ac>
   187f0:	b	188cc <__assert_fail@plt+0x76a4>
   187f4:	b	188cc <__assert_fail@plt+0x76a4>
   187f8:	b	188cc <__assert_fail@plt+0x76a4>
   187fc:	b	188cc <__assert_fail@plt+0x76a4>
   18800:	b	188cc <__assert_fail@plt+0x76a4>
   18804:	b	188cc <__assert_fail@plt+0x76a4>
   18808:	b	188cc <__assert_fail@plt+0x76a4>
   1880c:	b	188cc <__assert_fail@plt+0x76a4>
   18810:	b	188cc <__assert_fail@plt+0x76a4>
   18814:	b	188cc <__assert_fail@plt+0x76a4>
   18818:	b	188d4 <__assert_fail@plt+0x76ac>
   1881c:	b	188d4 <__assert_fail@plt+0x76ac>
   18820:	b	188d4 <__assert_fail@plt+0x76ac>
   18824:	b	188d4 <__assert_fail@plt+0x76ac>
   18828:	b	188d4 <__assert_fail@plt+0x76ac>
   1882c:	b	188d4 <__assert_fail@plt+0x76ac>
   18830:	b	188d4 <__assert_fail@plt+0x76ac>
   18834:	b	188cc <__assert_fail@plt+0x76a4>
   18838:	b	188cc <__assert_fail@plt+0x76a4>
   1883c:	b	188cc <__assert_fail@plt+0x76a4>
   18840:	b	188cc <__assert_fail@plt+0x76a4>
   18844:	b	188cc <__assert_fail@plt+0x76a4>
   18848:	b	188cc <__assert_fail@plt+0x76a4>
   1884c:	b	188d4 <__assert_fail@plt+0x76ac>
   18850:	b	188d4 <__assert_fail@plt+0x76ac>
   18854:	b	188d4 <__assert_fail@plt+0x76ac>
   18858:	b	188d4 <__assert_fail@plt+0x76ac>
   1885c:	b	188d4 <__assert_fail@plt+0x76ac>
   18860:	b	188d4 <__assert_fail@plt+0x76ac>
   18864:	b	188d4 <__assert_fail@plt+0x76ac>
   18868:	b	188d4 <__assert_fail@plt+0x76ac>
   1886c:	b	188d4 <__assert_fail@plt+0x76ac>
   18870:	b	188d4 <__assert_fail@plt+0x76ac>
   18874:	b	188d4 <__assert_fail@plt+0x76ac>
   18878:	b	188d4 <__assert_fail@plt+0x76ac>
   1887c:	b	188d4 <__assert_fail@plt+0x76ac>
   18880:	b	188d4 <__assert_fail@plt+0x76ac>
   18884:	b	188d4 <__assert_fail@plt+0x76ac>
   18888:	b	188d4 <__assert_fail@plt+0x76ac>
   1888c:	b	188d4 <__assert_fail@plt+0x76ac>
   18890:	b	188d4 <__assert_fail@plt+0x76ac>
   18894:	b	188d4 <__assert_fail@plt+0x76ac>
   18898:	b	188d4 <__assert_fail@plt+0x76ac>
   1889c:	b	188d4 <__assert_fail@plt+0x76ac>
   188a0:	b	188d4 <__assert_fail@plt+0x76ac>
   188a4:	b	188d4 <__assert_fail@plt+0x76ac>
   188a8:	b	188d4 <__assert_fail@plt+0x76ac>
   188ac:	b	188d4 <__assert_fail@plt+0x76ac>
   188b0:	b	188d4 <__assert_fail@plt+0x76ac>
   188b4:	b	188cc <__assert_fail@plt+0x76a4>
   188b8:	b	188cc <__assert_fail@plt+0x76a4>
   188bc:	b	188cc <__assert_fail@plt+0x76a4>
   188c0:	b	188cc <__assert_fail@plt+0x76a4>
   188c4:	b	188cc <__assert_fail@plt+0x76a4>
   188c8:	b	188cc <__assert_fail@plt+0x76a4>
   188cc:	mov	r3, #1
   188d0:	b	188d8 <__assert_fail@plt+0x76b0>
   188d4:	mov	r3, #0
   188d8:	mov	r0, r3
   188dc:	add	sp, fp, #0
   188e0:	pop	{fp}		; (ldr fp, [sp], #4)
   188e4:	bx	lr
   188e8:	push	{fp}		; (str fp, [sp, #-4]!)
   188ec:	add	fp, sp, #0
   188f0:	sub	sp, sp, #12
   188f4:	str	r0, [fp, #-8]
   188f8:	ldr	r3, [fp, #-8]
   188fc:	sub	r3, r3, #65	; 0x41
   18900:	cmp	r3, #25
   18904:	bhi	18914 <__assert_fail@plt+0x76ec>
   18908:	ldr	r3, [fp, #-8]
   1890c:	add	r3, r3, #32
   18910:	b	18918 <__assert_fail@plt+0x76f0>
   18914:	ldr	r3, [fp, #-8]
   18918:	mov	r0, r3
   1891c:	add	sp, fp, #0
   18920:	pop	{fp}		; (ldr fp, [sp], #4)
   18924:	bx	lr
   18928:	push	{fp}		; (str fp, [sp, #-4]!)
   1892c:	add	fp, sp, #0
   18930:	sub	sp, sp, #12
   18934:	str	r0, [fp, #-8]
   18938:	ldr	r3, [fp, #-8]
   1893c:	sub	r3, r3, #97	; 0x61
   18940:	cmp	r3, #25
   18944:	bhi	18954 <__assert_fail@plt+0x772c>
   18948:	ldr	r3, [fp, #-8]
   1894c:	sub	r3, r3, #32
   18950:	b	18958 <__assert_fail@plt+0x7730>
   18954:	ldr	r3, [fp, #-8]
   18958:	mov	r0, r3
   1895c:	add	sp, fp, #0
   18960:	pop	{fp}		; (ldr fp, [sp], #4)
   18964:	bx	lr
   18968:	push	{fp, lr}
   1896c:	add	fp, sp, #4
   18970:	sub	sp, sp, #40	; 0x28
   18974:	str	r0, [fp, #-32]	; 0xffffffe0
   18978:	str	r1, [fp, #-36]	; 0xffffffdc
   1897c:	str	r2, [fp, #-40]	; 0xffffffd8
   18980:	str	r3, [fp, #-44]	; 0xffffffd4
   18984:	mov	r3, #0
   18988:	str	r3, [fp, #-8]
   1898c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18990:	cmn	r3, #1
   18994:	beq	189c8 <__assert_fail@plt+0x77a0>
   18998:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1899c:	cmp	r3, #0
   189a0:	beq	189bc <__assert_fail@plt+0x7794>
   189a4:	ldr	r3, [fp, #-8]
   189a8:	lsl	r3, r3, #2
   189ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   189b0:	add	r3, r2, r3
   189b4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   189b8:	str	r2, [r3]
   189bc:	ldr	r3, [fp, #-8]
   189c0:	add	r3, r3, #1
   189c4:	str	r3, [fp, #-8]
   189c8:	bl	11144 <setgrent@plt>
   189cc:	bl	11114 <__errno_location@plt>
   189d0:	mov	r2, r0
   189d4:	mov	r3, #0
   189d8:	str	r3, [r2]
   189dc:	bl	11150 <getgrent@plt>
   189e0:	str	r0, [fp, #-20]	; 0xffffffec
   189e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   189e8:	cmp	r3, #0
   189ec:	beq	18b1c <__assert_fail@plt+0x78f4>
   189f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   189f4:	ldr	r3, [r3, #12]
   189f8:	str	r3, [fp, #-12]
   189fc:	b	18b08 <__assert_fail@plt+0x78e0>
   18a00:	ldr	r3, [fp, #-12]
   18a04:	ldr	r3, [r3]
   18a08:	mov	r1, r3
   18a0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18a10:	bl	10f4c <strcmp@plt>
   18a14:	mov	r3, r0
   18a18:	cmp	r3, #0
   18a1c:	bne	18af8 <__assert_fail@plt+0x78d0>
   18a20:	mov	r3, #0
   18a24:	str	r3, [fp, #-16]
   18a28:	b	18a68 <__assert_fail@plt+0x7840>
   18a2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18a30:	cmp	r3, #0
   18a34:	beq	18a5c <__assert_fail@plt+0x7834>
   18a38:	ldr	r3, [fp, #-16]
   18a3c:	lsl	r3, r3, #2
   18a40:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18a44:	add	r3, r2, r3
   18a48:	ldr	r2, [r3]
   18a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a50:	ldr	r3, [r3, #8]
   18a54:	cmp	r2, r3
   18a58:	beq	18a7c <__assert_fail@plt+0x7854>
   18a5c:	ldr	r3, [fp, #-16]
   18a60:	add	r3, r3, #1
   18a64:	str	r3, [fp, #-16]
   18a68:	ldr	r2, [fp, #-16]
   18a6c:	ldr	r3, [fp, #-8]
   18a70:	cmp	r2, r3
   18a74:	blt	18a2c <__assert_fail@plt+0x7804>
   18a78:	b	18a80 <__assert_fail@plt+0x7858>
   18a7c:	nop			; (mov r0, r0)
   18a80:	ldr	r2, [fp, #-16]
   18a84:	ldr	r3, [fp, #-8]
   18a88:	cmp	r2, r3
   18a8c:	bne	18afc <__assert_fail@plt+0x78d4>
   18a90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18a94:	cmp	r3, #0
   18a98:	beq	18ac8 <__assert_fail@plt+0x78a0>
   18a9c:	ldr	r2, [fp, #-8]
   18aa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18aa4:	cmp	r2, r3
   18aa8:	bge	18b40 <__assert_fail@plt+0x7918>
   18aac:	ldr	r3, [fp, #-8]
   18ab0:	lsl	r3, r3, #2
   18ab4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18ab8:	add	r3, r2, r3
   18abc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18ac0:	ldr	r2, [r2, #8]
   18ac4:	str	r2, [r3]
   18ac8:	ldr	r3, [fp, #-8]
   18acc:	cmn	r3, #-2147483647	; 0x80000001
   18ad0:	bne	18ae8 <__assert_fail@plt+0x78c0>
   18ad4:	bl	11114 <__errno_location@plt>
   18ad8:	mov	r2, r0
   18adc:	mov	r3, #75	; 0x4b
   18ae0:	str	r3, [r2]
   18ae4:	b	18b44 <__assert_fail@plt+0x791c>
   18ae8:	ldr	r3, [fp, #-8]
   18aec:	add	r3, r3, #1
   18af0:	str	r3, [fp, #-8]
   18af4:	b	18afc <__assert_fail@plt+0x78d4>
   18af8:	nop			; (mov r0, r0)
   18afc:	ldr	r3, [fp, #-12]
   18b00:	add	r3, r3, #4
   18b04:	str	r3, [fp, #-12]
   18b08:	ldr	r3, [fp, #-12]
   18b0c:	ldr	r3, [r3]
   18b10:	cmp	r3, #0
   18b14:	bne	18a00 <__assert_fail@plt+0x77d8>
   18b18:	b	189cc <__assert_fail@plt+0x77a4>
   18b1c:	nop			; (mov r0, r0)
   18b20:	bl	11114 <__errno_location@plt>
   18b24:	mov	r3, r0
   18b28:	ldr	r3, [r3]
   18b2c:	cmp	r3, #0
   18b30:	beq	18b44 <__assert_fail@plt+0x791c>
   18b34:	mvn	r3, #0
   18b38:	str	r3, [fp, #-8]
   18b3c:	b	18b44 <__assert_fail@plt+0x791c>
   18b40:	nop			; (mov r0, r0)
   18b44:	bl	11114 <__errno_location@plt>
   18b48:	mov	r3, r0
   18b4c:	ldr	r3, [r3]
   18b50:	str	r3, [fp, #-24]	; 0xffffffe8
   18b54:	bl	10f1c <endgrent@plt>
   18b58:	bl	11114 <__errno_location@plt>
   18b5c:	mov	r2, r0
   18b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b64:	str	r3, [r2]
   18b68:	ldr	r3, [fp, #-8]
   18b6c:	mov	r0, r3
   18b70:	sub	sp, fp, #4
   18b74:	pop	{fp, pc}
   18b78:	push	{fp, lr}
   18b7c:	add	fp, sp, #4
   18b80:	sub	sp, sp, #272	; 0x110
   18b84:	str	r0, [fp, #-272]	; 0xfffffef0
   18b88:	sub	r3, fp, #264	; 0x108
   18b8c:	ldr	r2, [pc, #116]	; 18c08 <__assert_fail@plt+0x79e0>
   18b90:	mov	r1, r3
   18b94:	ldr	r0, [fp, #-272]	; 0xfffffef0
   18b98:	bl	18d1c <__assert_fail@plt+0x7af4>
   18b9c:	mov	r3, r0
   18ba0:	cmp	r3, #0
   18ba4:	beq	18bb0 <__assert_fail@plt+0x7988>
   18ba8:	mov	r3, #0
   18bac:	b	18bfc <__assert_fail@plt+0x79d4>
   18bb0:	sub	r3, fp, #264	; 0x108
   18bb4:	ldr	r1, [pc, #80]	; 18c0c <__assert_fail@plt+0x79e4>
   18bb8:	mov	r0, r3
   18bbc:	bl	10f4c <strcmp@plt>
   18bc0:	mov	r3, r0
   18bc4:	cmp	r3, #0
   18bc8:	beq	18bf0 <__assert_fail@plt+0x79c8>
   18bcc:	sub	r3, fp, #264	; 0x108
   18bd0:	ldr	r1, [pc, #56]	; 18c10 <__assert_fail@plt+0x79e8>
   18bd4:	mov	r0, r3
   18bd8:	bl	10f4c <strcmp@plt>
   18bdc:	mov	r3, r0
   18be0:	cmp	r3, #0
   18be4:	beq	18bf0 <__assert_fail@plt+0x79c8>
   18be8:	mov	r3, #1
   18bec:	b	18bf4 <__assert_fail@plt+0x79cc>
   18bf0:	mov	r3, #0
   18bf4:	and	r3, r3, #1
   18bf8:	uxtb	r3, r3
   18bfc:	mov	r0, r3
   18c00:	sub	sp, fp, #4
   18c04:	pop	{fp, pc}
   18c08:	andeq	r0, r0, r1, lsl #2
   18c0c:	andeq	r9, r1, r8, ror pc
   18c10:	andeq	r9, r1, ip, ror pc
   18c14:	push	{fp, lr}
   18c18:	add	fp, sp, #4
   18c1c:	sub	sp, sp, #16
   18c20:	str	r0, [fp, #-16]
   18c24:	mov	r1, #0
   18c28:	ldr	r0, [fp, #-16]
   18c2c:	bl	11198 <setlocale@plt>
   18c30:	str	r0, [fp, #-8]
   18c34:	ldr	r3, [fp, #-8]
   18c38:	mov	r0, r3
   18c3c:	sub	sp, fp, #4
   18c40:	pop	{fp, pc}
   18c44:	push	{fp, lr}
   18c48:	add	fp, sp, #4
   18c4c:	sub	sp, sp, #24
   18c50:	str	r0, [fp, #-16]
   18c54:	str	r1, [fp, #-20]	; 0xffffffec
   18c58:	str	r2, [fp, #-24]	; 0xffffffe8
   18c5c:	ldr	r0, [fp, #-16]
   18c60:	bl	18c14 <__assert_fail@plt+0x79ec>
   18c64:	str	r0, [fp, #-8]
   18c68:	ldr	r3, [fp, #-8]
   18c6c:	cmp	r3, #0
   18c70:	bne	18c94 <__assert_fail@plt+0x7a6c>
   18c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c78:	cmp	r3, #0
   18c7c:	beq	18c8c <__assert_fail@plt+0x7a64>
   18c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c84:	mov	r2, #0
   18c88:	strb	r2, [r3]
   18c8c:	mov	r3, #22
   18c90:	b	18d10 <__assert_fail@plt+0x7ae8>
   18c94:	ldr	r0, [fp, #-8]
   18c98:	bl	110f0 <strlen@plt>
   18c9c:	str	r0, [fp, #-12]
   18ca0:	ldr	r2, [fp, #-12]
   18ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ca8:	cmp	r2, r3
   18cac:	bcs	18cd0 <__assert_fail@plt+0x7aa8>
   18cb0:	ldr	r3, [fp, #-12]
   18cb4:	add	r3, r3, #1
   18cb8:	mov	r2, r3
   18cbc:	ldr	r1, [fp, #-8]
   18cc0:	ldr	r0, [fp, #-20]	; 0xffffffec
   18cc4:	bl	10f94 <memcpy@plt>
   18cc8:	mov	r3, #0
   18ccc:	b	18d10 <__assert_fail@plt+0x7ae8>
   18cd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18cd4:	cmp	r3, #0
   18cd8:	beq	18d0c <__assert_fail@plt+0x7ae4>
   18cdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ce0:	sub	r3, r3, #1
   18ce4:	mov	r2, r3
   18ce8:	ldr	r1, [fp, #-8]
   18cec:	ldr	r0, [fp, #-20]	; 0xffffffec
   18cf0:	bl	10f94 <memcpy@plt>
   18cf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18cf8:	sub	r3, r3, #1
   18cfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18d00:	add	r3, r2, r3
   18d04:	mov	r2, #0
   18d08:	strb	r2, [r3]
   18d0c:	mov	r3, #34	; 0x22
   18d10:	mov	r0, r3
   18d14:	sub	sp, fp, #4
   18d18:	pop	{fp, pc}
   18d1c:	push	{fp, lr}
   18d20:	add	fp, sp, #4
   18d24:	sub	sp, sp, #16
   18d28:	str	r0, [fp, #-8]
   18d2c:	str	r1, [fp, #-12]
   18d30:	str	r2, [fp, #-16]
   18d34:	ldr	r2, [fp, #-16]
   18d38:	ldr	r1, [fp, #-12]
   18d3c:	ldr	r0, [fp, #-8]
   18d40:	bl	18c44 <__assert_fail@plt+0x7a1c>
   18d44:	mov	r3, r0
   18d48:	mov	r0, r3
   18d4c:	sub	sp, fp, #4
   18d50:	pop	{fp, pc}
   18d54:	push	{fp, lr}
   18d58:	add	fp, sp, #4
   18d5c:	sub	sp, sp, #8
   18d60:	str	r0, [fp, #-8]
   18d64:	ldr	r0, [fp, #-8]
   18d68:	bl	18c14 <__assert_fail@plt+0x79ec>
   18d6c:	mov	r3, r0
   18d70:	mov	r0, r3
   18d74:	sub	sp, fp, #4
   18d78:	pop	{fp, pc}
   18d7c:	subs	r2, r1, #1
   18d80:	bxeq	lr
   18d84:	bcc	18f5c <__assert_fail@plt+0x7d34>
   18d88:	cmp	r0, r1
   18d8c:	bls	18f40 <__assert_fail@plt+0x7d18>
   18d90:	tst	r1, r2
   18d94:	beq	18f4c <__assert_fail@plt+0x7d24>
   18d98:	clz	r3, r0
   18d9c:	clz	r2, r1
   18da0:	sub	r3, r2, r3
   18da4:	rsbs	r3, r3, #31
   18da8:	addne	r3, r3, r3, lsl #1
   18dac:	mov	r2, #0
   18db0:	addne	pc, pc, r3, lsl #2
   18db4:	nop			; (mov r0, r0)
   18db8:	cmp	r0, r1, lsl #31
   18dbc:	adc	r2, r2, r2
   18dc0:	subcs	r0, r0, r1, lsl #31
   18dc4:	cmp	r0, r1, lsl #30
   18dc8:	adc	r2, r2, r2
   18dcc:	subcs	r0, r0, r1, lsl #30
   18dd0:	cmp	r0, r1, lsl #29
   18dd4:	adc	r2, r2, r2
   18dd8:	subcs	r0, r0, r1, lsl #29
   18ddc:	cmp	r0, r1, lsl #28
   18de0:	adc	r2, r2, r2
   18de4:	subcs	r0, r0, r1, lsl #28
   18de8:	cmp	r0, r1, lsl #27
   18dec:	adc	r2, r2, r2
   18df0:	subcs	r0, r0, r1, lsl #27
   18df4:	cmp	r0, r1, lsl #26
   18df8:	adc	r2, r2, r2
   18dfc:	subcs	r0, r0, r1, lsl #26
   18e00:	cmp	r0, r1, lsl #25
   18e04:	adc	r2, r2, r2
   18e08:	subcs	r0, r0, r1, lsl #25
   18e0c:	cmp	r0, r1, lsl #24
   18e10:	adc	r2, r2, r2
   18e14:	subcs	r0, r0, r1, lsl #24
   18e18:	cmp	r0, r1, lsl #23
   18e1c:	adc	r2, r2, r2
   18e20:	subcs	r0, r0, r1, lsl #23
   18e24:	cmp	r0, r1, lsl #22
   18e28:	adc	r2, r2, r2
   18e2c:	subcs	r0, r0, r1, lsl #22
   18e30:	cmp	r0, r1, lsl #21
   18e34:	adc	r2, r2, r2
   18e38:	subcs	r0, r0, r1, lsl #21
   18e3c:	cmp	r0, r1, lsl #20
   18e40:	adc	r2, r2, r2
   18e44:	subcs	r0, r0, r1, lsl #20
   18e48:	cmp	r0, r1, lsl #19
   18e4c:	adc	r2, r2, r2
   18e50:	subcs	r0, r0, r1, lsl #19
   18e54:	cmp	r0, r1, lsl #18
   18e58:	adc	r2, r2, r2
   18e5c:	subcs	r0, r0, r1, lsl #18
   18e60:	cmp	r0, r1, lsl #17
   18e64:	adc	r2, r2, r2
   18e68:	subcs	r0, r0, r1, lsl #17
   18e6c:	cmp	r0, r1, lsl #16
   18e70:	adc	r2, r2, r2
   18e74:	subcs	r0, r0, r1, lsl #16
   18e78:	cmp	r0, r1, lsl #15
   18e7c:	adc	r2, r2, r2
   18e80:	subcs	r0, r0, r1, lsl #15
   18e84:	cmp	r0, r1, lsl #14
   18e88:	adc	r2, r2, r2
   18e8c:	subcs	r0, r0, r1, lsl #14
   18e90:	cmp	r0, r1, lsl #13
   18e94:	adc	r2, r2, r2
   18e98:	subcs	r0, r0, r1, lsl #13
   18e9c:	cmp	r0, r1, lsl #12
   18ea0:	adc	r2, r2, r2
   18ea4:	subcs	r0, r0, r1, lsl #12
   18ea8:	cmp	r0, r1, lsl #11
   18eac:	adc	r2, r2, r2
   18eb0:	subcs	r0, r0, r1, lsl #11
   18eb4:	cmp	r0, r1, lsl #10
   18eb8:	adc	r2, r2, r2
   18ebc:	subcs	r0, r0, r1, lsl #10
   18ec0:	cmp	r0, r1, lsl #9
   18ec4:	adc	r2, r2, r2
   18ec8:	subcs	r0, r0, r1, lsl #9
   18ecc:	cmp	r0, r1, lsl #8
   18ed0:	adc	r2, r2, r2
   18ed4:	subcs	r0, r0, r1, lsl #8
   18ed8:	cmp	r0, r1, lsl #7
   18edc:	adc	r2, r2, r2
   18ee0:	subcs	r0, r0, r1, lsl #7
   18ee4:	cmp	r0, r1, lsl #6
   18ee8:	adc	r2, r2, r2
   18eec:	subcs	r0, r0, r1, lsl #6
   18ef0:	cmp	r0, r1, lsl #5
   18ef4:	adc	r2, r2, r2
   18ef8:	subcs	r0, r0, r1, lsl #5
   18efc:	cmp	r0, r1, lsl #4
   18f00:	adc	r2, r2, r2
   18f04:	subcs	r0, r0, r1, lsl #4
   18f08:	cmp	r0, r1, lsl #3
   18f0c:	adc	r2, r2, r2
   18f10:	subcs	r0, r0, r1, lsl #3
   18f14:	cmp	r0, r1, lsl #2
   18f18:	adc	r2, r2, r2
   18f1c:	subcs	r0, r0, r1, lsl #2
   18f20:	cmp	r0, r1, lsl #1
   18f24:	adc	r2, r2, r2
   18f28:	subcs	r0, r0, r1, lsl #1
   18f2c:	cmp	r0, r1
   18f30:	adc	r2, r2, r2
   18f34:	subcs	r0, r0, r1
   18f38:	mov	r0, r2
   18f3c:	bx	lr
   18f40:	moveq	r0, #1
   18f44:	movne	r0, #0
   18f48:	bx	lr
   18f4c:	clz	r2, r1
   18f50:	rsb	r2, r2, #31
   18f54:	lsr	r0, r0, r2
   18f58:	bx	lr
   18f5c:	cmp	r0, #0
   18f60:	mvnne	r0, #0
   18f64:	b	19204 <__assert_fail@plt+0x7fdc>
   18f68:	cmp	r1, #0
   18f6c:	beq	18f5c <__assert_fail@plt+0x7d34>
   18f70:	push	{r0, r1, lr}
   18f74:	bl	18d7c <__assert_fail@plt+0x7b54>
   18f78:	pop	{r1, r2, lr}
   18f7c:	mul	r3, r2, r0
   18f80:	sub	r1, r1, r3
   18f84:	bx	lr
   18f88:	cmp	r1, #0
   18f8c:	beq	19198 <__assert_fail@plt+0x7f70>
   18f90:	eor	ip, r0, r1
   18f94:	rsbmi	r1, r1, #0
   18f98:	subs	r2, r1, #1
   18f9c:	beq	19164 <__assert_fail@plt+0x7f3c>
   18fa0:	movs	r3, r0
   18fa4:	rsbmi	r3, r0, #0
   18fa8:	cmp	r3, r1
   18fac:	bls	19170 <__assert_fail@plt+0x7f48>
   18fb0:	tst	r1, r2
   18fb4:	beq	19180 <__assert_fail@plt+0x7f58>
   18fb8:	clz	r2, r3
   18fbc:	clz	r0, r1
   18fc0:	sub	r2, r0, r2
   18fc4:	rsbs	r2, r2, #31
   18fc8:	addne	r2, r2, r2, lsl #1
   18fcc:	mov	r0, #0
   18fd0:	addne	pc, pc, r2, lsl #2
   18fd4:	nop			; (mov r0, r0)
   18fd8:	cmp	r3, r1, lsl #31
   18fdc:	adc	r0, r0, r0
   18fe0:	subcs	r3, r3, r1, lsl #31
   18fe4:	cmp	r3, r1, lsl #30
   18fe8:	adc	r0, r0, r0
   18fec:	subcs	r3, r3, r1, lsl #30
   18ff0:	cmp	r3, r1, lsl #29
   18ff4:	adc	r0, r0, r0
   18ff8:	subcs	r3, r3, r1, lsl #29
   18ffc:	cmp	r3, r1, lsl #28
   19000:	adc	r0, r0, r0
   19004:	subcs	r3, r3, r1, lsl #28
   19008:	cmp	r3, r1, lsl #27
   1900c:	adc	r0, r0, r0
   19010:	subcs	r3, r3, r1, lsl #27
   19014:	cmp	r3, r1, lsl #26
   19018:	adc	r0, r0, r0
   1901c:	subcs	r3, r3, r1, lsl #26
   19020:	cmp	r3, r1, lsl #25
   19024:	adc	r0, r0, r0
   19028:	subcs	r3, r3, r1, lsl #25
   1902c:	cmp	r3, r1, lsl #24
   19030:	adc	r0, r0, r0
   19034:	subcs	r3, r3, r1, lsl #24
   19038:	cmp	r3, r1, lsl #23
   1903c:	adc	r0, r0, r0
   19040:	subcs	r3, r3, r1, lsl #23
   19044:	cmp	r3, r1, lsl #22
   19048:	adc	r0, r0, r0
   1904c:	subcs	r3, r3, r1, lsl #22
   19050:	cmp	r3, r1, lsl #21
   19054:	adc	r0, r0, r0
   19058:	subcs	r3, r3, r1, lsl #21
   1905c:	cmp	r3, r1, lsl #20
   19060:	adc	r0, r0, r0
   19064:	subcs	r3, r3, r1, lsl #20
   19068:	cmp	r3, r1, lsl #19
   1906c:	adc	r0, r0, r0
   19070:	subcs	r3, r3, r1, lsl #19
   19074:	cmp	r3, r1, lsl #18
   19078:	adc	r0, r0, r0
   1907c:	subcs	r3, r3, r1, lsl #18
   19080:	cmp	r3, r1, lsl #17
   19084:	adc	r0, r0, r0
   19088:	subcs	r3, r3, r1, lsl #17
   1908c:	cmp	r3, r1, lsl #16
   19090:	adc	r0, r0, r0
   19094:	subcs	r3, r3, r1, lsl #16
   19098:	cmp	r3, r1, lsl #15
   1909c:	adc	r0, r0, r0
   190a0:	subcs	r3, r3, r1, lsl #15
   190a4:	cmp	r3, r1, lsl #14
   190a8:	adc	r0, r0, r0
   190ac:	subcs	r3, r3, r1, lsl #14
   190b0:	cmp	r3, r1, lsl #13
   190b4:	adc	r0, r0, r0
   190b8:	subcs	r3, r3, r1, lsl #13
   190bc:	cmp	r3, r1, lsl #12
   190c0:	adc	r0, r0, r0
   190c4:	subcs	r3, r3, r1, lsl #12
   190c8:	cmp	r3, r1, lsl #11
   190cc:	adc	r0, r0, r0
   190d0:	subcs	r3, r3, r1, lsl #11
   190d4:	cmp	r3, r1, lsl #10
   190d8:	adc	r0, r0, r0
   190dc:	subcs	r3, r3, r1, lsl #10
   190e0:	cmp	r3, r1, lsl #9
   190e4:	adc	r0, r0, r0
   190e8:	subcs	r3, r3, r1, lsl #9
   190ec:	cmp	r3, r1, lsl #8
   190f0:	adc	r0, r0, r0
   190f4:	subcs	r3, r3, r1, lsl #8
   190f8:	cmp	r3, r1, lsl #7
   190fc:	adc	r0, r0, r0
   19100:	subcs	r3, r3, r1, lsl #7
   19104:	cmp	r3, r1, lsl #6
   19108:	adc	r0, r0, r0
   1910c:	subcs	r3, r3, r1, lsl #6
   19110:	cmp	r3, r1, lsl #5
   19114:	adc	r0, r0, r0
   19118:	subcs	r3, r3, r1, lsl #5
   1911c:	cmp	r3, r1, lsl #4
   19120:	adc	r0, r0, r0
   19124:	subcs	r3, r3, r1, lsl #4
   19128:	cmp	r3, r1, lsl #3
   1912c:	adc	r0, r0, r0
   19130:	subcs	r3, r3, r1, lsl #3
   19134:	cmp	r3, r1, lsl #2
   19138:	adc	r0, r0, r0
   1913c:	subcs	r3, r3, r1, lsl #2
   19140:	cmp	r3, r1, lsl #1
   19144:	adc	r0, r0, r0
   19148:	subcs	r3, r3, r1, lsl #1
   1914c:	cmp	r3, r1
   19150:	adc	r0, r0, r0
   19154:	subcs	r3, r3, r1
   19158:	cmp	ip, #0
   1915c:	rsbmi	r0, r0, #0
   19160:	bx	lr
   19164:	teq	ip, r0
   19168:	rsbmi	r0, r0, #0
   1916c:	bx	lr
   19170:	movcc	r0, #0
   19174:	asreq	r0, ip, #31
   19178:	orreq	r0, r0, #1
   1917c:	bx	lr
   19180:	clz	r2, r1
   19184:	rsb	r2, r2, #31
   19188:	cmp	ip, #0
   1918c:	lsr	r0, r3, r2
   19190:	rsbmi	r0, r0, #0
   19194:	bx	lr
   19198:	cmp	r0, #0
   1919c:	mvngt	r0, #-2147483648	; 0x80000000
   191a0:	movlt	r0, #-2147483648	; 0x80000000
   191a4:	b	19204 <__assert_fail@plt+0x7fdc>
   191a8:	cmp	r1, #0
   191ac:	beq	19198 <__assert_fail@plt+0x7f70>
   191b0:	push	{r0, r1, lr}
   191b4:	bl	18f90 <__assert_fail@plt+0x7d68>
   191b8:	pop	{r1, r2, lr}
   191bc:	mul	r3, r2, r0
   191c0:	sub	r1, r1, r3
   191c4:	bx	lr
   191c8:	cmp	r3, #0
   191cc:	cmpeq	r2, #0
   191d0:	bne	191e8 <__assert_fail@plt+0x7fc0>
   191d4:	cmp	r1, #0
   191d8:	cmpeq	r0, #0
   191dc:	mvnne	r1, #0
   191e0:	mvnne	r0, #0
   191e4:	b	19204 <__assert_fail@plt+0x7fdc>
   191e8:	sub	sp, sp, #8
   191ec:	push	{sp, lr}
   191f0:	bl	19214 <__assert_fail@plt+0x7fec>
   191f4:	ldr	lr, [sp, #4]
   191f8:	add	sp, sp, #8
   191fc:	pop	{r2, r3}
   19200:	bx	lr
   19204:	push	{r1, lr}
   19208:	mov	r0, #8
   1920c:	bl	10f34 <raise@plt>
   19210:	pop	{r1, pc}
   19214:	cmp	r1, r3
   19218:	push	{r4, r5, r6, r7, r8, r9, lr}
   1921c:	cmpeq	r0, r2
   19220:	mov	r4, r0
   19224:	mov	r5, r1
   19228:	ldr	r9, [sp, #28]
   1922c:	movcc	r0, #0
   19230:	movcc	r1, #0
   19234:	bcc	1932c <__assert_fail@plt+0x8104>
   19238:	cmp	r3, #0
   1923c:	clzeq	ip, r2
   19240:	clzne	ip, r3
   19244:	addeq	ip, ip, #32
   19248:	cmp	r5, #0
   1924c:	clzeq	r1, r4
   19250:	addeq	r1, r1, #32
   19254:	clzne	r1, r5
   19258:	sub	ip, ip, r1
   1925c:	sub	lr, ip, #32
   19260:	lsl	r7, r3, ip
   19264:	rsb	r8, ip, #32
   19268:	orr	r7, r7, r2, lsl lr
   1926c:	orr	r7, r7, r2, lsr r8
   19270:	lsl	r6, r2, ip
   19274:	cmp	r5, r7
   19278:	cmpeq	r4, r6
   1927c:	movcc	r0, #0
   19280:	movcc	r1, #0
   19284:	bcc	192a0 <__assert_fail@plt+0x8078>
   19288:	mov	r3, #1
   1928c:	subs	r4, r4, r6
   19290:	lsl	r1, r3, lr
   19294:	lsl	r0, r3, ip
   19298:	orr	r1, r1, r3, lsr r8
   1929c:	sbc	r5, r5, r7
   192a0:	cmp	ip, #0
   192a4:	beq	1932c <__assert_fail@plt+0x8104>
   192a8:	lsrs	r3, r7, #1
   192ac:	rrx	r2, r6
   192b0:	mov	r6, ip
   192b4:	b	192d8 <__assert_fail@plt+0x80b0>
   192b8:	subs	r4, r4, r2
   192bc:	sbc	r5, r5, r3
   192c0:	adds	r4, r4, r4
   192c4:	adc	r5, r5, r5
   192c8:	adds	r4, r4, #1
   192cc:	adc	r5, r5, #0
   192d0:	subs	r6, r6, #1
   192d4:	beq	192f4 <__assert_fail@plt+0x80cc>
   192d8:	cmp	r5, r3
   192dc:	cmpeq	r4, r2
   192e0:	bcs	192b8 <__assert_fail@plt+0x8090>
   192e4:	adds	r4, r4, r4
   192e8:	adc	r5, r5, r5
   192ec:	subs	r6, r6, #1
   192f0:	bne	192d8 <__assert_fail@plt+0x80b0>
   192f4:	lsr	r6, r4, ip
   192f8:	lsr	r7, r5, ip
   192fc:	orr	r6, r6, r5, lsl r8
   19300:	adds	r2, r0, r4
   19304:	orr	r6, r6, r5, lsr lr
   19308:	adc	r3, r1, r5
   1930c:	lsl	r1, r7, ip
   19310:	orr	r1, r1, r6, lsl lr
   19314:	lsl	r0, r6, ip
   19318:	orr	r1, r1, r6, lsr r8
   1931c:	subs	r0, r2, r0
   19320:	mov	r4, r6
   19324:	mov	r5, r7
   19328:	sbc	r1, r3, r1
   1932c:	cmp	r9, #0
   19330:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19334:	strd	r4, [r9]
   19338:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1933c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19340:	mov	r7, r0
   19344:	ldr	r6, [pc, #72]	; 19394 <__assert_fail@plt+0x816c>
   19348:	ldr	r5, [pc, #72]	; 19398 <__assert_fail@plt+0x8170>
   1934c:	add	r6, pc, r6
   19350:	add	r5, pc, r5
   19354:	sub	r6, r6, r5
   19358:	mov	r8, r1
   1935c:	mov	r9, r2
   19360:	bl	10ef0 <calloc@plt-0x20>
   19364:	asrs	r6, r6, #2
   19368:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1936c:	mov	r4, #0
   19370:	add	r4, r4, #1
   19374:	ldr	r3, [r5], #4
   19378:	mov	r2, r9
   1937c:	mov	r1, r8
   19380:	mov	r0, r7
   19384:	blx	r3
   19388:	cmp	r6, r4
   1938c:	bne	19370 <__assert_fail@plt+0x8148>
   19390:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19394:			; <UNDEFINED> instruction: 0x00011bbc
   19398:			; <UNDEFINED> instruction: 0x00011bb4
   1939c:	bx	lr
   193a0:	ldr	r3, [pc, #12]	; 193b4 <__assert_fail@plt+0x818c>
   193a4:	mov	r1, #0
   193a8:	add	r3, pc, r3
   193ac:	ldr	r2, [r3]
   193b0:	b	11120 <__cxa_atexit@plt>
   193b4:	andeq	r1, r1, r0, ror sp

Disassembly of section .fini:

000193b8 <.fini>:
   193b8:	push	{r3, lr}
   193bc:	pop	{r3, pc}
